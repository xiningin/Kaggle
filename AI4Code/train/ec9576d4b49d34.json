{"cell_type":{"9c83b791":"code","c8138321":"code","65cd2fc8":"code","1d3cafe4":"code","4c762a15":"code","01a66e9e":"code","85a185ff":"code","c4770b36":"code","03528fa5":"code","00ab3641":"code","01d08b6c":"code","c9e3d72e":"code","726c103b":"code","4b33361b":"code","ae70f104":"code","94dbe8f0":"code","5f0b7529":"markdown"},"source":{"9c83b791":"# Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Patch\nfrom matplotlib.lines import Line2D\nfrom matplotlib.ticker import MaxNLocator\nimport seaborn as sns\n\n# Start Seaborn Templates and read Covid Dataset\nsns.set()\nsns.set_style(\"whitegrid\")\n\ndataset = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ndataset.tail()","c8138321":"dataset.info()","65cd2fc8":"# Drop unnecessary collums\ndataset.drop(labels=[\"SNo\", \"Last Update\"], axis=1, inplace=True)\n\n# And set up \"Unkown\" value for Coutries without specified states\ndataset.fillna(value=\"Unknown\", inplace=True)\n\n# Some name fixes\ndataset.rename(columns={\"Country\/Region\": \"Country\", \"Province\/State\": \"Province\"}, inplace=True)\n\ndataset.loc[ dataset[\"Country\"] == \"Mainland China\", \"Country\"] = \"China\"\ndataset.loc[ dataset[\"Country\"] == \"Others\", \"Country\"] = \"Diamond Princess\"\ndataset.loc[ dataset[\"Province\"] == \"Bavaria\", \"Province\"] = \"Unknown\"\ndataset.loc[ dataset[\"Province\"] == \"None\", \"Province\"] = \"Unknown\"\ndataset.loc[ dataset[\"Province\"] == \"From Diamond Princess\", \"Province\"] = \"Unknown\"\n\n# Create new column for currently affected patients\ndataset[\"Affected\"] = dataset[\"Confirmed\"] - dataset[\"Deaths\"] - dataset[\"Recovered\"]\ndataset.info()\n","1d3cafe4":"# Some dates have year as 2020 and some as 20, so we want to standardized that\ndef clean_date(date):\n    if len(date) > 8:\n        return date[0:8]\n    else:\n        return date\n\ndataset[\"ObservationDate\"] = dataset[\"ObservationDate\"].apply(clean_date)","4c762a15":"# Now we read data set with country and continets data, get ability to compare how every continent is doing \ncou_cont = pd.read_csv(\"..\/input\/country-to-continent\/countryContinent.csv\", encoding=\"iso-8859-1\")\n\n# Drop unnecessary colums, rename to match covid dateset and add some missing countries\ncou_cont = cou_cont[[\"country\", \"continent\"]]\ncou_cont.rename(columns={\"country\": \"Country\", \"continent\": \"Continent\"}, inplace=True)\nmore_continents = pd.DataFrame([\n    [\"Macau\", \"Asia\"], \n    [\"Ivory Coast\", \"Africa\"], \n    [\"North Ireland\", \"Europe\"], \n    [\"North Macedonia\", \"Europe\"], \n    [\"UK\", \"Europe\"], \n    [\"Iran\", \"Asia\"], \n    [\" Azerbaijan\", \"Asia\"], \n    [\"Others\", \"Other\"], \n    [\"Russia\", \"Europe\"], \n    [\"Taiwan\", \"Asia\"], \n    [\"US\", \"Americas\"], \n    [\"South Korea\", \"Asia\"], \n    [\"Vietnam\", \"Asia\"],\n    ['Diamond Princess', 'Asia'], \n    ['Saint Barthelemy', 'Americas'],\n    ['Palestine', 'Asia'],\n    ['Vatican City', 'Europe'],\n    ['Republic of Ireland', 'Europe'], \n    ['Moldova', 'Europe'],\n    ['St. Martin', 'Americas'],\n    ['Brunei', 'Asia'],\n    ['occupied Palestinian territory',  'Asia'],\n    [\"('St. Martin',)\", 'Americas'],\n    ['Channel Islands', 'Europe'],\n    ['Bolivia',  'Americas'],\n    ['Congo (Kinshasa)',  'Africa'],\n    ['Reunion', 'Africa'],\n    ['Venezuela',  'Americas'],\n    ['Curacao',  'Americas'],\n    ['Eswatini', 'Africa'],\n    ['Kosovo', 'Europe'],\n    ['Congo (Brazzaville)',  'Africa'],\n    ['Republic of the Congo',  'Africa'],\n    ['Tanzania', 'Africa'],\n    ['The Bahamas',  'Americas'],\n    ['The Gambia',  'Africa'],\n    ['Gambia, The',  'Africa'],\n    ['Bahamas, The', 'Americas'],\n    ['Cape Verde', 'Africa'],\n    ['East Timor',  'Oceania'],\n    ['Syria',  'Asia'],\n    ['Laos',  'Asia'],\n    ['West Bank and Gaza', 'Asia'],\n    ['Burma',  'Asia'],\n    ['MS Zaandam', 'Americas'],\n], columns=[\"Country\", \"Continent\"])\n\ncou_cont = cou_cont.append(more_continents)\n\n# Now merge 2 datasets, and check if its all right\ndataset = pd.merge(dataset, cou_cont, on=\"Country\", how=\"left\")\n\ndataset.info()\n#dataset.loc[ dataset.isnull().any(axis=1), \"Country\"].unique()","01a66e9e":"# Create some grouped datasets for later use\nlatest = dataset.groupby([\"Province\", \"Country\"]).last().reset_index().copy()\nfirst = dataset.loc[dataset[\"Confirmed\"] > 0, [\"ObservationDate\", \"Country\", \"Confirmed\"]].groupby([\"Country\"]).first().reset_index().copy()\nglobal_daybyday = dataset.groupby(\"ObservationDate\").sum().reset_index().copy()\n\n# Create color maps\ncmap = plt.get_cmap(\"tab20\")\ntab20b = plt.get_cmap(\"tab20b\")\n\ncolors_dict = {\n    \"Confirmed\": cmap(2),\n    \"Affected\": cmap(0),\n    \"Deaths\": cmap(6),\n    \"DeathRatio\": cmap(6),\n    \"Recovered\": cmap(4),\n}\n\ncolors_cont = {\n    \"Europe\": cmap(0),\n    \"Asia\": cmap(6),\n    \"Americas\": cmap(4),\n    \"Oceania\": cmap(19),\n    \"Africa\": cmap(2),\n}\n\ncolors = cmap(np.array([2, 4, 6, 0, 19, 15]))\n#print(colors_dict)\n\n# And some chart variables\nxtl_size = 14\nytl_size = 14\ndate_step = 4","85a185ff":"# We sum number of confirmed cases in every continent in certain day\ncont_daybyday = dataset.groupby([\"ObservationDate\", \"Continent\"]).sum().reset_index().copy()\n\n# Change it to long df format\ncont_long = pd.melt(cont_daybyday[[\"ObservationDate\", \"Confirmed\", \"Continent\"]], id_vars=[\"ObservationDate\", \"Continent\"], value_vars=[\"Confirmed\"])\n                   \n# And draw chart\nplt.figure(figsize=(15,5))\n\nax = sns.lineplot(x=\"ObservationDate\", y=\"value\", hue=\"Continent\", data=cont_long, palette=colors_cont)\nsns.despine()\n\nplt.xticks(rotation='vertical')\n\nax.spines['left'].set_color('none')\n\nax.set_ylim(0, cont_daybyday[\"Confirmed\"].max()*1.1)\nax.set_xlabel(\"\")\nax.set_ylabel(\"\")\n\nax.tick_params(axis=\"y\", labelsize=ytl_size)\nax.tick_params(axis=\"x\", labelsize=xtl_size)\n\nax.set_xticks(ax.get_xticks()[::date_step])\n\nax.set_title(\"Confirmed Cases by Continent day by day\", fontsize=20)\n\nax.legend(labels=cont_long[\"Continent\"].unique(), facecolor='white', edgecolor='white', prop={'size': xtl_size})\nax.grid(False, axis=\"x\")\n\nplt.show()","c4770b36":"# So now we count present number of currently affected and confirmed cases for every continent\ncontinents = latest.groupby([\"Continent\"]).sum().reset_index().copy()\n\n# And plot it as bar plot\nfig, axes = plt.subplots(1, 2)\nfig.set_size_inches(11,5)\n\n\naxes[0].pie(continents[\"Confirmed\"], startangle=90, radius=1, colors=colors, wedgeprops=dict(width=0.3, edgecolor='w'))\naxes[0].set_title('Confirmed cases per continent', fontsize=17)\n\naxes[1].pie(continents[\"Affected\"], startangle=90, radius=1, colors=colors, wedgeprops=dict(width=0.3, edgecolor='w'))\naxes[1].set_title('Currently Affected per continent', fontsize=17)\n\nhandles = axes[1].get_legend_handles_labels()\n\nfig.legend(labels = continents[\"Continent\"].unique(), loc='center', frameon=False)\n\nplt.show()\n#continents.sort_values(\"Confirmed\", ascending=False).reset_index(drop=True).head(10)","03528fa5":"# We sum number of cases in every country to get number of cases worldwide\ndaybyday = pd.melt(global_daybyday[[\"ObservationDate\", \"Confirmed\",\"Deaths\", \"Affected\", \"Recovered\"]], id_vars=[\"ObservationDate\"], value_vars=[\"Confirmed\",\"Deaths\", \"Affected\", \"Recovered\"])\n\n# And plot it as line plot\nplt.figure(figsize=(15,5))\n\nax = sns.lineplot(x=\"ObservationDate\", y=\"value\", hue=\"variable\", data=daybyday, palette=colors_dict)\n\nsns.despine()\n\nplt.xticks(rotation='vertical')\n\nax.spines['left'].set_color('none')\n\nax.set_ylim(0, global_daybyday[\"Confirmed\"].max()*1.1)\nax.set_xlabel(\"\")\nax.set_ylabel(\"\")\n\nax.tick_params(axis=\"y\", labelsize=ytl_size)\nax.tick_params(axis=\"x\", labelsize=xtl_size)\n\nax.set_xticks(ax.get_xticks()[::date_step])\n\nax.set_title(\"Global spread of pandemic\", fontsize=20)\nax.legend(labels=[\"Confirmed\",\"Deaths\", \"Affected\", \"Recovered\"], facecolor='white', edgecolor='white', prop={'size': xtl_size})\nax.grid(False, axis=\"x\")\n\nplt.show()","00ab3641":"# In first step of panthemic most cases was raported in china, later USA become country with higher number\n# of cases, we want to show number of new cases every day in China, USA, Rest of world and Total, to compare\n# different states od pancemic\n\n# First we count number of cases worldwide every day, and take derivative to get number of new cases\nworld_new = dataset.groupby(\"ObservationDate\").sum().reset_index().set_index(\"ObservationDate\").copy()\nworld_new = world_new[\"Confirmed\"].diff().dropna()\n\n# Now we do the same but first filter data to China only\nchina_new = dataset[ dataset[\"Country\"] == \"China\" ].groupby(\"ObservationDate\").sum().reset_index().set_index(\"ObservationDate\").copy()\nchina_new = china_new[\"Confirmed\"].diff().dropna()\n\n# And US only\nus_new = dataset[ dataset[\"Country\"] == \"US\" ].groupby(\"ObservationDate\").sum().reset_index().set_index(\"ObservationDate\").copy()\nus_new = us_new[\"Confirmed\"].diff().dropna()\n\n# And now rest of the world\nnonchina_new = dataset[ (dataset[\"Country\"] != \"China\") & (dataset[\"Country\"] != \"US\") ].groupby(\"ObservationDate\").sum().reset_index().set_index(\"ObservationDate\").copy()\nnonchina_new = nonchina_new[\"Confirmed\"].diff().dropna()\n\n# Now we make one dateframe from all 4 above in long format\nnew_cases = pd.concat({'Total': world_new, 'China': china_new, 'Non US, non China': nonchina_new, 'USA': us_new}).reset_index()\n\n# And plot it as line plot\nplt.figure(figsize=(15,5))\n\nax = sns.lineplot(x=\"ObservationDate\", y=\"Confirmed\", hue=\"level_0\", data=new_cases, palette={'USA': cmap(0), 'China': cmap(6), 'Non US, non China': cmap(4), 'Total': cmap(2)})\nsns.despine()\n\nplt.xticks(rotation='vertical')\n\nax.spines['left'].set_color('none')\n\nax.set_ylim(0, new_cases[\"Confirmed\"].max()*1.1)\nax.set_xlabel(\"\")\nax.set_ylabel(\"\")\n\nax.tick_params(axis=\"y\", labelsize=ytl_size)\nax.tick_params(axis=\"x\", labelsize=xtl_size)\n\nax.set_xticks(ax.get_xticks()[::date_step])\n\nax.set_title(\"New confirmed cases day by day\", fontsize=20)\n\nax.legend(labels=new_cases[\"level_0\"].unique(), facecolor='white', edgecolor='white', prop={'size': xtl_size})\nax.grid(False, axis=\"x\")\n\nplt.show()","01d08b6c":"# We want to plot situation in countries with most cases so we use latest df, that have present data,\n# and sum by country (to get rid of states), and get top10 values\ntop_10 = latest.groupby(\"Country\").sum().sort_values(\"Confirmed\", ascending=False).reset_index().head(10).copy()\n\n# Drop unnecesary columns and change df format to long\ntop_10_wide = pd.melt(top_10[[\"Country\", \"Recovered\", \"Deaths\", \"Affected\"]], id_vars=[\"Country\"], value_vars=[\"Affected\", \"Recovered\",\"Deaths\"])\n\n# And plot it as combined bar plot\nplt.figure(figsize=(15,8))\nax = sns.barplot(y=\"Country\", x=\"value\", hue=\"variable\", data=top_10_wide, palette=colors_dict)\n\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\nax.spines['bottom'].set_color('none')\n\nax.tick_params(axis=\"y\", labelsize=ytl_size)\nax.tick_params(axis=\"x\", labelsize=xtl_size)\n\nax.set_xlabel(\"\")\nax.set_ylabel(\"\")\nax.set_title(\"Countries with highest number of cases\", fontsize=20)\n\nax.legend(facecolor='white', edgecolor='white', prop={'size': xtl_size}).set_title('')\n\nplt.show()","c9e3d72e":"# Now, we want to show current highest grows as barplot, so we group df by country and date\nconfirmed_wide = dataset[[\"ObservationDate\", \"Confirmed\", \"Province\", \"Country\"]].groupby([\"Country\", \"ObservationDate\"]).sum().reset_index().copy()\n\n# Change format to wide, to have different column for every country, and fill missing values with 0.0\nconfirmed_wide = pd.pivot(confirmed_wide, columns=\"Country\", index=\"ObservationDate\", values=\"Confirmed\").fillna(0.0)\n\n# Take derivative to get number of new cases, drop other than last rows, sort by highest grow, and limit to 10 countries\nconfirmed_wide = confirmed_wide.diff().transpose().iloc[:,-1].sort_values(ascending=False).head(10)\n\n# and now we plot it as barplow\nplt.figure(figsize=(15,8))\nax = sns.barplot(x=confirmed_wide.values, y=confirmed_wide.index, palette=sns.color_palette(\"GnBu_d\", 10))\n\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\nax.spines['bottom'].set_color('none')\n\nax.tick_params(axis=\"x\", labelsize=xtl_size)\nax.tick_params(axis=\"y\", labelsize=ytl_size)\n\nax.set_xlabel(\"\")\nax.set_ylabel(\"\")\nax.set_title(\"Yesterday new cases by country\", fontsize=20)\n\nax.legend(frameon=False).set_title('')\n\nplt.show()","726c103b":"# country_praphs function, that can show us situation in given country\n# country - name of country, in str format\n# state - False if we dont want the line plot of Confirmed\/Affected\/Recovered\/Deaths\n# rise - False if we dont want to combined barplot of new cases and line plot of cumulative cases\ndef country_graphs(country, state=True, rise=True):\n    \n    # get from ds data about give country\n    cdataset = dataset[ dataset[\"Country\"] == country ].groupby(\"ObservationDate\").sum().reset_index().copy()\n    \n    # Line plot of Confirmed\/Affected\/Recovered\/Deaths\n    if state == True:\n        \n        # Change format of data to long format needed by matplotlib\n        cdataset_long = pd.melt(cdataset[[\"ObservationDate\", \"Confirmed\", \"Deaths\", \"Affected\", \"Recovered\"]], id_vars=[\"ObservationDate\"], value_vars=[\"Confirmed\",\"Deaths\", \"Affected\", \"Recovered\"])\n\n        # And plot it as line chart\n        plt.figure(figsize=(15,5))\n        \n        ax = sns.lineplot(x=\"ObservationDate\", y=\"value\", hue=\"variable\", data=cdataset_long, palette=colors_dict)\n        sns.despine()\n        \n        plt.xticks(rotation='vertical')\n        \n        ax.set_ylim(0, cdataset[\"Confirmed\"].max()*1.1)\n        ax.spines['left'].set_color('none')\n        \n        ax.set_xlabel(\"\")\n        ax.set_ylabel(\"\")\n        \n        ax.tick_params(axis=\"y\", labelsize=ytl_size)\n        ax.tick_params(axis=\"x\", labelsize=xtl_size)\n        ax.set_xticks(ax.get_xticks()[::date_step])\n        \n        ax.set_title(\"Spread of pandemic in \" + country, fontsize=20)\n        ax.legend(labels=[\"Confirmed\",\"Deaths\", \"Affected\", \"Recovered\"], facecolor='white', edgecolor='white', prop={'size': xtl_size})\n        ax.grid(False, axis=\"x\")\n    \n    # Combined barplot of new cases and line plot of cumulative cases\n    if rise == True:\n        \n        # Copy data from df but only date and number confirmed cases\n        cconfirmed = cdataset[[\"Confirmed\", \"ObservationDate\"]].copy()\n\n        # Take derivative of number cases to get number of new cases\n        cconfirmed[\"New\"] = cconfirmed[\"Confirmed\"].diff()\n        \n        # Plot bar plot as ax1, and line plot as ax2\n        fig = plt.figure(figsize=(15,5))\n     \n        ax1 = fig.add_subplot(111)\n        g1 = sns.barplot(x=\"ObservationDate\", y=\"New\", data=cconfirmed, color=colors_cont[\"Oceania\"], ax=ax1)\n\n        plt.xticks(rotation='vertical')    \n\n        ax2 = ax1.twinx()\n        g2 = sns.lineplot(x=\"ObservationDate\", y=\"Confirmed\", data=cconfirmed, color=colors_dict[\"Confirmed\"], ax=ax2)\n        \n        sns.despine()\n        \n        ax1.set_ylim(0)\n        ax1.grid(False)\n        ax1.tick_params(axis='y', labelcolor=colors_dict[\"Affected\"], labelleft=False, labelright=True, left=False, right=True) \n   \n        ax2.set_ylim(0)\n        ax2.grid(False, axis=\"x\")\n        ax2.tick_params(axis='y', labelcolor=colors_dict[\"Confirmed\"], labelleft=True, labelright=False, left=True, right=False) \n\n        ax2.set_yticks(np.linspace(ax2.get_yticks()[0], ax2.get_yticks()[-1], len(ax1.get_yticks())))\n        ax1.set_yticks(np.linspace(ax1.get_yticks()[0], ax1.get_yticks()[-1], len(ax2.get_yticks())))        \n\n        ax1.tick_params(axis=\"y\", labelsize=ytl_size)\n        ax2.tick_params(axis=\"y\", labelsize=ytl_size)\n        ax1.tick_params(axis=\"x\", labelsize=xtl_size+2)\n        ax2.set_xticks(ax2.get_xticks()[::date_step])\n        \n        ax1.spines['left'].set_color('none')\n        ax1.set_xlabel(\"\")\n        ax1.set_ylabel(\"\")\n        ax2.set_ylabel(\"\")        \n        ax1.set_title(\"Cumulative and New cases in \" + country, fontsize=20)\n        \n        handles = [Line2D([0], [0], marker='o', color=colors_dict[\"Confirmed\"]),\n                   Patch(color=colors_cont[\"Oceania\"])]\n        \n        ax2.legend(handles = handles, labels = [\"Confirmed\", \"New\"], facecolor='white', edgecolor='white', loc=2, prop={'size': xtl_size})\n\n        plt.show()\n\n# Italy example\ncountry_graphs(\"Italy\", True, True)","4b33361b":"# Now, we want to show change in covid mortality rate\n# To count this, we need number of confirmed cases, and deaths every day\nmortality = global_daybyday[[\"ObservationDate\", \"Confirmed\", \"Deaths\"]].copy()\n\n# Mortality rate is deaths\/confirmed, *100 to get percentage\nmortality[\"DeathRatio\"] = mortality[\"Deaths\"] * 100 \/ mortality[\"Confirmed\"]\n\n# Now we plot change as line plot\nplt.figure(figsize=(15,5))\nax = sns.lineplot(x=\"ObservationDate\", y=\"DeathRatio\", data=mortality, palette=colors_dict)\nsns.despine()\n\nax.set_ylim(0, mortality[\"DeathRatio\"].max()*1.1)\n\nax.set_xlabel(\"\")\nax.set_ylabel(\"\")\n\nplt.xticks(rotation='vertical')\nax.tick_params(axis=\"y\", labelsize=ytl_size)\nax.tick_params(axis=\"x\", labelsize=xtl_size)\nax.set_xticks(ax.get_xticks()[::date_step])\n        \nax.spines['left'].set_color('none')\nax.set_title(\"Change of Global Mortality Rate in time\", fontsize=20)\nax.grid(False, axis=\"x\")\n\n# And add arrow with text, to easly show current value\nplt.annotate(str(round(mortality[\"DeathRatio\"].iloc[-1],2)) + \"%\", \n            xy=(mortality.shape[0]-1, mortality[\"DeathRatio\"].iloc[-1]),  \n            xycoords='data',\n            xytext=(mortality.shape[0]-5, mortality[\"DeathRatio\"].iloc[-1]-0.8), \n            textcoords='data',\n            arrowprops=dict(color=('black'),\n                            arrowstyle=\"<-\",\n                            connectionstyle=\"arc3\"))\n\nplt.show()","ae70f104":"# Now we want to compare mortality rate in countries with highest number of cases\n# Get dataset with present data, and get rid of states\nsickest_countries = latest.groupby(\"Country\").sum().reset_index().copy()\n\n# Limit df to only countries with 100000+ cases\nsickest_countries = sickest_countries[sickest_countries[\"Confirmed\"] > 100000][[\"Country\", \"Confirmed\", \"Deaths\"]]\n\n# Add World row\nsickest_countries = sickest_countries.append({\"Country\":\"World\", \n                                              \"Confirmed\": latest[\"Confirmed\"].sum(), \n                                              \"Deaths\": latest[\"Deaths\"].sum()}, \n                                             ignore_index=True)\n\n# Calculate mortality rate, and sort from hightest to lowest\nsickest_countries[\"DeathRatio\"] = round(sickest_countries[\"Deaths\"] * 100 \/ sickest_countries[\"Confirmed\"], 2)\n\nsickest_countries = sickest_countries.sort_values(\"DeathRatio\", ascending=False).reset_index(drop=True)\n\n# Color palette\nmort_colors = sns.dark_palette(\"purple\", sickest_countries.shape[0])\n\nmort_colors[sickest_countries[ sickest_countries[\"Country\"] == \"World\" ].index[0]] = tab20b(0)\n\n# Bar plot\nplt.figure(figsize=(15,8))\nax = sns.barplot(x=\"DeathRatio\", y=\"Country\", data=sickest_countries, palette=mort_colors)\n\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\nax.spines['bottom'].set_color('none')\n\nax.tick_params(axis=\"y\", labelsize=ytl_size)\nax.tick_params(axis=\"x\", labelsize=xtl_size)\n\nax.set_xticks(ax.get_xticks()[::date_step])\n\n# Text\nfor i in range(0, sickest_countries.shape[0]):\n    ax.text(sickest_countries.iloc[i,3]+0.1,\n        i+0.1,\n        str(round(sickest_countries.iloc[i,3],2)) + \"%\", \n        color='black', ha=\"left\", fontsize=14, backgroundcolor=\"white\")\n \nax.set_xlabel(\"\")\nax.set_ylabel(\"\")\nax.set_title(\"Mortality Rate (in terms of Confirmed) in Countries with 100000+ cases\", fontsize=20)\n\nax.legend(frameon=False).set_title('')\n\nplt.show()","94dbe8f0":"# For last plot, we want to show top 10 most deadliest days (counting every country separately)\n# To do this, we need to sum dateset by country (to get rid of states)\ndeadliest_days = dataset[[\"ObservationDate\", \"Deaths\", \"Province\", \"Country\"]].groupby([\"Country\", \"ObservationDate\"]).sum().reset_index().copy()\n\n# Now we change format to wide, becouse we need separete column for every country, and take derivatice\n# to get number of new deaths in certain day\ndeadliest_days = pd.pivot(deadliest_days, columns=\"Country\", index=\"ObservationDate\", values=\"Deaths\").fillna(0.0).diff().fillna(0.0).reset_index()\n\n# Now we change format to long, and take top 10 days\ndeadliest_long = pd.melt(deadliest_days, id_vars=[\"ObservationDate\"], value_vars=deadliest_days.columns.to_list()[1:]).sort_values(\"value\", ascending=False).reset_index(drop=True).head(10)\n \n# And plot date using bar plot\nplt.figure(figsize=(15,8))\nax = sns.barplot(x=deadliest_long[\"value\"], y=deadliest_long.index.to_list(), palette=sns.dark_palette(\"purple\", 10), orient=\"h\")\n\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\nax.spines['bottom'].set_color('none')\n\n# Add text to bars\nfor i in range(0, 10):\n    ax.text(25,\n        i+0.1,\n        deadliest_long.iloc[i,0] + ' - ' + deadliest_long.iloc[i,1] + ' - ' + str(int(deadliest_long.iloc[i,2])) + \"\u2020\", \n        color='white', ha=\"left\", fontsize=14)\n \nax.set_xlabel(\"\")\nax.set_ylabel(\"\")\nax.set_title(\"Higheest numbers of new deaths in one country\", fontsize=20)\n\nplt.tick_params(left=False, labelleft=False, bottom=False, labelbottom=False)\n\nax.legend(frameon=False).set_title('')\nax.grid(False)\n\nplt.show()","5f0b7529":"### COVID-19 Pandemic Visualisation\n\nI created some visualizations of CoVid-19 pandemic. I'm open for all suggestions or ideas."}}