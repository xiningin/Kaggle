{"cell_type":{"327cd5bc":"code","520bed2b":"code","5da32079":"code","7701cc25":"code","8a1dd94c":"code","444ac79d":"code","734864a8":"code","ea6c0b47":"code","071491c2":"code","67499801":"code","a15c7275":"code","1560b32f":"code","86970642":"code","297e3d26":"code","456ed388":"code","8f0fb440":"code","f59448fe":"code","aaf8c514":"code","6f806af3":"code","a338cdf5":"code","2fa7ed50":"code","a3770736":"code","356a0516":"code","28bcea70":"code","f0d62aeb":"code","349b52d8":"code","a598d7d1":"code","5549d1ef":"code","82934d1d":"code","5596a499":"code","b6993a7a":"code","afc3b2cf":"code","08328a67":"code","2d614a5b":"code","56ebc09a":"markdown","5a098f40":"markdown","88721699":"markdown","3c499523":"markdown","660c238c":"markdown","af585540":"markdown","47fa478f":"markdown","5a639c57":"markdown","e2455b25":"markdown","c18dc7ce":"markdown","43c2ffe1":"markdown","b654e8c9":"markdown","1914e7e3":"markdown","6eba59e0":"markdown","e9abd603":"markdown"},"source":{"327cd5bc":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","520bed2b":"data_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndata_test = pd.read_csv('..\/input\/titanic\/test.csv')","5da32079":"data_test","7701cc25":"data_train","8a1dd94c":"data_union = data_train.append(data_test)","444ac79d":"data_union.isna().sum()","734864a8":"data_train.drop(['Cabin', 'Ticket', 'Name'], axis = 1, inplace = True)\ndata_test.drop(['Cabin', 'Ticket', 'Name'], axis = 1, inplace = True)","ea6c0b47":"data_train['Age']=data_train['Age'].fillna(data_train.groupby(['Sex'])['Age'].transform('median'))\ndata_test['Age']=data_test['Age'].fillna(data_test.groupby(['Sex'])['Age'].transform('median'))\n\ndata_train.Fare.fillna(data_train.Fare.mean(), inplace = True)\ndata_test.Fare.fillna(data_test.Fare.mean(), inplace = True)","071491c2":"data_train.groupby(\"Embarked\").count()","67499801":"data_train.Embarked.fillna(\"S\", inplace=True)\ndata_test.Embarked.fillna(\"S\", inplace=True)","a15c7275":"data_union = data_train.append(data_test)\ndata_union.isna().sum()","1560b32f":"encoder_1 = LabelEncoder()\n\n# Fit the encoder on the data\nencoder_1.fit(data_train[\"Sex\"])\n\n# Transform and replace the training data\ntraining_sex_encoded = encoder_1.transform(data_train[\"Sex\"])\ndata_train[\"Sex\"] = training_sex_encoded\n\nencoder_2 = LabelEncoder()\n\nencoder_2.fit(data_train[\"Embarked\"])\n\ntraining_embarked_encoded = encoder_2.transform(data_train[\"Embarked\"])\ndata_train[\"Embarked\"] = training_embarked_encoded","86970642":"encoder_1 = LabelEncoder()\n\n# Fit the encoder on the data\nencoder_1.fit(data_test[\"Sex\"])\n\n# Transform and replace the training data\ntraining_sex_encoded = encoder_1.transform(data_test[\"Sex\"])\ndata_test[\"Sex\"] = training_sex_encoded\n\nencoder_2 = LabelEncoder()\n\nencoder_2.fit(data_test[\"Embarked\"])\n\ntraining_embarked_encoded = encoder_2.transform(data_test[\"Embarked\"])\ndata_test[\"Embarked\"] = training_embarked_encoded","297e3d26":"data_train","456ed388":"data_test","8f0fb440":"X = data_train.drop(['Survived', 'PassengerId'], axis = 1)\ny = data_train.Survived","f59448fe":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\nrf = RandomForestClassifier()\nparam_grid={'max_depth': range(1, 10), \n            'min_samples_split': range(20, 60, 10), \n            'min_samples_leaf': range(5, 35, 5), \n            'n_estimators': range(350, 400, 50)}\ngreed_rf = GridSearchCV(rf, param_grid, cv = 5, n_jobs = -1)","aaf8c514":"greed_rf.fit(X_train, y_train)","6f806af3":"best_clf = greed_rf.best_estimator_\nbest_clf","a338cdf5":"imp = pd.DataFrame(best_clf.feature_importances_, index=X_train.columns, columns=['importance'])\nimp.sort_values('importance').plot(kind='barh', figsize=(12, 8))","2fa7ed50":"y_pred = best_clf.predict(X_test)","a3770736":"y_pred","356a0516":"accuracy_score(y_test, y_pred)","28bcea70":"new_train = data_train.drop(['Embarked', 'Parch'], axis = 1)\nnew_test = data_test.drop(['Embarked', 'Parch'], axis = 1)\nnew_train","f0d62aeb":"X = new_train.drop(['Survived', 'PassengerId'], axis = 1)\ny = new_train.Survived","349b52d8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\nrf = RandomForestClassifier()\nparam_grid={'max_depth': range(1, 10), \n            'min_samples_split': range(20, 60, 10), \n            'min_samples_leaf': range(5, 35, 5), \n            'n_estimators': range(350, 400, 50)}\ngreed_rf = GridSearchCV(rf, param_grid, cv = 5, n_jobs = -1)\n\ngreed_rf.fit(X_train, y_train)\nbest_clf = greed_rf.best_estimator_\n\nbest_clf","a598d7d1":"y_pred = best_clf.predict(X_test)","5549d1ef":"y_pred","82934d1d":"accuracy_score(y_test, y_pred)","5596a499":"final_test = new_test.drop(['PassengerId'], axis=1)","b6993a7a":"best_clf.fit(X, y)","afc3b2cf":"pred = best_clf.predict(final_test)","08328a67":"pred","2d614a5b":"pd.DataFrame({\n    \"PassengerId\": range(892, len(pred)+892),\n    \"Survived\": pred\n    }).to_csv('submission.csv', index=False, header=True)","56ebc09a":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","5a098f40":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.","88721699":"\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.","3c499523":"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 NA \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u043d\u0438\u0445.","660c238c":"\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 'Sex' \u0438 'Embarked' \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.","af585540":"\u0423\u0431\u0435\u0440\u0435\u043c \u0438\u0437 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u043c\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0442\u0435 \u0436\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0438.","47fa478f":"\u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438.","5a639c57":"\u0417\u0430\u0442\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0432\u0441\u0435 NA \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0414\u043b\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u0430 Age \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0433\u0440\u0443\u043f\u043f \u043c\u0443\u0436\u0447\u0438\u043d \u0438 \u0436\u0435\u043d\u0449\u0438\u043d. \u0414\u043b\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u0430 Fare \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 Embarked \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043c\u043e\u0434\u043e\u0439 - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 'S'.","e2455b25":"\u0417\u0430\u0442\u0435\u043c \u0434\u0430\u0435\u043c \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 predict \u043f\u043e \u043e\u0431\u0449\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c.","c18dc7ce":"\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 RandomForestClassifier \u0438 GridSearchCV. RandomForestClassifier \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0437 \u0441\u0435\u0431\u044f \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u044b\u0439 \u043b\u0435\u0441, \u0430 GridSearchCV \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u044d\u0442\u043e\u0433\u043e \u043b\u0435\u0441\u0430.","43c2ffe1":"\u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u044b\u0435 \u0438 \u043d\u0435\u0446\u0435\u043b\u0435\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","b654e8c9":"\u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043b\u0443\u0447\u0448\u0443\u044e \u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439.","1914e7e3":"\u0418 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 csv \u0444\u0430\u0439\u043b.","6eba59e0":"\u0422\u0435\u043f\u0435\u0440\u044c \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f NA.","e9abd603":"\u0423\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b 'Cabin', 'Ticket' \u0438 'Name', \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0438 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u043e\u0447\u044c \u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438."}}