{"cell_type":{"e7eb5372":"code","ba13865f":"code","483dd1bd":"code","7042736a":"code","0e7cb255":"code","ad4ff395":"code","56986904":"code","719052e0":"code","6cc4f3c0":"code","beb2a8d1":"code","5bf5bfbb":"code","5a3886b0":"code","8dda11ec":"code","59709086":"code","ac6a30e0":"code","de8ae3ed":"code","772ee95c":"code","023c973c":"code","6e97fb3d":"code","ca28210f":"code","1bea55f2":"code","7dce391e":"code","34f6b13d":"code","9bace080":"code","8372a6cc":"code","9ad881fb":"code","428714dd":"code","23719f0a":"code","e0965fc9":"code","a76c46bd":"code","b494a972":"code","aebf0374":"code","06738cfe":"code","f434eb94":"code","9e2bd7c3":"code","d2907bdc":"code","78e3be73":"code","2b15a790":"code","20c70a31":"code","662e32a9":"code","09b6fd2c":"code","e0d28e31":"code","d2eca907":"code","5802e3dc":"code","c9aaeda9":"code","c77c9622":"code","9eea95d8":"code","3fa91d9c":"code","5417d4ee":"code","c2098c66":"code","b319809f":"code","f16d04b5":"code","591b0ce2":"code","602614fa":"code","ff09fc32":"code","0b1159c8":"code","9395f306":"code","972cfd9e":"code","298ce6cd":"code","2a455267":"code","13dfca98":"code","82fbbf4e":"code","250d860f":"code","792def27":"code","b5bd37d6":"code","0d6e075f":"code","fb916ee5":"code","1c74b760":"code","fd5a3540":"code","dc8205e5":"code","7a5265f0":"code","65660719":"code","70844c8f":"code","3b6e3928":"code","f2471a83":"code","0ea29a67":"code","93db7921":"code","b4fdc95c":"code","ad6d41d9":"code","e5fd3fff":"code","1272ae7b":"code","a42d565a":"code","e7db62e2":"code","ae693904":"code","28dcda14":"code","b505487c":"code","f0985caf":"code","ef413363":"code","7c18e15b":"code","3254d36e":"code","4a3c5812":"markdown","a814ae29":"markdown","410a5a7e":"markdown","6d200cba":"markdown","1cf719e6":"markdown","8e0dd712":"markdown","63e954bd":"markdown","c5685d44":"markdown"},"source":{"e7eb5372":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ba13865f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pandas import plotting\n\n#plotly \nimport plotly.offline as py\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly import tools\ninit_notebook_mode(connected=True)\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\n# filtering warnings\nimport warnings\nwarnings.simplefilter(action='ignore')","483dd1bd":"train=pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntest=pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')","7042736a":"train.shape, test.shape\n","0e7cb255":"k= pd.DataFrame()\nk['missing count']= train.isnull().sum()\nk.T","ad4ff395":"sample=train.sample(frac=0.3)\n","56986904":"col=['f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10',\n       'f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17', 'f18', 'f19',\n       'f20', 'f21', 'f22', 'f23', 'f24', 'f25', 'f26', 'f27', 'f28',\n       'f29', 'f30', 'f31', 'f32', 'f33', 'f34', 'f35', 'f36', 'f37',\n       'f38', 'f39', 'f40', 'f41', 'f42', 'f43', 'f44', 'f45', 'f46',\n       'f47', 'f48', 'f49', 'f50', 'f51', 'f52', 'f53', 'f54', 'f55',\n       'f56', 'f57', 'f58', 'f59', 'f60', 'f61', 'f62', 'f63', 'f64',\n       'f65', 'f66', 'f67', 'f68', 'f69', 'f70', 'f71', 'f72', 'f73',\n       'f74', 'f75', 'f76', 'f77', 'f78', 'f79', 'f80', 'f81', 'f82',\n       'f83', 'f84', 'f85', 'f86', 'f87', 'f88', 'f89', 'f90', 'f91',\n       'f92', 'f93', 'f94', 'f95', 'f96', 'f97', 'f98', 'f99', 'f100',\n       'f101', 'f102', 'f103', 'f104', 'f105', 'f106', 'f107', 'f108',\n       'f109', 'f110', 'f111', 'f112', 'f113', 'f114', 'f115', 'f116',\n       'f117', 'f118' ]","719052e0":"sample1=sample.dropna()\n","6cc4f3c0":"from sklearn.model_selection import train_test_split\n","beb2a8d1":"x=sample1[col]\ny=sample1['claim']\nX_train, x_test, y_train, y_test=train_test_split(x, y, test_size=0.3, random_state=10)","5bf5bfbb":"from sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, confusion_matrix,ConfusionMatrixDisplay\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf","5a3886b0":"lr=LogisticRegression(solver='liblinear')\nlr.fit(X_train, y_train)","8dda11ec":"y_pred=lr.predict(X_train)\n","59709086":"print(\"Recall Score:-\", metrics.recall_score(y_train, y_pred))\nprint(\"ROC-AUC Score:-\", metrics.roc_auc_score(y_train, y_pred))","ac6a30e0":"y_test_pred=lr.predict(x_test)\n","de8ae3ed":"print(\"Recall Score:-\", metrics.recall_score(y_test, y_test_pred))\nprint(\"ROC-AUC Score:-\", metrics.roc_auc_score(y_test, y_test_pred))","772ee95c":"cfm=confusion_matrix(y_test, y_test_pred)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cfm,\n                               display_labels=lr.classes_)\ndisp.plot() ","023c973c":"y_test_pred_prob=lr.predict_proba(x_test)[:,1]\ny_test_pred_prob\n\nfrom sklearn.metrics import roc_curve\nmetrics.roc_auc_score(y_test, y_test_pred_prob)","6e97fb3d":"fpr, tpr,thresholds=roc_curve(y_test,y_test_pred_prob)\nplt.figure(figsize=(10,10))\nplt.plot([0,1],[0,1],'k--')\nplt.plot(fpr, tpr, label='Logistic Regression')\nplt.xlabel(\"fpr (False Possitive rate)\")\nplt.ylabel(\"tpr-(True Positive rate)\")\nplt.title(\"ROC_AUC\")\nplt.show()","ca28210f":"from scipy import stats\n","1bea55f2":"cor_df=pd.DataFrame(columns=['r','p-value'])\nfor col in sample1:\n   # print(col)\n    if pd.api.types.is_numeric_dtype(sample1[col]):\n        r, p=stats.pearsonr(sample1.claim, sample1[col])\n        cor_df.loc[col]=[r, p]\ncor_df","7dce391e":"cor_df.sort_values(by=['p-value'], ascending=False).head(20)\n","34f6b13d":"col=['f28','f42','f16','f85','f29','f70','f88','f109','f53','f68', 'id', 'claim']","9bace080":"x=sample1.drop(col, axis=1)\ny=sample1['claim']\nX_train, x_test, y_train, y_test=train_test_split(x, y, test_size=0.3, random_state=10)","8372a6cc":"lr=LogisticRegression(solver='liblinear')\nlr.fit(X_train, y_train)","9ad881fb":"y_pred=lr.predict(X_train)\n","428714dd":"print(\"Recall Score:-\", metrics.recall_score(y_train, y_pred))\nprint(\"ROC-AUC Score:-\", metrics.roc_auc_score(y_train, y_pred))","23719f0a":"y_test_pred=lr.predict(x_test)\n","e0965fc9":"print(\"Recall Score:-\", metrics.recall_score(y_test, y_test_pred))\nprint(\"ROC-AUC Score:-\", metrics.roc_auc_score(y_test, y_test_pred))","a76c46bd":"y_test_pred_prob=lr.predict_proba(x_test)[:,1]\ny_test_pred_prob\n\nfrom sklearn.metrics import roc_curve\nmetrics.roc_auc_score(y_test, y_test_pred_prob)","b494a972":"fpr, tpr,thresholds=roc_curve(y_test,y_test_pred_prob)\nplt.figure(figsize=(10,10))\nplt.plot([0,1],[0,1],'k--')\nplt.plot(fpr, tpr, label='Logistic Regression')\nplt.xlabel(\"fpr (False Possitive rate)\")\nplt.ylabel(\"tpr-(True Positive rate)\")\nplt.title(\"ROC_AUC\")\nplt.show()","aebf0374":"from sklearn.neighbors import KNeighborsClassifier\n","06738cfe":"error_rate=[]\n\nfor i in range(1,11):\n    knn=KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    pred=knn.predict(x_test)\n    error_rate.append(np.mean(pred!=y_test))\n    \nplt.figure(figsize=(15,10))\nplt.plot(range(1,11), error_rate,marker='o', markersize=9)","f434eb94":"knn=KNeighborsClassifier(n_neighbors=4)\nknn.fit(X_train, y_train)","9e2bd7c3":"y_pred=knn.predict(X_train)\n","d2907bdc":"print(\"Recall Score:-\", metrics.recall_score(y_train, y_pred))\nprint(\"ROC-AUC Score:-\", metrics.roc_auc_score(y_train, y_pred))","78e3be73":"y_test_pred=knn.predict(x_test)\n","2b15a790":"print(\"Recall Score:-\", metrics.recall_score(y_test, y_test_pred))\nprint(\"ROC-AUC Score:-\", metrics.roc_auc_score(y_test, y_test_pred))","20c70a31":"y_test_pred_prob=knn.predict_proba(x_test)[:,1]\ny_test_pred_prob\n\nfrom sklearn.metrics import roc_curve\nmetrics.roc_auc_score(y_test, y_test_pred_prob)","662e32a9":"fpr, tpr,thresholds=roc_curve(y_test,y_test_pred_prob)\nplt.figure(figsize=(10,10))\nplt.plot([0,1],[0,1],'k--')\nplt.plot(fpr, tpr, label='Logistic Regression')\nplt.xlabel(\"fpr (False Possitive rate)\")\nplt.ylabel(\"tpr-(True Positive rate)\")\nplt.title","09b6fd2c":"from sklearn.impute import SimpleImputer\n","e0d28e31":"my_imputer = SimpleImputer()\n","d2eca907":"data_with_imputed_values = my_imputer.fit_transform(sample)\n","5802e3dc":"sample2=pd.DataFrame(data_with_imputed_values)","c9aaeda9":"sample2.head()","c77c9622":"sample2.columns=sample1.columns","9eea95d8":"sample1.head()","3fa91d9c":"sample2.head()","5417d4ee":"k= pd.DataFrame()\nk['missing count']= sample2.isnull().sum()\nk.T\n","c2098c66":"col=['f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10',\n       'f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17', 'f18', 'f19',\n       'f20', 'f21', 'f22', 'f23', 'f24', 'f25', 'f26', 'f27', 'f28',\n       'f29', 'f30', 'f31', 'f32', 'f33', 'f34', 'f35', 'f36', 'f37',\n       'f38', 'f39', 'f40', 'f41', 'f42', 'f43', 'f44', 'f45', 'f46',\n       'f47', 'f48', 'f49', 'f50', 'f51', 'f52', 'f53', 'f54', 'f55',\n       'f56', 'f57', 'f58', 'f59', 'f60', 'f61', 'f62', 'f63', 'f64',\n       'f65', 'f66', 'f67', 'f68', 'f69', 'f70', 'f71', 'f72', 'f73',\n       'f74', 'f75', 'f76', 'f77', 'f78', 'f79', 'f80', 'f81', 'f82',\n       'f83', 'f84', 'f85', 'f86', 'f87', 'f88', 'f89', 'f90', 'f91',\n       'f92', 'f93', 'f94', 'f95', 'f96', 'f97', 'f98', 'f99', 'f100',\n       'f101', 'f102', 'f103', 'f104', 'f105', 'f106', 'f107', 'f108',\n       'f109', 'f110']","b319809f":"x=sample2[col]\ny=sample2['claim']\nX_train, x_test, y_train, y_test=train_test_split(x, y, test_size=0.3, random_state=10)","f16d04b5":"lr=LogisticRegression(solver='liblinear')\nlr.fit(X_train, y_train)","591b0ce2":"y_pred=lr.predict(X_train)\n","602614fa":"print(\"Recall Score:-\", metrics.recall_score(y_train, y_pred))\nprint(\"ROC-AUC Score:-\", metrics.roc_auc_score(y_train, y_pred))","ff09fc32":"y_test_pred=lr.predict(x_test)\n","0b1159c8":"print(\"Recall Score:-\", metrics.recall_score(y_test, y_test_pred))\nprint(\"ROC-AUC Score:-\", metrics.roc_auc_score(y_test, y_test_pred))","9395f306":"y_test_pred_prob=lr.predict_proba(x_test)[:,1]\ny_test_pred_prob\n\nfrom sklearn.metrics import roc_curve\nmetrics.roc_auc_score(y_test, y_test_pred_prob)","972cfd9e":"fpr, tpr,thresholds=roc_curve(y_test,y_test_pred_prob)\nplt.figure(figsize=(10,10))\nplt.plot([0,1],[0,1],'k--')\nplt.plot(fpr, tpr, label='Logistic Regression')\nplt.xlabel(\"fpr (False Possitive rate)\")\nplt.ylabel(\"tpr-(True Positive rate)\")\nplt.title(\"ROC_AUC\")\nplt.show()","298ce6cd":"#Standardization\nfrom sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nx=sc.fit_transform(x)","2a455267":"\nX_train, x_test, y_train, y_test=train_test_split(x, y, test_size=0.3, random_state=10)","13dfca98":"lr=LogisticRegression(solver='liblinear')\nlr.fit(X_train, y_train)","82fbbf4e":"y_pred=lr.predict(X_train)\n","250d860f":"print(\"Recall Score:-\", metrics.recall_score(y_train, y_pred))\nprint(\"ROC-AUC Score:-\", metrics.roc_auc_score(y_train, y_pred))","792def27":"y_test_pred=lr.predict(x_test)\n","b5bd37d6":"print(\"Recall Score:-\", metrics.recall_score(y_test, y_test_pred))\nprint(\"ROC-AUC Score:-\", metrics.roc_auc_score(y_test, y_test_pred))","0d6e075f":"y_test_pred_prob=lr.predict_proba(x_test)[:,1]\ny_test_pred_prob\n\nfrom sklearn.metrics import roc_curve\nmetrics.roc_auc_score(y_test, y_test_pred_prob)","fb916ee5":"fpr, tpr,thresholds=roc_curve(y_test,y_test_pred_prob)\nplt.figure(figsize=(10,10))\nplt.plot([0,1],[0,1],'k--')\nplt.plot(fpr, tpr, label='Logistic Regression')\nplt.xlabel(\"fpr (False Possitive rate)\")\nplt.ylabel(\"tpr-(True Positive rate)\")\nplt.title(\"ROC_AUC\")\nplt.show()","1c74b760":"from sklearn.impute import SimpleImputer\nmy_imputer = SimpleImputer()\ndata = my_imputer.fit_transform(train)\n","fd5a3540":"df=pd.DataFrame(data)","dc8205e5":"df.columns=sample1.columns","7a5265f0":"X=df.drop(col, axis=1)\ny=df['claim']","65660719":"#Standardization\nfrom sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nX=sc.fit_transform(X)","70844c8f":"\nX_train, x_test, y_train, y_test=train_test_split(X, y, test_size=0.3, random_state=10)","3b6e3928":"lr=LogisticRegression(solver='liblinear')\nlr.fit(X_train, y_train)","f2471a83":"y_pred=lr.predict(X_train)\n","0ea29a67":"print(\"Recall Score:-\", metrics.recall_score(y_train, y_pred))\nprint(\"ROC-AUC Score:-\", metrics.roc_auc_score(y_train, y_pred))","93db7921":"y_test_pred=lr.predict(x_test)\n","b4fdc95c":"print(\"Recall Score:-\", metrics.recall_score(y_test, y_test_pred))\nprint(\"ROC-AUC Score:-\", metrics.roc_auc_score(y_test, y_test_pred))","ad6d41d9":"y_test_pred_prob=lr.predict_proba(x_test)[:,1]\ny_test_pred_prob\n\nfrom sklearn.metrics import roc_curve\nmetrics.roc_auc_score(y_test, y_test_pred_prob)","e5fd3fff":"fpr, tpr,thresholds=roc_curve(y_test,y_test_pred_prob)\nplt.figure(figsize=(10,10))\nplt.plot([0,1],[0,1],'k--')\nplt.plot(fpr, tpr, label='Logistic Regression')\nplt.xlabel(\"fpr (False Possitive rate)\")\nplt.ylabel(\"tpr-(True Positive rate)\")\nplt.title(\"ROC_AUC\")\nplt.show()","1272ae7b":"from sklearn.impute import SimpleImputer\nmy_imputer = SimpleImputer()\ndata_test = my_imputer.fit_transform(test)","a42d565a":"col","e7db62e2":"test=pd.DataFrame(data_test)","ae693904":"test.head()","28dcda14":"sample.columns.values","b505487c":"col=['id','f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10',\n       'f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17', 'f18', 'f19',\n       'f20', 'f21', 'f22', 'f23', 'f24', 'f25', 'f26', 'f27', 'f28',\n       'f29', 'f30', 'f31', 'f32', 'f33', 'f34', 'f35', 'f36', 'f37',\n       'f38', 'f39', 'f40', 'f41', 'f42', 'f43', 'f44', 'f45', 'f46',\n       'f47', 'f48', 'f49', 'f50', 'f51', 'f52', 'f53', 'f54', 'f55',\n       'f56', 'f57', 'f58', 'f59', 'f60', 'f61', 'f62', 'f63', 'f64',\n       'f65', 'f66', 'f67', 'f68', 'f69', 'f70', 'f71', 'f72', 'f73',\n       'f74', 'f75', 'f76', 'f77', 'f78', 'f79', 'f80', 'f81', 'f82',\n       'f83', 'f84', 'f85', 'f86', 'f87', 'f88', 'f89', 'f90', 'f91',\n       'f92', 'f93', 'f94', 'f95', 'f96', 'f97', 'f98', 'f99', 'f100',\n       'f101', 'f102', 'f103', 'f104', 'f105', 'f106', 'f107', 'f108',\n       'f109', 'f110', 'f111', 'f112', 'f113', 'f114', 'f115', 'f116',\n       'f117', 'f118']","f0985caf":"test.columns=col","ef413363":"col1=['f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10',\n       'f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17', 'f18', 'f19',\n       'f20', 'f21', 'f22', 'f23', 'f24', 'f25', 'f26', 'f27', 'f28',\n       'f29', 'f30', 'f31', 'f32', 'f33', 'f34', 'f35', 'f36', 'f37',\n       'f38', 'f39', 'f40', 'f41', 'f42', 'f43', 'f44', 'f45', 'f46',\n       'f47', 'f48', 'f49', 'f50', 'f51', 'f52', 'f53', 'f54', 'f55',\n       'f56', 'f57', 'f58', 'f59', 'f60', 'f61', 'f62', 'f63', 'f64',\n       'f65', 'f66', 'f67', 'f68', 'f69', 'f70', 'f71', 'f72', 'f73',\n       'f74', 'f75', 'f76', 'f77', 'f78', 'f79', 'f80', 'f81', 'f82',\n       'f83', 'f84', 'f85', 'f86', 'f87', 'f88', 'f89', 'f90', 'f91',\n       'f92', 'f93', 'f94', 'f95', 'f96', 'f97', 'f98', 'f99', 'f100',\n       'f101', 'f102', 'f103', 'f104', 'f105', 'f106', 'f107', 'f108',\n       'f109', 'f110', 'f111', 'f112', 'f113', 'f114', 'f115', 'f116',\n       'f117', 'f118']","7c18e15b":"x_test=sc.fit_transform(test[col1])","3254d36e":"x_test","4a3c5812":"# Obs\n* The ROC-AUC is worst than the Dummy model\n* We need to improve our model.\n* We need to remove som eof the features","a814ae29":"# Dropping these features","410a5a7e":"# Multiple Imputation","6d200cba":"# Logistic regresson","1cf719e6":"# Standarization","8e0dd712":"# Obs\n* Standarization has effect on logistic regression \n* The ROC score is much better ","63e954bd":"# KNN","c5685d44":"# Work with Whole dataset"}}