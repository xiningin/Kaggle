{"cell_type":{"f4297e72":"code","5d85099f":"code","dfde95dd":"code","7739c60a":"code","1aa414b3":"code","b34c957d":"code","b8eeed15":"code","9aa1f9c0":"code","b6d64ae1":"code","08cc4e29":"code","ab69cd3c":"code","f5e05b01":"code","9411e236":"code","0f997008":"code","02179c57":"code","06751454":"code","aa170c50":"code","3ac89a63":"code","7fa49114":"code","d9177fcd":"code","3db06b66":"code","e6631985":"code","dad7287a":"code","ce09c8c7":"code","99769fdc":"markdown","313d5513":"markdown","1ee377b3":"markdown","52adde54":"markdown","9621a738":"markdown","b22f81cd":"markdown","18be792b":"markdown","7df06c55":"markdown","31bc211d":"markdown","ce96435d":"markdown","d100967b":"markdown","dc561284":"markdown"},"source":{"f4297e72":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d85099f":"uni_data=pd.read_csv('\/kaggle\/input\/world-university-rankings\/timesData.csv')\n","dfde95dd":"uni_data.columns","7739c60a":"uni_data.head()","1aa414b3":"uni_data.tail()","b34c957d":"uni_data.describe()","b8eeed15":"uni_data.corr()","9aa1f9c0":"uni_data.columns","b6d64ae1":"uni_data.info()","08cc4e29":"uni_data.head()","ab69cd3c":"#Let's say university research 60 and above Class 1,40-60  Class 2, 0-40 Class 3 \n\n\nuni_data['university_class']=[1 if i>=60  else 2  if 60>i >=40 else 3 for i in uni_data['research']]\n","f5e05b01":"def bar_plot(variable):\n    \"\"\"\n    input:variable (example:university class)\n    output: bar plot & value count\n    \"\"\"\n    #get feature\n    var=uni_data[variable]\n    # count number of categorical variable(value\/sample)\n    varValue=var.value_counts()\n    #visualize\n    plt.figure(figsize=(10,4))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequence\")\n    plt.title(variable)\n    plt.show()\n    print('{} : \\n {}'.format(variable,varValue))","9411e236":"category=['university_class']\nfor x in category:\n    bar_plot(x)","0f997008":"uni_data.head()","02179c57":"def plot_hist(variable):\n    plt.figure(figsize=(18,6))\n    plt.hist(uni_data[variable],bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title('{} distribution with hist'.format(variable))\n    plt.show()\n    ","06751454":"numericVar=['teaching','international','research','citations','income','total_score']\nfor y in numericVar:\n    plot_hist(y)","aa170c50":"uni_data.head()","3ac89a63":"#university_class vs research\nuni_data[['university_class','research']].groupby(['university_class'],as_index=False).mean().sort_values(by='research',ascending=True)\n","7fa49114":"#university_class vs teaching\nuni_data[['university_class','teaching']].groupby([\"university_class\"],as_index=False).mean().sort_values(by=\"teaching\",ascending=True)","d9177fcd":"#citations vs university_class\nuni_data[['university_class','citations']].groupby(['university_class'],as_index=False).mean().sort_values(by='citations',ascending=True)","3db06b66":"def detect_outliers(df,features):\n    outlier_indices=[]\n    for c in features:\n        #1st quarties\n        Q1=np.percentile(df[c],25)\n        #3rd quarties\n        Q3=np.percentile(df[c],75)\n        #IQR\n        IQR=Q3-Q1\n        #Outlier step\n        outlier_step=IQR*1.5\n        #detect outlier and their indeces\n        outlier_list_col=df[(df[c]<Q1 - outlier_step) | (df[c]> Q3+outlier_step)].index\n        #store indeces\n        outlier_indices.extend(outlier_list_col)\n    outlier_indices=Counter(outlier_indices)\n    multiple_outliers=list(i for i, v in outlier_indices.items() if v>2)\n    return multiple_outliers\n    ","e6631985":"uni_data.head()","dad7287a":"uni_data.dtypes","ce09c8c7":"uni_data.loc[detect_outliers(uni_data,['teaching','research','citations'])]","99769fdc":"<a id=4><\/a>\n## Outlier Detection","313d5513":"<a id='2.2'><\/a>\n### Categorical Variable\nI dont see any categorical variable but we can do ourselves, use with [LIST COMPREHENSION](https:\/\/www.kaggle.com\/fthdmirr\/python-data-science-toolboxs).\n* !!it doesn't reflect the truth, just to find out!!\n* !!it doesn't reflect the truth, just to find out!!","1ee377b3":"1. float64(4): teaching,research,citations and student_staff_ratio\n1. int64(1): year\n1. object(9): world_rank,university_name,country,international,income,total_score,num_student,international_students,female_male_ratio\n\n","52adde54":"<a id='2'><\/a>\n## Variable Description","9621a738":"Thats mean we dont have any outliers","b22f81cd":"<a id='2.3'><\/a>\n### Numerical Variable","18be792b":"<a id='2.1'><\/a>\n## Univariate Variable\n* Categorical Variables:University class\n* Numerical Variables:teaching,international,research,citations,income,total_score","7df06c55":"<a id='3'><\/a>\n## Basic Data Analysis","31bc211d":"* research vs university_class\n* teaching vs university_class\n* citations vs university_class","ce96435d":"<a id='1'><\/a>\n## Load and Check Data","d100967b":"# Introduction\n<font color='blue'>\nContent:\n\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable](#2.1)\n        * [Categorical Variable](#2.2)\n        * [Numerical Variable](#2.3)\n3. [Basic Data Analysis](#3)\n4. [Outlier Detection](#4)","dc561284":"1. world_rank: world rankings of universities\n1. university_name: name\n1. country: country\n1. teaching: lecturers at the University\n1. international: ? \n1. research: research\n1. citations: referance\n1. income: annual income of the University\n1. total_score: score over a 100 points awarded to university\n1. num_students: number of students\n1. student_staff_ratio: employee ratio in university population\n1. international_students: students from outside\n1. female_male_ratio: mela\/female\n1. year: ?"}}