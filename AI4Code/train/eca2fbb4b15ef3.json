{"cell_type":{"80ba5a10":"code","7fe5c637":"code","ddbee218":"code","fba823e0":"code","7b6d7bdf":"code","9384bac6":"code","08fb4a1a":"code","c80615c7":"code","b3e5830a":"code","ce191a94":"code","c17f748f":"code","9667d7cd":"code","1b8f2f52":"code","5a8ea396":"code","608230f3":"code","7f9c5524":"code","00a44082":"code","f0de38e2":"markdown"},"source":{"80ba5a10":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7fe5c637":"train = pd.read_csv(\"..\/input\/learn-together\/train.csv\", index_col='Id')\ntest = pd.read_csv(\"..\/input\/learn-together\/test.csv\", index_col='Id')\n","ddbee218":"X=train.drop(['Cover_Type'], axis=1)\nX_test = test.copy()\ny=train['Cover_Type'] # target\nTARGET = 'Cover_Type'","fba823e0":"X.head()","7b6d7bdf":"X.describe()","9384bac6":"X.shape\n","08fb4a1a":"print(X.isnull().any().any())\nprint(y.isnull().any().any())\nprint(X_test.isnull().any().any())\n\n","c80615c7":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score,cross_validate\nX_train,  X_val, y_train, y_val = train_test_split(X, y, train_size=0.8, random_state=1)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_val.shape)\nprint(y_val.shape)","b3e5830a":"# fit model no training data\nfrom xgboost import XGBClassifier\nmodel = XGBClassifier(n_estimators=200)\nmodel.fit(X_train, y_train, \n             early_stopping_rounds=6, \n             eval_set=[(X_val, y_val)],\n             verbose=False)","ce191a94":"y_pred = model.predict(X_val)\npredictions = [round(value) for value in y_pred]","c17f748f":"from sklearn.metrics import mean_absolute_error\n\npredictions = model.predict(X_val)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(predictions, y_val)))\n","9667d7cd":"from sklearn.metrics import accuracy_score\n\naccuracy = accuracy_score(y_val, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","1b8f2f52":"from sklearn.ensemble import ExtraTreesClassifier\nSEED = 2007\nmodel_2=ExtraTreesClassifier( max_depth=400, \n           n_estimators=450, n_jobs=-1,\n           oob_score=False, random_state=SEED, \n           warm_start=True)\nmodel_2.fit(X_train, y_train)\n","5a8ea396":"predictions_2 = model_2.predict(X_val)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(predictions_2, y_val)))","608230f3":"accuracy = accuracy_score(y_val, predictions_2)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","7f9c5524":"test_pred = model_2.predict(test)","00a44082":"output = pd.DataFrame({'ID': test.index,\n                       TARGET: test_pred })\noutput.to_csv('submission.csv', index=False)\n\n","f0de38e2":"**ExtraTreeClassifier**"}}