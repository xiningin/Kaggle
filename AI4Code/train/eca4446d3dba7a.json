{"cell_type":{"9fdfd89d":"code","8f5354c6":"code","ea6e7352":"code","7ef692dc":"code","edbee38e":"code","deb510f7":"code","36e75f16":"markdown","fcd7c1d4":"markdown","9150e8f4":"markdown","5789c870":"markdown","175416dc":"markdown","259c9073":"markdown","d9b1acfa":"markdown","49428f86":"markdown","7b29c471":"markdown","9282c157":"markdown","0dc3d619":"markdown","5cea119e":"markdown","9282d6ff":"markdown"},"source":{"9fdfd89d":"import numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.io as sio\nimport scipy.signal\nfrom scipy import *\nimport copy","8f5354c6":"def gaussian(t, fwhm):\n    return np.exp(-(4*np.log(2)*t**2)\/fwhm**2)","ea6e7352":"srate = 1000 #Hz\ntime  = np.arange(0,3,1\/srate)\nn     = len(time)\np     = 15 # poles for random interpolation\n\n#noise level, measured in standard deviations\nnoiseamp = 5\n\n# amplitude modular and noise level\nampl   = np.interp(linspace(1,p,n), np.arange(0,p), np.random.rand(p)*30)\nnoise  = noiseamp * np.random.randn(n)\nsignal = ampl + noise","7ef692dc":"fwhm    = 25 # in ms\n\n# normalized time vector in ms\nk       = 100\ngtime   = 1000*np.arange(-k, k)\/srate\n\n# Gaussian window\ngauswin = gaussian(gtime, fwhm)\n\n# Compute empirical FWHM\npstPeakHalf = k + np.argmin( (gauswin[k:] -.5)**2 )\nprePeakHalf = np.argmin( (gauswin -.5)**2 )\n\nempFWHM = gtime[pstPeakHalf] - gtime[prePeakHalf]\n\n#show the Gaussian\nplt.plot(gtime, gauswin, 'ko-')\nplt.plot([gtime[prePeakHalf],gtime[pstPeakHalf]],[gauswin[prePeakHalf],gauswin[pstPeakHalf]],'m')\n# Normalize Gaussian to unit energy\ngauswin = gauswin\/np.sum(gauswin)\n#title\nplt.xlabel('Time (ms)')\nplt.ylabel('Gain')\n\nplt.show()","edbee38e":"# initialize filtered signal vector\nfiltsigG = copy.deepcopy(signal)\n\n# implement the running mean filter\nfor i in range(k+1, n-k-1):\n    filtsigG[i] = np.sum(signal[i-k:i+k] * gauswin)\n    \nplt.plot(time, signal, 'r', label='Original')\nplt.plot(time, filtsigG, 'k', label='Gaussian-filtered')\n\nplt.xlabel('Time (s)')\nplt.ylabel('amp. (a.u)')\nplt.legend()\nplt.title('Gaussian smothing filter')\n\nplt.show()","deb510f7":"filtsigMean = copy.deepcopy(signal)\n\nmk = 20\nfor i in range(mk+1, n-mk-1):\n    filtsigMean[i] = mean(signal[i-mk:i+mk])\nplt.plot(time,signal,'r',label='Original')    \nplt.plot(time, filtsigMean, 'b', label='Running mean')\nplt.legend()\nplt.show()","36e75f16":"### Creating a signal","fcd7c1d4":"### Gaussian Function in python","9150e8f4":" ### Gaussian-smoothing filter equation","5789c870":"### Implementing the filter","175416dc":"# Gaussian-Smoothing Filter","259c9073":"### Gaussian Function","d9b1acfa":"### Mean filter for comparison","49428f86":"### Creating a Gaussian kernel","7b29c471":"\n$\\large g = e^{\\frac{-4ln(2)t^2}{w^2}}$","9282c157":"### Importing libraries","0dc3d619":"_reference_:\nMike X Cohen course signal processing problems","5cea119e":"So what is the difference between Mean-Smoothing filter and Gaussian-Smoothing filter? Those two work very similary, but the Gaussian is a bit smooth than Mean-Filter. In this sense, it will rough out the edges even more than mean-smoothing","9282d6ff":"$\\large yt = \\sum^{t+k}_{i=t-k} x_ig_i$"}}