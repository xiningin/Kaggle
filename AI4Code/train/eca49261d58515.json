{"cell_type":{"6c9fe745":"code","6a7f5161":"code","4ccb65f7":"code","1d261d4b":"code","7d842cc0":"code","a20f2dd9":"code","827f3edd":"code","afe78867":"code","24b598e8":"code","028e91bb":"code","5879f97d":"code","22ff9fd8":"code","b11512c8":"code","0a97ff94":"code","4ee77b0e":"code","9d3daf28":"code","6a967a96":"markdown","8788f26b":"markdown","f928421b":"markdown","d7ba96f6":"markdown","892d3c26":"markdown","58f34aad":"markdown","32eb9f89":"markdown","f6f774e4":"markdown","692554d0":"markdown","a391303a":"markdown","21c306c8":"markdown"},"source":{"6c9fe745":"# Importing libraries\nimport numpy as np\nimport pandas as pd\nimport os\nfrom datetime import datetime\nfrom matplotlib import pyplot as plt\n# %matplotlib inline\n# import mpld3\n# mpld3.enable_notebook()\n# print(os.listdir(\"..\/input\"))","6a7f5161":"data = pd.read_csv('..\/input\/BreadBasket_DMS.csv')\nprint(data.info())\nprint(data.head())","4ccb65f7":"# Join Date and Time column\ndata['datetime_combined'] = data[['Date', 'Time']].apply(lambda x: ' '.join(x), axis=1)\n\n# Convert the new column into datetime column\ndata['datetime_combined'] = data['datetime_combined'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')) \nprint(type(data['datetime_combined'][0]))\n\n# What's the date range of this dataset?\nprint(data.datetime_combined.min(), data.datetime_combined.max())\nprint(\"Interval: \", data.datetime_combined.max() - data.datetime_combined.min())","1d261d4b":"item_list = data.Item.unique()\nprint(\"Number of unique items: \", len(item_list))\n#print(item_list)","7d842cc0":"item_count = data['Item'].value_counts().reset_index()\nitem_count.columns = ['Item', 'Count']\ntop5_list = item_count['Item'][:5].tolist()\nprint(\"Top 5 items: \", top5_list)","a20f2dd9":"plt.figure(figsize=(10,5))\nplt.bar(item_count[:5].Item, item_count[:5].Count, color = 'blue')\nplt.show()","827f3edd":"# Overall trend, group by date.\n# We have to make sure to not count repeated transaction number\nnew_df = data.groupby(['Transaction', 'Date']).count()\nnew_df = new_df.groupby(['Date']).size().reset_index()\nnew_df = pd.DataFrame(new_df)\nnew_df.columns = ['Date', 'Count']\nnew_df.Date = new_df.Date.apply(lambda x: datetime.strptime(x, '%Y-%m-%d')) \nnew_df = new_df.set_index('Date')\n\n# Visualization\nplt.figure(figsize=(15,5))\nplt.xlabel('Date')\nplt.ylabel('Number of transactions')\nplt.title('Overall Sales trend')\nplt.plot(new_df.Count)\nplt.show()","afe78867":"# Overall trend, group by date.\n# We have to make sure to not count repeated transaction number\nnew_df = data.loc[data['Item']=='Bread']\nnew_df = new_df.groupby(['Transaction', 'Date']).count()\nnew_df = new_df.groupby(['Date']).size().reset_index()\nnew_df = pd.DataFrame(new_df)\nnew_df.columns = ['Date', 'Count']\nnew_df.Date = new_df.Date.apply(lambda x: datetime.strptime(x, '%Y-%m-%d')) \nnew_df = new_df.set_index('Date')\n\n# Visualization\nplt.figure(figsize=(15,5))\nplt.xlabel('Date')\nplt.ylabel('Number of transactions')\nplt.title('Overall Sales trend')\nplt.plot(new_df.Count)\nplt.show()","24b598e8":"# Let's obtain the day of week from the datetime value we have\ndata['day_of_week'] = data['datetime_combined'].apply(lambda x: x.strftime('%A'))\ntransaction_by_day = data.groupby(['Transaction', 'day_of_week']).count().reset_index()\ntransaction_by_day = transaction_by_day[['Transaction', 'day_of_week']]\n\n# Count the number of transactions made on each day\ntransaction_by_day = transaction_by_day.groupby(['day_of_week']).count().reset_index()\n\n# Sort by day of week (Sunday, Monday, Tuesday ...) http:\/\/blog.quizzicol.com\/2016\/10\/03\/sorting-dates-in-python-by-day-of-week\/\nsorter = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\nsorterIndex = dict(zip(sorter,range(len(sorter))))\ntransaction_by_day['Day_id'] = transaction_by_day.day_of_week\ntransaction_by_day['Day_id'] = transaction_by_day['Day_id'].map(sorterIndex)\ntransaction_by_day.sort_values('Day_id', inplace=True)","028e91bb":"plt.figure(figsize=(10,5))\nplt.xlabel('Day of Week')\nplt.ylabel('Number of transactions')\nplt.title('Sales made on different days')\nplt.bar(transaction_by_day.day_of_week, transaction_by_day.Transaction, color = 'blue')\nplt.show()","5879f97d":"# Getting the 'hour' from datetime\ndata['Hour'] = data.datetime_combined.dt.hour\n# data.head()\n\n# Let's count the total transactions for each hour\ntransaction_by_hour = data.groupby(['Transaction', 'Hour']).count().reset_index()\ntransaction_by_hour= transaction_by_hour[['Transaction', 'Hour']]\n# transaction_by_hour.head()\n\ntransaction_by_hour = transaction_by_hour.groupby(['Hour']).count().reset_index()","22ff9fd8":"# Overall sales trend based on hours\nplt.figure(figsize=(10,5))\nplt.xlabel('Hour')\nplt.ylabel('Number of transactions')\nplt.title('Sales trend by Hour')\nplt.xticks(np.arange(0, 23, step=1))\nplt.plot(transaction_by_hour.Hour, transaction_by_hour.Transaction)\nplt.show()\n","b11512c8":"top5_items = data.loc[data.Item.isin(top5_list)]\ntransaction_by_item = pd.crosstab(top5_items.Hour, top5_items.Item)\n\n# Sales trend of top 5 sold items\nplt.figure(figsize=(10,5))\nplt.xlabel('Hour')\nplt.ylabel('Number of Transaction')\nplt.title(\"Top 5 Sold Items' Sales trend by Hour\")\nfor item in top5_list:\n    plt.plot(transaction_by_item.index, transaction_by_item[item])\n    plt.legend(top5_list)\nplt.show()","0a97ff94":"# Another method, visualizing the trends separately \ntransaction_by_item.plot(subplots=True)\nplt.show()","4ee77b0e":"# Let's obtain the day of week from the datetime value we have\ntransaction_saturday = data.loc[data['day_of_week']=='Saturday']\ntransaction_saturday = transaction_saturday.groupby(['Transaction', 'day_of_week', 'Hour', 'Item']).count().reset_index()\ntransaction_saturday = transaction_saturday[['Transaction', 'day_of_week', 'Hour', 'Item']]\ntransaction_saturday_top5 = transaction_saturday.loc[transaction_saturday.Item.isin(top5_list)]\ntransaction_saturday_top5 = pd.crosstab(transaction_saturday_top5.Hour, transaction_saturday_top5.Item)","9d3daf28":"transaction_saturday_top5.plot(subplots=True)\nplt.show()","6a967a96":"The barplot shows that Saturdays are the busiest day of the week for the bakery! What about the peak hour for the bakery?","8788f26b":"Of the top 5 sold items,  bread, pastry and coffee seem to have higher sales in the morning and afternoon. On the other hand, cake and tea were sold out more in the later half of the day. Now, that's a guide for the bakery's patissier to plan their baking routines everyday. But we can get more specific! We know that Saturday is the busiest day for the bakery, so let's take a look the sales trend of the top 5 items on Saturdays.","f928421b":"Now, let's see which day of the week is the busiest for this bakery!","d7ba96f6":"From the line chart above, we can see the lowest sale of the bakery occured in January 2017 while the highest sales was achieved in the beginning of February 2017. We can also observe that the bakery's sales seems to follow a pattern.","892d3c26":"Let's see the overall sales trend of the bakery through the 161 days:","58f34aad":"I was just curious with the date range of the dataset so I did this.","32eb9f89":"What are the different items that are sold in the bakery?","f6f774e4":"The line chart above shows that the peak hours for the bakery is around 10AM to 12PM. That was about the total sales made regardless of the items. Let's say if the bakery sells freshly-made products and would like to be prepared for the crowd. Then, it will be useful if they know the peak hours for different items. Now, let's visualize the peak hours for the top 5 sold items from the bakery!","692554d0":" Let's take a quick look at the data.","a391303a":"Let's identify the top 5 sold items in the bakery.","21c306c8":"Visualizing the top 5 sold items with a simple barplot."}}