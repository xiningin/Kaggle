{"cell_type":{"cda81af5":"code","9e43d5b1":"code","792733c0":"code","982c05d3":"code","b2a82c0b":"code","f61d89b2":"code","98109eb0":"code","6bf2caeb":"code","d4dc621b":"code","af7c91d9":"code","2bcc7caf":"code","69a46373":"code","cb654cf8":"code","697b4fdd":"code","4cb9e01c":"code","de581ab5":"code","abcf06ed":"code","d3d76af5":"code","b55bc4d5":"code","f6a5636f":"code","c490c600":"code","17d0afa9":"code","089da1a2":"code","3964caeb":"code","8fade206":"markdown"},"source":{"cda81af5":"!pip install ..\/input\/seaborn0111\/seaborn-0.11.1-py3-none-any.whl","9e43d5b1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom tqdm.auto import tqdm\nimport torch\nimport cv2\nfrom glob import glob","792733c0":"!cp -r ..\/input\/yololatest\/yolov5-master\/* .","982c05d3":"from utils.datasets import LoadImages\nfrom models.experimental import attempt_load\nfrom utils.torch_utils import time_synchronized\nfrom utils.general import *\nfrom utils.plots import plot_one_box\nimport argparse\nimport time\nfrom pathlib import Path\n\nimport cv2\nimport torch\nimport torch.backends.cudnn as cudnn\nfrom numpy import random\n\nfrom models.experimental import attempt_load\nfrom utils.datasets import LoadStreams, LoadImages\nfrom utils.general import check_img_size, non_max_suppression, apply_classifier, scale_coords, xyxy2xywh, \\\n    strip_optimizer, set_logging, increment_path\nfrom utils.plots import plot_one_box\nfrom utils.torch_utils import select_device, load_classifier, time_synchronized\n\nimport sys\nsys.path.insert(0, \"timm-efficientdet-pytorch\")\nsys.path.insert(0, \"omegaconf\")\n\nimport torch\nimport os\nfrom datetime import datetime\nimport time\nimport random\nimport cv2\nimport pandas as pd\nimport numpy as np\nimport albumentations as A\nimport matplotlib.pyplot as plt\n#from albumentations.pytorch.transforms import ToTensorV2\nfrom sklearn.model_selection import StratifiedKFold\nfrom torch.utils.data import Dataset,DataLoader\nfrom torch.utils.data.sampler import SequentialSampler, RandomSampler\nfrom glob import glob\nimport pandas as pd\n#from effdet import get_efficientdet_config, EfficientDet, DetBenchTrain\n#from effdet.efficientdet import HeadNet\nfrom tqdm import tqdm, tqdm_notebook\n#from torch.cuda.amp import autocast,GradScaler\n\nSEED = 42\n\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True\n    torch.backends.cudnn.enabled = False\n\nseed_everything(SEED)","b2a82c0b":"d = pd.read_csv('..\/input\/nfl-impact-detection\/test_player_tracking.csv')\nIS_PRIVATE = d.shape != (19269, 12)\nprint(IS_PRIVATE)\n\nISTEST = False","f61d89b2":"if ISTEST:\n    IS_PRIVATE = True","98109eb0":"!mkdir \/tmp\/sets","6bf2caeb":"##https:\/\/github.com\/ultralytics\/yolov5\n\n%%writefile models\/yolov5x.yaml\n\n# parameters\nnc: 1  # number of classes\ndepth_multiple: 1.33  # model depth multiple\nwidth_multiple: 1.25  # layer channel multiple\n\n# anchors\nanchors:\n  - [10,13, 16,30, 33,23]  # P3\/8\n  - [30,61, 62,45, 59,119]  # P4\/16\n  - [116,90, 156,198, 373,326]  # P5\/32\n\n# YOLOv5 backbone\nbackbone:\n  # [from, number, module, args]\n  [[-1, 1, Focus, [64, 3]],  # 0-P1\/2\n   [-1, 1, Conv, [128, 3, 2]],  # 1-P2\/4\n   [-1, 3, BottleneckCSP, [128]],\n   [-1, 1, Conv, [256, 3, 2]],  # 3-P3\/8\n   [-1, 9, BottleneckCSP, [256]],\n   [-1, 1, Conv, [512, 3, 2]],  # 5-P4\/16\n   [-1, 9, BottleneckCSP, [512]],\n   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5\/32\n   [-1, 1, SPP, [1024, [5, 9, 13]]],\n   [-1, 3, BottleneckCSP, [1024, False]],  # 9\n  ]\n\n# YOLOv5 head\nhead:\n  [[-1, 1, Conv, [512, 1, 1]],\n   [-1, 1, nn.Upsample, [None, 2, 'nearest']],\n   [[-1, 6], 1, Concat, [1]],  # cat backbone P4\n   [-1, 3, BottleneckCSP, [512, False]],  # 13\n\n   [-1, 1, Conv, [256, 1, 1]],\n   [-1, 1, nn.Upsample, [None, 2, 'nearest']],\n   [[-1, 4], 1, Concat, [1]],  # cat backbone P3\n   [-1, 3, BottleneckCSP, [256, False]],  # 17 (P3\/8-small)\n\n   [-1, 1, Conv, [256, 3, 2]],\n   [[-1, 14], 1, Concat, [1]],  # cat head P4\n   [-1, 3, BottleneckCSP, [512, False]],  # 20 (P4\/16-medium)\n\n   [-1, 1, Conv, [512, 3, 2]],\n   [[-1, 10], 1, Concat, [1]],  # cat head P5\n   [-1, 3, BottleneckCSP, [1024, False]],  # 23 (P5\/32-large)\n\n   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)\n  ]\n","d4dc621b":"##https:\/\/github.com\/ultralytics\/yolov5\n%%writefile models\/nfl.yaml\n\ntrain: \/tmp\/sets\/convertor\/fold0\/images\/train2017\/\nval: \/tmp\/sets\/convertor\/fold0\/images\/val2017\/\n\n# number of classes\nnc: 1\n\n# class names\nnames: ['Helmet']","af7c91d9":"df = pd.read_csv('..\/input\/trainnoxframes5fold\/video_labels.csv')\ndf[\"image_name\"] = df[\"image_name\"].str.replace(\".png\", \"\")\n#df = df.drop('Unnamed: 0', axis=1)\n#df = df[df['impact'] > 1]\n#bboxs = np.stack(df['bbox'].apply(lambda x: np.fromstring(x[1:-1], sep=',')))\n#for i, column in enumerate(['x', 'y', 'w', 'h']):\n#    df[column] = bboxs[:,i]\n#df.drop(columns=['bbox'], inplace=True)\ndf['x_center'] = df['x'] + df['w']\/2\ndf['y_center'] = df['y'] + df['h']\/2\ndf['classes'] = 0\ndf['image_id'] = df['image_name']\nfrom tqdm.auto import tqdm\nimport shutil as sh\ndf = df[['image_id','x', 'y', 'w', 'h','x_center','y_center','classes']]\ndf.reset_index(inplace=True)\ndf = df.drop('index',axis=1)\ndf","2bcc7caf":"if IS_PRIVATE:\n    !cp -r ..\/input\/trainnoxframes5fold\/convertor \/tmp\/sets\n","69a46373":"##https:\/\/github.com\/ultralytics\/yolov5\nif IS_PRIVATE:\n    ImagesizePred = 1280\n    WEIGHTS = ['..\/input\/yolo5recfulls2\/last (1).pt','..\/input\/yoloxframes144epochs\/best (2).pt','..\/input\/yolo5realxframes1280rectrain44e\/last.pt']\n\n    sourcedatas = '..\/input\/nfl-impact-detection\/test'\n\n    source, weights, view_img, save_txt, imgsz = sourcedatas, WEIGHTS, False , True , ImagesizePred\n    webcam = source.isnumeric() or source.endswith('.txt') or source.lower().startswith(\n            ('rtsp:\/\/', 'rtmp:\/\/', 'http:\/\/'))\n    projectsave = ''\n    projname = 'exp'\n    deviceopt = ''\n    existok = False\n    augmentopt = False\n    conf_thres = 0.5\n    iou_thres = 0.5\n    USESTH = False\n    score_thres = 0.35\n    saveconf = False\n    result_image_ids = []\n    results_boxes = []\n    results_scores = []\n\n    save_dir = Path(increment_path(Path(projectsave) \/ projname, exist_ok=existok))  # increment run\n    (save_dir \/ 'labels' if save_txt else save_dir).mkdir(parents=True, exist_ok=True)  # make dir\n\n    set_logging()\n    device = select_device(deviceopt)\n    half = device.type != 'cpu'  # half precision only supported on CUDA\n\n    # Load model\n    model = attempt_load(weights, map_location=device)  # load FP32 model\n    imgsz = check_img_size(imgsz, s=model.stride.max())  # check img_size\n    if half:\n        model.half()  # to FP16\n\n        # Second-stage classifier\n    classify = False\n    if classify:\n        modelc = load_classifier(name='resnet101', n=2)  # initialize\n        modelc.load_state_dict(torch.load('weights\/resnet101.pt', map_location=device)['model']).to(device).eval()\n\n        # Set Dataloader\n    vid_path, vid_writer = None, None\n    if webcam:\n        view_img = True\n        cudnn.benchmark = True  # set True to speed up constant image size inference\n        dataset = LoadStreams(source, img_size=imgsz)\n    else:\n        save_img = True\n        dataset = LoadImages(source, img_size=imgsz)\n\n        # Get names and colors\n    names = model.module.names if hasattr(model, 'module') else model.names\n    colors = [[random.randint(0, 255) for _ in range(3)] for _ in names]\n\n    # Run inference\n    t0 = time.time()\n    img = torch.zeros((1, 3, imgsz, imgsz), device=device)  # init img\n    _ = model(img.half() if half else img) if device.type != 'cpu' else None  # run once\n    for path, img, im0s, vid_cap in dataset:\n        img = torch.from_numpy(img).to(device)\n        img = img.half() if half else img.float()  # uint8 to fp16\/32\n        img \/= 255.0  # 0 - 255 to 0.0 - 1.0\n        if img.ndimension() == 3:\n            img = img.unsqueeze(0)\n\n        # Inference\n        t1 = time_synchronized()\n        pred = model(img, augment=augmentopt)[0]\n\n        # Apply NMS\n        pred = non_max_suppression(pred, conf_thres, iou_thres, classes=None, agnostic=False)\n        t2 = time_synchronized()\n\n            # Apply Classifier\n        if classify:\n            pred = apply_classifier(pred, modelc, img, im0s)\n        image_id = Path(path).name\n        # Process detections\n        for i, det in enumerate(pred):  # detections per image\n            if webcam:  # batch_size >= 1\n                p, s, im0, frame = path[i], '%g: ' % i, im0s[i].copy(), dataset.count\n            else:\n                p, s, im0, frame = path, '', im0s, getattr(dataset, 'frame', 0)\n\n            p = Path(p)  # to Path\n\n            save_path = str(save_dir \/ p.name)  # img.jpg\n            txt_path = str(save_dir \/ 'labels' \/ p.stem) + ('' if dataset.mode == 'image' else f'_{frame}')  # img.txt\n            image_id = str(p.stem) + ('' if dataset.mode == 'image' else f'_{frame}')  # img.txt\n            s += '%gx%g ' % img.shape[2:]  # print string\n            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh\n            if len(det):\n                # Rescale boxes from img_size to im0 size\n                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()\n\n                result_image_ids += [image_id]*len(det)\n                results_boxes.append(det[:, :4].cpu().data.numpy())\n                results_scores.append(det[:, 4].cpu().data.numpy())\n\n                # Print results\n                for c in det[:, -1].unique():\n                    n = (det[:, -1] == c).sum()  # detections per class\n                    s += f'{n} {names[int(c)]}s, '  # add to string\n\n                # Write results\n                for *xyxy, conf, cls in reversed(det):\n                    if save_txt:  # Write to file\n                        xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) \/ gn).view(-1).tolist()  # normalized xywh\n                        line = (cls, *xywh, conf) if saveconf else (cls, *xywh)  # label format\n                        with open(txt_path + '.txt', 'a') as f:\n                            f.write(('%g ' * len(line)).rstrip() % line + '\\n')\n\n                    if save_img or view_img:  # Add bbox to image\n                        label = f'{names[int(cls)]} {conf:.2f}'\n                        plot_one_box(xyxy, im0, label=label, color=colors[int(cls)], line_thickness=3)\n\n            # Print time (inference + NMS)\n            print(f'{s}Done. ({t2 - t1:.3f}s)')\n\n            # Stream results\n            if view_img:\n                cv2.imshow(str(p), im0)\n                if cv2.waitKey(1) == ord('q'):  # q to quit\n                    raise StopIteration\n\n            # Save results (image with detections)\n            if save_img:\n                if dataset.mode == 'image':\n                    cv2.imwrite(save_path, im0)\n                else:  # 'video'\n                    if vid_path != save_path:  # new video\n                        vid_path = save_path\n                        if isinstance(vid_writer, cv2.VideoWriter):\n                            vid_writer.release()  # release previous video writer\n\n                        fourcc = 'mp4v'  # output video codec\n                        fps = vid_cap.get(cv2.CAP_PROP_FPS)\n                        w = int(vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))\n                        h = int(vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\n                        vid_writer = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*fourcc), fps, (w, h))\n                    vid_writer.write(im0)\n\n    if save_txt or save_img:\n        s = f\"\\n{len(list(save_dir.glob('labels\/*.txt')))} labels saved to {save_dir \/ 'labels'}\" if save_txt else ''\n        print(f\"Results saved to {save_dir}{s}\")\n\n    print(f'Done. ({time.time() - t0:.3f}s)')","cb654cf8":"import gc\ntorch.cuda.empty_cache()\ngc.collect()","697b4fdd":"if IS_PRIVATE:\n    DATA_ROOT_PATH = '\/tmp\/sets\/convertor\/fold0\/images\/train2017'\n    # https:\/\/www.kaggle.com\/its7171\/2class-object-detection-inference\/\n    def mk_images(video_name, video_labels, video_dir, out_dir, only_with_impact=True):\n        video_path=f\"{video_dir}\/{video_name}\"\n        video_name = os.path.basename(video_path)\n        vidcap = cv2.VideoCapture(video_path)\n        if only_with_impact:\n            boxes_all = video_labels.query(\"video == @video_name\")\n            print(video_path, boxes_all[boxes_all.impact > 0].shape[0])\n        else:\n            print(video_path)\n        frame = 0\n        while True:\n            it_worked, img = vidcap.read()\n            if not it_worked:\n                break\n            frame += 1\n            if only_with_impact:\n                boxes = video_labels.query(\"video == @video_name and frame == @frame\")\n                boxes_with_impact = boxes[boxes.impact > 0]\n                if boxes_with_impact.shape[0] == 0:\n                    continue\n            img_name = f\"{video_name}_frame{frame}\"\n            image_path = f'{out_dir}\/{video_name}'.replace('.mp4',f'_{frame}.png')\n        #    dim = (1024, 1024)\n         #   img = cv2.resize(img, dim, interpolation = cv2.INTER_AREA)\n            _ = cv2.imwrite(image_path, img)\n\n    #if TESTMODE:\n    out_dir = DATA_ROOT_PATH\n    !mkdir -p $out_dir\n    video_dir = '\/kaggle\/input\/nfl-impact-detection\/test'\n    uniq_video = [path.split('\/')[-1] for path in glob(f'{video_dir}\/*.mp4')]\n    for video_name in uniq_video:\n        mk_images(video_name, pd.DataFrame(), video_dir, out_dir, only_with_impact=False)\n        # for fast commit\n    #    if len(uniq_video) == 6:\n      #      break\n","4cb9e01c":"if IS_PRIVATE:\n    !cp exp\/labels\/*.* \/tmp\/sets\/convertor\/fold0\/labels\/train2017\/","de581ab5":"##https:\/\/github.com\/ultralytics\/yolov5\nif IS_PRIVATE:\n    !WANDB_MODE=\"dryrun\" python train.py --rect --img-size 1280 --batch-size 4 --epochs 206 --data models\/nfl.yaml --cfg models\/yolov5x.yaml --weights '..\/input\/yolo5recfulls2\/last (1).pt'","abcf06ed":"import gc\ntorch.cuda.empty_cache()\ngc.collect()","d3d76af5":"##https:\/\/github.com\/ultralytics\/yolov5\nif IS_PRIVATE:\n    ImagesizePred = 1280\n    WEIGHTS = ['runs\/train\/exp\/weights\/last.pt','..\/input\/yolo5recfulls2\/last (1).pt','..\/input\/yoloxframes144epochs\/best (2).pt','..\/input\/yolo5realxframes1280rectrain44e\/last.pt']\n\n    sourcedatas = '..\/input\/nfl-impact-detection\/test'\n\n    source, weights, view_img, save_txt, imgsz = sourcedatas, WEIGHTS, False , False , ImagesizePred\n    webcam = source.isnumeric() or source.endswith('.txt') or source.lower().startswith(\n            ('rtsp:\/\/', 'rtmp:\/\/', 'http:\/\/'))\n    projectsave = ''\n    projname = 'exp'\n    deviceopt = ''\n    existok = False\n    augmentopt = False\n    conf_thres = 0.5\n    iou_thres = 0.5\n    USESTH = False\n    score_thres = 0.35\n    result_image_ids = []\n    results_boxes = []\n    results_scores = []\n\n    save_dir = Path(increment_path(Path(projectsave) \/ projname, exist_ok=existok))  # increment run\n    (save_dir \/ 'labels' if save_txt else save_dir).mkdir(parents=True, exist_ok=True)  # make dir\n\n    set_logging()\n    device = select_device(deviceopt)\n    half = device.type != 'cpu'  # half precision only supported on CUDA\n\n    # Load model\n    model = attempt_load(weights, map_location=device)  # load FP32 model\n    imgsz = check_img_size(imgsz, s=model.stride.max())  # check img_size\n    if half:\n        model.half()  # to FP16\n\n        # Second-stage classifier\n    classify = False\n    if classify:\n        modelc = load_classifier(name='resnet101', n=2)  # initialize\n        modelc.load_state_dict(torch.load('weights\/resnet101.pt', map_location=device)['model']).to(device).eval()\n\n        # Set Dataloader\n    vid_path, vid_writer = None, None\n    if webcam:\n        view_img = True\n        cudnn.benchmark = True  # set True to speed up constant image size inference\n        dataset = LoadStreams(source, img_size=imgsz)\n    else:\n        save_img = True\n        dataset = LoadImages(source, img_size=imgsz)\n\n        # Get names and colors\n    names = model.module.names if hasattr(model, 'module') else model.names\n    colors = [[random.randint(0, 255) for _ in range(3)] for _ in names]\n\n    # Run inference\n    t0 = time.time()\n    img = torch.zeros((1, 3, imgsz, imgsz), device=device)  # init img\n    _ = model(img.half() if half else img) if device.type != 'cpu' else None  # run once\n    for path, img, im0s, vid_cap in dataset:\n        img = torch.from_numpy(img).to(device)\n        img = img.half() if half else img.float()  # uint8 to fp16\/32\n        img \/= 255.0  # 0 - 255 to 0.0 - 1.0\n        if img.ndimension() == 3:\n            img = img.unsqueeze(0)\n\n        # Inference\n        t1 = time_synchronized()\n        pred = model(img, augment=augmentopt)[0]\n\n        # Apply NMS\n        pred = non_max_suppression(pred, conf_thres, iou_thres, classes=None, agnostic=False)\n        t2 = time_synchronized()\n\n            # Apply Classifier\n        if classify:\n            pred = apply_classifier(pred, modelc, img, im0s)\n        image_id = Path(path).name\n        # Process detections\n        for i, det in enumerate(pred):  # detections per image\n            if webcam:  # batch_size >= 1\n                p, s, im0, frame = path[i], '%g: ' % i, im0s[i].copy(), dataset.count\n            else:\n                p, s, im0, frame = path, '', im0s, getattr(dataset, 'frame', 0)\n\n            p = Path(p)  # to Path\n\n            save_path = str(save_dir \/ p.name)  # img.jpg\n            txt_path = str(save_dir \/ 'labels' \/ p.stem) + ('' if dataset.mode == 'image' else f'_{frame}')  # img.txt\n            image_id = str(p.stem) + ('' if dataset.mode == 'image' else f'_{frame}')  # img.txt\n            s += '%gx%g ' % img.shape[2:]  # print string\n            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh\n            if len(det):\n                # Rescale boxes from img_size to im0 size\n                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()\n\n                det[:, 2] = det[:, 2] - det[:, 0]\n                det[:, 3] = det[:, 3] - det[:, 1]\n                det[:, 0] = det[:, 0].clip(min=0, max=1280-1)\n                det[:, 2] = det[:, 2].clip(min=0, max=1280-1)\n                det[:, 1] = det[:, 1].clip(min=0, max=720-1)\n                det[:, 3] = det[:, 3].clip(min=0, max=720-1)\n\n                result_image_ids += [image_id]*len(det)\n                results_boxes.append(det[:, :4].cpu().data.numpy())\n                results_scores.append(det[:, 4].cpu().data.numpy())\n\n                # Print results\n                for c in det[:, -1].unique():\n                    n = (det[:, -1] == c).sum()  # detections per class\n                    s += f'{n} {names[int(c)]}s, '  # add to string\n\n                # Write results\n                for *xyxy, conf, cls in reversed(det):\n                    if save_txt:  # Write to file\n                        xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) \/ gn).view(-1).tolist()  # normalized xywh\n                        line = (cls, *xywh, conf) if opt.save_conf else (cls, *xywh)  # label format\n                        with open(txt_path + '.txt', 'a') as f:\n                            f.write(('%g ' * len(line)).rstrip() % line + '\\n')\n\n                    if save_img or view_img:  # Add bbox to image\n                        label = f'{names[int(cls)]} {conf:.2f}'\n                        plot_one_box(xyxy, im0, label=label, color=colors[int(cls)], line_thickness=3)\n\n            # Print time (inference + NMS)\n            print(f'{s}Done. ({t2 - t1:.3f}s)')\n\n            # Stream results\n            if view_img:\n                cv2.imshow(str(p), im0)\n                if cv2.waitKey(1) == ord('q'):  # q to quit\n                    raise StopIteration\n\n            # Save results (image with detections)\n            if save_img:\n                if dataset.mode == 'image':\n                    cv2.imwrite(save_path, im0)\n                else:  # 'video'\n                    if vid_path != save_path:  # new video\n                        vid_path = save_path\n                        if isinstance(vid_writer, cv2.VideoWriter):\n                            vid_writer.release()  # release previous video writer\n\n                        fourcc = 'mp4v'  # output video codec\n                        fps = vid_cap.get(cv2.CAP_PROP_FPS)\n                        w = int(vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))\n                        h = int(vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\n                        vid_writer = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*fourcc), fps, (w, h))\n                    vid_writer.write(im0)\n\n    if save_txt or save_img:\n        s = f\"\\n{len(list(save_dir.glob('labels\/*.txt')))} labels saved to {save_dir \/ 'labels'}\" if save_txt else ''\n        print(f\"Results saved to {save_dir}{s}\")\n\n    print(f'Done. ({time.time() - t0:.3f}s)')","b55bc4d5":"if IS_PRIVATE:\n    len(results_boxes)","f6a5636f":"if IS_PRIVATE:\n    box_df = pd.DataFrame(np.concatenate(results_boxes), columns=['left', 'top', 'width', 'height'])\n    test_df = pd.DataFrame({'scores':np.concatenate(results_scores), 'image_name':result_image_ids})\n    test_df = pd.concat([test_df, box_df], axis=1)\n\n    if USESTH:\n        test_df = test_df[test_df.scores > score_thres]\n\n    test_df.shape","c490c600":"if IS_PRIVATE:\n    test_df","17d0afa9":"if IS_PRIVATE:\n    #gameKey,playID,view,video,frame,left,width,top,height\n    #57590,3607,Endzone,57590_003607_Endzone.mp4,1,1,1,1,1\n    test_df['gameKey'] = test_df.image_name.str.split('_').str[0].astype(int)\n    test_df['playID'] = test_df.image_name.str.split('_').str[1].astype(int)\n    test_df['view'] = test_df.image_name.str.split('_').str[2]\n    test_df['frame'] = test_df.image_name.str.split('_').str[3].str.replace('.png','').astype(int)\n    test_df['video'] = test_df.image_name.str.rsplit('_',1).str[0] + '.mp4'\n    test_df = test_df[[\"gameKey\",\"playID\",\"view\",\"video\",\"frame\",\"left\",\"width\",\"top\",\"height\"]]\n    test_df","089da1a2":"!mv * \/tmp\/","3964caeb":"import nflimpact\nenv = nflimpact.make_env()\n\nif IS_PRIVATE:\n    env.predict(test_df) # df is a pandas dataframe of your entire submission file\nelse:\n    sub = pd.read_csv('..\/input\/nfl-impact-detection\/sample_submission.csv')\n    env.predict(sub)","8fade206":"Many codes from the orginal implementation https:\/\/github.com\/ultralytics\/yolov5 (GPL-3 licence) but with some adjustments to fit the competition and Pseudo Labeling\n\nDiscussion topic to the notebook https:\/\/www.kaggle.com\/c\/nfl-impact-detection\/discussion\/206832"}}