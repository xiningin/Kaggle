{"cell_type":{"9244f29a":"code","6c31e0e1":"code","e0d88d5f":"code","23facb85":"code","4cd8211e":"code","c412425d":"code","c6e13af6":"code","4497e20f":"code","211e0adc":"code","73238345":"code","993f7a83":"code","28900785":"code","2d436373":"code","754d4a0d":"code","afdd56d6":"code","0bb521da":"code","6f328d4f":"code","9bb164d0":"markdown","92b48613":"markdown","8ba36496":"markdown","53d300ab":"markdown","6c474745":"markdown"},"source":{"9244f29a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6c31e0e1":"! pip uninstall torch torchvision -y\n! pip install torch==1.6.0+cu101 torchvision==0.7.0+cu101 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html\n!pip install -U transformers\n!pip install -U simpletransformers ","e0d88d5f":"df = pd.read_json('..\/input\/arxiv-papers-2010-2020\/arXiv_title_abstract_20200809_2011_2020.json')\ndf","23facb85":"papers = pd.DataFrame({\n    'title': df.title,\n    'abstract': df.abstract\n})\npapers.head()\npapers = papers.sample(10000)\ndf = papers\ndf","4cd8211e":"# Simpletransformers implementation of T5 model expects a data to be a dataframe with 3 columns: <prefix>, <input_text>, <target_text>\n\n# <prefix>: A string indicating the task to perform. (E.g. \"question\", \"stsb\")\n# <input_text>: The input text sequence (we will use Paper's abstract as input_text )\n# <target_text: The target sequence (we will use Paper's title as output_text )","c412425d":"import logging\nlogging.basicConfig(level=logging.INFO)\ntransformers_logger = logging.getLogger(\"transformers\")\ntransformers_logger.setLevel(logging.WARNING)","c6e13af6":"df.columns = ['target_text', 'input_text']\ndf = df.dropna()\ndf","4497e20f":"val_df = df.sample(frac=0.1, random_state=1007)\ntrain_df = df.drop(val_df.index)\ntest_df = train_df.sample(frac=0.1, random_state=1007)\ntrain_df.drop(test_df.index, inplace=True)","211e0adc":"train_df","73238345":"val_df","993f7a83":"test_df","28900785":"train_df.shape, val_df.shape","2d436373":"# your code here \nimport logging\nimport pandas as pd\nfrom simpletransformers.t5 import T5Model\n\nlogging.basicConfig(level=logging.INFO)\ntransformers_logger = logging.getLogger(\"transformers\")\ntransformers_logger.setLevel(logging.WARNING)\n\ntrain_df['prefix'] = \"summarize\"\nval_df['prefix'] = \"summarize\"\n\n# \"max_seq_length\": 512,\nmodel_args = {\n    \"reprocess_input_data\": True,\n    \"overwrite_output_dir\": True,\n    \"train_batch_size\": 10,\n    \"num_train_epochs\": 3,\n}\n\n# Create T5 Model\nmodel = T5Model(\"t5-small\", args=model_args, use_cuda=True)\n\n# Train T5 Model on new task\nmodel.train_model(train_df)","754d4a0d":"test_df['prefix'] = \"summarize\"","afdd56d6":"# your code here \n# Evaluate T5 Model on new task\nresults = model.eval_model(test_df)\n\n# Predict with trained T5 model\n#print(model.predict([\"convert: four\"]))\nresults","0bb521da":"# your code here \nrandom_num = 3\nactual_title = test_df.iloc[random_num]['target_text']\nactual_abstract = [\"summarize: \"+test_df.iloc[random_num]['input_text']]\npredicted_title = model.predict(actual_abstract)\n\nprint(f'Actual Title: {actual_title}')\nprint(f'Predicted Title: {predicted_title}')\nprint(f'Actual Abstract: {actual_abstract}')","6f328d4f":"random_num = 7\nactual_title = test_df.iloc[random_num]['target_text']\nactual_abstract = [\"summarize: \"+test_df.iloc[random_num]['input_text']]\npredicted_title = model.predict(actual_abstract)\n\nprint(f'Actual Title: {actual_title}')\nprint(f'Predicted Title: {predicted_title}')\nprint(f'Actual Abstract: {actual_abstract}')","9bb164d0":"# shape","92b48613":"# We will use simpletransformers library to train a T5 model","8ba36496":"# evaluation \nuse BLUE score to evaluate generated titles in test data ","53d300ab":"# use recipes below to predict titles \n\n- https:\/\/keras.io\/examples\/nlp\/lstm_seq2seq\/ \n- https:\/\/www.youtube.com\/watch?v=ElmBrKyMXxs \n- https:\/\/www.kaggle.com\/sgladysh\/arxiv-title-generation-t5-tensorflow-tpu \n\nYou can use pretrained models or other techniques if you want ","6c474745":"# Generate titles for some sample papers from test data "}}