{"cell_type":{"afd0f7c2":"code","a125ae6f":"code","b1d56263":"code","d0fd9e74":"code","5878857a":"code","bc5e4ac3":"code","60437105":"code","f92d3f2f":"code","5999aaf7":"code","157dcbc5":"code","1acac530":"code","bf0ac700":"code","fadd4771":"code","3949760e":"code","ad8de604":"code","b9a7dc32":"code","cc17b6a2":"code","229a678b":"code","27a8faf0":"code","7de25877":"code","f296e3ca":"code","915c6ffe":"code","20b957e5":"code","d25e24c1":"code","98e0d6c6":"code","ae55df94":"code","e8ad0b85":"code","aadbc704":"code","58216cb6":"code","2f667f45":"code","8cde7c75":"code","46daaf2b":"code","d034874b":"markdown","f02ffb9a":"markdown","c9f1d37d":"markdown","3c79d509":"markdown","87104d85":"markdown","d6e14fc8":"markdown"},"source":{"afd0f7c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a125ae6f":"import numpy as np\nimport pandas as pd \nfrom keras.layers import Input, Lambda, Dense, Flatten , Dropout , MaxPool2D\nfrom keras.models import Model , Sequential\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom glob import glob\nimport matplotlib.pyplot as plt\nimport random\nimport os\nfrom distutils.file_util import copy_file\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom keras.callbacks import EarlyStopping ,ReduceLROnPlateau","b1d56263":"covidDataPath='..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/COVID'\npneumoniaDataPath='..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Viral Pneumonia'\nnormalDataPath='..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Normal'","d0fd9e74":"# Lists for access paths\nlistCovidPaths = []\nlistNormalPaths = []\n\n# Get covid images files paths\nfor root, directories, files in os.walk(covidDataPath):\n    for name in files:\n        listCovidPaths.append(os.path.join(root, name))\n\n# for root, directories, files in os.walk(pneumoniaDataPath):\n#     for name in files:\n#         listCovidPaths.append(os.path.join(root, name))        \n        \n# Get normal images files paths\nfor root, directories, files in os.walk(normalDataPath):\n    for name in files:\n        listNormalPaths.append(os.path.join(root, name))\n\n# Shuffle lists for random train \/ test\n\nrandom.shuffle(listCovidPaths)\nrandom.shuffle(listNormalPaths)","5878857a":"len(listCovidPaths)","bc5e4ac3":"len(listNormalPaths)","60437105":"# main folder\n!mkdir .\/Data\/\n\n# Train data folders\n!mkdir .\/Data\/Train\/\n!mkdir .\/Data\/Train\/Covid\/\n!mkdir .\/Data\/Train\/Normal\/\n\n# Test data folders\n!mkdir .\/Data\/Test\/\n!mkdir .\/Data\/Test\/Covid\/\n!mkdir .\/Data\/Test\/Normal\/\n\n# Valid data folders\n!mkdir .\/Data\/Valid\/\n!mkdir .\/Data\/Valid\/Covid\/\n!mkdir .\/Data\/Valid\/Normal\/\n\n# Paths to covid images folders\npathCovidTrain = '.\/Data\/Train\/Covid\/'\npathCovidTest = '.\/Data\/Test\/Covid\/'\npathCovidValid='.\/Data\/Valid\/Covid\/'\n\n\n# Paths to normal images folders\npathNormalTrain = '.\/Data\/Train\/Normal\/'\npathNormalTest = '.\/Data\/Test\/Normal\/'\npathNormalValid='.\/Data\/Valid\/Normal\/'\n","f92d3f2f":"\"\"\"\nMoving files to new folders\n\"\"\"\n\n# Move covid images files to new folders\nfor i in range(3616):\n    if i < 2893:\n        copy_file(listCovidPaths[i], pathCovidTrain)\n    elif i>=2893 and i<=3255:\n        copy_file(listCovidPaths[i], pathCovidValid)\n    else  : \n        copy_file(listCovidPaths[i], pathCovidTest)\n        \nfor i in range(10192):\n    if i < 8154:\n        copy_file(listNormalPaths[i], pathNormalTrain)\n    elif i>=8154 and i<=9174:\n        copy_file(listNormalPaths[i], pathNormalValid)     \n    else  : \n        copy_file(listNormalPaths[i], pathNormalTest)       ","5999aaf7":"\ntrain_data_gen = ImageDataGenerator(rescale=1.\/255 ,\n                                    zoom_range= 0.3, \n                                    horizontal_flip= True, \n                                    shear_range= 0.2,\n                                    rotation_range = 30\n                                    )\n\ntrain = train_data_gen.flow_from_directory(directory= '.\/Data\/Train',\n                                           class_mode = 'binary',\n                                           batch_size=64,\n                                           target_size=(224,224))","157dcbc5":"test_data_gen = ImageDataGenerator(rescale=1.\/255 )\n\ntest = test_data_gen.flow_from_directory(directory= '.\/Data\/Test' , \n                                          target_size=(224,224), \n                                            class_mode = 'binary',\n                                        shuffle=False,\n                                        batch_size=64)\n\nvalid = test_data_gen.flow_from_directory(directory= '.\/Data\/Valid' , \n                                          target_size=(224,224), \n                                            class_mode = 'binary',\n                                        shuffle=False,\n                                        batch_size=64)","1acac530":"plt.figure(figsize=(12, 12))\nfor i in range(0, 10):\n    plt.subplot(2, 5, i+1)\n    for X_batch, Y_batch in train:\n        image = X_batch[0]        \n        dic = {0:'NORMAL', 1:'COVID'}\n        plt.title(dic.get(Y_batch[0]))\n        plt.axis('off')\n        plt.imshow(np.squeeze(image),cmap='gray',interpolation='nearest')\n        break\nplt.tight_layout()\nplt.show()","bf0ac700":"inc = tf.keras.applications.vgg16.VGG16(\n    include_top = False,\n    weights = 'imagenet',\n    input_shape = (224,224,3),\n    classifier_activation = 'sigmoid'\n)","fadd4771":"for layer in inc.layers:\n    layer.trainable = False","3949760e":"'''\nDefinition of the Keras model outputs\n'''\n\nx = Flatten()(inc.output)\nprediction= Dense(units=1 , activation='sigmoid')(x)\n\nmodel = Model(inc.input,prediction)","ad8de604":"\"\"\"\nCompile model\n\"\"\"\n\nmodel.compile(\n    optimizer = tf.keras.optimizers.Adam(0.001),\n    loss = 'binary_crossentropy',\n    metrics = ['accuracy']\n)","b9a7dc32":"early = EarlyStopping(monitor='val_accuracy', mode='min', patience=3)\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', patience = 2, verbose=1,factor=0.3, min_lr=0.000001)\ncallbacks_list = [ early, learning_rate_reduction]","cc17b6a2":"from sklearn.utils.class_weight import compute_class_weight\nweights = compute_class_weight('balanced',np.unique(train.classes), train.classes)\ncw = dict(zip( np.unique(train.classes), weights))\nprint(cw)","229a678b":"hist = model.fit(train, steps_per_epoch= len(train), epochs= 8, validation_data= valid,class_weight=cw,validation_steps= len(test), callbacks=callbacks_list)","27a8faf0":"pd.DataFrame(hist.history).plot()","7de25877":"import seaborn as sns","f296e3ca":"\n#Plot training and validation Loss\nfig, axarr = plt.subplots(1,3, figsize=(15,5),sharex=True)\n\nsns.set(style=\"ticks\", font_scale = 1)\nsns.despine(top=True, right=True, left=False, bottom=False)\n\nhistoryDF = pd.DataFrame.from_dict(hist.history)\n\nax = sns.lineplot(x =historyDF.index, y = hist.history['accuracy'],ax=axarr[0],label=\"Training\");\nax = sns.lineplot(x =historyDF.index, y = hist.history['val_accuracy'],ax=axarr[0],label=\"Validation\");\nax.set_ylabel('Recall')\n\nax = sns.lineplot(x =historyDF.index, y = hist.history['loss'],ax=axarr[1],label=\"Training\");\nax = sns.lineplot(x =historyDF.index, y = hist.history['val_loss'],ax=axarr[1],label=\"Validation\");\nax.set_ylabel('Loss')\nax = sns.lineplot(x =historyDF.index, y = hist.history['lr'],ax=axarr[2]);\nax.set_ylabel('Learning Rate')    \naxarr[0].set_title(\"Training and Validation Set - Accuracy\")\naxarr[1].set_title(\"Training and Validation Set - Loss\")\naxarr[2].set_title(\"Learning Rate during Training\")\n\nfor ax in axarr:\n    ax.set_xlabel('Epochs')\n    \nplt.suptitle('Training Performance Plots',fontsize=16, weight = 'bold');\nfig.tight_layout(pad=3.0)      \nplt.show()","915c6ffe":"test_accu = model.evaluate(test)\nprint('The testing accuracy is :',test_accu[1]*100, '%')","20b957e5":"preds = model.predict(test,verbose=1)\npredictions = preds.copy()\npredictions[predictions <= 0.5] = 0\npredictions[predictions > 0.5] = 1","d25e24c1":"from sklearn.metrics import classification_report,confusion_matrix\ncm = pd.DataFrame(data=confusion_matrix(test.classes, predictions, labels=[0, 1]),index=[\"Actual Normal\", \"Actual COVID\"],\ncolumns=[\"Predicted Normal\", \"Predicted COVID\"])\nimport seaborn as sns\nsns.heatmap(cm,annot=True,fmt=\"d\")","98e0d6c6":"print(classification_report(y_true=test.classes,y_pred=predictions,target_names =['NORMAL','COVID']))","ae55df94":"test.reset()\nx=np.concatenate([test.next()[0] for i in range(test.__len__())])\ny=np.concatenate([test.next()[1] for i in range(test.__len__())])\nprint(x.shape)\nprint(y.shape)","e8ad0b85":"y_true=test.classes","aadbc704":"from sklearn.metrics import precision_recall_fscore_support, accuracy_score\n","58216cb6":"#Accuracy Result\nacc = accuracy_score(y_true, predictions)\n#Precision, Recall and F-Score (For the whole dataset)\nresults_all = precision_recall_fscore_support(y_true, predictions, average='macro',zero_division = 1)\n#Precision, Recall and F-Score (For each Class)\nresults_class = precision_recall_fscore_support(y_true, predictions, average=None, zero_division = 1)\n\n#Organise the Results into a Dataframe\nmetric_columns = ['Precision','Recall', 'F-Score','S']\nall_df = pd.concat([pd.DataFrame(list(results_class)).T,pd.DataFrame(list(results_all)).T])\nall_df.columns = metric_columns\nall_df.index = ['COVID','Normal','Total']\n\n#Function to plot the metrics into a nice bar Plot\ndef metrics_plot(df,metric):\n    plt.figure(figsize=(22,10))\n    ax = sns.barplot(data =df, x=df.index, y = metric,palette = \"Blues_d\")\n    #Bar Labels\n    for p in ax.patches:\n        ax.annotate(\"%.1f%%\" % (100*p.get_height()), (p.get_x() + p.get_width() \/ 2., abs(p.get_height())),\n        ha='center', va='bottom', color='black', xytext=(-3, 5),rotation = 'horizontal',textcoords='offset points')\n    sns.despine(top=True, right=True, left=True, bottom=False)\n    ax.set_xlabel('Class',fontsize = 14,weight = 'bold')\n    ax.set_ylabel(metric,fontsize = 14,weight = 'bold')\n    ax.set(yticklabels=[])\n    ax.axes.get_yaxis().set_visible(False) \n    plt.title(metric+ ' Results per Class', fontsize = 16,weight = 'bold');\n    \nmetrics_plot(all_df, 'Precision')#Results by Class\nmetrics_plot(all_df, 'Recall')#Results by Class\nmetrics_plot(all_df, 'F-Score')#Results by Class\nprint('**Overall Results**')\nprint('Accuracy Result: %.2f%%'%(acc*100)) #Accuracy of the whole Dataset\nprint('Precision Result: %.2f%%'%(all_df.iloc[1,0]*100))#Precision of the whole Dataset\nprint('Recall Result: %.2f%%'%(all_df.iloc[1,1]*100))#Recall of the whole Dataset\nprint('F-Score Result: %.2f%%'%(all_df.iloc[1,2]*100))#F-Score of the whole Dataset","2f667f45":"dic = {0:'NORMAL', 1:'COVID'}\nplt.figure(figsize=(20,20))\nfor i in range(0+224, 15+224):\n  plt.subplot(5,3, (i-224)+1)\n  if preds[i, 0] >= 0.5: \n      out = ('{:.2%} probability of being Covid case'.format(preds[i][0]))\n      \n      \n  else: \n      out = ('{:.2%} probability of being Normal case'.format(1-preds[i][0]))\n      \n      \n\n  plt.title(out+\"\\n Actual case : \"+ dic.get(y[i]))    \n  plt.imshow(np.squeeze(x[i]))\n  plt.axis('off')\nplt.show()","8cde7c75":"# Testing with random Chest X-Ray\nimg_path = '..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/COVID\/COVID-1.png'\nfrom tensorflow.keras.preprocessing import image\nimg = image.load_img(img_path, target_size=(224,224))\n\n# Preprocessing the image\npp_img = image.img_to_array(img)\npp_img = pp_img\/255\npp_img = np.expand_dims(pp_img, axis=0)\n\n#predict\npreds= model.predict(pp_img)\n\n#print\nplt.figure(figsize=(6,6))\nplt.axis('off')\nif preds>= 0.5: \n    out = ('I am {:.2%} percent confirmed that this is a Normal case'.format(preds[0][0]))\n    \nelse: \n    out = ('{:.2%} percent confirmed that this is a COVID case'.format(1-preds[0][0]))\n    \n\nplt.title(\" Chest X-Ray\\n\"+out)  \nplt.imshow(np.squeeze(pp_img))\nplt.show()","46daaf2b":"from sklearn.metrics import roc_curve\nfpr_keras, tpr_keras, thresholds_keras = roc_curve(test.classes, predictions)\nfrom sklearn.metrics import auc\nauc_keras = auc(fpr_keras, tpr_keras)\nplt.figure(1)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr_keras, tpr_keras, label='Keras (area = {:.3f})'.format(auc_keras))\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='best')\nplt.show()","d034874b":"# Importing ResNet V2","f02ffb9a":"## Confusion Matrix","c9f1d37d":"# Data Augmentation","3c79d509":"# Data Preparation","87104d85":"# Importing Required Libraries","d6e14fc8":"\n# Results"}}