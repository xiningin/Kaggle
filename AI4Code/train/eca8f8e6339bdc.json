{"cell_type":{"744ec6b1":"code","3041709c":"code","8284137b":"code","f0ad4205":"code","92f5c983":"code","53b2366d":"code","69875f0a":"code","4faec104":"code","64765a37":"code","e5a665a6":"code","6c0c94c8":"code","9ffb6005":"code","e63769fd":"code","b16de2c9":"code","34fa943f":"code","657585ad":"code","b112fb4c":"code","12456c85":"code","d7cdb4e2":"code","36713797":"code","d8aeea42":"code","7c63fa94":"code","96f96f73":"code","3d87fe7c":"code","9a14c76e":"code","5341f4a2":"code","f95d7294":"code","2ab5057a":"code","bc7a5d7b":"code","0f64310c":"code","0e40ec56":"code","2bbd87cb":"code","cd6a939d":"code","ff6259df":"code","6501666a":"code","4b327f74":"code","4427d13a":"code","de6270aa":"code","22d4eb3f":"code","8e4c4777":"code","375a6700":"code","7da941ec":"code","1c150fa3":"code","178f7887":"code","039aafd3":"code","b8447cff":"code","25a72a62":"code","53b632c5":"code","701e516a":"code","0cd2e670":"code","fc27334a":"code","6d667301":"code","08334b91":"code","d71679cc":"code","6ca1bf2e":"code","c9e2b2c9":"code","2aac3fa7":"code","2d02b118":"code","f501a6a3":"code","370751d2":"code","cf248fa1":"code","78739cd2":"code","44375527":"code","c7e14ad2":"code","e3d980b1":"code","eb8aaf04":"code","44d5535c":"code","cf3313f6":"code","9c42a4ff":"code","5abdfda5":"code","04d43e38":"code","89fc4b1b":"code","28f01205":"code","85d504f7":"code","3151c57f":"code","4d595c2e":"code","1aa31cb9":"code","1c360470":"code","c2bf3bd0":"code","9b873d23":"code","896f48e4":"code","a603a27a":"code","5be68e26":"code","fc3c8b32":"code","cbdd769d":"code","b15d9302":"code","49f28355":"code","30ab84ea":"code","52b894a7":"code","476fead9":"code","629ddede":"code","9c0aa2b6":"code","25b3539d":"code","11a7b480":"code","264405cd":"code","7f43914a":"code","9adac5e3":"code","e492f64a":"code","699e656f":"code","b866efbe":"code","20d6e9e1":"code","2da42b98":"code","7d78751d":"code","d9d76c11":"code","2d5e900c":"code","99dfce36":"code","1776efaa":"code","6a0ecab8":"code","af6f76aa":"code","8ebf370c":"code","efa6d5ef":"code","97c3eb8a":"code","c314da09":"code","69a36ce5":"code","a7caa37f":"code","540c859d":"code","c460e586":"code","88b886c3":"code","c2b14723":"code","335da68a":"code","da24d9e1":"code","4cb86b8d":"code","7bff0561":"code","1a6995f3":"code","06ebd864":"code","048dab5c":"code","5ebae6ec":"code","04bfe324":"code","5d3817c2":"code","f24f6268":"code","163d369c":"code","391975f7":"code","bc6e6ffe":"code","810bb1d6":"code","910537be":"code","ca81c9f6":"code","e8711a71":"code","aec6981d":"code","702a2ce5":"code","e904cacb":"code","035db30c":"code","8533e6b1":"code","91e74127":"code","05c7def9":"code","7afe3475":"code","0082ab1e":"code","e54fb446":"code","e18e8b04":"code","07c05029":"code","515209b5":"code","9dc6a57a":"code","49ee0b7d":"code","0263d55a":"code","8089caf1":"code","8b95ea2c":"code","e148f73b":"code","2d04dbf6":"code","20c75f51":"code","523e9e43":"code","88955c84":"code","1ec4559b":"code","5f89c149":"markdown","2c9861ed":"markdown","06437262":"markdown"},"source":{"744ec6b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3041709c":"df = pd.read_csv(\"..\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv\")","8284137b":"df.head()","f0ad4205":"df.shape","92f5c983":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nsns.heatmap(df.isnull(), yticklabels=False, cbar=False)","53b2366d":"df.columns","69875f0a":"df['Loan_Status'].unique()","4faec104":"df['Loan_Status'].nunique()","64765a37":"df['Loan_Status']=df['Loan_Status'].replace('Y', 1)\ndf['Loan_Status']=df['Loan_Status'].replace('N', 0)","e5a665a6":"df['Loan_Status'].unique()","6c0c94c8":"sns.countplot(df['Loan_Status'])","9ffb6005":"df.isnull().sum()","e63769fd":"df['Dependents'].value_counts()","b16de2c9":"df['Dependents'].unique()","34fa943f":"df['Dependents']=df['Dependents'].fillna('0')","657585ad":"df['Dependents'].unique()","b112fb4c":"df['Dependents']=df['Dependents'].replace('3+', 3)","12456c85":"df['Dependents'].value_counts()","d7cdb4e2":"df['Dependents'].value_counts()","36713797":"sns.set_style('whitegrid')\nplt.figure(figsize=(10,5))\nsns.countplot(df['Dependents'], hue=df['Loan_Status'])","d8aeea42":"df.isnull().sum()","7c63fa94":"df['Loan_Amount_Term'].describe()","96f96f73":"df['Loan_Amount_Term'].nunique()","3d87fe7c":"df['Loan_Amount_Term'].value_counts()","9a14c76e":"df['Loan_Amount_Term'].mean()","5341f4a2":"df['Loan_Amount_Term'].isnull().sum()","f95d7294":"plt.hist(df['Loan_Amount_Term'])","2ab5057a":"df.isnull().sum()","bc7a5d7b":"df['Credit_History'].unique()","0f64310c":"df['Credit_History'].value_counts()","0e40ec56":"df['Credit_History']=df['Credit_History'].fillna(0.0)","2bbd87cb":"df['Credit_History'].unique()","cd6a939d":"sns.set_style('whitegrid')\nplt.figure(figsize=(10,5))\nsns.countplot(df['Credit_History'], hue=df['Loan_Status'])","ff6259df":"df.isnull().sum()","6501666a":"df['LoanAmount'].describe()","4b327f74":"df['LoanAmount']=df['LoanAmount'].fillna(df['LoanAmount'].mean())","4427d13a":"plt.hist(df['LoanAmount'])","de6270aa":"plt.boxplot(df['LoanAmount'])","22d4eb3f":"df.isnull().sum()","8e4c4777":"df.shape","375a6700":"df['Self_Employed'].value_counts()","7da941ec":"df['Self_Employed'].unique()","1c150fa3":"df['Self_Employed']=df['Self_Employed'].fillna(0)\ndf['Self_Employed']=df['Self_Employed'].replace('Yes', 1)","178f7887":"df['Self_Employed']=df['Self_Employed'].replace('No', 0)","039aafd3":"df['Self_Employed'].unique()","b8447cff":"sns.set_style('whitegrid')\nplt.figure(figsize=(10,5))\nsns.countplot(df['Self_Employed'], hue=df['Loan_Status'])","25a72a62":"df.isnull().sum()","53b632c5":"df.dropna(inplace=True)","701e516a":"sns.heatmap(df.isnull(),yticklabels=False, cbar=False)","0cd2e670":"df.drop(['Loan_ID'], axis='columns', inplace=True)","fc27334a":"df.columns","6d667301":"df.info()","08334b91":"df_categorical=df.select_dtypes(include=['object']).copy()\ndf_categorical.head(3)","d71679cc":"for i in df_categorical.columns:\n    print(f'{i} : {df_categorical[i].unique()}')","6ca1bf2e":"df_categorical['Dependents']=df_categorical['Dependents'].astype('int64')","c9e2b2c9":"df_categorical['Dependents'][:5]","2aac3fa7":"df_categorical_copy=df_categorical.drop(['Dependents'], axis='columns')","2d02b118":"df_categorical_copy.head()","f501a6a3":"from sklearn.preprocessing import LabelEncoder\nscaler_label=LabelEncoder()\ndf_categorical_copy=df_categorical_copy.apply(LabelEncoder().fit_transform)\n\ndf_categorical_copy.head(5)","370751d2":"df_new_categorical=pd.concat([df_categorical_copy,df_categorical['Dependents']], axis=1, join='inner')","cf248fa1":"df_new_categorical.head()","78739cd2":"df_new_categorical.info()","44375527":"df_new_categorical['Dependents']=df_new_categorical['Dependents'].astype('int64')","c7e14ad2":"df_new_categorical.info()","e3d980b1":"df_numeric=df.select_dtypes(exclude=['object']).copy()\ndf_numeric.head(3)","eb8aaf04":"df_numeric.info()","44d5535c":"for i in df_numeric.columns:\n    sns.boxplot(df_numeric[i])\n    plt.show()","cf3313f6":"for i in df_numeric.columns:\n    plt.hist(df_numeric[i])\n    plt.xlabel(i)\n    plt.show()","9c42a4ff":"Q1 = df_numeric.quantile(0.25)\nQ3 = df_numeric.quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)","5abdfda5":"df_numeric.shape","04d43e38":"print((df_numeric < (Q1 - 1.5 * IQR)) |(df_numeric > (Q3 + 1.5 * IQR)))","89fc4b1b":"df_numeric_remove_outlier = df_numeric[~((df_numeric < (Q1 - 1.5 * IQR)) |(df_numeric > (Q3 + 1.5 * IQR))).any(axis=1)]\ndf_numeric_remove_outlier.shape","28f01205":"df_train=pd.concat([df_new_categorical, df_numeric_remove_outlier], axis=1, join='inner')","85d504f7":"df_train.head(5)","3151c57f":"df_train.info()","4d595c2e":"x_data_train=df_train.drop(['Loan_Status'], axis='columns')\ny_data_train=df_train.Loan_Status","1aa31cb9":"x_data_train.head(5)","1c360470":"y_data_train[:5]","c2bf3bd0":"x_data_train.describe()","9b873d23":"from sklearn.preprocessing import StandardScaler\nscaler_train=StandardScaler()\nscaler_train_data=scaler_train.fit_transform(x_data_train)","896f48e4":"scaler_train_data[:5]","a603a27a":"df_train_scaled=pd.DataFrame(data=scaler_train_data , columns=x_data_train.columns)","5be68e26":"df_train_scaled.head(5)","fc3c8b32":"y_data_train[:5]","cbdd769d":"df_test = pd.read_csv(\"..\/input\/loan-prediction-problem-dataset\/test_Y3wMUE5_7gLdaTN.csv\")","b15d9302":"df_test.head()","49f28355":"df_test.describe()","30ab84ea":"df_test.isnull().sum()","52b894a7":"df_test.shape","476fead9":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nsns.heatmap(df_test.isnull(), yticklabels=False, cbar=False)","629ddede":"df_test['Dependents'].value_counts()","9c0aa2b6":"df_test['Dependents'].unique()","25b3539d":"df_test['Dependents']=df_test['Dependents'].replace('3+', '3')\ndf_test['Dependents']=df_test['Dependents'].fillna('0')","11a7b480":"df_test['Dependents'].unique()","264405cd":"df_test['Dependents'].value_counts()","7f43914a":"sns.set_style('whitegrid')\nplt.figure(figsize=(10,5))\nsns.countplot(df_test['Dependents'])","9adac5e3":"df_test.isnull().sum()","e492f64a":"df_test['Loan_Amount_Term'].describe()","699e656f":"df_test['Loan_Amount_Term'].nunique()","b866efbe":"df_test['Loan_Amount_Term'].nunique()","20d6e9e1":"df_test['Loan_Amount_Term'].value_counts()","2da42b98":"df_test['Loan_Amount_Term'].mean()","7d78751d":"df_test['Loan_Amount_Term']=df_test['Loan_Amount_Term'].fillna(df_test['Loan_Amount_Term'].mean())","d9d76c11":"df_test['Loan_Amount_Term'].isnull().sum()","2d5e900c":"plt.hist(df_test['Loan_Amount_Term'])","99dfce36":"df_test.isnull().sum()","1776efaa":"df_test['Credit_History'].unique()","6a0ecab8":"df_test['Credit_History'].value_counts()","af6f76aa":"df_test['Credit_History']=df_test['Credit_History'].fillna(0.0)","8ebf370c":"df_test['Credit_History'].unique()","efa6d5ef":"df_test['Credit_History'].isnull().sum()","97c3eb8a":"df_test.isnull().sum()","c314da09":"df_test['LoanAmount'].describe()","69a36ce5":"df_test['LoanAmount']=df_test['LoanAmount'].fillna(df_test['LoanAmount'].mean())","a7caa37f":"df_test['LoanAmount'].isnull().sum()","540c859d":"plt.hist(df_test['LoanAmount'])","c460e586":"plt.boxplot(df_test['LoanAmount'])","88b886c3":"df_test.isnull().sum()","c2b14723":"df_test['Self_Employed'].value_counts()","335da68a":"df_test['Self_Employed'].unique()","da24d9e1":"df_test['Self_Employed']=df_test['Self_Employed'].fillna(0)\ndf_test['Self_Employed']=df_test['Self_Employed'].replace('Yes', 1)\ndf_test['Self_Employed']=df_test['Self_Employed'].replace('No', 0)","4cb86b8d":"df_test['Self_Employed'].unique()","7bff0561":"sns.set_style('whitegrid')\nplt.figure(figsize=(5,5))\nsns.countplot(df_test['Self_Employed'])","1a6995f3":"df_test.isnull().sum()","06ebd864":"df_test.dropna(inplace=True)","048dab5c":"sns.heatmap(df_test.isnull(),yticklabels=False, cbar=False)","5ebae6ec":"df_test.drop(['Loan_ID'], axis='columns', inplace=True)","04bfe324":"df_test.columns","5d3817c2":"df_test.info()","f24f6268":"df_categorical_test=df_test.select_dtypes(include=['object']).copy()\ndf_categorical_test.head(3)","163d369c":"for i in df_categorical_test.columns:\n    print(f'{i} : {df_categorical_test[i].unique()}')","391975f7":"from sklearn.preprocessing import LabelEncoder\nscaler_label=LabelEncoder()\ndf_categorical_test=df_categorical_test.apply(LabelEncoder().fit_transform)\n\ndf_categorical_test.head(5)","bc6e6ffe":"df_categorical_test['Dependents'].unique()","810bb1d6":"df_categorical_test.info()","910537be":"df_numeric_test=df_test.select_dtypes(exclude=['object']).copy()\ndf_numeric_test.head(3)","ca81c9f6":"df_final_test=pd.concat([df_categorical_test, df_numeric_test], axis=1, join='inner')","e8711a71":"df_final_test.info()","aec6981d":"df_final_test.shape","702a2ce5":"from sklearn.preprocessing import StandardScaler\nscaler_test=StandardScaler()\nscaler_test_data=scaler_test.fit_transform(df_final_test)","e904cacb":"scaler_test_data[:5]","035db30c":"df_test_scaled=pd.DataFrame(data=scaler_test_data , columns=df_final_test.columns)","8533e6b1":"df_test_scaled.head(5)","91e74127":"#train_test_split.\n\nfrom sklearn.model_selection import  train_test_split\nX_train, X_test, y_train, y_test= train_test_split(df_train_scaled,y_data_train, test_size=0.2)","05c7def9":"X_train.shape , X_test.shape , y_train.shape , y_test.shape","7afe3475":"#model creation by using DecisionTreeClassifier\n\nfrom sklearn.tree import DecisionTreeClassifier\nmodel_DT=DecisionTreeClassifier(criterion='entropy')\nmodel_DT.fit(X_train,y_train)","0082ab1e":"y_pred_DT=model_DT.predict(X_test)","e54fb446":"y_pred_DT[:5]","e18e8b04":"y_test[:5]","07c05029":"model_DT.score(X_test,y_test)","515209b5":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import  DecisionTreeClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.metrics import classification_report,confusion_matrix\n\n\n\n","9dc6a57a":"model_params = {\n    'svm': {\n        'model': SVC(gamma='auto'),\n        'params' : {\n            'C': [1,10,20,25,30,40],\n            'kernel': ['rbf','linear']\n        }  \n    },\n    'random_forest': {\n        'model': RandomForestClassifier(),\n        'params' : {\n            'n_estimators': [1,5,10,15,20,25,30]\n        }\n    },\n    'logistic_regression' : {\n        'model': LogisticRegression(solver='liblinear'),\n        'params': {\n            'C': [1,5,10,15,20,25]\n        }\n    },\n    'decision_tree': {\n        'model': DecisionTreeClassifier(),\n        'params':{\n            'criterion':['gini','entropy']\n        }\n    }\n}","49ee0b7d":"#cv=5\nscores = []\n\nfor model_name, mp in model_params.items():\n    clf =  GridSearchCV(mp['model'], mp['params'], cv=5, return_train_score=False)\n    clf.fit(X_train, y_train)\n    scores.append({\n        'model': model_name,\n        'best_score': clf.best_score_,\n        'best_params': clf.best_params_\n    })\n    \ndf_score = pd.DataFrame(scores,columns=['model','best_score','best_params'])\ndf_score","0263d55a":"model=SVC(kernel='rbf')\nmodel.fit(X_train,y_train)","8089caf1":"model.score(X_test,y_test)","8b95ea2c":"y_pred=model.predict(X_test)","e148f73b":"y_pred[:5]","2d04dbf6":"y_train[:5]","20c75f51":"cm=confusion_matrix(y_test,y_pred)\ncm","523e9e43":"print(classification_report(y_test,y_pred))","88955c84":"y_pred_test_data=model.predict(df_test_scaled)","1ec4559b":"y_pred_test_data[:5]","5f89c149":"# EDA for test data","2c9861ed":"# using gridsearchcv and crossvalidation","06437262":"### Hence we conclude that svm plays the better role with c=1 and kernel =rbf"}}