{"cell_type":{"602b6093":"code","6d35d789":"code","53378f01":"code","0fce6be9":"code","0c7278a7":"code","a5b21e2e":"code","c66e8c2f":"code","7772f2b1":"code","3d0cca4f":"markdown","b17a2704":"markdown"},"source":{"602b6093":"import psutil\ndef get_size(bytes, suffix=\"B\"):\n    factor = 1024\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if bytes < factor:\n            return f\"{bytes:.2f}{unit}{suffix}\"\n        bytes \/= factor\nprint(\"=\"*40, \"Memory Information\", \"=\"*40)\nsvmem = psutil.virtual_memory()\nprint(f\"Total: {get_size(svmem.total)}\") ; print(f\"Available: {get_size(svmem.available)}\")\nprint(f\"Used: {get_size(svmem.used)}\") ; print(f\"Percentage: {svmem.percent}%\")","6d35d789":"! nvidia-smi","53378f01":"from tqdm import tqdm\nimport sys\nimport os\nimport zipfile\nimport pandas as pd\nimport six\nimport cv2\n\nimport warnings\nimport numpy as np\n\nfrom multiprocessing import pool\nfrom imgaug import augmenters as iaa\nimport imgaug as ia\nfrom multiprocessing.dummy import Pool as ThreadPool\n\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.preprocessing import OneHotEncoder\n\nimport matplotlib.pyplot as plt\nimport itertools\nimport random\nenc = OneHotEncoder(sparse=False)\nimport gc\n# from moviepy.editor import VideoFileClip\n# import moviepy.editor\nfrom scipy.io import loadmat\n\nimport pandas as pd","0fce6be9":"df = pd.read_csv('..\/input\/drive-and-act\/iccv_activities_3s\/activities_3s\/kinect_color\/tasklevel.chunks_90.split_0.train.csv')\ndf.head()","0c7278a7":"root_path = '..\/input\/drive-and-act\/kinect_color\/kinect_color\/'\nsample_rate = 5\n# file_names_csv = os.listdir('\/content\/home\/activities\/activities_3s\/kinect_color')\nfor j in range(1):\n  file_names = []\n  labels = []\n  length = []\n  #csv_path = '\/content\/home\/activities\/activities_3s\/kinect_color\/'\n  #df = pd.read_csv(csv_path + file_names_csv[j])\n  for i in range (df.shape[0]):\n    if i >0 :\n        if  root_path + df.iloc[ i-1, 1]+ '.mp4'!=  root_path + df.iloc[ i, 1]+ '.mp4':\n            path_video = root_path + df.iloc[ i, 1]+ '.mp4'\n            cap = cv2.VideoCapture(path_video)\n            count_frame = 0\n    else:\n        path_video = root_path + df.iloc[ i, 1]+ '.mp4'\n        cap = cv2.VideoCapture(path_video)\n        count_frame = 0\n    frame_start = df.iloc[ i, 3]\n    frame_end = df.iloc[ i, 4]\n    label = df.iloc[ i, 5]\n    length.append(frame_end - frame_start)\n#     count_frame = 0\n    \n    if (frame_end-frame_start) > 39:\n#       cap = cv2.VideoCapture(path_video)\n      root_save = '\/kaggle\/working\/Trainsplit_0\/' + df.iloc[ i, 1]+'\/' + df.iloc[i, 1].split('\/')[-1] +'-'+ str(frame_start)+ '-'+str(frame_end-frame_start)\n      #print(root_save)\n      file_names.append(root_save)\n      labels.append(label)\n      lenn = 0\n      while True:\n        ret, frame = cap.read()\n        if (count_frame) >= frame_start and (count_frame)<= frame_end and ret==True and (count_frame-frame_start)%sample_rate ==0 and lenn<9 :\n          lenn+=1\n          frame = cv2.resize(frame, (256, 256))\n          if not os.path.exists(root_save):\n            os.makedirs(root_save)\n          save_path = df.iloc[ i, 1].split('\/')[-1] + str(count_frame) + '.jpg'\n          final_path = root_save + '\/'+ save_path\n          cv2.imwrite(final_path, frame)\n        count_frame+=1\n        #print(count_frame)\n        if count_frame >= frame_end or ret == False:\n          break\n#   np.save(file_names_csv[j] + 'file_names.npy', file_names)\n#   np.save(file_names_csv[j] + 'labels.npy', labels)\n  np.save('\/kaggle\/working\/Trainsplit_0_file_names.npy', file_names)\n  np.save('\/kaggle\/working\/Trainsplit_0_labels.npy', labels)\n\n    \n\n\n\n\n","a5b21e2e":"np.unique(length, return_counts= True)","c66e8c2f":"len(labels)","7772f2b1":"len(file_names)","3d0cca4f":"# Memory Information","b17a2704":"# GPU Information"}}