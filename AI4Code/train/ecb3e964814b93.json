{"cell_type":{"b342d131":"code","01fc1912":"code","f36e526e":"code","73015089":"code","78e334ea":"code","97d738c2":"code","41dae61a":"code","52ebd494":"code","8bd95d4e":"code","38ebc14b":"code","e4478259":"code","ee3c72dc":"code","3d13659e":"code","045fd4fc":"code","a294a1a4":"code","9d43f17d":"code","fb53e690":"markdown","0e58b3dd":"markdown","a08c56cc":"markdown","9848e4f4":"markdown","95ab6ee7":"markdown","3581b6df":"markdown","be141e27":"markdown","d19743c5":"markdown","6f80b3e5":"markdown","9af90902":"markdown","88341031":"markdown","33e7d758":"markdown","b871e045":"markdown"},"source":{"b342d131":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nfrom matplotlib.cm import rainbow\nimport seaborn as sns\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.metrics import precision_score, recall_score, f1_score\nfrom sklearn.metrics import plot_roc_curve\nfrom sklearn.metrics import ConfusionMatrixDisplay","01fc1912":"df = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\ndf.shape","f36e526e":"df.info()","73015089":"df.describe()","78e334ea":"# Correlation of features in the dataset\ncorrmat = df.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\ng = sns.heatmap(df[top_corr_features].corr(), annot=True, cmap=\"RdYlGn\")","97d738c2":"# Histogram\ndf.hist()","41dae61a":"sns.set_style('whitegrid')\nsns.countplot(x='target', data=df, palette='RdBu_r')","52ebd494":"# get_dummies\ndataset = pd.get_dummies(df, columns = ['sex','cp','fbs','restecg','exang','slope','ca','thal'])","8bd95d4e":"# Standard Scaler\nstandardScaler = StandardScaler()\ncolumns_to_scale = ['age','trestbps','chol','thalach','oldpeak']\ndataset[columns_to_scale] = standardScaler.fit_transform(dataset[columns_to_scale]) ","38ebc14b":"# Pre-processed dataset\ndataset.head()","e4478259":"X = dataset.drop(['target'], axis = 1)\ny = dataset['target']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1) # random_state=1 for same results every time.","ee3c72dc":"knn_scores = []\nfor k in range(1, 21):\n    knn_classifier = KNeighborsClassifier(n_neighbors = k)\n    score = cross_val_score(knn_classifier, X_train, y_train, cv=10)\n    knn_scores.append(score.mean())","3d13659e":"plt.plot([k for k in range(1, 21)], knn_scores, color='red')\nfor i in range(1, 21):\n    plt.text(i, knn_scores[i-1], (i, knn_scores[i-1]))\nplt.xticks([i for i in range(1, 21)])\nplt.xlabel('Number of Neighbors (K)')\nplt.xlabel('Number of Neighbors (K)')\nplt.ylabel('Scores')\nplt.title('K Neighbors Classifier scores for different K values')","045fd4fc":"# Printing the best K\nhighest_accuracy = max(knn_scores)\nindex_with_highest = knn_scores.index(highest_accuracy)\nbest_k = index_with_highest + 1 # because index starts at 0\nprint(f\"Index with Highest: {index_with_highest}\")\nprint(f\"Highest Accuracy: {highest_accuracy}\")\nprint(f\"Best K: {best_k}\")","a294a1a4":"knn_classifier = KNeighborsClassifier(n_neighbors = best_k)\nknn_classifier.fit(X_train, y_train)","9d43f17d":"label_names = ['< 50% diameter narrowing', '> 50% diameter narrowing']\n\n# Predictions & Actual\npredictions = knn_classifier.predict(X_test)\nactual = y_test.to_numpy()\n\nprint(f\"Predictions:\\n{predictions}\")\nprint(f\"\\nActual:\\n{actual}\")\nprint(f\"\\nScore: {knn_classifier.score(X_test, y_test)}\")\n\n# Classification Report\nprint(f\"\\n\\nClassification Report:\")\nprint(classification_report(actual, predictions, target_names=label_names))\n\n# Confusion Matrix\nprint('\\n\\n')\ncm = confusion_matrix(y_true=actual, y_pred=predictions)\ndisplay = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=label_names)\ndisplay.plot()\nplt.title(\"Confusion Matrix\")","fb53e690":"## 1. Import modules","0e58b3dd":"## Predicting on untrained inputs\n\n### Heart Disease Diagnosis\nDiagnosis of heart disease (angiographic disease status)\n\n- Value 0: < 50% diameter narrowing\n\n- Value 1: > 50% diameter narrowing","a08c56cc":"## Fitting training values to the best K classifier","9848e4f4":"# 2. Importing and exploring the data","95ab6ee7":"## My Evaluation\n- The model is not very accurate, misclassifying 8 for \"< 50% diameter narrowing\" and 9 for \"> 50% diameter narrowing\"\n- Ideally it should have been at least 0.9 accuracy, but it's only under 0.80.\n- Because this is a model that should be able to perform accurate heart disease diagnoses, an accuracy of under 0.80 is subpar.\n\n## What could be improved\n- The dataset could definitely make use of more pre-processing like removing features that don't have a positive correlation with the predicted value.\n- Maybe more data?\n- Maybe test the data with other classification models.","3581b6df":"## Preparing the model and its inputs","be141e27":"### Histogram\nTo check if each feature is normally distributed","d19743c5":"### Target Count\nTo check whether or not the data is balanced. Since the count of two classes are just about the same, we can say that this dataset is **balanced**.","6f80b3e5":"## Pre-processing the data\nBefore we put the data into the classifier. We need to do a couple things:\n- Variables like 'sex', 'cp', 'fbs', 'restecg', 'exang','slope', 'ca', and 'thal' are supposedly categorical variables. So we need to convert them into dummy variables first using `get_dummies` to create dummy columns for them.\n\n- Scale the rest of the variables using `StandardScaler` ","9af90902":"## Data Visualizations\nHere I visualize the dataset in:\n- Correlation Matrix\n- Histogram\n- Target Count\n\n### Correlation Matrix\nTo check positive and negative correlations. Usually we would prefer to use only features that have **positive correlations** with the label, but there are values in this dataset are supposed to reasonably have a **negative correlation** with the label.","88341031":"Carlo Antonio T. Taleon BSCS-2A | 2020-2021 | Written June 2021\n\n# Heart Disease Classification Using KNN\n\nThis is my final project for the 2nd semester for my Introduction to Machine Learning class at WVSU-CICT.\n\nThis project showcases an end to end machine learning framework using the[ heart disease data from UCI](https:\/\/archive.ics.uci.edu\/ml\/datasets\/heart+disease).","33e7d758":"## Problem Defintiion\n> Given the clinical features on a patient, is it possible to predict if this person has heart disease?","b871e045":"### Choosing the best K\nHere, we will be testing different k values and collecting all their accuracy scores with `knn_scores`. After that, we will use the k with the highest accuracy for the actual model\n\nWe set a range of n_neighbors from 1 to 21 and see which one is the best."}}