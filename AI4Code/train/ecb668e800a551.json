{"cell_type":{"2ea96c42":"code","140fe86e":"code","7f54083b":"code","de94cb7b":"code","fe9385b2":"code","d483a64a":"code","e7fa052e":"code","70c07f04":"code","92b13b02":"code","83c21791":"code","6348198a":"code","83fee6e7":"code","f2eeef97":"code","a67184b1":"code","24ae5d3f":"code","51008b1a":"code","6e7805b3":"code","90f4eace":"code","b25e2976":"code","c78e318b":"code","067761a8":"markdown","5e74656d":"markdown","6e6d9984":"markdown","09536149":"markdown","6480a2d5":"markdown","99707796":"markdown","9f6aa7c6":"markdown","7af7abad":"markdown","c7d7ab12":"markdown","2e5900a9":"markdown","d2eda61c":"markdown","60847b1a":"markdown","e7654c20":"markdown","8b3d248d":"markdown","491a21d7":"markdown","dded76e5":"markdown","a59f4402":"markdown","e52f7c11":"markdown","081a8343":"markdown"},"source":{"2ea96c42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","140fe86e":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\nprint(train.shape)\ntrain.head()","7f54083b":"# read test \ntest= pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\nprint(test.shape)\ntest.head()","de94cb7b":"# put labels into y_train variable\nY_train = train[\"label\"]\n# Drop 'label' column\nX_train = train.drop(columns = [\"label\"],axis = 1) ","fe9385b2":"# visualize number of digits classes\nplt.figure(figsize=(15,7))\nsns.countplot(Y_train, palette = \"icefire\")\nplt.title(\"Number of digit classes\")\nY_train.value_counts()","d483a64a":"img = X_train.iloc[3].to_numpy()\nimg = img.reshape((28,28))\nplt.imshow(img,cmap = \"gray\")\nplt.title(train.iloc[3,0])\nplt.axis(\"off\")","e7fa052e":"# plot some samples\nimg = X_train.iloc[27].to_numpy()\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(train.iloc[27,0])\nplt.axis(\"off\")\nplt.show()","70c07f04":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","92b13b02":"# Reshape\n# After reshape, first size of data will be the number of pictures that data have \nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","83c21791":"# Label Encoding\nfrom keras.utils.np_utils import to_categorical # convert to one-hot encoding\nY_train = to_categorical(Y_train, num_classes = 10)","6348198a":"# Split the train and the validation set for the fitting\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1,random_state = 2)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","83fee6e7":"from sklearn.metrics import confusion_matrix\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3),activation = 'relu', \n                 kernel_initializer='he_normal', input_shape = (28,28,1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3),\n                 activation = 'relu', kernel_initializer='he_normal'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'Same',\n                 activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'Same',\n                 activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2,2), strides = (2,2)))\nmodel.add(Dropout(0.4))\n\n#Fully Connected\nmodel.add(Flatten())\nmodel.add(Dropout(0.4))\nmodel.add(Dense(10, activation = 'softmax'))","f2eeef97":"# Define the optimizer\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)","a67184b1":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","24ae5d3f":"epochs = 39\nbatch_size = 64","51008b1a":"# data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=0.10,  # randomly rotate images in the range 10 degrees\n        zoom_range = 0.10, # Randomly zoom image 10%\n        width_shift_range=0.1,  # randomly shift images horizontally 1%\n        height_shift_range=0.1,  # randomly shift images vertically 1%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","6e7805b3":"from keras.callbacks import LearningRateScheduler\nannealer = LearningRateScheduler(lambda x: 1e-3 * 0.95 ** x)\n\n# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val), \n                              steps_per_epoch=X_train.shape[0] \/\/ batch_size, callbacks=[annealer])","90f4eace":"# Plot the loss and accuracy curves for training and validation \nplt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","b25e2976":"# confusion matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","c78e318b":"# predict results\nresults = model.predict(test)\n\n# select the index with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")\n\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"sub.csv\",index=False)\n","067761a8":"<a id=\"2\"><\/a>\n## Normalization, Reshape and Label Encoding \n* Normalization\n    * We perform a grayscale normalization to reduce the effect of illumination's differences.\n    * If we perform normalization, CNN works faster.\n* Reshape\n    * Train and test images (28 x 28) \n    * We reshape all data to 28x28x1 3D matrices.\n    * Keras needs an extra dimension in the end which correspond to channels. Our images are gray scaled so it use only one channel. \n* Label Encoding  \n    * Encode labels to one hot vectors \n        * 2 => [0,0,1,0,0,0,0,0,0,0]\n        * 4 => [0,0,0,0,1,0,0,0,0,0]","5e74656d":"<a id=\"4\"><\/a>\n## Convolutional Neural Network \n* CNN is used for image classification, object detection \n* <a href=\"https:\/\/ibb.co\/kV1j9p\"><img src=\"https:\/\/preview.ibb.co\/nRkBpp\/gec2.jpg\" alt=\"gec2\" border=\"0\"><\/a>","6e6d9984":"<a id=\"9\"><\/a>\n### Full Connection\n* Neurons in a fully connected layer have connections to all activations in the previous layer\n* Artificial Neural Network\n* <a href=\"https:\/\/ibb.co\/hsS14p\"><img src=\"https:\/\/preview.ibb.co\/evzsAU\/fullyc.jpg\" alt=\"fullyc\" border=\"0\"><\/a>","09536149":"<a id=\"12\"><\/a>\n### Define Optimizer   \n* Adam optimizer: Change the learning rate\n","6480a2d5":"<a id=\"6\"><\/a>\n## Padding\n* As we keep applying conv layers, the size of the volume will decrease faster than we would like. In the early layers of our network, we want to preserve as much information about the original input volume so that we can extract those low level features.\n* There are types of Padding but we will use \"Same Padding\".\n\n### Same Padding\n* input size and output size are same.\n\n\n* <a href=\"https:\/\/ibb.co\/jUPkUp\"><img src=\"https:\/\/preview.ibb.co\/noH5Up\/padding.jpg\" alt=\"padding\" border=\"0\"><\/a>","99707796":"<a id=\"17\"><\/a>\n### Evaluate the model\n* Test Loss visualization\n* Confusion matrix\n","9f6aa7c6":"<a id=\"15\"><\/a>\n### Data Augmentation\n* To avoid overfitting problem, we need to expand artificially our handwritten digit dataset\n* Alter the training data with small transformations to reproduce the variations of digit.\n* For example, the number is not centered The scale is not the same (some who write with big\/small numbers) The image is rotated.\n* <a href=\"https:\/\/ibb.co\/k24CUp\"><img src=\"https:\/\/preview.ibb.co\/nMxXUp\/augment.jpg\" alt=\"augment\" border=\"0\"><\/a>\n    \n","7af7abad":"<a id=\"10\"><\/a>\n## Implementing with Keras","c7d7ab12":"<a id=\"14\"><\/a>\n### Epochs and Batch Size\n* Say you have a dataset of 10 examples (or samples). You have a **batch size** of 2, and you've specified you want the algorithm to run for 3 **epochs**. Therefore, in each epoch, you have 5 **batches** (10\/2 = 5). Each batch gets passed through the algorithm, therefore you have 5 iterations **per epoch**.\n* reference: https:\/\/stackoverflow.com\/questions\/4752626\/epoch-vs-iteration-when-training-neural-networks","2e5900a9":"<a id=\"16\"><\/a>\n### Fit the model","d2eda61c":"<a id=\"1\"><\/a>\n## Loading the Data Set\n* In this part we load and visualize the data.","60847b1a":"<a id=\"7\"><\/a>\n### Max Pooling\n* It makes down-sampling or sub-sampling (Reduces the number of parameters)\n* It makes the detection of features invariant to scale or orientation changes.\n* It reduces the amount of parameters and computation in the network, and hence to also control overfitting. \n* <a href=\"https:\/\/ibb.co\/ckTjN9\"><img src=\"https:\/\/preview.ibb.co\/gsNYFU\/maxpool.jpg\" alt=\"maxpool\" border=\"0\"><\/a>","e7654c20":"## Thank you for reading my notebook. I am open to suggestions if you have any. If you liked my notebook, please support and encourage me for new notebooks with upvoting\ud83d\ude43\ud83d\ude42","8b3d248d":"<a id=\"13\"><\/a>\n### Compile Model\n* categorical crossentropy\n* We make binary cross entropy at previous parts and in machine learning tutorial\n* At this time we use categorical crossentropy. That means that we have multi class.\n* <a href=\"https:\/\/ibb.co\/jm1bpp\"><img src=\"https:\/\/preview.ibb.co\/nN3ZaU\/cce.jpg\" alt=\"cce\" border=\"0\"><\/a>\n","491a21d7":"<a id=\"11\"><\/a>\n### Create Model\n\n* Dropout: Dropout is a technique where randomly selected neurons are ignored during training\n* <a href=\"https:\/\/ibb.co\/jGcvVU\"><img src=\"https:\/\/preview.ibb.co\/e7yPPp\/dropout.jpg\" alt=\"dropout\" border=\"0\"><\/a>","dded76e5":"<a id=\"5\"><\/a>\n### What is Convolution Operation?\n* We have some image and feature detector(3*3)\n* Feature detector does not need to be 3 by 3 matrix. It can be 5 by 5 or 7 by 7.\n* Feature detector = kernel = filter\n* Feauture detector detects features like edges or convex shapes. Example, if out input is dog, feature detector can detect features like ear or tail of the dog.\n* feature map = conv(input image, feature detector). Element wise multiplication of matrices.\n* feature map = convolved feature\n* Stride = navigating in input image.\n* We reduce the size of image. This is important bc code runs faster. However, we lost information. \n* We create multiple feature maps bc we use multiple feature detectors(filters).\n* Lets look at gimp. Edge detect: [0,10,0],[10,-4,10],[0,10,0]\n* <a href=\"https:\/\/imgbb.com\/\"><img src=\"https:\/\/image.ibb.co\/m4FQC9\/gec.jpg\" alt=\"gec\" border=\"0\"><\/a>\n* After having convolution layer we use ReLU to break up linearity. Increase nonlinearity. Because images are non linear.\n* <a href=\"https:\/\/ibb.co\/mVZih9\"><img src=\"https:\/\/preview.ibb.co\/gbcQvU\/RELU.jpg\" alt=\"RELU\" border=\"0\"><\/a>","a59f4402":"<a id=\"3\"><\/a>\n## Train Test Split\n* We split the data into train and test sets.\n* test size is 10%.\n* train size is 90%.","e52f7c11":"# Convolutional Neural Networks (CNN)\n<font color='blue'>\n<br>Content: \n    \n* [Loading the Data Set](#1)\n* [Normalization, Reshape and Label Encoding ](#2)\n* [Train Test Split](#3)\n* [Convolutional Neural Network](#4)\n    * [What is Convolution Operation?](#5)\n    * [Same Padding](#6)\n    * [Max Pooling](#7)\n    * [Flattening](#8)\n    * [Full Connection](#9)\n* [Implementing with Keras](#10)\n    * [Create Model](#11)\n    * [Define Optimizer](#12)\n    * [Compile Model](#13)\n    * [Epochs and Batch Size](#14)\n    * [Data Augmentation](#15)\n    * [Fit the Model](#16)\n    * [Evaluate the Model](#17)\n    * [Submission](#18)","081a8343":"<a id=\"18\"><\/a>\n### Submission"}}