{"cell_type":{"ed76164a":"code","2960cd2f":"code","c07a07f2":"code","4ce23e48":"code","8730ec96":"code","ac519cde":"code","905b8c4a":"code","a4e09de6":"code","7ead54cc":"code","4228c67f":"code","32817f58":"code","0f6e21c8":"code","82537064":"code","00119479":"code","7488f134":"code","eb47422f":"code","9bc26068":"code","4384cb15":"code","ce534ed8":"code","e82c3d61":"code","8de6bfcf":"code","f47b9d19":"code","ca0700d2":"code","9c21c054":"code","17763781":"code","7146ee73":"code","a581676a":"code","14c1ae85":"code","7953d697":"code","8c6f958f":"code","44136669":"code","d3a1fc44":"code","e7a87390":"code","c3b2d604":"code","ccc60754":"code","58ff3f04":"code","a8f553de":"code","a4a3e869":"code","b38ecfa4":"code","e45f4d2b":"code","cc0b076e":"code","f30ed2f7":"code","24ce42dc":"code","c5616238":"code","3e8af3dd":"code","5ca652cf":"code","1080dbc4":"code","1f8a9292":"code","17b236c8":"code","2fafde5e":"code","a275b64e":"code","042b53d7":"code","bf5bc399":"code","ab0eedfb":"code","4f1752c6":"code","f13b4cc4":"code","301f0b0e":"code","955da8d6":"code","599e8134":"code","e7699260":"code","3240b744":"code","0dc426e1":"code","5d9e52d0":"code","84019681":"code","561be4ec":"markdown","16cbefb5":"markdown","d814a152":"markdown","34846064":"markdown","e7e0c66a":"markdown","cce8f7dd":"markdown","20b201eb":"markdown","ee7d0b2c":"markdown","3f70aa91":"markdown","08089934":"markdown","34d15bde":"markdown","e76aa840":"markdown","7d2df95e":"markdown","77c222af":"markdown","64c0cc4b":"markdown","e84f0d05":"markdown","0c50f95d":"markdown","5eda9ef7":"markdown","0b4d6464":"markdown","036a39ff":"markdown","d1959e2e":"markdown"},"source":{"ed76164a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2960cd2f":"# Read data\nimport numpy as np\nimport pandas as pd\n\n# Visualisation Library\nimport seaborn as sns                # seaborn\n\nimport matplotlib.pyplot as plt      # matplotlib\n%matplotlib inline\n\nimport plotly                        # plotly\nimport plotly.express as px\nimport plotly.graph_objs as go\n\n# Style\nplt.style.use(\"fivethirtyeight\")\nsns.set_style(\"darkgrid\")","c07a07f2":"# Load train data\ncovid_train=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv')\ncovid_train.head()","4ce23e48":"# Load test data\ncovid_test = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv')\ncovid_test.head()","8730ec96":"covid_train.shape, covid_test.shape # Rows x Columns","ac519cde":"print(\"Index of train:\", covid_train.index)\nprint(\"Index of test:\", covid_test.index)","905b8c4a":"print(\"Column names of Train:\", covid_train.columns)\nprint(\"------------------------------------------------------------------------------------------------------\/n\")\nprint(\"Column names of Test:\", covid_test.columns)","a4e09de6":"covid_train.count()","7ead54cc":"covid_test.count()","4228c67f":"covid_train.size, covid_test.size","32817f58":"# Information of data\ncovid_train.info()  # Shows Data types, Null Values for each variable","0f6e21c8":"covid_train.dtypes  # Gives data types of each variable","82537064":"covid_train.describe()","00119479":"covid_train['Country'].nunique()  # Number of uniques values in variable \"Country_Region\"","7488f134":"covid_train['Country'].unique()  # List of uniques categories in variable \"Country_Region\"","eb47422f":"covid_train['Country'].value_counts()  # Number of data points in variable \"Country_Region\"","9bc26068":"covid_train['ConfirmedCases'].nunique()  # Number of uniques values in variable \"ConfirmedCases\"","4384cb15":"covid_train['ConfirmedCases'].unique()  # List of uniques categories in variable \"Country_Region\"","ce534ed8":"covid_train['ConfirmedCases'].value_counts()  # Number of data points in variable \"Country_Region\"","e82c3d61":"# In Fatalities, listed no of unique categories\ncovid_train['Fatalities'].nunique()","8de6bfcf":"covid_train['Fatalities'].value_counts()  # Number of data points in variable \"Country_Region\"","f47b9d19":"# convert format DD-MM-YYYY to YYYY-MM-DD\nimport datetime\ncovid_train['Date'] = pd.to_datetime(covid_train['Date'])\ncovid_train['Date']","ca0700d2":"# Shows Starting date and Ending date\nprint(covid_train['Date'].min())\nprint(covid_train['Date'].max())","9c21c054":"covid_train.rename(columns={'Country_Region':'Country'}, inplace=True)\ncovid_test.rename(columns={'Country_Region':'Country'}, inplace=True)\n\ncovid_train.rename(columns={'Province_State':'State'}, inplace=True)\ncovid_test.rename(columns={'Province_State':'State'}, inplace=True)","17763781":"### Top 20 Countries of \"ConfirmedCases\" & \"Fatalities\"\nGroupby = covid_train.groupby(by='Country')[['ConfirmedCases','Fatalities']].sum().reset_index()\nGroupby_Sort = Groupby[Groupby['ConfirmedCases'] != 0].sort_values(by='ConfirmedCases',ascending=False).head(20)\nGroupby_Sort.style.background_gradient(cmap='viridis_r')","7146ee73":"# Largest 25 countries\nColumns = covid_train[['Country', 'State', 'ConfirmedCases', 'Fatalities']]\nCountrys_15 = Columns.groupby(['Country', 'State']).max().reset_index().nlargest(25, \"ConfirmedCases\")\nCountrys_15.style.background_gradient(cmap='nipy_spectral')","a581676a":"# Showing top 20 data of China\ncovid_train_China = covid_train.loc[covid_train['Country'] == 'China', :].head(20)\ncovid_train_China.style.background_gradient(cmap='viridis_r')","14c1ae85":"# Listed Sum of \"Canada\" Confirmed Cases & Fatalities\nList = {\n    'X' : [covid_train[covid_train['Country']=='Canada'].groupby(by='Country').sum()],\n    'Y' : [covid_train[covid_train['Country']=='China'].groupby(by='Country').sum()],\n    'Z' : [covid_train[covid_train['Country']=='India'].groupby(by='Country').sum()]\n}\nCombined = pd.DataFrame(List)\nCombined.style.background_gradient(cmap='viridis_r')","7953d697":"# Listing Number of missing values by feature column wise.\nprint(covid_train.isnull().sum())","8c6f958f":"# Missing value representation by Heatmap\nplt.figure(figsize=(15,11))\nsns.heatmap(covid_train.isnull(), yticklabels=False, cbar=False, cmap='viridis')","44136669":"corr = covid_train.corr()\nsns.heatmap(corr,vmax=1.,square=True)","d3a1fc44":"g=sns.heatmap(covid_train[[\"Id\",\"ConfirmedCases\",\"Fatalities\"]].corr(),annot=True,fmt=\".2f\",cmap=\"coolwarm\")","e7a87390":"# Box Plot used to find out the outliers in feature column of \"ConfirmedCases\"\nplt.figure(figsize=(12,10))\nsns.boxplot(data=covid_train['ConfirmedCases'], palette='winter')","c3b2d604":"# Box Plot used to find out the outliers in feature column of \"Fatalities\"\nplt.figure(figsize=(12,10))\nsns.boxplot(data=covid_train['Fatalities'], palette='winter')","ccc60754":"# Bar Chart for showing count of County\/Region wise\nplt.figure(figsize=(15,11))\n\ncovid_train['Country'].value_counts()[0:40].plot(kind='bar')\n\nplt.xlabel('Country', fontsize=17, fontweight = 'bold')\nplt.ylabel('Count', fontsize=17, fontweight = 'bold')\n\nplt.title('Country Vs Count', fontsize=20, fontweight = 'bold')\n\nplt.show()","58ff3f04":"# Bar Chart for showing count of Fatalities\nplt.figure(figsize=(15,11))\n\ncovid_train['Fatalities'].value_counts()[0:15].plot(kind='bar')\n\nplt.xlabel('Fatalities', fontsize=17, fontweight = 'bold')\nplt.ylabel('Count', fontsize=17, fontweight = 'bold')\n\nplt.title('Fatalities Vs Count', fontsize=20, fontweight = 'bold')\n\nplt.show()","a8f553de":"# Bar Chart for showing count of Date wise Fatalities\nplt.figure(figsize=(15,11))\n\ncovid_train.groupby('Date').mean().sort_values(by='Fatalities', ascending=False)['Fatalities'][0:50].plot(kind='bar')\n\nplt.xlabel('Date \/ Fatalities', fontsize=17, fontweight = 'bold')\nplt.ylabel('Count', fontsize=17, fontweight = 'bold')\n\nplt.title('Date \/ Fatalities Vs Count', fontsize=20, fontweight = 'bold')\n\nplt.show()","a4a3e869":"# Count map by using Seaborn\n# Showing Count for Each Country from first 5000 rows\nplt.figure(figsize=(20,10))\nsns.countplot(covid_train['Country'].head(5000))\n\nplt.xlabel('Country', fontsize=22, fontweight = 'bold')\nplt.ylabel('Count', fontsize=22, fontweight = 'bold')\n\nplt.title('Country Vs Count', fontsize=28, fontweight = 'bold')\n\nplt.xticks(rotation = 90, fontsize=18)\n\nplt.show()","b38ecfa4":"# Bar plot between \"Country_Region\" & \"ConfirmedCases\"\nplt.figure(figsize=(30,10))\nsns.barplot(x='Country', y='ConfirmedCases', data=covid_train)\n\nplt.xlabel('Country', fontsize=25, fontweight='bold')\nplt.ylabel('ConfirmedCases', fontsize=25, fontweight='bold')\n\nplt.title('Country Vs ConfirmedCases', fontsize=35, fontweight='bold')\n\nplt.xticks(rotation=90)\n\nplt.show()","e45f4d2b":"# Scatter plot between \"Country_Region\" & \"ConfirmedCases\"\nplt.figure(figsize=(30,15))\nplt.scatter(covid_train['Country'], covid_train['ConfirmedCases'])\n\nplt.xlabel('Country', fontsize=25, fontweight='bold')\nplt.ylabel('ConfirmedCases', fontsize=25, fontweight='bold')\n\nplt.title('Country Vs ConfirmedCases', fontsize=35, fontweight='bold')\nplt.xticks(rotation = 90)\n\nplt.show()","cc0b076e":"# Scatter plot between \"ConfirmedCases\" & \"Fatalities\"\nplt.figure(figsize=(15,10))\nplt.scatter(covid_train['ConfirmedCases'], covid_train['Fatalities'])\n\nplt.xlabel('ConfirmedCases', fontsize=18, fontweight='bold')\nplt.ylabel('Fatalities', fontsize=18, fontweight='bold')\n\nplt.title('ConfirmedCases Vs Fatalities', fontsize=18, fontweight='bold')\nplt.xticks(rotation = 45)\n\nplt.show()","f30ed2f7":"df_Cases = Countrys_15[Countrys_15['ConfirmedCases'] != 0].sort_values(by='ConfirmedCases',ascending=False).head(10)","24ce42dc":"# Scatter Plot For Country VS ConfirmedCases\nplt.figure(figsize=(15,8))\nplt.scatter(Groupby_Sort['Country'], Groupby_Sort['ConfirmedCases'], c='green', s=250)\n\nplt.xlabel('Country', fontsize = 15)\nplt.ylabel('ConfirmedCases', fontsize = 15)\n\nplt.title(\"Total ConfirmedCases\", fontsize = 20, fontweight='bold')\n\nplt.xticks(rotation=90)\n\nplt.show()","c5616238":"# Scatter Plot For Country VS ConfirmedCases\nplt.figure(figsize=(15,8))\nplt.scatter(Groupby_Sort['Country'], Groupby_Sort['Fatalities'], c='green', s=250)\n\nplt.xlabel('Country', fontsize = 15)\nplt.ylabel('Fatalities', fontsize = 15)\n\nplt.title(\"Fatalities\", fontsize = 20, fontweight='bold')\n\nplt.xticks(rotation=90)\n\nplt.show()","3e8af3dd":"# Box plot created for feature columns of \"ConfirmedCases\" & \"Fatalities\"\nplt.figure(figsize=(15,10))\nsns.boxplot(data=covid_train[['ConfirmedCases','Fatalities']])","5ca652cf":"# bar plot showing Confirmed Cases as per Country \/ Region wise\nplt.figure(figsize=(20,18))\nCountry = covid_train.groupby(by='Country')[['ConfirmedCases','Fatalities']].sum().reset_index()\n\nsns.barplot(x='ConfirmedCases', y='Country', data = Country[Country['ConfirmedCases'] != 0].sort_values(by='ConfirmedCases',ascending=False).head(30))\n\nplt.xlabel('ConfirmedCases', fontsize=21, fontweight = 'bold')\nplt.ylabel('Country_Region', fontsize=21, fontweight = 'bold')\n\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\n\nplt.title('ConfirmedCases Vs Country', fontsize=25, fontweight = 'bold')\n\nplt.show()","1080dbc4":"# Pie chart for Confirmed Cases\n\n# Pie chart, where the slices will be ordered and plotted counter-clockwise:\n# autopct : formatting how the percentages appear on the pie chart\n\nplt.figure(figsize=(5,4))\nexplode =(0.1,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)\n\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.pie(Groupby_Sort['ConfirmedCases'], labels=Groupby_Sort['Country'], radius=2, autopct='%.1f%%',\n        shadow=True, startangle=90, explode = explode, wedgeprops={'edgecolor': 'black'})\n\nplt.show()","1f8a9292":"# Pie chart for Fatalities(Death)\n\nplt.figure(figsize=(7,6))\n\nplt.axis('equal')\n\nexplode =(0,0.1,0.1,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)\n\nplt.pie(Groupby_Sort['Fatalities'], labels=Groupby_Sort['Country'], radius=2, autopct='%0.1f%%',\n        shadow=True, startangle=90, explode = explode, center=(0, 0), wedgeprops={'edgecolor': 'black'})\n\nplt.show()","17b236c8":"# Pairplot used to show features on Country\/Region basis\n\nsns.pairplot(covid_train)","2fafde5e":"covid_x=covid_train.drop(['ConfirmedCases','Country','State','Date'],axis='columns')\ncovid_x.head()","a275b64e":"covid_y=pd.DataFrame(covid_train.iloc[:,-2])\ncovid_y.head()","042b53d7":"# Splitting X and y into training and testing sets\n\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test=train_test_split(covid_x,covid_y)\nfrom sklearn.linear_model import LinearRegression","bf5bc399":"regression=LinearRegression()\nregression.fit(X_train,Y_train)","ab0eedfb":"print(X_train.shape)\nprint(X_test.shape)","4f1752c6":"X_test.head()","f13b4cc4":"Y_test.head()","301f0b0e":"from sklearn.tree import DecisionTreeRegressor","955da8d6":"tree_regressor=DecisionTreeRegressor()\ntree_regressor.fit(X_train,Y_train)","599e8134":"y_pred_tree=tree_regressor.predict(X_test)\ny_tree_pred_df=pd.DataFrame(y_pred_tree,columns=['Predict_tree'])\ny_tree_pred_df.head()","e7699260":"DTCscore = tree_regressor.score(X_train,Y_train)\nprint(\"Decision Tree Score: \",DTCscore)","3240b744":"plt.figure(figsize=(5,5))\nplt.title('Actual vs Prediction')\nplt.xlabel('Fatalities')\nplt.ylabel('Predicted')\nplt.legend()\nplt.scatter((X_test['Fatalities']),(Y_test['ConfirmedCases']),c='red')\nplt.show()","0dc426e1":"from sklearn.ensemble import RandomForestClassifier\nRFC = RandomForestClassifier()\nRFC.fit(X_train,Y_train)","5d9e52d0":"RFC.score(X_train,Y_train)","84019681":"sub=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/submission.csv')\nsub.to_csv('submission.csv',index=False)","561be4ec":"### Country_Region","16cbefb5":"- By **Scatter Plots** can find **Outliers** and **relation between features**","d814a152":"- Highest death rate in Italy : 26%\n\n\n- Lowest death rate in Switzerland : 1%","34846064":"<h3 style=\"color:green\" align=\"left\"> Linear Regression <\/h3>","e7e0c66a":"- graph shows number of **Confirmed Cases** by **Country** wise and can find which country have max \/ min cases.","cce8f7dd":"- Highest number of Confirmed Cases in US as 24.4%\n\n\n- Lowest number of Confirmed Cases in Switzerland & Turkey as 1.9%","20b201eb":"### 2. Bivariate Analysis\n\n- Bivariate Analysis : data involves **two different variables**.\n\n\n-  There are three types of bivariate analysis\n\n\n     1. Numerical & Numerical\n     \n     2. Categorical & Categorical\n     \n     3. Numerical & Categorical","ee7d0b2c":"<h2 style=\"color:blue\" align=\"left\"> 5. Data Preprocessing <\/h2>","3f70aa91":"<h2 style=\"color:blue\" align=\"left\"> 2. Read data <\/h2>","08089934":"### 1. Univariate Analysis\n\n- Univariate Analysis : data consists of **only one variable**.\n\n\n   1. Bar Charts\n   \n\n   2. Histograms\n   \n\n   3. Pie Charts","34d15bde":"<h2 style=\"color:green\" align=\"left\"> Missing Values <\/h2>","e76aa840":"### Fatalities","7d2df95e":"<h2 style=\"color:blue\" align=\"left\"> 3. EDA (Exploratory Data Analysis) <\/h2>","77c222af":"- Highest & Lowest Number of Fatalities in Italy & Turkey","64c0cc4b":"<h2 style=\"color:blue\" align=\"left\"> 1. Import Libraries <\/h2>","e84f0d05":"<h3 style=\"color:green\" align=\"left\"> Decision Tree <\/h3>","0c50f95d":"### Test and Train Data","5eda9ef7":"### ConfirmedCases","0b4d6464":"<h2 style=\"color:blue\" align=\"left\"> 4. Data Visualisation <\/h2>\n\n- Used below **visualisation libraries**\n\n\n  1. Matplotlib\n\n\n  2. Seaborn (statistical data visualization)","036a39ff":"<h3 style=\"color:green\" align=\"left\"> Random Forest Classifier <\/h3>","d1959e2e":"## Submission"}}