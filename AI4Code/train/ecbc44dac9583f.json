{"cell_type":{"d3224c33":"code","cfcc2202":"code","2fc2addf":"code","6df3be58":"code","3fa1f47a":"code","182aa3db":"code","6fb2e9ad":"code","a44dab32":"code","416099f1":"code","cfc8eb75":"code","8043fbf8":"code","c83037de":"code","124fbb6b":"code","99624df4":"code","9de7ddc5":"code","88b9cf7b":"code","a1f38966":"code","d739efb4":"code","5ac6c533":"code","638b6ee2":"code","d95710b2":"code","f459c8a4":"code","273d33a3":"code","b6fc8a37":"code","be32f8b6":"code","74be05cc":"code","acc894d3":"code","a37f6554":"code","20f434cb":"code","79f62a5f":"code","6f3ac742":"code","7753ed06":"code","aedf4b7d":"code","862c5213":"code","23c42e07":"code","24b46dd9":"code","b8769075":"code","30c9efba":"code","7da45609":"markdown","38fe7fec":"markdown","163df089":"markdown","c9561e9f":"markdown","d72e89e1":"markdown","5d8570a9":"markdown","78c5f66c":"markdown","00bbbc11":"markdown","238e0d52":"markdown","f06eb6f8":"markdown","67852cc1":"markdown","c721870e":"markdown","9491329b":"markdown","c0341fd4":"markdown","98e51eac":"markdown","ceb74a26":"markdown","6eb8cd65":"markdown","8e76f0f8":"markdown","04eec828":"markdown","650036d0":"markdown","5cc2aafd":"markdown","b424c9a7":"markdown","11054e45":"markdown","a9fa6d26":"markdown","2415d9f4":"markdown","75bef85a":"markdown","7dae64fc":"markdown"},"source":{"d3224c33":"#Ignore wornings\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","cfcc2202":"#Read Dataset\ndata = pd.read_csv('..\/input\/paysim1\/PS_20174392719_1491204439457_log.csv')\ndata.head(2)","2fc2addf":"data.info()","6df3be58":"#Missing values check\ndata.isnull().sum()","3fa1f47a":"#Drop Duplicates\ndata.drop_duplicates(keep=False, inplace=True)","182aa3db":"data.shape","6fb2e9ad":"data.describe()","a44dab32":"print(data.type.value_counts())\nsns.countplot(\"type\",data =data)","416099f1":"print(data.isFraud.value_counts())\nsns.countplot(\"isFraud\",data =data)","cfc8eb75":"print(data.isFlaggedFraud.value_counts())\nsns.countplot(\"isFlaggedFraud\",data =data)","8043fbf8":"sns.distplot(data.amount)","c83037de":"df = data.nameOrig.value_counts()\ndf = pd.DataFrame(df)\ndf.reset_index(level=0, inplace=True)\ndf.rename(columns=  {\"Index\": \"nameOrig\", \"nameOrig\":\"NumberCount\"}, inplace = True) \ndf.sort_values(by='NumberCount', ascending=False)","124fbb6b":"print(df.NumberCount.value_counts())\nsns.countplot(df.NumberCount,data =df)","99624df4":"df = df[:25]\nTotalMembers = sns.barplot(x=\"index\",y=\"NumberCount\",data =df)\nTotalMembers.set_xticklabels(TotalMembers.get_xticklabels(),rotation=90)","9de7ddc5":"df = data.nameDest.value_counts()\ndf = pd.DataFrame(df)\ndf.reset_index(level=0, inplace=True)\ndf.rename(columns=  {\"Index\": \"nameDest\", \"nameDest\":\"NumberCount\"}, inplace = True) \ndf.sort_values(by='NumberCount', ascending=False)","88b9cf7b":"df = df[:25]\nTotalNum = sns.barplot(x=\"index\",y=\"NumberCount\",data =df)\nTotalNum .set_xticklabels(TotalNum .get_xticklabels(),rotation=90)","a1f38966":"sns.distplot(data.oldbalanceDest)","d739efb4":"sns.distplot(data.newbalanceDest)","5ac6c533":"#Amount \nnp.percentile(data.amount,q=[25,50,75])","638b6ee2":"def salary_category(x):\n    if x>=74871.94:\n        return('HIGH')\n    elif x<74871.94 and x>=13389.57:\n        return('MODERATE')\n    elif x<13389.57:\n        return('LOW')\n    else:\n        return(\"EXTREMLY LOW\")\ndata['transfer_amount_category']= data.amount.apply(salary_category)    \ndata.head(2)","d95710b2":"print(data.transfer_amount_category.value_counts())\nsns.countplot(data.transfer_amount_category,data =data)","f459c8a4":"sns.boxplot(np.log1p(data['amount']), whis=3)\n","273d33a3":"# shape of distribution\n# distribution using histogram\nsns.distplot(np.log1p(data['amount']))\nplt.axvline(np.log1p(data['amount']).mean(), color=\"g\", label=\"Mean\")\nplt.axvline(np.log1p(data['amount']).median(), color=\"r\", label=\"Median\")\nplt.legend()","b6fc8a37":"Correlation = data.corr()\nCorrelation.sort_values(by=[\"isFraud\"],ascending=False,inplace=True)\nf, ax = plt.subplots(figsize=(20,12))\nsns.heatmap(Correlation,annot=True)","be32f8b6":"Correlation.head(6)[\"isFraud\"][1:]","74be05cc":"Correlation.tail(5)[\"isFraud\"]","acc894d3":"# Import label encoder \nfrom sklearn import preprocessing   \nlabel_encoder = preprocessing.LabelEncoder() \n# Encode labels in column 'species'. \ndata['type_encode']= label_encoder.fit_transform(data['type']) \ndata['nameOrig_encode']= label_encoder.fit_transform(data['nameOrig']) \ndata['nameDest_encode']= label_encoder.fit_transform(data['nameDest']) \ndata['transfer_amount_category_encode']= label_encoder.fit_transform(data['transfer_amount_category']) ","a37f6554":"from sklearn.preprocessing import Normalizer\nnormalizer = Normalizer()\n\namount_scale = normalizer.fit_transform(data.amount.values.reshape(1,-1))\ndata['amount_norm'] = amount_scale.reshape(-1,1)\namount_oldbalanceOrg = normalizer.fit_transform(data.oldbalanceOrg.values.reshape(1,-1))\ndata['oldbalanceOrg_norm'] = amount_oldbalanceOrg.reshape(-1,1)\namount_newbalanceOrig = normalizer.fit_transform(data.newbalanceOrig.values.reshape(1,-1))\ndata['newbalanceOrig_norm'] = amount_newbalanceOrig.reshape(-1,1)\namount_oldbalanceDest= normalizer.fit_transform(data.oldbalanceDest.values.reshape(1,-1))\ndata['oldbalanceDest_norm'] = amount_oldbalanceDest.reshape(-1,1)\namount_newbalanceDest = normalizer.fit_transform(data.newbalanceDest.values.reshape(1,-1))\ndata['newbalanceDest_norm'] = amount_newbalanceDest.reshape(-1,1)","20f434cb":"data.head(2)","79f62a5f":"from sklearn.model_selection import train_test_split\nX = data[['type_encode','nameOrig_encode','nameDest_encode','transfer_amount_category_encode','amount_norm','oldbalanceOrg_norm','newbalanceOrig_norm','oldbalanceDest_norm','newbalanceDest_norm','isFlaggedFraud']]\ny = data[\"isFraud\"]\nX_train, X_test, y_train, y_test = train_test_split(X,y ,test_size = 0.33, stratify=y ,random_state = 42)","6f3ac742":"X_train.shape","7753ed06":"print(\"Training dataset shape : \",X_train.shape)\nprint(\"Training target shape : \",len(y_train))\nprint(\"Testing dataset shape : \",X_test.shape)\nprint(\"Testing target shape : \",len(y_test))","aedf4b7d":"from sklearn.ensemble import RandomForestClassifier \n# creating a RF classifier \nclf = RandomForestClassifier(n_estimators = 15)   \n  \n# Training the model on the training dataset \n# fit function is used to train the model using the training sets as parameters \nclf.fit(X_train, y_train) ","862c5213":"# performing predictions on the test dataset \ny_pred = clf.predict(X_test) \n# metrics are used to find accuracy or error \nfrom sklearn import metrics   \n# using metrics module for accuracy calculation \nprint(\"ACCURACY OF THE MODEL: \", metrics.accuracy_score(y_test, y_pred)) ","23c42e07":"#Calculate confusion matrix and plot.\nfrom sklearn.metrics import roc_curve,auc,confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nax = plt.subplot()\nsns.heatmap(cm, annot=True, ax=ax, fmt='g')\nax.set_xlabel('Predicted Labels')\nax.set_ylabel('Actual Labels')\nax.set_title('Confusion Matrix on text features')\nax.xaxis.set_ticklabels(['0','1'])\nax.yaxis.set_ticklabels(['0','1'])\nplt.show()","24b46dd9":"#Get test points and fpr and tpr values for both test set and training set\npredicted_y_test = clf.predict_proba(X_test)[:,1]\npredicted_y_train = clf.predict_proba(X_train)[:,1]","b8769075":"fpr_test, tpr_test, thres_test = roc_curve(y_test, predicted_y_test)\nfpr_train, tpr_train, thres_train = roc_curve(y_train, predicted_y_train)","30c9efba":"#plot ROC curve and check AUC value\nplt.figure(figsize=(15,10))\ntraining_auc = auc(fpr_train,tpr_train)\ntesting_auc = auc(fpr_test,tpr_test)\nplt.plot(fpr_train, tpr_train, label='AUC_Train: %s'%training_auc)\nplt.plot(fpr_test, tpr_test, label='AUC_Train: %s'%testing_auc)\nplt.title(\"ROC Curve using TF-IDF on text features\")\nplt.xlabel('FPT')\nplt.ylabel('TPR')\nplt.grid(True)\nplt.legend()\nplt.show()","7da45609":"### \n\n```\n# This is formatted as code\n```\nLet's Work on amount","38fe7fec":"### Column: nameDest\n\n","163df089":"### Column : newbalanceDest","c9561e9f":"# Let's Work on Model","d72e89e1":"###### Lets Start","5d8570a9":"Most user have lower balance amount in there account.","78c5f66c":"Most of user values comes under CASH_OUT, PAYMENT, CASH_IN.","00bbbc11":"*Dataset Summray Shows that there is int, float and object types as it contains all 63,62,620 rows and total 11 variables present including target variable* ,","238e0d52":"Now we get idea about central tendancies and IQR ranges from above table.","f06eb6f8":"Rarely froad is flgged as it detcted.","67852cc1":"### Column : isFraud","c721870e":"Most murchant have lower values in there account and samll murchant have large balance in there account","9491329b":"As there is no missing values present we need not go into additional imputations truble.","c0341fd4":"Most of time ammount tansfered is higher in range as above 10k\n'","98e51eac":"Most of time small amount is processed for transaction ","ceb74a26":"Some Murchant ids to whom transatations is most times as higher 113 times one murchant recieved transatations","6eb8cd65":"Highly Correlated Variables\n1.   isFlaggedFraud   \n2.  step\n\n\n","8e76f0f8":"User has used transaction once most of time for our dataset.","04eec828":"### EDA","650036d0":"### Column :amount","5cc2aafd":"Duplicates not provide additional info so instade of working on them just remove them and work on remaing data.","b424c9a7":"isFraud  is not done most of time amoung all cases 8213 times fraud happens.","11054e45":"### Column : nameOrig","a9fa6d26":"### Column : oldbalanceDest","2415d9f4":"### Column : type","75bef85a":"Some user id who  uses transations three times or two times","7dae64fc":"### Column : isFlaggedFraud"}}