{"cell_type":{"db8488a2":"code","094d2e8b":"code","954e3f84":"code","e50886ec":"code","f0cc7324":"code","18f01829":"code","09f48a4b":"code","3f163ac4":"code","6b034408":"code","88fd2bee":"code","8a1eb822":"code","a0e68aa3":"code","d33f3c2f":"code","34ca633b":"markdown","ec58e1d2":"markdown","96140d2e":"markdown","88bc0c02":"markdown","fea3c1ed":"markdown","66c28d61":"markdown","a20092f0":"markdown"},"source":{"db8488a2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport random\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# gera uma popula\u00e7\u00e3o de 9999 com n\u00famero de frequ\u00eancia para o tipo sangu\u00edneo ---- xrange\npop_size=9999\npop=random.sample(range(0,9999),9999) \npop2=[]\nneeds_organ=[]\npair_compatible=[]\npair_not_compatible=[]\ncross_pair_matched=[]\ndonor_pool_matched=[]\n\n#print(pop)","094d2e8b":"i=0\nfor i in range(0,9999):\n    if pop[i] < 200:\n        pop2.append('AB-')\n        i+=1\n    elif pop[i] < 400:\n        pop2.append('AB+')\n        i+=1\n    elif pop[i] < 600:\n        pop2.append('A-')\n        i+=1\n    elif pop[i] < 800:\n        pop2.append('A+')\n        i+=1\n    elif pop[i] < 1000:\n        pop2.append('B-')\n        i+=1\n    elif pop[i] < 3000:\n        pop2.append('B+')\n        i+=1\n    elif pop[i] < 5000:\n        pop2.append('O-')\n        i+=1\n    elif pop[i] < 9999:\n        pop2.append('O+')\n        i+=1","954e3f84":"def split(A, n):\n    return [A[i:i+n] for i in range(0, len(A), n)]\n\nB=split(pop2,2)\n#print(pop2)\n#print(B)","e50886ec":"i=0\nwhile i<50:   \n    needs_organ.append(random.choice(B))\n    i+=1\n\nprint(needs_organ, 'precisam de org\u00e3o')\n\nrecbt={'AB-':['O-','AB-','B-','A-'],\n       'AB+':['AB+','O-','A-','B-','O+','AB-','A+','B+'],\n       'A-':['A-','O-'],\n       'A+':['O-','A-','O+','A+'],\n       'B-':['B-','O-'],\n       'B+':['B-','B+','O+','O-'],\n       'O-':['O-'],\n       'O+':['O+','O-']}\n","f0cc7324":"def pair_compatibility_match(array):\n    donor=array[i][0]\n    rec=array[i][1]\n    list_recbt=recbt[rec]\n    if donor in list_recbt:\n        pair_compatible.append(array[i])\n        \n    else:\n        pair_not_compatible.append(array[i])","18f01829":"i=0\nwhile i<50:\n    pair_compatibility_match(needs_organ)\n    i+=1\n\nprint (pair_compatible, 'Compat\u00edveis')","09f48a4b":"print (pair_not_compatible, 'Incompat\u00edveis')","3f163ac4":"def pair_wise_match(array):   \n    donor1=array[j][0]\n    rec1=array[j][1]\n    donor2=array[i+1][0]\n    rec2=array[i+1][1]\n    list_recbt=recbt[rec1]\n    if donor2 in list_recbt:\n        list_recbt=recbt[rec2]\n        if donor1 in list_recbt:\n            cross_pair_matched.extend((array[j],array[i+1]))\n            del array[j]\n            del array[i]","6b034408":"i=0\nj=0\nwhile i<(len(pair_not_compatible)-1) and j<len(pair_not_compatible):\n    pair_wise_match(pair_not_compatible)\n    i+=1\n    if i == (len(pair_not_compatible)-1):\n        j+=1\n        i=j\n\ncross_pair_matched= split(cross_pair_matched,4)\n\nprint (cross_pair_matched, 'par cruzado correspondente')\n","88fd2bee":"pop3=random.sample(range(0,100),10)\n\ndonor_pool=[]\ni=0\nfor i in range(0,10):\n    if pop3[i] < 1:\n        donor_pool.append('AB-')\n        i+=1\n    elif pop3[i] < 4:\n        donor_pool.append('AB+')\n        i+=1\n    elif pop3[i] < 10:\n        donor_pool.append('A-')\n        i+=1\n    elif pop3[i] < 44:\n        donor_pool.append('A+')\n        i+=1\n    elif pop3[i] < 46:\n        donor_pool.append('B-')\n        i+=1\n    elif pop3[i] < 55:\n        donor_pool.append('B+')\n        i+=1\n    elif pop3[i] < 62:\n        donor_pool.append('O-')\n        i+=1\n    elif pop3[i] < 100:\n        donor_pool.append('O+')\n        i+=1\n\nprint (donor_pool, 'Grupo de doadores')","8a1eb822":"def donor_pool_match(array1, array2):\n    donor=array2[j]\n    rec=array1[i][1]\n    list_recbt=recbt[rec]\n    if donor in list_recbt:\n        donor_pool_matched.append(array1[i])\n        del array2[j]\n        del array1[i]","a0e68aa3":"i=0\nj=0\nwhile i<(len(pair_not_compatible)) and j<len(donor_pool):\n    donor_pool_match(pair_not_compatible, donor_pool)\n    j+=1\n    if j == (len(donor_pool)):\n        i+=1\n\nprint(donor_pool_matched, 'Grupo de doadores compativ\u00e9is')","d33f3c2f":"print(pair_not_compatible,'Pares n\u00e3o compat\u00edveis')\n\nprint('# pessoas que precisam de org\u00e3os: ', len(needs_organ))\n\nprint('# de par de correspondencia: ', len(pair_compatible))\n\nprint('# de correspondencia cruzada: ', sum(len(x) for x in cross_pair_matched))\n\nprint('# de doador compat\u00edvel: ', len(donor_pool_matched))\n\nprint('# de pessoa que n\u00e3o recebeu org\u00e3o: ', len(pair_not_compatible))","34ca633b":"Compara\u00e7\u00e3o","ec58e1d2":"Atribuindo o tipo de sangue \u00e0 popula\u00e7\u00e3o.\n\nDistribui\u00e7\u00e3o do tipo sangu\u00edneo por pa\u00eds\n\n\nPa\u00eds\tPopula\u00e7\u00e3o  O+\t A+ \tB+\t AB+\t O\u2212\t A\u2212\t B\u2212\t AB\u2212\n\nBrasil......\t211,248,418\t 36.0%\t 34.0%\t8.0%\t2.5%\t9.0%\t8.0%\t2.0%\t0.5%\n\nPortugal....\t 10,264,672\t36.3%\t40.0%\t6.6%\t2.9%\t6.0%\t6.6%\t1.1%\t0.5%","96140d2e":"Agora vamos criar a populacao que precisa de org\u00e3o","88bc0c02":"Pares n\u00e3o compat\u00edveis","fea3c1ed":"Testes para realizar match entre o org\u00e3o do doador com o recetor.\n\nVou iniciar gerando uma amostra de popula\u00e7\u00e3o de casais e atribui aleatoriamente o tipo de sangue a cada um. \n\nDepois selecionar aleatoriamente um n\u00famero de pares em que um deles requer um transplante de \u00f3rg\u00e3o.\n\nEnt\u00e3o combinar os tipos sangu\u00edneos entre os pares. \n\nOs que n\u00e3o s\u00e3o correspondentes tentam ser correspondentes e, se ainda n\u00e3o s\u00e3o os principais correspondentes, s\u00e3o usados em uma lista para corresponder a um pool de doadores selecionados aleatoriamente. \n\nFinalmente, selecionar\u00e1 o n\u00famero de pessoas que foram correspondidas com sucesso e as que n\u00e3o foram.","66c28d61":"Array de tamanho n","a20092f0":"Match"}}