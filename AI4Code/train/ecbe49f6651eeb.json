{"cell_type":{"472f68e6":"code","986ec8bc":"code","a8eb8601":"code","83abefeb":"code","61ac67fa":"code","8c596b40":"code","4e98d4d1":"code","a0c564de":"code","72f81e96":"code","c2b268e3":"code","3236b0fc":"code","3bfdbba4":"code","16a3731e":"code","fee667c4":"code","cf15be72":"code","266f8539":"code","3c78f4ee":"code","329233a1":"code","afb67dd7":"code","d0367d9d":"code","f7a3c6b5":"code","c97f72a5":"code","9382082e":"code","33269797":"code","144e391b":"code","1ff895e5":"code","3db40ca6":"code","5cb3f7b6":"code","e1db986c":"code","640c71c8":"code","2b18e2fd":"code","efba68c0":"code","d5f6cf13":"code","697d0d9c":"markdown","32263c89":"markdown","0dc05a55":"markdown","19edfa3b":"markdown","2f2bbeb8":"markdown","c992f37f":"markdown","47a4f765":"markdown","d86ba1ac":"markdown","c7c64a1b":"markdown","1a4c5ac2":"markdown","cb306424":"markdown","157a2b57":"markdown","5f267c83":"markdown","115ce3ce":"markdown","7af09034":"markdown","3660c5e9":"markdown","95a3e81e":"markdown","12b769e7":"markdown","34c86627":"markdown","f3b4c0ad":"markdown","5b6a4bc6":"markdown","80198a6d":"markdown","da593e65":"markdown","37865d4b":"markdown","bf160bf0":"markdown","9279857a":"markdown","663f9541":"markdown","4d290dd8":"markdown","385c8bc8":"markdown","c5eb7289":"markdown","15647dac":"markdown","27c478e4":"markdown","4536a68e":"markdown","97277e90":"markdown","d5b83dc9":"markdown","9745db56":"markdown","bc52aa84":"markdown","cbffc845":"markdown","afd8b941":"markdown"},"source":{"472f68e6":"pip install python-highcharts","986ec8bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n# importing libraries\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nimport networkx as nx\nimport warnings\nwarnings.filterwarnings('ignore')\nimport folium \nfrom folium import plugins\nfrom highcharts import Highchart\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve,auc\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a8eb8601":"data = pd.read_csv(\"\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv\")\n\ndata.drop(\"sl_no\", axis=1, inplace=True) # Removing Serial Number","83abefeb":"data.head()","61ac67fa":"## Let's also see if we have any null values .. \n\ndisplay(data.info(),data.isnull().sum())","8c596b40":"gender_placed = data[data['gender'] == 'M'].status.value_counts().to_frame()\ngender_not_placed = data[data['gender'] == 'F'].status.value_counts().to_frame()\ngender_placed=gender_placed.merge(gender_not_placed,left_index=True,right_index=True,how='left').dropna()\ngender_placed.columns=['Male', 'Female',]\n\nH = Highchart(width=600,height=400)\n\noptions = {\n    'title': {\n        'text': 'Male vs Female Placements records(Placed or Not)'\n    },\n    'xAxis': {\n        'categories': ['Placed', 'Not Placed',],\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Respondents'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(gender_placed['Male'])\ndata2 = list(gender_placed['Female'])\nH.add_data_set(data1,'bar','Male')\nH.add_data_set(data2,'bar','Female')\nH","4e98d4d1":"placed = data[data['status'] == 'Placed'].ssc_b.value_counts().to_frame()\nnot_placed = data[data['status'] == 'Not Placed'].ssc_b.value_counts().to_frame()\nplaced=placed.merge(not_placed,left_index=True,right_index=True,how='left').dropna()\nplaced.columns=['placed','not placed']\n\nH = Highchart(width=600,height=400)\n\noptions = {\n    'title': {\n        'text': 'ssc_b Placements records(Placed or Not)'\n    },\n    'xAxis': {\n        'categories': list(placed.index),\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Count'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(placed['placed'])\ndata2 = list(placed['not placed'])\nH.add_data_set(data1,'bar','placed')\nH.add_data_set(data2,'bar','not placed')\nH","a0c564de":"\n# Let's plot percentage vs status to see how much effect they make\nsns.set_palette(sns.color_palette('PuBuGn_d'))\nsns.barplot(x=\"status\", y=\"ssc_p\", data=data)\n","72f81e96":"\n# Let's see the how much percentage was scored by students in different boards\n\nsns.barplot(x=\"ssc_b\", y=\"ssc_p\", data=data)","c2b268e3":"hsc_b_placed = data[data['status'] == 'Placed'].hsc_b.value_counts().to_frame()\nhsc_b_not_placed = data[data['status'] == 'Not Placed'].hsc_b.value_counts().to_frame()\nhsc_b_placed=hsc_b_placed.merge(hsc_b_not_placed,left_index=True,right_index=True,how='left').dropna()\nhsc_b_placed.columns=['placed','not placed']\n\nH = Highchart(width=600,height=400)\n\noptions = {\n    'title': {\n        'text': 'hsc_b Placements records(Placed or Not)'\n    },\n    'xAxis': {\n        'categories': list(hsc_b_placed.index),\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Count'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(hsc_b_placed['placed'])\ndata2 = list(hsc_b_placed['not placed'])\nH.add_data_set(data1,'bar','placed')\nH.add_data_set(data2,'bar','not placed')\nH","3236b0fc":"# Let's plot percentage vs status to see how much effect they make\n\nsns.barplot(x=\"status\", y=\"hsc_p\", data=data)","3bfdbba4":"# Let's see the how much percentage was scored by students in 12th grade in different boards\n\nsns.barplot(x=\"hsc_b\", y=\"hsc_p\", data=data)","16a3731e":"hsc_splaced = data[data['status'] == 'Placed'].hsc_s.value_counts().to_frame()\nhsc_snot_placed = data[data['status'] == 'Not Placed'].hsc_s.value_counts().to_frame()\nhsc_splaced=hsc_splaced.merge(hsc_snot_placed,left_index=True,right_index=True,how='left').dropna()\nhsc_splaced.columns=['placed','not placed']\n\nH = Highchart(width=600,height=400)\n\noptions = {\n    'title': {\n        'text': 'hsc_s Placements records(Placed or Not)'\n    },\n    'xAxis': {\n        'categories': list(hsc_splaced.index),\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Count'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(hsc_splaced['placed'])\ndata2 = list(hsc_splaced['not placed'])\nH.add_data_set(data1,'bar','placed')\nH.add_data_set(data2,'bar','not placed')\nH","fee667c4":"# Let's look at how well each specialisation students performed\n\nax = sns.barplot(x=\"hsc_s\", y=\"hsc_p\", data=data)","cf15be72":"degree_tplaced = data[data['status'] == 'Placed'].degree_t.value_counts().to_frame()\ndegree_tnot_placed = data[data['status'] == 'Not Placed'].degree_t.value_counts().to_frame()\ndegree_tplaced=degree_tplaced.merge(degree_tnot_placed,left_index=True,right_index=True,how='left').dropna()\ndegree_tplaced.columns=['placed','not placed']\n\nH = Highchart(width=600,height=400)\n\noptions = {\n    'title': {\n        'text': 'degree_t Placements records(Placed or Not)'\n    },\n    'xAxis': {\n        'categories': list(degree_tplaced.index),\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Count'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(degree_tplaced['placed'])\ndata2 = list(degree_tplaced['not placed'])\nH.add_data_set(data1,'bar','placed')\nH.add_data_set(data2,'bar','not placed')\nH","266f8539":"# Let's look at how well each field students performed\n\nsns.barplot(x=\"degree_t\", y=\"degree_p\", data=data)","3c78f4ee":"work = data['workex'].value_counts().to_frame()\nwork = pd.DataFrame({'Work_experience':work.index,'Count':work['workex']})\nwork.reset_index(drop=True, inplace=True)","329233a1":"H = Highchart(width=450, height=400)\noptions = {\n    'title': {\n        'text':'Work experience'\n    },\n    'chart': {\n        'style': {\n            'fontFamily': '\\'Unica One\\', sans-serif'\n        },\n        'type': 'pie',\n        'options3d': {\n            'enabled': True,\n            'alpha': 45\n        }\n    },\n    'plotOptions': {\n        'pie': {\n            'innerSize': 100,\n            'depth': 45\n        }\n    },\n}\n\ndata1 = work.values.tolist()\n\nH.set_dict_options(options)\nH.add_data_set(data1, 'pie', 'Count')\n\nH","afb67dd7":"placed = data[data['status'] == 'Placed'].workex.value_counts().to_frame()\nnot_placed = data[data['status'] == 'Not Placed'].workex.value_counts().to_frame()\nplaced=placed.merge(not_placed,left_index=True,right_index=True,how='left').dropna()\nplaced.columns=['placed','not placed']\n\nH = Highchart(width=600,height=400)\n\noptions = {\n    'title': {\n        'text': 'People with work experience Yes of No(Placed or Not)'\n    },\n    'xAxis': {\n        'categories': list(placed.index),\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Count'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(placed['placed'])\ndata2 = list(placed['not placed'])\nH.add_data_set(data1,'bar','placed')\nH.add_data_set(data2,'bar','not placed')\nH","d0367d9d":"placed = data[data['status'] == 'Placed'].specialisation.value_counts().to_frame()\nnot_placed = data[data['status'] == 'Not Placed'].specialisation.value_counts().to_frame()\nplaced=placed.merge(not_placed,left_index=True,right_index=True,how='left').dropna()\nplaced.columns=['placed','not placed']\n\nH = Highchart(width=600,height=400)\n\noptions = {\n    'title': {\n        'text': 'People with specialisation(Placed or Not)'\n    },\n    'xAxis': {\n        'categories': list(placed.index),\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Count'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(placed['placed'])\ndata2 = list(placed['not placed'])\nH.add_data_set(data1,'bar','placed')\nH.add_data_set(data2,'bar','not placed')\nH","f7a3c6b5":"from sklearn.preprocessing import LabelEncoder\n\n# Make copy to avoid changing original data \nobject_cols=['gender','workex','specialisation','status']\n\n# Apply label encoder to each column with categorical data\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    data[col] = label_encoder.fit_transform(data[col])\n#data.head()","c97f72a5":"# Using get dummies for 3 class categorical variables (hsc_s and degree_t)\n\nfor column in ['hsc_s', 'degree_t']:\n    dummies = pd.get_dummies(data[column])\n    data[dummies.columns] = dummies","9382082e":"# Let's plot correlation matrix to find out less correlated variable to drop them\n\ncor=data.corr()\nplt.figure(figsize=(14,6))\nsns.heatmap(cor,annot=True,cmap=plt.cm.Blues)","33269797":"## Now Lets drop few columns with negative correlations \n\n\ndata.drop(['Others', 'Arts','degree_t','hsc_s','ssc_b','hsc_b', 'salary'], axis=1, inplace=True)","144e391b":"## Final Correlation  plot \n# Let's plot correlation matrix to find out less correlated variable to drop them\n\ncor=data.corr()\nplt.figure(figsize=(14,6))\nsns.heatmap(cor,annot=True,cmap=plt.cm.Blues)","1ff895e5":"# target vector\ny = data['status']\n\n# dropping as it is not a predictor\ndata.drop('status', axis = 1, inplace = True)\n\n# scaling the data so as to get rid of any dramatic results during modelling\nsc = StandardScaler()\n\n# predictors\nX = sc.fit_transform(data)\n\n# Let us now split the data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=True)\n\n\nprint(\"X-Train:\",X_train.shape)\nprint(\"X-Test:\",X_test.shape)\nprint(\"Y-Train:\",y_train.shape)\nprint(\"Y-Test:\",y_test.shape)","3db40ca6":"#creating our model instance\nlog_reg = LogisticRegression()\n\n#fitting the model\nlog_reg.fit(X_train, y_train)","5cb3f7b6":"# predicting the target vectors\n\ny_pred=log_reg.predict(X_test)","e1db986c":"# creating confusion matrix heatmap\n\nconf_mat = pd.DataFrame(confusion_matrix(y_test, y_pred))\nfig = plt.figure(figsize=(6,5))\nsns.heatmap(conf_mat, annot=True, annot_kws={\"size\": 16}, fmt='g',cmap=plt.cm.Blues)\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.show()","640c71c8":"# getting precision, recall and f1-score via classification report\n\nprint(classification_report(y_test, y_pred))","2b18e2fd":"# let's look at our accuracy\n\naccuracy = accuracy_score(y_pred, y_test)\n\nprint(f\"The accuracy on test set using Logistic Regression is: {np.round(accuracy, 3)*100.0}%\")","efba68c0":"# plotting the ROC curve\n\nauc_roc = roc_auc_score(y_test, log_reg.predict(X_test))\nfpr, tpr, thresholds = roc_curve(y_test, log_reg.predict_proba(X_test)[:,1])\n\nplt.plot(fpr, tpr, color='blue', lw=2, \n         label='Average ROC curve (area = {0:0.3f})'.format(auc_roc))\nplt.plot([0, 1], [0, 1], color='black', lw=2, linestyle='--', \n         label= 'Average ROC curve (area = 0.500)')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","d5f6cf13":"# calculate auc \nauc_score = auc(fpr, tpr)\nprint(f\"Our auc_score came out to be {round(auc_score, 3)}.\")","697d0d9c":"## hsc_s (Specialization in Higher Secondary Education)","32263c89":"#### Almost every branch students performed equally but commerce students have slightly better score than other two.","0dc05a55":"## I got a test_score of 88.4%  and an 94.1% AUC score which is great. But I will try to increase it in the next versions..","19edfa3b":"## I am not going into the Salary aspect as this notebook is only to predict whether you will be placed or not..","2f2bbeb8":"(I) The students opted for following fields:<br>\n1.Science and Technology (must be science students)<br>\n2.Commerce and management (might be a mixture of commerce and Arts)<br>\n3.Others<br>\n\n(II) Looks like Commerce and Science degree students are preffered by companies which is obvious. Students who opted for Others have very low placement chance.","c992f37f":"#### Specialisation is a clear indicator in placements. Compared to MktandFin, Mkt&HR students have low placements. This might be because there is low requirements for HR in a company.","47a4f765":"## In this notebook I will try to find what they may like but no one can actually vouch for anything. Leaving everything aside let's start... ","d86ba1ac":"#### (I) Percentage in secondary education has a clear impact on placements.Higher percentage candidates have a very good chance of getting placed.\n\n#### (II) Looks like there is not impace of boards on percentages of students.","c7c64a1b":"#### Companies prefer candidates with work experience so the students with internships and past job experience have better chances of being placed.\n\n#### The plot may look that many people without the work experience got the job but the ration shows that people prior experience had better chance in getting selected. ","1a4c5ac2":"## Let's review what data has been given .. ","cb306424":"## ssc_b (Board of Education - Secondary)","157a2b57":"### (I) There is count of central board students is very high as compared to all other boards.It might be because central board is easy.<br>(II) The count of placed students from central board is little more than others category which doesn't say much.","5f267c83":"## Specialisation Courses and Placements","115ce3ce":"### Currently the model is working fine but the incorrect predictions need to be less as good candidates should not be rejected, for once we can deal with unfit candidates being selected.","7af09034":"### Label Encoding","3660c5e9":"### So we can clearly see that more no. of males were placed than females. Moreover ratio of male:female placed vs not placed is also high for females as less no. of them have been selected. \n### There can be many reasons for this lets find them..","95a3e81e":"## Conclusion:\n\n1. More male candidates got placed as compared to female candidates.\n2. Male Candidates got higher CTCs as compared to female candidates.\n3. Type of Board choosen does not have any effect on placements thus we can drop in preprocessing steps.\n4. Most of the students preferred Central board in 10th grade whereas other boards in 12th grade.\n5. Candidates with higher percentages have better chance of placements.\n6. Choosing Science and Commerce as Specialisation seems to have perk when it comes to placments.\n7. Commerce is the most popular branch among candidates.\n8. Choosing Sci&Tech and Comm&Mngmt as degree will fetch you higher CTCs.","12b769e7":"## 1. Gender and Selection ","34c86627":"#### (I) Percentage in higher secondary education also has a clear impact on placements. Higher percentage candidates have a very good chance of getting placed.\n\n#### (II) Board isn't a determinant in defining how much precentage students score.\n\n#### Thus, it turns out that a piece of paper can definately decide your future atleast for placements, so study hard!","f3b4c0ad":"## Logistic Regression","5b6a4bc6":"## I hope you had a great Experience going through the notebook . Do comment and Upvote if you like . Thank You \ud83d\ude4f\ud83d\ude4f","80198a6d":"### We don't have any missing values except 67 missing salary elements. <br> Its simple we can assume the these are those people who did not get placed in any company when the survey was being conducted. ","da593e65":"## Work experience Vs Placement Status","37865d4b":"## Creating Training and Test data","bf160bf0":"## Step 2. Classification\/ Prediction","9279857a":"## hsc_b (Board of Education - Higher)","663f9541":"### Let's see if 10th and 12th board marks really matter.","4d290dd8":"## 2. Board Marks and Placements ...","385c8bc8":"![5f02f3ca4efab_campus_recruitment_process_heres_everything_you_need_to_know.png](attachment:5f02f3ca4efab_campus_recruitment_process_heres_everything_you_need_to_know.png)","c5eb7289":"### I am going to use it as it is a great classifier and works well with binary data. ","15647dac":"#### (I) The most popular branch turns out to be commerce or maybe as most of students get average marks so they were admitted to got commerce on based of their marks. Science is the second most popular and the least popular is arts.\n\n#### (II) Looking at the fraction of placed and not placed we can say that science branch students have more chance of getting placed than commerce students and most around 45% of the students in arts are not placed","27c478e4":"## <span style=\"color:orange;\"> Q. What Do campus recruiters want ??? <\/span>","4536a68e":"#### (I) Looks like more number of candidates opted for others for 12th grade as compared to 10th grade.<br>(II) This time also not much difference between in the fraction of placed candidates in respective boards. Thus, board doesn't matter in placements.","97277e90":"There is not much difference in performace of students from Science and Commerce but there but students who opted for \"Others\" have low performance\n","d5b83dc9":"## <span style=\"color:blue;\"> Do comment and UpVote if you like the efforts. Thank You !! <\/span>","9745db56":"## degree_t & degree_p (Degree Type and Degree percentage)","bc52aa84":"## a)Preprocessing data for classficiation models","cbffc845":"## EDA","afd8b941":"### In todays generation 'Gender' is just a formality in many jobs however sometimes it is also plays an important role in selection process as per the requirements. So let's see if there was any Gender bias or requirement in the given selection process."}}