{"cell_type":{"6612c99a":"code","0197de7b":"code","6606742d":"code","0a354233":"code","f97fd1c6":"code","176e7330":"code","931e323d":"code","4c606054":"code","afbb9f34":"code","272190d7":"code","844783c2":"code","ca99bef4":"code","65bb4cf4":"code","c3439244":"code","9f8fcabf":"code","98093aac":"code","78bafd8c":"code","c31af184":"code","75062f74":"code","8859176c":"code","9beb3fe9":"code","e8db0f5d":"code","c62daa34":"code","3f1d3f0c":"code","fde20633":"code","cc13c9a6":"code","69765e2b":"code","902f23d2":"code","a9100209":"code","124177a3":"code","a80fff72":"code","32c32123":"code","b1c91689":"code","26c23122":"code","9693189d":"code","1cd87fc7":"markdown","410d1fa2":"markdown","e82eb295":"markdown","c3d6f379":"markdown","6de9e2c9":"markdown","f3ce2eb4":"markdown","48472ec7":"markdown","fc33af17":"markdown","cdda666b":"markdown","d1dd0bf0":"markdown","17bb94dd":"markdown","5b359f77":"markdown","ebee1193":"markdown","ef5d4954":"markdown","32e8b85d":"markdown","3f085686":"markdown","dfd67aee":"markdown","c34d8296":"markdown","87a88d47":"markdown","160ce77f":"markdown","3c70fdd0":"markdown","7788b14b":"markdown"},"source":{"6612c99a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nconf = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\"\nrec = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv\"\ndea = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv\"\n\nconfirmed = pd.read_csv(conf)\nrecovered = pd.read_csv(rec)\ndeaths = pd.read_csv(dea)\n\nconfirmed = np.sum(confirmed.iloc[:,4:confirmed.shape[1]])\nrecovered = np.sum(recovered.iloc[:,4:recovered.shape[1]])\ndeaths = np.sum(deaths.iloc[:,4:deaths.shape[1]])\n\nglobal_mortality = (deaths\/confirmed)*100\n\n# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating a lineplot for each case variable(suspected, recovered and death)\nplt.plot(global_mortality\n        , color = 'red'\n        , label = 'Mortality Rate'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Global Mortality Rate Over the Time',size=30)\nplt.ylabel('Rate',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","0197de7b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","6606742d":"confirmed = pd.read_csv(conf)\nrecovered = pd.read_csv(rec)\ndeaths = pd.read_csv(dea)","0a354233":"# replacing missings\nconfirmed = confirmed.fillna('unknow')\nrecovered = recovered.fillna('unknow')\ndeaths = deaths.fillna('unknow')","f97fd1c6":"# defyning the last update\nlast_update = '5\/14\/20'","176e7330":"#  taking total confirmed, recovered and deaths from last_update and joing\n\nconfir = confirmed[['Province\/State',last_update]][confirmed['Country\/Region']=='China'][last_update]\nrecover = recovered[last_update][recovered['Country\/Region']=='China']\ndeat = deaths[last_update][deaths['Country\/Region']=='China']\n\nchina_cases = confirmed[['Province\/State',last_update]][confirmed['Country\/Region']=='China']\nchina_cases['recovered'] = recover\nchina_cases['non_recovered'] = confir\nchina_cases['deaths'] = deat\n\n# setting \"Province\/State\" as index\nchina_cases = china_cases.set_index('Province\/State')\n\n# renaming columns\nchina_cases = china_cases.rename(columns = {last_update:'confirmed'\n                                            ,'recovered':'recovered'\n                                            ,'non_recovered':'non_recovered'\n                                            ,'deaths':'deaths'})\n\nchina_cases.iloc[13,1] = 67801\nchina_cases.iloc[13,2] = 18","931e323d":"# creating the plot\nchina_cases.sort_values(by='confirmed',ascending=True).plot(kind='barh'\n                                                            , figsize=(20,30)\n                                                            , color = ['#4b8bbe','lime','orange','red']\n                                                            , width=1\n                                                            , rot=2)\n\n# defyning legend and titles parameters\nplt.title('Total cases by Province\/State in China', size=40)\nplt.ylabel('Province\/State',size=30)\nplt.yticks(size=20)\nplt.xticks(size=20)\nplt.legend(bbox_to_anchor=(0.95,0.95) # setting coordinates for the caption box\n           , frameon = True\n           , fontsize = 20\n           , ncol = 2 \n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","4c606054":"# taking cases numbers\nHubei = china_cases[china_cases.index==\"Hubei\"]\nHubei = Hubei.iloc[0]\nHubei = Hubei.iloc[1:4]\n\n# difyning plot size\nplt.figure(figsize=(15,15))\n\n# here i use .value_counts() to count the frequency that each category occurs of dataset\nHubei.plot(kind='pie'\n           , colors=['lime','orange','red']\n           , autopct='%1.1f%%' # adding percentagens\n           , shadow=True\n           , startangle=140)\n\n# defyning titles and legend parameters\nplt.title('Hubei Cases Distribution',size=30)\nplt.legend(loc = \"upper right\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 2 \n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","afbb9f34":"# creating a subset with confirmed cases in China\nconfirmed_china = confirmed[confirmed['Country\/Region']=='China']\nconfirmed_china = confirmed_china.groupby(confirmed_china['Country\/Region']).sum()\n\n# taking confirmed cases growth over the time\nconfirmed_china = confirmed_china.iloc[0][2:confirmed_china.shape[1]]","272190d7":"# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating the plot\nplt.plot(confirmed_china\n        , color = '#4b8bbe'\n        , label = 'comfirmed'\n        , marker = 'o')\n\n# titles parameters\nplt.title('Confirmed cases over the time in China',size=30)\nplt.ylabel('Cases',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# legend parameters\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","844783c2":"# creating a subset with recoreved cases in China\nrecovered_china = recovered[recovered['Country\/Region']=='China']\nrecovered_china = recovered_china.groupby(recovered_china['Country\/Region']).sum()\n\n# taking recovered cases growth over the time\nrecovered_china = recovered_china.iloc[0][2:recovered_china.shape[1]]\n\n# creating a subset with death cases in China\ndeaths_china = deaths[deaths['Country\/Region']=='China']\ndeaths_china = deaths_china.groupby(deaths_china['Country\/Region']).sum()\n\n# taking death cases growth over the time\ndeaths_china = deaths_china.iloc[0][2:deaths_china.shape[1]]\n\nnon_recovered_china = confirmed_china-recovered_china-deaths_china","ca99bef4":"# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating a lineplot\nplt.plot(recovered_china\n        , color = 'lime'\n        , label = 'recovered'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Recovered over the time in China',size=30)\nplt.ylabel('Cases',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","65bb4cf4":"# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating a lineplot\nplt.plot(non_recovered_china\n        , color = 'orange'\n        , label = 'non_recovered'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Non_Recovered over the time in China',size=30)\nplt.ylabel('Cases',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","c3439244":"# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating a lineplot\nplt.plot(deaths_china\n        , color = 'red'\n        , label = 'death'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Deaths over the time in China',size=30)\nplt.ylabel('Cases',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","9f8fcabf":"# taking mortality and recovered ratios in China\nrecovered_rate = (recovered_china\/(confirmed_china))*100\n\n# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating a lineplot\nplt.plot(recovered_rate\n        , color = 'lime'\n        , label = 'recovered rate'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Recovered Rate Over the time In China',size=30)\nplt.ylabel('Cases',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","98093aac":"# taking mortality and recovered ratios in China\nnon_recovered_rate = (non_recovered_china\/(confirmed_china))*100\n\n# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating a lineplot\nplt.plot(non_recovered_rate\n        , color = 'Orange'\n        , label = 'Non recovered rate'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Non recovered Rate Over the time In China',size=30)\nplt.ylabel('Cases',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper right\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","78bafd8c":"# taking mortality and recovered ratios in China\nmortality_rate = (deaths_china\/(confirmed_china))*100\n\n# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating a lineplot\nplt.plot(mortality_rate\n        , color = 'red'\n        , label = 'mortality rate'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Mortality Rate Over the time In China',size=30)\nplt.ylabel('Cases',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","c31af184":"# selecting cases by country that are not located in Mainland China\nother_countries_confirmed = confirmed[confirmed.columns[4:confirmed.shape[1]]][confirmed['Country\/Region']!='China']\nother_countries_confirmed = other_countries_confirmed.iloc[0:other_countries_confirmed.shape[0]].sum()\n\nother_countries_recovered = recovered[recovered.columns[4:recovered.shape[1]]][recovered['Country\/Region']!='China']\nother_countries_recovered = other_countries_recovered.iloc[0:other_countries_recovered.shape[0]].sum()\n\nother_countries_deaths = deaths[deaths.columns[4:deaths.shape[1]]][deaths['Country\/Region']!='China']\nother_countries_deaths = other_countries_deaths.iloc[0:other_countries_deaths.shape[0]].sum()\n\nother_countries_non_recovered = other_countries_confirmed-other_countries_recovered-other_countries_deaths","75062f74":"# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating a lineplot\nplt.plot(other_countries_confirmed\n        , color = '#4b8bbe'\n        , label = 'confirmed'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Confirmed over the time outside of China',size=30)\nplt.ylabel('Cases',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","8859176c":"# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating a lineplot\nplt.plot(other_countries_recovered\n        , color = 'lime'\n        , label = 'recovered'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Recovered over the time outside of China',size=30)\nplt.ylabel('Cases',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","9beb3fe9":"# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating a lineplot\nplt.plot(other_countries_non_recovered\n        , color = 'Orange'\n        , label = 'Non recovered'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Non recovered over the time outside of China',size=30)\nplt.ylabel('Cases',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","e8db0f5d":"# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating a lineplot\nplt.plot(other_countries_deaths\n        , color = 'red'\n        , label = 'deaths'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Deaths over the time outside of China',size=30)\nplt.ylabel('Cases',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","c62daa34":"recovered_rate_other_countries = (other_countries_recovered\/(other_countries_confirmed))*100\n\n# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating a lineplot\nplt.plot(recovered_rate_other_countries\n        , color = 'lime'\n        , label = 'recovered rate'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Recovered Rate Over the time outside of China',size=30)\nplt.ylabel('Cases',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","3f1d3f0c":"non_recovered_rate_other_countries = (other_countries_non_recovered\/(other_countries_confirmed))*100\n\n# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating a lineplot\nplt.plot(non_recovered_rate_other_countries\n        , color = 'Orange'\n        , label = 'Non recovered rate'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Non recovered Rate Over the time outside of China',size=30)\nplt.ylabel('Cases',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","fde20633":"death_rate_other_countries = (other_countries_deaths\/(other_countries_confirmed))*100\n\n# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating a lineplot\nplt.plot(death_rate_other_countries\n        , color = 'red'\n        , label = 'mortality rate'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Mortality Rate Over the time outside of China',size=30)\nplt.ylabel('Cases',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","cc13c9a6":"# selecting cases that are not in China and join\n\nconfir = confirmed[['Country\/Region','Province\/State',last_update]][confirmed['Country\/Region']!='China'][last_update]\nrecover = recovered[last_update][recovered['Country\/Region']!='China']\ndeat = deaths[last_update][deaths['Country\/Region']!='China']\n\nother_countries = confirmed[['Country\/Region','Province\/State',last_update]][confirmed['Country\/Region']!='China']\nother_countries['recovered'] = recover\nother_countries['non_recovered'] = confir-recover-deat\nother_countries['deaths'] = deat\n\n# sum the cases by country\/region\nother_countries = other_countries.groupby(other_countries['Country\/Region']).sum()\n\n# renaming the columns\nother_countries = other_countries.rename(columns = {last_update:'confirmed'\n                                                    ,'recovered':'recovered'\n                                                    ,'non_recovered':'non_recovered'\n                                                    ,'deaths':'deaths'})\n\nother_countries['non_recovered'][other_countries['non_recovered']<0] = 0","69765e2b":"# creating the plot\nother_countries.sort_values(by='confirmed',ascending=True).plot(kind='barh'\n                                                                , figsize=(20,50)\n                                                                , color = ['#4b8bbe','lime','orange','red']\n                                                                , width=1\n                                                                , rot=2)\n\n# defyning titles, labels, xticks and legend parameters\nplt.title('Total cases by country', size=40)\nplt.ylabel('country',size=30)\nplt.yticks(size=20)\nplt.xticks(size=20)\nplt.legend(bbox_to_anchor=(0.95,0.95)\n           , frameon = True\n           , fontsize = 20\n           , ncol = 2 \n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","902f23d2":"top_10_confirmed = confirmed[(confirmed['Country\/Region']=='US') | \n                             (confirmed['Country\/Region']=='Spain') |\n                             (confirmed['Country\/Region']=='Italy') |\n                             (confirmed['Country\/Region']=='France') |\n                             (confirmed['Country\/Region']=='Germany') |\n                             (confirmed['Country\/Region']=='United Kingdom') |\n                             (confirmed['Country\/Region']=='Turkey') |\n                             (confirmed['Country\/Region']=='Iran') |\n                             (confirmed['Country\/Region']=='Russia') |\n                             (confirmed['Country\/Region']=='Brazil')]\n\ntop_10_confirmed = top_10_confirmed.groupby(top_10_confirmed['Country\/Region']).sum()\n\ntop_10_confirmed = top_10_confirmed.drop(['Lat','Long'], axis = 1)\ntop_10_confirmed = top_10_confirmed.transpose()","a9100209":"# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating a lineplot\n\nUS = top_10_confirmed['US'][top_10_confirmed['US']>0].reset_index().drop('index',axis=1)\n\nplt.plot(np.log(US)\n        , color = 'red'\n        , label = 'US'\n        , marker = 'o')\n\nSpain = top_10_confirmed['Spain'][top_10_confirmed['Spain']>0].reset_index().drop('index',axis=1)\n\nplt.plot(np.log(Spain)\n        , color = 'green'\n        , label = 'Spain'\n        , marker = 'o')\n\nItaly = top_10_confirmed['Italy'][top_10_confirmed['Italy']>0].reset_index().drop('index',axis=1)\n\nplt.plot(np.log(Italy)\n        , color = 'cyan'\n        , label = 'Italy'\n        , marker = 'o')\n\nFrance = top_10_confirmed['France'][top_10_confirmed['France']>0].reset_index().drop('index',axis=1)\n\nplt.plot(np.log(France)\n        , color = 'black'\n        , label = 'France'\n        , marker = 'o')\n\nGermany = top_10_confirmed['Germany'][top_10_confirmed['Germany']>0].reset_index().drop('index',axis=1)\n\nplt.plot(np.log(Germany)\n        , color = 'blue'\n        , label = 'Germany'\n        , marker = 'o')\n\nUK = top_10_confirmed['United Kingdom'][top_10_confirmed['United Kingdom']>0].reset_index().drop('index',axis=1)\n\nplt.plot(np.log(UK)\n        , color = 'darkred'\n        , label = 'United Kingdom'\n        , marker = 'o')\n\nTurkey = top_10_confirmed['Turkey'][top_10_confirmed['Turkey']>0].reset_index().drop('index',axis=1)\n\nplt.plot(np.log(Turkey)\n        , color = 'darkblue'\n        , label = 'Turkey'\n        , marker = 'o')\n\nIran = top_10_confirmed['Iran'][top_10_confirmed['Iran']>0].reset_index().drop('index',axis=1)\n\nplt.plot(np.log(Iran)\n        , color = 'pink'\n        , label = 'Iran'\n        , marker = 'o')\n\nRussia = top_10_confirmed['Russia'][top_10_confirmed['Russia']>0].reset_index().drop('index',axis=1)\n\nplt.plot(np.log(Russia)\n        , color = 'orange'\n        , label = 'Russia'\n        , marker = 'o')\n\nBrazil = top_10_confirmed['Brazil'][top_10_confirmed['Brazil']>0].reset_index().drop('index',axis=1)\n\nplt.plot(np.log(Brazil)\n        , color = 'magenta'\n        , label = 'Brazil'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Top 10 countries in log confirmed cases since first case appear',size=30)\nplt.ylabel('Cases',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","124177a3":"# taking cases in Italy\nItaly = other_countries[other_countries.index==\"Italy\"]\nItaly = Italy.iloc[0]\nItaly = Italy.iloc[1:4]\n\n# taking cases in Iran\nIran = other_countries[other_countries.index==\"Iran\"]\nIran = Iran.iloc[0]\nIran = Iran.iloc[1:4]\n\n# taking cases in South Korea\nUnited_kingdom = other_countries[other_countries.index==\"United Kingdom\"]\nUnited_kingdom = United_kingdom.iloc[0]\nUnited_kingdom = United_kingdom.iloc[1:4]\n\n# taking cases in Spain\nSpain = other_countries[other_countries.index==\"Spain\"]\nSpain = Spain.iloc[0]\nSpain = Spain.iloc[1:4]\n\n# taking cases in Germany\nGermany = other_countries[other_countries.index==\"Germany\"]\nGermany = Germany.iloc[0]\nGermany = Germany.iloc[1:4]\n\n# taking cases in US\nUS = other_countries[other_countries.index==\"US\"]\nUS = US.iloc[0]\nUS = US.iloc[1:4]\n\n# taking cases in France\nFrance = other_countries[other_countries.index==\"France\"]\nFrance = France.iloc[0]\nFrance = France.iloc[1:4]\n\n# taking cases in Iran\nIran = other_countries[other_countries.index==\"Iran\"]\nIran = Iran.iloc[0]\nIran = Iran.iloc[1:4]","a80fff72":"fig, axes = plt.subplots(\n                     ncols=2,\n                     nrows=2,\n                     figsize=(15, 15))\n\nax1, ax2, ax3, ax4 = axes.flatten()\n\n # here i use .value_counts() to count the frequency that each category occurs of dataset\nax1.pie(US\n        , colors=['lime','orange','red']\n        , autopct='%1.1f%%' # adding percentagens\n        , labels=['recovered','non_recovered','deaths']\n        , shadow=True\n        , startangle=140)\nax1.set_title(\"US Cases Distribution\")\n\nax2.pie(Italy\n           , colors=['lime','orange','red']\n           , autopct='%1.1f%%' # adding percentagens\n           , labels=['recovered','non_recovered','deaths']\n           , shadow=True\n           , startangle=140)\nax2.set_title(\"Italy Cases Distribution\")\n\nax3.pie(Spain\n           , colors=['lime','orange','red']\n           , autopct='%1.1f%%' # adding percentagens\n           , labels=['recovered','non_recovered','deaths']\n           , shadow=True\n           , startangle=140)\nax3.set_title(\"Spain Cases Distribution\")\n\nax4.pie(Germany\n           , colors=['lime','orange','red']\n           , autopct='%1.1f%%' # adding percentagens\n           , labels=['recovered','non_recovered','deaths']\n           , shadow=True\n           , startangle=140)\nax4.set_title(\"Germany Cases Distribution\")\n\nfig.legend(['recovered','non_recovered','deaths']\n           , loc = \"upper right\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 2 \n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1)\n\nplt.show();","32c32123":"fig, axes = plt.subplots(\n                     ncols=2,\n                     nrows=2,\n                     figsize=(15, 15))\n\nax1, ax2, ax3, ax4 = axes.flatten()\n\n # here i use .value_counts() to count the frequency that each category occurs of dataset\nax1.pie(France\n        , colors=['lime','orange','red']\n        , autopct='%1.1f%%' # adding percentagens\n        , labels=['recovered','non_recovered','deaths']\n        , shadow=True\n        , startangle=140)\nax1.set_title(\"France Cases Distribution\")\n\nax2.pie(Iran\n           , colors=['lime','orange','red']\n           , autopct='%1.1f%%' # adding percentagens\n           , labels=['recovered','non_recovered','deaths']\n           , shadow=True\n           , startangle=140)\nax2.set_title(\"Iran Cases Distribution\")\n\nax3.pie(United_kingdom\n           , colors=['lime','orange','red']\n           , autopct='%1.1f%%' # adding percentagens\n           , labels=['recovered','non_recovered','deaths']\n           , shadow=True\n           , startangle=140)\nax3.set_title(\"United Kingdom Cases Distribution\")\n\nax4.pie(Iran\n           , colors=['lime','orange','red']\n           , autopct='%1.1f%%' # adding percentagens\n           , labels=['recovered','non_recovered','deaths']\n           , shadow=True\n           , startangle=140)\nax4.set_title(\"Iran Cases Distribution\")\n\nfig.legend(['recovered','non_recovered','deaths']\n           , loc = \"upper right\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 2 \n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1)\n\nplt.show();","b1c91689":"# creating a list with confirmed, recovered and deaths cases\nlist_of_tuples = list(zip(other_countries_confirmed, other_countries_recovered,other_countries_non_recovered, other_countries_deaths)) \n\n# creating a dataframe with this list to plot the chart\nother_countries_cases_growth = pd.DataFrame(list_of_tuples, index = other_countries_confirmed.index, columns = ['confirmed', 'recovered','non_recovered','deaths'])","26c23122":"# creating the plot\nother_countries_cases_growth.plot(kind='bar'\n                                  , figsize=(20,10)\n                                  , width=1\n                                  , color=['#4b8bbe','lime','orange','red']\n                                  , rot=2)\n\n# defyning title, labels, ticks and legend parameters\nplt.title('Growth of cases over the days in outside of China', size=30)\nplt.xlabel('Updates', size=20)\nplt.ylabel('Cases', size=20)\nplt.xticks(rotation=90, size=15)\nplt.yticks(size=15)\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 2 \n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","9693189d":"current_cases = confirmed\ncurrent_cases = current_cases[['Country\/Region',last_update]]\ncurrent_cases = current_cases.groupby('Country\/Region').sum().sort_values(by=last_update,ascending=False)\ncurrent_cases['recovered'] = recovered[['Country\/Region',last_update]].groupby('Country\/Region').sum().sort_values(by=last_update,ascending=False)\ncurrent_cases['deaths'] = deaths[['Country\/Region',last_update]].groupby('Country\/Region').sum().sort_values(by=last_update,ascending=False)\ncurrent_cases['non_recovered'] = current_cases[last_update]-current_cases['recovered']-current_cases['deaths']\ncurrent_cases = current_cases.rename(columns={last_update:'confirmed'\n                                              ,'recovered':'recovered'\n                                              ,'deaths':'deaths'\n                                              ,'non_recovered':'non_recovered'})\n\ncurrent_cases.style.background_gradient(cmap='Reds')","1cd87fc7":"#### Growth of cases over the days in other countries\n\nThe virus begins to appear in other countries on 1\/26\/20 and is spreading rapidly over the days. Confirmed cases are growing exponentially, fortunately the number of recovereds are growing more fast than deaths.\n\nThe pandemic situation around the world still worrisome,more than 60% of cases outside of China still not recovered and deaths are growing fast.","410d1fa2":"#### NOTE: I will update the kernel whenever the data set is updated - Last update 05-15-20\n\n***Please let me know what you think about this kernel and if it is useful and you can leave an upvote I would be very grateful! :) ***","e82eb295":"***Thank you very much to @wjholst for information about how to calculate non recovered cases and subsets***","c3d6f379":"### Dealing with missing values","6de9e2c9":"### Exploratory Data Analysis\n\n#### Total cases by state in China\nTo plot the number of cases in China first let's create 4 subsets with cases in China to confirmed, recovered, non recovered and death datasets, then let's join all this data into a new dataset to plot the cases by \"Province\/State\" in China","f3ce2eb4":"#### Mortality,Non_Recovered and Recovered Rates in % outside of China\n\nHere i'm using a simple approach for mortality, non_recovered and recovered rates, just recovered\/total_cases, let's see the Mortality, non_recovered and Recovered rates Outside of China.","48472ec7":"<img src=\"https:\/\/media1.tenor.com\/images\/ecaeb03b0d5d5ed52ef05daa91793299\/tenor.gif?itemid=16135207\">\n\n**Figure 2**: O M G, The Coronavirus!. Source: https:\/\/tenor.com\/view\/corona-virus-cough-golden-girls-sick-ill-gif-16135207","fc33af17":"#### Hubei Cases Distribution\nClearly Hubei have the higher case numbers, if we take a more detailed look into Hubei data with a pie chart we can see the same distribution above but with more detalies, 0.0% of the cases still with coronavirus and don't recovered yet, 6.2% of infected people had died and 93.7% has recovered.","cdda666b":"#### ***Thank you very much for read this kernel, if you think that this kernel was useful please give a upvote, i really appriciate that :)***","d1dd0bf0":"#### Cases Growth in China\n\nThe cases are controlled in China since 2\/18\/20 with confirmed cases stop growing exponentially and non_recovered falling fast, let's take a look in cases growth over the days.","17bb94dd":"#### Biggest countries in confirmed cases number\n\nIn last 15 days we have a GREAT explosion of confirmed cases around the wolrd, let's take a look into the top 10 countries: US, Italy, Spain, Germany, France, Iran, United Kingdom, Switzerland, Netherlands and South Korea","5b359f77":"Here we can see the exactly point where China control the Corona growth, Non recovered cases are falling since 2\/16\/20 , in the moment, China still have around 10000 unrecovered cases","ebee1193":"#### Cases Growth outside of China\n\nIn contrast to China, in other countries, confirmed cases only exploded around 3\/5\/20, while China controlled the growth of the virus, worldwide the virus was spreading strongly.","ef5d4954":"Confirmed cases stop growing exponentially around 2\/14\/20 and have been under control ever since, was more then 80000 confirmed cases in China until now.","32e8b85d":"Italy situation are the most worrisome, more than 84% of cases was not cured yet and the deaths are 10.8%","3f085686":"#### Current Total cases around the world","dfd67aee":"#### Mortality,Non_Recovered and Recovered Rates in % in China\n\nHere i'm using a simple approach for mortality, non_recovered and recovered rates, just recovered\/total_cases, let's see the Mortality, non_recovered and Recovered rates in China.","c34d8296":"# Coronavirus (Covid-19) Growth in 2019\/2020\n### Understanding coronavirus growth, distribution by country and state \/ region","87a88d47":"### Loading Required Libraries and Datasets","160ce77f":"#### Total cases in around the world by country except China\n\nWe already see the virus distribution and growth in China, but in other coutries? How coronavirus are growing and distributed?\n\nTo answer this question let's take all cases that are not in China and then take the sum of confirmed, recovered and death cases by country","3c70fdd0":"### Introduction\nThe Covid-19 is a contagious coronavirus that hailed from Wuhan, China. This new strain of virus has striked fear in many countries as cities are quarantined and hospitals are overcrowded. How coronavirus have grow in 2019\/2020 and what is his cases distribution in China and other countries are questions to be answered by this kernel.","7788b14b":"### How the cases are distributed in this countries?\n\nUS are leading in number of cases but still with almost all cases active, italy are the second in number of cases after China (that already controled the pandemic) and in this moment still with more then 80% of cases active and more then 10% of deaths."}}