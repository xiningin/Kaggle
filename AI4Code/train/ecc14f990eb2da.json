{"cell_type":{"48275d1f":"code","55af52f5":"code","c81ad87c":"code","2ff03e53":"code","14681239":"code","fc77720c":"code","ae7cb6c2":"code","e478b50f":"code","73de8167":"code","96cd64e8":"code","fd7ecc42":"code","3175de8c":"code","9d4856dc":"code","4b72262d":"markdown","f53133f2":"markdown","5ff1ed35":"markdown","c480a582":"markdown","f3991980":"markdown","78928e1c":"markdown","66ad1b38":"markdown","22167b3b":"markdown"},"source":{"48275d1f":"# Import libraries and set desired options\n%matplotlib inline\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nimport pickle\nimport numpy as np\nimport pandas as pd\nfrom scipy.sparse import csr_matrix\nfrom scipy.sparse import hstack\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LogisticRegression","55af52f5":"# Read the training and test data sets\ntrain_df = pd.read_csv('..\/input\/train_sessions.csv',\n                       index_col='session_id', parse_dates=['time1'])\ntest_df = pd.read_csv('..\/input\/test_sessions.csv',\n                      index_col='session_id', parse_dates=['time1'])\n\n# Sort the data by time\ntrain_df = train_df.sort_values(by='time1')\n\n# Look at the first rows of the training set\ntrain_df.head()","c81ad87c":"# Change site1, ..., site10 columns type to integer and fill NA-values with zeros\nsites = ['site%s' % i for i in range(1, 11)]\ntrain_df[sites] = train_df[sites].fillna(0).astype('int')\ntest_df[sites] = test_df[sites].fillna(0).astype('int')\n\n# Load websites dictionary\nwith open(r\"..\/input\/site_dic.pkl\", \"rb\") as input_file:\n    site_dict = pickle.load(input_file)\n\n# Create dataframe for the dictionary\nsites_dict = pd.DataFrame(list(site_dict.keys()), index=list(site_dict.values()), columns=['site'])\nprint(u'Websites total:', sites_dict.shape[0])\nsites_dict.head()","2ff03e53":"# Answer\nprint(test_df.shape, train_df.shape)","14681239":"# Our target variable\ny_train = train_df['target'].values\n\n# United dataframe of the initial data \nfull_df = pd.concat([train_df.drop('target', axis=1), test_df])\n\n# Index to split the training and test data sets\nidx_split = train_df.shape[0]","fc77720c":"# small\ntrain_df[sites].fillna(0).to_csv('train_sessions_text.txt', \n                                 sep=' ', index=None, header=None)\ntest_df[sites].fillna(0).to_csv('test_sessions_text.txt', \n                                sep=' ', index=None, header=None)","ae7cb6c2":"!head -3 train_sessions_text.txt","e478b50f":"%%time\ncv = CountVectorizer(ngram_range=(1, 3), max_features=50000)\nwith open('train_sessions_text.txt') as inp_train_file:\n    X_train = cv.fit_transform(inp_train_file)\nwith open('test_sessions_text.txt') as inp_test_file:\n    X_test = cv.transform(inp_test_file)\nprint(X_train.shape, X_test.shape)","73de8167":"def get_auc_lr_valid(X, y, C=1.0, seed=17, ratio = 0.9):\n    # Split the data into the training and validation sets\n    idx = int(round(X.shape[0] * ratio))\n    # Classifier training\n    lr = LogisticRegression(C=C, random_state=seed, solver='lbfgs', max_iter=500).fit(X[:idx, :], y[:idx])\n    # Prediction for validation set\n    y_pred = lr.predict_proba(X[idx:, :])[:, 1]\n    # Calculate the quality\n    score = roc_auc_score(y[idx:], y_pred)\n    \n    return score","96cd64e8":"X_train.shape, y_train.shape","fd7ecc42":"%%time\n# Calculate metric on the validation set\nprint(get_auc_lr_valid(X_train, y_train))","3175de8c":"# Function for writing predictions to a file\ndef write_to_submission_file(predicted_labels, out_file,\n                             target='target', index_label=\"session_id\"):\n    predicted_df = pd.DataFrame(predicted_labels,\n                                index = np.arange(1, predicted_labels.shape[0] + 1),\n                                columns=[target])\n    predicted_df.to_csv(out_file, index_label=index_label)","9d4856dc":"# Train the model on the whole training data set\n# Use random_state=17 for reproducibility\n# Parameter C=1 by default, but here we set it explicitly\nlr = LogisticRegression(C=1.0, random_state=17, solver='lbfgs', max_iter=500).fit(X_train, y_train)\n\n# Make a prediction for test data set\ny_test = lr.predict_proba(X_test)[:, 1]\n\n# Write it to the file which could be submitted\nwrite_to_submission_file(y_test, 'baseline_1.csv')","4b72262d":"Transform data into format which can be fed into `CountVectorizer`.","f53133f2":"### Training the first model\n\nSo, we have an algorithm and data for it. Let us build our first model, using [logistic regression](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LogisticRegression.html) implementation from ` Sklearn` with default parameters. We will use the first 90% of the data for training (the training data set is sorted by time), and the remaining 10% for validation. Let's write a simple function that returns the quality of the model and then train our first classifier:","5ff1ed35":"The first model demonstrated the quality  of 0.9133 on the validation set. Let's take it as the first baseline and starting point. To make a prediction on the test data set  we need to train the model again on the entire training data set (until this moment, our model used only part of the data for training), which will increase its generalizing ability:","c480a582":"The training data set contains the following features:\n\n- **site1** \u2013 id of the first visited website in the session\n- **time1** \u2013 visiting time for the first website in the session\n- ...\n- **site10** \u2013 id of the tenth visited website in the session\n- **time10** \u2013 visiting time for the tenth website in the session\n- **target** \u2013 target variable, possesses value of 1 for Alice's sessions, and 0 for the other users' sessions\n    \nUser sessions are chosen in the way they are not longer than half an hour or\/and contain more than ten websites. I.e. a session is considered as ended either if a user has visited ten websites or if a session has lasted over thirty minutes.\n\nThere are some empty values in the table, it means that some sessions contain less than ten websites. Replace empty values with 0 and change columns types to integer. Also load the websites dictionary and check how it looks like:","f3991980":"We will be solving the intruder detection problem analyzing his behavior on the Internet. It is a complicated and interesting problem combining the data analysis and behavioral psychology.\n\nFor example: Yandex solves the mailbox intruder detection problem based on the user's behavior patterns. In a nutshell, intruder's behaviour pattern might differ from the owner's one: \n- the breaker might not delete emails right after they are read, as the mailbox owner might do\n- the intruder might mark emails and even move the cursor differently\n- etc.\n\nSo the intruder could be detected and thrown out from the mailbox proposing the owner to be authentificated via SMS-code.\nThis pilot project is described in the Habrahabr article.\n\nSimilar things are being developed in Google Analytics and described in scientific researches. You can find more on this topic by searching \"Traversal Pattern Mining\" and \"Sequential Pattern Mining\".\n\nIn this competition we are going to solve a similar problem: our algorithm is supposed to analyze the sequence of websites consequently visited by a particular person and to predict whether this person is Alice or an intruder (someone else). As a metric we will use [ROC AUC](https:\/\/en.wikipedia.org\/wiki\/Receiver_operating_characteristic). We will reveal who Alice is at the end of the course.","78928e1c":"Fit `CountVectorizer` and trasfrom data with it.","66ad1b38":"###  Data Downloading and Transformation\nFirst, read the training and test sets. ","22167b3b":"For the very basic model, we will use only the visited websites in the session (but we will not take into account timestamp features). The point behind this data selection is: *Alice has her favorite sites, and the more often you see these sites in the session, the higher probability that this is an Alice's session, and vice versa.*\n\nLet us prepare the data, we will take only features `site1, site2, ... , site10` from the whole dataframe. Keep in mind that the missing values are replaced with zero. Here is how the first rows of the dataframe look like:"}}