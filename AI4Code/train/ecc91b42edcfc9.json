{"cell_type":{"07110486":"code","b3146590":"code","3596665b":"code","10312997":"code","a91e9a77":"code","5999be0f":"code","4e9566e5":"code","6b8cf9a4":"code","2b795938":"code","c3243da5":"code","8d49417d":"code","2115227e":"code","b08f1f5b":"code","8a4c9df9":"code","b2383857":"code","2f8964fd":"code","4b5153ab":"code","8bb05444":"code","850d0f64":"code","42694d1e":"code","378f05ed":"code","f073542a":"code","61c02768":"code","7c428ea4":"code","8bb94a3c":"code","dfa2adcb":"code","aa6bd856":"code","11d9871a":"code","294b88c2":"code","a5c68b3a":"code","bb8dbb16":"code","942d894a":"code","56c8faa9":"code","f7925497":"code","f0bc3e56":"code","7a35af42":"markdown","f95c85a7":"markdown","dc8b3133":"markdown","5788b3b9":"markdown"},"source":{"07110486":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b3146590":"#Set Options\npd.options.display.max_columns\npd.options.display.max_rows = 500","3596665b":"#Import Data\n_2010_2011_data =pd.read_excel(\"\/kaggle\/input\/uci-online-retail-ii-data-set\/online_retail_II.xlsx\",sheet_name= \"Year 2010-2011\" )\n_2009_2010_data =pd.read_excel(\"\/kaggle\/input\/uci-online-retail-ii-data-set\/online_retail_II.xlsx\",sheet_name= \"Year 2009-2010\" )","10312997":"#Get copy of dataFrame\n_2010_2011_df = _2010_2011_data.copy()\n_2009_2010_df = _2009_2010_data.copy()","a91e9a77":"def setTotalPrice(data):\n    #Add a column for total price to calculate monetary attritube\n    data[\"TotalPrice\"] = data[\"Quantity\"]*data[\"Price\"]","5999be0f":"setTotalPrice(_2010_2011_df)\nsetTotalPrice(_2009_2010_df)","4e9566e5":"_2010_2011_df.head()","6b8cf9a4":"_2009_2010_df","2b795938":"_2009_2010_df","c3243da5":"#Remove missing Values From CustomerID\n_2010_2011_df.dropna(subset= [\"Customer ID\"],inplace= True)\n#Remove zero negative quantity\ndeleteRows = _2010_2011_df[~_2010_2011_df['Quantity'] > 0].index\n_2010_2011_df.drop(deleteRows, axis=0,inplace=True)\n#Some rows start with C means refund so we will remove them\ndeleteRows =  _2010_2011_df[_2010_2011_df[\"Invoice\"].str.contains(\"C\", na=False)].index\n_2010_2011_df.drop(deleteRows, axis=0,inplace=True)\n#Remove POSTAGE\n#deleteRows =  _2010_2011_df[_2010_2011_df[\"Description\"].str.contains(\"POSTAGE\", na=False)].index\n#_2010_2011_df.drop(deleteRows, axis=0,inplace=True)","8d49417d":"#Remove missing Values From CustomerID\n_2009_2010_df.dropna(subset= [\"Customer ID\"],inplace= True)\n#Remove zero negative quantity\ndeleteRows = _2009_2010_df[~_2009_2010_df['Quantity'] > 0].index\n_2009_2010_df.drop(deleteRows, axis=0,inplace=True)\n#Some rows start with C means refund so we will remove them\ndeleteRows =  _2009_2010_df[_2009_2010_df[\"Invoice\"].str.contains(\"C\", na=False)].index\n_2009_2010_df.drop(deleteRows, axis=0,inplace=True)\n#Remove POSTAGE\n#deleteRows =  _2009_2010_df[_2009_2010_df[\"Description\"].str.contains(\"POSTAGE\", na=False)].index\n#_2009_2010_df.drop(deleteRows, axis=0,inplace=True)","2115227e":"#return RFM DataFrame\ndef CalculateRFM(data):\n    #Calculate recency\n    #Find out the first and last order dates in the data.\n    max_date = data['InvoiceDate'].max()\n    import datetime as dt\n    today_date = dt.datetime(max_date.year,max_date.month,max_date.day)\n    recency_df = data.groupby(\"Customer ID\").agg({'InvoiceDate': lambda x: (today_date - x.max()).days})\n    recency_df.rename(columns={\"InvoiceDate\":\"Recency\"}, inplace= True)\n    #calculate Frequency\n    temp_df =  data.groupby(['Customer ID','Invoice']).agg({'Invoice': \"count\"}).groupby(['Customer ID']).agg({\"Invoice\": \"count\"})\n    freq_df = temp_df.rename(columns={\"Invoice\": \"Frequency\"})\n    monetary_df=data.groupby(\"Customer ID\").agg({'TotalPrice': \"sum\"})\n    monetary_df.rename(columns={\"TotalPrice\": \"Monetary\"}, inplace=True)\n    rfm = pd.concat([recency_df,freq_df,monetary_df], axis = 1)\n    return rfm ","b08f1f5b":"_2010_2011_rfm = CalculateRFM(_2010_2011_df)\n_2009_2010_rfm = CalculateRFM(_2009_2010_df)","8a4c9df9":"_2010_2011_df.head()","b2383857":"#Set RFM Score\ndef setRFMScore(rfm):\n    # Get RFM scores for 3 attribute\n    rfm[\"RecencyScore\"] = pd.qcut(rfm['Recency'],5, labels=[5,4,3,2,1])\n    #if you calculate only transaction operations(unique invoice per customer) add rank(method=\"first\")\n    #if you sum all operations in per invoice no need to add rank method\n    rfm[\"FrequencyScore\"] = pd.qcut(rfm['Frequency'].rank(method=\"first\"),5, labels=[1,2,3,4,5])\n    rfm[\"MonetaryScore\"] = pd.qcut(rfm['Monetary'],5, labels=[1,2,3,4,5])\n    rfm[\"RFM_SCORE\"] = rfm[\"RecencyScore\"].astype(str) +rfm[\"FrequencyScore\"].astype(str)+rfm[\"MonetaryScore\"].astype(str) \n    ","2f8964fd":"setRFMScore(_2010_2011_rfm)\nsetRFMScore(_2009_2010_rfm)","4b5153ab":"def setSegment(rfm):\n    seg_map = {\n    r'[1-2][1-2]': 'Hibernating',\n    r'[1-2][3-4]': 'At Risk',\n    r'[1-2]5': 'Can\\'t Loose',\n    r'3[1-2]': 'About to Sleep',\n    r'33': 'Need Attention',\n    r'[3-4][4-5]': 'Loyal Customers',\n    r'41': 'Promising',\n    r'51': 'New Customers',\n    r'[4-5][2-3]': 'Potential Loyalists',\n    r'5[4-5]': 'Champions'}\n    rfm[\"Segment\"] = rfm[\"RecencyScore\"].astype(str) + rfm[\"FrequencyScore\"].astype(str)\n    rfm[\"Segment\"] = rfm[\"Segment\"].replace(seg_map,regex=True)\n    \n    ","8bb05444":"setSegment(_2010_2011_rfm)\nsetSegment(_2009_2010_rfm)","850d0f64":"_2009_2010_rfm","42694d1e":"_2010_2011_rfm","378f05ed":"new_2009_2010_rfm = _2009_2010_rfm.copy()\nnew_2010_2011_rfm = _2010_2011_rfm.copy()","f073542a":"# count the number of customers in each segment\n\n\ndef displayBar(data):\n    segments_counts = data.value_counts().sort_values(ascending=True)\n    fig, ax = plt.subplots()\n\n    bars = ax.barh(range(len(segments_counts)),\n              segments_counts,\n              color='silver')\n    ax.set_frame_on(False)\n    ax.tick_params(left=False,\n                   bottom=False,\n                   labelbottom=False)\n    ax.set_yticks(range(len(segments_counts)))\n    ax.set_yticklabels(segments_counts.index)\n    \n    for i, bar in enumerate(bars):\n            value = bar.get_width()\n            if segments_counts.index[i] in ['Champions', 'Loyal Customers']:\n                bar.set_color('firebrick')\n            ax.text(value,\n                    bar.get_y() + bar.get_height()\/2,\n                    '{:,} ({:}%)'.format(int(value),\n                                       int(value*100\/segments_counts.sum())),\n                    va='center',\n                    ha='left',\n                    fontsize=14,\n                      weight='bold'\n                   )\n    \n    plt.show()","61c02768":"displayBar(new_2009_2010_rfm['Segment'])","7c428ea4":"displayBar(new_2010_2011_rfm['Segment'])\n\n\n","8bb94a3c":"new_2009_2010_rfm.rename(columns={\"Segment\": \"Segment_2009_2010\"}, inplace=True)\nnew_2010_2011_rfm.rename(columns={\"Segment\": \"Segment_2010_2011\"}, inplace=True)\n","dfa2adcb":"new_2009_2010_rfm","aa6bd856":" len(new_2009_2010_rfm[new_2009_2010_rfm[\"Segment_2009_2010\"] == \"Champions\"].index)","11d9871a":" len(new_2010_2011_rfm[new_2010_2011_rfm[\"Segment_2010_2011\"] == \"About to Sleep\"].index)","294b88c2":"new_2010_2011_rfm","a5c68b3a":"new_2010_2011_rfm.loc[:, [\"Segment_2010_2011\"]] ","bb8dbb16":"new_2009_2010_rfm.loc[:, [\"Segment_2009_2010\"]] ","942d894a":"merge1 = new_2009_2010_rfm.loc[:, [\"Segment_2009_2010\"]]\nmerge2 = new_2010_2011_rfm.loc[:, [\"Segment_2010_2011\"]]\n\nmerge1.merge(merge2, how=\"left\",on =\"Customer ID\").head(100)","56c8faa9":"pd.crosstab(index=merge1[\"Segment_2009_2010\"], columns= merge2[\"Segment_2010_2011\"])","f7925497":"ids =new_2009_2010_rfm[new_2009_2010_rfm[\"Segment_2009_2010\"] == \"Champions\"].index\ndisplayBar(new_2010_2011_rfm[new_2010_2011_rfm.index.get_level_values('Customer ID').isin(ids)].loc[:,\"Segment_2010_2011\"])","f0bc3e56":"ids =new_2009_2010_rfm[new_2009_2010_rfm[\"Segment_2009_2010\"] == \"Need Attention\"].index\ndisplayBar(new_2010_2011_rfm[new_2010_2011_rfm.index.get_level_values('Customer ID').isin(ids)].loc[:,\"Segment_2010_2011\"])","7a35af42":"## Data Visualiation","f95c85a7":"# Definition\n\n**RFM Analysis** is a marketing technique used to determine quantitatively which customers are the best ones.\n\n\nCustomers is rated on this three parameters **from 1 to 5**. 5 for most likely to purchase 1 for least  likely to purchase\n\n![rfm-segments.png](attachment:rfm-segments.png)\n\n##  RFM Expansion\n   *  Recency - Innovation (R) - Time since last sale purchase\n   *  Frequency - Frequency (F) - Total number of purchases\n   *  Monetary - Monetary (M) - Monetary total of all purchases\n\n","dc8b3133":"## RFM Customer Segmentation","5788b3b9":"## CHECK MISSING VALUE "}}