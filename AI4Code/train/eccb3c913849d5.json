{"cell_type":{"dc781527":"code","a5f76331":"code","a6265ff8":"code","f7098cb0":"code","254f7c03":"code","d66ffa0e":"code","632035a7":"code","2efa7354":"code","e567e2b4":"code","0fcf1278":"code","4f478b04":"code","fcac63fb":"code","49a443fb":"code","f69a9088":"code","2335167b":"markdown","e6c45efd":"markdown","5950c32e":"markdown","58a98c24":"markdown","f1fed430":"markdown","d6e4e6cc":"markdown","c3268fca":"markdown","d8de70d4":"markdown","d1741729":"markdown","59d5cd26":"markdown","4775a4ad":"markdown","1be9f69a":"markdown","84fce0bd":"markdown","2f71fbcb":"markdown","36e5431d":"markdown"},"source":{"dc781527":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a5f76331":"train_data_path = '..\/input\/house-prices-data\/train.csv'\ntest_data_path = '..\/input\/house-prices-data\/test.csv'\ntrain = pd.read_csv(train_data_path)\ntest = pd.read_csv(test_data_path)\n# for making train and test equal delete the last row:\ntrain = train.drop([1459])","a6265ff8":"train.Utilities.value_counts()","f7098cb0":"train.Alley.value_counts()","254f7c03":"train.Street.value_counts()","d66ffa0e":"train.LotFrontage.value_counts()","632035a7":"sum(train.LotFrontage.isna())","2efa7354":"train.Neighborhood.value_counts()","e567e2b4":"col_del = ['Utilities','Alley','Street','PavedDrive','SaleType',\n           'Condition1','Condition2','RoofMatl','MasVnrType',\n           'BsmtFinSF1','BsmtFinSF2','Heating','CentralAir',\n           'Electrical','LowQualFinSF','BsmtHalfBath','KitchenAbvGr',\n           'Functional','GarageQual','GarageCond','EnclosedPorch',\n           'ScreenPorch','PoolArea','PoolQC','Fence','MiscFeature','MiscVal']\n\n# Deleting bad distribution columns\ntrain = train.drop(columns = col_del)\ntest = test.drop(columns = col_del)\n","0fcf1278":"import category_encoders as ce\n\n\ncat_features = ['MSZoning','ExterQual','LotShape','LandContour','LotConfig',\n                   'LandSlope','BldgType','HouseStyle','RoofStyle',\n                    'ExterCond','Foundation','BsmtQual','BsmtCond','BsmtExposure',\n                    'BsmtFinType1','BsmtFinType2','HeatingQC',\n                    'KitchenQual','FireplaceQu','GarageType','GarageFinish', \n                    'SaleCondition','Exterior1st','Exterior2nd']\n\n\n# Create the encoder\n\ntarget_enc = ce.TargetEncoder(cols=cat_features)\ntarget_enc.fit(train[cat_features], train['SalePrice'])\n# Transform the features,and replace with Neighborhood in dataframe\ntrain_TE = target_enc.transform(train[cat_features])\ntest_TE =  target_enc.transform(test[cat_features])\n                                \ntrain_TE = train_TE.fillna(0)\ntest_TE = test_TE.fillna(0)","4f478b04":"target=train.SalePrice\ntrain=train.drop(columns = ['SalePrice'])\n\ntarget","fcac63fb":"train_TE.to_csv('.\/train_v2.csv')\ntest_TE.to_csv('.\/test_v2.csv')","49a443fb":"from sklearn.linear_model import LinearRegression\n# MSE is a modlue to calculate how good our model is:\nfrom sklearn.metrics import mean_squared_error as MSE","f69a9088":"model = LinearRegression(fit_intercept=True,normalize=False)\nmodel.fit(train_TE,target)\nresult = model.predict(test_TE)\nsample = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsample.SalePrice = result\nsample.to_csv('.\/sample_1',index=False)\nerror = MSE(result,target)\nerror # :||||||","2335167b":"This column seems to have a goog distribution but:","e6c45efd":"as you see most of the **Alley** values is null and would misguide our prediction so drop this column too","5950c32e":"Creating model and initializign it with train and test data:","58a98c24":"importing Linear Reggression module:","f1fed430":"then we write the new train and test dataframe in **train_v2.csv** and **test_v2.csv**:","d6e4e6cc":"Then we go for **Alley** column\n\nAlley: Type of alley access to property\n\n       Grvl\tGravel\n       Pave\tPaved\n       NA \tNo alley access","c3268fca":"as you see this is a bad data distribution (like Utilities column) and would misguide our prediction so we drop this column:","d8de70d4":"# Preprocessing categorical variables\n\n\nIdentifies the general zoning classification of the sale.\n\t\t\n       A\tAgriculture\n       C\tCommercial\n       FV\tFloating Village Residential\n       I\tIndustrial\n       RH\tResidential High Density\n       RL\tResidential Low Density\n       RP\tResidential Low Density Park \n       RM\tResidential Medium Density\n\nfor categorical features I prefer Target Encoding:\n\nTarget encoding replaces a categorical value with the average value of the target for that value of the feature. For example, given the zoning classification value \"RL\", you'd calculate the average \"SalePrice\" for all the rows with zoning classification value == 'RL'. This is often blended with the target probability over the entire dataset to reduce the variance of values with few occurences.\n\nThis technique uses the targets to create new features. So including the validation or test data in the target encodings would be a form of target leakage. Instead, you should learn the target encodings from the training dataset only and apply it.","d1741729":"There is **259** Null values in **LotFrontage** column\nwe can replace Null values with any value as you wish with calling **fillna** method on a column","59d5cd26":"Then we go for **Neighborhoood** column:\n\nNeighborhood: Physical locations within Ames city limits\n\n       Blmngtn\tBloomington Heights\n       Blueste\tBluestem\n       BrDale\tBriardale\n       BrkSide\tBrookside\n       ClearCr\tClear Creek\n       CollgCr\tCollege Creek\n       Crawfor\tCrawford\n       Edwards\tEdwards\n       Gilbert\tGilbert\n       IDOTRR\tIowa DOT and Rail Road\n       MeadowV\tMeadow Village\n       Mitchel\tMitchell\n       Names\tNorth Ames\n       NoRidge\tNorthridge\n       NPkVill\tNorthpark Villa\n       NridgHt\tNorthridge Heights\n       NWAmes\tNorthwest Ames\n       OldTown\tOld Town\n       SWISU\tSouth & West of Iowa State University\n       Sawyer\tSawyer\n       SawyerW\tSawyer West\n       Somerst\tSomerset\n       StoneBr\tStone Brook\n       Timber\tTimberland\n       Veenker\tVeenker","4775a4ad":"Then we go for **Street** column\n\nStreet: Type of road access to property\n\n       Grvl\tGravel\t\n       Pave\tPaved","1be9f69a":"Loading dataset:","84fce0bd":"Then we go for **LotFrontage** column\n\nLotFrontage: Linear feet of street connected to property","2f71fbcb":"Then we go for **Utilities** column\n\nUtilities: Type of utilities available\n\t\t\n       AllPub\tAll public Utilities (E,G,W,& S)\t\n       NoSewr\tElectricity, Gas, and Water (Septic Tank)\n       NoSeWa\tElectricity and Gas Only\n       ELO\tElectricity only","36e5431d":"This column seems to have a good distribution but there is **24** labels and its hard to map\nAs we saw in **MSZoning**, we would preprocess **Neighborhood** with Target Encoding:"}}