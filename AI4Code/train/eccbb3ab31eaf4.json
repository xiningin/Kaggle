{"cell_type":{"fe9cda04":"code","2bc958cf":"code","70577619":"code","65e3c6b4":"code","9511b5e6":"code","6bbb5959":"code","fe27bcda":"code","8e87776f":"code","ed108bec":"code","b49e1746":"code","7d9cdffd":"code","82e77ac2":"code","7ade9ec5":"code","0fb7e17f":"code","2e59cf2c":"code","681966fc":"code","e48de82a":"code","30f53ce5":"code","3b064a83":"code","288912cf":"code","f9f3e429":"code","fb74f9ba":"markdown","1ec28c13":"markdown","3de0fdd5":"markdown","6720d691":"markdown","8ed0bdfa":"markdown","dbc2c4ad":"markdown","bb5e6cbb":"markdown","cf0ac9ac":"markdown","914272bb":"markdown","e33fa3a2":"markdown","5cc10fa2":"markdown","2f3f4bca":"markdown","f02f7487":"markdown","99fd85c9":"markdown","bb3c3e6d":"markdown"},"source":{"fe9cda04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2bc958cf":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport time \n\nimport matplotlib.pyplot as plt\n\nfrom keras import Sequential\nfrom keras.layers import Dense, Dropout, InputLayer, Lambda, Input, Flatten\nfrom keras.models import Sequential\nfrom keras.constraints import maxnorm\nfrom keras.optimizers import SGD\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom keras.preprocessing.image import load_img, img_to_array\n\nfrom sklearn.model_selection import train_test_split","70577619":"labels_di = pd.read_csv('\/kaggle\/input\/dog-breed-identification\/labels.csv')\nsamples = pd.read_csv('\/kaggle\/input\/dog-breed-identification\/sample_submission.csv')\n\nprint('Num of images in train dataset: {}'.format(len(labels_di)))\nprint('Num of images in test dataset: {}'.format(len(samples)))","65e3c6b4":"def images_to_array(directory, label_dataframe, target_size = (331, 331, 3)):\n    images = np.zeros([len(label_dataframe), target_size[0], target_size[1], target_size[2]], dtype=np.uint8)\n    img = ''\n    for ix, image_name in enumerate(label_dataframe['id'].values):\n        img_dir = os.path.join(directory, image_name + '.jpg')\n        img = load_img(img_dir, target_size = target_size)\n        images[ix] = img_to_array(img)\n    del img\n    label_dict = dict(enumerate(label_dataframe['breed'].unique()))\n    return images, label_dict","9511b5e6":"train_images, labels = images_to_array('\/kaggle\/input\/dog-breed-identification\/train', labels_di[:])","6bbb5959":"plt.figure(figsize = (10, 10))\nfor ix, image in enumerate(train_images[:8]):\n    plt.subplot(2, 4, ix + 1)\n    plt.imshow(image \/ 255.0)\n    plt.xticks([])\n    plt.yticks([]) ","fe27bcda":"def get_feature(model_name, preprocess_input, images, target_size = (331,331,3)):\n    base_model = model_name(input_shape = target_size, include_top=False, pooling = 'avg')\n\n    model = Sequential()\n    model.add(InputLayer(input_shape = target_size))\n    model.add(Lambda(preprocess_input))\n    model.add(base_model)\n\n    feature = model.predict(images)\n    \n    print('feature-map shape: {}'.format(feature.shape))\n    return feature","8e87776f":"from keras.applications.inception_resnet_v2 import InceptionResNetV2, preprocess_input\n\nresnet_preprocess = preprocess_input\nresnet_feature = get_feature(InceptionResNetV2, resnet_preprocess, train_images)","ed108bec":"from keras.applications.nasnet import NASNetLarge, preprocess_input\nnasnet_preprocessor = preprocess_input\nnasnet_features = get_feature(NASNetLarge, nasnet_preprocessor, train_images)","b49e1746":"final_features = np.concatenate([nasnet_features, resnet_feature], axis = 1)\nprint('final features shape: {}'.format(final_features.shape))\ndel train_images, nasnet_features, resnet_feature","7d9cdffd":"class_to_index = dict({labels[ix]:ix for ix in labels.keys()})\nindex_to_class = labels","82e77ac2":"labels = labels_di['breed'].map(class_to_index)","7ade9ec5":"def create_model(features_shape = 1024):\n    model = Sequential()\n    model.add(InputLayer(input_shape = (features_shape, )))\n    #model.add(Dense(4096, activation = 'relu'))\n    model.add(Dropout(0.8))\n    model.add(Dense(len(class_to_index), activation = 'softmax'))\n    \n    model.compile(loss = 'sparse_categorical_crossentropy', optimizer ='Adam', metrics = ['accuracy'])\n    return model\n","0fb7e17f":"model = create_model(final_features.shape[1])\nmodel.summary()","2e59cf2c":"model.fit(final_features, labels, epochs = 64, validation_split = 0.1)","681966fc":"def images_to_array(directory, label_dataframe, target_size = (331, 331,3)):\n    images = np.zeros([len(label_dataframe), target_size[0], target_size[1], target_size[2]], dtype=np.uint8)\n    img = ''\n    for ix, image_name in enumerate(label_dataframe['id'].values):\n        img_dir = os.path.join(directory, image_name + '.jpg')\n        img = load_img(img_dir, target_size = target_size)\n        images[ix] = img_to_array(img)\n    del img\n    return images","e48de82a":"test_images = images_to_array('\/kaggle\/input\/dog-breed-identification\/test', samples)","30f53ce5":"resnet_feature = get_feature(InceptionResNetV2, resnet_preprocess, test_images)\nnasnet_features = get_feature(NASNetLarge, nasnet_preprocessor, test_images)","3b064a83":"final_features = np.concatenate([nasnet_features, resnet_feature], axis = 1)\nprint('final features shape: {}'.format(final_features.shape))","288912cf":"prediction = model.predict(final_features)\nsubmission = pd.DataFrame({'id':samples.id})\nprediction = pd.DataFrame(prediction)\nprediction.columns = class_to_index.keys()","f9f3e429":"submission = pd.concat([submission, prediction], axis = 1)\nsubmission.to_csv('submission.csv', index = False)","fb74f9ba":"\u89c4\u683c\u5316\u8bad\u7ec3\u96c6\u6570\u636e","1ec28c13":"\u5c06\u6d4b\u8bd5\u56fe\u7247\u8f6c\u6362\u4e3a\u56fa\u5b9a\u5f62\u72b6","3de0fdd5":"\u67e5\u770b\u524d\u516b\u5f20\u56fe\u7247","6720d691":"\u8054\u5408\u4e24\u4e2a\u6a21\u578b\u6765\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b","8ed0bdfa":"\u5b9a\u4e49NASNetLarge\u6a21\u578b","dbc2c4ad":"\u5b9a\u4e49ResNetV2\u6a21\u578b","bb5e6cbb":"\u8bfb\u53d6\u6570\u636e\u96c6\u6807\u7b7e\u548c\u6d4b\u8bd5\u96c6\u6837\u4f8b","cf0ac9ac":"\u5bf9\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3","914272bb":"\u8fdb\u884c\u9884\u6d4b","e33fa3a2":"\u5b9a\u4e49\u6a21\u578b","5cc10fa2":"\u5b9a\u4e49\u9884\u6d4b\u6a21\u578b","2f3f4bca":"\u89c4\u683c\u5316\u56fe\u50cf\u6570\u636e\u96c6\uff0c\u8fd4\u56de\u56fe\u50cf\u6570\u636e\u96c6\u4e0e\u5bf9\u5e94\u7684\u6807\u7b7e","f02f7487":"\u5c06\u6807\u7b7e\u8f6c\u6362\u4e3a\u5b57\u5178\u7c7b\u578b","99fd85c9":"\u67e5\u770b\u6a21\u578b","bb3c3e6d":"\u5c06\u7ed3\u679c\u8fdb\u884c\u4fdd\u5b58"}}