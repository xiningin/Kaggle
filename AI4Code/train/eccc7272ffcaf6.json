{"cell_type":{"6f39a9c4":"code","66074817":"code","6d856ff0":"code","e7af2919":"code","23192180":"code","ff8bf229":"code","7be4df69":"code","d921c186":"code","4af90ba8":"code","15ace78c":"code","bbeeaa3d":"code","913e0a05":"code","e5271722":"code","d122fc4c":"code","e81ccd0b":"code","2a9576c2":"code","5ea046e7":"code","18d20adc":"code","acb32fbc":"code","0e80a40f":"code","9b1d43d6":"code","afd34faa":"markdown","7080136f":"markdown","7fa8097f":"markdown","3b57a1f8":"markdown","c784abc6":"markdown","dfad1d6b":"markdown","2770eff8":"markdown","3ad0faa0":"markdown","c4694bdf":"markdown","b6b3da6b":"markdown","f0cb109a":"markdown","7f598957":"markdown","f5777954":"markdown","ad6fa6fd":"markdown"},"source":{"6f39a9c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","66074817":"%%capture cell_output\n\n# unzipping train.zip \n!unzip \"..\/input\/dogs-vs-cats\/train.zip\"\n\n#rename train folder\nimport os\n\nsrc_train = os.path.join(os.getcwd(), 'src_train')\n\nos.rename(os.path.join(os.getcwd(), 'train'), src_train)","6d856ff0":"%%capture cell_output\n\n# unzipping test1.zip \n!unzip \"..\/input\/dogs-vs-cats\/test1.zip\"\n\ntest_dir = os.path.join(os.getcwd(), 'test1')","e7af2919":"print('# of files in train folder: ', len(os.listdir(src_train)))\nprint('# of files in test folder: ', len(os.listdir(test_dir)))","23192180":"#help function to display images in a grid\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing import image\n\ndef display_images_grid(images, img_folder, has_class_label=False, row_col_ind=(4, 4, 0)):\n    #rows, cols, i = 4, 4, 0\n    rows, cols, i = row_col_ind\n    \n    fig = plt.figure(figsize=(12, 12))\n\n    for fname in images [: rows * cols]:\n        plt.subplot(rows, cols,i+1)\n        plt.title(fname)\n        plt.xticks([]), plt.yticks([])\n        plt.tight_layout()\n        \n        if has_class_label:\n            fname = fname.split('\/')[0].strip()\n            \n        img = image.load_img(os.path.join(img_folder, fname), target_size=(150, 150))\n        plt.imshow(img)\n        i += 1\n        \n    return plt","ff8bf229":"import random\n\nrandom.seed(1000)\n\n#view 8 random images from the source training folder\nplt = display_images_grid(images=random.sample(os.listdir(src_train), 8), img_folder=src_train)\n\nplt.show()","7be4df69":"#training folders\ntrain_dir = os.path.join(os.getcwd(), \"train\")\nif not os.path.isdir(train_dir):\n    os.mkdir(train_dir)\n\ntrain_cats = os.path.join(train_dir, \"cats\")\nif not os.path.isdir(train_cats):\n    os.mkdir(train_cats)\n\ntrain_dogs = os.path.join(train_dir, \"dogs\")\nif not os.path.isdir(train_dogs):\n    os.mkdir(train_dogs)\n\n#validation folders   \nvalidation_dir = os.path.join(os.getcwd(), \"validation\")\nif not os.path.isdir(validation_dir):\n    os.mkdir(validation_dir)\n\nval_cats = os.path.join(validation_dir, \"cats\")\nif not os.path.isdir(val_cats):\n    os.mkdir(val_cats)\n\nval_dogs = os.path.join(validation_dir, \"dogs\")\nif not os.path.isdir(val_dogs):\n    os.mkdir(val_dogs)\n\n#hold_out folder\nhold_out = os.path.join(os.getcwd(), \"hold_out\")\nif not os.path.isdir(hold_out):\n    os.mkdir(hold_out)","d921c186":"import re\n\nsrc_trn_files = os.listdir(src_train)\n\n#list of file names with cat images from train dir\ncat_files = [src_trn_files[i] for i, x in enumerate(src_trn_files) if re.match(r'^cat', x)]\n\n#list of file names with dog images from train dir\ndog_files = [src_trn_files[i] for i, x in enumerate(src_trn_files) if re.match(r'^dog', x)]\n\n#random sample 2100 cats image file names\ncat_files = random.sample(cat_files, 2100)\n\n#random sample 2100 dogs image file names\ndog_files = random.sample(dog_files, 2100)\n\nimport shutil\n\n#copy cats images to train_cats folder\nfor fname in cat_files[:1500]:\n    src = os.path.join(src_train, fname)\n    dst = os.path.join(train_cats, fname)\n    shutil.copyfile(src, dst)\n    \n#copy cats images to val_cats folder\nfor fname in cat_files[1500:2000]:\n    src = os.path.join(src_train, fname)\n    dst = os.path.join(val_cats, fname)\n    shutil.copyfile(src, dst)\n\n#copy dog images to train_dogs folder\nfor fname in dog_files[:1500]:\n    src = os.path.join(src_train, fname)\n    dst = os.path.join(train_dogs, fname)\n    shutil.copyfile(src, dst)\n\n#copy dogs images to val_dogs folder\nfor fname in dog_files[1500:2000]:\n    src = os.path.join(src_train, fname)\n    dst = os.path.join(val_dogs, fname)\n    shutil.copyfile(src, dst)\n    \n#copy dogs & cats images to hold_out folder\nfor fname in cat_files[2000:] + dog_files[2000:] :\n    src = os.path.join(src_train, fname)\n    dst = os.path.join(hold_out, fname)\n    shutil.copyfile(src, dst)","4af90ba8":"#define data augmentation on training data\nimport numpy as np\nfrom keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,\n                                   rotation_range=40,\n                                   width_shift_range=0.2,\n                                   height_shift_range=0.2,\n                                   shear_range=0.2,\n                                   zoom_range=0.2,\n                                   horizontal_flip=True,\n                                   fill_mode='nearest')\n\n\nval_datagen = ImageDataGenerator(rescale=1.\/255)","15ace78c":"#create data generator\ntrain_generator = train_datagen.flow_from_directory(train_dir,\n                                                    target_size=(150, 150),\n                                                    batch_size=20,\n                                                    class_mode='binary')\n\nvalidation_generator = val_datagen.flow_from_directory(validation_dir,\n                                                        target_size=(150, 150),\n                                                        batch_size=20,\n                                                        class_mode='binary')","bbeeaa3d":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.applications import VGG16\n\nconv_base = VGG16(weights='imagenet',\n                 include_top=False,\n                 input_shape=(150, 150, 3))\n\n#freeze the conv_base - so that weights are not changed during training\nconv_base.trainable = False","913e0a05":"#build model using frozen conv_base and adding a classifier layer\nfrom tensorflow.keras import optimizers\n\nmodel = keras.Sequential()\n\nmodel.add(conv_base)\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(256, activation=\"relu\", input_dim=4 * 4 * 512))\nmodel.add(layers.Dense(1, activation=\"sigmoid\"))\n\n#compile the model\nmodel.compile(loss='binary_crossentropy',\n             optimizer=optimizers.RMSprop(lr=2e-5),\n             metrics=['acc'])\n\n#train the model\nhistory = model.fit(train_generator,\n                             steps_per_epoch=100,\n                             epochs=30,\n                             validation_data=validation_generator,\n                             validation_steps=50)","e5271722":"#display loss & accuracy curves of the model\nimport matplotlib.pyplot as plt\n\nacc = history.history['acc']\nval_acc = history.history['val_acc']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\n\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\n\nplt.figure()\n\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()","d122fc4c":"#function to convert images in folder to tensors\ndef convert_imgs_to_tensors(img_folder):\n  # dimensions of images\n  img_width, img_height = 150, 150\n\n  # load all images into a list\n  images = []\n\n  for img in os.listdir(img_folder):\n    img = os.path.join(img_folder, img)\n    img = image.load_img(img, target_size=(img_width, img_height))\n    img = image.img_to_array(img)\n    img = np.expand_dims(img, axis=0)\n    img \/= 255.\n    images.append(img)\n\n  # stack up images list to pass for model\n  images = np.vstack(images)\n\n  return images","e81ccd0b":"#convert images in hold out to tensors\nimages = convert_imgs_to_tensors(hold_out)\n\n#make predictions\npredictions = [int(round(p[0])) for p in model.predict(images, batch_size=10)]","2a9576c2":"#decode the predictions\nlabels = (train_generator.class_indices)\n\n#switch key and values\nreversed_dict = dict(map(reversed, labels.items()))\n\n#get the predicted labels\npredicted_labels = [reversed_dict[v1][:3] for k, v1 in enumerate(predictions)]","5ea046e7":"#store predictions in pandas dataframe\nimport pandas as pd\n\ndf = pd.DataFrame({'filename': os.listdir(hold_out),\n                             'predicted_label': predicted_labels})\n\ndf['Correct_pred'] = df['predicted_label'].eq(df['filename'].str[:3]).astype(int)\ndf['fname_pred_label'] = df['filename'] +  ' \/ Pred. label: ' + df['predicted_label']\ndf","18d20adc":"#list of misclassified images from hold out set\nmis_class_img = df[df['Correct_pred'] == 0]['fname_pred_label'].head(12).to_list()\n\n#display the 12 images and their labels in grid\nplt = display_images_grid(images = mis_class_img, img_folder=hold_out, has_class_label=True)\n\nplt.show()","acb32fbc":"#convert image to tensors\nimages = convert_imgs_to_tensors(test_dir)\n\n#make predictions\npredictions = [int(round(p[0])) for p in model.predict(images, batch_size=10)]\n\n#get the label\npredicted_labels = [reversed_dict[v1][:3] for k, v1 in enumerate(predictions)]","0e80a40f":"#store the predictions in dataframe\ndf = pd.DataFrame({'filename': os.listdir(test_dir), 'label': predictions,\n                             'predicted_label': predicted_labels})\n\n#extract id from file name for kaggle submission\ndf['id'] = df['filename'].str.split('.').str[0]\n\n#column to store file name and prediction\ndf['fname_pred_label'] = df['filename'] +  ' \/ Pred. label: ' + df['predicted_label']\n\n#subset columns required for kaggle submission\ndf0 = df[['id', 'label']]\n\n#export to csv file\ndf0.to_csv('submission.csv', index=False)\ndf0","9b1d43d6":"#get 12 random images from misclassified set\nimg_preds =  random.sample(df['fname_pred_label'].to_list(), 12)\n\n#display the 12 random images and their labels in grid\nplt = display_images_grid(images = img_preds, img_folder=test_dir, has_class_label=True)\n\nplt.show()","afd34faa":"2. Data preparation\n\nTransfer learning will be used in this demo by using a pre-trained convnet. The convolutional base of the model will be frozen so that its weights are not modified when training the classifier for the task of identify an image of a cat or dog. This will be done on a subset of 4,200 images (3000 training, 1000 validation and 200 holdout) with an even distribution of each class in the set.\n\nThe code below creates the 3 folder and their sub-folders.","7080136f":"3. Building and training the model\n\nTo build the model, first a pre-trained model was downloaded from keras. Below code downloads the pre-trained model and freezes the convolutional base","7fa8097f":"Below code runs the model on the test images and store the result in a format ready for submission to the Kaggle competition.","3b57a1f8":"Code below copies the a random sample of images from the training folder to respective folder.","c784abc6":"Below code run the model on the hold out set.","dfad1d6b":"Below code creates data generators for train and validation. To help avoid overfitting, data augmentation is applied to the training generator.","2770eff8":"Below code, displays first 12 images that were misclassified from the hold out set.","3ad0faa0":"# Testing model on hold out set","c4694bdf":"Below code build a model and trains the model end -to -end with a frozen convolutional bas","b6b3da6b":"Below code displays 8 random images from the training folder.","f0cb109a":"Display 12 random images and their predictions from the test set","7f598957":"Below code plots the accuracy and loss of the model on training and validation sets.","f5777954":"1. Exploratory Data Analysis\n\nThere are 25,000 and 12,500 files with images of cats and dogs in the training and testing folders as specified by the kaggle competition description.","ad6fa6fd":"# Run model on test images"}}