{"cell_type":{"45097101":"code","e30e749c":"code","9b7441ba":"code","6bc516fe":"code","8b364a18":"code","92bddb8e":"code","d1ac3d45":"code","0c604b2c":"code","1b60827c":"code","c42ebf01":"code","124b1bc8":"code","8fe150d9":"code","7ce9abee":"code","a6b27844":"code","98b8f0a7":"code","7f686541":"code","c0f692e3":"code","7e3ef546":"code","5619d77d":"code","1f48940a":"code","aacc547c":"code","4d01e689":"code","16fdab63":"code","49fad31e":"code","005bb5e2":"code","6e9186a8":"code","9c585294":"code","e817a91c":"code","1cb5fe03":"code","69c9e798":"code","3cd533a1":"code","b3a4e5f8":"code","f7e4735e":"code","b0549c14":"code","b02832dc":"code","3c2c6b3a":"code","c28414a4":"code","76b013b6":"markdown","d46ad34f":"markdown","b07b7584":"markdown","b6e54c4a":"markdown","0f33ff98":"markdown","af7bdc00":"markdown","6732a7e0":"markdown","457d64ac":"markdown","0c0f9fdc":"markdown","fa7abce0":"markdown","838d1156":"markdown","fc7fec6d":"markdown","2fc2af4e":"markdown","e96f4ebb":"markdown","353ea2dc":"markdown","4d7e2469":"markdown","2d5c6cd5":"markdown","10f4fda4":"markdown","2b1a0adb":"markdown","83d8145d":"markdown","2c07e9f4":"markdown","9845f5a6":"markdown","a9ea5960":"markdown","7eaa359b":"markdown","b5dd38a5":"markdown","786d4b27":"markdown"},"source":{"45097101":"import pandas as pd\nimport numpy as np\nimport re\nimport gensim\nfrom gensim.utils import simple_preprocess \nfrom nltk import word_tokenize\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\nfrom textblob import TextBlob\nfrom tqdm import tqdm\nfrom os import path\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e30e749c":"data = pd.read_csv('..\/input\/mbti-type\/mbti_1.csv')\nprint(data.shape)\ndata.head()","9b7441ba":"## plotting the number of people in each type\nplt.figure(figsize = [8,8])\nordered_type = data['type'].value_counts().index\nsns.countplot(y=data['type'],order = ordered_type)","6bc516fe":"import string\ndef clean_text(text):\n    text = text.lower()\n    text = text.replace('|||',' ')\n    text = re.sub('https?:\/\/\\S+|www\\.youtube\\S+', 'youtube', text)\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    return text\n\ndata['clean'] = data['posts'].apply(clean_text) # cleans each sentence\nprint('Sentences are cleaned')\n\ndata['words'] = data['clean'].apply(word_tokenize) # converts the cleaned senteces into list of words\nprint('Word Tokenizing done')\n\nstop_words = stopwords.words('english')\n# stop_words.extend(['im','like','would','ive'])\ndef remove_stop_words(text):\n    return [x for x in text if not x in stop_words]\n\ndata['words_wo_stopwords'] = data['words'].apply(remove_stop_words) # from list of words, removes stopwords\nprint('Stop words Removed')\n\ndata['posts_preprocessed'] = data['words_wo_stopwords'].apply(lambda x:\" \".join(x)) \n# joins the words to form senteces again\nprint('Word Preprocesing done')","8b364a18":"def get_top_n_imp_words(corpus,full_corpus,n=10):\n    \n    vec = TfidfVectorizer().fit(full_corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in     vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\n\nimp_words_dict = {}\nfor personality in tqdm(data['type'].unique()):\n    personality_data = data[data['type'] == personality]\n#     print(personality)\n    imp_words = get_top_n_imp_words(personality_data['posts_preprocessed'],data['posts_preprocessed'])\n#     print(imp_words)\n    imp_words_dict[personality] = imp_words","92bddb8e":"# imp_words_dict","d1ac3d45":"def load_mask_image(path):\n    mask = np.array(Image.open(path))\n    mask[mask < 200] = 0\n    mask[mask >= 200] = 255\n    return mask\n\nmask = load_mask_image('..\/input\/mask-image\/mask.png')\n","0c604b2c":"def typewise_properties(pers_type,data = data):\n    \n    personality_data = data[data['type'] == pers_type]\n    text = \" \".join(personality_data['posts_preprocessed'].tolist())\n    wc = WordCloud(background_color=\"white\", max_words=200, mask=mask,\n                   stopwords=stop_words, contour_width=3)\n\n    # Generate a wordcloud\n    wc.generate(text)\n\n    # show\n    plt.figure(figsize=[20,6])\n    plt.subplot(121)\n    plt.imshow(wc, interpolation='bilinear')\n    plt.axis(\"off\")\n\n    plt.subplot(122)\n    tuples = imp_words_dict[pers_type]\n    words = [x[0] for x in tuples]\n    imp = [x[1] for x in tuples]\n    sns.barplot(y = words,x = imp)\n    plt.title('Important Words')\n    plt.xlabel('Importance - tfidf value')","1b60827c":"typewise_properties('ISTJ')","c42ebf01":"typewise_properties('ISFJ')","124b1bc8":"typewise_properties('INFJ')","8fe150d9":"typewise_properties('INTJ')","7ce9abee":"typewise_properties('ISTP')","a6b27844":"typewise_properties('ISFP')","98b8f0a7":"typewise_properties('INFP')","7f686541":"typewise_properties('INTP')","c0f692e3":"typewise_properties('ESTP')","7e3ef546":"typewise_properties('ESFP')","5619d77d":"typewise_properties('ENFP')","1f48940a":"typewise_properties('ENTP')","aacc547c":"typewise_properties('ESTJ')","4d01e689":"typewise_properties('ESFJ')","16fdab63":"typewise_properties('ENFJ')","49fad31e":"typewise_properties('ENTJ')","005bb5e2":"data['num_youtube'] = data['words_wo_stopwords'].apply(lambda x: x.count('youtube'))","6e9186a8":"personalities = []\nyoutube_instances_per_user_list = []\nfor personality in data['type'].unique():\n    personality_data = data[data['type'] == personality]\n    youtube_instances_per_user = personality_data['num_youtube'].sum() \/ len(personality_data)\n    personalities.append(personality)\n    youtube_instances_per_user_list.append(youtube_instances_per_user)\n#     print(personality ,str(' - '),youtube_instances_per_user)","9c585294":"plt.figure(figsize = [16,8])\nsns.swarmplot('type','num_youtube',data=data)","e817a91c":"df = pd.DataFrame({'type':personalities,'yt_per_user':youtube_instances_per_user_list})\ndf = df.sort_values(by='yt_per_user',ascending=False)\n\nplt.figure(figsize = [20,8])\nplt.subplot(121)\nsns.barplot('yt_per_user','type',data=df)\n\nplt.subplot(122)\ncolors = ['grey']*6\ncolors.extend(['red'])\ncolors.extend(['grey']*2)\ncolors.extend(['red']*7)\nplt.title('Introverts vs Extroverts')\nsns.barplot('yt_per_user','type',data=df,palette=colors)","1cb5fe03":"def add_sentiment(dataframe, column):\n    '''\n    PARAMETERS - \n        dataframe - pandas DataFrame object\n        column - column in dataframe which contains the text to which sentiment is applied \n    \n    RETURNS - \n        pandas dataframe, polarity Subjectivity for each text\n    \n    '''\n    text_column = dataframe[column]\n    textblob_sentiment = text_column.apply(TextBlob)\n    \n    sentiment_values = [ {'Polarity': v.sentiment.polarity,\n                         'Subjectivity': v.sentiment.subjectivity}\n                   for v in tqdm(textblob_sentiment.values)]\n    df =  pd.DataFrame(sentiment_values)\n    return pd.concat([dataframe,df],axis=1)","69c9e798":"data_sentiments = add_sentiment(data,'clean')","3cd533a1":"data_sentiments.head()","b3a4e5f8":"for (i,personality) in enumerate(data_sentiments['type'].unique()):\n    personality_data = data_sentiments[data_sentiments['type'] == personality]\n    polarity_values = np.array(personality_data['Polarity'])\n    plt.figure(figsize = (16,16))\n    plt.subplot(16,1,i+1)\n    sns.distplot(polarity_values)\n    plt.title(str(personality))\n    plt.xlim((-1,1))\n    ","f7e4735e":"personalities = []\nsearched_per_user = []\nfor personality in data['type'].unique():\n    personalities.append(personality)\n    personality_data = data[data['type'] == personality]\n    personality_data['own'] = personality_data['clean'].apply(lambda x: x.count(personality.lower()))\n    own_per_user = personality_data['own'].sum() \/ len(data)\n    searched_per_user.append(own_per_user)","b0549c14":"df = pd.DataFrame({'type':personalities,'Score':searched_per_user})\ndf = df.sort_values(by='Score',ascending=False)\n\nplt.figure(figsize = [20,8])\nplt.subplot(121)\nsns.barplot('Score','type',data=df)\n\nplt.subplot(122)\ncolors = ['grey']*12\ncolors.extend(['green']*4)\nplt.title('Personalities types that are absolutely not obssesed about themselves')\nsns.barplot('Score','type',data=df,palette=colors)","b02832dc":"def count_all_instances(sentence):\n    count = 0\n    for personality in data['type'].unique():\n        personality = personality.lower()\n        count += sentence.count(personality)\n    return count","3c2c6b3a":"personalities = []\nscore = []\nfor personality in data['type'].unique():\n    personalities.append(personality)\n    personality_data = data[data['type'] == personality]\n    personality_data['own'] = personality_data['clean'].apply(lambda x: x.count(personality.lower()))\n    personality_data['all'] = personality_data['clean'].apply(count_all_instances)\n    personality_data['others'] = (personality_data['all'] - personality_data['own'] ) \n    other_per_user = personality_data['others'].sum() \/ len(personality_data)\n    score.append(other_per_user)\n#     print(personality ,str(' - '), other_per_user)","c28414a4":"df = pd.DataFrame({'type':personalities,'Score':score})\ndf = df.sort_values(by='Score',ascending=False)\n\nplt.figure(figsize = [20,8])\nplt.subplot(121)\nsns.barplot('Score','type',data=df)\n\nplt.subplot(122)\ncolors = ['red']*5\ncolors.extend(['grey'])\ncolors.extend(['red']*3)\ncolors.extend(['grey']*7)\nplt.title('Extroverts have no chill')\nsns.barplot('Score','type',data=df,palette=colors)","76b013b6":"# ISFP: Adventurer\nFlexible and charming artists, always ready to explore and experince something new","d46ad34f":"## Corrections, Improvements, Suggestions are highly welcome. \nThank you, Namaste","b07b7584":"# INTJ: Architect\nImaginative and strategic thinkers, with a plan for everything","b6e54c4a":"# Sentiments of each individual type","0f33ff98":"# ESFJ: Consul\nExtraordinarily caring, social and popular people, always eager to help","af7bdc00":"# ISTJ:Logistician\nPractical and fact-minded individuals whose reliability cannot be doubted ","6732a7e0":"# ENFJ: Protagonist\nCharismatics and inspiring leaders, able to mesmerize their listeners","457d64ac":"# ISTP: Virtuoso\nBold and practical experimenter, master of all kinds of tools ","0c0f9fdc":"# ISFJ: Defender \nVery dedicated and warm protectors, always ready to defend their loved ones","fa7abce0":"# INFJ: Advocate\nQuiet and mystical , yet very inspiring and tireless idealists.","838d1156":"# ESTP: Entrepreneur\nSmart, energetic and very perceptive people who truely enjoy living on the edge","fc7fec6d":"# ESTJ: Executive\nExcellent administrators, unsurparsed at managing things or people","2fc2af4e":"# INFP: Mediater\nPoetic, kind and altruistic people, always eager to help a good cause. ","e96f4ebb":"As it turns out, (kind of expected), Introverts watch way more youtube then Extroverts do.","353ea2dc":"## Types col","4d7e2469":"# Which type watches more Youtube?\n![](https:\/\/www.youtube.com\/about\/static\/svgs\/icons\/brand-resources\/YouTube-logo-full_color_light.svg?cache=72a5d9c)","2d5c6cd5":"At one side we have INFP, INFJ, INTP, INTJ who search about their own personality type, and on the other side we have ESTP, ESFJ ESFP have a lot more to do then search for their personality type. :)","10f4fda4":"Its no way near a uniform distribution, we can see that more people tend to be from INFP, INFJ, INTP. and its rare to find one having the type ESTP, ESFP, ESFJ and ESTJ","2b1a0adb":"# INTP: Logician \nInnovative inventors with an inquenchable thirst for knowledge","83d8145d":"# Who are more obsessed in talking about others?\nWe will look at which personality types seacrh other types the most? I am expecting extroverts to shine here. Lets see","2c07e9f4":"![](https:\/\/excellenceassured.com\/wp-content\/uploads\/2015\/09\/16-personality-types.png)","9845f5a6":"# ENFP: Campaigner\nEnthusiastic, creative and sociable free spirits, who can always find a reason to smile.","a9ea5960":"# ENTP: Debator\nSmart and curious thinker who cannot resist an intellectual challenge","7eaa359b":"# What is more obsessed about themselves?\nWe look at how many times the users searched about their personalities types for all the different types.","b5dd38a5":"# ESFP: Entertainer\nSpontanous, energetic and enthusiastic people, life is never boring around them","786d4b27":"# ENTJ: Commander\nBold, imaginative and strong willed leaders, always finding a way, or making one. "}}