{"cell_type":{"e2a3a3d2":"code","3dec5d46":"code","cd6f1c42":"code","ae73c6c2":"code","92356707":"code","ab53e03a":"code","60da410c":"code","93c02087":"code","7df01c18":"code","38a3d7a2":"code","4e4dfcf5":"code","1204fcdf":"code","0ec0185d":"code","ec3a9030":"code","9a13bf61":"code","ea6961e7":"code","a840624f":"code","db9e465a":"code","bef59da3":"code","f5d7715c":"code","7dbd78b8":"code","db5dbdc7":"code","3ceae7c0":"code","6c9f23fb":"code","0fa81847":"code","82b4168b":"code","7e2d98bb":"code","e5996c34":"code","00d3f209":"code","055a3e7d":"code","f5136d41":"code","b77c6fa3":"code","5f4f190a":"code","3ab1cd3d":"code","2635f45d":"code","f665ac9a":"code","237e994e":"code","fa0ac1bd":"code","9b2b4561":"code","62b3c33d":"code","09b57066":"code","32122302":"code","493c8e8e":"code","f171ba32":"code","8950dad2":"code","40118a9e":"code","dc2e20fa":"code","7d524a07":"code","325d9469":"code","cc800c24":"code","95407ba0":"code","c4b74b11":"code","032fde8c":"code","ebc6b3c6":"code","6b95c3ec":"code","09358a7c":"code","ff9788b9":"code","4972c1e6":"code","cea9a249":"code","05a2a6a0":"code","ee35105a":"code","f162fb30":"code","e1cc0ce1":"code","eca04fb3":"code","b121f28a":"code","8708e044":"code","ea694f07":"code","1762c55c":"code","581726a5":"code","17e64ef0":"code","1e9f8e77":"code","e086521e":"code","94a19849":"code","cbfb4629":"code","750905aa":"markdown","868d689c":"markdown","09649182":"markdown","cafb17f7":"markdown","b70dd1a0":"markdown","0d5b00e8":"markdown","c7125040":"markdown","981b1659":"markdown","56daf76b":"markdown","fa7f3a97":"markdown","0b399bf9":"markdown","81bbe262":"markdown","86999b52":"markdown","d13e9a04":"markdown","9eed0022":"markdown","e805b25a":"markdown","a4bbe1c7":"markdown","a435487c":"markdown","f919050b":"markdown","663a9fdd":"markdown","02d4ab21":"markdown","22d7b8ea":"markdown","00413d1d":"markdown","bf37d7ae":"markdown","8fab6b39":"markdown","b49d41f8":"markdown","91b3f253":"markdown","0861e6ac":"markdown","209317ea":"markdown","0a4f80bc":"markdown","aac1a485":"markdown","e7b5ff9b":"markdown","900d6f1a":"markdown","2e0532cf":"markdown","c4462894":"markdown"},"source":{"e2a3a3d2":"import numpy as np\nimport pandas as pd","3dec5d46":"df = pd.read_csv(\"..\/input\/the-world-of-pokemons\/pokemons dataset.csv\",encoding='latin-1')\ndf","cd6f1c42":"df.drop(['Name2','Secondary type'],axis = 1,inplace = True)\ndf","ae73c6c2":"df['Primary Type'].value_counts()","92356707":"df[df['Primary Type'] == 'GRASS']['Name']","ab53e03a":"df[df['Primary Type'] == 'GRASS']['Name'].values\n# to see every name","60da410c":"df_PT = df['Primary Type']  # series of categorical names nothing but whole primary type column\ndf_PT# just assigned it to a variable","93c02087":"# Now we need all names equal to grass\n# This query checks every value in primary type column with grass and returns boolean series, if that value is grass it will retrun true \nPT_GRASS = df_PT == 'GRASS'\nPT_GRASS# just assigned it to a variable","7df01c18":"# now if we apply df on boolean series we get a dataframe in return with only rows with true value\ndf_PT_GRASS  = df[PT_GRASS]\ndf_PT_GRASS\n# got a new data frame with every value in it as primary type as grass","38a3d7a2":"# U can cross check weather every value is grass or not by this method\ndf_PT_GRASS['Primary Type'].value_counts() \n# this will give the number of categorical values in your respective column name","4e4dfcf5":"# last part in question I asked to find names of pokemons so just use indexing to find names\ndf_PT_GRASS['Name']","1204fcdf":"# If u want to see every value use .values to that series\ndf_PT_GRASS['Name'].values","0ec0185d":"df[df['Primary Type'] == 'FIRE']['Name']","ec3a9030":"df[df['Primary Type'] == 'FIRE']['Name'].values\n# To see every name","9a13bf61":"df[df['Primary Type'] == 'ICE']['Name']","ea6961e7":"df[df['Primary Type'] == 'ICE']['Name'].values","a840624f":"df[df['Primary Type'] == 'GHOST']['Name']","db9e465a":"df[df['Primary Type'] == 'GHOST']['Name'].values","bef59da3":"df[(df['Primary Type'] == 'BUG') | (df['Primary Type'] == 'PSYCHIC')]['Name']","f5d7715c":"## for cross checking\ndf_bp = df[(df['Primary Type'] == 'BUG') | (df['Primary Type'] == 'PSYCHIC')]\ndf_bp['Primary Type'].value_counts()\n## our query is perfect","7dbd78b8":"df[(df['Primary Type'] == 'BUG') | (df['Primary Type'] == 'PSYCHIC')]['Name'].values","db5dbdc7":"df[(df['Primary Type'] == 'WATER') | (df['Primary Type'] == 'NORMAL')]['Name']","3ceae7c0":"df_wn = df[(df['Primary Type'] == 'WATER') | (df['Primary Type'] == 'NORMAL')]\ndf_wn['Primary Type'].value_counts()","6c9f23fb":"df[(df['Primary Type'] == 'WATER') | (df['Primary Type'] == 'NORMAL')]['Name'].values","0fa81847":"df[(df['Primary Type'] == 'GROUND') | (df['Primary Type'] == 'DRAGON')]['Name']","82b4168b":"df_dg = df[(df['Primary Type'] == 'GROUND') | (df['Primary Type'] == 'DRAGON')]\ndf_dg['Primary Type'].value_counts()","7e2d98bb":"df[(df['Primary Type'] == 'GROUND') | (df['Primary Type'] == 'DRAGON')]['Name'].values","e5996c34":"df_attack100 = df[df['Attack'] > 100][['Name','Primary Type']]\ndf_attack100","00d3f209":"df_attack100['Name'].values","055a3e7d":"df_attack100['Primary Type'].value_counts()","f5136d41":"df_attacklessthan100 = df[df['Attack'] < 100][['Name','Primary Type']]\ndf_attacklessthan100","b77c6fa3":"df_attacklessthan100['Name'].values","5f4f190a":"df_attacklessthan100['Primary Type'].value_counts()","3ab1cd3d":"df_1 = df[(df['Attack'] > 50) & (df['Attack'] < 100)][['Name','Primary Type']]\ndf_1","2635f45d":"df_1['Name'].values","f665ac9a":"df_1['Primary Type'].value_counts()","237e994e":"df_2 = df[(df['Attack'] > 50) & (df['Defense'] > 100)]\ndf_2","fa0ac1bd":"df_2['Name'].values","9b2b4561":"df_2['Primary Type'].value_counts()","62b3c33d":"df_3 = df[(df['Primary Type'] == 'POISON') & (df['Speed'] > 100)]\ndf_3","09b57066":"df_3['Name']","32122302":"attack_max = df['Attack'].max()\nattack_max","493c8e8e":"df[df['Attack'] == attack_max][['Name','Primary Type']]","f171ba32":"attack_min = df['Attack'].min()\nattack_min","8950dad2":"df[df['Attack'] == attack_min][['Name','Primary Type']]","40118a9e":"defense_max = df['Defense'].max()\ndefense_max","dc2e20fa":"df[df['Defense'] == defense_max][['Name','Primary Type']]","7d524a07":"defense_min = df['Defense'].min()\ndefense_min","325d9469":"df[df['Defense'] == defense_min][['Name','Primary Type']]","cc800c24":"df_da = df[df['Primary Type'] == 'DARK']\ndarkattack_max = df_da['Attack'].max()\ndarkattack_max","95407ba0":"df_da[df_da['Attack'] == darkattack_max][['Name','Primary Type','Attack']]","c4b74b11":"darkdefense_min = df_da['Defense'].min()\ndarkdefense_min","032fde8c":"df_da[df_da['Defense'] == darkdefense_min][['Name','Primary Type','Defense']]","ebc6b3c6":"df.sort_values('HP')","6b95c3ec":"df[df['Attack'].values  == df['Defense'].values]","09358a7c":"df[df['Sp.Attack'] > df['Sp.Attack'].mean()]","ff9788b9":"df_sp = df[df['Sp.Attack'] > df['Sp.Attack'].mean()]\ndf_sp\n## First find the dataframe with sp.attack values greather than its mean","4972c1e6":"df_sp[df_sp['Primary Type'] == 'ROCK']\n# then find the primary type rock with another query","cea9a249":"df_spd = df[df['Defense'] > df['Defense'].median()]\ndf_spd","05a2a6a0":"df_spd[df_spd['Primary Type'] == 'FAIRY']","ee35105a":"most_repeated = df['Primary Type'].mode()[0]\nmost_repeated\n# First find which type repeated most","f162fb30":"df[df['Primary Type'] == 'WATER']\n# then perform query with that primary type","e1cc0ce1":"most_repeated = df['Primary Type'].mode()[0]\nmost_repeated\n# First find which type repeated most","eca04fb3":"df_mr = df[df['Primary Type'] == 'WATER']\ndf_mr\n# then perform query with that primary type","b121f28a":"df_mr[df_mr['Total'] > df_mr['Total'].mean()]","8708e044":"max_s = df['Speed'].max()\nmax_s","ea694f07":"df[df['Speed'] == max_s]","1762c55c":"# for pokemon name\ndf[df['Speed'] == max_s]['Name']","581726a5":"df_mean = df[(df['Attack'] > df['Attack'].mean()) & (df['Defense'] > df['Defense'].mean()) & (df['HP'] > df['HP'].mean()) & (df['Sp.Attack'] > df['Sp.Attack'].mean()) & (df['Sp.Defense'] > df['Sp.Defense'].mean()) & (df['Speed'] > df['Speed'].mean()) & (df['Total'] > df['Total'].mean())]\ndf_mean\n# In this data frame every value in column greate than its mean of respective column","17e64ef0":"# For cross checking\ndf.describe()[1:2]\n# compare values with their actual mean","1e9f8e77":"df_median = df[(df['Attack'] > df['Attack'].median()) & (df['Defense'] > df['Defense'].median()) & (df['HP'] > df['HP'].median()) & (df['Sp.Attack'] > df['Sp.Attack'].median()) & (df['Sp.Defense'] > df['Sp.Defense'].median()) & (df['Speed'] > df['Speed'].median()) & (df['Total'] > df['Total'].median())]\ndf_median\n# In this data frame every value in column greate than its median of respective column","e086521e":"# For cross checking\ndf.describe()[5:6]\n# compare values with their actual median","94a19849":"max_total = df_median['Total'].max()\nmax_total","cbfb4629":"df_median[df_median['Total'] == max_total]","750905aa":"# Query 26: Find dataframe which has all numerical values greather than mean of that respective column","868d689c":"### I will cut it down into several steps for better unserstading","09649182":"# Query 22 :  Display data frame with pokemons names which has sp.defense value greather than median and which are of primary type Fairy","cafb17f7":"# Query 1: Find all pokemons Names with Primary Type as GRASS","b70dd1a0":"# Query 18 :  Display data frame in ascending order with respect to Hp","0d5b00e8":"# Query 16 :  Find pokemon names which have highest attack in dark primary type","c7125040":"# Query 21 :  Display data frame with pokemons names which has sp.attack value greather than mean and which are of primary type Rock","981b1659":"# Query 7: Find all pokemons Names with Primary Type as GROUND or Dragon","56daf76b":"# Query 24: Display dataframe which contain primary type that repeated most and values of total column greather than its mean","fa7f3a97":"#### Similarly we can find for other columns","0b399bf9":"# Query 27: Find dataframe which has all numerical values greather than median of that respective column and highest value of total in resualtant dataframe","81bbe262":"## dropping Name2 and secondary type since they have many null values","86999b52":"#### My way of solving any query is, First I will look at the column in which the given category present. So, here first u need to check column primary type. How will u grab column primary type?,if df is your whole dataframe now use indexing df['columnname'] (here column name = 'Primary type') you will get series of values, Next since primary type column is object type it contains category so use df['Primary Type'] == 'Categoriacal name'  (here GRASS). It returns u the series of boolean values(all true indicates that the respective value in series is equal to the categorical name you given) and next apply df on that boolean series then you will get data frame with primary type equal to grass. In question I given to find out names so use indexing to the resualtant dataframe to grab out series of names.","d13e9a04":"# Query 19 :  Display data frame in which attack and defense should contain same value","9eed0022":"# Query 4: Find all pokemons Names with Primary Type as GHOST","e805b25a":"# Query 11 :  Find pokemon names which have speed greather than 100 and of poison datatype","a4bbe1c7":"# Query 8 :  Find pokemon name,primary type where attack is lesser than 100","a435487c":"# Query 2: Find all pokemons Names with Primary Type as Fire","f919050b":"# Query 14 :  Find pokemon names,Primary Type which have highest defense","663a9fdd":"# Query 25: Find pokemon name which has highest Speed","02d4ab21":"# Query 15 :  Find pokemon names,Primary Type which have lowest defense","22d7b8ea":"# Query 9 :  Find pokemon name,primary type where attack is greather than 50 and less than 100","00413d1d":"# Query 17 :  Find pokemon names which have lowest defense in dark primary type","bf37d7ae":"# Query 20 :  Display data frame with pokemons names which has sp.attack value greather than mean","8fab6b39":"#### This is my approach to any query. If you feel hard break the question and do step by step","b49d41f8":"# Query 8 :  Find pokemon name,primary type where attack is greather than 100","91b3f253":"# Query 5: Find all pokemons Names with Primary Type as BUG or PSYCHIC","0861e6ac":"## UPVOTE IF U LIKE","209317ea":"# Query 10 :  Find pokemon name,primary type where attack is greather than 50 and defense is greather than 100","0a4f80bc":"## Basic idea behid doing queries is because it will improve your visualisation and understanding towards data and helps to get more relations on data.","aac1a485":"# Query 13 :  Find pokemon names,Primary Type which have lowest attack","e7b5ff9b":"# Query 3: Find all pokemons Names with Primary Type as ICE","900d6f1a":"# Query 12 :  Find pokemon names,Primary Type which have Highest attack","2e0532cf":"# Query 6: Find all pokemons Names with Primary Type as water or normal","c4462894":"# Query 23: Display dataframe which contain primary type that repeated most"}}