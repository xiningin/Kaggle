{"cell_type":{"2569eaea":"code","f03cd7d6":"code","fd8453a7":"code","80392c80":"code","656789f3":"code","e6778bd4":"code","a40d39a3":"code","374e3217":"code","3eacb6ee":"code","4a63cc5c":"code","426043e5":"code","8ee30898":"code","20dd612e":"code","5efd0150":"code","b4e34426":"code","03d48df9":"code","dd210876":"code","17ac170c":"code","9a5a9be4":"code","ef85d342":"code","a52c82e6":"code","e32370d1":"code","7149fda1":"code","48ff96e6":"code","162181e5":"code","c6e6e27b":"code","6c6066be":"code","9c098237":"code","5c6e1f06":"code","f1cfaaa0":"code","5b1ed3f9":"code","39298949":"markdown","f9d77bcc":"markdown","4a31990d":"markdown","85ef12c3":"markdown","1aa931b4":"markdown","38658b7e":"markdown","38f7be8a":"markdown","fbfeeb60":"markdown","869c65fe":"markdown","e96abd05":"markdown","ce437a1d":"markdown","5d811c00":"markdown","205b50ee":"markdown","83c32a96":"markdown"},"source":{"2569eaea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use (\"seaborn-whitegrid\")\n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")  #it closes the warnings to not confuse\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f03cd7d6":"#it shows posssible styles that can we use\n#plt.style.available","fd8453a7":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","80392c80":"train_df.columns","656789f3":"train_df.head()\n","e6778bd4":"train_df.describe()","a40d39a3":"train_df.info()","374e3217":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","3eacb6ee":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","4a63cc5c":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","426043e5":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins =50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","8ee30898":"numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","20dd612e":"train_df[[\"Pclass\",\"Survived\"]]","5efd0150":"# Plcass vs Survived\n#with groupby we have to specify what the grouping depends on and take their average\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean()","b4e34426":"#we want to sort the results\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","03d48df9":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)\n","dd210876":"# Sibsp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","17ac170c":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","9a5a9be4":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        #Store Indices so when we need it we can easily drop\n        outlier_indices.extend(outlier_list_col)\n        \n    #to decide if we are going to takeout the data, we check if one passenger has many outliers\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers\n        ","ef85d342":"#call method\ntrain_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","a52c82e6":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","e32370d1":"\ntrain_df_len = len(train_df)\n#combine dataframes\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","7149fda1":"train_df.head()","48ff96e6":"#check if there is any missing value,in which columns\ntrain_df.columns[train_df.isnull().any()]","162181e5":"#how many missing value we have\ntrain_df.isnull().sum()","c6e6e27b":"train_df[train_df[\"Embarked\"].isnull()]","6c6066be":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","9c098237":"#we filled the nan ones with C\ntrain_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\n#check if there is any nan ones\ntrain_df[train_df[\"Embarked\"].isnull()]","5c6e1f06":"#check the nan ones in Fare\ntrain_df[train_df[\"Fare\"].isnull()]","f1cfaaa0":"#fill the nan ones with 3nd class people's average\ntrain_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","5b1ed3f9":"##check the nan ones in Fare\ntrain_df[train_df[\"Fare\"].isnull()]\n","39298949":"# INTRODUCTION\n\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color = \"red\">\nContent:\n    \n   \n1.[Load and Check the Data](#1)\n    \n2.[Variable Description](#2)  \n    *[Univariate Variable Analysis](#3) \n       *[Categorical Variable Analysis](#4) \n       *[Numerical Variable Analysis](#5)\n    \n3.[Basic Data Analysis](#6)    \n    \n4.[Outlier Detection](#7)     \n\n5.[Missing Value](#8)\n    *[Find Missing Value](#9)\n    *[Fill Missing Value](#10)","f9d77bcc":"<a Id = \"1\"> <\/a>\n## Load and Check Data\n","4a31990d":"1. PassengerId: unique Id number to each passenger\n2. Survived: passenger survived(1) or died(0)\n3. Pclass: passenger class (1,2,3)\n4. Name: passenger name\n5. Sex : gender of passenger\n6. Age: age of passenger\n7. SibSp: number of siblings\/spouses\n8. Parch : number of parents\/children\n9. Ticket : ticket number\n10. Fare : amount of money spent on ticket\n11. Cabin : cabin category\n12. Embarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)\n","85ef12c3":"<a Id = \"9\" > <\/a><br>\n## Find Missing Value","1aa931b4":"<a Id = \"7\" > <\/a><br>\n# Outlier Detection","38658b7e":"<a Id = \"3\"> <\/a>\n# Univariate Variable Analysis\u00b6\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, age and passengerId\n","38f7be8a":"<a Id = \"8\" > <\/a><br>\n# Missing Value\u00b6\n* Find Missing Value\n* Fill Missing Value\n","fbfeeb60":"<a Id = \"5\"> <\/a>\n## Numerical Variable","869c65fe":"* Embarked has 2 missing value\n* Fare has only 1","e96abd05":"<a Id = \"4\"> <\/a>\n## Categorical Variable","ce437a1d":"<a Id = \"6\" > <\/a><br>\n# Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","5d811c00":"<a Id = \"10\" > <\/a><br>\n## Fill Missing Value","205b50ee":"dtypes:\n* float64(2): Fare ve Age\n* int64(5): Pclass, sibsp, parch, passengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex","83c32a96":"<a Id = \"2\"> <\/a>\n## Variable Description"}}