{"cell_type":{"e13eddcb":"code","f1d1f0ea":"code","59c33493":"code","82570e92":"code","a1c72cec":"code","0ea4637e":"code","21cd6235":"code","af0b7996":"code","9d74920d":"code","da6fee36":"code","ab3a1c2d":"code","be74c40b":"code","cefde377":"code","47c0178f":"code","df9c235a":"code","88da9991":"code","1e22e750":"code","3dd58315":"code","020954e9":"code","b82736fe":"code","d5c54dd0":"code","8c4573b1":"code","75bf0164":"code","b2fb44ca":"code","4e4e2190":"code","4fcbcc84":"code","87eb12e8":"code","23f38162":"code","527a2cef":"code","1e799d69":"code","c5f4de1e":"code","8c720ce6":"code","245298ff":"code","17f95277":"code","aa04189f":"code","2e442238":"code","04b1099f":"code","5698ea7b":"code","3e96b48b":"code","73f8eb8d":"code","d416c66e":"code","e0e174af":"code","0dc758df":"code","c4e94a2a":"code","b6c4492d":"code","34962538":"code","ee079f72":"code","81d36a78":"code","354e729e":"code","6fd0b814":"code","ffc960da":"code","3fd24fd3":"code","8f6927f2":"code","753dfebc":"code","a923553b":"code","7cdd3d57":"code","d71ff82f":"code","3ad58551":"code","be426162":"code","488b9dd8":"code","1712ec22":"code","0f536b53":"code","57cf1e59":"code","3e2acead":"code","7bac5e4d":"code","41bc9b68":"code","b6392c77":"code","45456465":"code","b665c779":"code","fe4842f1":"code","a0474d57":"code","9dedf4fa":"code","999008e5":"markdown","bb859bd2":"markdown","114de827":"markdown","aa67f93d":"markdown","d55c518c":"markdown","4fc218d5":"markdown","7cb57918":"markdown","01cb1331":"markdown","9c0b6a4e":"markdown","5a643145":"markdown","e0a7acc5":"markdown","cb9fbc79":"markdown","2e1cc938":"markdown","fbe3ca7f":"markdown","a88876c5":"markdown","ecfa4fd6":"markdown","560c8a60":"markdown","027258ea":"markdown","d929744e":"markdown","8c8ea384":"markdown","4bea3fc6":"markdown","0a87a861":"markdown","dfaf6448":"markdown","728618b4":"markdown","7e28c397":"markdown","406fe1ab":"markdown","c3ceb589":"markdown","aeef91b7":"markdown","77ec07a0":"markdown","a3a5b095":"markdown","164ff8ff":"markdown","4c3d26cd":"markdown","3c2071bb":"markdown","a4755a5b":"markdown","72093e29":"markdown","b5d705ab":"markdown","21b2401d":"markdown","1eabf709":"markdown","2d18bb33":"markdown","e6c80ea4":"markdown","b1b0deff":"markdown","351de7a4":"markdown","d13726e4":"markdown","fc9ef8f2":"markdown","1c389a6e":"markdown","c49e141b":"markdown","21acd18c":"markdown","c20def23":"markdown","da397efe":"markdown","8e47ddcc":"markdown","c4bde659":"markdown","003d5f3e":"markdown","e5543b15":"markdown","8deae2b9":"markdown","cd108d6c":"markdown","4aa8f65c":"markdown","16dd0707":"markdown","08e5a73c":"markdown","6e0f52eb":"markdown","ad3ccb0f":"markdown","5b2be058":"markdown","3883b80e":"markdown","19e8f7cb":"markdown","898f4459":"markdown","e04db3fd":"markdown","a5cb576f":"markdown","f717835c":"markdown","c756d29c":"markdown","c195739c":"markdown","aa6e4376":"markdown","ca3c8b7c":"markdown","871c311e":"markdown","e81df36e":"markdown","7abaec67":"markdown","13d1445a":"markdown","ca33de64":"markdown","af9c5716":"markdown","154fadc8":"markdown","14b8b4a5":"markdown","450e14cd":"markdown","916813cc":"markdown","ac68b3cb":"markdown","0bf09014":"markdown","85f7c81c":"markdown","e5b9ac75":"markdown","4778874e":"markdown","aada765b":"markdown","64051054":"markdown","bbf346ff":"markdown","7b85ae76":"markdown","3d1ebb3f":"markdown","ac8a4d14":"markdown","be91d662":"markdown","52c7e642":"markdown","140f2b1f":"markdown","b28f808f":"markdown","9bbb3158":"markdown","cd6ebe96":"markdown","b6c6cfc1":"markdown","500b9347":"markdown","cd5b2c1d":"markdown"},"source":{"e13eddcb":"# import all packages and set plots to be embedded inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\n%matplotlib inline","f1d1f0ea":"df_19_06 = pd.read_csv(\"..\/input\/ford-gobike-system-june2019-to-may2020\/data\/201906-baywheels-tripdata.csv\")\ndf_19_07 = pd.read_csv(\"..\/input\/ford-gobike-system-june2019-to-may2020\/data\/201907-baywheels-tripdata.csv\")\ndf_19_08 = pd.read_csv(\"..\/input\/ford-gobike-system-june2019-to-may2020\/data\/201908-baywheels-tripdata.csv\")\ndf_19_09 = pd.read_csv(\"..\/input\/ford-gobike-system-june2019-to-may2020\/data\/201909-baywheels-tripdata.csv\")\ndf_19_10 = pd.read_csv(\"..\/input\/ford-gobike-system-june2019-to-may2020\/data\/201910-baywheels-tripdata.csv\")\ndf_19_11 = pd.read_csv(\"..\/input\/ford-gobike-system-june2019-to-may2020\/data\/201911-baywheels-tripdata.csv\")\ndf_19_12 = pd.read_csv(\"..\/input\/ford-gobike-system-june2019-to-may2020\/data\/201912-baywheels-tripdata.csv\")\ndf_20_01 = pd.read_csv(\"..\/input\/ford-gobike-system-june2019-to-may2020\/data\/202001-baywheels-tripdata.csv\")\ndf_20_02 = pd.read_csv(\"..\/input\/ford-gobike-system-june2019-to-may2020\/data\/202002-baywheels-tripdata.csv\")\ndf_20_03 = pd.read_csv(\"..\/input\/ford-gobike-system-june2019-to-may2020\/data\/202003-baywheels-tripdata.csv\")\ndf_20_04 = pd.read_csv(\"..\/input\/ford-gobike-system-june2019-to-may2020\/data\/202004-baywheels-tripdata.csv\")\ndf_20_05 = pd.read_csv(\"..\/input\/ford-gobike-system-june2019-to-may2020\/data\/202005-baywheels-tripdata.csv\")","59c33493":"df_1 = pd.concat([df_19_06, df_19_07, df_19_08, df_19_09, df_19_10 , df_19_11, df_19_12, df_20_01, df_20_02, df_20_03], ignore_index = True, sort= False)\ndf_1.head()","82570e92":"df_2 = pd.concat([df_20_04, df_20_05], ignore_index = True, sort= False)\ndf_2.head()","a1c72cec":"df_19_06.head(1)","0ea4637e":"df_19_07.head(1)","21cd6235":"df_19_08.head(1)","af0b7996":"df_19_09.head(1)","9d74920d":"df_19_10.head(1)","da6fee36":"df_19_11.head(1)","ab3a1c2d":"df_19_12.head(1)","be74c40b":"df_20_01.head(1)","cefde377":"df_20_02.head(1)","47c0178f":"df_20_03.head(1)","df9c235a":"df_20_04.head(1)","88da9991":"df_20_05.head(1)","1e22e750":"df_1.shape","3dd58315":"df_1.head()","020954e9":"df_1.tail()","b82736fe":"df_1.info()","d5c54dd0":"df_1.describe()","8c4573b1":"df_1.isnull().any()","75bf0164":"df_1.duplicated().sum()","b2fb44ca":"df_2.head()","4e4e2190":"df_2.tail()","4fcbcc84":"df_2.duplicated().sum()","87eb12e8":"df_2.describe()","23f38162":"df_1_clean = df_1.copy()\ndf_2_clean = df_2.copy()","527a2cef":"df_1_clean = df_1_clean.rename(columns={'duration_sec':'trip_duration', 'user_type':'member_casual', 'bike_id':'bike_ride_id', 'start_time':'started_at', \\\n                                       'end_time':'ended_at', 'start_station_longitude':'start_lng', 'start_station_latitude':'start_lat', \\\n                                        'end_station_latitude':'end_lat', 'end_station_longitude':'end_lng'})\ndf_2_clean = df_2_clean.rename(columns={'ride_id':'bike_ride_id'})","1e799d69":"df_1_clean = df_1_clean.replace({'Subscriber':'member', 'Customer':'casual'})","c5f4de1e":"df_2_clean.member_casual.unique()","8c720ce6":"# set df_1 datatypes\ndf_1_clean.started_at = df_1_clean.started_at.astype('datetime64')\ndf_1_clean.ended_at = df_1_clean.ended_at.astype('datetime64')\ndf_1_clean.start_station_id = df_1_clean.start_station_id.astype('str')\ndf_1_clean.end_station_id = df_1_clean.end_station_id.astype('str')\ndf_1_clean.bike_ride_id = df_1_clean.bike_ride_id.astype('str')\ndf_1_clean.member_casual = df_1_clean.member_casual.astype('category')","245298ff":"# set df_2 datatypes\ndf_2_clean.started_at = df_2_clean.started_at.astype('datetime64')\ndf_2_clean.ended_at = df_2_clean.ended_at.astype('datetime64')\ndf_2_clean.start_station_id = df_2_clean.start_station_id.astype('str')\ndf_2_clean.end_station_id = df_2_clean.end_station_id.astype('str')\ndf_2_clean.member_casual = df_2_clean.member_casual.astype('category')","17f95277":"df_1_clean.info()","aa04189f":"df_2_clean.info()","2e442238":"df_1_clean = df_1_clean.drop(columns=['rental_access_method', 'bike_share_for_all_trip'])\ndf_2_clean = df_2_clean.drop(columns=['is_equity', 'rideable_type'])","04b1099f":"print(df_1_clean.info());\nprint(df_2_clean.info())","5698ea7b":"df_1_clean = df_1_clean.drop_duplicates()","3e96b48b":"sum(df_1_clean.duplicated())","73f8eb8d":"# trip_duration equal to end time minus started time\ndf_2_clean['trip_duration'] = df_2_clean['ended_at'] - df_2_clean['started_at']\n\n# convert trip duration to second\nimport datetime as dt\ndf_2_clean['trip_duration'] = df_2_clean['trip_duration'].dt.total_seconds()\n\n# convert trip duration datatype to int\ndf_2_clean['trip_duration'] = df_2_clean['trip_duration'].astype(int)","d416c66e":"print(df_2_clean.head())\nprint(df_2_clean.info())","e0e174af":"df_2_clean.describe()","0dc758df":"df_clean = pd.concat([df_1_clean, df_2_clean])","c4e94a2a":"print(df_1_clean.shape[0])\nprint(df_2_clean.shape[0])\nprint(df_clean.shape[0])","b6c4492d":"df_clean = df_clean[df_clean['trip_duration']>0]","34962538":"df_clean[df_clean['trip_duration']<0].shape[0]","ee079f72":"df_clean['trip_duration'].describe()","81d36a78":"df_clean['trip_duration'] = df_clean['trip_duration']\/60","354e729e":"df_clean['trip_duration'].describe()","6fd0b814":"headers = ['bike_ride_id', 'member_casual', 'started_at', 'ended_at', 'trip_duration', 'start_station_name', 'start_station_id', 'start_lat', 'start_lng', 'end_station_name', 'end_station_id', 'end_lat', 'end_lng']\ndf_clean = df_clean[headers]","ffc960da":"df_clean.head()","3fd24fd3":"df_clean.to_csv('ford_gobike_system.csv', index = False, header=True)\n","8f6927f2":"dtype = {'member_casual': 'category'}            # Set member_casual as a categorical variable\nparse_dates = ['started_at', 'ended_at']         # Set date variable as a datetime datatype \ndf =pd.read_csv('ford_gobike_system.csv', dtype=dtype, parse_dates=parse_dates)   # import the csv respecting datatypes","753dfebc":"# Creating daytime, weekday and month columns\n\ndf['month'] = pd.to_datetime(df['started_at']).dt.to_period('M')\ndf['weekday'] = df['started_at'].dt.day_name()\ndf['daytime'] = df['started_at'].dt.hour\n\n# Reorder the weekday values\ndf['weekday'] = pd.Categorical(df['weekday'], categories=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday', 'Sunday'],ordered=True)\ndf.head()","a923553b":"def exp_trans(x, inverse = False):\n    \"\"\" transformation helper function \"\"\"\n    if not inverse:\n        return np.log(x)\n    else:\n        return np.exp(x)    \n\ndata = df['trip_duration'];\nbin_edges = np.arange(0, exp_trans(data.max())+0.5, 0.5);\nsb.distplot(data.apply(exp_trans), bins = bin_edges);\ntick_locs = np.arange(0, exp_trans(data.max())+2.5, 2.5);\nplt.xticks(tick_locs, exp_trans(tick_locs, inverse = True).astype(int));\nplt.xlabel(\"Trip Duration (exp)\");\n\n\n","7cdd3d57":"# Start with daytime distribution\n\nbase_color = sb.color_palette()[0]\nsb.countplot(data=df, x='daytime', color = base_color);\nplt.xlabel('Daytime')\nplt.title('Daytime Distribution')","d71ff82f":"# The weekday distribution\n\nsb.countplot(data=df, x='weekday', color=base_color);\nplt.xticks(rotation = 15);\nplt.xlabel('Weekday')\nplt.title('Weekday Distribution')","3ad58551":"# The month distribution\n\nbase_color = sb.color_palette()[0];\nsb.countplot(data=df, x ='month', color=base_color);\nplt.xticks(rotation = 45);\nplt.xlabel('Month')\nplt.title('Months Distribution')","be426162":"# number of trips regarding the customer type\n\nsb.countplot(data=df, x='member_casual', color=base_color);\nplt.xlabel(\"Customer Type\");\nplt.title('Customer Type Count')","488b9dd8":"# make an exponential transformation for the trip duration values\ndf['trip_duration_exp'] = df['trip_duration'].apply(exp_trans);\n\n# Make a function to set the yticks\ndef duration_yticks():\n    duration_labels = ['1mn', '10mn','2h30mn', '1j', '10j'];\n    duration_ticks =[1,10,150 ,1440, 14400];        ####\n    plt.yticks(exp_trans(np.array(duration_ticks)), duration_labels);\n    plt.ylabel(\"Trip Duration\");","1712ec22":"### plot the trip duration mean as a barchart\ndf[['member_casual', 'trip_duration']].groupby('member_casual').mean().plot(kind='bar', legend=None);\nplt.xlabel(\"\");\nplt.ylabel('Trip Duration Mean (minute)');\nplt.title('Trip Duration Mean for each Customer Type');     \nplt.show();\n \n    \n\n### Plot a boxplot of the trip duration regarding the customer type\nsb.boxplot(data = df, x = 'member_casual', y = 'trip_duration_exp', color = base_color);                \n\n# set y ticks and labels\nduration_yticks()  \n\n# set the tilte andx label\nplt.xlabel(\"Customer Type\");\nplt.title('Trip Duration Boxplot regarding Customer Type');     \n\nplt.show()","0f536b53":"# Set a range from 0 to 23\nhourly_ticks = np.arange(0,24,1) \n\ndf[['daytime', 'trip_duration']].groupby('daytime').mean().plot(kind = 'bar', legend=None);\nplt.xticks(hourly_ticks);\nplt.ylabel('Trip Duration Mean (minute)');\nplt.xlabel('Daytime');\nplt.title('Trip Duration Mean for over Daytime');    ","57cf1e59":"### Plot the trip duration mean regarding weeldays\n\ndf[['weekday', 'trip_duration']].groupby('weekday').mean().plot(kind='bar', legend=None);\nplt.xlabel('Weekday');\nplt.ylabel('Trip Duration Mean (minute)');\nplt.title('Trip Duration Mean over weekdays') \nplt.show()\n\n\n### Plot the trip duration boxplot regarding weedays\nsb.boxplot(data = df, x = 'weekday', y = 'trip_duration_exp', color = base_color)\n\n# set yticks\nduration_yticks()  \n# title, xticks rotaion settings\nplt.title('Trip Duration Boxplot regarding weekdays') \nplt.xticks(rotation = 15)\nplt.show()\n","3e2acead":"# Plot the trip duration mean for each months \ndf[['month', 'trip_duration']].groupby('month').mean().plot(kind='bar', legend=None);\nplt.xlabel('Months');\nplt.ylabel('Trip Duration Mean (minute)');\nplt.title('Trip Duration Mean for each Month');     \n\nplt.show();\n\n\n# Plot boxplot of the trip duration over months \nsb.boxplot(data = df, x = 'month', y = 'trip_duration_exp', color = base_color);\n\n# set y ticks and labels\nduration_yticks();\nplt.xlabel('Months');\nplt.title('Trip Duration Boxplot regarding customer type');     \nplt.xticks(rotation = 25);\n","7bac5e4d":"ax = sb.countplot(data = df, x = 'daytime', hue = 'member_casual');\nax.legend(loc = 1);\nplt.title('Daytime Distribution for each Customer Type');","41bc9b68":"ax = sb.countplot(data = df, x = 'weekday', hue = 'member_casual');\nax.legend(loc = 1);\nplt.xticks(rotation = 15);\nplt.title('Weekdays Distribution for each Customer Type');\n","b6392c77":"ax = sb.countplot(data = df, x = 'month', hue = 'member_casual');\nax.legend(loc = 1);\nplt.xticks(rotation = 25);\nplt.title('Months Distribution for each Customer Type');\n","45456465":"df_sub = df[['daytime', 'trip_duration', 'member_casual']].groupby(['daytime', 'member_casual']).mean();\ndf_sub = df_sub.add_suffix('_mean').reset_index();\nsb.barplot(data = df_sub, x='daytime', y='trip_duration_mean', hue='member_casual');\nplt.legend(title='Custumer Type');\nplt.xlabel('Daytime');\nplt.ylabel('Trip Duration Mean (minute)');\nplt.title('Trip Duration Mean over Daytime regarding Customer Type');\n","b665c779":"df_sub = df[['weekday', 'trip_duration', 'member_casual']].groupby(['weekday', 'member_casual']).mean()\ndf_sub = df_sub.add_suffix('_mean').reset_index()\nsb.barplot(data = df_sub, x='weekday', y='trip_duration_mean', hue='member_casual')\nplt.xticks(rotation=15)\nplt.legend(title='Custumer Type');\nplt.xlabel('Weekday');\nplt.ylabel('Trip Duration Mean (minute)');\nplt.title('Trip Duration Mean over Weekdays regarding Customer Type');\n","fe4842f1":"df_sub = df[['month', 'trip_duration', 'member_casual']].groupby(['month', 'member_casual']).mean()\ndf_sub = df_sub.add_suffix('_mean').reset_index()\nsb.barplot(data = df_sub, x='month', y='trip_duration_mean', hue='member_casual')\nplt.xticks(rotation=25)\nplt.legend(title='Custumer Type');\nplt.xlabel('Month');\nplt.ylabel('Trip Duration Mean (minute)');\nplt.title('Trip Duration Mean over Month regarding Customer Type');","a0474d57":"plt.figure(figsize=(15,8));\n\nsb.boxplot(data=df, x='weekday', y='trip_duration_exp', hue='member_casual');\n# set y ticks and labels\nduration_yticks();\nplt.xticks(rotation = 15);\nplt.legend(loc=6, bbox_to_anchor = (1.0,0.5));\nplt.xlabel('Weekday');\nplt.ylabel('Trip Duration Mean (minute)');\nplt.title('Trip Duration Mean over Weekdays regarding Customer Type');\n","9dedf4fa":"plt.figure(figsize=(15,8));\n\nsb.boxplot(data=df, x='month', y='trip_duration_exp', hue='member_casual');\n# set y ticks and labels\nduration_yticks();\nplt.xticks(rotation = 15);\nplt.legend(loc=6, bbox_to_anchor = (1.0,0.5));\nplt.xlabel('Month');\nplt.ylabel('Trip Duration Mean (minute)');\nplt.title('Trip Duration Mean over Months regarding Customer Type');","999008e5":"### The structure of the dataset\n\n> There are 4702822 trip on the dataset with 13 features ( trip_duration, started_at, ended_at, start_station_id, start_station_name, start_lat, start_lng, start_lng, end_station_id, end_station_name, end_lat, end_lng, bike_ride_id, member_casual ) most variables are object, the trip duration is an 'int' those related to start and end position are 'float', the start time and the end time are 'datetime', and member_casual wich is a categorical variable.\n\n### The main features of interest in the dataset\n\n> The main feature of interest are : trip_duration, started_at, casual_member.\n> I'm aslo interseted on the month, the weekday and the daytime of the trip, that's why I'll add a column for each one.  \n\n### Susceptible features to help support the investigation into features of interest\n\n> The started_at and the trip_duration should help support the investigation.","bb859bd2":"Change values of member_casual column \n\n    * Subscriber to member\n    * Customer to casual","114de827":"Trips starting from 03:00 to 05:00  are more susceptible to be long.","aa67f93d":"**Define**","d55c518c":"Type of customer (customer_member) Vs month","4fc218d5":"1. Some columns are useless for different reasons\n\n    * rental_access_method (df_1) : exists only on 06\/19, 07\/19 and 10\/19\n    * bike_share_for_all_trip (df_1) : doesn't exist after 03\/20\n    * is_equity (df_2) :  exists only on 05\/20\n    * rideable_type (df_2) : exists only after 03\/20 ","7cb57918":"The **daytime** distribution\n","01cb1331":"**Define**","9c0b6a4e":"**Define**","5a643145":"**Code**","e0a7acc5":"#### Quality issues\n\n4. Negative trip_duration values in df_2_clean ( nb: this issue will be solved once the trip_duration columns is created for df_2 the tidiness issues phase)","cb9fbc79":"1. Columns names in df_1 and df_2 doesn't match \n\n    * df_1: duration_sec -------------- df_2: None\n    * df_1: user_type ----------------- df_2: member_casual\n    * df_1: bike_id -------------------- df_2: ride_id       \n    * df_1: start_time ----------------- df_2: started_at\n    * df_1: end_time ------------------ df_2: ended_at\n    * df_1: start_station_longitude --- df_2: start_lng\n    * df_1: start_station_latitude ----- df_2: start_lat\n    * df_1: end_station_latitude ------- df_2: end_lat\n    * df_1: end_station_longitude ----- df_2: end_lng","2e1cc938":"## Univariate Exploration\n\n> In this section, the distributions of individual variables will be investigated. \n","fbe3ca7f":"**Code**","a88876c5":"**Test**","ecfa4fd6":"4. df_1 and df_2 should be concatenated","560c8a60":"The trip duration mean is larger for casual type all over the day","027258ea":"### 4. Storing data","d929744e":"The **trip_duration** vs **casual_member**","8c8ea384":"Trip duration, member_casual and daytime","4bea3fc6":"- Set datatypes in df_1 as follow\n\n    * started_at       :    date_time\n    * ended_at         :    date_time\n    * start_station_id :    string\n    * bike_ride_id     :    string\n    * member_casual    :    category\n    \n    \n- Set datatype in df_2 as follow\n\n    * trip_duration :    time     # This one will be set after setting the trip_duration column in tidiness cleaning\n    * bike_ride_id  :    string\n    * started_at    :    date_time\n    * ended_at      :    date_time\n    * member_casual :    category   ","0a87a861":"First those DataFrame will be combined into two DataFrames because of difference of format before and after 04-2020  \n* df_1 before 04-20\n* df_2 after 04-20","dfaf6448":"The trip duration is larger the month","728618b4":"Trip duration, member_casual and weekday","7e28c397":"Accordong to months, the last two months the trip duration spread is larger, with a many outliers and the duration is more susceptible to long","406fe1ab":"trip_duration Vs month","c3ceb589":"3. A trip_duration column is missing in df_2\n","aeef91b7":"### Loading Data","77ec07a0":"**Code**","a3a5b095":"We have a bimodal distribution with some observations :\n* The two modes are from 08:00 to 10:00 and from 16:00 to 19:00\n* The number of trips is very low between 00:00 to 06:00\n* In the rest of the day the frequency is median","164ff8ff":"Concatenate df_1_clean and df_2_clean","4c3d26cd":"**Define**","3c2071bb":"2. There are some duplicated rows in df_1","a4755a5b":"Trip duration, member_casual and month","72093e29":"## Multivariate Exploration\n\n> Create plots of three or more variables to investigate your data even\nfurther. Make sure that your investigations are justified, and follow from\nyour work in the previous sections.","b5d705ab":"**Test**","21b2401d":"First a  copy of each dataframe will be made","1eabf709":"Order columns","2d18bb33":"df_1_clean.info()","e6c80ea4":"Delete rows with negative trip_duration values. <br>\nThis decision is token because a negative trip_duration value means a false started_at or ended_at value wich are the main features in this exploration  ","b1b0deff":"### 3. Cleaning Data","351de7a4":"Type of customer (customer_member) Vs daytime","d13726e4":"**Code**","fc9ef8f2":"trip_duration Vs daytime","1c389a6e":"6. Colums aren't well ordered\n","c49e141b":"**Code**","21acd18c":"The trip duration is more susceptible to long the two last months","c20def23":"#### Tidiness issues\n\n\n1. Some columns are useless for different reason\n\n    * rental_access_method (df_1) : exists only on 06\/19, 07\/19 and 10\/19\n    * bike_share_for_all_trip (df_1) : doesn't exist after 03\/20\n    * is_equity (df_2) :  exists only on 05\/20\n    * rideable_type (df_2) : exists only after 03\/20 \n    \n    \n2. There are some duplicated rows in df_1\n\n3. A trip_duration column is missing in df_2\n4. df_1 and df_2 should be concatenated\n","da397efe":"The exponential transformation is already done 'exp_trans', an yticks settings are neeeded","8e47ddcc":"Set a trip_duration column in df_2","c4bde659":"**Test**","003d5f3e":"**Define**","e5543b15":"* There is no proportionality between count member and casual count ( no correlation )\n* The count for member customer is larger all over the year the two last  month.","8deae2b9":"Number of trips for members is about two times greater than for casual","cd108d6c":"#### Quality issues","4aa8f65c":"**Code**","16dd0707":"**Test**","08e5a73c":"* The last month of 2019 has the lowest number of trip.   \n* January and February  2020 was the period with the highest number of trips.\n* April and Mai 2020 is the period with the lowest number of trips ( it coincide with the starting of the COVID-19 pandemic ).","6e0f52eb":"**Code**","ad3ccb0f":"**Test**","5b2be058":"**Code**","3883b80e":"### Relationship between variables \n\n> The trip duration distribution:\n\n* The distribution spread is larger for casual type than member type and the duration is susceptible to be longer\n* The trips starting from 03:00 to 05:00 are more susceptible to be long\n* Regarding weekdays the distribution is about the same except for the weekend the distribution spread is few larger in addition to many outlier and the duration is more susceptible to be long.\n* Regarding months the two last months the distribution spread is larger, and the the trip duration is susceptible to longer.\n\n### Interesting Observation\n\n> There is an negative correlation between the trip_duration mean and the trip count (when trip_duration mean is high the trip count is low)\nwich is an interesting observation\n","19e8f7cb":"#### Quality issues\n\n1. Columns names in df_1 and df_2 doesn't match \n\n    * df_1: duration_sec -------------- df_2: None\n    * df_1: user_type ----------------- df_2: member_casual\n    * df_1: bike_id ------------------- df_2: ride_id       \n    * df_1: start_time ---------------- df_2: started_at\n    * df_1: end_time ------------------ df_2: ended_at\n    * df_1: start_station_longitude --- df_2: start_lng\n    * df_1: start_station_latitude ---- df_2: start_lat\n    * df_1: end_station_latitude ------ df_2: end_lat\n    * df_1: end_station_longitude ----- df_2: end_lng\n    \n2. user_type values in df_1 doesn't match with member_casual values in df_2\n    \n3. erronious datatype \n\n- df_1:\n\n    * trip duration     (should be time)\n    * started_at        (should be date_time)\n    * ended_at          (should be date_time)\n    * start_station_id  (should be string)\n    * end_station_id    (should be string) \n    * bike_ride_id      (should be string)\n    * member_casual     (should be category)\n    \n\n- df_2:\n\n    * bike_ride_id      (should be string)\n    * started_at        (should be date_time)\n    * ended_at          (should be date_time)  \n    * start_station_id  (should be string)\n    * end_station_id    (should be string)         \n    * member_casual     (should be category)\n    \n4. Negative trip_duration values in df_2_clean ( nb: this issue will be solved once the trip_duration columns is created for df_2 the tidiness issues phase)\n5. The trip duration is in second wich is better to convert to minutes\n6. Colums aren't well ordered\n\n( nb: issue 4 and 5 will be solved once the trip_duration columns is created for df_2 and df_1 and df_2 are contaconated in the tidiness issues phase)","898f4459":"**Test**","e04db3fd":"2. user_type values in df_1 doesn't match with member_casual values in df_2\n","a5cb576f":"### 1. Gathering Data","f717835c":"**Define**","c756d29c":"### Relationship Observation\n\n> Trip for casual is more susceptible to be longer than member trip\n> The weekend and the two last month are more susceptible to be long\n\n### Interesting Observation\n\n> with the Corona virus pandemic (the two last months) trips are susceptible to be longer","c195739c":"**Test**","aa6e4376":"**Define**","ca3c8b7c":"# Ford GoBike System Data Exploration\n## By Rahal Mehdi Abdelaziz\n\n# I. Data Wrangling\n\n> This dataset contains bike trip informations from june 2019 to may 2020 (a whole year).\nEach trip is anonymized and includes:<br>\n\n* Trip Duration (seconds)\n* Start Time and Date\n* End Time and Date\n* Start Station ID\n* Start Station Name\n* Start Station Latitude\n* Start Station Longitude\n* End Station ID\n* End Station Name\n* End Station Latitude\n* End Station Longitude\n* Bike ID\n* User Type (Subscriber or Customer \u2013 \u201cSubscriber\u201d = Member or \u201cCustomer\u201d = Casual)","871c311e":"3. erronious datatype \n\n- df_1:\n\n    * trip duration     (should be time)\n    * started_at        (should be date_time)\n    * ended_at          (should be date_time)\n    * start_station_id  (should be string)\n    * end_station_id    (should be string) \n    * bike_ride_id      (should be string)\n    * member_casual     (should be category)\n    \n\n- df_2:\n\n    * bike_ride_id      (should be string)\n    * started_at        (should be date_time)\n    * ended_at          (should be date_time)  \n    * start_station_id  (should be string)\n    * end_station_id    (should be string)         \n    * member_casual     (should be category)\n    ","e81df36e":"**Test**","7abaec67":"The trip duration","13d1445a":"> Load in your dataset and describe its properties through the questions below.\nTry and motivate your exploration goals through this section.","ca33de64":"The trip duration distribution is about the same over the week except for weekends the spread is few larger , and the duration is more susceptible to be long","af9c5716":"* There is some proportionality between casual type count and member type count over the day time\n* The distribution for each customer type is bimodal as seen in the univariate exploration phase","154fadc8":"**Code**","14b8b4a5":"### 2. Assessing Data","450e14cd":"1. Drop usless columns\n\n    * rental_access_method (df_1)\n    * bike_share_for_all_trip (df_1)\n    * is_equity (df_2) \n    * rideable_type (df_2)","916813cc":"The trip duration is larger the weekend","ac68b3cb":"**Define**","0bf09014":"# II. Data Exploration","85f7c81c":"**Nb: negative values on the trip_duration column**","e5b9ac75":"- Column name in df_1 will be changed as follow\n\n    * user_type to member_casual\n    * bike_id to bike_ride_id ( this column will contain the bike_id or the ride_id )\n    * start_time to started_at\n    * end_time to ended_at\n    * start_station_longitude to start_lng\n    * start_station_latitude to start_lat\n    * end_station_latitude to end_lat\n    * end_station_longitude to end_lng\n    \n- ride_id column name in df_2 will be changed as bike_ride_id","4778874e":"**Define**","aada765b":"The number of trip over weekdays is about the same except for the weekend when it's relatively low","64051054":"According to this plot, member type is the category wich influence most the weekday distribution","bbf346ff":"**Test**","7b85ae76":"\n#### The distribution will be discussed regarding each variable separately\n\n     * The trip duration : Wit a exponential transformation there is a normal distribution.\n     * The daytime variable : The distribution is bimodal where there is two picks : from 08 to 09 and from  17 to 18.\n     * The weekday variable : Total number of trips on the weekend is less than other week days.\n     * The month variable : The total number of trips decrease in the end of the year 2019, increase remarkably the begining of 2020 (January and February) and decrease again until its minimum on April then increase again\n     * The member_casual variable (type of customer) : The number of trips all over the year ( from  2019-06 to 2020-05) for member customer are about two times the number for casual customer\n     \n\n\n> Other observation\n* The number of trips is low in weekends\n* The number of trips regarding months was at its max the starting of the 2020 year and decrease outstandingly on Mars, wich is caused by the coronavirus pandemic definetly.","3d1ebb3f":"5. The trip duration unit is second wich is better to convert to minute\n","ac8a4d14":"drop duplicated rows in df_1","be91d662":"**Define**","52c7e642":"**Test**","140f2b1f":"**Code**","b28f808f":"## Bivariate Exploration\nIn this section some bivariate exploration will be done, the trip duration needs an exponential transformation to get an significant graphs ","9bbb3158":"Convert trip duration to minute","cd6ebe96":"* The trip_duration distribution spread is a little larger for casual type.\n* The big difference in the mean is due to big number of upper outliers for casual member type.\n* The boxplot needed a log transformation","b6c6cfc1":"trip_duration Vs weekday","500b9347":"Type of customer (customer_member) Vs Weekday","cd5b2c1d":"With an exponential transformation the trip duration has a normal distribution"}}