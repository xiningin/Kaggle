{"cell_type":{"f62bf60c":"code","afdd432c":"code","a4ee359c":"code","f0c7d65a":"code","24a34cc8":"code","810b7026":"code","e511057c":"code","24285385":"code","0813ebac":"code","02bba380":"code","3a23f1b4":"code","17e9f16f":"code","e6339849":"code","c50056e0":"code","daf71f06":"code","79f19aae":"code","02538f23":"code","1c6a2065":"code","2245edd3":"code","7e46c475":"markdown","f89cb1b0":"markdown","f75ece76":"markdown","04328523":"markdown","5ea13630":"markdown","be2ec891":"markdown","96a5adc4":"markdown","546e493b":"markdown","8c8f1fbb":"markdown","185da476":"markdown","c267a113":"markdown","da301a36":"markdown","32729992":"markdown","6fe7baa4":"markdown","720f2593":"markdown","9481f30e":"markdown"},"source":{"f62bf60c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\n# Any results you write to the current directory are saved as output.","afdd432c":"train_application_df = pd.read_csv('..\/input\/application_train.csv')\ntest_application_df = pd.read_csv('..\/input\/application_test.csv')\nprevious_application_df = pd.read_csv('..\/input\/previous_application.csv')\nall_application_df = pd.concat([train_application_df, test_application_df], axis=0)","a4ee359c":"categorical_features = []\n\nfor column in train_application_df.columns:\n    if column == 'TARGET' or column == 'SK_ID_CURR':\n        continue\n    if train_application_df[column].dtype == 'object':\n        all_application_df[column], _ = pd.factorize(all_application_df[column])\n        categorical_features.append(column)\ncategorical_features = list(set(categorical_features))\nprint(len(categorical_features), categorical_features)","f0c7d65a":"# Code for cross validation\ndef cross_validation(df):\n    X = df[df['TARGET'].notna()]\n    Y = X.pop('TARGET')\n    if 'SK_ID_CURR' in df.columns:\n        X.pop('SK_ID_CURR')\n    num_fold = 5\n    skf = StratifiedKFold(n_splits=num_fold, shuffle=True, random_state=2018)\n    valid_scores = []\n    train_scores = []\n    \n    for train_index, test_index in skf.split(X, Y):\n        X_train, X_validation = X.iloc[train_index], X.iloc[test_index]\n        y_train, y_validation = Y.iloc[train_index], Y.iloc[test_index]\n        \n        clf = LGBMClassifier(\n            boosting_type='gbdt',\n            objective='binary',\n            n_estimators=1000,\n            learning_rate=0.1,\n            num_leaves=31,\n            feature_fraction=0.8,\n            subsample=0.8,\n            max_depth=8,\n            reg_alpha=1,\n            reg_lambda=1,\n            min_child_weight=40,\n            random_state=2018,\n            nthread=-1\n            )\n                   \n        clf.fit(X_train, y_train, \n                eval_set=[(X_train, y_train), (X_validation, y_validation)], \n                eval_metric='auc',\n                verbose = False,\n                early_stopping_rounds=100\n                )\n        \n        train_prediction = clf.predict_proba(X_train)[:, 1]\n        train_score = roc_auc_score(y_train, train_prediction)\n        train_scores.append(train_score)\n        \n        valid_prediction = clf.predict_proba(X_validation)[:, 1]\n        valid_score = roc_auc_score(y_validation, valid_prediction)\n        valid_scores.append(valid_score)\n        \n        print('Fold', train_score, valid_score, clf.best_iteration_)\n    print('AUC mean:', np.mean(valid_scores), 'std:',np.std(valid_scores))\n    ","24a34cc8":"cross_validation(all_application_df)","810b7026":"all_features = list(all_application_df.columns)\nall_features.remove('TARGET')\nall_features.remove('SK_ID_CURR')\n\nprint(len(all_features))\nprint(all_features)","e511057c":"from sklearn.preprocessing import MinMaxScaler, StandardScaler, RobustScaler\nimport matplotlib.pyplot as plt\n\n\n# Code for cross validation\ndef cross_validation_with_reduction(df, reducer, scaler):\n    X = df[df['TARGET'].notna()]\n    Y = X.pop('TARGET')\n    if 'SK_ID_CURR' in df.columns:\n        X.pop('SK_ID_CURR')\n    num_fold = 5\n    \n     # fill na\n    for feature in all_features:\n        X[feature] = X[feature].fillna(X[feature].mean())\n    \n    # scaling\n    X[all_features] = pd.DataFrame(scaler.fit_transform(X[all_features]))\n    \n    skf = StratifiedKFold(n_splits=num_fold, shuffle=True, random_state=2018)\n    valid_scores = []\n    train_scores = []\n    \n    for train_index, test_index in skf.split(X, Y):\n        X_train, X_validation = X.iloc[train_index], X.iloc[test_index]\n        y_train, y_validation = Y.iloc[train_index], Y.iloc[test_index]\n        \n        \n        reducer.fit(X_train[all_features], y_train)\n        train_reduced_samples = pd.DataFrame(reducer.transform(X_train[all_features]))\n        valid_reduced_samples = pd.DataFrame(reducer.transform(X_validation[all_features]))\n        \n        for feature in train_reduced_samples.columns:\n            X_train[feature] = train_reduced_samples[feature].values\n        \n        for feature in valid_reduced_samples.columns:\n            X_validation[feature] = valid_reduced_samples[feature].values\n        \n        clf = LGBMClassifier(\n            boosting_type='gbdt',\n            objective='binary',\n            n_estimators=1000,\n            learning_rate=0.1,\n            num_leaves=31,\n            feature_fraction=0.8,\n            subsample=0.8,\n            max_depth=8,\n            reg_alpha=1,\n            reg_lambda=1,\n            min_child_weight=40,\n            random_state=2018,\n            nthread=-1\n            )\n                   \n        clf.fit(X_train, y_train, \n                eval_set=[(X_train, y_train), (X_validation, y_validation)], \n                eval_metric='auc',\n                verbose = False,\n                early_stopping_rounds=100\n                )\n        \n        train_prediction = clf.predict_proba(X_train)[:, 1]\n        train_score = roc_auc_score(y_train, train_prediction)\n        train_scores.append(train_score)\n        \n        valid_prediction = clf.predict_proba(X_validation)[:, 1]\n        valid_score = roc_auc_score(y_validation, valid_prediction)\n        valid_scores.append(valid_score)\n        \n        print('Fold', train_score, valid_score, clf.best_iteration_)\n    print('AUC mean:', np.mean(valid_scores), 'std:',np.std(valid_scores))","24285385":"from sklearn.decomposition import PCA","0813ebac":"cross_validation_with_reduction(all_application_df, PCA(n_components=10), MinMaxScaler())","02bba380":"cross_validation_with_reduction(all_application_df, PCA(n_components=10), MinMaxScaler())","3a23f1b4":"cross_validation_with_reduction(all_application_df, PCA(n_components=10), RobustScaler())","17e9f16f":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA","e6339849":"cross_validation_with_reduction(all_application_df, LDA(n_components=10), MinMaxScaler())","c50056e0":"cross_validation_with_reduction(all_application_df, LDA(n_components=10), StandardScaler())","daf71f06":"cross_validation_with_reduction(all_application_df, LDA(n_components=10), RobustScaler())","79f19aae":"from sklearn.cross_decomposition import PLSSVD","02538f23":"cross_validation_with_reduction(all_application_df, PLSSVD(n_components=10), MinMaxScaler())","1c6a2065":"cross_validation_with_reduction(all_application_df, PLSSVD(n_components=10), StandardScaler())","2245edd3":"cross_validation_with_reduction(all_application_df, PLSSVD(n_components=10), RobustScaler())","7e46c475":"## 2.2 LDA\n","f89cb1b0":"# 1. Baseline","f75ece76":"# Label encoding","04328523":"### 2.2.3 RobustScaler , LDA","5ea13630":"## 2.3 PLS","be2ec891":"# 2. Dimensionality Reduction\n## 2.1 PCA","96a5adc4":"### 2.1.3 RobustScaler, PCA","546e493b":"### 2.2.2 StandardScaler , LDA","8c8f1fbb":"### 2.3.2 StandardScaler , PLS","185da476":"# Introduction\n* All Features from application csv + 10 top Reduced Components\n* PCA: Principal Component Analysis (unsupervised)\n* LDA: Linear Discriminant Analysis (supervised)\n* PLS: Partial Least Square SVD (supervised)\n\n# TLDR\/Result\n## [V1] Used all features & fillna with -1 for reduction\n| Method        | 5-fold mean AUC |\n| ------------- :-------------|\n| Baseline     |  0.75982 std: 0.0030946 | \n| MinMaxScaler, PCA     | 0.75852 std: 0.0030524  |\n| StandardScaler, PCA |   0.75834 std: 0.0029477  |\n| RobustScaler, PCA |  0.75826 std: 0.0034292 |\n| MinMaxScaler, LDA  | 0.76070 std: 0.0040072  |\n| StandardScaler, LDA | 0.76043 std: 0.0040373  |\n| RobustScaler, LDA |  **0.76080**  std: 0.0042677 |\n| MinMaxScaler, PLS  | 0.75966 std: 0.0033254  |\n| StandardScaler, PLS  | 0.75901 std: 0.0033388 |\n| RobustScaler, PLS |  0.75932 std: 0.0038315 |\n\n## [V2] Used only numerical features & fillna with mean for reduction\n| Method        | 5-fold mean AUC |\n| ------------- :-------------|\n| Baseline     |  0.75982 std: 0.0030946 | \n| MinMaxScaler, PCA     | 0.75849 std: 0.0031068  |\n| StandardScaler, PCA |   0.75888 std: 0.0031630  |\n| RobustScaler, PCA |   0.75903 std: 0.0026790 |\n| MinMaxScaler, LDA  |  **0.76058** std: 0.0030256  |\n| StandardScaler, LDA | 0.76042 std: 0.0031176  |\n| RobustScaler, LDA |  0.76051 std: 0.0029084 |\n| MinMaxScaler, PLS  | 0.75941 std: 0.0036380  |\n| StandardScaler, PLS  | 0.75944 std: 0.0034895 |\n| RobustScaler, PLS |  0.75905 std: 0.0034893  |\n\n## [V3] Used all features & fillna with mean for reduction\n| Method        | 5-fold mean AUC |\n| ------------- :-------------|\n| Baseline     |  0.75982 std: 0.0030946 | \n| MinMaxScaler, PCA     |  0.75857 std: 0.0023189  |\n| StandardScaler, PCA |   0.75842 std: 0.0028206  |\n| RobustScaler, PCA |   0.75857 std: 0.0030156  |\n| MinMaxScaler, LDA  |   0.76049 std: 0.0034916  |\n| StandardScaler, LDA | 0.76042 std: 0.0033096 |\n| RobustScaler, LDA |  **0.76052** std: 0.0035620  |\n| MinMaxScaler, PLS  | 0.75990 std: 0.0034749  |\n| StandardScaler, PLS  | 0.75934 std: 0.0032347 |\n| RobustScaler, PLS |  0.75955 std: 0.0032429  |","c267a113":"### 2.3.1 MinMaxScaler , PLS","da301a36":"### 2.1.2 StandardScaler, PCA","32729992":"### 2.1.1 MinMaxScaler, PCA","6fe7baa4":"### 2.3.3 RobustScaler , PLS","720f2593":"### 2.2.1 MinMaxScaler , LDA","9481f30e":"# Filter Features for Dimension Reduction"}}