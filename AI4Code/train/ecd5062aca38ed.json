{"cell_type":{"2f0b2934":"code","51eece14":"code","8144e2c9":"code","bb8afe98":"code","e0493988":"code","7b4bd453":"code","819a16da":"code","9738a9ba":"code","b343078b":"code","ad2042c4":"code","d356d180":"code","aa628258":"code","11c3cd34":"code","9d1dc7dc":"code","5310fd72":"code","5cb320e5":"code","2c4c4c61":"code","42b4a271":"code","69fa2b8c":"code","1b287b77":"code","c732267f":"code","b764d9f9":"code","03924450":"code","427ed96e":"code","6b2c9a11":"code","4b200704":"code","e32bade0":"code","0d25f817":"code","7af9ea65":"code","4a23f746":"code","84915072":"code","a438f636":"markdown","5ec746ad":"markdown","765d34fa":"markdown","fa62fe7d":"markdown","8c5f5a85":"markdown","81acbe74":"markdown"},"source":{"2f0b2934":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","51eece14":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report, auc, f1_score, precision_recall_curve, confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV, KFold\nfrom sklearn.preprocessing import normalize\nsns.set_style('darkgrid')\nfrom sklearn.metrics import roc_auc_score, roc_curve","8144e2c9":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain.head()","bb8afe98":"train.shape","e0493988":"test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest.head()","7b4bd453":"test.shape","819a16da":"train.describe()","9738a9ba":"test.describe()","b343078b":"train.isnull().sum()","ad2042c4":"test.isnull().sum()","d356d180":"train.Age = train.Age.fillna(train['Age'].mean())\ntrain.Embarked = train.Embarked.fillna(np.random.choice(['C','Q','S']))\ntest.Age = test.Age.fillna(test['Age'].mean())\ntest.Fare = test.Fare.fillna(test['Fare'].mean())","aa628258":"train.isnull().sum()","11c3cd34":"test.isnull().sum()","9d1dc7dc":"train.corr()","5310fd72":"plt.figure(figsize = (8,6))\nsns.heatmap(train.corr())","5cb320e5":"plt.figure(figsize = (8,6))\nsns.heatmap(test.corr())","2c4c4c61":"fig, axes = plt.subplots(2,4,figsize=(18,12))\nsns.countplot(x = 'Sex', data = train, ax = axes[0,0], edgecolor = 'blue')\nsns.countplot(x = 'Survived', data = train, ax = axes[0,1], edgecolor = 'blue')\nsns.countplot(x = 'Parch', data = train, ax = axes[0,2], edgecolor = 'blue')\nsns.countplot(x = 'SibSp', data = train, ax = axes[0,3], edgecolor = 'blue')\nsns.countplot(x = 'Embarked', data = train, ax = axes[1,0], edgecolor = 'blue')\nsns.countplot(x = 'Pclass', data = train, ax = axes[1,1], edgecolor = 'blue')\nsns.distplot(train['Age'], ax = axes[1,2] )\nsns.distplot(train['Fare'], ax = axes[1,3])\nplt.show()","42b4a271":"# pie chart for Male-Female %age\nplt.figure(figsize = (8,6))\nplt.title('Male-Female percent', fontsize = 20)\nx_sex, y_sex = train.Sex.value_counts(normalize=True)*100\nwedges = plt.pie([x_sex, y_sex], labels = ['Male','Female'], colors = ['green','blue'], autopct = '%.2f%%', \n                 textprops = {'color':'Black','size':20})\nplt.show()","69fa2b8c":"# pie chart for survived-not survived\nplt.figure(figsize=(8,6))\nplt.title('Survived-Not Srvived percent', fontsize=20)\nx_surv, y_surv = train.Survived.value_counts(normalize=True)*100\nplt.pie([x_surv,y_surv],labels = ['Survived','Not Survived'], colors = ['green','blue'], autopct= '%.2f%%',\n       textprops = {'color':'black', 'size': 20})\nplt.show()","1b287b77":"def get_title(string):\n    if '.' in string:\n        return string.split(',')[1].split('.')[0].strip()\n    else:\n        return 'N.F'\n\ndef replace_titles(x):\n    title = x['Title']\n    if title in ['Capt','Col','Dona','Don','Jonkheer','Major','Rev','Sir']:\n        return 'Mr'\n    elif title in ['the Countess','Mme','Lady']:\n        return 'Mrs'\n    elif title in ['Mlle','Ms']:\n        return 'Miss'\n    elif title == 'Dr':\n        if x['Sex']=='male':\n            return 'Mr'\n        else:\n            return 'Mrs'\n    else:\n            return title\n        \ntrain['Title'] = train['Name'].apply(get_title)\ntemp_title = train.apply(replace_titles, axis = 1)\ntemp_title.value_counts()\nsur = train[train['Survived']==1]\nsurvived_title = sur.apply(replace_titles, axis=1)\nsurvived_title.value_counts()","c732267f":"temp_title.value_counts()","b764d9f9":"# Train Set Creation\ntrain['Ticket'] = train['Ticket'].apply(lambda x: str(x))\ntrain['Ticket'] = train['Ticket'].apply(lambda x: len(x))\ntrain['Title'] = train['Name'].apply(get_title)\ntrain['Title'] = train.apply(replace_titles, axis = 1)\ndrop_cols = ['PassengerId','Name','Cabin','Title']\nencode_cols = ['Sex','Embarked','Title']\nencode_after = pd.get_dummies(train[encode_cols])\nfinal_data = train.copy()\nfinal_data = final_data.drop(drop_cols, axis=1)\nfinal_data = pd.concat([final_data, encode_after], axis = 1)\nprint(final_data.columns)\nfinal_data.drop(['Sex','Embarked'],axis = 1, inplace = True)\nfinal_data.head()","03924450":"# Test Set Creation\ntest['Ticket'] = test['Ticket'].apply(lambda x: str(x))\ntest['Ticket'] = test['Ticket'].apply(lambda x: len(x))\ntest['Title'] = test['Name'].apply(get_title)\ntest['Title'] = test.apply(replace_titles, axis = 1)\nencode_cols_test = pd.get_dummies(test[encode_cols])\nfinal_test = test.copy()\nfinal_test = final_test.drop(['PassengerId','Name','Cabin','Sex','Embarked','Title'], axis = 1)\nfinal_test = pd.concat([final_test, encode_cols_test], axis=1)\nprint(final_test.columns)\nfinal_test.head()","427ed96e":"gender = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ngender.head()","6b2c9a11":"X_train = final_data.iloc[:,1:]\ny_train = final_data.iloc[:,0]\nX_test = final_test.iloc[:,:]\ny_test = gender.iloc[:,1:]","4b200704":"model = LogisticRegression()\nmodel.fit(X_train,y_train)\ny_predict = model.predict(X_test)\nprint(classification_report(y_test, y_predict))\nprint(confusion_matrix(y_test, y_predict))\nprint(accuracy_score(y_test,y_predict))","e32bade0":"auc_score_model = roc_auc_score(y_test,y_predict)\nprint('AUROC Score : {0}'.format(round(auc_score_model, 4)))\nfpr, tpr, threshold = roc_curve(y_test, y_predict)\nplt.figure(figsize = (12,7))\nplt.plot([0,1],[0,1],'--')\nplt.plot(fpr,tpr,'-*',color = 'Red', label = 'ROC Curve Area : {0}'.format(round(auc_score_model, 4)))\nplt.xlabel('False Positive rate', fontdict = {'fontsize':15})\nplt.ylabel('True Positive rate', fontdict = {'fontsize': 15})\nplt.title('ROC-AUC Curve (Logistic Regression)', fontdict = {'fontsize':20})\nplt.legend()\nplt.show()","0d25f817":"model1 = RandomForestClassifier()\nmodel1.fit(X_train, y_train)\ny1_predict = model1.predict(X_test)\nprint(classification_report(y_test, y1_predict))\nprint(confusion_matrix(y_test, y1_predict))\nprint(accuracy_score(y_test,y1_predict))","7af9ea65":"auc_score_model1 = roc_auc_score(y_test,y1_predict)\nprint('AUROC Score : {0}'.format(round(auc_score_model1, 4)))\nfpr, tpr, threshold = roc_curve(y_test, y1_predict)\nplt.figure(figsize = (12,7))\nplt.plot([0,1],[0,1],'--')\nplt.plot(fpr,tpr,'-*',color = 'Red', label = 'ROC Curve Area : {0}'.format(round(auc_score_model1, 4)))\nplt.xlabel('False Positive rate', fontdict = {'fontsize':15})\nplt.ylabel('True Positive rate', fontdict = {'fontsize': 15})\nplt.title('ROC-AUC Curve (Logistic Regression)', fontdict = {'fontsize':20})\nplt.legend()\nplt.show()","4a23f746":"# As accuracy is more with Logistic regression, so it is taken as finalized model.","84915072":"submission = pd.DataFrame({\n       \"PassengerId\": gender['PassengerId'],\n       \"Survived\": y1_predict\n})\n\nsubmission.PassengerId = submission.PassengerId.astype(int)\nsubmission.Survived = submission.Survived.astype(int)\n\nsubmission.to_csv('titanic_submission.csv', index = False)","a438f636":"Importing Libraries & Data Set","5ec746ad":"# Title Encoding","765d34fa":"# Model2 = Random Forest","fa62fe7d":"# Visualization","8c5f5a85":"# Model1 = Logistic Regression","81acbe74":"# EDA"}}