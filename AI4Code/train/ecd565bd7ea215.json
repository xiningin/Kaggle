{"cell_type":{"eee417a5":"code","6eec2269":"code","fb43364f":"code","c1c397a4":"code","933bfb9c":"code","ceb9b13a":"code","857eb841":"code","f01d8874":"code","b995c1d1":"code","60aacb75":"code","1557ac9c":"code","07f0f053":"code","256c0cd3":"code","c42625bf":"code","da751cc1":"code","8ecf0ff6":"code","8721ced4":"code","2176a120":"code","f0b9db8a":"code","0b0f487b":"code","fc3c4fc5":"code","b05ec6c8":"code","c3b1b91f":"code","5a16d342":"code","5d178805":"code","9c2458a8":"code","c9ac43ae":"code","47624ae0":"code","36fedeb5":"code","4d23d608":"code","f8be460e":"code","abf53e6d":"code","247218b8":"code","6f2a5f63":"code","78dcbf2c":"code","dd04c198":"code","c14f405f":"code","24ef055b":"code","0264d5a8":"code","6ed10172":"code","0ad5c40c":"code","65dc8c8e":"code","7a0ac655":"code","2aa7f568":"code","1b5721c6":"code","fcf84c0e":"code","7f06f651":"code","50240599":"code","57d76373":"code","22bf60f2":"code","3b92f3eb":"code","3fb56e17":"code","2ce38ac8":"code","ba880314":"code","076aee93":"code","f46df083":"code","a456f976":"code","d609ef98":"code","2b291546":"code","c3fd1099":"code","07aea253":"code","7b4c7e4b":"code","df6b4996":"markdown","bc71104a":"markdown","f59f5679":"markdown","52698e12":"markdown","ddd1bd6e":"markdown","71c56b2e":"markdown","1b8fc7b1":"markdown","146e2e2c":"markdown","8c1d8256":"markdown","3a8ceada":"markdown","8ec53181":"markdown","e45395d5":"markdown","8353812e":"markdown","34be56a9":"markdown","e380abe5":"markdown","130d2365":"markdown","c78e1976":"markdown","c4e3f48f":"markdown","87fff724":"markdown","10f957d3":"markdown","6f445745":"markdown","3795292f":"markdown","08477b05":"markdown"},"source":{"eee417a5":"variable = 0","6eec2269":"print(variable)","fb43364f":"variable = \"Decision Management Notebook\"","c1c397a4":"print(variable)","933bfb9c":"if (variable == 0): print(\"Success\")\nelse: print(\"Failure\")","ceb9b13a":"var = 10\nif (var>=20 and var<=15): print(\"This is CIA 3 Decision Management Assignment\")\nelif (var>10): print(\"CIA3 is to be submitted\")\nelse: print(\"CIA3 is ready to be submitted\")","857eb841":"# For Loop\nfor i in range(1, 10):\n    print(str(i)*i)","f01d8874":"# while loop in Python\ni = 1\nwhile(i<10):\n    print(i**i)\n    i+=1","b995c1d1":"# tuple - an immutable collection of items\ntup = (1, 2, 3, 4)\nfor i in tup:\n    print(i)","60aacb75":"# loop the tuple by index of the tuple & trying to change its values\nfor i in range(0, len(tup)):\n    tup[i] += 10\n    print(i, tup)","1557ac9c":"# list - a mutable collection of items\nlists = [1, 2, 3, 4, 5, 6]\nfor i in lists:\n    print(i)","07f0f053":"# loop the list by index & trying to change its values\nfor i in range(0, len(lists)):\n    lists[i] += 10\n    print(i, lists)","256c0cd3":"# dictionary: key:value store where keys are immutable, but values are mutable\nd = {}\nfor i in range(10):\n    d.update({i: \"Value \" + str(i)})\nprint(d)","c42625bf":"# fetch a particular value using key from dictionary\nprint(d[5])\nprint(d[8])","da751cc1":"age = input(\"Enter your age:\")\nprint(age, type(age))","8ecf0ff6":"# functions are reusable code blocks\ndef print_name(name):\n    print(name)\n\nprint(\"Decision Management\")\nprint(\"CIA3\")\nprint(\"Kunal Sharma (1928917)\")","8721ced4":"# functions can also return values & raise Exceptions (code raising alerts for incorrect input)\ndef operate_two_numbers(number1, number2, operation):\n    op = operation.lower()\n    if (op==\"add\"): return number1 + number2\n    elif (op==\"minus\"): return number1 - number2\n    elif (op==\"multiply\"): return number1 * number2\n    elif (op==\"divide\"): return number1 \/ number2\n    else: raise Exception(\"No such operation found!\")","2176a120":"operate_two_numbers(1, 2, \"minus\")","f0b9db8a":"operate_two_numbers(1, 2, \"helo\")","0b0f487b":"file_location = '\/kaggle\/input\/indian-food-101\/indian_food.csv'\nwith open(file_location) as f:\n    content = f.readlines()\n    for line in content:\n        print(line)","fc3c4fc5":"# reading data from a CSV file\nimport pandas as pd\n\ncovid_file_path = '..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv'\ndf = pd.read_csv(covid_file_path)\n\n# show the first five rows along with headers\ndf.head()","b05ec6c8":"df.count()","c3b1b91f":"# number of columns\/variables and their data types\ndf.info()","5a16d342":"# check if ObservationDate is null\nod_series = pd.isnull(df[\"ObservationDate\"])\ndf[od_series]","5d178805":"# check if Country\/Region is null\nod_series = pd.isnull(df[\"Country\/Region\"])\ndf[od_series]","9c2458a8":"# check if Province\/State is null\nod_series = pd.isnull(df[\"Province\/State\"])\ndf[od_series]","c9ac43ae":"# filter records\/data for India\nindianDf = df.loc[df['Country\/Region'] == 'India']","47624ae0":"# know about the dataframe columns statistics\nindianDf.describe()","36fedeb5":"selectedIndianDf = indianDf[['ObservationDate', 'Confirmed', 'Deaths', 'Recovered']][indianDf['ObservationDate'] == '09\/23\/2020']\\\n.groupby('ObservationDate').aggregate(['sum']).reset_index()","4d23d608":"selectedIndianDf.head()","f8be460e":"selectedIndianDf.info()","abf53e6d":"selectedIndianDf[['ObservationDate', 'Confirmed', 'Deaths', 'Recovered']]","247218b8":"import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(20,7)) # used for deciding the size of the chart\nindianDf.groupby('ObservationDate').aggregate(['sum']).reset_index().plot(x ='ObservationDate', \n                                                                          y=['Confirmed', 'Recovered', 'Deaths'], \n                                                                          kind = 'line', \n                                                                          ax=ax)\nplt.show()","6f2a5f63":"books_file_path = '..\/input\/amazon-top-50-bestselling-books-2009-2019\/bestsellers with categories.csv'\ndf = pd.read_csv(books_file_path)\n\n# show the first five rows along with headers\ndf.head()","78dcbf2c":"df.count()","dd04c198":"df.info()","c14f405f":"df.describe()","24ef055b":"genreDf = df[['Year', 'Genre', 'Name']].groupby([\"Year\", \"Genre\"]).aggregate(['count']).reset_index()","0264d5a8":"genreDf.columns = [\"_\".join(x) for x in genreDf.columns]","6ed10172":"genreDf.head()","0ad5c40c":"genreDf.info()","65dc8c8e":"import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(20,7)) # used for deciding the size of the chart\n\ngenreDf.set_index(['Year_', 'Genre_']).plot(kind='bar', ax=ax)\nplt.show()","7a0ac655":"df.sort_values(by=['Reviews'], inplace=False, ascending=False)[:10]","2aa7f568":"import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(20,7))\ndf.plot(x='User Rating', y='Reviews', kind='scatter', ax=ax)\nplt.show()","1b5721c6":"df","fcf84c0e":"import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(20,7))\ndf[['Name', 'Genre']].groupby(['Genre']).aggregate(['count']).plot(kind='pie', y = ('Name', 'count'), ax=ax, autopct='%1.1f%%', \n startangle=90, shadow=True, labels=df['Genre'], legend = False, fontsize=14)\nplt.title('Books by Genre')\nplt.axis('equal')\nplt.show()","7f06f651":"# correlation plot\nimport seaborn as sns #Visualization\ncorr = df.corr()\nsns.heatmap(corr, cmap = 'Wistia', annot= True)","50240599":"# reading data from a CSV file\nimport pandas as pd\n\nhouse_file_path = '..\/input\/housesalesprediction\/kc_house_data.csv'\ndataset = pd.read_csv(house_file_path).dropna() # removing n\/a values to clean the data\n\n# show the first five rows along with headers\ndataset.head()","57d76373":"dataset.columns","22bf60f2":"import seaborn as sns #Visualization\ncorr = dataset[['price', 'bedrooms', 'bathrooms', 'sqft_living', 'floors', 'sqft_lot', 'yr_built', 'yr_renovated']].corr()\nsns.heatmap(corr, cmap = 'Wistia', annot= True)","3b92f3eb":"import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(20,7))\ndataset.plot(x='price', y='sqft_living', kind='scatter', ax=ax)\nplt.show()","3fb56e17":"import numpy as np \n\n# space is independent variable and price is the dependent variable\nspace=dataset['sqft_living'] # deciding independent variable\nprice=dataset['price'] # deciding on dependent variable\n\nx = np.array(space).reshape(-1, 1) # converting the shape of the data as per the required format of Linear Regression Model\ny = np.array(price) # converting the shape of the data as per the required format of Linear Regression Model","2ce38ac8":"# Splitting the data into two subsets - Train data and Test data\n# Training data will be used for training the model\nfrom sklearn.model_selection import train_test_split \nxtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=1\/3, random_state=0)","ba880314":"# Training Linear Regression Model using Training Dataset\nfrom sklearn.linear_model import LinearRegression \nregressor = LinearRegression()\nregressor.fit(xtrain, ytrain)","076aee93":"# Predicting the prices\npred = regressor.predict(xtest)","f46df083":"# Visualizing the training Test Results \nplt.scatter(xtrain, ytrain, color= 'red')\nplt.plot(xtrain, regressor.predict(xtrain), color = 'blue')\nplt.title (\"Visuals for Training Dataset\")\nplt.xlabel(\"Space\")\nplt.ylabel(\"Price\")\nplt.show()","a456f976":"# Visualizing the Test Results \nplt.scatter(xtest, ytest, color= 'red')\nplt.plot(xtrain, regressor.predict(xtrain), color = 'blue')\nplt.title(\"Visuals for Test DataSet\")\nplt.xlabel(\"Space\")\nplt.ylabel(\"Price\")\nplt.show()","d609ef98":"from sklearn import metrics\nprint(\"MAE:\", metrics.mean_absolute_error(ytest, pred))\nprint('MSE:', metrics.mean_squared_error(ytest, pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(ytest, pred)))","2b291546":"dataset[['price', 'sqft_living']].describe()","c3fd1099":"# Checking the predictions for house sizes 1530, 1020, 1600, 290\npred[1530], pred[1020], pred[1600], pred[290]","07aea253":"x","7b4c7e4b":"y","df6b4996":"**Creating Functions in Python**","bc71104a":"**Confirming the correlation between price & sqft_living**","f59f5679":"**Complex Data Structures in Python**","52698e12":"**Check for outliers & correlation between User Rating & Reviews**","ddd1bd6e":"> **Data Science** - Linear Regression Model (Predicting House Price)","71c56b2e":"**Top Selling Books by Genre**","1b8fc7b1":"**Plotting the line chart for the COVID-19 cases in India**","146e2e2c":"**Aggregate the COVID-19 cases by Confirmed, Deaths, and Recovered patients**","8c1d8256":"**Data Analytics Case 1**","3a8ceada":"**Loops in Python**","8ec53181":"**Best selling books per Year by Genre**","e45395d5":"**Taking User Input**","8353812e":"**Basics of Python**","34be56a9":"List - A complex data structure in Python","e380abe5":"**Top 10 Books in the descending order of User Reviews**","130d2365":"**Checking for Correlation between the numerical variables**","c78e1976":"**Verifying Linear Regression Model Accuracy**","c4e3f48f":"**Data Analytics Case 2**","87fff724":"**Conditional Statements in Python**","10f957d3":"**Correlation Matrix between various numerical variables**","6f445745":"**Data Science - Linear Regression Model Building**","3795292f":"Dictionary - A complex data structure in Python","08477b05":"**Reading a File using Python**"}}