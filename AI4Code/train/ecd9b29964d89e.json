{"cell_type":{"58c81faf":"code","c8b9d1e4":"code","09942267":"code","5d96cacd":"code","6946742c":"code","41185053":"code","68be8285":"code","d9770e0f":"code","3ee49489":"code","34796094":"code","d63c5226":"code","974521dc":"code","74a6e37f":"code","e0621538":"code","5010edb8":"code","775d2aa0":"code","1a748c2c":"code","8a42c8cf":"code","16be0cb5":"code","9c432c6b":"code","22687b25":"code","29ddb484":"code","efe28edb":"code","45cdc535":"code","51bacea5":"code","9a8056e8":"code","519c2ea3":"code","588ff007":"code","a1ee8482":"code","3ece0173":"code","044ff323":"code","ce602a87":"code","82314b00":"code","0a38a2e7":"code","0784a207":"code","e3f01416":"code","5bb200ce":"code","71acb655":"code","c179eaa9":"code","334f028c":"code","79ec69f1":"code","ea3a8681":"code","5068793f":"code","9790cf3b":"code","5940c644":"code","8f9299eb":"code","d610e012":"code","770da3f6":"code","5d030458":"code","a3b7472d":"code","bc809832":"code","9184a52a":"code","4c565d09":"code","9cd376a5":"code","f2576a82":"code","072fdb64":"code","86b99021":"code","ed522492":"code","8dda15ab":"code","65611f87":"code","6ddbf597":"code","0c1abf45":"code","6cc9b85a":"code","98895c0a":"code","835b5c3d":"code","fa78e5cd":"code","a5050402":"code","a6f249c2":"code","26300838":"code","aeaf6285":"code","65be7237":"code","7f26bb21":"code","7ae72620":"code","b4c02f8c":"code","9cef6d80":"code","d4c628d8":"code","85c2db11":"code","829a8ba9":"code","4a304997":"code","e874ecf7":"code","aa9a72eb":"code","e6dd54b0":"code","f87681fd":"code","11bb79c0":"code","72154678":"code","671ec57b":"code","33667749":"code","5dea00af":"code","fadab216":"code","0888a581":"code","ef32a3b7":"code","6b1ff0f7":"code","3ee9a468":"code","cf8da8e8":"code","856d1152":"code","c9b83cb9":"code","7975d1ea":"code","6f8ef5f2":"code","c81b8263":"code","9fc58477":"code","593e14f2":"code","3c348f95":"code","f8e10df2":"code","e7f76fa0":"code","f6ad895f":"code","188d4399":"code","0b05062f":"code","a2e24d3b":"code","7fef43f5":"code","96632ae3":"code","a4c4cfec":"code","18d2a1bc":"code","1a59713e":"code","7186af7c":"code","a2212787":"code","1fa68cd2":"code","d5d09fea":"code","5b00f6c1":"markdown","c7ba1ff1":"markdown","db91e4dd":"markdown","7a550f12":"markdown","9936a28e":"markdown","bba468c6":"markdown","0e9462f9":"markdown","88619a69":"markdown","bc17d3c7":"markdown","2316e444":"markdown","330063fa":"markdown","128d640b":"markdown"},"source":{"58c81faf":"#import the packages\nimport numpy as np\nimport pandas as pd","c8b9d1e4":"my_exp = pd.Series([10,25,100,23])\nmy_exp[2]","09942267":"my_exp.index =['day1','day2','day3','day4']\nmy_exp","5d96cacd":"my_exp[['day4','day2','day4']]","6946742c":"my_exp.index = ['day1','day2','day3','day4']\nmy_exp","41185053":"my_exp['day2']","68be8285":"my_exp[['day1','day3']]","d9770e0f":"my_exp[['day3','day2']]","3ee49489":"my_exp[[0,2]]","34796094":"data = pd.Series([2,3,4,7,4],index=['row 1','row 2','row 3','row 4','row 5'])","d63c5226":"data = pd.Series([2,3,4,7,4])\ndata.index=['row 1','row 2','row 3','row 4','row 5']","974521dc":"data","74a6e37f":"data['row 3']","e0621538":"s_data = pd.Series([2,3,4.2,'5'],index=['row 1','row 2','row 3','row 4'])\nprint(s_data[2]) # selecting in Index\nprint(s_data['row 4']) # selecting by label","5010edb8":"s_data2 = pd.Series([3,9,6])\ns_data2.index = ['row 1',\"row 2\",'row 3']\ns_data2","775d2aa0":"series_data = pd.Series([4,7,10,'DataMites',4.2])\nprint(series_data)","1a748c2c":"series_data2 = pd.Series([34,23,20])\nprint(series_data2)","8a42c8cf":"#row label assignment with index\nseries_data2.index = ['row 1','row 2', 'row 3']\nseries_data2","16be0cb5":"#retrieving value with label name\nseries_data2['row 2']","9c432c6b":"#label assignment during initiation\nseries1 = pd.Series([2,3,5,6],index=['row 1', 'row 2','row 3','row 4'])\nseries1","22687b25":"#retrieving multiple values with label as reference\nseries2= pd.Series(np.arange(8), index=['row 1', 'row 2','row 3', 'row 4','row 5', 'row 6','row 7', 'row 8'])\nseries2[['row 4','row 2']]","29ddb484":"#retrieve records by label with slicing operator colon (:)\nseries2['row 2':'row 5']","efe28edb":"#Retrieving with index through slicing\ndata","45cdc535":"data[['row 2','row 5']]","51bacea5":"data['row 2':'row 4']","9a8056e8":"np.random.randint(25)","519c2ea3":"df1 = pd.DataFrame(np.random.randint(10,100,25)\n                .reshape(5,5))","588ff007":"%pwd","a1ee8482":"cars = pd.read_csv('..\/input\/mtcars.csv')\nprint(cars.shape)\ncars.head()","3ece0173":"type(cars)","044ff323":"cars.head(3)","ce602a87":"cars.iloc[2:5,0:4]","82314b00":"cars.loc[2:5,:]","0a38a2e7":"cars[ (cars.hp>100) & (cars.mpg>30)]","0784a207":"cars.shape","e3f01416":"cars.loc[[2,4],:'wt']","5bb200ce":"# Retrieve data with columns : Car_model, mpg, wt \n#for cars with HP > 150","71acb655":"cars.loc[(cars.hp>150),['car_model','mpg','wt']]","c179eaa9":"col_names = list(cars.columns)\ntype(col_names)\ncol_names[0] = 'model'\ncars.columns = col_names","334f028c":"rvar = np.random.randint(0,31,5)\ncars.loc[rvar, :]","79ec69f1":"cars.iloc[[4,16],0:11:2]","ea3a8681":"df1.iloc[2:4,[2,3]]","5068793f":"df1.columns = ['col1','col2','col3','col4','col5']\ndf1.index = ['row1','row2','row3','row4','row5']","9790cf3b":"df1","5940c644":"# 6,7,8, 16,17,18 , 21,22,23\n\ndf1.loc[['row2','row4','row5'],'col2':'col4']","8f9299eb":"df1.loc[['row2','row5'],['col1','col3']]","d610e012":"data[2:4]","770da3f6":"#DataFrame object, Combining muliple Series as columns\ndata1 = pd.DataFrame([[2,3,4,5],[8,2,4,2],[12,23,9,3]])\n#Assigning labels to columns\ndata1.columns = ['col 1','col 2','col 3','col 4']\n#Assigning labels to rows\ndata1.index = ['row 1','row 2','row 3']\ndata1","5d030458":"#DataFrame from random numbers generated through numpy\ndf1 = pd.DataFrame(np.floor(np.random.rand(36).reshape(6,6)*100))\ndf1","a3b7472d":"%pwd","bc809832":"cars = pd.read_csv('mtcars.csv')","9184a52a":"cars.shape","4c565d09":"cars.head()","9cd376a5":"cars.isnull().sum()","f2576a82":"#Importing Data to DataFrame from CSV, comma separated value\ncars = pd.read_csv(\"..\/input\/mtcars.csv\")\ncars.head()  # head function displays first 5 rows","072fdb64":"#reassigning column namesm\ncars.columns = ['car_model','mpg','cyl', 'disp', 'hp', 'drat', 'wt', 'qsec', 'vs', 'am', 'gear', 'carb']\ncars.head()","86b99021":"#Statistical data analysis with pandas.DataFrame.describe()\ncars.describe()","ed522492":"#retrieving data from DataFrame with index using iloc function\ncars.iloc[3:10,2:6]","8dda15ab":"# slicing of Series data with labels\ns_data = pd.Series([2,3,4.2,'5',6,9],index=['row 1','row 2','row 3','row 4','row 5','row 6'])\ns_data['row 2':'row 5']","65611f87":"#observe that start value is excluded unlike label indexer\ns_data[2:4]","6ddbf597":"# retrieving data from cars DataFrame ","0c1abf45":"cars.head()","6cc9b85a":"#slicing row and columns of dataframe with loc\ncars.loc[2:6,'mpg':'hp']","98895c0a":"#Retrieving multiple columns with list\ncars.loc[2:6,['cyl','drat','wt']]","835b5c3d":"cars.loc[:,'hp':]","fa78e5cd":"#leaving empty before slicing operator colon, assumes starting index\ncars.loc[2:6,:'wt']","a5050402":"cars.loc[[6,5],['wt','hp','car_model']]","a6f249c2":"mpg = cars.mpg\nhp = cars.hp\ncars[(mpg>25) & (hp>100)]","26300838":"cars[(cars.am==1) & (hp>150)]","aeaf6285":"#leaving empty after slicing operator colon, assumes end index\ncars.loc[2:6,'cyl':]","65be7237":"cars.head(2)","7f26bb21":"cars.loc[:,'hp']\ncars.head(2)","7ae72620":"cars[(cars.hp>200) & (cars.wt<5)]","b4c02f8c":"cars[(cars.mpg>30) & (cars.hp>100)]","9cef6d80":"manual_powerful_cars = cars[(cars.am==0) & (cars.hp>150)]","d4c628d8":"manual_powerful_cars.head()","85c2db11":"#Using logical and comparision operators to retrieve required data from DataFrame\nauto_cars = cars[(cars.am == 1) & (cars.hp<100) ]\nauto_cars.head()","829a8ba9":"#Another example\ncars[(cars.hp >110) & (cars.am == 1)]","4a304997":"#real world data is normaly comes with some missing data. treating them is import part of data preparation\n#missing value is represented by NAN. Using numpy.nan to create missing values in cars DataFrame\n#cars.loc[2,'hp'] = '?'\n#cars.loc[3,'hp'] = '?'\ncars.loc[1,'hp'] = '?'\ncars.loc[3,'mpg'] = np.nan\ncars.loc[2,'mpg'] = np.nan\ncars.loc[4,'hp'] = np.nan\ncars.loc[4,'wt'] = np.nan\n\ncars.head(5)\n","e874ecf7":"cars.info()","aa9a72eb":"# \\ is called as escape char, which means to consider char following\n# as char not special one.\ncars.hp.str.contains('\\?').sum()","e6dd54b0":"import numpy as np\ncars.hp.replace('?',np.nan,inplace=True)","f87681fd":"cars.head()","11bb79c0":"cars.loc[1,'wt']=np.nan","72154678":"cars.head(6)","671ec57b":"cars.isnull()","33667749":"cars.dropna()","5dea00af":"cars.isnull().sum()","fadab216":"cars.head()","0888a581":"# filling missing value with constant. \n# This is not recommended normally as it doesn't approximate nearest value of missing value, resulting poor analysis\ncars.fillna(cars.mean())","ef32a3b7":"#Treating missing value with forward filling. filling with value above the misssing value\ncars.fillna(method='bfill')","6b1ff0f7":"cars.head()","3ee9a468":"#Treating missing value with back filling. filling with value below the misssing value\ncars.fillna(cars.mean())","cf8da8e8":"cars.loc[2,:]=np.nan","856d1152":"cars.head()","c9b83cb9":"#Treating missing value with mean value.\ncars.fillna(cars.mean()) # normally leads better results","7975d1ea":"nonan_cars = cars.dropna()\n","6f8ef5f2":"nonan_cars.shape","c81b8263":"cars.dropna(inplace=True)  # this drops missing row and replaces result to actual dataframe","9fc58477":"cars.dropna(how=\"all\") #Only drops row when all columns of that row is empty\n","593e14f2":"import pandas as pd\ndata = pd.DataFrame([[1,2,2,3,3,3,4,4],\n                  ['a','b','b','c','c','c','d','c'],\n                  ['A','B','B','C','C','C','D','D']])\ndata = data.transpose()","3c348f95":"data.columns = ['col 1','col 2', 'col 3']\ndata","f8e10df2":"data.drop_duplicates()","e7f76fa0":"data.drop_duplicates(['col 2','col 3']) #drops rows with same values in all columns","f6ad895f":"data.drop_duplicates(['col 2','col 3']) #drops rows with same values in specified column, col 3 here.","188d4399":"#Use drop_duplicates()\ndata.transpose()","0b05062f":"cars.head()","a2e24d3b":"#use sort_values to sort dataframe\ncars.sort_values(['hp','wt'], ascending=True)\n","7fef43f5":"#adding new records\nnew_data = pd.DataFrame(['Tata Nano',40,2,120,60,2.5,1.1,10,0,0,4,2])\nnew_data= new_data.transpose()\nnew_data","96632ae3":"new_data.columns = cars.columns\nnew_data.head()","a4c4cfec":"cars_updated = pd.concat([cars,new_data], ignore_index=True)\ncars_updated","18d2a1bc":"cars_updated.loc[0,:]","1a59713e":"# dropping columns\ncars_updated","7186af7c":"cars.head()","a2212787":"np.nan==np.nan","1fa68cd2":"cars[cars.hp==cars.isnull()]","d5d09fea":"cars.drop('mpg',axis=1)  # axis =1 implies to operate on columns, axis = 0 (default) applies row operation","5b00f6c1":"## Droping Data\n","c7ba1ff1":"## Removing Duplicates","db91e4dd":"# Data Slicing","7a550f12":"# Filtering with Scalars","9936a28e":"# End of Pandas Tutorial","bba468c6":"## Transforming Data","0e9462f9":"### Filling missing value with fillna() function","88619a69":"# Selecting and retrieving Data","bc17d3c7":"# Treating missing values in python","2316e444":"## Sorting Data in DataFrame","330063fa":"### Removing rows with missing values with Dropna()","128d640b":"# Pandas Quick overview\nPandas is built over Numpy\nDataFrame is pretty much like spread sheet\n"}}