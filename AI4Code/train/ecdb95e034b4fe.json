{"cell_type":{"2d3ade98":"code","5cfbd06b":"code","69fb9b77":"code","52965062":"code","51e99553":"code","a663c422":"code","71795f52":"code","e724ce25":"code","16115e41":"code","64118056":"code","89583ad5":"code","1b6b46c8":"code","e6c957ba":"code","87564784":"code","eb247cfc":"code","cef37cd2":"code","3263841e":"code","3541e76a":"code","9d02f6c3":"code","46b03525":"code","742f7513":"code","c979dad2":"code","0beda85e":"code","65e8f9c3":"code","4c2e71f6":"code","1e9e9b27":"code","af3aad4c":"code","8be2faa5":"code","9ed94452":"code","8c5d7d5b":"code","90a102e3":"code","c728b7cd":"code","b3862319":"code","76cc10ee":"code","5a2f3cfb":"code","cb5f13ab":"code","9b8d7ca7":"code","52e53eee":"code","7cb5df11":"code","0a7b6f1f":"code","9019f6ae":"code","c00b563e":"code","d700f64e":"code","6efdb88d":"code","67abcd99":"code","94f3b192":"code","fdf358be":"code","73715ccf":"code","82be296e":"code","b53e8974":"code","2139db27":"code","5c74fbdd":"code","5ea093c7":"code","05365b54":"code","dc97b174":"code","f0daf2a0":"code","6cc5795d":"code","f5e20538":"code","a846bf09":"code","b4048d27":"code","161c3c00":"code","2d8ec489":"code","463721eb":"code","8ed43721":"code","415ee826":"code","a5107fd8":"code","c257ef5b":"code","43b7e04a":"code","749eb715":"code","e5e373b4":"code","6898dcb0":"code","f116b21d":"code","90c523e3":"code","68b6023d":"code","36a1a97e":"code","687422f2":"code","7a702bcf":"code","f912d972":"code","ebf9a241":"code","48a9daea":"code","0da83b82":"code","c6001e37":"code","5ec6b1ce":"code","550d6bcf":"code","50615704":"code","32fa6670":"code","e308aab8":"code","cb6d3563":"code","59410b4d":"code","19b8d09d":"code","dd8a3930":"code","92285c34":"code","77fc937b":"code","c46e594a":"code","f4cabdb2":"code","703c786f":"code","5ca65c04":"markdown","0c4f3041":"markdown","6c281493":"markdown","c89247f8":"markdown","815c912c":"markdown","8bee4b50":"markdown","13491669":"markdown","f359ea62":"markdown"},"source":{"2d3ade98":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n%matplotlib inline","5cfbd06b":"titanic_train = pd.read_csv(\"https:\/\/gist.githubusercontent.com\/michhar\/2dfd2de0d4f8727f873422c5d959fff5\/raw\/ff414a1bcfcba32481e4d4e8db578e55872a2ca1\/titanic.csv\",\n                           sep='\\t')   ","69fb9b77":"# we can have a look to our first n rows of dataframe ( n = number of rows, (default it is 5)) \ntitanic_train.head()","52965062":"# we can check the shape of the dataframe\ntitanic_train.shape","51e99553":"# Shows last 10 rows of dataset\ntitanic_train.tail(10)","a663c422":"# shows datatypes of all the columns present in the dataframe\ntitanic_train.dtypes","71795f52":"titanic_train.dtypes == \"object\"","e724ce25":"# Checking the summaries of categorical data.\na = titanic_train.dtypes[titanic_train.dtypes == \"object\"].index\nprint(a)\ntitanic_train[a].describe()","16115e41":"# Checking summaries of numerical Data\ntitanic_train.describe()\n# we can use include=all to get categorical aswell.","64118056":"titanic_train.dtypes[titanic_train.dtypes == \"object\"].index","89583ad5":"titanic_train[['Name','Sex','Age']]","1b6b46c8":"sorted(titanic_train[\"Name\"])[5:10:2]\n# we are slicing the dataframe from 5th row to 9th row with the jump size of 2","e6c957ba":"titanic_train[\"Name\"].describe()","87564784":"titanic_train[[\"Ticket\"]][4:9]","eb247cfc":"titanic_train[\"Ticket\"].describe()","cef37cd2":"titanic_train.columns # Used to see all the column names of DataFrame","3263841e":"#We Can Add a new column to our dataframe\/\ntitanic_train[\"Purvansh\"]=\"Purvansh\"\ntitanic_train.head()","3541e76a":"titanic_train[\"Cabin\"][0:15]       # Check the first 15 tickets","9d02f6c3":"# Check number of unique cabins\ntitanic_train['Name'].unique()","46b03525":"titanic_train[\"Survived\"]","742f7513":"titanic_train[titanic_train[\"Survived\"] == 1].shape","c979dad2":"titanic_train.columns","0beda85e":"titanic_train.describe()","65e8f9c3":"# we Can See See the details of Categorial Data\nnew_Pclass = pd.Categorical(titanic_train[\"Pclass\"])\nnew_Pclass","4c2e71f6":"new_Pclass = pd.Categorical(titanic_train[\"Sex\"])\nnew_Pclass","1e9e9b27":"titanic_train[\"Cabin\"].unique()   # Check unique cabins","af3aad4c":"import numpy as np \nchar_cabin = titanic_train[\"Cabin\"].astype(str) # Convert data to str\n\nnew_Cabin = [cabin[0] for cabin in char_cabin] # Take first letter\n\nnew_Cabin = pd.Categorical(new_Cabin)\n#new_Cabin\nnew_Cabin","8be2faa5":"# Setting new cabin values to the dataframe\ntitanic_train[\"Cabin\"] = new_Cabin\ntitanic_train.head()","9ed94452":"# checking for NAN values\ntitanic_train[\"Age\"].isnull()","8c5d7d5b":"# Getting the places where there is NULL in Age\nmissing = np.where(titanic_train[\"Age\"].isnull() == True)\nmissing","90a102e3":"titanic_train.Age.iloc[5]","c728b7cd":"# Getting the places where there is maximum fare\nnp.where(titanic_train[\"Fare\"]==max(titanic_train[\"Fare\"]))","b3862319":"# DataFrame where the fare is maximum\ntitanic_train.iloc[np.where(titanic_train[\"Fare\"]==max(titanic_train[\"Fare\"]))]","76cc10ee":"len(missing[0])","5a2f3cfb":"titanic_train[\"Family\"] = titanic_train[\"SibSp\"] + titanic_train[\"Parch\"]\ntitanic_train[\"Family\"]\nmost_family = np.where(titanic_train[\"Family\"] == max(titanic_train[\"Family\"]))\nmost_family\n#titanic_train.iloc[most_family]","cb5f13ab":"titanic_train[\"Family\"] = titanic_train[\"SibSp\"] + titanic_train[\"Parch\"]\n\nmost_family = np.where(titanic_train[\"Family\"] == max(titanic_train[\"Family\"]))\nmost_family\ntitanic_train.iloc[most_family]","9b8d7ca7":"import numpy as np\nimport pandas as pd\n\nlabels = ['a','b','c']\nmy_data = [10,20,30]\narr = np.array(my_data)\nd = {'a':10,'b':20,'c':30}\n\nprint (\"Labels:\", labels)\nprint(\"My data:\", my_data)\nprint(\"Dictionary:\", d)\npd.Series(my_data, index=labels)","52e53eee":"print (\"\\nHolding numerical data\\n\",'-'*25, sep='')\nprint(pd.Series(arr)[1])","7cb5df11":"print (\"\\nHolding text labels\\n\",'-'*20, sep='')\nprint(pd.Series(labels))","0a7b6f1f":"# Series Using Dictionary\nd = {'a':\"Purvansh\",'b':20,'c':30}\nd.items\npd.DataFrame(d,index = ['a','b','c'])","9019f6ae":"print (\"\\nHolding objects from a dictionary\\n\",'-'*40, sep='')\nprint(pd.Series([type, sum, max]))","c00b563e":"ser1 = pd.Series([1,2,3,4],index = [2,4,6,8])\nser2 = pd.Series([1,2,5,4],['CA', 'OR', 'NV', 'AZ'])\nser1","d700f64e":"ser2","6efdb88d":"ser1[0:3:2]","67abcd99":"print (\"\\nIndexing by number (positional value in the series)\\n\",'-'*52, sep='')\nprint(\"Value for CA in ser1:\", ser1[8])\nprint(\"Value for AZ in ser1:\", ser1[4])\nprint(\"Value for AZ in ser1:\", ser1.iloc[1])\nprint(\"Value for NV in ser2:\", ser2[2])\nser1","94f3b192":"print (\"\\nIndexing by a range\\n\",'-'*25, sep='')\nprint (\"Value for OR, CO, and AZ in ser1:\\n\", ser1[0:3:2], sep='')","fdf358be":"# It will add indexwise\nser1 = pd.Series([1,2,3,4],['CA', 'OR', 'CO', 'CA'])\nser2 = pd.Series([1,2,5,4],['CA', 'NV', 'AZ','OR'])\nser3 = ser1+ser2\nser3","73715ccf":"print (\"\\nAfter adding the two series, the result looks like this...\\n\",'-'*59, sep='')\nprint(ser3)\nprint(\"\\nPython tries to add values where it finds common index name, and puts NaN where indices are missing\\n\")\n","82be296e":"print (\"\\nThe idea works even for multiplication...\\n\",'-'*43, sep='')\nprint (ser1*ser2)","b53e8974":"from numpy.random import randn as rn\nnp.random.seed(101)\nmatrix_data = rn(5,4)\nrow_labels = ['A','B','C','D','E']\ncolumn_headings = ['W','X','Y','Z']\ndf = pd.DataFrame(matrix_data,index=row_labels,columns=column_headings)\nprint(\"\\nThe data frame looks like\\n\",'-'*45, sep='')\nprint(df)","2139db27":"# getting DataFrame with column name\ndf['Z']","5c74fbdd":"# getting DataFrame with row_name\ndf.loc['E']","5ea093c7":"# getting DataFrame with row_number\ndf.iloc[2]","05365b54":"df.loc[:,'Z']","dc97b174":"print(\"\\nType of the pair of columns: \", type(df[['X','Z']]), sep='')\nprint (\"\\nSo, for more than one column, the object turns into a DataFrame\")","f0daf2a0":"print(\"\\nThe 'X' column accessed by DOT method (NOT recommended)\\n\",'-'*55, sep='')\nprint(df[\"X\"])\ndf.X","6cc5795d":"print(\"\\nA column is created by assigning it in relation to an existing column\\n\",'-'*75, sep='')\ndf['New'] = df['X']+df['Z']\ndf['New (Sum of X and Z)'] = df['X']+df['Z']\nprint(df)","f5e20538":"df","a846bf09":"df.drop('New (Sum of X and Z)',inplace=True,axis=1)\ndf","b4048d27":"df1=df.drop('A')\nprint(\"\\nA row (index) is dropped by using df.drop() method and axis=0\\n\",'-'*65, sep='')\nprint(df1)","161c3c00":"df","2d8ec489":"print(\"\\nLabel-based 'loc' method can be used for selecting row(s)\\n\",'-'*60, sep='')\nprint(\"\\nSingle row\\n\")\nprint(df.loc['A'])","463721eb":"print(\"\\nMultiple rows\\n\")\nprint(df.loc[['B','D']])","8ed43721":"print(\"\\nIndex position based 'iloc' method can be used for selecting row(s)\\n\",'-'*70, sep='')\nprint(\"\\nSingle row\\n\")\nprint(df.iloc[2])","415ee826":"print(\"\\nMultiple rows\\n\")\nprint(df.iloc[[1,2]])","a5107fd8":"matrix_data = rn(5,4)\nrow_labels = ['A','B','C','D','E']\ncolumn_headings = ['W','X','Y','Z']\ndf = pd.DataFrame(data=matrix_data, index=row_labels, columns=column_headings)","c257ef5b":"print(\"\\nThe DatFrame\\n\",'-'*45, sep='')\nprint(df)\n","43b7e04a":"print(\"\\nElement at row 'B' and column 'Y' is\\n\") \nprint(df.loc[['B','C'],['Y','W']])","749eb715":"print(\"\\nSubset comprising of rows B and D, and columns W and Y, is\\n\")\ndf.iloc[[1,2,3],[0,1]]","e5e373b4":"print(df.loc[['B','C'],])","6898dcb0":"print(\"\\nThe DataFrame\\n\",'-'*45, sep='')\nprint(df)","f116b21d":"print(\"\\nBoolean DataFrame(s) where we are checking if the values are greater than 0\\n\",'-'*75, sep='')\nprint(df>0)","90c523e3":"print(\"\\n\")\nprint(df.loc[['A','B','C']]>0)","68b6023d":"booldf = df>0\nprint(\"\\nDataFrame indexed by boolean dataframe\\n\",'-'*45, sep='') # It will replace False values with Nan\nprint(df[booldf])","36a1a97e":"import pandas as pd \nimport numpy as np\n# Via String Input\nmatrix_data = np.matrix('22,66,140;42,70,148;30,62,125;35,68,160;25,62,152')\nrow_labels = ['A','B','C','D','E']\ncolumn_headings = ['Age', 'Height', 'Weight']\nmatrix_data","687422f2":"df = pd.DataFrame(data=matrix_data, index=row_labels, columns=column_headings)\nprint(\"\\nA new DataFrame\\n\",'-'*25, sep='')\nprint(df)","7a702bcf":"df['Height']>65","f912d972":"df>65","ebf9a241":"print(\"\\nRows with Height > 65 inch\\n\",'-'*35, sep='')\ndf[df['Height']>65]","48a9daea":"df['Height']>65","0da83b82":"booldf1 = df['Height']>65\nbooldf2 = df['Weight']>145","c6001e37":"print(\"\\nRows with Height > 65 inch and Weight >145 lbs\\n\",'-'*55, sep='')\nprint(df[(booldf1) & (booldf2)])","5ec6b1ce":"print(\"\\nDataFrame with only Age and Weight columns whose Height > 65 inch\\n\",'-'*68, sep='')\nprint(df[booldf1][['Age','Weight']])","550d6bcf":"matrix_data = np.matrix('22,66,140;42,70,148;30,62,125;35,68,160;25,62,152')\nrow_labels = ['A','B','C','D','E']\ncolumn_headings = ['Age', 'Height', 'Weight']","50615704":"df = pd.DataFrame(data=matrix_data, index=row_labels, columns=column_headings)\nprint(\"\\nThe DataFrame\\n\",'-'*25, sep='')\ndf","32fa6670":"# It will reset our index to default index starting with 0 and make a new xolumn as index\nprint(\"\\nAfter resetting index\\n\",'-'*35, sep='')\ndf = df.reset_index()\ndf","e308aab8":"df.drop('index',axis=1,inplace=True)","cb6d3563":"print(\"\\nAfter resetting index with 'drop' option TRUE\\n\",'-'*45, sep='')\nprint(df.reset_index(drop=True))\n\"Student Teacher Engineer Doctor Nurse\".split()","59410b4d":"print(\"\\nAdding a new column 'Profession'\\n\",'-'*45, sep='')\ndf['Profession'] = \"Student Teacher Engineer Doctor Nurse\".split()\ndf","19b8d09d":"# Setting Index\nprint(\"\\nSetting 'Profession' column as index\\n\",'-'*45, sep='')\ndf.set_index('Profession')","dd8a3930":"# Index Levels\noutside = ['G1','G1','G1','G2','G2','G2']\ninside = [1,2,3,1,2,3]\nhier_index = list(zip(outside,inside))","92285c34":"print(\"\\nTuple pairs after the zip and list command\\n\",'-'*45, sep='')\nprint(hier_index)","77fc937b":"hier_index = pd.MultiIndex.from_tuples(hier_index)\nprint(\"\\nIndex hierarchy\\n\",'-'*25, sep='')\nprint(hier_index)","c46e594a":"print(\"\\nIndex hierarchy type\\n\",'-'*25, sep='')\nprint(type(hier_index))","f4cabdb2":"print(\"\\nCreating DataFrame with multi-index\\n\",'-'*37, sep='')\n#np.random.seed(101)\ndf1 = pd.DataFrame(data=np.round(rn(6,3)), index= hier_index, columns= ['A','B','C'])\ndf1","703c786f":"print(\"\\nGrabbing a cross-section from outer level\\n\",'-'*45, sep='')\nprint(df1.xs('G1'))","5ca65c04":"# *BOOLEAN MASKING*","0c4f3041":"## Loading data in DataFrame.","6c281493":"#### Subsetting DataFrame","c89247f8":"# cross tabulation like pivot table","815c912c":"## Always remember to use bitwise operator for adding logical conditions to boolean dataframes","8bee4b50":"# multi-indexing","13491669":"# Series","f359ea62":"### Selecting\/indexing Rows\nLabel-based 'loc' method\n\nIndex (numeric) 'iloc' method"}}