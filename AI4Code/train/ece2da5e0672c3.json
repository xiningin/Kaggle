{"cell_type":{"e4056bfa":"code","7bc7ed17":"code","2c8667bb":"code","d460c0aa":"code","3244d29b":"code","e22b7092":"code","366026ec":"code","af9ba508":"code","ca55eb1c":"code","7b0da2c0":"code","a3a34929":"code","020b3cef":"code","c56856d4":"code","996b9f74":"code","74936e76":"code","ff83fa6f":"code","5ea22e65":"code","71a7ce60":"code","4b429d64":"code","426846ea":"code","26e63736":"code","2aac0fea":"code","1048e5b0":"code","91ab62b1":"code","136229f3":"code","5391ec96":"code","78317aa1":"code","22fcaf6f":"code","a6f5027f":"code","a0615172":"code","904633bb":"code","7ec7dd62":"code","a5c3259c":"code","9f348c40":"code","12546955":"code","6bba112f":"code","75c963fc":"code","3e66fde2":"code","1dfcb54f":"code","9548c8c0":"code","de82efec":"code","4d607c82":"code","cbf1e235":"code","69ec1dc0":"code","5a637faf":"code","6b6c30da":"code","54e2555d":"code","ed0e738e":"code","a5c137ad":"code","e3107eaf":"code","e444a3c3":"code","dba1d34f":"code","d14bf820":"code","6ba23afe":"code","0e8ba1c6":"code","166083ae":"code","15082ba5":"code","28607395":"code","94fd439b":"code","c17e403d":"code","23b6fd37":"code","fc37bd97":"code","41ec90f0":"code","215dc39e":"code","9c326917":"code","852c6726":"code","bafc832d":"code","3c851f54":"code","b1abac1d":"code","3c895639":"code","21cdb401":"code","57545d13":"code","3873fd68":"code","1ac0a4bf":"code","3019745d":"code","8b61e942":"code","984b83c0":"code","a071e276":"code","b77a3612":"code","41ea521b":"code","d51d5fe2":"code","5950ccd8":"code","35bb0995":"code","e5eb4dd9":"code","8688ceb4":"code","56227af9":"code","2cf89041":"code","11255bfc":"code","29b8489a":"code","a94b6375":"code","16dc0435":"code","d4a520c7":"code","b7ec5e31":"code","931ada00":"code","40c6214e":"code","d63bb9dd":"code","ab511663":"code","4a8d3fe1":"code","d2f039c7":"code","7652f645":"code","a61b503e":"code","1d9a2f94":"code","415fa2b0":"code","b1d2819f":"code","4ec9aab3":"code","5623dff7":"code","198b2695":"code","4366ac27":"code","108f5be0":"code","b545c93d":"code","ec40c8ad":"code","7598a365":"code","77a442e5":"code","767bb53c":"code","a1cbfa3b":"code","70626a45":"code","5450308f":"code","730e2ccd":"code","7e268d92":"code","e4ab4f76":"code","3ea5289c":"code","d06f29cd":"code","7755a1ad":"code","4bf79f12":"code","0a79c8a3":"code","59dfd30c":"code","a7ec663f":"code","940a1235":"code","b8e2fe0b":"code","3790c11a":"code","ad2ab2f7":"code","3d13cba5":"code","3cd6b58e":"code","091423c4":"code","dc8f2748":"code","d84f7a02":"code","fd2e5d95":"code","a24a9af7":"code","9573eb0e":"code","08ee6521":"code","44356cd0":"code","f2990256":"code","481134f6":"code","98b71fb9":"code","0f11a685":"code","74da86d9":"code","a8582819":"code","7a0d300c":"code","e1e19f90":"code","9c4ff989":"code","d07d6e5a":"code","9c4665b6":"code","b705dd5a":"code","7cb6dd8a":"code","bcbb9fb5":"code","2c93ae49":"code","8d3b5d8f":"code","d7de8721":"code","ab56477a":"code","6cbc3e25":"code","40d37d79":"code","6948a8e6":"code","8740c15d":"code","b4e69d3f":"code","b017c254":"code","cec3b77b":"code","081444e3":"code","7f417c80":"code","1433d27c":"code","81bcd4a3":"code","fb4b0950":"code","a1ee965c":"code","ccd3659d":"code","948291fe":"code","72615caa":"markdown","c8e37ab3":"markdown","36ce5761":"markdown","23f3331c":"markdown","76691482":"markdown"},"source":{"e4056bfa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7bc7ed17":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","2c8667bb":"pd.set_option('display.max_columns',None)\npd.set_option('display.max_rows',500)","d460c0aa":"train.head()","3244d29b":"test.head()","e22b7092":"train.shape,test.shape","366026ec":"data = pd.concat([train,test])\ndata.shape","af9ba508":"data.isnull().sum()","ca55eb1c":"numeric_columns = [i for i in data.columns if data[i].dtypes != 'object']\ncategorical_columns = [i for i in data.columns if data[i].dtypes == 'object']","7b0da2c0":"print('NUMERIC COLUMNS')\nprint(numeric_columns)\nprint('*'*50)\nprint('CATEGORICAL COLUMNS')\nprint(categorical_columns)","a3a34929":"numeric_and_nan = [i for i in data.columns if data[i].dtypes != 'object' and data[i].isnull().sum() > 0]\ncategorical_and_nan = [i for i in data.columns if data[i].dtypes == 'object' and data[i].isnull().sum() > 0]","020b3cef":"data[numeric_columns].isnull().sum()","c56856d4":"data[numeric_and_nan].isnull().sum()","996b9f74":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nplt.style.use(\"ggplot\")\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")","74936e76":"def plot_kdeplot(data,column,hue=None,multiple=None,cumulative=False, common_norm=False, common_grid=False,log_scale=False):\n    return sns.kdeplot(x=data[column],hue=hue,multiple=multiple,cumulative=cumulative,common_norm=common_norm,common_grid=common_grid,log_scale=log_scale)\n    ","ff83fa6f":"def plot_distplot(df,column,color='red'):\n    return sns.distplot(df[column],color=color)","5ea22e65":"def get_nan_index(df,column):\n    return df.loc[pd.isna(df[column]),:].index","71a7ce60":"index_ = []\nfor feature in numeric_and_nan:\n    index_.append(get_nan_index(data,feature))","4b429d64":"for i in index_:\n    plt.hist(i, density=True, bins=20)\n    plt.grid()\n    plt.show()","426846ea":"def cal_outliers_quantile(df,column):\n    IQR = df[column].quantile(0.75) - df[column].quantile(0.25)\n    lower_bridge = df[column].quantile(0.25) - (IQR*1.5)\n    upper_bridge=df[column].quantile(0.75) + (IQR*1.5)\n    \n    return lower_bridge,upper_bridge","26e63736":"for feature in numeric_columns:\n    lower_lot_frontage,upper_lot_frontage = cal_outliers_quantile(data,feature)\n    print('Outliers for',feature,'is',lower_lot_frontage,',',upper_lot_frontage)\n    print(data[(data[feature] < lower_lot_frontage) | (data[feature] > upper_lot_frontage)].shape[0])\n    print('*'*50)","2aac0fea":"plot_distplot(data,'LotFrontage')","1048e5b0":"data['newLotFrontage_median'] = data['LotFrontage'].fillna(data['LotFrontage'].median())","91ab62b1":"plot_distplot(data,'newLotFrontage_median')","136229f3":"data['newLotFrontage_mean'] = data['LotFrontage'].fillna(data['LotFrontage'].mean())","5391ec96":"plot_distplot(data,'newLotFrontage_mean')","78317aa1":"data['LotFrontage'].head()","22fcaf6f":"sns.kdeplot(data['LotFrontage'])","a6f5027f":"data[data['LotFrontage'] > 150].shape","a0615172":"#data.drop(data[data['LotFrontage'] >= 150].index,inplace=True)","904633bb":"plot_distplot(data,'LotFrontage')","7ec7dd62":"sns.kdeplot(data['LotFrontage'])","a5c3259c":"from sklearn.impute import KNNImputer\n\nimputer =  KNNImputer(n_neighbors=3)","9f348c40":"sns.distplot(data['MasVnrArea'])","12546955":"print(\"Number of house which don't have Masonry veneer wall:\",data[data['MasVnrArea'] <= 0].shape[0])","6bba112f":"plt.hist(data['MasVnrArea'])\nplt.show()","75c963fc":"data[data['MasVnrArea'] > 1000].shape","3e66fde2":"#data.drop(data[data['MasVnrArea'] > 1000].index,inplace=True)","1dfcb54f":"data['MasVnrArea'].fillna(0.0,inplace=True)","9548c8c0":"data['BsmtFinSF1'].head()","de82efec":"sns.distplot(data['BsmtFinSF1'])","4d607c82":"#data.drop(data[data['BsmtFinSF1'] > 2000].index,inplace=True)","cbf1e235":"data['BsmtFinSF1'].bfill(inplace=True)","69ec1dc0":"data['BsmtFinSF2'].bfill(inplace=True)","5a637faf":"data['BsmtFinSF2'].unique()","6b6c30da":"plt.hist(data['BsmtFinSF2'])\nplt.show()","54e2555d":"data['BsmtUnfSF'].unique()","ed0e738e":"relation_bsmt = data[['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF']].corr()","a5c137ad":"relation_bsmt","e3107eaf":"data.drop(['BsmtFinSF2','BsmtUnfSF'],axis=1,inplace=True)","e444a3c3":"data['TotalBsmtSF'].bfill(inplace=True)","dba1d34f":"numeric_and_nan","d14bf820":"data['BsmtFullBath'].bfill(inplace=True)","6ba23afe":"data['BsmtHalfBath'].bfill(inplace=True)","0e8ba1c6":"sns.distplot(data['GarageYrBlt'])","166083ae":"data[['GarageCars','GarageArea']].corr()","15082ba5":"#dropping garagecars\ndata.drop('GarageCars',axis=1,inplace=True)","28607395":"data.shape","94fd439b":"data[categorical_and_nan].isnull().sum()","c17e403d":"for value in categorical_and_nan:\n    print('Value:',value)\n    print(data[value].value_counts())\n    print('*'*50)","23b6fd37":"data['Fence'].fillna('None',inplace=True)\ndata['FireplaceQu'].fillna('None',inplace=True)","fc37bd97":"data.drop(['PoolQC','MiscFeature','Utilities'],axis=1,inplace=True)","41ec90f0":"data['MSZoning'].ffill(inplace=True)","215dc39e":"data.drop('Alley',axis=1,inplace=True)","9c326917":"categorical_and_nan.remove('PoolQC')\ncategorical_and_nan.remove('MiscFeature')\ncategorical_and_nan.remove('Utilities')\ncategorical_and_nan.remove('Alley')","852c6726":"categorical_and_nan.remove('Fence')\ncategorical_and_nan.remove('FireplaceQu')","bafc832d":"def encode_categorical(feature_list):\n    for label in feature_list:\n        temp_names = list(data[label].unique())\n        temp_values = list(range(0,len(temp_names)))\n        temp_dict = dict(zip(temp_names,temp_values))\n        data[label] = data[label].map(temp_dict)\n        del temp_names,temp_values,temp_dict\n    return data    ","3c851f54":"new_categorical_features = [i for i in data.columns if data[i].dtypes == 'object']","b1abac1d":"data = encode_categorical(categorical_and_nan)","3c895639":"data.isnull().sum()","21cdb401":"data.drop(['newLotFrontage_median','newLotFrontage_mean'],axis=1,inplace=True)","57545d13":"data['GarageYrBlt'].fillna(2000,inplace=True)","3873fd68":"data['GarageArea'].ffill(inplace=True)","1ac0a4bf":"data.head()","3019745d":"data.isnull().sum()","8b61e942":"for label in new_categorical_features:\n    print('Label',label)\n    print(data[label].value_counts())\n    print('*'*50)","984b83c0":"data.drop(['Street','Condition2','RoofMatl'],axis=1,inplace=True)","a071e276":"new_categorical_features.remove('Street')","b77a3612":"new_categorical_features.remove('Condition2')","41ea521b":"new_categorical_features.remove('RoofMatl')","d51d5fe2":"data = encode_categorical(new_categorical_features)","5950ccd8":"data.head()","35bb0995":"data.dtypes == 'object'","e5eb4dd9":"from statsmodels.graphics.gofplots import qqplot","8688ceb4":"fig = qqplot(train['SalePrice'],line='s')\nfig.show()","56227af9":"data.head()","2cf89041":"data_corr = data.corr()","11255bfc":"data[['MSSubClass','MSZoning']].corr()","29b8489a":"data[['LotFrontage','LotArea','LotShape','LotConfig','SalePrice']].corr()","a94b6375":"data.drop('LotArea',axis=1,inplace=True)","16dc0435":"data[['Condition1','SalePrice']].corr()","d4a520c7":"data.drop(['Condition1'],axis=1,inplace=True)","b7ec5e31":"data[['OverallQual','OverallCond','SalePrice']].corr()","931ada00":"data[['Exterior1st','Exterior2nd','SalePrice']].corr()","40c6214e":"data.drop('Exterior1st',axis=1,inplace=True)","d63bb9dd":"data[['MasVnrType','MasVnrArea','SalePrice']].corr()","ab511663":"bsmt_list = data.columns[24:31]","4a8d3fe1":"bsmt_list","d2f039c7":"data[bsmt_list].corr()","7652f645":"data[['Heating','HeatingQC']].corr()","a61b503e":"data[['1stFlrSF','2ndFlrSF']].corr()","1d9a2f94":"data.columns","415fa2b0":"data[['GarageType','GarageYrBlt','GarageFinish','GarageArea','GarageQual','GarageCond','SalePrice']].corr()","b1d2819f":"data.drop(['GarageQual','GarageCond'],axis=1,inplace=True)","4ec9aab3":"data.shape","5623dff7":"sorted_data_corr = data_corr['SalePrice'].sort_values(ascending=False)","198b2695":"type(sorted_data_corr)","4366ac27":"sorted_data_corr.index[0]","108f5be0":"sorted_data_corr","b545c93d":"dictionary_corr = {}\nfor i in range(len(sorted_data_corr.index)):\n    if sorted_data_corr[i] >= 0.2 or sorted_data_corr[i] <=  -0.2:\n        dictionary_corr[sorted_data_corr.index[i]] = sorted_data_corr[i]","ec40c8ad":"len(dictionary_corr),len(sorted_data_corr)","7598a365":"dictionary_corr","77a442e5":"for i in data.columns:\n    if i not in dictionary_corr.keys():\n        data.drop(i,axis=1,inplace=True)","767bb53c":"set(data.columns).difference(dictionary_corr.keys())","a1cbfa3b":"data.head()","70626a45":"for feature in data.columns:\n    lower_lot_frontage,upper_lot_frontage = cal_outliers_quantile(data,feature)\n    print('Outliers for',feature,'is',lower_lot_frontage,',',upper_lot_frontage)\n    print(data[(data[feature] < lower_lot_frontage) | (data[feature] > upper_lot_frontage)].shape[0])\n    print('*'*50)","5450308f":"data.columns","730e2ccd":"for i in data.columns:\n    print(i)\n    print(data[i].unique())\n    print(\"*\"*50)","7e268d92":"sns.kdeplot(data['LotFrontage'])","e4ab4f76":"def calculate_quantiles(df,column):\n    for i in range(0,100,10):\n        var =df[column].values\n        var = np.sort(var,axis = None)\n        print(\"{} percentile value is {}\".format(i,var[int(len(var)*(float(i)\/100))]))\n    print(\"99th percentle value is\",df[column].quantile(0.99))    \n    print (\"100 percentile value is \",df[column].quantile(1))","3ea5289c":"for i in data.columns:\n    if len(data[i].unique()) > 30:\n        print(i,'..........')\n        calculate_quantiles(data,i)\n        print(\"Number of data points greater than 99th percentile is\",data[data[i] > data[i].quantile(0.99)].shape[0])\n        print(\"Index of data points greater than 99th percentile is\",data[data[i] > data[i].quantile(0.99)].index)\n        print(\"*\"*50)","d06f29cd":"sns.distplot(data['LotFrontage'])","7755a1ad":"data.isnull().sum()","4bf79f12":"for i in data.columns:\n    if len(data[i].unique()) > 30 and i != 'SalePrice':\n        print(i,'..........')\n        median = data.loc[data[i] < data[i].quantile(0.99), i].median()\n        data.loc[data[i] > data[i].quantile(0.99), i] = np.nan\n        data[i].fillna(median,inplace=True)\n        print('Done')\n        print(\"*\"*50)","0a79c8a3":"sns.distplot(data['LotFrontage'],fit=stats.norm)","59dfd30c":"for i in data.columns:\n    if data[i].skew() > 1.0:\n        print(i,':',data[i].skew())","a7ec663f":"for i in data.columns:\n    if data[i].skew() > 1.0:\n        print(i,':',len(data[i].unique()))","940a1235":"import pylab","b8e2fe0b":"def plot_data(df,feature):\n    plt.figure(figsize=(10,6))\n    plt.subplot(1,2,1)\n    df[feature].hist()\n    plt.subplot(1,2,2)\n    stats.probplot(df[feature],dist='norm',plot=pylab)\n    plt.show()","3790c11a":"print('for training data')\nplot_data(train,'MasVnrArea')","ad2ab2f7":"plot_data(data,'MasVnrArea')","3d13cba5":"plot_data(train,'WoodDeckSF')","3cd6b58e":"print('For whole data')\nplot_data(data,'OpenPorchSF')","091423c4":"print('For training data')\nplot_data(train,'OpenPorchSF')","dc8f2748":"plot_data(train,'SalePrice')","d84f7a02":"train.shape","fd2e5d95":"X_train_data = data.iloc[:1460,:]\nX_test_data = data.iloc[1460:,:]","a24a9af7":"X_train_data['SalePrice'].isnull().sum()","9573eb0e":"X_train_data['SalePrice'],params = stats.boxcox(X_train_data['SalePrice'])","08ee6521":"plot_data(X_train_data,'SalePrice')","44356cd0":"for i in data.columns:\n    if data[i].skew() > 1.0:\n        print(i,':',len(data[i].unique()))","f2990256":"print('MasVnrArea',X_train_data[X_train_data['MasVnrArea'] <= 0].shape[0])\nprint('WoodDeckSF',X_train_data[X_train_data['WoodDeckSF'] <= 0].shape[0])\nprint('OpenPorchSF',X_train_data[X_train_data['OpenPorchSF'] <= 0].shape[0])","481134f6":"print('MasVnrArea',X_train_data[X_train_data['MasVnrArea'] < 0].shape[0])\nprint('WoodDeckSF',X_train_data[X_train_data['WoodDeckSF'] < 0].shape[0])\nprint('OpenPorchSF',X_train_data[X_train_data['OpenPorchSF'] < 0].shape[0])","98b71fb9":"X_train_data['MasVnrArea_boxcox'],params = stats.boxcox(X_train_data['MasVnrArea'] + 1)\nX_test_data['MasVnrArea_boxcox'],params = stats.boxcox(X_test_data['MasVnrArea'] + 1)\n\nX_train_data['WoodDeckSF_boxcox'],params = stats.boxcox(X_train_data['WoodDeckSF'] + 1)\nX_test_data['WoodDeckSF_boxcox'],params = stats.boxcox(X_test_data['WoodDeckSF'] + 1)\n\nX_train_data['OpenPorchSF_boxcox'],params = stats.boxcox(X_train_data['OpenPorchSF'] + 1)\nX_test_data['OpenPorchSF_boxcox'],params = stats.boxcox(X_test_data['OpenPorchSF'] + 1)","0f11a685":"X_test_data.drop('SalePrice',axis=1,inplace=True)","74da86d9":"drop_final_cols = []\nfor i in X_train_data.columns:\n    if X_train_data[i].skew() > 1.0 and len(X_train_data[i].unique()) > 30:\n        print(i,':',X_train_data[i].skew())\n        drop_final_cols.append(i)","a8582819":"for i in X_test_data.columns:\n    if X_test_data[i].skew() > 1.0 and len(X_test_data[i].unique()) > 30:\n        print(i,':',X_test_data[i].skew())","7a0d300c":"X_train_data.drop(drop_final_cols,axis=1,inplace=True)\nX_test_data.drop(drop_final_cols,axis=1,inplace=True)","e1e19f90":"X_train_data.shape,train.shape","9c4ff989":"X_test_data.shape,test.shape","d07d6e5a":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","9c4665b6":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LinearRegression\nimport xgboost","b705dd5a":"from sklearn.model_selection import KFold,cross_val_score\nfrom sklearn import metrics","7cb6dd8a":"X_train = X_train_data.drop('SalePrice',axis=1)\ny_train = X_train_data['SalePrice']","bcbb9fb5":"scalar = StandardScaler()","2c93ae49":"X_train = scalar.fit_transform(X_train)\nX_test_data = scalar.transform(X_test_data)","8d3b5d8f":"n_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, X_train, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","d7de8721":"model_xgb = xgboost.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)","ab56477a":"score = rmsle_cv(model_xgb)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","6cbc3e25":"def rmsle(y, y_pred):\n    return np.sqrt(metrics.mean_squared_error(y, y_pred))","40d37d79":"model_xgb.fit(X_train, y_train)\nxgb_train_pred = model_xgb.predict(X_train)\nxgb_pred = np.expm1(model_xgb.predict(X_test_data))\nprint(rmsle(y_train, xgb_train_pred))","6948a8e6":"test_ID = test['Id']","8740c15d":"xgb_pred.shape,test.shape,X_test_data.shape","b4e69d3f":"sub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = xgb_pred\nsub.to_csv('submission_3.csv',index=False)","b017c254":"hello","cec3b77b":"y_train.head()","081444e3":"sub['SalePrice'].head()","7f417c80":"sns.kdeplot(y_train,label='train')\nsns.kdeplot(sub['SalePrice'],label='sub')\nplt.legend()","1433d27c":"submission.head()","81bcd4a3":"submission['Boxcox'],_ = stats.boxcox(submission['SalePrice'])","fb4b0950":"submission['Boxcox'].head()","a1ee965c":"sns.kdeplot(sub['SalePrice'],label='submission')","ccd3659d":"sns.kdeplot(submission['Boxcox'],label='boxcox')","948291fe":"sns.kdeplot(sub['SalePrice'],label='submission')\nsns.kdeplot(submission['Boxcox'],label='boxcox')\nplt.legend()","72615caa":"##### from the information provided in the link at says that the Most commonly, anchored masonry veneers have a nominal thickness of 4 in. (102 mm), although 3 in. (76 mm) veneer units may be available as well.\n\n##### **https:\/\/ncma.org\/resource\/concrete-masonry-veneer-details\/**","c8e37ab3":"##### if you see the correlation we can say that BsmtFinSF1 vs BsmtUnfSF and BsmtFinSF1 vs TotalBsmtSF are highly correlated so we can drop BsmtUnfSF from the table and we can keep either of F1 or F2. So we will also drop BsmtFinSF2 and keep only BsmtFinSF1 and TotalBsmt","36ce5761":"#### Masonry veneer(MasVnrArea):\n##### Masonry veneer walls consist of a single non-structural external layer of masonry, typically made of brick, stone or manufactured stone\n\n<img src=\"https:\/\/img.tfd.com\/architecture\/f0619-02.png\" width=\"500px\">","23f3331c":"#### get all the nan index values for numerical columns","76691482":"##### LotArea is some what dependent on LotFrontage so I will drop LotArea as it is not much dependent on SalePrice as that of LotFrontage"}}