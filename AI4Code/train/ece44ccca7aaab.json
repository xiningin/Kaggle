{"cell_type":{"d030c70b":"code","2ce045a1":"code","c28416bd":"code","76936f67":"code","035bda8a":"code","b2398bb6":"code","f771c5ee":"code","05ed0ba7":"code","d1c31da0":"code","c1245c4a":"code","e68bf126":"code","8082bc4d":"markdown","1ba8e2d5":"markdown"},"source":{"d030c70b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2ce045a1":"data = pd.read_csv('..\/input\/2021-olympics-medals-in-tokyo\/Tokyo Medals 2021.csv')","c28416bd":"print(data)","76936f67":"data.columns","035bda8a":"threshold = sum(data['Gold Medal'])\/len(data['Gold Medal'])\nprint(threshold)\ndata['Status'] = ['successful' if i > threshold else 'unsuccesful' for i in data['Gold Medal']]\ndata.loc[10:30, ['Country','Status', 'Gold Medal']]","b2398bb6":"# lambda function example\ngpa = lambda x,y : (x+y)\/2 # x is the average of the first term and y is the average of the second term\nprint(gpa(2.44,2.83))\n\n# another example\neighteen_percent_of_any_number = lambda x : (x*18)\/100\nprint(eighteen_percent_of_any_number(75))","f771c5ee":"# anonymous function example, they are like lambda func. but they can take more than one argument\n# map(func, seq): applies a function to all the items in a list\nnumbers = [33,66,99]\ny = map(lambda x:(x*18)\/100, numbers) # returns the eighteen percent of the numbers \nprint(list(y))","05ed0ba7":"# nested function example\ndef multiplication():\n    def summation():\n        a = 963946208\n        b = 2376477\n        c = a + b\n        return c\n    return summation()* 3\nprint(multiplication())","d1c31da0":"# default arguments: function arguments can have default values\ndef greeting(name, msg = 'Welcome'):\n    \"\"\"this function prints a greeting message specific to the given name if the message is not defined\"\"\"\n    print(name,',', msg,'!')\ngreeting(\"rachellen\")    ","c1245c4a":"# flexible arguments\n# *args\ndef f(*args):\n    for i in args:\n        print(i,)\nf(9,8,7)\n\n# **kwargs\ndef f(**kwargs):\n    for key, value in kwargs.items():\n        print(key,':',value)\nf(one = 'eins', two = 'zwei', three = 'drei')        \n     ","e68bf126":"# example of list comprehension\nlist1 = [7,5,3]\nlist2 = [i\/\/2 for i in list1]\nprint(list2)\n","8082bc4d":"Above, the success of the countries is evaluated based on the threshold, which is the average number of gold medals earned. ","1ba8e2d5":"When you are defining a function with a default argument, make sure that the non-default argument comes first and the default argument comes later."}}