{"cell_type":{"4078d639":"code","3ea96766":"code","3d08ebde":"code","e68ffb32":"code","81f6cedf":"code","9737c553":"code","ba6722a9":"code","2df83a36":"code","a5c878db":"code","7e8e7fab":"code","0611edf5":"code","444b6a01":"code","9503ade9":"markdown","9760aaf5":"markdown","f7c9444f":"markdown","5b9fbf90":"markdown","3f2941a4":"markdown","040c7c1a":"markdown","07a850cc":"markdown","86ad8880":"markdown","15717564":"markdown","4a67961e":"markdown","216ff370":"markdown","413cebef":"markdown","a5302f09":"markdown","b392f574":"markdown","9bdaf0ed":"markdown","a245a7cd":"markdown","1a65a9e7":"markdown","72625a14":"markdown"},"source":{"4078d639":"import os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3ea96766":"import pandas as pd\n\nINPUT_PATH = r'\/kaggle\/input\/mytitanic\/train.csv'\n\ndf_full = pd.read_csv(INPUT_PATH)\n\ndisplay(df_full)","3d08ebde":"ID_COLUMN_NAME = 'PassengerId'\nLABEL_COLUMN_NAME = 'Survived'","e68ffb32":"import numpy as np\n\nprint(np.unique(df_full[LABEL_COLUMN_NAME]))","81f6cedf":"### Your code here\n\n# df_full[LABEL_COLUMN_NAME] = df_full[LABEL_COLUMN_NAME].map({'No': 0, 'Yes': 1})\n\n# print(np.unique(df_full[LABEL_COLUMN_NAME]))\n\n# display(df_full)\n\n### End","9737c553":"from sklearn.model_selection import train_test_split\n\nTEST_SIZE = 0.2\n\ndf_train, df_test = train_test_split(df_full, test_size=TEST_SIZE)\n\ndf_train = df_train.reset_index(drop=True)\ndf_test = df_test.reset_index(drop=True)\n\nprint('Train dataset shape:', df_train.shape)\nprint('Test dataset shape:', df_test.shape)","ba6722a9":"df_solution = df_test.loc[:, [ID_COLUMN_NAME, LABEL_COLUMN_NAME]]","2df83a36":"df_test = df_test.drop(columns=[LABEL_COLUMN_NAME])","a5c878db":"df_sample = df_solution.copy()\ndf_sample.loc[:, LABEL_COLUMN_NAME] = df_sample.loc[0, LABEL_COLUMN_NAME]","7e8e7fab":"print('--- Train set ---')\ndisplay(df_train)\n\nprint('--- Test set ---')\ndisplay(df_test)\n\nprint('--- Solution set ---')\ndisplay(df_solution)\n\nprint('--- Sample set ---')\ndisplay(df_sample)","0611edf5":"df_train.to_csv('train.csv', index=False)\ndf_test.to_csv('test.csv', index=False)\ndf_solution.to_csv('solution.csv', index=False)\ndf_sample.to_csv('sample.csv', index=False)","444b6a01":"import zipfile\n\nwith zipfile.ZipFile(r'competition_files.zip', \"w\") as zf:\n    zf.write('train.csv')\n    zf.write('test.csv')\n    zf.write('solution.csv')\n    zf.write('sample.csv')","9503ade9":"### (Optional) Encode the classes\n\nIf some metrics are to be used, eg ROC-AUC, the class labels must be in numerical form. We can do it now.\n\nLet's check what are the unique labels:","9760aaf5":"### Import and validate the dataset\n\nYou have to set the path to the specific `INPUT_PATH` dataset.","f7c9444f":"### Generating the SOLUTION set\n\nTo generate this set, we copy the columns representing the ID and sample LABELS from the test set. ","5b9fbf90":"<a id=\"1\"><\/a>\n## I. Intro\n\nThis simple notebook is designed to help you generate a set of files necessary to create your own competiton on the Kaggle platform, based on a specific set of data. The generated files are:\n* `train.csv` file - a set of samples on which we design our models,\n* `test.csv` file - a set of samples to be predicted,\n* `solution.csv` file - a fully valid solution for the test set,\n* `sample.csv` submission file - an example solution for the test set.\n\nThis code can be especially useful for people creating casual InClass competitions.","3f2941a4":"The generated files can be found in the **Data** tab in the **output (\/kaggle\/working)** folder. ","040c7c1a":"### Generate the TEST set\n\nNow we can remove the labeling column to finish creating this set.","07a850cc":"## Content:\n* [I. Intro](#1)\n* [II. Add data](#2)\n* [III. Generating sets](#3)\n* [IV. Saving files](#4)\n* [V. End](#5)","86ad8880":"### Generate the SAMPLE set\n\nThe set `sample` looks the same as` solution`, but you have to assign it some different label values to keep it from being too exact. To make this notebook as universal as possible and to deal with different types of data in the column with labels (labels can be string, in, float, etc.), I decided to fill the entire column with the value from its first row. This way I can be sure that the data format will be compatible with that used in this column. ","15717564":"### Final check\n\nBefore saving your sets, it's a good idea to confirm one last time that they look as they should. ","4a67961e":"### ZIP archive\n\nAdditionally, to make it easier to download the generated CSV files, we will package them in a ZIP archive.","216ff370":"### Input files\n\nCheck the input files so that you can copy the path to a specific dataset.","413cebef":"At this point, we have the generated `train` set and the unfinished` test` set, because we still have to remove the column with class labels from it. We will do this later, however, as we now need this column to generate the sets: `solution` and` sample`.","a5302f09":"<a id=\"4\"><\/a>\n## IV. Saving files\n\n### CSV files\n\nNow we can create and save files in CSV format.","b392f574":"If they are in the form of a string, we can manually convert them. Here you need to enter your unique code depending on the content of the labeling column:","9bdaf0ed":"<a id=\"3\"><\/a>\n## III. Generating sets\n\n### Generating the TRAIN set\nLet's split the dataset into train and test sets. Set the size of the test file `TEST_SIZE`.","a245a7cd":"<a id=\"5\"><\/a>\n## V. End\n\nI think that should be everything.\n\nI encourage you to use this notebook and give feedback if anything is wrong or could be improved. ","1a65a9e7":"<a id=\"2\"><\/a>\n## II. Add data\n\nThe first thing to do is connect the data set from which we want to generate files to competiton. We can do it by using the **`+ Add data`** tab in the upper right corner. In this example, the set from Titanic competition is attached. ","72625a14":"### Set sample ID and LABEL column\n\nNow, you have to define which column is used for sample identification (`ID_COLUMN_NAME`) and its class (`LABEL_COLUMN_NAME`). "}}