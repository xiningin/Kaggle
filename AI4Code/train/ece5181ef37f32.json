{"cell_type":{"3d7a49b3":"code","86310f93":"code","d3841830":"code","f99a9048":"code","8736b4cd":"code","5bb676bc":"code","a68a844c":"code","aa12be8a":"code","297e096d":"code","0a454d8c":"code","d3941141":"code","1f458aeb":"code","74cda297":"code","f9084ef4":"code","db3429a2":"code","35ff2953":"code","b7ab2be6":"code","649c7c6a":"code","c3e5b7ff":"code","94795744":"code","16f9f597":"code","85f27337":"code","a2f56fd9":"code","bbd516b6":"code","b7bc786d":"markdown","710fa775":"markdown","00f757bc":"markdown","3c42da0c":"markdown","e2f2b50e":"markdown","c4498d15":"markdown","da332cc5":"markdown","9b5df986":"markdown","ad318d84":"markdown","cbaaea3a":"markdown"},"source":{"3d7a49b3":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nprint(tf.__version__)\nimport os\nimport shutil\nimport matplotlib.pyplot as plt","86310f93":"train = pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/train.csv')\ntest = pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/test.csv')\n\ntarget = train[['healthy', 'multiple_diseases', 'rust', 'scab']]\ntest_ids = test['image_id']\n\ntrain_len = train.shape[0]\ntest_len = test.shape[0]\n\ntrain.describe()","d3841830":"print(\"Shape of train data: \" + str(train.shape))\nprint(\"Shape of test data: \" + str(test.shape))","f99a9048":"train_len = train.shape[0]\ntest_len = test.shape[0]","8736b4cd":"from keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nfrom tqdm.notebook import tqdm\n\npath = '..\/input\/plant-pathology-2020-fgvc7\/images\/'\nsize = 224\n\ntrain_images = np.ndarray(shape=(train_len, size, size, 3))\nfor i in tqdm(range(train_len)):\n  img = load_img(path + f'Train_{i}.jpg', target_size=(size, size))\n  train_images[i] = np.uint8(img_to_array(img))\n\ntest_images = np.ndarray(shape=(test_len, size, size, 3))\nfor i in tqdm(range(test_len)):\n  img = load_img(path + f'Test_{i}.jpg', target_size=(size, size))\n  test_images[i] = np.uint8(img_to_array(img))\n\ntrain_images.shape, test_images.shape","5bb676bc":"for i in range(4):\n\tplt.subplot(220 + 1 + i)\n\tplt.title(train['image_id'][i])\n\tplt.imshow(np.uint8(train_images[i]), interpolation = 'nearest', aspect='auto')\nplt.show()\nplt.savefig('train_images.png')","a68a844c":"for i in range(4):\n\tplt.subplot(220 + 1 + i)\n\tplt.title(test['image_id'][i])\n\tplt.imshow(np.uint8(test_images[i]), interpolation = 'nearest', aspect='auto')\nplt.show()\nplt.savefig('test_images.png')","aa12be8a":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(train_images, target.to_numpy(), test_size=0.1, random_state=289) \n\nx_train.shape, x_test.shape, y_train.shape, y_test.shape","297e096d":"from imblearn.over_sampling import RandomOverSampler\n\nros = RandomOverSampler(random_state=289)\n\nx_train, y_train = ros.fit_resample(x_train.reshape((-1, size * size * 3)), y_train)\nx_train = x_train.reshape((-1, size, size, 3))\nx_train.shape, y_train.shape","0a454d8c":"import gc\n\ndel train_images\ngc.collect()","d3941141":"from keras_preprocessing.image import ImageDataGenerator\n\nbatch_size = 8\n\ntrain_datagen = ImageDataGenerator(samplewise_center = True,\n                                   samplewise_std_normalization = True,\n                                   horizontal_flip = True,\n                                   vertical_flip = True,\n                                   rotation_range=70)\n\ntrain_generator = train_datagen.flow(\n    x = x_train, \n    y = y_train,\n    batch_size = batch_size)\n\nvalidation_datagen = ImageDataGenerator(samplewise_center = True,\n                                        samplewise_std_normalization = True)\n\nvalidation_generator = validation_datagen.flow(\n    x = x_test, \n    y = y_test,\n    batch_size = batch_size)","1f458aeb":"idx = np.random.randint(8)\nx, y = train_generator.__getitem__(idx)\nplt.title(y[idx])\nplt.imshow(x[idx])","74cda297":"def create_model():\n    pre_trained = tf.keras.applications.MobileNet(input_shape=(size, size, 3), weights='imagenet', include_top=False)\n    for layer in pre_trained.layers:\n      layer.trainable = False\n    \n    #pretrained_model = tf.keras.applications.mobilenet.MobileNet(input_shape=(SIZE,SIZE,3), include_top=False)\n    model = tf.keras.Sequential([\n      pre_trained,\n      tf.keras.layers.Flatten(),\n      tf.keras.layers.Dropout(0.3),\n      tf.keras.layers.Dense(4, activation='softmax')\n      ])\n    model.compile(\n        loss = 'kullback_leibler_divergence', \n        optimizer = 'adam', \n        metrics = ['accuracy'])\n    return model\n\nmodel = create_model()\n\nmodel.summary()","f9084ef4":"epochs = 150\nsteps_per_epoch = x_train.shape[0] \/\/ batch_size\nvalidation_steps = x_test.shape[0] \/\/ batch_size\nprint(steps_per_epoch)","db3429a2":"es = tf.keras.callbacks.EarlyStopping(patience=15, restore_best_weights=True, verbose=1)\nmc = tf.keras.callbacks.ModelCheckpoint('model.hdf5', save_best_only=True, verbose=0)\nrlr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', patience=10, verbose=1)\n\nstart_lr = 0.00001\nmin_lr = 0.00001\nmax_lr = 0.00005\nrampup_epochs = 40\nsustain_epochs = 20\nexp_decay = .8\n\ndef lrfn(epoch):\n  if epoch < rampup_epochs:\n    return (max_lr - start_lr)\/rampup_epochs * epoch + start_lr\n  elif epoch < rampup_epochs + sustain_epochs:\n    return max_lr\n  else:\n    return min_lr\n    \nlr = tf.keras.callbacks.LearningRateScheduler(lambda epoch: lrfn(epoch), verbose=True)\n\nrang = np.arange(epochs)\ny = [lrfn(x) for x in rang]\nplt.plot(rang, y)\nprint('Learning rate per epoch:')","35ff2953":"history = model.fit(\n    x = train_generator,  \n    validation_data = validation_generator,\n    epochs = epochs,\n    steps_per_epoch = steps_per_epoch,\n    validation_steps = validation_steps,\n    verbose=1,\n    callbacks=[es, lr, mc, rlr])","b7ab2be6":"# Plot training & validation accuracy values\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\n# Plot training & validation loss values\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper right')\nplt.show()","649c7c6a":"train_err = (1-history.history['accuracy'][-1])*100\nvalidation_err = (1-history.history['val_accuracy'][-1])*100\nprint(\"Train set error \" + str(train_err))\nprint(\"Validation set error \" + str(validation_err))","c3e5b7ff":"test_datagen = ImageDataGenerator(samplewise_center = True,\n                                 samplewise_std_normalization = True)\n\ntest_generator = test_datagen.flow(\n    x = test_images,\n    shuffle = False)","94795744":"probabilities = model.predict(test_generator, steps = len(test_generator))\nprint(probabilities)\nprint(probabilities[:,0].mean()*100)\nprint(probabilities[:,1].mean()*100)\nprint(probabilities[:,2].mean()*100)\nprint(probabilities[:,3].mean()*100)","16f9f597":"res = pd.DataFrame()\nres['image_id'] = test['image_id']\nres['healthy'] = probabilities[:, 0]\nres['multiple_diseases'] = probabilities[:, 1]\nres['rust'] = probabilities[:, 2]\nres['scab'] = probabilities[:, 3]","85f27337":"res.to_csv('submission.csv', index=False)","a2f56fd9":"valid_probabilities = model.predict(validation_generator, steps = len(validation_generator))\nprint(valid_probabilities[:,0].mean()*100)\nprint(valid_probabilities[:,1].mean()*100)\nprint(valid_probabilities[:,2].mean()*100)\nprint(valid_probabilities[:,3].mean()*100)","bbd516b6":"from sklearn.metrics import roc_auc_score\nroc_auc_score(y_test, valid_probabilities)","b7bc786d":"Now use RandomOverSampler to fix our class imbalance in the multiple diseases class.","710fa775":"Now we prepare the data for going into a Keras deep learning model. Here I use the ImageDataGenerator to also give us more images by using the parameters to rotate, horizontally flip, and vertically flip. Also the image is samplewise standard normalized the raw data so that the activation functions work properly.","00f757bc":"Ah, we see the multiple_diseases label has drastically less images than the rest of the labels. Once we load the images in raw data form, we'll use scikitlearn to randomly over sample so we can fix this class imbalance.\n\nNow let's load the image data.","3c42da0c":"# Keras Model\nHere we build the model. I will use a pre-trained MobileNet for deep CNN which will then be fed into a dense layer to predict 4 classes, since the original MobileNet predicts 1000. It will compile using the loss function KL Divergence, Adam optimizer, and accuracy metric.","e2f2b50e":"Now define some model parameters and set up some callbacks.","c4498d15":"Let's see what the images look like after processing and what they look like going into the model.","da332cc5":"Let's take a look at what the images look like.","9b5df986":"# Loading Data and Preprocessing\n\nHere we load the data and take a look at what we're dealing with.","ad318d84":"Let's split out data into train and test sets for the model.","cbaaea3a":"# Plant Pathology 2020 - FGVC7\nIdentify the category of foliar diseases in apple trees\n\nKaggle competition - https:\/\/www.kaggle.com\/c\/plant-pathology-2020-fgvc7\/submit"}}