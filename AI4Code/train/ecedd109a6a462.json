{"cell_type":{"fe8ab07e":"code","842f8013":"code","44199f46":"code","01bfc7c6":"code","6c8d46c8":"code","fcbe25be":"code","84e4b2f5":"code","1a78551f":"code","a24fa3fe":"code","be3a82c5":"code","8cf67e44":"code","230dd91f":"code","60e1d46f":"code","5e2ced2b":"code","7a251f91":"code","727eb5af":"code","5a5e1826":"code","95522bb1":"code","36dbdf4e":"code","d98b5427":"code","5f82a7aa":"code","a5c71381":"code","939b6f22":"code","137254bc":"code","623fc1d5":"code","d4d55cc7":"code","3ada88fb":"code","209a673a":"code","9442e7c0":"code","66b9f507":"code","b3038d57":"code","4c4d2c7a":"code","87fa8005":"code","1c3212b1":"code","28c231a0":"code","359983cb":"code","86cad40d":"code","93be1378":"code","03fca762":"code","6592c2cd":"code","5bc92108":"code","a58e3898":"code","2b765daa":"code","ebe6aad4":"code","9241d5ff":"code","1f93d765":"code","18de6998":"code","c34a1057":"code","05a3b886":"code","063db54c":"code","166b406f":"code","07368fda":"code","dcf47cec":"code","42b8d280":"code","648cc85e":"code","d3533976":"code","fed5d37a":"code","e318922d":"code","4fa98e74":"markdown","b8e4f3e1":"markdown","c547b068":"markdown","3150a435":"markdown","07580f5f":"markdown","f042e72e":"markdown","28b43deb":"markdown","9c811d5a":"markdown","536a986f":"markdown","1a238886":"markdown","678bff16":"markdown","2ef0cc3b":"markdown","c2cf5160":"markdown","dc1c909b":"markdown","a98ad672":"markdown","95ee4ef3":"markdown","f722945e":"markdown","381599a8":"markdown","c63ceca7":"markdown","6b394ea6":"markdown","67c29d88":"markdown","37f40764":"markdown","61bc5312":"markdown","bede3f8f":"markdown","35eed1d2":"markdown","d5bb50d1":"markdown","874c5a4c":"markdown","f3d401e9":"markdown","8e3517a3":"markdown"},"source":{"fe8ab07e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LinearRegression\n\n# reading the dataset\ncars = pd.read_csv(\"..\/input\/carprice-prediction\/CarPrice_Assignment.csv\")","842f8013":"# summary of the dataset: 205 rows, 26 columns, no null values\nprint(cars.info())","44199f46":"# head\ncars.head()","01bfc7c6":"# symboling: -2 (least risky) to +3 most risky\n# Most cars are 0,1,2\ncars['symboling'].astype('category').value_counts()\n\n","6c8d46c8":"# aspiration: An (internal combustion) engine property showing \n# whether the oxygen intake is through standard (atmospheric pressure)\n# or through turbocharging (pressurised oxygen intake)\n\ncars['aspiration'].astype('category').value_counts()","fcbe25be":"# drivewheel: frontwheel, rarewheel or four-wheel drive \ncars['drivewheel'].astype('category').value_counts()","84e4b2f5":"# wheelbase: distance between centre of front and rarewheels\nsns.distplot(cars['wheelbase'])\nplt.show()","1a78551f":"# curbweight: weight of car without occupants or baggage\nsns.distplot(cars['curbweight'])\nplt.show()","a24fa3fe":"# stroke: volume of the engine (the distance traveled by the \n# piston in each cycle)\nsns.distplot(cars['stroke'])\nplt.show()","be3a82c5":"# compression ration: ration of volume of compression chamber \n# at largest capacity to least capacity\nsns.distplot(cars['compressionratio'])\nplt.show()","8cf67e44":"# target variable: price of car\nsns.distplot(cars['price'])\nplt.show()","230dd91f":"# all numeric (float and int) variables in the dataset\ncars_numeric = cars.select_dtypes(include=['float64', 'int'])\ncars_numeric.head()","60e1d46f":"# dropping symboling and car_ID \ncars_numeric = cars_numeric.drop(['symboling', 'car_ID'], axis=1)\ncars_numeric.head()","5e2ced2b":"# paiwise scatter plot\n\nplt.figure(figsize=(20, 10))\nsns.pairplot(cars_numeric)\nplt.show()","7a251f91":"# correlation matrix\ncor = cars_numeric.corr()\ncor","727eb5af":"# plotting correlations on a heatmap\n\n# figure size\nplt.figure(figsize=(16,8))\n\n# heatmap\nsns.heatmap(cor, cmap=\"YlGnBu\", annot=True)\nplt.show()\n","5a5e1826":"# variable formats\ncars.info()","95522bb1":"# converting symboling to categorical\ncars['symboling'] = cars['symboling'].astype('object')\ncars.info()","36dbdf4e":"# CarName: first few entries\ncars['CarName'][:30]","d98b5427":"# Extracting carname\n\n# Method 1: str.split() by space\ncarnames = cars['CarName'].apply(lambda x: x.split(\" \")[0])\ncarnames[:30]","5f82a7aa":"# Method 2: Use regular expressions\nimport re\n\n# regex: any alphanumeric sequence before a space, may contain a hyphen\np = re.compile(r'\\w+-?\\w+')\ncarnames = cars['CarName'].apply(lambda x: re.findall(p, x)[0])\nprint(carnames)","a5c71381":"# New column car_company\ncars['car_company'] = cars['CarName'].apply(lambda x: re.findall(p, x)[0])","939b6f22":"# look at all values \ncars['car_company'].astype('category').value_counts()","137254bc":"# replacing misspelled car_company names\n\n# volkswagen\ncars.loc[(cars['car_company'] == \"vw\") | \n         (cars['car_company'] == \"vokswagen\")\n         , 'car_company'] = 'volkswagen'\n\n# porsche\ncars.loc[cars['car_company'] == \"porcshce\", 'car_company'] = 'porsche'\n\n# toyota\ncars.loc[cars['car_company'] == \"toyouta\", 'car_company'] = 'toyota'\n\n# nissan\ncars.loc[cars['car_company'] == \"Nissan\", 'car_company'] = 'nissan'\n\n# mazda\ncars.loc[cars['car_company'] == \"maxda\", 'car_company'] = 'mazda'","623fc1d5":"cars['car_company'].astype('category').value_counts()","d4d55cc7":"# drop carname variable\ncars = cars.drop('CarName', axis=1)","3ada88fb":"cars.info()","209a673a":"# outliers\ncars.describe()","9442e7c0":"cars.info()","66b9f507":"# split into X and y\nX = cars.loc[:, ['symboling', 'fueltype', 'aspiration', 'doornumber',\n       'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength',\n       'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber',\n       'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio',\n       'horsepower', 'peakrpm', 'citympg', 'highwaympg',\n       'car_company']]\n\ny = cars['price']\n","b3038d57":"# creating dummy variables for categorical variables\n\n# subset all categorical variables\ncars_categorical = X.select_dtypes(include=['object'])\ncars_categorical.head()\n","4c4d2c7a":"# convert into dummies\ncars_dummies = pd.get_dummies(cars_categorical, drop_first=True)\ncars_dummies.head()","87fa8005":"# drop categorical variables \nX = X.drop(list(cars_categorical.columns), axis=1)","1c3212b1":"# concat dummy variables with X\nX = pd.concat([X, cars_dummies], axis=1)","28c231a0":"# scaling the features\nfrom sklearn.preprocessing import scale\n\n# storing column names in cols, since column names are (annoyingly) lost after \n# scaling (the df is converted to a numpy array)\ncols = X.columns\nX = pd.DataFrame(scale(X))\nX.columns = cols\nX.columns","359983cb":"# split into train and test\nfrom sklearn.cross_validation import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    train_size=0.7,\n                                                    test_size = 0.3, random_state=100)","86cad40d":"# Building the first model with all the features\n\n# instantiate\nlm = LinearRegression()\n\n# fit\nlm.fit(X_train, y_train)","93be1378":"# print coefficients and intercept\nprint(lm.coef_)\nprint(lm.intercept_)","03fca762":"# predict \ny_pred = lm.predict(X_test)\n\n# metrics\nfrom sklearn.metrics import r2_score\n\nprint(r2_score(y_true=y_test, y_pred=y_pred))","6592c2cd":"# RFE with 15 features\nfrom sklearn.feature_selection import RFE\n\n# RFE with 15 features\nlm = LinearRegression()\nrfe_15 = RFE(lm, 15)\n\n# fit with 15 features\nrfe_15.fit(X_train, y_train)\n\n# Printing the boolean results\nprint(rfe_15.support_)           \nprint(rfe_15.ranking_)  ","5bc92108":"# making predictions using rfe model\ny_pred = rfe_15.predict(X_test)\n\n# r-squared\nprint(r2_score(y_test, y_pred))","a58e3898":"# RFE with 6 features\nfrom sklearn.feature_selection import RFE\n\n# RFE with 6 features\nlm = LinearRegression()\nrfe_6 = RFE(lm, 6)\n\n# fit with 6 features\nrfe_6.fit(X_train, y_train)\n\n# predict\ny_pred = rfe_6.predict(X_test)\n\n# r-squared\nprint(r2_score(y_test, y_pred))","2b765daa":"# import statsmodels\nimport statsmodels.api as sm  \n\n# subset the features selected by rfe_15\ncol_15 = X_train.columns[rfe_15.support_]\n\n# subsetting training data for 15 selected columns\nX_train_rfe_15 = X_train[col_15]\n\n# add a constant to the model\nX_train_rfe_15 = sm.add_constant(X_train_rfe_15)\nX_train_rfe_15.head()","ebe6aad4":"# fitting the model with 15 variables\nlm_15 = sm.OLS(y_train, X_train_rfe_15).fit()   \nprint(lm_15.summary())","9241d5ff":"# making predictions using rfe_15 sm model\nX_test_rfe_15 = X_test[col_15]\n\n\n# # Adding a constant variable \nX_test_rfe_15 = sm.add_constant(X_test_rfe_15, has_constant='add')\nX_test_rfe_15.info()\n\n\n# # Making predictions\ny_pred = lm_15.predict(X_test_rfe_15)\n","1f93d765":"# r-squared\nr2_score(y_test, y_pred)","18de6998":"# subset the features selected by rfe_6\ncol_6 = X_train.columns[rfe_6.support_]\n\n# subsetting training data for 6 selected columns\nX_train_rfe_6 = X_train[col_6]\n\n# add a constant to the model\nX_train_rfe_6 = sm.add_constant(X_train_rfe_6)\n\n\n# fitting the model with 6 variables\nlm_6 = sm.OLS(y_train, X_train_rfe_6).fit()   \nprint(lm_6.summary())\n\n\n# making predictions using rfe_6 sm model\nX_test_rfe_6 = X_test[col_6]\n\n\n# Adding a constant  \nX_test_rfe_6 = sm.add_constant(X_test_rfe_6, has_constant='add')\nX_test_rfe_6.info()\n\n\n# # Making predictions\ny_pred = lm_6.predict(X_test_rfe_6)","c34a1057":"# r2_score for 6 variables\nr2_score(y_test, y_pred)","05a3b886":"n_features_list = list(range(4, 20))\nadjusted_r2 = []\nr2 = []\ntest_r2 = []\n\nfor n_features in range(4, 20):\n\n    # RFE with n features\n    lm = LinearRegression()\n\n    # specify number of features\n    rfe_n = RFE(lm, n_features)\n\n    # fit with n features\n    rfe_n.fit(X_train, y_train)\n\n    # subset the features selected by rfe_6\n    col_n = X_train.columns[rfe_n.support_]\n\n    # subsetting training data for 6 selected columns\n    X_train_rfe_n = X_train[col_n]\n\n    # add a constant to the model\n    X_train_rfe_n = sm.add_constant(X_train_rfe_n)\n\n\n    # fitting the model with 6 variables\n    lm_n = sm.OLS(y_train, X_train_rfe_n).fit()\n    adjusted_r2.append(lm_n.rsquared_adj)\n    r2.append(lm_n.rsquared)\n    \n    \n    # making predictions using rfe_15 sm model\n    X_test_rfe_n = X_test[col_n]\n\n\n    # # Adding a constant variable \n    X_test_rfe_n = sm.add_constant(X_test_rfe_n, has_constant='add')\n\n\n\n    # # Making predictions\n    y_pred = lm_n.predict(X_test_rfe_n)\n    \n    test_r2.append(r2_score(y_test, y_pred))\n","063db54c":"# plotting adjusted_r2 against n_features\nplt.figure(figsize=(10, 8))\nplt.plot(n_features_list, adjusted_r2, label=\"adjusted_r2\")\nplt.plot(n_features_list, r2, label=\"train_r2\")\nplt.plot(n_features_list, test_r2, label=\"test_r2\")\nplt.legend(loc='upper left')\nplt.show()","166b406f":"# RFE with n features\nlm = LinearRegression()\n\nn_features = 6\n\n# specify number of features\nrfe_n = RFE(lm, n_features)\n\n# fit with n features\nrfe_n.fit(X_train, y_train)\n\n# subset the features selected by rfe_6\ncol_n = X_train.columns[rfe_n.support_]\n\n# subsetting training data for 6 selected columns\nX_train_rfe_n = X_train[col_n]\n\n# add a constant to the model\nX_train_rfe_n = sm.add_constant(X_train_rfe_n)\n\n\n# fitting the model with 6 variables\nlm_n = sm.OLS(y_train, X_train_rfe_n).fit()\nadjusted_r2.append(lm_n.rsquared_adj)\nr2.append(lm_n.rsquared)\n\n\n# making predictions using rfe_15 sm model\nX_test_rfe_n = X_test[col_n]\n\n\n# # Adding a constant variable \nX_test_rfe_n = sm.add_constant(X_test_rfe_n, has_constant='add')\n\n\n\n# # Making predictions\ny_pred = lm_n.predict(X_test_rfe_n)\n\ntest_r2.append(r2_score(y_test, y_pred))","07368fda":"# summary\nlm_n.summary()","dcf47cec":"# results \nr2_score(y_test, y_pred)","42b8d280":"# Error terms\nc = [i for i in range(len(y_pred))]\nfig = plt.figure()\nplt.plot(c,y_test-y_pred, color=\"blue\", linewidth=2.5, linestyle=\"-\")\nfig.suptitle('Error Terms', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                      # X-label\nplt.ylabel('ytest-ypred', fontsize=16)                # Y-label\nplt.show()","648cc85e":"# Plotting the error terms to understand the distribution.\nfig = plt.figure()\nsns.distplot((y_test-y_pred),bins=50)\nfig.suptitle('Error Terms', fontsize=20)                  # Plot heading \nplt.xlabel('y_test-y_pred', fontsize=18)                  # X-label\nplt.ylabel('Index', fontsize=16)                          # Y-label\nplt.show()","d3533976":"# mean\nnp.mean(y_test-y_pred)\n","fed5d37a":"sns.distplot(cars['price'],bins=50)\nplt.show()","e318922d":"# multicollinearity\npredictors = ['carwidth', 'curbweight', 'enginesize', \n             'enginelocation_rear', 'car_company_bmw', 'car_company_porsche']\n\ncors = X.loc[:, list(predictors)].corr()\nsns.heatmap(cors, annot=True)\nplt.show()","4fa98e74":"## 3. Data Preparation \n\n\n#### Data Preparation\n\nLet's now prepare the data and build the model.","b8e4f3e1":"Thus, the test r-squared of model with 15 features is about 89.4%, while training is about 93%. Let's compare the same for the model with 6 features.","c547b068":"### Final Model\n\nLet's now build the final model with 6 features.","3150a435":"Note that RFE with 6 features is giving about 88% r-squared, compared to 89% with 15 features. \nShould we then choose more features for slightly better performance?\n\nA better metric to look at is adjusted r-squared, which penalises a model for having more features, and thus weighs both the goodness of fit and model complexity. Let's use statsmodels library for this.\n","07580f5f":"Not bad, we are getting approx. 83% r-squared with all the variables. Let's see how much we can get with lesser features.","f042e72e":"Let's now make a pairwise scatter plot and observe linear relationships.","28b43deb":"The heatmap shows some useful insights:\n\nCorrelation of price with independent variables:\n- Price is highly (positively) correlated with wheelbase, carlength, carwidth, curbweight, enginesize, horsepower (notice how all of these variables represent the size\/weight\/engine power of the car)\n\n- Price is negatively correlated to ```citympg``` and ```highwaympg``` (-0.70 approximately). This suggest that cars having high mileage may fall in the 'economy' cars category, and are priced lower (think Maruti Alto\/Swift type of cars, which are designed to be affordable by the middle class, who value mileage more than horsepower\/size of car etc.)\n\nCorrelation among independent variables:\n- Many independent variables are highly correlated (look at the top-left part of matrix): wheelbase, carlength, curbweight, enginesize etc. are all measures of 'size\/weight', and are positively correlated \n\n\nThus, while building the model, we'll have to pay attention to multicollinearity (especially linear models, such as linear and logistic regression, suffer more from multicollinearity).","9c811d5a":"Note that the model with 15 variables gives about 93.9% r-squared, though that is on training data. The adjusted r-squared is 93.3.","536a986f":"### Choosing the optimal number of features\n\nNow, we have seen that the adjusted r-squared varies from about 93.3 to 88 as we go from 15 to 6 features, one way to choose the optimal number of features is to make a plot between n_features and adjusted r-squared, and then choose the value of n_features.","1a238886":"Though this is the most simple model we've built till now, the final predictors still seem to have high correlations. One can go ahead and remove some of these features, though that will affect the adjusted-r2 score significantly (you should try doing that). \n\n\nThus, for now, the final model consists of the 6 variables mentioned above.","678bff16":"Netx, we need to extract the company name from the column ```CarName```. ","2ef0cc3b":"## 3. Model Building and Evaluation","c2cf5160":"Notice that **some car-company names are misspelled** - vw and vokswagen should be volkswagen, porcshce should be porsche, toyouta should be toyota, Nissan should be nissan, maxda should be mazda etc.\n\nThis is a data quality issue, let's solve it.","dc1c909b":"Thus, for the model with 6 variables, the r-squared on training and test data is about 89% and 88.5% respectively. The adjusted r-squared is about 88.6%.","a98ad672":"Notice that the carname is what occurs before a space, e.g. alfa-romero, audi, chevrolet, dodge, bmx etc.\n\nThus, we need to simply extract the string before a space. There are multiple ways to do that.\n\n\n","95ee4ef3":"Let's create a new column to store the compnay name and check whether it looks okay.","f722945e":"The ```car_company``` variable looks okay now. Let's now drop the car name variable.","381599a8":"## 2. Data Cleaning\n\nLet's now conduct some data cleaning steps. \n\nWe've seen that there are no missing values in the dataset. We've also seen that variables are in the correct format, except ```symboling```, which should rather be a categorical variable (so that dummy variable are created for the categories).\n\nNote that it *can* be used in the model as a numeric variable also. \n\n","c63ceca7":"#### Model Building Using RFE\n\nLet's now build a model using recursive feature elimination to select features. We'll first start off with an arbitrary number of features, and then use the ```statsmodels``` library to build models using the shortlisted features (this is also because sklearn doesn't have adjusted r-squared, statsmodels has).","6b394ea6":"Based on the plot, we can choose the number of features considering the r2_score we are looking for. Note that there are a few caveats in this approach, and there are more sopisticated techniques to choose the optimal number of features:\n\n- Cross-validation: In this case, we have considered only one train-test split of the dataset; the values of r-squared and adjusted r-squared will vary with train-test split. Thus, cross-validation is a more commonly used technique (you divide the data into multiple train-test splits into 'folds', and then compute average metrics such as r-squared across the 'folds'\n\n- The values of r-squared and adjusted r-squared are computed based on the training set, though we must *always look at metrics computed on the test set*. For e.g. in this case, the test r2 actually goes down with increasing n - this phenomenon is called 'overfitting', where the performance on training set is good because the model has in some way 'memorised' the dataset, and thus the performance on test set is worse.\n\nThus, we can choose anything between 4 and 12 features, since beyond 12, the test r2 goes down; and at lesser than 4, the r2_score is too less.\n\nIn fact, the test_r2 score doesn't increase much anyway from n=6 to n=12. It is thus wiser to choose a simpler model, and so let's choose n=6.\n","67c29d88":"### Final Model Evaluation\n\nLet's now evaluate the model in terms of its assumptions. We should test that:\n- The error terms are normally distributed with mean approximately 0\n- There is little correlation between the predictors\n- Homoscedasticity, i.e. the 'spread' or 'variance' of the error term (y_true-y_pred) is constant","37f40764":"Here, although the variable ```symboling``` is numeric (int), we'd rather treat it as categorical since it has only 6 discrete values. Also, we do not want 'car_ID'.","61bc5312":"Now it may look like that the mean is not 0, though compared to the scale of 'price', -380 is not such a big number (see distribution below).","bede3f8f":"### 1. Data Understanding and Exploration\n\nLet's first have a look at the dataset and understand the size, attribute names etc.","35eed1d2":"#### Understanding the Data Dictionary\n\nThe data dictionary contains the meaning of various attributes; some non-obvious ones are:","d5bb50d1":"#### Data Exploration\n\nTo perform linear regression, the (numeric) target variable should be linearly related to *at least one another numeric variable*. Let's see whether that's true in this case.\n\n\nWe'll first subset the list of all (independent) numeric variables, and then make a **pairwise plot**.","874c5a4c":"#### Model Building and Evaluation ","f3d401e9":"This is quite hard to read, and we can rather plot correlations between variables. Also, a heatmap is pretty useful to visualise multiple correlations in one plot.","8e3517a3":"## Car Price Prediction\n\nThe solution is divided into the following sections: \n- Data understanding and exploration\n- Data cleaning\n- Data preparation\n- Model building and evaluation\n"}}