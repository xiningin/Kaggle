{"cell_type":{"7a9551d0":"code","633ef13d":"code","ba0541b5":"code","0f6cf44a":"code","58df5596":"code","4f24acc5":"code","0f93e92f":"code","ceff8f51":"code","d0853283":"code","027f8bd1":"code","b53b677b":"code","e4e1e429":"code","f46e0cef":"code","0f8f060c":"code","d0f6cd21":"code","028819c3":"code","f119c988":"code","eac3cf57":"code","02e36762":"code","9ecdba3c":"code","62877619":"code","f681dd49":"code","a57b100c":"code","699f7a3b":"code","c26a25b0":"code","ff7dda53":"code","b5b77384":"code","b35381e4":"code","6af7b38c":"code","d9bb9b76":"code","0bf846cb":"code","6ee5ddf9":"code","a5c6fc62":"code","2e55b7d1":"code","a36e48bc":"code","dddbbdbb":"code","9e93d618":"code","221afe7a":"code","97aee5ae":"code","99457818":"code","62687de8":"code","bee7bc52":"code","36dae18b":"code","97f5f1ad":"code","5755b1be":"code","869030df":"code","aeb32ff9":"code","b860ab93":"code","901ee790":"code","f59abdab":"code","60deb4b6":"code","0397c3be":"code","539a4d98":"code","c734119f":"code","0bc2b683":"code","260eb595":"code","450f3fc6":"code","21ac52a4":"code","c43c8adc":"code","bc22ac4d":"markdown","3005284f":"markdown","d163d268":"markdown","e0d873dd":"markdown","a4a7b197":"markdown","f0b7715b":"markdown","2d1b644f":"markdown","49b726b0":"markdown","44a21a77":"markdown","a93f0b97":"markdown","c5344065":"markdown","3df9a2f4":"markdown"},"source":{"7a9551d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","633ef13d":"data = pd.read_csv('\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/data.csv')","ba0541b5":"data = data.iloc[:,1:]","0f6cf44a":"# Each row represents a single track","58df5596":"data.head()","4f24acc5":"data.dtypes","0f93e92f":"pop = data.sort_values('popularity', ascending=False).head(20)\npop = pop[['artists', 'name', 'popularity', 'year']]","ceff8f51":"pop","d0853283":"# The most popular songs are all recent musics (2018 -)\n# These songs are playing a lot, as they are recent people tend to play them more\n# They are in the Top 50 Songs or Musics of the Moment which is why they are more played","027f8bd1":"# Most popular \/ played not from last 10 years recent years\npop2 = data.sort_values('popularity', ascending=False)\npop2 = pop2[pop2.year < 2010]\npop2 = pop2[['artists', 'name', 'popularity', 'year']]\npop2 = pop2.head(20)","b53b677b":"pop2","e4e1e429":"pop_year = data.sort_values('popularity', ascending=False).groupby('year').first()\npop_year = pop_year.reset_index()","f46e0cef":"pop_year = pop_year[['year', 'artists', 'name', 'popularity']]","0f8f060c":"pop_year.head(50)","d0f6cd21":"pop_year.tail(50)","028819c3":"ax = pop_year.plot.bar(x='year', y='popularity', figsize=(20,10))","f119c988":"# Pick in 1933\npop_year[pop_year.year == 1933]","eac3cf57":"data[data['name'].str.contains(\"All of Me\")].sort_values('popularity', ascending = False).head(5)[['year', 'artists', 'name', 'popularity']]","02e36762":"# Maybe people search for All of Me from John Legend, which can explain the popularity of this 1933 song","9ecdba3c":"def splitDataFrameList(df,target_column,delimiters):\n    ''' df = dataframe to split,\n    target_column = the column containing the values to split\n    separator = the symbol used to perform the split\n    returns: a dataframe with each entry for the target column separated, with each element moved into a new row. \n    The values in the other columns are duplicated across the newly divided rows.\n    '''\n    regexPattern = \"|\".join(map(re.escape,delimiters))\n    def splitListToRows(row,row_accumulator,target_column,regexPattern):\n        split_row = re.split(regexPattern,row[target_column])\n        for s in split_row:\n            new_row = row.to_dict()\n            new_row[target_column] = s\n            row_accumulator.append(new_row)\n    new_rows = []\n    df.apply(splitListToRows,axis=1,args = (new_rows,target_column,regexPattern))\n    new_df = pd.DataFrame(new_rows)\n    return new_df","62877619":"# Including feat artists\nfeat_artists =  splitDataFrameList(data,'artists',',')\nfeat_artists['artists'] = feat_artists['artists'].map(lambda x: re.sub(r'\\W+', '', x))","f681dd49":"feat_artists.head()","a57b100c":"# At least 50 songs\nfeat_count = feat_artists.groupby('artists').count().iloc[:,0]\nfeat_count = feat_count.reset_index()\nfeat_count.columns = ['artists', 'count']\nfeat_artists = pd.merge(feat_artists, feat_count, on='artists')","699f7a3b":"feat_artists['count'] = feat_artists['count'].astype(int)","c26a25b0":"feat_artists = feat_artists[feat_artists['count'] >= 50]","ff7dda53":"feat_pop = feat_artists.groupby('artists')['popularity'].mean()\nfeat_pop = feat_pop.reset_index()\nfeat_pop = feat_pop.sort_values('popularity', ascending=False)","b5b77384":"feat_pop.head(20)","b35381e4":"from ast import literal_eval\nall_artists = data.copy()\nall_artists['artists'] = all_artists['artists'].map(lambda x: literal_eval(x))\nall_artists['artists'] = all_artists['artists'].map(lambda x: x[0])","6af7b38c":"artists_count = all_artists.groupby('artists').count().iloc[:,0]\nartists_count = artists_count.reset_index()\nartists_count.columns = ['artists', 'count']\nall_artists = pd.merge(all_artists, artists_count, on='artists')","d9bb9b76":"all_artists['count'] = all_artists['count'].astype(int)","0bf846cb":"all_artists = all_artists[all_artists['count'] >= 50]","6ee5ddf9":"artists_pop = all_artists.groupby('artists')['popularity'].mean()\nartists_pop = artists_pop.reset_index()\nartists_pop = artists_pop.sort_values('popularity', ascending=False)","a5c6fc62":"artists_pop.head(20)","2e55b7d1":"danceability = data.groupby('year')['danceability'].mean()\ndanceability = danceability.reset_index()\ndanceability.columns = ['year', 'mean']","a36e48bc":"ax = danceability.plot.bar(x='year', y='mean', figsize=(20,10))","dddbbdbb":"# Decrease until early 50s then increase","9e93d618":"speechiness = data.groupby('year')['speechiness'].mean()\nspeechiness = speechiness.reset_index()\nspeechiness.columns = ['year', 'mean']","221afe7a":"ax = speechiness.plot.bar(x='year', y='mean', figsize=(20,10))","97aee5ae":"# More speechiness before the 50s then increasing from 1990 (maybe rap songs ?)","99457818":"instrumentalness = data.groupby('year')['instrumentalness'].mean()\ninstrumentalness = instrumentalness.reset_index()\ninstrumentalness.columns = ['year', 'mean']","62687de8":"ax = instrumentalness.plot.bar(x='year', y='mean', figsize=(20,10))","bee7bc52":"# Huge decrease from 1950\n# In 1933, songs with more acapela ?","36dae18b":"explicit = data.groupby('year')['explicit'].mean()\nexplicit = explicit.reset_index()\nexplicit.columns = ['year', 'mean']","97f5f1ad":"ax = explicit.plot.bar(x='year', y='mean', figsize=(20,10))","5755b1be":"# More explicit contents since the 90s","869030df":"data[(data.explicit == 1) & (data.year == 1921)]","aeb32ff9":"# There might be some noise for the year 1921","b860ab93":"data_w_genres = pd.read_csv('\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/data_w_genres.csv')\ndata_by_genres = pd.read_csv('\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/data_by_genres.csv')","901ee790":"data_w_genres = data_w_genres[['artists', 'genres']]","f59abdab":"# Taking the first artists, not including feat which lead to biais song genres\ngenres = pd.merge(all_artists, data_w_genres, on='artists')","60deb4b6":"multiple_genres = splitDataFrameList(genres,'genres',',')\nmultiple_genres['genres'] = multiple_genres['genres'].map(lambda x: re.sub(r'\\W+', '', x))","0397c3be":"# Filter genres with no values\nmultiple_genres = multiple_genres[multiple_genres.genres != '']","539a4d98":"genres_year = multiple_genres.groupby('year')['genres'].apply(list)\ngenres_year = genres_year.reset_index()","c734119f":"genres_year['most_common'] = genres_year['genres'].map(lambda x: Counter(x).most_common(1)[0][0])\ngenres_year['count_mc'] = genres_year['genres'].map(lambda x: Counter(x).most_common(1)[0][1])                                        ","0bc2b683":"total_year = all_artists.groupby('year').count().iloc[:,1]\ntotal_year = total_year.reset_index()\ntotal_year.columns = ['year', 'total']","260eb595":"genres_year = pd.merge(genres_year, total_year, on='year')","450f3fc6":"genres_year['perc_mc'] = genres_year['count_mc'] \/ genres_year['total']","21ac52a4":"fig,ax = plt.subplots()\nfig.set_size_inches(20,10)\nax = sns.barplot(x='year',y='perc_mc',hue='most_common', data=genres_year, dodge=False, palette='Paired')\nplt.xticks(rotation=90)\nax.legend(loc='upper right')\nplt.show()","c43c8adc":"# From classic to traditional pop music to rock then rap","bc22ac4d":"### Most PopularGroups or Artists not including feats","3005284f":"# Speechiness per Year","d163d268":"Numerical:\n- acousticness (Ranges from 0 to 1)\n- danceability (Ranges from 0 to 1)\n- energy (Ranges from 0 to 1)\n- duration_ms (Integer typically ranging from 200k to 300k)\n- instrumentalness (Ranges from 0 to 1)\n- valence (Ranges from 0 to 1)\n- popularity (Ranges from 0 to 100)\n- tempo (Float typically ranging from 50 to 150)\n- liveness (Ranges from 0 to 1)\n- loudness (Float typically ranging from -60 to 0)\n- speechiness (Ranges from 0 to 1)\n- year (Ranges from 1921 to 2020)\n\nDummy:\n- mode (0 = Minor, 1 = Major)\n- explicit (0 = No explicit content, 1 = Explicit content)\n\nCategorical:\n- key (All keys on octave encoded as values ranging from 0 to 11, starting on C as 0, C# as 1 and so on\u2026)\n- artists (List of artists mentioned)\n- release_date (Date of release mostly in yyyy-mm-dd format, however precision of date may vary)\n- name (Name of the song)","e0d873dd":"# Popularity","a4a7b197":"# Exploration of genres","f0b7715b":"# Danceability per Year","2d1b644f":"### Most Popular Songs","49b726b0":"# Number of explicit musics per year","44a21a77":"# Exploration","a93f0b97":"### Most Popular groups \/ artists","c5344065":"# Instrumentalness per Year","3df9a2f4":"### Most popular songs by Year"}}