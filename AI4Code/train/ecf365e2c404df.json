{"cell_type":{"81ecb3a3":"code","76c66626":"code","f82405c2":"code","9af9601b":"code","e39b770c":"code","8fabd37b":"code","f618796d":"code","179bb34a":"code","ad0fbb8b":"code","c6be4254":"code","2c88ecfc":"code","e1c6bc7e":"code","a59bdecc":"code","29669460":"code","2ae5c3e2":"code","79f98b55":"code","e5560ad5":"code","ba456aef":"code","62460e1a":"code","80070687":"code","f47004c4":"code","58903aa7":"code","70cce2fe":"code","75d667b2":"code","2684dc88":"code","5bbbd50d":"code","7487e5ad":"markdown","3911a09f":"markdown","31cb6403":"markdown","e9e60d75":"markdown","36e8ba2c":"markdown","15647929":"markdown","7b1b6280":"markdown","d1d74280":"markdown","e85e775d":"markdown","7d61cb06":"markdown","c7482488":"markdown","f21d7477":"markdown","024b9e6e":"markdown","927a00ac":"markdown","4fc975dc":"markdown","f1c39a63":"markdown"},"source":{"81ecb3a3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","76c66626":"# Because my Jupyter was showing only last line output, so need to add\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","f82405c2":"# read train and testing data\n\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\ntestID = test['Id']\ntrain.head()\ntest.head()","9af9601b":"train.columns\ntrain.shape\ntest.shape","e39b770c":"train.dtypes","8fabd37b":"# replace NaN value! If striing column, then using mode otherwise median\nfor col in train:\n    if train[col].dtype == 'object':\n        train[col] = train[col].fillna(train[col].mode())\n    else:\n        train[col] = train[col].fillna(train[col].median())","f618796d":"from sklearn.preprocessing import LabelEncoder\n\n\ndef label_encoding(df_train,df_test):\n    le_count=0;\n    for col in df_train:\n        if df_train[col].dtype == 'object':\n            if len(list(df_train[col].unique())) <= 2:\n                le = LabelEncoder()\n                le.fit(list(df_train[col].unique())+list(df_test[col].unique()))\n\n                df_train[col] = le.transform(df_train[col].astype(str))\n                df_test[col] = le.transform(df_test[col].astype(str))\n                le_count +=1;\n               \n    \n    print(\"Total label encoded columns : %d \" %le_count)","179bb34a":"label_encoding(train,test)\ntrain.shape\ntest.shape","ad0fbb8b":"import copy\n\ntrain_objs_num = len(train)\ndataset = pd.concat(objs=[train, test], axis=0)\ndataset = pd.get_dummies(dataset)\ntrain = copy.copy(dataset[:train_objs_num])\ntest = copy.copy(dataset[train_objs_num:])\ntest = test.drop(['SalePrice'],axis=1)\ntrain.shape\ntest.shape","c6be4254":"# display the distribution of salePrice\nfrom scipy.stats import norm\nsns.distplot(train['SalePrice'],fit=norm)","2c88ecfc":"corr = train.corr()","e1c6bc7e":"corr = corr.sort_values('SalePrice')\ncols = corr['SalePrice'][corr['SalePrice'].values > 0.2].index.values","a59bdecc":"cols","29669460":"heatMapCols=np.append(cols[-10:], np.array(['SalePrice']))\ncm = np.corrcoef(train[heatMapCols[::-1]].T)\nplt.figure(figsize=(16,16))\nsns.set(font_scale=1)\nwith sns.axes_style(\"white\"):\n    sns.heatmap(cm,yticklabels=heatMapCols[::-1],xticklabels=heatMapCols[::-1],fmt='.2f',annot_kws={'size':10},annot=True,square=True,cmap=None)","2ae5c3e2":"train_label = train['SalePrice']\n\ncols = np.delete(cols,len(cols)-1)\n\ntrain_sample = train[cols]\n\ntest_sample = test[cols]\n","79f98b55":"test_sample.head()\ntrain_sample.head()","e5560ad5":"from sklearn.preprocessing import  Imputer\nimputer = Imputer(strategy = 'median')\n\nimputer.fit(train_sample)\n\ntrain_sample = imputer.transform(train_sample)\ntest_sample = imputer.transform(test_sample)","ba456aef":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nscaler.fit(train_sample)\n\ntrain_sample = scaler.transform(train_sample)\ntest_sample = scaler.transform(test_sample)","62460e1a":"from sklearn.cross_validation import train_test_split\n\nX_train, X_test , y_train, y_test = train_test_split(train_sample,train_label,train_size = 0.8)\n","80070687":"X_train.shape\nX_test.shape\ntest_sample.shape","f47004c4":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(train_sample,train_label)","58903aa7":"y_preds = model.predict(X_test)","70cce2fe":"from sklearn import metrics\n\nprint(\"Root Mean square error: \" , np.sqrt(metrics.mean_squared_error(y_test,y_preds)))","75d667b2":"test_pred = model.predict(test_sample)\nsubmit = pd.DataFrame()\nsubmit['ID'] = testID\nsubmit['SalePrice'] = test_pred\nsubmit.head()","2684dc88":"submit.to_csv('attemp1.csv', index = False)","5bbbd50d":"cols = ['OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','1stFlrSF']\n\ntest_cols = test[cols];\n\nimputer = Imputer(strategy = 'median')\n\nimputer.fit(test_cols)\n\ntest_cols = imputer.transform(test_cols)\n\n\ncount=0\n\nf, axes = plt.subplots(2, 3,figsize=(15,12))\n\nfor i in range(2):\n    for j in range(3):   \n        sns.kdeplot(test_cols[:,count],test_pred,ax=axes[i][j])\n        axes[i][j].set_xlabel(\"%s\" %cols[count])\n        axes[i][j].set_ylabel(\"Sale Price\")\n        count+=1\n        \n    \nf.tight_layout()","7487e5ad":"#### 11) Evaluate predicted value","3911a09f":"#### 4) Apply Label Encoding and one hot encoding","31cb6403":"#### 1) Import dependent libraries","e9e60d75":"#### 12) Apply linear model to test data and save it!","36e8ba2c":"#### 6) Replace null values with median","15647929":"#### 2) Read data from training and testing file","7b1b6280":"#### 5) Feature Engineering - Find out the most correlated columns with SalesPrice and use only those columns in model","d1d74280":"#### 3) Exploratory analysis","e85e775d":"#### 7) Apply normalization","7d61cb06":"#### 8) Split train-testing data, so we can check the accuracy of model","c7482488":"#### 10) Predict sales value","f21d7477":"We will draw heatmap plot of top 10 correlated variables!","024b9e6e":"#### 9) Generate linear regression","927a00ac":"Here, I have predicted house sales using multiple linear regression.\n\nSteps:\n\n1) Import dependent libraries <br>\n2) Read data <br>\n3) Exploratory analysis<br>\n4) Apply Label Encoding and one hot encoding<br>\n5) Feature Engineering - Find out the most correlated columns with SalesPrice and use only those columns in model<br>\n6) Replace null values with median<br>\n7) Apply normalization<br>\n8) Split train-testing data, so we can check the accuracy of model<br>\n9) Generate linear regression<br>\n10) Predict sales value<br>\n11) Evaluate predicted value<br>\n12) Apply linear model to test data and save it!<br>","4fc975dc":"Let's draw pair plots between SalePrice and top correlated variables! So, we get better idea about the variables and it's relationship with SalePrice.","f1c39a63":"Using this model, I have scored 0.155, which is pretty good with basic model!.\n\nAs mentioned in competition, we can get more accurate model if we use advance regression model like Random forest or Light GBM. We will see that in future post!"}}