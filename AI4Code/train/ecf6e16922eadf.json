{"cell_type":{"64ec9e80":"code","f7a511ba":"code","656eaf03":"code","ab1ca890":"code","93a0e850":"code","a30dfe22":"code","068e03ef":"code","1c634744":"code","ef676498":"code","064c174a":"code","17da0112":"code","0917b6b8":"code","6b683ade":"code","1fe48b48":"code","d21b00f2":"code","be4e8dcb":"code","47cf4ff7":"code","abdde85f":"code","14c277b4":"code","50404b8b":"code","6bd1cda8":"code","6ec64940":"code","c9ef71e6":"code","5a1c2c87":"code","fc1b81d4":"code","9d4378b4":"code","7480f71d":"code","c6c422c5":"code","20e599eb":"code","e9582e7e":"code","b4e15315":"code","e4bfb02a":"code","2bcfb2b2":"code","fc81dc38":"code","4985ffeb":"code","bc2cc5db":"code","5bfa907e":"code","19e48138":"code","d362e200":"code","b087456a":"code","13818253":"code","568ec0e7":"code","b573448d":"code","1b254d4e":"code","6d96d3a0":"code","9eb9e204":"code","4e0ca683":"code","f99aa99f":"code","ae8dc3a5":"code","43054294":"code","462797bf":"code","09a79e28":"code","689cde81":"code","81d97713":"code","ae2c4d16":"code","aeb1a6d5":"code","a041e036":"code","11765275":"code","1057fc40":"code","af45f609":"code","092823fa":"code","0b95a67a":"code","2b4f933b":"code","a222fbf7":"code","0d2ee1e2":"code","ef9eeac3":"code","8b0269bd":"code","27cee662":"code","8d58ef3a":"code","aa7ee052":"code","82e932eb":"code","d64ffb2a":"code","46532a84":"code","85ca3dca":"code","27cfb257":"markdown","c8e10f34":"markdown","8940ff04":"markdown","73f82177":"markdown","9c1286c9":"markdown","b9e28609":"markdown","b379c581":"markdown","f3a75dc4":"markdown","bd79052e":"markdown","2b37c2a4":"markdown","e66b20c4":"markdown","404833ef":"markdown","1661e69d":"markdown","575fd607":"markdown","89a65b7f":"markdown","d8408fa6":"markdown","c8d7bb44":"markdown","40464406":"markdown","ee9ebb82":"markdown","b36a2beb":"markdown","2288255d":"markdown","2acacebd":"markdown","fb5900e4":"markdown","183cbe53":"markdown","7f68ade1":"markdown"},"source":{"64ec9e80":"!pip install dash","f7a511ba":"import numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.offline as po\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport matplotlib.pyplot as plt\nimport dash\nimport plotly.express as px\nimport random\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import iplot\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option(\"display.max_rows\",None)\nfrom sklearn import preprocessing \n%matplotlib inline\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import datasets, linear_model, metrics\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","656eaf03":"from IPython.core.display import HTML\n\ndef multi_table(table_list):\n    ''' Acceps a list of IpyTable objects and returns a table which contains each IpyTable in a cell\n    '''\n    return HTML(\n        '<table><tr style=\"background-color:white;\">' + \n        ''.join(['<td>' + table._repr_html_() + '<\/td>' for table in table_list]) +\n        '<\/tr><\/table>')","ab1ca890":"df = pd.read_csv('..\/input\/heart-failure-prediction\/heart.csv')","93a0e850":"# Styled Table in Plotly\n\nfig = go.Figure(data=[go.Table(\n                                 header=dict(\n                                              values=list(df.columns), # Header values\n                                              line_color='black', # Line Color of header \n                                              fill_color='orange', # background color of header\n                                              align='center', # Align header at center\n                                              height=40, # Height of Header\n                                              font=dict(color='white', size=10), # Font size & color of header text\n                                             ), cells=dict(values=[\n                                                     df.Age , # Column values\n                                                     df.Sex, \n                                                     df.ChestPainType,\n                                                     df.RestingBP, \n                                                     df.Cholesterol,\n                                                     df.FastingBS,\n                                                     df.RestingECG,\n                                                     df.MaxHR,\n                                                     df.ExerciseAngina,\n                                                     df.Oldpeak,\n                                                     df.ST_Slope,\n                                                     df.HeartDisease\n                                                    ],line_color='darkgrey', # Line color of the cell\n                                            fill_color='lightcyan', # Color of the cell\n                                            align='left'  # Align text to left in cell\n                                           )\n                               )\n                     ]\n               )\n\nfig.update_layout(width=1000, height=500)\nfig.show()","a30dfe22":"df.head()","068e03ef":"df.tail()","1c634744":"df.shape","ef676498":"df.size","064c174a":"df.dtypes","17da0112":"df.columns","0917b6b8":"df.info()","6b683ade":"df.describe()","1fe48b48":"df.isnull().sum()","d21b00f2":"df.duplicated().sum()","be4e8dcb":"df.corr()","47cf4ff7":"df.skew()","abdde85f":"colors = px.colors.cyclical.Twilight\nfig = make_subplots(rows=1,cols=2,\n                    subplot_titles=('Countplot',\n                                    'Percentages'),\n                    specs=[[{\"type\": \"xy\"},\n                            {'type':'domain'}]])\nfig.add_trace(go.Bar(y = df['Sex'].value_counts().values.tolist(), \n                      x = df['Sex'].value_counts().index, \n                      text=df['Sex'].value_counts().values.tolist(),\n              textfont=dict(size=15),\n                      textposition = 'outside',\n                      showlegend=False,\n              marker = dict(color = colors,\n                            line_color = 'black',\n                            line_width=3)),row = 1,col = 1)\nfig.add_trace((go.Pie(labels=df['Sex'].value_counts().keys(),\n                             values=df['Sex'].value_counts().values,textfont = dict(size = 16),\n                     hole = .4,\n                     marker=dict(colors=colors),\n                     textinfo='label+percent',\n                     hoverinfo='label')), row = 1, col = 2)\nfig.update_yaxes(range=[0,800])\n#Changing plot & figure background \nfig.update_layout(\n                    paper_bgcolor= '#FFFDE7',\n                    plot_bgcolor= '#FFFDE7',\n                    title=dict(text = \"Gender Distribution\",x=0.5,y=0.95),\n                    title_font_size=30\n                  )\niplot(fig)","14c277b4":"colors = px.colors.cyclical.Twilight\nfig = make_subplots(rows=1,cols=2,\n                    subplot_titles=('Countplot',\n                                    'Percentages'),\n                    specs=[[{\"type\": \"xy\"},\n                            {'type':'domain'}]])\nfig.add_trace(go.Bar(y = df['ChestPainType'].value_counts().values.tolist(), \n                      x = df['ChestPainType'].value_counts().index, \n                      text=df['ChestPainType'].value_counts().values.tolist(),\n              textfont=dict(size=15),\n                      textposition = 'outside',\n                      showlegend=False,\n              marker = dict(color = colors,\n                            line_color = 'black',\n                            line_width=3)),row = 1,col = 1)\nfig.add_trace((go.Pie(labels=df['ChestPainType'].value_counts().keys(),\n                             values=df['ChestPainType'].value_counts().values,textfont = dict(size = 16),\n                     hole = .4,\n                     marker=dict(colors=colors),\n                     textinfo='label+percent',\n                     hoverinfo='label')), row = 1, col = 2)\nfig.update_yaxes(range=[0,530])\n#Changing plot & figure background \nfig.update_layout(\n                    paper_bgcolor= '#FFFDE7',\n                    plot_bgcolor= '#FFFDE7',\n                    title=dict(text = \"ChestPainType Distribution\",x=0.5,y=0.95),\n                    title_font_size=30\n                  )\niplot(fig)","50404b8b":"colors = px.colors.cyclical.Twilight\nfig = make_subplots(rows=1,cols=2,\n                    subplot_titles=('Countplot',\n                                    'Percentages'),\n                    specs=[[{\"type\": \"xy\"},\n                            {'type':'domain'}]])\nfig.add_trace(go.Bar(y = df['FastingBS'].value_counts().values.tolist(), \n                      x = df['FastingBS'].value_counts().index, \n                      text=df['FastingBS'].value_counts().values.tolist(),\n              textfont=dict(size=15),\n                      textposition = 'outside',\n                      showlegend=False,\n              marker = dict(color = colors,\n                            line_color = 'black',\n                            line_width=3)),row = 1,col = 1)\nfig.add_trace((go.Pie(labels=df['FastingBS'].value_counts().keys(),\n                             values=df['FastingBS'].value_counts().values,textfont = dict(size = 16),\n                     hole = .4,\n                     marker=dict(colors=colors),\n                     textinfo='label+percent',\n                     hoverinfo='label')), row = 1, col = 2)\nfig.update_yaxes(range=[0,800])\n#Changing plot & figure background \nfig.update_layout(\n                    paper_bgcolor= '#FFFDE7',\n                    plot_bgcolor= '#FFFDE7',\n                    title=dict(text = \"FastingBS Distribution\",x=0.5,y=0.95),\n                    title_font_size=30\n                  )\niplot(fig)","6bd1cda8":"colors = px.colors.cyclical.Twilight\nfig = make_subplots(rows=1,cols=2,\n                    subplot_titles=('Countplot',\n                                    'Percentages'),\n                    specs=[[{\"type\": \"xy\"},\n                            {'type':'domain'}]])\nfig.add_trace(go.Bar(y = df['RestingECG'].value_counts().values.tolist(), \n                      x = df['RestingECG'].value_counts().index, \n                      text=df['RestingECG'].value_counts().values.tolist(),\n              textfont=dict(size=15),\n                      textposition = 'outside',\n                      showlegend=False,\n              marker = dict(color = colors,\n                            line_color = 'black',\n                            line_width=3)),row = 1,col = 1)\nfig.add_trace((go.Pie(labels=df['RestingECG'].value_counts().keys(),\n                             values=df['RestingECG'].value_counts().values,textfont = dict(size = 16),\n                     hole = .4,\n                     marker=dict(colors=colors),\n                     textinfo='label+percent',\n                     hoverinfo='label')), row = 1, col = 2)\nfig.update_yaxes(range=[0,600])\n#Changing plot & figure background \nfig.update_layout(\n                    paper_bgcolor= '#FFFDE7',\n                    plot_bgcolor= '#FFFDE7',\n                    title=dict(text = \"RestingECG Distribution\",x=0.5,y=0.95),\n                    title_font_size=30\n                  )\niplot(fig)","6ec64940":"colors = px.colors.cyclical.Twilight\nfig = make_subplots(rows=1,cols=2,\n                    subplot_titles=('Countplot',\n                                    'Percentages'),\n                    specs=[[{\"type\": \"xy\"},\n                            {'type':'domain'}]])\nfig.add_trace(go.Bar(y = df['ExerciseAngina'].value_counts().values.tolist(), \n                      x = df['ExerciseAngina'].value_counts().index, \n                      text=df['ExerciseAngina'].value_counts().values.tolist(),\n              textfont=dict(size=15),\n                      textposition = 'outside',\n                      showlegend=False,\n              marker = dict(color = colors,\n                            line_color = 'black',\n                            line_width=3)),row = 1,col = 1)\nfig.add_trace((go.Pie(labels=df['ExerciseAngina'].value_counts().keys(),\n                             values=df['ExerciseAngina'].value_counts().values,textfont = dict(size = 16),\n                     hole = .4,\n                     marker=dict(colors=colors),\n                     textinfo='label+percent',\n                     hoverinfo='label')), row = 1, col = 2)\nfig.update_yaxes(range=[0,600])\n#Changing plot & figure background \nfig.update_layout(\n                    paper_bgcolor= '#FFFDE7',\n                    plot_bgcolor= '#FFFDE7',\n                    title=dict(text = \"ExerciseAngina Distribution\",x=0.5,y=0.95),\n                    title_font_size=30\n                  )\niplot(fig)","c9ef71e6":"colors = px.colors.cyclical.Twilight\nfig = make_subplots(rows=1,cols=2,\n                    subplot_titles=('Countplot',\n                                    'Percentages'),\n                    specs=[[{\"type\": \"xy\"},\n                            {'type':'domain'}]])\nfig.add_trace(go.Bar(y = df['ST_Slope'].value_counts().values.tolist(), \n                      x = df['ST_Slope'].value_counts().index, \n                      text=df['ST_Slope'].value_counts().values.tolist(),\n              textfont=dict(size=15),\n                      textposition = 'outside',\n                      showlegend=False,\n              marker = dict(color = colors,\n                            line_color = 'black',\n                            line_width=3)),row = 1,col = 1)\nfig.add_trace((go.Pie(labels=df['ST_Slope'].value_counts().keys(),\n                             values=df['ST_Slope'].value_counts().values,textfont = dict(size = 16),\n                     hole = .4,\n                     marker=dict(colors=colors),\n                     textinfo='label+percent',\n                     hoverinfo='label')), row = 1, col = 2)\nfig.update_yaxes(range=[0,500])\n#Changing plot & figure background \nfig.update_layout(\n                    paper_bgcolor= '#FFFDE7',\n                    plot_bgcolor= '#FFFDE7',\n                    title=dict(text = \"ST_Slope Distribution\",x=0.5,y=0.95),\n                    title_font_size=30\n                  )\niplot(fig)","5a1c2c87":"colors = px.colors.cyclical.Twilight\nfig = make_subplots(rows=1,cols=2,\n                    subplot_titles=('Countplot',\n                                    'Percentages'),\n                    specs=[[{\"type\": \"xy\"},\n                            {'type':'domain'}]])\nfig.add_trace(go.Bar(y = df['HeartDisease'].value_counts().values.tolist(), \n                      x = df['HeartDisease'].value_counts().index, \n                      text=df['HeartDisease'].value_counts().values.tolist(),\n              textfont=dict(size=15),\n                      textposition = 'outside',\n                      showlegend=False,\n              marker = dict(color = colors,\n                            line_color = 'black',\n                            line_width=3)),row = 1,col = 1)\nfig.add_trace((go.Pie(labels=df['HeartDisease'].value_counts().keys(),\n                             values=df['HeartDisease'].value_counts().values,textfont = dict(size = 16),\n                     hole = .4,\n                     marker=dict(colors=colors),\n                     textinfo='label+percent',\n                     hoverinfo='label')), row = 1, col = 2)\nfig.update_yaxes(range=[0,550])\n#Changing plot & figure background \nfig.update_layout(\n                    paper_bgcolor= '#FFFDE7',\n                    plot_bgcolor= '#FFFDE7',\n                    title=dict(text = \"HeartDisease Distribution\",x=0.5,y=0.95),\n                    title_font_size=30\n                  )\niplot(fig)","fc1b81d4":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Sex', 'ChestPainType','FastingBS','RestingECG',\n                          'ExerciseAngina',  'ST_Slope','HeartDisease'}}\nmulti_table([df_nunique['Sex'].style\\\n      .format('{:.2f}')\\\n      .highlight_max(color = 'lightgreen')\\\n      .highlight_min(color = 'coral')\n      ,df_nunique['ChestPainType'].style\\\n      .format('{:.2f}')\\\n      .highlight_max(color = 'lightgreen')\\\n      .highlight_min(color ='coral'),\n      df_nunique['FastingBS'].style\\\n      .format('{:.2f}')\\\n      .highlight_max(color = 'lightgreen')\\\n      .highlight_min(color ='coral'),\n      df_nunique['RestingECG'].style\\\n      .format('{:.2f}')\\\n      .highlight_max(color = 'lightgreen')\\\n      .highlight_min(color ='coral'),\\\n      df_nunique['ExerciseAngina'].style\\\n      .format('{:.2f}')\\\n      .highlight_max(color = 'lightgreen')\\\n      .highlight_min(color ='coral'),\n      df_nunique['ST_Slope'].style\\\n      .format('{:.2f}')\\\n      .highlight_max(color = 'lightgreen')\\\n      .highlight_min(color ='coral'),\n      df_nunique['HeartDisease'].style\\\n      .format('{:.2f}')\\\n      .highlight_max(color = 'lightgreen')\\\n      .highlight_min(color ='coral')])","9d4378b4":"# Using facet_row and or facet_col arguments to create Sub plots\nfig = px.scatter(df, \n                 x=df.Age, \n                 y=df.Cholesterol, \n                 color=df.HeartDisease, \n                 facet_col=df.FastingBS,\n                 facet_row=df.Sex,\n                 color_discrete_map={1: \"#FF5722\",0: \"#7CB342\"},\n                 width=950, \n                 height=800,\n                 title=\"HeartDisease Data\")\n\nfig.update_layout(\n                    plot_bgcolor= \"#dcedc1\",\n                    paper_bgcolor=\"#FFFDE7\",\n                 )\n\n\nfig.show()\n#po.plot(fig)","7480f71d":"cat = ['Sex', 'ChestPainType','FastingBS','RestingECG',\n                          'ExerciseAngina',  'ST_Slope','HeartDisease']\nnum = ['Age','RestingBP','Cholesterol','MaxHR','Oldpeak']","c6c422c5":"import seaborn as sns\nsns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#FFFDE7', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#FFFDE7'}, font_scale = 0.55)\nfig, ax = plt.subplots(3, 2, figsize = (6.5, 9))\nfor indx, (column, axes) in list(enumerate(list(zip(cat, ax.flatten())))):\n    if column not in 'HearDisease':\n        sns.countplot(ax = axes, x = df[column], hue = df['HeartDisease'], palette = colors, alpha = 1)  \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]   \naxes_legend = ax.flatten()\naxes_legend[1].legend(title = 'HeartDisease', loc = 'upper right')\naxes_legend[2].legend(title = 'HeartDisease', loc = 'upper right')\nplt.show()","20e599eb":"import seaborn as sns\nsns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#FFFDE7', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#FFFDE7'}, font_scale = 0.55)\nfig, ax = plt.subplots(3, 2, figsize = (6.5, 9))\nfor indx, (column, axes) in list(enumerate(list(zip(cat[1:], ax.flatten())))):\n    sns.countplot(ax = axes, x = df[column], hue = df['Sex'], palette = colors, alpha = 1)  \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]   \naxes_legend = ax.flatten()\naxes_legend[1].legend(title = 'Sex', loc = 'upper right')\naxes_legend[2].legend(title = 'Sex', loc = 'upper right')\nplt.show()","e9582e7e":"import seaborn as sns\nsns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#FFFDE7', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#FFFDE7'}, font_scale = 0.55)\nfig, ax = plt.subplots(3, 2, figsize = (6.5, 9))\ncat2 = []\nfor i in cat:\n    if i not in 'ChestPainType':\n        cat2.append(i)\nfor indx, (column, axes) in list(enumerate(list(zip(cat2, ax.flatten())))):\n    sns.countplot(ax = axes, x = df[column], hue = df['ChestPainType'], palette = colors, alpha = 1)  \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]   \naxes_legend = ax.flatten()\naxes_legend[1].legend(title = 'ChestPainType', loc = 'upper right')\naxes_legend[2].legend(title = 'ChestPainType', loc = 'upper right')\nplt.show()","b4e15315":"import seaborn as sns\nsns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#FFFDE7', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#FFFDE7'}, font_scale = 0.55)\nfig, ax = plt.subplots(3, 2, figsize = (6.5, 9))\ncat2 = []\nfor i in cat:\n    if i not in 'FastingBS':\n        cat2.append(i)\nfor indx, (column, axes) in list(enumerate(list(zip(cat2, ax.flatten())))):\n    sns.countplot(ax = axes, x = df[column], hue = df['FastingBS'], palette = colors, alpha = 1)  \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]   \naxes_legend = ax.flatten()\naxes_legend[1].legend(title = 'FastingBS', loc = 'upper right')\naxes_legend[2].legend(title = 'FastingBS', loc = 'upper right')\nplt.show()","e4bfb02a":"import seaborn as sns\nsns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#FFFDE7', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#FFFDE7'}, font_scale = 0.55)\nfig, ax = plt.subplots(3, 2, figsize = (6.5, 9))\ncat2 = []\nfor i in cat:\n    if i not in 'RestingECG':\n        cat2.append(i)\nfor indx, (column, axes) in list(enumerate(list(zip(cat2, ax.flatten())))):\n    sns.countplot(ax = axes, x = df[column], hue = df['RestingECG'], palette = colors, alpha = 1)  \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]   \naxes_legend = ax.flatten()\naxes_legend[1].legend(title = 'RestingECG', loc = 'upper right')\naxes_legend[2].legend(title = 'RestingECG', loc = 'upper right')\nplt.show()","2bcfb2b2":"import seaborn as sns\nsns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#FFFDE7', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#FFFDE7'}, font_scale = 0.55)\nfig, ax = plt.subplots(3, 2, figsize = (6.5, 9))\ncat2 = []\nfor i in cat:\n    if i not in 'ExerciseAngina':\n        cat2.append(i)\nfor indx, (column, axes) in list(enumerate(list(zip(cat2, ax.flatten())))):\n    sns.countplot(ax = axes, x = df[column], hue = df['ExerciseAngina'], palette = colors, alpha = 1)  \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]   \naxes_legend = ax.flatten()\naxes_legend[1].legend(title = 'ExerciseAngina', loc = 'upper right')\naxes_legend[2].legend(title = 'ExerciseAngina', loc = 'upper right')\nplt.show()","fc81dc38":"import seaborn as sns\nsns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#FFFDE7', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#FFFDE7'}, font_scale = 0.55)\nfig, ax = plt.subplots(3, 2, figsize = (6.5, 9))\ncat2 = []\nfor i in cat:\n    if i not in 'ST_Slope':\n        cat2.append(i)\nfor indx, (column, axes) in list(enumerate(list(zip(cat2, ax.flatten())))):\n    sns.countplot(ax = axes, x = df[column], hue = df['ST_Slope'], palette = colors, alpha = 1)  \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]   \naxes_legend = ax.flatten()\naxes_legend[1].legend(title = 'ST_Slope', loc = 'upper right')\naxes_legend[2].legend(title = 'ST_Slope', loc = 'upper right')\nplt.show()","4985ffeb":"sns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#FFFDE7', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#FFFDE7'}, font_scale = 0.55)\nfig, ax = plt.subplots(4, 2, figsize = (6.5, 7.5))\nfor indx, (column, axes) in list(enumerate(list(zip(cat, ax.flatten())))):\n    \n    sns.violinplot(ax = axes, x = df[column], \n                   y = df['Age'],\n                   scale = 'width', linewidth = 0.5, \n                   palette = colors, inner = None)\n    \n    plt.setp(axes.collections, alpha = 0.3)\n    \n    sns.stripplot(ax = axes, x = df[column], \n                  y = df['Age'],\n                  palette = colors, alpha = 0.9, \n                  s = 1.5, jitter = 0.07)\n    sns.pointplot(ax = axes, x = df[column],\n                  y = df['Age'],\n                  color = '#ff5736', scale = 0.25,\n                  estimator = np.mean, ci = 'sd',\n                  errwidth = 0.5, capsize = 0.15, join = True)\n    \n    plt.setp(axes.lines, zorder = 100)\n    plt.setp(axes.collections, zorder = 100)\n    \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]\n    \nplt.tight_layout()\nplt.show()","bc2cc5db":"sns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#FFFDE7', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#FFFDE7'}, font_scale = 0.55)\nfig, ax = plt.subplots(4, 2, figsize = (6.5, 7.5))\nfor indx, (column, axes) in list(enumerate(list(zip(cat, ax.flatten())))):\n    \n    sns.violinplot(ax = axes, x = df[column], \n                   y = df['RestingBP'],\n                   scale = 'width', linewidth = 0.5, \n                   palette = colors, inner = None)\n    \n    plt.setp(axes.collections, alpha = 0.3)\n    \n    sns.stripplot(ax = axes, x = df[column], \n                  y = df['RestingBP'],\n                  palette = colors, alpha = 0.9, \n                  s = 1.5, jitter = 0.07)\n    sns.pointplot(ax = axes, x = df[column],\n                  y = df['RestingBP'],\n                  color = '#ff5736', scale = 0.25,\n                  estimator = np.mean, ci = 'sd',\n                  errwidth = 0.5, capsize = 0.15, join = True)\n    \n    plt.setp(axes.lines, zorder = 100)\n    plt.setp(axes.collections, zorder = 100)\n    \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]\n    \nplt.tight_layout()\nplt.show()","5bfa907e":"sns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#FFFDE7', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#FFFDE7'}, font_scale = 0.55)\nfig, ax = plt.subplots(4, 2, figsize = (6.5, 7.5))\nfor indx, (column, axes) in list(enumerate(list(zip(cat, ax.flatten())))):\n    \n    sns.violinplot(ax = axes, x = df[column], \n                   y = df['Cholesterol'],\n                   scale = 'width', linewidth = 0.5, \n                   palette = colors, inner = None)\n    \n    plt.setp(axes.collections, alpha = 0.3)\n    \n    sns.stripplot(ax = axes, x = df[column], \n                  y = df['Cholesterol'],\n                  palette = colors, alpha = 0.9, \n                  s = 1.5, jitter = 0.07)\n    sns.pointplot(ax = axes, x = df[column],\n                  y = df['Cholesterol'],\n                  color = '#ff5736', scale = 0.25,\n                  estimator = np.mean, ci = 'sd',\n                  errwidth = 0.5, capsize = 0.15, join = True)\n    \n    plt.setp(axes.lines, zorder = 100)\n    plt.setp(axes.collections, zorder = 100)\n    \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]\n    \nplt.tight_layout()\nplt.show()","19e48138":"sns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#FFFDE7', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#FFFDE7'}, font_scale = 0.55)\nfig, ax = plt.subplots(4, 2, figsize = (6.5, 7.5))\nfor indx, (column, axes) in list(enumerate(list(zip(cat, ax.flatten())))):\n    \n    sns.violinplot(ax = axes, x = df[column], \n                   y = df['MaxHR'],\n                   scale = 'width', linewidth = 0.5, \n                   palette = colors, inner = None)\n    \n    plt.setp(axes.collections, alpha = 0.3)\n    \n    sns.stripplot(ax = axes, x = df[column], \n                  y = df['MaxHR'],\n                  palette = colors, alpha = 0.9, \n                  s = 1.5, jitter = 0.07)\n    sns.pointplot(ax = axes, x = df[column],\n                  y = df['MaxHR'],\n                  color = '#ff5736', scale = 0.25,\n                  estimator = np.mean, ci = 'sd',\n                  errwidth = 0.5, capsize = 0.15, join = True)\n    \n    plt.setp(axes.lines, zorder = 100)\n    plt.setp(axes.collections, zorder = 100)\n    \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]\n    \nplt.tight_layout()\nplt.show()","d362e200":"sns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#FFFDE7', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#FFFDE7'}, font_scale = 0.55)\nfig, ax = plt.subplots(4, 2, figsize = (6.5, 7.5))\nfor indx, (column, axes) in list(enumerate(list(zip(cat, ax.flatten())))):\n    \n    sns.violinplot(ax = axes, x = df[column], \n                   y = df['Oldpeak'],\n                   scale = 'width', linewidth = 0.5, \n                   palette = colors, inner = None)\n    \n    plt.setp(axes.collections, alpha = 0.3)\n    \n    sns.stripplot(ax = axes, x = df[column], \n                  y = df['Oldpeak'],\n                  palette = colors, alpha = 0.9, \n                  s = 1.5, jitter = 0.07)\n    sns.pointplot(ax = axes, x = df[column],\n                  y = df['Oldpeak'],\n                  color = '#ff5736', scale = 0.25,\n                  estimator = np.mean, ci = 'sd',\n                  errwidth = 0.5, capsize = 0.15, join = True)\n    \n    plt.setp(axes.lines, zorder = 100)\n    plt.setp(axes.collections, zorder = 100)\n    \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]\n    \nplt.tight_layout()\nplt.show()","b087456a":"sns.set_theme(rc = {'figure.dpi': 120, 'axes.labelsize': 8, \n                    'axes.facecolor': '#FFFDE7', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#FFFDE7'}, font_scale = 0.65)\n\nfig, ax = plt.subplots(5, 1, figsize = (7, 14))\n\nfor indx, (column, axes) in list(enumerate(list(zip(num, ax.flatten())))):\n    \n    sns.scatterplot(ax = axes, y = df[column].index, x = df[column], \n                    hue = df['HeartDisease'], palette = 'magma', alpha = 0.8)\n    \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]\n    \nplt.tight_layout()\nplt.show()","13818253":"sns.set_theme(rc = {'figure.dpi': 120, 'axes.labelsize': 8, \n                    'axes.facecolor': '#FFFDE7', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#FFFDE7'}, font_scale = 0.65)\n\nfig, ax = plt.subplots(5, 1, figsize = (7, 14))\n\nfor indx, (column, axes) in list(enumerate(list(zip(num, ax.flatten())))):\n    \n    sns.histplot(ax = axes, x = df[column], hue = df['HeartDisease'], \n                 palette = 'magma', alpha = 0.8, multiple = 'stack')\n    \n    legend = axes.get_legend() # sns.hisplot has some issues with legend\n    handles = legend.legendHandles\n    legend.remove()\n    axes.legend(handles, ['0', '1'], title = 'HeartDisease', loc = 'upper right')\n    Quantiles = np.quantile(df[column], [0, 0.25, 0.50, 0.75, 1])\n    \n    for q in Quantiles: axes.axvline(x = q, linewidth = 0.5, color = 'r')\n        \nplt.tight_layout()\nplt.show()","568ec0e7":"plt.figure(figsize=(16,11))\nsns.set(rc={\"axes.facecolor\":\"#b0deff\",\"axes.grid\":False,\n            'xtick.labelsize':15,'ytick.labelsize':15,\n            'axes.labelsize':20,'figure.figsize':(20.0, 9.0)})\nparams = dict(data=df ,x = df.Sex ,y = df.Age ,hue=df.HeartDisease,dodge=True)\nsns.stripplot(**params , size=8,jitter=0.35,palette=['#33FF66','#FF6600'],edgecolor='black',linewidth=1)\nsns.boxplot(**params ,palette=['#BDBDBD','#E0E0E0'],linewidth=6)\nplt.show()","b573448d":"cat","1b254d4e":"plt.figure(figsize=(16,11))\nsns.set(rc={\"axes.facecolor\":\"#b0deff\",\"axes.grid\":False,\n            'xtick.labelsize':15,'ytick.labelsize':15,\n            'axes.labelsize':20,'figure.figsize':(20.0, 9.0)})\nparams = dict(data=df ,x = df.ChestPainType,y = df.Age ,hue=df.HeartDisease,dodge=True)\nsns.stripplot(**params , size=8,jitter=0.35,palette=['#33FF66','#FF6600'],edgecolor='black',linewidth=1)\nsns.boxplot(**params ,palette=['#BDBDBD','#E0E0E0'],linewidth=6)\nplt.show()","6d96d3a0":"df1 = df[df['HeartDisease'].isin([0,1])]\ndf1.head()","9eb9e204":"# Plot a subset of variables\ng = sns.PairGrid(df1 , hue='Sex' ,vars=[\"Age\",\"RestingBP\",\"Cholesterol\"],height=5, aspect=1)\ng = g.map_offdiag(plt.scatter , edgecolor=\"w\", s=130)\ng = g.map_diag(plt.hist , edgecolor ='w', linewidth=2)\ng = g.add_legend()\nplt.show()","4e0ca683":"# Plot a subset of variables\ng = sns.PairGrid(df1 , hue='Sex' ,vars=[\"MaxHR\",\"Oldpeak\"],height=5, aspect=1)\ng = g.map_offdiag(plt.scatter , edgecolor=\"w\", s=130)\ng = g.map_diag(plt.hist , edgecolor ='w', linewidth=2)\ng = g.add_legend()\nplt.show()","f99aa99f":"''' Plot a Shifted Correlation Matrix '''\n# Diagonal correlation is always unity & less relevant, shifted variant shows only relevant cases\ndef corrMat(df,id=False):\n    \n    corr_mat = df.corr().round(2)\n    f, ax = plt.subplots(figsize=(10,7))\n    mask = np.triu(np.ones_like(corr_mat, dtype=bool))\n    mask = mask[1:,:-1]\n    corr = corr_mat.iloc[1:,:-1].copy()\n    sns.heatmap(corr,mask=mask,vmin=-0.3,vmax=0.3,center=0, \n                cmap='RdPu_r',square=False,lw=2,annot=True,cbar=False)\n#     bottom, top = ax.get_ylim() \n#     ax.set_ylim(bottom + 0.5, top - 0.5) \n    ax.set_title('Shifted Linear Correlation Matrix')\n    \ncorrMat(df)","ae8dc3a5":"df_groupby = {var: pd.DataFrame(df.groupby([var, 'HeartDisease']).size()) \n              for var in {'Sex', 'ChestPainType','FastingBS','RestingECG',\n                          'ExerciseAngina',  'ST_Slope','HeartDisease'}}\n\nmulti_table([df_groupby['Sex'],df_groupby['ChestPainType'],df_groupby['FastingBS'],df_groupby['RestingECG'],\n      df_groupby['ExerciseAngina'],df_groupby['ST_Slope'],df_groupby['HeartDisease']])","43054294":"df2 = df.groupby('Sex').agg({'Age' : 'mean', \"ChestPainType\":'count','RestingBP':'mean','Cholesterol':'mean',\n                            'FastingBS':'sum','RestingECG':'count','MaxHR':'mean','ExerciseAngina':'count','Oldpeak':'mean',\n                            'ST_Slope':'count','HeartDisease':'sum'})\ndf2\n# average age is same for both male and female","462797bf":"px.bar(data_frame=df2, barmode='group',\n       title = \"<b>Gender wise Analyzing<\/b>\",template=\"plotly_dark\")","09a79e28":"def count_outliers(data,col):\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        q4 = data[col].quantile(1,interpolation='nearest')\n        IQR = q3 -q1\n        global LLP\n        global ULP\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers in\",i)\n        else:\n            print(\"There are outliers in\",i)\n            x = data[data[col]<LLP][col].size\n            y = data[data[col]>ULP][col].size\n            a.append(i)\n            print('Count of outliers are:',x+y)\nglobal a\na = []\nfor i in num:\n    count_outliers(df,i)","689cde81":"def LABEL_ENCODING(c1):\n    from sklearn import preprocessing\n    label_encoder = preprocessing.LabelEncoder()\n    df[c1]= label_encoder.fit_transform(df[c1])\n    df[c1].unique()","81d97713":"LABEL_ENCODING(\"Sex\")\nLABEL_ENCODING(\"ChestPainType\")\nLABEL_ENCODING(\"RestingECG\")\nLABEL_ENCODING(\"ExerciseAngina\")\nLABEL_ENCODING(\"ST_Slope\")\ndf","ae2c4d16":"scaler = StandardScaler()\nscaler.fit(df.drop('HeartDisease',axis = 1))","aeb1a6d5":"scaled_features = scaler.transform(df.drop('HeartDisease',axis = 1))\ndf_feat = pd.DataFrame(scaled_features,columns = df.columns[:-1])\ndf_feat.head()","a041e036":"X = df_feat\ny = df['HeartDisease']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","11765275":"knn = KNeighborsClassifier(n_neighbors = 9)\nknn.fit(X_train,y_train)","1057fc40":"pred = knn.predict(X_test)\npred","af45f609":"print(confusion_matrix(y_test,pred))","092823fa":"print(classification_report(y_test,pred))","0b95a67a":"error_rate= []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors = i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","2b4f933b":"plt.figure(figsize = (10,6))\nplt.plot(range(1,40),error_rate,color = 'blue',linestyle = '--',marker = 'o',markerfacecolor='red',markersize = 10)\nplt.title('Error Rate vs K')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","a222fbf7":"print(\"Accuracy:\",metrics.accuracy_score(y_test, pred))","0d2ee1e2":"forest= RandomForestClassifier(n_estimators =40, random_state = 0)\nforest.fit(X_train,y_train)  \ny_pred = forest.predict(X_test)","ef9eeac3":"print(confusion_matrix(y_test,y_pred))","8b0269bd":"print(classification_report(y_test,y_pred))","27cee662":"print(\"Accuracy:\",forest.score(X_test,y_test))","8d58ef3a":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)\npred = logmodel.predict(X_test)","aa7ee052":"print(confusion_matrix(y_test,pred))","82e932eb":"print(classification_report(y_test,pred))","d64ffb2a":"print('Accuracy:',logmodel.score(X_test,y_test))","46532a84":"feature = pd.Series(forest.feature_importances_, index = X_train.columns).sort_values(ascending = False)\nprint(feature)","85ca3dca":"plt.figure(figsize = (10,6))\nsns.barplot(x = feature, y = feature.index)\nplt.title(\"Feature Importance\")\nplt.xlabel('Score')\nplt.ylabel('Features')\nplt.show()","27cfb257":"### K-Nearest Neighbour Algorithm\n> #### K-Nearest Neighbour is one of the simplest Machine Learning algorithms based on Supervised Learning technique.\n> #### K-NN algorithm assumes the similarity between the new case\/data and available cases and put the new case into the category that is most similar to the available categories.\n> #### K-NN algorithm stores all the available data and classifies a new data point based on the similarity. This means when new data appears then it can be easily classified into a well suite category by using K- NN algorithm.\n> #### K-NN algorithm can be used for Regression as well as for Classification but mostly it is used for the Classification problems.\n> #### K-NN is a non-parametric algorithm, which means it does not make any assumption on underlying data.\n> #### It is also called a lazy learner algorithm because it does not learn from the training set immediately instead it stores the dataset and at the time of classification, it performs an action on the dataset.\n> #### KNN algorithm at the training phase just stores the dataset and when it gets new data, then it classifies that data into a category that is much similar to the new data.\n> #### Example: Suppose, we have an image of a creature that looks similar to cat and dog, but we want to know either it is a cat or dog. So for this identification, we can use the KNN algorithm, as it works on a similarity measure. Our KNN model will find the similar features of the new data set to the cats and dogs images and based on the most similar features it will put it in either cat or dog category.","c8e10f34":"<img src=\"https:\/\/static.javatpoint.com\/tutorial\/machine-learning\/images\/k-nearest-neighbor-algorithm-for-machine-learning4.png\" width=\"500px\">","8940ff04":"### How to select the value of K in the K-NN Algorithm?\n>#### There is no particular way to determine the best value for \"K\", so we need to try some values to find the best out of them. The most preferred value for K is 5.\n>#### A very low value for K such as K=1 or K=2, can be noisy and lead to the effects of outliers in the model.\n>#### Large values for K are good, but it may find some difficulties.","73f82177":"<a id=\"5\"><\/a>\n<h1 style=\"color:red;font-size:45px;font-family:Georgia;text-align:center;\">\ud83d\udc8a<strong><strong style=\"color:black;font-size:40px;font-family:Georgia;\">Count <strong style=\"color:red;font-size:45px;font-family:Georgia;\">of <strong style=\"color:black;font-size:40px;font-family:Georgia;\">Outliers <\/strong><\/strong><\/strong><\/strong><\/h1>","9c1286c9":"<a id=\"2\"><\/a>\n<h1 style=\"color:red;font-size:45px;font-family:Georgia;text-align:center;\">\ud83d\udc8a<strong><strong style=\"color:black;font-size:40px;font-family:Georgia;\">Loading <strong style=\"color:red;font-size:45px;font-family:Georgia;\">The <strong style=\"color:black;font-size:40px;font-family:Georgia;\">DataSet <\/strong><\/strong><\/strong><\/strong><\/h1>","b9e28609":"<img src=\"https:\/\/static.javatpoint.com\/tutorial\/machine-learning\/images\/k-nearest-neighbor-algorithm-for-machine-learning3.png\" width=\"500px\">","b379c581":"<h2><p style=\"background-color:#FFFFF;font-family:Georgia;color:#000000;font-size:80%;text-align:center;border-radius:20px 20px;border-style: dotted;border-width:5px;border-color:#ff0000;\"><b>Table Of The Contents<\/b><\/p><\/h2>\n\n* [Importing The Libraries](#1)\n* [Loading The Dataset](#2)\n* [Exploratory Data Analysis](#3)\n* [Data Visualization](#4)\n* [Count of Outliers](#5)\n* [Data Preprocessing](#6)\n* [Feature Scaling](#7)\n* [Feature Selection](#8)\n* [Prediction of Heart Disease using KNN](#9)\n* [Prediction of Heart Disease using Random Forest Classifier](#10)\n* [Predictionof Heart Disease using Logistic Regression Classifier](#11)\n* [Feature Importance](#12)","f3a75dc4":"<a id=\"8\"><\/a>\n<h1 style=\"color:red;font-size:45px;font-family:Georgia;text-align:center;\">\ud83d\udc8a<strong><strong style=\"color:black;font-size:40px;font-family:Georgia;\"> <strong style=\"color:red;font-size:45px;font-family:Georgia;\">Feature <strong style=\"color:black;font-size:40px;font-family:Georgia;\">Selection <\/strong><\/strong><\/strong><\/strong><\/h1>","bd79052e":"<a id=\"7\"><\/a>\n<h1 style=\"color:red;font-size:45px;font-family:Georgia;text-align:center;\">\ud83d\udc8a<strong><strong style=\"color:black;font-size:40px;font-family:Georgia;\"> <strong style=\"color:red;font-size:45px;font-family:Georgia;\">Feature <strong style=\"color:black;font-size:40px;font-family:Georgia;\">Scaling <\/strong><\/strong><\/strong><\/strong><\/h1>","2b37c2a4":"<a id=\"9\"><\/a>\n<h1 style=\"color:red;font-size:45px;font-family:Georgia;text-align:center;\">\ud83d\udc8a<strong><strong style=\"color:black;font-size:40px;font-family:Georgia;\"> Prediction<strong style=\"color:red;font-size:45px;font-family:Georgia;\">of Heart Disease <strong style=\"color:black;font-size:40px;font-family:Georgia;\">using KNN <\/strong><\/strong><\/strong><\/strong><\/h1>","e66b20c4":"<a id=\"10\"><\/a>\n<h1 style=\"color:red;font-size:45px;font-family:Georgia;text-align:center;\">\ud83d\udc8a<strong><strong style=\"color:black;font-size:40px;font-family:Georgia;\"> Prediction<strong style=\"color:red;font-size:45px;font-family:Georgia;\">of Heart Disease <strong style=\"color:black;font-size:40px;font-family:Georgia;\">using Random Forest Classifier <\/strong><\/strong><\/strong><\/strong><\/h1>","404833ef":"### How does KNN Algorithm Work:\n#### The K-NN working can be explained on the basis of the below algorithm:\n>#### Step-1: Select the number K of the neighbors\n>#### Step-2: Calculate the Euclidean distance of K number of neighbors\n>#### Step-3: Take the K nearest neighbors as per the calculated Euclidean distance.\n>#### Step-4: Among these k neighbors, count the number of the data points in each category.\n>#### Step-5: Assign the new data points to that category for which the number of the neighbor is maximum.\n>#### Step-6: Our model is ready.\n#### Suppose we have a new data point and we need to put it in the required category. Consider the below image:","1661e69d":"<a id=\"12\"><\/a>\n<h1 style=\"color:red;font-size:45px;font-family:Georgia;text-align:center;\">\ud83d\udc8a<strong><strong style=\"color:black;font-size:40px;font-family:Georgia;\"><strong style=\"color:red;font-size:45px;font-family:Georgia;\">Feature<strong style=\"color:black;font-size:40px;font-family:Georgia;\">Importance<\/strong><\/strong><\/strong><\/strong><\/h1>","575fd607":">#### By calculating the Euclidean distance we got the nearest neighbors, as three nearest neighbors in category A and two nearest neighbors in category B. Consider the below image:","89a65b7f":"<a id=\"6\"><\/a>\n<h1 style=\"color:red;font-size:45px;font-family:Georgia;text-align:center;\">\ud83d\udc8a<strong><strong style=\"color:black;font-size:40px;font-family:Georgia;\"> <strong style=\"color:red;font-size:45px;font-family:Georgia;\">Data <strong style=\"color:black;font-size:40px;font-family:Georgia;\">Preprocessing <\/strong><\/strong><\/strong><\/strong><\/h1>","d8408fa6":">#### Firstly, we will choose the number of neighbors, so we will choose the k=5.\n>#### Next, we will calculate the Euclidean distance between the data points. The Euclidean distance is the distance between two points, which we have already studied in geometry. It can be calculated as:","c8d7bb44":">#### As we can see the 3 nearest neighbors are from category A, hence this new data point must belong to category A.","40464406":"<a id=\"11\"><\/a>\n<h1 style=\"color:red;font-size:45px;font-family:Georgia;text-align:center;\">\ud83d\udc8a<strong><strong style=\"color:black;font-size:40px;font-family:Georgia;\"> Prediction<strong style=\"color:red;font-size:45px;font-family:Georgia;\">of Heart Disease <strong style=\"color:black;font-size:40px;font-family:Georgia;\">using Logistic Regression Classifier <\/strong><\/strong><\/strong><\/strong><\/h1>","ee9ebb82":"<a id=\"3\"><\/a>\n<h1 style=\"color:red;font-size:45px;font-family:Georgia;text-align:center;\">\ud83d\udc8a<strong><strong style=\"color:black;font-size:40px;font-family:Georgia;\">Exploratory <strong style=\"color:red;font-size:45px;font-family:Georgia;\">Data <strong style=\"color:black;font-size:40px;font-family:Georgia;\">Analysis <\/strong><\/strong><\/strong><\/strong><\/h1>","b36a2beb":"<a id=\"1\"><\/a>\n<h1 style=\"color:red;font-size:45px;font-family:Georgia;text-align:center;\">\ud83d\udc8a<strong><strong style=\"color:black;font-size:40px;font-family:Georgia;\">Importing <strong style=\"color:red;font-size:45px;font-family:Georgia;\">The <strong style=\"color:black;font-size:40px;font-family:Georgia;\">Libraries <\/strong><\/strong><\/strong><\/strong><\/h1>","2288255d":"###  Why do we need KNN Algorithm\n>#### Suppose there are two categories, i.e., Category A and Category B, and we have a new data point x1, so this data point will lie in which of these categories. To solve this type of problem, we need a K-NN algorithm. With the help of K-NN, we can easily identify the category or class of a particular dataset. Consider the below diagram:","2acacebd":"### Advantages of KNN Algorithm:\n>#### It is simple to implement.\n>#### It is robust to the noisy training data\n>#### It can be more effective if the training data is large.\n### Disadvantages of KNN Algorithm:\n>#### Always needs to determine the value of K which may be complex some time.\n>#### The computation cost is high because of calculating the distance between the data points for all the training samples.","fb5900e4":"<img src=\"https:\/\/static.javatpoint.com\/tutorial\/machine-learning\/images\/k-nearest-neighbor-algorithm-for-machine-learning5.png\" width=\"500px\">","183cbe53":"<img src=\"https:\/\/static.javatpoint.com\/tutorial\/machine-learning\/images\/k-nearest-neighbor-algorithm-for-machine-learning2.png\" width=\"600px\">","7f68ade1":"<a id=\"4\"><\/a>\n<h1 style=\"color:red;font-size:45px;font-family:Georgia;text-align:center;\">\ud83d\udc8a<strong><strong style=\"color:black;font-size:40px;font-family:Georgia;\"> <strong style=\"color:red;font-size:45px;font-family:Georgia;\">Data <strong style=\"color:black;font-size:40px;font-family:Georgia;\">Visualization <\/strong><\/strong><\/strong><\/strong><\/h1>"}}