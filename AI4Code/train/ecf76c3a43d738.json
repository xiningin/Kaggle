{"cell_type":{"6e2b8177":"code","1d674372":"code","918eae36":"code","4938b4a5":"code","cbaa83fd":"code","c199b0a2":"code","bab57f39":"code","91149e42":"code","c3521c47":"code","23187317":"code","4136f852":"code","95bf5d07":"code","4200b07b":"code","9a9320cc":"code","abb6b64e":"code","64892173":"code","d8ea952a":"code","d134a2e2":"code","f80e6bcc":"code","c8f06e73":"code","af3e73c1":"code","deaa0d6c":"code","6064deb2":"code","413689c1":"code","00ef568c":"code","9f9edcb7":"markdown","538af0ba":"markdown","016b9a34":"markdown","63a5c6e0":"markdown","11a37886":"markdown","ac026bd9":"markdown","1127ab88":"markdown","b2fdeaeb":"markdown"},"source":{"6e2b8177":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nfrom sklearn import model_selection, preprocessing, metrics\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport shap\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom sklearn import preprocessing\nimport xgboost as xgb\nimport gc\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Any results you write to the current directory are saved as output.","1d674372":"train = pd.read_csv('..\/input\/standalone-train-and-test-preprocessing\/train.csv')\ntest = pd.read_csv('..\/input\/standalone-train-and-test-preprocessing\/test.csv')","918eae36":"train.shape","4938b4a5":"test.shape","cbaa83fd":"print(train.TransactionDT.min(), train.TransactionDT.max())\nprint(test.TransactionDT.min(), test.TransactionDT.max())","c199b0a2":"features = test.drop('TransactionDT', axis=1).columns","bab57f39":"train = train[features]\ntest = test[features]","91149e42":"train['target'] = 0\ntest['target'] = 1","c3521c47":"train_test = pd.concat([train, test], axis =0)\n\ntarget = train_test['target'].values","23187317":"object_columns = np.load('..\/input\/standalone-train-and-test-preprocessing\/object_columns.npy')","4136f852":"del train, test\ngc.collect()","95bf5d07":"# Label Encoding\nfor f in object_columns:\n    lbl = preprocessing.LabelEncoder()\n    lbl.fit(list(train_test[f].values) )\n    train_test[f] = lbl.transform(list(train_test[f].values))\n","4200b07b":"train, test = model_selection.train_test_split(train_test, test_size=0.33, random_state=42, shuffle=True)","9a9320cc":"del train_test\ngc.collect()","abb6b64e":"train_y = train['target'].values\ntest_y = test['target'].values\ndel train['target'], test['target']\ngc.collect()","64892173":"train = lgb.Dataset(train, label=train_y)\ntest = lgb.Dataset(test, label=test_y)\n","d8ea952a":"param = {'num_leaves': 50,\n         'min_data_in_leaf': 30, \n         'objective':'binary',\n         'max_depth': 5,\n         'learning_rate': 0.2,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 44,\n         \"metric\": 'auc',\n         \"verbosity\": -1}","d134a2e2":"num_round = 100\nclf = lgb.train(param, train, num_round, valid_sets = [train, test], verbose_eval=50, early_stopping_rounds = 50)","f80e6bcc":"feature_imp = pd.DataFrame(sorted(zip(clf.feature_importance(),features)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).head(20))\nplt.title('LightGBM Features')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')","c8f06e73":"del train, test\ngc.collect()","af3e73c1":"train = pd.read_csv('..\/input\/standalone-train-and-test-preprocessing\/train.csv')\ntest = pd.read_csv('..\/input\/standalone-train-and-test-preprocessing\/test.csv')","deaa0d6c":"fig, ax = plt.subplots(1, 2, figsize=(16,10))\ntrain_id_31 = train.id_31.value_counts().iloc[:30]\ntest_id_31 = test.id_31.value_counts().iloc[:30]\nsns.barplot(y=train_id_31.index, x=train_id_31.values, ax=ax[0])\nsns.barplot(y=test_id_31.index, x=test_id_31.values, ax=ax[1])\nplt.tight_layout()\nplt.show()","6064deb2":"fig, ax = plt.subplots(1, 2, figsize=(16,10))\ntrain_d10 = train.D10.value_counts().iloc[1:30]\ntest_d10 = test.D10.value_counts().iloc[1:30]\nsns.barplot(x=train_d10.index, y=train_d10.values, ax=ax[0])\nsns.barplot(x=test_d10.index, y=test_d10.values, ax=ax[1])\nplt.tight_layout()\nplt.show()","413689c1":"fig, ax = plt.subplots(1, 2, figsize=(16,10))\ntrain_d15 = train.D15.value_counts().iloc[1:30]\ntest_d15 = test.D15.value_counts().iloc[1:30]\nsns.barplot(x=train_d15.index, y=train_d15.values, ax=ax[0])\nsns.barplot(x=test_d15.index, y=test_d15.values, ax=ax[1])\nplt.tight_layout()\nplt.show()","00ef568c":"fig, ax = plt.subplots(1, 2, figsize=(16,10))\nsns.distplot(train.id_13.fillna(-9).values, ax=ax[0])\nsns.distplot(test.id_13.fillna(-9).values, ax=ax[1])\nplt.tight_layout()\nplt.show()","9f9edcb7":"(I know this is not efficient, but this is just an adhoc kernel...)","538af0ba":"Need to look into some of the important features: `id_31`, `D10`, `D15`, `id_13`","016b9a34":"Still, adversial AUC is so high that there can be bugs in my codes.\n\nLet's look now at the top 20 \"adversarial\" features.","63a5c6e0":"---","11a37886":"Hmm...I did not figure out whether these plots give us insight. Someone has an idea?","ac026bd9":"You can distinguish train and test by just checking 'TransactionDT', so you should remove it.","1127ab88":"OS **version** seems to give you a hint to separate train and test since test data has later datatime.","b2fdeaeb":"This kernel is forked from [Bojan Tunguz's useful kernel](https:\/\/www.kaggle.com\/tunguz\/adversarial-ieee) as always, which says that adversarial AUC is approximately 1.0. However, once you look into it carefully, you will notice that the features should not include 'TransactionDT' since it is `a timedelta from a given reference datetime (not an actual timestamp)`."}}