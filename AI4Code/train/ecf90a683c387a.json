{"cell_type":{"ea71af24":"code","c4c95e09":"code","1d37113b":"code","dab9ba6f":"code","958451af":"code","28d393ad":"code","c7988ccd":"code","1b2916c6":"code","dc62c9f2":"code","755c04f5":"code","ab3249ca":"code","229b7492":"code","72cfdb5d":"code","38069402":"code","9b694b3a":"code","1de88fe2":"code","c302b7f4":"code","e386b93a":"code","54c307cf":"code","a7f88127":"code","80ed4351":"code","91909e90":"code","fb1b107d":"code","0c6ae330":"code","962ab787":"code","3f481e44":"code","a11384b0":"code","a1ac70fd":"code","82970eeb":"code","97ff2de6":"code","41e47918":"code","b8131c99":"code","ed31af7c":"code","171aeec4":"code","27bc8639":"code","511b107d":"code","f1aa224b":"code","440939f4":"code","ea997bfe":"code","b75cc8f5":"code","57046524":"code","2e69a508":"code","ec8c35e1":"code","e428fb30":"code","e7a4ed30":"code","3e8465f4":"code","9debe4fa":"code","b6d6e160":"code","606b40e9":"code","f1bbe19b":"code","9167c212":"code","950ce3c9":"code","b8410bdf":"code","19308aa6":"markdown","375e5449":"markdown","b00c995a":"markdown","2e635e07":"markdown","cc8cfea2":"markdown","bd64f3e9":"markdown","ceaee936":"markdown","e013d68f":"markdown","df5f6eaf":"markdown"},"source":{"ea71af24":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4c95e09":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set()","1d37113b":"df = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","dab9ba6f":"df.head()","958451af":"df.info()","28d393ad":"df.describe()","c7988ccd":"dfcopy = df.copy()\ndfcopy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = dfcopy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)","1b2916c6":"# Dealing with missing data","dc62c9f2":"sns.heatmap(dfcopy.isnull(), cmap='Blues')","755c04f5":"df.hist(figsize = (20,20))\nplt.show()","ab3249ca":"dfcopy['Insulin'].fillna(dfcopy['Insulin'].median(), inplace=True)\ndfcopy['Glucose'].fillna(dfcopy['Glucose'].mean(), inplace=True)\ndfcopy['BMI'].fillna(dfcopy['BMI'].mean(), inplace=True)\ndfcopy['BloodPressure'].fillna(dfcopy['BloodPressure'].mean(), inplace=True)\ndfcopy['SkinThickness'].fillna(dfcopy['SkinThickness'].median(), inplace=True)","229b7492":"dfcopy.head()","72cfdb5d":"dfcopy.hist(figsize = (20,20))\nplt.show()","38069402":"sns.heatmap(df.corr(), cmap='Blues')","9b694b3a":"sns.heatmap(dfcopy.corr(), cmap='Blues')","1de88fe2":"col = 'Outcome'","c302b7f4":"sns.scatterplot(x='Insulin', y='SkinThickness', data=df, hue=col)","e386b93a":"sns.scatterplot(x='Age', y='Pregnancies', data=df, hue=col)","54c307cf":"sns.countplot(df['Outcome'])","a7f88127":"sns.pairplot(dfcopy, hue='Outcome')","80ed4351":"from sklearn.preprocessing import MinMaxScaler","91909e90":"scaler = MinMaxScaler()\nX =  pd.DataFrame(scaler.fit_transform(dfcopy.drop([\"Outcome\"],axis = 1),),\n        columns=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI', 'DiabetesPedigreeFunction', 'Age'])","fb1b107d":"X.head()","0c6ae330":"y = dfcopy.Outcome","962ab787":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier","3f481e44":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42, stratify=y)","a11384b0":"model = LogisticRegression()\nsolvers = ['newton-cg', 'saga', 'liblinear']\npenalty = ['l2', 'l1']\nc_values = [5, 10, 1.0, 0.1, 0.01, 0.05]\n# define grid search\ngrid = dict(solver=solvers,penalty=penalty,C=c_values)\n\ngrid_search = GridSearchCV(estimator=model, param_grid=grid, n_jobs=-1, cv=3, scoring='accuracy',error_score=0)\ngrid_result = grid_search.fit(X_train, y_train)","a1ac70fd":"print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","82970eeb":"best_model1 = LogisticRegression(C=1.0, solver='newton-cg', penalty = 'l2')\nbest_model1.fit(X_train, y_train)\ny_pred = best_model1.predict(X_test)","97ff2de6":"from sklearn.metrics import confusion_matrix,accuracy_score,roc_curve, classification_report\n\nprint(confusion_matrix(y_test, y_pred))\nprint('Accuracy of our model is: ', accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","41e47918":"lr_acc = accuracy_score(y_test, y_pred)","b8131c99":"y_proba = best_model1.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_proba)","ed31af7c":"plt.plot([0,1],[0,1],'--')\nplt.plot(fpr,tpr, label='Log-Reg')\nplt.xlabel('fpr')\nplt.ylabel('tpr')\nplt.title('Logistic Regression ROC curve')\nplt.show()","171aeec4":"#Area under ROC curve\nfrom sklearn.metrics import roc_auc_score\nroc_auc_score(y_test,y_proba)","27bc8639":"param_grid = {'n_neighbors':np.arange(1,20), 'algorithm':['auto', 'kd_tree', 'brute']}\nknn = KNeighborsClassifier()\nknn_cv= GridSearchCV(knn,param_grid,cv=3)\nknn_cv.fit(X_train, y_train)","511b107d":"print(\"Best Score:\" + str(knn_cv.best_score_))\nprint(\"Best Parameters: \" + str(knn_cv.best_params_))","f1aa224b":"best_model2 = KNeighborsClassifier(13)\nbest_model2.fit(X_train,y_train)\ny_pred = best_model2.predict(X_test)","440939f4":"print(confusion_matrix(y_test, y_pred))\nprint('Accuracy of our model is: ', accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","ea997bfe":"knn_acc = accuracy_score(y_test, y_pred)","b75cc8f5":"y_proba = best_model2.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_proba)\nprint(roc_auc_score(y_test,y_proba))\n\nplt.plot([0,1],[0,1],'--')\nplt.plot(fpr,tpr, label='KNN - 13')\nplt.xlabel('fpr')\nplt.ylabel('tpr')\nplt.title('KNN ROC curve')\nplt.show()","57046524":"from sklearn.ensemble import RandomForestClassifier\nrf1 = RandomForestClassifier()","2e69a508":"n_estimators = [200, 300, 400, 500]\nmax_depth = [4,6,5,7, 8]\nmin_samples_split = [6,8,9,7,10]\n\nhyperF = dict(n_estimators = n_estimators, max_depth = max_depth,  \n              min_samples_split = min_samples_split)\n\ngridF = GridSearchCV(rf1, hyperF, cv = 3, verbose = 1, \n                      n_jobs = -1)\nbestF = gridF.fit(X_train, y_train)","ec8c35e1":"# summarize results\nprint(\"Best: %f using %s\" % (bestF.best_score_, bestF.best_params_))","e428fb30":"rf_best = RandomForestClassifier(max_depth= 7, min_samples_split= 10, n_estimators= 400)\nrf_best.fit(X_train, y_train)\ny_pred = rf_best.predict(X_test)\n\nprint(confusion_matrix(y_test, y_pred))\nprint('Accuracy of our model is: ', accuracy_score(y_test, y_pred))","e7a4ed30":"rf_acc = accuracy_score(y_test, y_pred)","3e8465f4":"importance = rf_best.feature_importances_\nindices = np.argsort(importance)[::-1]\nfeature_names = X.columns # e.g. ['A', 'B', 'C', 'D', 'E']\n\nf, ax = plt.subplots(figsize=(11, 9))\nplt.title(\"Feature ranking\", fontsize = 20)\nplt.bar(range(X.shape[1]), importance[indices],\n    color=\"b\", \n    align=\"center\")\nplt.xticks(range(X.shape[1]), feature_names ,rotation='vertical')\nplt.xlim([-1, X.shape[1]])\nplt.ylabel(\"importance\", fontsize = 18)\nplt.xlabel(\"index of the feature\", fontsize = 18)","9debe4fa":"from sklearn.svm import SVC\n# defining parameter range \nparam_grid = {'C': [100, 50, 75], \n            'gamma': [ 0.1,0.5, 0.01, 0.001], \n            'kernel': ['linear','rbf', 'poly','sigmoid']} \n\ngrid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3, cv=3) \n\n# fitting the model for grid search \ngrid.fit(X_train, y_train) ","b6d6e160":"# print best parameter after tuning \nprint(grid.best_params_) \n\n# print how our model looks after hyper-parameter tuning \nprint(grid.best_estimator_) ","606b40e9":"svc = SVC(C=100, gamma=0.1)\nsvc.fit(X_train,y_train)","f1bbe19b":"y_pred = svc.predict(X_test)\n\nprint(confusion_matrix(y_test, y_pred))\nprint('Accuracy of our model is: ', accuracy_score(y_test, y_pred))","9167c212":"svc_acc = accuracy_score(y_test, y_pred)","950ce3c9":"m1 = 'Logistic Regression'\nm2 = 'K Nearest Neighbours'\nm3 = 'Random Forests'\nm4 = 'Support Vector Classifiers'","b8410bdf":"colors = [\"orange\", \"green\", \"magenta\", \"red\"]\nacc = [lr_acc,knn_acc,rf_acc, svc_acc]\nm = [m1,m2,m3, m4]\nplt.figure(figsize=(10,5))\nplt.yticks(np.arange(0,100,10))\nplt.title(\"barplot Represent Accuracy of different models\")\nplt.ylabel(\"Accuracy %\")\nplt.xlabel(\"Algorithms\")\nsns.barplot( y=acc,x=m, palette=colors)\nplt.show()","19308aa6":"We had already seen that the representation of positive samples were much less than the negative once. Hence we shall use stratified sampling to split the dataset.\n![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAU8AAACWCAMAAABpVfqTAAABWVBMVEX\/\/\/8AAADS0tL5+fmAgICysrIGCAf8\/Py6urrLy8t3d3fw8PD8\/\/\/29vbt7e39jwDh4eHn5+fPz8\/CwsL9kgD9jABKSkr3\/\/+kpKRiYmKRkZHd3d3GxsY2NjZAQEApKSlubm5VVVUdHR2fn5+6vsCKioqsrKz67t0WFhb8lgAvLy9MTEz99+772rhzc3M6Ojr+nCj93MNcXFz8uXD75M3\/lR\/9voYAAAjhgR3\/pUX9sGP2lwD8rFf+yZX70qb99Or24b\/7ni56SBj2jSChXRg1IAmESxFgNg5UMwy7axrTeR329+r5r27469X36c\/8fgDv3LX1tmb29eH53sz3w4H4vIn4zpv9p1f5vG7+oDn6sVb+mzf0u2r5z5T2oin1pSj507f4tH71w5f0qUL7oUnOgyYgEBDJfTezcDFPNx2oZhlySR6YWyQwFgqJVhE9IAMmGgmOTA1bMRGoeS2YAAAeg0lEQVR4nO2d\/X\/aRraHZxAwvEiIFwnxZhCwYITxS4yN1yY2ttum3Uud3STe7KbdZts4m7233d0k\/f9\/uN8zkgAnYJsUO+mW00\/wMJJGM8+cOefMjFAZW8pSPmERQlnKokTyLAeXshiplsBTi33sIfJfI+kIfS55LkqiS54LlSXPxcqS52JlyXOxsuS5WFnyXKwseS5W5uM5VC2VRNAXS4ipJwnREcIS1lBRVJxvDb3z3z1NtYQqUypOp3ItJNSbVlxlqoUrrallj0UZqmO5adn+tcya+5o5eR72DdPo3rMsfLHOOtPOAcqHaGf36zOkjrvd7s5Bdzil0Q+7Xa9DAOXhQd80+90z62o6l6R3sKNaXx88vPIkS+368mhqda+69tHB6hz1kTIHT1Ws9nXdcAzd6FK7u+aqm8\/8m8oKqzvP96Gd+h+PVXVdN0xzxzQfo5sFm6gb+uOevuXRU60j09FRrmOuWzJDdcv1juIGk8qlesf3zXXVcv74Jz\/bP+WSSqnqlqGbrgwYDZ5pDVNlmYJdJq4a5pmQZQh2Uz2dg6dQHxn946H1uOuYx7i7qbs8O3Q7VEkIQasr7NA8AM8nx52OdW4+P37y+MkThapljUaPqipCfWJseWNVHTrO\/mNVPXum9xXVHf\/qcGwMYAXIgozq4VmFlzp47uwMvEzFH\/li0moIdUs\/P9uBnB0TLRgZy6cmhur4AtFR37MdurmqygZeZ1XGMg9PZdc5gtFUrBPza9xH192mKB1F9m4HAOn7C\/0AOCyrI9Se8WdqgCXrbQ0HisdIxalPjBO\/lju6MUSjhquGueMdxsVus1Ux1EBl2Ol419L9fJ6i45XN1I7m0ZGnjoCq6on+wrX5YiiPDjt+z6gDKpNqjktVMRiOuuwyT1wzvA39FH39KfyLMlz\/81Nr5xvDuX+grr\/864m5dax2uiewBfsPVeuHE2Pr\/jq72D\/rXJw4J\/ePlP0LNFA9OsGA7oITU\/\/0UjdPzp2Rfu4YzhkabClPD49V0bl34ZjmSQ+tXN3vHjqm8ajzXd807g+ZzIDR+WaguvqpHuw\/UdWLv1DhJ09poJwdGPrudz\/sr\/o8t5wjqeMYRop6dr9vGPu4Tt15+df7hvO087J7dKIb9wdHz1H9VaYevezRZQf7O6rkqSqHJ\/AZz45u5prmsZ\/qN45xviNcT7xu9h2zLw4B6cR4YqE2J89gWwfWvuE45pHqmDuKacB9nSumDornun6CRj+DSqybev9bGExfP4cDx9g6OrPg7xENWPd0vb+\/ZZg9NNqg4h0U0z8xjAOYBBM8kHQ6Hs8t\/Z6q4gLjW8f447rKVh1UBBZe3xnx1I989y52dEd\/tmuYT13T\/tw86piOgQY4W\/LzxGKH+n26DNX3eD4yjZPnhmM+vJE7m8t+DrZ0w+jf\/25V7QwHA93YGagvdOd764l1pOtwP2e7+vfq8Fw\/wPhw9B3ROdD\/NhgMTKNjYUh\/J6zjE+c7pj43vkGGM+KJxhGBre73HQs69Ny4GFriXD9RrFXd+GZg\/dVxDjrokK2OuooeWbXu9fVDdYKn2d9aVQcXDoD\/TX+2Yw33nQmezsk+ycVQVf5uPDtTO1CLAXj2D62dTkc3UOCh4VwM4BWNITsyJM8t3eOJHjwcqmcX+p8XrZ+QzgvUFNIlm66TPzrST2Ag2XG3B2c9fG5AFw5hP9HBOgZiV4eSocrwTGRUMej1b9VV0zlDjXsjfwR52OuTKvbRHeJ8\/wyGDKop1DPdOLNIS6EnA90BT9PAtVAiaNL+BM+njOz2fVVxjHWUvaqPeUK9pXcHQ3QPKDGlD5W9Z+gamV3TgVcbGMYxvpjGqvXiHZ6rP6CXLNS\/eyNC8\/FU1eFg\/dzpO12LCcmTGoFaodFPzy+2jEmeOxM81QPj5NsTiON07ukn1NVn5gRPFPzwKSwy6AhLW3\/RfYZhKIgLHCDMa2fE8+\/utQgE9ifGO+INdO0+G+h6h5z41oR+Gt91SFaH7NiUIZr6CMp2z3DIGaFyA1TRcNAWCy3CgLvMU7VWj87v7zpGb+E8H6+uEgG1c98xOmOe5Pk7F4auw1zqs3j+pY\/oEkpimp11\/Rk50scj\/y52zjruBMEx7quddQM2Te\/3DeJpwP+ugqQgtQZP\/SX5hVXDUdRJ+0lqd2Ts0wUaxZLPJvRTP3JTgkYHhQPqD0bPOh7x7BBPilUs6Kfqjndry7ef1iPd1MlAL1w\/1UOzT9Wx1FUHofwET2b91dDP18+G92fyPNAPhUJxpaoikKc49aE+8u8n5gui1FFfGPtWp288P7o3eKg7ghFPJnkyj6f5nPTz4bv66fMckGnAhGvSHxlHfgugn4Lu+Y15iFpc0k\/iqUqeskGwGx7PP5nOwfrDwS2Md3jH\/rrquY9L+tmxnumHiASVvj\/e1Xd4wv6ckIt96jyCTyFjxQ5H8ZL1tf68I6ijDpyX1o7pDNAfT2fwpIHJzknFp\/C01BPjHPp5NJ0nXOgx7qM5UNknM3k+w5lnhs+z60jDf7F4\/RTqhaO\/WLWG647zDd3dgUt\/SjxV65lxgQj9wnCgaEfGBSKfd\/QTFbw\/sNb7+jcMxfR3LPjXkX8HtpN1TT3rGub3wye6\/p3Veeo48BdP3udpnJwNn\/ZpDE8b7ypmro\/WDxGGPJnCU6CCx9bZcxhx+PepPNm6YxxZT07GPPWth9bqI73\/aNH+XViPtxzywrrzLc0XEAX2lRemNN9HmNdjmtwn1XyKyO4Qc1\/iSUHkAPGnpX6nw7oi8Fx1Y0QT83VfP8WQ4iWDLPA5xuNzCp5MgzrkzNSJJwIunyfOM3EUTlDO39Vdk\/y7ueP6I9jIRyYK72O4jnjqL\/wWWGeII+n6dUtdNw3J09QlT1PyNFcxCaTrjT4VaZJ\/N+U1fb2\/8HheqMpTuCJjHxMOFL7+3HSG93ovSHNp9uPcv7fzQw\/zw27f6bFeD77xqPc9qtztYW6iHmNq0u89puWM1a7jPLvXG0V0YN7bh0N\/tIOrcT4qf9457B2LQY+86gAFyGLIQfWPniH4p8noix56TN6m16OZ707vkEzPca93jgmCvzKEg\/dGGqEOuwjNu6sYPzu9nuRJlVM7vS6FBV\/3BrgFqv\/s3lEXHd\/7AayPD3Tn5dFqr7foeJ4qRyuC\/rIGhWUTAY+lulPpDp307kyYyVU5fwno\/TPIJ6t+nrzH9Ptj6PvLT9Nl61v0ifUnXZ8x4x5Xf5ZQOyYrJ6eDt7G+JEVIcZPqxIoyun6cL6atikG7\/Wz1vTOQoQi\/dxRrOGM9h8a7SusvM6WrO4eIkBF3TSWgUp2vVrR3Kqe6zbmF9SWv\/An9mN3TM5TjupKvvTkC\/OGVZz7eh3nU9f1ZyMXNbjRvxUby69o\/EmcvDqet9U+cIY4PD188mWJv7kZ+XTzZtftFtAU1x\/LvwuVXxvOTlyXPxcqS52JlyXOxsuS5WFnyXKwseS5WljwXK0uei5Ulz8XKkudiZclzsbLkuVhZ8lysLHkuVmbwFIylkklB2xtMe\/eIxkQxgT\/FZCJ5eaExlfxoC4+fiEznKViyzDkPh5jQqvXLxxRkaLzBipyX6zx+6ViBX4b\/25NZ473Mm8XMJi+yOG9ePqLxHGPFOGvyFIu\/o491rtx45+q\/U2bpJw\/iT6rVZDG+FkoHY\/ieq3Ae05QgzzZFrJTJ8o10Jqix4rbMZqkqr+T57K3H0aahkF+EoozzKUs+Y39lb4jLx5VLl38iMks\/s7xQlPUv8HwmxLOlZogHU3VewJjejgheT+d5o4jxHuflQInnmeC1QI6Hr+Bpx2LBYGyj5HFJjQAH5Z0UFonFmldsBTMtdtm6ZHB+XLBSYb4m36rM0E+hbcB+rqHtNN5DPMBYaBsHakE53sET412j8Z0jExri8QxPg8wV+sk2NmK8GrNLlFZYqCpvJMdCQKaq3N7gtUvVYCPdox1wjScmj8a4HWuF48RTTF7xS+Tm1884c4Z+klspNss8AvuZA64krg\/U7QqGfdzjSSDBs8GlJJscqtK8iidkJepVRbBc3h+wrEY84d\/opq2cV1P3oQLPNrimQPF5yq8JVArjqMF8U+KfdhMYU0+ixxZGRugGDzFMOzyDZ4hH6fRKfsQT7KqFTG0Kz0Qc\/4kmT9yAJ5QTdpZviAznbRaCRc77PJOST7LINFtGFplsjPMo\/pWAusBxV+JZXOHcHd8aDQiWKLJcllWoS9dYIst58EoImp3P5+3QDJ7MDvjPuLCkwmKlK0qqV0PTgM7gmeJZ6EKUx5g73tHU9hplU0YdLfN5aiHoMMZ5PMBDjNk34FlpMFGNsWYepaHYSoS13PHe5O1gBFVs5BkrcZZGwTmeYfUKUDdwchQ8NWSIMkUcsBi8EgtpniFiARTWxoF8YYb2SdF4sNEIojjBPA0UXlJ+bUVdJRXQfoXV0+4x5qru+OdiNFh5NDHtBrP8ex39jRA0iRqshSLUcJsXkIlRyteabMQzrpV5vcFtxrZ5ATb3Wp5FLkgXiSf+hgrc40mNLRUoQmNaNJdvsTRMaSBMoHA62tAIMp6I1kLNUGxNVpEp0UIW4wg8oU5IFHmz2WxUrqqAJo1KhJM1ThC5OItjeiLiuAESlSi97QegRJGnhEYhh0aHkYr7loDF47gutKJM7bVZ\/ogFGrZdTyHdzDei1RRTtELeztRjgjJEPsQi+bj8p9Xz+SbsjsjlYzn76ngePAMtREbofbKfK+1YqOzzLEnbWqiyDAxLiLPoCmpXcXmGoY45GzwjlQJERsTpDDENrUj9lFFygNPB3FUDXpMTkAD6tMFb4QxSwTDsBzydwrZzxDNTafGVpFbjXCuHWAo6VY2zmL0Z5u7olzlaCfYlPu0Gdzt\/B88UaUiakz8CC5iRkMezKWOtepa1IxIi8SQdLZJ+4ppYQfBEGgrLhBxpGemdIm3iqbQbUkepN6c20xeNFxOJYnaNNWsazFmiiIEGSyLV1m6Cp9gEto0GOoixNXQ13J1dZcFWghU2ZQk13Gmjykrl6Te4W57tDOxCtZhuFVhzM1ni6eQGFMvlqW3yRt2GFlTtVLTCRbQNni2Pp434IQWebCWfCrTIISmIrxr1DVht8KyuJZLJJNvOFovlK9uiyWCknGRZ8ibVZpFGfiMoRjzRlblGjcy1AM8EGZo4V4JBJtC3tKrBhRxemc3pN7hbnttwyVp9Ex0v4ttQknI20iywKmwm6qrU18o20CY22hvJaioAAxvAUC6ugWdkJQ9TXk4wrbFSjriFiWa1bEcprFdW1jY3N8tCFDbLVw53GP9iPEFavELTCrterJCv2FBo8ObBE71ZaUSCPs8Upx8u8zgymMuTOkDAaszNUylIKYnpdldrpG+O0ZcZ73OYcmAcxdNRuC82GTSKyXOYP\/O8yq+PzvStXp50vJIpcjQvXyfNZyukn\/JWdtDjqfCUREg8AzTVEHJOAfs7N0+MjEoNcZ09\/bo4hUfzihd6CG++LtgoVnEPj4J4yqJ+pJ8suUrB\/NOUETZlHMfLQ\/LcqY9Gj2XEM8CbRbumFPl2oEBmxA40YHlqUTg2pGKIlzIsG2GxSjoDfxUjni3ZhbFKlHIiK9NvMHu8c8pUqgjThQgEirKweLrIFLQjEEhInvgrozUtHaDMCV1W0gEp8QWsVYh4aPogucm1IpeDSWh4mJW8GzUKVtyoFjRWbGXWgshKxdZCoQjieZbOb4cCMSbq2WQDrqm5nYfNpzKKtltGSOak7emj7RqeiDCLLNniFd7W2GYbtrwqREJOR0KsiKACoTEm0pA8MivjZifcaSgP3GAQ3qYoiCQDcXi5y4GxPxCK\/FLu5ABxT5u8YDydnb2odQXP7UA6jQgeHDFIMoi7y5jh1XkAkXsKM6IQq9RS+B5BuolwroFzMuN2pFzR3NsGfomkUZH0B1ymuc3PbVaDo9aPQcnBJN2LR1AackHrhv6cSIyyJ1ZcxHsLhzfjGZb6VYHDTZcoYmyycpbsTlqujWK8JyiGFi1brirRlDTFI++V4vVwmH8E8aZdLMsnW+8RdfU1nmGLlSv0044Xq6AnRNKm2kE\/KYKhaTStAfFIklPMUaZolxZQEpd4+uNdRgE0R7t7SXhztSLnk9SEaGLmN4r6RWChweLV9lO0qZNrtVKS\/E95W+qnIJup8VAKWULU8lN5aiEpzamLBnco0MVaLg2jNdbQKo8F2\/5Gl2BRueTqrY1MLo\/4Y0sI\/5+4JnpgV\/LcYNS3bYRcQSbtpcszyvLctZu1lTg4hqby\/FREsFiWpoxjEEkZMq1g0o4hr8RZukIpwhdHQmgsDpuvxClLk+shyFc0aVm163fHZvIU3KbaFADT5uVWDX\/bVZdnqsY3OYxngOOvjRoj9nV5TsSk476dLFSTcilTe6+KCp0zu8qXDolrNlSFEogrihYY3yUh7WoqyQp5+qKkazY1hkXCvLpWZ7UN2iqT9i1Fzr8cYrxQ49twETUers++kyuz50cZ15xnIvSS5aiIRlkJxjAeSdBCWSYRwcwhXsrQGnAgI1gyojGN8q6UgGtUvVpBAaD5\/L1V2w15UvPd7BEPLyGobpHWdS18T0K8ZTeho3WbChNpaEES01AoSgk3rWyg6XCuAQqzmFwUqUC7ESKgH1LTF5UmZLZ+skn7MTkpHH\/3pzujK66TAJdBVMI\/lcKVxHsaFiskUgkKfKfKBM+1ENNS88a3qHa6To7W4xmleXmsHinTAkmOtdC9Nu1IxQqaxzNcFDQ7KpdzyQ8c7771vZwp3j3JD84mcq6+W8BjoeTizXqRaUFeF80UaybrJZbI1QPuPWJSfytQ0GidFKmZCtUxDlKksfU4tEYokXouwUqVfDoZIt9XAIREM0GZ10opQ\/fIZSXPOPQzS2at0aT9rI2cXOzKNykrqFGcBZ4IszErwEwryzc\/TD9HE+qr5OrAdqpAP5PJZFET4UqhwQNKAzwrUVZZKUQCvFH3NuNimN0x2tmI1XIbtI1RCRbwrUSOmKfQSi1sN2M8UVqx05kyS4XtXDsPXS\/X85cc+XQJyXXTOnjK8E9EacMgG4KaKrQkQjyD5IqrdamftQjtgrBIWSugrZu5a0qfxbNeblWC1\/R2dgONmMulF137mRJ0Wb5A+x6snWYtKFk5QwxllB2rFhqFdksEKKhpbJMvZpEKK7UZ8YR+JnG1qJVYlXbt2MYGrXNEk7QWNIrhZ4uS5bFCHtYyyiPpchj2c6PYCGusFgzQRA8lQBkLxQaw82AxiI6s1KI09du0i5lry59hP2M8W9jguIsyuSTE2Nhe4s9KnsUbRX\/V6CZLFhjv8v9xIWhDKliQ02fwDBeZ0pKkyb2xYHu7Wi0k3C36dJi1AxJ1tE3TCOLJMlVeARGX5yZtfNg56Y1rN1lFbOarQTLOoaqdtJXiRmYtRo+3xcqhfI7lpfePZUmZknY2AkvUitjbUFGlkc1fW\/wMntxmtKMA7Q40gg25eNQMFuKlYAMtLhYjsQKUgXgGEixapEMUGTeC6fSVLt63n5JnbMwzQAu9iuKF0DFvUIVoTyHKJc+Ey1PI8V7ipRQr+\/q5SU3I35znaJ9y8httwTDpjMQ7JzARTr538UyZxXMzReu4CTAt12mStMbbDd7ijRYihjyniCxFPGm8h3m5wWs0ha8GaZv8CpnFE9qyjdApZWu+P6K\/cgTbNtsMSntHLU5L\/azTsv1IPxtr5FcCyRvrJ5tYARntG7NyJRje9nD6G8ju8isN8kvLTvPzjGLs5Wlze40z+QTDNsxJDAVH8M\/Gvzimo+CZhF2ptWlZL8l4lv5escws\/PgzzzhCEEQlcV6Nwx9RhVO8bHuBqe1HzTluV9oaK7ezVaAV7Uo+20qCZ4pX85vlHAuGm5lNppUrtnx+EvrNozfhOV0CkeT0A5k5Js2z4k9Be9s8KVg8GWmAZ3XFfbozjbbnyZAhw+cZI9OQpC1bkbhy2V4kStFoOh0NsFJCiDS0MpWJlxJaSVY4nYm7YyzgRZ4KS2BSITDei1GpIWk4EU2JKHKykQwIUQqkoqAYQIuFloHBoCJu3vjLlZt95RxruNN5Brapq1Lchj7SU4jgWZ7guYam5is+z1ZQ8pTLI9rNt0HGq7PXSaU0ccWV5f2StevFLHxP51l0NztaedaqCvmEjctTkTxt2kXFscs8GS07pT9kW+k6aS96kfIWZcZ43+ZrzdwKPQtTTiSz7\/EMag1Mu9\/hafNSon0LPG\/+sp5PQGbE8xocOV8Bmwz+Ble22fZovKeZXdnk4Rxz\/btvP4v0hBPP34Z+\/ppk9nyTlsy8RT9NE\/RYFC20CXzNb9KKoSLz4oKO0nNVIiu3RX5FY\/M25KrnQ\/zVjnc38\/IVNs30Z3mhwMu\/8R94fMjzNvXG1GytGYvlrl+P+O+WD+CpzIgt\/Ic1FlCrX68sf2+4WFnyXKwseS5WljwXK0uei5Ulz8XKkudiZclzsbLkuViZh2fid1Pkug3+35jMwTO+Nu2h1epvfAHkHZmD5+\/4notw7xLQj\/2E56clc\/F8\/fbBgwdvT08fnOKflLdfLHlekjl4Rvh\/tnZ3d\/\/x6p8\/t\/b+sCtl6\/ROedLqVSo1+j1XPKm4q7MK05KK\/yCxSMX9VxWoSX+\/U5HXuU+yICnY1T+E\/mCZj+fuZ7t\/2Pvf\/9vb+3H3Mym7d8xTPhy67bFocl7xtpZDnLtvJRAsuTJ6qCK5OX7WlDZjvCctY7D6H\/yDpmtkTp67\/9j75897\/HMP593zBMOw94KGJCXdn\/kmKNl2aa3xcFg+ByXYNnK9x0hzlKxLZQ3RydOXxH+5zMnzH3s\/\/h\/fG+G8a570HD9oyRcysAwl3d8VRGWSQjehcErLVokaJd0Nwhgl85KnLKJ6S\/Wbj6eL88cRzrvnOaGfqbF+xim54prKNdLE9\/RTXueO\/RDxvK13DM3F86cff\/znv\/714+8n5Mu79u8xevzJ3VYJgWHSTUZanimFs9l0n71HdqIsTanEvEE\/7XU3Y4IwwUy9nW39D4k\/L8t1v0FYqCQy0UiolCFXrUQzkWYpQg84iWgm0yxl5OPixUi0mcmU6NfLxUy0GSllNPLomWgoFI1QaDBRxC1UcA6egfo0KdzlhDPqd2KExVe8ZIxpftKWuielEmfem6F4LcVK\/nUZlvaTt\/PgxVzjfarc5Xgvw\/SR8BYreMkwL+ZGyXRxlCzER8kga\/vXVVjWT\/KPPd7B86vPIa9f0+e\/9zA9Ov333p3yHHHhIjiGOEYbCYySG2O0Nmv514W19ij7E+D5OU2Q3p7SxOg\/r+jzy7vluXINz0x6lIzN4Lky5nkbMh\/PB4iUdh98SZ+nrz7Dn5\/vdryPebLr9DOWnMpT+aR4hl9\/8cUXe3v4+ILzV\/9+82ZvyfOyzMfzzU+np6dvXp3Ccr7hSP70ZsnzsszH8z+0pvT2AX3++GqL7OeS52X5AH\/0gHhufe76o4\/DM8zVa3lO90dK+1Pi+eZLyKswRvrpq72ff0b6bnlWxv49NuJSanDu5UbSoyTiJf\/kPAuProuPi\/gE4qU3X\/381Vevwl9+hU\/++vXrn++YZ8FXsxiL1iisR7KsBVrQvxbnrc2EtobDlNsqqWuUS18zjJ5el9nBcRH2rdTwQ8b7TzTS\/9Wiz5\/uev9ojWc3uPsOgRyn19bK32A1ZVIuKCeQlMtH9L5l3qjRSif9+o2v2bwtr6vyrM1bv+zHNTNlTp7EUMbzu5+3ZBR61zyzHgw2hadcYEoBorcyN+IJ2aTr3HekSZ61KWUvQubjiZnm27dffPGvt\/gMP3j79sEdx0seT3fR0+Upb98co3V5yg2POKffm7p7H5JnVupkdYx28TIfz71X4fCrvb1Xb978m++FX7Ve3XE8Ty9Vx3h3323oQoyPk3LlMCXHu3z5iKufLs8yXZeVye1xEYuXD5hvnp7KWecrWp+\/43iJeK41xvrZHPNsjnnmWiOe9ZURz7Wgx1MW8Wnw\/Hz3M\/gj136++ij2E\/pZ8GCAZ8jjGboJz8ZIPz8Znl\/+AfLVa\/kZps\/XH0E\/r+XZnMIzSz\/O93lWPxWee3u05UEfe5SU3+7aH4GLG\/eAZ2483nMT+ultwBPPmrcJt8mrMc9OVGnot2+pfnPaz89+\/\/vPTr+kzwev3O24O9bPTLmULrtbFalqIZ4PymS82ojnN9wNocZ2vLDmbmoVqik\/ietKWffdMaVsJpCd9basXyrzx58f1X6K99Kjt\/V5v4AXU88X4z\/i8pEFy1w8907\/B\/Llz\/R5GqbPr+5YPy+993D06g\/mvThZ+K81GzObfC2PGHXB7f2Kb1776T6wuOfvHO\/d8X7xJy9z8EzzqbJ8XnFSls\/PL1aWPBcrS56LlSXPxcqS52JlyXOxsuS5WFnyXKwseS5WljwXK0uei5U0vdpZbBd\/0f9QZykjqYdoFSsTWsqCRHv37XRLWconJf8PjMORmbbpQTkAAAAASUVORK5CYII=)","375e5449":"1. Logistic Regresion","b00c995a":"Credits - https:\/\/www.kaggle.com\/shrutimechlearn\/step-by-step-diabetes-classification-knn-detailed","2e635e07":"2. KNN","cc8cfea2":"I have the used the Min Max scaler since it is more robust to outliers that the standard scaler.\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQBfejbXDJOx5SaiPbWx6ShhAwARBUcWvTd8A&usqp=CAU)","bd64f3e9":"We can see that the features are centered around different means(they are at different scales and magnitudes), so we shall need to scale them","ceaee936":"In this kernel we shall look into the **Pima Indians Diabetes Database** dataset in which we shall predict possibilty of Diabetes given the different predictors. I have used 4 different classification algorithms namely:\n\n* Logistic Regression\n* KNearest Neighbours\n* Support Vector Machines\n* Random Forests Classifier\n\nI have also used extensive Grid Search CV for hyperparameter tuning. Hope my notebook helps. \ud83e\udd17\ud83e\udd17","e013d68f":"3. Random Forests Classifier","df5f6eaf":"4. Support vector Classifiers"}}