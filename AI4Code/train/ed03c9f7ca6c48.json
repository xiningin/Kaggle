{"cell_type":{"ba55a285":"code","41e0d8cb":"code","f2da7fc5":"code","eedcbb19":"code","323e5d38":"code","758f07bf":"code","8bfdea1f":"code","59da0d26":"code","3ecae427":"code","a59add79":"code","98ffe480":"code","af701abf":"code","b0ddde10":"code","4150baa4":"code","3fa73bca":"code","6c3d1ae0":"code","4e73bd19":"code","52acf262":"code","79673fd0":"markdown","f263a1bd":"markdown","c5836f08":"markdown","6ca71557":"markdown","fe4dcc84":"markdown","e4217798":"markdown","ebc7b65b":"markdown","85b16009":"markdown","ce39e831":"markdown","7ef83a54":"markdown","a3c9cfba":"markdown"},"source":{"ba55a285":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nfrom sklearn.datasets import load_iris\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go","41e0d8cb":"iris = load_iris()\ndf = pd.DataFrame(iris.data)\ndf[4] = iris.target\ndf.head()","f2da7fc5":"# select setosa and versicolor\ny = df.iloc[0:100, 4].values\ny = np.where(y == 0, -1, 1)\n\n# extract sepal length and petal length\nX = df.iloc[0:100, [0, 2]].values\n\n# plot data\nplt.scatter(X[:50, 0], X[:50, 1],\n            color='red', marker='o', label='setosa')\nplt.scatter(X[50:100, 0], X[50:100, 1],\n            color='blue', marker='x', label='versicolor')\n\nplt.xlabel('sepal length [cm]')\nplt.ylabel('petal length [cm]')\nplt.legend(loc='upper left')\n\n# plt.savefig('images\/02_06.png', dpi=300)\nplt.show()","eedcbb19":"px.scatter(df[df[4]!=1], x=0, y=2, color=4, color_continuous_scale=[[0.0, \"rgb(165,0,38)\"],\n                [0.1111111111111111, \"rgb(215,48,39)\"],\n                [1.0, \"rgb(49,54,149)\"]])","323e5d38":"class Perceptron(object):\n    \"\"\"Perceptron classifier.\n\n    Parameters\n    ------------\n    eta : float\n      Learning rate (between 0.0 and 1.0)\n    n_iter : int\n      Passes over the training dataset.\n    random_state : int\n      Random number generator seed for random weight\n      initialization.\n\n    Attributes\n    -----------\n    w_ : 1d-array\n      Weights after fitting.\n    errors_ : list\n      Number of misclassifications (updates) in each epoch.\n\n    \"\"\"\n    def __init__(self, eta=0.01, n_iter=50, random_state=1):\n        self.eta = eta\n        self.n_iter = n_iter\n        self.random_state = random_state\n\n    def fit(self, X, y):\n        \"\"\"Fit training data.\n\n        Parameters\n        ----------\n        X : {array-like}, shape = [n_samples, n_features]\n          Training vectors, where n_samples is the number of samples and\n          n_features is the number of features.\n        y : array-like, shape = [n_samples]\n          Target values.\n\n        Returns\n        -------\n        self : object\n\n        \"\"\"\n        rgen = np.random.RandomState(self.random_state)\n        self.w_ = rgen.normal(loc=0.0, scale=0.01, size=1 + X.shape[1])\n        self.errors_ = []\n\n        for _ in range(self.n_iter):\n            errors = 0\n            for xi, target in zip(X, y):\n                update = self.eta * (target - self.predict(xi))\n                self.w_[1:] += update * xi\n                self.w_[0] += update\n                errors += int(update != 0.0)\n            self.errors_.append(errors)\n        return self\n\n    def net_input(self, X):\n        \"\"\"Calculate net input\"\"\"\n        return np.dot(X, self.w_[1:]) + self.w_[0]\n\n    def predict(self, X):\n        \"\"\"Return class label after unit step\"\"\"\n        return np.where(self.net_input(X) >= 0.0, 1, -1)","758f07bf":"ppn = Perceptron(eta=0.1, n_iter=10)\nppn.fit(X, y)","8bfdea1f":"fig = go.Figure(data=go.Scatter(x=np.array(range(1, len(ppn.errors_)+1)), y=ppn.errors_))\nfig.show()","59da0d26":"# coefficients\nppn.w_","3ecae427":"from matplotlib.colors import ListedColormap\n\ndef plot_decision_regions(X, y, classifier, resolution=0.02):\n\n    # setup marker generator and color map\n    markers = ('s', 'x', 'o', '^', 'v')\n    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')\n    cmap = ListedColormap(colors[:len(np.unique(y))])\n\n    # plot the decision surface\n    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),\n                           np.arange(x2_min, x2_max, resolution))\n    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)\n    Z = Z.reshape(xx1.shape)\n    plt.contourf(xx1, xx2, Z, alpha=0.3, cmap=cmap)\n    plt.xlim(xx1.min(), xx1.max())\n    plt.ylim(xx2.min(), xx2.max())\n\n    # plot class samples\n    for idx, cl in enumerate(np.unique(y)):\n        plt.scatter(x=X[y == cl, 0], \n                    y=X[y == cl, 1],\n                    alpha=0.8, \n                    c=colors[idx],\n                    marker=markers[idx], \n                    label=cl, \n                    edgecolor='black')\n","a59add79":"plot_decision_regions(X, y, classifier=ppn)","98ffe480":"x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\nx2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\nxx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, 0.02),\n                           np.arange(x2_min, x2_max, 0.02))\nZ = ppn.predict(np.array([xx1.ravel(), xx2.ravel()]).T)\nZ = Z.reshape(xx1.shape)\n\n\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=X[:50,0], y=X[:50,1],\n                    mode='markers',\n                    name='1'))\nfig.add_trace(go.Scatter(x=X[50:100,0], y=X[50:100,1],\n                    mode='markers',\n                    name='-1'))\n\nfig.add_trace(\n    go.Contour( x= np.arange(x1_min, x1_max, 0.02),\n                y= np.arange(x2_min, x2_max, 0.02),\n        z=Z,\n        colorscale = [[0.0, \"yellow\"],[1.0, \"lightgreen\"]],\n               opacity = 0.5\n    ))\nfig.show()\n","af701abf":"class AdalineGD(object):\n    \"\"\"ADAptive LInear NEuron classifier.\n\n    Parameters\n    ------------\n    eta : float\n      Learning rate (between 0.0 and 1.0)\n    n_iter : int\n      Passes over the training dataset.\n    random_state : int\n      Random number generator seed for random weight\n      initialization.\n\n\n    Attributes\n    -----------\n    w_ : 1d-array\n      Weights after fitting.\n    cost_ : list\n      Sum-of-squares cost function value in each epoch.\n\n    \"\"\"\n    def __init__(self, eta=0.01, n_iter=50, random_state=1):\n        self.eta = eta\n        self.n_iter = n_iter\n        self.random_state = random_state\n\n    def fit(self, X, y):\n        \"\"\" Fit training data.\n\n        Parameters\n        ----------\n        X : {array-like}, shape = [n_samples, n_features]\n          Training vectors, where n_samples is the number of samples and\n          n_features is the number of features.\n        y : array-like, shape = [n_samples]\n          Target values.\n\n        Returns\n        -------\n        self : object\n\n        \"\"\"\n        rgen = np.random.RandomState(self.random_state)\n        self.w_ = rgen.normal(loc=0.0, scale=0.01, size=1 + X.shape[1])\n        self.cost_ = []\n\n        for i in range(self.n_iter):\n            net_input = self.net_input(X)\n            # Please note that the \"activation\" method has no effect\n            # in the code since it is simply an identity function. We\n            # could write `output = self.net_input(X)` directly instead.\n            # The purpose of the activation is more conceptual, i.e.,  \n            # in the case of logistic regression (as we will see later), \n            # we could change it to\n            # a sigmoid function to implement a logistic regression classifier.\n            output = self.activation(net_input)\n            errors = (y - output)\n            self.w_[1:] += self.eta * X.T.dot(errors)\n            self.w_[0] += self.eta * errors.sum()\n            cost = (errors**2).sum() \/ 2.0\n            self.cost_.append(cost)\n        return self\n\n    def net_input(self, X):\n        \"\"\"Calculate net input\"\"\"\n        return np.dot(X, self.w_[1:]) + self.w_[0]\n\n    def activation(self, X):\n        \"\"\"Compute linear activation\"\"\"\n        return X\n\n    def predict(self, X):\n        \"\"\"Return class label after unit step\"\"\"\n        return np.where(self.activation(self.net_input(X)) >= 0.0, 1, -1)","b0ddde10":"fig, ax =plt.subplots(nrows = 1, ncols=2,   figsize = (10,4))\nada1 = AdalineGD(n_iter=10, eta=0.01).fit(X,y)\nax[0].plot(range(1,len(ada1.cost_)+1), np.log10(ada1.cost_), marker = 'o')\nax[0].set_xlabel('Epochs')\nax[0].set_ylabel('log(Sum-squared-error)')\n\nada2 = AdalineGD(n_iter=10, eta=0.0001).fit(X,y)\nax[1].plot(range(1,len(ada2.cost_)+1), np.log10(ada2.cost_), marker = 'o')\nax[1].set_xlabel('Epochs')\nax[1].set_ylabel('log(Sum-squared-error)')","4150baa4":"import ipywidgets as widgets\nfrom IPython.display import clear_output\nint_range = widgets.FloatSlider(\n    value = 0.001,\n    min=0.000001,\n    max=0.001,\n    step=0.00001,\n    description='Test:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='.6f',\n)\noutput2 = widgets.Output()\n\n\n\ndef on_value_change(change):\n    with output2:\n        #print(change['new'])\n        plt.clf()\n        fig=plt.figure(figsize = (4,4))\n        ada1 = AdalineGD(n_iter=10, eta=change['new']).fit(X,y)\n        plt.plot(range(1,len(ada1.cost_)+1), np.log10(ada1.cost_), marker = 'o')\n        plt.xlabel('Epochs')\n        plt.ylabel('log(Sum-squared-error)')\n        plt.show()\n        clear_output(wait = True)\n        \n    \ndisplay(int_range, output2)\n\nint_range.observe(on_value_change, names='value')","3fa73bca":"X_std = np.copy(X)\nX_std[:,0] = (X[:,0]-X[:,0].mean())\/X[:,0].std()\nX_std[:,1] = (X[:,1]-X[:,1].mean())\/X[:,1].std()","6c3d1ae0":"ada = AdalineGD(n_iter = 15, eta = 0.01)\nada.fit(X_std,y)\n\nplot_decision_regions(X_std, y, classifier=ada)\nplt.tight_layout()\nplt.show()\n\nplt.plot(range(1,len(ada.cost_)+1),ada.cost_, marker = 'o')\nplt.tight_layout()\nplt.show()","4e73bd19":"class AdalineSGD(object):\n    \"\"\"ADAptive LInear NEuron classifier.\n\n    Parameters\n    ------------\n    eta : float\n      Learning rate (between 0.0 and 1.0)\n    n_iter : int\n      Passes over the training dataset.\n    shuffle : bool (default: True)\n      Shuffles training data every epoch if True to prevent cycles.\n    random_state : int\n      Random number generator seed for random weight\n      initialization.\n\n\n    Attributes\n    -----------\n    w_ : 1d-array\n      Weights after fitting.\n    cost_ : list\n      Sum-of-squares cost function value averaged over all\n      training samples in each epoch.\n\n        \n    \"\"\"\n    def __init__(self, eta=0.01, n_iter=10, shuffle=True, random_state=None):\n        self.eta = eta\n        self.n_iter = n_iter\n        self.w_initialized = False\n        self.shuffle = shuffle\n        self.random_state = random_state\n        \n    def fit(self, X, y):\n        \"\"\" Fit training data.\n\n        Parameters\n        ----------\n        X : {array-like}, shape = [n_samples, n_features]\n          Training vectors, where n_samples is the number of samples and\n          n_features is the number of features.\n        y : array-like, shape = [n_samples]\n          Target values.\n\n        Returns\n        -------\n        self : object\n\n        \"\"\"\n        self._initialize_weights(X.shape[1])\n        self.cost_ = []\n        for i in range(self.n_iter):\n            if self.shuffle:\n                X, y = self._shuffle(X, y)\n            cost = []\n            for xi, target in zip(X, y):\n                cost.append(self._update_weights(xi, target))\n            avg_cost = sum(cost) \/ len(y)\n            self.cost_.append(avg_cost)\n        return self\n\n    def partial_fit(self, X, y):\n        \"\"\"Fit training data without reinitializing the weights\"\"\"\n        if not self.w_initialized:\n            self._initialize_weights(X.shape[1])\n        if y.ravel().shape[0] > 1:\n            for xi, target in zip(X, y):\n                self._update_weights(xi, target)\n        else:\n            self._update_weights(X, y)\n        return self\n\n    def _shuffle(self, X, y):\n        \"\"\"Shuffle training data\"\"\"\n        r = self.rgen.permutation(len(y))\n        return X[r], y[r]\n    \n    def _initialize_weights(self, m):\n        \"\"\"Initialize weights to small random numbers\"\"\"\n        self.rgen = np.random.RandomState(self.random_state)\n        self.w_ = self.rgen.normal(loc=0.0, scale=0.01, size=1 + m)\n        self.w_initialized = True\n        \n    def _update_weights(self, xi, target):\n        \"\"\"Apply Adaline learning rule to update the weights\"\"\"\n        output = self.activation(self.net_input(xi))\n        error = (target - output)\n        self.w_[1:] += self.eta * xi.dot(error)\n        self.w_[0] += self.eta * error\n        cost = 0.5 * error**2\n        return cost\n    \n    def net_input(self, X):\n        \"\"\"Calculate net input\"\"\"\n        return np.dot(X, self.w_[1:]) + self.w_[0]\n\n    def activation(self, X):\n        \"\"\"Compute linear activation\"\"\"\n        return X\n\n    def predict(self, X):\n        \"\"\"Return class label after unit step\"\"\"\n        return np.where(self.activation(self.net_input(X)) >= 0.0, 1, -1)","52acf262":"ada = AdalineSGD(n_iter=15, eta=0.01, random_state=1)\nada.fit(X_std, y)\n\nplot_decision_regions(X_std, y, classifier=ada)\nplt.title('Adaline - Stochastic Gradient Descent')\nplt.xlabel('sepal length [standardized]')\nplt.ylabel('petal length [standardized]')\nplt.legend(loc='upper left')\n\nplt.tight_layout()\n# plt.savefig('images\/02_15_1.png', dpi=300)\nplt.show()\n\nplt.plot(range(1, len(ada.cost_) + 1), ada.cost_, marker='o')\nplt.xlabel('Epochs')\nplt.ylabel('Average Cost')\n\nplt.tight_layout()\n# plt.savefig('images\/02_15_2.png', dpi=300)\nplt.show()","79673fd0":"# **Defining the perceptron model**","f263a1bd":"## **Adaline convergence depends on the learning rate**","c5836f08":"## Adaptive Linear Neurons and Convergence of learning\n### Minimizing Cost Function with gradient descent","6ca71557":"![image.png](attachment:image.png)","fe4dcc84":"### A function for plotting decision regions","e4217798":"**Number of Misclassifications per iteration**","ebc7b65b":"### Standardizing the features","85b16009":"**Setosa and Versicolor values**","ce39e831":"**Importing the iris dataset**","7ef83a54":"## **Large Scale machine learning and Stochastic Gradient Descent**","a3c9cfba":"# Training the perceptron model"}}