{"cell_type":{"deb8fdb2":"code","024d7c71":"code","126dc267":"code","a79c9237":"code","f60fda3c":"code","c695c25a":"code","6354dda3":"code","ebc5beac":"code","f24e9a1e":"code","be181c2d":"code","b3168214":"code","e290cb92":"code","b812c225":"code","bd65264d":"code","a41651cd":"code","4a1712dd":"code","03c7cb83":"code","c52c739c":"code","82537d56":"code","1cd23b4d":"code","99e7cba9":"code","7fb51c3c":"code","2abf0b2c":"code","d4cbbbb8":"code","f6403ee5":"code","aebff8f7":"code","b69751a6":"markdown","b1bd199b":"markdown","24ef17f1":"markdown","6284c997":"markdown","0e1d71f2":"markdown"},"source":{"deb8fdb2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\n\n%matplotlib inline","024d7c71":"train = pd.read_csv('..\/input\/machinehack-buyers-time-prediction-challenge\/ParticipantData_BTPC\/Train.csv')\ntrain['date'] = pd.to_datetime(train['date'])\ntest = pd.read_csv('..\/input\/machinehack-buyers-time-prediction-challenge\/ParticipantData_BTPC\/Test.csv')\ntest['date'] = pd.to_datetime(test['date'])\nsample_sub = pd.read_csv('..\/input\/machinehack-buyers-time-prediction-challenge\/ParticipantData_BTPC\/Sample Submission.csv')","126dc267":"train.info()","a79c9237":"train.head()","f60fda3c":"test.info()","c695c25a":"# test.head()","6354dda3":"train['month'] = train.date.dt.month\ntest['month'] =  test.date.dt.month\ntrain['day'] = train.date.dt.day\ntest['day'] = test.date.dt.day\ntrain['year'] = train.date.dt.year\ntest['year'] = test.date.dt.year\n# def week_day(date):\n    # return date.weekday()\ntrain['week_day'] = train.date.dt.weekday\ntest['week_day'] = test.date.dt.weekday\n\ntrain['weekend'] = train['week_day'].apply(lambda x: 0 if x not in [5, 6] else 1)\ntest['weekend'] = test['week_day'].apply(lambda x: 0 if x not in [5, 6] else 1)","ebc5beac":"train = pd.concat([train, pd.get_dummies(train['week_day'], prefix='week', dtype='int64')], axis=1)\ntest = pd.concat([test, pd.get_dummies(test['week_day'], prefix='week',  dtype='int64')], axis=1)","f24e9a1e":"train.info()","be181c2d":"train['device_details'].value_counts()","b3168214":"phone = ['iPhone - iOS', 'iPhone - Web', 'Android Phone - Android', 'iPad - Web', 'iPhone - MobileWeb', 'Android Tablet - Web', 'Unknown - MobileWeb', 'Android Phone - Web', 'iPad - iOS', 'Android Phone - MobileWeb', 'Android Tablet - Android', 'Android Tablet - MobileWeb']\ndesktop = ['Desktop - Chrome', 'Desktop - Safari', 'Desktop - IE', 'Desktop - Firefox']\n# label = {'phone': 0, 'desktop': 1}\n\ndef clean_details(data):\n    for idx, row in data.iterrows():\n        if row['device_details'] == 'Other - Other':\n            if type(row['client_agent']) is str and 'Android' in row['client_agent']:\n                data.loc[idx, 'device_details'] = 'phone'\n            else:\n                data.loc[idx, 'device_details'] = 'desktop'\n        else:\n            if row['device_details'] in phone:\n                data.loc[idx, 'device_details'] = 'phone'\n            else:\n                data.loc[idx, 'device_details'] = 'desktop'\n    data = pd.concat([data, pd.get_dummies(data['device_details'], prefix='device', dtype='int64')], axis=1)\n    data.drop(columns=['device_details'], inplace=True)\n    return data","e290cb92":"train = clean_details(train)\ntest = clean_details(test)","b812c225":"# train['device_details'].value_counts(dropna=False)","bd65264d":"def make_column(data):\n    for idx, row in data.iterrows():\n        if row['added_in_cart'] == 1 or row['checked_out'] == 1:\n            data.loc[idx, 'buy'] = 1\n        else:\n            data.loc[idx, 'buy'] = 0\n    return data\ntrain = make_column(train)\ntest = make_column(test)","a41651cd":"# Time spent corresponding to date\nplt.title('Time spent corresponding to date')\nplt.scatter(train.index, train['time_spent'])\nplt.show()","4a1712dd":"# Time spent corresponding to the week days\nweeks = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\nweek_day =  train['week_day'].apply(lambda x: weeks[x])\nplt.title('Time spent corresponding to week days')\nplt.scatter(train['time_spent'], week_day)\nplt.show()","03c7cb83":"# Removing outlier\noutlier = []\nfor idx, row in train.iterrows():\n    if row['time_spent'] > 14000:\n        outlier.append(idx)\ntrain = train.drop(index=outlier)","c52c739c":"plt.figure(figsize=(15, 8))\nsns.heatmap(train.corr(), annot=True, fmt='.2f', linewidths=0.5)\nplt.show()","82537d56":"features = ['purchased', 'added_in_cart', 'checked_out']\nX = train[features]\ny = train['time_spent']","1cd23b4d":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_log_error\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, shuffle=True)","99e7cba9":"from sklearn.linear_model import LinearRegression, LogisticRegression, Lasso, Ridge\nimport xgboost as xg","7fb51c3c":"xgb_r = xg.XGBRegressor(objective ='reg:squarederror', n_estimators = 1, seed = 123).fit(X_train, y_train)\ny_pred = xgb_r.predict(X_test)\nfor idx, val in pd.Series(y_pred).iteritems():\n    if val < 0:\n        y_pred[idx] = 0","2abf0b2c":"print(np.round(np.sqrt(mean_squared_log_error(y_test, y_pred)), 5))","d4cbbbb8":"test.head()","f6403ee5":"pred = xgb_r.predict(test[features])\nfor idx, val in pd.Series(pred).iteritems():\n    if val < 0:\n        pred[idx] = 0","aebff8f7":"sample_sub['time_spent'] = pd.Series(pred)\n# sample_sub.to_csv('sample_sub.csv', index=False)","b69751a6":"### Feature Engineering","b1bd199b":"### Model","24ef17f1":"Skills:\n- Regression Modeling\n- Advance Feature engineering, with Datestamp and Text datatypes\n- Optimizing RMSLE score as a metric to generalize well on unseen data","6284c997":"Columns details:-\n- session_id - Unique identifier for every row\n- session_number - Session type identifier\n- client_agent - Client-side software details\n- device_details -  Client-side device details\n- date - Datestamp of the session\n- purchased - Binary value for any purchase done\n- added_in_cart - Binary value for cart activity\n- checked_out -  Binary value for checking out successfully\n- time_spent - Total time spent in seconds (Target Column)\n","0e1d71f2":"Buyers spend a significant amount of time surfing an e-commerce store, since the pandemic the e-commerce has seen a boom in the number of users across the domains. In the meantime, the store owners are also planning to attract customers using various algorithms to leverage customer behavior patterns\n\nTracking customer activity is also a great way of understanding customer behavior and figuring out what can actually be done to serve them better. Machine learning and AI has already played a significant role in designing various recommendation engines to lure customers by predicting their buying patterns\n\nIn this competition provided the visitor's session data, we are challenging the Machinehack community to come up with a regression algorithm to predict the time a buyer will spend on the platform."}}