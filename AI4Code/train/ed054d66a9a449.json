{"cell_type":{"6d59fcf3":"code","402e6f97":"code","c943e08f":"code","372de882":"code","e1e49cd4":"code","590abeb9":"code","15e08adc":"code","3148e5e7":"code","e18f089d":"code","28537afe":"code","66f0b21b":"code","4a1c471f":"code","85523984":"code","bcb27140":"code","d1cf3b82":"code","cbb12246":"code","a9bcc893":"code","21078017":"code","40fde541":"code","f72b39ca":"code","07bca167":"code","496e34c8":"code","1407f5ca":"code","defbe364":"code","2480991e":"code","3cf4ebe0":"code","aaf7596e":"code","d9afe4a8":"code","774e9463":"code","e41bf30a":"code","2e9268ec":"code","2e08aa35":"code","ad2ba795":"code","13698afa":"code","8314e305":"code","062fcffc":"code","da3b5aa5":"code","b875fae5":"code","67695552":"code","374a426a":"code","7a72b426":"code","aeaab1f5":"code","dc69fa0c":"code","87ca6039":"code","6ad6e250":"code","8abba968":"code","3e113d95":"code","4c622b75":"code","94dc899e":"code","20e6c040":"code","0199e06b":"code","853b4b3a":"code","a4734175":"code","e0065ac5":"code","6ef6002a":"code","694ecfb4":"code","f06ab3a2":"code","d1a94063":"code","f8ae0425":"code","eb082d2d":"code","e27f0c99":"code","f6cd3195":"code","c1ff4363":"code","1bd0164f":"code","a5799a20":"code","409ff144":"code","a3946657":"code","45cff4bc":"code","f3163ad2":"code","54831611":"code","41ccf643":"code","922f07d6":"code","ff3f6155":"code","1a265c84":"code","b48eb316":"code","1179a72a":"code","54e61b54":"code","f7cc5051":"code","d6c7c54c":"code","7c5d8bce":"code","958ade90":"code","7b88d50b":"code","8c079565":"code","fa62edb2":"code","36339448":"code","9002ecff":"code","490fd7ca":"markdown","234d599e":"markdown","bc660295":"markdown"},"source":{"6d59fcf3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","402e6f97":"n_array = np.array([[1,2,3], [231,134,34], [1243,34,4321]])\nn_array.ndim","c943e08f":"print (n_array.shape)\nprint (n_array.size)\nn_array.dtype.name","372de882":"a = np.array([1,23,3,34,2])\nb = np.array([0,23,1,22,3])\nc = a - b\nprint (c)\nc","e1e49cd4":"print (b < 2)","590abeb9":"a*b","15e08adc":"np.dot(a,b)","3148e5e7":"a = np.array([[1,3,4], [2,4,4], [3,5,3]])\nb = np.array([[2,3,5], [1,2,4], [1,2,3]])\na*b","e18f089d":"np.dot(a,b)","28537afe":"a.shape","66f0b21b":"a.ndim","4a1c471f":"print (a)\na[2,1]","85523984":"c = a.ravel()","bcb27140":"c.shape","d1cf3b82":"n = np.array([[1,2,3], [231,134,34], [1243,34,4321], [2,3,1]])","cbb12246":"n.ravel()","a9bcc893":"n.shape = 6,2","21078017":"c.shape = 3,3","40fde541":"c","f72b39ca":"c.transpose()\n","07bca167":"d = {'a':'er','b':2,'c':3}\npd.Series(d)","496e34c8":"d = {'c1': pd.Series(['A','B','C']), 'c2': pd.Series([2,3,4])}\ndf = pd.DataFrame(d)\ndf","1407f5ca":"d = {'c1': ['A','B','C'], 'c2': [1,2,3.]}\ndf = pd.DataFrame(d)\nprint (df)","defbe364":"panel = {'Item1': pd.DataFrame(np.random.randn(2,3)), 'Item2': pd.DataFrame(np.random.randn(3,2))}\ndf = pd.Panel(panel)\ndf.to_frame()","2480991e":"np.random.randn(2,3)\n","3cf4ebe0":"np.random.randn(3,2)","aaf7596e":"d = pd.read_csv('..\/input\/Student_Weight_Status_Category_Reporting_Results__Beginning_2010.csv')\n","d9afe4a8":"d.head()","774e9463":"d[0:5]['Percent Overweight']","e41bf30a":"from scipy.stats import binom\nimport matplotlib.pyplot as plt","2e9268ec":"fig, ax = plt.subplots(1,1)\nx = range(10)\nn, p = 10, .5\nrv = binom(n,p)\nax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-',lw=2, label='Probability')\nax.legend(loc='best', frameon=False)\nplt.show()","2e08aa35":"from scipy.stats import poisson\nrv = poisson(20)\nrv.pmf(23)","ad2ba795":"from scipy.stats import bernoulli","13698afa":"bernoulli.rvs(.7,size=100)","8314e305":"\nclassscore = np.random.normal(50,10,60).round()\nclassscore","062fcffc":"plt.hist(classscore,1000, normed=True)\nplt.show()","da3b5aa5":"from scipy import stats\nstats.zscore(classscore)","b875fae5":"\ndf  = pd.read_csv(\"..\/input\/titanic-training-dataset\/titanic-training-data.csv\")","67695552":"import pylab as plt","374a426a":"df['Pclass'].isnull().value_counts()","7a72b426":"print (df.columns)\ndf['Survived'].isnull().value_counts()","aeaab1f5":"# Passangers survived in each class (out of 1,2,3)\nsurvivors = df.groupby('Pclass')['Survived'].agg(sum)","dc69fa0c":"survivors","87ca6039":"# Total passangers in each class\ntotal_passengers = df.groupby('Pclass')['PassengerId'].count()\ntotal_passengers","6ad6e250":"survivor_percentage = survivors\/total_passengers\nsurvivor_percentage","8abba968":"# Plotting the total number of survivors\nfig = plt.figure()\nax = fig.add_subplot(111)\nrect = ax.bar(survivors.index.values.tolist(), survivors, color='blue', width=.5)\nax.set_ylabel('No. of survivors')\nax.set_title('Total number of survivors based on Pclass')\nplt.show()","3e113d95":"# Plotting the % of survivors in each class\nfig = plt.figure()\nax = fig.add_subplot(111)\nrect = ax.bar(survivor_percentage.index.values.tolist(), survivor_percentage, width=.5, color='Red')\nax.set_ylabel('% of survivors')\nax.set_title('% of Survivors based on Pclass')\nplt.show()","4c622b75":"# printing all the columns\ndf.columns","94dc899e":"# Checking for the NUll values\ndf['Sex'].isnull().count()","20e6c040":"# Male passangers survived in each class\nmale_sur = df[df['Sex'] == 'male'].groupby('Pclass')['Survived'].agg(sum)\n\n# Total Male passengers in each class\nmale_total = df[df['Sex'] == 'male'].groupby('Pclass')['PassengerId'].count()\nmale_total","0199e06b":"male_perc_sur = male_sur\/male_total","853b4b3a":"male_perc_sur","a4734175":"# Female Passengers survived in each class\nfemale_survivors = df[df['Sex'] == 'female'].groupby('Pclass')['Survived'].agg(sum)\n#Total Female Passengers in each class\nfemale_total_passengers = df[df['Sex'] == 'female'].groupby('Pclass')['PassengerId'].count()\nfemale_survivor_percentage = female_survivors \/female_total_passengers","e0065ac5":"female_survivor_percentage","6ef6002a":"# Plotting\nfig = plt.figure()\nax = fig.add_subplot(111)\nindex = np.arange(male_sur.count())\nbar_width = .35\nrect1 = ax.bar(index +  bar_width, male_sur, bar_width, label='Men')\nrect2 = ax.bar(index , female_survivors, bar_width, color='y', label='Women')\nax.set_ylabel('Surivor Numbers')\nax.set_title('Male and Female Survivors based on Pclass')\nplt.show()","694ecfb4":"df.columns","f06ab3a2":"# Checking the null values\ndf['SibSp'].isnull().value_counts()","d1a94063":"df['Parch'].value_counts()","f8ae0425":"df['Parch'].isnull().value_counts()","eb082d2d":"# Total number of survivors in each class\nnon_survivors = df[(df['SibSp'] > 0) | (df['Parch'] > 0) & (df['Survived'] == 0)].groupby('Pclass')['Survived'].agg('count')","e27f0c99":"non_survivors","f6cd3195":"non_survivors_percentage = non_survivors \/ total_passengers\nnon_survivors_percentage","c1ff4363":"# Total number of non survivors with family based on class\nfig = plt.figure()\nax = fig.add_subplot(111)\nrect = ax.bar(non_survivors_percentage.index.values.tolist(), non_survivors_percentage, width=.5, color='r')\nax.set_title('Non-survivors % with family based on class')\nax.set_ylabel('No. of non survivors')\nplt.show()\n","1bd0164f":"# Getting the columns and checking the null values of Age\ndf.columns","a5799a20":"df['Age'].isnull().value_counts()","409ff144":"# Define the age binning interval\nage_bin = [0,16,25,40,60,100]\n# creating the bins\ndf['Age_bin'] = pd.cut(df.Age, bins=age_bin)\ndf.columns","a3946657":"#Removing null rows\nd_temp = df[np.isfinite(df['Age'])] # Removing NA instances\n# Number of survivors based on Age bin\nsurvivors = d_temp.groupby('Age_bin')['Survived'].agg(sum)\n\n#Total passengers in each bin\ntotal_passengers = d_temp.groupby('Age_bin')['Survived'].agg('count')\ntotal_passengers","45cff4bc":"# Plotting the Pi chart of total passengers in each bin\nplt.pie(total_passengers, labels=total_passengers.index.values.tolist(),autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title('Total passengers in each Age groups')\nplt.show()","f3163ad2":"# Plotting the Pi chart of total passengers in each bin\nplt.pie(total_passengers, labels=total_passengers.index.values.tolist(), shadow=True, startangle=90)\nplt.title('Total passengers in each Age groups')\nplt.show()","54831611":"#Plotting the pie chart of percentage passengers in each bin\nplt.pie(survivors, labels=survivors.index.values.tolist(),autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title('Survivors in different age groups')\nplt.show()","41ccf643":"import matplotlib.pyplot as plt","922f07d6":"plt.plot([1,2,3,4], [1,4,9,16])\nplt.show()","ff3f6155":"import pylab as plt","1a265c84":"plt.plot([1,2,3,4], [1,4,9,16])\nplt.show()","b48eb316":"import matplotlib.pyplot as plt","1179a72a":"line, = plt.plot([1,2,3,4], [1,4,9,16], linewidth=2.5)\nline.set_linestyle('--')\nplt.setp(line, color='r', linewidth=1)\nplt.show()","54e61b54":"# Creating multiple plots\np1 = np.arange(0.0, 30.0, 0.1)\nplt.subplot(211)\nplt.plot(p1, np.sin(p1)\/p1, 'b--')\nplt.subplot(212)\nplt.plot(p1, np.cos(p1), 'r--')\nplt.show()","f7cc5051":"# Playing with text\nr = np.random.random_sample((5,))\nprint (np.arange(len(r)))\nplt.bar(np.arange(len(r)), r)\nplt.xlabel('Indices')\nplt.ylabel('Values')\nplt.text( 1, .7, r'$\\mu=' + str(np.round(np.mean(r),2)) + '$')\nplt.show()","d6c7c54c":"ax = plt.subplot(111)\nt = np.arange(0.0, 5.0, .01)\ns = np.cos(2*np.pi*t)\nline, = plt.plot(t,s,lw=2)\nplt.annotate('local max', xy=(2,.5), xytext=(3,.5), arrowprops=dict(facecolor='yellow', shrink=.5), )\n\nplt.show()","7c5d8bce":"# Styling your plots\nplt.style.use('ggplot')\nplt.plot([1,2,3,4], [1,4,9,16])\nplt.show()","958ade90":"plt.style.use('fivethirtyeight')\nplt.plot([1,2,3,4], [1,4,9,16])\nplt.show()","7b88d50b":"with plt.style.context(('dark_background')):\n    plt.plot([1,2,3,4], [1,4,9,16])\nplt.show()\n","8c079565":"# Creating Box plots\n# Creating some data\nnp.random.seed(10)\nbox1 = np.random.normal(100,10,200)\nbox2 = np.random.normal(80,30,200)\nbox3 = np.random.normal(90,20,200)\n\nbox_list = [box1, box2, box3]\n# Creating the box plot\nb = plt.boxplot(box_list)","fa62edb2":"b = plt.boxplot(box_list, patch_artist='True')\n","36339448":"## change outline color, fill color and linewidth of the boxes\nfor box in b['boxes']:\n    # Change outline color\n    box.set(color='#7570b3', linewidth=2)\n    # Change filled color\n    box.set(facecolor = '#1b9e77')","9002ecff":"import nltk","490fd7ca":"**What is the distribution of survivors based on gender among the various classes?**","234d599e":"**What is the distribution of nonsurvivors among the various classes who have family aboard the ship?**","bc660295":"**What was the survival percentage among different age groups?**"}}