{"cell_type":{"3a1acd4f":"code","c2f0dc62":"code","35ca0f5d":"markdown","9eb41b9b":"markdown"},"source":{"3a1acd4f":"!pip install audiosegment","c2f0dc62":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport audiosegment\nfrom ipywidgets import interact, interactive, fixed, interact_manual,widgets\nimport matplotlib.pyplot as plt\nimport matplotlib._color_data as mcd\n\nrootFolder='\/kaggle\/input\/sound-event-detection-audioset-strong\/' \n\nclass_names=pd.read_csv(f'{rootFolder}\/mid_to_display_name.tsv',names=['mid','label'],delimiter='\\t').set_index('mid').to_dict()['label']\n\nsiz=1\n@interact\ndef result_selector(mode=['train','eval']):\n    gt=pd.read_csv(f'{rootFolder}\/audioset_{mode}_strong.tsv',delimiter='\\t')    \n    gt['label_full']=gt['label'].map(class_names)\n\n    @interact\n    def result_selector(audioFile=os.listdir(f'{rootFolder}\/{mode}_m4a\/')):\n        filename=audioFile.split('.')[0]\n\n        audio = audiosegment.from_file(f'{rootFolder}\/{mode}_m4a\/{audioFile}')\n        display(audio)\n        print(f'file={filename}  duration: {audio.duration_seconds:0.2f}s Channels:{audio.channels}, sample_rate: {audio.frame_rate},   {audio.sample_width*8} B\/SMPL')\n        gtf=gt.loc[gt['segment_id']==filename][['label_full','start_time_seconds','end_time_seconds']]\n#         print(f'Ground truth for {filename}')\n#         display(gtf)\n        \n        audiodata=audio.to_numpy_array()\/ 32768.0 \n\n        plt.figure(figsize=(10, 6))\n        times = np.linspace(0, len(audiodata) \/ audio.frame_rate, num=len(audiodata))\n        plt.subplot(3, 1, 1)\n        plt.plot(times,audiodata)\n        plt.xlim([0, audio.duration_seconds])\n        ax=plt.subplot(3, 1, 2)\n        classes=gtf['label_full'].unique()\n        index_classes={k:v for k,v in enumerate(classes)}\n        classes_index={v:k for k,v in enumerate(classes)}\n        for k,row in gtf.iterrows():\n            start=row['start_time_seconds']\n            end=row['end_time_seconds']\n            indx=classes_index[row['label_full']]\n            ax.add_patch(plt.Rectangle((start,indx-siz\/2), end-start,siz,color=f'C{indx}'))\n        yticks = range(0, len(classes), 1)\n        plt.yticks(yticks, [index_classes[x] for x in yticks])\n        _ = plt.ylim(-0.5 + np.array([len(classes), 0]))\n        plt.xlim([0, audio.duration_seconds])","35ca0f5d":"# Evaluate a file and its ground truth","9eb41b9b":"# install pre-requirments"}}