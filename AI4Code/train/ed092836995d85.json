{"cell_type":{"7a86be7d":"code","50eba87d":"code","49f971ca":"code","be594d38":"code","4d03eb04":"code","0133b939":"code","f107b69a":"code","319043c0":"code","53d5695a":"code","b332b3be":"code","73067a5f":"code","6f354916":"code","7c3a16c3":"code","20d82ccf":"code","0b8817d1":"code","127490d8":"code","6c75a030":"code","14359e89":"code","9b20e350":"code","1dd3a3c3":"code","96002a1a":"code","efbb2e59":"code","085ea1e4":"code","3d2be6e4":"code","1d389339":"code","16220e92":"code","61871d88":"code","fea1635f":"code","f4b2d89c":"code","d98d84b9":"code","6dfd1812":"code","a81d9593":"code","41d6db35":"code","55038005":"code","0acf9914":"code","60f7fe62":"code","1df2b512":"code","234b908c":"code","f8c964fd":"code","c420403b":"code","134edd70":"code","1b0a6318":"code","c74524b3":"code","d00debe4":"code","5e83f269":"code","0abd74f9":"code","aab0bff3":"code","894f0b47":"code","2ce4970b":"code","759e0a8a":"code","9b7cf2bb":"code","b7a3f031":"code","c4945729":"code","d5d3b8b1":"code","40da2ee8":"code","e482af33":"code","aca9912f":"code","9d2c7066":"code","38e5f160":"code","c7169d3d":"code","b60c8516":"code","dcc9e2b8":"code","a417f34f":"code","97f06f19":"code","9349696e":"code","5b223f39":"code","dd93b4b1":"code","2a7ab1c3":"code","379892ba":"code","25e3bf55":"code","78527cc0":"code","a152e3fd":"code","34665133":"code","9eacc6e7":"code","bdb8503a":"code","1b88c735":"code","5c5ffa3a":"code","58b0a215":"code","55b2607b":"code","88229744":"code","306d2760":"code","14b6f422":"code","0b80083e":"code","1941bb35":"code","a9460853":"code","4a032ff8":"code","2cfe719b":"code","8443597c":"code","2fb130c4":"code","fea28276":"code","fe6e12b6":"code","29c3b881":"code","ae17376a":"code","f4cc67d9":"code","80153c13":"code","5fd06143":"code","cf818a25":"code","fe1727f9":"code","37e11f0d":"code","b27b38cd":"code","0418026c":"code","ecb77c5c":"code","29171b22":"code","52bd8b3a":"code","5fbc5f61":"code","e9686509":"code","e1190b11":"code","08dd36b4":"code","556a14cb":"code","e70954bf":"code","154b3b15":"code","920a50b8":"code","195a6d78":"code","4313e9b2":"code","50f0f304":"code","77f88c08":"code","c847ac16":"code","c77f0bb9":"code","3a1b74da":"code","88e94ebe":"code","fccd2ffb":"code","ec0f434e":"markdown","6aee6cd9":"markdown","1aaa0e1a":"markdown","3ecfaf92":"markdown","c31114a1":"markdown","b6f3982e":"markdown","cc800a0a":"markdown","a745dcba":"markdown","1312fe7a":"markdown","4f1fb2a9":"markdown","04612334":"markdown","14733ebf":"markdown","0906a93f":"markdown","b03f09bb":"markdown","e8f335f2":"markdown","d6b3e1e7":"markdown","d0ffb4ca":"markdown","1d85818e":"markdown","3750d4ea":"markdown","a43e6a02":"markdown","9054c172":"markdown","5f019b4d":"markdown","2ac9b4a2":"markdown","26ff4f27":"markdown","9506242d":"markdown","b27be4d4":"markdown","3a3e89b7":"markdown","690ca69a":"markdown","b8d483e1":"markdown","eeb99ea0":"markdown","1d9a172b":"markdown","298a91dc":"markdown","60d0f208":"markdown","e9210a66":"markdown","27e9fb12":"markdown","f23a174a":"markdown","55bfc6d9":"markdown","8bed00ea":"markdown","ddae0e75":"markdown","d88d68d0":"markdown","1e7f6e7d":"markdown","9235223f":"markdown","52dd670a":"markdown","1ab7bcb8":"markdown","01eda603":"markdown","90de130b":"markdown","e0564a5e":"markdown","7038d15c":"markdown","2f35023e":"markdown","a65a6779":"markdown","f780381d":"markdown","e7b1ce5d":"markdown","ee9f741b":"markdown","1951c168":"markdown","f89d03bb":"markdown","7bf8de05":"markdown","bdf218fd":"markdown","2124159c":"markdown","114a2921":"markdown","008870c7":"markdown","68bcf3ff":"markdown","bd1413d1":"markdown","2cb57fb6":"markdown","b0f4a68a":"markdown","acd3a97a":"markdown","50d3711c":"markdown","6526d3ca":"markdown","597560a2":"markdown","49b38561":"markdown","074fcc0e":"markdown","79a8c0e6":"markdown","f120b09a":"markdown","faeb1de5":"markdown","ad5d56e3":"markdown","efd80044":"markdown","7ba5204d":"markdown","f85022eb":"markdown","b23e7560":"markdown","d4cf453d":"markdown","06c4af60":"markdown","a0cc35c7":"markdown","64eb180d":"markdown","de017920":"markdown","4056437e":"markdown","3dc36c5f":"markdown","9c13c223":"markdown","23a20d20":"markdown","923067eb":"markdown","e9418c02":"markdown","e8bc9d63":"markdown","bfb162be":"markdown","03056f3a":"markdown","15f9059e":"markdown","956f5734":"markdown","844161de":"markdown","5149e807":"markdown","ddd97cf8":"markdown","22d585ea":"markdown","274de788":"markdown","8bad45ec":"markdown","601295d6":"markdown","70369c36":"markdown","2750d8cd":"markdown","cb4e2d2a":"markdown","8891611d":"markdown","4296104a":"markdown","b439601d":"markdown"},"source":{"7a86be7d":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","50eba87d":"import pandas as pd","49f971ca":"def get_detail(column):\n    \"\"\" Get the detail of the column \n    \n    Args:\n        column (str): the column name\n    \n    Returns:\n        str: the detail of the column\n    \"\"\"\n    text = \"\"\n    with open(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/data_description.txt\") as f:\n        text = f.read()\n    \n    try:\n        start = text.find(f\"{column}:\")\n        end = text.find(\":\", start+len(column)+5)\n        texts_found = text[start:end].strip().split(\"\\n\")\n        print(\"\\n\".join(texts_found[:-2]))\n    except:\n        print(\"No such column\")","be594d38":"get_detail(\"Neighborhood\")","4d03eb04":"test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","0133b939":"train.info()","f107b69a":"train_nulls = train.isna().sum()[train.isna().sum() != 0]\ntrain_nulls","319043c0":"test.info()","53d5695a":"test_nulls = test.isna().sum()[test.isna().sum() != 0]\ntest_nulls","b332b3be":"train_nulls_cols = list(train_nulls.index)\ntest_nulls_cols = list(test_nulls.index)","73067a5f":"different_cols = []\nfor col in train_nulls_cols:\n    if col in test_nulls_cols:\n        pass\n    else:\n        different_cols.append(col)\n    \ndifferent_cols","6f354916":"test_nulls_cols.sort()\ntest_nulls_cols","7c3a16c3":"def percentage_none(column, df):\n    \"\"\"\n    Calculate the percentage of missing values in a column\n\n    Attributes:\n    -----------\n        column (str): the column name\n        df (pandas.DataFrame): the dataframe to calculate the percentage of missing values\n\n    Returns:\n    --------\n        float: the percentage of missing values in the column\n            Default: train\n    \"\"\"\n    none_rows = df[column].isnull().sum()\n    return none_rows \/ len(df)","20d82ccf":"print(percentage_none(\"Alley\", train))\nprint(percentage_none(\"Alley\", test))","0b8817d1":"get_detail(\"Alley\")","127490d8":"train[\"Alley\"].fillna(\"None\", inplace=True)\ntest[\"Alley\"].fillna(\"None\", inplace=True)","6c75a030":"print(percentage_none(\"Alley\", train))\nprint(percentage_none(\"Alley\", test))","14359e89":"print(percentage_none(\"BsmtCond\", train))\nprint(percentage_none(\"BsmtCond\", test))","9b20e350":"get_detail(\"BsmtCond\")","1dd3a3c3":"train[\"BsmtCond\"].fillna(\"None\", inplace=True)\ntest[\"BsmtCond\"].fillna(\"None\", inplace=True)","96002a1a":"print(percentage_none(\"BsmtCond\", train))\nprint(percentage_none(\"BsmtCond\", test))","efbb2e59":"print(percentage_none(\"BsmtExposure\", train))\nprint(percentage_none(\"BsmtExposure\", test))","085ea1e4":"get_detail(\"BsmtExposure\")","3d2be6e4":"def fill_na_for_none(column, dfs = [train, test]):\n    \"\"\"Fills NA with 'None' for the column\n\n    Attributes:\n    -----------\n        column (str): the column name\n        dfs (list): the dataframes to fill the NA with 'None'\n    \n    Returns:\n    --------    \n        None\n    \"\"\"\n    print(\"Filling NaN for {}\".format(column))\n    print(\"Percenatge of NA before...\")\n    if dfs[0][column].dtype == \"object\":\n        fill_value = \"None\"\n    \n    else:\n        fill_value = 0\n    for df in dfs:\n        print(percentage_none(column, df))\n        df[column].fillna(fill_value, inplace=True)\n    \n    print(\"Percentage of NA after...\")\n    for df in dfs:\n        print(percentage_none(column, df))","1d389339":"fill_na_for_none(\"BsmtExposure\")","16220e92":"get_detail(\"BsmtFinSF1\")","61871d88":"fill_na_for_none(\"BsmtFinSF1\")","fea1635f":"get_detail(\"BsmtFinSF2\")","f4b2d89c":"fill_na_for_none(\"BsmtFinSF2\")","d98d84b9":"get_detail(\"BsmtFinType1\")","6dfd1812":"fill_na_for_none(\"BsmtFinType1\")","a81d9593":"get_detail(\"BsmtFinType2\")","41d6db35":"fill_na_for_none(\"BsmtFinType2\")","55038005":"get_detail(\"BsmtFullBath\")","0acf9914":"train[\"BsmtFullBath\"]","60f7fe62":"fill_na_for_none(\"BsmtFullBath\")","1df2b512":"get_detail(\"BsmtHalfBath\")","234b908c":"fill_na_for_none(\"BsmtHalfBath\")","f8c964fd":"get_detail(\"BsmtQual\")","c420403b":"fill_na_for_none(\"BsmtQual\")","134edd70":"get_detail(\"BsmtUnfSF\")","1b0a6318":"fill_na_for_none(\"BsmtUnfSF\")","c74524b3":"get_detail(\"TotalBsmtSF\")","d00debe4":"fill_na_for_none(\"TotalBsmtSF\")","5e83f269":"get_detail(\"Exterior1st\")","0abd74f9":"train[\"Exterior1st\"].isna().sum()","aab0bff3":"test[\"Exterior1st\"].isna().sum()","894f0b47":"train[\"Exterior1st\"].value_counts()[:5], test[\"Exterior1st\"].value_counts()[:5]","2ce4970b":"train[\"Exterior1st\"].fillna(\"VinylSd\", inplace = True)\ntest[\"Exterior1st\"].fillna(\"VinylSd\", inplace = True)","759e0a8a":"print(percentage_none(\"Exterior1st\", train))\nprint(percentage_none(\"Exterior1st\", test))","9b7cf2bb":"get_detail(\"Exterior2nd\")","b7a3f031":"print(train[\"Exterior2nd\"].isna().sum())\nprint(test[\"Exterior2nd\"].isna().sum())","c4945729":"train[\"Exterior2nd\"].value_counts()[:5], test[\"Exterior2nd\"].value_counts()[:5]","d5d3b8b1":"train[\"Exterior2nd\"].fillna(\"VinylSd\", inplace = True)\ntest[\"Exterior2nd\"].fillna(\"VinylSd\", inplace = True)","40da2ee8":"print(train[\"Exterior2nd\"].isna().sum())\nprint(test[\"Exterior2nd\"].isna().sum())","e482af33":"get_detail(\"Fence\")","aca9912f":"fill_na_for_none(\"Fence\")","9d2c7066":"get_detail(\"FireplaceQu\")","38e5f160":"fill_na_for_none(\"FireplaceQu\")","c7169d3d":"get_detail(\"Functional\")","b60c8516":"print(percentage_none(\"Functional\", train))\nprint(percentage_none(\"Functional\", test))\ntest[\"Functional\"].isna().sum()","dcc9e2b8":"test[test[\"Functional\"].isna()].T","a417f34f":"train[\"Functional\"].value_counts()[:5], test[\"Functional\"].value_counts()[:5]","97f06f19":"train[\"Functional\"].fillna(\"Typ\", inplace = True)\ntest[\"Functional\"].fillna(\"Typ\", inplace = True)","9349696e":"print(percentage_none(\"Functional\", train))\nprint(percentage_none(\"Functional\", test))","5b223f39":"get_detail(\"GarageArea\")","dd93b4b1":"fill_na_for_none(\"GarageArea\")","2a7ab1c3":"get_detail(\"GarageCars\")","379892ba":"fill_na_for_none(\"GarageCars\")","25e3bf55":"get_detail(\"GarageCond\")","78527cc0":"fill_na_for_none(\"GarageCond\")","a152e3fd":"get_detail(\"GarageFinish\")","34665133":"fill_na_for_none(\"GarageFinish\")","9eacc6e7":"get_detail(\"GarageQual\")","bdb8503a":"fill_na_for_none(\"GarageQual\")","1b88c735":"get_detail(\"GarageType\")","5c5ffa3a":"fill_na_for_none(\"GarageType\")","58b0a215":"get_detail(\"GarageYrBlt\")","55b2607b":"print(train[\"GarageYrBlt\"].isna().sum())\nprint(test[\"GarageYrBlt\"].isna().sum())","88229744":"train[\"GarageYrBlt\"].describe()","306d2760":"fill_na_for_none(\"GarageYrBlt\")","14b6f422":"get_detail(\"KitchenQual\")","0b80083e":"print(train[\"KitchenQual\"].isna().sum())\nprint(test[\"KitchenQual\"].isna().sum())","1941bb35":"train[\"KitchenQual\"].value_counts()[:5], test[\"KitchenQual\"].value_counts()[:5]","a9460853":"train[\"KitchenQual\"].fillna(\"TA\", inplace = True)\ntest[\"KitchenQual\"].fillna(\"TA\", inplace = True)","4a032ff8":"print(train[\"KitchenQual\"].isna().sum())\nprint(test[\"KitchenQual\"].isna().sum())","2cfe719b":"get_detail(\"LotFrontage\")","8443597c":"print(train[\"LotFrontage\"].isna().sum())\nprint(test[\"LotFrontage\"].isna().sum())","2fb130c4":"train[\"LotFrontage\"].describe()","fea28276":"lotfrontage_train = train.groupby([\"Neighborhood\", \"MSZoning\"])[\"LotFrontage\"].mean()\nlotfrontage_test = test.groupby([\"Neighborhood\", \"MSZoning\"])[\"LotFrontage\"].mean()","fe6e12b6":"def lot_frontage_fill_train(row):\n\n    LotFrontage = str(row[\"LotFrontage\"]).lower()\n    if LotFrontage != \"nan\":\n        return float(LotFrontage)\n    neighborhood = row[\"Neighborhood\"]\n    mszoning = row[\"MSZoning\"]\n    try:\n        num = round(float(lotfrontage_train[(neighborhood, mszoning)]),2)\n    except:\n        num = None\n    return num\n\ndef lot_frontage_fill_test(row):\n\n    LotFrontage = str(row[\"LotFrontage\"]).lower()\n    if LotFrontage != \"nan\":\n        return float(LotFrontage)\n    neighborhood = row[\"Neighborhood\"]\n    mszoning = row[\"MSZoning\"]\n    try:\n        num = round(float(lotfrontage_test[(neighborhood, mszoning)]),2)\n    except:\n        num = None\n    return num","29c3b881":"train[\"LotFrontage\"] =  train.apply(lot_frontage_fill_train, axis = 1)","ae17376a":"test[\"LotFrontage\"] =  test.apply(lot_frontage_fill_test, axis = 1)","f4cc67d9":"print(train[\"LotFrontage\"].isna().sum())\nprint(test[\"LotFrontage\"].isna().sum())","80153c13":"train_mean = round(train[\"LotFrontage\"].mean(),2)\ntest_mean = round(test[\"LotFrontage\"].mean(),2)\ntrain_mean, test_mean","5fd06143":"train[\"LotFrontage\"].fillna(train_mean, inplace = True)\ntest[\"LotFrontage\"].fillna(test_mean, inplace = True)","cf818a25":"print(train[\"LotFrontage\"].isna().sum())\nprint(test[\"LotFrontage\"].isna().sum())","fe1727f9":"get_detail(\"MasVnrArea\")","37e11f0d":"print(train[\"MasVnrArea\"].isna().sum())\nprint(test[\"MasVnrArea\"].isna().sum())","b27b38cd":"fill_na_for_none(\"MasVnrArea\")","0418026c":"get_detail(\"MasVnrType\")","ecb77c5c":"fill_na_for_none(\"MasVnrType\")","29171b22":"get_detail(\"MiscFeature\")","52bd8b3a":"fill_na_for_none(\"MiscFeature\")","5fbc5f61":"get_detail(\"PoolQC\")","e9686509":"fill_na_for_none(\"PoolQC\")","e1190b11":"get_detail(\"SaleType\")","08dd36b4":"print(train[\"SaleType\"].isna().sum())\nprint(test[\"SaleType\"].isna().sum())","556a14cb":"test[\"SaleType\"].value_counts()","e70954bf":"test[\"SaleType\"].fillna(\"WD\", inplace = True)","154b3b15":"print(train[\"SaleType\"].isna().sum())\nprint(test[\"SaleType\"].isna().sum())","920a50b8":"get_detail(\"Utilities\")","195a6d78":"print(train[\"Utilities\"].isna().sum())\nprint(test[\"Utilities\"].isna().sum())","4313e9b2":"test[\"Utilities\"].value_counts()","50f0f304":"test[\"Utilities\"].fillna(\"AllPub\", inplace = True)","77f88c08":"get_detail(\"Electrical\")","c847ac16":"train[\"Electrical\"].value_counts()[:5]","c77f0bb9":"train[\"Electrical\"].fillna(\"SBrkr\", inplace = True)","3a1b74da":"print(train[\"Electrical\"].isna().sum())\nprint(test[\"Electrical\"].isna().sum())","88e94ebe":"train.isna().sum()[train.isna().sum() != 0]","fccd2ffb":"train.isna().sum()[train.isna().sum() != 0]","ec0f434e":"The same here. It is getting repetative, let's follow the DRY principle and make a function which will replace `NA` with \"None\" for both train and test set.","6aee6cd9":"<a id=\"Utilities\"><\/a>\n### Utilities","1aaa0e1a":"Here, since `BsmtFinSF1` is a numeric column, we'll replace `NA` with 0, which makes sense as there is basement to begin with.","3ecfaf92":"### Data Fields","c31114a1":"<a id=\"GarageCond\"><\/a>\n#### GarageCond","b6f3982e":"<a id=\"final-thoughts\"><\/a>\n## Final Thoughts","cc800a0a":"This completes the cleaning of the `Garage` column.","a745dcba":"## Content\n1. [Importing the libraries](#import)\n2. [Data Field](#data-fields)\n    - [Getting More Information about Data Field](#more-info)\n3. [Load Data](#load-data)\n    - [Priliminary Analysis](#preliminary-analysis)\n4. [Data Cleaning](#data-cleaning)\n    1. [Alley](#alley)\n    2. [Basement](#basement)\n        - [BsmtCond](#BsmtCond)\n        - [BsmtExposure](#BsmtExposure)\n        - [BsmtFinSF1](#BsmtFinSF1)\n        - [BsmtFinSF2](#BsmtFinSF2)\n        - [BsmtFinType1](#BsmtFinType1)\n        - [BsmtFinType2](#BsmtFinType2)\n        - [BsmtFullBath](#BsmtFullBath)\n        - [BsmtHalfBath](#BsmtHalfBath)\n        - [BsmtQual](#BsmtQual)\n        - [BsmtUnfSF](#BsmtUnfSF)\n        - [TotalBsmtSF](#TotalBsmtSF)\n    3. [Exterior](#exterior)\n        - [Exterior1st](#exterior1st)\n        - [Exterior2nd](#exterior2nd)\n    4. [Fence](#fence)\n    5. [FireplaceQu](#FireplaceQu)\n    6. [Functional](#Functional)\n    7. [Garage](#garage)\n        - [GarageArea](#GarageArea)\n        - [GarageCars](#GarageCars)\n        - [GarageCond](#GarageCond)\n        - [GarageFinish](#GarageFinish)\n        - [GarageQual](#GarageQual)\n        - [GarageType](#GarageType)\n        - [GarageYrBlt](#GarageYrBlt)\n    8. [KitchenQual](#KitchenQual)\n    9. [LotFrontage](#LotFrontage)\n    10. [Masonry Veneer](#Masonry)\n        - [MasVnrType](#MasVnrType)\n        - [MasVnrArea](#MasVnrArea)\n    11. [MiscFeature](#MiscFeature)\n    12. [PoolQC](#PoolQC)\n    13. [SaleType](#SaleType)\n    14. [Utilities](#Utilities)\n    15. [Electrical](#Electrical)\n5. [Final Thoughts](#final-thoughts)","1312fe7a":"<a id = \"BsmtFinType1\"><\/a>\n#### BsmtFinType1","4f1fb2a9":"<a id = \"MasVnrArea\"><\/a>\n#### MasVnrArea","04612334":"It seems that \"VinylSd\" is the most popular type of exterior covering used in both the train and test data. We'll fill the NA with this.","14733ebf":"<a id=\"SaleType\"><\/a>\n### SaleType","0906a93f":"You guessed it! :)","b03f09bb":"<a id=\"PoolQC\"><\/a>\n### PoolQC","e8f335f2":"Great! More null values! In this notebook, we are mainly concerned with data cleaning. So, let's get started.\n\nTest data has more null values than the train data. We'll make a list of all the columns which have missing values and deal with them one by one. But first, let's see if all the columns with missing values in test data are included in the train data or not.","d6b3e1e7":"<a id=\"GarageQual\"><\/a>\n#### GarageQual","d0ffb4ca":"Again, we have a lot of columns related to garage. We'll deal them individually.","1d85818e":"<a name=\"data-fields\"><\/a>","3750d4ea":"Same as `GarageArea`.","a43e6a02":"Same here!","9054c172":"<a id = \"data-cleaning\"><\/a>","5f019b4d":"<a name='import'><\/a>","2ac9b4a2":"This is a numerical column. So, we'll replace `NA` with 0. Fortunately, our function already takes care of this!","26ff4f27":"Here the `None` values are replaced with \"None\".","9506242d":"So, there is one row, where we have a missing value corresponding to `Exterior1st`. There are a lot of way to deal this missing value. \n1. You can define a new category for it, however, this won't be that good since there is only one such row.\n2. You can find some other column which is related to `Exterior1st` column and fill the empty value using that column.\n3. Or, you can find the find the most common value of `Exterior1st` column and fill the empty value using that value.\n\nI'll use the thirs approach.","b27be4d4":"<a id=\"garage\"><\/a>\n### Garage","3a3e89b7":"## Data Cleaning","690ca69a":"\"Typ\" which corresponds to \"Typical Functionality\" for outnumbers any other type of functionality. We can safely use this.","b8d483e1":"A lot of values are missing. This will be interesting. :)","eeb99ea0":"We can fill the `NA` values with 0.","1d9a172b":"Hmm, over 93% of the houses have `Alley` as `NA`, in both the train and test data. But, from the description of the column, it seems that `NA` means that there is no alley. Only thing we need to do is to replace `NA` with some other value which represents that there is no alley. We'll use string \"None\" for this. Why am I using \"None\"? Well, a lot of missing values in this data are because the facilty or object defined by that column does not exist in the house. We'll be using \"None\" for all of them.","298a91dc":"### Priliminary Analysis","60d0f208":"## Imports","e9210a66":"Same!","27e9fb12":"<a id = \"BsmtExposure\"><\/a>\n#### BsmtExposure","f23a174a":"Here too, we'll use the previous approach.","55bfc6d9":"<a id=\"fence\"><\/a>\n### Fence","8bed00ea":"<a id=\"GarageYrBlt\"><\/a>\n#### GarageYrBlt","ddae0e75":"There are a lot of features related with basement. We'll  deal with them one by one.","d88d68d0":"Just one missing value in test set. We can fill the `NA` with the most common value in the column.","1e7f6e7d":"<a id=\"GarageCars\"><\/a>\n#### GarageCars","9235223f":"This one is a bit interesting. The column `GarageYrBlt` lists the year the garage was built in. Of course, if there is no garage to start with, the year build will be `NA`. The question is: should we use 0 to fill the missing values in this column? Let's have a look at the year these garages are built.","52dd670a":"<a name='more-info'><\/a>","1ab7bcb8":"Note that there are a lot of repetations in what we did. One of the reason for this is the fact that we dealt with the columns with missing values one by one as we did not know what type of beahaviour we should expect. Now that we know it, we can write a function to automat a lot of task we did. For example, the columns which we filled the `NA` values as \"None\" or 0 can be filled automatically by making a list of these columns and running our function `fill_na_with_none` on them. We can make a similar function for filling the values by the most common value in that column to deal with some of the other columns that we encountered, like `Electrical`, `Utilities` etc.. This will considerably reduce the amount of code we have to write.","01eda603":"It's getting boring, isn't it? Well, we can make a function which will replace `NA` with \"None\" for both train and test set for every columns associated with basement, but I'll leave it for now.","90de130b":"Same here.","e0564a5e":"<a id = \"BsmtFinType2\"><\/a>\n#### BsmtFinType2","7038d15c":"<a id=\"GarageFinish\"><\/a>\n#### GarageFinish","2f35023e":"<a id=\"GarageArea\"><\/a>\n#### GarageArea","a65a6779":"<a id=\"Electrical\"><\/a>\n### Electrical","f780381d":"<a id = \"preliminary-analysis\"><\/a>","e7b1ce5d":"Since there is just one missing value, we'll just fill it with the most common value.","ee9f741b":"So, `NA` means no pool!","1951c168":"Before starting, one things we have to keep in mind is that not to use `dropna` function. The reasons are:\n1. We already have very little data. There are same number of rows in train and test data. If we drop some rows from train set, our models will not perform that well.\n2. Kaggle wants us to give predictions on all the test data. So, obviously, we have to use all the data. (This fact is going to cause us even more problems in the future, escpecially when we are dealing with outliers.)","f89d03bb":"<a id=\"TotalBsmtSF\"><\/a>\n#### TotalBsmtSF","7bf8de05":"## Loading the Data","bdf218fd":"<a id = \"BsmtQual\"><\/a>\n#### BsmtQual","2124159c":"<a id=\"exterior2nd\"><\/a>\n### Exterior2nd","114a2921":"<a id=\"exterior\"><\/a>\n### Exterior","008870c7":"<a id = \"BsmtFullBath\"><\/a>\n#### BsmtFullBath","68bcf3ff":"Much better! :)","bd1413d1":"<a id=\"GarageType\"><\/a>\n#### GarageType","2cb57fb6":"Here's a brief version of what you'll find in the data description file.\n\n<ul>\n<li><strong>SalePrice<\/strong> - the property's sale price in dollars. This is the target variable that you're trying to predict.<\/li>\n<li><strong>MSSubClass<\/strong>: The building class<\/li>\n<li><strong>MSZoning<\/strong>: The general zoning classification<\/li>\n<li><strong>LotFrontage<\/strong>: Linear feet of street connected to property<\/li>\n<li><strong>LotArea<\/strong>: Lot size in square feet<\/li>\n<li><strong>Street<\/strong>: Type of road access<\/li>\n<li><strong>Alley<\/strong>: Type of alley access<\/li>\n<li><strong>LotShape<\/strong>: General shape of property<\/li>\n<li><strong>LandContour<\/strong>: Flatness of the property<\/li>\n<li><strong>Utilities<\/strong>: Type of utilities available<\/li>\n<li><strong>LotConfig<\/strong>: Lot configuration<\/li>\n<li><strong>LandSlope<\/strong>: Slope of property<\/li>\n<li><strong>Neighborhood<\/strong>: Physical locations within Ames city limits<\/li>\n<li><strong>Condition1<\/strong>: Proximity to main road or railroad<\/li>\n<li><strong>Condition2<\/strong>: Proximity to main road or railroad (if a second is present)<\/li>\n<li><strong>BldgType<\/strong>: Type of dwelling<\/li>\n<li><strong>HouseStyle<\/strong>: Style of dwelling<\/li>\n<li><strong>OverallQual<\/strong>: Overall material and finish quality<\/li>\n<li><strong>OverallCond<\/strong>: Overall condition rating<\/li>\n<li><strong>YearBuilt<\/strong>: Original construction date<\/li>\n<li><strong>YearRemodAdd<\/strong>: Remodel date<\/li>\n<li><strong>RoofStyle<\/strong>: Type of roof<\/li>\n<li><strong>RoofMatl<\/strong>: Roof material<\/li>\n<li><strong>Exterior1st<\/strong>: Exterior covering on house<\/li>\n<li><strong>Exterior2nd<\/strong>: Exterior covering on house (if more than one material)<\/li>\n<li><strong>MasVnrType<\/strong>: Masonry veneer type<\/li>\n<li><strong>MasVnrArea<\/strong>: Masonry veneer area in square feet<\/li>\n<li><strong>ExterQual<\/strong>: Exterior material quality<\/li>\n<li><strong>ExterCond<\/strong>: Present condition of the material on the exterior<\/li>\n<li><strong>Foundation<\/strong>: Type of foundation<\/li>\n<li><strong>BsmtQual<\/strong>: Height of the basement<\/li>\n<li><strong>BsmtCond<\/strong>: General condition of the basement<\/li>\n<li><strong>BsmtExposure<\/strong>: Walkout or garden level basement walls<\/li>\n<li><strong>BsmtFinType1<\/strong>: Quality of basement finished area<\/li>\n<li><strong>BsmtFinSF1<\/strong>: Type 1 finished square feet<\/li>\n<li><strong>BsmtFinType2<\/strong>: Quality of second finished area (if present)<\/li>\n<li><strong>BsmtFinSF2<\/strong>: Type 2 finished square feet<\/li>\n<li><strong>BsmtUnfSF<\/strong>: Unfinished square feet of basement area<\/li>\n<li><strong>TotalBsmtSF<\/strong>: Total square feet of basement area<\/li>\n<li><strong>Heating<\/strong>: Type of heating<\/li>\n<li><strong>HeatingQC<\/strong>: Heating quality and condition<\/li>\n<li><strong>CentralAir<\/strong>: Central air conditioning<\/li>\n<li><strong>Electrical<\/strong>: Electrical system<\/li>\n<li><strong>1stFlrSF<\/strong>: First Floor square feet<\/li>\n<li><strong>2ndFlrSF<\/strong>: Second floor square feet<\/li>\n<li><strong>LowQualFinSF<\/strong>: Low quality finished square feet (all floors)<\/li>\n<li><strong>GrLivArea<\/strong>: Above grade (ground) living area square feet<\/li>\n<li><strong>BsmtFullBath<\/strong>: Basement full bathrooms<\/li>\n<li><strong>BsmtHalfBath<\/strong>: Basement half bathrooms<\/li>\n<li><strong>FullBath<\/strong>: Full bathrooms above grade<\/li>\n<li><strong>HalfBath<\/strong>: Half baths above grade<\/li>\n<li><strong>Bedroom<\/strong>: Number of bedrooms above basement level<\/li>\n<li><strong>Kitchen<\/strong>: Number of kitchens<\/li>\n<li><strong>KitchenQual<\/strong>: Kitchen quality<\/li>\n<li><strong>TotRmsAbvGrd<\/strong>: Total rooms above grade (does not include bathrooms)<\/li>\n<li><strong>Functional<\/strong>: Home functionality rating<\/li>\n<li><strong>Fireplaces<\/strong>: Number of fireplaces<\/li>\n<li><strong>FireplaceQu<\/strong>: Fireplace quality<\/li>\n<li><strong>GarageType<\/strong>: Garage location<\/li>\n<li><strong>GarageYrBlt<\/strong>: Year garage was built<\/li>\n<li><strong>GarageFinish<\/strong>: Interior finish of the garage<\/li>\n<li><strong>GarageCars<\/strong>: Size of garage in car capacity<\/li>\n<li><strong>GarageArea<\/strong>: Size of garage in square feet<\/li>\n<li><strong>GarageQual<\/strong>: Garage quality<\/li>\n<li><strong>GarageCond<\/strong>: Garage condition<\/li>\n<li><strong>PavedDrive<\/strong>: Paved driveway<\/li>\n<li><strong>WoodDeckSF<\/strong>: Wood deck area in square feet<\/li>\n<li><strong>OpenPorchSF<\/strong>: Open porch area in square feet<\/li>\n<li><strong>EnclosedPorch<\/strong>: Enclosed porch area in square feet<\/li>\n<li><strong>3SsnPorch<\/strong>: Three season porch area in square feet<\/li>\n<li><strong>ScreenPorch<\/strong>: Screen porch area in square feet<\/li>\n<li><strong>PoolArea<\/strong>: Pool area in square feet<\/li>\n<li><strong>PoolQC<\/strong>: Pool quality<\/li>\n<li><strong>Fence<\/strong>: Fence quality<\/li>\n<li><strong>MiscFeature<\/strong>: Miscellaneous feature not covered in other categories<\/li>\n<li><strong>MiscVal<\/strong>: $Value of miscellaneous feature<\/li>\n<li><strong>MoSold<\/strong>: Month Sold<\/li>\n<li><strong>YrSold<\/strong>: Year Sold<\/li>\n<li><strong>SaleType<\/strong>: Type of sale<\/li>\n<li><strong>SaleCondition<\/strong>: Condition of sale<\/li>\n<\/ul>","b0f4a68a":"<a id=\"FireplaceQu\"><\/a>\n### FireplaceQu","acd3a97a":"The same.","50d3711c":"<a id = \"BsmtFinSF2\"><\/a>\n#### BsmtFinSF2","6526d3ca":"<a id = \"BsmtHalfBath\"><\/a>\n#### BsmtHalfBath","597560a2":"### Alley","49b38561":"Same here!","074fcc0e":"We'll do the data cleaning alphabetically. So, let's start with `Alley` column.","79a8c0e6":"Let's do a sanity check.","f120b09a":"<a id = \"KitchenQual\"><\/a>\n### KitchenQual","faeb1de5":"Just one value in the test data is missing. We'll use the same method we used for `Exterior1st` column.","ad5d56e3":"<a id=\"MiscFeature\"><\/a>\n### MiscFeature","efd80044":"I almost forgot this. This is the one exceptional column where we have a missing value in the train set but not in test set. Let's deal with it.","7ba5204d":"<a id = \"BsmtUnfSF\"><\/a>\n#### BsmtUnfSF","f85022eb":"There are still some missing values. This is happening because we already had some missing values in both `lotfrontage_train` and `lotfrontage_test`. Now, since we have very few missing values, we'll just use the mean to fill them.","b23e7560":"These are built from 1900 to 2010.\n\nNow, as some of houses does not have garage, the value in column `GarageYrBlt` should be very far away from the values where the `GarageYrBlt` is not `NA`. So, we can safely replace `NA` with 0.","d4cf453d":"### Getting More Details","06c4af60":"Same here!","a0cc35c7":"<a id=\"basement\"><\/a>","64eb180d":"<a name = \"load-data\"><\/a>","de017920":"<a id = \"Masonry\"><\/a>\n### Masonry veneer","4056437e":"Let's get detail about the `Alley` column.","3dc36c5f":"Here, too, `NA` values can be filled with \"None\".","9c13c223":"Here, we'll apply the method we used in case of `Exterior1st` column.","23a20d20":"<a id=\"Functional\"><\/a>\n### Functional","923067eb":"<a id = \"BsmtCond\"><\/a>\n#### BsmtCond","e9418c02":"Again, `NA` means there is no basement. So, we'll replace `NA` with \"None\".","e8bc9d63":"<a id=\"LotFrontage\"><\/a>\n### LotFrontage","bfb162be":"### Basement","03056f3a":"Just two missing values in test set. Again, we will fill the `NA` with the most common value.","15f9059e":"<a id=\"exterior1st\"><\/a>\n### Exterior1st","956f5734":"<a id = \"MasVnrType\"><\/a>\n#### MasVnrType","844161de":"<a id = \"alley\"><\/a>","5149e807":"Great! It seems there is no missing value in both the train set and test set.\n\nNext step is EDA and Data Engineering.","ddd97cf8":"Here we'll create a function which returns details about the column, given the column name.","22d585ea":"A lot of null values!","274de788":"<a id = \"BsmtFinSF1\"><\/a>\n#### BsmtFinSF1","8bad45ec":"Oof! We survived! :)","601295d6":"A non-numerical column. So, we'll replace `NA` with \"None\". Of course we don't have to do anything as our function already takes care of it!","70369c36":"Great! We can apply the same method we applied for basement.","2750d8cd":"So, `Electrical` column is the only column which has missing values in train data but not in test data. All else columns of train are included in test data.","cb4e2d2a":"We have a numerical column. `NA` corresponds to the situation when we don't have any garage in first place. So, we'll replace `NA` with 0.","8891611d":"Two missing values in this column for test data.","4296104a":"The standard deviation and range of the values are huge. We can't use mean or some other statistical method to fill the missing values. The description of the column says: **Linear feet of street connected to property**. The dataset contains a column which gives *Physical locations within Ames city limits*. Also, we have the `MSZoning` column which *Identifies the general zoning classification of the sale* of the house. We will use these two columns to fill the missing values.","b439601d":"Great! Onwards to Masonry veneer."}}