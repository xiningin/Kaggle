{"cell_type":{"8b3b1aa1":"code","aa1ed3b0":"code","43ae8f08":"code","74f163c4":"code","5a31246e":"code","cc8dea3f":"code","c779340d":"code","28b733e1":"code","d9ffd99e":"code","b30e43f1":"code","37bdd423":"code","16908674":"code","1fc833fa":"code","fc453892":"markdown","c69b857e":"markdown","3f12e1d6":"markdown","73114720":"markdown","f8e3bb0b":"markdown","e926e69f":"markdown"},"source":{"8b3b1aa1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport random\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom pandas_profiling import ProfileReport as profile\n\nimport pkg_resources as pkg\nprint( f\"pandas_profiling version: {pkg.get_distribution('pandas_profiling').version}\")\n\nimport matplotlib.pyplot as plt        \nimport seaborn as sns  ","aa1ed3b0":"def seeding(SEED, use_tf=False):\n    np.random.seed(SEED)\n    random.seed(SEED)\n    os.environ['PYTHONHASHSEED'] = str(SEED)\n    os.environ['TF_CUDNN_DETERMINISTIC'] = str(SEED)\n    if use_tf:\n        tf.random.set_seed(SEED)\n    print('seeding done!!!')","43ae8f08":"RANDOM_SEED = 42\nPROFILE = True\n\nseeding(RANDOM_SEED)\n\ntrain = pd.read_csv('..\/input\/tabular-playground-series-feb-2022\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-feb-2022\/test.csv')\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-feb-2022\/sample_submission.csv')","74f163c4":"## display missing data\ntotal = train.isnull().sum().sort_values(ascending=False)\npercent = (train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(10)","5a31246e":"f, ax = plt.subplots(figsize=(15, 6))\nplt.xticks(rotation='90')\nsns.countplot(x=train.target)\nplt.title('train.Target', fontsize=15)\nplt.show()","cc8dea3f":"## Takes forever with this amount of data, so do it just once :)\n## Also minimal=False is very useful for relationships between features\n\ntrain_profile = profile(train, title=\"Train Data\", minimal=True)\ndisplay(train_profile)","c779340d":"skewed_cols = ['A0T0G0C10','A0T0G1C9','A0T0G2C8','A0T0G8C2','A0T0G9C1','A0T0G10C0','A0T1G1C8','A0T1G8C1','A0T1G9C0','A0T2G0C8',\n    'A0T2G8C0','A0T3G0C7','A0T3G7C0','A0T10G0C0','A1T0G0C9','A1T0G8C1','A1T0G9C0','A1T1G0C8','A1T1G8C0','A2T0G0C8','A2T0G8C0',\n    'A2T1G0C7','A3T0G0C7','A3T0G7C0','A10T0G0C0']\n\n## \n## to reduce skewness we can use np.log\n","28b733e1":"categorical_cols = ['A0T0G9C1', 'A0T0G10C0', 'A0T1G0C9', 'A0T1G9C0', 'A0T2G0C8', 'A0T2G8C0', 'A0T10G0C0', 'A1T0G0C9', 'A1T0G9C0',\n    'A1T1G8C0','A2T0G0C8','A2T0G8C0','A10T0G0C0']\n\n## \n## columns that have distnict values as less than 0.1\n## could be a category ???\n## we will need to compare with test dataset profile","d9ffd99e":"test_profile = profile(test, title=\"Test Data\", minimal=True)\ndisplay(test_profile)","b30e43f1":"test_skewed_cols = ['A0T0G0C10','A0T0G1C9','A0T0G2C8','A0T0G8C2','A0T0G9C1','A0T0G10C0','A0T1G1C8','A0T1G8C1',\n    'A0T1G9C0','A0T2G0C8','A0T2G1C7','A0T2G8C0','A0T3G0C7','A0T3G7C0','A0T9G1C0','A1T0G0C9',\n    'A1T0G8C1','A1T0G9C0','A1T1G0C8','A2T0G0C8','A2T0G8C0','A3T0G0C7','A3T0G7C0','A9T0G0C1','A10T0G0C0']","37bdd423":"test_categorical_cols = [ 'A0T0G0C10','A0T0G1C9','A0T0G9C1','A0T0G10C0','A0T1G0C9','A0T1G9C0','A0T10G0C0',\n    'A1T0G0C9','A1T0G9C0','A10T0G0C0']\n","16908674":"for col in skewed_cols:\n    if col not in test_skewed_cols:\n        print(f'SKEWED in train not in test: {col}')\n        \nfor col in test_skewed_cols:\n    if col not in skewed_cols:\n        print(f'SKEWED in test not in train: {col}')","1fc833fa":"for col in categorical_cols:\n    if col not in test_categorical_cols:\n        print(f'CAT in train not in test: {col}')\n        \nfor col in test_categorical_cols:\n    if col not in categorical_cols:\n        print(f'CAT in test not in train: {col}')","fc453892":"### Data load","c69b857e":"### EDA with Panda Profile","3f12e1d6":"### Profile test dataset","73114720":"### Target balance","f8e3bb0b":"### Utils","e926e69f":"### Check for missing data"}}