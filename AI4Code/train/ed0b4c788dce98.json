{"cell_type":{"e69daf2c":"code","0a55cc5c":"code","03116a12":"code","c7796af9":"code","22651ad8":"code","dc6b1851":"code","ec758177":"code","7a7d26aa":"code","20efb983":"code","276b37c8":"code","15b381c2":"code","d5d0d0bc":"code","1bc57cc8":"code","83ccecfe":"code","702f5c62":"code","e80b190c":"code","23ae012d":"code","77c06c3f":"code","9dc46a68":"code","7d4d34c7":"code","7eca558c":"code","9bcd1620":"code","8bd4e24c":"code","2496ff82":"code","db75e8b7":"code","b4c3903f":"code","5988973c":"code","6d096bd0":"code","40ad201e":"code","7fc3da80":"code","99f1d2f0":"code","a837a35c":"code","d3522eb5":"code","ac1cab6f":"code","bb95077c":"code","f439eae5":"code","fa5ec823":"code","2bd3bf84":"code","4895e9d1":"code","8149264f":"code","635cc1dc":"code","9aa3d18e":"code","8f491098":"code","c9ec3b15":"code","4a855f40":"code","70da1ef4":"code","6a228c06":"code","be4df5ad":"code","9350b5be":"code","d182abcc":"code","b280a447":"code","7e6586a8":"code","7757abbc":"code","1a5567d6":"code","ef1940e9":"code","2176bfcc":"code","670f11dd":"code","c8eba4fe":"code","dc397b8b":"code","8e8396ee":"code","c04942eb":"code","9019260b":"code","4d492570":"code","3f2f705f":"code","45423f05":"code","dbae1410":"code","23d7487d":"code","07434dd1":"code","3397b3b3":"code","e0b89cf8":"code","36ace01f":"code","b19e301a":"code","c7999b25":"code","037ff20b":"code","509739b2":"code","5699b69c":"code","0765c7de":"code","ef61ada1":"code","828aab61":"code","3728979c":"code","ee805cf8":"code","bc4b0d67":"code","ad2fa67c":"code","9cfabc9e":"code","3073d90a":"code","669b8b4a":"code","98b4a868":"code","2cfb55bf":"code","6e97a641":"code","d93003a2":"code","405da1a0":"code","0af4ea29":"code","3cbc45a1":"code","ae0e5516":"code","3e18d6cd":"code","9bc89c97":"code","9ca54a7b":"code","f582fd64":"code","9cdb1592":"code","ab91a7b8":"code","a7117be8":"code","f8b7f74d":"code","8d85d13b":"code","ed8afc6f":"code","d46cac7b":"code","ce5a0047":"code","5b653964":"code","39ff0187":"code","9c7056cd":"code","1ef5a144":"markdown","a7bd994a":"markdown","12bc8ec3":"markdown","2e054219":"markdown","cbe3e7c0":"markdown","ceff0015":"markdown","ebc0c0ee":"markdown","e92a4628":"markdown","664bda04":"markdown","1f762dba":"markdown","1b7bfb7b":"markdown","3916b598":"markdown","d346f768":"markdown","91132c9d":"markdown","b6a9f753":"markdown","a3871bf5":"markdown","4ff1ce11":"markdown","c30a0d92":"markdown","52e4751e":"markdown","d7b8bb25":"markdown","0477db61":"markdown","dcf7fdfa":"markdown","6877212b":"markdown","adf8df0d":"markdown","e8fd22ec":"markdown","799f47b2":"markdown"},"source":{"e69daf2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\/cwurData.csv\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","0a55cc5c":"main_data = pd.read_csv('..\/input\/cwurData.csv')\n#ees_data = pd.read_csv('..\/input\/education_expenditure_supplementary_data.csv')\neas_data = pd.read_csv('..\/input\/educational_attainment_supplementary_data.csv')\ns_c_data = pd.read_csv('..\/input\/school_and_country_table.csv')\nshangai_data = pd.read_csv('..\/input\/shanghaiData.csv')\ntimes_data = pd.read_csv('..\/input\/timesData.csv')\n\n","03116a12":"main_data.info()","c7796af9":"main_data.corr()","22651ad8":"f,ax = plt.subplots(figsize=(12, 12))\nsns.heatmap(main_data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","dc6b1851":"f,ax = plt.subplots(figsize=(12, 12))\nsns.heatmap(shangai_data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","ec758177":"f,ax = plt.subplots(figsize=(12, 12))\nsns.heatmap(times_data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","7a7d26aa":"print(main_data.head())\nprint(eas_data.head())\nprint(s_c_data.head())\nprint(shangai_data.head())\nprint(times_data.head())","20efb983":"print(main_data.shape)\nprint(eas_data.shape)\nprint(s_c_data.shape)\nprint(shangai_data.shape)\nprint(times_data.shape)","276b37c8":"main_data.info()","15b381c2":"main_data.publications.plot(kind = 'line', color = 'g',label = 'Yay\u0131nlar',linewidth=1,alpha = 0.5,grid = True) \nmain_data.quality_of_education.plot(color = 'r',label = 'Quality Of Education',linewidth=1, alpha = 0.5,grid = True) \nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","d5d0d0bc":"# Scatter Plot \n# x = attack, y = defense\nmain_data.plot(kind='scatter', x='publications', y='quality_of_education',alpha = 0.3,color = 'blue', figsize = (15,15))\nplt.xlabel('Publications')              # label = name of label\nplt.ylabel('Quality_of_education')\nplt.title('Publications - Quality_of_education Scatter Plot')            # title = title of plot\nplt.show()","1bc57cc8":"# Histogram\n# bins = number of bar in figure\n#main_data.info()\nmain_data.quality_of_education.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","83ccecfe":"#create dictionary and look its keys and values\nmy_dictionary = {'istanbul' : 'istanbul \u00fcni','konya' : 'sel\u00e7uk \u00fcni'}\nprint(my_dictionary.keys())\nprint(my_dictionary.values())","702f5c62":"print(my_dictionary)\nmy_dictionary['istanbul'] = \"boun\"\nprint(my_dictionary)\nmy_dictionary['ankara'] =\"metu\"\nprint(my_dictionary)\ndel my_dictionary['istanbul']\nprint(my_dictionary)\nprint('istanbul' in my_dictionary)\nprint('ankara' in my_dictionary)\nmy_dictionary.clear()\nprint(my_dictionary)","e80b190c":"series = main_data['quality_of_education']        # data['Defense'] = series\nprint(type(series))\ndata_frame = main_data[['quality_of_education']]  # data[['Defense']] = data frame\nprint(type(data_frame))","23ae012d":"ort_egit_kalitesi = data_frame['quality_of_education'].mean()\nprint(ort_egit_kalitesi)\nort_egit_kalitesi = main_data['quality_of_education'].mean()\nprint(ort_egit_kalitesi)\n\nort_yayin_sayisi = main_data['publications'].mean()\nprint(ort_yayin_sayisi)","77c06c3f":"ort_ustunde_egit_kalitesi = main_data['quality_of_education'] > ort_egit_kalitesi\nort_ustunde_yayin = main_data['publications'] > ort_yayin_sayisi","9dc46a68":"main_data[ort_ustunde_egit_kalitesi & ort_ustunde_yayin]","7d4d34c7":"j = 0\nwhile j != -5 :\n    print('j is: ',j)\n    j -=1 \nprint(j,' is equal to -5')","7eca558c":"\"\"\"\nThe Fibonacci Function\nIn : \"k\" is number of list index and natural number bigger than 1 \nOut: [a0,a1,....,ak] = [1,1,...,n]\n\"\"\"\n\ndef func_fibonacci(k=2):\n    my_list = [1,1]\n    \n    for i in range(2,k):\n        my_list.append(my_list[i-1]+my_list[i-2])\n    return my_list\n\n# example:\nfunc_fibonacci(10)\n\n# [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(my_list):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in main_data[['national_rank']][0:1].iterrows():\n    print(index,\" : \",value)\n","9bcd1620":"# User Defined Function\n\ndef tuble_2():\n    \"\"\" return defined t tuble\"\"\"\n    t = (2,4,6)\n    return t\na,b,c = tuble_2()\nprint(a,b,c)","8bd4e24c":"# Scope\n\nx = 1\ndef f():\n    x = 4\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope","2496ff82":"x = 4\ndef f():\n    y = 3*x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x","db75e8b7":"import builtins\ndir(builtins)","b4c3903f":"#nested function\n\ndef cube():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 4\n        y = 5\n        z = x + y\n        return z\n    return add()**3\nprint(cube())  ","5988973c":"# default arguments\n\ndef f(a=3, b = 4, c = 2):\n    y = a + b + c\n    return a,b,c,y\nprint(f(1))\n\nprint(f(5,4,3))","6d096bd0":"# flexible arguments *args\ndef f(f_arg, *args):\n    print (\"first normal arg:\", f_arg)\n    #for i in args:\n    print(\"another arg through *argv :\", args)\nf(3)\nprint(\"\")\nf(a,b,c)\n# flexible arguments **kwargs that is dictionary\n\ndef bar(first, second, third, **kwargs):\n    if kwargs.get(\"action\") == \"sum\":\n        print(\"The sum is: %d\" %(first + second + third))\n\n    if kwargs.get(\"number\") == \"first\":\n        return first\n\nresult = bar(1, 2, 3, action = \"sum\", number = \"first\")\nprint(\"Result: %d\" %(result))","40ad201e":"# lambda function\ncube = lambda x: x**3     # where x is name of argument\nprint(cube(2))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(-1,-2,-3))","7fc3da80":"number_list = [2,3,5,7,11]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","99f1d2f0":"# iteration example\nname = \"da vinci\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration","a837a35c":"# zip example\nlist1 = [1,2,3]\nlist2 = ['a','b','c','d']\nz = zip(list1,list2)\nprint(z)\nprint(type(z))\nz_list = list(z)\n\nprint(z_list)\nprint(list(z))     # Whay this is empty?\nprint(list(zip(list1,list2)))","d3522eb5":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(list(un_list2))\n\nprint(type(un_list2))\nprint(type(list(un_list2)))","ac1cab6f":"# Example of list comprehension\nnum1 = [3,4,5]\nnum2 = [2*i + 2 for i in num1 ]  #list comprehension\nprint(num2)","bb95077c":"num3 = [6,8,11]\nnum4 = [i**2 if i == 7 else i-5 if i < 4 else i+2 for i in num3]\nprint(num4)","f439eae5":"threshold = sum(main_data.publications)\/len(main_data.publications)\nmain_data[\"publications\"] = [\"high\" if i > threshold else \"low\" for i in main_data.publications]\nmain_data.loc[:10,[\"publications\",\"publications\"]] # we will learn loc more detailed later\n\n# In this section, it's running when I try run this code block in first time. But, it is not running after that. I get it this error: TypeError: unsupported operand type(s) for +: 'int' and 'str'","fa5ec823":"num1 = int(input(\"What is your first number? \"))\nnum2 = int(input(\"What is your second number? \"))\nnum3 = int(input(\"What is your third number? \"))\nnumlist = [num1, num2, num3]\nprint(numlist)\nprint(\"Now I will remove the 3rd number\")\nprint(str(numlist.pop(2)) + \" has been removed\")\nprint(\"The list now looks like \" + str(numlist))","2bd3bf84":"main_data.head()","4895e9d1":"main_data.tail()","8149264f":"main_data.columns","635cc1dc":"main_data.shape","9aa3d18e":"main_data.info()","8f491098":"print(main_data.country.value_counts(dropna =False))","c9ec3b15":"main_data.describe()","4a855f40":"main_data.boxplot(column=['alumni_employment'],by = 'year')\nplt.show()\n\nmain_data.boxplot(column='quality_of_education',by = 'year')\nplt.show()","70da1ef4":"main_data_new = main_data[main_data.year == 2012].head()    # I only take 5 rows into new data\nmain_data_new","6a228c06":"melted = pd.melt(frame=main_data_new,id_vars = 'institution', value_vars= ['alumni_employment','publications'])\nmelted","be4df5ad":"melted.pivot(index = 'institution', columns = 'variable',values='value')","9350b5be":"data1 = main_data.head()\ndata2= main_data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","d182abcc":"data1 = main_data['alumni_employment'].head()\ndata2= main_data['publications'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) # axis = 0 : adds dataframes in row\nconc_data_col","b280a447":"main_data.dtypes","7e6586a8":"main_data.institution = main_data.institution.astype('category')\nmain_data.patents = main_data.patents.astype('float')","7757abbc":"main_data.dtypes","1a5567d6":"main_data.info()","ef1940e9":"main_data.country.value_counts(dropna =False)","2176bfcc":"main_data_1=main_data\nmain_data_1.country.dropna(inplace = True)","670f11dd":"assert 1==1","c8eba4fe":"assert  main_data.country.notnull().all()   # return nothing","dc397b8b":"main_data.country.fillna('empty',inplace = True)","8e8396ee":"assert  main_data.country.notnull().all()   # return nothing","c04942eb":"university = [\"METU\",\"BOUN\"]\npopulation = [\"1100\",\"1200\"]\nlist_label = [\"university\",\"population\"]\nlist_col = [university,population]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","9019260b":"df[\"department\"] = [\"math\", \"math\"]\ndf","4d492570":"df[\"student\"] = 0\ndf","3f2f705f":"main_data.info()","45423f05":"main_data_1 = main_data.loc[:,[\"quality_of_faculty\",\"publications\",\"broad_impact\"]]\nmain_data_1.plot()","dbae1410":"main_data_1.plot(subplots = True)\nplt.show()","23d7487d":"main_data_1.plot(kind = \"scatter\",x=\"broad_impact\",y = \"publications\")\nplt.show()","07434dd1":"main_data_1.plot(kind = \"hist\",y = \"broad_impact\",bins = 50,range= (0,250),normed = True)","3397b3b3":"fig, axes = plt.subplots(nrows=2,ncols=1)\nmain_data_1.plot(kind = \"hist\",y = \"broad_impact\",bins = 50,range= (0,250),normed = True,ax = axes[0])\nmain_data_1.plot(kind = \"hist\",y = \"broad_impact\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","e0b89cf8":"main_data.describe()","36ace01f":"time_list = [\"2018-03-08\",\"2018-04-12\"]\nprint(type(time_list[1])) \ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","b19e301a":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nmain_data_2 = main_data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\nmain_data_2[\"date\"] = datetime_object\n# lets make date as index\nmain_data_2= main_data_2.set_index(\"date\")\nmain_data_2 ","c7999b25":"print(main_data_2.loc[\"1993-03-16\"])\nprint(main_data_2.loc[\"1992-03-10\":\"1993-03-16\"])","037ff20b":"main_data_2.resample(\"A\").mean()","509739b2":"main_data_2.resample(\"M\").mean()","5699b69c":"main_data_2.resample(\"M\").first().interpolate(\"linear\")","0765c7de":"main_data_2.resample(\"M\").mean().interpolate(\"linear\")","ef61ada1":"main_data = pd.read_csv('..\/input\/cwurData.csv')\n#main_data= main_data.set_index(\"#\")   # this code doesn't work!\nmain_data.index +=1   # This code works\nmain_data.head()","828aab61":"main_data.country[0]","3728979c":"main_data.loc[3, \"institution\"]","ee805cf8":"main_data[[\"institution\", \"country\"]]","bc4b0d67":"print(type(main_data[\"country\"]))     # series\nprint(type(main_data[[\"country\"]]))   # data frames","ad2fa67c":"main_data.loc[0:10, \"world_rank\":\"quality_of_education\"]","9cfabc9e":"main_data.loc[10:0:-1, \"world_rank\":\"quality_of_education\"]","3073d90a":"main_data.loc[0:10, \"quality_of_education\":]","669b8b4a":"boolean = main_data.quality_of_education > 25\nmain_data[boolean]","98b4a868":"first_filter = main_data.quality_of_education > 350\nsecond_filter = main_data.publications > 990\nmain_data[first_filter & second_filter]","2cfb55bf":"main_data.institution[first_filter & second_filter]","6e97a641":"def div(n):\n    return n\/2\nmain_data.quality_of_education.apply(div)","d93003a2":"main_data.quality_of_education.apply(lambda n : n\/2)","405da1a0":"main_data[\"education_score\"] = main_data.quality_of_education + main_data.score\nmain_data.head()","0af4ea29":"print(main_data.index.name)\n\nmain_data.index.name = \"index_name\"\nmain_data.head()","3cbc45a1":"main_data.head()\n\nmain_data_2 = main_data.copy()\nmain_data_2.index = range(100,2300,1)\nmain_data_2.head()","ae0e5516":"main_data_2.index +=1","3e18d6cd":"main_data_2.index","9bc89c97":"main_data.head()\nmain_data_3 = main_data.set_index([\"country\",\"institution\"]) \nmain_data_3.head(100)","9ca54a7b":"main_data= main_data.set_index(\"#\")","f582fd64":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\",\"C\",\"C\"],\"gender\":[\"F\",\"M\",\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9,20,35],\"age\":[15,4,72,65,58,17]}\ndf = pd.DataFrame(dic)\ndf","9cdb1592":"df.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")","ab91a7b8":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1","a7117be8":"df1.unstack(level=0)","f8b7f74d":"df1.unstack(level=1)","8d85d13b":"df2 = df1.swaplevel(0,1)\ndf2","ed8afc6f":"pd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])","d46cac7b":"df","ce5a0047":"df.groupby(\"treatment\").mean()","5b653964":"df.groupby(\"treatment\").age.max() ","39ff0187":"df.groupby(\"gender\").age.min() ","9c7056cd":"df.info()","1ef5a144":"**2. PYTHON DATA SCIENCE TOOLBOX**","a7bd994a":"STATISTICAL EXPLORATORY DATA ANALYSIS","12bc8ec3":"*WHILE and FOR LOOPS*","2e054219":"Exploratary Data Analysis","cbe3e7c0":"TRANSFORMING DATA","ceff0015":"*PANDAS*","ebc0c0ee":"**List Comprehension**","e92a4628":"INDEXING PANDAS TIME SERIES","664bda04":"**PANDAS FOUNDATION**","1f762dba":"Index Objects and Labeled Data","1b7bfb7b":"*DICTIONARY*","3916b598":"Indexing Data Frames","d346f768":"Manipulating Data Frames with Pandas","91132c9d":"VISUAL EXPLORATORY DATA ANALYSIS","b6a9f753":"BUILDING DATA FRAMES FROM SCRATCH","a3871bf5":"** 1. INTRODUCTION TO PYTHON**","4ff1ce11":"Categoricals And GroupBy","c30a0d92":"Pivoting Data Frames","52e4751e":"**Arguments**","d7b8bb25":"Melting Data Frames","0477db61":"Melting","dcf7fdfa":"MISSING DATA and TESTING WITH ASSERT","6877212b":"**CLEANING DATA**","adf8df0d":"*MATPLOTLIB*","e8fd22ec":"Slicing Data Frames","799f47b2":"Data Types"}}