{"cell_type":{"3792c458":"code","cc5979c9":"code","aa9bfb2e":"code","887ca415":"code","b3c9ede9":"code","8caef005":"code","887c2972":"code","5a99bd27":"code","59a2f653":"code","6a003c7e":"code","90034d9b":"code","fed97779":"code","5050f18b":"code","eae71421":"code","9ad88139":"code","c2789791":"code","7c99c33c":"code","bb3266d6":"code","23c32bdd":"code","78a9f99d":"code","ce41d5e2":"code","5a049722":"code","7fae44a6":"code","0988b04a":"code","ede0c650":"code","e05807f3":"code","160cee29":"code","ff2e967d":"code","5b0a1b02":"code","1412c744":"code","cf6939c1":"code","218e297b":"code","21354fcf":"code","c6d6150b":"code","b91fc9f1":"code","62e02752":"code","346e6d39":"code","f9765daf":"code","1d2fc49c":"code","c6764edb":"code","58e0061b":"code","c9865427":"code","41f852f8":"code","688faa97":"code","c3821025":"code","025de617":"code","921fcddc":"code","7d369661":"code","3d8508a5":"code","3e80303b":"code","ca1b7b71":"code","56ac164a":"code","c591e989":"code","4b2f0478":"code","e97892c6":"code","f00b92ce":"code","d26826fc":"code","696ac1d0":"markdown","36628377":"markdown","1745aa1a":"markdown","c7535b45":"markdown","fb427b27":"markdown","facf9c41":"markdown","02694af5":"markdown","267e0ba4":"markdown","c1d7e8c3":"markdown","c19c0d12":"markdown","6c1f035e":"markdown","93beaef2":"markdown","576c1455":"markdown","0c94cd3f":"markdown","a21501c8":"markdown","23d88bb2":"markdown","d3705738":"markdown","f310432a":"markdown","072a730e":"markdown","d1f7f189":"markdown","b9d8f355":"markdown","8075a4cd":"markdown","7352c5b6":"markdown","53b75190":"markdown","6679a0b2":"markdown","d87e80ff":"markdown","12e5a69f":"markdown","f68019cc":"markdown","06401b71":"markdown","7e47f3d3":"markdown","93589b20":"markdown","69ec23b5":"markdown","932ae1fb":"markdown","a61f576b":"markdown","6e3ab817":"markdown","933d105d":"markdown","3ae2dc05":"markdown","9c9e95a4":"markdown","9e9fe40e":"markdown","1f8701a2":"markdown","e1490deb":"markdown","f8e6d3e6":"markdown","77117af4":"markdown","e0e2558c":"markdown","6d84268c":"markdown","20c732fd":"markdown","7971e65e":"markdown","77528945":"markdown","9a6dbb3f":"markdown","f7981a08":"markdown","59a3eb38":"markdown","59fdbe46":"markdown","22d4f6ce":"markdown","764f7181":"markdown","39337841":"markdown","7a3e49e8":"markdown","45b09cab":"markdown","ca539e0b":"markdown","b432002b":"markdown","f9f87f49":"markdown","cecd004f":"markdown","064d230e":"markdown","e40c9909":"markdown","2000f4e3":"markdown","5e67cda6":"markdown","157d8ace":"markdown","4edaeeed":"markdown","bbc53110":"markdown","861cffdf":"markdown","b4f94fa3":"markdown","48e8b021":"markdown","3f659351":"markdown","e45b7a2d":"markdown","d5f37081":"markdown","1781f9c6":"markdown","9fd75639":"markdown","f01c25d2":"markdown","57bd5848":"markdown","7137bdce":"markdown","c4ceff49":"markdown","c01fdadd":"markdown"},"source":{"3792c458":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas.core.dtypes.common import is_numeric_dtype\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm, skew\n\n# \u8bbe\u7f6e\u56fe\u7247\u4e2d\u6587\u5b57\u7b26\u663e\u793a\nplt.rcParams['font.family'] = ['sans-serif']\nplt.rcParams['font.sans-serif'] = ['SimHei']\n\ndata_train = pd.read_csv('..\/input\/train.csv')\ndata_test = pd.read_csv('..\/input\/test.csv')","cc5979c9":"data_train.head(5)","aa9bfb2e":" data_train.columns.values","887ca415":"data_train.shape","b3c9ede9":"sns.set()\n\nfor i in range(9):\n    sns.pairplot(data_train, x_vars=data_train.columns.values[10*i:10*(i+1)], y_vars=\"SalePrice\")\nplt.show()","8caef005":"#correlation matrix\ncorrmat = data_train.corr()\ncorrmat.sort_values('SalePrice',ascending=False).index\nf, ax = plt.subplots(figsize=(12, 12))\nsns.heatmap(corrmat, vmax=.8, square=True);","887c2972":"#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\n# print(corrmat.sort_values('SalePrice',ascending=False).index)\ncm = np.corrcoef(data_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","5a99bd27":"print(corrmat.sort_values('SalePrice',ascending=False).index)","59a2f653":"fig, ax = plt.subplots()\nax.scatter(x = data_train['GrLivArea'], y = data_train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","6a003c7e":"data_train = data_train.drop(data_train[(data_train['GrLivArea']>4000) & (data_train['SalePrice']<300000)].index) # \u5220\u9664\u5f02\u5e38\u503c\n","90034d9b":"fig, ax = plt.subplots()\nax.scatter(x = data_train['TotalBsmtSF'], y = data_train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('TotalBsmtSF', fontsize=13)\nplt.show()","fed97779":" # \u6570\u5b57\u578b\u79bb\u6563\u53d8\u91cf\ndata = pd.concat([data_train['SalePrice'], data_train[\"OverallQual\"]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='OverallQual', y=\"SalePrice\", data=data)\n# fig.axis(ymin=0, ymax=800000);","5050f18b":" # \u6570\u5b57\u578b\u79bb\u6563\u53d8\u91cf\ndata = pd.concat([data_train['SalePrice'], data_train['YearBuilt']], axis=1)\nf, ax = plt.subplots(figsize=(16, 8))\nfig = sns.boxplot(x='YearBuilt', y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nplt.xticks(rotation=90);","eae71421":" data_train['SalePrice'].describe()","9ad88139":"sns.distplot(data_train['SalePrice']);","c2789791":"print(\"Skewness: %f\" % data_train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % data_train['SalePrice'].kurt())","7c99c33c":"data_train[\"SalePrice\"] = np.log1p(data_train[\"SalePrice\"])\nsns.distplot(data_train['SalePrice'],fit=norm );","bb3266d6":"ntrain = data_train.shape[0]\nntest = data_test.shape[0]\ny_train = data_train.SalePrice.values\nall_data = pd.concat((data_train, data_test)).reset_index(drop=True)\nx_all = all_data.drop(['SalePrice',\"Id\"], axis=1, inplace=True) # \u5220\u9664'SalePrice',\"Id\"\u5c5e\u6027  \u6211\nprint(\"all_data size is : {}\".format(all_data.shape))","23c32bdd":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()  # \u8fd9\u91cc\u53ea\u663e\u793a\u4e865\u6761","78a9f99d":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=all_data_na.index, y=all_data_na)\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","ce41d5e2":"for i in [\"PoolQC\", \"MiscFeature\",\"Alley\",\"Fence\",\"FireplaceQu\"]:\n    all_data[i] = all_data[i].fillna(\"None\")\nprint(all_data.shape)","5a049722":"all_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))","7fae44a6":"for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond','GarageYrBlt'):\n    all_data[col] = all_data[col].fillna('None')","0988b04a":"for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')","ede0c650":"all_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)","e05807f3":"for col in ('MSZoning', 'Functional', 'Electrical', 'GarageCond','Exterior1st','Exterior2nd','SaleType',\"KitchenQual\" ):\n    all_data[col] = all_data[col].fillna(all_data[col].mode()[0])\n    print(all_data[col].mode()[0])\nprint(all_data.shape)","160cee29":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)","ff2e967d":"for col in ( 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)\nprint(all_data.shape)","5b0a1b02":"all_data = all_data.drop(['Utilities'], axis=1)\nprint(all_data.shape)","1412c744":"#Check remaining missing values if any \nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","cf6939c1":"\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\n\n#Changing OverallCond into a categorical variable\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n\n#Year and month sold are transformed into categorical features.\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","218e297b":"all_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']","21354fcf":"numeric_feats = all_data.dtypes[ all_data.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","c6d6150b":"from scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\n\nskewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\n\n\nfor i in skewness.index:\n    all_data[i] = boxcox1p(all_data[i], boxcox_normmax(all_data[i] + 1))\nprint(all_data.shape)","b91fc9f1":"all_data = pd.get_dummies(all_data).reset_index(drop=True)\nprint(all_data.shape)","62e02752":"X_train = all_data.iloc[:ntrain]\nX_test = all_data.iloc[ntrain :]\nprint(X_train.shape,X_test.shape,y_train.shape)","346e6d39":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","f9765daf":"n_folds = 12\nkf = KFold(n_splits=12, random_state=42, shuffle=True)\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\n\ndef cv_rmse(model, X=X_train):\n    rmse = np.sqrt(-cross_val_score(model, X_train.values, y_train,\n                                    scoring=\"neg_mean_squared_error\", cv=kf))\n    return (rmse)\n","1d2fc49c":"from lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import Ridge, RidgeCV\nfrom sklearn.svm import SVR\nfrom mlxtend.regressor import StackingCVRegressor\nlightgbm = LGBMRegressor(objective='regression', \n                       num_leaves=6,\n                       learning_rate=0.01, \n                       n_estimators=7000,\n                       max_bin=200, \n                       bagging_fraction=0.8,\n                       bagging_freq=4, \n                       bagging_seed=8,\n                       feature_fraction=0.2,\n                       feature_fraction_seed=8,\n                       min_sum_hessian_in_leaf = 11,\n                       verbose=-1,\n                       random_state=42)\n\n# XGBoost Regressor\nxgboost = XGBRegressor(learning_rate=0.01,\n                       n_estimators=6000,\n                       max_depth=4,\n                       min_child_weight=0,\n                       gamma=0.6,\n                       subsample=0.7,\n                       colsample_bytree=0.7,\n                       objective='reg:squarederror',\n                       nthread=-1,\n                       scale_pos_weight=1,\n                       seed=27,\n                       reg_alpha=0.00006,\n                       random_state=42)\n\n# Ridge Regressor\nridge_alphas = [1e-15, 1e-10, 1e-8, 9e-4, 7e-4, 5e-4, 3e-4, 1e-4, 1e-3, 5e-2, 1e-2, 0.1, 0.3, 1, 3, 5, 10, 15, 18, 20, 30, 50, 75, 100]\nridge = make_pipeline(RobustScaler(), RidgeCV(alphas=ridge_alphas, cv=kf))\n\n# Support Vector Regressor\nsvr = make_pipeline(RobustScaler(), SVR(C= 20, epsilon= 0.008, gamma=0.0003))\n\nENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\n\nlasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\n\nstack_gen = StackingCVRegressor(regressors=(xgboost, lightgbm, svr, ridge, ENet, lasso),\n                                meta_regressor=xgboost,\n                                use_features_in_secondary=True)","c6764edb":"scores = {}\n# # \u6162\n# score = cv_rmse(lightgbm)\n# print(\"lightgbm: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\n# scores['lgb'] = (score.mean(), score.std())","58e0061b":"# score = cv_rmse(xgboost)\n# # \u5f88\u6162\n# print(\"xgboost: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\n# scores['xgb'] = (score.mean(), score.std())","c9865427":"score = cv_rmse(svr)\nprint(\"SVR: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['svr'] = (score.mean(), score.std())","41f852f8":"# # \u6bd4\u8f83\u6162, \u8981\u8fdb\u884c\u7f51\u683c\u641c\u7d22,\n# score = cv_rmse(ridge)\n# print(\"ridge: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\n# scores['ridge'] = (score.mean(), score.std())","688faa97":"score = cv_rmse(ENet)\nprint(\"ENet: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['ENet'] = (score.mean(), score.std())","c3821025":"score = cv_rmse(lasso)\nprint(\"lasso: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['lasso'] = (score.mean(), score.std())","025de617":"# \u8d85\u7ea7\u6162\nprint('stack_gen')\nstack_gen_model = stack_gen.fit(np.array(X_train), np.array(y_train))","921fcddc":"# \u6162\nprint('lightgbm')\nlgb_model_full_data = lightgbm.fit(X_train, y_train)","7d369661":"# \u6162\nprint('xgboost')\nxgb_model_full_data = xgboost.fit(X_train, y_train)","3d8508a5":"print('Svr')\nsvr_model_full_data = svr.fit(X_train, y_train)","3e80303b":"print('Ridge')\nridge_model_full_data = ridge.fit(X_train, y_train)","ca1b7b71":"print('ENet')\nrf_model_full_data = ENet.fit(X_train, y_train)","56ac164a":"print('lasso')\ngbr_model_full_data = lasso.fit(X_train, y_train)","c591e989":"def blended_predictions(X):\n    return ((0.1 * ridge_model_full_data.predict(X)) + \\\n            (0.2 * svr_model_full_data.predict(X)) + \\\n            (0.1 * gbr_model_full_data.predict(X)) + \\\n            (0.1 * xgb_model_full_data.predict(X)) + \\\n            (0.1 * lgb_model_full_data.predict(X)) + \\\n            (0.05 * rf_model_full_data.predict(X)) + \\\n            (0.35 * stack_gen_model.predict(np.array(X))))","4b2f0478":"blended_score = rmsle(y_train, blended_predictions(X_train))\nscores['blended'] = (blended_score, 0)\nprint('RMSLE score on train data:')\nprint(blended_score)","e97892c6":"submission = pd.read_csv(\"..\/input\/sample_submission.csv\")\nsubmission.shape\nsubmission.head()","f00b92ce":"submission.iloc[:,1] = np.floor(np.expm1(blended_predictions(X_test)))\nsubmission.head()","d26826fc":"submission.to_csv(\"submission_regression.csv\", index=False)","696ac1d0":"\u8fd9\u91cc\u6709\u4e2a\u5c0f**\u63d0\u793a**:\n\n\u5728\u5904\u7406\u7f3a\u5931\u503c\u65f6,\u5efa\u8bae\u5c06\u6240\u6709\u6570\u636e\u5168\u90e8\u8fdb\u884c\u5206\u6790,\u5373\u5c06\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u7684\u6240\u6709\u6570\u636e\u653e\u5728\u4e00\u8d77,\u7ec4\u6210\u5168\u90e8\u7684\u6570\u636e\u96c6,\u5e76\u5206\u6790\u6570\u636e\u7684\u7f3a\u5931\u60c5\u51b5\n\n\u5982\u679c\u4e0d\u8fd9\u6837\u505a\u7684\u8bdd,\u5c31\u4f1a\u51fa\u73b0\u6709\u4e9b\u5c5e\u6027\u5728\u8bad\u7ec3\u96c6\u6ca1\u6709\u7f3a\u5931,\u4f46\u5728\u6d4b\u8bd5\u96c6\u5374\u51fa\u73b0\u4e86\u7f3a\u5931,\u4ece\u800c\u53ef\u80fd\u4f7f\u7a0b\u5e8f\u51fa\u73b0\u5f02\u5e38.","36628377":"\u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0\u5f88\u591a\u6709\u610f\u601d\u7684\u89c4\u5f8b,\u8fd9\u91cc\u4e3e\u51e0\u4e2a\u4f8b\u5b50\n\n1. \u53ef\u4ee5\u89c2\u5bdf\u5230\u6709\u4e9b\u5c5e\u6027\u548c\u9884\u6d4b\u503c\u57fa\u672c\u5c5e\u4e8e\u7ebf\u6027\u5173\u7cfb,\u8fd9\u4e9b\u5c5e\u6027\u662f\u5f88\u597d\u7684\u5c5e\u6027:\n\n \u5982:grlivarea,TotalBsmtSF\u7b49\u7b49\n \n2. \u5f53\u7136\u6709\u4e9b\u79bb\u6563\u578b\u53d8\u91cf\u4e5f\u6709\u5f88\u5f3a\u7684\u89c4\u5f8b\u6027,\u8fd9\u4e9b\u4e5f\u548c\u9884\u6d4b\u503c\u603b\u4f53\u4e0a\u5448\u7ebf\u6027\u5173\u7cfb\n\n  \u5982:OverallQual YearBuilt\u7b49\u7b49\n  \n \n3. \u5982Utilities\u5c5e\u6027,\u7edd\u5927\u90e8\u5206\u7684\u6837\u672c\u5c5e\u6027\u503c\u90fd\u76f8\u540c,\u8bf4\u660e\u8be5\u7279\u5f81\u7684\u7528\u5904\u4e0d\u5927\n\n4. \u5982PoolQc\u5c5e\u6027,\u7f3a\u5931\u503c\u5f88\u591a,\u56fe\u4e0a\u53ea\u6709\u51e0\u4e2a\u70b9\n \n","1745aa1a":"# \u4e8c.\u4ea4\u53c9\u9a8c\u8bc1,\u6a21\u578b\u5efa\u7acb\u4e0e\u6a21\u578b\u878d\u5408","c7535b45":"\u56fe\u4e2d\u9ed1\u8272\u7684\u7ebf\u662f\u6b63\u6001\u5206\u5e03\u66f2\u7ebf,\u84dd\u8272\u7684\u7ebf\u662f\u62df\u5408\u540e\u7684\u66f2\u7ebf\n\n\u73b0\u5728\uff0c\u6b6a\u659c\u5f97\u5230\u4e86\u7ea0\u6b63\uff0c\u6570\u636e\u770b\u8d77\u6765\u66f4\u7b26\u5408\u6b63\u6001\u5206\u5e03\u3002","fb427b27":"\u6bd4\u8f83\u660e\u663e\u7684\u5f02\u5e38\u70b9\u6709:\n- \u53f3\u4e0b\u89d2\u4e24\u4e2a\u70b9,\u660e\u663e\u4e0d\u7b26\u5408\u89c4\u5f8b,\u6211\u4eec\u5c06\u5176\u5220\u9664\n- \u53f3\u4e0a\u89d2\u4e24\u4e2a\u70b9,\u867d\u7136\u4e0d\u662f\u5f88\u7b26\u5408\u89c4\u5f8b,\u4f46\u56e0\u4e3a\u7b26\u5408\u5927\u4f53\u4e0a\u7684\u8d8b\u52bf,\u6211\u4eec\u5c06\u5176\u4fdd\u7559\n\n\u6ce8\u610f: \u5220\u9664\u6389\u6781\u7aef\u7684\u5f02\u5e38\u70b9\u548c\u4fdd\u7559\u4e0d\u662f\u90a3\u4e48\u5f02\u5e38\u7684\u70b9\u90fd\u662f\u6709\u597d\u5904\u7684,\u53ef\u4ee5\u589e\u52a0\u7a0b\u5e8f\u7684\u5065\u58ee\u6027.\n\n> \u8bad\u7ec3\u6570\u636e\u4e2d\u53ef\u80fd\u8fd8\u6709\u5176\u4ed6\u5f02\u5e38\u503c\u3002\u4f46\u662f\uff0c\u5982\u679c\u5728\u6d4b\u8bd5\u6570\u636e\u4e2d\u4e5f\u5b58\u5728\u5f02\u5e38\u503c\uff0c\u90a3\u4e48\u5220\u9664\u6240\u6709\u5f02\u5e38\u503c\u53ef\u80fd\u4f1a\u4e25\u91cd\u5f71\u54cd\u6211\u4eec\u7684\u6a21\u578b\u3002\n> \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u5c06\u5b83\u4eec\u5168\u90e8\u5220\u9664\uff0c\u800c\u662f\u8bbe\u6cd5\u4f7f\u6211\u4eec\u7684\u4e00\u4e9b\u6a21\u578b\u5728\u5b83\u4eec\u4e0a\u9762\u4fdd\u6301\u5065\u58ee\u3002","facf9c41":"## 3.\u5206\u6790\u9884\u6d4b\u503c\"SalePrice\"\u7684\u5206\u5e03\u89c4\u5f8b","02694af5":"\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u5f02\u5e38\u7684\u70b9\n- \u6709\u5f88\u591a\u6570\u503c\u4e3a0\u7684\u70b9,\u4f46\u8fd9\u4e9b\u70b9\u5f88\u53ef\u80fd\u662f\u7f3a\u5931\u503c,\u4e0d\u5c5e\u4e8e\u5f02\u5e38\u70b9\n- \u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u5220\u9664\u4e00\u4e9b\u70b9\uff08\u4f8b\u5982\uff0ctotalbsmtsf>3000\u7684\u70b9\uff09\uff0c\u4f46\u6211\u8ba4\u4e3a\u8fd9\u4e0d\u503c\u5f97,\u56e0\u4e3a\u8fd9\u4e9b\u70b9\u4e5f\u662f\u7b26\u5408\u6574\u4f53\u8d8b\u52bf\u7684","267e0ba4":"\u8fd9\u91cc\u6211\u5c06\u6709\u4e9b\u6a21\u578b\u7684\u4ea4\u53c9\u9a8c\u8bc1\u7684\u4ee3\u7801\u6ce8\u91ca\u6389,\u56e0\u4e3a\u8fd0\u884c\u8d77\u6765\u597d\u6162.\n\n","c1d7e8c3":"\u770b\u770bYearBuilt\u4e0eSalePrice\u7684\u5173\u7cfb","c19c0d12":"# \u623f\u4ef7\u9884\u6d4b\n\n\n## NianGao\n\n**2019.7**\n\n**\u672ckernel\u501f\u9274\u4e8e\u4ee5\u4e0b\u4e09\u4e2a\u5199\u7684\u5f88\u597d\u7684kernel**\n- https:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python#COMPREHENSIVE-DATA-EXPLORATION-WITH-PYTHON  \n- https:\/\/www.kaggle.com\/lavanyashukla01\/how-i-made-top-0-3-on-a-kaggle-competition   \n- https:\/\/www.kaggle.com\/serigne\/stacked-regressions-top-4-on-leaderboard    ","6c1f035e":"\u5bf9\u6700\u7ec8\u9884\u6d4b\u7684\u6a21\u578b\u5f97\u5206\u8fdb\u884c\u4e00\u4e2a\u52a0\u6743\n\n\u8fd9\u91cc\u7684\u6743\u91cd\u6211\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u8ba1\u7b97\u51fa\u6765\u7684","93beaef2":"## 3. \u9884\u6d4b","576c1455":"\u5bf9\u4e8e\u79bb\u6563\u578b\u53d8\u91cf,\u6211\u4eec\u4f7f\u7528\u7bb1\u5f62\u56fe\u6765\u8fdb\u884c\u89c2\u5bdf\n\n> \u7bb1\u5f62\u56fe: \u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u3001\u4e2d\u4f4d\u6570\u548c\u4e24\u4e2a\u56db\u5206\u4f4d\u6570\uff1b\u7136\u540e\uff0c \u8fde\u63a5\u4e24\u4e2a\u56db\u5206\u4f4d\u6570\u753b\u51fa\u7bb1\u5b50\uff1b\u518d\u5c06\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e0e\u7bb1\u5b50\u76f8\u8fde\u63a5\uff0c\u4e2d\u4f4d\u6570\u5728\u7bb1\u5b50\u4e2d\u95f4\n> ![\u7bb1\u5f62\u56fe](https:\/\/gss0.bdstatic.com\/94o3dSag_xI4khGkpoWK1HF6hhy\/baike\/c0%3Dbaike80%2C5%2C5%2C80%2C26\/sign=4e5ee1bdacaf2eddc0fc41bbec796a8c\/aa18972bd40735fade9ad1029e510fb30f240826.jpg)\n\n\u53ef\u4ee5\u770b\u51fa,\u5176\u4e0a\u5347\u8d8b\u52bf\u6709\u4e9b\u7c7b\u4f3c\u4e8e\u6307\u6570\u5f62\u5f0f","0c94cd3f":"\u6ce8: \n\n\u5bf9\u4e8e\u6a21\u578bRidgeCV,SVR,ElasticNet,Lasso\u8981\u8fdb\u884c\u6570\u636e\u9884\u5904\u7406,\n\n\u7c7b\u4f3c\u4e8e\u6570\u636e\u5f52\u4e00\u5316,\u8fd9\u91cc\u4f7f\u7528RobustScaler,RobustScaler\u53ef\u4ee5\u4f7f\u6a21\u578b\u5177\u6709\u66f4\u5f3a\u7684\u5065\u58ee\u6027","a21501c8":"\u770b\u770bGrLivArea\u4e0eSalePrice\u7684\u5173\u7cfb","23d88bb2":"\u9996\u5148\u6211\u4eec\u5bfc\u5165\u5fc5\u8981\u7684\u5305\u5e76\u52a0\u8f7d\u6570\u636e","d3705738":"\u53ef\u4ee5\u770b\u51fa,\u6709\u4e9b\u503c\u7f3a\u5931\u7684\u7279\u522b\u591a,\u4f46\u8868\u683c\u8fd8\u4e0d\u591f\u76f4\u89c2,\u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528\u8fdb\u884c\u53ef\u89c6\u5316\u5206\u6790","f310432a":"\u5bf9\u4e8eGarageArea\u548cGarageCars\u4f7f\u75280\u586b\u8865,\u4ee3\u8868\u6ca1\u6709Garage","072a730e":"\u8ba9\u6211\u4eec\u7b80\u5355\u7684\u770b\u4e00\u4e0b\u6570\u636e","d1f7f189":"# \u524d\u8a00\n\u9996\u5148,\u5728\u5f00\u59cb\u4e4b\u524d,\u6211\u4eec\u8981\u5173\u6ce8\u4ee5\u4e0b\u5173\u952e\u70b9:\n- \u8fd9\u662f\u4e00\u4e2a\u56de\u5f52\u4efb\u52a1\u8fd8\u662f\u4e00\u4e2a\u5206\u7c7b\u4efb\u52a1?  \u56de\u5f52\u4efb\u52a1\n- \u54ea\u4e9b\u7279\u5f81\u662f\u79bb\u6563\u7684,\u54ea\u4e9b\u7279\u5f81\u662f\u8fde\u7eed\u7684?\n- \u623f\u5c4b\u7684\u552e\u4ef7\u5206\u5e03\u60c5\u51b5\u5982\u4f55?\n- \u662f\u5426\u5b58\u5728\u7f3a\u5931\u503c?\u7f3a\u5931\u503c\u5728\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u7684\u5206\u5e03\u662f\u600e\u4e48\u6837\u7684?\u7f3a\u5931\u503c\u5982\u4f55\u5904\u7406?\n- \u79bb\u6563\u578b\u53d8\u91cf\u5982\u4f55\u5904\u7406?\n- \u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\n- \u4f7f\u7528\u6a21\u578b\u878d\u5408\n- \u7279\u5f81\u4e0e\u7279\u5f81\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u600e\u4e48\u6837\u7684?\u7279\u5f81\u4e0e\u9884\u6d4b\u503c\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u600e\u4e48\u6837\u7684?\n- \u662f\u5426\u5b58\u5728\u5f02\u5e38\u70b9,\u5f02\u5e38\u70b9\u5982\u4f55\u5904\u7406?","b9d8f355":"\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u5206\u6790\u8fd9\u5176\u4e2d\u6700\u91cd\u8981\u7684\u4e00\u4e9b\u7279\u5f81","8075a4cd":"\u5bf9\u4e8e\u63a5\u4e0b\u6765\u4e24\u4e2aMasVn,\u4ecd\u7136\u586b\u5145none","7352c5b6":"\u6570\u636e\u96c6\u5168\u90e8\u7279\u5f81\u5982\u4e0b:","53b75190":"\n\u53ef\u4ee5\u53d1\u73b0\u6570\u636e\u7684\u5206\u5e03\u7c7b\u4f3c\u4e8e\u6b63\u6001\u5206\u5e03,\u4f46\u8be5\"\u6b63\u6001\u5206\u5e03\"\u662f\u4e00\u4e2a\u504f\u659c\u7684\u6b63\u6001\u5206\u5e03.\n\u200b\n\u4e3a\u4e86\u8861\u91cf\u6570\u503c\u7684\u503e\u659c\u7a0b\u5ea6,\u8fd9\u91cc\u6709\u5cf0\u5ea6\u548c\u504f\u5ea6\u4e24\u4e2a\u6982\u5ff5\n\u200b\n > \u5cf0\u5ea6\uff1a\u5cf0\u5ea6\uff08Kurtosis\uff09\u662f\u63cf\u8ff0\u67d0\u53d8\u91cf\u6240\u6709\u53d6\u503c\u5206\u5e03\u5f62\u6001\u9661\u7f13\u7a0b\u5ea6\u7684\u7edf\u8ba1\u91cf\u3002\n > \u6b63\u6001\u5206\u5e03\u7684\u5cf0\u5ea6\u4e3a0\n > \u82e5\u5cf0\u5ea6>0\uff0c\u5206\u5e03\u7684\u5cf0\u6001\u9661\u5ced\uff08\u9ad8\u5c16\uff09\uff1b\n > \u82e5\u5cf0\u5ea6<0\uff0c\u5206\u5e03\u7684\u5cf0\u6001\u5e73\u7f13\uff08\u77ee\u80d6\uff09\uff1b\n \n >\u504f\u5ea6\uff1a\u504f\u5ea6\uff08Skewness\uff09\u662f\u63cf\u8ff0\u67d0\u53d8\u91cf\u53d6\u503c\u5206\u5e03\u5bf9\u79f0\u6027\u7684\u7edf\u8ba1\u91cf\u3002\n >\u6b63\u6001\u5206\u5e03\u7684\u504f\u5ea6\u4e3a0\n >\u504f\u5ea6>0 \u957f\u5c3e\u5df4\u62d6\u5728\u53f3\u8fb9\u3002\n >\u504f\u5ea6<0 \u957f\u5c3e\u5df4\u62d6\u5728\u5de6\u8fb9\u3002\n >\u540c\u65f6\u504f\u5ea6\u7684\u7edd\u5bf9\u503c\u8d8a\u5927\uff0c\u8bf4\u660e\u5206\u5e03\u7684\u504f\u79fb\u7a0b\u5ea6\u8d8a\u4e25\u91cd\u3002\n >\n >\u3010\u6ce8\u610f\u3011\u6570\u636e\u5206\u5e03\u7684\u5de6\u504f\u6216\u53f3\u504f\uff0c\u6307\u7684\u662f\u6570\u503c\u62d6\u5c3e\u7684\u65b9\u5411\uff0c\u800c\u4e0d\u662f\u5cf0\u7684\u4f4d\u7f6e\u3002\n \n \u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u5b83\u7684\u504f\u5ea6\u548c\u5cf0\u5ea6","6679a0b2":"## 2. \u5206\u6790\"\u7279\u5f81\u4e0e\u7279\u5f81\u4e4b\u95f4\u7684\u5173\u7cfb\"","d87e80ff":"### \u5bf9\u79bb\u6563\u578b\u53d8\u91cf\u8fdb\u884chot\u7f16\u7801","12e5a69f":"\u8fd9\u91cc\u6211\u4eec\u8981\u77e5\u9053,\u6570\u636e\u7279\u5f81\u4e4b\u95f4\u7684\u4e00\u4e9b\u57fa\u672c\u77e5\u8bc6\n- \u7279\u5f81\u4e0e\u7279\u5f81\u4e4b\u95f4\u7684\u7ebf\u6027\u76f8\u5173\u5ea6\u5c3d\u53ef\u80fd\u5c0f,\u56e0\u4e3a\u5982\u679c\u4e24\u4e2a\u7279\u5f81\u7ebf\u6027\u76f8\u5173,\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u7279\u5f81,\u5373\u4e24\u4e2a\u7279\u5f81\u91cc\u6709\u4e00\u4e2a\u7279\u5f81\u6ca1\u6709\u7528\u51fa\n- \u7279\u5f81\u4e0e\u9884\u6d4b\u503c\u7684\u76f8\u5173\u5ea6\u5c3d\u53ef\u80fd\u5927,\u56e0\u4e3a\u76f8\u5173\u5ea6\u8d8a\u9ad8,\u4ee3\u8868\u5b83\u8d8a\u662f\u4e00\u4e2a\u597d\u7279\u5f81","f68019cc":"\u6700\u7ec8\u6a21\u578b\u5f97\u5206","06401b71":"\u7279\u5f81\u77e9\u9635\u53ef\u4ee5\u603b\u4f53\u4e0a\u770b\u51fa\u7279\u5f81\u4e4b\u95f4\u7684\u5173\u7cfb","7e47f3d3":"\u8ba9\u6211\u4eec\u753b\u51fa\u6240\u6709\u7279\u5f81\u548cSalePrice\u7684\u6563\u70b9\u56fe,\u770b\u770b\u662f\u5426\u80fd\u53d1\u73b0\u4ec0\u4e48","93589b20":"\u770b\u770bTotalBsmtSF\u4e0eSalePrice\u7684\u5173\u7cfb","69ec23b5":" ### \u7ed8\u5236\u6563\u70b9\u56fe","932ae1fb":"\u5bf9\u4e8e\u7f3a\u5931\u503c\u7684\u5904\u7406:\n- \u5b57\u7b26\u7c7b\u578b\u7684\u7279\u5f81\u586b\u8865None,\u6570\u5b57\u7c7b\u578b\u7684\u7279\u5f81\u586b\u88650,\u4ee3\u8868\u4e00\u79cd\u65b0\u7684\u5206\u7c7b,\u5373\u8868\u793a\u6ca1\u6709,\u5982PoolQC\u586b\u8865None\u4ee3\u8868\u6ca1\u6709\u6cf3\u6c60.\n- \u5982\u679c\u67d0\u4e2a\u7279\u5f81\u7f3a\u5931\u503c\u7279\u522b\u5c11,\u53ef\u4ee5\u5220\u9664\u542b\u6709\u7f3a\u5931\u503c\u7684\u884c,\u5373\u5220\u9664\u6389\u8be5\u7279\u5f81\u7f3a\u5931\u7684\u6837\u672c\n- \u6839\u636e\u73b0\u5b9e\u8bed\u4e49\u586b\u8865\u7f3a\u5931\u503c,\u6bd4\u5982\u59d3\u540d\u4e2d\u4e3aMrs\u7684\u5728\u6027\u522b\u4e2d\u586b\u8865\u5973\n- \u4f7f\u7528\u5e73\u5747\u6570\u8fdb\u884c\u586b\u8865,\u4e0d\u8fc7\u8fd9\u4e48\u505a\u4e0d\u662f\u5f88\u597d\u7684\u9009\u62e9\n- \u5bf9\u4e8e\u67d0\u4e2a\u7279\u5f81,\u5982\u679c\u67d0\u4e2a\u7c7b\u522b\u7279\u522b\u591a,\u53ef\u4ee5\u4f7f\u7528\u4f17\u6570\u586b\u8865,\u6bd4\u5982:\u6027\u522b\u521780%\u4e3a\u7537,20%\u4e3a\u5973,\u7f3a\u5931\u503c\u53ef\u4ee5\u586b\u8865\u4e3a\u7537\n- \u4f7f\u7528\u968f\u673a\u68ee\u6797\u6a21\u578b\u586b\u8865,\u5bd2\u5c0f\u9633\u7684\u6cf0\u5766\u5c3c\u514b\u7684\u535a\u5ba2\u5c31\u8fd9\u4e48\u505a\u8fc7","a61f576b":"\u8fd9\u91cc\u7684\u7279\u5f81\u5904\u7406\u65b9\u5f0f\u4e0e\u4e4b\u524d\u5904\u7406SalePrice\u7c7b\u4f3c,\u4e0d\u8fc7\u6211\u4eec\u8fd9\u91cc\u4e0d\u4f7f\u7528log\u53d8\u6362,\u800c\u662f\u4f7f\u7528Box Cox\u53d8\u6362","6e3ab817":"\u68c0\u67e5\u662f\u5426\u6709\u7f3a\u5931\u503c","933d105d":"\u5c06\u6570\u503c\u7c7b\u578b\u7684\u79bb\u6563\u578b\u53d8\u91cf\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u7c7b\u578b,\u5728\u8fd9\u4e4b\u540e\u53ef\u4ee5\u5bf9\u8fd9\u4e9b\u7279\u5f81\u8fdb\u884chot\u7f16\u7801\n\n\u5177\u4f53\u7684\u7f16\u7801\u65b9\u5f0f\u53ef\u4ee5\u767e\u5ea6\u641c\u7d22\n\n\u8fd9\u91cc\u4e3e\u4e2a\u4f8b\u5b50\n> hot\u7f16\u7801: \u5bf9\u6027\u522b\u7f16\u7801  \u7f16\u7801\u540e:  \u7537 0 1  \u5973 1 0\n> \u53e6\u4e00\u79cd\u7f16\u7801: \u7537 0 \u5973 1 \n\n\u53e6\u4e00\u79cd\u7f16\u7801\u6bd4\u8d77hot\u7f16\u7801,\u4f1a\u5bf9\u7537\u5973\u4e24\u4e2a\u7279\u5f81\u503c\u6709\u5927\u5c0f\u4e4b\u5206,\u800chot\u7f16\u7801\u6ca1\u6709.\u4f46hot\u7f16\u7801\u4f1a\u4ea7\u751f\u5927\u91cf\u7684\u7279\u5f81.","3ae2dc05":" \u770b\u770bOverallQual\u4e0eSalePrice\u7684\u5173\u7cfb","9c9e95a4":"# \u4e00.\u6570\u636e\u9884\u5904\u7406","9e9fe40e":"### 5. \u7279\u5f81\u5904\u7406","1f8701a2":" ### \u91cd\u65b0\u521b\u5efa\u8bad\u7ec3\u548c\u6d4b\u8bd5\u96c6","e1490deb":"- \u8fd9\u91cc\u7684\u6a21\u578b\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u9009\u62e9\u4e86\u8fd9\u4e9b\n\n- \u5305\u62ec\u6a21\u578b\u7684\u53c2\u6570\u6211\u4e5f\u4e0d\u6e05\u695a\u662f\u5982\u4f55\u9009\u62e9\u7684\n\n- xgboost,lightgbm,StackingCVRegressor\u8fd9\u4e09\u4e2a\u6211\u4e5f\u6ca1\u6709\u641e\u6e05\u695a\u539f\u7406,\u8fd9\u91cc\u5148\u6682\u4e14\u7565\u8fc7,\u53ea\u77e5\u9053StackingCVRegressor\u662f\u4e00\u79cd\u53e0\u52a0\u6a21\u578b.\n","f8e6d3e6":" ### \u91cd\u8981\u7279\u5f81\u5206\u6790\u4e0e\u5f02\u5e38\u503c\u5904\u7406","77117af4":"\u5982\u679c\u77e5\u9053\u6bcf\u4e2a\u7279\u5f81\u7684\u4e2d\u6587\u542b\u4e49,\u4ece\u5e38\u8bc6\u51fa\u53d1,\u6211\u4eec\u4e5f\u53ef\u4ee5\u77e5\u9053\u54ea\u4e9b\u7279\u5f81\u5bf9\u623f\u4ef7\u5f71\u54cd\u5927.\u6bd4\u5982:\n\n\u9762\u79ef\u8d8a\u5927\u7684\u623f\u5b50\u8d8a\u8d35,\u65b0\u623f\u5b50\u603b\u4f53\u4e0a\u8981\u6bd4\u65e7\u623f\u5b50\u8d35,\u6709\u8f66\u5e93\u7684\u603b\u4f53\u4e0a\u6bd4\u6ca1\u8f66\u5e93\u7684\u8d35\u7b49\u7b49..","e0e2558c":"### \u7f3a\u5931\u503c\u5904\u7406","6d84268c":"## 4. \u7f3a\u5931\u503c\u5206\u6790\u4e0e\u5904\u7406","20c732fd":"## 4.\u8f93\u51fa\u7ed3\u679c","7971e65e":"\u53ef\u89c6\u5316\u5206\u6790\u7f3a\u5931\u503c","77528945":"\u89c2\u5bdfSalePrice\u7684\u5c5e\u6027\u63cf\u8ff0.\n\n","9a6dbb3f":"\u63a5\u4e0b\u6765\u8981\u505a\u7684\u662f\n- \u5408\u5e76\u8bad\u7ec3\u96c6\u6d4b\u8bd5\u96c6\u6570\u636e.\n- \u5220\u9664'SalePrice',\"Id\"\u8fd9\u4e24\u4e2a\u975e\u7279\u5f81\u5c5e\u6027  ","f7981a08":"\u89c2\u5bdf\u8868\u683c\u6570\u636e,\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\n- \u7b2c\u4e00\u5217\u662fid,\u4ee3\u8868\u7740\u6570\u636e\u7d22\u5f15\n- \u6700\u540e\u4e00\u5217\u662fSalePrice,\u662f\u6211\u4eec\u8981\u9884\u6d4b\u7684\u623f\u4ef7\n- \u5176\u4f59\u5927\u91cf\u7684\u5c5e\u6027\u503c\u7684\u89e3\u91ca\u53ef\u4ee5\u770b\u8fd9\u91cc https:\/\/blog.csdn.net\/Nyte2018\/article\/details\/89977261\n- \u8868\u683c\u4e2d\u5b58\u5728\u7740\u8fde\u7eed\u5c5e\u6027,\u79bb\u6563\u5c5e\u6027\u548c\u7a7a\u503c.","59a3eb38":" ###  \u7ed8\u5236\u7279\u5f81\u77e9\u9635","59fdbe46":"\u8ba1\u7b97\u7f3a\u5931\u503c\u7684\u4e2a\u6570\u548c\u6bd4\u4f8b","22d4f6ce":"\u4ecd\u7136\u4f7f\u75280\u586b\u8865","764f7181":"\u4ece\u56fe\u8868\u4e0a\u5f88\u96be\u770b\u51fa\u4e9b\u4ec0\u4e48,\u8ba9\u6211\u4eec\u53ef\u89c6\u5316\u4ee5\u4e0b\u6570\u636e\n\u53ef\u89c6\u5316\u89c2\u5bdfSalePrice\u5c5e\u6027","39337841":" ### \u5b9a\u4e49\u4ea4\u53c9\u9a8c\u8bc1\u7b56\u7565","7a3e49e8":"### \u7f3a\u5931\u503c\u5206\u6790","45b09cab":"\u5220\u9664Utilities\u5217,\u56e0\u4e3a\u4ed6\u7684\u503c\u51e0\u4e4e\u4e00\u6837,\u503c\u51e0\u4e4e\u4e00\u6837\u7684\u5217\u5b58\u5728\u7684\u610f\u4e49\u4e0d\u5927","ca539e0b":"\u83b7\u5f97\u7279\u5f81\u7684\u504f\u5ea6","b432002b":"\u5f53\u7136\u53ea\u89c2\u5bdf10\u4e2a\u7279\u5f81\u8fd8\u662f\u592a\u5c11\u4e86,\u6211\u4eec\u628a\u7279\u5f81\u503c\u6309\u7167\u76f8\u5173\u5ea6\u8fdb\u884c\u6392\u5e8f\u5e76\u6253\u5370\u51fa\u6765\u770b\u770b","f9f87f49":"\u6570\u636e\u7684shape\u5982\u4e0b:\n- \u6ce8\u610f: \u56e0\u4e3a\u6709\u4e24\u5217\u4e0d\u662f\u7279\u5f81(id,SalePrice),\u5b9e\u9645\u7279\u5f81\u6570\u4e3a81-2=79\u4e2a","cecd004f":"\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u5f53skewness>0.75\u65f6\u7684\u7279\u5f81\u5c31\u9700\u8981\u8f6c\u6362\n\n\u4f7f\u7528Box Cox \u8f6c\u6362skewness>0.75\u7684\u7279\u5f81","064d230e":"## 2.\u5efa\u6a21","e40c9909":" ### \u89e3\u51b3\u8fde\u7eed\u578b\u5206\u5e03\u7684\u503e\u659c\u7279\u5f81","2000f4e3":"\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1,\u5e76\u6253\u5206","5e67cda6":"\u8fdb\u884c\u7f3a\u5931\u503c\u586b\u8865:","157d8ace":"\u8fd9\u91cc\u6211\u4eec\u8981\u53ef\u4ee5\u5c1d\u8bd5\u5982\u4e0b\u5de5\u4f5c\n- \u662f\u5426\u53ef\u4ee5\u6dfb\u52a0\u65b0\u7684\u7279\u5f81?\n- \u7279\u5f81\u7684\u503e\u659c\u7a0b\u5ea6\u5982\u4f55?\u600e\u6837\u89e3\u51b3?\n- \u5bf9\u79bb\u6563\u578b\u6570\u636e\u8fdb\u884c\u7f16\u7801,\u5982hot\u7f16\u7801","4edaeeed":"\u9996\u5148,\u5148\u7b80\u5355\u89c2\u5bdf\u6570\u636e\n- \u521d\u6b65\u5f97\u51fa\u4e00\u4e9b\u7ed3\u8bba\n- \u7c97\u7565\u7684\u4e86\u89e3\u5c5e\u6027\u7684\u542b\u4e49\n- \u89c2\u5bdf\u6837\u672c\u6570,\u7279\u5f81\u6570,\u7a7a\u503c\u7b49\n \n","bbc53110":"\u8ba9\u6211\u4eec\u89c2\u5bdf\u56fe\u7247\n\n\u7279\u5f81\u503c\u4e0e\u9884\u6d4b\u503c\u4e4b\u95f4\u7684\u5173\u7cfb:\n - \u56fe\u4e2d\u6570\u636e\u503c\u4ee3\u8868\u7740\u4e0eSalePrice\u7684\u76f8\u5173\u5ea6,\u6570\u503c\u8d8a\u5927\u8d8a\u597d\n - \u7b2c\u4e00\u5217\u6570\u503c\u7531\u5927\u5230\u5c0f\u4e0b\u964d,\u4ee3\u8868\u7740\u5176\u4f599\u4e2a\u7279\u5f81\u548cSalePrice\u7684\u76f8\u5173\u5ea6\u4e5f\u662f\u7531\u5927\u5230\u5c0f\u4e0b\u964d\u7684\n\n\u7279\u5f81\u503c\u4e0e\u7279\u5f81\u503c\u4e4b\u95f4\u7684\u5173\u7cfb\n - \u53ef\u4ee5\u53d1\u73b0 GarageCars\u548cGarageArea\u7684\u76f8\u5173\u5ea6\u5f88\u9ad8,\u7279\u5f81\u4e4b\u95f4\u76f8\u5173\u5ea6\u5f88\u9ad8\u4e0d\u662f\u4e00\u4e2a\u597d\u6d88\u606f,\u6211\u4eec\u53ef\u4ee5\u5220\u9664\u6389\u591a\u4f59\u7279\u5f81,\u4f46\u4e5f\u53ef\u4ee5\u4fdd\u7559.\n - \u4e0e\u6b64\u76f8\u4f3c,TotalBsmt\u548c1stFlrSF\u76f8\u5173\u5ea6\u4e5f\u5f88\u9ad8","861cffdf":"\u7279\u5f81\u592a\u591a\u4e86,\u770b\u7684\u773c\u82b1\u7f2d\u4e71.\n\u6211\u4eec\u8bd5\u7740\u770b\u770b\u548c\u9884\u6d4b\u503c\u76f8\u5173\u5ea6\u6700\u9ad8\u768410\u4e2a\u7279\u5f81","b4f94fa3":"## 1.  \u89c2\u5bdf\u6570\u636e","48e8b021":"\u4e0a\u5347\u8d8b\u52bf\u4e0d\u662f\u5f88\u660e\u663e,\u4f46\u603b\u4f53\u662f\u4e0a\u5347\u7684","3f659351":"\u5bf9\u4e8e\u63a5\u4e0b\u67655\u4e2aBsmt\u6570\u636e,\u586b\u5145None\u503c","e45b7a2d":"\u5bf9\u4e8e\u635f\u5931\u6781\u5c11\u7684\u7279\u5f81,\u53ef\u4ee5\u4f7f\u7528\u4f17\u6570\u586b\u8865","d5f37081":"\u5bf9\u4e8e\u63a5\u4e0b\u67655\u4e2aGarageX\u6570\u636e,\u586b\u5145None\u503c","1781f9c6":"## 1. \u4ea4\u53c9\u9a8c\u8bc1","9fd75639":"\u4e3a\u4e86\u4f7f\u5176\u66f4\u4e3a\u6b63\u6001\u5206\u5e03,\u8fd9\u91cc\u4f7f\u7528log\u8f6c\u6362\u6765\u5904\u7406\u6570\u636e\n\n\u91cd\u65b0\u89c2\u5bdf\u6570\u636e","f01c25d2":" LotFrontage,\u5176\u542b\u4e49\u4e3a\u8857\u9053\u7684\u9762\u79ef,\n \n \u6839\u636e\u73b0\u5b9e\u542b\u4e49,\u5728Neighborhood\u76f8\u540c\u7684\u60c5\u51b5\u4e0b,LotFrontage\u5f88\u6709\u53ef\u80fd\u4e5f\u76f8\u540c,\n \n \u5373\u90bb\u5c45\u76f8\u540c\u7684\u4eba\u8857\u9053\u4e5f\u53ef\u80fd\u76f8\u540c,\u6240\u4ee5\u8fd9\u91cc\u5bf9\u90bb\u5c45\u5206\u7ec4,\u7528\u6bcf\u7ec4\u5185\u7684LotFrontage\u4e2d\u4f4d\u6570\u586b\u8865\u7f3a\u5931\u503c","57bd5848":" \u6211\u4eec\u4f7f\u7528sklearn\u7684cross-val-score\u51fd\u6570\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a\u51fd\u6570\u6ca1\u6709shuffle\u5c5e\u6027\uff0c\u6211\u4eec\u6dfb\u52a0\u4e00\u884c\u4ee3\u7801\uff0c\u4ee5\u4fbf\u5728\u4ea4\u53c9\u9a8c\u8bc1\u4e4b\u524d\u5bf9\u6570\u636e\u96c6\u8fdb\u884cshuffle\u64cd\u4f5c\u3002\n \n \u5373: \u6570\u636e\u5728\u4ea4\u53c9\u9a8c\u8bc1\u4e4b\u524d\u5fc5\u987b\u8981\u6253\u6563,\u5373\u968f\u673a\u7ec4\u5408\u8fd9\u4e9b\u6570\u636e,\u9ed8\u8ba4\u7684cross-val-score\u4e0d\u5177\u5907\u6253\u6563\u529f\u80fd.\n \n \u8fd9\u91cc\u4f7f\u752812\u6298\u4ea4\u53c9\u9a8c\u8bc1","7137bdce":" ### \u6dfb\u52a0\u7279\u5f81","c4ceff49":"\u5bfc\u5165\u6240\u9700\u5305","c01fdadd":"\u6dfb\u52a0\u4e00\u4e2a\u7279\u5f81\n - \u7531\u4e8e\u4e0e\u9762\u79ef\u76f8\u5173\u7684\u7279\u5f81\u5bf9\u4e8e\u786e\u5b9a\u623f\u4ef7\u975e\u5e38\u91cd\u8981\uff0c\u6211\u4eec\u53c8\u589e\u52a0\u4e86\u4e00\u4e2a\u7279\u5f81\uff0c\u5373\u5730\u4e0b\u5ba4\u603b\u9762\u79ef\u3001\u6bcf\u680b\u623f\u5b50\u7684\u4e00\u5c42\u548c\u4e8c\u5c42\u9762\u79ef\n"}}