{"cell_type":{"00144c00":"code","111488b1":"code","42537a18":"code","69e6bb30":"code","fec8b43f":"code","a025ed9a":"code","6e7319ac":"code","04dbc434":"code","83c78e71":"code","81be5d92":"code","41cfd8f2":"code","20c2d039":"code","48c33da6":"code","17cbfe02":"code","2b5e0dfe":"code","e065d295":"code","23166494":"code","408a8f07":"code","44193c31":"code","5a4d19f1":"code","a28d9259":"code","912e62e7":"code","5f1cfc5b":"code","dc710e68":"code","1b519d30":"code","6305e9a2":"code","f9ce0e5c":"code","19e00012":"markdown","82ceaa0d":"markdown","2e2fb979":"markdown","4120eac8":"markdown","fe6c0792":"markdown"},"source":{"00144c00":"!pip install rake-nltk","111488b1":"#import the necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom rake_nltk import Rake\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import CountVectorizer","42537a18":"#Fetch the csv file from the web and make the dataframe and display the first 5 rows of dataframe\npd.set_option('display.max_columns', 100)\ndf = pd.read_csv('https:\/\/query.data.world\/s\/uikepcpffyo2nhig52xxeevdialfl7')\ndf.head()","69e6bb30":"#display the shape of dataframe\nprint(\"The dataframe has {} rows and {} columns\".format(df.shape[0],df.shape[1]))","fec8b43f":"#display the all column names\ndf.columns","a025ed9a":"#so we will use only title,director,genre,actor,plot column only to build our reommendation system.\ndf = df[['Title','Genre','Director','Actors','Plot']]","6e7319ac":"df.head()","04dbc434":"#display the shape of dataframe\ndf.shape","83c78e71":"#before building any recommendation system we have to preprocess the text. Let's start\ndf['Genre'] = df['Genre'].map(lambda x:x.lower().split(','))","81be5d92":"df['Director'] = df['Director'].map(lambda x: x.lower().split(' '))","41cfd8f2":"df['Actors'] = df['Actors'].map(lambda x:x.lower().split(','))","20c2d039":"for index,row in df.iterrows():\n    row['Actors'] = [x.replace(' ','') for x in row['Actors']]\n    row['Director'] = ''.join(row['Director'])","48c33da6":"df['Keywords'] = ''\nfor index,row in df.iterrows():\n    plot = row['Plot']\n    r = Rake()\n    r.extract_keywords_from_text(plot)\n    key_words_dict_scores = r.get_word_degrees()\n    row['Keywords'] = list(key_words_dict_scores.keys())","17cbfe02":"df.drop(columns=['Plot'],inplace=True)","2b5e0dfe":"df.set_index('Title',inplace=True)","e065d295":"df['bag_of_words'] = ''\nfor index,row in df.iterrows():\n    words = ''\n    for col in df.columns:\n        if col != 'Director':\n            words = words + ' '.join(row[col])+ ' '\n        else:\n            words = words +row[col]+' '\n    row['bag_of_words'] = words\n    \ndf.drop(columns=[x for x in df.columns if x!='bag_of_words'],inplace=True)","23166494":"df['bag_of_words'][0]","408a8f07":"count = CountVectorizer()\ncount_matrix = count.fit_transform(df['bag_of_words'])","44193c31":"indices = pd.Series(df.index)\nindices[:3]","5a4d19f1":"count_matrix.shape","a28d9259":"count_matrix.toarray()","912e62e7":"print(count_matrix)","5f1cfc5b":"count.vocabulary_","dc710e68":"cosine_sim= cosine_similarity(count_matrix,count_matrix)\ncosine_sim","1b519d30":"cosine_sim.shape","6305e9a2":"def recommendations(title,cosine_sim = cosine_sim):\n    recommendation_movies = []\n    # gettin the index of the movie that matches the title\n    idx = indices[indices == title].index[0]\n    # creating a Series with the similarity scores in descending order\n    score_series = pd.Series(cosine_sim[idx]).sort_values(ascending = False)\n    # getting the indexes of the 10 most similar movies\n    top_10_indexes = list(score_series.iloc[1:11].index)\n    print(top_10_indexes)\n    # populating the list with the titles of the best 10 matching movies\n    for i in top_10_indexes:\n        recommendation_movies.append(list(df.index)[i])\n    return recommendation_movies","f9ce0e5c":"recommendations('The Godfather')","19e00012":"Rake algorithm is used to find the important keywords from the text. so we will use rake to find important keywords in Plot and then we will drop Plot column","82ceaa0d":"Objective: our objective is to recommend movie based on what user searches for.","2e2fb979":"so,what countvectorizer do is it will make as many column as many unique words are there in my bag_of_words and assign term frequency according to the term appeared in bag_of_word one by one.","4120eac8":"From above we can see that there are total 38 columns but we will use only some column from that to build our recommendation system.","fe6c0792":"So ,by now we will done with all text preprocessing means we make all text small letters and and remove spaces between names.\nbut now we have to merge all the columns into one because we have to apply countvectorizer to make document matrix which want only one column."}}