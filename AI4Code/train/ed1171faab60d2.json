{"cell_type":{"cb942f85":"code","1cf32da9":"code","6ad5064f":"code","49b8ba88":"code","5a0fb55f":"code","81818a1e":"code","6cf620e9":"code","28fd34f7":"code","cd49b64e":"code","de96f375":"code","9f1c6d7e":"code","8391db4b":"code","e41c7f5a":"code","8dbf3ac6":"code","d01a68b7":"code","bf7244a5":"code","1af0ce02":"markdown","1b12da9c":"markdown","b02b9e58":"markdown","12de1ca2":"markdown","3ae7cf44":"markdown","0e1d5493":"markdown","f38138e9":"markdown"},"source":{"cb942f85":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","1cf32da9":"# Import the data\ntrain = pd.read_csv(\"..\/input\/tabular-playground-series-jun-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jun-2021\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/tabular-playground-series-jun-2021\/sample_submission.csv\")","6ad5064f":"train.shape, test.shape","49b8ba88":"train.head()","5a0fb55f":"train.drop('id',axis=1,inplace=True)\ntest.drop('id',axis=1,inplace=True)","81818a1e":"import plotly.graph_objects as go\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=train.target, hole=.3)])\nfig.show()","6cf620e9":"from plotly.subplots import make_subplots\ncols = train.columns[:-1] \ndf1= train[train['target']==train.target.unique()[0]]\ndf2= train[train['target']==train.target.unique()[1]]\ndf3= train[train['target']==train.target.unique()[2]]\ndf4= train[train['target']==train.target.unique()[3]]\ndf5= train[train['target']==train.target.unique()[4]]\ndf6= train[train['target']==train.target.unique()[5]]\ndf7= train[train['target']==train.target.unique()[6]]\ndf8= train[train['target']==train.target.unique()[7]]\ndf9= train[train['target']==train.target.unique()[8]]\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.add_trace(go.Scatter(y=df1[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[0]),\n                         line=dict(color='royalblue', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df2[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[1]),\n                         line=dict(color='red', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df3[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[2]),\n                         line=dict(color='orange', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df4[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[3]),\n                         line=dict(color='green', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df5[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[4]),\n                         line=dict(color='yellow', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df6[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[5]),\n                         line=dict(color='brown', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df7[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[6]),\n                         line=dict(color='pink', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df8[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[7]),\n                         line=dict(color='skyblue', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df9[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[8]),\n                         line=dict(color='violet', width=2, dash='solid')\n                         ))\n\nfig.update_layout(title='<b>Average value by Class<b>',\n                  xaxis_title='Features',\n                  yaxis_title='Average Value',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=900, height=500)\n\nfig.update_yaxes(title_text=\"<b>values<\/b>\", secondary_y=True)\n\nfig.show()","28fd34f7":"fig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.add_trace(go.Scatter(y=df1[cols].std(),\n                         x=cols,\n                         name = str(train.target.unique()[0]),\n                         line=dict(color='royalblue', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df2[cols].std(),\n                         x=cols,\n                         name = str(train.target.unique()[1]),\n                         line=dict(color='red', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df3[cols].std(),\n                         x=cols,\n                         name = str(train.target.unique()[2]),\n                         line=dict(color='orange', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df4[cols].std(),\n                         x=cols,\n                         name = str(train.target.unique()[3]),\n                         line=dict(color='green', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df5[cols].std(),\n                         x=cols,\n                         name = str(train.target.unique()[4]),\n                         line=dict(color='yellow', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df6[cols].std(),\n                         x=cols,\n                         name = str(train.target.unique()[5]),\n                         line=dict(color='brown', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df7[cols].std(),\n                         x=cols,\n                         name = str(train.target.unique()[6]),\n                         line=dict(color='pink', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df8[cols].std(),\n                         x=cols,\n                         name = str(train.target.unique()[7]),\n                         line=dict(color='skyblue', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df9[cols].std(),\n                         x=cols,\n                         name = str(train.target.unique()[8]),\n                         line=dict(color='violet', width=2, dash='solid')\n                         ))\n\nfig.update_layout(title='<b>Std.Dev by value by Class',\n                  xaxis_title='Features',\n                  yaxis_title='Average Value',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=900, height=500)\n\nfig.update_yaxes(title_text=\"<b>values<\/b>\", secondary_y=True)\n\nfig.show()","cd49b64e":"import plotly.express as px\n\nfig = px.bar(cols , x=train.nunique(), y=train.columns, orientation='h')\n\nfig.update_layout(title='Feature cardinality in train set',\n                  xaxis_title='unique values',\n                  yaxis_title='features',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=900, height=1000)\nfig.show()","de96f375":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ntrain['target'] = le.fit_transform(train['target'])","9f1c6d7e":"X = train.drop('target',axis=1)\ny = train['target']","8391db4b":"xgb_params= {'n_estimators': 25000, \n             'max_depth': 8, \n             'learning_rate': 0.0320, \n             'reg_lambda': 29.326, \n             'subsample': 0.918, \n             'colsample_bytree': 0.235, \n             'colsample_bynode': 0.820, \n             'colsample_bylevel': 0.453}","e41c7f5a":"from sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import log_loss\n\ndef cross_val(X, y, model, params, folds=9):\n\n    skf = StratifiedKFold(n_splits=folds, shuffle=True, random_state=21)\n    for fold, (train_idx, test_idx) in enumerate(skf.split(X, y)):\n        print(f\"Fold: {fold}\")\n        x_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n        x_test, y_test = X.iloc[test_idx], y.iloc[test_idx]\n\n        alg = model(**params)\n        alg.fit(x_train, y_train,\n                eval_set=[(x_test, y_test)],\n                early_stopping_rounds=100,\n                verbose=400,\n                eval_metric='mlogloss')\n\n        pred = alg.predict_proba(x_test)\n        loss = log_loss(y_test, pred)\n        print(f\"Log loss: {loss}\")\n        print(\"-\"*50)\n    \n    return alg","8dbf3ac6":"from xgboost import XGBClassifier\nxgb_model = cross_val(X, y, XGBClassifier, xgb_params)","d01a68b7":"pred_xgb = xgb_model.predict_proba(test)","bf7244a5":"sample_submission[['Class_1','Class_2', 'Class_3', 'Class_4','Class_5','Class_6', 'Class_7', 'Class_8', 'Class_9']] = pred_xgb\nsample_submission.to_csv(f'xgb.csv',index=False)","1af0ce02":"#### Predict","1b12da9c":"* This TPS we have 9 classes to predict.","b02b9e58":"#### if you like this notebook plz upvote it.\n#### Thank you!","12de1ca2":"* the dataset looks same as previous TPS.\n* The id value is meaningless, so I will leave it out in advance.","3ae7cf44":"* The following parameters are the best ones that were recovered by Optuna.","0e1d5493":"### xgboost","f38138e9":"* Now that the best parameters are found, we can generate 9 sets of predictions using cv."}}