{"cell_type":{"6071876d":"code","f10d302b":"code","d174293e":"code","ee2abcca":"code","aa3cf2d5":"code","27ec5841":"code","c2c0e255":"code","f58fa090":"code","3b7e91f5":"code","8c9c0693":"code","c58ebe47":"code","676a3a49":"code","32dc7ff8":"code","5401e568":"code","7caddd85":"code","9572235c":"code","513a3c13":"code","49b95555":"code","ecd29e74":"code","4e90c60c":"code","75bd7885":"code","f154594d":"code","c77897ef":"code","120151e1":"code","2a705176":"code","01ff392d":"code","2fc20e7c":"code","c5246cc0":"code","904a3c50":"code","5d80e0f8":"code","d91850d4":"code","008edc64":"markdown"},"source":{"6071876d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f10d302b":"movies_df = pd.read_csv('\/kaggle\/input\/bollywood-movie-data-from-2000-to-2019\/Movie_List.csv',encoding= 'unicode_escape')\nmovies_df","d174293e":"movies_df.isnull().sum()","ee2abcca":"movies_df.dropna(inplace=True)","aa3cf2d5":"movies_df.Genre.unique()","27ec5841":"movies_df.Genre=movies_df.Genre.apply(lambda x: x.replace('\\n', ''))\nmovies_df.Genre.unique()","c2c0e255":"movies_df.Genre=movies_df.Genre.apply(lambda x: x.lower())\nmovies_df.Genre=movies_df.Genre.apply(lambda x: x.strip())\nmovies_df.Genre.unique()","f58fa090":"movies_df['Genre'] = movies_df.Genre.str.split(',|\/')\nmovies_df.head()","3b7e91f5":"movies_df.drop_duplicates(subset =\"Title\", keep = False, inplace = True) ","8c9c0693":"movies_df.Title = movies_df.Title.apply(lambda x: x.strip())\nmovies_df.Genre = movies_df.Genre.apply(lambda x: np.nan if x==[''] else x)\nmovies_df.isnull().sum()","c58ebe47":"movies_df.dropna(inplace=True)","676a3a49":"movies_df.isnull().sum()","32dc7ff8":"movies_df","5401e568":"movies_df.dtypes","7caddd85":"#Copying the movie dataframe into a new one since we won't need to use the genre information in our first case.\nmoviesWithGenres_df = movies_df.copy()\n\n#For every row in the dataframe, iterate through the list of genres and place a 1 into the corresponding column\nfor index, row in movies_df.iterrows():\n    for genre in row['Genre']:\n        moviesWithGenres_df.at[index, genre.strip()] = 1\n#Filling in the NaN values with 0 to show that a movie doesn't have that column's genre\nmoviesWithGenres_df = moviesWithGenres_df.fillna(0)\nmoviesWithGenres_df.head()\n","9572235c":"userInput = [\n            {'Title':'Dahshat', 'rating':7},\n            {'Title':'Raaz', 'rating':8},\n            {'Title':'Darna Mana Hai', 'rating':8},\n            {'Title':'Kaal', 'rating':9},\n            {'Title':'Phoonk', 'rating':6.5},\n            {'Title':'1920', 'rating':10},\n            {'Title':\"Raaz: The Mystery Continues\", 'rating':8}\n         ] \ninputMovies = pd.DataFrame(userInput)\ninputMovies","513a3c13":"#Filtering out the movies by title\ninputId = movies_df[movies_df['Title'].isin(inputMovies['Title'].tolist())]\ninputMovies['Movie_ID'] = inputId['Movie_ID'].values\ninputMovies","49b95555":"#We're going to start by learning the input's preferences, so let's get the subset of movies that the input has watched from the \n#Dataframe containing genres defined with binary values.\n\n#Filtering out the movies from the input\nuserMovies = moviesWithGenres_df[moviesWithGenres_df['Title'].isin(inputMovies['Title'].tolist())]\n# userMovies = moviesWithGenres_df[moviesWithGenres_df['movieId'].isin(inputMovies['movieId'].tolist())]\nuserMovies\n","ecd29e74":"#We'll only need the actual genre table, so let's clean this up a bit by resetting the index and dropping the movieId, title, \n#genres and year columns.\n\n#Resetting the index to avoid future issues\nuserMovies = userMovies.reset_index(drop=True)\n#Dropping unnecessary issues due to save memory and to avoid issues\nuserGenreTable = userMovies.drop(['Movie_ID','Title', 'Year','Genre'], 1)\nuserGenreTable","4e90c60c":"inputMovies","75bd7885":"userGenreTable","f154594d":"\n#Dot produt to get weights\nuserProfile = userGenreTable.transpose().dot(inputMovies['rating'])\n#The user profile\nuserProfile\n# inputMovies['rating']\n","c77897ef":"#Now let's get the genres of every movie in our original dataframe\ngenreTable = moviesWithGenres_df.set_index(moviesWithGenres_df['Movie_ID'])\n#And drop the unnecessary information\ngenreTable = genreTable.drop(['Movie_ID','Title', 'Year','Genre'], 1)\ngenreTable.head()","120151e1":"genreTable*userProfile","2a705176":"(genreTable*userProfile).sum(axis=1)","01ff392d":"((genreTable*userProfile).sum(axis=1))\/(userProfile.sum())","2fc20e7c":"\n#Multiply the genres by the weights and then take the weighted average\nrecommendationTable_df = ((genreTable*userProfile).sum(axis=1))\/(userProfile.sum())\nrecommendationTable_df.head()\n","c5246cc0":"#Sort our recommendations in descending order\nrecommendationTable_df = recommendationTable_df.sort_values(ascending=False)\n#Just a peek at the values\nrecommendationTable_df.head(20)\n","904a3c50":"recommendationTable_df.head(10).keys()","5d80e0f8":"#The final recommendation table\nmovies_df.loc[movies_df['Movie_ID'].isin(recommendationTable_df.head(10).keys())]","d91850d4":"#The final recommendation table\nmovies_df.loc[movies_df['Movie_ID'].isin(recommendationTable_df.head(10).keys())]","008edc64":"![Imgur](https:\/\/i.imgur.com\/wjVWCaz.png)\n\n\n<p>Input User Rating<\/p>\n<table>\n<tbody>\n<tr>\n<td width=\"84\">\n<p>Movie<\/p>\n<\/td>\n<td width=\"81\">\n<p>Rating<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"84\">\n<p>Movie1<\/p>\n<\/td>\n<td width=\"81\">\n<p>7<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"84\">\n<p>Movie2<\/p>\n<\/td>\n<td width=\"81\">\n<p>10<\/p>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>Movie Matrix<\/p>\n<table>\n<tbody>\n<tr>\n<td width=\"84\">\n<p>Movie<\/p>\n<\/td>\n<td width=\"81\">\n<p>Comedy<\/p>\n<\/td>\n<td width=\"81\">\n<p>Adventure<\/p>\n<\/td>\n<td width=\"93\">\n<p>Super Hero<\/p>\n<\/td>\n<td width=\"89\">\n<p>SciFi<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"84\">\n<p>Movie1<\/p>\n<\/td>\n<td width=\"81\">\n<p>0<\/p>\n<\/td>\n<td width=\"81\">\n<p>1<\/p>\n<\/td>\n<td width=\"93\">\n<p>1<\/p>\n<\/td>\n<td width=\"89\">\n<p>0<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"84\">\n<p>Movie2<\/p>\n<\/td>\n<td width=\"81\">\n<p>1<\/p>\n<\/td>\n<td width=\"81\">\n<p>1<\/p>\n<\/td>\n<td width=\"93\">\n<p>1<\/p>\n<\/td>\n<td width=\"89\">\n<p>1<\/p>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>Weighted Genre Matrix (Movie Matrix*Input User Rating)<\/p>\n<table>\n<tbody>\n<tr>\n<td width=\"84\">\n<p>Movie<\/p>\n<\/td>\n<td width=\"81\">\n<p>Comedy<\/p>\n<\/td>\n<td width=\"81\">\n<p>Adventure<\/p>\n<\/td>\n<td width=\"93\">\n<p>Super Hero<\/p>\n<\/td>\n<td width=\"89\">\n<p>SciFi<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"84\">\n<p>Movie1<\/p>\n<\/td>\n<td width=\"81\">\n<p>0<\/p>\n<\/td>\n<td width=\"81\">\n<p>7<\/p>\n<\/td>\n<td width=\"93\">\n<p>7<\/p>\n<\/td>\n<td width=\"89\">\n<p>0<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"84\">\n<p>Movie2<\/p>\n<\/td>\n<td width=\"81\">\n<p>10<\/p>\n<\/td>\n<td width=\"81\">\n<p>10<\/p>\n<\/td>\n<td width=\"93\">\n<p>10<\/p>\n<\/td>\n<td width=\"89\">\n<p>10<\/p>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>User Profile :<\/p>\n<table>\n<tbody>\n<tr>\n<td width=\"81\">\n<p>Comedy<\/p>\n<\/td>\n<td width=\"81\">\n<p>Adventure<\/p>\n<\/td>\n<td width=\"93\">\n<p>Super Hero<\/p>\n<\/td>\n<td width=\"89\">\n<p>SciFi<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"81\">\n<p>10<\/p>\n<\/td>\n<td width=\"81\">\n<p>17<\/p>\n<\/td>\n<td width=\"93\">\n<p>17<\/p>\n<\/td>\n<td width=\"89\">\n<p>10<\/p>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>User Profile Normalized:<\/p>\n<table>\n<tbody>\n<tr>\n<td width=\"81\">\n<p>Comedy<\/p>\n<\/td>\n<td width=\"81\">\n<p>Adventure<\/p>\n<\/td>\n<td width=\"93\">\n<p>Super Hero<\/p>\n<\/td>\n<td width=\"89\">\n<p>SciFi<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"81\">\n<p>0.185<\/p>\n<\/td>\n<td width=\"81\">\n<p>0.315<\/p>\n<\/td>\n<td width=\"93\">\n<p>0.315<\/p>\n<\/td>\n<td width=\"89\">\n<p>0.185<\/p>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>Movie Matrix (unwatched)<\/p>\n<table>\n<tbody>\n<tr>\n<td width=\"84\">\n<p>Movie<\/p>\n<\/td>\n<td width=\"81\">\n<p>Comedy<\/p>\n<\/td>\n<td width=\"81\">\n<p>Adventure<\/p>\n<\/td>\n<td width=\"93\">\n<p>Super Hero<\/p>\n<\/td>\n<td width=\"89\">\n<p>SciFi<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"84\">\n<p>Movie3<\/p>\n<\/td>\n<td width=\"81\">\n<p>1<\/p>\n<\/td>\n<td width=\"81\">\n<p>1<\/p>\n<\/td>\n<td width=\"93\">\n<p>0<\/p>\n<\/td>\n<td width=\"89\">\n<p>0<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"84\">\n<p>Movie4<\/p>\n<\/td>\n<td width=\"81\">\n<p>1<\/p>\n<\/td>\n<td width=\"81\">\n<p>0<\/p>\n<\/td>\n<td width=\"93\">\n<p>1<\/p>\n<\/td>\n<td width=\"89\">\n<p>0<\/p>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>Weighted Genre Matrix unwatched(Movie Matrix unwatched*User Profile Normalized)<\/p>\n<table>\n<tbody>\n<tr>\n<td width=\"84\">\n<p>Movie<\/p>\n<\/td>\n<td width=\"81\">\n<p>Comedy<\/p>\n<\/td>\n<td width=\"81\">\n<p>Adventure<\/p>\n<\/td>\n<td width=\"93\">\n<p>Super Hero<\/p>\n<\/td>\n<td width=\"89\">\n<p>SciFi<\/p>\n<\/td>\n<td width=\"89\">\n<p>Sum<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"84\">\n<p>Movie3<\/p>\n<\/td>\n<td width=\"81\">\n<p>0.185<\/p>\n<\/td>\n<td width=\"81\">\n<p>0.315<\/p>\n<\/td>\n<td width=\"93\">\n<p>0<\/p>\n<\/td>\n<td width=\"89\">\n<p>0.185<\/p>\n<\/td>\n<td width=\"89\">\n<p>0.685<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"84\">\n<p>Movie4<\/p>\n<\/td>\n<td width=\"81\">\n<p>0.185<\/p>\n<\/td>\n<td width=\"81\">\n<p>0<\/p>\n<\/td>\n<td width=\"93\">\n<p>0.315<\/p>\n<\/td>\n<td width=\"89\">\n<p>0<\/p>\n<\/td>\n<td width=\"89\">\n<p>0.5<\/p>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>Recommendation matrix<\/p>\n<table>\n<tbody>\n<tr>\n<td width=\"84\">\n<p>Movie<\/p>\n<\/td>\n<td width=\"84\">\n<p>Possible Rating<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"84\">\n<p>Movie3<\/p>\n<\/td>\n<td width=\"84\">\n<p>0.685<\/p>\n<\/td>\n<\/tr>\n<tr>\n<td width=\"84\">\n<p>Movie4<\/p>\n<\/td>\n<td width=\"84\">\n<p>0.5<\/p>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n\n\n\n[My recommendation system dataset on kaggle](https:\/\/www.kaggle.com\/rashikrahmanpritom\/bollywood-movie-data-from-2000-to-2019)"}}