{"cell_type":{"fbbd86c0":"code","54b162b2":"code","65964b15":"code","b3f6dfc5":"code","5ff90277":"code","3678134b":"code","a9c05a2b":"code","d338b01f":"code","954e072e":"code","2fc1620f":"code","983d8d2d":"code","31d8a30e":"code","31ebf40b":"code","c3d22658":"code","276cc771":"code","1da7f455":"code","5384e2cd":"code","eb860d1d":"code","ba94b196":"code","51c205f3":"code","dcf9f84e":"code","0c9116da":"code","7fb98cf0":"code","0d4b6f04":"code","60959a2d":"code","74336c9d":"code","8ddd0ded":"code","f6315945":"code","7f68704b":"code","bb004df8":"code","e78eb95c":"code","fd0c3312":"code","08ef9c20":"code","d4c9de97":"code","630e890a":"code","3993958a":"code","c187a110":"code","0d64cdab":"code","3e0bd702":"code","376ddd6a":"code","76d1c5c9":"code","926cc116":"code","ea6e7fcb":"code","158b2c4f":"code","32a989c3":"code","a99b5b5c":"code","cb7c7b1b":"code","212e1ffe":"code","a7e72376":"code","2361a819":"code","bb59a682":"markdown","586a60db":"markdown"},"source":{"fbbd86c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","54b162b2":"df = pd.read_csv('\/kaggle\/input\/international-football-results-from-1872-to-2017\/results.csv')\ndfc = df.copy()","65964b15":"dfc.head(3)","b3f6dfc5":"dfc.dtypes # Date type is not correct","5ff90277":"dfc.date = pd.to_datetime(dfc.date)","3678134b":"print('We are dealing with {} rows of data and {} columns'.format(dfc.shape[0], dfc.shape[1]))","a9c05a2b":"dfc.describe().T  #descriptive stats","d338b01f":"#Time frame?\nprint(\"The data records goes back to {} and up to {} \\n\".format(dfc.date.min(), dfc.date.max()))\nprint(\"The time frame is {} years\".format(round((dfc.date.max() - dfc.date.min()) \/ np.timedelta64(1, 'Y')), 2))","954e072e":"#Any nulls?\ndfc.isna().sum() # NO","2fc1620f":"#Data seems to be clean and ready to be analyzed","983d8d2d":"#As time passes, more or less goals are being scored?","31d8a30e":"subdf0 = dfc.groupby(dfc.date.dt.year).agg({'home_score': 'sum',\n                                   'away_score': 'sum'}).reset_index()\nplt.figure(figsize = (20, 10))\nsns.lineplot(x = subdf0.date, y = subdf0.home_score, data = subdf0, color = 'b', marker = True, )\nsns.lineplot(x = subdf0.date, y = subdf0.away_score, data = subdf0, color = 'lime', marker = True, dashes = True)\nplt.grid(True)\nsns.set_style(\"whitegrid\")\nplt.title('Goals scored over the years', fontsize = 20, color = 'r')\nplt.legend(labels=[\"Home goals\",\"Away goals\"])\nplt.xlabel(\"\")\nplt.ylabel(\"\")","31ebf40b":"print(\"More goals are scored as time passes, could it be because more games are being played over \\ntime?\")","c3d22658":"#How many games were played per year","276cc771":"temp = dfc.date.dt.year.value_counts().reset_index()\ntemp = temp.rename(columns = {'index': 'Year',\n                      'date': 'Games played'})\n\ntemp.Year = pd.to_datetime(temp.Year, format = '%Y')\ntemp.Year = temp.Year.dt.year\ntemp.sort_values(by = 'Year', ascending=True, inplace = True)\n\ntemp = dfc.date.dt.year.value_counts().reset_index()\ntemp = temp.rename(columns = {'index': 'Year',\n                      'date': 'Games played'})\nplt.figure(figsize = (20, 10))\nsns.lineplot(x = temp.Year, y = temp['Games played'], data = temp, color = 'lime', markers = True, dashes = True)\nplt.title('Games played over years', fontsize = 20, color = 'r')\n\nsns.set_style(\"whitegrid\")\nplt.grid(\"True\")\nplt.xlabel(\"\")\nplt.ylabel(\"\")\nplt.legend()","1da7f455":"print('We can see that an identical pattern to the goals scored is forming, this shows that more \\ngames being played is the main reason why more goals are scored.') ","5384e2cd":"plt.figure(figsize = (20, 15))\nsns.pairplot(dfc.iloc[:, 3:5])","eb860d1d":"#Friendly games goals vs official games goals","ba94b196":"df1 = dfc[dfc.tournament == 'Friendly']\ndf2 = dfc[dfc.tournament != 'Friendly']\ndf1['Total goals'] = df1['home_score'] + df1['away_score']\ndf2['Total goals'] = df2['home_score'] + df2['away_score']\ndf1_totalg = df1['Total goals'].sum()\ndf2_totalg = df2['Total goals'].sum()","51c205f3":"tot = df2_totalg + df1_totalg\ntot0 = ((df2_totalg - df1_totalg) \/ tot) * 100\nprint('Goals scored in all friendly games are {}, and goals scored in offical games are {}. \\nWhich means that during official games, {:.2f}% more goals are scored.'.format(df1_totalg, df2_totalg, tot0))","dcf9f84e":"#We will create 2 data frames both for home games and away games. This has purpose of analyzing  teams performance when playing at home vs away","0c9116da":"#HOME GAMES\n\nteams_list = dfc.country.unique()\n\nteams_list = dfc.country.unique()\nx = 0\n\nteams_scores = []\n\n\nfor n in range(teams_list.shape[0]):\n    x = 0\n    l1 = teams_list[n]\n    for i in dfc.home_team:\n        try:\n            if l1 == dfc.home_team[x]:\n                score = dfc.home_score[x] - dfc.away_score[x]\n                teams_scores.append((dfc.date[x], l1, score, dfc.home_score[x]))\n        except:\n            break\n        x += 1\n        \nd = {'main': teams_scores}\nteams_home_df = pd.DataFrame(data=d)\n\nteams_home_df['Date'], teams_home_df['Team'], teams_home_df['Score'], teams_home_df['Home goals'] = zip(*teams_home_df.main)\nteams_home_dfc = teams_home_df.copy()\nteams_home_dfc.drop('main', axis = 1, inplace = True)","7fb98cf0":"#AWAY GAMES\n\nteams_list = dfc.country.unique()\nx = 0\n\nteams_scores0 = []\n\n\nfor n in range(teams_list.shape[0]):\n    x = 0\n    l1 = teams_list[n]\n    for i in dfc.away_team:\n        try:\n            if l1 == dfc.away_team[x]:\n                score0 = dfc.away_score[x] - dfc.home_score[x]\n                teams_scores0.append((dfc.date[x], l1, score0, dfc.away_score[x]))\n        except:\n            break\n        x += 1\n        \nd = {'main': teams_scores0}\nteams_away_df = pd.DataFrame(data=d)\n\nteams_away_df['Date'], teams_away_df['Team'], teams_away_df['Score'], teams_away_df['Away goals'] = zip(*teams_away_df.main)\nteams_away_dfc = teams_away_df.copy()\nteams_away_dfc.drop('main', axis = 1, inplace = True)","0d4b6f04":"#Adding categorical variables to each game to easily quantify Losses, wins and draws","60959a2d":"conditions = [\n    (teams_away_dfc['Score'] < 0) ,\n    (teams_away_dfc['Score'] == 0) ,\n    (teams_away_dfc['Score'] > 0)]\nchoices = ['L', 'D', 'W']\nteams_away_dfc['W\/L0'] = np.select(conditions, choices, default='black')","74336c9d":"conditions = [\n    (teams_home_dfc['Score'] < 0) ,\n    (teams_home_dfc['Score'] == 0) ,\n    (teams_home_dfc['Score'] > 0)]\nchoices = ['L', 'D', 'W']\nteams_home_dfc['W\/L0'] = np.select(conditions, choices, default='black')","8ddd0ded":"phva_away = teams_away_dfc.groupby('W\/L0')['Team'].count().reset_index()\nphva_home = teams_home_dfc.groupby('W\/L0')['Team'].count().reset_index()\n\n#We can now have a statistical idea on how different games are if played on home field vs away","f6315945":"print(\"If a team is playing on their turf, the odds of them winning is {}%, as opposed to if \\nthey were playing away, it is {}%. \\n\".format(round((phva_home.Team[2] \/ phva_home.Team.sum() * 100), 2), \n                                                                                                                                          round((phva_away.Team[2] \/ phva_away.Team.sum() * 100), 2)))\nprint(\"{}% of the games played at home ended up in a loss, and {}% in a draw. When playing \\naway, {}% of the games ended up in a loss and {}% in a draw.\".format(\n                                                                                                                                                        round((phva_home.Team[1] \/ phva_home.Team.sum() * 100), 2) ,\n                                                                                                                                                        round((phva_home.Team[0] \/ phva_home.Team.sum() * 100), 2),\n                                                                                                                                                        round((phva_away.Team[1] \/ phva_away.Team.sum() * 100), 2),\n                                                                                                                                                        round((phva_away.Team[0] \/ phva_away.Team.sum() * 100), 2)\n                                                                                                                                                                ))","7f68704b":"teams_home_dfc.head(3)","bb004df8":"teams_away_dfc.head(3)","e78eb95c":"print(teams_home_dfc.describe().T, \"\\n\")\nprint(\"--------------------------------------\\n\\n\", teams_away_dfc.describe().T)","fd0c3312":"# Teams with the most wins and loses","08ef9c20":"WL_per_team = teams_home_dfc.groupby(['Team', 'W\/L0'])['W\/L0'].count().reset_index(name='count')\n\nW = WL_per_team[WL_per_team['W\/L0'] == 'W']\nD = WL_per_team[WL_per_team['W\/L0'] == 'D']\nL = WL_per_team[WL_per_team['W\/L0'] == 'L']           #Breaking down the DF\n\ntop10_W = W.sort_values(by = 'count', ascending = False ).head(10)\ntop10_L = L.sort_values(by = 'count', ascending = False ).head(10)\ntop10_D = D.sort_values(by = 'count', ascending = False ).head(10)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize = (20, 5))\nsns.set_style('darkgrid')\nax1.bar(top10_W['Team'], top10_W['count'], color = '#f092be', alpha = .7)\nax1.set_title('National teams with the most wins in history', fontsize = 15, color = '#002a61')\n\nax2.bar(top10_L['Team'], top10_L['count'], color = '#305382', alpha = .55)\nax2.set_title('National teams with the most losses in history', fontsize = 15, color = '#002a61')\nsns.set_style(\"darkgrid\")\n\nax1.set_xticklabels(labels, rotation=30) \nax2.set_xticklabels(labels, rotation=30)\n\nplt.show()","d4c9de97":"#Games played vs goals scored","630e890a":"#create a dataframe and get rid of negative values to compare games played to goals scored ","3993958a":"#Removing the negative values from the Score column \n\nteams_home_dfcc = teams_home_dfc.copy()\nteams_away_dfcc = teams_away_dfc.copy()\n\nx = 0\n\nfor i in teams_home_dfcc['Score']:\n    if teams_home_dfcc.Score[x] < 0:\n        teams_home_dfcc.Score[x] = 0\n    x += 1\n    \n#---------------------------------------------------\n\ns = 0\n\nfor n in teams_away_dfcc['Score']:\n    if teams_away_dfcc.Score[s] < 0:\n        teams_away_dfcc.Score[s] = 0\n    s += 1","c187a110":"grp_away = teams_away_dfcc.groupby('Team').agg({'Team': 'count',\n                                           'Away goals': 'sum'})\ngrp_home = teams_home_dfcc.groupby('Team').agg({'Team': 'count',\n                                           'Home goals': 'sum'})\n\n#Let's plot the \nplt.figure(figsize = (24, 8))\nplt.scatter(x = grp_away['Team'], y = grp_away['Away goals'])\nplt.scatter(x = grp_home['Team'], y = grp_home['Home goals'], color = '#f08b26')\nplt.title('Away Games VS home Games', fontsize = 20)\nplt.xlabel(\"Number Of Games Played\")\nplt.ylabel(\"Number Of Goals Scored\")\nplt.legend(labels=[\"Away goals\",\"Home goals\"])","0d64cdab":"print(\"We can see that we have a positive correlation between games played and goals scored. Even a stronger coorelation between Home goals and games played\")","3e0bd702":"# How many games in total ended up in a Loss, Draw, Win?","376ddd6a":"result = pd.concat([phva_away, phva_home], axis=1)\nresult['Tot'] = result.iloc[:,1] + result.iloc[:,3]\nresult.drop(result.columns.difference(['W\/L0','Tot']), 1, inplace=True)\n\nplt.figure(figsize = (15, 8))\nsns.barplot(x = result.iloc[:,0] , y = 'Tot', data = result, palette = 'BuPu', alpha = .5)\n\nplt.title(\"Games Results\", fontsize = 20)\nplt.xlabel(\"\")\nplt.ylabel(\"\")","76d1c5c9":"# Tournament analysis\n# The most popular tournaments in the world?","926cc116":"dfc.tournament.unique()","ea6e7fcb":"tournament = dfc.groupby(\"tournament\").count()\n\ntournament = tournament.drop(tournament.columns.difference(['date']), axis=1)\ntournament = tournament.rename(columns={'date': 'Count'})\ntournament = tournament.sort_values(by = 'Count', ascending = False).head(10)","158b2c4f":"x = tournament.index\ny = tournament.Count\n\nfig = go.Figure(data=[go.Bar(x=x, y=y)])\n\nfig.update_traces(marker_color='rgb(158,202,225)', marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5, opacity=0.6)\nfig.update_layout(title_text='The most popular tournaments')\nfig.show()","32a989c3":"#Top official tournaments by goals scored\n\ndfc['Total goals'] = dfc['home_score'] + dfc['away_score']\ntournament_goals = dfc.groupby('tournament').agg({'Total goals': 'sum'}).sort_values(by = \"Total goals\", ascending = False)\ntournament_goals.drop(['Friendly'], axis = 0, inplace = True)\ntournament_goals = tournament_goals.head(10)","a99b5b5c":"plt.figure(figsize = (15, 8))\nsns.barplot(x = 'Total goals', y = tournament_goals.index, palette = 'GnBu', data = tournament_goals, orient = 'h', alpha = .8)\n\nplt.title(\"Top Tournaments By Goals\", fontsize = 20)\nplt.xlabel(\"Goals\")\nplt.ylabel(\"\")","cb7c7b1b":"# Where most of the games were played?","212e1ffe":"countries = dfc.groupby(['date','country']).agg({'country': 'count'})\ncountries.rename(columns = {'country': 'count'}, inplace = True)\n\niso_alpha = pd.read_html('https:\/\/en.wikipedia.org\/wiki\/List_of_ISO_3166_country_codes')\niso_alpha0 = iso_alpha[0]\niso_alpha0 = pd.DataFrame(iso_alpha0.to_records())\n\niso_alpha0 = iso_alpha0.rename(columns={iso_alpha0.columns[1]: 'Country', \n                                       iso_alpha0.columns[5]: 'Country Code'})\n\niso_alpha0 = iso_alpha0.rename(columns={'Country': 'country'})\niso_alpha0.drop(iso_alpha0.columns.difference([\"country\", \"Country Code\"]), 1, inplace=True)\n\niso_alpha0['country_name0'] = iso_alpha0['country'].str.split('[').str[0]\niso_alpha0['country_name0'] = iso_alpha0['country_name0'].str.replace('Viet Nam', 'Vietnam')\niso_alpha0['country_name0'] = iso_alpha0['country_name0'].str.strip()\n\niso_alpha0.drop('country', axis = 1, inplace = True)\niso_alpha0.rename(columns = {'country_name0': 'country'}, inplace = True)\n\nmain = pd.merge(countries, iso_alpha0, on=\"country\")","a7e72376":"main = main.groupby(['country', 'Country Code']).agg({'count': 'sum'}).reset_index()","2361a819":"fig = go.Figure(data=go.Choropleth(\n    locations = main['Country Code'],\n    z = main['count'],\n    text = main['country'],\n    colorscale = 'OrRd',\n    autocolorscale=False,\n    reversescale=False,\n    marker_line_color='darkgray',\n    marker_line_width=0.5,\n    colorbar_tickprefix = '',\n    colorbar_title = 'Games played',\n))\n\nfig.update_layout(\n    title_text='Tournaments locations',\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    ),\n    annotations = [dict(\n        x=0.55,\n        y=0.1,\n        xref='paper',\n        yref='paper',\n        showarrow = False\n    )]\n)\n\nfig.show()","bb59a682":"## EDA","586a60db":"## Data cleaning & exploring"}}