{"cell_type":{"9348d6e8":"code","da34c4e7":"code","29696888":"code","1ce1e01c":"code","b206f554":"code","7350ee37":"code","c61796db":"code","184804ee":"code","b72e7d88":"code","25594805":"code","aee0e5dc":"code","affa9d61":"code","c76ff3d7":"code","cbde6fdb":"code","f3ea0aef":"code","ef3f57bc":"code","6c14f789":"code","7572a584":"code","4359b77b":"code","d6125b95":"code","39b7c059":"markdown","71e1a5ee":"markdown","3a45c282":"markdown","b8e1f4ef":"markdown"},"source":{"9348d6e8":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAL0AAAELCAMAAAC77XfeAAACGVBMVEX\/\/\/\/q0S9MXKrlNTw+lGMAAADsXEF3d3f8\/PzExMTs7OxqampMW6v4+PimpqZMWqx9fX1NWK6QkJA9l17Y2NjOzs6JiYnc3NyxsbHn5+esrKzj4+O2trZVVVVvb2\/x1CvJycnq1y6YmJiDg4OMjIxiYmKdnZ0+Pj4TExO\/v79AUqYqkGZcXFzrVTflJT0TJF03S6MlJSX0XDc1NTUhISHrTCo6XLAAAHgwO2pEf4JAjW5FeYo5OTlLS0vjER6cvcPh4uyOkab05+Sqt0m\/v0FChXrcyzVJZ55LYKWBir9HcJR7plZDgIC\/w91uollBiHVIbpdzXJn629fynZD4zcf2u7PngjfpUD\/ptTLpxDDkKDDNzuAADVTMTUXlwblZZ69Xm16uuUepr9J2gbuQrVC9vkLQxjp7hb3EyN9nc7SUnMirsdNFeohKZaF7SoaeS3HATFfyTiCaXIS5XG7xkIHRXFvve2jubVeIXI5kjnWBkHzymIuonnW8rWTKuVRlXJ93epSwXHXAsGBob5yclX6uo263hWXonjTmbjjorTPnfjfnlDXwnJ\/maTntiIvZ0b6FaxTDt5iDckslM4\/rc3e\/nkHOvI9xkqzWuGPawX\/fz6cKIYqswbOatavl4dJmmppLUnnhjwDfegDmsxPxzoXXAwPXW1YAAE\/nS1Hsw3H79dXUcWjIHhYAADjrtU715XTmZBnZopXqrWvKV8sKAAAXSUlEQVR4nNWdjWPbxnnGj1YggKCAMDQAEh+kGIKkBEdWREuWslVMKbVJm6XOGtWO7MhS0szN3Cbb0nRus7Zesi6eE9uR5uajjttk+ZgYJ3Q2a3\/h7g4gPu8o2hHD42uLAkGQ+uHl3T333B1B8L2H7qPHA4cIceQEYCa+34P+b8n0rWEzB\/FiD\/rHiPRzwrCZg3icTn\/4r0j0E88NGzkUqR7037mfQH\/\/E8NGDsUkveAc\/hsS\/ZGXho0cisnn6fQ\/mCDRbwwbORSTT9Hpf0iin5OGjRyKySfp9KSCc+jQsInDMXmOXm1JTQ5TlRZM\/pRK\/9ck+iMvDJs4HCm62BLFiqlKC1JUsSWL1Zw4bOJwpKhiSxSriSPDBo5EapJKTxKrib8bNnAkUlSxJYoVW5UW0tPElihWR84PGzgSKapcEcVqrjVs4EikJs\/Rig6xyRk2bzRSkzRvSBKriZ8PmzcaqcmfUehJvvDIL4bNG40UVWx\/RKJnyJGjSNHkiihWjFVaSE\/xhkSxYqzSQnqK2B7+cbK5Z8qRo0jR5OrwPyTp72es0iJ6sjc8TGjtWau0iJ4itqQmpzVs3FikaGJLEiumHDkKSE\/2hgSxYq7SohaTLLYEsWLLkaOA9ERvePjlZHPP1DAajhRFbElixZYjR5GiiC1JrJirtIie6A0JYjUxMWzYRKQoYksQq4m\/HzZsIlI0uUo2OYw5chQpilwRxIq9SovpSd6QIFasde6BS08S2+QgJmPDaDhQi0nwhgSxYmwYDUeKLLYEX8iaI0eRIsvV4R8n6dkaRsOB4AnekDCIyWCldemTckUYxGTNkaPA9ElveDjZ5DA2jIYjRRHbBD1zjhxFiiy2SallzpGjSJHFNilWLFZalz7hDQkzbiwtbPEjRZSrpFix58hRYPqEN0z6QiYrrUufENukWLHnyFFg+IQ3TIoVg5170KWPi21yxo09R44iRRbbpDcZNigxUkS5SogVe8NoODz6WLVNiBWbldajj3nDpFixWWm9FjPmDZNixdbCFj9SJLFNiBWLjhxFiiRXCbGKO3IlnU6rerBdzgfb+F0S63au7B2cztnGgNpbFz7mDRNiFR9Gq3EoFhS0XcLbnNHd78DfMt41hY9t4m1lkPT7iFXckWdcYk6F2zwX4KP9aQBUb1cN7sp62wPpoqaIchVvcuKd+y79dIge8Xn0xe4uEQjoVwP+yAOkj3rDhFjFHTmirM+4yUf0Fa\/IePQYXIM3Bfw2VBV4kxkgfVRs44OYCUeOKFUEVnfp0zqCjNCDAn4Y30oo\/wOkj3rD+IxbYhgNUZYRcdaldxBfqUuPS4tgYHoDFxp8OoOjj3jDxCBmwpFjejFEL7h1NElfhrc8cPLiAGttVK4SYpVw5H7ubTo9ajUr7vYgwMP0EW+YmHFLDKNh+nxQ7nHJ4SP0kqjk81C5ZnDlHSx9RGzjM27JYTRcayuuCGF60W0Tw\/TeoeVBJj9FkKvDsdQnHXm3vUdyhOgt1DyaRHrQcN+igdJHvGG8yUkMo3n08wAEalUEZPp05N5g6MNiGxer5MKWTIi4Sy9Q6HFHhx8sfViu4mKVHEbLhPS1Sy\/R6E10Vx8sfajaxsSKMIyGa63iKhSin3c7DWR6fMRAOgo+fcgbxsWK4Mj99n7KZct6NZNMj5pTbiDmrNtihrxhXKwIjtzX2oZLb3jZDatVYbox7XUsS4Nqdrr0IbGNixXBkfv00y59edrtLSd7CmqhzuM2f2aQ9CGxjYsVYRjNLzle7ssZt6wk6aeRVqGiszBI+pA3jC8PISxswfSo1ja9HnId7YjQA5d+GRV5wX2XBkhPFasJwjAaolRktx3HPYWyW7JD\/XvB7RtjCyNwXZM7KPpAbGNiRVrY0lUr1Lfx+zl+HxMsoErcwG8H6gwVqxzuSw+QPvCGMbEiDaP59KJH7\/kPj77SfVgAendzIIMKPn0gtjGxIg2jdekt4PXScHdA7NLjnpn3sHcmg+kq+PS+N4wNYhKH0SqZEgwNj0HJmVJGBUamVFNAHW7jJFdhW1NU8bEOPLF5YyDwAb0vtrFBTBYXtvjRpQ\/ENrY8hMWFLX749L5cxQYxWVzY4odP73vDmFgxOUfeDR\/el6vY8hAWF7b4EdD7chVtclhc2OJHQN\/1hlGxYnOOvBsBfVdsozNu5IUtTnQ6QTTKkYcFw5GMtL8dPJA38gOiP0cUK3KlXQ751IIB8jHjJ3JNsdstk2DfWJW9w+UDHggP6D2xjYkVudKGcw\/7N3nkb0MhcUXQTblgWKCKes8ojEHRd+Uq6gv7WNgyjejdbkz3lCQ8VBJEBffRhIDePVAIP6d7\/x7pPW8YFSvKHHmTE6tckdOAO1Wlc\/PQ+YnT3AJiyXMNrijCE7CQXZe4KdT5V000ZOvRN1GXU0a95jQyOOilqmikvwYdcJHjuYYAn+2OdfVL74ltdMaNMkcO6XPcDB6f1ODf17nlZQ52MGtcBe5Bj2B6bn6ZK0lcU1ng5s0pyKW79DI8ED66PMUJ09M1royeMA24xgxn8nBzHu6HljNWGveh97xhdMaN8vmwIqJX3NFVXHJsm5PmORF7EI3LI\/oZkbM1Toe5xyWHaxQ4tYDpbfRm5blcFf4uqpwFH0b0WYtTefjcbIWTipyJM9E\/PUmsKAtbML0aos9mEb3k0StdepszEX0OD1XB\/V16kVvOc5qThRWkjOhVRM8XEL3CZXOcZHMWdgf90z9P8IWUj5pQ6F0TEqHP+\/RZLqDnuEYenymN3uDgU++K\/smkWE38413RFwpqiB6+E7ZbchB9HdZlnz5nOUoverEMj+5j3DlEfy4pVhP\/RG7FKPRALgf0RWTOp0GXnmvIAb1pWAosOTat5Ig619eURYgey1VUrBZfuatyL3olJ+\/Sw7ZF7NILnB2i17mGwuU0v9aqQa116QEeKrobeuwNo2K1uL7aPz1stNGcLaQveSVnRgBB7pvFLn2Oy3FNmPYirObzGpfOufRN2OD49A00oXcX9K7YxpzVL8n0U2gqvOzSuz2FEiemvWF6NEo1JSI+aMclCTbd8Fj4lAWubODBWBGPocyg9OZQCbFxIng0rpiB9CUN0tf66lOE6LFcRcRq4ulfrhGfJcISIQqi6G0LoiTBbb3s1pIy2gf\/8\/MLsCi5xwJJBegoXBKlMnqmiqp4Ht54L6V4m\/i1ct2uUb\/02BtGxGri1eMn+3gNShiovBT3P44YM33NtoTgXbENNzmLv\/om9BY3vcDd40DOfH\/jnmH65+Nitdg+fure\/joOudm81w5xsdbXLGOY\/qm4L1w8dvSb0A8+wvRPxgcxXz929CfDBuwZYfpzcbF6bZToodhGxGrx344e\/edhA\/aMMP3PHorOuC1eGD\/662ED9oxwew+9YWTGbfHoKNFDsY0MYr5+bHz8N+Sn5WRNNzW5AlToIdKOmTU0UDEMpWDX03XRqBl6FViVigNyJkhDS54r1AtAzdVlgBxTBeQ1uQ5dcU4Clu5YQISy4FTgy2mFShqABhRdTdbSMm8oCvpbYs4w1H3okdiGmpyJ1yD9OBG+bsKbDBpdUuBfmkrnHWA6OfSIJQLYU4M9LFuEXZqKVMkAR8E7NAA79JaCjqqi5wKxgg6B9E1JhLpQ0IFlwnODVr1uATxIIclAVWT0tyhdtjD8ZFSsYKUdHz9KfFbVfWn4qqplWJYD6etmpWBAAN2j1+B5gLxTkbJlTC+UlDIAQgX7dglLcA75bku3xJrk0vNCDkg8QP9yPj0G19Br70P\/fESsYKUdHz9OpK+gXlYJLTdW81Vbd0zeyONTCuhtswDVVswBpwYtnmYUBAkWlXIZ07upRalH9LqegcdaFUME2UJR0ksWb2Z9+rrYZ+6fiojV4jiiJ5urbEEzVc2A77IqiXkrjwbONAsaQ5hBDb378H+9Dos5vFNS8A7EJ1dhDSjkqwA+t+rSF8yCCQyYe5xcdOZolIiXeIsHUh11RLMFW8evvQ\/9ufsiy0NQsT9O7uAzEhH6790XEiu30o4Q\/U\/vC4nVxKtHET3ZnjASkRbz+2GxWnxlxOhfDIvV4m9QrT36DezJ4CNC\/\/hD4f7xMUzPdAc\/Qj8ZEquJp0eaHlfakaL\/l4B+8VcuPdP2JEr\/2xB9exzT\/27YhL0iSv9mqNYec+mZNldR+t8H9E979Ezbkyj9xSNBpXXpafaEjYjS\/+tcrNLS7AkjEaFPvRjQtz14sj1hJKL0qYC+m3qyPWEkovCT93d7aa8f69IT7IlQAWIeNLt+wcSD10CU8Erpor92URLruornzgTkY3U8henkpT6mMu+N3u9jvubTEzr4YlG2ZVAqlc1C3hKNoqqUFFWsy03dkEwtVxBlyzQk2cnml8u6YcpA54SyUyupqmk5sqakkZ8aAP0bnjvBjpxKDzKKVgYLFd6esTPVkqYrzcqMWUgXbb6u14WZXK1WadqlimyXrGymOqWrU2rNqGZLtl2ry4Usb9cOZnFpjF7r0l8Y79KTOvgZRXXAslFM87at1euSUktzwFEy2ZpiVgp2LputlGw+7dh2OatVa6IxX8hYsp3NabZVSNvFMnF05hvTd8V2cbwnPZ4RyfAwrdVmLienFS4\/DdL1Ga1pSI3cVKVUqsxXlh0engW8VxShiV9wilmet\/mCpWUzduZgyn6M\/tIDsUpLtifu7JMkgpqgA0nQBVGowdorSTqsnLAWS5Jagb\/wDlOQ4PGSLpho2kqS4F5ROKDPccTo\/zAXcuR0ej\/K3Y18rBqKB7uEixKx9t4T26DSst3Bj9E\/7tG\/Mt6TXjUK6JOPGnCLbzZaiiultA4lQEEHFA+ucd+ffnIuVmnJ9kTJZJycmcum07JTqIMSbzm5vKPm0NBgBWRtx8xZhaaq8qAGND2Xr8KfnOykD\/oDe3F6b7L5WEBPsicSN1\/gbbmYhs1IlgczZsmCzUmuKNZ5rQjfClurGUYuzWfBglWqZO0an9VKJe1eJ2\/7pv\/3icCR97AnXFOFbXnRsO0sr4FMxi7DrUpJrGtaBtJX61OOJcNmH2SkXFmzeb6q2Vmrj5Vm34wei63nyHvYkxovLlRQe57laypoFnmlUW9UOKkwlZsB\/LxRzzpOc6bEg2ljATb9tdx8hS8pB\/6Zqzg9lqugcw+DZq5gGRZggJkGEOA\/CQgyWmiA7wA5I0MdkAR0g\/ehn7w2aHrsDd1htPH+zFXZb9nNoFKKDuFI5cA\/ZRunv\/hAtNKybU\/i9Fiung7Ts2xPYvTYG\/qOfOTokTeMVFra3A8TEYefPBJy5C49w7MnCXroDRePjSw9lKvXo\/QMz54k6O37D70apWd49iRB\/+YDoc49bu9Hif7SA4Ejd+kZticJ+otzi+MjSw+9YbTSMj17kqB\/fO61EaafnItWWqbnfpL0h6KVlum5nyT9D8ZjwfDcT5L+jaMxeobnfhL0D\/7Hejz5w2akR5L+6lgMnmFzlaS\/PBtLPsP2JEGfens2lnyG7UmS\/vTsWDT5DHfwk\/Sp2bGx0aV\/ENJHks+wPSHQj41Fkz9a9ONj0eQzbE8I9G\/Fks9wB59A\/8xsNPmjRX91Npr8kaJPXcb0QfIZticE+tOYPkg+w\/aEQH\/GpfeTz7A9IdCnXHo\/+QwvTSPAP+jCB8kfLfr1sWjy2TVXJPp3Ysln156Q6K\/MRpPPrj0h0T8zG00+u\/aERH+5S+8l\/ziT3zODgtRivu3TrzNuT0j0p336McY7+CT6MwH9+ujRPxjQ4+SzO\/dDpA\/gcfLZNVdE+vGxSPLZ7eAT6d+JJn\/E6K\/MRpLPrj0h0l+djSR\/tOhTl8P0YwzbEyL96Qj9Orv2hEh\/JkI\/xq49IdKnovTrzNoTIvyDUfoxZud+yPTrUfpnh01JCzL9eJT+UVbtCZn+Siz314aNSQky\/TOzo5F8Mv3V2dFIPpE+5A3ZTj6Z\/nScntHkk+nPxOnHHmVyXIFMH5crmPztYZOSgkIfh2c0+RT68QQ9k8mn0L8zGsmn0F9JFHwmk0+hj8sVTj57A4IU+ssEegaTT6ZPii2byafQJ+WKyeRT6FMkevaST4FPii1O\/nvDxo0FjX6dRH+wyf+4j2NaoNXrSz9o9EmxPdDkSzvSx\/8pijv7HfeLE2CJ+L0ZvenfItL3l3zR3O9qwDvXd\/64c9168\/rODpDcIB228e5z4MTSS1Lrbunj3rD\/5H93xcqb6Ltf6YZGuLjz8fsfSjfe\/\/iDD8B33SAc9sKh1ktzS++2lpZo+DR6ktji5O8zCyT9yftLhWn8pW82AM3GwpRUdL86zQ3zxvvXpQ8\/vCleuvEHyZSAia7mkYw\/g58vPbEBhHeXaJcAoNCT5aqP5P9JcC9VUGmoigysJg\/MpiBlS9OmrvsM5o0bN9RLF9\/cgb8FRy5U6wXShZN\/CA653ylHLTo0+oQ37C\/5K4hQ11s6\/uZLcUovgkIFgHRjqiAH3yAs3bjx5W8fe\/mxSzdufBgpYNEcPydA7PMb4PwS4avletITxRZHr+QLdUjQUlRBxh9jnqnni0JJBaA+P1PKhC6qDZP++7\/85aOLsOSDsqNYqpV3yqqTdiIX6BDffanVemHp\/NJd05PFdr\/kqzoQxLxSBnJDkuxcMVOaKTfh7vlGrFx\/fPOjj3b+6\/oObPNFRc+bCvoPa3v04ijCE39eWlp6YmmJ9g1hNHiCN+yj5DtA0FsbEEFscNzMMtyTrTWn5qfkae8b9oK49PJ3fvQB2ijrpp4XqW0sbExbLVrzRaUni+0+yQ+lTpEkQZCALoroAviwysbbjet\/dLVKNdKKmo6cWgArhfclz4FKT\/CG3WhT6XWgO5ZTdqy0ky+XHSfvQDB4P+84Tjp6ZZGLFz98\/yblZTY2zm9snDixsbHRgpvn3d8nNl5KFH8q\/RU6\/X5tfl8h3ry0Q2vGW63WiRYKEf5s4I0NvNk3PU2ueif\/Ww4qPckbHmjyDyJo9FSxxXFr2NheUOnpcoWSz8i6i3uj75H8r27ePLBhK2fFkYRPHkHxxt3Rk73hfsmXTn\/62Wef\/3doDzYE+JojaANdeMS76lTQltO0aGUFNTKtLx5++OGzd0vfC56a\/M\/v7F45tvs2wr+9uXl79b3tdufkte2x7ZOnTnV21051rt06Jd3q3Hpvdayz2Vkd27z1LDj57IUO2O50Et\/K80j6jRbUv7OIfuUu6cnesHfyb3766PHju8d3z8C8ttubF1a31jud1a1rm9dWOxduddZObbd\/snaq3Wlvr93abN8G7c7mGNjeO3ULbG+2N+Mt2Vlw9muowSj3X5AvokWnp3jDnsn\/8s6juxB\/9\/OvIP322IXVThuKQ2erc23t5F6nc2213emcFG63N6+Bzc6FPdDegw\/vddq\/A9sX2p2teO4t\/RMHrJylFpwe9BRv2DP5X362e+fTy7u7X37llZwLm+t7J7elzc3VTqfd2TvV3tzcBrsdSD+2CUvO7Qu32\/Bd6cADO53N+Cs6X69I4gpM\/dlHyPA96HuJLS35N09\/evrMmdP\/879we02S4P9VXJhxmVhdA6sowJp3A\/fCLQGsrWFfEk89rLZff\/HF2YfP0jLfgz7VS2xRPEtK\/tXLxz+789blrxCshFuXVdTquBc3AhJuXdD5oJPCj6\/hyx0JgNzKKm888vAnK\/QRCjo91Rv2Sv57u3c+u3pnF53Y1tbW2tYe2IM3a2tbq3tba\/D32tYWgPfhg2jn3hbYc7fQwXtUSGqjSqfvLVco+YTFdifH33rmrf\/7NUqv5CbV\/cF5l7zk+9+A6T60Bd8ZQYoB6mnHjbQjGytu9N+\/T\/Xwhn70SNZBhFuaWuWNlrNBvp4mHb632NKSP4BzgCaNMtbWi57uDb+t5O8bPeh7eMNvNfn3Rr+P2LKQ\/B70+4gtC8nvQb+fXDGQfDp9b2\/IRvJ70O8rtsNPfg\/6fcV2+MnvQb+\/XGF8Vun7gR\/umq9e9L29IQvJ70Xfj1wNNfn\/D5cCuE+QXPM5AAAAAElFTkSuQmCC',width=400,height=400)","da34c4e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport unicodedata\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","29696888":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/brics-world-bank-indicators\/BRICS Development Indicators\/Economy_Data.csv', delimiter=';', encoding = \"ISO-8859-1\", nrows = nRowsRead)\ndf.dataframeName = 'Economy_Data.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head()","1ce1e01c":"#Code by Md Redwan Karim Sony https:\/\/www.kaggle.com\/redwankarimsony\/space-missions-data-eda-temporal-analysis\n\n# Calculating\npercent_missing = df.isnull().sum() * 100 \/ len(df)\nmissing_value_df = pd.DataFrame({'column': df.columns,\n                                 'percent': percent_missing})\nmissing_value_df.sort_values('percent', inplace=True)\nmissing_value_df.reset_index(drop=True, inplace=True)\nmissing_value_df = missing_value_df[missing_value_df['percent']>0]\n\n# Plotting\nfig = px.bar(\n    missing_value_df, \n    x='percent', \n    y=\"column\", \n    orientation='h', \n    title='Columns with Missing Values', \n    height=200, \n    width=600\n)\nfig.show()","b206f554":"#Code from Tanay Mehta https:\/\/www.kaggle.com\/heyytanay\/police-shooting-eda-interactive-map\/comments\n\nfrom colorama import Fore, Style\n\ndef count(string: str, color=Fore.RED):\n    \"\"\"\n    Saves some work \n    \"\"\"\n    print(color+string+Style.RESET_ALL)","7350ee37":"def statistics(dataframe, column):\n    count(f\"The Average value in {column} is: {dataframe[column].mean():.2f}\", Fore.RED)\n    count(f\"The Maximum value in {column} is: {dataframe[column].max()}\", Fore.BLUE)\n    count(f\"The Minimum value in {column} is: {dataframe[column].min()}\", Fore.YELLOW)\n    count(f\"The 25th Quantile of {column} is: {dataframe[column].quantile(0.25)}\", Fore.GREEN)\n    count(f\"The 50th Quantile of {column} is: {dataframe[column].quantile(0.50)}\", Fore.CYAN)\n    count(f\"The 75th Quantile of {column} is: {dataframe[column].quantile(0.75)}\", Fore.MAGENTA)","c61796db":"statistics(df, \"Year\")","184804ee":"# Plot Year\nplt.style.use(\"classic\")\nsns.distplot(df['Year'], color='blue')\nplt.title(f\"Year [\\u03BC : {df['Year'].mean():.2f} conditions | \\u03C3 : {df['Year'].std():.2f} conditions]\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Count\")\nplt.show()","b72e7d88":"# Plot Value \nplt.style.use(\"classic\")\nsns.distplot(df['Value'], color='red')\nplt.title(f\" [\\u03BC : {df['Value'].mean():.2f} conditions | \\u03C3 : {df['Value'].std():.2f} conditions]\")\nplt.xlabel(\"Value\")\nplt.ylabel(\"Count\")\nplt.show()","25594805":"zaf = df[(df['CountryName']=='South Africa')].reset_index(drop=True)\nzaf.head()","aee0e5dc":"#Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\ncolor = plt.cm.GnBu(np.linspace(0,1,20))\nzaf[\"SeriesName\"].value_counts().sort_values(ascending=False).head(20).plot.pie(y=\"Value\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"\")\nplt.axis(\"off\")\nplt.show()","affa9d61":"fig = px.pie(zaf,\n             values=\"Value\",\n             names=\"SeriesName\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","c76ff3d7":"# Count Plot\nplt.style.use(\"classic\")\nplt.figure(figsize=(6, 4))\nsns.countplot(zaf['Year'], palette='Greens', **{'hatch':'\/','linewidth':3})\nplt.xlabel(\"Year\")\nplt.ylabel(\"Count\")\nplt.title(\"South Africa Economy Indicators\")\nplt.xticks(rotation=45, fontsize=8)\nplt.show()","cbde6fdb":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in zaf.SeriesName)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set2', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","f3ea0aef":"ax = sns.countplot(x = 'SeriesName',data=df,order=['Adjusted net national income (annual % growth)','Adjusted savings: energy depletion (% of GNI)', 'Current account balance (% of GDP)', 'Changes in inventories (current US$)'])\nfor p in ax.patches:\n        ax.annotate(format(p.get_height()), (p.get_x()+0.2, p.get_height()))\nplt.xticks(rotation=45)","ef3f57bc":"px.bar(df, x = 'Value', y = 'CountryName', color = 'CountryCode',orientation='h' , title='BRICS Education & Environ Indicators ',  height = 500 )","6c14f789":"px.histogram(df, x='Value', range_x=[-5, 50], color='CountryName')","7572a584":"px.pie(df, 'CountryName')","4359b77b":"#Code by Xhlulu   https:\/\/www.kaggle.com\/xhlulu\/android-or-ios-data-exploration\/comments\n\npx.scatter(df, x='CountryName', y='Value', color='CountryCode', log_y=True, marginal_y='box', range_x=[-20, 200])","d6125b95":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#2B3A67','#42a7f5','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Mar\u00edlia Prata, @mpwolke was Here.' )","39b7c059":"cade.gov.br","71e1a5ee":"#To avoid clumsy plotting, select a few columns.","3a45c282":"#Code from Tanay Mehta https:\/\/www.kaggle.com\/heyytanay\/police-shooting-eda-interactive-map\/comments","b8e1f4ef":"#Codes by Xhlulu   https:\/\/www.kaggle.com\/xhlulu\/android-or-ios-data-exploration\/comments"}}