{"cell_type":{"9828af2a":"code","d4ddd7df":"code","77cf9895":"code","2788a333":"code","b3b832f5":"code","80d79a09":"code","f07a5cf3":"code","992b84d0":"code","cc52e6ee":"code","dbc528ef":"code","82ee3ef7":"code","a6f1bdb2":"code","d68722ef":"code","0f1487da":"code","49357f10":"code","20f8d698":"code","042378c6":"code","ba0be2ee":"code","1fcf94a8":"code","4bd9b82b":"code","19899bd9":"markdown","2ee201ac":"markdown","2407d99d":"markdown","61ee570b":"markdown","38f93a68":"markdown","0fba623b":"markdown","a4636691":"markdown","4b97e452":"markdown","ce698723":"markdown","cc852c92":"markdown","bb836877":"markdown","54cb2fa9":"markdown","e2039efa":"markdown","311e5194":"markdown","91ff2328":"markdown","937d9976":"markdown","88ed12fa":"markdown"},"source":{"9828af2a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Pandas for managing datasets\nimport pandas as pd\n# Matplotlib for additional customization\nfrom matplotlib import pyplot as plt\n# include the following command to get the output of the plots within the notebook, just below the plot code\n%matplotlib inline\n# Seaborn for plotting and styling\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d4ddd7df":"# Read dataset\ndf = pd.read_csv('..\/input\/Pokemon.csv', index_col=0)","77cf9895":"# Display first 5 observations\ndf.head()","2788a333":"# Change the size of figures\n\nsns.set(rc={'figure.figsize':(11.7,8.27)})\n\n# alternatelively change them from matplotlib\nfrom matplotlib import rcParams\n\n# figure size in inches\nrcParams['figure.figsize'] = 11.7,8.27","b3b832f5":"# Recommended way\nsns.lmplot(x='Attack', y='Defense', data=df);\n \n# Alternative way\n# sns.lmplot(x=df.Attack, y=df.Defense)","80d79a09":"sns.lmplot(x='Attack', y='Defense', data=df,\n           fit_reg=False, # No regression line\n           hue='Stage');   # Color by evolution stage","f07a5cf3":"# Plot using Seaborn\nsns.lmplot(x='Attack', y='Defense', data=df,\n           fit_reg=False, \n           hue='Stage')\n \n# Tweak using Matplotlib (limits has to be set with it)\nplt.ylim(0, 200)\nplt.xlim(0, 200);","992b84d0":"# default Boxplot\nsns.boxplot(data=df);","cc52e6ee":"# Pre-format DataFrame\n# We can remove the Total since we have individual stats.\n# We can remove the Stage and Legendary columns because they aren't combat stats.\nstats_df = df.drop(['Total', 'Stage', 'Legendary'], axis=1)\n \n# New boxplot using stats_df\nsns.boxplot(data=stats_df);","dbc528ef":"# Set theme\nsns.set_style('whitegrid') # alternative here is 'darkgrid'\n \n# Violin plot\nsns.violinplot(x='Type 1', y='Attack', data=df);\n\n#As you can see below, Dragon types tend to have higher Attack stats than Ghost types, but they also have greater variance.","82ee3ef7":"# define a color palette with custom colors\npkmn_type_colors = ['#78C850',  # Grass\n                    '#F08030',  # Fire\n                    '#6890F0',  # Water\n                    '#A8B820',  # Bug\n                    '#A8A878',  # Normal\n                    '#A040A0',  # Poison\n                    '#F8D030',  # Electric\n                    '#E0C068',  # Ground\n                    '#EE99AC',  # Fairy\n                    '#C03028',  # Fighting\n                    '#F85888',  # Psychic\n                    '#B8A038',  # Rock\n                    '#705898',  # Ghost\n                    '#98D8D8',  # Ice\n                    '#7038F8',  # Dragon\n                   ]\n# themes taken from http:\/\/bulbapedia.bulbagarden.net\/wiki\/Category:Type_color_templates\n\n# Violin plot with Pokemon color palette\nsns.violinplot(x='Type 1', y='Attack', data=df, \n               palette=pkmn_type_colors); # Set color palette","a6f1bdb2":"#Violin plots are great for visualizing distributions. However, since we only have 151 Pok\u00e9mon in our dataset,\n#we may want to simply display each point.\n#That's where the swarm plot comes in. This visualization will show each point, while \"stacking\" those with similar values:\n\n# Swarm plot with Pokemon color palette\nsns.swarmplot(x='Type 1', y='Attack', data=df, \n              palette=pkmn_type_colors);","d68722ef":"# Set figure size with matplotlib\nplt.figure(figsize=(10,6))\n \n# Create plot\nsns.violinplot(x='Type 1',\n               y='Attack', \n               data=df, \n               inner=None, # Remove the bars inside the violins\n               palette=pkmn_type_colors)\n \nsns.swarmplot(x='Type 1', \n              y='Attack', \n              data=df, \n              color='k', # Make points black\n              alpha=0.7) # and slightly transparent\n \n# Set title with matplotlib\nplt.title('Attack by Type');","0f1487da":"#First, here's a reminder of our data format:\nstats_df.head()","49357f10":"# Calculate correlations\ncorr = stats_df.corr()\n \n# Heatmap\nsns.heatmap(corr);","20f8d698":"# Histograms allow you to plot the distributions of numeric variables.\n\n\n# Distribution Plot (a.k.a. Histogram)\nsns.distplot(df.Attack)\nsns.distplot(df.Defense);","042378c6":"# Count Plot (a.k.a. Bar Plot)\nsns.countplot(x='Type 1', data=df, palette=pkmn_type_colors)\n \n# Rotate x-labels\nplt.xticks(rotation=-45);","ba0be2ee":"#Factor plots make it easy to separate plots by categorical classes.\n\n# Factor Plot\ng = sns.catplot(x='Type 1', \n                   y='Attack', \n                   data=df, \n                   hue='Stage',  # Color by stage\n                   col='Stage',  # Separate by stage: comment out this value if you want all the data on a single plot\n                   kind='swarm') # Swarmplot\n \n# Rotate x-axis labels\ng.set_xticklabels(rotation=-45);\n \n# Doesn't work because only rotates last plot\n# plt.xticks(rotation=-45)","1fcf94a8":"#Density plots display the distribution between two variables.\n\n#Tip: Consider overlaying this with a scatter plot.\n\n# Density Plot\nsns.kdeplot(df.Attack, df.Defense);","4bd9b82b":"# Joint Distribution Plot\nsns.jointplot(x='Attack', y='Defense', data=df);","19899bd9":"# Step 6: Seaborn themes.","2ee201ac":"# Step 4: Customizing with Matplotlib.","2407d99d":"## 10.4 - Cat Plot (old \"Factor Plot\")","61ee570b":"# Step 10: Pok\u00e9dex (mini-gallery).","38f93a68":"## 10.2 - Histogram","0fba623b":"Violin plots are useful alternatives to box plots.\nThey show the distribution (through the thickness of the violin) instead of only the summary statistics.\nFor example, we can visualize the distribution of Attack by Pok\u00e9mon's primary type","a4636691":"# The Ultimate Seaborn Tutorial\n\nbased on https:\/\/elitedatascience.com\/python-seaborn-tutorial","4b97e452":"# Step 9: Putting it all together.","ce698723":"## 10.3 - Bar Plot","cc852c92":"## Scatterplot arguments","bb836877":"## 10.5 - Density Plot","54cb2fa9":"# Step 8: Overlaying plots.","e2039efa":"## 10.6 - Joint Distribution Plot","311e5194":"# Step 7: Color palettes.","91ff2328":"It's pretty straightforward to overlay plots using Seaborn, and it works the same way as with Matplotlib. Here's what we'll do:\n\nFirst, we'll make our figure larger using Matplotlib.\nThen, we'll plot the violin plot. However, we'll set inner=None to remove the bars inside the violins.\nNext, we'll plot the swarm plot. This time, we'll make the points black so they pop out more.\nFinally, we'll set a title using Matplotlib.","937d9976":"# Step 5: The role of Pandas.","88ed12fa":"# Step 3: Seaborn's plotting functions"}}