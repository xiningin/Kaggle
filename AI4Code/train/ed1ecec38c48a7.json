{"cell_type":{"a8bff0d3":"code","5486876c":"code","8a564588":"code","f6964909":"code","ddedae6c":"code","7f4bab72":"code","be978d8c":"code","13202b15":"code","5fadb756":"code","6289bb66":"code","07ba5b8d":"code","2179f4a9":"code","efafebcd":"code","305560ad":"code","e8003f15":"code","6a89d93d":"code","a3a92625":"code","b0d3dd28":"code","68b98d60":"code","e344ef30":"code","346466b9":"code","efdee520":"code","5af5ad18":"code","74d07eaa":"code","8f53d213":"code","71a24859":"code","f6d8a787":"code","9bcee849":"code","db9c9638":"code","add5425e":"code","69e489ee":"code","22167e3a":"code","38b2f218":"code","298711bb":"code","025bb2b8":"code","b9e99285":"code","b8cf36e8":"code","4727e290":"code","7d11fb89":"code","70773274":"code","93900027":"code","2b64bc0f":"code","584d5bdd":"code","c33ca890":"code","64515a01":"code","0400fa4e":"code","279f0321":"code","d00393bd":"code","4153aff3":"code","940cb015":"code","b7a9d0ea":"code","34fabf9d":"code","1e746737":"code","aba1a50b":"code","20ba31d2":"code","082b7211":"code","3c81e19f":"code","4b303f01":"code","845f3315":"code","950be3ba":"code","90186926":"code","f99d3ebb":"code","09b82e85":"code","8c39008b":"code","a7519f8f":"code","8a498c8c":"code","1139ec5f":"code","36d4aff1":"code","5046d903":"code","78aa7ead":"code","6bd45c6b":"code","38743a00":"code","623e8504":"code","e0b3361f":"code","3ee36180":"code","f4474716":"code","89d5b108":"code","ecad5d53":"code","e0fa5adb":"code","7df239fb":"code","75a1630b":"code","758c92f4":"code","ccac68f2":"code","fd4d5890":"code","297eb669":"code","ed027f2d":"code","1712f3c1":"code","ef48cd88":"code","5d03a3e8":"code","85ea6383":"code","77e708bc":"code","edbf7249":"code","a06fb38b":"code","71755b2a":"code","9d80c7f2":"code","3ba68da6":"code","fe5f71d6":"code","645f4c48":"code","5d97a25e":"code","9300a2ef":"code","61278c93":"code","a6ba23fb":"code","7620be52":"code","8c1daf2f":"code","4501391c":"code","e94b6db4":"code","9fd4ed17":"code","52561f3c":"code","7500de47":"code","79a0fa16":"code","74702160":"code","eb2b833c":"code","ad3e559e":"code","209669ae":"code","36ed011f":"code","16b300d2":"code","fba66d68":"code","e158fbe7":"code","86cb3349":"code","f4d7e051":"code","eed8e041":"code","b140abef":"code","5c13d166":"code","c81d8c16":"code","4be8e393":"code","3ed14dda":"code","b0d4297c":"code","055e1332":"code","062f0512":"code","a68ee091":"code","fec71b0f":"markdown","c39b1fa9":"markdown","9ac7310c":"markdown","8c39ff55":"markdown","1c43d389":"markdown","5704afb1":"markdown","30a7b10a":"markdown","90a6dc49":"markdown","f472231c":"markdown","d9ae1526":"markdown","e44b0709":"markdown","209eae0a":"markdown","c6c27584":"markdown","98cea597":"markdown","a1096016":"markdown","f271bd9e":"markdown","fe88c227":"markdown","b5dae12c":"markdown","b079e10e":"markdown","1fa98c26":"markdown","f70aad3d":"markdown","6600d8e8":"markdown","10379f51":"markdown","f6d7f0c5":"markdown","1ee6a9b9":"markdown","9172ae20":"markdown","8d750e00":"markdown","ded3157d":"markdown","549c1b89":"markdown","2a7cd861":"markdown","a11dcf5b":"markdown","c94ba751":"markdown","a3920414":"markdown","c9ddc271":"markdown","58e18fbb":"markdown","d6b7bb73":"markdown","bff84a87":"markdown","343cfaa4":"markdown","4681b6c3":"markdown","ec423f7c":"markdown","fe52876e":"markdown","abd85d69":"markdown","db9d5524":"markdown","376ca647":"markdown","becf7a33":"markdown","86680c57":"markdown","7b2edcfc":"markdown","3c66fc6f":"markdown","eca6daae":"markdown","77dec911":"markdown","dbf663fa":"markdown","71157aa9":"markdown","6e175398":"markdown"},"source":{"a8bff0d3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5486876c":"tran=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","8a564588":"print(tran.shape,test.shape)","f6964909":"tran.head(10)","ddedae6c":"test.head(10)","7f4bab72":"test_id=test['Id']","be978d8c":"tran.drop('Id',axis=1,inplace=True)\ntest.drop('Id',axis=1,inplace=True)","13202b15":"print(tran.shape,test.shape)","5fadb756":"plt.figure(figsize=(20,15))\nsns.heatmap(tran.corr(),annot=True,fmt='.2f')\nplt.show()","6289bb66":"tran_corr_percentage=tran.corr().iloc[-1]\ntran_corr_percentage[tran_corr_percentage > 0.5].sort_values(ascending=False)","07ba5b8d":"high_corr_cols=['SalePrice','OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','1stFlrSF','FullBath','TotRmsAbvGrd']   \nsns.pairplot(tran[high_corr_cols])\nplt.show()","2179f4a9":"plt.scatter(tran['GrLivArea'],tran['SalePrice'])\nplt.show()","efafebcd":"tran.drop(tran[tran['GrLivArea']>4000].index,inplace=True)","305560ad":"tran.shape","e8003f15":"plt.scatter(tran['GrLivArea'],tran['SalePrice'])\nplt.show()","6a89d93d":"high_corr_cols=['SalePrice','OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','1stFlrSF','FullBath','TotRmsAbvGrd']   \nsns.pairplot(tran[high_corr_cols])\nplt.show()","a3a92625":"both_tran_test=pd.concat((tran,test),axis=0,sort=False)\nboth_tran_test.shape","b0d3dd28":"both_tran_test.tail()","68b98d60":"both_tran_test.info()","e344ef30":"data_null=((both_tran_test.isnull().sum()\/len(both_tran_test))*100).sort_values(ascending=False)\ndata_null_index=data_null[data_null !=0].index\nprint(data_null_index.shape)\ndata_null[data_null !=0]","346466b9":"plt.figure(figsize=(15,10))\nplt.bar(data_null_index,data_null[data_null_index])\nplt.xticks(rotation=60)\nplt.show()","efdee520":"data_null_index=list(data_null_index)\ndata_null_index","5af5ad18":"corr_data=both_tran_test[data_null_index].corr()\nplt.figure(figsize=(20,15))\nsns.heatmap(corr_data,annot=True,fmt='.3f')\nplt.show()","74d07eaa":"num_col_null=both_tran_test[data_null_index].select_dtypes(include=np.number).columns.tolist()\nnum_col_null.pop(0)","8f53d213":"num_col_null","71a24859":"for n in num_col_null:\n    both_tran_test[n].fillna(value=both_tran_test[n].mean(),inplace=True)","f6d8a787":"both_tran_test.isnull().any().sum()","9bcee849":"len(num_col_null)","db9c9638":"len(data_null_index)","add5425e":"non_num_cols=((both_tran_test.isnull().sum()\/len(both_tran_test))*100).sort_values(ascending=False)\nnon_num_cols=non_num_cols[non_num_cols !=0].index\nlen(non_num_cols)","69e489ee":"non_num_cols","22167e3a":"both_tran_test['PoolQC']=both_tran_test['PoolQC'].fillna(value='None')","38b2f218":"# Shed, gar2, other, tenc\nboth_tran_test['MiscFeature']=both_tran_test['MiscFeature'].fillna(value='None')","298711bb":"#grvl, pave\nboth_tran_test['Alley']=both_tran_test['Alley'].fillna(value='None')","025bb2b8":"both_tran_test['Fence']=both_tran_test['Fence'].fillna(value='None')","b9e99285":"both_tran_test['FireplaceQu']=both_tran_test['FireplaceQu'].fillna(value='None')","b8cf36e8":"for col in ('GarageCond', 'GarageFinish', 'GarageQual', 'GarageType'):\n    both_tran_test[col]=both_tran_test[col].fillna(value='None')","4727e290":"for col in ('BsmtExposure', 'BsmtCond', 'BsmtQual', 'BsmtFinType2', 'BsmtFinType1'):\n    both_tran_test[col]=both_tran_test[col].fillna(value='None')","7d11fb89":"both_tran_test['MasVnrType']=both_tran_test['MasVnrType'].fillna(value='None')","70773274":"both_tran_test['MSZoning']=both_tran_test['MSZoning'].fillna(value='None')","93900027":"both_tran_test.drop('Utilities',axis=1,inplace=True)","2b64bc0f":"both_tran_test['Functional']=both_tran_test['Functional'].fillna(value='Typ')","584d5bdd":"both_tran_test['Electrical']=both_tran_test['Electrical'].fillna(value=both_tran_test['Electrical'].mode()[0])","c33ca890":"both_tran_test['KitchenQual']=both_tran_test['KitchenQual'].fillna(value=both_tran_test['KitchenQual'].mode()[0])","64515a01":"both_tran_test['Exterior2nd']=both_tran_test['Exterior2nd'].fillna(value=both_tran_test['Exterior2nd'].mode()[0])","0400fa4e":"both_tran_test['SaleType']=both_tran_test['SaleType'].fillna(value=both_tran_test['SaleType'].mode()[0])","279f0321":"both_tran_test['Exterior1st']=both_tran_test['Exterior1st'].fillna(value=both_tran_test['Exterior1st'].mode()[0])","d00393bd":"#Checking is any missing values\nboth_tran_test_null_check=(both_tran_test.isnull().any().sum()\/len(both_tran_test)*100)\nboth_tran_test_null_check","4153aff3":"y=both_tran_test['SalePrice'][:(both_tran_test.shape[0]-test.shape[0])]\ny[:10]","940cb015":"both_tran_test.drop('SalePrice',axis=1,inplace=True)","b7a9d0ea":"both_tran_test.shape","34fabf9d":"# Target variable log transformation\nplt.hist(tran['SalePrice'],bins=30)\nplt.show()","1e746737":"tran['SalePrice']=np.log1p(tran['SalePrice'])\nplt.hist(tran['SalePrice'],bins=30)\nplt.show()","aba1a50b":"both_tran_test['MSSubClass'] =both_tran_test['MSSubClass'].astype(str)\nboth_tran_test['OverallCond']=both_tran_test['OverallCond'].astype(str)\nboth_tran_test['YrSold']=both_tran_test['YrSold'].astype(str)\nboth_tran_test['MoSold']=both_tran_test['MoSold'].astype(str)","20ba31d2":"from sklearn.preprocessing import LabelEncoder,StandardScaler\nle=LabelEncoder()\nss=StandardScaler()","082b7211":"both_tran_test.shape","3c81e19f":"# for label encoding we have to find categoricl columns \ncat_col=both_tran_test.select_dtypes(include='object').columns.tolist()","4b303f01":"len(cat_col)","845f3315":"for col in cat_col:\n    both_tran_test[col] = le.fit_transform(both_tran_test[col])","950be3ba":"both_tran_test.select_dtypes(include='number')","90186926":"for c in cat_col:\n    both_tran_test[c]=both_tran_test[c].astype(str)","f99d3ebb":"both_tran_test.select_dtypes(include='object')","09b82e85":"#get dummy categorical features\ndata_dummy=both_tran_test.copy()\ndata_dummy=pd.get_dummies(data_dummy,drop_first=True)\ndata_dummy.head()","8c39008b":"num_col=list(set(both_tran_test.columns)-set(cat_col))\nnum_col","a7519f8f":"data_ss=data_dummy.copy()","8a498c8c":"from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.model_selection import KFold,cross_val_score,train_test_split,GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import Lasso\nfrom sklearn.preprocessing import RobustScaler","1139ec5f":"rs=RobustScaler()\ndata_rs=rs.fit_transform(data_ss)","36d4aff1":"alpha={'alpha': np.arange(0.0001,1,0.005)}\nlasso=Lasso(max_iter=50000)","5046d903":"data_rs.shape","78aa7ead":"tran_rs=data_rs[:(data_rs.shape[0] -test.shape[0] )]\ntest_rs=data_rs[tran_rs.shape[0]:]","6bd45c6b":"test_rs.shape","38743a00":"data_ss.shape","623e8504":"tran_ss=data_ss[:(data_ss.shape[0] -test.shape[0] )]\ntest_ss=data_ss[tran_ss.shape[0]:]","e0b3361f":"test_ss.shape","3ee36180":"y_rs=rs.fit_transform(np.array(y).reshape(-1,1))\ny_rs.shape","f4474716":"xtran,xtest,ytran,ytest=train_test_split(tran_rs,y_rs,test_size=0.2,random_state=42)","89d5b108":"xtran1,xtest1,ytran1,ytest1=train_test_split(tran_ss,y,random_state=42)","ecad5d53":"kfold=KFold(n_splits=5,shuffle=True,random_state=42)","e0fa5adb":"lasso_cv=GridSearchCV(estimator=lasso,param_grid=alpha,cv=kfold,scoring='neg_mean_squared_error',return_train_score=True)","7df239fb":"lasso_cv.fit(xtran,ytran)","75a1630b":"lasso_cv.best_estimator_","758c92f4":"lasso_cv.best_params_","ccac68f2":"lasso=Lasso(**lasso_cv.best_params_)","fd4d5890":"lasso.fit(xtran,ytran)","297eb669":"y_pred_lasso=lasso.predict(xtest)","ed027f2d":"lasso_rmse=np.sqrt(mean_squared_error(ytest,y_pred_lasso))\nlasso_rmse","1712f3c1":"from sklearn.linear_model import Ridge","ef48cd88":"rdge=Ridge(max_iter=500000)\nalphas={'alpha': np.arange(0.0001,20,0.05)}","5d03a3e8":"rdge_cv=GridSearchCV(rdge,param_grid=alphas,scoring='neg_mean_squared_error',cv=kfold,return_train_score=True)","85ea6383":"rdge_cv.fit(xtran,ytran)","77e708bc":"rdge_cv.best_score_","edbf7249":"rdge_nor=Ridge(**rdge_cv.best_params_)","a06fb38b":"rdge_nor.fit(xtran,ytran)","71755b2a":"y_pred_rdge=rdge_nor.predict(xtest)","9d80c7f2":"rdge_rmse=np.sqrt(mean_squared_error(ytest,y_pred_rdge))\nrdge_rmse","3ba68da6":"rf=RandomForestRegressor()","fe5f71d6":"params={'n_estimators':[70,90,110,130,150,160,170,180,190,200,210,220],\n       'max_features': ['auto','sqrt','log2'],\n       'min_samples_split': [2,3,4,8],\n       'bootstrap': ['True','False']}","645f4c48":"rf_grid=GridSearchCV(rf,param_grid=params,cv=kfold,n_jobs=-1,scoring='neg_mean_squared_error',\n                     return_train_score=True)","5d97a25e":"rf_grid.fit(xtran1,ytran1)","9300a2ef":"rf_grid.best_estimator_","61278c93":"rf1=RandomForestRegressor(**rf_grid.best_params_)","a6ba23fb":"rf1.fit(xtran1,ytran1)","7620be52":"y_pred_rf=rf1.predict(xtest1)","8c1daf2f":"rf_rmse=np.sqrt(mean_squared_error(ytest1,y_pred_rf))\nrf_rmse","4501391c":"rf_nor=y.max()-y.min()\nnormalize_rmse_rf=rf_rmse\/rf_nor\nnormalize_rmse_rf","e94b6db4":"gbdt=GradientBoostingRegressor()","9fd4ed17":"params={'learning_rate': [0.001,0.01,0.05,0.2,0.5,0.080,0.070,0.065,0.075],\n       'n_estimators':[90,110,130,150,160,170,180,190,200,210,220,230],\n       'max_depth': [1,2,3,5,7,9],\n       'max_features': ['sqrt','log2']}","52561f3c":"gbdt_grd=GridSearchCV(gbdt,param_grid=params,cv=kfold,n_jobs=-1)","7500de47":"gbdt_grd.fit(xtran1,ytran1)","79a0fa16":"gbdt_grd.best_estimator_","74702160":"gbdt_grd.best_score_","eb2b833c":"gbdt_grd.best_params_","ad3e559e":"gbdt_1=GradientBoostingRegressor(**gbdt_grd.best_params_)","209669ae":"gbdt_1.fit(xtran1,ytran1)","36ed011f":"y_pred_gbdt=gbdt_1.predict(xtest1)\nrmse_gbdt=np.sqrt(mean_squared_error(ytest1,y_pred_gbdt))\nrmse_gbdt","16b300d2":"gbdt_nor=y.max()-y.min()\nnormalize_rmse_gbdt=rmse_gbdt\/gbdt_nor\nnormalize_rmse_gbdt","fba66d68":"import tensorflow as tf","e158fbe7":"xtran.shape[0]","86cb3349":"model=tf.keras.models.Sequential([\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(64,activation='relu'),\n    tf.keras.layers.Dense(32,activation='relu'),\n    tf.keras.layers.Dense(64,activation='relu'),\n    tf.keras.layers.Dense(1)\n])","f4d7e051":"model.compile(loss='mean_squared_error',\n             optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n             metrics=['mse'])","eed8e041":"hstry=model.fit(xtran,ytran,epochs=200,validation_data=(xtest,ytest))","b140abef":"model.evaluate(xtest,ytest)","5c13d166":"y_pred_nn=model.predict(xtest)","c81d8c16":"rmse_nn=tf.keras.losses.mean_squared_error(y_pred_nn,ytest)\nrmse_nn=np.mean(rmse_nn)\nrmse_nn=np.sqrt(rmse_nn)\nrmse_nn","4be8e393":"model_lst={'model_name':['lasso','ridge','random forest','GBDT','nn'],\n          'RMSE': [lasso_rmse,rdge_rmse,normalize_rmse_rf,normalize_rmse_gbdt,rmse_nn]}","3ed14dda":"pd.DataFrame(model_lst)","b0d4297c":"sub_pred=gbdt_1.predict(test_ss)\nsub_new=pd.DataFrame(sub_pred,index=test_id)","055e1332":"sub_new=sub_new.rename(columns={0:'SalePrice'})","062f0512":"sub_new.head()","a68ee091":"sub_new.to_csv('submission.csv')","fec71b0f":"# Drop the train and test dataset index id","c39b1fa9":"# Ridge regressor ","9ac7310c":"# Normalization of rmse value is needed because here non scaled data is used.","8c39ff55":"# Importing necessary libraries ","1c43d389":"# the tran_ss and test_ss are non encoded versions","5704afb1":"# Spliting the dataset into test and train..","30a7b10a":"After log transformation of saleprice column ","90a6dc49":"# Taking saleprice column separatly for encoding purposes","f472231c":"# From the above Dataframe GBDT algorithm performed best... So this model is taken for further prediction","d9ae1526":"> # The pair plot for high corr coeff features where the outlier is removed.","e44b0709":"# Listing numeric null columns","209eae0a":"List of categorical columns","c6c27584":"# Droping the Utilities column which have very less corr.","98cea597":"# Checking is there any null columns but here there is small percentage which represent saleprice column.. Kindly ignore it because when we again split it as train and test dataset.","a1096016":"# **  Data preprocessing**","f271bd9e":"# Converting categorical column to str from numeric...","fe88c227":"> # Correlation analysis of numeric features ","b5dae12c":"# The prediction of house price consists of \n#                                           Data preprocessing\n#                                           Modelling\n#                                           Model comparison\n#                                           Best model for house prediction","b079e10e":"# Random Forest Regressor","1fa98c26":"# Filtering categorical columns for data imputation purposes","f70aad3d":"# Selecting categorical columns separately for encoding purpose.","6600d8e8":"> # Displaying null percentage with bar plot ","10379f51":"# Comparing Model's RMSE values","f6d7f0c5":"# #  1.Outliers removal\nAs per the documentation the outliers are mostly present in GrLivArea...\nRemoving those rows can help our model reduce errors ","1ee6a9b9":"# Again converting encoded features into str for creating dummy variables.","9172ae20":"> # After removing outlier, the no of rows in tran dataset is reduced to 1456. Then the new scatter fig is shown below. ","8d750e00":"# Analysing corr coeff of columns with null variables..","ded3157d":">","549c1b89":"Length of the null columns after filling numeric columns","2a7cd861":"# Filling the categorical columns with mean or the mode values  ","a11dcf5b":"# ","c94ba751":"> # The high corrcoeff features are listed for analysing any outliers present","a3920414":"# Concating both train and test dataset for imputation purposes","c9ddc271":"Importing encoder for converting categorical features","58e18fbb":"> # Filtering columns with null variables and calculating null percentage.","d6b7bb73":"> # Removing GrLivArea features whose value is greater than 4000 ","bff84a87":"> # Features with corrcoef higher than 0.5 analysied","343cfaa4":"# Lasso regressor with gridsearchcv is used to find best parameter ","4681b6c3":">  # From the above pairplot,the features like GrLivArea, garagearea, TotalBsmtSF and 1stFlrSF have outliers. So removing those outliers can improve model performance","ec423f7c":"The tran_rs and test_rs are robust scaler encoded datasets..","fe52876e":"Spliting tran and test dataset into xtran,xtest,ytran and ytest with test size of 0.2","abd85d69":"# Using robust scaler help reduce affect of outlier if incase any present..","db9d5524":"> # Displaying describtion of no of non null columns.","376ca647":"# Reading the training dataset and testing dataset.","becf7a33":"# Modelling ","86680c57":"Checking the shape of concated column after removing saleprice","7b2edcfc":"# Filtering null columns with numeric dtypes for data imputation purposes","3c66fc6f":"# Gradient based decision trees","eca6daae":"# Normalization of rmse value is needed because here non scaled data is used.","77dec911":"# The y_rs is robust scaler encoded of saleprice","dbf663fa":"# Iterating numeric null columns with mean to fill empty items.","71157aa9":"# Using neural network for regression ","6e175398":"> # Converting null columns into list for iterating purpose "}}