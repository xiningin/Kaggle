{"cell_type":{"20dd527a":"code","271deffc":"code","0acd8593":"code","0c6d80f1":"code","03247857":"code","aee67db0":"code","e5138ea9":"code","a36bf647":"code","44b0ee04":"code","feef3b83":"markdown","2f27b136":"markdown","32c8cfe2":"markdown","749e7e13":"markdown","202017c3":"markdown","cf294d29":"markdown"},"source":{"20dd527a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","271deffc":"movies = pd.read_csv('\/kaggle\/input\/imdb-extensive-dataset\/IMDb movies.csv')\nmovies.head()","0acd8593":"prod_comp_stats = pd.read_csv(\n    '\/kaggle\/input\/features-based-upon-imdb-movies-dataset\/'\n    'IMDb production_companies_stats.csv', index_col='production_company')\nprod_comp_stats.rename(columns={c: 'prod_comp_'+c\n                                for c in prod_comp_stats.columns}, inplace=True)\nmovies = pd.merge(movies, prod_comp_stats, left_on='production_company',\n                  right_index=True, how='left')","0c6d80f1":"names = pd.read_csv('\/kaggle\/input\/imdb-extensive-dataset\/IMDb names.csv')\nnames.head()","03247857":"name_to_id = {}\nfor _, row in names.iterrows():\n    name_to_id[row[\"name\"]] = row.imdb_name_id","aee67db0":"title_principals_stats = pd.read_csv('\/kaggle\/input\/features-based-upon-imdb-movies-dataset\/'\n                                     'IMDb title_principals_stats.csv')\ntitle_principals_stats.category = title_principals_stats.category.map({\n    'actor': 'actor',\n    'actress': 'actor',\n    'writer': 'writer',\n    'director': 'director'\n})\ntitle_principals_stats = title_principals_stats[title_principals_stats.category.notna()]\ntitle_principals_stats.set_index(['imdb_name_id', 'category'], inplace=True)\ntitle_principals_stats.head()","e5138ea9":"from tqdm import tqdm\n\n\nactors_writer_director_stats = []\nfor _, row in tqdm(movies.iterrows()):\n    row_stats_dfs = []\n    for movies_col in ['actors', 'director', 'writer']:\n        # To avoid concatenation of empty list\n        stats = [pd.DataFrame.from_dict(\n            {col: [np.nan] for col in title_principals_stats.columns})]\n        if row[movies_col] is not np.nan:\n            for name in row[movies_col].split(','):\n                try:\n                    name = name.strip()\n                    name_id = name_to_id[name]\n                    category = movies_col if movies_col != 'actors' else 'actor'\n                    stats.append(title_principals_stats.loc[name_id, category])\n                except:\n                    pass\n        # Average out all actors (or directors\/writers)\n        stats_df = pd.concat(stats, axis=0)\n        stats_df.rename({col: f'{movies_col}_{col}'\n                         for col in stats_df.columns}, axis=1, inplace=True)\n        stats_df = stats_df.mean()\n        stats_df = pd.DataFrame(data=[stats_df.values], columns=stats_df.index)\n        row_stats_dfs.append(stats_df)\n\n    # Concat actors, directors and writers stats\n    row_stats_df = pd.concat(row_stats_dfs, axis=1)\n    row_stats_df['imdb_title_id'] = row['imdb_title_id']\n    actors_writer_director_stats.append(row_stats_df)\n\nactors_writer_director_stats = pd.concat(actors_writer_director_stats, axis=0)\nactors_writer_director_stats.set_index('imdb_title_id', inplace=True)\nactors_writer_director_stats.head()","a36bf647":"movies = pd.merge(movies, actors_writer_director_stats, on='imdb_title_id')\nmovies.head()","44b0ee04":"movies.to_csv('IMDb movies enriched.csv', index=False)","feef3b83":"### Lets start with easy ones - production companies","2f27b136":"# This notebook generates part of [this dataset](https:\/\/www.kaggle.com\/hurrdurrrderp\/features-based-upon-imdb-movies-dataset?select=IMDb+production_companies_stats.csv) ","32c8cfe2":"#### Average out stats of all principals per movie ","749e7e13":"### Average out all statistics for actors and (potentially multiple) directors and writers for each movie \n\n#### Map all names in my_imdb onto imdb_name_id","202017c3":"## Join with some precomputed statistics for actors, directors, writers and production companies\nStatistics include (per age group): average movie score, best and worst movie score (without outliers)","cf294d29":"#### For simplicity rename actress to actor and keep only actors, writers and directors"}}