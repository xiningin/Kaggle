{"cell_type":{"902eada4":"code","0d21fb63":"code","f150369a":"code","c26a227e":"code","430a3d4f":"code","6b308234":"code","ba8b54b0":"code","8f9acf00":"code","f0b57c26":"code","1f74955c":"code","4ba822c7":"code","48655809":"code","abea3236":"code","892dba6a":"code","1875b02f":"code","82f3e93b":"code","6f722a72":"code","0c3b95f4":"code","036fe125":"code","ea0470fc":"code","5280e747":"code","b99f6f26":"code","c8f3bd54":"code","a5a0959b":"code","35ec422f":"code","63dbc2eb":"markdown","41ccaa8b":"markdown","0507d200":"markdown","9c480661":"markdown","1c3e7b90":"markdown","dda41ca3":"markdown","cae24455":"markdown","315809a5":"markdown","e08a8924":"markdown","44a9cdbe":"markdown","c7b9aba0":"markdown","352cd9ae":"markdown","7d6dfaba":"markdown","05a16701":"markdown","8e86b947":"markdown","9e687824":"markdown","7454ecb2":"markdown","cdd59ab5":"markdown","302a617c":"markdown"},"source":{"902eada4":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.image as mpimg\n%matplotlib inline\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nsns.set(style='white',context='notebook',palette='deep')\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","0d21fb63":"train=pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest=pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","f150369a":"train.head()","c26a227e":"y_train=train['label']\n\nX_train=train.drop(labels=['label'],axis=1)\n\ndel train\n\ng=sns.countplot(y_train)\ny_train.value_counts()","430a3d4f":"X_train.isna().any().describe()","6b308234":"test.isna().any().describe()","ba8b54b0":"X_train=X_train\/255.0\ntest=test\/255.0","8f9acf00":"#3dimension image --> (height=28px,width=28px,canal=1)\nX_train=X_train.values.reshape(-1,28,28,1)\ntest=test.values.reshape(-1,28,28,1)","f0b57c26":"# encode labels to one hot vectors (ex: 2 -->[0,0,1,0,0,0,0,0,0,0])\n\ny_train=to_categorical(y_train,num_classes=10)","1f74955c":"# set the random seed\nrandom_seed=2","4ba822c7":"X_train,X_val,y_train,y_val=train_test_split(X_train,y_train,test_size=0.1,random_state=random_seed)","48655809":"plt.imshow(X_train[0][:,:,0])","abea3236":"plt.imshow(X_train[1][:,:,0])","892dba6a":"plt.imshow(X_train[2][:,:,0])","1875b02f":"# set the cnn model\n# my CNN architecture is --> [[Conv2D->relu]*2 -> MaxPool2D --> Dropout]*2 --> Flatten --> Dense --> Dropout -->Output\n\nmodel=Sequential()\n\nmodel.add(Conv2D(filters=32,kernel_size=(5,5),padding='Same',activation='relu',input_shape=(28,28,1)))\nmodel.add(Conv2D(filters=32,kernel_size=(5,5),padding='Same',activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding='Same',activation='relu'))\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding='Same',activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\n# ANN\nmodel.add(Dense(256,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10,activation='softmax'))\n\n","82f3e93b":"#define the optimizer\noptimizer=RMSprop(lr=0.001,rho=0.9,epsilon=1e-08,decay=0.0)","6f722a72":"#compile the model\nmodel.compile(optimizer=optimizer,loss='categorical_crossentropy',metrics=['accuracy'])","0c3b95f4":"#set learning rate annealer\nlearning_rate_reduction=ReduceLROnPlateau(monitor='val_acc',\n                                         patience=3,\n                                         verbose=1,\n                                         factor=0.5,\n                                         min_lr=0.00001)","036fe125":"datagen=ImageDataGenerator(featurewise_center=False,\n                          samplewise_center=False,\n                          featurewise_std_normalization=False,\n                          samplewise_std_normalization=False,\n                          zca_whitening=False,\n                          rotation_range=10,\n                          zoom_range=0.1,\n                          width_shift_range=0.1,\n                          height_shift_range=0.1,\n                          horizontal_flip=False,\n                          vertical_flip=False)\ndatagen.fit(X_train)\n\n# don't applied vertical nor horizontal flip as it will lead to misclassify numbers 6 and 9","ea0470fc":"#fit the model\n\nhistory=model.fit_generator(datagen.flow(X_train,y_train,batch_size=32),\n                            epochs=30,\n                            validation_data=(X_val,y_val),\n                            verbose=2,\n                            steps_per_epoch=X_train.shape[0]\/\/32,\n                            callbacks=[learning_rate_reduction])\n                            ","5280e747":"fig,ax=plt.subplots(2,1)\nax[0].plot(history.history['loss'],color='b',label=\"Training loss\")\nax[0].plot(history.history['val_loss'],color='r',label=\"Validation loss\")\nlegend=ax[0].legend(loc='best',shadow=True)\n\nax[1].plot(history.history['accuracy'],color='b',label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'],color='r',label=\"Validation accuracy\")\nlegend=ax[1].legend(loc='best',shadow=True)","b99f6f26":"y_pred=model.predict(X_val)\ny_pred_classes=np.argmax(y_pred,axis=1)\ny_true=np.argmax(y_val,axis=1)\ncon_mat=confusion_matrix(y_true,y_pred_classes)\npd.DataFrame(con_mat,columns=np.arange(0,10,1),index=np.arange(0,10,1))","c8f3bd54":"results=model.predict(test)\nresults=np.argmax(results,axis=1)\nresults=pd.Series(results,name='Label')","a5a0959b":"submission=pd.concat([pd.Series(range(1,28001),name='ImageId'),results],axis=1)\nsubmission.to_csv(\"cnn_mnist_predict.csv\",index=False)","35ec422f":"pd.read_csv(\"cnn_mnist_predict.csv\").head(10)","63dbc2eb":"CNN converges faster on [0..1] data than on [0..255]","41ccaa8b":"### **Data Augmentation**","0507d200":"### **Please upvote the notebook if you like the way i had solve the problem, it will strenghthen my confidence and also feel free to ask questions or give any suggestions.**","9c480661":"## **label encoding**","1c3e7b90":"## **Import required libraries**","dda41ca3":"## **Data preparation**","cae24455":"## **Split training an validation set**","315809a5":"## **Final prediction on test data**","e08a8924":"## **Evaluate the model**","44a9cdbe":"## **check for null or missing values**","c7b9aba0":"we have similar counts of 10 digits","352cd9ae":"# **CNN **","7d6dfaba":"## **A very simple step by step approach to solve \"Digit recognition\" problem by using convolutional neural networks**","05a16701":"## **Reshape**","8e86b947":"## **Normalization**","9e687824":"## **Submission**","7454ecb2":"## **Visualization**\n    Some Examples","cdd59ab5":"there is no missing values in train and test dataset","302a617c":"## **Set the optimizer and annealer**"}}