{"cell_type":{"59f8b2dc":"code","6f5b1662":"code","3ab9b28a":"code","029ffba0":"code","097ff0ac":"code","22bbfc86":"code","896d776c":"code","acd05d0d":"code","40ec275f":"code","7d90037c":"code","824ae317":"code","f7c085f4":"code","e5c0a2d4":"code","b6384268":"code","72b14c25":"code","da26026a":"code","aa64abcd":"code","21c8bc15":"code","cbe219be":"code","f9e82b54":"code","417534dd":"code","7cfc2fd1":"code","0417d5fc":"code","701cd84d":"code","dfcf1ae7":"markdown"},"source":{"59f8b2dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6f5b1662":"!wget kaggle datasets download -d parulpandey\/coronavirus-cases-in-india\n","3ab9b28a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport datetime\nimport seaborn as sns","029ffba0":"df_covid = pd.read_csv(\"..\/input\/covid19-in-india\/covid_19_india.csv\")\n","097ff0ac":"df_covid.head()","22bbfc86":"states = df_covid['State\/UnionTerritory'].unique()\nm = len(states)\ntotal_cases_statewise = []\ntotal_IndianNational = []\ntotal_ForeignNational = []\ndeaths = []\ncured = []\n\nfor st in states:\n    total_cases_statewise.append(df_covid['Confirmed'][df_covid['State\/UnionTerritory']==st].max())\n    total_IndianNational.append(df_covid['ConfirmedIndianNational'][df_covid['State\/UnionTerritory']==st].max())\n    total_ForeignNational.append(df_covid['ConfirmedForeignNational'][df_covid['State\/UnionTerritory']==st].max())\n    deaths.append(df_covid['Deaths'][df_covid['State\/UnionTerritory']==st].max())\n    cured.append(df_covid['Cured'][df_covid['State\/UnionTerritory']==st].max())\n\nstates = np.array(states).reshape((m,1))\ntotal_cases_statewise = np.array(total_cases_statewise).reshape((m,1))\ntotal_IndianNational = np.array(total_IndianNational).reshape((m,1))\ntotal_ForeignNational = np.array(total_ForeignNational).reshape((m,1))\ndeaths = np.array(deaths).reshape((m,1))\ncured = np.array(cured).reshape((m,1))\n\n\nstates_data = np.hstack([states,total_cases_statewise,total_IndianNational,total_ForeignNational,deaths,cured])\nstates_data_df = pd.DataFrame(states_data,columns=['states','Confirmed','ConfirmedIndianNational','ConfirmedForeignNational','Deaths','Cured'])","896d776c":"\ncases_per_state = pd.Series(states_data_df['Confirmed'])","acd05d0d":"plt.style.use('seaborn')\nmy_colors = ['hotpink','aquamarine','lightgreen','gold','salmon']\nplt.figure(figsize=(20,20))\nax = cases_per_state.plot(kind='barh',color=my_colors,width=1)\nax.set_title('Covid 19 confirmed cases on {}'.format(datetime.date.today()),size=20)\nax.set_xlabel('No. of Confirmed Cases',size=20)\nax.set_ylabel('States & UTs',size=20)\nax.set_xlim(-20,6000)\nax.set_yticklabels(df_covid['State\/UnionTerritory'].unique(),size=15)\n#ax.grid(True)\nmy_colors = ['hotpink','aquamarine','lightgreen','gold','salmon']\nplt.style.use('seaborn')\n\nrects = ax.patches\n\n# For each bar: Place a label\nfor rect in rects:\n    # Get X and Y placement of label from rect.\n    x_value = rect.get_width()\n    y_value = rect.get_y() + rect.get_height() \/ 2\n\n    # Number of points between bar and label. Change to your liking.\n    space = 10\n    # Vertical alignment for positive values\n    ha = 'left'\n\n    # If value of bar is negative: Place label left of bar\n    if x_value < 0:\n        # Invert space to place label to the left\n        space *= -1\n        # Horizontally align label at right\n        ha = 'right'\n\n    # Use X value as label and format number with one decimal place\n    label = \"{:.0f}\".format(x_value)\n\n    # Create annotation\n    plt.annotate(\n        label,                      # Use `label` as label\n        (x_value, y_value),         # Place label at end of the bar\n        xytext=(space, 0),          # Horizontally shift label by `space`\n        textcoords=\"offset points\", # Interpret `xytext` as offset in points\n        va='center',                # Vertically center label\n        ha=ha)         \n","40ec275f":"#some of the values in the column are \"-\", replacing them with 0\ndf_covid['ConfirmedIndianNational'][df_covid['ConfirmedIndianNational'] == \"-\"] = 0\ndf_covid['ConfirmedIndianNational'].astype('float32')\ndf_covid['ConfirmedIndianNational'] = pd.to_numeric(df_covid['ConfirmedIndianNational'])\n\ndf_covid['ConfirmedForeignNational'][df_covid['ConfirmedForeignNational'] == \"-\"] = 0\ndf_covid['ConfirmedForeignNational'].astype('float32')\ndf_covid['ConfirmedForeignNational'] = pd.to_numeric(df_covid['ConfirmedForeignNational'])\n\n\n","7d90037c":"\nlabels = df_covid['State\/UnionTerritory'].unique()\nlabels.sort()\n\n\nnational = states_data_df['ConfirmedIndianNational']\nnational[national=='-'] = 0\nnational = national.values\nnational = national.astype(\"float32\")\n\nForeign = states_data_df['ConfirmedForeignNational']\nForeign[Foreign=='-'] = 0\nForeign = Foreign.values\nForeign = Foreign.astype('float32')\nwidth = 0.6  # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots(figsize=(30,20))\n\n\nax.bar(labels, national,width, label='National Cases',color='gold')\nax.bar(labels,Foreign, width, bottom=national,label='Foreign Cases',color='orangered')\nplt.xticks(rotation=90,size=15)\nax.set_ylabel('Cases Counts',size=20)\nax.set_xlabel('States\/UTs',size=20)\nax.set_title('IndianNatioanl Vs ForeignNational Cases ',size=20)\nax.legend()\n\nplt.show()","824ae317":"labels = 'Active Cases', 'Cured', 'Deceased'\ntotal = states_data_df['Confirmed'].sum()\ndeceased = states_data_df['Deaths'].sum()\/total\ncured = states_data_df['Cured'].sum()\/total\nactive = (total - (deceased+cured))\/total\nsizes = [active,cured,deceased]\nexplode = (0.1,0.1,0.1)  # only \"explode\" the 2nd slice (i.e. 'Hogs')\n\nfig1, ax1 = plt.subplots(figsize=(10,10))\n\n\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90,colors=['dodgerblue','springgreen','red'])\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title(\"Situation in India as on {}\".format(datetime.date.today()),size=(20))\n\nplt.show()","f7c085f4":"dates = df_covid['Date'].unique()\nl = len(dates)\nconfirmed_total = []\ndeaths_total = []\ncases_per_day=[]\nfor i,dt in enumerate(dates):\n  \n    confirmed_total.append(df_covid['Confirmed'][df_covid['Date']==dt].sum())\n    deaths_total.append(df_covid['Deaths'][df_covid['Date']==dt].sum())\n    cases_per_day.append((df_covid['Confirmed'][df_covid['Date']==dt].sum())-(df_covid['Confirmed'][df_covid['Date']==dates[i-1]].sum()))\n    \n    \ndates = np.array(dates).reshape(l,1)\nconfirmed_total = np.array(confirmed_total).reshape(l,1)\ndeaths_total = np.array(deaths_total).reshape(l,1)\ncases_per_day[0] = 1\ncases_per_day = np.array(cases_per_day).reshape(l,1)\n\n\ndate_wise_df = pd.DataFrame(np.hstack([dates,confirmed_total,deaths_total,cases_per_day]),columns=['Dates','Confirmed','Deaths','cases_per_day'])","e5c0a2d4":"plt.style.use('dark_background')\nx = np.arange(l)\nplt.figure(figsize=(30,20))\nplt.plot(x,date_wise_df['cases_per_day'],'bo-',color='gold',linewidth=2)\nplt.plot(x,date_wise_df['cases_per_day'],'r-',color='crimson',linewidth=2)\nplt.grid(False)\nplt.xlabel('Dates',size=20)\nplt.ylabel('Cases Counts',size=20)\nplt.xticks(x,date_wise_df['Dates'],rotation=90,fontsize=15)\nplt.title(\"New Cases Daily\",size=30)\n\n\nplt.show()","b6384268":"plt.style.use('Solarize_Light2')\nx = np.arange(l)\nplt.figure(figsize=(25,15))\nplt.plot(x,date_wise_df['Deaths'],'ro-',color='orangered',linewidth=2)\nplt.plot(x,date_wise_df['Deaths'],'o',color='black',linewidth=2)\nplt.grid(False)\nplt.xlabel('Dates',size=20)\nplt.ylabel('Total Death Counts',size=20)\nplt.xticks(x,date_wise_df['Dates'],rotation=90,fontsize=15)\nplt.title(\"Increment in Total Number of Deaths\",size=30)\nplt.show()\n","72b14c25":"#size of array will be len(states)*len(dates)\nm = len(states)\nn = len(dates)\ndeath_array = np.zeros((m,n))\nconfirmed_array = np.zeros((m,n))\n\n\nfor i,st in enumerate(states):\n    for j,dt in enumerate(dates):\n        \n        death_array[i][j] = df_covid['Deaths'][df_covid['State\/UnionTerritory']==st[0]][df_covid['Date']==dt[0]].sum()\n        confirmed_array[i][j] = df_covid['Confirmed'][df_covid['State\/UnionTerritory']==st[0]][df_covid['Date']==dt[0]].sum()\n        \n        \n        \n\n\ndeath_array = death_array.astype(\"int32\")\nconfirmed_array = confirmed_array.astype('int32')\n\nnew_death_array = np.zeros(death_array.shape)\nnew_confirmed_array = np.zeros(confirmed_array.shape)\n\nfor i in range(death_array.shape[0]):\n    for j in range(death_array.shape[1]):\n        \n        if(death_array[i][j] - death_array[i][j-1] > 0):\n            new_death_array[i][j] = death_array[i][j] - death_array[i][j-1]\n        else:\n            new_death_array[i][j] = death_array[i][j]\n        \n        \nfor i in range(confirmed_array.shape[0]):\n    for j in range(confirmed_array.shape[1]):\n        \n        if(confirmed_array[i][j] - confirmed_array[i][j-1] > 0):\n            new_confirmed_array[i][j] = confirmed_array[i][j] - confirmed_array[i][j-1]\n        else:\n            new_confirmed_array[i][j] = confirmed_array[i][j]\n            \n            \nnew_death_array = new_death_array.astype('int32')\nnew_confirmed_array = new_confirmed_array.astype('int32')","da26026a":"death_array = death_array.astype(\"int32\")\n\nnew_array = np.zeros(death_array.shape)\nfor i in range(death_array.shape[0]):\n    for j in range(death_array.shape[1]):\n        \n        if(death_array[i][j] - death_array[i][j-1] > 0):\n            new_array[i][j] = death_array[i][j] - death_array[i][j-1]\n        else:\n            new_array[i][j] = death_array[i][j]\n            \nnew_array = new_array.astype('int32')","aa64abcd":"columns = [dt[0] for dt in dates]\n#columns = dates\n#columns.insert(0,'States')\nConfirmed_heatmap = pd.DataFrame(new_confirmed_array,columns=columns,index=states)\nDeath_heatmap = pd.DataFrame(new_death_array,columns=columns,index=states)\n","21c8bc15":"plt.style.use('seaborn')\nplt.figure(figsize=(50,20))\nplt.yticks(size=20)\nplt.xticks(size=20)\n\n\nsns.heatmap(Confirmed_heatmap,linewidths=0.2,cmap=\"YlGnBu\",annot=True,fmt='d')\nplt.xlabel(\"DATES\",size=40)\nplt.ylabel('STATES',size=40)\nplt.title('Cases Count HeatMap',size=50)\nplt.show()","cbe219be":"plt.style.use('seaborn')\nplt.figure(figsize=(50,25))\nplt.yticks(size=20)\nplt.xticks(size=20)\n\n\nsns.heatmap(Death_heatmap,linewidths=0.2,cmap=\"YlOrBr\",annot=True,fmt='d')\nplt.xlabel(\"DATES\",size=40)\nplt.ylabel('STATES',size=40)\nplt.title('Death Count HeatMap',size=50)\nplt.show()","f9e82b54":"df_age = pd.read_csv(\"..\/input\/covid19-in-india\/AgeGroupDetails.csv\")\ndf_age.head()","417534dd":"df_age['Percentage_vals'] = df_age['Percentage']\nfor i in range(df_age.shape[0]): \n    df_age['Percentage_vals'][i] = float(df_age['Percentage'][i].strip('%'))\n    \nl = df_age.shape[0]\nplt.style.use('seaborn-pastel')\nplt.figure(figsize=(15,15))\n\nplt.pie(df_age['Percentage_vals'],labels=df_age['AgeGroup'],startangle=90,explode=[0.1,0.05]*(l\/\/2),autopct=\"%1.1f%%\",shadow=True)\nplt.title(\"Covid19 Impact on Different Age Groups\",size=20)\nplt.legend(df_age['AgeGroup'],loc='upper right')\nplt.show()\nprint(\"Chart shows people of age groups 20-29,30-39,40-49 are more prone to disease. This could be possible relying on the fact \\n that most of the people of these age groups belongs to working class of the population.\")","7cfc2fd1":"df_patients = pd.read_csv('..\/input\/covid19-corona-virus-india-dataset\/patients_data.csv')","0417d5fc":"df_patients.info()","701cd84d":"df_patients.head(20)","dfcf1ae7":"# **Date-wise analysis**\n\n"}}