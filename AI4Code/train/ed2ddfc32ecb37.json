{"cell_type":{"97dd16d4":"code","6caf3bed":"code","504418b6":"code","4181bbd1":"code","04ddafba":"code","3877dc55":"code","744f4e04":"code","6d92e108":"code","36acd409":"code","32c47246":"code","4ff00da4":"code","8e8f309b":"code","ff02549f":"code","94afc956":"code","5ccb3640":"code","868fa8a1":"code","b16f7639":"code","8db721fe":"code","2d1e70a7":"code","63ac2085":"code","10a32471":"code","2c1d8046":"code","99fe54b8":"code","3125c072":"code","cba08946":"code","2f88a75d":"code","98623a1c":"markdown","e23591f9":"markdown"},"source":{"97dd16d4":"!pip install tensorflow_decision_forests","6caf3bed":"!pip install wurlitzer","504418b6":"import tensorflow_decision_forests as tfdf\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\n","4181bbd1":"# Check the version of TensorFlow Decision Forests\nprint(\"Found TensorFlow Decision Forests v\" + tfdf.__version__)","04ddafba":"# Read in the data\ntrain = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv',index_col=0)\ntest  = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv', index_col=0)\ntrain.head()","3877dc55":"#creating a new column 'nan_count' that counts nan values per row\ntrain['nan_count']=train.isnull().sum(axis=1)\ntest['nan_count']=test.isnull().sum(axis=1)","744f4e04":"#splitting train and validation data\nxtrain = train.sample(frac=0.3, random_state=0)\nvalid = train.drop(xtrain.index).sample(frac=0.05, random_state=0)","6d92e108":"#cheking total numbers in each categories\nxtrain['claim'].value_counts().to_frame().T","36acd409":"\nvalid['claim'].value_counts().to_frame().T","32c47246":"#filling nan values with 0\n#xtrain=xtrain.fillna(0)\n#valid_data=valid.fillna(0)\n#test=test.fillna(0)","4ff00da4":"# Convert pandas dataframe into a TensorFlow dataset.\ntrain = tfdf.keras.pd_dataframe_to_tf_dataset(xtrain, label='claim')\nvalid = tfdf.keras.pd_dataframe_to_tf_dataset(valid, label='claim')\ntest = tfdf.keras.pd_dataframe_to_tf_dataset(test)","8e8f309b":"%%time\n\n# Train a Random Forest model.\n#model = tfdf.keras.RandomForestModel()\n\n# Train a Gradient Boosted Trees model.\nmodel = tfdf.keras.GradientBoostedTreesModel(num_trees=500)\nmodel.compile(metrics=[\"accuracy\"])\nmodel.fit(x=train, validation_data=valid)","ff02549f":"model.summary()","94afc956":"# The input features\nmodel.make_inspector().features()","5ccb3640":"# The feature importances\nmodel.make_inspector().variable_importances()","868fa8a1":"evaluation = model.evaluate(test, return_dict=True)\nprint()\n\nfor name, value in evaluation.items():\n    print(f\"{name}: {value: .4f}\")","b16f7639":"#save the model\nmodel.save(\"\/tmp\/my_saved_model1\")","8db721fe":"#plot the model\ntfdf.model_plotter.plot_model_in_colab(model, tree_idx=0, max_depth=3)","2d1e70a7":"model.make_inspector().evaluation()","63ac2085":"import matplotlib.pyplot as plt\nlogs = model.make_inspector().training_logs()\n\nplt.figure(figsize=(12, 4))\nplt.subplot(1, 2, 1)\nplt.plot([log.num_trees for log in logs], [log.evaluation.accuracy for log in logs])\nplt.xlabel(\"Number of trees\")\nplt.ylabel(\"Accuracy (out-of-bag)\")\nplt.subplot(1, 2, 2)\nplt.plot([log.num_trees for log in logs], [log.evaluation.loss for log in logs])\nplt.xlabel(\"Number of trees\")\nplt.ylabel(\"Logloss (out-of-bag)\")\nplt.show()","10a32471":"train = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv',index_col=0)\n","2c1d8046":"#creating a new column 'nan_count' that counts nan values per row\ntrain['nan_count']=train.isnull().sum(axis=1)\n\nxtrain = train.sample(frac=0.3, random_state=0)\nvalid = train.drop(xtrain.index).sample(frac=0.05, random_state=0)\nvalid_data = valid.fillna(0)","99fe54b8":"valid = tfdf.keras.pd_dataframe_to_tf_dataset(valid, label='claim')","3125c072":"predictions = model.predict(valid)\ny_true      = valid_data[\"claim\"]\n\nfrom sklearn.metrics import roc_auc_score\nROC_AUC = roc_auc_score(y_true, predictions)\nprint(\"The ROC AUC score is %.5f\" % ROC_AUC )","cba08946":"sample = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')\nsample['claim'] = model.predict(test)","2f88a75d":"sample.to_csv('submission.csv',index=False)","98623a1c":"### Reference: \nhttps:\/\/www.kaggle.com\/carlmcbrideellis\/classification-using-tensorflow-decision-forests\n\nhttps:\/\/www.tensorflow.org\/decision_forests\/tutorials\/beginner_colab","e23591f9":"As we see the dataset contains numerical and null values. TF-DF supports all types of features (i.e., numerical, categorial and null\/missing) and we don't need to any data preprocessing (e.g., one-hot-encoding, normalization). \n\nLabesl: Keras metrics expect integers. The label (```claim```) is already stored as integer, so we don't need to do any additional work here. "}}