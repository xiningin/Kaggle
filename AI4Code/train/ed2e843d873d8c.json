{"cell_type":{"6515104f":"code","dd6f476f":"code","c443d208":"code","dcbe0915":"code","46dd70f3":"code","58727640":"code","1ac3a8be":"code","e8d9f716":"code","53daf59b":"code","6a820eff":"code","859df840":"code","b8b36b9a":"code","b28e218c":"code","6dd5931f":"code","1697094c":"code","f42f692e":"code","88f8da18":"code","7e8bcbd3":"code","e4672c4a":"code","3cb993c6":"code","47295767":"code","0e3d60a8":"code","3ce8466f":"code","2e88fe3b":"code","9aaccef9":"code","ed68828f":"code","8335daa9":"code","7210ec44":"code","0fe8bdcc":"markdown","8432d58d":"markdown","9ddc7ff9":"markdown"},"source":{"6515104f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd6f476f":"import pandas as pd\n\ndf_peugot_1 = pd.read_csv(\"\/kaggle\/input\/traffic-driving-style-road-surface-condition\/peugeot_207_01.csv\", delimiter=';')\ndf_peugot_2 = pd.read_csv(\"\/kaggle\/input\/traffic-driving-style-road-surface-condition\/peugeot_207_02.csv\", delimiter=';')\n\ndf_corsa_1 = pd.read_csv(\"\/kaggle\/input\/traffic-driving-style-road-surface-condition\/opel_corsa_01.csv\", delimiter=';')\ndf_corsa_2 = pd.read_csv(\"\/kaggle\/input\/traffic-driving-style-road-surface-condition\/opel_corsa_02.csv\", delimiter=';')\n\n\n\ndf_new = pd.DataFrame(columns=list(df_corsa_1.columns))\nprint(df_new.head(5))\n\ndf_new = pd.concat([df_peugot_1, df_peugot_2, df_corsa_1, df_corsa_2], axis=0)\nprint(df_new.shape)","c443d208":"print(df_peugot_1.shape)\nprint(df_peugot_2.shape)\nprint(df_corsa_1.shape)\nprint(df_corsa_2.shape)","dcbe0915":"df_new.tail(5)","46dd70f3":"df_new.info()","58727640":"df_new.describe()\ndf_new = df_new.fillna(0)","1ac3a8be":"def process_col_values(df_new, col_name):\n    col_list = list(df_new[col_name])\n    processed_value = []\n    for each_value in col_list:\n        if each_value == 0:\n            processed_value.append(0)\n        elif type(each_value) == str:\n            processed_value.append(float(each_value.replace(\",\",\".\")))\n        else:\n            processed_value.append(float(each_value))\n    \n    df_new[col_name] = processed_value","e8d9f716":"cols_to_change = [\"AltitudeVariation\", \"VehicleSpeedInstantaneous\", \"VehicleSpeedAverage\", \"VehicleSpeedVariance\", \"VehicleSpeedVariation\",\n                 \"LongitudinalAcceleration\", \"EngineLoad\", \"EngineRPM\", \"MassAirFlow\", \"VerticalAcceleration\", \"FuelConsumptionAverage\"]\n\nfor col in cols_to_change:\n    print(col)\n    process_col_values(df_new, col)","53daf59b":"df_new.info()","6a820eff":"df_new.tail()","859df840":"road_surf_unique = list(df_new[\"roadSurface\"].unique())\ntraffic_unique = list(df_new[\"traffic\"].unique())\ndrivingStyle_unique = list(df_new[\"drivingStyle\"].unique())\n\nprint(road_surf_unique)\nprint(traffic_unique)\nprint(drivingStyle_unique)","b8b36b9a":"final_list = []\nfinal_list.extend(road_surf_unique)\nfinal_list.extend(road_surf_unique)\nfinal_list.extend(road_surf_unique)\nprint(final_list)","b28e218c":"one_hot_encoding = pd.get_dummies(df_new[['roadSurface', \"traffic\", \"drivingStyle\"]])\none_hot_encoding","6dd5931f":"one_hot_encoding['Target']= one_hot_encoding.values.tolist()\none_hot_encoding","1697094c":"df_processed = df_new.drop([\"roadSurface\", \"traffic\", \"drivingStyle\"], axis = 1)\ndf_processed['Target'] = one_hot_encoding['Target']\ndf_processed","f42f692e":"from sklearn.utils import shuffle\ndf_processed = shuffle(df_processed)","88f8da18":"x_train = df_processed.drop(['Target'], axis=1)\ny_train = np.array(df_processed['Target'].values.tolist())\nprint(x_train.shape)\nprint(y_train.shape)","7e8bcbd3":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x_train, y_train, test_size=0.2, random_state=1)\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","e4672c4a":"from sklearn import preprocessing\n\nmin_max_scaler = preprocessing.MinMaxScaler()\nx_scaled = min_max_scaler.fit(X_train)\n\nx_train_transformed = min_max_scaler.transform(X_train)\nx_test_transformed = min_max_scaler.transform(X_test)\n\n\nprint(x_train_transformed.shape)\nprint(x_test_transformed.shape)","3cb993c6":"print(y_train.shape)\nprint(y_test.shape)","47295767":"from sklearn.multioutput import MultiOutputClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nforest = RandomForestClassifier(random_state=1)\nmulti_target_forest = MultiOutputClassifier(forest, n_jobs=-1)\nmulti_target_forest.fit(x_train_transformed, y_train)","0e3d60a8":"y_test_predicted = multi_target_forest.predict(x_test_transformed)\ny_test_predicted","3ce8466f":"print(y_test.shape)\nprint(y_test_predicted.shape)","2e88fe3b":"from sklearn.metrics import accuracy_score\nscore = accuracy_score(y_test, y_test_predicted)\nscore","9aaccef9":"from sklearn.tree import DecisionTreeClassifier\n\nforest = DecisionTreeClassifier(random_state=1)\nmulti_target_forest = MultiOutputClassifier(forest, n_jobs=-1)\nmulti_target_forest.fit(x_train_transformed, y_train)\n\ny_test_predicted = multi_target_forest.predict(x_test_transformed)\nscore = accuracy_score(y_test, y_test_predicted)\nprint(score)","ed68828f":"cols = list(one_hot_encoding.columns)[:-1]\n\nordered_values =[]\nfor i in cols:\n    ordered_values.append(i.split(\"_\")[1])\n    \nprint(ordered_values)\nprint(len(ordered_values))","8335daa9":"print(y_test_predicted.shape)","7210ec44":"def convert_results(y_test_predicted, ordered_values):\n    final_prediction = []\n    for each_prediction in y_test_predicted:\n        sub_list = []\n        for i, j in enumerate(list(each_prediction)):\n            if j == 1:\n                sub_list.append(ordered_values[i])\n        final_prediction.append(sub_list)\n    return final_prediction\n\n\nfinal_prediction = convert_results(y_test_predicted, ordered_values)\nfinal_prediction[:10]","0fe8bdcc":"1. Standardize the data.\n2. Split the data into train, cross_Validate_test.\n3. Try out multiple models.\n4. Plot accuracuies for multiple models.\n\nTry out - \n\n1. Different imputation vlaues for Nan\n2. Try to0 balance the data if there is imbalance.\n3. Do exploratory data analysis.","8432d58d":"# Modelling","9ddc7ff9":"# Loading the dataset"}}