{"cell_type":{"c5d762f0":"code","d505546d":"code","21a26b7f":"code","a1b4a287":"code","e81739ca":"code","ec0746ff":"code","e5616f91":"code","ca52d65f":"code","687080e1":"code","d81194c7":"code","7e501092":"code","904cca57":"code","aa9cdba7":"code","476165e0":"code","0b341afc":"code","8fa1a061":"code","ee3db0ad":"code","30b8209a":"code","fc9372f6":"markdown","916554fa":"markdown","709d7d8e":"markdown","4fa1b577":"markdown","059e237a":"markdown","dd6262ce":"markdown"},"source":{"c5d762f0":"#importing libraries\nimport tensorflow as tf\nimport numpy as np\nfrom keras.preprocessing.image import ImageDataGenerator","d505546d":"#Preprocessing the Training set\n#Here size of image is reduced to 64x64, batch of images is kept as 32 and class is defined as 'binary'.\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\ntraining_set = train_datagen.flow_from_directory('..\/input\/cat-and-dog\/training_set\/training_set', target_size = (64, 64), batch_size = 32, class_mode = 'binary')","21a26b7f":"#Preprocessing the Test set\n#Applying same scale as training set, but only feature scaling is applied. image augmentation is avoided to prevent leakage of testing data.\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_set = test_datagen.flow_from_directory('..\/input\/cat-and-dog\/test_set', target_size = (64, 64), batch_size = 32, class_mode = 'binary')","a1b4a287":"#Initialising the CNN\ncnn = tf.keras.models.Sequential()","e81739ca":"#STEP 1: ADDING CONVOLUTIONAL LAYER\ncnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))\n\n#Note that in image augmentation we kept the image size as 64x64, therefore input_shape should also be same [64,64,3] (here 3 signifies that this is a colorful image (R,G,B))\n#Activation function relu is applied to decrease any linearity that might have arrised while applying filters.","ec0746ff":"#STEP 2: APPLYING MAX POLLING\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","e5616f91":"#Adding 2nd Convolutional layer\ncnn.add(tf.keras.layers.Conv2D(filters = 32,kernel_size = 3, activation = 'relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size = 2, strides = 2))","ca52d65f":"#STEP 3: FLATTENING\ncnn.add(tf.keras.layers.Flatten())","687080e1":"#STEP 4: FULL CONNECTION\ncnn.add(tf.keras.layers.Dense(units=128, activation='relu'))","d81194c7":"#STEP 5: OUTPUT LAYER\ncnn.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))","7e501092":"#Compiling the CNN\ncnn.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","904cca57":"#Training the CNN on the Training set and evaluating it on the Test set\ncnn.fit(x = training_set, validation_data = test_set, epochs = 25)","aa9cdba7":"from keras.preprocessing import image\nimage.load_img('\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/cats\/cat.1441.jpg')","476165e0":"from keras.preprocessing import image\ntest_image = image.load_img('\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/cats\/cat.1441.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n  prediction = 'dog'\nelse:\n  prediction = 'cat'","0b341afc":"print(prediction)","8fa1a061":"image.load_img('\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/dogs\/dog.1280.jpg')","ee3db0ad":"from keras.preprocessing import image\ntest_image = image.load_img('\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/dogs\/dog.1280.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n  prediction = 'dog'\nelse:\n  prediction = 'cat'","30b8209a":"print(prediction)","fc9372f6":"**Part 1 - Data Preprocessing**","916554fa":"It is done in 5 steps:\n\n1. Convolution\n2. Polling\n3. Flattening\n4. Full Connection\n5. Output Layer","709d7d8e":"**Part 2 - Building the CNN**","4fa1b577":"**Part 4 - Making a single prediction**","059e237a":"**Convolutional Neural Network to determine wheather the picture is of a dog or a cat.**","dd6262ce":"**Part 3 - Training the CNN**"}}