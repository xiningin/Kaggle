{"cell_type":{"4cb072fe":"code","f0cd111c":"code","a01455d4":"code","d130bff2":"code","ba692eaf":"code","12bf666c":"code","f4b30dfd":"code","13da30fd":"code","d44be0ea":"code","9eb31286":"code","bda809b8":"code","34f408dc":"code","c6826e22":"code","f2a9983d":"code","9f50fb81":"code","4144876e":"code","79ba8792":"code","ab6e5240":"code","3781fddc":"code","7c558aca":"code","c9531db2":"code","bafa06c2":"code","60272396":"code","b834abd5":"code","bad03074":"code","c43c8dcc":"code","24b2b3c0":"code","b72d8c5d":"code","65eadafc":"code","e877b264":"code","10973452":"code","ec9a53ea":"code","2b87d8f6":"code","9f8936ff":"code","389688e8":"code","777fd568":"code","2874c246":"code","744ee99e":"code","283b470c":"code","87445090":"code","e72d1be7":"code","4a3c6135":"markdown","e3df34b2":"markdown","8a38c3ab":"markdown","52a26598":"markdown","154ba1b3":"markdown","41de7d6e":"markdown","ea6e1dab":"markdown","d749964d":"markdown","8889b02e":"markdown","219b28ec":"markdown","bc15200b":"markdown","bb6d849d":"markdown","8c0dfbb8":"markdown","6bae46f8":"markdown","7316cd2d":"markdown","fb82f1d0":"markdown","031f5ada":"markdown","a2c33d57":"markdown","26ce2e77":"markdown","c283699e":"markdown","bd110424":"markdown","4bc97de2":"markdown","f147f1e0":"markdown"},"source":{"4cb072fe":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nimport seaborn as sns\nimport squarify\nfrom sklearn import preprocessing\npd.set_option('display.max_columns', 400)\npd.set_option('display.max_rows', 20100)","f0cd111c":"# load survey and continent data\nsurvey2020_df = pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\")\ncontinents_df = pd.read_csv(\"\/kaggle\/input\/2020-kaggle-survey-supporting\/2020 Continents.csv\")\ncontinents_dict = d = {k:v for k,v in zip(continents_df[\"Country\"],continents_df[\"Continents\"])}\n# delete the first row\nsurvey2020_df.drop(survey2020_df.index[0], inplace=True)\n# add continent columns\nsurvey2020_df[\"Continents\"] = survey2020_df[\"Q3\"].map(continents_dict)\n# replacing long name countries\ncountry_long_name_dict = {\"United States of America\": \"USA\", \n                          \"United Kingdom of Great Britain and Northern Ireland\": \"United Kingdom\",\n                          \"Iran, Islamic Republic of...\": \"Iran\"\n                         }\nsurvey2020_df[\"Q3\"] = survey2020_df[\"Q3\"].replace(country_long_name_dict)\n# replacing gender other than man and woman into others\ngender_dict = {\"Nonbinary\": \"Others\", \"Prefer not to say\": \"Others\", \"Prefer to self-describe\": \"Others\"}\nsurvey2020_df[\"Q2\"] = survey2020_df[\"Q2\"].replace(gender_dict)","a01455d4":"# splitting data into continents\nsurvey2020_asia_df = survey2020_df[survey2020_df[\"Continents\"]==\"Asia\"]\nsurvey2020_america_df = survey2020_df[survey2020_df[\"Continents\"]==\"America\"]\nsurvey2020_europe_df = survey2020_df[survey2020_df[\"Continents\"]==\"Europe\"]\nsurvey2020_africa_df = survey2020_df[survey2020_df[\"Continents\"]==\"Africa\"]\nsurvey2020_australia_df = survey2020_df[survey2020_df[\"Continents\"]==\"Australia\"]\nsurvey2020_others_df = survey2020_df[survey2020_df[\"Continents\"]==\"Others\"]","d130bff2":"# Continents\ncontinents_count_df = pd.DataFrame(survey2020_df[\"Continents\"].value_counts())\ncontinents_count_df.columns = [\"Count\"]\ncontinents_count_df[\"Percentage\"] = continents_count_df[\"Count\"].apply(lambda x: (x\/sum(continents_count_df[\"Count\"])*100))\ncontinents_count_df = pd.DataFrame(continents_count_df.unstack()).reset_index(drop=False)\ncontinents_count_df = continents_count_df.iloc[6:12, 1:3]\ncontinents_count_df.columns = [\"Continents\", \"Percentage\"]\ncontinents_count_df = continents_count_df.reset_index(drop=True)\ncontinents_count_df = continents_count_df.set_index('Continents')\ncontinents_count_df = continents_count_df.T\n\n# Asia\nasia_country_count_df = pd.DataFrame(survey2020_asia_df[\"Q3\"].value_counts())\nasia_country_count_df = asia_country_count_df.reset_index(drop=False)\nasia_country_count_df.columns = [\"Country\",\"Count\"]\n\n# America\namerica_country_count_df = pd.DataFrame(survey2020_america_df[\"Q3\"].value_counts())\namerica_country_count_df = america_country_count_df.reset_index(drop=False)\namerica_country_count_df.columns = [\"Country\",\"Count\"]\n\n# Europe\neurope_country_count_df = pd.DataFrame(survey2020_europe_df[\"Q3\"].value_counts())\neurope_country_count_df = europe_country_count_df.reset_index(drop=False)\neurope_country_count_df.columns = [\"Country\",\"Count\"]\n\n# Africa\nafrica_country_count_df = pd.DataFrame(survey2020_africa_df[\"Q3\"].value_counts())\nafrica_country_count_df = africa_country_count_df.reset_index(drop=False)\nafrica_country_count_df.columns = [\"Country\",\"Count\"]","ba692eaf":"# Setting up figure and axes\nfig = plt.figure(figsize=(10,16)) # create figure\ngs = fig.add_gridspec(3, 2)\ngs.update(wspace=0, hspace=0.8)\nax0 = fig.add_subplot(gs[0, 0:2])\nax1 = fig.add_subplot(gs[1, 0], ylim=(0, 6000)) # create axes\nax2 = fig.add_subplot(gs[1, 1], ylim=(0, 6000)) # create axes\nax3 = fig.add_subplot(gs[2, 0], ylim=(0, 600)) # create axes\nax4 = fig.add_subplot(gs[2, 1], ylim=(0, 600)) # create axes\n\n# Color selection\ncolor_map = [\"#bdbdbd\" for _ in range(5)]\ncolor_map[0] = \"#008294\"\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\nax2.set_facecolor(background_color) # axes background color\nax3.set_facecolor(background_color) # axes background color\nax4.set_facecolor(background_color) # axes background color\n\n# Continents\nax0.barh(continents_count_df.index, continents_count_df['Asia'],\n       color=\"#008294\", zorder=3, label=\"Asia\"\n)\nax0.barh(continents_count_df.index, continents_count_df['America'], \n       left=continents_count_df['Asia'],\n       color=\"#4b4b4c\", zorder=3, label=\"America\"\n)\nax0.barh(continents_count_df.index, continents_count_df['Europe'], \n       left=continents_count_df['America']+continents_count_df['Asia'],\n       color=\"#676767\", zorder=3, label=\"Europe\"\n)\nax0.barh(continents_count_df.index, continents_count_df['Others'], \n       left=continents_count_df['Europe']+continents_count_df['America']+continents_count_df['Asia'],\n       color=\"#808080\", zorder=3, label=\"Others\"\n)\nax0.barh(continents_count_df.index, continents_count_df['Africa'], \n       left=continents_count_df['Others']+continents_count_df['Europe']+continents_count_df['America']\n       +continents_count_df['Asia'],\n       color=\"#989898\", zorder=3, label=\"Africa\"\n)\nax0.barh(continents_count_df.index, continents_count_df['Australia'], \n       left=continents_count_df['Africa']+continents_count_df['Others']+continents_count_df['Europe']\n       +continents_count_df['America']+continents_count_df['Asia'],\n       color=\"#c6c6c6\", zorder=3, label=\"Australia\"\n)\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n\nax0.xaxis.set_major_formatter(mtick.PercentFormatter())    \nax0.legend(loc='lower center', ncol=6, bbox_to_anchor=(0.48, -0.3))\n\nax0.text(0, 0.8, \n         'Kagglers Continents', \n         fontsize=30, \n         fontweight='bold', \n         fontfamily='serif')\n\nax0.text(0, 0.7, \n         'with top 5 countries', \n         fontsize=18, \n         fontweight='light', \n         fontfamily='serif')\n\nax0.text(0, 0.53, \n         'From the most to the least Kagglers in the world are Asia, America, Europe', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\nax0.text(0, 0.45, \n         'Others, Africa and Australia', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\n\n# Asia\nasia_country = asia_country_count_df[\"Country\"]\nax1.bar(asia_country_count_df.iloc[0:5, 0], asia_country_count_df.iloc[0:5, 1], \n       color=color_map, zorder=3\n)\nax1.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax1.set_xticklabels(asia_country_count_df['Country'], rotation=90)\n\nax1.text(-1.2, 7500, \n         'Asian Kagglers', \n         fontsize=20, \n         fontweight='bold', \n         fontfamily='serif')\n\nax1.text(-1.2, 6950, \n         'India has the highest Kaggler in Asia even', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\nax1.text(-1.2, 6450, \n         'in the world, no other countries can match it', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\n# America\namerica_country = america_country_count_df[\"Country\"]\nax2.bar(america_country_count_df.iloc[0:5, 0], america_country_count_df.iloc[0:5, 1], \n       color=color_map, zorder=3\n)\nax2.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax2.set_xticklabels(america_country_count_df['Country'], rotation=90)\n\nax2.text(-0.5, 7500, \n         'American Kagglers', \n         fontsize=20, \n         fontweight='bold', \n         fontfamily='serif')\n\nax2.text(-0.5, 6950, \n         'USA Kagglers is dominating in America', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\nax2.text(-0.5, 6450, \n         'continent, leaving behind Brazil', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\n# Europe\neurope_country = europe_country_count_df[\"Country\"]\nax3.bar(europe_country_count_df.iloc[0:5, 0], europe_country_count_df.iloc[0:5, 1], \n       color=color_map, zorder=3\n)\nax3.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax3.set_xticklabels(europe_country_count_df['Country'], rotation=90)\n\nax3.text(-0.5, 740, \n         'European Kagglers', \n         fontsize=20, \n         fontweight='bold', \n         fontfamily='serif')\n\nax3.text(-0.5, 680, \n         'No dominating country as in Asia or', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\nax3.text(-0.5, 630, \n         'America continent', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\n# Africa\nafrica_country = africa_country_count_df[\"Country\"]\nax4.bar(africa_country_count_df.iloc[0:5, 0], africa_country_count_df.iloc[0:5, 1], \n       color=color_map, zorder=3\n)\nax4.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax4.set_xticklabels(africa_country_count_df['Country'], rotation=90)\n\nax4.text(-0.5, 740, \n         'African Kagglers', \n         fontsize=20, \n         fontweight='bold', \n         fontfamily='serif')\n\nax4.text(-0.5, 680, \n         'Nigeria is taking the lead of #no of', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\nax4.text(-0.5, 630, \n         'Kagglers in Africa', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\n# Remove top, right and left line \nfor s in [\"top\",\"right\",\"left\"]:\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    \nax0.set_yticklabels([])\nax2.set_yticklabels([])\nax4.set_yticklabels([])\n\nax2.tick_params(left=False)\nax4.tick_params(left=False)","12bf666c":"continents_count_df = pd.DataFrame(survey2020_df[\"Q1\"].value_counts())\ncontinents_count_df = continents_count_df.reset_index(drop=False)\ncontinents_count_df.columns = [\"Age\",\"Count\"]\ncontinents_count_df = continents_count_df.sort_values(by=\"Age\")\n\nasia_country_count_df = pd.DataFrame(survey2020_asia_df[\"Q1\"].value_counts())\nasia_country_count_df = asia_country_count_df.reset_index(drop=False)\nasia_country_count_df.columns = [\"Age\",\"Count\"]\nasia_country_count_df = asia_country_count_df.sort_values(by=\"Age\")\n\namerica_country_count_df = pd.DataFrame(survey2020_america_df[\"Q1\"].value_counts())\namerica_country_count_df = america_country_count_df.reset_index(drop=False)\namerica_country_count_df.columns = [\"Age\",\"Count\"]\namerica_country_count_df = america_country_count_df.sort_values(by=\"Age\")\n\neurope_country_count_df = pd.DataFrame(survey2020_europe_df[\"Q1\"].value_counts())\neurope_country_count_df = europe_country_count_df.reset_index(drop=False)\neurope_country_count_df.columns = [\"Age\",\"Count\"]\neurope_country_count_df = europe_country_count_df.sort_values(by=\"Age\")\n\nothers_country_count_df = pd.DataFrame(survey2020_others_df[\"Q1\"].value_counts())\nothers_country_count_df = others_country_count_df.reset_index(drop=False)\nothers_country_count_df.columns = [\"Age\",\"Count\"]\nothers_country_count_df = others_country_count_df.sort_values(by=\"Age\")\n\nafrica_country_count_df = pd.DataFrame(survey2020_africa_df[\"Q1\"].value_counts())\nafrica_country_count_df = africa_country_count_df.reset_index(drop=False)\nafrica_country_count_df.columns = [\"Age\",\"Count\"]\nafrica_country_count_df = africa_country_count_df.sort_values(by=\"Age\")\n\naustralia_country_count_df = pd.DataFrame(survey2020_australia_df[\"Q1\"].value_counts())\naustralia_country_count_df = australia_country_count_df.reset_index(drop=False)\naustralia_country_count_df.columns = [\"Age\",\"Count\"]\naustralia_country_count_df = australia_country_count_df.sort_values(by=\"Age\")","f4b30dfd":"# Setting up figure and axes\nfig = plt.figure(figsize=(10,20)) # create figure\ngs = fig.add_gridspec(7, 1)\ngs.update(wspace=0, hspace=0.5)\nax0 = fig.add_subplot(gs[0, 0], ylim=(0, 4500))\nax1 = fig.add_subplot(gs[1, 0], ylim=(0, 3000)) # create axes\nax2 = fig.add_subplot(gs[2, 0], ylim=(0, 800)) # create axes\nax3 = fig.add_subplot(gs[3, 0], ylim=(0, 600)) # create axes\nax4 = fig.add_subplot(gs[4, 0], ylim=(0, 400)) # create axes\nax5 = fig.add_subplot(gs[5, 0], ylim=(0, 400)) # create axes\nax6 = fig.add_subplot(gs[6, 0], ylim=(0, 60)) # create axes\n\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\nax2.set_facecolor(background_color) # axes background color\nax3.set_facecolor(background_color) # axes background color\nax4.set_facecolor(background_color) # axes background color\nax5.set_facecolor(background_color) # axes background color\nax6.set_facecolor(background_color) # axes background color\n\n# World\ncolor_map = [\"#bdbdbd\" for _ in range(11)]\ncolor_map[2] = \"#008294\"\n\nax0.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax0.bar(continents_count_df[\"Age\"], continents_count_df['Count'], \n       color=color_map, zorder=3\n)\n\nax0.text(-1.8, 4450, \n         'World', \n         fontsize=15, \n         fontweight='bold', \n         fontfamily='serif',\n        )\n\nax0.text(-1.8, 7000, \n         'Kagglers Age', \n         fontsize=20, \n         fontweight='bold', \n         fontfamily='serif',\n        )\n\nax0.text(-1.8, 6000, \n         'Most of Kagglers are young people that below 30 years old, the peak is at age 25-29 years old', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif',\n        )\n\n# Asia\ncolor_map = [\"#bdbdbd\" for _ in range(11)]\ncolor_map[0] = \"#008294\"\n\nax1.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax1.bar(asia_country_count_df[\"Age\"], asia_country_count_df['Count'], \n       color=color_map, zorder=3\n)\n\nax1.text(-1.8, 3300, \n         'Asia', \n         fontsize=15, \n         fontweight='bold', \n         fontfamily='serif',\n        )\n\n# America\ncolor_map = [\"#bdbdbd\" for _ in range(11)]\ncolor_map[2] = \"#008294\"\n\nax2.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax2.bar(america_country_count_df[\"Age\"], america_country_count_df['Count'], \n       color=color_map, zorder=3\n)\n\nax2.text(-1.8, 880, \n         'America', \n         fontsize=15, \n         fontweight='bold', \n         fontfamily='serif',\n        )\n\n# Europe\ncolor_map = [\"#bdbdbd\" for _ in range(11)]\ncolor_map[2] = \"#008294\"\n\nax3.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax3.bar(europe_country_count_df[\"Age\"], europe_country_count_df['Count'], \n       color=color_map, zorder=3\n)\n\nax3.text(-1.8, 660, \n         'Europe', \n         fontsize=15, \n         fontweight='bold', \n         fontfamily='serif',\n        )\n\n# Others\nax4.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax4.bar(others_country_count_df[\"Age\"], others_country_count_df['Count'], \n       color=color_map, zorder=3\n)\n\nax4.text(-1.8, 440, \n         'Others', \n         fontsize=15, \n         fontweight='bold', \n         fontfamily='serif',\n        )\n\n# Africa\ncolor_map = [\"#bdbdbd\" for _ in range(11)]\ncolor_map[1] = \"#008294\"\n\nax5.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax5.bar(africa_country_count_df[\"Age\"], africa_country_count_df['Count'], \n       color=color_map, zorder=3\n)\n\nax5.text(-1.8, 440, \n         'Africa', \n         fontsize=15, \n         fontweight='bold', \n         fontfamily='serif',\n        )\n\n# Australia\ncolor_map = [\"#bdbdbd\" for _ in range(11)]\ncolor_map[2] = \"#008294\"\n\nax6.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax6.bar(australia_country_count_df[\"Age\"], australia_country_count_df['Count'], \n       color=color_map, zorder=3\n)\n\nax6.text(-1.8, 66, \n         'Australia', \n         fontsize=15, \n         fontweight='bold', \n         fontfamily='serif',\n        )\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)\n    ax6.spines[s].set_visible(False)","13da30fd":"compensation_categorical_list = [\"$0-999\", \"1,000-1,999\", \"2,000-2,999\", \"3,000-3,999\", \"4,000-4,999\", \n                                 \"5,000-7,499\", \"7,500-9,999\", \"10,000-14,999\", \"15,000-19,999\", \n                                 \"20,000-24,999\", \"25,000-29,999\", \"30,000-39,999\", \"40,000-49,999\", \n                                 \"50,000-59,999\", \"60,000-69,999\", \"70,000-79,999\", \"80,000-89,999\", \"90,000-99,999\", \n                                 \"100,000-124,999\", \"125,000-149,999\", \"150,000-199,999\", \"200,000-249,999\", \n                                 \"250,000-299,999\", \"300,000-500,000\", \"> $500,000\"]\n\ncontinents_count_df = pd.DataFrame(survey2020_df[\"Q24\"].value_counts())\ncontinents_count_df = continents_count_df.reset_index(drop=False)\ncontinents_count_df.columns = [\"Compensation\",\"Count\"]\ncontinents_count_df[\"Compensation\"] = pd.Categorical(\n    continents_count_df[\"Compensation\"], compensation_categorical_list)\ncontinents_count_df = continents_count_df.sort_values(by=\"Compensation\")\n\nasia_country_count_df = pd.DataFrame(survey2020_asia_df[\"Q24\"].value_counts())\nasia_country_count_df = asia_country_count_df.reset_index(drop=False)\nasia_country_count_df.columns = [\"Compensation\",\"Count\"]\nasia_country_count_df[\"Compensation\"] = pd.Categorical(\n    asia_country_count_df[\"Compensation\"], compensation_categorical_list)\nasia_country_count_df = asia_country_count_df.sort_values(by=\"Compensation\")\n\namerica_country_count_df = pd.DataFrame(survey2020_america_df[\"Q24\"].value_counts())\namerica_country_count_df = america_country_count_df.reset_index(drop=False)\namerica_country_count_df.columns = [\"Compensation\",\"Count\"]\namerica_country_count_df[\"Compensation\"] = pd.Categorical(\n    america_country_count_df[\"Compensation\"], compensation_categorical_list)\namerica_country_count_df = america_country_count_df.sort_values(by=\"Compensation\")\n\neurope_country_count_df = pd.DataFrame(survey2020_europe_df[\"Q24\"].value_counts())\neurope_country_count_df = europe_country_count_df.reset_index(drop=False)\neurope_country_count_df.columns = [\"Compensation\",\"Count\"]\neurope_country_count_df[\"Compensation\"] = pd.Categorical(\n    europe_country_count_df[\"Compensation\"], compensation_categorical_list)\neurope_country_count_df = europe_country_count_df.sort_values(by=\"Compensation\")\n\nothers_country_count_df = pd.DataFrame(survey2020_others_df[\"Q24\"].value_counts())\nothers_country_count_df = others_country_count_df.reset_index(drop=False)\nothers_country_count_df.columns = [\"Compensation\",\"Count\"]\nothers_country_count_df[\"Compensation\"] = pd.Categorical(\n    others_country_count_df[\"Compensation\"], compensation_categorical_list)\nothers_country_count_df = others_country_count_df.sort_values(by=\"Compensation\")\n\nafrica_country_count_df = pd.DataFrame(survey2020_africa_df[\"Q24\"].value_counts())\nafrica_country_count_df = africa_country_count_df.reset_index(drop=False)\nafrica_country_count_df.columns = [\"Compensation\",\"Count\"]\nafrica_country_count_df[\"Compensation\"] = pd.Categorical(\n    africa_country_count_df[\"Compensation\"], compensation_categorical_list)\nafrica_country_count_df = africa_country_count_df.sort_values(by=\"Compensation\")\n\naustralia_country_count_df = pd.DataFrame(survey2020_australia_df[\"Q24\"].value_counts())\naustralia_country_count_df = australia_country_count_df.reset_index(drop=False)\naustralia_country_count_df.columns = [\"Compensation\",\"Count\"]\naustralia_country_count_df[\"Compensation\"] = pd.Categorical(\n    australia_country_count_df[\"Compensation\"], compensation_categorical_list)\naustralia_country_count_df = australia_country_count_df.sort_values(by=\"Compensation\")\n\n# Merging into 1 dataframe\ncontinents_count_df = continents_count_df.set_index(\"Compensation\")\nasia_country_count_df = asia_country_count_df.set_index(\"Compensation\")\namerica_country_count_df = america_country_count_df.set_index(\"Compensation\")\neurope_country_count_df = europe_country_count_df.set_index(\"Compensation\")\nothers_country_count_df = others_country_count_df.set_index(\"Compensation\")\nafrica_country_count_df = africa_country_count_df.set_index(\"Compensation\")\naustralia_country_count_df = australia_country_count_df.set_index(\"Compensation\")\nall_country_count_df = pd.DataFrame()\nall_country_count_df = pd.concat([\n    asia_country_count_df, america_country_count_df,\n    europe_country_count_df, others_country_count_df,\n    africa_country_count_df, australia_country_count_df\n    ], axis=1\n)\nall_country_count_df.columns = [\"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\"]\nall_country_count_df = all_country_count_df.fillna(0)\ncontinents_count_df.columns = [\"World\"]","d44be0ea":"# Setting up figure and axes\nfig = plt.figure(figsize=(15,10)) # create figure\ngs = fig.add_gridspec(2, 1)\ngs.update(wspace=0, hspace=-0.09)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[1, 0])\n\ncolors = [\"#fbfbfb\", \"#4b4b4c\",\"#008294\"]\ncolormap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\nsns.heatmap(ax=ax0, data=continents_count_df.T, linewidths=.1, vmin=0, vmax=2200,\n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False, cmap=colormap)\n\nsns.heatmap(ax=ax1, data=all_country_count_df.T, linewidths=.1, vmin=0, vmax=2200,\n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cmap=colormap)\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\n\nax0.set_xlabel(\"\")\nax1.set_xlabel(\"\")\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n    \nax0.text(0, -1, \n         'Kagglers Compensation', \n         fontsize=20, \n         fontweight='bold', \n         fontfamily='serif',\n        )\n\nax0.text(0, -0.4, \n         'Most of Kagglers are paid at $0-999\/year', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif',\n        )\n\nax0.set_yticklabels([\"World\"], rotation=0)\n\nax1.set_xticklabels([])\nax1.tick_params(bottom=False)","9eb31286":"survey2020_2_df = survey2020_df[survey2020_df[\"Q24\"]!=\"$0-999\"]\nsurvey2020_asia_2_df = survey2020_asia_df[survey2020_asia_df[\"Q24\"]!=\"$0-999\"]\nsurvey2020_america_2_df = survey2020_america_df[survey2020_america_df[\"Q24\"]!=\"$0-999\"]\nsurvey2020_europe_2_df = survey2020_europe_df[survey2020_europe_df[\"Q24\"]!=\"$0-999\"]\nsurvey2020_others_2_df = survey2020_others_df[survey2020_others_df[\"Q24\"]!=\"$0-999\"]\nsurvey2020_africa_2_df = survey2020_africa_df[survey2020_africa_df[\"Q24\"]!=\"$0-999\"]\nsurvey2020_australia_2_df = survey2020_australia_df[survey2020_australia_df[\"Q24\"]!=\"$0-999\"]\n\ncontinents_count_df = pd.DataFrame(survey2020_2_df[\"Q24\"].value_counts())\ncontinents_count_df = continents_count_df.reset_index(drop=False)\ncontinents_count_df.columns = [\"Compensation\",\"Count\"]\ncontinents_count_df[\"Compensation\"] = pd.Categorical(\n    continents_count_df[\"Compensation\"], compensation_categorical_list)\ncontinents_count_df = continents_count_df.sort_values(by=\"Compensation\")\n\nasia_country_count_df = pd.DataFrame(survey2020_asia_2_df[\"Q24\"].value_counts())\nasia_country_count_df = asia_country_count_df.reset_index(drop=False)\nasia_country_count_df.columns = [\"Compensation\",\"Count\"]\nasia_country_count_df[\"Compensation\"] = pd.Categorical(\n    asia_country_count_df[\"Compensation\"], compensation_categorical_list)\nasia_country_count_df = asia_country_count_df.sort_values(by=\"Compensation\")\n\namerica_country_count_df = pd.DataFrame(survey2020_america_2_df[\"Q24\"].value_counts())\namerica_country_count_df = america_country_count_df.reset_index(drop=False)\namerica_country_count_df.columns = [\"Compensation\",\"Count\"]\namerica_country_count_df[\"Compensation\"] = pd.Categorical(\n    america_country_count_df[\"Compensation\"], compensation_categorical_list)\namerica_country_count_df = america_country_count_df.sort_values(by=\"Compensation\")\n\neurope_country_count_df = pd.DataFrame(survey2020_europe_2_df[\"Q24\"].value_counts())\neurope_country_count_df = europe_country_count_df.reset_index(drop=False)\neurope_country_count_df.columns = [\"Compensation\",\"Count\"]\neurope_country_count_df[\"Compensation\"] = pd.Categorical(\n    europe_country_count_df[\"Compensation\"], compensation_categorical_list)\neurope_country_count_df = europe_country_count_df.sort_values(by=\"Compensation\")\n\nothers_country_count_df = pd.DataFrame(survey2020_others_2_df[\"Q24\"].value_counts())\nothers_country_count_df = others_country_count_df.reset_index(drop=False)\nothers_country_count_df.columns = [\"Compensation\",\"Count\"]\nothers_country_count_df[\"Compensation\"] = pd.Categorical(\n    others_country_count_df[\"Compensation\"], compensation_categorical_list)\nothers_country_count_df = others_country_count_df.sort_values(by=\"Compensation\")\n\nafrica_country_count_df = pd.DataFrame(survey2020_africa_2_df[\"Q24\"].value_counts())\nafrica_country_count_df = africa_country_count_df.reset_index(drop=False)\nafrica_country_count_df.columns = [\"Compensation\",\"Count\"]\nafrica_country_count_df[\"Compensation\"] = pd.Categorical(\n    africa_country_count_df[\"Compensation\"], compensation_categorical_list)\nafrica_country_count_df = africa_country_count_df.sort_values(by=\"Compensation\")\n\naustralia_country_count_df = pd.DataFrame(survey2020_australia_2_df[\"Q24\"].value_counts())\naustralia_country_count_df = australia_country_count_df.reset_index(drop=False)\naustralia_country_count_df.columns = [\"Compensation\",\"Count\"]\naustralia_country_count_df[\"Compensation\"] = pd.Categorical(\n    australia_country_count_df[\"Compensation\"], compensation_categorical_list)\naustralia_country_count_df = australia_country_count_df.sort_values(by=\"Compensation\")\n\n# Merging into 1 dataframe\ncontinents_count_df = continents_count_df.set_index(\"Compensation\")\nasia_country_count_df = asia_country_count_df.set_index(\"Compensation\")\namerica_country_count_df = america_country_count_df.set_index(\"Compensation\")\neurope_country_count_df = europe_country_count_df.set_index(\"Compensation\")\nothers_country_count_df = others_country_count_df.set_index(\"Compensation\")\nafrica_country_count_df = africa_country_count_df.set_index(\"Compensation\")\naustralia_country_count_df = australia_country_count_df.set_index(\"Compensation\")\nall_country_count_df = pd.DataFrame()\nall_country_count_df = pd.concat([\n    asia_country_count_df, america_country_count_df,\n    europe_country_count_df, others_country_count_df,\n    africa_country_count_df, australia_country_count_df\n    ], axis=1\n)\nall_country_count_df.columns = [\"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\"]\nall_country_count_df = all_country_count_df.fillna(0)\ncontinents_count_df.columns = [\"World\"]","bda809b8":"# Setting up figure and axes\nfig = plt.figure(figsize=(13,10)) # create figure\ngs = fig.add_gridspec(2, 1)\ngs.update(wspace=0, hspace=-0.75)\nax0 = fig.add_subplot(gs[0, 0])\n\ncolors = [\"#fbfbfb\", \"#4b4b4c\",\"#008294\"]\ncolormap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\nsns.heatmap(ax=ax0, data=all_country_count_df.T, linewidths=.1, \n            square=True, cbar_kws = dict(use_gridspec=False,location=\"top\"), cmap=colormap)\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\n\nax0.set_xlabel(\"\")\n   \nax0.text(0, -3.7, 'Kagglers Compensation', \n         fontsize=20, fontweight='bold', fontfamily='serif')\n\nax0.text(0, -3, 'without $0-999\/year compensation range', \n         fontsize=13, fontweight='light', fontfamily='serif')\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)","34f408dc":"continents_count_df = pd.DataFrame(survey2020_df[\"Q2\"].value_counts())\ncontinents_count_df = continents_count_df.reset_index(drop=False)\ncontinents_count_df.columns = [\"Gender\",\"Count\"]\n\nasia_country_count_df = pd.DataFrame(survey2020_asia_df[\"Q2\"].value_counts())\nasia_country_count_df = asia_country_count_df.reset_index(drop=False)\nasia_country_count_df.columns = [\"Gender\",\"Count\"]\n\namerica_country_count_df = pd.DataFrame(survey2020_america_df[\"Q2\"].value_counts())\namerica_country_count_df = america_country_count_df.reset_index(drop=False)\namerica_country_count_df.columns = [\"Gender\",\"Count\"]\n\neurope_country_count_df = pd.DataFrame(survey2020_europe_df[\"Q2\"].value_counts())\neurope_country_count_df = europe_country_count_df.reset_index(drop=False)\neurope_country_count_df.columns = [\"Gender\",\"Count\"]\n\nothers_country_count_df = pd.DataFrame(survey2020_others_df[\"Q2\"].value_counts())\nothers_country_count_df = others_country_count_df.reset_index(drop=False)\nothers_country_count_df.columns = [\"Gender\",\"Count\"]\n\nafrica_country_count_df = pd.DataFrame(survey2020_africa_df[\"Q2\"].value_counts())\nafrica_country_count_df = africa_country_count_df.reset_index(drop=False)\nafrica_country_count_df.columns = [\"Gender\",\"Count\"]\n\naustralia_country_count_df = pd.DataFrame(survey2020_australia_df[\"Q2\"].value_counts())\naustralia_country_count_df = australia_country_count_df.reset_index(drop=False)\naustralia_country_count_df.columns = [\"Gender\",\"Count\"]","c6826e22":"# Setting up figure and axes\nfig = plt.figure(figsize=(10,5)) # create figure\ngs = fig.add_gridspec(2, 4)\ngs.update(wspace=0.1, hspace=0)\nax0 = fig.add_subplot(gs[0:2, 0])\nax1 = fig.add_subplot(gs[0, 1]) # create axes\nax2 = fig.add_subplot(gs[1, 1]) # create axes\nax3 = fig.add_subplot(gs[0, 2]) # create axes\nax4 = fig.add_subplot(gs[1, 2]) # create axes\nax5 = fig.add_subplot(gs[0, 3]) # create axes\nax6 = fig.add_subplot(gs[1, 3]) # create axes\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\nax2.set_facecolor(background_color) # axes background color\nax3.set_facecolor(background_color) # axes background color\nax4.set_facecolor(background_color) # axes background color\nax5.set_facecolor(background_color) # axes background color\nax6.set_facecolor(background_color) # axes background color\n\ncolor_map = [\"#008294\", \"#4b4b4c\", \"#bdbdbd\"]\n\n# World\nax0.pie(x=continents_count_df['Count'], colors=color_map, wedgeprops=dict(width=0.2))\n\nax0.text(-1.5, 3.5, 'Kagglers Gender', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-1.5, 3.1, 'Kagglers are dominated by man and are consistent across all continents', \n         fontsize=13, fontweight='light', fontfamily='serif')\n\nax0.text(0, 1.2, 'World', fontsize=13, fontweight='bold', fontfamily='serif', horizontalalignment='center')\n\nax0.legend(continents_count_df[\"Gender\"], loc=\"lower center\", bbox_to_anchor=(0.5, -0.5))\n\n# Asia\nax1.pie(x=asia_country_count_df['Count'], colors=color_map, wedgeprops=dict(width=0.2))\nax1.text(0, 1.2, 'Asia', fontsize=13, fontweight='bold', fontfamily='serif', horizontalalignment='center')\n\n# America\nax2.pie(x=america_country_count_df['Count'], colors=color_map, wedgeprops=dict(width=0.2))\nax2.text(0, 1.2, 'America', fontsize=13, fontweight='bold', fontfamily='serif', horizontalalignment='center')\n\n# Europe\nax3.pie(x=europe_country_count_df['Count'], colors=color_map, wedgeprops=dict(width=0.2))\nax3.text(0, 1.2, 'Europe', fontsize=13, fontweight='bold', fontfamily='serif', horizontalalignment='center')\n\n# Others\nax4.pie(x=others_country_count_df['Count'], colors=color_map, wedgeprops=dict(width=0.2))\nax4.text(0, 1.2, 'Others', fontsize=13, fontweight='bold', fontfamily='serif', horizontalalignment='center')\n\n# Africa\nax5.pie(x=africa_country_count_df['Count'], colors=color_map, wedgeprops=dict(width=0.2))\nax5.text(0, 1.2, 'Africa', fontsize=13, fontweight='bold', fontfamily='serif',horizontalalignment='center')\n\n# Australia\nax6.pie(x=australia_country_count_df['Count'], colors=color_map, wedgeprops=dict(width=0.2))\nax6.text(0, 1.2, 'Australia', fontsize=13, fontweight='bold', fontfamily='serif', horizontalalignment='center')","f2a9983d":"education_categorical_list = [\"No formal education past high school\",\n                            \"Some college\/university study without earning a bachelor\u2019s degree\",\n                            \"Bachelor\u2019s degree\",\n                            \"Master\u2019s degree\",\n                            \"Doctoral degree\",\n                            \"Professional degree\",\n                            \"I prefer not to answer\"]\n\ncontinents_count_df = pd.DataFrame(survey2020_df[\"Q4\"].value_counts())\ncontinents_count_df = continents_count_df.reset_index(drop=False)\ncontinents_count_df.columns = [\"Education\",\"Count\"]\ncontinents_count_df[\"Education\"] = pd.Categorical(\n    continents_count_df[\"Education\"], education_categorical_list)\ncontinents_count_df = continents_count_df.sort_values(by=\"Education\")\n\nasia_country_count_df = pd.DataFrame(survey2020_asia_df[\"Q4\"].value_counts())\nasia_country_count_df = asia_country_count_df.reset_index(drop=False)\nasia_country_count_df.columns = [\"Education\",\"Count\"]\nasia_country_count_df[\"Education\"] = pd.Categorical(\n    asia_country_count_df[\"Education\"], education_categorical_list)\nasia_country_count_df = asia_country_count_df.sort_values(by=\"Education\")\n\namerica_country_count_df = pd.DataFrame(survey2020_america_df[\"Q4\"].value_counts())\namerica_country_count_df = america_country_count_df.reset_index(drop=False)\namerica_country_count_df.columns = [\"Education\",\"Count\"]\namerica_country_count_df[\"Education\"] = pd.Categorical(\n    america_country_count_df[\"Education\"], education_categorical_list)\namerica_country_count_df = america_country_count_df.sort_values(by=\"Education\")\n\neurope_country_count_df = pd.DataFrame(survey2020_europe_df[\"Q4\"].value_counts())\neurope_country_count_df = europe_country_count_df.reset_index(drop=False)\neurope_country_count_df.columns = [\"Education\",\"Count\"]\neurope_country_count_df[\"Education\"] = pd.Categorical(\n    europe_country_count_df[\"Education\"], education_categorical_list)\neurope_country_count_df = europe_country_count_df.sort_values(by=\"Education\")\n\nothers_country_count_df = pd.DataFrame(survey2020_others_df[\"Q4\"].value_counts())\nothers_country_count_df = others_country_count_df.reset_index(drop=False)\nothers_country_count_df.columns = [\"Education\",\"Count\"]\nothers_country_count_df[\"Education\"] = pd.Categorical(\n    others_country_count_df[\"Education\"], education_categorical_list)\nothers_country_count_df = others_country_count_df.sort_values(by=\"Education\")\n\nafrica_country_count_df = pd.DataFrame(survey2020_africa_df[\"Q4\"].value_counts())\nafrica_country_count_df = africa_country_count_df.reset_index(drop=False)\nafrica_country_count_df.columns = [\"Education\",\"Count\"]\nafrica_country_count_df[\"Education\"] = pd.Categorical(\n    africa_country_count_df[\"Education\"], education_categorical_list)\nafrica_country_count_df = africa_country_count_df.sort_values(by=\"Education\")\n\naustralia_country_count_df = pd.DataFrame(survey2020_australia_df[\"Q4\"].value_counts())\naustralia_country_count_df = australia_country_count_df.reset_index(drop=False)\naustralia_country_count_df.columns = [\"Education\",\"Count\"]\naustralia_country_count_df[\"Education\"] = pd.Categorical(\n    australia_country_count_df[\"Education\"], education_categorical_list)\naustralia_country_count_df = australia_country_count_df.sort_values(by=\"Education\")","9f50fb81":"fig = plt.figure(figsize=(10,7)) # create figure\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0.1, hspace=0)\nax0 = fig.add_subplot(gs[0, 0])\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\n\n# World\ncolor_map1 = [\"#bdbdbd\" for _ in range(7)]\ncolor_map1[3] = \"#008294\"\ncolor_map2 = [\"#bdbdbd\" for _ in range(7)]\ncolor_map2[2] = \"#008294\"\ncolor_map3 = [\"#bdbdbd\" for _ in range(7)]\ncolor_map3[3] = \"#008294\"\ncolor_map4 = [\"#bdbdbd\" for _ in range(7)]\ncolor_map4[3] = \"#008294\"\ncolor_map5 = [\"#bdbdbd\" for _ in range(7)]\ncolor_map5[3] = \"#008294\"\ncolor_map6 = [\"#bdbdbd\" for _ in range(7)]\ncolor_map6[2] = \"#008294\"\ncolor_map7 = [\"#bdbdbd\" for _ in range(7)]\ncolor_map7[3] = \"#008294\"\n\nx_dummy = np.arange(1, 7)\ny_dummy = np.arange(1, 8)\nax0.scatter([1 for _ in range(7)], y_dummy, color=color_map1, s=continents_count_df[\"Count\"]\/3)\nax0.scatter([2 for _ in range(7)], y_dummy, color=color_map2, s=asia_country_count_df[\"Count\"]\/3)\nax0.scatter([3 for _ in range(7)], y_dummy, color=color_map3, s=america_country_count_df[\"Count\"]\/3)\nax0.scatter([4 for _ in range(7)], y_dummy, color=color_map4, s=europe_country_count_df[\"Count\"]\/3)\nax0.scatter([5 for _ in range(7)], y_dummy, color=color_map5, s=others_country_count_df[\"Count\"]\/3)\nax0.scatter([6 for _ in range(7)], y_dummy, color=color_map6, s=africa_country_count_df[\"Count\"]\/3)\nax0.scatter([7 for _ in range(7)], y_dummy, color=color_map7, s=australia_country_count_df[\"Count\"]\/3)\n\nax0.set_yticklabels([\"\", \"Below high school\", \"College\/university study w\/o bachelor\", \"Bachelor\u2019s degree\",\n                     \"Master\u2019s degree\", \"Doctoral degree\", \"Professional degree\", \"No answer\"])\nax0.set_xticklabels([\"\", \"World\", \"Asia\", \"America\", \"Europe\", \"Other\", \"Africa\", \"Australia\"])\nax0.invert_yaxis()\n\nax0.text(-1.5, 0.25, 'Kagglers Education', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-1.5, 0.5, 'Most of Kagglers have Master or Bachelor degrees', fontsize=13, fontweight='light', fontfamily='serif')\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)\n    ax6.spines[s].set_visible(False)","4144876e":"continents_count_df = pd.DataFrame(survey2020_df[\"Q5\"].value_counts())\ncontinents_count_df = continents_count_df.reset_index(drop=False)\ncontinents_count_df.columns = [\"Role\",\"Count\"]\n\nasia_country_count_df = pd.DataFrame(survey2020_asia_df[\"Q5\"].value_counts())\nasia_country_count_df = asia_country_count_df.reset_index(drop=False)\nasia_country_count_df.columns = [\"Role\",\"Count\"]\n\namerica_country_count_df = pd.DataFrame(survey2020_america_df[\"Q5\"].value_counts())\namerica_country_count_df = america_country_count_df.reset_index(drop=False)\namerica_country_count_df.columns = [\"Role\",\"Count\"]\n\neurope_country_count_df = pd.DataFrame(survey2020_europe_df[\"Q5\"].value_counts())\neurope_country_count_df = europe_country_count_df.reset_index(drop=False)\neurope_country_count_df.columns = [\"Role\",\"Count\"]\n\nothers_country_count_df = pd.DataFrame(survey2020_others_df[\"Q5\"].value_counts())\nothers_country_count_df = others_country_count_df.reset_index(drop=False)\nothers_country_count_df.columns = [\"Role\",\"Count\"]\n\nafrica_country_count_df = pd.DataFrame(survey2020_africa_df[\"Q5\"].value_counts())\nafrica_country_count_df = africa_country_count_df.reset_index(drop=False)\nafrica_country_count_df.columns = [\"Role\",\"Count\"]\n\naustralia_country_count_df = pd.DataFrame(survey2020_australia_df[\"Q5\"].value_counts())\naustralia_country_count_df = australia_country_count_df.reset_index(drop=False)\naustralia_country_count_df.columns = [\"Role\",\"Count\"]\n\n# Merging into 1 dataframe\ncontinents_count_df = continents_count_df.set_index(\"Role\")\nasia_country_count_df = asia_country_count_df.set_index(\"Role\")\namerica_country_count_df = america_country_count_df.set_index(\"Role\")\neurope_country_count_df = europe_country_count_df.set_index(\"Role\")\nothers_country_count_df = others_country_count_df.set_index(\"Role\")\nafrica_country_count_df = africa_country_count_df.set_index(\"Role\")\naustralia_country_count_df = australia_country_count_df.set_index(\"Role\")\nall_country_count_df = pd.DataFrame()\nall_country_count_df = pd.concat([\n    asia_country_count_df, america_country_count_df,\n    europe_country_count_df, others_country_count_df,\n    africa_country_count_df, australia_country_count_df\n    ], axis=1\n)\nall_country_count_df.columns = [\"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\"]\nall_country_count_df = all_country_count_df.T","79ba8792":"# Setting up figure and axes\nfig = plt.figure(figsize=(12,4)) # create figure\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0, hspace=0.5)\nax0 = fig.add_subplot(gs[0, 0], ylim=(0, 3500))\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\n\nx = np.arange(len(all_country_count_df))\nbar_width = 0.06\n\nax0.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax0.bar(x, all_country_count_df[\"Student\"], width=bar_width, color=\"#008294\", label=\"Student\", zorder=3)\nax0.bar(x+bar_width+0.01, all_country_count_df[\"Data Scientist\"], width=bar_width, color=\"#006c7b\", label=\"Data Scientist\", zorder=3)\nax0.bar(x+bar_width*2+0.01*2, all_country_count_df[\"Software Engineer\"], width=bar_width, color=\"#005561\", label=\"Software Engineer\", zorder=3)\nax0.bar(x+bar_width*3+0.01*3, all_country_count_df[\"Currently not employed\"], width=bar_width, color=\"#003f48\", label=\"Currently not employed\", zorder=3)\nax0.bar(x+bar_width*4+0.01*4, all_country_count_df[\"Other\"], width=bar_width, color=\"#003d46\", label=\"Other\", zorder=3)\nax0.bar(x+bar_width*5+0.01*5, all_country_count_df[\"Data Analyst\"], width=bar_width, color=\"#002c32\", label=\"Data Analyst\", zorder=3)\nax0.bar(x+bar_width*6+0.01*6, all_country_count_df[\"Machine Learning Engineer\"], width=bar_width, color=\"#001b1e\", label=\"Machine Learning Engineer\", zorder=3)\nax0.bar(x+bar_width*7+0.01*7, all_country_count_df[\"Research Scientist\"], width=bar_width, color=\"#001b1e\", label=\"Research Scientist\", zorder=3)\nax0.bar(x+bar_width*8+0.01*8, all_country_count_df[\"Business Analyst\"], width=bar_width, color=\"#4b4b4c\", label=\"Business Analyst\", zorder=3)\nax0.bar(x+bar_width*9+0.01*9, all_country_count_df[\"Product\/Project Manager\"], width=bar_width, color=\"#676767\", label=\"Product\/Project Manager\", zorder=3)\nax0.bar(x+bar_width*10+0.01*10, all_country_count_df[\"Data Engineer\"], width=bar_width, color=\"#808080\", label=\"Data Engineer\", zorder=3)\nax0.bar(x+bar_width*11+0.01*11, all_country_count_df[\"Statistician\"], width=bar_width, color=\"#989898\", label=\"Statistician\", zorder=3)\nax0.bar(x+bar_width*12+0.01*12, all_country_count_df[\"DBA\/Database Engineer\"], width=bar_width, color=\"#c6c6c6\", label=\"DBA\/Database Engineer\", zorder=3)\n\n# Fix the x-axes.\nax0.set_xticks(x + bar_width)\nx_labels = list(all_country_count_df.index)\nax0.set_xticklabels(x_labels)\n\nax0.text(-0.5, 4200, 'Kagglers Role', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.5, 3900, 'Most of Kagglers are Students and Data Scientist', fontsize=13, fontweight='light', fontfamily='serif')\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n    \nax0.legend(loc='lower center', ncol=4, bbox_to_anchor=(0.48, -0.48))\n","ab6e5240":"experience_df = pd.DataFrame(survey2020_df.groupby([\"Continents\", \"Q6\"])[\"Continents\"].count())\nexperience_df.columns = [\"Count\"]\nexperience_df = experience_df.reset_index(drop=False)\n\nyear_lst = ['I have never written code', '< 1 years', '1-2 years', '3-5 years', '5-10 years', '10-20 years', '20+ years']\nexperience_df[\"Q6\"] = pd.Categorical(\n    experience_df[\"Q6\"], year_lst)\nexperience_df = experience_df.sort_values(by=[\"Continents\", \"Q6\"])\n\nasia_country_count_df = experience_df[experience_df[\"Continents\"]==\"Asia\"]\nasia_country_count_df[\"Asia\"] = asia_country_count_df[\"Count\"].apply(lambda x: (x\/sum(asia_country_count_df[\"Count\"])*100))\nasia_country_count_df.index = asia_country_count_df[\"Q6\"]\nasia_country_count_df = asia_country_count_df.drop([\"Q6\", \"Count\", \"Continents\"], axis=1)\nasia_country_count_df = asia_country_count_df.T\n\namerica_country_count_df = experience_df[experience_df[\"Continents\"]==\"America\"]\namerica_country_count_df[\"America\"] = america_country_count_df[\"Count\"].apply(lambda x: (x\/sum(america_country_count_df[\"Count\"])*100))\namerica_country_count_df.index = america_country_count_df[\"Q6\"]\namerica_country_count_df = america_country_count_df.drop([\"Q6\", \"Count\", \"Continents\"], axis=1)\namerica_country_count_df = america_country_count_df.T\n\neurope_country_count_df = experience_df[experience_df[\"Continents\"]==\"Europe\"]\neurope_country_count_df[\"Europe\"] = europe_country_count_df[\"Count\"].apply(lambda x: (x\/sum(europe_country_count_df[\"Count\"])*100))\neurope_country_count_df.index = europe_country_count_df[\"Q6\"]\neurope_country_count_df = europe_country_count_df.drop([\"Q6\", \"Count\", \"Continents\"], axis=1)\neurope_country_count_df = europe_country_count_df.T\n\nothers_country_count_df = experience_df[experience_df[\"Continents\"]==\"Others\"]\nothers_country_count_df[\"Others\"] = others_country_count_df[\"Count\"].apply(lambda x: (x\/sum(others_country_count_df[\"Count\"])*100))\nothers_country_count_df.index = others_country_count_df[\"Q6\"]\nothers_country_count_df = others_country_count_df.drop([\"Q6\", \"Count\", \"Continents\"], axis=1)\nothers_country_count_df = others_country_count_df.T\n\nafrica_country_count_df = experience_df[experience_df[\"Continents\"]==\"Africa\"]\nafrica_country_count_df[\"Africa\"] = africa_country_count_df[\"Count\"].apply(lambda x: (x\/sum(africa_country_count_df[\"Count\"])*100))\nafrica_country_count_df.index = africa_country_count_df[\"Q6\"]\nafrica_country_count_df = africa_country_count_df.drop([\"Q6\", \"Count\", \"Continents\"], axis=1)\nafrica_country_count_df = africa_country_count_df.T\n\naustralia_country_count_df = experience_df[experience_df[\"Continents\"]==\"Australia\"]\naustralia_country_count_df[\"Australia\"] = australia_country_count_df[\"Count\"].apply(lambda x: (x\/sum(australia_country_count_df[\"Count\"])*100))\naustralia_country_count_df.index = australia_country_count_df[\"Q6\"]\naustralia_country_count_df = australia_country_count_df.drop([\"Q6\", \"Count\", \"Continents\"], axis=1)\naustralia_country_count_df = australia_country_count_df.T\n\nexperience_merge_df = pd.DataFrame()\nexperience_merge_df = pd.concat([asia_country_count_df, america_country_count_df, europe_country_count_df,\n                                others_country_count_df, africa_country_count_df, australia_country_count_df], axis=0)","3781fddc":"# Setting up figure and axes\nfig = plt.figure(figsize=(12,4)) # create figure\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0, hspace=0)\nax0 = fig.add_subplot(gs[0, 0])\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\n\nax0.barh(experience_merge_df.index, experience_merge_df['I have never written code'],\n       color=\"#008294\", zorder=3, label=\"No Experience\"\n)\n\nax0.barh(experience_merge_df.index, experience_merge_df['< 1 years'], \n       left=experience_merge_df['I have never written code'],\n       color=\"#003f48\", zorder=3, label=\"< 1 years\"\n)\n\nax0.barh(experience_merge_df.index, experience_merge_df['1-2 years'], \n       left=experience_merge_df['I have never written code']+experience_merge_df['< 1 years'],\n       color=\"#4b4b4c\", zorder=3, label=\"1-2 years\"\n)\n\nax0.barh(experience_merge_df.index, experience_merge_df['3-5 years'], \n       left=experience_merge_df['I have never written code']+experience_merge_df['< 1 years']+experience_merge_df['1-2 years'],\n       color=\"#676767\", zorder=3, label=\"3-5 years\"\n)\n\nax0.barh(experience_merge_df.index, experience_merge_df['5-10 years'], \n       left=experience_merge_df['I have never written code']+experience_merge_df['< 1 years']+experience_merge_df['1-2 years']+experience_merge_df['3-5 years'],\n       color=\"#808080\", zorder=3, label=\"5-10 years\"\n)\n\nax0.barh(experience_merge_df.index, experience_merge_df['10-20 years'], \n       left=experience_merge_df['I have never written code']+experience_merge_df['< 1 years']+experience_merge_df['1-2 years']+experience_merge_df['3-5 years']+experience_merge_df['5-10 years'],\n       color=\"#989898\", zorder=3, label=\"10-20 years\"\n)\n\nax0.barh(experience_merge_df.index, experience_merge_df['20+ years'], \n       left=experience_merge_df['I have never written code']+experience_merge_df['< 1 years']+experience_merge_df['1-2 years']+experience_merge_df['3-5 years']+experience_merge_df['5-10 years']+experience_merge_df['10-20 years'],\n       color=\"#c6c6c6\", zorder=3, label=\"20+ years\"\n)\n\nax0.invert_yaxis()\nax0.xaxis.set_major_formatter(mtick.PercentFormatter())    \nax0.legend(loc='lower center', ncol=7, bbox_to_anchor=(0.48, -0.25))\n\n# Remove top, right and left line \nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n    \nax0.text(-0.5, -1.3, 'Kagglers Programming Experiences', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.5, -0.75, 'Most of Kagglers have experience between 1-2 years and 3-5 years', fontsize=13, fontweight='light', \n         fontfamily='serif')","7c558aca":"exp_year_lst = ['I have never written code', '< 1 years', '1-2 years', '3-5 years', '5-10 years', '10-20 years', '20+ years']\nml_year_lst = ['I do not use machine learning methods', 'Under 1 year', '1-2 years', '2-3 years', '3-4 years', '4-5 years',\n               '5-10 years', '10-20 years', '20 or more years']\ncontinents_count_df = survey2020_df[[\"Continents\", \"Q6\", \"Q15\"]]\ncontinents_count_df[\"Q6\"] = pd.Categorical(continents_count_df[\"Q6\"], exp_year_lst)\ncontinents_count_df[\"Q15\"] = pd.Categorical(continents_count_df[\"Q15\"], ml_year_lst)\ncontinents_count_df.columns = [\"Continents\", \"Programming Exp\", \"Machine Learning Exp\"]\n\ncontinents_count_cross_df = pd.crosstab(continents_count_df[\"Programming Exp\"], continents_count_df[\"Machine Learning Exp\"])\n\nasia_country_count_df = continents_count_df[continents_count_df[\"Continents\"]==\"Asia\"]\nasia_country_count_cross_df = pd.crosstab(asia_country_count_df[\"Programming Exp\"], asia_country_count_df[\"Machine Learning Exp\"])\n\namerica_country_count_df = continents_count_df[continents_count_df[\"Continents\"]==\"America\"]\namerica_country_count_cross_df = pd.crosstab(america_country_count_df[\"Programming Exp\"], america_country_count_df[\"Machine Learning Exp\"])\n\neurope_country_count_df = continents_count_df[continents_count_df[\"Continents\"]==\"Europe\"]\neurope_country_count_cross_df = pd.crosstab(europe_country_count_df[\"Programming Exp\"], europe_country_count_df[\"Machine Learning Exp\"])\n\nothers_country_count_df = continents_count_df[continents_count_df[\"Continents\"]==\"Others\"]\nothers_country_count_cross_df = pd.crosstab(others_country_count_df[\"Programming Exp\"], others_country_count_df[\"Machine Learning Exp\"])\n\nafrica_country_count_df = continents_count_df[continents_count_df[\"Continents\"]==\"Africa\"]\nafrica_country_count_cross_df = pd.crosstab(africa_country_count_df[\"Programming Exp\"], africa_country_count_df[\"Machine Learning Exp\"])\n\naustralia_country_count_df = continents_count_df[continents_count_df[\"Continents\"]==\"Australia\"]\naustralia_country_count_cross_df = pd.crosstab(australia_country_count_df[\"Programming Exp\"], australia_country_count_df[\"Machine Learning Exp\"])","c9531db2":"# Setting up figure and axes\nfig = plt.figure(figsize=(15,10)) # create figure\ngs = fig.add_gridspec(2, 3)\ngs.update(wspace=0.2, hspace=-0.4)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\nax3 = fig.add_subplot(gs[1, 0])\nax4 = fig.add_subplot(gs[1, 1])\nax5 = fig.add_subplot(gs[1, 2])\n\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\nax2.set_facecolor(background_color) # axes background color\nax3.set_facecolor(background_color) # axes background color\nax4.set_facecolor(background_color) # axes background color\nax5.set_facecolor(background_color) # axes background color\n\ncolors = [\"#fbfbfb\", \"#4b4b4c\",\"#008294\"]\ncolormap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\nsns.heatmap(ax=ax0, data=asia_country_count_cross_df, linewidths=.1, \n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False, cmap=colormap)\nsns.heatmap(ax=ax1, data=america_country_count_cross_df, linewidths=.1, \n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False, cmap=colormap)\nsns.heatmap(ax=ax2, data=europe_country_count_cross_df, linewidths=.1, \n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False, cmap=colormap)\nsns.heatmap(ax=ax3, data=others_country_count_cross_df, linewidths=.1, \n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False, cmap=colormap)\nsns.heatmap(ax=ax4, data=africa_country_count_cross_df, linewidths=.1, \n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False, cmap=colormap)\nsns.heatmap(ax=ax5, data=australia_country_count_cross_df, linewidths=.1, \n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False, cmap=colormap)\n\nax0.text(-2.5, -1.7, \n         'Kagglers Machine Learning & Programming Experience', \n         fontsize=20, fontweight='bold', fontfamily='serif')\n\nax0.text(-2.5, -1.1, \n         'There is a growing interst of Machine Learning in the world', \n         fontsize=13, fontweight='light', fontfamily='serif')\n\nax0.text(0, -0.2, 'Asia', fontsize=15, fontweight='bold', fontfamily='serif')\nax1.text(0, -0.2, 'America', fontsize=15, fontweight='bold', fontfamily='serif')\nax2.text(0, -0.2, 'Europe', fontsize=15, fontweight='bold', fontfamily='serif')\nax3.text(0, -0.2, 'Others', fontsize=15, fontweight='bold', fontfamily='serif')\nax4.text(0, -0.2, 'Africa', fontsize=15, fontweight='bold', fontfamily='serif')\nax5.text(0, -0.2, 'Australia', fontsize=15, fontweight='bold', fontfamily='serif')\n\nax0.set_xticklabels(\"\")\nax0.tick_params(bottom=False)\nax1.set_xticklabels(\"\")\nax1.set_yticklabels(\"\")\nax1.tick_params(left=False)\nax1.tick_params(bottom=False)\nax2.set_xticklabels(\"\")\nax2.set_yticklabels(\"\")\nax2.tick_params(left=False)\nax2.tick_params(bottom=False)\nax3.set_xticklabels([\"Not use\", \"< 1 years\", \"1-2 years\", \"2-3 years\", \"3-4 years\", \"4-5 years\", \"5-10 years\", \"10-20 years\", \"20+ years\"])\nax3.tick_params(left=False)\nax4.set_xticklabels(\"\")\nax4.set_yticklabels(\"\")\nax4.tick_params(left=False)\nax4.set_yticklabels(\"\")\nax4.tick_params(left=False)\nax4.set_xticklabels([\"Not use\", \"< 1 years\", \"1-2 years\", \"2-3 years\", \"3-4 years\", \"4-5 years\", \"5-10 years\", \"10-20 years\", \"20+ years\"])\nax5.set_yticklabels(\"\")\nax5.tick_params(left=False)\nax5.set_xticklabels([\"Not use\", \"< 1 years\", \"1-2 years\", \"2-3 years\", \"3-4 years\", \"4-5 years\", \"5-10 years\", \"10-20 years\", \"20+ years\"])\n\nax0.set_xlabel(\"\")\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\nax4.set_ylabel(\"\")\nax5.set_ylabel(\"\")","bafa06c2":"ide_lst = [\"Q9_Part_1\", \"Q9_Part_2\", \"Q9_Part_3\", \"Q9_Part_4\", \"Q9_Part_5\", \"Q9_Part_6\",\n           \"Q9_Part_7\", \"Q9_Part_8\", \"Q9_Part_9\", \"Q9_Part_10\", \"Q9_Part_11\", \"Q9_OTHER\"] \nide_df = survey2020_df.groupby([\"Continents\"])[ide_lst].count()\nide_df.columns = [\"Jupyter\", \"RStudio\", \"Visual Studio\", \"VSCode\", \"PyCharm\", \"Spyder\", \"Notebook++\", \n                  \"Sublime Text\", \"Vim, Emacs\", \"MATLAB\", \"None\", \"Other\"]\nide_df = ide_df.loc[[\"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\"], :]\nide_df = ide_df.T\n\nasia_country_count_df = pd.DataFrame(ide_df[\"Asia\"]).sort_values(by=\"Asia\", ascending=True)\namerica_country_count_df = pd.DataFrame(ide_df[\"America\"]).sort_values(by=\"America\", ascending=True)\neurope_country_count_df = pd.DataFrame(ide_df[\"Europe\"]).sort_values(by=\"Europe\", ascending=True)\nothers_country_count_df = pd.DataFrame(ide_df[\"Others\"]).sort_values(by=\"Others\", ascending=True)\nafrica_country_count_df = pd.DataFrame(ide_df[\"Africa\"]).sort_values(by=\"Africa\", ascending=True)\naustralia_country_count_df = pd.DataFrame(ide_df[\"Australia\"]).sort_values(by=\"Australia\", ascending=True)","60272396":"# Setting up figure and axes\nfig = plt.figure(figsize=(15,7)) # create figure\ngs = fig.add_gridspec(2, 3)\ngs.update(wspace=0.5, hspace=0.5)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1]) # create axes\nax2 = fig.add_subplot(gs[0, 2]) # create axes\nax3 = fig.add_subplot(gs[1, 0]) # create axes\nax4 = fig.add_subplot(gs[1, 1]) # create axes\nax5 = fig.add_subplot(gs[1, 2]) # create axes\n\ncolor_map = [\"#bdbdbd\" for _ in range(13)]\ncolor_map[11] = \"#008294\"\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\nax2.set_facecolor(background_color) # axes background color\nax3.set_facecolor(background_color) # axes background color\nax4.set_facecolor(background_color) # axes background color\nax5.set_facecolor(background_color) # axes background color\n\nax0.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax1.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax2.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax3.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax4.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax5.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\n\nax0.barh(asia_country_count_df.index, asia_country_count_df[\"Asia\"], color=color_map, zorder=3)\nax1.barh(america_country_count_df.index, america_country_count_df[\"America\"], color=color_map, zorder=3)\nax2.barh(europe_country_count_df.index, europe_country_count_df[\"Europe\"], color=color_map, zorder=3)\nax3.barh(others_country_count_df.index, others_country_count_df[\"Others\"], color=color_map, zorder=3)\nax4.barh(africa_country_count_df.index, africa_country_count_df[\"Africa\"], color=color_map, zorder=3)\nax5.barh(australia_country_count_df.index, australia_country_count_df[\"Australia\"], color=color_map, zorder=3)\n\nax0.text(-1500, 16, 'Kagglers IDE', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-1500, 14.5, 'Jupyter is the king of IDE among Kagglers', fontsize=13, fontweight='light', fontfamily='serif')\nax0.text(-1300, 12, 'Asia', fontsize=15, fontweight='bold', fontfamily='serif')\nax1.text(-500, 12, 'America', fontsize=15, fontweight='bold', fontfamily='serif')\nax2.text(-350, 12, 'Europe', fontsize=15, fontweight='bold', fontfamily='serif')\nax3.text(-150, 12, 'Others', fontsize=15, fontweight='bold', fontfamily='serif')\nax4.text(-150, 12, 'Africa', fontsize=15, fontweight='bold', fontfamily='serif')\nax5.text(-25, 12, 'Australia', fontsize=15, fontweight='bold', fontfamily='serif')\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)\n    ax6.spines[s].set_visible(False)","b834abd5":"languange_lst = [\"Q7_Part_1\", \"Q7_Part_2\", \"Q7_Part_3\", \"Q7_Part_4\", \"Q7_Part_5\", \"Q7_Part_6\",\n                \"Q7_Part_7\", \"Q7_Part_8\", \"Q7_Part_9\", \"Q7_Part_10\", \"Q7_Part_11\", \"Q7_Part_12\", \"Q7_OTHER\"] \nlanguange_df = survey2020_df.groupby([\"Continents\"])[languange_lst].count()\nlanguange_df.columns = [\"Python\", \"R\", \"SQL\", \"C\", \"C++\", \"Java\", \"Javascript\", \"Julia\", \"Swift\", \"Bash\", \"MATLAB\", \"None\", \"Other\"]\nlanguange_df = languange_df.loc[[\"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\"], :]\nlanguange_df = languange_df.T","bad03074":"# Setting up figure and axes\nfig = plt.figure(figsize=(20,7)) # create figure\ngs = fig.add_gridspec(2, 3)\ngs.update(wspace=0.2, hspace=0.7)\nax0 = fig.add_subplot(gs[0, 0], ylim=(0, 10000))\nax1 = fig.add_subplot(gs[0, 1], ylim=(0, 4000)) # create axes\nax2 = fig.add_subplot(gs[0, 2], ylim=(0, 2500)) # create axes\nax3 = fig.add_subplot(gs[1, 0], ylim=(0, 1000)) # create axes\nax4 = fig.add_subplot(gs[1, 1], ylim=(0, 1000)) # create axes\nax5 = fig.add_subplot(gs[1, 2], ylim=(0, 200)) # create axes\n\ncolor_map = [\"#bdbdbd\" for _ in range(13)]\ncolor_map[0] = \"#008294\"\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\nax2.set_facecolor(background_color) # axes background color\nax3.set_facecolor(background_color) # axes background color\nax4.set_facecolor(background_color) # axes background color\nax5.set_facecolor(background_color) # axes background color\n\nax0.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax1.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax2.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax3.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax4.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax5.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\n\nlanguange_df = languange_df.sort_values(by=\"Asia\", ascending=False)\nax0.bar(languange_df.index, height=languange_df['Asia'], color=color_map, zorder=3)\nax0.set_xticklabels(languange_df.index, rotation=90)\nlanguange_df = languange_df.sort_values(by=\"America\", ascending=False)\nax1.bar(languange_df.index, height=languange_df['America'], color=color_map, zorder=3)\nax1.set_xticklabels(languange_df.index, rotation=90)\nlanguange_df = languange_df.sort_values(by=\"Europe\", ascending=False)\nax2.bar(languange_df.index, height=languange_df['Europe'], color=color_map, zorder=3)\nax2.set_xticklabels(languange_df.index, rotation=90)\nlanguange_df = languange_df.sort_values(by=\"Others\", ascending=False)\nax3.bar(languange_df.index, height=languange_df['Others'], color=color_map, zorder=3)\nax3.set_xticklabels(languange_df.index, rotation=90)\nlanguange_df = languange_df.sort_values(by=\"Africa\", ascending=False)\nax4.bar(languange_df.index, height=languange_df['Africa'], color=color_map, zorder=3)\nax4.set_xticklabels(languange_df.index, rotation=90)\nlanguange_df = languange_df.sort_values(by=\"Australia\", ascending=False)\nax5.bar(languange_df.index, height=languange_df['Australia'], color=color_map, zorder=3)\nax5.set_xticklabels(languange_df.index, rotation=90)\n\nax0.text(-2.5, 14000, \n         'Kagglers Programming Languange', \n         fontsize=20, fontweight='bold', fontfamily='serif')\n\nax0.text(-2.5, 12700, \n         'Two most popular programming languanges among Kagglers are Python and SQL', \n         fontsize=13, fontweight='light', fontfamily='serif')\n\nax0.text(-2.5, 11000, \n         'Asia', \n         fontsize=15, fontweight='bold', fontfamily='serif')\n\nax1.text(-2.5, 4400, \n         'America', \n         fontsize=15, fontweight='bold', fontfamily='serif')\n\nax2.text(-2.5, 2750, \n         'Europe', \n         fontsize=15, fontweight='bold', fontfamily='serif')\n\nax3.text(-2.5, 1100, \n         'Others', \n         fontsize=15, fontweight='bold', fontfamily='serif')\n\nax4.text(-2.5, 1100, \n         'Africa', \n         fontsize=15, fontweight='bold', fontfamily='serif')\n\nax5.text(-2.5, 220, \n         'Australia', \n         fontsize=15, fontweight='bold', fontfamily='serif')\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)\n    ax6.spines[s].set_visible(False)","c43c8dcc":"ml_algo_lst = [\"Q17_Part_1\", \"Q17_Part_2\", \"Q17_Part_3\", \"Q17_Part_4\", \"Q17_Part_5\", \"Q17_Part_6\",\n               \"Q17_Part_7\", \"Q17_Part_8\", \"Q17_Part_9\", \"Q17_Part_10\", \"Q17_Part_11\", \"Q17_OTHER\"] \nml_algo_df = survey2020_df.groupby([\"Continents\"])[ml_algo_lst].count()\nml_algo_df.columns = [\"Linear\/Logistic\\nRegression\", \"Decision Trees\/\\nRandom Forests\", \"Gradient\\nBoosting\\nMachines\", \n                      \"Bayesian\\nApproaches\", \"Evolutionary\\nApproaches\", \"Dense\\nNeural\\nNetworks\",\n                      \"Convolutional\\nNeural\\nNetworks\", \"Generative\\nAdversarial\\nNetworks\", \"Recurrent\\nNeural\\nNetworks\",\n                      \"Transformer\\nNetworks\", \"None\", \"Other\"]     \nml_algo_df = ml_algo_df.loc[[\"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\"], :]\nml_algo_df = ml_algo_df.T","24b2b3c0":"# Setting up figure and axes\nfig = plt.figure(figsize=(20,7)) # create figure\ngs = fig.add_gridspec(2, 3)\ngs.update(wspace=0.05, hspace=0.2)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1]) # create axes\nax2 = fig.add_subplot(gs[0, 2]) # create axes\nax3 = fig.add_subplot(gs[1, 0]) # create axes\nax4 = fig.add_subplot(gs[1, 1]) # create axes\nax5 = fig.add_subplot(gs[1, 2]) # create axes\n\ncolor_map = [\"#008294\", \"#007180\", \"#00606d\", \"#004e59\", \"#003d46\", \"#002c32\", \"#4b4b4c\", \"#676767\",\n             \"#808080\", \"#989898\", \"#c6c6c6\", \"#d3d3d3\"]\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\nax2.set_facecolor(background_color) # axes background color\nax3.set_facecolor(background_color) # axes background color\nax4.set_facecolor(background_color) # axes background color\nax5.set_facecolor(background_color) # axes background color\n\nax0.set_yticklabels([])\nax1.set_yticklabels([])\nax2.set_yticklabels([])\nax3.set_yticklabels([])\nax4.set_yticklabels([])\nax5.set_yticklabels([])\n\nax0.set_xticklabels([])\nax1.set_xticklabels([])\nax2.set_xticklabels([])\nax3.set_xticklabels([])\nax4.set_xticklabels([])\nax5.set_xticklabels([])\n\nax0.tick_params(left=False, bottom=False)\nax1.tick_params(left=False, bottom=False)\nax2.tick_params(left=False, bottom=False)\nax3.tick_params(left=False, bottom=False)\nax4.tick_params(left=False, bottom=False)\nax5.tick_params(left=False, bottom=False)\n\nml_algo_df = ml_algo_df.sort_values(by=\"Asia\", ascending=False)\nsquarify.plot(sizes=ml_algo_df['Asia'], label=ml_algo_df.index[:5], color=color_map, ax=ax0)\nml_algo_df = ml_algo_df.sort_values(by=\"America\", ascending=False)\nsquarify.plot(sizes=ml_algo_df['America'], label=ml_algo_df.index[:5], color=color_map, ax=ax1)\nml_algo_df = ml_algo_df.sort_values(by=\"Europe\", ascending=False)\nsquarify.plot(sizes=ml_algo_df['Europe'], label=ml_algo_df.index[:5], color=color_map, ax=ax2)\nml_algo_df = ml_algo_df.sort_values(by=\"Others\", ascending=False)\nsquarify.plot(sizes=ml_algo_df['Others'], label=ml_algo_df.index[:5], color=color_map, ax=ax3)\nml_algo_df = ml_algo_df.sort_values(by=\"Africa\", ascending=False)\nsquarify.plot(sizes=ml_algo_df['Africa'], label=ml_algo_df.index[:5], color=color_map, ax=ax4)\nml_algo_df = ml_algo_df.sort_values(by=\"Australia\", ascending=False)\nsquarify.plot(sizes=ml_algo_df['Australia'], label=ml_algo_df.index[:5], color=color_map, ax=ax5)\n\nax0.text(0, 130, \n         'Kagglers Machine Learning Algorithm', \n         fontsize=20, fontweight='bold', fontfamily='serif')\n\nax0.text(0, 119, \n         'Linear\/Logistic Regression and Decision Trees\/Random Forests are two most popular algorithm among Kagglers', \n         fontsize=13, fontweight='light', fontfamily='serif')\n\nax0.text(0, 103, \n         'Asia', \n         fontsize=15, fontweight='bold', fontfamily='serif')\n\nax1.text(0, 103, \n         'America', \n         fontsize=15, fontweight='bold', fontfamily='serif')\n\nax2.text(0, 103, \n         'Europe', \n         fontsize=15, fontweight='bold', fontfamily='serif')\n\nax3.text(0, 103, \n         'Others', \n         fontsize=15, fontweight='bold', fontfamily='serif')\n\nax4.text(0, 103, \n         'Africa', \n         fontsize=15, fontweight='bold', fontfamily='serif')\n\nax5.text(0, 103, \n         'Australia', \n         fontsize=15, fontweight='bold', fontfamily='serif')\n\nfor s in [\"top\",\"right\",\"left\", \"bottom\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)","b72d8c5d":"ml_fm_lst = [\"Q16_Part_1\", \"Q16_Part_2\", \"Q16_Part_3\", \"Q16_Part_4\", \"Q16_Part_5\", \"Q16_Part_6\", \"Q16_Part_7\", \"Q16_Part_8\", \n             \"Q16_Part_9\", \"Q16_Part_10\", \"Q16_Part_11\", \"Q16_Part_12\", \"Q16_Part_13\", \"Q16_Part_14\", \"Q16_Part_15\", \"Q16_OTHER\"] \nml_fm_df = survey2020_df.groupby([\"Continents\"])[ml_fm_lst].count()\nml_fm_df.columns = [\"Scikit-learn\", \"TensorFlow\", \"Keras\", \"PyTorch\", \"Fast.ai\", \"MXNet\", \"Xgboost\", \"LightGBM\", \"CatBoost\",\n                    \"Prophet\", \"H2O 3\", \"Caret\", \"Tidymodels\", \"JAX\", \"None\", \"Other\"]\nml_fm_df = ml_fm_df.loc[[\"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\"], :]\nml_fm_df = ml_fm_df.T.sort_values(by=\"Asia\")\n\nml_fm_df[\"Asia_Percentage\"] = ml_fm_df[\"Asia\"].apply(lambda x: (x\/sum(ml_fm_df[\"Asia\"])*100))\nml_fm_df[\"America_Percentage\"] = ml_fm_df[\"America\"].apply(lambda x: (x\/sum(ml_fm_df[\"America\"])*100))\nml_fm_df[\"Europe_Percentage\"] = ml_fm_df[\"Europe\"].apply(lambda x: (x\/sum(ml_fm_df[\"Europe\"])*100))\nml_fm_df[\"Others_Percentage\"] = ml_fm_df[\"Others\"].apply(lambda x: (x\/sum(ml_fm_df[\"Others\"])*100))\nml_fm_df[\"Africa_Percentage\"] = ml_fm_df[\"Africa\"].apply(lambda x: (x\/sum(ml_fm_df[\"Africa\"])*100))\nml_fm_df[\"Australia_Percentage\"] = ml_fm_df[\"Australia\"].apply(lambda x: (x\/sum(ml_fm_df[\"Australia\"])*100))","65eadafc":"# Setting up figure and axes\nfig = plt.figure(figsize=(15,10)) # create figure\ngs = fig.add_gridspec(3, 2)\ngs.update(wspace=0.2, hspace=1)\nax0 = fig.add_subplot(gs[0, 0], ylim=(0, 30))\nax1 = fig.add_subplot(gs[0, 1], ylim=(0, 30))\nax2 = fig.add_subplot(gs[1, 0], ylim=(0, 30))\nax3 = fig.add_subplot(gs[1, 1], ylim=(0, 30))\nax4 = fig.add_subplot(gs[2, 0], ylim=(0, 30))\nax5 = fig.add_subplot(gs[2, 1], ylim=(0, 30))\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\nax2.set_facecolor(background_color) # axes background color\nax3.set_facecolor(background_color) # axes background color\nax4.set_facecolor(background_color) # axes background color\nax5.set_facecolor(background_color) # axes background color\n\nml_fm_df = ml_fm_df.sort_values(by=\"Asia_Percentage\", ascending=False)\nax0.step(ml_fm_df.index, ml_fm_df[\"Asia_Percentage\"], color=\"#008294\")\nax0.plot(ml_fm_df.index, ml_fm_df[\"Asia_Percentage\"], 'o--', color=\"#4b4b4c\", alpha=0.3)\nax0.set_xticklabels(ml_fm_df.index, rotation=90)\n\nml_fm_df = ml_fm_df.sort_values(by=\"America_Percentage\", ascending=False)\nax1.step(ml_fm_df.index, ml_fm_df[\"America_Percentage\"], color=\"#008294\")\nax1.plot(ml_fm_df.index, ml_fm_df[\"America_Percentage\"], 'o--', color=\"#4b4b4c\", alpha=0.3)\nax1.set_xticklabels(ml_fm_df.index, rotation=90)\n\nml_fm_df = ml_fm_df.sort_values(by=\"Europe_Percentage\", ascending=False)\nax2.step(ml_fm_df.index, ml_fm_df[\"Europe_Percentage\"], color=\"#008294\")\nax2.plot(ml_fm_df.index, ml_fm_df[\"Europe_Percentage\"], 'o--', color=\"#4b4b4c\", alpha=0.3)\nax2.set_xticklabels(ml_fm_df.index, rotation=90)\n\nml_fm_df = ml_fm_df.sort_values(by=\"Others_Percentage\", ascending=False)\nax3.step(ml_fm_df.index, ml_fm_df[\"Others_Percentage\"], color=\"#008294\")\nax3.plot(ml_fm_df.index, ml_fm_df[\"Others_Percentage\"], 'o--', color=\"#4b4b4c\", alpha=0.3)\nax3.set_xticklabels(ml_fm_df.index, rotation=90)\n\nml_fm_df = ml_fm_df.sort_values(by=\"Africa_Percentage\", ascending=False)\nax4.step(ml_fm_df.index, ml_fm_df[\"Africa_Percentage\"], color=\"#008294\")\nax4.plot(ml_fm_df.index, ml_fm_df[\"Africa_Percentage\"], 'o--', color=\"#4b4b4c\", alpha=0.3)\nax4.set_xticklabels(ml_fm_df.index, rotation=90)\n\nml_fm_df = ml_fm_df.sort_values(by=\"Australia_Percentage\", ascending=False)\nax5.step(ml_fm_df.index, ml_fm_df[\"Australia_Percentage\"], color=\"#008294\")\nax5.plot(ml_fm_df.index, ml_fm_df[\"Australia_Percentage\"], 'o--', color=\"#4b4b4c\", alpha=0.3)\nax5.set_xticklabels(ml_fm_df.index, rotation=90)\n\nax0.set_xlabel(\"\")\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\nax4.set_ylabel(\"\")\nax5.set_ylabel(\"\")\n\nax0.yaxis.set_major_formatter(mtick.PercentFormatter())\nax1.yaxis.set_major_formatter(mtick.PercentFormatter())\nax2.yaxis.set_major_formatter(mtick.PercentFormatter())\nax3.yaxis.set_major_formatter(mtick.PercentFormatter())\nax4.yaxis.set_major_formatter(mtick.PercentFormatter())\nax5.yaxis.set_major_formatter(mtick.PercentFormatter())\n \nax0.text(-2.5, 43, \n         'Kagglers Machine Learning Framework', \n         fontsize=20, fontweight='bold', fontfamily='serif')\n\nax0.text(-2.5, 38, \n         'Scikit-Learn is the most popular machine learning framework among Kagglers', \n         fontsize=13, fontweight='light', fontfamily='serif')\n\n\nax0.text(0, 32, 'Asia',fontsize=15, fontweight='bold', fontfamily='serif')\nax1.text(0, 32, 'America', fontsize=15, fontweight='bold', fontfamily='serif')\nax2.text(0, 32, 'Europe', fontsize=15, fontweight='bold', fontfamily='serif')\nax3.text(0, 32, 'Others', fontsize=15, fontweight='bold', fontfamily='serif')\nax4.text(0, 32, 'Africa', fontsize=15, fontweight='bold', fontfamily='serif')\nax5.text(0, 32, 'Australia', fontsize=15, fontweight='bold', fontfamily='serif')\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)","e877b264":"viz_lst = [\"Q14_Part_1\", \"Q14_Part_2\", \"Q14_Part_3\", \"Q14_Part_4\", \"Q14_Part_5\", \"Q14_Part_6\", \"Q14_Part_7\", \"Q14_Part_8\", \n             \"Q14_Part_9\", \"Q14_Part_10\", \"Q14_Part_11\", \"Q14_OTHER\"] \nviz_df = survey2020_df.groupby([\"Continents\"])[viz_lst].count()\nviz_df.columns = [\"Matplotlib\", \"Seaborn\", \"Plotly\/Plotly Express\", \"Ggplot\/ggplot2\", \"Shiny\", \"D3 js\", \"Altair\",\n                  \"Bokeh\", \"Geoplotlib\", \"Leaflet\/Folium\", \"None\", \"Other\"]\nviz_df = viz_df.loc[[\"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\"], :]\nviz_df = viz_df.T\nviz_df[\"World\"] = viz_df.sum(axis=1)\nviz_df = viz_df.sort_values(by=\"World\", ascending=True)\nviz_df[\"Min\"] = viz_df.min(axis=1)\nviz_df[\"Max\"] = viz_df.max(axis=1)","10973452":"# Setting up figure and axes\nfig = plt.figure(figsize=(10,5)) # create figure\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0, hspace=0)\nax0 = fig.add_subplot(gs[0, 0])\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\n\ny_dummy = np.arange(1,len(viz_df.index)+1)\n\nax0.hlines(y=y_dummy, xmin=viz_df[\"Min\"], xmax=viz_df[\"Max\"], color='grey', alpha=0.4, zorder=3)\nax0.scatter(viz_df['World'], y_dummy, color='red', label='World')\nax0.scatter(viz_df['Asia'], y_dummy, color='#008294', label='Asia')\nax0.scatter(viz_df['America'], y_dummy, color='#4b4b4c', label='America')\nax0.scatter(viz_df['Europe'], y_dummy, color='#676767', label='Europe')\nax0.scatter(viz_df['Others'], y_dummy, color='#808080', label='Others')\nax0.scatter(viz_df['Africa'], y_dummy, color='#989898', label='Africa')\nax0.scatter(viz_df['Australia'], y_dummy, color='#c6c6c6', label='Australia')\n\ny_label = list(viz_df.index)\ny_label.insert(0, \"\")\nax0.yaxis.set_major_locator(mtick.MultipleLocator(1))\nax0.set_yticklabels(y_label)\nax0.set_xticklabels([])\nax0.tick_params(bottom=False)\n   \nax0.text(-100, 14, \n         'Kagglers Visualization Libraries', \n         fontsize=20, fontweight='bold', fontfamily='serif')\n\nax0.text(-100, 13.2, \n         'Matplotlib is the most popular visualization libraries among Kagglers ', \n         fontsize=13, fontweight='light', fontfamily='serif')\n\nax0.legend(loc='lower center', ncol=7, bbox_to_anchor=(0.53, -0.1))\n\nfor s in [\"top\",\"right\", \"left\", \"bottom\"]:\n    ax0.spines[s].set_visible(False)","ec9a53ea":"vis_lst = [\"Q18_Part_1\", \"Q18_Part_2\", \"Q18_Part_3\", \"Q18_Part_4\", \"Q18_Part_5\", \"Q18_Part_6\", \"Q18_OTHER\"] \nvis_df = survey2020_df.groupby([\"Continents\"])[vis_lst].count()\nvis_df.columns = [\"General purpose image\/video tools\", \"Image segmentation methods\",\n                  \"Object detection methods\", \"Image classification & oth general networks\",\n                  \"Generative Networks\",\n                  \"None\", \"Other\"]\n\nvis_df = vis_df.loc[[\"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\"], :]\nvis_df = vis_df.T\nvis_df[\"World\"] = vis_df.sum(axis=1)\n\nvis_df[\"World_Percentage\"] = vis_df[\"World\"].apply(lambda x: x\/sum(vis_df[\"World\"])) *100\nvis_df[\"Asia_Percentage\"] = vis_df[\"Asia\"].apply(lambda x: x\/sum(vis_df[\"Asia\"])) *100 \nvis_df[\"America_Percentage\"] = vis_df[\"America\"].apply(lambda x: x\/sum(vis_df[\"America\"])) *100 \nvis_df[\"Europe_Percentage\"] = vis_df[\"Europe\"].apply(lambda x: x\/sum(vis_df[\"Europe\"])) *100 \nvis_df[\"Others_Percentage\"] = vis_df[\"Others\"].apply(lambda x: x\/sum(vis_df[\"Others\"])) *100 \nvis_df[\"Africa_Percentage\"] = vis_df[\"Africa\"].apply(lambda x: x\/sum(vis_df[\"Africa\"])) *100 \nvis_df[\"Australia_Percentage\"] = vis_df[\"Australia\"].apply(lambda x: x\/sum(vis_df[\"Australia\"])) *100 \nvis_df = vis_df.drop([\"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\", \"World\"], axis=1)","2b87d8f6":"# Setting up figure and axes\nfig = plt.figure(figsize=(15,10)) # create figure\ngs = fig.add_gridspec(3, 2)\ngs.update(wspace=0.8, hspace=0.5)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[1, 0])\nax3 = fig.add_subplot(gs[1, 1])\nax4 = fig.add_subplot(gs[2, 0])\nax5 = fig.add_subplot(gs[2, 1])\n\nax0.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax1.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax2.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax3.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax4.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax5.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\nax2.set_facecolor(background_color) # axes background color\nax3.set_facecolor(background_color) # axes background color\nax4.set_facecolor(background_color) # axes background color\nax5.set_facecolor(background_color) # axes background color\n\nvis_df = vis_df.sort_values(by=\"Asia_Percentage\", ascending=True)\nax0.barh(vis_df.index, vis_df['World_Percentage'], color=\"#d3d3d3\", zorder=3, height=0.7)\nax0.barh(vis_df.index, vis_df['Asia_Percentage'], color=\"#008294\", zorder=3, height=0.3)\nax0.xaxis.set_major_locator(mtick.MultipleLocator(10))\n\nvis_df = vis_df.sort_values(by=\"America_Percentage\", ascending=True)\nax1.barh(vis_df.index, vis_df['World_Percentage'], color=\"#d3d3d3\", zorder=3, height=0.7)\nax1.barh(vis_df.index, vis_df['America_Percentage'], color=\"#008294\", zorder=3, height=0.3)\nax1.xaxis.set_major_locator(mtick.MultipleLocator(10))\n\nvis_df = vis_df.sort_values(by=\"Europe_Percentage\", ascending=True)\nax2.barh(vis_df.index, vis_df['World_Percentage'], color=\"#d3d3d3\", zorder=3, height=0.7)\nax2.barh(vis_df.index, vis_df['Europe_Percentage'], color=\"#008294\", zorder=3, height=0.3)\nax2.xaxis.set_major_locator(mtick.MultipleLocator(10))\n\nvis_df = vis_df.sort_values(by=\"Others_Percentage\", ascending=True)\nax3.barh(vis_df.index, vis_df['World_Percentage'], color=\"#d3d3d3\", zorder=3, height=0.7)\nax3.barh(vis_df.index, vis_df['Others_Percentage'], color=\"#008294\", zorder=3, height=0.3)\nax3.xaxis.set_major_locator(mtick.MultipleLocator(10))\n\nvis_df = vis_df.sort_values(by=\"Africa_Percentage\", ascending=True)\nax4.barh(vis_df.index, vis_df['World_Percentage'], color=\"#d3d3d3\", zorder=3, height=0.7)\nax4.barh(vis_df.index, vis_df['Africa_Percentage'], color=\"#008294\", zorder=3, height=0.3)\nax4.xaxis.set_major_locator(mtick.MultipleLocator(10))\n\nvis_df = vis_df.sort_values(by=\"Australia_Percentage\", ascending=True)\nax5.barh(vis_df.index, vis_df['World_Percentage'], color=\"#d3d3d3\", zorder=3, height=0.7)\nax5.barh(vis_df.index, vis_df['Australia_Percentage'], color=\"#008294\", zorder=3, height=0.3)\nax5.xaxis.set_major_locator(mtick.MultipleLocator(10))\n\nax0.legend([\"World\", \"Continent\"], loc=\"lower center\", bbox_to_anchor=(-0.5, 1.15), ncol=2)\n\nax0.xaxis.set_major_formatter(mtick.PercentFormatter())  \nax1.xaxis.set_major_formatter(mtick.PercentFormatter())  \nax2.xaxis.set_major_formatter(mtick.PercentFormatter())  \nax3.xaxis.set_major_formatter(mtick.PercentFormatter())  \nax4.xaxis.set_major_formatter(mtick.PercentFormatter())  \nax5.xaxis.set_major_formatter(mtick.PercentFormatter())  \n   \nax0.text(0, 7, 'Asia',fontsize=15, fontweight='bold', fontfamily='serif')\nax1.text(0, 7, 'America', fontsize=15, fontweight='bold', fontfamily='serif')\nax2.text(0, 7, 'Europe', fontsize=15, fontweight='bold', fontfamily='serif')\nax3.text(0, 7, 'Others', fontsize=15, fontweight='bold', fontfamily='serif')\nax4.text(0, 7, 'Africa', fontsize=15, fontweight='bold', fontfamily='serif')\nax5.text(0, 7, 'Australia', fontsize=15, fontweight='bold', fontfamily='serif')\n\nax0.text(-23, 10.5, 'Kagglers Computer Vision Methods ', \n         fontsize=20, fontweight='bold', fontfamily='serif')\n\nax0.text(-23, 9.5, \n         'Image classification and other general purposes networks are the most popular method among Kagglers', \n         fontsize=13, fontweight='light', fontfamily='serif')\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)","9f8936ff":"nlp_lst = [\"Q19_Part_1\", \"Q19_Part_2\", \"Q19_Part_3\", \"Q19_Part_4\", \"Q19_Part_5\", \"Q19_OTHER\"] \nnlp_df = survey2020_df.groupby([\"Continents\"])[nlp_lst].count()\nnlp_df.columns = [\"Word embeddings\\n\/vectors\", \"Encoder-decoder\\nmodels\", \"Contextualized\\nembeddings\", \"Transformer\\nlanguage models\",\n                  \"None\", \"Other\"]\n\nnlp_df = nlp_df.loc[[\"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\"], :]\nnlp_df = nlp_df.T\nnlp_df[\"World\"] = nlp_df.sum(axis=1)","389688e8":"# Setting up figure and axes\nfig = plt.figure(figsize=(20,10)) # create figure\ngs = fig.add_gridspec(2, 3)\ngs.update(wspace=0.3, hspace=0.8)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\nax3 = fig.add_subplot(gs[1, 0])\nax4 = fig.add_subplot(gs[1, 1])\nax5 = fig.add_subplot(gs[1, 2])\n\nax0.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax1.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax2.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax3.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax4.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\nax5.grid(color='black', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\nax2.set_facecolor(background_color) # axes background color\nax3.set_facecolor(background_color) # axes background color\nax4.set_facecolor(background_color) # axes background color\nax5.set_facecolor(background_color) # axes background color\n\nnlp_df = nlp_df.sort_values(by=\"Asia\", ascending=False)\nax0.fill_between(x=nlp_df.index, y1=nlp_df['Asia'], color=\"#d3d3d3\", zorder=3, alpha=0.5)\nax0.scatter(x=nlp_df.index, y=nlp_df[\"Asia\"], s=75, color=\"#008294\", zorder=4)\nax0.set_xticklabels(nlp_df.index, rotation=90)\n\nnlp_df = nlp_df.sort_values(by=\"America\", ascending=False)\nax1.fill_between(x=nlp_df.index, y1=nlp_df['America'], color=\"#d3d3d3\", zorder=3, alpha=0.5)\nax1.scatter(x=nlp_df.index, y=nlp_df[\"America\"], s=75, color=\"#008294\", zorder=4)\nax1.set_xticklabels(nlp_df.index, rotation=90)\n\nnlp_df = nlp_df.sort_values(by=\"Europe\", ascending=False)\nax2.fill_between(x=nlp_df.index, y1=nlp_df['Europe'], color=\"#d3d3d3\", zorder=3, alpha=0.5)\nax2.scatter(x=nlp_df.index, y=nlp_df[\"Europe\"], s=75, color=\"#008294\", zorder=4)\nax2.set_xticklabels(nlp_df.index, rotation=90)\n\nnlp_df = nlp_df.sort_values(by=\"Others\", ascending=False)\nax3.fill_between(x=nlp_df.index, y1=nlp_df['Others'], color=\"#d3d3d3\", zorder=3, alpha=0.5)\nax3.scatter(x=nlp_df.index, y=nlp_df[\"Others\"], s=75, color=\"#008294\", zorder=4)\nax3.set_xticklabels(nlp_df.index, rotation=90)\n\nnlp_df = nlp_df.sort_values(by=\"Africa\", ascending=False)\nax4.fill_between(x=nlp_df.index, y1=nlp_df['Africa'], color=\"#d3d3d3\", zorder=3, alpha=0.5)\nax4.scatter(x=nlp_df.index, y=nlp_df[\"Africa\"], s=75, color=\"#008294\", zorder=4)\nax4.set_xticklabels(nlp_df.index, rotation=90)\n\nnlp_df = nlp_df.sort_values(by=\"Australia\", ascending=False)\nax5.fill_between(x=nlp_df.index, y1=nlp_df['Australia'], color=\"#d3d3d3\", zorder=3, alpha=0.5)\nax5.scatter(x=nlp_df.index, y=nlp_df[\"Australia\"], s=75, color=\"#008294\", zorder=4)\nax5.set_xticklabels(nlp_df.index, rotation=90)\n\nax0.text(0, 1250, 'Asia',fontsize=15, fontweight='bold', fontfamily='serif')\nax1.text(0, 390, 'America', fontsize=15, fontweight='bold', fontfamily='serif')\nax2.text(0, 390, 'Europe', fontsize=15, fontweight='bold', fontfamily='serif')\nax3.text(0, 140, 'Others', fontsize=15, fontweight='bold', fontfamily='serif')\nax4.text(0, 105, 'Africa', fontsize=15, fontweight='bold', fontfamily='serif')\nax5.text(0, 15, 'Australia', fontsize=15, fontweight='bold', fontfamily='serif')\n\nax0.text(-1, 1600, \n         'Kagglers Natural Language Processing Methods', \n         fontsize=20, fontweight='bold', fontfamily='serif')\n\nax0.text(-1, 1480, \n         'Word embeddings\/vectors are the most popular NLP methods among Kagglers', \n         fontsize=13, fontweight='light', fontfamily='serif')\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)","777fd568":"continents_count_df = pd.DataFrame(survey2020_df[\"Q11\"].value_counts())\ncontinents_count_df = continents_count_df.reset_index(drop=False)\ncontinents_count_df.columns = [\"Platform\",\"Count\"]\n\nasia_country_count_df = pd.DataFrame(survey2020_asia_df[\"Q11\"].value_counts())\nasia_country_count_df = asia_country_count_df.reset_index(drop=False)\nasia_country_count_df.columns = [\"Platform\",\"Count\"]\n\namerica_country_count_df = pd.DataFrame(survey2020_america_df[\"Q11\"].value_counts())\namerica_country_count_df = america_country_count_df.reset_index(drop=False)\namerica_country_count_df.columns = [\"Platform\",\"Count\"]\n\neurope_country_count_df = pd.DataFrame(survey2020_europe_df[\"Q11\"].value_counts())\neurope_country_count_df = europe_country_count_df.reset_index(drop=False)\neurope_country_count_df.columns = [\"Platform\",\"Count\"]\n\nothers_country_count_df = pd.DataFrame(survey2020_others_df[\"Q11\"].value_counts())\nothers_country_count_df = others_country_count_df.reset_index(drop=False)\nothers_country_count_df.columns = [\"Platform\",\"Count\"]\n\nafrica_country_count_df = pd.DataFrame(survey2020_africa_df[\"Q11\"].value_counts())\nafrica_country_count_df = africa_country_count_df.reset_index(drop=False)\nafrica_country_count_df.columns = [\"Platform\",\"Count\"]\n\naustralia_country_count_df = pd.DataFrame(survey2020_australia_df[\"Q11\"].value_counts())\naustralia_country_count_df = australia_country_count_df.reset_index(drop=False)\naustralia_country_count_df.columns = [\"Platform\",\"Count\"]","2874c246":"# Setting up figure and axes\nfig = plt.figure(figsize=(10,5)) # create figure\ngs = fig.add_gridspec(2, 3)\ngs.update(wspace=0.1, hspace=0)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1]) # create axes\nax2 = fig.add_subplot(gs[0, 2]) # create axes\nax3 = fig.add_subplot(gs[1, 0]) # create axes\nax4 = fig.add_subplot(gs[1, 1]) # create axes\nax5 = fig.add_subplot(gs[1, 2]) # create axes\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\nax2.set_facecolor(background_color) # axes background color\nax3.set_facecolor(background_color) # axes background color\nax4.set_facecolor(background_color) # axes background color\nax5.set_facecolor(background_color) # axes background color\n\ncolor_map = [\"#008294\", \"#4b4b4c\", \"#989898\", \"#676767\", \"#808080\"]\n\n# Asia\nax0.pie(x=asia_country_count_df['Count'], colors=color_map, wedgeprops=dict(width=0.2))\n\nax0.text(0, 1.2, \n         'Asia', \n         fontsize=13, \n         fontweight='bold', \n         fontfamily='serif',\n         horizontalalignment='center'\n        )\n\nax0.text(-1, 3.5, \n         'Kagglers Computing Platform', \n         fontsize=20, \n         fontweight='bold', \n         fontfamily='serif',\n        )\n\nax0.text(-1, 3.1, \n         'Personal Computer and Laptop are the main computing platform for Kagglers', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif',\n        )\n\nax0.legend(continents_count_df[\"Platform\"], loc='lower center', ncol=2, bbox_to_anchor=(1.8, 1.2))\n\n# America\nax1.pie(x=america_country_count_df['Count'], colors=color_map, wedgeprops=dict(width=0.2))\n\nax1.text(0, 1.2, \n         'America', \n         fontsize=13, \n         fontweight='bold', \n         fontfamily='serif',\n         horizontalalignment='center'\n        )\n\n# Europe\nax2.pie(x=europe_country_count_df['Count'], colors=color_map, wedgeprops=dict(width=0.2))\n\nax2.text(0, 1.2, \n         'Europe', \n         fontsize=13, \n         fontweight='bold', \n         fontfamily='serif',\n         horizontalalignment='center'\n        )\n\n# Others\nax3.pie(x=others_country_count_df['Count'], colors=color_map, wedgeprops=dict(width=0.2))\n\nax3.text(0, 1.2, \n         'Others', \n         fontsize=13, \n         fontweight='bold', \n         fontfamily='serif',\n         horizontalalignment='center'\n        )\n\n# Africa\nax4.pie(x=africa_country_count_df['Count'], colors=color_map, wedgeprops=dict(width=0.2))\n\nax4.text(0, 1.2, \n         'Africa', \n         fontsize=13, \n         fontweight='bold', \n         fontfamily='serif',\n         horizontalalignment='center'\n        )\n\n# Australia\nax5.pie(x=australia_country_count_df['Count'], colors=color_map, wedgeprops=dict(width=0.2))\n\nax5.text(0, 1.2, \n         'Australia', \n         fontsize=13, \n         fontweight='bold', \n         fontfamily='serif',\n         horizontalalignment='center'\n        )","744ee99e":"sp_hdw_lst = [\"Q12_Part_1\", \"Q12_Part_2\", \"Q12_Part_3\", \"Q12_OTHER\"] \nsp_hdw_df = survey2020_df.groupby([\"Continents\"])[sp_hdw_lst].count()\nsp_hdw_df.columns = [\"GPUs\", \"TPUs\", \"None\", \"Other\"]     \nsp_hdw_df = sp_hdw_df.loc[[\"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\"], :]\nsp_hdw_df = sp_hdw_df.T.sort_values(by=\"Asia\", ascending=False)\nsp_hdw_df[\"World\"] = sp_hdw_df.sum(axis=1)\nfirst_col = sp_hdw_df.pop(\"World\")\nsp_hdw_df.insert(0, \"World\", first_col)\n\nsp_hdw_df[\"World_Percentage\"] = sp_hdw_df[\"World\"].apply(lambda x: (x\/sum(sp_hdw_df[\"World\"])*100))\nsp_hdw_df[\"Asia_Percentage\"] = sp_hdw_df[\"Asia\"].apply(lambda x: (x\/sum(sp_hdw_df[\"Asia\"])*100))\nsp_hdw_df[\"America_Percentage\"] = sp_hdw_df[\"America\"].apply(lambda x: (x\/sum(sp_hdw_df[\"America\"])*100))\nsp_hdw_df[\"Europe_Percentage\"] = sp_hdw_df[\"Europe\"].apply(lambda x: (x\/sum(sp_hdw_df[\"Europe\"])*100))\nsp_hdw_df[\"Others_Percentage\"] = sp_hdw_df[\"Others\"].apply(lambda x: (x\/sum(sp_hdw_df[\"Others\"])*100))\nsp_hdw_df[\"Africa_Percentage\"] = sp_hdw_df[\"Africa\"].apply(lambda x: (x\/sum(sp_hdw_df[\"Africa\"])*100))\nsp_hdw_df[\"Australia_Percentage\"] = sp_hdw_df[\"Australia\"].apply(lambda x: (x\/sum(sp_hdw_df[\"Australia\"])*100))\n\nsp_hdw_df = sp_hdw_df.drop([\"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\", \"World\"], axis=1) ","283b470c":"# Setting up figure and axes\nfig = plt.figure(figsize=(12,4)) # create figure\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0, hspace=0)\nax0 = fig.add_subplot(gs[0, 0], ylim=(0,60))\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\n\nax0.grid(color='black', linestyle=':', axis='x', zorder=0)\n\nax0.scatter(np.arange(7), sp_hdw_df.loc[\"GPUs\",:], marker=\"o\", color=\"#008294\")\nax0.scatter(np.arange(7), sp_hdw_df.loc[\"None\",:], marker=\"o\", color=\"#4b4b4c\")\nax0.scatter(np.arange(7), sp_hdw_df.loc[\"TPUs\",:], marker=\"o\", color=\"#676767\")\nax0.scatter(np.arange(7), sp_hdw_df.loc[\"Other\",:], marker=\"o\", color=\"#bdbdbd\")\n\nax0.plot(np.arange(7), sp_hdw_df.loc[\"GPUs\",:], marker=\"o\", color=\"#008294\")\nax0.plot(np.arange(7), sp_hdw_df.loc[\"None\",:], marker=\"o\", color=\"#4b4b4c\")\nax0.plot(np.arange(7), sp_hdw_df.loc[\"TPUs\",:], marker=\"o\", color=\"#676767\")\nax0.plot(np.arange(7), sp_hdw_df.loc[\"Other\",:], marker=\"o\", color=\"#bdbdbd\")\n\nax0.yaxis.set_major_formatter(mtick.PercentFormatter())    \nax0.set_xticklabels([\"\", \"World\", \"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\"])\nax0.legend(sp_hdw_df.index, loc=\"lower center\", bbox_to_anchor=(0.5, -0.25), ncol=4)\n  \nax0.text(-0.5, 75, \n         'Kagglers Specialized Hardware', \n         fontsize=20, \n         fontweight='bold', \n         fontfamily='serif',\n        )\n\nax0.text(-0.5, 70, \n         'GPUs is the most popular specialized hardware', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif',\n        )\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)","87445090":"cloud_lst = [\"Q26_A_Part_1\", \"Q26_A_Part_2\", \"Q26_A_Part_3\", \"Q26_A_Part_4\", \"Q26_A_Part_5\", \"Q26_A_Part_6\", \"Q26_A_Part_7\", \n           \"Q26_A_Part_8\", \"Q26_A_Part_9\", \"Q26_A_Part_10\", \"Q26_A_Part_11\", \"Q26_A_OTHER\"] \ncloud_df = survey2020_df.groupby([\"Continents\"])[cloud_lst].count()\ncloud_df.columns = [\"Amazon Web Services\", \"Microsoft Azure\", \"Google Cloud Platform\", \"IBM Cloud\/Red Hat\", \"Oracle Cloud\", \n                  \"SAP Cloud\", \"Salesforce Cloud\", \"VMware Cloud\", \"Alibaba Cloud\", \"Tencent Cloud\", \"None\", \"Other\"]\ncloud_df = cloud_df.loc[[\"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\"], :]\ncloud_df = cloud_df.T","e72d1be7":"# Setting up figure and axes\nfig = plt.figure(figsize=(18,10)) # create figure\ngs = fig.add_gridspec(2, 3)\ngs.update(wspace=0.1, hspace=1)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\nax3 = fig.add_subplot(gs[1, 0])\nax4 = fig.add_subplot(gs[1, 1])\nax5 = fig.add_subplot(gs[1, 2])\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\nax2.set_facecolor(background_color) # axes background color\nax3.set_facecolor(background_color) # axes background color\nax4.set_facecolor(background_color) # axes background color\nax5.set_facecolor(background_color) # axes background color\n\ncolor_map = [\"#bdbdbd\" for _ in range(12)]\ncolor_map[0] = \"#008294\"\n\ncloud_df = cloud_df.sort_values(by=\"Asia\", ascending=False)\nax0.vlines(x=cloud_df.index, ymin=0, ymax=cloud_df[\"Asia\"], color=color_map)\nax0.scatter(x=cloud_df.index, y=cloud_df[\"Asia\"], s=75, color=color_map)\nax0.set_xticklabels(cloud_df.index, rotation=90)\ncloud_df = cloud_df.sort_values(by=\"America\", ascending=False)\nax1.vlines(x=cloud_df.index, ymin=0, ymax=cloud_df[\"America\"], color=color_map)\nax1.scatter(x=cloud_df.index, y=cloud_df[\"America\"], s=75, color=color_map)\nax1.set_xticklabels(cloud_df.index, rotation=90)\ncloud_df = cloud_df.sort_values(by=\"Europe\", ascending=False)\nax2.vlines(x=cloud_df.index, ymin=0, ymax=cloud_df[\"Europe\"], color=color_map)\nax2.scatter(x=cloud_df.index, y=cloud_df[\"Europe\"], s=75, color=color_map)\nax2.set_xticklabels(cloud_df.index, rotation=90)\ncloud_df = cloud_df.sort_values(by=\"Others\", ascending=False)\nax3.vlines(x=cloud_df.index, ymin=0, ymax=cloud_df[\"Others\"], color=color_map)\nax3.scatter(x=cloud_df.index, y=cloud_df[\"Others\"], s=75, color=color_map)\nax3.set_xticklabels(cloud_df.index, rotation=90)\ncloud_df = cloud_df.sort_values(by=\"Africa\", ascending=False)\nax4.vlines(x=cloud_df.index, ymin=0, ymax=cloud_df[\"Africa\"], color=color_map)\nax4.scatter(x=cloud_df.index, y=cloud_df[\"Africa\"], s=75, color=color_map)\nax4.set_xticklabels(cloud_df.index, rotation=90)\ncloud_df = cloud_df.sort_values(by=\"Australia\", ascending=False)\nax5.vlines(x=cloud_df.index, ymin=0, ymax=cloud_df[\"Australia\"], color=color_map)\nax5.scatter(x=cloud_df.index, y=cloud_df[\"Australia\"], s=75, color=color_map)\nax5.set_xticklabels(cloud_df.index, rotation=90)\n\nax0.text(-2, 1280, 'Asia',fontsize=15, fontweight='bold', fontfamily='serif')\nax1.text(-2, 950, 'America', fontsize=15, fontweight='bold', fontfamily='serif')\nax2.text(-2, 550, 'Europe', fontsize=15, fontweight='bold', fontfamily='serif')\nax3.text(-2, 185, 'Others', fontsize=15, fontweight='bold', fontfamily='serif')\nax4.text(-2, 150, 'Africa', fontsize=15, fontweight='bold', fontfamily='serif')\nax5.text(-2, 60, 'Australia', fontsize=15, fontweight='bold', fontfamily='serif')\n\nax0.text(-2, 1550, \n         'Kagglers Cloud Computing Platform', \n         fontsize=20, fontweight='bold', fontfamily='serif')\n\nax0.text(-2, 1430, \n         'AWS, GCP and Azure are three most popular cloud computing platform', \n         fontsize=13, fontweight='light', fontfamily='serif')\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)","4a3c6135":"<a id=\"kagglers-programming-languages\"><\/a>\n[back to top](#table-of-contents)\n### 4.4. Kagglers Programming Languages \nThe interesting things are:\n* Python is the clear winners in here, Python is the most popular programming languanges amount Kagglers in every continents.\n* The second most popular programming languanges that Kagglers use is SQL.\n* R is not popular among Kaggler in Asia as it is ranked 6, which very different from the rest of the world which put R as no 3 programming languanges.\n* C and C++ are also still popular in Asia compared to other continents. ","e3df34b2":"# Kagglers Seen by Continents\n\n<a id=\"table-of-contents\"><\/a>\n1.  [Introduction](#introduction)\n2.  [Data Preparation](#data-preparation)\n3.  [Demographic](#demographic)\n    * 3.1. [Kagglers Continents](#kagglers-continents)\n    * 3.2. [Kagglers Age](#kagglers-age)\n    * 3.3. [Kagglers Compensation](#kagglers-compensation)\n    * 3.4. [Kagglers Gender](#kagglers-gender)\n    * 3.5. [Kagglers Education](#kagglers-education)\n    * 3.6. [Kagglers Role](#kagglers-role)\n4. [Programming & Machine Learning](#programming-machine-learning)\n    * 4.1 [Kagglers Programming Experiences](#kagglers-programming-experiences)\n    * 4.2 [Kagglers Machine Learning & Programming Experience](#kagglers-machine-learning-programming-experience)\n    * 4.3 [Kagglers IDE](#kagglers-ide)\n    * 4.4 [Kagglers Programming Languanges](#kagglers-programming-languages)\n    * 4.5 [Kagglers Machine Learning Algorithm](#kagglers-machine-learning-algorithm)\n    * 4.6 [Kagglers Machine Learning Framework](#kagglers-machine-learning-framework) \n    * 4.7 [Kagglers Visualization Libraries](#kagglers-visualization-libraries)\n    * 4.8 [Kagglers Computer Vision Methods](#kagglers-computer-vision-methods)\n    * 4.9 [Kagglers Natural Language Processing Methods](#kagglers-nlp-methods)\n5. [Computing Power](#computing)\n    * 5.1 [Kagglers Computing Platform](#kagglers-computing-platform)\n    * 5.2 [Kagglers Specialized Hardware](#kagglers-specialized-hardware)\n    * 5.3 [Kagglers Cloud Computing Platform](#kagglers-cloud-computing-platform)\n6. [Summary](#summary)","8a38c3ab":"<a id=\"kagglers-ide\"><\/a>\n[back to top](#table-of-contents)\n### 4.3. Kagglers IDE \n\nThe interesting things are:\n* Jupyter is the most used IDE for Kagglers around the world.\n* Though VSCode is the 2nd most used IDE in the world, it still has a very big gap compared to Jupyter.\n* The third place is varies among the continents with most of Kagglers choose PyCharm except for America and Australia which prefer RStudio compared to PyCharm.\n* R is ranked as the 3rd highest languange in all continents (except in Asia), but RStudio is not as popular as R itself in Europe, Others and Africa. Pycharm is still dominating in those three continents.  ","52a26598":"<a id=\"kagglers-machine-learning-programming-experience\"><\/a>\n[back to top](#table-of-contents)\n### 4.2. Kagglers Machine Learning & Programming Experience \n\nThe interesting things are:\n*  There is a growing interest of machine learning in the world as can be seen by Kaggler that have experience in programming 5 years and below have done machine learning. \n* Many Kagglers have an experience of programming and machine learning below 1 years and 1-2 years which mean that many Kagglers do programming specifically for machine learning.\n* Many Kaggler in America, Europe, Others and Australia that have more experience in programming but less in machine learning. This can be interpreted that machine learning still has an interst for more experience programmer but its hardly seen in Asia and Africa, though it's still happening.","154ba1b3":"<a id=\"computing\"><\/a>\n[back to top](#table-of-contents)\n## 5. Computing Power\nIn this section, we are going to see more on hardware that are used by Kagglers on their regular basis.","41de7d6e":"<a id=\"kagglers-machine-learning-framework\"><\/a>\n[back to top](#table-of-contents)\n### 4.6. Kagglers Machine Learning Framework \n\nThe interesting things are:\n* Kagglers around the world agree the popularity rank for Scikit-Learn, TensorFlow and Keras which are in order of 1 to 3 respectively. \n* The differences between TensorFlow and Keras are not far away among Kagglers as Keras is the high level API for TensorFlow. Kagglers that use Keras is also using TensorFlow but Kagglers that use TensorFlow may not using Keras, this situation also explain why TensorFlow is more popular than Keras. \n* Xgboost is more popular in Africa and Australia compared to PyTorch while the rest of world prefers PyTorch.","ea6e1dab":"<a id=\"programming-machine-learning\"><\/a>\n[back to top](#table-of-contents)\n## 4. Programming & Machine Learning\nIn this section, we are trying to see more information on programming and machine learning that Kaggler used in their regular basis based on their continents.\n\n<a id=\"kagglers-programming-experiences\"><\/a>\n[back to top](#table-of-contents)\n### 4.1. Kagglers Programming Experience\nThe interesting things are:\n* There is no Kaggler that has experience between 2-3 years which is quite strange. It may be due to error when the survey conducted. \n* Most of Asian and African Kagglers have experience between 1-2 years and Kagglers with 20+ years experience are very small.\n* On the other hand American, European and Others Kagglers have experience between 3-5 years. \n* Australia are dominated with Kagglers that have experience between 5-10 years, more experience Kagglers are more interested to join Kaggle.","d749964d":"<a id=\"kagglers-nlp-methods\"><\/a>\n[back to top](#table-of-contents)\n### 4.9. Kagglers Natural Language Processing Methods\n\nThe interesting things are:\n* Word embeddings\/vectors are the most popular methods among Kagglers around the world.\n* Encoder-decoder models are the 2nd most popular NLP methods for Asian and African Kagglers. This is very different with Kagglers in America, Europe and Australia that more prefer Transformer language models.\n* Many Kaggler that live in Others continents don't use any NLP methods as it is ranked at position 2 and there is no distinct differences with Encoder-decoder models and Transformer language models.","8889b02e":"<a id=\"kagglers-gender\"><\/a>\n[back to top](#table-of-contents)\n### 3.4. Kagglers Gender\nThe interesting things are:\n\n* Most of Kagglers are man and it is consistent across all continents.","219b28ec":"<a id=\"introduction\"><\/a>\n[back to top](#table-of-contents)\n## 1. Introduction\n\nKaggle conducts an industry-wide survey that presents a truly comprehensive view of the state of data science and machine learning. The survey was live for 3.5 weeks in October with 20,036 responses.\n\nThe challenge objective: tell a data story about a subset of the data science community represented in this survey, through a combination of both narrative text and data exploration. A \u201cstory\u201d could be defined any number of ways, and that\u2019s deliberate. The challenge is to deeply explore (through data) the impact, priorities, or concerns of a specific group of data science and machine learning practitioners. This notebook tries to see Kagglers from the **perspective of continents**. ","bc15200b":"<a id=\"kagglers-education\"><\/a>\n[back to top](#table-of-contents)\n### 3.4. Kagglers Education\n\nThe interesting things are:\n* Most of Kagglers have Master degree followed by Bachelor degree. Master degree is the most education Kagglers had in every continents except for Asia and Africa. \n* While most of Asian and African Kagglers have a bachelor degree.","bb6d849d":"<a id=\"kagglers-role\"><\/a>\n[back to top](#table-of-contents)\n### 3.6. Kagglers Role\nThe interesting things are:\n* Most of Kagglers are Students, meaning there is a growing interest from younger people to pursue data related job which is a good sign and Asia has the biggest student compared to other continents.\n* Other than Asia and Africa, most of the role between Student and Data Scientist are quite balance as it can be seen in America, Europe, Australia and Others","8c0dfbb8":"<a id=\"kagglers-compensation\"><\/a>\n[back to top](#table-of-contents)\n### 3.3. Kagglers Compensation\n\nThe interesting things are:\n* Most of Kaggler compensation is USD 0-999\/year. This may raise a question, if the respondents have answer it correctly in a yearly basis because it seems too low.\n\nAs USD 0-999\/year bracket shifting our view, we try to exclude it and we find:\n* Asian Kaggler compensation are varies from USD 1,000-80,000\/year.\n* American Kaggler are paid higher compared to other Kaggler in a range of USD 100,000-199,000\/year.\n* European and Others Kaggler are quite the same, they are paid in range of USD 30,000-79,999\/year and are paid more higher compared to Asian Kaggler.\n* It seems that African Kaggler are paid lower compared to others Kaggler while Australia Kaggler are in range of USD 40,000-149,999\/year.","6bae46f8":"<a id=\"kagglers-machine-learning-algorithm\"><\/a>\n[back to top](#table-of-contents)\n### 4.5. Kagglers Machine Learning Algorithm \n\nThe interesting things are:\n* The first two algorithm that are regularly used by Kaggler around the world are the same. They are Linear\/Logistic Regression and Decision Trees\/Random Forests.\n* Asian, Others, African and Australian Kagglers ranked Convolutional Neural Networks as their 3rd regularly used algorithm and ranked Gradient Boosting Machines in the 4th position. This is reversed from America and Europe continents which ranked Gradient Boosting Machines in the 3rd position.\n* Fifth position can be separated into 3 classification: (a) Recurrent Neural Networks are popular in Asia and Others continents, (b) Bayesian Approaches is more popular in America, Africa and Australia and (c) Dense Neural Networks is popular among Kagglers in Europe.","7316cd2d":"<a id=\"kagglers-computer-vision-methods\"><\/a>\n[back to top](#table-of-contents)\n### 4.8. Kagglers Computer Vision Methods \n\nThe interesting things are:\n* Kagglers around the world agree that image classification & other general purposes networks are the most popular computer vision methods.\n* The differences between object detection methods, general purpose image\/video tools and image segmentations method are not distinct among Kagglers except for Australia that put object detection methods at position 5 below Kagglers that not use any computer vision methods.\n* Object detection methods are the second most popular methods in Asia and Africa. The rest of Kagglers  ranked these methods at position 4 and position 5 (Australia), they put General purpose image\/video tools as the 2nd most popular methods.","fb82f1d0":"<a id=\"kagglers-cloud-computing-platform\"><\/a>\n[back to top](#table-of-contents)\n### 5.3. Kagglers Cloud Computing Platform\n\nThe interesting things are:\n* Amazon Web Services is the king of cloud computing platform among Kagglers. \n* Kagglers around the world agree that top 3 cloud computing platform are Amazon Web Services (AWS), Google Cloud Platform (GCP) and Microsoft Azure though the position are different in every continents.\n* In Asia, the differences between AWS and GCP are not far enough followed by Kagglers that don't use cloud computing platform.\n* American Kagglers prefer AWS than GCP as the gap is quite far and Azure in the third place following the GCP.\n* European Kagglers preferences is more like Asian Kagglers with AWS and GCP are the leading cloud computing platform but in Europe, the gap between AWS and GCP is more far than in Asia.\n* In Others continents, Kagglers user of AWS and GCP are almost the same. The gap between AWS, GCP, Azure and None are not far enough.\n* African Kagglers choose GCP more than AWS while the Azure in 4th position following Kagglers without use of any cloud computing platform.\n* Only in Australia, Azure get the 2nd position above GCP but the most popular cloud computing is still AWS with quite a big gap. ","031f5ada":"<a id=\"kagglers-visualization-libraries\"><\/a>\n[back to top](#table-of-contents)\n### 4.7. Kagglers Visualization Libraries \n\nThe interesting things are:\n* Matplotlib is the most popular visualization libraries followed by Seaborn due to popularity Python among Kagglers\n* Plotly\/Plotply Express and Ggplot\/ggplot2 share almost the same popularity with Plotply\/Plotply Express a little bit more popular. \n* Ggplot\/ggplot2 is more popular than Pyplot in the rest of the world except for Asia. This may due to lower popularity of R for Asian Kagglers.\n* It can be said that many Kagglers are not using visualization libraries as it was ranked at number 5. ","a2c33d57":"[back to top](#table-of-contents)\n<a id=\"data-preparation\"><\/a>\n## 2. Data Preparation\nThis section is used for loading packages and preparing dataset. Dataset preparation includes loading continent dataset, shortening some long countries name and merging some genders. In the process of the preparing dataset, we also split dataset to each continents for ease use in the analysis.\n\nIn the preparation process, we have countries that are marked \"Others\", so it can not be mapped to its respective continents, leaving it into Others continents.","26ce2e77":"<a id=\"demographic\"><\/a>\n[back to top](#table-of-contents)\n## 3. Demographic\nIn this section, we are going to see Kagglers from demographic perspective which consists of location, age, compensation, gender, education and their roles.\n\n<a id=\"kagglers-continents\"><\/a>\n[back to top](#table-of-contents)\n### 3.1 Kagglers Continents\n\nThe interesting things are:\n* Asia is dominating in terms of #no of Kaggler and it's mostly come from India. Right now, India has the most Kaggler in the world and there is no others country that can match it. \n* Except for European continents, there is always 1 country that dominating in every continent like USA, Nigeria and Australia.\n* Kagglers from Australia continents come from Australia country only.","c283699e":"<a id=\"kagglers-computing-platform\"><\/a>\n[back to top](#table-of-contents)\n### 5.1. Kagglers Computing Platform\n\nThe interesting things are:\n* Across all continents, personal computer and laptop are dominating among Kagglers especially in Africa.\n* Cloud computing platform is still not as popular as PC and laptop though there are several free hosted notebooks.\n* As expected, deep learning workstation is still not popular due to high price especially for personal use. ","bd110424":"<a id=\"summary\"><\/a>\n[back to top](#table-of-contents)\n## 6. Summary\n\n* **Asia** has the most Kagglers and they are mainly came from India. Most of Kagglers in Asia are in age 18-21 which put Asia as the continent that has the most youngest Kagglers and are dominated by man. Consistent with younger age in Asia, most of Kagglers hold a Bachelor degree and are Students. Kagglers in Asia mostly has an experience of programming between 1-2 years with machine learning experience below 1 year. Jupyter is the most preferred IDE among Kagglers in Asia with Python as their preferred programming languange. The most machine learning algorithm is Linear\/Logistic Regression and Scikit-learn as the most preferred machine learning framework. Matplotlib is the most used visualiztion libraries among Kagglers in Asia. Image classification & other general purposes networks are the most used computer vision method and word embeddings\/vectors for NLP. Personal computer\/laptop is the most used computing platform with GPUs as the most popular specialized hardware. Amazon Web Services is the most popular cloud computing platform among Kagglers in Asia with Google Cloud Platform as their 2nd choice.\n\n* **America** has the 2nd highest Kagglers with USA as the leader. Kagglers in America mostly are in age between 25-29 years old and are dominated by man. Master degree dominates Kagglers in America. Students and Data Scientist dominate Kaggle community in this continents. Programming experience between 3-5 years is dominating Kagglers in America with machine learning experience below 1 year. Most of American Kagglers prefer to use Jupyter and Python. Linear\/Logistic Regression and Scikit-learn as the most popular machine learning alogrithm and framework. Popularity of Python and Jupyter makes Matplotlib as the most preferred visualization libraries. Most popular computer vision and NLP for American Kagglers are image classification & other general purposes networks and word embeddings\/vectors, respectively. In America personal computer and laptop are the most used computing platforms and most of them don't use specialized hardware. Kagglers in America prefer to use Amazon Web Services as their cloud computing platform.\n\n* **Europe** is dominated by Kagglers from United Kingdom and in the 3rd position. Most of Kagglers in Europe are people with age of 25-29 years old and are dominated by man. Many Kagglers in Europe hold Master degree with a dominating role of Data Scientist. Kagglers in Europe mostly has programming experience of 3-5 years with machine learning experience below 1 year. Jupyter is the most use IDE among Kagglers in Europe combine with Pyton programming languange. European Kagglers like to use Linear\/Logistic Regression and Scikit-learn as their preferred machine learning algorithm and framework. Most popular visualization libraries among Kagglers in Europe is Matplotlib. For European Kagglers image classification & other general purposes networks and word embeddings\/vectors are the most used computer vision method and NLP, respectively. Personal computer\/laptop is also popular in Europe as the main computing platform but they prefer not to use any specialized hardware. European Kagglers most popular cloud computing platform is Amazon Web Services.\n\n* **Others** is Kagglers that put their country in \"Other\" at the survey but they have quite significant # no of Kagglers which put them in rank 4 with most of them are in range of 25-29 years old and are dominated by man. Master degree is hold many Kagglers in this category and many of them are Students. Most Kagglers in this classification have programming experience of 3-5 years with machine learning experience below 1 year. Most of Kagglers in this classification like Jupyter and Python programming languange. Kagglers in this classfication like to use Linear\/Logistic Regression and Scikit-learn as their most preferred machine learning algorithm and framework. Many Kagglers like to use Matplotlib for visualization. The most popular computer vision method is image classification & other general purposes networks while the most popular NLP is word embeddings\/vectors. Personal computer\/laptop with the choice of not using any specialized hardware are the most popular for Kagglers in this classification while Amazon Web Services and Google Cloud Platform are the most popular cloud computing platform.\n\n* **Africa** is the 5th position with Nigeria leading it. Most of Kagglers in this continent are people with 22-24 years old and put it as the 2nd continents with many young Kagglers and are dominated by man. As there are many young Kagglers in Africa, we also see many Kagglers has a Bachelor degree and are Students. Most Kagglers has a programming experience of 1-2 years with machine learning experience below 1 year. Jupyter is the most preferred IDE among Kagglers and Python as the most preferred programming languange. Linear\/Logistic Regression and Scikit-learn are the most preferred machine learning algorithm and framework. Visualization libraries that is popular among Kagglers in Africa is Matplotlib. Image classification & other general purposes networks are the most used computer vision method and word embeddings\/vectors for NLP. Personal computer\/laptop and GPUs are the most popular computing power and specialized hardware in Africa. Amazon Web Services is the most preferred cloud computing platform for African Kagglers\n\n* **Australia** has the lowest # no of Kagglers and mainly come from Australia country with age of 25-29 years old and are dominated by man. Many Kagglers in Australia hold Master degree. In Australia, most of Kagglers role are Students and Data Scientist. Most of Kagglers in Australia has 5-10 years programming experience which put Australia as the highest but most of Austrlia has a machine learning experience below 1 year. Kagglers in Australia like to use Jupyter and Python programming languange. Most preferred machine learning algorithm and framework for Kagglers in Australia are Linear\/Logistic Regression and Scikit-learn. Matplotlib is the most preferred visualization libraries among Kagglers in Australia. In Australia, image classification & other general purposes networks are the most popular computer vision method while word embeddings\/vectors and transformer languange model are the mos popular NLP methods. Australian Kaggler most popular computing power are personal computer\/laptop and many of them choose not to use any specialized hardware with Amazon Web Services as their most prefered cloud computing platform.\n","4bc97de2":"<a id=\"kagglers-age\"><\/a>\n[back to top](#table-of-contents)\n### 3.2. Kagglers Age\n\nThe interesting things are:\n* Kaggle is dominated by young people with age below 30 years, with peak at age 25-29\n* We can classify Kaggler age range into 3 category: (1) Asia is dominated by age 18-21, (2) America, Europe, Others and Australia are dominated by age 25-29 and (3) Africa is dominated by age 22-24.\n* Asia has the most young Kagglers from age 18-22 and the interest going down as the age increases. It seems \"data related job\" has a big interest for younger Asian.\n* The age distribution are quite same between America, Europe and Others continents, a more mature age compared to Asia Kaggler.\n* Australia has a more varies Kaggler, the age that join Kaggle quite more stable for more mature Kagglers (30-49 years old).","f147f1e0":"<a id=\"kagglers-specialized-hardware\"><\/a>\n[back to top](#table-of-contents)\n### 5.2. Kagglers Specialized Hardware\n\nThe interesting things are:\n* GPUs is the most popular specialized hardware among Kagglers even higher than Kagglers without any used of specialized hardware. This popularity come from Asian Kagglers and also African Kagglers.\n* Except in Asia and Africa, most Kagglers don't use any specialized hardware as can be seen in America, Europe, Others and Australia though the gap is not big in those continents.\n* It's still a long way to go for TPUs as its popularity is still far compare to GPUs."}}