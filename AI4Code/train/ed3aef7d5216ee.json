{"cell_type":{"a9525aee":"code","6b667b9c":"code","7f1117e0":"code","6c8f64fe":"code","eb30e55c":"code","8bf3bd08":"code","34846dee":"code","915b494f":"code","8b726f3d":"code","fc9894d2":"code","aaf434d5":"code","c925edc7":"code","99bfcf82":"code","03034489":"code","2564317c":"code","00484847":"code","b9c05953":"code","e5487cb4":"code","da36ac74":"code","4fcaaa0c":"code","f3542b7d":"code","66ff0f63":"code","fbc683de":"code","c6eaf385":"code","0cf6b4d7":"code","fa1da73b":"code","24a4532b":"code","0c60cb59":"code","3be36c8d":"code","23344d18":"code","5a629215":"code","ec5b345b":"code","bdd3119f":"code","c5220281":"code","3716c6d7":"code","a9041b78":"code","506ef1a5":"code","9f742c6d":"code","f745a0e9":"code","d3400829":"code","f053420d":"code","6bd35647":"code","89aba5bf":"code","0c37785a":"code","63295b67":"code","c7ad8743":"code","f065a8c8":"code","7e25743c":"code","945d10e1":"code","e673f1db":"code","2cd80588":"code","0bbe15cf":"code","3a6afc34":"code","b4e70c4e":"code","44e4f18b":"code","bec652f7":"code","801d76b4":"code","ac875261":"code","0e191aad":"code","7c33a751":"code","8f9630bb":"code","ab75fdb7":"code","6d5fffea":"code","b6b5e30d":"code","92ac1a02":"code","664e81b5":"code","08eeadff":"code","962f4b7d":"code","377968df":"code","bda9136e":"code","805eee66":"code","f8205877":"code","e404a934":"code","2077c143":"code","81e7db69":"code","b22742dc":"code","deb7cba4":"code","929944f3":"code","7130be03":"code","197cda05":"code","f7798731":"code","50c717ac":"code","fee589fd":"code","d9fb0539":"code","b9707715":"code","37dc6228":"code","74e1aa82":"code","ca4a9b6d":"code","8e4ebf2d":"code","1e93f8aa":"code","fe12b709":"code","e45fd58a":"code","b754cb55":"code","04bf5cbc":"code","127887f0":"code","1a788b93":"code","aa3de25a":"code","45a7ebb0":"code","4abf1970":"code","84e07d2c":"code","cdf8cf3f":"code","fead6899":"code","7aafaf61":"code","f3387d79":"code","13ff7a75":"code","138437cc":"code","28cfb50a":"code","20c33774":"code","fcf91c99":"markdown","eafeb5b6":"markdown","82a05cdd":"markdown","31d74a15":"markdown","2a17ce59":"markdown","89de2e25":"markdown","4f73de87":"markdown","e473aa8d":"markdown","013f957b":"markdown","d4210d17":"markdown"},"source":{"a9525aee":"# Supress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_selection import RFE\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn import metrics\nfrom sklearn.metrics import precision_score, recall_score","6b667b9c":"pd.set_option('display.max_columns', 500)","7f1117e0":"titanic_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntitanic_train.head()","6c8f64fe":"titanic_train.shape","eb30e55c":"titanic_train.info()","8bf3bd08":"titanic_train.isnull().sum()","34846dee":"titanic_train.Cabin.value_counts(dropna = False)","915b494f":"titanic_train.Cabin = titanic_train.Cabin.fillna(\"Unknown_Cabin\")","8b726f3d":"titanic_train.Cabin = titanic_train.Cabin.str[0]","fc9894d2":"titanic_train.Cabin.value_counts()","aaf434d5":"titanic_train.isna().sum()\/titanic_train.shape[0] *100","c925edc7":"titanic_train.Embarked.value_counts(dropna = False)","99bfcf82":"titanic_train.Embarked = titanic_train.Embarked.fillna('S')","03034489":"titanic_train['Title'] = titanic_train.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\ntitanic_train = titanic_train.drop('Name',axis=1)","2564317c":"titanic_train.head()","00484847":"#let's replace a few titles -> \"other\" and fix a few titles\ntitanic_train['Title'] = np.where((titanic_train.Title=='Capt') | (titanic_train.Title=='Countess') | \\\n                                  (titanic_train.Title=='Don') | (titanic_train.Title=='Dona')| (titanic_train.Title=='Jonkheer') \\\n                                  | (titanic_train.Title=='Lady') | (titanic_train.Title=='Sir') | (titanic_train.Title=='Major') | \\\n                                  (titanic_train.Title=='Rev') | (titanic_train.Title=='Col'),'Other',titanic_train.Title)\n\ntitanic_train['Title'] = titanic_train['Title'].replace('Ms','Miss')\ntitanic_train['Title'] = titanic_train['Title'].replace('Mlle','Miss')\ntitanic_train['Title'] = titanic_train['Title'].replace('Mme','Mrs')","b9c05953":"titanic_train.Title.value_counts()","e5487cb4":"titanic_train.groupby('Title').Age.mean()","da36ac74":"titanic_train[\"Age\"] = np.where((titanic_train.Age.isnull()) & (titanic_train.Title == 'Master'), 5,\\\n                               np.where((titanic_train.Age.isnull()) & (titanic_train.Title=='Miss'),22,\\\n                                        np.where((titanic_train.Age.isnull()) & (titanic_train.Title=='Mr'),32,\\\n                                                 np.where((titanic_train.Age.isnull()) & (titanic_train.Title=='Mrs'),36,\\\n                                                          np.where((titanic_train.Age.isnull()) & (titanic_train.Title=='Other'),47,\\\n                                                                   np.where((titanic_train.Age.isnull()) & (titanic_train.Title=='Dr'),42,titanic_train.Age))))))","4fcaaa0c":"titanic_train.isnull().sum()\/titanic_train.shape[0] *100","f3542b7d":"titanic_train.shape","66ff0f63":"col_list = list(titanic_train.columns)\nfor col in col_list:\n    print(titanic_train[col].value_counts())\n    print(\"-----------------------------\")","fbc683de":"titanic_train = titanic_train.drop(\"Ticket\", axis=1)\ntitanic_train.head()","c6eaf385":"dummy_1 = pd.get_dummies(titanic_train[\"Embarked\"], prefix= \"Embarked\", drop_first=True)\ndummy_2 = pd.get_dummies(titanic_train[\"Sex\"], drop_first=False)\nPclass = pd.get_dummies(titanic_train[\"Pclass\"], prefix= \"Pclass\")\nsiblings = pd.get_dummies(titanic_train[\"SibSp\"], prefix= \"SibSp\")\nParch = pd.get_dummies(titanic_train[\"Parch\"], prefix= \"Parch\")\ncabin = pd.get_dummies(titanic_train[\"Cabin\"], prefix= \"Cabin\")\nTitle = pd.get_dummies(titanic_train[\"Title\"], prefix= \"Title\")","0cf6b4d7":"titanic_train = pd.concat([titanic_train, dummy_1, dummy_2, Pclass, siblings, Parch], axis=1)\ntitanic_train = titanic_train.drop([\"Embarked\",\"PassengerId\", \"Sex\", \"Pclass\", \"SibSp\", \"Parch\", \"Cabin\", \"Title\"], axis=1)\ntitanic_train.head()","fa1da73b":"scalar = MinMaxScaler()\nscale_var = [\"Age\", \"Fare\"]\ntitanic_train[scale_var] = scalar.fit_transform(titanic_train[scale_var])\ntitanic_train.head()","24a4532b":"y_train = titanic_train.pop(\"Survived\")\ny_train.head()","0c60cb59":"X_train = titanic_train\nX_train.head()","3be36c8d":"plt.figure(figsize=(20, 15))\nsns.heatmap(X_train.corr(), annot=True)\nplt.show()","23344d18":"logreg = LogisticRegression()","5a629215":"rfe = RFE(logreg, 12)\nrfe = rfe.fit(X_train, y_train)","ec5b345b":"list(zip(X_train.columns, rfe.support_, rfe.ranking_))","bdd3119f":"col_support = X_train.columns[rfe.support_]\ncol_support","c5220281":"X_train_sm = sm.add_constant(X_train[col_support])\nlogmodel1 = sm.GLM(y_train, X_train_sm, family=sm.families.Binomial()).fit()\nlogmodel1.summary()","3716c6d7":"col_support = col_support.drop([\"SibSp_8\"])","a9041b78":"X_train_sm = sm.add_constant(X_train[col_support])\nlogmodel2 = sm.GLM(y_train, X_train_sm, family=sm.families.Binomial()).fit()\nlogmodel2.summary()","506ef1a5":"col_support = col_support.drop([\"Parch_4\"])","9f742c6d":"X_train_sm = sm.add_constant(X_train[col_support])\nlogmodel3 = sm.GLM(y_train, X_train_sm, family=sm.families.Binomial()).fit()\nlogmodel3.summary()","f745a0e9":"vif = pd.DataFrame()\nvif[\"Features\"] = col_support\nvif[\"VIF\"] = [variance_inflation_factor(X_train[col_support].values, i) for i in range(X_train[col_support].shape[1])]\nvif[\"VIF\"] = round(vif['VIF'], 2)\nvif = vif.sort_values(by=\"VIF\", ascending=False)\nvif","d3400829":"col_support = col_support.drop([\"SibSp_3\"])","f053420d":"X_train_sm = sm.add_constant(X_train[col_support])\nlogmodel4 = sm.GLM(y_train, X_train_sm, family=sm.families.Binomial()).fit()\nlogmodel4.summary()","6bd35647":"col_support = col_support.drop(\"Fare\")","89aba5bf":"X_train_sm = sm.add_constant(X_train[col_support])\nlogmodel5 = sm.GLM(y_train, X_train_sm, family=sm.families.Binomial()).fit()\nlogmodel5.summary()","0c37785a":"vif = pd.DataFrame()\nvif[\"Features\"] = col_support\nvif[\"VIF\"] = [variance_inflation_factor(X_train[col_support].values, i) for i in range(X_train[col_support].shape[1])]\nvif[\"VIF\"] = round(vif['VIF'], 2)\nvif = vif.sort_values(by=\"VIF\", ascending=False)\nvif","63295b67":"col_support = col_support.drop([\"male\"])","c7ad8743":"X_train_sm = sm.add_constant(X_train[col_support])\nlogmodel6 = sm.GLM(y_train, X_train_sm, family=sm.families.Binomial()).fit()\nlogmodel6.summary()","f065a8c8":"vif = pd.DataFrame()\nvif[\"Features\"] = col_support\nvif[\"VIF\"] = [variance_inflation_factor(X_train[col_support].values, i) for i in range(X_train[col_support].shape[1])]\nvif[\"VIF\"] = round(vif['VIF'], 2)\nvif = vif.sort_values(by=\"VIF\", ascending=False)\nvif","7e25743c":"col_support = col_support.drop([\"Age\"])","945d10e1":"X_train_sm = sm.add_constant(X_train[col_support])\nlogmodel6 = sm.GLM(y_train, X_train_sm, family=sm.families.Binomial()).fit()\nlogmodel6.summary()","e673f1db":"vif = pd.DataFrame()\nvif[\"Features\"] = col_support\nvif[\"VIF\"] = [variance_inflation_factor(X_train[col_support].values, i) for i in range(X_train[col_support].shape[1])]\nvif[\"VIF\"] = round(vif['VIF'], 2)\nvif = vif.sort_values(by=\"VIF\", ascending=False)\nvif","2cd80588":"y_train_pred = logmodel6.predict(X_train_sm)","0bbe15cf":"y_train_pred[:10].values","3a6afc34":"y_train_pred_final = pd.DataFrame({'Survived': y_train.values, 'survived_prob':y_train_pred})\ny_train_pred_final.head()","b4e70c4e":"y_train_pred_final['Predicted_survived'] = y_train_pred_final.survived_prob.map(lambda x : 1 if x > 0.5 else 0)\ny_train_pred_final.head()","44e4f18b":"def draw_roc_curve(actual, prob):\n    fpr, tpr, threshold = metrics.roc_curve(actual, prob, drop_intermediate=False)\n    auc_score = metrics.roc_auc_score(actual, prob)\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return None","bec652f7":"fpr, tpr, thresholds = metrics.roc_curve(y_train_pred_final.Survived, y_train_pred_final.Predicted_survived, drop_intermediate = False )","801d76b4":"draw_roc_curve(y_train_pred_final.Survived, y_train_pred_final.Predicted_survived)","ac875261":"# Lets create columns with different cutoff points\nnumbers = [x\/10 for x in range(10)]\n\nfor i in numbers:\n    y_train_pred_final[i] = y_train_pred_final.survived_prob.map(lambda x : 1 if x > i else 0)\ny_train_pred_final.head()","0e191aad":"# Now calculate accuracy, sensitivity and specificity for variouse probability cuttoff\ncutoff_df = pd.DataFrame(columns=['Probability', 'Accuracy', 'Sensitivity', 'Specificity'])\nfrom sklearn.metrics import confusion_matrix\n\nfor i in numbers:\n    conf_mat = metrics.confusion_matrix(y_train_pred_final.Survived, y_train_pred_final[i])\n    total = sum(sum(conf_mat))\n    accuracy = (conf_mat[0,0]+conf_mat[1,1])\/total\n    \n    sensitivity = conf_mat[1,1]\/(conf_mat[1,0]+conf_mat[1,1])\n    specificity = conf_mat[0,0]\/(conf_mat[0,0]+conf_mat[0,1])\n    cutoff_df.loc[i] = [i, accuracy, sensitivity, specificity]\ncutoff_df","7c33a751":"# lets plot the accuracy, sensitivity and specificity over the probability\ncutoff_df.plot.line(x = \"Probability\", y=['Accuracy', 'Sensitivity', 'Specificity'])\nplt.vlines(x=0.423, ymax=1, ymin=0, colors='r', linestyles='--')\nplt.show()","8f9630bb":"y_train_pred_final[\"Predicted_survived\"] = y_train_pred_final.survived_prob.map(lambda x: 1 if x > 0.423 else 0)\ny_train_pred_final.head()","ab75fdb7":"metrics.accuracy_score(y_train_pred_final.Survived, y_train_pred_final.Predicted_survived)","6d5fffea":"confusion = metrics.confusion_matrix(y_train_pred_final.Survived, y_train_pred_final.Predicted_survived)\nconfusion","b6b5e30d":"TN = confusion[0,0]\nFP = confusion[0,1]\nFN = confusion[1,0]\nTP = confusion[1,1]","92ac1a02":"# calculate the sensitivity\nTP\/(TP+FN)","664e81b5":"# calculate the specificity\nTN\/(FP+TN)","08eeadff":"# calcuate false posititve rate\nFP\/(TN+FP)","962f4b7d":"#positive predicted value\nTP \/ (TP+FP)","377968df":"# negative predicted value\nTN\/(TN+FN)","bda9136e":"precision_score(y_train_pred_final.Survived, y_train_pred_final.Predicted_survived)","805eee66":"recall_score(y_train_pred_final.Survived, y_train_pred_final.Predicted_survived)","f8205877":"#False negative rate\nFN\/(TP+FN)","e404a934":"titanic_test = pd.read_csv(r\"\/kaggle\/input\/titanic\/test.csv\")\ntitanic_test.head()","2077c143":"servived_test = pd.read_csv(r\"\/kaggle\/input\/titanic\/gender_submission.csv\")\nservived_test.head()","81e7db69":"titanic_test = pd.merge(titanic_test, servived_test, how='inner', on='PassengerId')\ntitanic_test.head()","b22742dc":"titanic_test.info()","deb7cba4":"titanic_test.Cabin = titanic_test.Cabin.fillna(\"Unknown_Cabin\")\ntitanic_test.Cabin = titanic_test.Cabin.str[0]\ntitanic_test.Cabin.value_counts()","929944f3":"round(titanic_test.isnull().sum()\/titanic_test.shape[0]*100, 2)","7130be03":"titanic_test['Title'] = titanic_test.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\ntitanic_test = titanic_test.drop('Name',axis=1)","197cda05":"titanic_test.head()","f7798731":"#let's replace a few titles -> \"other\" and fix a few titles\ntitanic_test['Title'] = np.where((titanic_test.Title=='Capt') | (titanic_test.Title=='Countess') | \\\n                                  (titanic_test.Title=='Don') | (titanic_test.Title=='Dona')| (titanic_test.Title=='Jonkheer') \\\n                                  | (titanic_test.Title=='Lady') | (titanic_test.Title=='Sir') | (titanic_test.Title=='Major') | \\\n                                  (titanic_test.Title=='Rev') | (titanic_test.Title=='Col'),'Other',titanic_test.Title)\n\ntitanic_test['Title'] = titanic_test['Title'].replace('Ms','Miss')\ntitanic_test['Title'] = titanic_test['Title'].replace('Mlle','Miss')\ntitanic_test['Title'] = titanic_test['Title'].replace('Mme','Mrs')","50c717ac":"titanic_test.groupby('Title').Age.mean()","fee589fd":"titanic_test[\"Age\"] = np.where((titanic_test.Age.isnull()) & (titanic_test.Title == 'Master'), 7,\\\n                               np.where((titanic_test.Age.isnull()) & (titanic_test.Title=='Miss'),22,\\\n                                        np.where((titanic_test.Age.isnull()) & (titanic_test.Title=='Mr'),32,\\\n                                                 np.where((titanic_test.Age.isnull()) & (titanic_test.Title=='Mrs'),39,\\\n                                                          np.where((titanic_test.Age.isnull()) & (titanic_test.Title=='Other'),42,\\\n                                                                   np.where((titanic_test.Age.isnull()) & (titanic_test.Title=='Dr'),53,titanic_test.Age))))))","d9fb0539":"round(titanic_test.isnull().sum()\/titanic_test.shape[0]*100, 2)","b9707715":"titanic_test.Fare = titanic_test.Fare.fillna(0)","37dc6228":"round(titanic_test.isnull().sum()\/titanic_test.shape[0]*100, 2)","74e1aa82":"PassengerId = titanic_test.PassengerId","ca4a9b6d":"dummy_1 = pd.get_dummies(titanic_test[\"Embarked\"], prefix= \"Embarked\", drop_first=True)\ndummy_2 = pd.get_dummies(titanic_test[\"Sex\"], drop_first=False)\nPclass = pd.get_dummies(titanic_test[\"Pclass\"], prefix= \"Pclass\")\nsiblings = pd.get_dummies(titanic_test[\"SibSp\"], prefix= \"SibSp\")\nParch = pd.get_dummies(titanic_test[\"Parch\"], prefix= \"Parch\")\ncabin = pd.get_dummies(titanic_test[\"Cabin\"], prefix= \"Cabin\")\nTitle = pd.get_dummies(titanic_test[\"Title\"], prefix= \"Title\")","8e4ebf2d":"titanic_test = pd.concat([titanic_test, dummy_1, dummy_2, Pclass, siblings, Parch], axis=1)\ntitanic_test = titanic_test.drop([\"Embarked\",\"PassengerId\", \"Sex\", \"Pclass\", \"SibSp\", \"Parch\", \"Cabin\", \"Title\"], axis=1)\ntitanic_test.head()","1e93f8aa":"titanic_test = titanic_test.drop([\"Ticket\"], axis=1)","fe12b709":"test_scale_var = [\"Age\", \"Fare\"]\ntitanic_test[test_scale_var] = scalar.transform(titanic_test[test_scale_var])","e45fd58a":"X_test = titanic_test[col_support]\nX_test.head()","b754cb55":"X_test_sm = sm.add_constant(X_test)","04bf5cbc":"y_test_pred = logmodel6.predict(X_test_sm)","127887f0":"y_test_pred[:10]","1a788b93":"y_test_pred_final = pd.DataFrame({\"PassengerId\":PassengerId ,\"Survived\":titanic_test.Survived, \"Probability_survived\": y_test_pred})\ny_test_pred_final.head()","aa3de25a":"y_test_pred_final[\"Pred_Survived\"] = y_test_pred_final.Probability_survived.map(lambda x: 1 if x > 0.423 else 0)\ny_test_pred_final.head()","45a7ebb0":"metrics.accuracy_score(y_test_pred_final.Survived, y_test_pred_final.Pred_Survived)","4abf1970":"confusion = metrics.confusion_matrix(y_test_pred_final.Survived, y_test_pred_final.Pred_Survived)\nconfusion","84e07d2c":"TN = confusion[0,0]\nFP = confusion[0,1]\nFN = confusion[1,0]\nTP = confusion[1,1]","cdf8cf3f":"# calculate the sensitivity\nTP\/(TP+FN)","fead6899":"# calculate the specificity\nTN\/(FP+TN)","7aafaf61":"# calcuate false posititve rate\nFP\/(TN+FP)","f3387d79":"#positive predicted value\nTP \/ (TP+FP)","13ff7a75":"# negative predicted value\nTN\/(TN+FN)","138437cc":"precision_score(y_test_pred_final.Survived, y_test_pred_final.Pred_Survived)","28cfb50a":"recall_score(y_test_pred_final.Survived, y_test_pred_final.Pred_Survived)","20c33774":"y_test_pred_final.shape","fcf91c99":"For imputing the missing value from the age we need to calculate average age value of title and then impute the average value to the missing one","eafeb5b6":"Most of the feature having P values more than 0.05 we have to drop those values but first calculate the vif","82a05cdd":"### Making prediction on Test set","31d74a15":"### Ploting ROC curve and calculate the cutoff","2a17ce59":"### Feature Scaling","89de2e25":"### Dummy variable","4f73de87":"##### Missing value treatment","e473aa8d":"Reading the data","013f957b":"### Model Building","d4210d17":"#### Data Preparation"}}