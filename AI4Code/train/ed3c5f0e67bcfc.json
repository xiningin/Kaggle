{"cell_type":{"e31e92e4":"code","96babd89":"code","b2aa5300":"code","20034133":"code","f8632703":"code","6e3f3b7e":"code","74942276":"code","6e813a46":"code","6c926c3f":"code","8f06e0ac":"code","604bd582":"code","61adc843":"code","c8f5b37c":"code","544af551":"code","02f7a292":"code","0959f9ad":"code","6d8e295b":"code","1c5bc759":"code","b325bf43":"code","0010711d":"code","a98bbd9c":"code","8c73a4c3":"code","bea6ab8a":"code","ba0d767c":"code","3d93fd01":"code","3a553678":"markdown","738340af":"markdown","b8ed37cf":"markdown","5408a896":"markdown","1f0db026":"markdown","07798f3b":"markdown","7298b2f3":"markdown","2e248e03":"markdown","b385b219":"markdown","d55cad32":"markdown","d27f34ed":"markdown"},"source":{"e31e92e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\nimport shap\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import classification_report,confusion_matrix, precision_recall_curve, roc_curve, roc_auc_score, log_loss\nfrom sklearn.model_selection import train_test_split\nfrom catboost import CatBoostClassifier, cv, Pool\nfrom hyperopt import hp, fmin, tpe, Trials, STATUS_OK\nfrom itertools import combinations\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96babd89":"# Read in data\ntest = pd.read_csv(\"..\/input\/amazon-employee-access-challenge\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/amazon-employee-access-challenge\/train.csv\")","b2aa5300":"def performance(model, X_test, y_test):\n# Make predictions on test set\n    y_pred=model.predict(X_test)\n    y_pred=np.round(y_pred)\n    \n    # Confusion matrix\n    print(confusion_matrix(y_test, y_pred))\n    \n    # AUC score\n    y_pred_prob = model.predict_proba(X_test)\n    print(\"AUC score: \", roc_auc_score(y_test, y_pred_prob[:,1]))\n    \n    # Logloss\n    print(\"Logloss : \", log_loss(y_test, y_pred_prob))\n\n    # Accuracy, Precision, Recall, F1 score\n    print(classification_report(y_test, y_pred))\n    \n    # Precision-Recall curve\n    precisions, recalls, thresholds = precision_recall_curve(y_test, y_pred)\n    plt.plot(recalls, precisions, \"b-\", linewidth=2)\n    plt.xlabel(\"Recall\", fontsize=16)\n    plt.ylabel(\"Precision\", fontsize=16)\n    plt.axis([0, 1, 0, 1])\n    plt.grid(True)\n    plt.show()\n\n    # ROC curve\n    fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob[:,1])\n    plt.plot([0, 1], [0, 1],'k--')\n    plt.plot(fpr, tpr, label='Neural Network')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC Curve')\n    plt.show()","20034133":"print(\"Train shape: {}, Test shape: {}\".format(train.shape, test.shape))\nprint(\"Train datatypes: {}, Test datatypes: {}\".format(train.dtypes, test.dtypes))","f8632703":"train.head()","6e3f3b7e":"test.head()","74942276":"print(train.isnull().any()) \nprint(test.isnull().any())","6e813a46":"\nunique_train= pd.DataFrame([(col,train[col].nunique()) for col in train.columns], \n                           columns=['Columns', 'Unique categories'])\nunique_test=pd.DataFrame([(col,test[col].nunique()) for col in test.columns],\n                columns=['Columns', 'Unique categories'])\nunique_train=unique_train[1:]\nunique_test=unique_test[1:]\n\nfig, ax = plt.subplots(2, 1, sharex=True, sharey=True)\nax[0].bar(unique_train.Columns, unique_train['Unique categories'])\nax[1].bar(unique_test.Columns, unique_test['Unique categories'])\nplt.xticks(rotation=90)","6c926c3f":"sns.countplot(train['ACTION'])","8f06e0ac":"if (sum(train.duplicated()), sum(test.duplicated())) == (0,0):\n    print('No duplicated rows')\nelse: \n    print('train: ',sum(train.duplicated()))\n    print('test: ',sum(train.duplicated()))","604bd582":"# Check for duplicated columns                          \n\nfor col1,col2 in combinations(train.columns, 2):\n    condition1=len(train.groupby([col1,col2]).size())==len(train.groupby([col1]).size())\n    condition2=len(train.groupby([col1,col2]).size())==len(train.groupby([col2]).size())\n    condition3=(train[col1].nunique()==train[col2].nunique())\n    if (condition1 | condition2) & condition3:\n        print(col1,col2)\n        print('Potential Categorical column duplication')","61adc843":"print(train['ROLE_TITLE'].mean())\nprint(train['ROLE_CODE'].mean())","c8f5b37c":"np.random.seed(123)","544af551":"# Drop duplicated column\ntrain.drop('ROLE_CODE', axis=1, inplace=True)\ntest.drop('ROLE_CODE', axis=1, inplace=True)\n\n","02f7a292":"# Split into features and target y-target and X-features\ny = train['ACTION']\nX = train.drop('ACTION', axis=1)\n\n# Split into train & validation set\nX_train, X_val, y_train, y_val = train_test_split(X, y, train_size=0.8)","0959f9ad":"cat_features = [*range(8)]\nprint(cat_features)","6d8e295b":"model = CatBoostClassifier(custom_metric=['TotalF1'], early_stopping_rounds=100, eval_metric='AUC')\n\nmodel.fit(X_train, y_train, cat_features=cat_features,\n          eval_set=(X_val, y_val), plot=True, verbose=False, use_best_model=True)","1c5bc759":"performance(model, X_val, y_val)","b325bf43":"feat_imp=model.get_feature_importance(prettified=True)\nplt.bar(feat_imp['Feature Id'], feat_imp['Importances'])\nplt.xlabel('Features')\nplt.ylabel('Feature Importance')\nplt.xticks(rotation=90)","0010711d":"sub=pd.read_csv(\"..\/input\/amazon-employee-access-challenge\/sampleSubmission.csv\")\nsum(test.id==sub.Id), test.shape","a98bbd9c":"y_pred=model.predict_proba(test.drop('id', axis=1))\nsub.Action=y_pred[:,1]","8c73a4c3":"sub.to_csv('amazon1.csv', index=False, header=True)\nsub.head()","bea6ab8a":"# Best of the tuned models\nmodel = CatBoostClassifier(border_count=248, depth=4, l2_leaf_reg=4.830204209625978,\n                           scale_pos_weight=0.4107081177319144, \n                           eval_metric='AUC',\n                           use_best_model=True,\n                          early_stopping_rounds=100)\nbest=model.fit(X_train, y_train, cat_features=cat_features, eval_set=(X_val, y_val), use_best_model=True,\n          verbose=False, plot=False)","ba0d767c":"performance(model, X_val, y_val)","3d93fd01":"model = CatBoostClassifier(border_count=248, depth=4, l2_leaf_reg=4.830204209625978,\n                           scale_pos_weight=0.4107081177319144,\n                           loss_function='Logloss',\n                           eval_metric='AUC',\n                           use_best_model=True,\n                          early_stopping_rounds=100)\ncv_data = cv(Pool(X_train, y_train, cat_features=cat_features), params=model.get_params(),\n             verbose=False)\n\n\nscore = np.max(cv_data['test-AUC-mean'])\nprint('AUC score from cross-validation: ', score)","3a553678":"No null values found","738340af":"# Cross Validation for Overfitting","b8ed37cf":"* Target: ACTION\n* 9 categorical features","5408a896":"Best model scores\n- AUC score:  89.7%\n- Logloss :   0.137\n- F1 score:   0.98 for action","1f0db026":"Default values of CatBoostClassifier() parameters depend of the type of input data \n- Catboost can distinguish between binary & multiclass problems \n- it will appropriately assign 'Logloss' as the 'loss_function' for Binary problems\n- 'MultiClass' for multiclass problems \n- 'RMSE' for regression problems.","07798f3b":"RESOURCE & ROLE_DEPTNAME are the most important features.","7298b2f3":"* ROLE_TITLE and ROLE_CODE represent the same data. One of the two features can be dropped.","2e248e03":"Accepts a fitted model and an evaluation dataset at input.\n    Prints the confusion matrix, classification_report & auc score. \n    Also, displays Precision-Recall curve & ROC curve.","b385b219":"The dataset represents a case of Imbalanced classes. The 0 label has fewer values","d55cad32":"# Preprocessing","d27f34ed":"- set early stopping rounds to 100\n- selected 'use_best_model'= True ((When we fit using the model, we want to use the best model, rather than the potentially substandard model saved in memory at the end of training)"}}