{"cell_type":{"d1984ea9":"code","d092d0a1":"code","93473fe2":"code","d46cf9c2":"code","85caae08":"code","c30bb645":"code","ba6d182a":"code","c01591c1":"code","3fd749dc":"code","17fcbaae":"code","54a74ee9":"code","4b04610f":"code","ec1ea70b":"code","f8d4ebc4":"code","08e7aca2":"code","6435f950":"code","9afea7c8":"code","c817fa9d":"code","ad18a6c3":"code","c4ed7b4f":"code","37ab045b":"code","e7093c7a":"code","e3156906":"code","35ae7817":"code","f8cb4f7a":"code","4852058f":"code","11095d84":"code","4ec4abe6":"code","9f83b036":"code","1328e4f8":"code","bf8cd5a7":"code","75a13330":"markdown","e4bb1297":"markdown","28f27b22":"markdown","0c6139cc":"markdown","70693102":"markdown","e86fc727":"markdown","a77d72f9":"markdown","dc5ca2f0":"markdown","5c9e0fae":"markdown","7be2e163":"markdown","6e06af4a":"markdown","173434bd":"markdown","9da0a434":"markdown","b9f664f2":"markdown","1e0a4232":"markdown","13030603":"markdown","ae15cd60":"markdown","1faac615":"markdown","40d05ac7":"markdown"},"source":{"d1984ea9":"import pandas as pd\nimport numpy as np\nimport scipy.stats.distributions as dist\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px\n%matplotlib inline","d092d0a1":"match = pd.concat([\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2000.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2001.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2002.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2003.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2004.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2005.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2006.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2007.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2008.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2009.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2010.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2011.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2012.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2013.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2014.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2015.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2016.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2017.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2018.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2019.csv'),\n    pd.read_csv('..\/input\/atp-tennis-20002020\/atp_matches_2020.csv')\n])\nranking = pd.concat([pd.read_csv('..\/input\/atp-tennis-20002020\/atp_rankings_00s.csv'),\n                     pd.read_csv('..\/input\/atp-tennis-20002020\/atp_rankings_10s.csv'),\n                     pd.read_csv('..\/input\/atp-tennis-20002020\/atp_rankings_current.csv', names = ['ranking_date','rank','player','points'])])\nplayer = pd.read_csv('..\/input\/atp-tennis-20002020\/atp_players.csv', names = ['player','first_name','last_name','hand','birthdate','ioc'])","93473fe2":"match['year'] = match['tourney_id'].apply(lambda x: int(str(x)[0:4]))\nmatch['winner_rank'].fillna(10000, inplace = True) # fill in unranked players' ranks with an arbitrarily large number\nmatch['loser_rank'].fillna(10000, inplace = True) # fill in unranked players' ranks with an arbitrarily large number\nmatch['upset'] = np.where(match['winner_rank']>match['loser_rank'], 'yes', 'no')\nmatch['1st_set_winner'] = match['score'].apply(lambda x: 'yes' if str(x)[0]>str(x)[2] else 'no') # is match winner also 1st set winner\n\nplayer['name'] = player['first_name']+' ' +player['last_name']\nranking = pd.merge(ranking,player,on='player', how = 'left').drop(['first_name','last_name'],axis = 1)\nranking['ranking_date'] = pd.to_datetime(ranking['ranking_date'], format='%Y%m%d')","d46cf9c2":"match['upset'].value_counts(normalize = True)","85caae08":"upset_by_surface = match.groupby(['surface'])['upset'].value_counts(normalize = True).to_frame().xs('yes',level=1, drop_level = True)\nupset_by_surface.plot(kind = 'bar',legend = None, color = 'grey')\nplt.ylabel('Upset rate', size = 14)\nplt.xlabel('Surface', size = 14)","c30bb645":"upset_by_tourlevel = match.groupby(['tourney_level'])['upset'].value_counts(normalize = True).to_frame().xs('yes',level=1, drop_level = True)\nax = upset_by_tourlevel.plot(kind = 'bar',legend = None, color = 'grey')\nplt.ylabel('Upset rate', size = 14)\nplt.xlabel('Tournament level', size = 14)\nax.set_xticklabels(['Others', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters 1000s'], rotation = 45)","ba6d182a":"upset_df1 = match.groupby(['tourney_level','surface'])['upset'].value_counts(normalize = True).to_frame()\nupset_df2 = upset_df1.xs('yes',level=2, drop_level = True).set_axis(['upset_percentage'],axis = 'columns')\nupset_df3 = upset_df2.reset_index(level=[0,1])","c01591c1":"plt.figure(figsize=(10,5))\nax=sns.barplot(x='tourney_level', y='upset_percentage', data=upset_df3, hue = 'surface')\nplt.xlabel('Tournament level', size = 14)\nplt.ylabel('Upset rate', size = 14)\nplt.xticks(np.arange(5),['Others', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters 1000s'])\nplt.tight_layout()\nplt.legend(bbox_to_anchor = (1,1))\nfor bar in ax.patches: \n    ax.annotate(format(bar.get_height(), '.2f'),(bar.get_x() + bar.get_width() \/ 2, bar.get_height()), \n                ha='center', va='center', size=10, xytext=(0, 8), textcoords='offset points')","3fd749dc":"upset_by_bestof = match.groupby(['best_of'])['upset'].value_counts(normalize = True).to_frame().xs('yes',level=1, drop_level = True)\nupset_by_bestof.plot(kind = 'bar',legend = None)\nplt.ylabel('Upset rate', size = 14)\nplt.xlabel('')\nplt.xticks(np.arange(2),('Best-of-three', 'Best-of-five'),rotation = 0, size = 12)","17fcbaae":"upset_df4 = match.groupby(['tourney_level','best_of'])['upset'].value_counts(normalize = True).to_frame()\nupset_df5 = upset_df4.xs('yes',level=2, drop_level = True).set_axis(['upset_percentage'],axis = 1)\nupset_df6 = upset_df5.reset_index(level=[0,1])\nupset_df6['number_of_matches'] = match.groupby(['tourney_level'])['best_of'].value_counts().reset_index(drop = True)","54a74ee9":"plt.figure(figsize=(10,5))\nax = sns.barplot(x='tourney_level', y='upset_percentage', data=upset_df6, hue = 'best_of')\nplt.xlabel('Tournament level', size = 14)\nplt.ylabel('Upset rate', size = 14)\nplt.xticks(np.arange(5),['Others','Davis Cup','Tour Finals', 'Grand Slams','Masters 1000s'])\nplt.tight_layout()\nplt.legend(bbox_to_anchor = (1,1), title = 'Best-of')\n\ntxt = []\nfor c in upset_df6['best_of'].unique():\n    tmp = upset_df6[upset_df6['best_of'] == c]['number_of_matches']\n    txt.append(tmp.tolist())\ntxt = sum(txt,[])\ntxt.insert(3, np.nan)\nfor t,b in zip(txt, ax.patches):\n    ax.annotate('n={}'.format(t),(b.get_x() + b.get_width() \/ 2., b.get_height()),\n                ha = 'center', va = 'center',xytext = (0, 6),textcoords = 'offset points')","4b04610f":"# hypothesis test for comparing two proportions \n# the upset rate of David Cup best of 3 vs best of 5 matches\np1 = upset_df6[(upset_df6['tourney_level']=='D')&(upset_df6['best_of']==3)]['upset_percentage'].item()\nn1 = upset_df6[(upset_df6['tourney_level']=='D')&(upset_df6['best_of']==3)]['number_of_matches'].item()\np2 = upset_df6[(upset_df6['tourney_level']=='D')&(upset_df6['best_of']==5)]['upset_percentage'].item()\nn2 = upset_df6[(upset_df6['tourney_level']=='D')&(upset_df6['best_of']==5)]['number_of_matches'].item()\nppool = (p1*n1+p2*n2)\/(n1+n2)\nse = np.sqrt((ppool*(1-ppool))\/n1+(ppool*(1-ppool))\/n2)\nz_statistic = (p1-p2)\/se\nz_statistic\np_value = 2*dist.norm.cdf(-np.abs(z_statistic))\np_value","ec1ea70b":"overall_upset = match['upset'].value_counts(normalize = True).to_frame()\ntop100_upset = match[(match['winner_rank']<=100)&(match['loser_rank']<=100)]['upset'].value_counts(normalize = True).to_frame()\ntop10_upset = match[(match['winner_rank']<=10)&(match['loser_rank']<=10)]['upset'].value_counts(normalize = True).to_frame()\nall_upset = pd.concat([overall_upset, top100_upset, top10_upset], axis = 1).set_axis(['overall','top100','top10'], axis = 'columns')\nall_upset.iloc[1].plot(kind = 'bar',legend = None, color = 'grey')\nplt.ylabel('Upset rate', size = 14)\nplt.xticks(np.arange(3),('Overall', 'Top 100', 'Top 10'),rotation = 0, size = 12)","f8d4ebc4":"upset_gs = match[match['tourney_level']=='G'].groupby('round')['upset'].value_counts(normalize = True).to_frame().xs('yes',level=1, drop_level = True).reset_index()\nax = sns.barplot(data = upset_gs, x = 'round', y = 'upset', color = 'grey', order = ['R128', 'R64','R32','R16','QF','SF','F'])\nplt.ylabel('Upset rate', size = 14)\nplt.xlabel('')\nfor bar in ax.patches: \n    ax.annotate(format(bar.get_height(), '.2f'),(bar.get_x() + bar.get_width() \/ 2, bar.get_height()), \n                ha='center', va='center', size=10, xytext=(0, 8), textcoords='offset points')\nsns.despine()","08e7aca2":"match[match['upset']=='yes']['winner_name'].value_counts().head(10)","6435f950":"match[match['upset']=='yes']['loser_name'].value_counts().head(10)","9afea7c8":"match['1st_set_winner'].value_counts(normalize = True)","c817fa9d":"win1set_by_surface = match.groupby(['surface'])['1st_set_winner'].value_counts(normalize = True).to_frame().xs('yes',level=1, drop_level = True)\nwin1set_by_surface.plot(kind = 'bar',legend = None, color = 'grey')\nplt.ylabel('Chance of winning after winning first set', size = 14)\nplt.xlabel('Surface', size = 14)","ad18a6c3":"win1set_by_tourlevel = match.groupby(['tourney_level'])['1st_set_winner'].value_counts(normalize = True).to_frame().xs('yes',level=1, drop_level = True)\nwin1set_by_tourlevel.plot(kind = 'bar',legend = None, color = 'grey')\nplt.ylabel('Chance of winning after winning first set', size = 14)\nplt.xlabel('Tournament level', size = 14)\nplt.xticks(np.arange(5),['Others', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters 1000s'], rotation = 45)","c4ed7b4f":"win1set_by_bestof = match.groupby(['best_of'])['1st_set_winner'].value_counts(normalize = True).to_frame().xs('yes',level=1, drop_level = True)\nwin1set_by_bestof.plot(kind = 'bar',legend = None, color = 'grey')\nplt.ylabel('Chance of winning after winning first set', size = 14)\nplt.xlabel('')\nplt.xticks(np.arange(2),['Best-of-three', 'Best-of-five'], rotation = 0)","37ab045b":"match_num_by_player = pd.concat([match['winner_name'].value_counts().to_frame(),match['loser_name'].value_counts().to_frame()], axis = 1).set_axis(['win','lose'], axis = 'columns')\nmatch_num_by_player['total'] = match_num_by_player['win'] + match_num_by_player['lose']\nplayers_over100_matches = match_num_by_player[match_num_by_player['total']>=100].index.to_list()\n\nwon_after_1set_loss = match[match['1st_set_winner']=='no']['winner_name'].value_counts().to_frame().set_axis(['won'], axis = 'columns')\nlost_after_1set_loss = match[match['1st_set_winner']=='yes']['loser_name'].value_counts().to_frame().set_axis(['lost'], axis = 'columns')\nplayer_1set_loss = pd.concat([won_after_1set_loss,lost_after_1set_loss],axis = 1)\nplayer_1set_loss['played']= player_1set_loss['won']+player_1set_loss['lost']\nplayer_1set_loss['winning_percentage'] = player_1set_loss['won']\/player_1set_loss['played']\nplayer_1set_loss[player_1set_loss.index.isin(players_over100_matches)].sort_values(by = ['winning_percentage'], ascending = False)","e7093c7a":"won_after_1set_win = match[match['1st_set_winner']=='yes']['winner_name'].value_counts().to_frame().set_axis(['won'], axis = 'columns')\nlost_after_1set_win = match[match['1st_set_winner']=='no']['loser_name'].value_counts().to_frame().set_axis(['lost'], axis = 'columns')\nplayer_1set_win = pd.concat([won_after_1set_win,lost_after_1set_win],axis = 1)\nplayer_1set_win['played']= player_1set_win['won']+player_1set_win['lost']\nplayer_1set_win['winning_percentage'] = player_1set_win['won']\/player_1set_win['played']\nplayer_1set_win[player_1set_win.index.isin(players_over100_matches)].sort_values(by = ['winning_percentage'], ascending = False)","e3156906":"big3_ranking = ranking[ranking['name'].isin(['Roger Federer','Rafael Nadal','Novak Djokovic'])]\nfig = px.line(big3_ranking, x=\"ranking_date\", y=\"rank\", color='name', labels={'name':''})\nfig.update_layout(xaxis_title='Year',yaxis_title='Rank')\nfig.update_yaxes(range=[1100, -100])\nfig.update_xaxes(range=[pd.to_datetime(20000101,format='%Y%m%d'), pd.to_datetime(20201231,format='%Y%m%d')])\nfig.show()","35ae7817":"federer = pd.concat([match[match['winner_name']=='Roger Federer']['year'].value_counts(),match[match['loser_name']=='Roger Federer']['year'].value_counts()],axis = 1).set_axis(['won','lost'],axis = 'columns')\nfederer['winning_percentage']=federer['won']\/(federer['won']+federer['lost'])\nnadal = pd.concat([match[match['winner_name']=='Rafael Nadal']['year'].value_counts(),match[match['loser_name']=='Rafael Nadal']['year'].value_counts()],axis = 1).set_axis(['won','lost'],axis = 'columns')\nnadal['winning_percentage']=nadal['won']\/(nadal['won']+nadal['lost'])\ndjokovic = pd.concat([match[match['winner_name']=='Novak Djokovic']['year'].value_counts(),match[match['loser_name']=='Novak Djokovic']['year'].value_counts()],axis = 1).set_axis(['won','lost'],axis = 'columns')\ndjokovic['winning_percentage']=djokovic['won']\/(djokovic['won']+djokovic['lost'])","f8cb4f7a":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=federer.index, y=federer['winning_percentage'],\n                    mode='lines',\n                    name='Roder Federer'))\nfig.add_trace(go.Scatter(x=nadal.index, y=nadal['winning_percentage'],\n                    mode='lines',\n                    name='Rafael Nadal'))\nfig.add_trace(go.Scatter(x=djokovic.index, y=djokovic['winning_percentage'],\n                    mode='lines',\n                    name='Novak Djokovic'))\nfig.update_layout(xaxis_title='Year',yaxis_title='Winning percentage')\nfig.show()","4852058f":"federer_by_surface = pd.concat([match[match['winner_name']=='Roger Federer']['surface'].value_counts(),\n                                match[match['loser_name']=='Roger Federer']['surface'].value_counts()],\n                               axis = 1).set_axis(['won','lost'],axis = 'columns')\nfederer_by_surface['winning_percentage']=federer_by_surface['won']\/(federer_by_surface['won']+federer_by_surface['lost'])\nnadal_by_surface = pd.concat([match[match['winner_name']=='Rafael Nadal']['surface'].value_counts(),\n                              match[match['loser_name']=='Rafael Nadal']['surface'].value_counts()],\n                             axis = 1).set_axis(['won','lost'],axis = 'columns')\nnadal_by_surface['winning_percentage']=nadal_by_surface['won']\/(nadal_by_surface['won']+nadal_by_surface['lost'])\ndjokovic_by_surface = pd.concat([match[match['winner_name']=='Novak Djokovic']['surface'].value_counts(),\n                                 match[match['loser_name']=='Novak Djokovic']['surface'].value_counts()],\n                                axis = 1).set_axis(['won','lost'],axis = 'columns')\ndjokovic_by_surface['winning_percentage']=djokovic_by_surface['won']\/(djokovic_by_surface['won']+djokovic_by_surface['lost'])","11095d84":"fig = go.Figure()\nfig.add_trace(go.Bar(x=federer_by_surface.index,y=federer_by_surface['winning_percentage'], name='Roger Federer'))\nfig.add_trace(go.Bar(x=nadal_by_surface.index,y=nadal_by_surface['winning_percentage'], name='Rafael Nadal'))\nfig.add_trace(go.Bar(x=djokovic_by_surface.index,y=djokovic_by_surface['winning_percentage'], name='Novak Djokovic'))\nfig.update_layout(xaxis_title='Surface',yaxis_title='Winning percentage')\nfig.show()","4ec4abe6":"federer_by_tourlevel = pd.concat([match[match['winner_name']=='Roger Federer']['tourney_level'].value_counts(),match[match['loser_name']=='Roger Federer']['tourney_level'].value_counts()],axis = 1).set_axis(['won','lost'],axis = 'columns')\nfederer_by_tourlevel['winning_percentage']=federer_by_tourlevel['won']\/(federer_by_tourlevel['won']+federer_by_tourlevel['lost'])\nnadal_by_tourlevel = pd.concat([match[match['winner_name']=='Rafael Nadal']['tourney_level'].value_counts(),match[match['loser_name']=='Rafael Nadal']['tourney_level'].value_counts()],axis = 1).set_axis(['won','lost'],axis = 'columns')\nnadal_by_tourlevel['winning_percentage']=nadal_by_tourlevel['won']\/(nadal_by_tourlevel['won']+nadal_by_tourlevel['lost'])\ndjokovic_by_tourlevel = pd.concat([match[match['winner_name']=='Novak Djokovic']['tourney_level'].value_counts(),match[match['loser_name']=='Novak Djokovic']['tourney_level'].value_counts()],axis = 1).set_axis(['won','lost'],axis = 'columns')\ndjokovic_by_tourlevel['winning_percentage']=djokovic_by_tourlevel['won']\/(djokovic_by_tourlevel['won']+djokovic_by_tourlevel['lost'])","9f83b036":"fig = go.Figure()\nfig.add_trace(go.Bar(x=federer_by_tourlevel.index,y=federer_by_tourlevel['winning_percentage'], name='Roger Federer'))\nfig.add_trace(go.Bar(x=nadal_by_tourlevel.index,y=nadal_by_tourlevel['winning_percentage'], name='Rafael Nadal'))\nfig.add_trace(go.Bar(x=djokovic_by_tourlevel.index,y=djokovic_by_tourlevel['winning_percentage'], name='Novak Djokovic'))\nfig.update_layout(xaxis_title='Tournament level',yaxis_title='Winning percentage')\nfig.show()","1328e4f8":"bins = pd.IntervalIndex.from_tuples([(0, 10), (10, 20), (20, 30), (30, 40), (40, 50),(50,60),(60,70),(70,80),(80,90),(90,100)])\nfederer_by_opponent = pd.concat([pd.cut(match[(match['loser_rank']<=100)&(match['winner_name']=='Roger Federer')]['loser_rank'], bins).value_counts(),\n                                 pd.cut(match[(match['winner_rank']<=100)&(match['loser_name']=='Roger Federer')]['winner_rank'], bins).value_counts()],\n                                axis = 1).set_axis(['won','lost'],axis = 'columns')\nfederer_by_opponent['winning_percentage']=federer_by_opponent['won']\/(federer_by_opponent['won']+federer_by_opponent['lost'])\nfederer_by_opponent = federer_by_opponent.set_axis(['1-10','11-20','21-30','31-40','41-50','51-60','61-70','71-80','81-90','91-100'],axis = 'index')\nnadal_by_opponent = pd.concat([pd.cut(match[(match['loser_rank']<=100)&(match['winner_name']=='Rafael Nadal')]['loser_rank'], bins).value_counts(),\n                               pd.cut(match[(match['winner_rank']<=100)&(match['loser_name']=='Rafael Nadal')]['winner_rank'], bins).value_counts()],\n                              axis = 1).set_axis(['won','lost'],axis = 'columns')\nnadal_by_opponent['winning_percentage']=nadal_by_opponent['won']\/(nadal_by_opponent['won']+nadal_by_opponent['lost'])\nnadal_by_opponent = nadal_by_opponent.set_axis(['1-10','11-20','21-30','31-40','41-50','51-60','61-70','71-80','81-90','91-100'],axis = 'index')\ndjokovic_by_opponent = pd.concat([pd.cut(match[(match['loser_rank']<=100)&(match['winner_name']=='Novak Djokovic')]['loser_rank'], bins).value_counts(),\n                                  pd.cut(match[(match['winner_rank']<=100)&(match['loser_name']=='Novak Djokovic')]['winner_rank'], bins).value_counts()],\n                                 axis = 1).set_axis(['won','lost'],axis = 'columns')\ndjokovic_by_opponent['winning_percentage']=djokovic_by_opponent['won']\/(djokovic_by_opponent['won']+djokovic_by_opponent['lost'])\ndjokovic_by_opponent = djokovic_by_opponent.set_axis(['1-10','11-20','21-30','31-40','41-50','51-60','61-70','71-80','81-90','91-100'],axis = 'index')","bf8cd5a7":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=federer_by_opponent.index, y=federer_by_opponent['winning_percentage'],\n                    mode='lines',\n                    name='Roder Federer'))\nfig.add_trace(go.Scatter(x=nadal_by_opponent.index, y=nadal_by_opponent['winning_percentage'],\n                    mode='lines',\n                    name='Rafael Nadal'))\nfig.add_trace(go.Scatter(x=djokovic_by_opponent.index, y=djokovic_by_opponent['winning_percentage'],\n                    mode='lines',\n                    name='Novak Djokovic'))\nfig.update_layout(xaxis_title='Opponents\\' ranks',yaxis_title='Winning percentage')\nfig.show()","75a13330":"### 4.2.3 Winning percentages by tournament level ","e4bb1297":"## 2.4 Players with most upsets","28f27b22":"### So it does seem that in general best-of-five matches generate less upsets than best-of-three matches, which makes sense. But when we compare the upset rates between best-of-five and best-of-three matches in different tournament types, the trend does not always hold true, suggesting a possible Simpson's paradox(?). In fact, in Davis Cup matches, the upset rate in best-of-five matches is even higher (although not significant, p-value = 0.11, see below). The super low upset rate in best-of-five Tour Final matches can again be attributed to the small sample size (n=7). Therefore, while it's tempting to assume that the format of the match (best-of-three vs best-of-five) plays a part in affecting the upset rate, that's not the whole story, to say the least. The fact that upsets are rarer in Grand Slams could be due to the prestigious nature of the tournament. Higher-ranked players may be more motivated (not compared to the lower-ranked players, but to themselves in non-Grand Slams tournaments) to do well in the most coveted championships in the world of tennis, so they train to be mentally and physically more prepared. With regard to Davis Cups, players may have the additional motivation of fighting for their countries.","0c6139cc":"## 2.3 Upset rate by rounds in Grand Slams\n### Focusing on the Grand Slams, how does the upset rate change going deeper and deeper into the tournament? Below shows that before the final the upset rates are fairly low and stay about the same (~0.27), but in the final match the rate jumps to 0.34, the same level as the upset rate in overall matches. This comes as a surprise to me. If there is any advantage for the higher-ranked player in Grand Slams, as opposed to in non-Grand Slams (they may play more seriously, the matches are best-of-five, etc., as suspected before), it's not there in the final any more. Maybe more often than not the players who reach the final are both highly-ranked and are therefore evenly matched, and the mental stress in the final gives the underdog just a bit edge.","70693102":"# 1. Data loading and feature engineering","e86fc727":"The data analysis in this notebook is not meant to be comprehensive; it's a collection of my initial analysis on the 2000-2020 ATP tennis dataset, including:\n- analysis on upset rate\n- analysis on winning first set \n- Big Three (Roger Federer, Rafael Nadal, Novak Djokovic) ranking and performance comparison\n\nData is from [Jeff Sackmann](https:\/\/github.com\/JeffSackmann\/tennis_atp). Many thanks to Jeff! \n\nThe dataset contains mainly self-explanatory columns. Nevertheless, I included below the dictionary from Jeff.\n\ntourney_id\n- a unique identifier for each tournament, such as 2020-888. The exact formats are borrowed from several different sources, so while the first four characters are always the year, the rest of the ID doesn't follow a predictable structure.\n\ntourney_name\nsurface\ndraw_size\n- number of players in the draw, often rounded up to the nearest power of 2. (For instance, a tournament with 28 players may be shown as 32.)\n\ntourney_level\n- For men: 'G' = Grand Slams, 'M' = Masters 1000s, 'A' = other tour-level events, 'C' = Challengers, 'S' = Satellites\/ITFs, 'F' = Tour finals and other season-ending events, and 'D' = Davis Cup\n- For women, there are several additional tourney_level codes, including 'P' = Premier, 'PM' = Premier Mandatory, and 'I' = International. The various levels of ITFs are given by the prize money (in thousands), such as '15' = ITF $15,000. Other codes, such as 'T1' for Tier I (and so on) are used for older WTA tournament designations.\n\ntourney_date\n- eight digits, YYYYMMDD, usually the Monday of the tournament week.\n\nmatch_num\n- a match-specific identifier. Often starting from 1, sometimes counting down from 300, and sometimes arbitrary. \n\nwinner_id\n- the player_id used in this repo for the winner of the match\n\nwinner_seed\nwinner_entry\n- 'WC' = wild card, 'Q' = qualifier, 'LL' = lucky loser, 'PR' = protected ranking, 'ITF' = ITF entry, and there are a few others that are occasionally used.\n\nwinner_name\nwinner_hand\nwinner_ht\n- height in centimeters, where available\n\nwinner_ioc\n- three-character country code\n\nwinner_age\n- age, in years, as of the tourney_date\n\nloser_id\nloser_seed\nloser_entry\nloser_name\nloser_hand\nloser_ht\nloser_ioc\nloser_age\nscore\nbest_of\n- '3' or '5', indicating the the number of sets for this match","a77d72f9":"### In general, chances of winning the match after winning the first set are about 80%, regardless of the surface or tournament level. Even for best-of-five matches, winning the first set is crucial. If you win the first set, you are ~80% there.","dc5ca2f0":"## 2.2 Upset rate by players' ranking (overall vs top 100 vs top 10)\n### Are the matches more competitive between the top 100s, i.e. higher upset rates when both players of the match are ranked top 100? Or even top 10?","5c9e0fae":"# 2. Analysis on upset rate\n## 2.1 Upset rate by surface\/tournament level\/match format (best-of-three vs best-of-five)\n### In general, how often does the lower-ranked player beat the higher-ranked player in a match? Does it depend on the surface or tournament level?","7be2e163":"### It's not surprising that the Big Three topped both charts.\n### Although in general one has only about 20% chance of winning the match after losing the first set, when the Big Three lose the first set, they come back winning the match over 42% of the time. And when they do win the first set, they have a whopping ~95% chance of winning the whole match.\n### This concludes my analysis on the importance of the first set, and presents a perfect transition to focus on just the Big Three.","6e06af4a":"# 3. How important is the first set?\n## 3.1 What are the chances of winning the match after winning the first set?\n### Do they depend on the surface\/tournament level\/match format (best-of-three vs best-of-five)?","173434bd":"### Surprisingly (to me at least), upset rates stay about the same even when the match is between top 10 players.","9da0a434":"### The upset rate in general is 0.33. It does not seem to vary much between different court surfaces, but it does vary noticeably between different tournaments, specifically, upset rates are lower in Davis Cup matches and Grand Slams. It is natural to wonder if this is due to the format of the match - Davis Cup and Grand Slams matches are mostly best-of-five sets as opposed to best-of-three.\n\n### Although in general there was practically no difference in the upset rate between different court surfaces, from the above figure we do notice some usually high upset rates in Davis Cup matches on grass and Tour Final matches on carpet. While the explanation for the former eludes me at the moment, the higher upset rate in the Tour Final matches on carpet can be attributed to the small sample size - only 15 matches occurred on carpet in the Tour Final, all of which happened in 2005. As a world No. 12 at the time, David Nalbandian made most of these upsets in that event, grabbing his first and only year-end championships title.","b9f664f2":"# 4. Big Three: ranking and winning percentage\n### Here I only present the statistics, with no intention to share my opinions on the heated debate about who is the GOAT.\n## 4.1 Rankings timeline \n### select regions to zoom in ","1e0a4232":"### Finally, let's look at who pulled off the most upsets and who got upset the most.\n### Interestingly, Feliciano Lopez topped both charts. He beat someone who ranked higher than him 162 times but also lost to someone who ranked lower than him 218 times, which suggests that he is not a very stable player in terms of his performances. Two other players, Fernando Verdasco and Mikhail Youzhny, appeared on both charts, indicating they suffer the same instability issue as Feliciano Lopez.","13030603":"### 4.2.2 Winning percentages by surface","ae15cd60":"### 4.2.4 Winning percentages by opponents' ranks","1faac615":"## 4.2 Winning percentage\n### 4.2.1 Winning percentages timeline","40d05ac7":"## 3.2 Who has the highest chance of winning the match after winning\/losing the first set?\n### Hint: one of the Big Three."}}