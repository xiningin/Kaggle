{"cell_type":{"843a12d8":"code","96b108a7":"code","07587b1a":"code","8181bd9f":"code","ed52dfbb":"code","bbb0bf2b":"code","5d7e70f4":"code","2369ac30":"code","9e00c6bd":"code","0ad65427":"code","f25e3ca4":"code","be25bec1":"code","112a2e05":"code","96cf39be":"code","d023deb3":"code","24ff1486":"code","7f063818":"code","c81bdf46":"code","1a899ad4":"code","f04fa548":"code","46e57cae":"code","9882e216":"code","759c508a":"code","9ea2fb92":"code","a392ca13":"code","681d616a":"code","288e075d":"code","7349c179":"code","a88df0d4":"code","f148ac4f":"code","db997a3b":"markdown","dd6df96a":"markdown","0a1e256a":"markdown","a4a4e3d9":"markdown","158d4556":"markdown"},"source":{"843a12d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96b108a7":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom pylab import rcParams\n\n%matplotlib inline","07587b1a":"df = pd.read_csv(\"\/kaggle\/input\/szeged-weather\/weatherHistory.csv\")\ndf.head()","8181bd9f":"df.columns","ed52dfbb":"df.dtypes","bbb0bf2b":"df[\"Formatted Date\"] = pd.to_datetime(df[\"Formatted Date\"], errors='coerce', utc=True)\ndf.head()","5d7e70f4":"df.dtypes","2369ac30":"df['Month'] = df['Formatted Date'].dt.month\ndf['Year'] = df['Formatted Date'].dt.year\ndf['Day'] = df['Formatted Date'].dt.day\ndf['Hour'] = df['Formatted Date'].dt.hour\ndf.head()","9e00c6bd":"df.describe().T","0ad65427":"df.drop([\"Formatted Date\", 'Loud Cover', 'Daily Summary'], axis =1, inplace=True)","f25e3ca4":"df.head()","be25bec1":"df.info()","112a2e05":"numerical = df.select_dtypes(include=[\"float64\", \"int64\"]).keys()\ncategorical = df.select_dtypes(include=[\"object\"]).keys()\nnumerical, categorical","96cf39be":"df_cat = df[categorical]\ndf_cat.head()","d023deb3":"df_cat.info()","24ff1486":"df_cat[\"Summary\"].value_counts().values","7f063818":"def unique_vals(df, cols):\n    rcParams['figure.figsize'] = 15, 16\n    fig,ax = plt.subplots(len(cols))\n    for i,col in enumerate(cols):\n        sns.countplot(x=df[col],ax=ax[i])\n        ax[i].set_xticklabels(ax[i].get_xticklabels(), rotation=30, ha='right')","c81bdf46":"unique_vals(df_cat, [\"Summary\", \"Precip Type\"])","1a899ad4":"df[\"Summary\"].describe(), df[\"Summary\"].value_counts()","f04fa548":"(df['Summary'].value_counts()\/len(df))*100","46e57cae":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\ndf['Summary'] = le.fit_transform(df['Summary'])","9882e216":"df.head() ","759c508a":"df.isnull().sum()","9ea2fb92":"df['Precip Type'].value_counts()","a392ca13":"df = pd.get_dummies(df,columns=['Precip Type'], prefix='Type_')","681d616a":"df.head()","288e075d":"df.isnull().sum()","7349c179":"df_num = df[numerical]\ndf_num.head()","a88df0d4":"df_num.columns","f148ac4f":"def outlier_visualizer(df,cols):\n    fig,ax = plt.subplots(len(cols),2)\n    ","db997a3b":"### Handeling Categorical Variables","dd6df96a":"### Handelling The Date Column","0a1e256a":"### Handeling the outliers","a4a4e3d9":"## Let's Start\n\n### Import the Libraries","158d4556":"#### Summary Column"}}