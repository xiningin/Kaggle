{"cell_type":{"2e4811e0":"code","d5e65452":"code","30f116c1":"code","2d315a8a":"code","451de7a4":"code","5a0edff0":"code","6d8509a7":"code","5462802d":"code","edb690e6":"code","5feb3945":"code","e7ea94b1":"code","0641824d":"code","8426a73e":"code","d279cb3f":"code","eec8573e":"code","b14817e7":"code","38d5bf39":"code","6622d5b3":"code","5c52a77a":"code","920039ef":"code","f1ee42d0":"code","b4b46e57":"code","8cac8217":"code","cd873c45":"code","902b0f00":"code","e15cad77":"code","1eb110ef":"code","fee961ff":"code","28445047":"code","e4d6013f":"code","398026d3":"code","b0a0140b":"code","b0e1bbb0":"code","9a08dcc4":"code","2de7c9a6":"code","6b0a3818":"code","ff691b4f":"code","16dfb829":"code","4c07cdc1":"code","4b795bd5":"code","1cd01f3e":"code","b6fe037b":"code","1676880f":"code","7393be5f":"code","56a22dd9":"code","66285ffe":"code","750d5170":"code","016b1d79":"code","e2305422":"code","1abaee16":"code","016fea78":"code","3582edb8":"code","315e536b":"code","b5166a61":"code","5ea376b1":"code","48a7e756":"code","d11312d5":"code","e277a604":"code","025488dc":"code","0dbfd6bc":"code","addb134f":"code","890088cd":"code","ec7dcea7":"code","874ceeb4":"code","a375c3fa":"code","3b9e8015":"code","bc112186":"code","b6304e93":"code","756f9626":"code","bbe0c983":"code","599d8ac0":"code","e0e3fc7f":"code","78ad528f":"code","308efceb":"code","16dc79e6":"code","0305d73d":"code","5ae70c40":"code","f40f527f":"code","adc51fed":"code","a79ef2c1":"code","87b63015":"code","3bf1e6ad":"code","9f4fb49a":"code","c0ec4cf9":"code","069e2414":"code","f469ad62":"code","c129ca64":"code","512340ad":"code","38a28fd9":"markdown","f2fd10ce":"markdown","79637721":"markdown","51769edf":"markdown","3a8ed359":"markdown","33058ca7":"markdown","e0635454":"markdown","eafbabb3":"markdown","0c55f706":"markdown","d2d0b554":"markdown","8239c174":"markdown","6b5bfbe8":"markdown","a054c7fe":"markdown","29726aa4":"markdown","06ac3fc2":"markdown","d427808d":"markdown","8e05abe1":"markdown","a8e6d1d0":"markdown","be70da96":"markdown","29a840f1":"markdown","8f7c9776":"markdown","353566d7":"markdown","20858df1":"markdown","520eb872":"markdown","4ad5d825":"markdown","e6167f73":"markdown","8d72f0d2":"markdown","bd38e5c5":"markdown","1c2c6e1f":"markdown","5484a2dd":"markdown","4feb5db0":"markdown","a44f6eb3":"markdown","82dc07c1":"markdown","c280b99c":"markdown","2d91347a":"markdown","40dfa1bd":"markdown","51ee94ea":"markdown","76d2191f":"markdown","d6173af8":"markdown","6bfd9198":"markdown","964bd601":"markdown","a18b327f":"markdown","2653259f":"markdown","28cf4f52":"markdown","5032e612":"markdown","fe92abaf":"markdown","3d85bce8":"markdown"},"source":{"2e4811e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d5e65452":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassangerID = test_df[\"PassengerId\"]","30f116c1":"train_df.columns","2d315a8a":"train_df.head()","451de7a4":"train_df.describe()","5a0edff0":"train_df.info()","6d8509a7":"def ba_plot(variable):\n    \"\"\"\n    input: variableex:\"sex\"\n    output: bar plot & value count\"\"\"\n    #get feauture\n    var=train_df[variable]\n    #count number of categorical variable(value\/sample)\n    varValue=var.value_counts()\n    #visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","5462802d":"category1=[\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    ba_plot(c)","edb690e6":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","5feb3945":"def plot_hist (variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distrubution with hist\".format(variable))\n    plt.show()","e7ea94b1":"numericVar=[\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n     plot_hist(n)","0641824d":"#Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(by=\"Survived\", ascending = False)","8426a73e":"#Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(by=\"Survived\", ascending = False)","d279cb3f":"#SibSp - Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(by=\"Survived\", ascending = False)","eec8573e":"# Parch - Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index=False).mean().sort_values(by=\"Survived\", ascending = False)","b14817e7":"def detect_outliers(df,features):\n    outlier_indices=[]\n    for i in features:\n        # 1st quartile\n        Q1=np.percentile(df[i],25)\n        # 3rd quartile\n        Q3=np.percentile(df[i],75)\n        # IQR\n        IQR=Q3-Q1\n        #Outlier Step\n        outlier_step = IQR*1.5\n        #detect outlier and their indeces\n        outlier_list_col=df[(df[i]< Q1-outlier_step) | (df[i]>Q3+outlier_step)].index\n        #store indeces\n        outlier_indices.extend(outlier_list_col)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers=list(i for i, v in outlier_indices.items() if v > 2)\n    return multiple_outliers\n    ","38d5bf39":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","6622d5b3":"#drop outliers\ntrain_df=train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]), axis=0).reset_index(drop=True)","5c52a77a":"train_df_len=len(train_df)\ntrain_df=pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","920039ef":"train_df.head()","f1ee42d0":"train_df.columns[train_df.isnull().any()]","b4b46e57":"train_df.isnull().sum()","8cac8217":"train_df[train_df[\"Embarked\"].isnull()]","cd873c45":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","902b0f00":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","e15cad77":"train_df[train_df[\"Embarked\"].isnull()]","1eb110ef":"train_df[train_df[\"Fare\"].isnull()]","fee961ff":"train_df[\"Fare\"]=train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","28445047":"train_df[train_df[\"Fare\"].isnull()]","e4d6013f":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\" ]\nsns.heatmap(train_df[list1].corr(),annot=True, fmt=\".3f\")\nplt.show()","398026d3":"g = sns.factorplot(x=\"SibSp\",y=\"Survived\",data=train_df, kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","b0a0140b":"g = sns.factorplot(x=\"Parch\", y=\"Survived\", kind=\"bar\", data=train_df,size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","b0e1bbb0":"g = sns.factorplot(x=\"Pclass\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\nplt.show()","9a08dcc4":"g = sns.FacetGrid(train_df,col=\"Survived\")\ng.map(sns.distplot,\"Age\",bins=25)\nplt.show()","2de7c9a6":"g = sns.FacetGrid(train_df,col=\"Survived\",row=\"Pclass\",size=2)\ng.map(plt.hist,\"Age\",bins=25)\ng.add_legend()\nplt.show()","6b0a3818":"g = sns.FacetGrid(train_df,row=\"Embarked\",size=2)\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","ff691b4f":"g =sns.FacetGrid(train_df,row=\"Embarked\", col=\"Survived\",size=2.2)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","16dfb829":"train_df[train_df[\"Age\"].isnull()]","4c07cdc1":"sns.factorplot(x=\"Sex\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","4b795bd5":"sns.factorplot(x=\"Sex\",y=\"Age\", hue=\"Pclass\",data=train_df,kind=\"box\")\nplt.show()","1cd01f3e":"sns.factorplot(x=\"Parch\",y=\"Age\", data=train_df,kind=\"box\")\nsns.factorplot(x=\"SibSp\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","b6fe037b":"train_df[\"Sex\"]=[1 if i==\"male\" else 0 for i in train_df[\"Sex\"]]","1676880f":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot=True)\nplt.show()","7393be5f":"index_nan_age=list (train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred=train_df[\"Age\"][((train_df[\"SibSp\"]==train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"]==train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"]==train_df.iloc[i][\"Pclass\"]))].median()\n    age_median=train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i]=age_pred\n    else:\n        train_df[\"Age\"].iloc[i]=age_median\n","56a22dd9":"train_df[train_df[\"Age\"].isnull()]","66285ffe":"train_df[\"Name\"].head(10)","750d5170":"name = train_df[\"Name\"]\ntrain_df[\"title\"]=[i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","016b1d79":"sns.countplot(x=\"title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","e2305422":"# convert to categorical feuatres\ntrain_df[\"title\"]=train_df[\"title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"title\"]=[0 if i == \"Master\" else 1 if i==\"Miss\" or i==\"Ms\" or i==\"Mlle\" or i==\"Mrs\" else 2 if i==\"Mr\" else 3 for i in train_df[\"title\"]]\ntrain_df[\"title\"].head()","1abaee16":"sns.countplot(x=\"title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","016fea78":"g = sns.factorplot(x=\"title\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","3582edb8":"train_df.drop(labels=[\"Name\"],axis=1,inplace=True)","315e536b":"train_df.head()","b5166a61":"train_df=pd.get_dummies(train_df,columns=[\"title\"])\ntrain_df.head()","5ea376b1":"train_df.head()","48a7e756":"train_df[\"Fsize\"]=train_df[\"SibSp\"]+train_df[\"Parch\"]+1","d11312d5":"train_df.head()","e277a604":"g=sns.factorplot(x=\"Fsize\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survived\")\nplt.show()","025488dc":"train_df[\"family_size\"]=[1 if i<5 else 0 for i in train_df[\"Fsize\"]]","0dbfd6bc":"train_df.head(20)","addb134f":"sns.countplot(x=\"family_size\",data=train_df)\nplt.show()","890088cd":"g=sns.factorplot(x=\"family_size\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","ec7dcea7":"train_df=pd.get_dummies(train_df,columns=[\"family_size\"])\ntrain_df.head()","874ceeb4":"train_df[\"Embarked\"].head()","a375c3fa":"sns.countplot(x=\"Embarked\",data=train_df)\nplt.show()","3b9e8015":"train_df=pd.get_dummies(train_df,columns=[\"Embarked\"])\ntrain_df.head()","bc112186":"train_df[\"Ticket\"].head(20)","b6304e93":"tickets=[]\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"]=tickets\n","756f9626":"train_df[\"Ticket\"].head(20)","bbe0c983":"train_df.head()","599d8ac0":"train_df=pd.get_dummies(train_df,columns=[\"Ticket\"],prefix=\"T\")\ntrain_df.head()","e0e3fc7f":"sns.countplot(x=\"Pclass\",data=train_df)\nplt.show()","78ad528f":"train_df[\"Pclass\"]=train_df[\"Pclass\"].astype(\"category\")\ntrain_df=pd.get_dummies(train_df,columns=[\"Pclass\"])","308efceb":"train_df.head()","16dc79e6":"train_df[\"Sex\"]=train_df[\"Sex\"].astype(\"category\")\ntrain_df=pd.get_dummies(train_df,columns=[\"Sex\"])\ntrain_df.head()","0305d73d":"train_df.drop(labels=[\"PassengerId\",\"Cabin\"],axis=1,inplace=True)","5ae70c40":"train_df.columns","f40f527f":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n","adc51fed":"train_df_len","a79ef2c1":"test=train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"],axis=1,inplace=True)","87b63015":"test","3bf1e6ad":"train=train_df[:train_df_len]\nx_train=train.drop(labels=\"Survived\",axis=1)\ny_train=train[\"Survived\"]\nx_train,x_test,y_train,y_test = train_test_split(x_train,y_train,test_size=0.33,random_state=42)\nprint(\"x_train\",len(x_train))\nprint(\"x_test\",len(x_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","9f4fb49a":"logreg=LogisticRegression()\nlogreg.fit(x_train,y_train)\nacc_log_train=round(logreg.score(x_train,y_train)*100,2)\nacc_log_test=round(logreg.score(x_test,y_test)*100,2)\nprint(\"Training Acc.: % {}\".format(acc_log_train))\nprint(\"Testing Acc.: % {}\".format(acc_log_test))\n","c0ec4cf9":"random_state=42\nclassifier=[DecisionTreeClassifier(random_state=random_state),\n           SVC(random_state=random_state),RandomForestClassifier(random_state=random_state),\n           LogisticRegression(random_state=random_state),KNeighborsClassifier()]\ndt_param_grid={\"min_samples_split\":range(10,500,20),\"max_depth\":range(1,20,2)}\nsvc_param_grid={\"kernel\":[\"rbf\"],\"gamma\":[0.001,0.01,0.1,1],\n               \"C\":[1,10,50,100,200,300,1000]}\nrf_param_grid={\"max_features\":[1,3,10],\n              \"min_samples_split\":[2,3,10],\"min_samples_leaf\":[1,3,10],\"bootstrap\":[False],\"n_estimators\":[100,300],\"criterion\":[\"gini\"]}\nlogreg_param_grid={\"C\":np.logspace(-3,3,7),\"penalty\":[\"l1\",\"l2\"]}\nknn_param_grid={\"n_neighbors\":np.linspace(1,19,10,dtype=int).tolist(),\n               \"weights\":[\"uniform\",\"distance\"],\"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param=[dt_param_grid,svc_param_grid,rf_param_grid,logreg_param_grid,knn_param_grid]\n","069e2414":"cv_result=[]\nbest_estimators=[]\nfor i in range(len(classifier)):\n    clf=GridSearchCV(classifier[i],param_grid=classifier_param[i],cv=StratifiedKFold(n_splits=10),scoring=\"accuracy\",n_jobs=-1,verbose=1)\n    clf.fit(x_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","f469ad62":"cv_results=pd.DataFrame({\"Cross Validation Means\":cv_result,\"ML Models\":[\"DecisionTreeClassifier\",\"SVM\",\"RandomForestClassifier\",\n                                                                       \"LogisticRegression\",\"KneighborsClassifier\"]})\ng=sns.barplot(\"Cross Validation Means\",\"ML Models\", data=cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validaiton Scores\")","c129ca64":"votinC=VotingClassifier(estimators=[(\"dt\",best_estimators[0]),\n                                   (\"rfc\",best_estimators[2]),\n                                    (\"lr\",best_estimators[3])],\n                                   voting=\"soft\",n_jobs=-1)\nvotinC=votinC.fit(x_train,y_train)\nprint(accuracy_score(votinC.predict(x_test),y_test))","512340ad":"test_survived=pd.Series(votinC.predict(test),name=\"Survived\").astype(int)\nresults=pd.concat([test_PassangerID,test_survived],axis=1)\nresults.to_csv(\"titanic.csv\",index=False)","38a28fd9":" <a id = '22'><\/a>\n\n### Name-Title\n","f2fd10ce":"* pclass is impoertand feauture for model training.","79637721":" <a id = '28'><\/a>\n### Drop Passenger ID and Cabin","51769edf":"* float64(2) : Fare and Age\n* int64(5) : Pclass, sibsp , parch, passangerId and survived\n* object(5) : Cabin, embarked, ticket, name and sex","3a8ed359":"* Having a lot of SibSp have less chance to survive.\n* if sibsp==0 or 1 or 2, passenger has mor chance to survive.\n* we can consider a new feature describing these categories.\n","33058ca7":"small families have more chance to survive than large families.","e0635454":"* SibSp and Parch can be used for new feature extraction with th=3.\n* small families have more chance to survive.\n* there is a std in survival of passenger with  parch=3.","eafbabb3":" <a id = '27'><\/a>\n### Sex","0c55f706":" <a id = '15'><\/a>\n## Pclass-survived","d2d0b554":"Fare feature seems to have correlation with survived feature (0.26).","8239c174":"<a id = '2'><\/a>\n# Variable Description\n1.PassengerId : unique id number to each passenger\n2.Survived : passenger survive (1) or died(0)\n3.Pclass :passenger class\n4.Name\n5.Sex : gender of  passenger\n6.Age \n7.SibSp : number of siblings\/ spouses #siblings spouses\n8.Parch : number of parents\/children # par?parents ch=children\n9.Ticket : ticket number\n10.Fare : amount of money spent on ticket\n11.Cabin : cabin category\n12.Embarked : port where passenger emabarked (C=Cherbourg, Q=Queenstown, S=Southampton)","6b5bfbe8":"  <a id = '10'><\/a>\n ## Fill Missing Value\n * Embarked has 2 missing value\n * Fare has only 1","a054c7fe":"*Sex is not informative age prediction. Because age distrubition seems to be same.","29726aa4":"* Female passengers have much better survival rate than male passengers.\n* males have better survival rate pclass 2 in  C\n* embaerked and sex will be used in training","06ac3fc2":" <a id = '26'><\/a>\n### Pclass","d427808d":"# INTRODUCTION\nThe sinking of Titanic is one f the most notorious shipwrekcs in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color = 'blue'> \n\nContent:\n\n1.[Load and Check Data](#1)\n    \n2.[Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n    * [Categorical Variable Analysis](#4)\n    * [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n    * [Correlation Between SibSp--Parch--Age--Fare--Survived](#12)\n    * [SibSp--Survived](#13)\n    * [Parch--Survived](#14)\n    * [Pclass--survived](#15)\n    * [Age--Survived](#16)\n    * [Pclass--survived--age](#17)\n    * [Embarked--Sex--Pclass--survived](#18)\n    * [Embarked--Sex--Fare--survived](#19)\n    * [Fill Missing:Age Feature](#20)\n7. [Feature Engineering](#21)\n    * [Name--Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n8. [Modelling](#29)\n    * [Train-Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning--Grid Search--Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","8e05abe1":"<a id = '3'><\/a>\n## Univariate Variable Analysis\n    * Categorical Variable Analysis : Surviced, Sex , Pclass, Embarked, Cabin ,Name, Ticket,Sibsp and PAch\n    * Numerical Variable Analysis : Age, PassengerID , Fare","a8e6d1d0":" <a id = '14'><\/a>\n## Parch--Survived","be70da96":" <a id = '24'><\/a>\n### Embarked","29a840f1":"<a id = '4'><\/a>\n## Categorical Variable","8f7c9776":"* Passengers who pay higher fare have better survival.Fare can be used as categorigal for training.\n","353566d7":" <a id = '8'><\/a>\n# Missing Value\n    *  Find Missing Value\n    *  Fill Missing Value","20858df1":" <a id = '23'><\/a>\n### Family Size","520eb872":" <a id = '12'><\/a>\n## Correlation Between SibSp--Parch--Age--Fare--Survived","4ad5d825":" <a id = '13'><\/a>\n## SibSp--Survived","e6167f73":" <a id = '21'><\/a>\n\n# Feature Engineering","8d72f0d2":" <a id = '7'><\/a>\n # Outlier Detection\n","bd38e5c5":" <a id = '9'><\/a>\n## Find Missing Value","1c2c6e1f":" <a id = '19'><\/a>\n## Embarked--Sex--Fare--survived","5484a2dd":" <a id = '17'><\/a>\n## Pclass--survived--age","4feb5db0":" <a id = '32'><\/a>\n### Hyperparameter Tuning--Grid Search--Cross Validation\n* We will compare five ml classifier and evaluate mean accuracy of each of them by stratified cross validaiton.\n\n* Decissin Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","a44f6eb3":"* age is not correlated with sex but it is correlated with parch,sibsp and class.","82dc07c1":"*first class passenger ara older than 2nd, nad 2nd and older than 3rd class.","c280b99c":" <a id = '33'><\/a>\n### Ensemble Modeling","2d91347a":" <a id = '20'><\/a>\n## Fill Missing:Age Feature","40dfa1bd":" <a id = '31'><\/a>\n### Simple Logistic Regression","51ee94ea":" <a id = '34'><\/a>\n### Prediction and Submission","76d2191f":" <a id = '29'><\/a>\n# Modelling","d6173af8":" <a id = '18'><\/a>\n## Embarked--Sex--Pclass--survived","6bfd9198":" <a id = '16'><\/a>\n## Age--Survived","964bd601":"<a id = '1'><\/a>\n# Load and Check Data","a18b327f":"<a id = '5'><\/a>\n## Numerical Variable","2653259f":"* age <= 10 has a high survival rate,\n* oldest passengers(80) survived,\n* large number of 20 years old did not survive,\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distrubition for missing value of age","28cf4f52":"<a id = '6'><\/a>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n","5032e612":" <a id = '30'><\/a>\n### Train-Test Split","fe92abaf":" <a id = '25'><\/a>\n### Ticket","3d85bce8":"\n <a id = '11'><\/a>\n \n# Visualization"}}