{"cell_type":{"52160983":"code","f3e301cd":"code","cb432c0d":"code","62760202":"code","cc74724f":"code","39f3739a":"code","310d3bee":"code","33698e11":"code","bf333bfa":"code","73689be0":"code","e47f8434":"code","1ffcfc02":"code","dbd38de7":"code","9bb0d2c8":"code","d4d72dfa":"code","88a24d5d":"code","937e70e2":"code","13f23930":"code","471fe10d":"code","7fc74215":"code","ee8f6e9c":"code","4d7c0bea":"code","47392133":"code","66f8ce35":"code","09415361":"code","3fc60b86":"code","39cc3b6b":"code","5a6935d5":"code","fe04658a":"code","a02ab88a":"code","b5e2d5c3":"code","9a997649":"code","529aaddf":"code","f9c6c9c1":"code","4ede1147":"code","0915c8ef":"code","74a3fe99":"code","4ade3af4":"code","e4ddd9cb":"code","2c6bb584":"code","c4c8e641":"code","c15a6053":"code","ab1da8da":"code","21bf39ee":"code","183921d4":"code","960c8e41":"code","eec2cf42":"code","77d2d53a":"code","45dd5e0f":"code","c18d07d5":"code","595a5a8e":"code","59bf8071":"code","a30caece":"code","7ad9c637":"code","c6da20c1":"code","1ab69c8b":"code","532a4a55":"code","ce1999f7":"code","708daab2":"code","3afd5e29":"code","fef45c00":"markdown","8f413867":"markdown","5a1e988c":"markdown","1c28b901":"markdown","59369faf":"markdown","6e9d523a":"markdown","57109f41":"markdown","3626b319":"markdown","6da1b79c":"markdown","0b6ccf0c":"markdown","06ecea47":"markdown","843e0f3c":"markdown","2a3e0873":"markdown","9ab7594e":"markdown","6249dab2":"markdown","3daf9307":"markdown","06232a46":"markdown","087924d9":"markdown","76d12716":"markdown","d6ad149c":"markdown"},"source":{"52160983":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\n\n%matplotlib inline","f3e301cd":"def get_column_null_count(data_frame):\n    \"\"\"\n    Function prints all column names and count of null values in it\n    :param data_frame: a pandas DataFrame\n    :return: null\n    \"\"\"\n    for i in data_frame.columns:\n        print(\"{} : {}\".format(i, len(data_frame[pd.isnull(data_frame[i])])))\n\n\ndef update_column_names(data_frame):\n    \"\"\"\n    Function updates all the column names to lowercase \n    and spaces with underscore\n    :param data_frame: a pandas DataFrame\n    :return: null\n    \"\"\"\n    new_col = []\n    for name in data_frame.columns:\n        new_col.append(name.lower().replace(' ', '_'))\n    data_frame.columns = new_col\n\n\ndef get_data_info(data_frame):\n    \"\"\"\n    Function to print description of a Data Frame\n    It prints Shape, Index, Size, Column Names and column wise null count \n    :param data_frame: a pandas DataFrame\n    :return: null\n    \"\"\"\n    print(\"Shape : {}\".format(data_frame.shape))\n    print(\"Index : {}\".format(data_frame.index))\n    print(\"Size : {}\".format(data_frame.size))\n    print(\"Column Names : {}\".format(data_frame.columns))\n    print(\"Null count in each columns \")\n    get_column_null_count(data_frame)\n\n\ndef get_data(data_frame, head=3, tail=3, mid=6):\n    \"\"\"\n    Function to get a particular number of rows from a DataFrame\n    :param data_frame: a pandas DataFrame\n    :param head: count of rows from top\n    :param tail: count of rows from bottom\n    :param mid: count of rows from middle\n    :return: a pandas DataFrame\n    \"\"\"\n    df_head = data_frame.head(head)\n    df_tail = data_frame.tail(tail)\n    df_mid = data_frame.iloc[np.random.randint(3000, 7000, size=mid)]\n    df = df_head.append(df_mid).append(df_tail)\n    return df\n\n\ndef display(series):\n    \"\"\"\n    Function to print a series in a table\/frame format\n    :param series: a series\n    :return: series in a table format\n    \"\"\"\n    return series.to_frame()","cb432c0d":"# Reading from dataset\necom = pd.read_csv(\"..\/input\/ecommerce-purchases\/Ecommerce_Purchases.csv\")","62760202":"# Calling our function to get information of our Dataframe \nget_data_info(ecom)","cc74724f":"# Calling our function to get rows of our Dataframe\nget_data(ecom)","39f3739a":"# updating column names to a common format\nupdate_column_names(ecom)\necom.columns","310d3bee":"get_data(ecom)","33698e11":"# printing unique languages in the data\necom['language'].unique()","bf333bfa":"# Preapring a dictionary to map the languages with its ISO code\nlang_map = {\n    'de': 'German',\n    'el': 'Greek',\n    'en': 'English',\n    'es': 'Spanish',\n    'fr': 'French',\n    'it': 'Italian',\n    'pt': 'Portuguese',\n    'ru': 'Russian',\n    'zh': 'Chinese'\n}\n# Replacing the language data.\necom.language.replace(lang_map, inplace=True)\nget_data_info(ecom)\nget_data(ecom)","73689be0":"# Spliting the browser info column data to get browser and OS names\ndata = ecom['browser_info'].str.split('(')\nbrowser = []\nos_name = []\nfor d in data:\n    browser.append(d[0])\n    if re.search('Mac', d[1]):\n        os_name.append(\"Mac\")\n    elif re.search('Windows', d[1]):\n        os_name.append(\"Windows\")\n    elif re.search('Linux', d[1]):\n        os_name.append(\"Linux\")\n    else:\n        os_name.append(\"\")\n# Creating new columns\necom['browser_with_version'] = browser\necom['os'] = os_name\nupdate_column_names(ecom)\nget_data_info(ecom)","e47f8434":"get_data(ecom, mid=0)","1ffcfc02":"# Getting only browser name\ndata = ecom['browser_with_version'].str.split('\/')\nli = []\nfor d in data:\n    li.append(d[0])\necom['browser_name'] = li\nupdate_column_names(ecom)\nget_data(ecom, head=2, mid=10, tail=1)","dbd38de7":"# Extracting cleaned data to a new csv file\necom.to_csv(\"Ecommerce_Purchases_cleaned.csv\", index = False)","9bb0d2c8":"ecom['language'].unique()","d4d72dfa":"lang_count = ecom.language.value_counts()\ndisplay(lang_count)","88a24d5d":"lang_count.plot(kind='bar',title='Bar Plot for the number of languages',rot=45)\nplt.savefig(\"lang_bar.png\")\nplt.show()","937e70e2":"lang_price_sum = ecom.groupby(['language'])['purchase_price'].sum()","13f23930":"plt.figure(figsize=(20,10))\nlang_price_sum.plot(kind='barh',title='Bar plot for the total purchase made by languages',color='red')\nfor i, v in enumerate(lang_price_sum):\n    plt.text(v, i , str(round(v, 2)), color='red')\nplt.savefig(\"lang_vs_purchase.png\")\nplt.show()","471fe10d":"lang_broswer = ecom.groupby('language')['browser_name'].value_counts()","7fc74215":"fig, ax = plt.subplots(figsize=(10,7))\nlang_broswer.unstack().plot(kind='bar', title='Plot of Browsers used in diffrent Languages',ax=ax)\nplt.savefig(\"browser_vs_lang.png\")\nplt.show()","ee8f6e9c":"lang_period = ecom.groupby('language')['am_or_pm'].value_counts()\nlang_period.unstack()","4d7c0bea":"os = set(ecom['os'])\nos","47392133":"display(ecom.os.value_counts())","66f8ce35":"plt.pie(ecom.os.value_counts(), autopct = '%.1f%%', radius = 1.2, labels = ['Windows', 'Mac','Linux'])\nplt.title(\"Pie Chart of OS Used\", pad=20)\nplt.savefig(\"os_pie.png\")\nplt.show()","09415361":"browser = ecom['browser_name'].unique()\nbrowser","3fc60b86":"os_broswer = ecom.groupby('os')['browser_name'].value_counts()","39cc3b6b":"fig, ax = plt.subplots(figsize=(10,7))\nos_broswer.unstack().plot(kind='barh', title='Browser count used in diffrent OS',ax=ax)\nplt.savefig(\"os_vs_browser.png\")\nplt.show()","5a6935d5":"os_broswer_price = ecom.groupby(['os', 'browser_name'])['purchase_price'].sum()\ndisplay(os_broswer_price)","fe04658a":"display(ecom['job'])","a02ab88a":"job_sort = ecom.sort_values(by='purchase_price')\njob_sort[['job', 'email', 'purchase_price']].head(10)","b5e2d5c3":"job_sort[['job', 'email', 'purchase_price']].tail(10)","9a997649":"jobs = ecom['job'].unique()\nlen(jobs)","529aaddf":"job_purchase = ecom.groupby('job')['purchase_price'].sum()\ndisplay(job_purchase)","f9c6c9c1":"job_purchase_sort = job_purchase.sort_values(ascending=False)","4ede1147":"top_10_purchase_job = job_purchase_sort.head(10)\ndisplay(top_10_purchase_job)","0915c8ef":"bottom_10_purchase_job = job_purchase_sort.tail(10)\ndisplay(bottom_10_purchase_job)","74a3fe99":"sns.distplot(ecom.purchase_price, kde=True, rug=True,bins=20)\nplt.title(\"Distribution plot of Purchase Price\")\nplt.savefig(\"price_distribution.png\")\nplt.show()","4ade3af4":"job_am_pm = pd.pivot_table(ecom, index='job', columns='am_or_pm', values='purchase_price')\njob_am_pm","e4ddd9cb":"job_am_pm.sort_values(by='AM', ascending=False).head(10)","2c6bb584":"job_am_pm.sort_values(by='PM', ascending=False).head(10)","c4c8e641":"period_purchase = ecom.groupby('am_or_pm')['purchase_price'].sum()","c15a6053":"period_purchase.plot(kind='pie', autopct = '%.2f%%', title=\"Total amount Purchase in the Period(AM\/PM)\")\nplt.savefig(\"am_pm_price.png\")\nplt.show()","ab1da8da":"set(ecom['cc_provider'])","21bf39ee":"plt.pie(ecom['cc_provider'].value_counts(), labels=set(ecom['cc_provider']), autopct=\"%1.2f%%\")\nplt.title(\"Distibution of Credit Cards Used\")\nplt.savefig(\"card_distribution.png\")\nplt.show()","183921d4":"ecom[ecom.duplicated(\"credit_card\")]","960c8e41":"cc_purchase = ecom.groupby('cc_provider').sum()","eec2cf42":"plt.figure(figsize=(20,10))\nplt.bar(x=cc_purchase.index, height = cc_purchase.purchase_price)\nplt.title(\"Total Purchase amout amoung Credit Card Providers\")\nplt.savefig(\"card_price.png\")\nplt.show()","77d2d53a":"email_purchase = ecom.groupby('email').sum()","45dd5e0f":"len(email_purchase)","c18d07d5":"top_customer = email_purchase.sort_values('purchase_price', ascending=False)","595a5a8e":"display(top_customer.purchase_price.head(10))","59bf8071":"customer_dup = ecom[ecom.duplicated('email', keep=False)]","a30caece":"customer_dup.shape","7ad9c637":"display(customer_dup['email'])","c6da20c1":"email_split = ecom['email'].str.split('@')\ndomain_list = []\nfor email in email_split:\n    domain_list.append(email[1].split('.')[0])\n    \necom['domain'] = domain_list\ndomain = ecom['domain'].value_counts()","1ab69c8b":"len(domain)","532a4a55":"display(domain.head(10))","ce1999f7":"len(domain[domain == 1])","708daab2":"top3 = domain[:3]\nothers = domain[4:].sum()\nemail_dist = top3.append(pd.Series([others], index=['others']))\ndisplay(email_dist)","3afd5e29":"plt.pie(email_dist, labels=email_dist.index, autopct=\"%1.2f%%\")\nplt.title(\"Email Domians\")\nplt.savefig(\"email_distribution.png\")\nplt.show()","fef45c00":"<a id=\"data_import\"> <\/a>\n# Importing Data & Understanding it","8f413867":"The Pie chart shows the percentage of the\u00a0different purchasing time. By visualising the chart we can easily say\u00a0that the purchasing time of customers is\u00a0slightly more at PM than AM. We can also observe that the customers are\u00a0equally distributed both at AM & PM. By the above analysis we can say that we\u00a0are providing our services at all the time\u00a0irrespective of AM & PM to the customers\u00a0to make them feel comfort and happy to\u00a0shop.","5a1e988c":"The\u00a0Dist\u00a0Plot shows the purchase price\u00a0distribution. Observe the plot in purchase price\u00a0between 90 & 95, we have got highest\u00a0number of orders. For purchase price distribution we\u00a0divided the total prices by 20 bins. We can observe the equally distributed\u00a0orders among all the bins.","1c28b901":"<a id=\"os\"> <\/a>\n# Analysis with respect to Browser & OS","59369faf":"The sub-plot shows\u00a0the Browser count used in different\u00a0Operating\u00a0Systems. Using this data it is easier to\u00a0check\u00a0which\u00a0browser is preferred in\u00a0particular os.","6e9d523a":"The pie chart shows the percentage value of the different Browsers used. Using this data it is easier to deduce which browser is used more and which is used less and make appropriate advances.","57109f41":"This Bar graph gives the over view of total purchase made by our customers using credit cards.\nJCB 16 digits and VISA 16 digits are the credit cards used for the higher amount of purchase where others are on similar range.","3626b319":"Above bar graph gives count of each languages in the data set.\nRussian and German is the most\u00a0used with a count of 1155 each. Chinese is\u00a0 the least used with 1059.","6da1b79c":"<a id=\"data_cleaning\"> <\/a>\n# Data Cleaning","0b6ccf0c":"Shows the different browsers used by\u00a0different languages. Also shows which is the most used browser\u00a0and the less used. Its clear that users use Mozilla more than Opera.","06ecea47":"<a id=\"job\"> <\/a>\n# Analysis with respect to Jobs","843e0f3c":"<a id=\"cards\"> <\/a>\n# Analysis with respect to Credit Cards and Emails","2a3e0873":"The bar graph helps in analysis of\u00a0languages\u00a0whose\u2019s\u00a0sum of purchase\u00a0price is higher and lower. Greek has\u00a0 the most purchased\u00a0German is second Chinese has the least purchased price","9ab7594e":"We have a total of 9954 customers.\u00a0Among those customers, we have 2575 different email domains used.\nNearly 50% of customers use Hotmail, Yahoo, and Gmail. 1977 email domains are used only once by the customers.","6249dab2":"<a id=\"functions\"> <\/a>\n# User Defined Functions","3daf9307":"<a id=\"libraries\"> <\/a>\n# Importing Libraries","06232a46":"## Table of Content\n\n- **[Importing Libraries](#libraries)**\n- **[User Defined Functions](#functions)**\n- **[Importing Data & Understanding it](#data_import)**\n- **[Data Cleaning](#data_cleaning)**\n- **Analysis with respect to**\n    - **[Language](#language)**\n    - **[Browser & OS](#os)**\n    - **[Jobs](#job)**\n    - **[Credit cards & email](#cards)**\n","087924d9":"The\u00a0above pie chart\u00a0shows the different credit cards\u00a0used by our customers. \nWe have 10 different credit card providers among which 1\/3rd\u00a0of customers\u00a0use\u00a0Maestro and Mastercard.","76d12716":"<a id=\"language\"> <\/a>\n# Analysis with respect to Language","d6ad149c":"<h2 style=\"text-align:center;\">Ecommerce Purchases Analysis<\/h2>\n<h3 style=\"text-align:center;\">Ashok, Bharath, Bumika, Cauvery<\/h3>"}}