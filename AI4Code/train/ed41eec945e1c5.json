{"cell_type":{"0387e4d5":"code","6705201e":"code","0753be7c":"code","a5fb7584":"code","090b3ee0":"code","28ed744d":"code","0d4d13d4":"code","8adebda3":"code","b75ac7e8":"code","45015ca7":"code","946b0cb3":"code","82740983":"code","900b4908":"code","29efd3f5":"code","c4c774b8":"code","6a9fa384":"code","2276a5ce":"code","7319f795":"code","3dc183d6":"code","2c391a5d":"code","b26c5468":"code","7d85820f":"code","8ecab221":"code","cb941e10":"code","078fcbc5":"code","d59707cb":"code","000afcaa":"code","4b842699":"code","34ab2ff9":"code","4265d15f":"code","1c98c254":"code","9f2ae4be":"code","4934c70c":"code","4c3381c0":"code","299903e4":"code","dd36c1f8":"code","5cd526aa":"code","e12edcb7":"code","eb989d66":"code","3f1ec021":"code","de42d1a9":"code","e8557bf1":"code","425a12c1":"code","485f9e9c":"code","a3904728":"code","ddf05863":"code","96be5ca1":"code","19eb1fbd":"code","7e11ea81":"code","7732f2da":"code","b9d11bd4":"code","34c8cbd0":"code","91860ce3":"markdown","ad759979":"markdown","bd0dabc3":"markdown","62f14b4c":"markdown","48c8ed3c":"markdown","c7421c29":"markdown","afaef4e6":"markdown","a41fb692":"markdown","568cb32b":"markdown","21802401":"markdown","d1b960a9":"markdown","201f2147":"markdown","7c6a1ee7":"markdown","8f41b91f":"markdown","3f0692e5":"markdown","8ddfcc4d":"markdown","7f9627ff":"markdown","2b292da0":"markdown"},"source":{"0387e4d5":"import numpy as np \nimport pandas as pd\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom nltk.sentiment import SentimentIntensityAnalyzer\nfrom textblob import TextBlob\n%matplotlib inline \nfrom wordcloud import WordCloud, STOPWORDS\nimport warnings\nwarnings.simplefilter(\"ignore\")","6705201e":"tweets_df = pd.read_csv(\"\/kaggle\/input\/all-covid19-vaccines-tweets\/vaccination_all_tweets.csv\")","0753be7c":"print(f\"data shape: {tweets_df.shape}\")","a5fb7584":"tweets_df.info()","090b3ee0":"tweets_df.describe()","28ed744d":"tweets_df.head()","0d4d13d4":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","8adebda3":"missing_data(tweets_df)","b75ac7e8":"def unique_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    uniques = []\n    for col in data.columns:\n        unique = data[col].nunique()\n        uniques.append(unique)\n    tt['Uniques'] = uniques\n    return(np.transpose(tt))","45015ca7":"unique_values(tweets_df)","946b0cb3":"def most_frequent_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    items = []\n    vals = []\n    for col in data.columns:\n        itm = data[col].value_counts().index[0]\n        val = data[col].value_counts().values[0]\n        items.append(itm)\n        vals.append(val)\n    tt['Most frequent item'] = items\n    tt['Frequence'] = vals\n    tt['Percent from total'] = np.round(vals \/ total * 100, 3)\n    return(np.transpose(tt))","82740983":"most_frequent_values(tweets_df)","900b4908":"def plot_count(feature, title, df, size=1, ordered=True):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    if ordered:\n        g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set3')\n    else:\n        g = sns.countplot(df[feature], palette='Set3')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()    ","29efd3f5":"plot_count(\"user_name\", \"User name\", tweets_df,4)","c4c774b8":"plot_count(\"user_location\", \"User location\", tweets_df,4)","6a9fa384":"plot_count(\"source\", \"Source\", tweets_df,4)","2276a5ce":"stopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='white',\n        stopwords=stopwords,\n        max_words=50,\n        max_font_size=40, \n        scale=5,\n        random_state=1\n    ).generate(str(data))\n\n    fig = plt.figure(1, figsize=(10,10))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()","7319f795":"\nfrom wordcloud import WordCloud, STOPWORDS\ndef show_wordcloud(data, title=\"\"):\n    text = \" \".join(t for t in data.dropna())\n    stopwords = set(STOPWORDS)\n    stopwords.update([\"t\", \"co\", \"https\", \"amp\", \"U\"])\n    wordcloud = WordCloud(stopwords=stopwords, scale=4, max_font_size=50, max_words=500,background_color=\"black\").generate(text)\n    fig = plt.figure(1, figsize=(16,16))\n    plt.axis('off')\n    fig.suptitle(title, fontsize=20)\n    fig.subplots_adjust(top=2.3)\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.show()","3dc183d6":"show_wordcloud(tweets_df['text'], title = 'Prevalent words in tweets')","2c391a5d":"india_df = tweets_df.loc[tweets_df.user_location==\"India\"]\nshow_wordcloud(india_df['text'], title = 'Prevalent words in tweets from India')","b26c5468":"us_df = tweets_df.loc[tweets_df.user_location==\"United States\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from US')","7d85820f":"uk_df = tweets_df.loc[tweets_df.user_location==\"United Kingdom\"]\nshow_wordcloud(uk_df['text'], title = 'Prevalent words in tweets from UK')","8ecab221":"ca_df = tweets_df.loc[tweets_df.user_location==\"Canada\"]\nshow_wordcloud(ca_df['text'], title = 'Prevalent words in tweets from Canada')","cb941e10":"def plot_features_distribution(features, title, df, isLog=False):\n    plt.figure(figsize=(12,6))\n    plt.title(title)\n    for feature in features:\n        if(isLog):\n            sns.distplot(np.log1p(df[feature]),kde=True,hist=False, bins=120, label=feature)\n        else:\n            sns.distplot(df[feature],kde=True,hist=False, bins=120, label=feature)\n    plt.xlabel('')\n    plt.legend()\n    plt.show()\n","078fcbc5":"tweets_df['hashtags'] = tweets_df['hashtags'].replace(np.nan, \"['None']\", regex=True)\ntweets_df['hashtags'] = tweets_df['hashtags'].apply(lambda x: x.replace('\\\\N',''))\ntweets_df['hashtags_count'] = tweets_df['hashtags'].apply(lambda x: len(x.split(',')))\nplot_features_distribution(['hashtags_count'], 'Hashtags per tweet (all data)', tweets_df)","d59707cb":"tweets_df['hashtags_individual'] = tweets_df['hashtags'].apply(lambda x: x.split(','))\nfrom itertools import chain\nall_hashtags = set(chain.from_iterable(list(tweets_df['hashtags_individual'])))\nprint(f\"There are totally: {len(all_hashtags)}\")","000afcaa":"tweets_df['hashtags_individual'].head()","4b842699":"country_df = pd.read_csv(\"..\/input\/iso-country-codes-global\/wikipedia-iso-country-codes.csv\")","34ab2ff9":"country_df.columns = [\"country\", \"alpha2\", \"alpha3\", \"numeric\", \"iso\"]\ncountry_df.head()","4265d15f":"tweets_df['country'] = tweets_df['user_location']","1c98c254":"tweets_df = tweets_df.merge(country_df, on=\"country\")","9f2ae4be":"tweets_df.head(10)","4934c70c":"tw_add_df = tweets_df.groupby([\"country\", \"iso\", \"alpha3\"])['text'].count().reset_index()\ntw_add_df.columns = [\"country\", \"iso\", \"alpha3\", \"tweets\"]","4c3381c0":"import plotly.express as px\n\ndef plot_map(dd_df, title):\n    hover_text = []\n    for index, row in dd_df.iterrows():\n        hover_text.append((f\"country: {row['country']}<br>tweets: {row['tweets']}\\\n                          <br>country code: {row['iso']}<br>country alpha3: {row['alpha3']}\"))\n    dd_df['hover_text'] = hover_text\n\n    fig = px.choropleth(dd_df, \n                        locations=\"alpha3\",\n                        hover_name='hover_text',\n                        color=\"tweets\",\n                        projection=\"natural earth\",\n                        color_continuous_scale=px.colors.sequential.Plasma,\n                        width=900, height=700)\n    fig.update_geos(   \n        showcoastlines=True, coastlinecolor=\"DarkBlue\",\n        showland=True, landcolor=\"LightGrey\",\n        showocean=True, oceancolor=\"LightBlue\",\n        showlakes=True, lakecolor=\"Blue\",\n        showrivers=True, rivercolor=\"Blue\",\n        showcountries=True, countrycolor=\"DarkBlue\"\n    )\n    fig.update_layout(title = title, geo_scope=\"world\")\n    fig.show()    ","299903e4":"print(f\"tweets containing country information: {tw_add_df.tweets.sum()}\")\nprint(f\"tweets containing country information; distinct countries: {tw_add_df.country.shape[0]}\")","dd36c1f8":"plot_map(tw_add_df, \"Tweets per country (where country is specified)\")","5cd526aa":"tweets_df['datedt'] = pd.to_datetime(tweets_df['date'])","e12edcb7":"tweets_df['year'] = tweets_df['datedt'].dt.year\ntweets_df['month'] = tweets_df['datedt'].dt.month\ntweets_df['day'] = tweets_df['datedt'].dt.day\ntweets_df['dayofweek'] = tweets_df['datedt'].dt.dayofweek\ntweets_df['hour'] = tweets_df['datedt'].dt.hour\ntweets_df['minute'] = tweets_df['datedt'].dt.minute\ntweets_df['dayofyear'] = tweets_df['datedt'].dt.dayofyear\ntweets_df['date_only'] = tweets_df['datedt'].dt.date","eb989d66":"tweets_agg_df = tweets_df.groupby([\"date_only\"])[\"text\"].count().reset_index()\ntweets_agg_df.columns = [\"date_only\", \"count\"]","3f1ec021":"def plot_time_variation(df, x='date_only', y='count', hue=None, size=1, title=\"\", is_log=False):\n    f, ax = plt.subplots(1,1, figsize=(4*size,3*size))\n    g = sns.lineplot(x=x, y=y, hue=hue, data=df)\n    plt.xticks(rotation=90)\n    if hue:\n        plt.title(f'{y} grouped by {hue} | {title}')\n    else:\n        plt.title(f'{y} | {title}')\n    if(is_log):\n        ax.set(yscale=\"log\")\n    ax.grid(color='black', linestyle='dotted', linewidth=0.75)\n    plt.show() ","de42d1a9":"plot_time_variation(tweets_agg_df, title=\"Number of tweets \/ day of year\",size=3)","e8557bf1":"plot_count(\"dayofweek\", \"tweets \/ day of week\", tweets_df, size=3, ordered=False)","425a12c1":"plot_count(\"dayofyear\", \"tweets \/ day of year\", tweets_df, size=3, ordered=False)","485f9e9c":"plot_count(\"date_only\", \"tweets \/ date\", tweets_df,size=4, ordered=False)","a3904728":"plot_count(\"hour\", \"tweets \/ hour\", tweets_df,size=4, ordered=False)","ddf05863":"plot_count(\"minute\", \"tweets \/ minute\", tweets_df,size=5, ordered=False)","96be5ca1":"# borrowed from https:\/\/www.kaggle.com\/pashupatigupta\/sentiments-transformer-vader-embedding-bert\nsia = SentimentIntensityAnalyzer()\ndef find_sentiment(post):\n    if sia.polarity_scores(post)[\"compound\"] > 0:\n        return \"Positive\"\n    elif sia.polarity_scores(post)[\"compound\"] < 0:\n        return \"Negative\"\n    else:\n        return \"Neutral\" ","19eb1fbd":"def plot_sentiment(df, feature, title):\n    counts = df[feature].value_counts()\n    percent = counts\/sum(counts)\n\n    fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12, 5))\n\n    counts.plot(kind='bar', ax=ax1, color='green')\n    percent.plot(kind='bar', ax=ax2, color='blue')\n    ax1.set_ylabel(f'Counts : {title} sentiments', size=12)\n    ax2.set_ylabel(f'Percentage : {title} sentiments', size=12)\n    plt.suptitle(f\"Sentiment analysis: {title}\")\n    plt.tight_layout()\n    plt.show()","7e11ea81":"tweets_df['sentiment'] = tweets_df['text'].apply(lambda x: find_sentiment(x))\nplot_sentiment(tweets_df, 'sentiment', 'Text')","7732f2da":"show_wordcloud(tweets_df.loc[tweets_df['sentiment']=='Positive', 'text'], title = 'Prevalent words in tweets (Positive sentiment)')","b9d11bd4":"show_wordcloud(tweets_df.loc[tweets_df['sentiment']=='Negative', 'text'], title = 'Prevalent words in tweets (Negative sentiment)')","34c8cbd0":"show_wordcloud(tweets_df.loc[tweets_df['sentiment']=='Neutral', 'text'], title = 'Prevalent words in tweets (Neutral sentiment)')","91860ce3":"### Extract date and time features","ad759979":"### Text wordcloauds","bd0dabc3":"### Extract country from location\n\nWe load the country list from the additional database we added to this Notebook. We also create a `country` column in the original dataset.","62f14b4c":"## Load data","48c8ed3c":"### Unique values","c7421c29":"### Time variation","afaef4e6":"## Sentiment analysis","a41fb692":"### Tweet source","568cb32b":"### Missing data","21802401":"### Hashtags analysis","d1b960a9":"We merge the countries dataset with the tweets dataset.","201f2147":"<center><h1>Explore Vaccines Tweets<\/h1><\/center>\n\n\n<center><img src=\"https:\/\/images.unsplash.com\/photo-1605377347958-e8bd4c00ba1d?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=700&q=80\" width=400><img><\/center>\n\n# Introduction\n\n\nThe Dataset we are using here is collected using Twitter API, **tweepy** and Python package.\n\nThe following vaccines are included:  \n* Pfizer\/BioNTech;   \n* Sinopharm;  \n* Sinovac;  \n* Moderna;  \n* Oxford\/AstraZeneca;   \n* Covaxin;   \n* Sputnik V.  \n\n","7c6a1ee7":"# Data preparation\n\n## Load packages","8f41b91f":"# Data exploration\n\n\n## Glimpse the data","3f0692e5":"## Visualize the data distribution","8ddfcc4d":"### User name","7f9627ff":"### User location","2b292da0":"### Most frequent values"}}