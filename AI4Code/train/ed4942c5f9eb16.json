{"cell_type":{"dba3214f":"code","73128ffe":"code","7304ee4e":"code","c6446d47":"code","26ec23e0":"code","ae8459e7":"code","7345c5ad":"code","c78ab9e9":"code","3e930ce9":"code","83be165c":"code","10b22f24":"code","88b77789":"code","0521fde5":"code","80d9a116":"code","1cfd59e7":"code","43081548":"code","644f0497":"code","ce0d14a4":"code","d29b026a":"code","60897696":"code","d1cc7577":"code","7b3c917d":"code","0700b989":"code","ce7b2546":"code","166b57ca":"code","414756ce":"code","d57a1b18":"code","86a9f07f":"code","636b693e":"code","1f79f513":"code","10b25eb9":"code","96e0e249":"code","54199c2e":"code","bc17e035":"code","4b96a48b":"code","a84ebd22":"code","064d3066":"code","ec8778c1":"code","df6076e9":"code","59b9e1da":"code","5e72fd36":"markdown","56d7959a":"markdown","d592fd3f":"markdown","451f1501":"markdown","b078b527":"markdown","770b54df":"markdown","9d0dffae":"markdown","5b9de85f":"markdown","b3926b29":"markdown","4b7c3234":"markdown","f6d77f76":"markdown","9ae2fb80":"markdown","8e7468ad":"markdown","35ed3b27":"markdown","5930c131":"markdown","9eefdab1":"markdown","46a63ef2":"markdown","53958f10":"markdown","86ae8f3e":"markdown","3b8fd7e1":"markdown"},"source":{"dba3214f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom ipywidgets import interactive, interact\nfrom IPython.display import display\nfrom ipywidgets import widgets\nfrom scipy.ndimage import gaussian_gradient_magnitude\nimport tabulate\n# Any results you write to the current directory are saved as output.\n\nimport os\n\nos.listdir('..\/input\/death-metal\/')","73128ffe":"import matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\n# import mpld3\n# mpld3.enable_notebook()\n# import plotly.express as px\nsns.set()\nmpl.rcParams['figure.figsize'] = (40, 10)","7304ee4e":"reviews = pd.read_csv('..\/input\/death-metal\/reviews.csv')\nbands = pd.read_csv('..\/input\/death-metal\/bands.csv')\nalbums = pd.read_csv('..\/input\/death-metal\/albums.csv')","c6446d47":"reviews.head()","26ec23e0":"bands.head()","ae8459e7":"albums.head()","7345c5ad":"tick_font_dict = {'fontsize' : 15}\nlabel_font_dict = {\"fontsize\" : 20}\ntitle_font_dict = {'fontsize': 30}","c78ab9e9":"print (f'First time death-metal band formed in: {bands[\"formed_in\"].min()}\\nName: {bands.loc[bands.formed_in == 1977, \"name\"].values[0]}')","3e930ce9":"print ('Albums created by \"Satan\\'s host\": ')\nprint('\\t' + '\\n\\t'.join(albums.merge(bands, left_on = 'band', right_on = 'id').query(\"formed_in == 1977\")['title'].values))","83be165c":"satan_album = albums.merge(right = bands, left_on = 'band', right_on = 'id').query('formed_in == 1977')[['id_x', 'title']]\nsatan_review = satan_album.merge(right = reviews, left_on = 'id_x', right_on = 'album')\ngroup = satan_review.groupby('title_x').agg({\"title_x\": {\"title_count\": \"count\"}})\n\nfig = plt.figure(figsize = (30, 10))\ngroup = group.reset_index()\ngroup.columns = ['_'.join(col) for col in group.columns]\ngroup.columns = ['title_x', 'title_count']\n# group.plot(x = 'title_x', y = 'title_count', figsize = (30, 10))\nax = sns.lineplot(x = 'title_x', y = 'title_count', data = group, alpha = 0.8)\nsns.scatterplot(x = 'title_x', y = 'title_count', data = group, alpha = 0.5, palette = 'red')\n_= ax.set_xticklabels(group['title_x'].values, rotation = 20, fontdict =tick_font_dict)\n_ = ax.set_yticklabels(range(0, 7), fontdict= tick_font_dict )\n_ = ax.set_xlabel(\"Album Title\", fontdict = label_font_dict)\n_ = ax.set_ylabel(\"Review Counts\", fontdict = label_font_dict)\n_ = ax.set_title (\"Album Review Count for Satan's Host\", fontdict = title_font_dict)","10b22f24":"ax = bands.groupby('formed_in')['id'].count().plot(rot = 30, marker = 'o', markersize = 5, figsize = (30, 10))\nax.set_xlabel('Years', fontdict = label_font_dict)\nax.set_ylabel('# of bands', fontdict = label_font_dict)\n_ = ax.set_xticks(range(1976, 2018))#fontdict\n_ = ax.set_xticklabels(range(1976, 2018), fontdict = tick_font_dict)\n_ = ax.set_yticks(range(0, 2200, 100))\n_ = ax.set_yticklabels(range(0, 2200, 100), fontdict = tick_font_dict)\n_ = ax.set_title(\"Count of bands formed every year\", fontdict = title_font_dict)","88b77789":"band_names = bands.loc[:, ['id', 'name']]\nalbum_band_names = albums.merge(band_names, left_on = 'band', right_on = 'id').loc[:, ['id_x', 'name', 'year']]\nreview_album_name = reviews.merge(album_band_names, left_on = 'album', right_on = 'id_x')\n# review_album_name.head()\nreviews_overtime = review_album_name.groupby(['year', 'name']).agg({'score': 'sum'}).reset_index()\nindex = reviews_overtime.groupby('year').agg({'score': 'idxmax'})\nfiltered_bands = reviews_overtime.loc[index.loc[:,'score'].values]\n\nplt.figure(figsize=(30, 10))\nbar = sns.barplot(x = filtered_bands.loc[:, 'year'], y = filtered_bands.loc[:, 'score'])\nfor p, name in zip(bar.patches, filtered_bands.loc[:, 'name']):\n        _x = p.get_x() + p.get_width() - 0.1\n        _y = p.get_y() + p.get_height() + 1\n        value = name\n        bar.text(_x, _y, value, ha=\"center\", rotation = 80, fontdict = {\"fontsize\": 20})","0521fde5":"## Highest bands formed in country\ncountry_wise = bands.groupby('country').agg({'country': {'count'}}).reset_index()\ncountry_wise.columns = ['_'.join(col) for col in country_wise.columns]\ntop5_country = country_wise.sort_values('country_count', ascending = False).iloc[:10]\nprint (\"Top 10 country of highest bands formation: \")\nprint (\"{:<30} {}\".format('Country name', '# of bands'))\nfor country, count in top5_country.values:\n    print ('{:<30} {}'.format(country, count))","80d9a116":"## All Death metal bands form in India\nplt.figure(figsize = (30, 10))\nindian_bands = bands.loc[bands.country == 'India', ['name', 'formed_in', 'country']]\nindia_band_count = indian_bands.groupby('formed_in').agg({\"formed_in\": {'count'}}).reset_index()\nindia_band_count.columns = ['_'.join(col) for col in india_band_count.columns]\nax = sns.barplot(x = 'formed_in_', y = 'formed_in_count', data = india_band_count)\n_ = ax.set_xticklabels(india_band_count.formed_in_, rotation = 30)\nax.set_xlabel('Year Formed', fontdict = label_font_dict)\nax.set_ylabel(\"# of bands\", fontdict = label_font_dict)\nax.set_title(\"Bands formed in India over time\", fontdict = title_font_dict)","1cfd59e7":"## Country contribute more in bands\nall_country = bands.groupby('country').count()['id'].sort_values()\ncountry_dom = all_country.tail(10)\ncountry_dom['others'] = all_country.sum() - country_dom.sum()\nplt.figure(figsize = (10, 10))\n_ = plt.pie(x = country_dom.values, labels = country_dom.index,autopct='%1.1f%%', shadow=True)\n_= plt.axis('equal')","43081548":"plt.figure(figsize = (35, 10))\nax = sns.scatterplot(x = 'country_', y = 'country_count', data = country_wise, hue = 'country_', s = 90)\nax.set_xticklabels(country_wise.loc[:, 'country_'], rotation = (90), fontsize = 10, va='top', ha='center',)\nax.set_xlabel('Country Names', fontsize = 20)\nax.set_ylabel(\"Band Cound\", fontsize = 20)\nax.set_title(\"Band Counts over Country\", fontsize = 30)\nax.legend().remove()","644f0497":"## After removing outliers\nplt.figure(figsize = (20, 7))\ncountry_wise1 = country_wise[country_wise.country_count < 1000]\n\nax = sns.scatterplot(x = 'country_', y = 'country_count', data = country_wise1, hue = 'country_', s = 90)\nax.set_xticklabels(country_wise.loc[:, 'country_'], rotation = 90, fontsize = 10)\n\nax.set_xlabel('Country Names', fontsize = 20)\nax.set_ylabel(\"Band Cound\", fontsize = 20)\nax.set_title(\"Band Counts over Country\", fontsize = 30)\nax.legend().remove()\n","ce0d14a4":"year_country_group = bands.groupby(['formed_in', 'country']).agg({\"country\": {'count'}}).reset_index()\nyear_country_group.columns = [''.join(col) for col in year_country_group.columns]","d29b026a":"def show_table(year, country):\n    \n    if (year == 1975):\n        figure = plt.figure(figsize = (15, 6))\n        data = year_country_group.query('country == @country')\n        ax = sns.scatterplot(x = 'formed_in', y = 'countrycount', data = data, marker = 'o', s = 120, hue = 'formed_in')\n        _ = ax.set_xlabel(\"Years \", fontdict = label_font_dict)\n        _ = ax.set_title(f\"Bands formed in {country}\", fontdict = title_font_dict)\n        ax.legend().remove()\n        return ax\n    else:\n        data = year_country_group.query('formed_in == @year and country == @country')\n        if (data.shape == (0, 3)):\n            display(f'Country {country} has no bands formed in year {year}')\n        else:\n            print(f'Country {country} has {data.iloc[0].countrycount} bands formed in year {year}')\n            print('Name of Bands: ')\n            band_names = bands.query('formed_in == @year and country == @country').name.values\n            print (tabulate.tabulate(band_names[:, np.newaxis], tablefmt = 'fancy_grid', headers = ['Band\\'s Name']))","60897696":"year = widgets.Dropdown(\n    options = list(range(1975, 2017)), \n    value = 1975, \n    description = 'Year: ', \n    disabled = False\n)\n\ncountry = widgets.Dropdown(\n    options = sorted(bands.country.unique()), \n    description = 'Country: ',\n    value = 'United States'\n)\nw = interactive(show_table, year = year, country = country)\nw","d1cc7577":"albums.head()","7b3c917d":"album_year = albums.groupby('year').agg({\"year\": {\"count\"}}).reset_index()\nalbum_year.columns = [''.join(col) for col in album_year.columns]\nband_year = bands.groupby(\"formed_in\").agg({\"formed_in\": {\"count\"}}).reset_index()\nband_year.columns = [''.join(col) for col in band_year.columns]","0700b989":"plt.figure(figsize = (10, 6))\nplt.plot(band_year.formed_in, band_year.formed_incount, '-o')\nplt.plot(album_year.year, album_year.yearcount, '-^')\nplt.xlabel(\"Year\")\nplt.title(\"Album and Band Trade off\")\nplt.legend(['Bands', 'Albums'])","ce7b2546":"band_count = bands.groupby('formed_in')['id'].count().cumsum()\nalbum_count = albums.groupby('year')['id'].count().cumsum()\n\nfig = plt.figure(figsize = (10, 6))\n# plt.plot(band_count.index, band_count, '-o', )\n# plt.plot(album_count, '-o')\n# dir(fig)\n\nband_count.plot(marker = 'o')\nax = album_count.plot(marker = 'o')\nax.set_xlabel(\"Year\", fontdict = label_font_dict)\nax.legend(['# of Band', '# of Album'], loc = 'best')\n_ = ax.set_title(\"Album and Bands over years\", fontdict = title_font_dict)","166b57ca":"country = widgets.Dropdown(options = sorted(bands.country.unique()), \n                          value = 'India',\n                          description= \"Country: \")\n\n@interact(country = country)\ndef show_country_plot(country):\n    band_data = bands.query('country == @country').loc[:, ['id', 'formed_in', 'country']]\n    album_data = albums.loc[albums.band.isin(band_data.id), ['id', 'year']]\n    plt.figure(figsize = (10, 5))\n    band_count = band_data.groupby('formed_in')['id'].count().cumsum()\n    album_count = album_data.groupby('year')['id'].count().cumsum()\n    ax = band_count.plot(marker = 'o', markersize = 5, alpha = 0.8)\n    album_count.plot(marker = 'o', markersize = 5, alpha = 0.8)\n    ax.legend(['Band Count', 'Album Count'], loc = 'best')","414756ce":"# highest number of albums released by country\n\nband_id = bands.loc[:, ['country', 'id']]\n# albums.merge(band_id, left_on = 'band', right_on='id', how  = 'inner')\ncountry_album = pd.merge(left = band_id, right = albums, how = 'inner', left_on = 'id', right_on = 'band').loc[:, ['country', 'year', 'id']]\ncountry_album = country_album.groupby(['year', 'country']).size().reset_index()\nindex = country_album.groupby(['year']).agg({0: np.argmax}).reset_index().loc[:, 0]\ncountry_album = country_album.iloc[index]","d57a1b18":"plt.figure(figsize = (15, 6))\nax = sns.barplot(x = country_album.year, y = country_album.loc[:, 0])\nax.set_xticklabels(country_album.year, rotation = 45)\nax.set_xlabel(\"Year\", fontdict = label_font_dict)\nax.set_ylabel(\"Album released by country\", fontdict = label_font_dict)\nax.set_title(\"Max Albums released by country\", fontdict = title_font_dict)\nfor p, name in zip(ax.patches, country_album.country):\n        _x = p.get_x() + p.get_width() - 0.1\n        _y = p.get_y() + p.get_height() + 1\n        value = name\n        ax.text(_x, _y, value, ha=\"center\", rotation = 80, fontdict = {\"fontsize\": 10})","86a9f07f":"album_review = reviews.groupby(['album']).agg({\"score\": {\"sum\"}}).reset_index().sort_values(('score', 'sum'))\nalbum_review = album_review.merge(albums, left_on = 'album', right_on = 'id').loc[:, ['title', ('score', 'sum')]].reset_index().tail(10)\n\nax = sns.barplot(x = ('score', 'sum'), y = 'title', data = album_review, )\nax.set_xlabel('Score')\nax.set_ylabel(\"Album Name\")\nax.set_title('Top 10 Most Liked Albums')","636b693e":"import re\nremove_words = re.compile(r'\\b(\\w*later\\w*)\\b|\\b(\\w*early\\w*)\\b|\\b(\\w*present\\w*)\\b|\\b(\\w*metal\\w*)\\b|\\b(\\w*with\\w*)\\b')\nremove_punct = re.compile(r'[\\(\\)\\d\\';&^%$#@!\"-]')\nremove_mul_space = re.compile(r'\\s+')","1f79f513":"genre = bands.genre.str.lower().map(lambda x: remove_words.sub('', x))\ngenre = genre.map(lambda x: remove_punct.sub(' ', x))\ngenre_df = genre.str.split(r'[|\/]', expand = True)\n","10b25eb9":"genre = pd.concat([genre_df.loc[:, col] for col in genre_df.columns])\ngenre = genre.str.strip().apply(lambda x: None if (x == '') else x)\ngenre = genre.dropna(axis = 0)\ngenre = genre.apply(lambda x: remove_mul_space.sub(' ', x))","96e0e249":"print (f\"Total unique genre in Death Metal Genre: {genre.unique().shape[0]}\")","54199c2e":"print (\"List of all Death Metal Genre: \")\nprint('\\n'.join(genre.unique()))","bc17e035":"genre_df = pd.DataFrame(genre, columns = ['genre'])\ngenre_count = genre_df.groupby('genre').agg({'genre': {\"count\": 'count'}}).reset_index()\ngenre_count.columns = ['_'.join(col) for col in genre_count.columns]","4b96a48b":"genre = bands.genre.map(lambda x: remove_punct.sub(' ', x))\ngenre_df = genre.str.split(r'[|\/]', expand = True)\ngenre = pd.concat([genre_df.loc[:, col] for col in genre_df.columns])\ngenre = genre.str.strip().apply(lambda x: None if (x == '') else x)\ngenre = genre.dropna(axis = 0)\ngenre = genre.apply(lambda x: remove_mul_space.sub(' ', x))","a84ebd22":"import requests\nfrom io import BytesIO\nfrom PIL import Image\nurlq = 'https:\/\/free4kwallpapers.com\/uploads\/originals\/2018\/06\/14\/colorful-skull-wallpaper.jpg'\nred = 'https:\/\/free4kwallpapers.com\/uploads\/originals\/2018\/03\/14\/red-skull-ascii-wallpaper.jpg'\nreq = requests.get(urlq)\nimg = Image.open(BytesIO(req.content))","064d3066":"img_array = np.array(img)\nimg_array = img_array[::3, ::3]\nimg_mask = img_array.copy()\nimg_mask[img_mask.sum(axis=2) == 0] = 255\nedges = np.mean([gaussian_gradient_magnitude(img_array[:, :, i] \/ 255., 2) for i in range(3)], axis=0)\nimg_mask[edges > .08] = 0","ec8778c1":"import wordcloud as wc\n\nplt.figure(figsize = (20, 10))\n\ncloud = wc.WordCloud(width = 1280, height = 720, max_words = 1000, mask = img_mask, background_color='black').generate(' '.join(genre.values))\nimg_color = wc.ImageColorGenerator(img_mask)\ncloud.recolor(color_func = img_color)\nplt.grid(False)\nplt.imshow(cloud, interpolation='bilinear')","df6076e9":"genre_data = bands.groupby(\"genre\").count()['id'].sort_values()\n\ngenre_val = genre_data.tail(10)\ngenre_val['others'] = genre_data.sum() - genre_val.sum()\ngenre_val","59b9e1da":"plt.figure(figsize=  (10, 5))\nplt.pie(x = genre_val.values, labels = genre_val.index);","5e72fd36":"Insight\n- After year 2015 album release start decreasing \n- ","56d7959a":"### Country wise bands and album release","d592fd3f":"A big part of all Death Metal bands community is contributed by United States","451f1501":"Countries from which bands formed","b078b527":"Top 10 Most liked Albums","770b54df":"#### From the chart we can tell Most of bands formed in 2001 - 2012","9d0dffae":"#### Album Release over time","5b9de85f":"- Highest Bands formed in India in year 2009","b3926b29":"Bands formed over time","4b7c3234":"Insights\n- Every year Maximum Albums are released by United State.\n- Heavy Metal is more popular in years between 2005 - 2016\n","f6d77f76":"Insight \n- **United Steate** holding 20% of all bands","9ae2fb80":"Insight\n- There are more bands formed than album release","8e7468ad":"## Band Exploration\n","35ed3b27":"## Genre Exploration","5930c131":"Number of reviews on the albums created by Satan's Host","9eefdab1":"### Year and Country wise count","46a63ef2":"Every years top scored bands","53958f10":"## Album Exploration\n","86ae8f3e":"Different Type of Genre","3b8fd7e1":"After removing top 10 countries as outliers"}}