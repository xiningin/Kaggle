{"cell_type":{"4ac39600":"code","f59e8e07":"code","5541d124":"code","0d1883c6":"code","d740232d":"code","09bc9d65":"code","b4ec9059":"code","90d8e9ee":"code","ab5e3c72":"code","55aa8323":"markdown","5826766a":"markdown","c860ea8e":"markdown","816b06b1":"markdown","0c9d4017":"markdown","a033fea5":"markdown","2654cf60":"markdown"},"source":{"4ac39600":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f59e8e07":"train = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nsub_df = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")","5541d124":"import numpy as np \nimport pandas as pd \nimport os\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold, KFold, GridSearchCV\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import SVC\nfrom sklearn import linear_model\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score, confusion_matrix, f1_score","0d1883c6":"X = train[\"text\"]\ny = train[\"target\"]\nX_test = test[\"text\"]\nX.shape, y.shape, X_test.shape","d740232d":"X_for_tf_idf = pd.concat([X, X_test])\n#tfidf = TfidfVectorizer()\ntfidf = TfidfVectorizer(stop_words = 'english')\ntfidf.fit(X_for_tf_idf)\nX = tfidf.transform(X)\nX_test = tfidf.transform(X_test)\ndel X_for_tf_idf","09bc9d65":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=42)","b4ec9059":"parameters = { \n    'gamma': [0.7, 1, 'auto', 'scale']\n}\nsvc_model = GridSearchCV(SVC(kernel='rbf'), parameters, cv=4, n_jobs=-1).fit(X_train, y_train)\n\ny_val_pred = svc_model.predict(X_val)\nprint (accuracy_score(y_val, y_val_pred), f1_score(y_val, y_val_pred))\n\ny_test_pred = svc_model.predict(X_test)\ny_test_pred\n\nsub_df[\"target\"] = y_test_pred\nsub_df.to_csv(\"submission_svc.csv\",index=False)","90d8e9ee":"nb_model = GaussianNB()\nnb_model.fit(X_train.todense(), y_train)\ny_val_pred = nb_model.predict(X_val.todense())\nprint ( accuracy_score(y_val, y_val_pred), f1_score(y_val, y_val_pred) )\n\ny_test_pred = nb_model.predict(X_test.todense())\ny_test_pred\n\nsub_df[\"target\"] = y_test_pred\nsub_df.to_csv(\"submission_nb.csv\",index=False)","ab5e3c72":"lin_model = linear_model.LogisticRegression()\nlin_model.fit(X_train, y_train)\ny_val_pred = lin_model.predict(X_val)\nprint (accuracy_score(y_val, y_val_pred), f1_score(y_val, y_val_pred))\n\ny_test_pred = lin_model.predict(X_test)\ny_test_pred\n\nsub_df[\"target\"] = y_test_pred\nsub_df.to_csv(\"submission_lin.csv\",index=False)","55aa8323":"## Linear","5826766a":"### Use GaussianNB","c860ea8e":"### Load Data","816b06b1":"### Split Data","0c9d4017":"## SVC","a033fea5":"### TFIDF","2654cf60":"## GaussianNB"}}