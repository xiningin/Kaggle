{"cell_type":{"937e0f4e":"code","3e5777b1":"code","7a70da7a":"code","973f5418":"code","aca6ba52":"code","acc01430":"code","a3897c3e":"code","2cde51f9":"code","707840bb":"code","abda3f34":"code","5b779716":"code","93da961c":"code","1c8dc339":"code","dc83668e":"code","5c5f15df":"code","364bb547":"code","57aadcd2":"code","97909474":"code","c86d3473":"code","23e1546b":"code","c3f76e91":"code","75d57cd2":"code","efabca3d":"code","427c2168":"code","dc0dae7e":"code","d69d524d":"code","d385baab":"code","fa66b910":"code","aa2bb747":"code","661812af":"code","2837f0ed":"code","4c56ce6e":"code","953f5782":"code","6267e2fd":"code","305aa0c2":"code","f86167d6":"code","1e92801c":"code","b4c7e13c":"code","2c7a95c3":"code","08b9de67":"code","2721fd50":"markdown","2aaf1ad3":"markdown","d553aa20":"markdown","5d2da1c5":"markdown","a0c2e5f3":"markdown","5aca77ac":"markdown","4589d02d":"markdown","b384c157":"markdown","f8f86490":"markdown","f54751a5":"markdown","16732fb2":"markdown","68f51728":"markdown","a385704f":"markdown","44655aad":"markdown","8827d8a0":"markdown","34a0fbc4":"markdown","c7a0fe50":"markdown","34cc7796":"markdown","ed1071ec":"markdown","9a9665dc":"markdown","833d5f19":"markdown","6fb642d1":"markdown","3c533bc0":"markdown","ab407c67":"markdown","dac9032c":"markdown","9ffcf4ca":"markdown","e0a84f94":"markdown","6dfedb34":"markdown","7216bada":"markdown","04ebb4af":"markdown"},"source":{"937e0f4e":"# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport seaborn as sns\nfrom plotnine import *\nimport plotly.express as px\nimport folium\n\n# color pallette\ncdr = ['#393e46', '#ff2e63', '#30e3ca'] # grey - red - blue\nidr = ['#f8b400', '#ff2e63', '#30e3ca'] # yellow - red - blue","3e5777b1":"# !ls -lt ..\/input\/corona-virus-report","7a70da7a":"# importing datasets\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.head()","973f5418":"# dataframe info\n# full_table.info()\n\n# checking for missing value\n# full_table.isna().sum()","aca6ba52":"# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values with NA\nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('NA')","acc01430":"# cases in the Diamond Princess cruise ship\nship = full_table[full_table['Province\/State']=='Diamond Princess cruise ship']\nfull_table = full_table[full_table['Province\/State']!='Diamond Princess cruise ship']\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()","a3897c3e":"temp = full_latest.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered'].max()\ntemp.style.background_gradient(cmap='Pastel1_r')","2cde51f9":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum()\ntemp = temp.reset_index()\ntemp = temp.sort_values('Date', ascending=False)\ntemp.head(1).style.background_gradient(cmap='Pastel1')","707840bb":"temp_f = full_latest_grouped[['Country\/Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp_f = temp_f.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Pastel1_r')","abda3f34":"# Countries with deaths reported\ntemp_flg = full_latest_grouped[['Country\/Region', 'Deaths']]\ntemp_flg = temp_flg.sort_values(by='Deaths', ascending=False)\ntemp_flg = temp_flg.reset_index(drop=True)\ntemp_flg = temp_flg[temp_flg['Deaths']>0]\ntemp_flg.style.background_gradient(cmap='Reds')","5b779716":"# Countries with no cases recovered\ntemp = full_latest_grouped[full_latest_grouped['Recovered']==0]\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Reds')","93da961c":"# Countries with all cases died\ntemp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Deaths']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Reds')","1c8dc339":"# Countries with all the cases recovered\ntemp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Recovered']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","dc83668e":"# Countries with no affected case anymore\ntemp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Deaths']+\n                          row_latest_grouped['Recovered']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","5c5f15df":"temp_f = china_latest_grouped[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp_f = temp_f.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Pastel1_r')","364bb547":"# Provinces with no cases recovered\ntemp = china_latest_grouped[china_latest_grouped['Recovered']==0]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1_r')","57aadcd2":"# Provinces with all cases died\ntemp = china_latest_grouped[china_latest_grouped['Confirmed']==\n                          china_latest_grouped['Deaths']]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","97909474":"# Provinces with all the cases recovered\ntemp = china_latest_grouped[china_latest_grouped['Confirmed']==\n                          china_latest_grouped['Recovered']]\ntemp = temp[['Province\/State', 'Confirmed', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","c86d3473":"# Provinces with no affected case anymore\ntemp = china_latest_grouped[china_latest_grouped['Confirmed']==\n                          china_latest_grouped['Deaths']+\n                          china_latest_grouped['Recovered']]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","23e1546b":"fig = px.bar(full_latest_grouped[['Country\/Region', 'Confirmed']].sort_values('Confirmed', ascending=False), \n             y=\"Confirmed\", x=\"Country\/Region\", color='Country\/Region', \n             log_y=True, template='ggplot2', title='Confirmed Cases')\nfig.show()\n\nfig = px.bar(full_latest_grouped[['Country\/Region', 'Deaths']].sort_values('Deaths', ascending=False), \n             y=\"Deaths\", x=\"Country\/Region\", color='Country\/Region', title='Deaths',\n             log_y=True, template='ggplot2')\nfig.show()","c3f76e91":"# World wide\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\nfor i in range(0, len(full_latest)):\n    folium.Circle(\n        location=[full_latest.iloc[i]['Lat'], full_latest.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(full_latest.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(full_latest.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(full_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(full_latest.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(full_latest.iloc[i]['Recovered']),\n        radius=int(full_latest.iloc[i]['Confirmed'])).add_to(m)\nm","75d57cd2":"# China \n\nm = folium.Map(location=[30, 116], tiles='cartodbpositron',\n               min_zoom=2, max_zoom=5, zoom_start=3)\n\nfor i in range(0, len(china_latest)):\n    folium.Circle(\n        location=[china_latest.iloc[i]['Lat'], china_latest.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(china_latest.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(china_latest.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(china_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(china_latest.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(china_latest.iloc[i]['Recovered']),\n        radius=int(china_latest.iloc[i]['Confirmed'])**1).add_to(m)\nm","efabca3d":"fig = px.choropleth(full_latest_grouped, locations=\"Country\/Region\", \n                    locationmode='country names', color=\"Confirmed\", \n                    hover_name=\"Country\/Region\", range_color=[1,2000], \n                    color_continuous_scale=\"aggrnyl\", \n                    title='Countries with Confirmed Cases')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()\n\n# ------------------------------------------------------------------------\n\nfig = px.choropleth(full_latest_grouped[full_latest_grouped['Deaths']>0], \n                    locations=\"Country\/Region\", locationmode='country names',\n                    color=\"Deaths\", hover_name=\"Country\/Region\", \n                    range_color=[1,50], color_continuous_scale=\"agsunset\",\n                    title='Countries with Deaths Reported')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","427c2168":"formated_gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf = formated_gdf[formated_gdf['Country\/Region']!='China']\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['size'] = formated_gdf['Confirmed'].pow(0.5)\n\nfig = px.scatter_geo(formated_gdf[formated_gdf['Country\/Region']!='China'], \n                     locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [0, max(formated_gdf['Confirmed'])+2], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='\u4e2d\u56fd\u306e\u5916\u3067\u306e\u6642\u7cfb\u5217\u3054\u3068\u306e\u5e83\u304c\u308a\u5177\u5408\u306b\u3064\u3044\u3066')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()\n\n# -----------------------------------------------------------------------------------\n\nchina_map = china.groupby(['Date', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', \n                                                      'Lat', 'Long'].max()\nchina_map = china_map.reset_index()\nchina_map['size'] = china_map['Confirmed'].pow(0.5)\nchina_map['Date'] = pd.to_datetime(china_map['Date'])\nchina_map['Date'] = china_map['Date'].dt.strftime('%m\/%d\/%Y')\nchina_map.head()\n\nfig = px.scatter_geo(china_map, lat='Lat', lon='Long', scope='asia',\n                     color=\"size\", size='size', hover_name='Province\/State', \n                     hover_data=['Confirmed', 'Deaths', 'Recovered'],\n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='\u4e2d\u56fd\u56fd\u5185\u3067\u306e\u6642\u7cfb\u5217\u3054\u3068\u306e\u5e83\u304c\u308a\u306b\u3064\u3044\u3066')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","dc0dae7e":"c_spread = china[china['Confirmed']!=0].groupby('Date')['Province\/State'].unique().apply(len)\nc_spread = pd.DataFrame(c_spread).reset_index()\n\nfig = px.line(c_spread, x='Date', y='Province\/State', \n              title='\u30b3\u30ed\u30ca\u30a6\u30a3\u30eb\u30b9\u5e83\u307e\u3063\u305f\u4e2d\u56fd\u306e\u5dde\/\u5dde\/\u5730\u57df\u306e\u6642\u7cfb\u5217\u3054\u3068\u306e\u6570',\n             color_discrete_sequence=cdr)\nfig.show()\n\n# ------------------------------------------------------------------------------------------\n\nspread = full_table[full_table['Confirmed']!=0].groupby('Date')['Country\/Region'].unique().apply(len)\nspread = pd.DataFrame(spread).reset_index()\n\nfig = px.line(spread, x='Date', y='Country\/Region', \n              title='\u30b3\u30ed\u30ca\u30a6\u30a3\u30eb\u30b9\u304c\u6642\u9593\u3068\u3068\u3082\u306b\u5e83\u304c\u3063\u305f\u56fd\/\u5730\u57df\u306e\u6570',\n             color_discrete_sequence=cdr)\nfig.show()","d69d524d":"# Cases in the Diamond Princess Cruise Ship\ntemp = ship.sort_values(by='Date', ascending=False).head(1)\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']].reset_index(drop=True)\ntemp.style.background_gradient(cmap='rainbow')","d385baab":"temp = ship[ship['Date'] == max(ship['Date'])].reset_index()\n\nm = folium.Map(location=[35.4437, 139.638], tiles='cartodbpositron',\n               min_zoom=8, max_zoom=12, zoom_start=10)\n\nfolium.Circle(location=[temp.iloc[0]['Lat'], temp.iloc[0]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Ship : '+str(temp.iloc[0]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[0]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[0]['Deaths'])+\n                    '<li><bold>Recovered : '+str(temp.iloc[0]['Recovered']),\n        radius=int(temp.iloc[0]['Confirmed'])**1).add_to(m)\nm","fa66b910":"temp = full_table.groupby(['Country\/Region', 'Date'])['Confirmed', 'Deaths', 'Recovered'].sum()\ntemp = temp.reset_index()\n# temp.head()\n\nfig = px.bar(temp, x=\"Date\", y=\"Confirmed\", color='Country\/Region', orientation='v', height=600,\n             title='\u78ba\u8a8d\u3055\u308c\u305f\u6570', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()\n\nfig = px.bar(temp, x=\"Date\", y=\"Deaths\", color='Country\/Region', orientation='v', height=600,\n             title='\u6b7b\u8005\u6570', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","aa2bb747":"gdf = gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\ngdf = gdf.reset_index()\n\ntemp = gdf[gdf['Country\/Region']=='China'].reset_index()\ntemp = temp.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', facet_col=\"Case\",\n            title='Cases in China', color_discrete_sequence=cdr)\nfig.show()\n\ntemp = gdf[gdf['Country\/Region']!='China'].groupby('Date').sum().reset_index()\ntemp = temp.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', facet_col=\"Case\",\n             title='Cases Outside China', color_discrete_sequence=cdr)\nfig.show()","661812af":"def location(row):\n    if row['Country\/Region']=='China':\n        if row['Province\/State']=='Hubei':\n            return 'Hubei'\n        else:\n            return 'Other Chinese Provinces'\n    else:\n        return 'Rest of the World'\n\ntemp = full_table.copy()\ntemp['Region'] = temp.apply(location, axis=1)\ntemp['Date'] = temp['Date'].dt.strftime('%Y-%m-%d')\ntemp = temp.groupby(['Region', 'Date'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ntemp = temp.melt(id_vars=['Region', 'Date'], value_vars=['Confirmed', 'Deaths', 'Recovered'], \n                 var_name='Case', value_name='Count').sort_values('Count')\n# temp = temp.sort_values(['Date', 'Region', 'Case']).reset_index()\ntemp.head()\n\nfig = px.bar(temp, y='Region', x='Count', color='Case', barmode='group', orientation='h',\n             text='Count', title='Hubei - China - World', animation_frame='Date',\n             color_discrete_sequence= ['#EF553B', '#00CC96', '#636EFA'], range_x=[0, 70000])\n# fig.update_traces(textposition='outside')\n# fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_layout(yaxis={'categoryorder':'array', \n                         'categoryarray':['Hubei','Other Chinese Provinces','Rest of the World']})\nfig.show()","2837f0ed":"def location(row):\n    if row['Country\/Region']=='China':\n        if row['Province\/State']=='Hubei':\n            return 'Hubei'\n        else:\n            return 'Other Chinese Provinces'\n    else:\n        return 'Rest of the World'\n\ntemp = full_latest.copy()\ntemp['Region'] = temp.apply(location, axis=1)\ntemp = temp.groupby('Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ntemp = temp.melt(id_vars='Region', value_vars=['Confirmed', 'Deaths', 'Recovered'], \n                 var_name='Case', value_name='Count').sort_values('Count')\ntemp.head()\n\nfig = px.bar(temp, y='Region', x='Count', color='Case', barmode='group', orientation='h',\n             text='Count', title='Hubei - China - World', \n             color_discrete_sequence= ['#EF553B', '#00CC96', '#636EFA'])\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","4c56ce6e":"# In China\ntemp = china.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\ntemp = temp.reset_index()\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             title='In China',\n             color_discrete_sequence=cdr)\nfig.update_layout(barmode='group')\nfig.show()\n\n#-----------------------------------------------------------------------------\n\n# ROW\ntemp = row.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\ntemp = temp.reset_index()\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             title='Outside China',\n             color_discrete_sequence=cdr)\nfig.update_layout(barmode='group')\nfig.show()","953f5782":"temp = full_table.groupby('Date').sum().reset_index()\ntemp.head()\n\n# adding two more columns\ntemp['No. of Deaths to 100 Confirmed Cases'] = round(temp['Deaths']\/\n                                                     temp['Confirmed'], 3)*100\ntemp['No. of Recovered to 100 Confirmed Cases'] = round(temp['Recovered']\/\n                                                        temp['Confirmed'], 3)*100\ntemp['No. of Recovered to 1 Death Case'] = round(temp['Recovered']\/\n                                                 temp['Deaths'], 3)\n\ntemp = temp.melt(id_vars='Date', \n                 value_vars=['No. of Deaths to 100 Confirmed Cases', \n                             'No. of Recovered to 100 Confirmed Cases', \n                             'No. of Recovered to 1 Death Case'], \n                 var_name='Ratio', \n                 value_name='Value')\n\nfig = px.line(temp, x=\"Date\", y=\"Value\", color='Ratio', \n              title='\u9577\u671f\u306b\u308f\u305f\u308b\u56de\u5fa9\u7387\u3068\u6b7b\u4ea1\u7387',color_discrete_sequence=cdr)\nfig.show()","6267e2fd":"rl = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum()\nrl = rl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\nrl.head().style.background_gradient(cmap='rainbow')\n\nncl = rl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Country\/Region\", value_vars=['Affected', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             x=\"Country\/Region\", y=\"value\", color='variable', orientation='v', height=800,\n             # height=600, width=1000,\n             title='Number of Cases outside China', color_discrete_sequence=cdr)\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()\n\n# ------------------------------------------\n\ncl = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum()\ncl = cl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\n# cl.head().style.background_gradient(cmap='rainbow')\n\nncl = cl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Province\/State\", value_vars=['Affected', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             y=\"Province\/State\", x=\"value\", color='variable', orientation='h', height=800,\n             # height=600, width=1000,\n             title='Number of Cases in China', color_discrete_sequence=cdr)\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","305aa0c2":"fig = px.treemap(china_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"Province\/State\"], values=\"Confirmed\", \n                 title='Number of Confirmed Cases in Chinese Provinces',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.show()\n\nfig = px.treemap(china_latest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"Province\/State\"], values=\"Deaths\", \n                 title='Number of Deaths Reported in Chinese Provinces',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.show()\n\nfig = px.treemap(china_latest.sort_values(by='Recovered', ascending=False).reset_index(drop=True), \n                 path=[\"Province\/State\"], values=\"Recovered\", \n                 title='Number of Recovered Cases in Chinese Provinces',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.show()\n\n# ----------------------------------------------------------------------------\n\nfig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Confirmed\", \n                 title='Number of Confirmed Cases outside china',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()\n\nfig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Deaths\", \n                 title='Number of Deaths outside china',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()\n\nfig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Recovered\", \n                 title='Number of Recovered Cases outside china',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()","f86167d6":"temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp, x=\"Date\", y=\"Confirmed\", color='Country\/Region',\n             title='Number of new cases everyday')\nfig.show()\n\nfig = px.bar(temp[temp['Country\/Region']!='China'], x=\"Date\", y=\"Confirmed\", color='Country\/Region',\n             title='Number of new cases outside China everyday')\nfig.show()\n\nfig = px.bar(temp, x=\"Date\", y=\"Deaths\", color='Country\/Region',\n             title='Number of new death case reported outside China everyday')\nfig.show()\n\nfig = px.bar(temp[temp['Country\/Region']!='China'], x=\"Date\", y=\"Deaths\", color='Country\/Region',\n             title='Number of new death case reported outside China everyday')\nfig.show()","1e92801c":"temp = full_table.groupby(['Date', 'Country\/Region'])['Confirmed'].sum()\ntemp = temp.reset_index().sort_values(by=['Date', 'Country\/Region'])\ntemp.head()\n\nplt.style.use('seaborn')\ng = sns.FacetGrid(temp, col=\"Country\/Region\", hue=\"Country\/Region\", \n                  sharey=False, col_wrap=5)\ng = g.map(plt.plot, \"Date\", \"Confirmed\")\ng.set_xticklabels(rotation=90)\nplt.show()","b4c7e13c":"temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nplt.style.use('seaborn')\ng = sns.FacetGrid(temp, col=\"Country\/Region\", hue=\"Country\/Region\", \n                  sharey=False, col_wrap=5)\ng = g.map(sns.lineplot, \"Date\", \"Confirmed\")\ng.set_xticklabels(rotation=90)\nplt.show()","2c7a95c3":"def from_china_or_not(row):\n    if row['Country\/Region']=='China':\n        return 'From China'\n    else:\n        return 'Outside China'\n    \ntemp = full_table.copy()\ntemp['Region'] = temp.apply(from_china_or_not, axis=1)\ntemp = temp.groupby(['Region', 'Date'])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\nmask = temp['Region'] != temp['Region'].shift(1)\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp, x='Date', y='Confirmed', color='Region', barmode='group', \n             text='Confirmed', title='Confirmed', color_discrete_sequence= cdr)\nfig.update_traces(textposition='outside')\nfig.show()\n\nfig = px.bar(temp, x='Date', y='Deaths', color='Region', barmode='group', \n             text='Confirmed', title='Deaths', color_discrete_sequence= cdr)\nfig.update_traces(textposition='outside')\nfig.update_traces(textangle=-90)\nfig.show()","08b9de67":"# \u8a18\u4e8b\u304c\u6c17\u306b\u5165\u3063\u305f\u3089\u3001upvote\uff08\u6295\u7968\uff09\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u3002","2721fd50":"## \u6e56\u5317-\u4e2d\u56fd-\u4e16\u754c","2aaf1ad3":"### \u6d3e\u751f\u30c6\u30fc\u30d6\u30eb","d553aa20":"## \u30b1\u30fc\u30b9\u306e\u5272\u5408","5d2da1c5":"* \u6700\u521d\u306e\u6570\u9031\u9593\u306f\u30011\u65e5\u3042\u305f\u308a\u306e\u6b7b\u8005\u4ef6\u6570\u304c\u56de\u5fa9\u4ef6\u6570\u3088\u308a\u3082\u591a\u304b\u3063\u305f\n* \u6642\u9593\u3092\u304b\u3051\u3066\u5287\u7684\u306b\u5909\u5316\u3057\u3066\u3044\u308b\n* \u6b7b\u4ea1\u7387\u306f\u4e0b\u304c\u3063\u3066\u3044\u306a\u3044\u304c\u3001\u56de\u5fa9\u3057\u305f\u75c7\u4f8b\u306e\u6570\u306f\u9593\u9055\u3044\u306a\u304f\u5897\u52a0\u3057\u3066\u3044\u308b","a0c2e5f3":"# \u63a2\u7d22\u7684\u30c7\u30fc\u30bf\u89e3\u6790\u3092\u30d3\u30b8\u30e5\u30a2\u30eb\u3067","5aca77ac":"## \u78ba\u8a8d\u3055\u308c\u305f\u6b7b\u4ea1\u8005\u306e\u4ef6\u6570","4589d02d":"## \u30c0\u30a4\u30e4\u30e2\u30f3\u30c9\u30d7\u30ea\u30f3\u30bb\u30b9\u53f7\u306b\u3064\u3044\u3066","b384c157":"## \u4e2d\u56fd\u3067\u5831\u544a\u3055\u308c\u305f\u30ec\u30dd\u30fc\u30c8","f8f86490":"### \u6642\u7cfb\u5217\u3054\u3068\u306e\u5e83\u304c\u308a","f54751a5":"## \u6642\u9593\u3092\u304b\u3051\u305f\u5e83\u304c\u308a\u306b\u3064\u3044\u3066","16732fb2":"[COVID-19 - Analysis, Viz, Prediction & Comparisons](http:\/\/kaggle.com\/imdevskp\/covid-19-analysis-viz-prediction-comparisons)\n\n\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306f\u3001\u4e0a\u306e\u8457\u8005\u3067\u3042\u308b\u300cDevakumar kp\u300d\u306e\u66f8\u3044\u305f\u300cCOVID-19 - Analysis, Viz, Prediction & Comparisons\u300d\u3092\u65e5\u672c\u8a9e\u8a33\u3057\u305f\u3082\u306e\u3067\u3059\u3002\nDevakumar kp\u306b\u5fc3\u304b\u3089\u306e\u656c\u610f\u3092\u8868\u3057\u307e\u3059\u3002\u3053\u306e\u8a18\u4e8b\u306e\u7ffb\u8a33\u306b\u3088\u308a\u3001\u5fae\u529b\u306a\u304c\u3089\u30b3\u30ed\u30ca\u30a6\u30a3\u30eb\u30b9\u306e\u53ce\u675f\u306b\u8ca2\u732e\u3067\u304d\u308c\u3070\u5e78\u3044\u3067\u3059\u3002","68f51728":"# \u6bce\u65e5\u306e\u65b0\u898f\u75c7\u4f8b\u6570","a385704f":"## \u5f71\u97ff\u3092\u53d7\u3051\u308b\u56fd","44655aad":"## \u56fd\u3054\u3068\u306b\u78ba\u8a8d\u3055\u308c\u305f\u611f\u67d3\u8005\u6570","8827d8a0":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u30fc","34a0fbc4":"## \u4e16\u754c\u4e2d\u3067\u306e\u5206\u6790","c7a0fe50":"## \u30b3\u30ed\u30ca\u30a6\u30a3\u30eb\u30b9\u304c\u5e83\u304c\u308b\u5834\u6240\u306e\u6570","34cc7796":"## \u4e16\u754c\u4e2d\u306e\u30c7\u30fc\u30bf","ed1071ec":"## \u6700\u65b0\u306e\u5b8c\u5168\u306a\u30c7\u30fc\u30bf","9a9665dc":"# \u63a2\u7d22\u7684\u30c7\u30fc\u30bf\u89e3\u6790","833d5f19":"### \u30c7\u30fc\u30bf\u30af\u30ea\u30fc\u30cb\u30f3\u30b0","6fb642d1":"## \u9577\u671f\u306b\u308f\u305f\u308b\u56de\u5fa9\u7387\u3068\u6b7b\u4ea1\u7387","3c533bc0":"## \u6700\u65b0\u306e\u30c7\u30fc\u30bf\u8981\u7d04","ab407c67":"# \u6bce\u65e5\u306e\u65b0\u30b1\u30fc\u30b9","dac9032c":"# Dataset","9ffcf4ca":"* \u30c0\u30a4\u30a2\u30e2\u30f3\u30c9\u30d7\u30ea\u30f3\u30bb\u30b9\u30af\u30eb\u30fc\u30ba\u8239\u306f3,711\u4eba\u306e\u4e57\u5ba2\u3068\u4e57\u7d44\u54e1\u3092\u4e57\u305b\u3066\u3044\u307e\u3057\u305f\n* \u8239\u306f2\u67083\u65e5\u306b\u6771\u4eac\u8fd1\u90ca\u306e\u6a2a\u6d5c\u306b\u5230\u7740\u3057\u307e\u3057\u305f\u3002\n* [https:\/\/www.princess.com\/news\/notices_and_advisories\/notices\/diamond-princess-update.html](https:\/\/www.princess.com\/news\/notices_and_advisories\/notices\/diamond-princess-update.html)","e0a84f94":"## \u6642\u7cfb\u5217\u3068\u30b1\u30fc\u30b9","6dfedb34":"# \u524d\u51e6\u7406","7216bada":"## \u305d\u308c\u305e\u308c\u306e\u56fd\u306b\u304a\u3051\u308b\u65b0\u898f\u306e\u30b1\u30fc\u30b9","04ebb4af":"## \u4e2d\u56fd\u304b\u3089\u306e\u30c7\u30fc\u30bf"}}