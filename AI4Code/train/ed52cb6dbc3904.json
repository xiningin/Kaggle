{"cell_type":{"7cd0285f":"code","96218271":"code","845bd162":"code","c8849f17":"code","631da0ce":"code","ec7cb56d":"code","83ea0f8b":"code","1caae268":"code","82d7794a":"code","fef9eb99":"code","9fe7284a":"code","ca608376":"code","ccc8414a":"code","b916ceed":"code","e31c3865":"code","24c4a662":"code","9589648d":"code","65834baf":"code","e48b0dd7":"code","5b40f3d8":"code","b0101f95":"code","219db7dd":"code","88c39ac8":"code","5ec5dc86":"code","213d75ec":"markdown","2abee157":"markdown","cc80fa15":"markdown","3d643aa4":"markdown","da1de29c":"markdown","402f55b0":"markdown","e3582434":"markdown","684d6bdc":"markdown"},"source":{"7cd0285f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96218271":"house_data=pd.read_csv(\"..\/input\/housedata\/data.csv\")","845bd162":"house_data.head() # lets see top 5 in our data\n\n","c8849f17":"# house_data.style.highlight_max() showing max values in every colums by highling color\n#house_data.style.highlight_min() #showinh min values in every colums by hihhling color\n# house_data.style.highlight_null(null_color=\"green\") #showinh null values in every colums by green color\n","631da0ce":"house_data.describe().transpose() #lets decribe the data ","ec7cb56d":"house_data.shape # Hence we have 4600 rows and 18 columns","83ea0f8b":"house_data.columns #the name of the colums","1caae268":"house_data = house_data.drop('date',axis=1)\nhouse_data = house_data.drop('statezip',axis=1)","82d7794a":"house_data.dtypes # Hence it is regression problem we have to check the datatypes of the data ","fef9eb99":"house_data[\"price\"]=house_data[\"price\"].astype(int)\nhouse_data[\"bedrooms\"]=house_data[\"price\"].astype(int)\nhouse_data[\"bathrooms\"]=house_data[\"price\"].astype(int)\nhouse_data[\"floors\"]=house_data[\"price\"].astype(int)\n","9fe7284a":"from sklearn.preprocessing import LabelEncoder\nLE=LabelEncoder()\nhouse_data[\"street\"]=LE.fit_transform(house_data[\"street\"])\nhouse_data[\"city\"]=LE.fit_transform(house_data[\"city\"])\nhouse_data[\"country\"]=LE.fit_transform(house_data[\"country\"])\n","ca608376":"house_data.dtypes","ccc8414a":"house_data.isnull().sum() # hence we have every thing int or flaot we have check the null values ","b916ceed":"import matplotlib.pyplot as plp\nimport seaborn as sns","e31c3865":"sns.set(style=\"darkgrid\")\nsns.regplot(x=house_data['yr_built'], y= house_data[\"price\"])","24c4a662":"sns.displot(house_data[\"bedrooms\"],bins=10)","9589648d":"house_data.hist(figsize=(15,20))\nplp.show()","65834baf":"plp.figure(figsize=(15,20))\nsns.barplot(data=house_data,y='city',x='price',orient=\"h3\")","e48b0dd7":"plp.figure(figsize=(30,45))\nsns.barplot(x=house_data[\"yr_renovated\"],y=house_data[\"price\"])","5b40f3d8":"plp.figure(figsize=(8,6))\nsns.set_context('paper',font_scale=1.4)\nhouse_data2=house_data.corr()\nsns.heatmap(house_data2,cmap=\"icefire\")","b0101f95":"X = house_data.drop('price',axis =1).values\ny = house_data['price'].values","219db7dd":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=101)","88c39ac8":"from sklearn.linear_model import LinearRegression \nregg=LinearRegression()\nregg.fit(X_train, y_train)\ny_pred=regg.predict(X_test)","5ec5dc86":"from sklearn.metrics import r2_score\nacc=r2_score(y_test,y_pred)\nacc","213d75ec":"# Hence we have different data in strings we can converts into birany data ","2abee157":"# were we have convert into int or float data , we are using Regression problem ","cc80fa15":"# If we have null values we use replace or mean or median ","3d643aa4":"# > **1.Here we read the data using read csv file **","da1de29c":"# Data Visulization ","402f55b0":"# styles of tables or data using pandas ","e3582434":"# Hence we dont wont date and statezip we drop them using drop","684d6bdc":"# hence we are 100 % accracy "}}