{"cell_type":{"6e81579e":"code","92ad89fe":"code","d46982fb":"code","a13fc7cd":"code","42afb547":"code","8fcec894":"code","6c88404b":"code","c93feba6":"code","d373bc5a":"code","45d656d9":"code","11078281":"code","ea4de7dc":"code","2587ead7":"code","fb1c8784":"code","c1233277":"code","7c2d947f":"code","c28bcebf":"code","2204f0e6":"code","b2ff9a49":"code","36d4ad92":"code","dcbf6c3a":"code","78ec8e00":"code","b08f6a3e":"code","13ef81a2":"code","1806fcb1":"code","31ad5359":"code","5b652e61":"code","b7d97b4c":"code","ff3d7d2a":"code","308af18c":"code","9989c87a":"code","5b1c357d":"code","691a2087":"code","0615b970":"code","398ad32b":"code","3cc85e06":"code","4ffd5523":"code","126a1efa":"code","5548cd12":"code","a0d1112d":"code","b6560418":"code","4ce6187f":"code","59eecf28":"code","eece5baf":"code","7649933e":"code","e888e8bb":"code","a6101ea6":"code","43e31523":"code","10d04603":"markdown","a0e31731":"markdown","83f725ab":"markdown","953ef44d":"markdown","576bd45c":"markdown","37d5f612":"markdown","a2e357d0":"markdown","a6fc9b92":"markdown","a49a9d15":"markdown","e5b01ae7":"markdown","47654e2f":"markdown","80b88ed0":"markdown","e7c0bca2":"markdown"},"source":{"6e81579e":"import numpy as np\nimport pandas as pd\nimport tqdm\nimport re\nfrom lightfm import LightFM\n\nfrom io import BytesIO\nfrom PIL import Image\nimport requests\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.metrics.pairwise import cosine_distances\nimport gensim\nfrom scipy.sparse import coo_matrix, csr_matrix\nfrom scipy.sparse.linalg import svds\n\nfrom sklearn import preprocessing\nimport seaborn as sns\n\n# CONSTS\n_BOOKS_RATINGS = '..\/input\/introml-2021-recsys\/BX-Book-Ratings.csv'\n_BOOKS = '..\/input\/introml-2021-recsys\/BX-Books.csv'\n_USERS = '..\/input\/introml-2021-recsys\/BX-Users.csv'","92ad89fe":"## \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \ndef chunks(l, n):\n    for i in range(0, len(l), n):\n        yield l[i:i + n]\n\ndef rec_imaging(product_ids, content_dict, measure=None, rating=None, top_n=5):\n    picture_urls = [content_dict[i] for i in product_ids]\n    cnt = 0\n    for idx, chunk in enumerate(chunks(picture_urls, top_n)):\n        fig = plt.figure(figsize=(20, 4))\n        for n, i in enumerate(chunk):\n            try:\n                r = requests.get(i)\n                im = Image.open(BytesIO(r.content))\n\n            except:\n                print('Something went wrong with {url}'.format(url=i))\n                continue\n\n            a = fig.add_subplot(1, top_n, n + 1)\n            if measure is not None:\n                if rating is not None:\n                    a.title.set_text(\"measure = {}, rating={}\".format(np.round(measure[cnt], 4), rating[cnt]))\n                a.title.set_text(\"measure = {}\".format(np.round(measure[cnt], 4)))\n                cnt += 1\n            plt.imshow(im)\n            plt.axis('off')\n        plt.show()","d46982fb":"books = pd.read_csv(_BOOKS)\nbooks.head()","a13fc7cd":"interactions = pd.read_csv(_BOOKS_RATINGS, sep=\";\", encoding = \"ISO-8859-1\")\ninteractions = interactions[interactions[\"Book-Rating\"] != 0]\nprint(interactions.shape)\ninteractions.head()","42afb547":"books_meets = interactions.groupby(\"ISBN\")[\"User-ID\"].count().reset_index().rename(columns={\"User-ID\": \"user_num\"})\nuser_meets = interactions.groupby(\"User-ID\")[\"ISBN\"].count().reset_index().rename(columns={\"ISBN\": \"books_num\"})\ninteractions = interactions.merge(books_meets, on=[\"ISBN\"]).merge(user_meets, on=[\"User-ID\"])","8fcec894":"interactions = interactions[(interactions[\"user_num\"] > 5) & \n                            (interactions[\"books_num\"] > 5) &\n                            (interactions[\"books_num\"] < 200)]","6c88404b":"users = pd.read_csv(_USERS, delimiter=';', encoding = 'ISO-8859-1')\nprint(users.shape, len(users['User-ID'].unique()))\nusers.head()","c93feba6":"users.drop(users[users['Age'] >= 120].index, inplace=True)\nprint(f\"{len( users['User-ID'].unique() )} \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\")\nusers.head()","d373bc5a":"print( f\"{users['Location'].unique().shape[0]} \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043b\u043e\u043a\u0430\u0446\u0438\u0438\" )\nusers['Location'] = users['Location'].str.replace(' ', '')\nusers['Location'] = users['Location'].apply(lambda x : x.split(','))","45d656d9":"users['len'] = users['Location'].apply(len)\nprint( users.loc[users['len'] < 3] )\nprint( \"\u0412\u0441\u0435\u0433\u043e \u0434\u0432\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 - \u0443\u0431\u0435\u0440\u0451\u043c \u0438\u0445, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043c\u0435\u0448\u0430\u043b\u0438\u0441\u044c\" )\nusers.drop( users.loc[users['len'] < 3].index, inplace=True )\nusers.drop( columns=['len'], inplace=True )\n\nprint( \"\u041f\u043e\u0434\u0435\u043b\u0438\u043c \u043b\u043e\u043a\u0430\u0446\u0438\u044e\" )\n\nusers['location_0'] = users['Location'].apply(lambda x : x[0].lower())\nusers['location_1'] = users['Location'].apply(lambda x : x[1].lower())\nusers['location_2'] = users['Location'].apply(lambda x : x[2].lower())\n\nprint( len(users['location_0'].unique()), len(users['location_1'].unique()), len(users['location_2'].unique()) )\n\nusers.head()","11078281":"interactions = interactions.merge(books[[\"ISBN\", \"Image-URL-M\", \"Book-Title\"]].rename(\n    columns={\"Image-URL-M\": \"picture_url\"}), on=[\"ISBN\"]\n)\n\nle = preprocessing.LabelEncoder()\ninteractions[\"product_id\"] = le.fit_transform(interactions[\"ISBN\"])\ninteractions[\"vid\"] = le.fit_transform(interactions[\"User-ID\"])","ea4de7dc":"print(interactions.shape)\ninteractions.head()","2587ead7":"sns.histplot(users['Age'])","fb1c8784":"age_cats = []\nfor _q in np.linspace(0,1,9):\n    print( f\"{_q * 100}% :: {users['Age'].quantile(_q)}\" )\n    age_cats += [users['Age'].quantile(_q)]\n\nage_cats = np.array(age_cats)","c1233277":"def get_personal_top(age, location):\n    assert(age >= 0)\n\n    age_idx_1 = np.argmax(age_cats > age)\n    age_idx_0 = age_idx_1 - 1\n\n    users_ids_age = users.loc[ (users[\"Age\"] >= age_cats[age_idx_0]) & (users[\"Age\"] <= age_cats[age_idx_1]) ][\"User-ID\"].unique()\n    recs = interactions.loc[interactions[\"User-ID\"].isin( users_ids_age )]\n\n    users_ids_city = users.loc[ users[f\"location_0\"] == location[0] ][\"User-ID\"].unique() if location[0] != '' else np.array([])\n    users_ids_region = users.loc[ users[f\"location_1\"] == location[1] ][\"User-ID\"].unique() if location[1] != '' else np.array([])\n    users_ids_country = users.loc[ users[f\"location_2\"] == location[2] ][\"User-ID\"].unique() if location[2] != '' else np.array([])\n\n    recs_loc = recs.loc[recs[\"User-ID\"].isin( users_ids_city )]\n    if recs_loc.shape[0] < 100:\n        recs_loc = recs.loc[recs[\"User-ID\"].isin( users_ids_region )]\n    if recs_loc.shape[0] < 100:\n        recs_loc = recs.loc[recs[\"User-ID\"].isin( users_ids_country )]\n    \n    if recs_loc.shape[0] > 30:\n        recs = recs_loc\n\n    recs = recs.loc[recs[\"Book-Rating\"] >= 6]\n    return recs['ISBN'].unique()\n","7c2d947f":"recs_books_ids = get_personal_top(35, [\"moscow\", \"yukonterritory\", \"russia\"])\nrec_imaging(recs_books_ids[:5], dict(zip(interactions['ISBN'], interactions['picture_url'])))","c28bcebf":"## DRAW SOME BOOKS HERE\nrecs_books_ids = get_personal_top(15, [\"nyc\", \"newyork\", \"usa\"])\nrec_imaging(recs_books_ids[:5], dict(zip(interactions['ISBN'], interactions['picture_url'])))","2204f0e6":"## DRAW SOME BOOKS HERE\nrecs_books_ids = get_personal_top(60, [\"farnborough\", \"hants\", \"unitedkingdom\"])\nrec_imaging(recs_books_ids[:5], dict(zip(interactions['ISBN'], interactions['picture_url'])))","b2ff9a49":"# \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 users-books \u0441 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438\ncsr_rates = coo_matrix((interactions[\"Book-Rating\"], (interactions[\"vid\"], interactions[\"product_id\"])), \n                            shape=(len(set(interactions[\"vid\"])), len(set(interactions[\"product_id\"]))))\n\n\nprint( csr_rates.shape )","36d4ad92":"from sklearn.cluster import DBSCAN\nclustering = DBSCAN(eps=0.55, min_samples=1, metric='cosine').fit(csr_rates.tocsc())","dcbf6c3a":"np.unique( clustering.labels_ ).shape","78ec8e00":"interactions['cluster_label'] = [ clustering.labels_[user_id] for user_id in interactions['vid'] ]\ninteractions.head()","b08f6a3e":"interactions['cluster_label'].value_counts()","13ef81a2":"books_in_clusters = interactions.groupby('ISBN').agg({\n    'Book-Rating' : 'mean',\n    'cluster_label' : lambda x:x.value_counts().index[0]\n}).reset_index()","1806fcb1":"def get_top10_in_cluster(user_id):\n    user_cluster = interactions.loc[interactions['User-ID'] == user_id]['cluster_label'].value_counts().index[0]\n    books_for_user = books_in_clusters.loc[books_in_clusters['cluster_label'] == user_cluster]\n    books_for_user = np.array( books_for_user[ ['ISBN', 'Book-Rating'] ] )\n    books_for_user = books_for_user[np.argsort(books_for_user[:, 1])]\n    return books_for_user[:,0]","31ad5359":"recs_books_ids = get_top10_in_cluster(132500)\nrec_imaging(recs_books_ids[:10], dict(zip(interactions['ISBN'], interactions['picture_url'])))","5b652e61":"recs_books_ids = get_top10_in_cluster(66483)\nrec_imaging(recs_books_ids[:10], dict(zip(interactions['ISBN'], interactions['picture_url'])))","b7d97b4c":"Int_tmp = interactions[[\"vid\", \"product_id\"]].drop_duplicates()\nInt_tmp.head()","ff3d7d2a":"user_products = Int_tmp.groupby([\"vid\"])[\"product_id\"].apply(list).reset_index()\nuser_products[:3]","308af18c":"class Recomendations():\n    def __init__(self, Int):\n        # \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e product_id \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c url \u0442\u043e\u0432\u0430\u0440\u0430\n        self.product_id_to_url = {}\n        for i in Int[[\"product_id\", \"picture_url\"]].drop_duplicates().values:\n            self.product_id_to_url[i[0]] = i[1]\n        self.interactions = Int\n        \n    def coocurrency_count(self):\n        Int = self.interactions[[\"vid\", \"product_id\"]].drop_duplicates()\n        # \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0442\u043e\u0432\u0430\u0440\u044b, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u043d \u0432\u0437\u0430\u043c\u0438\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043b\n        user_products = Int.groupby([\"vid\"])[\"product_id\"].apply(list).reset_index()\n        # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 prod_num\n        product_num = [len(i) for i in user_products[\"product_id\"]]\n        user_products[\"prod_num\"] = product_num\n        # \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0432\u0448\u0438\u0445 \u0441 \u043e\u0434\u043d\u0438\u043c \u0442\u043e\u0432\u0430\u0440\u043e\u043c\n        user_products = user_products[user_products[\"prod_num\"] > 1]\n        \n        # \u0417\u0430\u0432\u043e\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u043e\u0434 \u0442\u043e\u0432\u0430\u0440\u044b\n        cooc = {}\n        for i in tqdm.tqdm_notebook(user_products.values):\n            for j in range(len(i[1])):\n                for k in range(len(i[1])):\n                    if j != k:\n                        try:\n                            cooc[str(i[1][j]) + \"_\" + str(i[1][k])] += 1\n                        except:\n                            cooc[str(i[1][j]) + \"_\" + str(i[1][k])] = 1\n        cooc_list = []\n        for i, j in tqdm.notebook.tqdm(cooc.items()):\n            # \u0415\u0441\u043b\u0438 \u0442\u043e\u0432\u0430\u0440\u044b \u0432\u0441\u0442\u0435\u0442\u0438\u043b\u0438\u0441\u044c \u0432\u043c\u0435\u0441\u0442\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0430, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n            if j != 1:\n                # \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0412\u0435\u0441\u0430 \u043a \u043f\u0430\u0440\u0430\u043c \u043a\u043d\u0438\u0433\n                rating_i = interactions.loc[interactions['product_id'] == int(i.split(\"_\")[0])]['Book-Rating'].mean()\n                rating_j = interactions.loc[interactions['product_id'] == int(j)]['Book-Rating'].mean()\n                rating = (rating_i + rating_j) \/ 2\n                cooc_list.append(i.split(\"_\") + [j] + [rating])\n        \n        self.cooc_rec = pd.DataFrame(cooc_list, columns=[\"item1\", \"item2\", \"measure\", \"rating\"])\n    \n    def get_rec(self, i, show=False):\n        recs = self.cooc_rec[self.cooc_rec[\"item1\"] == str(i)]\\\n                            .sort_values(\"rating\", ascending=False)\\\n                            .head(10)\n        print(u\"\u0414\u043b\u044f \u0442\u043e\u0432\u0430\u0440\u0430\")\n        rec_imaging([i], self.product_id_to_url)\n        print(u\"\u0422\u0430\u043a\u0438\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438\")\n        rec_imaging(recs[\"item2\"].values.astype(int), self.product_id_to_url, \n                         recs[\"measure\"].values, recs[\"rating\"].values)","9989c87a":"cooc_rec = Recomendations(interactions)\ncooc_rec.coocurrency_count()","5b1c357d":"cooc_rec.cooc_rec.sort_values(\"rating\", ascending=False).head()","691a2087":"cooc_rec.get_rec(4226)","0615b970":"cooc_rec.get_rec(6376)","398ad32b":"class Content_Based():\n    def __init__(self, items, interactions):\n        self.items = items\n        self.items['text'] = items['Book-Title'] + ' ' + items['Book-Author']\n        self.interactions = interactions.drop_duplicates()\n        self.content_dict = {}\n        for i, j in enumerate(items[\"Image-URL-M\"]):\n            self.content_dict[i] = j\n        self.inversed_dict = {v: k for k, v in self.content_dict.items()}\n        \n    def avg_feature_vector(self, words, model, num_features, index2word_set):\n        feature_vec = np.zeros((num_features, ), dtype='float32')\n        n_words = 0\n        for word in words:\n            if word in index2word_set:\n                n_words += 1\n                feature_vec = np.add(feature_vec, model.wv[word])\n        if (n_words > 0):\n            feature_vec = feature_vec \/ n_words\n        return feature_vec\n\n    def get_items_representation(self):\n        \n        item_description = [gensim.utils.simple_preprocess(re.sub(\"[^a-zA-Z\u0430-\u044f\u0410-\u042f]+\", \" \", str(i).lower())) \n                            for i in self.items['text']]\n        #build vocabulary and train model\n        self.model = gensim.models.Word2Vec(\n                item_description,\n                vector_size=200,\n                window=10,\n                min_count=1,\n                workers=10,\n                epochs=100)\n        self.index2word_set = set(self.model.wv.index_to_key)\n        self.items_embs = np.zeros((len(item_description), 200))\n        for i in tqdm.tqdm_notebook(range(self.items_embs.shape[0])):\n            self.items_embs[i] = self.avg_feature_vector(item_description[i], self.model, 200, self.index2word_set)\n        \n        \n    def get_rec_I2I(self, i):\n        metrics = cosine_similarity([self.items_embs[i]], self.items_embs)\n        print(u\"\u0414\u043b\u044f \u0442\u043e\u0432\u0430\u0440\u0430\")\n        rec_imaging([i], self.content_dict)\n        print(u\"\u0422\u0430\u043a\u0438\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438\")\n        rec_imaging(np.argsort(metrics)[0][::-1][1:11], self.content_dict, np.sort(metrics)[0][::-1][1:11])\n\n\n    def get_rec_U2I(self, i):\n        ui = self.interactions[self.interactions[\"vid\"] == i]\n        ui['text'] = [ self.items.loc[self.items['ISBN'] == ui.iloc[i]['ISBN']]['text'].item() for i in range(ui.shape[0]) ]\n\n        user_vector = \" \".join(ui[\"text\"])\n        user_processed = gensim.utils.simple_preprocess(re.sub(\"[^a-zA-Z\u0430-\u044f\u0410-\u042f]+\", \" \", user_vector.lower()))\n        user_emb = self.avg_feature_vector(user_processed, self.model, 200, self.index2word_set)\n        metrics = cosine_similarity([user_emb], self.items_embs)\n        print(u\"\u0414\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u0441 \u0442\u043e\u0432\u0430\u0440\u0430\u043c\u0438\")\n        rec_imaging(np.unique([self.inversed_dict[i] for i in ui[\"picture_url\"]]), self.content_dict)\n        print(u\"\u0422\u0430\u043a\u0438\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438\")\n        rec_imaging(np.argsort(metrics)[0][::-1][1:11], self.content_dict, np.sort(metrics)[0][::-1][1:11])","3cc85e06":"CB = Content_Based(books, interactions)","4ffd5523":"CB.get_items_representation()","126a1efa":"CB.get_rec_I2I(125)","5548cd12":"CB.get_rec_U2I(3445)","a0d1112d":"class Colloborative():\n    def __init__(self, interactions):\n        self.content_dict = {}\n        for i, j in interactions[[\"product_id\", \"picture_url\"]].drop_duplicates().values:\n            self.content_dict[int(i)] = j\n        \n        df_weights = pd.DataFrame({\"page_type\": [\"PRODUCT\", \"CART\", \"PURCHASE\"],\n                                   'weight': [1, 1, 1]})\n\n        # \u0422.\u043a \u0443 \u043d\u0430\u0441 \u0432 interactions \u043d\u0435\u0442 \u0444\u0438\u0447\u0438 page_type \u0431\u0443\u0434\u0435\u043c \u0441\u0447\u0438\u0442\u0430\u0442\u044c, \u0447\u0442\u043e \n        interactions['page_type'] = ['PURCHASE' for i in range(interactions.shape[0])] \n        weighted = interactions.merge(df_weights, on=\"page_type\")\\\n                          .groupby([\"vid\", \"product_id\", \"picture_url\"])[\"weight\"]\\\n                          .sum()\\\n                          .reset_index()\n\n        # \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0432\u0435\u0441\u0430 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 product_id\n        weighted[\"weight\"] = [interactions.loc[interactions['product_id'] == pi]['Book-Rating'].mean()-5 for pi in tqdm.tqdm_notebook(weighted['product_id'])]\n        weighted[\"weight\"] = (weighted[\"weight\"] > 0).astype(int)\n        self.csr_rates = coo_matrix((weighted[\"weight\"], (weighted[\"vid\"], weighted[\"product_id\"])), \n                            shape=(len(set(weighted[\"vid\"])), len(set(weighted[\"product_id\"]))))\n        \n\n    def user_based(self, idx):\n        user_rates = self.csr_rates.getrow(idx).toarray()[0]\n        watched_items = np.where(user_rates != 0)[0]\n        # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u0441\u0438\u043d\u0443\u0441 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c idx \u0438 \u0432\u0441\u0435\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438\n        metrics = cosine_similarity([user_rates], self.csr_rates).reshape(-1, 1)\n        # \u0434\u043e\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u043f\u043e\u0445\u043e\u0436\u0435\u0441\u0442\u0438\n        rates = csr_matrix.multiply(self.csr_rates.copy(), metrics)\n        # \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c \u0443\u0436\u0435 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u044b\u0435 - \u0437\u0430\u043d\u0443\u043b\u044f\u0435\u043c \u0432\u0435\u0441\u0430 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u044b\u0445\n        total_rate = (1 - user_rates.astype(bool)) * np.array(np.sum(rates, axis=0))[0]\n        # \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438\n        self.get_rec(watched_items, np.arange(self.csr_rates.shape[1])[np.argsort(total_rate)[::-1][:10]],\n                    np.sort(total_rate)[::-1][:10])\n        \n    def item_based(self, idx):\n        item_rates = self.csr_rates.getcol(idx).toarray().reshape(1, -1)\n        # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u0441\u0438\u043d\u0443\u0441 \u043c\u0435\u0436\u0434\u0443 \u0442\u043e\u0432\u0430\u0440\u043e\u043c idx \u0438 \u0432\u0441\u0435\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438\n        metrics = cosine_similarity(item_rates, self.csr_rates.T).reshape(-1, 1)\n        # \u0434\u043e\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u043f\u043e\u0445\u043e\u0436\u0435\u0441\u0442\u0438\n        rates = csr_matrix.multiply(self.csr_rates.T.copy(), metrics)\n        total_rate = np.array(np.sum(rates, axis=1)).ravel()\n        # \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438\n        self.get_rec([idx], np.arange(self.csr_rates.shape[1])[np.argsort(total_rate)[::-1][:10]],\n                    np.sort(total_rate)[::-1][:10])\n\n    def get_rec(self, watched, recs, measure):\n        print(u\"\u0414\u043b\u044f \u0442\u0430\u043a\u0438\u0445 \u0442\u043e\u0432\u0430\u0440\u043e\u0432\")\n        rec_imaging([i for i in watched], self.content_dict)\n        print(u\"\u0422\u0430\u043a\u0438\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438\")\n        rec_imaging([i for i in recs], self.content_dict, measure)","b6560418":"clb = Colloborative(interactions)","4ce6187f":"clb.user_based(0)","59eecf28":"clb.item_based(0)","eece5baf":"class MatrixFactorization():\n    \n    def __init__(self, interactions, k):\n        interactions[\"product_id\"] = interactions[\"product_id\"].astype(int)\n        self.k = k\n        self.content_dict = {}\n        for i, j in interactions[[\"product_id\", \"picture_url\"]].drop_duplicates().values:\n            self.content_dict[i] = j\n        df_weights = pd.DataFrame({\"page_type\": [\"PRODUCT\", \"CART\", \"PURCHASE\"],\n                                   'weight': [1, 1, 1]})\n\n        # \u0422.\u043a \u0443 \u043d\u0430\u0441 \u0432 interactions \u043d\u0435\u0442 \u0444\u0438\u0447\u0438 page_type \u0431\u0443\u0434\u0435\u043c \u0441\u0447\u0438\u0442\u0430\u0442\u044c, \u0447\u0442\u043e \n        interactions['page_type'] = ['PURCHASE' for i in range(interactions.shape[0])] \n        weighted = interactions.merge(df_weights, on=\"page_type\")\\\n                          .groupby([\"vid\", \"product_id\", \"picture_url\"])[\"weight\"]\\\n                          .sum()\\\n                          .reset_index()\n\n        # \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0432\u0435\u0441\u0430 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 product_id\n        weighted[\"weight\"] = [interactions.loc[interactions['product_id'] == pi]['Book-Rating'].mean()-5 for pi in tqdm.tqdm_notebook(weighted['product_id'])]\n        weighted[\"weight\"] = (weighted[\"weight\"] > 0).astype(int)\n        self.csr_rates = coo_matrix((weighted[\"weight\"], (weighted[\"vid\"], weighted[\"product_id\"])), \n                            shape=(len(set(weighted[\"vid\"])), len(set(weighted[\"product_id\"]))))\n        \n    def MF(self):\n        U, S, V = svds(self.csr_rates.astype(float), k=self.k)\n        self.user_embs = U\n        self.items_embs = V.T\n        \n    def LightFM(self):\n        self.model = LightFM(loss='warp', no_components=100, learning_rate=0.03, learning_schedule=\"adadelta\")\n        self.model.fit(self.csr_rates, epochs=5, num_threads=40, verbose=True)\n        self.user_feature_bias, self.user_feature_embeddings = self.model.get_user_representations()\n        self.item_feature_bias, self.items_embs = self.model.get_item_representations()\n\n    def get_rec(self, i):\n        metrics = cosine_similarity([self.items_embs[i]], self.items_embs)\n        print(u\"\u0414\u043b\u044f \u0442\u043e\u0432\u0430\u0440\u0430\")\n        rec_imaging([i], self.content_dict)\n        print(u\"\u0422\u0430\u043a\u0438\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438\")\n        rec_imaging(np.argsort(-metrics)[0][1:11], self.content_dict, -np.round(np.sort(-metrics)[0][1:11], 4))","7649933e":"simple_svd = MatrixFactorization(interactions, 30)\nsimple_svd.MF()","e888e8bb":"simple_svd.get_rec(1222)","a6101ea6":"mf = MatrixFactorization(interactions, 300)\nmf.LightFM()","43e31523":"mf.get_rec(406)","10d04603":"## 2. \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u0445\u043e\u0436\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 (\u0421\u043b\u0430\u0439\u0434 25) - 2 \u0431\u0430\u043b\u043b\u0430\n\n\u041d\u0443\u0436\u043d\u043e \u0442\u043e\u043f-10 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439 \u0441 \u0441\u0430\u043c\u043e\u0439 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u043e\u0439. \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u043f\u043e \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0443 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0442\u043e\u043f-10 \u043a\u043d\u0438\u0433.","a0e31731":"## Colloborative filtering","83f725ab":"## \u041f\u043e\u0441\u043b\u0435 \u0442\u0449\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u043d\u0438\u0439 - https:\/\/lenta.ru\/articles\/2021\/07\/10\/longlife\/\n\n<p> \u0426\u0438\u0442\u0430\u0442\u0430: \"\u0414\u0435\u043b\u043e \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043d\u0438\u043a\u0442\u043e \u0438\u0437 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u043e\u043b\u0433\u043e\u0436\u0438\u0442\u0435\u043b\u0435\u0439, \u043a\u0440\u043e\u043c\u0435 \u041a\u0430\u043b\u044c\u043c\u0430\u043d, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0434\u043e\u0442\u044f\u043d\u0443\u043b \u0434\u0430\u0436\u0435 \u0434\u043e 120 \u043b\u0435\u0442, \u0430 \u0430\u043c\u0435\u0440\u0438\u043a\u0430\u043d\u043a\u0430 \u0421\u0430\u0440\u0430 \u041a\u043d\u0430\u0443\u0441\u0441 \u2014 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f, \u043a\u0442\u043e \u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u043d\u043e \u043f\u0440\u043e\u0436\u0438\u043b 119 \u043b\u0435\u0442.\" <\/p>","953ef44d":"## 1. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043f - \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0438 \u043b\u043e\u043a\u0430\u0446\u0438\u044e, \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043f - 1 \u0431\u0430\u043b\u043b\n\n<p> \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043f - \u044d\u0442\u043e \u0442\u043e\u043f \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u043f\u043e \u043f\u043e\u0445\u043e\u0436\u0438\u043c \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443\/\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0430\u043c\/\u043b\u043e\u043a\u0430\u0446\u0438\u0438. \u041a\u0430\u043a \u0441\u0434\u0435\u043b\u0430\u0442\u044c? \u0420\u0430\u0437\u0431\u0438\u0442\u044c \u043d\u0430 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u044b \u043f\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c. \u0422\u043e\u043f \u0434\u0435\u043b\u0430\u0442\u044c \u043f\u043e \u043a\u043d\u0438\u0433\u0430\u043c \u0441 \u0445\u043e\u0440\u043e\u0448\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c. <\/p>","576bd45c":"## \u0421\u043e\u0431\u0435\u0440\u0451\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043a\u0443\u0447\u0443","37d5f612":"## Matrix Factorization","a2e357d0":"## Content-based","a6fc9b92":"<p> \u042d\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0437\u0430 \u0442\u0435\u043c, \u0447\u0442\u043e\u0431\u044b \u0435\u0441\u043b\u0438 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u043b\u0441\u044f \u043d\u0435\u043f\u043e\u043b\u043d\u0430\u044f \u043b\u043e\u043a\u0430\u0446\u0438\u044f (\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0433\u0438\u043e\u043d), \u043c\u044b \u0441\u043c\u043e\u0433\u043b\u0438 \u0432\u044b\u0434\u0430\u0442\u044c \u0440\u0435\u043a\u043e\u043c\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043f\u043e \u0440\u0435\u0433\u0438\u043e\u043d\u0443 (\u0418\u043b\u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0435) <\/p>","a49a9d15":"## \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u043e\u043f\u0430","e5b01ae7":"## \u0412\u044b\u0431\u0435\u0440\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b \u0434\u043b\u044f \u0412\u043e\u0437\u0440\u0430\u0441\u0442\u0430","47654e2f":"## 3. \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b \u0440\u0430\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u044b\u0435 \u043d\u0430 \u043b\u0435\u043a\u0446\u0438\u0438 (\u0421\u043e\u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u043c\u043e\u0441\u0442\u044c - 2 \u0431\u0430\u043b\u043b, Content-based - 1 \u0431\u0430\u043b\u043b, \u041a\u043e\u043b\u043b\u0430\u0431\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f - 3 \u0431\u0430\u043b\u043b\u0430 , \u041c\u0430\u0442\u0440\u0438\u0447\u043d\u0430\u044f \u0424\u0430\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f - 1 \u0431\u0430\u043b\u043b) - 7 \u0431\u0430\u043b\u043b\u043e\u0432\n\n\u0412 \u0441\u043e\u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0442\u0430\u043a\u0436\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0438. \u0412\u0435\u0441 \u043f\u0430\u0440\u044b \u043a\u043d\u0438\u0433 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f - \u043f\u043e\u043b\u0443\u0441\u0443\u043c\u043c\u0430 \u0438\u0445 \u043e\u0446\u0435\u043d\u043e\u043a\n\n\u041a\u043e\u043b\u043b\u0430\u0431\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u0443\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043d\u0430 \u0441\u043b\u0430\u0439\u0434\u0435 50 \u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u0438, \u043f\u043e\u0441\u043e\u0432\u0435\u0442\u043e\u0432\u0430\u0432 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0442\u043e\u043f-10 \u043a\u043d\u0438\u0433 \u0441 \u0441\u0430\u043c\u043e\u0439 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u043e\u0439. \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 User-based \u0438 Item-based \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u044c.\n\n\u0415\u0441\u043b\u0438 \u0441\u043e\u0432\u0441\u0435\u043c \u0441\u043b\u043e\u0436\u043d\u043e - \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043a\u0430\u043a \u0432 \u0441\u0435\u043c\u0438\u043d\u0430\u0440\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438, \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0432 \u043e\u0446\u0435\u043d\u043a\u0443 \"0\", \u0435\u0441\u043b\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 < 5 \u0438 \"1\" - \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435. \u0422\u043e\u0433\u0434\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0437\u0430 \u044d\u0442\u043e - 1 \u0431\u0430\u043b\u043b.\n\n\u0414\u043b\u044f Content-based, \u041a\u043e\u043b\u043b\u0430\u0431\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438, \u041c\u0430\u0442\u0440\u0438\u0447\u043d\u043e\u0439 \u0424\u0430\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c U2I \u0438 I2I \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438","80b88ed0":"## \u0410\u043d\u0434\u0440\u0435\u0435\u0432 \u0414\u0430\u043d\u0438\u043b ML-12","e7c0bca2":"## \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043b\u043e\u043a\u0430\u0446\u0438\u044e\n"}}