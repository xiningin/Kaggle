{"cell_type":{"6110acbe":"code","ce86e4db":"code","b04787a0":"code","cd74d86a":"code","10edc492":"code","be208f61":"code","21bab4e8":"code","caa1086b":"code","f2e82733":"code","a20fba48":"code","d3c4b373":"code","d3a03847":"code","b1ae4dcc":"code","351b486e":"code","aaed8670":"code","dfce1992":"code","79fe961d":"code","aa769817":"code","bca8174a":"code","1b537c41":"code","e014d768":"code","b4256de0":"code","ca2ab792":"code","af522d27":"code","09ebe3d3":"code","2216cab8":"code","37bfb6d5":"code","72e8133b":"code","cc57dfaf":"code","c2598e33":"code","6cee47c8":"code","fca23aaa":"code","3063a358":"code","8daa2b41":"markdown"},"source":{"6110acbe":"import pandas as pd\nimport numpy as np","ce86e4db":"data =pd.read_excel(io=\"..\/input\/hotels-accommodation-prices-dataset\/Hotels.xlsx\",engine='openpyxl')  ","b04787a0":"from sklearn.model_selection import StratifiedShuffleSplit\n\nsplit = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\nfor train_index, test_index in split.split(data, data[\"Customer rating\"]):\n    strat_train_set = data.loc[train_index]\n    strat_test_set = data.loc[test_index]","cd74d86a":"data = strat_train_set.copy()","10edc492":"predicting_column = \"Price(BAM)\"\ndata = strat_train_set.drop(predicting_column, axis=1) # drop labels for training set\ndata_labels = strat_train_set[predicting_column].copy()","be208f61":"from sklearn.base import BaseEstimator, TransformerMixin\n\n\nclass NumericalTransformerA(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass        \n    \n    def fit( self, X ,y = None):\n        return self\n    \n    def transform(self, X, y = None):\n        X.loc[:,\"square_per_star\"] = X[\"Squares\"] \/ X[\"Hotel star rating\"]        \n        return X\n            ","21bab4e8":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler","caa1086b":"num_pipeline = Pipeline([#('num_transformer', NumericalTransformerA() ),\n                         (\"std_scaler\", StandardScaler())\n                         ]) ","f2e82733":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\n\nnum_attribs = [\"Hotel star rating\",\"Distance\",\"Customer rating\",\"Rooms\",\"Squares\"]\ncat_attribs = [\"City\"]\n\nfull_pipeline = ColumnTransformer([\n    (\"num\", num_pipeline, num_attribs),\n    (\"cat\", OneHotEncoder(), cat_attribs),\n])\ndata_prepared = full_pipeline.fit_transform(data)","a20fba48":"data_prepared","d3c4b373":"from sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\nlin_reg.fit(data_prepared, data_labels)","d3a03847":"from sklearn.tree import DecisionTreeRegressor\n\ntree_reg = DecisionTreeRegressor(random_state=42)\ntree_reg.fit(data_prepared, data_labels)","b1ae4dcc":"from sklearn.ensemble import RandomForestRegressor\nforest_reg = RandomForestRegressor()\nforest_reg.fit(data_prepared, data_labels)","351b486e":"from sklearn.svm import SVR\n\nsvm_reg = SVR(kernel=\"linear\")\nsvm_reg.fit(data_prepared, data_labels)\n","aaed8670":"from sklearn.model_selection import cross_val_score\n\ndef display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard deviation:\", scores.std())","dfce1992":"tree_scores = cross_val_score(tree_reg, data_prepared, data_labels, scoring=\"neg_mean_squared_error\", cv=10)\ntree_rmse_scores = np.sqrt(-tree_scores)\ndisplay_scores(tree_rmse_scores)","79fe961d":"lin_scores = cross_val_score(lin_reg, data_prepared, data_labels, scoring=\"neg_mean_squared_error\", cv=10)\nlin_rmse_scores = np.sqrt(-lin_scores)\ndisplay_scores(lin_rmse_scores)","aa769817":"forest_scores = cross_val_score(forest_reg, data_prepared, data_labels, scoring=\"neg_mean_squared_error\", cv=10)\nforest_rmse_scores = np.sqrt(-forest_scores)\ndisplay_scores(forest_rmse_scores)","bca8174a":"svm_scores = cross_val_score(svm_reg, data_prepared, data_labels, scoring=\"neg_mean_squared_error\", cv=10)\nsvm_rmse_scores = np.sqrt(-svm_scores)\ndisplay_scores(svm_rmse_scores)","1b537c41":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = [\n    # try 12 (3\u00d74) combinations of hyperparameters\n    {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]}, # 3 * 4 \n    # then try 6 (2\u00d73) combinations with bootstrap set as False\n    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]}, # 1 * 2 * 3\n  ]\n# total params tried (3 * 4  + 1 * 2 * 3)  * 5  # cv = 5 \n\ngrid_forest_reg = RandomForestRegressor(random_state=42)\n# total 12 + 6 * cv=5\ngrid_search = GridSearchCV(grid_forest_reg, param_grid, cv=5, scoring=\"neg_mean_squared_error\", return_train_score=True)\ngrid_search.fit(data_prepared, data_labels)\n# training across 5 folds, ","e014d768":"grid_search.best_params_","b4256de0":"grid_search.best_estimator_","ca2ab792":"cvres = grid_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(-mean_score), params)","af522d27":"# Randomised Search instead of GridSearch\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint\n\nparam_distribs = {\"n_estimators\": randint(low=1, high=200),\n                 \"max_features\": randint(low=1, high=8)}\n\nrandom_forest_reg = RandomForestRegressor(random_state=42)\nrnd_search = RandomizedSearchCV(random_forest_reg, param_distributions=param_distribs, n_iter=10, cv=5, scoring=\"neg_mean_squared_error\", random_state=42)\nrnd_search.fit(data_prepared, data_labels)","09ebe3d3":"cvres = rnd_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(-mean_score), params)","2216cab8":"# Feautre Importances\nfeature_importances = grid_search.best_estimator_.feature_importances_\nfeature_importances\n","37bfb6d5":"cat_encoder = full_pipeline.named_transformers_[\"cat\"]\ncat_one_hot_attribs = list(cat_encoder.categories_[0])\nattributes = num_attribs + cat_one_hot_attribs\nsorted(zip(feature_importances, attributes),reverse=True)\n","72e8133b":"final_model = rnd_search.best_estimator_","cc57dfaf":"X_test = strat_test_set.drop(predicting_column, axis=1)\ny_test = strat_test_set[predicting_column].copy()\n\nX_test_prepared = full_pipeline.transform(X_test)","c2598e33":"final_predictions = final_model.predict(X_test_prepared)\n\nfrom sklearn.metrics import mean_squared_error\nfinal_mse = mean_squared_error(y_test, final_predictions)\nfinal_rmse = np.sqrt(final_mse)","6cee47c8":"final_rmse","fca23aaa":"from scipy import stats","3063a358":"confidence = 0.95\nsquared_errors = (final_predictions - y_test) ** 2\nmean = squared_errors.mean()\nm = len(squared_errors)\n\nnp.sqrt(stats.t.interval(confidence, m - 1,\n                         loc=np.mean(squared_errors),\n                         scale=stats.sem(squared_errors)))","8daa2b41":"# Fine tuning a model"}}