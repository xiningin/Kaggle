{"cell_type":{"da321af2":"code","1c41451b":"code","0efd4111":"code","c506e0c5":"code","7262e93c":"code","32b16688":"code","6966d0fe":"code","6dd866bc":"code","6b19977e":"code","277b47f6":"code","01775a4e":"code","8bc72359":"code","ad9a09cc":"code","fa5952f2":"code","afb452ac":"code","d970e6e4":"code","f8308a8e":"code","2586fe5f":"code","f74c5b5a":"code","02a6fa26":"code","463be871":"code","9cf6166e":"code","d442dab4":"code","27c0608a":"code","86034972":"code","4ad2cea5":"code","0af39b98":"code","934cfd8c":"code","84b49b60":"code","1072790f":"code","079e1da9":"code","09233b9f":"code","f25b18b6":"code","7da9f0d6":"code","5190dd31":"code","7f6a0487":"code","ccb9481a":"code","f1b33beb":"code","80ccdcae":"code","6bfc4065":"code","c784d142":"code","638fd406":"code","4d9bbb07":"code","091eb42e":"markdown","c447e447":"markdown"},"source":{"da321af2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","1c41451b":"dt=pd.read_csv(r'..\/input\/car-price-prediction\/CarPrice_Assignment.csv')\ndt.head()","0efd4111":"dt.isnull().sum()","c506e0c5":"dt['CarName'].unique()","7262e93c":"dt['CarName'].replace(to_replace=r'alf.+', value='alfa', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'aud.+', value='audi', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'bmw.+', value='bmw', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'chevrolet.+', value='chevrolet', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'dodge.+', value='dodge', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'honda c.+', value='honda civic', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'honda ac.+', value='honda accord', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'isuzu.+', value='isuzu', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'jaguar.+', value='jaguar', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'max.+', value='maxda', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'maz.+', value='mazda', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'bui.+', value='buick', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'mitsu.+', value='mitsubishi', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'ni.+', value='nissan', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'N.+', value='nissan', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'peug.+', value='peugeot', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'ply.+', value='plymouth', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'por.+', value='porsche', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'rena.+', value='renault', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'saab.+', value='saab', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'suba.+', value='subaru', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'toyota corol.+', value='toyota corolla', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'toyota corona.+', value='toyota corona', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'toyota celica.+', value='toyota celica', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'toyou.+', value='toyota tercel', regex=True, inplace=True),\n\ndt['CarName'].replace(to_replace=r'vokswagen.+', value='volkswagen', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'volkswagen.+', value='volkswagen', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'vw.+', value='volkswagen', regex=True, inplace=True),\ndt['CarName'].replace(to_replace=r'volvo.+', value='volvo', regex=True, inplace=True),","32b16688":"dt['CarName'].unique()","6966d0fe":"len(dt['CarName'].unique())","6dd866bc":"dt.head()","6b19977e":"x=dt.drop(columns=['price'])\ny=dt[['price']]","277b47f6":"plt.figure(figsize=(25,16))\nsns.heatmap(x.corr(),annot=True)","01775a4e":"#### with the dollowing function we can select highly correlated features\n\n\ndef correlation(dataset, threshold):\n    col_corr=set()\n    corr_matrix=dataset.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if abs(corr_matrix.iloc[i,j])>threshold:\n                colname=corr_matrix.columns[i]\n                col_corr.add(colname)\n    return col_corr","8bc72359":"corr_features=correlation(x,0.85)\ncorr_features","ad9a09cc":"x1=x.drop(columns=corr_features)\nx1.head()","fa5952f2":"from sklearn.feature_selection import f_regression","afb452ac":"p_values=f_regression(x1.select_dtypes(exclude=object),y)[1]\np_values=p_values.round(3)\np_values","d970e6e4":"cols=x1.select_dtypes(exclude=object).columns\ncols","f8308a8e":"p_value=pd.DataFrame({'features':cols})\np_value['p_values']=p_values\np_value","2586fe5f":"p_value[p_value['p_values']>0.05]\n","f74c5b5a":"### as this feature has p value > 0.05 we need to discard all these features","02a6fa26":"x2=x1.drop(columns=['car_ID','symboling','carheight','stroke','compressionratio','peakrpm'])\nx2","463be871":"x3=pd.get_dummies(x2,drop_first=True)\nx3","9cf6166e":"p_values=f_regression(x3,y)[1]\np_values=p_values.round(3)\np_values","d442dab4":"p_df=pd.DataFrame({'features':x3.columns})\np_df['p_value']=p_values\np_df","27c0608a":"drop=p_df[p_df['p_value']>0.05]\ndrop","86034972":"drop_cols=[]\nfor i in drop['features']:\n    drop_cols.append(i)","4ad2cea5":"drop_cols","0af39b98":"x4=x3.drop(columns=drop_cols)","934cfd8c":"x4","84b49b60":"sns.distplot(x4['wheelbase'])","1072790f":"sns.distplot(x4['carwidth'])","079e1da9":"sns.distplot(x4['boreratio'])","09233b9f":"sns.distplot(x4['citympg'])","f25b18b6":"from sklearn.model_selection import train_test_split","7da9f0d6":"x_train,x_test,y_train,y_test=train_test_split(x4,y)\n\nx_train.shape,x_test.shape,y_train.shape,y_test.shape","5190dd31":"from sklearn.linear_model import LinearRegression","7f6a0487":"lr=LinearRegression()","ccb9481a":"lr.fit(x_train,y_train)","f1b33beb":"lr.coef_","80ccdcae":"lr.intercept_","6bfc4065":"lr.score(x_train,y_train)","c784d142":"lr.predict(x_test)","638fd406":"y_test","4d9bbb07":"lr.score(x_test,y_test)","091eb42e":"# **Building Model**","c447e447":"****R score on test data= 0.87\n\n**R score on train data=0.94******"}}