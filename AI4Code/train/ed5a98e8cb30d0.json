{"cell_type":{"f392f5f5":"code","b6486294":"code","b340f842":"code","5d0d60bc":"code","d086d324":"code","26d1c91d":"code","233dadde":"code","65d20510":"code","2871e25f":"code","84438e51":"code","c9b4c506":"code","12fcdc2e":"markdown","ca907a83":"markdown","b6755ad8":"markdown","f9bfb893":"markdown","6715ba27":"markdown","2f760cf3":"markdown","ddac67ff":"markdown","b62b32ec":"markdown","9a1a2cfc":"markdown"},"source":{"f392f5f5":"# 1. Enable Internet in the Kernel (Settings side pane)\n\n# 2. Curl cache may need purged if v0.1.6 cannot be found (uncomment if needed). \n# !curl -X PURGE https:\/\/pypi.org\/simple\/kaggle-environments\n\n# ConnectX environment was defined in v0.1.6\n!pip install 'kaggle-environments>=0.1.6'","b6486294":"from kaggle_environments import evaluate, make, utils\n\nenv = make(\"connectx\", debug=True)\nenv.render()","b340f842":"# This agent random chooses a non-empty column.\n#configuration: {'episodeSteps': 1000, 'agentExec': 'LOCAL', 'agentTimeout': 16, 'actTimeout': 8, 'runTimeout': 1200, 'columns': 7, 'rows': 6, 'inarow': 4, 'timeout': 8}\n#observation: {'board': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'mark': 1}\n#for observation: board starts from top left and goes right then down. mark is which number represents our player\ndef minimax_agent(observation, configuration):\n    import random\n    import time\n    import numpy as np\n    from copy import deepcopy\n    start_time = time.time()\n    # Number of Columns on the Board.\n    columns = configuration.columns\n    # Number of Rows on the Board.\n    rows = configuration.rows\n    # Number of Checkers \"in a row\" needed to win.\n    inarow = configuration.inarow\n    # The current serialized Board (rows x columns).\n    board = observation.board\n    # Which player the agent is playing as (1 or 2).\n    mark = observation.mark\n    boardarray = np.array(board).reshape(rows, columns).tolist()\n    inf = np.inf\n    nodesExpanded = 0\n    depth = 0\n    maxDepth = 1\n    timeAmount = configuration.timeout - 1\n    \n    #a class representing the board and containing helper functions for board tree search\n    class Connect(object):\n        def __init__(self, board, columns, rows, mark, inarow, depth=0, parent=None, indexNum=None):\n            self.board = board #board state\n            self.columns = columns #number of columns\n            self.rows = rows #number of rows\n            self.mark = mark #what the newly placed mark should be\n            self.inarow = inarow #how many to match in a row\n            self.depth = depth #how far the tree has been expanded so far\n            self.parent = parent #the parent that the board came from\n            self.indexNum = indexNum #the piece that was just placed\n        def getMoves(self):\n            #get all possible moves by checking if the top of the board is empty for each column\n            moves = []\n            if len(moves) == 0:\n                for col in range(self.columns):\n                    if self.board[0][col] == 0:\n                        moves.append(col)\n            return moves\n        \n        \n        def evaluate(self):\n            \n            #return a score evaluating the board, positive for favoring player 1, negative for favoring player 2, and magnitude of infinity for if a certain player has won\n            score = 0\n            #how much more weight a longer sequence of pieces should have over a shorter one (ex. 3 in a row is [branchConstant] times more important than 2 in a row)\n            branchConstant = 6\n            #lists marks on board that are beneficial for each respective player (ex. player 1 can have 0 or 1, player 2 can have 0 or 2)\n            allowed = [[0, self.mark], [0, 3 - self.mark]]\n            \n            #code that counts the marks of each side to determine which player moves next\n            playerTurn = 0\n            for row in range(self.rows):\n                for col in range(self.columns):\n                    if self.board[row][col] == 1:\n                        playerTurn += 1\n                    elif self.board[row][col] == 2:\n                        playerTurn -= 1\n            playerTurn += 1\n            \n            \n            #checks conditions for both players to compare them\n            for turn in range(len(allowed)):\n                #iterates over rows from bottom to top\n                for row in range(self.rows - 1, -1, -1):\n                    #iterates over columns\n                    for col in range(self.columns):\n                        #the following code checks for certain conditions in the patterns:\n                        #the four patterns: vertical line, horizontal line, diagonal 1 and diagonal 2\n                        #consistency: how much of a line is filled with 0's or the player's mark\n                        \n                        \n                        #vertical lines\n                        #don't go so far down the board that the vertical line goes off the board\n                        if row < self.rows - (self.inarow - 1):\n                            consistency = 0\n                            \n                            #counts how many places in the vertical line are 0 or the player's mark\n                            for inc in range(self.inarow):\n                                if self.board[row + inc][col] in allowed[turn]:\n                                    consistency += 1\n                            #if there are no opponent's marks in that line, then calculate and add score\n                            if consistency == self.inarow:\n                                consistency = 0\n                                \n                                #code to check how many marks are in a row\n                                for inc2 in range(self.inarow):\n                                    consistency += allowed[turn].index(self.board[row + inc2][col])\n                                #add score\n                                score += branchConstant ** consistency if turn == 0 else -1 * branchConstant ** consistency\n                                #if the winning amount is in a row then return winning magnitude score\n                                if consistency == self.inarow:\n                                    return inf if turn == 0 else -inf\n                                #if one more mark in a row to win and its that players turn then return winning magnitude score\n                                if consistency == self.inarow - 1:\n                                    for inc3 in range(self.inarow):\n                                        if self.board[row + inc3][col] == 0:\n                                            if playerTurn == allowed[turn][1] and (row + inc3 == self.rows - 1 or self.board[row + inc3 + 1][col] != 0):\n                                                return inf if turn == 0 else -inf\n                        \n                        #horizontal lines\n                        #don't go so far left on the board that the horizontal line goes off the board\n                        if col < self.columns - (self.inarow - 1):\n                            consistency = 0\n                            \n                            #counts how many places in the vertical line are 0 or the player's mark\n                            for inc in range(self.inarow):\n                                if self.board[row][col + inc] in allowed[turn]:\n                                    consistency += 1\n                            #if there are no opponent's marks in that line, then calculate and add score\n                            if consistency == self.inarow:\n                                consistency = 0\n                                \n                                #code to check how many marks are in a row\n                                for inc2 in range(self.inarow):\n                                    consistency += allowed[turn].index(self.board[row][col + inc2])\n                                #add score\n                                score += branchConstant ** consistency if turn == 0 else -1 * branchConstant ** consistency\n                                #if the winning amount is in a row then return winning magnitude score\n                                if consistency == self.inarow:\n                                    return inf if turn == 0 else -inf\n                                #if one more mark in a row to win and its that players turn then return winning magnitude score\n                                if consistency == self.inarow - 1:\n                                    for inc3 in range(self.inarow):\n                                        if self.board[row][col + inc3] == 0:\n                                            if playerTurn == allowed[turn][1] and (row == self.rows - 1 or self.board[row + 1][col + inc3] != 0):\n                                                return inf if turn == 0 else -inf\n                        \n                        #diagonal 1\n                        #don't go so far to the bottom right of the board that the diagonal line goes off the board\n                        if row < self.rows - (self.inarow - 1) and col < self.columns - (self.inarow - 1):\n                            consistency = 0\n                            \n                            #counts how many places in the vertical line are 0 or the player's mark\n                            for inc in range(self.inarow):\n                                if self.board[row + inc][col + inc] in allowed[turn]:\n                                    consistency += 1\n                            #if there are no opponent's marks in that line, then calculate and add score\n                            if consistency == self.inarow:\n                                consistency = 0\n                                \n                                #code to check how many marks are in a row\n                                for inc2 in range(self.inarow):\n                                    consistency += allowed[turn].index(self.board[row + inc2][col + inc2])\n                                #add score\n                                score += branchConstant ** consistency if turn == 0 else -1 * branchConstant ** consistency\n                                #if the winning amount is in a row then return winning magnitude score\n                                if consistency == self.inarow:\n                                    return inf if turn == 0 else -inf\n                                #if one more mark in a row to win and its that players turn then return winning magnitude score\n                                if consistency == self.inarow - 1:\n                                    for inc3 in range(self.inarow):\n                                        if self.board[row + inc3][col + inc3] == 0:\n                                            if playerTurn == allowed[turn][1] and (row + inc3 == self.rows - 1 or self.board[row + inc3 + 1][col + inc3] != 0):\n                                                return inf if turn == 0 else -inf\n                        \n                        #diagonal 2\n                        #don't go so far to the bottom left of the board that the diagonal line goes off the board\n                        if row > self.inarow - 2 and col < self.columns - (self.inarow - 1):\n                            consistency = 0\n                            \n                            #counts how many places in the vertical line are 0 or the player's mark\n                            for inc in range(self.inarow):\n                                if self.board[row - inc][col + inc] in allowed[turn]:\n                                    consistency += 1\n                            #if there are no opponent's marks in that line, then calculate and add score\n                            if consistency == self.inarow:\n                                consistency = 0\n                                \n                                #code to check how many marks are in a row\n                                for inc2 in range(self.inarow):\n                                    consistency += allowed[turn].index(self.board[row - inc2][col + inc2])\n                                #add score\n                                score += branchConstant ** consistency if turn == 0 else -1 * branchConstant ** consistency\n                                #if the winning amount is in a row then return winning magnitude score\n                                if consistency == self.inarow:\n                                    return inf if turn == 0 else -inf\n                                #if one more mark in a row to win and its that players turn then return winning magnitude score\n                                if consistency == self.inarow - 1:\n                                    for inc3 in range(self.inarow):\n                                        if self.board[row - inc3][col + inc3] == 0:\n                                            if playerTurn == allowed[turn][1] and (row - inc3 == self.rows - 1 or self.board[row - inc3 + 1][col + inc3] != 0):\n                                                return inf if turn == 0 else -inf\n            \n            return score\n        def makeMove(self, col, marker):\n            #gets the 'child' of the current board created by making move in the [col] column\n            board2 = [row[:] for row in self.board]\n            for row in range(self.rows - 1,-1,-1):\n                if board2[row][col] == 0:\n                    board2[row][col] = marker\n                    return Connect(board2, self.columns, self.rows, self.mark, self.inarow, self.depth + 1, self, row * self.columns + col)\n                    break\n        def display(self):\n            #displays the connect grid\n            boardstring = \"\"\n            for row in range(self.rows):\n                for col in range(self.columns):\n                    boardstring += str(self.board[row][col])\n                boardstring += \"\\n\"\n            print(boardstring)\n        def terminal_test(self):\n            #returns -2 if the maximum depth or search time is exceeded, 0 if the game isn't over, or 1\/-1 for which player won\n            #its the same code as evaluate but without the score adding\n            \n            nonlocal maxDepth, timeAmount\n            #no need to check if the game is won if depth is 0 because then it wouldn't be called\n            if self.depth == 0:\n                return 0\n            allowed = [self.mark, 3 - self.mark]\n            for turn in allowed:\n                for row in range(self.rows - 1, -1, -1):\n                    for col in range(self.columns):\n                        #vertical\n                        if row < self.rows - (self.inarow - 1):\n                            consistency = 0\n                            for inc in range(self.inarow):\n                                if self.board[row + inc][col] == turn:\n                                    consistency += 1\n                            if consistency == self.inarow:\n                                return 1 if turn == self.mark else -1\n                        #horizontal\n                        if col < self.columns - (self.inarow - 1):\n                            consistency = 0\n                            for inc in range(self.inarow):\n                                if self.board[row][col + inc] == turn:\n                                    consistency += 1\n                            if consistency == self.inarow:\n                                return 1 if turn == self.mark else -1\n                        #diagonal 1\n                        if row < self.rows - (self.inarow - 1) and col < self.columns - (self.inarow - 1):\n                            consistency = 0\n                            for inc in range(self.inarow):\n                                if self.board[row + inc][col + inc] == turn:\n                                    consistency += 1\n                            if consistency == self.inarow:\n                                return 1 if turn == self.mark else -1\n                        #diagonal 2\n                        if row > self.inarow - 2 and col < self.columns - (self.inarow - 1):\n                            consistency = 0\n                            for inc in range(self.inarow):\n                                if self.board[row - inc][col + inc] == turn:\n                                    consistency += 1\n                            if consistency == self.inarow:\n                                return 1 if turn == self.mark else -1\n            #if depth or time is exceeded, return -2\n            if time.time() - start_time > timeAmount or self.depth == maxDepth:\n                return -2\n            return 0\n    \n    def minimize(state, alpha, beta, useAB):     \n        #minimax with useAB determining whether to use alpha-beta pruning\n        nonlocal depth, nodesExpanded\n        depth = state.depth if state.depth > depth else depth\n        termScore = state.terminal_test()\n        if termScore == -1:\n            return (None, -inf)\n        elif termScore == 1:\n            return (None, inf)\n        elif termScore == -2:\n            return (None, state.evaluate())\n\n        minChildMinUtility = (None, inf)\n        possibleMoves = state.getMoves()\n        for move in possibleMoves:\n            nodesExpanded += 1\n            child = state.makeMove(move, 3 - state.mark)\n            maxChildMaxUtility = maximize(child, alpha, beta, useAB)\n            if maxChildMaxUtility[1] < minChildMinUtility[1]:\n                minChildMinUtility = (child, maxChildMaxUtility[1])\n            if minChildMinUtility[1] == -inf:\n                return minChildMinUtility\n            if useAB and minChildMinUtility[1] <= alpha:\n                break\n            if useAB and minChildMinUtility[1] < beta:\n                beta = minChildMinUtility[1]\n        return minChildMinUtility\n\n    def maximize(state, alpha, beta, useAB):\n        #minimax with useAB determining whether to use alpha-beta pruning\n        nonlocal depth, nodesExpanded\n        depth = state.depth if state.depth > depth else depth\n        termScore = state.terminal_test()\n        if termScore == -1:\n            return (None, -inf)\n        elif termScore == 1:\n            return (None, inf)\n        elif termScore == -2:\n            return (None, state.evaluate())\n        \n        maxChildMaxUtility = (None, -inf)\n        possibleMoves = state.getMoves()\n        for move in possibleMoves:\n            nodesExpanded += 1\n            child = state.makeMove(move, state.mark)\n            minChildMinUtility = minimize(child, alpha, beta, useAB)\n            if minChildMinUtility[1] > maxChildMaxUtility[1]:\n                maxChildMaxUtility = (child, minChildMinUtility[1])\n            if maxChildMaxUtility[1] == inf:\n                return maxChildMaxUtility\n            if useAB and maxChildMaxUtility[1] >= beta:\n                break\n            if useAB and maxChildMaxUtility[1] > alpha:\n                alpha = maxChildMaxUtility[1]\n        return maxChildMaxUtility\n    #create board, and check if there is only one move to make, and make that move if there is (no need to search the tree)\n    currentBoard = Connect(boardarray, columns, rows, mark, inarow)\n    moves = currentBoard.getMoves()\n    if len(moves) == 0:\n        return None\n    if len(moves) == 1:\n        return moves[0]\n    \n    #iterative deepening with the minimax search\n    #starts at depth 1 and continues increasing depth until time limit is reached and makes a conclusion on the best move to make\n    childUtility = (None, 0)\n    prevChildUtility = (None, 0)\n    utilities = []\n    #while loop keeps expanding depth until the time limit is exceeded or a guaranteed win is calculated\n    while time.time() - start_time < timeAmount and childUtility[1] != inf:\n        prevChildUtility = childUtility\n        childUtility = maximize(currentBoard, -inf, inf, True)\n        utilities.append(childUtility[1])\n        maxDepth += 1\n    #print(str(utilities) + \" \" + str(time.time() - start_time)[0:4] + \" \" + str(nodesExpanded) + \" \" + str(maxDepth) + \" \" + str(mark))\n    #code to check possible errors before selecting the move\n    if time.time() - start_time < timeAmount and childUtility[1] == inf:\n        return childUtility[0].indexNum % childUtility[0].columns\n    if prevChildUtility[0] == None:\n        if childUtility[0] == None:\n            #print(str(maxDepth) + \"error found\")\n            return moves[random.randint(0, len(moves) - 1)] if moves else None\n        return childUtility[0].indexNum % childUtility[0].columns\n    return prevChildUtility[0].indexNum % prevChildUtility[0].columns","5d0d60bc":"# This agent random chooses a non-empty column.\n#configuration: {'episodeSteps': 1000, 'agentExec': 'LOCAL', 'agentTimeout': 16, 'actTimeout': 8, 'runTimeout': 1200, 'columns': 7, 'rows': 6, 'inarow': 4, 'timeout': 8}\n#observation: {'board': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'mark': 1}\n#for observation: board starts from top left and goes right then down. mark is which number represents our player\ndef mcts_agent(observation, configuration):\n    import random\n    import time\n    import numpy as np\n    import math\n    from copy import deepcopy\n    start_time = time.time()\n    # Number of Columns on the Board.\n    columns = configuration.columns\n    # Number of Rows on the Board.\n    rows = configuration.rows\n    # Number of Checkers \"in a row\" needed to win.\n    inarow = configuration.inarow\n    # The current serialized Board (rows x columns).\n    board = observation.board\n    # Which player the agent is playing as (1 or 2).\n    mark = observation.mark\n    boardarray = np.array(board).reshape(rows, columns).tolist()\n    nodesExpanded = 0\n    timeAmount = configuration.timeout - 1\n    c = 1 #UCT score parameter\n    global connectStates\n    try:\n        connectStates[\"x\"]\n    except:\n        #print(\"reset dict\")\n        connectStates = dict()\n        connectStates[\"x\"] = \"y\"\n        \n    def toBoardStr(board):\n        return ''.join(str(e) for row in board for e in row)\n    \n    #a class representing the board and containing helper functions for board tree search\n    class Connect(object):\n        def __init__(self, board, columns, rows, mark, inarow, depth=0, parent=None, indexNum=None):\n            self.board = board #board state\n            self.columns = columns #number of columns\n            self.rows = rows #number of rows\n            self.mark = mark #what the newly placed mark should be\n            self.inarow = inarow #how many to match in a row\n            self.depth = depth #how far the tree has been expanded so far\n            self.parent = parent #the parent that the board came from\n            self.indexNum = indexNum #the piece that was just placed\n            self.totalReward = 0 #the rewards propagated from children\n            self.numTrials = 0 #the number of propagated rewards from children\n        def uct_score(self):\n            if self.numTrials == 0:\n                return math.inf\n            else:\n                return -self.totalReward \/ self.numTrials + c * math.sqrt(math.log(connectStates[self.parent].numTrials) \/ self.numTrials)\n        def getMoves(self):\n            #get all possible moves by checking if the top of the board is empty for each column\n            moves = []\n            if len(moves) == 0:\n                for col in range(self.columns):\n                    if self.board[0][col] == 0:\n                        moves.append(col)\n            return moves\n        def getChildrenIndices(self):\n            global connectStates\n            #gets the 'child' of the current board created by making move in the [col] column\n            childrenIndices = []\n            board2 = [row[:] for row in self.board]\n            for col in range(self.columns):\n                for row in range(self.rows - 1,-1,-1):\n                    if board2[row][col] == 0:\n                        board2[row][col] = self.mark\n                        newBoardStr = toBoardStr(board2)\n                        if not newBoardStr in connectStates:\n                            newBoard = Connect(board2, self.columns, self.rows, 3 - self.mark, self.inarow, self.depth + 1, toBoardStr(self.board), row * self.columns + col)\n                            connectStates[newBoardStr] = newBoard\n                        childrenIndices.append(newBoardStr)\n                        board2 = [row[:] for row in self.board]\n                        break\n            return childrenIndices\n        def display(self):\n            #displays the connect grid\n            boardstring = \"\"\n            for row in range(self.rows):\n                for col in range(self.columns):\n                    boardstring += str(self.board[row][col])\n                boardstring += \"\\n\"\n            print(boardstring)\n        def tie(self):\n            return not(any(mark == 0 for row in self.board for mark in row))\n        def terminal_test(self):\n            #returns 0 if the game isn't over\/no one won, or 1\/-1 for which player won\n            #no need to check if the game is won if depth is 0 because then it wouldn't be called\n            if self.depth == 0 or self.tie():\n                return 0\n            allowed = [self.mark, 3 - self.mark]\n            for turn in allowed:\n                for row in range(self.rows - 1, -1, -1):\n                    for col in range(self.columns):\n                        #vertical\n                        if row < self.rows - (self.inarow - 1):\n                            consistency = 0\n                            for inc in range(self.inarow):\n                                if self.board[row + inc][col] == turn:\n                                    consistency += 1\n                            if consistency == self.inarow:\n                                return 1 if turn == self.mark else -1\n                        #horizontal\n                        if col < self.columns - (self.inarow - 1):\n                            consistency = 0\n                            for inc in range(self.inarow):\n                                if self.board[row][col + inc] == turn:\n                                    consistency += 1\n                            if consistency == self.inarow:\n                                return 1 if turn == self.mark else -1\n                        #diagonal 1\n                        if row < self.rows - (self.inarow - 1) and col < self.columns - (self.inarow - 1):\n                            consistency = 0\n                            for inc in range(self.inarow):\n                                if self.board[row + inc][col + inc] == turn:\n                                    consistency += 1\n                            if consistency == self.inarow:\n                                return 1 if turn == self.mark else -1\n                        #diagonal 2\n                        if row > self.inarow - 2 and col < self.columns - (self.inarow - 1):\n                            consistency = 0\n                            for inc in range(self.inarow):\n                                if self.board[row - inc][col + inc] == turn:\n                                    consistency += 1\n                            if consistency == self.inarow:\n                                return 1 if turn == self.mark else -1\n            return 0\n    def default_policy_simulation(startStr):\n        statesStr = [startStr]\n        scoreMult = 1\n        newStr = random.choice(connectStates[startStr].getChildrenIndices())\n        statesStr.append(newStr)\n        scoreMult *= -1\n        while connectStates[newStr].terminal_test() == 0 and not connectStates[newStr].tie():\n            newStr = random.choice(connectStates[newStr].getChildrenIndices())\n            statesStr.append(newStr)\n            scoreMult *= -1\n        if connectStates[startStr].numTrials != 0:\n            pass\n            #connectStates[startStr].display()\n            #connectStates[newStr].display()\n            #print(str(connectStates[startStr].totalReward) + \" \" + str(connectStates[startStr].numTrials))\n        return scoreMult * connectStates[newStr].terminal_test()\n    def choose_UCT_child(boardStr):\n        childrenStr = connectStates[boardStr].getChildrenIndices()\n        children_scores = [connectStates[childStr].uct_score() for childStr in childrenStr]\n        return childrenStr[children_scores.index(max(children_scores))]\n    def choose_best_child(boardStr):\n        childrenStr = connectStates[boardStr].getChildrenIndices()\n        children_scores = [-connectStates[childStr].totalReward for childStr in childrenStr]\n        return childrenStr[children_scores.index(max(children_scores))]\n    def tree_run_single(boardStr):\n        nonlocal nodesExpanded\n        state = connectStates[boardStr]\n        if state.terminal_test() != 0 or state.tie():\n            backpropagate(state, state.terminal_test())\n            return\n        childrenStr = state.getChildrenIndices()\n        children = [connectStates[childStr] for childStr in childrenStr]\n        for x in range(len(children)):\n            if children[x].numTrials == 0:\n                nodesExpanded += 1\n                expand_simulate(childrenStr[x])\n                return\n        tree_run_single(choose_UCT_child(boardStr))\n    def backpropagate(state, score):\n        state.totalReward += score\n        state.numTrials += 1\n        #state.display()\n        #print(score)\n        if state.parent is not None:\n            backpropagate(connectStates[state.parent], -score)\n    def expand_simulate(boardStr):\n        score = simulate(boardStr)\n        backpropagate(connectStates[boardStr], score)\n    def simulate(boardStr):\n        state = connectStates[boardStr]\n        if state.terminal_test() != 0 or state.tie():\n            return state.terminal_test()\n        return -(default_policy_simulation(boardStr))\n    #create board, and check if there is only one move to make, and make that move if there is (no need to search the tree)\n    currentBoard = Connect(boardarray, columns, rows, mark, inarow)\n    moves = currentBoard.getMoves()\n    if len(moves) == 0:\n        return None\n    if len(moves) == 1:\n        return moves[0]\n    try:\n        connectStates = connectStates\n        currentBoard = connectStates[toBoardStr(currentBoard.board)]\n    except:\n        connectStates = dict()\n        connectStates[toBoardStr(currentBoard.board)] = currentBoard\n    currStr = toBoardStr(currentBoard.board)\n    while time.time() - start_time < timeAmount:\n        tree_run_single(currStr)\n    gameStr = choose_best_child(currStr)\n    #print(nodesExpanded)\n    for x in range(len(gameStr)):\n        if gameStr[x] != currStr[x]:\n            return x % columns","d086d324":"env.reset()\n# Play as the first agent against default \"random\" agent.\n\nenv.run([mcts_agent, minimax_agent])\nenv.render(mode=\"ipython\", width=500, height=450)","26d1c91d":"# Play as first position against random agent.\ntrainer = env.train([None, \"random\"])\n\nobservation = trainer.reset()\n\nwhile not env.done:\n    my_action = mcts_agent(observation, env.configuration)\n    print(\"My Action\", my_action)\n    observation, reward, done, info = trainer.step(my_action)\n    # env.render(mode=\"ipython\", width=100, height=90, header=False, controls=False)\nenv.render()","233dadde":"def mean_reward(rewards):\n    return sum(r[0] for r in rewards) \/ float(len(rewards))\n\n# Run multiple episodes to estimate its performance.\n#print(\"My Agent vs Negamax Agent:\", mean_reward(evaluate(\"connectx\", [mcts_agent, \"negamax\"], num_episodes=5)))","65d20510":"# \"None\" represents which agent you'll manually play as (first or second player).\nenv.play([None, minimax_agent], width=500, height=450)","2871e25f":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(minimax_agent, \"minimax_agent.py\")\nwrite_agent_to_file(mcts_agent, \"mcts_agent.py\")","84438e51":"# Note: Stdout replacement is a temporary workaround.\nimport sys\nout = sys.stdout\nminimax_submission = utils.read_file(\"\/kaggle\/working\/minimax_agent.py\")\nminimax_agent = utils.get_last_callable(minimax_submission)\nsys.stdout = out\n\nenv = make(\"connectx\", debug=True)\nenv.run([minimax_agent, minimax_agent])\nprint(\"Success!\" if env.state[0].status == env.state[1].status == \"DONE\" else \"Failed...\")","c9b4c506":"# Note: Stdout replacement is a temporary workaround.\nimport sys\nout = sys.stdout\nmcts_submission = utils.read_file(\"\/kaggle\/working\/mcts_agent.py\")\nmcts_agent = utils.get_last_callable(mcts_submission)\nsys.stdout = out\n\nenv = make(\"connectx\", debug=True)\nenv.run([mcts_agent, mcts_agent])\nprint(\"Success!\" if env.state[0].status == env.state[1].status == \"DONE\" else \"Failed...\")","12fcdc2e":"# Create an Agent\n\nTo create the submission, an agent function should be fully encapsulated (no external dependencies).  \n\nWhen your agent is being evaluated against others, it will not have access to the Kaggle docker image.  Only the following can be imported: Python Standard Library Modules, gym, numpy, scipy, \npytorch (1.3.1, cpu only), and more may be added later.\n\n","ca907a83":"# Validate Submission\nPlay your submission against itself.  This is the first episode the competition will run to weed out erroneous agents.\n\nWhy validate? This roughly verifies that your submission is fully encapsulated and can be run remotely.","b6755ad8":"# Test your Agent","f9bfb893":"# Play your Agent\nClick on any column to place a checker there (\"manually select action\").","6715ba27":"# Debug\/Train your Agent","2f760cf3":"# Evaluate your Agent","ddac67ff":"# Install kaggle-environments","b62b32ec":"# Create ConnectX Environment","9a1a2cfc":"# Write Submission File\n\n"}}