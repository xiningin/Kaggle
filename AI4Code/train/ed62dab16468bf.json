{"cell_type":{"61de6613":"code","69324f26":"code","6965ad62":"code","a4dd94ba":"code","2c78d6fb":"code","ab81b229":"code","479e2309":"code","52293f9d":"code","e1f42c5d":"markdown","6463e960":"markdown","9c4070b3":"markdown","7e914bac":"markdown","5d959293":"markdown","df7eb118":"markdown","b9067a0d":"markdown"},"source":{"61de6613":"!pip install -qU --no-warn-conflicts transformers --no-index --find-links=file:\/\/\/kaggle\/input\/coleridge-packages\n!pip install -qU --no-warn-conflicts tokenizers --no-index --find-links=file:\/\/\/kaggle\/input\/coleridge-packages\n!pip install -qU --no-warn-conflicts datasets --no-index --find-links=file:\/\/\/kaggle\/input\/coleridge-packages\n!pip install -qU --no-warn-conflicts fsspec --no-index --find-links=file:\/\/\/kaggle\/input\/coleridge-packages\n!pip install -qU --no-warn-conflicts seqeval --no-index --find-links=file:\/\/\/kaggle\/input\/coleridge-packages\n    \n# need to set wandb off otherwise we get errors using this kernel offline\n!wandb off","69324f26":"import numpy as np \nfrom transformers import (\n    BigBirdForTokenClassification,\n    BigBirdTokenizerFast,\n    BigBirdConfig,\n    TrainingArguments, \n    Trainer,\n    DataCollatorForTokenClassification,\n)\nfrom datasets import (\n    Dataset,\n    load_metric,\n)","6965ad62":"# tokenized_dataset = Dataset.from_json(\"..\/input\/coleridgetaggedsnippets\/tokenized_dataset_reduced.json\")\n# tokenized_dataset = tokenized_dataset.shuffle(seed=42)\n\ntokenized_dataset = Dataset.from_json(\"..\/input\/show-us-the-data-bigbird-dataprep\/tokenized_dataset.json\")","a4dd94ba":"# BigBird roberta-base\nmodel_class, tokenizer_class, pretrained_weights = (BigBirdForTokenClassification, BigBirdTokenizerFast, '..\/input\/huggingfacebigbirdrobertabase')\n\ntokenizer = tokenizer_class.from_pretrained(pretrained_weights)\n\ndata_collator = DataCollatorForTokenClassification(tokenizer)\n\nlabel_list = [\"O\", \"B\", \"I\"]\nlabel2id = {label : id for id, label in enumerate(label_list)}\nid2label = {id : label for label, id in label2id.items()}\n\ndef get_pretrained_model(checkpoint=pretrained_weights):\n    config = BigBirdConfig(attention_type=\"block_sparse\", gradient_checkpointing=True, num_labels=3, id2label=id2label, label2id=label2id)\n    return model_class.from_pretrained(checkpoint, config=config)","2c78d6fb":"# copy my_seqeval.py to the working directory because the input directory is non-writable\n!cp ..\/input\/coleridge-packages\/seqeval_script.py .\/","ab81b229":"# TODO: This could be improved to use f0.5 score (used on LB evaluation) instead of f1\n\nmetric = load_metric(\"seqeval_script.py\")\n\ndef compute_metrics(p):\n    predictions, labels = p\n    predictions = np.argmax(predictions, axis=2)\n\n    # Remove ignored index (special tokens)\n    true_predictions = [\n        [label_list[p] for (p, l) in zip(prediction, label) if l != -100]\n        for prediction, label in zip(predictions, labels)\n    ]\n    true_labels = [\n        [label_list[l] for (p, l) in zip(prediction, label) if l != -100]\n        for prediction, label in zip(predictions, labels)\n    ]\n\n    results = metric.compute(predictions=true_predictions, references=true_labels)\n    return {\n        \"precision\": results[\"overall_precision\"],\n        \"recall\": results[\"overall_recall\"],\n        \"f1\": results[\"overall_f1\"],\n        \"accuracy\": results[\"overall_accuracy\"],\n    }","479e2309":"batch_size = 4\n\nargs = TrainingArguments(\n    \"model_checkpoints\",\n    evaluation_strategy = \"epoch\",\n    per_device_train_batch_size=batch_size,\n    per_device_eval_batch_size=batch_size,\n    num_train_epochs=1,\n    save_total_limit=1,\n    save_strategy=\"steps\",\n    save_steps=1000,\n)\n\ntrainer = Trainer(\n    get_pretrained_model(\"..\/input\/coleridgemodelcheckpoint\"),\n    args,\n    train_dataset=tokenized_dataset,\n    eval_dataset=tokenized_dataset,\n    data_collator=data_collator,\n    tokenizer=tokenizer,\n    compute_metrics=compute_metrics\n)\n\ntrainer.train()","52293f9d":"trainer.save_model(\"\/saved_model\")","e1f42c5d":"# Load Training Data","6463e960":"## Run Training","9c4070b3":"## Metrics\n\nThe metrics will only reflect training accuracy as we are using the traning set for evaluation.\nThis could be improved by using kfold validation.","7e914bac":"# Instantiate Pretrained BigBird Model & Tokenizer","5d959293":"This notebook fine-tunes Google's BigBird model for the Coleridge Intiaitive Show US the data competition.  \n\nIt was difficult to get it to run even a single epoch within Kaggle's 9hr timout limit.  \n\nIn order to do that I separated out the data preparation, here: https:\/\/www.kaggle.com\/danieldorosz\/show-us-the-data-bigbird-dataprep  \nand the inference, here: https:\/\/www.kaggle.com\/danieldorosz\/show-us-the-data-bigbird-inference  \n\nA chunk of the logic is farmed-out to a coleridge-helpers utility script.   \n\nThe main intuition behind this effort was that I wanted to include as much context as possible in my training examples. \nAlso that I wanted to keep related context together. We have a ready-provided demarkation of context expressed as \nsections in the training data. So what I did was create contextual 'snippets' as my training examples. Each snippet \ncontains one or more sections such that my training examples get as close as possible to BigBird's maximum of 4096\ntokens, without breaking up any sections. If a single section is longer the training example limit, I break it up \nat the last period prior to the limit.   \n\nThe code is very much a rough-and-ready first draft, please don't judge me ;-) There is much to be improved for which \nI didn't have time. This mainly serves as a baseline to assess the score I could expect from this kind of approach.  \n\nI ran it a couple of times using the last checkpoint from the first (timed-out) run as input to the next.","df7eb118":"# Imports & Preamble","b9067a0d":"# Fine Tuning"}}