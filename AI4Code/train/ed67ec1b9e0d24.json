{"cell_type":{"657a0ca2":"code","1fc09f3d":"code","a6b0872c":"code","0463b58d":"code","263cd401":"code","4f80ba2d":"code","59d5a441":"code","00e3fda9":"code","bbd595f0":"code","a38d6f07":"code","6dfa52a6":"code","c2a45e26":"code","ac08c1d3":"code","3fc192dd":"code","470fa38c":"code","f2ed34af":"code","73c7d645":"code","7946cfcc":"code","b713210d":"code","0091b29a":"code","f42b2cba":"code","eed24b1a":"code","8b968fba":"code","ef0e06c0":"code","d91ff47f":"code","39e89115":"code","ca847875":"code","4ec7f64f":"code","09c88fa0":"code","9d943b86":"code","a5c4ddb6":"markdown","d84e930b":"markdown","5eba2b49":"markdown","6a36708e":"markdown","57ce9cf7":"markdown","71f9966f":"markdown","d649e40d":"markdown","2dc54fff":"markdown","79a774b7":"markdown","2c2eeea5":"markdown","750f8288":"markdown","84791e4a":"markdown","0134b7de":"markdown","4977d652":"markdown","20a578c1":"markdown","a51f9df6":"markdown","cfd0059c":"markdown","23a2bc1f":"markdown","36ee8f4c":"markdown","7bab8576":"markdown"},"source":{"657a0ca2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1fc09f3d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LassoCV\nfrom sklearn import metrics\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom scipy import stats\n%matplotlib inline\n\npd.set_option('display.max_columns',500)\npd.set_option('display.max_rows',500)","a6b0872c":"df = pd.read_csv('..\/input\/us-births-2018\/US_births(2018).csv', \n                 low_memory=False)","0463b58d":"def drop_rows(df):\n    '''\n    Dropping rows where missing: 'DBWT', 'BMI', 'DBWT', 'WTGAIN', 'PWgt_R', 'DLMP_MM', 'DLMP_YY'\n    '''\n    df.drop(df[df['DBWT'].eq(9999)].index, inplace=True)    \n    df.drop(df[df['BMI'].eq(99.9)].index, inplace=True)\n    df.drop(df[df['DBWT'].eq(9999)].index, inplace=True)\n    df.drop(df[df['WTGAIN'].eq(99)].index, inplace=True)\n    df.drop(df[df['PWgt_R'].eq(999)].index, inplace=True)\n    df.drop(df[df['DLMP_MM'].eq(99)].index, inplace=True)\n    df.drop(df[df['DLMP_YY'].eq(9999)].index, inplace=True)\n    \n    df.drop(columns=['IMP_SEX'], inplace=True)\n    return df\ndf = drop_rows(df)","263cd401":"def feature_engineer(df):\n    '''\n    Creating new column: 'first_birth', 'smoked', 'PRIORDEAD_cat', 'PRIORTERM_cat', 'PRIORLIVE_cat', \n    \n    '''\n\n    #creating new column called 'first_birth': Is the baby the Mom's first child? Yes:1 No:0\n    df['first_birth'] = np.where(df['ILLB_R'].eq(888), 1, 0)\n    df['plural_delivery'] = np.where(df['ILLB_R'].lt(4), 'Yes', 'No')\n\n\n    \n    #creating new column 'smoked': Did the mother smoke before pregnancy? Yes: Daily, No: None, Unknown: Unknown\n    conditions = [df['CIG_0'].eq(0),\n                  df['CIG_0'].eq(99)]\n    choices = ['None',\n               'Unknown']\n    df['smoked'] = np.select(conditions, choices, 'Daily')\n\n    \n    #creating new column 'PRIORDEAD_cat': Did the mother previously have miscarriages? Yes: Yes, No: None, Unknown: Unknown\n    conditions = [df['PRIORDEAD'].eq(0),\n                  df['PRIORDEAD'].eq(99)]\n    choices = ['None',\n               'Unknown']\n    df['PRIORDEAD_cat'] = np.select(conditions, choices, 'Yes')\n\n    \n    #creating new column 'PRIORTERM_cat': Did the mother previously have terminations? Yes: Yes, No:None, Unknown: Unknown\n    conditions = [df['PRIORTERM'].eq(0),\n                  df['PRIORTERM'].eq(99)]\n    choices = ['None',\n               'Unknown']\n    df['PRIORTERM_cat'] = np.select(conditions, choices, 'Yes')\n\n    #creating new column 'PRIORLIVE_cat': Did the mother previously birth living children: Yes: Yes, No: None, Unknown: Unknown\n    conditions = [df['PRIORLIVE'].eq(0),\n                  df['PRIORLIVE'].eq(99)]\n    choices = ['None',\n               'Unknown']\n    df['PRIORLIVE_cat'] = np.select(conditions, choices, 'Yes')\n\n    #creating new column 'pregnancy_length': An estimation of the gestation period by subtracting the month\/year of last menses from month\/year of baby born\n    conditions = [(df['DOB_MM'] > df['DLMP_MM']) & (2018 == df['DLMP_YY']),\n                  (df['DOB_MM'] > df['DLMP_MM']) & (2018 > df['DLMP_YY']),\n                  (df['DOB_MM'] < df['DLMP_MM']) & (2018 > df['DLMP_YY'])]\n    choices = [df['DOB_MM'] - df['DLMP_MM'],\n               ((df['DOB_YY'] - df['DLMP_YY'])* 12) + df['DOB_MM'] - df['DLMP_MM'],\n               ((df['DOB_YY'] - df['DLMP_YY'])* 12) - df['DLMP_MM'] + df['DOB_MM']]\n    df['pregnancy_length'] = np.select(conditions,choices, 12)\n    \n    #creating new column 'MAGER_cat': Mother's age is < 18: Minor, Mother's age is >= 18: Adult\n    df['MAGER_cat'] = np.where(df['MAGER'].lt(18),'Minor','Adult')\n\n    #creating new column 'pregnancy_cat: Binning pregnancy_length to 5 bins: 'Early','8','9','10','Late'\n    condition =[df['pregnancy_length'].eq(9),\n                df['pregnancy_length'].eq(8),\n                df['pregnancy_length'].eq(10),\n                df['pregnancy_length'].lt(7)]\n    choices = ['9',\n              '8',\n               '10',\n               'Early']\n    df['pregnancy_length_cat'] = np.select(condition,choices, 'Late')\n\n    #creating new column 'BMI_log':np.log(BMI) to normalize BMI\n    df['BMI_log'] = np.log(df['BMI'])\n    \n    #creating new column 'first_pregnancy': Is it mother's first live birth? Yes: 1, No: 0\n    df['first_live_birth'] = np.where(df['ILP_R'].eq(888), 1, 0)\n    \n    #creating new column 'first_natal': Is it mother's first natality event? Yes: 1, No: 0\n    df['first_natal'] = np.where(df['ILOP_R'].eq(888),1, 0)\n    \n    #adjusting 'PRECARE' values: if Unkonwn, impute 0\n    df['PRECARE'] = np.where(df['PRECARE'].eq(99), 0, df['PRECARE'])\n    \n    #adjusting 'PREVIS' values: if Unkonwn, impute 0\n    df['PREVIS'] = np.where(df['PREVIS'].eq(99), 0, df['PREVIS'])\n    \n    #creating new column 'T35AGE_older': Is mother's age older than 34? Yes: 1, No: 0\n    df['T35AGE_older'] = np.where(df['MAGER'].gt(34), 1, 0)\n    \n    #creating new column 'MOM_weight': manually computing mom's weight incase of missing values\n    df['MOM_weight'] = (df['M_Ht_In']**2)*df['BMI']\/704\n    \n    #creating new column '...': Weight gained divided by Mom's Weight\n    df['WTGAIN_div_MOM_weight'] = df['WTGAIN']\/df['MOM_weight']\n    \n    #creating new column '...': Weight gained divided by gestation period\n    df['WTGAIN_div_length'] = df['WTGAIN'] \/ df['pregnancy_length']\n    \n    #creating new column '...': calculating percentage of weight gained due to pregnancy\n    df['WT_percent_gain'] = df['WTGAIN'] \/ df['PWgt_R']\n    \n    #adjusting 'MAR_IMP': Marriage imputed should be 0 if left blank\n    df['MAR_IMP'] = np.where(df['MAR_IMP'].eq(' '),0,1)\n    \n    #adjusting 'DMAR': assigning blanks to a new variable 0 for unknowns\n    df['DMAR'] = np.where(df['DMAR'].eq(' '),0,df['DMAR'])\n    \n    #creating new column '...': \n    df['pregnancy_length_sqrt'] =  np.sqrt(df['pregnancy_length'])\n    \n    #dropping rows that with gestation period greater than 12 and less than 5, treating them as outliers\n    df.drop(df[df['pregnancy_length'].gt(12)].index,inplace=True)\n    df.drop(df[df['pregnancy_length'].lt(5)].index,inplace=True)\n    return df\n\ndf = feature_engineer(df)\ndf.reset_index(inplace=True, drop=True)","4f80ba2d":"X = df[['ATTEND','BFACIL', 'smoked', 'DOB_MM', 'DMAR','FHISPX','FEDUC', 'FRACE6', 'first_birth', 'plural_delivery', 'first_live_birth', 'first_natal','pregnancy_length_sqrt',\n        'IP_GON', 'LD_INDL', 'MAGER', 'T35AGE_older','MAR_IMP', 'MBSTATE_REC', 'MEDUC', 'MHISPX', 'MRAVE6', 'MTRAN', 'pregnancy_length', 'WTGAIN_div_MOM_weight','WTGAIN_div_length',\n        'NO_INFEC','NO_MMORB','NO_RISKS','PAY', 'PAY_REC','PRECARE','PREVIS', 'PRIORDEAD_cat', 'PRIORLIVE_cat', 'PRIORTERM_cat', 'PWgt_R', 'BMI_log','M_Ht_In', 'MOM_weight',\n        'RDMETH_REC', 'RESTATUS', 'RF_CESAR', 'SEX', 'WTGAIN','WT_percent_gain','MAGER_cat','pregnancy_length_cat','BMI'\n]]\n\n_X = pd.get_dummies(X, columns=['ATTEND', 'BFACIL','smoked', 'DOB_MM','DMAR','FHISPX','FEDUC','FRACE6', 'plural_delivery',\n                                'IP_GON','LD_INDL', 'T35AGE_older','MAR_IMP', 'MBSTATE_REC', 'MEDUC', 'MHISPX', 'MRAVE6', 'MTRAN',\n                                'NO_INFEC','NO_MMORB','NO_RISKS', 'PAY', 'PAY_REC','PRIORDEAD_cat', 'PRIORLIVE_cat','PRIORTERM_cat',\n                                'RDMETH_REC', 'RESTATUS', 'RF_CESAR', 'SEX','MAGER_cat','pregnancy_length_cat']).copy()\ny = df['DBWT']\n_X.shape","59d5a441":"def feat_eng_dummy(_X):\n    _X['MAGER_smoked_Daily'] = _X['MAGER'] * _X['smoked_Daily']\n    _X['NO_RISKS_1_length'] = _X['NO_RISKS_1'] * _X['pregnancy_length']\n    _X['RDMETH_REC_3_length'] = _X['RDMETH_REC_3'] * _X['pregnancy_length']\n    _X['RDMETH_REC_1_length'] = _X['RDMETH_REC_1'] * _X['pregnancy_length']\n    _X['ATTEND_1_length'] = _X['pregnancy_length'] * _X['ATTEND_1']\n    _X['MRAVE6_1_FRACE6_1'] = _X['MRAVE6_1'] * _X['FRACE6_1']\n    _X['BFACIL_1_length'] = _X['pregnancy_length'] * _X['BFACIL_1']\n    _X['BMI_log_length'] = _X['BMI_log'] * _X['pregnancy_length']\n    _X['M_Ht_In_length'] = _X['DMAR_1'] * _X['pregnancy_length']\n    _X['LD_INDL_N_length'] = _X['LD_INDL_N'] * _X['pregnancy_length']\n    _X['MTRAN_Y_length'] = _X['MTRAN_Y'] * _X['pregnancy_length']\n    _X['PRECARE_length'] = _X['PRECARE'] * _X['pregnancy_length']\n    _X['PREVIS_length'] = _X['PREVIS'] * _X['pregnancy_length']\n    _X['MOM_weight_length'] = _X['MOM_weight'] * _X['pregnancy_length']\n    _X['RDMETH_REC_3_pregnancy_length_cat_9'] = _X['RDMETH_REC_3'] * _X['pregnancy_length_cat_9']\n    _X['RF_CESAR_Y_pregnancy_length_cat_9'] = _X['RF_CESAR_Y'] * _X['pregnancy_length_cat_9']\n    \n    return _X\n\n_X = feat_eng_dummy(_X)","00e3fda9":"\n_X_columns = _X.columns\ncategorical_columns = []\ncontinuous_columns = []\nfor i in _X_columns:\n    if _X[i].max() == 1:\n        categorical_columns.append(i)\n    else:\n        continuous_columns.append(i)\n        \ndel _X_columns","bbd595f0":"_X['DBWT'] = y\nplt.figure(figsize=(14,10))\nsns.distplot(_X['DBWT'])\nplt.title('Distribution plot of Baby Weight in Grams')\nplt.xlabel('Baby Weight in Grams')\nplt.savefig('figure1.png');","a38d6f07":"plt.figure(figsize=(14,10))\nsns.distplot(_X[_X['SEX_M'].eq(0)]['DBWT'], label = 'Female')\nsns.distplot(_X[_X['SEX_M'].eq(1)]['DBWT'], label = 'Male')\nplt.title('Distribution of Baby Weight Separated by Gender')\nplt.xlabel('Baby Weight in Grams')\nplt.legend();","6dfa52a6":"# null: Male Baby Weight = Female Baby Weight\n# alt: Male Baby Weight != Female Baby Weight\n# alpha: 0.05\nstats.f_oneway(_X[_X['SEX_M'].eq(0)]['DBWT'],\n              _X[_X['SEX_M'].eq(1)]['DBWT'])\n# reject null. There is significant evidence to suggest that male babies weigh differently than females.","c2a45e26":"plt.figure(figsize=(14,10))\nsns.distplot(_X[_X['smoked_Daily'].eq(1)]['DBWT'], label = 'Used to Smoke Daily')\nsns.distplot(_X[_X['smoked_None'].eq(1)]['DBWT'], label = 'Used to Never Smoke')\nplt.title('Distribution of Baby Weight Separated by Mother Smoked History')\nplt.xlabel('Baby Weight in Grams')\nplt.legend();","ac08c1d3":"# null: Baby Weight of Moms who used to Smoke Daily = Baby Weight of Moms who never smoked\n# alt: Baby Weight of Moms who used to Smoke Daily != Baby Weight of Moms who never smoked\n# alpha: 0.05\nstats.f_oneway(_X[_X['smoked_Daily'].eq(1)]['DBWT'],\n              _X[_X['smoked_None'].eq(1)]['DBWT'])\n# reject null. There is significant evidence that moms who used to smoke have different baby weights than those who never smoked.","3fc192dd":"fig, ax = plt.subplots(figsize=(14,10))\nsns.boxplot(x='MRAVE6',y='DBWT', data=df, palette='muted')\nax.set_title('Distribution of Baby Weight Separated by Race')\nax.set_xlabel('Mother\\'s Race')\nax.set_ylabel('Baby Weight in Grams')\nax.set_xticklabels(['White(only)','Black(only)','AIAN(only)','Asian(only)','NHOPI(only)','More than one race']);","470fa38c":"# null: Baby Weights of Moms of different Race are equal\n# alt: Baby Weights of Moms of different Race are NOT equal\n# alpha: 0.05\nstats.f_oneway(_X[_X['MRAVE6_1'].eq(1)]['DBWT'],\n              _X[_X['MRAVE6_2'].eq(1)]['DBWT'],\n              _X[_X['MRAVE6_3'].eq(1)]['DBWT'],\n              _X[_X['MRAVE6_4'].eq(1)]['DBWT'],\n              _X[_X['MRAVE6_5'].eq(1)]['DBWT'],\n              _X[_X['MRAVE6_6'].eq(1)]['DBWT'])\n# reject null. There is significant evidence to suggest that the all race babies are not the same.","f2ed34af":"plt.figure(figsize=(14,10))\nsns.boxplot(x='pregnancy_length',y='DBWT',data=df, palette = 'muted')\nplt.title('Baby Weight depending on Total Months of Gestation')\nplt.ylabel('Baby Weight by Grams')\nplt.xlabel('Total Months of Gestation');","73c7d645":"# null: Baby weights of all gestation periods are equal\n# alt: Baby weights of all gestation periods are NOT equal\n# alpha: 0.05\nstats.f_oneway(df[df['pregnancy_length'].eq(5)]['DBWT'],\n              df[df['pregnancy_length'].eq(6)]['DBWT'],\n              df[df['pregnancy_length'].eq(7)]['DBWT'],\n              df[df['pregnancy_length'].eq(8)]['DBWT'],\n              df[df['pregnancy_length'].eq(9)]['DBWT'],\n               df[df['pregnancy_length'].eq(10)]['DBWT'],\n               df[df['pregnancy_length'].eq(11)]['DBWT'],\n               df[df['pregnancy_length'].eq(12)]['DBWT'])\n# reject null. There is significant evidence to suggest that that the length of gestation has an effect on baby weight","7946cfcc":"fig, ax = plt.subplots(figsize=(14,10))\nsns.boxplot(x='pregnancy_length',y='DBWT',data=_X, hue = 'RDMETH_REC_3',palette = 'muted', ax=ax)\nhandles, _ = ax.get_legend_handles_labels()\nax.legend(loc='upper right', handles = handles, labels = ['No Cesar', 'Yes Cesar'])\nax.set_title('Baby Weight vs Total Months of Gestation with-without C-Section')\nax.set_ylabel('Baby Weight by Grams')\nax.set_xlabel('Total Months of Gestation');","b713210d":"_X['RDMETH_REC_3_pregnancy_length_cat_Early'] = _X['RDMETH_REC_3'] * _X['pregnancy_length_cat_Early']","0091b29a":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n_X_columns = _X.columns\n_X[continuous_columns] = scaler.fit_transform(_X[continuous_columns])\n_X = pd.DataFrame(data=_X, columns = _X_columns)","f42b2cba":"_new_columns = [\n#     'first_birth',\n#  'first_pregnancy',\n#  'first_natal',\n 'MAGER',\n#  'pregnancy_length',\n#  'WTGAIN_div_MOM_weight',\n 'WTGAIN_div_length',\n 'PRECARE',\n 'PREVIS',\n#  'PWgt_R',\n 'BMI_log',\n 'M_Ht_In',\n 'MOM_weight',\n 'WTGAIN',\n 'WT_percent_gain',\n#  'BMI',\n 'ATTEND_1',\n#  'ATTEND_2',\n 'ATTEND_3',\n 'ATTEND_4',\n#  'ATTEND_5',\n#  'ATTEND_9',\n#  'BFACIL_1',\n 'BFACIL_2',\n 'BFACIL_3',\n#  'BFACIL_4',\n 'BFACIL_5',\n#  'BFACIL_6',\n#  'BFACIL_7',\n#  'BFACIL_9',\n#  'smoked_Daily',\n 'smoked_None',\n#  'smoked_Unknown',\n#  'DOB_MM_1',\n#  'DOB_MM_2',\n#  'DOB_MM_3',\n#  'DOB_MM_4',\n#  'DOB_MM_5',\n#  'DOB_MM_6',\n#  'DOB_MM_7',\n#  'DOB_MM_8',\n#  'DOB_MM_9',\n#  'DOB_MM_10',\n#  'DOB_MM_11',\n#  'DOB_MM_12',\n#  'DMAR_0',\n#  'DMAR_1',\n 'DMAR_2',\n 'FHISPX_0',\n#  'FHISPX_1',\n#  'FHISPX_2',\n#  'FHISPX_3',\n#  'FHISPX_4',\n#  'FHISPX_5',\n#  'FHISPX_6',\n#  'FHISPX_9',\n#  'FEDUC_1',\n#  'FEDUC_2',\n#  'FEDUC_3',\n#  'FEDUC_4',\n#  'FEDUC_5',\n 'FEDUC_6',\n#  'FEDUC_7',\n#  'FEDUC_8',\n#  'FEDUC_9',\n 'FRACE6_1',\n#  'FRACE6_2',\n#  'FRACE6_3',\n 'FRACE6_4',\n#  'FRACE6_5',\n#  'FRACE6_6',\n#  'FRACE6_9',\n#  'plural_delivery_No',\n 'plural_delivery_Yes',\n#  'IP_GON_N',\n#  'IP_GON_U',\n#  'IP_GON_Y',\n 'LD_INDL_N',\n#  'LD_INDL_U',\n#  'LD_INDL_Y',\n#  'T35AGE_older_0',\n 'T35AGE_older_1',\n#  'MAR_IMP_1',\n 'MBSTATE_REC_1',\n#  'MBSTATE_REC_2',\n#  'MBSTATE_REC_3',\n 'MEDUC_1',\n#  'MEDUC_2',\n 'MEDUC_3',\n 'MEDUC_4',\n 'MEDUC_5',\n 'MEDUC_6',\n 'MEDUC_7',\n#  'MEDUC_8',\n#  'MEDUC_9',\n 'MHISPX_0',\n#  'MHISPX_1',\n 'MHISPX_2',\n#  'MHISPX_3',\n#  'MHISPX_4',\n#  'MHISPX_5',\n 'MHISPX_6',\n#  'MHISPX_9',\n#  'MRAVE6_1',\n 'MRAVE6_2',\n#  'MRAVE6_3',\n 'MRAVE6_4',\n#  'MRAVE6_5',\n 'MRAVE6_6',\n#  'MTRAN_N',\n#  'MTRAN_U',\n 'MTRAN_Y',\n 'NO_INFEC_0',\n#  'NO_INFEC_1',\n#  'NO_INFEC_9',\n 'NO_MMORB_0',\n#  'NO_MMORB_1',\n#  'NO_MMORB_9',\n 'NO_RISKS_0',\n#  'NO_RISKS_1',\n#  'NO_RISKS_9',\n#  'PAY_1',\n#  'PAY_2',\n#  'PAY_3',\n#  'PAY_4',\n#  'PAY_5',\n#  'PAY_6',\n 'PAY_8',\n#  'PAY_9',\n 'PAY_REC_1',\n#  'PAY_REC_2',\n#  'PAY_REC_3',\n#  'PAY_REC_4',\n#  'PAY_REC_9',\n#  'PRIORDEAD_cat_None',\n#  'PRIORDEAD_cat_Unknown',\n 'PRIORDEAD_cat_Yes',\n#  'PRIORLIVE_cat_None',\n#  'PRIORLIVE_cat_Unknown',\n 'PRIORLIVE_cat_Yes',\n#  'PRIORTERM_cat_None',\n#  'PRIORTERM_cat_Unknown',\n#  'PRIORTERM_cat_Yes',\n#  'RDMETH_REC_1',\n#  'RDMETH_REC_2',\n 'RDMETH_REC_3',\n#  'RDMETH_REC_4',\n#  'RDMETH_REC_5',\n#  'RDMETH_REC_6',\n#  'RDMETH_REC_9',\n 'RESTATUS_1',\n#  'RESTATUS_2',\n#  'RESTATUS_3',\n#  'RESTATUS_4',\n 'RF_CESAR_N',\n#  'RF_CESAR_U',\n#  'RF_CESAR_Y',\n#  'SEX_F',\n 'SEX_M',\n#  'MAGER_cat_Adult',\n 'MAGER_cat_Minor',\n 'pregnancy_length_cat_10',\n 'pregnancy_length_cat_8',\n 'pregnancy_length_cat_9',\n 'pregnancy_length_cat_Early',\n#  'pregnancy_length_cat_Late',\n 'MAGER_smoked_Daily',\n 'NO_RISKS_1_length',\n 'RDMETH_REC_3_length',\n 'RDMETH_REC_1_length',\n 'ATTEND_1_length',\n 'MRAVE6_1_FRACE6_1',\n 'BFACIL_1_length',\n 'BMI_log_length',\n#  'M_Ht_In_length',\n 'LD_INDL_N_length',\n 'MTRAN_Y_length',\n 'PRECARE_length',\n 'PREVIS_length',\n 'MOM_weight_length',\n 'RDMETH_REC_3_pregnancy_length_cat_9',\n 'RF_CESAR_Y_pregnancy_length_cat_9',\n 'pregnancy_length_sqrt',\n'RDMETH_REC_3_pregnancy_length_cat_Early'\n]","eed24b1a":"\n_X['DBWT'] = y\nfrom statsmodels.formula.api import ols\nformula = 'DBWT~'+'+'.join(_new_columns)\nmodel = ols(formula=formula, data=_X).fit()\nmodel.summary()","8b968fba":"_X.drop(columns=['DBWT'],inplace=True)\ndel X\ndel df\n_X[continuous_columns] = scaler.inverse_transform(_X[continuous_columns])","ef0e06c0":"X_train, X_test, y_train, y_test = train_test_split(_X, y, random_state = 42, test_size=0.2)\nscaler = StandardScaler()\nX_train[continuous_columns] = scaler.fit_transform(X_train[continuous_columns])\nX_test[continuous_columns] = scaler.transform(X_test[continuous_columns])","d91ff47f":"linreg = LinearRegression()\nlinreg.fit(X_train[_new_columns],y_train)\ny_train_linreg = linreg.predict(X_train[_new_columns])\nnp.sqrt(metrics.mean_squared_error(y_train, y_train_linreg))","39e89115":"y_test_linreg = linreg.predict(X_test[_new_columns])\nnp.sqrt(metrics.mean_squared_error(y_test, y_test_linreg))","ca847875":"linreg.score(X_test[_new_columns],y_test)","4ec7f64f":"lasso_cv = LassoCV(cv=5, random_state=42, verbose=1)\nlasso_cv.fit(X_train[_new_columns], y_train)\ny_train_lasso = lasso_cv.predict(X_train[_new_columns])\nnp.sqrt(metrics.mean_squared_error(y_train, y_train_lasso))","09c88fa0":"y_test_lasso = lasso_cv.predict(X_test[_new_columns])\nnp.sqrt(metrics.mean_squared_error(y_test, y_test_lasso))","9d943b86":"lasso_cv.score(X_test[_new_columns],y_test)","a5c4ddb6":"### Linear Regression\ncross validating to see rmse, but more importantly looking to see if R2 improved","d84e930b":"### Feature Engineering on Dummies:\nI also want interactions between the dummy variables and the variables created from the first round of feature engineering","5eba2b49":"### Ordinary Least Squares","6a36708e":"### Handing picking:\nFrom here, I hand picked the columns that will be used for this model and created dummy variables for the categorical columns.","57ce9cf7":"# 1. Data Preprocessing\nThe dataset has 3.8 million rows with 55 columns. Please use an appropriate sample size before plotting. <br>\nI will first need to transform some of the integer-like categorical values. The keys are located in 'US_Birth_columns' text file. <br>\nIn addition, I will need to engineer new variables to better enhance the R2 score.","71f9966f":"### Dropping Rows:\nUnfortunately, we will have to drop some continuous variables that are 'Unknown' or 'Not available'. <br>\nFor more information about the columns and it's values, look to US_Birth_columns.","d649e40d":"### Feature Engineering:\nAs well as transforming the integer-like categorical values to objects, I will create some new features that can help my r2 score.<br>\nI have chosen not to drop the rows with unknown categorical values. I'll treat them as it's own class.","2dc54fff":"### ANOVA test\nnull hypothesis: Baby weights of Moms of different races are equal <Br>\nalternative: Baby weights of moms of different are NOT equal","79a774b7":"### LassoCV\ncross validating to see rmse, but more importantly looking to see if R2 improved","2c2eeea5":"# Using Linear Regression to find variables that explain the target, Baby Weight.\n\nThe notebook contains the following:\n1. Data Preprocessing\n2. Visualizations with Statistical Tests\n3. Model Approach\n4. Key Insights","750f8288":"### Dropping target variable and inverse transform","84791e4a":"### Last Minute Feature Engineering","0134b7de":"# 3. Model Approach\nA good amount of the time was spent feature selecting the variables that had a p-value less than 0.05. <br>\nI first used all the columns from my dataframe and popped the columns that failed to reject the hypothesis that coefficients are not 0","4977d652":"### ANOVA test\nnull hypothesis: Baby weights of all gestation periods are equal <br>\nalternative: Baby weights of all gestations periods are NOT equal","20a578c1":"# 2. Visualizations with Statistical Tests\nI will do some statistical tests for categorical independent features to see if there is a difference in baby weight\n1. Two Sample T-test by Gender of Baby\n2. Two Sample T-test by Mother who has smoked vs not smoked\n3. ANOVA test for Mothers of different race\n4. ANOVA test for Mothers with different gestations periods","a51f9df6":"### Two sample t test\nnull hypothesis: Male baby weight = Female baby weight<br>\nalternative: Male body weight != Female baby weight","cfd0059c":"### Assigning column lists:\ncreating a list of continuous columns will help us when we want to scale only our continuous variables","23a2bc1f":"### Import Data:","36ee8f4c":"### Feature Selection\nselecting columns that have lower than 0.05 p score from ols.summary()","7bab8576":"### Two sample t test\nnull hypothesis: Moms that never smoked[**baby weight**] = Moms that have smoked[**baby weight**]<br>\nalternative: Moms that never smoked[**baby weight**] != Moms that have smoked[**baby weight**]"}}