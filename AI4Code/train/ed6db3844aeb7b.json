{"cell_type":{"9ff395f4":"code","b36f7fd6":"code","5e52be81":"code","cdc533b9":"code","483d66b4":"code","e986e065":"code","f75851a5":"code","fd9d7a64":"code","701c8473":"markdown","832ff051":"markdown","5ca6c159":"markdown","0dc4a208":"markdown","a349de41":"markdown","93203af0":"markdown","bec837a7":"markdown","728b435d":"markdown"},"source":{"9ff395f4":"# MODIFY THIS TO GET YOUR TARGET COUNTRY\n\n# COUNTRIES INCLUDE\n\n# ['Afghanistan' 'Albania' 'Algeria' 'Andorra' 'Antigua and Barbuda'\n#  'Argentina' 'Armenia' 'Aruba' 'Australia' 'Austria' 'Azerbaijan'\n#  'Bahrain' 'Bangladesh' 'Barbados' 'Belarus' 'Belgium' 'Benin' 'Bhutan'\n#  'Bolivia' 'Bosnia and Herzegovina' 'Brazil' 'Brunei' 'Bulgaria'\n#  'Burkina Faso' 'Cambodia' 'Cameroon' 'Canada' 'Central African Republic'\n#  'Chile' 'China' 'Colombia' 'Congo (Brazzaville)' 'Congo (Kinshasa)'\n#  'Costa Rica' \"Cote d'Ivoire\" 'Croatia' 'Cruise Ship' 'Cuba' 'Cyprus'\n#  'Czechia' 'Denmark' 'Dominican Republic' 'Ecuador' 'Egypt'\n#  'Equatorial Guinea' 'Estonia' 'Eswatini' 'Ethiopia' 'Finland' 'France'\n#  'Gabon' 'Georgia' 'Germany' 'Ghana' 'Greece' 'Greenland' 'Guatemala'\n#  'Guernsey' 'Guinea' 'Guyana' 'Holy See' 'Honduras' 'Hungary' 'Iceland'\n#  'India' 'Indonesia' 'Iran' 'Iraq' 'Ireland' 'Israel' 'Italy' 'Jamaica'\n#  'Japan' 'Jersey' 'Jordan' 'Kazakhstan' 'Kenya' 'Korea, South' 'Kosovo'\n#  'Kuwait' 'Latvia' 'Lebanon' 'Liberia' 'Liechtenstein' 'Lithuania'\n#  'Luxembourg' 'Malaysia' 'Maldives' 'Malta' 'Martinique' 'Mauritania'\n#  'Mexico' 'Moldova' 'Monaco' 'Mongolia' 'Montenegro' 'Morocco' 'Namibia'\n#  'Nepal' 'Netherlands' 'New Zealand' 'Nigeria' 'North Macedonia' 'Norway'\n#  'Oman' 'Pakistan' 'Panama' 'Paraguay' 'Peru' 'Philippines' 'Poland'\n#  'Portugal' 'Qatar' 'Republic of the Congo' 'Romania' 'Russia' 'Rwanda'\n#  'Saint Lucia' 'Saint Vincent and the Grenadines' 'San Marino'\n#  'Saudi Arabia' 'Senegal' 'Serbia' 'Seychelles' 'Singapore' 'Slovakia'\n#  'Slovenia' 'Somalia' 'South Africa' 'Spain' 'Sri Lanka' 'Sudan'\n#  'Suriname' 'Sweden' 'Switzerland' 'Taiwan*' 'Tanzania' 'Thailand'\n#  'The Bahamas' 'The Gambia' 'Togo' 'Trinidad and Tobago' 'Tunisia'\n#  'Turkey' 'US' 'Ukraine' 'United Arab Emirates' 'United Kingdom' 'Uruguay'\n#  'Uzbekistan' 'Venezuela' 'Vietnam']\n\nTARGET_COUNTRY = \"Canada\"","b36f7fd6":"import pandas as pd\ndf_confirmed = pd.read_csv(\"..\/input\/covid19-coronavirus\/2019_nCoV_data.csv\")\n\n# Rename Province\/State and Country\/Region\ndf_confirmed = df_confirmed.rename(columns={'Province\/State': 'provincestate', \n                        'Date': 'date', \n                        'Country': 'countryregion',\n                        'Confirmed': 'confirmed',\n                        'Deaths': 'deaths',\n                        'Recovered': 'recovered',\n                       })\n\ndf_confirmed['date'] = pd.to_datetime(df_confirmed['date'], errors='coerce', format='%m\/%d\/%Y %H:%M')\n\n# # Remove unneeded columns\ndf_confirmed = df_confirmed.drop(['Last Update', 'Sno', 'deaths', 'recovered'], axis=1)\n\ndf_confirmed.head()\n\n# print(df_confirmed.dtypes)","5e52be81":"from itertools import product\n\n# Restrict to target country\ndf_confirmed_grouped = df_confirmed.query('countryregion == \"{}\"'.format(TARGET_COUNTRY)).copy()\ndf_confirmed_grouped = df_confirmed_grouped.drop(['countryregion'], axis=1)\ndf_confirmed_grouped['provincestate'] = df_confirmed_grouped['provincestate'].fillna('Unknown')\n\n## Dates\/Provinces with no confirmed are not included in the dataset, so we have to fill these missing rows\n# Create the full combinations of dates and provinces\ndates_unique = df_confirmed_grouped['date'].unique()\nprovinces_unique = df_confirmed_grouped['provincestate'].unique()\ndf_full = pd.DataFrame(list(product(dates_unique, provinces_unique)), columns=['date', 'provincestate'])\n# Merge the full df with the one with actual data\ndf_full = pd.merge(df_full, df_confirmed_grouped, how='outer', on=['date','provincestate']).fillna(0)\n\ndf_confirmed_grouped = df_full.sort_values(['date', 'provincestate'])\n\ndf_confirmed_grouped.head(500)","cdc533b9":"# Calculate change\nwindow = 5\ngrowthCalculation = lambda x: (x.max())\n\nfrom sklearn.linear_model import LinearRegression\nlinear_regressor = LinearRegression()\n\nx = pd.Series(range(0,window)).values.reshape(-1,1)\nlinearCoefficient = lambda values: (linear_regressor.fit(x, values.reshape(-1,1)).coef_)\n\ndf_confirmed_grouped['growth_rate'] = df_confirmed_grouped.groupby(['provincestate'])['confirmed'].rolling(window).apply(linearCoefficient, raw=True).fillna(0).reset_index(level=0, drop=True)\ndf_confirmed_grouped['acceleration_rate'] = df_confirmed_grouped['growth_rate'].rolling(window).apply(linearCoefficient, raw=True).fillna(0)\n\nprint(df_confirmed_grouped.shape)\n\ndf_confirmed_grouped.head(500)","483d66b4":"# Show fig\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\ncolorSequence = [\"red\", \"royalblue\"]\n\nlayout = go.Layout(title=\"COVID-19 confirmed cases by province\/state\", margin={\"l\": 100, \"r\": 100},\n                   colorway=[\"#287D95\", \"#EF533B\"], legend={\"x\": 0.7, \"y\": 1, 'orientation': \"h\"},\n                   yaxis={'title': 'Confirmed cases'},                   \n                   xaxis={\"title\": \"Date\",\n                         'domain': [0, 0.92]},\n                   height=1000)\n\nchinaColor = colorSequence[0]\n\n# Only plot 'confirmed', since we can't control the dashed lines and second-axes using Plotly Express\ntrace_confirmed = px.line(df_confirmed_grouped, \n                           x='date', \n                           y='confirmed', \n                           color='provincestate',).data\n\n# Add growth rate\ntrace_growth = px.line(df_confirmed_grouped, \n                           x='date', \n                           y='growth_rate', \n                           color='provincestate',).data\n\n# Add acceleration rate\ntrace_accel = px.line(df_confirmed_grouped, \n                           x='date', \n                           y='acceleration_rate', \n                           color='provincestate',).data","e986e065":"layout = go.Layout(title=\"COVID-19 confirmed cases by province\/state\",\n                   yaxis={'title': 'Confirmed cases'},\n                   height=1000)\n\nfig = go.Figure(data=trace_confirmed, layout=layout)\nfig.show()","f75851a5":"layout = go.Layout(title=\"COVID-19 growth rate by province\/state\",\n                   yaxis={'title': 'Confirmed cases'},\n                   height=1000)\n\nfig = go.Figure(data=trace_confirmed, layout=layout)\nfig.show()","fd9d7a64":"layout = go.Layout(title=\"COVID-19 acceleration by province\/state\",\n                   yaxis={'title': 'Confirmed cases'},\n                   height=1000)\n\nfig = go.Figure(data=trace_accel, layout=layout)\nfig.show()","701c8473":"## Set target country","832ff051":"# GETTING STARTED\nThis is interactive code, which runs sequentially in cells. \nYou can run each cell independently or run everything all at once.\n\nYou cannot run a cell without running the cells above it or it will have errors.\n\nTo run everything at once:\n- Go to the 'Run' menu at the top. Sometimes this menu is called 'Cells'\n- Tap 'Run All Cells'\/'Run All'.\n- Click the links below to see the fancy plots. They are interactive.\n\n\n### Links\n\n*These links will not work until you 'Run All Cells' as instructed above*\n\n- [Plot Confirmed Cases by Province\/State](#plot_confirmed)\n- [Plot Growth by Province\/State](#plot_growth)\n- [Plot Acceleration by Province\/State](#plot_acceleration)","5ca6c159":"<a id='plot_growth'><\/a>\n# Plot Growth Rate by Province\/State","0dc4a208":"<a id='plot_acceleration'><\/a>\n# Plot Acceleration Rate by Province\/State","a349de41":"## Plot\n### Prepare chart","93203af0":"## Calculate metrics","bec837a7":"<a id='plot_confirmed'><\/a>\n# Plot Confirmed Cases by Province\/State","728b435d":"## Download dataset "}}