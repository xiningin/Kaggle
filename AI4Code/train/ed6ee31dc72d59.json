{"cell_type":{"88779dc4":"code","6f904940":"code","157c7f1b":"code","3805bb7a":"code","9f2ce9b3":"code","95ff5f5c":"code","c64551df":"code","e4ba775c":"code","b8d8de63":"code","efc17d5c":"code","9f495de6":"code","d11dba4b":"code","640de098":"code","dfe19577":"code","3c7f6807":"code","2525f6d3":"code","e7202eb2":"code","58f7f091":"code","f41cf584":"markdown","0a38227b":"markdown","d2973dbd":"markdown"},"source":{"88779dc4":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","6f904940":"def get_columns(df):\n    single_cols = df.filter(like=\"SA\").columns.to_list()\n    multiple_cols = df.filter(like=\"GA\").columns.to_list()\n    \n    multiple_groups = []\n    for multiple_col in multiple_cols:\n        found_group = multiple_col.split(\"_\")[0]\n        if found_group not in multiple_groups:\n            multiple_groups.append(found_group)\n    \n    return single_cols, multiple_cols, multiple_groups","157c7f1b":"path_to_data = \"..\/input\/dataset-kaggle-survey-2018-2021\/kaggle_survey_2018-2021_data.csv\"\npath_do_head = \"..\/input\/dataset-kaggle-survey-2018-2021\/kaggle_survey_2018-2021_header.csv\"\n\ndata = pd.read_csv(path_to_data, low_memory=False)\ndata_head = pd.read_csv(path_do_head, nrows=1)","3805bb7a":"data.info(memory_usage='deep', verbose=False)","9f2ce9b3":"data.sample(5)","95ff5f5c":"data_description = data_head.loc[0].to_dict()\nsingle_cols, multiple_cols, multiple_groups = get_columns(data)","c64551df":"print(\"Single columns:\", len(single_cols))\nprint(\"Multiple groups:\", len(multiple_groups))\nprint(\"Multiple columns:\", len(multiple_cols))","e4ba775c":"print(data.shape)\n\ndata['Year'].value_counts()","b8d8de63":"def show_sa_title(col_name=None):    \n    for x_col in single_cols:\n        if col_name and col_name != x_col:\n            continue\n        \n        question = data_description.get(x_col)\n        print()\n        print(\">>> ({}) {}\".format(x_col, question))\n    \n    print()\n\n\ndef show_sa_info(col_name, is_title=True, is_sort=False, is_norm=False):\n    if col_name not in data.columns:\n        return False\n\n    col_years = \"Year\"\n    \n    if is_norm == True:\n        how_normalize = 'columns'\n    else:\n        how_normalize = False\n        \n    result = pd.crosstab(data[col_name], data[col_years], margins=True,\n                                                             margins_name='All',\n                         rownames=['Answer'], normalize=how_normalize)\n\n    if how_normalize:\n        result = result.mul(100).round(2)\n    \n    if is_sort == True and 'All' in result.columns:\n        result = result.sort_values('All', ascending=False)    \n    \n    if is_title == True:\n        show_sa_title(col_name)\n    \n    return result","efc17d5c":"show_sa_title()","9f495de6":"show_sa_info('SA1')","d11dba4b":"show_sa_info('SA1', is_norm=True, is_sort=True)","640de098":"show_sa_info('SA11')","dfe19577":"show_sa_info('SA11', is_norm=True)","3c7f6807":"def show_ga_title(group_name=None):    \n    for x_group in multiple_groups:\n        if group_name and group_name != x_group:\n            continue\n        \n        cols_list = data.filter(like=(x_group + \"_\")).columns.to_list()\n        first_question = data_description.get(cols_list[0])\n        group_select = '(Select all that apply)'\n        group_title = first_question.split(group_select)[0]\n        print()\n        print(\">>> ({}) {}\".format(x_group, group_title))\n    \n    print()\n\n        \ndef show_ga_info(group_name, is_title=True, is_sort=False, is_norm=False):\n    if group_name not in multiple_groups:\n        return False\n    \n    col_years = \"Year\"\n    cols_list = data.filter(like=(group_name + \"_\")).columns.to_list()\n    result = pd.melt(data, id_vars=[col_years], value_vars=cols_list)\n    \n    if is_norm == True:\n        how_normalize = 'columns'\n    else:\n        how_normalize = False\n        \n    result = pd.crosstab(result['value'], result[col_years], margins=True,\n                                                             margins_name='All',\n                         rownames=['Answer'], normalize=how_normalize)\n\n    if how_normalize:\n        result = result.mul(100).round(2)\n    \n    if is_sort == True and 'All' in result.columns:\n        result = result.sort_values('All', ascending=False)    \n    \n    if is_title == True:\n        show_ga_title(group_name)\n    \n    return result","2525f6d3":"show_ga_title()","e7202eb2":"x_group = \"GA21\"\nshow_ga_info(x_group, is_norm=True)","58f7f091":"x_group = \"GA21\"\nshow_ga_info(x_group)","f41cf584":"# 1. Import & Load & Extract","0a38227b":"# 2. Check single answers","d2973dbd":"# 3. Group answers"}}