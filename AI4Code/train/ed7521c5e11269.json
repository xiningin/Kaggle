{"cell_type":{"2d7f137d":"code","b65e1574":"code","9447ff4e":"code","9df1ea88":"code","f667c59c":"code","800e9b14":"code","1d350e38":"code","b9852e77":"code","a53b2134":"code","e8fbdb8a":"code","92b1bf4c":"code","6c7cd117":"markdown","a4f00044":"markdown","314464c9":"markdown","56151b8c":"markdown","00510aae":"markdown","76488b62":"markdown"},"source":{"2d7f137d":"import numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport cv2\nfrom sklearn.decomposition import PCA\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom mpl_toolkits.mplot3d import proj3d\nfrom imageio import imread\nfrom skimage.transform import resize\nfrom scipy.spatial import distance\nfrom keras.models import load_model\nimport pandas as pd\nfrom tqdm import tqdm\nimport h5py","b65e1574":"train_df = pd.read_csv(\"..\/input\/recognizing-faces-in-the-wild\/train_relationships.csv\")\ntest_df = pd.read_csv(\"..\/input\/recognizing-faces-in-the-wild\/sample_submission.csv\")","9447ff4e":"model_path = '..\/input\/facenet-keras\/facenet_keras.h5'\nmodel = load_model(model_path)","9df1ea88":"def prewhiten(x):\n    if x.ndim == 4:\n        axis = (1, 2, 3)\n        size = x[0].size\n    elif x.ndim == 3:\n        axis = (0, 1, 2)\n        size = x.size\n    else:\n        raise ValueError('Dimension should be 3 or 4')\n\n    mean = np.mean(x, axis=axis, keepdims=True)\n    std = np.std(x, axis=axis, keepdims=True)\n    std_adj = np.maximum(std, 1.0\/np.sqrt(size))\n    y = (x - mean) \/ std_adj\n    return y\n\ndef l2_normalize(x, axis=-1, epsilon=1e-10):\n    output = x \/ np.sqrt(np.maximum(np.sum(np.square(x), axis=axis, keepdims=True), epsilon))\n    return output\n\ndef load_and_align_images(filepaths, margin,image_size = 160):\n    \n    aligned_images = []\n    for filepath in filepaths:\n        img = imread(filepath)\n        aligned = resize(img, (image_size, image_size), mode='reflect')\n        aligned_images.append(aligned)\n            \n    return np.array(aligned_images)\n\n","f667c59c":"def calc_embs(filepaths, margin=10, batch_size=512):\n    pd = []\n    for start in tqdm(range(0, len(filepaths), batch_size)):\n        aligned_images = prewhiten(load_and_align_images(filepaths[start:start+batch_size], margin))\n        pd.append(model.predict_on_batch(aligned_images))\n    embs = l2_normalize(np.concatenate(pd))\n\n    return embs","800e9b14":"test_images = os.listdir(\"..\/input\/recognizing-faces-in-the-wild\/test\/\")\ntest_embs = calc_embs([os.path.join(\"..\/input\/recognizing-faces-in-the-wild\/test\/\", f) for f in test_images])\nnp.save(\"test_embs.npy\", test_embs)","1d350e38":"test_df[\"distance\"] = 0\nimg2idx = dict()\nfor idx, img in enumerate(test_images):\n    img2idx[img] = idx","b9852e77":"for idx, row in tqdm(test_df.iterrows(), total=len(test_df)):\n    imgs = [test_embs[img2idx[img]] for img in row.img_pair.split(\"-\")]\n    test_df.loc[idx, \"distance\"] = distance.euclidean(*imgs)","a53b2134":"all_distances = test_df.distance.values\nsum_dist = np.sum(all_distances)","e8fbdb8a":"probs = []\nfor dist in tqdm(all_distances):\n    prob = np.sum(all_distances[np.where(all_distances <= dist)[0]])\/sum_dist\n    probs.append(1 - prob)","92b1bf4c":"sub_df = pd.read_csv(\"..\/input\/recognizing-faces-in-the-wild\/sample_submission.csv\")\nsub_df.is_related = probs\nsub_df.to_csv(\"submission.csv\", index=False)","6c7cd117":"Next, we compute the actual distance between provided image pairs","a4f00044":"## Facenet baseline in Keras\n\nThis is a very simple baseline with no training required. Instead, we'll use the pretrained Facenet model from this repo https:\/\/github.com\/nyoki-mtl\/keras-facenet . \n\nFirst, we compute the face embeddings for each image in the test set, then we compute the Euclidean distance for each image pair in the test dataframe. Finally, we convert the distance to a probability using cumulative probabilites based on the distribution of the distance itself on the test set.","314464c9":"Here's preprocessing stuff. The images from the test set seem to already be aligned, so I'll omit that part here for clarity.","56151b8c":"Finally, we convert the distances to probabiliy values and submit the result","00510aae":"Here we'll compute all the embeddings for the test images using the pretrained model","76488b62":"Let's load our pretrained model."}}