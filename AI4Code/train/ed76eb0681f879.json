{"cell_type":{"15c16942":"code","237ee50c":"code","bcc9e288":"code","0207ef0b":"code","5744a0fe":"code","8372598a":"code","203f1f85":"code","db88d039":"code","93bffb8a":"code","b78b9442":"code","2741cdd1":"code","cf3ab2b8":"code","9474a572":"code","49afe7fa":"code","d1e000a4":"code","aefcd87b":"code","13ccc980":"code","270995eb":"code","c46d7607":"code","8c6792f5":"code","ac0edf70":"code","2c9318f7":"code","079302cc":"code","219e6958":"code","f36e76ac":"code","f9fc0536":"code","8406e705":"code","8d342e85":"code","d73322e6":"code","6519fa37":"code","3a70c2c2":"code","325cae92":"code","02801ea8":"code","9e3eb060":"code","a2db6d71":"code","f294aa83":"code","e7cd3fbe":"code","0647cbe8":"code","4b820e63":"code","1de02fab":"code","866ea4e9":"code","f5eca92f":"code","9ebed68d":"code","88a60abd":"code","324df029":"code","f12c46c7":"code","94cc3979":"code","0f40b1d9":"code","49ffd26b":"code","44a10a8c":"code","80f724ea":"code","334ff417":"code","be45382a":"code","114a9279":"code","d4156f5b":"code","a7957bf6":"code","ab7c4618":"code","2cabd23a":"code","bf202fae":"code","169694ac":"code","e85439d2":"code","cd2042c9":"markdown","07dddb89":"markdown","af012337":"markdown","d573e73a":"markdown","c84ab8a8":"markdown","62e2f655":"markdown","d57edd3c":"markdown","0693b2e6":"markdown","92454b7d":"markdown","a7c36b0c":"markdown","2ecb9461":"markdown","29ffc943":"markdown","6a8e9397":"markdown","c6a590ce":"markdown","eed6377f":"markdown","39d8e363":"markdown","27775cc6":"markdown"},"source":{"15c16942":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","237ee50c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.neighbors import KNeighborsClassifier as KNN\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis as QDA, LinearDiscriminantAnalysis as LDA\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score, StratifiedKFold, RandomizedSearchCV, cross_validate\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.metrics import accuracy_score, precision_score, roc_auc_score\n\nfrom sklearn.pipeline import Pipeline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndef submit_csv(predict):\n    result = pd.DataFrame(columns=['id','label'])\n    result['id'] = np.arange(1,len(predict)+1)\n    result['label'] = predict\n    result.to_csv('answer.csv',index=False, sep=',', header=True)\n    \ndef get_result_from_grid_cv(search, gr_cv):\n    f1_macro = search['mean_test_f1_macro'][np.argmin(search['rank_test_f1_macro'])]\n    precision_macro = search['mean_test_precision_macro'][np.argmin(search['rank_test_precision_macro'])]\n    recall_macro = search['mean_test_recall_macro'][np.argmin(search['rank_test_recall_macro'])]\n    print(gr_cv.best_params_,'\\n', 'best_accuracy: ', gr_cv.best_score_)\n    print('f1_macro_best:', f1_macro, '\\n', 'precision_macro_best:', precision_macro,'\\n', 'recall_macro_best:', recall_macro)","bcc9e288":"df = pd.read_csv('fashion-mnist_train.csv')\ndf_test = pd.read_csv('new_test.csv')","0207ef0b":"df_test.head()","5744a0fe":"X_valid = np.array(df_test)\nX = np.array(df.loc[:, 'pixel1':])\ny = np.array(df.loc[:, 'label'])\nX_valid","8372598a":"# \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n# 3 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0442\u0430\u043a\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0445\u0432\u0430\u0442\u0438\u0442, \u0438\u043d\u0430\u0447\u0435 \u043a\u043e\u043c\u043f \u043d\u0435 \u0442\u044f\u043d\u0435\u0442\ncv = StratifiedKFold(n_splits = 3, shuffle = True, random_state = 42)\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\nscorer = ['accuracy', 'f1_macro', 'precision_macro', 'recall_macro']\n# \u0414\u0430\u043b\u0435\u0435 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0435\u0442\u043a\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u044b\u043c \u0432\u044b\u0431\u043e\u0440\u043e\u043c \u0442\u043e\u0447\u0435\u043a \u0432 \u0441\u0435\u0442\u043a\u0435, \n# \u0438\u043b\u0438, \u0435\u0441\u043b\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043d\u0435 \u0434\u043e\u043b\u0433\u043e \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u043f\u043e\u043b\u043d\u044b\u043c \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u043e\u043c \u043f\u043e \u0441\u0435\u0442\u043a\u0435\n\n# \u0435\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e, \u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u043d\u0430 2 \u0447\u0430\u0441\u0442\u0438. \u041f\u0435\u0440\u0432\u0430\u044f \u0438\u0437\n# \u043d\u0438\u0445 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438, \u043f\u043e\u0441\u043b\u0435\n# \u0447\u0435\u0433\u043e \u043b\u0443\u0447\u0448\u0438\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d \u043d\u0430 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435. \u041d\u043e \u0442\u0443\u0442 \u044f \u044d\u0442\u043e\u0433\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435 \u0441\u0442\u0430\u043d\u0443,\n# \u0442\u0430\u043a \u043a\u0430\u043a \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u043d\u0430 \u041a\u0430\u0433\u0433\u043b\u0435","203f1f85":"LogReg = LogisticRegression(n_jobs=-1)\nmodel_log_reg = Pipeline(steps = [('scaling', MinMaxScaler()), ('classifier', LogReg)])\nmodel_log_reg.get_params().keys() # \u0413\u043b\u044f\u043d\u0435\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0422\u044e\u043d\u0438\u043d\u0433\u0430","db88d039":"parameters = {\n    'classifier__C': [0.0001, 0.001, 0.01, 10, 0.0005],\n    'classifier__solver': ['saga', 'sag', 'newton-cg']\n}\ngrid_cv_lr = GridSearchCV(model_log_reg, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', return_train_score=False)\n# random_cv_lr = RandomizedSearchCV(model_log_reg, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', random_state=42, n_iter=20)","93bffb8a":"%%time\ngrid_cv_lr.fit(X, y)\nresult_lr_cv_search = grid_cv_lr.cv_results_","b78b9442":"get_result_from_grid_cv(result_lr_cv_search, grid_cv_lr)","2741cdd1":"knn = KNN(n_jobs=-1)\nmodel_knn = Pipeline(steps = [('scaling', MinMaxScaler()), ('classifier', knn)])\nmodel_knn.get_params().keys() # \u0413\u043b\u044f\u043d\u0435\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0422\u044e\u043d\u0438\u043d\u0433\u0430","cf3ab2b8":"parameters = {\n    'classifier__n_neighbors': [1, 3, 5, 7, 9, 12, 15, 35],\n    'classifier__p': [1, 2],\n    'classifier__algorithm' : ['ball_tree', 'kd_tree', 'brute']\n}\n# grid_cv_knn = GridSearchCV(model_knn, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', return_train_score=False)\nrandom_cv_knn = RandomizedSearchCV(model_knn, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', random_state=42, n_iter=10)","9474a572":"%%time\nrandom_cv_knn.fit(X, y)\nresult_knn_cv_search = random_cv_knn.cv_results_","49afe7fa":"get_result_from_grid_cv(result_knn_cv_search, random_cv_knn)","d1e000a4":"GausNB = GaussianNB()\nmodel_GausNB = Pipeline(steps = [('scaling', MinMaxScaler()), ('classifier', GausNB)])\nmodel_GausNB.get_params().keys() # \u0413\u043b\u044f\u043d\u0435\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0422\u044e\u043d\u0438\u043d\u0433\u0430","aefcd87b":"parameters = {\n    'classifier__var_smoothing': [0.1, 0.2, 0.5, 1]\n}\ngrid_cv_GB = GridSearchCV(model_GausNB, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', return_train_score=False)\n# random_cv_GB = RandomizedSearchCV(model_GausNB, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', random_state=42, n_iter=10)","13ccc980":"%%time\ngrid_cv_GB.fit(X, y)\nresult_GB_cv_search = grid_cv_GB.cv_results_","270995eb":"get_result_from_grid_cv(result_GB_cv_search, grid_cv_GB)","c46d7607":"linear_SVC = LinearSVC(dual=True, penalty='l2')\nmodel_linear_SVC = Pipeline(steps = [('scaling', MinMaxScaler()), ('classifier', linear_SVC)])\nmodel_linear_SVC.get_params().keys() # \u0413\u043b\u044f\u043d\u0435\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0422\u044e\u043d\u0438\u043d\u0433\u0430","8c6792f5":"# \u043a\u043e\u0433\u0434\u0430 C \u0431\u043e\u043b\u044c\u0448\u043e\u0439, \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0442\u043e\u0447\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u043e \u0435\u0441\u0442\u044c \u043e\u0432\u0435\u0440\u0444\u0438\u0442\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c\n# \u043f\u0440\u0438 C->inf \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c hard-margin svm\nparameters = {\n    'classifier__loss':['hinge', 'squared_hinge'],\n    'classifier__C':[0.1, 0.001, 0.01, 0.0009, 0.0005]\n}\ngrid_cv_LSVC = GridSearchCV(model_linear_SVC, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', return_train_score=False)\n# random_cv_LSVC = RandomizedSearchCV(model_linear_SVC, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', random_state=42, n_iter=10)","ac0edf70":"%%time\ngrid_cv_LSVC.fit(X, y)\nresult_LSVC_cv_search = grid_cv_LSVC.cv_results_","2c9318f7":"get_result_from_grid_cv(result_LSVC_cv_search, grid_cv_LSVC)","079302cc":"poly_SVC = SVC(random_state=42, kernel='poly', cache_size=500)\nmodel_poly_SVC = Pipeline(steps = [('scaling', MinMaxScaler()), ('classifier', poly_SVC)])\nmodel_poly_SVC.get_params().keys() # \u0413\u043b\u044f\u043d\u0435\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0422\u044e\u043d\u0438\u043d\u0433\u0430","219e6958":"# \u043a\u043e\u0433\u0434\u0430 C \u0431\u043e\u043b\u044c\u0448\u043e\u0439, \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0442\u043e\u0447\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u043e \u0435\u0441\u0442\u044c \u043e\u0432\u0435\u0440\u0444\u0438\u0442\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c\n# \u043f\u0440\u0438 C->inf \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c hard-margin svm\n# coef0 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u0442, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0432\u043b\u0438\u044f\u044e\u0442 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u044b \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438.\n# gamma\u043e \u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043a\u0430\u043a\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0443\u0447\u0435\u0431\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440. \n#                  \u0427\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 gamma, \u0442\u0435\u043c \u0431\u043b\u0438\u0436\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0437\u0430\u0442\u0440\u043e\u043d\u0443\u0442\u044b.\n\nparameters = {\n    'classifier__degree':[2,3],\n    'classifier__C':[0.0005, 0.005, 0.001, 0.01],\n    'classifier__gamma':[1000, 300, 100, 10],\n    'classifier__coef0': [0,1,10]\n}\ngrid_cv_PSVC = GridSearchCV(model_poly_SVC, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', return_train_score=False)\n# random_cv_PSVC = RandomizedSearchCV(model_poly_SVC, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', random_state=42, n_iter=10)","f36e76ac":"%%time\ngrid_cv_PSVC.fit(X, y)\nresult_PSVC_cv_search = grid_cv_PSVC.cv_results_","f9fc0536":"get_result_from_grid_cv(result_PSVC_cv_search, grid_cv_PSVC)","8406e705":"# SPCA, t-sne\n# \u0441\u043f\u0435\u0446\u043a\u0443\u0440\u0441 \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0412\u041c\u041a \u041c\u0413\u0423 \u041a\u043e\u043d\u0443\u0448\u0438\u043d","8d342e85":"lda = LDA()\nmodel_LDA = Pipeline(steps = [('scaling', MinMaxScaler()), ('classifier', lda)])\nmodel_LDA.get_params().keys() # \u0413\u043b\u044f\u043d\u0435\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0422\u044e\u043d\u0438\u043d\u0433\u0430","d73322e6":"%%time\nlda_scoring = cross_val_score(model_LDA, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint('Accuracy mean: {}, std: {}'.format(lda_scoring.mean(), lda_scoring.std()))","6519fa37":"# -","3a70c2c2":"# -","325cae92":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.neighbors import KNeighborsClassifier as KNN\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis as QDA, LinearDiscriminantAnalysis as LDA\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score, StratifiedKFold, RandomizedSearchCV, cross_validate\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.metrics import accuracy_score, precision_score, roc_auc_score\n\nfrom sklearn.pipeline import Pipeline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndef submit_csv(predict):\n    result = pd.DataFrame(columns=['id','label'])\n    result['id'] = np.arange(1,len(predict)+1)\n    result['label'] = predict\n    result.to_csv('answer.csv',index=False, sep=',', header=True)\n    \ndef get_result_from_grid_cv(search, gr_cv):\n    f1_macro = search['mean_test_f1_macro'][np.argmin(search['rank_test_f1_macro'])]\n    precision_macro = search['mean_test_precision_macro'][np.argmin(search['rank_test_precision_macro'])]\n    recall_macro = search['mean_test_recall_macro'][np.argmin(search['rank_test_recall_macro'])]\n    print(gr_cv.best_params_,'\\n', 'best_accuracy: ', gr_cv.best_score_)\n    print('f1_macro_best:', f1_macro, '\\n', 'precision_macro_best:', precision_macro,'\\n', 'recall_macro_best:', recall_macro)","02801ea8":"df = pd.read_csv('fashion-mnist_train.csv')\ndf_test = pd.read_csv('new_test.csv')","9e3eb060":"df_test.head()","a2db6d71":"X_valid = np.array(df_test)\nX = np.array(df.loc[:, 'pixel1':])\ny = np.array(df.loc[:, 'label'])\nX_valid","f294aa83":"# \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n# 3 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0442\u0430\u043a\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0445\u0432\u0430\u0442\u0438\u0442, \u0438\u043d\u0430\u0447\u0435 \u043a\u043e\u043c\u043f \u043d\u0435 \u0442\u044f\u043d\u0435\u0442\ncv = StratifiedKFold(n_splits = 3, shuffle = True, random_state = 42)\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\nscorer = ['accuracy', 'f1_macro', 'precision_macro', 'recall_macro']\n# \u0414\u0430\u043b\u0435\u0435 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0435\u0442\u043a\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u044b\u043c \u0432\u044b\u0431\u043e\u0440\u043e\u043c \u0442\u043e\u0447\u0435\u043a \u0432 \u0441\u0435\u0442\u043a\u0435, \n# \u0438\u043b\u0438, \u0435\u0441\u043b\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043d\u0435 \u0434\u043e\u043b\u0433\u043e \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u043f\u043e\u043b\u043d\u044b\u043c \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u043e\u043c \u043f\u043e \u0441\u0435\u0442\u043a\u0435\n\n# \u0435\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e, \u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u043d\u0430 2 \u0447\u0430\u0441\u0442\u0438. \u041f\u0435\u0440\u0432\u0430\u044f \u0438\u0437\n# \u043d\u0438\u0445 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438, \u043f\u043e\u0441\u043b\u0435\n# \u0447\u0435\u0433\u043e \u043b\u0443\u0447\u0448\u0438\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d \u043d\u0430 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435. \u041d\u043e \u0442\u0443\u0442 \u044f \u044d\u0442\u043e\u0433\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435 \u0441\u0442\u0430\u043d\u0443,\n# \u0442\u0430\u043a \u043a\u0430\u043a \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u043d\u0430 \u041a\u0430\u0433\u0433\u043b\u0435","e7cd3fbe":"LogReg = LogisticRegression(n_jobs=-1)\nmodel_log_reg = Pipeline(steps = [('scaling', MinMaxScaler()), ('classifier', LogReg)])\nmodel_log_reg.get_params().keys() # \u0413\u043b\u044f\u043d\u0435\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0422\u044e\u043d\u0438\u043d\u0433\u0430","0647cbe8":"parameters = {\n    'classifier__C': [0.0001, 0.001, 0.01, 10, 0.0005],\n    'classifier__solver': ['saga', 'sag', 'newton-cg']\n}\ngrid_cv_lr = GridSearchCV(model_log_reg, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', return_train_score=False)\n# random_cv_lr = RandomizedSearchCV(model_log_reg, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', random_state=42, n_iter=20)","4b820e63":"%%time\ngrid_cv_lr.fit(X, y)\nresult_lr_cv_search = grid_cv_lr.cv_results_","1de02fab":"get_result_from_grid_cv(result_lr_cv_search, grid_cv_lr)","866ea4e9":"knn = KNN(n_jobs=-1)\nmodel_knn = Pipeline(steps = [('scaling', MinMaxScaler()), ('classifier', knn)])\nmodel_knn.get_params().keys() # \u0413\u043b\u044f\u043d\u0435\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0422\u044e\u043d\u0438\u043d\u0433\u0430","f5eca92f":"parameters = {\n    'classifier__n_neighbors': [1, 3, 5, 7, 9, 12, 15, 35],\n    'classifier__p': [1, 2],\n    'classifier__algorithm' : ['ball_tree', 'kd_tree', 'brute']\n}\n# grid_cv_knn = GridSearchCV(model_knn, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', return_train_score=False)\nrandom_cv_knn = RandomizedSearchCV(model_knn, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', random_state=42, n_iter=10)","9ebed68d":"%%time\nrandom_cv_knn.fit(X, y)\nresult_knn_cv_search = random_cv_knn.cv_results_","88a60abd":"get_result_from_grid_cv(result_knn_cv_search, random_cv_knn)","324df029":"GausNB = GaussianNB()\nmodel_GausNB = Pipeline(steps = [('scaling', MinMaxScaler()), ('classifier', GausNB)])\nmodel_GausNB.get_params().keys() # \u0413\u043b\u044f\u043d\u0435\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0422\u044e\u043d\u0438\u043d\u0433\u0430","f12c46c7":"parameters = {\n    'classifier__var_smoothing': [0.1, 0.2, 0.5, 1]\n}\ngrid_cv_GB = GridSearchCV(model_GausNB, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', return_train_score=False)\n# random_cv_GB = RandomizedSearchCV(model_GausNB, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', random_state=42, n_iter=10)","94cc3979":"%%time\ngrid_cv_GB.fit(X, y)\nresult_GB_cv_search = grid_cv_GB.cv_results_","0f40b1d9":"get_result_from_grid_cv(result_GB_cv_search, grid_cv_GB)","49ffd26b":"linear_SVC = LinearSVC(dual=True, penalty='l2')\nmodel_linear_SVC = Pipeline(steps = [('scaling', MinMaxScaler()), ('classifier', linear_SVC)])\nmodel_linear_SVC.get_params().keys() # \u0413\u043b\u044f\u043d\u0435\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0422\u044e\u043d\u0438\u043d\u0433\u0430","44a10a8c":"# \u043a\u043e\u0433\u0434\u0430 C \u0431\u043e\u043b\u044c\u0448\u043e\u0439, \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0442\u043e\u0447\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u043e \u0435\u0441\u0442\u044c \u043e\u0432\u0435\u0440\u0444\u0438\u0442\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c\n# \u043f\u0440\u0438 C->inf \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c hard-margin svm\nparameters = {\n    'classifier__loss':['hinge', 'squared_hinge'],\n    'classifier__C':[0.1, 0.001, 0.01, 0.0009, 0.0005]\n}\ngrid_cv_LSVC = GridSearchCV(model_linear_SVC, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', return_train_score=False)\n# random_cv_LSVC = RandomizedSearchCV(model_linear_SVC, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', random_state=42, n_iter=10)","80f724ea":"%%time\ngrid_cv_LSVC.fit(X, y)\nresult_LSVC_cv_search = grid_cv_LSVC.cv_results_","334ff417":"get_result_from_grid_cv(result_LSVC_cv_search, grid_cv_LSVC)","be45382a":"poly_SVC = SVC(random_state=42, kernel='poly', cache_size=500)\nmodel_poly_SVC = Pipeline(steps = [('scaling', MinMaxScaler()), ('classifier', poly_SVC)])\nmodel_poly_SVC.get_params().keys() # \u0413\u043b\u044f\u043d\u0435\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0422\u044e\u043d\u0438\u043d\u0433\u0430","114a9279":"# \u043a\u043e\u0433\u0434\u0430 C \u0431\u043e\u043b\u044c\u0448\u043e\u0439, \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0442\u043e\u0447\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u043e \u0435\u0441\u0442\u044c \u043e\u0432\u0435\u0440\u0444\u0438\u0442\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c\n# \u043f\u0440\u0438 C->inf \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c hard-margin svm\n# coef0 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u0442, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0432\u043b\u0438\u044f\u044e\u0442 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u044b \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438.\n# gamma\u043e \u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043a\u0430\u043a\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0443\u0447\u0435\u0431\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440. \n#                  \u0427\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 gamma, \u0442\u0435\u043c \u0431\u043b\u0438\u0436\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0437\u0430\u0442\u0440\u043e\u043d\u0443\u0442\u044b.\n\nparameters = {\n    'classifier__degree':[2,3],\n    'classifier__C':[0.0005, 0.005, 0.001, 0.01],\n    'classifier__gamma':[1000, 300, 100, 10],\n    'classifier__coef0': [0,1,10]\n}\ngrid_cv_PSVC = GridSearchCV(model_poly_SVC, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', return_train_score=False)\n# random_cv_PSVC = RandomizedSearchCV(model_poly_SVC, parameters, scoring=scorer, cv=cv, n_jobs=-1, refit='accuracy', random_state=42, n_iter=10)","d4156f5b":"%%time\ngrid_cv_PSVC.fit(X, y)\nresult_PSVC_cv_search = grid_cv_PSVC.cv_results_","a7957bf6":"get_result_from_grid_cv(result_PSVC_cv_search, grid_cv_PSVC)","ab7c4618":"# SPCA, t-sne\n# \u0441\u043f\u0435\u0446\u043a\u0443\u0440\u0441 \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0412\u041c\u041a \u041c\u0413\u0423 \u041a\u043e\u043d\u0443\u0448\u0438\u043d","2cabd23a":"lda = LDA()\nmodel_LDA = Pipeline(steps = [('scaling', MinMaxScaler()), ('classifier', lda)])\nmodel_LDA.get_params().keys() # \u0413\u043b\u044f\u043d\u0435\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0422\u044e\u043d\u0438\u043d\u0433\u0430","bf202fae":"%%time\nlda_scoring = cross_val_score(model_LDA, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint('Accuracy mean: {}, std: {}'.format(lda_scoring.mean(), lda_scoring.std()))","169694ac":"# -","e85439d2":"# -","cd2042c9":"# LDA","07dddb89":"# RandomForest","af012337":"# KNN","d573e73a":"# KNN","c84ab8a8":"# GaussNB","62e2f655":"# Logistic Regression","d57edd3c":"# PolySVC \n$(\\gamma \\langle x, x'\\rangle + r)^d$","0693b2e6":"# RandomForest","92454b7d":"# LDA","a7c36b0c":"# LinearSVC\n$\\langle x, x'\\rangle$","2ecb9461":"# Logistic Regression","29ffc943":"# GaussNB","6a8e9397":"# SGDClassifier\n\u041b\u0438\u043d\u0435\u0439\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0441 \u0440\u0435\u0448\u0430\u0442\u0435\u043b\u0435\u043c \u0441\u0442\u043e\u0445\u0430\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0433\u0440\u0430\u0434. \u0441\u043f\u0443\u0441\u043a","c6a590ce":"# SGDClassifier\n\u041b\u0438\u043d\u0435\u0439\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0441 \u0440\u0435\u0448\u0430\u0442\u0435\u043b\u0435\u043c \u0441\u0442\u043e\u0445\u0430\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0433\u0440\u0430\u0434. \u0441\u043f\u0443\u0441\u043a","eed6377f":"### \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0441\u044f(\u043d\u0430\u0448\u043b\u0438 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c) \u0434\u0430\u043d\u043d\u044b\u0439 \u0431\u043b\u043e\u043a\u043d\u043e\u0442, \u0432\u043d\u0438\u0437\u0443 \u0441\u0434\u0435\u043b\u0430\u0439\u0442\u0435 vote. \u0421\u043f\u0430\u0441\u0438\u0431\u043e :)\n### \u041d\u0438 \u0432 \u043a\u043e\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435 \u0444\u0438\u0442\u044c\u0442\u0435 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0435\u0442\u043a\u0435 \u043f\u043e \u0432\u0441\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 (fit(X,y)). \u041b\u0443\u0447\u0448\u0435 \u043f\u043e \u0441\u0440\u0435\u0437\u0430\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 (fit(X[:n], y[:n]). \u0418\u043b\u0438 \u0435\u0441\u043b\u0438 \u0445\u043e\u0447\u0435\u0442\u0441\u044f \u043d\u0430 \u0432\u0441\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u043f\u043e\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438, \u0438\u043d\u0430\u0447\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0434\u043e\u043b\u0433\u043e...","39d8e363":"# PolySVC \n$(\\gamma \\langle x, x'\\rangle + r)^d$","27775cc6":"# LinearSVC\n$\\langle x, x'\\rangle$"}}