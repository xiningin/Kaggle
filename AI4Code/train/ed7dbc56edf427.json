{"cell_type":{"2ed81539":"code","2633b488":"code","c0ed05f9":"code","864c560d":"code","9fc93b81":"code","de285591":"code","a4d87d39":"code","d7153de1":"code","dc47581f":"code","e283aac4":"code","e1295b3d":"code","f4b75fe3":"code","eced2f45":"code","84cc5df7":"code","4ee722c7":"code","4695cee5":"code","55e8b4e2":"code","b114b09c":"code","bef2dee1":"code","7336eded":"code","279b627b":"code","11c50a52":"code","1d3ed4ad":"code","47678d6e":"code","7574139c":"code","e9a42394":"code","d2e377ef":"code","ee1d0b5e":"code","dfe76d23":"code","03608f38":"code","38f9e3d5":"markdown","cff0dd27":"markdown","e59ef456":"markdown","915de534":"markdown","cf25738f":"markdown","e0af8a61":"markdown","895eed67":"markdown","f16ecc09":"markdown","eee5ff03":"markdown","1afa5de6":"markdown","ca7d49e3":"markdown","d56be8ab":"markdown","a32acf14":"markdown","4458898f":"markdown","41bf59e5":"markdown","0f3cb79f":"markdown","2275471c":"markdown"},"source":{"2ed81539":"import datetime\ndt = datetime.datetime.strptime(\"2016-04-15T08:27:18-0500\", \"%Y-%m-%dT%H:%M:%S%z\")\ndt","2633b488":"from datetime import datetime, timedelta, timezone\nJST = timezone(timedelta(hours=+9))\n\ndt = datetime(2015, 1, 1, 12, 0, 0, tzinfo=JST)\nprint(dt)\n\nprint(dt.tzname())","c0ed05f9":"\ndt = datetime(2015, 1, 1, 12, 0, 0, tzinfo=timezone(timedelta(hours=9), 'JST'))\nprint(dt.tzname)","864c560d":"#for python version <3.2\nfrom datetime import datetime, timedelta\nfrom dateutil import tz\nJST = tz.tzoffset('JST', 9 * 3600) # 3600 seconds per hour\ndt = datetime(2015, 1, 1, 12, 0, tzinfo=JST)\nprint(dt)\n# 2015-01-01 12:00:00+09:00\nprint(dt.tzname)\n# 'JST'","9fc93b81":"from datetime import datetime, timedelta\nnow = datetime.now()\nthen = datetime(2016, 5, 23)","de285591":"print(now)","a4d87d39":"print(then)","d7153de1":"delta = now-then\ndelta","dc47581f":"print(delta.days)","e283aac4":"print(delta.seconds)","e1295b3d":"import datetime\n# Date object\ntoday = datetime.date.today()\nprint(today)\nnew_year = datetime.date(2021, 1, 1) \nprint(new_year)\n","f4b75fe3":"# Time object\nnoon = datetime.time(12, 0, 0)\nnoon","eced2f45":"# Current datetime\nnow = datetime.datetime.now()\nnow","84cc5df7":"millenium_turn = datetime.datetime(2021, 10, 15, 12, 20, 28) \nmillenium_turn","4ee722c7":"noon-today","4695cee5":"# Do this instead\nprint('Time since the millenium at midnight: ',\ndatetime.datetime(today.year, today.month, today.day) - millenium_turn)","55e8b4e2":"from datetime import datetime\nfrom dateutil import tz\nutc = tz.tzutc()\nutc","b114b09c":"local = tz.tzlocal()\nlocal","bef2dee1":"\nutc_now = datetime.utcnow()\nutc_now # Not timezone-aware.\n","7336eded":"utc_now = utc_now.replace(tzinfo=utc)\nutc_now # Timezone-aware.\n","279b627b":"local_now = utc_now.astimezone(local)\nlocal_now # Converted to local time.","11c50a52":"import datetime\ntoday = datetime.date.today()\nprint('Today:', today)","1d3ed4ad":"yesterday = today - datetime.timedelta(days=1)\nprint('Yesterday:', yesterday)","47678d6e":"tomorrow = today + datetime.timedelta(days=1)\nprint('Tomorrow:', tomorrow)","7574139c":"print('Time between tomorrow and yesterday:', tomorrow - yesterday)","e9a42394":"import time\nfrom datetime import datetime\nseconds_since_epoch=time.time() \nprint(seconds_since_epoch)\nutc_date=datetime.utcfromtimestamp(seconds_since_epoch)\nutc_date","d2e377ef":"import calendar\nfrom datetime import date\n\ndef monthdelta(date, delta):\n    m, y = (date.month+delta) % 12, date.year + ((date.month)+delta-1) \/\/ 12\n    if not m: m = 12\n    d = min(date.day, calendar.monthrange(y, m)[1])\n    return date.replace(day=d,month=m, year=y)","ee1d0b5e":"next_month = monthdelta(date.today(), 4)\nnext_month","dfe76d23":"# parse Datetime from string \nfrom dateutil.parser import parse\ndt = parse(\"Today is January 1, 2020 at 8:21:00AM\", fuzzy=True)\nprint(dt)","03608f38":"import datetime\n# The size of each step in days\nday_delta = datetime.timedelta(days=1)\nstart_date = datetime.date.today()\nend_date = start_date + 7*day_delta\nfor i in range((end_date - start_date).days):\n    print(start_date + i*day_delta)","38f9e3d5":"The datetime module can convert a POSIX timestamp to a ITC datetime object.","cff0dd27":"## Simple date arithmetic","e59ef456":"## Parsing a string into a timezone aware datetime object","915de534":"## Converting timestamp to datetime","cf25738f":"the timedelta module comes in handy to compute differences between times:","e0af8a61":"## Constructing timezone-aware datetimes","895eed67":"Arithmetic operations for these objects are only supported within same datatype and performing simple arithmetic\nwith instances of different types will result in a TypeError.","f16ecc09":"To switch between time zones, you need datetime objects that are timezone-aware.","eee5ff03":"## Subtracting months from a date accurately","1afa5de6":"The datetime module contains three primary types of objects - date, time, and datetime.","ca7d49e3":"## Computing time differences","d56be8ab":"## Switching between time zones","a32acf14":"## Basic datetime objects usage","4458898f":"By default all datetime objects are naive. To make them timezone-aware, you must attach a tzinfo object, which\nprovides the UTC offset and timezone abbreviation as a function of date and time.","41bf59e5":"Dates don't exist in isolation. It is common that you will need to find the amount of time between dates or\ndetermine what the date will be tomorrow. This can be accomplished using timedelta objects","0f3cb79f":"# Chapter 5: Date and Time","2275471c":"## Iterate over dates"}}