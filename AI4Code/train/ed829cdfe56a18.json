{"cell_type":{"31fb47ea":"code","334f2c15":"code","ad5b61f8":"code","78a16941":"code","0e3124be":"code","646bd823":"code","96c14f29":"code","e72c59d3":"code","ac321119":"code","911edfd9":"markdown"},"source":{"31fb47ea":"import numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom datetime import datetime\nimport matplotlib.pyplot as plt","334f2c15":"data = np.genfromtxt('..\/input\/insar-fashion-mnist-challenge\/train.csv', dtype=np.uint8, delimiter=',', skip_header=1)\nlabels_train = data[:,0]\ninputs_train = data[:,1:785]\nlabels, counters = np.unique(labels_train, return_counts=True)\nfor lab, num in zip(labels, counters):\n    print(\"Label {} has {} samples\".format(lab, num))","ad5b61f8":"fig, ax_array = plt.subplots(6, 6)\naxes = ax_array.flatten()\nfor i, ax in enumerate(axes):\n    ax.imshow(np.reshape(inputs_train[i,:], (28, 28)), cmap='gray_r')\nplt.show()","78a16941":"n = inputs_train.shape[0]\nX = inputs_train[0:n,:]\nY = labels_train[0:n]\nprint(X.shape, Y.shape)","0e3124be":"%%time\npca = PCA(n_components=200)\nX_new = pca.fit_transform(X)\n#print(pca.explained_variance_ratio_)\nprint(sum(pca.explained_variance_ratio_))","646bd823":"pipe = Pipeline([\n    ('sc', StandardScaler()),\n    ('pca', PCA(n_components=100)),\n    ('svc', SVC(kernel='poly'))\n])\ngamma_grid = np.logspace(-2,2,5)\nC_grid = [10] #np.logspace(-2,2,5)\nparameters = {'svc__gamma': gamma_grid, 'svc__C': C_grid}","96c14f29":"%%time\nK = 5 # 1\/2 train, 1\/2 validation\nclf = GridSearchCV(estimator=pipe, param_grid=parameters, cv=K, scoring=\"accuracy\", n_jobs=2)\n#clf = RandomizedSearchCV(svc, parameters, cv=K, scoring=\"accuracy\", random_state=0)\nclf.fit(X, Y)\nprint(clf.best_params_)\nprint(clf.best_score_)","e72c59d3":"data = np.genfromtxt('..\/input\/insar-fashion-mnist-challenge\/test_inputs.csv', dtype=np.uint8, delimiter=',', skip_header=1)\nypred_test = clf.predict(data)","ac321119":"ntest = ypred_test.shape[0]\nid=np.arange(ntest)\ndata_to_submit = np.concatenate((id.reshape(ntest, 1), ypred_test.reshape(ntest,1)), axis=1)\nnom = 'submission_' + datetime.now().strftime('%H:%M:%S_%d-%m-%Y') + '.csv'\nnp.savetxt(nom, data_to_submit, delimiter=',', fmt='%4d', header=\"id,predicted\")","911edfd9":"SVC(kernel='poly')\n{'C': 10, 'gamma': 1.0}\n0.8835\nCPU times: user 2min 31s, sys: 158 ms, total: 2min 31s\nWall time: 15min 57s"}}