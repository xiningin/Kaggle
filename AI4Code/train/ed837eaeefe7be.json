{"cell_type":{"768b9a27":"code","942168e1":"code","ad0a9151":"code","213bb881":"code","e7cecd15":"code","2e7014d2":"code","16150183":"code","2e964747":"code","828eec7b":"code","6d38b4fd":"code","e4adaef8":"code","d4b54277":"code","cd643845":"code","6a2ccbe3":"code","64829341":"code","2e3986b5":"code","25f6de21":"code","e6542ea0":"code","8a152b36":"code","1cfd3445":"code","754f00e3":"code","18ea3b97":"code","9d105dec":"code","180af3e9":"code","aa9ad2e1":"code","bdf30b5e":"code","fe01c353":"code","85eb8cee":"code","7e0cc130":"code","f360ae81":"code","6fa9839d":"code","2bc00062":"code","dbb4569e":"code","b1ba6c87":"code","65b66284":"code","40fdf4ad":"code","031361bc":"code","7c836089":"code","899ba6ca":"code","5523a3e7":"code","1721dfaa":"code","ff8a78c0":"code","f36f14b5":"code","043ed332":"code","da6db156":"code","499b6579":"code","60e9f5fe":"code","14e1e5a4":"code","3b239a5c":"code","b140f4e2":"code","a63a95ce":"code","8a19053a":"code","1ff45abe":"code","2f9260d0":"code","7b8cefca":"code","22521c2e":"code","afe2423e":"code","bdcb3753":"code","3c37816e":"code","e4d8bdbd":"code","f02afed9":"code","a56dc4fe":"code","4d5a5da3":"code","2e45a922":"code","f9bafee3":"code","7791ea0c":"code","683cc264":"code","3e214db1":"code","a625a281":"code","14e89b19":"code","1759c8b9":"code","29ec0aa4":"markdown","62e1727f":"markdown","63f45bed":"markdown","f9ea9374":"markdown"},"source":{"768b9a27":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","942168e1":"import matplotlib.pyplot as plt\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport cufflinks as cf\ncf.go_offline()\nfrom plotly.offline import iplot\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot","ad0a9151":"train= pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","213bb881":"train.info()","e7cecd15":"sns.heatmap(train.isnull(), yticklabels= False, cbar = False)","2e7014d2":"sns.set_style('whitegrid')\nsns.countplot(x ='Survived', data = train)","16150183":"sns.countplot(x = 'Survived', data = train, hue = 'Sex')","2e964747":"sns.countplot(x = 'Survived', data = train, hue = 'Sex', palette = 'RdBu_r')","828eec7b":"sns.countplot(x = 'Survived', data = train, hue = 'Pclass')","6d38b4fd":"sns.distplot(train['Age'].dropna(), kde = False, bins = 30)","e4adaef8":"train['Age'].plot.hist(bins = 50)","d4b54277":"sns.countplot(x = 'SibSp', data= train)","cd643845":"train['Fare'].hist(bins = 50)","6a2ccbe3":"train['Fare'].hist(bins = 50, figsize = (12,5))","64829341":"train['Fare'].iplot(kind = 'hist', bins = 50)","2e3986b5":"train['Age'].iplot(kind = 'hist', bins = 50)","25f6de21":"train['Pclass'].iplot(kind = 'hist', bins = 10)","e6542ea0":"train['SibSp'].iplot(kind = 'bar', bins = 50)","8a152b36":"def impute_age(cols):\n  Age = cols[0]\n  Pclass = cols[1]\n\n  if pd.isnull(Age):\n    \n    if Pclass == 1:\n      return 37\n    elif Pclass == 2:\n      return 29\n    else:\n      return 24\n  else:\n    return Age","1cfd3445":"train['Age']= train[['Age', 'Pclass']].apply(impute_age, axis = 1)","754f00e3":"sns.heatmap(train.isnull(), yticklabels= False, cbar= False, cmap = 'viridis')","18ea3b97":"train.drop('Cabin', axis = 1, inplace = True)","9d105dec":"train.head()","180af3e9":"sns.heatmap(train.isnull(), yticklabels= False, cbar= False, cmap = 'viridis')","aa9ad2e1":"train.dropna(inplace = True)","bdf30b5e":"sns.heatmap(train.isnull(), yticklabels= False, cbar= False, cmap = 'viridis')","fe01c353":"pd.get_dummies(train['Sex'])","85eb8cee":"sex = pd.get_dummies(train['Sex'], drop_first= True)","7e0cc130":"embarked = pd.get_dummies(train['Embarked'], drop_first= True)","f360ae81":"train = pd.concat([train, sex, embarked], axis = 1)","6fa9839d":"train.head()","2bc00062":"train.drop(['Sex', 'Embarked', 'Name', 'Ticket'], axis =1, inplace = True)","dbb4569e":"train.drop(['PassengerId'], axis = 1, inplace=True )","b1ba6c87":"train","65b66284":"X = train.drop('Survived', axis = 1)\nY = train['Survived']","40fdf4ad":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","031361bc":"test","7c836089":"from sklearn.model_selection import train_test_split","899ba6ca":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=101)","5523a3e7":"from sklearn.linear_model import LogisticRegression","1721dfaa":"from sklearn import preprocessing","ff8a78c0":"logmodel = LogisticRegression()","f36f14b5":"logmodel.fit(X_train, Y_train)","043ed332":"prediction = logmodel.predict(X_test)","da6db156":"from sklearn.metrics import classification_report","499b6579":"print(classification_report(Y_test, prediction))","60e9f5fe":"from sklearn.metrics import confusion_matrix","14e1e5a4":"confusion_matrix(Y_test, prediction)","3b239a5c":"train.corr()","b140f4e2":"sns.heatmap(train.corr(), cmap = 'coolwarm', annot= True)","a63a95ce":"from sklearn.linear_model import LinearRegression","8a19053a":"lm = LinearRegression()","1ff45abe":"lm.fit(X_train, Y_train)","2f9260d0":"print(lm.intercept_)","7b8cefca":"lm.coef_","22521c2e":"cdf= pd.DataFrame(lm.coef_, X.columns, columns = ['Coeff'])","afe2423e":"cdf","bdcb3753":"predictions = lm.predict(X_test)","3c37816e":"predictions","e4d8bdbd":"Y_test","f02afed9":"sns.distplot(Y_test - predictions, bins = 100)","a56dc4fe":"from sklearn import metrics","4d5a5da3":"print('MAE:', metrics.mean_absolute_error(Y_test, predictions))","2e45a922":"print('MSE:', metrics.mean_squared_error(Y_test, predictions))","f9bafee3":"np.sqrt(metrics.mean_squared_error(Y_test, predictions))","7791ea0c":"from sklearn.ensemble import RandomForestClassifier\n\ny = train[\"Survived\"]\n","683cc264":"features = [\"Pclass\",  \"SibSp\", \"Parch\"]\n","3e214db1":"X = pd.get_dummies(train[features])\n","a625a281":"X_test = pd.get_dummies(test[features])\n\n","14e89b19":"model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n","1759c8b9":"\noutput = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\n","29ec0aa4":"# Basic Data Visualization","62e1727f":"# #Applying Linear Regression on the above model","63f45bed":"# Exploratory Analysis of Titanic Data\nI ran an exploratory analysis of the Titanic Data using both Logistic & Linear regression. This is my first time publishing for the competition. ","f9ea9374":"# **#Applying Linear Regression on the above model**"}}