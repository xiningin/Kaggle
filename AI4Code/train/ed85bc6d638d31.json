{"cell_type":{"48a27add":"code","4b38d7d5":"code","7cb848cd":"code","3999b33c":"code","14b5d486":"code","fb44fad0":"code","9d34e9ae":"code","7b7287ae":"code","fc34414d":"code","418f3905":"code","025ca464":"code","17c42e27":"code","9e3d80e1":"code","65149ce2":"code","f709d7f7":"code","75ca13a1":"code","e46c247d":"code","63d5b336":"code","6aeb0398":"code","f331a4ac":"code","176ccce2":"code","d74638ee":"code","542fbe41":"code","230c651d":"code","87564bf4":"code","51e90ed9":"code","3483558c":"code","f0dcbaf8":"code","188840e8":"code","11ac9801":"code","00f9d61e":"code","b3c56dba":"code","bb832b01":"code","85bd50fc":"code","18788af5":"code","3882a74d":"code","b72653d9":"code","2af60cff":"code","994c0658":"code","6684d345":"code","930144c1":"code","160ad40f":"code","982d2a82":"code","15a4efb9":"code","f135b8d5":"code","8c0fcd01":"code","24e18895":"code","3c667024":"code","6d1e0e2f":"code","68af7191":"code","a670891b":"code","b01284cd":"code","83cb34ad":"code","bef33093":"code","62168719":"code","167930f7":"code","54de4b63":"code","7cd2c82f":"code","b276f103":"code","09379415":"code","c6283ae4":"code","f98da239":"code","e88be361":"markdown","70ff574d":"markdown","24ab3e40":"markdown","c41cb632":"markdown","210009e1":"markdown","d7310cee":"markdown","4752b17d":"markdown","8dc00ffe":"markdown","57fd8200":"markdown","c99d59a7":"markdown","39cac46f":"markdown","da4d8dd7":"markdown","41847f57":"markdown","dd5293e4":"markdown","d7e37787":"markdown","ebadc09b":"markdown","00f66ae2":"markdown","3f2501c9":"markdown","07a82dee":"markdown","14b310bf":"markdown","c73673dd":"markdown","8140343e":"markdown","eb082a43":"markdown","da33fd8b":"markdown"},"source":{"48a27add":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b38d7d5":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","7cb848cd":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_train.head()","3999b33c":"df_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf_test.head()","14b5d486":"df_train.shape","fb44fad0":"df_train.info()","9d34e9ae":"df_train.isnull().sum()","7b7287ae":"df_test.shape","fc34414d":"df_test.info()","418f3905":"df_test.isnull().sum()","025ca464":"def pie_chart(feature):\n    feature_ratio = df_train[feature].value_counts(sort = False)\n    feature_size = feature_ratio.size\n    feature_index = feature_ratio.index\n    survived = df_train[df_train['Survived'] == 1][feature].value_counts()\n    dead = df_train[df_train['Survived'] == 0][feature].value_counts()\n    \n    plt.plot(aspect = 'auto')\n    plt.pie(feature_ratio, labels = feature_index, autopct = '%1.1f%%')\n    plt.title(feature + '\\'s ratio in total')\n    plt.show()\n    \n    for i, index in enumerate(feature_index):\n        plt.subplot(1, feature_size + 1, i + 1, aspect = 'equal')\n        plt.pie([survived[index], dead[index]], labels = ['Survivied', 'Dead'], autopct = '%1.1f%%')\n        plt.title(str(index) + '\\'s ratio')\n        \n    plt.show()","17c42e27":"pie_chart('Sex')","9e3d80e1":"pie_chart('Pclass')","65149ce2":"pd.crosstab([df_train['Sex'], df_train['Survived']], df_train['Pclass'], margins = True).style.background_gradient(cmap = 'summer_r')","f709d7f7":"pie_chart('Embarked')","75ca13a1":"def bar_chart(feature):\n    survived = df_train[df_train['Survived'] == 1][feature].value_counts()\n    dead = df_train[df_train['Survived'] == 0][feature].value_counts()\n    df = pd.DataFrame([survived, dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind ='bar',stacked = True, figsize = (10,5))","e46c247d":"bar_chart(\"SibSp\")","63d5b336":"bar_chart(\"Parch\")","6aeb0398":"train_and_test = [df_train, df_test]","f331a4ac":"for dataset in train_and_test:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.')\n\ndf_train.head()","176ccce2":"pd.crosstab(df_train['Title'], df_train['Sex'])","d74638ee":"for dataset in train_and_test:\n    dataset['Title'] = dataset['Title'].replace(['Capt', 'Col', 'Countess', 'Don','Dona', 'Dr', 'Jonkheer',\n                                                 'Lady','Major', 'Rev', 'Sir'], 'Other')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n\ndf_train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","542fbe41":"for dataset in train_and_test:\n    dataset['Title'] = dataset['Title'].astype(str)","230c651d":"df_train.drop('Name', axis = 1, inplace = True)\ndf_test.drop('Name', axis = 1, inplace = True)","87564bf4":"for dataset in train_and_test:\n    dataset['Sex'] = dataset['Sex'].astype(str)","51e90ed9":"df_train.isnull().sum()","3483558c":"df_train.Embarked.value_counts(dropna=False)","f0dcbaf8":"for dataset in train_and_test:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\n    dataset['Embarked'] = dataset['Embarked'].astype(str)","188840e8":"for dataset in train_and_test:\n    dataset['Age'].fillna(dataset.groupby(\"Title\")['Age'].transform(\"median\"), inplace=True)\n    dataset['Age'] = dataset['Age'].astype(int)\n    df_train['AgeBand'] = pd.cut(df_train['Age'], 6)\nprint (df_train[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean())","11ac9801":"for dataset in train_and_test:\n    dataset.loc[ dataset['Age'] <= 13, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 13) & (dataset['Age'] <= 27), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 27) & (dataset['Age'] <= 40), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 53), 'Age'] = 3\n    dataset.loc[(dataset['Age'] > 53) & (dataset['Age'] <= 67), 'Age'] = 4\n    dataset.loc[ dataset['Age'] > 67, 'Age'] = 5\n    dataset['Age'] = dataset['Age'].map( { 0: 'Child',  1: 'Youth', 2: 'Young', 3: 'Middle', 4: 'Prime', 5: 'Old'} ).astype(str)","00f9d61e":"bar_chart('Age')","b3c56dba":"print(df_train[['Pclass', 'Fare']].groupby(['Pclass'], as_index=False).median())\nprint(\"\")\nprint(df_test[df_test[\"Fare\"].isnull()][\"Pclass\"])","bb832b01":"for dataset in train_and_test:\n    dataset['Fare'] = dataset['Fare'].fillna(8.0500)","85bd50fc":"for dataset in train_and_test:\n    dataset.loc[ dataset['Fare'] <= 10, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 10) & (dataset['Fare'] <= 30), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 70), 'Fare'] = 2\n    dataset.loc[(dataset['Fare'] > 70) & (dataset['Fare'] <= 100), 'Fare'] = 3\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 4\n    dataset['Fare'] = dataset['Fare'].astype(int)","18788af5":"bar_chart(\"Fare\")","3882a74d":"df_train.Cabin.value_counts()","b72653d9":"for dataset in train_and_test:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","2af60cff":"Pclass1 = df_train[df_train['Pclass'] == 1]['Cabin'].value_counts()\nPclass2 = df_train[df_train['Pclass'] == 2]['Cabin'].value_counts()\nPclass3 = df_train[df_train['Pclass'] == 3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind = 'bar',stacked = True, figsize = (10,5))","994c0658":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_and_test:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","6684d345":"df_train[\"Cabin\"].fillna(df_train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace = True)\ndf_test[\"Cabin\"].fillna(df_test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace = True)","930144c1":"for dataset in train_and_test:\n    dataset[\"Family\"] = dataset[\"Parch\"] + dataset[\"SibSp\"]\n    dataset['Family'] = dataset['Family'].astype(int)","160ad40f":"df_train['Family'].head(30)","982d2a82":"features_drop = ['Ticket', 'SibSp', 'Parch']\ndf_train = df_train.drop(features_drop, axis=1)\ndf_test = df_test.drop(features_drop, axis=1)\ndf_train = df_train.drop(['PassengerId', 'AgeBand'], axis=1)\n\nprint(df_train.head())\nprint(df_test.head())","15a4efb9":"df_train = pd.get_dummies(df_train)\ndf_test = pd.get_dummies(df_test)\n\ndf_train_label = df_train['Survived']\ndf_train_data = df_train.drop('Survived', axis=1)\ndf_test_data = df_test.drop(\"PassengerId\", axis=1).copy()","f135b8d5":"df_train_data.head(10)","8c0fcd01":"df_test_data.head(10)","24e18895":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.utils import shuffle","3c667024":"df_train.info()","6d1e0e2f":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits = 10, shuffle = True, random_state = 0)","68af7191":"clf = KNeighborsClassifier(n_neighbors = 10)\nscoring = 'accuracy'\nscore = cross_val_score(clf, df_train_data, df_train_label, cv = k_fold, n_jobs = 1, scoring = scoring)\nprint(score)","a670891b":"round(np.mean(score) * 100, 2)","b01284cd":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, df_train_data, df_train_label, cv = k_fold, n_jobs = 1, scoring = scoring)\nprint(score)","83cb34ad":"round(np.mean(score) * 100, 2)","bef33093":"clf = RandomForestClassifier(n_estimators = 100)\nscoring = 'accuracy'\nscore = cross_val_score(clf, df_train_data, df_train_label, cv = k_fold, n_jobs = 1, scoring = scoring)\nprint(score)","62168719":"round(np.mean(score) * 100, 2)","167930f7":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, df_train_data, df_train_label, cv = k_fold, n_jobs = 1, scoring = scoring)\nprint(score)","54de4b63":"round(np.mean(score) * 100, 2)","7cd2c82f":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, df_train_data, df_train_label, cv = k_fold, n_jobs = 1, scoring = scoring)\nprint(score)","b276f103":"round(np.mean(score) * 100,2)","09379415":"clf = SVC()\nclf.fit(df_train_data, df_train_label)\n\ntest_data = df_test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)","c6283ae4":"submission = pd.DataFrame({\n        \"PassengerId\": df_test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","f98da239":"submission = pd.read_csv('submission.csv')\nsubmission.head()","e88be361":"# **1. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30**\n* load train.csv\n* load test.csv","70ff574d":"**2.4 SibSp**","24ab3e40":"# **3. \ub370\uc774\ud130 \uc804\ucc98\ub9ac \ubc0f \ud2b9\uc131 \ucd94\ucd9c**","c41cb632":"**4.5 SVM**","210009e1":"**3.4 Age**","d7310cee":"**3.5 Fare**","4752b17d":"**3.2 Sex**","8dc00ffe":"**3.6 Cabin**","57fd8200":"**3.1 Name**","c99d59a7":"**3.8 Feature Drop**","39cac46f":"**3.7 Family**","da4d8dd7":"**2.5 Parch**","41847f57":"**4.1 kNN**","dd5293e4":"**2.1 Sex**","d7e37787":"**2.2 Pclass**\n* 1's ratio = 1st class\n* 2's ratio = 2nd class\n* 3's ratio = 3rd class","ebadc09b":"**3.3 Embarked**","00f66ae2":"**4.4 Naive Bayes**","3f2501c9":"**4.2 Decision Tree**","07a82dee":"**4.3 Random Forest**","14b310bf":"**2.3 Embarked**\n* C = Cherbourg\n* Q = Queenstown\n* S = Southampton","c73673dd":"**Cross Validation (K-fold)**","8140343e":"# **2. \ub370\uc774\ud130 \ubd84\uc11d\ud558\uae30**\n* Sex\n* Pclass\n* Embarked\n* SibSp\n* Parch","eb082a43":"# **4. \ubaa8\ub378\ub9c1**","da33fd8b":"# **5. Testing**"}}