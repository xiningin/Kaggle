{"cell_type":{"c7da30ee":"code","7cb4b5f3":"code","053dec68":"code","5f249a59":"code","06c0b094":"code","f04ba9ec":"code","c7401fd9":"code","00c8ff52":"code","a517d0e7":"code","c7b5c385":"code","5f55d1d3":"code","937d9a72":"code","4c915504":"code","e6780584":"code","5e42fb62":"code","a9a54246":"code","055ad1a2":"code","5be79b01":"markdown","4ace3f3c":"markdown","11450346":"markdown","da63749d":"markdown","0a31d2bf":"markdown"},"source":{"c7da30ee":"import numpy as np \nimport pandas as pd \nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.layers.recurrent import LSTM\nfrom keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt","7cb4b5f3":"df = pd.read_csv(\"..\/input\/nyse\/prices-split-adjusted.csv\", index_col = 0)\ndf.info()\ndf.head()\n\nprint('\\nNumber of different Stocks: ', len(list(set(df.symbol))))\nprint(list(set(df.symbol))[:10])","053dec68":"df.tail()","5f249a59":"df.describe()","06c0b094":"df.info()","f04ba9ec":"'''Visualizing the Stock prices of a particular Stock \"YHOO\" from the dataset over the time (in days)'''\n\nplt.figure(figsize=(15, 5))\nplt.plot(df[df.symbol == 'YHOO'].open.values, color='red', label='open')\nplt.plot(df[df.symbol == 'YHOO'].close.values, color='green', label='close')\nplt.plot(df[df.symbol == 'YHOO'].low.values, color='blue', label='low')\nplt.plot(df[df.symbol == 'YHOO'].high.values, color='black', label='high')\nplt.title('Stock Price')\nplt.xlabel('Time[days]')\nplt.ylabel('Price')\nplt.legend(loc='best')\nplt.show()","c7401fd9":"'''This function will do the Min\/Max normalization of the dataset'''\n\ndef normalize_data(df):\n    min_max_scaler = MinMaxScaler()\n    df['open'] = min_max_scaler.fit_transform(df.open.values.reshape(-1,1))\n    df['high'] = min_max_scaler.fit_transform(df.high.values.reshape(-1,1))\n    df['low'] = min_max_scaler.fit_transform(df.low.values.reshape(-1,1))\n    df['close'] = min_max_scaler.fit_transform(df['close'].values.reshape(-1,1))\n    return df","00c8ff52":"'''This function create the Train\/Validation\/Test data of a particular Stock data \"YHOO\" and sequence length'''\n\ndef create_data(stock, seq_len):\n    data_raw = stock.to_numpy()    #convert to numpy array\n    data = []\n    \n    #Create all possible sequences of length seq_len\n    \n    for idx in range(len(data_raw) - seq_len): \n        data.append(data_raw[idx: idx + seq_len])\n    percentage_of_val_set = 10 \n    percentage_of_test_set = 10   \n    data = np.array(data);\n    validation_set_size = int(np.round(percentage_of_val_set\/100*data.shape[0]));  \n    test_set_size = int(np.round(percentage_of_test_set\/100*data.shape[0]));\n    train_set_size = data.shape[0] - (validation_set_size + test_set_size);\n    \n    x_train = data[:train_set_size,:-1,:]\n    y_train = data[:train_set_size,-1,:]\n    \n    x_valid = data[train_set_size:train_set_size+validation_set_size,:-1,:]\n    y_valid = data[train_set_size:train_set_size+validation_set_size,-1,:]\n    \n    x_test = data[train_set_size+validation_set_size:,:-1,:]\n    y_test = data[train_set_size+validation_set_size:,-1,:]\n    \n    return [x_train, y_train, x_valid, y_valid, x_test, y_test]","a517d0e7":"'''Choosing the Stock \"YHOO\" and removing the column \"symbol\" from the dataset'''\n\ndf_stock = df[df.symbol == 'YHOO'].copy()\ndf_stock.drop(['symbol'],1,inplace=True)\ndf_stock.drop(['volume'],1,inplace=True)\n","c7b5c385":"col = list(df_stock.columns.values)\nprint('Columns in the resulted dataset = ', col)","5f55d1d3":"'''Normalizing the Stock'''\n\ndf_stock_norm = df_stock.copy()\ndf_stock_norm = normalize_data(df_stock_norm)","937d9a72":"'''Create Train\/Validation\/Test data'''\n\nseq_len = 20           #Choose sequence length\ntrain_x, train_y, val_x, val_y, test_x, test_y = create_data(df_stock_norm, seq_len)\n\n'''Summary of dataset'''\n\nprint(\"Summary of dataset:\\n\")\nprint('train_x = ',train_x.shape)\nprint('train_y = ', train_y.shape)\nprint('val_x = ',val_x.shape)\nprint('val_y = ', val_y.shape)\nprint('test_x = ', test_x.shape)\nprint('test_y = ',test_y.shape)","4c915504":"'''Visualizing the Normalized Stock prices per volume of a particular Stock \"YHOO\" from the dataset over the time (in days)'''\n\nplt.figure(figsize=(15, 5));\nplt.plot(df_stock_norm.open.values, color='red', label='open')\nplt.plot(df_stock_norm.close.values, color='green', label='low')\nplt.plot(df_stock_norm.low.values, color='blue', label='low')\nplt.plot(df_stock_norm.high.values, color='black', label='high')\n\nplt.title('Stock')\nplt.xlabel('Time [days]')\nplt.ylabel('Normalized price\/Volume')\nplt.legend(loc='best')\nplt.show()","e6780584":"'''Making the LSTM model for the datset'''\n\nlstm_model = Sequential()\n\nlstm_model.add(LSTM(input_shape = (19, 4), units = 50, return_sequences=True)) #Adding LSTM layer\nlstm_model.add(Dropout(0.2))                                                   #Adding Dropout\n\nlstm_model.add(LSTM(100, return_sequences = False))                            #Adding LSTM layer\nlstm_model.add(Dropout(0.2))                                                   #Adding Dropout\n\nlstm_model.add(Dense(units=4))                                                 #Adding Dense layer with activation = \"linear\"\nlstm_model.add(Activation('linear'))\n\n\n'''Compiling the model'''\n\nlstm_model.compile(loss='mse', optimizer='rmsprop')","5e42fb62":"'''Fitting the dataset into the model'''\n\nlstm_model.fit(train_x, train_y, batch_size=128, epochs=100, validation_data=(val_x, val_y))","a9a54246":"'''Predicted values of train\/val\/test dataset'''\n\ntrain_y_pred = lstm_model.predict(train_x)\nval_y_pred = lstm_model.predict(val_x)\ntest_y_pred = lstm_model.predict(test_x)","055ad1a2":"'''Visualizing the trained\/predicted\/test dataset'''\n\nc = 0 # 0 = open, 1 = close, 2 = high, 3 = low\n\nplt.figure(figsize=(15, 5));\nplt.subplot(1,2,1);\n\nplt.plot(np.arange(train_y.shape[0]), train_y[:, c], color='blue', label='Train target')\n\nplt.plot(np.arange(train_y.shape[0], train_y.shape[0] + val_y.shape[0]), val_y[:, c], color='gray', label='Validation target')\n\nplt.plot(np.arange(train_y.shape[0]+val_y.shape[0], train_y.shape[0]+test_y.shape[0]+test_y.shape[0]), test_y[:, c], color='black', label='Test target')\n\nplt.plot(np.arange(train_y_pred.shape[0]),train_y_pred[:, c], color='red', label='Train Prediction')\n\nplt.plot(np.arange(train_y_pred.shape[0], train_y_pred.shape[0]+val_y_pred.shape[0]), val_y_pred[:, c], color='orange', label='Validation Prediction')\n\nplt.plot(np.arange(train_y_pred.shape[0]+val_y_pred.shape[0], train_y_pred.shape[0]+val_y_pred.shape[0]+test_y_pred.shape[0]), test_y_pred[:, c], color='green', label='Test Prediction')\n\nplt.title('Past and Future Stock Prices')\nplt.xlabel('Time [days]')\nplt.ylabel('Normalized Price')\nplt.legend(loc='best');\n\nplt.subplot(1,2,2);\nplt.plot(np.arange(train_y.shape[0], train_y.shape[0]+test_y.shape[0]), test_y[:, c], color='black', label='Test target')\n\nplt.plot(np.arange(train_y_pred.shape[0], train_y_pred.shape[0]+test_y_pred.shape[0]), test_y_pred[:, c], color='green', label='Test Prediction')\n\nplt.title('Future Stock Prices')\nplt.xlabel('Time [days]')\nplt.ylabel('Normalized Price')\nplt.legend(loc='best');\n\ntrain_acc = np.sum(np.equal(np.sign(train_y[:,1]-train_y[:,0]), np.sign(train_y_pred[:,1]-train_y_pred[:,0])).astype(int)) \/ train_y.shape[0]\nval_acc = np.sum(np.equal(np.sign(val_y[:,1]-val_y[:,0]), np.sign(val_y_pred[:,1]-val_y_pred[:,0])).astype(int)) \/ val_y.shape[0]\ntest_acc = np.sum(np.equal(np.sign(test_y[:,1]-test_y[:,0]), np.sign(test_y_pred[:,1]-test_y_pred[:,0])).astype(int)) \/ test_y.shape[0]\n\nprint('Accuracy for Close - Open price for Train\/Validation\/Test Set: %.2f\/%.2f\/%.2f'%(train_acc, val_acc, test_acc))","5be79b01":"# *Data Visualization*","4ace3f3c":"# *LSTM Model*","11450346":"# *Data Preprocessing*","da63749d":"# *Prediction and Accuracy*","0a31d2bf":"# *Reading data from the file named \"prices-split-adjusted\"*"}}