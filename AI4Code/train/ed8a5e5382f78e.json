{"cell_type":{"6387f89c":"code","7d8ba1e4":"code","0d7b0819":"code","bd417e4d":"code","6f4e0798":"code","a5450bba":"code","ece8e46e":"code","457317cd":"code","14737f68":"code","c2dbce65":"markdown","fe3a5e44":"markdown","9f80f1b3":"markdown","407d2a04":"markdown","0e50831b":"markdown","753230d8":"markdown","236137b4":"markdown","be8d4ae0":"markdown","d103bc8f":"markdown","78cd0d27":"markdown","6a753f1e":"markdown","8007e4e7":"markdown","f2f25561":"markdown","678bf4d5":"markdown","0d744fa1":"markdown","b41de3b8":"markdown","bc095899":"markdown"},"source":{"6387f89c":"# We will use pandas to load the dataset\n\nimport pandas as pd","7d8ba1e4":"# Load the data from the CSV file and show it\n\ndata = pd.read_csv('https:\/\/storage.googleapis.com\/kagglesdsdata\/datasets\/58414\/113400\/tennis.csv?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20201024%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20201024T041943Z&X-Goog-Expires=259199&X-Goog-SignedHeaders=host&X-Goog-Signature=a5813f549b6f92e5c5c5f58074008ea830e0abf3aa450ea8507a9517d14862d6f1e621e7339f4c5b3871a7c2b7a97be822cef5e3543a8aa3e9a7d8e9f1925ae64ea7a803637fc820635662dfa2c189894ddd8003779b47b08b452682663595ddca8a1d0f8ba077a941bda7d7c29fe157dd700bf764fcea4a4e3258d707180c66988232638b73c8cbc4b573ac483e3e02958a42c16adb954285dc354a3312f761f19b16627132bbccfd06d4d5d55297c01af0d52b0c7e7c6cc02a5bb8dbc8593d789bab79ffa8c4a488c60ec86ad3089e7759b41e55c091111ba650a42abbde33639403fbe6721731804d0291823761b5ea51317f27fb42b9194a47f883ac4415')\ndata","0d7b0819":"# Create a frequncy table from the data\n\noutlook = data.groupby(['outlook', 'play']).size()\ntemp = data.groupby(['temp', 'play']).size()\nhumidity = data.groupby(['humidity', 'play']).size()\nwindy = data.groupby(['windy', 'play']).size()\nplay = data.play.value_counts()","bd417e4d":"# Display the created frequency table\n\nprint(temp)\nprint('------------------')\nprint(humidity)\nprint('------------------')\nprint(windy)\nprint('------------------')\nprint(outlook)\nprint('------------------')\nprint('play')\nprint(play)","6f4e0798":"# Calculate the total probability to be used later\n\ntotal_y = play[\"yes\"]\ntotal_n = play[\"no\"]\n\nplay_total = total_y + total_n","a5450bba":"# Function to find the probability of whether to play or not using Naive Bayes algorithm\n# If the value of play_val is \"yes\" then it returns the probabilty of playing \n# and not playing if the input is \"no\"\n\ndef find_prob(outlook_val, temp_val, humidity_val, windy_val, play_val):\n  p_outlook_play = outlook[outlook_val][play_val]\/play[play_val]\n  p_temp_play = temp[temp_val][play_val]\/play[play_val]\n  p_humidity_play = humidity[humidity_val][play_val]\/play[play_val]\n  p_windy_play = windy[windy_val][play_val]\/play[play_val]\n  p_play = play[play_val]\/play_total\n\n  prob = p_outlook_play * p_temp_play * p_humidity_play * p_windy_play * p_play\n  return prob","ece8e46e":"# Function to make predictions\n\ndef pred_play(outlook_val, temp_val, humidity_val, windy_val):\n  prob_yes = find_prob(outlook_val, temp_val, humidity_val, windy_val, \"yes\")\n  prob_no = find_prob(outlook_val, temp_val, humidity_val, windy_val, \"no\")\n\n  print(\"Probability that you should play Tennis: \", prob_yes)\n  print(\"Probability that you should not play Tennis: \", prob_no)\n\n  if prob_yes > prob_no:\n    print(\"You should play Tennis today! :)\")\n  \n  else:\n    print(\"You should not play Tennis today! :(\")","457317cd":"# Making predictions on weather conditions\n\noutlook_value = 'sunny' #@param [\"overcast\", \"sunny\", \"rainy\"]\ntemp_value = 'mild' #@param [\"cool\", \"hot\", \"mild\"]\nhumidity_value = 'normal' #@param [\"high\", \"normal\"]\nwindy_value = False #@param [\"False\", \"True\"] {type:\"raw\"}","14737f68":"# Make and display the predictions\n\npred_play(outlook_value, temp_value, humidity_value, windy_value)","c2dbce65":"Now we will make predictions depending on the output with the highest probability.\n\nThat is, if P(y=\"yes\"|X) > P(y=\"no\"|X), then the prediction would be to play tennis and vice-versa.","fe3a5e44":"# Creating frequency table","9f80f1b3":"**Goal**- Predict whether or not to play tennis given the weather conditions using the ***Naive Bayes*** Algorithm- implemented from scratch. \n\n**Dataset**- The dataset is the [Tennis Weather Dataset](https:\/\/www.kaggle.com\/pranavpandey2511\/naive-bayes-classifier-from-scratch) from Kaggle.\n\n*navendu.mi20@iiitmk.ac.in*","407d2a04":"Next, we create a function that takes in the weather conditions and outputs whether to play or not.","0e50831b":"# Dataset","753230d8":"Use the dropdowns to set the weather conditions.","236137b4":"## Importing necessary libraries","be8d4ae0":"# Introduction","d103bc8f":"## Import the dataset","78cd0d27":"# Making predictions","6a753f1e":"We will now use the Naive Bayes algorithm to find the probability of playing tennis given the weather conditions.\n\nFor example, to calculate the probabilty that you should play tennis for the following conditions:\n\n* **outlook**- sunny\n* **temp**- mild\n* **humidity**- normal\n* **windy**- False\n\nWe will calculate,\n\nP(y=\"yes\"|X=[sunny, mild, normal, False]) = P(outlook=\"sunny\"|y=\"yes\") * P(temp=\"mild\"|y=\"yes\") * P(humidity=\"normal\"|y=\"yes\") * P(windy=\"False\"|y=\"yes\") * P(y=\"yes\")\n\nAnd prediction would be the maximum of P(y=\"yes\"|X) and P(y=\"no\"|X)\n\nThis is implemented in the code below.\n","8007e4e7":"The dataset used here is the [Tennis Weather Dataset](https:\/\/www.kaggle.com\/pranavpandey2511\/naive-bayes-classifier-from-scratch) from Kaggle.","f2f25561":"Now we can test if it is working by passing a weather condition and checking the predictions.","678bf4d5":"## Bayes Theorem\n\nThe underlying principle behind the Naive Bayes algorithm is the ***Bayes Theorem***.\n\nBayes Theorem states that-\n\n### P(A|B) = P(B|A) * P(A)\/ P(B)\n\nIf X is the input variables and y is the output variable, we can rewrite the above equation as-\n\n### P(y|X) = P(X|y) * P(y)\/ P(X)\n\nThe \"naive\" part of the algorithm is that we make the naive assumption that the classes are conditionally independent.\n\nThat is, the effect of a predictor(x1) on a given class(y) is independent of the values of other predictors(x2, x3 ...).\n\nWe can therefore rewrite P(X|y) as-\n\n### P(X|y) = P(x1|y) * P(x2|y) * ... * P(x(n)|y)\n\nWe can remove the denominator P(X) -as it remains constant while solving for y- and introduce a proportionality.\n\n### P(y|X) = (const) * P(X|y) * P(y)\n\nOR\n\n### P(y|X) = (const) * P(x1|y) * P(x2|y) * ... * P(x(n)|y) * P(y)\n\nThis is the basic idea of the Naive Bayes algorithm.","0d744fa1":"We will first create a frequency table so that we can get the values of P(X|y) which we can use to solve for P(y|X).","b41de3b8":"You can change the weather from the dropdowns and run the above cell to see different results.","bc095899":"There are 14 days in the dataset and based on the weather conditions, you have to decide whether or not to play tennis."}}