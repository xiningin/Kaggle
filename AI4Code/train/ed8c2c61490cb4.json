{"cell_type":{"5c20d850":"code","e150fc71":"code","10950cae":"code","f76da925":"code","7236b87a":"code","07280527":"code","12996dba":"code","c8d7f2eb":"code","e12d2dd4":"code","7863520b":"code","332786de":"code","7b56a2ce":"code","53b35794":"code","9f3ae201":"code","a61d71d8":"code","3027c6ab":"code","881e5fe3":"code","80e0346a":"code","9d16ac89":"code","051a565f":"code","c34f3218":"code","af5e5b94":"code","f15531a9":"markdown"},"source":{"5c20d850":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e150fc71":"!pip install pyspark","10950cae":"\nimport pyspark\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import SQLContext\nfrom pyspark.ml.evaluation import RegressionEvaluator\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\nfrom pyspark.ml.recommendation import ALS\nfrom pyspark.sql.functions import udf, col, when, round\nfrom pyspark.ml.tuning import CrossValidator, ParamGridBuilder\n\nfrom IPython.display import Image\nfrom IPython.display import display\n\nfrom pyspark.sql import functions as f\nfrom pyspark.sql.functions import udf\nimport html\nfrom pyspark.sql.types import IntegerType\n\nfrom IPython.core.display import display\nimport seaborn as sns\n\n\nfrom pyspark.ml.feature import (StopWordsRemover, Tokenizer, HashingTF, IDF)\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml import Pipeline\n\nspark = SparkSession.builder.getOrCreate()\n#schema = \"polarity FLOAT, id LONG, date_time STRING, query STRING, user STRING, test STRING\"\n","f76da925":"csv_train = spark.read.csv('..\/input\/it2034ch1502-nlp\/train.csv', inferSchema=True, header=True)\ncsv_train.printSchema()","7236b87a":"csv_train.show(5)","07280527":"@udf\ndef html_unescape(s: str):\n    return html.unescape(s)\n\nuser_regex = r'(@\\w{1,15})'\nhashtag_regex = '#(\\w{1,})'\nurl_regex = '((https?|ftp|file):\\\/{2,3})+([-\\w+&@#\/%=~|$?!:,.]*)|(www.)+([-\\w+&@#\/%=~|$?!:,.]*)'\nemail_regex = '[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{1,}'\n\ndf = (\n    csv_train\n    .withColumn('text', html_unescape(f.col('text')))\n    .withColumn('text', f.regexp_replace(f.col('text'), user_regex, ''))\n    .withColumn('text', f.regexp_replace(f.col('text'), hashtag_regex, ''))\n    .withColumn('text', f.regexp_replace(f.col('text'), email_regex, ''))\n    .withColumn('text', f.regexp_replace(f.col('text'), url_regex, ''))\n    .withColumn('text', f.regexp_replace(f.col('text'), ' +', ''))\n    .withColumn('text', f.trim(f.col('text')))\n    .filter('text != \"\"')\n)\n\ndata = df.select('text', 'polarity').coalesce(3).cache()\ndf.toPandas()\n","12996dba":"csv_test = spark.read.csv('..\/input\/it2034ch1502-nlp\/test.csv', inferSchema=True, header=True)\ncsv_test.printSchema()","c8d7f2eb":"csv_test.show(5)","e12d2dd4":"csv_samplesolution = spark.read.csv('..\/input\/it2034ch1502-nlp\/samplesolution.csv', inferSchema=True, header=True)\ncsv_samplesolution.printSchema()","7863520b":"csv_samplesolution.show(5)","332786de":"(training_data, validation_data, test_data) = data.randomSplit([0.98, 0.01, 0.01], seed=2020)","7b56a2ce":"tokenizer = Tokenizer(inputCol='text', outputCol='words1')\nstopwords_remover = StopWordsRemover(inputCol='words1', outputCol='words2', stopWords=StopWordsRemover.loadDefaultStopWords('english'))\nhashing_tf = HashingTF(inputCol='words2', outputCol='term_frequency')\nidf = IDF(inputCol='term_frequency', outputCol='features', minDocFreq=5)\nlr = LogisticRegression(labelCol='polarity')","53b35794":"df1 = tokenizer.transform(validation_data)\ndf1.show()","9f3ae201":"df2 = stopwords_remover.transform(df1)\ndf2.show()","a61d71d8":"df3 = hashing_tf.transform(df2)\ndf3.show()","3027c6ab":"df4 = idf.fit(df3).transform(df3)\ndf4.show()","881e5fe3":"lr.fit(df4).transform(df4).show()","80e0346a":"sematic_analysis_pipeline = Pipeline(stages=[tokenizer, stopwords_remover, hashing_tf, idf, lr])\nsematic_analysis_model  = sematic_analysis_pipeline.fit(training_data)\n\nspark = (SparkSession.builder.appName(\"ModelTraining\")).config(\"spark.executor.memory\",\"4g\").getOrCreate()","9d16ac89":"%%time\ntrained_df = sematic_analysis_model.transform(training_data)\nval_df = sematic_analysis_model.transform(validation_data)\ntest_df = sematic_analysis_model.transform(test_data)\n\ntrained_df.show()\nval_df.show()\ntest_df.show()","051a565f":"evaluator = MulticlassClassificationEvaluator(labelCol=\"polarity\", metricName=\"accuracy\")\naccuracy_val = evaluator.evaluate(val_df)\naccuracy_test = evaluator.evaluate(test_df)\nprint(\"Validation Data:\")\nprint(f\"Accuracy: {accuracy_val*100:.5f}%\")\nprint(\"Testing Data:\")\nprint(f\"Accuracy: {accuracy_test*100:.5f}%\")","c34f3218":"final_data = sematic_analysis_model.transform(csv_test).select('id', 'prediction').withColumnRenamed('prediction', 'polarity').withColumn(\"polarity\", f.col(\"polarity\").cast(IntegerType()))\n\nfinal_data.show(5, truncate = False)\n","af5e5b94":"final_data.toPandas().to_csv('Result_NLP.csv', header=True, index=False)","f15531a9":"Nh\u00f3m TestData.05.09.2021\n\nB\u00e0i t\u1eadp NLP\n\nL\u00ea Quang K\u1ef3 - MSSV : CH2002036"}}