{"cell_type":{"0a30265f":"code","deeaac31":"code","6b85f165":"code","3d73a158":"code","1b0b1f0e":"code","247ea23a":"code","bb69175b":"code","d58d659d":"code","c3773bbf":"code","2715224c":"code","105871de":"code","24d7c6eb":"code","31aa96da":"code","63bfffb0":"code","76bcba72":"code","c39f53a1":"code","c1a7f2a3":"code","f6d5aac1":"code","da2c40f3":"code","e862e4e1":"code","7b17aa56":"code","0ee4e412":"code","7866891f":"markdown","f28a0acf":"markdown","550e7c2a":"markdown","e3ba9241":"markdown","fc31bac0":"markdown","0d7ab70b":"markdown","44201465":"markdown","c00bb282":"markdown","a309e201":"markdown","ca7dfabc":"markdown","152aa8ac":"markdown","c30930ce":"markdown","09886f11":"markdown","0a3fc0e7":"markdown"},"source":{"0a30265f":"import numpy as np\nimport math\nimport time\nfrom tensorflow import keras\nfrom pathlib import Path\nfrom os import path\nfrom keras.preprocessing.image import load_img\nimport IPython.display as display","deeaac31":"# Try different sizes, e.g. 3 or 7.\nCONV_SIZE=5\nlearning_rate=0.003\nIMG_ROWS, IMG_COLS = CONV_SIZE, CONV_SIZE # input image dimensions\nINPUT_SHAPE = (IMG_ROWS, IMG_COLS, 1)\nmodel_name=\"SingleC2D\"\nmodel_plot_filename=\"C2D.png\"\nshow_shapes=True","6b85f165":"def transform_weights(wts):\n    main_list=[]\n    for wtss in wts:\n        sub_list=[]\n        for wtsss in wtss:\n            sub_list.append(wtsss[0][0])\n            \n        main_list.append(sub_list)\n    return np.asarray(main_list)","3d73a158":"def create_model():\n    sub_image = keras.layers.Input(shape=INPUT_SHAPE, name=\"image\")\n    c2d=keras.layers.Conv2D(1, (CONV_SIZE, CONV_SIZE), strides=math.ceil(CONV_SIZE\/2), use_bias=False, name=\"C2D\")(sub_image)\n    model = keras.models.Model(inputs=sub_image, outputs=c2d, name=model_name)   \n    return model","1b0b1f0e":"def animate(steps):\n  if steps > 0:\n      history = model.fit(inputs, outputs, epochs=1, verbose=False)\n      loss = history.history['loss'][-1]\n      out = model(inputs).numpy()[0][0][0][0]\n      #if steps % 5 == 0 :\n      #  print('[{:3d} {:5.2f} {:4.2f}]'.format(steps, loss, out), end=\" \")\n      wts = model.get_weights()\n      wtsz = transform_weights(wts[0])\n      plot[0].remove()      \n      surface = get_plot_item(ax,x,y,wtsz)\n      plot[0] = surface\n  else:\n      plot[0].remove()      \n      surface = get_plot_item(ax,x,y,initial_wtsz)\n      plot[0] = surface\n  return (surface,)\n","247ea23a":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\ndef display3dsubplots(z1, z2, title_text='Sub-image and Weights'):\n  x = np.outer(np.linspace(0, CONV_SIZE-1, CONV_SIZE), np.ones(CONV_SIZE))\n  y = x.copy().T\n\n  spfig = make_subplots(\n      rows=1, cols=2,\n      specs=[[{'type': 'surface'}, {'type': 'surface'}]])\n  spfig.add_trace(\n      go.Surface(x=x, y=y, z=z1,\n      showscale=False),\n      row=1, col=1)\n\n  spfig.add_trace(\n      go.Surface(x=x, y=y, z=z2,\n      showscale=False),\n      row=1, col=2)\n  spfig.update_layout(\n      title_text=title_text,\n      height=600,\n      width=900)\n  spf1 = go.FigureWidget(spfig)\n  spf1.show()\n","bb69175b":"import matplotlib.pyplot as plt\nfrom mpl_toolkits import mplot3d\n\ndef get_plot_item(ax,x,y,z):\n    #item = ax.plot_surface(x,y,z, cmap='viridis', edgecolor='none')\n    item = ax.plot_wireframe(x, y, z, color='green')\n    return item \n\ndef mat3dplot(angle1, angle2):\n  x = np.outer(np.linspace(0, CONV_SIZE-1, CONV_SIZE), np.ones(CONV_SIZE))\n  y = x.copy().T\n  fig = plt.figure(figsize=[12, 10])\n  ax = plt.axes(projection='3d')\n  ax.set_title('Weights')\n  ax.set_xlabel('x')\n  ax.set_ylabel('y')\n  ax.set_zlabel('z')\n  surface = get_plot_item(ax,x,y,initial_wtsz)\n  ax.view_init(angle1, angle2)\n  plot = [surface]\n  return fig, plot, ax, x, y\n","d58d659d":"model=create_model()\nmodel.summary()\nkeras.utils.plot_model(model, model_plot_filename, show_shapes=show_shapes) ","c3773bbf":"wts = model.get_weights()\nwtsz = transform_weights(wts[0])\ninitial_wtsz=wtsz\nprint(wtsz)","2715224c":"from keras.preprocessing.image import array_to_img\nimage_array1 = np.empty([3, 100, 50]) \nimage_array1.fill(80) \nimage_array2 = np.empty([3, 100, 50]) \nimage_array2.fill(200) \nimage_array = np.concatenate((image_array1, image_array2), axis=2)\nimg = array_to_img(image_array, data_format='channels_first', scale=False)\nimg=img.convert('L')\ndisplay.display(img)\n\n","105871de":"from keras.preprocessing.image import img_to_array\nleft = 50-math.ceil(CONV_SIZE\/2)\ntop = 50\nright = left+CONV_SIZE\nbottom = top+CONV_SIZE\nsub_image = img.crop((left, top, right, bottom)) \ndisplay.display(sub_image)\ndisplay.display(sub_image.resize((50,50)))","24d7c6eb":"imageArray =np.asarray(sub_image)\/255\nprint(imageArray)","31aa96da":"display3dsubplots( imageArray, initial_wtsz, title_text='Sub-image and Initial Weights')","63bfffb0":"import tensorflow as tf\nreference = CONV_SIZE*CONV_SIZE\/2\nbatch_size = 500\nX = tf.constant(np.array([imageArray]), dtype=tf.float32 )\nY = tf.constant(np.full((1,), reference), dtype=tf.float32 )\ndataset = tf.data.Dataset.from_tensor_slices(( X , Y )) \ndataset = dataset.shuffle( 1 ).repeat( 1 ).batch( batch_size )\niterator = dataset.__iter__()\ninputs , outputs = iterator.get_next()","76bcba72":"print(inputs, outputs)","c39f53a1":"model.compile(keras.optimizers.SGD(learning_rate), loss='mse', run_eagerly=True)","c1a7f2a3":"fig, plot, ax, x, y = mat3dplot(65, 45)","f6d5aac1":"import matplotlib\nfrom matplotlib import animation\nmatplotlib.rcParams['animation.embed_limit'] = 2**128\nprint(\"Target output is\", reference)\nprint('Initial output {:4.2f}'.format(model(inputs).numpy()[0][0][0][0]))\nanim = animation.FuncAnimation(fig, animate, interval=50, frames=100, blit=True)\n","da2c40f3":"from IPython.display import HTML\nHTML(anim.to_jshtml())","e862e4e1":"print('Final output {:4.2f}'.format(model(inputs).numpy()[0][0][0][0]))","7b17aa56":"print(\"Sub-image\")\nprint(imageArray)\nwts = model.get_weights()\nwtsz = transform_weights(wts[0])\nprint(\"Final weights\")\nprint(wtsz)\nprint(\"sum\", np.sum(wtsz))\nprint(\"Initial weights\")\nprint(initial_wtsz)\nprint(\"sum\", np.sum(initial_wtsz))","0ee4e412":"display3dsubplots( imageArray, wtsz, title_text='Sub image and final Weights')","7866891f":"# Initial Weights","f28a0acf":"<a href=\"https:\/\/colab.research.google.com\/github\/ruperty\/colab\/blob\/master\/simple_conv2d.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","550e7c2a":"# Functions","e3ba9241":"## Initial Weights - 3D Display ","fc31bac0":"# Model","0d7ab70b":"# Settings","44201465":"## Weights Animation","c00bb282":"# Imports","a309e201":"# Training","ca7dfabc":"# Simple Convolution Visualisation\n\nA visualisation of how the weights change for a single 5x5 convolution grid that stays in the same place in an image; i.e. it doesn't actually move (convolve). \n\nThe weights converge to roughly the shape of the input image. For an animation of the weights changing see section **Weights Animation**.","152aa8ac":"##  Sub Image\n\nSub image and resized sub image displayed.","c30930ce":"## Dataset","09886f11":"# Image Data","0a3fc0e7":"## Final Weights - 3D Display "}}