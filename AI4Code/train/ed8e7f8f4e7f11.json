{"cell_type":{"3cbeae5b":"code","55c7af25":"code","3c075e74":"code","3ff3fb66":"code","a1b61229":"code","c8386c13":"code","580ca748":"markdown","6a8e04ab":"markdown","acac1360":"markdown"},"source":{"3cbeae5b":"import time\nimport pickle\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nimport xgboost as xgb\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nrandom_seed = 789789","55c7af25":"df = pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')","3c075e74":"def func_xgbc(name, data, labels):\n    xgbc = xgb.XGBClassifier(n_estimators=100 , )\n    rskf = RepeatedStratifiedKFold(n_splits=7, n_repeats=3, random_state=random_seed)\n    \n    scoring = ('f1', 'recall')\n    scores = cross_validate(xgbc, data, labels, scoring=scoring, cv=rskf, verbose=2)\n\n    print('Mean f1: %.3f' % np.mean(scores['test_f1']))\n    print('Mean recall: %.3f' % np.mean(scores['test_recall']))\n    \n    X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.3, stratify=labels)\n\n    xgbc.fit(X_train, y_train)\n    y_hat = xgbc.predict(X_test)\n    fig = plot_confusion_matrix(xgbc, X_test, y_test, display_labels=['Legit', 'Fraud'], cmap='viridis')\n    \n    return\n\ndef pkl_load(name):\n    pkl_file = open(\"\/kaggle\/input\/ccfd-eda-playing-with-the-data\/\"+name, 'rb')\n    X = pickle.load(pkl_file)\n    pkl_file.close()\n    return X","3ff3fb66":"y = df.Class\nX = df.drop(columns=[\"Time\", \"Amount\", \"Class\"])\n\n\nstart_time = time.time()\nfunc_xgbc(\"legacy\", X, y)\nprint(\"--- %s minutes ---\" % ((time.time() - start_time)\/60))","a1b61229":"X_pca = pkl_load(\"pca.pkl\")\nname = \"pca\"\n\nstart_time = time.time()\nfunc_xgbc(\"smote\", X_pca, y.iloc[:X_pca.shape[0]])\nprint(\"--- %s minutes ---\" % ((time.time() - start_time)\/60))","c8386c13":"X_smote = pkl_load(\"tsne_smote.pkl\")\ndata_smote = pkl_load(\"smote_database.pkl\")\nname = \"smote\"\n\nstart_time = time.time()\nfunc_xgbc(\"smote\", X_smote, data_smote.Class)\nprint(\"--- %s minutes ---\" % ((time.time() - start_time)\/60))","580ca748":"## PCA","6a8e04ab":"## Legacy Dataset","acac1360":"## SMOTE + t-SNE"}}