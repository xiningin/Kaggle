{"cell_type":{"3525e29f":"code","428feca7":"code","3c5bf19d":"code","617f1f53":"code","3a7c356a":"code","984f1922":"code","29575953":"code","bec15fc5":"code","1a68c62c":"code","885abf06":"code","2ae151d5":"code","5f1dbc5d":"code","0fa31f45":"code","c5ffb479":"code","accf7bc4":"markdown","9caf234a":"markdown","81548ba9":"markdown","97c69b9c":"markdown","94791b2d":"markdown","2054c0ee":"markdown"},"source":{"3525e29f":"import tensorflow as tf\ntf.__version__","428feca7":"from tensorflow.keras.datasets import reuters\nfrom tensorflow.keras import models, layers, optimizers, utils\nimport numpy as np\nimport matplotlib.pyplot as plt","3c5bf19d":"(train_data, train_labels), (test_data, test_labels) = reuters.load_data(num_words=10000)","617f1f53":"print(\"Words: \", train_data[2])\nprint(\"Labels: \", train_labels[2])","3a7c356a":"# We can access words followed by the above indexes by calling get_word_index\n# which returns a dictionary of words and their indexes\nword_index = reuters.get_word_index()\nreversed_word_index = dict([(value, key) for (key, value) in word_index.items()])\n\" \".join([ reversed_word_index.get(i-3, \"?\") for i in train_data[2]])","984f1922":"def vectorize_sequences(sequences, dimension=10000):\n  results = np.zeros((len(sequences), dimension))\n  for i, sequence in enumerate(sequences):\n    results[i, sequence] = 1\n  return results","29575953":"x_train = vectorize_sequences(train_data)\nx_test = vectorize_sequences(test_data)\n\nx_train.shape","bec15fc5":"y_train = utils.to_categorical(train_labels) # One hot train labels\ny_test = utils.to_categorical(test_labels) # One hot test labels\n\ny_train.shape","1a68c62c":"model = models.Sequential()\nmodel.add(layers.Dense(64, activation='relu', input_shape=(10000, )))\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(46, activation='softmax'))","885abf06":"# Spliting data further for validation\nx_val = x_train[:1000]\npartial_x_train = x_train[1000:]\ny_val = y_train[:1000]\npartial_y_train = y_train[1000:]\n\nx_val.shape","2ae151d5":"model.compile(optimizer='rmsprop', loss=tf.keras.losses.categorical_crossentropy, metrics=['acc'])\nhistory = model.fit(partial_x_train, partial_y_train, epochs=20, batch_size=512, validation_data=(x_val, y_val))","5f1dbc5d":"print(model.summary)","0fa31f45":"history_dict = history.history\nloss_values = history_dict['loss']\nval_loss_values = history_dict['val_loss']\nepochs = range(1, len(loss_values) + 1)\n\nplt.plot(epochs, loss_values, 'bo', label='Training Loss')\nplt.plot(epochs, val_loss_values, 'b', label='Validation Loss')\nplt.title(\"Training and validation loss\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()\n\nplt.clf()\n\nacc_values = history_dict['acc']\nval_acc_values = history_dict['val_acc']\n\nplt.plot(epochs, acc_values, 'bo', label='Trainig Accuracy')\nplt.plot(epochs, val_acc_values, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show","c5ffb479":"model.evaluate(x_test, y_test)","accf7bc4":"## Model Evaluation","9caf234a":"## Loading libraries and datasets","81548ba9":"## Building Model","97c69b9c":"## A Look at Data we got","94791b2d":"## Preparing Dataset","2054c0ee":"\n# Reuters Multi-class Classification with Tensorflow"}}