{"cell_type":{"cb67ea0f":"code","606e7c72":"code","b6ed0baf":"code","7bc403a4":"code","79e25937":"code","af689d31":"code","04aaea62":"code","053cc50f":"code","e9afa362":"code","6d42ca54":"code","78954e44":"code","323a44d7":"code","63e99f49":"code","ea7ea8a2":"code","2556b01f":"code","98f63304":"code","f8deec77":"code","c9ad9110":"code","59b48b6d":"code","6a22ce15":"code","48469e56":"code","bb5e78ae":"code","e3dc147c":"code","8cdd8adb":"code","351e50c3":"code","1cf2a492":"code","126b5bb0":"code","96cf7aa0":"code","f25eeb78":"code","f527d5f2":"code","efd5d9fe":"code","7d6f3a66":"code","70dc9d05":"code","f7d844af":"code","9e7f24b2":"code","d70bf2ac":"code","581c70dd":"code","4b7adacf":"code","ff8aa90b":"code","2d5dec18":"code","9558311f":"code","c8eaeaca":"code","36519f56":"code","f5768399":"code","431b1b7b":"code","7f7a1985":"code","14f3ef2a":"code","3f6d3063":"code","764495bc":"code","693156b0":"code","bdb5fd28":"code","0697ae4a":"code","5bc0aaeb":"code","9f85f18e":"code","d842f6ef":"code","6c6b11d1":"code","23e52940":"code","5b62ca38":"code","f20b76f2":"code","0a47fb14":"code","bef1ef52":"code","b18fd5b2":"code","ec728aad":"code","5b7d890d":"code","5a2c979a":"code","8dcaa683":"code","a0f68713":"code","0627f35a":"code","491b2649":"code","9cd5a9be":"code","904cf415":"code","24001479":"markdown","9ebb52f8":"markdown","d2f4daf3":"markdown","dfc43c43":"markdown","8a729784":"markdown","0e000f0d":"markdown","6e561787":"markdown","62fecfd5":"markdown","4183c7ea":"markdown","ffcc2932":"markdown","d40e765c":"markdown","2ddb4fad":"markdown","309bc68e":"markdown","40185b2e":"markdown","e74e077b":"markdown"},"source":{"cb67ea0f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport datetime as dt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nmatplotlib.style.use('ggplot')\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","606e7c72":"!ls ..","b6ed0baf":"parse_date = lambda val : pd.datetime.strptime(val, '%Y-%m-%d %H:%M:%S')","7bc403a4":"train = pd.read_csv('..\/input\/wns2019\/train.csv', parse_dates=['impression_time'], date_parser=parse_date)\ntest = pd.read_csv('..\/input\/wns2019\/test.csv', parse_dates=['impression_time'], date_parser=parse_date)\nsample = pd.read_csv('..\/input\/wns2019\/sample_submission.csv')","79e25937":"print(train.shape)\nprint(test.shape)","af689d31":"train.head()","04aaea62":"test.head()","053cc50f":"train.info()","e9afa362":"train.dtypes","6d42ca54":"df = pd.concat([train,test])","78954e44":"print(train.shape)\nprint(test.shape)\nprint(df.shape)","323a44d7":"df.isna().sum()","63e99f49":"train.is_click.value_counts()\/len(train)","ea7ea8a2":"positive_click_count = train.is_click.sum()\nnegative_click_count = train.is_click.count() - train.is_click.sum()\npatches, texts = plt.pie([positive_click_count, negative_click_count], explode=(0.1,0))\nplt.legend(patches, ['Ad Clicked', 'No click'], loc='best')\nplt.show()","2556b01f":"df.impression_id.nunique()","98f63304":"df.app_code.nunique()","f8deec77":"clicks_per_app = train.groupby('app_code').is_click.sum()\ncount_per_app = train.groupby('app_code').is_click.count()\nctr_per_app = clicks_per_app\/count_per_app * 100","c9ad9110":"clicks_per_app.sort_values(ascending=False)[:50].plot(kind='bar', figsize=(12,6))\nplt.ylabel('No. of Clicks')\nplt.show()","59b48b6d":"ctr_per_app.sort_values(ascending=False)[:50].plot(kind='bar', figsize=(12,6))\nplt.ylabel('CTR')\nplt.show()","6a22ce15":"df[df.app_code==109]","48469e56":"train.is_4G.value_counts()\/len(train)","bb5e78ae":"train.groupby('is_4G').is_click.sum().plot(kind='bar', figsize=(4,6))\nplt.ylabel('CTR')\nplt.show()","e3dc147c":"print(train.os_version.value_counts()\/len(train))","8cdd8adb":"df.groupby('os_version').is_click.count().plot(kind='bar')\nplt.ylabel('No. of clicks')\nplt.show()","351e50c3":"df.groupby('os_version').is_click.sum().plot(kind='bar')\nplt.ylabel('CTR')\nplt.show()","1cf2a492":"train.user_id.nunique()","126b5bb0":"train[train.is_click==1].user_id.value_counts()[:50].plot(kind='bar', figsize=(12,4))\nplt.show()","96cf7aa0":"train[train.user_id==54611]","f25eeb78":"train.impression_time.describe()","f527d5f2":"df['impression_date'] = df.impression_time.apply(lambda x : x.date())\ndf['impression_hour'] = df.impression_time.apply(lambda x : x.hour)","efd5d9fe":"df.head()","7d6f3a66":"df.iloc[0].impression_date==dt.date(2018, 11, 15)","70dc9d05":"df['day_of_click'] = df.impression_time.apply(lambda x : x.weekday_name)\ncats = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\ndf.groupby('day_of_click').agg({'is_click':'sum'}).reindex(cats).plot()\nplt.title('Clicks trend by week day')\n(df.groupby('day_of_click').agg({'is_click':'sum'}).reindex(cats)\/df.groupby('day_of_click').agg({'is_click':'count'}).reindex(cats)).plot()\nticks = list(range(0, 7, 1)) # points on the x axis where you want the label to appear\nplt.title('CTR per week day')\nplt.show()","f7d844af":"df.groupby(['day_of_click', 'is_click']).size().unstack().plot(kind='bar', stacked=True, figsize=(12,5))\nplt.show()","9e7f24b2":"df.groupby(['impression_date']).is_click.sum().plot(figsize=(16,6))\nplt.show()","d70bf2ac":"df.groupby(['impression_date', 'is_click']).size().unstack().plot(kind='bar', stacked=True, figsize=(12,6))\nplt.show()","581c70dd":"df.groupby('impression_hour').is_click.sum().plot(figsize=(20,6))\nplt.xticks([i for i in range(24)])\nplt.xlabel('Hour of day')\nplt.ylabel('No. of clicks')\nplt.title('Impression time')\nplt.show()","4b7adacf":"df.groupby(['impression_hour', 'is_click']).size().unstack().plot(kind='bar', stacked=True, figsize=(12,5))\nplt.show()","ff8aa90b":"df.head()","2d5dec18":"view_log = pd.read_csv('..\/input\/wns2019\/view_log.csv', parse_dates=['server_time'], date_parser=parse_date)\nitem_data = pd.read_csv('..\/input\/wns2019\/item_data.csv')","9558311f":"view_log.head()","c8eaeaca":"item_data.head()","36519f56":"print(view_log.shape)\nprint(item_data.shape)","f5768399":"view_log.head()","431b1b7b":"print(view_log.shape)\nprint(item_data.shape)","7f7a1985":"log_data = view_log.merge(item_data, how='left', on='item_id')","14f3ef2a":"log_data.shape","3f6d3063":"session_count = view_log.groupby('user_id').session_id.nunique()\nitem_count = view_log.groupby('user_id').item_id.nunique()","764495bc":"view_log = view_log.merge(session_count, how='inner', on='user_id')\nview_log = view_log.merge(item_count, how='inner', on='user_id')","693156b0":"view_log.head()","bdb5fd28":"view_log.columns = ['server_time', 'device_type', 'session_id', 'user_id', 'item_id',\n       'session_count', 'item_count']","0697ae4a":"view_log.head()","5bc0aaeb":"merger_log = view_log.drop(['server_time', 'session_id', 'item_id'], axis=1)","9f85f18e":"merger_log.drop_duplicates(inplace=True)","d842f6ef":"merger_log","6c6b11d1":"df.head()","23e52940":"merger_log.shape","5b62ca38":"df_final = df.merge(merger_log, how='inner', on='user_id')","f20b76f2":"df.shape","0a47fb14":"df_final.shape","bef1ef52":"df_final.head(20)","b18fd5b2":"df_final.drop(['impression_time', 'impression_date', ], axis=1, inplace=True)","ec728aad":"df.isna().sum()","5b7d890d":"df_final.isna().sum()","5a2c979a":"df_final.head(20)","8dcaa683":"df_final.shape","a0f68713":"df_final.dtypes","0627f35a":"df_final[['app_code', 'impression_id', 'user_id', 'is_4G', 'is_click', 'impression_hour', 'day_of_click', 'device_type']] = df_final[['app_code', 'impression_id', 'user_id', 'is_4G', \n                                                                                                                     'is_click', 'impression_hour', \n                                                                                                                     'day_of_click', 'device_type']].astype('category')","491b2649":"df_final.dtypes","9cd5a9be":"y= df_final.is_click","904cf415":"x_train = ","24001479":"## Exploration : impression_time","9ebb52f8":"Eventhough Tuesdays are having most clicks but CTR is lowest for Tuesdays and highest during Saturdays and Sundays","d2f4daf3":"## Exploration : app_code","dfc43c43":"# Univariate","8a729784":"Most of the clicks were by non-4G devices","0e000f0d":"## Exploration : is_4G","6e561787":"## Log Analysis","62fecfd5":"## Exploration : os_version","4183c7ea":"## Exploration : impression_id","ffcc2932":"Impression ID is unique for each entry, hence nothing much to explore here","d40e765c":"## Exploration : user_id","2ddb4fad":"Most of the clicks were observed during midnight and between 19:00-22:00 hrs","309bc68e":"The drop in the curve around 2018-12-13 is due to the fact the from 2018-12-13 onwards is our test set and is unlabelled.","40185b2e":"Target variable is 'is_click' which is 1 if there is a click and 0 otherwise","e74e077b":"No empty values found"}}