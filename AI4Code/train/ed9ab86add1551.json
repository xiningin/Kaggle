{"cell_type":{"2e208ba6":"code","43fa50c0":"code","f25e5b17":"code","217f2126":"code","58d86978":"code","922ddb54":"code","033fa276":"code","5756f3da":"code","1a14c492":"code","8c72aab3":"code","d5891e4d":"code","a8c043ce":"code","6916dbf6":"code","da59058f":"code","3eff6b39":"code","557f1d91":"code","acdf1318":"code","38ad9f43":"code","604ba4bd":"code","c715c620":"code","03afb1bb":"code","294696cf":"code","6c2985a7":"code","92b54c1d":"code","f2c7ab2e":"code","34655147":"code","b7926620":"code","0ef10075":"code","1b9a6fe9":"code","8b4d9605":"code","e797396a":"code","05662d73":"code","ba8dc46a":"code","68d28417":"code","6a1340aa":"code","259f0dc9":"code","44c30747":"code","e837fc37":"code","b2a535fc":"code","4ec267c3":"code","392e8f12":"code","3208abeb":"code","fd26a65b":"code","2e4a88fe":"code","0a97475f":"markdown","41312a8c":"markdown","7b7dd884":"markdown","2a0d5f42":"markdown","718d137b":"markdown","110b8dfb":"markdown","7af78f93":"markdown","90418e58":"markdown","3f229761":"markdown","91e8a7d9":"markdown","e9778f96":"markdown","2c1ac6a7":"markdown","2ff7f2f2":"markdown","48970629":"markdown","09fb67bc":"markdown","c9f90a32":"markdown","0a2d401c":"markdown","2fe111c5":"markdown","6d5e9a9b":"markdown","6c663b78":"markdown","0c08531f":"markdown","f457a3ce":"markdown","a670ac80":"markdown"},"source":{"2e208ba6":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom pandas_profiling import ProfileReport\nimport matplotlib.pyplot as plt\nimport scipy\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, MinMaxScaler, RobustScaler\nfrom sklearn.compose import make_column_selector, make_column_transformer\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import cross_val_score\n# from pycaret.regression import setup, compare_models, create_model\nfrom sklearn.linear_model import Ridge, BayesianRidge, LogisticRegression, HuberRegressor, OrthogonalMatchingPursuit\nimport plotly.express as px","43fa50c0":"heart_df = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\n","f25e5b17":"def plot_histgram(feature):    \n    fig = px.histogram(heart_df, x=feature,\n                       color=\"target\", \n                       marginal=\"box\",\n                       barmode =\"overlay\",\n                       histnorm ='density'\n                      )  \n    fig.update_layout(\n        title_font_color=\"white\",\n        legend_title_font_color=\"yellow\",\n        title={\n            'text': feature+\" histogram\",\n            'x':0.5,\n            'xanchor': 'center',\n            'yanchor': 'top'},\n        paper_bgcolor=\"black\",\n        plot_bgcolor='black',\n        font_color=\"white\"\n    )\n    fig.show()","217f2126":"heart_df = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")\nheart_df.head().T.style.set_properties(**{'background-color': 'grey',\n                           'color': 'white',\n                           'border-color': 'white'})","58d86978":"import missingno as msno\nmsno.matrix(heart_df)","922ddb54":"plt.figure(figsize=(8,6))\nax = heart_df.dtypes.value_counts().plot(kind='bar',grid = False,fontsize=20,color='grey')\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+ p.get_width() \/ 2., height + 0.1, height, ha = 'center', size = 25)\nsns.despine()","033fa276":"heart_df['target'].value_counts() \n# 1 is heart diseases, 0 no heart diseases","5756f3da":"labels = ['Heart Disease', 'Normal']\n\ndata = heart_df['target'].value_counts()\/heart_df['target'].shape[0]\n\nheart_df['target'].value_counts()\n#define Seaborn color palette to use\ncolors = sns.color_palette('Blues_r')[0:5]\n\n#create pie chart\nplt.pie(data, labels = labels, colors = colors, autopct='%.1f%%')\nplt.show()","1a14c492":"categorical = ['sex', 'cp', 'trestbps','restecg', 'exang', 'fbs', 'slope', 'ca', 'thal']","8c72aab3":"total_cnt = heart_df['target'].count()\nplt.figure(figsize=(12,6))\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(data=heart_df, x='sex',hue='target',palette='Blues_r')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n#     ax.text(x + width\/1 , height+10, f'{height} \/ {height \/ total_cnt * 100:2.1f}%'  ,va='center', ha='center', size=20)\n    ax.text(x + width \/ 2, height + 10, f'{height} \/ {height \/ total_cnt * 100:2.1f}%', va='center', ha='center', size=20)\nplt.legend(labels=labels)\nsns.despine()\n# (1 = male; 0 = female)\n\n","d5891e4d":"total_cnt = heart_df['target'].count()\nplt.figure(figsize=(12,6))\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(data=heart_df, x='cp',hue='target',palette='Blues_r')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n#     ax.text(x + width \/ 2, height, f'{height} \/ {height \/ total_cnt * 100:2.1f}%'  ,va='center', ha='center', size=20)\n    ax.text(x + width\/2 , height + 10, f'{height} \/ {height \/ total_cnt:.2f}%', va='center', ha='center', size=20)\nplt.legend(labels=labels)\nsns.despine()","a8c043ce":"total_cnt = heart_df['target'].count()\nplt.figure(figsize=(12,6))\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(data=heart_df, x='restecg',hue='target',palette='Blues_r')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width\/2 , height + 10, f'{height} \/ {height \/ total_cnt:.2f}%', va='center', ha='center', size=20)\nplt.legend(labels=labels)\nsns.despine()","6916dbf6":"total_cnt = heart_df['target'].count()\nplt.figure(figsize=(12,6))\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(data=heart_df, x='exang',hue='target',palette='Blues_r')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width\/2 , height + 10, f'{height} \/ {height \/ total_cnt:.2f}%', va='center', ha='center', size=20)\nplt.legend(labels=labels)\nsns.despine()","da59058f":"total_cnt = heart_df['target'].count()\nplt.figure(figsize=(12,6))\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(data=heart_df, x='slope',hue='target',palette='Blues_r')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width\/2 , height + 10, f'{height} \/ {height \/ total_cnt:.2f}%', va='center', ha='center', size=20)\nplt.legend(labels=labels)\nsns.despine()","3eff6b39":"total_cnt = heart_df['target'].count()\nplt.figure(figsize=(12,6))\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(data=heart_df, x='fbs',hue='target',palette='Blues_r')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width\/2 , height + 10, f'{height} \/ {height \/ total_cnt:.2f}%', va='center', ha='center', size=20)\nplt.legend(labels=labels)\nsns.despine()","557f1d91":"def display_stat(feature):\n    mean = heart_df[feature].mean()\n    std = heart_df[feature].std()\n    skew = heart_df[feature].skew()\n    kurtosis = heart_df[feature].kurtosis()\n    print('mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}, kurtosis: {3:.4f} '.format(mean, std, skew, kurtosis))","acdf1318":"plot_histgram('age')\ndisplay_stat('age')","38ad9f43":"plt.figure(figsize=(20,10))\nplt.subplot(1,2,1)\nplt.title('without log transform')\nsns.distplot(heart_df['age'], kde=True, fit=scipy.stats.norm)\n\n# plt.subplot(1,2,2)\n# plt.title('with log transform')\n# sns.distplot(np.log(target), kde=True, fit=scipy.stats.norm)\n# plt.xlabel('Log sale price')","604ba4bd":"heart_df.query('age == 35')","c715c620":"plot_histgram('trestbps')\ndisplay_stat('trestbps')","03afb1bb":"plt.figure(figsize=(20,10))\nplt.subplot(1,2,1)\nplt.title('without log transform')\nsns.distplot(heart_df['trestbps'], kde=True, fit=scipy.stats.norm)","294696cf":"plot_histgram('chol')\ndisplay_stat('chol')","6c2985a7":"plt.figure(figsize=(20,10))\nplt.subplot(1,2,1)\nplt.title('without log transform')\nsns.distplot(heart_df['chol'], kde=True, fit=scipy.stats.norm)","92b54c1d":"plot_histgram('thalach')\ndisplay_stat('thalach')","f2c7ab2e":"plt.figure(figsize=(20,10))\nplt.subplot(1,2,1)\nplt.title('without log transform')\nsns.distplot(heart_df['chol'], kde=True, fit=scipy.stats.norm)","34655147":"corr=heart_df.corr().round(2)\nsns.set(font_scale=2)\nplt.figure(figsize=(15, 15))\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nabs(corr['target']).sort_values()[:-1].plot.barh()\nplt.gca().set_facecolor('#FFFFFF')\nsns.despine()","b7926620":"pd.get_dummies(heart_df['thal']).head()","0ef10075":"heart_df.head()","1b9a6fe9":"nomial_features = dict(zip(['cp','slope','thal'],['CP','SL','TH']))","8b4d9605":"def onehot_encode(df, col_dict, scaler):\n    df = df.copy()\n    for col, pre in col_dict.items():\n        dummies = pd.get_dummies(df[col],prefix=pre)\n        df = pd.concat([df, dummies], axis=1)\n        df = df.drop(col,axis=1)\n        df = pd.DataFrame(scaler.fit_transform(df),columns=df.columns)\n    return df","e797396a":"preprocessing = lambda df,nf,scaler: onehot_encode(df,nf,scaler)","05662d73":"y=heart_df.copy()['target']\nX=heart_df.copy().drop('target', axis=1)","ba8dc46a":"X = preprocessing(X,nomial_features,RobustScaler())","68d28417":"y.head()","6a1340aa":"X.info()","259f0dc9":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=0)","44c30747":"# from sklearn.tree import DecisionTreeClassifier\nbaseline_model1 = LogisticRegression()\nbaseline_model1.fit(X_train, y_train)\nprint(f'{baseline_model1.score(X_test, y_test):.2f}%')","e837fc37":"from sklearn.svm import SVC\nsvm_model = SVC()\nsvm_model.fit(X_train, y_train)\nprint(f'{svm_model.score(X_test, y_test):.2f}%')","b2a535fc":"from sklearn.neural_network import MLPClassifier\nnn_model = MLPClassifier()\nnn_model.fit(X_train, y_train)\nprint(f'{nn_model.score(X_test, y_test):.2f}%')","4ec267c3":"br_model = BayesianRidge()\nbr_model.fit(X_train, y_train)\nprint(f'{br_model.score(X_test, y_test):.2f}%')","392e8f12":"rd_model = Ridge()\nrd_model.fit(X_train, y_train)\nprint(f'{rd_model.score(X_test, y_test):.2f}%')","3208abeb":"from sklearn.neighbors import KNeighborsRegressor\nknn_model = KNeighborsRegressor()\nknn_model.fit(X_train, y_train)\nprint(f'{knn_model.score(X_test, y_test):.2f}%')","fd26a65b":"from sklearn.linear_model import LinearRegression\nlr_model = LinearRegression()\nlr_model.fit(X_train, y_train)\nprint(f'{lr_model.score(X_test, y_test):.2f}%')","2e4a88fe":"from sklearn.linear_model import Lars\nlars_model = Lars()\nlars_model.fit(X_train, y_train)\nprint(f'{lars_model.score(X_test, y_test):.2f}%')","0a97475f":"observations: The median age of people having heart disease is at age 57 and the data is pretty evenly distributed ","41312a8c":"# Training ","7b7dd884":"# OneHot encode Nominal Features","2a0d5f42":"# EDA","718d137b":"* outlier rows","110b8dfb":"# EDA on Numerical features ","7af78f93":"# checking for feature importance, which feature in more relatively causing the target","90418e58":"Observations: Restecg of type 0 is releated with more heart disease","3f229761":"**How onehot encoding looks like **","91e8a7d9":"observations: restingbps is evenly distributed keeping the data as it is. ","e9778f96":"# Checking Missing values","2c1ac6a7":"Observations:\n* Target is distributed alomst equaly. ","2ff7f2f2":"obervations: higher is greater than 120mg can cause heart disease  ","48970629":"Observations:\nas per the data male are diagnosed more with heart problems ","09fb67bc":"# Exploring Categorical Features","c9f90a32":"Observations:\n*     There are no missing values","0a2d401c":"Observations: patients who have exang are more likely to have heart disease","2fe111c5":"obervations: slope with type 1 are likey to have heart disease and with type 2 are less likely to have heart disease","6d5e9a9b":"Observations: Chest pain type 0 leads to highest heart disease","6c663b78":"# Checking the datatypes","0c08531f":"* age\n* sex\n* chest pain type (4 values)\n* resting blood pressure\n* serum cholestoral in mg\/dl\n* fasting blood sugar > 120 mg\/dl\n* resting electrocardiographic results (values 0,1,2)\n* maximum heart rate achieved\n* exercise induced angina\n* oldpeak = ST depression induced by exercise relative to rest\n* the slope of the peak exercise ST segment\n* number of major vessels (0-3) colored by flourosopy\n* thal: 3 = normal; 6 = fixed defect; 7 = reversable defect","f457a3ce":"Observations: SVC model does better than any other Models.","a670ac80":"observations:\nall the columns hold numerical data, both categorical and numerical. "}}