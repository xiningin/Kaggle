{"cell_type":{"7ee4a106":"code","5c58552e":"code","f1c523b6":"code","a730ee41":"code","bd8f74d0":"code","8a72b1ff":"code","8100b6a5":"code","ca3059d0":"code","3abc579e":"code","f9d4574f":"code","1c3c7fdf":"code","2b0ecd82":"code","8232a260":"code","924c201e":"code","240b017f":"code","cea5fddf":"code","69020fd9":"code","e7b2b35d":"code","b9581948":"code","e019308b":"code","e6da6b6b":"code","dcf67e6b":"code","5bf89243":"code","4ea9c09d":"code","851d880a":"code","aa1c46f8":"code","32d1b307":"code","caf1193a":"code","507bf949":"code","8fa06ad4":"code","537f2400":"markdown","69bf78df":"markdown","efb7b24d":"markdown","3f440a9d":"markdown","bdaf1329":"markdown","3e379b6f":"markdown","79bea9b3":"markdown","8784b69b":"markdown","7918b8f0":"markdown","38206e97":"markdown","41043cb9":"markdown"},"source":{"7ee4a106":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as ex","5c58552e":"data = pd.read_csv('..\/input\/credit-card-customers\/BankChurners.csv')\n","f1c523b6":"data.describe()","a730ee41":"data.dtypes","bd8f74d0":"print('shape: {} '.format(data.shape))\ndata.head(10)","8a72b1ff":"data.info()","8100b6a5":"data.drop(['CLIENTNUM',\n           'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2',\n           'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1'], axis=1, inplace=True)\nprint('shape: {} '.format(data.shape))","ca3059d0":"data.isnull().sum().sort_values() #Check for null","3abc579e":"print(data.Attrition_Flag.value_counts())\ncolors=('#00743f','#FB7B8E')\ndata.Attrition_Flag.value_counts().plot(kind='pie',shadow=True,colors=colors,autopct='%.2f',figsize=(8,6))\nplt.title('Attrition_Flag')\nplt.show()","f9d4574f":"sns.countplot(x='Attrition_Flag', data=data, hue='Gender')\nplt.title(\"Distribution of Gender Among Attrited and Existing Customers\")\nplt.show()","1c3c7fdf":"sns.countplot(x='Attrition_Flag', data=data, hue='Card_Category')\nplt.title(\"Distribution of Card_Category Among Attrited and Existing Customers\")\nplt.show()","2b0ecd82":"sns.countplot(x='Attrition_Flag', data=data, hue='Marital_Status')\nplt.title(\"Distribution of Marital Status Among Attrited and Existing Customers\")\nplt.show()","8232a260":"sns.countplot(x='Attrition_Flag', data=data, hue='Income_Category')\nplt.title(\"Distribution of Income Category Among Attrited and Existing Customers\")\nplt.show()","924c201e":"sns.countplot(x='Attrition_Flag', data=data, hue='Card_Category')\nplt.title(\"Distribution of Card_Category Among Attrited and Existing Customers\")\nplt.show()","240b017f":"fig = ex.pie(data, values='Credit_Limit',\n            names='Education_Level', title='Education Level and Credit Limit ')\nfig.show()","cea5fddf":"sns.countplot(x='Attrition_Flag', data=data, hue='Education_Level')\nplt.title(\"Distribution of Card_Category Among Attrited and Existing Customers\")\nplt.show()","69020fd9":"col = [ 'Customer_Age','Income_Category','Credit_Limit',\n       'Total_Amt_Chng_Q4_Q1', 'Total_Trans_Amt','Avg_Utilization_Ratio']\nsns.set(style=\"ticks\", color_codes=True)\ng = sns.pairplot(data, vars=col)","e7b2b35d":"df_object = data.select_dtypes(include=\"O\")\ndf_number = data.select_dtypes(exclude=\"O\")","b9581948":"from sklearn.preprocessing import LabelEncoder\nlabel = LabelEncoder()\ndf_object = df_object.astype(str).apply(label.fit_transform)\n\ndata = pd.concat([df_object, df_number], axis = 1)","e019308b":"X = data.drop(['Attrition_Flag'], axis=1, inplace=False)\ny = data['Attrition_Flag']","e6da6b6b":"plt.figure(figsize=(15,10))\nsns.heatmap(X.corr(), linecolor='white', linewidth=1, annot=True)","dcf67e6b":"from sklearn.feature_selection import SelectPercentile\nfrom sklearn.feature_selection import chi2 , f_classif \n\nprint('Original X Shape is ' , X.shape)\nFeatureSelection = SelectPercentile(score_func = chi2, percentile=50) # score_func can = f_classif\nX = FeatureSelection.fit_transform(X, y)\n\n#showing X Dimension \nprint('X Shape is ' , X.shape)\nprint('Selected Features are : ' , FeatureSelection.get_support())\n\n","5bf89243":"#Standard Scaler for Data\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler(copy=True, with_mean=True, with_std=True)\nX = scaler.fit_transform(X)\n\n#showing data\nprint('X \\n' , X[:5])","4ea9c09d":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=44, shuffle =True)\n\n#Splitted Data\nprint('X_train shape is ' , X_train.shape)\nprint('X_test shape is ' , X_test.shape)\nprint('y_train shape is ' , y_train.shape)\nprint('y_test shape is ' , y_test.shape)","851d880a":"from sklearn.linear_model import LogisticRegression\n\nLogisticRegressionModel = LogisticRegression(penalty='l2',solver='sag',C=1.0,random_state=33)\nLogisticRegressionModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('LogisticRegressionModel Train Score is : ' , LogisticRegressionModel.score(X_train, y_train))\nprint('LogisticRegressionModel Test Score is : ' , LogisticRegressionModel.score(X_test, y_test))\nprint('LogisticRegressionModel Classes are : ' , LogisticRegressionModel.classes_)\nprint('LogisticRegressionModel No. of iteratios is : ' , LogisticRegressionModel.n_iter_)\nprint('----------------------------------------------------')\n\n#Calculating Prediction\ny_pred = LogisticRegressionModel.predict(X_test)\ny_pred_prob = LogisticRegressionModel.predict_proba(X_test)\nprint('Predicted Value for LogisticRegressionModel is : ' , y_pred[:10])\nprint('Prediction Probabilities Value for LogisticRegressionModel is : ' , y_pred_prob[:10])","aa1c46f8":"from sklearn.linear_model import SGDClassifier\n\nSGDClassifierModel = SGDClassifier(penalty='l2',loss='squared_loss',learning_rate='optimal',random_state=33)\nSGDClassifierModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('SGDClassifierModel Train Score is : ' , SGDClassifierModel.score(X_train, y_train))\nprint('SGDClassifierModel Test Score is : ' , SGDClassifierModel.score(X_test, y_test))\nprint('SGDClassifierModel loss function is : ' , SGDClassifierModel.loss_function_)\nprint('SGDClassifierModel No. of iteratios is : ' , SGDClassifierModel.n_iter_)\n#print('----------------------------------------------------')\n\n#Calculating Prediction\ny_pred = SGDClassifierModel.predict(X_test)\nprint('Predicted Value for SGDClassifierModel is : ' , y_pred[:10])","32d1b307":"from sklearn.svm import SVC\n\nSVCModel = SVC(kernel= 'rbf',# it can be also linear,poly,sigmoid,precomputed\n               max_iter=10000,C=1.0,gamma='auto')\nSVCModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('SVCModel Train Score is : ' , SVCModel.score(X_train, y_train))\nprint('SVCModel Test Score is : ' , SVCModel.score(X_test, y_test))\n#print('----------------------------------------------------')\n\n#Calculating Prediction\ny_pred = SVCModel.predict(X_test)\nprint('Predicted Value for SVCModel is : ' , y_pred[:10])","caf1193a":"from sklearn.tree import DecisionTreeClassifier\n\nDecisionTreeClassifierModel = DecisionTreeClassifier(criterion='gini',max_depth=3,random_state=33) #criterion can be entropy\nDecisionTreeClassifierModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('DecisionTreeClassifierModel Train Score is : ' , DecisionTreeClassifierModel.score(X_train, y_train))\nprint('DecisionTreeClassifierModel Test Score is : ' , DecisionTreeClassifierModel.score(X_test, y_test))\nprint('DecisionTreeClassifierModel Classes are : ' , DecisionTreeClassifierModel.classes_)\nprint('DecisionTreeClassifierModel feature importances are : ' , DecisionTreeClassifierModel.feature_importances_)\nprint('----------------------------------------------------')\n\n#Calculating Prediction\ny_pred = DecisionTreeClassifierModel.predict(X_test)\ny_pred_prob = DecisionTreeClassifierModel.predict_proba(X_test)\nprint('Predicted Value for DecisionTreeClassifierModel is : ' , y_pred[:10])\nprint('Prediction Probabilities Value for DecisionTreeClassifierModel is : ' , y_pred_prob[:10])","507bf949":"from sklearn.naive_bayes import GaussianNB\n\nGaussianNBModel = GaussianNB()\nGaussianNBModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('GaussianNBModel Train Score is : ' , GaussianNBModel.score(X_train, y_train))\nprint('GaussianNBModel Test Score is : ' , GaussianNBModel.score(X_test, y_test))\nprint('----------------------------------------------------')\n\n#Calculating Prediction\ny_pred = GaussianNBModel.predict(X_test)\ny_pred_prob = GaussianNBModel.predict_proba(X_test)\nprint('Predicted Value for GaussianNBModel is : ' , y_pred[:10])\nprint('Prediction Probabilities Value for GaussianNBModel is : ' , y_pred_prob[:10])","8fa06ad4":"from sklearn.ensemble import RandomForestClassifier\n\nRandomForestClassifierModel = RandomForestClassifier(criterion = 'gini',n_estimators=100,max_depth=2,random_state=33) #criterion can be also : entropy \nRandomForestClassifierModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('RandomForestClassifierModel Train Score is : ' , RandomForestClassifierModel.score(X_train, y_train))\nprint('RandomForestClassifierModel Test Score is : ' , RandomForestClassifierModel.score(X_test, y_test))\nprint('RandomForestClassifierModel features importances are : ' , RandomForestClassifierModel.feature_importances_)\nprint('----------------------------------------------------')\n\n#Calculating Prediction\ny_pred = RandomForestClassifierModel.predict(X_test)\ny_pred_prob = RandomForestClassifierModel.predict_proba(X_test)\nprint('Predicted Value for RandomForestClassifierModel is : ' , y_pred[:10])\nprint('Prediction Probabilities Value for RandomForestClassifierModel is : ' , y_pred_prob[:10])","537f2400":"**SVC Model**","69bf78df":"**GaussianNB Model**","efb7b24d":"# **1-Import important libraries**","3f440a9d":"**SGDClassifier Model**","bdaf1329":"#**2-Data exploration**","3e379b6f":"# **5-Model**","79bea9b3":"**LogisticRegression Model**","8784b69b":"# **4-Data Preprocessing**","7918b8f0":"**DecisionTreeClassifier Model**","38206e97":"# **3-Data visulation** ","41043cb9":"**RandomForestClassifier Model**"}}