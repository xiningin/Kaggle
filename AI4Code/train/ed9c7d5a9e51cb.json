{"cell_type":{"cf74473d":"code","77d15470":"code","2ff03e86":"code","4cc85121":"code","309f60cf":"code","88edab60":"code","e1e3d8df":"code","6abcb062":"code","d0454cbe":"code","25f80902":"code","206e058f":"code","4d5cc074":"code","d1216501":"markdown","94e9b97a":"markdown","9e38511f":"markdown","f0da2401":"markdown"},"source":{"cf74473d":"from google.cloud import bigquery","77d15470":"client = bigquery.Client()","2ff03e86":"dataset_ref = client.dataset('hacker_news', project = 'bigquery-public-data')\ndataset = client.get_dataset(dataset_ref)","4cc85121":"tables = list(client.list_tables(dataset))\nfor i in tables:\n    print(i.table_id)","309f60cf":"# we will need twi tables\n### Comments and stories\ntable_ref = dataset_ref.table('comments')\ntable = client.get_table(table_ref)","88edab60":"# view the top rows of table\nclient.list_rows(table, max_results=5).to_dataframe()\n# this is comments table","e1e3d8df":"# same like this show the stories table\ntable_ref = dataset_ref.table('stories')\ntable = client.get_table(table_ref)\nclient.list_rows(table, max_results = 5).to_dataframe()\n# this is stories table","6abcb062":"### Approach\n##### If someone has commented then its is 100% sure that he has commented on someones story\n#### but it is also possible that a story does not have any comment\n#### Therfore we will have 'stories' as our left table and 'comments' as our right table","d0454cbe":"# to make your query run faster try to use your right table in left join in CTE\n# and vice versa\n\nquery = \"\"\"\n             WITH c AS\n             (\n             SELECT parent, COUNT(*) as num_comments\n             FROM `bigquery-public-data.hacker_news.comments` \n             GROUP BY parent\n             )\n             \n             SELECT s.id as story_id, s.by, s.title, c.num_comments\n             FROM `bigquery-public-data.hacker_news.stories` AS s\n             LEFT JOIN c\n             ON s.id = c.parent\n             WHERE EXTRACT(DATE FROM s.time_ts) = '2012-01-01'\n             ORDER BY c.num_comments DESC\n    \n        \"\"\"\n\njoin_result = client.query(query).result().to_dataframe()\njoin_result.head()","25f80902":"join_result.tail()","206e058f":"union_query = \"\"\"\n              SELECT c.by\n              FROM `bigquery-public-data.hacker_news.comments` AS c\n              WHERE EXTRACT(DATE FROM c.time_ts) = '2014-01-01'\n              UNION DISTINCT\n              SELECT s.by\n              FROM `bigquery-public-data.hacker_news.stories` AS s\n              WHERE EXTRACT(DATE FROM s.time_ts) = '2014-01-01'\n              \"\"\"\n\n# Run the query, and return a pandas DataFrame\nunion_result = client.query(union_query).result().to_dataframe()\nunion_result.head()","4d5cc074":"# To get the number of users who posted on January 1, 2014, we need only take the length of the DataFrame.\n\nlen(union_result)","d1216501":"# Question","94e9b97a":"## [2]. Write a query to select all usernames corresponding to users who wrote stories or comments on January 1, 2014. We use UNION DISTINCT (instead of UNION ALL) to ensure that each user appears in the table at most once.","9e38511f":"### Since the results are ordered by the num_comments column, stories without comments appear at the end of the DataFrame. (Remember that NaN stands for \"not a number\".)","f0da2401":"## [1]. Pull information from the stories and comments tables to create a table showing all stories posted on January 1, 2012, along with the corresponding number of comments. We use a LEFT JOIN so that the results include stories that didn't receive any comments."}}