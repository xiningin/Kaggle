{"cell_type":{"c139e6ea":"code","ec483745":"code","a6659549":"code","5a4ed175":"code","4c90a909":"code","8b8c324a":"code","f5f1a4db":"code","45b82348":"code","e1dacc62":"code","071c5c70":"code","e2079428":"code","f4909063":"code","f8ebd8e0":"code","0a95a276":"markdown","b95cd0ca":"markdown","ca6be273":"markdown","9eea161b":"markdown","5557200b":"markdown"},"source":{"c139e6ea":"import numpy as np\nimport pandas as pd\n\nfrom pandas import Series, DataFrame","ec483745":"DF_obj = pd.DataFrame(np.arange(36).reshape(6,6))\nDF_obj","a6659549":"DF_obj_2 = pd.DataFrame(np.arange(15).reshape(5,3))\nDF_obj_2","5a4ed175":"# pd.concat([left_object, right_object], axis=1)\n# The concat() method joins data from seperate sources into one combined data table. If you want to \n# join objects based on their row index values, just call the pd.concat() method on the objects you \n# want joined, and then pass in the axis=1 argument. The axis=1 argument tells Python to concatenate \n# the DataFrames by adding columns (in other words, joining on the row index values).\npd.concat([DF_obj, DF_obj_2], axis =1)","4c90a909":"pd.concat([DF_obj, DF_obj_2])","8b8c324a":"# object_name.drop([row indexes])\n# You can easily drop rows from a DataFrame by calling the .drop() method and passing in the index \n# values for the rows you want dropped.\nDF_obj.drop([0,2])","f5f1a4db":"DF_obj.drop([0,2], axis=1)","45b82348":"series_obj = Series(np.arange(6))\nseries_obj.name = \"added_variable\"\nseries_obj","e1dacc62":"# DataFrame.join(left_object, right_object)\n# You can use .join() method two join two data sources into one. The .join() method works by joining \n# the two sources on their row index values.\nvariable_added = DataFrame.join(DF_obj, series_obj)\nvariable_added","071c5c70":"added_datatable = variable_added.append(variable_added, ignore_index=False)\nadded_datatable","e2079428":"added_datatable = variable_added.append(variable_added, ignore_index=True)\nadded_datatable","f4909063":"# object_name.sort_values(by=[index value], ascending=[False])\n# To sort rows in a DataFrame, either in ascending or descending order, call the .sort_values() \n# method off of the DataFrame, and pass in the by argument to specify the column index upon which \n# the DataFrame should be sorted.\nDF_sorted = DF_obj.sort_values(by=[5], ascending=[False])\nDF_sorted","f8ebd8e0":"DF_sorted = DF_obj.sort_values(by=[5], ascending=[True])\nDF_sorted","0a95a276":"### Concatenating data","b95cd0ca":"# Chapter 1- Data Munging Basics\n## Segment 4 - Concatenating and transforming data","ca6be273":"### Sorting data","9eea161b":"### Adding data","5557200b":"### Transforming data\n#### Dropping data"}}