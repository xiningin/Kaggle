{"cell_type":{"683a2149":"code","58a9b23f":"code","ee433b3d":"code","a22c299a":"code","0e5b7eec":"code","544276a4":"code","2b2e6626":"code","3019cd7c":"code","2734dd3d":"code","7292a045":"code","27863001":"code","dfe795c1":"code","10daaf2b":"code","6be6e6da":"code","ae982e09":"code","e84058cf":"code","6acdca92":"code","846872ef":"code","13f3070f":"code","c8f338ff":"code","446ba230":"code","6b3e8d76":"code","20e5f61e":"code","d660e59c":"code","52ab1e56":"code","0cb36844":"code","c9a7c81e":"code","4b483f62":"code","c33820de":"code","cadf9c62":"code","313e235b":"code","c2ecde6b":"code","936bf1d1":"code","388e6c16":"code","0182f876":"code","7e4783df":"code","3a336503":"code","c1504467":"code","2df6d666":"code","4d56e41d":"code","60fc83b3":"code","95cf4235":"code","98ca5189":"code","5f166dd0":"code","a5c87f1a":"code","642029b9":"code","e9bb0b33":"code","dda4d698":"code","61822663":"markdown","dc70be3d":"markdown","69a6c4eb":"markdown","fff9529b":"markdown","967a13ff":"markdown","b68907ca":"markdown","b066497e":"markdown","30ad51a5":"markdown","5dce2490":"markdown","4713d903":"markdown","27c5f5e0":"markdown","efc749c8":"markdown","c2f61875":"markdown","af8f17d5":"markdown","2539e521":"markdown","25d36d0c":"markdown","36076cbb":"markdown"},"source":{"683a2149":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score,confusion_matrix,precision_score,recall_score,f1_score,roc_auc_score,roc_curve,make_scorer\nfrom sklearn.model_selection import train_test_split,cross_val_score,RandomizedSearchCV\n%matplotlib inline","58a9b23f":"data = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","ee433b3d":"# Returning first few observations\n\ndata.head()","a22c299a":"data.shape","0e5b7eec":"data.columns.tolist()","544276a4":"data.dtypes","2b2e6626":"data.isnull().sum()","3019cd7c":"data.info()","2734dd3d":"data.describe()","7292a045":"data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)","27863001":"data.isnull().sum()","dfe795c1":"data['Glucose'].fillna(data['Glucose'].median(), inplace = True)\ndata['BloodPressure'].fillna(data['BloodPressure'].median(), inplace = True)\ndata['SkinThickness'].fillna(data['SkinThickness'].median(), inplace = True)\ndata['Insulin'].fillna(data['Insulin'].median(), inplace = True)\ndata['BMI'].fillna(data['BMI'].mean(), inplace = True)","10daaf2b":"data.isnull().sum()","6be6e6da":"corrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize = (15,20))\n\n# Plotting heat map\n\ng = sns.heatmap(data[top_corr_features].corr(),annot = True,cmap = \"RdYlGn\")","ae982e09":"# Finding pairwise correlation of all columns\n\ndata.corr()","e84058cf":"# Getting unique values \n\ndata['Pregnancies'].unique()","6acdca92":"# Finding counts of unique values and sorting it in ascending order\n\ndata['Pregnancies'].value_counts().sort_values()","846872ef":"data.groupby(\"Outcome\")[[\"Pregnancies\",\"Glucose\",\"BloodPressure\"]].agg(['max','min','mean'])","13f3070f":"data.groupby(\"Outcome\")[[\"SkinThickness\",\"Insulin\",\"BMI\",\"Age\"]].agg(['max','min','mean'])","c8f338ff":"# Finding counts of unique values \n\ndata['Outcome'].value_counts()","446ba230":"# Plotting histogram of dataframe\n\np = data.hist(figsize = (15,20))","6b3e8d76":"X = data.drop('Outcome',axis = 1)","20e5f61e":"X.head()","d660e59c":"y = data['Outcome']","52ab1e56":"# Getting first few observations of target variable\n\ny.head()","0cb36844":"# Splitting the matrices into random train & test subsets where test data contains 25% data and rest considered as training data\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.25,random_state = 200)","c9a7c81e":"# Getting dimensions of train & test subsets\n\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","4b483f62":"clf = RandomForestClassifier(oob_score = True,n_jobs = -1,random_state = 100)\nclf","c33820de":"# Performing K-fold cross validation with 5 folds \n\nscores = cross_val_score(clf,X_train,y_train,cv = 5,scoring = \"f1_macro\")\nscores.mean()","cadf9c62":"# Building a forest of trees from training set\n\nclf.fit(X_train,y_train)","313e235b":"# Predicting on classifier created\n\ntrain_pred = clf.predict(X_train)\ntest_pred = clf.predict(X_test)","c2ecde6b":"# Finding F1 score of training and testing sets \n\nprint(\"The training F1 score is: \",f1_score(train_pred,y_train))\nprint(\"The testing F1 score is :\",f1_score(test_pred,y_test))","936bf1d1":"#  Tuning hyperparameters\n\nparameters = {\n             \"max_depth\":[2,3,4],\n             \"n_estimators\":[100,104,106],\n             \"min_samples_split\":[3,4,5],\n             \"min_samples_leaf\":[4,8,9]\n             }\n\nscorer = make_scorer(f1_score)","388e6c16":"# Using Randomized Search CV to find best optimal hyperparameter that best describe a classifier\n\nclf1 = RandomizedSearchCV(clf,parameters,scoring = scorer)\n\n# Fitting the model\n\nclf1.fit(X_train,y_train)\n\n# Getting best estimator having high score\n\nbest_clf_random = clf1.best_estimator_\nbest_clf_random","0182f876":"# Again, finding cross validation score\n\nscores = cross_val_score(best_clf_random,X_train,y_train,cv = 5,scoring = \"f1_macro\")\nscores.mean()","7e4783df":"# Fitting the best estimator\n\nbest_clf_random.fit(X_train,y_train)","3a336503":"# Getting first estimator\n\nbest_clf_random.estimators_[0]","c1504467":"# Predicting on best estimator\n\ntrain_pred = best_clf_random.predict(X_train)\ntest_pred = best_clf_random.predict(X_test)","2df6d666":"# Finding the F1 score of training & testing sets\n\nprint(\"The training F1 score is: \",f1_score(train_pred,y_train))\nprint(\"The testing F1 score is :\",f1_score(test_pred,y_test))","4d56e41d":"# Getting accuracy score \n\naccuracy_score(y_test,test_pred)","60fc83b3":"# Computing ROC AUC from prediction scores\n\nroc_auc_score(y_test,best_clf_random.predict_proba(X_test)[:,1])","95cf4235":"# Plotting ROC curve\n\nfpr,tpr,thresholds = roc_curve(y_test,best_clf_random.predict_proba(X_test)[:,1])\n\nplt.plot([0,1],[0,1],'k--')\nplt.plot(fpr,tpr)\nplt.xlabel('fpr')\nplt.ylabel('tpr')\nplt.show()","98ca5189":"# Computing confusion matrix\n\npd.crosstab(y_test,test_pred,rownames = ['True'],colnames = ['Predicted'],margins = True)","5f166dd0":"# Plotting confusion matrix\n\ncnf_matrix = confusion_matrix(y_test,test_pred)\np = sns.heatmap(pd.DataFrame(cnf_matrix),annot = True,cmap = \"YlGnBu\",fmt = 'g')\nplt.title(\"Confusion Matrix\",y = 1.1)\nplt.xlabel('Predicted Label')\nplt.ylabel('Actual Label')","a5c87f1a":"# Computing the precision\n\nprecision_score(y_test,test_pred)","642029b9":"# Computing the recall\n\nrecall_score(y_test,test_pred)","e9bb0b33":"# Getting feature importances\n\nimp_features = pd.Series(best_clf_random.feature_importances_,index = X.columns)\nimp_features.sort_values(ascending = False)","dda4d698":"# Plotting feature importances \n\nimp_features.sort_values(ascending = False).plot(kind = \"bar\")","61822663":"### Creating Predictor Matrix","dc70be3d":"### Grouping predictor variables by target variable ","69a6c4eb":"### Instantiating random forest classifier","fff9529b":"Here, Outcome is a target\/dependent variable and others are predictor\/independent variables.","967a13ff":"Having high Roc curve shows model is performing well.","b68907ca":"### 1) Importing required libraries","b066497e":"# Diabetes Prediction :-  Random Forest Classification Algorithm","30ad51a5":"### Getting correlations of each features in dataframe","5dce2490":"## Thank you\n## If you find this notebook useful, **upvote** it\n## Feel free to ask any queries and any suggestions for improving my kernel are welcome!","4713d903":"Using above way you can get specific estimators \/ decision trees that combined up to form a random forest classifier.","27c5f5e0":"Cross validation score should between 0 and 1 and as high as possible.\nHere cross validation has been performed to find how well model is performing in terms of F1 score.","efc749c8":"Now the missing values are now filled by specified methods.","c2f61875":"There are 5 variables having missing values.\nNow, filling missing values in these variables by specific value.","af8f17d5":"### 2) Reading the dataset ","2539e521":"### Summary of dataframe","25d36d0c":"Some of the variables (Glucose,BloodPressure,SkinThickness,Insulin,BMI) have 0 as minimum value and that is not possible.\n\nThese variables have missing values as 0 present in this dataset. So, marking them as missing values by replacing it by NaN.","36076cbb":"### Target variable"}}