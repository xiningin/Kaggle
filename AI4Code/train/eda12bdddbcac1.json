{"cell_type":{"e6ed6aff":"code","4fd69026":"code","8219c07c":"code","ad38c8f3":"code","25d700be":"code","5525f86f":"code","14f361eb":"code","2485902f":"code","fd52e1f3":"code","af13cfcd":"code","00d8b87a":"code","353de2c2":"code","2b05fe7a":"code","48d76a5c":"code","81837595":"code","7bf1501e":"code","337ae9ad":"code","161f9c96":"code","9ce10553":"code","2c69d643":"markdown","5f12ee1f":"markdown","4796ef79":"markdown","f7543224":"markdown","009a35c3":"markdown"},"source":{"e6ed6aff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4fd69026":"train_data = pd.read_csv('\/kaggle\/input\/5) Recurrent Neural Network\/Recurrent_Neural_Networks\/Google_Stock_Price_Train.csv')","8219c07c":"train_data.head()","ad38c8f3":"train = train_data.loc[:,['Open']].values\n#values using for converting array","25d700be":"train","5525f86f":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range = (0,1))\ntrain_scaled = scaler.fit_transform(train)\ntrain_scaled","14f361eb":"plt.plot(train_scaled)","2485902f":"# Creating a data structure with 50 timesteps and 1 output\nX_train = []\ny_train = []\ntimesteps = 50\nfor i in range(timesteps, 1258):\n    X_train.append(train_scaled[i-timesteps:i, 0])\n    y_train.append(train_scaled[i, 0])\nX_train, y_train = np.array(X_train), np.array(y_train)","fd52e1f3":"# Reshaping\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\nX_train","af13cfcd":"y_train","00d8b87a":"# Importing the Keras libraries and packages\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import SimpleRNN\nfrom keras.layers import Dropout\n\n# Initialising the RNN\nregressor = Sequential()\n\n# Adding the first RNN layer and some Dropout regularisation\nregressor.add(SimpleRNN(units = 50,activation='tanh', return_sequences = True, input_shape = (X_train.shape[1], 1)))\nregressor.add(Dropout(0.2))\n\n# Adding a second RNN layer and some Dropout regularisation\nregressor.add(SimpleRNN(units = 50,activation='tanh', return_sequences = True))\nregressor.add(Dropout(0.2))\n\n# Adding a third RNN layer and some Dropout regularisation\nregressor.add(SimpleRNN(units = 50,activation='tanh', return_sequences = True))\nregressor.add(Dropout(0.2))\n\n# Adding a fourth RNN layer and some Dropout regularisation\nregressor.add(SimpleRNN(units = 50))\nregressor.add(Dropout(0.2))\n\n# Adding the output layer\nregressor.add(Dense(units = 1))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nregressor.fit(X_train, y_train, epochs = 100, batch_size = 32)","353de2c2":"test_data = pd.read_csv('\/kaggle\/input\/5) Recurrent Neural Network\/Stock_Price_Test.csv')","2b05fe7a":"test_data.head()","48d76a5c":"real_stock_price = test_data.loc[:,['Open']].values","81837595":"real_stock_price","7bf1501e":"total_data = pd.concat((train_data['Open'],test_data['Open']),axis=0)\ninputs = total_data[len(total_data)-len(test_data)-timesteps:].values.reshape(-1,1)\ninputs = scaler.transform(inputs) #min max scaler","337ae9ad":"inputs","161f9c96":"X_test = []\nfor i in range(timesteps, 70):\n    X_test.append(inputs[i-timesteps:i, 0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\npredicted_stock_price = regressor.predict(X_test)\npredicted_stock_price = scaler.inverse_transform(predicted_stock_price)","9ce10553":"plt.plot(real_stock_price,color='red',label='Real Google Stock Price')\nplt.plot(predicted_stock_price,color='blue',label='Predicted Google Stock Price')\nplt.title('Google Stoc Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show()","2c69d643":"## Normalization","5f12ee1f":"## Visualization","4796ef79":"## Import","f7543224":"## Create the RNN Model","009a35c3":"## Reshaping"}}