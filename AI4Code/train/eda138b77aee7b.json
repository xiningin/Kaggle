{"cell_type":{"8ec63558":"code","a69ceecb":"code","228757ae":"code","3e908933":"code","08cd5d24":"code","2cc1b9b7":"code","607a2042":"code","296cf430":"code","1599e7fd":"code","6b76bd7d":"code","32671196":"code","473dd3fc":"code","b412e12d":"code","7bb2c6e3":"code","387ca55a":"code","8d14cedd":"code","20b09932":"code","f71076a8":"code","d3111873":"code","10a51186":"code","1c91b083":"code","1613a8ef":"code","203bcb70":"code","f5824eef":"code","4b84020f":"code","c91a2135":"code","450c4864":"code","d3d62292":"code","8ee47ad4":"code","ffe82e42":"code","c7e8a64b":"code","fb6fd6d1":"code","b288ea45":"code","b63f335a":"code","ee8206b2":"code","6d7f0fa9":"code","972903be":"code","4228de6d":"code","dba1b4f1":"code","062402aa":"code","5d758b5e":"code","a05bef16":"code","0224267c":"code","cd72e12b":"code","d7a22879":"code","9a4c5566":"code","9f445f53":"code","ac4f2d14":"code","48329fe6":"code","7c5dc825":"code","bde5103e":"code","f27092ff":"code","1df35a09":"code","998e41cd":"code","7f18a9b8":"code","d84b8fe4":"code","0152da9b":"code","98af1e86":"code","ee7b36c0":"code","84ba700a":"code","86149f67":"code","4e3b4ef4":"code","81a8a8aa":"code","4a33f01b":"code","5d817611":"code","1fc1d9f3":"code","65a60076":"code","4f63464e":"code","10e2a01b":"code","22917c39":"code","4693eef7":"markdown","15961969":"markdown","bf3c1e79":"markdown","0d5f611b":"markdown","10c0b02b":"markdown","59c47041":"markdown","64f3e795":"markdown","0760fc0e":"markdown","9d052b69":"markdown"},"source":{"8ec63558":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a69ceecb":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.dummy import DummyRegressor\nfrom catboost import CatBoostRegressor","228757ae":"def df_overview(df):\n    print('Dataframe overview:\\n')\n    display(df.head())\n    print('--------------------------------------------\\nSample:\\n')\n    display(df.sample(10, random_state=555))\n    print('--------------------------------------------\\nInfo:\\n')\n    print(df.info())\n    print('--------------------------------------------\\nNaN\\'s:\\n')\n    print(df.isna().sum())\n    print('--------------------------------------------\\nDescribe:\\n')\n    display(df.describe())\n    print('--------------------------------------------\\nFeature correlation:\\n')\n    display(df.corr())","3e908933":"def show_correlogram(df):\n    plt.figure(figsize=(6,6), dpi= 80)\n    sns.heatmap(\n        df.corr(), xticklabels=df.corr().columns,\n        yticklabels=df.corr().columns, cmap='RdYlGn', center=0, annot=True, cbar=False\n    )\n    plt.title('Correlogram between features', fontsize=16)\n    plt.xticks(fontsize=10)\n    plt.yticks(fontsize=10)\n    plt.show()","08cd5d24":"def plot_create(x, y):\n    plt.plot(x, y, '-', label=y.name)\n    \ndef process_visualisation(df, breath_id):\n    plt.figure(figsize=(14, 6))\n    plt.title('Breath Id - {}'.format(breath_id))\n    plot_create(df[df['breath_id'] == breath_id]['time_step'],\n                df[df['breath_id'] == breath_id]['pressure'])\n    plot_create(df[df['breath_id'] == breath_id]['time_step'],\n                df[df['breath_id'] == breath_id]['u_in'])\n    plot_create(df[df['breath_id'] == breath_id]['time_step'],\n                df[df['breath_id'] == breath_id]['u_out'])\n    plt.grid()\n    plt.legend()\n    plt.ylabel('Value')\n    plt.show()","2cc1b9b7":"def process_visualisation_with_preds(df, df_preds, breath_id):\n    plt.figure(figsize=(14, 6))\n    plt.title('Breath Id - {}'.format(breath_id))\n    plot_create(df[df['breath_id'] == breath_id]['time_step'],\n                df[df['breath_id'] == breath_id]['pressure'])\n    plot_create(df[df['breath_id'] == breath_id]['time_step'],\n                df[df['breath_id'] == breath_id]['u_in'])\n    plot_create(df[df['breath_id'] == breath_id]['time_step'],\n                df[df['breath_id'] == breath_id]['u_out'])\n    plot_create(df[df['breath_id'] == breath_id]['time_step'],\n                df_preds)\n    plt.grid()\n    plt.legend()\n    plt.ylabel('Value')\n    plt.show()","607a2042":"def add_features(df):\n    df['u_in_cumsum'] = df['u_in'].groupby(df['breath_id']).cumsum()\n    df['u_in_lag_1'] = df.groupby('breath_id')['u_in'].shift(1)\n    df['u_in_lag_2'] = df.groupby('breath_id')['u_in'].shift(2)\n    df['u_in_lag_3'] = df.groupby('breath_id')['u_in'].shift(3)\n    df['u_in_rolling_mean_3'] = df.groupby('breath_id')['u_in'].shift().rolling(3).mean()\n    df['u_in_rolling_mean_5'] = df.groupby('breath_id')['u_in'].shift().rolling(5).mean()\n    df['u_in_begin'] = df.groupby('breath_id')['u_in'].transform('first')\n    df['u_in_end'] = df.groupby('breath_id')['u_in'].transform('last')\n    df['u_in_min'] = df.groupby('breath_id')['u_in'].transform('min')\n    df['u_in_max'] = df.groupby('breath_id')['u_in'].transform('max')\n    df['u_in_median'] = df.groupby('breath_id')['u_in'].transform('median')\n    df = df.fillna(0)\n    df = df.drop(['breath_id', 'u_in', 'u_out'], axis=1)\n    return df","296cf430":"def train_and_score(model):\n    model.fit(X_train, y_train)\n    return mean_absolute_error(y_valid, model.predict(X_valid))","1599e7fd":"df_train = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/test.csv')\ndf_sample_submission = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/sample_submission.csv')","6b76bd7d":"df_train = df_train.drop('id', axis=1)","32671196":"df_overview(df_train)","473dd3fc":"df_overview(df_test)","b412e12d":"show_correlogram(df_train)","7bb2c6e3":"for col in df_train.columns:\n    df_train[col].plot(kind='hist', bins=30, title=col)\n    plt.show()","387ca55a":"for col in ['time_step', 'u_in', 'pressure']:\n    df_train[col].plot(kind='box')\n    plt.show()","8d14cedd":"df_train[df_train['pressure'] > 55]['pressure'].plot(kind='hist', bins=30, title='Pressure > 55')\nplt.show()\ndf_train[df_train['u_in'] > 70]['u_in'].plot(kind='hist', bins=30, title='U in > 70')\nplt.show()","20b09932":"df_train[df_train['pressure'] > 64.5]['pressure'].value_counts().sort_index(ascending=False)","f71076a8":"df_train[df_train['u_in'] > 99.98]['u_in'].value_counts().sort_index(ascending=False)","d3111873":"df_test[df_test['u_in'] > 99.98]['u_in'].value_counts().sort_index(ascending=False)","10a51186":"df_train[df_train['u_in'] > 99.98]['pressure'].plot(kind='hist', bins=40, title='Pressure when U in is high')\nplt.show()\ndf_train[df_train['pressure'] > 64.5]['u_in'].plot(kind='hist', bins=40, title='U in when Pressure is high')\nplt.show()","1c91b083":"df_breath = df_train.groupby('breath_id', as_index=False).median()\ndf_breath","1613a8ef":"for col in ['time_step', 'u_in', 'pressure']:\n    df_breath[col].plot(kind='hist', bins=30, title=col)\n    plt.show()","203bcb70":"df_breath[df_breath['pressure'] < 0].head(10)","f5824eef":"df_breath[df_breath['pressure'] < 0]['pressure'].plot(kind='hist', bins=30, title='Negative pressure')\nplt.show()","4b84020f":"df_breath[df_breath['pressure'] < 0]['u_in'].plot(kind='hist', bins=30, title='U in when Pressure < 0')\nplt.show()\ndf_breath[df_breath['pressure'] == df_breath['pressure'].median()]['u_in'].plot(\n    kind='hist', bins=30, title='U in when Pressure is normal')\nplt.show()","c91a2135":"print('Some data where pressure is normal:')\ndisplay(df_breath[df_breath['pressure'] == df_train['pressure'].median()].sample(3, random_state=1))\nprint('\\nSome data where pressure is below 0:')\ndisplay(df_breath[df_breath['pressure'] < 0].sample(3, random_state=1))\nprint('\\nSome data where pressure is high:')\ndisplay(df_breath[df_breath['pressure'] > 12].sample(3, random_state=1))","450c4864":"print('Some data where pressure is normal:')\ndisplay(df_breath[df_breath['pressure'] == df_train['pressure'].median()].sample(3, random_state=1))\nprint('\\nSome data where pressure is below 0:')\ndisplay(df_breath[df_breath['pressure'] < 0].sample(3, random_state=1))\nprint('\\nSome data where pressure is high:')\ndisplay(df_breath[df_breath['pressure'] > 12].sample(3, random_state=1))","d3d62292":"print('Process visualisation where pressure is normal:')\nprocess_visualisation(df_train, 48945)\nprocess_visualisation(df_train, 28141)\nprocess_visualisation(df_train, 109737)","8ee47ad4":"print('Process visualisation where pressure is below 0:')\nprocess_visualisation(df_train, 98041)\nprocess_visualisation(df_train, 118131)\nprocess_visualisation(df_train, 11216)","ffe82e42":"print('Process visualisation where pressure is high:')\nprocess_visualisation(df_train, 104581)\nprocess_visualisation(df_train, 14416)\nprocess_visualisation(df_train, 69384)","c7e8a64b":"X = df_train.copy()\nX = X.drop('pressure', axis=1)\nX = add_features(X)\ny = df_train['pressure']","fb6fd6d1":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=555)","b288ea45":"linear_model = LinearRegression()\ntree_model = DecisionTreeRegressor(max_depth=15, random_state=555)\ncb_model = CatBoostRegressor(\n    depth=15, loss_function='MAE', task_type='GPU', devices='0-3',\n    gpu_ram_part=0.3, random_seed=555, verbose=0\n)\ndummy = DummyRegressor()","b63f335a":"display(\n    pd.DataFrame(data=([train_and_score(linear_model)],\n                       [train_and_score(tree_model)],\n                       [train_and_score(cb_model)], \n                       [train_and_score(dummy)]\n                      ),\n                 columns=['Result MAE'],\n                 index=['Linear', 'Tree', 'CatBoost', 'Dummy'])\n)","ee8206b2":"pd.DataFrame(\n    cb_model.feature_importances_, index=cb_model.feature_names_, columns=['importances']\n).sort_values(by='importances').plot(kind='barh', figsize=(8, 6), title='CatBoost feature importances')\nplt.show()","6d7f0fa9":"linear_model.fit(X, y)\ntree_model.fit(X, y)\ncb_model.fit(X, y)","972903be":"#Lets check prediction quality with our process visualisation:\nX_df_vis = df_train[df_train['breath_id'] == 28141].reset_index()\nX_df_vis = add_features(X_df_vis)\nX_df_vis = X_df_vis.drop(['index', 'pressure'], axis=1)\n\nprint('Pressure predictions by Linear Model where pressure is normal:')\nprocess_visualisation_with_preds(df_train, pd.Series(linear_model.predict(X_df_vis), name='predictions'), 28141)\nprint('Pressure predictions by Tree Model where pressure in normal:')\nprocess_visualisation_with_preds(df_train, pd.Series(tree_model.predict(X_df_vis), name='predictions'), 28141)\nprint('Pressure predictions by CatBoost Model where pressure in normal:')\nprocess_visualisation_with_preds(df_train, pd.Series(cb_model.predict(X_df_vis), name='predictions'), 28141)","4228de6d":"X_df_vis = df_train[df_train['breath_id'] == 98041].reset_index()\nX_df_vis = add_features(X_df_vis)\nX_df_vis = X_df_vis.drop(['index', 'pressure'], axis=1)\n\nprint('Pressure predictions by Linear Model where pressure is below 0:')\nprocess_visualisation_with_preds(df_train, pd.Series(linear_model.predict(X_df_vis), name='predictions'), 98041)\nprint('Pressure predictions by Tree Model where pressure in below 0:')\nprocess_visualisation_with_preds(df_train, pd.Series(tree_model.predict(X_df_vis), name='predictions'), 98041)\nprint('Pressure predictions by CatBoost Model where pressure in below 0:')\nprocess_visualisation_with_preds(df_train, pd.Series(cb_model.predict(X_df_vis), name='predictions'), 98041)","dba1b4f1":"X_df_vis = df_train[df_train['breath_id'] == 104581].reset_index()\nX_df_vis = add_features(X_df_vis)\nX_df_vis = X_df_vis.drop(['index', 'pressure'], axis=1)\n\nprint('Pressure predictions by Linear Model where pressure is high:')\nprocess_visualisation_with_preds(df_train, pd.Series(linear_model.predict(X_df_vis), name='predictions'), 104581)\nprint('Pressure predictions by Tree Model where pressure in high:')\nprocess_visualisation_with_preds(df_train, pd.Series(tree_model.predict(X_df_vis), name='predictions'), 104581)\nprint('Pressure predictions by CatBoost Model where pressure in high:')\nprocess_visualisation_with_preds(df_train, pd.Series(cb_model.predict(X_df_vis), name='predictions'), 104581)","062402aa":"df_test_featured = df_test.copy()\ndf_test_featured = add_features(df_test_featured)\ndf_test_featured = df_test_featured.drop('id', axis=1)","5d758b5e":"preds = cb_model.predict(df_test_featured)","a05bef16":"output = pd.DataFrame({'id': df_test['id'].values,\n                       'pressure': preds})\ndisplay(output)\noutput.to_csv('submission.csv', index=False)","0224267c":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        path=os.path.join(dirname, filename)\n        if 'train' in path:\n            __training_path=path\n        elif 'test' in path:\n            __test_path=path","cd72e12b":"#loaded files\nprint(f'Training path:{__training_path}\\nTest path:{__test_path}')","d7a22879":"# Kaggle Environment Prepration\n#update kaggle env\nimport sys\n#you may update the environment that allow you to run the whole code\n!{sys.executable} -m pip install --upgrade scikit-learn==\"0.24.2\"","9a4c5566":"#record this information if you need to run the Kernel internally\nimport sklearn; sklearn.show_versions()","9f445f53":"def __load__data(__training_path, __test_path, concat=False):\n\t\"\"\"load data as input dataset\n\tparams: __training_path: the training path of input dataset\n\tparams: __test_path: the path of test dataset\n\tparams: if it is True, then it will concatinate the training and test dataset as output\n\treturns: generate final loaded dataset as dataset, input and test\n\t\"\"\"\n\t# LOAD DATA\n\timport pandas as pd\n\t__train_dataset = pd.read_csv(__training_path, delimiter=',')\n\t__test_dataset = pd.read_csv(__test_path, delimiter=',')\n\treturn __train_dataset, __test_dataset\n__train_dataset, __test_dataset = __load__data(__training_path, __test_path, concat=True)\n__train_dataset.head()","ac4f2d14":"# STORE SUBMISSION RELEVANT COLUMNS\n__test_dataset_submission_columns = __test_dataset['id']","48329fe6":"# DISCARD IRRELEVANT COLUMNS\n__train_dataset.drop(['id'], axis=1, inplace=True)\n__test_dataset.drop(['id'], axis=1, inplace=True)","7c5dc825":"# DETACH TARGET\n__feature_train = __train_dataset.drop(['pressure'], axis=1)\n__target_train =__train_dataset['pressure']\n__feature_test = __test_dataset","bde5103e":"# MODEL\nimport numpy as np\nfrom lightgbm import LGBMRegressor\n__model = LGBMRegressor()\n__model.fit(__feature_train, __target_train) \n__y_pred = __model.predict(__feature_test)","f27092ff":"# SUBMISSION\nsubmission = pd.DataFrame(columns=['id'], data=__test_dataset_submission_columns)\nsubmission['pressure'] = __y_pred\nsubmission.head()","1df35a09":"# save submission file\nsubmission.to_csv(\"kaggle_submission.csv\", index=False)","998e41cd":"from tensorflow import keras\nfrom tensorflow.keras import layers\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.metrics import mean_absolute_error\nfrom tensorflow.keras.callbacks import TensorBoard","7f18a9b8":"train = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/train.csv\")","d84b8fe4":"train = train.sample(frac =.01,random_state = 90, replace = False)\ntrain.shape","0152da9b":"train.head()","98af1e86":"train.isnull().sum()","ee7b36c0":"train.info()","84ba700a":"train.corr()","86149f67":"sns.scatterplot(x=train[\"pressure\"],y=train['u_in'])","4e3b4ef4":"sns.histplot( x=train[\"u_in\"],binwidth=5 ,kde=True)","81a8a8aa":"train = train.drop(\"breath_id\",axis=1)","4a33f01b":"X = train.drop(\"pressure\",axis=1)\ny = train[\"pressure\"]","5d817611":"model = keras.Sequential([\n    layers.Dense(512, activation='relu', input_shape=[6]),\n    layers.Dense(512, activation='relu'),\n    layers.Dense(512, activation='selu'),\n    layers.Dense(1),\n])","1fc1d9f3":"model.compile(\n    optimizer='adam',\n    loss='mae',\n)","65a60076":"history = model.fit(\n    X, y,\n    validation_data=(X, y),\n    batch_size=256,\n    epochs=10,\n)","4f63464e":"model.save(\"saved_model\")","10e2a01b":"loaded_model = keras.models.load_model(\".\/saved_model\")","22917c39":"preds = loaded_model.predict(X[:1000])\nmae = mean_absolute_error(y[:1000],preds)\nprint(mae)","4693eef7":"Target Column\nThe target column is the value which we need to predict. Therefore, we need to detach the target columns in prediction. Note that if we don't drop this fields, it will generate a model with high accuracy on training and worst accuracy on test (because the value in test dataset is Null). Here is the list of target column: pressure","15961969":"Submission File\n\nWe have to maintain the target columns in \"submission.csv\" which will be submitted as our prediction results.","bf3c1e79":"Defining,Compiling,Saving,Loading and predicting from the model","0d5f611b":"Training Model and Prediction\n\nFirst, we will train a model based on preprocessed values of training data set. Second, let's predict test values based on the trained model.\n\n\nLightGBM Regressor\n\nWe will use LightGBM Regressor which is constructing a gradient boosting model. We will use lightgbm package. More detail about LightGBM Regressor can be found here.","10c0b02b":"Intro\n\nSaving your pre trained model will save you a lot of time . So to show how this works I have made this notebook :","59c47041":"# Open data","64f3e795":"# Train and test","0760fc0e":"# EDA","9d052b69":"Lets look at breathe processes. Take processes with normal, low and high pressures:"}}