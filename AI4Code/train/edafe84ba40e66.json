{"cell_type":{"29c6a4d7":"code","60051ccd":"code","2b80319f":"code","1db568c6":"code","479fb943":"code","aa35deff":"code","2b33d11e":"code","da603532":"markdown","44d54506":"markdown","17fb43c5":"markdown","d0c0e75a":"markdown","07810a9d":"markdown","f43c77b4":"markdown","f71134df":"markdown"},"source":{"29c6a4d7":"#Basic Liberaries\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', 500)\n#Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#stop warning\nimport warnings\nwarnings.filterwarnings('ignore')\n#File Paths\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","60051ccd":"#read the CSV\ndf = pd.read_csv('\/kaggle\/input\/customer-personality-analysis\/marketing_campaign.csv' ,sep = '\\t')\n#Drop un-needed columns\ndf.drop(['ID' , 'Z_CostContact' , 'Z_Revenue' , 'Recency' ,'Marital_Status' ,'Education' ] \n        , axis = 1 , inplace = True)\n#convert the customer enrolled date to Datetime type\ndf['Dt_Customer'] = pd.to_datetime(df['Dt_Customer'])\n# Calculate the number of days from customer enrollement to Jan 2015\ndf['uptoddate'] = '01-01-2015'\ndf['uptoddate'] = pd.to_datetime(df['uptoddate'])\ndf['number_days_from_Enrollment'] = (df['uptoddate'] - df['Dt_Customer']).dt.days\n#Drop the customer enrollement date and the uptodate column\ndf.drop([ 'uptoddate' , 'Dt_Customer' ]  , axis = 1 , inplace = True)\n#binaries the kids and teen columns\ndf.Kidhome = df.Kidhome.apply(lambda x: 1 if x == 2 else x)\ndf.Teenhome = df.Teenhome.apply(lambda x: 1 if x == 2 else x)\n#Normalized the right skewed columns\ndf['log_MntWines'] = np.log1p(df.MntWines)\ndf['log_MntFruits']= np.log1p(df.MntFruits)\ndf['log_MntMeatProducts']= np.log1p(df.MntMeatProducts)\ndf['log_MntFishProducts']= np.log1p(df.MntFishProducts)\ndf['log_MntSweetProducts']= np.log1p(df.MntSweetProducts)\ndf['log_MntGoldProds']= np.log1p(df.MntGoldProds)\ndf['log_NumDealsPurchases'] = np.log1p(df.NumDealsPurchases)\ndf['log_NumWebPurchases'] = np.log1p(df.NumWebPurchases)\ndf['log_NumCatalogPurchases'] = np.log1p(df.NumCatalogPurchases)\ndf['log_NumStorePurchases'] = np.log1p(df.NumStorePurchases)\ndf['log_NumWebVisitsMonth'] = np.log1p(df.NumWebVisitsMonth)\ndf.drop(['MntWines' , 'MntFruits' , 'MntMeatProducts' , 'MntFishProducts' , \n         'MntSweetProducts' , 'MntGoldProds' , 'NumDealsPurchases' , \n        'NumWebPurchases' , 'NumCatalogPurchases' , 'NumStorePurchases' , \n        'NumWebVisitsMonth' ] , axis = 1 , inplace = True)\n#remove the outliers in the Year Birth column and replace it with the mean\ndf['Year_Birth'] = df['Year_Birth'].apply(lambda x : 1973 if x< 1940  else x)\n#create age band for the customer\ndf['older_than_50_years_old'] = df['Year_Birth'].apply(lambda x :1 if x<1965 else 0)\ndf['from_30_to_50_years_old'] = df['Year_Birth'].apply(lambda x :1 if 1965<x<1985 else 0)\ndf['younge_than_30'] = df['Year_Birth'].apply(lambda x :1 if 1985<x else 0)\ndf.drop([ 'Year_Birth'] , axis = 1 , inplace = True)\n#create Log column for incume and fill the missing with the mean \ndf['log_Income'] = np.log1p(df.Income)\ndf['log_Income'] = df['log_Income'].fillna(df['log_Income'].mean())\n#Drop income column\ndf.drop('Income' , axis  = 1 , inplace  = True)\n#create new column for the total expenses per customer\ndf['Total_expenses'] = df.log_MntWines+df.log_MntFruits+df.log_MntMeatProducts+df.log_MntFishProducts+df.log_MntSweetProducts+df.log_MntGoldProds\n#create a new column for the expenses rat per day\ndf['expenses_per_day'] = df.Total_expenses \/ df.number_days_from_Enrollment\n#Create bands for the number of days form enrollement\ndf['new_enrollement_less_year'] = df.number_days_from_Enrollment.apply(lambda x: 1 if x <300 else 0)\ndf['Range_one_year_enrollment'] = df.number_days_from_Enrollment.apply(lambda x: 1 if 366<x <510 else 0)\ndf['Two_years_enrollement'] = df.number_days_from_Enrollment.apply(lambda x: 1 if 510<x <730 else 0)\ndf['Long_term_enrollement'] = df.number_days_from_Enrollment.apply(lambda x: 1 if 730<x  else 0)\ndf.drop('number_days_from_Enrollment' , axis  = 1 , inplace  = True)\n#create bands for expenses per day rate\ndf['low_expenses\/day_rate'] = df.expenses_per_day.apply(lambda x : 1 if x<0.023320 else 0)\ndf['good_expenses\/day_rate'] = df.expenses_per_day.apply(lambda x : 1 if 0.023320<x<0.051404 else 0)\ndf['Excellent_expenses\/day_rate'] = df.expenses_per_day.apply(lambda x : 1 if 0.051404<x else 0)\ndf.drop('expenses_per_day' , axis  = 1 , inplace  = True)\n#for the education column add the 2nd cycle to the Master\n\"\"\"\n\ndf['Education'] = df.Education.apply(lambda x: 'Master' if x == '2n Cycle' else x )\n#adjust the Maritalstatus column\n#https:\/\/www.kaggle.com\/miguelfzzz\/store-customers-clustering-analysis\ndf['Marital_Status'] = df['Marital_Status'].str.replace('Married', 'In relationship')\ndf['Marital_Status'] = df['Marital_Status'].str.replace('Together', 'In relationship')\ndf['Marital_Status'] = df['Marital_Status'].str.replace('Divorced', 'Single')\ndf['Marital_Status'] = df['Marital_Status'].str.replace('Widow', 'Single')\ndf['Marital_Status'] = df['Marital_Status'].str.replace('Absurd', 'Single')\ndf['Marital_Status'] = df['Marital_Status'].str.replace('Alone', 'Single')\ndf['Marital_Status'] = df['Marital_Status'].str.replace('YOLO', 'Single')\n#Get dummies form the Education and marital status column\ndf = pd.get_dummies(data=df, columns=['Education'  , 'Marital_Status'])\n\"\"\"\ndf.head()","2b80319f":"fig , ax = plt.subplots(5 , 7 , figsize = (20,20))\nfor axes  , column in zip(ax.flatten() ,df.columns ):\n    plt.style.use('seaborn-dark-palette')\n    sns.histplot(data  = df , x =column  ,ax = axes , bins = 30)\n    plt.tight_layout()","1db568c6":"#prepare the values for clustring\nX = df.values\n#Scale the values\nfrom sklearn.preprocessing import MinMaxScaler\nSc = MinMaxScaler()\nX = Sc.fit_transform(X)\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=2)\nprincipalComponents = pca.fit_transform(X)\n#Clustring usign Kmeans \nfrom sklearn.cluster import KMeans\nclustering = KMeans(n_clusters=4).fit(principalComponents)\nlabels  = clustering.labels_","479fb943":"fig , ax  = plt.subplots(figsize = (15,6))\ncustom_params = {\"axes.spines.right\": False, \"axes.spines.top\": False}\nsns.set_theme(style=\"ticks\", rc=custom_params)\nsns.scatterplot(x = principalComponents[: , 0] , y = principalComponents[: , 1] ,\n                hue  = labels , style = labels ,  palette=\"Set1\" \n                , ax = ax).set_title(\"Clustring Groups\" , fontsize = 18)\n\nax.set(xlabel='principalComponents 01', ylabel='principalComponents 02');\n","aa35deff":"df['labels'] = labels\nsns.set_theme(style=\"white\", rc={\"axes.facecolor\": (0, 0, 0, 0)})\n    # Initialize the FacetGrid object\npal = sns.cubehelix_palette(10, rot=-.25, light=.7)\n\ndef label(x, color, label):\n    ax = plt.gca()\n    ax.text(0, .2, label, fontweight=\"bold\", color=color,\n            ha=\"left\", va=\"center\", transform=ax.transAxes)\ncolumns = ['log_Income', 'Total_expenses','log_MntWines',\n           'log_MntFruits', 'log_MntMeatProducts', 'log_MntFishProducts',\n           'log_MntSweetProducts', 'log_MntGoldProds', 'log_NumDealsPurchases',\n           'log_NumWebPurchases', 'log_NumCatalogPurchases',\n           'log_NumStorePurchases']    \nfor column in columns:\n\n    g = sns.FacetGrid(df, row=\"labels\", hue=\"labels\", aspect=20, height=.7, palette=pal);\n\n    # Draw the densities in a few steps\n    g.map(sns.kdeplot, column,\n          bw_adjust=.5, clip_on=False,\n          fill=True, alpha=1, linewidth=1.5)\n    g.map(sns.kdeplot, column, clip_on=False, color=\"w\", lw=2, bw_adjust=.5)\n    g.map(plt.axhline, y=0, lw=2, clip_on=False)\n\n\n    g.map(label, column)\n\n    # Set the subplots to overlap\n    g.fig.subplots_adjust(hspace=-.25)\n\n    # Remove axes details that don't play well with overlap\n    g.set_titles(\"\")\n    g.set(yticks=[])\n    g.despine(bottom=True, left=True)","2b33d11e":"columns = ['new_enrollement_less_year',\n       'Range_one_year_enrollment', 'Two_years_enrollement',\n       'Long_term_enrollement']\nfor column in columns:\n    fig , ax = plt.subplots()\n    sns.countplot(x= column , data  = df , hue  = 'labels' , ax = ax)\n","da603532":"<h2 style=\"background-color:powderblue; color:red; font-family:verdana;text-align:center;border: 20px solid black;margin: 50px;font-weight: bold;\">\n   <br> Quick visualization for the distribution of the new generated dataframe<br> ","44d54506":"<h2 style=\"background-color:powderblue; color:red; font-family:verdana;text-align:center;border: 20px solid black;margin: 50px;font-weight: bold;\">\n   <br> Visualizing :\n    <br>Incume \/ Purchasing habbits\/ Expenses <br> For Each Cluster<br>","17fb43c5":"<h2 style=\"background-color:powderblue; color:red; font-family:verdana;text-align:center;border: 20px solid black;margin: 50px;font-weight: bold;\">\n   <br> Clustring Pipeline<br> ","d0c0e75a":"<h2 style=\"background-color:powderblue; color:red; font-family:verdana;text-align:center;border: 20px solid black;margin: 50px;font-weight: bold;\">\n   <br> Data Manupilation Pipeline<br> ","07810a9d":"<ul style=\"background-color:powderblue; color:black; font-family:verdana;border: 20px solid black;margin: 10px;\"><br><br>\n    <li> <strong>Cluster 0 and Cluster 3:<\/strong> Low income , Low expenses (un-active customers)<\/li>\n    <li> <strong>Cluster 1:<\/strong>  High income , High expenses , most of them newely enrolled ( Promising cutomers) <\/li>\n    <li> <strong>Cluster 2:<\/strong> High income , High expenses ,old customers (loyal customers)<\/li>\n<br><br>\n    <\/ul>","f43c77b4":"<h2 style=\"background-color:powderblue; color:red; font-family:verdana;text-align:center;border: 20px solid black;margin: 50px;font-weight: bold;\">\n   <br> Visualizing :\n    <br>Enrollment duration<br> For Each Cluster<br>","f71134df":"<h2 style=\"background-color:powderblue; color:red; font-family:verdana;text-align:center;border: 20px solid black;margin: 50px;font-weight: bold;\">\n   <br> Conclusion<br>"}}