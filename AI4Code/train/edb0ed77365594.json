{"cell_type":{"c465f0d7":"code","5ac528a4":"code","cd01d9be":"code","202ac9d2":"code","8e8a8903":"code","1daebb44":"code","0be777cb":"code","08950867":"code","a4d8879a":"code","a435c4ab":"code","ad26d403":"code","f8fb7e8c":"code","8f2ddd13":"code","9281643f":"markdown","0a305755":"markdown","e493369c":"markdown","cb602dc5":"markdown"},"source":{"c465f0d7":"import pandas as pd\nimport lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nimport shap","5ac528a4":"data = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv', parse_dates=['date'])","cd01d9be":"def weird_division(n, d):\n    return n \/ d if d else 0\n\ndef cut_data(data):\n    perc_95 = data[\"CPM\"].quantile(0.95)\n    data = data[data.CPM < perc_95]\n    data = data[data.CPM >= 0]\n    return data\n\ndata['CPM'] = data.apply(lambda x: weird_division(((x['total_revenue'] * 100)), x['measurable_impressions']) * 1000 , axis=1)","202ac9d2":"data_train = data[data.date < \"2019-06-22\"]\ndata_test = data[data.date >= \"2019-06-22\"]\n\ndata_train = cut_data(data_train) # \u041b\u0443\u0447\u0448\u0435 \u043e\u0431\u0440\u0435\u0437\u0430\u0442\u044c \u0438 \u0442\u0440\u044d\u0439\u043d, \u0438 \u0442\u0435\u0441\u0442\ndata_test = cut_data(data_test)\n\ndata_train.drop(columns=[\"total_revenue\", \"measurable_impressions\"], inplace=True) # \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043b\u0438\u043a\u0438\ndata_test.drop(columns=[\"total_revenue\", \"measurable_impressions\"], inplace=True)","8e8a8903":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443\nX = data_train.copy()\nX.drop(columns=[\"CPM\", \"date\"], inplace=True)\ny = data_train.CPM\n\nX_test = data_test.copy()\nX_test.drop(columns=[\"CPM\", \"date\"], inplace=True)\ny_test = data_test.CPM\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2)","1daebb44":"X_train.head()","0be777cb":"cat_feats = [\"site_id\", \n             \"ad_type_id\", \n             \"geo_id\", \n             \"device_category_id\",\n             \"advertiser_id\", \n             \"order_id\", \n             \"line_item_type_id\", \n             \"os_id\",\n             \"integration_type_id\", \n             \"monetization_channel_id\", \n             \"ad_unit_id\"]","08950867":"dtrain = lgb.Dataset(X_train, label=y_train)\ndvalid = lgb.Dataset(X_valid, y_valid, reference=dtrain)\n\nparams = {'objective': 'mse',\n          'num_leaves': 40,\n          'feature_fraction': 0.7,\n          'bagging_fraction': 0.7,\n          'learning_rate':0.1,          \n          'lambda_l2': 0.01,\n          }\n    \n# \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\nnum_trees = 5000\nbst = lgb.train(params.copy(), \n                dtrain,\n                num_boost_round=num_trees,\n                valid_sets=[dtrain, dvalid],\n                categorical_feature=cat_feats,\n                early_stopping_rounds=100,\n                verbose_eval = 200)\nprint('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432:',bst.num_trees())\nprint('\u041e\u0431\u0443\u0447\u0438\u043b\u0441\u044f!')","a4d8879a":"explainer = shap.TreeExplainer(bst)\nshaps_all = explainer.shap_values(X_valid)\nprint(\"shaps calculated!\")\nshap.summary_plot(shaps_all, X_valid, max_display=len(X_valid.columns))","a435c4ab":"col_to_drop = [\"revenue_share_percent\", \"integration_type_id\"]\nX_train.drop(columns=col_to_drop, inplace=True)\nX_valid.drop(columns=col_to_drop, inplace=True)\nX.drop(columns=col_to_drop, inplace=True)\n\nX_test.drop(columns=col_to_drop, inplace=True)\n\ncat_feats.remove(\"integration_type_id\")","ad26d403":"dtrain = lgb.Dataset(X_train, label=y_train)\ndvalid = lgb.Dataset(X_valid, y_valid, reference=dtrain)\n\nparams = {'objective': 'mse',\n          'num_leaves': 40,\n          'feature_fraction': 0.7,\n          'bagging_fraction': 0.7,\n          'learning_rate':0.1,          \n          'lambda_l2': 0.01,\n          }\n    \n# \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\nnum_trees = 5000\nbst = lgb.train(params.copy(), \n                dtrain,\n                num_boost_round=num_trees,\n                valid_sets=[dtrain, dvalid],\n                categorical_feature=cat_feats,\n                early_stopping_rounds=100,\n                verbose_eval = 200)\nprint('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432:',bst.num_trees())\nprint('\u041e\u0431\u0443\u0447\u0438\u043b\u0441\u044f!')","f8fb7e8c":"# \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0432\u0441\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\ndtrain = lgb.Dataset(X, label=y)\n   \n# \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\nnum_trees = bst.best_iteration\nbst = lgb.train(params.copy(), dtrain, num_boost_round = num_trees, valid_sets=[dtrain],\n                 categorical_feature=cat_feats, verbose_eval = 200)","8f2ddd13":"# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n\ny_pred = bst.predict(X_test)\n\nmse = ((y_pred - y_test)**2).mean()\nprint(\"RESULT MSE:\", mse)","9281643f":"\u0412 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043e\u0434\u043d\u0438 \u0430\u0439\u0434\u0438\u0448\u043d\u0438\u043a\u0438, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435. \u041b\u0443\u0447\u0448\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u043e \u043d\u0435\u0439\u0440\u043e\u043d\u043e\u0447\u043a\u0430\u0445 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0439 \u0434\u043e\u0431\u0440\u044b\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433","0a305755":"\u0423 \u043d\u0430\u0441 \u0432\u0441\u0451-\u0442\u0430\u043a\u0438 \u0442\u0435\u043e\u0440\u0438\u044f \u0438\u0433\u0440 (\u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435), \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0437\u0430\u043e\u0434\u043d\u043e \u0438 shap-values","e493369c":"\u041f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c","cb602dc5":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 revenue_share_percent, integration_type_id (\u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043e\u043d\u0438) \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u043c\u0438 \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f, \u0438\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u043d\u0438\u0445."}}