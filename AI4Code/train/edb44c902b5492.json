{"cell_type":{"632bb6b6":"code","309dbde5":"code","e522aff9":"code","edc1963f":"code","e2a4316c":"code","e9576e65":"code","ef301ebb":"code","6b131484":"code","852128e0":"code","8339cc3c":"code","5a4cd56d":"code","ddc8d8e9":"code","bfb989b4":"code","2459a96c":"code","33ac8a43":"code","62a1fd03":"code","d3eef9af":"code","a1c6c383":"code","86f58164":"code","8423c865":"code","046afd00":"code","6d66df7e":"code","824e9570":"code","355419cc":"code","d633d0dd":"code","8f78f1c3":"code","e75d4cc4":"code","f2a5742a":"code","1ae438ff":"code","beec29f4":"code","5c511046":"code","8659b1ed":"code","f5875cae":"code","86f5dd76":"code","5d134cfb":"code","bb5b8a4c":"code","78d4da78":"code","bd489284":"code","7fdb5cf7":"code","bc5a4644":"code","7a1573d1":"code","4f7e9826":"code","d9695f89":"code","4bf4e5bb":"code","ef4fe162":"code","a1820023":"code","0fc8deec":"code","6dd19d0b":"code","daffea4e":"code","3bcc4af4":"code","4f2b2594":"code","4ad8a508":"code","887b9ad4":"code","29eb080a":"code","8b83dc17":"code","264998ef":"code","f6d1aed3":"code","7cbebf43":"code","bd9f32ec":"code","9ba9e622":"code","57d2689f":"code","27e09cfe":"code","cbba8ab7":"code","f495c963":"code","7265228c":"code","6b4aaa15":"code","80b4b98f":"code","3933ca5a":"code","ba3c8371":"code","f39a3ab7":"code","ff1d1e6c":"code","c20183b2":"code","2ffb6818":"code","09242c75":"code","cbe0386a":"code","f51aca6b":"code","11dd1957":"code","03b40de8":"code","8b6a2202":"code","d0d778ac":"code","dcfc9d11":"code","e7fd7190":"code","aa9c426b":"code","dacc6de8":"code","93b5bb7c":"code","55b9d7e3":"code","819d2dce":"code","a3db682b":"code","e3d2624e":"code","2526cfef":"code","2e560612":"code","3e13c51e":"code","f346041d":"code","774550df":"code","55e0a6a3":"code","1f688cb4":"code","fb730d9d":"code","1e70f78f":"code","037d2039":"code","a5e49f49":"code","d32a18ab":"code","cccf0f73":"code","4d0f30b6":"code","6e31bef4":"markdown","a71ded2b":"markdown","5b421f08":"markdown","081757e0":"markdown","2504eed9":"markdown","300ef665":"markdown","3743fbc6":"markdown","811c6fa6":"markdown","8504a950":"markdown","2759f3c3":"markdown","d671d2e0":"markdown","404cc823":"markdown","64bdeaf3":"markdown","ea69cbc6":"markdown","127e11c9":"markdown","dd545590":"markdown","03ff537e":"markdown","e2329fdc":"markdown","716180a5":"markdown","322e3800":"markdown","e0d3b87d":"markdown","3920ac76":"markdown","9dce9553":"markdown","aedd7cca":"markdown","9a83ebaa":"markdown","12a86821":"markdown","a1c2a23d":"markdown","c1b87710":"markdown","367d63d4":"markdown","99772328":"markdown","4af76f64":"markdown","47559085":"markdown","72175d39":"markdown","217a7316":"markdown","0eeb84ef":"markdown","d205aac0":"markdown","6261281e":"markdown","674bda77":"markdown","48f9b661":"markdown","73a395bb":"markdown","c794eacd":"markdown","d1c708fa":"markdown","5c255729":"markdown","11f82c31":"markdown","c629454f":"markdown","658552b0":"markdown","d78cb5ea":"markdown","e9b705ff":"markdown","6379ec3f":"markdown","c8b3fa3b":"markdown","c2ba4a76":"markdown","cafb4fcd":"markdown","f61be5d7":"markdown","70ebe375":"markdown","0be03bf3":"markdown","e16a493b":"markdown"},"source":{"632bb6b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","309dbde5":"import matplotlib.pyplot as plt\nimport seaborn as sns","e522aff9":"data_play = pd.read_csv(os.path.join(dirname, filenames[2]))","edc1963f":"data_play","e2a4316c":"dataplay = data_play.copy(deep =True)","e9576e65":"dataplay.head()","ef301ebb":"def basic_infos(data):\n    print(\"Dataset shape is: \", data.shape,\"\\n\")\n    print(\"Dataset columns are: \",data.columns,\"\\n\")\n    print(\"Dataset dimensions are:\",data.ndim,\"\\n\")\n    print(\"Dataset information is:\\n\",data.info(),\"\\n\")\n    categorical, numerical = [], []\n    for i in data.columns:\n        if dataplay[i].dtype==object:\n            categorical.append(i)\n        else:\n            numerical.append(i)\n    print(\"Categorical datatype columns are: \", [i for i in categorical],\"\\n\")\n    print(\"Numercial datatype columns are: \", [i for i in numerical],\"\\n\")","6b131484":"basic_infos(dataplay)","852128e0":"data_play.iloc[10472]","8339cc3c":"dataplay.loc[10472, \"Category\"] = \"LIFESTYLE\"\ndataplay.loc[10472, \"Rating\"] = 1.9\ndataplay.loc[10472, \"Reviews\"] = 19\ndataplay.loc[10472, \"Size\"] = \"3.0M\"\ndataplay.loc[10472, \"Installs\"] = \"1000+\"\ndataplay.loc[10472, \"Type\"] = \"Free\"\ndataplay.loc[10472, \"Price\"] = \"0\"\ndataplay.loc[10472, \"Content Rating\"] = \"Everyone\"\ndataplay.loc[10472, \"Genres\"] = \"Lifestyle\"\ndataplay.loc[10472, \"Last Updated\"] = \"February 11, 2018\"\ndataplay.loc[10472,\"Current Ver\"] = \"1.0.19\"\ndataplay.loc[10472, \"Android Ver\"] = \"4.0 and up\"","5a4cd56d":"basic_infos(dataplay)","ddc8d8e9":"dataplay['Reviews'] = dataplay['Reviews'].astype(int)","bfb989b4":"basic_infos(dataplay)","2459a96c":"dataplay['Size'].unique()","33ac8a43":"dataplay['Price'].unique()","62a1fd03":"def replace_in_in_price(price):\n    if price == '0':\n        price = 0\n        return price\n    elif '$' in price:\n        price = price.replace(\"$\",\"\")\n        return float(price)","d3eef9af":"dataplay['Price'] = dataplay[\"Price\"].apply(lambda x: replace_in_in_price(x))","a1c6c383":"dataplay['Price'].dtype","86f58164":"dataplay['Last Updated'] = pd.to_datetime(dataplay['Last Updated'])","8423c865":"dataplay.info()","046afd00":"print(dataplay.isnull().sum())","6d66df7e":"sns.boxplot(dataplay['Rating'])","824e9570":"dataplay[\"Rating\"] = dataplay['Rating'].fillna(dataplay['Rating'].median())","355419cc":"dataplay['Type'] = dataplay['Type'].fillna(dataplay['Type'].mode()[0])","d633d0dd":"dataplay['Android Ver'] = dataplay['Android Ver'].fillna(dataplay['Android Ver'].mode()[0])","8f78f1c3":"dataplay.isnull().sum()","e75d4cc4":"dataplay.head()","f2a5742a":"dataplay['Category'].value_counts()","1ae438ff":"plt.figure(figsize=(30,6))\nplt.hist(dataplay['Category'], bins = len(dataplay['Category'].value_counts()), edgecolor=\"#FF4040\")\nplt.xticks(rotation=-90)\nplt.show()","beec29f4":"#plt.figure(figsize=(100,80))\nlabels=['FAMILY', 'GAME', 'TOOLS', 'MEDICAL', 'BUSINESS', 'PRODUCTIVITY',\\\n       'PERSOALIZATION', 'COMMUNICATION', 'SPORTS', 'LIFESTYLE', 'FINANCE', 'HEALTH_AND_FITNESS'\\\n       'PHOTOGRAPHY', 'SOCIAL', 'NEWS_AND_MAGAZINES', 'SHOPPING', 'TRAVEL_AND_LOCAL', 'DATING', 'BOOKS_AND_REFERENCE', 'VIDEO_PLAYER',\\\n       'EDUCATION', 'EDUCATION', 'ENTERTAINMENT', 'MAPS_AND_NAVIGATION', 'FOODS_AND_DRINK', 'HOUSE_AND_HOME', 'LIBRARIES_AND_DEMO', 'AUTO_AND_VEHICLES',\\\n       'WHEATHER', 'ART_AND_DESIGN', 'EVENTS', 'COMICS', 'PARENTING', 'BEAUTY']\nsizes = dataplay['Category'].value_counts()\nfig, ax=plt.subplots()\n\npatches, texts = ax.pie(sizes,shadow=True, startangle=90)\n\nlabels = ['{0} - {1:1.2f}'.format(i,j) for i, j in zip(labels,sizes)]\nsort_legend = False\n\nplt.legend(patches, labels, loc= 'best', bbox_to_anchor=(-0.1, 1.), fontsize = 10)\nax.axis('equal')\nfig = plt.gcf()\nfig.set_size_inches(15,15)\nplt.show()","5c511046":"dataplay['Rating'].value_counts()","8659b1ed":"dataplay['Rating'].value_counts().index.tolist() # for labels","f5875cae":"plt.figure(figsize=(20,7))\nsns.countplot(dataplay['Rating'], label = \"Rating\")\nplt.legend(loc= 'best')\nplt.xticks(rotation= -45)\nplt.show()","86f5dd76":"import squarify #for making treemap, we need squarify\nplt.figure(figsize=(20,8))\nlabel = dataplay['Rating'].value_counts().index.tolist()\ncolors = [plt.cm.Spectral(i\/float(len(labels))) for i in range(len(labels))]\nsquarify.plot(sizes = dataplay['Rating'].value_counts(), label = label, color = colors, alpha = 0.8)","5d134cfb":"dataplay['Size'].value_counts() ","bb5b8a4c":"plt.figure(figsize=(20,7))\nplt.hist(dataplay['Size'].value_counts(), bins = len(dataplay['Size'].value_counts()))\nplt.show()","78d4da78":"dataplay['Installs'].value_counts()","bd489284":"plt.figure(figsize=(20,7))\nsns.countplot(dataplay['Installs'], edgecolor = \"#7FFF00\")\nplt.xticks(rotation = -45)\nplt.show()","7fdb5cf7":"dataplay['Price'].value_counts()","bc5a4644":"plt.figure(figsize=(20,7))\nsns.countplot(dataplay['Price'], label= \"price\")\nplt.xticks(rotation=-45)\nplt.show()","7a1573d1":"fig, ax1 = plt.subplots(figsize= (10,7))\nfig.patch.set_facecolor('black') # For background\nplt.rcParams['text.color'] = 'white' # for changing the text color\nlables = dataplay['Price'].value_counts().index.to_list()\nsize = dataplay['Price'].value_counts()\nmy_circle = plt.Circle((0,0), 0.9, color = 'black') # for making the circle\npercent = 100*np.array(size)\/np.array(size).sum() #to show % of every category\n\n#theme = plt.get_cmap('hsv')\n#ax1.set_prop_cycle(\"color\", [theme(1. *i \/ len(size)) for i in range(len(size))])\n\npatches, text = ax1.pie(size) # Making the pie chart\n\nlabels = ['{0} - {1:1.2f}'.format(i,j) for i, j in zip(lables,percent)]\nsort_legend = False\nax1.axis('equal')\n\nplt.legend(patches, labels, loc= 'best', bbox_to_anchor=(-0.1, 1.), fontsize = 10)\np = plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","4f7e9826":"dataplay['Content Rating'].value_counts()","d9695f89":"plt.figure(figsize=(20,7))\nsns.countplot(dataplay['Content Rating'])\nplt.xticks(rotation=-90)\nplt.show()","4bf4e5bb":"fig, ax=plt.subplots()\nplt.rcParams['text.color'] = 'black'\nlabels = dataplay['Content Rating'].value_counts().index.to_list()\nsizes = dataplay['Content Rating'].value_counts()\npercent = 100*np.array(sizes)\/np.array(sizes).sum() #to show % of every category\npatches, texts = ax.pie(sizes, shadow=True, startangle=90)\nlabels = ['{0} - {1:1.2f}%'.format(i,j) for i, j in zip(labels,percent)]\nsort_legend = False\nax1.axis('equal')\n\nplt.legend(patches, labels, loc= 'best', bbox_to_anchor=(-0.1, 1.), fontsize = 10)\nax.axis('equal')\nplt.show()","ef4fe162":"dataplay['Genres'].value_counts()","a1820023":"plt.figure(figsize=(50,8))\nsns.countplot(dataplay['Genres'])\nplt.xticks(rotation = -45)\nplt.show()","0fc8deec":"dataplay['Current Ver'].value_counts()","6dd19d0b":"dataplay['Android Ver'].value_counts()","daffea4e":"plt.figure(figsize=(20,8))\nsns.countplot(dataplay['Android Ver'])\nplt.xticks(rotation = -90)\nplt.show()","3bcc4af4":"sns.boxplot(dataplay['Rating'])","4f2b2594":"# code for changing size\ndef change_sixe(d):\n    if \"M\" in d:\n        d = d.replace(\"M\",\"\")\n        try:\n            d = int(d)*10**6\n            return d\n        except ValueError:\n            d = int(float(d)*10**6)\n            return d\n    elif \"k\" in d:\n        d = d.replace(\"k\",\"\")\n        try:\n            d = int(d)*1000\n            return d\n        except ValueError:\n            d = int(float(d)*1000)\n            return d\n    else:\n        d = 0\n        return d\n# M being changed to 10**6 and k being changed to 1000. First these letters are being replaced by empty character and then the coversation is done\n# Direct coverstion to int cannot happen as as many strings after removal of M or k will be of float type, that's why try-except is used for handling\n# We are having many apps with size value as Varies with device, and for our computation we are taking it to be 0","4ad8a508":"# lets try to apply and get to see if things are going right\ndataplay['Size'] = dataplay['Size'].apply( lambda x: change_sixe(x))","887b9ad4":"dataplay.head()","29eb080a":"# Function to remoce , and + from Installs\ndef remove_plus_and_comma(x):\n    x = x.replace(\",\",\"\")\n    x = x.replace(\"+\",\"\")\n    return int(x)","8b83dc17":"dataplay['Installs'] = dataplay['Installs'].apply(lambda x: remove_plus_and_comma(x))","264998ef":"dataplay.head()","f6d1aed3":"dummy_C = pd.get_dummies(dataplay['Category'])\ndel dummy_C[dummy_C.columns[-1]]#To avoid dummy variable trap\ndataplay = pd.concat([dataplay , dummy_C], axis = 1)","7cbebf43":"dummy_T = pd.get_dummies(dataplay['Type'])\ndel dummy_T[dummy_T.columns[-1]]#To avoid dummy variable trap\ndataplay = pd.concat([dataplay, dummy_T], axis = 1)","bd9f32ec":"dummy_G = pd.get_dummies(dataplay[\"Genres\"])\ndel dummy_G[dummy_G.columns[-1]]#To avoid dummy variable trap\ndataplay = pd.concat([dataplay, dummy_G], axis = 1)","9ba9e622":"dummy = pd.get_dummies(dataplay['Content Rating'])\ndel dummy[dummy.columns[-1]]\ndataplay = pd.concat([dataplay, dummy], axis = 1)","57d2689f":"datamodel = dataplay.drop([\"Category\", \"Type\", \"Content Rating\", \"Genres\", \"App\", \"Last Updated\", \"Current Ver\", \"Android Ver\"], axis =1)","27e09cfe":"datamodel","cbba8ab7":"from sklearn.model_selection import train_test_split","f495c963":"X = datamodel.loc[:, datamodel.columns != \"Rating\"]","7265228c":"y = datamodel['Rating']","6b4aaa15":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 10)","80b4b98f":"from sklearn.linear_model import LinearRegression","3933ca5a":"lr = LinearRegression()","ba3c8371":"model = lr.fit(X_train, y_train)","f39a3ab7":"y_predict = model.predict(X_test)","ff1d1e6c":"y_predict","c20183b2":"predict_dataframe = pd.DataFrame(data={\"Predicted\": y_predict, \"Actual\": y_test})","2ffb6818":"predict_dataframe","09242c75":"predict_dataframe[:20].plot(kind = \"bar\", figsize = (20,8))","cbe0386a":"model.score(X_test, y_test)","f51aca6b":"plt.plot(predict_dataframe[\"Predicted\"][:20], \"*\")\nplt.plot(predict_dataframe['Actual'][:20], \"^\")\nplt.show()","11dd1957":"fig, ax = plt.subplots()\nax.scatter(y_test, y_predict)\nax.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], \"k--\", lw = 4 )\nax.set_xlabel(\"Actual\")\nax.set_ylabel(\"Predicted\")\nplt.show()","03b40de8":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import Ridge","8b6a2202":"ridge = Ridge()","d0d778ac":"parameters = {'alpha': [1e-15, 1e-10, 1e-8, 1e-4, 1e-3,1e-2, 1, 5, 10, 20]}\nridge_regressor = GridSearchCV(ridge, parameters, scoring = 'neg_mean_squared_error', cv =5)","dcfc9d11":"modelR = ridge_regressor.fit(X_train, y_train)","e7fd7190":"y_predict_R = modelR.predict(X_test)","aa9c426b":"rigid_df = pd.DataFrame(data = {\"Predicted\": y_predict_R, \"Actual\": y_test})","dacc6de8":"rigid_df","93b5bb7c":"modelR.score(X_test, y_test)","55b9d7e3":"from sklearn.svm import SVR","819d2dce":"svr = SVR()","a3db682b":"model_svr = svr.fit(X_train, y_train)","e3d2624e":"y_predict_svr = model_svr.predict(X_test)","2526cfef":"svr_df = pd.DataFrame(data = {\"Predicted\": y_predict_svr, \"Actual\": y_test})","2e560612":"svr_df","3e13c51e":"fig, ax = plt.subplots()\nax.scatter(y_test, y_predict_svr)\nax.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], \"k--\", lw = 4 )\nax.set_xlabel(\"Actual\")\nax.set_ylabel(\"Predicted\")\nplt.show()","f346041d":"plt.plot(svr_df[\"Predicted\"][:20], \"*\")\nplt.plot(svr_df['Actual'][:20], \"^\")\nplt.show()","774550df":"model_svr.score(X_test, y_test)","55e0a6a3":"from sklearn.ensemble import RandomForestRegressor","1f688cb4":"rfr = RandomForestRegressor()","fb730d9d":"modef_rfr = rfr.fit(X_train, y_train)","1e70f78f":"y_predict_rfr = modef_rfr.predict(X_test)","037d2039":"rfr_df = pd.DataFrame(data={\"Predicted\": y_predict_rfr, \"Actual\": y_test})","a5e49f49":"rfr_df","d32a18ab":"plt.plot(rfr_df[\"Predicted\"][:20], \"*\")\nplt.plot(rfr_df['Actual'][:20], \"^\")\nplt.show()","cccf0f73":"modef_rfr.score(X_test, y_test)","4d0f30b6":"print(\"Linear Regression Score: \", model.score(X_test, y_test))\nprint(\"Rigid Regression Score: \", modelR.score(X_test, y_test))\nprint(\"Support Vector Regression Score: \", model_svr.score(X_test, y_test))\nprint(\"Random Forest Regressor Score: \", modef_rfr.score(X_test, y_test))","6e31bef4":"We have to do many refining task over here, we need to replace the dollar symbol $, We see that there's a value called 'Everyone', we can treat that \"Everyone\" here means its free as in sense no cost so we will equivalent it to 0, then at last all the strings have to be converted into their numeric values i.e., float64","a71ded2b":"### Let's go for price","5b421f08":"## Size and Installs are gonna be changed into numerical form ","081757e0":"#### 1. Let's explore the Category","2504eed9":"I know its a pretty messed up but still i just wanted to show...","300ef665":"### From both bar plots and treemap, we can see that most of the apps had 4.3 as rating and 1.2 as least","3743fbc6":"## Our task is to predict the rating so this task is a regression task. We will try to use","811c6fa6":"Rating is a numercial column so we will look into boxplot of its so as to get the informations about outliers. Type and Android Ver are Categorical so we will use **MODE** as **Fillna()** for them ","8504a950":"### Lets try Ridge regression","2759f3c3":"### Let's 1st make a copy so that we work on copy and let the main dataset remain intact ","d671d2e0":"### Lets make Random Forest Regresor","404cc823":"Out of 4 models I made, the best socre I got was from Random Forest Regressor and then Linear Regression. The socres might have been different if I had **removed the outliers**. But that's a different story.","64bdeaf3":"## Lets work on our categorical values: Category, Type, Content Rating, Genre","ea69cbc6":"See, we did it...","127e11c9":"This is the end of the notebook guys. I hope it was informative and satisfying. Do give a upvote if you think my work was good enough.","dd545590":"# General Exploration","03ff537e":"## Let's see about Nan values","e2329fdc":"We can see that there's some outliers, so for now in this case using **Median** as way for **Fillna()** is a better choice","716180a5":"For better representation, we will use donut chart","322e3800":"# Model Scores and Conclusion","e0d3b87d":"Lets make a treemap to see this a litte more","3920ac76":"### Genres","9dce9553":"## Hense the popular category is FAMILY","aedd7cca":"### Lets try Support Vector Regression","9a83ebaa":"Let's see the same in the form of a pie chart","12a86821":"### Now we are done with General Exploration, we are gonna make data more good and flexible so that further programming\/ analysis is flexible\n#### This will include categorical variable being changed into sparse form (either by dummy or one hot encoding) or numerical form\n#### Working on the outliers in Rating","a1c2a23d":"We see that most of the apps are free","c1b87710":"### Let's looks what we can retirve from Size","367d63d4":"### Lets explore Genres","99772328":"#### 2. Lets explore Rating","4af76f64":"### Lets explore Price","47559085":"We can replace the values of k and M by their respctive values but let us keep Size as it is for now.","72175d39":"### Category:","217a7316":"### Lets see the Rating again","0eeb84ef":"If you have any question, do ask and I will try to answer to the best of my knowledge. I am still a beginner so I am exploring around so their might be mistakes and will gladly accept it and work upon it.\n\nDo you need continuation of the notebook where i remove the outliers and try to make models again? Do tell you opinion. :) :) <3","d205aac0":"Pie chart representation fo the same","6261281e":"After going through a bunch of stuff like online articles and stuff, I found out that there's always been debate whether to keep the outliers\/ exclude the outliers\n\nAs much as I understood, the main scenario to remove the outliers should be when **It's an expermintal faulty value or a wrong value**. On the other hand outliers may show **something scientifically interesting**\n\nKeeping in 1st point, ratings can't be a wrong value, since a user gives rating because of its UX. So for my analysis, I am not gonna remove the outliers.","674bda77":"Lets split our data","48f9b661":"### lets explore Content Rating","73a395bb":"### Linear Regression, Rigid Regression, Support Vector Regression & Random Forest Regressor","c794eacd":"Using **Mode** for Type and Android Ver","d1c708fa":"# Basic Information Retrival","5c255729":"### We are just gonna see the values of Current Ver & Android Ver*","11f82c31":"### Lets look what we can see and learn from Installs","c629454f":"We get that most apps installed were 1,000,000+","658552b0":"### We can see that most of the apps had versions 4.1 and up","d78cb5ea":"# Feature Engineering","e9b705ff":"### Content Rating","6379ec3f":"### Type","c8b3fa3b":"#### Type, Content Rating and Genre can be converted into dummy\/one hot encode, but will ve done after General Exploration\n#### For now we will convert the Last Updated into date-time format for easy continuing","c2ba4a76":"# Model Making","cafb4fcd":"# Further Enhancing & Corrections or Changes","f61be5d7":"### Let's make the linear model","70ebe375":"### lets see Size","0be03bf3":"# Setting the record right 1st...\n#### record number 10472 is not collected rigth, the values are right shifed, which causes the anamoly. I am gonna rectify it and then we are gonna proceed","e16a493b":"#### Due to mutable error which I wasn't able to tackle with, I will not be using Content Rating as one of the category for model making\n#### Now I will make a new dataset which will have only numeric values which will be used for making models"}}