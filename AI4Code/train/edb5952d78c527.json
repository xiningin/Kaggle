{"cell_type":{"e733fa7d":"code","2cf19435":"code","63fe4fce":"code","9121e50f":"code","062e6f89":"code","5019c6fd":"code","30f04237":"code","1ed5fedf":"code","5764f8d2":"code","95535b94":"code","1c2030b0":"code","cf97e0e2":"code","1794b85d":"code","02ca449c":"code","fa4d2de4":"code","3c9906ac":"code","fc6d0ea4":"code","a7d2d795":"code","c541bdde":"code","687d9a67":"code","73127896":"code","847dfee1":"markdown","134cb36e":"markdown","c68c28ed":"markdown","eb040eb9":"markdown","1be20150":"markdown","3bc20ec6":"markdown","6574394d":"markdown","345dbbd4":"markdown","453f2e24":"markdown","4b0d2f06":"markdown"},"source":{"e733fa7d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in theread-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2cf19435":"def score(hand):\n    new_hand = []\n    for i in hand:\n        if i < 11:\n            new_hand.append(i)\n        else:\n            new_hand.append(10)\n    score = sum(new_hand)\n    return score","63fe4fce":"def stillin(array):\n    if score(array) < 21:\n        if 1 in array and score(array) == 11:\n            return False\n        else:\n            return True\n    return False\n            ","9121e50f":"train = []\n\nfor i in range(1000): ## initialize hands\n    hand = [np.random.randint(1, 14), np.random.randint(1, 14)]\n    while stillin(hand):\n        train.append(hand.copy())\n        hand.append(np.random.randint(1,14))","062e6f89":"len(train)","5019c6fd":"results = []\nfor hand in train:\n    hit = np.random.randint(1,14)\n    if score(hand) + hit > 21:\n        results.append(0)\n    else:\n        results.append(1)","30f04237":"len(results)","1ed5fedf":"maxlen = max([len(i) for i in train])\nfor hand in train:\n    hand += [0] * (maxlen - len(hand))","5764f8d2":"np.shape(train)","95535b94":"import tensorflow as tf\n\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(64, input_shape = (maxlen,), activation = 'relu'))\nmodel.add(tf.keras.layers.Dense(64, activation = 'relu'))\nmodel.add(tf.keras.layers.Dense(1, activation = 'sigmoid'))\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics = ['accuracy'])\n","1c2030b0":"history = model.fit(np.array(train), np.array(results),epochs=50)","cf97e0e2":"!pip install keras-tuner","1794b85d":"import kerastuner as kt\ndef build_model(hp):\n    model = tf.keras.Sequential()\n    hp_units = hp.Int('units', min_value = 16, max_value = 512, step = 16)\n    \n    model.add(tf.keras.layers.Dense(hp_units,activation = 'relu', input_shape = (maxlen,)))\n    model.add(tf.keras.layers.Dense(16, activation = 'relu'))\n    model.add(tf.keras.layers.Dense(1, activation = 'sigmoid'))\n    \n    hp_learning_rate = hp.Choice('learning_rate', values = [1e-3, 1e-4, 1e-5]) \n    \n    model.compile(loss = 'binary_crossentropy', optimizer = tf.keras.optimizers.Adam(hp_learning_rate),\n                  metrics = ['accuracy'])\n    return model","02ca449c":"tuner = kt.Hyperband(build_model,\n                     objective = 'accuracy', \n                     max_epochs = 10,\n                     factor = 3)  ","fa4d2de4":"tuner.search(train, results, epochs = 100, verbose = 2)","3c9906ac":"best_hps = tuner.get_best_hyperparameters(num_trials = 1)[0]\nmodel = tuner.hypermodel.build(best_hps)\nhistory = model.fit(np.array(train), np.array(results),epochs=50, verbose = 2)","fc6d0ea4":"def print_hand(hand):\n    cards = {1: 'A', 2: '2', 3:'3', 4:'4', 5:'5', 6:'6', 7:'7', 8:'8', 9:'9', \n            10:'10', 11:'J', 12:'Q', 13:'K'}\n    print(\"Hand: \", end = \"\")\n    for i in hand:\n        if i > 0:\n            print(cards[i], end= \" \")\n    print(\"\\nScore =\" , score(hand), end = \" \")\n    if 1 in hand:\n        print(\"or\", score(hand) + 10)\n    print(\"\")\n    if score(hand) > 21:\n        print(\"Model lost!\")\n        return False\n    return True","a7d2d795":"hit_dict = {0: \"Pass\", 1:\"Hit\"}\ndef play():\n    hand = [np.random.randint(1,14),np.random.randint(1,14)] + [0] * (maxlen - 2)\n    hit = True\n    while(hit):\n        if (print_hand(hand)):\n            hit = np.round(model.predict([hand]))\n            print(\"Model: \" + hit_dict[hit[0][0]] + \"\\n\")\n            hand[np.count_nonzero(hand)] = np.random.randint(1,14)\n        else:\n            break","c541bdde":"play()","687d9a67":"play()","73127896":"play()","847dfee1":"All the input for Tensorflow has to be the same shape.","134cb36e":"Here, we're training a simple Tensorflow 2 Sequential model with Dense layers to learn to play. For more information, see https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/Sequential?version=nightly","c68c28ed":"Now, we generate the result- whether or not the model should draw a card. I'm doing this by having it \"draw another card\" (adding another number), and seeing it it pushes the score over 21 or not.","eb040eb9":"First, we define a function to calculate the score of the hand. This function assumes Ace counts as 1 (more with that later)","1be20150":"Let's see if we can train a Tensorflow model to play blackjack, a popular card game. For those of you who don't know, these are the rules:\n\n-Each player starts out with 2 cards. In each round, a dealer will offer them a card, and they will say \"hit\" (to take it), or \"pass\". \n\n-The object of the game is to have the sum of your cards as close to 21 as possible, without going over.\n\n-Face cards (jack, queen, king) all count as 10.\n\n-Ace can count as 1 or 11, whichever the player wants.","3bc20ec6":"I'm going to create data to train the model with. Basically, we are generating random hands of cards (here Ace is 1, Jack\/Queen\/King are 11\/12\/13) that are \"still in\" (meaning their score is not over 21).","6574394d":"Now let's play!","345dbbd4":"Now, we can grab the best model and train it.","453f2e24":"If your score is 21 or over, you shouldn't draw any more cards.","4b0d2f06":"We can also use the KerasTuner to help us find the optimal parameters for our model. For more information, visit: https:\/\/www.tensorflow.org\/tutorials\/keras\/keras_tuner"}}