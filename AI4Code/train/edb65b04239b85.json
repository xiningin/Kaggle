{"cell_type":{"7288fcb1":"code","4c559bf1":"code","f113a63b":"code","c4716cf9":"code","cb3817dc":"code","7b49df97":"code","b3cc8852":"code","fa9fcf30":"code","8c4574f9":"code","0d9debd8":"code","01e90ace":"code","38b29d83":"code","53d777c2":"code","37608bc7":"code","ca6d2d52":"code","d86e4a16":"code","630d420a":"code","97ba7496":"code","65dcce5c":"markdown","b1d9b4de":"markdown","8e4ab182":"markdown","9aaad7c9":"markdown","85006e2f":"markdown","5e3a9039":"markdown","ce441e88":"markdown"},"source":{"7288fcb1":"#import all the necessary libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n","4c559bf1":"data = '..\/input\/brain-mri-images-for-brain-tumor-detection\/'\nNo_brain_tumor = '..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/'\nYes_brain_tumor = '..\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/'","f113a63b":"import os\n\ndir_list = [No_brain_tumor, Yes_brain_tumor]\nclasses = ['No', 'Yes']\nfilepaths = []\nlabels = []\n\nfor i,j in zip(dir_list, classes):\n    filelist = os.listdir(i)\n    for name in filelist:\n        filepath = os.path.join(i, name)\n        filepaths.append(filepath)\n        labels.append(j)\n        \nprint('filepaths:', len(filepaths), 'labels:', len(labels))","c4716cf9":"file_content=pd.Series(filepaths, name='filepaths')\nlabel_content=pd.Series(labels, name='labels')\ndf=pd.concat([file_content,label_content], axis=1)\ndf=pd.DataFrame(np.array(df).reshape(253,2), columns = ['filepaths', 'labels'])\ndf.head()","cb3817dc":"print(df['labels'].value_counts())","7b49df97":"#visualize brain tumor images\nimport cv2\n\nplt.figure(figsize=(10,8))\nfor i in range(15):\n    random = np.random.randint(1,len(df))\n    plt.subplot(3,5,i+1)\n    plt.imshow(cv2.imread(df.loc[random,\"filepaths\"]))\n    plt.title(df.loc[random, \"labels\"], size = 15, color = \"white\") \n    plt.xticks([])\n    plt.yticks([])\n    \nplt.show()\n","b3cc8852":"from sklearn.model_selection import train_test_split\n\nx_train, x_test = train_test_split(df, test_size=0.2, random_state=42)\nx_train, x_val = train_test_split(x_train, test_size=0.2, random_state=42)\n\nprint(f\"train set shape: {x_train.shape}\")\nprint(f\"test set shape: {x_test.shape}\")\nprint(f\"validation set shape: {x_val.shape}\")","fa9fcf30":"from keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255.,\n                                   rotation_range = 40,\n                                   width_shift_range = 0.2,\n                                   height_shift_range = 0.2, \n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True,\n                                   fill_mode ='nearest')\n\nvalidation_datagen = ImageDataGenerator(rescale = 1.0\/255.0)\n\ntest_datagen = ImageDataGenerator(rescale = 1.0\/255.)","8c4574f9":"train_generator = train_datagen.flow_from_dataframe(dataframe = x_train,\n                                                   x_col = 'filepaths',\n                                                   y_col = 'labels',\n                                                   target_size=(150,150),\n                                                   class_mode='binary',\n                                                   batch_size=16)\n\nvalidation_generator = validation_datagen.flow_from_dataframe(dataframe = x_val,\n                                                             x_col = 'filepaths',\n                                                             y_col = 'labels',\n                                                             target_size = (150,150),\n                                                             class_mode='binary',\n                                                             batch_size=8)\n\ntest_generator = test_datagen.flow_from_dataframe(dataframe = x_test,\n                                                  x_col = 'filepaths',\n                                                  y_col = 'labels',\n                                                  target_size = (150,150),\n                                                  class_mode='binary',\n                                                  batch_size=8)","0d9debd8":"base_model = tf.keras.applications.InceptionResNetV2(weights='imagenet', \n                                                     input_shape = (150,150,3),\n                                                     include_top=False)\n\n\nmodel = tf.keras.models.Sequential()\nmodel.add(base_model)\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(1024, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))","01e90ace":"model.summary()","38b29d83":"from tensorflow.keras.optimizers import Adam\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=Adam(learning_rate = 0.0001), metrics=['accuracy'])\n","53d777c2":"history = model.fit(train_generator,\n                   epochs=30,\n                   steps_per_epoch=10,\n                   validation_data = validation_generator,\n                   validation_steps=6,\n                   verbose=1)","37608bc7":"accuracy = history.history['accuracy']\nval_accuracy  = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(15,10))\n\nplt.subplot(2, 2, 1)\nplt.plot(accuracy, label = \"Training accuracy\")\nplt.plot(val_accuracy, label=\"Validation accuracy\")\nplt.legend()\nplt.title(\"Training vs validation accuracy\")\n\n\nplt.subplot(2,2,2)\nplt.plot(loss, label = \"Training loss\")\nplt.plot(val_loss, label=\"Validation loss\")\nplt.legend()\nplt.title(\"Training vs validation loss\")\n\nplt.show()","ca6d2d52":"test_accuracy = model.evaluate(test_generator)[1]","d86e4a16":"print(test_accuracy\n     )","630d420a":"pred = model.predict(test_generator)\npred = np.argmax(pred, axis=1)\nlabels = train_generator.class_indices\nlabels = dict((v,k) for k,v in labels.items())\ny_pred = [labels[k] for k in pred]","97ba7496":"from sklearn.metrics import classification_report, confusion_matrix\nprint(\"\\n The Classification report is \\n\")\nprint(classification_report(x_test.labels, y_pred))\nprint(\"\\n The Confusion Matrix is \\n\")\nprint(confusion_matrix(x_test.labels, y_pred))","65dcce5c":"**Accuracy of 92% has been achieved.**","b1d9b4de":"# # # Visualize the data","8e4ab182":"# # # Data Augumentation","9aaad7c9":"# # #Read the Data ","85006e2f":"# # # Split the data","5e3a9039":"Lets do the transfer learning from the known model.\n\n\nLets use the InceptionResNetv2 for the baseconvolution.\n","ce441e88":"# # # Modelling"}}