{"cell_type":{"50c34db2":"code","dd86935e":"code","c30aa2d9":"code","1253026b":"code","5b0a1551":"code","af25c02f":"code","a24fb734":"code","7b2c2ada":"code","efd9bcfd":"code","4a67d0c3":"code","aac96da8":"code","26afde9e":"code","f686d736":"code","4290082d":"code","8f969972":"markdown","027f7973":"markdown","ca38cb20":"markdown","55124119":"markdown"},"source":{"50c34db2":"%matplotlib inline\nimport time\nfrom PIL import Image\nfrom io import BytesIO\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport torch\nimport torch.optim as optim\nimport requests\nfrom torchvision import transforms, models","dd86935e":"# getting the \"features\" portion of VGG19\n# vgg19.classifier contains the 3 fc layers that are not needed\nvgg = models.vgg19(pretrained=True).features\n\n\nfor param in vgg.parameters():\n    param.requires_grad_(False)","c30aa2d9":"# move the model to GPU, if available\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nvgg.to(device)","1253026b":"def load_image(img_path, max_size=400, shape=None):\n    ''' Load in and transform an image, making sure the image\n       is <= 400 pixels in the x-y dims.'''\n    if \"http\" in img_path:\n        response = requests.get(img_path)\n        image = Image.open(BytesIO(response.content)).convert('RGB')\n    else:\n        image = Image.open(img_path).convert('RGB')\n    \n    if max(image.size) > max_size:\n        size = max_size\n    else:\n        size = max(image.size)\n    \n    if shape is not None:\n        size = shape\n        \n    in_transform = transforms.Compose([\n                        transforms.Resize(size),\n                        transforms.ToTensor(),\n                        transforms.Normalize((0.485, 0.456, 0.406), \n                                             (0.229, 0.224, 0.225))])\n\n    # discard the transparent, alpha channel (that's the :3) and add the batch dimension\n    image = in_transform(image)[:3,:,:].unsqueeze(0)\n    \n    return image","5b0a1551":"#https:\/\/i.postimg.cc\/rpp5TH70\/janelle.png (content)\n#https:\/\/images.unsplash.com\/photo-1566378246598-5b11a0d486cc(style)\ncontent = load_image('https:\/\/images.unsplash.com\/photo-1573600073955-f15b3b6caab7').to(device)\nstyle = load_image('https:\/\/images.unsplash.com\/photo-1482160549825-59d1b23cb208', shape=content.shape[-2:]).to(device)","af25c02f":"# helper function for un-normalizing an image \n# and converting it from a Tensor image to a NumPy image for display\ndef im_convert(tensor):\n    \"\"\" Display a tensor as an image. \"\"\"\n    \n    image = tensor.to(\"cpu\").clone().detach()\n    image = image.numpy().squeeze()\n    image = image.transpose(1,2,0)\n    image = image * np.array((0.229, 0.224, 0.225)) + np.array((0.485, 0.456, 0.406))\n    image = image.clip(0, 1)\n\n    return image","a24fb734":"# display the images\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nax1.imshow(im_convert(content))\nax2.imshow(im_convert(style))","7b2c2ada":"print(vgg)","efd9bcfd":"def get_features(image, model, layers=None):\n    \"\"\" Run an image forward through a model and get the features for \n        a set of layers. Default layers are for VGGNet matching Gatys et al (2016)\n    \"\"\"\n  \n    if layers is None:\n        layers = {\n            '0': 'conv1_1',\n            '5': 'conv2_1',\n            '10': 'conv3_1',\n            '19': 'conv4_1',\n            '21': 'conv4_2', # content representation\n            '28': 'conv5_1',\n            }\n        \n        \n\n    features = {}\n    x = image\n\n    for name, layer in model._modules.items():\n        x = layer(x) # passing through every layer is necessary, because the O\/P of each layer depend on the O\/P of previous layers\n        if name in layers:\n            features[layers[name]] = x\n            \n    return features","4a67d0c3":"def gram_matrix(tensor):\n    \"\"\" Calculate the Gram Matrix of a given tensor \n    \"\"\"\n    \n    b,d,h,w = tensor.size()\n    tensor = tensor.view(d, h*w)\n    gram = torch.mm(tensor, tensor.t())\n    \n    return gram ","aac96da8":"content_features = get_features(content, vgg)\nstyle_features = get_features(style, vgg)\n\nstyle_grams = {layer: gram_matrix(style_features[layer]) for layer in style_features}\n\ntarget = content.clone().requires_grad_(True).to(device)","26afde9e":"# weights for each style layer \n# excluding `conv4_2` our content representation\nstyle_weights = {'conv1_1': 1.,\n                 'conv2_1': 0.8,\n                 'conv3_1': 0.5,\n                 'conv4_1': 0.3,\n                 'conv5_1': 0.1}\n\n\ncontent_weight = 1  # alpha\nstyle_weight = 1e8  # beta","f686d736":"start = time.time()\nshow_every = 400\n\noptimizer = optim.Adam([target], lr=0.003)\nsteps = 3000  \n\nfor ii in range(1, steps+1):\n    \n\n    target_features = get_features(target, vgg)\n    content_loss = torch.mean((target_features['conv4_2'] - content_features['conv4_2'])**2)\n    \n    style_loss = 0\n    for layer in style_weights:\n        target_feature = target_features[layer]\n        _, d, h, w = target_feature.shape\n        \n        target_gram = gram_matrix(target_feature)\n        \n        style_gram = style_grams[layer]\n        layer_style_loss = style_weights[layer] * torch.mean((target_gram - style_gram)**2)\n        \n        style_loss += layer_style_loss \/ (d * h * w)\n        \n        \n    total_loss = style_weight*style_loss + content_weight*content_loss\n    \n\n    optimizer.zero_grad()\n    total_loss.backward()\n    optimizer.step()\n    \n    if  ii % show_every == 0:\n        print('Total loss: ', total_loss.item())\n        plt.imshow(im_convert(target))\n        plt.show()\n        print(f\"Finishing {ii} epoch in: {round(((time.time() - start)\/60),2)} minutes\")\n\nprint(f\"completed in {round(((time.time() - start)\/60),2)} minutes\")","4290082d":"# display content and final, target image\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nax1.imshow(im_convert(content))\nax2.imshow(im_convert(target))","8f969972":"## Gram Matrix\nThis is used to calculate the style representation from the correlation between feature maps in a convolutional layer\n<p float=\"left\">\n  <img src=\"https:\/\/i.postimg.cc\/MHDQw105\/Screenshot-2021-09-26-at-10-46-26-AM.png\" width=\"600\" \/> \n  <img src=\"https:\/\/i.postimg.cc\/fLYdHGJ6\/Screenshot-2021-09-26-at-10-47-32-AM.png\" width=\"600\" \/>\n<\/p>","027f7973":"## Display the Target Image","ca38cb20":"## Implementing Style Transfer using VGG-19 Convolutional Neural Network","55124119":"<img src=\"https:\/\/i.postimg.cc\/fLDpyNnK\/vgg19-convlayers.png\"> <\/img>"}}