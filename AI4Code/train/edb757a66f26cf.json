{"cell_type":{"12bca07d":"code","518e8c05":"code","92cd27d3":"code","fae4059c":"code","343ced5c":"code","d010b53a":"code","4016b3c8":"code","0b680c6d":"code","33058944":"code","f73cd0da":"code","8e8d9a98":"code","acd1de1e":"code","1a1a8395":"code","47551027":"code","ee2ed054":"code","a6d17260":"code","856da3d7":"code","bb6ac261":"code","b920a07d":"code","cb64cfe1":"code","9a143a93":"code","015302f8":"code","df7b484a":"code","9dc19a20":"code","0efc7f52":"code","23fadd42":"code","c2e34deb":"code","ce5cf8d9":"code","69743116":"code","e66fb1dd":"code","d083de17":"code","b80fbe01":"code","2dbfa473":"code","0ef7b013":"code","67dcc4ad":"code","3bc060b8":"code","152ee013":"code","abd13562":"code","7db29382":"code","fd15278b":"code","2ec7f43a":"code","3f7d24f1":"code","9dc0b6ac":"code","e30c7968":"code","78f1c4b0":"code","6a88ebb5":"code","bc12c1d9":"code","6d161b01":"code","bfb8fd2b":"code","6ac8f326":"code","cf3d38f9":"code","b5d6944f":"code","a6f35898":"code","d2175a50":"code","9218a6ce":"code","55fc69eb":"code","fa0cf06d":"code","285b7e95":"code","a6e2a74f":"code","0dea6933":"code","0b2e1b2a":"code","edb6c8e5":"code","56028d13":"code","609c45f4":"code","4b7b7c37":"code","f7dea8b2":"code","813d4c9e":"code","82f296f6":"code","5abd7240":"code","a4877497":"code","4c3e97b4":"code","5da2271b":"code","eb00e463":"code","8cb83da3":"code","cbb717a5":"code","3bfec2b5":"code","6f4c00c0":"markdown","6ce88dc1":"markdown","f4bde922":"markdown","e784645b":"markdown","01d99936":"markdown","9eeac0dd":"markdown","d6c0f953":"markdown","be763fe4":"markdown","da81634c":"markdown","3e754691":"markdown","0a55293c":"markdown","0a19ecc3":"markdown","580679be":"markdown","1c09a85e":"markdown","381c5e27":"markdown","717b42a3":"markdown","ce510a4a":"markdown","14cbcaa0":"markdown","1ac549cb":"markdown","f57de5e2":"markdown","56ebf77e":"markdown","34265607":"markdown","30f7a7db":"markdown","629b2fd6":"markdown","5089dee2":"markdown","a5ab6e6f":"markdown","267db9f2":"markdown","4216b769":"markdown","ad227edb":"markdown","57e51571":"markdown","aa61f9ca":"markdown","a0ca6577":"markdown","2e1878b1":"markdown","f704da58":"markdown","5a0ce103":"markdown","35dada0c":"markdown","3a9180e0":"markdown","cb70449e":"markdown","8c8ba2c1":"markdown","935aac48":"markdown","e6f853a4":"markdown","ba6288c3":"markdown","dd8e7d49":"markdown","b95c3b81":"markdown","df0e6158":"markdown","321ea61a":"markdown","b449a7b2":"markdown","4155f1a9":"markdown","f7674a54":"markdown","aff54114":"markdown","02887fd1":"markdown","aa24d448":"markdown","5e374903":"markdown","9823f92e":"markdown","0bfd1842":"markdown","272e531f":"markdown","46fe87de":"markdown"},"source":{"12bca07d":"from __future__ import division\n\nfrom datetime import datetime, timedelta,date\nimport pandas as pd\n%matplotlib inline\nfrom sklearn.metrics import classification_report,confusion_matrix\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.cluster import KMeans","518e8c05":"import plotly as py\nimport plotly.offline as pyoff\nimport plotly.graph_objs as go","92cd27d3":"import xgboost as xgb\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split","fae4059c":"pyoff.init_notebook_mode()","343ced5c":"df_data = pd.read_csv('..\/input\/churn-prediction\/Churn.csv')","d010b53a":"df_data.head(2)","4016b3c8":"df_data.info()","0b680c6d":"df_data.loc[df_data.Churn=='No','Churn'] = 0 \ndf_data.loc[df_data.Churn=='Yes','Churn'] = 1","33058944":"df_data.groupby('gender').Churn.mean()","f73cd0da":"df_plot = df_data.groupby('gender').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['gender'],\n        y=df_plot['Churn'],\n        width = [0.5, 0.5],\n        marker=dict(\n        color=['green', 'blue'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        yaxis={\"title\": \"Churn Rate\"},\n        title='Gender',\n        plot_bgcolor  = 'rgb(243,243,243)',\n        paper_bgcolor  = 'rgb(243,243,243)',\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","8e8d9a98":"df_plot = df_data.groupby('Partner').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['Partner'],\n        y=df_plot['Churn'],\n        width = [0.5, 0.5],\n        marker=dict(\n        color=['green', 'blue'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        yaxis={\"title\": \"Churn Rate\"},\n        title='Partner',\n        plot_bgcolor  = 'rgb(243,243,243)',\n        paper_bgcolor  = 'rgb(243,243,243)',\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","acd1de1e":"df_plot = df_data.groupby('PhoneService').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['PhoneService'],\n        y=df_plot['Churn'],\n        width = [0.5, 0.5],\n        marker=dict(\n        color=['green', 'blue'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        yaxis={\"title\": \"Churn Rate\"},\n        title='Phone Service',\n        plot_bgcolor  = 'rgb(243,243,243)',\n        paper_bgcolor  = 'rgb(243,243,243)',\n        \n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","1a1a8395":"df_plot = df_data.groupby('MultipleLines').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['MultipleLines'],\n        y=df_plot['Churn'],\n        width = [0.5, 0.5, 0.5],\n        marker=dict(\n        color=['green', 'blue', 'orange'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        title='Multiple Lines',\n        yaxis={\"title\": \"Churn Rate\"},\n        plot_bgcolor  = 'rgb(243,243,243)',\n        paper_bgcolor  = 'rgb(243,243,243)',\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","47551027":"df_plot = df_data.groupby('InternetService').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['InternetService'],\n        y=df_plot['Churn'],\n        width = [0.5, 0.5, 0.5],\n        marker=dict(\n        color=['green', 'blue', 'orange'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        title='Internet Service',\n        yaxis={\"title\": \"Churn Rate\"},\n        plot_bgcolor  = 'rgb(243,243,243)',\n        paper_bgcolor  = 'rgb(243,243,243)',\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","ee2ed054":"df_plot = df_data.groupby('OnlineSecurity').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['OnlineSecurity'],\n        y=df_plot['Churn'],\n        width = [0.5, 0.5, 0.5],\n        marker=dict(\n        color=['green', 'blue', 'orange'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        yaxis={\"title\": \"Churn Rate\"},\n        title='Online Security',\n        plot_bgcolor  = \"rgb(243,243,243)\",\n        paper_bgcolor  = \"rgb(243,243,243)\",\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","a6d17260":"df_plot = df_data.groupby('OnlineBackup').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['OnlineBackup'],\n        y=df_plot['Churn'],\n        width = [0.5, 0.5, 0.5],\n        marker=dict(\n        color=['green', 'blue', 'orange'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        title='Online Backup',\n        plot_bgcolor  = \"rgb(243,243,243)\",\n        paper_bgcolor  = \"rgb(243,243,243)\",\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","856da3d7":"df_plot = df_data.groupby('DeviceProtection').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['DeviceProtection'],\n        y=df_plot['Churn'],\n        width = [0.5, 0.5, 0.5],\n        marker=dict(\n        color=['green', 'blue', 'orange'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        title='Device Protection',\n        plot_bgcolor  = \"rgb(243,243,243)\",\n        paper_bgcolor  = \"rgb(243,243,243)\",\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","bb6ac261":"df_plot = df_data.groupby('TechSupport').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['TechSupport'],\n        y=df_plot['Churn'],\n        marker=dict(\n        color=['green', 'blue', 'orange'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        title='Tech Support'    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","b920a07d":"df_plot = df_data.groupby('StreamingTV').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['StreamingTV'],\n        y=df_plot['Churn'],\n        marker=dict(\n        color=['green', 'blue', 'orange'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        title='Streaming TV',\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","cb64cfe1":"df_plot = df_data.groupby('StreamingMovies').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['StreamingMovies'],\n        y=df_plot['Churn'],\n        marker=dict(\n        color=['green', 'blue', 'orange'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        title='Streaming Movies'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","9a143a93":"df_plot = df_data.groupby('Contract').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['Contract'],\n        y=df_plot['Churn'],\n        marker=dict(\n        color=['green', 'blue', 'orange'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        title='Contract'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","015302f8":"df_plot = df_data.groupby('PaperlessBilling').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['PaperlessBilling'],\n        y=df_plot['Churn'],\n        marker=dict(\n        color=['green', 'blue', 'orange'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        title='Paperless Billing'    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","df7b484a":"df_plot = df_data.groupby('PaymentMethod').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['PaymentMethod'],\n        y=df_plot['Churn'],\n        marker=dict(\n        color=['green', 'blue', 'orange','red'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        title='Payment Method'    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","9dc19a20":"df_data.head(2)","0efc7f52":"df_data.tenure.describe()","23fadd42":"df_plot = df_data.groupby('tenure').Churn.mean().reset_index()\n\nplot_data = [\n    go.Scatter(\n        x=df_plot['tenure'],\n        y=df_plot['Churn'],\n        mode='markers',\n        name='Low',\n        marker= dict(size= 7,\n            line= dict(width=1),\n            color= 'blue',\n            opacity= 0.8\n           ),\n    )\n]\n\nplot_layout = go.Layout(\n        yaxis= {'title': \"Churn Rate\"},\n        xaxis= {'title': \"Tenure\"},\n        title='Tenure based Churn rate',\n        plot_bgcolor  = \"rgb(243,243,243)\",\n        paper_bgcolor  = \"rgb(243,243,243)\",\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","c2e34deb":"df_plot = df_data.groupby('MonthlyCharges').Churn.mean().reset_index()\n\nplot_data = [\n    go.Scatter(\n        x=df_plot['MonthlyCharges'],\n        y=df_plot['Churn'],\n        mode='markers',\n        name='Low',\n        marker= dict(size= 7,\n            line= dict(width=1),\n            color= 'blue',\n            opacity= 0.8\n           ),\n    )\n]\n\nplot_layout = go.Layout(\n        yaxis= {'title': \"Churn Rate\"},\n        xaxis= {'title': \"Monthly Charges\"},\n        title='Monthly Charges based Churn rate'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","ce5cf8d9":"df_plot = df_data.groupby('TotalCharges').Churn.mean().reset_index()\n\nplot_data = [\n    go.Scatter(\n        x=df_plot['TotalCharges'],\n        y=df_plot['Churn'],\n        mode='markers',\n        name='Low',\n        marker= dict(size= 7,\n            line= dict(width=1),\n            color= 'blue',\n            opacity= 0.8\n           ),\n    )\n]\n\nplot_layout = go.Layout(\n        yaxis= {'title': \"Churn Rate\"},\n        xaxis= {'title': \"Total Charges\"},\n        title='Total Charges based Churn rate'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","69743116":"#Elbow mthod to find out optimum number of clusters in K-Means\nsse={}\ndf_cluster = df_data[['tenure']]\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(df_cluster)\n    df_cluster[\"clusters\"] = kmeans.labels_\n    sse[k] = kmeans.inertia_ \nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.show()","e66fb1dd":"kmeans = KMeans(n_clusters=3)\ndf_data['TenureCluster'] = kmeans.fit_predict(df_data[['tenure']])","d083de17":"df_data.groupby('TenureCluster')['tenure'].describe()","b80fbe01":"def order_cluster(cluster_field_name, target_field_name,df,ascending):\n    new_cluster_field_name = 'new_' + cluster_field_name\n    df_new = df.groupby(cluster_field_name)[target_field_name].mean().reset_index()\n    df_new = df_new.sort_values(by=target_field_name,ascending=ascending).reset_index(drop=True)\n    df_new['index'] = df_new.index\n    df_final = pd.merge(df,df_new[[cluster_field_name,'index']], on=cluster_field_name)\n    df_final = df_final.drop([cluster_field_name],axis=1)\n    df_final = df_final.rename(columns={\"index\":cluster_field_name})\n    return df_final","2dbfa473":"df_data = order_cluster('TenureCluster', 'tenure',df_data,True)","0ef7b013":"df_data.groupby('TenureCluster').tenure.describe()","67dcc4ad":"df_data['TenureCluster'] = df_data[\"TenureCluster\"].replace({0:'Low',1:'Mid',2:'High'})","3bc060b8":"df_plot = df_data.groupby('TenureCluster').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['TenureCluster'],\n        y=df_plot['Churn'],\n        marker=dict(\n        color=['green', 'blue', 'orange','red'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\",\"categoryarray\":['Low','Mid','High']},\n        title='Tenure Cluster vs Churn Rate'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","152ee013":"sse={}\ndf_cluster = df_data[['MonthlyCharges']]\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(df_cluster)\n    df_cluster[\"clusters\"] = kmeans.labels_\n    sse[k] = kmeans.inertia_ \nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.show()","abd13562":"kmeans = KMeans(n_clusters=3)\ndf_data['MonthlyChargeCluster'] = kmeans.fit_predict(df_data[['MonthlyCharges']])","7db29382":"df_data = order_cluster('MonthlyChargeCluster', 'MonthlyCharges',df_data,True)","fd15278b":"df_data.groupby('MonthlyChargeCluster').MonthlyCharges.describe()","2ec7f43a":"df_data['MonthlyChargeCluster'] = df_data[\"MonthlyChargeCluster\"].replace({0:'Low',1:'Mid',2:'High'})","3f7d24f1":"df_plot = df_data.groupby('MonthlyChargeCluster').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['MonthlyChargeCluster'],\n        y=df_plot['Churn'],\n        width = [0.5, 0.5, 0.5],\n        marker=dict(\n        color=['green', 'blue', 'orange'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\",\"categoryarray\":['Low','Mid','High']},\n        title='Monthly Charge Cluster vs Churn Rate',\n        plot_bgcolor  = \"rgb(243,243,243)\",\n        paper_bgcolor  = \"rgb(243,243,243)\",\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","9dc0b6ac":"df_data.head(2)","e30c7968":"df_data['TotalCharges'].describe()","78f1c4b0":"#Trying to run K-Means is giving an error, convert string to float, hence checking for null values first.\ndf_data[pd.to_numeric(df_data['TotalCharges'], errors='coerce').isnull()]","6a88ebb5":"len(df_data[pd.to_numeric(df_data['TotalCharges'], errors='coerce').isnull()])","bc12c1d9":"#Convert rows with blank value for Total Charges as NAN columns\ndf_data.loc[pd.to_numeric(df_data['TotalCharges'], errors='coerce').isnull(),'TotalCharges'] = np.nan","6d161b01":"df_data = df_data.dropna()","bfb8fd2b":"df_data['TotalCharges'] = pd.to_numeric(df_data['TotalCharges'], errors='coerce')","6ac8f326":"#Elbow method to determine number of clusters for K-Means\nsse={}\ndf_cluster = df_data[['TotalCharges']]\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(df_cluster)\n    df_cluster[\"clusters\"] = kmeans.labels_\n    sse[k] = kmeans.inertia_ \nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.show()","cf3d38f9":"kmeans = KMeans(n_clusters=3)\ndf_data['TotalChargeCluster'] = kmeans.fit_predict(df_data[['TotalCharges']])","b5d6944f":"df_data = order_cluster('TotalChargeCluster', 'TotalCharges',df_data,True)","a6f35898":"df_data.groupby('TotalChargeCluster').TotalCharges.describe()","d2175a50":"df_data['TotalChargeCluster'] = df_data[\"TotalChargeCluster\"].replace({0:'Low',1:'Mid',2:'High'})","9218a6ce":"df_plot = df_data.groupby('TotalChargeCluster').Churn.mean().reset_index()\nplot_data = [\n    go.Bar(\n        x=df_plot['TotalChargeCluster'],\n        y=df_plot['Churn'],\n        width = [0.5, 0.5, 0.5],\n        marker=dict(\n        color=['green', 'blue', 'orange'])\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\",\"categoryarray\":['Low','Mid','High']},\n        title='Total Charge Cluster vs Churn Rate',\n        plot_bgcolor  = \"rgb(243,243,243)\",\n        paper_bgcolor  = \"rgb(243,243,243)\",\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","55fc69eb":"df_data.info()","fa0cf06d":"#import Label Encoder\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndummy_columns = [] #array for multiple value columns\n\nfor column in df_data.columns:\n    if df_data[column].dtype == object and column != 'customerID':\n        if df_data[column].nunique() == 2:\n            #apply Label Encoder for binary ones\n            df_data[column] = le.fit_transform(df_data[column]) \n        else:\n            dummy_columns.append(column)\n\n#apply get dummies for selected columns\ndf_data = pd.get_dummies(data = df_data,columns = dummy_columns) ","285b7e95":"df_data.head()","a6e2a74f":"df_data.columns","0dea6933":"all_columns = []\nfor column in df_data.columns:\n    column = column.replace(\" \", \"_\").replace(\"(\", \"_\").replace(\")\", \"_\").replace(\"-\", \"_\")\n    all_columns.append(column)\n\ndf_data.columns = all_columns","0b2e1b2a":"df_data.columns","edb6c8e5":"#create feature set and labels\nX = df_data.drop(['Churn','customerID'],axis=1)\ny = df_data.Churn","56028d13":"#train and test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.05, random_state=56)","609c45f4":"#building the model\nxgb_model = xgb.XGBClassifier(max_depth=5, learning_rate=0.08, n_jobs=-1).fit(X_train, y_train)\n\nprint('Accuracy of XGB classifier on training set: {:.2f}'\n       .format(xgb_model.score(X_train, y_train)))\nprint('Accuracy of XGB classifier on test set: {:.2f}'\n       .format(xgb_model.score(X_test, y_test)))","4b7b7c37":"y_pred = xgb_model.predict(X_test)","f7dea8b2":"print(classification_report(y_test, y_pred))","813d4c9e":"from xgboost import plot_importance","82f296f6":"fig, ax = plt.subplots(figsize=(10,8))\nplot_importance(xgb_model, ax=ax)","5abd7240":"df_data['proba'] = xgb_model.predict_proba(df_data[X_train.columns])[:,1]","a4877497":"df_data[['customerID', 'proba']].head()","4c3e97b4":"from numpy import sort\nfrom sklearn.feature_selection import SelectFromModel\n\nthresholds = sort(xgb_model.feature_importances_)","5da2271b":"feature_imp = pd.DataFrame(sorted(zip(xgb_model.feature_importances_, X_train.columns)), columns=['Value','Feature'])\nfeatures_df = feature_imp.sort_values(by=\"Value\", ascending=False)\nselected_features = list(features_df[features_df['Value']>=0.01]['Feature'])\nprint('The no. of features selected:',len(selected_features))","eb00e463":"selected_features","8cb83da3":"features_df.head()","cbb717a5":"X_train_selected=X_train[selected_features]\nX_test_selected=X_test[selected_features]\n","3bfec2b5":"#building the model\nxgb_model = xgb.XGBClassifier(max_depth=5, learning_rate=0.08, n_jobs=-1).fit(X_train_selected, y_train)\n\nprint('Accuracy of XGB classifier on training set: {:.2f}'\n       .format(xgb_model.score(X_train_selected, y_train)))\nprint('Accuracy of XGB classifier on test set: {:.2f}'\n       .format(xgb_model.score(X_test_selected, y_test)))","6f4c00c0":"People with shorter contracts churn more","6ce88dc1":"- <a href='#1'>1. Reading data and importing files <\/a>  \n- <a href='#2'>2. Visualisation of Categorical variables<\/a>\n   - <a href='#2.1'>2.1. Relationship between gender and churn<\/a>\n   - <a href='#2.2'>2.2. Relationship between partner and churn<\/a>\n   - <a href='#2.3'>2.3. Relationship between opting for Phone service and churn<\/a>\n   - <a href='#2.4'>2.4. Relationship between opting for multiple lines and churn<\/a>\n   - <a href='#2.5'>2.5. Relationship between opting for Internet service and churn<\/a>\n   - <a href='#2.6'>2.6. Relationship between opting for Online security and churn<\/a>\n   - <a href='#2.7'>2.7. Relationship between opting for Online backup and churn<\/a>\n   - <a href='#2.8'>2.8. Relationship between opting for device protection and churn<\/a>\n   - <a href='#2.9'>2.9. Relationship between opting for Tech support and churn<\/a>\n   - <a href='#2.10'>2.10. Relationship between opting for Streaming TV and churn<\/a>\n   - <a href='#2.11'>2.11. Relationship between opting for Streaming Movies and churn<\/a>\n   - <a href='#2.12'>2.12. Relationship between Type of Contract and churn<\/a>\n- <a href='#3'>3. Visualisation of Numerical variables<\/a>\n   - <a href='#3.1'>3.1. Visualisation of relationship between tenure and churn rate<\/a>\n   - <a href='#3.2'>3.2. Visualisation of relationship between Monthly charges and churn rate<\/a>\n   - <a href='#3.3'>3.3. Visualisation of relationship between Total charges and churn rate<\/a>\n- <a href='#4'> 4. Clusters based on numerical variables and visualisation  <\/a>\n   - <a href='#4.1'>4.1. Clusters based on tenure <\/a>\n   - <a href='#4.2'>4.2. Clusters based on Monthly Charges <\/a>\n   - <a href='#4.3'>4.3. Clusters based on Total Charges <\/a>\n- <a href='#5'>5. Treatment of categorical variables <\/a>\n- <a href='#6'>6. Machine Learning model for churn rate prediction  <\/a>\n   - <a href='#6.1'>6.1. Machine Learning model on selected features <\/a>","f4bde922":"A person opting for multiple lines is likely to churn more ","e784645b":"<a id='3.1'><h2> 3.1. Visualisation of relationship between tenure and churn rate<\/h2><\/a>","01d99936":"<a id='3.3'><h3>3.3. Visualisation of Relationship between Total Charges and churn rate <\/h3><\/a>","9eeac0dd":"When Monthly charge is low, churn is low, when monthly charge is high, churn is high.  ","d6c0f953":"<h2> Churn Rate Prediction <\/h2>\n\nRetention Rate is one of the most critical metrics. It is an indication of how good is your product market fit (PMF). If your PMF is not satisfactory, you should see your customers churning very soon. One of the powerful tools to improve Retention Rate (hence the PMF) is Churn Prediction. This will make you understand which customers are liekly to stay on the system and who are likely to leave, so that you can take necessary steps to retain the customers likely to churn.\n\n<h3> Brief Overview of the project <\/h3>\n\nFirst we shall visualise the dataset and the relationship between churn and various variables. We will get a basic idea of which type of people are more likely to churn. Then we make clusters based on the numerical variables. We add these cluster values to the original dataset. These cluster values are categorical in nature, but machine can only understand numbers. So we treat the categorical variables(both cluster values and other categorical variables) and convert them to numbers. After all the data preparation, we apply machine learning algorithm on the dataset which also contains cluster values based on certain parameters now. The machine learning algorithm accuracy is checked. We have used XGBoost feature importance to understand the most important features and then apply ML algos only on the most important features. Now we recheck the accuracy of the ML Algorithm.","be763fe4":"<a href=6.1><h3>6.1. Feature importance to improve Machine Learning model accuracy<\/h3><\/a>","da81634c":"<a id='2.12'><h3> 2.12. Relationship between opting for Paperless billing and churn <\/h3><\/a>","3e754691":"<a id='3'><h2> 3. Visualisation of Numerical variables<\/h2><\/a>","0a55293c":"People who have less tenure in system have more churn rate","0a19ecc3":"If churn is 0, then precision, recall and f1 score are fine, but when churn is 1, the performance is not so good","580679be":"This chart reveals customers who have Fiber optic as Internet Service are more likely to churn. I normally expect Fiber optic customers to churn less due to they use a more premium service. But this can happen due to high prices, competition, customer service, and many other reasons.\n","1c09a85e":"<a id='2.2'><h3> 2.2. Relationship between Partner and churn <\/h3><\/a>","381c5e27":"Before selecting few features, the accuracy was as below. \n\nAccuracy of XGB classifier on training set: 0.84\n\nAccuracy of XGB classifier on test set: 0.78","717b42a3":"<a id='1'> <h2>1. Reading data and importing libraries <\/h2><\/a>","ce510a4a":"<a id='5'><h3>5. Treatment of categorical variables <\/h3><\/a>\n\nLabel Encoder converts categorical columns to numerical by simply assigning integers to distinct values. For instance, the column gender has two values: Female & Male. Label encoder will convert it to 1 and 0.\n\nget_dummies() method creates new columns out of categorical ones. For e.g. if there is a categorical column such as say Segment_type with values low, mid, high; then get_dummies will convert Segment_type column to Segment_type_low, Segment_type_mid and Segment_type_high. If value in a row in  Segment_type column was low, then Segment_type_low will get 1, Segment_type_mid will get 0, Segment_type_high will get 0 for that row and so on","14cbcaa0":"<a id='2.3'><h3> 2.3. Relationship between opting for Phone service and churn <\/h3><\/a>","1ac549cb":"<a id='6.1'> <h2> 6.1. Machine Learning model on selected subset of features<\/h2> <\/a>","f57de5e2":"People with no device backup churn more.","56ebf77e":"Now starting from the categorical ones, we shed light on all features and see how helpful they are to identify if a customer is going to churn.\n\nWe will plot graphs to see how various categorical variables are affecting the churn rate to understand a bit about our data.","34265607":"People not opting for Internet security churn more","30f7a7db":"<a id='2.12'><h3> 2.12. Relationship between Type of Contract and churn <\/h3><\/a>","629b2fd6":"In this section, we are going to transform our raw features to extract more information from them. Our strategy is as follows:\n\n    1- Group the numerical columns by using clustering techniques\n    2- Apply Label Encoder to categorical features which are binary\n    3- Apply get_dummies() to categorical features which have multiple values\n\nNumerical Columns\n\nAs we know from the EDA section, We have three numerical columns:\n\n    - Tenure\n    - Monthly Charges\n    - Total Charges\n\nWe are going to apply the following steps to create groups:\n\n- Using Elbow Method to identify the appropriate number of clusters\n- Applying K-means logic to the selected column and change the naming\n- Observe the profile of clusters\n\nLet\u2019s check how this works for Tenure in practice:\n\n","5089dee2":"Opting or not opting for Phone service does not have a significant impact on churn","a5ab6e6f":"<a id='2.11'><h3> 2.11. Relationship between opting for Streaming Movies and churn <\/h3><\/a>","267db9f2":"Very less significant difference betwenn churn rate of men and women","4216b769":"We have two main questions while dealing with any churn prediction. What features are most determinant of churn? ","ad227edb":"Opting for or not opting for streaming TV services has no impact on churn. People not opting for any internet services churn less.","57e51571":"<a id='2.9'><h3> 2.9. Relationship between opting for Tech Support and churn <\/h3><\/a>","aa61f9ca":"<a id='6'><h3>6. Machine Learning model for churn rate prediction <\/h3><\/a>","a0ca6577":"<a id='2.4'><h3> 2.4. Relationship between opting for Multiple Lines and churn <\/h3><\/a>","2e1878b1":"Single people are less likely to churn","f704da58":"We see that here cluster 0,1,2,3 are random numbers. Cluster 0 is not better than cluster 1 and so on. Let us try to find out how to number the clusters. We see that cluster 1 has best average mean, cluster 2 has next best average mean tenure and cluster 0 has worst average tenure. So ideally the numbering for these clusters should have been 0,2 and 1 if we plot in a descending way and the maximum tenure comes last. Let us define a function which will find out the best clusters according to average tenure, reindex the clusters and change their numbers to the re-indexed numbers","5a0ce103":"<a href=2><h2> 2. Visualisation of Categorical variables<\/h2><\/a>","35dada0c":"People who dont opt for tech support churn more","3a9180e0":"No clear trend observed.","cb70449e":"Opting for or not opting for streaming Movie services has no impact on churn. People not opting for any internet services churn less.","8c8ba2c1":"<a id='2.10'><h3> 2.10. Relationship between opting for Streaming TV and churn <\/h3><\/a>","935aac48":"<a id='2.5'><h3> 2.5. Relationship between opting for Internet service and churn <\/h3><\/a>","e6f853a4":"<a id='4.3'><h3>4.3. Clusters based on Total Charges<\/h3><\/a>","ba6288c3":"It seems like our data fall under two categories:\n\n- Categorical features: gender, streaming tv, payment method &, etc.\n- Numerical features: tenure, monthly charges, total charges","dd8e7d49":"Clusters are now properly ordered according to the average tenures","b95c3b81":"<a id='4'><h2>4. Clusters based on numerical variables and visualisation <\/h2><\/a>\n","df0e6158":"<a id='2.7'><h3> 2.7. Relationship between opting for Online Backup and churn <\/h3><\/a>","321ea61a":"As is evident, there is no clear trend between total charges and churn rate","b449a7b2":"XGB Feature Importance will give us the top features ","4155f1a9":"People with low total charge tend to churn more.","f7674a54":"<a id='3.2'><h2> 3.2. Visualisation of relationship between Monthly charges and churn rate<\/h2><\/a>","aff54114":"<a id='2.1'><h3> 2.1. Relationship between gender and churn <\/h3><\/a>","02887fd1":"People with no online backup churn more","aa24d448":"Our model is now ready to predict churn","5e374903":"People who pay via electronic check churn maximum","9823f92e":"<a id='2.6'><h3> 2.6. Relationship between opting for Online Security and churn <\/h3><\/a>","0bfd1842":"<a id='4.1'><h3>4.1 Clusters based on tenure<\/h3><\/a>","272e531f":"<a id='2.8'><h3> 2.8. Relationship between opting for Device protection and churn <\/h3><\/a>","46fe87de":"<a id='4.2'><h3>4.2 Clusters based on Monthly charges<\/h3><\/a>"}}