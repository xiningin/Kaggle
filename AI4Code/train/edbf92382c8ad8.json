{"cell_type":{"5bad3c8a":"code","23e78bff":"code","ab872cda":"code","e820d6db":"code","39107e58":"code","71cc9872":"code","299ae7b3":"code","8b3720df":"code","616b367c":"code","e5287258":"code","a00905f3":"code","065c4854":"code","c5be2abb":"code","76b70090":"code","f865eeeb":"code","191137ed":"code","91261fad":"code","253009ef":"code","6e23c87e":"code","94f55cbc":"code","791bc994":"code","a3cfc31e":"code","43b721a3":"code","42375ef0":"code","23c3359f":"code","98735d2a":"code","8c9c40b3":"markdown"},"source":{"5bad3c8a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\n\nimport matplotlib.ticker as ticker\nimport matplotlib.ticker as plticker\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier","23e78bff":"matches = pd.read_csv('..\/input\/ipl-matches\/matches.csv')\nmatches","ab872cda":"teams = matches.team1.append(matches.team2)\nteams_df = pd.DataFrame(teams)\nteams_df.columns = ['team']\ncount_match_series = teams_df.groupby(teams_df.team).team.count()\ncount_match_df = pd.DataFrame(count_match_series)\ncount_match_df.columns = ['countplayed']\ncount_match_df.reset_index(inplace=True)\ncount_match_df.sort_values('team')\nteam_sorted = count_match_df.team\nplayed_sorted = count_match_df.countplayed","e820d6db":"count_match_df","39107e58":"ax=sns.countplot('season',data=matches,palette=\"Set1\")\nplt.ylabel('Matches')\n","71cc9872":"matches.groupby('winner')['winner'].agg(['count']).reset_index().plot(x='winner',y='count',kind='bar')","299ae7b3":"x = matches.groupby('winner')['winner'].agg(['count']).sort_values('count').reset_index()\nx","8b3720df":"x.plot(x='winner',y='count',kind='bar')","616b367c":"top_players = matches.player_of_match.value_counts()[:10]\nfig, ax = plt.subplots()\nax.set_ylim([0,20])\nax.set_ylabel(\"Count\")\nax.set_title(\"Top player of the match Winners\")\nsns.barplot(x = top_players.index, y = top_players, orient='v'); #palette=\"Blues\");\nplt.xticks(rotation=90)\nplt.yticks(range(0,25,2))\nplt.show()","e5287258":"csk = matches[(matches[\"team1\"]==\"Chennai Super Kings\") & (matches[\"winner\"]==\"Chennai Super Kings\")]\ncsk","a00905f3":"csk.describe()","065c4854":"plt.figure(figsize=(8,8))\nplt.scatter(csk['season'],csk['win_by_runs'])\nplt.xticks(csk['season'])\nplt.yticks([5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95])\nplt.show()","c5be2abb":"\nsns.relplot(csk['season'],csk['win_by_runs'],marker ='o', s=100)\n","76b70090":"sns.relplot(csk['season'],csk['win_by_wickets'],marker ='o', s=100)","f865eeeb":"sns.relplot(csk['season'],csk['win_by_runs'],marker ='o', s=100,hue=csk['toss_decision'])\nplt.xticks(csk['season'],rotation = 90)\nplt.show()","191137ed":"csk.columns","91261fad":"sns.countplot(csk['player_of_match'])\nplt.xticks(rotation=90)\nplt.yticks([1,2,3,4,5,6,7,8,9,10])\nplt.title(' Man of the match')\nplt.show()","253009ef":"y = np.arange(15)\nmm = [go.Bar(\n   x = matches['winner'],\n   y = matches['win_by_runs']\n)]\nfig = go.Figure(data=mm)\niplot(fig)","6e23c87e":"fig = px.scatter_3d(csk,x ='season',y='win_by_runs',z='win_by_wickets',symbol = 'toss_decision',color = 'toss_decision')\nfig","94f55cbc":"csk = matches[(matches[\"team1\"]==\"Chennai Super Kings\") | (matches[\"team2\"]==\"Chennai Super Kings\")]\ncsk","791bc994":"from sklearn.preprocessing import LabelEncoder\n\nlb_make = LabelEncoder()\ncsk[\"team1_code\"] = lb_make.fit_transform(csk[\"team1\"])\ncsk[\"team2_code\"] = lb_make.fit_transform(csk[\"team2\"])\ncsk[\"winner_code\"] = lb_make.fit_transform(csk[\"winner\"])\ncsk[[\"team1\", \"team1_code\"]].head(11)\n","a3cfc31e":"csk[[\"team2\", \"team2_code\"]].head(11)","43b721a3":"csk[[\"winner\", \"winner_code\"]].head(11)","42375ef0":"csk","23c3359f":"final = pd.get_dummies(csk, prefix=['team1_code', 'team2_code'], columns=['team1_code', 'team2_code'])\n\nX = csk[[\"team1_code\",\"team2_code\"]]\ny = csk[\"winner_code\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)\n","98735d2a":"from sklearn.ensemble import RandomForestClassifier\n\n\nrf = RandomForestClassifier(n_estimators=100, max_depth=20, random_state=0) \nrf.fit(X_train, y_train)\nscore = rf.score(X_train, y_train)\nscore2 = rf.score(X_test, y_test)\nprint(\"Training set accuracy: \", '%.3f'%(score)) \nprint(\"Test set accuracy: \", '%.3f'%(score2))","8c9c40b3":"Sorted values removal"}}