{"cell_type":{"a63843d5":"code","335cc588":"code","12dad309":"code","0418a751":"code","890de7a0":"code","5f2654a3":"code","f1e76814":"code","5fbee988":"code","605b3781":"code","845ab824":"code","272da661":"code","03e65ecf":"code","8d7ce46a":"code","1dba541f":"code","5d766bc4":"code","e4273c59":"code","d3cc5bab":"code","55a472a4":"code","eedacf24":"markdown","18af4fc6":"markdown","9267c550":"markdown","40389f1f":"markdown"},"source":{"a63843d5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","335cc588":"df = pd.read_csv(\"..\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv\")","12dad309":"df = df.drop(columns=['Serial No.'])","0418a751":"df.head()","890de7a0":"df.info()","5f2654a3":"df.isnull().any()","f1e76814":"df.describe().T","5fbee988":"for col in df.drop(columns=['Chance of Admit ']):\n    sns.displot(df, x=col)","605b3781":"for col in df.drop(columns=['Chance of Admit ']):\n    plt.scatter(df[col], df['Chance of Admit '])\n    plt.xlabel(col)\n    plt.ylabel(\"Chance of Admit\")\n    plt.show()","845ab824":"df[df.columns[0:]].corr()['Chance of Admit '][:].sort_values(ascending=False)","272da661":"def mean_squared_error(y, y_pred) -> float:\n    \"\"\"\n    calculates mean squared error.\n    \"\"\"\n    return np.mean(0.5 * np.square(y - y_pred))","03e65ecf":"def get_data():\n    X = np.array(df.drop(columns=['Chance of Admit ']))\n    y = np.array(df['Chance of Admit '])\n    X_train = X[:400]\n    y_train = y[:400]\n    X_test = X[400:]\n    y_test = y[400:]\n    \n    return X_train, X_test, y_train, y_test","8d7ce46a":"class LinearRegression(object):\n    \"\"\"\n    Linear Regression model. Models the relationship between a scalar dependent variable y and the independent\n    variables X.\n    \"\"\"\n\n    def __init__(self) -> None:\n        self.X_offset = self.y_offset = 0\n        self.w = self.b = []\n\n    @property\n    def coef(self) -> np.ndarray:\n        \"\"\"\n        returns weights.\n        \"\"\"\n        return self.w\n\n    @property\n    def intercept(self) -> float:\n        \"\"\"\n        returns bias.\n        \"\"\"\n        return self.b\n\n    def preprocess(self, X, y):\n        \"\"\"\n        perform scaling on data.\n        \"\"\"\n        self.X_offset = np.average(X, axis=0).astype(X.dtype, copy=False)\n        self.y_offset = np.average(y, axis=0)\n\n        X, y = X - self.X_offset, y - self.y_offset\n\n        return X, y\n\n    def fit(self, X, y) -> None:\n        \"\"\"\n        calculate the coefficient of the linear regression model.\n\n        \"\"\"\n        X, y = self.preprocess(X, y)\n        self.w = np.linalg.lstsq(X, y, rcond=-1)[0]\n        self.b = self.y_offset - np.dot(self.X_offset, self.w)\n\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Makes predictions using the line equation.\n        \"\"\"\n        return np.dot(X, self.w) + self.b\n","1dba541f":"X_train, X_test, y_train, y_test = get_data()","5d766bc4":"model = LinearRegression()\nmodel.fit(X_train, y_train)","e4273c59":"y_pred = model.predict(X_test)\nprint(\"Mean Squared Error: \", mean_squared_error(y_test, y_pred))","d3cc5bab":"print(model.coef, model.intercept)","55a472a4":"prediction = pd.DataFrame({'Y (Test)': y_test, 'Y (Predicted)': y_pred})\nprediction.head()","eedacf24":"# Exploratory Analysis","18af4fc6":"# Linear Regression","9267c550":"#### From the above graphs, we can see that more students are there in the mid range of scores and students with higher scores have better chance of getting an admission.","40389f1f":"# Conclusion\n#### This concludes this analysis. Thank you."}}