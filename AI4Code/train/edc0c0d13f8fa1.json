{"cell_type":{"e9ea99da":"code","1340f7ce":"code","6da51479":"code","9b02c2df":"code","92b98c38":"code","85c1d3f2":"code","ea77a66f":"code","ced1d361":"code","c76af154":"code","7a5d27d7":"code","504a2686":"code","e9546557":"code","5c4c5d1e":"code","db9bc785":"code","0a6ff2dd":"code","ceff0063":"code","559781a8":"code","e18e9fe4":"code","ef9e32f1":"code","992dfe2f":"code","6d58e811":"code","cae4d969":"code","9e469d24":"code","4268fbad":"code","06fac94d":"code","43b1ad15":"code","65655a64":"code","5cb12a92":"code","2adec9b6":"code","1aa288ed":"code","6ea5bc41":"code","122910fc":"code","29141cd3":"code","e38825a1":"code","41d29560":"code","86aa8621":"code","7300b13e":"code","4984a953":"code","594a0fec":"code","fe6ea6a6":"code","c012a998":"code","12967774":"code","dd9b8069":"code","a9e42a85":"code","8c1a00ec":"code","a132ced3":"code","df6226f2":"code","d68a257b":"code","75025e17":"code","074f186a":"code","07e62a19":"code","6be9dbdb":"code","2f544d4e":"code","d3eb1f79":"code","2949864b":"code","dbd3c218":"code","cfcd731c":"code","e11c8bd9":"code","c4cfb22e":"code","70f09d61":"markdown","5c4e7470":"markdown","eaf0ddc7":"markdown","ad834b80":"markdown","c458d3c7":"markdown","a4c80d3c":"markdown","36bad0a5":"markdown","a47ced40":"markdown","52a70bfa":"markdown","eb7f13a2":"markdown","3da3cf6a":"markdown","8f7c76fd":"markdown","2f54f9ba":"markdown","50ee7fa2":"markdown","bf730d77":"markdown","f19762f6":"markdown","d3328eef":"markdown","398f19f1":"markdown","f7b0d662":"markdown","23035ecd":"markdown","ce6d53c8":"markdown","6aee54d0":"markdown","36c23b62":"markdown","56c358c0":"markdown","ce6a3da6":"markdown","910c6a55":"markdown","9bd65ed2":"markdown","5b85a462":"markdown","f1b8e73c":"markdown","c1c26a99":"markdown","d48e9362":"markdown","acda1386":"markdown","1ccc5fab":"markdown","c6ac9292":"markdown","603a64e0":"markdown"},"source":{"e9ea99da":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns","1340f7ce":"import plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot","6da51479":"from sklearn.linear_model import SGDClassifier\nfrom sklearn.model_selection import cross_val_score,GridSearchCV,cross_val_predict,ParameterGrid\nfrom sklearn.metrics import confusion_matrix,f1_score,recall_score,precision_recall_curve\nfrom sklearn.neighbors import KNeighborsClassifier","9b02c2df":"from scipy.ndimage.interpolation import shift","92b98c38":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\nx_test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ny_test = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')","85c1d3f2":"train.head()","ea77a66f":"train.isna().any().any() or x_test.isna().any().any()","ced1d361":"labelName = go.Pie(labels=train.label.value_counts().index,\n                   values=train.label.value_counts(),\n                   hoverinfo='value+percent',textinfo='label',title=\"Labels\")\niplot([labelName])","c76af154":"some_digit = train.iloc[3,1:train.shape[1]].values\nsome_digit_image = some_digit.reshape(28, 28)\nfig = px.imshow(some_digit_image,title='label : '+str(train.iloc[3,0]),\n                color_continuous_scale='gray')\nfig.update_layout(coloraxis_showscale=False)\nfig.update_xaxes(showticklabels=False)\nfig.update_yaxes(showticklabels=False)\nfig.show()","7a5d27d7":"fig = plt.figure(figsize=(20,20))\nfor i in range(6):\n    ax = fig.add_subplot(1,6,i+1,xticks=[],yticks=[])\n    ax.imshow(train.iloc[i*4,1:train.shape[1]].values.reshape(28, 28),cmap='gray')\n    ax.set_title(str(train.iloc[i*4,0]))","504a2686":"def plot_digits(instances, images_per_row=10, **options):\n    size = 28\n    images_per_row = min(len(instances), images_per_row)\n    images = [instance.reshape(size,size) for instance in instances]\n    n_rows = (len(instances) - 1) \/\/ images_per_row + 1\n    row_images = []\n    n_empty = n_rows * images_per_row - len(instances)\n    images.append(np.zeros((size, size * n_empty)))\n    for row in range(n_rows):\n        rimages = images[row * images_per_row : (row + 1) * images_per_row]\n        row_images.append(np.concatenate(rimages, axis=1))\n    image = np.concatenate(row_images, axis=0)\n    plt.imshow(image, cmap = mpl.cm.binary, **options)\n    plt.axis(\"off\")","e9546557":"plt.figure(figsize=(9,9))\nexample_images = train.iloc[:100,1:train.shape[1]].values\nplot_digits(example_images,images_per_row=10)\nplt.show()","5c4c5d1e":"def visualize_input(img,ax):\n    ax.imshow(img,cmap='gray')\n    width,height = img.shape\n    thresh = img.max()\/2.5\n    for x in range(width):\n        for y in range(height):\n            ax.annotate(str(round(img[x][y],2)),xy=(y,x),\n                       horizontalalignment='center',\n                       verticalalignment='center',\n                       color='white' if img[x][y] < thresh else 'black')","db9bc785":"fig = plt.figure(figsize=(12,12))\nax = fig.add_subplot(111)\nvisualize_input(train.iloc[3,1:train.shape[1]].values.reshape(28,28),ax)","0a6ff2dd":"x_train = train.drop('label',axis=1)\ny_train = train['label'].copy()","ceff0063":"x_train = x_train.astype('float32')\/255\nx_test = x_test.astype('float32')\/255","559781a8":"y_train_4 = (y_train==4)\ny_test_4 = (y_test==4)","e18e9fe4":"randDigits = np.array([x_train.iloc[3].values,\n                       x_train.iloc[4].values])","ef9e32f1":"print('y_train.iloc[3] = ',y_train.iloc[3])\nprint('y_train.iloc[4] = ',y_train.iloc[4])","992dfe2f":"sgd_clf = SGDClassifier(random_state=42)\nsgd_clf.fit(x_train.values,y_train_4)","6d58e811":"sgd_clf.predict(randDigits)","cae4d969":"y_scores = sgd_clf.decision_function(randDigits)\ny_scores","9e469d24":"threshold = 0\ny_some_digit_pred = (y_scores > threshold)\ny_some_digit_pred","4268fbad":"threshold = - 1\ny_some_digit_pred = (y_scores > threshold)\ny_some_digit_pred","06fac94d":"cross_val_score(sgd_clf,x_train,y_train_4,cv=3,scoring='accuracy')","43b1ad15":"y_predicit_4 = cross_val_predict(sgd_clf,x_train,y_train_4,cv=3)","65655a64":"confusion_matrix(y_train_4,y_predicit_4)","5cb12a92":"f1_score(y_train_4,y_predicit_4)","2adec9b6":"y_scores = cross_val_predict(sgd_clf,x_train,y_train_4,cv=3,\n                            method = 'decision_function')","1aa288ed":"precisions,recalls,thresholds = precision_recall_curve(y_train_4,y_scores)","6ea5bc41":"def plot_precision_recall_vs_threshold(precisions, recalls, thresholds):\n    plt.plot(thresholds, precisions[:-1], \"b--\", label=\"Precision\", linewidth=2)\n    plt.plot(thresholds, recalls[:-1], \"g-\", label=\"Recall\", linewidth=2)\n    plt.legend(loc=\"center right\", fontsize=16) \n    plt.xlabel(\"Threshold\", fontsize=16)\n    plt.grid(True)\n    plt.axis([-10, 10, 0, 1])\n\nrecall_90_precision = recalls[np.argmax(precisions >= 0.90)]\nthreshold_90_precision = thresholds[np.argmax(precisions >= 0.90)]\nplt.figure(figsize=(8, 4))                                                                  \nplot_precision_recall_vs_threshold(precisions, recalls, thresholds)","122910fc":"sgd_clf.fit(x_train,y_train)","29141cd3":"randDigits = np.array([x_train.iloc[3].values,\n                       x_train.iloc[4].values])\nprint('y_train.iloc[3] = ',y_train.iloc[3])\nprint('y_train.iloc[4] = ',y_train.iloc[4])","e38825a1":"some_digit_scores = sgd_clf.decision_function(randDigits)\nsome_digit_scores","41d29560":"sgd_clf.predict(randDigits)","86aa8621":"cross_val_score(sgd_clf,x_train,y_train,cv=3,scoring='accuracy')","7300b13e":"y_train_pred = cross_val_predict(sgd_clf,x_train,y_train,cv=3)\nconf_mx = confusion_matrix(y_train,y_train_pred)\nconf_mx","4984a953":"plt.matshow(conf_mx,cmap=plt.cm.gray)","594a0fec":"row_sums = conf_mx.sum(axis=1,keepdims=True)","fe6ea6a6":"norm_conf_mx = conf_mx \/ row_sums","c012a998":"np.fill_diagonal(norm_conf_mx,0)\nplt.matshow(norm_conf_mx,cmap=plt.cm.gray)","12967774":"knn = KNeighborsClassifier()","dd9b8069":"knn.fit(x_train,y_train)","a9e42a85":"cross_val_score(knn,x_train,y_train,cv=3,scoring='accuracy')","8c1a00ec":"kRange = list(range(3,8))\nweights = [\"uniform\", \"distance\"]\nknn_grid = dict(n_neighbors = kRange,weights=weights)\ngrid = GridSearchCV(knn,param_grid=knn_grid,cv=5,verbose=3,scoring='accuracy')","a132ced3":"grid.fit(x_train,y_train)\nprint(grid.best_params_)","df6226f2":"grid.best_score_","d68a257b":"knn_final = KNeighborsClassifier(weights='distance',\n                                  n_neighbors=4)\nknn_final.fit(x_train,y_train)","75025e17":"# predict results\ny_prediction = knn_final.predict(x_test)\n\nresults = pd.Series(y_prediction,name=\"Label\")\nresults","074f186a":"def shift_image(image, dx, dy):\n    image = image.reshape((28, 28))\n    shifted_image = shift(image, [dy, dx], cval=0, mode=\"constant\")\n    return shifted_image.reshape([-1])","07e62a19":"image = x_train.iloc[3].values\nshifted_image_down = shift_image(image,0,5)\nshifted_image_left = shift_image(image,-5,0)\n\nplt.figure(figsize=(12,3))\nplt.subplot(131)\nplt.title('Original',fontsize=14)\nplt.imshow(image.reshape(28,28),interpolation='nearest',cmap='Greys')\nplt.subplot(132)\nplt.title(\"Shifted down\", fontsize=14)\nplt.imshow(shifted_image_down.reshape(28, 28), interpolation=\"nearest\", cmap=\"Greys\")\nplt.subplot(133)\nplt.title(\"Shifted left\", fontsize=14)\nplt.imshow(shifted_image_left.reshape(28, 28), interpolation=\"nearest\", cmap=\"Greys\")\nplt.show()","6be9dbdb":"x_train_augmented = []\nfor i in range(x_train.shape[0]):\n    x_train_augmented.append(x_train.iloc[i].values)","2f544d4e":"y_train_augmented = [label for label in y_train]\n\nfor dx,dy in ((1,0),(-1,0),(0,1),(0,-1)):\n        for i in range(x_train.shape[0]):  \n            x_train_augmented.append(shift_image(x_train.iloc[i].values,dx,dy))\n            y_train_augmented.append(y_train[i])\n\nx_train_augmented = np.array(x_train_augmented)\ny_train_augmented = np.array(y_train_augmented)","d3eb1f79":"shuffle_idx = np.random.permutation(len(x_train_augmented))\nx_train_augmented = x_train_augmented[shuffle_idx]\ny_train_augmented = y_train_augmented[shuffle_idx]","2949864b":"knn_clf = KNeighborsClassifier(weights='distance',\n                                  n_neighbors=4)","dbd3c218":"knn_clf.fit(x_train_augmented,y_train_augmented)","cfcd731c":"y_pred = knn_clf.predict(x_test)","e11c8bd9":"results = pd.Series(y_pred,name=\"Label\")","c4cfb22e":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"digit-recognizer.csv\",index=False)","70f09d61":"# Exploring Data","5c4e7470":"We are going to have balance between precision and recall   \n0 or little lower than zero it's ok for threshold, and we leave it threshold with zero and don't change it :))","eaf0ddc7":"What ?? , Looks too good to be true. Having an accuracy above 98% is quite amazing. But wait, let us look at the confusion matrix.","ad834b80":"The 5s look slightly darker than the other digits, which could mean that there are fewer images of 5s in the dataset or\nthat the classifier does not perform as well on 5s as on other digits.","c458d3c7":"That's a lot of numbers. It's often more convenient to look at image representation of the confusion matrix ","a4c80d3c":"**GridSearchCV :**","36bad0a5":"Well, the truth is that our model is having accuracy over 90% is because only about 10% of the images are of digit \u20184\u2019. That\u2019s why we don\u2019t prefer accuracy as a performance measure for a classifier.","a47ced40":"snooping bias :)","52a70bfa":"# Take a Quick Look at the Data Structure","eb7f13a2":"Great almost 97%","3da3cf6a":"That many images get misclassified as 8s and 3s and 5s","8f7c76fd":"# Data Augmentation","2f54f9ba":"Not so great now, Let us check the f1 score also.","50ee7fa2":"Let\u2019s try the *KNN* classifier.","bf730d77":"# Submit to competition","f19762f6":"Good, not bad","d3328eef":"Before building a multi class classifier, let's try building a binary classifier for digit 4. This classifier will predict whether a given digit is a \u20184\u2019 or not.","398f19f1":"Nice! Our classifier performed well. We got an average accuracy above 96%","f7b0d662":"let's focus the plot on the errors","23035ecd":"Ok, it's True, but How do you decide which threshold to use ?","ce6d53c8":"We see that there are white numbers on a black background, each thickly written just in the middle, and they are quite low resolution in our case 28 pixels x 28 pixels","6aee54d0":"# Multiclass Classification.","36c23b62":"# Error Analysis","56c358c0":"Some algorithms (such as SGD classifiers, Random Forest classifiers, and naive Bayes classifiers) are capable of handling multiple classes natively.","ce6a3da6":"Check this train, text have missing value or not","910c6a55":"Our model predicted False for a \u20184\u2019 and False for a \u20180\u2019. Quite awful, isn\u2019t it! Let\u2019s use cross-validation scores and thresholds to know more.","9bd65ed2":"# Binary Classification.","5b85a462":"**Normalizing the data**","f1b8e73c":"The highest score is indeed the one corresponding to class 4 and 0","c1c26a99":"Each of the image pixels must be rescaling  \neach values must be divided by 255","d48e9362":"# Prepare the Data for Machine Learning Algorithms","acda1386":"28 * 28 = 784  \n784 + 1 (label) = 785","1ccc5fab":"The SGDClassifier uses a threshold equal to 0, so the previous code returns the same result as to predict() method. Lets Lowering the threshold :","c6ac9292":"Ok, lets answer this question    \nHow do you decide which threshold to use ?","603a64e0":"Split train to x, y"}}