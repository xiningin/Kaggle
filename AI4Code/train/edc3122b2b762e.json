{"cell_type":{"9aae2487":"code","01e97246":"code","ca5dd430":"code","d05b5506":"code","217f7da2":"code","30b6cf0b":"code","ae7b6f9c":"code","956a611d":"code","1743bab5":"code","cb0eb472":"code","df684553":"code","68f6d820":"code","a4912c64":"code","72d1bd04":"code","3a7b7777":"code","64f3486b":"code","a1723198":"code","4cd5eed8":"code","321b9a8f":"markdown","78b7e99c":"markdown","1be88885":"markdown"},"source":{"9aae2487":"#importing libaries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","01e97246":"#importing dataset\nds = pd.read_csv('..\/input\/company-bankruptcy-prediction\/data.csv')","ca5dd430":"#reviewing dataset\npd.set_option('display.max_columns',None)\nds.head()","d05b5506":"#dataset has 569 rows and 31 columns\nds.shape","217f7da2":"ds.info()","30b6cf0b":"ds['Bankrupt?'].value_counts()","ae7b6f9c":"#checking for null values\nds.isnull().any()","956a611d":"sns.countplot('Bankrupt?',data=ds)","1743bab5":"#defining dependent and independent variables\nx = ds.drop('Bankrupt?', axis=1)\ny = ds['Bankrupt?']","cb0eb472":"#splitting data into training and testing set\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)","df684553":"#training model\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(max_iter = 10000)\nlr.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix,classification_report\ny_pred = lr.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nlra = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',lra)\nprint(\"Classification Report\",classification_report(y_test,y_pred))","68f6d820":"#training model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski',p = 2)\nknn.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix,classification_report\ny_pred = knn.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nknna = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))\nprint(\"Classification Report\",classification_report(y_test,y_pred))","a4912c64":"#training model\nfrom sklearn.svm import SVC\nsvc = SVC(kernel = 'rbf')\nsvc.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix,classification_report\ny_pred = svc.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nsva2 = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))\nprint(\"Classification Report\",classification_report(y_test,y_pred))","72d1bd04":"#training model\nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix,classification_report\ny_pred = nb.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nnba = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))\nprint(\"Classification Report\",classification_report(y_test,y_pred))","3a7b7777":"#training model\nfrom sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(criterion = 'entropy')\ndt.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix,classification_report\ny_pred = dt.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\ndta = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))\nprint(\"Classification Report\",classification_report(y_test,y_pred))","64f3486b":"#training model\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 60, criterion = 'entropy',random_state = 0)\nrf.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix,classification_report\ny_pred = rf.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nrfa = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))\nprint(\"Classification Report\",classification_report(y_test,y_pred))","a1723198":"from xgboost import XGBClassifier\nxgb = XGBClassifier()\nxgb.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix,classification_report\ny_pred = xgb.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nxgba = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))\nprint(\"Classification Report\",classification_report(y_test,y_pred))","4cd5eed8":"#comparing accuracies\nplt.figure(figsize= (8,7))\nac = [lra,knna,sva2,nba,dta,rfa,xgba]\nname = ['Logistic Regression','knn','Kernel Svm','Naive Bayes','Decision Tree', 'Random Forest','XGBoost']\nsns.barplot(x = ac,y = name,palette='pastel')\nplt.title(\"Plotting the Model Accuracies\", fontsize=16, fontweight=\"bold\")","321b9a8f":"# PREDICTING WHETHER A COMPANY WILL GO BANKRUPT OR NOT USING VARIOUS CLASSIFICATION MODELS.","78b7e99c":"**NOTE: As you can see the dataset is highly unbalanced,This can be fixed with some under or oversampling. But I'm taking the Dataset as it is.**","1be88885":"**Random forest did best with a accuracy score of 96.7%**"}}