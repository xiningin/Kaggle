{"cell_type":{"284bbaba":"code","138abcee":"code","882c3554":"code","cb29077b":"code","a3b3ad0b":"code","1743eadc":"code","d6f87539":"code","394a5b0d":"code","cac015ee":"code","6cf498a0":"code","51d4532a":"code","a77cffc7":"code","d3b4b9dc":"code","7010a545":"code","4fdc99ad":"code","384af9f8":"code","c3e4e647":"code","e7ef9409":"code","8761f840":"code","ed21a0b0":"code","7db686f8":"code","eee8f082":"code","348226b5":"code","cc4fdd95":"code","df909ee7":"code","09a1cc30":"code","b5fd8b9c":"code","52de2942":"code","bf0eeec2":"code","c50e0ab9":"code","3c341b32":"code","788c2093":"code","fc4d220f":"code","fd10edbf":"code","587f70ef":"code","9cbda5dc":"code","dbff95e7":"code","fc59072a":"code","a154e3ca":"code","1eabf9d9":"code","99210d98":"code","ea5bb7d2":"code","def9e579":"code","5b7e3b27":"code","3f18efec":"markdown","d28e3b2a":"markdown","8a9ede31":"markdown","5b574e14":"markdown","c0a71fd5":"markdown","892c9280":"markdown","b27061ee":"markdown","e0510d99":"markdown","6f08214f":"markdown","7c9fa265":"markdown"},"source":{"284bbaba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","138abcee":"data_train=pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndata_test=pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")","882c3554":"data_train.info()","cb29077b":"data_test.info()","a3b3ad0b":"combine_Data=pd.concat([data_train,data_test],axis=0)","1743eadc":"combine_Data.info()","d6f87539":"final_df =combine_Data","394a5b0d":"final_df","cac015ee":"final_df.isnull().sum()","6cf498a0":"columns_final=final_df.columns","51d4532a":"columns_final","a77cffc7":"duplicates=final_df[final_df.duplicated()]","d3b4b9dc":"duplicates","7010a545":"categorical_Data=final_df.select_dtypes(include=[\"object\"])","4fdc99ad":"categorical_Data.info()","384af9f8":"categorical_Data.count() ## It will sho us the number of non null values values","c3e4e647":"miss=categorical_Data.isna() ## True shows missing values\n                        ## False shows non missing Values","e7ef9409":"number_of_missing=miss.sum() ## Number of missing values\nnumber_of_missing","8761f840":"number_of_missing\/len(final_df)\n## We can remove [\"Alley\",\"FireplaceQu\",\"PoolQC\",\"Fence\",\"MiscFeature\"]","ed21a0b0":"final_df=final_df.drop(columns=[\"Alley\",\"FireplaceQu\",\"PoolQC\",\"Fence\",\"MiscFeature\"],axis=1)","7db686f8":"final_df.shape","eee8f082":"final_df.select_dtypes(include=\"object\").columns","348226b5":"final_df['MSZoning']=final_df['MSZoning'].fillna(final_df['MSZoning'].mode()[0])\nfinal_df['Street']=final_df['Street'].fillna(final_df['Street'].mode()[0])\nfinal_df['LotShape']=final_df['LotShape'].fillna(final_df['LotShape'].mode()[0])\nfinal_df['LandContour']=final_df['LandContour'].fillna(final_df['LandContour'].mode()[0])\nfinal_df['Utilities']=final_df['Utilities'].fillna(final_df['Utilities'].mode()[0])\nfinal_df['LotConfig']=final_df['LotConfig'].fillna(final_df['LotConfig'].mode()[0])\nfinal_df['LandSlope']=final_df['LandSlope'].fillna(final_df['LandSlope'].mode()[0])\nfinal_df['Neighborhood']=final_df['Neighborhood'].fillna(final_df['Neighborhood'].mode()[0])\nfinal_df['Condition1']=final_df['Condition1'].fillna(final_df['Condition1'].mode()[0])\nfinal_df['Condition2']=final_df['Condition2'].fillna(final_df['Condition2'].mode()[0])\nfinal_df['BldgType']=final_df['BldgType'].fillna(final_df['BldgType'].mode()[0])\nfinal_df['HouseStyle']=final_df['HouseStyle'].fillna(final_df['HouseStyle'].mode()[0])\nfinal_df['RoofStyle']=final_df['RoofStyle'].fillna(final_df['RoofStyle'].mode()[0])\nfinal_df['Exterior1st']=final_df['Exterior1st'].fillna(final_df['Exterior1st'].mode()[0])\nfinal_df['Exterior2nd']=final_df['Exterior2nd'].fillna(final_df['Exterior2nd'].mode()[0])\nfinal_df['MasVnrType']=final_df['MasVnrType'].fillna(final_df['MasVnrType'].mode()[0])\nfinal_df['ExterQual']=final_df['ExterQual'].fillna(final_df['ExterQual'].mode()[0])\nfinal_df['ExterCond']=final_df['ExterCond'].fillna(final_df['ExterCond'].mode()[0])\nfinal_df['Foundation']=final_df['Foundation'].fillna(final_df['Foundation'].mode()[0])\nfinal_df['BsmtQual']=final_df['BsmtQual'].fillna(final_df['BsmtQual'].mode()[0])\nfinal_df['BsmtCond']=final_df['BsmtCond'].fillna(final_df['BsmtCond'].mode()[0])\nfinal_df['BsmtExposure']=final_df['BsmtExposure'].fillna(final_df['BsmtExposure'].mode()[0])\nfinal_df['BsmtFinType1']=final_df['BsmtFinType1'].fillna(final_df['BsmtFinType1'].mode()[0])\nfinal_df['BsmtFinType2']=final_df['BsmtFinType2'].fillna(final_df['BsmtFinType2'].mode()[0])\nfinal_df['Heating']=final_df['Heating'].fillna(final_df['Heating'].mode()[0])\nfinal_df['HeatingQC']=final_df['HeatingQC'].fillna(final_df['HeatingQC'].mode()[0])\nfinal_df['CentralAir']=final_df['CentralAir'].fillna(final_df['CentralAir'].mode()[0])\nfinal_df['Electrical']=final_df['Electrical'].fillna(final_df['Electrical'].mode()[0])\nfinal_df['KitchenQual']=final_df['KitchenQual'].fillna(final_df['KitchenQual'].mode()[0])\nfinal_df['Functional']=final_df['Functional'].fillna(final_df['Functional'].mode()[0])\nfinal_df['GarageType']=final_df['GarageType'].fillna(final_df['GarageType'].mode()[0])\nfinal_df['GarageFinish']=final_df['GarageFinish'].fillna(final_df['GarageFinish'].mode()[0])\nfinal_df['GarageQual']=final_df['GarageQual'].fillna(final_df['GarageQual'].mode()[0])\nfinal_df['GarageCond']=final_df['GarageCond'].fillna(final_df['GarageCond'].mode()[0])\nfinal_df['PavedDrive']=final_df['PavedDrive'].fillna(final_df['PavedDrive'].mode()[0])\nfinal_df['SaleType']=final_df['SaleType'].fillna(final_df['SaleType'].mode()[0])\nfinal_df['SaleCondition']=final_df['SaleCondition'].fillna(final_df['SaleCondition'].mode()[0])","cc4fdd95":"final_df.isnull().sum()","df909ee7":"numerical_data=final_df.select_dtypes(exclude=\"object\")","09a1cc30":"miss=numerical_data.isna() ## True shows missing values\n                        ## False shows non missing Values\nnumber_of_missing=miss.sum() ## Number of missing values\nnumber_of_missing\/len(final_df)","b5fd8b9c":"final_df['LotFrontage']=final_df['LotFrontage'].fillna(final_df['LotFrontage'].mean())\nfinal_df['MasVnrArea']=final_df['MasVnrArea'].fillna(final_df['MasVnrArea'].mean())\nfinal_df['BsmtFinSF1']=final_df['BsmtFinSF1'].fillna(final_df['BsmtFinSF1'].mean())\nfinal_df['BsmtFinSF2']=final_df['BsmtFinSF2'].fillna(final_df['BsmtFinSF2'].mean())\nfinal_df['BsmtUnfSF']=final_df['BsmtUnfSF'].fillna(final_df['BsmtUnfSF'].mean())\nfinal_df['TotalBsmtSF']=final_df['TotalBsmtSF'].fillna(final_df['TotalBsmtSF'].mean())\nfinal_df['BsmtFullBath']=final_df['BsmtFullBath'].fillna(final_df['BsmtFullBath'].mean())\nfinal_df['BsmtHalfBath']=final_df['BsmtHalfBath'].fillna(final_df['BsmtHalfBath'].mean())\nfinal_df['GarageYrBlt']=final_df['GarageYrBlt'].fillna(final_df['GarageYrBlt'].mean())\nfinal_df['GarageCars']=final_df['GarageCars'].fillna(final_df['GarageCars'].mean())\nfinal_df['GarageArea']=final_df['GarageArea'].fillna(final_df['GarageArea'].mean())","52de2942":"final_df.isnull().sum()","bf0eeec2":"final_df['MSZoning']=pd.get_dummies(final_df['MSZoning'],drop_first=True)\nfinal_df['Street']=pd.get_dummies(final_df['Street'],drop_first=True)\nfinal_df['LotShape']=pd.get_dummies(final_df['LotShape'],drop_first=True)\nfinal_df['LandContour']=pd.get_dummies(final_df['LandContour'],drop_first=True)\nfinal_df['Utilities']=pd.get_dummies(final_df['Utilities'],drop_first=True)\nfinal_df['LotConfig']=pd.get_dummies(final_df['LotConfig'],drop_first=True)\nfinal_df['LandSlope']=pd.get_dummies(final_df['LandSlope'],drop_first=True)\nfinal_df['Neighborhood']=pd.get_dummies(final_df['Neighborhood'],drop_first=True)\nfinal_df['Condition1']=pd.get_dummies(final_df['Condition1'],drop_first=True)\nfinal_df['Condition2']=pd.get_dummies(final_df['Condition2'],drop_first=True)\nfinal_df['BldgType']=pd.get_dummies(final_df['BldgType'],drop_first=True)\nfinal_df['HouseStyle']=pd.get_dummies(final_df['HouseStyle'],drop_first=True)\nfinal_df['RoofStyle']=pd.get_dummies(final_df['RoofStyle'],drop_first=True)\nfinal_df['Exterior1st']=pd.get_dummies(final_df['Exterior1st'],drop_first=True)\nfinal_df['Exterior2nd']=pd.get_dummies(final_df['Exterior2nd'],drop_first=True)\nfinal_df['MasVnrType']=pd.get_dummies(final_df['MasVnrType'],drop_first=True)\nfinal_df['ExterQual']=pd.get_dummies(final_df['ExterQual'],drop_first=True)\nfinal_df['ExterCond']=pd.get_dummies(final_df['ExterCond'],drop_first=True)\nfinal_df['Foundation']=pd.get_dummies(final_df['Foundation'],drop_first=True)\nfinal_df['BsmtQual']=pd.get_dummies(final_df['BsmtQual'],drop_first=True)\nfinal_df['BsmtCond']=pd.get_dummies(final_df['BsmtCond'],drop_first=True)\nfinal_df['BsmtExposure']=pd.get_dummies(final_df['BsmtExposure'],drop_first=True)\nfinal_df['BsmtFinType1']=pd.get_dummies(final_df['BsmtFinType1'],drop_first=True)\nfinal_df['BsmtFinType2']=pd.get_dummies(final_df['BsmtFinType2'],drop_first=True)\nfinal_df['Heating']=pd.get_dummies(final_df['Heating'],drop_first=True)\nfinal_df['HeatingQC']=pd.get_dummies(final_df['HeatingQC'],drop_first=True)\nfinal_df['CentralAir']=pd.get_dummies(final_df['CentralAir'],drop_first=True)\nfinal_df['Electrical']=pd.get_dummies(final_df['Electrical'],drop_first=True)\nfinal_df['KitchenQual']=pd.get_dummies(final_df['KitchenQual'],drop_first=True)\nfinal_df['Functional']=pd.get_dummies(final_df['Functional'],drop_first=True)\nfinal_df['GarageType']=pd.get_dummies(final_df['GarageType'],drop_first=True)\nfinal_df['GarageFinish']=pd.get_dummies(final_df['GarageFinish'],drop_first=True)\nfinal_df['GarageQual']=pd.get_dummies(final_df['GarageQual'],drop_first=True)\nfinal_df['GarageCond']=pd.get_dummies(final_df['GarageCond'],drop_first=True)\nfinal_df['PavedDrive']=pd.get_dummies(final_df['PavedDrive'],drop_first=True)\nfinal_df['SaleType']=pd.get_dummies(final_df['SaleType'],drop_first=True)\nfinal_df['SaleCondition']=pd.get_dummies(final_df['SaleCondition'],drop_first=True)\nfinal_df['RoofMatl']=pd.get_dummies(final_df['RoofMatl'],drop_first=True)","c50e0ab9":"final_df","3c341b32":"training=final_df.iloc[:1460]","788c2093":"training","fc4d220f":"testing=final_df.iloc[1460:,:-1]","fd10edbf":"testing","587f70ef":"x_train=training.drop(['SalePrice'],axis=1)\ny_train=training['SalePrice']","9cbda5dc":"x_train.info()","dbff95e7":"import numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nmodel=RandomForestRegressor()\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\n# max_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15, 100]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 5, 10]","fc59072a":"random_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}\n\nprint(random_grid)","a154e3ca":"from sklearn.model_selection import RandomizedSearchCV\ncv = RandomizedSearchCV(estimator = model, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)","1eabf9d9":"cv.fit(x_train,y_train)","99210d98":"cv.best_estimator_","ea5bb7d2":"rf = RandomForestRegressor(max_depth=25, max_features='sqrt', n_estimators=1000)","def9e579":"rf.fit(x_train,y_train)","5b7e3b27":"rf.predict(testing)","3f18efec":"## We can remove [\"Alley\",\"FireplaceQu\",\"PoolQC\",\"Fence\",\"MiscFeature\"] from final_df  because they are having more than 50 precent missing values","d28e3b2a":"## We can fill with values with mean [\"LotFrontage\",'MasVnrArea',\"BsmtFinSF1\",\"BsmtFinSF2\",\"BsmtUnfSF\",\"TotalBsmtSF\",\"BsmtFullBath\",\"BsmtHalfBath\",\"GarageYrBlt\",\"GarageCars\",\"GarageArea\"]","8a9ede31":"## We are skiping saleprice because we know saleprice having nan values","5b574e14":"# We cannot remove saleprice because we all know that we have concatenate the train and test data that's why it is showing the missing values","c0a71fd5":"## Finding the Percentage of Missing Values in Categorical DATA","892c9280":"## Now next step to fill the remaining columns missing values with mode ","b27061ee":"## We can see there is no duplciates values","e0510d99":"# Now finally we already filled our null values in features. Now use one hot encoding to our categorical data","6f08214f":"## Now we can sepearate our data into training and testing","7c9fa265":"## In test data we do not have any saleprice it means if we concatenate both dataframes it will how a nan value. But it is ok because we will remove those data while trainig"}}