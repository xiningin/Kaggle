{"cell_type":{"146bb0dd":"code","a74d35f3":"code","aba31977":"code","d3157bff":"code","f60da740":"code","81104a47":"code","4387ddc5":"code","d277fdd0":"code","c612b9dc":"code","a6684244":"code","a11732b5":"code","fc45f24b":"code","8a2ed1f5":"code","04dd572d":"code","6be1be78":"code","f3411a97":"code","09b216e4":"code","387feefc":"code","c7b8dfc9":"code","59c8faff":"code","39000ba2":"markdown","e6659eb7":"markdown","63ad49d7":"markdown","fb4e8a01":"markdown","04c0e295":"markdown","48903eac":"markdown"},"source":{"146bb0dd":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np\nfrom pathlib import Path\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)","a74d35f3":"data_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\ntraining_tasks = sorted(os.listdir(training_path))\neval_tasks = sorted(os.listdir(evaluation_path))","aba31977":"T = training_tasks\nTrains = []\nfor i in range(400):\n    task_file = str(training_path \/ T[i])\n    task = json.load(open(task_file, 'r'))\n    Trains.append(task)\n    \nE = eval_tasks\nEvals= []\nfor i in range(400):\n    task_file = str(evaluation_path \/ E[i])\n    task = json.load(open(task_file, 'r'))\n    Evals.append(task)","d3157bff":"cmap = colors.ListedColormap(\n    ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n# 0:black, 1:blue, 2:red, 3:greed, 4:yellow,\n# 5:gray, 6:magenta, 7:orange, 8:sky, 9:brown\nplt.figure(figsize=(5, 2), dpi=200)\nplt.imshow([list(range(10))], cmap=cmap, norm=norm)\nplt.xticks(list(range(10)))\nplt.yticks([])\nplt.show()\n\ndef plot_task(task):\n    n = len(task[\"train\"]) + len(task[\"test\"])\n    fig, axs = plt.subplots(2, n, figsize=(4*n,8), dpi=50)\n    plt.subplots_adjust(wspace=0, hspace=0)\n    fig_num = 0\n    for i, t in enumerate(task[\"train\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Train-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Train-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    for i, t in enumerate(task[\"test\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Test-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Test-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    \n    plt.tight_layout()\n    plt.show()","f60da740":"def plot_picture(x):\n    plt.imshow(np.array(x), cmap = cmap, norm = norm)\n    plt.show()","81104a47":"def Defensive_Copy(A): \n    n = len(A)\n    k = len(A[0])\n    L = np.zeros((n,k), dtype = int)\n    for i in range(n):\n        for j in range(k):\n            L[i,j] = 0 + A[i][j]\n    return L.tolist()","4387ddc5":"def Create(task, task_id = 0):\n    n = len(task['train'])\n    Input = [Defensive_Copy(task['train'][i]['input']) for i in range(n)]\n    Output = [Defensive_Copy(task['train'][i]['output']) for i in range(n)]\n    Input.append(Defensive_Copy(task['test'][task_id]['input']))\n    return Input, Output","d277fdd0":"def Recolor(task):\n    Input = task[0]\n    Output = task[1]\n    Test_Picture = Input[-1]\n    Input = Input[:-1]\n    N = len(Input)\n    \n    for x, y in zip(Input, Output):\n        if len(x) != len(y) or len(x[0]) != len(y[0]):\n            return -1\n        \n    Best_Dict = -1\n    Best_Q1 = -1\n    Best_Q2 = -1\n    Best_v = -1\n    # v ranges from 0 to 3. This gives an extra flexibility of measuring distance from any of the 4 corners\n    Pairs = []\n    for t in range(15):\n        for Q1 in range(1,8):\n            for Q2 in range(1,8):\n                if Q1+Q2 == t:\n                    Pairs.append((Q1,Q2))\n                    \n    for Q1, Q2 in Pairs:\n        for v in range(4):\n    \n  \n            if Best_Dict != -1:\n                continue\n            possible = True\n            Dict = {}\n                      \n            for x, y in zip(Input, Output):\n                n = len(x)\n                k = len(x[0])\n                for i in range(n):\n                    for j in range(k):\n                        if v == 0 or v ==2:\n                            p1 = i%Q1\n                        else:\n                            p1 = (n-1-i)%Q1\n                        if v == 0 or v ==3:\n                            p2 = j%Q2\n                        else :\n                            p2 = (k-1-j)%Q2\n                        color1 = x[i][j]\n                        color2 = y[i][j]\n                        if color1 != color2:\n                            rule = (p1, p2, color1)\n                            if rule not in Dict:\n                                Dict[rule] = color2\n                            elif Dict[rule] != color2:\n                                possible = False\n            if possible:\n                \n                # Let's see if we actually solve the problem\n                for x, y in zip(Input, Output):\n                    n = len(x)\n                    k = len(x[0])\n                    for i in range(n):\n                        for j in range(k):\n                            if v == 0 or v ==2:\n                                p1 = i%Q1\n                            else:\n                                p1 = (n-1-i)%Q1\n                            if v == 0 or v ==3:\n                                p2 = j%Q2\n                            else :\n                                p2 = (k-1-j)%Q2\n                           \n                            color1 = x[i][j]\n                            rule = (p1,p2,color1)\n                            \n                            if rule in Dict:\n                                color2 = 0 + Dict[rule]\n                            else:\n                                color2 = 0 + y[i][j]\n                            if color2 != y[i][j]:\n                                possible = False \n                if possible:\n                    Best_Dict = Dict\n                    Best_Q1 = Q1\n                    Best_Q2 = Q2\n                    Best_v = v\n                \n                \n    if Best_Dict == -1:\n        return -1 #meaning that we didn't find a rule that works for the traning cases\n    \n    #Otherwise there is a rule: so let's use it:\n    n = len(Test_Picture)\n    k = len(Test_Picture[0])\n    \n    answer = np.zeros((n,k), dtype = int)\n   \n    for i in range(n):\n        for j in range(k):\n            if Best_v == 0 or Best_v ==2:\n                p1 = i%Best_Q1\n            else:\n                p1 = (n-1-i)%Best_Q1\n            if Best_v == 0 or Best_v ==3:\n                p2 = j%Best_Q2\n            else :\n                p2 = (k-1-j)%Best_Q2\n           \n            color1 = Test_Picture[i][j]\n            rule = (p1, p2, color1)\n            if (p1, p2, color1) in Best_Dict:\n                answer[i][j] = 0 + Best_Dict[rule]\n            else:\n                answer[i][j] = 0 + color1\n                                    \n           \n            \n    return answer.tolist()","c612b9dc":"Function = Recolor","a6684244":"training_examples = []\nfor i in range(400):\n    task = Trains[i]\n    basic_task = Create(task,0)\n    a = Function(basic_task)\n  \n    if  a != -1 and task['test'][0]['output'] == a:\n        plot_picture(a)\n        plot_task(task)\n        print(i)\n        training_examples.append(i)      ","a11732b5":"print(len(training_examples))\nprint(training_examples)","fc45f24b":"evaluation_examples = []\n\n\nfor i in range(400):\n    task = Evals[i]\n    basic_task = Create(task,0)\n    a = Function(basic_task)\n    \n    if a != -1 and task['test'][0]['output'] == a:\n       \n        plot_picture(a)\n        plot_task(task)\n        print(i)\n        evaluation_examples.append(i)        ","8a2ed1f5":"print(len(evaluation_examples))\nprint(evaluation_examples)","04dd572d":"submission = pd.read_csv(data_path\/ 'sample_submission.csv')\nsubmission.head()","6be1be78":"def flattener(pred):\n    str_pred = str([row for row in pred])\n    str_pred = str_pred.replace(', ', '')\n    str_pred = str_pred.replace('[[', '|')\n    str_pred = str_pred.replace('][', '|')\n    str_pred = str_pred.replace(']]', '|')\n    return str_pred","f3411a97":"example_grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ndisplay(example_grid)\nprint(flattener(example_grid))","09b216e4":"Solved = []\nProblems = submission['output_id'].values\nProposed_Answers = []\nfor i in  range(len(Problems)):\n    output_id = Problems[i]\n    task_id = output_id.split('_')[0]\n    pair_id = int(output_id.split('_')[1])\n    f = str(test_path \/ str(task_id + '.json'))\n   \n    with open(f, 'r') as read_file:\n        task = json.load(read_file)\n    \n    n = len(task['train'])\n    Input = [Defensive_Copy(task['train'][j]['input']) for j in range(n)]\n    Output = [Defensive_Copy(task['train'][j]['output']) for j in range(n)]\n    Input.append(Defensive_Copy(task['test'][pair_id]['input']))\n    \n    solution = Recolor([Input, Output])\n   \n    \n    pred = ''\n        \n    if solution != -1:\n        Solved.append(i)\n        pred1 = flattener(solution)\n        pred = pred+pred1+' '\n        \n    if pred == '':\n        pred = flattener(example_grid)\n        \n    Proposed_Answers.append(pred)\n    \nsubmission['output'] = Proposed_Answers\nsubmission.to_csv('submission.csv', index = False)","387feefc":"print(Solved)","c7b8dfc9":"submission2 = pd.read_csv('submission.csv')\nsubmission2.tail(25)","59c8faff":"submission2.head()","39000ba2":"# Getting the data","e6659eb7":"# Results on the evaluation set","63ad49d7":"# The Idea:\nLook at training examples, where the size of the input is the same as the size of the output, and the new color of the pixel at coordinate i,j can depend on the old color and i mod Q1 and j mod Q2, where Q1 and Q2 are some small integers. \n","fb4e8a01":"# Results on Training set","04c0e295":"# Scores:\n\nTraining: 5\/400\n\nEvaluation: 1\/400\n\nTest: 1\/100\n\nThis is the simplest idea I tried so far, and was quite surprised it worked. \n\nIt seems you just need 99 other ideas....\n","48903eac":"# Helper Functions"}}