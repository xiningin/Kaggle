{"cell_type":{"3629e3e4":"code","0232a0e7":"code","6ddabdd2":"code","9a38291e":"code","0463a516":"code","b1114245":"code","5fd50882":"code","c40b1ff4":"code","d73aef22":"code","66f41613":"code","21137f31":"code","c1a735d9":"code","aeea7772":"code","63bf63e8":"code","e236d1d7":"code","df09e411":"code","c9f7bd71":"code","811e2432":"code","625d8c6c":"code","6e859e73":"code","94a57733":"code","14eb84ce":"code","e4b1663e":"code","ed3536ab":"code","306fe619":"code","dbb27254":"code","3a31953d":"code","7636645e":"code","30a82669":"code","d0c2f1f7":"code","7dea29c0":"code","fa43e36b":"code","ff66e60f":"code","7d7e45a3":"code","cc30e86b":"code","6fcd26a0":"code","05dd9b43":"code","6b96b228":"code","b5bb15bd":"code","d7a4ae1c":"code","1928dfac":"code","86715f4b":"code","39001857":"code","6eda9c27":"code","96767043":"code","6e5d35bf":"code","2f7e1c49":"code","8271ea82":"code","e83c6376":"code","53679e4f":"code","47b04357":"code","200f4d59":"code","3d7e7395":"code","8c57de45":"code","40496ace":"code","0697af63":"code","f1c3d228":"code","8fcf7e98":"code","e48a74b1":"code","464789fa":"code","a94e2b3d":"code","b044786d":"code","7ed7e7b4":"code","00f4ab62":"code","42d724f3":"code","4ba274a8":"code","4b687543":"code","877b4bf3":"code","829ae1e5":"code","5901e518":"code","b2a34d75":"code","de159d36":"code","283efbbd":"code","987d15be":"code","af7d1190":"code","431a0ee5":"code","e0d8adea":"code","cf690d80":"code","fdc70f9c":"code","54113fc3":"code","b09b8d8c":"code","8fe0c0c7":"code","ab22897b":"code","57bb1c33":"code","fc03a56b":"code","a3077920":"code","cd6698f1":"code","60d53e59":"markdown","bbb06cc0":"markdown","387aaa40":"markdown","41cecb55":"markdown","90ae0da1":"markdown","28789ea1":"markdown","0b9fc729":"markdown","ee1bbff8":"markdown","aa8e2431":"markdown","de31ed7b":"markdown","f83fb9d9":"markdown","cdfddaff":"markdown","5c1a6ad5":"markdown","7eff99fb":"markdown","0f5d6b3f":"markdown","77d8e2b7":"markdown","610b9e3f":"markdown","5ff48a25":"markdown","c9d34683":"markdown","2fc5a702":"markdown","d82e7929":"markdown","2089a582":"markdown","fb9b3ff3":"markdown","14ee14d8":"markdown","2521accd":"markdown","3e88561d":"markdown","d37f6102":"markdown","d42e0901":"markdown","2f892d50":"markdown","23cc10f1":"markdown","a663ce98":"markdown","ae17b0a3":"markdown","bba7b22f":"markdown","a0615f89":"markdown","76e433fa":"markdown"},"source":{"3629e3e4":"from IPython.display import Image\nImage(url= \"https:\/\/static1.squarespace.com\/static\/5006453fe4b09ef2252ba068\/5095eabce4b06cb305058603\/5095eabce4b02d37bef4c24c\/1352002236895\/100_anniversary_titanic_sinking_by_esai8mellows-d4xbme8.jpg\")","0232a0e7":"import pandas as pd\n\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","6ddabdd2":"train.head(80)","9a38291e":"test.head()","0463a516":"train.shape","b1114245":"test.shape","5fd50882":"train.info()","c40b1ff4":"test.info()","d73aef22":"train.isnull().sum()","66f41613":"test.isnull().sum()","21137f31":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set() # setting seaborn default for plots","c1a735d9":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","aeea7772":"bar_chart('Sex')","63bf63e8":"bar_chart('Pclass')","e236d1d7":"bar_chart('SibSp')","df09e411":"bar_chart('Parch')","c9f7bd71":"bar_chart('Embarked')","811e2432":"train.head()","625d8c6c":"Image(url= \"https:\/\/static1.squarespace.com\/static\/5006453fe4b09ef2252ba068\/t\/5090b249e4b047ba54dfd258\/1351660113175\/TItanic-Survival-Infographic.jpg?format=1500w\")","6e859e73":"train.head(10)","94a57733":"train_test_data = [train, test] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","14eb84ce":"train['Title'].value_counts()","e4b1663e":"test['Title'].value_counts()","ed3536ab":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","306fe619":"train.head()","dbb27254":"test.head()","3a31953d":"bar_chart('Title')","7636645e":"# delete unnecessary feature from dataset\ntrain.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)","30a82669":"train.head()","d0c2f1f7":"test.head()","7dea29c0":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","fa43e36b":"bar_chart('Sex')","ff66e60f":"train.head(100)","7d7e45a3":"# fill missing age with median age for each title (Mr, Mrs, Miss, Others)\ntrain[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","cc30e86b":"train.head(30)\ntrain.groupby(\"Title\")[\"Age\"].transform(\"median\")","6fcd26a0":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\n \nplt.show()","05dd9b43":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","6b96b228":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(20, 30)","b5bb15bd":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(30, 40)","d7a4ae1c":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","1928dfac":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","86715f4b":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(60)","39001857":"train.info()","6eda9c27":"test.info()","96767043":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3,\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","6e5d35bf":"train.head()","2f7e1c49":"bar_chart('Age')","8271ea82":"Pclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","e83c6376":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","53679e4f":"train.head()","47b04357":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","200f4d59":"# fill missing Fare with median fare for each Pclass\ntrain[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntrain.head(50)","3d7e7395":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\n \nplt.show()","8c57de45":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","40496ace":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 30)","0697af63":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0)","f1c3d228":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0,\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2,\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","8fcf7e98":"train.head()","e48a74b1":"train.Cabin.value_counts()","464789fa":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","a94e2b3d":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","b044786d":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","7ed7e7b4":"# fill missing Fare with median fare for each Pclass\ntrain[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","00f4ab62":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","42d724f3":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, train['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","4ba274a8":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","4b687543":"train.head()","877b4bf3":"train.head()","829ae1e5":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)","5901e518":"train_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_data.shape, target.shape","b2a34d75":"train_data.head(10)","de159d36":"# Importing Classifier Modules\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np","283efbbd":"train.info()","987d15be":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","af7d1190":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","431a0ee5":"round(np.mean(score)*100, 2)","e0d8adea":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","cf690d80":"round(np.mean(score)*100, 2)\n","fdc70f9c":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","54113fc3":"round(np.mean(score)*100, 2)","b09b8d8c":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","8fe0c0c7":"round(np.mean(score)*100, 2)\n","ab22897b":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","57bb1c33":"round(np.mean(score)*100,2)","fc03a56b":"clf = SVC()\nclf.fit(train_data, target)\n\ntest_data = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)","a3077920":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","cd6698f1":"submission = pd.read_csv('submission.csv')\nsubmission.head()","60d53e59":"Bar Chart for Categorical Features\nPclass\nSex\nSibSp ( # of siblings and spouse)\nParch ( # of parents and children)\nEmbarked\nCabin","bbb06cc0":"7. Testing","387aaa40":"Title map\nMr : 0\nMiss : 1\nMrs: 2\nOthers: 3","41cecb55":"We can see that Age value is missing for many rows.\n\nOut of 891 rows, the Age value is present only in 714 rows.\n\nSimilarly, Cabin values are also missing in many rows. Only 204 out of 891 rows have Cabin values.","90ae0da1":"Data Dictionary\nSurvived: 0 = No, 1 = Yes\npclass: Ticket class 1 = 1st, 2 = 2nd, 3 = 3rd\nsibsp: # of siblings \/ spouses aboard the Titanic\nparch: # of parents \/ children aboard the Titanic\nticket: Ticket number\ncabin: Cabin number\nembarked: Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton","28789ea1":"4.5 Embarked\n4.5.1 filling missing values","0b9fc729":"4. Feature engineering\nFeature engineering is the process of using domain knowledge of the data\nto create features (feature vectors) that make machine learning algorithms work.\n\nfeature vector is an n-dimensional vector of numerical features that represent some object.\nMany algorithms in machine learning require a numerical representation of objects,\nsince such representations facilitate processing and statistical analysis.","ee1bbff8":"2. Collecting the data\ntraining data set and testing data set are given by Kaggle you can download from kaggle directly kaggle\n\nload train, test dataset using Pandas\n","aa8e2431":"male: 0 female: 1","de31ed7b":"The Chart confirms Women more likely survivied than Men","f83fb9d9":"6.2 Cross Validation (K-fold)","cdfddaff":"4.6 Fare","5c1a6ad5":"1. Defining the problem statement\nComplete the analysis of what sorts of people were likely to survive.\nIn particular, we ask you to apply the tools of machine learning to predict which passengers survived the Titanic tragedy.","7eff99fb":"4.8 FamilySize","0f5d6b3f":"There are 177 rows with missing Age, 687 rows with missing Cabin and 2 rows with missing Embarked information.","77d8e2b7":"5. Modelling","610b9e3f":"The Chart confirms a person aboarded with more than 2 parents or children more likely survived\nThe Chart confirms a person aboarded alone more likely dead","5ff48a25":"import python lib for visualization\n","c9d34683":"4.4.2 Binning\nBinning\/Converting Numerical Age to Categorical Variable\n\nfeature vector map:\nchild: 0\nyoung: 1\nadult: 2\nmid-age: 3\nsenior: 4","2fc5a702":"4.3 Sex","d82e7929":"more than 50% of 1st class are from S embark\nmore than 50% of 2nd class are from S embark\nmore than 50% of 3rd class are from S embark\n\nfill out missing embark with S embark","2089a582":"4.1 how titanic sank?\nsank from the bow of the ship where third class rooms located\nconclusion, Pclass is key feature for classifier","fb9b3ff3":"The Chart confirms 1st class more likely survivied than other classes\nThe Chart confirms 3rd class more likely dead than other classes","14ee14d8":"4.2 Name","2521accd":"6.2.2 Decision Tree","3e88561d":"The Chart confirms a person aboarded from C slightly more likely survived\nThe Chart confirms a person aboarded from Q more likely dead\nThe Chart confirms a person aboarded from S more likely dead","d37f6102":"4.7 Cabin","d42e0901":"6.2.1 kNN","2f892d50":"The Chart confirms a person aboarded with more than 2 siblings or spouse more likely survived\nThe Chart confirms a person aboarded without siblings or spouse more likely dead","23cc10f1":"4.4 Age\n4.4.1 some age is missing\nLet's use Title's median age for missing Age","a663ce98":"6.2.5 SVM","ae17b0a3":"3. Exploratory data analysis\nPrinting first 5 rows of the train dataset.","bba7b22f":"Total rows and columns\n\nWe can see that there are 891 rows and 12 columns in our training dataset.","a0615f89":"6.2.3 Ramdom Forest","76e433fa":"6.2.4 Naive Bayes"}}