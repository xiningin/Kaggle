{"cell_type":{"b214e185":"code","08a0bda1":"code","22ce18d5":"code","10a3bdd0":"code","bfb03474":"code","0cc90d1f":"code","5450c13e":"code","95bf328d":"code","e7b2c2e3":"code","1c65edfa":"code","01548431":"code","1b4fdf04":"code","8b73fcb7":"code","0fc9e2de":"code","d0db8352":"code","458d5574":"code","4ffb6f17":"code","ea212b02":"code","b0e5bb64":"code","6ab2c2b3":"code","339a8851":"code","d348bffb":"code","73f4cba7":"markdown","e6cb40d7":"markdown","6f626243":"markdown","5c8ef826":"markdown","325214fb":"markdown","f4f769fe":"markdown","cacd5157":"markdown","320dc1a0":"markdown","f7bce19b":"markdown","d4a3e4cc":"markdown","ca3409cb":"markdown"},"source":{"b214e185":"import numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nimport time\nimport seaborn as sns\nimport matplotlib.pyplot as plt","08a0bda1":"movies_df = pd.read_csv('\/kaggle\/input\/movies-on-netflix-prime-video-hulu-and-disney\/MoviesOnStreamingPlatforms_updated.csv')\n\nmovies_df.info()","22ce18d5":"movies_df.head()","10a3bdd0":"movies_df = pd.melt(movies_df, id_vars = ['ID', 'Title', 'Year', 'Age', 'IMDb', 'Rotten Tomatoes', 'Type', 'Directors', 'Genres', 'Country', 'Language'], \n        value_vars = ['Netflix', 'Hulu', 'Prime Video', 'Disney+'], var_name = 'Streaming Platform')\nmovies_df = movies_df[movies_df['value'] == 1].drop(['value', 'Type'], axis = 1) #Type is being dropped here because the value will always be 0, since the whole dataset represents only movies\nmovies_df.head()","bfb03474":"movies_count = movies_df.groupby('Streaming Platform', as_index = False).count()\nmovies_count = movies_count[['Streaming Platform', 'ID']].rename({'ID' : 'Count'}, axis = 'columns')\nmovies_count = movies_count.sort_values(by = 'Count', ascending = False)\ncolor_map={\n    \"Prime Video\": \"rgb(4, 165, 222)\",\n    \"Netflix\": \"rgb(223, 9, 18)\",\n    \"Hulu\": \"rgb(2, 228, 119)\",\n    \"Disney+\": \"rgb(0, 0, 0)\"\n}\n\nimport plotly.express as px\n\nfig = px.bar(movies_count, y='Streaming Platform', x=\"Count\", color=\"Streaming Platform\", orientation=\"h\",\n             color_discrete_map= color_map, text = \"Count\"\n            )\n\nfig.update_layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title=\"Number of movies offered by platform\",\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='Streaming Platform',\n        titlefont_size=16,\n        tickfont_size=14\n    ),\n    legend=dict(\n        x=1,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n)\n\nfig.show()","0cc90d1f":"list_of_sp = movies_count['Streaming Platform'].tolist()\n\nmovies_df_not_null = movies_df[~movies_df['IMDb'].isnull()]\n\nfig = go.Figure()\n\nrows_counter = 0\nfor sp, clr in zip(list_of_sp, color_map.values()):\n        \n        fig.add_trace(go.Box(\n            x=movies_df_not_null[movies_df_not_null['Streaming Platform'] == sp]['Streaming Platform'],\n            y=movies_df_not_null[movies_df_not_null['Streaming Platform'] == sp]['IMDb'],\n            name=sp,\n            boxpoints='all',\n            jitter=0.5,\n            whiskerwidth=0.2,\n            fillcolor=clr,\n            marker_size=2,\n            line_width=1)\n        )\n        \n        min_value = round(np.percentile(movies_df_not_null[movies_df_not_null['Streaming Platform'] == sp]['IMDb'], 0), 2)\n        first_quartile = round(np.percentile(movies_df_not_null[movies_df_not_null['Streaming Platform'] == sp]['IMDb'], 25), 2)\n        median = round(np.percentile(movies_df_not_null[movies_df_not_null['Streaming Platform'] == sp]['IMDb'], 50), 2)\n        third_quartile = round(np.percentile(movies_df_not_null[movies_df_not_null['Streaming Platform'] == sp]['IMDb'], 75), 2)\n        max_value = round(np.percentile(movies_df_not_null[movies_df_not_null['Streaming Platform'] == sp]['IMDb'], 100), 2)\n        \n        for y_desc, y_value in zip(('MinV: ', 'Q1: ', 'Med: ', 'Q3: ', 'MaxV: '), (min_value, first_quartile, median, third_quartile, max_value)):\n        \n            fig.add_annotation(\n                        x=rows_counter + 0.35,\n                        ax = 0,\n                        ay = 0,\n                        y=y_value,\n                        text=y_desc + str(y_value))\n\n        rows_counter += 1\n        \nfig.update_layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title='Distribution of movies IMDb score by streaming platform',\n    yaxis=dict(\n        title='IMDb score',\n        titlefont_size=16,\n        tickfont_size=14\n    ))\n\n        \nfig.show()","5450c13e":"movies_df.sort_values(by = 'IMDb', ascending = False, inplace = True)\nresults_list = {}\nfor sp in movies_count['Streaming Platform'].tolist():\n    sp_best_df = movies_df[movies_df['Streaming Platform'] == sp].head(n = 52)\n    IMDb_mean = round(sp_best_df['IMDb'].mean(), 2)\n    results_list[sp] = IMDb_mean\nbest_movies_df = pd.DataFrame.from_dict(results_list, orient = 'index', columns = ['AVG Score']).sort_values(by = 'AVG Score', ascending = True)","95bf328d":"fig = px.bar(best_movies_df, y=best_movies_df.index, x=\"AVG Score\", color=best_movies_df.index, orientation=\"h\",\n             color_discrete_map = color_map, text = \"AVG Score\"\n            )\n\nfig.update_layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title=\"Average score of the best 52 movies by platform\",\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='Streaming Platform',\n        titlefont_size=16,\n        tickfont_size=14\n    ),\n    xaxis = dict(\n        range = [best_movies_df['AVG Score'].min() - 0.1, best_movies_df['AVG Score'].max() + 0.1],\n        title = \"Average Score\"\n    ),\n    legend=dict(\n        x=1,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)',\n        title = 'Streaming Platform'\n    ),\n)\n\nfig.show()","e7b2c2e3":"genres_split = movies_df['Genres'].str.get_dummies(',')\ngenres_movie_df = pd.concat([movies_df, genres_split], axis = 1)\ngenres_movie_df = pd.melt(genres_movie_df, id_vars = ['ID', 'Title', 'Year', 'Age', 'IMDb', 'Rotten Tomatoes', 'Directors', 'Genres', 'Country', 'Language', 'Streaming Platform'], \n        value_vars = genres_split.columns, var_name = 'Genre')\ngenres_movie_df = genres_movie_df[genres_movie_df['value'] == 1].drop(['value', 'Genres'], axis = 1)\ngenres_movie_df.head()","1c65edfa":"genres_count = genres_movie_df.groupby('Genre', as_index = False).count()\ngenres_count = genres_count[['Genre', 'ID']].rename({'ID' : 'Count'}, axis = 'columns')\ngenres_count = genres_count.sort_values(by = 'Count', ascending = False)\n\nimport plotly.express as px\n\nfig = px.bar(genres_count.head(n = 15), y='Genre', x=\"Count\", color='Genre', orientation=\"h\", text = \"Count\"\n            )\n\nfig.update_layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title=\"Number of movies segmented by genre\",\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='Movie genre',\n        titlefont_size=16,\n        tickfont_size=14\n    ),\n    legend=dict(\n        x=1,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n)\n\nfig.show()","01548431":"def segmented_boxplot_function(df, df_count, segmentation_column, segmentation_number):\n   \n    df_not_null = df[~df['IMDb'].isnull()]\n    list_top_segments = df_count[segmentation_column].tolist()\n    segment = list_top_segments[segmentation_number]\n    fig = go.Figure()\n\n    rows_counter = 0\n    for sp, clr in zip(list_of_sp, color_map.values()):\n\n            query_filter = (df_not_null['Streaming Platform'] == sp) & (df_not_null[segmentation_column] == segment)\n\n            fig.add_trace(go.Box(\n                x=df_not_null[query_filter]['Streaming Platform'],\n                y=df_not_null[query_filter]['IMDb'],\n                name=sp,\n                boxpoints='all',\n                jitter=0.5,\n                whiskerwidth=0.2,\n                fillcolor=clr,\n                marker_size=2,\n                line_width=1)\n            )\n\n            min_value = round(np.percentile(df_not_null[query_filter]['IMDb'], 0), 2)\n            first_quartile = round(np.percentile(df_not_null[query_filter]['IMDb'], 25), 2)\n            median = round(np.percentile(df_not_null[query_filter]['IMDb'], 50), 2)\n            third_quartile = round(np.percentile(df_not_null[query_filter]['IMDb'], 75), 2)\n            max_value = round(np.percentile(df_not_null[query_filter]['IMDb'], 100), 2)\n\n            for y_desc, y_value in zip(('MinV: ', 'Q1: ', 'Med: ', 'Q3: ', 'MaxV: '), (min_value, first_quartile, median, third_quartile, max_value)):\n\n                fig.add_annotation(\n                            x=rows_counter + 0.35,\n                            ax = 0,\n                            ay = 0,\n                            y=y_value,\n                            text=y_desc + str(y_value))\n\n            rows_counter += 1\n\n    fig.update_layout(\n                paper_bgcolor='rgba(0,0,0,0)',\n                plot_bgcolor='rgba(0,0,0,0)',\n                title='Distribution of movies IMDb score by ' + segment,\n                yaxis=dict(\n                    title='IMDb score',\n                    titlefont_size=16,\n                    tickfont_size=14\n                ))\n\n\n    fig.show()\n    ","1b4fdf04":"segmented_boxplot_function(genres_movie_df, genres_count, 'Genre', 0)","8b73fcb7":"segmented_boxplot_function(genres_movie_df, genres_count, 'Genre', 1)","0fc9e2de":"segmented_boxplot_function(genres_movie_df, genres_count, 'Genre', 2)","d0db8352":"segmented_boxplot_function(genres_movie_df, genres_count, 'Genre', 3)","458d5574":"segmented_boxplot_function(genres_movie_df, genres_count, 'Genre', 4)","4ffb6f17":"countries_split = movies_df['Country'].str.get_dummies(',')\ncountries_movie_df = pd.concat([movies_df, countries_split], axis = 1)\ncountries_movie_df = pd.melt(countries_movie_df, id_vars = ['ID', 'Title', 'Year', 'Age', 'IMDb', 'Rotten Tomatoes', 'Directors', 'Genres', 'Language', 'Streaming Platform'], \n        value_vars = countries_split.columns, var_name = 'Country')\ncountries_movie_df = countries_movie_df[countries_movie_df['value'] == 1].drop(['value'], axis = 1)\ncountries_movie_df","ea212b02":"countries_count = countries_movie_df.groupby('Country', as_index = False).count()\ncountries_count = countries_count[['Country', 'ID']].rename({'ID' : 'Count'}, axis = 'columns')\ncountries_count = countries_count.sort_values(by = 'Count', ascending = False)\n\nimport plotly.express as px\n\nfig = px.bar(countries_count.head(n = 15), y='Country', x=\"Count\", color='Country', orientation=\"h\", text = \"Count\"\n            )\n\nfig.update_layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title=\"Number of movies segmented by genre\",\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='Movie genre',\n        titlefont_size=16,\n        tickfont_size=14\n    ),\n    legend=dict(\n        x=1,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n)\n\nfig.show()","b0e5bb64":"segmented_boxplot_function(countries_movie_df, countries_count, 'Country', 0)","6ab2c2b3":"segmented_boxplot_function(countries_movie_df, countries_count, 'Country', 1)","339a8851":"segmented_boxplot_function(countries_movie_df, countries_count, 'Country', 2)","d348bffb":"segmented_boxplot_function(countries_movie_df, countries_count, 'Country', 3)","73f4cba7":"# Next steps:\n\nSo, for improvements in this kernel, it would be good to have TV Series in the dataset too, since the analysis would be a lot more robust. Also, we know that probably a lot of movies are missing in the dataset, since, for example, we have all the Star Wars and Lord of the Rings movies in Prime Video here in Brazil, but they are not present in the dataset, and with this lacking information we could create a function where we analyze each country separately.","e6cb40d7":"This is the type of data we have in our hands. The issue I see is that will be a little tough to compare platforms due to how the streaming platforms are set as columns. Firstly, let's unpivot this data so each movie from each platform has it's own register, even though this will \"duplicate\" some registers. ","6f626243":"# Which streaming platform to pick?\n\nThis is a brief study to analyze which is the best streaming platform one can choose, taking in to consideration the movies offered by the following platforms: \n\n* Netflix\n* Hulu\n* Prime Video\n* Disney +\n\nThe idea here is to show simple visualizations in which someone can quickly analyze which platform better suits their needs and maybe gather some good practices in data analysis.","5c8ef826":"Cool, so apparently Drama leads the way, followed by Comedy, Thriller, Action and then Documentary. Let's check the boxplot for each of those genres, separately. Just a reminder: It is better to just create a function for each boxplot, so we don't have to repeat ourselves in each boxplot chart.","325214fb":"If you have any more suggestion, such as types of chart that could be included or other kinds of analyses, feel free to include them in the comments! I hope that this helps someone that is in doubt of which platform to pick, but just don't forget that some movies are missing in the dataset! Thank you for reading!","f4f769fe":"Since we are working with a small number of movies, we can work with the average, since no outliers will mess up the numbers. Now we see a different pattern, similar to the number of movies offered by platform. Prime Video leading with Netflix right behing, and Hulu and Disney+ almost drawn. Now, let's see how are genres distributed. First, let's get the data in a easier way do deal with.","cacd5157":"Now, since the movies are also segmented by location in which the movies are available, let's do the exact same process, but to Genre to Country.","320dc1a0":"In this criteria we can see that Prime Video blows the competition away with almost 3\/4 of the total motives offered by the platforms, followed by Netflix. Let's see if quantity corresponds also to quality.","f7bce19b":"Here, similar to what we've done with Streaming Platforms, we create a record for each genre a movie may have, which becomes easier to mess with the data.","d4a3e4cc":"Even though the data did not show that much of a discrepancy between the platforms as the last analysis, now Disney+ emerged as victorious, with a better distribution, in general, of IMDb scores for its movies, followed by Netflix. But, let's say you are not so much of a hard user and will only watch 1 movie per week, resulting in 52 movies per year. Which platform has the best 52 movies?","ca3409cb":"Now, we have the data ready for some analysis, even though we can still do processing on the other rows, as Directors, Genres, Country and Language, but we will do that later.\n\nSo, which platform has the most movies to offer?"}}