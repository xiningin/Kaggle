{"cell_type":{"2b9f8b2d":"code","225d48ec":"code","a58446cf":"code","ffa57eee":"code","bcdaa50e":"code","77d4f0bb":"code","d126dd20":"code","c10bf637":"code","635a84bd":"code","d8fe970f":"code","955102fa":"code","fb1bf305":"code","dd7468d5":"code","ad6a4b43":"markdown","8b59597d":"markdown","fcdbafbd":"markdown","228266eb":"markdown","34b4afab":"markdown","dc461049":"markdown","ff3a321b":"markdown","2cc92962":"markdown"},"source":{"2b9f8b2d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","225d48ec":"import csv\ncsv_filename = \"\/kaggle\/input\/clash-royale-season-18-dec-0320-dataset\/BattlesStaging_12292020_WL_tagged\/BattlesStaging_12292020_WL_tagged.csv\"\nchunk_size = 500000\n\ntext_file_reader = pd.read_csv(csv_filename, engine='python',encoding='utf-8-sig', quoting=csv.QUOTE_MINIMAL, chunksize = chunk_size, index_col=0)","a58446cf":"dfList = []\ncounter = 0\n\nfor df in text_file_reader:\n    dfList.append(df)\n    counter= counter +1\n    print(\"Max rows read: \" + str(chunk_size * counter) )\n\n","ffa57eee":"df = pd.concat(dfList,sort=False)","bcdaa50e":"cardmasterlist_csv_filename = \"\/kaggle\/input\/clash-royale-season-18-dec-0320-dataset\/CardMasterListSeason18_12082020.csv\"\ndf_cardmasterlist = pd.read_csv(cardmasterlist_csv_filename, engine='python',encoding='utf-8-sig', quoting=csv.QUOTE_MINIMAL, index_col = 0)\ndf_cardmasterlist.reset_index(inplace=True)\ncardmasterlist_dict = dict(zip(df_cardmasterlist[\"team.card1.id\"],df_cardmasterlist[\"team.card1.name\"]))","77d4f0bb":"def arena_placer(row):\n    arena_name = None\n    \n    if(row['average.startingTrophies'] < 300):\n        arena_name = '01.Goblin Stadium'\n    elif ((row['average.startingTrophies'] >= 300)&(row['average.startingTrophies'] < 600)):\n        arena_name = '02.Bone Pit' \n    elif ((row['average.startingTrophies'] >= 600)&(row['average.startingTrophies'] < 1000)):\n        arena_name = '03.Barbarian Bowl'\n    #1000\n    elif ((row['average.startingTrophies'] >= 1000)&(row['average.startingTrophies'] < 1300)):\n        arena_name = '04.P.E.K.K.A\\'s Playhouse'\n    elif ((row['average.startingTrophies'] >= 1300)&(row['average.startingTrophies'] < 1600)):\n        arena_name = '05.Spell Valley'  \n    elif ((row['average.startingTrophies'] >= 1600)&(row['average.startingTrophies'] < 2000)):\n        arena_name = '06.Builder\\'s Workshop'\n    # 2000\n    elif ((row['average.startingTrophies'] >= 2000)&(row['average.startingTrophies'] < 2300)):\n        arena_name = '07.Royal Arena'\n    elif ((row['average.startingTrophies'] >= 2300)&(row['average.startingTrophies'] < 2600)):\n        arena_name = '08.Frozen Peak'  \n    elif ((row['average.startingTrophies'] >= 2600)&(row['average.startingTrophies'] < 3000)):\n        arena_name = '09.Jungle Arena'\n    # 3000\n    elif ((row['average.startingTrophies'] >= 3000)&(row['average.startingTrophies'] < 3300)):\n        arena_name = '10.Hog Mountain'\n    elif ((row['average.startingTrophies'] >= 3300)&(row['average.startingTrophies'] < 3600)):\n        arena_name = '11.Electro Valley'  \n    elif ((row['average.startingTrophies'] >= 3600)&(row['average.startingTrophies'] < 4000)):\n        arena_name = '12.Spooky Town'\n    # 4000\n    elif ((row['average.startingTrophies'] >= 4000)&(row['average.startingTrophies'] < 4300)):\n        arena_name = '13.Challenger I'\n    elif ((row['average.startingTrophies'] >= 4300)&(row['average.startingTrophies'] < 4600)):\n        arena_name = '14.Challenger II'\n    elif ((row['average.startingTrophies'] >= 4600)&(row['average.startingTrophies'] < 5000)):\n        arena_name = '15.Challenger III'\n    # 5000\n    elif ((row['average.startingTrophies'] >= 5000)&(row['average.startingTrophies'] < 5300)):\n        arena_name = '16.Master I'\n    elif ((row['average.startingTrophies'] >= 5300)&(row['average.startingTrophies'] < 5600)):\n        arena_name = '17.Master II'\n    elif ((row['average.startingTrophies'] >= 5600)&(row['average.startingTrophies'] < 6000)):\n        arena_name = '18.Master III'\n    # 6000\n    elif ((row['average.startingTrophies'] >= 6000)&(row['average.startingTrophies'] < 6300)):\n        arena_name = '19.Champion'\n    elif ((row['average.startingTrophies'] >= 6300)&(row['average.startingTrophies'] < 6600)):\n        arena_name = '20.Grand Champion'\n    elif ((row['average.startingTrophies'] >= 6600)&(row['average.startingTrophies'] < 7000)):\n        arena_name = '21.Royal Champion'         \n    elif(row['average.startingTrophies'] >= 7000):\n        arena_name = '22.Ultimate Champion' \n        \n    return arena_name\n\ndf['average.startingTrophies'] = df['average.startingTrophies'].fillna(0)\ndf['arena.name'] = None\ndf['arena.name'] = df.apply(arena_placer, axis=1)","d126dd20":"df_winner_card1 = df[['arena.name', 'winner.card1.id']].pivot_table(columns='winner.card1.id', index=['arena.name'], aggfunc=len, fill_value=0)\ndf_winner_card2 = df[['arena.name', 'winner.card2.id']].pivot_table(columns='winner.card2.id', index=['arena.name'], aggfunc=len, fill_value=0)\ndf_winner_card3 = df[['arena.name', 'winner.card3.id']].pivot_table(columns='winner.card3.id', index=['arena.name'], aggfunc=len, fill_value=0)\ndf_winner_card4 = df[['arena.name', 'winner.card4.id']].pivot_table(columns='winner.card4.id', index=['arena.name'], aggfunc=len, fill_value=0)\ndf_winner_card5 = df[['arena.name', 'winner.card5.id']].pivot_table(columns='winner.card5.id', index=['arena.name'], aggfunc=len, fill_value=0)\ndf_winner_card6 = df[['arena.name', 'winner.card6.id']].pivot_table(columns='winner.card6.id', index=['arena.name'], aggfunc=len, fill_value=0)\ndf_winner_card7 = df[['arena.name', 'winner.card7.id']].pivot_table(columns='winner.card7.id', index=['arena.name'], aggfunc=len, fill_value=0)\ndf_winner_card8 = df[['arena.name', 'winner.card8.id']].pivot_table(columns='winner.card8.id', index=['arena.name'], aggfunc=len, fill_value=0)\n","c10bf637":"df_loser_card1 = df[['arena.name', 'loser.card1.id']].pivot_table(columns='loser.card1.id', index=['arena.name'], aggfunc=len, fill_value=0)\ndf_loser_card2 = df[['arena.name', 'loser.card2.id']].pivot_table(columns='loser.card2.id', index=['arena.name'], aggfunc=len, fill_value=0)\ndf_loser_card3 = df[['arena.name', 'loser.card3.id']].pivot_table(columns='loser.card3.id', index=['arena.name'], aggfunc=len, fill_value=0)\ndf_loser_card4 = df[['arena.name', 'loser.card4.id']].pivot_table(columns='loser.card4.id', index=['arena.name'], aggfunc=len, fill_value=0)\ndf_loser_card5 = df[['arena.name', 'loser.card5.id']].pivot_table(columns='loser.card5.id', index=['arena.name'], aggfunc=len, fill_value=0)\ndf_loser_card6 = df[['arena.name', 'loser.card6.id']].pivot_table(columns='loser.card6.id', index=['arena.name'], aggfunc=len, fill_value=0)\ndf_loser_card7 = df[['arena.name', 'loser.card7.id']].pivot_table(columns='loser.card7.id', index=['arena.name'], aggfunc=len, fill_value=0)\ndf_loser_card8 = df[['arena.name', 'loser.card8.id']].pivot_table(columns='loser.card8.id', index=['arena.name'], aggfunc=len, fill_value=0)\n","635a84bd":"df_winner_combined = df_winner_card1 + df_winner_card2 + df_winner_card3 + df_winner_card4 + df_winner_card5 + df_winner_card6 + df_winner_card7 + df_winner_card8\ndf_loser_combined = df_loser_card1 + df_loser_card2 + df_loser_card3 + df_loser_card4 + df_loser_card5 + df_loser_card6 + df_loser_card7 + df_loser_card8\ndf_grand_totals = df_winner_combined + df_loser_combined","d8fe970f":"df_grand_totals = df_grand_totals.rename(columns=cardmasterlist_dict)","955102fa":"df_grand_totals.index = [x.split(\".\",1)[1] for x in df_grand_totals.index]","fb1bf305":"df_grand_totals","dd7468d5":"df_grand_totals.T","ad6a4b43":"### Load Masterlist of Cards Of Season 18","8b59597d":"### Define Arena Placer","fcdbafbd":"### Combine the values using vector addition","228266eb":"### Let's do an eye check","34b4afab":"### Pivot The Values Doing Length Grouped By Arena Name","dc461049":"### TODO\n### graphs, polishing, etc","ff3a321b":"### Let's Transpose columns to rows and vice-versa","2cc92962":"### Get a subset of the Data"}}