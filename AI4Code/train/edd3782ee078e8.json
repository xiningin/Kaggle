{"cell_type":{"ae1574c6":"code","a782af83":"code","093c4d33":"code","74e4cac1":"code","58cbfbbc":"code","8f566614":"code","4c91c120":"code","53cf3043":"code","7e819ae7":"code","9e1a7730":"code","9950bd99":"code","b214eee8":"code","ad4cd2ae":"code","12fa28b4":"code","0c8b8bdf":"code","38345d8f":"code","3d82dd38":"code","be6b7a5a":"code","fa0eb125":"code","9d42529f":"code","b8fc83dc":"code","a5dc77ff":"code","8b23f1ce":"code","d1ca53b6":"code","8ab2c893":"code","3b4097b1":"markdown","d17f6f1e":"markdown","b25068f1":"markdown","3dc67011":"markdown","947277ad":"markdown","0a4c863e":"markdown","ae4a7380":"markdown","126f2e4e":"markdown","f0ffe75c":"markdown"},"source":{"ae1574c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a782af83":"import re\nfrom numpy import mean, std\nfrom sklearn.impute import SimpleImputer\nimport seaborn as sns\nfrom matplotlib import *\nfrom matplotlib import pyplot as plt\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold, cross_val_score, RepeatedStratifiedKFold\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.base import TransformerMixin\nfrom lightgbm import LGBMClassifier","093c4d33":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ntrain_data.columns = train_data.columns.str.lower().str.strip().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')\ntest_data.columns = test_data.columns.str.lower().str.strip().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')","74e4cac1":"print('Train Data Shape: ', train_data.shape)\nprint('Test Data Shape: ', test_data.shape)\ntrain_data.head()","58cbfbbc":"train_data.dtypes","8f566614":"train_data.isnull().sum()","4c91c120":"test_data.isnull().sum()","53cf3043":"# Unique values for all the columns\nfor col in train_data.columns[~(train_data.columns.isin(['age', 'passengerid', 'survived', 'name', 'ticket', 'cabin', 'fare']))].tolist():\n    print(\" Unique Values --> \" + col, ':', len(train_data[col].unique()), ': ', train_data[col].unique())","7e819ae7":"i = 1\nfor column in train_data.columns[~(train_data.columns.isin(['age', 'passengerid', 'name', 'ticket', 'cabin', 'fare']))].tolist():\n    plt.figure(figsize = (40, 10))\n    plt.subplot(3, 3, i)\n    sns.barplot(x = train_data[column].value_counts().index, y = train_data[column].value_counts())\n    i += 1\n    plt.show()","9e1a7730":"train_data['type'] = 'train'\ntest_data['type'] = 'test'\nmaster_data = pd.concat([train_data, test_data])\n#master_data = master_data.sort_values(['id', 'type'], ascending = [True, False])\nmaster_data.head()","9950bd99":"plt.figure(figsize = (15, 6))\nsns.distplot(master_data.loc[(master_data['sex'] == 'male'), 'age'], kde_kws = {\"color\": \"b\", \"lw\": 1, \"label\": \"Male\"})\nsns.distplot(master_data.loc[(master_data['sex'] == 'female'), 'age'], kde_kws = {\"color\": \"r\", \"lw\": 1, \"label\": \"Female\"})\nplt.show()","b214eee8":"plt.figure(figsize = (15, 6))\nsns.distplot(master_data.loc[(master_data['sex'] == 'male'), 'fare'], kde_kws = {\"color\": \"b\", \"lw\": 1, \"label\": \"Male\"})\nsns.distplot(master_data.loc[(master_data['sex'] == 'female'), 'fare'], kde_kws = {\"color\": \"r\", \"lw\": 1, \"label\": \"Female\"})\nplt.show()","ad4cd2ae":"plt.figure(figsize = (15, 6))\nsns.boxplot(x = 'sex', y = 'age', hue = 'survived', palette = ['m', 'g'], data = train_data)\nplt.title('Suvival status by sex')\nsns.despine(offset = 10, trim = True)","12fa28b4":"plt.figure(figsize = (15, 6))\nsns.distplot(train_data.loc[(train_data['survived'] == 0), 'age'], kde_kws = {\"color\": \"b\", \"lw\": 1, \"label\": \"Not survived\"})\nsns.distplot(train_data.loc[(train_data['survived'] == 1), 'age'], kde_kws = {\"color\": \"r\", \"lw\": 1, \"label\": \"Survived\"})\nplt.title('Survived Age Density')\nsns.despine()","0c8b8bdf":"# Getting titles from names \n\nmaster_data['title']=master_data['name'].map(lambda x:x.split(',')[1].split('.')[0].strip())\nmaster_data['title'].value_counts()\n\nTitleDict={}\nTitleDict['Mr']='Mr'\nTitleDict['Mlle']='Miss'\nTitleDict['Miss']='Miss'\nTitleDict['Master']='Master'\nTitleDict['Jonkheer']='Master'\nTitleDict['Mme']='Mrs'\nTitleDict['Ms']='Mrs'\nTitleDict['Mrs']='Mrs'\nTitleDict['Don']='Royalty'\nTitleDict['Sir']='Royalty'\nTitleDict['the Countess']='Royalty'\nTitleDict['Dona']='Royalty'\nTitleDict['Lady']='Royalty'\nTitleDict['Capt']='Officer'\nTitleDict['Col']='Officer'\nTitleDict['Major']='Officer'\nTitleDict['Dr']='Officer'\nTitleDict['Rev']='Officer'\n\nmaster_data['title'] = master_data['title'].map(TitleDict)","38345d8f":"master_data['travelled_alone'] = np.where(master_data['sibsp'] + master_data['parch'] == 0, 'Y', 'N')\n#master_data['family_name'] = master_data['name'].apply(lambda x: x.split(',')[0].lower())\nmaster_data['cabin'] = master_data['cabin'].fillna('U')\nmaster_data['cabin_class'] = master_data['cabin'].apply(lambda x: x.split()[0].lower()[0])\ncolumns = ['cabin', 'cabin_class']\nmaster_data[columns] = master_data[columns].replace({'U': np.nan, 'u': np.nan})\nmaster_data['ticket'] = master_data['ticket'].apply(lambda x: re.sub(r'\\W+', '', x))\nmaster_data['ticket'] = master_data['ticket'].str.replace('\\d+', '')\nmaster_data['ticket'] = master_data['ticket'].str.replace(r'^\\s*$', 'GEN', regex = True)\nmaster_data.loc[master_data['ticket'].str.startswith('STO'), 'ticket'] = master_data.loc[master_data['ticket'].str.startswith('STON'), 'ticket'] = 'Z'\nmaster_data.loc[master_data['ticket'].str.startswith('SOT'), 'ticket'] = master_data.loc[master_data['ticket'].str.startswith('SO'), 'ticket'] = 'Z'\nmaster_data.loc[master_data['ticket'].str.endswith('PP'), 'ticket'] = master_data.loc[master_data['ticket'].str.startswith('SC'), 'ticket'] = 'Y'\nmaster_data.loc[master_data['ticket'].str.startswith('SC'), 'ticket'] = master_data.loc[master_data['ticket'].str.startswith('SC'), 'ticket'] = 'X'\nmaster_data = master_data.loc[~master_data.ticket.str.contains('SP')]\nmaster_data['ticket'] = master_data['ticket'].str[0]\n\nmaster_data['is_child'] = np.where(master_data['age'] < 18, 1, 0)\nmaster_data['is_female_child'] = np.where((master_data['age'] < 18) & (master_data['sex'] == 'female'), 1, 0)\n\nmaster_data.head()","3d82dd38":"le = LabelEncoder()\ncat_cols = ['pclass', 'sex', 'ticket', 'embarked', 'travelled_alone', 'cabin_class', 'title']\n\nfor col in cat_cols:\n    master_data[col] = master_data[col].astype(str)\n    LE = le.fit(master_data[col])\n    master_data[col] = LE.transform(master_data[col])\n    \ntrain_data = master_data.loc[master_data['type'] == 'train']\ntest_data = master_data.loc[master_data['type'] == 'test']\n\ntestIDs = test_data.passengerid.values\n\ntrain_data = train_data.drop(['passengerid', 'name', 'cabin', 'type'], axis = 1)\ntest_data = test_data.drop(['passengerid', 'name', 'cabin', 'type', 'survived'], axis = 1)\n\ntrain_data = train_data.fillna('NaN')\ntest_data = test_data.fillna('NaN')\n\ntrain_data['survived'] = train_data['survived'].astype(np.int8)\n\n# Partitioning the features and the target\n\nX = train_data[train_data.columns[~(train_data.columns.isin(['survived']))].tolist()].values\ny = train_data['survived'].values\n\ntrain_data.head()","be6b7a5a":"kfold, scores = KFold(n_splits = 6, shuffle = True, random_state = 22), list()\nfor train, test in kfold.split(X):\n    X_train, X_test = X[train], X[test]\n    y_train, y_test = y[train], y[test]\n    \n    model = CatBoostClassifier(random_state = 22, max_depth = 6, n_estimators = 200, verbose = 100)\n    model.fit(X_train, y_train, cat_features = [0,1,5,7,8,9,10,11,12])\n    preds = model.predict(X_test)\n    score = accuracy_score(y_test, preds)\n    scores.append(score)\n    print('Validation Accuracy:', score)\nprint(\"Average Validation Accuracy: \", sum(scores)\/len(scores))","fa0eb125":"pred = pd.DataFrame()\n#pred['ID'] = test_data['id'].values\npred['PassengerId'] = testIDs\npred['Survived'] = pd.Series((model.predict(test_data)).ravel())\npred.to_csv('catboost_v3.csv', index = None)\npred.head()","9d42529f":"class DataFrameImputer(TransformerMixin):\n\n    def __init__(self):\n        \"\"\"Impute missing values.\n\n        Columns of dtype object are imputed with the most frequent value \n        in column.\n\n        Columns of other types are imputed with mean of column.\n\n        \"\"\"\n    def fit(self, X, y=None):\n\n        self.fill = pd.Series([X[c].value_counts().index[0]\n            if X[c].dtype == np.dtype('O') else X[c].mean() for c in X],\n            index=X.columns)\n\n        return self\n\n    def transform(self, X, y=None):\n        return X.fillna(self.fill)","b8fc83dc":"# Imputer for numerical age: strategy - mean, and categorical Cabin: strategy - mode\n\nmaster_data = master_data.replace({'NaN': np.nan})\nmaster_data = DataFrameImputer().fit_transform(master_data)\n\ntrain_data = master_data.loc[master_data['type'] == 'train']\ntest_data = master_data.loc[master_data['type'] == 'test']\n\ntestIDs = test_data.passengerid.values\n\ntrain_data = train_data.drop(['passengerid', 'name', 'cabin', 'type'], axis = 1)\ntest_data = test_data.drop(['passengerid', 'name', 'cabin', 'type', 'survived'], axis = 1)\n\ntrain_data['survived'] = train_data['survived'].astype(np.int8)\n\n# Partitioning the features and the target\n\nX = train_data[train_data.columns[~(train_data.columns.isin(['survived']))].tolist()].values\ny = train_data['survived'].values\n\ntrain_data.head()","a5dc77ff":"model = LGBMClassifier()\ncv = RepeatedStratifiedKFold(n_splits = 10, n_repeats = 3, random_state = 22)\nn_scores = cross_val_score(model, X, y, scoring = 'accuracy', cv = cv, n_jobs = -1, error_score = 'raise')\nprint('Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))\n# fit the model on the whole dataset\nmodel = LGBMClassifier()\nmodel.fit(X, y)\n# make a single prediction\nyhat = model.predict(test_data)","8b23f1ce":"pred = pd.DataFrame()\n#pred['ID'] = test_data['id'].values\npred['PassengerId'] = testIDs\npred['Survived'] = pd.Series((model.predict(test_data)).ravel())\npred.to_csv('lightgbm_v3.csv', index = None)\npred.head()","d1ca53b6":"model = RandomForestClassifier(n_estimators = 100)\ncv = RepeatedStratifiedKFold(n_splits = 10, n_repeats = 3, random_state = 22)\nn_scores = cross_val_score(model, X, y, scoring = 'accuracy', cv = cv, n_jobs = -1, error_score = 'raise')\nprint('Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))\n# fit the model on the whole dataset\nmodel = RandomForestClassifier()\nmodel.fit(X, y)\n# make a single prediction\nyhat = model.predict(test_data)","8ab2c893":"pred = pd.DataFrame()\n#pred['ID'] = test_data['id'].values\npred['PassengerId'] = testIDs\npred['Survived'] = pd.Series((model.predict(test_data)).ravel())\npred.to_csv('rf_v3.csv', index = None)\npred.head()","3b4097b1":"1. There were outliers in the fare prices as high as 500+ (mostly ranges between 0 - 100)","d17f6f1e":"## Deductions:\n\n1. Most of the passengers were single, fewer travelled in a large group\n2. Most of the passengers didn't travel with siblings","b25068f1":"### Label Encoding features","3dc67011":"## LGBM Classifier ~ Val Accuracy - 0.82, Public LB - 0.74","947277ad":"## Exploratory data analysis","0a4c863e":"#### Most of the passengers travelling were aged 20-40","ae4a7380":"## Random Forest Classifier ~ Val Accuracy - 0.814, Public LB - 0.75","126f2e4e":"## Catboost Classifier ~ Val Accuracy - 0.82, Public LB - 0.77","f0ffe75c":"## Creating new features"}}