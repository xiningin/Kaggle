{"cell_type":{"fff1ec8f":"code","820eea60":"code","8fb675b1":"code","17354f43":"code","fc1c502d":"code","ccdde26a":"code","a7080d1a":"code","300cb1c7":"code","56634b05":"code","47d94218":"code","07153cd6":"code","b7df6fdd":"code","deb52cb5":"code","ea63906e":"code","f5238780":"code","658a0d09":"code","bb723ad3":"code","d76da81b":"code","b24610b8":"code","e2427c7b":"code","b2642d42":"code","c53cde2f":"code","e6417c4e":"code","a33f18a2":"code","3866e3b8":"code","b5799f29":"code","317039d4":"code","0ef27a9e":"code","91ae90b8":"code","39a4ca07":"code","803432c4":"code","c4204a77":"code","1a11b1ba":"code","5b7b3a36":"code","f9d7a51f":"code","de560c2b":"code","11958018":"code","3f347cc9":"code","c43192c8":"code","cd85e802":"code","75af84a3":"code","8600f09f":"code","712c773f":"code","82ce0eaf":"code","ed27721d":"code","3dcd524f":"code","270ffd9b":"code","71900994":"code","46dcbf62":"code","139980b4":"code","9ceafcc1":"code","f3213fce":"code","ee65b433":"code","b3fb5a90":"code","f56f15cc":"code","46a06173":"code","ade41470":"code","1238265a":"code","5e8f8a98":"code","b04cf34a":"code","2bdcb4d2":"code","235ef681":"code","ea93d724":"code","a386052b":"code","e5ebc87f":"code","7f31529a":"code","1687a2ae":"code","beac5cc4":"code","40d80495":"code","b5de40c9":"code","99ff8d13":"code","21fda361":"code","ce13d328":"code","2b7913ea":"code","084885bb":"code","7a94cda4":"code","656f7144":"code","34324b0a":"code","b183af42":"code","7cbc89e7":"code","5a045afe":"code","38d06032":"code","538ebcb2":"code","8a9e5ab8":"markdown","f6139590":"markdown","cfbe29ec":"markdown","ac9cfc49":"markdown","67fc7a97":"markdown","6bd0287c":"markdown","8c02462a":"markdown","4b84d83f":"markdown","eb81d8ed":"markdown","918621d0":"markdown","c5c0d847":"markdown","2e25fa5f":"markdown","220634e0":"markdown","a28c391e":"markdown","38a88c44":"markdown","0d383abc":"markdown","b0d78eae":"markdown","1de3db67":"markdown","0e5b9e3e":"markdown","595186ca":"markdown","ec8817e6":"markdown","fbad353e":"markdown","1919cfc6":"markdown","9f739136":"markdown","5d313af4":"markdown","0e29addf":"markdown","34def692":"markdown","b967ee6f":"markdown","96975851":"markdown","31a95efb":"markdown","a6975d47":"markdown","232d9d73":"markdown","e67008ee":"markdown","094982d8":"markdown","01bd59df":"markdown","a3889361":"markdown","8af875c8":"markdown","54e63435":"markdown","72855cc6":"markdown","86238de9":"markdown"},"source":{"fff1ec8f":"import pandas as pd\nimport numpy as np\ndataset = pd.read_csv('..\/input\/scour-depth-analysis\/scour_datasheet.csv')","820eea60":"df = pd.DataFrame(dataset)\ndf.describe()","8fb675b1":"# importing all libraries and dependencies for dataframe\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom datetime import datetime, timedelta\n\n# importing all libraries and dependencies for data visualization\npd.options.display.float_format='{:.4f}'.format\nplt.rcParams['figure.figsize'] = [8,8]\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_colwidth', -1) \nsns.set(style='darkgrid')\nimport matplotlib.ticker as ticker\nimport matplotlib.ticker as plticker\n\n# importing all libraries and dependencies for machine learning\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.base import TransformerMixin\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nimport statsmodels.api as sm\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.metrics import r2_score","17354f43":"# shape of the data\ndf.shape","fc1c502d":"df.info()","ccdde26a":"df['D95 (mm)'].dtype","a7080d1a":"#all diameter columns will be analysed separatly\nfor i in df.index:\n    if df['D95 (mm)'][i] == '\u2013' or df['D95 (mm)'][i] == '--':\n        df['D95 (mm)'][i] = \"199999\"        \n    if df['D16 (mm)'][i] == '\u2013' or df['D16 (mm)'][i] == '--':\n        df['D16 (mm)'][i] = \"199999\" \n    if df['D50 (mm)'][i] == '\u2013' or df['D50 (mm)'][i] == '--':\n        df['D50 (mm)'][i] = \"199999\" \n    if df['D84 (mm)'][i] == '\u2013' or df['D84 (mm)'][i] == '--':\n        df['D84 (mm)'][i] = \"199999\" \n    if df['Grad'][i] == '\u2013' or df['Grad'][i] == '--':\n        df['Grad'][i] = \"199999\" ","300cb1c7":"df['D95 (mm)'] = df['D95 (mm)'].astype(str)\ndf['D95 (mm)'] = df['D95 (mm)'].astype(float)\ndf['D16 (mm)'] = df['D16 (mm)'].astype(str)\ndf['D16 (mm)'] = df['D16 (mm)'].astype(float)\ndf['D50 (mm)'] = df['D50 (mm)'].astype(str)\ndf['D50 (mm)'] = df['D50 (mm)'].astype(float)\ndf['D84 (mm)'] = df['D84 (mm)'].astype(str)\ndf['D84 (mm)'] = df['D84 (mm)'].astype(float)\ndf['Grad'] = df['Grad'].astype(str)\ndf['Grad'] = df['Grad'].astype(float)","56634b05":"df.dtypes","47d94218":"# dropping pier based on Acadamic knowledge\n\ndf = df.drop('Pier',axis=1)","07153cd6":"sns.set(style=\"whitegrid\")\nax = sns.boxplot(x=df[\"Scour Depth (m)\"])","b7df6fdd":"Q1 =  df['Scour Depth (m)'].quantile(0.25)\nQ3 = df['Scour Depth (m)'].quantile(0.75)\nIQR = Q3 - Q1\n\n#removing outliers from data bsed on price\noutliers = []\nfor i in df.index :\n    if df['Scour Depth (m)'][i] > Q1+1.5*IQR or df['Scour Depth (m)'][i] < Q1 -  1.5*IQR:\n        outliers.append(i)\n        \ndf.drop(index = outliers,inplace = True)","deb52cb5":"sns.set(style=\"whitegrid\")\nax = sns.boxplot(x=df[\"Scour Depth (m)\"])","ea63906e":"df.shape","f5238780":"df.head()","658a0d09":"df.drop(index = 0,inplace = True)\nprint(df.head())","bb723ad3":"d = df","d76da81b":"df['Pier Shape'].unique()","b24610b8":"# Visualizing the different Pier shape available\n\nplt.rcParams['figure.figsize'] = [10,6]\nax=df['Pier Shape'].value_counts().plot(kind='bar',stacked=True, colormap = 'Set1')\nax.title.set_text('Pier Shape')\nplt.xlabel(\"Pier Shpe\",fontweight = 'bold')\nplt.ylabel(\"Frequency\",fontweight = 'bold')","e2427c7b":"plt.figure(figsize=(8,8))\n\nplt.title('Pier scour Distribution Plot')\nsns.distplot(df[\"Scour Depth (m)\"])","b2642d42":"# Segregation of Numerical and Categorical Variables\/Columns\n\ncat_col = df.select_dtypes(include=['object']).columns\nnum_col = df.select_dtypes(exclude=['object']).columns\ndf_cat = df[cat_col]\ndf_num = df[num_col]","c53cde2f":"accuracy = df['Accuracy (m)']\nprint(accuracy.head())","e6417c4e":"print(accuracy.unique())","a33f18a2":"df.drop(columns = 'Accuracy (m)',inplace = True)","3866e3b8":"df.head()","b5799f29":"df['Scour Depth (m)'].unique()","317039d4":"df_num.drop(columns = 'Accuracy (m)',inplace = True)\ndf_num.head()","0ef27a9e":"diameter = ['D16 (mm)', 'D50 (mm)', 'D84 (mm)', 'D95 (mm)', 'Grad']\ndf_num.drop(columns = diameter,inplace = True)\nfrom sklearn import preprocessing\nnormalized_X = preprocessing.normalize(df_num)\nprint(normalized_X.shape)","91ae90b8":"d_df = df.loc[:,diameter]\nd_df.head()","39a4ca07":"d_df.dtypes","803432c4":"print(normalized_X)","c4204a77":"nor_df = pd.DataFrame(data = normalized_X ,columns=[\"Pier_Width\", \"Pier_Length\", \"Skew\", \"Velocity\", \"depth\", \"scour_depth\"])\nprint(nor_df.head())","1a11b1ba":"ax = sns.pairplot(nor_df)","5b7b3a36":"print(df_cat)","f9d7a51f":"plt.figure(figsize=(20, 15))\nplt.subplot(2,2,1)\nsns.boxplot(x = 'Upstream\/Downstream', y = 'Scour Depth (m)', data = df)\nplt.subplot(2,2,2)\nsns.boxplot(x = 'Pier Type', y = 'Scour Depth (m)', data = df)\nplt.subplot(2,2,3)\nsns.boxplot(x = 'Pier Shape', y = 'Scour Depth (m)', data = df)\nplt.subplot(2,2,4)\nsns.boxplot(x = 'Bed Material', y = 'Scour Depth (m)', data = df)","de560c2b":"unknown = ['Unknown',' Unknown','Unknown     Noncohesive']\nInsignificant = ['Insignificant',' Insignificant','Insignificant Cohesive','Insignificant Noncohesive']\nSubstantial = [' Substantial','Substantial   Noncohesive','Substantial']\nModerate = ['Moderate      Noncohesive','Moderate']\nfor i in df.index:\n    if df['Debris Effects'][i] in unknown:\n        df['Debris Effects'][i] = \"Unknown\"\n    if df['Debris Effects'][i] in Insignificant:\n        df['Debris Effects'][i] = \"Insignificant\"\n    if df['Debris Effects'][i] in Substantial:\n        df['Debris Effects'][i] = \"Substantial\"\n    if df['Debris Effects'][i] in Moderate:\n        df['Debris Effects'][i] = \"Moderate\"","11958018":"plt.figure(figsize=(25, 15))\nsns.boxplot(x = 'Debris Effects', y = 'Scour Depth (m)', data = df)","3f347cc9":"df.head()","c43192c8":"d_df['scour_depth'] = df['Scour Depth (m)']","cd85e802":"d_df.head()","75af84a3":"droping_value = []\nfor i in d_df.index:\n    if d_df['D16 (mm)'][i] > 1999:\n        droping_value.append(i)\nprint(droping_value)","8600f09f":"d_df.drop(index = droping_value,inplace = True)","712c773f":"d_df.describe()","82ce0eaf":"ax = sns.pairplot(d_df)","ed27721d":"d_df.corr()","3dcd524f":"nor_d_df = preprocessing.normalize(d_df)\nprint(nor_d_df)","270ffd9b":"diameter_normalised = pd.DataFrame(data = nor_d_df ,columns=[\"D16\", \"D50\", \"D84\", \"D95\",'Grad',\"scour_depth\"])\nprint(diameter_normalised.head())","71900994":"droping_diameters = ['D16','D84','D95']\ndiameter_df = diameter_normalised.drop(columns = droping_diameters)\ndiameter_df.head()","46dcbf62":"ax = sns.pairplot(diameter_df)","139980b4":"diameter_df.corr()","9ceafcc1":"X = pd.DataFrame(nor_df)\nX.head()","f3213fce":"cat_col = df.select_dtypes(include=['object']).columns\nprint(cat_col)","ee65b433":"# Get the dummy variables for the categorical feature and store it in a new variable - 'dummies'\n\ndummies = pd.get_dummies(df[cat_col])\ndummies.shape","b3fb5a90":"dummies.head()","f56f15cc":"dummies = pd.get_dummies(df[cat_col], drop_first = True)\ndummies.shape","46a06173":"dummies.reset_index(drop=True, inplace=True)\nX.reset_index(drop=True, inplace=True)\ndummies.head()","ade41470":"# Add the results to the original dataframe\n\nX = pd.concat([X, dummies], axis = 1)\nX.shape","1238265a":"X.head()","5e8f8a98":"df_train, df_test = train_test_split(X, train_size = 0.9, test_size = 0.1, random_state = 0)","b04cf34a":"df_train.corr()","2bdcb4d2":"# Let's check the correlation coefficients to see which variables are highly correlated\n\nplt.figure(figsize = (15, 15))\nsns.heatmap(df_train.corr(), cmap=\"RdYlGn\")\nplt.show()","235ef681":"plt.scatter(X['Pier_Width'], X['scour_depth'])\nplt.title('scattere plot of correlated variables')\nplt.xlabel('pier width')\nplt.ylabel('scour depth')\nplt.show()","ea93d724":"plt.scatter(X['Velocity'], X['scour_depth'])\nplt.title('scattere plot of correlated variables')\nplt.xlabel('velocity')\nplt.ylabel('scour depth')\nplt.show()","a386052b":"plt.scatter(X['depth'],X['scour_depth'])\nplt.title('scattere plot of correlated variables')\nplt.xlabel('depth')\nplt.ylabel('scour depth')\nplt.show()","e5ebc87f":"y_train = df_train.pop('scour_depth')\nX_train = df_train","7f31529a":"y_test = df_test.pop('scour_depth')\nX_test = df_test","1687a2ae":"X_train_1 = X_train['Pier_Width']","beac5cc4":"# Add a constant\nX_train_1c = sm.add_constant(X_train_1)\n\n# Create a first fitted model\nlr_1 = sm.OLS(y_train, X_train_1c).fit()","40d80495":"# Check parameters created\n\nlr_1.params","b5de40c9":"# Let's visualise the data with a scatter plot and the fitted regression line\n\nplt.scatter(X_train_1c.iloc[:, 1], y_train)\nplt.plot(X_train_1c.iloc[:, 1], 0.3345*X_train_1c.iloc[:, 1] + 0.0173, 'r')\nplt.show()","99ff8d13":"# Print a summary of the linear regression model obtained\nprint(lr_1.summary())","21fda361":"X_train_poly = pd.DataFrame(X_train_1)","ce13d328":"X_train_poly.head()","2b7913ea":"from sklearn.preprocessing import PolynomialFeatures\npolynomial_features= PolynomialFeatures(degree=2)\nx_poly2 = polynomial_features.fit_transform(X_train_poly)\nx_poly2.shape","084885bb":"import statsmodels.api as sm\n\nmodel2 = sm.OLS(y_train, X_train_poly).fit()","7a94cda4":"model2.params","656f7144":"model2.summary()","34324b0a":"X_train_poly2 = X_train[['Velocity']]","b183af42":"X_train_poly2.head()","7cbc89e7":"from sklearn.preprocessing import PolynomialFeatures\npolynomial_features= PolynomialFeatures(degree=2)\nx_poly3 = polynomial_features.fit_transform(X_train_poly2)\nx_poly3.shape","5a045afe":"import statsmodels.api as sm\n\nmodel3 = sm.OLS(y_train, x_poly3).fit()","38d06032":"model3.params","538ebcb2":"print(model3.summary())","8a9e5ab8":"**Separating Diameter values based on unaviability of data** (these columns will be analysed separatly)","f6139590":"**diameter variables have very high correlation between each other**","cfbe29ec":"**Significant accuracy is coming with quadratic values of Pier Width**","ac9cfc49":"**dropping first value from each category in variable**","67fc7a97":"**removing accuracy from rest of values (Not usefull)**","6bd0287c":"**separating dependent variable from data set**","8c02462a":"**making first OLS model with only linear Pier width values**","4b84d83f":"**dummy variables for the categorical feature and store it in a new variable - 'dummies'**","eb81d8ed":"**Diameter variables**","918621d0":"# Model Preparation","c5c0d847":"Removing NULL Row","2e25fa5f":"**Separating Numerical and categorical variables**","220634e0":"**Normalising data**","a28c391e":"**D16 , D50 ,D84 , D95 ,Grad should be converted to float datatype for analysis**","38a88c44":"**Making second model with quadratic values of Pier Width**","0d383abc":"**Making a OLS model with only quadratic value of velocity**","b0d78eae":"Empty values should be converted to some number for conversion later on these will be replaced or removed","1de3db67":"# Data Processing","0e5b9e3e":"splitting data in train and test ","595186ca":"**out of all numerical variables Pier width , velocity and depth have strong +ve correlation **","ec8817e6":"**storing normalised numerical values in separate dataframe**","fbad353e":"**EDA of categorical variables**","1919cfc6":"**it will be a good move to use only D50 in further analysis as it is very correlated to every other diameter value**","9f739136":"**Debris Effect**\n* dataset with unknown values semm no harm as they alomst distributed across entire range of scour depth values\n* as Debris effect seems to increase from insignificant to substantial to moderate scour depth converges to a range of 0.2-0.6\n","5d313af4":"**Looking for Outliers**","0e29addf":"**Dropping Pier Based on Acadamic Knowlage**","34def692":"**plotting scour depth V\/S Depth**","b967ee6f":"**dropping emtpy values**","96975851":"**ANALYSING CATEGORICAL VARIABLE**","31a95efb":"**Round shape Pier are most common**","a6975d47":"* **D50 have negative Correlation with Scour Depth**\n* **Grad have significantly high correlation value**","232d9d73":"**Removing Outliers**","e67008ee":"**Outliers**","094982d8":"* Scour Depth dosen't have any effect based of current as both upstream and downstream have almost similer distribution\n* Pier Type seems to have impact on Scour depth as can be seen from boxplot 2\n* Pier shape looks to have impact on scour depth pier with shape of round and sharp have almost same distribution \n* Bed material seems to have strong impact on scour depth ","01bd59df":"**resetting index for safe concatination**","a3889361":"# Very important\n**Taking care of erronious data (Dataset have some errors)**","8af875c8":"**Scour Depth**\n* scour depth have some +ve correlation with Pier width, velocity ,Depth\n* scour Depth have very insignificant -ve correlation with pier length , Skew ","54e63435":"**plotting scour depth vs Velocity**","72855cc6":"**plotting scour depth vs Pier width**","86238de9":"Analysing Pier scour value distribution"}}