{"cell_type":{"4a5cdc60":"code","fa2e6312":"code","768c3e4a":"code","793c396b":"code","e15cdeb1":"code","033501e4":"code","efaebefd":"code","fc179aa0":"code","9c1c20f2":"code","3dd0b153":"code","67c278d7":"code","83c3d3ea":"code","88a38a4b":"code","49e4fa54":"code","5e36d636":"code","69ff4c2d":"code","612987d1":"code","7393f5ac":"code","b6f8631a":"code","5ce9d375":"code","f95d6d24":"code","895ef337":"code","6b050631":"code","9fa55888":"code","9bf18d2e":"code","4eaf5793":"code","e7215850":"code","a2bdfb07":"code","5665db89":"code","6ae9a85f":"code","5940bcd2":"markdown","0e7426e5":"markdown","dd14f314":"markdown","3bcdc9ec":"markdown","54c9add7":"markdown","7091313c":"markdown","b0db13c4":"markdown","6f1bc8da":"markdown","f2a31f9a":"markdown","5e2f6d74":"markdown","cb95761f":"markdown","7fbe0936":"markdown"},"source":{"4a5cdc60":"import pandas as pd\nimport numpy as np\nimport datetime as dt\nimport os as os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.metrics import classification_report\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, recall_score, precision_score, auc,f1_score \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom xgboost import XGBClassifier","fa2e6312":"BC_Data=pd.read_csv(\"..\/input\/breast-cancer-dataframe\/breast_cancer_dataframe.csv\")","768c3e4a":"BC_Data.head()","793c396b":"print(BC_Data.corr())\n  \n","e15cdeb1":"plt.figure(figsize=(25,25))\n# plotting correlation heatmap\ndataplot = sns.heatmap(BC_Data.corr(), cmap=\"YlGnBu\", annot=True,linewidths=.5)\n\n# displaying heatmap\nplt.show()","033501e4":"BC_Data.describe(include='all')","efaebefd":"BC_Data.shape","fc179aa0":"BC_Data.dtypes","9c1c20f2":"BC_Data.isnull().sum()","3dd0b153":"target_dist=BC_Data.target.value_counts(normalize=True)*100\ntarget_dist","67c278d7":"y=BC_Data[\"target\"]\nX=BC_Data.drop(\"target\",axis=1)\nX_train, X_val, y_train, y_val=train_test_split(X,y,test_size=0.20, random_state=123, stratify=y)","83c3d3ea":"print(X_train.shape)\nprint(X_val.shape)\nprint(y_train.shape)\nprint(y_val.shape)","88a38a4b":"def get_CR_CM(train_actual,train_predicted,test_actual,test_predicted):\n    print('''\n         ========================================\n           CLASSIFICATION REPORT FOR TRAIN DATA\n         ========================================\n        ''')\n    print(classification_report(train_actual, train_predicted, digits=4))\n\n    print('''\n             =============================================\n               CLASSIFICATION REPORT FOR VALIDATION DATA\n             =============================================\n            ''')\n    print(classification_report(test_actual, test_predicted, digits=4))\n\n    print('''\n             ========================================\n               Confusion Matrix FOR TRAIN DATA\n             ========================================\n            ''')\n    print(confusion_matrix(train_actual, train_predicted))\n\n    print('''\n             =============================================\n               Confusion matrix FOR VALIDATION DATA\n             =============================================\n            ''')\n    print(confusion_matrix(test_actual, test_predicted))","49e4fa54":"scores = pd.DataFrame(columns=['Model','Train_Accuracy','Train_Recall','Train_Precision','Train_F1_Score','Test_Accuracy','Test_Recall','Test_Precision','Test_F1_Score'])\n\ndef get_metrics(train_actual,train_predicted,test_actual,test_predicted,model_description,dataframe):\n    get_CR_CM(train_actual,train_predicted,test_actual,test_predicted)\n    train_accuracy = accuracy_score(train_actual,train_predicted)\n    train_recall   = recall_score(train_actual,train_predicted)\n    train_precision= precision_score(train_actual,train_predicted)\n    train_f1score  = f1_score(train_actual,train_predicted)\n    test_accuracy = accuracy_score(test_actual,test_predicted)\n    test_recall   = recall_score(test_actual,test_predicted)\n    test_precision= precision_score(test_actual,test_predicted)\n    test_f1score  = f1_score(test_actual,test_predicted)\n    dataframe = dataframe.append(pd.Series([model_description, train_accuracy,train_recall,train_precision,train_f1score,\n                                            test_accuracy,test_recall,test_precision,test_f1score],\n                                           index=scores.columns ), ignore_index=True)\n    return(dataframe)","5e36d636":"clf1 = RandomForestClassifier(n_estimators=100,class_weight='balanced')","69ff4c2d":"clf1.fit(X_train, y_train)","612987d1":"y_pred_train = clf1.predict(X_train)\ny_pred_val = clf1.predict(X_val)","7393f5ac":"scores = get_metrics(y_train,y_pred_train,y_val,y_pred_val,\"Randomforest_Balanced\",scores)\nscores","b6f8631a":"clf_XGB=XGBClassifier(n_estimators=100, gamma=0.5, learning_rate=0.1, n_jobs=-1)\nclf_XGB.fit(X_train,y_train)","5ce9d375":"y_pred_train = clf_XGB.predict(X_train)\ny_pred_val = clf_XGB.predict(X_val)","f95d6d24":"scores = get_metrics(y_train,y_pred_train,y_val,y_pred_val,\"XGBoost\",scores)\nscores\n\n","895ef337":"input_dim = X.shape[1]\ninput_dim","6b050631":"from tensorflow.keras.optimizers import SGD\nsgd=SGD(learning_rate=0.05)","9fa55888":"from tensorflow.keras import Model\nfrom tensorflow.keras.layers import Input,Dense","9bf18d2e":"from tensorflow.keras import Model\nfrom tensorflow.keras.layers import Input,Dense","4eaf5793":"# Input placeholder\ninput = Input(shape=(input_dim,)) # input = Input(shape=(31,))\nh1=Dense(30, activation='relu')(input)\nh2=Dense(20, activation='relu')(h1)\noutput=Dense(1, activation='sigmoid')(h2)\n\nmodel = Model(input, output)\nmodel.summary()","e7215850":"#Compile\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics = ['accuracy'])","a2bdfb07":"#Run\nmodel.fit(X_train, y_train, epochs=20,validation_split=0.2, verbose=1)","5665db89":"plt.plot(model.history.history['loss'])\nplt.plot(model.history.history['val_loss'])","6ae9a85f":"plt.plot(model.history.history['accuracy'])\nplt.plot(model.history.history['val_accuracy'])","5940bcd2":"# Here comes the drag race between ML and DL algorithms on a structural data (i.e. Breast Cancer)  \n# \"The best solutions are always simple\"  This have been proved again and got the better results with Machine learning algorithms than the complex Deep learning one.\n# Lets start the race !!\n# There are interesting points left open for the discussion","0e7426e5":"![Drag Race.jfif](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxITEhUSExMVFhUXGB0WFxgYFxkXFxgXGBcXFxUXGBcZHSggGBolHRUXITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGy0lHyUtListLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAJ0BQgMBIgACEQEDEQH\/xAAcAAACAgMBAQAAAAAAAAAAAAAEBQMGAQIHAAj\/xABOEAACAAQEAgYFCQQGBwkBAAABAgADBBEFEiExQVEGEyJhcYGRobHB0RQjMkJSgpLh8AdTYnIVM0OTwvEWVHODo9LiJERjZISUorLTF\/\/EABoBAAMBAQEBAAAAAAAAAAAAAAIDBAEABQb\/xAAyEQACAgEDAgUDAQcFAAAAAAAAAQIRAwQSITFBBRMUUZEiYYGhFSMycbHw8UJSYtHh\/9oADAMBAAIRAxEAPwCmhW+1fyjdUBjQNEsreKWyDaTpKhhTFgRv4xFTqDDempoFyMod4ZU5h2vSPeIa\/J+IP5woopHL9ecMKXMrNy004QlvkJIDxCVYjhCOtlxZa5gbXHlFdrZhuRvbjxhkciStmw088sqiAzJZufGMPQlhB0pSTtxEUn9oFXesZFNhJVZOhtcqCXOm5zM3ojnqElwUw8NyN1LgcvSkbxNKoyNgYoKVD\/bf8R+MTy8QnDabMH3j74H1f2Hrwn\/kdEWnfuHfE6Sspvr5CKDKxWf++f0wXJx6qU3E5vMA+0RnrV3Qx+BTf8MkdIEpcucsV56Xt77ROZJb6LodBpmAOwOoPPfzjnDdKKv97fxRD7ob4J0rQuBVLYWA6yWNrAAZkO4sNwfKCjrYMVk8B1EVfDLNNlTU3RiDyFwD5RCmIlSRDw0AmACXOsSABcMoNyba7RR6jGaZmJ6\/MT9bJMF\/SoilaiK6s8\/9nZZXtV0Mq2uJ5GN8NqzzhIcRpz\/aqPG49ojC4pIGnWjyuR6QIbHLB90IyaTPB04P4Y\/rMX1t7ILoMU5+2K01VJYX61PM2PoOsT0koOCUIYDe0EpRfRiHinHrFr8Fk\/pAswVbEk2GsXzC5ylRoNBaOW0dKcwOukXnD6gLYDS\/HWAyK0Mw2pcFldgRAjAbRGkzXVxbhrBMtL67xJ5iR6T00pKwdZSkxscPFzfWCCpGxjQVBvYwSy30AekVc8iuZhusSrQ2hzLA4wLOqVU9sBf5mUe+D85kz00exDTyLQyk7QCtXLOuZfxL8YhmvmN7i3AAiF5J2VYNOx0XEYzwhKGNWUiFbivyPuPy4iMzYrbub2F4OpKa2rb8uX5wceROaCguWNGeIZzm2kYQXghZQtB9CR3IDl099TGxUKLQRNmACApj6QcbYqe2JGXj0R5o9DqJtxwMKTG8tIyikAXiVIkbPTollMRDGlxArtr3QGEFoyqwLOoumEYxKmdkjKfUYfrJ4gjyjnNJL1\/V4YU+KTZbWRsw2sdYU17G0WTEpegJ01is1Cm5hvWYyGl2YZWPmNoTs1uPOFTfY9Tw\/HScvwH0cxZYac47MpDNPfkBIHmbDzjjc6azMztqzEsx5ljcn0mOr4zRVM6imJTSmmNMdJbZbXVFGdybnYnIPM8opDdCMS\/1Od6AfYYxplm+O52xbgtCJ85JTMUU3zMFzFQASTluL7W84uEv9n8ltRXafxU5v6pkBYBglRTtMabIZXAChXUg2a5JHoAh4lXPG1k05KPbDseOLjbIdTrMkcuzGwb\/APnoG1Yv9xN914mT9mkxtVq5H3hMX2rBcypcqt5oU2N+0dfRvE6zpN+3Oa9h9FTfbmYxYINjZa\/NCN3+hUek\/RedRGX1kyS\/WAlerZieza98yi24hNaLR0\/qxMqsgLFZMtZYvvmIzuTyN2t92K9KpyzKg3YhQTwJIAPriGdKTSPf02+eGM8nVqzrVLVdRgiT2Wzimyo1yNWJRPOzCOPBf15R1b9qc9ZNHSUSG676G4ySVCqLfzMD9yOZ0skM6qSApYKSdgCQCT3AXMHmlyl7E3h+L93LJ7tv8GBhk8jMJM2x1B6t7G\/I5dojagmi95Uz8DfCOkdNOkMpnUUtTdFlovzblR2XbkRra0K6nHmzaVU3ynzQPQpIiqOli1e9Hm5PF8sZV5L\/AL\/BRJkojdSPEEe2DMNq3kuGQ2+0PqsvEH47iLtiuOF8PeWZxeY7hLFy7Zc2Zib62str\/wAUVSmoi7Ki7sQo+8beQ4+mJcn7qdJ8nrYK1OFyyRpezOnTJaS5XWtooXOT\/Da9459jHSSonEhWaXL4KpsbcMzDUnuGkXv9pIEuTLlKbB2Gn8EsD1XK+iKZ0YwwTquRKYAqz9oEXBVQXYEcQQphmo1EpzULI\/DNBhxYXmavq\/wiuPUTr\/1r\/jb4xMmMVSiy1E4W5TH+Md9bo3RHejpv7iX\/AMsYHRGgO9FT\/wB0o9gjfIl7gy8Twv8A0f0OFyOlVehutXOuObZh5q1wY6x+zvpUa6U6zQBOlkBsugZT9FrcDoQRHPv2o0lPKruqp5Sy0SWuYILAuSzE+NisWL9iVLlFVUH6ICr+EFyfXGY21OrD1MIT0\/mJUG\/tP6dPTN8kpWyzQAZszQlARcIt9AxBuTwBHOOM1895rZpjM7b3Yljr3mDcXqmnTps4m5mTGcn+ZiR5Wjqn7JujVNMo2nVFPKmtMmHKZktXsigLYZhoL3Okam8khcoQ0uG2jiZQcolWomLs7jwYj3x9N\/6G4ad6Cm8pSj2RG\/QLCjvRSfIEewwzymiL1sH2PmxcQncJ00f7xh746z+z\/ofWsq1NXOnBSLy5LTXBPJpgvoP4fTyi9SOgeGSXWclJLVlN1PaYA8DYki8OZlUvODhCnyLy6hyVQiCyaXLruefwiYJG8uYrbG8bxSnxweVOL3XLqbSwBGJ0zSPCB6mYI1dQZOkRzn0PhAcyZpHqiZoYCm1KjQmKYQPOy5CTro9AvyyXzEehu1k+5nHJdbcbH0RPLmqe6EaS2GzERusxxEbwM97eh+O6CpEwRXEqT+vyghK5gN\/Tr64U8Mjd6LSJgICrvB9JSZdb6+zuioUeJ5dTb0E+w3hvT48uYaj0ke0Qt45G7kN62SSPP8oBakPP9eEGrXqy+jkePcY9UYjIlrndgFB43B8hx8BCXFXyWYs2ZQrGiKVJcC\/8N\/XEf+lEkFpfWoGsRnzCwN7+esVDpD0smT\/m5Y6uVbL\/ABOL\/WPAdw84ryiNeXbwhsdBLM9+V8s6TPxaUwOarl8NQ3jy8YEafSEC9Qp8LD2mKOogiWsA9S\/YsxeEQUrtl2n1NJkl3mB7FrAOoYfR+kL6flBFHilIJssNLlMuhZ2m7KBc6DcgCwHE2EUZRBAWF+pa7Fr8IhNU5M3qqkzZjzGGrszEcsxJt5Q16Iy0NXKaYrFEu7Bd9BYC\/DtEHyMAUFFMnMElqWYm3AAd7E6L5x0rozg8+lloEyMzvmnn5t+wuayrcXIsB9HW7GAwQ3St9BviedYsDxx6tUqKp+0GsV6vItwspFQA7gsOsYHze3lFdlSidgT4An1CGdXhtVMmPMannXd2c\/NPuzFuXfGKWbOpnAvNksXAI7aErlYi+xtfXWMhjeXJXSwsmox6LSqqdJKhd1LfZb8J94jZKc8jFiw7pFULKZzOmO3VKwzs5XR2GtmBOqnS4247Q5w3Gpzz1ebPbqyQGU7MG7JGW21jD56HauZEODxyWaVRx\/qVCRKi59DMLRVepJuyjKo4KSu9+etvTCY4LNR2TqpnZYpfI1jlJW97baei0Wno5IYSZksghmmKLEEHVbDfviTT0p\/Uj0fEJ7sSUJdWr\/kL+nFR109bfRSWqjxbtN7V9EJsPnzJEzrZTZHAIvYHQ2vv4CHVXSO8xmyPYk27J2Gg4cgIaYTgchkvOVs1zbtFbAd3jeE1OeRtDI5cWHAovlVVFem9K6\/98fwr8IgfptiC\/wBsPwL8Iun+jNCx+jM\/vD8ICxnolRJJmTFWaWVGKjrCbsB2RbLrraHqGZd\/1JvP0bdeX+i\/7OV4rVTJ015s05nc3Y2twtsPCOk4Jek6PTZ30XmhyD3zGEqWR3WymOfVFE\/BH\/C3hyjqON0DzcJelli7oiMij6wlMrFR32UweG+WzddGNQS6Wvg4m4sI+juh2HGTQU0sizCUrN\/MwzNfzMfOpgo4zVAaVNQP96\/xgsWTY7A1+meoglF0fTEknlxhP07ruow+qm3sRKIX+d+wg\/E4j5+HSCtH\/ep\/940D1uN1c1DLm1E10Nrq7ErobjTxAPlFDzpnkfsycWm2KASBZS3IWJ8o+lsJo+pp5Mq9yktEJO5IUAk+JvHAejlIJlXTobWM1SfAHMfLSO+1lYOFz4a+vaOx8jc8drQ5w2X2SeZt5CC2Kjcwjl4iwQBbXt4i58OEL6fEmmXV9HG47uYiyON0eDnzRc20WKZVrwMK67EAO+AnvwiIyrw+EEiHJNvhAtRiLtcEWgZpDNB82RKGrMLiNVr5fD4RTF+yI5r3BBh55mPQV\/SSc19Ij0FbF8HExM8vHSJVaGAAO4v5R5adPs28ICj2pAQsY2dRbaDVpFMSmjFtD7\/bA0LbFslRaJFQEwbJpARr8IIWiA2NvMfGBadcGwcN31ukC08rKb3MNZ6UUyxmUjuRzqZo9A2HlAhpGGxEZ+TPxPqiWWnnJ20evDX6aMdquvyTysPw0i\/yMj\/1M0xJ\/R+Hf6m3\/uZsL6NHKta2htbX\/KNgsy40Hp\/KF+lkx37S0y9\/1CJ0rDlBJo2vpb\/tEzW5tGWOGLvRzT4Tpt\/Xp64X4nJYrdhoCNjf3RI6PbRW8re43hvpYVyuSJ+IZHL6Z0r+41mLhQldZ8mmkk5QonuNbE632GkaGow+WoJoyWy31nTHUHXSxYBhfmIS1ikZbqR2xuDroe7X84650fwESsPlTEopU+ocBjnCqcrkmxduABGkTz06j1RUvEZbfpk3+WUCpxqS8tESXMRbAuy5FRQdSqqFAz8O7fujd8Wp5cmXkM3j1QuuYENMuzsCDlvfbmOJjo+H0kuXTzZlXQ01GqAkdWyA8STmUCxvtre5jkNJj1QAxVwS0xrl1DsVVnygluQsOWnfGxxOT4RPPUKMOXyW6V0mpwsoPOqBmDAEKpOh7TEZ9Bc9+4hD0urZU2oRpTtMXJKszCzXs+4OoO3ph90Dp5k2Ways6paZbzHdkW81vqqoy9lFGmm577mDulGHUdXhvy6kkJKMps7hUVGyqSHEzKNQA2e2saobXYpZG1y+DndOQJKt\/wCX7vq1M8cOEHTGszDkL+sD3iFXXfNkZj\/VsCL\/AMbHY7DuHG543PR8Jo6STh03FKuQk4tdVR9UK5xLVbNpq4vcjlBZYqXI3SZ3hvbyhEcXmdSbu97i3aIsDta3iINwOucyphLMxLDUkkiynjEcvpzQFLDD6IbdiwA0A27FiBa3kIKpa0TC7S5UuSjWIlywAo7NuA12hUo\/TRRDUVkeSiPo5WzXqZaF3N2t9I8iefdHTHpxyv5RXuheGSko0qHloZsyYTLdlGZQeyuU8NFY+cWiS9xbiSB6TaAUUg9TqHkapVRpLkLxUegQXJkLvlHojFUXDWTq7fxKSfURE1G7FSXCgg27N7Ec9dvCMon3sS4hKLFgA1thvANHTzFdbqwA1vY225xbXm2F9+HmTYesxHVu4+gUHPMCfYRAuC6lEdXJR20U7FuhdBUOXmSLOdS0tmlknmQDlJ77XhU\/7OcN0Fpuu3zp+EXebWzFBZjLKj6RCttx1zbwlrelEoXGrcVIAuPSNxwMDUQ4Z8tcN\/JWG6BYbmCZZ9yCVJm2DEXuAbb6XsfcYHxDoFh8tRMMueUBtMtNOZB9oLl1A48ba6wfWdMWKFOrBPO1rNe6zF+y3vhLUdN603AKqRoSFUX00uCDY68IdDFfY2WfIurfyMpfQygksk6Urte2Us+dCH7O1tQQ2hjIqRTTRImv8yxtLZjrL\/8ACc8tNGPhFInYtUf1XWHJqwS5yLc6hV2Aub2tpeFtQztcMdNjpD44STLqmuHzf3Op1nSKmln+sBHJdbHyFoR4p0qlNZpZIddm2Hgecc5kZmUEsT5mPBO+K1Hg8eSovczp5poBfj\/lC2q6ZzG2NvC0VHJ2zGWlwSFOKHk7pS\/MmAajpDObZiIAmKI0YQW6RyhEI\/pSZ9oxiB8sejN0vcKl7DZNInQ\/rzPfA6D9foxJL\/WkML5RsIlt+v0YmDafr4wIsEKf1pGE84ElG2h\/XPlBIMA0J\/XnBiju9XwjkTzi7JXOvOM78vVGCNe\/9d8bywe79ecbaFUwPDJn0\/5uPnBLNYjx590D4XLOebYH6V+PHMeHjB\/yd9Oyx14Dn4jvgYySQU4uxfi7nqm+PfBbPoPDjG+M0Ez5PMOU6KSfKCpWEzWlKQN0BFzzUGBeSKfLCWObj0E+KNpL\/wBonrNos+MdJZ1R1SMAiywbKmYfZAvfewHrMKMYwab2AFBOdW0IsArC9ybW39UMBhq5\/wCsHI5VLcuI0gHkxXbYax5FGkjdul82ppZcmakshWADdrNeWxUNe9rkDlxhBhuUqcyKw66ZcEaEBm08IbYdgiomQl2IZm0UAEMxIGvGzRNS4IqkkByC7NYkA9q3EcrnhxHLVUc2KK4DljySbsFxzpE9VJp0ZJcuUnV5ZUsEIOQsTrYaCJcB6RvSLOloiNLmMoZHuR2lCm1jxB9QhhTdHVyKnV3C5bXLEnIdCbEQQcElJmL9WlyG1twtawYm2wjPNx1SQezJe6+Sj\/J5f2ftcT9ogRacK6azqeQtMJUqZLUWAmKT2c2gNjYjxgk1NEl7NnPJF05nWwHGB5mPoNJcn8R9y\/GMlNS7BQg4u7Jv9N5x+jh1Oe8SWMVamwSqBLqJqEksTooubk9k6W1OkPWxmofYhB\/CLfn64hJLauxY95vCmivFkaHNN0mmg0sqZLUS5Bv83qxtLZBfW17teLKOl0s2KJMUg3uyBhsRsHHOKItO3XyQGsHV2tZvqcNNDw39UOHFiF5AesZj7YRvUm0uxZsVKxvV9IZ82daWcqG31AG213J08IMOOThaWbWGtwpud73JJv6oS07jTnBgqH4NbyEJnFu+R8dvHA8l4i7roxUggg6aEG+x3HdHpmOTbfSlH\/dn\/wDSEjYjNAsQGHdoYHavlnclT3iFRU1xYTxwfNB9fjsx0Ms9WFP2VKnRh\/EYq89xZf19WGcwA2K5W3+PAjiBC2pkAbg6CwsRxFuIimFPqZSiqQsnNq33YVMdX\/m9yw1nS1uxuw1B+iDoAOR33hVMlAX7Q1a40I0uO6w2i7HRJlbAZp+c+7\/iiKa2+3GCDTN1ptlIygAh1Nzc7a3iOoopoVj1bjRjfK1ra63ta0Pi1R5uZ8oW0R7CxlGj1Mh6tfCMKukGuhLPqyFD2mjZ4jlfSbxjYxyMl1MTIjcxvMiGbHM5G14xGojMYaWGXhkw8D+H4wTKw067fr\/KJZU2ad2Pq90ELn2vHmvWzPqPRQNJeD\/xCC5WEDi49MYSSx4wVKpNYH1WR9xctJjXYHosLCklitu43PDu7oNEiSDqrH9eMEyKTeCpFGOUA88vcnlp4ewIjyf3R5cNf1aJZdQvCUvLX\/LugsUdracow8kICzEBRrcwPmyfcX5MV2BZMkS2mTEQAvqxJYjTawJsPKJpFQSe1N0Oq5ZdwbHgwX3xWcZxhpriXLsq33vueZ8uES4Piy5jJ4KPm243Fw3t9sHtlVs24x7D6txGnXR5swnkFcezSFpx+kH1n8yYV9I8RVc41zEDKdOO4HgAfSIqM6qBttouUeAJPvhuPEpKznqnHjavgv8ATY\/SbG5J+yrXtfTYkxMOkVGp1LjuOf8AzihScXVQqk6AW0MaVOIySdVzd\/53g\/IR3rpf7Y\/B0uT0kpCdGFzzzj1sQIapVX+jYX7r+2OMLXyyyqqgAmx246cDHTcDn55Epr3OUAnvHZPrBhWWGyi3RShqG1KKsGxTF5jZis6cUUlWICKgKsVYdk5tCDqVhOwLG9teZNz64fYg6yp7AtZZqM4tYdpRc69\/aueGUc4R4fNW7S1AIUErlGq23TLwA4eY4CCjJHmZsTU2jK05O8TqgHAfr1QFh+JrMveWy2111v5+6CC2buhiEOLi+SYzOAgmnl8TEVPJ4mDFWMbCgRtUH5XTDKTlV76A6MN9uFoZVEztt4kb8ojw6YBNW5GvZ1NjpZzp3hLecQdbux8T74nhBRm6LlO0gxJsEfKgu\/qBPibDW2sKJNarG1iN97RjB6nrZnWBTlyjUnvJHhz77Ewbg2+B0XwWWwtqQPHSIZiSzu6fiX\/mitYnVFjffX0DgLRpRVGhBNvEx2yPsGr62OplDIJuJoXwZfbe8RmSo\/7zcDgxQ+vf1wsaekDzpyjW59BgopLsDKT9xrMkyjf52X+NPZmiCdhYYdhlbuDLfysTyhLNnqeB9EBqNzy7oaqJZp+4dUUIJ2\/V4DnUWwFx4XHdrbeNqqnmOvWSmdZgGoH1h4HS49mnKFiYzOX6QDcNipg1JEU8b7BMpZuVe2xFhoTe2nC8D2cHUKfFRy7gDE8vHJZ0KsniLj0iCZU2W\/0SD5w5NPoSS3LqhWstRc5TqeZ0iMunJvUfbDaZJEDTaXSC5AtC18vD2fCIZsq\/D1\/GGUylEDvTx3JtoF6j9aRmJOpPOPRxpc5MmC5NObxocQlrxHpjRsbUbGPn\/qfY+5kkhpJpIMl06jcxWJuPnhAU\/GJh4wSxyfUmnTL318pd2UeJtEczHqZN5i+Uc9epc6m8K58yY5vlBG30re+D8sXHFufQ6W\/SumOgmy1HNrn0AD3xh8cw5x85PRvEG3kLWjn9Pg09xcSwRvfOIkp8GZhfsW\/m\/KN20XQ03tEtrYhh42mU7D\/Z\/lEkvGMOU3AkAjiFt\/hitSej4tdmlDvufhB8jo3TnVp8geTH3Rocse3+JIYT8XomNy8jzlg+vLEJq6D7VP8A3f8A0wNMwClH9vJP3X+EDHB5RF06thzAaOr7mwhu4jFDDr6E\/Wp\/wf8ATG1qM7fJz9z\/AKYSzMNVRfJLtvx+MeqcGmKgmmSuQjMDfS1r842n7myxyj1ivgsEvDpDWKy5BBP0gg9oGkNqWSiLlUAdwFgLm+3nHOKbF3p2zBECX7WUk6d4B9cXihxKW6LMRrhhcRjtHY9k3SVP2oaVlCk+U0uaoYbi\/A2IuDw8YX02HyxKaVlEqWw+itgzHgCRc27uMe+UTJgNjZQLm3xgynLKgAsDz0zWIubX2jU2LyYoxdtKxVio7ClwouciKoAtYFjcjfQesQNS03E+XdDHFZYtKGlxMBtxsUmA29XoiEtwENUqVHz+tW7MYKco2yWBueEbqsaKM7rLXdmCjxJAjHOkTxgTf0HJKic6XmrKz5rm4LPaUN+Gp84hyjn+jDfFXHVzyL2M1ZI\/llL8YRSJliN94Tim5Kx9Vwa1tPeXdJdyGPHJmtp2TwPxjOH0s1JWuVcwuGDAX4bcDuQI2o\/6skk3spHgV7XhssR1NaUQy1Gh1NxcAHUac97dwEW4pRSthrc2oxVtiybg2urvc6m7sDr5RDMwkAX6197fSYjnpGWqDtc8rcB32jIImMLG5UWFm0A4+EU7McknEyeWeNuM1VApwwfvn9LQBOpLOVLzbcG7Vj7vXFnVX0u9h3Jf\/DG+TQ\/OuDw+bFr8Li20F6dEkvEIr\/DKk2HbHrH217R0PIWvEDUJuPnZmvfN09UWxpUz9\/8A8KN3lDhUMPFF+AjVp0+39BWTXxX+GVMYUxRn66b2QTYGZckbCx5wSejaBFZ6iYC3C\/fbi3MQ3rKaqI7E9T5mWbeIEIZlbUyU6hr5Qb5Ws++uhN4yWBJHQzrJ\/CSTOjmXtS5zG2o7RB9vwhVOoWQ6giLLhcwZCZknMTqMtxlXnoPbE3zZ2FhyI9UJW3omFkx5YVKUXTKtLrpqaZifHX2wXLxxtmXzBhnPwxG2FvCFlRgzjYX8PhBK+xO9r6oKTFUb84k61DsYQTqVhupiIMw2glNg+VHsyyZRHornyp+cZgvNRnkjtc5iVEPEwN8oMZE0x5lH1m4OAAjBfugZXMbrNMdRipkhztoBvA3ySqtYKtu8iJnmNY6wKapvtH0mAbLcShXLf4DJczEFGVAgH3YikHFFGVOrA\/kkN\/8AZSYG+Wv9pvSY98vmfvG\/EYzc\/sHNY31lL5DGm4uRl+bt3S6YesLeIRS4ofs\/8IeyNBiE3YTH\/EY3FTPP15npMFul7ImeLB3cvkyKDEjuF\/Hb2GDJIxRQFX5OBa2suSfSTLJJ7ybwH8oqftTPSYi+Xz\/3j\/iMdcjYwwro5fKGlsVIsTTW\/wBlJ9nVQQ5xNk6tpsnIBawloNLW+qo4Ql+WTz\/aP+IxsJ0\/i7j7x+MdbDSh7y+SebgFW6lOslgNobJb1w9wuhNPKSUWDEDh3629cIJM6ZmF5j769pvjFqw9QMrHU30G+vM+uAk30KdNHHFvJzfTl2L+nLTFpgiF1AGaZl01P0FY8tCNOIi0Uk75lJjnXq1JP3QSYW4xKWbRVevauJacQTpa54EMb+ZgXE2aoz00lwiquVntccgo1HK8GlweS9T+8yTf4BcCxQVU+e+nYdBL55AswEeZJMPoRdHujaUpLB2diLa2CjwXn5w8BvHSkeZJuTcmZmzLDSCujp+cea20pGmedrL5nWBpwsNoPp5RWimMB2pzhBp9VfzzQjM\/pr34NiuTTEbrTU6n6T5prd5J\/P1QnWYgOrrrtciB\/wBq+ItLmSaaW5W0oZwttrkAE7i9vVFGp7AC\/A3HltDdNjvGpe50nTLrKqAZKG1wCE24qSnDvUemAp1VdpsvXK2U5hqysgv6Dy7o16OgmkvrfrGa3GxJIt6DHnNO+vyjITqAytt4hSPK8X4MayQcWLnqHganHr\/4bPJBRndyQpGYlSCRbsoABpcceF9IgWqlkSlIACsbtsSh2Ww15b8onTDZJFvlyZb3Is3s2MZlYFTE2+Wob8Alv8UP9FHjnoIn4tKTla68dGNFrpZVe2uw490Y+Vofrr6Y1fAJbb1C\/wB0eXcYkpsFRL5KlB4ymP8AihjxP7EPqcf3+DBrEK5bLcG+a+vmOMQGqT7a+kQVLwJQ2b5ShP8AI+v\/AMo1m9GJDsWM1bnchWGu3BoxRrhnedF+\/wAA9ZOl9WDmJNxcXB0La2AN7aHh7dUU2bLCAOuxYk8Wv9Ec9PdFxl9H5dhdgQP4T8Y0qMDprdrKfFb+0wqWNTa3PoVYdS8Se1dSqJVoSCJjKOK23t3\/ABiZJ5dnYAb3sB5bQ0bC6Mf2qL9y\/tMRvKlqfm5mbTXs204QS0sIpyiDk8TyZkoSXQBGbl7o3zHlBmVTzF\/RGryLRyRM3YvnKG3EK6rDgdhDyakBToLajVJoQnDW5R6HGYxiO2IPzGLVUmJklxuByHvjYSmMeW5H1SxmykCM5zwESyqccYIIUCB3DFBoEWUTvAtTKynu3gmfXKuwvAFRV5tD6BG7GzPOjE1Yx5REC0rngbc7+2GtBhTva19I1YwJar7A9OnaBttDykmg2GX9X4w4oeiTaMQTDWh6Jk6C8FsEy1ddiuTGJ2AMAT8PvqNO6Ok0HQzLckkn3QRP6JKRpe9\/1aO2ivV\/Y5MtGY3+StxjpM7oeF7QYgcb+6Kj0gWXLOUMbjexjNgxa5LsJpciGFbiySJdrjNbQcfDxiuVVaRe17+MJixLXOsd5S7hvxNpVBF2w2R19I75jnJC6kldWXtZL2vrz105RZKekSUgRL2GutrseZtxMVLonUnKZSi5Lh78lt2vWq+mLeWMBPrR53Xk2RIk0iANrGxcfq8AcRVji1gLngBxPARYMTwqUZtJSlFcJZnzDMCRr9E6D6LfihZgEnramWOAOc+Caj12EO8HmdZiE59xLXL6LL7miXPOpfyV\/PCDijkvT+arYjUBAFVCssAAAdhFBsBpveEDN3xvXVonTp06\/wDWTHcHuZiV9VojJGmsetjjtgl9hTdsf4Jji09lm3MmZLscu6FZjEOBxtmNxvr3WLTFqGUgyEEuL2I0UC\/L60UufikyS0ppTZWRWAItszXI1gmT0oa46wEniQd7m5uL2gsbSfWhOaO5dA35Gb6EegiJP6Om8LGAKOZmcsWbViRqeekW2glXsVLcNeB02EUeoXYT6cCwwE2DSbkaFidDwvqIt+FYYMiXUAWG1vbA0uUvn7IZUtWVAF9OGkInJPoMjCgyXhycRv4QFiGHrbQW14Qaa24veIZk0sLX0gAqAJMu2kb9VeMVSEaiI5E4jQwxUYxZiGGXvA1PRZb3iwTXB05xGZIAsdoamybIxOkjkTEw0gpqfiNo0YQ2JJNgzIDAVTSQe6RCzQdAbhQacxiGekejaN80UkAaRo00Dcwtqq1gbDSAnmE7mPDjjPuMuoUXSQzn4iBtAE2tJjWVSX1v6oJSQq7D0w6KSJXKc+oOiFoNkSAI0LRNLS+pMGDQaji1hFj6MTkU2a1+F4raacI2WYY0GXB16lxBLbiGlNOXcC0cgpsYmCw9cWzBcWcoCfCNomkl2OgS6kbGBK\/F5csFmNhFKxbGZgF1NvOKvW18x9WYnzjNohssPSPpkz3SXovPjFAqp+YniYYpJz8Yb4Zg8sdthmPI7ejjGSdIxFYpMEeaLm6jnbfwg+R0WS4uTbyEWafM4RDeEubYdHqKllylyy1AHHmfExMzxGrR4QsIkBjWZM5xkG0CVDm8akaWjojZEn1B+qMo+6M7f4R5RH0eqeqo6updgCVaxJAuVRiNTzZzGx+bwtbfX1b7za+qA8Rw2W+FKGvYnMQDa5Z7a8481vdJt95JfA1cfBxSRsL8hEzkaWi4p0Zpjwf8f5R6Z0SkkdlnGnMHj4R7jyR6ExQ66T9aIJUknxiz4xgHV\/2mYDmv5wpoqUMza7Izfh4RzpqzUb4m6S3HUZsuUXz7hrdoacL7eMGYd0kKDW1+MBYkqsJRChfm1VrfWZSbue83Hohd1QgI9DmX+h6TS246+iCm6Qi+4jnCpbjBEqYRrcxtgHTZeLrbe8SLjvAWjnSVTAixg5KhhreDRjL1MxgHSI1rVuNbRUpNSxhhTknQmDQmTLZLnrve8eaeDsYrjTilgDpEgq2GsNiTSscNUARG1QDC9p+YXtrAEyrYQxMQ42Npk6B5k2FwrydxEM6rIg0wfLYxziPQn+Xtyj0FZ3kyP\/\/Z)","dd14f314":"# Data correlation between the columns.  I did not excluded the columns intentionally so that we can discuss about it.","3bcdc9ec":"# Train-Test Split through stratified sampling.  Let me know if any one wants to know about \"Stratify\"?","54c9add7":"# Function to register the model metrics","7091313c":"# Gradient Boost","b0db13c4":"# Random forest with balanced class weight","6f1bc8da":"# Reading the CSV data","f2a31f9a":"# ****Kindly upvote and support my kaggle journey!!","5e2f6d74":"# Here comes the artificial neural networks","cb95761f":"# Importing necessary libraries","7fbe0936":"# ANN achieved around 95 to 96% of accurary where as machine learning algorithms able to get 98% without much complexity.  Hope this helps!! "}}