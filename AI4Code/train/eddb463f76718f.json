{"cell_type":{"4ff075b1":"code","5dede567":"code","3fec540f":"code","125f0107":"code","27c1f2bb":"code","19883352":"code","2e4e5a89":"code","7b4f8da6":"code","5984324d":"code","64fa1a07":"code","1d0e0773":"code","45747625":"code","940e0dd2":"code","de839312":"code","1165282b":"code","f8644e5c":"code","ca968889":"code","8911e878":"code","08b4d8b2":"code","26e01a46":"code","7b6297d1":"code","013621a5":"code","216658fb":"code","e7c9c788":"code","ec174737":"code","6fad5a42":"code","5cf39bbc":"code","e275503a":"code","be3b5ee4":"code","c884d279":"code","0a815ada":"code","872e00c0":"code","7df524f4":"code","3a2a8ef1":"code","5ad63570":"code","51f5c8ab":"code","3b25e3bf":"code","d3da9528":"code","00e3ec74":"code","ad1624b6":"code","b60eeca3":"code","0af65f9c":"code","fb642fb4":"code","5a77f30d":"code","656ddf76":"code","bc140900":"code","0ce049dc":"code","ff48faa2":"code","5e6bbb4b":"code","ea26516e":"code","af14009d":"code","cfb6e129":"code","d032deca":"code","50785f5e":"code","69615b8d":"code","e7a80e48":"code","e8580f4d":"code","48606897":"code","e2ee8076":"code","e0fbfab9":"code","d600b55c":"code","34f76495":"code","fc6e4fae":"markdown","db1063cc":"markdown","9ef8346c":"markdown","c9332fec":"markdown"},"source":{"4ff075b1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5dede567":"data = pd.read_csv(\"..\/input\/suv-data\/suv_data.csv\")\ndata.head()","3fec540f":"# Dropping \"User ID\"\ndata.drop(columns = [\"User ID\"], axis = 1, inplace = True)","125f0107":"data.shape","27c1f2bb":"data.describe()","19883352":"data.nunique()","2e4e5a89":"data[\"Purchased\"].value_counts()","7b4f8da6":"data.isna().sum()","5984324d":"df = data.copy()","64fa1a07":"df.corr()","1d0e0773":"# Dropping \"Gender\" column\ndf.drop([\"Gender\"],axis=1, inplace = True)","45747625":"df.head()","940e0dd2":"# Splitting the train test data\nfrom sklearn.model_selection import train_test_split","de839312":"X = df.drop([\"Purchased\"],axis=1)\ny = df[\"Purchased\"]","1165282b":"# Scaling the data\nfrom sklearn.preprocessing import StandardScaler","f8644e5c":"scale = StandardScaler()","ca968889":"X = scale.fit_transform(X)","8911e878":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=9)","08b4d8b2":"from sklearn.ensemble import RandomForestClassifier","26e01a46":"clf = RandomForestClassifier(n_estimators=500, random_state=9)","7b6297d1":"clf.fit(X_train, y_train)","013621a5":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score","216658fb":"y_pred_tr = clf.predict(X_train)\ny_pred = clf.predict(X_test)","e7c9c788":"accuracy = accuracy_score(y_train, y_pred_tr)\nprecision = precision_score(y_train, y_pred_tr)\nrecall = recall_score(y_train, y_pred_tr)","ec174737":"print(\"Accuracy for train: \", accuracy)\nprint(\"Precision for train: \", precision)\nprint(\"Recall for train: \", recall)","6fad5a42":"confusion_matrix(y_pred, y_test)","5cf39bbc":"accuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)","e275503a":"print(\"Accuracy for test: \", accuracy)\nprint(\"Precision for test: \", precision)\nprint(\"Recall for test: \", recall)","be3b5ee4":"from sklearn.linear_model import LogisticRegression","c884d279":"lr_classifier = LogisticRegression(max_iter=500, random_state=9)","0a815ada":"lr_classifier.fit(X_train, y_train)","872e00c0":"y_pred_tr = clf.predict(X_train)","7df524f4":"accuracy = accuracy_score(y_train, y_pred_tr)\nprecision = precision_score(y_train, y_pred_tr)\nrecall = recall_score(y_train, y_pred_tr)","3a2a8ef1":"print(\"Accuracy for train: \", accuracy)\nprint(\"Precision for train: \", precision)\nprint(\"Recall for train: \", recall)","5ad63570":"pred_ts = lr_classifier.predict(X_test)","51f5c8ab":"confusion_matrix(pred_ts, y_test)","3b25e3bf":"accuracy = accuracy_score(y_test, pred_ts)\nprecision = precision_score(y_test, pred_ts,labels=np.unique(pred_ts))\nrecall = recall_score(y_test, pred_ts,labels=np.unique(pred_ts))","d3da9528":"print(\"Accuracy for test: \", accuracy)\nprint(\"Precision for test: \", precision)\nprint(\"Recall for test: \", recall)","00e3ec74":"from xgboost.sklearn import XGBClassifier","ad1624b6":"xg_reg = XGBClassifier(use_label_encoder=False) ","b60eeca3":"xg_reg.fit(X_train, y_train) ","0af65f9c":"y_pred_xg = xg_reg.predict(X_test) ","fb642fb4":"confusion_matrix(y_pred_xg, y_test)","5a77f30d":"accuracy = accuracy_score(y_test, y_pred_xg)\nprecision = precision_score(y_test, y_pred_xg)\nrecall = recall_score(y_test, y_pred_xg)","656ddf76":"print(\"Accuracy for test: \", accuracy)\nprint(\"Precision for test: \", precision)\nprint(\"Recall for test: \", recall)","bc140900":"clf = XGBClassifier(objective=\"binary:logistic\",use_label_encoder=False)","0ce049dc":"booster=['gbtree']\nbase_score=[0.1,0.3, 0.5]","ff48faa2":"n_estimators = [100, 200]\nmax_depth = [4, 5]\nlearning_rate=[0.1,0.2]","5e6bbb4b":"# Define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'booster':booster,\n    'base_score':base_score\n    }","ea26516e":"from sklearn.model_selection import RandomizedSearchCV","af14009d":"# Set up the random search with 3-fold cross validation\nrandom_cv = RandomizedSearchCV(estimator=clf,\n            param_distributions=hyperparameter_grid,\n            cv=3, n_iter=10,\n            scoring = 'accuracy',n_jobs = 3,\n            verbose = 5, \n            return_train_score = True,\n            random_state=24)","cfb6e129":"random_cv.fit(X_train,y_train)","d032deca":"random_cv.best_estimator_","50785f5e":"classifier = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.1, max_delta_step=0, max_depth=4,\n              min_child_weight=1, monotone_constraints='()',\n              n_estimators=100, n_jobs=2, num_parallel_tree=1, random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n              tree_method='exact', validate_parameters=1, verbosity=None,use_label_encoder=False,objective=\"binary:logistic\")","69615b8d":"classifier.fit(X_train,y_train)","e7a80e48":"y_pred_xgb1 = classifier.predict(X_train)","e8580f4d":"accuracy = accuracy_score(y_train, y_pred_xgb1)\nprecision = precision_score(y_train, y_pred_xgb1)\nrecall = recall_score(y_train, y_pred_xgb1)","48606897":"print(\"Accuracy for train: \", accuracy)\nprint(\"Precision for train: \", precision)\nprint(\"Recall for train: \", recall)","e2ee8076":"y_pred = classifier.predict(X_test)","e0fbfab9":"confusion_matrix(y_pred, y_test)","d600b55c":"accuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)","34f76495":"print(\"Accuracy for test: \", accuracy)\nprint(\"Precision for test: \", precision)\nprint(\"Recall for test: \", recall)","fc6e4fae":"### Hyperparameter tuning of XGBoost Classifier","db1063cc":"## XG Boost model","9ef8346c":"## Logistic Regression model","c9332fec":"## Random Forest model"}}