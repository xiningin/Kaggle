{"cell_type":{"7584c828":"code","25ae7085":"code","c483b67c":"code","47be6edf":"code","eca5849e":"code","6cb4c955":"code","90e87d31":"code","20aebfa8":"code","fcbdb2b0":"code","c091bd7f":"code","420f24d6":"code","84e7bb87":"code","8567490e":"code","15183b03":"code","f8891223":"code","8a9c6849":"code","5dbc21a1":"code","47e6e13b":"code","1dc2d0a0":"code","326425c5":"code","14fa5bae":"code","1532f935":"code","0eea7bbd":"code","426f2e9f":"code","c6637735":"code","246d6776":"code","61fec052":"code","e99add90":"code","9ff02e32":"code","d460d8b2":"code","1c44368a":"code","61324039":"code","e5d12ae8":"code","8dd1c867":"code","df26c315":"code","57c53c86":"code","0ee71508":"code","bb09fc8a":"code","c8fd5d62":"code","3d513bcb":"code","3f6aefbd":"code","b2b53cfb":"code","80ed8d1b":"code","b6f3a008":"code","67e79ad0":"code","43566478":"code","c37f1b70":"code","ae10158f":"code","434f17b0":"code","f97ff590":"code","1e49f08e":"code","d612876d":"code","85493114":"code","a5016a85":"code","e399175b":"code","2208a155":"code","5484f9d4":"code","35c5de75":"code","aba7552b":"code","75f3b8b2":"code","59a203b7":"code","08f2e44c":"code","a250da8f":"code","1d55673b":"code","0ab180af":"code","6682af63":"code","37d26590":"code","d88ad796":"code","e9a3a0e0":"code","579d89cf":"code","ee00d755":"code","a151f9eb":"code","bd09f35b":"code","4c55ceb3":"code","ac47d11a":"code","59d1b9ae":"code","767fa8f6":"code","850f696b":"code","7cfeb925":"code","7870551b":"code","69e21002":"code","d9bb76dc":"code","a4632580":"code","6db7cc89":"code","ea45f125":"code","093c9cbc":"code","214707f5":"code","b953bb38":"code","79ed1583":"code","22dfe0f6":"code","950ffcbb":"code","75110cbb":"code","7a7042ba":"code","712487ee":"code","71702f7b":"code","e2470888":"code","e0dde821":"code","f0d33291":"code","384b8d0f":"code","f4b7e6f3":"code","3062def8":"code","cb173123":"code","780dee42":"code","f59e4ecb":"code","83171585":"code","fee1d084":"code","67a1b266":"code","5b91719b":"code","b3e10271":"code","5cfc6e7f":"code","414ce586":"code","b4987986":"code","3936f64e":"code","9f6799cb":"code","2e03b4fa":"code","53451d18":"code","6e8cbe2f":"code","f4a9cd19":"code","b0fd4474":"code","895ea26e":"code","4d61fae7":"code","64e39a0f":"code","1718cb92":"code","1658297c":"code","e1901c8b":"code","bff99a92":"code","9934d93c":"code","739b03e1":"code","1a8c5996":"code","f252796d":"code","df0b6adb":"code","9f37a4db":"code","d056deeb":"code","ca7dc1b2":"code","a550a766":"code","e0d0ce96":"code","6cb8ecc3":"code","1a306a96":"code","d6390a37":"code","003edebe":"code","2ade32d5":"code","a357dfb0":"code","9495453d":"code","bd7c8bd0":"code","b485d2ac":"code","8e0e0aca":"code","e378d0cc":"code","48fafad1":"code","526790d4":"code","0e05fb82":"code","42c9a4e2":"markdown","3ced65ff":"markdown","8f12ead3":"markdown","847b0253":"markdown","9d5e4ef1":"markdown","6bd69110":"markdown","5401ada3":"markdown","e28379e5":"markdown","5aeadb32":"markdown","ddbc4b27":"markdown","32344edb":"markdown","bbdd5c70":"markdown","353e8f6d":"markdown","675ca4ec":"markdown","73fce347":"markdown","8c45d46e":"markdown","4594c978":"markdown","08080ab2":"markdown","aeef0364":"markdown","73528ca5":"markdown","86720fec":"markdown","26ed08f4":"markdown","87285589":"markdown","f9362d2b":"markdown","d5f7647e":"markdown","928055ae":"markdown","1fd74e06":"markdown","8d856704":"markdown","18309381":"markdown","a0dbac95":"markdown","d27b0aad":"markdown","8edd5df8":"markdown","a1ebc098":"markdown","2cbfe0b5":"markdown","1b83a50a":"markdown","139a29d9":"markdown","3ebe4a5e":"markdown","247fe5d8":"markdown","9145c32c":"markdown","54706a1f":"markdown","8ee160e2":"markdown","b5a14da7":"markdown","b3629ba6":"markdown","0c40843d":"markdown","b2f8383b":"markdown"},"source":{"7584c828":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","25ae7085":"data = pd.read_csv(\"..\/input\/pokemon.csv\")","c483b67c":"data.info()","47be6edf":"data.describe()","eca5849e":"data.corr() #Dataki b\u00fct\u00fcn correlationlar\u0131 k\u00fc\u00e7\u00fckten b\u00fcy\u00fc\u011fe s\u0131ralar.","6cb4c955":"#Dataki b\u00fct\u00fcn correlationlar\u0131 k\u00fc\u00e7\u00fckten b\u00fcy\u00fc\u011fe s\u0131ralar.\ndata.corr().unstack().sort_values().drop_duplicates()","90e87d31":"#correlation map\nplt.subplots(figsize=(10,10))\nsns.heatmap(data.corr(),annot=True,linewidth=\".5\",cmap=\"YlGnBu\",fmt=\".1f\")\nplt.show()\n#figsize - plotun boyutlar\u0131n\u0131 \n#data.corr() - feature lar aras\u0131ndaki ili\u015fkiyi g\u00f6sterir\n#annot=True -correlation oranlar\u0131n\u0131 g\u00f6sterir\n#linewidths - aralardaki line lar\u0131n kal\u0131nl\u0131\u011f\u0131n\u0131 belirler\n#cmap - kullanaca\u011f\u0131m\u0131z renk tonlar\u0131n\u0131 belirler\n#fmt - precision(0'dan sonraki basamak say\u0131s\u0131)'\u0131 belirler\n#e\u011fer iki feature aras\u0131ndaki correlation 1 veya 1'e yak\u0131n ise iki feature aras\u0131ndaki correlation da do\u011fru(pozitif) orant\u0131 vard\u0131r.\n#e\u011fer iki feature aras\u0131ndaki correlation -1 veya -1'e yak\u0131n ise iki feature aras\u0131ndaki correlation da ters(negatif) orant\u0131 vard\u0131r.\n#e\u011fer 0 veya 0'a yak\u0131n \u00e7\u0131karsa aralar\u0131nda ili\u015fki yoktur.","20aebfa8":"data.head() #ilk be\u015f sat\u0131r","fcbdb2b0":"data.tail() #son be\u015f sat\u0131r","c091bd7f":"data.sample(5) #rastgele be\u015f sat\u0131r","420f24d6":"data.columns","84e7bb87":"data.dtypes","8567490e":"data.drop('#', axis = 1, inplace = True) # gereksiz s\u00fctunu \u00e7\u0131karal\u0131m","15183b03":"data.isnull() #false lar de\u011fer oldu\u011funu true lar olmad\u0131\u011f\u0131n\u0131 g\u00f6sterir","f8891223":"data.isnull().sum() #Datam\u0131z i\u00e7erisinde tan\u0131mlanmam\u0131\u015f de\u011ferler ","8a9c6849":"data.isnull().sum().sum()  #Datam\u0131z i\u00e7erisinde toplam tan\u0131mlanmam\u0131\u015f de\u011ferler ","5dbc21a1":"data[[\"Name\"]].isnull()","47e6e13b":"data.sort_values(\"HP\").head(20)","1dc2d0a0":"data.sort_values(\"HP\", ascending=False).head()","326425c5":"data2 = data[[\"Name\", \"HP\"]].head()\ndata2","14fa5bae":"columnsRequired = [\"Name\", \"HP\"]\ndata3 = data[columnsRequired].head()\ndata3","1532f935":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Speed.plot(kind=\"line\", color=\"g\", label=\"Speed\", linewidth=1, alpha=0.5, grid=True, linestyle=\":\", figsize=(12,12))\ndata.Defense.plot(color=\"r\", label=\"Defense\", linewidth=1, alpha=0.5, grid=True, linestyle=\"-.\")\nplt.legend(loc=\"upper right\")# legend = puts label into plot\nplt.xlabel(\"x axis\")         # label = name of label\nplt.ylabel(\"y axis\")\nplt.title(\"line Plot\")       # title = title of plot\n\n#plt.xticks(np.arange(ilk de\u011fer,son de\u011fer,step)) \nplt.xticks(np.arange(0,800,30)) #x eksenindeki de\u011ferlerin aral\u0131klar\u0131n\u0131 belirler\nplt.yticks(np.arange(0,300,30)) #y eksenindeki de\u011ferlerin aral\u0131klar\u0131n\u0131 belirler\nplt.show()","0eea7bbd":"# Scatter Plot \n# x = attack, y = defense\ndata.plot(kind=\"scatter\", x=\"Attack\", y=\"Defense\", alpha=0.5, color=\"red\", figsize=(5,5))\nplt.xlabel(\"Attack\")    # label = name of label\nplt.ylabel(\"Defense\")\nplt.title(\"Attack Defense Scatter Plot\") # title = title of plot\nplt.show()","426f2e9f":"# Histogram\n# bins = number of bar in figure\ndata.Speed.plot(kind=\"hist\", bins=50, figsize=(10,10))\nplt.show()\n#bins - bar say\u0131s\u0131n\u0131 belirler","c6637735":"# clf() = cleans it up again you can start a fresh\ndata.Speed.plot(kind=\"hist\", bins=50)\nplt.clf() # We can not see plot if we use clf() method","246d6776":"#we dont use.its just example\ndic2 = [{\"id\": 825, \"name\": \"support group\"}, {\"id\": 851, \"name\": \"dual identity\"}]\ndf2 = pd.DataFrame(dic2)\ndf2","61fec052":"#create dictionary and look its keys and values\ndictionary = {\"spain\":\"madrid\",\"usa\":\"vegas\"}\nprint(dictionary.keys())\nprint(dictionary.values())","e99add90":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary[\"spain\"] = \"barcelona\" # update existing entry\nprint(dictionary)\ndictionary[\"france\"] = \"paris\"    #Add new entry\nprint(dictionary)\ndel dictionary[\"spain\"]           # remove entry with key 'spain'\nprint(dictionary)\nprint(\"france\" in dictionary)     # check include or not\ndictionary.clear()                # remove all entries in dict\nprint(dictionary)","9ff02e32":"# In order to run all code you need to take comment this line\n#del dictionary         # delete entire dictionary     \nprint(dictionary)       # it gives error because dictionary is deleted","d460d8b2":"print(type(data)) # pandas.core.frame.DataFrame\nprint(type(data[\"Defense\"])) #pandas.core.series.Series\nprint(type(data[\"Defense\"].values)) #numpy.ndarray","1c44368a":"series = data['Defense']        # data['Defense'] = series\ndata_frame = data[['Defense']]  # data[['Defense']] = data frame\n\nprint(type(series))\nprint(type(data_frame))\n\nprint(series)\ndata_frame","61324039":"# Comparison operator\nprint(3 > 2)\nprint(3!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","e5d12ae8":"# 1 - Filtering Pandas data frame\nx = data[\"Defense\"]>200     # There are only 3 pokemons who have higher defense value than 200\ndata[x]","8dd1c867":"# 2 - Filtering pandas with logical_and\n# There are only 2 pokemons who have higher defence value than 200 and higher attack value than 100\ndata[np.logical_and(data[\"Defense\"]>200,data[\"Attack\"]>100)]","df26c315":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data[\"Defense\"]>200) & (data[\"Attack\"]>100)]","57c53c86":"# Stay in loop if condition( i is not equal 5) is true\ni = 0\nwhile i != 5:\n    print(\"i is: \",i)\n    i+=1\nprint(i,\" is equal to 5\")","0ee71508":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\n\nfor i in lis:\n    print(\"i is: \",i)\nprint(\"\")    \n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index,value in enumerate(lis):\n    print(index,\" : \",value)\nprint(\"\")\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = dictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint(\"\")\n# For pandas we can achieve index and value\nfor index,value in data[[\"Attack\"]][0:5].iterrows():\n    print(index,\" : \",value)\ndata[[\"Attack\"]][0:5]","bb09fc8a":"# example of what we learn above\ndef tuple_ex():\n    \"\"\" return defined t tuble\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuple_ex()\nprint(a,b,c)","c8fd5d62":"# guess print what\nx = 2\ndef f():\n    x=3\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope","3d513bcb":"# What if there is no local scope\nx = 5\ndef f():\n    y = 2*x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x\n# First local scopesearched, then global scope searched, if two of them cannot be found lastly built in scope searched.","3f6aefbd":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)","b2b53cfb":"#nested function\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())    ","80ed8d1b":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n# what if we want to change default arguments\nprint(f(5,4,3))","b6f3a008":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1,1,2)\nprint(\"\")\nf(1,2,3,4)\nprint(\"\")\nf(\"orhan\",\"kadir\",\"cemal\",1)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key, \" \", value)\nf(country = 'spain', capital = 'madrid', population = 123456)","67e79ad0":"# lambda function\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","43566478":"number_list=(1,2,3,4,5,6,7,8,9)\ny = map(lambda x : x**2 ,number_list)\n#liste_Y = list(y) #map data tipini list'e d\u00f6n\u00fc\u015ft\u00fcrd\u00fck\n#print(liste_Y) #[1, 4, 9, 16, 25, 36, 49, 64, 81]\n#OR short way\nprint(list(y)) #[1, 4, 9, 16, 25, 36, 49, 64, 81]","c37f1b70":"# iteration example\nname = \"Orhan\"\nitr = iter(name)\nprint(next(itr))# print next iteration\nprint(next(itr))# print next iteration\nprint(*itr)     # print remaining iteration","ae10158f":"list1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)  #converting zip to list type\nprint(z_list)\nprint(\"\")    \nitr = iter(z_list) \nprint(next(itr))   # print next iteration\nprint(*itr)        # print remaining iteration","434f17b0":"un_zip = zip(*z_list)\nunlist1,unlist2 = list(un_zip) # unzip returns tuple\nprint(unlist1)\nprint(unlist2)\nprint(type(unlist1))\nprint(type(list(unlist1))) #if we want to change data type tuple to list we need to use list() method.","f97ff590":"num1 = [1,2,3]\nnum2 = [i+1 for i in num1]\nprint(num2)\n#OR\nprint([i+1 for i in num1])","1e49f08e":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i==10 else i-5 if i<7 else i+5 for i in num1]\nprint(num2)","d612876d":"# lets return pokemon csv and make one more list comprehension example\n# lets classify pokemons whether they have high or low speed. Our threshold is average speed.\nthreshold = sum(data.Speed)\/len(data.Speed)\ndata[\"speed_level\"] = [\"high\" if i>threshold else \"low\" for i in data.Speed]\ndata.loc[:10,[\"speed_level\",\"Speed\"]]","85493114":"data = pd.read_csv('..\/input\/pokemon.csv')\ndata.head()  # head shows first 5 rows","a5016a85":"#\u00f6rne\u011fin columnlar aras\u0131nda type 1 ad\u0131nda bir feature var.Bunu clean etmemiz gerekir.\n#datadaki bu unclean \u015feyleri d\u00fczeltmemiz gerekir\n#data.Type 1 diyemeyiz\n#data[\"Type 1\"] diye \u00e7a\u011f\u0131rabiliriz\n#Bu gibi durumlar\u0131 ortadan kald\u0131rmak i\u00e7in columnlar\u0131 belirli bir formata(lowercase-upper case) getirmek gerekir.\n#data.type1 haline getirmek daha uygun olacakt\u0131r.\n#data.columns = [each.lower() for each in data.columns]\n#print(data.columns)\n#***OR\n#data.columns = [each.upper() for each in data.columns]\n#print(data.columns)\n\n#dataFrame1.columns = [each.split()[0]+\"_\"+each.split()[1] if(len(each.split())>1) else each for each in dataFrame1.columns]\n#print(dataFrame1.columns)\n#***OR birden fazla bo\u015fluk i\u00e7in\n#data.columns = [each.replace(\" \",\"_\") if(len(each.split())>1) else each for each in data.columns]\n#print(data.columns)   ","e399175b":"# tail shows last 5 rows\ndata.tail()","2208a155":"# columns gives column names of features\ndata.columns","5484f9d4":"# shape gives number of rows and columns in a tuple\ndata.shape","35c5de75":"# info gives data type like dataframe, number of sample or row, number of feature or column, feature types and memory usage\ndata.info()","aba7552b":"data.dtypes","75f3b8b2":"data[\"Type 1\"].unique()","59a203b7":"data[\"Type 1\"] == \"Dragon\" # We can filter the data if we want \ndata[data[\"Type 1\"] == \"Dragon\"]","08f2e44c":"# For example lets look frequency of pokemom types\nprint(data[\"Type 1\"].value_counts(dropna=False,sort=True))# if there are nan values that also be counted\n#sort : boolean, default True   =>Sort by values\n#dropna : boolean, default True =>Don\u2019t include counts of NaN.\n# As it can be seen below there are 112 water pokemon or 70 grass pokemon","a250da8f":"# Lets check Type 2\nprint(data[\"Type 2\"].value_counts(dropna=False,sort=True))\n# As you can see, there are 386 NAN values","1d55673b":"# For example max HP is 255 or min defense is 5\ndata.describe() #ignore null entries","0ab180af":"# For example: compare attack of pokemons that are legendary  or not\n# Black line at top is max\n# Blue line at top is 75%\n# Red line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n#Outlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1).     (Q3-Q1) = IQR\ndata.boxplot(column='Attack',by = 'Legendary',fontsize=12,figsize=(14,14))\n\ndata2 = data[data[\"Legendary\"]==False]\nprint(data2.Attack.max())\nprint(data2.Attack.quantile(q=0.75))\nprint(data2.Attack.quantile(q=0.5))\nprint(data2.Attack.quantile(q=0.25))\nprint(data2.Attack.min())\n\ndata3 = data[data[\"Legendary\"]==True]\nprint(data3.Attack.max())\nprint(data3.Attack.quantile(q=0.75))\nprint(data3.Attack.quantile(q=0.5))\nprint(data3.Attack.quantile(q=0.25))\nprint(data3.Attack.min())\n\n# FINDING OUTLIERS\n#Form\u00fcl\u00fc dataya g\u00f6re de\u011fi\u015ftirmeliyiz\n\n#FOR data2\nprint([x for x in data2.Attack if x<(data2.Attack.quantile(0.25)-1.5*(data2.Attack.quantile(0.75)-data2.Attack.quantile(0.25)))])\nprint([x for x in data2.Attack if x>(data2.Attack.quantile(0.75)+1.5*(data2.Attack.quantile(0.75)-data2.Attack.quantile(0.25)))])\n\n#FOR data3\nprint([x for x in data3.Attack if x<(data3.Attack.quantile(0.25)-1.5*(data3.Attack.quantile(0.75)-data3.Attack.quantile(0.25)))])\nprint([x for x in data3.Attack if x>(data3.Attack.quantile(0.75)+1.5*(data3.Attack.quantile(0.75)-data3.Attack.quantile(0.25)))])","6682af63":"#Outlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR\n\n#b\u00fct\u00fcn columnlar\u0131 ve rowlar\u0131 g\u00f6sterir.\npd.set_option(\"display.max_columns\",None) \npd.set_option(\"display.max_rows\",None)\n\n\ndata.boxplot(column =\"Defense\",by=\"Type 2\",grid=True,fontsize=12,figsize=(14,14))\n\n#2 \u00f6rne\u011fi inceleyelim ve boxplot'tan do\u011frulayal\u0131m.\ndata2 = data[data[\"Type 2\"]==\"Ground\"]\n\ndata3 = data[data[\"Type 2\"]==\"Rock\"]\n\n#for data2\nprint(data2.Defense.max())\nprint(data2.Defense.quantile(q=0.5)) #q=quantile\nprint(data2.Defense.quantile(q=0.25))\nprint(data2.Defense.quantile(q=0.75))\nprint(data2.Defense.min())\nprint(data2.std())\n#for data3\nprint(data3.Defense.max())\nprint(data3.Defense.quantile(q=0.5)) #q=quantile\nprint(data3.Defense.quantile(q=0.25))\nprint(data3.Defense.quantile(q=0.75))\nprint(data3.Defense.min())\nprint(data3.std())\n\n# FINDING OUTLIERS\n#Form\u00fcl\u00fc dataya g\u00f6re de\u011fi\u015ftirmeliyiz\ndata4 = data[data[\"Type 2\"]==\"Psychic\"]\nfor x in data4.Defense:\n    if x<(data4.Defense.quantile(0.25)-1.5*(data4.Defense.quantile(0.75)-data4.Defense.quantile(0.25))):\n       print(x)\n#doing with list comprehension\n#burada else kullansayd\u0131k if 'i ba\u015fa al\u0131rd\u0131k ama e\u011fer kullanm\u0131yacaksak ba\u015fa al\u0131rsak else kullanmam\u0131z i\u00e7in bize hata verir\n#o y\u00fczden if i sona almal\u0131y\u0131z\nprint([x for x in data4.Defense if x<(data4.Defense.quantile(0.25)-1.5*(data4.Defense.quantile(0.75)-data4.Defense.quantile(0.25)))])\nprint([x for x in data4.Defense if x>(data4.Defense.quantile(0.75)+1.5*(data4.Defense.quantile(0.75)-data4.Defense.quantile(0.25)))])","37d26590":"# Firstly I create new data from pokemons data to explain melt more easily.\ndata_new = data.head()    # I only take 5 rows into new data\ndata_new","d88ad796":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new, id_vars = \"Name\",value_vars=[\"Attack\",\"Defense\"])\nmelted","e9a3a0e0":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index=\"Name\", columns = \"variable\", values=\"value\")","579d89cf":"#vertical olarak birlestir\ndata1 = data.head()\ndata2 = data.head()\nv_concat = pd.concat([data1,data2],axis=0,ignore_index=True)\nv_concat","ee00d755":"# Firstly lets create 2 data frame\ndata1 = data.Attack.head()\ndata2 = data.Defense.head()\nh_concat = pd.concat([data1,data2], axis=1)\nh_concat","a151f9eb":"hp = data.HP.head()\nattack = data.Attack.head()\nh_concat = pd.concat([hp,attack,hp],axis=1)\nh_concat","bd09f35b":"name = data.Name.head()\ntype1 = data[\"Type 1\"].head()\nhp = data.HP.head()\nattack = data.Attack.head()\nh_concat = pd.concat([name+\" - \"+type1,hp*1.8,attack],axis=1)\nh_concat","4c55ceb3":"data.dtypes","ac47d11a":"# lets convert object(str) to categorical and int to float.\n#DONT forget ,Setting return back default setting to int\n#data[\"Type 1\"] = data[\"Type 1\"].astype(\"category\")\n#data.Speed = data.Speed.astype(\"float\")\n#data.Speed[0:10] #as you see it is converted from int to float","59d1b9ae":"# As you can see Type 1 is converted from object to categorical\n# And Speed is converted from int to float\ndata.dtypes","767fa8f6":"# Lets look at does pokemon data have nan value\n# As you can see there are 800 entries. However Type 2 has 414 non-null object so it has 386 null object.\ndata[\"Type 2\"][4]","850f696b":"# Lets chech Type 2\ndata[\"Type 2\"].value_counts(dropna =False)\n# As you can see, there are 386 NAN value","7cfeb925":"# Lets drop nan values\n# also we will use data to fill missing value\ndata[\"Type 2\"].dropna(inplace = True)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\ndata","7870551b":"#  Lets check with assert statement\n# Assert statement:\nassert 1==1 # return nothing because it is true\ndata","69e21002":"#In order to run all code, we need to make this line comment\n#assert 1==2 # return error because it is false","d9bb76dc":"assert  data['Type 2'].notnull().all() # returns nothing because we drop nan values","a4632580":"data[\"Type 2\"].fillna(\"empty\",inplace = True)\ndata","6db7cc89":"assert  data['Type 2'].notnull().all() # returns nothing because we do not have nan values","ea45f125":"# # With assert statement we can check a lot of thing. For example\nassert data.columns[1] == 'Name'\nassert data.Speed.dtype == np.int\n#OR\nassert data.Speed.dtype == \"int64\"\nprint(data.Speed.dtypes)","093c9cbc":"country = [\"Spain\",\"France\"]\npopulation = [\"1000\",\"2000\"]\nlist_label = [\"country\",\"population\"]\nlist_col = [country,population]\nprint(list_col)\nzipped = list(zip(list_label,list_col))\nprint(zipped)\ndata_dict = dict(zipped)\nprint(data_dict)\ndf = pd.DataFrame(data_dict)\ndf","214707f5":"df[\"capital\"]=[\"madrid\",\"paris\"]\ndf","b953bb38":"df[\"income\"] = 0\ndf","79ed1583":"# Plotting all data \ndata1 = data.loc[:,[\"Attack\",\"Defense\",\"Speed\"]]\ndata1.plot()\n# SAME THING\n#data.Attack.plot()\n#data.Defense.plot()\n#data.Speed.plot()","22dfe0f6":"# subplots\ndata1.plot(subplots = True)\nplt.show()","950ffcbb":"# scatter plot  \ndata1.plot(kind = \"scatter\",x=\"Attack\",y = \"Defense\")\nplt.show()","75110cbb":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# hist plot  \ndata1.Defense.plot(kind = \"hist\",bins = 50,range= (0,250),normed = True)\nplt.show()","7a7042ba":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","712487ee":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","71702f7b":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\n#OR\n#data2.set_index(\"date\",inplace=True)\ndata2 ","e2470888":"#b\u00fct\u00fcn columnlar\u0131 ve rowlar\u0131 g\u00f6sterir.\npd.set_option(\"display.max_columns\",None) \npd.set_option(\"display.max_rows\",None)\n\n# Now we can select according to our date index\nprint(data2.loc[\"1993-03-16\"]) #print(data2.loc[\"1993-03-16\",:]) same thing\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","e0dde821":"# We will use data2 that we create at previous part\ndata2.resample(\"A\").mean() #y\u0131ldan y\u0131la featurelar\u0131n kendi i\u00e7inde ortalamas\u0131","f0d33291":"# Lets resample with month\ndata2.resample(\"M\").mean()\n# As you can see there are a lot of nan because data2 does not include all months","384b8d0f":"# In real life (data is real. Not created from us like data2) we can solve this problem with interpolate\n# We can interpolete from first value\ndata2.resample(\"M\").first().interpolate(\"linear\")","f4b7e6f3":"# Or we can interpolate with mean()\ndata2.resample(\"M\").mean().interpolate(\"linear\")","3062def8":"data = pd.read_csv(\"..\/input\/pokemon.csv\")\ndata.set_index(\"#\",inplace=True)\ndata.head()","cb173123":"# indexing using square brackets\ndata[\"HP\"][1]","780dee42":"# using column attribute and row label\ndata.HP[1]","f59e4ecb":"# using loc accessor\ndata.loc[2,[\"HP\"]]","83171585":"# Selecting only some columns\ndata[[\"HP\"]]","fee1d084":"# Difference between selecting columns: series and dataframes\nprint(type(data[\"HP\"]))     # series\nprint(type(data[[\"HP\"]]))   # data frames","67a1b266":"# Slicing and indexing series\ndata.loc[1:10,\"HP\":\"Defense\"]   # 10 and \"Defense\" are inclusive","5b91719b":"# Reverse slicing \na =data.loc[10:1:-1,\"Defense\":\"HP\":-1] \na","b3e10271":"# From something to end\ndata.loc[1:10,\"Speed\":] ","5cfc6e7f":"# Creating boolean series\nboolean = data.HP > 200\ndata[boolean]","414ce586":"# Combining filters\nfirst_filter = data.HP > 150\nsecond_filter = data.Speed > 35\ndata[np.logical_and(first_filter,second_filter)]\n#OR\n#data[np.logical_and(first_filter,second_filter)]","b4987986":"# Filtering column based others\ndata.HP[data.Speed<15]","3936f64e":"# Filtering column based others\ndata[[\"HP\"]][data.Speed<15]","9f6799cb":"# Filtering column based others\na = data[data.Speed<15]\na[[\"HP\"]]","2e03b4fa":"# Plain python functions\ndef div(n):\n    return n\/2\ndata[\"new_hp\"]=data.HP.apply(div)\ndata","53451d18":"data[\"new_hp\"] = data.HP.apply(lambda hp : hp\/2)\ndata","6e8cbe2f":"# Defining column using other columns\ndata[\"total_power\"] = data.Attack + data.Defense\ndata.head()","f4a9cd19":"# our index name is this:\nprint(data.index.name)\n#lets change it\ndata.index.name = \"index_name\"\ndata.head()","b0fd4474":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata.head()\n# first copy of our data to data3 then change index\ndata3 = data.copy()\n# lets make index start from 100. It is not remarkable change but it is just example\ndata3.index = range(0,800,1)#800 exclusive->799\ndata3.head()","895ea26e":"# We can make one of the column as index. I actually did it at the beginning of manipulating data frames with pandas section\n# It was like this\n# data= data.set_index(\"#\")\n# also you can use \ndata3.index = data[\"#\"]\ndata3.index = data[\"Name\"]\ndata3.index = data[\"#\"]\ndata3.head()\n#set_index kullan\u0131rsak o feature \u0131 index yapar bir daha feature yapmay\u0131z\n#ama data[\"#\"] series \u015feklinde verirsek hem column hem feature olarak kullanabiliriz.","4d61fae7":"# lets read data frame one more time to start from beginning\ndata = pd.read_csv('..\/input\/pokemon.csv')\ndata.head()\n# As you can see there is index. However we want to set one or more column to be index","64e39a0f":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"Type 1\",\"Type 2\"]) \ndata1\n# data1.loc[\"Fire\",\"Flying\"] # how to use indexes","1718cb92":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","1658297c":"# pivoting\ndf.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")","e1901c8b":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1\n#OR\n#df1 = df.set_index([\"gender\",\"treatment\"])\n# lets unstack it","bff99a92":"# level determines indexes\ndf1.unstack(level=0)","9934d93c":"df1.unstack(level=1)","739b03e1":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","1a8c5996":"df","f252796d":"pd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])","df0b6adb":"data.dropna(inplace=True) #NaN olan sat\u0131rlar silinir","9f37a4db":"data.groupby(\"Type 2\").Name.count() #type2 ye g\u00f6re s\u0131rala ve o type da ka\u00e7 tane pokemon ismi var","d056deeb":"data.groupby(\"Type 2\").Name.count().sum() #type2 ye g\u00f6re s\u0131rala ve o type da ka\u00e7 tane pokemon ismi var","ca7dc1b2":"data.groupby(\"Type 2\").Name.count().sort_values(ascending=False).head(10)","a550a766":"data.groupby(\"Type 2\").Name.count().sort_values(ascending=False).head(10).plot(kind=\"line\")\n#let find flying counts\ndata[data[\"Type 2\"]==\"Flying\"][\"Type 2\"].count()","e0d0ce96":"data.groupby(\"Type 2\").Name.count().sort_values(ascending=False).head(10).plot(kind=\"bar\")","6cb8ecc3":"data.groupby(\"Type 2\").Name.count().head(10).plot(kind=\"bar\")","1a306a96":"data.groupby(\"Type 2\").Name.count().plot(kind=\"bar\")","d6390a37":"data.groupby(\"Type 2\").Name.count().sort_values(ascending=False).head(10).plot(kind=\"hist\",bins=20)","003edebe":"data.groupby(\"Type 2\").Name.count().sort_values(ascending=False).head(10).plot(kind=\"box\")","2ade32d5":"data.groupby(\"Type 2\").Name.count().sort_values(ascending=False).head(10).plot(kind=\"area\")","a357dfb0":"data.groupby(\"Type 2\").Name.count().sort_values(ascending=False).head(10).plot(kind=\"pie\")","9495453d":"# We will use df\ndf","bd7c8bd0":"# according to treatment take means of other features\ndf.groupby(\"treatment\").mean()   # mean is aggregation \/ reduction method\n# there are other methods like sum, std,max or min","b485d2ac":"# we can only choose one of the feature\ndf.groupby(\"treatment\").age.mean() \n#OR\n#df.groupby(\"treatment\")[[\"age\"]].mean() ","8e0e0aca":"df.groupby(\"treatment\").mean().sort_values(\"age\",ascending=False)","e378d0cc":"# we can only choose one of the feature\ndf.groupby(\"treatment\").age.max()","48fafad1":"# Or we can choose multiple features\ndf.groupby(\"treatment\")[[\"age\",\"response\"]].mean() #dataframe olarak g\u00f6sterir\n#OR\n#df[[\"age\"]].mean() #series olarak g\u00f6sterir","526790d4":"df.groupby(\"treatment\")[[\"age\"]].mean() ","0e05fb82":"df.info()\n# as you can see gender is object\n# However if we use groupby, we can convert it categorical data. \n# Because categorical data uses less memory, speed up operations like groupby\n#df[\"gender\"] = df[\"gender\"].astype(\"category\")\n#df[\"treatment\"] = df[\"treatment\"].astype(\"category\")\n#df.info()\n","42c9a4e2":"<a id=\"30\"><\/a> <br>\n### INDEXING PANDAS TIME SERIES\n* datetime = object\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","3ced65ff":"<a id=\"41\"><\/a> <br>\n### MELTING DATA FRAMES\n* Reverse of pivoting","8f12ead3":"<a id=\"9\"><\/a> <br>\n### SCOPE\nWhat we need to know about scope:\n* global: defined main body in script\n* local: defined in a function\n* built in scope: names in predefined built in scope module such as print, len\n<br><br>Lets make some basic examples","847b0253":"<a id=\"3\"><\/a> <br>\n### DICTIONARY\nWhy we need dictionary?\n* It has 'key' and 'value'\n* Faster than lists\n<br>\nWhat is key and value. Example:\n* dictionary = {'spain' : 'madrid'}\n* Key is spain.\n* Values is madrid.\n<br>\n<br>**It's that easy.**\n<br>Lets practice some other properties like keys(), values(), update, add, check, remove key, remove all entries and remove dicrionary.","9d5e4ef1":"<a id=\"25\"><\/a> <br>\n# 4. PANDAS FOUNDATION ","6bd69110":"<a id=\"27\"><\/a> <br>\n### BUILDING DATA FRAMES FROM SCRATCH\n* We can build data frames from csv as we did earlier.\n* Also we can build dataframe from dictionaries\n    * zip() method: This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.\n* Adding new column\n* Broadcasting: Create new column and assign a value to entire column","5401ada3":"<a id=\"18\"><\/a> <br>\n### EXPLORATORY DATA ANALYSIS\nvalue_counts(): Frequency counts\n<br>outliers: the value that is considerably higher or lower from rest of the data\n* Lets say value at 75% is Q3 and value at 25% is Q1. \n* Outlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR\n<br>We will use describe() method. Describe method includes:\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry\n\n<br> What is quantile?\n\n* 1,4,5,6,8,9,11,12,13,14,15,16,17\n* The median is the number that is in **middle** of the sequence. In this case it would be 11.\n\n* The lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n* The upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above.","e28379e5":"<a id=\"15\"><\/a> <br>\n### LIST COMPREHENS\u0130ON\n**One of the most important topic of this kernel**\n<br>We use list comprehension for data analysis often. \n<br> list comprehension: collapse for loops for building lists into a single line\n<br>Ex: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is  unnecessarily long. We can make it one line code that is list comprehension.","5aeadb32":"<a id=\"35\"><\/a> <br>\n### FILTERING DATA FRAMES\nCreating boolean series\nCombining filters\nFiltering column based others","ddbc4b27":"<a id=\"24\"><\/a> <br>\n### MISSING DATA and TESTING WITH ASSERT\nIf we encounter with missing data, what we can do:\n* leave as is\n* drop them with dropna()\n* fill missing value with fillna()\n* fill missing values with test statistics like mean\n<br>Assert statement: check that you can turn on or turn off when you are done with your testing of the program","32344edb":"<a id=\"22\"><\/a> <br>\n### CONCATENATING DATA\nWe can concatenate two dataframe ","bbdd5c70":"<a id=\"31\"><\/a> <br>\n### RESAMPLING PANDAS TIME SERIES\n* Resampling: statistical method over different time intervals\n    * Needs string to specify frequency like \"M\" = month or \"A\" = year\n* Downsampling: reduce date time rows to slower frequency like from daily to weekly\n* Upsampling: increase date time rows to faster frequency like from daily to hourly\n* Interpolate: Interpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019 \n    * https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.interpolate.html\n","353e8f6d":"<a id=\"26\"><\/a> <br>\n### REV\u0130EW of PANDAS\nAs you notice, I do not give all idea in a same time. Although, we learn some basics of pandas, we will go deeper in pandas.\n* single column = series\n* NaN = not a number\n* dataframe.values = numpy\n","675ca4ec":"<a id=\"5\"><\/a> <br>\nBefore continue with pandas,   we need to learn **logic, control flow** and **filtering.**\n<br>Comparison operator:  ==, <, >, <=\n<br>Boolean operators: and, or ,not\n<br> Filtering pandas","73fce347":"<a id=\"16\"><\/a> <br>\n# 3.CLEANING DATA","8c45d46e":"# INTRODUCTION TO DATA SCIENCE","4594c978":"<a id=\"42\"><\/a> <br>\n### CATEGORICALS AND GROUPBY","08080ab2":"**Filtering Data**","aeef0364":"### PANDAS\nWhat we need to know about pandas?\n* CSV: comma - separated values","73528ca5":"<a id=\"13\"><\/a> <br>\n### ANONYMOUS FUNCT\u0130ON\nLike lambda function but it can take more than one arguments.\n* map(func,seq) : applies a function to all the items in a list\n","86720fec":"[i + 1 for i in num1 ]: list of comprehension\n<br> i +1: list comprehension syntax\n<br> for i in num1: for loop syntax\n<br> i: iterator\n<br> num1: iterable object","26ed08f4":"<a id=\"11\"><\/a> <br>\n### DEFAULT and FLEXIBLE ARGUMENTS\n* Default argument example:\n<br> def f(a, b=1):\n        \"\"\" b = 1 is default argument\"\"\"\n* Flexible argument example:\n<br> def f(*args):\n       \"\"\" *args can be one or more\"\"\"\n<br>def f(** kwargs)\n       \"\"\" **kwargs is a dictionary\"\"\"\n       \n<br><br> lets write some code to practice  ","87285589":"**zip(): zip lists**","f9362d2b":"<a id=\"37\"><\/a> <br>\n### INDEX OBJECTS AND LABELED DATA\nindex: sequence of label\n","d5f7647e":"<a id=\"14\"><\/a> <br>\n### ITERATORS\n* iterable is an object that can return an iterator\n* iterable: an object with an associated iter() method\n<br> example: list, strings and dictionaries\n* iterator: produces next value with next() method","928055ae":"<a id=\"20\"><\/a> <br>\n### TIDY DATA\nWe tidy data with melt().\nDescribing melt is confusing. Therefore lets make example to understand it.\n","1fd74e06":"<a id=\"28\"><\/a> <br>\n### VISUAL EXPLORATORY DATA ANALYSIS\n* Plot\n* Subplot\n* Histogram:\n    * bins: number of bins\n    * range(tuble): min and max values of bins\n    * normed(boolean): normalize or not\n    * cumulative(boolean): compute cumulative distribution","8d856704":"<a id=\"33\"><\/a> <br>\n### INDEXING DATA FRAMES\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","18309381":"<a id=\"34\"><\/a> <br>\n### SLICING DATA FRAME\n* Difference between selecting columns\n* Series and data frames\n* Slicing and indexing series\n* Reverse slicing \n* From something to end","a0dbac95":"<a id=\"36\"><\/a> <br>\n### TRANSFORMING DATA\n* Plain python functions\n* Lambda function: to apply arbitrary python function to every element\n* Defining column using other columns","d27b0aad":"<a id=\"6\"><\/a> <br>\n### WHILE and FOR LOOPS\nWe will learn most basic while and for loops","8edd5df8":"<a id=\"17\"><\/a> <br>\n### DIAGNOSE DATA for CLEANING\nWe need to diagnose and clean data before exploring.\n<br>Unclean data:\n* Column name inconsistency like upper-lower case letter or space between words\n* missing data\n* different language\n\n<br> We will use head, tail, columns, shape and info methods to diagnose data\n","a1ebc098":"<a id=\"23\"><\/a> <br>\n### DATA TYPES\nThere are 5 basic data types: object(string),booleab,  integer, float and categorical.\n<br> We can make conversion data types like from str to categorical or from int to float\n<br> Why is category important: \n* make dataframe smaller in memory \n* can be utilized for anlaysis especially for sklear(we will learn later)","2cbfe0b5":"<a id=\"7\"><\/a> <br>\n# 2. PYTHON DATA SCIENCE TOOLBOX\n","1b83a50a":"<a id=\"21\"><\/a> <br>\n### PIVOTING DATA\nReverse of melting.","139a29d9":"<a id=\"38\"><\/a> <br>\n### HIERARCHICAL INDEXING\n* Setting indexing","3ebe4a5e":"<a id=\"10\"><\/a> <br>\n### NESTED FUNCTION\n* function inside function.\n* There is a LEGB rule that is search local scope, enclosing function, global and built in scopes, respectively.","247fe5d8":"Up to now, you learn \n* User defined function \n* Scope\n* Nested function\n* Default and flexible arguments\n* Lambda function\n*  Anonymous function\n*  Iterators\n* List comprehension\n","9145c32c":"<a id=\"19\"><\/a> <br>\n### VISUAL EXPLORATORY DATA ANALYSIS\n* Box plots: visualize basic statistics like outliers, min\/max or quantiles","54706a1f":"<a id=\"40\"><\/a> <br>\n### STACKING and UNSTACKING DATAFRAME\n* deal with multi label indexes\n* level: position of unstacked index\n* swaplevel: change inner and outer level index position","8ee160e2":"<a id=\"32\"><\/a> <br>\n# MANIPULATING DATA FRAMES WITH PANDAS","b5a14da7":"<a id=\"8\"><\/a> <br>\n### USER DEFINED FUNCTION\nWhat we need to know about functions:\n* docstrings: documentation for functions. Example:\n<br>for f():\n    <br>\"\"\"This is docstring for documentation of function f\"\"\"\n* tuble: sequence of immutable python objects. \n<br>cant modify values\n<br>tuple uses paranthesis like tuple = (1,2,3)\n<br>unpack tuple into several variables like a,b,c = tuble\n    ","b3629ba6":"<a id=\"39\"><\/a> <br>\n### PIVOTING DATA FRAMES\n* pivoting: reshape tool","0c40843d":"<a id=\"2\"><\/a> <br>\n### MATPLOTLIB\nMatplot is a python library that help us to plot data. The easiest and basic plots are line, scatter and histogram plots.\n* Line plot is better when x axis is time.\n* Scatter is better when there is correlation between two variables\n* Histogram is better when we need to see distribution of numerical data.\n* Customization: Colors,labels,thickness of line, title, opacity, grid, figsize, ticks of axis and linestyle  ","b2f8383b":"<a id=\"1\"><\/a> <br>\n# 1. INTRODUCTION TO PYTHON"}}