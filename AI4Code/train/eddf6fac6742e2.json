{"cell_type":{"f8ce7555":"code","4fae009f":"code","ea9822e7":"code","5cdf5666":"code","c0abf0f9":"code","da06ebc5":"code","bd9783f3":"code","becc62b9":"code","0712bccb":"code","8fb86ab1":"code","81474ce5":"code","cfa78fa5":"code","00f9102c":"code","b5cd426c":"code","4e577b8b":"code","dfc6f106":"code","a71c5b62":"code","0a0c30b9":"code","4bb31096":"markdown","3db1ea9b":"markdown"},"source":{"f8ce7555":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4fae009f":"import numpy as np\nimport os\n\nimport keras\nfrom keras.models import Sequential, Model\nfrom keras.layers import Input, Dense, Conv2D, BatchNormalization, Dropout, Flatten\nfrom keras.layers import Activation, Reshape, Conv2DTranspose, UpSampling2D # new! \nfrom keras.optimizers import RMSprop\n \nimport pandas as pd\nfrom matplotlib import pyplot as plt\n%matplotlib inline","ea9822e7":"input_images = \"\/kaggle\/input\/trees-dataset\/full_numpy_bitmap_tree.npy\"","5cdf5666":"data = np.load(input_images)","c0abf0f9":"data.shape","da06ebc5":"data[4242]","bd9783f3":"data = data\/255\ndata = np.reshape(data,(data.shape[0],28,28,1)) \nimg_w,img_h = data.shape[1:3]\ndata.shape","becc62b9":"plt.imshow(data[4242,:,:,0], cmap='Greys')","0712bccb":"def discriminator_builder(depth=64,p=0.4):\n\n    inputs = Input((img_w,img_h,1))\n    \n    conv1 = Conv2D(depth*1, 5, strides=2, padding='same', activation='relu')(inputs)\n    conv1 = Dropout(p)(conv1)\n    \n    conv2 = Conv2D(depth*2, 5, strides=2, padding='same', activation='relu')(conv1)\n    conv2 = Dropout(p)(conv2)\n    \n    conv3 = Conv2D(depth*4, 5, strides=2, padding='same', activation='relu')(conv2)\n    conv3 = Dropout(p)(conv3)\n    \n    conv4 = Conv2D(depth*8, 5, strides=1, padding='same', activation='relu')(conv3)\n    conv4 = Flatten()(Dropout(p)(conv4))\n    \n    output = Dense(1, activation='sigmoid')(conv4)\n\n    model = Model(inputs=inputs, outputs=output)\n    model.summary()\n    \n    return model","8fb86ab1":"discriminator = discriminator_builder()","81474ce5":"discriminator.compile(loss='binary_crossentropy', \n                      optimizer=RMSprop(lr=0.0008, decay=6e-8, clipvalue=1.0), \n                      metrics=['accuracy'])","cfa78fa5":"def generator_builder(z_dim=100,depth=64,p=0.4):\n    \n    inputs = Input((z_dim,))\n    \n    dense1 = Dense(7*7*64)(inputs)\n    dense1 = BatchNormalization(momentum=0.9)(dense1) # default momentum for moving average is 0.99\n    dense1 = Activation(activation='relu')(dense1)\n    dense1 = Reshape((7,7,64))(dense1)\n    dense1 = Dropout(p)(dense1)\n    \n    conv1 = UpSampling2D()(dense1)\n    conv1 = Conv2DTranspose(int(depth\/2), kernel_size=5, padding='same', activation=None,)(conv1)\n    conv1 = BatchNormalization(momentum=0.9)(conv1)\n    conv1 = Activation(activation='relu')(conv1)\n    \n    conv2 = UpSampling2D()(conv1)\n    conv2 = Conv2DTranspose(int(depth\/4), kernel_size=5, padding='same', activation=None,)(conv2)\n    conv2 = BatchNormalization(momentum=0.9)(conv2)\n    conv2 = Activation(activation='relu')(conv2)\n    \n    conv3 = Conv2DTranspose(int(depth\/8), kernel_size=5, padding='same', activation=None,)(conv2)\n    conv3 = BatchNormalization(momentum=0.9)(conv3)\n    conv3 = Activation(activation='relu')(conv3)\n\n    output = Conv2D(1, kernel_size=5, padding='same', activation='sigmoid')(conv3)\n  \n    model = Model(inputs=inputs, outputs=output)\n    model.summary()\n    \n    return model","00f9102c":"generator = generator_builder()","b5cd426c":"def adversarial_builder(z_dim=100):\n    model = Sequential()\n    model.add(generator)\n    model.add(discriminator)\n    model.compile(loss='binary_crossentropy', \n                  optimizer=RMSprop(lr=0.0004, decay=3e-8, clipvalue=1.0), \n                  metrics=['accuracy'])\n    model.summary()\n    return model","4e577b8b":"adversarial_model = adversarial_builder()","dfc6f106":"def make_trainable(net, val):\n    net.trainable = val\n    for l in net.layers:\n        l.trainable = val","a71c5b62":"def train(epochs=1000,batch=128):\n    \n    d_metrics = []\n    a_metrics = []\n    \n    running_d_loss = 0\n    running_d_acc = 0\n    running_a_loss = 0\n    running_a_acc = 0\n    \n    for i in range(epochs):\n        \n        if i%100 == 0:\n            print(i)\n        \n        real_imgs = np.reshape(data[np.random.choice(data.shape[0],batch,replace=False)],(batch,28,28,1))\n        fake_imgs = generator.predict(np.random.uniform(-1.0, 1.0, size=[batch, 100]))\n\n        x = np.concatenate((real_imgs,fake_imgs))\n        y = np.ones([2*batch,1])\n        y[batch:,:] = 0\n        \n        make_trainable(discriminator, True)\n        \n        d_metrics.append(discriminator.train_on_batch(x,y))\n        running_d_loss += d_metrics[-1][0]\n        running_d_acc += d_metrics[-1][1]\n        \n        make_trainable(discriminator, False)\n        \n        noise = np.random.uniform(-1.0, 1.0, size=[batch, 100])\n        y = np.ones([batch,1])\n\n        a_metrics.append(adversarial_model.train_on_batch(noise,y)) \n        running_a_loss += a_metrics[-1][0]\n        running_a_acc += a_metrics[-1][1]\n        \n        if (i+1)%100 == 0:\n\n            print('Epoch #{}'.format(i+1))\n            log_mesg = \"%d: [D loss: %f, acc: %f]\" % (i, running_d_loss\/i, running_d_acc\/i)\n            log_mesg = \"%s  [A loss: %f, acc: %f]\" % (log_mesg, running_a_loss\/i, running_a_acc\/i)\n            print(log_mesg)\n\n            noise = np.random.uniform(-1.0, 1.0, size=[16, 100])\n            gen_imgs = generator.predict(noise)\n\n            plt.figure(figsize=(5,5))\n\n            for k in range(gen_imgs.shape[0]):\n                plt.subplot(4, 4, k+1)\n                plt.imshow(gen_imgs[k, :, :, 0], cmap='gray')\n                plt.axis('off')\n                \n            plt.tight_layout()\n            plt.show()\n    \n    return a_metrics, d_metrics","0a0c30b9":"a_metrics_complete, d_metrics_complete = train(epochs=10000)","4bb31096":"# **Basic GAN Project**\n\nGenerative Adversarial Networks, or GANs for short, are an approach to generative modeling using deep learning methods, such as convolutional neural networks.\n\nGANs are a clever way of training a generative model by framing the problem as a supervised learning problem with two sub-models: the generator model that we train to generate new examples, and the discriminator model that tries to classify examples as either real (from the domain) or fake (generated). The two models are trained together in a zero-sum game, adversarial, until the discriminator model is fooled about half the time, meaning the generator model is generating plausible examples.\n\n<img src=\"https:\/\/www.google.com\/url?sa=i&url=https%3A%2F%2Ffinanceandriskblog.accenture.com%2Fanalytics%2Fhow-generative-adversarial-networks-can-impact-banking%3Fsyndicated_origin%3DBanking%2BBlog&psig=AOvVaw1vAZNGl0dI-VbTxEOM-JR_&ust=1597671107848000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCJj-6-vqn-sCFQAAAAAdAAAAABAJ\" width=\"100px\">\n\n","3db1ea9b":"# Lets Start with the Code"}}