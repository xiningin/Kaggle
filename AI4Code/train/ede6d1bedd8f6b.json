{"cell_type":{"47cd9665":"code","3b791d27":"code","fd974210":"code","ef1b5b31":"code","00aa5101":"code","62b36e70":"code","a798de98":"code","ce574b60":"code","2299aa1f":"code","f5e7280e":"code","d75f1112":"code","2c95374a":"code","10e22ebe":"code","93fd0fc1":"code","e6a1f403":"code","ec48f9ff":"code","e18d6295":"code","ed82191a":"code","656891ee":"code","f53a3fdc":"code","9a2da323":"code","b7bd0096":"code","5d02fff9":"code","8472def9":"code","134113e0":"code","9ea64bc0":"code","0a5b23a3":"code","5970ffc8":"markdown","1c0f91f3":"markdown","595687f7":"markdown","6d02dbcf":"markdown","c8ade2d5":"markdown","5d973021":"markdown","151b5b4a":"markdown"},"source":{"47cd9665":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-darkgrid')","3b791d27":"# btc = pd.read_csv('\/kaggle\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-09-14.csv')\n\nbtc = pd.read_csv('..\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-12-31.csv')\n# Converting the Timestamp column from string to datetime\nbtc['Timestamp'] = [datetime.fromtimestamp(x) for x in btc['Timestamp']]\nbtc = btc.set_index('Timestamp')","fd974210":"btc_daily = btc.resample(\"24H\").mean() #daily resampling","ef1b5b31":"from statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import kpss\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf","00aa5101":"def fill_missing(df):\n    ### function to impute missing values using interpolation ###\n    df['Open'] = df['Open'].interpolate()\n    df['Close'] = df['Close'].interpolate()\n    df['Weighted_Price'] = df['Weighted_Price'].interpolate()\n    df['Volume_(BTC)'] = df['Volume_(BTC)'].interpolate()\n    df['Volume_(Currency)'] = df['Volume_(Currency)'].interpolate()\n    df['High'] = df['High'].interpolate()\n    df['Low'] = df['Low'].interpolate()\n    print(df.head())\n    print(df.isnull().sum())\n    \nfill_missing(btc_daily)","62b36e70":"\nplt.figure(figsize=(15,12))\nseries = btc_daily.Weighted_Price\nresult = seasonal_decompose(series, model='additive',period=1)\nresult.plot()","a798de98":"# Renaming the column names accroding to Prophet's requirements\n\ndaily_data_fb = btc_daily.reset_index()[['Timestamp','Weighted_Price']].rename({'Timestamp':'ds','Weighted_Price':'y'}, axis=1)\ndaily_data_fb.head()","ce574b60":"test_length = 365\nsplit_date = \"2020-01-01\"\ntrain_filt = daily_data_fb['ds'] <= split_date\ntest_filt = daily_data_fb['ds'] > split_date\n\ntrain_fb = daily_data_fb[train_filt]\ntest_fb = daily_data_fb[test_filt]\n\nprint(\"train data shape :\", train_fb.shape[0] \/ daily_data_fb.shape[0] * 100)\nprint(\"test data shape :\", test_fb.shape[0] \/ daily_data_fb.shape[0] * 100)","2299aa1f":"!pip install auto-ts\n# !pip install auto_ts --ignore-installed --no-cache-dir ","f5e7280e":"!pip install tscv","d75f1112":"\nfrom auto_ts import auto_timeseries as ATS\n","2c95374a":"train_fb = train_fb.reset_index()\ntrain_fb.head()","10e22ebe":"test_fb = test_fb.reset_index()\ntest_fb.head()","93fd0fc1":"\nautoml_model = ATS(score_type='rmse',\n                time_interval='D', forecast_period=30,\n                non_seasonal_pdq=None, seasonality=False, seasonal_period=12,\n                model_type=['best'],\n                verbose=2)","e6a1f403":"ts_column = 'ds'\ntarget = 'y'\nsep = ','","ec48f9ff":"automl_model.fit(\n    traindata=train_fb,\n    ts_column=ts_column,\n    target=target,\n    cv=5,\n    sep=',')","e18d6295":"automl_model.get_leaderboard()","ed82191a":"\nautoml_model.plot_cv_scores()","656891ee":"# There is a Bug with Prophet folds: https:\/\/github.com\/AutoViML\/Auto_TS\/issues\/25\nautoml_model.get_cv_scores()","f53a3fdc":"results_dict = automl_model.get_ml_dict()\nresults_dict['Prophet']['forecast'][:5]","9a2da323":"# results_dict['auto_SARIMAX']['forecast'][:5]","b7bd0096":"# Using Best Model\nfuture_predictions = automl_model.predict(\n    testdata=test_fb\n)  \nfuture_predictions","5d02fff9":"# Using specific model\nfuture_predictions = automl_model.predict(\n    testdata=test_fb,\n    model='auto_SARIMAX'\n)\nfuture_predictions","8472def9":"# Using specific model\nfuture_predictions = automl_model.predict(\n    testdata=test_fb,\n    model='Prophet',\n    simple=False\n\n)\nfuture_predictions","134113e0":"test_fb.head()\n","9ea64bc0":"import copy\nsubm = test_fb[[target]]\nprint(subm.shape)\nsubm.head()","0a5b23a3":"subm['predictions'] = future_predictions['yhat'].values\nsubm[[target,'predictions']].plot(figsize=(15,8))","5970ffc8":"#### Time Series Decomposition & Statistical Tests","1c0f91f3":"#### Forecast Results","595687f7":"![](https:\/\/github.com\/AutoViML\/Auto_TS\/raw\/master\/logo.png)\n\n[Auto_TS: Auto_TimeSeries](https:\/\/github.com\/AutoViML\/Auto_TS)","6d02dbcf":"## Glipse Data","c8ade2d5":"#### Time resampling","5d973021":"### Evaluate Results","151b5b4a":"Read data"}}