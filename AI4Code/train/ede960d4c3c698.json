{"cell_type":{"67066cab":"code","0c0c3d63":"code","bf309704":"code","7a7683e3":"code","0d87b786":"code","7c603b95":"code","ed648298":"code","23c52b68":"code","d3098f64":"code","cfcd160c":"code","410ee5b8":"code","1226d59b":"code","a1fd8213":"code","a272aa23":"code","8b6d3bd0":"code","ef7d028b":"code","221de07d":"code","89ab1248":"code","d466cae0":"code","81722fcf":"code","a390f366":"code","51d81de1":"code","8e40a087":"code","cb40d96d":"code","4193c79e":"code","420ad844":"code","640751c1":"code","05f17b71":"code","2c9f15e9":"code","575c0c11":"code","26e98a8b":"code","d362f2e2":"code","72de1b41":"code","a34c9f75":"code","ae9903fc":"code","a8d00fa9":"code","d622cbd9":"code","1711fd9e":"code","1d35db8d":"code","0f86c453":"code","fa7b3303":"code","0b57c64d":"code","896c54ff":"code","0aee0849":"code","ed32fb3c":"code","1a66159e":"code","0c69ed18":"code","a569261e":"code","fdab01fb":"code","6a972ce5":"code","85957a1f":"code","605adc18":"code","31cbb794":"code","5e4441ed":"code","1c64f9ca":"code","6bb64105":"code","708a7f05":"code","fcd38956":"code","c835af27":"code","8f1a6649":"code","adf84471":"code","0d1d1af4":"code","dbb1dbbc":"code","c07fa79c":"code","4df02be1":"code","9aa4e50b":"code","c5939f94":"code","8f54df99":"code","705c88f2":"code","7a494753":"code","bed97002":"code","621dd642":"code","280e9ce1":"code","b976bbfd":"code","1af86b9c":"code","db3fbe13":"code","7fca6fef":"code","96541cd5":"code","c923f884":"markdown","c06d062c":"markdown","2bc1e049":"markdown","f4451660":"markdown","3b4c8f3a":"markdown","ee16400b":"markdown","1cbad9a4":"markdown","29e3f61e":"markdown","1e26e477":"markdown","52d4b8da":"markdown","bbc795a5":"markdown","5735242f":"markdown","62fa066c":"markdown","999475f8":"markdown","5a523954":"markdown","a1a77df9":"markdown","179a76e3":"markdown","663ec5a9":"markdown","5bebb697":"markdown","b865470a":"markdown","1cdab303":"markdown","94fb1dff":"markdown"},"source":{"67066cab":"import sys\nprint(sys.executable)","0c0c3d63":"## Basics\nimport numpy as np\nimport pandas as pd\nimport re\nimport datetime as dt\nimport pickle\nimport warnings\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n## Regression using scikit-learn\nfrom sklearn.linear_model import Ridge, Lasso\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.preprocessing import LabelEncoder, scale, OneHotEncoder\nfrom sklearn.ensemble import GradientBoostingRegressor\n\n## Setup\nwarnings.filterwarnings('ignore') \nplt.style.use(['seaborn-pastel'])\n%matplotlib inline\n%autosave 10","bf309704":"beijing = pd.read_csv(\"..\/input\/lianjia\/new.csv\", parse_dates=[\"tradeTime\"], encoding='gb2312')\nprint(beijing.columns.values)\nbeijing.head()","7a7683e3":"beijing.describe()","0d87b786":"beijing.drop(\"Cid\", axis = 1, inplace=True)\nbeijing.drop(\"id\", axis = 1, inplace=True)\nbeijing.drop(\"url\", axis = 1, inplace=True)\nbeijing.drop(\"price\", axis = 1, inplace=True)","7c603b95":"beijing.info()","ed648298":"for row in range(beijing.shape[1]):\n    if(beijing.iloc[:,row].dtype==\"O\"):\n        print(\"{}: {}\\n\".format(beijing.columns[row],beijing.iloc[:,row].unique()))","23c52b68":"beijing.iloc[:,11] = np.array(beijing.iloc[:,11].str.extract(\"([0-9]+)\")).reshape(-1,1)","d3098f64":"sel = [7,8,10,11,13]\nfor s in sel:\n    beijing.iloc[:,s] = pd.to_numeric(beijing.iloc[:,s], errors='coerce')","cfcd160c":"beijing.isna().mean()*100","410ee5b8":"plt.clf()\nsns.boxplot(y = beijing[\"DOM\"])\nplt.xlabel(\"DOM\")\nplt.ylabel(\"distribution\")\nplt.show()","1226d59b":"plt.clf()\nsns.kdeplot(data = beijing.loc[:,\"DOM\"])\nplt.show()","a1fd8213":"beijing[\"DOM\"].quantile([0.25,0.5,0.75,1])","a272aa23":"beijing[\"DOM\"] = beijing[\"DOM\"].fillna(beijing[\"DOM\"].median())","8b6d3bd0":"beijing.dropna(axis = 0, how = \"any\", inplace = True)","ef7d028b":"beijing = beijing.astype({\"DOM\":\"int64\",\"livingRoom\":\"int64\",\"drawingRoom\":\"int64\",\"bathRoom\":\"int64\",\"floor\":\"int64\",\n                          \"buildingType\":\"O\",\"constructionTime\":\"int64\",\"renovationCondition\":\"O\",\"buildingStructure\":\"O\",\n                          \"elevator\":\"O\", \"fiveYearsProperty\":\"O\",\"subway\":\"O\",\"district\":\"O\"}, errors = 'ignore')","221de07d":"beijing.info()","89ab1248":"feature_df = beijing.drop(\"totalPrice\", axis = 1)\nresponse_df = beijing[\"totalPrice\"]\nbeijing = feature_df.merge(response_df, left_index = True, right_index = True)\nbeijing.head()","d466cae0":"beijing.info()","81722fcf":"print(\"Shape of dataframe:    {}\".format(beijing.shape))\nprint(beijing.apply(lambda x: x.unique()))","a390f366":"beijing = beijing.apply(lambda x: x.astype(\"int64\") if(x.dtype ==\"O\") else x)","51d81de1":"buildingType = {\n    1:\"Tower\",\n    2:\"Bunglow\",\n    3:\"Plate\/Tower\",\n    4:\"Plate\"\n}\nrenovationCondition = {\n    1:\"Other\",\n    2:\"Rough\",\n    3:\"Simplicity\",\n    4:\"Hardcover\"\n}\nbuildingStructure = {\n    1:\"Unavailable\",\n    2:\"Mixed\",\n    3:\"Brick\/Wood\",\n    4:\"Brick\/Concrete\",\n    5:\"Steel\",\n    6:\"Steel\/Concrete\"\n}\nelevator = {\n    1:\"Present\",\n    0:\"Absent\"\n}\nsubway = {\n    1:\"Nearby\",\n    0:\"Far\"\n}\nfiveYearProperty = {\n    1:\"Ownership<5y\",\n    0:\"Ownership>5y\"\n}\ndistrict = {\n    1 : \"DongCheng\",\n    2 : \"FengTai\",\n    3 : \"DaXing\",\n    4 : \"FaXing\",\n    5 : \"FangShang\",\n    6 : \"ChangPing\",\n    7 : \"ChaoYang\",\n    8 : \"HaiDian\",\n    9 : \"ShiJingShan\",\n    10 : \"XiCheng\",\n    11 : \"TongZhou\",\n    12 : \"ShunYi\",\n    13 : \"MenTouGou\"\n}\ncorrect_label = {\n    11:buildingType,\n    13:renovationCondition,\n    14:buildingStructure,\n    16:elevator,\n    17:fiveYearProperty,\n    18:subway,\n    19:district\n}","8e40a087":"for key,val in correct_label.items():\n    print(key,val)","cb40d96d":"for key,val in correct_label.items():\n    beijing.iloc[:,key] = beijing.iloc[:,key].replace(val)","4193c79e":"print(beijing.shape)\nprint(beijing.apply(lambda x: x.unique()))","420ad844":"beijing = beijing.astype({\"livingRoom\":\"O\",\"drawingRoom\":\"O\",\"bathRoom\":\"O\",\"kitchen\":\"O\"}, errors = 'ignore')","640751c1":"beijing.reset_index(inplace=True, drop = True)","05f17b71":"names = beijing.columns\ncat_idx = []\nnum_idx = []\nfor i in range(20):\n    column = beijing.iloc[:,i]\n    if(column.dtype==\"O\"):\n        cat_idx.append(i)\n        print(\"{}\\nUnique values:\\n{}\\n\".format(names[i],column.unique()))\n    elif(column.dtype!='<M8[ns]'):\n        num_idx.append(i)","2c9f15e9":"plt.clf()\nsns.pairplot(beijing.iloc[:,num_idx], corner=True)\nplt.show()","575c0c11":"beijing.iloc[:,num_idx[2:]].describe()","26e98a8b":"beijing.iloc[:,cat_idx].describe()","d362f2e2":"temp = beijing[\"totalPrice\"].groupby(beijing[\"district\"]).agg([np.mean,np.min,np.max,np.median])\ntemp","72de1b41":"beijing.drop(\"Lat\", axis = 1, inplace=True)\nbeijing.drop(\"Lng\", axis = 1, inplace=True)","a34c9f75":"beijing.info()","ae9903fc":"dataClasses = beijing.dtypes.to_dict()","a8d00fa9":"beijing.to_csv('cleaned_beijing.csv', encoding='utf-8')","d622cbd9":"beijing = pd.read_csv(\".\/cleaned_beijing.csv\", parse_dates=[\"tradeTime\"], index_col = 0, encoding='utf-8')\nbeijing.head()","1711fd9e":"beijing = beijing.astype(dataClasses, errors = 'ignore')","1d35db8d":"cat_mask = beijing.dtypes == object\ncat_cols = beijing.columns[cat_mask].tolist()\nl_enc = OneHotEncoder(handle_unknown='ignore', sparse = False)\nl_enc.fit(beijing[cat_cols])\ndef encode_df(df, enc, cat_cols):\n    encoded_array = enc.transform(df[cat_cols])\n    encoded_df = pd.DataFrame(encoded_array, columns = enc.get_feature_names(input_features = cat_cols))\n    feature_df = df.drop(\"totalPrice\", axis = 1)\n    response_df = df[\"totalPrice\"]\n    feature_df = feature_df.merge(encoded_df, left_index = True, right_index = True).drop(columns = cat_cols, axis=1)\n    df = feature_df.merge(response_df, left_index = True, right_index = True)\n    df['tradeTime'] = df['tradeTime'].astype('datetime64[ns]')\n    df['tradeTime'] = df['tradeTime'].map(dt.datetime.toordinal)\n    return(df)","0f86c453":"l_beijing = encode_df(beijing, l_enc, cat_cols)","fa7b3303":"l_beijing.shape","0b57c64d":"def split_df(df):\n    X = df.drop(\"totalPrice\", axis = 1).values\n    y = df[\"totalPrice\"].values.reshape(-1,1)\n    return(X,y)","896c54ff":"X,y = split_df(l_beijing)\nprint(X.shape,y.shape)","0aee0849":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=193)","ed32fb3c":"lasso = Lasso(alpha = 0.005, normalize = True)","1a66159e":"lasso.fit(X_train, y_train)","0c69ed18":"lasso_pred = lasso.predict(X_test)","a569261e":"lasso.score(X_test, y_test)","fdab01fb":"lasso_coef = lasso.fit(X, y).coef_","6a972ce5":"names_coef = [x for x in l_beijing.columns[0:68]]\nplt.clf()\nplt.figure(figsize=(20,10))\nplt.plot(range(len(names_coef)), lasso_coef)\nplt.xticks(range(len(names_coef)), names_coef, rotation = 90)\nfor i in range(0,68):\n    plt.axvline(x = i, color = \"gray\", linestyle='--', alpha = 0.4)\nplt.axhline(y = 0, color = \"skyblue\")\nplt.ylabel(\"Coefficients\")\nplt.show()","85957a1f":"s_vars = np.where(abs(lasso_coef)>0)[0].tolist() # significant variables","605adc18":"for i in s_vars:\n    print(\"{} \".format(names_coef[i],lasso_coef[i]))","31cbb794":"s_var_names = ['tradeTime', 'square','communityAverage', 'livingRoom', 'drawingRoom',\n               'kitchen','bathRoom', 'buildingType', 'renovationCondition', 'buildingStructure', \n               'elevator','fiveYearsProperty', 'subway','district']\nlen(s_var_names)","5e4441ed":"beijing_subset = beijing.loc[:,s_var_names+['totalPrice']]\nprint(beijing_subset.shape)","1c64f9ca":"cat_mask = beijing_subset.dtypes == object\ncat_cols = beijing_subset.columns[cat_mask].tolist()\nr_enc = OneHotEncoder(handle_unknown='ignore', sparse = False)\nr_enc.fit(beijing_subset[cat_cols])\nr_beijing = encode_df(beijing_subset, r_enc, cat_cols)\nprint(\"Encoded data:\")\nprint(r_beijing.shape)","6bb64105":"X, y = split_df(r_beijing)\nprint(X.shape,y.shape)","708a7f05":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=193)","fcd38956":"def display_plot(cv_scores, cv_scores_std):\n    fig = plt.figure()\n    ax = fig.add_subplot(1,1,1)\n    ax.plot(alpha_space, cv_scores)\n\n    std_error = cv_scores_std \/ np.sqrt(10)\n\n    ax.fill_between(alpha_space, cv_scores + std_error, cv_scores - std_error, alpha=0.2)\n    ax.set_ylabel('CV Score +\/- Std Error')\n    ax.set_xlabel('Alpha')\n    ax.axhline(np.max(cv_scores), linestyle='--', color='.5')\n    ax.set_xlim([alpha_space[0], alpha_space[-1]])\n    ax.set_xscale('log')\n    plt.show()","c835af27":"ridge = Ridge(alpha = 0.1, normalize = True)","8f1a6649":"ridge.fit(X_train, y_train)","adf84471":"ridge_pred = ridge.predict(X_test)","0d1d1af4":"ridge.score(X_test, y_test)","dbb1dbbc":"alpha_space = np.logspace(-4, 1, 50)\nridge_scores = []\nridge_scores_std = []\nfor alpha in alpha_space:\n    ridge.alpha = alpha\n    ridge_cv_scores = cross_val_score(ridge, X, y, cv = 5)\n    ridge_scores.append(np.mean(ridge_cv_scores))\n    ridge_scores_std.append(np.std(ridge_cv_scores))","c07fa79c":"display_plot(ridge_scores, ridge_scores_std)","4df02be1":"print(\"Suggested alpha: {}\".format(float(alpha_space[np.where(max(ridge_cv_scores)==ridge_cv_scores)[0]])))","9aa4e50b":"ridge.alpha =  float(alpha_space[np.where(max(ridge_cv_scores)==ridge_cv_scores)[0]])","c5939f94":"ridge.fit(X_train, y_train)","8f54df99":"ridge_pred = ridge.predict(X_test)","705c88f2":"ridge.score(X_test, y_test)","7a494753":"model_parameters = {\n    'n_estimators': 500,\n    'max_depth': 6,\n    'min_samples_split': 5,\n    'learning_rate': 0.01,\n    'loss': 'ls'\n}\ngbReg = GradientBoostingRegressor(**model_parameters)","bed97002":"gbReg.fit(X_train, y_train)","621dd642":"gbReg.score(X_test, y_test)","280e9ce1":"filename = 'sklearn_model.sav'\nencoder_name = 'one_hot_encoder.sav'\npickle.dump(gbReg, open(filename, 'wb'))\npickle.dump(r_enc, open(encoder_name, 'wb'))","b976bbfd":"mdl = pickle.load(open(filename, 'rb'))\nenc = pickle.load(open(encoder_name, 'rb'))\nmdl.score(X_test, y_test)","1af86b9c":"beijing.loc[1,s_var_names+['totalPrice']]","db3fbe13":"df_dict = {\n    'tradeTime':'2016-07-28',\n    'square':132.38,\n    'communityAverage':71539,\n    'livingRoom':'2',\n    'drawingRoom':'2',\n    'kitchen':'1',\n    'bathRoom':'2',\n    'buildingType':'Tower',\n    'renovationCondition':'Hardcover',\n    'buildingStructure':'Steel\/Concrete',\n    'elevator': 'Present',\n    'fiveYearsProperty':'Ownership<5y',\n    'subway': 'Far',\n    'district':'ChaoYang',\n    'totalPrice': 530\n}    \ndf = pd.DataFrame(df_dict, index = [0])\ndf_enc = encode_df(df, enc, cat_cols)\nX, y = split_df(df_enc)\nprint(X.shape,y.shape)\nprint(\"Predicted value : {}\\nActual value    : {}\".format(mdl.predict(X)[0], y[0][0]))","7fca6fef":"df = beijing.loc[:,s_var_names+['totalPrice']]","96541cd5":"print(np.quantile(df[\"totalPrice\"], [0.25,0.5,0.75]))","c923f884":"## Modelling","c06d062c":"Removing the other records from the dataset having missing values","2bc1e049":"Majority of the data sits outside the upper whiskers, we impute the missing values using the median","f4451660":"Important numerical features","3b4c8f3a":"## EDA \n### for application UX implementation","ee16400b":"Plot to identify best alpha","1cbad9a4":"Understanding distribution of DOM column","29e3f61e":"#### Correcting factor labels","1e26e477":"#### Removing missing values","52d4b8da":"## Saving the model","bbc795a5":"### Using regularized ridge regression to fit the model","5735242f":"## Preprocessing","62fa066c":"## Understanding the data","999475f8":"### Using Ensemble method - GradientBoostingRegressor","5a523954":"## Saving the cleaned dataset","a1a77df9":"## Data cleaning","179a76e3":"Moving response feature to the right end of the dataframe","663ec5a9":"#### Cleaning factor variables","5bebb697":"Simulating data","b865470a":"elevator, subway don't seem like a significant features driving the price of houses","1cdab303":"### Feature selection using lasso ","94fb1dff":"### Loading the model \nCreating a pipeline for price prediction app deployed on Heroku: [house-price-ar32-app](https:\/\/house-price-ar32.herokuapp.com\/)"}}