{"cell_type":{"b5a7cb87":"code","a9dea065":"code","60c7eabc":"code","b3f8da11":"code","2d0fac5d":"code","be345214":"code","1f5f7c84":"code","a0ce26e4":"code","fdc2bfdf":"code","58e0451c":"code","3b4e9065":"code","b72ddb61":"code","ba815493":"code","8c19e196":"code","b65708c7":"code","f95aac9b":"code","fac6a400":"code","6ba8e8d5":"code","eb4ac815":"code","688542b8":"code","0f6ed5a7":"code","12d99406":"code","f7484ff2":"code","234b1d43":"code","7ad1f69e":"code","746ebcf2":"code","bdeb2bbd":"code","0a306ca8":"code","cb40d44d":"code","4f9a6cb2":"code","fa33b96b":"markdown"},"source":{"b5a7cb87":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a9dea065":"df_train = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv')\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/test.csv')","60c7eabc":"df_train.head()","b3f8da11":"df_test.head()","2d0fac5d":"from sklearn.preprocessing import LabelEncoder","be345214":"df_train.columns","1f5f7c84":"df_train_enc = df_train[['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7',\n       'cat8', 'cat9', 'cat10', 'cat11', 'cat12', 'cat13', 'cat14', 'cat15',\n       'cat16', 'cat17', 'cat18']]","a0ce26e4":"df_train_cont = df_train[['cont0', 'cont1', 'cont2', 'cont3', 'cont4',\n       'cont5', 'cont6', 'cont7', 'cont8', 'cont9', 'cont10', 'target']]","fdc2bfdf":"df_train_encoded = df_train_enc.apply(LabelEncoder().fit_transform)","58e0451c":"df_train_encoded.head()","3b4e9065":"df_train = pd.concat([df_train_encoded,df_train_cont],axis=1)","b72ddb61":"df_train.head()","ba815493":"df_test.head()","8c19e196":"df_test.columns","b65708c7":"df_test_cat = df_test[['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7','cat8', 'cat9', 'cat10', 'cat11', 'cat12', 'cat13', 'cat14', 'cat15','cat16', 'cat17', 'cat18']]","f95aac9b":"df_test_cont = df_test[[ 'cont0', 'cont1', 'cont2', 'cont3', 'cont4',\n       'cont5', 'cont6', 'cont7', 'cont8', 'cont9', 'cont10']]","fac6a400":"df_test_enc = df_test_cat.apply(LabelEncoder().fit_transform)","6ba8e8d5":"df_test = pd.concat([df_test_enc,df_test_cont],axis=1)","eb4ac815":"df_test.head()","688542b8":"df_train.info()","0f6ed5a7":"df_train.shape","12d99406":"df_test.shape","f7484ff2":"df_train.describe().T","234b1d43":"df_test.describe().T","7ad1f69e":"df_train.isna().apply(pd.value_counts).T","746ebcf2":"df_test.isna().apply(pd.value_counts).T","bdeb2bbd":"import matplotlib.pyplot as plt\nimport seaborn as sns","0a306ca8":"import warnings\nwarnings.filterwarnings('ignore')","cb40d44d":"position=1\nplt.figure(figsize=(15,45))\nfor column in ['cont0', 'cont1', 'cont2', 'cont3', 'cont4',\n       'cont5', 'cont6', 'cont7', 'cont8', 'cont9', 'cont10','target']:\n    plt.subplot(9,2,position)\n    if column in ['target']:\n        sns.countplot(df_train[column])\n    else:\n        sns.distplot(df_train[column])\n    plt.title(column, fontsize=20)\n    position+=1\nplt.show()","4f9a6cb2":"position=1\nplt.figure(figsize=(15,50))\nfor column in ['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7','cat8', 'cat9', 'cat10', 'cat11','target']:\n    plt.subplot(9,2,position)\n    if column in ['target']:\n        sns.countplot(df_train[column])\n    else:\n        sns.distplot(df_train[column])\n    plt.title(column, fontsize=20)\n    position+=1\nplt.show()","fa33b96b":"* There are no missing values in both test and train datasets as can be seen from the .info() and isna().apply() functions."}}