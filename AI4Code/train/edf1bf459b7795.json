{"cell_type":{"65b1e675":"code","eda4edd5":"code","e3fc5ee2":"code","f08893c9":"code","09892bbe":"code","8c0f90ed":"code","07f1c1c9":"markdown","fd240096":"markdown","4e3f7411":"markdown","b2d899fe":"markdown","76dcfc23":"markdown","3c5a8241":"markdown"},"source":{"65b1e675":"import numpy as np\nimport pandas as pd\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nimport time\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","eda4edd5":"answers_data = pd.read_csv('\/kaggle\/input\/tp2stackoverflow\/answers.csv', encoding = \"ISO-8859-1\")\nquestions_data = pd.read_csv('\/kaggle\/input\/tp2stackoverflow\/questions.csv', encoding = \"ISO-8859-1\")\n\n# Don't know why the data has these values. Double check later\nanswers_data.pop('Unnamed: 0')\nquestions_data.pop('Unnamed: 0')\n\ndisplay(answers_data.info())\ndisplay(answers_data.head())\n\ndisplay(questions_data.info())\ndisplay(questions_data.head())","e3fc5ee2":"sentiment_analyzer = SentimentIntensityAnalyzer()\nstart = time.time()\npositive_answers = answers_data[answers_data['Score'] > 10]\npositive_answers['sentiment_analysis'] = positive_answers.Body.apply(lambda x: sentiment_analyzer.polarity_scores(x)['compound'])\nend = time.time()\nprint(\"Time elapsed in sentiment analysis: {}\".format(end - start))\n\nquestion_results = positive_answers[positive_answers['sentiment_analysis'] < 0]\nprint(\"Cantidad de respuestas positivas: {}\".format(len(positive_answers)))\nprint(\"Cantidad de respuestas positivas con sentiment analysis negativo: {}\".format(len(question_results)))\nprint(\"Porcentaje con score positivo (>10) y Sentiment Analysis negativo: {:.2f}\".format(len(question_results) \/ len(positive_answers) * 100))","f08893c9":"mean_global_answers = answers_data[\"Score\"].mean()\nmean_score_answers = answers_data.groupby(\"OwnerUserId\").agg({\"Score\":[\"mean\",\"sum\"]})\nmean_score_answers = mean_score_answers[mean_score_answers[\"Score\"][\"mean\"] > mean_global_answers]\n\nmean_global_questions = questions_data[\"Score\"].mean()\nmean_score_questions = questions_data.groupby(\"OwnerUserId\").agg({\"Score\":[\"mean\",\"sum\"]})\nmean_score_questions = mean_score_questions[mean_score_questions[\"Score\"][\"mean\"] > mean_global_questions]\n\nmerge_join_data = pd.merge(mean_score_answers, mean_score_questions, left_on=\"OwnerUserId\", right_on=\"OwnerUserId\")\nmerge_join_data[\"Sum\"] = merge_join_data[\"Score_x\"][\"sum\"] + merge_join_data[\"Score_y\"][\"sum\"]\ndisplay(merge_join_data.sort_values(\"Sum\", ascending=False)[[\"OwnerUserId\",\"Sum\"]])","09892bbe":"questions_data.pop('OwnerUserId')\nquestions_data.pop('ClosedDate')\nquestions_data.pop('Body')\nquestions_data.pop('Title')\nanswers_data.pop('Id')\nanswers_data.pop('OwnerUserId')\nanswers_data.pop('Body')\n\ndisplay(questions_data.head())\ndisplay(answers_data.head())","8c0f90ed":"renamed_questions_data = questions_data.rename(columns={'Score': 'QuestionScore'})\nrenamed_answers_data = answers_data.rename(columns={'ParentId': 'Id'})\nrenamed_questions_data[\"QuestionYear\"] = pd.to_datetime(renamed_questions_data[\"CreationDate\"]).dt.year\nrenamed_answers_data[\"AnswerYear\"] = pd.to_datetime(renamed_answers_data[\"CreationDate\"]).dt.year\njoined_data = pd.merge(renamed_questions_data, renamed_answers_data, left_on=\"Id\", right_on=\"Id\")\ndisplay(joined_data.head())\n\n# Sanity check\ndisplay(joined_data[(joined_data[\"AnswerYear\"] != joined_data[\"QuestionYear\"])].head())\n\n# Corramos c\u00f3digo solo para preguntas\/respuestas que poseen el tag golang y el tag python\npython_joined_data = joined_data[joined_data[\"Tags\"].str.contains(\"python\", na=True)]\ndisplay(python_joined_data.groupby(\"AnswerYear\").agg({'AnswerYear': 'count'}))\n\n# Corramos c\u00f3digo solo para preguntas\/respuestas que poseen el tag golang y el tag perl\nperl_joined_data = joined_data[joined_data[\"Tags\"].str.contains(\"perl\", na=True)]\ndisplay(perl_joined_data.groupby(\"AnswerYear\").agg({'AnswerYear': 'count'}))\n\n","07f1c1c9":"En el runbook no estamos calculando el top10, s\u00f3lo la suma de votos de todos las preguntas Y respuestas de dos tags cualquiera (en este caso, golang y perl)","fd240096":"Antes de seguir, removemos columnas que sabemos que no vamos a utilizar a partir de ahora","4e3f7411":"**Punto 2: Top 10 de usuarios con score promedio de preguntas mayor a X y score promedio de respuestas mayor a Y seg\u00fan el score total**","b2d899fe":"**Punto 3: Obtener los tags (top 10) que poseen mayor cantidad de score (incluye preguntas Y respuestas) por a\u00f1o**","76dcfc23":"Leemos la data","3c5a8241":"**Punto 1: Obtener porcentaje de respuestas con score positivo que posean un sentiment analysis negativo**"}}