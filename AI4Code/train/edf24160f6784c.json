{"cell_type":{"83f8a049":"code","b9057461":"code","96d212b0":"code","9261d810":"code","83432f74":"code","69313450":"code","b83cc65c":"code","75961cb5":"code","415062d8":"code","267aeae4":"code","cfd7b6d7":"markdown","44df5606":"markdown","54dfc81c":"markdown","961575ab":"markdown","29dbc269":"markdown","7d8193fe":"markdown","e43a414a":"markdown","e3f6c1c1":"markdown"},"source":{"83f8a049":"import pandas as pd","b9057461":"data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")","96d212b0":"data.info()","9261d810":"# age, cabin and embarked aren't complete\nprint(len(data.Cabin.unique()))","83432f74":"# because there are so many different values, I shortened them to only the first letter of the cabin name\ndata[\"Cabin\"] = data[\"Cabin\"].apply(lambda x: str(x)[0])\ndata.Cabin.unique()","69313450":"data[\"Age\"] = data[\"Age\"].fillna(data[\"Age\"].mean())","b83cc65c":"data = data.dropna(subset=[\"Embarked\"])","75961cb5":"# ticket and names aren't that important\ndata = data.drop(columns=[\"Name\", \"Ticket\"])","415062d8":"data = pd.get_dummies(data, columns=[\"Sex\", \"Cabin\", \"Embarked\"])\n\n# the dataframe is now saved on a different file and is ready to be imported into Ryven.\n# the test.csv file has gone through an almost identical process","267aeae4":"submission = pd.read_csv(\"\/kaggle\/input\/submission\/submission.csv\")\nsubmission.to_csv(\"submission.csv\", index=False)","cfd7b6d7":"## GridSearchCV\n\nTo better find parameters, we can use GridSearchCV.\n\nBecause the SVC node isnt being passed any input data, it will output only an empty SVC() object. That is then plugged into the new GridSearchCV object created, alongside the new parameter grid. Once the object can now be passed in the fit function node which outputs a fitted object. Using the score function we can see the score has improved slightly.\n\n![](https:\/\/github.com\/frecklebars\/Ryven\/blob\/master\/resources\/pics\/titanic\/5-svc_gridsearch_param.png?raw=true)\n\nI'll also do the same thing for the Random Forest Classifier.\n\n![](https:\/\/github.com\/frecklebars\/Ryven\/blob\/master\/resources\/pics\/titanic\/6-rfc_gridsearch.png?raw=true)\n\nCurrent scores:\n```\nSVC: 0.7528\nRFC: 0.8202\n```","44df5606":"## Splitting into train and test sets\n\nUsing the train_test_split function node the input and target values are split.\n\n![](https:\/\/raw.githubusercontent.com\/frecklebars\/Ryven\/master\/resources\/pics\/titanic\/2-split.png)","54dfc81c":"## Predicting\n\nI'll now take the fitted RFC object since it has the best score and use it to predict. Using the X_test (the test dataframe) that we got earlier the values can be predicted and stored into a separate variable.\n\n![](https:\/\/github.com\/frecklebars\/Ryven\/blob\/master\/resources\/pics\/titanic\/7-rfc_predict.png?raw=true)\n![](https:\/\/github.com\/frecklebars\/Ryven\/blob\/master\/resources\/pics\/titanic\/8-predict_vals.png?raw=true)","961575ab":"## working in Ryven\n\nRyven works by importing different packages of nodes. The nodes have either execution ports (which defines the order of execution) or data ports (which send or recieve data). Execution ports are connected by straight lines whereas data ports are dotted lines. The implemented machine learning nodes are based on [Scikit-Learn](https:\/\/scikit-learn.org\/stable\/).\n\n## Importing the preprocessed csv files\n\nThrough 2 \"Read CSV\" nodes I'll import the preprocessed train and test csv files. The train dataframe is split into the input and target values, while the test dataframe is kept as is with the exception of the PassengerId column.\n \n![](https:\/\/raw.githubusercontent.com\/frecklebars\/Ryven\/master\/resources\/pics\/titanic\/1-pd_import.png)","29dbc269":"## Getting the submission\n\nI'll now return to the node where I imported the testing dataframe earlier and add a new column with the predicted results. From this I'll then keep just the PassengerId and Survived columns, and finally export the dataframe into a new csv file. \n\n![](https:\/\/github.com\/frecklebars\/Ryven\/blob\/master\/resources\/pics\/titanic\/9-get_submission.png)","7d8193fe":"## Basic usage\n\nNow we can simply just add the nodes for the prefered algorithms, plug in the training X and y values and we'll have a fitted model.\n\n![](https:\/\/github.com\/frecklebars\/Ryven\/blob\/master\/resources\/pics\/titanic\/3-noparam.png?raw=true)\n\nHowever, improvements can be made. For now I'll drop the Linear Regression node and focus on SVM and Random Forest Classifier\n\nCurrent scores:\n```\nSVC: 0.6629\nRFC: 0.8089\n```","e43a414a":"## Machine learning in a flow-based visual environment\n\n[Ryven](https:\/\/github.com\/leon-thomm\/Ryven) is a simple flow-based visual scripting runtime environment for Python. Using a [machine learning package I made for Ryven](https:\/\/github.com\/frecklebars\/Ryven) I have attempted the Titanic problem, showing that machine learning can work in a flow-based environment.\n\n### Data preprocessing\n\nThis was done externally in a notebook as nodes for Pandas haven't been implemented yet into Ryven.","e3f6c1c1":"## Parameters\n\nWe can make use of the empty parameter port. A set parameter node outputs a dictionary of the modified parameters. **Not all inputs need to be filled in.** In this case the output would be:\n\n```python\nparams = {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\n```\n\nThe SVC node first creates an empty SVC() object, then sets the parameters using the dictionary, then (if the X y values have been passed in) fits the object. Fitting however is optional as we'll see soon enough.\n\n![](https:\/\/github.com\/frecklebars\/Ryven\/blob\/master\/resources\/pics\/titanic\/4-svc_param.png?raw=true)\n\nCurrent scores:\n```\nSVC: 0.7359\nRFC: 0.8089\n```"}}