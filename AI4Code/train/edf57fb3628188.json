{"cell_type":{"f0b5c497":"code","79ed7992":"code","ddecbebb":"code","49878f66":"code","8a4f8257":"code","4eeb45dd":"code","1f9848b2":"code","297852f4":"code","5ff40a85":"code","39c57830":"code","055dbc84":"code","4aa96f63":"code","e1e6f25e":"code","fe2ef39d":"code","fd479cf0":"code","6279f72f":"markdown","bd754eaf":"markdown","19516d19":"markdown","d5a0f765":"markdown","dc9170e7":"markdown","383f4b7f":"markdown","9c539c69":"markdown","a1b79080":"markdown","d12cd8fd":"markdown","aba6b2b7":"markdown","b61bd55e":"markdown","64f0266d":"markdown","fc865cd7":"markdown","7c327832":"markdown","3fc2e17d":"markdown","8d94419f":"markdown","911ec326":"markdown","67f2b78f":"markdown","4ec04c0e":"markdown","068cd65d":"markdown"},"source":{"f0b5c497":"import os\n\nimport zipfile\n\n\"\"\"\nlocal_zip = '\/tmp\/horse-or-human.zip'\nzip_ref = zipfile.ZipFile(local_zip, 'r')\nzip_ref.extractall('\/tmp\/horse-or-human')\nlocal_zip = '\/tmp\/validation-horse-or-human.zip'\nzip_ref = zipfile.ZipFile(local_zip, 'r')\nzip_ref.extractall('\/tmp\/validation-horse-or-human')\nzip_ref.close()\n\"\"\"","79ed7992":"tmp = '..\/input\/horses-vs-humans'\n\n# Directory with our training horse pictures\ntrain_horse_dir = os.path.join(tmp + '\/horse-or-human\/horses')\n\n# Directory with our training human pictures\ntrain_human_dir = os.path.join(tmp + '\/horse-or-human\/humans')\n\n# Directory with our training horse pictures\nvalidation_horse_dir = os.path.join(tmp + '\/validation-horse-or-human\/horses')\n\n# Directory with our training human pictures\nvalidation_human_dir = os.path.join(tmp + '\/validation-horse-or-human\/humans')","ddecbebb":"train_horse_names = os.listdir(train_horse_dir)\nprint(train_horse_names[:10])\n\ntrain_human_names = os.listdir(train_human_dir)\nprint(train_human_names[:10])\n\nvalidation_horse_hames = os.listdir(validation_horse_dir)\nprint(validation_horse_hames[:10])\n\nvalidation_human_names = os.listdir(validation_human_dir)\nprint(validation_human_names[:10])","49878f66":"print('total training horse images:', len(os.listdir(train_horse_dir)))\nprint('total training human images:', len(os.listdir(train_human_dir)))\nprint('total validation horse images:', len(os.listdir(validation_horse_dir)))\nprint('total validation human images:', len(os.listdir(validation_human_dir)))","8a4f8257":"%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\n# Parameters for our graph; we'll output images in a 4x4 configuration\nnrows = 4\nncols = 4\n\n# Index for iterating over images\npic_index = 0","4eeb45dd":"# Set up matplotlib fig, and size it to fit 4x4 pics\nfig = plt.gcf()\nfig.set_size_inches(ncols * 4, nrows * 4)\n\npic_index += 8\nnext_horse_pix = [os.path.join(train_horse_dir, fname) \n                for fname in train_horse_names[pic_index-8:pic_index]]\nnext_human_pix = [os.path.join(train_human_dir, fname) \n                for fname in train_human_names[pic_index-8:pic_index]]\n\nfor i, img_path in enumerate(next_horse_pix+next_human_pix):\n  # Set up subplot; subplot indices start at 1\n  sp = plt.subplot(nrows, ncols, i + 1)\n  sp.axis('Off') # Don't show axes (or gridlines)\n\n  img = mpimg.imread(img_path)\n  plt.imshow(img)\n\nplt.show()\n","1f9848b2":"import tensorflow as tf","297852f4":"model = tf.keras.models.Sequential([\n    # Note the input shape is the desired size of the image 300x300 with 3 bytes color\n    # This is the first convolution\n    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(300, 300, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    # The second convolution\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # The third convolution\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # The fourth convolution\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # The fifth convolution\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # Flatten the results to feed into a DNN\n    tf.keras.layers.Flatten(),\n    # 512 neuron hidden layer\n    tf.keras.layers.Dense(512, activation='relu'),\n    # Only 1 output neuron. It will contain a value from 0-1 where 0 for 1 class ('horses') and 1 for the other ('humans')\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])","5ff40a85":"model.summary()","39c57830":"from tensorflow.keras.optimizers import RMSprop\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=RMSprop(lr=0.001),\n              metrics=['acc'])","055dbc84":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# All images will be rescaled by 1.\/255\ntrain_datagen = ImageDataGenerator(rescale=1\/255)\nvalidation_datagen = ImageDataGenerator(rescale=1\/255)\n\n# Flow training images in batches of 128 using train_datagen generator\ntrain_generator = train_datagen.flow_from_directory(\n        '..\/input\/horses-vs-humans\/horse-or-human',  # This is the source directory for training images\n        target_size=(300, 300),  # All images will be resized to 150x150\n        batch_size=128,\n        # Since we use binary_crossentropy loss, we need binary labels\n        class_mode='binary')\n\n# Flow training images in batches of 128 using train_datagen generator\nvalidation_generator = validation_datagen.flow_from_directory(\n        '..\/input\/horses-vs-humans\/validation-horse-or-human\/',  # This is the source directory for training images\n        target_size=(300, 300),  # All images will be resized to 150x150\n        batch_size=32,\n        # Since we use binary_crossentropy loss, we need binary labels\n        class_mode='binary')","4aa96f63":"history = model.fit_generator(\n      train_generator,\n      steps_per_epoch=8,  \n      epochs=15,\n      verbose=1,\n      validation_data = validation_generator,\n      validation_steps=8)","e1e6f25e":"import numpy as np\n# from google.colab import files\nfrom keras.preprocessing import image\n\n'''\nuploaded = files.upload()\n\nfor fn in uploaded.keys():\n \n  # predicting images\n  path = '\/content\/' + fn\n  img = image.load_img(path, target_size=(300, 300))\n  x = image.img_to_array(img)\n  x = np.expand_dims(x, axis=0)\n\n  images = np.vstack([x])\n  classes = model.predict(images, batch_size=10)\n  print(classes[0])\n  if classes[0]>0.5:\n    print(fn + \" is a human\")\n  else:\n    print(fn + \" is a horse\")\n''' ","fe2ef39d":"import numpy as np\nimport random\nfrom tensorflow.keras.preprocessing.image import img_to_array, load_img\n\n# Let's define a new Model that will take an image as input, and will output\n# intermediate representations for all layers in the previous model after\n# the first.\nsuccessive_outputs = [layer.output for layer in model.layers[1:]]\n#visualization_model = Model(img_input, successive_outputs)\nvisualization_model = tf.keras.models.Model(inputs = model.input, outputs = successive_outputs)\n# Let's prepare a random input image from the training set.\nhorse_img_files = [os.path.join(train_horse_dir, f) for f in train_horse_names]\nhuman_img_files = [os.path.join(train_human_dir, f) for f in train_human_names]\nimg_path = random.choice(horse_img_files + human_img_files)\n\nimg = load_img(img_path, target_size=(300, 300))  # this is a PIL image\nx = img_to_array(img)  # Numpy array with shape (150, 150, 3)\nx = x.reshape((1,) + x.shape)  # Numpy array with shape (1, 150, 150, 3)\n\n# Rescale by 1\/255\nx \/= 255\n\n# Let's run our image through our network, thus obtaining all\n# intermediate representations for this image.\nsuccessive_feature_maps = visualization_model.predict(x)\n\n# These are the names of the layers, so can have them as part of our plot\nlayer_names = [layer.name for layer in model.layers]\n\n# Now let's display our representations\nfor layer_name, feature_map in zip(layer_names, successive_feature_maps):\n  if len(feature_map.shape) == 4:\n    # Just do this for the conv \/ maxpool layers, not the fully-connected layers\n    n_features = feature_map.shape[-1]  # number of features in feature map\n    # The feature map has shape (1, size, size, n_features)\n    size = feature_map.shape[1]\n    # We will tile our images in this matrix\n    display_grid = np.zeros((size, size * n_features))\n    for i in range(n_features):\n      # Postprocess the feature to make it visually palatable\n      x = feature_map[0, :, :, i]\n      x -= x.mean()\n      x \/= x.std()\n      x *= 64\n      x += 128\n      x = np.clip(x, 0, 255).astype('uint8')\n      # We'll tile each filter into this big horizontal grid\n      display_grid[:, i * size : (i + 1) * size] = x\n    # Display the grid\n    scale = 20. \/ n_features\n    plt.figure(figsize=(scale * n_features, scale))\n    plt.title(layer_name)\n    plt.grid(False)\n    plt.imshow(display_grid, aspect='auto', cmap='viridis')","fd479cf0":"import os, signal\nos.kill(os.getpid(), signal.SIGKILL)","6279f72f":"Now, let's see what the filenames look like in the `horses` and `humans` training directories:","bd754eaf":"Next, we'll configure the specifications for model training. We will train our model with the `binary_crossentropy` loss, because it's a binary classification problem and our final activation is a sigmoid. (For a refresher on loss metrics, see the [Machine Learning Crash Course](https:\/\/developers.google.com\/machine-learning\/crash-course\/descending-into-ml\/video-lecture).) We will use the `rmsprop` optimizer with a learning rate of `0.001`. During training, we will want to monitor classification accuracy.\n\n**NOTE**: In this case, using the [RMSprop optimization algorithm](https:\/\/wikipedia.org\/wiki\/Stochastic_gradient_descent#RMSProp) is preferable to [stochastic gradient descent](https:\/\/developers.google.com\/machine-learning\/glossary\/#SGD) (SGD), because RMSprop automates learning-rate tuning for us. (Other optimizers, such as [Adam](https:\/\/wikipedia.org\/wiki\/Stochastic_gradient_descent#Adam) and [Adagrad](https:\/\/developers.google.com\/machine-learning\/glossary\/#AdaGrad), also automatically adapt the learning rate during training, and would work equally well here.)","19516d19":"Finally we add the densely connected layers. \n\nNote that because we are facing a two-class classification problem, i.e. a *binary classification problem*, we will end our network with a [*sigmoid* activation](https:\/\/wikipedia.org\/wiki\/Sigmoid_function), so that the output of our network will be a single scalar between 0 and 1, encoding the probability that the current image is class 1 (as opposed to class 0).\n\nWe are using 4 convolutional layers here","d5a0f765":"## Clean Up\n\nBefore running the next exercise, run the following cell to terminate the kernel and free memory resources:","dc9170e7":"Now let's take a look at a few pictures to get a better sense of what they look like. First, configure the matplot parameters:","383f4b7f":"### Data Preprocessing\n\nLet's set up data generators that will read pictures in our source folders, convert them to `float32` tensors, and feed them (with their labels) to our network. We'll have one generator for the training images and one for the validation images. Our generators will yield batches of images of size 300x300 and their labels (binary).\n\nAs you may already know, data that goes into neural networks should usually be normalized in some way to make it more amenable to processing by the network. (It is uncommon to feed raw pixels into a convnet.) In our case, we will preprocess our images by normalizing the pixel values to be in the `[0, 1]` range (originally all values are in the `[0, 255]` range).\n\nIn Keras this can be done via the `keras.preprocessing.image.ImageDataGenerator` class using the `rescale` parameter. This `ImageDataGenerator` class allows you to instantiate generators of augmented image batches (and their labels) via `.flow(data, labels)` or `.flow_from_directory(directory)`. These generators can then be used with the Keras model methods that accept data generators as inputs: `fit_generator`, `evaluate_generator`, and `predict_generator`.","9c539c69":"Now, display a batch of 8 horse and 8 human pictures. You can rerun the cell to see a fresh batch each time:","a1b79080":"The \"output shape\" column shows how the size of your feature map evolves in each successive layer. The convolution layers reduce the size of the feature maps by a bit due to padding, and each pooling layer halves the dimensions.","d12cd8fd":"# CNN for Horses vs Humans\n# -[Rishit Dagli](rishitdagli.ml)","aba6b2b7":"### Training\nLet's train for 15 epochs -- this may take a few minutes to run.\n\nDo note the values per epoch.\n\nThe Loss and Accuracy are a great indication of progress of training. It's making a guess as to the classification of the training data, and then measuring it against the known label, calculating the result. Accuracy is the portion of correct guesses. ","b61bd55e":"As you can see we go from the raw pixels of the images to increasingly abstract and compact representations. The representations downstream start highlighting what the network pays attention to, and they show fewer and fewer features being \"activated\"; most are set to zero. This is called \"sparsity.\" Representation sparsity is a key feature of deep learning.\n\n\nThese representations carry increasingly less information about the original pixels of the image, but increasingly refined information about the class of the image. You can think of a convnet (or a deep network in general) as an information distillation pipeline.","64f0266d":"The contents of the .zip are extracted to the base directory `\/tmp\/horse-or-human`, which in turn each contain `horses` and `humans` subdirectories. We don not have to do all this in Kaggle though as it already unzips the datset for us.\n\nIn short: The training set is the data that is used to tell the neural network model that 'this is what a horse looks like', 'this is what a human looks like' etc. \n\nOne thing to pay attention to in this sample: We do not explicitly label the images as horses or humans. If you remember with the handwriting example earlier, we had labelled 'this is a 1', 'this is a 7' etc.  Later you'll see something called an ImageGenerator being used -- and this is coded to read images from subdirectories, and automatically label them from the name of that subdirectory. So, for example, you will have a 'training' directory containing a 'horses' directory and a 'humans' one. ImageGenerator will label the images appropriately for you, reducing a coding step. \n\nLet's define each of these directories:","fc865cd7":"The following python code will use the OS library to use Operating System libraries, giving you access to the file system, and the zipfile library allowing you to unzip the data. ","7c327832":"If you learnd or had afun playing with the notebook please upvote it, this will keep me motivated too :)","3fc2e17d":"The `model.summary()` method call prints a summary of the NN \n\nNow, this is very helpful to us","8d94419f":"### Visualizing Intermediate Representations\n\nTo get a feel for what kind of features our convnet has learned, one fun thing to do is to visualize how an input gets transformed as it goes through the convnet.\n\nLet's pick a random image from the training set, and then generate a figure where each row is the output of a layer, and each image in the row is a specific filter in that output feature map. Rerun this cell to generate intermediate representations for a variety of training images.","911ec326":"Let's find out the total number of horse and human images in the directories:","67f2b78f":"### Running the Model\n\nLet's now take a look at actually running a prediction using the model. This code will allow you to choose 1 or more files from your file system, it will then upload them, and run them through the model, giving an indication of whether the object is a horse or a human. The below code will only wok in Google Colab so we will make ","4ec04c0e":"We then add convolutional layers as in the previous example, and flatten the final result to feed into the densely connected layers.","068cd65d":"## Building a Small Model from Scratch\n\nBut before we continue, let's start defining the model:\n\nStep 1 will be to import tensorflow."}}