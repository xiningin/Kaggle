{"cell_type":{"84f4a17b":"code","5b9f0e96":"code","0ad7b7d8":"code","bebac7f0":"code","9b4460f8":"code","3cda1941":"code","02c74e5f":"code","234ba0cd":"code","030cd5c7":"code","7411fe48":"code","759ccc4e":"code","bc79bbbc":"code","da57ff2e":"code","963d9b9f":"code","dadae7e6":"code","2b7f5f92":"code","c5e38105":"code","0a3c775c":"code","a9051f8c":"code","724d2ee1":"markdown","67ebcb52":"markdown","4b7374a7":"markdown","38657951":"markdown","2c5f23c3":"markdown","41ace9aa":"markdown","3feee7e6":"markdown","a6eaabfb":"markdown","f9347ce1":"markdown","e270a06d":"markdown","17c5e345":"markdown","eb7a6f4b":"markdown","911c5616":"markdown","9403d911":"markdown","effb1a10":"markdown","e4dee594":"markdown","da606635":"markdown","f3924754":"markdown","50f47aa9":"markdown","aa36d2f5":"markdown","3fc2e660":"markdown","58d8cbfb":"markdown","f816dd1e":"markdown","4b30688b":"markdown","a438afc4":"markdown","fe9eb94e":"markdown","14d3fe7d":"markdown","33d5b545":"markdown","aed9b49d":"markdown","7ada495b":"markdown","c4bad518":"markdown","d092ef3e":"markdown"},"source":{"84f4a17b":"from sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import MinMaxScaler","5b9f0e96":"df = pd.DataFrame({\"col1\":[\"a\",\"b\",\"a\",\"c\"],\"col2\":[\"a\",\"b\",\"a\",\"c\"]})\nprint(df)","0ad7b7d8":"ohe = OneHotEncoder()\ndf = ohe.fit_transform(df)\nprint(df.toarray())","bebac7f0":"df = pd.DataFrame({\"col1\":[\"a\",\"b\",\"a\",\"c\"],\"col2\":[\"a\",\"b\",\"a\",\"c\"]})\nprint(df)","9b4460f8":"ct = ColumnTransformer(transformers = [('ohe_col1',OneHotEncoder(),[0]),\n                                     ('ord_col2',OrdinalEncoder(),[1])])\ndf = ct.fit_transform(df)\nprint(df)","3cda1941":"df = pd.DataFrame({\"col1\":[\"a\",\"b\",\"a\",\"c\"],\"col2\":[\"a\",\"b\",\"a\",\"c\"]})\nprint(df)","02c74e5f":"ct = ColumnTransformer(transformers = [('ohe_col1',OneHotEncoder(),[0])])\ndf = ct.fit_transform(df)\nprint(df)","234ba0cd":"df = pd.DataFrame({\"col1\":[\"a\",\"b\",\"a\",\"c\"],\"col2\":[\"a\",\"b\",\"a\",\"c\"]})\nprint(df)","030cd5c7":"ct = ColumnTransformer(transformers = [('ohe_col1',OneHotEncoder(),[0])],remainder=\"passthrough\")\ndf = ct.fit_transform(df)\nprint(df)","7411fe48":"df = pd.DataFrame({\"col1\":[\"a\",\"b\",np.nan,\"c\"],\"col2\":[1,2,np.nan,5]})\nprint(df)","759ccc4e":"ct = ColumnTransformer(transformers=[('mode_impute1',SimpleImputer(strategy=\"most_frequent\"),[0]),\n                                    ('one_hot_encode1',OneHotEncoder(),[0]),\n                                    ('median_impute2',SimpleImputer(strategy=\"median\"),[0])])\ndf = ct.fit_transform(df)\nprint(df)","bc79bbbc":"df = pd.DataFrame({\"col1\":[\"a\",\"b\",\"d\",\"c\"],\"col2\":[1,2,np.nan,5]})\nprint(df)","da57ff2e":"ct = ColumnTransformer(transformers=[('ord_encode1',OrdinalEncoder(),[0]),\n                                     ('scale1',MinMaxScaler(),[0]),\n                                    ('median_impute2',SimpleImputer(strategy=\"median\"),[0])])\ndf = ct.fit_transform(df)\nprint(df)","963d9b9f":"df = pd.DataFrame({\"col1\":[1,2,np.nan,3],\"col2\":[1,np.nan,1,5]})\nprint(df)","dadae7e6":"pipe = Pipeline(steps=[('imputation',SimpleImputer(strategy=\"median\")),\n                      (\"scaling\",MinMaxScaler())])\ndf = pipe.fit_transform(df)\nprint(df)","2b7f5f92":"df = pd.DataFrame({\"col1\":[1,2,np.nan,3],\"col2\":[1,np.nan,1,5]})\nprint(df)","c5e38105":"df = SimpleImputer(strategy=\"median\").fit_transform(df)\ndf = MinMaxScaler().fit_transform(df)\nprint(df)","0a3c775c":"df = pd.DataFrame({\"col1\":[\"a\",\"b\",np.nan,\"a\"],\"col2\":[1,2,np.nan,5]})\nprint(df)","a9051f8c":"col1_pipe = Pipeline(steps=[('mode_col1',SimpleImputer(strategy=\"most_frequent\")),\n                           (\"one_hot_encode\",OneHotEncoder())])\n\ncol_transform = ColumnTransformer(transformers=[(\"col1\",col1_pipe,[0]),\n                                               (\"col2\",SimpleImputer(strategy=\"median\"),[1])])\n\ndf = col_transform.fit_transform(df)\nprint(df)","724d2ee1":"Let's look at another example. In the dataframe below, I'm trying to ordinalencode 'col1' and MinMaxScale it and median impute 'col2'","67ebcb52":"Consider a dataframe below where I wish to mode impute and onehotencode 'col1' and median impute 'col2'. Here I'm trying to perform a 2 transformations on a single column (col1) and median imput on 'col2'","4b7374a7":"2. As in ColumnTransformer, we cannot specify the column which we want to transform. ","38657951":"The above step has onehotencoded both the columns of the data frame. This problem can be solved using ColumnTransformer as shown below.","2c5f23c3":"<h1>LIMITATIONS OF COLUMNTRANSFORMER","41ace9aa":"To avoid this we need to add an argument 'remainder=passthrough' as shown below, the default for this argument is 'drop' which drops the other columns. ","3feee7e6":"What happened in the Pipeline?\n\nSimilar to ColumnTransformer, Pipeline takes input of steps, which can be a classifier, transform, etc. Each step in Pipeline has 2 parts:\n\n1. Name of step\n2. The operation itself.","a6eaabfb":"<h1>CLUBBING COLUMNTRANSFORMER AND PIPELINE","f9347ce1":"We got an error saying 'Input contains NaN'\n\nWhy is there an NaN even after imputing in the first step of the above ColumnTransformer?\n\nIt is because the ColumnTransformer takes the columns directly from the input dataframe\/array in each step. Output of one step is not an input of another step. So, the 2nd step of onehotencoding took the 'col1' from the input dataframe, not from step 1","e270a06d":"Conventionally, we create an instance of OneHotEncoder() and fit_transform it to the data frame as shown below","17c5e345":"As seen above we could perform multiple transformations on multiple columns with a single fit_transform() statement. This operation would be so complex without the use of ColumnTransformer.\n\nIn the above example, what we did is we created an instance of ColumnTransformer and passed an argument 'transformers' which basically is a list\/tuple of transformations we want to perform.\n\nEach transformation has 3 parts\n1. Name of the transform, it can be any unique name.\n2. Transform itself\n3. A list of columns to which you want to apply the transform. It should be a list even if you have to apply it to a single column","eb7a6f4b":"1. Similar to ColumnTransformer, Pipeline also outputs an array.","911c5616":"<h1>INTRODUCTION TO COLUMNTRANSFORMER","9403d911":"To tackle this problem let's know something about Pipeline","effb1a10":"As discussed I try to do it as shown below","e4dee594":"Consider the data frame below where I want to onehotencode 'col1' and ordinalencode 'col2'.","da606635":"1. ColumnTransformer outputs an array even if we input a DataFrame object which makes it difficult to track the columns.","f3924754":"Let's work on another example. Consider the dataframe below where I wish to onehotencode 'col1' and retain the 'col2' as it is.","50f47aa9":"Again there is an error saying 'could not convert string to float: 'a'' even after adding an ordinalencoder in step1.","aa36d2f5":"<h3>ColumnTransformer enables us to apply transform to particular columns. It help us to fit multiple transformations to multiple columns with a single fit() or fit_transform() statement. For example, we can impute mean in column 1 and OneHotEncode column 2 with a single fit statement.<\/h3>\n<br>   \n<h4>'ColumnTransformer' can be imported from 'sklearn.compose' module<\/h4>","3fc2e660":"<h1>INTRODUCTION TO PIPELINE","58d8cbfb":"There are few limitations of ColumnTransformer. They are discussed below","f816dd1e":"Conventional process takes 2 fit_transform steps where as use of Pipeline brings it down to 1.","4b30688b":"A ColumnTransformer returns only the columns on which it has performed a transformation. In the previous example, we have performed a transformation on bothe the columns, hence we got back both of them. But in the current example, we've performed transformation on only a single column (col1) so we got back a transformed 'col1'","a438afc4":"<h2>","fe9eb94e":"Where is 'col2'? ","14d3fe7d":"Pipeline is a sequence of operations where output of one operation becomes input to its subsequent operation. In the example below I'll first median impute the columns in dataframe and then perform Minmaxscaling on them","33d5b545":"A seen in one of the examples previously, we couldn't apply multiple transforms on a single column using ColumnTransformer. We got an error on trying it. Lets discuss the example once again.","aed9b49d":"2. In a ColumnTransformer we cannot apply multiple transforms to a single column. This is shown below\n\nConsider a dataframe below where I wish to mode impute and onehotencode 'col1' and median impute 'col2'. Here I'm trying to perform a 2 transformations on a single column (col1).","7ada495b":"As seen above we could perform multiple transformations with a single fit() or fit_transform() statement. Unlike ColumnTransformer, Pipelines follow a sequential process, where output of previous step becomes input of next step. The above operation is conventionally performed as shown below. ","c4bad518":"<h1>LIMITATIONS OF PIPELINE","d092ef3e":"What happened above?\n\nAs discussed above in a pipeline, the output of first step (mode imputer of col1) became input of second step (onehotencoder). Then we passed the pipeline as an input to columntransformer, where these sequence of steps are applied to col1 and we passed another median transform on col2, to the same columntransformer. Since we are performing transforms on different columns, there was no error in the columntransformer "}}