{"cell_type":{"8a6420a6":"code","09d0d7da":"code","580fc41d":"code","bb6b0cf5":"code","42f5e244":"code","cd56b347":"code","869bdaff":"code","69f7d7d6":"code","bc930cff":"code","4f16dea5":"code","314dd205":"code","7526f721":"code","4d3f63db":"code","676c2a72":"code","159e4d38":"code","b7d26908":"code","6071a7d4":"code","6b89df66":"code","0262a560":"code","a9dd3564":"code","3781e747":"code","8a0c8352":"code","99ab1c73":"code","9549480d":"code","54e4167b":"code","a0406e67":"code","d1790637":"code","33f5dbd2":"code","a138bd06":"code","f8b10d40":"code","b9b379dc":"code","6501fe57":"code","16a2877b":"code","802c542f":"code","40a6726a":"code","8f1b0a5a":"code","5e7ccee4":"code","83e953a2":"code","8d0ee387":"code","0bf3bc20":"code","9e41ae7a":"code","96c3bf7a":"code","d8b53237":"code","0c20b49e":"code","791263a3":"code","143b5a7d":"code","5e643e3a":"code","365a87d1":"code","e666cb71":"code","4f48e3e2":"code","5fa7cacb":"code","9eb05142":"code","0bd921b9":"code","4a25e9c3":"code","5562ab18":"code","a034be08":"markdown","7bffea92":"markdown","3410dbf9":"markdown","f521802c":"markdown","445f9e97":"markdown","1220cfbe":"markdown","3c542607":"markdown","d85a3e19":"markdown","0fe4a6c9":"markdown","210be9ee":"markdown","50a79f32":"markdown","6cbaaeec":"markdown","d715382a":"markdown","e5225a93":"markdown","a969cadc":"markdown","034321ad":"markdown","e9ef3e2a":"markdown","be432af4":"markdown","4cd4b652":"markdown","21f076a1":"markdown","22b7e07a":"markdown","95ec4b81":"markdown","20665ad9":"markdown","6e3a23f4":"markdown","6e2459da":"markdown","f6b334f8":"markdown","ba671186":"markdown","82187f3a":"markdown","6de8f934":"markdown","9f79c510":"markdown","5e7ed7f6":"markdown","1e3d9f8a":"markdown","45b6872c":"markdown","7bbc4a28":"markdown","cc5cd778":"markdown","74e8900b":"markdown","1ebe80ff":"markdown","3eeae350":"markdown","449b1367":"markdown","a972d875":"markdown","6f106730":"markdown","6a9103b9":"markdown","2c56b816":"markdown","e0626b78":"markdown","97e6507a":"markdown","1b74aa94":"markdown","ead9a9f4":"markdown","c54b0306":"markdown","8ef15763":"markdown","12b7ddae":"markdown","6d8ce97f":"markdown","a5d1e4ba":"markdown","2fb2a036":"markdown"},"source":{"8a6420a6":"# importing Python modules\nimport os\nimport sys #access to system parameters https:\/\/docs.python.org\/3\/library\/sys.html\nprint(\"Python version: {}\". format(sys.version))\nprint(\"Python environment: {}\".format(sys.executable))\n\nimport pandas as pd \nfrom pandas import ExcelWriter\nfrom pandas import ExcelFile\n#from openpyxl import load_workbook\nprint(\"pandas version: {}\". format(pd.__version__))\n\nimport plotly_express as px\nimport matplotlib #collection of functions for scientific and publication-ready visualization\nimport matplotlib.pyplot as plt # for plotting\n%matplotlib inline\nprint(\"matplotlib version: {}\". format(matplotlib.__version__))\nimport seaborn as sns # for making plots with seaborn\ncolor = sns.color_palette()\nprint(\"seaborn version: {}\". format(sns.__version__))\n\nimport numpy as np #foundational package for scientific computing\nprint(\"NumPy version: {}\". format(np.__version__))\nimport scipy as sp #collection of functions for scientific computing and advance mathematics\nfrom scipy import stats\nfrom scipy.stats import norm, skew\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\nprint(\"SciPy version: {}\". format(sp.__version__)) \n\nimport IPython\nfrom IPython import display #pretty printing of dataframes in Jupyter notebook\nfrom IPython.display import display\npd.options.display.max_columns = None\nprint(\"IPython version: {}\". format(IPython.__version__)) \n\nimport datetime\nfrom datetime import datetime\nfrom dateutil.parser import parse\nfrom time import time\n\n# to make this notebook's output identical at every run\nnp.random.seed(42)\n\nprint(\"Imported required Python packages\")","09d0d7da":"# scikit-learn modules\nimport sklearn\nprint(\"scikit-learn version: {}\". format(sklearn.__version__))\n# sklearn modules for preprocessing\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\n# from imblearn.over_sampling import SMOTE  # SMOTE\n# sklearn modules for ML model selection\nfrom sklearn.model_selection import train_test_split  # import 'train_test_split'\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\n# Libraries for data modelling\nfrom sklearn import svm, tree, linear_model, neighbors\nfrom sklearn import naive_bayes, ensemble, discriminant_analysis, gaussian_process\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\nfrom sklearn.linear_model import Ridge, RidgeCV\nfrom sklearn.linear_model import ElasticNet, ElasticNetCV\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import RandomForestRegressor # import RandomForestRegressor\nfrom sklearn.ensemble  import AdaBoostClassifier\nfrom sklearn.ensemble  import GradientBoostingRegressor\nfrom sklearn.linear_model import Lasso\n\n# Common sklearn Model Helpers\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn import metrics\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.preprocessing import MinMaxScaler, RobustScaler\n# from sklearn.datasets import make_classification\n\n# sklearn modules for performance metrics\nfrom sklearn.metrics import confusion_matrix, classification_report, precision_recall_curve\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve, recall_score, log_loss\nfrom sklearn.metrics import f1_score, accuracy_score, roc_auc_score, make_scorer\nfrom sklearn.metrics import average_precision_score\nfrom sklearn.metrics import r2_score, make_scorer, mean_squared_error\nprint(\"scikit-learn libraries imported successfully\")\n\n# Other ML algorithms\nfrom lightgbm import LGBMRegressor\nprint(\"lightgbm imported\")\nimport xgboost as xgb\nprint(\"xgboost imported\")\nfrom mlxtend.regressor import StackingCVRegressor, StackingRegressor\nprint(\"StackingRegressor imported\")","580fc41d":"import warnings\nwarnings.simplefilter('ignore')\n#\u8b66\u544a\u306e\u975e\u8868\u793a\n#warnings.simplefilter(action='ignore', category=FutureWarning)\n#warnings.simplefilter()\u306e\u7b2c\u4e8c\u5f15\u6570category\u306b\u8b66\u544a\u30ab\u30c6\u30b4\u30ea\u3092\u6307\u5b9a\u53ef\u80fd\u3002\n#FutureWarning\u3084DeprecationWarning, SyntaxWarning, RuntimeWarning\u306a\u3069\u304c\u3042\u308b\u3002","bb6b0cf5":"# \u5165\u529b\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306f\u3001\"..\/input\/house-prices-advanced-regression-techniques\"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nprint(os.listdir(\"..\/input\/house-prices-advanced-regression-techniques\"))\n# \u73fe\u884c\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u66f8\u304d\u8fbc\u307e\u308c\u305f\u7d50\u679c\u306f\u3001\u51fa\u529b\u3068\u3057\u3066\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002","42f5e244":"# \u63d0\u4f9b\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u683c\u7d0d\u3059\u308b\u3002\ntraining = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n# \u3053\u306e\u30ab\u30fc\u30cd\u30eb\u306e\u6b8b\u308a\u306e\u90e8\u5206\u306e\u305f\u3081\u306b\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30b3\u30d4\u30fc\u3092\u4f5c\u308b\u3002\n#\u30ab\u30fc\u30cd\u30eb\u306fOS\u306e\u4e2d\u6838\u3068\u306a\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\ndf_train = training.copy()\ndf_test = test.copy()\nprint(df_train.shape, df_test.shape)","cd56b347":"#training\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570(SalePrice)\u3092\u524a\u9664\ntarget = df_train['SalePrice'] \ndf_train = df_train.drop('SalePrice', axis=1) \n\nprint(\"Training: {}, Target: {}, Test: {}\".format(df_train.shape, target.shape, df_test.shape))\n#Target\u304c\uff081460,1\uff09\u3068\u8868\u8a18\u3055\u308c\u306a\u3044\u306e\u306f\u306a\u305c\uff1f","869bdaff":"df_train_exp = df_train.copy() #EDA\u7528\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30b3\u30d4\u30fc\u3092\u4f5c\u6210\u3059\u308b\u3002\nprint(df_train_exp.shape) ","69f7d7d6":"df_train_exp.head()","bc930cff":"print(\"{} Numerical columns, {} Categorial columns\".format(\n    list(df_train_exp.select_dtypes(include=[np.number]).shape)[1],\n    list(df_train_exp.select_dtypes(include = ['object']).shape)[1]))","4f16dea5":"# \u5217\u3092\u30bf\u30a4\u30d7\u5225\uff08int64\u3001float64\u3001object\u306a\u3069\uff09\u306b\u5206\u3051\u3066\u307f\u307e\u3057\u3087\u3046\u3002\ndf_train_exp.columns.to_series().groupby(df_train_exp.dtypes).groups","314dd205":"#\u6b20\u640d\u5024\u306e\u3042\u308b\u5217\u306e\u30ea\u30b9\u30c8\nprint(\"{} columns have missing values:\".format(\n    len(df_train_exp.columns[df_train_exp.isna().any()].tolist())))\ndf_train_exp.columns[df_train_exp.isna().any()].tolist()","7526f721":"df_train_exp.describe() \n# \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u5185\u306e\u5909\u6570\u30bf\u30a4\u30d7\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002","4d3f63db":"df_train_exp.hist(figsize=(18,18))\nplt.show()","676c2a72":"# \u6570\u5024\u7279\u5fb4\u306b\u304a\u3051\u308b\u6b63\u898f\u5206\u5e03\u4eee\u8aac\u306e\u691c\u5b9a\ntest_normality = lambda x: stats.shapiro(x.fillna(0))[1] < 0.01\nnumerical_features = [f for f in df_train_exp.columns if df_train_exp.dtypes[f] != 'object']\nnormal = pd.DataFrame(df_train_exp[numerical_features])\nnormal = normal.apply(test_normality)\nprint(not normal.any())","159e4d38":"# \u76f8\u95a2\u95a2\u4fc2\u306e\u7b97\u51fa\ncorr = training.corr(method='spearman')\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\n# Heatmap\nplt.figure(figsize=(15, 10))\nsns.heatmap(corr,\n            vmax=.5,\n            mask=mask,\n            #annot=True, \n            fmt='.2f',\n            linewidths=.2, cmap=\"YlGnBu\");","b7d26908":"# \u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306e\u76f8\u95a2\u95a2\u4fc2\u3092\u898b\u3064\u3051\u3066\u30bd\u30fc\u30c8\ncorrelations = training.corr(method='spearman')['SalePrice'].sort_values(ascending=False)\ncorrelations_abs = correlations.abs()\nprint('\\nTop 10 correlations (absolute):\\n', correlations_abs.head(11))","6071a7d4":"target_exp = target.copy() \n#\u63a2\u7d22\u76ee\u7684\u3067\u306e\u30b3\u30d4\u30fc","6b89df66":"# \u6b20\u640d\u5024\uff08NA\uff09\u304c\u306a\u3044\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\nprint(\"There are {} NA values in 'SalePrice'\".format(target_exp.isnull().values.sum()))","0262a560":"y = target_exp\nplt.figure(1); plt.title('Log Normal')\nsns.distplot(y, kde=False, fit=stats.lognorm)\nplt.ylabel('Frequency')\nprint(\"Skewness: %f\" % target_exp.skew())\n# \u5e73\u5747\u5024\u3068\u6a19\u6e96\u504f\u5dee\u3092\u5f97\u3088\u3046\u3002\n(mu, sigma) = norm.fit(target_exp)\nprint('Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma))","a9dd3564":"# \u5909\u6570\u300cSalePrice\u300d\u306e\u7d71\u8a08\u3092\u53d6\u3063\u3066\u307f\u3088\u3046\nprint(\"\u4f9b\u7d66\u3055\u308c\u305f\u4f4f\u5b85\u4fa1\u683c\u306etraining\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u7d71\u8a08:\\n\")\nprint(\"Minimum price: ${:,.2f}\".format(np.min(target_exp)))\nprint(\"Maximum price: ${:,.2f}\".format(np.max(target_exp)))\nprint(\"Mean price: ${:,.2f}\".format(np.mean(target_exp)))\nprint(\"Median price ${:,.2f}\".format(np.median(target_exp)))\nprint(\"Standard deviation of prices: ${:,.2f}\".format(np.std(target_exp)))","3781e747":"#  \u5916\u308c\u5024\u3092\u8996\u899a\u7684\u306b\u628a\u63e1\u3059\u308b\u305f\u3081\u306b\u3001\u7bb1\u3072\u3052\u56f3\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nsns.boxplot(y = target)\nplt.ylabel('SalePrice (Log)')\nplt.title('Price');\n\n# \u5909\u63db\u5f8c\u306e\u5916\u308c\u5024\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\nQ1 = target.quantile(0.25)\nQ3 = target.quantile(0.75)\nIQR = Q3 - Q1\nprint(\"IQR value: {}\\n# of outliers: {}\".format(\n    IQR,\n    ((target < (Q1 - 1.5 * IQR)) | (target > (Q3 + 1.5 * IQR))).sum()))","8a0c8352":"#\u5bfe\u8c61\u3068\u306a\u308b\u5909\u6570\u306b\u5bfe\u6570\u5909\u63db\u3092\u65bd\u3059\ntarget_tr = np.log1p(target)\n\n# \u95a2\u6570\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u30d5\u30a3\u30c3\u30c8\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nsns.distplot(target_tr , fit=norm);\n(mu, sigma) = norm.fit(target_tr)\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.title('Price (Log)');\nprint(\"Skewness: %f\" % target_tr.skew())","99ab1c73":"#  \u5916\u308c\u5024\u3092\u8996\u899a\u7684\u306b\u628a\u63e1\u3059\u308b\u305f\u3081\u306b\u3001\u7bb1\u3072\u3052\u56f3\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nsns.boxplot(y = target_tr)\nplt.ylabel('SalePrice (Log)')\nplt.title('Price');\n\n# c\u5909\u63db\u5f8c\u306e\u5916\u308c\u5024\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\nQ1 = target_tr.quantile(0.25)\nQ3 = target_tr.quantile(0.75)\nIQR = Q3 - Q1\nprint(\"IQR value: {}\\n# of outliers: {}\".format(\n    IQR,\n    ((target_tr < (Q1 - 1.5 * IQR)) | (target_tr > (Q3 + 1.5 * IQR))).sum()))","9549480d":"perc_na = (df_train.isnull().sum()\/len(df_train))*100\nratio_na = perc_na.sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Values Ratio' :ratio_na})\nprint(missing_data.shape)\nmissing_data.head(20)","54e4167b":"def house_pipeline_v1(dataframe,\n                      impute_method = \"median\",\n                      feature_transform = \"yes\",\n                      feature_scaling = \"RobustScaler\", \n                      feature_selection = \"yes\"):\n    # 0. \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u521d\u671f\u5316\n    df_pipe = dataframe.copy()\n    print(\"Dataframe loaded.\")\n    \n    # \u5197\u9577\u306a\u30ab\u30e9\u30e0\u306e\u524a\u9664\n    df_pipe.drop(['Id'], axis=1, inplace=True) # drop Id column\n    print(\"Dropped redundant column 'Id'.\")\n\n    # \u30ab\u30e9\u30e0\u30bf\u30a4\u30d7\u306e\u5909\u6570\n    numeric_features = list(df_pipe.select_dtypes(\n        include=[np.number]).columns.values)\n    categ_features = list(df_pipe.select_dtypes(\n        include=['object']).columns.values)\n    for col in numeric_features:\n        df_pipe[col] = df_pipe[col].astype(float)\n\n    # 1. \u6b20\u640d\u5024\u306e\u53d6\u308a\u6271\u3044\n    # \u30ab\u30c6\u30b4\u30ea\u30fc\u6a5f\u80fd\u306eNaN\u3092 \"None \"\u306b\u7f6e\u304d\u63db\u3048\u308b\n    df_pipe[categ_features] = df_pipe[categ_features].apply(\n        lambda x: x.fillna(\"None\"), axis=0)\n\n    # \u6570\u5024\u7279\u5fb4\u306e\u5165\u529b\n    for col in (\"LotFrontage\", 'GarageYrBlt', 'GarageArea', 'GarageCars'):\n        df_pipe[col].fillna(0.0, inplace=True)\n        \n    if impute_method == \"median\": # \u6570\u5024\u7279\u5fb4\u306eNaN\u3092\u4e2d\u592e\u5024\u3067\u7f6e\u304d\u63db\u3048\u308b\n        df_pipe[numeric_features] = df_pipe[numeric_features].apply(\n            lambda x: x.fillna(x.median()), axis=0)\n        print(\"Missing values imputed with median.\")\n    \n    elif impute_method == \"mean\": # \u6570\u5024\u7279\u5fb4\u306eNaN\u3092\u5e73\u5747\u5024\u3067\u7f6e\u304d\u63db\u3048\u308b\n        df_pipe[numeric_features] = df_pipe[numeric_features].apply(\n            lambda x: x.fillna(x.mean()), axis=0)\n        print(\"Missing values imputed with mean.\")\n\n    # 2. \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\n    # \u4f8b\uff1a\u9023\u7d9a\u3057\u305f\u7279\u5fb4\u91cf\u3092\u7bc4\u56f2\u3054\u3068\u306b\u5206\u3051\u308b\n    #           \u7279\u5fb4\u91cf\u306e\u5206\u89e3;\n    #           \u6a5f\u80fd\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u8ffd\u52a0\n    df_pipe['YrBltAndRemod']=df_pipe['YearBuilt']+df_pipe['YearRemodAdd']\n    df_pipe['TotalSF']=df_pipe['TotalBsmtSF'] + df_pipe['1stFlrSF'] + df_pipe['2ndFlrSF']\n\n    df_pipe['Total_sqr_footage'] = (df_pipe['BsmtFinSF1'] + df_pipe['BsmtFinSF2'] +\n                                     df_pipe['1stFlrSF'] + df_pipe['2ndFlrSF'])\n\n    df_pipe['Total_Bathrooms'] = (df_pipe['FullBath'] + (0.5 * df_pipe['HalfBath']) +\n                                   df_pipe['BsmtFullBath'] + (0.5 * df_pipe['BsmtHalfBath']))\n\n    df_pipe['Total_porch_sf'] = (df_pipe['OpenPorchSF'] + df_pipe['3SsnPorch'] +\n                                  df_pipe['EnclosedPorch'] + df_pipe['ScreenPorch'] + \n                                 df_pipe['WoodDeckSF'])\n    print(\"Feature enginering: added combination of features.\")\n    \n    df_pipe['haspool'] = df_pipe['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\n    df_pipe['has2ndfloor'] = df_pipe['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\n    df_pipe['hasgarage'] = df_pipe['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\n    df_pipe['hasbsmt'] = df_pipe['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\n    df_pipe['hasfireplace'] = df_pipe['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\n    print(\"Feature enginering: added boolean features.\")\n    \n    # 3. \u7279\u5fb4\u91cf\u5909\u63db(log(x), sqrt(x), x^2, etc.)\n    # \u6587\u5b57\u5217\uff08strings\uff09\u3068\u3057\u3066\u8003\u616e\u3059\u3079\u304d\u6570\u5024\u7684\u7279\u5fb4\u306e\u5909\u63db \n    df_pipe['MSSubClass'] = df_pipe['MSSubClass'].apply(str)\n    df_pipe['YrSold'] = df_pipe['YrSold'].astype(str)\n    df_pipe['MoSold'] = df_pipe['MoSold'].astype(str)\n    df_pipe['YrBltAndRemod'] = df_pipe['YrBltAndRemod'].astype(str)\n    print(\"Transformed numerical features that should be considered as strings.\")\n    \n    numeric_features = list(df_pipe.select_dtypes(\n        include=[np.number]).columns.values)\n    categ_features = list(df_pipe.select_dtypes(\n        include=['object']).columns.values)\n    \n    if feature_transform == \"yes\":\n        # \u6b6a\u5ea6\u4fc2\u6570\u304c0.5\u3092\u8d85\u3048\u308b\u3059\u3079\u3066\u306e\u6570\u5024\u5217\u3092\u5909\u63db\u3059\u308b\n        skew_features = df_pipe[numeric_features].apply(lambda x: skew(x)).sort_values(ascending=False)\n        high_skew = skew_features[skew_features > 0.5]\n        skew_index = high_skew.index\n        for i in skew_index:\n            df_pipe[i] = boxcox1p(df_pipe[i], boxcox_normmax(df_pipe[i]+1))\n        print(\"Transformed numerical columns with high skewness factor.\")\n    elif feature_transform == \"no\":\n        pass\n\n    # 4.\u30e9\u30d9\u30eb\u306e\u7b26\u53f7\u5316\n    df_pipe = pd.get_dummies(df_pipe)\n    print(\"Label Encoding: from {} cols to {} cols.\".format(\n        dataframe.shape[1], df_pipe.shape[1]))\n\n    # 5. Feature Scaling\n    #cols = df_pipe.select_dtypes([np.number]).columns\n    if feature_scaling == 'MinMaxScaler':\n        scaler = MinMaxScaler(feature_range=(0, 1))\n        for col in numeric_features:\n            df_pipe[[col]] = scaler.fit_transform(df_pipe[[col]])\n        print(\"Performed feature Scaling with MinMaxScaler.\")\n\n    elif feature_scaling == 'StandardScaler':\n        scaler = StandardScaler()\n        for col in numeric_features:\n            df_pipe[[col]] = scaler.fit_transform(df_pipe[[col]])\n        print(\"Performed feature Scaling with StandardScaler.\")\n\n    elif feature_scaling == \"RobustScaler\":\n        scaler = RobustScaler()\n        for col in numeric_features:\n            df_pipe[[col]] = scaler.fit_transform(df_pipe[[col]])\n        print(\"Performed feature Scaling with RobustScaler.\")\n    \n    # 6.\u7279\u5fb4\u91cf\u9078\u629e\n    #\u3000\u5206\u6563\u306e\u5c11\u306a\u3044\u5217\u3092\u524a\u9664\u3057\u3088\u3046\uff08\u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\n    overfit = []\n    for i in df_pipe.columns:\n        counts = df_pipe[i].value_counts()\n        zeros = counts.iloc[0]\n        if zeros \/ len(df_pipe) * 100 > 99.9: # \u95be\u5024\u309299.9%\u306b\u8a2d\u5b9a\n            overfit.append(i)\n    overfit = list(overfit)\n    # \u30c7\u30fc\u30bf\u51e6\u7406\u7528\u306e\u30ab\u30e9\u30e0\u3092\u6b8b\u3057\u3066\u304a\u3053\u3046\n    try:\n        overfit.remove('Dataset_Train')\n        overfit.remove('Dataset_Test')\n    except:\n        pass\n    df_pipe.drop(overfit, axis=1, inplace=True)\n    print(\"To prevent overfitting, {} columns were removed.\".format(len(overfit)))\n    \n    ## \u6982\u8981\n    print(\"Shape of transformed dataset: {} (original: {})\".format(df_pipe.shape, dataframe.shape))\n    return df_pipe","a0406e67":"def target_transf(target, \n                  transform=\"log\"):\n    \n    if transform == \"log\":\n        target_tranf = np.log1p(target)\n        print(\"Target feature transformed with natural logarithm.\")\n    \n    elif transform == \"sqrt\":\n        target_tranf = np.sqrt(target)\n        print(\"Target feature transformed with sqrt.\")\n    \n    elif transform == \"square\":\n        target_tranf = np.square(target)\n        print(\"Target feature transformed with square.\")\n    \n    print(\"Shape of transformed target: {}\".format(target_tr.shape))\n    return target_tranf","d1790637":"# Test pipeline\ndf_train_test = house_pipeline_v1(df_train)\nprint(\"\\n\")\ntarget_tr = target_transf(target)","33f5dbd2":"# \u6b20\u640d\u5024\u304c\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\nperc_na = (df_train_test.isnull().sum()\/len(df_train_test))*100\nratio_na = perc_na.sort_values(ascending=False)\nmissing_data = pd.DataFrame({'missing_ratio' :ratio_na})\nmissing_data = missing_data.drop(missing_data[missing_data.missing_ratio == 0].index)\nmissing_data.head(5)","a138bd06":"# \u5909\u63db\u3055\u308c\u305f\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u7279\u5fb4\nsns.distplot(target_tr , fit=norm);\n(mu, sigma) = norm.fit(target_tr)\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.title('Price (Log)');\nprint(\"Skewness: %f\" % target_tr.skew())","f8b10d40":"## Feature Scaling\ncol_eda = list(correlations_abs.index)\ndf_train_scal = df_train_test.filter(col_eda, axis=1).copy()\ndf_train_scal.hist(figsize=(18,18))\nplt.show()","b9b379dc":"# \u30c7\u30fc\u30bf\u51e6\u7406\u306e\u524d\u306b\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u30b3\u30d4\u30fc\u3059\u308b\ndf_train_pipeline = df_train.copy()\ndf_test_pipeline = df_test.copy()\n# \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u9023\u7d50\ndf_train_pipeline[\"Dataset\"] = \"Train\"\ndf_test_pipeline[\"Dataset\"] = \"Test\"\n# \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u9023\u7d50\ndf_joined = pd.concat([df_train_pipeline, df_test_pipeline], \n                      sort=False)\ndf_joined = df_joined.reset_index(drop=True) # reset index\nprint(\"Joined Dataframe shape: {}\".format(df_joined.shape))","6501fe57":"df_joined_ml = house_pipeline_v1(df_joined,\n                                 impute_method = \"median\",\n                                 feature_transform = \"yes\",\n                                 feature_scaling = \"RobustScaler\", \n                                 feature_selection = \"yes\")\nprint(\"----\\n\")\ntarget_ml = target_transf(target)\nprint(\"----\\n\")\nprint(\"Transformed Joined Dataframe shape: {}, and target shape: {}\".format(\n    df_joined_ml.shape, target_ml.shape))","16a2877b":"# \u5909\u63db\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\ndf_train_ml = df_joined_ml[df_joined_ml['Dataset_Train']==1].copy()\n# \u4f59\u5206\u306a\u6a5f\u80fd\u3092\u524a\u9664\ndf_train_ml.drop(['Dataset_Train'], axis=1, inplace=True)\ndf_train_ml.drop(['Dataset_Test'], axis=1, inplace=True)\n# Reset index\ndf_train_ml = df_train_ml.reset_index(drop=True) \nprint(df_train_ml.shape)","802c542f":"# \u5909\u63db\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\ndf_test_ml = df_joined_ml[df_joined_ml['Dataset_Test']==1].copy()\n# \u4f59\u5206\u306a\u6a5f\u80fd\u3092\u524a\u9664\ndf_test_ml.drop(['Dataset_Train'], axis=1, inplace=True)\ndf_test_ml.drop(['Dataset_Test'], axis=1, inplace=True)\n# Reset index\ndf_test_ml = df_test_ml.reset_index(drop=True)\nprint(df_test_ml.shape)","40a6726a":"X_train, X_test, y_train, y_test = train_test_split(df_train_ml,\n                                                    target_ml,\n                                                    test_size=0.2,\n                                                    stratify=df_train_ml['OverallQual'],\n                                                    random_state=42)","8f1b0a5a":"print(\"Training Data Shape: {}\".format(df_train_ml.shape))\nprint(\"X_train Shape: {}\".format(X_train.shape))\nprint(\"X_test Shape: {}\".format(X_test.shape))","5e7ccee4":"# \u691c\u8a0e\u3059\u3079\u304d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u9078\u629e\nmodels = []\nmodels.append(('Ridge Regression', Ridge(alpha=1.0)))\nmodels.append(('ElasticNet', ElasticNet()))\nmodels.append(('Random Forest', RandomForestRegressor(\n    n_estimators=100, random_state=7)))\nmodels.append(('Lasso', Lasso(random_state=42)))\nmodels.append(('XGBoost Regressor', xgb.XGBRegressor(objective='reg:squarederror', \n                                                     random_state=42)))\nmodels.append(('Gradient Boosting Regressor', GradientBoostingRegressor()))\nmodels.append(('LGBM Regressor',LGBMRegressor(objective='regression')))\nmodels.append(('SVR',SVR()))\n\n# \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u7d50\u679c\u3092\u5165\u529b\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u306b\u30c6\u30fc\u30d6\u30eb\u3092\u8a2d\u5b9a\u3059\u308b\nrmse_results = []\nnames = []\ncol = ['Algorithm', 'RMSE Mean', 'RMSE SD']\ndf_results = pd.DataFrame(columns=col)\n\n# \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308b\u5404\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\nkfold = model_selection.KFold(n_splits=5, shuffle = True, random_state=7)\ni = 0\nfor name, model in models:\n    # -mse \u63a1\u70b9\n    cv_mse_results = model_selection.cross_val_score(\n        model, X_train, y_train, cv=kfold, scoring='neg_mean_squared_error')\n    # rmse\u306e\u7d50\u679c\u3092\u8a08\u7b97\u3057\u3066\u8ffd\u52a0\u3059\u308b\n    cv_rmse_results = np.sqrt(-cv_mse_results)\n    rmse_results.append(cv_rmse_results)\n    names.append(name)\n    df_results.loc[i] = [name,\n                         round(cv_rmse_results.mean(), 4),\n                         round(cv_rmse_results.std(), 4)]\n    i += 1\ndf_results.sort_values(by=['RMSE Mean'], ascending=True).reset_index(drop=True)","83e953a2":"fig = plt.figure(figsize=(15, 8))\nfig.suptitle('Algorithm RMSE Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(rmse_results)\nax.set_xticklabels(names)\nplt.show();","8d0ee387":"import xgboost as xgb\nxgb_regressor = xgb.XGBRegressor(random_state=42)","0bf3bc20":"# start = time() # Get start time\n# cv_sets_xgb = ShuffleSplit(random_state = 10) # shuffling our data for cross-validation\n# parameters_xgb = {'n_estimators':range(2000, 8000, 500), \n#              'learning_rate':[0.05,0.060,0.070], \n#              'max_depth':[3,5,7],\n#              'min_child_weight':[1,1.5,2]}\n# scorer_xgb = make_scorer(mean_squared_error)\n# grid_obj_xgb = RandomizedSearchCV(xgb_regressor, \n#                                  parameters_xgb,\n#                                  scoring = scorer_xgb, \n#                                  cv = cv_sets_xgb,\n#                                  random_state= 99)\n# grid_fit_xgb = grid_obj_xgb.fit(X_train, y_train)\n# xgb_opt = grid_fit_xgb.best_estimator_\n\n# end = time() # Get end time\n# xgb_time = (end-start)\/60 # Calculate training time\n# print('It took {0:.2f} minutes for RandomizedSearchCV to converge to optimised parameters for the RandomForest model'.format(xgb_time))\n# ## Print results\n# print('='*20)\n# print(\"best params: \" + str(grid_fit_xgb.best_estimator_))\n# print(\"best params: \" + str(grid_fit_xgb.best_params_))\n# print('best score:', grid_fit_xgb.best_score_)\n# print('='*20)","9e41ae7a":"# \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3057\u305fXGBoost\nxgb_reg = xgb.XGBRegressor(objective='reg:squarederror', random_state=42)\nxgb_opt = xgb.XGBRegressor(learning_rate=0.01,\n                           n_estimators=6000,\n                           max_depth=4,\n                           min_child_weight=0,\n                           gamma=0.6,\n                           subsample=0.7,\n                           colsample_bytree=0.7,\n                           objective='reg:squarederror',\n                           nthread=-1,\n                           scale_pos_weight=1,\n                           seed=27,\n                           reg_alpha=0.00006,\n                           random_state=42)","96c3bf7a":"gbr = GradientBoostingRegressor(n_estimators=6000,\n                                learning_rate=0.01,\n                                max_depth=4,\n                                max_features='sqrt',\n                                min_samples_leaf=15,\n                                min_samples_split=10,\n                                loss='huber',\n                                random_state=42)","d8b53237":"lightgbm = LGBMRegressor(objective='regression', \n                         num_leaves=6,\n                         learning_rate=0.01, \n                         n_estimators=7000,\n                         max_bin=200, \n                         bagging_fraction=0.8,\n                         bagging_freq=4, \n                         bagging_seed=8,\n                         feature_fraction=0.2,\n                         feature_fraction_seed=8,\n                         min_sum_hessian_in_leaf = 11,\n                         verbose=-1,\n                         random_state=42)","0c20b49e":"# start = time() # Get start time\n# rf_regressor = RandomForestRegressor(random_state=42)\n# cv_sets = ShuffleSplit(random_state = 4) # shuffling our data for cross-validation\n# parameters = {'n_estimators':range(5, 950, 5), \n#               'min_samples_leaf':range(20, 40, 5), \n#               'max_depth':range(3, 5, 1)}\n# scorer = make_scorer(mean_squared_error)\n# n_iter_search = 10\n# grid_obj = RandomizedSearchCV(rf_regressor, \n#                               parameters, \n#                               n_iter = n_iter_search, \n#                               scoring = scorer, \n#                               cv = cv_sets,\n#                               random_state= 99)\n# grid_fit = grid_obj.fit(X_train, y_train)\n# rf_opt = grid_fit.best_estimator_\n# end = time() # Get end time\n# rf_time = (end-start)\/60 # Calculate training time\n# print('It took {0:.2f} minutes for RandomizedSearchCV to converge to optimised parameters for the RandomForest model'.format(rf_time))\n# ## Print results\n# print('='*20)\n# print(\"best params: \" + str(grid_fit.best_estimator_))\n# print(\"best params: \" + str(grid_fit.best_params_))\n# print('best score:', grid_fit.best_score_)\n# print('='*20)","791263a3":"# RandomForest with tuned parameters\nrf_reg = RandomForestRegressor(n_estimators=100, \n                               random_state=7)\nrf_opt = RandomForestRegressor(n_estimators=1200,\n                               max_depth=15,\n                               min_samples_split=5,\n                               min_samples_leaf=5,\n                               max_features=None,\n                               oob_score=True,\n                               random_state=42)","143b5a7d":"rf_imp = RandomForestRegressor(n_estimators=1200,\n                               max_depth=15,\n                               min_samples_split=5,\n                               min_samples_leaf=5,\n                               max_features=None,\n                               oob_score=True,\n                               random_state=42)\nrf_imp.fit(X_train, y_train)\nimportances = rf_imp.feature_importances_\ndf_param_coeff = pd.DataFrame(columns=['Feature', 'Coefficient'])\nfor i in range(len(X_train.columns)-1):\n    feat = X_train.columns[i]\n    coeff = importances[i]\n    df_param_coeff.loc[i] = (feat, coeff)\ndf_param_coeff.sort_values(by='Coefficient', ascending=False, inplace=True)\ndf_param_coeff = df_param_coeff.reset_index(drop=True)\nprint(\"Top 10 features:\\n{}\".format(df_param_coeff.head(10)))\n\nimportances = rf_imp.feature_importances_\nindices = np.argsort(importances)[::-1] # \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u964d\u9806\u306b\u4e26\u3079\u308b\nnames = [X_train.columns[i] for i in indices] # \u30bd\u30fc\u30c8\u3055\u308c\u305f\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u30a4\u30f3\u30dd\u30fc\u30c8\u306b\u5408\u308f\u305b\u3066\u3001\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u540d\u3092\u4e26\u3079\u66ff\u3048\u308b\nplt.figure(figsize=(15, 7)) # \u30d7\u30ed\u30c3\u30c8\u4f5c\u6210\nplt.title(\"Top 10 Most Important Features\") # \u30d7\u30ed\u30c3\u30c8\u30bf\u30a4\u30c8\u30eb\u4f5c\u6210\nplt.bar(range(10), importances[indices][:10]) # Add bars\nplt.xticks(range(10), names[:10], rotation=90) # X\u8ef8\u30e9\u30d9\u30eb\u306b\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u540d\u3092\u8ffd\u52a0\n#plt.bar(range(X_train.shape[1]), importances[indices]) # Add bars\n#plt.xticks(range(X_train.shape[1]), names, rotation=90) # Add feature names as x-axis labels\nplt.show() # Show plot","5e643e3a":"kfolds = KFold(n_splits=5, shuffle=True, random_state=7)\nrcv_alphas = np.arange(14, 16, 0.1)\nridge = RidgeCV(alphas=rcv_alphas, \n                cv=kfolds)","365a87d1":"svr = SVR(C= 20, \n          epsilon= 0.008, \n          gamma=0.0003)","e666cb71":"# \u691c\u8a0e\u3059\u3079\u304d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u9078\u629e\nstart = time() # Get start time\nmodels = []\nmodels.append(('Ridge Regression', ridge))\nmodels.append(('Random Forest', rf_opt))\nmodels.append(('XGBoost Regressor', xgb_opt))\nmodels.append(('Gradient Boosting Regressor', gbr))\nmodels.append(('LGBM Regressor',lightgbm))\nmodels.append(('SVR',svr))\nmodels.append(('StackingRegressor',StackingRegressor(regressors=(gbr,\n                                                                 xgb_opt,\n                                                                 lightgbm,\n                                                                 rf_opt,\n                                                                 ridge, \n                                                                 svr),\n                                                     meta_regressor=xgb_opt,\n                                                     use_features_in_secondary=False)))\n\n# \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u7d50\u679c\u3092\u5165\u529b\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u306b\u30c6\u30fc\u30d6\u30eb\u3092\u8a2d\u5b9a\u3059\u308b\nrmse_results = []\nnames = []\ncol = ['Algorithm', 'RMSE Mean', 'RMSE SD']\ndf_results = pd.DataFrame(columns=col)\n\n# \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308b\u5404\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\nkfold = model_selection.KFold(n_splits=5, shuffle = True, random_state=7)\ni = 0\nfor name, model in models:\n    print(\"Evaluating {}...\".format(name))\n    # -mse\u3000\u5f97\u70b9\n    cv_mse_results = model_selection.cross_val_score(\n        model, X_train, y_train, cv=kfold, scoring='neg_mean_squared_error')\n    # rmse\u306e\u7d50\u679c\u3092\u8a08\u7b97\u3057\u3066\u8ffd\u52a0\u3059\u308b\n    cv_rmse_results = np.sqrt(-cv_mse_results)\n    rmse_results.append(cv_rmse_results)\n    names.append(name)\n    df_results.loc[i] = [name,\n                         round(cv_rmse_results.mean(), 4),\n                         round(cv_rmse_results.std(), 4)]\n    i += 1\nend = time() # Get end time\neval_time = (end-start)\/60 # Calculate training time\nprint('Evaluation completed.\\nIt took {0:.2f} minutes to evaluate all models using a 5-fold cross-validation.'.format(eval_time))\ndf_results.sort_values(by=['RMSE Mean'], ascending=True).reset_index(drop=True)","4f48e3e2":"fig = plt.figure(figsize=(20, 8))\nfig.suptitle('Algorithm RMSE Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(rmse_results)\nax.set_xticklabels(names)\nplt.show()","5fa7cacb":"stack_gen = StackingCVRegressor(regressors=(gbr,\n                                            xgb_opt,\n                                            lightgbm,\n                                            rf_opt,\n                                            ridge, \n                                            svr),\n                                meta_regressor=xgb_opt,\n                                use_features_in_secondary=False)","9eb05142":"print('Fitting models to the training data:')\nstart = time() # Get start time\n\nprint('xgboost....')\nxgb_model_full_data = xgb_opt.fit(df_train_ml, target_ml)\nprint('GradientBoosting....')\ngbr_model_full_data = gbr.fit(df_train_ml, target_ml)\nprint('lightgbm....')\nlgb_model_full_data = lightgbm.fit(df_train_ml, target_ml)\nprint('RandomForest....')\nrf_model_full_data = rf_opt.fit(df_train_ml, target_ml)\nprint('Ridge....')\nridge_model_full_data = ridge.fit(df_train_ml, target_ml)\nprint('SVR....')\nsvr_model_full_data = svr.fit(df_train_ml, target_ml)\nprint('Stacking Regression....')\nstack_gen_model = stack_gen.fit(np.array(df_train_ml), np.array(target_ml))\n\nend = time() # Get end time\nfitting_time = (end-start)\/60 # Calculate training time\nprint('Fitting completed.\\nIt took {0:.2f} minutes to fit all the models to the training data.'.format(fitting_time))","0bd921b9":"def blend_models_predict(X):\n    return ((0.25 * stack_gen_model.predict(np.array(X))) + \\\n            (0.25 * gbr_model_full_data.predict(X)) + \\\n            (0.15 * svr_model_full_data.predict(X)) + \\\n            (0.15 * lgb_model_full_data.predict(X)) + \\\n            (0.1 * ridge_model_full_data.predict(X))+ \\\n            (0.05 * xgb_model_full_data.predict(X)) + \\\n            (0.05 * rf_model_full_data.predict(X)) \n           )","4a25e9c3":"# \u30d6\u30ec\u30f3\u30c9\u304b\u3089\u4e88\u6e2c\u5024\u3092\u751f\u6210\ny_pred_final = np.floor(np.expm1(blend_models_predict(df_test_ml)))","5562ab18":"# \u6295\u7a3f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u751f\u6210\nmy_submission = pd.DataFrame({'Id': test.Id, 'SalePrice': y_pred_final})\n\n# \u6295\u7a3f\u5185\u5bb9\u3092CSV\u3067\u51fa\u529b\u3059\u308b\nmy_submission.to_csv('submission-080719_v1.csv', index=False)","a034be08":"> \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u7528\u3044\u3066ML\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b66\u7fd2\u3059\u308b\u524d\u306b\uff0c\u5b66\u7fd2\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u5206\u5272\u3059\u308b\u3002\u79c1\u306f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u3068\u306e\u76f8\u95a2\u304c\u5f37\u3044\u7279\u5fb4\u306b\u57fa\u3065\u3044\u3066\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3092\u300c\u5c64\u5225\u300d\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002","7bffea92":"**6.1 XGBoost**","3410dbf9":"**6.5 Ridge Regression(\u30ea\u30c3\u30b8\u56de\u5e30)**","f521802c":"\u5bfe\u8c61\u3068\u306a\u308b\u5909\u6570\u300cSalePrice\u300d\u306b\u3064\u3044\u3066\u5c11\u3057\u8aac\u660e\u3057\u307e\u3059\u3002","445f9e97":"> XGBoost\u306f\u3001\"Extreme Gradient Boosting \"\u306e\u7565\u3067\u3001Kaggle\u3067\u4eba\u6c17\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\u5b9f\u88c5\u306f\u65e9\u3044\u306e\u3067\u3059\u304c\u3001\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u4ee5\u4e0b\u306b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u30b3\u30fc\u30c9\u3092\u63b2\u8f09\u3057\u3066\u3044\u307e\u3059\u304c\u3001Kaggle\u3067\u306f\u5b9f\u884c\u3057\u3066\u3044\u307e\u305b\u3093\u3002","1220cfbe":"\u6570\u5b57\u4ee5\u5916\u306e\u5909\u6570\u304c\u975e\u5e38\u306b\u591a\u3044\u305f\u3081\u3001\u30e2\u30c7\u30eb\u3092\u30d5\u30a3\u30c3\u30c8\u3055\u305b\u308b\u524d\u306bone-hot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0(\u30c0\u30df\u30fc\u5909\u6570\u3092\u7528\u3044\u305f\u524d\u51e6\u7406)\u3092\u884c\u3046\u3068\u3001\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u5217\u6570\u304c\u591a\u304f\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002","3c542607":"**4.4 \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3**","d85a3e19":"# 5. \u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb","0fe4a6c9":">  \u76f8\u95a2\u56f3\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u305d\u3057\u3066\u3001\u5bfe\u8c61\u3068\u306a\u308b\u6a5f\u80fd\u3068\u6700\u3082\u5f37\u304f\u76f8\u95a2\u3057\u3066\u3044\u308b\u4e0a\u4f4d\u306e\u6a5f\u80fd\u306b\u6ce8\u76ee\u3057\u3066\u307f\u307e\u3059\u3002\u6ce8\u610f\uff1a\u5909\u6570\u304c\u6b63\u898f\u5206\u5e03\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3084\u3001\u5909\u6570\u9593\u306e\u95a2\u4fc2\u304c\u7dda\u5f62\u3067\u306a\u3044\u5834\u5408\uff08\u4eca\u56de\u306e\u3088\u3046\u306b\uff09\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d4\u30a2\u30bd\u30f3\u6cd5\u3067\u306f\u306a\u304f\u3001\u30b9\u30d4\u30a2\u30de\u30f3\u9806\u4f4d\u76f8\u95a2\u6cd5\u3092\u4f7f\u7528\u3059\u308b\u306e\u304c\u9069\u5207\u3067\u3059\u3002","210be9ee":"> \u6700\u9069\u306a\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306b\uff0c\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff08\u4ee5\u4e0b\u306e\u56f3\u3092\u53c2\u7167\uff09\uff0eRandomizedSearchCV\u306e\u7d50\u679c\u304c\u51fa\u308b\u307e\u3067\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\uff0c\u6b21\u306e\u30bb\u30eb\u306f\u7701\u7565\u3057\u307e\u3057\u305f\u304c\uff0c\u30b3\u30fc\u30c9\u306f\u53c2\u8003\u307e\u3067\u306b\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\uff0e","50a79f32":"# 4. \u30c7\u30fc\u30bf\u306e\u6e96\u5099","6cbaaeec":"**2.2 \u30c7\u30fc\u30bf\u306eimport**","d715382a":"**6.2 Gradient Boosting Regressor**","e5225a93":"![\u6b6a\u5ea6](https:\/\/haku1569.up.seesaa.net\/image\/20161010-01-thumbnail2.jpg)","a969cadc":"# **7 StackingCVRegressor\u306b\u3088\u308bML\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30d6\u30ec\u30f3\u30c9**","034321ad":"**6.3 LGBM Regressor**","e9ef3e2a":"# Kaggle Competitions - House Prises: Advanced Regression Techniques","be432af4":"**3.2 \u76f8\u95a2\u56f3**","4cd4b652":"**\u5099\u8003:**\n\n> \u30d7\u30ed\u30c3\u30c8\u306b\u898b\u3089\u308c\u308b\u3088\u3046\u306b\u3001\u300cSalePrice\u300d\u306e\u5206\u5e03\u306f\u53f3\u306b\u50be\u3044\u3066\u304a\u308a\u3001\u305d\u308c\u306f\u6b63\u306e\u6b6a\u5ea6\u4fc2\u6570\u306b\u53cd\u6620\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u6b6a\u5ea6\u4fc2\u6570\u3092\u53ef\u80fd\u306a\u9650\u308a\u30bc\u30ed\u306b\u8fd1\u3065\u3051\u305f\u3044\uff08\u3064\u307e\u308a\u3001\u6b63\u898f\u5206\u5e03\u307e\u305f\u306f\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u3057\u305f\u3044\uff09\u3002\n\u3053\u308c\u3092\u5b9f\u73fe\u3059\u308b\u306b\u306f\u3001\u5916\u308c\u5024\u3092\u9664\u53bb\u3059\u308b\u304b\u3001\u5909\u6570\u3092\u5909\u63db\u3057\u307e\u3059\u3002\u5916\u308c\u5024\u3092\u9664\u53bb\u3059\u308b\u3053\u3068\u306f\u3001\u5916\u308c\u5024\u3092\u9664\u53bb\u3059\u3079\u304d\u304b\u3069\u3046\u304b\u3092\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306b\u4e0d\u52d5\u7523\u306e\u5c02\u9580\u77e5\u8b58\u304c\u5fc5\u8981\u3068\u306a\u308b\u305f\u3081\u3001\u96e3\u3057\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u671b\u307e\u3057\u3044\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u306e\u3067\u3042\u308c\u3070\u3001\u5909\u63db\u3092\u9069\u7528\u3059\u308b\u65b9\u304c\u4e00\u822c\u7684\u306b\u5b89\u5168\u306a\u9078\u629e\u80a2\u3068\u306a\u308a\u307e\u3059\u3002**\u6b63\u306e\u6b6a\u5ea6\u306e\u5834\u5408\u306b\u306f\u3001\u5bfe\u6570\u5909\u63db\u304c\u6709\u52b9\u3067\u3059\u3002**","21f076a1":"seaborn.heatmap \u306e\u4e3b\u8981\u306a\u5f15\u6570(sns\u306fSamuel Norman Seaborn\u3055\u3093\u306e\u7565\uff1f\uff1f\uff1f)\n\n* data\tndarray \u5f62\u5f0f\u306b\u5909\u63db\u53ef\u80fd\u306a 2 \u6b21\u5143\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u6307\u5b9a\u3002Pandas \u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u5217\u540d\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002\n* vmin, vmax\t\u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u3068\u5024\u306e\u7bc4\u56f2\u3092\u95a2\u9023\u4ed8\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\u969b\u306b\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3001\u30c7\u30fc\u30bf\u3084\u4ed6\u306e\u5f15\u6570\u304b\u3089\u63a8\u6e2c\u3055\u308c\u307e\u3059\u3002\u767a\u6563\u7684 (diverging) \u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 (0 \u3092\u8d77\u70b9\u3068\u3057\u3066\u6b63\u8ca0\u306b\u5e83\u304c\u308b\u30c7\u30fc\u30bf) \u3068\u63a8\u6e2c\u3055\u308c\u305f\u5834\u5408\u3001\u3053\u308c\u3089\u306e\u5024\u306f\u7121\u8996\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: None)\n* cmap\tMatplotlib \u306e\u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u307e\u305f\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6307\u5b9a\u3002\u5024\u306e\u5927\u5c0f\u3092\u3069\u306e\u8272\u306b\u5909\u63db\u3059\u308b\u969b\u306b\u7528\u3044\u307e\u3059\u3002\u6307\u5b9a\u306e\u306a\u3044\u5834\u5408\u3001cubehelix \u30ab\u30e9\u30fc\u30de\u30c3\u30d7 (\u5024\u304c\u9023\u7d9a\u91cf\u306e\u5834\u5408) \u3082\u3057\u304f\u306f\u3001RdBu_r \u30ab\u30e9\u30fc\u30de\u30c3\u30d7 (\u767a\u6563\u7684\u306a\u30c7\u30fc\u30bf\u306e\u5834\u5408) \u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002\u53c2\u8003: color example code: colormaps_reference.py \u2014 Matplotlib 2.0.2 documentation (\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: None)\n* center\tcolormap \u306e \u4e2d\u5fc3\u3068\u3059\u308b\u5024\u3002\u3053\u306e\u5024\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u767a\u6563\u7684\u306a\u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u3092\u4f7f\u3046\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: None)\n* robust\tTrue \u306b\u8a2d\u5b9a\u3057 vmin \u3068 vmax \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u304c\u4f7f\u3046\u8272\u3068\u305d\u306e\u5024\u306e\u7bc4\u56f2\u306f\u30ed\u30d0\u30b9\u30c8\u306a\u63a8\u5b9a\u3092\u884c\u3044\u3001\u6975\u7aef\u306b\u5927\u304d\u306a\u5024\u3084\u5c0f\u3055\u3044\u5024\u306e\u5f71\u97ff\u3092\u53d7\u3051\u306a\u3044\u3088\u3046\u306b\u8a08\u7b97\u3055\u308c\u307e\u3059\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: False)\n* annot\tTrue \u306b\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u30bb\u30eb\u306b\u5024\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u884c\u5217\u306a\u3069\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u4efb\u610f\u306e\u5024\u3092\u51fa\u529b\u3067\u304d\u307e\u3059\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: None)\n* fmt\tannot=True \u306b\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u3001\u307e\u305f\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306e\u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6587\u5b57\u5217\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: \u2018.2g\u2019)\n* annot_kws\tannot=True \u306b\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u3001\u307e\u305f\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092 Matplotlib \u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u53c2\u8003\uff1aText properties and layout \u2014 Matplotlib 2.0.2 documentation (\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: None)\n* linewidths\t\u5404\u30bb\u30eb\u9593\u306e\u7dda\u306e\u592a\u3055\u3092\u6570\u5024\u3067\u6307\u5b9a\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: 0)\n* linecolor\t\u5404\u30bb\u30eb\u9593\u306e\u7dda\u306e\u8272\u3002\u53c2\u8003\uff1amatplotlib \u3067\u6307\u5b9a\u53ef\u80fd\u306a\u8272\u306e\u540d\u524d\u3068\u4e00\u89a7 (\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: \u2018white\u2019)\n* cbar\tTrue \u306b\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u30ab\u30e9\u30fc\u30d0\u30fc\u3092\u51fa\u529b\u3057\u307e\u3059\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: True)\n* cbar_kws\t\u30ab\u30e9\u30fc\u30d0\u30fc\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092 Matplotlib \u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u53c2\u8003\uff1acolorbar \u2014 Matplotlib 2.0.2 documentation (\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: None)\n* cbar_ax\t\u30ab\u30e9\u30fc\u30d0\u30fc\u3092\u51fa\u529b\u3059\u308b\u969b\u306e\u8ef8\u3092 Matplotlib \u306e\u8ef8\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: None)\n* square\tTrue \u306b\u8a2d\u5b9a\u3059\u308b\u3068\u3001X \u8ef8\u3001Y \u8ef8\u3092\u6b63\u65b9\u5f62\u306b\u306a\u308b\u3088\u3046\u306b\u8abf\u6574\u3057\u3001\u8ef8\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: False)\n* ax\t\u56f3\u3092\u51fa\u529b\u3059\u308b\u969b\u306e\u8ef8\u3092 Matplotlib \u306e\u8ef8\u3067\u6307\u5b9a\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: None)\n* xticklabels\tTrue \u306b\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u5217\u540d\u3092 x \u8ef8\u306b\u51fa\u529b\u3057\u307e\u3059\u3002False \u306b\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u30ab\u30e9\u30e0\u540d\u3092\u51fa\u529b\u3057\u307e\u305b\u3093\u3002\u30ea\u30b9\u30c8\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001x \u8ef8\u306b\u4efb\u610f\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u6574\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30ab\u30e9\u30e0\u540d\u3092\u51fa\u529b\u3057\u307e\u3059\u304c\u6307\u5b9a\u3057\u305f\u6570\u6bce\u306b\u51fa\u529b\u3057\u307e\u3059\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: True)\n* yticklabels\tTrue \u306b\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u5217\u540d\u3092 y \u8ef8\u306b\u51fa\u529b\u3057\u307e\u3059\u3002False \u306b\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u30ab\u30e9\u30e0\u540d\u3092\u51fa\u529b\u3057\u307e\u305b\u3093\u3002\u30ea\u30b9\u30c8\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001y \u8ef8\u306b\u4efb\u610f\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u6574\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30ab\u30e9\u30e0\u540d\u3092\u51fa\u529b\u3057\u307e\u3059\u304c\u6307\u5b9a\u3057\u305f\u6570\u6bce\u306b\u51fa\u529b\u3057\u307e\u3059\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: True)\n* mask\t\u5024\u3092\u30de\u30b9\u30af\u3059\u308b\u30bb\u30eb\u3092\u6307\u5b9a\u3002True \u307e\u305f\u306f False \u306e 2 \u5024\u3067\u69cb\u6210\u3055\u308c\u308b\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u307e\u305f\u306f\u3001\u884c\u5217\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u6b20\u640d\u5024\u306f\u3001\u81ea\u52d5\u7684\u306b\u30de\u30b9\u30af\u3055\u308c\u307e\u3059\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: None)\n* kwargs\tMatplotlib \u306e ax.pcolormesh \u306b\u6e21\u3059\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u5f62\u5f0f\u3067\u6307\u5b9a\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: None)","22b7e07a":"\u30c7\u30fc\u30bf\u306f2\u3064\u306eCSV\u30d5\u30a1\u30a4\u30eb\u306e\u5f62\u3067Kaggle\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u304b\u3089\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\n\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002","95ec4b81":"**4.1 \u5bfe\u6570\u5909\u63db\uff1a\u30bf\u30fc\u30b2\u30c3\u30c8\u7279\u5fb4**","20665ad9":"\u4eca\u56de\u306f\u4e0a\u8a18\u306e\u901a\u308a\u4f4f\u5b85\u306e\u4fa1\u683c\u3092\u6a5f\u68b0\u5b66\u7fd2\u3055\u305b\u308b\u3002\n\n\u65b9\u91dd\n1. \u554f\u984c\u306e\u8a2d\u5b9a\n2. \u30c7\u30fc\u30bf\u306e\u53d6\u5f97\n3. \u63a2\u7d22\u7684\u30c7\u30fc\u30bf\u5206\u6790(EDA)\n4. \u30c7\u30fc\u30bf\u306e\u6e96\u5099\n5. \u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\n6. ML\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u69cb\u7bc9\n7. ML\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u914d\u5408\n8. \u63d0\u51fa","6e3a23f4":"\u3053\u306e\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u3067\u306f\u3001\u30a2\u30a4\u30aa\u30ef\u5dde\u30a8\u30a4\u30e0\u30ba\u306e\u4f4f\u5b85\u306e\u3042\u3089\u3086\u308b\u5074\u9762\u3092\uff08\u307b\u307c\uff09\u8a18\u8ff0\u3059\u308b79\u306e\u8aac\u660e\u5909\u6570\u3092\u7528\u3044\u3066\u3001\u5404\u4f4f\u5b85\u306e\u6700\u7d42\u4fa1\u683c\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u306b\u6311\u6226\u3057\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306a\u30b9\u30ad\u30eb\u306e\u7df4\u7fd2\u306b\u6700\u9069\u3067\u3059\u3002\n\n\u5275\u9020\u7684\u306a\u7279\u5fb4\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3084\u52fe\u914d\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u306a\u3069\u306e\u9ad8\u5ea6\u306a\u56de\u5e30\u6280\u8853\n\u63d0\u51fa\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n* train.csv - \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\n* test.csv - \u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\n* data_description.txt - \u5404\u30ab\u30e9\u30e0\u306e\u5b8c\u5168\u306a\u8aac\u660e\n\n\u3053\u306eML\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001\u63d0\u4f9b\u3055\u308c\u305f\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u306b\u57fa\u3065\u3044\u3066\u4f4f\u5b85\u306e\u4fa1\u5024\u3092\u4e88\u6e2c\u3059\u308bML\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u5bb6\u306e\u4fa1\u5024\u3092\u6c7a\u3081\u308b\u4e3b\u8981\u306a\u4e88\u6e2c\u56e0\u5b50\u306f\u4f55\u304b\u3092\u8abf\u3079\u307e\u3059\u3002\n\n* ML\u306e\u30ab\u30c6\u30b4\u30ea \u6559\u5e2b\u3042\u308a\u5b66\u7fd2 (\u30aa\u30d5\u30e9\u30a4\u30f3)\n* \u554f\u984c\u306e\u7a2e\u985e \u56de\u5e30\n* \u76ee\u6a19\u3068\u3059\u308b\u7d50\u679c\u306e\u30bf\u30a4\u30d7 \u6570\u5024\n* \u30c7\u30fc\u30bf\u306e\u7a2e\u985e \u8868\u5f62\u5f0f\uff08CSV\u30d5\u30a1\u30a4\u30eb\n*  \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6307\u6a19 \u4e88\u6e2c\u5024\u306e\u5bfe\u6570\u3068\u89b3\u6e2c\u3055\u308c\u305f\u8ca9\u58f2\u4fa1\u683c\u306e\u5bfe\u6570\u306e\u9593\u306eRMSE\uff08Root-Mean-Squared-Error\uff09\n* \u6027\u80fd\u8981\u4ef6\uff1aRMSE\u3092\u6700\u5c0f\u5316\u3059\u308b","6e2459da":"**2.1 python\u30e9\u30a4\u30d6\u30e9\u30ea\u306eimport**","f6b334f8":"\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u6ce8\u76ee\u3057\u3001\u3069\u306e\u5909\u6570\u306b\u6b20\u640d\u5024\u304c\u3042\u308b\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002","ba671186":"\u3053\u308c\u307e\u3067\u306eEDA\u306b\u57fa\u3065\u3044\u3066\u3001\u3044\u304f\u3064\u304b\u306e\u89b3\u5bdf\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n* \u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u300119\u500b\u306e\u7279\u5fb4\uff0880\u500b\u4e2d\uff09\u306b\u6b20\u640d\u5024\u304c\u3042\u308b\u3002\n* \u6570\u5024\u7279\u5fb4\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u7279\u5fb4\u304c\u30c6\u30fc\u30eb\u30d8\u30d3\u30fc\u3067\u3042\u308b\u3053\u3068\u3092\u660e\u78ba\u306b\u793a\u3057\u3066\u304a\u308a\u3001\u5b9f\u969b\u3001\u3044\u304f\u3064\u304b\u306e\u5206\u5e03\u306f\u53f3\u307e\u305f\u306f\u5de6\u306b\u504f\u3063\u3066\u3044\u308b\uff08\u4f8b\uff1aOpenPorchSF\u30012ndFlrSF\uff09\u3002\u30c7\u30fc\u30bf\u306b\u30e2\u30c7\u30eb\u3092\u5f53\u3066\u306f\u3081\u308b\u524d\u306b\u3001\u6b63\u898f\u5206\u5e03\u306b\u8fd1\u3065\u3051\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u5909\u63db\u65b9\u6cd5\u304c\u5fc5\u8981\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n* \u7279\u5fb4\u91cf\u300cId\u300d\u306f\u3001\u7279\u5fb4\u91cf\u304c\u6e96\u4e00\u69d8\u306a\u5206\u5e03\u3092\u3057\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u3001\u8a18\u9332\u3055\u308c\u305f\u4f4f\u5b85\u306e\u56fa\u6709\u306e\u8b58\u5225\u5b50\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u304f\u3001\u524d\u51e6\u7406\u3067\u9664\u53bb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002","82187f3a":"**4.3\u3000\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u524d\u51e6\u7406**","6de8f934":"Skewness\uff1a\u6b6a\u5ea6\u30020\u304c\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u3053\u3068\u3092\u793a\u3059\u3002\n0\u3088\u308a\u3082\u5927\u304d\u3044\u3068\u304d\u5de6\u5074\u306b\u504f\u308a\u3001\u5c0f\u3055\u3044\u3068\u304d\u306f\u53f3\u306b\u504f\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002","9f79c510":"\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u306f\uff0c80\u306e\u5909\u6570\u306b\u5bfe\u3059\u308b1460\u306e\u30aa\u30d6\u30b6\u30d9\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002\u5404\u5909\u6570\u306e\u8aac\u660e\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\nSalePrice - \u7269\u4ef6\u306e\u8ca9\u58f2\u4fa1\u683c\uff08\u30c9\u30eb\uff09\u3002\u3053\u308c\u306f\u3001\u4e88\u6e2c\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u3067\u3059\u3002\n\n* MSSubClass\u3002\u5efa\u7269\u306e\u30af\u30e9\u30b9\n* MSZoning\u3002\u4e00\u822c\u7684\u306a\u30be\u30fc\u30cb\u30f3\u30b0\u5206\u985e\n* LotFrontage \u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u9053\u8def\u306e\u76f4\u7dda\u30d5\u30a3\u30fc\u30c8\n* LotArea\uff1a\u6577\u5730\u9762\u7a4d\u3002\u6577\u5730\u9762\u7a4d\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\n* Street: \u9053\u8def\u30a2\u30af\u30bb\u30b9\u306e\u7a2e\u985e\n* Alley: \u8def\u5730\u306e\u7a2e\u985e\n* LotShape: \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u4e00\u822c\u7684\u306a\u5f62\u72b6\n* LandContour: Flatness of the property\uff08\u6577\u5730\u306e\u5e73\u5766\u6027\n* Utilities: \u5229\u7528\u53ef\u80fd\u306a\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u7a2e\u985e\n* LotConfig: \u571f\u5730\u306e\u69cb\u6210\n* LandSlope: \u50be\u659c\uff1a\u6577\u5730\u306e\u50be\u659c\n* Neighborhood\uff1a\u8fd1\u96a3\u5730\u57df\u3002\u30a8\u30a4\u30e0\u30ba\u5e02\u57df\u5185\u306e\u7269\u7406\u7684\u306a\u4f4d\u7f6e\n* \u6761\u4ef61: \u5e79\u7dda\u9053\u8def\u3084\u9244\u9053\u306b\u8fd1\u3044\u3053\u3068\n* \u6761\u4ef62: \u5e79\u7dda\u9053\u8def\u307e\u305f\u306f\u9244\u9053\u3078\u306e\u8fd1\u63a5\u6027\uff082\u3064\u76ee\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\n* BldgType: \u4f4f\u307e\u3044\u306e\u30bf\u30a4\u30d7\n* HouseStyle: \u4f4f\u307e\u3044\u306e\u30b9\u30bf\u30a4\u30eb\n* OverallQual\uff1a\u5168\u4f53\u7684\u306a\u7d20\u6750\u3084\u4ed5\u4e0a\u3052\u306e\u8cea \u5168\u4f53\u7684\u306a\u7d20\u6750\u3068\u4ed5\u4e0a\u3052\u306e\u54c1\u8cea\n* OverallCond: Overall Condition Rating\uff1a\u5168\u4f53\u7684\u306a\u72b6\u614b\u306e\u8a55\u4fa1\n* YearBuilt: YearBuilt\uff08\u5efa\u8a2d\u5e74\uff09\uff1a\u5f53\u521d\u306e\u5efa\u8a2d\u65e5\n* YearRemodAdd: \u6539\u9020\u6642\u671f\n* RoofStyle: \u5c4b\u6839\u306e\u7a2e\u985e\n* RoofMatl: \u5c4b\u6839\u306e\u6750\u8cea\n* Exterior1st: \u5916\u88c51st\uff1a\u4f4f\u5b85\u306e\u5916\u88c5\u30ab\u30d0\u30fc\n* Exterior2nd: \u5bb6\u306e\u5916\u58c1\uff08\u8907\u6570\u306e\u7d20\u6750\u304c\u3042\u308b\u5834\u5408\n* MasVnrType: \u30e1\u30a4\u30bd\u30f3\u30ea\u30fc\u30d9\u30cb\u30e4\u30bf\u30a4\u30d7\n* MasVnrArea: \u77f3\u7a4d\u307f\u30d9\u30cb\u30e4\u306e\u9762\u7a4d\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\n* ExterQual: \u30a8\u30af\u30b9\u30c6\u30ea\u30a2\u7d20\u6750\u306e\u54c1\u8cea\n* ExterCond: ExterCond: \u5916\u88c5\u6750\u306e\u73fe\u5728\u306e\u72b6\u614b\n* \u8ca1\u56e3 \u57fa\u790e\u306e\u7a2e\u985e\n* BsmtQual\uff1a\u5730\u4e0b\u5ba4\u306e\u9ad8\u3055\n* BsmtCond: BsmtCond\uff1a\u5730\u4e0b\u5ba4\u306e\u4e00\u822c\u7684\u306a\u72b6\u614b\n* BsmtExposure\uff1a\u30a6\u30a9\u30fc\u30af\u30a2\u30a6\u30c8\u307e\u305f\u306f\u30ac\u30fc\u30c7\u30f3\u30ec\u30d9\u30eb\u306e\u5730\u4e0b\u5ba4\u306e\u58c1\n* BsmtFinType1\u3002BsmtFinType1\uff1a\u5730\u4e0b\u5ba4\u306e\u4ed5\u4e0a\u3052\u30a8\u30ea\u30a2\u306e\u54c1\u8cea\n* BsmtFinSF1\u3002\u30bf\u30a4\u30d71\u306e\u4ed5\u4e0a\u3052\u9762\u7a4d\n* BsmtFinType2\u30022\u3064\u76ee\u306e\u4ed5\u4e0a\u3052\u9762\u7a4d\u306e\u8cea\uff08\u3042\u308b\u5834\u5408\n* BsmtFinSF2\uff1a\u30bf\u30a4\u30d72\u306e\u5b8c\u6210\u9762\u7a4d\n* BsmtUnfSF\uff1a\u5730\u4e0b\u306e\u672a\u5b8c\u6210\u30a8\u30ea\u30a2\u306e\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\n* TotalBsmtSF\uff1a\u5730\u4e0b\u5ba4\u30a8\u30ea\u30a2\u306e\u7dcf\u9762\u7a4d\n* \u6696\u623f \u6696\u623f\u306e\u7a2e\u985e\n* HeatingQC: HeatingQC\uff1a\u6696\u623f\u306e\u8cea\u3068\u72b6\u614b\n* CentralAir: \u30bb\u30f3\u30c8\u30e9\u30eb\u30fb\u30a8\u30a2\u30fb\u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30cb\u30f3\u30b0\n* Electrical\uff1a\u96fb\u6c17\u7cfb\u7d71\n* 1stFlrSF\uff1a1\u968e\u306e\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\n* 2ndFlrSF\uff1a2\u968e\u306e\u5e83\u3055\u30d5\u30a3\u30fc\u30c8\n* LowQualFinSF\uff1a\u4f4e\u54c1\u8cea\u4ed5\u4e0a\u3052\u306e\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\uff08\u5168\u30d5\u30ed\u30a2\n* GrLivArea: Above Grade (ground) living area\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\n* BsmtFullBath\uff1a\u5730\u4e0b\u5ba4\u306e\u30d5\u30eb\u30d0\u30b9\u3002BsmtFullBath\uff1a\u5730\u4e0b\u306e\u30d5\u30eb\u30d0\u30b9\u30eb\u30fc\u30e0\n* BsmtHalfBath\uff1a\u30d9\u30fc\u30b9\u30e1\u30f3\u30c8\u30cf\u30fc\u30d5\u30d0\u30b9\u30eb\u30fc\u30e0 \u30d9\u30fc\u30b9\u30e1\u30f3\u30c8\u30cf\u30fc\u30d5\u30d0\u30b9\u30eb\u30fc\u30e0\n* FullBath: \u968e\u5c64\u4e0a\u306e\u30d5\u30eb\u30d0\u30b9\u30eb\u30fc\u30e0\n* HalfBath: HalfBath: \u534a\u5206\u4ee5\u4e0a\u306e\u30d0\u30b9\u30eb\u30fc\u30e0\n* Bedroom \u5730\u4e0b1\u968e\u4ee5\u4e0a\u306e\u30d9\u30c3\u30c9\u30eb\u30fc\u30e0\u306e\u6570\n* \u30ad\u30c3\u30c1\u30f3 \u53f0\u6240\uff1a\u53f0\u6240\u306e\u6570\n* KitchenQual: KitchenQual: \u30ad\u30c3\u30c1\u30f3\u306e\u54c1\u8cea\n* TotRmsAbvGrd: \u968e\u6bb5\u3092\u4e0a\u3063\u305f\u90e8\u5c4b\u306e\u7dcf\u6570\uff08\u30d0\u30b9\u30eb\u30fc\u30e0\u306f\u542b\u307e\u306a\u3044\n* Functional\uff1a\u4f4f\u5b85\u306e\u6a5f\u80fd\u6027\u8a55\u4fa1 Fireplaces\uff1a\u6696\u7089\u306e\u6570 \u6696\u7089\uff1a\u6696\u7089\u306e\u6570\n* FireplaceQu: \u6696\u7089\u306e\u8cea\n* GarageType: \u30ac\u30ec\u30fc\u30b8\u306e\u5834\u6240\n* GarageYrBlt: \u30ac\u30ec\u30fc\u30b8\u304c\u5efa\u3066\u3089\u308c\u305f\u5e74\n* GarageFinish: \u30ac\u30ec\u30fc\u30b8\u306e\u5185\u88c5\u4ed5\u4e0a\u3052\n* GarageCars: \u30ac\u30ec\u30fc\u30b8\u306e\u30b5\u30a4\u30ba\uff08\u8eca\u306e\u5bb9\u91cf\n* GarageArea\uff1a\u30ac\u30ec\u30fc\u30b8\u306e\u9762\u7a4d GarageArea\uff1a\u30ac\u30ec\u30fc\u30b8\u306e\u9762\u7a4d\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\n* GarageQual\uff1a\u30ac\u30ec\u30fc\u30b8\u306e\u54c1\u8cea \u30ac\u30ec\u30fc\u30b8\u306e\u54c1\u8cea\n* GarageCond: \u8eca\u5eab\u306e\u72b6\u614b\n* PavedDrive: PavedDrive: \u8217\u88c5\u3055\u308c\u305f\u30c9\u30e9\u30a4\u30d6\u30a6\u30a7\u30a4\n* WoodDeckSF\uff1a\u30a6\u30c3\u30c9\u30c7\u30c3\u30ad\u306e\u9762\u7a4d\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\n* OpenPorchSF\uff1a\u30aa\u30fc\u30d7\u30f3\u30dd\u30fc\u30c1\u306e\u9762\u7a4d\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\n* EnclosedPorch: EnclosedPorch\uff1a\u9589\u3058\u3089\u308c\u305f\u30dd\u30fc\u30c1\u306e\u9762\u7a4d\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\n* 3SsnPorch: Three-season Porch\uff1a\u30b9\u30ea\u30fc\u30b7\u30fc\u30ba\u30f3\u30dd\u30fc\u30c1\u306e\u9762\u7a4d\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\n* ScreenPorch: ScreenPorch\uff1a\u30b9\u30af\u30ea\u30fc\u30f3\u30dd\u30fc\u30c1\u306e\u9762\u7a4d\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\n* PoolArea\uff1a\u30d7\u30fc\u30eb\u30a8\u30ea\u30a2 \u30d7\u30fc\u30eb\u30a8\u30ea\u30a2\uff1a\u30d7\u30fc\u30eb\u306e\u9762\u7a4d\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\n* PoolQC: \u30d7\u30fc\u30eb\u306e\u54c1\u8cea\n* Fence: Fence\uff1a\u30d5\u30a7\u30f3\u30b9\u306e\u54c1\u8cea\n* MiscFeature: \u4ed6\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306b\u542b\u307e\u308c\u306a\u3044\u96d1\u591a\u306a\u6a5f\u80fd\n* MiscVal: \u96d1\u591a\u306a\u6a5f\u80fd\u306e\u4fa1\u5024\n* MoSold: \u58f2\u308c\u305f\u6708\n* YrSold: \u58f2\u308c\u305f\u5e74\n* SaleType: \u8ca9\u58f2\u306e\u7a2e\u985e\n* SaleCondition: \u30bb\u30fc\u30eb\u306e\u6761\u4ef6","5e7ed7f6":"**6.6 SVR**","1e3d9f8a":"**6.4 Random Forest Regressor**","45b6872c":"* 0. \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u521d\u671f\u5316\n* 1. \u6b20\u640d\u5024\u306e\u53d6\u308a\u6271\u3044\n* 2. \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\n* 3. \u7279\u5fb4\u91cf\u5909\u63db\n* 4. \u30e9\u30d9\u30eb\u306e\u7b26\u53f7\u5316\n* 5. Feature Scaling\n* 6. \u7279\u5fb4\u91cf\u9078\u629e","7bbc4a28":"# 3. \u63a2\u7d22\u7684\u30c7\u30fc\u30bf\u5206\u6790(EDA)","cc5cd778":"# 1. \u554f\u984c\u306e\u8a2d\u5b9a","74e8900b":"# 2. \u30c7\u30fc\u30bf\u306e\u53d6\u5f97","1ebe80ff":"\u7a4d\u5c64\u56de\u5e30\u306f\uff0c\u8907\u6570\u306e\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u30e1\u30bf\u56de\u5e30\u5668\u3092\u4ecb\u3057\u3066\u7d50\u5408\u3059\u308b\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u624b\u6cd5\u3067\u3042\u308b\uff0e\u500b\u3005\u306e\u56de\u5e30\u30e2\u30c7\u30eb\u306f\uff0c\u5b8c\u5168\u306a\u5b66\u7fd2\u30bb\u30c3\u30c8\u306b\u57fa\u3065\u3044\u3066\u5b66\u7fd2\u3055\u308c\uff0c\u6b21\u306b\uff0c\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5185\u306e\u500b\u3005\u306e\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u51fa\u529b\uff08\u30e1\u30bf\u7279\u5fb4\uff09\u306b\u57fa\u3065\u3044\u3066\u30e1\u30bf\u56de\u5e30\u5668\u304c\u9069\u5408\u3055\u308c\u307e\u3059\uff0e\n\nStackingCVRegressor \u306f\uff0c\u6a19\u6e96\u7684\u306a\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff08StackingRegressor \u3068\u3057\u3066\u5b9f\u88c5\uff09\u3092\u62e1\u5f35\u3057\u305f\u3082\u306e\u3067\uff0c\u30a2\u30a6\u30c8\u30aa\u30d6\u30d5\u30a9\u30fc\u30eb\u30c9\u4e88\u6e2c\u3092\u7528\u3044\u3066\uff0c\u30ec\u30d9\u30eb2\u306e\u56de\u5e30\u5668\u306e\u5165\u529b\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3057\u307e\u3059\uff0e","3eeae350":"--------------------------------------------------------------------------------------------------------------------","449b1367":"**4.2 \u6b20\u640d\u5024**","a972d875":"\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\uff08\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3057\u3087\u308a\uff09\u3068\u306f\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u7b49\u306b\u304a\u3044\u3066\u3001\u51e6\u7406\u8981\u7d20\u3092\u76f4\u5217\u306b\u9023\u7d50\u3057\u3001\u3042\u308b\u8981\u7d20\u306e\u51fa\u529b\u304c\u6b21\u306e\u8981\u7d20\u306e\u5165\u529b\u3068\u306a\u308b\u3088\u3046\u306b\u3057\u3066\u3001\u4e26\u884c\uff08\u5fc5\u305a\u3057\u3082\u4e26\u5217\u3068\u306f\u9650\u3089\u306a\u3044\uff09\u306b\u51e6\u7406\u3055\u305b\u308b\u3068\u3044\u3046\u5229\u7528\u6280\u8853\u3067\u3042\u308b\u3002\u8981\u7d20\u9593\u306b\u306a\u3093\u3089\u304b\u306e\u30d0\u30c3\u30d5\u30a1\u3092\u7f6e\u304f\u3053\u3068\u304c\u591a\u3044\u3002","6f106730":"**5.1\u3000ML\u306e\u305f\u3081\u306e\u30c7\u30fc\u30bf\u6e96\u5099**","6a9103b9":"\u6211\u3005\u306e\u5206\u6790\u306b\u3088\u308b\u3068\u3001\u6b20\u6e2c\u5024\u306e\u5272\u5408\u304c\u591a\u3044\uff0815\uff05\u4ee5\u4e0a\uff09\u4e0a\u4f4d\u306e\u5909\u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n* PoolQC with 99.5%\n* MiscFeature with 96.30%\n* Alley with 93.77%\n* Fence with 80.75%\n* FireplaceQu with 47.26%\n* LotFrontage with 17.740%","2c56b816":"> \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6f5c\u5728\u7684\u306a\u554f\u984c\u3001\u30d1\u30bf\u30fc\u30f3\u3001\u5206\u985e\u3001\u76f8\u95a2\u3001\u6bd4\u8f03\u3092\u63a2\u3059\u305f\u3081\u306b\u3001\u8a18\u8ff0\u7d71\u8a08\u3084\u30b0\u30e9\u30d5\u7d71\u8a08\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\u307e\u305f\u3001\u6b63\u3057\u3044\u4eee\u8aac\u691c\u8a3c\u3084\u30c7\u30fc\u30bf\u30e2\u30c7\u30eb\u3092\u7406\u89e3\u3057\u3001\u9078\u629e\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u30c7\u30fc\u30bf\u306e\u5206\u985e\uff08\u8cea\u7684\u306a\u3082\u306e\u3068\u91cf\u7684\u306a\u3082\u306e\uff09\u3082\u91cd\u8981\u3067\u3059\u3002","e0626b78":"SalePrice\u6a5f\u80fd\u306e\u307f\u306b\u6ce8\u76ee\u3059\u308b\u3068\uff08\u4e0b\u6bb5\uff09\u3001OverallQual\u3001GrLivArea\u3001GarageCars\u306a\u3069\u306e\u69d8\u3005\u306a\u5909\u6570\u3068\u306e\u5f37\u3044\u76f8\u95a2\u304c\u898b\u3089\u308c\u307e\u3059\u3002\u3053\u308c\u30893\u3064\u306e\u5909\u6570\u306f\u3001\u4f4f\u5b85\u306e\u4fa1\u683c\u306b\u5f37\u304f\u5f71\u97ff\u3059\u308b\u3053\u3068\u304c\u76f4\u611f\u7684\u306b\u7406\u89e3\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u30d4\u30a2\u30bd\u30f3\u306e\u76f8\u95a2\u4fc2\u6570\u306f\u76f4\u7dda\u7684\u306a\u95a2\u4fc2\u3092\u62fe\u3063\u3066\u3044\u308b\u3060\u3051\u3067\u3001\u4ed6\u306e\u6a5f\u80fd\u3068\u5bfe\u8c61\u6a5f\u80fd\u306e\u9593\u306b\u306f\u3082\u3063\u3068\u8907\u96d1\u306a\u95a2\u4fc2\u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u3092\u5fd8\u308c\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002","97e6507a":"**6.7 \u30e2\u30c7\u30eb\u306e\u6027\u80fd\u8a55\u4fa1**","1b74aa94":"# 6 ML Hyper-Parameters\u306e\u5fae\u8abf\u6574","ead9a9f4":"**5.2 \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u7d50\u679c**","c54b0306":"\u3053\u306e\u6bb5\u968e\u3067\u306f\u3001\u4fdd\u5b58\u3068\u51e6\u7406\u306e\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u5b9f\u88c5\u3001\u54c1\u8cea\u3068\u7ba1\u7406\u306e\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30ac\u30d0\u30ca\u30f3\u30b9\u57fa\u6e96\u306e\u7b56\u5b9a\u3001\u30c7\u30fc\u30bf\u306e\u62bd\u51fa\uff08ETL\u3084\u30a6\u30a7\u30d6\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u306a\u3069\uff09\u3001\u7570\u5e38\u306a\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30c8\u3001\u6b20\u843d\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30c8\u3001\u7570\u5e38\u5024\u306e\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30c8\u3092\u7279\u5b9a\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\u306a\u3069\u304c\u542b\u307e\u308c\u3001\u3088\u304f\u30c7\u30fc\u30bf\u6574\u7406\u3068\u547c\u3070\u308c\u307e\u3059\u3002\n\n\u3053\u306e\u6bb5\u968e\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u65b9\u6cd5\u3067\u30c7\u30fc\u30bf\u3092\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\u3057\u307e\u3059\u3002\n\n* \u30c7\u30fc\u30bf\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\uff1a\u7570\u5e38\u5024\u3068\u6b20\u640d\u5024\u3002\n* \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u306e\u9078\u629e\u3002\n* \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3002\n* \u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3001\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u30fb\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0","8ef15763":"**3.1 \u7c21\u6613\u7684\u306aEDA**","12b7ddae":"**3.3 \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u7279\u5fb4\uff1aSalePrice**","6d8ce97f":"# **8\u3000\u63d0\u51fa\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\u7d42\u308f\u308a\u304a\u75b2\u308c\u69d8\uff01\uff01\uff01\uff01\uff01**","a5d1e4ba":"\u4e0a\u306e\u56f3\u304b\u3089\u308f\u304b\u308b\u3088\u3046\u306b\u3001\u5bfe\u6570\u5909\u63db\u3092\u884c\u3046\u3053\u3068\u3067\u3001\u5206\u5e03\u304c\u6b63\u898f\u5206\u5e03\u306b\u5927\u304d\u304f\u8fd1\u3065\u304d\u307e\u3057\u305f\u3002\u6b6a\u5ea6\u306e\u5024\u30820.121335\u3068\u30bc\u30ed\u306b\u8fd1\u3065\u3044\u3066\u3044\u307e\u3059\u3002","2fb2a036":"> RandomForestRegression\u30e2\u30c7\u30eb\u306b\u3088\u308b\u3001\u6700\u3082\u91cd\u8981\u306a\u6a5f\u80fd\u30c8\u30c3\u30d75\u306e\u8a55\u4fa1\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002"}}