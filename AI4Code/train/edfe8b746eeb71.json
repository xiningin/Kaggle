{"cell_type":{"36dbaac0":"code","d5f0e5ea":"code","1e988c67":"code","3f8a6f50":"code","23989869":"code","d02a7808":"code","93aa6d99":"code","d2eb1352":"code","0560d09d":"code","85e366c3":"code","d81ad2ec":"code","7c70dbf2":"code","a90bc1e5":"code","53d7890e":"code","f5514f8d":"code","5a069976":"code","55f7cc4d":"code","85930cab":"code","8fc76c69":"code","3f63c429":"code","65166a80":"code","cff23d18":"code","5510654d":"code","b95f2af2":"code","18e0a0db":"markdown","d7464beb":"markdown","47123f96":"markdown","f3f433cf":"markdown"},"source":{"36dbaac0":"import numpy as np\nimport pandas as pd\n\ntrain_data_path = '\/kaggle\/input\/home-data-for-ml-course\/train.csv'\nhome_data = pd.read_csv(train_data_path)\nhome_data.describe()","d5f0e5ea":"corr_matrix = home_data.corr()\ncorr_matrix[\"SalePrice\"].sort_values(ascending=False)","1e988c67":"home_data = home_data.drop(['MSSubClass','OverallCond','YrSold','LowQualFinSF','Id','MiscVal','BsmtHalfBath','BsmtFinSF2','3SsnPorch','MoSold','PoolArea'],axis=1)","3f8a6f50":"from sklearn.model_selection import train_test_split\n\ntrain_set, test_set = train_test_split(home_data, test_size=0.2, random_state=42)","23989869":"#train_X, train_y\ntrain_X = train_set.drop(\"SalePrice\", axis=1)\ntrain_y = train_set[\"SalePrice\"].copy()\n#test_X, test_y\ntest_X = train_set.drop(\"SalePrice\", axis=1)\ntest_y = train_set[\"SalePrice\"].copy()","d02a7808":"def get_numeric(data):\n    num = [key for key in dict(data.dtypes)\n                   if dict(data.dtypes)[key]\n                       in ['float64','float32','int32','int64']]\n    return data[num]","93aa6d99":"train_X_num = get_numeric(train_X)\ntrain_X_num.head()","d2eb1352":"def get_cat(data):\n    cat = [key for key in dict(data.dtypes)\n             if dict(data.dtypes)[key] in ['object']]\n    return data[cat]","0560d09d":"train_X_cat = get_cat(train_X)\ntrain_X_cat.head()","85e366c3":"#pipeline for numerical values\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nnum_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy='median')),\n    ('std_scaler', StandardScaler()),\n])\nhousing_prepared = num_pipeline.fit_transform(train_X_num)\nhousing_labels = train_y","d81ad2ec":"# #num\/cat fullpipeline\n# from sklearn.preprocessing import OrdinalEncoder\n# from sklearn.compose import ColumnTransformer\n\n# full_pipeline = ColumnTransformer([\n#     ('num', num_pipeline, numeric_var),\n#     ('cat_imputer', SimpleImputer(),)\n#     ('cat', OrdinalEncoder(), cat_var),\n# ])\n# housing_prepared = full_pipeline.fit_transform(train_X)","7c70dbf2":"from sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor(random_state=1)\nmodel.fit(housing_prepared, housing_labels)","a90bc1e5":"from sklearn.metrics import mean_absolute_error\n\npreds = model.predict(housing_prepared)\nmae = mean_absolute_error(preds, housing_labels)\nmae\n","53d7890e":"from sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(model, housing_prepared, housing_labels, cv=10, scoring='neg_mean_absolute_error')","f5514f8d":"def display_scores(scores):\n    print(\"scores:\", scores)\n    print(\"mean:\", scores.mean())\n    print(\"standard deviation:\",scores.std())\ndisplay_scores(-scores)","5a069976":"# from sklearn.model_selection import GridSearchCV\n\n# param_grid = [\n#     {'n_estimators':[3, 10, 30,100], 'max_features': [2,4,6,8,16,26], 'max_leaf_nodes': [5,10,50,100]},\n# ]\n# model = RandomForestRegressor(random_state=1)\n# grid_search = GridSearchCV(model, param_grid, cv=10,\n#                           scoring='neg_mean_absolute_error',\n#                           return_train_score=True)\n# grid_search.fit(housing_prepared, housing_labels)","55f7cc4d":"# grid_search.best_params_","85930cab":"# cvres = grid_search.cv_results_\n# for mean_score, params in zip(cvres['mean_test_score'],cvres['params']):\n#     print(-mean_score, params)","8fc76c69":"from sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint\n\nparam_distribs = {\n        'n_estimators': randint(low=1, high=200),\n        'max_features': randint(low=1, high=26),\n        'max_leaf_nodes': randint(low=1, high=500),\n    }\n\nforest_reg = RandomForestRegressor(random_state=42)\nrnd_search = RandomizedSearchCV(forest_reg, param_distributions=param_distribs,\n                                n_iter=50, cv=10, scoring='neg_mean_absolute_error', random_state=42)\nrnd_search.fit(housing_prepared, housing_labels)","3f63c429":"rnd_search.best_params_","65166a80":"cvres = rnd_search.cv_results_\nfor mean_score, params in zip(cvres['mean_test_score'],cvres['params']):\n    print(-mean_score, params)","cff23d18":"test_data_path = '\/kaggle\/input\/home-data-for-ml-course\/test.csv'\n\nfull_test_data = pd.read_csv(test_data_path)\nnum_test_data = full_test_data[train_X_num.columns]\n","5510654d":"final_model = rnd_search.best_estimator_\n\nhousing_test = num_pipeline.transform(num_test_data)\nfinal_predictions = final_model.predict(housing_test)\nfinal_predictions\n\n\n","b95f2af2":"output = pd.DataFrame({'Id': full_test_data.Id,\n                      'SalePrice': final_predictions})\noutput.to_csv('submission.csv', index=False)","18e0a0db":"### Cross validation","d7464beb":"### Applying on test set ","47123f96":"### GridSrearchCV\/RandomizedSearchCV","f3f433cf":"### Select and train model"}}