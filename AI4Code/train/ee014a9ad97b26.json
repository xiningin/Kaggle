{"cell_type":{"4383097b":"code","454442a9":"code","008184d1":"code","31b42f4a":"code","51818b73":"code","7b868fea":"code","d46a4510":"code","423dfdb7":"code","02cb50d1":"code","4ce777bd":"code","f2dcf954":"code","221f24ad":"code","fcb888d3":"code","2f6ad187":"code","f76aed21":"code","7d008ddc":"code","82282ce2":"code","c1748710":"code","c7711eb6":"code","891db7e1":"code","837621bc":"markdown","b625d472":"markdown","0f8849fc":"markdown","66f757c9":"markdown","e6b86d50":"markdown","8239a5a2":"markdown","f6a6f5d5":"markdown","9e557b59":"markdown","bdfd83a5":"markdown","e9c68995":"markdown","643b75b9":"markdown","aef0a6c4":"markdown","436f03b4":"markdown","2451ff0a":"markdown","89fadf69":"markdown","57637d89":"markdown"},"source":{"4383097b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import FormatStrFormatter\nimport seaborn as sn\nfrom matplotlib import cm\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score,mean_squared_error\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\n# Only necessary in Jupyter notebook\n%matplotlib inline","454442a9":"\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","008184d1":"calendar = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv\")\nsell_prices = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv\")\nsales_train_validation = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv\")","31b42f4a":"calendar[\"event_type_1_snap\"] = pd.notna(calendar[\"event_type_1\"]) \ncalendar[\"event_type_2_snap\"] = pd.notna(calendar[\"event_type_2\"]) \ncalendar[\"date\"] =  pd.to_datetime(calendar[\"date\"])\ncalendar[\"d_month\"] = calendar[\"date\"].dt.day\ncalendar[\"year\"] = pd.to_numeric(calendar[\"year\"])\ncalendar[\"wday\"] = pd.to_numeric(calendar[\"wday\"])\nprint(calendar.shape)\ncalendar.head()","51818b73":"print(sell_prices.shape)\nsell_prices.head()","7b868fea":"print(sales_train_validation.shape)\nsales_train_validation.head()","d46a4510":"calendar_snap_byWday = calendar.groupby(['year','wday','weekday'])[(\"snap_CA\",\"snap_TX\",\"snap_WI\")].sum().sort_index(1)\nfig, ax = plt.subplots()\ncalendar_snap_byEvent = calendar.groupby([\"year\",\"event_type_1_snap\"])[(\"snap_CA\",\"snap_TX\",\"snap_WI\")].sum().unstack().plot(ax=ax)","423dfdb7":"sales_data = pd.merge(sell_prices, calendar[[\"year\",\"month\",\"d\",\"wday\",\"weekday\",\"event_type_1_snap\",\"event_type_2_snap\",\"wm_yr_wk\"]], left_on='wm_yr_wk', right_on='wm_yr_wk')\nax = plt.gca()\nax.yaxis.set_major_formatter(FormatStrFormatter('$%.2f M'))\nsales_data[[\"year\",\"sell_price\"]].groupby([\"year\"]).mean().unstack().plot(kind='bar',stacked=True,ax=ax)\nplt.show()","02cb50d1":"clus20 = sales_train_validation.iloc[:,2:]\ndata = clus20.groupby(\"state_id\").sum()\ndata\nx = sn.heatmap(data)","4ce777bd":"clus20 = sales_train_validation.iloc[:,2:]\ndata = clus20.groupby(\"cat_id\").sum()\ndata\nx = sn.heatmap(data)","f2dcf954":"#Data Prepartions & removing tempoprary objects from memory \n\ncolumn_index = [1,2,3,4,5]\nfor i in range(6 , len(sales_train_validation.columns)):\n    column_index.append(i)\n\nclus_hobbies = sales_train_validation.iloc[:,column_index].query(\"cat_id == 'HOBBIES'\")\nclus_household = sales_train_validation.iloc[:,column_index].query(\"cat_id == 'HOUSEHOLD'\")\nclus_foods = sales_train_validation.iloc[:,column_index].query(\"cat_id == 'FOODS'\")\nclus_ca = sales_train_validation.iloc[:,column_index].query(\"state_id == 'CA'\")\nclus_tx = sales_train_validation.iloc[:,column_index].query(\"state_id == 'TX'\")\nclus_wi = sales_train_validation.iloc[:,column_index].query(\"state_id == 'WI'\")\nclus = sales_train_validation.iloc[:,column_index]\n","221f24ad":"#Bucket columns by calander days of month\nfrom datetime import datetime\ncolumnsets = []\nfor i in range(1,32):      \n    d = calendar[:1913].query(\"d_month == \"+ str(i))[\"d\"]\n    columnsets.append([d.values])","fcb888d3":"# Label encoding for catagorical data\ndef label_encoding(data_preap,cat_features):\n    categorical_names = {}\n    data = []\n    encoders = []\n    \n    data = data_preap[:]\n    for feature in cat_features:\n        le = sklearn.preprocessing.LabelEncoder()\n        le.fit(data.iloc[:,feature])\n        data.iloc[:, feature] = le.transform(data.iloc[:, feature])\n        categorical_names[feature] = le.classes_\n        encoders.append(le)\n    X_data = data.astype(float)\n    return X_data, encoders\n\n","2f6ad187":"# Training random forest model\ndef train_model(X_train, X_test, Y_train, Y_test):\n    # Random forest regressor model with Training dataset\n    start_time = datetime.today()\n    regressor = RandomForestRegressor(n_estimators = 350, random_state = 50)\n    regressor.fit(X_train,Y_train)\n\n    print(\"Time taken to Train Model: \" + str(datetime.today() - start_time))\n\n    # Running Regession model score check\n    Y_score = regressor.score(X_test,Y_test)\n    return regressor,Y_score","f76aed21":"# Predict function from model\ndef model_prediect(regressor,X_data):\n    # Predicting model model result\n    Y_pred = regressor.predict(X_data)\n    return Y_pred","7d008ddc":"# Validating model with last year data & generating rmse value for the model predection\ndef validate_model(regressor,X_validation, Y_validation):\n   \n    Y_validation_pred = model_prediect(regressor, X_validation)\n    mse = mean_squared_error(Y_validation, Y_validation_pred)\n    rmse = np.sqrt(mse)\n    return rmse, Y_validation_pred","82282ce2":" # Basic function for geting data from pandas based on range\ndef get_data_range(Inital_Range,start_index,end_index):\n    result = []\n    [result.append(a) for a in Inital_Range]\n    for i in range(max(Inital_Range) +1 + start_index, end_index):\n        result.append(i)\n    return result","c1748710":" # main function to run predictions\ndef run_predictions(orig_data):\n    process_data = orig_data[:]\n    results = pd.DataFrame()\n    for s in range(1,29):\n        categorical_features = [0,1]\n        data = []\n        data_range = []\n        for i in range(0,s):\n            [data_range.append(a) for a in columnsets[i]]\n        data_list = [process_data[a] for a in data_range]\n        data  = pd.concat(data_list,axis = 1)\n\n\n        data.insert(loc=0, column='item_id', value=process_data[\"item_id\"])\n        data.insert(loc=1, column='store_id', value=process_data[\"store_id\"])\n        X_data_preap = data[:]\n\n        d = get_data_range(categorical_features,0,len(X_data_preap.columns)-1)   \n        X,label_encoders = label_encoding(X_data_preap.iloc[:,d],categorical_features)\n        Y = X.iloc[:,-1]\n\n        d_validation = get_data_range(categorical_features,1,len(X_data_preap.columns))   \n        X_validation,label_encoders_validation = label_encoding(X_data_preap.iloc[:,d_validation],categorical_features)\n        Y_validation = X_validation.iloc[:,-1]\n\n        print(\"Running Model for Day \" + str(s))\n        # Sampling data for train & split\n        X_train, X_test, Y_train, Y_test = train_test_split(X.iloc[:,0:len(X.columns)-1],Y,test_size = 0.2, random_state = 0)\n        model, score = train_model(X_train, X_test, Y_train, Y_test)\n        print(\"Model Score: \" + str(score))\n        \n       # Uncomment for inital model\n        rmse,validation_predictions = validate_model(model,X_validation.iloc[:,0:len(X_validation.columns)-1], Y_validation)\n        print(\"RMSE Result: \" + str(rmse))\n        \n        if (len(results.columns) == 0):\n            for feature in categorical_features:\n                results[feature] = label_encoders_validation[feature].inverse_transform(X_validation.iloc[:,feature].astype(int))\n\n        results[\"d_\" + str(s)] = validation_predictions.astype(int)\n        print(results)\n        results.to_csv('pd_predictions_' + str(s) +'.csv')\n    return results","c7711eb6":"# Calling Predic function for 28 days of month\n# Uncomment to run predictions \n#pd_predictions = run_predictions(clus)","891db7e1":"#Display first few recods of the predictions\n#pd_predictions.head()","837621bc":"**3. Data Summary**","b625d472":"**2. Read dataset**","0f8849fc":"**1. Import Packages**","66f757c9":"**5. Feature Selection & Modeling**","e6b86d50":"The Makridakis Open Forecasting Center (MOFC) at the University of Nicosia conducts cutting-edge forecasting research and provides business forecast training. It helps companies achieve accurate predictions, estimate the levels of uncertainty, avoiding costly mistakes, and apply best forecasting practices. The MOFC is well known for its Makridakis Competitions, the first of which ran in the 1980s.","8239a5a2":"4.1 Calendar Dataset","f6a6f5d5":"**4. Data Exploration**","9e557b59":"# About Data ","bdfd83a5":"4.2 Sell Prices Dataset","e9c68995":"# Introduction","643b75b9":"4.3 Sales Train Validation Dataset","aef0a6c4":"**Data Files:** \n* calendar.csv - Contains information about the dates on which the products are sold.\n* sales_train_validation.csv - Contains the historical daily unit sales data per product and store [d_1 - d_1913]\n* sample_submission.csv - The correct format for submissions.\n* sell_prices.csv - Contains information about the price of the products sold per store and date.\n* sales_train_evaluation.csv - Available once month before competition deadline. Will include sales [d_1 - d_1941]\n","436f03b4":"**Will use hierarchical sales data from Walmart, the world\u2019s largest company by revenue, to forecast daily sales for the next 28 days.\n**","2451ff0a":"# Index\n1. Import packages\n2. Read dataset \n3. Data Summary\n4. Data Exploration\n5. Feature Selection & Modeling\n6. Validation","89fadf69":"The data, covers stores in three US States (California, Texas, and Wisconsin) and includes item level, department, product categories, and store details. In addition, it has explanatory variables such as price, promotions, day of the week, and special events. Together, this robust dataset can be used to improve forecasting accuracy. In the challenge, we are predicting item sales at stores in various locations for two 28-day time periods. Information about the data is found in the https:\/\/mofc.unic.ac.cy\/m5-competition\/\n","57637d89":"# Problem Statement"}}