{"cell_type":{"11952456":"code","b581c14b":"code","cb16e2f7":"code","d2c10f18":"code","0e9a4c00":"code","352f98ef":"code","73b7e2c3":"code","75759c69":"code","e0c178f7":"code","61ddeef5":"code","8c7dc424":"code","b048f3c4":"code","bb89ed2f":"code","0b28f3fa":"code","afe77d7b":"code","e94ca75d":"code","9ba326d7":"code","c8d09058":"code","60737ee2":"code","28e358e8":"code","9ed43836":"code","f008a4f1":"code","589278c0":"code","2ac31fd0":"code","576e9c7b":"code","2ae63fe5":"code","57d62931":"code","43592b78":"code","c9b8a28e":"code","31e410a7":"code","00fef4fb":"code","ce120901":"code","7a878844":"code","fa3aa7c5":"markdown","7818dff2":"markdown","08873562":"markdown","194aecea":"markdown"},"source":{"11952456":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b581c14b":"#import csv file(data)\ndata = pd.read_csv('\/kaggle\/input\/tv-shows-on-netflix-prime-video-hulu-and-disney\/tv_shows.csv')","cb16e2f7":"#informaion regarding the data\ndata.info()","d2c10f18":"#shape of the Dataset\ndata.shape","0e9a4c00":"#first 5 rows of the dataset\ndata.head()","352f98ef":"#Last 5 rows of the dataset\ndata.tail()","73b7e2c3":"#dimension of the object\ndata.ndim","75759c69":"#size of the object\ndata.size","e0c178f7":"#columns\/ features of the dataset\ndata.axes","61ddeef5":"#columns\/ features of the dataset\ndata.columns","8c7dc424":"#Datatypes of all the columns\ndata.dtypes","b048f3c4":"#checking the emptyiness of the datset\ndata.empty","bb89ed2f":"#Technique to convert DataFrame to Numpy array\ndt = data.values\ndt[0]","0b28f3fa":"type(dt)","afe77d7b":"print('Tv shows on Netflix:',data['Netflix'].sum(),'\/',data['Netflix'].count())\nprint('Tv shows on Hulu:',data['Hulu'].sum(),'\/',data['Hulu'].count())\nprint('Tv shows on Prime Video:',data['Prime Video'].sum(),'\/',data['Prime Video'].count())\nprint('Tv shows on Disney+:',data['Disney+'].sum(),'\/',data['Disney+'].count())","e94ca75d":"#describe the dataset with some basic functionality\ndata.describe(include='all')","9ba326d7":"#top 50 IMDb rated Tv shows\nplt.subplots(figsize=(10,20))\nsns.barplot(x=\"IMDb\", y=\"Title\" , data= data.sort_values(\"IMDb\",ascending=False).head(50))","c8d09058":"data.plot.scatter(x='IMDb', y='Year')","60737ee2":"#quantity of shows on various platforms present in the dataset\nlabels = 'Netflix' , 'Hulu', 'Prime Video', 'Disney+'\nsizes = [data['Netflix'].sum(),data['Hulu'].sum(),data['Prime Video'].sum(),data['Disney+'].sum()]\nexplode = (0.1, 0.1, 0.5, 0.1 )\n\nfig1 , ax1 = plt.subplots()\n\nax1.pie(sizes,\n        explode = explode,\n        labels = labels,\n        autopct = '%1.1f%%',\n        shadow = True,\n        startangle = 100)\n\nax1.axis ('equal')\nplt.show()","28e358e8":"netflix_shows = data.loc[data['Netflix'] == 1]\nhulu_shows = data.loc[data['Hulu'] == 1]\nprime_video_shows = data.loc[data['Prime Video'] == 1]\ndisney_shows = data.loc[data['Disney+'] == 1]","9ed43836":"#list of top shows on netflix\nnetflix_top_shows = netflix_shows.loc[netflix_shows['IMDb']>8.0]\nhulu_top_shows = hulu_shows.loc[hulu_shows['IMDb']>8.0]\nprime_video_top_shows = prime_video_shows.loc[prime_video_shows['IMDb']>8.0]\ndisney_top_shows = disney_shows.loc[disney_shows['IMDb']>8.0]","f008a4f1":"#lets plot a bar graph of platforms with highest IMDb shows\nplatform = ['Netflix', 'Hulu', 'Prime Video', 'Disney+']\ncount = [netflix_top_shows['IMDb'].sum(),hulu_top_shows['IMDb'].sum(),prime_video_top_shows['IMDb'].sum(),disney_top_shows['IMDb'].sum()]","589278c0":"fig = plt.figure()\nax = fig.add_axes([1,1,1,1])\nax.bar(platform,count)\nplt.show()","2ac31fd0":"\n#Platform with most shows rated above 8+ (IMDB)\nplt.figure(figsize = (15, 10))\nsns.barplot(\n           x = platform,\n           y = count\n)\nplt.xlabel('Platform')\nplt.ylabel('Total number of showsrated above 8')\nplt.title('Platform with most shows rated above 8+ (IMDB)')\nplt.show()\n","576e9c7b":"#lets plot a bar graph of years with highest IMDb shows\ntop1990_shows = data.loc[(data['IMDb'] >= 8.0) & (data['Year']<= 1990)]\ntop2000_shows = data.loc[(data['IMDb']>=8.0) & (data['Year']>1990) & (data['Year']<=2000)]\ntop2010_shows = data.loc[(data['IMDb']>=8.0) & (data['Year']>2000)&(data['Year']<=2010)]\ntop2020_shows = data.loc[(data['IMDb']>=8.0) & (data['Year']>2010)&(data['Year']<=2020)]\nyears = ['< 1990', '1990 - 2000', '2001-2010', '2011-2020']\ncounts = [top1990_shows['IMDb'].sum(),top2000_shows['IMDb'].sum(),top2010_shows['IMDb'].sum(),top2010_shows['IMDb'].sum()]\n\nplt.figure(figsize = (15, 10))\nsns.barplot(\n           x = years,\n           y = counts\n)\nplt.xlabel('Years')\nplt.ylabel('Total number of showsrated above 8')\nplt.title('Years with most shows rated above 8+ (IMDB)')\nplt.show()","2ae63fe5":"all_rated = data.loc[data['Age']=='all']\n_16_rated = data.loc[data['Age']=='16+']\n_18_rated = data.loc[data['Age']=='18+']","57d62931":"print(len(all_rated))\nprint(len(_16_rated))\nprint(len(_18_rated))\n","43592b78":"\nage = ['Shows for all', '16+', '18+']\ncounts = [len(all_rated),len(_16_rated),len(_18_rated)]\n\nplt.figure(figsize = (15, 10))\nsns.barplot(\n           x = age,\n           y = counts\n)\nplt.xlabel('Age')\nplt.ylabel('Count of Tv Shows under age restrcition')\nplt.title('Age restriction')\nplt.show()","c9b8a28e":"# movie with IMDb 8+ which are for all age groups\nall_rated_high_rate = all_rated.loc[all_rated['IMDb']>=8.0]\nrated_16_high_rate = _16_rated.loc[_16_rated['IMDb']>=8.0]\nrated_18_high_rate = _18_rated.loc[_18_rated['IMDb']>=8.0]","31e410a7":"#Top IMDb rated Shows analysed on basis of age group\nage = ['Shows for all', '16+', '18+']\ncounts = [len(all_rated_high_rate),len(rated_16_high_rate),len(rated_18_high_rate)]\n\nplt.figure(figsize = (15, 10))\nsns.barplot(\n           x = age,\n           y = counts\n)\nplt.xlabel('Age Group')\nplt.ylabel('Count')\nplt.title('Top IMDb rated shows analysed on basis of age group')\nplt.show()","00fef4fb":"#Must watch shows\nmust_watch = data.loc[data['IMDb']>9.0]","ce120901":"must_watch['Title']","7a878844":"#Top 5 Must watch Shows\na = data.sort_values(\"IMDb\",ascending=False).head(5)\na['Title']","fa3aa7c5":"# **DATASET ANALYSIS**","7818dff2":"SHAPE OF THE DATATSET","08873562":" **TOP 5 SHOWS TO WATCH**","194aecea":"# **STARTING ANALYSIS OF DATA**"}}