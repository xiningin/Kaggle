{"cell_type":{"e580ec10":"code","8d52d609":"code","888b9448":"code","b7c09f71":"code","ee326ee6":"code","9947a322":"code","39d2282e":"code","0f81dbe1":"code","8e4baa89":"code","6aec8c4a":"code","67d40915":"code","8d542575":"code","6746dd30":"code","ab3a527f":"code","7807da5e":"code","0ff42e20":"code","36cbda34":"code","fb70ac58":"code","c37b3fde":"code","8ed6fb11":"code","27794913":"code","027af36a":"code","42c7a613":"code","cb93819f":"code","14a38e0b":"code","25911d56":"code","eed120ac":"code","91752f78":"code","45acb213":"code","d8146bb2":"code","57788d53":"code","9da82dae":"code","0d7a3f7a":"code","9c645235":"code","a8bd29b4":"code","e6adda3b":"code","8af91160":"code","632fa569":"code","cd42d51b":"code","3baf402d":"code","1fcbe703":"code","3fa06d61":"code","5c121fa7":"code","ce0b186b":"code","4693898b":"code","2931733a":"code","6dce4b94":"code","2c449f06":"code","5bd68c6b":"code","3640a7b3":"code","b7dc8c02":"code","b5dad5df":"code","940a415e":"code","64d06203":"code","302aebcb":"code","9e6204c1":"code","a0188106":"code","2a5ffe33":"markdown","d26765eb":"markdown","2e528eeb":"markdown","5588fb5d":"markdown","f2f35b15":"markdown","b11cabd6":"markdown","26ec06ce":"markdown","fbc578c5":"markdown","76beb546":"markdown","d38cf522":"markdown","0a3249de":"markdown","fe435dfd":"markdown","be9d291e":"markdown","e892a7f1":"markdown","57e09d17":"markdown","e4b1761e":"markdown","a950f95d":"markdown","92985df9":"markdown","1aedbfef":"markdown","a789241f":"markdown","5fd04579":"markdown","abe37d23":"markdown","334b1bf8":"markdown","c1fe4450":"markdown","fdfa304e":"markdown","3ecd28ad":"markdown","a366bc48":"markdown","37ec3836":"markdown","dc3c3720":"markdown"},"source":{"e580ec10":"import os\nimport torch\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\nimport torchvision.transforms as transforms\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\n%matplotlib inline","8d52d609":"DATA_DIR = '..\/input\/jovian-pytorch-z2g\/Human protein atlas'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           # Contains training images\nTEST_DIR = DATA_DIR + '\/test'                             # Contains test images\n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       # Contains real labels for training images\nTEST_CSV = '..\/input\/jovian-pytorch-z2g\/submission.csv'   # Contains dummy labels for test image","888b9448":"!head \"{TRAIN_CSV}\"","b7c09f71":"!head \"{TEST_CSV}\"","ee326ee6":"!ls \"{TRAIN_DIR}\" | head","9947a322":"train_df = pd.read_csv(TRAIN_CSV)\ntrain_df.head()","39d2282e":"labels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n}","0f81dbe1":"def encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\ndef decode_target(target, text_labels=False, threshold=0.5):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)\n    ","8e4baa89":"encode_label('2 4 5')","6aec8c4a":"decode_target(torch.tensor([0, 0, 1, 0, 1, 1, 0, 0, 0, 0.]))","67d40915":"decode_target(torch.tensor([0, 0, 1, 0, 1, 1, 0, 0, 0, 0.]), text_labels=True)","8d542575":"class HumanProteinDataset(Dataset):\n    def __init__(self, csv_file, root_dir, transform=None):\n        self.df = pd.read_csv(csv_file)\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['Image'], row['Label']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".png\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)","6746dd30":"transform = transforms.Compose([transforms.ToTensor()])\ndataset = HumanProteinDataset(TRAIN_CSV, TRAIN_DIR, transform=transform)","ab3a527f":"len(dataset)","7807da5e":"def show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))\n    ","0ff42e20":"show_sample(*dataset[0], invert=False)","36cbda34":"show_sample(*dataset[0])","fb70ac58":"torch.manual_seed(10)","c37b3fde":"val_pct = 0.1\nval_size = int(val_pct * len(dataset))\ntrain_size = len(dataset) - val_size","8ed6fb11":"train_ds, val_ds = random_split(dataset, [train_size, val_size])\nlen(train_ds), len(val_ds)","27794913":"batch_size = 64","027af36a":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=2, pin_memory=True)","42c7a613":"def show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))\n        break","cb93819f":"show_batch(train_dl)","14a38e0b":"def F_score(output, label, threshold=0.5, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)","25911d56":"class MultilabelImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)                      \n        loss = F.binary_cross_entropy(out, targets)      \n        return loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images)                           # Generate predictions\n        loss = F.binary_cross_entropy(out, targets)  # Calculate loss\n        score = F_score(out, targets)\n        return {'val_loss': loss.detach(), 'val_score': score.detach() }\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_scores = [x['val_score'] for x in outputs]\n        epoch_score = torch.stack(batch_scores).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_score': epoch_score.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_score: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_score']))","eed120ac":"class ProteinCnnModel(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n\n            nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n\n            nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.AdaptiveAvgPool2d(1),\n            \n            nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.AdaptiveAvgPool2d(1),\n\n            nn.Flatten(), \n            nn.Linear(512, 256),\n            nn.ReLU(),\n            nn.Linear(256, 128),\n            nn.ReLU(),\n            nn.Linear(128, 64),\n            nn.ReLU(),\n            nn.Linear(64, 10),\n            nn.Sigmoid()\n        )\n        \n    def forward(self, xb):\n        return self.network(xb)","91752f78":"class ProteinCnnModel2(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet34(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))","45acb213":"model = ProteinCnnModel2()\nmodel","d8146bb2":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","57788d53":"device = get_default_device()\ndevice","9da82dae":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device);","0d7a3f7a":"def try_batch(dl):\n    for images, labels in dl:\n        print('images.shape:', images.shape)\n        out = model(images)\n        print('out.shape:', out.shape)\n        print('out[0]:', out[0])\n        break\n\ntry_batch(train_dl)","9c645235":"from tqdm.notebook import tqdm","a8bd29b4":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","e6adda3b":"model = to_device(ProteinCnnModel2(), device)","8af91160":"evaluate(model, val_dl)","632fa569":"num_epochs = 5\nopt_func = torch.optim.Adam\nlr = 1e-3","cd42d51b":"history = fit(num_epochs, lr, model, train_dl, val_dl, opt_func)","3baf402d":"history += fit(num_epochs, 1e-4 , model, train_dl, val_dl, opt_func)","1fcbe703":"history += fit(1 , 1e-5 , model, train_dl, val_dl, opt_func)","3fa06d61":"history += fit(1 , 1e-5 , model, train_dl, val_dl, opt_func)","5c121fa7":"history += fit(num_epochs, 1e-5 , model, train_dl, val_dl, opt_func)","ce0b186b":"def predict_single(image):\n    xb = image.unsqueeze(0)\n    xb = to_device(xb, device)\n    preds = model(xb)\n    prediction = preds[0]\n    print(\"Prediction: \", prediction)\n    show_sample(image, prediction)","4693898b":"test_dataset = HumanProteinDataset(TEST_CSV, TEST_DIR, transform=transform)","2931733a":"img, target = test_dataset[0]\nimg.shape","6dce4b94":"predict_single(test_dataset[100][0])","2c449f06":"predict_single(test_dataset[74][0])","5bd68c6b":"test_dl = DeviceDataLoader(DataLoader(test_dataset, batch_size, num_workers=2, pin_memory=True), device)","3640a7b3":"@torch.no_grad()\ndef predict_dl(dl, model):\n    torch.cuda.empty_cache()\n    batch_probs = []\n    for xb, _ in tqdm(dl):\n        probs = model(xb)\n        batch_probs.append(probs.cpu().detach())\n    batch_probs = torch.cat(batch_probs)\n    return [decode_target(x) for x in batch_probs]","b7dc8c02":"test_preds = predict_dl(test_dl, model)","b5dad5df":"submission_df = pd.read_csv(TEST_CSV)\nsubmission_df.Label = test_preds\nsubmission_df.head()","940a415e":"sub_fname = 'submission_resnet34_nival1.csv'","64d06203":"submission_df.to_csv(sub_fname, index=False)","302aebcb":"!pip install jovian --upgrade","9e6204c1":"import jovian","a0188106":"jovian.commit(project='zerogans-protein-competition_Nival')","2a5ffe33":"## Creating Datasets & Data Loaders\n\nWe can now create a custom dataset by extending the `Dataset` class from PyTorch. We need to define the `__len__` and `__getitem__` methods to create a dataset. We'll also provide the option of adding transforms into the constructor.","d26765eb":"### Data Loaders","2e528eeb":"I'm using a validation percentage of 10%, but you can use a smaller or larger percentage. One good strategy is to determine a good set of hyperparameters, and then retrain on a smaller validation set for your final submission.","5588fb5d":"Next, let's create a test dataset using the `submission.csv` file. Note that the file contains dummy labels (always `'0'`). We'll use the same transforms we used for the training set.","f2f35b15":"### Training & Validation sets\n\nAs a good practice, we should split the data into training and validation datasets. Let's fix a seed for PyTorch (to ensure we always get the same validation set), and create the datasets using `random_split`.","b11cabd6":"## Save to Jovian","26ec06ce":"## Making predictions & submission\n\nTo start with, let's create a helper function to make a prediction on a single image.","fbc578c5":"Let us know create a submission file with these predictions","76beb546":"Similarly, `submission.csv` contains image IDs for test data. However, since the goal of this competition is to make predictions for the test set, the `submission.csv` files contains **dummy labels**, which you need to replace with your predictions and sumbit to the competition on the \"Submission\" tab. In other words, we don't have the labels for the test set.","d38cf522":"## Training the model","0a3249de":"Here's a sample image without the colors inverted.","fe435dfd":"Transforms can be chained using `transforms.Compose`. For instance, you may add `transforms.Resize(128)` before `transforms.ToTensor()` to resize images to size 128x128 before converting them into tensors. See the full list of transforms here: https:\/\/pytorch.org\/docs\/master\/torchvision\/transforms.html","be9d291e":"## Model","e892a7f1":"## Creating a submission file","57e09d17":"Let's try predicting the labels for some sample images","e4b1761e":"If your kernel runs out of memory here, you might need to reduce your batch size.","a950f95d":"We can now save it batck to CSV, and download the file from the sidebar (check the output folder)","92985df9":"Let's also put the textual labels in a dictionary for later use.","1aedbfef":"The image files are named `<image-id>.png` and can be found in the respective `train` and `test` folders.","a789241f":"The `train.csv` file contains image IDs and labels for training data. Note that this is a multi-label classification problem. Each image can have more than one type of protein.","5fd04579":"Let's load the `train.csv` file into a Pandas dataframe","abe37d23":"Let's take a look at a sample image from the dataset. We'll define a function `show_sample` to help us. We will also include the option to invert the image before showing it, because the original images are quite dark.","334b1bf8":"Here's the same image viewed with the colors inverted","c1fe4450":"To create a tensor from the labels, we will encode the labels as vectors of 1s & 0s. For example, if the labels are `'2 4 5'`, the correspoding vector for it would be `[0, 0, 1, 0, 1, 1, 0, 0, 0, 0]`. Let's define helper funtions to encode labels into tensors and vice versa.","fdfa304e":"You can now upload this submission file here: https:\/\/www.kaggle.com\/c\/jovian-pytorch-z2g\/submit","3ecd28ad":"You can also use the \"Save Version\" button on Kaggle itself, to save a copy on your Kaggle profile.","a366bc48":"## Human Protein Multi Label Image Classification \n\nThis is a starter notebook for the competition [Zero to GANs - Human Protein Classification](https:\/\/www.kaggle.com\/c\/jovian-pytorch-z2g)","37ec3836":"## Exploring the Data\n\nWhen you create a notebook with the \"Notebooks\" tab of a Kaggle competition, the data is automatically included in the `..\/input` folder. You can explore the files in the sidebar. Let us create some constants acess the data directories and CSV files.","dc3c3720":"Let's check how many samples the dataset contains"}}