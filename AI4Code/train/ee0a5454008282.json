{"cell_type":{"1cd177ca":"code","a76d1638":"code","7ab4488e":"code","0b8eb972":"code","875c228a":"code","9652cce8":"code","5fbd0c19":"code","46cf1185":"code","b0a79d27":"code","a2817d43":"code","32fdab60":"code","958650e7":"code","0470637b":"code","be1be7b8":"code","abdbb322":"code","ed79489d":"code","b783570f":"code","aba17d9e":"code","ea26d384":"code","ca6d8bad":"code","12a95854":"code","5e331027":"code","cd49e844":"code","0f3e64bd":"code","aed7f5d5":"code","d25a73e2":"code","74c1d534":"code","643b0494":"code","b4301a8a":"code","f9a99571":"code","c55424fb":"code","a7be8d57":"code","49c1dfc7":"code","636ae8c4":"code","a2b42e11":"code","d719517f":"code","e82dcb40":"code","3448c39a":"code","26fe4b2a":"code","33093ca6":"code","d98766f2":"code","a2610515":"code","6d8afeb6":"code","5366a3f0":"markdown","f29ef00f":"markdown","59d34014":"markdown","3747f62d":"markdown","5e15791e":"markdown","3f99fde2":"markdown","2761e50f":"markdown","ff8cda32":"markdown","6bcc7bac":"markdown","c375137f":"markdown","07f79240":"markdown","d3c6f35a":"markdown","76059e68":"markdown","cd4915b5":"markdown","446e715e":"markdown","42478019":"markdown","ac2f751a":"markdown","c5c08a4f":"markdown","fa86ef9a":"markdown","f4a50491":"markdown"},"source":{"1cd177ca":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a76d1638":"%%time\n# 10 minutes\n! python -W ignore ..\/input\/finalmoascripts\/dae-book3b.py","7ab4488e":"%%time\n# 10 minutes\n! python -W ignore ..\/input\/finalmoascripts\/dae-book3c.py","0b8eb972":"%%time\n# 8 minutes\n! python -W ignore ..\/input\/finalmoascripts\/cv-inference-efficientnet.py","875c228a":"%%time\n# 8 minutes\n! python -W ignore ..\/input\/finalmoascripts\/cv-inference-efficientnet-augment.py","9652cce8":"%%time\n# 1.5 minutes\n! python -W ignore ..\/input\/finalmoascripts\/inference_mx10.py","5fbd0c19":"%%time\n# 3 minutes\n! python -W ignore ..\/input\/finalmoascripts\/updated-inference-final-mx10-transfer-3.py","46cf1185":"%%time\n# 3.5 minutes\n! python -W ignore ..\/input\/finalmoascripts\/inference_tabnet_dae.py","b0a79d27":"%%time\n# 3 minutes\n! python -W ignore ..\/input\/finalmoascripts\/inference-tabnet-1830.py","a2817d43":"%%time\n# 1.75 minutes\n! python -W ignore ..\/input\/finalmoascripts\/inference_pytorch_nn_01833.py","32fdab60":"%%time\n# 2.5 minutes\n! python -W ignore ..\/input\/finalmoascripts\/NN1835.py","958650e7":"%%time\n# 1.75 minutes\n! python -W ignore ..\/input\/finalmoascripts\/tabnet-public-184-inference.py","0470637b":"%%time\n# 3.5 minutes\n! python -W ignore ..\/input\/finalmoascripts\/resnet-v64-infer.py","be1be7b8":"ls","abdbb322":"test = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv').set_index('sig_id') \nprint( test.shape )","ed79489d":"mx10 = pd.read_csv('submission_mx10.csv').set_index('sig_id')\nmx10_updated = pd.read_csv('submission_mx10_updated.csv').set_index('sig_id')\ntabnet_dae = pd.read_csv('submission_tabnet_01831.csv').set_index('sig_id')\ntabnet_1830 = pd.read_csv('submission_tabnet_01830.csv').set_index('sig_id')\ndae = pd.read_csv('submission_dae.csv').set_index('sig_id')\ndae_updated = pd.read_csv('submission_dae_updated.csv').set_index('sig_id')\npytorch_nn = pd.read_csv('submission_pytorch_01833.csv').set_index('sig_id')\nkeras_resnet = pd.read_csv('submission_RES_v64.csv').set_index('sig_id')\neffnet = pd.read_csv('submission_effnet.csv').set_index('sig_id')\neffnet_augment = pd.read_csv('submission_effnet_augment.csv').set_index('sig_id')\ntabnet_1840 = pd.read_csv('submission_tabnet_1840.csv').set_index('sig_id')\nNN_1835 = pd.read_csv('submission_NN1835.csv').set_index('sig_id')","b783570f":"x = mx10.loc[test.cp_type=='trt_cp'].values\nprint('MIN pred',np.min(x),'MAX pred',np.max(x))\nplt.figure(figsize=(20,4))\nplt.subplot(1,2,1)\nplt.hist( x[x<0.01], bins=100)\nplt.subplot(1,2,2)\nplt.hist( x[x>0.9], bins=100)\nplt.show()","aba17d9e":"x = mx10_updated.loc[test.cp_type=='trt_cp'].values\nprint('MIN pred',np.min(x),'MAX pred',np.max(x))\nplt.figure(figsize=(20,4))\nplt.subplot(1,2,1)\nplt.hist( x[x<0.01], bins=100)\nplt.subplot(1,2,2)\nplt.hist( x[x>0.9], bins=100)\nplt.show()","ea26d384":"x = tabnet_dae.loc[test.cp_type=='trt_cp'].values\nprint('MIN pred',np.min(x),'MAX pred',np.max(x))\nplt.figure(figsize=(20,4))\nplt.subplot(1,2,1)\nplt.hist( x[x<0.01], bins=100)\nplt.subplot(1,2,2)\nplt.hist( x[x>0.9], bins=100)\nplt.show()","ca6d8bad":"x = tabnet_1830.loc[test.cp_type=='trt_cp'].values\nprint('MIN pred',np.min(x),'MAX pred',np.max(x))\nplt.figure(figsize=(20,4))\nplt.subplot(1,2,1)\nplt.hist( x[x<0.01], bins=100)\nplt.subplot(1,2,2)\nplt.hist( x[x>0.9], bins=100)\nplt.show()","12a95854":"x = tabnet_1840.loc[test.cp_type=='trt_cp'].values\nprint('MIN pred',np.min(x),'MAX pred',np.max(x))\nplt.figure(figsize=(20,4))\nplt.subplot(1,2,1)\nplt.hist( x[x<0.01], bins=100)\nplt.subplot(1,2,2)\nplt.hist( x[x>0.9], bins=100)\nplt.show()","5e331027":"x = dae.loc[test.cp_type=='trt_cp'].values\nprint('MIN pred',np.min(x),'MAX pred',np.max(x))\nplt.figure(figsize=(20,4))\nplt.subplot(1,2,1)\nplt.hist( x[x<0.01], bins=100)\nplt.subplot(1,2,2)\nplt.hist( x[x>0.9], bins=100)\nplt.show()","cd49e844":"x = dae_updated.loc[test.cp_type=='trt_cp'].values\nprint('MIN pred',np.min(x),'MAX pred',np.max(x))\nplt.figure(figsize=(20,4))\nplt.subplot(1,2,1)\nplt.hist( x[x<0.01], bins=100)\nplt.subplot(1,2,2)\nplt.hist( x[x>0.9], bins=100)\nplt.show()","0f3e64bd":"x = pytorch_nn.loc[test.cp_type=='trt_cp'].values\nprint('MIN pred',np.min(x),'MAX pred',np.max(x))\nplt.figure(figsize=(20,4))\nplt.subplot(1,2,1)\nplt.hist( x[x<0.01], bins=100)\nplt.subplot(1,2,2)\nplt.hist( x[x>0.9], bins=100)\nplt.show()","aed7f5d5":"x = NN_1835.loc[test.cp_type=='trt_cp'].values\nprint('MIN pred',np.min(x),'MAX pred',np.max(x))\nplt.figure(figsize=(20,4))\nplt.subplot(1,2,1)\nplt.hist( x[x<0.01], bins=100)\nplt.subplot(1,2,2)\nplt.hist( x[x>0.9], bins=100)\nplt.show()","d25a73e2":"x = keras_resnet.loc[test.cp_type=='trt_cp'].values\nprint('MIN pred',np.min(x),'MAX pred',np.max(x))\nplt.figure(figsize=(20,4))\nplt.subplot(1,2,1)\nplt.hist( x[x<0.01], bins=100)\nplt.subplot(1,2,2)\nplt.hist( x[x>0.9], bins=100)\nplt.show()","74c1d534":"x = effnet.loc[test.cp_type=='trt_cp'].values\nprint('MIN pred',np.min(x),'MAX pred',np.max(x))\nplt.figure(figsize=(20,4))\nplt.subplot(1,2,1)\nplt.hist( x[x<0.01], bins=100)\nplt.subplot(1,2,2)\nplt.hist( x[x>0.9], bins=100)\nplt.show()","643b0494":"x = effnet_augment.loc[test.cp_type=='trt_cp'].values\nprint('MIN pred',np.min(x),'MAX pred',np.max(x))\nplt.figure(figsize=(20,4))\nplt.subplot(1,2,1)\nplt.hist( x[x<0.01], bins=100)\nplt.subplot(1,2,2)\nplt.hist( x[x>0.9], bins=100)\nplt.show()","b4301a8a":"df = pd.DataFrame()\ndf['TabNet_DAE'] = tabnet_dae.values.flatten()\ndf['TabNet_1830'] = tabnet_1830.values.flatten()\ndf['TabNet_1840'] = tabnet_1840.values.flatten()\ndf['MX10'] = mx10.values.flatten()\ndf['MX10_updated'] = mx10_updated.values.flatten()\ndf['PyTorch NN'] = pytorch_nn.values.flatten()\ndf['NN_1835'] = NN_1835.values.flatten()\ndf['Keras ResNet'] = keras_resnet.values.flatten()\ndf['DAE_0.2'] = dae.values.flatten()\ndf['DAE_0.3'] = dae_updated.values.flatten()\ndf['EffNet'] = effnet.values.flatten()\ndf['EffNet_augment'] = effnet_augment.values.flatten()","f9a99571":"plt.figure(figsize=(15,15))\nsns.heatmap(df.corr(), cmap='RdBu_r', annot=True, fmt='0.3g')\nplt.show()","c55424fb":"sub1 = mx10.copy()\nsub2 = tabnet_dae.loc[sub1.index,sub1.columns].copy()\nsub3 = dae.loc[sub1.index,sub1.columns].copy()\nsub4 = pytorch_nn.loc[sub1.index,sub1.columns].copy()\nsub5 = keras_resnet.loc[sub1.index,sub1.columns].copy()\nsub6 = effnet.loc[sub1.index,sub1.columns].copy()\nsub7 = tabnet_1830.loc[sub1.index,sub1.columns].copy()\nsub8 = tabnet_1840.loc[sub1.index,sub1.columns].copy()\nsub9 = NN_1835.loc[sub1.index,sub1.columns].copy()\nsub10 = dae_updated.loc[sub1.index,sub1.columns].copy()\nsub11 = mx10_updated.loc[sub1.index,sub1.columns].copy()\nsub12 = effnet_augment.loc[sub1.index,sub1.columns].copy()\n\ntest = test.loc[sub1.index]\ntest.reset_index(inplace=True)","a7be8d57":"sub = ((sub2 + sub7 + sub8)\/3. + (sub1 + sub11)\/2. + (sub3 + sub10)\/2. + (sub4 + sub5 + sub9)\/3. + (sub6 + sub12)\/2. )\/5.\nsub.reset_index(inplace=True)","49c1dfc7":"x = sub.loc[test.cp_type=='trt_cp',sub.columns[1:]].values\nprint('MIN pred',np.min(x),'MAX pred',np.max(x))\nplt.figure(figsize=(20,4))\nplt.subplot(1,2,1)\nplt.hist( x[x<0.01], bins=100)\nplt.subplot(1,2,2)\nplt.hist( x[x>0.9], bins=100)\nplt.show()","636ae8c4":"# CONVERT PROBABILITIES TO ODDS, APPLY MULTIPLIER, CONVERT BACK TO PROBABILITIES\ndef scale(x,k):\n    x = x.copy()\n    idx = np.where(x!=1)[0]\n    y = k * x[idx] \/ (1-x[idx])\n    x[idx] =  y\/(1+y)\n    return x","a2b42e11":"train = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\n\n# \"OFTEN\" UNRECOGNIZED TARGETS\nCOLS = ['acetylcholine_receptor_agonist',\n       'acetylcholine_receptor_antagonist', 'adrenergic_receptor_agonist',\n       'adrenergic_receptor_antagonist',\n       'bacterial_cell_wall_synthesis_inhibitor',\n       'calcium_channel_blocker', 'cyclooxygenase_inhibitor',\n       'dna_inhibitor', 'dopamine_receptor_antagonist',\n       'estrogen_receptor_agonist', 'gaba_receptor_antagonist',\n       'glutamate_receptor_antagonist', 'histamine_receptor_antagonist',\n       'phosphodiesterase_inhibitor', 'serotonin_receptor_agonist',\n       'serotonin_receptor_antagonist', 'sodium_channel_inhibitor']","d719517f":"# DECREASE PREDICTIONS FOR UNCERTAIN OFTEN TARGETS IN TRAIN\nFACTOR = 0.725 # 5:1 odds\nct = 0\n\nfor c in COLS:\n    t_sum = train[c].sum()\n    m1 = train[c].mean()\n    m2 = sub[c].mean()\n    ratio = m2\/m1\n    \n    # LINEAR FORMULA\n    m = (FACTOR + (70-t_sum\/6)\/(70-25)*0.11) \/ ratio\n    \n    # QUADRATIC FORMULA 3:1 odds\n    #coef = [ 1.18247190e-04, -1.54204106e-02,  1.11694136e+00]\n    #x = t_sum\/6\n    #m = (coef[0]*x**2 + coef[1]*x + coef[2]) \/ ratio\n    #m0 = (coef[0]*x**2 + coef[1]*x + coef[2])\n    \n    if m<1:\n        print(c)\n        #print('multiplier = %.3f'%m,'because t_sum = %i, ratio = %.2f (goal = %.2f)'%(t_sum,ratio,m0)) \n        print('multiplier = %.3f'%m,'because t_sum = %i, ratio = %.2f'%(t_sum,ratio))\n        sub[c] = scale(sub[c].values,m)\n        m3 = sub[c].mean()   \n        r2 = m3\/m1\n        r3 = m3\/m2\n        print('  new ratio = %.2f, effective multiplier = %.3f'%(r2,r3))\n        print()\n        ct += 1\n        \n    else:\n        print(c)\n        print('### Skipping')\n        print()\n        \nprint('Updated',ct,'targets')","e82dcb40":"# \"RARE\" UNRECOGNIZED TARGETS\nCOLS = ['erbb2_inhibitor', 'atp-sensitive_potassium_channel_antagonist',\n       'aldehyde_dehydrogenase_inhibitor', 'antiarrhythmic',\n       'leukotriene_inhibitor', 'coagulation_factor_inhibitor',\n       'ras_gtpase_inhibitor', 'ubiquitin_specific_protease_inhibitor',\n       'elastase_inhibitor', 'nicotinic_receptor_agonist',\n       'protein_phosphatase_inhibitor', 'atm_kinase_inhibitor',\n       'retinoid_receptor_antagonist', 'lxr_agonist',\n       'autotaxin_inhibitor', 'tropomyosin_receptor_kinase_inhibitor',\n       'diuretic', 'monoacylglycerol_lipase_inhibitor',\n       'norepinephrine_reuptake_inhibitor', 'rna_polymerase_inhibitor',\n       'calcineurin_inhibitor', 'catechol_o_methyltransferase_inhibitor',\n       'laxative', 'steroid', 'pkc_inhibitor', 'glutamate_inhibitor',\n       'lipase_inhibitor', 'tlr_antagonist',\n       'nitric_oxide_production_inhibitor', 'antihistamine',\n       'ampk_activator', 'protein_tyrosine_kinase_inhibitor',\n       'caspase_activator', 'acat_inhibitor', 'pdk_inhibitor',\n       'anticonvulsant', 'p-glycoprotein_inhibitor',\n       'free_radical_scavenger', 'mineralocorticoid_receptor_antagonist',\n       'beta_amyloid_inhibitor', 'smoothened_receptor_antagonist',\n       'syk_inhibitor', 'analgesic', 'vitamin_b', 'tlr_agonist',\n       'antiviral', 'antimalarial',\n       'transient_receptor_potential_channel_antagonist',\n       'cck_receptor_antagonist', 'wnt_inhibitor',\n       'imidazoline_receptor_agonist', 'gonadotropin_receptor_agonist',\n       'phospholipase_inhibitor', 'insulin_secretagogue',\n       'thrombin_inhibitor']","3448c39a":"# INCREASE PREDICTIONS FOR UNCERTAIN RARE TARGETS IN TRAIN\nFACTOR = 7 # 5:1 odds\nct = 0\n\nfor c in COLS:\n    t_sum = train[c].sum()\n    m1 = train[c].mean()\n    m2 = sub[c].mean()\n    ratio = m2\/m1\n    m = FACTOR*6\/t_sum\/ratio\n    \n    if m>1:\n        print(c)\n        print('multiplier = %.3f'%m,'because t_sum = %i, ratio = %.2f'%(t_sum,ratio))        \n        sub[c] = scale(sub[c].values,m)\n        m3 = sub[c].mean()   \n        r2 = m3\/m1\n        r3 = m3\/m2\n        print('  new ratio = %.1f, effective multiplier = %.3f'%(r2,r3))\n        print()\n        ct += 1\n        \n    else:\n        print(c)\n        print('### Skipping')\n        print()\n        \nprint('Updated',ct,'targets')","26fe4b2a":"sub.to_csv('submission.csv',index=False)\nsub.head()","33093ca6":"x = sub.loc[test.cp_type=='trt_cp',sub.columns[1:]].values\nprint('MIN pred',np.min(x),'MAX pred',np.max(x))\nplt.figure(figsize=(20,4))\nplt.subplot(1,2,1)\nplt.hist( x[x<0.01], bins=100)\nplt.subplot(1,2,2)\nplt.hist( x[x>0.9], bins=100)\nplt.show()","d98766f2":"s = sub.loc[(test.cp_type=='ctl_vehicle').values].mean().sum()\nprint('Submission control row non-zeros = %i'%s)","a2610515":"train = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\nidx = np.random.randint(1,207,10)\ntrain.iloc[:,idx].mean()","6d8afeb6":"sub[sub.columns[idx]].mean()","5366a3f0":"## Keras ResNet","f29ef00f":"# Post Process \"Rare\" Targets\nRare Targets have `Target Count <= 31` in train","59d34014":"## Tabnet 1830","3747f62d":"## DAE Updated Model (0.3 noise)","5e15791e":"## TabNet 1840","3f99fde2":"## MX10 updated model","2761e50f":"## DAE Model (0.2 noise)","ff8cda32":"# Post Process\nSome targets in train are both rare and unrecognized by our model. In this case the model predicts the mean target from train. Most likely these rare targets occur more frequently in test, so we will increase their predictions. Likewise some targets in train are both often and unrecognized. We will decrease these because they may be more rare in test.\n  \n![Screen%20Shot%202020-11-29%20at%208.33.28%20AM.png](attachment:Screen%20Shot%202020-11-29%20at%208.33.28%20AM.png)","6bcc7bac":"# Build Ensemble","c375137f":"## DeepInsight EffNet Augment","07f79240":"## MX10 model","d3c6f35a":"## Tabnet DAE Model","76059e68":"# MOA Competition - 12 Models - LB 0.01805\nOur MOA competition solution uses 5 types of models. They are inspired by public notebooks. Each individual model has approximately LB 0.01830 and CV 0.01560 (double stratified with control). The ensemble achieves 0.01815 and post process improves LB to 0.01805. \n* TabNet  \nhttps:\/\/www.kaggle.com\/josemori\/moa-tabnet?scriptVersionId=44549085  \nhttps:\/\/www.kaggle.com\/hiramcho\/moa-tabnet-with-pca-rank-gauss?scriptVersionId=45407015\n* MX10 (pretrain then fine tune)    \nhttps:\/\/www.kaggle.com\/tolgadincer\/moa-tensorfow-mx10\n* DAE (denoising autoencoder)    \nhttps:\/\/www.kaggle.com\/felipebihaiek\/prediction-with-swap-auto-encoder-features-0-01865?scriptVersionId=46316906\n* EffNet (deepinsight images)    \nhttps:\/\/www.kaggle.com\/markpeng\/deepinsight-efficientnet-b3-noisystudent\n* NN and ResNet  \nhttps:\/\/www.kaggle.com\/thehemen\/pytorch-transfer-learning-with-k-folds-by-drug-ids?scriptVersionId=46944058  \nhttps:\/\/www.kaggle.com\/rahulsd91\/moa-multi-input-resnet-model","cd4915b5":"## DeepInsight EffNet","446e715e":"## Public NN 1835","42478019":"# Post Process \"Often\" Targets\nOftern Targets have `Target Count >= 145` in train","ac2f751a":"# Write Submission CSV","c5c08a4f":"# Correlation","fa86ef9a":"## PyTorch NN","f4a50491":"# Our Models"}}