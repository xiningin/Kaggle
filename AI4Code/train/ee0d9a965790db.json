{"cell_type":{"2d066c6d":"code","6c05cf5b":"code","5a961d61":"code","2ad4a1de":"code","b529d63b":"code","0f04aedf":"code","491af19b":"code","9d2d5918":"code","d1ea4516":"code","4ac3510b":"code","8bc2cb7b":"code","e31d7445":"code","f6eb2271":"code","ef3bb3ae":"code","ef6e235c":"code","d8b18dad":"code","064071d7":"code","aac3cf87":"code","9ff798e8":"code","72c8134b":"code","26d1de36":"code","ae246abd":"code","39fd1651":"code","706ecb05":"code","7666615c":"code","10833e03":"code","9731fa89":"code","abae945f":"code","46a4b49c":"code","0e86b6c7":"code","7fc89865":"code","dc7b7010":"code","c5657ea4":"code","53f42801":"markdown","4828bbd2":"markdown","acbedfdb":"markdown","58927404":"markdown","844af2e6":"markdown","b0912b6f":"markdown"},"source":{"2d066c6d":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6c05cf5b":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nplt.style.use('seaborn')\n\nfrom tensorflow import keras\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n%matplotlib inline","5a961d61":"df = pd.read_csv('..\/input\/tesla-stock-price\/Tesla.csv - Tesla.csv.csv')\ndf.shape","2ad4a1de":"df.info()","b529d63b":"df.isna().sum()","0f04aedf":"df.head()","491af19b":"df['Date'] = pd.to_datetime(df['Date'])\ndf['Date'].head()","9d2d5918":"plt.figure(figsize=(10,10))\nsns.pairplot(data=df, kind='scatter', corner=True)\nplt.show()","d1ea4516":"df.set_index('Date',inplace=True)\ndf.head()","4ac3510b":"scale = MinMaxScaler()\nscalled = scale.fit_transform(df)","8bc2cb7b":"i = 0\nfor col in df.columns:\n    df[col] = scalled[:,i]\n    i += 1","e31d7445":"df.head()","f6eb2271":"df.describe()","ef3bb3ae":"x, y = df.drop('Adj Close', axis=1), df['Adj Close']","ef6e235c":"x.head()","d8b18dad":"y.head()","064071d7":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)","aac3cf87":"x_train.shape, x_test.shape","9ff798e8":"y_train.shape, y_test.shape","72c8134b":"model = keras.Sequential([\n    keras.layers.Dense(5, input_shape=(5,), activation='linear'),\n    keras.layers.Dense(1, activation='linear')\n])\n\nmodel.compile(\n    loss='mean_squared_error',\n    optimizer='adam'\n)","26d1de36":"model.fit(x_train, y_train, epochs=50)","ae246abd":"model.evaluate(x_test, y_test)","39fd1651":"y_pred_test = model.predict(x_test).flatten()\ny_pred_train = model.predict(x_train).flatten()","706ecb05":"def actual_vs_predicted(y_true, y_pred, title=None, xscale='linear',yscale='linear', return_correlation=False):\n    x= 'Actual'\n    y= 'Predicted'\n    plt.figure(figsize=(10,10))\n    ap = pd.DataFrame({x:y_true,y:y_pred})\n    sns.scatterplot(data=ap,x=x, y=y)\n    plt.title(title)\n    plt.xscale(xscale) #Linear, log and symlog\n    plt.yscale(yscale) #Linear, log and symlog\n    plt.show()\n    if return_correlation:\n        return ap.corr()","7666615c":"actual_vs_predicted(y_test, y_pred_test, title=\"Y test Data.\",return_correlation=True)","10833e03":"r2_score(y_pred_test, y_test)","9731fa89":"actual_vs_predicted(y_train, y_pred_train, title=\"Y Train Data.\")","abae945f":"r2_score(y_pred_train, y_train)","46a4b49c":"def plot_actual_vs_predicted(y_true, y_pred, title=None, xscale='linear',yscale='linear'):\n    x= 'Actual'\n    y= 'Predicted'\n    plt.figure(figsize=(10,10))\n    ap = pd.DataFrame({x:y_true,y:y_pred})\n    ap.sort_values(by=x,ascending=True,inplace=True)\n    plt.scatter(np.arange(len(ap[x])),ap[x],color='blue', label=x, linewidth=0.9, marker='*')\n    plt.plot(np.arange(len(ap[x])),ap[y],color='red', label=y, linewidth=2)\n    \n    plt.title(title)\n    plt.legend()\n    plt.xscale(xscale) #Linear, log and symlog\n    plt.yscale(yscale) #Linear, log and symlog\n    plt.show()\n","0e86b6c7":"plot_actual_vs_predicted(y_test,y_pred_test,\"Comparing Test Actual vs predicted\")","7fc89865":"plot_actual_vs_predicted(y_train,y_pred_train,\"Comparing Train Actual vs predicted\")","dc7b7010":"model.save('Tesla-Stock-Model')","c5657ea4":"!ls","53f42801":"# **Saving Model as file**","4828bbd2":"# **Model Building and Predictions**","acbedfdb":"# **Compare Actual vs predicted**","58927404":"# **Feature Scaling**","844af2e6":"# **Actual vs predicted**","b0912b6f":"# **Data Splitting and training**"}}