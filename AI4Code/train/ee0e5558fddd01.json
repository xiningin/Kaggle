{"cell_type":{"3a06b4c9":"code","e16a5eaf":"code","1f4b5d10":"code","0b0ce133":"code","e7362ba1":"code","38cdf670":"code","26529c7c":"code","6d7dfb3d":"code","358115fe":"code","b7ec151d":"code","baa0c2f7":"code","81db3eae":"code","ce2e50c7":"code","8a8814be":"code","4309880d":"code","3426de2e":"code","fb440f39":"code","1bd3d5ec":"code","7954b4ee":"code","0825a2aa":"code","865fd02f":"code","8407b7f3":"code","e7d0a426":"code","dbbe8462":"code","eb9224a3":"code","d11b5654":"code","ab4ab7ec":"markdown","479e7113":"markdown","589ee8c2":"markdown","decd3e56":"markdown","0c055b1e":"markdown","95204706":"markdown","ef40c42f":"markdown","0e431a8b":"markdown","4da83123":"markdown","86c49593":"markdown"},"source":{"3a06b4c9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\nimport statsmodels.tsa.api as smt\nfrom sklearn.metrics import mean_squared_log_error as RMSLE\nfrom sklearn.metrics import mean_squared_error as RMSE","e16a5eaf":"import warnings\nwarnings.filterwarnings(\"ignore\")","1f4b5d10":"train = pd.read_csv('..\/input\/bri-data-hackathon-cr-optimization\/train.csv')\ntrain['periode'] = pd.to_datetime(train['periode'])\ntrain.set_index(train['periode'], drop=True, inplace=True)","0b0ce133":"train.drop(['periode', 'cr_ketetapan_total_bkn_sum'], axis=1, inplace=True)","e7362ba1":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3)\n\nax1.plot(train.index, train['kas_kantor'])\nax1.set_title('kas kantor')\n\nax2.plot(train.index[1:], train['kas_kantor'].diff(1).dropna())\nax2.set_title('kas kantor Differential')\nax2.set_xticklabels(ax2.get_xticklabels(), rotation=45)\n\nax3 = train['kas_echannel'].plot()\nax3.set_title('kas_echannel')","38cdf670":"kas_echannel_adfuller = sm.tsa.stattools.adfuller(train['kas_echannel'])\n\nprint(f'ADF Statistic: {kas_echannel_adfuller[0]}')\nprint(f'p-value: {kas_echannel_adfuller[1]}')\nprint('Critical Values:')\nfor key, value in kas_echannel_adfuller[4].items():\n\tprint(f'\\t{key}: {value}')","26529c7c":"#Now plot the ACF and PACF graph\nfig, (ax1, ax2) = plt.subplots(1,2)\nsmt.graphics.plot_acf(train['kas_echannel'], ax=ax1, lags=40)\nsmt.graphics.plot_pacf(train['kas_echannel'], ax=ax2, lags=40)","6d7dfb3d":"#From the plot, I can decide the critical value that I will use\np_val = [22, 15, 8, 6]\nq_val = [22, 14, 7, 2]","358115fe":"train_set = train['kas_echannel'][:-30]\nval_set = train['kas_echannel'][-30:]","b7ec151d":"model_echannel = []\n\nfor p in p_val:\n    for q in q_val:\n        mod = sm.tsa.arima.ARIMA(train_set, order=(p, 1, q))\n        res = mod.fit()\n        model_echannel.append(res) \n        print(f'p_val: {p}, q_val: {q}, aic: {res.aic}')","baa0c2f7":"#Plot the training data and fitted value of the ARIMA Model\nfig, ax = plt.subplots(2,2)\n\nax[0,0].plot(train_set)\nax[0,0].plot(model_echannel[2].fittedvalues)\nax[0,0].legend(['train_set', 'fitted_values'], prop={'size': 6})\n \nax[1,0].plot(train_set)\nax[1,0].plot(model_echannel[6].fittedvalues)\nax[1,0].legend(['train_set', 'fitted_values'], prop={'size': 6})\n\nax[0,1].plot(train_set)\nax[0,1].plot(model_echannel[7].fittedvalues)\nax[0,1].legend(['train_set', 'fitted_values'], prop={'size': 6})\n\nax[1,1].plot(train_set)\nax[1,1].plot(model_echannel[9].fittedvalues)\nax[1,1].legend(['train_set', 'fitted_values'], prop={'size': 6})","81db3eae":"def change_index(val_set, pred_set):\n    pred_set.index = val_set.index\n    return pred_set","ce2e50c7":"#See the RMSLE score for each ARIMA model\nfor i, mod in enumerate(model_echannel):\n    y_pred = change_index(val_set, mod.forecast(30))\n    score = RMSLE(val_set, y_pred)\n    print(f'RMSLE-{i}: {score}, aic: {mod.aic}')","8a8814be":"#Plot the forecast value and the validation set\nfig, ax = plt.subplots(2,2)\n\nax[0,0].plot(train_set)\nax[0,0].plot(val_set, 'g')\ny_pred = change_index(val_set, model_echannel[2].forecast(30))\nax[0,0].plot(y_pred)\n\nax[1,0].plot(train_set)\nax[1,0].plot(val_set, 'g')\ny_pred = change_index(val_set, model_echannel[6].forecast(30))\nax[1,0].plot(y_pred)\n\nax[0,1].plot(train_set)\nax[0,1].plot(val_set, 'g')\ny_pred = change_index(val_set, model_echannel[7].forecast(30))\nax[0,1].plot(y_pred)\n\nax[1,1].plot(train_set)\nax[1,1].plot(val_set, 'g')\ny_pred = change_index(val_set, model_echannel[9].forecast(30))\nax[1,1].plot(y_pred)","4309880d":"y_pred_echannel = model_echannel[2].forecast(61)","3426de2e":"kas_kantor_adfuller = sm.tsa.stattools.adfuller(train['kas_kantor'])\n\nprint(f'ADF Statistic: {kas_kantor_adfuller[0]}')\nprint(f'p-value: {kas_kantor_adfuller[1]}')\nprint('Critical Values:')\nfor key, value in kas_kantor_adfuller[4].items():\n\tprint(f'\\t{key}: {value}')","fb440f39":"kas_kantor_adfuller = sm.tsa.stattools.adfuller(train['kas_kantor'].diff(1).dropna())\n\nprint(f'ADF Statistic: {kas_kantor_adfuller[0]}')\nprint(f'p-value: {kas_kantor_adfuller[1]}')\nprint('Critical Values:')\nfor key, value in kas_kantor_adfuller[4].items():\n\tprint(f'\\t{key}: {value}')","1bd3d5ec":"fig, (ax1, ax2) = plt.subplots(1,2)\nsmt.graphics.plot_acf(train['kas_kantor'].diff(1).dropna(), ax=ax1, lags=60)\nsmt.graphics.plot_pacf(train['kas_kantor'].diff(1).dropna(), ax=ax2, lags=40)","7954b4ee":"p_val = [21, 14, 7]\nq_val = [56, 42, 21]","0825a2aa":"train_set = train['kas_kantor'][:-30]\nval_set = train['kas_kantor'][-30:]","865fd02f":"model_kantor = [] \n\nfor p in p_val:\n    for q in q_val:\n        mod = sm.tsa.arima.ARIMA(train_set.dropna(), order=(p, 1, q))\n        res = mod.fit()\n        model_kantor.append(res) \n        print(f'p_val: {p}, q_val: {q}, aic: {res.aic}')","8407b7f3":"#Plot the training data and fitted value of the ARIMA Model\n\nfig, ax = plt.subplots(2,2)\n\nax[0,0].plot(train_set)\nax[0,0].plot(model_kantor[0].fittedvalues)\n\nax[1,0].plot(train_set)\nax[1,0].plot(model_kantor[2].fittedvalues)\n\nax[0,1].plot(train_set)\nax[0,1].plot(model_kantor[5].fittedvalues)\n\nax[1,1].plot(train_set)\nax[1,1].plot(model_kantor[-1].fittedvalues)","e7d0a426":"#See the RMSLE score for each ARIMA model\nfor i, mod in enumerate(model_kantor):\n    y_pred = mod.forecast(30)\n    score = RMSLE(val_set, y_pred)\n    print(f'RMSLE-{i}: {score}, aic: {mod.aic}')","dbbe8462":"#Plot the forecast value and the validation set\nfig, ax = plt.subplots(2,2)\n\nax[0,0].plot(train_set)\nax[0,0].plot(val_set, 'g')\ny_pred = change_index(val_set, model_kantor[0].forecast(30))\nax[0,0].plot(y_pred)\n\nax[1,0].plot(train_set)\nax[1,0].plot(val_set, 'g')\ny_pred = change_index(val_set, model_kantor[2].forecast(30))\nax[1,0].plot(y_pred)\n\nax[0,1].plot(train_set)\nax[0,1].plot(val_set, 'g')\ny_pred = change_index(val_set, model_kantor[5].forecast(30))\nax[0,1].plot(y_pred)\n\nax[1,1].plot(train_set)\nax[1,1].plot(val_set, 'g')\ny_pred = change_index(val_set, model_kantor[-1].forecast(30))\nax[1,1].plot(y_pred)","eb9224a3":"y_pred_kantor = model_kantor[-1].forecast(61)","d11b5654":"y_pred = pd.concat([y_pred_kantor[30:], y_pred_echannel[30:]], axis=0)\ny_pred.reset_index(drop=True, inplace=True)\nindex = np.arange(len(y_pred))\n\ny_pred = pd.concat([pd.Series(index), y_pred], axis=1)\ny_pred.columns = ['index', 'value']\n\ny_pred.to_csv('subm.csv', index=False, header=True)","ab4ab7ec":"As you can see from the plot, there is certainly a trend in our Kas Kantor which means Kas Kantor is not stationary. Then I plot the diff(1) of Kas Kantor, and we can see that we have removed the trend. For mor convincing test, we will use Augmented Dickey Fuller test for the stationary test.","479e7113":"# Kas Kantor","589ee8c2":"Implement Augmented Dickey Fuller test for stationary test. Rule of thumb, if p-value is less than 0.5, then we stationary test is fullfiled. A simple explanation of Dickey Fuller test is written in [here](https:\/\/machinelearningmastery.com\/time-series-data-stationary-python\/)","decd3e56":"# Create Submission File","0c055b1e":"# Kas E-channel","95204706":"# Plot Kas Kantor and Kas E-Channel","ef40c42f":"From the plot, AIC, and the RMSLE score I choose the 2-nd ARIMA model that have p=22 and q=7","0e431a8b":"From the plot, AIC, and the RMSLE score I choose the last ARIMA model that have p=7 and q=21","4da83123":"Great! now we have p-value <0.5 which means it is now stationary. Now lets plot the ACF and PACF","86c49593":"As predicted, we have p-value > 0.5 which means that it is not stationary. Now try to differentiate it by 1."}}