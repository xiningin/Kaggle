{"cell_type":{"f82aef42":"code","54489f94":"code","e88a2eff":"code","f90725ae":"code","649dcfdb":"code","475b723f":"code","7840cfe6":"code","0fe17d60":"code","d88051e4":"code","0f82bed9":"code","98563930":"code","7417ef56":"markdown","ee813cab":"markdown","75f8e8f6":"markdown","06b4d926":"markdown","42a4f6af":"markdown","1f4e62d0":"markdown","c24ac5ce":"markdown","bc31294f":"markdown","f36723b3":"markdown"},"source":{"f82aef42":"# Required libraries\nimport pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")","54489f94":"df = pd.read_csv('\/kaggle\/input\/bank-additional-full.csv', sep=';')\ndf.head()","e88a2eff":"df.describe()","f90725ae":"# the functions:\ndef stratified_sample(df, strata, size=None, seed=None, keep_index= True):\n    '''\n    It samples data from a pandas dataframe using strata. These functions use\n    proportionate stratification:\n    n1 = (N1\/N) * n\n    where:\n        - n1 is the sample size of stratum 1\n        - N1 is the population size of stratum 1\n        - N is the total population size\n        - n is the sampling size\n    Parameters\n    ----------\n    :df: pandas dataframe from which data will be sampled.\n    :strata: list containing columns that will be used in the stratified sampling.\n    :size: sampling size. If not informed, a sampling size will be calculated\n        using Cochran adjusted sampling formula:\n        cochran_n = (Z**2 * p * q) \/e**2\n        where:\n            - Z is the z-value. In this case we use 1.96 representing 95%\n            - p is the estimated proportion of the population which has an\n                attribute. In this case we use 0.5\n            - q is 1-p\n            - e is the margin of error\n        This formula is adjusted as follows:\n        adjusted_cochran = cochran_n \/ 1+((cochran_n -1)\/N)\n        where:\n            - cochran_n = result of the previous formula\n            - N is the population size\n    :seed: sampling seed\n    :keep_index: if True, it keeps a column with the original population index indicator\n    \n    Returns\n    -------\n    A sampled pandas dataframe based in a set of strata.\n    Examples\n    --------\n    >> df.head()\n    \tid  sex age city \n    0\t123 M   20  XYZ\n    1\t456 M   25  XYZ\n    2\t789 M   21  YZX\n    3\t987 F   40  ZXY\n    4\t654 M   45  ZXY\n    ...\n    # This returns a sample stratified by sex and city containing 30% of the size of\n    # the original data\n    >> stratified = stratified_sample(df=df, strata=['sex', 'city'], size=0.3)\n    Requirements\n    ------------\n    - pandas\n    - numpy\n    '''\n    population = len(df)\n    size = __smpl_size(population, size)\n    tmp = df[strata]\n    tmp['size'] = 1\n    tmp_grpd = tmp.groupby(strata).count().reset_index()\n    tmp_grpd['samp_size'] = round(size\/population * tmp_grpd['size']).astype(int)\n\n    # controlling variable to create the dataframe or append to it\n    first = True \n    for i in range(len(tmp_grpd)):\n        # query generator for each iteration\n        qry=''\n        for s in range(len(strata)):\n            stratum = strata[s]\n            value = tmp_grpd.iloc[i][stratum]\n            n = tmp_grpd.iloc[i]['samp_size']\n\n            if type(value) == str:\n                value = \"'\" + str(value) + \"'\"\n            \n            if s != len(strata)-1:\n                qry = qry + stratum + ' == ' + str(value) +' & '\n            else:\n                qry = qry + stratum + ' == ' + str(value)\n        \n        # final dataframe\n        if first:\n            stratified_df = df.query(qry).sample(n=n, random_state=seed).reset_index(drop=(not keep_index))\n            first = False\n        else:\n            tmp_df = df.query(qry).sample(n=n, random_state=seed).reset_index(drop=(not keep_index))\n            stratified_df = stratified_df.append(tmp_df, ignore_index=True)\n    \n    return stratified_df\n\n\n\ndef stratified_sample_report(df, strata, size=None):\n    '''\n    Generates a dataframe reporting the counts in each stratum and the counts\n    for the final sampled dataframe.\n    Parameters\n    ----------\n    :df: pandas dataframe from which data will be sampled.\n    :strata: list containing columns that will be used in the stratified sampling.\n    :size: sampling size. If not informed, a sampling size will be calculated\n        using Cochran adjusted sampling formula:\n        cochran_n = (Z**2 * p * q) \/e**2\n        where:\n            - Z is the z-value. In this case we use 1.96 representing 95%\n            - p is the estimated proportion of the population which has an\n                attribute. In this case we use 0.5\n            - q is 1-p\n            - e is the margin of error\n        This formula is adjusted as follows:\n        adjusted_cochran = cochran_n \/ 1+((cochran_n -1)\/N)\n        where:\n            - cochran_n = result of the previous formula\n            - N is the population size\n    Returns\n    -------\n    A dataframe reporting the counts in each stratum and the counts\n    for the final sampled dataframe.\n    '''\n    population = len(df)\n    size = __smpl_size(population, size)\n    tmp = df[strata]\n    tmp['size'] = 1\n    tmp_grpd = tmp.groupby(strata).count().reset_index()\n    tmp_grpd['samp_size'] = round(size\/population * tmp_grpd['size']).astype(int)\n    return tmp_grpd\n\n\ndef __smpl_size(population, size):\n    '''\n    A function to compute the sample size. If not informed, a sampling \n    size will be calculated using Cochran adjusted sampling formula:\n        cochran_n = (Z**2 * p * q) \/e**2\n        where:\n            - Z is the z-value. In this case we use 1.96 representing 95%\n            - p is the estimated proportion of the population which has an\n                attribute. In this case we use 0.5\n            - q is 1-p\n            - e is the margin of error\n        This formula is adjusted as follows:\n        adjusted_cochran = cochran_n \/ 1+((cochran_n -1)\/N)\n        where:\n            - cochran_n = result of the previous formula\n            - N is the population size\n    Parameters\n    ----------\n        :population: population size\n        :size: sample size (default = None)\n    Returns\n    -------\n    Calculated sample size to be used in the functions:\n        - stratified_sample\n        - stratified_sample_report\n    '''\n    if size is None:\n        cochran_n = round(((1.96)**2 * 0.5 * 0.5)\/ 0.02**2)\n        n = round(cochran_n\/(1+((cochran_n -1) \/population)))\n    elif size >= 0 and size < 1:\n        n = round(population * size)\n    elif size < 0:\n        raise ValueError('Parameter \"size\" must be an integer or a proportion between 0 and 0.99.')\n    elif size >= 1:\n        n = size\n    return n","649dcfdb":"help(stratified_sample_report)","475b723f":"stratified_sample_report(df, ['marital'])","7840cfe6":"# here I want a sample size of 10K rows\nstratified_sample_report(df, ['marital'], 10000)","0fe17d60":"stratified_sample_report(df, ['marital', 'education'], 10000)","d88051e4":"help(stratified_sample)","0f82bed9":"# sample\nsample_df = stratified_sample(df, ['age', 'marital', 'education'], size=10000, seed=123, keep_index= True)\nsample_df.head()","98563930":"sample_df.tail()","7417ef56":"Here we can see a sample of size 10K maintainig the same proportions of the desired population strata.\nI hope this kernel may be useful in your statistical studies.\n\nPlease upvote if you liked this content, it helps me a lot!\nThanks!","ee813cab":"This simply means that in the original population (our imported DataFrame), there are 4.612 divorced people. In a stratified sampling it would contain 264 divorced people in order to keep the same population proportion, for instance.\n\nNote that here we did not specify the sample size. If we specify one, the sample size may change:","75f8e8f6":"Note that the above function already have a documentation.\n\nLet\u00b4s first take a look at the \"stratified_sample_report\" function:","06b4d926":"The help informs us that it basically uses the same parameters as the previous function. The difference is that here we can give it a seed in order to have the same sample each time. We can also ask it to keep the same index as the original DataFrame or create a new one.\n\nLet\u00b4s create a sample of 10K rows using variables age, marital and education as strata:","42a4f6af":"Here we see that in a sample containing 10K rows, we would have 119 rows of people that are divorced and have an education level of basic 4y.\n\nPlease note that some cases will have zero representation in the sample. For instance, take a look at row 20: single and illiterate have such a small representation in this population that it will not be considered in a sample of 10K rows.","1f4e62d0":"This function gives us a report showing the population proportion and the final sample proportion.\nNote that these functions calculate proportionate stratified sampling in Python. \nIf we don\u00b4t inform a sample size, the function will calculate a significant size based on [Cochran's formula](https:\/\/en.wikipedia.org\/wiki\/Cochran%27s_theorem).\n\nLet\u00b4s say we want to make a random stratified sampling on the above dataset based on the variable \"marital\". Let\u00b4s first compute the sampling report:","c24ac5ce":"Note how the ample size changes. The important thing here is that the proportions are kept even though the sample size increases. This accounts for a sample that mimics the population in the variable \"marital\".\n\nHere we did an example with only a variable. We could add more:","bc31294f":"#### Creating a Stratified Sampled DataFrame\nLet\u00b4s take a look at the function\u00b4s parameters:","f36723b3":"# Stratified Sampling in Python\n#### This kernel gives a simple solution for stratified sampling in Python.\n\nAccording to [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Stratified_sampling), \"in statistics, stratified sampling is a method of sampling from a population which can be partitioned into subpopulations.\" This method of sampling can be advantageous because it tries to keep in the sample the same proportion of each desired variable (strata) that is present in the population. A simple random sample could ignore this fact.\n\nThere are many use cases for stratified sampling. The main idea is that we want to mimic a population with a sample. It is widely used to generate comparable samples when the objective is to perform hypothesis testing of any kind.\n\nMany times I had to face this situation, so I developed a module in Python with functions that performs stratified sampling given a pandas DataFrame object. I hope it can be useful in your endevors.\n\nFor this example I will use a dataset with information about customers. It will be useful since it contains lots of variables we can use to perform stratified sampling.\n\n*This module can also be found in [this github repo](https:\/\/github.com\/flaviobossolan\/python_stratified_sampling)*"}}