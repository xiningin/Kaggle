{"cell_type":{"a59bdb7d":"code","a4c66d83":"code","896b038f":"code","e95e8881":"code","f2af1832":"code","57e591f2":"code","bd8288ae":"code","26f0f38d":"code","c2c8c4b4":"code","dd1a6d4c":"code","5080cd56":"code","28d51430":"code","69bb64b3":"code","0ab401ef":"code","24a826bb":"code","5a37f20f":"markdown","9ef11870":"markdown","fc2474ab":"markdown","2356d2d6":"markdown","8a8e7965":"markdown","9fbd7c68":"markdown","2ad757f0":"markdown","1d1b57c7":"markdown","dd199004":"markdown","53b16d97":"markdown","dd458856":"markdown","b6318983":"markdown","a918c6fd":"markdown","1dae8f9a":"markdown","4f2a5531":"markdown"},"source":{"a59bdb7d":"# Setup feedback system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.computer_vision.ex2 import *\n\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n\nplt.rc('figure', autolayout=True)\nplt.rc('axes', labelweight='bold', labelsize='large',\n       titleweight='bold', titlesize=18, titlepad=10)\nplt.rc('image', cmap='magma')\n\ntf.config.run_functions_eagerly(True)","a4c66d83":"image_path = '..\/input\/computer-vision-resources\/car_illus.jpg'\nimage = tf.io.read_file(image_path)\nimage = tf.io.decode_jpeg(image, channels=1)\nimage = tf.image.resize(image, size=[400, 400])\n\nimg = tf.squeeze(image).numpy()\nplt.figure(figsize=(6, 6))\nplt.imshow(img, cmap='gray')\nplt.axis('off')\nplt.show();","896b038f":"import learntools.computer_vision.visiontools as visiontools\nfrom learntools.computer_vision.visiontools import edge, bottom_sobel, emboss, sharpen\n\nkernels = [edge, bottom_sobel, emboss, sharpen]\nnames = [\"Edge Detect\", \"Bottom Sobel\", \"Emboss\", \"Sharpen\"]\n\nplt.figure(figsize=(12, 12))\nfor i, (kernel, name) in enumerate(zip(kernels, names)):\n    plt.subplot(1, 4, i+1)\n    visiontools.show_kernel(kernel)\n    plt.title(name)\nplt.tight_layout()","e95e8881":"# YOUR CODE HERE: Define a kernel with 3 rows and 3 columns.\nkernel = tf.constant([\n    [-1,-1,-1],\n    [-1,8,-1],\n    [-1,-1,-1],\n])\n# Uncomment to view kernel\nvisiontools.show_kernel(kernel)\n\n# Check your answer\nq_1.check()","f2af1832":"# Lines below will give you a hint or solution code\n#q_1.hint()\n#q_1.solution()","57e591f2":"# Reformat for batch compatibility.\nimage = tf.image.convert_image_dtype(image, dtype=tf.float32)\nimage = tf.expand_dims(image, axis=0)\nkernel = tf.reshape(kernel, [*kernel.shape, 1, 1])\nkernel = tf.cast(kernel, dtype=tf.float32)","bd8288ae":"# YOUR CODE HERE: Give the TensorFlow convolution function (without arguments)\nconv_fn = tf.nn.conv2d\n\n# Check your answer\nq_2.check()","26f0f38d":"# Lines below will give you a hint or solution code\n#q_2.hint()\n#q_2.solution()","c2c8c4b4":"image_filter = conv_fn(\n    input=image,\n    filters=kernel,\n    strides=1, # or (1, 1)\n    padding='SAME',\n)\n\nplt.imshow(\n    # Reformat for plotting\n    tf.squeeze(image_filter)\n)\nplt.axis('off')\nplt.show();","dd1a6d4c":"# YOUR CODE HERE: Give the TensorFlow ReLU function (without arguments)\nrelu_fn = tf.nn.relu\n\n# Check your answer\nq_3.check()","5080cd56":"# Lines below will give you a hint or solution code\n#q_3.hint()\n#q_3.solution()","28d51430":"image_detect = relu_fn(image_filter)\n\nplt.imshow(\n    # Reformat for plotting\n    tf.squeeze(image_detect)\n)\nplt.axis('off')\nplt.show();","69bb64b3":"# Sympy is a python library for symbolic mathematics. It has a nice\n# pretty printer for matrices, which is all we'll use it for.\nimport sympy\nsympy.init_printing()\nfrom IPython.display import display\n\nimage = np.array([\n    [0, 1, 0, 0, 0, 0],\n    [0, 1, 0, 0, 0, 0],\n    [0, 1, 0, 0, 0, 0],\n    [0, 1, 0, 0, 0, 0],\n    [0, 1, 0, 1, 1, 1],\n    [0, 1, 0, 0, 0, 0],\n])\n\nkernel = np.array([\n    [1, -1],\n    [1, -1],\n])\n\ndisplay(sympy.Matrix(image))\ndisplay(sympy.Matrix(kernel))\n# Reformat for Tensorflow\nimage = tf.cast(image, dtype=tf.float32)\nimage = tf.reshape(image, [1, *image.shape, 1])\nkernel = tf.reshape(kernel, [*kernel.shape, 1, 1])\nkernel = tf.cast(kernel, dtype=tf.float32)","0ab401ef":"# View the solution (Run this code cell to receive credit!)\nq_4.check()","24a826bb":"image_filter = tf.nn.conv2d(\n    input=image,\n    filters=kernel,\n    strides=1,\n    padding='VALID',\n)\nimage_detect = tf.nn.relu(image_filter)\n\n# The first matrix is the image after convolution, and the second is\n# the image after ReLU.\ndisplay(sympy.Matrix(tf.squeeze(image_filter).numpy()))\ndisplay(sympy.Matrix(tf.squeeze(image_detect).numpy()))","5a37f20f":"# 2) Apply Convolution #\n\nNow we'll apply the kernel to the image by a convolution. The *layer* in Keras that does this is `layers.Conv2D`. What is the *backend function* in TensorFlow that performs the same operation?","9ef11870":"Now we'll do the first step of feature extraction, the filtering step. First run this cell to do some reformatting for TensorFlow.","fc2474ab":"**This notebook is an exercise in the [Computer Vision](https:\/\/www.kaggle.com\/learn\/computer-vision) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/ryanholbrook\/convolution-and-relu).**\n\n---\n","2356d2d6":"# 1) Define Kernel #\n\nUse the next code cell to define a kernel. You have your choice of what kind of kernel to apply. One thing to keep in mind is that the *sum* of the numbers in the kernel determines how bright the final image is. Generally, you should try to keep the sum of the numbers between 0 and 1 (though that's not required for a correct answer).\n\nIn general, a kernel can have any number of rows and columns. For this exercise, let's use a $3 \\times 3$ kernel, which often gives the best results. Define a kernel with `tf.constant`.","8a8e7965":"Once you've got the solution, run this cell to detect the feature with ReLU and see the result!\n\nThe image you see below is the feature map produced by the kernel you chose. If you like, experiment with some of the other suggested kernels above, or, try to invent one that will extract a certain kind of feature.\n","9fbd7c68":"# Apply Transformations #\n\nThe next few exercises walk through feature extraction just like the example in the tutorial. Run the following cell to load an image we'll use for the next few exercises.","2ad757f0":"You can run this cell to see some standard kernels used in image processing.","1d1b57c7":"# 4) Observe Convolution on a Numerical Matrix #\n\n\nWhat do you see? The image is simply a long vertical line on the left and a short horizontal line on the lower right. What about the kernel? What effect do you think it will have on this image? After you've thought about it, run the next cell for the answer.","dd199004":"Once you've got the correct answer, run this next cell to execute the convolution and see the result!","53b16d97":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/196537) to chat with other Learners.*","dd458856":"In the tutorial, our discussion of kernels and feature maps was mainly visual. We saw the effect of `Conv2D` and `ReLU` by observing how they transformed some example images.\n\nBut the operations in a convolutional network (like in all neural networks) are usually defined through mathematical functions, through a computation on numbers. In the next exercise, we'll take a moment to explore this point of view.\n\nLet's start by defining a simple array to act as an image, and another array to act as the kernel. Run the following cell to see these arrays.","b6318983":"# Introduction #\n\nIn this exercise, you'll work on building some intuition around feature extraction. First, we'll walk through the example we did in the tutorial again, but this time, with a kernel you choose yourself. We've mostly been working with images in this course, but what's behind all of the operations we're learning about is mathematics. So, we'll also take a look at how these feature maps can be represented instead as arrays of numbers and what effect convolution with a kernel will have on them.\n\nRun the cell below to get started!","a918c6fd":"Is the result what you expected?\n\n# Conclusion #\n\nIn this lesson, you learned about the first two operations a convolutional classifier uses for feature extraction: **filtering** an image with a **convolution** and **detecting** the feature with the **rectified linear unit**. \n\n# Keep Going #\n\nMove on to [**Lesson 3**](https:\/\/www.kaggle.com\/ryanholbrook\/maximum-pooling) to learn the final operation: **condensing** the feature map with **maximum pooling**!","1dae8f9a":"Now let's try it out. Run the next cell to apply convolution and ReLU to the image and display the result.","4f2a5531":"Can you see how the kernel you chose relates to the feature map it produced?\n\n# 3) Apply ReLU #\n\nNow detect the feature with the ReLU function. In Keras, you'll usually use this as the activation function in a `Conv2D` layer. What is the *backend function* in TensorFlow that does the same thing?"}}