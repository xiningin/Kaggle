{"cell_type":{"992ba9dd":"code","f98ea615":"code","77725f83":"code","8226effd":"code","0fa5c968":"code","7d6f93b5":"code","3a6b2657":"code","67f26092":"code","e0e6fe98":"markdown","004072d0":"markdown","db382dc4":"markdown","25b06978":"markdown","8ab7bdb3":"markdown","c84465f2":"markdown","49d64bfe":"markdown","dcf60276":"markdown","9546fb02":"markdown","0777b707":"markdown"},"source":{"992ba9dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f98ea615":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","77725f83":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","8226effd":"y = train_data[\"Survived\"]\n\ntrain_data[\"Title\"] = train_data.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\ntest_data[\"Title\"] = test_data.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\ntrain_data[\"familysize\"]=train_data[\"SibSp\"]+train_data[\"Parch\"]+1\ntest_data[\"familysize\"]=test_data[\"SibSp\"]+test_data[\"Parch\"]+1\n\nfeatures = [\"Pclass\", \"Sex\", \"Fare\", \"Title\", \"familysize\", \"Age\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n","0fa5c968":"X_test['Title_Capt']=X_test.apply(lambda x: 0, axis=1)\nX_test['Title_Countess']=X_test.apply(lambda x: 0, axis=1)\nX_test['Title_Don']=X_test.apply(lambda x: 0, axis=1)\nX['Title_Dona']=X.apply(lambda x: 0, axis=1)\nX_test['Title_Jonkheer']=X_test.apply(lambda x: 0, axis=1)\nX_test['Title_Lady']=X_test.apply(lambda x: 0, axis=1)\nX_test['Title_Major']=X_test.apply(lambda x: 0, axis=1)\nX_test['Title_Mlle']=X_test.apply(lambda x: 0, axis=1)\nX_test['Title_Mme']=X_test.apply(lambda x: 0, axis=1)\nX_test['Title_Sir']=X_test.apply(lambda x: 0, axis=1)","7d6f93b5":"from sklearn.neural_network import MLPClassifier\nfrom sklearn.preprocessing import StandardScaler\n\nscaler=StandardScaler()\nX_scaled = X\nX_scaled_test = X_test\nX_scaled[['Pclass','Fare','familysize','Age']] = scaler.fit_transform(X_scaled[['Pclass','Fare','familysize','Age']])\nX_scaled_test[['Pclass','Fare','familysize','Age']] = scaler.fit_transform(X_scaled_test[['Pclass','Fare','familysize','Age']])\n\nX = X.fillna(X.median())\nX_test = X_test.fillna(X_test.median())\nX_scaled = X_scaled.fillna(X_scaled.median())\nX_scaled_test = X_scaled_test.fillna(X_scaled_test.median())\n\nmodel = MLPClassifier()","3a6b2657":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import roc_curve, precision_recall_curve, auc, make_scorer, recall_score, accuracy_score, precision_score\nfrom sklearn.metrics import confusion_matrix, f1_score\n\nparam_grid = {\n    'alpha' : [0.001, 0.0001, 0.00001, 0.000001, 0.0000001],\n    'hidden_layer_sizes' : [(20,5), (20,6), (25,6), (25,7), (30,6), (30,7)],\n    'solver': ['lbfgs', 'adam', 'sgd' ],\n    'max_iter': [3000]\n}\n\nscorers = {\n    'precision_score': make_scorer(precision_score),\n    'recall_score': make_scorer(recall_score),\n    'accuracy_score': make_scorer(accuracy_score),\n    'f1_score': make_scorer(f1_score)\n}\n\n\ndef grid_search_wrapper(refit_score='f1_score'):\n\n    \"\"\"fits a GridSearchCV classifier using refit_score for optimization\n    prints classifier performance metrics\"\"\"\n                      \n    grid_search = GridSearchCV(model, param_grid, scoring=scorers, refit=refit_score, cv=10, return_train_score=True, n_jobs=-1)\n\n    grid_search.fit(X_scaled, y)\n\n    # make the predictions\n    labels_pred = grid_search.predict(X_scaled)\n\n    print('Best params for {}'.format(refit_score))\n    print(grid_search.best_params_)\n\n    # confusion matrix on the test data.\n    print('\\nConfusion matrix of MLP Classifier optimized for {} on the test data:'.format(refit_score))\n    print(pd.DataFrame(confusion_matrix(y, labels_pred),\n                 columns=['pred_neg', 'pred_pos'], index=['neg', 'pos']))\n    return grid_search\n\ngrid_search_clf = grid_search_wrapper()","67f26092":"model = MLPClassifier(solver='adam', alpha=1e-5, hidden_layer_sizes=(25,7), random_state=1, max_iter=3000)\nmodel.fit(X_scaled, y)\npredictions = model.predict(X_test)\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n\nlabels_pred = model.predict(X_scaled)\nprint(pd.DataFrame(confusion_matrix(y, labels_pred), columns=['pred_neg', 'pred_pos'], index=['neg', 'pos']))\n","e0e6fe98":"The accuracy with this model is 78.229% (for the test dataset). Training accuracy is 87%.\nIt can be further improved with additional feature engineering. I just wanted to show a method for model optimization.","004072d0":"# ****Titanic Dataset Neural Network Hyperparameter optimization","db382dc4":"I have started from the titanic dataset tutorial and added hyperparameter optimization on top of it.\nI have performaed it for MLP neural network but it can be easily used for any other model by changing the optimization parameters and model name.\nI hope that it is useful for beginners.","25b06978":"2. Since there are many title columns now, which do not exist in train and test dataset, add those.","8ab7bdb3":"1. Organize and modify features. For example extract titles such as mr, mrs, sir etc. Also columns Sibsp and parch are merged into family size and number of features are reduced.\n(Note: There are many other notebooks from other users doing the similar transformation of features)","c84465f2":"4. Import necessary libraries for hyperparameter tuning such GridSearchCV and metrics such as precision, recall,f1 score\nOne can select any of the metrics, I have chosen to use f1 score here as an example","49d64bfe":"3. Import libraries and fit the model.\nSince we will use a neural network, which works better with scaled data we also import standart scaler.\nAfter that will in NA values","dcf60276":"Import test data","9546fb02":"5. Use the hyperparameters tuned and export results\nI have also printed out confusion matrix","0777b707":"Load the train data and review"}}