{"cell_type":{"b921d2a8":"code","d059b27a":"code","9ebbafd3":"code","dd108681":"code","e0307fe0":"code","7b4edc17":"code","6deed17d":"code","6318f664":"code","257d2a27":"code","af055b0e":"code","57241e58":"code","7874407f":"markdown","d3dfeb82":"markdown","977bff24":"markdown","06783b24":"markdown","07d2e0e3":"markdown","0cd97708":"markdown","37462d09":"markdown","9481e8b6":"markdown","2b7e1fa1":"markdown","be874439":"markdown","c7c6a36b":"markdown"},"source":{"b921d2a8":"import pandas as pd\nimport numpy as np\nimport calendar\n\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\nimport plotly.offline as offline\nimport plotly.graph_objs as go\noffline.init_notebook_mode(connected = True)","d059b27a":"fig=go.Figure()\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2, 3],\n    y=[1.6, 1.6, 1.6, 1.6],\n    mode=\"text\", \n    text=[\"<span style='font-size:33px'><b>54<\/b><\/span>\", \n          \"<span style='font-size:33px'><b>33<\/b><\/span>\",\n          \"<span style='font-size:33px'><b>16<\/b><\/span>\",\n          \"<span style='font-size:33px'><b>56<\/b><\/span>\"],\n    textposition=\"bottom center\"\n))\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2, 3],\n    y=[1.1, 1.1, 1.1, 1.1],\n    mode=\"text\", \n    text=[\"Stores\", \"Products\", \"States\", \"Months\"],\n    textposition=\"bottom center\"\n))\nfig.add_hline(y=2.2, line_width=5, line_color='gray')\nfig.add_hline(y=0.3, line_width=3, line_color='gray')\nfig.update_yaxes(visible=False)\nfig.update_xaxes(visible=False)\nfig.update_layout(showlegend=False, height=300, width=700, \n                  title='Store Sales Summary', title_x=0.5, title_y=0.9,\n                  xaxis_range=[-0.5,3.6], yaxis_range=[-0.2,2.2],\n                  plot_bgcolor='#fafafa', paper_bgcolor='#fafafa',\n                  font=dict(size=23, color='#323232'),\n                  title_font=dict(size=35, color='#222'),\n                  margin=dict(t=90,l=70,b=0,r=70), \n    )","9ebbafd3":"df_holi = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/holidays_events.csv')\ndf_oil = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/oil.csv')\ndf_stores = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/stores.csv')\ndf_trans = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/transactions.csv')\n\ndf_train = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/train.csv')\ndf_test = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/test.csv')\n\n# copying of train data and merging other data\ndf_train1 = df_train.merge(df_holi, on = 'date', how='left')\ndf_train1 = df_train1.merge(df_oil, on = 'date', how='left')\ndf_train1 = df_train1.merge(df_stores, on = 'store_nbr', how='left')\ndf_train1 = df_train1.merge(df_trans, on = ['date', 'store_nbr'], how='left')\ndf_train1 = df_train1.rename(columns = {\"type_x\" : \"holiday_type\", \"type_y\" : \"store_type\"})\n\ndf_train1['date'] = pd.to_datetime(df_train1['date'])\ndf_train1['year'] = df_train1['date'].dt.year\ndf_train1['month'] = df_train1['date'].dt.month\ndf_train1['week'] = df_train1['date'].dt.isocalendar().week\ndf_train1['quarter'] = df_train1['date'].dt.quarter\ndf_train1['day_of_week'] = df_train1['date'].dt.day_name()\ndf_train1[:2]\n\n","dd108681":"# data\ndf_st_sa = df_train1.groupby('store_type').agg({\"sales\" : \"mean\"}).reset_index().sort_values(by='sales', ascending=False)\ndf_fa_sa = df_train1.groupby('family').agg({\"sales\" : \"mean\"}).reset_index().sort_values(by='sales', ascending=False)[:10]\ndf_cl_sa = df_train1.groupby('cluster').agg({\"sales\" : \"mean\"}).reset_index() \n# chart color\ndf_fa_sa['color'] = '#496595'\ndf_fa_sa['color'][2:] = '#c6ccd8'\ndf_cl_sa['color'] = '#c6ccd8'\n\n# chart\nfig = make_subplots(rows=2, cols=2, \n                    specs=[[{\"type\": \"bar\"}, {\"type\": \"pie\"}],\n                           [{\"colspan\": 2}, None]],\n                    column_widths=[0.7, 0.3], vertical_spacing=0, horizontal_spacing=0.02,\n                    subplot_titles=(\"Top 10 Highest Product Sales\", \"Highest Sales in Stores\", \"Clusters Vs Sales\"))\n\nfig.add_trace(go.Bar(x=df_fa_sa['sales'], y=df_fa_sa['family'], marker=dict(color= df_fa_sa['color']),\n                     name='Family', orientation='h'), \n                     row=1, col=1)\nfig.add_trace(go.Pie(values=df_st_sa['sales'], labels=df_st_sa['store_type'], name='Store type',\n                     marker=dict(colors=['#334668','#496595','#6D83AA','#91A2BF','#C8D0DF']), hole=0.7,\n                     hoverinfo='label+percent+value', textinfo='label'), \n                    row=1, col=2)\nfig.add_trace(go.Bar(x=df_cl_sa['cluster'], y=df_cl_sa['sales'], \n                     marker=dict(color= df_cl_sa['color']), name='Cluster'), \n                     row=2, col=1)\n\n# styling\nfig.update_yaxes(showgrid=False, ticksuffix=' ', categoryorder='total ascending', row=1, col=1)\nfig.update_xaxes(visible=False, row=1, col=1)\nfig.update_xaxes(tickmode = 'array', tickvals=df_cl_sa.cluster, ticktext=[i for i in range(1,17)], row=2, col=1)\nfig.update_yaxes(visible=False, row=2, col=1)\nfig.update_layout(height=500, bargap=0.2,\n                  margin=dict(b=0,r=20,l=20), xaxis=dict(tickmode='linear'),\n                  title_text=\"Average Sales Analysis\",\n                  template=\"plotly_white\",\n                  title_font=dict(size=29, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'), \n                  hoverlabel=dict(bgcolor=\"#f2f2f2\", font_size=13, font_family=\"Lato, sans-serif\"),\n                  showlegend=False)\nfig.show()","e0307fe0":"# data \ndf_2013 = df_train1[df_train1['year']==2013][['month','sales']]\ndf_2013 = df_2013.groupby('month').agg({\"sales\" : \"mean\"}).reset_index().rename(columns={'sales':'s13'})\ndf_2014 = df_train1[df_train1['year']==2014][['month','sales']]\ndf_2014 = df_2014.groupby('month').agg({\"sales\" : \"mean\"}).reset_index().rename(columns={'sales':'s14'})\ndf_2015 = df_train1[df_train1['year']==2015][['month','sales']]\ndf_2015 = df_2015.groupby('month').agg({\"sales\" : \"mean\"}).reset_index().rename(columns={'sales':'s15'})\ndf_2016 = df_train1[df_train1['year']==2016][['month','sales']]\ndf_2016 = df_2016.groupby('month').agg({\"sales\" : \"mean\"}).reset_index().rename(columns={'sales':'s16'})\ndf_2017 = df_train1[df_train1['year']==2017][['month','sales']]\ndf_2017 = df_2017.groupby('month').agg({\"sales\" : \"mean\"}).reset_index()\ndf_2017_no = pd.DataFrame({'month': [9,10,11,12], 'sales':[0,0,0,0]})\ndf_2017 = df_2017.append(df_2017_no).rename(columns={'sales':'s17'})\ndf_year = df_2013.merge(df_2014,on='month').merge(df_2015,on='month').merge(df_2016,on='month').merge(df_2017,on='month')\n\n# top levels\ntop_labels = ['2013', '2014', '2015', '2016', '2017']\n\ncolors = ['rgba(38, 24, 74, 0.8)', 'rgba(71, 58, 131, 0.8)',\n          'rgba(122, 120, 168, 0.8)', 'rgba(164, 163, 204, 0.85)',\n          'rgba(190, 192, 213, 1)']\n\n# X axis value \ndf_year = df_year[['s13','s14','s15','s16','s17']].replace(np.nan,0)\nx_data = df_year.values\n\n# y axis value (Month)\ndf_2013['month'] =['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\ny_data = df_2013['month'].tolist()\n\nfig = go.Figure()\nfor i in range(0, len(x_data[0])):\n    for xd, yd in zip(x_data, y_data):\n        fig.add_trace(go.Bar(\n            x=[xd[i]], y=[yd],\n            orientation='h',\n            marker=dict(\n                color=colors[i],\n                line=dict(color='rgb(248, 248, 249)', width=1)\n            )\n        ))\n\nfig.update_layout(title='Avg Sales for each Year',\n    xaxis=dict(showgrid=False, \n               zeroline=False, domain=[0.15, 1]),\n    yaxis=dict(showgrid=False, showline=False,\n               showticklabels=False, zeroline=False),\n    barmode='stack', \n    template=\"plotly_white\",\n    margin=dict(l=0, r=50, t=100, b=10),\n    showlegend=False, \n)\n\nannotations = []\nfor yd, xd in zip(y_data, x_data):\n    # labeling the y-axis\n    annotations.append(dict(xref='paper', yref='y',\n                            x=0.14, y=yd,\n                            xanchor='right',\n                            text=str(yd),\n                            font=dict(family='Arial', size=14,\n                                      color='rgb(67, 67, 67)'),\n                            showarrow=False, align='right'))\n    # labeling the first Likert scale (on the top)\n    if yd == y_data[-1]:\n        annotations.append(dict(xref='x', yref='paper',\n                                x=xd[0] \/ 2, y=1.1,\n                                text=top_labels[0],\n                                font=dict(family='Arial', size=14,\n                                          color='rgb(67, 67, 67)'),\n                          showarrow=False))\n    space = xd[0]\n    for i in range(1, len(xd)):\n            # labeling the Likert scale\n            if yd == y_data[-1]:\n                annotations.append(dict(xref='x', yref='paper',\n                                        x=space + (xd[i]\/2), y=1.1,\n                                        text=top_labels[i],\n                                        font=dict(family='Arial', size=14,\n                                                  color='rgb(67, 67, 67)'),\n                                        showarrow=False))\n            space += xd[i]\nfig.update_layout(\n    annotations=annotations)\nfig.show()","7b4edc17":"# data\ndf_m_sa = df_train1.groupby('month').agg({\"sales\" : \"mean\"}).reset_index()\ndf_m_sa['sales'] = round(df_m_sa['sales'],2)\ndf_m_sa['month_text'] = df_m_sa['month'].apply(lambda x: calendar.month_abbr[x])\ndf_m_sa['text'] = df_m_sa['month_text'] + ' - ' + df_m_sa['sales'].astype(str) \n\ndf_w_sa = df_train1.groupby('week').agg({\"sales\" : \"mean\"}).reset_index() \ndf_q_sa = df_train1.groupby('quarter').agg({\"sales\" : \"mean\"}).reset_index() \n# chart color\ndf_m_sa['color'] = '#496595'\ndf_m_sa['color'][:-1] = '#c6ccd8'\ndf_w_sa['color'] = '#c6ccd8'\n\n# chart\nfig = make_subplots(rows=2, cols=2, vertical_spacing=0.08,\n                    row_heights=[0.7, 0.3], \n                    specs=[[{\"type\": \"bar\"}, {\"type\": \"pie\"}],\n                           [{\"colspan\": 2}, None]],\n                    column_widths=[0.7, 0.3],\n                    subplot_titles=(\"Month wise Avg Sales Analysis\", \"Quarter wise Avg Sales Analysis\", \n                                    \"Week wise Avg Sales Analysis\"))\n\nfig.add_trace(go.Bar(x=df_m_sa['sales'], y=df_m_sa['month'], marker=dict(color= df_m_sa['color']),\n                     text=df_m_sa['text'],textposition='auto',\n                     name='Month', orientation='h'), \n                     row=1, col=1)\nfig.add_trace(go.Pie(values=df_q_sa['sales'], labels=df_q_sa['quarter'], name='Quarter',\n                     marker=dict(colors=['#334668','#496595','#6D83AA','#91A2BF','#C8D0DF']), hole=0.7,\n                     hoverinfo='label+percent+value', textinfo='label+percent'), \n                     row=1, col=2)\nfig.add_trace(go.Scatter(x=df_w_sa['week'], y=df_w_sa['sales'], mode='lines+markers', fill='tozeroy', fillcolor='#c6ccd8',\n                     marker=dict(color= '#496595'), name='Week'), \n                     row=2, col=1)\n\n# styling\nfig.update_yaxes(visible=False, row=1, col=1)\nfig.update_xaxes(visible=False, row=1, col=1)\nfig.update_xaxes(tickmode = 'array', tickvals=df_w_sa.week, ticktext=[i for i in range(1,53)], \n                 row=2, col=1)\nfig.update_yaxes(visible=False, row=2, col=1)\nfig.update_layout(height=750, bargap=0.15,\n                  margin=dict(b=0,r=20,l=20), \n                  title_text=\"Average Sales Analysis\",\n                  template=\"plotly_white\",\n                  title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'),\n                  hoverlabel=dict(bgcolor=\"#f2f2f2\", font_size=13, font_family=\"Lato, sans-serif\"),\n                  showlegend=False)\nfig.show()","6deed17d":"# data\ndf_dw_sa = df_train1.groupby('day_of_week').agg({\"sales\" : \"mean\"}).reset_index()\ndf_dw_sa.sales = round(df_dw_sa.sales, 2)\n\n# chart\nfig = px.bar(df_dw_sa, y='day_of_week', x='sales', title='Avg Sales vs Day of Week',\n             color_discrete_sequence=['#c6ccd8'], text='sales',\n             category_orders=dict(day_of_week=[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\", \"Friday\",\"Saturday\",\"Sunday\"]))\nfig.update_yaxes(showgrid=False, ticksuffix=' ', showline=False)\nfig.update_xaxes(visible=False)\nfig.update_layout(margin=dict(t=60, b=0, l=0, r=0), height=350,\n                  hovermode=\"y unified\", \n                  yaxis_title=\" \", template='plotly_white',\n                  title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'),\n                  hoverlabel=dict(bgcolor=\"#c6ccd8\", font_size=13, font_family=\"Lato, sans-serif\"))","6318f664":"# data\ndf_st_ht = df_train1.groupby(['store_type','holiday_type']).agg({\"sales\" : \"mean\"}).reset_index()\ndf_st_ht['sales'] = round(df_st_ht['sales'], 2)\n\n# chart\nfig = px.scatter(df_st_ht, x='store_type', color='sales', y='holiday_type', size='sales',\n                 color_discrete_sequence=px.colors.qualitative.D3,\n                 title=\"Average Sales: Store Type Vs Holiday Type\")\n# styling\nfig.update_yaxes(ticksuffix='  ')\nfig.update_layout(height=400, xaxis_title='', yaxis_title='',\n                  margin=dict(b=0),\n                  plot_bgcolor='#fafafa', paper_bgcolor='#fafafa',\n                  title_font=dict(size=29, color='#444', family=\"Lato, sans-serif\"),\n                  font=dict(color='#555'), \n                  hoverlabel=dict(bgcolor=\"#f2f2f2\", font_size=13, font_family=\"Lato, sans-serif\"))\nfig.show()","257d2a27":"# data\ndf_y_m_st = df_train1.groupby(['year','month','store_type']).agg({\"sales\" : \"mean\"}).reset_index()\ndf_y_m_st['sales'] = round(df_y_m_st['sales'], 2)\n\n# chart\nfig = px.scatter(df_y_m_st, x='month', y='store_type', color='sales', size='sales', \n                 facet_row='year', title='Average Sales: Store Type Vs Year(Month)')\n# styling\nfig.update_yaxes(ticksuffix='  ')\nfig.update_xaxes(tickmode = 'array', tickvals=[i for i in range(1,13)], \n                 ticktext=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\nfig.update_layout(height=900, xaxis_title='', yaxis_title='',\n                  margin=dict(t=70, b=0),\n                  plot_bgcolor='#fafafa', paper_bgcolor='#fafafa',\n                  title_font=dict(size=29, color='#444', family=\"Lato, sans-serif\"),\n                  font=dict(color='#555'), \n                  hoverlabel=dict(bgcolor=\"#f2f2f2\", font_size=13, font_family=\"Lato, sans-serif\"))\nfig.show()","af055b0e":"# data\ndf_m_ht = df_train1.groupby(['month','holiday_type']).agg({\"sales\" : \"mean\"}).reset_index()\ndf_m_ht['sales'] = round(df_m_ht['sales'], 2)\n\n# chart\nfig = px.scatter(df_m_ht, x='month', color='sales', y='holiday_type', size='sales',\n                 color_discrete_sequence=px.colors.qualitative.D3,\n                 title=\"Average Sales: Month Vs Holiday Type\")\n# styling\nfig.update_yaxes(ticksuffix='  ')\nfig.update_xaxes(tickmode = 'array', tickvals=[i for i in range(1,13)], \n                 ticktext=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\nfig.update_layout(height=400, xaxis_title='', yaxis_title='',\n                  margin=dict(b=0),\n                  plot_bgcolor='#fafafa', paper_bgcolor='#fafafa',\n                  title_font=dict(size=29, color='#444', family=\"Lato, sans-serif\"),\n                  font=dict(color='#555'), \n                  hoverlabel=dict(bgcolor=\"#f2f2f2\", font_size=13, font_family=\"Lato, sans-serif\"))\nfig.show()","57241e58":"# data\ndf_y_m_ht = df_train1.groupby(['year','month','holiday_type']).agg({\"sales\" : \"mean\"}).reset_index()\ndf_y_m_ht['sales'] = round(df_y_m_ht['sales'], 2)\n\n# chart\nfig = px.scatter(df_y_m_ht, x='month', y='holiday_type', color='sales', size='sales', \n                 facet_row='year', title='Average Sales: Holiday_type Vs Year(Month)')\n# styling\nfig.update_yaxes(ticksuffix='  ')\nfig.update_xaxes(tickmode = 'array', tickvals=[i for i in range(1,13)], \n                 ticktext=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\nfig.update_layout(height=900, xaxis_title='', yaxis_title='',\n                  margin=dict(t=70, b=0),\n                  plot_bgcolor='#fafafa', paper_bgcolor='#fafafa',\n                  title_font=dict(size=29, color='#444', family=\"Lato, sans-serif\"),\n                  font=dict(color='#555'), \n                  hoverlabel=dict(bgcolor=\"#f2f2f2\", font_size=13, font_family=\"Lato, sans-serif\"))\nfig.show()","7874407f":"<p style=\"font-size:19px;\">\n    \ud83d\udccc <b>Interpret:<\/b><br><br>\n    Highest sales are made in December month and then decreases in January.<br>\n    Sales are increasing gradually from 2013 to 2017.<br>\n    <b>Note:<\/b> We don't have data for 2017: 9th to 12th month. \n<\/p>","d3dfeb82":"### Average Sales Analysis","977bff24":"### Importing the library","06783b24":"## Dataset\n> The data is about store sales forcasting where contaning 54 stores having 33 products in 16 states.<br>\n\ud83d\udcdd After combining the data we have ```df_train1``` dataset.","07d2e0e3":"<p style=\"font-size:25px; color:#496595\">Competition Purpose<\/p>\n\nThe purpose of the comeptiton is to predict sales for 1000s of products sold at favourite stores located in South America\u2019s west coast **Ecuador**. If you want to know more about the company, gave a look [here](https:\/\/www.corporacionfavorita.com\/en\/)\n<br>\n\n\n<br><p style=\"font-size:25px; color:#496595\">Some information about the company<\/p>\n\nFavorita Corporation and its commercial, industrial and real estate subsidiaries have a strong presence throughout the country. Its different lines of business and formats allows us to adapt our products, services and experiences offering to the local realities, according to your needs. Internationally, the Corporation\u2019s subsidiaries have activities in six countries in the region, in addition to the ones in Ecuador.\n\n","0cd97708":"Most of the sales were done in Transfer Holiday and that to be in Christmas Holidays month December and January and pre-Christmas November month and May month showed a great trend in shopping.\nLet's take a closer look towards year and holidays type with sales.","37462d09":"<h1 style=\"color:#496595\"> Store Analysis <\/h1>","9481e8b6":"### Average Sales Analysis for Year-Month","2b7e1fa1":"Highest sales are made by the products like grocery and beverages.\nStore A has the highest sales which is 38%.","be874439":"<p style=\"font-size:19px\">\ud83d\udccc <b>Interpret:<\/b><br><br>\n    As we saw in the above chart there is an upward trend in sales over the time. Although there are ups and downs at every point in time, generally we can observe that the trend increases. Also we can notice how the ups and downs seem to be a bit regular, it means we might be observing a seasonal pattern here too. Let\u2019s take a closer look by observing some year\u2019s data:<br>\n    Highest sales are made on <b>Sunday<\/b>.<br>\n    December month has the highest sales.<br>\n    <b>Note:<\/b> We don't have data for 2017: 9th to 12th month. \n<\/p>","c7c6a36b":"### Average Sales Analysis: Time Series"}}