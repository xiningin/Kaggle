{"cell_type":{"5cdf316b":"code","a948a77f":"code","fe679cb1":"code","deb6efcf":"code","694d044c":"code","c3105349":"code","8a28cbe0":"code","fa2e0915":"code","c5683f62":"code","a1e26e0a":"markdown","655be064":"markdown","525af7c6":"markdown","50f74231":"markdown","748c8e50":"markdown","fc51c9cc":"markdown","fffba141":"markdown","4b0b8ede":"markdown","473f99e6":"markdown","a0696777":"markdown","62cee0ab":"markdown","6420d8d8":"markdown","02a3b154":"markdown"},"source":{"5cdf316b":"import PIL\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nfrom PIL import ImageFont\nfrom PIL import ImageDraw \nimport os\nimport random\nimport string","a948a77f":"fonts = []","fe679cb1":"for font in os.listdir(\"..\/input\/dafont-fonts-for-commercial-use\"):\n    fonts.append(ImageFont.truetype(os.path.join(\"..\/input\/dafont-fonts-for-commercial-use\", font), 30))","deb6efcf":"letters = list(string.ascii_letters) + [\"\u00e9\",\"\u00e8\",\"\u00e0\"]\ndigits = list(string.digits)\n#punctuation = list(string.punctuation) #You could use this but it includes symbols in which I'm not interested\npunctuation = [\":\",\";\",\"!\",\"?\",\"'\",'\"'] + [\",\",\".\"]*4 #Points and commas are usually much more common than others\nsymbols = [\"#\",\"$\",\"*\",\"@\",\"=\",\"-\",\"+\",\"<\",\">\",\"\/\"] + [\"(\",\")\"]*2 #I kinda felt that parentheses are more common\n#than other symbols. Not sure though, just a feeling.\ncharacs = letters*5 + digits*2 + punctuation + symbols #These are the proportions that suit me.","694d044c":"def list_to_string(thelist):\n    s=\"\"\n    for c in thelist:\n        s+=c\n    return s","c3105349":"list_to_string(random.choices(characs, k=10))","8a28cbe0":"os.mkdir(\".\/Data\")","fa2e0915":"pics = []\nfor i in range(1000):\n    #Setting rgb colors for light-colored backgrounds:\n    r = random.randint(128,255)\n    g = random.randint(128,255)\n    b = random.randint(128,255)\n    #Creating an image and setting it up for drawing\n    img  = Image.new( mode = \"RGB\", size = (196, 64), color = (r,g,b) )\n    draw = ImageDraw.Draw(img)\n    \n    font = fonts[i%100] #I have 100 fonts and want them equally distributed. You can pick them randomly though.\n    \n    text = list_to_string(random.choices(characs, k=10)) #random word\n    \n    #Setting text color to be dark\n    r = random.randint(0,128)\n    g = random.randint(0,128)\n    b = random.randint(0,128)\n    #I picked the coordinates of the text to be in the middle of the image.\n    #anchor = \"mm\" means that these coordinates are of the center of the text, not its top-left for example.\n    draw.text(xy=(196\/2, 64\/2),text=text,fill=(r,g,b),font=font, anchor=\"mm\")\n    \n    os.mkdir(f\".\/Data\/Image{i}\") #Creating a subfolder for the image\n    img.save(f\".\/Data\/Image{i}\/img.png\") #Saving the image\n    textfile = open(f\".\/Data\/Image{i}\/text.txt\",\"w\") #Creating an empty text file\n    textfile.write(text) #Saving the text of the image\n    pics.append(img) #I'm putting them in a list so that i can visualize them easily","c5683f62":"fig, axes = plt.subplots(nrows=50, ncols=2, figsize=(25,500))\nfor index in range(100):\n    pic=pics[index]\n    i, j = index \/\/ 2, index % 2\n    axes[i,j].imshow(pic)\nplt.show()","a1e26e0a":"So first of all we'll be loading fonts into a list.","655be064":"#### The main dish: Creating 1000 annotated pictures of handwriting.  \nYou can make a lot of them. These are only about 53MB in total.","525af7c6":"### Hello and welcome.\n##### This tutorial shows you how to create pictures containing (kinda) handwritten words.\n##### You're going to need files for the fonts you wish to use.\n##### I imported font files into my input directory.\n##### I used 100 handwriting fonts from dafont.com\n##### I only used fonts that are free for commercial use.  \n##### Have fun.","50f74231":"# Tutorial: How to create artificial data for Handwriting OCR","748c8e50":"In the following cell are the packages you're going to need.","fc51c9cc":"Creating the folder in which the data will be stored:","fffba141":"#### Notes:\nSome symbols show up as squares when they're not supported by a certain font.  \nThis issue is font-specific and requires one to go through every single font and see which symbols aren't supported.  \nSome fonts are bigger than others, and thus text isn't always the same size.  \nIn a few examples the text is too big for the image.  \nWe can fix this by setting a fontsize for each font. This will require thorough experimentation.  \nOr we can just divide fonts into a number of classes (2 for example) and assign a font size to each class.  \nAnother thing you can do here is remove certain fonts that might be unsuitable for the task you're working on.","4b0b8ede":"Here is an example of how to generate a random word:","473f99e6":"Visualizing 100 samples:","a0696777":"\u0628\u0633\u0645 \u0627\u0644\u0644\u0647","62cee0ab":"Next, we make a list of all characters that we want our OCR system\/model to be able to recognize.  \n##### Note:\nLetters are usually more prevalent than symbols, digits, and punctuation marks.  \nThus, in the following cell, I made sure my list of characters includes many more letters than other characters.","6420d8d8":"### That's it.\n### You could further try making the images more different and varied by randomly applying processing techniques such as rotating, cropping, translating, blurring, changing contrast, etc...\n### I hope you benefitted.\n### Have a nice day.\n### \u0627\u0644\u062d\u0645\u062f \u0644\u0644\u0647 \u0627\u0644\u0630\u064a \u0628\u0646\u0639\u0645\u062a\u0647 \u062a\u062a\u0645 \u0627\u0644\u0635\u0627\u0644\u062d\u0627\u062a","02a3b154":"The following function just converts lists (of characters) to strings.  "}}