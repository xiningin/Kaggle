{"cell_type":{"1bee9747":"code","634e35d2":"code","65388644":"code","2b878b7b":"code","46444671":"code","88818e4b":"code","061b6d1d":"code","703148c0":"code","04205f03":"code","36412d9c":"code","16c0436b":"code","11086c68":"code","e6c8f625":"code","7bcb23dd":"markdown","f22c00d7":"markdown","5d90328e":"markdown","6715b372":"markdown","504044d8":"markdown","da49c56b":"markdown","40812662":"markdown","86f6a98d":"markdown","93fe0d55":"markdown","e4f992f2":"markdown"},"source":{"1bee9747":"import numpy as np\nimport matplotlib.pyplot as plt","634e35d2":"np.geomspace(1, 1000, num=4)","65388644":"np.geomspace(1000, 1, num=4)","2b878b7b":"np.geomspace(1, 1000, num=3, endpoint=False)","46444671":"np.geomspace(1000, 1, num=3, endpoint=False)","88818e4b":"np.geomspace(1, 1000, num=4, endpoint=False)","061b6d1d":"np.geomspace(1000, 1, num=4, endpoint=False)","703148c0":"np.geomspace(1, 256, num=9)","04205f03":"np.geomspace(1, 256, num=20)","36412d9c":"np.around(np.geomspace(1, 256, num=20)).astype(int)","16c0436b":"np.geomspace(1j, 1000j, num=4)","11086c68":"np.geomspace(-1+0j, 1+0j, num=5)","e6c8f625":"N = 5\ny = np.zeros(N)\n\nplt.semilogx(np.geomspace(1, 1000, N, endpoint=True), y + 1, 'o')\nplt.semilogx(np.geomspace(1, 1000, N, endpoint=False), y + 2, 'o')\n\nplt.axis([0.5, 2000, 0, 3])\nplt.grid(True, color='0.7', linestyle='-', which='both', axis='both')\nplt.show()","7bcb23dd":"# circle","f22c00d7":"## endpoint \nIf true, stop is the last sample. Otherwise, it is not included. Default is True.","5d90328e":"# plot","6715b372":"# num = 9 and num 20 ","504044d8":"## reverse","da49c56b":"# straight line","40812662":"Return numbers spaced evenly on a log scale (a geometric progression).\n\nThis is similar to logspace, but with endpoints specified directly. Each output sample is a constant multiple of the previous.","86f6a98d":"# start , end , num ,endpoint","93fe0d55":"# start , end , num","e4f992f2":"# numpy.geomspace"}}