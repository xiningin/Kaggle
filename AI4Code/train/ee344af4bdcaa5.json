{"cell_type":{"310733ba":"code","ab381610":"code","313cbc7c":"code","26fcc595":"code","a546ff63":"code","a9e89a4e":"code","d76ae641":"code","05472545":"code","e43212ae":"code","0fd7b580":"code","4233c948":"code","d7bab39f":"code","c00c1a48":"code","d18ba56e":"code","7d849346":"code","debf106a":"code","a42c0e4b":"code","f107f8d9":"code","3027d951":"code","05b3b2f1":"code","4f3f64be":"code","9f44331a":"code","692cc356":"code","41de32be":"code","a736a152":"code","148f2699":"code","ad31b676":"code","31da5850":"code","0009b9aa":"code","61ee36a7":"code","e2953502":"code","d3977ee7":"code","8626d93d":"code","24439746":"code","189f7953":"code","568f1cab":"code","033b8b5e":"code","4c84fba2":"code","225a7bcc":"code","faac1728":"code","234fdf58":"code","928692dc":"code","b39dc817":"code","6f970f57":"code","71d96070":"code","52c9b110":"code","cfd01c81":"markdown","223a0eae":"markdown","61136b60":"markdown","ea3135e8":"markdown","eb1b7121":"markdown","2532fee5":"markdown","61ca1181":"markdown","37d5ff4e":"markdown","596d7b4e":"markdown","aebf7f9d":"markdown","15808813":"markdown","03381bf3":"markdown","71da00e9":"markdown","b2625437":"markdown","06835861":"markdown","1df5624d":"markdown","6debe206":"markdown","699e8558":"markdown","8363f892":"markdown","173af4b8":"markdown","e3d0bf8a":"markdown","c086b28b":"markdown","b9847e85":"markdown","c99fc973":"markdown","28d4592e":"markdown","6eb81513":"markdown","0e4c1664":"markdown","89118a25":"markdown","d2903afe":"markdown","1523b970":"markdown","ef608a0d":"markdown"},"source":{"310733ba":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings('ignore')\nimport datetime\nimport matplotlib.patches as mpatches\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go","ab381610":"summary_cases = pd.read_csv(\"..\/input\/covid19-global-dataset\/worldometer_coronavirus_summary_data.csv\")\nvaccination = pd.read_csv(\"..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")\ndaily_cases = pd.read_csv(\"..\/input\/covid19-global-dataset\/worldometer_coronavirus_daily_data.csv\")","313cbc7c":"summary_cases.info()","26fcc595":"daily_cases.info()","a546ff63":"vaccination.info()","a9e89a4e":"plt.figure(figsize=(19, 4)) # Set the size of the visualizations\nplt.subplot(1, 3, 1) # Set the number of columns, rows and the position of the graph\nsns.heatmap(vaccination.isnull(), cbar=False, cmap='nipy_spectral_r')\nplt.title('Missing values vaccination')\nplt.subplot(1, 3, 2)# Set the number of columns, rows and the position of the graph\nsns.heatmap(summary_cases.isnull(), cbar=False, cmap='nipy_spectral_r')\nplt.title('Missing values covid summary')        \nplt.subplot(1, 3, 3)# Set the number of columns, rows and the position of the graph\nsns.heatmap(daily_cases.isnull(), cbar=False, cmap='nipy_spectral_r')\nplt.title('Missing values covid daily')\nplt.show()","d76ae641":"total = summary_cases.isnull().sum().sort_values(ascending=False)\npercent = (summary_cases.isnull().sum()\/summary_cases.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total' , 'Percent'])\nmissing_data","05472545":"summary_cases = summary_cases.replace(np.nan,0)","e43212ae":"total = daily_cases.isnull().sum().sort_values(ascending=False)\npercent = (daily_cases.isnull().sum()\/daily_cases.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total' , 'Percent'])\nmissing_data.head(20)","0fd7b580":"daily_cases = daily_cases.replace(np.nan,0)","4233c948":"total = daily_cases.isnull().sum().sort_values(ascending=False)\npercent = (vaccination.isnull().sum()\/daily_cases.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total' , 'Percent'])\nmissing_data.head(20)","d7bab39f":"vaccination = vaccination.replace(np.nan,0)","c00c1a48":"# function to easily agrregate columns\ndef aggregate(df: pd.Series, agg_col: str) -> pd.DataFrame:\n    \n    data = df.groupby(\"country\")[agg_col].max()\n    data = pd.DataFrame(data)\n    \n    return data","d18ba56e":"# define the columns we want to summarize\ncols_to_summarize = ['people_vaccinated', \n                     'people_vaccinated_per_hundred', \n                     'people_fully_vaccinated', \n                     'people_fully_vaccinated_per_hundred', \n                     'total_vaccinations_per_hundred', \n                     'total_vaccinations']\ncols = ['daily_new_cases','daily_new_deaths']\n\nsummary = summary_cases.set_index(\"country\")\nvaccines = vaccination[['country', 'vaccines']].drop_duplicates().set_index('country')\nsummary = summary.join(vaccines)\n# summary = pd.merge(vaccination, daily_cases, on=['date'], how='inner')\n\nfor col in cols_to_summarize:   \n    summary = summary.join(aggregate(vaccination, col))\n\nfor col in cols:   \n    summary = summary.join(aggregate(daily_cases, col))\n    \nsummary['percentage_vaccinated'] = summary.total_vaccinations \/ summary.population * 100\nsummary['tested_positive'] = summary.total_confirmed \/ summary.total_tests * 100","7d849346":"summary.reset_index(level=0, inplace=True)","debf106a":"summary","a42c0e4b":"summary = summary.drop(['serious_or_critical','total_cases_per_1m_population','total_deaths_per_1m_population','total_tests_per_1m_population'],axis=1)","f107f8d9":"summary.info()","3027d951":"summary","05b3b2f1":"data = summary.reset_index().dropna(subset=['vaccines','country'])\nplt.subplots(figsize=(15, 15))\nsns.heatmap(summary.corr() , annot=True, square=True )\nplt.show()","4f3f64be":"top_20 = summary.groupby('country')['total_confirmed'].max().sort_values(ascending = False).head(20)\ntop_20.plot(x='country',y=['total_confirmed'],kind = \"bar\",figsize = (12 , 6),color = \"brown\",title=\"Total confirmed Cases\")\nplt.xticks(fontsize=15, rotation=45)\nplt.yticks(fontsize=15)","9f44331a":"top_20 = summary.groupby('country')['active_cases'].max().sort_values(ascending = False).head(20)\ntop_20.plot(x='country',y=['active_cases'],kind = \"bar\",figsize = (12 , 6),colormap = \"Accent\",title=\"Total active cases\")\nplt.xticks(fontsize=15, rotation=45)\nplt.yticks(fontsize=15)","692cc356":"top_20 = summary.groupby('country')['total_deaths'].max().sort_values(ascending = False).head(20)\ntop_20.plot(x='country',y=['total_deaths'],kind = \"bar\",figsize = (12 , 6),colormap = \"plasma\",title=\"Total Deaths\")\nplt.xticks(fontsize=15, rotation=45)\nplt.yticks(fontsize=15)","41de32be":"title=\"Death Summary\"\ndeath = summary.copy()\ndeath['death_rate'] =  death['total_deaths']*100\/death['total_confirmed']\ndeath = death.dropna(subset=['death_rate'])\nfig = px.scatter_geo(death, locations=\"country\", color=\"continent\",\n                     locationmode='country names',\n                     hover_name=\"country\", size=\"death_rate\",\n                     projection=\"natural earth\")\nfig.update_layout(title=title, title_x=0.45)\nfig.show()","a736a152":"top_20 = summary.groupby('country')['total_recovered'].max().sort_values(ascending = False).head(20)\ntop_20.plot(x='country',y=['total_recovered'],kind = \"bar\",figsize = (12 , 6),colormap = \"summer\",title=\"Total Recovered\")\nplt.xticks(fontsize=15, rotation=45)\nplt.yticks(fontsize=15)","148f2699":"top_20 = summary.sort_values('total_confirmed',ascending = False).head(20)\ntop_20.plot(x='country',y=['total_recovered','total_confirmed'],kind = \"bar\",figsize = (20 , 10),ylabel=\"Cases\",\n            title = \"Total_confirmed vs. Total_recovered\",colormap='rainbow')\nplt.xticks(fontsize=15, rotation=45)\nplt.yticks(fontsize=15)","ad31b676":"top_20 = summary.sort_values('total_recovered',ascending = False).head(10)\ntop_20.plot(x='country',y=['total_recovered','active_cases'],kind = \"bar\",figsize = (20 , 10),ylabel=\"Cases\"\n            ,title = \"Total_recovered vs. Active cases\",colormap='Spectral')\nplt.xticks(fontsize=15, rotation=45)\nplt.yticks(fontsize=15)","31da5850":"rise=pd.DataFrame(daily_cases.groupby('date')['daily_new_cases'].sum())\nrise = rise.reset_index()\nfig = px.bar(rise, x='date', y='daily_new_cases',width=700, height=400)\nfig.show()","0009b9aa":"fig = px.line(daily_cases, x=\"date\", y=\"daily_new_cases\", color='country',title= \"Daily rise in cases\")\nfig.show()","61ee36a7":"fully=summary.groupby('country')['people_vaccinated','people_fully_vaccinated'].max().sort_values(by='people_vaccinated',ascending = False).head(20)\nfully['total'] = fully['people_vaccinated'] + fully['people_fully_vaccinated']\n\nfully","e2953502":"fully.reset_index(level=0, inplace=True)","d3977ee7":"sns.set_style(\"white\")\nsns.set_context({\"figure.figsize\": (24, 10)})\n\nsns.barplot(x = fully['country'], y = fully['total'], color = \"red\")\n\nbottom_plot = sns.barplot(x = fully['country'], y = fully['people_fully_vaccinated'], color = \"#0000A3\")\n\n\ntopbar = plt.Rectangle((0,0),1,1,fc=\"red\", edgecolor = 'none')\nbottombar = plt.Rectangle((0,0),1,1,fc='#0000A3',  edgecolor = 'none')\nl = plt.legend([bottombar, topbar], ['Fully vaccinated', 'Vaccinated with One dose'], loc=1, ncol = 2, prop={'size':16})\nl.draw_frame(False)\n\nsns.despine(left=True)\nbottom_plot.set_ylabel(\"Vaccination Rate\")\nbottom_plot.set_xlabel(\"Country\")\n\nfor item in ([bottom_plot.xaxis.label, bottom_plot.yaxis.label] +\n             bottom_plot.get_xticklabels() + bottom_plot.get_yticklabels()):\n    item.set_fontsize(16)\n    \nplt.xticks(rotation=45)","8626d93d":"summary['per_one_dose'] = summary.people_vaccinated \/ summary.population * 100\nsummary['full_vaccinated'] = summary.people_fully_vaccinated \/ summary.population * 100\nsummary","24439746":"full = summary.groupby('country')['full_vaccinated'].max().sort_values(ascending = False).head(50)\none_dose = summary.groupby('country')['per_one_dose'].max().sort_values(ascending = False).head(50)","189f7953":"full.plot(x='country',y=['full'],kind = \"bar\",figsize = (20 , 10),ylabel=\"Percentage of population fully vaccinated \"\n            ,title = \"Percentage of fully vaccinated\",colormap='tab20b')\nplt.xticks(fontsize=20, rotation=90)\nplt.yticks(fontsize=20)","568f1cab":"one_dose.plot(x='country',kind = \"bar\",figsize = (20 , 10),ylabel=\"Percentage of population vaccinated with one dose\"\n            ,title = \"Percentage of people vaccinated with one dose\",colormap='tab20b')\nplt.xticks(fontsize=20, rotation=90)\nplt.yticks(fontsize=20)","033b8b5e":"pd.DataFrame(summary.groupby(\"country\")[[\"vaccines\"]].max())","4c84fba2":"daily = vaccination.loc[:,['country', 'date', 'vaccines', 'daily_vaccinations']].dropna(subset=['daily_vaccinations'])\ndaily[\"date\"] = pd.to_datetime(daily[\"date\"], format = '%Y-%m-%d')\n\ndaily_agg = daily.groupby('country').daily_vaccinations.agg(\n    sum_vaccination_amt  = 'sum',\n    mean_vaccination_amt = 'mean')\n\n\n\nfull_daily = daily.merge(daily_agg, on = 'country')\nfull_daily","225a7bcc":"vaccines = summary.loc[:,['country', 'vaccines']]\nvaccines = vaccines.groupby('vaccines')['country'].unique()\nvaccines = pd.DataFrame(vaccines).reset_index()\nvaccines","faac1728":"title = \"Popular Vaccines\"\ndata = full_daily\nfig = px.choropleth(data, \n            locations=\"country\", \n            locationmode='country names',\n            color=\"vaccines\", \n            hover_name=\"country\", \n                   )\n\n\nfig.update_layout(title=title, \n            title_x=0.5,\n            legend_orientation = 'h'\n)\nfig.show()","234fdf58":"india = daily_cases[daily_cases['country']=='India']\nfig = make_subplots(rows=2, cols=1,subplot_titles=('Active Cases','Daily New Deaths'))\n\nfig.add_trace(go.Bar(x=india['date'].values, y=india['active_cases'].values,showlegend=False),\n              row=1, col=1)\n\nfig.add_trace(go.Bar(x=india['date'].values, y=india['daily_new_deaths'].values,showlegend=False),\n              row=2, col=1)\nfig.update_layout(height=800, width=700)\nfig.show()","928692dc":"df = vaccination[vaccination['country']=='India']\nplt.figure(figsize=(8,5))\nsns.distplot(df.daily_vaccinations\/1000, kde=True, color='green')\nplt.xlabel('Daily Vaccinations(x1000)')","b39dc817":"plt.figure(figsize=(16,10))\nsns.lineplot(df.date, df.daily_vaccinations)\nlocs, labels = plt.xticks()\nx_labels = [x for x in range(len(labels)) if x%5==0] + [0]\nplt.xticks(x_labels, rotation='45')\nplt.title(\"Daily Vaccination\")","6f970f57":"summary = vaccination[vaccination['country']=='India']\ncombine = pd.merge(india,summary, on = \"country\")","71d96070":"plt.figure(figsize=(15,12))\nsns.jointplot(x=\"daily_new_cases\", y=\"daily_vaccinations\", data=combine)\nplt.show()","52c9b110":"sns.pairplot(india)","cfd01c81":"# 3.9 Bar and Line Plots for Daily Rise in Cases\n<a id=3.9><\/a>","223a0eae":"# 2. Working with dataset\n<a id=second><\/a>","61136b60":"# 3.11 Vaccine brands used\n<a id=3.11><\/a>","ea3135e8":"## 4.4 Overall summary for India using Pair plot\n<a id=4.4><\/a>","eb1b7121":"## 3.8 Comparing Total Recovered with the Active Cases for Top 20 sorted on Total_recovered cases\n<a id=3.8><\/a>","2532fee5":"## 4.1 Active cases and Daily new deaths\n<a id=4.1><\/a>","61ca1181":"## Percentage of people full vaccinated and people vaccinated for only one dose","37d5ff4e":"# Table of contents\n\n1. [Importing Libraries](#first)\n2. [Working with dataset](#second)\n\n    2.1 [Reading dataset](#2.1)\n    \n    2.2 [Checking for misssing values](#2.2)\n    \n    2.3 [Combining the above dataframes into single dataframe](#2.3)\n    \n3. [Visualisations](#third)\n\n    3.1 [Correlation of data](#3.1)\n    \n    3.2 [Confirmed Cases for Top 20 Countries](#3.2)\n    \n    3.3 [Active Cases for Top 20 Countries](#3.3)\n    \n    3.4 [Total Deaths for Top 20 countries](#3.4)\n    \n    3.5 [Death Rate Worldwide](#3.5)\n    \n    3.6 [Total Recovered for Top 20 countries](#3.6)\n    \n    3.7 [Comparing Total Confirmed with Total Recovered for Top 20 sorted based on Total_confirmed cases](#3.7)\n    \n    3.8 [ Comparing Total Recovered with the Active Cases for Top 20 sorted on Total_recovered cases](#3.8)\n    \n    3.9 [Bar and Line Plots for Daily Rise in Cases](#3.9)\n    \n    3.10 [Highest Number of people vaccinated(Fully & one dose) countrywise for Top 20 Countries](#3.10)\n    \n    3.11 [Vaccine brands used](#3.11)\n    \n4. [Analysis for India](#fourth)\n\n    4.1 [Active cases and Daily new deaths](#4.1)\n    \n    4.2 [Daily Vaccinations](#4.2)\n    \n    4.3 [Daily vaccination and daily new cases using Joint Plot](#4.3)\n    \n    4.4 [Overall summary for India using Pair plot](#4.4)","596d7b4e":"## So there are many null values present in the above 3 datasets \n### Replacing these null values with 0","aebf7f9d":"# 3. VISUALISATIONS\n<a id=third><\/a>","15808813":"## 3.2 Confirmed Cases for Top 20 Countries\n<a id=3.1><\/a>","03381bf3":"# 4. Analysis for India\n<a id=fourth><\/a>","71da00e9":"## 3.4 Total Deaths for Top 20 countries\n<a id=3.4><\/a>","b2625437":"# Covid-19 : The World Threat","06835861":"Dropping unwanted columns","1df5624d":"![image.png](attachment:17010b16-5413-4a93-817a-d95e7b77482f.png))","6debe206":"## 2.2 Checking for missing values\n<a id=2.2><\/a>","699e8558":"## 2.1 Reading the datasets\n<a id = 2.1><\/a>","8363f892":"## 4.2 Daily Vaccinations\n<a id=4.2><\/a>","173af4b8":"# 1. Importing the libraries required\n<a id=\"first\"><\/a>","e3d0bf8a":"This Notebook basically aims to visualize the coronavirus outbreak trends.\n\nHere we would be visualizing\n1. Rise in cases, \n2. Active cases, \n3. Death rates , \n4. Vaccination rate for world wide countries and \n5. Visualizations for India.","c086b28b":"## 3.7 Comparing Total Confirmed with Total Recovered for Top 20 sorted based on Total_confirmed cases\n<a id=3.7><\/a>","b9847e85":"Here percentage is calculated using overall population of country i.e. **number of vaccinations \/ total population of country**","c99fc973":"## 3.5 Death Rate Worldwide\n<a id=3.5><\/a>","28d4592e":"## 3.10 Highest Number of people vaccinated(Fully & one dose) countrywise for Top 20 Countries\n<a id=3.10><\/a>","6eb81513":"## 3.1 Correlation of Data\n<a id=3.1><\/a>","0e4c1664":"## 2.3 Combining the above dataframes into single dataframe\n<a id=2.3><\/a>","89118a25":"## 3.3 Active Cases for Top 20 Countries\n<a id=3.3><\/a>","d2903afe":"## 4.3 Daily vaccination and daily new cases using Joint Plot\n<a id=4.3><\/a>","1523b970":"Now there are no null values left","ef608a0d":"## 3.6 Total Recovered for Top 20 countries\n<a id=3.6><\/a>"}}