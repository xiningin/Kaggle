{"cell_type":{"86d34de5":"code","3bd0b606":"code","2acfdf86":"code","799f79b4":"code","8974cfb4":"code","fa491327":"code","ac4041dd":"code","3038ab8a":"code","bcdd5e4d":"code","612634f1":"code","e19ba28c":"code","1d3c70ac":"code","90c0fa11":"code","a80b9f59":"code","34e22609":"code","ac904dc7":"code","26ac1e4e":"code","01656f8a":"code","9b20e17a":"code","9ca8b7d5":"markdown","23204e0b":"markdown","50fa66d9":"markdown","fb8c703f":"markdown","4186d98f":"markdown","bc159e8a":"markdown","e0447cf9":"markdown","ab2d4a3b":"markdown","cda16bd7":"markdown","99e10bf3":"markdown","9f1044e6":"markdown","05caea88":"markdown","73aff067":"markdown"},"source":{"86d34de5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3bd0b606":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n\nsns.set(style='white', context='notebook', palette='deep')","2acfdf86":"Y_train=pd.read_csv(\"..\/input\/csvTrainLabel 60k x 1.csv\")\nX_train=pd.read_csv(\"..\/input\/csvTrainImages 60k x 784.csv\")\ntest=pd.read_csv(\"..\/input\/csvTestImages 10k x 784.csv\")","799f79b4":"g=sns.countplot(Y_train.iloc[:,0])\nY_train=Y_train.iloc[:,0]\nY_train.value_counts()","8974cfb4":"X_train.isnull().any().describe()","fa491327":"test.isnull().any().describe()","ac4041dd":"X_train=X_train\/255.0\ntest=test\/255.0","3038ab8a":"X_train=X_train.values.reshape(-1, 28,28,1)\ntest=test.values.reshape(-1, 28, 28, 1)","bcdd5e4d":"Y_train=to_categorical(Y_train, num_classes=10)","612634f1":"random_seed=2\nX_train,X_val,Y_train,Y_val=train_test_split(X_train, Y_train, test_size=0.1, random_state=random_seed)\ng=plt.imshow(X_train[0][:,:,0])","e19ba28c":"# Set the CNN model \n# my CNN architechture is In -> [[Conv2D->relu]*2 -> MaxPool2D -> Dropout]*2 -> Flatten -> Dense -> Dropout -> Out\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(rate=.75))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\n","1d3c70ac":"# Define the optimizer\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\nepochs=1\nbatch_size=86\n","90c0fa11":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        #rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","a80b9f59":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","34e22609":"fig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","ac904dc7":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","26ac1e4e":"# Display some error results \n\n# Errors are difference between predicted labels and true labels\nerrors = (Y_pred_classes - Y_true != 0)\n\nY_pred_classes_errors = Y_pred_classes[errors]\nY_pred_errors = Y_pred[errors]\nY_true_errors = Y_true[errors]\nX_val_errors = X_val[errors]\n\ndef display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True)\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)))\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n\n# Probabilities of the wrong predicted numbers\nY_pred_errors_prob = np.max(Y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(Y_pred_errors, Y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = Y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 6 errors \nmost_important_errors = sorted_dela_errors[-6:]\n\n# Show the top 6 errors\ndisplay_errors(most_important_errors, X_val_errors, Y_pred_classes_errors, Y_true_errors)","01656f8a":"results = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","9b20e17a":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"submission.csv\",index=False)","9ca8b7d5":"# 2. Data Preparation\n## 2.1. Data Loading","23204e0b":"# 3. CNN\n## 3.1. What is the difference between the FILTER and the KERNEL\n### 3.1.1. **Filters**: Are set of weights mulitplied by the part of the input vector in an elementwise manner and then the product will be summed up. There are many types of filters each is detecting a specific feature in the input data. The picture below from towardsdatascience shows the way filters work.\n![](https:\/\/cdn-images-1.medium.com\/max\/800\/1*Zx-ZMLKab7VOCQTxdZ1OAw.gif)\n\n### 3.1.2. **Kernels** The kernel refers to the area of the application the filter uses each time we perform a convolution on the input data. Check out the picture below from towardsdatascidnce.\n![](https:\/\/cdn-images-1.medium.com\/max\/800\/1*BMngs93_rm2_BpJFH2mS0Q.gif)\n\nAnd to see what filters do in real, check out this tranformation by a Horizontal Sobel Kernel.\n\n![](https:\/\/cdn-images-1.medium.com\/max\/1200\/1*wju0Urp6KpAT11wktTp5Sg.png)\n\nThere other termonilogy in the CNN like **strides** and **padding** you can get a full detailed overview in [this](https:\/\/towardsdatascience.com\/intuitively-understanding-convolutions-for-deep-learning-1f6f42faee1) article.\n\n\n## 3.2. Define the model\n*Most of the information below is borrowed from the original author*\n### 3.2.1. **MaxPooling**\nIt's the process of downsampling the input data through a max filter that is not over lapping on sub regions. The picture below from computersciencewiki illustrates the maxPool filter.\n![image.png](attachment:image.png)\n\n### 3.2.2. **Dropout**\nDropout is a method to reduce the overfitting chances in model optimization by randomly dropping some neruons by setting their weights to zero. \n\n\n\n\n","50fa66d9":"## 2.3. Normalization\nIn order to eliminate the effect of the colors and illumination all the data will be normalized to 0-1","fb8c703f":"Disclaimer: This repo is a mimicking to the way Mr. Yassine Ghouzam followed in his [repo](https:\/\/www.kaggle.com\/atheeralattar\/introduction-to-cnn-keras-0-997-top-6-60909e\/edit), I liked the way he streamlined his work and wanted to reproduce that. I give him all the credit.\n\n# Introduction to Arabic Digits Recognizer\n### Atheer Al Attar, EPROD\n#### Mar 20, 2019\n\n* **1. Introduction:**\n* **2. Data Preparation**\n    * 2.1 Load data\n    * 2.2 Check for null and missing values\n    * 2.3 Normalization\n    * 2.4 Reshape\n    * 2.5 Label encoding\n    * 2.6 Split training and valdiation set\n* **3.CNN**\n    * 3.1 What is the difference between the FILTER and the KERNEL\n    * 3.2. Define the model\n    * 3.3. Set the optimizer and annealer\n    * 3.4. Data augmentation\n* **4. Evaluate the model**\n    * 4.1 Training and validation curves\n    * 4.2 Confusion matrix\n* **5. Prediction and submition**\n    * 5.1 Predict and Submit results","4186d98f":"## 4. Evaluate the model\n### 4.1. Training and Validation curves","bc159e8a":"## 3.3. Setting the Optimizer and the Annealer\nThis step is needed to evaluate the algorithm, loss, and the optimization process (Yassine)\n","e0447cf9":"## 3.4. Data Augmentation\nBasically the data augmentation is a way to reduce the bias in the data and same time to increase your data pool. By introduce several data tranformation to the data sets (Shifting, Cropping, Rotating...)","ab2d4a3b":"## 2.2. Checking for the NULL values","cda16bd7":"## 2.5. Label encoding\nIn this step we will turn the 0-9 labels into a binary like coding, i.e. 2 <- [0,0,1,0,0,0,0,0,0] and so on.","99e10bf3":"## 2.4. Reshaping\nThe current dimension of the X_train variable is 784 columns and one row. We will reshape the data to be in a square format (28 x 28 x 1 canal) ","9f1044e6":"## 4.2. Confusion Matrix","05caea88":"# 1.Introduction\nI always wanted to enter these Kaggle competitions and I find it too hard to get in, so I started watching the videos of the Deep Learning Course and followed up the competition  of the digit recognizer steps and here I am writing my first repo. I found the way Yassine followed in his repo is very clear and tidy and that's why I wanted to adopt it in all my coming competitions. I will try to work on this competition on my own pc and then will transfer the files to Kaggle to see how it goes. My laptop is MacBook 2.5 GHz Intel Core i7 and 16GB of RAM\n\n","73aff067":"## 2.6. Split training and validation sets\nYou need to make sure that you are not created a non balanced datasets when splitting your data into test and validation. "}}