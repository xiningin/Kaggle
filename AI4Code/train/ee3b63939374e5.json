{"cell_type":{"879569c4":"code","d096e3f8":"code","4212b3e4":"code","6f1fff1f":"code","d7619a0b":"code","7ade013c":"code","d4856b83":"code","d7ce830f":"code","c9050b7a":"code","3cd98ce4":"code","4643a0bd":"code","9be40829":"code","6cec64f4":"code","ebfecb79":"code","6f52eae9":"code","48d1bb12":"code","1d7d9e04":"code","2f3140e2":"code","0aec0a61":"code","e716a920":"markdown","1936e267":"markdown","e3ee1b00":"markdown","2a574656":"markdown","fb35c52e":"markdown","5fc43368":"markdown"},"source":{"879569c4":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline\n\n# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets","d096e3f8":"import tensorflow as tf\n\nfrom tensorflow.keras.models import Sequential, load_model\n\nfrom tensorflow.keras.layers import InputLayer, Dense, Dropout, Flatten\n\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, MaxPool2D\n\nfrom tensorflow.keras.utils import to_categorical\n\nfrom tensorflow.keras.preprocessing.image import load_img, ImageDataGenerator","4212b3e4":"from tensorflow.keras.preprocessing import image_dataset_from_directory\nfrom tensorflow.keras.layers.experimental.preprocessing import Rescaling, RandomFlip, RandomRotation, RandomZoom, RandomContrast, RandomTranslation","6f1fff1f":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","d7619a0b":"img = load_img('..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train\/WithMask\/10.png')","7ade013c":"plt.imshow(img)","d4856b83":"data_augmentation = Sequential([\n    RandomFlip(\"horizontal\"),\n    RandomRotation(1.\/16),\n    RandomZoom((-0.1,0.1)),\n    RandomContrast(0.2),  \n    RandomTranslation(0.1,0.1)\n])","d7ce830f":"batch = np.expand_dims(img,0)","c9050b7a":"for i in range(20):\n  augmented_image = data_augmentation(batch)\n  plt.imshow(augmented_image[0])\n  plt.axis(\"off\")\n  plt.show()","3cd98ce4":"train_data_dir = \"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train\"\nimage_size = (299, 299)\n\ndataset = image_dataset_from_directory(\n    train_data_dir,\n    image_size=image_size,\n)","4643a0bd":"plt.figure(figsize=(15, 25))\nclass_names = dataset.class_names\nfor images, labels in dataset.take(1):\n    for i in range(32):\n        plt.subplot(7, 5, i + 1)\n        plt.imshow(np.array(images[i]).astype(\"uint8\"))\n        plt.title(class_names[labels[i]])\n        plt.axis(\"off\")","9be40829":"train_data_dir = \"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train\"\nimage_size = (299, 299)\n\ntrain_dataset = image_dataset_from_directory(\n    train_data_dir,\n    validation_split=0.2,\n    seed=1,\n    subset=\"training\",\n    label_mode=\"categorical\",\n    image_size=image_size\n)\n\nvalidation_dataset = image_dataset_from_directory(\n    train_data_dir,\n    validation_split=0.2,\n    seed=1,\n    subset=\"validation\",\n    label_mode=\"categorical\",\n    image_size=image_size\n)","6cec64f4":"data_augmentation = Sequential([\n    RandomFlip(\"horizontal\"),\n    RandomRotation(0.1),\n    RandomZoom((-0.1,0.1)),\n    RandomContrast(0.05),  \n    RandomTranslation(0.1,0.1)\n])","ebfecb79":"model = Sequential()\nmodel.add(InputLayer(input_shape=(299, 299, 3)))\nmodel.add(data_augmentation)\nmodel.add(Rescaling(scale=1.\/255))\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(2, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer=tf.keras.optimizers.Adam(1e-4), metrics=['accuracy'])","6f52eae9":"history = model.fit(\n    train_dataset, \n    validation_data=validation_dataset, \n    epochs=50,\n    verbose=1)","48d1bb12":"plot_scores(history)","1d7d9e04":"model = Sequential()\nmodel.add(InputLayer(input_shape=(299, 299, 3)))\nmodel.add(data_augmentation)\nmodel.add(Rescaling(scale=1.\/255))\nmodel.add(Conv2D(input_shape=(224,224,3),filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(2, activation='softmax', kernel_initializer=tf.keras.initializers.Constant(0.01)))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer=tf.keras.optimizers.Adam(1e-4), metrics=['accuracy'])","2f3140e2":"history = model.fit(\n    train_dataset, \n    validation_data=validation_dataset, \n    epochs=50,\n    verbose=1)","0aec0a61":"plot_scores(history)","e716a920":"Mod\u00e8le de type VGG16","1936e267":"S\u00e9paration test train","e3ee1b00":"Mise en place du mod\u00e8le convolutif ivi un CNN raccourcis","2a574656":"Test de la cr\u00e9ation de 20 images \u00e0 partir d'une seule gr\u00e2ce \u00e0 des rotations\/renversements","fb35c52e":"Couche d'augmentation suppl\u00e9mentaire","5fc43368":"Affichage de 32 images avec leurs labels"}}