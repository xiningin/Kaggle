{"cell_type":{"cf9bba10":"code","0e46cb07":"code","347aacf4":"code","89518cc8":"code","d623531e":"code","d1b1ea0a":"code","ca73ad70":"code","6383427b":"code","7c3e1e88":"code","e5cb619e":"code","8e0e2422":"code","f58cbbcf":"code","bc813100":"code","6521698d":"code","c607045b":"code","fbbf064f":"code","1ee73d3a":"code","202c1a7e":"code","a1097be7":"code","671da5bc":"code","e262b609":"code","b4afcd1b":"code","cdfacfef":"code","a9d6cd8c":"code","b9d44274":"code","9c6a4ca0":"code","85ea7b36":"code","435ba5b0":"code","a03e8a5e":"code","0ea551fa":"code","9a068a96":"code","722f1f33":"code","301a272a":"code","c380b017":"code","6f9409cb":"code","b20b95e0":"code","76882359":"code","40b4296d":"code","3282e331":"code","1427f3e3":"markdown","0b917131":"markdown","22ca6ad6":"markdown","954abef6":"markdown","4ad300a3":"markdown","32405a24":"markdown","c730b7e5":"markdown","fc434d40":"markdown","275558c7":"markdown","31d983a4":"markdown","f6ceb7c9":"markdown","d5c8fc18":"markdown"},"source":{"cf9bba10":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom sklearn.manifold import TSNE\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n\nimport random","0e46cb07":"#Reading Data\ndf = pd.read_excel('..\/input\/covid19\/dataset.xlsx', index_col='Patient ID')","347aacf4":"#Transforming String Data into Categorical Data\ndf[df.select_dtypes(['object']).columns] = df.select_dtypes(['object']).\\\n                                                apply(pd.Series.astype, dtype='category')","89518cc8":"#Defining Dependent and Indenpendent variables\ntarget_var = ['SARS-Cov-2 exam result', \n              'Patient addmited to regular ward (1=yes, 0=no)', \n              'Patient addmited to semi-intensive unit (1=yes, 0=no)', \n              'Patient addmited to intensive care unit (1=yes, 0=no)']\nX = df.drop(target_var, axis='columns')\ny = df[target_var]","d623531e":"#Exam Distribution bar Plot\nexamResult_count = y.reset_index().groupby('SARS-Cov-2 exam result').count()\n\nplt.figure(figsize=(5, 5))\nplt.title('Exam distribution')\nplt.bar(x=examResult_count.index, height=examResult_count.values.T[0], color='blue')\nplt.show()\n\n'''\nplt.figure(figsize=(5, 5))\nplt.title('Exam distribution')\nplt.bar(x=examResult_count.index, height=(examResult_count\/examResult_count.sum()).values.T[0], color='blue')\nplt.show()\n'''\n\ndisplay(examResult_count\/examResult_count.sum())","d1b1ea0a":"#Plotting the Correlation Heat Map\n##Calculating Correlation\ncorr = df.corr()\n##Masking\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n##Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n##Generate Colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n##Draw the heatmapa\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","ca73ad70":"#Splitting Data into Training and Testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, \n                                                    random_state=42, stratify=y)","6383427b":"cols = ['Patient age quantile']\n\ncomplete_hemogram_cols = ['Hematocrit',\n                          'Hemoglobin',\n                          'Platelets',\n                          'Mean platelet volume ',\n                          'Red blood Cells',\n                          'Lymphocytes',\n                          'Mean corpuscular hemoglobin concentration\\xa0(MCHC)',\n                          'Leukocytes',\n                          'Basophils',\n                          'Mean corpuscular hemoglobin (MCH)',\n                          'Eosinophils',\n                          'Mean corpuscular volume (MCV)',\n                          'Monocytes',\n                          'Red blood cell distribution width (RDW)', \n                          'Neutrophils']\nhemogram_cols = ['Rods #',\n                 'Segmented',\n                 'Promyelocytes',\n                 'Metamyelocytes',\n                 'Myelocytes',\n                 'Myeloblasts']\n\nurine_cols = ['Urine - Esterase',\n              'Urine - Aspect',\n              'Urine - pH',\n              'Urine - Hemoglobin',\n              'Urine - Bile pigments',\n              'Urine - Ketone Bodies',\n              'Urine - Nitrite',\n              'Urine - Density',\n              'Urine - Urobilinogen',\n              'Urine - Protein',\n              'Urine - Sugar',\n              'Urine - Leukocytes',\n              'Urine - Crystals',\n              'Urine - Red blood cells',\n              'Urine - Hyaline cylinders',\n              'Urine - Granular cylinders',\n              'Urine - Yeasts',\n              'Urine - Color']\n\nspecific_virus_exams = ['Respiratory Syncytial Virus',\n                        'Influenza A',\n                        'Influenza B',\n                        'Parainfluenza 1',\n                        'CoronavirusNL63',\n                        'Rhinovirus\/Enterovirus',\n                        'Mycoplasma pneumoniae',\n                        'Coronavirus HKU1',\n                        'Parainfluenza 3',\n                        'Chlamydophila pneumoniae',\n                        'Adenovirus',\n                        'Parainfluenza 4',\n                        'Coronavirus229E',\n                        'CoronavirusOC43',\n                        'Inf A H1N1 2009',\n                        'Bordetella pertussis',\n                        'Metapneumovirus',\n                        'Parainfluenza 2', \n                        'Influenza B, rapid test',\n                        'Influenza A, rapid test']\n\narterial_gasometry = ['Hb saturation (arterial blood gases)',\n                      'pCO2 (arterial blood gas analysis)',\n                      'Base excess (arterial blood gas analysis)',\n                      'pH (arterial blood gas analysis)',\n                      'Total CO2 (arterial blood gas analysis)',\n                      'HCO3 (arterial blood gas analysis)',\n                      'pO2 (arterial blood gas analysis)',\n                      'Arteiral Fio2',\n                      'ctO2 (arterial blood gas analysis)', \n                      'Arterial Lactic Acid']\n\nvenous_gasometry = ['pCO2 (venous blood gas analysis)',\n                    'Hb saturation (venous blood gas analysis)',\n                    'Base excess (venous blood gas analysis)',\n                    'pO2 (venous blood gas analysis)',\n                    'Fio2 (venous blood gas analysis)',\n                    'Total CO2 (venous blood gas analysis)',\n                    'pH (venous blood gas analysis)',\n                    'HCO3 (venous blood gas analysis)']\n\nrenal_exams = ['Urea', 'Creatinine']\n\neletrolitos = ['Potassium',\n               'Sodium',\n               'Magnesium',\n               'Ionized calcium\\xa0',\n               'Phosphor']\n\nhepatos_function = ['Alanine transaminase',\n                    'Aspartate transaminase',\n                    'Gamma-glutamyltransferase\\xa0',\n                    'Total Bilirubin',\n                    'Direct Bilirubin',\n                    'Indirect Bilirubin',\n                    'Alkaline phosphatase',\n                    'Albumin']\n\nsorology_bacteria = ['Strepto A']\n\ncoagulogram_exams = ['Partial thromboplastin time\\xa0(PTT)\\xa0',\n                    'Relationship (Patient\/Normal)',\n                    'International normalized ratio (INR)',\n                    'Prothrombin time (PT), Activity']\n\nunclass_examns = ['Creatine phosphokinase\\xa0(CPK)\\xa0',\n                  'Lactic Dehydrogenase']\n\npotential_examns = ['D-Dimer',\n                    'Leukocytes',\n                    'Lymphocytes',\n                    'Platelets',\n                    'Proteina C reativa mg\/dL',\n                    'Creatine phosphokinase\\xa0(CPK)\\xa0',\n                    'Lactic Dehydrogenase',\n                    'Alanine transaminase',\n                    'Aspartate transaminase',\n                    'Total Bilirubin',\n                    'Creatinine']\n\ngeneral = ['Vitamin B12',\n           'Ferritin',\n           'Lipase dosage', \n           'Serum Glucose']","7c3e1e88":"#Removing all Columns that are Exams per se\nexams = {'hemograma v1':complete_hemogram_cols, \n         'hemograma v2':hemogram_cols, \n         'urina':urine_cols, \n         'gasometria arterial':arterial_gasometry, \n         'gasometria venosa':venous_gasometry, \n         'fun\u00e7\u00e3o renal':renal_exams, \n         'eletrolitos':eletrolitos, \n         'fun\u00e7\u00e3o hepatica':hepatos_function, \n         'coagulacao sanguinea':coagulogram_exams,\n         'exames genericos v1':unclass_examns, \n         'exames potenciais (literatura)':potential_examns, \n         'exames genericos v2':general}","e5cb619e":"#Using T-Sne for plotting\ndef get_patients_examns(columns, title, X=X_train, y=y_train):\n    try:  \n        X1 = X[columns].dropna(axis='columns', how='all').\\\n                    dropna(axis='rows', how='all').dropna(axis='rows', how='any')\n    except: \n        X1 = pd.DataFrame()\n    try:\n        X2 = X[columns].dropna(axis='rows', how='all').\\\n                dropna(axis='columns', how='all').dropna(axis='columns', how='any')\n    except: \n        X2 = pd.DataFrame()\n    \n    if X1.shape[0]*X1.shape[1] == 0 and X2.shape[0]*X2.shape[1] == 0:\n        print('more data needed')\n        return\n    else:\n        if X1.shape[0]*X1.shape[1] >= X2.shape[0]*X2.shape[1]:\n            X = X1\n        else:\n            X = X2\n            \n    if X.shape[0] < 10:\n        print('more data needed')\n        return\n    \n    try:\n        ind = X.dropna(axis='columns', how='all').\\\n                    dropna(axis='rows', how='all').dropna(axis='rows', how='any').index\n\n        M_dummies = pd.get_dummies(X.dropna(axis='columns', how='all').\\\n                           dropna(axis='rows', how='all').dropna(axis='rows', how='any'))\n\n        X_embedded = TSNE(n_components=2, perplexity=15,\n                          random_state=42, learning_rate=50., \n                          n_iter=1000, n_jobs=-1).fit_transform(M_dummies)\n\n        qt = QuantileTransformer(n_quantiles=10, random_state=42, output_distribution='uniform')\n        X_embedded = qt.fit_transform(X_embedded)\n        \n        mm = MinMaxScaler()\n        X_embedded = mm.fit_transform(X_embedded)\n        \n        plt.figure(figsize=(10, 5))\n        plt.title(title)\n        plt.scatter(X_embedded[:,0], X_embedded[:,1], \n                c=y.loc[ind][['SARS-Cov-2 exam result']].replace({'negative':'red', 'positive':'blue'}).values.T[0],\n                   s=5)\n        plt.grid(color='black', ls='--', alpha=0.5)\n        plt.show()\n    except:\n        print('more data needed')","8e0e2422":"#Plotting\nfor exams_keys in exams.keys():\n    print('#'*50)\n    print('title: ', exams_keys)\n    print('columns: ', exams[exams_keys])\n    get_patients_examns(exams[exams_keys], exams_keys)","f58cbbcf":"#Defining Variables that are Exams\nmain_examns = complete_hemogram_cols + potential_examns","bc813100":"X = X_train[complete_hemogram_cols + potential_examns].dropna(axis='rows', how='all').\\\n                                                       dropna(axis='columns', how='all').\\\n                                                       dropna(axis='rows', how='any')\n\nind = X.index\nx1_cols = list(set(X.columns) - set(potential_examns))\nX1 = X[x1_cols]\n\nx2_cols = list(set(X.columns) - set(complete_hemogram_cols))\nX2 = X[x2_cols]\n\nX1_embedded = TSNE(n_components=1, perplexity=15,\n                  random_state=42, learning_rate=50., \n                  n_iter=1000, n_jobs=-1).fit_transform(X1)\nX1_embedded = pd.DataFrame(data=X1_embedded, columns=['hemogram var1'], index=X.index)\n\nX2_embedded = TSNE(n_components=1, perplexity=15,\n                  random_state=42, learning_rate=50., \n                  n_iter=1000, n_jobs=-1).fit_transform(X2)\nX2_embedded = pd.DataFrame(data=X2_embedded, columns=['potential var1'], index=X.index)\nX_embedded = X1_embedded.join(X2_embedded)\n\nqt = QuantileTransformer(n_quantiles=10, random_state=42, output_distribution='uniform')\nX_embedded = qt.fit_transform(X_embedded)\n\nmm = MinMaxScaler()\nX_embedded = mm.fit_transform(X_embedded)\n\nplt.figure(figsize=(10, 5))\nplt.title('main examns')\nplt.scatter(X_embedded[:,0], X_embedded[:,1], \n        c=y.loc[ind][['SARS-Cov-2 exam result']].replace({'negative':'red', 'positive':'blue'}).values.T[0],\n           s=5)\nplt.grid(color='black', ls='--', alpha=0.5)\nplt.show()","6521698d":"X = X_train[complete_hemogram_cols + potential_examns].dropna(axis='rows', how='all').\\\n                                                       dropna(axis='columns', how='all').\\\n                                                       dropna(axis='rows', how='any')\n\nind = X.dropna(axis='columns', how='all').\\\n            dropna(axis='rows', how='all').dropna(axis='rows', how='any').index\n\nM_dummies = pd.get_dummies(X.dropna(axis='columns', how='all').\\\n                   dropna(axis='rows', how='all').dropna(axis='rows', how='any'))\n\nX_embedded = TSNE(n_components=2, perplexity=15,\n                  random_state=42, learning_rate=50., \n                  n_iter=1000, n_jobs=-1).fit_transform(M_dummies)\n\nqt = QuantileTransformer(n_quantiles=10, random_state=42, output_distribution='uniform')\nX_embedded = qt.fit_transform(X_embedded)\n\nmm = MinMaxScaler()\nX_embedded = mm.fit_transform(X_embedded)\n\nplt.figure(figsize=(10, 5))\nplt.title('main examns')\nplt.scatter(X_embedded[:,0], X_embedded[:,1], \n        c=y.loc[ind][['SARS-Cov-2 exam result']].replace({'negative':'red', 'positive':'blue'}).values.T[0],\n           s=5)\nplt.grid(color='black', ls='--', alpha=0.5)\nplt.show()","c607045b":"X = X_train[complete_hemogram_cols + potential_examns].dropna(axis='rows', how='all').\\\n                                                       dropna(axis='columns', how='all').\\\n                                                       dropna(axis='rows', how='any')\n\nind = X.dropna(axis='columns', how='all').\\\n            dropna(axis='rows', how='all').dropna(axis='rows', how='any').index\n\nM_dummies = pd.get_dummies(X.dropna(axis='columns', how='all').\\\n                   dropna(axis='rows', how='all').dropna(axis='rows', how='any'))\n\nX_embedded = PCA(n_components=2, whiten=True).fit_transform(M_dummies)\n\nqt = QuantileTransformer(n_quantiles=10, random_state=42, output_distribution='normal')\nX_embedded = qt.fit_transform(X_embedded)\n\nmm = MinMaxScaler()\nX_embedded = mm.fit_transform(X_embedded)\n\nplt.figure(figsize=(10, 5))\nplt.title('main examns')\nplt.scatter((X_embedded)[:,0], (X_embedded)[:,1], \n        c=y.loc[ind][['SARS-Cov-2 exam result']].replace({'negative':'red', 'positive':'blue'}).values.T[0],\n           s=5)\nplt.grid(color='black', ls='--', alpha=0.5)\nplt.show()","fbbf064f":"X = X_train[complete_hemogram_cols + potential_examns].dropna(axis='rows', how='all').\\\n                                                       dropna(axis='columns', how='all').\\\n                                                       dropna(axis='rows', how='any')\n\nind = X.dropna(axis='columns', how='all').\\\n            dropna(axis='rows', how='all').dropna(axis='rows', how='any').index\n\nM_dummies = pd.get_dummies(X.dropna(axis='columns', how='all').\\\n                   dropna(axis='rows', how='all').dropna(axis='rows', how='any'))\n\nX_embedded = PCA(n_components=2, whiten=True).fit_transform(M_dummies)\n\nqt = QuantileTransformer(n_quantiles=10, random_state=42, output_distribution='normal')\nX_embedded = qt.fit_transform(X_embedded)\n'''\nmm = MinMaxScaler()\nX_embedded = mm.fit_transform(X_embedded)\n'''\nplt.figure(figsize=(10, 5))\nplt.title('main examns')\nplt.scatter((X_embedded)[:,0], (X_embedded)[:,1], \n        c=y.loc[ind][['SARS-Cov-2 exam result']].replace({'negative':'red', 'positive':'blue'}).values.T[0],\n           s=5)\nplt.grid(color='black', ls='--', alpha=0.5)\nplt.show()\n\nplt.figure(figsize=(10, 5))\nplt.title('main examns')\nplt.scatter((X_embedded**2)[:,0], (X_embedded**2)[:,1], \n        c=y.loc[ind][['SARS-Cov-2 exam result']].replace({'negative':'red', 'positive':'blue'}).values.T[0],\n           s=5)\nplt.grid(color='black', ls='--', alpha=0.5)\nplt.xlim((0, 5))\nplt.ylim((0, 5))\nplt.show()\n\n\nplt.figure(figsize=(10, 5))\nplt.title('main examns')\nplt.scatter(np.expm1(X_embedded**2)[:,0], np.expm1(X_embedded**2)[:,1], \n        c=y.loc[ind][['SARS-Cov-2 exam result']].replace({'negative':'red', 'positive':'blue'}).values.T[0],\n           s=5)\nplt.grid(color='black', ls='--', alpha=0.5)\nplt.xlim((0, 5))\nplt.ylim((0, 5))\nplt.show()","1ee73d3a":"### Splitting the data","202c1a7e":"X = df.drop(target_var, axis='columns')\ny = df[target_var]","a1097be7":"cols = random.choices(complete_hemogram_cols + potential_examns, k=20)","671da5bc":"cols = ['Lymphocytes',\n 'Mean corpuscular volume (MCV)',\n 'Alanine transaminase',\n 'Proteina C reativa mg\/dL',\n 'Creatine phosphokinase\\xa0(CPK)\\xa0',\n 'Platelets',\n 'Total Bilirubin',\n 'Leukocytes',\n 'Platelets',\n 'Hematocrit',\n 'Hemoglobin',\n 'Aspartate transaminase',\n 'D-Dimer',\n 'Hematocrit',\n 'Mean corpuscular volume (MCV)',\n 'Proteina C reativa mg\/dL',\n 'Mean corpuscular hemoglobin (MCH)']","e262b609":"X = X[cols]\ny = y.loc[X.index]","b4afcd1b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, \n                                                    random_state=42, stratify=y)","cdfacfef":"X_train_model = X_train[cols].dropna(axis='rows', how='all').\\\n                                                       dropna(axis='columns', how='all').\\\n                                                       dropna(axis='rows', how='any')\n\nind_train = X_train_model.index\n\nX_train_model_dummies = pd.get_dummies(X_train_model)\n\npca = PCA(n_components=2, whiten=True)\nX_train_model_embedded = pca.fit_transform(X_train_model_dummies)\n\nqt = QuantileTransformer(n_quantiles=10, random_state=42, output_distribution='normal')\nX_train_model_embedded = qt.fit_transform(X_train_model_embedded)\n\nX_train_model_embedded = pd.DataFrame(data=X_train_model_embedded, index=ind_train)","a9d6cd8c":"X_test_model = X_test[cols].dropna(axis='rows', how='all').\\\n                                                       dropna(axis='columns', how='all').\\\n                                                       dropna(axis='rows', how='any')\n\nind_test = X_test_model.index\n\nX_test_model_dummies = pd.get_dummies(X_test_model)\n\nX_test_model_embedded = pca.transform(X_test_model_dummies)\n\nX_test_model_embedded = qt.transform(X_test_model_embedded)\nX_test_model_embedded = pd.DataFrame(data=X_test_model_embedded, index=ind_test)","b9d44274":"model = SVC(random_state=42, C=1000., probability=True, gamma='auto', class_weight={0:1, 1:5},\n            kernel='rbf').fit(X_train_model_embedded, \n            y_train.loc[ind_train][['SARS-Cov-2 exam result']].replace({'negative':0, 'positive':1}))","9c6a4ca0":"y_pred = model.predict(X_test_model_embedded)\ny_pred = pd.DataFrame(data=y_pred, index=ind_test, columns=['pred']).replace({0:'negative', 1:'positive'})","85ea7b36":"y_test[['SARS-Cov-2 exam result']].loc[ind_test].join(y_pred)","435ba5b0":"X = df.drop(target_var, axis='columns')\ny = df[target_var]","a03e8a5e":"cols = random.choices(complete_hemogram_cols + potential_examns, k=20)","0ea551fa":"cols = ['Lymphocytes',\n         'Mean corpuscular volume (MCV)',\n         'Alanine transaminase',\n         'Proteina C reativa mg\/dL',\n         'Creatine phosphokinase\\xa0(CPK)\\xa0',\n         'Platelets',\n         'Total Bilirubin',\n         'Leukocytes',\n         'Platelets',\n         'Hematocrit',\n         'Hemoglobin',\n         'Aspartate transaminase',\n         'D-Dimer',\n         'Hematocrit',\n         'Mean corpuscular volume (MCV)',\n         'Proteina C reativa mg\/dL',\n         'Mean corpuscular hemoglobin (MCH)']","9a068a96":"X = X[cols]\ny = y.loc[X.index]","722f1f33":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, \n                                                    random_state=42, stratify=y)","301a272a":"X_train_model = X_train[cols].dropna(axis='rows', how='all').\\\n                                                       dropna(axis='columns', how='all').\\\n                                                       dropna(axis='rows', how='any')\n\nind_train = X_train_model.index\n\nX_train_model_dummies = pd.get_dummies(X_train_model)\n\npca = PCA(n_components=2, whiten=True)\nX_train_model_embedded = pca.fit_transform(X_train_model_dummies)\n\nqt = QuantileTransformer(n_quantiles=10, random_state=42, output_distribution='normal')\nX_train_model_embedded = qt.fit_transform(X_train_model_embedded)\n\nX_train_model_embedded = pd.DataFrame(data=X_train_model_embedded, index=ind_train)","c380b017":"X_test_model = X_test[cols].dropna(axis='rows', how='all').\\\n                                                       dropna(axis='columns', how='all').\\\n                                                       dropna(axis='rows', how='any')\n\nind_test = X_test_model.index\n\nX_test_model_dummies = pd.get_dummies(X_test_model)\n\nX_test_model_embedded = pca.transform(X_test_model_dummies)\n\nX_test_model_embedded = qt.transform(X_test_model_embedded)\nX_test_model_embedded = pd.DataFrame(data=X_test_model_embedded, index=ind_test)","6f9409cb":"model = KNeighborsClassifier(n_neighbors=11).fit(X_train_model_embedded, \n            y_train.loc[ind_train][['SARS-Cov-2 exam result']].replace({'negative':0, 'positive':1}))","b20b95e0":"y_pred = model.predict(X_test_model_embedded)\ny_pred = pd.DataFrame(data=y_pred, index=ind_test, columns=['pred']).replace({0:'negative', 1:'positive'})","76882359":"y_test[['SARS-Cov-2 exam result']].loc[ind_test].join(y_pred)","40b4296d":"plt.figure(figsize=(10, 5))\nplt.title('main examns')\nplt.scatter(X_test_model_embedded[0], X_test_model_embedded[1], \n        c=y_test.loc[ind_test][['SARS-Cov-2 exam result']].replace({'negative':'red', 'positive':'blue'}).values.T[0],\n           s=5)\nplt.grid(color='black', ls='--', alpha=0.5)\nplt.show()","3282e331":"y_test[['SARS-Cov-2 exam result']].loc[ind_test].join(y_pred)","1427f3e3":"## Suport Vector Machine","0b917131":"## KNN","22ca6ad6":"model.predict_proba(X_test_model_embedded)","954abef6":"# Conclusion","4ad300a3":"As pointed before, the data is unbalanced, making it difficult to fit models without overfitting. The small number of points makes balancing the dataset not productive since it would reduce a lot the (already) a small number of observations.","32405a24":"In this study we intended to split the sparse hyperspace formed by the Exams results. As mentioned before, the small data set is highly unbalanced (10+ : 90-) and sparse (missing values), requiring a specif approach to deal with it. \n\nHence, after the exploring the data and exchanging with Subject Matter Experts (Physicians) we decided to clusterize the features into Exams categories defined adhoc (results that are obtained in the same exam, for instance the complete Hemogram exam or the Urine exam). Then, to understand how the classes (positive and negative) are spread in each exams categories, we performed a dimension reduction (2d) and plotted the resulted data, which can be observed in the Data Visualization section.\n\nBy that, we assumed that the Hemogram V1 and Potential Exams (Specialized Literature) would be better to explain our model, which corresponds to a total of 25 variables from the 109. Due to data constraints we selected randomly the 20 variables bellow:\n\n\ncols = ['Lymphocytes',\n         'Lymphocytes',\n         'Mean corpuscular volume (MCV)',\n         'Mean corpuscular volume (MCV)',\n         'Alanine transaminase',\n         'Alanine transaminase',\n         'Proteina C reativa mg\/dL',\n         'Creatine phosphokinase\\xa0(CPK)\\xa0',\n         'Platelets',\n         'Total Bilirubin',\n         'Leukocytes',\n         'Platelets',\n         'Hematocrit',\n         'Hemoglobin',\n         'Aspartate transaminase',\n         'D-Dimer',\n         'Hematocrit',\n         'Mean corpuscular volume (MCV)',\n         'Proteina C reativa mg\/dL',\n         'Mean corpuscular hemoglobin (MCH)']\n         \nFor further analysis new data would reduce sparsity of the hyperspace and support model performance. In the medical scope we are interested into Recall Score.","c730b7e5":"# Data Modeling\n\nAs we observed above the techinique for Dimensionality Reduction segregates the hyperspace into a \"separable\" two dimensional space. Thus for automate this task it is important that the Machine could learn how to perform this task. Therefore there are a few methods that can help us to achieve this.\n\nAs the Data is Unbalanced there is no reason to seek for a High Accuracy model, instead we are seeking for a better Recall metric.","fc434d40":"model.predict_proba(X_test_model_embedded)","275558c7":"# Data Visualization\n\nAfter Data Prep, it is important trying to get some visual insights from the data and provide some visualizations for the specialists. As visualization requires a lot of plotting, it is necessary to reduce the dimensionality for a better understanding. It is used a t-SNE technique for this purpose.","31d983a4":"# Data Prep\n\nIn this stage, it is necessary to manage Data, understand its possibilities and downsides. As we had our first glance at the Data, creating new variables based on pre-existing ones does not aggregate any new pieces of information. Thus, after a brief talk with some Health Professionals. We decided to take the following steps:\n\n- Removing all Columns that are Exams _per se_\n\n- Grouping Variables that are results of the same exam\n\n    There is a pattern between variables, meaning that more than one variable is related to the same clinical Exam. This is important because there is no need to apply any dimension reduction or similar operation. The data can be reduced simply by understanding its characteristics. As an example, if take a brief look at the variables:\n\n    _Urine - Ketone Bodies', 'Urine - Nitrite', 'Urine - Density', 'Urine - Urobilinogen', 'Urine - Protein', 'Urine - Sugar', 'Urine - Leukocytes', 'Urine - Crystals', 'Urine - Red blood cells', 'Urine - Hyaline cylinders', 'Urine - Granular cylinders', 'Urine - Yeasts', 'Urine - Color'_\n    \n    They all have a common factor, that they all come from the same __Exam__, let's call it Urine Exam. By following the same logic we group the data as follows:","f6ceb7c9":"# Introduction\n\nGiving the characteristics of the Data:\n    \n- Unbalanced Data\n- High number of missing data\n- Small amount of data\n\nAs Data Science advances, there are many strategies to approach a problem, including using the brutal force of the computer for testing everything and getting the best results. As we acknowledge the peculiarities of this data set (mentioned above) this is not the path that we decided to take, giving that it could easily return overfitted models and poor results as the model scales. Hence we tried to bring another point of view, which is understanding better the data and trying to deal with the constraints.\n    \nIt is necessary to understand better the data and set up a process that could advance as the number of points (data) it is improved. After pointing out a few important aspects of the Data, this primary analysis of the data its described in the steps below:\n\n- Exploratory Analysis\n- Data Prep\n- Data Visualization: How can we better understand the data and\n- Data Modeling\n- Conclusion\n\n## Exploratory Analysis\n\nThe objective of this stage its to understand how to deal with a high number of missing data and the small number of observations.","d5c8fc18":"The Correlation Heat Map it is important to understand how important are some variables."}}