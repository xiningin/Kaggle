{"cell_type":{"63530c41":"code","379cf577":"code","87a4da2e":"code","390b38b0":"code","c476c26c":"code","d3018960":"code","51149d90":"code","636739b9":"code","8e59e8b6":"code","63ef6fe3":"code","98665ee0":"code","32e7f745":"code","32bcbf2e":"code","afd19d4d":"code","ec3dead8":"code","48ecc427":"markdown","65ca95d6":"markdown","6956c790":"markdown","618623b0":"markdown"},"source":{"63530c41":"#\n\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nfrom sklearn import datasets\nsns.set()","379cf577":"iris = datasets.load_iris()","87a4da2e":"print(type(iris))\nprint(iris.keys())","390b38b0":"iris.target_names","c476c26c":"iris.feature_names","d3018960":"x= iris.data\ny= iris.target\nveri= pd.DataFrame(x,columns= iris.feature_names)\nprint(veri.head())","51149d90":"#exploratory data analysis (graphical)\n\n#Which features have a stronger relationship? Graphs should be examined to determine this.\n\npd.plotting.scatter_matrix(veri, c=y, figsize=[15,12], s=150, marker= \"C\")\nplt.show()","636739b9":"z= iris.target\nveri[\"target names\"] = pd.DataFrame(z)\n\n\nveri[\"target names\"] = veri[\"target names\"].replace({0:'setosa', 1: 'versicolor', 2:'virginica'})\nprint(veri)","8e59e8b6":"petal_length = veri[\"petal length (cm)\"]\npetal_width = veri[\"petal width (cm)\"]\n\nsns.scatterplot(petal_width,petal_length, hue =veri[\"target names\"])\nplt.show()","63ef6fe3":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(iris[\"data\"], iris[\"target\"])","98665ee0":"new_datas = np.array([[4.3, 3.1, 3.5, 0.2],\n                     [5.5, 2.5, 3.5, 1.5],\n                     [4.6, 3.0, 1.5, 0.4]])","32e7f745":"predict =knn.predict(new_datas)\nprint(predict)","32bcbf2e":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split( x, y, test_size=0.30, random_state=999, stratify=y)\nknn.fit(x_train, y_train)\naccuracy= knn.predict(x_test)\nprint(accuracy)\nknn.score(x_test, y_test)","afd19d4d":"neighbors= np.arange(1,11)\n\ntrain_accuracy = np.empty(len(neighbors))\ntest_accuracy = np.empty(len(neighbors))\n\nfor i,k in enumerate (neighbors):\n    knn = KNeighborsClassifier(n_neighbors = k)\n    knn.fit(x_train, y_train)\n    train_accuracy[i] = knn.score(x_train, y_train)\n    test_accuracy[i] = knn.score(x_test, y_test)","ec3dead8":"plt.plot(neighbors, train_accuracy, label=\"Train data accuracy\")\nplt.plot(neighbors, test_accuracy, label=\"Test data accuracy\")\nplt.legend()\nplt.xlabel(\"Neighbors\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Performance of Model\")\nplt.show()","48ecc427":"# (Classification)\n# K-Nearest Neighbors","65ca95d6":"# ****exploratory data analysis****","6956c790":"**performance analysis with graphics**","618623b0":"# performance analysis (Accuracy)"}}