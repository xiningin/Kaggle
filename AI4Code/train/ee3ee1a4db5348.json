{"cell_type":{"f6a88350":"code","ff150aa0":"code","b0c15b7f":"code","b4e4d9f8":"code","6442d046":"code","cb589941":"code","593a8023":"code","ef7aec4c":"code","02a1b871":"code","eedaeedc":"code","8d77af45":"code","5efff344":"code","37560fb4":"code","ebaf565a":"code","b026afc5":"code","1d3c500e":"code","b5bcad22":"code","1efb9735":"code","315f354c":"code","424b0c76":"code","4db441c0":"code","93b6dede":"code","55611202":"code","403466e5":"code","1a91fbaa":"code","0fc82267":"code","eaddb05b":"code","b641028a":"code","db8be13d":"code","e6b3d048":"code","6dc1f499":"code","ebe2f8a0":"code","7d0e7a58":"code","da800594":"code","5f2eac9f":"code","f6ccb2cd":"code","1255b67b":"code","c96b5966":"code","fc450c29":"code","117abd05":"code","a54f180f":"code","97862107":"code","b1f6ba1f":"code","cd3b0194":"code","0fb80f3c":"code","a929979f":"code","2955b3b5":"code","2d3c1ce1":"code","dcbb9f34":"code","580d39c1":"code","3d3a7b91":"code","252ebd90":"code","1679f770":"code","dbafad4c":"code","2397d5bc":"code","3521e2ec":"code","83089252":"code","063702b7":"code","295b25df":"code","7ad57022":"code","30bd317c":"code","87795123":"code","8bde2fb5":"code","0952ba83":"code","97a08e8d":"code","1fb474bb":"code","ae34a493":"code","cb0088ec":"code","43ec0652":"code","a0758f1f":"code","869e26ea":"code","cafe2234":"code","fd8ac16e":"code","f14df060":"code","9a26da33":"code","623006be":"code","427f1e86":"code","6940c5f2":"code","ccfdae41":"code","0a2c34d1":"code","17144055":"code","4585b38e":"code","08bb7517":"code","e1b8a013":"code","348dbfca":"code","ba22fc01":"code","b9e4902a":"code","0910c160":"code","3dae9add":"code","117febe3":"code","dabf7aa3":"code","e388d2fd":"code","0de79915":"code","4a31dfd4":"code","1a04919d":"code","4c6b8be0":"code","120b373c":"code","f2725cac":"code","aefd9e84":"code","c7ff3a98":"code","7da39d33":"code","5978907a":"code","d6d4830c":"code","13cf0a65":"code","c2f52605":"code","4c146d21":"code","e01c0fef":"code","20e3a0e2":"code","d41c5585":"code","ca29ba04":"code","1b7430f0":"code","23866a37":"code","e95510af":"code","cbd74483":"code","ec703b4f":"code","53b56e49":"code","c88c104c":"code","afb0fde0":"code","0e086f14":"code","e8befb50":"code","3ec0d435":"code","9f3b0159":"code","ed631899":"code","218d66eb":"code","dd9eab6f":"code","75c6ac88":"code","1d9c2814":"code","c2481557":"code","c31432fb":"code","b436fe01":"code","d3754c6e":"code","b0b3a7f3":"code","62279fae":"code","44a3a6b9":"code","c8267126":"code","76aee201":"code","0ad19479":"code","a97b0915":"code","2bdb017e":"code","05e2bd0b":"code","c580b347":"code","e7b32fd9":"code","cd708d1d":"code","1b07c07b":"code","4a64a156":"code","d0f8fb0e":"code","bb3023f6":"code","e9339eb4":"code","ac864e72":"code","c1df57e0":"code","a11ff310":"code","d37ed998":"code","b2587ab1":"code","453a62eb":"code","48e594c9":"code","6bd5547b":"code","081784f8":"code","54406272":"code","69f42141":"code","9fa7e074":"code","f07a55df":"code","1274b075":"code","c6ab7593":"code","f5169014":"code","fee2ff68":"code","d88d328a":"code","cfd1cc6d":"code","562d1288":"code","cef4feb6":"code","8ba01349":"code","66588ca3":"code","7359271c":"code","c13f37a0":"code","971367b5":"code","b3461626":"code","86861392":"code","2761bd5e":"code","ac2b6911":"code","29e1c02a":"code","5966aed7":"code","4ef10d0e":"code","56e11c02":"markdown","506e92e6":"markdown","40cf7cbb":"markdown","e4994621":"markdown","5df65c19":"markdown","cb6fff5c":"markdown","f1dd35ce":"markdown","0ec1a2bc":"markdown","eb11fc7b":"markdown","6bc91c8b":"markdown","74b0631f":"markdown","f59b6a09":"markdown","f5d85bbf":"markdown","aec4ca64":"markdown","02c29002":"markdown","381e6a14":"markdown","8adefba4":"markdown","3aee8085":"markdown","4c974ed8":"markdown","293aeecf":"markdown","1e628913":"markdown","819c10dc":"markdown","4cdca05d":"markdown","3b2fb1d5":"markdown","032f4a93":"markdown","c78de101":"markdown","96dd94b7":"markdown","8a07c7d9":"markdown","bd5d5dd1":"markdown","7b4017ed":"markdown","98f98180":"markdown","926ebb78":"markdown","607848eb":"markdown","dfd8a218":"markdown","5ed2021a":"markdown","0bef4951":"markdown","1a3197ea":"markdown","628bc9a6":"markdown","74892bf2":"markdown","380f2470":"markdown","b7b161db":"markdown","78b53caa":"markdown","9e93d6e2":"markdown","82f4856e":"markdown","cdf897df":"markdown","9d264b70":"markdown","ad4ba0f4":"markdown","825c8423":"markdown","19f988ae":"markdown","943ee10d":"markdown","00a85861":"markdown","814ea3e0":"markdown","fb934722":"markdown","b99e112b":"markdown","e9fb05ff":"markdown","ecbc2f4b":"markdown","35c9d0c8":"markdown","300dc470":"markdown","505c60d0":"markdown","b936b574":"markdown","e4742c63":"markdown","0fd8347b":"markdown","86b6799a":"markdown","3718f829":"markdown","94d97218":"markdown","b6b61cbe":"markdown","b1789d6d":"markdown","a3d58b8b":"markdown"},"source":{"f6a88350":"#For data processing\nimport pandas as pd\nimport numpy as np\n\n#For visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#For ignoring warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","ff150aa0":"df1 = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntf1 = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nresult = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","b0c15b7f":"df1.head()","b4e4d9f8":"tf1.head()","6442d046":"df = df1.copy()\ndf1.describe()","cb589941":"tf = tf1.copy()\ntf1.describe()","593a8023":"df.shape","ef7aec4c":"tf.shape","02a1b871":"df.dtypes","eedaeedc":"tf.dtypes","8d77af45":"df.isnull().sum()","5efff344":"tf.isnull().sum()","37560fb4":"sns.set(rc={'figure.figsize':(15,5)})\nsns.heatmap(df.isnull(),yticklabels=False)","ebaf565a":"sns.heatmap(tf.isnull(),yticklabels=False)","b026afc5":"df['Survived'].value_counts()","1d3c500e":"final = pd.concat([df,tf],axis = 0)\nfinal.drop(['Survived'],axis = 1,inplace = True)","b5bcad22":"final.head()","1efb9735":"final.shape","315f354c":"index_NaN_age = list(final[\"Age\"][final[\"Age\"].isnull()].index)\n\nfor i in index_NaN_age :\n    age_med = final[\"Age\"].median()\n    age_pred = final[\"Age\"][((final['SibSp'] == final.iloc[i][\"SibSp\"]) & (final['Parch'] == final.iloc[i][\"Parch\"]) & (final['Pclass'] == final.iloc[i][\"Pclass\"]))].median()\n    if not np.isnan(age_pred) :\n        final['Age'].iloc[i] = age_pred\n    else :\n        final['Age'].iloc[i] = age_med","424b0c76":"final['Age'].isnull().sum()","4db441c0":"final['Age'].fillna(final['Age'].median(),inplace = True)\n","93b6dede":"final['Fare'].isnull().sum()","55611202":"final[\"Fare\"] = final[\"Fare\"].fillna(final[\"Fare\"].median())\n","403466e5":"final['Fare'].dtypes","1a91fbaa":"final[\"Fare\"] = final[\"Fare\"].map(lambda n: np.log(n) if n > 0 else 0)\n","0fc82267":"new = final['Name'].str.split('.', n=1, expand = True)\nfinal['First'] = new[0]\nfinal['Last'] = new[1]\nnew1 = final['First'].str.split(',', n=1, expand = True)\nfinal['Last Name'] = new1[0]\nfinal['Title'] = new1[1]\nnew2 = final['Title'].str.split('', n=1, expand = True)","eaddb05b":"final['Title'].value_counts()","b641028a":"final.drop(['First','Last','Name','Last Name'],axis = 1,inplace = True)","db8be13d":"final.replace(to_replace = [ ' Don', ' Rev', ' Dr', ' Mme',\n        ' Major', ' Sir', ' Col', ' Capt',' Jonkheer'], value = ' Honorary(M)', inplace = True)\nfinal.replace(to_replace = [ ' Ms', ' Lady', ' Mlle',' the Countess', ' Dona'], value = ' Honorary(F)', inplace = True)","e6b3d048":"df3 = final.copy()\ndf3 =  df3[:891]\ndf3 = pd.concat([df3,df1['Survived']],axis = 1)\ndf3.head()","6dc1f499":"final['Title'].value_counts()","ebe2f8a0":"final = pd.get_dummies(final, columns = [\"Title\"])","7d0e7a58":"final.head()","da800594":"final[\"Family\"] = final[\"SibSp\"] + final[\"Parch\"] + 1","5f2eac9f":"final['Single'] = final['Family'].map(lambda s: 1 if s == 1 else 0)\nfinal['SmallF'] = final['Family'].map(lambda s: 1 if  s == 2  else 0)\nfinal['MedF'] = final['Family'].map(lambda s: 1 if 3 <= s <= 4 else 0)\nfinal['LargeF'] = final['Family'].map(lambda s: 1 if s >= 5 else 0)","f6ccb2cd":"final['Embarked'].fillna(\"S\",inplace = True)","1255b67b":"final = pd.get_dummies(final, columns = [\"Embarked\"], prefix=\"Embarked_from_\")","c96b5966":"final.Cabin.isnull().sum()","fc450c29":"final.Cabin.value_counts()","117abd05":"final['Cabin_final'] = df['Cabin'].str[0]","a54f180f":"final['Cabin_final'].fillna('Unknown',inplace = True)","97862107":"final['Cabin_final'].value_counts()","b1f6ba1f":"final.drop(['Cabin'],axis = 1,inplace = True)","cd3b0194":"final = pd.get_dummies(final, columns = [\"Cabin_final\"],prefix=\"Cabin_\")","0fb80f3c":"final.head()","a929979f":"final.Ticket.unique()","2955b3b5":"final.Ticket.value_counts()","2d3c1ce1":"final['Ticket'] = final['Ticket'].astype(str)\nfinal['Ticket_length'] = final.Ticket.apply(len)\nfinal['Ticket_length'].astype(int)\nfinal['Ticket_length'].unique()","dcbb9f34":"final['Ticket_length'] = np.where(((final.Ticket_length == 3) | (final.Ticket_length == 4) | (final.Ticket_length == 5)),4,final.Ticket_length)\n\nfinal['Ticket_length'] = np.where(((final.Ticket_length == 6)),5,final.Ticket_length)\n\nfinal['Ticket_length'] = np.where(((final.Ticket_length == 7) | (final.Ticket_length == 8) | (final.Ticket_length == 9) | (final.Ticket_length == 10) | (final.Ticket_length == 13)\n                                 | (final.Ticket_length == 17)| (final.Ticket_length == 16)| (final.Ticket_length == 13)| (final.Ticket_length == 12) | (final.Ticket_length == 15)\n                                 | (final.Ticket_length == 11)| (final.Ticket_length == 18)),12,final.Ticket_length)\n","580d39c1":"final['Ticket_length'].value_counts()","3d3a7b91":"final['Ticket_length'] = final['Ticket_length'].astype(str)\n\nfinal['Ticket_length'] = np.where(((final.Ticket_length == '4')),'Below 6',final.Ticket_length)\nfinal['Ticket_length'] = np.where(((final.Ticket_length == '5')),'At 6',final.Ticket_length)\nfinal['Ticket_length'] = np.where(((final.Ticket_length == '12')),'Above 6',final.Ticket_length)\n","252ebd90":"conversion = pd.get_dummies(final.Ticket_length, prefix = 'Ticket Length')\nfinal = pd.concat([final , conversion], axis = 1)\n \nfinal.drop(['Ticket','Ticket_length'],axis = 1, inplace = True)","1679f770":"final.head()","dbafad4c":"final = pd.get_dummies(final, columns = [\"Sex\"],prefix=\"Gender_\")","2397d5bc":"final.head()\nfinal.drop(['PassengerId'],axis = 1,inplace = True)\nfinal.drop(['SibSp','Parch','Family'],axis = 1,inplace = True)","3521e2ec":"final.dtypes","83089252":"final.isnull().sum()","063702b7":"sns.countplot(x = 'Survived', data = df1)","295b25df":"sns.countplot(x = 'Pclass', data = df1)","7ad57022":"sns.countplot(x = 'Title', data = df3)","30bd317c":"sns.countplot(x = 'Sex', data = df1)","87795123":"sns.set(rc={'figure.figsize':(40,5)})\nsns.countplot(x = 'Age', data = df1)","8bde2fb5":"x = df1['Age']\nsns.distplot(x, hist=True, rug=True)","0952ba83":"x = df1['Fare']\nsns.distplot(x, hist=True, rug=True)","97a08e8d":"x = final['Fare']\nsns.distplot(x, hist=True, rug=True)","1fb474bb":"sns.set(rc={'figure.figsize':(15,5)})\nsns.countplot(x = 'SibSp', data = df1)","ae34a493":"sns.countplot(x = 'Parch', data = df1)","cb0088ec":"sns.countplot(x = 'Embarked', data = df1)","43ec0652":"sns.catplot(x ='Survived', y ='Age', data = df1)","a0758f1f":"sns.catplot(x ='Survived', y ='SibSp', data = df1)","869e26ea":"sns.catplot(x ='Survived', y ='Parch', data = df1)","cafe2234":"sns.catplot(x = 'Sex',y='Survived',hue = 'Pclass', kind = 'bar', data = df1, col = 'Pclass', color = 'purple')","fd8ac16e":"sns.catplot(x = 'Title',y='Survived',hue = 'Sex', kind = 'bar', data = df3, col = 'Sex', palette = 'GnBu_d',aspect =2)","f14df060":"sns.catplot(x = 'SibSp',y='Survived',hue = 'Pclass',kind = 'violin', data = df3, palette = 'BuGn_r', col = 'Pclass')","9a26da33":"sns.catplot(x = 'Parch',y='Survived',hue = 'Pclass',kind = 'violin', data = df3, palette = 'cubehelix', col = 'Pclass')","623006be":"sns.catplot(x = 'Embarked',y='Survived',kind = 'point', data = df3, hue = 'Pclass', col = 'Pclass')","427f1e86":"sns.jointplot(x=df1['Age'], y=df1['SibSp'], kind = 'kde')","6940c5f2":"correlation = final.copy()\nsur = pd.concat([df['Survived'],result['Survived']],axis = 0)\ncorrelation = pd.concat([correlation,sur],axis = 1)","ccfdae41":"plt.figure(figsize=(30,30))\nsns.heatmap(correlation.corr(), annot=True, linewidth=0.5, cmap='coolwarm')","0a2c34d1":"#The models trained\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC\nfrom sklearn import svm\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.naive_bayes import BernoulliNB\n\n#For Scaling and Hyperparameter Tuning\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn import metrics\n\n#Voting Classifier\nfrom sklearn.ensemble import VotingClassifier ","17144055":"x_train = final[:891]\nfeature_scaler = MinMaxScaler()\nx_train = feature_scaler.fit_transform(x_train)","4585b38e":"y_train = final[891:]\nfeature_scaler = MinMaxScaler()\ny_train = feature_scaler.fit_transform(y_train)","08bb7517":"x_test = df1['Survived']","e1b8a013":"y_test = result['Survived']","348dbfca":"accuracy = []\nestimator = []","ba22fc01":"LR = LogisticRegression()\nestimator.append(('LR',LogisticRegression()))\ncv = cross_val_score(LR,x_train,x_test,cv=10)\naccuracy1 = cv.mean()\naccuracy.append(accuracy1)\nprint(cv)\nprint(cv.mean())","b9e4902a":"LR.fit(x_train,x_test)\nmodel1pred = LR.predict(y_train)\nsubmission1 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission1['PassengerId'] = result['PassengerId']\nsubmission1['Survived'] = model1pred\nsubmission1.to_csv('LogisticRegression(No HT).csv',index = False)","0910c160":"LR.score(y_train,y_test)","3dae9add":"SVC = LinearSVC()\n#estimator.append(('LSVC',LinearSVC()))\ncv = cross_val_score(SVC,x_train,x_test,cv=10)\naccuracy2 = cv.mean()\naccuracy.append(accuracy2)\nprint(cv)\nprint(cv.mean())\n","117febe3":"SVC.fit(x_train,x_test)\nSVC.score(y_train,y_test)","dabf7aa3":"SVC.fit(x_train,x_test)\nmodel2pred = SVC.predict(y_train)\nsubmission2 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission2['PassengerId'] = result['PassengerId']\nsubmission2['Survived'] = model2pred\nsubmission2.to_csv('LinearSVC(No HT).csv',index = False)","e388d2fd":"poly = svm.SVC(kernel = 'poly', gamma = 'scale')\n#estimator.append(('PSVC',svm.SVC(kernel = 'poly', gamma = 'scale')))\ncv = cross_val_score(poly,x_train,x_test,cv=10)\naccuracy3 = cv.mean()\naccuracy.append(accuracy3)\nprint(cv)\nprint(cv.mean())","0de79915":"poly.fit(x_train,x_test)\npoly.score(y_train,y_test)","4a31dfd4":"model3pred = poly.predict(y_train)\nsubmission3 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission3['PassengerId'] = result['PassengerId']\nsubmission3['Survived'] = model3pred\nsubmission3.to_csv('PolynomialSVC(No HT).csv',index = False)","1a04919d":"DT = DecisionTreeClassifier(random_state = 5)\nestimator.append(('DT',DecisionTreeClassifier(random_state = 5)))\ncv = cross_val_score(DT,x_train,x_test,cv=10)\naccuracy4 = cv.mean()\naccuracy.append(accuracy4)\nprint(cv)\nprint(cv.mean())","4c6b8be0":"DT.fit(x_train,x_test)\nDT.score(y_train,y_test)","120b373c":"model4pred = DT.predict(y_train)\nsubmission4 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission4['PassengerId'] = result['PassengerId']\nsubmission4['Survived'] = model4pred\nsubmission4.to_csv('Decision Tree(No HT).csv',index = False)","f2725cac":"GNB = GaussianNB()\nestimator.append(('GNB',GaussianNB()))\ncv = cross_val_score(GNB,x_train,x_test,cv=10)\naccuracy5 = cv.mean()\naccuracy.append(accuracy5)\nprint(cv)\nprint(cv.mean())","aefd9e84":"GNB.fit(x_train,x_test)\nGNB.score(y_train,y_test)","c7ff3a98":"model5pred = GNB.predict(y_train)\nsubmission5 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission5['PassengerId'] = result['PassengerId']\nsubmission5['Survived'] = model5pred\nsubmission5.to_csv('Gaussian NB(No HT).csv',index = False)","7da39d33":"MNB = MultinomialNB()\nestimator.append(('MNB',MultinomialNB()))\ncv = cross_val_score(MNB,x_train,x_test,cv=10)\naccuracy6 = cv.mean()\naccuracy.append(accuracy6)\nprint(cv)\nprint(cv.mean())","5978907a":"MNB.fit(x_train,x_test)\nMNB.score(y_train,y_test)","d6d4830c":"MNB.fit(x_train,x_test)\nmodel6pred = MNB.predict(y_train)\nsubmission6 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission6['PassengerId'] = result['PassengerId']\nsubmission6['Survived'] = model6pred\nsubmission6.to_csv('MultinomialNB(No HT).csv',index = False)","13cf0a65":"RF = RandomForestClassifier(random_state = 5)\nestimator.append(('RF',RandomForestClassifier(random_state = 5)))\ncv = cross_val_score(RF,x_train,x_test,cv=10)\naccuracy7 = cv.mean()\naccuracy.append(accuracy7)\nprint(cv)\nprint(cv.mean())","c2f52605":"RF.fit(x_train,x_test)\nRF.score(y_train,y_test)","4c146d21":"RF.fit(x_train,x_test)\nmodel7pred = RF.predict(y_train)\nsubmission7 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission7['PassengerId'] = result['PassengerId']\nsubmission7['Survived'] = model7pred\nsubmission7.to_csv('RandomForest(No HT).csv',index = False)","e01c0fef":"GBC = GradientBoostingClassifier(random_state = 5)\nestimator.append(('GBC',GradientBoostingClassifier(random_state = 5)))\ncv = cross_val_score(GBC,x_train,x_test,cv=10)\naccuracy8 = cv.mean()\naccuracy.append(accuracy8)\nprint(cv)\nprint(cv.mean())","20e3a0e2":"GBC.fit(x_train,x_test)\nGBC.score(y_train,y_test)","d41c5585":"GBC.fit(x_train,x_test)\nmodel8pred = GBC.predict(y_train)\nsubmission8 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission8['PassengerId'] = result['PassengerId']\nsubmission8['Survived'] = model8pred\nsubmission8.to_csv('GradientBoosting(No HT).csv',index = False)","ca29ba04":"XGB = XGBClassifier(random_state = 5)\nestimator.append(('XGB', XGBClassifier(random_state = 5)))\ncv = cross_val_score(XGB,x_train,x_test,cv=10)\naccuracy9 = cv.mean()\naccuracy.append(accuracy9)\nprint(cv)\nprint(cv.mean())","1b7430f0":"XGB.fit(x_train,x_test)\nXGB.score(y_train,y_test)","23866a37":"XGB.fit(x_train,x_test)\nmodel9pred = XGB.predict(y_train)\nsubmission9 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission9['PassengerId'] = result['PassengerId']\nsubmission9['Survived'] = model9pred\nsubmission9.to_csv('XGBoosting(No HT).csv',index = False)","e95510af":"Krange = range(1,20)\nscores = {}\nscores_list = []\nfor k in Krange:\n    knn = KNeighborsClassifier(n_neighbors = k)\n    knn.fit(x_train,x_test)\n    y_pred = knn.predict(y_train)\n    scores[k] = metrics.accuracy_score(result['Survived'],y_pred)\n    scores_list.append(metrics.accuracy_score(result['Survived'],y_pred))\n    \nplt.plot(Krange,scores_list)\nplt.xlabel(\"Value of K\")\nplt.ylabel(\"Accuracy\")","cbd74483":"KNN = KNeighborsClassifier(n_neighbors = 11)\nestimator.append(('KNN',KNeighborsClassifier(n_neighbors = 11)))\ncv = cross_val_score(KNN,x_train,x_test,cv=10)\naccuracy10 = cv.mean()\naccuracy.append(accuracy10)\nprint(cv)\nprint(cv.mean())","ec703b4f":"KNN.fit(x_train,x_test)\nKNN.score(y_train,y_test)","53b56e49":"KNN.fit(x_train,x_test)\nmodel10pred = KNN.predict(y_train)\nsubmission10 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission10['PassengerId'] = result['PassengerId']\nsubmission10['Survived'] = model10pred\nsubmission10.to_csv('KNN(No HT).csv',index = False)","c88c104c":"Models = ['Logistic Regression','Linear SVM','Polynomial SVM','Decision Tree','Gaussian NB','Multinomial NB','Random Forest Classifier','Gradient Boost Classifier','XG Boosting','K-Nearest Neighbors']\ntotal = list(zip(Models,accuracy))\noutput1 = pd.DataFrame(total, columns = ['Models','Accuracy'])\n","afb0fde0":"o = output1.groupby(['Models'])['Accuracy'].mean().reset_index().sort_values(by='Accuracy',ascending=False)\no.head(10).style.background_gradient(cmap='Reds')\n","0e086f14":"vot_soft = VotingClassifier(estimators = estimator, voting ='soft') \nvot_soft.fit(x_train, x_test) \ny_pred = vot_soft.predict(y_train)\nvot_soft.score(y_train,y_test)","e8befb50":"modelpred1 = vot_soft.predict(y_train)\nsub1 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsub1['PassengerId'] = result['PassengerId']\nsub1['Survived'] = modelpred1\nsub1.to_csv('SoftVoting(NO HT).csv',index = False)","3ec0d435":"vot_hard = VotingClassifier(estimators = estimator, voting ='hard') \nvot_hard.fit(x_train, x_test) \ny_pred = vot_hard.predict(y_train)\nvot_hard.score(y_train,y_test)","9f3b0159":"modelpred2 = vot_hard.predict(y_train)\nsub2 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsub2['PassengerId'] = result['PassengerId']\nsub2['Survived'] = modelpred2\nsub2.to_csv('HardVoting(NO HT).csv',index = False)","ed631899":"Accuracy = []\nEstimator = []","218d66eb":"\"\"\"\nC = [0.01,0.1, 1, 10,50, 100]\npenalty = ['l2']\nsolver = ['newton-cg','lbfgs','liblinear']\nclass_weight = ['dict','balanced','None']\nmax_iter = [900,1000,1100,1200]\n\nLog = LogisticRegression()\n\nparameters = {'C': [0.01,0.1, 1, 10,50, 100],'penalty' : ['l2'],'solver' : ['newton-cg','lbfgs','liblinear'],'class_weight':['dict','balanced','None'],'max_iter':[900,1000,1100,1200]}\n\nlog_regressor = GridSearchCV(Log, parameters, scoring='accuracy',cv =10)\nlog_regressor.fit(x_train, x_test)\nlog_regressor.best_params_\n\"\"\"","dd9eab6f":"#log_regressor.best_score_","75c6ac88":"lr = LogisticRegression(C = 100,penalty = 'l2', solver = 'newton-cg',class_weight = 'dict', max_iter = 900)\nEstimator.append(('lr',LogisticRegression(C = 1,penalty = 'l2', solver = 'newton-cg',class_weight = 'dict', max_iter = 900)))\ncv = cross_val_score(lr,x_train,x_test,cv=10)\nAccuracy1 = cv.mean()\nAccuracy.append(Accuracy1)\nprint(cv)\nprint(cv.mean())","1d9c2814":"lr.fit(x_train,x_test)\nlr.score(y_train,y_test)","c2481557":"model11pred = lr.predict(y_train)\nsubmission11 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission11['PassengerId'] = result['PassengerId']\nsubmission11['Survived'] = model11pred\nsubmission11.to_csv('LogisticRegression(HT).csv',index = False)","c31432fb":"'''\npenalty = ['l1','l2']\nloss = ['hinge','squared_hinge']\nclass_weight = ['dict','balanced','None']\nC = [.1,1,10,50,100,150]\n\nSVM = LinearSVC()\n\nparameters = {'penalty':['l1','l2'],'loss':['hinge','squared_hinge'],'class_weight':['dict','balanced','None'] ,'C': [.1,1,10,50,100,150]}\n\nSVM_classifier = GridSearchCV(SVM, parameters, scoring='accuracy' ,cv =10)\nSVM_classifier.fit(x_train, x_test)\nSVM_classifier.best_params_\n'''","b436fe01":"#SVM_classifier.best_score_","d3754c6e":"svc = LinearSVC(C = 0.1,penalty = 'l2', loss = 'hinge',class_weight = 'balanced')\ncv = cross_val_score(svc,x_train,x_test,cv=10)\nAccuracy2 = cv.mean()\nAccuracy.append(Accuracy2)\nprint(cv)\nprint(cv.mean())","b0b3a7f3":"svc.fit(x_train,x_test)\nsvc.score(y_train,y_test)","62279fae":"model12pred = svc.predict(y_train)\nsubmission12 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission12['PassengerId'] = result['PassengerId']\nsubmission12['Survived'] = model12pred\nsubmission12.to_csv('SVCLinear(HT).csv',index = False)","44a3a6b9":"'''\nkernel = ['poly']\ndegree = [1,2,3]\nclass_weight = ['balanced','dict']\nC = [.1,1,10,]\ngamma = ['scale','auto']\n\ns = svm.SVC()\n\nparameters = {'kernel':['poly'],'class_weight':['balanced','dict'] ,'C': [.1,1,10],'degree':[1,2,3],'gamma':['scale','auto']}\n\nsvcc = GridSearchCV(s, parameters, scoring='accuracy' ,cv =10)\nsvcc.fit(x_train, x_test)\nsvcc.best_params_\n'''","c8267126":"#svcc.best_score_","76aee201":"SVM_all = svm.SVC(C = 1,degree = 2, kernel = 'poly',class_weight = 'balanced',gamma = 'scale')\ncv = cross_val_score(svc,x_train,x_test,cv=10)\nAccuracy3 = cv.mean()\nAccuracy.append(Accuracy3)\nprint(cv)\nprint(cv.mean())","0ad19479":"SVM_all.fit(x_train,x_test)\nSVM_all.score(y_train,y_test)","a97b0915":"model13pred = SVM_all.predict(y_train)\nsubmission13 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission13['PassengerId'] = result['PassengerId']\nsubmission13['Survived'] = model13pred\nsubmission13.to_csv('PolynomialSVM(HT).csv',index = False)","2bdb017e":"'''\ncriterion = ['gini','entropy']\nsplitter = ['best','random']\nmax_depth = [5,10,15,20,25]\nmin_samples_split = [2,3,4,5]\nclass_weight = ['dict','balanced','None']\nrandom_state = [5,6]\n\n\nTree = DecisionTreeClassifier()\n\nparameters = {'criterion': ['gini','entropy'],'splitter': ['best','random'], 'max_depth':[5,10,15,20,25],'min_samples_split':[2,3,4,5],'class_weight':['dict','balanced','None'],'random_state':[5,6]}\n\ntree_classifier = GridSearchCV(Tree, parameters, scoring='accuracy' ,cv = 10)\ntree_classifier.fit(x_train, x_test)\ntree_classifier.best_params_\n'''","05e2bd0b":"#tree_classifier.best_score_\n","c580b347":"dt = DecisionTreeClassifier(class_weight = 'balanced',criterion = 'entropy',max_depth = 5,min_samples_split = 2,splitter = 'best',random_state = 6)\nEstimator.append(('dt',DecisionTreeClassifier(class_weight = 'balanced',criterion = 'entropy',max_depth = 5,min_samples_split = 2,splitter = 'best',random_state = 6)))\ncv = cross_val_score(dt,x_train,x_test,cv=10)\nAccuracy4 = cv.mean()\nAccuracy.append(Accuracy4)\nprint(cv)\nprint(cv.mean())","e7b32fd9":"dt.fit(x_train,x_test)\ndt.score(y_train,y_test)","cd708d1d":"model14pred = SVM_all.predict(y_train)\nsubmission14 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission14['PassengerId'] = result['PassengerId']\nsubmission14['Survived'] = model14pred\nsubmission14.to_csv('DecisionTrees(HT).csv',index = False)","1b07c07b":"'''\nalpha = [0.01,0.1, 1, 10, 100]\nfit_prior = [True,False]\n\nmnb = MultinomialNB()\n\nparameters = {'alpha': [0.01,0.1, 1, 10, 100],'fit_prior' : [True,False]}\n\nmn = GridSearchCV(mnb, parameters, scoring='accuracy',cv =10)\nmn.fit(x_train, x_test)\nmn.best_params_\n'''","4a64a156":"#mn.best_score_","d0f8fb0e":"mnb = MultinomialNB(alpha = 1,fit_prior = True)\nEstimator.append(('mnb',MultinomialNB(alpha = 1,fit_prior = True)))\ncv = cross_val_score(mnb,x_train,x_test,cv=10)\nAccuracy5 = cv.mean()\nAccuracy.append(Accuracy5)\nprint(cv)\nprint(cv.mean())","bb3023f6":"mnb.fit(x_train,x_test)\nmnb.score(y_train,y_test)","e9339eb4":"model15pred = mnb.predict(y_train)\nsubmission15 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission15['PassengerId'] = result['PassengerId']\nsubmission15['Survived'] = model15pred\nsubmission15.to_csv('MultinomialNB(HT).csv',index = False)","ac864e72":"'''\nn_estimators = [250,500,750,1000]\ncriterion = ['gini','entropy']\nmax_depth = [5,10,15,20,25]\nmin_samples_split = [2,3,4,5]\nbootstrap = [True,False]\noob_score = [True,False]\nclass_weight = ['balanced','balanced_subsample','dict']\nmax_features = ['auto','sqrt','log2']\n\nRF = RandomForestClassifier()\n\nparameters = {'n_estimators': [250,500,750,1000],'criterion': ['gini','entropy'],'max_depth':[5,10,15,20,25],'min_samples_split':[2,3,4,5],'bootstrap':[True,False]\n              ,'oob_score':[True,False],'class_weight':['balanced','balanced_subsample','dict'],'max_features':['auto','sqrt','log2']}\n\nRFClassifier = RandomizedSearchCV(RF, parameters, scoring='accuracy' ,cv =50)\nRFClassifier.fit(x_train, x_test)\nRFClassifier.best_params_\n'''","c1df57e0":"#RFClassifier.best_score_","a11ff310":"\"\"\"\nn_estimators = [650,700,750,800,850]\ncriterion = ['gini']\nmax_depth = [4,5]\nmin_samples_split = [5,6]\nbootstrap = [False,True]\noob_score = [False,True]\nclass_weight = ['balanced_subsample']\nmax_features = ['log2']\n\nrF = RandomForestClassifier()\n\nparameters = {'n_estimators': [650,700,750,800,850],'criterion': ['gini'],'max_depth':[5,6],'min_samples_split':[4,5],'bootstrap':[False,True]\n              ,'oob_score':[False,True],'class_weight':['balanced_subsample'],'max_features':['log2']}\n\nRClassifier = GridSearchCV(rF, parameters, scoring='accuracy' ,cv =5)\nRClassifier.fit(x_train,x_test)\nRClassifier.best_params_\n\"\"\"","d37ed998":"#RClassifier.best_score_","b2587ab1":"rf = RandomForestClassifier(oob_score = True,n_estimators =650 ,min_samples_split = 4,max_features = 'log2',max_depth =6,criterion = 'gini',class_weight = 'balanced_subsample',bootstrap = True)\nEstimator.append(('rf',RandomForestClassifier(oob_score = True,n_estimators =650 ,min_samples_split = 4,max_features = 'log2',max_depth =6,criterion = 'gini',class_weight = 'balanced_subsample',bootstrap = True)))\ncv = cross_val_score(rf,x_train,x_test,cv=10)\nAccuracy6 = cv.mean()\nAccuracy.append(Accuracy6)\nprint(cv)\nprint(cv.mean())","453a62eb":"rf.fit(x_train,x_test)\nrf.score(y_train,y_test)","48e594c9":"model16pred = rf.predict(y_train)\nsubmission16 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission16['PassengerId'] = result['PassengerId']\nsubmission16['Survived'] = model16pred\nsubmission16.to_csv('RandomForest(HT).csv',index = False)","6bd5547b":"'''\nn_estimators = [250,500,750,1000]\nlearning_rate = [.01,.1,1,5]\nsubsample = [.01,.1,1,5]\nmin_samples_split = [2,3,4,5]\nmax_depth = [5,10,15,20,25]\nloss = ['deviance','exponential']\nmax_features = ['auto','sqrt','log2']\n\nGB = GradientBoostingClassifier()\n\nparameters = {'n_estimators': [250,500,750,1000],'loss': ['deviance','exponential'],'max_features':['auto','sqrt','log2'],'learning_rate':[.01,.1,1,5],'subsample':[.01,.1,1,5],\n             'min_samples_split':[2,3,4,5],'max_depth':[5,10,15,20,25]}\n\nGBClassifier = RandomizedSearchCV(GB, parameters, scoring='accuracy' ,cv =50)\nGBClassifier.fit(x_train, x_test)\nGBClassifier.best_params_\n'''","081784f8":"#GBClassifier.best_score_","54406272":"'''\nn_estimators = [150,200,250,300,350]\nlearning_rate = [.01,.1]\nsubsample = [.05,.1]\nmin_samples_split = [3,4,5]\nmax_depth = [9,10,11]\nloss = ['exponential']\nmax_features = ['auto']\n\nGB = GradientBoostingClassifier()\n\nparameters = {'n_estimators': [150,200,250,300,350],'loss': ['exponential'],'max_features':['auto'],'learning_rate':[.01,.1],'subsample':[.05,.1],\n             'min_samples_split':[3,4,5],'max_depth':[9,10,11]}\n\nGBClassifier = GridSearchCV(GB, parameters, scoring='accuracy' ,cv =5)\nGBClassifier.fit(x_train, x_test)\nGBClassifier.best_params_\n'''","69f42141":"#GBClassifier.best_score_","9fa7e074":"gbc = GradientBoostingClassifier(loss = 'exponential',n_estimators =200 ,min_samples_split = 4,max_features = 'auto',max_depth =9,learning_rate = .01,subsample = .1)\nEstimator.append(('gbc',GradientBoostingClassifier(loss = 'exponential',n_estimators =200 ,min_samples_split = 4,max_features = 'auto',max_depth =9,learning_rate = .01,subsample = .1)))\ncv = cross_val_score(gbc,x_train,x_test,cv=10)\nAccuracy7 = cv.mean()\nAccuracy.append(Accuracy7)\nprint(cv)\n\n\nprint(cv.mean())","f07a55df":"gbc.fit(x_train,x_test)\ngbc.score(y_train,y_test)","1274b075":"model17pred = gbc.predict(y_train)\nsubmission17 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission17['PassengerId'] = result['PassengerId']\nsubmission17['Survived'] = model17pred\nsubmission17.to_csv('GradientBoosting(HT).csv',index = False)","c6ab7593":"'''\nmin_child_weight = [1,5,10]\ngamma = [.5,1,1.5,2,2.5]\nsubsample = [.6,.8,1]\ncolsample_bytree = [.6,.8,1]\neta = [.01,.05,.1,.5,.2]\nmax_depth = [3,4,5,6,7,8,9,10]\n\nXB = XGBClassifier()\n\nparameters = {'min_child_weight': [1,5,10],'gamma': [.5,1,1.5,2,2.5],'subsample':[.6,.8,1],'colsample_bytree':[.6,.8,1],'subsample':[.6,.8,1],\n             'eta':[.01,.05,.1,.5,.2],'max_depth':[3,4,5,6,7,8,9,10]}\n\nXBClassifier = RandomizedSearchCV(XB, parameters, scoring='accuracy' ,cv =50)\nXBClassifier.fit(x_train, x_test)\nXBClassifier.best_params_\n'''","f5169014":"#XBClassifier.best_score_","fee2ff68":"'''\nmin_child_weight = [4,5,6]\ngamma = [1,1.5,2.0,2.5,3]\nsubsample = [.6,.8,1,1.2]\ncolsample_bytree = [.6,.8,1,1.2]\neta = [.5,.01]\n\nmax_depth = [5,6,7,8]\n\nXB = XGBClassifier()\n\nparameters = {'min_child_weight': [4,5,6],'gamma': [1,1.5,2.0,2.5,3],'subsample':[.6,.8,1,1.2],'colsample_bytree':[.6,.8,1,1.2],\n             'eta':[.5,.01],'max_depth':[5,6,7,8]}\n\nXBClassifier = GridSearchCV(XB, parameters, scoring='accuracy' ,cv =5)\nXBClassifier.fit(x_train, x_test)\nXBClassifier.best_params_\n'''","d88d328a":"#XBClassifier.best_score_","cfd1cc6d":"xgb = XGBClassifier(colsample_bytree = .6,eta = 0.5,gamma = 1,max_depth = 5,min_child_weight = 6,subsample = 1)\nEstimator.append(('xgb',XGBClassifier(colsample_bytree = .6,eta = 0.5,gamma = 1,max_depth = 5,min_child_weight = 6,subsample = 1)))\ncv = cross_val_score(xgb,x_train,x_test,cv=10)\nAccuracy8 = cv.mean()\nAccuracy.append(Accuracy8)\nprint(cv)\nprint(cv.mean())","562d1288":"xgb.fit(x_train,x_test)\ngbc.score(y_train,y_test)","cef4feb6":"model18pred = xgb.predict(y_train)\nsubmission18 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission18['PassengerId'] = result['PassengerId']\nsubmission18['Survived'] = model18pred\nsubmission18.to_csv('XGBoosting(HT).csv',index = False)","8ba01349":"x_train1 = final[:891]\nfeature_scaler = StandardScaler()\nx_train1 = feature_scaler.fit_transform(x_train1)\ny_train1 = final[891:]\nfeature_scaler = StandardScaler()\ny_train1 = feature_scaler.fit_transform(y_train1)","66588ca3":"Krange1 = range(1,20)\nscores1 = {}\nscores_list1 = []\nfor k in Krange1:\n    knn = KNeighborsClassifier(n_neighbors = k)\n    knn.fit(x_train1,x_test)\n    y_pred = knn.predict(y_train1)\n    scores1[k] = metrics.accuracy_score(result['Survived'],y_pred)\n    scores_list1.append(metrics.accuracy_score(result['Survived'],y_pred))\n    \nplt.plot(Krange,scores_list)\nplt.xlabel(\"Value of K\")\nplt.ylabel(\"Accuracy\")","7359271c":"knn = KNeighborsClassifier(n_neighbors = 11)\nEstimator.append(('knn',KNeighborsClassifier(n_neighbors = 13)))\ncv = cross_val_score(knn,x_train1,x_test,cv=10)\nAccuracy9 = cv.mean()\nAccuracy.append(Accuracy9)\nprint(cv)\nprint(cv.mean())","c13f37a0":"knn.fit(x_train1,x_test)\nknn.score(y_train1,y_test)","971367b5":"model19pred = knn.predict(y_train)\nsubmission19 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission19['PassengerId'] = result['PassengerId']\nsubmission19['Survived'] = model19pred\nsubmission19.to_csv('KNN(StdScaler).csv',index = False)","b3461626":"models = ['Logistic Regression','SVM Linear Classifier','SVM Polynomial Classifier','Decision Tree','Multinomial NB','Random Forest Classifier','Gradient Boost Classifier','XG Boosting','K-Nearest Neighbors(StdScaler)']\ntotal = list(zip(models,Accuracy))\noutput2 = pd.DataFrame(total, columns = ['Models after Hyperparameter Tuning','Accuracy after HT'])","86861392":"r = output2.groupby(['Models after Hyperparameter Tuning'])['Accuracy after HT'].mean().reset_index().sort_values(by='Accuracy after HT',ascending=False)\nr.head(10).style.background_gradient(cmap='Reds')\n","2761bd5e":"vot_soft1 = VotingClassifier(estimators = Estimator, voting ='soft') \nvot_soft1.fit(x_train, x_test) \ny_pred = vot_soft1.predict(y_train)\nvot_soft1.score(y_train,y_test)\n\nmodelpred3 = vot_soft1.predict(y_train)\nsub3 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsub3['PassengerId'] = result['PassengerId']\nsub3['Survived'] = modelpred3\nsub3.to_csv('SoftVoting(HT).csv',index = False)","ac2b6911":"vot_soft1.fit(x_train, x_test) \nvot_soft1.score(y_train,y_test)","29e1c02a":"vot_hard1 = VotingClassifier(estimators = Estimator, voting ='hard') \nvot_hard1.fit(x_train, x_test) \ny_pred = vot_hard1.predict(y_train)\nvot_hard1.score(y_train,y_test)\n\nmodelpred4 = vot_hard1.predict(y_train)\nsub4 = pd.DataFrame(columns = ['PassengerId','Survived'])\nsub4['PassengerId'] = result['PassengerId']\nsub4['Survived'] = modelpred4\nsub4.to_csv('HardVoting(HT).csv',index = False)","5966aed7":"vot_hard1.fit(x_train, x_test) \nvot_hard1.score(y_train,y_test)","4ef10d0e":"output = pd.concat([output1,output2],axis = 1)\noutput.sort_values(by=['Accuracy after HT'], inplace=True, ascending=False)\noutput.head(10)","56e11c02":"As you can see in the last row, the chances for Survival are highest for higher positive correlation value(Shown in descending order) :\n1. Gender - Female (.69)\n1. Title - Mrs (.43)\n1. Title - Miss (.42)\n1. Fare (.3)\n1. Medium Family (.19)\n\nAs you can see in the last row, the chances for Survival are lowest for lower negative correlation value(Shown in Ascending order) :\n1. Gender - Male (-.69)\n1. Title - Mr(-.65)\n1. Pclass (-.26)\n1. Single (Solo traveller) (-.22)\n1. Embarked from S (-.13)","506e92e6":"<h2> Models without Hyperparameter Tuning","40cf7cbb":"<h3>1.) Categorical values --> PassengerId, Survived, Name, Sex, Ticket, Cabin, Embarked <\/h3>\n<h3>2.) Ordinal values --> Pclass <\/h3>\n<h3>3.) Numerical values --> Age, SibSp, Parch, Fare <\/h3>","e4994621":"Shows the count of survived people. Less number of people survived as compared to people who didn't survive.","5df65c19":"Count of males and females aboard the titanic.","cb6fff5c":"4.b) Multinomial NB","f1dd35ce":"2.a) Support Vector Machine using Linear kernel","0ec1a2bc":"The distribution of age among the passengers and their count for particular number of age.","eb11fc7b":"Submission 3 for SVC without Hyperparameter Optimisation","6bc91c8b":"1. Logistic Regression\n1. Support Vector Machine\n1. Decision Tree\n1. Naive Bayes\n1. Random Forest\n1. Gradient Boosting\n1. K-Nearest Neighbor\n1. XG Bosst","74b0631f":"The number of passengers survived on the basis of the siblings the passengers had on Titanic.","f59b6a09":"# Models after Hyperparameter Optimisation","f5d85bbf":"The places from where the passengers boarded the Titanic.","aec4ca64":"This shows that fare is very unevenly distributed(Skewness is high) with the maximum value present in the first quantile (0-100). Therefore, I split them into groups.","02c29002":"<h3>1.) Logistic Regression<\/h3>","381e6a14":"Females survived more and those with honorary titles survived more in their respective percantage.","8adefba4":"Data still evenly distributed.","3aee8085":"Edit - I got the highest accuracy as 0.78229 by Linear SVC. I wanted to increase my accuracy so I checked various Kernels by top percentile of the authors in this Titanic Competition. So, I have now taken some key points from another notebook and I am gonna implement it here. I would like to acknowledge Mr. Yassine for his good observations. I am attaching the link to his kernel if anybody wants to look at the kernel. \n","4c974ed8":"<h3> Ticket ---><\/h3>","293aeecf":"Concatenating the Training and Testing dataset for feature reengineering.","1e628913":"<h3> Name ---> <\/h3>","819c10dc":"2.b) Other SVM's","4cdca05d":"The siblings of class 1 survived more than Class 2 and Class 1","3b2fb1d5":"As you can see, age has more number of people present in the middle part(20-40) and their populatin is more even distribted in the middle and shows less towards for older ages.","032f4a93":"<h3>4.) Naive Bayes<\/h3>","c78de101":"The number of siblings present for passengers.","96dd94b7":"<h3>4.) Naive Bayes<\/h3>\n","8a07c7d9":"The order of passengers are highest for 3rd class, then 1st class and then came 2nd class at the lowest.","bd5d5dd1":"<h3>3.) Decision Trees<\/h3>","7b4017ed":"2.b) Support Vector Machine using Polynomial kernel","98f98180":"<h3>3.) Decision Tree<\/h3>","926ebb78":"4.a) Gaussian NB","607848eb":"# Feature Scaling\n","dfd8a218":"<h3>7.) XG Boosting<\/h3>","5ed2021a":"<h3>1.) Logistic Regression<\/h3>","0bef4951":"<h2>Explanation of Violin Plot<\/h2>\n\n![Violin Plot](https:\/\/images.ctfassets.net\/fi0zmnwlsnja\/sdfgtcRp16wTNOcRceGQm\/5bfcb73d2261d49ff20dd7857e0152b1\/Screen_Shot_2019-03-01_at_11.36.10_AM.png)\n\nViolin plots have many of the same summary statistics as box plots:\n\n* the white dot represents the median\n* the thick gray bar in the center represents the interquartile range\n* the thin gray line represents the rest of the distribution, except for points that are determined to be \u201coutliers\u201d using a method that is a function of the interquartile range.\n* the skinnier the plots, the lower the probability of values lying there.\n\n[For more info, Check -->](https:\/\/mode.com\/blog\/violin-plot-examples\/)","1a3197ea":"Submission 2 for SVC without Hyperparameter Optimisation","628bc9a6":"As the Age shows 86 missing values even after imputing. The missing values are present in testing dataset, so I am gonna substitute the rest of the values with median.","74892bf2":"More number of Males are present, then comes Females according to titles. The honorary title means special titles given to people from army and so on.","380f2470":"Submission 1 for Logisitc Regression without Hyperparameter Tuning","b7b161db":"<h3>Cabin ---><\/h3>\n","78b53caa":"<h3>2.) Support Vector Machine<\/h3>","9e93d6e2":"<h3>5.) Random Forest Classifier<\/h3>","82f4856e":"<h2>Numerical Variables<\/h2>","cdf897df":"Heatmap for missing values.","9d264b70":"<h3> Fare ---> <\/h3>","ad4ba0f4":"<h3> SibSp + Parch = Family Size ---> <\/h3>\n","825c8423":"<h3>6.) Gradient Boosting Classifier<\/h3>","19f988ae":"This shows that more number of young people survived the crash of Titanic.","943ee10d":"<h3>8.) K-Nearest Neighbors<\/h3>","00a85861":"<h2> Bivariate Data Analysis <\/h2>","814ea3e0":"# Model Training","fb934722":"<h3>7.) XG Boosting<\/h3>","b99e112b":"Heatmap for missing values.","e9fb05ff":"<h3>6.) Gradient Boosting Classifier <\/h3>","ecbc2f4b":"<h3> Embarked ---><\/h3>","35c9d0c8":"<h2> Categorical Variables <\/h2>","300dc470":"<h3>5.) Random Forest Classifier <\/h3>","505c60d0":"# Visualizations","b936b574":"The number of parents and children present.","e4742c63":"Reference - https:\/\/www.kaggle.com\/yassineghouzam\/titanic-top-4-with-ensemble-modeling","0fd8347b":"<h1>Feature Reengineering <\/h1>","86b6799a":"<h3> Sex ---> <\/h3>","3718f829":"<h3>2.) Support Vector Machine <\/h3>","94d97218":"2.a) Linear SVC","b6b61cbe":"<h3>8.) K-Nearest Neigbhbors<\/h3>","b1789d6d":"<h3> Age ---> <\/h3>","a3d58b8b":"The line at the top shows the mean of the values and their standard deviation around the part.\nThis shows how many passengers survived according to the class they belonged to and their gender.\nFemales and Males of class 1 survived more.\nFemales of all classes survived more."}}