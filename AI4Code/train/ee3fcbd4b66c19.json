{"cell_type":{"ca8a625c":"code","38c4ef15":"code","73c10f46":"code","40b01ee1":"code","7e8e283c":"code","8d21682b":"code","09c222fe":"code","68b14d1a":"code","ca9ab5f5":"code","b4146509":"code","a338c835":"code","419e4453":"code","b24d8510":"code","af51a03b":"code","9cdfd5d1":"code","84d120b9":"code","7b1cdb7a":"code","5345ae6b":"code","5bc45084":"code","9a7af213":"code","67e36b8f":"code","79d7c989":"code","2d6e931b":"code","99bb331e":"markdown","4e7d2a62":"markdown","a6202171":"markdown","1e6e84f2":"markdown","f7a646ee":"markdown","c7b22e60":"markdown","519dbd88":"markdown","2b490300":"markdown","36d30506":"markdown","7377eba2":"markdown","318d121f":"markdown","adc95148":"markdown"},"source":{"ca8a625c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","38c4ef15":"sample_submission = pd.read_csv(\"..\/input\/tobigs13nn\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/tobigs13nn\/test_df.csv\")\ntrain = pd.read_csv(\"..\/input\/tobigs13nn\/train_df.csv\")\n\nprint(f\"Train data shape {train.shape}\")\nprint(f\"Test data shape {test.shape}\")","73c10f46":"train.head()","40b01ee1":"test.head()","7e8e283c":"X = train.iloc[:,1:].values\ny = train.iloc[:,0].values","8d21682b":"import tensorflow as tf\ny = tf.keras.utils.to_categorical(y)\ny.shape","09c222fe":"X = X \/ 255\nX","68b14d1a":"from sklearn.model_selection import train_test_split\nx_train,x_val,y_train,y_val = train_test_split(X, y, train_size=0.95,random_state=10)","ca9ab5f5":"import matplotlib.pyplot as plt\nprint(x_train.shape, y_train[0].argmax())\nprint(y_train[0])\nplt.imshow(x_train[0].reshape(28, 28, 1)[:,:,0])","b4146509":"num_calsses = 10\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Dense(256,input_shape=(784,)),\n  tf.keras.layers.BatchNormalization(),     \n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(128,activation=\"selu\",bias_initializer=tf.keras.initializers.he_normal(seed=None)), \n  tf.keras.layers.BatchNormalization(),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(64,activation=\"selu\",bias_initializer=tf.keras.initializers.he_normal(seed=None)),\n  tf.keras.layers.Dense(num_calsses,activation=\"softmax\") \n])\n\nmodel.compile(optimizer=\"adam\",loss=\"categorical_crossentropy\",metrics=['accuracy'])\nmodel.summary()","a338c835":"history = model.fit(x_train,y_train,\n                    batch_size=512,\n                    epochs=5,\n                    validation_data=[x_val,y_val])","419e4453":"x_test = test.iloc[:,1:].values","b24d8510":"x_test = x_test \/ 255","af51a03b":"predictions = model.predict_classes(x_test)","9cdfd5d1":"sample_submission['Category'] = pd.Series(predictions)\nsample_submission.head()","84d120b9":"sample_submission.to_csv(\"submission.csv\",index=False)","7b1cdb7a":"def cv_ensemble(X, y, x_test):\n    preds = []\n    from sklearn.model_selection import KFold, StratifiedKFold\n    folds = KFold(n_splits=10, shuffle=True, random_state=2020)\n    for train_idx, val_idx in folds.split(X):\n        x_train, x_val = X[train_idx], X[val_idx]\n        y_train, y_val = y[train_idx], y[val_idx]\n        num_calsses = 10\n        model = tf.keras.models.Sequential([\n                  tf.keras.layers.Dense(256,input_shape=(784,)),\n                  tf.keras.layers.BatchNormalization(),     \n                  tf.keras.layers.Dropout(0.2),\n                  tf.keras.layers.Dense(128,activation=\"selu\",bias_initializer=tf.keras.initializers.he_normal(seed=None)), \n                  tf.keras.layers.BatchNormalization(),\n                  tf.keras.layers.Dropout(0.2),\n                  tf.keras.layers.Dense(64,activation=\"selu\",bias_initializer=tf.keras.initializers.he_normal(seed=None)),\n                  tf.keras.layers.Dense(num_calsses,activation=\"softmax\") \n         ])\n\n        model.compile(optimizer=\"adam\",loss=\"categorical_crossentropy\",metrics=['accuracy'])\n        model.fit(x_train,y_train,\n                    batch_size=512,\n                    epochs=30,\n                    validation_data=[x_val,y_val])\n        predictions = model.predict(x_test)\n        preds.append(predictions)\n    return preds","5345ae6b":"preds = cv_ensemble(X, y, x_test)","5bc45084":"preds = np.array(preds)\nprint(preds.shape)","9a7af213":"pred = np.mean(preds,axis=0)\nprint(pred.shape)","67e36b8f":"pred = np.argmax(pred, axis=1)\nprint(pred.shape)","79d7c989":"sample_submission['Category'] = pd.Series(predictions)\nsample_submission.head()","2d6e931b":"sample_submission.to_csv(\"submission_cv.csv\",index=False)","99bb331e":"# 5cv Ensemble","4e7d2a62":"# Neural Net\uc73c\ub85c MNIST \ubd84\ub958\uae30 \ub9cc\ub4e4\uae30 ","a6202171":"## Model\n* FC layer, BatchNormalization \ub4f1\uc744 \uc774\uc6a9\ud574 Baseline \ucf54\ub4dc\ub97c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4. \uc801\uc808\ud788 \ubc14\uafd4\uac00\uba74\uc11c \uc219\uc81c\ub97c \uc9c4\ud589\ud574\uc8fc\uc138\uc694!","1e6e84f2":"## \ub370\uc774\ud130 \uc804\ucc98\ub9ac\ud558\uae30\n* X\ub294 \uc774\ubbf8\uc9c0\uc758 \ud53d\uc140 \uc815\ubcf4(0~255), y\ub294 \ubd84\ub958\ud560 \uc22b\uc790(0~9) \uc774\ubbc0\ub85c \uc804\ucc98\ub9ac\ub97c \uc704\ud574 \ub530\ub85c \ubd84\ub9ac\ud574\uc90d\ub2c8\ub2e4. ","f7a646ee":"* predictions \ubc30\uc5f4\uc744 \uc81c\ucd9c DataFrame\uc5d0 \ub123\uc5b4\uc11c \uc81c\ucd9c\ud569\uc2dc\ub2e4.","c7b22e60":"* keras\uc758 to_categorical \ud568\uc218\ub97c \ud1b5\ud574 y\uc5d0 \ub300\ud558\uc5ec One-Hot Encoding\uc744 \uc2e4\ud589\ud574\uc90d\ub2c8\ub2e4.","519dbd88":"* \uc81c\ucd9c\ud558\uae30 \uc804\uc5d0 \ubaa8\ub378\uc758 \uc131\ub2a5 \ud3c9\uac00\ub97c \uc704\ud574 X, y\ub85c\ubd80\ud130 Validation Set\uc744 \ub9cc\ub4e4\uc5b4\uc90d\ub2c8\ub2e4. ","2b490300":"* Neural Net\uc5d0 \ub123\uc5b4\uc8fc\uae30 \uc704\ud574 X\uc758 \ud53d\uc140 \uac12(0~255)\ub97c (0~1)\ub85c \uc2a4\ucf00\uc77c\ub9c1 \ud574\uc90d\ub2c8\ub2e4.","36d30506":"* \uc774\uc81c \uc608\uce21\ud55c \uac12\uc744 \uc81c\ucd9c\ud558\uae30 \uc704\ud574 Load\ud55c Test\ub85c\ubd80\ud130 \ub611\uac19\uc740 \uc804\ucc98\ub9ac \uacfc\uc815\uc744 \uc2e4\ud589\ud574\uc90d\ub2c8\ub2e4.","7377eba2":"* History \uac1d\uccb4\uc5d0 \ud574\ub2f9 Epoch\uc758 Train \/ Validation\uc758 Loss, ACC\uac00 \uc800\uc7a5\ub429\ub2c8\ub2e4.","318d121f":"* model.predict_classes\ub97c \ud1b5\ud574 \uc608\uce21\ud55c One-Hot Encoding\uc73c\ub85c\ubd80\ud130 Class\ub97c \ubc14\ub85c \uc800\uc7a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","adc95148":"## Visualization\n* \uac04\ub2e8\ud558\uac8c \uc22b\uc790\uac00 \uc5b4\ub5bb\uac8c \uc0dd\uacbc\ub294\uc9c0 \uc54c\uc544\ubd05\uc2dc\ub2e4."}}