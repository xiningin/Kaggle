{"cell_type":{"c0694f91":"code","9ceccf58":"code","cc16a868":"code","d30d89af":"code","7fc67488":"code","4ef2ca12":"code","6d895696":"code","ba99d390":"code","b728f72c":"code","27055603":"code","9e422d4c":"code","2d8a01cb":"code","be14698c":"code","46d1322e":"markdown"},"source":{"c0694f91":"import pandas as pd\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform as sp_rand","9ceccf58":"boston_data = datasets.load_boston()\nboston = pd.DataFrame(boston_data.data, columns = boston_data.feature_names)","cc16a868":"boston['Target'] = boston_data.target","d30d89af":"boston.head()","7fc67488":"y = boston['Target']\nx = boston.drop('Target',axis=1)","4ef2ca12":"x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state=22)","6d895696":"lr = LinearRegression()\nlr = lr.fit(x_train,y_train)\nlr_pred = lr.score(x_test,y_test)\nlr_pred","ba99d390":"rr = Ridge()\nrr = rr.fit(x_train,y_train)\nrr_pred =rr.score(x_test,y_test)\nrr_pred","b728f72c":"ls = Lasso()\nls =ls.fit(x_train, y_train)\nls_pred = ls.score(x_test,y_test)\nls_pred","27055603":"alphas = np.array([1,0.1,0.01,0.001,0.0001,0])\ngrid = GridSearchCV(estimator = rr,param_grid=dict(alpha=alphas))\ngrid.fit(x_train,y_train)\nprint(grid)\nprint(\"best score\",grid.best_score_)\nprint('best estimator',grid.best_estimator_.alpha)","9e422d4c":"alphas = np.array([0.1,0.01,0.001,0.0001,0])\ngrid = GridSearchCV(estimator = ls,param_grid = dict(alpha=alphas))\ngrid.fit(x_train, y_train)\nprint(grid)\nprint(\"best score\",grid.best_score_)\nprint(\"best estimator\",grid.best_estimator_.alpha)","2d8a01cb":"alphas = {'alpha': sp_rand()}\nrsearch = RandomizedSearchCV(estimator=rr,param_distributions=alphas, n_iter=100)\nrsearch.fit(x_train, y_train)\nprint(rsearch)\nprint(\"best score\",rsearch.best_score_)\nprint(\"best estimator\",rsearch.best_estimator_.alpha)","be14698c":"alphas = {'alpha': sp_rand()}\nrsearch = RandomizedSearchCV(estimator=ls,param_distributions=alphas, n_iter=100)\nrsearch.fit(x_train, y_train)\nprint(rsearch)\nprint(\"best score\",rsearch.best_score_)\nprint(\"best estimator\",rsearch.best_estimator_.alpha)","46d1322e":"This is intented to someone who has not implemented Lasso and Ridge regression at all.\n\n\nPS: There is no feature engineering, dimension reduction, cleaning data done in this code because it was mainly intended to practice Ridge and Lasso Regression."}}