{"cell_type":{"faffafda":"code","d2decd49":"code","3b4f6d02":"code","bdd3e472":"code","f33117fa":"code","c8f5906f":"code","a7f61ce6":"code","6266c092":"code","181179f6":"code","9924a194":"code","3020c86a":"code","bf8fb6e2":"code","ae400f2f":"code","7e740961":"code","188fa769":"code","328e998d":"markdown"},"source":{"faffafda":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n# #         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d2decd49":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom pathlib import Path\nfrom PIL import Image\n\nfrom sklearn import datasets\nimport tensorflow as tf\n\nfrom functools import partial\nimport os\nfrom scipy import stats\nimport missingno as msno\nimport joblib\nimport tarfile\nimport shutil\nimport urllib\n\n## Sklearn\nfrom sklearn import datasets\n## Preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n## Metrics\nfrom sklearn.metrics import accuracy_score\n\n","3b4f6d02":"train_labels = pd.read_csv(\"..\/input\/arabic-hwr-ai-pro-intake1\/train.csv\")\ntrain_images = Path(r'..\/input\/arabic-hwr-ai-pro-intake1\/train')\n\n## read these all training images paths as Series\n\ntrain_images_paths = pd.Series(sorted(list(train_images.glob(r'*.png'))),\n                               name='Filepath').astype(str)\n\ntrain_images_paths.head()","bdd3e472":"img_key_value = {}\n\nfor value in train_labels['label'].unique():\n    img_key_value[value] = train_labels[train_labels['label']==value].index[0]\nprint(img_key_value)\n\n    \nimg_index = list(img_key_value.values())\nimg_label = list(img_key_value.keys())\n\nfig, ax = plt.subplots(4, 7, figsize=(12, 8))\n\ni = 0\nfor row in range(4):\n    for col in range(7):\n        plt.sca(ax[row, col])\n        plt.title(f'label = {img_label[i]}')\n        img = plt.imread(train_images_paths.iloc[img_index[i]])\n        plt.imshow(img)\n        plt.axis('off')\n        i+=1","f33117fa":"train_full_labels = train_labels['label'].values\ntrain_full_set = np.empty((13440, 32, 32,1 ), dtype=np.float32)  #take only the first 3 channels\n# print(train_full_set)\n\nfor idx, path in enumerate(train_images_paths):\n    \n    img = Image.open(path)\n    img = img.convert('L')\n    img = np.array(img).reshape(32,32,1)\n\n    train_full_set[idx] = img\n    \nprint('train_full_set.shape =>', train_full_set.shape)\nprint('train_full_labels.shape =>', train_full_labels.shape)","c8f5906f":"#Split data \n\nX_train, X_valid, y_train, y_valid = train_test_split(train_full_set, train_full_labels, \n                                                      test_size=0.2, shuffle=True, random_state=42)\n\nprint('X_train.shape =>', X_train.shape)\nprint('X_valid.shape =>', X_valid.shape)\nprint('y_train.shape =>', y_train.shape)\nprint('y_valid.shape =>', y_valid.shape)","a7f61ce6":"#Train the model\n\nmodel = tf.keras.models.Sequential()\n\nmodel.add(tf.keras.layers.Conv2D( filters = 64, kernel_size=(3,3), activation='relu', \n                                 padding='Same' ,input_shape=(32, 32, 1)) )\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2)))\n\n\nmodel.add(tf.keras.layers.Conv2D(filters = 96, kernel_size=(3,3),\n                                 padding='Same',activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(tf.keras.layers.Conv2D(filters = 128, kernel_size=(3,3),\n                                 padding='Same',activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(tf.keras.layers.Flatten())\n\nmodel.add(tf.keras.layers.Dense(units=512, activation='relu'))\n\nmodel.add(tf.keras.layers.Dense(units=140, activation='relu'))\n\nmodel.add(tf.keras.layers.Dense(units=28, activation = 'softmax'))","6266c092":"model.summary()\nmodel.compile(loss='sparse_categorical_crossentropy', \n              optimizer='adam', metrics=['accuracy'])\nearly_stopp = tf.keras.callbacks.EarlyStopping(patience=5, \n                            restore_best_weights=True,verbose=1)","181179f6":"history = model.fit(X_train, y_train - 1, validation_data=(X_valid, y_valid - 1), \n                    epochs=100, batch_size=128, callbacks=[early_stopp])","9924a194":"pd.DataFrame(history.history).plot(figsize=(8, 6));\n","3020c86a":"loss_all_data, acc_all_data = model.evaluate(train_full_set, train_full_labels-1, verbose=0)\nprint('loss_all_data =>', loss_all_data)\nprint('acc_all_data =>', acc_all_data)","bf8fb6e2":"test_labels = pd.read_csv('..\/input\/arabic-hwr-ai-pro-intake1\/test.csv')\ntest_images = Path(r'..\/input\/arabic-hwr-ai-pro-intake1\/test')\n\n## read these all training images paths as Series\ntest_images_paths = pd.Series(sorted(list(test_images.glob(r'*.png'))), name='Filepath').astype(str)\n\ntest_images_paths.head()","ae400f2f":"test_full_set = np.empty((3360, 32, 32, 1), dtype=np.float32)  #take only the first 3 channels\n\nfor idx, path in enumerate(test_images_paths):\n\n    img = Image.open(path)\n\n    img = img.convert('L')\n    img = np.array(img).reshape(32,32,1)\n\n#     img = plt.imread(path)\n    \n#     img = img[:,:,:3]\n    test_full_set[idx] = img\n    \nprint('test_full_set.shape =>', test_full_set.shape)","7e740961":"y_preds_classes = np.argmax(model.predict(test_full_set), axis=-1)\n\ntest_labels['label'] = y_preds_classes +1\n\ntest_labels['label'].unique()\n","188fa769":"#Submission \n\ntest_labels[['id', 'label']].to_csv('\/kaggle\/working\/submission.csv', index=False)","328e998d":"# Show the data"}}