{"cell_type":{"bb63ff9d":"code","643cf555":"code","669ff8c1":"code","57447863":"code","abc59268":"code","52c3f717":"code","6d7cf563":"code","929be068":"code","559294c3":"code","47803749":"code","b025b2bc":"code","50769982":"code","a995e6ee":"code","e6bb6370":"code","f617ccce":"code","a3bf9791":"code","9258f4af":"code","bc9d4354":"code","70f4b6d3":"code","33ea7757":"code","1936dc58":"code","718d92e5":"code","8a65b81c":"code","433459ef":"code","62fb22af":"code","a2948d67":"code","b41b1fc4":"code","f6b7c11e":"code","4c90039a":"code","5135a4de":"markdown","d5e992dd":"markdown","27433688":"markdown","b0b9a720":"markdown","328ba8c8":"markdown","c91dcb72":"markdown","8ca3425b":"markdown","6e60f8cb":"markdown","b2096adc":"markdown","fe3c0f45":"markdown","f248a547":"markdown","28a71a1e":"markdown","d6017bec":"markdown"},"source":{"bb63ff9d":"!pip install -q efficientnet","643cf555":"train_dir = '\/kaggle\/input\/aicup2020-mango-c1p1-datagen\/Mango\/train'\nval_dir   = '\/kaggle\/input\/aicup2020-mango-c1p1-datagen\/Mango\/dev'\ntest_dir  = '\/kaggle\/input\/aicup2020-mango-c1p1-datagen\/Mango\/test'","669ff8c1":"import os\nimport numpy as np\nimport pandas as pd\ntrainDF = pd.read_csv('\/kaggle\/input\/aicup2020-mango-c1p1-datagen\/Mango\/train.csv', header=None)","57447863":"trainFiles = trainDF[0].tolist()\ntrainClasses = trainDF[1].tolist()","abc59268":"valDF = pd.read_csv('\/kaggle\/input\/aicup2020-mango-c1p1-datagen\/Mango\/dev.csv', header=None)","52c3f717":"valFiles = valDF[0].tolist()\nvalClasses = valDF[1].tolist()","6d7cf563":"testFiles = os.listdir(test_dir+'\/unknown')","929be068":"import matplotlib.pyplot as plt","559294c3":"plt.imshow(plt.imread(train_dir+'\/'+trainClasses[0]+'\/'+trainFiles[0]))","47803749":"plt.imshow(plt.imread(val_dir+'\/'+valClasses[0]+'\/'+valFiles[0]))","b025b2bc":"labels = ['A', 'B', 'C']","50769982":"# plot the circle of value counts in dataset\ndef plot_equilibre(equilibre, labels, title):\n    plt.figure(figsize=(5,5))\n    my_circle=plt.Circle( (0,0), 0.5, color='white')\n    plt.pie(equilibre, labels=labels, colors=['red','green','blue'],autopct='%1.1f%%')\n    p=plt.gcf()\n    p.gca().add_artist(my_circle)\n    plt.title(title)\n    plt.show()","a995e6ee":"equilibreTrain = []\n[equilibreTrain.append(trainClasses.count(label)) for label in labels]\nprint(equilibreTrain)\nplot_equilibre(equilibreTrain, labels, 'Train Data')\ndel equilibreTrain","e6bb6370":"equilibreDev = []\n[equilibreDev.append(valClasses.count(label)) for label in labels]\nprint(equilibreDev)\nplot_equilibre(equilibreDev, labels, 'Development Data')\ndel equilibreDev","f617ccce":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntarget_size=(224,224)\nbatch_size = 16","a3bf9791":"train_datagen = ImageDataGenerator(\n    rescale=1.\/255,\n    rotation_range=40,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    vertical_flip=True)\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb',    \n    shuffle=True,\n    seed=42,\n    class_mode='categorical')\n","9258f4af":"val_datagen = ImageDataGenerator(rescale=1.\/255)\n\nval_generator = val_datagen.flow_from_directory(\n    val_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb',\n    shuffle=False,    \n    class_mode='categorical')","bc9d4354":"test_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntest_generator = test_datagen.flow_from_directory(\n    test_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb',\n    shuffle=False,     \n    class_mode=None)","70f4b6d3":"num_classes = 3\ninput_shape = (224,224,3)","33ea7757":"import efficientnet.tfkeras as efn\nfrom tensorflow.keras import models, layers, optimizers, regularizers, callbacks\n\nbase_model = efn.EfficientNetB7(input_shape=input_shape, weights='imagenet', include_top=False)\nbase_model.trainable = False # freeze the base model (for transfer learning)\n\nx = base_model.output\nx = layers.GlobalAveragePooling2D()(x)\nx = layers.Dense(512)(x)\nx = layers.Dense(32)(x)\nout = layers.Dense(num_classes, activation=\"softmax\")(x)\n\nmodel = models.Model(inputs=base_model.input, outputs=out)\n\nmodel.summary()","1936dc58":"# compile model\nmodel.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy'])","718d92e5":"## set Checkpoint : save best only, verbose on\n#checkpoint = callbacks.ModelCheckpoint(\"mango_classification.hdf5\", monitor='accuracy', verbose=0, save_best_only=True, mode='auto', save_freq=1)","8a65b81c":"STEP_SIZE_TRAIN=train_generator.n\/\/train_generator.batch_size\nSTEP_SIZE_VAL  =val_generator.n\/\/val_generator.batch_size\nSTEP_SIZE_TEST =test_generator.n\/\/test_generator.batch_size\nnum_epochs = 100","433459ef":"# Train Model\nhistory = model.fit_generator(train_generator,steps_per_epoch=STEP_SIZE_TRAIN,epochs=num_epochs, validation_data=val_generator, validation_steps=STEP_SIZE_VAL) #, callbacks=[checkpoint])","62fb22af":"## Save Model\nmodel.save('mango_enetB7.h5')","a2948d67":"## load best model weights if using callback (save-best-only)\n#model.load_weights(\"mango_classification.hdf5\")","b41b1fc4":"score = model.evaluate_generator(val_generator, steps=STEP_SIZE_VAL) # with validation dataset\nprint(score)","f6b7c11e":"from sklearn.metrics import classification_report, confusion_matrix\n\npredY=model.predict_generator(val_generator) # with validation dataset\ny_pred = np.argmax(predY,axis=1)\ny_actual = val_generator.classes\ncm = confusion_matrix(y_actual, y_pred)\nprint(cm)","4c90039a":"print(classification_report(y_actual, y_pred, target_names=labels))","5135a4de":"### report confusion matrix","d5e992dd":"## Confusion Matrix","27433688":"## Transer Learning with EfficientNet-B7","b0b9a720":"### display image of a training data","328ba8c8":"## Train Model","c91dcb72":"## Dataset : AICUP 2020 Mango sample data\n![Taiwan%20AICUP%202020%20Mango.JPG](attachment:Taiwan%20AICUP%202020%20Mango.JPG)","8ca3425b":"## Save Model","6e60f8cb":"* Website: https:\/\/aidea-web.tw\/topic\/72f6ea6a-9300-445a-bedc-9e9f27d91b1c\n* Forum : https:\/\/www.facebook.com\/groups\/184056976135023\/","b2096adc":"## Evaluate Model","fe3c0f45":"## Dataset Equilibre ","f248a547":"# Mango Classification ","28a71a1e":"## Data Augmentation","d6017bec":"## Build Model"}}