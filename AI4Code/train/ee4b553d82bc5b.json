{"cell_type":{"0b18b74f":"code","3c2c800a":"code","5919e0be":"code","02c9e578":"code","b730287d":"code","78a6bccb":"code","d13e4e16":"code","961791e6":"code","dc4b52cf":"code","4e04e4c6":"code","e411618e":"code","1b57d5fc":"code","67884c97":"code","cc424d6e":"code","125e5fdf":"code","774f85ee":"code","4ac42008":"code","4bda990f":"code","b8921465":"code","419d1577":"code","eac815ea":"code","40cfd497":"code","b7f1a913":"code","a75a45af":"code","1eba8b58":"code","fa95979e":"code","bfa0fcd9":"code","63b570f5":"code","0ee4f3e9":"code","e0ee3960":"code","ae1567f5":"code","94b9b0da":"code","4d135793":"code","7a22d9c1":"code","0472f73b":"code","a54cbc27":"code","12fd3b4b":"code","d2dc5934":"code","4cd18996":"code","33734fd9":"code","c055d61e":"code","6f88dcd4":"code","d8b87a0b":"code","1c43456d":"code","8820970a":"code","703029e8":"code","9668b12d":"code","5c433e51":"code","a5404069":"code","f09ca6f2":"code","fcd4817f":"code","6450b618":"code","0c5420cd":"code","738913c0":"code","b6dcdca2":"code","7ae26b63":"code","8278ec9d":"code","60e4e253":"code","dd928371":"code","3bf09c85":"code","e988e5a0":"code","2a61c976":"code","7de06e91":"code","bedc6bf9":"code","d52cc4af":"code","843d3002":"code","fe78401b":"code","e926bb0d":"code","7a81bd67":"code","f31cc2e0":"code","95720d98":"code","d39f98ef":"code","1327e3bb":"code","701f8e24":"code","ce5037cf":"code","596bb753":"code","e9327b70":"code","9e9c246b":"code","c2718c8a":"code","7d8a30f4":"code","adafca4e":"code","8efa19c1":"code","f8fa3deb":"code","f5b5da4b":"code","8b38d7c2":"code","c449563d":"code","482f5c58":"code","3350709e":"code","dfb4c2c2":"code","ec3ff3a5":"code","7193f3a8":"code","0029e47b":"code","c53c673e":"code","f6b3d989":"code","ccc9fd6b":"code","e21481d7":"code","403679d0":"code","a90112c9":"code","a4dd262e":"code","8ebc5fce":"code","6ed64656":"code","d5c25b83":"code","616b7c15":"code","1b2e415c":"code","f8ec73b9":"code","8ab1f5e1":"code","5de6d4b5":"code","6664272e":"code","686464e9":"code","7c284424":"code","caabee98":"code","2c23cd95":"code","7962d334":"code","e154cc89":"code","89ef3b08":"code","d39c5585":"code","6d34e568":"code","e2389b00":"code","20b8940f":"markdown","eaefd7d3":"markdown","5cb8dd0d":"markdown","cb1267f7":"markdown","bb10135b":"markdown","c58e233f":"markdown","f854b76b":"markdown","e7d9410b":"markdown","29572597":"markdown","4a35d9ed":"markdown","78ea87a7":"markdown","7e566b45":"markdown","bcae1742":"markdown","fb42e1da":"markdown","d6af23d4":"markdown","afedbdd5":"markdown","1b9efb8f":"markdown","021ce822":"markdown","db1dc5d3":"markdown","9c4fff71":"markdown","e65e184f":"markdown","fe8da891":"markdown","e43e52eb":"markdown","6e798a6f":"markdown","2fa75825":"markdown","0b733717":"markdown","c729d15d":"markdown"},"source":{"0b18b74f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3c2c800a":"import sys\nprint(sys.version)","5919e0be":"conda install kneed","02c9e578":"!pip install --upgrade Kneed","b730287d":"import numpy as np\nimport pandas as pd\nfrom sklearn.datasets import make_blobs\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\nfrom sklearn.mixture import GaussianMixture #GMM\nfrom sklearn.pipeline import make_pipeline \nfrom sklearn.preprocessing import StandardScaler\nimport warnings\nwarnings.filterwarnings('ignore')\nimport argparse\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nimport plotly.graph_objects as go \nfrom plotly.subplots import make_subplots\nfrom yellowbrick.cluster import distortion_score","78a6bccb":"from kneed import KneeLocator","d13e4e16":"data=pd.read_csv(\"..\/input\/customer-personality-analysis\/marketing_campaign.csv\", sep=\"\\t\")","961791e6":"data.head(3)","dc4b52cf":"data.info()","4e04e4c6":"data['Income'].isnull().sum()","e411618e":"data['Income'].plot.hist();\nsns.set(rc={'figure.figsize':(5,5)}) \nplt.show()  ","1b57d5fc":"median = data['Income'].median() ","67884c97":"data['Income'].fillna(median, inplace = True)","cc424d6e":"data['Income'].isnull().sum()","125e5fdf":"# Validando los tipos de datos en el dataset\ndata.info()","774f85ee":"data.size # tenemos un tama\u00f1o de los datos de ","4ac42008":"data.plot(kind='box',subplots=True, layout=(6,6), sharex=False, sharey=False)\nsns.set(rc={'figure.figsize':(18,18)})\nplt.show()  # Representaci\u00f3n de las caracteristicas como vienen en el daset original, sin tratamiento de los outliers - atipicos","4bda990f":"data1 = data.copy()  # se realiza una copia del data set para el proceso del EDA y para transformaciones futuras","b8921465":"data1.head(3)","419d1577":"data1.groupby('Education').size().plot(kind = 'pie')\nsns.set(rc={'figure.figsize':(4,4)})","eac815ea":"data1['Income'].plot(kind='box')              # Income coresponde a los ingresos de los clientes\nsns.set(rc={'figure.figsize':(5,5)}) \nplt.show()","40cfd497":"data1.groupby('Complain').size().plot(kind = 'pie')\nsns.set(rc={'figure.figsize':(4,4)})","b7f1a913":"data1.groupby('Response').size().plot(kind = 'pie') \nsns.set(rc={'figure.figsize':(5,5)}) \nplt.show()","a75a45af":"data2 = data1.copy()","1eba8b58":"# Hay que transformar a num\u00e9ricas las variables categ\u00f3ricas (object) para poder trabajar con ellas\ndata2.dtypes","fa95979e":"data2['Dt_Customer'] = pd.to_datetime(data2.Dt_Customer)","bfa0fcd9":"data2['Dt_Customer']","63b570f5":"obj_df = data2.select_dtypes(include=['object']).copy() # se eligen las variables categoricas (object) y se hace una copia\nprint(obj_df.columns)","0ee4f3e9":"from sklearn.preprocessing import LabelEncoder","e0ee3960":"lb_encoder = LabelEncoder()","ae1567f5":"#crear un ciclo for para que a cada una de las variables que tengan formato 'object' las cambie a formato numero\nfor col in obj_df.columns:\n  data2[col] = lb_encoder.fit_transform(data2[col])","94b9b0da":"# Conmprobando de nuevo tipo de las variables\ndata2.dtypes","4d135793":"data2['Age'] = 2014 - data2['Year_Birth']   # la fecha 2014 se elige porque corresponde a la fecha en donde al parecer se realiz\u00f3 el estudio o de la fecha \n                                            # en la que proviene el dataset.  Age ser\u00eda la edad de los clientes a la fecha 2014","7a22d9c1":"data2['Age'].head(5)","0472f73b":"data2['age_range'] = (data2['Age']\/\/5)*5     # se crea una columna qu corresponde a rango de edad","a54cbc27":"round(data2.pivot_table(['Income'],['age_range'],aggfunc= 'mean',fill_value=0),2)  #Una tabla que permita ver los Ingresos por Rangos de Edad","12fd3b4b":"round(data2.pivot_table(['Income'],['age_range'],['Response'],aggfunc= 'mean',fill_value=0),2)    # Response  1 indica si el cliente acept\u00f3 la oferta en la ultima campa\u00f1a, 0 que no.","d2dc5934":"round(data2.pivot_table(['Income'],['age_range'],['Response'],aggfunc= 'mean',fill_value=0),2).plot(kind = 'bar' ) \nsns.set(rc={'figure.figsize':(7,7)})  \nplt.show()","4cd18996":"round(data2.pivot_table(['Income'],['age_range'],['Education'],aggfunc= 'mean',fill_value=0),2)","33734fd9":"data2['Dt_Customer']","c055d61e":"data2.groupby('Dt_Customer').size()","6f88dcd4":"data2['Year'] = data2['Dt_Customer'].dt.year","d8b87a0b":"data2.groupby('Year').size()","1c43456d":"compras_promedio = data2[['MntWines','MntFruits','MntMeatProducts','MntFishProducts','MntSweetProducts','MntGoldProds','Year']].\\\ngroupby(\"Year\").mean().sort_values(by=\"Year\").reset_index()","8820970a":"compras_promedio.head(5)","703029e8":"round(data2.pivot_table(['MntWines','MntFruits','MntMeatProducts','MntFishProducts','MntSweetProducts','MntGoldProds'],['Year'],aggfunc= 'mean',fill_value=0),2)","9668b12d":"plt.figure(figsize=(14,8))\nplt.title(\"Caracteristicas a travez del Tiempo\", fontdict={\"fontsize\": 15})\n\nlines = ['MntWines','MntFruits','MntMeatProducts','MntFishProducts','MntSweetProducts','MntGoldProds']\n\nfor line in lines:\n    ax = sns.lineplot(x='Year', y=line, data=compras_promedio)\nplt.ylabel(\"value\")\nplt.legend(lines)\n\n# El nivel compra de los clientes viene en descenso (Los clientes est\u00e1n comprando menos)","5c433e51":"data2.pivot_table('NumWebPurchases', index= ('Marital_Status'), aggfunc='mean')","a5404069":"data2['Total_spend'] = data2['MntWines']+data2['MntFruits']+data2['MntMeatProducts']+data2['MntFishProducts']+data2['MntSweetProducts']+data2['MntGoldProds']","f09ca6f2":"data2['Total_spend'].plot(kind='box') \nsns.set(rc={'figure.figsize':(5,5)}) \nplt.show()","fcd4817f":"data2['Total_spend'].plot(kind='hist') \nsns.set(rc={'figure.figsize':(5,5)}) \nplt.show()","6450b618":"round(data2.pivot_table(['Total_spend'],['Marital_Status'],['Response'],aggfunc= 'mean',fill_value=0),2)   # 1 indica si el cliente acept\u00f3 la oferta en la ultima campa\u00f1a, 0 que no.","0c5420cd":"data2['Total_Sons'] = data2['Kidhome']+data2['Teenhome']","738913c0":"data2['Total_Sons'].head(3)","b6dcdca2":"data2['Total_Sons'].mean() ","7ae26b63":"round(data2.pivot_table(['Total_spend'],['Total_Sons'],aggfunc= 'mean',fill_value=0),2).plot(kind = 'bar') ","8278ec9d":"data2.corr()","60e4e253":"data2.head(2)","dd928371":"data2.columns","3bf09c85":"data3 = data2.iloc[:,[2,3,4,8,33,32,29,25,23,28,8,9,10,11,12,13,14,15,16,17,18,19,20,21]]","e988e5a0":"data3.head(2)","2a61c976":"f,ax = plt.subplots(figsize=(20,20))\nsns.heatmap(data3.corr(method='spearman'),annot=True,vmin=-1, vmax=1, center= 0)\nplt.show()","7de06e91":"from pandas.plotting import scatter_matrix \nscatter_matrix((data2[['Income',\"MntWines\",\"MntFruits\",'MntMeatProducts','MntFishProducts','MntSweetProducts','MntGoldProds']]),figsize = (12, 12));","bedc6bf9":"data1['Total_spend'] = data1['MntWines']+data1['MntFruits']+data1['MntMeatProducts']+data1['MntFishProducts']+data1['MntSweetProducts']+data1['MntGoldProds']","d52cc4af":"data1.head(2)","843d3002":"data1['Age'] = 2014 - data1['Year_Birth'] ","fe78401b":"import seaborn as sns\nsns.pairplot(data1, hue='Education', vars=['Recency', 'Income', 'Age', 'Total_spend'])   \n2\nplt.show()","e926bb0d":"sns.pairplot(data1, hue='Marital_Status', vars=['Recency', 'Income', 'Age', 'Total_spend'])   \n2\nplt.show()","7a81bd67":"data3.plot(kind='hist',subplots=True, layout=(6,6), sharex=False, sharey=False)\nsns.set(rc={'figure.figsize':(18,18)})\nplt.show()       ","f31cc2e0":"import scipy.stats as stats","95720d98":"from sklearn.preprocessing import LabelEncoder","d39f98ef":"lb_encoder = LabelEncoder()","1327e3bb":"print(\"Influencia del Respuesta campana sobre la vistia web\") \nprint(stats.f_oneway(data3[data3[\"Response\"]== 0][\"NumWebVisitsMonth\"], data3[data3[\"Response\"]== 1][\"NumWebVisitsMonth\"]))\nprint()\nprint(\"Influencia del Respuesta campana sobre compra de frutas\") \nprint(stats.f_oneway(data3[data3[\"Response\"]== 0][\"MntFruits\"], data3[data3[\"Response\"]== 1][\"MntFruits\"]))\nprint()\nprint(\"Influencia del Respuesta campana sobre Las Ultima compra\") \nprint(stats.f_oneway(data3[data3[\"Response\"]== 0][\"Recency\"], data3[data3[\"Response\"]== 1][\"Recency\"]))\nprint()","701f8e24":"X = data3  # Renombrando variable para utilizarla en Scikit-Learn","ce5037cf":"# Normalizando dataframe\nscaler = StandardScaler()\nX_std = scaler.fit_transform(X)","596bb753":"pca = PCA()\npca.fit(X_std)","e9327b70":"evr = pca.explained_variance_ratio_\nevr","9e9c246b":"fig = plt.figure(figsize=(8,8))\nplt.plot(range(1, len(X.columns)+1), evr.cumsum(), marker='o', linestyle=':')\nplt.xlabel('Numero de Componentes', fontsize=18)\nplt.ylabel('Varianza Acumulada Explicada',fontsize=18)\nplt.xticks(fontsize=16)\nplt.yticks(fontsize=16)\nplt.show()","c2718c8a":"for i, exp_var in enumerate(evr.cumsum()):\n    if exp_var >= 0.8:\n        n_comps = i + 1\n        break\nprint(\"Numero de Componentes Optimos:\", n_comps)\npca = PCA(n_components=n_comps)\npca.fit(X_std)\nscores_pca = pca.transform(X_std)","7d8a30f4":"wcss = []\nmax_clusters = 21\nfor i in range(1, max_clusters):\n    kmeans_pca = KMeans(i, init='k-means++', random_state=42)\n    kmeans_pca.fit(scores_pca)\n    wcss.append(kmeans_pca.inertia_)\nn_clusters = KneeLocator([i for i in range(1, max_clusters)], wcss, curve='convex', direction='decreasing').knee\nprint(\"Numero de Clusters Optimos:\", n_clusters)","adafca4e":"fig = plt.figure(figsize=(8,8))\nplt.plot(range(1, 21), wcss, marker='o', linestyle=':')\nplt.vlines(KneeLocator([i for i in range(1, max_clusters)], wcss, curve='convex', \n                       direction='decreasing').knee, ymin=min(wcss), ymax=max(wcss), linestyles='dashed')\nplt.xlabel('Numero de Clusters', fontsize=18)\nplt.ylabel('Dentro del cluster [Suma de cuadrados] (WCSS)', fontsize=18)\nplt.xticks(fontsize=16)\nplt.yticks(fontsize=16)\nplt.show()","8efa19c1":"# Creando la optimizacion de parametros con PCA y K-Means\nkmeans_pca = KMeans(n_clusters=n_clusters, init='k-means++', random_state=42)\nkmeans_pca.fit(scores_pca);","f8fa3deb":"# Etiquentando cada uno de los datos dentro del cluster respectivo\ndf_seg_pca_kmeans = pd.concat([pd.DataFrame(X.reset_index(drop=True)), pd.DataFrame(scores_pca)], axis=1)\ndf_seg_pca_kmeans.columns.values[(-1*n_comps):] = [\"Component \" + str(i+1) for i in range(n_comps)]\ndf_seg_pca_kmeans['Cluster'] = kmeans_pca.labels_\ndf_seg_pca_kmeans.head()","f5b5da4b":"x = df_seg_pca_kmeans['Component 2']\ny = df_seg_pca_kmeans['Component 1']\nfig = plt.figure(figsize=(10, 8))\nsns.scatterplot(x, y, hue=df_seg_pca_kmeans['Cluster'], palette = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red', 'tab:purple', 'tab:pink'])\nplt.title('Clusters vistos con PCA', fontsize=20)\nplt.xlabel(\"Componente 2\", fontsize=18)\nplt.ylabel(\"Componente 1\", fontsize=18)\nplt.xticks(fontsize=16)\nplt.yticks(fontsize=16)\nplt.show();","8b38d7c2":"data3['Income'].plot(kind='box')\nsns.set(rc={'figure.figsize':(4,4)})\nplt.show()","c449563d":"quantiles1 = np.percentile(data3['Income'], [25,50,75])\nquantiles1","482f5c58":"median1 = quantiles1[1]\nIQR1 = quantiles1[2]-quantiles1[0]\nsigma1 = 0.75*IQR1","3350709e":"data3 = data3.query(\"(Income > @median1 - 4*@sigma1) & (Income < @median1 + 4*@sigma1)\")","dfb4c2c2":"data3['Income'].plot(kind='box')\nsns.set(rc={'figure.figsize':(4,4)})\nplt.show()","ec3ff3a5":"data3.head(2)","7193f3a8":"data3.columns","0029e47b":"data4 = data3.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,22]]","c53c673e":"data4.head(3)","f6b3d989":"data4.plot(kind='box',subplots=True, layout=(6,6), sharex=False, sharey=False)\nsns.set(rc={'figure.figsize':(18,18)})\nplt.show()","ccc9fd6b":"X = data4  # Renombrando variable para utilizarla en Scikit-Learn","e21481d7":"scaler = StandardScaler()\nX_std = scaler.fit_transform(X)","403679d0":"pca = PCA()\npca.fit(X_std)","a90112c9":"evr = pca.explained_variance_ratio_\nevr","a4dd262e":"# Ploteando grafico de Componentes principales\nfig = plt.figure(figsize=(8,8))\nplt.plot(range(1, len(X.columns)+1), evr.cumsum(), marker='o', linestyle=':')\nplt.xlabel('Numero de Componentes', fontsize=18)\nplt.ylabel('Varianza Acumulada Explicada',fontsize=18)\nplt.xticks(fontsize=16)\nplt.yticks(fontsize=16)\nplt.show()","8ebc5fce":"for i, exp_var in enumerate(evr.cumsum()):\n    if exp_var >= 0.8:\n        n_comps = i + 1\n        break\nprint(\"Numero de Componentes Optimos:\", n_comps)\npca = PCA(n_components=n_comps)\npca.fit(X_std)\nscores_pca = pca.transform(X_std)","6ed64656":"wcss = []\nmax_clusters = 21\nfor i in range(1, max_clusters):\n    kmeans_pca = KMeans(i, init='k-means++', random_state=42)\n    kmeans_pca.fit(scores_pca)\n    wcss.append(kmeans_pca.inertia_)\nn_clusters = KneeLocator([i for i in range(1, max_clusters)], wcss, curve='convex', direction='decreasing').knee\nprint(\"Numero de Clusters Optimos:\", n_clusters)","d5c25b83":"fig = plt.figure(figsize=(8,8))\nplt.plot(range(1, 21), wcss, marker='o', linestyle=':')\nplt.vlines(KneeLocator([i for i in range(1, max_clusters)], wcss, curve='convex', \n                       direction='decreasing').knee, ymin=min(wcss), ymax=max(wcss), linestyles='dashed')\nplt.xlabel('Numero de Clusters', fontsize=18)\nplt.ylabel('Dentro del cluster [Suma de cuadrados] (WCSS)', fontsize=18)\nplt.xticks(fontsize=16)\nplt.yticks(fontsize=16)\nplt.show()","616b7c15":"kmeans_pca = KMeans(n_clusters=n_clusters, init='k-means++', random_state=42)\nkmeans_pca.fit(scores_pca);","1b2e415c":"# Etiquentando cada uno de los datos dentro del cluster respectivo\ndf_seg_pca_kmeans = pd.concat([pd.DataFrame(X.reset_index(drop=True)), pd.DataFrame(scores_pca)], axis=1)\ndf_seg_pca_kmeans.columns.values[(-1*n_comps):] = [\"Component \" + str(i+1) for i in range(n_comps)]\ndf_seg_pca_kmeans['Cluster'] = kmeans_pca.labels_\ndf_seg_pca_kmeans.head()","f8ec73b9":"# Creando visualizacion de los datos con PCA\n\nx = df_seg_pca_kmeans['Component 2']\ny = df_seg_pca_kmeans['Component 1']\nfig = plt.figure(figsize=(10, 8))\nsns.scatterplot(x, y, hue=df_seg_pca_kmeans['Cluster'], palette = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red', 'tab:purple', 'tab:cyan', 'tab:pink', 'tab:gray'])\nplt.title('Clusters vistos con PCA', fontsize=20)\nplt.xlabel(\"Componente 2\", fontsize=18)\nplt.ylabel(\"Componente 1\", fontsize=18)\nplt.xticks(fontsize=16)\nplt.yticks(fontsize=16)\nplt.show();","8ab1f5e1":"data2['Cluster'] = df_seg_pca_kmeans['Cluster']\ndata2","5de6d4b5":"pd.value_counts(data2['Cluster'])","6664272e":"round(df_seg_pca_kmeans.pivot_table('Income', index= 'Cluster', aggfunc= 'mean',fill_value=0),2)","686464e9":"round(df_seg_pca_kmeans.pivot_table('Age', index= 'Cluster', aggfunc= 'mean',fill_value=0),2)","7c284424":"# Importando bibliotecas\nfrom pandas import read_csv \nimport pandas as pd #manejo y estructuracion de datos y su manipulaci\u00f3n\nfrom pandas.plotting import scatter_matrix #diagramas de correlacci\u00f3n\nfrom matplotlib import pyplot #Hacer gr\u00e1ficos en python\nfrom sklearn.model_selection import train_test_split #lograr dividir las muestras\nfrom sklearn.model_selection import cross_val_score #validaci\u00f3n cruzada score \nfrom sklearn.model_selection import StratifiedKFold #validacion cruzada \nfrom sklearn.metrics import classification_report \nfrom sklearn.metrics import confusion_matrix #matriz de confusi\u00f3n\nfrom sklearn.metrics import accuracy_score #score de validaci\u00f3n cruzada","caabee98":"# Modelos de ML con que se va a trabajar\nfrom sklearn.metrics import accuracy_score #score de validaci\u00f3n cruzada \nfrom sklearn.linear_model import LogisticRegression #regresion log\u00edstica\nfrom sklearn.tree import DecisionTreeClassifier #arboles de decision\nfrom sklearn.neighbors import KNeighborsClassifier #KNN\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis #An\u00e1lisis discriminante lineal \nfrom sklearn.naive_bayes import GaussianNB #Gauss Bayesiana\nfrom sklearn.svm import SVC # Maquinas de Soporte Vectorial\nfrom sklearn.model_selection import train_test_split","2c23cd95":"data4.head(3)","7962d334":"# Conjunto de datos de validaci\u00f3n dividida\n# Con el 80% se crea el modelo y con el 20% se entrena\n\narray = data4.values #los datos ahora se transforman en un arreglo\n\nX = array[:,[0,1,2,3,4,5,6,7,8,10,11]]  # se toman los datos, sin la clase de clasificaci\u00f3n\ny = array[:,9] # se toman los datos \n\n# Se dividen los datos en conjunto de entrenamiento y prueba, se utiliza random_state = 0 para que no d\u00e9\n# resultados diferentes si se vuelve a correr. \nX_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.20, random_state=0)","e154cc89":"# Algoritmos de Comprobaci\u00f3n, se guardan en una lista\nmodels = []\nmodels.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVC', SVC()))","89ef3b08":"import warnings\nwarnings.filterwarnings('ignore')\n\nresultados = []\nnames = []\n\n\n# Si se necesita tanto el \u00edndice o nombre, as\u00ed como el elemento, se usa for indice, elemento en lista\nfor name, model in models:\n    kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True) # Declaracion de la validaci\u00f3n cruzada, las caracter\u00edsticas\n    cv_resultados = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy') # genera la precisi\u00f3n de la validaci\u00f3n cruzada y la guarda en la variable cv_resultados en lista\n    resultados.append(cv_resultados)  # genera la precisi\u00f3n de la validaci\u00f3n cruzada y la guarda en la variable cv_resultados en matrices, esto para hacer el boxplot.\n    names.append(name) # names en matrices\n    print('%s: %f (%f)' % (name, cv_resultados.mean(), cv_resultados.std()))","d39c5585":"\nmodel = LinearDiscriminantAnalysis()\nmodel.fit(X_train, Y_train)\nprediccion = model.predict(X_test)","6d34e568":"mc =pd.DataFrame(confusion_matrix(Y_test, prediccion, labels=[0,1]), \n                 index = [0,1],  \n                 columns = [0,1])  \n \n# Evaluando Predicciones\nprint(\"ROC:\", accuracy_score(Y_test, prediccion),sep='\\n')\nprint(\"\")\nprint(\"Matriz de Confusi\u00f3n:\", mc,sep='\\n')","e2389b00":"data3.describe().T","20b8940f":"* Informaci\u00f3n de Cluster e Ingresos","eaefd7d3":"#  MODELO SUPERVISADO","5cb8dd0d":"## Datos a Partir del Anova\n\nSe observa que el nivel de Respuesta positiva o no a la campa\u00f1a influye en las visitas a las paginas web. pv 0.85 >= 0.05\n\nAs\u00ed como la Repuesta positiva o no a la campa\u00f1a influye en el consumo o compras de los clientes. pv 2.68 >= 0.05\n\nDe igual forma la Repuesta positiva o no a la campa\u00f1a influye en los d\u00edas que tiene una persona de su ultima compra (influye en que vuelva a comprar o compre m\u00e1s seguido) pv 2.52 >= 0.05\n\n**Con respecto a esto se procede a citar algunos aspectos de la influencia de la publicidad y como esta promueve el consumo:**\n\nUna de las funciones de la publicidad es Persuadir, se crea preferencia por la marca, se debe convencer a los consumidores de que compren en el momento, como tambi\u00e9n que acepten visitas por el equipo de ventas.\n\nLa funci\u00f3n de la publicidad no es vender: la publicidad es responsable de crear condiciones para la venta de productos. Para ello, transmite la idea al segmento de mercado objetivo, esperando que pueda coincidir con la idea y tenerla en cuenta a la hora de comprar.\n\nhan identificado diferentes factores que afectan la intenci\u00f3n de compra entre los cuales se encuentran: la publicidad, el brand equity y el brand engagement. La publicidad act\u00faa como un divulgador de informaci\u00f3n o de ideas con la intenci\u00f3n de cambiar el comportamiento de un grupo de personas para que piense o act\u00fae de determinada manera, tambi\u00e9n act\u00faa como un diferenciador de una marca frente a la competencia.","cb1267f7":"## Diagrama de Correlaciones - Metodo Spearman","bb10135b":"![image.png](attachment:7a5eb7cd-d6d0-4565-9665-b4d1e930425c.png)","c58e233f":"# Descripci\u00f3n de las Caracteristicas\nSe tienen 29 caracteristicas\n\nCustomer Personality Analysis\n\nEl an\u00e1lisis de la personalidad del cliente es un an\u00e1lisis detallado de los clientes ideales de una empresa. Ayuda a una empresa a comprender mejor a sus clientes y les facilita la modificaci\u00f3n de productos de acuerdo con las necesidades, los comportamientos y las preocupaciones espec\u00edficas de los diferentes tipos de clientes.\n\nEl an\u00e1lisis de la personalidad del cliente ayuda a una empresa a modificar su producto en funci\u00f3n de sus clientes objetivo de diferentes tipos de segmentos de clientes.\n\n## Informaci\u00f3n referente a las personas o clientes\n\n* ID: identificador , codigo de cliente, valor \u00fanico\n* Year_Birth: el a\u00f1o de nacimiento de los clientes.\n* Education: Nivel educativo de los clientes\n* Marital_Status: CEstado civil de los clientes\n* Income: Ingreso de los clientes expresado en forma anual \n* Kidhome: Numeros de ni\u00f1os por hogar\n* Teenhome: Numero de adolescentes por hogar \n* Dt_Customer: Fecha en que el cliente se vincul\u00f3 con la empresa\n* Recency: Numero de d\u00edas desde la \u00faltima compra *\n* Complain: Indicador si el cliente se a quejado en lso ultimos a\u00f1os. 1 indica que s\u00ed. o indica que no.\n## Informaci\u00f3n sobre los productos de consumo\n\n* MntWines: El monto que los clientes gastan en vinos o bebidas alcoholicas en los ultimos 2 a\u00f1os. \n* MntFruits: El monto que los clientes gastan en frutas en los ultimos 2 a\u00f1os\n* MntMeatProducts: El monto que los clientes gastan en productos carnicos en los ultimos 2 a\u00f1os \n* MntFishProducts: El monto que los clientes gastan en pescado en los ultimos 2 a\u00f1os\n* MntSweetProducts: El monto que los clientes gastan en dulces o golocinas en los ultimos 2 a\u00f1os *\n* MntGoldProds: El monto que los clientes gastan en productos de oro, en los ultimos dos a\u00f1os.\n## Informaci\u00f3n sobre caracteristicas promocionales en el proceso de compra\n\n* NumDealsPurchases: Number of purchases made with a discount. AcceptedCmp1: 1 indica si el cliente acept\u00f3 la oferta en la primer campa\u00f1a, 0 que no.\n* AcceptedCmp2: 1 indica si el cliente acept\u00f3 la oferta en la segunda campa\u00f1a , 0 que no. \n* AcceptedCmp3: 1 indica si el cliente acept\u00f3 la oferta en la tercer campa\u00f1a , 0 que no.\n* AcceptedCmp4: 1 indica si el cliente acept\u00f3 la oferta en la cuarta campa\u00f1a , 0 que no. \n* AcceptedCmp5: 1 indica si el cliente acept\u00f3 la oferta en la quinta campa\u00f1a , 0 que no.\n* Response: 1 ndica si el cliente acept\u00f3 la oferta en la ultima campa\u00f1a, 0 que no.\n* Medios de compra o canal de compra, en que el cliente elige para el proceso de compra\n\n* NumWebPurchases: Cantidad de compras realizadas por medio de la pagina web.\n* NumCatalogPurchases: Cantidad de compras realizadas por medio del catalogo. \n* NumStorePurchases: Cantidad de compras realizadas directamente en las tiendas.\n* NumWebVisitsMonth: Cantidad de visitas a la pagina de la empresa en el ultimo mes.","f854b76b":"## Correlaciones de Caracteristicas","e7d9410b":"# Resumen de Caracteristicas ","29572597":"#  K-Means","4a35d9ed":"#  Creando visualizacion de los datos con PCA","78ea87a7":"![image.png](attachment:6f304798-301d-4664-bf95-b7506083a14b.png)","7e566b45":"**Clientes por Marital Status, por Respuesta a Campa\u00f1a y Monto Compra Total**","bcae1742":"* Informaci\u00f3n de Cluster y Edades","fb42e1da":"* **Tendencia de los Productos a travez del Tiempo**","d6af23d4":"#  Conclusiones","afedbdd5":"![image.png](attachment:6c1aef53-c943-4cd4-8367-7418f84b1246.png)","1b9efb8f":"*Comportamiento de Copra Seg\u00fan Marital Status","021ce822":"**Informaci\u00f3n Quejas de los Clientes**","db1dc5d3":"![image.png](attachment:a7add0b1-0564-4141-bd8c-f581dc7ba7e3.png)","9c4fff71":"# Scatter Matrix","e65e184f":"# EDA - Analisis Exploratorio de Datos","fe8da891":"#  Aspectos de los Clientes (Resumen)","e43e52eb":"## Clusters","6e798a6f":"## ANOVA","2fa75825":"**Informaci\u00f3n de Respuesta de los Clientes, por Rango de Edad y Nivel de Ingreso**","0b733717":"**EDA - Analisis Exploratorio de Datos**","c729d15d":"**Informaci\u00f3n Nivel de Respuesta Clientes a las Campa\u00f1as**"}}