{"cell_type":{"349fad3c":"code","392fc49e":"code","1a605a96":"code","4e55c186":"code","cf31261c":"code","59dfe140":"code","2a55f09f":"code","fbe457f7":"code","2bd946de":"code","516fce85":"code","d15f3fb2":"code","9b380862":"code","4c819f36":"code","42251378":"code","26cdfff7":"code","740a400d":"code","2758f2b4":"code","3da9ec5f":"code","d6d9e0ad":"code","ee4bee06":"code","682feca6":"code","0fa676f5":"code","7b2b5467":"code","da85fb93":"code","fbdb9132":"code","0317f60c":"code","6e222fe6":"code","ff5a9417":"code","506144b2":"code","829c2f75":"code","6b5081dd":"code","2baaf869":"code","c853e808":"code","aa5347b8":"code","73d06fa1":"code","a7cb4eec":"code","3920b443":"code","2325e13c":"code","f116e616":"code","ddd9b697":"code","8b8d6f94":"code","3ccb4a8d":"code","8cd25b9a":"code","3d9f2604":"code","f1bb2a9b":"code","3cbe159b":"code","af6def1c":"code","f5b443e8":"code","6e81d37f":"code","0f054382":"code","91895da6":"code","12908f27":"code","1a65e470":"code","cec4648e":"code","f6365ec0":"code","6e1e6062":"code","6d98ad70":"markdown","678c2c1f":"markdown","23010682":"markdown","0e590cae":"markdown","ab26f7ef":"markdown","79ea289e":"markdown","19ee7c77":"markdown","fa478ca8":"markdown","875242d3":"markdown","4770a599":"markdown","7aef698c":"markdown","ece701ad":"markdown","8fbf65ad":"markdown","5239a295":"markdown","08b67de3":"markdown","e81df75d":"markdown","b480f8df":"markdown","75c376ae":"markdown","a4e5b49e":"markdown","d204dc62":"markdown","b61059ab":"markdown","e62c1fb1":"markdown","2a120150":"markdown","50e6f8bf":"markdown","14aae79c":"markdown","e735d7e3":"markdown","11578c5e":"markdown","71da4f84":"markdown","8f215ca1":"markdown","8dcc5723":"markdown","6630e690":"markdown","b27732ac":"markdown","9ec0571a":"markdown"},"source":{"349fad3c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","392fc49e":"data = pd.read_csv('\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')\ndata","1a605a96":"data.info()","4e55c186":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","cf31261c":"sns.set(style='whitegrid', palette='muted', font_scale=1.1)","59dfe140":"data_p = data[data['status'] == 'Placed']\ndata_np = data[data['status'] == 'Not Placed']\ndata2 = data.copy()\ndata2['status'] = data2['status'].map({'Placed':1, 'Not Placed': 0}).astype(int)","2a55f09f":"plt.figure(figsize=(14,7))\nplt.title('Heatmap')\nsns.heatmap(data=data2.drop(['salary', 'sl_no'], axis = 1).corr(), annot = True)","fbe457f7":"sns.pairplot(data, vars=['ssc_p', 'hsc_p', 'degree_p', 'etest_p', 'mba_p'], hue='status', kind='reg')","2bd946de":"data2[['gender','status']].groupby(['gender'], as_index=False).mean()","516fce85":"plt.figure(figsize=(12,6))\nsns.swarmplot(x=data['status'], y=data['ssc_p'], hue=data['ssc_b'])","d15f3fb2":"data2[['ssc_b','status']].groupby(['ssc_b'], as_index=False).mean()","9b380862":"data[['salary', 'ssc_b']].groupby('ssc_b', as_index=False).median()","4c819f36":"plt.figure(figsize=(12,6))\nsns.swarmplot(x=data['status'], y=data['hsc_p'], hue=data['hsc_b'])","42251378":"data2[['hsc_b','status']].groupby(['hsc_b'], as_index=False).mean()","26cdfff7":"data[['salary', 'hsc_b']].groupby('hsc_b', as_index=False).median()","740a400d":"plt.figure(figsize=(12,6))\nsns.swarmplot(x=data['status'], y=data['hsc_p'], hue=data['hsc_s'])","2758f2b4":"data2[['hsc_s','status']].groupby(['hsc_s'], as_index=False).mean()","3da9ec5f":"data[['salary', 'hsc_s']].groupby('hsc_s', as_index=False).median()","d6d9e0ad":"plt.figure(figsize=(12,6))\nsns.swarmplot(x=data['status'], y=data['degree_p'], hue=data['degree_t'])","ee4bee06":"data2[['degree_t','status']].groupby(['degree_t'], as_index=False).mean()","682feca6":"data[['salary', 'degree_t']].groupby('degree_t', as_index=False).median()","0fa676f5":"data2[['workex','status']].groupby(['workex'], as_index=False).mean()","7b2b5467":"plt.figure(figsize=(12,6))\nsns.barplot(x='workex', y='status', data=data2)","da85fb93":"data[['salary', 'workex']].groupby('workex', as_index=False).median()","fbdb9132":"plt.figure(figsize=(12,6))\nsns.swarmplot(x=data['status'], y=data['etest_p'])","0317f60c":"plt.figure(figsize=(12,6))\nsns.regplot(x=data['salary'], y=data['etest_p'])","6e222fe6":"plt.figure(figsize=(12,6))\nsns.swarmplot(x=data['status'], y=data['mba_p'], hue=data['specialisation'])","ff5a9417":"data2[['specialisation','status']].groupby(['specialisation'], as_index=False).mean()","506144b2":"data2[['specialisation','salary']].groupby(['specialisation'], as_index=False).median()\n","829c2f75":"RANDOM_SEED = 42\nnp.random.seed(RANDOM_SEED)","6b5081dd":"data = pd.read_csv('\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv', index_col='sl_no')\ndata.drop('salary', axis=1, inplace=True)\ndata['status'] = data['status'].map({'Placed':1, 'Not Placed': 0}).astype(int)\ndata.head()","2baaf869":"x = data.copy()\nx.drop('status', axis=1, inplace = True)\ny = data['status']","c853e808":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=.16, random_state = 1)\nx_train.shape, y_train.shape, x_test.shape, y_test.shape","aa5347b8":"from sklearn.preprocessing import OneHotEncoder\n\ncols = ['gender', 'ssc_b', 'hsc_b', 'hsc_s', 'degree_t', 'workex', 'specialisation']\nohc = OneHotEncoder(handle_unknown='ignore', sparse=False)\n\nn_cols_train = pd.DataFrame(ohc.fit_transform(x_train[cols]))\nn_cols_test = pd.DataFrame(ohc.fit_transform(x_test[cols]))\n\nn_cols_train.index = x_train.index\nn_cols_test.index = x_test.index\n\nn_cols_train.columns = ohc.get_feature_names(cols)\nn_cols_test.columns = ohc.get_feature_names(cols)\n\nx_train = pd.concat([x_train, n_cols_train], axis = 1)\nx_test = pd.concat([x_test, n_cols_test], axis = 1)\n\nx_train.drop(cols, axis = 1, inplace = True)\nx_test.drop(cols, axis = 1, inplace = True)","73d06fa1":"x_train.head()","a7cb4eec":"mean = x_train.mean()\nstd = x_train.std()","3920b443":"x_train = (x_train-mean)\/std\nx_test = (x_test-mean)\/std\nx_train.head(3)","2325e13c":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.svm import LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom xgboost import XGBClassifier\nimport time\nfrom sklearn.feature_selection import RFE, f_regression\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score\nfrom pprint import pprint\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score","f116e616":"models = pd.DataFrame(columns=['model', 'score', 'std','Time to Train']) #DataFrame to store scores of all models\n\noptions = [GaussianNB(), \n           LogisticRegression(), \n           SVC(), \n           LinearSVC(), \n           DecisionTreeClassifier(), \n           RandomForestClassifier(), \n           KNeighborsClassifier(), \n           SGDClassifier(), \n           XGBClassifier()]   \n\nmodel_names = ['Naive Bayes', \n               'Logistic Regression', \n               'Support Vector Machine', \n               'Linear SVC', \n               'Decison Tree',\n               'Random Forest',\n               'KNN', \n               'SGD Classifier',\n               'XGBoost']  \n\nfor (opt, name) in zip(options, model_names):\n    start=time.time()\n    model = opt\n    model.fit(x_train, y_train)\n    \n    scores = cross_val_score(model, x_train, y_train, cv = 5, scoring=\"accuracy\")\n    end=time.time()\n    row = pd.DataFrame([[name, scores.mean(), scores.std(), end-start]], columns=['model', 'score', 'std','Time to Train'])\n    models = pd.concat([models, row], ignore_index=True)\n\nmodels.sort_values(by='score', ascending=False)","ddd9b697":"rf = RandomForestClassifier(random_state = 3, oob_score=True)\nrf.fit(x_train, y_train)\nprint(\"OOB Score: \", rf.oob_score_)","8b8d6f94":"model = RandomForestClassifier(random_state = 3)\nmodel.fit(x_train, y_train)","3ccb4a8d":"rfe = RFE(model, n_features_to_select=1, verbose =3)\nrfe.fit(x_train,y_train)\n\nimp1 = pd.DataFrame({'feature':x_train.columns, 'rank1':rfe.ranking_})\nimp1 = imp1.sort_values(by = 'rank1')\nimp1","8cd25b9a":"imp2= pd.DataFrame({'featur':x_train.columns, 'importance':np.round(model.feature_importances_, 3)})\nimp2['rank2'] = imp2['importance'].rank(ascending=False, method='min')\nimp2 = imp2.sort_values(by = 'importance', ascending=False)\nimp2","3d9f2604":"# importances['rank']=importances2['rank'].values\n# importances=importances.sort_values('rank')\n# importances\n\nimp = pd.concat([imp1, imp2], axis=1)\nimp['rank'] = imp['rank1'] + imp['rank2']\nimp = imp.sort_values(by = 'rank')\nimp = imp.drop(['featur', 'importance', 'rank1', 'rank2'], axis=1)\nimp","f1bb2a9b":"x_temp = x_train[imp.feature]","3cbe159b":"features = [i for i in range(22)]\nresults = []\n\nfor i in features:\n    rf = RandomForestClassifier(n_jobs=-1, random_state=3)\n    cols = x_temp.columns[:i+1]\n    x_t = x_temp[cols]\n    scores = cross_val_score(rf, x_t, y_train, cv = 5, scoring=\"accuracy\")\n    results.append(scores.mean())\n    print(i, \" : \", np.round(scores.mean(),3), np.round(scores.std(),3))","af6def1c":"fig, ax = plt.subplots(figsize=(12,6))\n\nax.minorticks_on()\n\n# Customize the major grid\nax.grid(which='major', linestyle='-', linewidth='0.5', color='red')\n# Customize the minor grid\nax.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\n\nsns.lineplot(y = results, x = features)","f5b443e8":"n_f = 8\nto_keep = x_temp.columns[:n_f+1]\nx_train_fimp = x_train[to_keep]\nx_test_fimp = x_test[to_keep]\nx_train_fimp.head()","6e81d37f":"rf = RandomForestClassifier(random_state=3, oob_score=True)\nrf.fit(x_train_fimp, y_train)\nrf.oob_score_","0f054382":"x_train_final = x_train_fimp\nx_test_final = x_test_fimp","91895da6":"# Look at parameters used by our current forest\nprint('Parameters currently in use:\\n')\npprint(rf.get_params())","12908f27":"rfc=RandomForestClassifier(random_state=42)\nparam_grid = { \n    'n_estimators': [200, 500],\n    'max_features': ['auto', 'sqrt', 'log2'],\n    'max_depth' : [4,5,6,7,8,'none']\n}\npprint(param_grid)","1a65e470":"CV_rfc = GridSearchCV(estimator=rfc, param_grid=param_grid, cv= 5)\n# Fit the random search model\nCV_rfc.fit(x_train_final, y_train)","cec4648e":"CV_rfc.best_params_","f6365ec0":"rfc1=RandomForestClassifier(random_state=42, max_features='auto', n_estimators= 200, max_depth=8, criterion='entropy')\nrfc1.fit(x_train_final, y_train)","6e1e6062":"pred=rfc1.predict(x_test_final)\nprint(\"Accuracy for Random Forest after Hyperparameter Tuning on test data: \",accuracy_score(y_test,pred))\npred=rf.predict(x_test_final)\nprint(\"Accuracy for Random Forest before Hyperparameter Tuning on test data: \",accuracy_score(y_test,pred))","6d98ad70":"# Splitting into train and test","678c2c1f":"# MBA","23010682":"# Encoding categorical variables","0e590cae":"* employability test score does not impact placement.\n* Salary seems to increase with increase in employability test score.","ab26f7ef":"# Model Selection","79ea289e":"# Feature Scaling","19ee7c77":"* No major diffrence in Science and Commerce w.r.t placement probability. For Arts probability is low.\n* Median salary for students in Science and Commerce is almost same. For Arts, the salary is lower.\n* We should note that, data points for Arts are less. So, inference w.r.t Art might not be accurate.\n* Students with hsc_p < 50 are not placed\n* Students with hsc_p > 80 are always placed","fa478ca8":"We will combine the above two feature importances and sort on the basis or rank.","875242d3":"Salary has 67 Null values for students who have not been placed","4770a599":"# Work Experiece\n","7aef698c":"* The new dataset performs better than the original dataset.\n* Hence new one is kept as the final dataset","ece701ad":"# Employability Test Score\n","8fbf65ad":"Score is highest for random forest","5239a295":"1. High correlation between status and (ssc_p, hsc_p, degree_p)\n2. Low correlation between status and (etest_p, mba_p)","08b67de3":"# Performing hyperparameter tuning\nThe current parameters are given as follows: ","e81df75d":"Checking OOB Score for new dataframe","b480f8df":"# Senior Secondary","75c376ae":"1. 1. Males have higher prob. of getting placed","a4e5b49e":"* No major diffrence in Comm&Mgmt and Sci&Tech w.r.t placement probability. For Others probability is lower.\n* On an average, more percentage score in bachelors degree increases chances of placement\n* In terms of salary there is only a slight diffrence with Sci&Tech being the best paymaster and Others lowest.\n* Datapoints for Others is less, so inference from its data might not be accurate\n* Students with degree_p < 55 are not placed\n* Students with degree_p > 80 are always placed","d204dc62":"# Bachelor's Degree","b61059ab":"# Feature Engineering","e62c1fb1":"# High School","2a120150":"# Gender","50e6f8bf":"# Model Building","14aae79c":"# **Heat Map**","e735d7e3":"* No major diffrence in centrer board or other board w.r.t placement probability\n* On an average, more percentage score in hsc increases chances of placement\n* Median salary for students of both hsc_b boards is almost same","11578c5e":"# Relationg b\/w different markers","71da4f84":"* n_estimators = number of trees in the foreset\n* max_features = max number of features considered for splitting a node\n* max_depth = max number of levels in each decision tree\n* min_samples_split = min number of data points placed in a node before the node is split\n* min_samples_leaf = min number of data points allowed in a leaf node\n* bootstrap = method for sampling data points (with or without replacement)","8f215ca1":"* People with prior work experience have a very high chance of placement.\n* There is quite a big difference in percentage of people with work experience being placed as compared to freshers.\n* Median salary for freshers and experinced professionals is almost similar.","8dcc5723":"* No major diffrence in centrer board or other board w.r.t placement probability\n* On an average, more percentage score in ssc increases chances of placement\n* salary for students of both ssc_b boards is almost same\n* Students with ssc_p < 50 are not placed\n* Students with ssc_p > 80 are always placed","6630e690":"* No conclusive relation between mba_p and placement\n* Mkt&Fin professionals have a higher chance in getting a placement than Mkt&Hr. Infact, 79% of Mkt&Fin get placed compared to just 55% of Mkt&HR\n* Mkt&Fin have a slighly higher median salary than Mkt&Hr","b27732ac":"Determing optimal number of features","9ec0571a":"* Optimal number of features comes out to be 8\n* Making dataset using the optimal number of features"}}