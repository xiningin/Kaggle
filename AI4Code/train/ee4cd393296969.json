{"cell_type":{"9fc4504f":"code","b90916d5":"code","1a6adcde":"code","e22d11af":"code","d0bbe431":"code","4af0692a":"code","74a6eff4":"code","c3efa08a":"code","4e8e14d0":"code","9738452a":"code","8469e2d0":"code","b6c5439f":"code","6a5d5371":"code","63974d78":"code","175e680a":"code","684014ee":"code","d00e9dbe":"code","48375ede":"code","75892713":"code","312c44cc":"code","451c1946":"code","ec84ae04":"code","8eaefc9e":"code","7b26cf85":"code","00c43b1d":"code","99299cc9":"code","f2108653":"code","c31cee64":"code","0f50db47":"code","94989ced":"code","8b9d215c":"code","39486722":"code","30c90c31":"code","a9be3c0e":"code","2199192d":"code","eaf38a2c":"code","c61d6a4d":"code","0118471f":"code","568f7229":"code","711ed40c":"code","74f7d878":"code","669913e1":"code","7c7ee1c6":"code","a117f07c":"code","f98c8ccf":"code","62392523":"code","40f38e0a":"code","96d4258b":"code","12e74602":"code","a2b7f962":"code","be875b41":"code","8293ccfe":"code","ba313f12":"code","36e7cfa3":"code","9d092999":"code","0bd014ca":"code","60b4b331":"code","efe804e4":"code","3504614f":"code","82ec5649":"code","a4c9a297":"code","01e2650b":"code","30ab9cfa":"code","ecc72301":"code","af4fe152":"code","f72f62e4":"code","359b4586":"code","88170b02":"code","316366fe":"code","5cd6df63":"code","74c808da":"code","6265caab":"code","5b6e67f9":"code","206bf321":"code","2b26edb9":"code","3162deea":"code","b5fb25dd":"markdown","c9f511f5":"markdown","11278091":"markdown","dee19848":"markdown","6b3ab9f2":"markdown","24739c01":"markdown","d31aa755":"markdown","65eae3bb":"markdown","4a3d6e93":"markdown","dff19a99":"markdown","40a6214b":"markdown","ea3ed92a":"markdown","dcaed443":"markdown","99a58ca4":"markdown","ff8a7718":"markdown","0ea58acd":"markdown","55762605":"markdown","8059ee03":"markdown","13c061a8":"markdown","8327b6b9":"markdown","15a56a26":"markdown","7f2d4a09":"markdown","aefb8487":"markdown","a3d6e0eb":"markdown","fa7e17d1":"markdown","2884d173":"markdown","96eda9be":"markdown","8cffe926":"markdown","ac03803b":"markdown","4084719c":"markdown","9b2a5c4d":"markdown","765d059c":"markdown","f2ff7f6e":"markdown","f5bea8e2":"markdown","054d60f7":"markdown","733d267e":"markdown","b8961317":"markdown","16c17d0a":"markdown","3cc4d264":"markdown","35042570":"markdown","f6aed4e8":"markdown","2aacdda0":"markdown","3468cf0d":"markdown","c34b23a5":"markdown","e0a46960":"markdown","04204760":"markdown"},"source":{"9fc4504f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b90916d5":"train = pd.read_csv(\"..\/input\/cat-in-the-dat\/train.csv\")","1a6adcde":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","e22d11af":"print(\"Total number of train data is:\", train.shape)","d0bbe431":"train.head(6)","4af0692a":"train.drop([\"id\"], axis=1, inplace=True)","74a6eff4":"train.isna().sum()","c3efa08a":"train.describe()","4e8e14d0":"#train.duplicated()","9738452a":"tar = train['target'].value_counts()\nprint(\"Number of cat \", tar[1], \", (\", (tar[1]\/(tar[1]+tar[0]))*100,\"%)\")\nprint(\"Number of non_cat \", tar[0], \", (\", (tar[0]\/(tar[1]+tar[0]))*100,\"%)\")\n","8469e2d0":"def bar_plot(feature):\n    sns.set(style=\"darkgrid\")\n    ax = sns.countplot(x=feature , data=train)\n    \n\n    ","b6c5439f":"bar_plot(\"target\")","6a5d5371":"bar_plot(\"bin_0\")","63974d78":"bar_plot(\"bin_1\")","175e680a":"bar_plot(\"bin_2\")","684014ee":"bar_plot(\"bin_3\")","d00e9dbe":"bar_plot(\"bin_4\")","48375ede":"bar_plot(\"nom_0\")","75892713":"bar_plot(\"nom_1\")","312c44cc":"bar_plot(\"nom_2\")","451c1946":"bar_plot(\"nom_3\")","ec84ae04":"bar_plot(\"nom_4\")","8eaefc9e":"bar_plot(\"nom_5\")","7b26cf85":"bar_plot(\"nom_6\")","00c43b1d":"bar_plot(\"nom_7\")","99299cc9":"bar_plot(\"nom_8\")","f2108653":"bar_plot(\"nom_9\")","c31cee64":"print(\"Total number of different category for nom_5 is:\", train[\"nom_5\"].value_counts().shape[0])\nprint(\"Total number of different category for nom_6 is:\", train[\"nom_6\"].value_counts().shape[0])\nprint(\"Total number of different category for nom_7 is:\", train[\"nom_7\"].value_counts().shape[0])\nprint(\"Total number of different category for nom_8 is:\", train[\"nom_8\"].value_counts().shape[0])\nprint(\"Total number of different category for nom_9 is:\", train[\"nom_9\"].value_counts().shape[0])","0f50db47":"bar_plot(\"ord_0\")","94989ced":"bar_plot(\"ord_1\")","8b9d215c":"bar_plot(\"ord_2\")","39486722":"bar_plot(\"ord_3\")","30c90c31":"bar_plot(\"ord_4\")","a9be3c0e":"bar_plot(\"ord_5\")","2199192d":"bar_plot(\"day\")","eaf38a2c":"bar_plot(\"month\")","c61d6a4d":"test = pd.read_csv(\"..\/input\/cat-in-the-dat\/test.csv\")","0118471f":"test.shape","568f7229":"test.head(3)","711ed40c":"test.drop([\"id\"], axis=1, inplace=True)","74f7d878":"test[\"bin_0\"].isin(train[\"bin_0\"]).value_counts()","669913e1":"test[\"bin_1\"].isin(train[\"bin_1\"]).value_counts()","7c7ee1c6":"test[\"bin_2\"].isin(train[\"bin_2\"]).value_counts()","a117f07c":"test[\"bin_3\"].isin(train[\"bin_3\"]).value_counts()","f98c8ccf":"test[\"bin_4\"].isin(train[\"bin_4\"]).value_counts()","62392523":"test[\"nom_0\"].isin(train[\"nom_0\"]).value_counts()","40f38e0a":"test[\"nom_1\"].isin(train[\"nom_1\"]).value_counts()","96d4258b":"test[\"nom_2\"].isin(train[\"nom_2\"]).value_counts()","12e74602":"test[\"nom_3\"].isin(train[\"nom_3\"]).value_counts()","a2b7f962":"test[\"nom_4\"].isin(train[\"nom_4\"]).value_counts()","be875b41":"test[\"nom_5\"].isin(train[\"nom_5\"]).value_counts()","8293ccfe":"test[\"nom_6\"].isin(train[\"nom_6\"]).value_counts()","ba313f12":"test[\"nom_7\"].isin(train[\"nom_7\"]).value_counts()","36e7cfa3":"test[\"nom_8\"].isin(train[\"nom_8\"]).value_counts()","9d092999":"test[\"nom_9\"].isin(train[\"nom_9\"]).value_counts()","0bd014ca":"test[\"ord_0\"].isin(train[\"ord_0\"]).value_counts()","60b4b331":"test[\"ord_1\"].isin(train[\"ord_1\"]).value_counts()","efe804e4":"test[\"ord_2\"].isin(train[\"ord_2\"]).value_counts()","3504614f":"test[\"ord_3\"].isin(train[\"ord_3\"]).value_counts()","82ec5649":"test[\"ord_4\"].isin(train[\"ord_4\"]).value_counts()","a4c9a297":"test[\"ord_5\"].isin(train[\"ord_5\"]).value_counts()","01e2650b":"test[\"day\"].isin(train[\"day\"]).value_counts()","30ab9cfa":"test[\"month\"].isin(train[\"month\"]).value_counts()","ecc72301":"y = train[\"target\"]\ntrain.drop([\"target\"], inplace=True, axis=1)","af4fe152":"X =train\nT =test ","f72f62e4":"train = X\ntest = T","359b4586":"df = pd.concat([train, test])\ndummies = pd.get_dummies(df, columns=df.columns, drop_first=True, sparse=True)\ntrain = dummies.iloc[:train.shape[0], :]\ntest = dummies.iloc[train.shape[0]:, :]\n\n","88170b02":"print(train.shape)\nprint(test.shape)","316366fe":"train.head(2)","5cd6df63":"test.head(2)","74c808da":"def log_alpha(al):\n    alpha=[]\n    for i in al:\n        a=np.log(i)\n        alpha.append(a)\n    return alpha    ","6265caab":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.GridSearchCV.html\n# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.SGDClassifier.html\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import roc_auc_score\n\nsvm = SGDClassifier(loss='log', class_weight='balanced')\nalpha=alpha = [0.000001,0.000002, 0.000005, 0.00001, 0.00003, 0.00005, 0.00007]\nparameters = {'alpha':alpha}\nclf = RandomizedSearchCV(svm, parameters, cv=5, scoring='roc_auc', n_jobs=-1, return_train_score=True,)\nclf.fit(train, y)\n\nprint(\"Model with best parameters :\\n\",clf.best_estimator_)\n\nalpha = log_alpha(alpha)\n\n\nbest_alpha = clf.best_estimator_.alpha\nbest_penalty = clf.best_estimator_.penalty\n#best_split = clf.best_estimator_.min_samples_split\n\nprint(best_alpha)\nprint(best_penalty)\n#print(best_split)\n\ntrain_auc= clf.cv_results_['mean_train_score']\ntrain_auc_std= clf.cv_results_['std_train_score']\ncv_auc = clf.cv_results_['mean_test_score'] \ncv_auc_std= clf.cv_results_['std_test_score']\n\nplt.plot(alpha, train_auc, label='Train AUC')\n# this code is copied from here: https:\/\/stackoverflow.com\/a\/48803361\/4084039\nplt.gca().fill_between(alpha,train_auc - train_auc_std,train_auc + train_auc_std,alpha=0.2,color='darkblue')\n\nplt.plot(alpha, cv_auc, label='CV AUC')\n# this code is copied from here: https:\/\/stackoverflow.com\/a\/48803361\/4084039\nplt.gca().fill_between(alpha,cv_auc - cv_auc_std,cv_auc + cv_auc_std,alpha=0.2,color='darkorange')\n\nplt.scatter(alpha, train_auc, label='Train AUC points')\nplt.scatter(alpha, cv_auc, label='CV AUC points')\n\n\nplt.legend()\nplt.xlabel(\"alpha and l1\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.grid()\nplt.show()","5b6e67f9":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.calibration import CalibratedClassifierCV\n\nsvm = SGDClassifier(loss='log', alpha=best_alpha, penalty=best_penalty, class_weight=\"balanced\")\n#svm.fit(train_1, project_data_y_train)\n# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n# not the predicted outputs\n\n#sig_clf = CalibratedClassifierCV(svm, method=\"isotonic\")\nsvm = svm.fit(train, y)\n\n\ny_train_pred1 = svm.predict(train) \ny_test_pred1 = svm.predict(test)\n\ntrain_fpr, train_tpr, tr_thresholds = roc_curve(y, y_train_pred1)\n#test_fpr, test_tpr, te_thresholds = roc_curve(project_data_y_test, y_test_pred)\n\nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\n#plt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\" hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.grid()\nplt.show()","206bf321":"sub = pd.read_csv(\"..\/input\/cat-in-the-dat\/sample_submission.csv\")","2b26edb9":"sub.head(2)","3162deea":"submission = pd.DataFrame({'id': sub[\"id\"], 'target': y_test_pred1})\nsubmission.to_csv('submission_log.csv', index=False)\n","b5fb25dd":"**Target**","c9f511f5":"**bin_0**","11278091":"**To be continued....**","dee19848":"**Logistic Regression**","6b3ab9f2":"**ord_1**","24739c01":"**Checking for duplicates**","d31aa755":"**Let's check for counts for nom_5 to nom_9 **","65eae3bb":"**OneHotEncoding**","4a3d6e93":"**nom_9**","dff19a99":"> Below code is for visualising maximum rows and columns","40a6214b":"**nom_8**","ea3ed92a":"> There is no nan values in the dataset","dcaed443":"**nom_3**","99a58ca4":"**ord_0**","ff8a7718":"**Checking For NaN values**","0ea58acd":"> there is no duplicate rows in the train, \n> you can check it by uncommenting above code","55762605":"**Importing train**","8059ee03":"**nom_5**","13c061a8":"**nom_6**","8327b6b9":"**ord_3**","15a56a26":"**Submission**","7f2d4a09":"**bin_1**","aefb8487":"**ord_2**","a3d6e0eb":"> From nom_5 to nom_9 barplot is not clear that means number of category for these features is more","fa7e17d1":"**ord_4**","2884d173":"**Bar plot for all features **","96eda9be":"> Hi guys, if you like my work then please upvote it.\n* *If you have any suggestions then please let me know.*","8cffe926":"**ord_5**","ac03803b":"**nom_7**","4084719c":"**Please support my work by upvoting **","9b2a5c4d":"**Checking if categories of test is present in train or not**","765d059c":"**Importing necessary libraries**","f2ff7f6e":"**Test**","f5bea8e2":"**nom_2**","054d60f7":"**bin_2**","733d267e":"**day**","b8961317":"**nom_1**","16c17d0a":"**Target visualisation(Balanced or not)**","3cc4d264":"**bin_4**","35042570":"**nom_4**","f6aed4e8":"**month**","2aacdda0":"**Describing train**","3468cf0d":"**Conclusion**\n> From the above we can see that nom_8 and nom_9 is the only feature which is present is test but not in train.","c34b23a5":"**nom_0**","e0a46960":"**bin_3**","04204760":"**Dropping id**"}}