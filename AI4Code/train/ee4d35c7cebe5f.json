{"cell_type":{"d3339bc8":"code","aeaad649":"code","492cc740":"code","eeabd27e":"code","5e8c8e62":"code","e41dce00":"code","cf0c093f":"code","22b7b16b":"code","56203ff9":"code","339d8ca7":"code","7b75700d":"code","0c0bd89f":"code","826f17cb":"code","47c41fa6":"code","e1dd522a":"code","eb5c6463":"code","c293703c":"code","569d981e":"code","0aec7edc":"code","e5bd2e70":"code","ead3f0ec":"code","82ff8f9c":"code","4c2f25c4":"code","1f4c475b":"code","55f3cef0":"code","a756b803":"code","ae84919f":"code","b449222f":"code","b4bb3679":"code","38bac4de":"markdown"},"source":{"d3339bc8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # pandas and matplotlib for data visualization\nimport seaborn as sns\n%matplotlib inline\nimport matplotlib.animation as animation\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","aeaad649":"df= pd.read_csv('..\/input\/Mall_Customers.csv')","492cc740":"df.head()","eeabd27e":"df.info()","5e8c8e62":"# to check any 'null' values present in dataset\ndf.isnull().sum()","e41dce00":"df=df.drop(['CustomerID'], axis=1)","cf0c093f":"fig,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(df.corr(), ax=ax, annot=True, linewidths=0.05, fmt= '.2f',cmap=\"magma\")\nplt.show()","22b7b16b":"#The two important features which affects the sepnding score are Age and Annual Income","56203ff9":"plt.style.use('fivethirtyeight')","339d8ca7":"plt.figure(1 , figsize = (15 , 6))\nn = 0 \nfor x in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n    n += 1\n    plt.subplot(1 , 3 , n)\n    plt.subplots_adjust(hspace =0.5 , wspace = 0.5)\n    sns.distplot(df[x] , bins = 20)\n    plt.title('Distplot of {}'.format(x))\nplt.show()","7b75700d":"plt.figure(1 , figsize = (15 , 5))\nsns.countplot(y = 'Gender' , data = df)\nplt.show()","0c0bd89f":"labels = ['Female', 'Male']\nsize = df['Gender'].value_counts()\ncolors = ['red', 'orange']\nexplode = [0, 0.1]\n\nplt.rcParams['figure.figsize'] = (4, 4)\nplt.pie(size, colors = colors, explode = explode, labels = labels, shadow = True, autopct = '%.2f%%')\nplt.title('Gender', fontsize = 20)\nplt.axis('off')\nplt.legend()\nplt.show()","826f17cb":"plt.figure(figsize=(6,6))\nplt.scatter(df['Annual Income (k$)'],df['Spending Score (1-100)'])\nplt.title('Annual Income (k$) vs Spending Score (1-100)')\nplt.xlabel('Annual Income (k$)')\nplt.ylabel('Spending Score (1-100)')","47c41fa6":"plt.figure(figsize=(6,6))\nplt.scatter(df['Annual Income (k$)'],df['Age'])\nplt.title('Annual Income (k$) vs Age')\nplt.xlabel('Annual Income (k$)')\nplt.ylabel('Age')","e1dd522a":"plt.figure(1 , figsize = (8, 6))\nfor gender in ['Male' , 'Female']:\n    plt.scatter(x = 'Age' , y = 'Annual Income (k$)' , data = df[df['Gender'] == gender] ,\n                s = 200 , alpha = 0.5 , label = gender)\nplt.xlabel('Age'), plt.ylabel('Annual Income (k$)') \nplt.title('Age vs Annual Income w.r.t Gender')\nplt.legend()\nplt.show()","eb5c6463":"plt.figure(1 , figsize = (10 , 6))\nfor gender in ['Male' , 'Female']:\n    plt.scatter(x = 'Annual Income (k$)',y = 'Spending Score (1-100)' ,\n                data = df[df['Gender'] == gender] ,s = 200 , alpha = 0.5 , label = gender)\nplt.xlabel('Annual Income (k$)'), plt.ylabel('Spending Score (1-100)') \nplt.title('Annual Income vs Spending Score w.r.t Gender')\nplt.legend()\nplt.show()","c293703c":"plt.figure(1 , figsize = (15 , 7))\nn = 0 \nfor cols in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n    n += 1 \n    plt.subplot(1 , 3 , n)\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n    sns.violinplot(x = cols , y = 'Gender' , data = df , palette = 'vlag')\n    sns.swarmplot(x = cols , y = 'Gender' , data = df)\n    plt.ylabel('Gender' if n == 1 else '')\n    plt.title('Boxplots & Swarmplots' if n == 2 else '')\nplt.show()","569d981e":"#Distribution of values in Age , Annual Income and Spending Score according to Gender","0aec7edc":"df.head()","e5bd2e70":"### Feature sleection for the model\n#Considering only 2 features (Annual income and Spending Score) and no Label available\nX= df.iloc[:, [2,3]].values","ead3f0ec":"#Building the Model\n#KMeans Algorithm to decide the optimum cluster number , KMeans++ using Elbow Mmethod\n#to figure out K for KMeans, I will use ELBOW Method on KMEANS++ Calculation\nfrom sklearn.cluster import KMeans\nwcss=[]\n\n#we always assume the max number of cluster would be 10\n#you can judge the number of clusters by doing averaging\n###Static code to get max no of clusters\n\nfor i in range(1,11):\n    kmeans = KMeans(n_clusters= i, init='k-means++', random_state=0)\n    kmeans.fit(X)\n    wcss.append(kmeans.inertia_)\n\n    #inertia_ is the formula used to segregate the data points into clusters","82ff8f9c":"#Visualizing the ELBOW method to get the optimal value of K \nplt.plot(range(1,11), wcss)\nplt.title('The Elbow Method')\nplt.xlabel('no of clusters')\nplt.ylabel('wcss')\nplt.show()","4c2f25c4":"#If you zoom out this curve then you will see that last elbow comes at k=5\n#no matter what range we select ex- (1,21) also i will see the same behaviour but if we chose higher range it is little difficult to visualize the ELBOW\n#that is why we usually prefer range (1,11)\n##Finally we got that k=5\n\n#Model Build\nkmeansmodel = KMeans(n_clusters= 5, init='k-means++', random_state=0)\ny_kmeans= kmeansmodel.fit_predict(X)\n\n#For unsupervised learning we use \"fit_predict()\" wherein for supervised learning we use \"fit_tranform()\"\n#y_kmeans is the final model . Now how and where we will deploy this model in production is depends on what tool we are using.\n#This use case is very common and it is used in BFS industry(credit card) and retail for customer segmenattion.","1f4c475b":"#Visualizing all the clusters \n\nplt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'red', label = 'Cluster 1')\nplt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')\nplt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label = 'Cluster 3')\nplt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')\nplt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')\nplt.title('Clusters of customers')\nplt.xlabel('Annual Income (k$)')\nplt.ylabel('Spending Score (1-100)')\nplt.legend()\nplt.show()","55f3cef0":"###Model Interpretation \n#Cluster 1 (Red Color) -> earning high but spending less\n#cluster 2 (Blue Colr) -> average in terms of earning and spending \n#cluster 3 (Green Color) -> earning high and also spending high [TARGET SET]\n#cluster 4 (cyan Color) -> earning less but spending more\n#Cluster 5 (magenta Color) -> Earning less , spending less","a756b803":"df.head()","ae84919f":"### Feature sleection for the model\n#Considering only 2 features (Annual income and Spending Score) and no Label available\nx = df.iloc[:, [1, 3]].values\nx.shape","b449222f":"from sklearn.cluster import KMeans\n\nwcss = []\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\n    kmeans.fit(x)\n    wcss.append(kmeans.inertia_)\n\nplt.rcParams['figure.figsize'] = (15, 5)\nplt.plot(range(1, 11), wcss)\nplt.title('K-Means Clustering(The Elbow Method)', fontsize = 20)\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.show()","b4bb3679":"kmeans = KMeans(n_clusters = 4, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\nymeans = kmeans.fit_predict(x)\n\nplt.rcParams['figure.figsize'] = (8, 8)\nplt.title('Cluster of Ages', fontsize = 30)\n\nplt.scatter(x[ymeans == 0, 0], x[ymeans == 0, 1], s = 100, c = 'pink', label = 'Usual Customers' )\nplt.scatter(x[ymeans == 1, 0], x[ymeans == 1, 1], s = 100, c = 'orange', label = 'Priority Customers')\nplt.scatter(x[ymeans == 2, 0], x[ymeans == 2, 1], s = 100, c = 'lightgreen', label = 'Target Customers(Young)')\nplt.scatter(x[ymeans == 3, 0], x[ymeans == 3, 1], s = 100, c = 'red', label = 'Target Customers(Old)')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 50, c = 'black')\n\nplt.xlabel('Age')\nplt.ylabel('Spending Score (1-100)')\nplt.legend()\nplt.show()","38bac4de":"We should target Age group between 20-40 who have spending power\n\n**Conclusion**\n\n-With respect to Annual Income we should target Individuals who have Annual Income bracket (#70,000  \ud835\udc61\ud835\udc5c1,10,000 ). They have high income and high spending scores. Secondly, the company should also target individuals with annual income bracket(#40,000  \ud835\udc61\ud835\udc5c70,000 ) as they spemd reasonably fair. Company would never want to miss any potential customers.\n\nWith respect to Age, the company should target age group bracket(20 to 40 years) as they have high spending score. Also, the target audience depends on the nature of the business. we have further classified potential age groups for old and young customers.\n\nwith respect to Gender, we should target Male and female equally as there are equal number of male and female in our potential target audience with respect to annual income."}}