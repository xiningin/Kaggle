{"cell_type":{"f557564c":"code","ff677a83":"code","5caf626b":"code","d50aadfb":"code","1979c6cc":"code","597bf0b2":"code","78ebe0e8":"code","769e51ff":"code","81b8c16b":"code","2c14cbfe":"code","38a419c5":"code","598875c3":"code","e9ba3890":"code","fd9dd19f":"code","02de8d72":"code","16067b73":"code","1246a411":"code","e2200c6a":"code","f74fcb49":"code","4a4e64c5":"code","be978fe9":"code","9387e1b6":"code","6fdf63dd":"code","c56c7aaf":"code","30678291":"code","44602690":"code","fc044ca8":"markdown","4677727e":"markdown","689a4660":"markdown","9969a675":"markdown","8c157cc3":"markdown","ad015284":"markdown","e4442e9b":"markdown","cd4f3e4e":"markdown","6a705ade":"markdown","e36b53c8":"markdown","f3e87be2":"markdown"},"source":{"f557564c":"!pip install autokeras\n!pip install keras-tuner\n!pip install cloud-tpu-client","ff677a83":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport tensorflow as tf\nfrom autokeras import StructuredDataClassifier\nimport kerastuner\nimport tensorflow_addons as tfa\n\ntrain_path = '..\/input\/tabular-playground-series-jun-2021\/train.csv'\ntest_path = '..\/input\/tabular-playground-series-jun-2021\/test.csv'\nRS = 69420\nsns.set_style('darkgrid')\nDEVICE ='GPU'","5caf626b":"from cloud_tpu_client import Client\nprint(tf.__version__)\n\n# Client().configure_tpu_version(tf.__version__, restart_type='always')\n\nif DEVICE == \"TPU\":\n    print(\"connecting to TPU...\")\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        print('Running on TPU ', tpu.master())\n    except ValueError:\n        print(\"Could not connect to TPU\")\n        tpu = None\n\n    if tpu:\n        try:\n            print(\"initializing  TPU ...\")\n            tf.config.experimental_connect_to_cluster(tpu)\n            tf.tpu.experimental.initialize_tpu_system(tpu)\n            strategy = tf.distribute.experimental.TPUStrategy(tpu)\n            print(\"TPU initialized\")\n        except _:\n            print(\"failed to initialize TPU\")\n    else:\n        DEVICE = \"GPU\"\n\nif DEVICE != \"TPU\":\n    print(\"Using default strategy for CPU and single GPU\")\n    strategy = tf.distribute.get_strategy()\n\nif DEVICE == \"GPU\":\n    print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\n    \n\nAUTO     = tf.data.experimental.AUTOTUNE\nREPLICAS = strategy.num_replicas_in_sync\nprint(f'REPLICAS: {REPLICAS}')","d50aadfb":"df = pd.read_csv(train_path, index_col=0)","1979c6cc":"from sklearn.preprocessing import OrdinalEncoder\n\noe = OrdinalEncoder(dtype=np.int32)\ndf['target'] = oe.fit_transform(df['target'].values.reshape(-1,1))","597bf0b2":"sns.countplot(df.target)","78ebe0e8":"X = df.iloc[:, :-1]\ny = df.iloc[:, -1]\n\nX.shape, y.shape","769e51ff":"from sklearn.model_selection import StratifiedKFold\ncv = StratifiedKFold(n_splits=10, random_state=RS, shuffle=True)\nprint(cv)\n\nfor train_index, test_index in cv.split(X, y):\n    print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_test = y.iloc[train_index], y.iloc[test_index]","81b8c16b":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","2c14cbfe":"# from imblearn.combine import SMOTETomek\n# from collections import Counter\n\n# sme = SMOTETomek(random_state=RS, n_jobs=-1)\n\n# print('Original Train Set Shape %s' % Counter(y_train))\n# X_train, y_train = sme.fit_resample(X_train, y_train)\n# print('Resampled dataset shape %s' % Counter(y_train))\n\n# print('Original Test Set Shape %s' % Counter(y_test))\n# X_test, y_test = sme.fit_sample(X_test, y_test)\n# print('Resampled dataset shape %s' % Counter(y_test))","38a419c5":"# from sklearn.utils.class_weight import compute_class_weight\n\n# class_weights = compute_class_weight('balanced',\n#                                      np.unique(y_train),\n#                                      y_train)\n\n# class_weights = dict(enumerate(class_weights))","598875c3":"from sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","e9ba3890":"# Initialize the structured data classifier.\nPR = tf.keras.metrics.AUC(name='prc', curve='PR')\nAUC = tf.keras.metrics.AUC()\n\n# I ran for 15 trials just to start, more trials == more better\nclf = StructuredDataClassifier(overwrite=True,\n                                  project_name='TPS_AK',\n                                  objective=kerastuner.Objective(\"val_loss\", direction=\"min\"),\n                                  seed=RS,\n                                  max_trials=100)","fd9dd19f":"from tensorflow.keras.callbacks import EarlyStopping\nes = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\nts = tfa.callbacks.TimeStopping(seconds=3600*5)","02de8d72":"# One-Hot-Encoding Experiments\ny_train_oh = tf.keras.utils.to_categorical(y_train)\ny_test_oh = tf.keras.utils.to_categorical(y_test)","16067b73":"%%time\nwith strategy.scope():\n    clf.fit(X_train, y_train_oh,\n            epochs=75,\n            batch_size=1024,\n            validation_split=0.2,\n            callbacks=[es],\n            verbose=1)","1246a411":"model = clf.export_model()\nmodel.summary()","e2200c6a":"with strategy.scope()\n    clf.evaluate(X_test, y_test_oh)","f74fcb49":"test = pd.read_csv(test_path, index_col=0)","4a4e64c5":"submission = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/sample_submission.csv', index_col=0)","be978fe9":"test = sc.transform(test.values)","9387e1b6":"preds = model.predict(test)","6fdf63dd":"preds","c56c7aaf":"submission['Class_1']=preds[:,0]\nsubmission['Class_2']=preds[:,1]\nsubmission['Class_3']=preds[:,2]\nsubmission['Class_4']=preds[:,3]\nsubmission['Class_5']=preds[:,4]\nsubmission['Class_6']=preds[:,5]\nsubmission['Class_7']=preds[:,6]\nsubmission['Class_8']=preds[:,7]\nsubmission['Class_9']=preds[:,8]\nsubmission.head()","30678291":"submission.to_csv('submission.csv')","44602690":"# import time\n# from IPython.display import display, Javascript\n# display(Javascript('IPython.notebook.save_checkpoint();'))\n# time.sleep(10)\n\n# import os\n# os.system('shutdown -s')","fc044ca8":"**If you are using Neural Networks but not applying Early Stopping, wtf is wrong with you?**","4677727e":"# Stratified K Fold Split","689a4660":"submission","9969a675":"**Class Value Counts**","8c157cc3":"# Predict New","ad015284":"I do not know much about TPU's so please drop suggestions below","e4442e9b":"# Import Libraries","cd4f3e4e":"# Fix Massive Class Imbalance\n\n**From the data description I can see that this dataset is a CTGAN synthetic of the shopping dataset thus I can assume it to be IID**","6a705ade":"# AutoKeras Model","e36b53c8":"**MinMaxScale it as that is the norm for Neural Networks**","f3e87be2":"# Preprocess"}}