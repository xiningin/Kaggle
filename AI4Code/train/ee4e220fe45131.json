{"cell_type":{"9ff32382":"code","151545e9":"code","62660859":"code","7d718299":"code","e70f7a07":"code","a373e5b6":"code","a8bfc29a":"code","a281c66c":"code","6da768c2":"code","b5308b37":"code","3f7171ff":"code","556a31e9":"code","695c84ce":"code","e00088f2":"code","07e04b6e":"code","36a1a469":"code","21aaa2c6":"code","e4a7a6bc":"code","691130f2":"code","d86ee5c5":"code","91693c77":"code","8f29c996":"code","bf76e491":"markdown","9711ce02":"markdown","454d30f0":"markdown"},"source":{"9ff32382":"import cv2\nimport numpy as np\nimport tqdm.notebook as tqdm\nimport glob\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix as cm, classification_report as cr\n\n%matplotlib inline","151545e9":"x = np.arange(1, 10)\nbenford = np.log10(1 + 1 \/ x)\nplt.bar(x, benford)\nplt.title('Benfords law')\nplt.xlabel('First digit')\nplt.ylabel('Probability')\nplt.show()\nplt.close()","62660859":"def tamper_image(image, k=31):\n    image = cv2.medianBlur(image, k)\n    return image","7d718299":"image = cv2.imread('..\/input\/compare-difference-bw-lepord-and-tiger\/compare lepord and tiger\/train\/tiger\/033019_SZ_reviews_feat.jpg')\nplt.imshow(image[:, :, ::-1])\nplt.show()\n\ndouble = tamper_image(image)\nplt.imshow(double[:, :, ::-1])\nplt.show()\n\nplt.imshow((image - double)[:, :, ::-1])\nplt.show()\n\nplt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) - cv2.cvtColor(double, cv2.COLOR_BGR2GRAY), cmap='gray')\nplt.show()\nplt.close()","e70f7a07":"def compute_first_digits(img, normalise=False, debug_dct=False):\n    if isinstance(img, str):\n        img = cv2.imread(img, cv2.IMREAD_GRAYSCALE)\n        \n    if len(img.shape) == 3 :\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    \n    if normalise:\n        norm = cv2.normalize(img, np.zeros(img.shape), 0, 255, cv2.NORM_MINMAX)\n        \n    dct = cv2.dct(np.float32(img) \/ 255.0)\n    dct = np.abs(dct)  # Take abs values\n    if debug_dct:\n        print(dct)\n\n    min_val = dct.min()\n    if min_val < 1:\n        dct = np.power(10, -np.floor(np.log10(min_val)) + 1) * dct  # Scale all up to remove leading 0.00s\n    \n    if not (dct >= 1.0).all():\n        raise ValueError(\"Error\")\n    \n    digits = np.log10(dct).astype(int).astype('float32')\n    first_digits = dct \/ np.power(10, digits)\n    first_digits[(first_digits < 1.0) & (first_digits > 0.9)] = 1  # Handle edge case.\n    first_digits = first_digits.astype(int)\n    \n    if not (first_digits >= 1).all() and (first_digits <= 9).all():\n        raise ValueError(\"Error\")\n\n    return first_digits\n\n\ndef compute_first_digits_counts(img, normalise=False):\n    first_digits = compute_first_digits(img, normalise=normalise)\n    unq, counts = np.unique(first_digits, return_counts=True)\n    return unq, counts\n\n\n# Small test\nrnd = np.random.uniform(size=(4, 4)) * 255\ncompute_first_digits(rnd.astype('uint8'), debug_dct=True)","a373e5b6":"def prototype_image(image):\n    img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    plt.imshow(img, cmap='gray')\n    plt.show()\n\n    first_digits = compute_first_digits(img)\n    plt.imshow(first_digits)\n    plt.show()\n\n    unq, counts = np.unique(first_digits, return_counts=True)\n    tot = counts.sum()\n    counts = counts \/ tot\n    plt.plot(unq, counts, color='red', marker='x', linestyle='dashed', linewidth=2, markersize=12)\n    plt.bar(unq, benford, color='blue')\n    plt.show()\n    plt.close()\n\n    print(stats.chisquare(counts, benford))","a8bfc29a":"prototype_image(image)","a281c66c":"prototype_image(double)","6da768c2":"reference = sorted(glob.glob('..\/input\/compare-difference-bw-lepord-and-tiger\/compare lepord and tiger\/*\/*\/*.jpg'))\ncounts_ref = np.array([compute_first_digits_counts(x)[1] for x in tqdm.tqdm(reference)])\ncounts_mod = np.array([compute_first_digits_counts(tamper_image(cv2.imread(x, cv2.IMREAD_GRAYSCALE)))[1] for x in tqdm.tqdm(reference)])\n\ncounts_ref_norm = counts_ref \/ counts_ref.sum(axis=1)[..., np.newaxis]\ncounts_mod_norm = counts_mod \/ counts_mod.sum(axis=1)[..., np.newaxis]","b5308b37":"print(counts_ref_norm.mean(axis=0) - benford)\nprint(counts_mod_norm.mean(axis=0) - benford)","3f7171ff":"x = np.arange(1, 10)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8), sharex=True, sharey=True)\nax1.set_title('ref')\nax2.set_title('mod')\nax1.bar(x, benford, color='blue')\nax2.bar(x, benford, color='blue')\nfor r, m in zip(counts_ref_norm, counts_mod_norm):\n    ax1.plot(x, r)\n    ax2.plot(x, m)","556a31e9":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(21, 7), sharex=True, sharey=True)\nax1.set_title('ref - benford')\nax2.set_title('mod - benford')\nax3.set_title('ref - mod')\nx = np.arange(1, 10)\nfor r, m in zip(counts_ref_norm, counts_mod_norm):\n    ax1.plot(x, r-benford)\n    ax2.plot(x, m-benford)\n    ax3.plot(x, r-m)","695c84ce":"chi2_ref = [stats.chisquare(counts, benford) for counts in counts_ref_norm]\nchi2_ref_stat, chi2_ref_p = zip(*chi2_ref)\nprint(np.mean(chi2_ref_stat), np.mean(chi2_ref_p))\n\nchi2_mod = [stats.chisquare(counts, benford) for counts in counts_mod_norm]\nchi2_mod_stat, chi2_mod_p = zip(*chi2_mod)\nprint(np.mean(chi2_mod_stat), np.mean(chi2_mod_p))","e00088f2":"x = np.concatenate([counts_ref_norm, counts_mod_norm])\ny = np.concatenate([[0 for _ in counts_ref_norm], [1 for _ in counts_mod_norm]])\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0, shuffle=True)\n\nrf = RandomForestClassifier(random_state=0).fit(x_train, y_train)\n\ny_pred = rf.predict(x_train)\nprint(cm(y_true=y_train, y_pred=y_pred))\nprint(cr(y_true=y_train, y_pred=y_pred))\n\ny_pred = rf.predict(x_test)\nprint(cm(y_true=y_test, y_pred=y_pred))\nprint(cr(y_true=y_test, y_pred=y_pred))","07e04b6e":"N = 200\nreference = sorted(glob.glob('..\/input\/photoshopped-faces\/reference\/*.png'))[:N]\nmodified = sorted(glob.glob('..\/input\/photoshopped-faces\/modified\/*.png'))[:N]","36a1a469":"counts_ref = np.array([compute_first_digits_counts(x)[1] for x in tqdm.tqdm(reference)])\ncounts_mod = np.array([compute_first_digits_counts(x)[1] for x in tqdm.tqdm(modified)])","21aaa2c6":"counts_ref_norm = counts_ref \/ counts_ref.sum(axis=1)[..., np.newaxis]\ncounts_mod_norm = counts_mod \/ counts_mod.sum(axis=1)[..., np.newaxis]","e4a7a6bc":"print(counts_ref_norm.mean(axis=0) - benford)\nprint(counts_mod_norm.mean(axis=0) - benford)\nprint(counts_ref_norm.mean(axis=0) - counts_mod_norm.mean(axis=0))","691130f2":"x = np.arange(1, 10)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8), sharex=True, sharey=True)\nax1.set_title('ref')\nax2.set_title('mod')\nax1.bar(x, benford, color='blue')\nax2.bar(x, benford, color='blue')\nfor r, m in zip(counts_ref_norm, counts_mod_norm):\n    ax1.plot(x, r)\n    ax2.plot(x, m)","d86ee5c5":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(21, 7), sharex=True, sharey=True)\nax1.set_title('ref - benford')\nax2.set_title('mod - benford')\nax3.set_title('ref - mod')\nx = np.arange(1, 10)\nfor r, m in zip(counts_ref_norm, counts_mod_norm):\n    ax1.plot(x, r-benford)\n    ax2.plot(x, m-benford)\n    ax3.plot(x, r-m)","91693c77":"chi2_ref = [stats.chisquare(counts, benford) for counts in counts_ref_norm]\nchi2_ref_stat, chi2_ref_p = zip(*chi2_ref)\nprint(np.mean(chi2_ref_stat), np.mean(chi2_ref_p))\n\nchi2_mod = [stats.chisquare(counts, benford) for counts in counts_mod_norm]\nchi2_mod_stat, chi2_mod_p = zip(*chi2_mod)\nprint(np.mean(chi2_mod_stat), np.mean(chi2_mod_p))","8f29c996":"x = np.concatenate([counts_ref_norm, counts_mod_norm])\ny = np.concatenate([[0 for _ in counts_ref_norm], [1 for _ in counts_mod_norm]])\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=0, shuffle=True)\n\nrf = RandomForestClassifier(random_state=0).fit(x_train, y_train)\n\ny_pred = rf.predict(x_train)\nprint(cm(y_true=y_train, y_pred=y_pred))\nprint(cr(y_true=y_train, y_pred=y_pred))\n\ny_pred = rf.predict(x_test)\nprint(cm(y_true=y_test, y_pred=y_pred))\nprint(cr(y_true=y_test, y_pred=y_pred))","bf76e491":"On photoshopped images, this check doesn't work as well as i'd have hoped.","9711ce02":"# Trying on photoshopped dataset","454d30f0":"References:\n1. https:\/\/en.wikipedia.org\/wiki\/Benford%27s_law\n2. https:\/\/citeseerx.ist.psu.edu\/viewdoc\/download?doi=10.1.1.163.7159&rep=rep1&type=pdf\n3. https:\/\/abhayk1201.github.io\/files\/EE604_tp.pdf\n4. https:\/\/ieeexplore.ieee.org\/document\/7150688"}}