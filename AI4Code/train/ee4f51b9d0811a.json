{"cell_type":{"19deec86":"code","35af970b":"code","072dedad":"code","7c83122e":"code","facd9682":"code","4dd87216":"code","951f0607":"code","bdf822bf":"code","8b20ce0c":"markdown","9dd00e8b":"markdown","6f9a6f82":"markdown","4fa9a5f6":"markdown","5d5626dd":"markdown","96425e35":"markdown","196b95a2":"markdown"},"source":{"19deec86":"import os\nimport ast\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","35af970b":"train = pd.DataFrame()\nfor file in os.listdir('..\/input\/train_simplified\/'):\n    train = train.append(pd.read_csv('..\/input\/train_simplified\/' + file, index_col='key_id', nrows=1))","072dedad":"# You may choose the shape you want.\ndef drawing_to_np(drawing, shape=(64, 64)):\n    # evaluates the drawing array\n    drawing = eval(drawing)\n    fig, ax = plt.subplots()\n    # Close figure so it won't get displayed while transforming the set\n    plt.close(fig)\n    for x,y in drawing:\n        ax.plot(x, y, marker='.')\n        ax.axis('off')        \n    fig.canvas.draw()\n    # Convert images to numpy array\n    np_drawing = np.array(fig.canvas.renderer._renderer)\n    # If you want to take only one channel, you can try somethin like:\n    # np_drawing = np_drawing[:, :, 1]    \n    return cv2.resize(np_drawing, shape) # Resize array","7c83122e":"# One way you could apply the transformation to you dataset.\ntrain['drawing_np'] = train['drawing'].map(drawing_to_np)\ntrain['drawing_np2'] = train['drawing'].apply(drawing_to_np)","facd9682":"train.head(10)","4dd87216":"drawings = [ast.literal_eval(pts) for pts in train['drawing'].head(1).values]\n\nplt.figure(figsize=(10, 10))\nfor i, drawing in enumerate(drawings):\n    plt.subplot(330 + (i+1))\n    for x,y in drawing:\n        plt.plot(x, y, marker='.')\n        plt.axis('off')","951f0607":"# Function to plot images.\ndef plot_image(image_array):\n    fig2 = plt.figure()\n    ax2 = fig2.add_subplot(111, frameon=False)\n    ax2.imshow(image_array)\n    plt.axis('off')\n    plt.show()\n    print('Image shape:', image_array.shape)\n\nsample_1 = train['drawing_np'].values[0]\nplot_image(sample_1)","bdf822bf":"sample_2 = train['drawing_np2'].values[0]\nplot_image(sample_2)","8b20ce0c":"### Applying the function","9dd00e8b":"Now you can use your new features to feed your models, good luck!","6f9a6f82":"### Here I'll show one pretty simple way to convert the \"drawings\" into a numpy array that you can use to train your models.\n\n### Dependencies","4fa9a5f6":"Now the drawing with the generated with the function applied with the 2nd form.","5d5626dd":"### Let's look at the new features.\n\nFirst the original drawing","96425e35":"### Load data","196b95a2":"Now the drawing with the generated with the function applied with the 1st form."}}