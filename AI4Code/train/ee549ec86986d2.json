{"cell_type":{"9597530d":"code","5e700fd0":"code","2ecdcd23":"code","e4fdd147":"code","c75add4b":"code","e225eaa0":"code","62546413":"code","688fffef":"code","5bc7610c":"code","815a052f":"code","e6691f1f":"code","1cf5393c":"code","ec4b60f3":"markdown","488a67f9":"markdown","f8e8fe90":"markdown"},"source":{"9597530d":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom kerastuner.tuners import RandomSearch\nfrom tensorflow.keras.models import Sequential,Model\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import MaxPool2D\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom kerastuner.tuners import RandomSearch\nfrom glob import glob","5e700fd0":"!pip install -U keras-tuner","2ecdcd23":"print(tf.__version__)\nif tf.test.gpu_device_name():\n    print('Default GPU Device: {}'.format(tf.test.gpu_device_name()))\nelse:\n    print(\"Please install GPU version of TF\")","e4fdd147":"train_datagenerator = ImageDataGenerator(rescale = 1.0\/255,\n                                        shear_range = 0.2,\n                                        zoom_range = 0.5,\n                                        horizontal_flip = True,\n                                        rotation_range=10,\n                                        width_shift_range=0.2,\n                                        brightness_range=[0.2,1.2]\n                                        )\ntest_datagenerator = ImageDataGenerator(rescale = 1.0\/255)","c75add4b":"train_data = train_datagenerator.flow_from_directory('..\/input\/cotton-disease-dataset\/Cotton Disease\/train',\n                                                    target_size = (256,256),\n                                                    batch_size = 1951,\n                                                    class_mode = 'categorical')","e225eaa0":"test_data = test_datagenerator.flow_from_directory('..\/input\/cotton-disease-dataset\/Cotton Disease\/val',\n                                                  target_size = (256,256),\n                                                    batch_size = 1951,\n                                                    class_mode = 'categorical')\n","62546413":"train_img,train_lables = train_data.next()\ntest_img,test_lables = test_data.next()","688fffef":"test_img.shape","5bc7610c":"def build_model(hp):\n    cnn = tf.keras.models.Sequential()\n    # Convolution \n    cnn.add(tf.keras.layers.Conv2D(filters=hp.Int('conv_1_filter', min_value=64, max_value=128, step=16),\n                kernel_size=hp.Choice('conv_1_kernel', values = [3,5]),\n                activation='relu',\n                input_shape=(256,256,3)))\n    cnn.add(tf.keras.layers.Conv2D(filters=hp.Int('conv_2_filter', min_value=32, max_value=64, step=8),\n                kernel_size=hp.Choice('conv_1_kernel', values = [3,5]),activation='relu'))\n    # pooling\n    cnn.add(tf.keras.layers.MaxPool2D(pool_size=2,strides=2))\n    # Convolution\n    cnn.add(tf.keras.layers.Conv2D(filters=hp.Int('conv_2_filter', min_value=32, max_value=64, step=16),\n                                   kernel_size=hp.Choice('conv_1_kernel', values = [3,5]),activation='relu'))\n    cnn.add(tf.keras.layers.Conv2D(filters=hp.Int('conv_4_filter', min_value=32, max_value=64, step=8),\n                                   kernel_size=hp.Choice('conv_1_kernel', values = [3,5]),activation='relu'))\n    #pooling\n    cnn.add(tf.keras.layers.MaxPool2D(pool_size=2,strides=2))\n\n    #flaterning\n    cnn.add(tf.keras.layers.Flatten())\n    keras.layers.Dense(units=hp.Int('dense_1_units', min_value=64, max_value=128, step=16),activation='relu'),\n    keras.layers.Dense(units=hp.Int('dense_2_units', min_value=64, max_value=128, step=16),activation='relu'),\n    # Output layer\n    cnn.add(tf.keras.layers.Dense(units=4,activation='softmax'))\n    cnn.compile(optimizer=keras.optimizers.Adam(hp.Choice('learning_rate', values=[1e-2, 1e-3])),\n                  loss='categorical_crossentropy',metrics=['accuracy'])\n    return cnn","815a052f":"tuner = RandomSearch(\n    build_model,\n    objective='val_accuracy',\n    max_trials=5,\n    executions_per_trial=3,\n    directory='my_test',\n    project_name='helloworld')\n\ntuner.search(train_img,train_lables,\n             epochs=5,\n             validation_data=(test_img,test_lables),batch_size = 32)","e6691f1f":"model = tuner.get_best_models(num_models=1)\nmodel","1cf5393c":"tuner.results_summary()","ec4b60f3":"## Generating Data","488a67f9":"* ## Please upvote if you like the notebook and comment your suggestion which models should be added.","f8e8fe90":"When we use DataImageGenerator for Augmenting & Generating the Image data the problem we face is that we don't have seprate features and lables of the data,due to which we can not use Keras-tunner as it requires the lables as well.\n\nI did not found any resource on Internet explaing this so tried to use keras-tuner with DataImageGenerated, The code can be optimised later this is first try and it worked.\n\nI have created an Convlution Neural Network from Strach then use keras-tuner on it."}}