{"cell_type":{"d3f1efbf":"code","40fb03eb":"code","6fcd18b6":"code","699b2366":"code","b4fa9d74":"code","3164f30b":"code","f6e5be71":"code","2ef240bd":"code","f1fc25e4":"code","29a041fa":"code","a2c1b9cf":"code","16e944d8":"code","a0d7ee2c":"code","901093b1":"code","d5473ac9":"code","1a5ab69c":"code","fb1bb8b7":"markdown","41ed45d8":"markdown","ae4fe0af":"markdown","0b357908":"markdown","18d28aad":"markdown","aeb78bf3":"markdown","737c102e":"markdown","f0abc2b2":"markdown","19387e24":"markdown","c56adbc1":"markdown","ca6b0495":"markdown","d2daa4e5":"markdown","e34b1c93":"markdown"},"source":{"d3f1efbf":"%matplotlib inline\nimport matplotlib.pyplot as plt \nimport numpy as np\nfrom IPython import display\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os,platform,sys\nfrom datetime import datetime \nimport pandas as pd\nimport csv\nfrom time import time\nfrom lxml import html\nimport requests\nimport re\nimport os;\nfrom os import makedirs\n       \n\nfrom pathlib import Path\ndef clear():\n    display.clear_output(wait=True)\n    display.clear_output()   \n\ntry:\n    import mplfinance as mpl \nexcept:\n    !pip install mplfinance \n    import mplfinance as mpl \n    clear()\n\ntry:\n    import pandas_ta as ta\nexcept:\n    !pip install --upgrade pandas_ta\n    import pandas_ta as ta\n    clear()\n\n\ntry:\n    import yfinance as yf\nexcept:\n    print('Installing Yahoo...')\n    !pip install yfinance\n    import yfinance as yf\n    clear()\ntry:\n    import pyfolio as pf\nexcept:\n    print('Installing PyFolio...') \n    !pip install pyfolio\n    import pyfolio as pf\n    clear()\ntry:\n    import backtrader as bt\n    from backtrader_plotting import Bokeh\n    from backtrader_plotting.schemes  import Blackly,Tradimo \nexcept:\n    print('Installing Backtrader...') \n    !pip3 install backtrader\n    !pip3 install backtrader_plotting  \n    !pip3 install bokeh\n    import backtrader as bt\n    from backtrader_plotting import Bokeh\n    from backtrader_plotting.schemes import Blackly,Tradimo \n    clear()\n\ndef formatTime(t):\n    m_, s = divmod(t, 60)\n    h, m = divmod(m_, 60)\n    return f'{h:>02.0f}:{m:>02.0f}:{s:>02.0f}'\n\n\ndef plot_finance(period,title):\n    period.tail()\n    doji =  period.Doji.copy()\n    doji.loc[doji.loc[doji >0].index] =period.loc[doji[period.Doji >0].index,'High']+(period.loc[period[period.Doji >0].index,'High']*0.0025)\n    doji.loc[doji.loc[doji <=0].index] = np.nan\n    doji_index  = doji[doji >0].index\n    doji = doji.values\n    doji_days = [x[:16] for x in doji_index.astype(str)]\n    period.tail()\n    period_length = int(len(doji_days)\/len(period.index.year.unique()))\n    period_length\n    maxh = max(period.Close)\n    minh = min(period.Close)\n\n    histogram_colors = ['g' if v >= 0 else 'r' for v in period.Histogram]\n\n    addplot =[]\n    addplot.append(mpl.make_addplot(period.Macd, panel=1, color='fuchsia', width=0.7,secondary_y=False, ylabel=\"MACD\"))\n    addplot.append(mpl.make_addplot(period.Signal, panel=1, color='b',width=0.5,secondary_y=False,))\n    addplot.append(mpl.make_addplot(period.Histogram, panel=1, type='bar', width=0.9, color=histogram_colors,alpha=0.6,secondary_y=False))\n    addplot.append(mpl.make_addplot(period.Band_mid,width=0.5,secondary_y=False, color='blue'))\n    mpl.plot(period,type=\"candle\",style=\"yahoo\",title=title,figratio=(20,5),figsize= (20,5),figscale=2.5,\n                 vlines=dict(vlines=doji_days,colors=('silver'),linewidths=period_length,alpha=0.1),\n                 fill_between=dict(y1= period.Band_low.values,y2=period.Band_up.values,color='tan',alpha=0.2),\n                 addplot=addplot,tight_layout=True,mav=(5,13),mco_faceonly=False\n                 )\n\ndef plotSmallCaps(index):\n    current_symbol = symbols[index]\n    current_symbol,index\n    m = \"\ud83e\udd47\"\n    if index ==1:\n        m = \"\ud83e\udd48\"\n    elif  index ==2:\n        m = \"\ud83e\udd49\"\n    \n        \n    company = smallcaps_top[smallcaps_top.symbol==current_symbol].company.values[0]\n    print(f'{m} {index+1}  \u27a1\ufe0f {current_symbol} - {company}')\n    plot_finance(cotacoes[current_symbol].copy(),f'{current_symbol} - {company}')\n       \n#Importing libraries \nfrom bokeh.io import output_file,show,output_notebook,push_notebook\nfrom bokeh.plotting import figure\nfrom bokeh.models import ColumnDataSource,HoverTool,CategoricalColorMapper\nfrom bokeh.layouts import row,column,gridplot\nfrom bokeh.models.widgets import Tabs,Panel\n\nclear()\n\n","40fb03eb":"output_notebook() ","6fcd18b6":"class ADVFNSmallCaps:\n  '''ADVFNSmallCaps v1 - by Francke Peixoto''' \n  '''Criado pela BM&FBOVESPA, o SMLL (\u00cdndice BM&FBOVESPA Small Cap) tem por objetivo medir o comportamento das empresas negociadas na bolsa de valores de modo segmentado,aferindo o retorno de uma carteira composta por empresas de menor capitaliza\u00e7\u00e3o listadas no Mercado Bovespa.'''\n  def __init__(self):\n    self.urlBase = 'https:\/\/br.advfn.com\/small-caps'\n    self.smallCaps = []\n    self.__data = None\n    self.__scraping()\n  def __scraping(self):\n    if self.__data == None:\n      pass\n    user_agent = {'User-agent': 'Mozilla\/5.0'}\n    page = requests.get(self.urlBase,headers=user_agent)\n    tree = html.fromstring(page.content)\n    content = tree.xpath('\/\/div[@id=\"content\"]')[0]\n    tables = content.xpath('.\/\/table[@class=\"table_element_class\"]')\n    self.smallCaps =[]\n    for table in tables:\n      names = table.xpath('.\/\/tr\/td\/a\/@title')\n      links = table.xpath('.\/\/tr\/td\/a\/@href')\n      if len(names)>0:\n        for index, link in enumerate(links):  \n          match = re.search(r'[A-Z]{3,5}\\d{1,3}',link)\n          if match:      \n            symbol = match.group(0)\n            company = names[index]\n            company = company[company.find(' '):].strip()\n            self.smallCaps.append({'symbol': symbol,'company':company})\n    self.__data = pd.DataFrame(self.smallCaps)\n    self.__data = self.__data.drop_duplicates()\n  def get(self):\n    #Retorna um dataframe com os ultimos smallcaps listados no site da ADVFN.\n    return self.__data\nsmallcaps = ADVFNSmallCaps().get() \nsmallcaps_top = smallcaps.head(3).copy()\nsmallcaps_top.head()","699b2366":"#Per\u00edodo: 17\/Novembro\/201 \u00e0 28\/Janeiro\/2021\ndef cotacao_yahoo(symbol = None):\n    if symbol == None:\n        return None,None \n    data = yf.download(tickers = symbol+'.SA',start=\"2019-11-17\", end=\"2022-01-28\",interval = \"1d\",\n                       group_by = 'ticker',prepost = True,threads = True)\n\n    for c in  data.columns:\n        index = data[data[c].isna()].index\n        data.drop(index,inplace=True, axis=0)\n        data.drop_duplicates(inplace=True)\n    symbol_path = '\/kaggle\/working\/{}.csv'.format(symbol)\n    data.to_csv(symbol_path)\n    print(f'{symbol} - {data.shape} concluido!')\n    return symbol_path,data\n\ncotacoes ={}\nindex=0\nsymbols = smallcaps_top.symbol.unique()\nsmallcaps_top['path'] =''\nfor symbol in symbols:\n    path,data = cotacao_yahoo(symbol)\n    smallcaps_top.loc[smallcaps_top.symbol == symbol,'path'] = path\n    period_length = 20\n    bb9 = ta.bbands(data.Close,length=period_length,mamode='ema')\n    data[\"Band_low\"] = bb9[[h for h in bb9.columns if h.find('BBL')>=0]].values\n    data[\"Band_up\"] = bb9[[h for h in bb9.columns if h.find('BBU')>=0]].values \n    data[\"Band_mid\"] = bb9[[h for h in bb9.columns if h.find('BBM')>=0]].values \n    macd = data.ta.macd()\n    data['Macd'] = macd.MACD_12_26_9\n    data['Histogram'] = macd.MACDh_12_26_9\n    data['Signal'] = macd.MACDs_12_26_9\n    data['Doji'] = data.ta.cdl_pattern(name='doji')\n    data['Inside'] = data.ta.cdl_pattern(name='inside')\n   \n    cotacoes[symbol] = data.copy()\n    del data\nsmallcaps_top.head() #Essa lista muda conforme o mercado muda... :D","b4fa9d74":"plotSmallCaps(index)\nindex = index+1","3164f30b":"plotSmallCaps(index)\nindex = index+1\n","f6e5be71":"plotSmallCaps(index)\nindex = index+1","2ef240bd":"print('\u279c Volatilidade do mercado, varia\u00e7\u00e3o PnL')\ngerenciaRisco = pd.DataFrame()\ngerenciaRisco['Symbol'] = symbols\ngerenciaRisco['\u00cdndice Sharpe'] = .0\ngerenciaRisco['\u00cdndice Sharpe Anualizado'] = .0\nfor symbol in symbols:\n    data = cotacoes[symbol].copy()\n    dates = data.index\n    pnls = np.random.randint(-990, 1000, size=len(dates))\n    pnls = pnls.cumsum()\n    positions = np.random.randint(-1, 2, size=len(dates))\n    positions = positions.cumsum()\n    strategy_performance = pd.DataFrame(index=dates, data={'pnl': pnls, 'position': positions})\n    plt.legend(loc=\"upper left\")\n    strategy_performance['pnl'].plot(figsize=(20,5),grid=True,label=f'PnL {symbol}')\n    daily_pnl_series = strategy_performance['pnl'].shift(-1) - strategy_performance['pnl']\n    daily_pnl_series.fillna(0, inplace=True)\n    avg_daily_pnl = daily_pnl_series.mean()\n    std_daily_pnl = daily_pnl_series.std()\n    sharpe_ratio = avg_daily_pnl\/std_daily_pnl\n    annualized_sharpe_ratio = sharpe_ratio * np.sqrt(252)\n    annualized_sharpe_ratio\n    sharpe_ratio,annualized_sharpe_ratio\n    gerenciaRisco.loc[gerenciaRisco.Symbol==symbol,'\u00cdndice Sharpe'] = sharpe_ratio\n    gerenciaRisco.loc[gerenciaRisco.Symbol==symbol,'\u00cdndice Sharpe Anualizado'] = annualized_sharpe_ratio\n    ","f1fc25e4":"gerenciaRisco.head()","29a041fa":"estimativas = pd.DataFrame() \ndef estimate(data, price, k):\n    \"\"\"\n    Function returns the variance ratio, stat2 and number of observations\n    \n    Parameters:\n        data (pandas.DataFrame): dataframe containing the prices of the underlyings \n        price (str): column header of underlying to be analysed \n        T (int): interval of returns (e.g T = 2 is the 2-period returns)\n        \n    Returns:\n        tuple: containing variance ratio, stat2 and number of observations\n    \"\"\"\n    prices = data[price].to_numpy(dtype=np.float64)\n    log_prices = np.log(prices)\n    rets = np.diff(log_prices)\n    T = len(rets)\n    mu = np.mean(rets)\n    var_1 = np.var(rets, ddof=1, dtype=np.float64)\n    rets_k = (log_prices - np.roll(log_prices, k))[k:]\n    m = k * (T - k + 1) * (1 - k \/ T)\n    var_k = 1\/m * np.sum(np.square(rets_k - k * mu))\n\n    # Variance Ratio\n    vr = var_k \/ var_1\n    \n    # Phi2\n    def delta(j):\n        res = 0\n        for t in range(j+1, T+1):\n            t -= 1  # array index is t-1 for t-th element\n            res += np.square((rets[t]-mu)*(rets[t-j]-mu))\n        return res \/ ((T-1) * var_1)**2\n\n    phi2 = 0\n    for j in range(1, k):\n        phi2 += (2*(k-j)\/k)**2 * delta(j)\n\n    return vr, (vr - 1) \/ np.sqrt(phi2), T\n\ndef estimate_multiple_k(data, price, time_intervals,symbol):\n    \"\"\"\n    Function prints the results from estimate() for multiple time intervals as specified in time_intervals\n    Parameters:\n      data (pandas.DataFrame): dataframe containing the prices of the underlyings \n      price (str): column header of underlying to be analysed \n      time_intervals (list): list containing int respresenting intervals for returns\n      Returns:\n      null\n      \"\"\"\n    df = pd.DataFrame()\n    df['Symbol']=[symbol]\n    # Estimate different time_intervals.\n    for time_interval in time_intervals:\n        vr, stat2, T = estimate(data, price, time_interval)\n        df['Observations']= [int(T)]\n        df[f'VR for k({time_interval})'] = [vr]\n        df[f'HA for k({time_interval})']= [stat2]\n       #print(stat2)\n    return df \n#Heterocedasticidade significa dispers\u00e3o desigual\nfor symbol in symbols:\n    df = estimate_multiple_k(cotacoes[symbol], 'Close', [5,13,21],symbol)\n    estimativas =pd.concat([estimativas,df], ignore_index=True)\nestimativas.head(20).T \n                                        ","a2c1b9cf":"#criei uma estrat\u00e9gia b\u00e1sica com base na documenta\u00e7\u00e3o do pr\u00f3prio Backtrader...\n%matplotlib inline\nclass SmallCapStrategy(bt.Strategy):\n  params = (('macd_fast'  ,12),('macd_slow'  ,26), ('macd_signal',9),('ema_period'  ,20),('sma_period' ,10),('period'     ,5), ('trailpercent',0.6))\n  def log(self, txt, dt=None):\n    dt = dt or self.data.datetime.date(0)\n    print('%s, %s' % (dt, txt))\n\n  def __init__(self):\n    self.close = self.data.close \n    self.open = self.data.open    # Keep a reference to the \"close\" line in the data[0] dataseries\n    self.order = None # Property to keep track of pending orders.  There are no orders when the strategy is initialized.\n    self.buyprice = None\n    self.buycomm = None\n    self.sma_data = bt.indicators.SimpleMovingAverage(self.data, period=self.params.sma_period)\n    self.ema_data = bt.indicators.ExponentialMovingAverage(self.data, period=self.params.ema_period)\n    self.atr = bt.indicators.ATR(self.data, plot = False, period=self.params.period)\n    \n    self.macd = bt.indicators.MACD(self.data, period_me1=self.params.macd_fast, period_me2=self.params.macd_slow, period_signal=self.params.macd_signal)\n    self.macd_cross  = bt.indicators.CrossOver( self.macd.macd, self.macd.signal)\n       # Add ExpMA, WtgMA, StocSlow, MACD, ATR, RSI indicators for plotting.\n    bt.indicators.ExponentialMovingAverage(self.data, period=self.params.ema_period)\n    bt.indicators.SimpleMovingAverage(self.data, period=self.params.sma_period)\n    bt.indicators.WeightedMovingAverage(self.data, period=self.params.sma_period,subplot = True)\n    bt.indicators.StochasticSlow(self.data)\n    bt.indicators.MACDHisto(self.data)\n    rsi = bt.indicators.RSI(self.data)\n    bt.indicators.SmoothedMovingAverage(rsi, period=self.params.period)\n    bt.indicators.ATR(self.data, period=14)\n    bt.indicators.AverageDirectionalMovementIndex(self.data, period=self.params.period) \n  \n  def log(self, txt, dt=None):\n    dt = dt or self.datas[0].datetime.date(0)\n    print('{0},{1}'.format(dt.isoformat(),txt))\n\n  def notify_order(self, order):\n    if order.status in [order.Submitted, order.Accepted]:\n      return\n    if order.alive():\n      self.order = None\n    if order.status in [order.Completed]: \n      if order.isbuy():\n        self.buyprice = order.executed.price\n        self.buycomm = order.executed.comm      \n      self.bar_executed = len(self)\n    elif order.status in [order.Canceled, order.Margin, order.Rejected]:\n      self.log('Order Canceled\/Margin\/Rejected')\n        \n    self.order = None\n  def start(self):\n    self.order = None\n  def notify_trade(self,trade):\n    if not trade.isclosed:\n      return\n  \n  def next(self):\n    if self.order: \n      return\n      if self.macd_cross[0]>0.0 and self.close[0] < self.close[-1]:\n        self.order = self.buy()         \n    elif self.order is None:\n        self.order = self.sell(excetype=bt.Order.StopTrail, trailpercent=self.params.trailpercent)\n        tcheck = self.data.close * (1.0 -self.params.trailpercent )\n","16e944d8":"def backtesting_smallCaps(index):\n    current_symbol = symbols[index]\n    company = smallcaps_top[smallcaps_top.symbol==current_symbol].company.values[0]\n    symbol_path = smallcaps_top[smallcaps_top.symbol==current_symbol].path.values[0]\n    \n    m = \"\ud83e\udd47\"\n    if index ==1:\n        m = \"\ud83e\udd48\"\n    elif  index ==2:\n        m = \"\ud83e\udd49\"\n    print(f'{m} {index+1}  \u27a1\ufe0f {current_symbol} - {company}')\n    print(smallcaps_top[smallcaps_top.symbol==current_symbol])\n    df = pd.DataFrame()\n    df['Symbol']=[current_symbol]\n    cerebro = bt.Cerebro() \n    data_feed = bt.feeds.YahooFinanceCSVData(dataname=symbol_path)\n    cerebro.adddata(data_feed, name= current_symbol) \n    cerebro.addobserver(bt.observers.BuySell)\n    cerebro.addsizer(bt.sizers.FixedSize,stake=100)\n    cerebro.broker.setcash(100000.0) \n    cerebro.broker.setcommission(commission=0.000) \n\n    cerebro.addanalyzer(bt.analyzers.SQN, _name='sqn')\n    cerebro.addanalyzer(bt.analyzers.VWR, _name='vwr')\n    cerebro.addanalyzer(bt.analyzers.SharpeRatio, _name='sharpe_ratio')\n    cerebro.addanalyzer(bt.analyzers.TradeAnalyzer, _name='trade_analyzer')\n    cerebro.addstrategy(SmallCapStrategy) \n    df['Valor Inicial da Carteira'] = [cerebro.broker.getvalue()]\n    optimized_runs =cerebro.run()\n    df['Valor Final da Carteira'] = [cerebro.broker.getvalue()]\n    #optimized_runs = tem muita informa\u00e7\u00e3o para analise...\n    b = Bokeh(style='bar', plot_mode='single', scheme=Tradimo())\n    cerebro.plot(b)\n    return df\nindex = 0\nresultados = pd.DataFrame() ","a0d7ee2c":"%matplotlib inline\ndf = backtesting_smallCaps(index)\nresultados =pd.concat([resultados,df], ignore_index=True)\nindex = index+1","901093b1":"df = backtesting_smallCaps(index)\nresultados =pd.concat([resultados,df], ignore_index=True)\nindex = index+1","d5473ac9":"df = backtesting_smallCaps(index)\nresultados =pd.concat([resultados,df], ignore_index=True)\nindex = index+1","1a5ab69c":"format_dict = {'Valor Inicial da Carteira':'R$ {0:,.2f}', 'Valor Final da Carteira': 'R$ {0:,.2f}'}\nresultados.style.format(format_dict).set_caption('2019 \u00e0 2022 - Backtesting resultados').hide_index().bar(color='lightgray', vmin=max(resultados['Valor Final da Carteira']), subset=['Valor Final da Carteira'], align='zero')\n","fb1bb8b7":"\ud83e\udd41 Come\u00e7ando pelo come\u00e7o | Getstarting\n\n\u201cInvestidores que ainda n\u00e3o utilizam o backtesting v\u00e3o se surpreender com as in\u00fameras vantagens que ele resguarda\u201d \u2014 Mark Jurik (Computerized Trading)","41ed45d8":"\ud83e\udea3 **ADVFN SmallCaps Class**  (Top 3)\n\n> \ud83c\udde7\ud83c\uddf7  Retorna um dataframe com as maiores altas  da categoria Small Caps no site da ADVFN.\n\n> \ud83c\uddfa\ud83c\uddf8  Return a dataframe with the highest highs of the Small Caps category on the ADVFN.","ae4fe0af":"\u279c  **Gerando Estimativas | Estimates**\n\nUsei a fun\u00e7\u00e3o criada por \n[@XIANGYU WANG](https:\/\/www.kaggle.com\/xiangyuwang1995\/bmf5342-grouphw1-alphaseeker): **estimate_multiple_k**\n\n> * **HA:**  Heteroscedasticity Assumption\n> * **VR:** Variance Ratio \n","0b357908":"### Small Caps - Resultados","18d28aad":"\u279c **Quantitative Finance** \n\n\ud83c\udde7\ud83c\uddf7 A finan\u00e7a quantitativa possui em sua estrutura os seguintes componentes:\n\n\ud83c\uddfa\ud83c\uddf8 Quantitative finance has the following components in its structure:\n\n* Backtesting\n* Post-Trade Analytics [**(PTA)**](https:\/\/www.elearnmarkets.com\/blog\/importance-of-post-trade-analysis\/)\n* Sinal de pesquisa \n* Lucos e Perdas [**(PnL)**](https:\/\/www.investopedia.com\/terms\/p\/plstatement.asp)\n> **Pnl:** A vari\u00e2ncia PnL \u00e9 usada para medir a volatilidade no desempenho\/retorno da estrat\u00e9gia adotada.","aeb78bf3":"\ud83d\udc40 **Top 3** - Small Caps (ADVFN)  \nOlhada R\u00e1pida \/ Quick look ","737c102e":"\u2699\ufe0f **Setup...**","f0abc2b2":"\ud83e\uddee **Cota\u00e7\u00f5es\/quotes - Yahoo! Finance...**","19387e24":"## Small Caps\n\ud83c\udde7\ud83c\uddf7\n> \u270f\ufe0f  _\"O conceito de small cap n\u00e3o \u00e9 absoluto e definitivo. Normalmente, recebem essa alcunha as a\u00e7\u00f5es de empresas que t\u00eam uma capitaliza\u00e7\u00e3o de mercado menor do que a dos nomes mais tradicionais da bolsa de valores; Al\u00e9m de terem uma capitaliza\u00e7\u00e3o menor, as small caps tamb\u00e9m costumam ter **menos liquidez** \u2013 ou seja, s\u00e3o menos negociadas no mercado...\"_ [InfoMoney](https:\/\/www.infomoney.com.br\/guias\/small-caps\/)\n\n\ud83e\udd4a Muitas vezes uma descri\u00e7\u00e3o (ou defini\u00e7\u00e3o) como a das Small Caps, podem soar um pouco \u2018enganosa\u2019. Em geral, as empresas que s\u00e3o considerada Small Caps, tem um potencial de crescimento muito promissor; Se souber fazer um bom filtro, a probabilidade de encontrar bons ativos \u00e9 grande.   \ud83c\udf31\n\n\ud83d\udccd Com d\u00favidas sobre Small Caps?  A **B3** disponibilizou um **curso gratuito** em:  \n[TradeMap e B3 lan\u00e7am curso gratuito Investindo em Small Caps](https:\/\/www.b3.com.br\/pt_br\/noticias\/b3-lanca-curso-sobre-como-investir-em-small-caps-em-parceria-com-a-trademap.htm)).\n\n---\n\ud83c\uddfa\ud83c\uddf8\n> \u270f\ufe0f  _\"The concept of small cap is not absolute and definitive. The stock exchange is welcomed by all traditional companies as market stocks that have a lower market capitalization; In addition to having a smaller capitalization, small caps also tend to have **less liquidity** \u2013 that is, they are less traded on the market...\"_ [InfoMoney](https:\/\/www.infomoney.com.br\/guias\/small-caps\/)\n\n\ud83e\udd4a Often a description (or definition) like Small Caps can sound a little 'misleading'. In general, companies that are considered Small Caps have a very promising growth potential; If you know how to make a good filter, the probability of finding good assets is high. \ud83c\udf31\n\n\ud83d\udccd Do you have questions about Small Caps? **B3** has made available a **free course** in:  \n[TradeMap and B3 launch free course Investing in Small Caps](https:\/\/www.b3.com.br\/pt_br\/noticias\/b3-lanca-curso-sobre-como-investir-em-small-caps-em-parceria-com-a-trademap.htm)).\n\n![](https:\/\/www.b3.com.br\/lumis-theme\/br\/com\/bvmf\/internet\/theme\/bvmf-internet\/img\/logo-b3-novo.svg)\n\n","c56adbc1":"## Backtesting\n\ud83c\udde7\ud83c\uddf7\n> \u270f\ufe0f _\"Um backtest analisar\u00e1 o desempenho de uma estrat\u00e9gia em rela\u00e7\u00e3o a muitos fatores diferentes. Um backtest bem-sucedido mostrar\u00e1 aos traders uma estrat\u00e9gia que provou mostrar resultados positivos historicamente. Embora o mercado nunca se mova da mesma forma, o backtesting baseia-se na suposi\u00e7\u00e3o de que as a\u00e7\u00f5es se movem em padr\u00f5es semelhantes aos historicamente.\"_ [Corporate Finance Institute](https:\/\/corporatefinanceinstitute.com\/resources\/knowledge\/trading-investing\/backtesting\/)\n\n---\n\ud83c\uddfa\ud83c\uddf8 \n> \u270f\ufe0f _\"A backtest will analyze a strategy's performance against many different factors. A successful backtest will show traders a strategy that has proven to show positive results historically. While the market never moves the same way, backtesting is based on the assumption that stocks move in similar patterns as they have historically.\"_ [Corporate Finance Institute](https:\/\/corporatefinanceinstitute.com\/resources\/knowledge\/trading-investing\/backtesting\/)\n\n\ud83d\udca1 When we use a backtesting tool, we want to quickly and easily see if our strategy works in the real world; It gives us an understanding of how the strategy will behave in different environments; With that in hand, we can create insights on how to improve our strategy. \n","ca6b0495":"\u23f1\ufe0f **Vamos come\u00e7ar? | let's go?**\n\n\ud83c\udde7\ud83c\uddf7\n\nPara obter nossa lista de a\u00e7\u00f5es, usaremos os dados do site **ADVFN** para desenvolver o backtest.\n> **ADVFN Brasil:** Portal de investimentos em a\u00e7\u00f5es da bolsa de valores do Brasil, com cota\u00e7\u00f5es da Bovespa e BM&F.\n[https:\/\/br.advfn.com\/small-caps](https:\/\/br.advfn.com\/small-caps)\n\n\n\ud83d\udcc5  **Per\u00edodo:** 17\/Novembro\/**2019** \u00e0 28\/Janeiro\/**2021**\n\n\ud83d\udcb5 **Capital In\u00edcial:** R$ 100.000,00\n\n---\n\n\ud83c\uddfa\ud83c\uddf8\n\nFor our list of actions, we will use the data from the **ADVFN** site to develop the backtest.\n> **ADVFN Brasil:** Portal for investments in shares on the Brazilian stock exchange, with quotations from Bovespa and BM&F.\n\n\ud83d\udcc5  **Period:** 17\/November\/**2019** to 28\/January\/**2021**\n\n\ud83d\udcb5 **Initial capital :** R$ 100.000,00  [(REAL currency)](https:\/\/pt.wikipedia.org\/wiki\/Real_(moeda_brasileira))","d2daa4e5":"## Backtrader\n\ud83c\udde7\ud83c\uddf7 \n> \u270f\ufe0f Backtrader \u00e9 uma biblioteca escrita em python usada no desenvolvimento de estrat\u00e9gias e **Backtesting**  e negocia\u00e7\u00f5es no mercados financeiros. Sua curva de aprendizado \u00e9 bem f\u00e1cil, ela possui uma documenta\u00e7\u00e3o bastante organizada e de f\u00e1cil entendimento. [Backtrader - Quickstart](https:\/\/www.backtrader.com\/docu\/quickstart\/quickstart\/)\n\n\ud83e\udde0 O Backtrader \u00e9 constituido por uma arquitetura conhecida como Cerebro, onde \u00e9 representada os principais componentes do fluxo de trabalho. Uma inst\u00e2ncia do objeto Cerebro orquestra o processo geral de coleta de dados.\n\n---\n\n\ud83c\uddfa\ud83c\uddf8 \n> \u270f\ufe0f Backtrader is a library written in python used in the development of strategies and **Backtesting** and trading in the financial markets. Its learning curve is very easy, it has a very organized and easy to understand documentation. [Backtrader - Quickstart](https:\/\/www.backtrader.com\/docu\/quickstart\/quickstart\/)\n\n\ud83e\udde0 Backtrader is made up of an architecture known as **Cerebro**, where the main components of the workflow are represented.\nAn instance of the Cerebro object orchestrates the overall data collection process.\n\n\n<img src='https:\/\/i.imgur.com\/MTp7UaQ.png' style='width:550px!important' width=\"550px\" \/>\n\n---\n\n**Data feeds, lines e indicators**\n> Os feeds de dados s\u00e3o a mat\u00e9ria-prima de uma estrat\u00e9gia, ele possui informa\u00e7\u00f5es importantes, como dados de mercado OHLCV, que pode ser personalizado facilmente.\n \n**Strategy, sinais para negocioa\u00e7\u00e3o**\n> O objeto Strategy possui a logia de negocia\u00e7\u00e3o que coloca ordens com base nas informa\u00e7\u00f5es de **feed de dados** que a inst\u00e2ncia **Cerebro** apresenta em cada barra durante a execu\u00e7\u00e3o.\n\n***Commissions, schema de comiss\u00f5es.**\n> O objetivo \u00e9 avaliar os pontos de dados atuais e passados em cada barra de negocia\u00e7\u00e3o, ela precisa decidir quais pedidos colocar. Nesse ponto, \u00e9 criado as ordens que o Cerebro passa para uma inst\u00e2ncia do Broker em execu\u00e7\u00e3o e fornece uma notifica\u00e7\u00e3o do resultado em cada barra.\n\nVoc\u00ea pode usar os m\u00e9todos de estrat\u00e9gia **buy()** e **sell()** para colocar ordens de mercado, fechamento e limite, bem como ordens de para e limite de parada.\n\n\n*   **Market order:** \u00e8 preenchido na pr\u00f3xima barra aberta.\n*   **Close order:**  \u00e8 preenchido na pr\u00f3xima barra fechada.\n*   **Limit order:**  \u00e9 executada apenas se um limite de pre\u00e7o for atingido.\n*   **Stop order:**   \u00e9 uma ordem de mercado se o pre\u00e7o atingir um determinado limite.\n*   **Stop limit order:** \u00e9 uma ordem limitada assim que o stop \u00e9 acionado *(gatilho)*.\n","e34b1c93":"\u279c **Indice Sharpe \/ trade-level**\n\n> \ud83c\udde7\ud83c\uddf7 O \u00cdndice Sharpe no n\u00edvel de negocia\u00e7\u00e3o compara os retornos da estrat\u00e9gia (PnL m\u00e9dios) em rela\u00e7\u00e3o aos desvios padr\u00f5es da volatilidade da estrat\u00e9gia (Desvio padr\u00e3o dos PnL).\n\n> \ud83c\uddfa\ud83c\uddf8 The Sharpe Ratio at the trading level compares the strategy's returns (average PnL) against the standard deviations of the strategy's volatility (PnL standard deviation).\n \n ---\n \ud83c\udde7\ud83c\uddf7 \n \u279c **Taxa do Indice Sharpe**\n > \u00c9 assumido que a taxa \u00e9 livre de risco se for 0, pois n\u00e3o rolamos as posi\u00e7\u00f5es, portanto n\u00e3o h\u00e1 cobran\u00e7a de juros; Essa suposi\u00e7\u00e3o \u00e9 realista para negocia\u00e7\u00e3o intradi\u00e1ria ou di\u00e1ria.\n\n---\n \ud83c\uddfa\ud83c\uddf8\ud83c\uddf7 \n \u279c **Sharpe Index Rate**\n > The rate is assumed to be risk-free if it is 0, as we do not roll positions, so interest is not charged; This assumption is realistic for intraday or daily trading.\n\n|Taxa     |Significado            |\n| ---:    |   :---                |\n| >=3.0   | Excelente\/Excellent   |\n| > 1.5   | Muito Bom\/Very good   |\n| > 1.0   | Aceit\u00e1vel\/Good        |\n| < 1.0   | Considerado Sub-\u00f3timo |"}}