{"cell_type":{"5b8486a2":"code","abbd1078":"code","6bcffa66":"code","17082fa1":"code","5d54effd":"code","7a759dfd":"code","10479f8e":"code","c9f0e2b4":"code","c3f3578b":"code","b2a181b1":"code","95e1ddc8":"code","24995178":"code","fcaadedb":"code","20e75b4b":"code","b06904df":"code","093b7639":"code","754c8e35":"code","1afe6306":"code","45e2a432":"code","43ba38d9":"code","74ab4664":"code","b63199c3":"code","7bf7b01b":"code","22d36aae":"code","5879ae66":"code","e7ced73c":"code","0006a121":"code","da6668e2":"code","0f5a39ca":"code","0c227bfd":"code","552af963":"code","4586b59a":"code","5b14d053":"code","e7cdd8ec":"code","481e7b0f":"code","3ef397b2":"code","38ae25a0":"code","a402c94f":"code","98e0b4dc":"code","ce6d1cf1":"code","859ab1bd":"code","8770f8c0":"code","919467d7":"code","9039499c":"code","a7a6c2f4":"code","f31bed10":"code","b55bc291":"code","72aae718":"code","0d198c0f":"code","eb11829c":"code","ef3631c5":"code","d4b0752b":"code","591a0d5f":"code","1d06ab95":"code","58f57ce8":"code","d7ddf36a":"code","827479f6":"code","f307ce3e":"code","2844aa37":"code","97668dd9":"code","3ad798c0":"code","c8fc6c82":"code","5ca836c2":"code","c9ef693a":"code","4156850d":"code","e9b73a1f":"code","0b556aea":"code","bde0deb5":"code","fb61859f":"code","a78beca8":"code","d64af745":"code","7a28becf":"code","41cbe438":"code","4123c1a3":"code","9d00bab0":"code","0dbe80d7":"code","2e8f15ba":"code","09e700ad":"code","23e23b50":"code","57d849ac":"code","68731193":"code","f96c6040":"code","e3fd017d":"code","40c07b54":"code","a63022c4":"code","2d8139d2":"code","a28eb082":"code","01706987":"code","74198edc":"code","d71604ef":"code","601731d2":"code","4f4b6fc7":"code","2d07aa3b":"code","05ee8a42":"code","a6c3a5cd":"code","41ea1ea9":"code","608b6b3a":"code","31ca1481":"code","5b8a0236":"markdown","1db44fb2":"markdown","78126ab9":"markdown","737c01a9":"markdown","f8a0be34":"markdown","32d9886d":"markdown","54a24bbf":"markdown","70fc6f0f":"markdown","7e6a7f7c":"markdown","4d74f80f":"markdown","c3856763":"markdown","f1c588e7":"markdown","8661f236":"markdown","1397e881":"markdown","66917763":"markdown","602f00e3":"markdown"},"source":{"5b8486a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","abbd1078":"# Load the Pandas libraries with alias 'pd' \nimport pandas as pd \n# Read data from file 'filename.csv' \n# (in the same directory that your python process is based)\n# Control delimiters, rows, column names with read_csv (see later) \ntitanic = pd.read_csv(\"..\/input\/train.csv\") \ntitanic_t = pd.read_csv(\"..\/input\/test.csv\")","6bcffa66":"titanic.head()","17082fa1":"titanic['Sex'].value_counts()","5d54effd":"titanic.info()","7a759dfd":"titanic.describe()","10479f8e":"titanic = titanic.drop(['Cabin'], axis=1)\ntitanic_t = titanic_t.drop(['Cabin'], axis=1)","c9f0e2b4":"plt.figure(figsize = (20,10))\nplt.hist(titanic['Age'], bins = 50)","c3f3578b":"fare_mean = titanic['Fare'].mean()","b2a181b1":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age","95e1ddc8":"titanic['Age'] = titanic[['Age','Pclass']].apply(impute_age,axis=1)\ntitanic_t['Age'] = titanic_t[['Age','Pclass']].apply(impute_age,axis=1)\n# fill na in Age with meidan\ntitanic_t['Fare'] = titanic_t['Fare'].fillna(fare_mean)","24995178":"titanic['Embarked'].value_counts()","fcaadedb":"#fill na in Embarked with most frequent value\ntitanic['Embarked'] = titanic['Embarked'].fillna('S')\n#fill na in Embarked with most frequent value\ntitanic_t['Embarked'] = titanic_t['Embarked'].fillna('S')","20e75b4b":"# make sure that there are no null values\ntitanic.info()","b06904df":"titanic.head()","093b7639":"titanic = titanic.drop(['PassengerId', 'Ticket'], axis=1)\ntitanic_t = titanic_t.drop(['PassengerId', 'Ticket'], axis=1)","754c8e35":"titanic.head()","1afe6306":"titanic['With_someone'] = titanic['SibSp'] | titanic['Parch']\ntitanic_t['With_someone'] = titanic_t['SibSp'] | titanic_t['Parch']","45e2a432":"titanic['With_someone'] = titanic['With_someone'].apply(lambda x:1 if x >=1 else 0)\ntitanic_t['With_someone'] = titanic_t['With_someone'].apply(lambda x:1 if x >=1 else 0)","43ba38d9":"titanic['With_someone'].unique()","74ab4664":"titanic['Title'] = titanic['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntitanic_t['Title'] = titanic_t['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntitanic['Title'].value_counts()","b63199c3":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\n\ntitanic['Title'] = titanic['Title'].map(title_mapping)\ntitanic_t['Title'] = titanic_t['Title'].map(title_mapping)","7bf7b01b":"titanic = titanic.drop(['Name'], axis=1)\ntitanic_t = titanic_t.drop(['Name'], axis=1)","22d36aae":"plt.hist(titanic['SibSp'])","5879ae66":"plt.hist(titanic['Parch'])","e7ced73c":"titanic['family members'] = titanic['SibSp'] + titanic['Parch'] + 1\ntitanic_t['family members'] = titanic_t['SibSp'] + titanic_t['Parch'] + 1","0006a121":"sns.distplot(titanic['Age'])","da6668e2":"def age(x):\n    if x < 5:\n        return 'infant'\n    elif x < 19:\n        return 'adolescence'\n    elif x < 35:\n        return 'young adulthood'\n    elif x < 51:\n        return 'adulthood'\n    else:\n        return 'Mature adulthood'","0f5a39ca":"titanic.head()","0c227bfd":"titanic.head()","552af963":"plt.figure(figsize = (20, 5))\nsns.distplot(titanic['Fare'])","4586b59a":"titanic[titanic['Fare'] > 100].shape","5b14d053":"def fare(x):\n    if x == 0:\n        return 'Stowaway'\n    if x < 7:\n        return 'cheap'\n    elif x < 10:\n        return 'mid-cheap'\n    elif x < 15:\n        return 'high cheap'\n    elif x < 20:\n        return 'medium'\n    elif x < 50:\n        return 'high'\n    else:\n        return 'very high'","e7cdd8ec":"titanic.head()","481e7b0f":"titanic.head()","3ef397b2":"titanic.head()","38ae25a0":"titanic = pd.get_dummies(titanic, columns = ['Pclass', 'Sex', 'Embarked', 'Title'], drop_first = True)\ntitanic_t = pd.get_dummies(titanic_t, columns = ['Pclass', 'Sex', 'Embarked', 'Title'], drop_first = True)","a402c94f":"titanic.head()","98e0b4dc":"titanic = titanic.drop(['SibSp', 'Parch', 'Age'], axis=1)\ntitanic_t = titanic_t.drop(['SibSp', 'Parch', 'Age'], axis=1)","ce6d1cf1":"X = titanic.drop(['Survived'], axis=1)\ny = titanic['Survived']","859ab1bd":"X_t = titanic_t","8770f8c0":"X.head()","919467d7":"X_scale = X[['Fare', 'family members']]\nX_noscale = X.drop(['Fare', 'family members'], axis=1)\n\nX_scale_t = X_t[['Fare', 'family members']]\nX_noscale_t = X_t.drop(['Fare', 'family members'], axis=1)","9039499c":"X_noscale.head()","a7a6c2f4":"from sklearn.preprocessing import MinMaxScaler\nsc_X = MinMaxScaler()\nX_scaled = sc_X.fit_transform(X_scale)\nX_scaled_t = sc_X.fit_transform(X_scale_t)","f31bed10":"X_scaled = pd.DataFrame(X_scaled, columns=['Fare', 'family members'])\nX_scaled_t = pd.DataFrame(X_scaled_t, columns=['Fare', 'family members'])","b55bc291":"X = pd.concat([X_scaled, X_noscale], axis=1)\nX_t = pd.concat([X_scaled_t, X_noscale_t], axis=1)","72aae718":"X.head()","0d198c0f":"k_range = [4]\nweight_options = ['uniform']\nnorm = [1]\nalgo = ['ball_tree']","eb11829c":"param_grid = dict(n_neighbors = k_range, weights = weight_options, p = norm, algorithm = algo)\nparam_grid","ef3631c5":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV","d4b0752b":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()","591a0d5f":"grid_knn = GridSearchCV(knn, param_grid, cv = 10, scoring='accuracy', return_train_score=False)\ngrid_knn.fit(X, y)","1d06ab95":"grid_knn.best_params_","58f57ce8":"grid_knn.best_score_","d7ddf36a":"from sklearn.ensemble import RandomForestClassifier\nforest_clf = RandomForestClassifier()","827479f6":"param_grid = dict(n_estimators = [10], criterion = ['gini'], max_depth = [135, 140, 145])","f307ce3e":"grid_forest = GridSearchCV(forest_clf, param_grid, cv = 10, scoring='accuracy', return_train_score=False)\ngrid_forest.fit(X, y)","2844aa37":"grid_forest.best_params_","97668dd9":"grid_forest.best_score_","3ad798c0":"from sklearn import svm\nclf = svm.SVC(probability = False)","c8fc6c82":"param_grid = dict(C = [34], kernel = ['poly'], gamma = ['scale'], degree = [2])\nparam_grid","5ca836c2":"grid_svm = GridSearchCV(clf, param_grid, cv = 10, scoring='accuracy', return_train_score=True)\ngrid_svm.fit(X, y)\n","c9ef693a":"grid_svm.best_params_","4156850d":"grid_svm.best_score_","e9b73a1f":"from sklearn.linear_model import LogisticRegression","0b556aea":"clf_lr = LogisticRegression()","bde0deb5":"param_grid = dict(penalty = ['l2'], solver = ['newton-cg', 'lbfgs'])\nparam_grid","fb61859f":"grid_lr = RandomizedSearchCV(clf_lr, param_grid, cv = 10, scoring='accuracy', return_train_score=True, n_iter=150)\ngrid_lr.fit(X, y)","a78beca8":"grid_lr.best_params_","d64af745":"grid_lr.best_score_","7a28becf":"from sklearn.tree import DecisionTreeClassifier","41cbe438":"clf_dt = DecisionTreeClassifier()","4123c1a3":"param_grid = dict(criterion = ['entropy'], max_depth = [6])\nparam_grid\n#[2, 5, 10, 30, 50, 100]","9d00bab0":"grid_tree = GridSearchCV(clf_dt, param_grid, cv = 10, scoring='accuracy', return_train_score=False)\ngrid_tree.fit(X, y)","0dbe80d7":"grid_tree.best_params_","2e8f15ba":"grid_tree.best_score_","09e700ad":"from sklearn.ensemble import GradientBoostingClassifier","23e23b50":"clf_gb = GradientBoostingClassifier()","57d849ac":"param_grid = dict(loss = ['exponential'], learning_rate = [0.2], n_estimators = [21], max_depth = [4])\nparam_grid","68731193":"grid_gb = GridSearchCV(clf_gb, param_grid, cv = 10, scoring='accuracy', return_train_score=False)\ngrid_gb.fit(X, y)","f96c6040":"grid_gb.best_params_","e3fd017d":"grid_gb.best_score_","40c07b54":"from sklearn.ensemble import AdaBoostClassifier","a63022c4":"clf_ab = AdaBoostClassifier()","2d8139d2":"param_grid = dict(n_estimators = [65], algorithm = ['SAMME'])\nparam_grid","a28eb082":"grid_ab = GridSearchCV(clf_ab, param_grid, cv = 10, scoring='accuracy', return_train_score=False)\ngrid_ab.fit(X, y)","01706987":"grid_ab.best_params_","74198edc":"grid_ab.best_score_","d71604ef":"from sklearn.ensemble import VotingClassifier","601731d2":"eclf_hard = VotingClassifier(estimators = [('knn', grid_knn), ('forest', grid_forest), ('svm', grid_svm),\n                                     ('Logistic', grid_lr), ('tree', grid_tree),\n                                      ('GradientBoost', grid_gb), \n                                          ('AdaBoost', grid_ab)], voting='hard', weights=[2, 1, 2.5, 0.8, 3, 3.5, 1])","4f4b6fc7":"eclf_hard = eclf_hard.fit(X, y)","2d07aa3b":"y_pred = eclf_hard.predict(X_t)","05ee8a42":"sub = pd.DataFrame(y_pred, columns=['Survived'])","a6c3a5cd":"titanic = pd.read_csv(\"..\/input\/test.csv\")","41ea1ea9":"submission = pd.concat([titanic['PassengerId'], sub], axis=1)","608b6b3a":"submission.head()","31ca1481":"submission.to_csv('sub.csv', index=False)","5b8a0236":"## KNN","1db44fb2":"## Ada Boost","78126ab9":"# One hot Encoding","737c01a9":"# Data Preprocessing","f8a0be34":"## Decision tree (try to overfit) ","32d9886d":"### Drop 'Ticket' and PassengerID' columns","54a24bbf":"# Classification model","70fc6f0f":"# Ensemble hard Voting","7e6a7f7c":"## SVM","4d74f80f":"# Feature Scaling","c3856763":"# Feature Engineering","f1c588e7":"Age stages from: https:\/\/hhpolishinginc.com\/74084_erik_erikson_developmental_stages_chart_ideas\/","8661f236":"## Random Forest","1397e881":"# Prediction and Submission","66917763":"## logistic regression","602f00e3":"## Gradient Boost"}}