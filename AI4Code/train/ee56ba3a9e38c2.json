{"cell_type":{"e03c45cb":"code","fdf7f599":"code","b4ccd77e":"code","8447649c":"code","50c80f75":"code","c7f7c588":"code","851c3fc8":"code","dcee0127":"code","be10ecdf":"code","5ffadead":"code","389ed4e3":"code","3d16fe68":"code","5b3b5cf6":"code","d0e25cd8":"code","6737383f":"code","baac0ce6":"code","f3d23ad8":"code","9890d03c":"code","46f74003":"code","31a785c6":"code","6c9eedd7":"markdown","8b001024":"markdown","7cbe29d1":"markdown"},"source":{"e03c45cb":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mplimg\nfrom matplotlib.pyplot import imshow\n\nfrom keras import optimizers\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom keras import layers\nfrom keras.preprocessing import image\nfrom keras.applications.imagenet_utils import preprocess_input\nfrom keras.layers import Input, Dense, Activation, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import AveragePooling2D, MaxPooling2D, Dropout\nfrom keras.models import Model\n\nimport keras.backend as K\nfrom keras.models import Sequential\n\nimport warnings\nwarnings.simplefilter(\"ignore\", category=DeprecationWarning)","fdf7f599":"train_df = pd.read_csv(\"..\/input\/humpback-whale-identification\/train.csv\")\ntrain_df.head()","b4ccd77e":"\nplt.figure(figsize=(25,25))\nax1=plt.subplot(5, 2, 1)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/train\/\"+train_df['Image'][0])\nprint(train_df['Id'][0])\nimshow(img)\n\nax1=plt.subplot(5, 2, 2)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/train\/\"+train_df['Image'][1])\nprint(train_df['Id'][1])\nimshow(img)\n\n\nax1=plt.subplot(5, 2, 3)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/train\/\"+train_df['Image'][2])\nprint(train_df['Id'][2])\nimshow(img)\n\n\nax1=plt.subplot(5, 2, 4)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/train\/\"+train_df['Image'][3])\nprint(train_df['Id'][3])\nimshow(img)\n\nax1=plt.subplot(5, 2, 5)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/train\/\"+train_df['Image'][4])\nprint(train_df['Id'][4])\nimshow(img)\n\n\nax1=plt.subplot(5, 2, 6)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/train\/\"+train_df['Image'][5])\nprint(train_df['Id'][5])\nimshow(img)\n\n\nax1=plt.subplot(5, 2, 7)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/train\/\"+train_df['Image'][6])\nprint(train_df['Id'][6])\nimshow(img)\n\n\n\nax1=plt.subplot(5, 2, 8)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/train\/\"+train_df['Image'][7])\nprint(train_df['Id'][7])\nimshow(img)\n\n\nax1=plt.subplot(5, 2, 9)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/train\/\"+train_df['Image'][8])\nprint(train_df['Id'][8])\nimshow(img)\n\n\nax1=plt.subplot(5, 2, 10)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/train\/\"+train_df['Image'][9])\nprint(train_df['Id'][9])\nimshow(img)","8447649c":"from progressbar import ProgressBar\n\n\ndef prepareImages(data, m, dataset):\n    pbar = ProgressBar()\n    X_train = np.zeros((m, 100, 100, 3))\n    count = 0\n    \n    for fig in pbar(data['Image']):\n        #load images into images of size 100x100x3\n        img = image.load_img(\"..\/input\/humpback-whale-identification\/\"+dataset+\"\/\"+fig, target_size=(100, 100, 3))\n        x = image.img_to_array(img)\n        x = preprocess_input(x)\n\n        X_train[count] = x\n        count += 1\n    \n    return X_train\n\ndef prepare_labels(y):\n    values = np.array(y)\n    label_encoder = LabelEncoder()\n    integer_encoded = label_encoder.fit_transform(values)\n    # print(integer_encoded)\n\n    onehot_encoder = OneHotEncoder(sparse=False)\n    integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)\n    onehot_encoded = onehot_encoder.fit_transform(integer_encoded)\n    # print(onehot_encoded)\n\n    y = onehot_encoded\n    # print(y.shape)\n    return y, label_encoder","50c80f75":"X = prepareImages(train_df, train_df.shape[0], \"train\")\nX \/= 255","c7f7c588":"y_train, label_encoder = prepare_labels(train_df['Id'])","851c3fc8":"y_train.shape","dcee0127":"from pathlib import Path\n\nfrom tqdm import tqdm\nfrom keras import applications\n\nweights = Path('..\/input\/xception-weight\/xception_weights_tf_dim_ordering_tf_kernels_notop (1).h5')\n# base_model = applications.inception_resnet_v2.InceptionResNetV2(include_top=False, weights=weights, input_shape=(100, 100, 3) )#input_tensor=None, input_shape=None, pooling=None, classes=1000)\nbase_model =applications.xception.Xception(input_shape=(100, 100, 3), include_top=False, weights=weights)## set model architechture\nx = base_model.output\nx = Flatten()(x)\nx = Dense(256, activation='relu')(x)\nx = Dense(256, activation='relu')(x)\npredictions = Dense(y_train.shape[1], activation='softmax')(x) \nmodel = Model(input=base_model.input, output=predictions)\n\nmodel.compile(loss='categorical_crossentropy', optimizer=optimizers.Adam(lr=1e-4),\n              metrics=['accuracy'])\n\nmodel.summary()","be10ecdf":"from keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(\n        rotation_range=0,\n        width_shift_range=0,\n        height_shift_range=0,\n        shear_range=0,\n        zoom_range=0,\n        vertical_flip=True,\n        horizontal_flip=True)\n\ntrain_datagen.fit(X)","5ffadead":"history = model.fit_generator(\n    train_datagen.flow(X, y_train, batch_size=100),\n    steps_per_epoch=10,\n    epochs=1000\n)","389ed4e3":"plt.plot(history.history['loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.show()","3d16fe68":"plt.plot(history.history['acc'])\nplt.title('Model categorical accuracy')\nplt.ylabel('categorical accuracy')\nplt.xlabel('Epoch')\nplt.show()","5b3b5cf6":"test = os.listdir(\"..\/input\/humpback-whale-identification\/test\/\")\nprint(len(test))","d0e25cd8":"col = ['Image']\ntest_df = pd.DataFrame(test, columns=col)\ntest_df['Id'] = ''","6737383f":"X = prepareImages(test_df, test_df.shape[0], \"test\")\nX \/= 255","baac0ce6":"predictions = model.predict(np.array(X), verbose=1)","f3d23ad8":"for i, pred in enumerate(predictions):\n    test_df.loc[i, 'Id'] = ' '.join(label_encoder.inverse_transform(pred.argsort()[-5:][::-1]))","9890d03c":"test_df.head(10)","46f74003":"test_df.to_csv('ans.csv', index=False)","31a785c6":"\nplt.figure(figsize=(25,25))\nax1=plt.subplot(5, 2, 1)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/test\/\"+test_df['Image'][0])\nprint(test_df['Id'][0])\nimshow(img)\n\nax1=plt.subplot(5, 2, 2)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/test\/\"+test_df['Image'][1])\nprint(test_df['Id'][1])\nimshow(img)\n\n\nax1=plt.subplot(5, 2, 3)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/test\/\"+test_df['Image'][2])\nprint(test_df['Id'][2])\nimshow(img)\n\n\nax1=plt.subplot(5, 2, 4)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/test\/\"+test_df['Image'][3])\nprint(test_df['Id'][3])\nimshow(img)\n\nax1=plt.subplot(5, 2, 5)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/test\/\"+test_df['Image'][4])\nprint(test_df['Id'][4])\nimshow(img)\n\n\nax1=plt.subplot(5, 2, 6)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/test\/\"+test_df['Image'][5])\nprint(test_df['Id'][5])\nimshow(img)\n\n\nax1=plt.subplot(5, 2, 7)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/test\/\"+test_df['Image'][6])\nprint(test_df['Id'][6])\nimshow(img)\n\n\n\nax1=plt.subplot(5, 2, 8)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/test\/\"+test_df['Image'][7])\nprint(test_df['Id'][7])\nimshow(img)\n\n\nax1=plt.subplot(5, 2, 9)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/test\/\"+test_df['Image'][8])\nprint(test_df['Id'][8])\nimshow(img)\n\n\nax1=plt.subplot(5, 2, 10)\nimg = image.load_img(\"..\/input\/humpback-whale-identification\/test\/\"+test_df['Image'][9])\nprint(test_df['Id'][9])\nimshow(img)","6c9eedd7":"Let us perform data Agumentation to increase the number of training points","8b001024":"## This means that there are 5005 classes","7cbe29d1":"Now we will simply add the predicted labels into the test dataframe"}}