{"cell_type":{"21836f17":"code","3f23d4be":"code","80f59030":"code","3a53fb06":"code","9f914c3e":"code","072480ee":"code","5dd4f9ed":"code","13a54bab":"code","cadc6c78":"code","4afc9b5f":"code","ca2a373d":"code","d0680dfb":"code","e1422e24":"code","d154bdb2":"code","c31662c9":"code","914e221b":"code","2716511a":"code","1325ab25":"code","353edd2c":"code","845a1b35":"code","7a153e0f":"code","2fc81814":"code","cfc4eadf":"code","97c43fbb":"code","f5a448a1":"code","ef7d2ad6":"code","60c9e1f4":"code","156c83de":"code","4ad2db71":"code","cc3a80c0":"code","146db761":"code","aa8c3f8a":"code","e448d428":"code","2dfbf421":"markdown","12cb05fb":"markdown","09837855":"markdown","da4385a3":"markdown","08580aee":"markdown","a092388c":"markdown","e592619e":"markdown","444cc927":"markdown","0cb4359a":"markdown","33a97a93":"markdown","ded85229":"markdown","eb008dd6":"markdown","49759bcc":"markdown","ac0d132d":"markdown","6939fd3a":"markdown","d78d925d":"markdown","92f7ee2d":"markdown","c47b854b":"markdown"},"source":{"21836f17":"from sklearn import cross_validation\nfrom sklearn import tree\nfrom sklearn import svm\nfrom sklearn import ensemble\nfrom sklearn import neighbors\nfrom sklearn import linear_model\nfrom sklearn import metrics\nfrom sklearn import preprocessing","3f23d4be":"%matplotlib inline \n\nfrom IPython.display import Image\nimport matplotlib as mlp\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport sklearn\nimport seaborn as sns\n","80f59030":"#df = pd.read_csv('..\/input\/mytest.csv')\ndf = pd.read_csv('..\/input\/bigml_59c28831336c6604c800002a.csv')\n\nprint (df.shape)\n\n#df.dtypes","3a53fb06":"# Load data\ndf.head(3)","9f914c3e":"y = df[\"churn\"].value_counts()\n#print (y)\nsns.barplot(y.index, y.values)","072480ee":"y_True = df[\"churn\"][df[\"churn\"] == True]\nprint (\"Churn Percentage = \"+str( (y_True.shape[0] \/ df[\"churn\"].shape[0]) * 100 ))","5dd4f9ed":"    df.describe()","13a54bab":"df.groupby([\"state\", \"churn\"]).size().unstack().plot(kind='bar', stacked=True, figsize=(30,10)) ","cadc6c78":"df.groupby([\"area code\", \"churn\"]).size().unstack().plot(kind='bar', stacked=True, figsize=(5,5)) ","4afc9b5f":"df.groupby([\"international plan\", \"churn\"]).size().unstack().plot(kind='bar', stacked=True, figsize=(5,5)) ","ca2a373d":"df.groupby([\"voice mail plan\", \"churn\"]).size().unstack().plot(kind='bar', stacked=True, figsize=(5,5)) ","d0680dfb":"# Discreet value integer encoder\nlabel_encoder = preprocessing.LabelEncoder()","e1422e24":"# State is string and we want discreet integer values\ndf['state'] = label_encoder.fit_transform(df['state'])\ndf['international plan'] = label_encoder.fit_transform(df['international plan'])\ndf['voice mail plan'] = label_encoder.fit_transform(df['voice mail plan'])\n\n#print (df['Voice mail plan'][:4])\nprint (df.dtypes)","d154bdb2":"df.shape","c31662c9":"df.head()","914e221b":"y = df['churn'].as_matrix().astype(np.int)\ny.size","2716511a":"# df = df.drop([\"Id\",\"Churn\"], axis = 1, inplace=True)\ndf.drop([\"phone number\",\"churn\"], axis = 1, inplace=True)","1325ab25":"df.head(3)","353edd2c":"X = df.as_matrix().astype(np.float)","845a1b35":"X","7a153e0f":"X.shape","2fc81814":"scaler = preprocessing.StandardScaler()\nX = scaler.fit_transform(X)","cfc4eadf":"X","97c43fbb":"def stratified_cv(X, y, clf_class, shuffle=True, n_folds=10, **kwargs):\n    stratified_k_fold = cross_validation.StratifiedKFold(y, n_folds=n_folds, shuffle=shuffle)\n    y_pred = y.copy()\n    # ii -> train\n    # jj -> test indices\n    for ii, jj in stratified_k_fold: \n        X_train, X_test = X[ii], X[jj]\n        y_train = y[ii]\n        clf = clf_class(**kwargs)\n        clf.fit(X_train,y_train)\n        y_pred[jj] = clf.predict(X_test)\n    return y_pred","f5a448a1":"print('Gradient Boosting Classifier:  {:.2f}'.format(metrics.accuracy_score(y, stratified_cv(X, y, ensemble.GradientBoostingClassifier))))\nprint('Support vector machine(SVM):   {:.2f}'.format(metrics.accuracy_score(y, stratified_cv(X, y, svm.SVC))))\nprint('Random Forest Classifier:      {:.2f}'.format(metrics.accuracy_score(y, stratified_cv(X, y, ensemble.RandomForestClassifier))))\nprint('K Nearest Neighbor Classifier: {:.2f}'.format(metrics.accuracy_score(y, stratified_cv(X, y, neighbors.KNeighborsClassifier))))\nprint('Logistic Regression:           {:.2f}'.format(metrics.accuracy_score(y, stratified_cv(X, y, linear_model.LogisticRegression))))","ef7d2ad6":"grad_ens_conf_matrix      = metrics.confusion_matrix(y, stratified_cv(X, y, ensemble.GradientBoostingClassifier))\nsns.heatmap(grad_ens_conf_matrix, annot=True,  fmt='');\ntitle = 'Gradient Boosting'\nplt.title(title);","60c9e1f4":"svm_svc_conf_matrix       = metrics.confusion_matrix(y, stratified_cv(X, y, svm.SVC))\nsns.heatmap(svm_svc_conf_matrix, annot=True,  fmt='');\ntitle = 'SVM'\nplt.title(title);","156c83de":"random_forest_conf_matrix = metrics.confusion_matrix(y, stratified_cv(X, y, ensemble.RandomForestClassifier))\nsns.heatmap(random_forest_conf_matrix, annot=True,  fmt='');\ntitle = 'Random Forest'\nplt.title(title);","4ad2db71":"k_neighbors_conf_matrix   = metrics.confusion_matrix(y, stratified_cv(X, y, neighbors.KNeighborsClassifier))\nsns.heatmap(k_neighbors_conf_matrix, annot=True,  fmt='');\ntitle = 'KNN'\nplt.title(title);","cc3a80c0":"logistic_reg_conf_matrix  = metrics.confusion_matrix(y, stratified_cv(X, y, linear_model.LogisticRegression))\nsns.heatmap(logistic_reg_conf_matrix, annot=True,  fmt='');\ntitle = 'Logistic Regression'\nplt.title(title);","146db761":"print('Gradient Boosting Classifier:\\n {}\\n'.format(metrics.classification_report(y, stratified_cv(X, y, ensemble.GradientBoostingClassifier))))\nprint('Support vector machine(SVM):\\n {}\\n'.format(metrics.classification_report(y, stratified_cv(X, y, svm.SVC))))\nprint('Random Forest Classifier:\\n {}\\n'.format(metrics.classification_report(y, stratified_cv(X, y, ensemble.RandomForestClassifier))))\nprint('K Nearest Neighbor Classifier:\\n {}\\n'.format(metrics.classification_report(y, stratified_cv(X, y, neighbors.KNeighborsClassifier))))\nprint('Logistic Regression:\\n {}\\n'.format(metrics.classification_report(y, stratified_cv(X, y, linear_model.LogisticRegression))))","aa8c3f8a":"gbc = ensemble.GradientBoostingClassifier()\ngbc.fit(X, y)","e448d428":"# Get Feature Importance from the classifier\nfeature_importance = gbc.feature_importances_\nprint (gbc.feature_importances_)\nfeat_importances = pd.Series(gbc.feature_importances_, index=df.columns)\nfeat_importances = feat_importances.nlargest(19)\nfeat_importances.plot(kind='barh' , figsize=(10,10)) ","2dfbf421":"## Dataset \nhttps:\/\/www.kaggle.com\/becksddf\/churn-in-telecoms-dataset\/data\n","12cb05fb":"### Strip of Response values","09837855":"### Build Feature Matrix","da4385a3":"### Conclusion 1 = Imbalanced data - Lesser datapoints in True Churn category","08580aee":"# Churn Analysis","a092388c":"### Stratified Cross Validation - Since the Response values are not balanced","e592619e":"# Handle Categorical Cols - Label Encode","444cc927":"### Standardize Feature Matrix values","0cb4359a":"### Churn By Customers with International plan","33a97a93":"### Churn By State","ded85229":"### Strip off Redundant cols","eb008dd6":"### Churn By Area Code","49759bcc":"### Final Model Selection\n\nGradient Boosting seems to do comparatively for this case","ac0d132d":"### Confusion Matrices for various models","6939fd3a":"# Descriptive Analysis","d78d925d":"### Build Models and Train","92f7ee2d":"### Churn By Customers with Voice mail plan ","c47b854b":"### classification_report"}}