{"cell_type":{"d8ff1ed5":"code","399a3228":"code","3d0caf33":"code","7975c28e":"code","97f5388e":"code","0a3886f9":"code","fd40066e":"code","77cd6c7e":"code","3d9f5883":"code","1fcbf4e8":"code","0250cb06":"code","965faf87":"code","b84cf7a2":"code","746501e6":"code","a8bf2636":"code","53b231c5":"markdown","51664fc8":"markdown","b7e306f4":"markdown","c2afb701":"markdown","055358f1":"markdown","83894a84":"markdown"},"source":{"d8ff1ed5":"import imageio\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom PIL import Image, ImageOps\nimport scipy.ndimage as ndi","399a3228":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3d0caf33":"dirname_input = '\/kaggle\/input\/breast-histopathology-images\/IDC_regular_ps50_idx5'\ndir_input_list = os.listdir(dirname_input)\nprint(dir_input_list)\nprint(\"\\n\")\nprint(\"Number of patients: {}\".format(len(dir_input_list)))","7975c28e":"#Function for creating path \ndef path_img(path, folder='0'): #folder can assume string values '0' or '1'\n    return os.path.join(path, folder)","97f5388e":"#creating dictionary  for every folder, key - folder name, values - subfolders 0 and 1\ndir_img_folders = []\ndir_dict = {}\nfor folder in dir_input_list:\n    dir_dict[folder] = os.path.join(path_img(dirname_input, folder), \"0\"), os.path.join(path_img(dirname_input, folder), \"1\")","0a3886f9":"#example\nprint(dir_dict['13666'])\nprint(dir_dict['13666'][0])\nprint(dir_dict['13666'][1])","fd40066e":"def plot_imgs(item_dir, num_imgs=25, title=\" \"):\n    all_item_dirs = os.listdir(item_dir)\n    item_files = [os.path.join(item_dir, file) for file in all_item_dirs][:num_imgs]\n    img_shape = {\"50,50,3\": 0,\n                \"other\": 0}\n    cntr1 = 0\n    cntr2 = 0\n    \n    plt.figure(figsize=(10, 10))\n    \n    for idx, img_path in enumerate(item_files):\n        plt.subplot(5, 5, idx+1)\n        img = plt.imread(img_path)\n        if img.shape == (50,50,3):\n            cntr1 = cntr1  + 1\n            img_shape[\"50,50,3\"] = cntr1\n        else:\n            cntr2 = cntr2 + 1\n            img_shape[\"other\"] = cntr2\n            print(\"New shape: {}\".format(img.shape))\n        plt.title(title)\n        plt.imshow(img)\n        \n    plt.tight_layout()\n","77cd6c7e":"plot_imgs(dir_dict[dir_input_list[0]][1], 5)","3d9f5883":"for idx, _ in enumerate(dir_input_list):\n    plot_imgs(dir_dict[dir_input_list[idx]][0], 5, title=\"Patient: {}, class: {}\".format(dir_input_list[idx], \"0\"))\n    plot_imgs(dir_dict[dir_input_list[idx]][1], 5, title=\"Patient: {}, class: {}\".format(dir_input_list[idx], \"1\"))","1fcbf4e8":"print(shp0)","0250cb06":"# def shape_counter(item_dir):\n#     all_item_dirs = os.listdir(item_dir)\n#     item_files = [os.path.join(item_dir, file) for file in all_item_dirs]\n    \n#     cntr1 = 0\n#     cntr2 = 0\n    \n#     img_shape = {\"50,50\": 0}\n    \n#     plt.figure(figsize=(10, 10))\n    \n#     for idx, img_path in enumerate(item_files):\n#         img = Image.open(img_path)\n#         width, height = img.size\n#         if '{},{}'.format(width, height) in img_shape: #checking if shape exists\n#             img_shape['{},{}'.format(width, height)] = img_shape['{},{}'.format(width, height)] + 1 #if it does we update value\n#         else:\n#             new_shape = {'{},{}'.format(width, height): 1} #if not we create new key with value 1\n#             img_shape.update(new_shape)\n        \n#         print(img_shape)\n        \n#     return img_shape","965faf87":"# for idx, _ in enumerate(dir_input_list):\n#     shp_cnt0 = shape_counter(dir_dict[dir_input_list[idx]][0])\n#     shp_cnt1 = shape_counter(dir_dict[dir_input_list[idx]][1])","b84cf7a2":"# shapes = shp_cnt0.copy()\n# shapes.update(shp_cnt1)\n# print(shapes)","746501e6":"# def shapes_plot(shape_dict):\n#     shape_keys = shape_dict.key() #getting keys\n#     shape_num = len(shape_keys) #checking how many keys there is\n#     plt.bar(range(0,shape_num+1), [shape_keys]) #plotting bars in range using len\n#     plt.xticks(range(0,shape_num+1), [shape_keys])\n#     plt.show()","a8bf2636":"# shape_comparison(shapes)","53b231c5":"We have to deal with 279 folders and in each of them there are two folders: \"0\" and \"1\" containing images. \nI decided to approach this problem using dictionary. Name of the folder will be the key and the values will be 0 and 1 folder. ","51664fc8":"Unfortunetally, some images are different size than others. Let's see how many of them are there.","b7e306f4":"Now we can see what kind of images we have in those folders.","c2afb701":"I had to see what sort of images were in each folder. Based on one folder I hoped every picture is the same size. ","055358f1":"Let's see how looks structure of a random folder.","83894a84":"This is another kernel in which I will try to explore image processing and classification with CNNs.\nI use some function from my other kernel: https:\/\/www.kaggle.com\/wojciech1103\/x-ray-classification-and-visualization"}}