{"cell_type":{"e9635aa6":"code","21b92c7a":"code","c7bdaac8":"code","6a7742a0":"code","0af0ea64":"code","c9b55eb8":"code","c3e0542a":"code","96d92f51":"code","75b47787":"code","cd81aaeb":"code","bc05c497":"code","9f6ce2f5":"code","ffc9b1e0":"code","6093234f":"code","95cc2496":"code","655a737c":"code","b2b46b29":"markdown"},"source":{"e9635aa6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os","21b92c7a":"train=pd.read_csv(\"..\/input\/g-research-crypto-forecasting\/train.csv\")\nsuptrain=pd.read_csv(\"..\/input\/g-research-crypto-forecasting\/supplemental_train.csv\")\nextest=pd.read_csv(\"..\/input\/g-research-crypto-forecasting\/example_test.csv\")\nexsub=pd.read_csv(\"..\/input\/g-research-crypto-forecasting\/example_sample_submission.csv\")\nassdet=pd.read_csv(\"..\/input\/g-research-crypto-forecasting\/asset_details.csv\")\ntest=pd.read_csv(\"..\/input\/g-research-crypto-forecasting\/example_test.csv\")","c7bdaac8":"train.head()","6a7742a0":"suptrain.head()","0af0ea64":"assdet.head()","c9b55eb8":"assdet[\"weight-Percent\"] = (assdet[\"Weight\"] \/ assdet[\"Weight\"].sum()) * 100\nassdet.sort_values(\"Weight\", ascending=False)\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport seaborn as sns\ncmap = sns.color_palette()\nfig = px.bar(assdet, y='weight-Percent', x='Asset_Name', title='Weight_Percent\/Cryptography')\nfig.show()","c3e0542a":"asset_ID=1\ntgt_df = train[train[\"Asset_ID\"] == asset_ID]\ntgt_df = tgt_df[['Open', 'High', 'Low', 'Close', 'Volume','timestamp']]  ## ohlcv\u3068\u6642\u9593\u306e\u60c5\u5831\u306e\u307f\u5fc5\u8981\u3002\ntgt_df[\"timestamp\"] = pd.to_datetime(tgt_df['timestamp'].astype(int), unit='s')\ntgt_df.set_index(\"timestamp\",inplace=True)","96d92f51":"tgt_df.head()","75b47787":"train.isnull().sum()","cd81aaeb":"train=train.dropna()","bc05c497":"train.describe()","9f6ce2f5":"train.corr()","ffc9b1e0":"import numpy as np\nfrom lightgbm import LGBMRegressor\ndef upper_shadow(df):\n    return df['High'] - np.maximum(df['Close'], df['Open'])\n\ndef lower_shadow(df):\n    return np.minimum(df['Close'], df['Open']) - df['Low']\ndef get_features(df):\n    df_feat = df[['Count', 'Open', 'High', 'Low', 'Close', 'Volume', 'VWAP']].copy()\n    df_feat['Upper_Shadow'] = upper_shadow(df_feat)\n    df_feat['Lower_Shadow'] = lower_shadow(df_feat)\n    return df_feat\n\ndef get_Xy_and_model_for_asset(train, asset_id):\n    df = train[train[\"Asset_ID\"] == asset_id]\n    df_proc = get_features(df)\n    df_proc['y'] = df['Target']\n    df_proc = df_proc.dropna(how=\"any\")\n    \n    X = df_proc.drop(\"y\", axis=1)\n    y = df_proc[\"y\"]\n\n    model = LGBMRegressor(n_estimators=1000)\n    model.fit(X, y)\n    return X, y, model","6093234f":"Xs = {}\nys = {}\nmodels = {}\n\nfor asset_id, asset_name in zip(assdet['Asset_ID'], assdet['Asset_Name']):\n    print(f\"Training model for {asset_name:<16} (ID={asset_id:<2})\")\n    X, y, model = get_Xy_and_model_for_asset(train, asset_id)    \n    Xs[asset_id], ys[asset_id], models[asset_id] = X, y, model","95cc2496":"x = get_features(train.iloc[1])\ny_pred = models[0].predict([x])\ny_pred[0]","655a737c":"import gresearch_crypto\nenv = gresearch_crypto.make_env()\niter_test = env.iter_test()\n\nfor i, (test, df_pred) in enumerate(iter_test):\n    for j , row in test.iterrows():\n        \n        model = models[row['Asset_ID']]\n        x_test = get_features(row)\n        y_pred = model.predict([x_test])[0]\n        \n        df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = y_pred\n        \n        \n        # Print just one sample row to get a feeling of what it looks like\n        if i == 0 and j == 0:\n            display(x_test)\n\n    # Display the first prediction dataframe\n    if i == 0:\n        display(df_pred)\n\n    # Send submissions\n    env.predict(df_pred)","b2b46b29":"# Work in progress, please upvote"}}