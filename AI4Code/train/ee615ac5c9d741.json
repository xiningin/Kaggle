{"cell_type":{"4ecdc868":"code","1dc87362":"code","96ae02bd":"code","e0d332b7":"code","2e24dc60":"code","025afbd0":"code","85d5848f":"code","b43d26fb":"code","426cd603":"code","2b1e60a2":"code","9dc8f628":"code","bb4d35df":"code","4a2cff4b":"code","db6e65aa":"code","c141facb":"code","94516b13":"code","0122f0a0":"code","8e96b527":"code","b96c34bb":"code","ddb3e094":"code","e6887d4c":"code","8d84834b":"code","66f41ed5":"code","caa788c6":"code","8313a17f":"code","7d17bfd6":"code","c78d70bc":"code","8c8042fe":"code","9836b276":"code","81c4c899":"markdown","7668fd39":"markdown","18f4d674":"markdown","f30569cf":"markdown","d352814c":"markdown","3a5deb7e":"markdown","af8286c7":"markdown","123e1a58":"markdown"},"source":{"4ecdc868":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","1dc87362":"df=pd.read_csv('diabetes.csv') # read the dataset\ndf.head()","96ae02bd":"df.columns","e0d332b7":"df.shape","2e24dc60":"df.info()","025afbd0":"df.isnull().sum() # no null data","85d5848f":"df.duplicated().sum() # no duplicates","b43d26fb":"df.describe()","426cd603":"df.hist(bins=35,figsize=(20,30))\nplt.show()","2b1e60a2":"plt.boxplot(df) # look at outliers\nplt.show()","9dc8f628":"df.plot(kind= 'box' , subplots=True, layout=(3,3), figsize=(10,8))\nplt.show()","bb4d35df":"corr=df.corr() # correlation between features\ncorr","4a2cff4b":"plt.figure(figsize=(12,12)) # the heatmap for the data\nsns.heatmap(corr,annot=True,cmap='Reds')\n\nplt.show()","db6e65aa":"# dfk =df.drop('SkinThickness', axis =1)\n# dfk =df.drop('BloodPressure', axis =1)\n# dfk","c141facb":"X=df.iloc[:,:7].values #X_value\nY=df.iloc[:,-1].values #Y_value\n# y","94516b13":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=101)","0122f0a0":"# Standard scaling our data\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train) \nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","8e96b527":"X_train.shape","b96c34bb":"X_test.shape","ddb3e094":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=7) \nknn.fit(X_train, Y_train)","e6887d4c":"from sklearn.metrics import precision_score","8d84834b":"Y_pred = knn.predict(X_test)\nknn_score= knn.score(X_test, Y_test)\nknn_prec = precision_score(Y_test, Y_pred)\nprint(\"Score=\",knn_score,'\\n' ,\"precision\", knn_prec)","66f41ed5":"cf_matrix = confusion_matrix(Y_test, Y_pred)\nsns.heatmap(cf_matrix, annot=True,cmap='Reds')\nplt.show()","caa788c6":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import precision_score\nfrom sklearn import preprocessing\nlg = LogisticRegression(max_iter=900)\nlg.fit(X_train, Y_train)","8313a17f":"Y_pred = lg.predict(X_test)\nlr_score= lg.score(X_test, Y_test)\nlr_prec = precision_score(Y_test, Y_pred)\nprint(\"Score=\", lr_score,'\\n' ,\"precision\", lr_prec)","7d17bfd6":"cf_matrix = confusion_matrix(Y_test, Y_pred)\nsns.heatmap(cf_matrix, annot=True,cmap='Reds')\nplt.show()","c78d70bc":"from sklearn import svm\nsv = svm.SVC()\nsv.fit(X_train, Y_train)","8c8042fe":"Y_pred = sv.predict(X_test)\nsvm_score= sv.score(X_test, Y_test)\nsvm_prec = precision_score(Y_test, Y_pred)\nprint(\"Score=\", svm_score,'\\n' ,\"precision\", svm_prec)","9836b276":"cf_matrix = confusion_matrix(Y_test, Y_pred)\nsns.heatmap(cf_matrix, annot=True,cmap='Reds')\nplt.show()","81c4c899":"# 1- KNN Model","7668fd39":"# The most important features are \n## - Glucose\n## - MBI","18f4d674":"# Split The Data and Standarization","f30569cf":"# Models","d352814c":"# 3- SVM","3a5deb7e":"# 2- Logistic Regression","af8286c7":"## We could remove the columns of SkinThickness and BloodPressure as they don't have a good correlation with the Outcome","123e1a58":"# From our model we can see that the best model is SVM as it has the best score of accuracy and the best precision"}}