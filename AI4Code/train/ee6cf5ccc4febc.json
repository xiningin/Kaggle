{"cell_type":{"916c497b":"code","f08c6ef5":"code","093b33d0":"code","78f00a1d":"code","8f4998bd":"code","7addb6df":"code","242fd157":"code","64dac497":"code","f8f7f2bb":"code","ecb80d73":"code","27352487":"code","17bad15b":"code","30353bf3":"code","94e7c83c":"code","92ab0e8e":"code","a9999d53":"code","d81d7180":"code","32414bd4":"code","43bb78b9":"markdown"},"source":{"916c497b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f08c6ef5":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mplimg\nfrom matplotlib.pyplot import imshow\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom keras import layers\nfrom keras.preprocessing import image\nfrom keras.applications.imagenet_utils import preprocess_input\nfrom keras.layers import Input, Dense, Activation, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import AveragePooling2D, MaxPooling2D, Dropout\nfrom keras.models import Model\n\nimport keras.backend as K\nfrom keras.models import Sequential\n\nimport warnings\nwarnings.simplefilter(\"ignore\", category=DeprecationWarning)","093b33d0":"os.listdir(\"..\/input\/super-ai-image-classification\/train\/train\/\")","78f00a1d":"os.listdir(\"..\/input\/super-ai-image-classification\/val\/val\/\")","8f4998bd":"image_train1 = pd.read_csv(\"..\/input\/super-ai-image-classification\/train\/train\/train.csv\")\nimage_train1.head(10)","7addb6df":"def prepare_labels(y):\n    values = np.array(y)\n    label_encoder = LabelEncoder()\n    integer_encoded = label_encoder.fit_transform(values)\n    # print(integer_encoded)\n\n    onehot_encoder = OneHotEncoder(sparse=False)\n    integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)\n    onehot_encoded = onehot_encoder.fit_transform(integer_encoded)\n    # print(onehot_encoded)\n\n    y = onehot_encoded\n    # print(y.shape)\n    return y, label_encoder","242fd157":"def prepareImages(data, m, dataset):\n    print(\"Preparing images\")\n    X_train = np.zeros((m, 100, 100, 3))\n    count = 0\n    \n    for fig in data['id']:\n        #load images into images of size 100x100x3\n        img = image.load_img(\"..\/input\/super-ai-image-classification\/\"+dataset+\"\/images\/\"+fig, target_size=(100, 100, 3))\n        x = image.img_to_array(img)\n        x = preprocess_input(x)\n\n        X_train[count] = x\n        if (count%25 == 0):\n            print(\"Processing image: \", count+1, \", \", fig)\n        count += 1\n    \n    return X_train","64dac497":"X = prepareImages(image_train1, image_train1.shape[0], \"train\/train\")\nX \/= 254","f8f7f2bb":"y, label_encoder = prepare_labels(image_train1['category'])","ecb80d73":"y.shape","27352487":"model = Sequential()\n\nmodel.add(Conv2D(32, (7, 7), strides = (1, 1), name = 'conv0', input_shape = (100, 100, 3)))\n\nmodel.add(BatchNormalization(axis = 3, name = 'bn0'))\nmodel.add(Activation('relu'))\n\nmodel.add(MaxPooling2D((2, 2), name='max_pool'))\nmodel.add(Conv2D(64, (3, 3), strides = (1,1), name=\"conv1\"))\nmodel.add(Activation('relu'))\nmodel.add(AveragePooling2D((3, 3), name='avg_pool'))\n\nmodel.add(Flatten())\nmodel.add(Dense(500, activation=\"relu\", name='rl'))\nmodel.add(Dropout(0.8))\nmodel.add(Dense(y.shape[1], activation='softmax', name='sm'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer=\"adam\", metrics=['accuracy'])\nmodel.summary()","17bad15b":"history = model.fit(X, y, epochs=20, batch_size=50, verbose=1)","30353bf3":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['loss'])\nplt.title('Model accuracy\/loss')\nplt.ylabel('Accuracy\/Loss')\nplt.xlabel('Epoch')\nplt.show()","94e7c83c":"test = os.listdir(\"..\/input\/super-ai-image-classification\/val\/val\/images\")\nprint(len(test))","92ab0e8e":"col = ['id']\ntest_df = pd.DataFrame(test, columns=col)\ntest_df['category'] = ''","a9999d53":"X = prepareImages(test_df, test_df.shape[0], \"val\/val\")\nX \/= 1","d81d7180":"predictions = model.predict(np.array(X), verbose=1)","32414bd4":"for i, pred in enumerate(predictions):\n    test_df.loc[i, 'category'] = ' '.join(label_encoder.inverse_transform(pred.argsort()[-5:][::-1]))","43bb78b9":"https:\/\/www.tensorflow.org\/tutorials\/load_data\/images?authuser=1"}}