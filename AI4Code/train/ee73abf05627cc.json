{"cell_type":{"b8e4a0f7":"code","34966875":"code","c706777f":"code","2d48f889":"code","7d3ccfce":"code","440974e3":"code","9ef58644":"code","e010c8ef":"code","0e01c954":"code","f0721666":"code","2df893fc":"code","6436a253":"code","222919b8":"code","ad8d9a1c":"code","6f77d495":"markdown","f84390ba":"markdown"},"source":{"b8e4a0f7":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom skimage.io import imread\n\nfrom keras.models import Sequential, Model\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Input, Flatten, SeparableConv2D\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\n\nimport cv2","34966875":"train_data = pd.read_csv('..\/input\/cloud-type-classification2\/train.csv')\n\n# Get the counts for each class\ncases_count = train_data['label'].value_counts()\nprint(cases_count)\n\n# Plot the results \nplt.figure(figsize=(10,8))\nsns.barplot(x=cases_count.index, y= cases_count.values)\nplt.title('Number of images', fontsize=14)\nplt.xlabel('class', fontsize=12)\nplt.ylabel('Count', fontsize=12)\nplt.xticks(range(len(cases_count.index)), ['0', '1', '2', '3', '4', '5', '6'])\nplt.show()\ndel cases_count","c706777f":"train_data['image'] = train_data['id'].apply(lambda x : f'..\/input\/cloud-type-classification2\/images\/train\/{x}')\nprint(train_data.head())","2d48f889":"# Get few samples for both the classes\nclass0 = (train_data[train_data['label']==0]['image'].iloc[:5]).tolist()\nclass1 = (train_data[train_data['label']==1]['image'].iloc[:5]).tolist()\nclass2 = (train_data[train_data['label']==2]['image'].iloc[:5]).tolist()\nclass3 = (train_data[train_data['label']==3]['image'].iloc[:5]).tolist()\nclass4 = (train_data[train_data['label']==4]['image'].iloc[:5]).tolist()\nclass5 = (train_data[train_data['label']==5]['image'].iloc[:5]).tolist()\nclass6 = (train_data[train_data['label']==6]['image'].iloc[:5]).tolist()\n\n# Concat the data in a single list and del the above variables\nsamples = class0 + class1+ class2+ class3+ class4+ class5+ class6\ndel class0, class1, class2, class3, class4, class5, class6\n\n# Plot the data \nf, ax = plt.subplots(7,5, figsize=(30,30))\nfor i in range(7*5):\n    img = imread(samples[i])\n    ax[i\/\/5, i%5].imshow(img)\n    if i<5:\n        ax[i\/\/5, i%5].set_title(\"0\")\n    elif i<10:\n        ax[i\/\/5, i%5].set_title(\"1\")\n    elif i<15:\n        ax[i\/\/5, i%5].set_title(\"2\")\n    elif i<20:\n        ax[i\/\/5, i%5].set_title(\"3\")\n    elif i<25:\n        ax[i\/\/5, i%5].set_title(\"4\")\n    elif i<30:\n        ax[i\/\/5, i%5].set_title(\"5\")\n    else:\n        ax[i\/\/5, i%5].set_title(\"6\")\n    ax[i\/\/5, i%5].axis('off')\n    ax[i\/\/5, i%5].set_aspect('auto')\nplt.show()","7d3ccfce":"num_class = 7\n\n# Training data generator\ndef data_gen(data, batch_size):\n    # Get total number of samples in the data\n    n = len(data)\n    steps = n\/\/batch_size\n    \n    # Define two numpy arrays for containing batch data and labels\n    batch_data = np.zeros((batch_size, 224, 224, 3), dtype=np.float32)\n    batch_labels = np.zeros((batch_size,num_class), dtype=np.float32)\n\n    # Get a numpy array of all the indices of the input data\n    indices = np.arange(n)\n    \n    # Initialize a counter\n    i =0\n    while True:\n        np.random.shuffle(indices)\n        # Get the next batch \n        count = 0\n        next_batch = indices[(i*batch_size):(i+1)*batch_size]\n        for j, idx in enumerate(next_batch):\n            img_name = data.iloc[idx]['image']\n            label = data.iloc[idx]['label']\n            \n            # one hot encoding\n            encoded_label = to_categorical(label, num_classes=num_class)\n            # read the image and resize\n            img = cv2.imread(str(img_name))\n            img = cv2.resize(img, (224,224))\n            \n            # normalize the image pixels\n            orig_img = img.astype(np.float32)\/255.\n            \n            batch_data[count] = orig_img\n            batch_labels[count] = encoded_label\n            \n        i+=1\n        yield batch_data, batch_labels\n            \n        if i>=steps:\n            i=0","440974e3":"# Set the CNN model \nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (224,224,3)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_class, activation = \"softmax\"))","9ef58644":"model.build()\nmodel.summary()","e010c8ef":"from tensorflow.keras.optimizers import Adam\n# Define the optimizer\nadam = Adam(learning_rate=0.01)","0e01c954":"# Compile the model\nmodel.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer=adam)","f0721666":"# Train the model\nepochs = 3\nbatch_size = 100\ntrain_data_gen = data_gen(data=train_data, batch_size=batch_size)\nmodel.fit(train_data_gen,\n                epochs = epochs,\n                steps_per_epoch=train_data.shape[0] \/\/ batch_size)","2df893fc":"#predict test data\ntest_data = pd.read_csv('..\/input\/cloud-type-classification2\/submit.csv')\nnum_rows = test_data.shape[0]\nprint(num_rows)","6436a253":"import os\nfile_path = '..\/input\/cloud-type-classification2\/images\/test'      \nfor i in range(num_rows):\n    img = cv2.imread(os.path.join(file_path, test_data.iloc[i,0]))\n    img = cv2.resize(img, (224,224))\n    img = img.astype(np.float32)\/255.\n    img = np.array(img)\n    img = np.expand_dims(img, axis=0)\n    predict = model.predict(img)\n    predict = np.argmax(predict)\n    test_data.loc[i, 'predict'] = predict\n    ","222919b8":"print(test_data.head()) ","ad8d9a1c":"test_data.to_csv('..\/working\/submit.csv', index=False)\nfrom IPython.display import FileLink\nFileLink(r'submit.csv')","6f77d495":"# Load data","f84390ba":"# Import library"}}