{"cell_type":{"0ed41a0e":"code","10004922":"code","aaa1681c":"code","6b13a1b2":"code","4c596275":"code","e8263d74":"code","2270a551":"code","a1cdc162":"code","3a7be6cb":"code","9dd4bcd0":"code","17a10bc1":"code","45f0419a":"code","085b4156":"code","24bc38eb":"markdown","54ae2019":"markdown","4b0a517d":"markdown","471434d5":"markdown","2975eeab":"markdown","3598f19f":"markdown","95e56f22":"markdown","07c6f36b":"markdown","c2780347":"markdown"},"source":{"0ed41a0e":"import os\nimport time\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import TensorDataset, DataLoader\n\nfrom tqdm import tqdm_notebook\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Define data root directory\ndata_dir = \"..\/input\/\"\nprint(os.listdir(data_dir))","10004922":"pd.read_csv(data_dir + 'AEP_hourly.csv').head()","aaa1681c":"# The scaler objects will be stored in this dictionary so that our output test data from the model can be re-scaled during evaluation\nlabel_scalers = {}\n\ntrain_x = []\ntest_x = {}\ntest_y = {}\n\nfor file in tqdm_notebook(os.listdir(data_dir)): \n    # Skipping the files we're not using\n    if file[-4:] != \".csv\" or file == \"pjm_hourly_est.csv\":\n        continue\n    \n    # Store csv file in a Pandas DataFrame\n    df = pd.read_csv(data_dir + file, parse_dates=[0])\n    # Processing the time data into suitable input formats\n    df['hour'] = df.apply(lambda x: x['Datetime'].hour,axis=1)\n    df['dayofweek'] = df.apply(lambda x: x['Datetime'].dayofweek,axis=1)\n    df['month'] = df.apply(lambda x: x['Datetime'].month,axis=1)\n    df['dayofyear'] = df.apply(lambda x: x['Datetime'].dayofyear,axis=1)\n    df = df.sort_values(\"Datetime\").drop(\"Datetime\",axis=1)\n    \n    # Scaling the input data\n    sc = MinMaxScaler()\n    label_sc = MinMaxScaler()\n    data = sc.fit_transform(df.values)\n    # Obtaining the Scale for the labels(usage data) so that output can be re-scaled to actual value during evaluation\n    label_sc.fit(df.iloc[:,0].values.reshape(-1,1))\n    label_scalers[file] = label_sc\n    \n    # Define lookback period and split inputs\/labels\n    lookback = 90\n    inputs = np.zeros((len(data)-lookback,lookback,df.shape[1]))\n    labels = np.zeros(len(data)-lookback)\n    \n    for i in range(lookback, len(data)):\n        inputs[i-lookback] = data[i-lookback:i]\n        labels[i-lookback] = data[i,0]\n    inputs = inputs.reshape(-1,lookback,df.shape[1])\n    labels = labels.reshape(-1,1)\n    \n    # Split data into train\/test portions and combining all data from different files into a single array\n    test_portion = int(0.1*len(inputs))\n    if len(train_x) == 0:\n        train_x = inputs[:-test_portion]\n        train_y = labels[:-test_portion]\n    else:\n        train_x = np.concatenate((train_x,inputs[:-test_portion]))\n        train_y = np.concatenate((train_y,labels[:-test_portion]))\n    test_x[file] = (inputs[-test_portion:])\n    test_y[file] = (labels[-test_portion:])","6b13a1b2":"print(train_x.shape)","4c596275":"batch_size = 1024\n\ntrain_data = TensorDataset(torch.from_numpy(train_x), torch.from_numpy(train_y))\ntrain_loader = DataLoader(train_data, shuffle=True, batch_size=batch_size, drop_last=True)","e8263d74":"# torch.cuda.is_available() checks and returns a Boolean True if a GPU is available, else it'll return False\nis_cuda = torch.cuda.is_available()\n\n# If we have a GPU available, we'll set our device to GPU. We'll use this device variable later in our code.\nif is_cuda:\n    device = torch.device(\"cuda\")\nelse:\n    device = torch.device(\"cpu\")","2270a551":"class GRUNet(nn.Module):\n    def __init__(self, input_dim, hidden_dim, output_dim, n_layers, drop_prob=0.2):\n        super(GRUNet, self).__init__()\n        self.hidden_dim = hidden_dim\n        self.n_layers = n_layers\n        \n        self.gru = nn.GRU(input_dim, hidden_dim, n_layers, batch_first=True, dropout=drop_prob)\n        self.fc = nn.Linear(hidden_dim, output_dim)\n        self.relu = nn.ReLU()\n        \n    def forward(self, x, h):\n        out, h = self.gru(x, h)\n        out = self.fc(self.relu(out[:,-1]))\n        return out, h\n    \n    def init_hidden(self, batch_size):\n        weight = next(self.parameters()).data\n        hidden = weight.new(self.n_layers, batch_size, self.hidden_dim).zero_().to(device)\n        return hidden\n\nclass LSTMNet(nn.Module):\n    def __init__(self, input_dim, hidden_dim, output_dim, n_layers, drop_prob=0.2):\n        super(LSTMNet, self).__init__()\n        self.hidden_dim = hidden_dim\n        self.n_layers = n_layers\n        \n        self.lstm = nn.LSTM(input_dim, hidden_dim, n_layers, batch_first=True, dropout=drop_prob)\n        self.fc = nn.Linear(hidden_dim, output_dim)\n        self.relu = nn.ReLU()\n        \n    def forward(self, x, h):\n        out, h = self.lstm(x, h)\n        out = self.fc(self.relu(out[:,-1]))\n        return out, h\n    \n    def init_hidden(self, batch_size):\n        weight = next(self.parameters()).data\n        hidden = (weight.new(self.n_layers, batch_size, self.hidden_dim).zero_().to(device),\n                  weight.new(self.n_layers, batch_size, self.hidden_dim).zero_().to(device))\n        return hidden","a1cdc162":"def train(train_loader, learn_rate, hidden_dim=256, EPOCHS=5, model_type=\"GRU\"):\n    \n    # Setting common hyperparameters\n    input_dim = next(iter(train_loader))[0].shape[2]\n    output_dim = 1\n    n_layers = 2\n    # Instantiating the models\n    if model_type == \"GRU\":\n        model = GRUNet(input_dim, hidden_dim, output_dim, n_layers)\n    else:\n        model = LSTMNet(input_dim, hidden_dim, output_dim, n_layers)\n    model.to(device)\n    \n    # Defining loss function and optimizer\n    criterion = nn.MSELoss()\n    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)\n    \n    model.train()\n    print(\"Starting Training of {} model\".format(model_type))\n    epoch_times = []\n    # Start training loop\n    for epoch in range(1,EPOCHS+1):\n        start_time = time.clock()\n        h = model.init_hidden(batch_size)\n        avg_loss = 0.\n        counter = 0\n        for x, label in train_loader:\n            counter += 1\n            if model_type == \"GRU\":\n                h = h.data\n            else:\n                h = tuple([e.data for e in h])\n            model.zero_grad()\n            \n            out, h = model(x.to(device).float(), h)\n            loss = criterion(out, label.to(device).float())\n            loss.backward()\n            optimizer.step()\n            avg_loss += loss.item()\n            if counter%200 == 0:\n                print(\"Epoch {}......Step: {}\/{}....... Average Loss for Epoch: {}\".format(epoch, counter, len(train_loader), avg_loss\/counter))\n        current_time = time.clock()\n        print(\"Epoch {}\/{} Done, Total Loss: {}\".format(epoch, EPOCHS, avg_loss\/len(train_loader)))\n        print(\"Time Elapsed for Epoch: {} seconds\".format(str(current_time-start_time)))\n        epoch_times.append(current_time-start_time)\n    print(\"Total Training Time: {} seconds\".format(str(sum(epoch_times))))\n    return model\n\ndef evaluate(model, test_x, test_y, label_scalers):\n    model.eval()\n    outputs = []\n    targets = []\n    start_time = time.clock()\n    for i in test_x.keys():\n        inp = torch.from_numpy(np.array(test_x[i]))\n        labs = torch.from_numpy(np.array(test_y[i]))\n        h = model.init_hidden(inp.shape[0])\n        out, h = model(inp.to(device).float(), h)\n        outputs.append(label_scalers[i].inverse_transform(out.cpu().detach().numpy()).reshape(-1))\n        targets.append(label_scalers[i].inverse_transform(labs.numpy()).reshape(-1))\n    print(\"Evaluation Time: {}\".format(str(time.clock()-start_time)))\n    sMAPE = 0\n    for i in range(len(outputs)):\n        sMAPE += np.mean(abs(outputs[i]-targets[i])\/(targets[i]+outputs[i])\/2)\/len(outputs)\n    print(\"sMAPE: {}%\".format(sMAPE*100))\n    return outputs, targets, sMAPE","3a7be6cb":"lr = 0.001\ngru_model = train(train_loader, lr, model_type=\"GRU\")","9dd4bcd0":"lstm_model = train(train_loader, lr, model_type=\"LSTM\")","17a10bc1":"gru_outputs, targets, gru_sMAPE = evaluate(gru_model, test_x, test_y, label_scalers)","45f0419a":"lstm_outputs, targets, lstm_sMAPE = evaluate(lstm_model, test_x, test_y, label_scalers)","085b4156":"plt.figure(figsize=(14,10))\nplt.subplot(2,2,1)\nplt.plot(gru_outputs[0][-100:], \"-o\", color=\"g\", label=\"Predicted\")\nplt.plot(targets[0][-100:], color=\"b\", label=\"Actual\")\nplt.ylabel('Energy Consumption (MW)')\nplt.legend()\n\nplt.subplot(2,2,2)\nplt.plot(gru_outputs[8][-50:], \"-o\", color=\"g\", label=\"Predicted\")\nplt.plot(targets[8][-50:], color=\"b\", label=\"Actual\")\nplt.ylabel('Energy Consumption (MW)')\nplt.legend()\n\nplt.subplot(2,2,3)\nplt.plot(gru_outputs[4][:50], \"-o\", color=\"g\", label=\"Predicted\")\nplt.plot(targets[4][:50], color=\"b\", label=\"Actual\")\nplt.ylabel('Energy Consumption (MW)')\nplt.legend()\n\nplt.subplot(2,2,4)\nplt.plot(lstm_outputs[6][:100], \"-o\", color=\"g\", label=\"Predicted\")\nplt.plot(targets[6][:100], color=\"b\", label=\"Actual\")\nplt.ylabel('Energy Consumption (MW)')\nplt.legend()\nplt.show()","24bc38eb":"* As we can see from the training time of both models, the GRU model is the clear winner in terms of speed, as we have mentioned earlier. The GRU finished 5 training epochs 75 seconds faster than the LSTM model.\n\nMoving on to measuring the accuracy of both models, we\u2019ll now use our evaluate() function and test dataset.","54ae2019":"We can also check if we have any GPUs to speed up our training time by many folds. If you\u2019re using FloydHub with GPU to run this code, the training time will be significantly reduced.","4b0a517d":"We have a total of **12** *.csv* files containing hourly energy trend data (*'est_hourly.paruqet'* and *'pjm_hourly_est.csv'* are not used). In our next step, we will be reading these files and pre-processing these data in this order:\n- Getting the time data of each individual time step and generalizing them\n    - Hour of the day *i.e. 0-23*\n    - Day of the week *i.e. 1-7*\n    - Month *i.e. 1-12*\n    - Day of the year *i.e. 1-365*\n    \n    \n- Scale the data to values between 0 and 1\n    - Algorithms tend to perform better or converge faster when features are on a relatively similar scale and\/or close to normally distributed\n    - Scaling preserves the shape of the original distribution and doesn't reduce the importance of outliers.\n    \n    \n- Group the data into sequences to be used as inputs to the model and store their corresponding labels\n    - The **sequence length** or **lookback period** is the number of data points in history that the model will use to make the prediction\n    - The label will be the next data point in time after the last one in the input sequence\n    \n\n- The inputs and labels will then be split into training and test sets","471434d5":"We have a total of 980,185 sequences of training data\n\nTo improve the speed of our training, we can process the data in batches so that the model does not need to update its weights as frequently. The Torch *Dataset* and *DataLoader* classes are useful for splitting our data into batches and shuffling them.","2975eeab":"The training process is defined in a function below so that we can reproduce it for both models. Both models will have the same number of **dimensions** in the *hidden state* and *layers*, trained over the same number of **epochs** and **learning rate**, and trained and tested on the exact same set of data.\n\nFor the purpose of comparing the performance of both models as well, we'll being tracking the time it takes for the model to train and eventually comparing the final accuracy of both models on the test set. For our accuracy measure, we'll use *Symmetric Mean Absolute Percentage Error (sMAPE)* to evaluate the models. *sMAPE* is the sum of the **absolute difference** between the predicted and actual values divided by the average of the predicted and actual value, therefore giving a percentage measuring the amount of error. \n\nThis is the formula for *sMAPE*:\n\n$sMAPE = \\frac{100%}{n} \\sum_{t=1}^n \\frac{|F_t - A_t|}{(|F_t + A_t|)\/2}$","3598f19f":"While the LSTM model may have made smaller errors and edged the GRU model slightly in terms of performance accuracy, the difference is insignificant and thus inconclusive. There have been many other tests conducted by others comparing both these models but there has largely been no clear winner as to which is the better architecture overall.\n\nLastly, let's do some visualisations on random sets of our predicted output vs the actual consumption data.","95e56f22":"In this notebook, we'll be using a GRU model for a time series prediction task and we will compare the performance of the GRU model against an LSTM model as well. The dataset contains power consumption data across different regions around the United States recorded on an hourly basis.\n\nThe goal of this implementation is to create a model that can accurately predict the energy usage in the next hour given historical usage data. We will be using both the GRU and LSTM model to train on a set of historical data and evaluate both models on an unseen test set. To do so, we\u2019ll start with feature selection, data-preprocessing, followed by defining, training and eventually evaluating the models.\n\nWe will be using the PyTorch library to implement both types of models along with other common Python libraries used in data analytics.","07c6f36b":"Next, we'll be defining the structure of the GRU and LSTM models. Both models have the same structure, with the only difference being the **recurrent layer** (GRU\/LSTM) and the initializing of the hidden state. The hidden state for the LSTM is a tuple containing both the **cell state** and the **hidden state**, whereas the GRU only has a single hidden state.","c2780347":"Looks like the models are largely successful in predicting the trends of energy consumption. While it may still get some changes wrong, such as delays in predicting a drop in consumption, the predictions follow very closely to the actual line on the test set. This is due to the nature of energy consumption data and the fact that there are patterns and cyclical changes that the model can account for. However, tougher time-series prediction problems such as stock price prediction or sales volume prediction may have data that is largely random or does not have any predictable patterns, and in such cases, the accuracy will definitely be lower."}}