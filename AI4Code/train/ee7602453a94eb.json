{"cell_type":{"64f06329":"code","fb8c34db":"code","0c8c86d5":"code","12036c4f":"code","e818f0a7":"code","9251c9a7":"code","ac9b0672":"code","30637a97":"code","5f32c15f":"code","a5fc0579":"code","4486fe5d":"code","b214320e":"code","a2b5ed0d":"code","e9bd52b4":"code","50c33ef5":"markdown"},"source":{"64f06329":"!conda install '\/kaggle\/input\/pydicom-conda-helper\/gdcm-2.8.9-py37h500ead1_1.tar.bz2' -c conda-forge -y","fb8c34db":"import numpy as np\nimport pandas as pd\nimport os\nimport pydicom\nfrom tqdm.notebook import tqdm","0c8c86d5":"#Train image shapes and paths\nimages = []\nwidths = []\nheights = []\npaths = []\n\ntq = tqdm()\n\nfor dirname, _, filenames in os.walk('..\/input\/siim-covid19-detection\/train'):\n    for filename in filenames:\n        dicom = pydicom.read_file(dirname+\"\/\"+filename,specific_tags=[\"Rows\",\"Columns\"])\n        heights.append(dicom.Rows)\n        widths.append(dicom.Columns)\n        images.append(filename[:-4])\n        paths.append(dirname+\"\/\"+filename)\n        tq.update(1)\n\nid2path_train = pd.DataFrame({\"Image_id\":images,\"Path\":paths})    \nimg_shapes_train = pd.DataFrame({\"Image_id\":images,\"Width\":widths,\"Height\":heights}).set_index(\"Image_id\")\nimg_shapes_train","12036c4f":"id2path_train","e818f0a7":"#Study to Image\ntrain_image_level = pd.read_csv(\"..\/input\/siim-covid19-detection\/train_image_level.csv\")\nimage_study_train = pd.DataFrame({\"Image_id\":train_image_level.id.str[:-6],\"Study_id\":train_image_level.StudyInstanceUID})\nimage_study_train","9251c9a7":"#Numeric Label and removed _study\ntrain_study_level = pd.read_csv(\"..\/input\/siim-covid19-detection\/train_study_level.csv\")\ntrain_study_level.id = train_study_level.id.str[:-6]\ntrain_study_level[\"Label\"] = train_study_level.apply(lambda l: np.argmax(l.values[1:]),axis=1)\ntrain_study_level","ac9b0672":"#Image id to Classes \nimg_classes_train = pd.DataFrame({\"Image_id\":image_study_train.Image_id,\"Label\":train_study_level.set_index(\"id\").Label.loc[image_study_train.Study_id].values})\nimg_classes_train","30637a97":"#Helper function\ndef getBoxes(x):\n    if not pd.isnull(x.boxes):\n        new = []\n        boxes = eval(x.boxes)\n        width = img_shapes_train.loc[x.id[:-6]].Width\n        height = img_shapes_train.loc[x.id[:-6]].Height\n        for box in boxes:\n            new.append({\"x\":max(0,box[\"x\"]\/width),\n                        \"y\":max(0,box[\"y\"]\/height),\n                        \"width\":max(0,box[\"width\"]\/width),\n                        \"height\":max(0,box[\"height\"]\/height)})# There is one value below 0 --> max(0,value)\n        return new\n    else:\n        return ","5f32c15f":"#Normalized Boxes\n#Use eval() to turn the string into a list\nimg_boxes_train =  pd.DataFrame({\"Image_id\":train_image_level.id.str[:-6], \"Boxes\":train_image_level.apply(getBoxes,axis=1),\"has_box\":~pd.isnull(train_image_level.boxes)})\nimg_boxes_train","a5fc0579":"#Test set paths, shapes and image to study\nstudies = []\nimages = []\npaths = []\nwidths = []\nheights = []\ntq = tqdm()\n\nfor dirname, _, filenames in os.walk('..\/input\/siim-covid19-detection\/test'):\n    for filename in filenames:\n        dicom = pydicom.read_file(dirname+\"\/\"+filename,specific_tags=[\"Rows\",\"Columns\"])\n        heights.append(dicom.Rows)\n        widths.append(dicom.Columns)\n        studies.append(dirname.split(\"\/\")[-2])\n        images.append(filename[:-4])\n        paths.append(dirname+\"\/\"+filename)\n        tq.update(1)\n\nid2path_test = pd.DataFrame({\"Image_id\":images,\"Path\":paths})\nimg_study_test = pd.DataFrame({\"Study_id\":studies,\"Image_id\":images})    \nimg_shapes_test = pd.DataFrame({\"Image_id\":images,\"Width\":widths,\"Height\":heights}).set_index(\"Image_id\")","4486fe5d":"img_study_test","b214320e":"img_shapes_test","a2b5ed0d":"id2path_test","e9bd52b4":"#Output\nid2path_train.to_csv(\"id2path_train.csv\",index=False)\nimage_study_train.to_csv(\"image_study_train.csv\",index=False)\nimg_shapes_train.to_csv(\"img_shapes_train.csv\")\n\nimg_classes_train.to_csv(\"img_classes_train.csv\",index=False)\nimg_boxes_train.to_csv(\"img_boxes_train.csv\",index=False)\n\nid2path_test.to_csv(\"id2path_test.csv\",index=False)\nimg_study_test.to_csv(\"img_study_test.csv\",index=False)\nimg_shapes_test.to_csv(\"img_shapes_test.csv\")","50c33ef5":"You can also use the outputs of this notebook as data to import instead of running the code yourself.<br>\nMake sure to use .loc[ ] when indexing custom indexes :)<br>\nHope you find something useful, have fun!"}}