{"cell_type":{"fffc812b":"code","73ec24ca":"code","8f947f97":"code","3605c058":"code","d546d905":"code","c22e9a93":"code","c01b17d7":"code","56c4aac6":"code","b877a708":"code","7fd6ce99":"code","d53a9ce2":"code","be8ce770":"code","49d3a38b":"code","4a058725":"code","1a72f724":"code","a4ad11fb":"code","83b37978":"code","837ce200":"code","96e48aa5":"code","f9ff1384":"code","a54414ad":"code","27cd0abb":"code","edfd77fb":"code","7ef8a97c":"code","d200212b":"code","5bcc17e0":"code","3d2e804b":"code","3f0d36fb":"code","7e98c973":"code","e13e6ddd":"code","025e14b0":"code","e3c581a1":"code","baf5c2c2":"code","ffee7ef0":"code","53ebf271":"code","a7bfd749":"code","4db67a16":"code","46343dbe":"code","db45f1b3":"code","19df5148":"code","ee59d8ed":"code","c3dcf100":"code","345a818f":"code","d488960b":"code","c5717c98":"code","0c7689e0":"code","65c376d9":"code","06ff4d57":"code","a994b784":"code","0a2a2237":"code","91373628":"code","55df0031":"code","3eefb6f1":"code","9ee74668":"code","0424e52d":"code","20af3722":"code","d752460c":"code","d1b4e4fc":"code","b1e1291d":"code","be7267c3":"code","6885a4c9":"code","97aee3fc":"code","88086967":"code","6f894dd0":"code","04779c6c":"code","6b26b1d8":"code","b06b0357":"code","d3584a71":"code","fd35997d":"code","c9470876":"code","085eaeec":"code","c205ac9c":"code","23fec9ee":"code","da6fa27c":"code","2d813a19":"code","ecfa46a7":"code","6d97c192":"code","0fc534ff":"code","0fed56fb":"code","129f0a0f":"code","19ad47ba":"code","0a971daf":"code","e3fc3b5a":"code","202948d6":"code","d81e3c70":"code","a53c0166":"code","65b92791":"code","71d6d21e":"code","d4e0b287":"code","d0d0be72":"code","77192e8b":"markdown","c787ec73":"markdown","a2ab22f3":"markdown","fbfe6002":"markdown","bbdf5541":"markdown","dbeb8ed7":"markdown","449e3d70":"markdown","3b8b4517":"markdown","95b3b91c":"markdown","953274df":"markdown","c3e2c43c":"markdown","5f734a20":"markdown","e6a5f47b":"markdown","726c61bd":"markdown","5236dc8b":"markdown","f26090a4":"markdown","b16c72d8":"markdown","a75065e0":"markdown","4e25a1c0":"markdown","506488bc":"markdown"},"source":{"fffc812b":"\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","73ec24ca":"import numpy as np\nimport pandas as pd","8f947f97":"#Reading the csv file \"DATA-SET\" from the home directory using pandas and assigning to 'data_frame'\ndata_frame=pd.read_csv(\"\/kaggle\/input\/health-insurance\/insurance.csv\")","3605c058":"#To view the first 10 rows of the dataframe\ndata_frame.head(10)","d546d905":"shape=data_frame.shape\nprint(\"The Shape of the data set is\"+str(shape))","c22e9a93":"#to find the information of the dataframe\ninfo=data_frame.info()\ninfo","c01b17d7":"d_types=data_frame.dtypes\nd_types","56c4aac6":"null_table=data_frame.isnull().values.any()\nnull_table\nif(null_table):\n    print(\"There are missing values in the data set\")\nelse:\n    print(\"There are no missing values in the data set\")\n","b877a708":"#five point summary of age\nFive_point_summary_age=data_frame['age'].describe()\nFive_point_summary_age","7fd6ce99":"#Five point summary of bmi\nFive_point_summary_bmi=data_frame['bmi'].describe()\nFive_point_summary_bmi","d53a9ce2":"#Five point summary of children\nFive_point_summary_children=data_frame['children'].describe()\nFive_point_summary_children","be8ce770":"#Five point summary of charges\nFive_point_summary_charges=data_frame['charges'].describe()\nFive_point_summary_charges","49d3a38b":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","4a058725":"#Visualization of 5 point summary of age\nsns.boxplot(data_frame['age'])","1a72f724":"#Visualization of 5 point summary of bmi\nsns.boxplot(data_frame['bmi'])","a4ad11fb":"#Visualization of 5 point summary of children\nsns.boxplot(data_frame['children'])","83b37978":"#Visualization of 5 point summary of charges\nsns.boxplot(data_frame['charges'])","837ce200":"#Visualization of distribution of 'bmi'- Seems to follow normal distribution\nsns.distplot(data_frame['bmi'])","96e48aa5":"#visulaization of distribution of 'charges'- Seems to be exponential or gamma distribution\nsns.distplot(data_frame['charges'])","f9ff1384":"#Visulation of distribution of 'age'- Seems to be uniform distribution\nsns.distplot(data_frame['age'])","a54414ad":"#To measure the skew of 'age'\nskew_age=data_frame['age'].skew(axis=0)\nskew_age_string=str(skew_age)\nprint(\"The skew for 'age' is \"+skew_age_string)","27cd0abb":"#To measure the skew of 'bmi'\nskew_bmi=data_frame['bmi'].skew(axis=0)\nskew_bmi_string=str(skew_bmi)\nprint(\"The skew for 'bmi' is \"+skew_bmi_string)","edfd77fb":"#To measure the skew of 'charges'\nskew_charges=data_frame['charges'].skew(axis=0)\nskew_charges_string=str(skew_charges)\nprint(\"The skew for 'charges' is \"+skew_charges_string)","7ef8a97c":"from scipy.stats import skew","d200212b":"#Using scipy.stats.skew to identify skew\nSkew_age=str(skew(data_frame['age']))\nSkew_bmi=str(skew(data_frame['bmi']))\nSkew_charges=str(skew(data_frame['charges']))\n\nprint(\"The skew values for age, bmi and charges are \"+Skew_age,Skew_bmi,Skew_charges)","5bcc17e0":"# Function to detect outliers\noutlier=[]\ndef outlier_data(data):\n    mean= np.mean(data)\n    standard_deviation=np.std(data)\n    threshold=3\n    outlier=[]\n\n    \n    for x in data:\n        z_score=(x-mean)\/standard_deviation\n        if np.abs(z_score)>threshold:\n            outlier.append(x)\n            \n    return outlier","3d2e804b":"#The outliers of BMI\noutliers_bmi=outlier_data(data_frame['bmi'])\nprint(\"The outliers of bmi are \"+str(outliers_bmi))\nprint(\"The # of outliers of bmi are \"+str(len(outliers_bmi)))","3f0d36fb":"#The outliers of Age\noutliers_age=outlier_data(data_frame['age'])\nprint(\"The outliers of age are \"+str(len(outliers_age)))","7e98c973":"#The outliers of charges\noutliers_charges=outlier_data(data_frame['charges'])\nprint(\"The outliers of charges are \"+str(outliers_charges))\nprint(\"The # of outliers of charges are \"+str(len(outliers_charges)))","e13e6ddd":"#Categorical visualization of sex\nsns.countplot(data_frame['sex'])","025e14b0":"#Categorical visualization of smoker\nsns.countplot(data_frame['smoker'])","e3c581a1":"#Categorical visualization of region\nsns.countplot(data_frame['region'])","baf5c2c2":"#Categorical visualization of 'children'\nsns.countplot(data_frame['children'])","ffee7ef0":"#pair plot to decribe the relations between different attributes\nsns.pairplot(data_frame)","53ebf271":"#To visualize relation between sex and charges\nsns.catplot(x='sex',y='charges', data=data_frame)","a7bfd749":"#To visualize relation between smoker and charges\nsns.catplot(x='smoker',y='charges', data=data_frame)","4db67a16":"#To visualize relation between smoker and region\nsns.catplot(x='region',y='charges', data=data_frame)","46343dbe":"# Grouping the data by 'smoker' and viewing the charges\ngroupby_data_smoker=data_frame.groupby('smoker')['charges']\ngroupby_data_smoker.describe().transpose()","db45f1b3":"#Creating a new dataframe with just smoker and charges\ndata_frame_2=data_frame[['smoker','charges']]\n#data_frame_2","19df5148":"#Grouping data based on Smokers='Yes'\ngrouped_Data_smokers=data_frame_2[data_frame_2['smoker']=='yes']\n#grouped_Data_smokers","ee59d8ed":"#Grouping data based on Smokers='No'\ngrouped_Data_non_smokers=data_frame_2[data_frame_2['smoker']=='no']","c3dcf100":"#Taking up charges for smokers\ncharges_of_smokers=grouped_Data_smokers['charges']","345a818f":"#Taking up charges for non-smokers\ncharges_of_non_smokers=grouped_Data_non_smokers['charges']","d488960b":"#Converting to numpy array of charges of smokers and taking a sample\narray_of_smokers=np.array(charges_of_smokers)\nlen(array_of_smokers)\nsample_array_smokers=np.random.choice(a=array_of_smokers,size=100)","c5717c98":"#Converting to numpy array of charges of non-smokers and taking a sample\narray_of_non_smokers=np.array(charges_of_non_smokers)\nlen(array_of_non_smokers)\nsample_array_non_smokers=np.random.choice(a=array_of_non_smokers,size=100)","0c7689e0":"#mean of array of smokers\nmean_smokers=sample_array_smokers.mean()\nmean_smokers","65c376d9":"#mean of array of non-smokers\nmean_non_smokers=sample_array_non_smokers.mean()\nmean_non_smokers","06ff4d57":"from scipy import stats\nalpha=0.01","a994b784":"#calculating the t-statistic and p-value\ntstatistic,p_value=stats.ttest_ind(sample_array_smokers,sample_array_non_smokers)","0a2a2237":"print(\"T-statistic is \"+str(tstatistic))","91373628":"print(\"P-value is \"+str(p_value))","55df0031":"if(p_value<alpha):\n    print(\"The p-value \"+str(p_value)+\" is less than alpha, Hence reject the null hypothesis and we infer charges for smokers are not equal to charges for non-smokers\")\nelse:\n    print(\"The p-value \"+str(p_value)+\" is more than alpha, Hence failing to reject the null hypothesis  and we infer charges for smokers equal to charges for non-smokers\")","3eefb6f1":"#Creating a new dataframe with just bmi and sex\ndata_frame_3=data_frame[['sex','bmi']]","9ee74668":"#Grouping data based on sex='male'\ngrouped_Data_male=data_frame[data_frame_3['sex']=='male']","0424e52d":"#Grouping data based on sex='female'\ngrouped_Data_female=data_frame[data_frame_3['sex']=='female']","20af3722":"#Taking up bmi for male\nmale_bmi=grouped_Data_male['bmi']","d752460c":"#Taking up bmi for female\nfemale_bmi=grouped_Data_female['bmi']","d1b4e4fc":"#Converting to numpy array of bmi of male\narray_of_male_bmi=np.array(male_bmi)\nlen(array_of_male_bmi)\nsample_array_male_bmis=np.random.choice(a=array_of_male_bmi,size=100)","b1e1291d":"#Converting to numpy array of bmi of female\narray_of_female_bmi=np.array(female_bmi)\nlen(array_of_female_bmi)\nsample_array_female_bmis=np.random.choice(a=array_of_female_bmi,size=100)","be7267c3":"mean_male_bmi= sample_array_male_bmis.mean()\nmean_male_bmi","6885a4c9":"mean_female_bmi=sample_array_female_bmis.mean()\nmean_female_bmi","97aee3fc":"alpha1=0.01","88086967":"tstatistic_1,p_value_1= stats.ttest_ind(sample_array_male_bmis,sample_array_female_bmis)","6f894dd0":"print(\"T-statistic is \"+str(tstatistic_1))","04779c6c":"print(\"P-value is \"+str(p_value_1))","6b26b1d8":"if p_value_1<alpha1:\n    print(\"The p-value \"+str(p_value_1)+\" is less than alpha, Hence reject the null hypothesis  and we infer bmi for males are not equal to bmi for females \")\nelse:\n    print(\"The p-value \"+str(p_value_1)+\" is more than alpha, Hence failing to reject the null hypothesis  and we infer bmi for males equal to bmi for females\")","b06b0357":"#Creating a new data_frame with just 'sex' and 'smoker'\ndata_frame_4=data_frame[['sex','smoker']]\n#data_frame_4","d3584a71":"#Grouping data based on sex='male' and sex='female'\ngrouped_male=data_frame_4[data_frame_4['sex']=='male'].smoker.value_counts()\nprint(grouped_male)\ngrouped_female=data_frame_4[data_frame_4['sex']=='female'].smoker.value_counts()\nprint(grouped_female)","fd35997d":"#Taking only the smokers in both male and female in consideration\n[male_smokers,female_smokers]=[grouped_male[1],grouped_female[1]]\nprint([male_smokers,female_smokers])","c9470876":"male_female=data_frame_4.sex.value_counts()","085eaeec":"#taking in the number of males and females \nnumber_of_males=male_female[0]\nnumber_of_females=male_female[1]\nprint([number_of_males,number_of_females])","c205ac9c":"propotion_of_male_smoker=159\/676\nprint(\"The propotion of male smoker is \"+str(propotion_of_male_smoker))","23fec9ee":"propotion_of_female_smoker=115\/662\nprint(\"The propotion of female smoker is \"+str(propotion_of_female_smoker))","da6fa27c":"\nfrom statsmodels.stats.proportion import proportions_ztest\n\nalpha2=0.01\nz_stat, p_value2=proportions_ztest([male_smokers,female_smokers],[number_of_males,number_of_females])\nprint(\"The value of the z-statistic is \"+str(z_stat))\nprint(\"The p-value associated is \"+str(p_value2))","2d813a19":"if p_value2<alpha2:\n    print(\"The p-value \"+str(p_value2)+\" is less than alpha, Hence reject the null hypothesis and we infer that the propotions are not equal\")\nelse:\n    print(\"The p-value \"+str(p_value2)+\" is more than alpha, Hence failing to reject the null hypothesis and we infer that the propotions are equal\")","ecfa46a7":"data_frame_5=data_frame[['sex','children','bmi']]","6d97c192":"data_frame_5.head()","0fc534ff":"#Filtering out the data-frame for only female that we are interested in\nfemale_data_frame=data_frame_5[data_frame_5['sex']=='female']\nfemale_data_frame.head()","0fed56fb":"#Further down filtering down only females with no children\nfemale_no_children=female_data_frame[female_data_frame['children']==0]\nfemale_no_children=female_no_children.drop(['children'],axis=1)\nfemale_no_children=female_no_children.reset_index()\nfemale_no_children=female_no_children.drop(['index'],axis=1)\nfemale_no_children.head()","129f0a0f":"#taking a sample of 100 females with no children and converting to numpy array\nbmi_female_no_children=female_no_children['bmi']\nsample_array_female_no_children_bmis=np.random.choice(a=bmi_female_no_children,size=100)\nsample_array_female_no_children_bmis","19ad47ba":"#Further down filtering down only females with 1 children\nfemale_1_children=female_data_frame[female_data_frame['children']==1]\nfemale_1_children=female_1_children.drop(['children'],axis=1)\nfemale_1_children=female_1_children.reset_index()\nfemale_1_children=female_1_children.drop(['index'],axis=1)\nfemale_1_children.head()","0a971daf":"#taking a sample of 100 females with 1 children and converting to numpy array\nbmi_female_1_children=female_1_children['bmi']\nsample_array_female_1_children_bmis=np.random.choice(a=bmi_female_1_children,size=100)\nsample_array_female_1_children_bmis","e3fc3b5a":"#Further down filtering down only females with 2 children\nfemale_2_children=female_data_frame[female_data_frame['children']==2]\nfemale_2_children=female_2_children.drop(['children'],axis=1)\nfemale_2_children=female_2_children.reset_index()\nfemale_2_children=female_2_children.drop(['index'],axis=1)\nfemale_2_children.head()","202948d6":"#taking a sample of 100 females with 2 children and converting to numpy array\nbmi_female_2_children=female_2_children['bmi']\nsample_array_female_2_children_bmis=np.random.choice(a=bmi_female_1_children,size=100)\nsample_array_female_2_children_bmis","d81e3c70":"print(\"The sample mean for female with no children is \"+str(sample_array_female_no_children_bmis.mean()))","a53c0166":"print(\"The sample mean for female with 1 child is \"+str(sample_array_female_1_children_bmis.mean()))","65b92791":"print(\"The sample mean for female with 2 children is \"+str(sample_array_female_2_children_bmis.mean()))","71d6d21e":"#Let us visualize the mean bmi graphically\nmean_bmi_df = pd.DataFrame()\n\ndframe1            = pd.DataFrame({'Children': '0', 'BMI':sample_array_female_no_children_bmis})\ndframe2            = pd.DataFrame({'Children': '1', 'BMI':sample_array_female_1_children_bmis})\ndframe3            = pd.DataFrame({'Children': '2', 'BMI':sample_array_female_2_children_bmis})\n\nmean_bmi_df = mean_bmi_df.append(dframe1) \nmean_bmi_df = mean_bmi_df.append(dframe2) \nmean_bmi_df = mean_bmi_df.append(dframe3) \n","d4e0b287":"sns.boxplot(x = \"Children\", y = \"BMI\", data = mean_bmi_df)\nplt.show()  ","d0d0be72":"import statsmodels.api         as     sm\nfrom   statsmodels.formula.api import ols\n \nanova = ols('BMI ~ Children', data = mean_bmi_df).fit()\nanova_table = sm.stats.anova_lm(anova, typ=2)\nprint(anova_table)","77192e8b":"# Using One Way ANOVA test\n#Null Hypothesis Ho= Mean BMI of all women with 0, 1 and 2 children are equal\n#Alternate Hypothesis Ha= Mean BMI of all women with 0, 1 and 2 children are not equal\n#alpha is set at 0.1","c787ec73":"# To check if there are any null values in the data set","a2ab22f3":"# Pair plot that includes all the columns of the data frame","fbfe6002":"This project used Hypothesis Testing and Visualization to leverage customer's health information like smoking habits, bmi, age, and gender for checking statistical evidence to make valuable decisions of insurance business like charges for health insurance","bbdf5541":"# d. Is the distribution of bmi across women with no children, one child and two children, the same ?","dbeb8ed7":"# Distribution of categorical columns (include children)\n","449e3d70":"# Five-point summary of numerical attributes","3b8b4517":"# c. Is the propotion of smokers significantly different in different genders?","95b3b91c":"\n# To find the shape of the dataframe","953274df":"# Going with 2 sample t-test\n#Null Hypothesis Ho=bmi for males equal to bmi for females\n#Alternate Hypothesis Ha= bmi for males not equal to bmi for females\n#significance level, alpha=0.01","c3e2c43c":"# To find the data-types of columns in data set","5f734a20":"# Checking the presence of outliers in \u2018bmi\u2019, \u2018age\u2019 and \u2018charges columns","e6a5f47b":"# Import Libraries and read the data set and store it in data_frame","726c61bd":"# Going with propotions test\n#Null Hypothesis Ho= the propotions are equal\n#Alternate Hypothesis Ha= The propotions are not equal\n#Type 1 error alpha=0.01, 99% confidence","5236dc8b":"# b. Does bmi of males differ from that of women?","f26090a4":"# Distribution of \u2018bmi\u2019, \u2018age\u2019 and \u2018charges\u2019 columns","b16c72d8":"#In this case, p value is 0.715813 and it is more than our chosen level of signifance at 10%\n#So the statistical decision is to fail to reject the null hypothesis at 10% level of significance.","a75065e0":"# a. Do charges of people who smoke differ significantly from the people who don't?","4e25a1c0":"# Going with 2 sample t-test\n#Null Hypothesis Ho=charges for smokers equal to charges for non-smokers\n#Alternate Hypothesis Ha= charges for smokers are not equal to the charges for non smokers\n#significance level, alpha=0.01","506488bc":"# Measure of skewness of \u2018bmi\u2019, \u2018age\u2019 and \u2018charges\u2019columns"}}