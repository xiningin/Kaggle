{"cell_type":{"79de077b":"code","8bdc799a":"code","c9d7705d":"code","7b0d8cd3":"code","a0d8d696":"code","b1c48afa":"code","76f9c758":"code","deb6462f":"code","e8d30fe4":"code","7ab24f80":"code","276730df":"code","976eefd1":"code","d2e251b1":"code","82888062":"markdown","38ac47cc":"markdown","973a648e":"markdown","f4eb4d17":"markdown","42ead46a":"markdown","6838b6f0":"markdown","8a3f77e3":"markdown","1dc980ea":"markdown","26830d4d":"markdown"},"source":{"79de077b":"import numpy as np\nimport pandas as pd\n\n# Visualiza\u00e7\u00e3o dos dados\nimport seaborn as sns\n%matplotlib inline\n%pylab inline\n\nfrom matplotlib import pyplot as plt\nfrom matplotlib import style","8bdc799a":"#visualizar dados\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\nteste = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain.isnull().any()","c9d7705d":"#train['Embarked'].value_counts()\ntrain['Embarked'].fillna('S', inplace = True)\nembark = {'S':0, 'C':1, 'Q':2}\ntrain['Embarked'] = train['Embarked'].map(embark)\ngender = {'female':0, 'male':1}\ntrain['Sex'] = train['Sex'].map(gender)\ntrain['Age'] = train['Age'].fillna(train['Age'].mean())\ntrain['Fare'] = train['Fare'].fillna(train['Fare'].mean())\n\nteste['Embarked'].fillna('S', inplace = True)\nteste['Embarked'] = teste['Embarked'].map(embark)\nteste['Sex'] = teste['Sex'].map(gender)\nteste['Age'] = teste['Age'].fillna(teste['Age'].mean())\nteste['Fare'] = teste['Fare'].fillna(teste['Fare'].mean())\n\ntrain.head()","7b0d8cd3":"for name in train['Name']:\n    train['title'] = train['Name'].str.extract(\"([A-Za-z]+)\\.\",expand=True)\ntrain['title'].value_counts().index\ntitulo = train['title'].value_counts().index\ndef verifica_titulo(value):\n    for i in range(len(titulo)):\n        if re.search(titulo[i], value) is not None:\n            return i\ntrain['titulo'] = train['Name'].map(verifica_titulo)\nteste['titulo'] = teste['Name'].map(verifica_titulo)\npylab.hist(train['titulo'])","a0d8d696":"def verifica_cabine(value):\n    cabine = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    for i in range(len(cabine)):\n        if re.search(cabine[i],str(value)) is not None:\n            return i\ntrain['cabine'] = train['Cabin'].map(verifica_cabine)\nteste['cabine'] = teste['Cabin'].map(verifica_cabine)\npylab.hist(train['cabine'])","b1c48afa":"ticket = []\nfor name in train['Ticket']:\n    name = name.split(' ')[0]\n    name = name.split('\/')[0]\n    name = name.split('.')[0]\n    if name.isalpha():\n        ticket.append(name)\nletra_ticket = pd.Series(ticket).value_counts().index       \ndef verifica_ticket(value):\n    for i in range(len(letra_ticket)):\n        if re.search(letra_ticket[i], value) is not None:\n            return i\ntrain['passagem'] = train['Ticket'].map(verifica_ticket)\nteste['passagem'] = teste['Ticket'].map(verifica_ticket)\npylab.hist(train['passagem'])","76f9c758":"train['familia'] = train['SibSp']+train['Parch']+1\nteste['familia'] = teste['SibSp']+teste['Parch']+1\ntrain[\"sozinho\"] = train.familia.apply(lambda x: 1 if x == 1 else 0)\nteste[\"sozinho\"] = teste.familia.apply(lambda x: 1 if x == 1 else 0)\npylab.hist(train['sozinho'])\nprint(train.describe())","deb6462f":"from sklearn.model_selection import RepeatedKFold\nfrom sklearn.pipeline import Pipeline\nfrom sklearn import svm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nimport xgboost as xgb\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.naive_bayes import GaussianNB\n\nvariaveis = ['Pclass', 'Sex', 'Age',\n       'Embarked', 'titulo', 'passagem', 'familia' , 'sozinho']\n\nX = train[variaveis].fillna(-1)\ny = train['Survived']\nprint(X.columns)\n\n#treino com valida\u00e7\u00e3o cruzada\nclassifiers = ['LinSVM',\n               'RadSVM',\n               'LogisticReg', \n               'RForestClass',\n               'ABoostClass', \n               'XGBoostClass',\n               'KNClass',\n               'GBoostingClass',\n               'GaussianNB'\n              ]\nmodel = [svm.SVC(kernel='linear'),\n          svm.SVC(kernel='rbf'),\n          LogisticRegression(max_iter = 1000),\n          RandomForestClassifier(min_samples_leaf = 3, min_samples_split = 3, n_estimators=200, max_features='auto',oob_score=True,random_state=0,n_jobs=-1),\n          AdaBoostClassifier(random_state = 0),\n          xgb.XGBClassifier(n_estimators=100),\n          KNeighborsClassifier(),\n          GradientBoostingClassifier(random_state=0),\n          GaussianNB()\n        ]\n\nmethods = pd.DataFrame()\ni=0\nkf = RepeatedKFold(n_splits=2, n_repeats=10, random_state = 10)\nfor modelo in model:\n    resultados = []\n    for linhas_treino, linhas_valid in kf.split(X):\n        X_treino, X_valid = X.iloc[linhas_treino], X.iloc[linhas_valid]\n        y_treino, y_valid = y.iloc[linhas_treino], y.iloc[linhas_valid]\n        modelo.fit(X_treino, y_treino)\n        p = modelo.predict(X_valid)\n        acc = np.mean(y_valid == p)\n        #acc = modelo.score(X_treino, y_treino)\n        resultados.append(acc)\n        #print(classifiers[i]+str(j), len(p))\n    #print(classifiers[i],mean(resultados))\n    methods[classifiers[i]] = resultados\n    i+=1\nprint(methods.mean().sort_values(ascending=False))","e8d30fe4":"#methods.mean().sort_values(ascending=False).index","7ab24f80":"classifiers = [#'LinSVM',\n               #'RadSVM',\n               #'LogisticReg', \n               'RForestClass',\n               #'ABoostClass', \n               #'XGBoostClass',\n               #'KNClass',\n               #'GBoostingClass',\n               #'GaussianNB'\n              ]\nmodel = [#svm.SVC(kernel='linear'),\n          #svm.SVC(kernel='rbf'),\n          #LogisticRegression(max_iter = 1000),\n          RandomForestClassifier(min_samples_leaf = 3, min_samples_split = 3, n_estimators=200, max_features='auto',oob_score=True,random_state=0,n_jobs=-1),\n          #AdaBoostClassifier(random_state = 0),\n          #xgb.XGBClassifier(n_estimators=100),\n          #KNeighborsClassifier(),\n          #GradientBoostingClassifier(random_state=0),\n          #GaussianNB()\n        ]\n\nfrom sklearn.model_selection import train_test_split\nclassification = pd.DataFrame()\ni=0\nresultados = []\nfor modelo in model:\n    X_treino, X_valid, y_treino, y_valid = train_test_split(X, y, test_size=0.3)\n    modelo.fit(X_treino, y_treino)\n    p = modelo.predict(X_valid)\n    acc = np.mean(y_valid == p)\n    #acc = modelo.score(X_treino, y_treino)\n    #print(classifiers[i]+str(j), len(p))\n    classification[classifiers[i]] = p\n    resultados.append(acc)\n    i+=1\nprint('accuracy:',mean(resultados))\nprint(classification.shape)\n#print(classification.sum(axis=1)\/classification.shape[1])","276730df":"P = pd.DataFrame()\nP['S'] = classification.sum(axis=1)\/classification.shape[1]\npeso = P['S'].mean()\n#peso = 0.5\ndef contar_maioria(value):\n    if value > peso:\n        return 1\n    else: return 0\nP['S'] = P['S'].map(contar_maioria)\nP['True'] = y_valid.reset_index(drop=True)\n#print(np.mean(P['True'].to_numpy == P.to_numpy))\npylab.hist(P['S'],alpha=0.4)\npylab.hist(P['True'],alpha=0.4)\n\nprint('acertos:',np.mean(P['True'] == P['S']))\nprint('de:',P.shape[0])","976eefd1":"output = pd.DataFrame()\ni=0\nfor modelo in model:\n    modelo.fit(X, y)\n    p = modelo.predict(teste[variaveis].fillna(-1))\n    output[classifiers[i]] = p\n    print(len(p))\n    i+=1\nprint(output.describe())","d2e251b1":"#ajustar previs\u00e3o para valida\u00e7\u00e3o\nsub = pd.Series(p, index=teste['PassengerId'], name='Survived')\nsub.to_csv(classifiers[0]+'.csv',header=True)\nprint('done (^-^)V')","82888062":"# TESTE","38ac47cc":"# NOVAS VARIAVEIS","973a648e":"> # IMPORTA DADOS DE TESTE E TREINO","f4eb4d17":"# Teste de erros","42ead46a":"# RandomForestClassifier melhor precisao","6838b6f0":"# AJUSTE DE VARIAVEIS\n\nsurvival:   Sobrevivente\nPassengerId: ID \u00fanico de um passageiro\npclass: Classe de bilhetes  \nsex:    Sexo\nAge:    Idade em anos   \nsibsp:  N\u00famero de irm\u00e3os \/ c\u00f4njuges a bordo do Titanic  \nparch:  N\u00famero de pais \/ filhos a bordo do Titanic  \nticket: Numero do bilhete   \nfare:   Tarifa de passageiros   \ncabin:  N\u00famero de cabine    \nembarked:   Porto de embarca\u00e7\u00e3o","8a3f77e3":"# BIBLIOTECAS","1dc980ea":"# SUBMISSAO","26830d4d":"# METODOS"}}