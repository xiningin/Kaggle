{"cell_type":{"59b11d65":"code","a17188bb":"code","995a38e1":"code","82b36bdd":"code","29ceaa8e":"code","038872c9":"code","2efb8ed3":"code","7ecad315":"code","a834fb15":"code","be90014e":"code","d47d0f90":"markdown","a79f05e9":"markdown","f829b9fd":"markdown","70c51e88":"markdown","e3d379dd":"markdown","7b90247e":"markdown"},"source":{"59b11d65":"import numpy as np\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import TensorDataset\nfrom torch.utils.data import DataLoader\nimport torch.nn.functional as F","a17188bb":"inputs = np.array([[73, 67, 43], [91, 88, 64], [87, 34, 58], \n                   [20, 43, 37], [69, 96, 70], [73, 67, 43], \n                   [91, 88, 64], [87, 34, 58], [12, 43, 37], \n                   [69, 96, 70], [73, 67, 43], [91, 88, 64], \n                   [87, 14, 58], [12, 43, 37], [69, 96, 70]], \n                  dtype='float32')\ntargets = np.array([[0.0], [1.0], [0.0], \n                    [0.0], [1.0], [0.0], \n                    [1.0], [0.0], [1.0], \n                    [1.0], [0.0], [1.0], \n                    [0.0], [0.0], [1.0]], \n                   dtype='float32')\ntargets = torch.from_numpy(targets)\ninputs = torch.from_numpy(inputs)\n","995a38e1":"model = nn.Linear(3, 1)\nprint(model.weight)\nprint(model.bias)","82b36bdd":"preds = model(inputs)\nprint(preds)","29ceaa8e":"loss_fn = F.mse_loss\nloss = loss_fn(model(inputs), targets)\nprint(loss)","038872c9":"opt = torch.optim.SGD(model.parameters(), lr=0.00001)","2efb8ed3":"def fit(num_epochs, model, loss_fn, opt):\n    \n    # Repeat for given number of epochs\n    for epoch in range(num_epochs):\n        # 1. Generate predictions\n        pred = model(inputs)\n            \n            # 2. Calculate loss\n        loss = loss_fn(pred, targets)\n            \n            # 3. Compute gradients\n        loss.backward()\n            \n            # 4. Update parameters using gradients\n        opt.step()\n            \n            # 5. Reset the gradients to zero\n        opt.zero_grad()\n        \n        # Print the progress\n        if (epoch+1) % 10 == 0:\n            \n            print('Epoch [{}\/{}], Loss: {:.4f}'.format(epoch+1, num_epochs, loss.item()))","7ecad315":"fit(900000, model, loss_fn, opt)\n","a834fb15":"preds=model(inputs)","be90014e":"print(targets)#\/to be predicted\nprint(preds) #predicted\n","d47d0f90":"*Calculating the loss***","a79f05e9":"**Importing packages**","f829b9fd":"**Lets check the predicted values**","70c51e88":"**Defining a model**","e3d379dd":"**Since the input is a small dataset the predicted values are nearly equal to the target values, but not excatly the same. **","7b90247e":"**Inputs & Targets**"}}