{"cell_type":{"b6c8653b":"code","aa14f685":"code","94b48697":"code","7172b460":"code","f29efa44":"code","4f154f72":"code","a20bb50b":"code","ec397984":"code","363e696b":"code","03a9b2c8":"code","b023a9fe":"code","ceb44ce3":"code","016595a0":"code","6c5e44f5":"code","88d01ac0":"code","d2f10252":"code","2f2d0904":"code","45900770":"code","43787132":"code","b95e28ca":"code","e14db410":"code","e0647606":"code","b73dd869":"code","455e156b":"code","ff74c853":"code","db88bedb":"code","680bacbe":"code","daf1ff72":"markdown","7b685085":"markdown","8c77194a":"markdown","ebc067ae":"markdown","c52e93ce":"markdown","fedbb48c":"markdown","5ee80443":"markdown","099bbf4e":"markdown","eb51732e":"markdown","7c86f492":"markdown","c6683fec":"markdown","6c50b8d1":"markdown"},"source":{"b6c8653b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa14f685":"train_df=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerId=test_df[\"PassengerId\"]","94b48697":"train_df.describe()\n\n\n\n","7172b460":"train_df.columns\ntrain_df.head(10)","f29efa44":"train_df.info()","4f154f72":"def bar_plot(variable):\n    \n    var = train_df[variable]\n    varValue = var.value_counts()\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n    \n    \n    \n    ","a20bb50b":"category1=[\"Survived\",\"Sex\",\"Pclass\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","ec397984":"category2=[\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","363e696b":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","03a9b2c8":"numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","b023a9fe":"# Plcass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","ceb44ce3":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","016595a0":"# Sibsp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","6c5e44f5":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","88d01ac0":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","d2f10252":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","2f2d0904":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","45900770":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","43787132":"train_df.head()","b95e28ca":"train_df.columns[train_df.isnull().any()]\n","e14db410":"train_df.isnull().sum()","e0647606":"train_df[train_df[\"Embarked\"].isnull()]","b73dd869":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","455e156b":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]\n","ff74c853":"train_df[train_df[\"Fare\"].isnull()]","db88bedb":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","680bacbe":"train_df[train_df[\"Fare\"].isnull()]\n","daf1ff72":"<a id=\"2\"><\/a> <br>\n# 2. Variables\n<font color=\"blue\">\n\n1. PassengerId\n1. Survived\n1. Pclass\n1. Name \n1. Sex \n1. Age\n1. SibSp\n1. Parch \n1. Ticket \n1. Fare \n1. Cabin \n1. Embarked","7b685085":"<a id = \"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","8c77194a":"<a id=\"3\"><\/a> <br>\n# Univarite variables analysis\n* Categorical analysis\n* Numerical analysis\n      \n     \n      ","ebc067ae":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","c52e93ce":"<a id=\"4\"><\/a> <br>\n## [Categorical analysis](#4)","fedbb48c":"dtypes: \n* float64(2)\n* int64(5)\n* object(5)","5ee80443":"<a id = \"9\"><\/a><br>\n## Find Missing Value","099bbf4e":"<a id = \"7\"><\/a><br>\n# Outlier Detection","eb51732e":"<a id=\"5\"><\/a> <br>\n## [Numerical analysis](#5)","7c86f492":"# Load and Check Data\n<font color=\"Blue\"><br>\n Content:\n1. [Load and Check Data](#1)\n1. [Variables](#2)\n    * [Univarite variables analysis](#3)\n        * [Categorical analysis](#4)\n        * [Numerical analysis](#5) \n1. [Basic Data Analysis](#6) \n1. [Outlier Detection](#7) \n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n\n    ","c6683fec":"<a id=\"1\"><\/a> <br>\n# 1. Load and Check Data","6c50b8d1":"<a id = \"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1"}}