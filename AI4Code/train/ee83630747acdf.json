{"cell_type":{"9af0a08f":"code","faa25380":"code","a5ed476d":"code","4e973c56":"code","03bb00e7":"code","98cb5f99":"code","a0afc78e":"code","69b27de1":"code","51e14b9e":"code","5888b068":"code","4736426f":"code","93a095d5":"code","a19fcf3c":"code","57a78360":"markdown","4a93727d":"markdown","8bba22e6":"markdown","bf51e826":"markdown","76b09b37":"markdown","15844ae3":"markdown","fc0781d7":"markdown","21d1b3d6":"markdown","00c227ae":"markdown"},"source":{"9af0a08f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","faa25380":"%%time\ntrain = pd.read_csv('..\/input\/train.csv', dtype={'acoustic_data': np.float32, 'time_to_failure': np.float32})","a5ed476d":"import plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport plotly.figure_factory as ff","4e973c56":"from scipy.signal import hilbert, hann, convolve","03bb00e7":"per = 5e-6","98cb5f99":"#Calculate Hilbert transform\nsignal = train.acoustic_data[:int(len(train)*per)]\nanalytic_signal = hilbert(signal)\namplitude_envelope = np.abs(analytic_signal)","a0afc78e":"trace0 = go.Scatter(\n    y = signal,\n    name = 'signal'\n)\n\ntrace1 = go.Scatter(\n    y = amplitude_envelope,\n    name = 'amplitude_envelope'\n)","69b27de1":"data = [trace0, trace1]\nlayout = go.Layout(\n    title = \"Part acoustic_data\"\n)\n\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig, filename = \"Part acoustic_data\")","51e14b9e":"#Calculate Hann func\nwin = hann(50)\nfiltered = convolve(signal, win, mode='same') \/ sum(win)","5888b068":"trace0 = go.Scatter(\n    y = signal,\n    name = 'signal'\n)\ntrace3 = go.Scatter(\n    y = filtered,\n    name= 'filtered'\n) \n\n\ndata = [trace0, trace3]\n\nlayout = go.Layout(\n    title = \"Part acoustic_data\"\n)\n\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig, filename = \"Part acoustic_data\")","4736426f":"def classic_sta_lta_py(a, nsta, nlta):\n    \"\"\"\n    Computes the standard STA\/LTA from a given input array a. The length of\n    the STA is given by nsta in samples, respectively is the length of the\n    LTA given by nlta in samples. Written in Python.\n    .. note::\n        There exists a faster version of this trigger wrapped in C\n        called :func:`~obspy.signal.trigger.classic_sta_lta` in this module!\n    :type a: NumPy :class:`~numpy.ndarray`\n    :param a: Seismic Trace\n    :type nsta: int\n    :param nsta: Length of short time average window in samples\n    :type nlta: int\n    :param nlta: Length of long time average window in samples\n    :rtype: NumPy :class:`~numpy.ndarray`\n    :return: Characteristic function of classic STA\/LTA\n    \"\"\"\n    # The cumulative sum can be exploited to calculate a moving average (the\n    # cumsum function is quite efficient)\n    sta = np.cumsum(a ** 2)\n\n    # Convert to float\n    sta = np.require(sta, dtype=np.float)\n\n    # Copy for LTA\n    lta = sta.copy()\n\n    # Compute the STA and the LTA\n    sta[nsta:] = sta[nsta:] - sta[:-nsta]\n    sta \/= nsta\n    lta[nlta:] = lta[nlta:] - lta[:-nlta]\n    lta \/= nlta\n\n    # Pad zeros\n    sta[:nlta - 1] = 0\n\n    # Avoid division by zero by setting zero values to tiny float\n    dtiny = np.finfo(0.0).tiny\n    idx = lta < dtiny\n    lta[idx] = dtiny\n\n    return sta \/ lta","93a095d5":"#Calculate STA\/LTA\nsta_lta = classic_sta_lta_py(signal, 50, 1000)","a19fcf3c":"trace0 = go.Scatter(\n    y = signal,\n    name = 'signal'\n)\n\n\ntrace4 = go.Scatter(\n    y = sta_lta,\n    name= 'sta_lta'\n) \n\n\ndata = [trace0,trace4]\n\nlayout = go.Layout(\n    title = \"Part acoustic_data\"\n)\n\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig, filename = \"Part acoustic_data\")","57a78360":"Thanks for reading! If you have interesting ideas on how to work with signal data, we will discuss in the comments.\nFurther ideas is the search of different frequency response characteristics and configuration of ML algorithms.\n\nLet's solve this problem and save many lives. Good luck.","4a93727d":" # [classic STA\/LTA](http:\/\/docs.obspy.org\/tutorial\/code_snippets\/trigger_tutorial.html#available-methods)","8bba22e6":"# Intro\nThis kernel is dedicated to exploration of LANL Earthquake Prediction Challenge. \nI suggest trying out different methods and functions that are used to process signals for feature extraction:\n* [Hilbert transform](http:\/en.wikipedia.org\/wiki\/Analytic_signal) \n* Smooth a pulse using a [Hann](http:\/\/en.wikipedia.org\/wiki\/Hann_function) window \n* Use trigger [classic STA\/LTA](http:\/\/docs.obspy.org\/tutorial\/code_snippets\/trigger_tutorial.html#available-methods)\n\nThank [Vishy](http:\/\/www.kaggle.com\/viswanathravindran) for his [discuss](http:\/\/www.kaggle.com\/c\/LANL-Earthquake-Prediction\/discussion\/77267) and links.","bf51e826":"The Hann function is typically used as a window function in digital signal processing to select a subset of a series of samples in order to perform a Fourier transform or other calculations.","76b09b37":"# Smooth a pulse using a [Hann](http:\/\/en.wikipedia.org\/wiki\/Hann_function) window ","15844ae3":"#  [Hilbert transform](http:\/en.wikipedia.org\/wiki\/Analytic_signal) ","fc0781d7":"The algorithm for calculating the entry times of seismic and acoustic waves is based on the calculation of the envelope signal using the algorithm STA\/LTA, widely used in the world to detect seismic signals of pulse shape.\n\nThe STA\/LTA algorithm processes an already filtered signal using two time-moving Windows (\"moving average\"): a short time Average window (\"Short time Average window\") and a long time Average window (\"long time Average\"). STA calculates an estimate of the value of the \"instantaneous\" amplitude of the useful signal (for example, the p-wave of an industrial explosion), LTA estimates the average value of the noise in the long section. Next, the STA\/LTA ratio of the two values calculated for each new reference signal received at the input of the algorithm is calculated.","21d1b3d6":"![](https:\/\/pp.userapi.com\/c848636\/v848636381\/10387a\/82TkN23uVpQ.jpg)","00c227ae":" In mathematics and signal processing, an analytic signal is a complex-valued function that has no negative frequency components.  The real and imaginary parts of an analytic signal are real-valued functions related to each other by the Hilbert transform.\n\nThe basic idea is that the negative frequency components of the Fourier transform (or spectrum) of a real-valued function are superfluous, due to the Hermitian symmetry of such a spectrum. These negative frequency components can be discarded with no loss of information, provided one is willing to deal with a complex-valued function instead.\n\n**If you don't want to understand math, just look at how the signal function changes :)**"}}