{"cell_type":{"f7b5b635":"code","bfa94b85":"code","130ec378":"code","327ae00c":"code","2c74a7f5":"code","188c5fc8":"code","b167b18b":"code","6e2afe8e":"markdown"},"source":{"f7b5b635":"import os\nfrom time import time\nimport psutil\n!pip install numba==0.50 \nimport numpy as np \nimport pandas as pd \n\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nimport umap\n\n!pip install trimap\nimport trimap\n\n!pip install pacmap==0.4\nimport pacmap\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt \nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nseed=123\nnp.random.seed(seed)","bfa94b85":"Data = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\")\nData.drop(columns=[c for c in Data.columns if \"Soil_Type\" in c or \"Id\" in c], inplace=True)","130ec378":"def Normalization(DF, cols):\n    DF=DF.copy()\n    for c in cols:\n        DF[f\"{c}\"] = ((DF[\"{}\".format(c)]-DF[\"{0}\".format(c)].mean()) \/ DF[\"{}\".format(c)].std())\n        \n    return DF","327ae00c":"Data = Normalization(DF=Data, cols=Data.drop(columns=[\"Cover_Type\"]).columns)\nData=Data.sample(frac=0.1, random_state=seed)","2c74a7f5":"methods={\n    \"PCA\": PCA(2),\n    \"tSNE\": TSNE(n_components=2, perplexity=25),\n    \"UMAP\": umap.UMAP(n_components=2, n_neighbors=10, min_dist=0.75),\n    \"TriMap\": trimap.TRIMAP(verbose=False, n_inliers=5, n_outliers=7, n_random=12),\n    \"PaCMAP\": pacmap.PaCMAP(n_dims=2, n_neighbors=7)\n}","188c5fc8":"def viz(df, mdls, rows=5, cols=1):\n\n    fig, p = plt.subplots(nrows=rows, ncols=cols, figsize=(30,20*rows))\n\n    c=0\n    r=0\n    k=0\n\n    for c in range(cols):\n        for r in range(int(rows\/cols)):\n            start = time()\n            print(list(mdls.values())[k], \"Transforming...\")\n            transformed=list(mdls.values())[k].fit_transform(df[df.columns[1:]].values)\n            end = time()\n            print(\n                list(mdls.values())[k],\n                \"Transformed in\",\n                str(round(end - start)),\n                \"seconds.\",\n                \"RAM usage:\",\n                str(psutil.virtual_memory()[2]) + \"%\"\n            )\n            Reduced = pd.DataFrame(transformed)\n            if cols != 1:\n                scatter = p[r, c].scatter(\n                    x=Reduced[0],\n                    y=Reduced[1],\n                    c=df[\"Cover_Type\"],\n                    cmap=\"tab10\",\n                    alpha=0.9\n                    )\n                p[r, c].set_title(list(mdls.keys())[k], fontsize=20)\n                lgnd = p[r, c].legend(\n                    *scatter.legend_elements(),\n                    loc=\"upper left\", \n                    title=\"Cover_Type\",\n                    title_fontsize=18,\n                    fontsize=18\n                )\n                p[r, c].add_artist(lgnd)\n                p[r, c].grid(False)\n\n            else:\n                scatter = p[r].scatter(\n                    x=Reduced[0],\n                    y=Reduced[1],\n                    c=df[\"Cover_Type\"],\n                    cmap=\"tab10\",\n                    alpha=0.9\n                    )\n                p[r].set_title(list(mdls.keys())[k], fontsize=20)\n                lgnd = p[r].legend(\n                    *scatter.legend_elements(),\n                    loc=\"upper left\", \n                    title=\"Cover_Type\",\n                    title_fontsize=18,\n                    fontsize=18\n                )\n                p[r].add_artist(lgnd)\n                p[r].grid(False)\n\n            k+=1\n\n    plt.show()","b167b18b":"viz(Data, methods)","6e2afe8e":"This Notebook shows five methods to reduce dimensionality. For a deeper dive look at [this notebook](https:\/\/www.kaggle.com\/frankmollard\/a-story-about-unsupervised-learning)."}}