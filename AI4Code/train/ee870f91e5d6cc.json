{"cell_type":{"d18e05a1":"code","6e4490dc":"code","0174583f":"code","11058bc5":"code","9e6ff0b1":"code","97ce0153":"code","79392478":"code","0f169a45":"code","e56e15b0":"code","4e50d0d0":"code","2ee0a356":"code","910f864f":"code","5be11458":"code","9878f7e3":"code","d1db12cf":"code","505136eb":"code","202b4d1f":"code","cf4fa874":"code","a7b771e2":"code","ca0a3eee":"code","fe69d10b":"code","fa98dd7d":"code","68110300":"code","ab1a16a1":"code","239b2a2e":"code","37b43d12":"code","6ae024f9":"code","1e4008b9":"code","f03939aa":"code","524bc599":"code","b88d454d":"code","3570cb7c":"code","40c2a0c1":"code","1765789c":"code","b643d383":"code","f9db8cce":"code","fd30c57c":"code","4dc339fa":"code","125450ac":"code","86247107":"code","f2998755":"code","b132d3d4":"code","4e3e5d07":"code","cec9530a":"code","0490cea2":"code","d6cda077":"code","f74721f3":"code","a31f4b45":"code","ab436f0f":"code","c79d430d":"code","dac6ef37":"code","d8c219e3":"code","34e0ef54":"code","e6ecf9bd":"code","7d1547b2":"code","fc08b4ff":"code","7a4af675":"code","7bcc25e5":"code","cf7d1c38":"code","07a8d17d":"code","f6d77551":"code","e05b07b2":"code","e49b7996":"code","f4c3a0e6":"code","7271cfa1":"code","2aa138d5":"code","d3d22668":"code","535ce726":"code","6d13ba4a":"code","14e28cf9":"code","baec6acf":"code","79170116":"code","9c99a763":"code","ec3a29a3":"code","cc83386b":"code","01d48e62":"code","d1c41e8d":"code","904d7ab7":"code","4e860fdc":"code","09f3877b":"code","7c648c80":"code","3177a875":"code","510ee188":"code","d1b52d75":"code","d83563d0":"code","985d74ce":"code","9599511e":"code","7c53fd3b":"code","723d7adc":"code","9015d6e4":"code","421667df":"code","57425bd8":"code","5cd2bbfe":"code","6f73c225":"code","7905ed95":"code","92e0175b":"code","4f32d128":"code","af9951ed":"code","d0812151":"code","664e7217":"code","558f2912":"code","3d9e59f9":"code","004b4101":"code","8d359271":"code","2c5ab5b0":"code","cffff1b0":"code","12ccd086":"code","4a1a7684":"code","8897c0b1":"code","71fba12d":"code","0e791f8c":"code","33fa014c":"code","0c112726":"code","b5f27b09":"code","fdd8b486":"code","07ebdb71":"code","6fa2d371":"code","1f28c714":"code","668684f7":"code","f0ba2494":"code","f39ca0be":"code","098e3226":"code","904ae940":"code","1b994ad2":"code","f0d7d388":"code","4ce5eb45":"code","3eca2d6c":"code","93f0fd9b":"code","23f2b486":"code","7dc62feb":"code","0964038e":"code","e2dd39e5":"code","f6f2d2f0":"code","a8b1b9d5":"code","7ca832a3":"code","b1dbe6f5":"code","e7ce6055":"code","695eee2e":"code","61002485":"markdown","4c196bf8":"markdown","a92f1948":"markdown","0cd111d0":"markdown","aecb3a3a":"markdown","16013cf3":"markdown","d9969abc":"markdown","f8eecd9c":"markdown","73d0a09e":"markdown","c43f9c35":"markdown","dfb60cc3":"markdown","df7c1f53":"markdown","6147b6d9":"markdown","4d76cc23":"markdown"},"source":{"d18e05a1":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","6e4490dc":"df = pd.read_csv(\"..\/input\/titanic\/train.csv\")","0174583f":"data = df.copy()","11058bc5":"# first 5 observation\ndata.head()","9e6ff0b1":"# last 5 observation\ndata.tail()","97ce0153":"# The size of the data set \ndata.shape","79392478":"print(\"Number of rows in our Titanic Data set {0} and number of columns {1} \".format(data.shape[0],df.shape[1]))","0f169a45":"# Feature information\ndata.info()","e56e15b0":"# Variables \\ Columns\ndata.columns","4e50d0d0":"data.index","2ee0a356":"data.describe().T","910f864f":"# returns boolean values as a result of this\ndata.isnull().any() ","5be11458":"# Shows which variable has how many \"null\" variables.\ndata.isnull().sum() ","9878f7e3":"# Converts to array\ndata.isnull().values ","d1db12cf":"# any() it checks to see if there is any True in it. Returns as True if True otherwise False\ndata.isnull().values.any() ","505136eb":"# 'object' means 'categorical variable'\ndata.info()","202b4d1f":"# Catches categorical variables using the if cycle. \ncat_colsF = []\nfor col in data.columns:\n    if data[col].dtype == \"O\":\n        cat_colsF.append(col)\ncat_colsF","cf4fa874":"# Catches categorical variables using list comprehension.\ncat_cols = [col for col in data.columns if data[col].dtype==\"O\"]\ncat_cols","a7b771e2":"# Number of categorical variables\nlen(cat_cols)","ca0a3eee":"# What is the unique values of \"Survived\" variable\ndata[\"Survived\"].unique()","fe69d10b":"# How many unique values does the \"survival\" change have?\nlen(data[\"Survived\"].unique())","fa98dd7d":"# nunique returns that how many different unique value are in one column\ndata[\"Survived\"].nunique()","68110300":"# Let's create a list comprehension containing categorical variables inside.\n# If there are less than 10 unique data in a column, consider them as categorical variables as well.\n\ncat_cols = [col for col in data.columns if len(data[col].unique()) <10]\ncat_cols","ab1a16a1":"len(cat_cols)","239b2a2e":"df[cat_cols].nunique()","37b43d12":"# We examined the unique values in the \"Survived\" variable and looked at how many unique values are there.\ndata[\"Survived\"].value_counts()","6ae024f9":"sns.countplot(x=\"Sex\", data=data);","1e4008b9":"# percentiles of unique values\n(data[\"Survived\"].value_counts()\/len(data))*100","f03939aa":"def cat_summary(df): \n   \n    cat_names = [col for col in df.columns if len(df[col].unique()) < 10] \n    for col in cat_names:\n        print(pd.DataFrame({col: df[col].value_counts(),\n                           \"Ratio\": 100 * df[col].value_counts()\/ len (df)}), end = \"\\n\\n\\n\")\n        sns.countplot(x = col, data = df) \n        plt.show() ","524bc599":"cat_summary(data)","b88d454d":"cat_cols = [col for col in data.columns if data[col].dtype == \"O\"]","3570cb7c":"cat_cols","40c2a0c1":"def cat_summary(df, categorical_cols, number_of_classes=10):\n    \n    var_count = 0  # Kac kategorik degisken oldugu\n    vars_more_classes = []  \n    \n    for var in df:\n        if var in categorical_cols:\n            if len(list(df[var].unique())) <= number_of_classes: \n                print(pd.DataFrame({var: df[var].value_counts(),\n                                    \"Ratio\": 100 * df[var].value_counts() \/ len(df)}),end=\"\\n\\n\\n\")\n                var_count += 1\n            else:\n                vars_more_classes.append(df[var].name)\n    print('%d categorical variables have been described' % var_count, end=\"\\n\\n\")\n    print('There are', len(vars_more_classes), \"variables have more than\", number_of_classes, \"classes\", end=\"\\n\\n\")\n    print('Variable names have more than %d classes:' % number_of_classes, end=\"\\n\\n\")\n    print(vars_more_classes)","1765789c":"cat_summary(data, cat_cols)","b643d383":"# Descriptive statistics\ndata.describe().T","f9db8cce":"# Examining percentage slices excluding quartiles\ndata.describe([0.05, 0.10, 0.25, 0.50, 0.75, 0.80, 0.90, 0.95, 0.99]).T","fd30c57c":"# What numerical variables are there?\nnum_cols = [col for col in data.columns if data[col].dtypes != \"O\"]\nnum_cols","4dc339fa":"print(\"in the Train data we have {0} numerical variables\".format(len(num_cols)))","125450ac":"# The \"passengerid\" variable does not affect the \"Survived\" variable. Let's remove them\nnum_cols = [col for col in data.columns if data[col].dtypes != \"O\" \n           and col not in \"PassengerId\"\n           and col not in \"Survived\"]\nnum_cols","86247107":"# Draw the histogram for the \"Age\" variable which is one of the numerical variables.\ndf[\"Age\"].hist()","f2998755":"# Draw the boxplot for the \"Age\" variable which is one of the numerical variables.\nsns.boxplot(x=\"Age\",data=data)","b132d3d4":"# Let's graph all of the numerical variables.\ndef hist_for_nums(df, numeric_cols):\n    \n    col_counter = 0 \n    \n    for col in numeric_cols:\n        \n        data[col].hist() # histogram \u00e7izen sat\u0131r\n        plt.xlabel(col) # x d\u00fczleminin ismi\n        plt.title(col) # grafi\u011fin ba\u015fl\u0131\u011f\u0131\n        plt.show() # olu\u015fan grafi\u011fin g\u00f6sterilmesini sa\u011flayan show() fonksiyonu\n        \n        col_counter += 1 # her d\u00f6ng\u00fcde de\u011feri 1 artt\u0131r\u0131yoruz\n        \n    print(col_counter, \"variables have been plotted\")","4e3e5d07":"hist_for_nums(data, num_cols)","cec9530a":"data.head()","0490cea2":"data[\"Survived\"].value_counts()","d6cda077":"# Target analysis according to 1 categorical variable \"Pclass\"\ndata.groupby(\"Pclass\")[\"Survived\"].mean()","f74721f3":"def target_summary_with_cat(data, target):\n   \n\n    cats_names = [col for col in df.columns if len(df[col].unique()) < 10 and col not in target] \n    \n    for var in cats_names:\n        print(pd.DataFrame({\"TARGET_MEAN\": df.groupby(var)[target].mean()}), end=\"\\n\\n\\n\")","a31f4b45":"target_summary_with_cat(df, \"Survived\")","ab436f0f":"# Name of Numerical Variables \nnum_cols","c79d430d":"# Let's examine the \"Fare\" variable according to the \"Survived\" variable.\ndata.groupby(\"Survived\").agg({\"Fare\": np.mean})","dac6ef37":"# The relationship between numerical variables with each other: correlation\ndata.corr()","d8c219e3":"data.head(n=3)","34e0ef54":"data.describe().T","e6ecf9bd":"sns.boxplot(x=data[\"Age\"])","7d1547b2":"data[\"Age\"].quantile(0.25)","fc08b4ff":"data[\"Age\"].quantile(.5)","7a4af675":"data[\"Age\"].quantile(0.75)","7bcc25e5":"# Creating a up and low quantiles limit to catch the outliers\nq1=data[\"Age\"].quantile(0.25)\nq3=data[\"Age\"].quantile(0.75)\niqr = q3-q1\nup = q3 + 1.5 * iqr\nlow = q1 - 1.5 *iqr","cf7d1c38":"up","07a8d17d":"low","f6d77551":"# Here we have accessed the outliers values.\ndata[(data[\"Age\"]<low) | (data[\"Age\"]> up)][[\"Age\"]]","e05b07b2":"# How many outlier observations are there?\ndata[(data[\"Age\"]<low) | (data[\"Age\"]> up)][[\"Age\"]].shape[0]","e49b7996":"# Questioning whether there is an outlier in a column\ndata[(data[\"Age\"]<low) | (data[\"Age\"]> up)].any(axis=None)","f4c3a0e6":"# Indicates which outlier observations are smaller or larger than outlier observations are accepted.\n\ndef outlier_thresholds(dataframe, variable):\n\n    quartile1 = dataframe[variable].quantile(0.25) # ilgili sutunun 0.25 quantile de\u011feri\n    quartile3 = dataframe[variable].quantile(0.75)#ilgili sutunun 0.75 quantile de\u011feri\n    interquantile_range = quartile3 - quartile1 # sutundaki 0.75 ile 0.25 de\u011ferlerin fark\u0131\n    up_limit = quartile3 + 1.5 * interquantile_range # ayk\u0131r\u0131 g\u00f6zlemleri belirlem i\u00e7in kullanca\u011f\u0131m\u0131z \u00fcst limit de\u011feri hesaplamas\u0131 \n    low_limit = quartile1 - 1.5 * interquantile_range # ayk\u0131r\u0131 g\u00f6zlemleri belirlem i\u00e7in kullanca\u011f\u0131m\u0131z alt limit de\u011feri hesaplamas\u0131 \n    return low_limit, up_limit # alt ve \u00fcst limitimiz return eden k\u0131s\u0131m ","7271cfa1":"outlier_thresholds(data, \"Age\")","2aa138d5":"low,up = outlier_thresholds(data, \"Age\")","d3d22668":"low","535ce726":"up","6d13ba4a":"# Function questioning whether there are outliers or not\n\ndef has_outliers(dataframe, variable):\n \n    low_limit, up_limit = outlier_thresholds(dataframe, variable) \n    if dataframe[(dataframe[variable]<low_limit) | (dataframe[variable]> up_limit)].any(axis=None): \n        print(variable, \"yes\") \n# If the result returns true, we will output yes.","14e28cf9":" has_outliers(data,\"Age\")","baec6acf":"# \"passengerid\" variable has no affect to the \"target\" variable, we need to remove it.\n","79170116":"num_names = [col for col in data.columns if len(data[col].unique()) > 10\n             and data[col].dtypes != 'O'\n             and col not in \"PassengerId\"]","9c99a763":"num_names","ec3a29a3":"for col in num_names:\n    has_outliers(data, col)","cc83386b":"# summary of function\ndef has_outliers(dataframe, num_col_names, plot=False):\n    \n    variable_names = []\n    \n    for col in num_col_names:\n        low_limit, up_limit = outlier_thresholds(dataframe, col)\n        \n        if dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].any(axis=None):\n            number_of_outliers = dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].shape[0] \n         \n            print(col, \":\", number_of_outliers)\n            variable_names.append(col) \n            \n            if plot:\n                sns.boxplot(x=dataframe[col]) \n                plt.show()\n                \n    return variable_names","01d48e62":"has_outliers(data, num_names)","d1c41e8d":"# checking the all numerical variables that how many outliers they have.\nhas_outliers(data, num_names, True)","904d7ab7":"# We found the outliers as age <low or age> up above.\n# Now we're going to exclude them and create a dataframe with no outliers\n\n\ndata[~((data[\"Age\"] < low) | (data[\"Age\"] > up))]","4e860fdc":"# Functions to delete these outliers\ndef remove_outliers(dataframe, variable):\n \n    low_limit, up_limit = outlier_thresholds(dataframe, variable) \n    df_without_outliers = dataframe[~((dataframe[variable] < low_limit) | (dataframe[variable] > up_limit))] \n                                                                                                             \n    return df_without_outliers ","09f3877b":"df1 = remove_outliers(data,\"Age\")\ndf1.shape","7c648c80":"# If we want to use this function for the num_cols we created, we can do it with a for loop.\nfor col in num_cols:\n    new_df = remove_outliers(data,col)","3177a875":"# Checking the our new DataFrame\n\nnew_df.shape","510ee188":"#eksik deger var mi yok mu?\ndata.isnull().values.any()","d1b52d75":"# How many NULL value has the data\ndata.isnull().sum()","d83563d0":"# Which columns have missing values?\ndata.columns[data.isnull().any()]","985d74ce":"# Sum of values in variables\ndata.isnull().sum().sum()","9599511e":"# observation units with at least one missing value\ndata[data.isnull().any(axis=1)]","7c53fd3b":"# observation units without missing values\ndata[data.notnull().all(axis=1)]","723d7adc":"# Sorting missing data\n(data.isnull().sum() \/ data.shape[0] * 100).sort_values(ascending=False)","9015d6e4":"def missing_values_table(dataframe):\n    \n    variables_with_na = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0]  #dataframede eksik veri olan sutunlar\u0131n adlar\u0131n\u0131n bir listeye al\u0131nmas\u0131 \n    \n    n_miss = dataframe[variables_with_na].isnull().sum().sort_values(ascending=False)  \n    ratio = (dataframe[variables_with_na].isnull().sum() \/ dataframe.shape[0] * 100).sort_values(ascending=False)\n    \n    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=['n_miss', 'ratio'])\n    print(missing_df) \n    return variables_with_na ","421667df":"cols_with_na = missing_values_table(data)","57425bd8":"cols_with_na","5cd2bbfe":"data.shape","6f73c225":"data.dropna()","7905ed95":"# Simple method of filling fillnas\ndata[\"Age\"].fillna(data[\"Age\"].mean(), inplace = True)","92e0175b":"missing_values_table(data)","4f32d128":"data[\"Sex\"].head()","af9951ed":"# label encoding library\nfrom sklearn import preprocessing","d0812151":"len(data[\"Sex\"].value_counts()) ## label encoder kullanabilmek i\u00e7in sutunda max 2 e\u015fsiz de\u011ferden olmal\u0131","664e7217":"label_encoder = preprocessing.LabelEncoder()","558f2912":"label_encoder.fit_transform(df[\"Sex\"])","3d9e59f9":"data[\"Sex\"].head()","004b4101":"# To restore the values\nlabel_encoder.inverse_transform([0,1])","8d359271":"def label_encoder(dataframe):\n    labelencoder = preprocessing.LabelEncoder() \n\n    label_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\" \n                  and len(dataframe[col].value_counts()) == 2]                     \n\n    for col in label_cols:\n        dataframe[col] = labelencoder.fit_transform(dataframe[col])\n    return dataframe","2c5ab5b0":"data.head()","cffff1b0":"data=label_encoder(data)","12ccd086":"data.head()","4a1a7684":"# get columns with more than 2 values\ndata[\"Embarked\"].value_counts()","8897c0b1":"data.shape","71fba12d":"pd.get_dummies(data,columns=[\"Embarked\"]).head()","0e791f8c":"pd.get_dummies(data,columns=[\"Embarked\"],drop_first=True).head()","33fa014c":"pd.get_dummies(data,columns=[\"Embarked\"],dummy_na = True).head()","0c112726":"def one_hot_encoder(dataframe, category_freq=10, nan_as_category=False):\n  \n    categorical_cols = [col for col in dataframe.columns if len(dataframe[col].value_counts()) < category_freq\n                        and dataframe[col].dtypes == 'O']\n    \n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, dummy_na=nan_as_category, drop_first=True) \n    \n    return dataframe","b5f27b09":"data = one_hot_encoder(data)","fdd8b486":"data.head()","07ebdb71":"dff=df.copy()","6fa2d371":"100*(dff[\"Parch\"].value_counts()\/len(dff))","1f28c714":"dff[\"Parch\"].unique()","668684f7":"len(dff[\"Parch\"].unique())","f0ba2494":"rr = dff[\"Parch\"].value_counts()\/len(dff)","f39ca0be":"rr","098e3226":"rare_labels = rr[rr<0.08].index\nrare_labels","904ae940":"dff[\"Parch\"] = np.where(dff[\"Parch\"].isin(rare_labels),\"RARE\",dff[\"Parch\"])","1b994ad2":"dff[\"Parch\"].value_counts()\/len(dff)","f0d7d388":"def rare_encoder(dataframe, rare_perc):\n    \n    tempr_df = dataframe.copy()\n\n    rare_columns = [col for col in tempr_df.columns if tempr_df[col].dtypes == 'O'\n                    and (tempr_df[col].value_counts() \/ len(tempr_df) < rare_perc).any(axis=None)] \n\n    for var in rare_columns: \n        tmp = tempr_df[var].value_counts() \/ len(tempr_df) #sutundaki frekanslari bulma\n        rare_labels = tmp[tmp < rare_perc].index # for d\u00f6ng\u00fcs\u00fc ile sutundaki rare encoding yapaca\u011f\u0131m\u0131z s\u0131n\u0131flar\u0131 belirliyoruz\n        tempr_df[var] = np.where(tempr_df[var].isin(rare_labels), 'Rare', tempr_df[var]) ## frekans\u0131 d\u00fc\u015f\u00fck olan s\u0131n\u0131flar\u0131n yerine \"Rare\" olarak at\u0131yoruz\n\n    return tempr_df","4ce5eb45":"df1=df.copy()","3eca2d6c":"df1[\"Parch\"] = df1[\"Parch\"].apply(lambda x: str(x))","93f0fd9b":"df1.nunique()","23f2b486":"df2=rare_encoder(df,0.08)","7dc62feb":"df2.nunique()","0964038e":"from sklearn.preprocessing import StandardScaler","e2dd39e5":"scaler = StandardScaler().fit(data[[\"Age\"]])","f6f2d2f0":"data.describe().T","a8b1b9d5":"data[\"Age\"] = scaler.transform(data[[\"Age\"]])\ndata.describe().T","7ca832a3":"df3=df.copy()\nfrom sklearn.preprocessing import RobustScaler\n\ntransformer = RobustScaler()\ntransformer.fit(df3[[\"Age\"]])\ndf3[\"Age\"] = transformer.transform(df3[[\"Age\"]])","b1dbe6f5":"df3.describe().T","e7ce6055":"df4=df.copy()\nfrom sklearn.preprocessing import MinMaxScaler\n\ntransformer = MinMaxScaler((-10, 10)).fit(df4[[\"Age\"]])\ndf4[\"Age\"] = transformer.transform(df4[[\"Age\"]])  \ndf4.describe().T","695eee2e":"df = data.copy()\ndf.head()\ndf.loc[((df['SibSp'] + df['Parch']) > 0), \"NEW_IS_ALONE\"] = \"NO\"\ndf.loc[((df['SibSp'] + df['Parch']) == 0), \"NEW_IS_ALONE\"] = \"YES\"\ndf.head()\n","61002485":"> # <font color='purple'> Exploratory Data Analysis with The Titanic Dataset<\/font> \n","4c196bf8":"Analysis of Numerical Variables","a92f1948":"### Catching the outliers","0cd111d0":"***Missing Value Analysis***","aecb3a3a":"Label Encoding","16013cf3":"### List comprehension  \n","d9969abc":"[[](http:\/\/)](http:\/\/)Numerical Variables Analysis","f8eecd9c":"***Standardization***","73d0a09e":"### for if cycle","c43f9c35":"***Feature Engineer***","dfb60cc3":"> > Target Analysis","df7c1f53":"Rare Encoding","6147b6d9":"One-Hot Encoding","4d76cc23":"![](http:\/\/)![](http:\/\/)Categorical Variable Analysis"}}