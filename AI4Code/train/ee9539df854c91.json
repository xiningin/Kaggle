{"cell_type":{"7947c14a":"code","52742626":"code","988eb502":"code","1261b5da":"code","cecda1f0":"code","04463275":"code","d74b5708":"code","d4f7ef81":"code","6fac056d":"code","f2483eb1":"code","31cd327c":"code","7dcb5f6a":"code","7be3a22b":"code","3a030fcb":"code","d0487ff7":"code","8f3b39b3":"code","b5edd417":"code","bb429308":"code","1c7e5133":"code","dcbe758a":"code","ea72aba0":"code","fd944008":"code","3c887be8":"code","1fd30b23":"code","0dd31e90":"code","120d18be":"code","a6d19a3a":"code","44de906c":"code","dc65765a":"code","089b649e":"code","6279bfeb":"code","f5063b3d":"code","17da1174":"code","48716cbf":"markdown","1d950035":"markdown","c8b3b614":"markdown"},"source":{"7947c14a":"import lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom imblearn.over_sampling import SMOTE","52742626":"train0 = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/test.csv\")","988eb502":"train0[0:3].T","1261b5da":"print(train0.columns)","cecda1f0":"Name0=train0['Cover_Type'].unique()\nName=sorted(Name0)\nprint(Name)","04463275":"N=list(range(len(Name)))  \nnormal_mapping=dict(zip(Name,N)) \nreverse_mapping=dict(zip(N,Name)) ","d74b5708":"train0['Cover_Type'].value_counts()","d4f7ef81":"train_add6=train0[train0['Cover_Type']==6]\ntrain_add5=train0[train0['Cover_Type']==5]\ntrain_add4=train0[train0['Cover_Type']==4]","6fac056d":"trainadd0=[train_add4,train_add6]\nfor i in range(10):\n    trainadd0+=[train_add5]\ntrainadd1=pd.concat(trainadd0)","f2483eb1":"target_fsm = trainadd1['Cover_Type']\ndata_fsm = trainadd1.drop(['Cover_Type','Id'],axis=1)\nprint(data_fsm.shape)\nprint(target_fsm.shape)","31cd327c":"smote = SMOTE(k_neighbors=1)\ndata_smote, target_smote = smote.fit_resample(data_fsm,target_fsm)","7dcb5f6a":"target_smote.value_counts()","7be3a22b":"data_smoted=pd.concat([data_smote,target_smote],axis=1)\ntrain1=pd.concat([train0,data_smoted])\nprint(len(train1))","3a030fcb":"M=list(range(len(train1)))\nrandom.seed(2021)\nrandom.shuffle(M)\ntrain2=train1.iloc[M]","d0487ff7":"target = train2['Cover_Type']\ndata = train2.drop(['Cover_Type','Id'],axis=1)\ntrain=data\ntarget.value_counts()","8f3b39b3":"columns=data.columns.to_list()\nprint(columns)","b5edd417":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param =   {\n        'num_leaves': trial.suggest_int('num_leaves', 128, 256),\n        'objective': trial.suggest_categorical('objective',['regression','rmse']),  \n        'max_depth': trial.suggest_int('max_depth', 5, 12),\n        'learning_rate': trial.suggest_uniform('learning_rate', 0.04, 0.2),\n        \"boosting\": \"gbdt\",\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 10.0),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-8, 10.0),\n        \"bagging_freq\": trial.suggest_int('bagging_freq', 1, 10),\n        \"bagging_fraction\": trial.suggest_uniform('bagging_fraction', 0.1, 1.0),\n        \"feature_fraction\": trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        \"verbosity\": trial.suggest_int('verbosity', 1, 10),\n    }\n    model = lgb.LGBMClassifier(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","bb429308":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=16)\n#print('Number of finished trials:', len(study.trials))\n#print('Best trial:', study.best_trial.params)","1c7e5133":"study.trials_dataframe()","dcbe758a":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","ea72aba0":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","fd944008":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","3c887be8":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['num_leaves','objective'])","1fd30b23":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","0dd31e90":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","120d18be":"Best_trial=study.best_trial.params\nprint(Best_trial)","a6d19a3a":"sample = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv\")\nprint(sample.shape)","44de906c":"print(columns)","dc65765a":"preds = np.zeros((sample.shape[0],len(Name)))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)","089b649e":"for trn_idx, test_idx in kf.split(train[columns],target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target.iloc[trn_idx],target.iloc[test_idx]\n    \n    model = lgb.LGBMClassifier(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    \n    preds+=model.predict_proba(test[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val), squared=False)\n    print(rmse)","6279bfeb":"print(preds.shape)\nprint(preds[0])","f5063b3d":"preds2=[]\nfor item in preds:\n    value=np.argmax(item)\n    preds2+=[reverse_mapping[value]]\nprint(preds2[0:5])\npd.Series(preds2).value_counts()","17da1174":"subm = sample\nsubm['Cover_Type'] = preds2\nsubm.to_csv('submission.csv',index=False)\nsubm","48716cbf":"# SMOTE\nhttps:\/\/imbalanced-learn.org\/stable\/references\/generated\/imblearn.over_sampling.SMOTE.html","1d950035":"# Tabular Playground Series - Dec 2021 \n### LightGBM for multi-class target\n### Add duplicate data and SMOTE\nhttps:\/\/www.kaggle.com\/stpeteishii\/tps0521-lightgbm-optuna\nhttps:\/\/imbalanced-learn.org\/stable\/references\/generated\/imblearn.over_sampling.SMOTE.html","c8b3b614":"![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/28007\/logos\/header.png?t=2021-06-30-01-10-51)"}}