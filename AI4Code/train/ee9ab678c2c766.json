{"cell_type":{"49af0e1d":"code","93bc6cad":"code","ae144d5c":"code","8c2a6c5b":"code","a4813734":"code","12e5a53b":"code","3e910281":"code","575a25fb":"code","666111bf":"code","e8366593":"code","df5be3f9":"code","c9b72870":"code","f90081a7":"code","2dba395d":"code","8ac94918":"code","d409458d":"code","7aca1c23":"code","3eaea2ce":"code","74f78552":"code","2728c0a4":"code","71e6e202":"code","11538fc6":"code","3ac9a18e":"code","b20a5e42":"code","32e8e78e":"code","06d83ef3":"code","5c8bd593":"code","8a279dcf":"code","7a3c201b":"code","7d62133b":"code","8456f0f6":"code","eccbff1d":"code","67f7a58c":"code","665614b7":"code","406f32dc":"code","2bc1ee12":"code","2cead637":"code","2febc5e1":"code","c34eeb76":"code","f6148de3":"code","fb193130":"code","4ffafbd3":"code","72c532ef":"code","25db7f47":"code","e82721b8":"markdown","ffbf8e63":"markdown","134eb654":"markdown","78b92c60":"markdown","93a682bb":"markdown","dbfae6f7":"markdown","ee1b53b6":"markdown","22c41b12":"markdown","8792f1b6":"markdown","cdbdf7fb":"markdown","166b352e":"markdown","7f17548d":"markdown","9b1858b1":"markdown","3f8eb5d3":"markdown","88154fb0":"markdown","60312c20":"markdown","4171dcdb":"markdown","64c83603":"markdown"},"source":{"49af0e1d":"!pip install openpyxl shap eli5 OSMPythonTools","93bc6cad":"import math\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nimport json\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nimport seaborn as sns\n\nfrom bokeh.resources import INLINE\nfrom bokeh.models import LinearColorMapper, ColumnDataSource, ColorBar, LabelSet, Legend, GMapOptions\nfrom bokeh.plotting import figure, show, gmap\nfrom bokeh.tile_providers import get_provider, Vendors\nfrom bokeh.io import output_notebook\n\nfrom OSMPythonTools.api import Api\nfrom OSMPythonTools.overpass import overpassQueryBuilder, Overpass\nfrom OSMPythonTools.nominatim import Nominatim\n\nfrom catboost import CatBoostRegressor, Pool\n\nimport shap\nfrom eli5 import explain_weights_catboost\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ae144d5c":"%matplotlib inline","8c2a6c5b":"sns.set(rc={'figure.figsize':(12,8)})","a4813734":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)","12e5a53b":"tqdm.pandas()","3e910281":"output_notebook()","575a25fb":"def get_distance(origin, destination):\n    \"\"\"\n    Calculate the Haversine distance.\n\n    Parameters\n    ----------\n    origin : tuple of float\n        (lat, long)\n    destination : tuple of float\n        (lat, long)\n\n    Returns\n    -------\n    distance_in_km : float\n    \"\"\"\n    lat1, lon1 = origin\n    lat2, lon2 = destination\n    radius = 6371  # km\n\n    dlat = math.radians(lat2 - lat1)\n    dlon = math.radians(lon2 - lon1)\n    a = (math.sin(dlat \/ 2) * math.sin(dlat \/ 2) +\n         math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) *\n         math.sin(dlon \/ 2) * math.sin(dlon \/ 2))\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = radius * c\n\n    return d","666111bf":"def merc_from_arrays(lats, lons):\n    r_major = 6378137.000\n    x = r_major * np.radians(lons)\n    scale = x \/ lons\n    y = 180.0 \/ np.pi * np.log(np.tan(np.pi \/ 4.0 + lats * (np.pi \/ 180.0) \/ 2.0)) * scale\n    return (x, y)","e8366593":"def plot_points(data, target, palette='Turbo256'):\n    # prepare data\n    source = ColumnDataSource(data)\n    \n    # init tooltips\n    tooltips = [('Address', '@Address'), ('Price', '@AvgPricePerSqMeter')]\n    \n    # init figure\n    p = figure(x_axis_type='mercator', y_axis_type='mercator', \n               output_backend='webgl', tooltips=tooltips)\n\n    # figure parameters\n    p.border_fill_color = 'white'\n    p.plot_height = 600\n    p.plot_width = 800\n    p.title.text = f'\u041a\u0430\u0440\u0442\u0430 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0435\u0434\u0432\u0438\u0436\u0438\u043c\u043e\u0441\u0442\u0438'\n    p.xaxis.axis_label = '\u0428\u0438\u0440\u043e\u0442\u0430 (\u043c\u0435\u0440\u043a\u0430\u0442\u043e\u0440)'\n    p.yaxis.axis_label = '\u0414\u043e\u043b\u0433\u043e\u0442\u0430 (\u043c\u0435\u0440\u043a\u0430\u0442\u043e\u0440)'\n\n    # add map layer to figure\n    tile_provider = get_provider(Vendors.OSM)\n    p.add_tile(tile_provider)\n    \n    # init palette\n    exp_cmap = LinearColorMapper(palette=palette, low=min(data[target]), high=max(data[target]))\n    \n    # add grid\n    points = p.circle(x='lat_merc', y='lon_merc', size=12, alpha=0.5, source=source, \n                      fill_color={'field': target, 'transform': exp_cmap})\n    \n    # add color bar\n    bar = ColorBar(color_mapper=exp_cmap, width=18, location=(0, 0))\n    \n    p.add_layout(bar)\n    \n    return show(p, notebook_handle=True)","df5be3f9":"def osm_count_objects(bbox: tuple, obj_type: str):\n    overpass = Overpass()\n    query = overpassQueryBuilder(bbox=bbox, elementType='node', selector=f'{obj_type}', out='count')\n    result = overpass.query(query)\n    return result.countElements()","c9b72870":"columns = ['City', 'Address', 'AvgPricePerSqMeter', 'TotalFloors', 'latitude', 'longitude']\ndf_realty = pd.read_excel('\/kaggle\/input\/realty-nsk\/novosibirsk.xlsx', usecols=columns, engine='openpyxl')\ndf_realty['coors'] = list(zip(df_realty.latitude, df_realty.longitude))\ndf_realty['merc_coors'] = df_realty.apply(lambda x: merc_from_arrays(lats=x['latitude'], lons=x['longitude']), axis=1)\ndf_realty['lat_merc'] = df_realty['merc_coors'].str[0]\ndf_realty['lon_merc'] = df_realty['merc_coors'].str[1]","f90081a7":"df_realty.head()","2dba395d":"sns.distplot(a=df_realty['AvgPricePerSqMeter'], bins=10, kde=False)","8ac94918":"plot_points(data=df_realty, target='AvgPricePerSqMeter')","d409458d":"nominatim = Nominatim()\nareaId = nominatim.query('\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a \u0420\u043e\u0441\u0441\u0438\u044f').areaId()","7aca1c23":"areaId","3eaea2ce":"overpass = Overpass()\nquery = overpassQueryBuilder(area=areaId, elementType='node', selector='\"amenity\"=\"cafe\"', out='count')\nresult = overpass.query(query)\nresult.countElements()","74f78552":"# (south, west, north, east)\nbbox = (55.70, 37.50, 55.75, 37.55)\noverpass = Overpass()\nquery = overpassQueryBuilder(bbox=bbox, elementType='node', selector='\"amenity\"=\"restaurant\"', out='count')\nresult = overpass.query(query)\nresult.countElements()","2728c0a4":"def get_poi_data(area_id: int, obj_type: str):\n    overpass = Overpass()\n    query = overpassQueryBuilder(area=area_id, elementType='node', selector='{}'.format(obj_type), out='body')\n    result = overpass.query(query, timeout=60)\n    return result.toJSON()['elements']","71e6e202":"def parse_poi_data(json_data):\n    lat, lon, tag = [], [], []\n    for item in tqdm(json_data):\n        if any(['amenity' in item['tags'], 'shop' in item['tags'], 'office' in item['tags']]):\n            lat.append(item['lat'])\n            lon.append(item['lon'])\n            tag.append(item['tags'])\n    return pd.DataFrame([lat, lon, tag], index=['latitude', 'longitude', 'tags']).T","11538fc6":"df_poi = pd.DataFrame()\nfor obj_type in ['amenity', 'shop', 'office']:\n    json_data = get_poi_data(area_id=areaId, obj_type=obj_type)\n    df_poi_parsed = parse_poi_data(json_data)\n    df_poi_parsed['obj_type'] = obj_type\n    df_poi = df_poi.append(df_poi_parsed)","3ac9a18e":"def get_obj_type(row, obj_type):\n    return row[obj_type]","b20a5e42":"df_poi['obj_detail'] = df_poi.progress_apply(lambda x: get_obj_type(row=x['tags'], \n                                                                    obj_type=x['obj_type']), axis=1)","32e8e78e":"df_poi['coors'] = list(zip(df_poi.latitude, df_poi.longitude))","06d83ef3":"df_poi.head()","5c8bd593":"poi_dict = df_poi.groupby('obj_detail')['coors'].apply(list).to_dict()","8a279dcf":"df_poi['obj_detail'].unique()","7a3c201b":"df_poi.shape[0]","7d62133b":"feature_list = [\n    'bus_station', 'fuel', 'place_of_worship', 'police', 'atm', 'pharmacy', 'post_office', \n    'cafe', 'post_box', 'restaurant', 'courthouse', 'bank', 'hospital', 'pub', 'veterinary', \n    'dentist', 'clinic', 'fast_food', 'parking', 'car_wash', 'college', 'bar', 'library', \n    'school', 'doctors', 'cinema', 'theatre', 'fountain', 'university', 'bicycle_parking', \n    'kindergarten', 'swimming_pool', 'community_centre', 'marketplace', 'townhall',\n    'driving_school', 'nightclub', 'bbq', 'sanatorium', 'bicycle_rental', 'fire_station', \n    'arts_centre', 'food_court', 'shop', 'internet_cafe', 'language_school', 'cafeteria', \n    'medical_supply', 'doctors;clinic;hospital', 'public_service', 'music_school', 'supermarket',\n    'hardware', 'beauty', 'convenience', 'books', 'hairdresser', 'outdoor', 'bakery',\n    'car_repair', 'garden_centre', 'computer', 'pet', 'alcohol', 'greengrocer', 'travel_agency', \n    'florist', 'chemist', 'electronics', 'car', 'clothes', 'toys', 'shoes', 'department_store', \n    'food', 'beverages', 'mobile_phone', 'electronic_components', 'beer', 'wine', 'estate_agent', \n    'ticket', 'sports', 'kids', 'jewelry', 'bicycle', 'seafood', 'farm', 'cosmetics', 'watches', \n    'honey', 'tea', 'electrical', 'baby_goods', 'second_hand', 'tobacco', 'perfumery', 'bed',\n    'lamps', 'tattoo', 'boutique', 'cheese', 'health_food', 'telecommunication', \n    'nutrition_supplements', 'bookmaker', 'coffee', 'storage_rental', 'games', 'security', \n    'art', 'lighting', 'mall', 'money_lender', 'research', 'religion', 'government',\n    'lawyer', 'administrative', 'insurance', 'newspaper', 'diplomatic',\n    'physician', 'it', 'logistics', 'property_management', 'architect', 'educational_institution',\n    'association', 'notary', 'advertising_agency', 'realtor', 'accountant'\n]","8456f0f6":"def make_dataset(data_origin, data_poi, feature):\n    feature_list = []\n    for idx, row in data_origin.iterrows():\n        origin = row['coors']\n        poi_coors = set(data_poi.get(feature))\n        f = min([get_distance(origin, destination) for destination in poi_coors])\n        feature_list.append(f)\n    return feature_list","eccbff1d":"df = df_realty.copy()\nfor feature in tqdm(feature_list):\n    result_list = make_dataset(data_origin=df_realty, data_poi=poi_dict, feature=feature)\n    df[feature] = result_list","67f7a58c":"df.head()","665614b7":"X = df[feature_list]\ny = df['AvgPricePerSqMeter']","406f32dc":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","2bc1ee12":"params = {\n    'depth': 8,\n    'verbose': 100,\n    'iterations': 600,\n    'loss_function': 'RMSE',\n    'eval_metric': 'R2'\n}\nmodel = CatBoostRegressor(**params)","2cead637":"%%time\nmodel.fit(X_train, y_train)","2febc5e1":"y_pred = model.predict(X_test)","c34eeb76":"r2_score(y_true=y_test, y_pred=y_pred)","f6148de3":"explainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(X_test)","fb193130":"shap.summary_plot(shap_values, X_test)","4ffafbd3":"explain_weights_catboost(catb=model, top=25)","72c532ef":"def get_prediction(data_poi: pd.DataFrame, origin: tuple, model, feature_list, explainer):\n    features = []\n    for feature in feature_list:\n        poi_coors = set(data_poi.get(feature))\n        f = min([get_distance(origin, destination) for destination in poi_coors])\n        features.append(f)\n    return int(model.predict(features))","25db7f47":"get_prediction(data_poi=poi_dict, origin=(54.865893, 83.086244), model=model, \n               feature_list=feature_list, explainer=explainer)","e82721b8":"### \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438","ffbf8e63":"## \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","134eb654":"## \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0435\u0434\u0432\u0438\u0436\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 \u0433. \u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a","78b92c60":"### \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","93a682bb":"### \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","dbfae6f7":"### \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","ee1b53b6":"### \u0421\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445","22c41b12":"### \u0422\u0438\u043f\u044b \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0432 OpenStreetMap","8792f1b6":"### \u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043d\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","cdbdf7fb":"### \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0432. \u043c","166b352e":"https:\/\/wiki.openstreetmap.org\/wiki\/RU:%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D1%8B_%D0%BA%D0%B0%D1%80%D1%82%D1%8B\n        \n\u0418\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430, \u0431\u043b\u0430\u0433\u043e\u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e (amenity=*)\n\n\u041f\u0438\u0442\u0430\u043d\u0438\u0435\n- bar\n- cafe\n- fast_food\n- pub\n- restaurant\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\n- college\n- kindergarten\n- music_school\n- school\n- university\n\n\u0424\u0438\u043d\u0430\u043d\u0441\u044b\n- atm\n- bank\n\n\u0417\u0434\u043e\u0440\u043e\u0432\u044c\u0435\n- clinic\n- hospital\n- pharmacy\n\n\u0414\u043e\u0440\u043e\u0433\u0438, \u0443\u043b\u0438\u0446\u044b, \u0442\u0440\u043e\u043f\u044b (highway=*)\n\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438\n- bus_stop\n\n\u0420\u0435\u043b\u044c\u0441\u043e\u0432\u044b\u0435 \u043f\u0443\u0442\u0438 (railway=*)\n\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438\n- subway_entrance","7f17548d":"### \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","9b1858b1":"### \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","3f8eb5d3":"## \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0433\u0435\u043e\u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 OpenStreetMap - Overpass API","88154fb0":"### \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0444\u0435 \u0432 \u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\u0435","60312c20":"# \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0435\u0434\u0432\u0438\u0436\u0438\u043c\u043e\u0441\u0442\u0438","4171dcdb":"### \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438","64c83603":"### \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043f\u043e ID \u043b\u043e\u043a\u0430\u0446\u0438\u0438"}}