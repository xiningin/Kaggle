{"cell_type":{"f5f40e71":"code","3b2583d8":"code","271a6e15":"code","8f00f2b0":"code","211f505c":"code","d8341366":"code","f6a81aae":"markdown"},"source":{"f5f40e71":"import numpy as np\nimport pandas as pd","3b2583d8":"train_labels = pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/training_labels.csv')\nsample_submission = pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/sample_submission.csv')\n\ndef id2path(idx,is_train=True):\n    path = \"..\/input\/g2net-gravitational-wave-detection\"\n    folder = 'train' if is_train else 'test'\n    return f'{path}\/{folder}\/{idx[0]}\/{idx[1]}\/{idx[2]}\/{idx}.npy'\n\ndef loadSample(idx, is_train=True):\n    return np.load(id2path(idx,is_train))\n\nfrom scipy import signal\nprepComment=f\"Pass(20-500Hz), Scale(1.3e+22), CWT(64,64,16), RGB\"\n\nbHP, aHP = signal.butter(8, (20, 500), btype='bandpass', fs= 2048)\ndef filterSig(waves, a=aHP, b=bHP):\n    '''Apply a 20Hz high pass filter to the three events'''\n    return np.array([signal.filtfilt(b, a, wave) for wave in waves]) #lfilter introduces a larger spike around 20hz\n\ndef prepare(idList,is_train, scale=1.3e+22, data_format='channel_last'):\n    return {idx: (filterSig(loadSample(idx,is_train))*scale).astype(np.float32) for idx in idList}#[batch, 3 , len(signal)]#1:30\n","271a6e15":"def _bytes_feature(value):\n    \"\"\"Returns a bytes_list from a string \/ byte.\"\"\"\n    if isinstance(value, type(tf.constant(0))): # if value ist tensor\n        value = value.numpy() # get value of tensor\n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\ndef _float_feature(value):\n  \"\"\"Returns a floast_list from a float \/ double.\"\"\"\n  return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))\n\ndef _int64_feature(value):\n  \"\"\"Returns an int64_list from a bool \/ enum \/ int \/ uint.\"\"\"\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\ndef serialize_array(array):\n  array = tf.io.serialize_tensor(array)\n  return array\n\ndef parse_single_wave(idx, wave, label):\n    #define the dictionary -- the structure -- of our single example\n    data = {\n        'idx'    : _bytes_feature(idx.encode()),\n        'length' : _int64_feature(wave.shape[1]),\n        'wave'   : _bytes_feature(serialize_array(wave)),\n    }\n    if label:\n        data['label'] =  _int64_feature(label) \n    #create an Example, wrapping the single features\n    return tf.train.Example(features=tf.train.Features(feature=data))\n\ndef write_waves_to_tfr(idList, waves, labels, filename:str=\"waves\"):\n    writer = tf.io.TFRecordWriter(filename+\".tfr\") \n\n    if labels:\n        for idx, wave, label in zip(idList, waves, labels):\n            out = parse_single_wave(idx, wave, label)\n            writer.write(out.SerializeToString())\n    else:\n         for idx, wave in zip(idList, waves):\n            out = parse_single_wave(idx, wave, None)\n            writer.write(out.SerializeToString())\n    writer.close()\n    print(f\"Wrote {len(waves)} elements to TFRecord\")","8f00f2b0":"import tensorflow as tf\n\ndef writeBatch(lst, is_train =True, scale=1.3e+22):\n\n    print(len(lst))\n    waves = [(filterSig(loadSample(idx,is_train))*scale).astype(np.float32) for idx in lst.id.values]\n\n    if is_train:\n        target = lst.target.values\n        basename = \"train\" \n    else:\n        target=None\n        basename = \"test\"\n    \n    write_waves_to_tfr(lst, waves, target, f\"{basename}{lst.id.values[0]}\")","211f505c":"def parse_tfr_element(element, labeled):\n    data = {\n        'idx'    : tf.io.FixedLenFeature([], tf.string),\n        'length' : tf.io.FixedLenFeature([], tf.int64),\n        'wave'   : tf.io.FixedLenFeature([], tf.string)\n    }\n    if labeled:\n        data['label'] = tf.io.FixedLenFeature([], tf.int64)\n\n    content = tf.io.parse_single_example(element, data)\n    idx    = content['idx']\n    length = content['length']\n    \n    wave   = content['wave']\n    wave = tf.io.parse_tensor(wave, out_type=tf.float32)\n    wave = tf.reshape(wave, shape=[3,length])\n    if labeled:\n        label  = content['label']\n        return wave, label \n    else:\n        return wave","d8341366":"from functools import partial\ndef get_dataset(filename, is_train=True):\n    dataset = tf.data.TFRecordDataset(filename)\n    dataset = dataset.map(partial(parse_tfr_element, labeled=is_train))\n    return dataset","f6a81aae":"# TF Record"}}