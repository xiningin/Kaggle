{"cell_type":{"cf89c61f":"code","3e1cf718":"code","3becc877":"code","60e572fd":"code","36736113":"code","3bc3f0b6":"code","37ff3963":"code","84eca0f9":"code","4250146b":"code","d6ed2ad3":"code","7d1075c1":"code","71632641":"code","94846860":"code","ad9eb2de":"code","d006c970":"code","271780e6":"code","18e94bb7":"code","3d7b21d5":"code","f1c511bb":"code","7e6ce982":"code","a9929ac0":"code","807b084d":"code","7bd74b91":"code","efdee2a2":"code","4043976b":"code","778d55b3":"code","6c259552":"code","8544df02":"code","9a087c04":"code","09edeff4":"code","9091fccc":"code","b0a9055a":"code","f8bfceec":"code","1f2f1c2e":"code","db07f58c":"code","e740cc19":"code","1c658445":"code","3801f1fb":"code","f730814f":"code","cec25039":"code","c45e5dc5":"code","ec4cf870":"code","18ac29da":"code","d4e16800":"code","61c0a732":"code","24cf6eaf":"code","4f3f7e1e":"code","2ecb6011":"code","375d95aa":"code","ca4ffbe2":"code","1abb48ef":"code","65caf2c6":"code","ce109b81":"code","ff06e87f":"code","410e5d42":"code","996b7b62":"code","d2d37174":"code","1279bdb2":"code","b82141a5":"markdown","b022587c":"markdown","64370509":"markdown","ba1029a4":"markdown","aa0c9aa9":"markdown","66a6b6a7":"markdown","b0790cd4":"markdown","f9f75809":"markdown","5696da1f":"markdown","5a8acd88":"markdown","7f16b901":"markdown","1c794e2f":"markdown","04f40242":"markdown","21571601":"markdown","136d83ac":"markdown"},"source":{"cf89c61f":"import numpy as np\nimport pandas as pd\nimport scipy.stats\nimport matplotlib.pyplot as plt\nplt.style.use(\"dark_background\")\n%config InlineBackend.figure_formats=[\"png\"]","3e1cf718":"import seaborn as sns\nsns.set()","3becc877":"pip install YahooFinancials","60e572fd":"# pip install pyportfolioopt","36736113":"from yahoofinancials import YahooFinancials\nfrom datetime import datetime\n\ndef retrieve_stock_data(ticker, start, end):\n    json = YahooFinancials(ticker).get_historical_price_data(start, end, \"daily\")\n    df = pd.DataFrame(columns=[\"open\",\"close\",\"adjclose\"])\n    for row in json[ticker][\"prices\"]:\n        date = datetime.fromisoformat(row[\"formatted_date\"])\n        df.loc[date] = [row[\"open\"], row[\"close\"], row[\"adjclose\"]]\n    df.index.name = \"date\"\n    return df","3bc3f0b6":"MSFT = retrieve_stock_data(\"MSFT\", \"2019-01-01\", \"2020-08-31\")","37ff3963":"MSFT.head()","84eca0f9":"## Stock Price vs Time","4250146b":"fig = plt.figure()\nfig.set_size_inches(10,3)\nchart = sns.lineplot(MSFT.index, MSFT.adjclose)\nchart.set_title(\"Microsoft stock from 2019\")","d6ed2ad3":"# Daily Returns - Volatality","7d1075c1":"fig = plt.figure()\nfig.set_size_inches(10,3)\nchart = sns.lineplot(MSFT.index, MSFT.adjclose.pct_change())\nchart.set_title(\"MSFT daily returns from 2019\")","71632641":"# Distribution of Daily Returns","94846860":"MSFT[\"adjclose\"].pct_change().hist(bins=50, density=True, histtype=\"stepfilled\", alpha=0.5)\nplt.title(\"Histogram of MSFT daily returns from 2019\", weight=\"bold\")\nMSFT[\"adjclose\"].pct_change().std()","ad9eb2de":"sns.distplot(MSFT.adjclose.pct_change()[1:])\nplt.title(\"Histogram of MSFT daily returns from 2019\", weight=\"bold\")","d006c970":"MSFT.adjclose.pct_change()","271780e6":"# Normal Distribution? Skewed?","18e94bb7":"norm = np.random.normal(loc=10, scale=.5, size=1000)","3d7b21d5":"sns.distplot(norm)","f1c511bb":"scipy.stats.probplot(norm, dist=scipy.stats.norm, plot=plt.figure().add_subplot(111))\nplt.title(\"Perfect Normal Distribution QQ-plot\", weight=\"bold\")","7e6ce982":"## Normal Distribution - QQ Plot","a9929ac0":"Q = MSFT[\"adjclose\"].pct_change().dropna()\nscipy.stats.probplot(Q, dist=scipy.stats.norm, plot=plt.figure().add_subplot(111))\nplt.title(\"Normal QQ-plot of MSFT daily returns from\", weight=\"bold\");","807b084d":"# Student T Dist QQ Plot","7bd74b91":"tdf, tmean, tsigma = scipy.stats.t.fit(Q)\nscipy.stats.probplot(Q, dist=scipy.stats.t, sparams=(tdf, tmean, tsigma), plot=plt.figure().add_subplot(111))\nplt.title(\"Student QQ-plot of MSFT daily returns from 2019\", weight=\"bold\");","efdee2a2":"# Better fit?","4043976b":"# Normal Dist - Mean and SD - Returns are normally distributions - Crude : Closed Form Solution - Expressed in a mathematical format","778d55b3":"# Historical Data - Find out the distribution of returns and then calculate percentile for VaR","6c259552":"# Geometric Brownian Motion - We can predict stock","8544df02":"stock = retrieve_stock_data(\"MSFT\", \"2015-01-01\", \"2020-01-01\")","9a087c04":"stock.head()","09edeff4":"stock.tail()","9091fccc":"# Calculate Percentage Returns and Drop NA\nreturns = stock[\"adjclose\"].pct_change().dropna()\n\n# Mean and SD of the Dist\nmean = returns.mean()\nsigma = returns.std()\n\n# Assuming T Distribution from QQ Plot\ntdf, tmean, tsigma = scipy.stats.t.fit(returns)\nreturns.hist(bins=40, density=True, histtype=\"stepfilled\", alpha=0.5)\nplt.title(\"Daily returns on MSFT, 2015-2020\", weight=\"bold\");","b0a9055a":"# Calculate VaR","f8bfceec":"returns.quantile(0.05)","1f2f1c2e":"chart = sns.distplot(returns)\nplt.axvline(-0.038649013018400645, color = 'black', linewidth = 2)","db07f58c":"1000000 * (2.1\/100)","e740cc19":"support = np.linspace(returns.min(), returns.max(), 100)\nsns.distplot(returns)\nplt.axvline(-0.022995118169722203, color='black', linewidth=2)\nplt.title(\"Daily change in MSFT over 2010\u20132020 (%)\", weight=\"bold\");","1c658445":"scipy.stats.norm.ppf(0.05, mean, sigma)","3801f1fb":"# Define params of Brownian Motion","f730814f":"days = 300   # time horizon\ndt = 1\/float(days) # Number of \nsigma = 0.04 # volatility - Returns\nmu = 0.05  # drift (average growth rate) (Average Daily Return - 0.5 * Variance) - Returns","cec25039":"## Simulate a walk for a stock","c45e5dc5":"def random_walk(startprice):\n    price = np.zeros(days)\n    shock = np.zeros(days)\n    price[0] = startprice\n    for i in range(1, days):\n        shock[i] = np.random.normal(loc = mu * dt, scale = sigma * np.sqrt(dt))\n        price[i] = max(0, price[i-1] + shock[i] * price[i-1])\n    return price","ec4cf870":"# Let\u2019s first simulate 50 random walks, starting from an initial stock price of 10$, for a duration of 300 days.","18ac29da":"plt.figure(figsize=(12,6))    \nfor run in range(50):\n    plt.plot(random_walk(10.0))\nplt.xlabel(\"Time\")\nplt.ylabel(\"Price\");","d4e16800":"# Monte Carlo Simulation of n Random Walks","61c0a732":"runs = 10000 # Number of random num sims\nsimulations = np.zeros(runs)\n\nfor run in range(runs):\n    simulations[run] = random_walk(10.0)[days-1]\nq = np.percentile(simulations, 5)\nplt.hist(simulations, density=True, bins=30, histtype=\"stepfilled\", alpha=0.5)\nplt.figtext(0.6, 0.8, \"Start price: 10\u20ac\")\nplt.figtext(0.6, 0.7, \"Mean final price: {:.3}$\".format(simulations.mean()))\nplt.figtext(0.6, 0.6, \"VaR(0.99): {:.3}$\".format(10 - q))\nplt.figtext(0.15, 0.6, \"q(0.99): {:.3}$\".format(q))\nplt.axvline(x=q, linewidth=4, color=\"r\")\nplt.title(\"Final price distribution after {} days\".format(days), weight=\"bold\");","24cf6eaf":"# Equity  - Close Price - Percentage Returns\n# Option - Close Price \/ Prem - Return","4f3f7e1e":"# Equity Portfolio with 5 assets with exposures known","2ecb6011":"start = \"2015-01-01\"\nend   = \"2020-08-31\"\nBAC = retrieve_stock_data(\"BAC\", start, end)\nAAPL = retrieve_stock_data(\"AAPL\", start, end)\nNKE = retrieve_stock_data(\"NKE\", start, end)\nNFLX = retrieve_stock_data(\"NFLX\", start, end)\nAMZN = retrieve_stock_data(\"AMZN\", start, end)","375d95aa":"exposures = [1000000, 400000, 3000000, 200000, 10000000]","ca4ffbe2":"## Select only Close Price\ndf = pd.DataFrame({ \"BAC\": BAC[\"adjclose\"],\n                        \"AAPL\": AAPL[\"adjclose\"],\n                        \"NKE\": NKE[\"adjclose\"],\n                        \"NFLX\": NFLX[\"adjclose\"],\n                        \"AMZN\": AMZN[\"adjclose\"]\n                      })\n\n## Percentage Returns\npercentage = df.pct_change()","1abb48ef":"# Cholesky Decomposition","65caf2c6":"var = v12 + v22 + corr v1 v2","ce109b81":"# Different Exposures in the potfolio is accounted\n\nvalue_ptf = percentage * exposures\nvalue_ptf['Value of Portfolio'] = value_ptf.sum(axis=1)\n\nprint(value_ptf)\n","ff06e87f":"ptf_percentage = value_ptf['Value of Portfolio']\nptf_percentage = ptf_percentage.sort_values(axis=0, ascending=True)","410e5d42":"sns.distplot(ptf_percentage)","996b7b62":"VaR =  np.percentile(ptf_percentage, .01)\nVaR1 =  np.percentile(ptf_percentage, 1)\nVaR2 =  np.percentile(ptf_percentage, 5)","d2d37174":"# Efficient Frontier\n\n# Returns are in line with risk","1279bdb2":"print (\"99.99% Actual loss won't exceedd: \" + str(round(VaR, 2)) + '$')\nprint (\"99% Actual loss won't exceed: \" + str(round(VaR1, 2)) + '$')\nprint (\"95% Actual loss won't exceed: \" + str(round(VaR2, 2)) + '$') \nprint (\"Losses expected to exceed \" + \"{0:.2f}\".format(VaR2)+ '$' + \"    \" + str(.05*len(ptf_percentage)) + \" out of \" + str(len(ptf_percentage)) + \" days\")\npercentage = percentage[1:]","b82141a5":"This .05 or 5% confidence quantile means that with 95% confidence, our worst daily loss will not exceed 2.299%\n\nSo if I have a 1MM investment, our one-day VaR will be 1MM$ * 2.299% \n\nWhich is around 22990$","b022587c":"# Retrieve Data ","64370509":"EL = PD * EAD * LGD (Recovery Loan)","ba1029a4":"# Approaches to VaR","aa0c9aa9":"# Value at Risk using the Monte Carlo method","66a6b6a7":"# Value at Risk using the variance-covariance method","b0790cd4":"Variance-Covariance or Delta Normal\n\nHistorical Data Based Approach \n\nMonte Carlo Simulation","f9f75809":"Credit Risk - EL (BASEL II - III)\n\nMarket Risk - Stocks, Underlying - Time Measure - Closing\n\nIRS\nCDS\nOptions\nCommodities\nFX Derivatives","5696da1f":"Value at Risk - ","5a8acd88":"This .05 or 5% confidence quantile means that with 95% confidence, our worst daily loss will not exceed 2.1%\n\nSo if I have a 1MM investment, our one-day VaR will be 1MM$ * 2.1% \n\nWhich is around 21000$","7f16b901":"Method: run many trials with random market conditions, calculating portfolio loss for each trial. Use the aggregated trial data to establish a profile of the portfolio\u2019s risk characteristics.\n\nHypothesis: stock market evolution can be simulated by geometric Brownian motion","1c794e2f":"# Import Libraries","04f40242":"# Check for ideal distribution fit\n\n## QQ Plot","21571601":"# What if its a multi asset portfolio?","136d83ac":"# Value at Risk using the historical bootstrap method"}}