{"cell_type":{"2a9efaec":"code","0232729c":"code","3f8458f9":"code","51f6c1a8":"code","a11b6b2f":"code","c58ada1b":"code","830fcab2":"code","46891132":"code","3aa7759c":"code","b43a5b8d":"code","a5eaa6fc":"code","74d4b876":"code","9242274a":"code","ba587152":"code","c294b807":"code","d5114c3e":"code","90de44cb":"code","169b01a3":"code","9b810002":"code","cc90e4b0":"code","c11e762a":"code","f3a13a3b":"code","58cfaf4c":"code","97f2f2c8":"code","9a6ce0fa":"code","ad95f3f2":"code","a0c5a004":"code","e25a3a91":"code","b760d3c9":"code","508cfaa2":"markdown","797b0224":"markdown","3ec172db":"markdown","092783a5":"markdown","221c9036":"markdown","4e97a122":"markdown"},"source":{"2a9efaec":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","0232729c":"weather=pd.read_csv('..\/input\/weather-in-kobe\/kobe_weather_2020.csv')\npediterian=pd.read_csv('..\/input\/people-walking-in-kobe\/kobe_people_2020.csv')\ndata0=weather.merge(pediterian,on='Date',how='left')\ndata0","3f8458f9":"data1=data0[data0['Area']=='center street'][data0['Time']=='day time(5-19)']\ndata1=data1.drop(['Time','Area'],axis=1).reset_index(drop=True)\ndata1","51f6c1a8":"import datetime\ndate3=[]\ndayofweek=[]\nfor item in data1['Date']:\n    item2=item.split('\/')\n    year=int(item2[0])\n    month=int(item2[1])\n    day=int(item2[2])\n    date2=datetime.datetime(year,month,day)\n    date3+=[date2]\n    dayofweek+=[date2.weekday()]\ndata1['Date2']=date3\ndata1['weekday']=dayofweek\ndata1=data1.drop('Date',axis=1)\ndata1","a11b6b2f":"print(data1.columns.to_list())","c58ada1b":"target=['Value']\ndata1=data1.drop('Date2',axis=1)\ndatay=data1[target]\ndatax=data1.drop(target,axis=1)","830fcab2":"print(datay[0:2].T)\nprint()\nprint(datax[0:2].T)","46891132":"n=len(data1)\nprint(n)","3aa7759c":"N=[]\nfor i in range(n):\n    N+=[i]\nrandom.shuffle(N)","b43a5b8d":"trainX=datax.loc[N[0:(n\/\/4)*3]]\ntrainY=datay.loc[N[0:(n\/\/4)*3]]\ntestX=datax.loc[N[(n\/\/4)*3:]]\ntestY=datay.loc[N[(n\/\/4)*3:]]","a5eaa6fc":"print(trainX.shape)\nprint(testX.shape)","74d4b876":"df_columns = list(datax.columns)\nprint(df_columns)","9242274a":"train_df=trainX\ntest_df=testX","ba587152":"train_df.columns=df_columns\ntest_df.columns=df_columns","c294b807":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","d5114c3e":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","90de44cb":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","169b01a3":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","9b810002":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","cc90e4b0":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","c11e762a":"y = trainY\nprint(y.shape)\nydf=pd.DataFrame(y)\nydf","f3a13a3b":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('trainY of '+target[i],fontsize=12)\n    ax.set_ylabel('oof of '+target[i],fontsize=12)\n    ax.scatter(y,oof)","58cfaf4c":"print(target)","97f2f2c8":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","9a6ce0fa":"pred1=[]\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n    pred0 = np.array([model.predict(test_feat_df.values) for model in models])\n    pred1+=[np.mean(pred0, axis=0)]","ad95f3f2":"pred1=np.array(pred1)\ntestY=np.array(testY)","a0c5a004":"print(pred1.T.shape)\nprint(testY.shape)","e25a3a91":"for i in range(1):\n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('ACTUAL '+target[i],fontsize=12)\n    ax.set_ylabel('PRDICTED '+target[i],fontsize=12)\n    ax.scatter(testY[:,i],pred1.T[:,i])","b760d3c9":"weekday=['Mon','Tue','Wed','Thu','Fri','Sat','Sun']\ntarget2=['Temparature','weekday']\nfor i in range(2):\n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target2[i]+' vs Value',fontsize=20)\n    ax.set_xlabel(target2[i],fontsize=12)\n    ax.set_ylabel('Value',fontsize=12)\n    x=data1[target2[i]].tolist()\n    y=data1['Value'].tolist()\n    ax.scatter(x,y)","508cfaa2":"# Visualize Importance and Predict","797b0224":"### Select Area and Time to analyse ","3ec172db":"# Model","092783a5":"# Data preparation","221c9036":"### For 'Value', 'Temperature' and 'weekday' are the most important factors.","4e97a122":"# Target setting"}}