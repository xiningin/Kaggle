{"cell_type":{"a55f5047":"code","cdd35115":"code","099d2cdb":"code","b528eb17":"code","41f383fa":"code","d23ff6fa":"code","f4a13b4c":"code","93c77631":"code","4557056b":"code","4aa171cc":"code","5c11026e":"code","455717ec":"code","797363e8":"code","99c3da9a":"code","f1813efc":"code","670308e3":"code","8a0294c3":"code","96377a4f":"code","f4f178a0":"code","a74e4481":"code","2e9fc01c":"code","1a5cd8b4":"code","b3c23632":"code","006920a1":"code","2cc17aef":"code","012b9ed1":"code","0a71bd45":"code","ef12b5b8":"code","ebf2d6fa":"code","b59355f7":"code","f9caf9e0":"code","7111094d":"code","2843d83a":"code","89640bfa":"code","2757a28a":"code","af07842b":"code","6f36f843":"code","effc8bdb":"code","7d39ee75":"code","c215cac8":"code","f92720e2":"code","1d5c3ed1":"code","5fba367a":"code","1cfae60f":"code","99b042dd":"markdown","65922ef4":"markdown","e41c5f6f":"markdown","d6f87619":"markdown","062a216f":"markdown","73a155c3":"markdown"},"source":{"a55f5047":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n         fd = os.path.join(dirname, filename)\n        \ndf = pd.read_csv(fd)\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cdd35115":"print(df.info())\ndf.head(10)","099d2cdb":"df.drop(df[df['Price\/Earnings'].isna() | df['Price\/Book'].isna()].index, inplace=True)\ndf.drop(columns='SEC Filings', inplace=True)\ndf.drop(columns='Dividend Yield', inplace=True)\ndf.info()","b528eb17":"sectorwise = df.groupby(['Sector']).agg(np.size)\nsectorwise.drop(sectorwise.columns[1:], axis=1, inplace=True)\nsectorwise.columns  = ['No. of Companies']\n# sectorwise.rename(columns={sectorwise.columns[0] : 'No. of Companies'}, inplace = True)\nsectorwise\n","41f383fa":"df.head(10)","d23ff6fa":"sectorwise = df.groupby(['Sector']).agg(np.sum)\nsectorwise['total_shares'] = abs(sectorwise['Market Cap']\/sectorwise['Earnings\/Share'])\nsectorwise\n\n# sectorwise.drop(sectorwise.columns[1:], axis=1, inplace=True)\n# sectorwise.columns  = ['No. of Companies']\n# # sectorwise.rename(columns={sectorwise.columns[0] : 'No. of Companies'}, inplace = True)\n# sectorwise\n","f4a13b4c":"sectorwise = df.groupby(['Sector']).agg(np.min)\nsectorwise","93c77631":"sectorwise = df.groupby(['Sector']).agg(np.max)\nsectorwise","4557056b":"sectorwise = df.groupby(['Sector']).agg(np.max)\nsectorwise","4aa171cc":"sectorwise = df[df['Sector'] == 'Consumer Discretionary']\nsectorwise.iloc[sectorwise['Earnings\/Share'].argmax()]","5c11026e":"sectorwise.iloc[sectorwise['Earnings\/Share'].argmin()]","455717ec":"sectorwise['Earnings\/Share'].mean()","797363e8":"sectorwise['Earnings\/Share'].std()","99c3da9a":"sectorwise[sectorwise['Earnings\/Share'] > 0].std()","f1813efc":"sectorwise[sectorwise['Earnings\/Share'] < 0].std()","670308e3":"print(sectorwise['Price'].max(),sectorwise['Price'].min(),sectorwise['Price'].mean(),sectorwise['Price'].std())","8a0294c3":"pricemax = round(sectorwise['Price'].max())\npricemin = round(sectorwise['Price'].min())\npricedev = round(sectorwise['Price'].mean())\n\nprint(pricemax,pricemin)\n\npricerange = []\n\nwhile True:\n    if(pricemin <= pricemax):\n        range1 = pricemin\n        pricemin += pricedev\n        range2 = pricemin\n        pricerange.append(tuple((range1,range2)))\n    else:\n        break","96377a4f":"pricerange","f4f178a0":"for range1,range2 in pricerange:\n    print(\"(\",range1,\",\",range2,\")\" , sectorwise[(sectorwise['Price'] >= range1) & (sectorwise['Price'] <= range2)]['Price'].mean(),len(sectorwise[(sectorwise['Price'] >= range1) & (sectorwise['Price'] <= range2)]['Price']))","a74e4481":"print(format(\"range1\",\"5s\"),format(\"-\",\"10s\"),format(\"range2\",\"5s\"),format(\"=>\",\"5s\"), format(\"avg\",\"5s\"),format(\"maxp\",\"5s\"),format(\"minp\",\"5s\"),format(\"earningsum\",\"5s\"),format(\"earningavg\",\"5s\"))\nfor range1,range2 in pricerange:\n    lowprice = sectorwise[(sectorwise['Price'] >= range1) & (sectorwise['Price'] <= range2)]['52 Week Low'].mean()\n    highprice = sectorwise[(sectorwise['Price'] >= range1) & (sectorwise['Price'] <= range2)]['52 Week High'].mean()\n    earnings = sectorwise[(sectorwise['Price'] >= range1) & (sectorwise['Price'] <= range2)]['Earnings\/Share'].sum()\n    earningsavg = sectorwise[(sectorwise['Price'] >= range1) & (sectorwise['Price'] <= range2)]['Earnings\/Share'].mean()\n    if lowprice > 0 and highprice > 0:\n        print(range1,\"-\",range2,\"=>\" , format(sectorwise[(sectorwise['Price'] >= range1) & (sectorwise['Price'] <= range2)]['Price'].mean(),\".2f\") ,format(lowprice,\".2f\"), format(highprice,\".2f\"),format(earnings,\".2f\"),format(earningsavg,\".2f\"), sep=\"\\t\")","2e9fc01c":"def givePriceRange(sector):\n    pricemax = round(sector['Price'].max())\n    pricemin = round(sector['Price'].min())\n    pricedev = round(sector['Price'].mean())\n    \n    print(\"Max Price - \", pricemax,\"\\tMin Price - \",pricemin,\"\\tMean Price - \",pricedev)\n\n    pricerange = []\n\n    while True:\n        if(pricemin <= pricemax):\n            range1 = pricemin\n            pricemin += pricedev\n            range2 = pricemin\n            pricerange.append(tuple((range1,range2)))\n        else:\n            break\n            \n    return pricerange","1a5cd8b4":"def sector_range(sector,sectorname):\n    print(\"Sector - \",sectorname)\n    print(\"\\n\")\n    \n    pricerange = givePriceRange(sector)\n    print(\"\\n\")\n    \n    for range1,range2 in pricerange:\n        print(\"(\",range1,\",\",range2,\")\" , sector[(sector['Price'] >= range1) & (sector['Price'] <= range2)]['Price'].mean(),len(sector[(sector['Price'] >= range1) & (sector['Price'] <= range2)]['Price']))\n    \n    print(\"\\n\")\n    print(format(\"range1\",\"5s\"),format(\"-\",\"6s\"),format(\"range2\",\"9s\"),format(\"=>\",\"7s\"), format(\"avg\",\"7s\"),format(\"maxp\",\"7s\"),format(\"minp\",\"5s\"),format(\"earningsum\",\"5s\"),format(\"earningavg\",\"5s\"))\n    for range1,range2 in pricerange:\n        lowprice = sector[(sector['Price'] >= range1) & (sector['Price'] <= range2)]['52 Week Low'].mean()\n        highprice = sector[(sector['Price'] >= range1) & (sector['Price'] <= range2)]['52 Week High'].mean()\n        earnings = sector[(sector['Price'] >= range1) & (sector['Price'] <= range2)]['Earnings\/Share'].sum()\n        earningsavg = sector[(sector['Price'] >= range1) & (sector['Price'] <= range2)]['Earnings\/Share'].mean()\n        if lowprice > 0 and highprice > 0:\n            print(range1,\"-\",range2,\"=>\" , format(sector[(sector['Price'] >= range1) & (sector['Price'] <= range2)]['Price'].mean(),\".2f\") ,format(lowprice,\".2f\"), format(highprice,\".2f\"),format(earnings,\".2f\"),format(earningsavg,\".2f\"), sep=\"\\t\")\n    \n    print(\"---------------------------------------------\")","b3c23632":"for sector in df.groupby(df['Sector']).agg(np.size).index:\n    sector_range(df[df['Sector'] == sector], sector)","006920a1":"def sector_range_2(sector,sectorname):\n    print(\"Sector - \",sectorname)\n    print(\"\\n\")\n    \n    pricerange = givePriceRange(sector)\n    print(\"\\n\")\n    \n    \n    print(\"\\n\")\n    print(format(\"range1\",\"5s\"),format(\"-\",\"6s\"),format(\"range2\",\"9s\"),format(\"=>\",\"7s\"), format(\"avg\",\"7s\"),format(\"Price\/Earnings\",\"5s\"))\n    for range1,range2 in pricerange:\n        pe = sector[(sector['Price'] >= range1) & (sector['Price'] <= range2)]['Price\/Earnings'].mean()\n        print(range1,\"-\",range2,\"=>\" , format(sector[(sector['Price'] >= range1) & (sector['Price'] <= range2)]['Price'].mean(),\".2f\") ,format(pe,\".2f\"), sep=\"\\t\")\n    \n    print(\"---------------------------------------------\")","2cc17aef":"for sector in df.groupby(df['Sector']).agg(np.size).index:\n    sector_range_2(df[df['Sector'] == sector], sector)","012b9ed1":"df['total_sale'] = df['Market Cap']\/df['Price\/Sales']","0a71bd45":"def sector_range_3(sector,sectorname):\n    print(\"Sector - \",sectorname)    \n    pricerange = givePriceRange(sector)\n    print(\"\\n\")\n    print(format(\"range1\",\"5s\"),format(\"-\",\"6s\"),format(\"range2\",\"9s\"),format(\"=>\",\"7s\"), format(\"avg\",\"7s\"),format(\"total_sale\",\"5s\"),format(\"Price\/Sales\",\"5s\") )\n    for range1,range2 in pricerange:\n        pe = sector[(sector['Price'] >= range1) & (sector['Price'] <= range2)]['total_sale'].mean()\n        psrt = sector[(sector['Price'] >= range1) & (sector['Price'] <= range2)]['Price\/Sales'].mean()\n        print(range1,\"-\",range2,\"=>\" , format(sector[(sector['Price'] >= range1) & (sector['Price'] <= range2)]['Price'].mean(),\".2f\") ,format(pe,\".2f\"),format(psrt,\".2f\"), sep=\"\\t\")\n    print(\"---------------------------------------------\")","ef12b5b8":"for sector in df.groupby(df['Sector']).agg(np.size).index:\n    sector_range_3(df[df['Sector'] == sector], sector)","ebf2d6fa":"def sector_range_4(sector,sectorname):\n    print(\"Sector - \",sectorname)\n    print(\"\\n\")\n    \n    pricerange = givePriceRange(sector)\n    print(\"\\n\")\n    \n    \n    print(\"\\n\")\n    print(format(\"range1\",\"5s\"),format(\"-\",\"6s\"),format(\"range2\",\"9s\"),format(\"=>\",\"7s\"), format(\"avg\",\"7s\"),format(\"Price\/Book\",\"5s\"))\n    for range1,range2 in pricerange:\n        pe = sector[(sector['Price'] >= range1) & (sector['Price'] <= range2)]['Price\/Book'].mean()\n        print(range1,\"-\",range2,\"=>\" , format(sector[(sector['Price'] >= range1) & (sector['Price'] <= range2)]['Price'].mean(),\".2f\") ,format(pe,\".2f\"), sep=\"\\t\")\n    \n    print(\"---------------------------------------------\")","b59355f7":"for sector in df.groupby(df['Sector']).agg(np.size).index:\n    sector_range_4(df[df['Sector'] == sector], sector)","f9caf9e0":"import matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n%matplotlib inline","7111094d":"df.columns","2843d83a":"stockpricedf = df.groupby('Sector').agg(np.sum)\nstockpricedf = stockpricedf.reset_index()","89640bfa":"sectors = stockpricedf.index\nprices  = stockpricedf['Price']\n\n\nplt.figure(figsize= (10, 10))\nplt.bar(sectors,prices,0.35)\nplt.show()","2757a28a":"stockpricemax = df.groupby('Sector').agg(np.max)\nstockpricemin = df.groupby('Sector').agg(np.min)\n\nsectors = stockpricemax.index\nmprices  = stockpricemax['Price']\nminprices  = stockpricemin['Price']\n\nx = np.arange(len(sectors))\nwidth=0.35\n\nfig, ax = plt.subplots(figsize= (10, 10))\nrect1 = ax.bar(x - width\/2, mprices, width, label='Max')\nrect2 = ax.bar(x + width\/2, minprices, width, label='Min')\nax.set_xticks(x)\nax.set_xticklabels(sectors)\n# ax.bar_label(rects1,mprices, padding=3)\n# ax.bar_label(rects2,minprices,padding=3)\nax.legend()\nplt.show()","af07842b":"stockpriceavg = df.groupby('Sector').agg(np.mean)\n\nsectors = stockpriceavg.index\nprices  = stockpriceavg['Price']\n\n\nplt.figure(figsize= (10, 10))\nplt.bar(sectors,prices,0.35)\nplt.show()","6f36f843":"plt.figure(figsize= (20, 20))\n\n\nax = sns.violinplot(x=\"Sector\", y=\"Price\", data=df, palette=\"muted\")","effc8bdb":"sns.pairplot(df)\n","7d39ee75":"plt.figure(figsize= (16, 16))\n\nsns.heatmap(df.corr())","c215cac8":"# df[stockpricedf.Sector] = 0\nnwdf = pd.get_dummies(df,columns = ['Sector'])\nnwdf.head()","f92720e2":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\nX, y = nwdf[nwdf.columns[3:]], nwdf['Price']\nclf = LinearRegression()\nclf.fit(X, y)\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","1d5c3ed1":"y_pred = clf.predict(X_test)\ny_pred","5fba367a":"from sklearn.metrics import accuracy_score\nclf.score(X_test, y_test)\n","1cfae60f":"X_test.iloc[0]\n\nX_test.iloc[0]['Price\/Earnings'] = 24\n\nd = pd.DataFrame(X_test.iloc[0])\nd= d.transpose()\nd\n\nclf.predict(d)","99b042dd":"# SECTOR_WISE","65922ef4":"* **Since P\/E has 2 rows Nan and P\/B has 8 rows Nan, we will clean them so that we can have smooth and consistent dataset**\n* **Also, SEC Filings are of no use to us for analysis**\n","e41c5f6f":"# Price -> Price\/Book","d6f87619":"# Price -> Price\/Earnings","062a216f":"# Stock Price Prediction","73a155c3":"# Visualization"}}