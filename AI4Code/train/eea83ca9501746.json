{"cell_type":{"d7f8a558":"code","d1a103bd":"code","ab39913b":"code","062a24b0":"code","90738540":"code","7f809ce9":"code","dd4e9067":"code","11f2d8af":"code","d51132b8":"code","c3ed086a":"code","4dacd67a":"code","dc6e5a50":"code","6ea39042":"code","ef042837":"code","652e8c0f":"code","46ae738f":"code","fa03445c":"code","f0c3073b":"code","a1690cdd":"code","40c2bc39":"code","e859db0c":"code","b9d29c6f":"code","da6f91a7":"code","75e2cff8":"code","0b30e2e6":"code","040f42e7":"code","41f52c40":"code","2829547c":"code","d2dd6e41":"code","4f7ccdb0":"code","1a8f5571":"code","9e2af325":"code","ccf23b56":"code","0b5d6812":"code","ff9fb0cc":"code","7719c6e6":"code","ad369a9a":"code","d811e992":"code","af2a254b":"code","0d7aed2d":"code","f5b49d69":"code","65561523":"code","115cd128":"code","03a0211d":"code","a1f98b7c":"code","3516a43d":"code","4daadec2":"code","46d88d40":"code","46d20370":"code","a77b4a93":"code","b0887628":"code","f3571fc6":"code","09a7320a":"code","358edebd":"code","620cd4f5":"code","88ad7fb8":"code","8ae99f00":"code","54ac93f8":"code","4dfb0547":"code","8911ee1e":"code","74dcfc78":"code","abdba162":"code","5ca237a7":"code","96b94e60":"code","24a20940":"code","d5863e5b":"code","f8b719c6":"code","0f4bd765":"code","8700cdb6":"code","50cc0885":"code","bfaf3ca4":"code","e6ea491f":"code","2b660bd8":"code","ff7dd731":"code","7faab562":"code","e14b90a2":"code","b1e1f212":"code","6ec1f8d4":"code","707d3eae":"code","3f20f904":"code","875d3397":"code","12c1e696":"code","a3f8fdd4":"code","55ab9ab3":"code","08528b38":"code","3abd4200":"code","f3858973":"code","5023b75c":"code","005113db":"code","15ca712b":"code","5c9b4474":"code","4ec26ed3":"code","0a73f449":"code","97ce4439":"code","3fad6b23":"code","6ad5b75f":"code","3ff6dee0":"code","73eacf14":"code","4e6dbce0":"markdown","6c3e9b11":"markdown","c21151ca":"markdown","41f31628":"markdown","801c2962":"markdown","9c64604d":"markdown","a1b2f904":"markdown","179967e0":"markdown","78178b83":"markdown","82e3718f":"markdown"},"source":{"d7f8a558":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d1a103bd":"# import library\nimport ggplot\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px ","ab39913b":"# Import data from CSV files\n\ndf_train=pd.read_csv('\/kaggle\/input\/titanic-machine-learning-from-disaster\/train.csv')\ndf_test=pd.read_csv('\/kaggle\/input\/titanic-machine-learning-from-disaster\/test.csv')\ndf_train.head()","062a24b0":"# Number of survivors of the titanic accident\ntotal_Passengers= df_train['Survived'].value_counts()[1] + df_train['Survived'].value_counts()[0]\nprint(\"Total Passengers in Titanic : \",total_Passengers)\nSurvived_passengers=df_train['Survived'].value_counts()[1]\nprint(\"Survived Passengers in Titanic : \",Survived_passengers)","90738540":"df_test.head()  # to have a look to data","7f809ce9":"df_train.info()","dd4e9067":"df_train.describe()","11f2d8af":"# let's find out the missing values and fill them with appropriate values\n\ndf_train.isnull().sum()","d51132b8":"df_train.isnull()","c3ed086a":"# Draw heat map to check numm values in train data\nsns.heatmap(df_train.isnull())","4dacd67a":"# Draw heat map to check numm values in test data\nsns.heatmap(df_test.isnull())","dc6e5a50":"# check No. of males and females travelled\n\nprint(\"No of males tavelled in Titanic : \",df_train['Sex'].value_counts()['male'])\nprint(\"No of Females travelled in Titanic : \",df_train['Sex'].value_counts()['female'])","6ea39042":"# check No. of males and females survived\n\ndf_train['Survived'].value_counts()[df_train['Sex']=='male']","ef042837":"df_train['Survived'].value_counts()[df_train['Sex']=='female']","652e8c0f":"# we can also visualise the survival rate in gender category using count plot\n\nplt.subplot(1,2,1)\nsns.countplot(x='Sex',data=df_train)","46ae738f":"# plot to visualize Survived stats\nplt.subplot(1,2,1)\nsns.countplot(data=df_train,x='Survived')","fa03445c":"# check survived count as per sex\n\nsns.countplot(x='Survived',data=df_train,palette='rainbow',hue='Sex')","f0c3073b":"# check survived count as per Pclass\n\nsns.countplot(x='Survived',data=df_train,palette='rainbow',hue='Pclass')\n# people who were living in better passenger classes survived people living in lower class were remained dead","a1690cdd":"# check survived count as per Embarked\n\nsns.countplot(x='Survived',data=df_train,palette='rainbow',hue='Embarked')","40c2bc39":"# check survived count as per Parch\n\nsns.countplot(x='Survived',data=df_train,palette='rainbow',hue='Parch')","e859db0c":"df_train['Fare']\/\/10","b9d29c6f":"# check survived count as per Fare\nsns.countplot(data=df_train,x='Survived',hue=df_train['Fare'],palette='rainbow')","da6f91a7":"# from above missing observations we learnt that around 20% of age values were missing.from the distribution large groups of passengers are of 15 to 35 years\nsns.set_style('whitegrid')\nsns.distplot(df_train['Age'],kde=False,bins=20,color='g')","75e2cff8":"# Survived people vs Siblings\/Spouses aboard the Titanic\ndf_train[['SibSp','Survived']].groupby(['SibSp'],as_index=False).mean().sort_values(ascending=False,by='SibSp')","0b30e2e6":"# Visualize a count plot between Survived & Sibsp\nsns.countplot(data=df_train,x='Survived',hue='SibSp',palette='rainbow')","040f42e7":"# Draw scatter plot between Survived & SibSp\nimport matplotlib.pyplot as plt\nx=df_train['SibSp']\ny=df_train['Survived']\nfig,Axes=plt.subplots()\nplt.suptitle('SibSp vs Survived')\nplt.subplot(1,3,1)\nplt.scatter(x,y,marker='*',color='r',linewidth=5,s=25,edgecolor='g')\nAxes.set_title('using scatterplot')\n","41f52c40":"# Draw different plot between Survived & SibSp\nplt.subplot(1,3,2)\nplt.xlabel('SibSp')\nplt.ylabel('Survived')\nAxes.set_title('using plot')\nplt.plot(x,y,'g*',linestyle='dashdot',linewidth=2,markersize=10)\nplt.subplot(1,3,3)\nplt.bar(x,y,align='center',color='black')\nAxes.set_title('using bar')\nplt.xlabel('SibSp')\nplt.ylabel('Survived')","2829547c":"# Survived based on their gender\n\ndf_train[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values(by='Sex',ascending=False)","d2dd6e41":"# cleansing of the data\nsns.boxplot(x='SibSp',y='Age',data=df_train)","4f7ccdb0":"# From the above observation we can map an estimated age to the null values in comparision with SibSp\n\ndef fill_age(cols):\n    SibSp = cols[0]\n    Age =cols[1]\n    if pd.isnull(Age):\n        if SibSp==0:\n            return 29\n        if SibSp==1:\n            return 30\n        if SibSp==2:\n            return 25\n        if SibSp==3:\n            return 21\n        if SibSp==4:\n            return 17\n        if SibSp==5:\n            return 11\n        else:\n            return df_train('ffill')\n    else:\n            return Age","1a8f5571":"df_train['Age']=df_train[[\"Age\",\"SibSp\"]].apply(fill_age,axis=1)","9e2af325":"# Draw heat map to display null values\nsns.heatmap(df_train.isnull())","ccf23b56":"df_train.isnull().sum()","0b5d6812":"# From the above heatmap we can see all the missing values are resolved but if we see the missing values using isnull().sum() there are still some missing values in Embarked columns\n# so we will fill missing Embarked values with backward or forward fill\n\ndf_train['Embarked'].fillna('bfill',inplace=True)","ff9fb0cc":"df_train.isnull().sum()","7719c6e6":"# so we now resolved all the missing values in the dataset, we can use the data provided efficiently only if the data is categorical format\n\ndf_train.info()","ad369a9a":"# we can represent the given values except Name,Sex,Embarked ,Ticket\n# so we will convert object datatype into categorical values if possible or we will drop the unnecessary columns\npd.get_dummies(df_train)","d811e992":"# so we will create a copy of train_df and proceed accordingly\ntrain_copy=df_train.copy()\ntrain_copy\n","af2a254b":"# now we will drop name and ticket columns because they can't be converted into valid categorical columns\ntrain_copy.drop(['Name','Ticket'],inplace=True,axis=1)","0d7aed2d":"train_copy","f5b49d69":"# so we will convert the Embarked and Sex to categorical values using get_dummies()\nSex_category=pd.get_dummies(train_copy['Sex'],drop_first=True)\nEmbarked_category=pd.get_dummies(train_copy['Embarked'],drop_first=True)","65561523":"# drop Sex and Embarked\ntrain_copy.drop(['Sex','Embarked'],axis=1,inplace=True)","115cd128":"# now we will add Sex_category and Embarked_category into the train_copy DataFrame\ntrain=pd.concat([train_copy,Sex_category,Embarked_category],axis=1)","03a0211d":"train.head()","a1f98b7c":"train.drop(['bfill'],axis=1,inplace=True)","3516a43d":"train.info()","4daadec2":"# Visualise using some seaborn plotting techniques\nsns.rugplot(train['Age'].isnull())\n\n# the below figure depicts that there are no missing values present in Age column","46d88d40":"sns.jointplot(data=train,x=train['Survived'],y=train['Pclass'],kind='kde')","46d20370":"# create pair plot for visibility across data\nsns.pairplot(train)","a77b4a93":"sns.distplot(train[['Survived','Pclass']],kde=True,bins=10)","b0887628":"sns.jointplot(x=train['male'],y=train['Pclass'],kind='kde')","f3571fc6":"# correlation of the train data\nsns.heatmap(train.corr())","09a7320a":"# visualize through categorical plottings\nsns.boxplot(x='male',y='Pclass',data=train,color='r')\nsns.boxenplot(x='male',y='Pclass',data=train,color='g')","358edebd":"# Plot swarm plot between male & Pclass\nsns.swarmplot(x='male',y='Pclass',data=train,color='k')\n","620cd4f5":"# Plot violine plot between male & Pclass\nsns.violinplot(x='male',y='Pclass',data=train,color='g')","88ad7fb8":"# Plot strip plot between male & Pclass\nsns.stripplot(x='male',y='Pclass',data=train,color='r')","8ae99f00":"# Using all the categorical plotting in a single figure\n\nsns.stripplot(x='Survived',y='SibSp',data=train,color='b')","54ac93f8":"# Plot swarm plot between Survived & SibSp\nsns.swarmplot(x='Survived',y='SibSp',data=train,color='k')","4dfb0547":"# Plot violine plot between Survived & SibSp\nsns.violinplot(x='Survived',y='SibSp',data=train,palette='rainbow')","8911ee1e":"# Plot boxen plot between Survived & SibSp\nsns.boxenplot(data=train,x='Survived',y='SibSp',color='m')","74dcfc78":"# Plot bar plot between Survived & SibSp\nsns.barplot(data=train,y='SibSp',x='Survived',color='y')","abdba162":"# Plot box plot between Survived & SibSp\nsns.boxplot(x='Survived',y='SibSp',data=train,palette='dark')","5ca237a7":"# Plot count plot between SibSp\nsns.countplot(data=train,y='SibSp',color='red')","96b94e60":"# Plot factor plot between Pclass & SibSp\nsns.factorplot(x='Pclass',y='SibSp',data=train)","24a20940":"# We have explored the data to a great extent.Now we can use machine learning techiniques to predict who survived or died on the Titanc.We can use different algorithms to predict this.Also we will try to quantify which algorithm gives us the highest accuracy.\n\n# #importing all the required ML packages\n\nfrom sklearn.linear_model import LogisticRegression #logistic regression\nfrom sklearn import svm #support vector Machine\nfrom sklearn.ensemble import RandomForestClassifier  #Random Forest\nfrom sklearn.neighbors import KNeighborsClassifier   # KNN\nfrom sklearn.tree import DecisionTreeClassifier   # Decision tree\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix","d5863e5b":"f,ax=plt.subplots(2,2,figsize=(20,15))\nsns.countplot('Embarked',data=df_train,ax=ax[0,0])\nax[0,0].set_title('No. Of Passengers Boarded')\nsns.countplot('Embarked',hue='Sex',data=df_train,ax=ax[0,1])\nax[0,1].set_title('Male-Female Split for Embarked')\nsns.countplot('Embarked',hue='Survived',data=df_train,ax=ax[1,0])\nax[1,0].set_title('Embarked vs Survived')\nsns.countplot('Embarked',hue='Pclass',data=df_train,ax=ax[1,1])\nax[1,1].set_title('Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2,hspace=0.5)\nplt.show()","f8b719c6":"# Factor Plot based on Class,Survival,Sex and Embarked\nsns.factorplot('Pclass','Survived',hue='Sex',col='Embarked',data=df_train)\nplt.show()","0f4bd765":"data=pd.read_csv('\/kaggle\/input\/titanic-machine-learning-from-disaster\/train.csv')\ndata.head()","8700cdb6":"data.isnull().sum()","50cc0885":"# Filing Age Missing Values\n# We can fill the missing value with the mean of the Age column.This is because we can fill the age of a child (5 years) with the mean age ( Around 30 years).This would increase the error in the data.But we can see that in the Name column we have titles like Mr,Mrs menioned.We have to get the mean age of each group in the titles and then replace the missing age with the mean values of the titles.\n\ndata['Title']=0\nfor i in data:\n    data['Title']=data.Name.str.extract('([A-Za-z]+)\\.') #lets extract the Salutations","bfaf3ca4":"# Here we are using the Regex: [A-Za-z]+).. So what it does is, it looks for strings which lie between A-Z or a-z and followed by a .(dot). So we successfully extract the Initials from the Name.\npd.crosstab(data.Title,data.Sex).T.style.background_gradient(cmap='summer_r') #Checking the Initials with the Sex","e6ea491f":"# In the dataset initials like Mlle or Mme stand for Miss.We will replace them with Miss.\ndata['Title'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)","2b660bd8":"pd.crosstab(data.Title,data.Sex).T.style.background_gradient(cmap='summer_r') #Checking the Initials with the Sex","ff7dd731":"# We have converted the Titles in four categories like Master,Miss,Mr,Mrs and Other.\ndata.groupby('Title')['Age'].mean() #lets check the average age by Initials","7faab562":"# Now we have got the mean Age of the different groups in the Title.Now we can use this values to imput the missing values in the Age Column in our Titanic Dataset.\n\ndata.loc[(data.Age.isnull())&(data.Title=='Mr'),'Age']=33\ndata.loc[(data.Age.isnull())&(data.Title=='Mrs'),'Age']=36\ndata.loc[(data.Age.isnull())&(data.Title=='Master'),'Age']=5\ndata.loc[(data.Age.isnull())&(data.Title=='Miss'),'Age']=22\ndata.loc[(data.Age.isnull())&(data.Title=='Other'),'Age']=46","e14b90a2":"data.Age.isnull().any() #So no null values left finally ","b1e1f212":"# Filling Embarked NaN\n# We can see that the Embarked column has two missing values.In the dataset most people embarked Titanic from the port S.So we can replace the two missing value with S\ndata['Embarked'].fillna('S',inplace=True)","6ec1f8d4":"data.Embarked.isnull().any()# Finally No NaN values","707d3eae":"# Fare Bin\n# Here we will use qcut this will split the data into bins based on the number of bins requested by us.\ndata['Fare_Range']=pd.qcut(data['Fare'],4)\ndata.groupby(['Fare_Range'])['Survived'].mean().to_frame().style.background_gradient(cmap='summer_r')","3f20f904":"# We can clearly see that as the fare increased the the survival percentage increases.\ndata['Fare_Group']=0\ndata.loc[data['Fare']<=7.91,'Fare_Group']=0\ndata.loc[(data['Fare']>7.91)&(data['Fare']<=14.454),'Fare_Group']=1\ndata.loc[(data['Fare']>14.454)&(data['Fare']<=31),'Fare_Group']=2\ndata.loc[(data['Fare']>31)&(data['Fare']<=513),'Fare_Group']=3","875d3397":"data","12c1e696":"# Age Binning\n# In case of a continous variable like Age we can get better insight by making bins of the Age data.\n\ndata['Age_band']=0\ndata.loc[data['Age']<=16,'Age_band']=0\ndata.loc[(data['Age']>16)&(data['Age']<=32),'Age_band']=1\ndata.loc[(data['Age']>32)&(data['Age']<=48),'Age_band']=2\ndata.loc[(data['Age']>48)&(data['Age']<=64),'Age_band']=3\ndata.loc[data['Age']>64,'Age_band']=4\ndata.head(10)","a3f8fdd4":"data['Age_band'].value_counts().to_frame().style.background_gradient(cmap='summer')#checking the number of passenegers in each band","55ab9ab3":"# Sibling and Spouse\nf,ax=plt.subplots(2,2,figsize=(20,15))\nsns.countplot('Embarked',data=data,ax=ax[0,0])\nax[0,0].set_title('No. Of Passengers Boarded')\nsns.countplot('Embarked',hue='Sex',data=data,ax=ax[0,1])\nax[0,1].set_title('Male-Female Split for Embarked')\nsns.countplot('Embarked',hue='Survived',data=data,ax=ax[1,0])\nax[1,0].set_title('Embarked vs Survived')\nsns.countplot('Embarked',hue='Pclass',data=data,ax=ax[1,1])\nax[1,1].set_title('Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2,hspace=0.5)\nplt.show()","08528b38":"data['Sex'] = data['Sex'].astype(str)\ndata['Embarked'] = data['Embarked'].astype(str)\ndata['Sex'].replace(['male','female'],[0,1],inplace=True)\ndata['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)\ndata['Title'].replace(['Mr','Mrs','Miss','Master','Other'],[0,1,2,3,4],inplace=True)\ndata.head(2)","3abd4200":"df=data.copy()\ndf.drop(['Name','Age','Ticket','Fare','Cabin','Fare_Range','PassengerId'],axis=1,inplace=True)\nsns.heatmap(df.corr(),annot=True,cmap='RdYlGn',linewidths=0.2,annot_kws={'size':20})\nfig=plt.gcf()\nfig.set_size_inches(18,15)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","f3858973":"df.drop(['SibSp','Parch'],axis=1,inplace=True)\ndf.head()","5023b75c":"df.isnull().sum()","005113db":"#importing all the required ML packages\nfrom sklearn.linear_model import LogisticRegression #logistic regression\nfrom sklearn import svm #support vector Machine\nfrom sklearn.ensemble import RandomForestClassifier #Random Forest\nfrom sklearn.neighbors import KNeighborsClassifier #KNN\nfrom sklearn.naive_bayes import GaussianNB #Naive bayes\nfrom sklearn.tree import DecisionTreeClassifier #Decision Tree\nfrom sklearn.model_selection import train_test_split #training and testing data split\nfrom sklearn import metrics #accuracy measure\nfrom sklearn.metrics import confusion_matrix #for confusion matrix\nimport cv2\nimport glob\nimport os\nimport matplotlib.pyplot as plt\nimport string\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split,cross_val_score,cross_val_predict\nfrom sklearn.utils.multiclass import unique_labels\nfrom sklearn import metrics\nfrom sklearn.svm import SVC\nfrom mlxtend.plotting import plot_decision_regions\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.metrics import plot_confusion_matrix","15ca712b":"X = df.drop(labels='Survived',axis=1)\ny = df['Survived']","5c9b4474":"# Test Train Split\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.1,random_state= 1234,stratify=y)\n\nprint('Training Set:',len(X_train))\nprint('Test Set:',len(X_test))\nprint('Training labels:',len(y_train))\nprint('Test labels:',len(y_test))","4ec26ed3":"model=svm.SVC(kernel='linear',C=0.2,gamma=0.1)\nmodel.fit(X_train,y_train)\nprediction1=model.predict(X_test)\nprint('Accuracy for linear SVM is',metrics.accuracy_score(prediction1,y_test))\n","0a73f449":"model=svm.SVC(kernel='rbf',C=0.8,gamma=0.4)\nmodel.fit(X_train,y_train)\nprediction2=model.predict(X_test)\nprint('Accuracy for rbf SVM is ',metrics.accuracy_score(prediction2,y_test))","97ce4439":"from sklearn.model_selection import KFold #for K-fold cross validation\nfrom sklearn.model_selection import cross_val_score #score evaluation\nfrom sklearn.model_selection import cross_val_predict #prediction\nkfold = KFold(n_splits=10, random_state=22) # k=10, split the data into 10 equal parts\nxyz=[]\naccuracy=[]\nstd=[]\nclassifiers=['Linear Svm','Radial Svm']\nmodels=[svm.SVC(kernel='linear'),svm.SVC(kernel='rbf')]\nfor i in models:\n    model = i\n    cv_result = cross_val_score(model,X,y, cv = kfold,scoring = \"accuracy\")\n    cv_result=cv_result\n    xyz.append(cv_result.mean())\n    std.append(cv_result.std())\n    accuracy.append(cv_result)\nnew_models_dataframe2=pd.DataFrame({'CV Mean':xyz,'Std':std},index=classifiers)       \nnew_models_dataframe2","3fad6b23":"plt.subplots(figsize=(12,6))\nbox=pd.DataFrame(accuracy,index=[classifiers])\nbox.T.boxplot()\npass","6ad5b75f":"new_models_dataframe2['CV Mean'].plot.bar(width=0.5)\nplt.title('Average CV Mean Accuracy')\nfig=plt.gcf()\nfig.set_size_inches(9,6)\nplt.show()","3ff6dee0":"# Decision tree\nfrom sklearn import tree\n# Create Decision Tree with max_depth = 3\ndecision_tree = tree.DecisionTreeClassifier(max_depth = 3)\ndecision_tree.fit(X_train, y_train)\n\ny_pred = decision_tree.predict(X_test)\nprint(y_pred)","73eacf14":"acc_decision_tree = round(decision_tree.score(X_train, y_train) * 100, 2)\nacc_decision_tree","4e6dbce0":"<a id=\"section-four\"><\/a>\n# Section  4 - Linear Support Vector Machine(Linear-SVM)","6c3e9b11":"<a id=\"section-eight\"><\/a>\n# Section  8 - Bar Plot of Accuracy\n","c21151ca":"<a id=\"section-nine\"><\/a>\n# Section  9 - Decision tree","41f31628":"<a id=\"section-three\"><\/a>\n# Section  3 - Visualizing Data via Graphs","801c2962":"<a id=\"section-two\"><\/a>\n# Section  2 - Exploratory Data Analysis","9c64604d":"<a id=\"section-one\"><\/a>\n# Section  1 - Importing Library & Data","a1b2f904":"<a id=\"section-five\"><\/a>\n# Section  5 - Radial Support Vector Machine(Radial-SVM)","179967e0":"<a id=\"section-six\"><\/a>\n# Section  6 - K Fold Cross Validation\n\n","78178b83":"# Table of Contents\n\n* [Section  1 - Importing Library & Data](#section-one)  \n* [Section 2 - Exploratory Data Analysis](#section-two)\n* [Section 3 - Visualizing Data via Graphs](#section-three)\n* [Section 4 - Linear Support Vector Machine(Linear-SVM)](#section-four)\n* [Section 5 - Radial Support Vector Machine(Radial-SVM)](#section-five)\n* [Section 6 - K Fold Cross Validation](#section-six)\n* [Section 7 - Box Plot of Accuracy](#section-seven)\n* [Section 8 - Bar Plot of Accuracy](#section-eight)\n* [Section 9 - Decision tree](#section-nine)\n","82e3718f":"<a id=\"section-seven\"><\/a>\n# Section  7 - Box Plot of Accuracy\n\n"}}