{"cell_type":{"dd14ec65":"code","15d2eb65":"code","354046fb":"code","de1574e4":"code","c2f44274":"code","9d49e551":"code","131d5e69":"code","9caca6cb":"code","64544324":"code","6465148e":"code","9bbd2a11":"code","51bfc952":"code","80d4ea6b":"code","450b17f1":"code","2b4f0c01":"code","9cd89ee5":"code","8ff4da09":"code","af631740":"code","d11d03ff":"code","8199342f":"code","1e1e4e79":"code","e2e5fe3c":"code","de70b69b":"code","073d0c47":"code","be397256":"code","4f075490":"code","15d44e05":"code","5db6fc76":"code","5684a897":"code","19ca4e01":"code","540bad3f":"code","024f8dea":"code","411ff81f":"markdown","0e549d09":"markdown","2c6c5d74":"markdown","fd1153ef":"markdown","ba758bfe":"markdown","df6a2e9d":"markdown","cd24ba05":"markdown","25b89109":"markdown","b0767ce8":"markdown","e14a72bf":"markdown","0b27c71d":"markdown","02ce6fd5":"markdown","6cd98e6f":"markdown","ca407e5a":"markdown","8361f4b7":"markdown","0a91269d":"markdown","d759e7eb":"markdown","0526bf13":"markdown","2dc994ca":"markdown","786cced4":"markdown","a4590003":"markdown","17f679b0":"markdown","fc237620":"markdown","2b6e215a":"markdown","47aeca0b":"markdown","73df3955":"markdown","4ca15c3c":"markdown"},"source":{"dd14ec65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt","15d2eb65":"iris = pd.read_csv(\"..\/input\/iris\/Iris.csv\")  #carregando o conjunto de dados","354046fb":"iris.head() #mostra as 2 primeiras linhas do conjunto de dados","de1574e4":"iris.info()  #verificar se h\u00e1 alguma inconsist\u00eancia no conjunto de dados\n#como vemos, n\u00e3o h\u00e1 valores nulos no conjunto de dados, ent\u00e3o os dados podem ser processados","c2f44274":"iris.drop('Id',axis=1,inplace=True) \n#descartando a coluna Id, pois \u00e9 desnecess\u00e1rio\n#axis = 1 especifica que deve ser coluna a ser removida, \n#inplace = 1 significa que as altera\u00e7\u00f5es devem ser refletidas no dataframe","9d49e551":"iris.info()","131d5e69":"iris[iris.Species=='Iris-setosa'].head(5) #esp\u00e9cie de select por valor dentro do conjunto de dados","9caca6cb":"fig = iris[iris.Species=='Iris-setosa'].plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm',color='blue', label='Setosa')\niris[iris.Species=='Iris-versicolor'].plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm',color='red', label='versicolor',ax=fig) #ax=fig\niris[iris.Species=='Iris-virginica'].plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm',color='brown', label='virginica', ax=fig) # ax=fig\nfig.set_xlabel(\"Sepal Length\")\nfig.set_ylabel(\"Sepal Width\")\nfig.set_title(\"Sepal Length VS Width\")\nfig=plt.gcf() # retorna a figura que est\u00e1 em constru\u00e7\u00e3o\nfig.set_size_inches(10,6)\nplt.show()","64544324":"fig = iris[iris.Species=='Iris-setosa'].plot.scatter(x='PetalLengthCm',y='PetalWidthCm',color='orange', label='Setosa')\niris[iris.Species=='Iris-versicolor'].plot.scatter(x='PetalLengthCm',y='PetalWidthCm',color='blue', label='versicolor',ax=fig)\niris[iris.Species=='Iris-virginica'].plot.scatter(x='PetalLengthCm',y='PetalWidthCm',color='green', label='virginica', ax=fig)\nfig.set_xlabel(\"Petal Length\")\nfig.set_ylabel(\"Petal Width\")\nfig.set_title(\" Petal Length VS Width\")\nfig=plt.gcf()\nfig.set_size_inches(10,6)\nplt.show()","6465148e":"plt.close()\niris.hist(edgecolor='green', linewidth=1.2)\nfig=plt.gcf()\nfig.set_size_inches(12,6)\nplt.show()","9bbd2a11":"# importar todos os pacotes necess\u00e1rios para usar os v\u00e1rios algoritmos de classifica\u00e7\u00e3o\nfrom sklearn.linear_model import LogisticRegression  # for Logistic Regression algorithm\nfrom sklearn.model_selection import train_test_split #to split the dataset for training and testing\nfrom sklearn.neighbors import KNeighborsClassifier  # for K nearest neighbours\nfrom sklearn import svm  #for Support Vector Machine (SVM) Algorithm\nfrom sklearn import metrics #for checking the model accuracy\nfrom sklearn.tree import DecisionTreeClassifier #for using Decision Tree Algoithm","51bfc952":"iris.shape #obter a forma do conjunto de dados","80d4ea6b":"iris.corr()","450b17f1":"plt.figure(figsize=(7,4)) \nsns.heatmap(iris.corr(),annot=True,cmap='cubehelix_r') #draws  heatmap with input as the correlation matrix calculted by(iris.corr())\nplt.show()","2b4f0c01":"train, test = train_test_split(iris, test_size = 0.3)# neste, nossos dados principais s\u00e3o divididos em treinar e testar\n# o atributo test_size = 0.3 divide os dados em uma propor\u00e7\u00e3o de 70% e 30%. treinar = 70% e teste = 30%\nprint(train.shape)\nprint(test.shape)","9cd89ee5":"train","8ff4da09":"train_X = train[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']]# taking the training data features\ntrain_y=train.Species# output of our training data\n\n\ntest_X= test[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']] # taking test data features\ntest_y =test.Species   #output value of test data","af631740":"test_X.head(2)","d11d03ff":"train_X.head(2)","8199342f":"train_X.head(2)","1e1e4e79":"train_y.head(2)  ##output of the training data","e2e5fe3c":"test_X.head(2)","de70b69b":"model = svm.SVC() #selecione o algoritmo\nmodel.fit(train_X,train_y) # treinamos o algoritmo com os dados de treinamento e a sa\u00edda do treinamento\n\n\n\nprediction=model.predict(test_X) # agora passamos os dados de teste para o algoritmo treinado\nprint('The accuracy of the SVM is:',metrics.classification_report(test_y, prediction)) \n#print('The precision of the SVM is:',metrics.precision_score(prediction,test_y, average='macro'))\n#print('The Recall of the SVM is:',metrics.recall_score(prediction,test_y, average='macro')) \n#https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.accuracy_score.html\n#https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.precision_score.html#sklearn.metrics.precision_score\n#https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.recall_score.html#sklearn.metrics.recall_score\n#passamos a sa\u00edda prevista pelo modelo e a sa\u00edda real","073d0c47":"model = LogisticRegression()\nmodel.fit(train_X,train_y)\nprediction=model.predict(test_X)\nprint('The accuracy of the Logistic Regression is',metrics.accuracy_score(test_y, prediction))","be397256":"model=DecisionTreeClassifier()\nmodel.fit(train_X,train_y)\nprediction=model.predict(test_X)\nprint('The accuracy of the Decision Tree is',metrics.accuracy_score(test_y, prediction))","4f075490":"model=KNeighborsClassifier(n_neighbors=10) #this examines 3 neighbours for putting the new data into a class\nmodel.fit(train_X,train_y)\nprediction=model.predict(test_X)\nprint('The accuracy of the KNN is',metrics.accuracy_score(test_y, prediction))","15d44e05":"petal=iris[['PetalLengthCm','PetalWidthCm','Species']]\nsepal=iris[['SepalLengthCm','SepalWidthCm','Species']]","5db6fc76":"train_p,test_p=train_test_split(petal,test_size=0.3,random_state=0)  #petals\ntrain_x_p=train_p[['PetalWidthCm','PetalLengthCm']]\ntrain_y_p=train_p.Species\ntest_x_p=test_p[['PetalWidthCm','PetalLengthCm']]\ntest_y_p=test_p.Species\n\n\ntrain_s,test_s=train_test_split(sepal,test_size=0.3,random_state=0)  #Sepal\ntrain_x_s=train_s[['SepalWidthCm','SepalLengthCm']]\ntrain_y_s=train_s.Species\ntest_x_s=test_s[['SepalWidthCm','SepalLengthCm']]\ntest_y_s=test_s.Species","5684a897":"model=svm.SVC()\nmodel.fit(train_x_p,train_y_p) \nprediction=model.predict(test_x_p) \nprint('The accuracy of the SVM using Petals is:',metrics.accuracy_score(test_y_p, prediction))\n\nmodel=svm.SVC()\nmodel.fit(train_x_s,train_y_s) \nprediction=model.predict(test_x_s) \nprint('The accuracy of the SVM using Sepal is:',metrics.accuracy_score(test_y_s, prediction))","19ca4e01":"model = LogisticRegression()\nmodel.fit(train_x_p,train_y_p) \nprediction=model.predict(test_x_p) \nprint('The accuracy of the Logistic Regression using Petals is:',metrics.accuracy_score(test_y_p, prediction,))\n\nmodel.fit(train_x_s,train_y_s) \nprediction=model.predict(test_x_s) \nprint('The accuracy of the Logistic Regression using Sepals is:',metrics.accuracy_score(test_y_s,prediction))","540bad3f":"model=DecisionTreeClassifier()\nmodel.fit(train_x_p,train_y_p) \nprediction=model.predict(test_x_p) \nprint('The accuracy of the Decision Tree using Petals is:',metrics.accuracy_score(test_y_p, prediction))\n\nmodel.fit(train_x_s,train_y_s) \nprediction=model.predict(test_x_s) \nprint('The accuracy of the Decision Tree using Sepals is:',metrics.accuracy_score(test_y_s,prediction))","024f8dea":"model=KNeighborsClassifier(n_neighbors=3) \nmodel.fit(train_x_p,train_y_p) \nprediction=model.predict(test_x_p) \nprint('The accuracy of the KNN using Petals is:',metrics.accuracy_score(test_y_p, prediction,))\n\nmodel.fit(train_x_s,train_y_s) \nprediction=model.predict(test_x_s) \nprint('The accuracy of the KNN using Sepals is:',metrics.accuracy_score(test_y_s, prediction))","411ff81f":"### Splitting The Data into Training And Testing Dataset","0e549d09":"#### Removendo a coluna desnecess\u00e1ria","2c6c5d74":"### Observa\u00e7\u00f5es:\n\n- Usar p\u00e9talas sobre s\u00e9pala para treinar os dados d\u00e1 uma precis\u00e3o muito melhor.\n- Isso era esperado, pois vimos no mapa de calor acima, que a correla\u00e7\u00e3o entre a largura e o comprimento da s\u00e9pala era muito baixa, enquanto a correla\u00e7\u00e3o entre a largura e o comprimento da p\u00e9tala era muito alta.","fd1153ef":"### Steps To Be followed When Applying an Algorithm\n\n 1. Divida o conjunto de dados em conjunto de dados de treinamento e teste. O conjunto de dados de teste geralmente \u00e9 menor do que o de treinamento, pois ajudar\u00e1 a treinar melhor o modelo.\n 2. Selecione qualquer algoritmo baseado no problema (classifica\u00e7\u00e3o ou regress\u00e3o) o que voc\u00ea achar que pode ser bom.\n 3. Em seguida, passe o conjunto de dados de treinamento ao algoritmo para trein\u00e1-lo. N\u00f3s usamos o **.fit()** method\n 4. Em seguida, passe os dados de teste para o algoritmo treinado para prever o resultado. N\u00f3s usamos o **.predict()** method.\n 5. Em seguida, verificamos a precis\u00e3o **passando o resultado previsto e a sa\u00edda real** para o modelo.","ba758bfe":"Agora, quando treinamos qualquer algoritmo, o n\u00famero de **features** e sua correla\u00e7\u00e3o desempenham um papel importante. \nSe houver **features** e muitos deles estiverem altamente correlacionados, treinar um algoritmo com todos os recursos reduzir\u00e1 a precis\u00e3o. Portanto, a sele\u00e7\u00e3o de recursos deve ser feita com cuidado. \nEste conjunto de dados tem poucos **features**, mas ainda veremos a correla\u00e7\u00e3o.","df6a2e9d":"Como podemos ver, os fei\u00e7\u00f5es p\u00e9tala (Petal) est\u00e3o proporcionando uma melhor divis\u00e3o do cluster em rela\u00e7\u00e3o aos fei\u00e7\u00f5es 'Sepal'. \nEsta \u00e9 uma indica\u00e7\u00e3o de que as p\u00e9talas podem ajudar em previs\u00f5es melhores e precisas sobre o 'Sepal'. \nVerificaremos isso mais tarde.","cd24ba05":"test_y e train_y s\u00e3o os r\u00f3tulos\n\ntest_X e train_X s\u00e3o os conjuntos de dados em s\u00ed","25b89109":"### Decision Tree","b0767ce8":"### O presente documento \u00e9 uma c\u00f3pia desse notebook: https:\/\/www.kaggle.com\/ash316\/ml-from-scratch-with-iris","e14a72bf":"### Cria\u00e7\u00e3o de dados de treinamento de p\u00e9talas e s\u00e9palas","0b27c71d":"**Observation--->**\n\nSepal Width and Length n\u00e3o est\u00e3o correlacionados\nPetal Width and Length s\u00e3o bem correlacionados\n\nUsaremos todos os recursos para treinar o algoritmo e verificar a precis\u00e3o.\n\nEm seguida, usaremos 1 recurso de p\u00e9tala e 1 recurso de s\u00e9pala para verificar a precis\u00e3o do algoritmo, pois estamos usando apenas 2 recursos que n\u00e3o est\u00e3o correlacionados. Assim, podemos ter uma varia\u00e7\u00e3o no conjunto de dados que pode ajudar em uma melhor precis\u00e3o. Vamos verificar mais tarde.","02ce6fd5":"### Logistic Regression","6cd98e6f":"Vamos verificar o conjunto de dados de treinamento e teste","ca407e5a":"Antes de come\u00e7ar, precisamos explicar algumas nota\u00e7\u00f5es de ML.\n\n**attributes**-->Um atributo \u00e9 uma propriedade de uma inst\u00e2ncia que pode ser usada para determinar sua classifica\u00e7\u00e3o. No conjunto de dados a seguir, os atributos s\u00e3o o comprimento e largura da p\u00e9tala e s\u00e9pala. Tamb\u00e9m \u00e9 conhecido como **Features**.\n\n**Target variable**, no contexto de aprendizado de m\u00e1quina \u00e9 a vari\u00e1vel que \u00e9 ou deveria ser a sa\u00edda. Aqui, as vari\u00e1veis alvo s\u00e3o as 3 esp\u00e9cies de flores.","8361f4b7":"### SVM","0a91269d":"### Usamos todos os recursos da \u00edris nos modelos acima. Agora vamos usar p\u00e9talas e s\u00e9palas separadamente","d759e7eb":"### Agora vamos ver como o comprimento e a largura s\u00e3o distribu\u00eddos","0526bf13":"### Logistic Regression","2dc994ca":"O gr\u00e1fico acima mostra a rela\u00e7\u00e3o entre o comprimento e a largura da 'Sepal'. \nAgora vamos verificar a rela\u00e7\u00e3o entre o comprimento e a largura da 'Petal'.","786cced4":"Assim, acabamos de implementar algumas das ferramentas de aprendizado de m\u00e1quina comuns. Como o conjunto de dados \u00e9 pequeno, com poucos recursos, n\u00e3o abordei alguns conceitos, pois seriam relevantes quando temos muitos recursos.","a4590003":"### K-Nearest Neighbours","17f679b0":"## Algumas an\u00e1lises explorat\u00f3rias de dados com \u00edris","fc237620":"### Agora, o problema dado \u00e9 um problema de classifica\u00e7\u00e3o. Portanto, estaremos usando os algoritmos de classifica\u00e7\u00e3o para construir um modelo.\n**Classification**: as amostras pertencem a duas ou mais classes e queremos aprender com os dados j\u00e1 rotulados como prever a classe de dados n\u00e3o rotulados\n\n**Regression**: se a sa\u00edda desejada consistir em uma ou mais vari\u00e1veis cont\u00ednuas, a tarefa \u00e9 chamada de regress\u00e3o. Um exemplo de problema de regress\u00e3o seria a previs\u00e3o do comprimento de um salm\u00e3o em fun\u00e7\u00e3o de sua idade e peso.","2b6e215a":"### Support Vector Machine (SVM)","47aeca0b":"### K-Nearest Neighbours","73df3955":"### Decision Tree","4ca15c3c":"SVM est\u00e1 dando uma precis\u00e3o muito boa. Continuaremos a verificar a precis\u00e3o de diferentes modelos.\n\nAgora seguiremos as mesmas etapas acima para treinar v\u00e1rios algoritmos de aprendizado de m\u00e1quina."}}