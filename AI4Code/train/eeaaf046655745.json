{"cell_type":{"358c4169":"code","da42d328":"code","439b4dfa":"code","5bc7c8c4":"code","1b2d769c":"code","ecf442cc":"code","a06c2975":"code","6b27f2ae":"code","7f8cbbf2":"code","bfac6353":"code","6819e812":"markdown","731a66cc":"markdown","34682e90":"markdown","241dc5ab":"markdown","0c922b08":"markdown","f5677c22":"markdown","400353cf":"markdown","e2ed4453":"markdown","03a643df":"markdown","2e100bc0":"markdown","449eb044":"markdown","e95305ac":"markdown","aff31f32":"markdown"},"source":{"358c4169":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","da42d328":"import pandas as pd\napps_with_duplicates =pd.read_csv('..\/input\/android-app-market-on-google-play\/datasets\/apps.csv')\n\n# Drop duplicates\napps = apps_with_duplicates.drop_duplicates()\n\n# Print the total number of apps\nprint('Total number of apps in the dataset = ',len(apps))\n\n# Print a concise summary of apps dataframe\nprint(apps.info())\n\n# Have a look at a random sample of n rows\nn = 5\napps.sample(n)","439b4dfa":"# List of characters to remove\nchars_to_remove = [',','$','+']\n# List of column names to clean\ncols_to_clean = ['Installs','Price']\n\n# Loop for each column\nfor col in cols_to_clean:\n    # Replace each character with an empty string\n    for char in chars_to_remove:\n        apps[col] = apps[col].astype(str).str.replace(char,'')\n    # Convert col to numeric\n    apps[col] = pd.to_numeric(apps[col])   ","5bc7c8c4":"import plotly\nplotly.offline.init_notebook_mode(connected=False) #to draw plot in offline mode also \nimport plotly.graph_objs as go                     #to plot graph\n\n# Print the total number of unique categories\nnum_categories = len(apps['Category'].unique())\nprint('Number of categories = ', num_categories)\n\n# Count the number of apps in each 'Category' and sort them in descending order\nnum_apps_in_category = apps['Category'].value_counts().sort_values(ascending = False)\n\ndata = [go.Bar(\n        x = num_apps_in_category.index, # index = category name\n        y = num_apps_in_category.values, # value = count\n)]\n\nplotly.offline.iplot(data) #similar to plt.show() in matplotlib.  ","1b2d769c":"# Average rating of apps\navg_app_rating = apps['Rating'].mean()\nprint('Average app rating = ',avg_app_rating)\n\n# Distribution of apps according to their ratings\ndata = [go.Histogram(\n        x = apps['Rating']\n)]\n\n# Vertical dashed line to indicate the average app rating\nlayout = {'shapes': [{\n              'type' :'line',\n              'x0': avg_app_rating,\n              'y0': 0,\n              'x1': avg_app_rating,\n              'y1': 1000,\n              'line': { 'dash': 'dashdot'}\n          }]\n          }\n\nplotly.offline.iplot({'data': data, 'layout': layout})","ecf442cc":"%matplotlib inline\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# Filter rows where both Rating and Size values are not null\napps_with_size_and_rating_present = apps[(~apps['Rating'].isnull()) & (~apps['Size'].isnull())]\n\ndfa=apps_with_size_and_rating_present['Category'].value_counts().to_frame(name = 'a')\nprint(dfa[dfa['a']>=250].reset_index())\n# Subset for categories with at least 250 apps\nlarge_categories = apps_with_size_and_rating_present.groupby('Category').filter(lambda x: len(x) >= 250).reset_index()\n\n# Plot size vs. rating\nplt1 = sns.jointplot(x = large_categories['Size'], y = large_categories['Rating'], kind = 'hex')\n\n# Subset apps whose 'Type' is 'Paid'\npaid_apps = apps_with_size_and_rating_present[apps_with_size_and_rating_present['Type'] == 'Paid']\n\n# Plot price vs. rating\nplt2 = sns.jointplot(x = paid_apps['Price'], y = paid_apps['Rating'])","a06c2975":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nfig.set_size_inches(15, 8) \n\n# Select a few popular app categories\npopular_app_cats = apps[apps[\"Category\"].isin(['GAME', 'FAMILY', 'PHOTOGRAPHY',\n                                            'MEDICAL', 'TOOLS', 'FINANCE',\n                                            'LIFESTYLE','BUSINESS'])]\n\n# Examine the price trend by plotting Price vs Category\nax = sns.stripplot(x ='Price', y = 'Category',data=popular_app_cats, jitter=True, linewidth=1)\nax.set_title('App pricing trend across categories')\n\n# Apps whose Price is greater than 200\napps_above_200 = popular_app_cats[['Category', 'App', 'Price']][popular_app_cats['Price'] > 200]  \napps_above_200 ","6b27f2ae":"# Select apps priced below $100\napps_under_100 = popular_app_cats[popular_app_cats['Price']<100]\nfig, ax = plt.subplots()\nfig.set_size_inches(15, 8) \n\n# Examine price vs category with the authentic apps\nax = sns.stripplot(x='Price', y='Category', data=apps_under_100,jitter=True,linewidth=1)    \nax.set_title('App pricing trend across categories after filtering for junk apps')    ","7f8cbbf2":"trace0 = go.Box(\n    # Data for paid apps\n    y=apps[apps['Type'] == 'Paid']['Installs'],\n    name = 'Paid'\n)\n\ntrace1 = go.Box(\n    # Data for free apps\n    y=apps[apps['Type'] == 'Free']['Installs'],\n    name = 'Free'\n)\n\nlayout = go.Layout(\n    title = \"Number of downloads of paid apps vs. free apps\",\n    yaxis = dict( \n         type = 'log'\n        )\n)\n\n# Add trace0 and trace1 to a list for plotting\ndata = [trace0,trace1]\nplotly.offline.iplot({'data': data, 'layout': layout})   ","bfac6353":"# Load user_reviews.csv\nreviews_df = pd.read_csv('..\/input\/android-app-market-on-google-play\/datasets\/user_reviews.csv')\n\n# Join and merge the two dataframe\nmerged_df = pd.merge(apps, reviews_df, on = 'App', how = \"inner\")\n\n# Drop NA values from Sentiment and Translated_Review columns\nmerged_df = merged_df.dropna(subset=['Sentiment', 'Translated_Review'])\n\n\nfig, ax = plt.subplots()\nfig.set_size_inches(11, 8)\n\n# User review sentiment polarity for paid vs. free apps\nax = sns.boxplot(x = 'Type', y = 'Sentiment_Polarity', data = merged_df)\nax.set_title('Sentiment Polarity Distribution')\nmerged_df","6819e812":"# Step 5: Size and price of an app\nFor size, if the mobile app is too large, it may be difficult and\/or expensive for users to download. Lengthy download times could turn users off before they even experience your mobile app. Plus, each user's device has a finite amount of disk space. \nFor price, some users expect their apps to be free or inexpensive. These problems compound if the developing world is part of your target market; especially due to internet speeds, earning power and exchange rates.\nHere we analysed:\n\n* \tDoes the size of an app affect its rating? yess\n* \tDo users really care about system-heavy apps or do they prefer light-weighted apps?\n*\tDoes the price of an app affect its rating?\n*\tDo users always prefer free apps over paid apps?\nWe find that the majority of top rated apps (rating over 4) range from 2 MB to 20 MB(small size appps). We also find that the vast majority of apps price themselves under $10(low pricing).\n","731a66cc":"# Step 1:apps data csv scrutinised\n**Checked if there are any duplicate entries in the csv data file, there was none. Also implemented .info()**","34682e90":"# Step 3: market share of each Category of apps \n* **For businesses to get their apps in front of users, it's important to make them more quickly and easily discoverable on Google Play. To improve the overall search experience, Google has introduced the concept of grouping apps into categories.**\n* **We saw that there are 33 unique app categories present in our dataset. Family and Game apps have the highest market prevalence. Interestingly, Tools, Business and Medical apps are also at the top.**","241dc5ab":"It looks like a bunch of the really expensive apps are \"junk\" apps. That is, apps that don't really have a purpose. Some app developer may create an app called I Am Rich Premium or most expensive app (H) just for a joke or to test their app development skills. Some developers even do this with malicious intent and try to make money by hoping people accidentally click purchase on their app in the store.","0c922b08":"**Columns in data sets**:\nIt contains all the details of the applications on Google Play. There are 13 features that describe a given app namely app ,category, Ratings , reviews, size, installs , type, price ,content, genre, last update , current version(of the app), android version(which it requires).","f5677c22":"# Step 4:distribution of app ratings ","400353cf":"# Step 8: analyzing popularity of paid apps vs free apps\nFor apps in the Play Store today, there are five types of pricing strategies: **free, freemium, paid, paymium, and subscription**. Let's focus on free and paid apps only.\nAre paid apps installed as much as free apps? It turns out that paid apps have a relatively lower number of installs than free apps, though the difference is not as stark as I would have expected!","e2ed4453":"# Step 9: sentiment analysis\nMining user review data to determine how people feel about your product, brand, or service can be done using a technique called sentiment analysis. User reviews for apps can be analyzed to identify if the mood is positive, negative or neutral about that app. For example, positive words in an app review might include words such as 'amazing', 'friendly', 'good', 'great', and 'love'. Negative words might be words like 'malware', 'hate', 'problem', 'refund', and 'incompetent'.\nBy plotting sentiment polarity scores of user reviews for paid and free apps, we observe that free apps receive a lot of harsh comments, as indicated by the outliers on the negative y-axis. Reviews for paid apps appear never to be extremely negative. This may indicate something about app quality, i.e., paid apps being of higher quality than free apps on average. The median polarity score for paid apps is a little higher than free apps, thereby syncing with our previous observation.\nIn this notebook, we analyzed over ten thousand apps from the Google Play Store. We can use our findings to inform our decisions should we ever wish to create an app ourselves.\n","03a643df":"* **App ratings (on a scale of 1 to 5) impact the discoverability as well as the company's overall brand image. Ratings are a key performance indicator of an app.**\n* **From our analysis, we found that the average volume of ratings across all app categories is 4.17. The histogram plot is skewed to the left indicating that the majority of the apps are highly rated with only a few exceptions in the low-rated apps.**\n","2e100bc0":"# Step 6: pricing of the app according to the category\nWhat monetization strategies can companies use to maximize profit? The costs of apps are largely based on features, complexity, and platform.\nThere are many factors to consider when selecting the right pricing strategy for your mobile app. It is important to consider the willingness of your customer to pay for your app. A wrong price could break the deal before the download even happens. Potential customers could be turned off by what they perceive to be a shocking cost, or they might delete an app they\u2019ve downloaded after receiving too many ads or simply not getting their money's worth.\nDifferent categories demand different price ranges. Some apps that are simple and used daily, like the calculator app, should probably be kept free. However, it would make sense to charge for a highly-specialized medical app that diagnoses diabetic patients. Below, we see that Medical and Family apps are the most expensive. Some medical apps extend even up to 80. All game apps are reasonably priced below 20.\n","449eb044":"# **Introducton**:\nIn this project ,comprehensive analysis of the Android app market by comparing over ten thousand apps in Google Play across different categories has been carried out. \nHere we'll look for insights in the data to devise strategies to drive customer growth and retention in android app market.\n","e95305ac":"# Step 2: Data cleaning\n**From .info() , we get to know that price and size are of type object as they contain symbols like + , $ whereas they should be numeric type, so I cleaned them and converted them into numeric type.**","aff31f32":"# Step 7: filter out those heftily priced junk apps\nHere we trimmed out apps with price more than $100."}}