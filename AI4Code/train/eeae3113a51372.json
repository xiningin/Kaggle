{"cell_type":{"b79204c6":"code","292d6448":"code","510f1d04":"code","3153b8d5":"code","3bffeeb8":"code","010ede8a":"code","f9c68be5":"code","a3b7cd67":"code","d1753021":"code","5051b3b1":"code","161dbf4b":"code","f21864a8":"code","f9ae91c6":"code","be4e5985":"code","f41b5c84":"code","0c94a5c1":"code","d2810932":"code","9f31fb2c":"code","a24a6f9d":"code","b6e15a98":"code","1b2cffff":"code","29cc8c9e":"code","8fd20dc0":"code","f94f28c3":"code","3bfe9b36":"code","3c40d773":"code","611435ab":"code","22bd3007":"code","339afaa0":"code","c71d0b52":"code","bfcdc748":"code","36cf6f65":"code","5ce0d96d":"code","006fc04d":"code","426e997f":"code","df2a5c66":"code","9cfd05ae":"code","25e81141":"code","25e7da25":"code","0258ea5a":"code","bb9d04ac":"code","2ce0e6fe":"code","1dd2ad74":"code","b8364205":"code","420571a2":"code","1075787b":"code","cdbafa3e":"code","ce507d26":"code","49b2f747":"code","15aaabcf":"code","c24be943":"code","5a721298":"code","b7c3d297":"code","e5e912b1":"code","d8baee01":"code","f40698bd":"code","2f5452a4":"code","169fd37b":"markdown","233145e7":"markdown","93ec2de7":"markdown","5156edfd":"markdown","210c9ec1":"markdown","09755e07":"markdown","bec97d26":"markdown","b371d5bc":"markdown","b625a245":"markdown","2c280b83":"markdown","ea0beab1":"markdown","86d41ba9":"markdown","d97ca3b5":"markdown"},"source":{"b79204c6":"# Importing packages\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\n\nplt.rcParams.update({'font.size': 12})\n\n# Load data\ndata = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv', parse_dates = ['ObservationDate','Last Update'])\n\nprint (data.shape)\nprint ('Last update: ' + str(data.ObservationDate.max()))","292d6448":"# Clean data\ndata = data[(data.Confirmed>0) | (data['Province\/State'] == 'Recovered') | (data.Recovered > 0)]\ndata = data.drop(['SNo', 'Last Update'], axis=1)\ndata = data.rename(columns={'Country\/Region': 'Country', 'ObservationDate':'Date'})\n# To check null values\ndata.isnull().sum()","510f1d04":"# Sort data\ndata = data.sort_values(['Date','Country','Province\/State'])\n# Add column of days since first case\ndata['first_date'] = data.groupby('Country')['Date'].transform('min')\ndata['days'] = (data['Date'] - data['first_date']).dt.days","3153b8d5":"last_date = data.Date.max()\ndate_minus7 = data.Date.max() + timedelta(days=-7)\nlatest = data[data.Date == last_date]\npast_7 = data[data.Date == date_minus7]\n\nc0 = np.sum(latest['Confirmed'])\nc7 = np.sum(past_7['Confirmed'])\nc_pct = (c0-c7)\/c7 * 100\nprint ('Total confirmed cases %.d, +%.d or %.2f%% from 7 days ago.' % (c0, c0-c7, c_pct))","3bffeeb8":"d0 = np.sum(latest['Deaths'])\nd7 = np.sum(past_7['Deaths'])\nd_pct = (d0-d7)\/d7 * 100\nprint ('Total death cases %.d, +%.d or %.2f%% from 7 days ago.' %(d0, d0-d7, d_pct))","010ede8a":"a0 = np.sum(latest['Confirmed']) - np.sum(latest['Deaths']) - np.sum(latest['Recovered'])\na7 = np.sum(past_7['Confirmed']) - np.sum(past_7['Deaths']) - np.sum(past_7['Recovered'])\na_pct = (a0-a7)\/a7 * 100\nprint ('Total active cases: %.d, compared to %.d 7 days ago. Change %.2f%%.' %(a0, a7, a_pct))","f9c68be5":"dr0 = d0\/c0 * 100\ndr7 = d7\/c7 * 100\nprint ('Death rate: %.2f%%, compared to %.2f%% 7 days ago' % (dr0, dr7))","a3b7cd67":"cty = latest.groupby('Country').sum()\ncty['Death Rate'] = cty['Deaths'] \/ cty['Confirmed'] * 100\ncty['Recovery Rate'] = cty['Recovered'] \/ cty['Confirmed'] * 100\ncty['Active'] = cty['Confirmed'] - cty['Deaths'] - cty['Recovered']\n\n# Table of 20 countries with most cases\n_ = cty.drop(['days','Death Rate', 'Recovery Rate'],axis=1).sort_values('Confirmed', ascending=False).head(20)\n_.astype('int64').style.background_gradient(cmap='Reds')","d1753021":"def plot_new(column, title):\n    _ = cty.sort_values(column, ascending=False).head(15)\n    g = sns.barplot(_[column], _.index)\n    plt.title(title, fontsize=14)\n    plt.ylabel(None)\n    plt.xlabel(None)\n    plt.grid(axis='x')\n    for i, v in enumerate(_[column]):\n        if column == 'Death Rate':\n            g.text(v*1.01, i+0.1, str(round(v,2)))\n        else:\n            g.text(v*1.01, i+0.1, str(int(v)))\n\nplt.figure(figsize=(9,16))\nplt.subplot(311)\nplot_new('Confirmed','Confirmed cases top 15 countries')\nplt.subplot(312)\nplot_new('Deaths','Death cases top 15 countries')\nplt.subplot(313)\nplot_new('Active','Active cases top 15 countries')\n\nplt.show()","5051b3b1":"def plot_rate(rank, title):\n    if rank == 'highest':\n        _ = cty[cty.Deaths>=10].sort_values('Death Rate', ascending=False).head(15)\n    else:\n        _ = cty[cty.Confirmed>=100].sort_values('Death Rate').head(15)\n    g = sns.barplot(_['Death Rate'], _.index)\n    plt.title(title, fontsize=14)\n    plt.ylabel(None)\n    plt.xlabel(None)\n    plt.grid(axis='x')\n    for i, v in enumerate(_['Death Rate']):\n        g.text(v*1.01, i+0.1, str(round(v,2)))\n\nplt.figure(figsize=(9,12))\nplt.subplot(211)\nplot_rate('highest','Highest death rate top 15 (>=10 deaths only)')\nplt.subplot(212)\nplot_rate('lowest','Lowest death rate top 15 (>=100 confirmed only)')","161dbf4b":"cty7 = past_7.groupby('Country').sum()\ncty7['Death Rate'] = cty7['Deaths'] \/ cty7['Confirmed'] * 100\ncty7['Recovery Rate'] = cty7['Recovered'] \/ cty7['Confirmed'] * 100\ncty7['Active'] = cty7['Confirmed'] - cty7['Deaths'] - cty7['Recovered']\ncty7 = cty7.add_suffix('_7')\ncty7.head()","f21864a8":"cty = pd.concat([cty, cty7], axis=1, sort=False)\ncty['new_confirm'] = cty['Confirmed'] - cty['Confirmed_7']\ncty['new_deaths'] = cty['Deaths'] - cty['Deaths_7']\ncty['active_chg'] = cty['Active'] - cty['Active_7']","f9ae91c6":"def plot_change(column, asc, title):\n    _ = cty.sort_values(column, ascending=asc).head(15)\n    g = sns.barplot(_[column], _.index)\n    plt.title(title)\n    plt.ylabel(None)\n    plt.xlabel(None)\n    plt.grid(axis='x')\n    for i, v in enumerate(_[column]):\n        g.text(v*1.01, i+0.1, str(int(v)))\n\nplt.figure(figsize=(9,20))\nplt.subplot(411)\nplot_change('new_confirm', False, 'Most new confirmed cases last 7 days')\nplt.subplot(412)\nplot_change('new_deaths', False, 'Most new death cases last 7 days')\nplt.subplot(413)\nplot_change('active_chg', False, 'Biggest increase in active cases last 7 days')\nplt.subplot(414)\nplot_change('active_chg', True, 'Biggest decrease in active cases last 7 days')\n\nplt.show()","be4e5985":"import matplotlib.dates as mdates\nmonths_fmt = mdates.DateFormatter('%b-%e')\n\nevo = data.groupby('Date')[['Confirmed','Deaths','Recovered']].sum()\nevo['Active'] = evo['Confirmed'] - evo['Deaths'] - evo['Recovered']\nevo['Death Rate'] = evo['Deaths'] \/ evo['Confirmed'] * 100\nevo['Recover Rate'] = evo['Recovered'] \/ evo['Confirmed'] * 100\nfig, ax = plt.subplots(2, 2, figsize=(12,9))\n\ndef plot_evo(num, col, title):\n    ax[num].plot(evo[col], lw=3)\n    ax[num].set_title(title)\n    ax[num].xaxis.set_major_locator(plt.MaxNLocator(7))\n    ax[num].xaxis.set_major_formatter(months_fmt)\n    ax[num].grid(True)\n    \nplot_evo((0,0), 'Confirmed', 'Confirmed cases')\nplot_evo((0,1), 'Deaths', 'Death cases')\nplot_evo((1,0), 'Active', 'Active cases')\nplot_evo((1,1), 'Death Rate', 'Death rate')\n\nplt.show()","f41b5c84":"def plot_cty(num, evo_col, title):\n    ax[num].plot(evo_col, lw=3)\n    ax[num].set_title(title)\n    ax[num].xaxis.set_major_locator(plt.MaxNLocator(7))\n    ax[num].xaxis.set_major_formatter(months_fmt)\n    ax[num].grid(True)\n\ndef evo_cty(country):\n    evo_cty = data[data.Country==country].groupby('Date')[['Confirmed','Deaths','Recovered']].sum()\n    evo_cty['Active'] = evo_cty['Confirmed'] - evo_cty['Deaths'] - evo_cty['Recovered']\n    evo_cty['Death Rate'] = evo_cty['Deaths'] \/ evo_cty['Confirmed'] * 100\n    plot_cty((0,0), evo_cty['Confirmed'], 'Confirmed cases')\n    plot_cty((0,1), evo_cty['Deaths'], 'Death cases')\n    plot_cty((1,0), evo_cty['Active'], 'Active cases')\n    plot_cty((1,1), evo_cty['Death Rate'], 'Death rate')\n    fig.suptitle(country, fontsize=16)\n    plt.show()","0c94a5c1":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Mainland China')","d2810932":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Hong Kong')","9f31fb2c":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Taiwan')","a24a6f9d":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Japan')","b6e15a98":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('South Korea')","1b2cffff":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Singapore')","29cc8c9e":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Vietnam')","8fd20dc0":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('India')","f94f28c3":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Pakistan')","3bfe9b36":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Australia')","3c40d773":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Italy')","611435ab":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Spain')","22bd3007":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('UK')","339afaa0":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Germany')","c71d0b52":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('France')","bfcdc748":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Poland')","36cf6f65":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Czech Republic')","5ce0d96d":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Switzerland')","006fc04d":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Sweden')","426e997f":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Serbia')","df2a5c66":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Russia')","9cfd05ae":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('US')","25e81141":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Canada')","25e7da25":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Mexico')","0258ea5a":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Brazil')","bb9d04ac":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Argentina')","2ce0e6fe":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Chile')","1dd2ad74":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Peru')","b8364205":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Iran')","420571a2":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Saudi Arabia')","1075787b":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Qatar')","cdbafa3e":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Turkey')","ce507d26":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Yemen')","49b2f747":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Bahrain')","15aaabcf":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('South Africa')","c24be943":"fig, ax = plt.subplots(2, 2, figsize=(12,9))\nevo_cty('Ethiopia')","5a721298":"pop = pd.read_csv('\/kaggle\/input\/population-by-country-2020\/population_by_country_2020.csv',\n                 usecols = ['Country (or dependency)', 'Population (2020)', 'Density (P\/Km\u00b2)'])\npop.columns = ['Country','Population','Density']\n# Clean up country names\nto_replace = ['China','United States','DR Congo', 'United Kingdom','Myanmar','C\u00f4te d\\'Ivoire', 'Czech Republic (Czechia)',\n             'Congo','Macao','State of Palestine','St. Vincent & Grenadines', 'Saint Kitts & Nevis']\nreplace_by = ['Mainland China','US','Congo (Kinshasa)','UK','Burma','Ivory Coast','Czech Republic',\n             'Congo (Brazzaville)','Macau','West Bank and Gaza','Saint Vincent and the Grenadines', 'Saint Kitts and Nevis']\npop.replace(to_replace, replace_by, inplace=True)","b7c3d297":"cty_p = cty.rename_axis('Country').reset_index()\ncty_p = cty_p.merge(pop, how='left', on = 'Country')\ncty_p.head()","e5e912b1":"# Check missing countries\nnas = cty_p[cty_p.isnull().any(axis=1)]\nnas[['Country','Confirmed','Population']]","d8baee01":"cty_p['Case per M pop'] = cty_p['Confirmed'] \/ cty_p['Population'] * 1000000\ncty_p['Death per M pop'] = cty_p['Deaths'] \/ cty_p['Population'] * 1000000","f40698bd":"def plot_pop_case(rank, title):\n    if rank == 'highest':\n        _ = cty_p[cty_p.Population>1000000].sort_values('Case per M pop', ascending=False).head(15)\n    else:\n        _ = cty_p[cty_p.Population>1000000].sort_values('Case per M pop').head(15)\n    g = sns.barplot(_['Case per M pop'], _.Country)\n    plt.title(title, fontsize=14)\n    plt.ylabel(None)\n    plt.xlabel(None)\n    plt.grid(axis='x')\n    if rank == 'highest':\n        for i, v in enumerate(_['Case per M pop']):\n            g.text(v*1.01, i+0.1, str(int(v)))\n    else:\n        for i, v in enumerate(_['Case per M pop']):\n            g.text(v*1.01, i+0.1, str(round(v,2)))\n\nplt.figure(figsize=(9,12))\nplt.subplot(211)\nplot_pop_case('highest','Countries with most cases per million population\\n(>1M pop only)')\nplt.subplot(212)\nplot_pop_case('lowest','Countries with fewest cases per million population\\n(>1M pop only)')","2f5452a4":"def plot_pop_death(rank, title):\n    if rank == 'highest':\n        _ = cty_p[cty_p.Population>1000000].sort_values('Death per M pop', ascending=False).head(15)\n    else:\n        _ = cty_p[cty_p.Confirmed>=100].sort_values('Death per M pop').head(15)\n    g = sns.barplot(_['Death per M pop'], _.Country)\n    plt.title(title, fontsize=14)\n    plt.ylabel(None)\n    plt.xlabel(None)\n    plt.grid(axis='x')\n    if rank == 'highest':\n        for i, v in enumerate(_['Death per M pop']):\n            g.text(v*1.01, i+0.1, str(int(v)))\n    else:\n        for i, v in enumerate(_['Death per M pop']):\n            g.text(v*1.01, i+0.1, str(round(v,2)))\n\nplt.figure(figsize=(9,12))\nplt.subplot(211)\nplot_pop_death('highest','Countries with most deaths per million population (>1M pop only)')\nplt.subplot(212)\nplot_pop_death('lowest','Countries with fewest deaths per million population (>=100 confirmed only)')","169fd37b":"## Population and Density","233145e7":"## Latest status update","93ec2de7":"## Evolution of cases","5156edfd":"## Africa","210c9ec1":"## Cleaning Data","09755e07":"## Europe","bec97d26":"## Middle East","b371d5bc":"## America","b625a245":"## Asia-Pacific","2c280b83":"# Analysis of Coronavirus Data\n\nCoronavirus, started from Wuhan, China in December 2019, is now spreading throughout the world and become the biggest global pandemic since the Spanish flu in 1918, which caused millions of deaths. This notebook will visualize the situation and trend of coronavirus outbreak at a country level.","ea0beab1":"The following code allow us to plot for any country we want to focus on:","86d41ba9":"That's is for now. Stay tuned for more analysis! Wish everyone stay calm and healthy!","d97ca3b5":"Note here: The recovered data for the US and UK seem to be inorrect."}}