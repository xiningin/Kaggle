{"cell_type":{"7a0e5811":"code","3413c5f7":"code","112b3a59":"code","dad3601f":"code","68291710":"code","4550b6be":"code","3700dff4":"code","9a17744e":"code","2ef45205":"code","c8d09bae":"code","64c372b5":"code","af27f525":"code","1bdbc9b7":"code","68447421":"code","3b41c895":"code","883a8b72":"code","0a93456d":"code","4a5ca9e1":"markdown","4e084ce6":"markdown","af839622":"markdown","f4814885":"markdown","90a62c87":"markdown","6d66faae":"markdown"},"source":{"7a0e5811":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3413c5f7":"df = pd.read_csv('\/kaggle\/input\/sars-outbreak-2003-complete-dataset\/sars_2003_complete_dataset_clean.csv')\ndf_new = df.copy()","112b3a59":"df_new.head()","dad3601f":"df_new = df_new.rename(columns={'Cumulative number of case(s)':'Confirmed cases', \\\n                        'Number of deaths': 'Deaths',\\\n                       'Number recovered': 'Recovered cases'})","68291710":"df_new.info()","4550b6be":"df_new['Country'].unique()","3700dff4":"plt.figure(figsize=(10,10))\nsns.barplot(y = df_new['Country'] , x = df_new['Confirmed cases'])\nplt.xticks(rotation = 90)","9a17744e":"df1 = df_new[df_new['Country'].str.contains(\"China\") ]\ndf1","2ef45205":"plt.figure(figsize=(10,5))\nsns.countplot('Country',data=df1)","c8d09bae":"df2 = df1[df1['Country'] == 'China']\nplt.figure(figsize=(20,5))\nsns.barplot(x = df2['Date'] , y = df2['Confirmed cases'])\nplt.title('Cases in China per Date')\nplt.xticks(rotation = 90)","64c372b5":"df2 = df1[df1['Country'] == 'China']\nplt.figure(figsize=(20,5))\nsns.barplot(x = df2['Date'] , y = df2['Deaths'])\nplt.title('Deaths  in China per Date')\nplt.xticks(rotation = 90)","af27f525":"by_date = df_new.groupby('Date')['Confirmed cases', 'Deaths', 'Recovered cases'].sum().reset_index()\nby_date","1bdbc9b7":"df_melt_bydate = by_date.melt(id_vars='Date', value_vars=['Confirmed cases', 'Deaths', 'Recovered cases'])\ndf_melt_bydate","68447421":"plt.figure(figsize=(20,10))\nsns.lineplot(x = 'Date' , y = 'value',data = df_melt_bydate  , hue = 'variable')\nplt.xticks(rotation = 90)\nplt.annotate(xy = (\"2003-05-29\",8295), s ='The curve starts to flatten',xytext=(55,8295))\nplt.title('Worldwide confirmed and recovered cases, and deaths over time')\nplt.show()\n","3b41c895":"df_new['Date'] = pd.to_datetime(df_new['Date'])\ndf_new.insert(1,'Week',df_new['Date'].dt.week)","883a8b72":"recover_by_week = df_new.groupby('Week')['Recovered cases'].sum().reset_index()","0a93456d":"plt.figure(figsize=(20,10))\nplt.title('Recovered Cases by week worldwide')\nsns.lineplot(x ='Week' , y = 'Recovered cases' ,data= recover_by_week)","4a5ca9e1":"We observe that most of the cases have been found in China followed by  its own Cities Hong Kong and Taiwan.","4e084ce6":"Peak value was observed on June 10 after which the curve flattens.","af839622":"We see that the curve started to flatten just after 2.5 months.","f4814885":"There are no null values in our dataframe.","90a62c87":"We now create another dataframe which would help us analysing the whole world data.","6d66faae":"Formed a new dataframe which contains only the Chinese regions.\nWe can perform visualization on this dataframe!"}}