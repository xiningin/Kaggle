{"cell_type":{"986ba8b3":"code","4b7c2962":"code","a76dc2ad":"code","edd151c4":"code","5217fe9d":"code","61149f6d":"code","2d9f94ac":"code","fd4eec1b":"code","2b7d1fca":"code","28865625":"code","6ee09041":"code","627c59f8":"code","83d1cae2":"code","3a84d50a":"code","5f1c90ac":"code","4bba973d":"code","0790fbd7":"code","836ca7e7":"code","8a87d906":"code","cb430b4c":"code","90e08bb4":"code","cddbef9e":"code","d1cba7cd":"code","a5897481":"code","57896ebb":"code","7542840d":"code","53a44d97":"code","a7e14d4e":"code","a9d0bb8e":"code","d124b167":"code","06f27e75":"code","21bad98b":"code","233fa866":"code","98c995a8":"code","cd191e9d":"code","798a6771":"code","6d4715eb":"code","74b37b89":"code","8186e1a5":"markdown"},"source":{"986ba8b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b7c2962":"!pip install download","a76dc2ad":"!pip install fbprophet","edd151c4":"import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nfrom datetime import datetime\nimport pandas as pd\nimport plotly.express as px\n\nfrom download import download\n\n\nmpl.rcParams['figure.figsize'] = (10, 8)\nmpl.rcParams['axes.grid'] = False","5217fe9d":"path = download('https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/00501\/PRSA2017_Data_20130301-20170228.zip', '\/tmp\/aq', kind=\"zip\")","61149f6d":"!ls \/tmp\/aq\/PRSA_Data_20130301-20170228","2d9f94ac":"def convert_to_date(x):\n    return datetime.strptime(x, '%Y %m %d %H')","fd4eec1b":"aq_df_sh = pd.read_csv('\/tmp\/aq\/PRSA_Data_20130301-20170228\/PRSA_Data_Shunyi_20130301-20170228.csv', parse_dates = [['year', 'month', 'day', 'hour']],date_parser=convert_to_date)","2b7d1fca":"aq_df_wa = pd.read_csv('\/tmp\/aq\/PRSA_Data_20130301-20170228\/PRSA_Data_Wanliu_20130301-20170228.csv', parse_dates = [['year', 'month', 'day', 'hour']],date_parser=convert_to_date)","28865625":"aq_df_gu = pd.read_csv('\/tmp\/aq\/PRSA_Data_20130301-20170228\/PRSA_Data_Gucheng_20130301-20170228.csv', parse_dates = [['year', 'month', 'day', 'hour']],date_parser=convert_to_date)","6ee09041":"aq_df = pd.concat([aq_df_sh, aq_df_wa,aq_df_gu], ignore_index=True, sort=False)","627c59f8":"aq_df.head()","83d1cae2":"aq_df.tail()","3a84d50a":"aq_df=aq_df.drop('No',axis=1)","5f1c90ac":"aq_df=aq_df.set_index('year_month_day_hour').groupby('station').resample('D').mean()","4bba973d":"aq_df.head()","0790fbd7":"aq_df.tail()","836ca7e7":"aq_df=aq_df.reset_index()","8a87d906":"aq_df.set_index('year_month_day_hour').query('station==\"Shunyi\"')[['O3','TEMP']].plot()","cb430b4c":"aq_df.set_index('year_month_day_hour').query('station==\"Wanliu\"')[['O3','TEMP']].plot()","90e08bb4":"aq_df.set_index('year_month_day_hour').groupby('station')[['O3','TEMP']].plot()","cddbef9e":"aq_df['station'].unique()","d1cba7cd":"aq_df.columns","a5897481":"from fbprophet import Prophet","57896ebb":"df_final=aq_df[['year_month_day_hour','TEMP','O3','station']].rename({'year_month_day_hour':'ds','O3':'y'},axis='columns')","7542840d":"df_final.head()","53a44d97":"stations=df_final.groupby('station')","a7e14d4e":"stations.head()","a9d0bb8e":"for station in stations.groups:\n    group = stations.get_group(station)\n    train=group[(group['ds'] >= '2013-03-01') & (group['ds'] <= '2016-02-28')]\n    test=group[(group['ds'] > '2016-02-28')]","d124b167":"train.shape","06f27e75":"test.shape","21bad98b":"target=pd.DataFrame()","233fa866":"for station in stations.groups:\n    group = stations.get_group(station)\n    \n    m = Prophet(interval_width=0.95)\n    m.fit(group)\n    future = m.make_future_dataframe(periods=366)\n    forecast = m.predict(future)  \n    m.plot(forecast)  \n    forecast = forecast.rename(columns={'yhat': 'yhat_'+station})\n    target = pd.merge(target, forecast.set_index('ds'), how='outer', left_index=True, right_index=True)","98c995a8":"target = target[['yhat_' + station for station in stations.groups.keys()]]","cd191e9d":"target.head()","798a6771":"pd.concat([df_final.set_index('ds').query(\"station=='Gucheng'\")['y'],target['yhat_Gucheng']],axis=1).plot()","6d4715eb":"df_final['station'].unique()","74b37b89":"pd.concat([df_final.set_index('ds').query(\"station=='Wanliu'\")['y'],target['yhat_Gucheng']],axis=1).plot()","8186e1a5":"**The model captures the pattern well**"}}