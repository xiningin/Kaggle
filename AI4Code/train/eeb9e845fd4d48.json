{"cell_type":{"c901d916":"code","da91044c":"code","c0dda726":"code","c488a021":"code","0a05e7d0":"code","8732a508":"code","c066c41f":"code","3bfdd564":"code","e5c233dc":"code","1b144a39":"code","e9dbe5ee":"code","6abf1139":"code","35e2138a":"code","46c41bd4":"code","a458f0ef":"code","a94af3d4":"code","40bfbff2":"code","1c5d37e5":"code","866ef29b":"code","e5a359dd":"code","a979bfa6":"code","daed602e":"code","5918f99e":"code","f7a515e8":"code","a7817982":"code","84832987":"code","702d1915":"code","467ea417":"code","2996b2c6":"markdown","b6f4cbde":"markdown","95c7701f":"markdown","797384bf":"markdown","3551d19d":"markdown","ed264e38":"markdown","9b3bd3c6":"markdown","65db0606":"markdown","d202503a":"markdown","61a0b9c1":"markdown","67faa038":"markdown","a196f2ac":"markdown","6ac196dc":"markdown","ddacde88":"markdown","e5679656":"markdown","72b16316":"markdown","ebb31999":"markdown","3c2a9b77":"markdown","c495f966":"markdown","b4621187":"markdown","f387a33f":"markdown","13c902d7":"markdown","07af921a":"markdown","f238a820":"markdown","91b8a84f":"markdown","5903f2b0":"markdown","cff32441":"markdown","84fd5e2f":"markdown"},"source":{"c901d916":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nimport warnings\nimport datetime as dt\nimport matplotlib.dates as mdates\nwarnings.filterwarnings('ignore')","da91044c":"gen_1=pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\ngen_1.drop('PLANT_ID',1,inplace=True)\nsens_1= pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')\nsens_1.drop('PLANT_ID',1,inplace=True)\n#format datetime\ngen_1['DATE_TIME']= pd.to_datetime(gen_1['DATE_TIME'],format='%d-%m-%Y %H:%M')\nsens_1['DATE_TIME']= pd.to_datetime(sens_1['DATE_TIME'],format='%Y-%m-%d %H:%M:%S')","c0dda726":"df_gen=gen_1.groupby('DATE_TIME').sum().reset_index()\ndf_gen['time']=df_gen['DATE_TIME'].dt.time\n\nfig,ax = plt.subplots(ncols=2,nrows=1,dpi=100,figsize=(20,5))\n# daily yield plot\ndf_gen.plot(x='DATE_TIME',y='DAILY_YIELD',color='navy',ax=ax[0])\n# AC & DC power plot\ndf_gen.set_index('time').drop('DATE_TIME',1)[['AC_POWER','DC_POWER']].plot(style='o',ax=ax[1])\n\nax[0].set_title('Daily yield',)\nax[1].set_title('AC power & DC power during day hours')\nax[0].set_ylabel('kW',color='navy',fontsize=17)\nplt.show()","c488a021":"daily_gen=df_gen.copy()\ndaily_gen['date']=daily_gen['DATE_TIME'].dt.date\n\ndaily_gen=daily_gen.groupby('date').sum()\n\nfig,ax= plt.subplots(ncols=2,dpi=100,figsize=(20,5))\ndaily_gen['DAILY_YIELD'].plot(ax=ax[0],color='navy')\ndaily_gen['TOTAL_YIELD'].plot(kind='bar',ax=ax[1],color='navy')\nfig.autofmt_xdate(rotation=45)\nax[0].set_title('Daily Yield')\nax[1].set_title('Total Yield')\nax[0].set_ylabel('kW',color='navy',fontsize=17)\nplt.show()","0a05e7d0":"df_sens=sens_1.groupby('DATE_TIME').sum().reset_index()\ndf_sens['time']=df_sens['DATE_TIME'].dt.time\n\nfig,ax = plt.subplots(ncols=2,nrows=1,dpi=100,figsize=(20,5))\n# daily yield plot\ndf_sens.plot(x='time',y='IRRADIATION',ax=ax[0],style='o')\n# AC & DC power plot\ndf_sens.set_index('DATE_TIME').drop('time',1)[['AMBIENT_TEMPERATURE','MODULE_TEMPERATURE']].plot(ax=ax[1])\n\nax[0].set_title('Irradiation during day hours',)\nax[1].set_title('Ambient and Module temperature')\nax[0].set_ylabel('W\/m',color='navy',fontsize=17)\nax[1].set_ylabel('\u00b0C',color='navy',fontsize=17)\n\n\nplt.show()","8732a508":"losses=gen_1.copy()\nlosses['day']=losses['DATE_TIME'].dt.date\nlosses=losses.groupby('day').sum()\nlosses['losses']=losses['AC_POWER']\/losses['DC_POWER']*100\n\nlosses['losses'].plot(style='o--',figsize=(17,5),label='Real Power')\n\nplt.title('% of DC power converted in AC power',size=17)\nplt.ylabel('DC power converted (%)',fontsize=14,color='red')\nplt.axhline(losses['losses'].mean(),linestyle='--',color='gray',label='mean')\nplt.legend()\nplt.show()","c066c41f":"sources=gen_1.copy()\nsources['time']=sources['DATE_TIME'].dt.time\nsources.set_index('time').groupby('SOURCE_KEY')['DC_POWER'].plot(style='o',legend=True,figsize=(20,10))\nplt.title('DC Power during day for all sources',size=17)\nplt.ylabel('DC POWER ( kW )',color='navy',fontsize=17)\nplt.show()","3bfdd564":"dc_gen=gen_1.copy()\ndc_gen['time']=dc_gen['DATE_TIME'].dt.time\ndc_gen=dc_gen.groupby(['time','SOURCE_KEY'])['DC_POWER'].mean().unstack()\n\ncmap = sns.color_palette(\"Spectral\", n_colors=12)\n\nfig,ax=plt.subplots(ncols=2,nrows=1,dpi=100,figsize=(20,6))\ndc_gen.iloc[:,0:11].plot(ax=ax[0],color=cmap)\ndc_gen.iloc[:,11:22].plot(ax=ax[1],color=cmap)\n\nax[0].set_title('First 11 sources')\nax[0].set_ylabel('DC POWER ( kW )',fontsize=17,color='navy')\nax[1].set_title('Last 11 sources')\nplt.show()","e5c233dc":"temp1_gen=gen_1.copy()\n\ntemp1_gen['time']=temp1_gen['DATE_TIME'].dt.time\ntemp1_gen['day']=temp1_gen['DATE_TIME'].dt.date\n\n\ntemp1_sens=sens_1.copy()\n\ntemp1_sens['time']=temp1_sens['DATE_TIME'].dt.time\ntemp1_sens['day']=temp1_sens['DATE_TIME'].dt.date\n\n# just for columns\ncols=temp1_gen.groupby(['time','day'])['DC_POWER'].mean().unstack()","1b144a39":"ax =temp1_gen.groupby(['time','day'])['DC_POWER'].mean().unstack().plot(sharex=True,subplots=True,layout=(17,2),figsize=(20,30))\ntemp1_gen.groupby(['time','day'])['DAILY_YIELD'].mean().unstack().plot(sharex=True,subplots=True,layout=(17,2),figsize=(20,20),style='-.',ax=ax)\n\ni=0\nfor a in range(len(ax)):\n    for b in range(len(ax[a])):\n        ax[a,b].set_title(cols.columns[i],size=15)\n        ax[a,b].legend(['DC_POWER','DAILY_YIELD'])\n        i=i+1\n\nplt.tight_layout()\nplt.show()","e9dbe5ee":"ax= temp1_sens.groupby(['time','day'])['MODULE_TEMPERATURE'].mean().unstack().plot(subplots=True,layout=(17,2),figsize=(20,30))\ntemp1_sens.groupby(['time','day'])['AMBIENT_TEMPERATURE'].mean().unstack().plot(subplots=True,layout=(17,2),figsize=(20,40),style='-.',ax=ax)\n\ni=0\nfor a in range(len(ax)):\n    for b in range(len(ax[a])):\n        ax[a,b].axhline(50)\n        ax[a,b].set_title(cols.columns[i],size=15)\n        ax[a,b].legend(['Module Temperature','Ambient Temperature'])\n        i=i+1\n\nplt.tight_layout()\nplt.show()","6abf1139":"worst_source=gen_1[gen_1['SOURCE_KEY']=='bvBOhCH3iADSZry']\nworst_source['time']=worst_source['DATE_TIME'].dt.time\nworst_source['day']=worst_source['DATE_TIME'].dt.date\n\nax=worst_source.groupby(['time','day'])['DC_POWER'].mean().unstack().plot(sharex=True,subplots=True,layout=(17,2),figsize=(20,30))\nworst_source.groupby(['time','day'])['DAILY_YIELD'].mean().unstack().plot(sharex=True,subplots=True,layout=(17,2),figsize=(20,30),ax=ax,style='-.')\n\ni=0\nfor a in range(len(ax)):\n    for b in range(len(ax[a])):\n        ax[a,b].set_title(cols.columns[i],size=15)\n        ax[a,b].legend(['DC_POWER','DAILY_YIELD'])\n        i=i+1\n\nplt.tight_layout()\nplt.show()","35e2138a":"from pandas.tseries.offsets import DateOffset\n! pip install pmdarima\nfrom pmdarima.arima import auto_arima\nfrom statsmodels.tsa.stattools import adfuller","46c41bd4":"pred_gen=gen_1.copy()\npred_gen=pred_gen.groupby('DATE_TIME').sum()\npred_gen=pred_gen['DAILY_YIELD'][-288:].reset_index()\npred_gen.set_index('DATE_TIME',inplace=True)\npred_gen.head()","a458f0ef":"result = adfuller(pred_gen['DAILY_YIELD'])\nprint('Augmented Dickey-Fuller Test:')\nlabels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations Used']\n\nfor value,label in zip(result,labels):\n    print(label+' : '+str(value) )\n    \nif result[1] <= 0.05:\n    print(\"strong evidence against the null hypothesis, reject the null hypothesis. Data has no unit root and is stationary\")\nelse:\n    print(\"weak evidence against null hypothesis, time series has a unit root, indicating it is non-stationary \")","a94af3d4":"train=pred_gen[:192]\ntest=pred_gen[-96:]\nplt.figure(figsize=(15,5))\nplt.plot(train,label='Train',color='navy')\nplt.plot(test,label='Test',color='darkorange')\nplt.title('Last 4 days of daily yield',fontsize=17)\nplt.legend()\nplt.show()","40bfbff2":"arima_model = auto_arima(train,\n                         start_p=0,d=1,start_q=0,\n                         max_p=4,max_d=4,max_q=4,\n                         start_P=0,D=1,start_Q=0,\n                         max_P=1,max_D=1,max_Q=1,m=96,\n                         seasonal=True,\n                         error_action='warn',trace=True,\n                         supress_warning=True,stepwise=True,\n                         random_state=20,n_fits=1)","1c5d37e5":"future_dates = [test.index[-1] + DateOffset(minutes=x) for x in range(0,2910,15) ]","866ef29b":"prediction=pd.DataFrame(arima_model.predict(n_periods=96),index=test.index)\nprediction.columns=['predicted_yield']\n\nfig,ax= plt.subplots(ncols=2,nrows=1,dpi=100,figsize=(17,5))\nax[0].plot(train,label='Train',color='navy')\nax[0].plot(test,label='Test',color='darkorange')\nax[0].plot(prediction,label='Prediction',color='green')\nax[0].legend()\nax[0].set_title('Forecast on test set',size=17)\nax[0].set_ylabel('kW',color='navy',fontsize=17)\n\n\nf_prediction=pd.DataFrame(arima_model.predict(n_periods=194),index=future_dates)\nf_prediction.columns=['predicted_yield']\nax[1].plot(pred_gen,label='Original data',color='navy')\nax[1].plot(f_prediction,label='18th & 19th June',color='green')\nax[1].legend()\nax[1].set_title('Next days forecast',size=17)\nplt.show()","e5a359dd":"arima_model.summary()","a979bfa6":"from fbprophet import Prophet\npred_gen2=gen_1.copy()\npred_gen2=pred_gen2.groupby('DATE_TIME')['DAILY_YIELD'].sum().reset_index()\npred_gen2.rename(columns={'DATE_TIME':'ds','DAILY_YIELD':'y'},inplace=True)\npred_gen2.plot(x='ds',y='y',figsize=(17,5))\nplt.legend('')\nplt.title('DAILY_YIELD',size=17)\nplt.show()","daed602e":"m = Prophet()\nm.fit(pred_gen2)","5918f99e":"future = [pred_gen2['ds'].iloc[-1:] + DateOffset(minutes=x) for x in range(0,2910,15) ]\ntime1=pd.DataFrame(future).reset_index().drop('index',1)\ntime1.rename(columns={3157:'ds'},inplace=True)","f7a515e8":"timeline=pd.DataFrame(pred_gen2['ds'])\nfut=timeline.append(time1,ignore_index=True)\nfut.tail()","a7817982":"forecast = m.predict(fut)","84832987":"m.plot(forecast,figsize=(15,7))\nplt.title('ok')\nplt.legend(labels=['Original data','Prophet Forecast'])\nplt.title('Prophet Forecast')\nplt.show()","702d1915":"from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error\ntest2=pd.DataFrame(test.index)\ntest2.rename(columns={'DATE_TIME':'ds'},inplace=True)\ntest_prophet=m.predict(test2)","467ea417":"print('SARIMAX R2 Score: %f' % (r2_score(prediction['predicted_yield'],test['DAILY_YIELD'])))\nprint('Prophet R2 Score: %f' % (r2_score(test['DAILY_YIELD'],test_prophet['yhat'])))\nprint('-'*15)\nprint('SARIMAX MAE Score: %f' % (mean_absolute_error(prediction['predicted_yield'],test['DAILY_YIELD'])))\nprint('Prophet MAE Score: %f' % (mean_absolute_error(test['DAILY_YIELD'],test_prophet['yhat'])))\nprint('-'*15)\nprint('SARIMAX RMSE Score: %f' % (mean_squared_error(prediction['predicted_yield'],test['DAILY_YIELD'],squared=False)))\nprint('Prophet RMSE Score: %f' % (mean_squared_error(test['DAILY_YIELD'],test_prophet['yhat'],squared=False)))","2996b2c6":"## Step 1: Testing for Stationarity\n\nWe can use the Augmented [Dickey-Fuller](https:\/\/en.wikipedia.org\/wiki\/Augmented_Dickey%E2%80%93Fuller_test) [unit root test](https:\/\/en.wikipedia.org\/wiki\/Unit_root_test).\n\nIn statistics and econometrics, an augmented Dickey\u2013Fuller test (ADF) tests the null hypothesis that a unit root is present in a time series sample. The alternative hypothesis is different depending on which version of the test is used, but is usually stationarity or trend-stationarity.\n\nBasically, we are trying whether to accept the Null Hypothesis **H0** (that the time series has a unit root, indicating it is non-stationary) or reject **H0** and go with the Alternative Hypothesis (that the time series has no unit root and is stationary).\n\nWe end up deciding this based on the p-value return.\n\n* A small p-value (typically \u2264 0.05) indicates strong evidence against the null hypothesis, so you reject the null hypothesis.\n\n* A large p-value (> 0.05) indicates weak evidence against the null hypothesis, so you fail to reject the null hypothesis.\n\nLet's run the Augmented Dickey-Fuller test on our data:","b6f4cbde":"## Inverter bvBOhCH3iADSZry in action","95c7701f":"## Step 1: Fit Prophet to our data","797384bf":"# Daily Yield & AC-DC power","3551d19d":"#### Here we can see, clearly, that 1BY6WEcLGh8j5v7 & bvBOhCH3iADSZry are underperforming compared to other inverters, maybe these inverters require maintenance or require to be replaced. But before going into deep with underperforming inverters, let's look at which are the common problems for the entire plant,so let's see DC power generation during day hours for all 34 days.","ed264e38":"Well, this look like a strange and cool painting, but we cant'see clearly what is going wrong in our power plant so let's go into deep to see better how different inverters works during day hours.\nThis take us to the lead question:","9b3bd3c6":"## Step 3: Tune with the auto_arima function:\n\nThe auto_arima function fits the best ARIMA model to an univariate time series according to a provided information criterion (either AIC, AICc, BIC or HQIC). The function performs a search (either stepwise or parallelized) over possible model & seasonal orders within the constraints provided, and selects the parameters that minimize the given metric.\n\nSeasonal ARIMA models have three parameters that heavily resemble our p, d and q parameters:\n\n`P` is  The order of the seasonal component for the auto-regressive (AR) model.\n\n`D` is The integration order of the seasonal process.\n\n`Q` is The order of the seasonal component of the moving average (MA) model.\nP and Q and be estimated similarly to p and q via auto_arima, and D can be estimated via a Canova-Hansen test, however m generally requires subject matter knowledge of the data.\n\nSince we know that our observations are recorded at 15 minute intervals, (so for each day we have 96 observations) we can choose `m` parameter equal to 96 to capture daily trend.\nTo speed up the parameters search, I fixed a max order of 1 for P,D,Q paramaters in the seasonal component. ","65db0606":"## DC power generated during day hours","d202503a":"Well, it seems that in that period the plant doesn't work at all. So we must suppose that there was a technical problem in the plant.\nNotice that a decrease in ambient temperature,just for a couple of degrees, influence quite a lot module temperature.\n\n**P.S. I've drawn a line to see when module temperature goes over 50 degrees, this because a module overload may be the cause of a non-performing inverter.**","61a0b9c1":"## Step 2: Split into train and test datasets to build the model on the training dataset and forecast using the test dataset.","67faa038":"# An Alternative way: Prophet\n\nProphet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.\n\nOne of the advantages of is that can be much more faster then ARIMA procedure of forecasting,especially when you're dealing with a long time series, such as our case, but we must take into account that this metodology in under development and not fully stable.","a196f2ac":"From the above, we can conclude that the data is non-stationary. Hence, we would need to use the \u201cIntegrated (I)\u201d concept, denoted by value \u2018d\u2019 in time series to make the data stationary while building the Auto ARIMA model.","6ac196dc":"Well let's see how all inverters works during day hours, cause we know from the quick eda that something went wrong with dc power generation:\nNotice that what matters for us is the DC power generation that then is converted in AC power for domestic use:\n\n## Real DC power converted\n#### As we can see below PLANT_1 it's able to convert about only 9-10 % of DC POWER produced by module: Inverters are inefficient!","ddacde88":"## Model summary:","e5679656":"# Metrics score: SARIMAX vs PROPHET\n\nTo understand which model performs better:","72b16316":"#### Our data:","ebb31999":"#### It seems that in some days there have been several problems with the plant, i.e. between 2020-05-19 and 2020-05-21 we can see a period which has null values that are common in daily yield and dc power generation. This may be due to a technical problem of the plant. Let's give a further look to ambient and module temperature:","3c2a9b77":" # Conclusions\n## Task 1:\n#### For the first main question we have seen potentially subperforming inverters, we can also exclude that their blackouts may be due to higher temperature, so they maybe have only to be replaced or fixed.\n \n## Task 2:\n### We have seen 2 different ways to forecast an univariate time series:\n* PROPHET is much more handy to handle and clearly much more faster then SARIMAX.\n* Tune arima parameters trought auto_arima function requires knowledge about the data and about how this model works,even if our forecast seems to be good for this purpose it's always advisable to go with statistical techniques and implement the basic ARIMA model to understand the insights behind the p,d, and q values to better understand and quantify our forecast.\n\n\n#### As we can see above, metrics talks, and say that on the same test set PROPHET have a quite large error of forecast,so we will rely on SARIMAX model, to show to our chief which steps do for future.\n \n# That's all for today. Thanks for reading and please upvote!","c495f966":"# Solar power plant: How it works?\n![banner.jpg](attachment:banner.jpg)\n\n#### Long story short: when a photon hits the surface of the photovoltaic cell, its energy is transferred to the electrons present on the silicon cell. These electrons are \"excited\" and begin to flow in the circuit producing electric current. A solar panel produces Direct Current energy,(DC power).\n#### Then, it's up to the inverter to convert it into alternating current to transport it and use it in our distribution networks. In fact, domestic and industrial buildings are designed for the transport and use of alternating current.\n\n#### Every solar power plant consists at least of two basic components:\n1. Modules- that convert sunlight into electricity\n2. One or more inverters- devices that convert direct current into alternating current. \n\n![schema_base_impianto_fotovoltaico_18_moduli.png](attachment:schema_base_impianto_fotovoltaico_18_moduli.png)\n\n#### Typically the factors that determine the performance of a solar power plant are:\n* Temperature\n* Dirtiness\n* Inverters Efficiency\n* Inverters or panels seniority\n\n# So where are the challenges?\n\nIn this paper we will answer two main question:\n\n1. Can we identify faulty or suboptimally performing equipment?\n2. Can we predict the power generation for next couple of days? - this allows for better grid management\n\n## Before going into deep with our tasks, a quick EDA on PLANT_1:\n**Notice that we're going to work only on one plant, to simplify at best our work.**","b4621187":"## Which inverter is underperforming?","f387a33f":"# Task 1: Can we identify faulty or suboptimally performing equipment?","13c902d7":"# Task 2: Forecast\n## Can we predict the power generation for next couple of days? \n\nWe're going to predict exactly the next two days of yield generated by plant_1, please note that we can have similar results predicting dc power generation rather then daily yield generated, but I think that for this purpose daily yield generated power is a good evidence of power prediction.\n\nWe will tune, with auto_arima function, a SEASONAL ARIMA(p,d,q) + (P,D,Q,m) model,on the last 4 days(384 observations) to see if our model can capture the last generation trend. ","07af921a":"#### As we can see between the 7th and 14th of June the dc power produced by the inverter goes quickly to 0 exactly during maximum sunlight hours, between 11 am and 16 pm. This can only be due to a fault in the inverter, so maybe these inverters requires to be fixed or replaced.","f238a820":"## DC POWER and DAILY YIELD in PLANT_1","91b8a84f":"## Step 4: Use the trained model which was built earlier to forecast daily yields\n\nWe use the trained model to forecast the last 96 observations of the test data, 17th June daily yield,  and then we will forecast daily yield for 18th and 19th June.","5903f2b0":"## Module temperature and Ambient Temperature on PLANT_1","cff32441":"# Irradiation,Ambient and Module temperature","84fd5e2f":"# Daily and Total Yield"}}