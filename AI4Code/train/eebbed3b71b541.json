{"cell_type":{"17c3e1df":"code","1cd32612":"code","a1a98970":"code","920849e2":"code","f5b85586":"code","daf390e9":"code","c658fadd":"code","93447401":"code","2ba17cdd":"code","2e0580d5":"code","4acbd930":"code","024bb063":"code","773991a0":"code","0d1b1aed":"code","d2d96c1f":"code","4742e57c":"code","4985230d":"code","9a7e46f7":"code","18ee8c2e":"code","536ada95":"code","6bd16775":"code","9b1c96cb":"code","e285d618":"code","6e3fa4e5":"code","91579a6a":"code","76ad0155":"code","937f3ecb":"code","4a038bce":"code","93f5d92f":"code","94d3db8b":"code","c00cc8d6":"code","b150d0ea":"code","f749c53a":"code","1f24809a":"code","cfb4e1bc":"code","f4eb4588":"code","cbb6d4ea":"code","0ee77c01":"code","a7fa5bb4":"code","7f6231fa":"code","6e546742":"code","f3b9701a":"code","54aa7b67":"code","0975e92c":"code","39bf361a":"code","68966f27":"code","60f93737":"code","dbfb440f":"code","0b141d04":"code","33be84d0":"code","85f20849":"code","baf7f1e6":"code","74f5cf0f":"markdown","3fe9c352":"markdown","4240324e":"markdown","c244552a":"markdown","a8f6b20d":"markdown","bbc4ab93":"markdown","f38c7acd":"markdown","f857ad20":"markdown"},"source":{"17c3e1df":"# import library\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n","1cd32612":"#load dataset \ndf=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")","a1a98970":"#to check the shape of dataset\ndf.shape ","920849e2":"df.head(7)","f5b85586":"# more column but able to see only 7?. solution use this function as below:\npd.set_option('display.max_columns',None)\npd.set_option('display.max_rows',None)","daf390e9":"df.head(7)","c658fadd":"df.tail(7)","93447401":"df.info()","2ba17cdd":"#delete the missing dataset, #from sing this function we will get a data frame having value true and false\ndf.isnull()","2e0580d5":"# from this we will get the total diffrent values has how much missing data in each column.\ndf.isnull().sum()","4acbd930":"# using this image processing we can identify very easily that where is null or missing value and where is not.\nplt.figure(figsize=(25,25))\nsns.heatmap(df.isnull())","024bb063":"# now we gonna check that how much percentage of data is missing in every particular column\nnull_var=df.isnull().sum()\/df.shape[0]*100\nnull_var","773991a0":"#in which column which has more than or equal to 20 % datats  are missing,we gonna drop that column\ndrop_columns = null_var[null_var >17].keys()\ndrop_columns\n","0d1b1aed":"df2_drop_clm=df.drop(columns=drop_columns)\ndf2_drop_clm","d2d96c1f":"df2_drop_clm.shape\n#here we can see that the colum is deleted which has missing values.","4742e57c":"#  now check using figure \nsns.heatmap(df2_drop_clm.isnull())","4985230d":"# we can see that here is still some missing values.for that we delete that row which has any NA values\ndf3_drop_rows=df2_drop_clm.dropna()","9a7e46f7":"df3_drop_rows.shape # as we can see here is now 1338 rows are left ","18ee8c2e":"#we can see  using figure also\nplt.figure(figsize=(25,25))\nsns.heatmap(df3_drop_rows.isnull())","536ada95":"df3_drop_rows.isnull().sum().sum() #no we can see there is no any null value present there\n","6bd16775":"# we can check how may columns and their names which have int and float types\ndf3_drop_rows.select_dtypes(include=['int64','float64']).columns","9b1c96cb":"plt.figure(figsize=(20,20))\nsns.distplot(df['MSSubClass']) # main dataframe which we have loaded initailly as df ","e285d618":"plt.figure(figsize=(20,20))\nsns.distplot(df3_drop_rows['MSSubClass']) # wee can see that the cleaner data frame and main data frame have distplot.","6e3fa4e5":"# here we gonna check how much difference between both plot have.\nplt.figure(figsize=(20,20))\nsns.distplot(df['MSSubClass']) \nsns.distplot(df3_drop_rows['MSSubClass']) ","91579a6a":"#distribution for the  different rows\nnum_var=['MSSubClass', 'LotArea', 'OverallQual', 'OverallCond',\n       'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2',\n       'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF',\n       'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath',\n       'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces',\n       'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal',\n       'MoSold', 'YrSold', 'SalePrice']\nplt.figure(figsize=(25,25))\nfor i,var in enumerate(num_var):\n    plt.subplot(9,4,i+1)\n    try:\n        sns.distplot(df[var],bins=20)\n        sns.distplot(df3_drop_rows[var],bins=20)\n    except:\n        pass\n","76ad0155":"df3_drop_rows.select_dtypes(include=['object']).columns","937f3ecb":"pd.concat([df['MSZoning'].value_counts()\/df.shape[0]*100,df3_drop_rows['MSZoning'].value_counts()\/df3_drop_rows.shape[0]*100],axis=1,keys=['MSZoning_org','MSZoning_clean'])","4a038bce":"def cat_var_dist(var):\n    return pd.concat([df['MSZoning'].value_counts()\/df.shape[0]*100,df3_drop_rows['MSZoning'].value_counts()\/df3_drop_rows.shape[0]*100],axis=1,keys=[var+'_org',var+'_clean'])\n    \n    ","93f5d92f":"cat_var_dist('MSZoning')","94d3db8b":"num_var2=['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n       'PavedDrive', 'SaleType', 'SaleCondition']\nplt.figure(figsize=(25,25))\nfor i,var in enumerate(num_var):\n    plt.subplot(9,4,i+1)\n    try:\n        sns.distplot(df[var],bins=20)\n        sns.distplot(df3_drop_rows[var],bins=20)\n    except:\n        pass","c00cc8d6":"import numpy as np \nimport pandas as pd\nfrom sklearn.impute import SimpleImputer","b150d0ea":"train=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain.shape\ntest.shape","f749c53a":"train.head()","1f24809a":"x_train=train.drop(columns='SalePrice')\ny_train=train[\"SalePrice\"]\nprint(\"shape of x_train df=\",x_train.shape)\nprint(\"shape of y_train df=\",y_train.shape)","cfb4e1bc":"# we can check how may columns and their names which have int and float types\nnum_var1=x_train.select_dtypes(include=['int64','float64']).columns","f4eb4588":"num_var1","cbb6d4ea":"x_train[num_var1].isnull().sum()","0ee77c01":"imputer_mean=SimpleImputer(strategy='mean')\n","a7fa5bb4":"imputer_mean.fit(x_train[num_var1])","7f6231fa":"imputer_mean.statistics_   # it will give ussome statitstical data","6e546742":"imputer_mean.transform(x_train[num_var1])   ","f3b9701a":"x_train[num_var1]=imputer_mean.transform(x_train[num_var1])\ntest[num_var1] = imputer_mean.transform(test[num_var1])","54aa7b67":"x_train[num_var1].isnull().sum()","0975e92c":"cat_vars=x_train.select_dtypes(include=['O']).columns # here O  is used for the object datatype ","39bf361a":"cat_vars","68966f27":"x_train[cat_vars].isnull().sum()","60f93737":"imputer_mode=SimpleImputer(strategy='most_frequent')\nimputer_mode","dbfb440f":"imputer_mode.fit(x_train[cat_vars])\n","0b141d04":"x_train[cat_vars]=imputer_mode.transform(x_train[cat_vars])\ntest[cat_vars] = imputer_mode.transform(test[cat_vars])","33be84d0":"imputer_mode.statistics_","85f20849":"x_train[cat_vars].isnull().sum()","baf7f1e6":"test[cat_vars].isnull().sum()","74f5cf0f":"this fit method finds the mean of the numerical value. and it will give the blueprint of the numerical values ","3fe9c352":"Import all the library \n","4240324e":"# **Process for cleaning the data:**\n\n    import all the libraries.\n    \n    load the data set\n    \n    check their shape \n    \n    check info\n    \n    find the missing values\n    \n    using heatmap check the figure and got to know how much data is missing\n    \n    remove missing data\n    \n    delete the rows which has NA value\n    \n    verify the new dataframe with older one whether they are deleted or not\n    \n    \n    \n","c244552a":"# **Missing Value imputaion Using Scikit- learn**","a8f6b20d":"# Numerical Missing Value Imputation","bbc4ab93":"# Categorical Missing value imputation","f38c7acd":"**we can see  there is no missing value available**","f857ad20":"**Here we can see that there is no missing values there**"}}