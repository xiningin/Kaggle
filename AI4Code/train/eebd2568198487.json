{"cell_type":{"4525d55c":"code","87bfa09f":"code","f4a4494b":"code","67a7fb40":"code","04b9faaa":"code","a539c131":"code","c0523a7b":"code","426b906b":"code","3e00bfc3":"code","2e6cf5cc":"code","c8cc3e15":"code","274c684a":"code","b43dc80b":"code","29f7066a":"code","eb13e914":"code","d1773116":"code","88ec9cab":"code","0f2c9806":"code","5f22a432":"code","0e5d3f29":"code","ab477712":"markdown","3ab6c532":"markdown","74d81d9d":"markdown"},"source":{"4525d55c":"import numpy as np \nimport pandas as pd","87bfa09f":"raw_data = pd.read_csv('..\/input\/indian-food-101\/indian_food.csv')\nraw_data.head()","f4a4494b":"raw_data.info()","67a7fb40":"#Dropping nulls | Retirando valores nulos\ndata = raw_data.dropna()\ndata.info()","04b9faaa":"#Changing \"-1\" values in categorical variables to \"Unknown\" | \n#Mudando valores \"-1\" de variaveis categoricas para \"Unkown\" (Desconhecido)\n\n\ncategorical_cols = [col for col in data.columns if data[col].dtype == 'object']\na = {}\nfor col in categorical_cols:\n    a[col] = '-1'\ndata = data.replace(a, \"Unknown\")","a539c131":"data.describe()","c0523a7b":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nplt.figure(figsize=(10, 6))\n\nsns.distplot(data['prep_time'], kde=False, bins=80)\nplt.title('Preparation time frequency \/ Frequencia do tempo de prepara\u00e7\u00e3o')\nplt.xlabel('Preparation time \/ Tempo de prepara\u00e7\u00e3o')","426b906b":"plt.figure(figsize=(10, 6))\nsns.distplot(data['cook_time'], kde=False, bins=80)\nplt.title('Cook time frequency \/ Frequencia do tempo de cozimento')\nplt.xlabel('Cook time \/ Tempo de cozimento')","3e00bfc3":"total_time = [total for total in data['cook_time'] + data['prep_time']]\ndata = data.join(pd.DataFrame(total_time, columns=['total_time']))\ndata.head()","2e6cf5cc":"plt.figure(figsize=(10, 6))\nsns.distplot(data['total_time'], kde=False, bins=80)\nplt.xlabel('Total time \/ Tempo total')\nplt.title('Total time frequency \/ Frequencia de tempo total')","c8cc3e15":"plt.figure(figsize=(14, 6))\n\nplt.subplot(121)\nplt.xticks(rotation=45)\nplt.title('Longest time recipes \/ Receitas mais demoradas')\nsns.barplot(y='total_time', x='name', data=data.nlargest(10, 'total_time')) \n\nplt.subplot(122)\nplt.title('Shortest time recipes \/ Receitas mais r\u00e1pidas')\nplt.xticks(rotation=30)\nsns.barplot(y='total_time', x='name', data=data.query('total_time >= 0').nsmallest(10, 'total_time'))","274c684a":"plt.figure(figsize=(10, 6))\ndata['diet'].value_counts().plot.pie(labels=['Vegetarian', 'Non Vegetarian'], autopct='%1.1f%%')\nplt.ylabel('')","b43dc80b":"plt.figure(figsize=(10, 6))\nsns.scatterplot(x='prep_time', y='cook_time', data=data, hue='diet')\nplt.xlabel('Preparation time \/ Tempo de prepara\u00e7\u00e3o')\nplt.ylabel('Cook time \/ Tempo de cozimento')","29f7066a":"recipes_per_state = data['state'].value_counts()\n\nplt.figure(figsize=(12, 8))\nplt.tick_params(axis='x', labelrotation=60)\n\nsns.barplot(x=recipes_per_state.index, y=recipes_per_state.values)\nplt.title('Recipes per state \/ Receitas por estado')","eb13e914":"plt.figure(figsize=(10,8))\nplt.title('Flavors per region \/ Sabor por regi\u00e3o')\nsns.countplot(data=data, x='region', hue='flavor_profile')\nplt.xlabel('Region \/ Regi\u00e3o')\nplt.xticks([0, 1, 2, 3, 4, 5, 6], ['East \/ Leste', 'West \/ Oeste', 'North \/ Norte', \n                   'Unknown \/ Desconhecido', 'North East \/ Noroeste', 'South \/ Sul', 'Center \/ Centro'], \n           rotation=30)\nplt.legend(['Sweet \/ Adocicado', 'Spicy \/ Apimentado', 'Bitter \/ Amargo', 'Unknown \/ Desconhecido', 'Sour \/ Azedo'], \n           title='Flavors \/ Sabores', loc='upper right')\nplt.ylabel('Count \/ Contagem')","d1773116":"#Function for filtering ingredients\n\ndef filter_ingredients(column):\n    \n    values = data[column].unique()\n    \n    temp_datasets = []\n    \n    out = {}\n    \n    for value in values:\n        temp_datasets.append(data.query('{0} == \"{1}\"'.format(column, value)))\n    \n    \n    all_ingredients = np.array([])\n    ingredients_per_filter = []\n\n    for dataset in temp_datasets:\n        recipes = [ing.lower().split(', ') for ing in dataset['ingredients']]\n        for ingredients in recipes:\n            for ingredient in ingredients:\n                all_ingredients = np.append(all_ingredients, ingredient.strip())\n        ingredients_per_filter.append(pd.Series(all_ingredients))\n    \n    for value in range(len(values)):\n        out[values[value]] = ingredients_per_filter[value]\n    \n    return out","88ec9cab":"recipes = [ing.lower().split(', ') for ing in data['ingredients']]\n\nall_ingredients = np.array([])\n\nfor ingredients in recipes:\n    for ingredient in ingredients:\n        all_ingredients = np.append(all_ingredients, ingredient.strip())\n\nall_ingredients = pd.Series(all_ingredients)\nmost_used = all_ingredients.value_counts()[0:10]\nlabels=[label.capitalize() for label in most_used.index]\n\nplt.figure(figsize=(10,6))\n\nsns.barplot(x=most_used.index, y=most_used.values)\nplt.xticks(rotation=30, labels=labels, ticks=range(10))","0f2c9806":"data['ingredients'].update([low.lower() for low in data['ingredients']])\ndata","5f22a432":"ingredients_per_diet = filter_ingredients('diet')\n\n#Plot the most used for vegetarian and non vegetarian recipes\n\nveg_most_used = ingredients_per_diet['vegetarian'].value_counts()[0:15]\nveg_labels = [label.capitalize() for label in veg_most_used.index]\n\nnon_veg_most_used = ingredients_per_diet['non vegetarian'].value_counts()[0:15]\nnon_veg_labels = [label.capitalize() for label in non_veg_most_used.index]\n\nplt.figure(figsize=(20,8))\n\n\nplt.subplot(121)\nplt.title('Vegetarian \/ Vegetarianas')\nsns.barplot(x=veg_most_used.index, y=veg_most_used.values)\nplt.xticks(rotation=45, labels=veg_labels, ticks=range(15))\n\nplt.subplot(122)\nplt.title('Non vegetarian \/ N\u00e3o vegetarianas')\nsns.barplot(x=non_veg_most_used.index, y=non_veg_most_used.values)\nplt.xticks(rotation=50, labels=non_veg_labels, ticks=range(15))\n","0e5d3f29":"#Other Vizualization\n\nfrom wordcloud import WordCloud\n\nplt.figure(figsize=(20, 8))\n\nplt.subplot(121)\nwordcloud_veg = WordCloud(background_color='white', width=1600, height=800).generate(' '.join(ingredients_per_diet['vegetarian']))\nplt.imshow(wordcloud_veg)\nplt.axis('off')\n\nplt.subplot(122)\nwordcloud_non_veg = WordCloud(background_color='white', width=1600, height=800).generate(' '.join(ingredients_per_diet['non vegetarian']))\nplt.imshow(wordcloud_non_veg)\nplt.axis('off')","ab477712":"# Data Description | Descri\u00e7\u00e3o dos Dados","3ab6c532":"This is my first public notebook, any tips or commentaries are welcome. Este \u00e9 meu primeiro notebook, quaisquer dicas ou coment\u00e1rios s\u00e3o bem vindos.\n\nThank you. Obrigado.","74d81d9d":"# Data Visualization | Visualiza\u00e7\u00e3o dos Dados"}}