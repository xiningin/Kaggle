{"cell_type":{"3bffd545":"code","b773dcea":"code","d2a1a20d":"code","a52823e3":"code","bb374560":"code","b2d4f163":"code","5445e0ec":"code","dedacd5d":"code","a4c2eae8":"code","9219a1d0":"code","5d9fea02":"code","63a56aad":"code","e6fd7d78":"code","435a758a":"code","82b7d24d":"code","d61d255d":"code","af4a45ae":"code","da8d106a":"code","fff4482a":"code","f4114678":"code","135b0197":"code","ed9c71df":"code","37c5d0ac":"code","dd8505fd":"code","a4eb58bc":"code","6830797c":"code","54dd4e87":"code","97cf780e":"code","47b018bf":"code","d0581e33":"code","2c266e1f":"code","0a501fa8":"code","4c0d8b44":"code","f06471f9":"code","8d8baf6f":"code","2e717258":"code","8ca11319":"code","9090ff8a":"code","71c0940d":"code","5e16676e":"code","33cc5faa":"code","efb6ddae":"code","7eb5b314":"code","76bf43cc":"code","d0652659":"code","49884f47":"code","5da129a0":"code","ab6b8115":"code","6872d86d":"code","6c34c4a9":"code","b9f63607":"code","58eb73c3":"code","e95566fd":"code","f4e7746a":"markdown","e016c943":"markdown","d326d7ee":"markdown","5824b3d1":"markdown","d9e4b483":"markdown","5822c89a":"markdown","90fe57d3":"markdown","bec5cc2e":"markdown","b0b76165":"markdown","daae8ba7":"markdown","85e76d07":"markdown","f1f22d66":"markdown","0fa70061":"markdown","33f250cb":"markdown","74c634c1":"markdown","7ee79c3a":"markdown","a06da24f":"markdown","fcfd3358":"markdown","f81c7aae":"markdown"},"source":{"3bffd545":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","b773dcea":"## loading and reading data from the file\ndf=pd.read_csv('..\/input\/empatt\/emp.csv')\ndf","d2a1a20d":"df.STATUS.value_counts()","a52823e3":"df.info()","bb374560":"df.STATUS.unique()","b2d4f163":"df.isnull().sum()","5445e0ec":"df.drop(['EmployeeID','recorddate_key','birthdate_key','orighiredate_key','gender_full','terminationdate_key'],axis=1,inplace=True)\ndf","dedacd5d":"df.describe()","a4c2eae8":"sns.set_style('whitegrid')\nsns.countplot(x = 'STATUS', data = df)","9219a1d0":"plt.figure(figsize=(10,6))\nsns.boxplot(x = 'STATUS', y='age', data = df)","5d9fea02":"plt.figure(figsize=(10,6))\nsns.countplot(hue= 'STATUS', data = df, x = 'BUSINESS_UNIT')","63a56aad":"plt.subplots(figsize=(20,10))\nsns.countplot(x= 'age',hue = 'STATUS',data = df,palette='colorblind')","e6fd7d78":"df.corr()","435a758a":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr(),annot=True,fmt='.0%')","82b7d24d":"df.columns","d61d255d":"plt.subplots(figsize=(14,5))\nsns.countplot(x= 'gender_short',hue = 'STATUS',data = df,palette='colorblind')","af4a45ae":"df.job_title.value_counts()","da8d106a":"plt.subplots(figsize=(14,5))\nsns.countplot(x= 'termreason_desc',hue = 'STATUS',data = df,palette='colorblind')","fff4482a":"plt.subplots(figsize=(14,5))\nsns.countplot(x= 'termtype_desc',hue = 'STATUS',data = df,palette='colorblind')","f4114678":"df=pd.get_dummies(columns=['STATUS'],data=df,drop_first=True)\ndf","135b0197":"from collections import Counter\nout_of_co = df[df.STATUS_TERMINATED == 0]\nterm_per_year = Counter(out_of_co.STATUS_YEAR)\nterm_per_year_df = pd.DataFrame.from_dict(term_per_year, orient='index')\nterm_per_year_df = term_per_year_df.sort_index()\nterm_per_year_df.plot(kind='bar')","ed9c71df":"df.job_title.value_counts()","37c5d0ac":"##Job_title is the most tedious column, as it has many distinct entries, we will generalize like jobs into categories, \n## and then turn them into numerical values\n\nboard = ['VP Stores', 'Director, Recruitment', 'VP Human Resources', 'VP Finance',\n         'Director, Accounts Receivable', 'Director, Accounting',\n         'Director, Employee Records', 'Director, Accounts Payable',\n         'Director, HR Technology', 'Director, Investments',\n         'Director, Labor Relations', 'Director, Audit', 'Director, Training',\n         'Director, Compensation']\n\nexecutive = ['Exec Assistant, Finance', 'Exec Assistant, Legal Counsel',\n             'CHief Information Officer', 'CEO', 'Exec Assistant, Human Resources',\n             'Exec Assistant, VP Stores']\n\nmanager = ['Customer Service Manager', 'Processed Foods Manager', 'Meats Manager',\n           'Bakery Manager', 'Produce Manager', 'Store Manager', 'Trainer', 'Dairy Manager']\n\nemployee = ['Meat Cutter', 'Dairy Person', 'Produce Clerk', 'Baker', 'Cashier',\n            'Shelf Stocker', 'Recruiter', 'HRIS Analyst', 'Accounting Clerk',\n            'Benefits Admin', 'Labor Relations Analyst', 'Accounts Receiveable Clerk',\n            'Accounts Payable Clerk', 'Auditor', 'Compensation Analyst',\n            'Investment Analyst', 'Systems Analyst', 'Corporate Lawyer', 'Legal Counsel']\n\ndef changeTitle(row):\n    if row in board:\n        return 'board'\n    elif row in executive:\n        return 'executive'\n    elif row in manager:\n        return 'manager'\n    else:\n        return 'employee'\n    \ndf['job_title'] = df['job_title'].apply(changeTitle)\n\ndf.head()","dd8505fd":"df=pd.get_dummies(columns=['job_title'],data=df,drop_first=True)\ndf.head()","a4eb58bc":"df.STATUS_YEAR.unique()","6830797c":"df.city_name.unique()","54dd4e87":"city_population = {'Vancouver':2313328,\n                 'Victoria':344615,\n                 'Nanaimo':146574,\n                 'New Westminster':65976,\n                 'Kelowna':179839,\n                 'Burnaby':223218,\n                 'Kamloops':85678,\n                 'Prince George':71974,\n                 'Cranbrook':19319,\n                 'Surrey':468251,\n                 'Richmond':190473,\n                 'Terrace':11486,\n                 'Chilliwack':77936,\n                 'Trail':7681,\n                 'Langley':25081,\n                 'Vernon':38180,\n                 'Squamish':17479,\n                 'Quesnel':10007,\n                 'Abbotsford':133497,\n                 'North Vancouver':48196,\n                 'Fort St John':18609,\n                 'Williams Lake':10832,\n                 'West Vancouver':42694,\n                 'Port Coquitlam':55985,\n                 'Aldergrove':12083,\n                 'Fort Nelson':3561,\n                 'Nelson':10230,\n                 'New Westminister':65976,\n                 'Grand Forks':3985,\n                 'White Rock':19339,\n                 'Haney':76052,\n                 'Princeton':2724,\n                 'Dawson Creek':11583,\n                 'Bella Bella':1095,\n                 'Ocean Falls':129,\n                 'Pitt Meadows':17736,\n                 'Cortes Island':1007,\n                 'Valemount':1020,\n                 'Dease Lake':58,\n                 'Blue River':215}","97cf780e":"##Make a copy of city names\ndf['Population'] = df['city_name']\n\n# Map from city name to population\ndf['Population'] = df.Population.map(city_population)\n\n# Make a new column for population category\ndf['Population_category'] = df.Population\n\n# Categorise according to population size\n# >= 100,000 is Urban\n# 10,000 to 99,999 is Rural\n# < 10,000 is Other\n# Guidance from Australian Institute of Health and Welfare\n\nurban_ix = (df['Population'] >= 100000)\nrural_ix = ((df['Population'] < 100000) & (df['Population'] >= 10000))\nother_ix = (df['Population'] < 10000)\ndf.loc[urban_ix, 'Population_category'] = 'Urban'\ndf.loc[rural_ix, 'Population_category'] = 'Rural'\ndf.loc[other_ix, 'Population_category'] = 'Other'\n\ndf['Population_category'] = df['Population_category'].map({'Urban' : 0, 'Rural' : 1, 'Other' : 2})\n\ndf.Population_category.value_counts()","47b018bf":"df.head(2)","d0581e33":"df['gender_short'] = df['gender_short'].map({'M': 1, 'F': 0})\ndf['BUSINESS_UNIT'] = df['BUSINESS_UNIT'].map({'STORES': 0, 'HEADOFFICE' :1})","2c266e1f":"df.head()","0a501fa8":"df.termreason_desc.unique()","4c0d8b44":"df.termtype_desc.unique()","f06471f9":"df.department_name.unique()","8d8baf6f":"df = df.drop(columns = [ 'store_name','BUSINESS_UNIT', 'city_name','department_name'])","2e717258":"df['termtype_desc'] = df['termtype_desc'].map({'Not Applicable': 0, 'Voluntary' :1,'Involuntary':2})\ndf['termreason_desc'] = df['termreason_desc'].map({'Not Applicable': 0, 'Retirement' :1,'Resignaton':2,'Layoff':3})","8ca11319":"df.head(2)","9090ff8a":"df.info()","71c0940d":"df.termreason_desc.isna().sum()","5e16676e":"x = df.drop('STATUS_TERMINATED', axis=1)\ny = df['STATUS_TERMINATED']","33cc5faa":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score","efb6ddae":"# 30% of the data will be used for testing\nx_train, x_test, y_train, y_test= train_test_split(x, y, test_size=0.3, random_state=0)","7eb5b314":"logm=LogisticRegression()","76bf43cc":"logm.fit(x_train,y_train)","d0652659":"y_pred=logm.predict(x_test)\ny_pred","49884f47":"# Classification Report\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix","5da129a0":"print(classification_report(y_test,y_pred))\n","ab6b8115":"print(confusion_matrix(y_test,y_pred))","6872d86d":"from sklearn.model_selection import cross_val_score\nlg_Kfold_accu = cross_val_score(estimator = logm,X = x_train, y = y_train, cv = 10)\nlg_Kfold_accu=lg_Kfold_accu.mean()\nprint(\"Accuracy: {:.2f} %\".format(lg_Kfold_accu*100))","6c34c4a9":"from sklearn.model_selection import GridSearchCV","b9f63607":"parameters = [{'penalty': [11,12,'elasticnet'], 'C': [1,10,50,100,200]},\n              {'tol': [0.001,0.0001,0.00001]}]\nlg_grid_search = GridSearchCV(estimator = logm,\n                           param_grid = parameters,\n                           scoring = 'accuracy',\n                           cv = 10,\n                           n_jobs = -1)\nlg_grid_search = lg_grid_search.fit(x_train, y_train)\nlg_best_accuracy = lg_grid_search.best_score_\nlg_best_parameters = lg_grid_search.best_params_\nprint(\"Best Accuracy: {:.2f} %\".format(lg_best_accuracy*100))\nprint(\"Best Parameters:\", lg_best_parameters)","58eb73c3":"parameters = [{'tol': [0.01,0.001,0.002,0.003]}]\nlg_grid_search = GridSearchCV(estimator = logm,\n                           param_grid = parameters,\n                           scoring = 'accuracy',\n                           cv = 10,\n                           n_jobs = -1)\nlg_grid_search = lg_grid_search.fit(x_train, y_train)\nlg_best_accuracy = lg_grid_search.best_score_\nlg_best_parameters = lg_grid_search.best_params_\nprint(\"Best Accuracy: {:.2f} %\".format(lg_best_accuracy*100))\nprint(\"Best Parameters:\", lg_best_parameters)","e95566fd":"df.to_csv('empatt.csv', index = False)","f4e7746a":"## ***Predicting the Results***","e016c943":"## ***Executing Hyper Paramter Tuning***","d326d7ee":"## Length of Service and Age are highly correlated","5824b3d1":"## ***K-Fold Cross Validation***","d9e4b483":"We can observe,almost all the termination are from STORES business unit","5822c89a":"### As we can see the list of city we will segrregate thme as RURAL,URBAN AND OTHER","90fe57d3":"## ***Basic Exploratory data analysis***","bec5cc2e":"## Termination are more after the 60 years of age","b0b76165":"## ***Evaluation of model performance***","daae8ba7":"## ***Importing necesssary packages for the analysis***","85e76d07":"## Female gender has more active and terminated status","f1f22d66":"### As we can see there are many sub categories in job_title lets bin them under somee category and use accordingly","0fa70061":"# Building Models \n\n## ***1. LOGISTIC REGRESSION MODEL***","33f250cb":"### ***We have achieved a accuracy score of 97.10 % under logistic regression ***","74c634c1":"##\n\n1. Meat Cutter \n2. Dairy Person                      \n3. Produce Clerk  \n4. Baker\n5. Cashier   \n\nAbove are the top 5 job titles ##","7ee79c3a":"### Observations\n1. Nobody was terminated if they were at the executive level, or higher.\n2. Usually Terminations where done above the age of 60\n3. No major difference between male and female termination,however female are more in both\n4. Executives and board members live in the Urban areas","a06da24f":"### ***As we can observe above,2014 has seen many terminations compared to other periods***","fcfd3358":"# ANALYSIS & PREDICTION OF JOB TERMINATION","f81c7aae":"### ***Dropping features that does not account for status of the employee like EMPLOYEE ID,BIRTH_DATE KEY,ORIGHIRE DATE,TERMINATION DATE KEY,GENDER FULL,the mentioned featured does not have any impact on termination od the employee***"}}