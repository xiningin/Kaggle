{"cell_type":{"593e96a1":"code","dd9aeb80":"code","49ac8638":"code","6782fde5":"code","3ceb62ec":"code","da33c838":"code","6346af64":"code","d11a8d42":"code","d5376156":"code","a610a2bb":"code","ad4b9237":"code","9fa40cba":"code","3486e02c":"code","aae6521c":"code","c5c05be4":"code","2442da62":"code","00e77725":"code","497f58e2":"markdown","2b5d94b3":"markdown","c2094e8f":"markdown","c189fa8d":"markdown","ea9ad510":"markdown","45f7917d":"markdown"},"source":{"593e96a1":"import os\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)\npd.set_option('display.max_columns', 5000)\n\ndef load_csv(base_dir,file_name):\n    \"\"\"Loads a CSV file into a Pandas DataFrame\"\"\"\n    file_path = os.path.join(base_dir,file_name)\n    df = pd.read_csv(file_path,low_memory=False)\n    return df\n\n# Load the data\nbase_dir = '\/kaggle\/input\/'\nfile_name = 'kaggle_survey_2020_responses.csv'\nsurvey_df = load_csv(base_dir,file_name)\n# Filter to only include Data Scientists that live in the USA\nsurvey_df = survey_df[survey_df['Q5']=='Data Scientist'] \nsurvey_df = survey_df[survey_df['Q3']=='United States of America'] \n\n# Preview the data\nresponses_df = survey_df[1:]\nprint('Total Number of Responses from Data Scientists in the USA: ',responses_df.shape[0])\nprint('\\nPreview of the data: (below)')\nsurvey_df.head(2)","dd9aeb80":"def count_then_return_percent(dataframe,column_name):\n    '''\n    A helper function to return value counts as percentages.\n    \n    It has the following dependencies:\n    numpy: 1.18.5; pandas: 1.1.3\n\n    import numpy as np \n    import pandas as pd \n    '''\n    \n    counts = dataframe[column_name].value_counts(dropna=False)\n    percentages = round(counts*100\/(dataframe[column_name].count()),1)\n    return percentages\n\ndef count_then_return_percent_for_multiple_column_questions(dataframe,list_of_columns_for_a_single_question,dictionary_of_counts_for_a_single_question):\n    '''\n    A helper function to convert counts to percentages.\n    \n    It has the following dependencies:\n    numpy: 1.18.5; pandas: 1.1.3\n\n    import numpy as np \n    import pandas as pd \n    '''\n    \n    df = dataframe\n    subset = list_of_columns_for_a_single_question\n    df = df[subset]\n    df = df.dropna(how='all')\n    total_count = len(df) \n    dictionary = dictionary_of_counts_for_a_single_question\n    for i in dictionary:\n        dictionary[i] = round(float(dictionary[i]*100\/total_count),1)\n    return dictionary \n\ndef create_dataframe_of_counts(dataframe,column,rename_index,rename_column,return_percentages=False):\n    '''\n    A helper function to create a dataframe of either counts \n    or percentages, for a single multiple choice question.\n    \n    It has the following dependencies: \n    numpy: 1.18.5; pandas: 1.1.3\n    \n    import numpy as np \n    import pandas as pd  \n    '''\n    df = dataframe[column].value_counts().reset_index() \n    if return_percentages==True:\n        df[column] = (df[column]*100)\/(df[column].sum())\n    df = pd.DataFrame(df) \n    df = df.rename({'index':rename_index, 'Q3':rename_column}, axis='columns')\n    return df\n\ndef sort_dictionary_by_percent(dataframe,list_of_columns_for_a_single_question,dictionary_of_counts_for_a_single_question): \n    ''' \n    A helper function that can be used to sort a dictionary.\n    \n    It is an adaptation of a similar function\n    from https:\/\/www.kaggle.com\/sonmou\/what-topics-from-where-to-learn-data-science.\n    \n    It has the following dependencies:\n    numpy: 1.18.5; pandas: 1.1.3\n\n    import numpy as np \n    import pandas as pd \n    '''\n    dictionary = count_then_return_percent_for_multiple_column_questions(dataframe,\n                                                                list_of_columns_for_a_single_question,\n                                                                dictionary_of_counts_for_a_single_question)\n    dictionary = {v:k    for(k,v) in dictionary.items()}\n    list_tuples = sorted(dictionary.items(), reverse=False) \n    dictionary = {v:k for (k,v) in list_tuples}   \n    return dictionary","49ac8638":"def plotly_bar_chart(response_counts,title,y_axis_title,orientation):\n    '''\n    This function creates a bar chart.\n    \n    It has the following dependencies:\n    plotly express: 0.4.1\n    \n    import plotly.express as px\n    '''\n    response_counts_series = pd.Series(response_counts)\n    fig = px.bar(response_counts_series,\n             labels={\"index\": '',\"value\": y_axis_title},\n             text=response_counts_series.values,\n             orientation=orientation,)\n    fig.update_layout(showlegend=False,\n                      title={'text': title,\n                             'y':0.95,\n                             'x':0.5,})\n    fig.show()\n\ndef plotly_choropleth_map(df, column, title, max_value):\n    '''\n    This function creates a choropleth map.\n    \n    It has the following dependencies:\n    plotly express: 0.4.1\n    \n    import plotly.express as px\n    '''\n    fig = px.choropleth(df, \n                    locations = 'country',  \n                    color = column,\n                    locationmode = 'country names', \n                    color_continuous_scale = 'viridis',\n                    title = title,\n                    range_color = [0, max_value])\n    fig.update(layout=dict(title=dict(x=0.5)))\n    fig.show()","6782fde5":"# Questions where respondents can select more than one answer choice have been split into multiple columns.\n# These dictionaries contain value counts for every answer choice for every multiple-column question.\n\nq7_dictionary_of_counts = {\n    'Python' : (responses_df['Q7_Part_1'].count()),\n    'R': (responses_df['Q7_Part_2'].count()),\n    'SQL' : (responses_df['Q7_Part_3'].count()),\n    'C' : (responses_df['Q7_Part_4'].count()),\n    'C++' : (responses_df['Q7_Part_5'].count()),\n    'Java' : (responses_df['Q7_Part_6'].count()),\n    'Javascript' : (responses_df['Q7_Part_7'].count()),\n    'Julia' : (responses_df['Q7_Part_8'].count()),\n    'Swift' : (responses_df['Q7_Part_9'].count()),\n    'Bash' : (responses_df['Q7_Part_10'].count()),\n    'MATLAB' : (responses_df['Q7_Part_11'].count()),\n    'None' : (responses_df['Q7_Part_12'].count()),\n    'Other' : (responses_df['Q7_OTHER'].count())\n}\n\nq9_dictionary_of_counts = {\n    'JupyterLab' : (responses_df['Q9_Part_1'].count()),\n    'RStudio': (responses_df['Q9_Part_2'].count()),\n    'Visual Studio' : (responses_df['Q9_Part_3'].count()),\n    'Visual Studio Code (VSCode)' : (responses_df['Q9_Part_4'].count()),\n    'PyCharm' : (responses_df['Q9_Part_5'].count()),\n    'Spyder' : (responses_df['Q9_Part_6'].count()),\n    'Notepad++' : (responses_df['Q9_Part_7'].count()),\n    'Sublime Text' : (responses_df['Q9_Part_8'].count()),\n    'Vim, Emacs, or similar' : (responses_df['Q9_Part_9'].count()),\n    'MATLAB' : (responses_df['Q9_Part_10'].count()),\n    'None' : (responses_df['Q9_Part_11'].count()),\n    'Other' : (responses_df['Q9_OTHER'].count())\n}\n\nq10_dictionary_of_counts = {\n    'Kaggle Notebooks' : (responses_df['Q10_Part_1'].count()),\n    'Colab Notebooks': (responses_df['Q10_Part_2'].count()),\n    'Azure Notebooks' : (responses_df['Q10_Part_3'].count()),\n    'Paperspace \/ Gradient' : (responses_df['Q10_Part_4'].count()),\n    'Binder \/ JupyterHub' : (responses_df['Q10_Part_5'].count()),\n    'Code Ocean' : (responses_df['Q10_Part_6'].count()),\n    'IBM Watson Studio' : (responses_df['Q10_Part_7'].count()),\n    'Amazon Sagemaker Studio' : (responses_df['Q10_Part_8'].count()),\n    'Amazon EMR Notebooks' : (responses_df['Q10_Part_9'].count()),\n    'Google Cloud AI Platform Notebooks' : (responses_df['Q10_Part_10'].count()),\n    'Google Cloud Datalab Notebooks' : (responses_df['Q10_Part_11'].count()),\n    'Databricks Collaborative Notebooks' : (responses_df['Q10_Part_12'].count()),\n    'None' : (responses_df['Q10_Part_13'].count()),\n    'Other' : (responses_df['Q10_OTHER'].count())\n}\n\nq12_dictionary_of_counts = {\n    'GPUs' : (responses_df['Q12_Part_1'].count()),\n    'TPUs': (responses_df['Q12_Part_2'].count()),\n    'None' : (responses_df['Q12_Part_3'].count()),\n    'Other' : (responses_df['Q12_OTHER'].count())\n}\n\nq14_dictionary_of_counts = {\n    'Matplotlib' : (responses_df['Q14_Part_1'].count()),\n    'Seaborn': (responses_df['Q14_Part_2'].count()),\n    'Plotly \/ Plotly Express' : (responses_df['Q14_Part_3'].count()),\n    'Ggplot \/ ggplot2' : (responses_df['Q14_Part_4'].count()),\n    'Shiny' : (responses_df['Q14_Part_5'].count()),\n    'D3.js' : (responses_df['Q14_Part_6'].count()),\n    'Altair' : (responses_df['Q14_Part_7'].count()),\n    'Bokeh' : (responses_df['Q14_Part_8'].count()),\n    'Geoplotlib' : (responses_df['Q14_Part_9'].count()),\n    'Leaflet \/ Folium' : (responses_df['Q14_Part_10'].count()),\n    'None' : (responses_df['Q14_Part_11'].count()),\n    'Other' : (responses_df['Q14_OTHER'].count())\n}\n\nq16_dictionary_of_counts = {\n    'Scikit-learn' : (responses_df['Q16_Part_1'].count()),\n    'TensorFlow': (responses_df['Q16_Part_2'].count()),\n    'Keras' : (responses_df['Q16_Part_3'].count()),\n    'PyTorch' : (responses_df['Q16_Part_4'].count()),\n    'Fast.ai' : (responses_df['Q16_Part_5'].count()),\n    'MXNet' : (responses_df['Q16_Part_6'].count()),\n    'Xgboost' : (responses_df['Q16_Part_7'].count()),\n    'LightGBM' : (responses_df['Q16_Part_8'].count()),\n    'CatBoost' : (responses_df['Q16_Part_9'].count()),\n    'Prophet' : (responses_df['Q16_Part_10'].count()),\n    'H20-3' : (responses_df['Q16_Part_11'].count()),\n    'Caret' : (responses_df['Q16_Part_12'].count()),\n    'Tidymodels' : (responses_df['Q16_Part_13'].count()),\n    'JAX' : (responses_df['Q16_Part_14'].count()),\n    'None' : (responses_df['Q16_Part_15'].count()),\n    'Other' : (responses_df['Q16_OTHER'].count())\n}\n\nq17_dictionary_of_counts = {\n    'Linear or Logistic Regression' : (responses_df['Q17_Part_1'].count()),\n    'Decision Trees or Random Forests': (responses_df['Q17_Part_2'].count()),\n    'Gradient Boosting Machines (xgboost, lightgbm, etc)' : (responses_df['Q17_Part_3'].count()),\n    'Bayesian Approaches' : (responses_df['Q17_Part_4'].count()),\n    'Evolutionary Approaches' : (responses_df['Q17_Part_5'].count()),\n    'Dense Neural Networks (MLPs, etc)' : (responses_df['Q17_Part_6'].count()),\n    'Convolutional Neural Networks' : (responses_df['Q17_Part_7'].count()),\n    'Generative Adversarial Networks' : (responses_df['Q17_Part_8'].count()),\n    'Recurrent Neural Networks' : (responses_df['Q17_Part_9'].count()),\n    'Transformer Networks (BERT, gpt-3, etc)' : (responses_df['Q17_Part_10'].count()),\n    'None' : (responses_df['Q17_Part_11'].count()),\n    'Other' : (responses_df['Q17_OTHER'].count())\n}\n\n\nq18_dictionary_of_counts = {\n    'General purpose image\/video tools (PIL, cv2, skimage, etc)' : (responses_df['Q18_Part_1'].count()),\n    'Image segmentation methods (U-Net, Mask R-CNN, etc)': (responses_df['Q18_Part_2'].count()),\n    'Object detection methods (YOLOv3, RetinaNet, etc)' : (responses_df['Q18_Part_3'].count()),\n    'Image classification and other general purpose networks (VGG, Inception, ResNet, ResNeXt, NASNet, EfficientNet, etc)' : (responses_df['Q18_Part_4'].count()),\n    'Generative Networks (GAN, VAE, etc)' : (responses_df['Q18_Part_5'].count()),\n    'None' : (responses_df['Q18_Part_6'].count()),\n    'Other' : (responses_df['Q18_OTHER'].count())\n}\n\n\nq19_dictionary_of_counts = {\n    'Word embeddings\/vectors (GLoVe, fastText, word2vec)' : (responses_df['Q19_Part_1'].count()),\n    'Encoder-decoder models (seq2seq, vanilla transformers)': (responses_df['Q19_Part_2'].count()),\n    'Contextualized embeddings (ELMo, CoVe)' : (responses_df['Q19_Part_3'].count()),\n    'Transformer language models (GPT-3, BERT, XLnet, etc)' : (responses_df['Q19_Part_4'].count()),\n    'None' : (responses_df['Q19_Part_5'].count()),\n    'Other' : (responses_df['Q19_OTHER'].count())\n}\n\n\nq23_dictionary_of_counts = {\n    'Analyze and understand data to influence product or business decisions' : (responses_df['Q23_Part_1'].count()),\n    'Build and\/or run the data infrastructure that my business uses for storing, analyzing, and operationalizing data': (responses_df['Q23_Part_2'].count()),\n    'Build prototypes to explore applying machine learning to new areas' : (responses_df['Q23_Part_3'].count()),\n    'Build and\/or run a machine learning service that operationally improves my product or workflows' : (responses_df['Q23_Part_4'].count()),\n    'Experimentation and iteration to improve existing ML models' : (responses_df['Q23_Part_5'].count()),\n    'Do research that advances the state of the art of machine learning' : (responses_df['Q23_Part_6'].count()),\n    'None of these activities are an important part of my role at work' : (responses_df['Q23_Part_7'].count()),\n    'Other' : (responses_df['Q23_OTHER'].count())\n}\n\n\nq26a_dictionary_of_counts = {\n    'Amazon Web Services (AWS)' : (responses_df['Q26_A_Part_1'].count()),\n    'Microsoft Azure': (responses_df['Q26_A_Part_2'].count()),\n    'Google Cloud Platform (GCP)' : (responses_df['Q26_A_Part_3'].count()),\n    'IBM Cloud \/ Red Hat' : (responses_df['Q26_A_Part_4'].count()),\n    'Oracle Cloud' : (responses_df['Q26_A_Part_5'].count()),\n    'SAP Cloud' : (responses_df['Q26_A_Part_6'].count()),\n    'Salesforce Cloud' : (responses_df['Q26_A_Part_7'].count()),\n    'VMware Cloud' : (responses_df['Q26_A_Part_8'].count()),\n    'Alibaba Cloud' : (responses_df['Q26_A_Part_9'].count()),\n    'Tencent Cloud' : (responses_df['Q26_A_Part_10'].count()),\n    'None' : (responses_df['Q26_A_Part_11'].count()),\n    'Other' : (responses_df['Q26_A_OTHER'].count())\n}\n\nq26b_dictionary_of_counts = {\n    'Amazon Web Services (AWS)' : (responses_df['Q26_B_Part_1'].count()),\n    'Microsoft Azure': (responses_df['Q26_B_Part_2'].count()),\n    'Google Cloud Platform (GCP)' : (responses_df['Q26_B_Part_3'].count()),\n    'IBM Cloud \/ Red Hat' : (responses_df['Q26_B_Part_4'].count()),\n    'Oracle Cloud' : (responses_df['Q26_B_Part_5'].count()),\n    'SAP Cloud' : (responses_df['Q26_B_Part_6'].count()),\n    'Salesforce Cloud' : (responses_df['Q26_B_Part_7'].count()),\n    'VMware Cloud' : (responses_df['Q26_B_Part_8'].count()),\n    'Alibaba Cloud' : (responses_df['Q26_B_Part_9'].count()),\n    'Tencent Cloud' : (responses_df['Q26_B_Part_10'].count()),\n    'None' : (responses_df['Q26_B_Part_11'].count()),\n    'Other' : (responses_df['Q26_B_OTHER'].count())\n}\n\nq27a_dictionary_of_counts = {\n    'Amazon EC2' : (responses_df['Q27_A_Part_1'].count()),\n    'AWS Lambda': (responses_df['Q27_A_Part_2'].count()),\n    'Amazon Elastic Container Service' : (responses_df['Q27_A_Part_3'].count()),\n    'Azure Cloud Services' : (responses_df['Q27_A_Part_4'].count()),\n    'Microsoft Azure Container Instances' : (responses_df['Q27_A_Part_5'].count()),\n    'Azure Functions' : (responses_df['Q27_A_Part_6'].count()),\n    'Google Cloud Compute Engine' : (responses_df['Q27_A_Part_7'].count()),\n    'Google Cloud Functions' : (responses_df['Q27_A_Part_8'].count()),\n    'Google Cloud Run' : (responses_df['Q27_A_Part_9'].count()),\n    'Google Cloud App Engine' : (responses_df['Q27_A_Part_10'].count()),\n    'No \/ None' : (responses_df['Q27_A_Part_11'].count()),\n    'Other' : (responses_df['Q27_A_OTHER'].count())\n}\n\nq27b_dictionary_of_counts = {\n    'Amazon EC2' : (responses_df['Q27_B_Part_1'].count()),\n    'AWS Lambda': (responses_df['Q27_B_Part_2'].count()),\n    'Amazon Elastic Container Service' : (responses_df['Q27_B_Part_3'].count()),\n    'Azure Cloud Services' : (responses_df['Q27_B_Part_4'].count()),\n    'Microsoft Azure Container Instances' : (responses_df['Q27_B_Part_5'].count()),\n    'Azure Functions' : (responses_df['Q27_B_Part_6'].count()),\n    'Google Cloud Compute Engine' : (responses_df['Q27_B_Part_7'].count()),\n    'Google Cloud Functions' : (responses_df['Q27_B_Part_8'].count()),\n    'Google Cloud Run' : (responses_df['Q27_B_Part_9'].count()),\n    'Google Cloud App Engine' : (responses_df['Q27_B_Part_10'].count()),\n    'No \/ None' : (responses_df['Q27_B_Part_11'].count()),\n    'Other' : (responses_df['Q27_B_OTHER'].count())\n}\n\nq28a_dictionary_of_counts = {\n    'Amazon SageMaker' : (responses_df['Q28_A_Part_1'].count()),\n    'Amazon Forecast': (responses_df['Q28_A_Part_2'].count()),\n    'Amazon Rekognition' : (responses_df['Q28_A_Part_3'].count()),\n    'Azure Machine Learning Studio' : (responses_df['Q28_A_Part_4'].count()),\n    'Azure Cognitive Services' : (responses_df['Q28_A_Part_5'].count()),\n    'Google Cloud AI Platform \/ Google Cloud ML Engine' : (responses_df['Q28_A_Part_6'].count()),\n    'Google Cloud Video AI' : (responses_df['Q28_A_Part_7'].count()),\n    'Google Cloud Natural Language' : (responses_df['Q28_A_Part_8'].count()),\n    'Google Cloud Vision AI' : (responses_df['Q28_A_Part_9'].count()),\n    'No \/ None' : (responses_df['Q28_A_Part_10'].count()),\n    'Other' : (responses_df['Q28_A_OTHER'].count())\n}\n\nq28b_dictionary_of_counts = {\n    'Amazon SageMaker' : (responses_df['Q28_B_Part_1'].count()),\n    'Amazon Forecast': (responses_df['Q28_B_Part_2'].count()),\n    'Amazon Rekognition' : (responses_df['Q28_B_Part_3'].count()),\n    'Azure Machine Learning Studio' : (responses_df['Q28_B_Part_4'].count()),\n    'Azure Cognitive Services' : (responses_df['Q28_B_Part_5'].count()),\n    'Google Cloud AI Platform \/ Google Cloud ML Engine' : (responses_df['Q28_B_Part_6'].count()),\n    'Google Cloud Video AI' : (responses_df['Q28_B_Part_7'].count()),\n    'Google Cloud Natural Language' : (responses_df['Q28_B_Part_8'].count()),\n    'Google Cloud Vision AI' : (responses_df['Q28_B_Part_9'].count()),\n    'No \/ None' : (responses_df['Q28_B_Part_10'].count()),\n    'Other' : (responses_df['Q28_B_OTHER'].count())\n}\n\n\nq29a_dictionary_of_counts = {\n    'MySQL' : (responses_df['Q29_A_Part_1'].count()),\n    'PostgreSQL': (responses_df['Q29_A_Part_2'].count()),\n    'SQLite' : (responses_df['Q29_A_Part_3'].count()),\n    'Oracle Database' : (responses_df['Q29_A_Part_4'].count()),\n    'MongoDB' : (responses_df['Q29_A_Part_5'].count()),\n    'Snowflake' : (responses_df['Q29_A_Part_6'].count()),\n    'IBM Db2' : (responses_df['Q29_A_Part_7'].count()),\n    'Microsoft SQL Server' : (responses_df['Q29_A_Part_8'].count()),\n    'Microsoft Access' : (responses_df['Q29_A_Part_9'].count()),\n    'Microsoft Azure Data Lake Storage' : (responses_df['Q29_A_Part_10'].count()),\n    'Amazon Redshift' : (responses_df['Q29_A_Part_11'].count()),\n    'Amazon Athena' : (responses_df['Q29_A_Part_12'].count()),\n    'Amazon DynamoDB' : (responses_df['Q29_A_Part_13'].count()),\n    'Google Cloud BigQuery' : (responses_df['Q29_A_Part_14'].count()),\n    'Google Cloud SQL' : (responses_df['Q29_A_Part_15'].count()),\n    'Google Cloud Firestore' : (responses_df['Q29_A_Part_16'].count()),\n    'None' : (responses_df['Q29_A_Part_17'].count()),\n    'Other' : (responses_df['Q29_A_OTHER'].count())\n}\n\n\nq29b_dictionary_of_counts = {\n    'MySQL' : (responses_df['Q29_B_Part_1'].count()),\n    'PostgreSQL': (responses_df['Q29_B_Part_2'].count()),\n    'SQLite' : (responses_df['Q29_B_Part_3'].count()),\n    'Oracle Database' : (responses_df['Q29_B_Part_4'].count()),\n    'MongoDB' : (responses_df['Q29_B_Part_5'].count()),\n    'Snowflake' : (responses_df['Q29_B_Part_6'].count()),\n    'IBM Db2' : (responses_df['Q29_B_Part_7'].count()),\n    'Microsoft SQL Server' : (responses_df['Q29_B_Part_8'].count()),\n    'Microsoft Access' : (responses_df['Q29_B_Part_9'].count()),\n    'Microsoft Azure Data Lake Storage' : (responses_df['Q29_B_Part_10'].count()),\n    'Amazon Redshift' : (responses_df['Q29_B_Part_11'].count()),\n    'Amazon Athena' : (responses_df['Q29_B_Part_12'].count()),\n    'Amazon DynamoDB' : (responses_df['Q29_B_Part_13'].count()),\n    'Google Cloud BigQuery' : (responses_df['Q29_B_Part_14'].count()),\n    'Google Cloud SQL' : (responses_df['Q29_B_Part_15'].count()),\n    'Google Cloud Firestore' : (responses_df['Q29_B_Part_16'].count()),\n    'None' : (responses_df['Q29_B_Part_17'].count()),\n    'Other' : (responses_df['Q29_B_OTHER'].count())\n}\n\nq31a_dictionary_of_counts = {\n    'Amazon QuickSight' : (responses_df['Q31_A_Part_1'].count()),\n    'Microsoft Power BI': (responses_df['Q31_A_Part_2'].count()),\n    'Google Data Studio' : (responses_df['Q31_A_Part_3'].count()),\n    'Looker' : (responses_df['Q31_A_Part_4'].count()),\n    'Tableau' : (responses_df['Q31_A_Part_5'].count()),\n    'Salesforce' : (responses_df['Q31_A_Part_6'].count()),\n    'Einstein Analytics' : (responses_df['Q31_A_Part_7'].count()),\n    'Qlik' : (responses_df['Q31_A_Part_8'].count()),\n    'Domo' : (responses_df['Q31_A_Part_9'].count()),\n    'TIBCO Spotfire' : (responses_df['Q31_A_Part_10'].count()),\n    'Alteryx' : (responses_df['Q31_A_Part_11'].count()),\n    'Sisense' : (responses_df['Q31_A_Part_12'].count()),\n    'SAP Analytics Cloud' : (responses_df['Q31_A_Part_13'].count()),\n    'None' : (responses_df['Q31_A_Part_14'].count()),\n    'Other' : (responses_df['Q31_A_OTHER'].count())\n}\n\nq31b_dictionary_of_counts = {\n    'Amazon QuickSight' : (responses_df['Q31_B_Part_1'].count()),\n    'Microsoft Power BI': (responses_df['Q31_B_Part_2'].count()),\n    'Google Data Studio' : (responses_df['Q31_B_Part_3'].count()),\n    'Looker' : (responses_df['Q31_B_Part_4'].count()),\n    'Tableau' : (responses_df['Q31_B_Part_5'].count()),\n    'Salesforce' : (responses_df['Q31_B_Part_6'].count()),\n    'Einstein Analytics' : (responses_df['Q31_B_Part_7'].count()),\n    'Qlik' : (responses_df['Q31_B_Part_8'].count()),\n    'Domo' : (responses_df['Q31_B_Part_9'].count()),\n    'TIBCO Spotfire' : (responses_df['Q31_B_Part_10'].count()),\n    'Alteryx' : (responses_df['Q31_B_Part_11'].count()),\n    'Sisense' : (responses_df['Q31_B_Part_12'].count()),\n    'SAP Analytics Cloud' : (responses_df['Q31_B_Part_13'].count()),\n    'None' : (responses_df['Q31_B_Part_14'].count()),\n    'Other' : (responses_df['Q31_B_OTHER'].count())\n}\n\nq33a_dictionary_of_counts = {\n    'Automated data augmentation (e.g. imgaug, albumentations)' : (responses_df['Q33_A_Part_1'].count()),\n    'Automated feature engineering\/selection (e.g. tpot, boruta_py)': (responses_df['Q33_A_Part_2'].count()),\n    'Automated model selection (e.g. auto-sklearn, xcessiv)' : (responses_df['Q33_A_Part_3'].count()),\n    'Automated model architecture searches (e.g. darts, enas)' : (responses_df['Q33_A_Part_4'].count()),\n    'Automated hyperparameter tuning (e.g. hyperopt, ray.tune, Vizier)' : (responses_df['Q33_A_Part_5'].count()),\n    'Automation of full ML pipelines (e.g. Google AutoML, H20 Driverless AI)' : (responses_df['Q33_A_Part_6'].count()),\n    'No \/ None' : (responses_df['Q33_A_Part_7'].count()),\n    'Other' : (responses_df['Q33_A_OTHER'].count())\n}\n\nq33b_dictionary_of_counts = {\n    'Automated data augmentation (e.g. imgaug, albumentations)' : (responses_df['Q33_B_Part_1'].count()),\n    'Automated feature engineering\/selection (e.g. tpot, boruta_py)': (responses_df['Q33_B_Part_2'].count()),\n    'Automated model selection (e.g. auto-sklearn, xcessiv)' : (responses_df['Q33_B_Part_3'].count()),\n    'Automated model architecture searches (e.g. darts, enas)' : (responses_df['Q33_B_Part_4'].count()),\n    'Automated hyperparameter tuning (e.g. hyperopt, ray.tune, Vizier)' : (responses_df['Q33_B_Part_5'].count()),\n    'Automation of full ML pipelines (e.g. Google AutoML, H20 Driverless AI)' : (responses_df['Q33_B_Part_6'].count()),\n    'No \/ None' : (responses_df['Q33_B_Part_7'].count()),\n    'Other' : (responses_df['Q33_B_OTHER'].count())\n}\n\nq34a_dictionary_of_counts = {\n    'Google Cloud AutoML' : (responses_df['Q34_A_Part_1'].count()),\n    'H20 Driverless AI': (responses_df['Q34_A_Part_2'].count()),\n    'Databricks AutoML' : (responses_df['Q34_A_Part_3'].count()),\n    'DataRobot AutoML' : (responses_df['Q34_A_Part_4'].count()),\n    'Tpot' : (responses_df['Q34_A_Part_5'].count()),\n    'Auto-Keras' : (responses_df['Q34_A_Part_6'].count()),\n    'Auto-Sklearn' : (responses_df['Q34_A_Part_7'].count()),\n    'Auto_ml' : (responses_df['Q34_A_Part_8'].count()),\n    'Xcessiv' : (responses_df['Q34_A_Part_9'].count()),\n    'MLbox' : (responses_df['Q34_A_Part_10'].count()),\n    'No \/ None' : (responses_df['Q34_A_Part_11'].count()),\n    'Other' : (responses_df['Q34_A_OTHER'].count())\n}\n\nq34b_dictionary_of_counts = {\n    'Google Cloud AutoML' : (responses_df['Q34_B_Part_1'].count()),\n    'H20 Driverless AI': (responses_df['Q34_B_Part_2'].count()),\n    'Databricks AutoML' : (responses_df['Q34_B_Part_3'].count()),\n    'DataRobot AutoML' : (responses_df['Q34_B_Part_4'].count()),\n    'Tpot' : (responses_df['Q34_B_Part_5'].count()),\n    'Auto-Keras' : (responses_df['Q34_B_Part_6'].count()),\n    'Auto-Sklearn' : (responses_df['Q34_B_Part_7'].count()),\n    'Auto_ml' : (responses_df['Q34_B_Part_8'].count()),\n    'Xcessiv' : (responses_df['Q34_B_Part_9'].count()),\n    'MLbox' : (responses_df['Q34_B_Part_10'].count()),\n    'No \/ None' : (responses_df['Q34_B_Part_11'].count()),\n    'Other' : (responses_df['Q34_B_OTHER'].count())\n}\n\n\nq35a_dictionary_of_counts = {\n    'Neptune.ai' : (responses_df['Q35_A_Part_1'].count()),\n    'Weights & Biases': (responses_df['Q35_A_Part_2'].count()),\n    'Comet.ml' : (responses_df['Q35_A_Part_3'].count()),\n    'Sacred + Omniboard' : (responses_df['Q35_A_Part_4'].count()),\n    'TensorBoard' : (responses_df['Q35_A_Part_5'].count()),\n    'Guild.ai' : (responses_df['Q35_A_Part_6'].count()),\n    'Polyaxon' : (responses_df['Q35_A_Part_7'].count()),\n    'Trains' : (responses_df['Q35_A_Part_8'].count()),\n    'Domino Model Monitor' : (responses_df['Q35_A_Part_9'].count()),\n    'No \/ None' : (responses_df['Q35_A_Part_10'].count()),\n    'Other' : (responses_df['Q35_A_OTHER'].count())\n}\n\n\nq35b_dictionary_of_counts = {\n    'Neptune.ai' : (responses_df['Q35_B_Part_1'].count()),\n    'Weights & Biases': (responses_df['Q35_B_Part_2'].count()),\n    'Comet.ml' : (responses_df['Q35_B_Part_3'].count()),\n    'Sacred + Omniboard' : (responses_df['Q35_B_Part_4'].count()),\n    'TensorBoard' : (responses_df['Q35_B_Part_5'].count()),\n    'Guild.ai' : (responses_df['Q35_B_Part_6'].count()),\n    'Polyaxon' : (responses_df['Q35_B_Part_7'].count()),\n    'Trains' : (responses_df['Q35_B_Part_8'].count()),\n    'Domino Model Monitor' : (responses_df['Q35_B_Part_9'].count()),\n    'No \/ None' : (responses_df['Q35_B_Part_10'].count()),\n    'Other' : (responses_df['Q35_B_OTHER'].count())\n}\n\nq36_dictionary_of_counts = {\n    'Plotly Dash' : (responses_df['Q36_Part_1'].count()),\n    'Streamlit': (responses_df['Q36_Part_2'].count()),\n    'NBViewer' : (responses_df['Q36_Part_3'].count()),\n    'GitHub' : (responses_df['Q36_Part_4'].count()),\n    'Personal Blog' : (responses_df['Q36_Part_5'].count()),\n    'Kaggle' : (responses_df['Q36_Part_6'].count()),\n    'Colab' : (responses_df['Q36_Part_7'].count()),\n    'Shiny' : (responses_df['Q36_Part_8'].count()),\n    'None \/ I do not share my work publicly' : (responses_df['Q36_Part_9'].count()),\n    'Other' : (responses_df['Q36_OTHER'].count())\n}\n\n\nq37_dictionary_of_counts = {\n    'Coursera' : (responses_df['Q37_Part_1'].count()),\n    'EdX': (responses_df['Q37_Part_2'].count()),\n    'Kaggle Learn Courses' : (responses_df['Q37_Part_3'].count()),\n    'DataCamp' : (responses_df['Q37_Part_4'].count()),\n    'Fast.ai' : (responses_df['Q37_Part_5'].count()),\n    'Udacity' : (responses_df['Q37_Part_6'].count()),\n    'Udemy' : (responses_df['Q37_Part_7'].count()),\n    'LinkedIn Learning' : (responses_df['Q37_Part_8'].count()),\n    'Cloud-certification programs' : (responses_df['Q37_Part_9'].count()),\n    'University Courses' : (responses_df['Q37_Part_10'].count()),\n    'None' : (responses_df['Q37_Part_11'].count()),\n    'Other' : (responses_df['Q37_OTHER'].count())\n}\n\n\nq39_dictionary_of_counts = {\n    'Twitter (data science influencers)' : (responses_df['Q39_Part_1'].count()),\n    'Email newsletters (Data Elixir, OReilly Data & AI, etc)': (responses_df['Q39_Part_2'].count()),\n    'Reddit (r\/machinelearning, etc)' : (responses_df['Q39_Part_3'].count()),\n    'Kaggle (notebooks, forums, etc)' : (responses_df['Q39_Part_4'].count()),\n    'Course Forums (forums.fast.ai, Coursera forums, etc)' : (responses_df['Q39_Part_5'].count()),\n    'YouTube (Kaggle YouTube, Cloud AI Adventures, etc)' : (responses_df['Q39_Part_6'].count()),\n    'Podcasts (Chai Time Data Science, OReilly Data Show, etc)' : (responses_df['Q39_Part_7'].count()),\n    'Blogs (Towards Data Science, Analytics Vidhya, etc)' : (responses_df['Q39_Part_8'].count()),\n    'Journal Publications (peer-reviewed journals, conference proceedings, etc)' : (responses_df['Q39_Part_9'].count()),\n    'Slack Communities (ods.ai, kagglenoobs, etc)' : (responses_df['Q39_Part_10'].count()),\n    'None' : (responses_df['Q39_Part_11'].count()),\n    'Other' : (responses_df['Q39_OTHER'].count())\n}\n","3ceb62ec":"# Questions where respondents can select more than one answer choice have been split into multiple columns.\n# These lists delineate every sub-column for every multiple-column question.\n\nq7_list_of_columns = ['Q7_Part_1',\n                      'Q7_Part_2',\n                      'Q7_Part_3',\n                      'Q7_Part_4',\n                      'Q7_Part_5',\n                      'Q7_Part_6',\n                      'Q7_Part_7',\n                      'Q7_Part_8',\n                      'Q7_Part_9',\n                      'Q7_Part_10',\n                      'Q7_Part_11',\n                      'Q7_Part_12',\n                      'Q7_OTHER']\n\nq9_list_of_columns = ['Q9_Part_1',\n                      'Q9_Part_2',\n                      'Q9_Part_3',\n                      'Q9_Part_4',\n                      'Q9_Part_5',\n                      'Q9_Part_6',\n                      'Q9_Part_7',\n                      'Q9_Part_8',\n                      'Q9_Part_9',\n                      'Q9_Part_10',\n                      'Q9_Part_11',\n                      'Q9_OTHER']\n\nq10_list_of_columns = ['Q10_Part_1',\n                       'Q10_Part_2',\n                       'Q10_Part_3',\n                       'Q10_Part_4',\n                       'Q10_Part_5',\n                       'Q10_Part_6',\n                       'Q10_Part_7',\n                       'Q10_Part_8',\n                       'Q10_Part_9',\n                       'Q10_Part_10',\n                       'Q10_Part_11',\n                       'Q10_Part_12',\n                       'Q10_Part_13',\n                       'Q10_OTHER']\n\nq12_list_of_columns = ['Q12_Part_1',\n                            'Q12_Part_2',\n                            'Q12_Part_3',\n                            'Q12_OTHER']\n\nq14_list_of_columns = ['Q14_Part_1',\n                            'Q14_Part_2',\n                            'Q14_Part_3',\n                            'Q14_Part_4',\n                            'Q14_Part_5',\n                            'Q14_Part_6',\n                            'Q14_Part_7',\n                            'Q14_Part_8',\n                            'Q14_Part_9',\n                            'Q14_Part_10',\n                            'Q14_Part_11',\n                            'Q14_OTHER']\n\nq16_list_of_columns = ['Q16_Part_1',\n                       'Q16_Part_2',\n                       'Q16_Part_3',\n                       'Q16_Part_4',\n                       'Q16_Part_5',\n                       'Q16_Part_6',\n                       'Q16_Part_7',\n                       'Q16_Part_8',\n                       'Q16_Part_9',\n                       'Q16_Part_10',\n                       'Q16_Part_11',\n                       'Q16_Part_12',\n                       'Q16_Part_13',\n                       'Q16_Part_14',\n                       'Q16_Part_15',\n                       'Q16_OTHER']\n\nq17_list_of_columns = ['Q17_Part_1',\n                       'Q17_Part_2',\n                       'Q17_Part_3',\n                       'Q17_Part_4',\n                       'Q17_Part_5',\n                       'Q17_Part_6',\n                       'Q17_Part_7',\n                       'Q17_Part_8',\n                       'Q17_Part_9',\n                       'Q17_Part_10',\n                       'Q17_Part_11',\n                       'Q17_OTHER']\n\nq18_list_of_columns = ['Q18_Part_1',\n                       'Q18_Part_2',\n                       'Q18_Part_3',\n                       'Q18_Part_4',\n                       'Q18_Part_5',\n                       'Q18_Part_6',\n                       'Q18_OTHER']\n\nq19_list_of_columns = ['Q19_Part_1',\n                       'Q19_Part_2',\n                       'Q19_Part_3',\n                       'Q19_Part_4',\n                       'Q19_Part_5',\n                       'Q19_OTHER']\n\nq23_list_of_columns = ['Q23_Part_1',\n                       'Q23_Part_2',\n                       'Q23_Part_3',\n                       'Q23_Part_4',\n                       'Q23_Part_5',\n                       'Q23_Part_6',\n                       'Q23_Part_7',\n                       'Q23_OTHER']\n\nq26a_list_of_columns = ['Q26_A_Part_1',\n                        'Q26_A_Part_2',\n                        'Q26_A_Part_3',\n                        'Q26_A_Part_4',\n                        'Q26_A_Part_5',\n                        'Q26_A_Part_6',\n                        'Q26_A_Part_7',\n                        'Q26_A_Part_8',\n                        'Q26_A_Part_9',\n                        'Q26_A_Part_10',\n                        'Q26_A_Part_11',\n                        'Q26_A_OTHER']\n\nq26b_list_of_columns = ['Q26_B_Part_1',\n                        'Q26_B_Part_2',\n                        'Q26_B_Part_3',\n                        'Q26_B_Part_4',\n                        'Q26_B_Part_5',\n                        'Q26_B_Part_6',\n                        'Q26_B_Part_7',\n                        'Q26_B_Part_8',\n                        'Q26_B_Part_9',\n                        'Q26_B_Part_10',\n                        'Q26_B_Part_11',\n                        'Q26_B_OTHER']\n\nq27a_list_of_columns = ['Q27_A_Part_1',\n                        'Q27_A_Part_2',\n                        'Q27_A_Part_3',\n                        'Q27_A_Part_4',\n                        'Q27_A_Part_5',\n                        'Q27_A_Part_6',\n                        'Q27_A_Part_7',\n                        'Q27_A_Part_8',\n                        'Q27_A_Part_9',\n                        'Q27_A_Part_10',\n                        'Q27_A_Part_11',\n                        'Q27_A_OTHER']\n\nq27b_dictionary_of_counts = ['Q27_B_Part_1',\n                             'Q27_B_Part_2',\n                             'Q27_B_Part_3',\n                             'Q27_B_Part_4',\n                             'Q27_B_Part_5',\n                             'Q27_B_Part_6',\n                             'Q27_B_Part_7',\n                             'Q27_B_Part_8',\n                             'Q27_B_Part_9',\n                             'Q27_B_Part_10',\n                             'Q27_B_Part_11',\n                             'Q27_B_OTHER']\n\nq28a_list_of_columns = ['Q28_A_Part_1',\n                        'Q28_A_Part_2',\n                        'Q28_A_Part_3',\n                        'Q28_A_Part_4',\n                        'Q28_A_Part_5',\n                        'Q28_A_Part_6',\n                        'Q28_A_Part_7',\n                        'Q28_A_Part_8',\n                        'Q28_A_Part_9',\n                        'Q28_A_Part_10',\n                        'Q28_A_OTHER']\n\nq28b_list_of_columns = ['Q28_B_Part_1',\n                        'Q28_B_Part_2',\n                        'Q28_B_Part_3',\n                        'Q28_B_Part_4',\n                        'Q28_B_Part_5',\n                        'Q28_B_Part_6',\n                        'Q28_B_Part_7',\n                        'Q28_B_Part_8',\n                        'Q28_B_Part_9',\n                        'Q28_B_Part_10',\n                        'Q28_B_OTHER']\n\nq29a_list_of_columns = ['Q29_A_Part_1',\n                        'Q29_A_Part_2',\n                        'Q29_A_Part_3',\n                        'Q29_A_Part_4',\n                        'Q29_A_Part_5',\n                        'Q29_A_Part_6',\n                        'Q29_A_Part_7',\n                        'Q29_A_Part_8',\n                        'Q29_A_Part_9',\n                        'Q29_A_Part_10',\n                        'Q29_A_Part_11',\n                        'Q29_A_Part_12',\n                        'Q29_A_Part_13',\n                        'Q29_A_Part_14',\n                        'Q29_A_Part_15',\n                        'Q29_A_Part_16',\n                        'Q29_A_Part_17',\n                        'Q29_A_OTHER']\n\nq29b_list_of_columns = ['Q29_B_Part_1',\n                        'Q29_B_Part_2',\n                        'Q29_B_Part_3',\n                        'Q29_B_Part_4',\n                        'Q29_B_Part_5',\n                        'Q29_B_Part_6',\n                        'Q29_B_Part_7',\n                        'Q29_B_Part_8',\n                        'Q29_B_Part_9',\n                        'Q29_B_Part_10',\n                        'Q29_B_Part_11',\n                        'Q29_B_Part_12',\n                        'Q29_B_Part_13',\n                        'Q29_B_Part_14',\n                        'Q29_B_Part_15',\n                        'Q29_B_Part_16',\n                        'Q29_B_Part_17',\n                        'Q29_B_OTHER']\n\nq31a_list_of_columns = ['Q31_A_Part_1',\n                        'Q31_A_Part_2',\n                        'Q31_A_Part_3',\n                        'Q31_A_Part_4',\n                        'Q31_A_Part_5',\n                        'Q31_A_Part_6',\n                        'Q31_A_Part_7',\n                        'Q31_A_Part_8',\n                        'Q31_A_Part_9',\n                        'Q31_A_Part_10',\n                        'Q31_A_Part_11',\n                        'Q31_A_Part_12',\n                        'Q31_A_Part_13',\n                        'Q31_A_Part_14',\n                        'Q31_A_OTHER']\n\nq31b_list_of_columns = ['Q31_B_Part_1',\n                        'Q31_B_Part_2',\n                        'Q31_B_Part_3',\n                        'Q31_B_Part_4',\n                        'Q31_B_Part_5',\n                        'Q31_B_Part_6',\n                        'Q31_B_Part_7',\n                        'Q31_B_Part_8',\n                        'Q31_B_Part_9',\n                        'Q31_B_Part_10',\n                        'Q31_B_Part_11',\n                        'Q31_B_Part_12',\n                        'Q31_B_Part_13',\n                        'Q31_B_Part_14',\n                        'Q31_B_OTHER']\n\nq33a_list_of_columns = ['Q33_A_Part_1',\n                        'Q33_A_Part_2',\n                        'Q33_A_Part_3',\n                        'Q33_A_Part_4',\n                        'Q33_A_Part_5',\n                        'Q33_A_Part_6',\n                        'Q33_A_Part_7',\n                        'Q33_A_OTHER']\n\nq33b_list_of_columns = ['Q33_B_Part_1',\n                        'Q33_B_Part_2',\n                        'Q33_B_Part_3',\n                        'Q33_B_Part_4',\n                        'Q33_B_Part_5',\n                        'Q33_B_Part_6',\n                        'Q33_B_Part_7',\n                        'Q33_B_OTHER']\n\nq34a_list_of_columns = ['Q34_A_Part_1',\n                        'Q34_A_Part_2',\n                        'Q34_A_Part_3',\n                        'Q34_A_Part_4',\n                        'Q34_A_Part_5',\n                        'Q34_A_Part_6',\n                        'Q34_A_Part_7',\n                        'Q34_A_Part_8',\n                        'Q34_A_Part_9',\n                        'Q34_A_Part_10',\n                        'Q34_A_Part_11',\n                        'Q34_A_OTHER']\n\nq34b_list_of_columns = ['Q34_B_Part_1',\n                        'Q34_B_Part_2',\n                        'Q34_B_Part_3',\n                        'Q34_B_Part_4',\n                        'Q34_B_Part_5',\n                        'Q34_B_Part_6',\n                        'Q34_B_Part_7',\n                        'Q34_B_Part_8',\n                        'Q34_B_Part_9',\n                        'Q34_B_Part_10',\n                        'Q34_B_Part_11',\n                        'Q34_B_OTHER']\n\n\nq35a_list_of_columns = ['Q35_A_Part_1',\n                        'Q35_A_Part_2',\n                        'Q35_A_Part_3',\n                        'Q35_A_Part_4',\n                        'Q35_A_Part_5',\n                        'Q35_A_Part_6',\n                        'Q35_A_Part_7',\n                        'Q35_A_Part_8',\n                        'Q35_A_Part_9',\n                        'Q35_A_Part_10',\n                        'Q35_A_OTHER']\n\nq35b_list_of_columns = ['Q35_B_Part_1',\n                        'Q35_B_Part_2',\n                        'Q35_B_Part_3',\n                        'Q35_B_Part_4',\n                        'Q35_B_Part_5',\n                        'Q35_B_Part_6',\n                        'Q35_B_Part_7',\n                        'Q35_B_Part_8',\n                        'Q35_B_Part_9',\n                        'Q35_B_Part_10',\n                        'Q35_B_OTHER']\n\nq36_list_of_columns = ['Q36_Part_1',\n                       'Q36_Part_2',\n                       'Q36_Part_3',\n                       'Q36_Part_4',\n                       'Q36_Part_5',\n                       'Q36_Part_6',\n                       'Q36_Part_7',\n                       'Q36_Part_8',\n                       'Q36_Part_9',\n                       'Q36_OTHER']\n\nq37_list_of_columns = ['Q37_Part_1',\n                       'Q37_Part_2',\n                       'Q37_Part_3',\n                       'Q37_Part_4',\n                       'Q37_Part_5',\n                       'Q37_Part_6',\n                       'Q37_Part_7',\n                       'Q37_Part_8',\n                       'Q37_Part_9',\n                       'Q37_Part_10',\n                       'Q37_Part_11',\n                       'Q37_OTHER']\n\nq39_list_of_columns = ['Q39_Part_1',\n                       'Q39_Part_2',\n                       'Q39_Part_3',\n                       'Q39_Part_4',\n                       'Q39_Part_5',\n                       'Q39_Part_6',\n                       'Q39_Part_7',\n                       'Q39_Part_8',\n                       'Q39_Part_9',\n                       'Q39_Part_10',\n                       'Q39_Part_11',\n                       'Q39_OTHER']","da33c838":"question_name = 'Q4'\nresponses_in_order = [#\"I prefer not to answer\",\"No formal education past high school\",\n                      \"Some college\/university study without earning a bachelor\u2019s degree\",\n                      \"Bachelor\u2019s degree\",\"Master\u2019s degree\",\"Doctoral degree\",\"Professional degree\"]\nsorted_percentages = count_then_return_percent(responses_df,question_name)[responses_in_order]\ntitle_for_chart = 'Most Common Degree Types for Data Scientists from the USA'\ntitle_for_y_axis = '% of respondents'\norientation_for_chart = 'v'\n  \nplotly_bar_chart(response_counts=sorted_percentages,\n                 title=title_for_chart,\n                 y_axis_title=title_for_y_axis,\n                 orientation=orientation_for_chart)","6346af64":"question_name = 'Q24'\nresponses_in_order = ['$0-999',\n                        '1,000-1,999',\n                        #'2,000-2,999',\n                        '3,000-3,999',\n                        '4,000-4,999',\n                        '5,000-7,499',\n                        #'7,500-9,999',\n                        '10,000-14,999',\n                        '15,000-19,999',\n                        '20,000-24,999',\n                        #'25,000-29,999',\n                        '30,000-39,999',\n                        '40,000-49,999',\n                        '50,000-59,999',\n                        '60,000-69,999',\n                        '70,000-79,999',\n                        '80,000-89,999',\n                        '90,000-99,999',\n                        '100,000-124,999',\n                        '125,000-149,999',\n                        '150,000-199,999',\n                        '200,000-249,999',\n                        '250,000-299,999',\n                        '300,000-500,000',\n                        '> $500,000']\nunsorted_percentages = count_then_return_percent(responses_df,question_name)[responses_in_order]\ntitle_for_chart = 'Salary Distributions for Data Scientists in the USA'\ntitle_for_y_axis = '% of respondents'\norientation_for_chart = 'h'\n  \nplotly_bar_chart(response_counts=unsorted_percentages,\n                 title=title_for_chart,\n                 y_axis_title=title_for_y_axis,\n                 orientation=orientation_for_chart) ","d11a8d42":"question_name = 'Q7'\ndictionary_of_counts = sort_dictionary_by_percent(responses_df,\n                                                  q7_list_of_columns,\n                                                  q7_dictionary_of_counts)\ntitle_for_chart = 'Most Popular Progamming Languages for Data Scientists in the USA'\ntitle_for_y_axis = '% of respondents'\norientation_for_chart = 'h'\n  \nplotly_bar_chart(response_counts=dictionary_of_counts,\n                 title=title_for_chart,\n                 y_axis_title=title_for_y_axis,\n                 orientation=orientation_for_chart) ","d5376156":"question_name = 'Q16'\ndictionary_of_counts = sort_dictionary_by_percent(responses_df,\n                                                  q16_list_of_columns,\n                                                  q16_dictionary_of_counts)\ntitle_for_chart = 'Most common machine learning frameworks for Data Scientists in the USA'\ntitle_for_y_axis = '% of respondents'\norientation_for_chart = 'h'\n  \nplotly_bar_chart(response_counts=dictionary_of_counts,\n                 title=title_for_chart,\n                 y_axis_title=title_for_y_axis,\n                 orientation=orientation_for_chart)","a610a2bb":"question_name = 'Q17'\ndictionary_of_counts = sort_dictionary_by_percent(responses_df,\n                                                  q17_list_of_columns,\n                                                  q17_dictionary_of_counts)\ntitle_for_chart = 'Most common machine learning algorithms for Data Scientists in the USA'\ntitle_for_y_axis = '% of respondents'\norientation_for_chart = 'v'\n  \nplotly_bar_chart(response_counts=dictionary_of_counts,\n                 title=title_for_chart,\n                 y_axis_title=title_for_y_axis,\n                 orientation=orientation_for_chart) ","ad4b9237":"question_name = 'Q26-A'\ndictionary_of_counts = sort_dictionary_by_percent(responses_df,\n                                                  q26a_list_of_columns,\n                                                  q26a_dictionary_of_counts)\ntitle_for_chart = 'Most Popular Cloud Computing Platforms for Data Scientists in the USA'\ntitle_for_y_axis = '% of respondents'\norientation_for_chart = 'h'\n  \nplotly_bar_chart(response_counts=dictionary_of_counts,\n                 title=title_for_chart,\n                 y_axis_title=title_for_y_axis,\n                 orientation=orientation_for_chart) ","9fa40cba":"question_name = 'Q29-A'\ndictionary_of_counts = sort_dictionary_by_percent(responses_df,\n                                                  q29a_list_of_columns,\n                                                  q29a_dictionary_of_counts)\ntitle_for_chart = 'Most Popular Database \/ Data Warehouse Products for Data Scientists in the USA'\ntitle_for_y_axis = '% of respondents'\norientation_for_chart = 'h'\n  \nplotly_bar_chart(response_counts=dictionary_of_counts,\n                 title=title_for_chart,\n                 y_axis_title=title_for_y_axis,\n                 orientation=orientation_for_chart) ","3486e02c":"question_name = 'Q31-A'\ndictionary_of_counts = sort_dictionary_by_percent(responses_df,\n                                                  q31a_list_of_columns,\n                                                  q31a_dictionary_of_counts)\ntitle_for_chart = 'Most Popular Business Intelligence Tools for Data Scientists in the USA'\ntitle_for_y_axis = '% of respondents'\norientation_for_chart = 'h'\n  \nplotly_bar_chart(response_counts=dictionary_of_counts,\n                 title=title_for_chart,\n                 y_axis_title=title_for_y_axis,\n                 orientation=orientation_for_chart) ","aae6521c":"question_name = 'Q9'\ndictionary_of_counts = sort_dictionary_by_percent(responses_df,\n                                                  q9_list_of_columns,\n                                                  q9_dictionary_of_counts)\ntitle_for_chart = \"Most Popular Data Science IDE's for Data Scientists in the USA\"\ntitle_for_y_axis = '% of respondents'\norientation_for_chart = 'h'\n  \nplotly_bar_chart(response_counts=dictionary_of_counts,\n                 title=title_for_chart,\n                 y_axis_title=title_for_y_axis,\n                 orientation=orientation_for_chart) ","c5c05be4":"question_name = 'Q10'\ndictionary_of_counts = sort_dictionary_by_percent(responses_df,\n                                                  q10_list_of_columns,\n                                                  q10_dictionary_of_counts)\ntitle_for_chart = \"Most Popular Hosted Notebook Products for Data Scientists in the USA\"\ntitle_for_y_axis = '% of respondents'\norientation_for_chart = 'h'\n  \nplotly_bar_chart(response_counts=dictionary_of_counts,\n                 title=title_for_chart,\n                 y_axis_title=title_for_y_axis,\n                 orientation=orientation_for_chart) ","2442da62":"question_name = 'Q14'\ndictionary_of_counts = sort_dictionary_by_percent(responses_df,\n                                                  q14_list_of_columns,\n                                                  q14_dictionary_of_counts)\ntitle_for_chart = 'Most common data visualization tools for Data Scientists in the USA'\ntitle_for_y_axis = '% of respondents'\norientation_for_chart = 'h'\n  \nplotly_bar_chart(response_counts=dictionary_of_counts,\n                 title=title_for_chart,\n                 y_axis_title=title_for_y_axis,\n                 orientation=orientation_for_chart) ","00e77725":"!mkdir \/kaggle\/working\/docker\/\n!pip freeze > '\/kaggle\/working\/docker\/requirements.txt'\nprint('This notebook makes use of \\nthe following Python libraries:\\n')\nprint('numpy:',np.__version__)\nprint('pandas:',pd.__version__)\nimport plotly_express as px\nprint('plotly express:',px.__version__)\nsurvey_df.to_csv('2020_kaggle_ds_and_ml_survey_responses_only.csv',index=False)","497f58e2":"* *Step 1: Import Python libraries and load the data*","2b5d94b3":"*Step 2: Define helper functions*","c2094e8f":"# Responses from Data Scientists Working in the USA\n\n* For this analysis the results were filtered to only include responses from participants that have the job title of \"data scientist\" and the location of \"USA\".\n* Click on the \"Copy & Edit\" button if you want to explore the data on your own!","c189fa8d":"**Credits \/ Attribution:**\n\n* This notebooks uses the [2020 Kaggle DS & ML Survey dataset](https:\/\/www.kaggle.com\/c\/kaggle-survey-2020).  Specifically, [pandas](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/) is used to  manipulate the data and [plotly](https:\/\/plotly.com\/python\/) is used to visualize the data.\n* The idea to organize the value_counts() into dictionaries came from [a notebook that was authored by @sonmou](https:\/\/www.kaggle.com\/sonmou\/what-topics-from-where-to-learn-data-science) using the [2019 Kaggle DS & ML challenge dataset](https:\/\/www.kaggle.com\/c\/kaggle-survey-2019).  I liked this approach because the dictionaries themselves are useful artifacts that can be reused by other competitors and also they can be used to provide a quick way to review all of the different answer choices for each individual question.  You can find these dictionaries in code cell number four if you want to paste them into your own notebook.  Hopefully others will also find this approach to be helpful!\n* This notebook (and every other public notebook on Kaggle) was released under an [Apache 2.0 license](https:\/\/www.apache.org\/licenses\/LICENSE-2.0). ","ea9ad510":"*Step 4: Create bar graphs for a handful of the most interesting questions from the 2020 Kaggle DS & ML Survey*","45f7917d":"*Step 3: Create lists of answer choices and dictionaries of value counts (for the multiple choice multiple selection questions)*\n\n* Feel free to copy\/paste these lists and dictionaries into your own notebooks if you find that they are helpful for keeping track of all of the different answer choices.\n"}}