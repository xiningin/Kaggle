{"cell_type":{"bc784ef7":"code","b8a2657c":"code","8a418f76":"code","658dd963":"code","52dced97":"code","4550000d":"code","4c1d318b":"code","a31c45e1":"code","197cdcfe":"code","a3308eee":"code","7723f0a2":"code","6f6a4097":"code","593cdbee":"code","17a72017":"code","17a1edf6":"code","eec66f44":"code","e93a4986":"code","5db81324":"code","95e4b6e5":"code","4b03b353":"code","403c5851":"code","db1461ca":"code","e7b1dec1":"code","7c2aeba5":"code","0e707075":"code","709ee19a":"code","f7be878b":"code","88bf33d8":"code","33c646b7":"markdown","b97f2803":"markdown","ff9fc277":"markdown","0cdd12c8":"markdown","03998b08":"markdown"},"source":{"bc784ef7":"import gc\nimport sys\nimport warnings\nfrom pathlib import Path\n\nimport os\n\nimport ipywidgets as widgets\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom tqdm import tqdm\n#warnings.simplefilter(\"ignore\")","b8a2657c":"# Helper function to unpack json found in daily data\ndef unpack_json(json_str):\n    return np.nan if pd.isna(json_str) else pd.read_json(json_str)\n\n# helper function to add is_played column\ndef is_played_games(row):\n    if pd.isnull(row['gameDate']):\n        is_played = 0\n    else:\n        is_played = 1\n    return is_played\n\n# helper function to add bmi column\ndef BMI(row):\n    '''\n    Calculate BMI for players.csv\n    '''\n    height_in = row['heightInches']\n    mass_lb = row['weight']\n    bmi = (mass_lb\/height_in**2)*703\n    \n    return bmi","8a418f76":"# Helper function to unpack json found in daily data\ndef unpack_json(json_str):\n    return np.nan if pd.isna(json_str) else pd.read_json(json_str)\n\n# helper function to add is_played column\ndef is_played_games(row):\n    if pd.isnull(row['gameDate']):\n        is_played = 0\n    else:\n        is_played = 1\n    return is_played","658dd963":"def age_now(row):\n    '''\n    Calculate Age (in days) at Given Day\n    '''\n    date = row['date']\n    given_day = pd.to_datetime(date,format='%Y%m%d')\n    dob = row[\"DOB\"] #should be datetime formated already\n    age = (given_day - dob).days\/365\n    \n    return age\n\ndef age_now_d(row):\n    '''\n    Calculate Age (in days) at Given Day\n    '''\n    date = row['date_playerId'].split('_')[0]\n    given_day = pd.to_datetime(date,format='%Y%m%d')\n    dob = row[\"DOB\"] #should be datetime formated already\n    age = (given_day - dob).days\/365\n    \n    return age\n\ndef mlbDebutDays_now(row):\n    '''\n    Calculate mlbDebutDays at Given Day\n    '''\n    date = row['date']\n    given_day = pd.to_datetime(date,format='%Y%m%d')\n    dob = pd.to_datetime(row[\"mlbDebutDate\"])\n    mlbDebutDays = (given_day - dob).days\n    \n    return mlbDebutDays","52dced97":"def evalYear(row):\n    year = pd.to_datetime(row.date, format='%Y%m%d').year\n    return year","4550000d":"def player_data_process(dataset):\n    '''\n    This fucntion process the players.csv\n    New Columns : age, bmi\n    '''\n    temp = dataset.copy()\n    temp[\"DOB\"] = pd.to_datetime(temp[\"DOB\"]) # death of birth\n    temp['bmi'] = temp.apply(BMI,axis=1)\n    \n    return temp","4c1d318b":"test = pd.read_csv(\"..\/input\/mlb-player-digital-engagement-forecasting\/example_test.csv\")\nplayers = pd.read_csv(\"..\/input\/mlb-player-digital-engagement-forecasting\/players.csv\")\nmean_target_by_player = pd.read_csv(\"..\/input\/derived-data\/mean_target_by_player.csv\")","a31c45e1":"test","197cdcfe":"import tensorflow as tf\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping\nfrom keras import optimizers","a3308eee":"def make_model(n_in):\n    inp = L.Input(name=\"inputs\", shape=(n_in,))\n    x = L.Dense(50, activation=\"relu\", name=\"d3\")(inp)\n#     x = L.Dropout(0.2)(x)\n    x = L.Dense(50, activation=\"relu\", name=\"d4\")(x)\n#     x = L.Dropout(0.2)(x)\n    preds = L.Dense(4, activation=\"linear\", name=\"preds\")(x)\n    \n    model = M.Model(inp, preds, name=\"ANN\")\n    model.compile(loss=\"mean_absolute_error\", optimizer=optimizers.Adamax(lr=0.001, decay=1e-3))\n    return model","7723f0a2":"model = make_model(7)","6f6a4097":"# Loads the weights\nmodel.load_weights(\"..\/input\/weights\/model_ANN2.cpkt\")","593cdbee":"model.summary()","17a72017":"FECOLS = ['t1_m','t2_m','t3_m','t4_m','is_played','age','bmi'] #feature columns \nTGTCOLS = ['target1', 'target2', 'target3', 'target4']  #target columns","17a1edf6":"def add_date_playerid(row):\n\n    given_day = pd.to_datetime(row['date'],format='%Y%m%d') #taking timestamp of the given day\n    next_day = given_day + pd.DateOffset(1) # next date\n                                   \n    next_day = str(next_day).split(\" \")[0].replace(\"-\",\"\")\n    playerId = row['playerId']\n    date_playerId = next_day+\"_\"+str(playerId)\n\n    return date_playerId","eec66f44":"def process_prediction(test_df,sub_mode=True):\n    append = False #flag for append to new_df\n    \n    for i in range(test_df.shape[0]):\n        #test dataframe that is provided for submission has no formal date column\n        if sub_mode:\n            date = test_df.index[i]\n        else:\n            date = test_df.date.iloc[i] #taking the date where we are expanding json\n        \n        roster = unpack_json(test_df.rosters.iloc[i])\n        roster.insert(0,'date',date) #inserting the given date\n        \n        if append==False:\n            append= True\n            new_df = roster\n        else:\n            new_df = new_df.append(roster,ignore_index=True)\n            \n    \n    new_df['date_playerId'] = new_df.apply(add_date_playerid,axis=1)\n    return new_df","e93a4986":"#processing players data\nplayers_processed = player_data_process(players)","5db81324":"tempx = process_prediction(test,sub_mode=False)\ntempx","95e4b6e5":"tempx.isnull().any()","4b03b353":"# tempx[tempx.is_played==0]\n# tempx[tempx.playerId==596049]","403c5851":"# X = tempx[FECOLS].values\n# preds = model.predict(X)","db1461ca":"# tempx[TGTCOLS] = np.clip(preds,0,100)\n# tempx","e7b1dec1":"gc.collect()","7c2aeba5":"import mlb\nenv = mlb.make_env() # initialize the environment\niter_test = env.iter_test() # iterator which loops over each date in test set","0e707075":"for (test_df, sample_prediction_df) in iter_test:\n    \n    sample_prediction_df = sample_prediction_df.reset_index(drop=True)\n    sample_prediction_df.drop(TGTCOLS,axis=1,inplace=True)\n    sample_prediction_df['playerId'] = sample_prediction_df['date_playerId']\\\n                                        .map(lambda x: int(x.split('_')[1]))\n    \n    \n    # Dealing with missing values\n    if test_df['rosters'].iloc[0] == test_df['rosters'].iloc[0]:\n        test_rosters = pd.DataFrame(eval(test_df['rosters'].iloc[0]))\n    else:\n        test_rosters = pd.DataFrame({'playerId': sample_prediction_df['playerId']})\n        for col in rosters.columns:\n            if col == 'playerId': continue\n            test_rosters[col] = np.nan\n    \n    test = sample_prediction_df[['playerId']].copy()\n    test = test.merge(test_rosters, on='playerId', how='left')\n    test = test.merge(players_processed[['playerId','bmi','DOB']],on='playerId',how='left')\n    test.insert(0,'date',test_df.index[0]) #test_df fully extended here (rosters)\n\n    \n    #add new columns: age, is_played\n    test['age'] = test.apply(age_now,axis=1)\n    test['is_played'] = test.apply(is_played_games,axis=1)\n    #adding mean_target_by_player\n    test = test.merge(mean_target_by_player,on='playerId',how='left')\n    \n    \n    #making predictions : preds\n    X_ = test[FECOLS].values\n    preds = model.predict(X_)\n    \n#     #to debug\n#     sample_pred_temp = sample_pred_temp.append(sample_prediction_df)#,ignore_index=True)\n#     test_temp = test_temp.append(test) #ignore_index=True)\n#     #\n    \n    #merging prediction to submission dataframe\n    sample_prediction_df[TGTCOLS] = np.clip(preds,0,100)\n    sample_prediction_df = sample_prediction_df.fillna(0.)    \n    del sample_prediction_df['playerId']\n   \n    env.predict(sample_prediction_df)\n    ","709ee19a":"sample_prediction_df.head()","f7be878b":"# #For debugging (first uncomment 'to debug' section in the submission loop, then run twice)\n# test_temp = test.copy()\n# test_temp.drop(test_temp.index,axis=0,inplace=True)\n\n# sample_pred_temp = sample_prediction_df.copy()\n# sample_pred_temp.drop(sample_pred_temp.index,axis=0,inplace=True)","88bf33d8":"# # to reset env.predict() to work\n# example_sample_submission = pd.read_csv(\"..\/input\/mlb-player-digital-engagement-forecasting\/example_sample_submission.csv\")\n# example_sample_submission\n# env.predict(example_sample_submission) ","33c646b7":"## Prediction Task","b97f2803":"## Loading Data","ff9fc277":" In this notebook only inference and submission task will be performed.","0cdd12c8":"## Submission","03998b08":"## Loading Model"}}