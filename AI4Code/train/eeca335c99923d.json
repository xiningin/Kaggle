{"cell_type":{"bb211065":"code","6cc4b860":"code","37ec470d":"code","cca97c63":"code","adbac971":"code","02e15fd5":"code","6f6eeb22":"code","d6e241cc":"code","524add57":"code","5d72b259":"code","0cd4db5f":"code","cf9dfd9c":"code","947aa88a":"code","8cdfd1dd":"code","a1b28180":"code","8acffb35":"code","6c86a248":"markdown","d7c43426":"markdown","1e9074c3":"markdown","3cd3c545":"markdown","ff21bdd7":"markdown"},"source":{"bb211065":"# importing Essential libs\nimport numpy as np\nimport pandas as pd \nimport os\n\n# printing input Dir's Content\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print( 'input : ' + os.path.join(dirname, filename))\n\n        \nimport matplotlib.pyplot as plt\nimport nltk\nimport seaborn as sb\nimport re\nfrom tqdm import tqdm\n\n#loading data\ndataFrame = pd.read_csv('\/kaggle\/input\/covid-tweets-spring-2020\/covid_tweets.csv')\n","6cc4b860":"# removing hyperlinks\ndataFrame['text'] = dataFrame['text'].map(lambda a : re.sub(r'^https?:\\\/\\\/.*[\\r\\n]*', '',a))\n\n# removing Special characters\ndataFrame['text'] = dataFrame['text'].map(lambda a : re.sub('\\$|\\?|\\%' ,'',a))\ndataFrame['text'] = dataFrame['text'].map(lambda a : re.sub(\"[^a-zA-Z0-9]+\", ' ', a))","37ec470d":"# defining Sentiment Analysis Function on vader\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef SentimentAnlysis(sentence):\n    sentAnalyzer = SentimentIntensityAnalyzer() \n    sentDict = sentAnalyzer.polarity_scores(sentence)\n    \n    if sentDict['compound'] >= 0.05:\n        return \"positive\"\n    elif sentDict['compound'] <= -0.05 :\n        return \"negative\"\n    else:\n        return \"neutral\"","cca97c63":"# now generating Sentiments for each tweets\nsentiments = []\ntweets = dataFrame['text'].map(lambda a: str(a).lower())\n\n# obtaining Sentiments for tweets\n# This takes some time\nfor i in tqdm(range(len(tweets))):\n    sentiments.append(SentimentAnlysis(tweets[i]))","adbac971":"# Adding Sentiments to our dataFrame\ndataFrame['sentiments'] = sentiments","02e15fd5":"# let us show you some postive, negative, and neutral tweets\nlist (dataFrame[dataFrame['sentiments'] == 'positive'][0:5].text)","6f6eeb22":"list (dataFrame[dataFrame['sentiments'] == 'negative'][0:5].text)","d6e241cc":"list (dataFrame[dataFrame['sentiments'] == 'neutral'][0:5].text)","524add57":"# lets now just plot a pie chart for purpose of visualization\ntypeArr = ['positive', 'negative', 'neutral']\n\nnumPos = len(dataFrame[dataFrame['sentiments'] == 'positive'])\nnumNeg = len(dataFrame[dataFrame['sentiments'] == 'negative'])\nnumNet = len(dataFrame[dataFrame['sentiments'] == 'neutral'])\n\nnumArr = [numPos, numNeg, numNet]\n\nplt.figure(figsize = (10, 7))\nplt.pie(numArr, labels = typeArr, autopct='%1.2f%%')\nplt.title('Covid Tweet Sentiment Distribution')","5d72b259":"from wordcloud import WordCloud, STOPWORDS \nstopwords = set(STOPWORDS) \n\ndef WordCloudForSentiments (dataFrame, sentiment, title):\n    df =  dataFrame[dataFrame['sentiments'] == sentiment].text\n    corpus = ''\n    \n    for mem in df:\n        corpus += mem\n    \n    wordcloud = WordCloud(width = 800, height = 800,background_color ='grey',\n                          stopwords = stopwords,  min_font_size = 10).generate(corpus)\n    plt.figure(figsize = (8, 8), facecolor = None) \n    plt.imshow(wordcloud) \n    plt.rcParams.update({'font.size': 25})\n    plt.axis(\"off\") \n    plt.title('Word Cloud:  ' + title)\n    plt.tight_layout(pad = 0) \n  \n    plt.show() ","0cd4db5f":"# postive tweets\nWordCloudForSentiments(dataFrame, 'positive', 'Positive tweets')","cf9dfd9c":"# negative tweets\nWordCloudForSentiments(dataFrame, 'negative', 'Negative tweets')","947aa88a":"# neutral tweets\nWordCloudForSentiments(dataFrame, 'neutral', 'Positive tweets')","8cdfd1dd":"dataFrame['time'] = dataFrame['time'].map(lambda a: a.split('T')[0])\ndataFrame","a1b28180":"def TimeSeriesCalc(dataFrame, setiment):\n    uDates = set(dataFrame['time'])\n    dates = []\n    number = []\n    \n    for date in uDates:\n        dates.append(date)\n        number.append(len(dataFrame[\n            (dataFrame['time'] == date)\n            &\n            (dataFrame['sentiments'] == setiment)\n        ]))\n        \n    return dates, number","8acffb35":"date1, numb1 = TimeSeriesCalc(dataFrame, 'positive')\ndate2, numb2 = TimeSeriesCalc(dataFrame, 'negative')\ndate3, numb3 = TimeSeriesCalc(dataFrame, 'neutral')\n\n\nplt.figure(figsize = (10, 7))\n\nplt.plot(date1, numb1, color = 'green', label = 'Postive tweets')\nplt.plot(date2, numb2, color = 'red', label = 'Negative tweets')\nplt.plot(date3, numb3, color = 'yellow', label = 'Neutral tweets')\nplt.legend()\nplt.grid(True)\nplt.show()\n","6c86a248":"Let's first do some data cleaning:\n* we will remove hyperlinks.\n* we will be removing special characters\n* we will be using regex for this.","d7c43426":"Before moving forward let's plot some word Cloud on covid tweet:\n* one for Postive tweets\n* one for negative tweets\n* one for neutral tweets","1e9074c3":"This sums up this analysis for now. would love to hear your thoughts on it.\nThanks","3cd3c545":"# Introduction\nIn this notebook we will try to do a sentiment Analysis on covid tweets.We will be using Vader from nltk for sentiment Analysis.\n\n# What is Vader?\nVADER (Valence Aware Dictionary and sEntiment Reasoner) is a lexicon and rule-based sentiment analysis tool that is specifically attuned to sentiments expressed in social media.\n\nIt is used for sentiment analysis of text which has both the polarities i.e. positive\/negative. VADER is used to quantify how much of positive or negative emotion the text has and also the intensity of emotion.","ff21bdd7":"lets try to calculate number of each kind of tweets for each day.\nlets discard the time from time column and just keep date"}}