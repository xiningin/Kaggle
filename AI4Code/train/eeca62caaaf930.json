{"cell_type":{"11803ccb":"code","0eb46d04":"code","7dc15537":"code","a4da602e":"code","0e6c8193":"code","a378204a":"code","96719fa0":"code","177437a6":"code","3bfe0674":"code","2ffbfda6":"code","76ba95db":"code","eb65a2ec":"code","03425f5d":"code","542d169e":"code","8e6cc01b":"code","0fe4b4c5":"code","0edcfc77":"code","65b28913":"code","8ca91d42":"code","77f105fd":"code","9dfdce75":"code","c1510c32":"markdown","0f48ad08":"markdown","90350897":"markdown","92835512":"markdown","895992f5":"markdown","67240a00":"markdown","7cc181e3":"markdown","376010e6":"markdown","98f26ad5":"markdown","cf62e33e":"markdown","45e49a04":"markdown","9b1ed8a4":"markdown","e564de94":"markdown","b3376fea":"markdown","bb1597c7":"markdown","ed53370f":"markdown","eca01b13":"markdown","c151a1d4":"markdown","e26d61c8":"markdown"},"source":{"11803ccb":"import numpy as np\nimport re","0eb46d04":"review = \"oh my God! desserts I stressed was an ugly movie\"","7dc15537":"movie_title = review[11:30]\nreverse_title = movie_title[::-1] #a very nice way to reverse something\nprint(movie_title)\nprint(reverse_title)","a4da602e":"if movie_title == reverse_title:\n    print(\"yes palindrome\")","0e6c8193":"review","a378204a":"#Find \nprint(review.find(\"stressed\",10,40)) #searching stressed word in b\/w 10th to 40th index incusive.\nprint(review.find(\"stressed\",10,20))\n#Replace\nprint(review.replace(\"God\",\"Bhagwan\")) #will replace god with bhagwan but no change in original string \nprint(review.replace(\"dog\",\"kutta\")) # will return original string.\n#index\nprint(review.index(\"stressed\",10,40)) #same output as 1st line\n#print(review.index(\"stressed\",10,20)) #This will raise ValueError.\n#error handling\ntry:\n    print(review.index(\"stressed\",10,20))\nexcept ValueError:\n    print(\"no any substring found in given range of index :(\")\n    ","96719fa0":"from datetime import datetime\ncurrent_time = datetime.now() #we can set timezone as per our requirement\nprint(current_time)\nmessage = \"Good morning. Today is {today:%B %d, %Y}. It's {today:%H:%M} ... time to work!\".format(today=current_time)\nprint(message)","177437a6":"import re","3bfe0674":"tweet = \"@rishabh i know you are very smart. but not more than me. You can follow this link https:\/\/www.kaggle.com @abc34 @56byugi @!kaggle\"","2ffbfda6":"print(re.findall(r\"@\\d+\",tweet)) \nprint(re.findall(r\"@\\D+\",tweet))  \nprint(re.findall(r\"@\\w+\",tweet)) \nprint(re.findall(r\"@\\W+\",tweet)) \nprint(re.findall(r\"@\\s+\",tweet)) \nprint(re.findall(r\"@\\S+\",tweet))","76ba95db":"print(re.findall(r\"@\\d*\",tweet)) \nprint(re.findall(r\"@\\D*\",tweet))  \nprint(re.findall(r\"@\\w*\",tweet)) \nprint(re.findall(r\"@\\W*\",tweet)) \nprint(re.findall(r\"@\\s*\",tweet)) \nprint(re.findall(r\"@\\S*\",tweet))","eb65a2ec":"print(re.findall(r\"@\\d?\",tweet)) \nprint(re.findall(r\"@\\D?\",tweet))  \nprint(re.findall(r\"@\\w?\",tweet)) \nprint(re.findall(r\"@\\W?\",tweet)) \nprint(re.findall(r\"@\\s?\",tweet)) \nprint(re.findall(r\"@\\S?\",tweet))","03425f5d":"sample = ['40 minutes ago i was there',\n         'I was in delhi before 23rd june 2020',\n          '1st june 2018 was the launching date of my company',\n          'Today date and current time is 1st september 2019 17:25',\n         'I ate food 2 hours before sunset']","542d169e":"regex_pattern = r\"\\d{1,2}\\s\\w+\\s\\w+\"\nfor i in sample:\n    print(re.findall(regex_pattern,i))","8e6cc01b":"regex_pattern = r\"\\d{1,2}\\w+\\s\\w+\\s\\d{4}\" #split and then understand this pattern\nfor i in sample:\n    print(re.findall(regex_pattern,i))","0fe4b4c5":"regex_pattern = r\"\\d{1,2}\\w+\\s\\w+\\s\\d{1,4}\\s\\d{1,2}:\\d{1,2}\"\nfor i in sample:\n    print(re.findall(regex_pattern,i))","0edcfc77":"sample= \"ITS NOT ENOUGH TO SAY THAT IMISS U #MissYou #SoMuch #Friendship #Forever\"","65b28913":"regex_pattern = r\"#\\w+\"\nprint(re.sub(regex_pattern,\"\",sample)) #It takes 3 parameters : regex,new_substring,original_string","8ca91d42":"regex_pattern = r\"\\s+\"\nprint(re.split(regex_pattern,sample))","77f105fd":"sample = \"55871 is the zip code of the mars and 457 is zip code of saturn\"\nregex_pattern = r\"\\d+\"\nprint(re.search(regex_pattern,sample))\nprint(re.match(regex_pattern,sample))","9dfdce75":"sample = \"hey Monika! my number is 24587102.\"\nregex_pattern = r\"\\d+\"\nprint(re.search(regex_pattern,sample))\nprint(re.match(regex_pattern,sample))","c1510c32":"**replace words with hastag with empty string \"\"**","0f48ad08":"# Working with datetime\n\nLet suppose you want to create a tool to remind you the date and time so that you can make your proper schedule.","90350897":"**Did you noticed that match return None despite integers in sample string? It is so because it matches only beginning of the string**","92835512":"# Using + quantifier","895992f5":"# Replacing,Spliting Using RegEx\n\n> To replace a substring in a string with another substring we can use `sub` function of `re`.\n\n> To split a string followed by some pattern we can use `split` functoin of `re`","67240a00":"# Using * quantifier","7cc181e3":"# Using ? quantifier","376010e6":"**Difference are clearly visible in all three example of pattern matching. See the output!! If you have any doubt with these metacharacters please read above description about metacharacters and quantifier again!**","98f26ad5":"**spliting words with every match of once or consecutive space**","cf62e33e":"**checking palindrome of a string**","45e49a04":"# Find,Replace,index function\n\n**find():** find function is use to know to starting index of a word or a series of words together. It will return -1 if that word not find in string else it will return starting index of that word. We have to provide a index range in which we want to search that word. \n\n**Replace():** replace function is use to replace something in a string. It will return same string if it don't find the word that we want to replace.\n\n**index():** index function is like find() function but unlike find function it will raise error if it don't find the word that we are trying to search in string.","9b1ed8a4":"# Search and Match function\n\n**match checks for a match only at the beginning of the string, while search checks for a match anywhere in the string**\n\n**You will encounter difference in these two functions in next 2 examples**\n\n**NOTE:** both return only first search","e564de94":"**we want to finds all dates in a format similar to x minutes ago or y hours ago.**","b3376fea":"# Now let's Start RegEx\n\n<h3>String containing a combination of normal characters and special metacharacters that describes patterns to find text or positions within a text<\/h3>\n\n<h4>Useful Metacharacter<\/h4>\n\n1. **\/d** for digit match (only useful in matching digits)\n2. **\/D** for non-digit (everything except digits)\n3. **\/w** for word matching (it will match all alphabetic plus all digits but no special characters)\n4. **\/W** for non-word matching (all special characters)\n5. **\/s** for whitespace matching \n6. **\/S** for non-whitespace matching\n\n<h4>Useful Quantifiers<\/h4>\n\n<h5>Quantifers are used to match characters,numbers,special character etc multiple times <\/h5>\n\n1. \"+\" Use to match once or more\n2. \"*\" Use to match zero or more\n3. \"?\" Use to match zero or once\n4. {minimum,maximum} we can use curly brackets followed by two arguments minimum match and maximum match.\n\n**NOTE:** \n\n1. Pattern matching breaks where it doesn't find relevant things\n2. Always write regex pattern inside `r\"regex_pattern\"` so that your metacharacters don't loss it's meaning ","bb1597c7":"# In the next part we will use some more functions and will learn about some more quantifiers and will do some more practice questions\n\n**link for part2:** https:\/\/www.kaggle.com\/rishabh6377\/start-your-regex-journey-part2","ed53370f":"**regex that finds all dates in a format similar to Xrd month year.**","eca01b13":"# Using metacharacters and quantifiers in combinations","c151a1d4":"**regex that finds all dates in a format similar to 1st september 2019 17:25.**","e26d61c8":"# RegEx\n\n<h4>RegEx, satnds for RegularExpression, is the sequence of character that defines some search patterns which then used to find,replace and other operations in data\/strings.<\/h4>\n\n**Python has a very extensible and very easy to use module for regex. Name of that module is `re`**\n\n<h3>In this first part of the regex<\/h3>\n\n>we will first see some traditional function through which we can manipulate string.\n\n>Then we will do string manipulation using regex."}}