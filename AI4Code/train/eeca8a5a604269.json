{"cell_type":{"826ce682":"code","5cd81086":"code","8c935b05":"code","f672d6cb":"code","95ab64b3":"code","2a37f416":"code","66024af3":"code","7cc7bc10":"code","0b3ca3fe":"code","12c2d7cb":"code","dfac2774":"code","311bb1bd":"code","1d99686a":"code","d91b72a7":"code","d457fe2f":"code","4fb6ee39":"code","11fdb530":"code","1e5b073a":"code","01615d9e":"code","66f3dea7":"code","70d85ba5":"code","a87d811f":"code","84b9a0a0":"code","ee4e6684":"code","e070a8e4":"code","00316020":"code","98950182":"code","ceb2dbd4":"code","8656821e":"code","d1eb1d09":"code","40a2b59b":"code","9673bb73":"code","801adda2":"code","857cf362":"code","05d9ea47":"code","384a08b4":"code","5e5afc63":"code","f3685823":"code","d8196a46":"code","c22babb2":"code","4235954c":"code","5c5207e5":"code","f7024d40":"code","84c3505f":"code","d4af6b3d":"code","35865485":"code","6583bf0a":"code","8924af09":"code","e55d9b05":"code","eb13b4e8":"code","9fe24354":"code","dacd5b3c":"markdown","474ffa01":"markdown"},"source":{"826ce682":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5cd81086":"import os\ndata=pd.read_csv('..\/input\/train.csv')","8c935b05":"data.head()","f672d6cb":"data.describe()","95ab64b3":"data.groupby(['Sex'])['Survived'].agg(np.mean)","2a37f416":"sns.countplot(x='Pclass',data=data,hue='Survived')","66024af3":"data.groupby(['Pclass'])['Survived'].agg(np.mean)","7cc7bc10":"data.info()","0b3ca3fe":"'percentage of people survived is more in firstclass'","12c2d7cb":"def id_mr(x):\n    if 'Miss' in x:\n        return True\n    else:\n        return False","dfac2774":"data[data['Name'].apply(id_mr)].hist('Age')","311bb1bd":"data['Cabin']=data['Cabin'].replace(np.NAN,'Z')","1d99686a":"data['Cabin_new']=data['Cabin'].apply(lambda x:x[:1])","d91b72a7":"sns.countplot('Cabin_new',data=data)","d457fe2f":"data.groupby('Cabin_new')['Survived'].agg(np.mean)","4fb6ee39":"data.hist('Age',by='Survived',density=True)","11fdb530":"sns.violinplot(x='Survived',y='Age',data=data)","1e5b073a":"data.hist('Age',by='Survived',density=True)","01615d9e":"data_new=data.dropna()","66f3dea7":"data_new['Cat_Age']=data_new['Age'].apply(lambda x:int(x\/5))","70d85ba5":"sns.countplot('Cat_Age',data=data_new,hue='Survived')","a87d811f":"data_new.groupby('Cat_Age')['Survived'].agg(np.mean)","84b9a0a0":"sns.heatmap(data.corr())","ee4e6684":"sns.distplot(data['Fare'])","e070a8e4":"def norm(mi,ma,x):\n    return ((x-mi)*100)\/(ma-mi)","00316020":"data.head(1)","98950182":"sns.countplot('SibSp',data=data,hue='Survived')\n","ceb2dbd4":"data.groupby(['SibSp'])['Survived'].agg(np.mean)","8656821e":"sns.countplot('Parch',data=data,hue='Survived')","d1eb1d09":"data.groupby(['Parch'])['Survived'].agg(np.mean)","40a2b59b":"data.info()","9673bb73":"data.groupby(['Embarked'])['Survived'].agg(np.mean)","801adda2":"from sklearn.model_selection import train_test_split as split\nfrom sklearn.tree import DecisionTreeClassifier\n\n","857cf362":"def preprocess(data):\n    #features=set(data.columns)\n    #features=features-{'PassengerId','Survived','Name','Age','Ticket','Cabin'}\n    features=['Pclass', 'Sex', 'Fare', 'Parch', 'Embarked', 'SibSp']\n    #features=list(features)\n    dat=data[features]\n    #print(dat.shape)\n    dat['Embarked']=dat['Embarked'].fillna('C')\n    dat['Fare']=dat['Fare'].fillna('80')\n    gen_onehot_features_sex = pd.get_dummies(dat['Sex'])\n    dat=pd.concat([dat, gen_onehot_features_sex],axis=1)\n    gen_onehot_features_emb = pd.get_dummies(dat['Embarked'])\n    dat=pd.concat([dat, gen_onehot_features_emb],axis=1)\n    gen_onehot_features_p = pd.get_dummies(dat['Pclass'])\n    dat=pd.concat([dat, gen_onehot_features_p],axis=1)\n    dat=dat.drop(['Sex','Embarked','Pclass'],axis=1)\n\n    #dat['Sex']=list(dat['Sex'].factorize()[0])\n    #dat['Embarked']=list(dat['Embarked'].factorize()[0])\n    #print(dat.shape)\n    X=dat.values\n    try:\n        y=data['Survived'].values\n        return X,y\n    except:\n        return X","05d9ea47":"X,y=preprocess(data)","384a08b4":" X_train, X_test, y_train, y_test = split(X, y, test_size=0.25, random_state=37)","5e5afc63":"tree=DecisionTreeClassifier(max_depth=3,max_features=9)\ntree.fit(X_train,y_train)","f3685823":"from sklearn.metrics import accuracy_score\n\ntree_pred = tree.predict(X_test)\naccuracy_score(y_test, tree_pred) # 0.94","d8196a46":"from sklearn.model_selection import GridSearchCV, cross_val_score\n\ntree_params = {'max_depth': range(1,20),\n               'max_features': range(1,12)}\n\ntree_grid = GridSearchCV(tree, tree_params,cv=5, n_jobs=-1, verbose=True)\n\ntree_grid.fit(X_train, y_train)","c22babb2":"tree_grid.best_params_,tree_grid.best_score_","4235954c":"from sklearn.ensemble import RandomForestClassifier\n\nforest = RandomForestClassifier(n_estimators=100, n_jobs=-1, \n                                random_state=17)\nprint(np.mean(cross_val_score(forest, X_train, y_train, cv=5)))","5c5207e5":"forest_params = {'max_depth': range(2, 40),\n                 'max_features': range(1, 12)}\n\nforest_grid = GridSearchCV(forest, forest_params,\n                           cv=5, n_jobs=-1, verbose=True)\n\nforest_grid.fit(X_train, y_train)\n\nforest_grid.best_params_, forest_grid.best_score_","f7024d40":"from sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\n\nX_train, X_holdout, y_train, y_holdout = train_test_split(X, y, test_size=0.25,random_state=17)\n\n\nknn = KNeighborsClassifier(n_neighbors=10)\n\n\n# for kNN, we need to scale features\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_holdout_scaled = scaler.transform(X_holdout)\nknn.fit(X_train_scaled, y_train)","84c3505f":"knn_pred = knn.predict(X_holdout_scaled)\naccuracy_score(y_holdout, knn_pred)","d4af6b3d":"from sklearn.pipeline import Pipeline\n\nknn_pipe = Pipeline([('scaler', StandardScaler()), ('knn', KNeighborsClassifier(n_jobs=-1))])\n\nknn_params = {'knn__n_neighbors': range(1, 50)}\n\nknn_grid = GridSearchCV(knn_pipe, knn_params,\n                        cv=5, n_jobs=-1, verbose=True)\n\nknn_grid.fit(X_train, y_train)\n\nknn_grid.best_params_, knn_grid.best_score_","35865485":"test_data=pd.read_csv('..\/input\/test.csv')","6583bf0a":"test_data.info()","8924af09":"X_test_final=preprocess(test_data)","e55d9b05":"y_pred_final=tree.predict(X_test_final)\nout=pd.DataFrame(index=test_data['PassengerId'])\n#out[\"PassengerId\"]=test_data['PassengerId']\nout['Survived']=y_pred_final\nout.to_csv('gender_submission.csv')","eb13b4e8":"out","9fe24354":"out","dacd5b3c":"**38% survived**","474ffa01":"Convert Age to categorical data"}}