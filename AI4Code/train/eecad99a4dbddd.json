{"cell_type":{"78d262f3":"code","16f21a7d":"code","591697b5":"code","2470a9c5":"code","53386cfa":"code","b7e9c2ef":"code","e7af87f9":"code","eb312907":"code","78dbc3d4":"code","8bdaa191":"code","dca932f1":"code","4cda4574":"code","3dd27e8e":"code","2d0b6d85":"code","76bbffd4":"code","d8180c2e":"code","687a4645":"code","d5e3abaa":"code","6ed82651":"code","2ab79afd":"code","5902e96b":"code","a9cad6ba":"code","c9fb265a":"code","ecf7eb65":"code","4f2168cd":"code","e17ef06d":"code","74ef6351":"markdown","5e1cda4d":"markdown","7ee1f961":"markdown","0051e736":"markdown","e4befc4d":"markdown","a2d9ef6e":"markdown","6573990a":"markdown","ea1253a5":"markdown","325f934b":"markdown","fc3fa6ff":"markdown","20af6239":"markdown","49701ee2":"markdown","54a3f4e0":"markdown","73cc33fe":"markdown","12943b12":"markdown","be3ee4e6":"markdown"},"source":{"78d262f3":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport time","16f21a7d":"input_dir = Path(\"\/kaggle\/input\/riiid-test-answer-prediction\/\")","591697b5":"%%time\ndata = pd.read_csv(input_dir \/ \"train.csv\",\n                   usecols=[1, 2, 3, 4, 7],\n                   dtype={\n                        'timestamp': 'int64',\n                        'user_id': 'int32',\n                        'content_id': 'int16',\n                        'content_type_id': 'int8',\n                        'answered_correctly':'int8',\n                   }\n       )\n# 2\u5206\u304f\u3089\u3044\u304b\u304b\u308b","2470a9c5":"# \u554f\u984c\u306e\u30de\u30b9\u30bf\nquestions = pd.read_csv(input_dir\/\"questions.csv\",\n                        dtype={\n                            \"question_id\":np.int16,\n                            \"bundle_id\":np.int16,\n                            \"correct_answer\":np.int8,\n                            \"part\":np.int8,\n                        }\n           )\nn_questions = len(questions)\nn_questions","53386cfa":"del questions","b7e9c2ef":"data.head()","e7af87f9":"# \u8b1b\u7fa9\u306e\u30c7\u30fc\u30bf\u3092\u843d\u3068\u3059 & \u6642\u7cfb\u5217\u9806\u306b\u30bd\u30fc\u30c8\ndata = data[data[\"content_type_id\"] == 0].sort_values('timestamp').reset_index(drop = True)","eb312907":"data.shape","78dbc3d4":"# \u30e1\u30e2\u30ea\u304c\u8ca7\u5f31\u306a\u306e\u3067\u30c7\u30fc\u30bf\u3092\u7d5e\u308b\ndata=data.tail(10000000)","8bdaa191":"%%time\n# \u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306b\u300c\u554f\u984cID\u306e\u7cfb\u5217\u300d\u3068\u300c\u6b63\u89e3\u4e0d\u6b63\u89e3\u306e\u7cfb\u5217\u300d\u3092\u6301\u3064\u5f62\u306b\u5909\u5f62\ndata = data.groupby(\"user_id\").apply(\n    lambda row: (\n        row[\"content_id\"].values,\n        row[\"answered_correctly\"].values,\n    )\n)\ndata","dca932f1":"# \u30e2\u30c7\u30eb\u3067\u6271\u3046\u6700\u5927\u7cfb\u5217\u9577\nMAX_SEQ = 20\n# \u30e2\u30c7\u30eb\u3067\u8003\u616e\u3059\u308b\u6700\u5c0f\u30b5\u30f3\u30d7\u30eb\u6570\uff08\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u6570\u672a\u6e80\u306e\u30e6\u30fc\u30b6\u30fc\u306f\u7121\u8996\u3055\u308c\u308b\uff09\nMIN_SAMPLES = 5\n# \u57cb\u3081\u8fbc\u307f\u6b21\u5143\u6570\nEMBED_DIM = 32\n# Attention\u30d8\u30c3\u30c9\u306e\u6570\nNUM_HEADS = 2\n# \u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u5272\u5408\nDROPOUT_RATE = 0.2\n# \u5b66\u7fd2\u7387\nLEARNING_RATE = 1e-3\n# \u6700\u5927\u5b66\u7fd2\u7387\nMAX_LEARNING_RATE = 2e-3\n# \u30a8\u30dd\u30c3\u30af\u6570\uff08\u5b66\u7fd2\u30c7\u30fc\u30bf\u5168\u4f53\u3092\u4f55\u5468\u3059\u308b\u304b\uff09\nEPOCHS = 5\n# \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\nBATCH_SIZE = 1024","4cda4574":"# \u5b66\u7fd2\u306b\u4f7f\u3046\u30e6\u30fc\u30b6\u30fc\u6570\nTRAIN_SAMPLES = int(data.shape[0]*0.8)\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u691c\u8a3c\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\ntrain_index = data.index.to_list()[:TRAIN_SAMPLES]\nvalid_index = data.index.to_list()[TRAIN_SAMPLES:]\ntrain = data[data.index.isin(train_index)]\nvalid = data[data.index.isin(valid_index)]\nprint(len(train), len(valid))","3dd27e8e":"del data, train_index, valid_index","2d0b6d85":"import torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom sklearn.metrics import roc_auc_score\nfrom tqdm.notebook import tqdm","76bbffd4":"# \u7cfb\u5217\u306e\u958b\u59cb\u8a18\u53f7\uff08Begin Of Sequence\uff09\nBOS = 2\nclass TransformerDataset(Dataset):\n    \"\"\"\u666e\u901a\u306e\u5834\u5408\"\"\"\n    def __init__(self, group, n_questions, min_samples=1, max_seq=128):\n        super(TransformerDataset, self).__init__()\n        self.max_seq = max_seq\n        self.n_questions = n_questions\n        # \u30e6\u30fc\u30b6\u30fcID\u2192\u7cfb\u5217\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570\n        self.samples = {}\n        \n        self.user_ids = []\n        for user_id in group.index:\n            q, qa = group[user_id]\n            # \u30b5\u30f3\u30d7\u30eb\u304c\u5c11\u306a\u3044\u30e6\u30fc\u30b6\u30fc\u306f\u7121\u8996\n            if len(q) < min_samples:\n                continue\n            \n            # \u6700\u5927\u7cfb\u5217\u9577\u3088\u308a\u9577\u3044\u7cfb\u5217\u306e\u5834\u5408\n            if len(q) > self.max_seq:\n                total_questions = len(q)\n                # \u6700\u521d\u306e\u7aef\u6570\u5206\u306e\u7cfb\u5217\u3092\u683c\u7d0d\n                initial = total_questions % self.max_seq\n                if initial >= min_samples:\n                    self.user_ids.append(f\"{user_id}_0\")\n                    self.samples[f\"{user_id}_0\"] = (q[:initial], qa[:initial])\n                # \u6b8b\u308a\u306e\u9577\u3044\u7cfb\u5217\u306b\u3064\u3044\u3066\u6700\u5927\u7cfb\u5217\u9577\u305a\u3064\u53d6\u308a\u51fa\u3057\u3066\u683c\u7d0d\n                for seq in range(total_questions \/\/ self.max_seq):\n                    self.user_ids.append(f\"{user_id}_{seq+1}\")\n                    start = initial + seq * self.max_seq\n                    end = start + self.max_seq\n                    self.samples[f\"{user_id}_{seq+1}\"] = (q[start:end], qa[start:end])\n            else:\n                # \u6700\u5927\u7cfb\u5217\u9577\u3088\u308a\u77ed\u3044\u7cfb\u5217\u306e\u5834\u5408\n                user_id = str(user_id)\n                self.user_ids.append(user_id)\n                self.samples[user_id] = (q, qa)\n    \n    def __len__(self):\n        return len(self.user_ids)\n\n    def __getitem__(self, index):\n        user_id = self.user_ids[index]\n        q_, qa_ = self.samples[user_id]\n        seq_len = len(q_)\n        # \u6700\u5927\u7cfb\u5217\u9577\u3067\u63c3\u3048\u308b\n        q = np.zeros(self.max_seq, dtype=int)\n        qa = np.zeros(self.max_seq, dtype=int)\n        qa_shift = np.zeros(self.max_seq, dtype=int)\n        if seq_len == self.max_seq:\n            q[:] = q_\n            qa[:] = qa_\n        else:# \u6700\u5927\u9577\u306a\u3044\u3082\u306e\u306f\u672b\u5c3e\u306b\u683c\u7d0d\n            q[-seq_len:] = q_\n            qa[-seq_len:] = qa_\n        # \u53f3\u30b7\u30d5\u30c8\u3057\u305f\u3082\u306e (Decoder\u306e\u5165\u529b)\n        qa_shift[-seq_len:] = np.concatenate([[BOS],qa_[:-1]])\n        \n        # transformer\u3067\u7121\u8996\u3059\u308b\u90e8\u5206\u3092\u6307\u5b9a\u3059\u308b\u30de\u30b9\u30af\n        # True: \u30de\u30b9\u30af\u3055\u308c\u308b\u3001False: \u30de\u30b9\u30af\u306a\u3057\n        padding_mask = np.ones(self.max_seq, dtype=bool)\n        # \u672b\u5c3e\u306e\u30c7\u30fc\u30bf\u683c\u7d0d\u7b87\u6240\u306f\u30de\u30b9\u30af\u3057\u306a\u3044\n        padding_mask[-seq_len:] = False\n        \n        return q, qa_shift, qa, padding_mask","d8180c2e":"train_dataset = TransformerDataset(train, n_questions, min_samples=MIN_SAMPLES, max_seq=MAX_SEQ)\ntrain_dataloader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=3)\nvalid_dataset = TransformerDataset(valid, n_questions, max_seq=MAX_SEQ)\nvalid_dataloader = DataLoader(valid_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=3)","687a4645":"class FFN(nn.Module):\n    \"\"\"Feed Foward Network\"\"\"\n    def __init__(self, state_size=200):\n        super(FFN, self).__init__()\n        self.state_size = state_size\n        # \u7dda\u5f62\u5909\u63db\u3068ReLU\n        self.lr1 = nn.Linear(state_size, state_size)\n        self.relu = nn.ReLU()\n        self.lr2 = nn.Linear(state_size, state_size)\n        self.dropout = nn.Dropout(0.2)\n    \n    def forward(self, x):\n        x = self.lr1(x)\n        x = self.relu(x)\n        x = self.lr2(x)\n        return self.dropout(x)\n\ndef future_mask(seq_length):\n    \"\"\"\u672a\u6765\u60c5\u5831\u3092\u898b\u306a\u3044\u305f\u3081\u306e\u30de\u30b9\u30af\"\"\"\n    # \u5bfe\u89d2\u304c0\u3067\u53f3\u4e0a\u306e\u4e09\u89d2\u90e8\u5206\u304c1\u306e\u4e0a\u4e09\u89d2\u884c\u5217\n    future_mask = np.triu(np.ones((seq_length, seq_length)), k=1).astype('bool')\n    return torch.from_numpy(future_mask)\n\nclass Transformer(nn.Module):\n    def __init__(self, n_questions, n_response, max_seq=128, embed_dim=128, num_heads=8, dropout_rate=0.2):\n        super(Transformer, self).__init__()\n        self.n_questions = n_questions # \u554f\u984c\u306e\u6570\n        self.n_response = n_response # {0, 1, BOS}\u306e3\u7a2e\u985e\n        self.embed_dim = embed_dim\n        self.max_seq = max_seq\n        # Embedding\u7cfb\n        # \u96e2\u6563\u8868\u73fe\uff08ID\u306a\u3069\u306e\u6574\u6570\uff09\u3092\u6307\u5b9a\u3057\u305f\u6b21\u5143\u6570\u306e\u5206\u6563\u8868\u73fe\u306b\u5909\u63db\u3059\u308b\u5c64\uff08\u81ea\u7136\u8a00\u8a9e\u3067\u3044\u3046\u3068\u3053\u308d\u306eword2vec\uff09\n        # nn.Embedding(\u5358\u8a9e\u306e\u7a2e\u985e\u6570, \u57cb\u3081\u8fbc\u307f\u305f\u3044\u6b21\u5143\u6570)\n        # nn.Embedding\u5185\u3067\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u5358\u7d14\u3067\u3001onehot\u30d9\u30af\u30c8\u30eb\u3092\u4f5c\u3063\u3066\u304b\u3089\u7dda\u5f62\u5909\u63db\u3057\u3066\u3044\u308b\u3060\u3051\u3063\u307d\u3044\n        self.position_embed_e = nn.Embedding(max_seq, embed_dim)\n        self.question_embed_e = nn.Embedding(n_questions, embed_dim)\n        self.position_embed_d = nn.Embedding(max_seq, embed_dim)\n        self.response_embed_d = nn.Embedding(n_response, embed_dim)\n        # Attention\u7cfb\n        # \u76f4\u524d\u306eLinear\u306f\u3053\u306e\u4e2d\u306b\u542b\u307e\u308c\u3066\u3044\u308b\n        # See https:\/\/pytorch.org\/docs\/stable\/generated\/torch.nn.MultiheadAttention.html\n        self.attention_e = nn.MultiheadAttention(embed_dim=embed_dim, num_heads=num_heads, dropout=dropout_rate)\n        self.attention_d = nn.MultiheadAttention(embed_dim=embed_dim, num_heads=num_heads, dropout=dropout_rate)\n        self.attention_ed = nn.MultiheadAttention(embed_dim=embed_dim, num_heads=num_heads, dropout=dropout_rate)\n        # \u6b63\u898f\u5316\u7cfb\n        self.layer_normal1_e = nn.LayerNorm(embed_dim)\n        self.layer_normal2_e = nn.LayerNorm(embed_dim)\n        self.layer_normal1_d = nn.LayerNorm(embed_dim)\n        self.layer_normal2_d = nn.LayerNorm(embed_dim)\n        self.layer_normal3_d = nn.LayerNorm(embed_dim)\n        # FFN\u7cfb\n        self.ffn_e = FFN(embed_dim)\n        self.ffn_d = FFN(embed_dim)\n        # \u6700\u5f8c\u306e\u7dda\u5f62\u5909\u63db\n        self.pred = nn.Linear(embed_dim, 1)\n    \n    def forward(self, question_ids, responses):\n        device = question_ids.device\n        #######################################################################\n        # Encoder\n        #######################################################################\n        # --------- Embedding ---------\n        # \u7cfb\u5217\u306e\u4f55\u756a\u76ee\u304b\u3092\u8868\u3059[[0, 1, 2, ..., seq_len - 1]]\u3092\u751f\u6210\n        seq = torch.arange(self.max_seq, device=device).unsqueeze(0)\n        # \u305d\u308c\u3092Embedding\uff08\u5206\u6563\u8868\u73fe\u3078\uff09\n        pos_e = self.position_embed_e(seq)\n        # Encoder\u306b\u5165\u308c\u308bID\u5217\u3092\u5206\u6563\u8868\u73fe\u3078\n        question = self.question_embed_e(question_ids)\n        # \u4f4d\u7f6e\u60c5\u5831\u3092\u52a0\u3048\u308b\n        enc = pos_e + question\n        # --------- Attention ---------\n        # Attention\u306e\u95a2\u6570\u306f\u3001\uff08\u7cfb\u5217\u9577, \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba, \u6b21\u5143\u6570\uff09\u306e\u5f62\u3067\u53d7\u3051\u53d6\u308b\n        enc = enc.permute(1, 0, 2) # \uff08\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba, \u7cfb\u5217\u9577, \u6b21\u5143\u6570\uff09=>\uff08\u7cfb\u5217\u9577, \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba, \u6b21\u5143\u6570\uff09\n        # self-attention\n        enc_tmp, _ = self.attention_e(enc, enc, enc)\n        enc = self.layer_normal1_e(enc_tmp+enc)\n        # --------- Feed Forward Network ---------\n        enc_tmp = self.ffn_e(enc)\n        enc = self.layer_normal2_e(enc_tmp+enc)\n        #######################################################################\n        # Decoder\n        #######################################################################\n        # --------- Embedding ---------\n        # \u4f4d\u7f6e\u60c5\u5831\u3092Embedding\uff08\u5206\u6563\u8868\u73fe\u3078\uff09\n        pos_d = self.position_embed_d(seq)\n        # Decoder\u306b\u5165\u308c\u308b\u96e2\u6563\u8868\u73fe\u3092\u5206\u6563\u8868\u73fe\u3078\n        response = self.response_embed_d(responses)\n        dec = response + pos_d\n        # --------- Attention ---------\n        # \u672a\u6765\u60c5\u5831\u3092\u96a0\u3059\u30de\u30b9\u30af\n        att_mask = future_mask(self.max_seq).to(device)\n        # Attention\u306e\u95a2\u6570\u306f\u3001\uff08\u7cfb\u5217\u9577, \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba, \u6b21\u5143\u6570\uff09\u306e\u5f62\u3067\u53d7\u3051\u53d6\u308b\n        dec = dec.permute(1, 0, 2) # \uff08\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba, \u7cfb\u5217\u9577, \u6b21\u5143\u6570\uff09=>\uff08\u7cfb\u5217\u9577, \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba, \u6b21\u5143\u6570\uff09\n        # self-attention\n        dec_tmp, _ = self.attention_d(dec, dec, dec, attn_mask=att_mask)\n        dec = self.layer_normal1_d(dec_tmp+dec)\n        # source-target attention\n        dec_tmp, _ = self.attention_ed(dec, enc, enc)\n        dec = self.layer_normal2_d(dec_tmp+dec)\n        # --------- Feed Forward Network ---------\n        dec_tmp = self.ffn_d(dec)\n        dec = self.layer_normal3_d(dec_tmp+dec)\n        # shape\u3092\u3082\u3068\u306b\u623b\u3059\n        dec = dec.permute(1, 0, 2) # \uff08\u7cfb\u5217\u9577, \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba, \u6b21\u5143\u6570\uff09=>\uff08\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba, \u7cfb\u5217\u9577, \u6b21\u5143\u6570\uff09\n\n        # \u6700\u5f8c\u306e\u7dda\u5f62\u5909\u63db\n        dec = self.pred(dec)\n\n        return dec.squeeze(-1)","d5e3abaa":"# 0: \u4e0d\u6b63\u89e3\u30011\uff1a\u6b63\u89e3\u30012\uff1aBOS\nn_responses = 3\n\n# \u30e2\u30c7\u30eb\u306e\u8a2d\u5b9a\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel = Transformer(n_questions, n_responses,\n                    max_seq=MAX_SEQ,\n                    embed_dim=EMBED_DIM,\n                    num_heads=NUM_HEADS,\n                   )\n# \u6700\u9069\u5316\u6cd5\u306e\u6307\u5b9a\noptimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE)\n# \u640d\u5931\u306e\u8a2d\u5b9a\n# - BCEWithLogitsLoss: sigmoid\u3092\u3068\u308b\u524d\u306e\u5024\u3092\u5165\u529b\u3068\u3057\u3066\u53d7\u3051\u4ed8\u3051\u308b\n# - BCELoss: sigmoid\u3092\u3068\u3063\u305f\u5f8c\u306e\u5024\u3092\u5165\u529b\u3068\u3057\u3066\u53d7\u3051\u4ed8\u3051\u308b\n# \u30e2\u30c7\u30eb\u81ea\u4f53\u306bsigmoid\u3092\u542b\u3081\u3066\u306a\u3044\u305f\u3081\u3001\u524d\u8005\u3092\u4f7f\u3046\uff08\u3053\u306e\u65b9\u304c\u6570\u5024\u7684\u306b\u5b89\u5b9a\u3057\u3066\u3044\u3066\u3001\u9ad8\u901f\u3089\u3057\u3044\uff09\ncriterion = nn.BCEWithLogitsLoss()\n# \u5b66\u7fd2\u7387\u3092\u3069\u3046\u52d5\u304b\u3057\u3066\u3044\u304f\u304b\nscheduler = torch.optim.lr_scheduler.OneCycleLR(\n    optimizer, max_lr=MAX_LEARNING_RATE, steps_per_epoch=len(train_dataloader), epochs=EPOCHS\n)\n\nmodel.to(device)\ncriterion.to(device)","6ed82651":"def train_fn(model, dataloader, optimizer, scheduler, criterion, device=\"cpu\"):\n    \"\"\"\u5b66\u7fd2\u30eb\u30fc\u30d7\"\"\"\n    model.train()\n\n    train_loss = []\n    num_corrects = 0\n    num_total = 0\n    targets = []\n    outs = []\n\n    for item in tqdm(dataloader):\n        # tensor\u3092\u7f6e\u304f\u30c7\u30d0\u30a4\u30b9\u306e\u8a2d\u5b9a\n        enc_input = item[0].to(device).long()\n        dec_input = item[1].to(device).long()\n        target = item[2].to(device).float()\n        padding_mask = item[3].to(device).bool()\n        # \u52fe\u914d\u60c5\u5831\u306e\u521d\u671f\u5316\n        optimizer.zero_grad()\n        # \u30e2\u30c7\u30eb\u306e\u51fa\u529b\u8a08\u7b97\n        output = model(enc_input, dec_input)\n        # \u4e88\u6e2c\u5024\u306e\u3046\u3061\u3001mask\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u6240\u3060\u3051\u53d6\u308a\u51fa\u3059\n        output = torch.masked_select(output, torch.logical_not(padding_mask))\n        # \u771f\u5024\u306e\u3046\u3061\u3001mask\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u6240\u3060\u3051\u53d6\u308a\u51fa\u3059\n        target = torch.masked_select(target, torch.logical_not(padding_mask))\n        # \u640d\u5931\u3092\u8a08\u7b97\n        loss = criterion(output, target)\n        # \u52fe\u914d\u3092\u8a08\u7b97\n        loss.backward()\n        # \u6700\u9069\u5316\u6cd5\u306b\u57fa\u3065\u3044\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u66f4\u65b0\n        optimizer.step()\n        scheduler.step()\n        # \u640d\u5931\u3092\u8a18\u9332\n        train_loss.append(loss.item())\n        # 0.5\u4ee5\u4e0a\u306a\u30891\u3068\u4e88\u6e2c\n        pred = (torch.sigmoid(output) >= 0.5).long()\n        # \u7cbe\u5ea6\u306e\u305f\u3081\u306e\u8a18\u9332\n        num_corrects += (pred == target).sum().item()\n        num_total += len(target)\n\n        targets.extend(target.view(-1).data.cpu().numpy())\n        outs.extend(output.view(-1).data.cpu().numpy())\n\n    acc = num_corrects \/ num_total\n    auc = roc_auc_score(targets, outs)\n    loss = np.mean(train_loss)\n\n    return loss, acc, auc","2ab79afd":"def valid_fn(model, dataloader, criterion, device=\"cpu\"):\n    \"\"\"\u691c\u8a3c\u306e\u30eb\u30fc\u30d7\"\"\"\n    model.eval()\n\n    valid_loss = []\n    num_corrects = 0\n    num_total = 0\n    targets = []\n    outs = []\n\n    for item in tqdm(dataloader):\n        enc_input = item[0].to(device).long()\n        dec_input = item[1].to(device).long()\n        target = item[2].to(device).float()\n        padding_mask = item[3].to(device).bool()\n        # \u30e2\u30c7\u30eb\u306e\u51fa\u529b\u8a08\u7b97\n        output = model(enc_input, dec_input)\n        # \u4e88\u6e2c\u5024\u306e\u3046\u3061\u3001mask\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u6240\u3060\u3051\u53d6\u308a\u51fa\u3059\n        output = torch.masked_select(output, torch.logical_not(padding_mask))\n        # \u771f\u5024\u306e\u3046\u3061\u3001mask\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u6240\u3060\u3051\u53d6\u308a\u51fa\u3059\n        target = torch.masked_select(target, torch.logical_not(padding_mask))\n        # \u640d\u5931\u3092\u8a08\u7b97\n        loss = criterion(output, target)\n        # \u640d\u5931\u3092\u8a18\u9332\n        valid_loss.append(loss.item())\n        # 0.5\u4ee5\u4e0a\u306a\u30891\u3068\u4e88\u6e2c\n        pred = (torch.sigmoid(output) >= 0.5).long()\n        # \u7cbe\u5ea6\u306e\u305f\u3081\u306e\u8a18\u9332\n        num_corrects += (pred == target).sum().item()\n        num_total += len(target)\n\n        targets.extend(target.view(-1).data.cpu().numpy())\n        outs.extend(output.view(-1).data.cpu().numpy())\n\n    acc = num_corrects \/ num_total\n    auc = roc_auc_score(targets, outs)\n    loss = np.mean(valid_loss)\n\n    return loss, acc, auc","5902e96b":"best_auc = 0\nearly_stop = 3\nstep = 0\nfor epoch in range(EPOCHS):\n    loss, acc, auc = train_fn(model, train_dataloader, optimizer, scheduler, criterion, device)\n    print(f\"[train] epoch: {epoch+1}\/{EPOCHS}, loss: {loss:.3f}, acc: {acc:.3f}, auc: {auc:.3f}\")\n    loss, acc, auc = valid_fn(model, valid_dataloader, criterion, device)\n    print(f\"[valid] epoch: {epoch+1}\/{EPOCHS}, loss: {loss:.3f}, acc: {acc:.3f}, auc: {auc:.3f}\")\n    if auc > best_auc:\n        best_auc = auc\n        step = 0\n        torch.save(model.state_dict(), \"model.pt\")\n    else:\n        step += 1\n        if step >= early_stop:\n            break","a9cad6ba":"class SAKTDataset(Dataset):\n    def __init__(self, group, n_questions, min_samples=1, max_seq=128):\n        super(SAKTDataset, self).__init__()\n        self.max_seq = max_seq\n        self.n_questions = n_questions\n        # \u30e6\u30fc\u30b6\u30fcID\u2192\u7cfb\u5217\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570\n        self.samples = {}\n        \n        self.user_ids = []\n        for user_id in group.index:\n            q, qa = group[user_id]\n            # \u30b5\u30f3\u30d7\u30eb\u304c\u5c11\u306a\u3044\u30e6\u30fc\u30b6\u30fc\u306f\u7121\u8996\n            if len(q) < min_samples:\n                continue\n            \n            # \u6700\u5927\u7cfb\u5217\u9577\u3088\u308a\u9577\u3044\u7cfb\u5217\u306e\u5834\u5408\n            if len(q) > self.max_seq:\n                total_questions = len(q)\n                # \u6700\u521d\u306e\u7aef\u6570\u5206\u306e\u7cfb\u5217\u3092\u683c\u7d0d\n                initial = total_questions % self.max_seq\n                if initial >= min_samples:\n                    self.user_ids.append(f\"{user_id}_0\")\n                    self.samples[f\"{user_id}_0\"] = (q[:initial], qa[:initial])\n                # \u6b8b\u308a\u306e\u9577\u3044\u7cfb\u5217\u306b\u3064\u3044\u3066\u6700\u5927\u7cfb\u5217\u9577\u305a\u3064\u53d6\u308a\u51fa\u3057\u3066\u683c\u7d0d\n                for seq in range(total_questions \/\/ self.max_seq):\n                    self.user_ids.append(f\"{user_id}_{seq+1}\")\n                    start = initial + seq * self.max_seq\n                    end = start + self.max_seq\n                    self.samples[f\"{user_id}_{seq+1}\"] = (q[start:end], qa[start:end])\n            else:\n                # \u6700\u5927\u7cfb\u5217\u9577\u3088\u308a\u77ed\u3044\u7cfb\u5217\u306e\u5834\u5408\n                user_id = str(user_id)\n                self.user_ids.append(user_id)\n                self.samples[user_id] = (q, qa)\n    \n    def __len__(self):\n        return len(self.user_ids)\n\n    def __getitem__(self, index):\n        user_id = self.user_ids[index]\n        q_, qa_ = self.samples[user_id]\n        seq_len = len(q_)\n        # \u6700\u5927\u7cfb\u5217\u9577\u3067\u63c3\u3048\u308b\n        q = np.zeros(self.max_seq, dtype=int)\n        qa = np.zeros(self.max_seq, dtype=int)\n        if seq_len == self.max_seq:\n            q[:] = q_\n            qa[:] = qa_\n        else:\n            q[-seq_len:] = q_\n            qa[-seq_len:] = qa_\n        # \u53f3\u30b7\u30d5\u30c8\u3057\u305f\u554f\u984c\u306eID\u7cfb\u5217 \n        target_id = q[1:]\n        # \u6b63\u89e3\u4e0d\u6b63\u89e3\u306e\u7cfb\u5217 (\u4e88\u6e2c\u3057\u305f\u3044\u3082\u306e)\n        label = qa[1:]\n\n        # \u6b63\u89e3\uff1a\u30b3\u30f3\u30c6\u30f3\u30c4ID + \u5168\u8cea\u554f\u6570\n        # \u4e0d\u6b63\u89e3\uff1a\u30b3\u30f3\u30c6\u30f3\u30c4ID\n        # \u6570\u5b57\u3067\u5217\u6319\u3059\u308b\u3068\u3001\u4e0d\u6b63\u89e3\u304c\u4e26\u3093\u3060\u3042\u3068\u306b\u3001\u6b63\u89e3\u304c\u4e26\u3076\u30a4\u30e1\u30fc\u30b8\n        # \u305d\u306e\u3088\u3046\u306a\u6570\u5b57\u304c\u4e26\u3093\u3060\u7cfb\u5217\u3092\u5165\u529b\u306b\u3059\u308b\n        # \u6700\u5f8c\u306e\u8981\u7d20\u306f\u4e88\u6e2c\u5bfe\u8c61\u306a\u305f\u3081\u9664\u5916\n        x = q[:-1] + (qa[:-1] == 1) * self.n_questions\n\n        # \u7121\u8996\u3059\u308b\u90e8\u5206\u3092\u6307\u5b9a\u3059\u308b\u30de\u30b9\u30af\n        # True: \u30de\u30b9\u30af\u3055\u308c\u308b\u3001False: \u30de\u30b9\u30af\u306a\u3057\n        padding_mask = np.ones(self.max_seq, dtype=bool)\n        # \u672b\u5c3e\u306e\u30c7\u30fc\u30bf\u683c\u7d0d\u7b87\u6240\u306f\u30de\u30b9\u30af\u3057\u306a\u3044\n        padding_mask[-seq_len:] = False\n        padding_mask = padding_mask[1:]\n\n        return x, target_id, label, padding_mask","c9fb265a":"train_dataset = SAKTDataset(train, n_questions, min_samples=MIN_SAMPLES, max_seq=MAX_SEQ)\ntrain_dataloader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=3)\nvalid_dataset = SAKTDataset(valid, n_questions, max_seq=MAX_SEQ)\nvalid_dataloader = DataLoader(valid_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=3)","ecf7eb65":"class SAKT(nn.Module):\n    \"\"\"SAKT\u30e2\u30c7\u30eb\"\"\"\n    def __init__(self, n_questions, max_seq=128, embed_dim=128, num_heads=8, dropout_rate=0.2):\n        super(SAKT, self).__init__()\n        self.n_questions = n_questions\n        self.embed_dim = embed_dim\n\n        self.embedding = nn.Embedding(2*n_questions, embed_dim)\n        self.pos_embedding = nn.Embedding(max_seq-1, embed_dim)\n        self.e_embedding = nn.Embedding(n_questions, embed_dim)\n        # MultiheadAttention\u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\n        self.multi_att = nn.MultiheadAttention(embed_dim=embed_dim, num_heads=num_heads, dropout=dropout_rate)\n\n        self.dropout = nn.Dropout(dropout_rate)\n        self.layer_normal = nn.LayerNorm(embed_dim) \n\n        self.ffn = FFN(embed_dim)\n        self.pred = nn.Linear(embed_dim, 1)\n    \n    def forward(self, x, question_ids):\n        device = x.device\n        # ID\u7cfb\u5217\u306e\u57cb\u3081\u8fbc\u307f\n        x = self.embedding(x)\n        # \u7cfb\u5217\u306e\u4f55\u756a\u76ee\u304b\u3092\u8868\u3059[[0, 1, 2, ..., seq_len - 1]]\u3092\u751f\u6210\n        pos_id = torch.arange(x.size(1)).unsqueeze(0).to(device)\n        # \u7cfb\u5217\u5185\u4f4d\u7f6e\u60c5\u5831\u306e\u57cb\u3081\u8fbc\u307f\n        pos_x = self.pos_embedding(pos_id)\n\n        x = x + pos_x\n        # \u554f\u984c\u306e\u7cfb\u5217\u3082\u57cb\u3081\u8fbc\u307f\n        e = self.e_embedding(question_ids)\n\n        x = x.permute(1, 0, 2) # x: [bs, s_len, embed] => [s_len, bs, embed]\n        e = e.permute(1, 0, 2)\n        # \u672a\u6765\u60c5\u5831\u3092\u96a0\u3059\u30de\u30b9\u30af\n        att_mask = future_mask(x.size(0)).to(device)\n        att_output, att_weight = self.multi_att(e, x, x, attn_mask=att_mask)\n        att_output = self.layer_normal(att_output + e)\n        att_output = att_output.permute(1, 0, 2) # att_output: [s_len, bs, embed] => [bs, s_len, embed]\n\n        x = self.ffn(att_output)\n        x = self.layer_normal(x + att_output)\n        x = self.pred(x)\n\n        return x.squeeze(-1)","4f2168cd":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nmodel = SAKT(n_questions, max_seq=MAX_SEQ, embed_dim=EMBED_DIM, num_heads=NUM_HEADS, dropout_rate=DROPOUT_RATE)\noptimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE)\ncriterion = nn.BCEWithLogitsLoss()\nscheduler = torch.optim.lr_scheduler.OneCycleLR(\n    optimizer, max_lr=MAX_LEARNING_RATE, steps_per_epoch=len(train_dataloader), epochs=EPOCHS\n)\n\nmodel.to(device)\ncriterion.to(device)","e17ef06d":"best_auc = 0\nearly_stop = 3\nstep = 0\nfor epoch in range(EPOCHS):\n    loss, acc, auc = train_fn(model, train_dataloader, optimizer, scheduler, criterion, device)\n    print(f\"[train] epoch: {epoch+1}\/{EPOCHS}, loss: {loss:.3f}, acc: {acc:.3f}, auc: {auc:.3f}\")\n    loss, acc, auc = valid_fn(model, valid_dataloader, criterion, device)\n    print(f\"[valid] epoch: {epoch+1}\/{EPOCHS}, loss: {loss:.3f}, acc: {acc:.3f}, auc: {auc:.3f}\")\n    if auc > best_auc:\n        best_auc = auc\n        step = 0\n        torch.save(model.state_dict(), \"sakt_model.pt\")\n    else:\n        step += 1\n        if step >= early_stop:\n            break","74ef6351":"- \u4eca\u56de\u306f[nn.MultiheadAttention](https:\/\/pytorch.org\/docs\/stable\/generated\/torch.nn.MultiheadAttention.html)\u3092\u4f7f\u3063\u3066\u4ed6\u306f\u3059\u3079\u3066\u81ea\u5206\u3067\u66f8\u3044\u305f\n- Attention\u304b\u3089Feed Forward Network\u307e\u3067\u306e\u4e00\u9023\u306e\u5185\u5bb9\u3092\u30b5\u30dc\u308a\u305f\u3051\u308c\u3070[nn.Transformer](https:\/\/pytorch.org\/docs\/stable\/generated\/torch.nn.Transformer.html)\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3046\u65b9\u6cd5\u3082\u3042\u308b\n    - [\u5b9f\u88c5\u3092\u78ba\u8a8d](https:\/\/pytorch.org\/docs\/stable\/_modules\/torch\/nn\/modules\/transformer.html#Transformer)\u3059\u308b\u3068\u3001Attention, FFN, \u6b63\u898f\u5316\u307e\u3067\u3084\u3063\u3066\u3044\u308b\u3088\u3046\u3060\n    - \u3053\u308c\u3092\u4f7f\u3048\u3070\u3001\u81ea\u5206\u3067\u66f8\u304f\u3079\u304d\u7b87\u6240\u306fEmbedding\u3068\u6700\u5f8c\u306e\u7dda\u5f62\u5909\u63db\u3060\u3051\u306b\u306a\u308b\n- Attention\u306e\u5b9f\u88c5\u304c\u6c17\u306b\u306a\u308b\u5834\u5408\u306f[\u3053\u3061\u3089](https:\/\/github.com\/jadore801120\/attention-is-all-you-need-pytorch\/tree\/132907dd272e2cc92e3c10e6c4e783a87ff8893d)\u306e\u5b9f\u88c5\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3068\u611f\u3058\u305f\n    - \u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3042\u308bnn.MultiheadAttention\u306e\u5b9f\u88c5\u3067\u306f\u306a\u304f\u3001\u72ec\u81ea\u3067MultiHeadAttention\u3092\u66f8\u3044\u3066\u3044\u308b","5e1cda4d":"- `FNN`\u3068`future_mask`\u306f\u3001\u666e\u901a\u306eTransformer\u306e\u65b9\u3067\u5b9a\u7fa9\u3057\u305f\u3082\u306e\u3092\u4f7f\u3063\u3066\u307e\u3059","7ee1f961":"#### \u5b66\u7fd2\n\u5b66\u7fd2\u306e\u30eb\u30fc\u30d7\u306f\u666e\u901a\u306eTransformer\u306e\u65b9\u306e\u95a2\u6570\u3068\u540c\u3058\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002","0051e736":"#### \u6700\u9069\u5316\u6cd5\u3068\u640d\u5931\u306e\u8a2d\u5b9a","e4befc4d":"### SAKT model\n- [A Self-Attentive model for Knowledge Tracing](https:\/\/arxiv.org\/pdf\/1907.06837.pdf)\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u3089\u3057\u3044\n- Encoder\/Decoder\u30e2\u30c7\u30eb\u3067\u306f\u306a\u304f, \u300c\u554f\u984cID\u3068\u6b63\u89e3\u4e0d\u6b63\u89e3\u306e\u7cfb\u5217\u3092\u30da\u30a2\u300d\u3068\u300c\u554f\u984cID\u300d\u3092Attention\u3059\u308b\u30e2\u30c7\u30eb\n\n![](https:\/\/camo.qiitausercontent.com\/a99c49a8181f70ef45f8241a70e42245eec3197b\/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3239343636312f33383134376631352d663164352d663061652d333139372d6531613966616266373836632e706e67)","a2d9ef6e":"#### \u5b66\u7fd2\u3068\u8a55\u4fa1\u306e\u30eb\u30fc\u30d7","6573990a":"#### \u6700\u9069\u5316\u6cd5\u3068\u640d\u5931\u306e\u8a2d\u5b9a","ea1253a5":"# Transformer\u7406\u89e3\u306e\u305f\u3081\u306enotebook\ntransformer\u3092\u521d\u3081\u3066\u52d5\u304b\u3057\u3066\u7406\u89e3\u3057\u305f\u3044\u3068\u3044\u3046\u65b9\u5411\u3051\u306enotebook\u306a\u306e\u3067\u3001\u7cbe\u5ea6\u306f\u8ffd\u6c42\u3057\u307e\u305b\u3093\u3002\n\n\u7cbe\u5ea6\u306e\u9ad8\u3044notebook\u306f, \u516c\u958b\u3055\u308c\u3066\u3044\u308bnotebook\u3092transformer\u3067\u691c\u7d22\u3059\u308c\u3070\u898b\u3064\u304b\u308b\u306f\u305a\u3067\u3059\u3002 \n\nTransformer\u306e\u8aac\u660e\u306f[\u56f3\u3067\u7406\u89e3\u3059\u308bTransformer](https:\/\/qiita.com\/birdwatcher\/items\/b3e4428f63f708db37b7)\u3067\u8aac\u660e\u3057\u3066\u307e\u3059\u3002\nPyTorch\u306e\u5165\u9580\u306f[\u3053\u3061\u3089](https:\/\/qiita.com\/birdwatcher\/items\/e8ab9f6bba558759c106)\n\n\u53c2\u8003\u306b\u3057\u305fNotebook\uff1a\n- https:\/\/www.kaggle.com\/konumaru\/saint-with-pytorch-transformer-module\n- https:\/\/www.kaggle.com\/manikanthr5\/riiid-sakt-model-training-public","325f934b":"## \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f","fc3fa6ff":"#### \u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\n\u4f5c\u308b\u30e2\u30c7\u30eb\u306b\u5408\u3063\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5f62\u5f0f\u306b\u3059\u308b","20af6239":"#### Transformer","49701ee2":"#### SAKT","54a3f4e0":"## \u30e2\u30c7\u30eb\u4f5c\u6210","73cc33fe":"#### \u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\n\u4f5c\u308b\u30e2\u30c7\u30eb\u306b\u5408\u3063\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5f62\u5f0f\u306b\u3059\u308b","12943b12":"### \u30c7\u30fc\u30bf\u6982\u8981\n- \u554f\u984c\u306b\u6b63\u89e3\u3057\u305f\u304b\u3069\u3046\u304b answerd_correctly $\\in \\{0,1\\}$ \u3092\u4e88\u6e2c\u3059\u308b\u30bf\u30b9\u30af\n- content_id: \u554f\u984c\u306eID\/\u8b1b\u7fa9\u306eID\n- content_type_id: \u554f\u984c=0, \u8b1b\u7fa9=1","be3ee4e6":"### \u666e\u901a\u306eTransfomer\n- \u3044\u3088\u3044\u3088\u672c\u984c\n- \u307e\u305a\u306f\u666e\u901a\u306b\u601d\u3044\u3064\u304d\u305d\u3046\u306aTransformer\u304b\u3089\n\n![](https:\/\/camo.qiitausercontent.com\/4d79e3addad65aa484d0cf9625de272187dc3b39\/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3239343636312f32373266663064382d353537352d333462372d366339372d3138363131386631343935382e706e67)"}}