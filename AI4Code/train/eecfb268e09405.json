{"cell_type":{"35194024":"code","ed22a0a3":"code","9f4aaff2":"code","139fa05d":"code","ed32b02a":"code","3ceeec9f":"code","255d5462":"code","8a59ba44":"code","bdb54220":"code","82629338":"code","1a56398a":"code","48b0bbb0":"code","176a6cd6":"code","28c3d016":"code","71636b23":"code","5d4d754b":"code","a65cb5a0":"code","e4dd9323":"code","fc1c87ba":"code","4927d29e":"code","2a7522d8":"code","f33e1043":"code","3416ebe2":"code","dd6be99b":"code","1fe507aa":"code","e3b4339f":"code","5e6e5163":"code","bb552284":"code","16ddc1c8":"code","f960f776":"code","8bff2b53":"code","3fc0bc28":"code","3e84481b":"code","8f4a1bd7":"code","c5e6903c":"code","23b4f06b":"code","edf60143":"code","da30c93a":"code","b24f0904":"code","c7b73807":"code","4a8109ed":"code","15d14c8a":"code","92794d6a":"code","028b60bb":"code","a860833b":"code","0da0f1dd":"code","a4b64cac":"code","bfc4bc81":"code","651b0e47":"code","807ebde2":"code","0fa6a8ee":"code","35e7b2b9":"code","687463d9":"code","929c9fad":"code","67a027e1":"code","4514f6af":"code","7728cf2d":"code","490b4aaf":"code","d8337d46":"code","3d6ac869":"code","3dc7ee10":"code","5a3cd2fe":"code","f99ea9e5":"code","2a7d5b58":"code","a04ac8c3":"code","b74f73a3":"code","48cd2724":"code","60370f86":"code","88f91202":"code","80f382cf":"code","05ac5388":"code","42c85037":"code","6ac82e12":"code","7e77f487":"code","4890ec51":"code","a735e0e2":"code","74090492":"code","cf8a987f":"code","b805d035":"code","6ae67b38":"code","372df91a":"code","632841f1":"code","e04a2d5d":"code","07c63a8f":"code","e93b5fbe":"code","484d6233":"code","3c95d914":"code","ce2c7ccb":"code","e3008748":"code","ad5e2063":"markdown","2d7b9ce9":"markdown","8cf6bf06":"markdown","cad5e993":"markdown","6271c9d4":"markdown","ddf4d0ae":"markdown","ab6dfe0c":"markdown","1d19a36e":"markdown","c8f8f9fb":"markdown","c2c21d82":"markdown","54076edb":"markdown","a5548946":"markdown","eb3240d5":"markdown"},"source":{"35194024":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ed22a0a3":"#We import the packages that we need to complete the data analysis \nimport numpy as np # linear algebra\nimport pandas as pd# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","9f4aaff2":"df1=pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/train_SJC.csv\")\n#Read the file ","139fa05d":"df1.head() #Displays the first 5 rows of the dataset ","ed32b02a":"df1.shape # Gives the number of rows and columns in the dataset ","3ceeec9f":"df1.columns #To see the column names ","255d5462":"#Since the dataset does not contain meaningful names, we replace them with convenience\ndf1=df1.rename(columns={'Unnamed: 0':'ClaimNumber','Unnamed: 1': 'DateTimeOfAccident',\n                        'DateReported':'Date_Reported','Unnamed: 3':'Age','Unnamed: 4': 'Gender',\n                        'Unnamed: 5' : 'Marital_Status', 'Unnamed: 6' :'Dependent_Children',\n                        'DependentsOther' : 'Dependent_Person','Unnamed: 8' : 'WeeklyWages','Unnamed: 9': 'PartTimeFullTime',\n                        'Unnamed: 10' : 'HoursWorkedPerWeek','DaysWorkedPerWeek':'DaysWorkedPerWeek',\n                        'Unnamed: 12':'ClaimDescription','Unnamed: 13':'InitialIncurredCalimsCost','Unnamed: 14':'UltimateIncurredClaimCost' })","8a59ba44":"df1.columns #We can see, that the data coulmns have been transformed ","bdb54220":"df1=df1.drop(df1.index[0]) #We drop row [0] because it is not providing us any useful insight \ndf1.head() #Display the dataset ","82629338":"df1.info() #Provides information about the columns and its respective data types","1a56398a":"df1['DateTimeOfAccident'] # To check the format, it is of object data type and yy-mm-dd and hh format","48b0bbb0":"#df['Date']=pd.to_datetime(df['Date'])\ndf1['DateTimeOfAccident']=pd.to_datetime(df1['DateTimeOfAccident'])\ndf1['Date_Reported']=pd.to_datetime(df1['Date_Reported'])","176a6cd6":"df1['Date_Reported']","28c3d016":"df1.isnull().sum() #To find out if the dataframe has any null values \\","71636b23":"df1.describe() ","5d4d754b":"df1['Marital_Status'].value_counts() #Checking for the values in Marital_Status","a65cb5a0":"df1['Marital_Status']=df1['Marital_Status'].fillna(value=\"S\")  #Imputing it with the mode value S\ndf1.isnull().sum()","e4dd9323":"#df1['WeeklyWages']\ndf1['HoursWorkedPerWeek'] # the values in the columns are numerical hence we will convert it to the appropriate datatype and impute the same ","fc1c87ba":"df1=df1.astype({\"WeeklyWages\": float}) #Changing the datatype of WeeklyWages to float \ndf1['WeeklyWages']","4927d29e":"df1=df1.astype({\"HoursWorkedPerWeek\": float})\ndf1['HoursWorkedPerWeek']","2a7522d8":"df1['WeeklyWages'] = df1['WeeklyWages'].fillna(df1['WeeklyWages'].mean()) #Imputation for WeeklyWages with mean \ndf1.isnull().sum()","f33e1043":"df1['HoursWorkedPerWeek'] = df1['HoursWorkedPerWeek'].fillna(df1['HoursWorkedPerWeek'].mean()) #Imputation for HoursWorkedOerWeek \ndf1.isnull().sum()","3416ebe2":"#Let us now inspect columns and see if we can bin the columns for easier utilization\n# Age is supposed to be numerical so we convert it \ndf1.info()","dd6be99b":"df1['ClaimNumber']","1fe507aa":"df1.head()","e3b4339f":"df1['Age'].max # Age is a numerical data hence we need to convert it to float from object so that we can perform mathematical operations on it","5e6e5163":"df1=df1.astype({\"Age\": float})\ndf1['Age']","bb552284":"#Since it is coverted to float we can now find out the values \ndf1['Age'].describe()\n#From the table below we can see that max and min age is (79,13) respectively.\n#Now we can bin the age columns,\n","16ddc1c8":"#Rating_bin = pd.cut(df['Rating'],bins=[3,5,9,10], labels=['Bad','Good','Excellent'])\ndf1['Age_bin'] =pd.cut(df1['Age'],bins=[10,25,40,65,80],labels=['Teen','Adults','MiddleAge','Old'])","f960f776":"df1['Age_bin']","8bff2b53":"df1.info()","3fc0bc28":"df1['HoursWorkedPerWeek'].describe()","3e84481b":"#Let us analyse the number of female and male \n# We have three categories.. Male, female and Unidentified.\ndf1['Gender'].value_counts()","8f4a1bd7":"plt.figure(figsize=(15,10))\ndf1['Gender'].value_counts().plot.bar()\nplt.title(\"Gender count\")\n#(df['Date_time']).dt.hour).value_counts().plot.bar()","c5e6903c":"plt.figure(figsize=(15,10))\ndf1['Age_bin'].value_counts().plot.bar()\nplt.title(\"Age-Distribution count\")\nplt.show()","23b4f06b":"plt.figure(figsize=(15,10))\nsns.countplot(data=df1,x=\"Gender\",hue=\"Age_bin\")","edf60143":"plt.figure(figsize=(15,10))\nsns.countplot(data=df1,x=\"Gender\",hue=\"PartTimeFullTime\")","da30c93a":"df1.plot.box(figsize=(15,6))\n#Outlier Analysis ","b24f0904":"df1['WeeklyWages'].describe() #min 1, max 7479 # WE bin the data ","c7b73807":"#df1['Age_bin'] =pd.cut(df1['Age'],bins=[10,25,40,65,80],labels=['Teen','Adults','MiddleAge','Old'])\n\ndf1['WeeklyWages'] =pd.cut(df1['WeeklyWages'],bins=[0,2000,4000,6000,8000],labels=['Low','Average','Above Average','High'])\ndf1['WeeklyWages']","4a8109ed":"plt.figure(figsize=(12,10))\nsns.barplot(x='WeeklyWages',y='Age',data=df1)\nplt.show()","15d14c8a":"df1.plot.box(figsize=(15,6))","92794d6a":"df1['HoursWorkedPerWeek'].describe() #Min = 0, max =640 ","028b60bb":"df1['HoursWorkedPerWeek'] = pd.cut(df1['HoursWorkedPerWeek'],bins=[0,200,400,600,800],labels=['Low','Average','AboveAverage','High'])","a860833b":"label = {'Low':1, 'Average':2, 'AboveAverage': 3, 'HoursWorkedPerWeek': 4}\ndf1['HoursWorkedPerWeek'] = df1['HoursWorkedPerWeek'].map(label)","0da0f1dd":"df1.describe()","a4b64cac":"df1.info()","bfc4bc81":"df1.columns","651b0e47":"#We also need to convert InitialCalimsCOst Ultimate Incurred cost to Float Since there are numerical values\ndf1=df1.astype({\"InitialIncurredCalimsCost\": float})\ndf1['InitialIncurredCalimsCost']","807ebde2":"df1=df1.astype({\"UltimateIncurredClaimCost\": float})\ndf1['UltimateIncurredClaimCost']","0fa6a8ee":"plt.figure(figsize=(12,10))\nsns.barplot(x='Age_bin',y='UltimateIncurredClaimCost',hue=\"Gender\",data=df1)\nplt.show()","35e7b2b9":"plt.figure(figsize=(12,10))\nsns.catplot(data=df1,x=\"Gender\",row=\"Marital_Status\",hue=\"Age_bin\",kind=\"count\")","687463d9":"plt.figure(figsize=(15,10))\nsns.barplot(x = 'Gender',y='UltimateIncurredClaimCost',data=df1)","929c9fad":"plt.figure(figsize=(15,10))\nsns.barplot(x='Age_bin',y='UltimateIncurredClaimCost',data=df1)\nplt.show()","67a027e1":"plt.figure(figsize=(15,10))\nsns.barplot(x='DaysWorkedPerWeek',y='UltimateIncurredClaimCost',data=df1)\nplt.show()","4514f6af":"plt.figure(figsize=(15,10))\nsns.barplot(x='HoursWorkedPerWeek',y='UltimateIncurredClaimCost',data=df1)\nplt.show()","7728cf2d":"df1.dtypes","490b4aaf":"import sklearn.preprocessing as pre\nimport sklearn.model_selection as ms","d8337d46":"le = pre.LabelEncoder()\n\ndf1['Gender'] = le.fit_transform(df1['Gender'])\ndf1['Marital_Status'] = le.fit_transform(df1['Marital_Status'])                            \ndf1['PartTimeFullTime']=le.fit_transform(df1['PartTimeFullTime']) \ndf1['Age_bin']=le.fit_transform(df1['Age_bin'])\ndf1['WeeklyWages']=le.fit_transform(df1['WeeklyWages'])\ndf1['HoursWorkedPerWeek']=le.fit_transform(df1['HoursWorkedPerWeek'])\ndf1['Dependent_Children']=le.fit_transform(df1['Dependent_Children'])","3d6ac869":"cols = ['Age', 'Gender','Marital_Status', 'Dependent_Children', 'Dependent_Person',\n       'WeeklyWages', 'PartTimeFullTime', 'HoursWorkedPerWeek',\n       'DaysWorkedPerWeek', 'InitialIncurredCalimsCost',\n       'UltimateIncurredClaimCost', 'Age_bin']","3dc7ee10":"df1[cols].dtypes.value_counts()","5a3cd2fe":"x_val=pre.minmax_scale(df1[cols].drop(['UltimateIncurredClaimCost'], axis=1),axis=1)\ny = df1['UltimateIncurredClaimCost'] ","f99ea9e5":"import sklearn.linear_model as lm\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error","2a7d5b58":"x_train,x_test,y_train,y_test=ms.train_test_split(x_val,y,test_size=0.3,random_state=1234456)","a04ac8c3":"glm=lm.LinearRegression()\nglm.fit(x_train,y_train)\nglm.score(x_test,y_test)","b74f73a3":"y_pred = glm.predict(x_test)\n\nr2 = r2_score(y_test, y_pred)\nr2","48cd2724":"print('root_mean_squared error of is==',np.sqrt(mean_squared_error(y_test,y_pred)))","60370f86":"from sklearn.ensemble import RandomForestRegressor","88f91202":"Random = RandomForestRegressor(n_estimators = 40, max_depth = 4, n_jobs = -1)\nRandom.fit(x_train,y_train)\nRandom.score(x_train,y_train)","80f382cf":"#KNN\nimport sklearn.neighbors as NN","05ac5388":"KNN=NN.KNeighborsRegressor(n_neighbors=5,metric='minkowski')\nKNN.fit(x_train,y_train)\nKNN.score(x_test,y_test)","42c85037":"KNN.score(x_train,y_train)","6ac82e12":"df2=pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv\")","7e77f487":"df2.info()","4890ec51":"df2.head()","a735e0e2":"df2['DateTimeOfAccident']=pd.to_datetime(df2['DateTimeOfAccident'])\ndf2['DateReported']=pd.to_datetime(df2['DateReported'])","74090492":"df2.isnull().sum()","cf8a987f":"df2['MaritalStatus'].mode()\ndf2['MaritalStatus']=df2['MaritalStatus'].fillna(value=\"U\") \ndf2.isnull().sum()","b805d035":"df2['Age_bin'] =pd.cut(df2['Age'],bins=[10,25,40,65,80],labels=[1,2,3,4])","6ae67b38":"df2['Age_bin']","372df91a":"df2.dtypes","632841f1":"le=pre.LabelEncoder()\ndf2['Gender'] = le.fit_transform(df2['Gender'])\ndf2['MaritalStatus'] = le.fit_transform(df2['MaritalStatus'])                                      \ndf2['PartTimeFullTime']=le.fit_transform(df2['PartTimeFullTime'])\ndf2['Age_bin']=le.fit_transform(df2['Age_bin'])\ndf2=df2.astype({\"Age\": int})\ndf2=df2.astype({\"DaysWorkedPerWeek\":int})\ndf2=df2.astype({\"InitialIncurredCalimsCost\":int})\ndf2=df2.astype({\"DependentsOther\":int})\ndf2.dtypes.value_counts()","e04a2d5d":"df2=df2.rename(columns={'MaritalStatus':'Marital_Status',\n                        'DependentChildren': 'Dependent_Children',\n                        'DependentsOther':'Dependent_Person'})","07c63a8f":"cols2 = ['Age', 'Gender','Marital_Status', 'Dependent_Children', 'Dependent_Person',\n         'WeeklyWages', 'PartTimeFullTime', 'HoursWorkedPerWeek',\n         'DaysWorkedPerWeek', 'InitialIncurredCalimsCost','Age_bin']","e93b5fbe":"x_val2=pre.minmax_scale(df2[cols2],axis=1)","484d6233":"submission = pd.read_csv('\/kaggle\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv')","3c95d914":"# to Submit a file\ny_pred = glm.predict(x_val2)\nsubmission['UltimateIncurredClaimCost'] = y_pred\nsubmission.to_csv(\"submission_3.csv\",index=False)","ce2c7ccb":"\n# to Submit a file for KNN\n#y_pred = KNN.predict(x_val2)\n#submission['UltimateIncurredClaimCost'] = y_pred\n#submission.to_csv(\"submission_2.csv\",index=False)","e3008748":"#to submit a file for random Forest \ny_pred = Random.predict(x_val2)\nsubmission['UltimateIncurredClaimCost'] = y_pred\nsubmission.to_csv(\"submission_1.csv\",index=False)","ad5e2063":"**Model Selection \/ Feature selection**","2d7b9ce9":"**Loading the data to df1 Dataframe**","8cf6bf06":"**Hackathon : 20BDA42**\n\nWe follow certain rules and procedures to finish the task\n\n1. Data Preprocessing Data Cleaning Data Transformation Data Integration\n\n2. Exploratory Data Analysis\n\n3. Data Noramlization\n\n4. Model Selection \/ Model Performance","cad5e993":"**Data Pre-Processing**","6271c9d4":"**Min Max Scaling**","ddf4d0ae":"### EDA","ab6dfe0c":"**Importing the Packages needed for Data Analysis**","1d19a36e":"### Modeling","c8f8f9fb":"Submitted the code for Linear Regression as the RMSE value is lesser compared to the other two models.","c2c21d82":"**KNN - Regression**","54076edb":"### Test Data","a5548946":"**Linear Regression**","eb3240d5":"**RandomForest**"}}