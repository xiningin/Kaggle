{"cell_type":{"df056af5":"code","dc5c6c43":"code","0dfba748":"code","1aa16060":"code","b61845e5":"code","6cc46dee":"code","27c8104f":"code","c41a29b5":"code","1a2d61a4":"code","ed583bdb":"code","1e962d53":"code","673fd566":"code","05fd0115":"code","14d42b40":"code","68ffd4fd":"code","7aa8a85c":"code","780fd446":"code","f50cd6e0":"code","82f8f599":"code","4b76fbcc":"code","52e92f68":"code","045bc31c":"markdown"},"source":{"df056af5":"import tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","dc5c6c43":"print(tf.__version__)","0dfba748":"tf.random.set_seed(89)","1aa16060":"ds=pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")","b61845e5":"ds.shape","6cc46dee":"ds.head()","27c8104f":"X=ds.iloc[:,1:].values\ny=ds.iloc[:,0].values","c41a29b5":"#normalizing the data\nX_scaled=X\/255.","1a2d61a4":"def Network():\n    model=tf.keras.models.Sequential()\n    model.add(tf.keras.Input(shape=(784)))\n    model.add(tf.keras.layers.Dense(256,activation=\"relu\"))\n    model.add(tf.keras.layers.BatchNormalization())\n    model.add(tf.keras.layers.Dropout(0.2))\n    model.add(tf.keras.layers.Dense(128,activation=\"relu\"))\n    model.add(tf.keras.layers.BatchNormalization())\n    model.add(tf.keras.layers.Dropout(0.4))\n    model.add(tf.keras.layers.Dense(10,activation=\"softmax\"))\n    \n    return model\nmodel=Network()","ed583bdb":"model.summary()","1e962d53":"from keras import optimizers\noptim = optimizers.Adam(lr = 0.0005)\nmodel.compile(loss = 'SparseCategoricalCrossentropy', optimizer = optim, metrics = ['accuracy'])","673fd566":"# defining scheduler\ndef scheduler(epoch, lr):\n      if epoch < 10:\n        return lr\n      else:\n        return lr * tf.math.exp(-0.1)","05fd0115":"# Bundling all types of callbacks\nmy_callbacks=([\n    tf.keras.callbacks.LearningRateScheduler(scheduler),\n    tf.keras.callbacks.EarlyStopping(monitor=\"val_loss\",patience=2),\n    tf.keras.callbacks.ReduceLROnPlateau(monitor=\"val_loss\",factor=0.05,patience=1)\n    \n    ])","14d42b40":"# Training\ntrainer = model.fit(X_scaled, y,validation_split=0.3, epochs = 50, batch_size = 32, verbose = 1,callbacks=my_callbacks)","68ffd4fd":"# Plot loss per iteration\nplt.plot(trainer.history['loss'], label='loss')\nplt.plot(trainer.history['val_loss'], label='val_loss')\nplt.legend()","7aa8a85c":"# Plot accuracy per iteration\nplt.plot(trainer.history['accuracy'], label='acc')\nplt.plot(trainer.history['val_accuracy'], label='val_acc')\nplt.legend()","780fd446":"test=pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","f50cd6e0":"test=test.iloc[:,:].values","82f8f599":"test_scaled=test\/255.","4b76fbcc":"pred = model.predict_classes(test_scaled)","52e92f68":"# create submission file\nfinal_submission = pd.DataFrame({'ImageId': np.array(range(1,28001)), 'Label': pred})\nfinal_submission.to_csv(\"submission.csv\", index=False)","045bc31c":"### Just the 1st part\n### Next, needed to ensemble different models"}}