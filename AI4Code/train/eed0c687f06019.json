{"cell_type":{"9b1eb6c2":"code","57b75d19":"code","3823de8c":"code","6f3e97cf":"code","42415a85":"code","b8266598":"code","e94e971a":"code","80880ea1":"code","5472c2b8":"code","118fa60c":"markdown","957c3486":"markdown","9902c6ca":"markdown","87a6fc33":"markdown","6923f54c":"markdown","5d558a05":"markdown"},"source":{"9b1eb6c2":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression","57b75d19":"data = pd.read_csv('..\/input\/data-for-investing-type-prediction\/investing_program_prediction_data.csv')","3823de8c":"data","6f3e97cf":"data.info()","42415a85":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Remove non-numeric characters in PE features\n    for column in ['PE' + str(i) for i in range(1, 16)]:\n        df[column] = df[column].apply(lambda x: x[1]).astype(np.int)\n    \n    # One-hot encode the SE2 column\n    geo_dummies = pd.get_dummies(df['SE2'])\n    df = pd.concat([df, geo_dummies], axis=1)\n    df = df.drop('SE2', axis=1)\n    \n    # Engineer age features\n    df['Child'] = df['SE1'].apply(lambda x: 1 if x < 18 else 0)\n    df['Senior'] = df['SE1'].apply(lambda x: 1 if x >= 65 else 0)\n    \n    # Engineer activity features\n    for column in ['BA' + str(i) for i in range(1, 8)]:\n        df['Low_' + column] = df[column].apply(lambda x: 1 if x <= df[column].quantile(0.25) else 0)\n    \n    # Split df into X and y\n    y = df['InvType']\n    X = df.drop('InvType', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X with a standard scaler\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), columns=X.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), columns=X.columns)\n    \n    return X_train, X_test, y_train, y_test","b8266598":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","e94e971a":"X_train","80880ea1":"y_train","5472c2b8":"model = LogisticRegression()\nmodel.fit(X_train, y_train)\n\nacc = model.score(X_test, y_test)\nprint(\"Test Accuracy: {:.2f}%\".format(acc * 100))","118fa60c":"With no feature engineering:  \n67.98%  \n  \nWith age features:  \n69.67%  \n  \nWith age and activity features:  \n71.15%","957c3486":"# Preprocessing","9902c6ca":"# Task for Today  \n\n***\n\n## Investment Bank Program Type Prediction  \n\nGiven *data about investment bank program transactions*, let's try to predict the **type** of a given program.  \n  \nWe will use a logistic regression model to make our predictions.","87a6fc33":"# Getting Started","6923f54c":"# Training","5d558a05":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/vBhGvRAqBQ0"}}