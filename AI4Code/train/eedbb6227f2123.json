{"cell_type":{"e0f0fc77":"code","4aa1a637":"code","df68b60f":"code","468d28e2":"code","a9f909a8":"code","f2561ef8":"code","17b11dc5":"code","9dea90a1":"code","697b7d44":"code","f0cef490":"code","9fa13f59":"code","250e90e5":"code","ad5d6129":"code","7aee109f":"code","df7b61b4":"code","03008338":"code","23e10a87":"code","6435af93":"code","41b09233":"code","2ed32401":"code","7687b67e":"code","8d87d98a":"code","1d837266":"code","e5e4d8f4":"code","0648c401":"code","77104a8e":"code","b4cc5c2b":"code","75c79541":"code","edad199e":"code","c6cec62a":"code","79c61b27":"code","32ab546a":"code","b4aa26aa":"code","29e122ec":"code","fe31ce58":"code","dce5db30":"code","bf551c67":"code","8d9ce65d":"code","8231e00a":"code","f92a419b":"code","bbb7e694":"code","f7c2bf51":"code","01af2f90":"code","3e01cada":"code","a1579fb9":"code","ae3c5bb1":"code","e41248be":"code","bdaf769c":"code","b7ccbeb8":"code","50ed3488":"code","5a868e67":"code","e3d5f626":"code","ec92ab50":"code","c3829c7b":"code","3264a5b7":"code","07714324":"code","3b0e1b5c":"code","95a38091":"code","008c19f5":"code","7223f2d8":"code","38104778":"code","07e8ebcc":"code","839608ed":"code","1d4013f8":"code","d6fdecdd":"code","7a5c9073":"code","7aebe337":"code","9f5370c9":"code","34aa1e6e":"markdown","68da384e":"markdown","c43dd796":"markdown","271cc682":"markdown","b99359ff":"markdown","20f5c1cc":"markdown","cd9ecfa8":"markdown","4c7c68be":"markdown","79d36cf0":"markdown","a954a68e":"markdown","d92da031":"markdown","1349bbfc":"markdown","a3f67a27":"markdown","04c69958":"markdown","27d31b6e":"markdown","dfed74fa":"markdown","3b0ca52d":"markdown","1efc5cb3":"markdown","cc682b60":"markdown","f185c2b4":"markdown","0823c255":"markdown","626aa1aa":"markdown","217bc811":"markdown","68495a91":"markdown","762e639d":"markdown","9f100ec7":"markdown","23ac9c0f":"markdown","406f3092":"markdown","839191ec":"markdown","864602d0":"markdown","a9a99952":"markdown","8eefbd6c":"markdown","54e73d30":"markdown","9fd9f9fc":"markdown","86e613f3":"markdown","7b8b6058":"markdown","386113ff":"markdown","a6dce13e":"markdown","7253dc59":"markdown","cad947d3":"markdown","e579d165":"markdown","98ebf149":"markdown","a5b9785a":"markdown","472ae245":"markdown","8f7e6a2f":"markdown","a4956d17":"markdown","c729007d":"markdown","e168b9eb":"markdown","f7476c36":"markdown","3108c614":"markdown","8d32064a":"markdown","f7dc937c":"markdown","4c9dc11c":"markdown","f6c040a4":"markdown","c4c7c572":"markdown","c689a943":"markdown","2f9f77f7":"markdown","c69863e6":"markdown","f07a4073":"markdown","9402cb74":"markdown","5457ec73":"markdown","d1c1348d":"markdown","2e9b70f7":"markdown","ed635501":"markdown","874609b8":"markdown","bc31e82b":"markdown","7244d8c5":"markdown","e1d15356":"markdown","3bfe56d5":"markdown","ddfeee53":"markdown","25b597f5":"markdown","a713cb19":"markdown","889a230b":"markdown","dff41271":"markdown","5a4f007a":"markdown","04e753c7":"markdown"},"source":{"e0f0fc77":"import pandas as pd\nimport numpy as np\n\narr = np.array([10,20,30,40,50])\n\ns = pd.Series(arr)\n\nprint(s)","4aa1a637":"s = pd.Series(np.random.randn(5), index=['a', 'b', 'c', 'd', 'e'])\nprint(s)","df68b60f":"print(s.index)","468d28e2":"import pandas as pd\n\ndata = {'a':10, 'b':20, 'c':30}\ns = pd.Series(data)\nprint(s)","a9f909a8":"import pandas\ndict = {'a': 0., 'b': 1., 'c': 2.}\nprint(dict)\n\ns = pandas.Series(dict, index=['b', 'c', 'd', 'a'])\nprint(s)","f2561ef8":"s= pd.Series(5., index=['a', 'b', 'c', 'd', 'e'])\nprint(s)","17b11dc5":"import pandas as pd\nimport numpy as np\n\narr = ([10,20,30,40,50])\ns = pd.Series(arr)\n\nprint(s)\n\n# slicing or slice of index\n\nprint(s[1])\nprint(s[0:5])\nprint(s[::-1]) #Reverse the series\nprint([[2,4,5]])","9dea90a1":"import pandas as pd\n\ndata = {'a':10, 'b':20, 'c':30}\ns = pd.Series(data)\nprint(s)\n\nprint(s['a']) #Accessing index value assign key \n","697b7d44":"print (s + s) #Addition of two series\n\nprint(s*2) #Multiplication of two series\n\nprint(np.exp(s)) #Exponential value \n\n","f0cef490":"s = pd.Series(np.random.randn(5), name='something')\nprint(s)","9fa13f59":"s2 = s.rename(\"different\")\nprint(s2)","250e90e5":"import pandas\n\nlistx = [10, 20, 30, 40, 50]\n\ntable = pandas.DataFrame(listx)\n\nprint (table)","ad5d6129":"import pandas\ndata_list = [{'a':10, 'b':20},{'a':20, 'b':30,'c':40}]\ntable = pandas.DataFrame(data_list, index = ['first','second'])\nprint(table)","7aee109f":"d = {'one': pd.Series([1., 2., 3.], index=['a', 'b', 'c']),'two': pd.Series([1., 2., 3., 4.], index=['a', 'b', 'c', 'd'])}\ndf = pandas.DataFrame(d)\nprint(df)\nprint(\"---------------------------------------\")\n\n# Access Column \n\ndf2 = pd.DataFrame(d, index=['d', 'b', 'a'])\n\nprint(df2)\nprint(\"---------------------------------------\")\n# Access index (Row) and column\n\ndf = pd.DataFrame(d, index=['d', 'b', 'a'], columns=['two', 'three'])\nprint(df)\n\n#Note: The row and column labels can be accessed respectively by accessing the index and columns attributes.","df7b61b4":"import pandas as pd\n\ndata2 = [{'a': 1, 'b': 2}, {'a': 5, 'b': 10, 'c': 20}]\ntable = pd.DataFrame(data2)\nprint(table)","03008338":"import pandas as pd\n\nd = {'one': pd.Series([1, 2, 3], index=['a', 'b', 'c']),\n     'two': pd.Series([1., 2., 3., 4.], index=['a', 'b', 'c', 'd'])}\ntable = pandas.DataFrame(d)\n\n#Adding new column\n\ntable[\"three\"] = pd.Series([1, 2, 3], index = ['a', 'b', 'c'])\n\nprint(table)\n\nprint(\"---------------------------------------------\")\n#Adding new column with boolen values\n\ntable['flag'] = table[\"three\"]>2\n\nprint(table)","23e10a87":"del table['two']\nprint(table)","6435af93":"three = table.pop('three')\n\nprint(three)\n\nprint(table)","41b09233":"table[\"foo\"] = \"bar\"\nprint(table)","2ed32401":"table.loc['a']","7687b67e":"table.iloc[2]","8d87d98a":"print(table)\nprint(\"----------------------------------------\")\nrow = pd.DataFrame([[1,'True'],[3,'False']], columns = ['one','flag'])\ntable1= table.append(row)\nprint(table1)","1d837266":"table1 = table1.drop('d')\nprint(table1)","e5e4d8f4":"df = pd.DataFrame(np.random.randn(10, 4), columns=['A', 'B', 'C', 'D'])\n\ndf2 = pd.DataFrame(np.random.randn(7, 3), columns=['A', 'B', 'C'])\n\nprint(df + df2)","0648c401":"print(df - df.iloc[0])","77104a8e":"print(df[:5].T)","b4cc5c2b":"df = pandas.read_csv(path_to_file)","75c79541":"table.to_csv(path_to_file) # if the specified path doesn't exist, a file of the same is automatically created.","edad199e":"sheet = pandas.read_excel(path_to_file)","c6cec62a":"table.to_excel(path_to_file) # if the specified path doesn't exist, a file of the same is automatically created.","79c61b27":"wp = pd.Panel(np.random.randn(2, 5, 4), items=['Item1', 'Item2'],\n              major_axis=pd.date_range('1\/1\/2000', periods=5),\n              minor_axis=['A', 'B', 'C', 'D'])\nprint(wp)\n\nprint(\"total dimension:\", wp.ndim)","32ab546a":"long_series = pd.Series(np.random.randn(1000))\nprint(long_series.head())","b4aa26aa":"print(long_series.tail(3))","29e122ec":"import pandas as pd\nimport numpy as np\n\ndf = pd.Series(np.arange(1,51))\n\nprint(df.ndim)","fe31ce58":"import pandas as pd\nimport numpy as np\n\ndf = pd.Series(np.arange(1,51))\nprint(df.axes)","dce5db30":"import pandas as pd\nimport numpy as np\n\nd = {'odd':np.arange(1,100,2),\n     'even':np.arange(0,100,2)}\n\nprint(d['odd'])\nprint(d['even'])\n\ndf = pd.DataFrame(d)\n\nprint(df.sum())","bf551c67":"import pandas as pd\nimport numpy as np\n\nd = {'odd':np.arange(1,100,2),\n     'even':np.arange(0,100,2)}\n\nprint(d['odd'])\nprint(d['even'])\n\ndf = pd.DataFrame(d)\n\nprint(df.std())","8d9ce65d":"import pandas as pd\nimport numpy as np\n\nd = {'odd':np.arange(1,100,2),\n     'even':np.arange(0,100,2)}\n\n# print(d['odd'])\n# print(d['even'])\n\ndf = pd.DataFrame(d)\n\nprint(df.describe())","8231e00a":"import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.rand(5,4),\n                 columns = ['col1', 'col2', 'col3', 'col4'])\n\n# print(df)\n\nfor key, value in df.iteritems():\n  print(key, value)","f92a419b":"import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.rand(5,4),\n                 columns = ['col1', 'col2', 'col3', 'col4'])\n\n# print(df)\n\nfor key, value in df.iterrows():\n  print(key, value)","bbb7e694":"import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.rand(5,4),\n                 columns = ['col1', 'col2', 'col3', 'col4'])\n\n# print(df)\n\nfor row in df.itertuples():\n  print(row)","f7c2bf51":"lst = [1, 2, 3, 1, 2, 3]\n\ns = pd.Series([1, 2, 3, 10, 20, 30], lst)\n\nprint(s)\n\ngrouped = s.groupby(level=0)\n\nprint(grouped.first())\nprint(grouped.last())\nprint(grouped.sum())","01af2f90":"import pandas as pd\n\nworld_cup = {'Team':['West Indies','West Indies','India', 'Australia', 'Pakistan', 'Sri Lanka', 'Australia','Australia','Australia', 'India', 'Australia'],\n             'Rank':[7,7,2,1,6,4,1,1,1,2,1],\n             'Year':[1975,1979,1983,1987,1992,1996,1999,2003,2007,2011,2015]}\n\ndf = pd.DataFrame(world_cup)\nprint(df)\n","3e01cada":"import pandas as pd\n\nworld_cup = {'Team':['West Indies','West Indies','India', 'Australia', 'Pakistan', 'Sri Lanka', 'Australia','Australia','Australia', 'India', 'Australia'],\n             'Rank':[7,7,2,1,6,4,1,1,1,2,1],\n             'Year':[1975,1979,1983,1987,1992,1996,1999,2003,2007,2011,2015]}\n\ndf = pd.DataFrame(world_cup)\nprint(df.groupby('Team').groups)","a1579fb9":"import pandas as pd\n\nworld_cup = {'Team':['West Indies','West Indies','India', 'Australia', 'Pakistan', 'Sri Lanka', 'Australia','Australia','Australia', 'India', 'Australia'],\n             'Rank':[7,7,2,1,6,4,1,1,1,2,1],\n             'Year':[1975,1979,1983,1987,1992,1996,1999,2003,2007,2011,2015]}\n\ndf = pd.DataFrame(world_cup)\nprint(df.groupby(['Team','Rank']).groups)","ae3c5bb1":"import pandas as pd\n\nworld_cup = {'Team':['West Indies','West Indies','India', 'Australia', 'Pakistan', 'Sri Lanka', 'Australia','Australia','Australia', 'India', 'Australia'],\n             'Rank':[7,7,2,1,6,4,1,1,1,2,1],\n             'Year':[1975,1979,1983,1987,1992,1996,1999,2003,2007,2011,2015]}\n\ndf = pd.DataFrame(world_cup)\ngrouped = df.groupby('Team')\n\nfor name, group in grouped:\n  print(name)","e41248be":"import pandas as pd\n\nworld_cup = {'Team':['West Indies','West Indies','India', 'Australia', 'Pakistan', 'Sri Lanka', 'Australia','Australia','Australia', 'India', 'Australia'],\n             'Rank':[7,7,2,1,6,4,1,1,1,2,1],\n             'Year':[1975,1979,1983,1987,1992,1996,1999,2003,2007,2011,2015]}\n\ndf = pd.DataFrame(world_cup)\ngropued = df.groupby('Team')\n\nprint(grouped.get_group('India'))","bdaf769c":"import pandas as pd\nimport numpy as np\n\nd = {'odd':np.arange(1,100,2), 'even':np.arange(0,100,2)}\nprint(d['odd'])\nprint(d['even'])\n\ndf = pd.DataFrame(d)\nprint(df.groupby('odd').groups)","b7ccbeb8":"left = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],\n                      'A': ['A0', 'A1', 'A2', 'A3'],\n                      'B': ['B0', 'B1', 'B2', 'B3']})\n   \n\nright = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],\n                       'C': ['C0', 'C1', 'C2', 'C3'],\n                       'D': ['D0', 'D1', 'D2', 'D3']})\n  \nresult = pd.merge(left, right, on='key')\nprint(result)","50ed3488":"import pandas as pd\n\ncampian_stats = {'Team':['India', 'Australia','West Indies', 'Pakistan', 'Sri Lanka'],\n                  'Rank':[2,3,7,8,4],\n                  'World_Champ_Year':[2011,2015,1979,1992,1996],\n                  'Points':[874,787,753,673,855]}\nmatch_stats = {'Team':['India', 'Australia','West Indies', 'Pakistan', 'Sri Lanka'],\n               'World_Cup_Played':[11,10,11,9,8],\n               'ODIs_Played':[733,988,712,679,662]}\n\ndf1 = pd.DataFrame(campian_stats)\ndf2 = pd.DataFrame(match_stats)\n\nprint(df1)\nprint(df2)\n\nprint('-------------------------------------------------------------------------------')\nprint(pd.merge(df1,df2, on = 'Team'))","5a868e67":"left = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],\n                     'key2': ['K0', 'K1', 'K0', 'K1'],\n                      'A': ['A0', 'A1', 'A2', 'A3'],\n                      'B': ['B0', 'B1', 'B2', 'B3']})\n   \n\nright = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],\n                      'key2': ['K0', 'K0', 'K0', 'K0'],\n                       'C': ['C0', 'C1', 'C2', 'C3'],\n                       'D': ['D0', 'D1', 'D2', 'D3']})\n   \nresult = pd.merge(left, right, how='left', on=['key1', 'key2'])\nprint(result)\n","e3d5f626":"import pandas as pd\n\nworld_campians = {'Team':['India', 'Australia','West Indies', 'Pakistan', 'Sri Lanka'],\n                  'Rank':[2,3,7,8,4],\n                  'Year':[2011,2015,1979,1992,1996],\n                  'Points':[874,787,753,673,855]}\nchokers = {'Team':['South Africa','New Zealand', 'Zimbambwe'],\n                  'Rank':[1,5,9],\n                  'Points':[895,764,656]}\n\ndf1 = pd.DataFrame(world_campians)\ndf2 = pd.DataFrame(chokers)\n\nprint(df1)\nprint(df2)\n\nprint('----------------------------------------------------------------')\n\nresult = pd.merge(df1,df2,on='Team',how = 'left')\nprint(result)","ec92ab50":"left = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],\n                     'key2': ['K0', 'K1', 'K0', 'K1'],\n                      'A': ['A0', 'A1', 'A2', 'A3'],\n                      'B': ['B0', 'B1', 'B2', 'B3']})\n   \n\nright = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],\n                      'key2': ['K0', 'K0', 'K0', 'K0'],\n                       'C': ['C0', 'C1', 'C2', 'C3'],\n                       'D': ['D0', 'D1', 'D2', 'D3']})\n   \nresult = pd.merge(left, right, how='right', on=['key1', 'key2'])\nprint(result)","c3829c7b":"import pandas as pd\n\nworld_campians = {'Team':['India', 'Australia','West Indies', 'Pakistan', 'Sri Lanka'],\n                  'Rank':[2,3,7,8,4],\n                  'Year':[2011,2015,1979,1992,1996],\n                  'Points':[874,787,753,673,855]}\nchokers = {'Team':['South Africa','New Zealand', 'Zimbambwe'],\n                  'Rank':[1,5,9],\n                  'Points':[895,764,656]}\n\ndf1 = pd.DataFrame(world_campians)\ndf2 = pd.DataFrame(chokers)\n\nprint(df1)\nprint(df2)\n\nprint('----------------------------------------------------------------')\n\nresult = pd.merge(df1,df2,on='Team',how = 'right')\nprint(result)","3264a5b7":"left = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],\n                     'key2': ['K0', 'K1', 'K0', 'K1'],\n                      'A': ['A0', 'A1', 'A2', 'A3'],\n                      'B': ['B0', 'B1', 'B2', 'B3']})\n   \n\nright = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],\n                      'key2': ['K0', 'K0', 'K0', 'K0'],\n                       'C': ['C0', 'C1', 'C2', 'C3'],\n                       'D': ['D0', 'D1', 'D2', 'D3']})\n   \nresult = pd.merge(left, right, how='outer', on=['key1', 'key2'])\nprint(result)","07714324":"import pandas as pd\n\nworld_campians = {'Team':['India', 'Australia','West Indies', 'Pakistan', 'Sri Lanka'],\n                  'Rank':[2,3,7,8,4],\n                  'Year':[2011,2015,1979,1992,1996],\n                  'Points':[874,787,753,673,855]}\nchokers = {'Team':['South Africa','New Zealand', 'Zimbambwe'],\n                  'Rank':[1,5,9],\n                  'Points':[895,764,656]}\n\ndf1 = pd.DataFrame(world_campians)\ndf2 = pd.DataFrame(chokers)\n\nprint(df1)\nprint(df2)\n\nprint('----------------------------------------------------------------')\n\nresult = pd.merge(df1,df2,on='Team',how = 'outer')\nprint(result)","3b0e1b5c":"left = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],\n                     'key2': ['K0', 'K1', 'K0', 'K1'],\n                      'A': ['A0', 'A1', 'A2', 'A3'],\n                      'B': ['B0', 'B1', 'B2', 'B3']})\n   \n\nright = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],\n                      'key2': ['K0', 'K0', 'K0', 'K0'],\n                       'C': ['C0', 'C1', 'C2', 'C3'],\n                       'D': ['D0', 'D1', 'D2', 'D3']})\n   \nresult = pd.merge(left, right, how='inner', on=['key1', 'key2'])\nprint(result)","95a38091":"import pandas as pd\n\nworld_campians = {'Team':['India', 'Australia','West Indies', 'Pakistan', 'Sri Lanka'],\n                  'Rank':[2,3,7,8,4],\n                  'Year':[2011,2015,1979,1992,1996],\n                  'Points':[874,787,753,673,855]}\nchokers = {'Team':['South Africa','New Zealand', 'Zimbambwe'],\n                  'Rank':[1,5,9],\n                  'Points':[895,764,656]}\n\ndf1 = pd.DataFrame(world_campians)\ndf2 = pd.DataFrame(chokers)\n\nprint(df1)\nprint(df2)\n\nprint('----------------------------------------------------------------')\n\nresult = pd.merge(df1,df2,on='Team',how = 'inner')\nprint(result)","008c19f5":"import pandas as pd\n\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],\n                    'B': ['B0', 'B1', 'B2', 'B3'],\n                    'C': ['C0', 'C1', 'C2', 'C3'],\n                    'D': ['D0', 'D1', 'D2', 'D3']},\n                     index=[0, 1, 2, 3])\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'],\n                    'B': ['B4', 'B5', 'B6', 'B7'],\n                    'C': ['C4', 'C5', 'C6', 'C7'],\n                    'D': ['D4', 'D5', 'D6', 'D7']},\n                     index=[4, 5, 6, 7])\ndf3 = pd.DataFrame({'A': ['A8', 'A9', 'A10', 'A11'],\n                    'B': ['B8', 'B9', 'B10', 'B11'],\n                    'C': ['C8', 'C9', 'C10', 'C11'],\n                    'D': ['D8', 'D9', 'D10', 'D11']},\n                     index=[8, 9, 10, 11])\n\nframes = [df1, df2, df3]\n\nresult = pd.concat(frames)\nprint(result)","7223f2d8":"import pandas as pd\n\nworld_campians = {'Team':['India', 'Australia','West Indies', 'Pakistan', 'Sri Lanka'],\n                  'Rank':[2,3,7,8,4],\n                  'Year':[2011,2015,1979,1992,1996],\n                  'Points':[874,787,753,673,855]}\nchokers = {'Team':['South Africa','New Zealand', 'Zimbambwe'],\n                  'Rank':[1,5,9],\n                  'Points':[895,764,656]}\n\ndf1 = pd.DataFrame(world_campians)\ndf2 = pd.DataFrame(chokers)\nprint(pd.concat([df1,df2]))","38104778":"df = pd.DataFrame({\n    'one': pd.Series(np.random.randn(3), index=['a', 'b', 'c']),\n    'two': pd.Series(np.random.randn(4), index=['a', 'b', 'c', 'd']),\n    'three': pd.Series(np.random.randn(3), index=['b', 'c', 'd'])})\n\nprint(df)\nprint('----------------------------------------------------------------------')\n\nprint(df.mean(0))\nprint('----------------------------------------------------------------------')\n\nprint(df.mean(1))\nprint('----------------------------------------------------------------------')\n\nprint(df.sum(0, skipna=False))\nprint('----------------------------------------------------------------------')\n\nprint(df.sum(axis=1, skipna=True))\nprint('----------------------------------------------------------------------')\n\n#Combined with the broadcasting \/ arithmetic behavior, one can describe various statistical procedures, \n#like standardization (rendering data zero mean and standard deviation 1), very concisely:\n\nts_stand = (df - df.mean()) \/ df.std()\nprint(ts_stand.std())\n\nprint('----------------------------------------------------------------------')\n\nxs_stand = df.sub(df.mean(1), axis=0).div(df.std(1), axis=0)\nprint(xs_stand.std(1))","07e8ebcc":"series = pd.Series(np.random.randn(1000))\n\nseries[::2] = np.nan\n\nprint(series.describe())","839608ed":"frame = pd.DataFrame(np.random.randn(1000, 5),\n                    columns=['a', 'b', 'c', 'd', 'e'])\n   \nframe.iloc[::2] = np.nan\n\nprint(frame.describe())","1d4013f8":"s = pd.Series(['a', 'a', 'b', 'b', 'a', 'a', np.nan, 'c', 'd', 'a'])\n\nprint(s.describe())","d6fdecdd":"s = pd.Series(np.random.randn(5), index=['a', 'b', 'c', 'd', 'e'])\n\nprint(s)\n\nprint('---------------------------------------------------------------')\nprint(s.reindex(['e', 'b', 'f', 'd']))","7a5c9073":"print(df)\n\nprint('---------------------------------------------------------------------------')\nprint(df.reindex(index=['c', 'f', 'b'], columns=['three', 'two', 'one']))","7aebe337":"print(s)\n\nprint('-----------------------------------------------------------------')\nprint(s.rename(str.upper))","9f5370c9":"print(df)\n\nprint('----------------------------------------------------------------')\n\nprint(df.rename({'one': 'foo', 'two': 'bar'}, axis='columns'))","34aa1e6e":"# Function application\n\n---\n\nTo apply your own or another library\u2019s functions to pandas objects, you should be aware of the three methods below. The appropriate method to use depends on whether your function expects to operate on an entire DataFrame or Series, row- or column-wise, or elementwise.\n\n1. Tablewise Function Application: ***pipe()***\n2. Row or Column-wise Function Application: ***apply()***\n3. Aggregation API: ***agg()*** and ***transform()***\n4. Applying Elementwise Functions: ***applymap()***","68da384e":"# Concatenation:\n\n---\n\n**Concatenation is the process of combining two or more data structures**\n\nThe concat() function (in the main pandas namespace) does all of the heavy lifting of performing concatenation operations along an axis while performing optional set logic (union or intersection) of the indexes (if any) on the other axes. Note that I say \u201cif any\u201d because there is only a single possible axis of concatenation for Series.\n\nBefore diving into all of the details of concat and what it can do, here is a **simple example:**","c43dd796":"**Iterating Through Groups:**\n\nGroups can be iterated through just like using itertools","271cc682":"**Creating Data Frame From a list of dicts:**","b99359ff":"**Loading CSV data into Data Frame:**\n\n---\n\nData can be loaded into DataFrames from input data stored in the CSV fromat using the **read csv() fucntion**","20f5c1cc":"**Loading Excel Sheet data in to Pandas's Data Frame**\n\n---\n\nData can be loaded into DataFrames from input data stored in the Excel Sheet format using **read_excel() function**","cd9ecfa8":"**Data alignment and arithmetic:**\n\n---\n\nData alignment between DataFrame objects automatically align on both the columns and the index (row labels). Again, the resulting object will have the union of the column and row labels.","4c7c68be":"**Vectorized operations and label alignment with Series**","79d36cf0":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRiEDmvO6O91qqpyxp3A3Rc4uDToPXeas_RugjuAlpCnNjkRQ73)\n\n![](https:\/\/i.udemycdn.com\/course\/750x422\/2140668_436b_4.jpg)","a954a68e":"**Pandas is well suited for many different kind of data:**\n*   Tabular data with hetrogeneously-typed columns.\n*   Ordered and unordered time series data.\n*   Arbitary matrix data with row and column lebels\n*   Any other form of observational\/Statistical data set. The data actually need not be labeled all to be placed into Pandas data structure.\n\n---\n\n\n","d92da031":"# Renaming \/ mapping labels\n\n---\n\n\n\nThe rename() method allows you to relabel an axis based on some mapping (a dict or Series) or an arbitrary function\n\n---\n\n","1349bbfc":"**Creating a Series from a Python dictionary (dict):**\n\n---\n\nExample1:","a3f67a27":"**Data Frame - Row Deletion:**\n\n---\n\nThe drop() function can be used to drop rows whose labels are provided\n","04c69958":"**Indexing \/ Selection**\n\n---\n\n**The basics of indexing are as follows:**\n\n\n---\n\n**Operation\t      -->    Syntax\t       -->         Result**\n\n---\n\nSelect column\t    -->** df[col]**\t--> Series\n\nSelect row by label\t--> **df.loc[label]**\t--> Series\n\nSelect row by integer location -->\t**df.iloc[loc]**\t--> Series\n\nSlice rows\t--> **df[5:10]\t**--> DataFrame\n\nSelect rows by boolean vector\t--> **df[bool_vec]**\t--> DataFrame\n\n---\n\nExample : Row selection, for example, returns a Series whose index is the columns of the DataFrame:","27d31b6e":"# Python Data Analysis Library\n\n---\n\n**What is Pandas or Python Data Analysis Library?**\n\n\npandas is an open source, Python Data Analysis Library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.\n\nThe name Pandas is drived from \"Panel Data\" - an Econometrics from Multidimensional data.\n\n---\n\n**Library Highlights**\n\n*   A fast and efficient **DataFrame** object for data manipulation with integrated indexing;\n*   Tools for **reading and writing** data between in-memory data structures and different formats: CSV and text files, Microsoft Excel, SQL databases, and the fast HDF5 format;\n*   Intelligent **data alignment** and integrated handling of **missing data**: gain automatic label-based alignment in computations and easily manipulate messy data into an orderly form;\n*   Flexible **reshaping** and pivoting of data sets;\n*   Intelligent label-based **slicing, fancy indexing,** and **subsetting** of large data sets;\n*   Columns can be inserted and deleted from data structures for **size mutability**;\n*   Aggregating or transforming data with a powerful **group by** engine allowing split-apply-combine operations on data sets;\n*   High performance **merging and joining** of data sets;\n*   **Hierarchical axis indexing** provides an intuitive way of working with high-dimensional data in a lower-dimensional data structure;\n*   **Time series**-functionality: date range generation and frequency conversion, moving window statistics, moving window linear regressions, date shifting and lagging. Even create domain-specific time offsets and join time series without losing data;\n*   Highly **optimized for performance**, with critical code paths written in Cython or C.\n*   Python with pandas is in use in a wide variety of **academic and commercial** domains, including Finance, Neuroscience, Economics, Statistics, Advertising, Web Analytics, and more.\n\n---","dfed74fa":"**Example2:**\n\n---\n\n","3b0ca52d":"**Transposing**\n\n---\n\nTo transpose, access the T attribute (also the transpose function), similar to an ndarray:","1efc5cb3":"Data Frame Column can be deleted using the **pop() function**:\n\n---\n\n**pop()** methond is an inbuilt function in Python that removes and returns last value from the list or the given index value.","cc682b60":"# Summarizing data: describe\n\n\n---\n\nThere is a convenient describe() function which computes a variety of summary statistics about a Series or the columns of a DataFrame (excluding NAs of course):","f185c2b4":"**Example2:**\n\n---\n\n","0823c255":"**Example2: **\n\n---\n\n","626aa1aa":"Access Series is **dict-like**\n\n\n---\n\n\nA Series is like a fixed-size dict in that you can get and set values by index label:","217bc811":"**Left Join :**\n\n---\n\nLeft Join merge two object based on the keys from the left object","68495a91":"**Note:** NaN (not a number) is the standard missing data marker used in pandas.","762e639d":"**Name attribute**\n\nSeries can also have a name attribute:\n\n\n---\n\nExample:\n","9f100ec7":"**Converting a dictionary of series into a Data Frame:**","23ac9c0f":"**Creating a Data Frame using List**\n\n---\n\nConverting **list** into** Data Frame**","406f3092":"**Accessing Data from a Series:**\n\n---\n\n**Slicing:** Retrieving a part of the series using slicing.\n\nSeries acts very similarly to a ndarray, and is a valid argument to most NumPy functions. However, operations such as slicing will also **slice the index**.\n\n--- \n\nExample:\n","839191ec":"**Storing Data into CSV File:**\n\n---\n\nData present in DataFrames can be written to a CSV file using to the ***to_csv() function***\n","864602d0":"When inserting **a scalar value**, it will naturally be propagated to fill the column:\n\n---\n\n","a9a99952":"# Reindexing and altering labels\n\n---\nreindex() is the fundamental data alignment method in pandas. It is used to implement nearly all other features relying on label-alignment functionality. To reindex means to conform the data to match a given set of labels along a particular axis. This accomplishes several things:\n\n*   Reorders the existing data to match a new set of labels\n*   Inserts missing value (NA) markers in label locations where no data for that label existed\n*   If specified, fill data for missing labels using logic (highly relevant to working with time series data)\n\nHere is a simple example:\n","8eefbd6c":"**Iterating a DataFrame: Itertuples() **\n\n---\n\nitertuples() returns a iterator yielding a named tuple for each row","54e73d30":"**Iterating a DataFrame - iterrows()**\n\n\n---\niterrows() iterates over each rows as key, value pair","9fd9f9fc":"# Groupby Operations\n\n---\n\nBy \u201cgroup by\u201d we are referring to a process involving one or more of the following steps:\n\n \n*   **Splitting ** the data into groups based on some criteria.\n*   **Applying ** a function to each group independently.\n*   **Combining** the results into a data structure.\n\nOut of these, the split step is the most straightforward. In fact, in many situations we may wish to split the data set into groups and do something with those groups. In the apply step, we might wish to one of the following:\n\n**Aggregation: ** compute a summary statistic (or statistics) for each group. Some examples:\n\n*   Compute group sums or means.\n*   Compute group sizes \/ counts.\n\n**Transformation:** perform some group-specific computations and return a like-indexed object. Some examples:\n\n*   Standardize data (zscore) within a group.\n*   Filling NAs within groups with a value derived from each group.\n\n**Filtration:** discard some groups, according to a group-wise computation that evaluates True or False. Some examples:\n\n*   Discard data that belongs to groups with only a few members.\n*   Filter out data based on the group sum or mean.\n\n---\n\n","86e613f3":"**Axes() :**\n\n---\n\nAxes() returns a list of the axes of the row labels or index labels","7b8b6058":"**Inner Join**\n\n---\n\nInner Join merges two objects based on an intersection of the columns of both the objects:","386113ff":"**Exmaple 2: Left Join**\n\n---\n\n","a6dce13e":"**Selecting a Group:**\n\nA single group can be selected using **get_group()**","7253dc59":"**Data Structures in Pandas:**\n\nPandas provides three data structures: **Series, Data Frame and Panel**; all of which are built on top of the NumPy array.\n\n\n---\n\n","cad947d3":"![](https:\/\/cdn.streamlabs.com\/users\/5765999\/library\/gif.gif)","e579d165":"**Columns can be deleted or popped like with a dict:**\n\n---\n\nData Frame column can be deleted using  the **del () function:**","98ebf149":"**Outer Join :**\n\n---\n\nOuter Join merges two objects based on a full union of the columns of both the objects\n","a5b9785a":"**Create a Series from ndarray**\n\nIf data is an ndarray, index must be the same length as data. If no index is passed, one will be created having values [0, ..., len(data) - 1]. or [0,...., n-1]\n\n---\n\nExample1: ","472ae245":"**Tail()**\n\n---\n\nTail () returns the last n rowns from the data structure (Note: by defult it given last 5 rows)","8f7e6a2f":"You can rename a Series with the pandas.Series.rename() method.","a4956d17":"**Storing Data into Excel File:**\n\n---\n\nData present in DataFrames can be written to a Excel file using to the ***to_excel() function***","c729007d":"# Series\n\n---\n**Series** is one-dimensional labeled array structures that stores homogeneous data i.e., data of single type. \n\nAll the elements of series are **value-mutable** and **size-immutable**\n\n---\n\nIn other words, **Series** is a **one-dimensional labeled array** capable of holding any data type (integers, strings, floating point numbers, Python objects, etc.). The axis labels are collectively referred to as the index. The basic method to create a Series is to call:\n\n**s = pd.Series(data, index=index)**\n\n---\n\n\n","e168b9eb":"# Descriptive statistics\n\n---\n\nThere exists a large number of methods for computing descriptive statistics and other related operations on *Series,* *DataFrame*, and *Panel*. Most of these are aggregations (hence producing a lower-dimensional result) like **sum()**, **mean()**, and **quantile()**, but some of them, like **cumsum() ** and **cumprod()**, produce an object of the same size. Generally speaking, these methods take an ***axis*** argument, just like *ndarray.{sum, std, \u2026}*, but the axis can be specified by name or integer:\n\n*   Series: no axis argument needed\n*   DataFrame: \u201cindex\u201d (axis=0, default), \u201ccolumns\u201d (axis=1)\n*   Panel: \u201citems\u201d (axis=0), \u201cmajor\u201d (axis=1, default), \u201cminor\u201d (axis=2)\n\n---\n\nFor example:","f7476c36":"**Grouped by Multiple Column: **\n\nThe DataFrame is grouped according to the \"Team\" and \"Icc_rank\" column","3108c614":"# Data Frame\n\n**A Data Frame** is a **2D data structure** in which data is aligned in a tabular fashion consisting of **rows and columns**\n\nA Data Frame can be created using the following constructor:\n\ndf = pandas.DataFrame(data, index, dtype, copy)\n\n---\n\nDataFrame accepts many different kinds of input:\n\n*   Dict of 1D ndarrays, lists, dicts, or Series\n*   2-D numpy.ndarray\n*   Structured or record ndarray\n*   A Series\n*   Another DataFrame\n\nAlong with the data, you can optionally pass index (row labels) and columns (column labels) arguments.\n\n---\n\n","8d32064a":"**For a non-numerical Series object,** **describe()** will give a simple summary of the number of unique values and most frequently occurring values:","f7dc937c":"**Creating a Data Frame from a list of dictionary**\n\n---\n\n","4c9dc11c":"**Example2:**\n\n---\n\n","f6c040a4":"**Groupby Operation on DataFrame:**\n\n---\n\n","c4c7c572":"**Std():**\n\n---\n\nstd() returns the standard deviation of the values for the requested axis\n","c689a943":"**Note:** When a particular set of columns is passed along with a dict of data, the passed columns override the keys in the dict.\n\n---\n\n","2f9f77f7":"**Iterating a DataFrame : Iteritem()**\n\n---\n\niteritem() iterates over the each column as key, value pair","c69863e6":"# Essential Basic Functionality of Series\n\n---\n\n**Head() **\n\n---\n\nHead() returns the first n rowns from the data structure (Note: by defult it given top 5 rows)","f07a4073":"**ndim() :**\n\n---\n\nNdim() fucntion returns the number of dimensions of the data structure\n","9402cb74":"**Aggregation:**\n\n---\n\nOnce the GroupBy object has been created, several methods are available to perform a computation on the grouped data.\n\nAn obvious one is aggregation via the aggregate() or equivalently agg() method:\n\n\n","5457ec73":"**Example2:**\n\n---\n\n","d1c1348d":"Here, the f label was not contained in the Series and hence appears as NaN in the result.\n\n---\n\nWith a DataFrame, you can simultaneously reindex the index and columns:","2e9b70f7":"**Splitting an object into groups:**\n\nAn objects in Pandas can be splits into multiple ones.\n\npandas objects can be split on any of their axes. The abstract definition of grouping is to provide a mapping of labels to group names. To create a GroupBy object (more on what the GroupBy object is later), you may do the following:","ed635501":"Here, data can be many different things:\n\n*   a Python dict\n*   an ndarray\n*   a scalar value (like 5)\n\n---\n\nThe passed index is a list of axis labels. Thus, this separates into a few cases depending on **what data is:**\n\n---\n\n","874609b8":"# Merge & Join\n\n**Merging is the Pandas operation that performs Database join on objects.**\n\npandas provides a single function, ***merge()***, as the entry point for all standard database join operations between DataFrame or named Series objects:\n\n---\n**Brief primer on merge methods (relational algebra)**\n\nExperienced users of relational databases like SQL will be familiar with the terminology used to describe join operations between two SQL-table like structures (DataFrame objects). There are several cases to consider which are very important to understand:\n\n*   **one-to-one joins: ** for example when joining two DataFrame objects on their indexes (which must contain unique values).\n*   **many-to-one joins: ** for example when joining an index (unique) to one or more columns in a different DataFrame.\n*   **many-to-many joins:** joining columns on columns.\n\n---\n\n**Note: **When joining columns on columns (potentially a many-to-many join), any indexes on the passed DataFrame objects will be discarded.","bc31e82b":"# Basic Functionality of DataFrame\n\n---\n\n**Sum()**\n\n---\n\nSum() returns the sum of the values for the requested axis","7244d8c5":"**Creating Series from scalar value**\n\nIf data is a scalar value, an index must be provided. The value will be repeated to match the length of index.\n\n---\n\nExample1:","e1d15356":"**The DataFrame is grouped according to the 'Team' column**","3bfe56d5":"**Column selection, addition, deletion**\n\n\n---\n\nAdd New Column in existing Data Frame","ddfeee53":"# Panel\n\n\n\n---\n\nPanel is a somewhat less-used, but still important container for 3-dimensional data. The term panel data is derived from econometrics and is partially responsible for the name pandas: pan(el)-da(ta)-s. The names for the 3 axes are intended to give some semantic meaning to describing operations involving panel data and, in particular, econometric analysis of panel data. However, for the strict purposes of slicing and dicing a collection of DataFrame objects, you may find the axis names slightly arbitrary:\n\n*   items: axis 0, each item corresponds to a DataFrame contained inside\n*   major_axis: axis 1, it is the index (rows) of each of the DataFrames\n*   minor_axis: axis 2, it is the columns of each of the DataFrames\n\nConstruction of Panels works about like you would expect:","25b597f5":"**Describe():**\n\n---\n\n\n","a713cb19":"When doing an operation between DataFrame and Series, the default behavior is to align the Series index on the DataFrame columns, thus broadcasting row-wise. For example:","889a230b":"**Here is a quick reference summary table of common functions. Each also takes an optional level parameter which applies only if the object has a hierarchical index.**\n\n---\n\n**Function\t----    Description**\n\n---\n\n***count***\t---- Number of non-NA observations\n\n***sum*** ----\tSum of values\n\n***mean*** ----\tMean of values\n\n***mad*** ----\tMean absolute deviation\n\n***median*** ----\tArithmetic median of values\n\n***min*** ----\tMinimum\n\n***max*** ----\tMaximum\n\n***mode*** ----\tMode\n\n***abs*** ----\tAbsolute Value\n\n***prod*** ----\tProduct of values\n\n***std*** ----\tBessel-corrected sample standard deviation\n\n***var*** ----\tUnbiased variance\n\n***sem*** ----\tStandard error of the mean\n\n***skew*** ----\tSample skewness (3rd moment)\n\n***kurt*** ----\tSample kurtosis (4th moment)\n\n***quantile*** ----\tSample quantile (value at %)\n\n***cumsum*** ----\tCumulative sum\n\n***cumprod*** ----\tCumulative product\n\n***cummax*** ----\tCumulative maximum\n\n***cummin*** ----\tCumulative minimum\n\n---\n\n**Note: **that by chance some NumPy methods, like mean, std, and sum, will exclude NAs on Series input by default:","dff41271":"**Right Join:**\n\n---\n\nRight Join merges two objects based on the key from the right object","5a4f007a":"Example2:\n\n---\n\n","04e753c7":"**Data Frame - Row Addtion:**\n\n---\n\nThe **append() function **can be used to add one or more rows into the Data Frame\n"}}