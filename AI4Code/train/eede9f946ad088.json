{"cell_type":{"7f29e0c5":"code","8f40b4fb":"code","67d34681":"code","543780c6":"code","d344f58d":"code","51958d72":"code","e0991a01":"code","55f8dc88":"code","6c051886":"code","add6837b":"markdown","5fcf45b6":"markdown","27b0c9e7":"markdown","aad242b2":"markdown","bb8e9fef":"markdown","ffe5ae8f":"markdown","ec456ebe":"markdown","075b0167":"markdown"},"source":{"7f29e0c5":"# Python libraries\n# Classic,data manipulation and linear algebra\nimport pandas as pd\nimport numpy as np\n\n# Plots\nimport plotly.offline as py\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.tools as tls\nimport plotly.figure_factory as ff\npy.init_notebook_mode(connected=True)\n\n# Data processing, metrics and modeling\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\n\n#ignore warning messages \nimport warnings\nwarnings.filterwarnings('ignore') ","8f40b4fb":"data = pd.read_csv('..\/input\/train.csv')\ndata.head()","67d34681":"#train\ntarget_col = [\"target\"]\nid_dataset = [\"id\"]\n#numerical columns\nnum_cols   = [x for x in data.columns if x not in target_col + id_dataset]\n\n#Scaling Numerical columns\nstd = StandardScaler()\nscaled = std.fit_transform(data[num_cols])\nscaled = pd.DataFrame(scaled,columns=num_cols)\n\n#dropping original values merging scaled values for numerical columns\ndf_data_og = data.copy()\ndata = data.drop(columns = num_cols,axis = 1)\ndata = data.merge(scaled,left_index=True,right_index=True,how = \"left\")\ndata = data.drop(columns = ['id'],axis = 1)","543780c6":"#test \ntest = pd.read_csv('..\/input\/test.csv')\ntarget_col = [\"target\"]\nid_dataset = [\"id\"]\n#numerical columns\nnum_cols   = [x for x in test.columns if x not in target_col + id_dataset]\n\n#Scaling Numerical columns\nstd = StandardScaler()\nscaled = std.fit_transform(test[num_cols])\nscaled = pd.DataFrame(scaled,columns=num_cols)\n\n#dropping original values merging scaled values for numerical columns\ndf_test_og = test.copy()\ntest = test.drop(columns = num_cols,axis = 1)\ntest = test.merge(scaled,left_index=True,right_index=True,how = \"left\")\ntest = test.drop(columns = ['id'],axis = 1)","d344f58d":"# Def X and Y\nX = data.drop('target', 1)\ny = data['target']","51958d72":"def scores_table(model, subtitle):\n    scores = ['accuracy', 'roc_auc']\n    res = []\n    for sc in scores:\n        scores = cross_val_score(model, X, y, cv = 5, scoring = sc)\n        res.append(scores)\n    df = pd.DataFrame(res).T\n    df.loc['mean'] = df.mean()\n    df.loc['std'] = df.std()\n    df= df.rename(columns={0: 'accuracy', 1:'roc_auc'})\n\n    trace = go.Table(\n        header=dict(values=['<b>Fold', '<b>Accuracy','<b>Roc auc'],\n                    line = dict(color='#7D7F80'),\n                    fill = dict(color='#a1c3d1'),\n                    align = ['center'],\n                    font = dict(size = 15)),\n        cells=dict(values=[('1','2','3','4','5','mean', 'std'),\n                           np.round(df['accuracy'],3),\n                           np.round(df['roc_auc'],3)],\n                   line = dict(color='#7D7F80'),\n                   fill = dict(color='#EDFAFF'),\n                   align = ['center'], font = dict(size = 15)))\n\n    layout = dict(width=800, height=400, title = '<b>Cross Validation - 5 folds<\/b><br>'+subtitle, font = dict(size = 15))\n    fig = dict(data=[trace], layout=layout)\n\n    py.iplot(fig, filename = 'styled_table')","e0991a01":"# Find best hyperparameters (roc_auc)\nrandom_state = 42\nlog_clf = LogisticRegression(random_state = random_state)\nparam_grid = {'class_weight' : ['balanced', None], \n                'penalty' : ['l2','l1'],  \n                'C' : [0.001, 0.01, 0.1, 1, 10, 100, 1000]}\n\ngrid = GridSearchCV(estimator = log_clf, param_grid = param_grid , scoring = 'roc_auc', verbose = 1, n_jobs = -1)\n\ngrid.fit(X,y)\n\nprint(\"Best Score:\" + str(grid.best_score_))\nprint(\"Best Parameters: \" + str(grid.best_params_))\n\nbest_parameters = grid.best_params_","55f8dc88":"log_clf = LogisticRegression(**best_parameters)\nlog_clf.fit(X,y)\n\nselector = RFE(log_clf, 25, step=1)\nselector.fit(X,y)\nscores_table(selector, 'selector_clf')","6c051886":"submission = pd.read_csv('..\/input\/sample_submission.csv')\nX_test = test\nsubmission['target'] = selector.predict_proba(X_test)\nsubmission.to_csv('submission.csv', index=False)","add6837b":"# 1. Python libraries and data \n# 2. Standard Scaler\n# 3. X and y\n# 4. Cross validation scores\n# 5. GridSearch CV and Modeling\n# 6. Recursive Feature Elimination (25)\n# 7. Submission","5fcf45b6":"## 1. Python libraries and data ","27b0c9e7":"## 6. Recursive Feature Elimination (25)","aad242b2":"## 3. X and y","bb8e9fef":"## 4. Cross validation scores","ffe5ae8f":"## 7. Submission","ec456ebe":"## 2. Standard Scaler","075b0167":"## 5. GridSearch CV and Modeling"}}