{"cell_type":{"f71cf07f":"code","2ad140af":"code","7592245e":"code","3a13a2e0":"code","0781c376":"code","62dbec54":"code","94b50fc5":"code","63de25bb":"code","11880513":"code","bd3272a6":"code","07557e2e":"code","b4a501a2":"code","b5e59857":"code","ebaabc4d":"code","571a257a":"code","30bbf38d":"code","0540fb7e":"code","91beaad7":"code","66dde166":"code","ab16706c":"code","02a99b28":"code","e7e4cccb":"code","fdf7d7f6":"code","705d64cf":"code","743596b4":"code","28638974":"code","52e52043":"code","3910dc8c":"markdown","c206755f":"markdown"},"source":{"f71cf07f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport tensorflow as tf\nimport cv2\nimport matplotlib.pyplot as plt","2ad140af":"df = pd.read_csv(\"..\/input\/severstal-steel-defect-detection\/train.csv\")\n# compute test\/train split\nvals = np.random.uniform(0, 1, len(df))\ntrain_idx = vals < 0.8\nval_idx = vals >= 0.8\n\ndf[\"train\"] = False\ndf[\"train\"][train_idx] = True\n\ndf.head()","7592245e":"with_pixels = df.dropna()\nwith_pixels.head()","3a13a2e0":"filename, class_id = with_pixels.iloc[0].ImageId, with_pixels.iloc[0].ClassId\nprint(filename, class_id)","0781c376":"def compute_mask(row, shape):\n    width, height = shape\n    \n    mask = np.zeros(width * height, dtype=np.uint8)\n    pixels = np.array(list(map(int, row.EncodedPixels.split())))\n    mask_start = pixels[0::2]\n    mask_length = pixels[1::2]\n        \n    for s, l in zip(mask_start, mask_length):\n        mask[s:s + l] = 255\n        \n    mask = np.flipud(np.rot90(mask.reshape((height, width))))\n    return mask","62dbec54":"def mask_to_image(mask):\n    return np.transpose(np.array([mask, mask, mask]), [1, 2, 0])","94b50fc5":"!ls ..\/input\/severstal-steel-defect-detection\/\n","63de25bb":"def show_image(axis, filename, df, colours):\n    row_ids = np.where(df[\"ImageId\"] == filename)[0]\n    if not row_ids.size:\n        raise ValueError(f\"Cannot find image {filename}\")\n        \n    assert len(row_ids) <= len(colours)\n    \n    \n    combined_image = None\n    for i, (row_id, colour) in enumerate(zip(row_ids, colours)):\n        row = df.iloc[row_id]\n        \n        filename = os.path.join(\"..\", \"input\", \"severstal-steel-defect-detection\", \"train_images\", row.ImageId)\n        assert os.path.isfile(filename)\n\n        data = cv2.imread(filename)\n        data = cv2.cvtColor(data, cv2.COLOR_BGR2RGB)\n        if i == 0:\n            combined_image = data\n\n        if not isinstance(row.EncodedPixels, str):\n            continue    \n\n        width, height, _ = data.shape\n        \n        mask = compute_mask(row, (width, height))\n        \n        full_mask = np.array([\n            mask * colour[0],\n            mask * colour[1],\n            mask * colour[2],\n        ])\n        mask = np.transpose(full_mask, [1, 2, 0]).astype(np.uint8)\n        \n        combined_image = cv2.addWeighted(mask, 0.3, combined_image, 0.7, 0)\n    \n    axis.imshow(combined_image)\n    \ntest_filename = with_pixels.iloc[5].ImageId\ncolours = [(1.0, 0.0, 0.0), (0.0, 1.0, 0.0), (0.0, 0.0, 1.0), (1.0, 0.0, 1.0)]\n\nfig, axis = plt.subplots(figsize=(22, 8))\nshow_image(axis, test_filename, df, colours)","11880513":"!pip install git+https:\/\/github.com\/mindriot101\/Mask_RCNN","bd3272a6":"from mrcnn.utils import Dataset\nfrom mrcnn.config import Config\nfrom mrcnn.model import MaskRCNN","07557e2e":"class MyConfig(Config):\n#     BACKBONE = \"resnet50\"\n    NAME = \"steel\"\n    IMAGES_PER_GPU = 1\n    GPU_COUNT = 1\n    NUM_CLASSES = 1 + 4\n    STEPS_PER_EPOCH = 250\n    VALIDATION_STEPS = 10\n    \nmodelconfig = MyConfig()\nmodelconfig.display()","b4a501a2":"class MyDataset(Dataset):\n    \n    SHAPE = (1600, 256)\n    \n    def load_from(self, df):\n        self.df = df\n        \n        self.add_class(\"\", 1, \"class 1\")\n        self.add_class(\"\", 2, \"class 2\")       \n        self.add_class(\"\", 3, \"class 3\")\n        self.add_class(\"\", 4, \"class 4\")\n        \n        for image_id, g in df.groupby(\"ImageId\"):\n            filename = os.path.join(\"..\", \"input\", \"severstal-steel-defect-detection\", \"train_images\", image_id)\n            assert os.path.isfile(filename)\n            self.add_image(\"\", image_id, filename)\n            \n    def load_mask(self, image_idx):\n        width, height = self.SHAPE\n        \n        image_id = self.image_info[image_idx][\"id\"]\n        \n        selection = self.df.query(\"ImageId == @image_id\") \n        assert len(selection)\n    \n        total_mask = np.zeros((height, width, 4))\n        class_ids = []\n        for i, (_, row) in enumerate(selection.iterrows()):\n            if not isinstance(row.EncodedPixels, str):\n                continue\n\n            class_ids.append(int(row.ClassId))\n\n            mask = np.zeros(width * height, dtype=np.uint8)\n            pixels = np.array(list(map(int, row.EncodedPixels.split())))\n            mask_start = pixels[0::2]\n            mask_length = pixels[1::2]\n\n            for s, l in zip(mask_start, mask_length):\n                mask[s:s + l] = 255\n\n            mask = np.flipud(np.rot90(mask.reshape((width, height))))\n            total_mask[:, :, i] = mask\n            \n        return total_mask, np.array([1, 2, 3, 4])","b5e59857":"dataset_train = MyDataset()\ndataset_train.load_from(df[df.train == True])\ndataset_train.prepare()\n\ndataset_val = MyDataset()\ndataset_val.load_from(df[df.train == False])\ndataset_val.prepare()","ebaabc4d":"def investigate_mask(idx):\n    mask, class_ids = dataset_train.load_mask(idx)\n    if not mask.any():\n        print(\"No regions found\")\n        return\n    \n    fig, axes = plt.subplots(len(class_ids), 1, figsize=(22, 8))\n    try:\n        axes = axes.ravel()\n    except AttributeError:\n        axes = [axes]\n    for i, (c, ax) in enumerate(zip(class_ids, axes)):\n        m = mask[:, :, i]\n        ax.imshow(m, cmap=\"gray\")\n        \n    \ninvestigate_mask(0)","571a257a":"!curl -LO https:\/\/github.com\/matterport\/Mask_RCNN\/releases\/download\/v2.0\/mask_rcnn_coco.h5","30bbf38d":"# Load the model\nconfig = tf.ConfigProto()\nconfig.gpu_options.allow_growth = True\nsession = tf.Session(config=config)\n\nsession.run(tf.global_variables_initializer())\nsession.run(tf.local_variables_initializer())\nmodel = MaskRCNN(mode=\"training\", config=modelconfig, model_dir=\"modeldir\")\nmodel.load_weights(\"mask_rcnn_coco.h5\", by_name=True, exclude=[\"mrcnn_bbox_fc\", \"mrcnn_class_logits\", \"mrcnn_mask\", \"mrcnn_bbox\"])","0540fb7e":"%time model.train(dataset_train, dataset_val, epochs=10, layers=\"heads\", learning_rate=modelconfig.LEARNING_RATE)","91beaad7":"model.keras_model.save_weights('w.h5')","66dde166":"model1 = MaskRCNN(mode=\"inference\", config=modelconfig, model_dir=\"modeldir\")\nmodel1.load_weights(\"w.h5\", by_name=True, exclude=[\"mrcnn_bbox_fc\", \"mrcnn_class_logits\", \"mrcnn_mask\", \"mrcnn_bbox\"])","ab16706c":"from keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array","02a99b28":"img = load_img('..\/input\/severstal-steel-defect-detection\/train_images\/005f19695.jpg')\nimg = img_to_array(img)\n# make prediction\nresults = model1.detect([img], verbose=0)","e7e4cccb":"results[0]['class_ids']","fdf7d7f6":"results[0]['rois']","705d64cf":"results","743596b4":"from mrcnn import visualize\nCLASS_NAMES = ['BG','Class 1','Class 2','Class 3','Class 4']","28638974":"def get_ax(rows=1, cols=1, size=16):\n    \"\"\"Return a Matplotlib Axes array to be used in\n    all visualizations in the notebook. Provide a\n    central point to control graph sizes.\n    \n    Adjust the size attribute to control how big to render images\n    \"\"\"\n    _, ax = plt.subplots(rows, cols, figsize=(size*cols, size*rows))\n    return ax","52e52043":"image = load_img('..\/input\/severstal-steel-defect-detection\/test_images\/000ccc2ac.jpg')\n# original image\n#plt.figure(figsize=(12,10))\n#plt.imshow(image)\n\nimage=img_to_array(image)\n\n# Run object detection\nresults = model1.detect([image], verbose=1)\n\n# Display results\nax = get_ax(1)\nr = results[0]\nvisualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], \n                            CLASS_NAMES, r['scores'], ax=ax,\n                            title=\"Predictions\")","3910dc8c":"# Training","c206755f":"## Mask R-CNN model\n\nNow we construct the model based on the mrcnn package."}}