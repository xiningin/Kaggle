{"cell_type":{"8618cc81":"code","a9c9d598":"code","b3ddab4a":"code","b9794715":"code","0d706bbe":"code","b34d7ea5":"code","09adc80b":"code","888cbac9":"code","1a913730":"code","ffea9e30":"code","1f2ff5e7":"code","b2a1c129":"code","367ecbfe":"code","b32c8c49":"code","c0fc2e7d":"code","1a2e81d2":"code","e0e22a1b":"code","c3530457":"code","946393bc":"code","0d35ce61":"markdown","ef3198bc":"markdown","6c60114f":"markdown"},"source":{"8618cc81":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport random\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import BaggingClassifier, RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom subprocess import check_output\n\nimport warnings\nwarnings.filterwarnings('ignore')","a9c9d598":"data0 = pd.read_csv('..\/input\/iris\/Iris.csv')\ndata0[0:2].T","b3ddab4a":"print(data0['Species'].unique())","b9794715":"Name=data0['Species'].unique()\n\nNUM=[]\nfor i in range(data0['Species'].nunique()):\n    NUM+=[i]\n    \nnormal_mapping=dict(zip(Name,NUM)) \nreverse_mapping=dict(zip(NUM,Name)) \n\ndef mapper(value):\n    return reverse_mapping[value]","0d706bbe":"n=len(data0)\nprint(n)","b34d7ea5":"N=[]\nfor i in range(n):\n    N+=[i]\nrandom.shuffle(N)","09adc80b":"data0['Species']=data0['Species'].map(normal_mapping)","888cbac9":"dataset=data0.drop('Species',axis=1)\ndatalabel=data0['Species']","1a913730":"dataset=np.array(dataset)\ndatalabel=np.array(datalabel)","ffea9e30":"X_train=dataset[N[0:(n\/\/10)*5]]\nX_test=dataset[N[(n\/\/10)*5:]]\ny_train=datalabel[N[0:(n\/\/10)*5]]\ny_test=datalabel[N[(n\/\/10)*5:]]","1f2ff5e7":"bagging = BaggingClassifier(KNeighborsClassifier(),max_samples=0.5, max_features=0.5).fit(X_train,y_train)\nmodel1_train = bagging.predict(X_train)\nmodel1_test = bagging.predict(X_test)","b2a1c129":"random_forest=RandomForestClassifier(n_estimators=500, max_depth=10, min_samples_split=2, random_state=0).fit(X_train,y_train)\nmodel2_train = random_forest.predict(X_train)\nmodel2_test = random_forest.predict(X_test)","367ecbfe":"Ada_boost=AdaBoostClassifier(n_estimators=500).fit(X_train,y_train)\nmodel3_train=Ada_boost.predict(X_train) \nmodel3_test=Ada_boost.predict(X_test)","b32c8c49":"from sklearn.ensemble import GradientBoostingClassifier\nGradient_boost = GradientBoostingClassifier(n_estimators=500).fit(X_train, y_train)\nmodel4_train=Gradient_boost.predict(X_train)\nmodel4_test=Gradient_boost.predict(X_test)                 ","c0fc2e7d":"base_predictions_train = pd.DataFrame( {\n     'Bagging': model1_train.ravel(),\n     'Random_Forest': model2_train.ravel(),\n     'AdaBoost': model3_train.ravel(),\n     'GradientBoost': model4_train.ravel()\n    })\n\nbase_predictions_test = pd.DataFrame( {\n     'Bagging': model1_test.ravel(),\n     'Random_Forest': model2_test.ravel(),\n     'AdaBoost': model3_test.ravel(),\n     'GradientBoost': model4_test.ravel()\n    })\n\nX_new_train = np.array(base_predictions_train)\nX_new_test = np.array(base_predictions_test)\n\nprint(base_predictions_train.head())\nprint()\nprint(base_predictions_test.head())","1a2e81d2":"xgboost = xgb.XGBClassifier(n_estimators=5,max_depth=10,\n                    min_child_weight=2,gamma=0.9,\n                    subsample=0.8,colsample_bytree=0.8,\n                    objective='binary:logistic',\n                    nthread=-1,scale_pos_weight=1).fit(X_new_train,y_train)","e0e22a1b":"y_train_pred = xgboost.predict(X_new_train)\ny_test_pred = xgboost.predict(X_new_test)","c3530457":"train_score = accuracy_score(y_train, y_train_pred)\nprint(\"Train_Score:\",train_score)","946393bc":"test_score = accuracy_score(y_test, y_test_pred)\nprint(\"Test_Score:\",test_score)","0d35ce61":"# Secondary Prediction (Stacking) using Primary Predition Result ","ef3198bc":"# Priary Predition Models","6c60114f":"# Primary Predition Result as New Data for Stacking"}}