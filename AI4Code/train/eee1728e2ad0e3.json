{"cell_type":{"864adf12":"code","5106bdf8":"code","33d55953":"code","383ac3f4":"code","07357c52":"code","d59e9716":"code","2172457e":"code","cfa2d3cc":"code","9ef1ddc9":"code","71d0effc":"code","758ec9fa":"code","b319bbbf":"code","21983170":"code","d504ae69":"code","c610a791":"code","b42ac3da":"code","3af9b722":"code","5250fb78":"code","d63c8834":"code","e624a8a2":"code","7c8d71a1":"code","5addf519":"code","c5f32c06":"code","b9553483":"code","2ac1ae71":"markdown","2d4bf5d5":"markdown","1a2558d3":"markdown","b4f5494c":"markdown","0b90d5f0":"markdown","f384fffd":"markdown","f1e282f6":"markdown","c67a01cf":"markdown","a993503b":"markdown","322abf0b":"markdown","b0216dd4":"markdown","62b7719d":"markdown","4a5b0808":"markdown"},"source":{"864adf12":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('..\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5106bdf8":"#the imports\nimport random\nimport matplotlib.pyplot as plt\nimport keras.backend as K\nfrom keras.models import Sequential\nfrom keras.utils import to_categorical\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers import Dense, Flatten, Convolution2D, MaxPooling2D, Dropout, Activation, AveragePooling2D\nfrom keras.preprocessing import image\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline","33d55953":"dogs = []\nwolves = []\nimg_size = 300\nDOGS_IMGS_PATH = '..\/input\/dogs-vs-wolves\/data\/dogs'\nWOLVES_IMGS_PATH = '..\/input\/dogs-vs-wolves\/data\/wolves'\nDIRS = [(0, DOGS_IMGS_PATH), (1, WOLVES_IMGS_PATH)]","383ac3f4":"train_images = []\nlabels = []\nfor num, _dir in DIRS:\n    _dir = _dir + '\/'\n    count = 0\n    for file in os.listdir(_dir):\n        if count >= 1000:\n            break\n        img = image.load_img(_dir + str(file), target_size=(img_size, img_size))\n        img = image.img_to_array(img)\n        img = img\/255\n        train_images.append(img)\n        labels.append(num)\n        count += 1","07357c52":"train_images[1].shape\n","d59e9716":"plt.imshow(train_images[1])\n","2172457e":"plt.imshow(train_images[1650])\n","cfa2d3cc":"len(train_images)\n","9ef1ddc9":"X = np.array(train_images)","71d0effc":"X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.1, random_state=101)","758ec9fa":"len(X_train)\n","b319bbbf":"y_train_labels = to_categorical(y_train)\n","21983170":"def build(width, height, depth, classes):\n    #initialize the model along with the input shape\n    model = Sequential()\n    inputShape = (height, width, depth)\n    chanDim = -1\n    \n    if K.image_data_format() == 'channels_first':\n        inputShape = (depth, height, width)\n        chanDim = 1\n        \n    # CONV -> RELU -> MAXPOOL\n    model.add(Convolution2D(64, (3,3), padding='same', input_shape=inputShape))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization(axis=chanDim))\n    model.add(MaxPooling2D(pool_size=(3,3)))\n    model.add(Dropout(0.25))\n    \n    # (CONV -> RELU)*2 -> AVGPOOL\n    model.add(Convolution2D(128, (3,3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization(axis=chanDim))\n    model.add(Convolution2D(128, (3,3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization(axis=chanDim))\n    model.add(AveragePooling2D(pool_size=(3,3)))\n    model.add(Dropout(0.25))\n    \n    # CONV -> RELU -> MAXPOOL\n    model.add(Convolution2D(256, (3,3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization(axis=chanDim))\n    model.add(MaxPooling2D(pool_size=(3,3)))\n    model.add(Dropout(0.25))\n    \n    # CONV -> RELU -> AVGPOOL\n    model.add(Convolution2D(512, (3,3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization(axis=chanDim))\n    model.add(AveragePooling2D(pool_size=(3,3)))\n    model.add(Dropout(0.25))\n    \n    # DENSE -> RELU\n    model.add(Flatten())\n    model.add(Dense(1024))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.25))\n    \n    # DENSE -> RELU\n    model.add(Dense(512))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.25))\n    \n    # sigmoid -> just to check the accuracy with this (softmax would work too)\n    model.add(Dense(classes))\n    model.add(Activation('sigmoid'))\n    \n    return model","d504ae69":"model = build(img_size, img_size, 3, 2)\n","c610a791":"model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])","b42ac3da":"model.summary()","3af9b722":"history = model.fit(X_train, y_train_labels, batch_size=32, epochs=20, validation_split=0.1)\n","5250fb78":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","d63c8834":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","e624a8a2":"predictions = model.predict_classes(X_test)\n","7c8d71a1":"print(confusion_matrix(predictions, y_test))","5addf519":"print(classification_report(predictions, y_test))","c5f32c06":"random_indices = [random.randint(0,180) for i in range(9)]","b9553483":"plt.figure(figsize=(10,10))\nfor i, index in enumerate(random_indices):\n    pred = predictions[index]\n    pred = 'dog' if pred==0 else 'Wolve'\n    actual = 'dog' if y_test[index]==0 else 'Wolve'\n    plt.subplot(3,3,i+1)\n    plt.imshow(X_test[index], cmap='gray', interpolation='none')\n    plt.title(f\"Predicted: {pred}, \\n Class: {actual}\")\n    plt.tight_layout()","2ac1ae71":"# Conventional Neural Network Accuracy ","2d4bf5d5":"# Import Labraries ","1a2558d3":"# Expectation with classes and Image ","b4f5494c":"# Plotting loss with respect to epoch","0b90d5f0":"# Model summary","f384fffd":"# Using Data with Conventioal Neural Network ","f1e282f6":"# Plotting accuracy with respect to epoch","c67a01cf":"# Initialize the model along with the input shape","a993503b":"# Choosing Random Images and See Results","322abf0b":"# We here using Conventional Neural Network (CNN) to get the best Accuracy .","b0216dd4":"# Reading Data ","62b7719d":"#  Prepering Training & Testing data for Work ","4a5b0808":"# Train Data"}}