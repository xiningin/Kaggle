{"cell_type":{"839c3eed":"code","cadd406b":"code","ec69d21c":"code","98ad5a9f":"code","48806b8f":"code","362b9b52":"code","4ae8704f":"code","e33473fa":"code","33171cda":"code","157227f6":"code","22c2b015":"code","8a995fa1":"code","63612580":"code","1bcbdfa5":"code","280bfb5c":"code","302a519f":"code","f9317cc5":"code","74f2b95d":"code","7802f0c1":"code","07d8e6ff":"code","dd995175":"code","1b664a76":"code","4fe08bc4":"code","6354bb1d":"markdown","ce7f66bf":"markdown","15660566":"markdown","e47a7461":"markdown","98e23703":"markdown","2331a8ca":"markdown","d594c001":"markdown","26ded815":"markdown","65e2d49a":"markdown","f70a946e":"markdown","26df76ad":"markdown","0c622a6a":"markdown","d5a9ced5":"markdown","89afe707":"markdown","73ccb295":"markdown","4f680982":"markdown","2b755e08":"markdown","1ff54a87":"markdown","10a0f1bc":"markdown"},"source":{"839c3eed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","cadd406b":"train = pd.read_csv(\"..\/input\/train_V2.csv\")\ntest = pd.read_csv(\"..\/input\/test_V2.csv\")\n\n#Check the shape of data\nprint(train.shape)\nprint(test.shape)\ntrain.dtypes","ec69d21c":"train.isnull().sum()","98ad5a9f":"train.winPlacePerc.fillna(train.winPlacePerc.mean(),inplace=True)\ntrain.winPlacePerc.isnull().sum()","48806b8f":"features = list(train.columns)\nprint(features)\n\n#Based on player, so drop \"Id\", \"groupId\", \"matchId\", \"winPlacePerc\"\nfor i in [\"Id\",\"groupId\",\"matchId\",\"winPlacePerc\"]:\n    features.remove(i)\n    \nprint(features)","362b9b52":"kills = [\"damageDealt\", \"DBNOs\", \"headshotKills\", \"killPlace\", \"killPoints\", \"kills\", \"killStreaks\", \"longestKill\", \"roadKills\"]\nteamwork = [\"assists\", \"revives\"]\nmed = [\"boosts\", \"heals\"]\nmovement = [\"rideDistance\", \"swimDistance\", \"walkDistance\"]\nOthers = [\"maxPlace\", \"numGroups\", \"teamKills\", \"vehicleDestroys\", \"weaponsAcquired\", \"winPoints\"]\n\nprint(\"kills: \"+str(len(kills)))\nprint(\"teamwork: \"+str(len(teamwork)))\nprint(\"med: \"+str(len(med)))\nprint(\"movement: \"+str(len(movement)))\nprint(\"Others: \"+str(len(Others)))","4ae8704f":"data = train.copy()\nfor col in kills:\n    print(data[col].describe().drop(\"count\"))\n    print()","e33473fa":"data.loc[data.kills > 10,\"kills\"] = 10\ndata.loc[data.DBNOs > 10,\"DBNOs\"] = 10 ","33171cda":"nrows=3\nncols=3\nfig,axes = plt.subplots(nrows=nrows,ncols=ncols,figsize=(ncols*6,nrows*4))\nfor i in range(ncols):\n    for j in range(nrows):\n        idx=i*ncols+j\n        sns.distplot(data[kills[idx]],kde=True,ax=axes[i][j])","157227f6":"sns.boxplot(x=\"kills\",y=\"winPlacePerc\",data=data)        ","22c2b015":"sns.boxplot(x=\"DBNOs\",y=\"winPlacePerc\",data=data)","8a995fa1":"sns.jointplot(x=\"winPlacePerc\",y=\"damageDealt\",data=data)","63612580":"sns.distplot(data.longestKill,bins=100)","1bcbdfa5":"plt.scatter(x=\"winPlacePerc\",y=\"longestKill\",data=data)","280bfb5c":"data = train.copy()\ndata = data[data['heals'] < data['heals'].quantile(0.99)]\ndata = data[data['boosts'] < data['boosts'].quantile(0.99)]\nprint(data[\"heals\"].describe().drop(\"count\"))\nprint(data[\"boosts\"].describe().drop(\"count\"))","302a519f":"for col in teamwork:\n    print(data[col].describe().drop(\"count\"))\n    print()","f9317cc5":"team = train.groupby(\"groupId\").mean()\nprint(team.shape)\nteam.head()","74f2b95d":"fig,axes=plt.subplots(nrows=1,ncols=2,figsize=(12,6))\nsns.distplot(team[teamwork[0]],kde=False,ax=axes[0],bins=100)\nsns.distplot(team[teamwork[1]],kde=False,ax=axes[1],bins=100)","7802f0c1":"fig,axes=plt.subplots(nrows=1,ncols=2,figsize=(18,6))\nsns.boxplot(x=round(team.assists),y=team.winPlacePerc,ax=axes[0])\nsns.boxplot(x=round(team.revives),y=team.winPlacePerc,ax=axes[1])","07d8e6ff":"#Riding\nride = team.copy()\nride = ride[ride[\"rideDistance\"]<ride[\"rideDistance\"].quantile(0.99)]\nprint(ride[\"rideDistance\"].describe().drop(\"count\"))\nsns.distplot(ride[\"rideDistance\"])\nsns.jointplot(x=\"winPlacePerc\",y=\"rideDistance\",data=team)","dd995175":"#Running\nrun = team.copy()\nrun = run[run[\"walkDistance\"]<run[\"walkDistance\"].quantile(0.99)]\nprint(run[\"walkDistance\"].describe().drop(\"count\"))\nsns.distplot(run[\"walkDistance\"])\nsns.jointplot(x=\"winPlacePerc\",y=\"walkDistance\",data=team)","1b664a76":"swim = team.copy()\nswim = swim[swim[\"swimDistance\"]<swim[\"swimDistance\"].quantile(0.99)]\nprint(swim[\"swimDistance\"].describe().drop(\"count\"))\nsns.distplot(swim[\"swimDistance\"],kde=False)","4fe08bc4":"swim['swimDistance'] = pd.cut(swim['swimDistance'], [-1, 0, 5, 20, 5286], labels=['0m','1-5m', '6-20m', '20m+'])\nsns.boxplot(x=\"swimDistance\",y=\"winPlacePerc\",data=swim)","6354bb1d":"For kills data, commonly we will think about how many people I killed\/knocked down. That's also one of the  direct data to judge your performance in the game. So I will show the kills&DBNOs data first.\n\nThrough the above description, we can know some people kill so many ones(like 60), which may cause some problems for ploting and analyse. And I will set all data larger than 10 as 10 to avoid this.","ce7f66bf":"****2.Exploratory Data Analysis****\n\nColumns Description:\n* **DBNOs** - Number of enemy players knocked.\n* **assists** - Number of enemy players this player damaged that were killed by teammates.\n* **boosts** - Number of boost items used.\n* **damageDealt** - Total damage dealt. Note: Self inflicted damage is subtracted.\n* **headshotKills** - Number of enemy players killed with headshots.\n* **heals** - Number of healing items used.\n* **Id** - Player\u2019s Id\n* **killPlace** - Ranking in match of number of enemy players killed.\n* **killPoints** - Kills-based external ranking of player. (Think of this as an Elo ranking where only kills matter.) If there is a value other than -1 in rankPoints, then any 0 in killPoints should be treated as a \u201cNone\u201d.\n* **killStreaks** - Max number of enemy players killed in a short amount of time.\n* **kills** - Number of enemy players killed.\n* **longestKill** - Longest distance between player and player killed at time of death. This may be misleading, as downing a player and driving away may lead to a large longestKill stat.\n* **matchDuration** - Duration of match in seconds.\n* **matchId** - ID to identify match. There are no matches that are in both the training and testing set.\n* **matchType** - String identifying the game mode that the data comes from. The standard modes are \u201csolo\u201d, \u201cduo\u201d, \u201csquad\u201d, \u201csolo-fpp\u201d, \u201cduo-fpp\u201d, and \u201csquad-fpp\u201d; other modes are from events or custom matches.\n* **rankPoints** - Elo-like ranking of player. This ranking is inconsistent and is being deprecated in the API\u2019s next version, so use with caution. Value of -1 takes place of \u201cNone\u201d.\n* **revives** - Number of times this player revived teammates.\n* **rideDistance** - Total distance traveled in vehicles measured in meters.\n* **roadKills** - Number of kills while in a vehicle.\n* **swimDistance** - Total distance traveled by swimming measured in meters.\n* **teamKills** - Number of times this player killed a teammate.\n* **vehicleDestroys** - Number of vehicles destroyed.\n* **walkDistance** - Total distance traveled on foot measured in meters.\n* **weaponsAcquired** - Number of weapons picked up.\n* **winPoints** - Win-based external ranking of player. (Think of this as an Elo ranking where only winning matters.) If there is a value other than -1 in rankPoints, then any 0 in winPoints should be treated as a \u201cNone\u201d.\n* **groupId** - ID to identify a group within a match. If the same group of players plays in different matches, they will have a different groupId each time.\n* **numGroups** - Number of groups we have data for in the match.\n* **maxPlace** - Worst placement we have data for in the match. This may not match with numGroups, as sometimes the data skips over placements.\n* **winPlacePerc** - The target of prediction. This is a percentile winning placement, where 1 corresponds to 1st place, and 0 corresponds to last place in the match. It is calculated off of maxPlace, not numGroups, so it is possible to have missing chunks in a match.\n\nFrom the description, choose the below columns as most concerned features","15660566":"**2-2 Medicine Items**","e47a7461":"**2-3 Teamwork**\n\nOnly know how to kill is not enough to win, teamwork is also important. In this section, I will mainly discuss two features: \"assists\" and \"revives\"","98e23703":"Before discussing about teamwork data, I also notice an interesting feature --- longestKills. What does this mean?\n","2331a8ca":"Obviously, whatever the running, riding or swimming, always most people move short distance. \nHowever, the charts show us positive corrlation between distance and winPlace. \nAs we know, in the game, avtive area is always shrinking. So players need to keep moving, and also, they must find some good site to ambush others or shoot. That's why more movement leads to a better winPlace. ","d594c001":"Now we will discussing about the movement in the game, including swimming, running and riding.","26ded815":"**2-4 Movement**","65e2d49a":"All the features are numerical, execpt the ID colunms.","f70a946e":"Apparently, kills, DBNOs and damageDealt show  a positive trend.** *More kills\/DBNOs\/damageDealt, more likely to win. ***\n\nIt's easy to understand, because these also represent a player's personal fighting\/shooting skills. Usually, better players are more likely to live to the end! \n\nHowever, personal shooting skills do not mean everything. Teamwork and Strategy also depends. We will discuss later.","26df76ad":"boxplot of kills&DBNOs","0c622a6a":"Maybe this columns is midleading, as downing a player and driving away may lead to a large longestKill stat. But low winPlace always show up with short longestKill, **which indicate the importance of *Sniper rifle and high times scope*.**","d5a9ced5":"**2-1 Kills **\n\nLet's first see the relationship between Kills columns and winPlacePerc!","89afe707":"Considering the group work, need to transform the dataset.","73ccb295":"It's really funny for these two variables.\n\n\"Assists\" shows that **more assists usually lead to a better rank and higher lower bounds. **  Why? I think more assists means more team battles and kills, and teamwork is always powerful than fighting alone.\n\n\"Revives\" shows a different result -- more revives could lead to not bad ranks, but not the winner for most games. Moderate revives is best. From my understanding, too many revives means knocked down several times, which is not good for the finals. ***Avoiding the needless deaths and ready to save teammates at any time should be the best way to win.***","4f680982":"Except Killing, how to make yourself live and move fast is the key to win. There are mainly two kinds of medicine in the game, heals and boosts items. One for keeping health, and the other for boosting the movement. Let's see how they will affect the probability of winning~","2b755e08":"As for the defination of the columns, we can  divide these features into following groups:\n\nkills:[damageDealt, DBNOs, headshotKills, killPlace, killPoints, kills, killStreaks, longestKill, roadKills]\n\nteamwork: [assists, revives]\n\nmed: [boosts, heals]\n\nmovement: [rideDistance, swimDistance, walkDistance]\n\nOthers: [maxPlace, numGroups, teamKills, vehicleDestroys, weaponsAcquired, winPoints]","1ff54a87":"check missing values of the dataset:","10a0f1bc":"**1. Load Data**\n"}}