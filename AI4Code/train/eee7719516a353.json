{"cell_type":{"c2993652":"code","15ddbc91":"code","97164736":"code","d40ec37e":"code","5600a2f8":"code","50b50a40":"code","d3a39ca3":"code","8a056c3f":"code","1e6ca6d1":"code","e2ede1df":"code","320c378f":"code","5b65cc31":"code","9bd5911f":"code","41eaf586":"code","65bf27d0":"code","7fa4dd48":"code","0bfe9694":"code","3c2c3cb8":"code","296a3364":"code","7d583a80":"code","32e72efa":"code","f58ef642":"code","7cfd6717":"code","3073e410":"markdown","89c2e6d6":"markdown","dad9c965":"markdown"},"source":{"c2993652":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.defaultaction = \"ignore\"\n","15ddbc91":"\nimport datetime\nimport math\nimport pandas as pd\nimport random \nimport radar \nfrom faker import Faker\nfake = Faker()\n\ndef generateData(n):\n  listdata = []\n  start = datetime.datetime(2019, 8, 1)\n  end = datetime.datetime(2019, 8, 30)\n  delta = end - start\n  for _ in range(n):\n    date = radar.random_datetime(start='2019-08-1', stop='2019-08-30').strftime(\"%Y-%m-%d\")\n    price = round(random.uniform(900, 1000), 4)\n    listdata.append([date, price])\n  df = pd.DataFrame(listdata, columns = ['Date', 'Price'])\n  df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d')\n  df = df.groupby(by='Date').mean()\n\n  return df","97164736":"a = generateData(100)","d40ec37e":"a.head()","5600a2f8":"import matplotlib.pyplot as plt\nplt.xlabel (\"Dataetime\")\nplt.ylabel(\"Data\")\nplt.plot(a)\nplt.show()","50b50a40":"import calendar\nmon = [i for i in range(1,13)]\nsold = [round(random.uniform(100,200)) for i in mon]\n","d3a39ca3":"plt.xlabel(\"Months \")\nplt.ylabel(\"The No. of Units sold\")\nplt.plot(mon, sold)","8a056c3f":"# This is the actual bar graph\nplt.bar(mon, sold)\nplt.style.use(\"seaborn\")\nplt.xlabel(\"months of year\")\nplt.ylabel(\"the sell of ZOFLOFT\")\nplt.show()","1e6ca6d1":"figure, axis = plt.subplots()\nplt.xticks(mon, calendar.month_name[1:13], rotation = 20)\nplt.xlabel(\"months of year\")\nplt.ylabel(\"the sell of ZOFLOFT\")\nplot = axis.bar(mon, sold)\n\n# For displaying the height of the columns\nfor rectangle in plot:\n    height = rectangle.get_height()\n    axis.text(rectangle.get_x() + rectangle.get_width() \/2., 1.002 * height, '%d' % int(height), ha='center', va = 'bottom')\n    \nplt.show()","e2ede1df":"months = list(range(1, 13))\nsold_quantity = [round(random.uniform(100, 200)) for x in range(1, 13)]\n\nfigure, axis = plt.subplots()\n\nplt.yticks(months, calendar.month_name[1:13], rotation=20)\n\nplot = axis.barh(months, sold_quantity)\n\nfor rectangle in plot:\n  width = rectangle.get_width()\n  axis.text(width + 2.5, rectangle.get_y() + 0.38, '%d' % int(width), ha='center', va = 'bottom')\n\nplt.show()","320c378f":"headers_cols = ['age','min_recommended', 'max_recommended', 'may_be_appropriate_min', 'may_be_appropriate_max', 'min_not_recommended', 'max_not_recommended'] \n\nsleepDf = pd.read_csv('https:\/\/raw.githubusercontent.com\/PacktPublishing\/hands-on-exploratory-data-analysis-with-python\/master\/Chapter%202\/sleep_vs_age.csv', index_col = \"Unnamed: 0\" )\nsleepDf.head(10)","5b65cc31":"sleepDf[\"age_year\"] = sleepDf.age \/\/ 12","9bd5911f":"plt.plot (sleepDf.age_year, sleepDf.min_recommended, 'g--')\nplt.plot (sleepDf.age_year, sleepDf.max_recommended, 'r--')\nplt.xlabel(\"The age in years\")\nplt.ylabel(\"no. of hrs the sleep is recommended\")\nplt.show()","41eaf586":"from sklearn.datasets import load_iris\ndata = load_iris()\nframe = pd.DataFrame(data.data, columns=data.feature_names)\nframe[\"species\"] = data.target\nframe.head()","65bf27d0":"plt.rcParams['figure.figsize'] = (8, 6)\nplt.rcParams['figure.dpi'] = 125\nsns.set()\nplt.xlabel(\"sepal length (cm)\")\nplt.ylabel(\"sepal width (cm)\")\nplt.scatter(frame[\"sepal length (cm)\"], frame[\"sepal width (cm)\"], c= frame.species) \nplt.show()","7fa4dd48":"plt.rcParams['figure.figsize'] = (8, 6)\nplt.rcParams['figure.dpi'] = 125\nsns.set()\nplt.xlabel(\"petal length (cm)\")\nplt.ylabel(\"petal width (cm)\")\nplt.scatter(frame[\"petal length (cm)\"], frame[\"petal width (cm)\"], c= frame.species) \nplt.show()","0bfe9694":"df = frame\nplt.scatter(frame[\"petal length (cm)\"], frame[\"petal width (cm)\"],\n            s=50*frame[\"petal length (cm)\"]*frame[\"petal width (cm)\"], \n            c=df.species,\n            alpha=0.5\n            )\nplt.title(\"The Bubble plot of the petal lenghts to the petals width\")\nplt.show()","3c2c3cb8":"# Years under consideration\nyears = [\"2010\", \"2011\", \"2012\", \"2013\", \"2014\"]\n\n# Available watt\nwatts = ['4.5W', '6.0W', '7.0W','8.5W','9.5W','13.5W','15W']\nunitsSold = [\n             [65, 141, 88, 111, 104, 71, 99],\n             [85, 142, 89, 112, 103, 73, 98],\n             [75, 143, 90, 113, 89, 75, 93],\n             [65, 144, 91, 114, 90, 77, 92],\n             [55, 145, 92, 115, 88, 79, 93],\n            ]\n\n# Define the range and scale for the y axis\nvalues = np.arange(0, 600, 100)","296a3364":"led_bulbs = pd.DataFrame(unitsSold, columns = watts)","7d583a80":"led_bulbs.index = years","32e72efa":"led_bulbs.head()","f58ef642":"plt.plot(led_bulbs.index, led_bulbs[\"4.5W\"], \"g--\", marker = \"o\")\n\nplt.title(\"The sale of bulbs over the year\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"No. of units sold\")\n\nplt.show()","7cfd6717":"yearsOfExperience = np.array([10, 16, 14, 5, 10, 11, 16, 14, 3, 14, 13, 19, 2, 5, 7, 3, 20,\n       11, 11, 14, 2, 20, 15, 11, 1, 15, 15, 15, 2, 9, 18, 1, 17, 18,\n       13, 9, 20, 13, 17, 13, 15, 17, 10, 2, 11, 8, 5, 19, 2, 4, 9,\n       17, 16, 13, 18, 5, 7, 18, 15, 20, 2, 7, 0, 4, 14, 1, 14, 18,\n        8, 11, 12, 2, 9, 7, 11, 2, 6, 15, 2, 14, 13, 4, 6, 15, 3,\n        6, 10, 2, 11, 0, 18, 0, 13, 16, 18, 5, 14, 7, 14, 18])\nplt.hist(yearsOfExperience)\nplt.xlabel(\"Years of experience with Python Programming\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Distribution of Python programming experience in the vocational training session\")\n# This line represents the mean of the distributions\nplt.axvline(x=yearsOfExperience.mean(), linewidth=3, color = 'g') \nplt.show()","3073e410":"####  Hopefully this will help you","89c2e6d6":"#### This are one of my fav. plots","dad9c965":"#  -> :)"}}