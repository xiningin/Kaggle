{"cell_type":{"c2bacafa":"code","9349b9a6":"code","7994dc73":"code","81682c19":"code","431fd76c":"code","a7a9f417":"code","25f733cb":"code","fff29f13":"code","aecd36cd":"code","80df1b78":"code","daab9401":"code","ee82d4b6":"code","1d7168d3":"code","fee82026":"code","4b097ff2":"code","5ff7343c":"code","0a8aab5e":"code","cc79bcc6":"code","e4573fcd":"code","76e702c9":"code","f4a2a6ab":"code","26e61d04":"code","6d7aba9f":"code","ecaa110d":"code","124f5622":"code","df4ae7ea":"code","49817a6e":"code","bf9df83b":"markdown","4d2433f3":"markdown","9a5f1915":"markdown","56dc030a":"markdown","ff7efc56":"markdown","45c341b3":"markdown","5e7f250c":"markdown"},"source":{"c2bacafa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9349b9a6":"data = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\ntrain_data = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')","7994dc73":"data.info()","81682c19":"print(data.shape)\ndata.head()","431fd76c":"data.isnull().sum()","a7a9f417":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy = 'most_frequent')\ndata = pd.DataFrame(imputer.fit_transform(data))\ndata.columns = train_data.columns\ndata.isnull().sum()","25f733cb":"sns.countplot(x = \"type\",data = data,palette = 'Greens_d')","fff29f13":"plt.figure(figsize=(12,10))\nsns.set(style=\"darkgrid\")\nsns.countplot(x = \"release_year\",data = data,order = data['release_year'].value_counts().index[0:15], hue = 'type')","aecd36cd":"plt.figure(figsize=(12,10))\nsns.set(style=\"darkgrid\")\nsns.countplot(y = \"rating\",data = data, hue = 'type')","80df1b78":"pd.options.mode.chained_assignment = None  # default='warn'\nmovie_data = data[data.type == 'Movie']\nmovie_data['duration'] = movie_data['duration'].str.replace(' min','')\nmovie_data['duration'] = movie_data['duration'].astype(str).astype(int)\n\nmovie_data.duration","daab9401":"sns.kdeplot(movie_data['duration'])","ee82d4b6":"pd.options.mode.chained_assignment = None  # default='warn'\ntv_data = data[data.type == 'TV Show']\ntv_data['duration'] = tv_data['duration'].str.replace(' Season','')\ntv_data['duration'] = tv_data['duration'].str.replace('s','')\ntv_data['duration'] = tv_data['duration'].astype(str).astype(int)\n\ntv_data.duration","1d7168d3":"sns.kdeplot(tv_data['duration'])","fee82026":"tv_show = tv_data.loc[:,['title','duration']]\ntv_show = tv_show.sort_values(by = 'duration',ascending = False)\ntop_10 = tv_show[0:11]\ntop_10.plot(kind='bar',x='title',y='duration', color='purple')","4b097ff2":"country_count=data['country'].value_counts().sort_values(ascending=False)\ncountry_count=pd.DataFrame(country_count)\ntopcountries=country_count[0:11]\ntopcountries","5ff7343c":"topcountries.plot(kind = 'bar')","0a8aab5e":"netflix_date = data[['date_added']].dropna()\nnetflix_date['year'] = netflix_date['date_added'].apply(lambda x : x.split(', ')[-1])\nnetflix_date['month'] = netflix_date['date_added'].apply(lambda x : x.lstrip().split(' ')[0])\ndf = netflix_date.groupby('year')['month'].value_counts()","cc79bcc6":"def clean_data(x):\n    return str.lower(x.replace(' ',''))","e4573fcd":"train_data = data.fillna('')\ntrain_data.head()","76e702c9":"features=['title','director','cast','listed_in','description']\ntrain_data = train_data[features]\n\nfor feature in features:\n    train_data[feature] = train_data[feature].apply(clean_data)\n\ntrain_data.head()","f4a2a6ab":"def soup_words(x) :\n    return x['title']+ ' ' + x['director'] + ' ' + x['cast'] + ' ' +x['listed_in']+' '+ x['description']","26e61d04":"train_data['soup'] = train_data.apply(soup_words,axis = 1)","6d7aba9f":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(train_data['soup'])\n\ncosine_sim = cosine_similarity(count_matrix, count_matrix)","ecaa110d":"train_data = train_data.reset_index()\nindices = pd.Series(train_data.index,index = train_data['title'])\nindices","124f5622":"def get_recommendation(title, cosine_sim = cosine_sim):\n    title = title.replace(' ', '').lower()\n    idx = indices[title]\n    \n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores,key = lambda x : x[1],reverse = True )\n    \n    sim_scores = sim_scores[1:11]\n    \n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return data['title'].iloc[movie_indices]","df4ae7ea":"get_recommendation('Peaky Blinders', cosine_sim)","49817a6e":"get_recommendation('Mortel')","bf9df83b":"Inspect Data","4d2433f3":"**Duration Analysis**","9a5f1915":"**Checking for NaN values**","56dc030a":"**Recommender**","ff7efc56":"**Soup of Words**","45c341b3":"**Filling values with most frequent value**","5e7f250c":"**Counting unique values in columns**"}}