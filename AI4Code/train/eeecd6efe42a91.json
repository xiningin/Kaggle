{"cell_type":{"068c5948":"code","79582dc8":"code","b1348c15":"code","ae6d89c6":"code","5c420fd1":"code","07987747":"code","37acc66a":"code","4177691a":"code","c80144cd":"code","fa3aec71":"code","636032db":"code","c9263c25":"code","6e078ad9":"code","285f828d":"code","94f482e9":"markdown","775b4703":"markdown","9724a743":"markdown"},"source":{"068c5948":"import pandas as pd \nimport numpy as np ","79582dc8":"# Author: Avish Jadwani\n# Last Updated: 01\/10\/2020\n\n# Function to remove a column from a data frame manualy\ndef remove_col(df):\n    col = input(\"Enter the column you want to remove, If you want to remove multiple columns separate it by comma eg. variable1,variable2\")\n    if col == '':\n        print(\"No column removed\")\n    else:\n        col=col.split(\",\")\n        df.drop(columns=col,axis=1, inplace= True)\n    \n    print(\"Removed column {}\".format(col))\n# Function to remove columns with '0' values \ndef  rem_zero_cols(df):\n    rem = []\n    for col in df:\n        if( sum(df[col]==0) >= (0.95 * len(df)) ):\n        \n            rem.append(col)\n    df.drop(rem, axis=1, inplace = True)\n    print('Removed columns {} with 0 values'.format(rem))\n    \n    \n# Function to remove columns with null values \ndef  rem_null_cols(df):\n    import pandas as pd\n    import numpy as np\n    rem = []\n    for col in df:\n        if(sum(pd.notna(df[col]))==0):\n            rem.append(col)\n    df.drop(rem, axis=1, inplace = True)\n    print('Removed columns {} with all null values'.format(rem))\n    \n# Identifying and Removing Unique identifiers\ndef uniq_iden(df):\n    rem = []\n    for col in df:\n        if df[col].nunique() == len(df):\n            rem.append(col)\n    df.drop(rem,axis=1, inplace =True)\n    print(\"Removed uinque identifiers {}  \".format(rem))\n# Function to replace NA values \ndef replace_NA(df,num):\n    df.fillna(num, inplace = True)\n\n# Replace NA values with -9999, One Hot encoding for categorical variables, isolation forest, result stored in excel file with name Outlier_result\ndef hotenc_isof_btrace(df):\n    import pandas as pd\n    import numpy as np\n    lsto=[]\n    lstflt=[]\n    df2 = pd.DataFrame()\n    df_short= pd.DataFrame()\n    df_catvar = pd.DataFrame()\n    n=0\n    #Replace NA values with -9999\n    #-9999 can be changed to any value\n    replace_NA(df,-9999)\n    # Performing one hot encoding by subsettig categorical variables\n    for col in df:\n        if(df[col].dtype == 'O'):\n            lsto.append(col)\n        elif(df[col].dtype != 'O'):\n            lstflt.append(col)\n    df2 =pd.get_dummies(df, prefix_sep=\"__\", columns=lsto)\n    \n    # Performing isolation forest \n    from sklearn.ensemble import IsolationForest\n\n    isofor = IsolationForest(n_estimators=200,contamination=0.01, behaviour='deprecated')\n    isofor.fit(df2)\n    predict = isofor.predict(df2)\n    # Storing results of isolation forest in 'Outlier' variable in data frame\n    df2['Outlier'] = predict\n    # Restoring data frame to original format, ie. without one hot encoding\n    lstflt.append('Outlier')\n    df_catvar = df.loc[:,lsto]\n    df_short = df2.loc[:,lstflt]\n    result = pd.concat([df_catvar,df_short], axis =1 , sort=False)\n    result.replace(-9999, np.nan,inplace =True )\n    \n    n = n+len(result.columns)\n    \n    def highlight_lessthan(x):\n        if x.Outlier == -1:\n            return ['background-color: yellow']*n\n        else:\n             return ['background-color: white']*n\n    result = result.style.apply(highlight_lessthan, axis= 1)\n    \n    \n    result.to_excel(\"NormOutlier_result.xlsx\")\n\n\n\n# Complete analysis in one function \n\ndef isoforest(df):\n    import pandas as pd\n    import numpy as np\n    import GCOutlier as gc\n    # Select column to remove \n    gc.remove_col(df)\n    #remove columns with null values\n    gc.rem_null_cols(df)\n    # Remove colmns with 0\n    gc.rem_zero_cols(df)\n    # Remove Unique identifiers\n    gc.uniq_iden(df)\n    \n    lsto=[]\n    lstflt=[]\n    df2 = pd.DataFrame()\n    df_short= pd.DataFrame()\n    df_catvar = pd.DataFrame()\n    n=0\n    #Replace NA values with -9999\n    #-9999 can be changed to any value\n    replace_NA(df,-9999)\n    # Performing one hot encoding by subsettig categorical variables\n    for col in df:\n        if(df[col].dtype == 'O'):\n            lsto.append(col)\n        elif(df[col].dtype != 'O'):\n            lstflt.append(col)\n    df2 =pd.get_dummies(df, prefix_sep=\"__\", columns=lsto)\n    \n    # Performing isolation forest \n    from sklearn.ensemble import IsolationForest\n\n    isofor = IsolationForest(n_estimators=200,contamination=0.01, behaviour='deprecated')\n    isofor.fit(df2)\n    predict = isofor.predict(df2)\n    # Storing results of isolation forest in 'Outlier' variable in data frame\n    df2['Outlier'] = predict\n    # Restoring data frame to original format, ie. without one hot encoding\n    lstflt.append('Outlier')\n    df_catvar = df.loc[:,lsto]\n    df_short = df2.loc[:,lstflt]\n    result = pd.concat([df_catvar,df_short], axis =1 , sort=False)\n    result.replace(-9999, np.nan,inplace =True )\n    \n    n = n+len(result.columns)\n    \n    def highlight_lessthan(x):\n        if x.Outlier == -1:\n            return ['background-color: yellow']*n\n        else:\n             return ['background-color: white']*n\n    result = result.style.apply(highlight_lessthan, axis= 1)\n    \n    \n    result.to_excel(\"NormOutlier_result.xlsx\")\n    \n# Function for one hot encoding , isolation forest, back tracing and saving outliers as a separate file \ndef return_Outlier(df):\n    import pandas as pd\n    import numpy as np\n    lsto=[]\n    lstflt=[]\n    df2 = pd.DataFrame()\n    df_short= pd.DataFrame()\n    df_catvar = pd.DataFrame()\n    n=0\n    #Replace NA values with -9999\n    #-9999 can be changed to any value\n    replace_NA(df,-9999)\n    # Performing one hot encoding by subsettig categorical variables\n    for col in df:\n        if(df[col].dtype == 'O'):\n            lsto.append(col)\n        elif(df[col].dtype != 'O'):\n            lstflt.append(col)\n    df2 =pd.get_dummies(df, prefix_sep=\"__\", columns=lsto)\n    \n    # Performing isolation forest \n    from sklearn.ensemble import IsolationForest\n\n    isofor = IsolationForest(n_estimators=200,contamination=0.01, behaviour='deprecated')\n    isofor.fit(df2)\n    predict = isofor.predict(df2)\n    # Storing results of isolation forest in 'Outlier' variable in data frame\n    df2['Outlier'] = predict\n    # Restoring data frame to original format, ie. without one hot encoding\n    lstflt.append('Outlier')\n    df_catvar = df.loc[:,lsto]\n    df_short = df2.loc[:,lstflt]\n    result = pd.concat([df_catvar,df_short], axis =1 , sort=False)\n    result.replace(-9999, np.nan,inplace =True )\n    \n    n = n+len(result.columns)\n    \n    \n    #def highlight_lessthan(x):\n        #if x.Outlier == -1:\n            #return ['background-color: yellow']*n\n        #else:\n             #return ['background-color: white']*n\n    #result = result.style.apply(highlight_lessthan, axis= 1)\n    result = result[result.loc[:,'Outlier']==-1]\n    result = result.drop('Outlier',axis=1)\n    \n    result.to_excel(\"Outlier_result.xlsx\")\n    \n# Function to merge data with polyciynum\ndef change(df):\n    import pandas as pd\n    import numpy as np\n    #def remove_col(df):\n    col = input(\"Enter the column you want to remove. If you have more than 1 column separate it with comma without any space eg column1,column2\")\n    if col == '':\n        print(\"No column removed\")\n    else:\n        col=col.split(\",\")\n        removedcol = df.loc[:,col]\n        df.drop(columns=col,axis=1, inplace= True)\n        print(\"Removed column {}\".format(col))\n    \n    lsto=[]\n    lstflt=[]\n    df2 = pd.DataFrame()\n    df_short= pd.DataFrame()\n    df_catvar = pd.DataFrame()\n    n=0\n    #Replace NA values with -9999\n    #-9999 can be changed to any value\n    replace_NA(df,-9999)\n    # Performing one hot encoding by subsettig categorical variables\n    for col in df:\n        if(df[col].dtype == 'O'):\n            lsto.append(col)\n        elif(df[col].dtype != 'O'):\n            lstflt.append(col)\n    df2 =pd.get_dummies(df, prefix_sep=\"__\", columns=lsto)\n    \n    # Performing isolation forest \n    from sklearn.ensemble import IsolationForest\n\n    isofor = IsolationForest(n_estimators=200,contamination=0.01, behaviour='deprecated')\n    isofor.fit(df2)\n    predict = isofor.predict(df2)\n    # Storing results of isolation forest in 'Outlier' variable in data frame\n    df2['Outlier'] = predict\n    # Restoring data frame to original format, ie. without one hot encoding\n    lstflt.append('Outlier')\n    df_catvar = df.loc[:,lsto]\n    df_short = df2.loc[:,lstflt]\n    result = pd.concat([df_catvar,df_short], axis =1 , sort=False)\n    result=pd.concat([removedcol,result],axis=1,sort=False)\n    result.replace(-9999, np.nan,inplace =True )\n    \n    n = n+len(result.columns)\n    \n    \n    #def highlight_lessthan(x):\n        #if x.Outlier == -1:\n            #return ['background-color: yellow']*n\n        #else:\n             #return ['background-color: white']*n\n    #result = result.style.apply(highlight_lessthan, axis= 1)\n    result.drop('Outlier', axis=1)\n    return result\n    #result.to_excel(\"Outlier_result.xlsx\")\n# Final Function to perform isoforest- it also removes the input columns,multiple columns can also be removed. Gives try agin #message\ndef gcoutlier(df):\n    import pandas as pd\n    import numpy as np\n    #def remove_col(df):\n    def check_elements(df,col):\n        col = col.split(\",\")\n        for i in range(0,len(col)):\n            if(col[i] not in list(df.columns)):\n                return -1\n                break\n    while True:\n        \n        col = input(\"Enter the column you want to remove. \\n If you have more than 1 column separate it with comma(,)\")\n        if col == '':\n            print(\"No column removed\")\n            merge = -1\n            break\n        elif check_elements(df,col)==-1:\n            #check = check_elements(df,col)\n            #if check==-1:\n            print('Incorrect column name, Try Again')\n            continue\n        else:\n            col=col.split(\",\")\n            removedcol = df.loc[:,col]\n            df.drop(columns=col,axis=1, inplace= True)\n            merge = 1\n            print(\"Removed column {}\".format(col))\n            break\n    \n    lsto=[]\n    lstflt=[]\n    df2 = pd.DataFrame()\n    df_short= pd.DataFrame()\n    df_catvar = pd.DataFrame()\n    n=0\n    #Replace NA values with -9999\n    #-9999 can be changed to any value\n    replace_NA(df,-9999)\n    # Performing one hot encoding by subsettig categorical variables\n    for col in df:\n        if(df[col].dtype == 'O'):\n            lsto.append(col)\n        elif(df[col].dtype != 'O'):\n            lstflt.append(col)\n    df2 =pd.get_dummies(df, prefix_sep=\"__\", columns=lsto)\n    \n    # Performing isolation forest \n    from sklearn.ensemble import IsolationForest\n\n    isofor = IsolationForest(contamination='auto', behaviour='deprecated')\n    isofor.fit(df2)\n    predict = isofor.predict(df2)\n    # Storing results of isolation forest in 'Outlier' variable in data frame\n    df2['Outlier'] = predict\n    # Restoring data frame to original format, ie. without one hot encoding\n    lstflt.append('Outlier')\n    df_catvar = df.loc[:,lsto]\n    df_short = df2.loc[:,lstflt]\n    result = pd.concat([df_catvar,df_short], axis =1 , sort=False)\n    if merge == 1:\n        result=pd.concat([removedcol,result],axis=1,sort=False)\n    result.replace(-9999, np.nan,inplace =True )\n    \n    n = n+len(result.columns)\n    \n    \n    #def highlight_lessthan(x):\n        #if x.Outlier == -1:\n            #return ['background-color: yellow']*n\n        #else:\n             #return ['background-color: white']*n\n    #result = result.style.apply(highlight_lessthan, axis= 1)\n    result.drop('Outlier', axis=1)\n    #return result\n    result.to_excel(\"Outlier_result.xlsx\")\n\n    \n    \n    \n    ","b1348c15":"import os \nos.getcwd()","ae6d89c6":"os.chdir('..')","5c420fd1":"os.listdir()","07987747":"df = pd.read_csv(\".\/input\/creditcardfraud\/creditcard.csv\")","37acc66a":"df.info()\n\n# Removing columsn which has all the null values\nrem_null_cols(df)\nuniq_iden(df)","4177691a":"# gcoutlier performs isolation forest \n# This function pops up a dialog box to enter a column name to delete it manually \n# Fucntion stores the result of the Isolation forest in the directory with filename Outlier_results.xlsx\n#in our case Class\ngcoutlier(df)","c80144cd":"df2 = pd.read_excel(\"Outlier_result.xlsx\")","fa3aec71":"df2.head()","636032db":"from sklearn.metrics import confusion_matrix\ndf2['Outlier'].replace(1,0, inplace = True)\ndf2['Outlier'].replace(-1,1,inplace = True)\nactual = df2['Class']\npred = df2['Outlier']\nconfusion_matrix(actual,pred)","c9263c25":"pd.crosstab(actual,pred,rownames=['Actual'],colnames=['Predicted'])","6e078ad9":"from sklearn.metrics import accuracy_score \naccuracy_score(actual, pred) ","285f828d":"# True Positive Rate\n\n415\/(77+415)","94f482e9":"The accuracy of the model is 0.96","775b4703":"# Importing Required Libraries","9724a743":"# Writing functions to performs data preprocessing and Outlier detection using Isolation Forest Algoritm"}}