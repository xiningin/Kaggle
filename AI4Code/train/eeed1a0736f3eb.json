{"cell_type":{"ebd58a45":"code","55f5cce7":"code","d5545278":"code","cac339d0":"code","150b3fa3":"code","24099500":"code","0c22c713":"code","ee80de60":"code","9f0479d7":"code","0373f02c":"code","8275db48":"code","367a4510":"code","6489d993":"code","57898f07":"code","46eb4181":"code","19e0e40b":"code","5519e0d0":"code","1fe2d0c7":"code","ba29e4f1":"code","a8748b8d":"code","3ed7640f":"code","b69cd5dd":"code","db059dc5":"code","66462f84":"code","f1ab0bec":"code","732eb840":"code","b6c7a4ec":"code","684ebd9a":"code","d84988ac":"code","dcbddc86":"code","f7cc9ad1":"markdown","b58a9319":"markdown","86b8fa83":"markdown","2d8ea976":"markdown","17e6ebed":"markdown","66c9ffe7":"markdown","a5d6aeaf":"markdown","70e7ebd5":"markdown","76480636":"markdown","af0ee3d1":"markdown","0a8ccb9d":"markdown","a3e44c59":"markdown","97750519":"markdown","2a0ccf3e":"markdown","95e5f4a8":"markdown"},"source":{"ebd58a45":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport string\nimport re\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff","55f5cce7":"data_df = pd.read_csv(\"..\/input\/data-analyst-jobs\/DataAnalyst.csv\",index_col=0) # col index is given as 0\n","d5545278":"data_df.info() # There are 15 relevant columns","cac339d0":"data_df.describe(include=\"all\").T","150b3fa3":"states = [\"AL\", \"AK\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DC\", \"DE\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\"]","24099500":"data_df['Salary Estimate'] = data_df['Salary Estimate'].apply(lambda x: '0K-0K' if x == '-1' else x)\ndata_df['Salary Estimate'] = data_df['Salary Estimate'].apply(lambda x: x.split('(')[0])\ndata_df['Min Salary'] = data_df['Salary Estimate'].apply(lambda x: x.split('-')[0].replace('$',''))\ndata_df['Min Salary'] = data_df['Min Salary'].apply(lambda x: int(x.replace('K','000')) )\n\ndata_df['Max Salary']= data_df['Salary Estimate'].apply(lambda x: x.split('-')[1].replace('$',''))\ndata_df['Max Salary'] = data_df['Max Salary'].apply(lambda x: int(x.replace('K','000')))\n\ndata_df['Revenue'] = data_df['Revenue'].apply(lambda x: 'Unspecified' if x == '-1' else x)\ndata_df['Easy Apply'] = data_df['Easy Apply'].apply(lambda x: False if x == '-1' else True)\ndata_df['State'] = data_df['Location'].apply(lambda x: x[-2:])\ndata_df['HQState'] = data_df['Headquarters'].apply(lambda x: 'Unspecified' if x == '-1' else x.split(\",\")[1].strip())\ndata_df['Type of ownership'] = data_df['Type of ownership'].apply(lambda x: 'Unspecified' if x == '-1' else x)\ndata_df['US Job'] = data_df['HQState'].apply(lambda x: True if x.strip() in states else False)\ndata_df['Industry'] = data_df['Industry'].apply(lambda x : 'Unspecified' if x == '-1' else x)\ndata_df['Sector'] = data_df['Sector'].apply(lambda x : 'Unspecified' if x == '-1' else x)\ndata_df['Company Name'] = data_df['Company Name'].astype(str).apply(lambda x : x[:-4])\ndata_df.head(3)","0c22c713":"company = data_df['Company Name'].value_counts().nlargest(n=15)\nfig = px.bar(y=company.values,\n       x=company.index,\n       orientation='v',\n       color=company.index,\n       text=company.values,\n       color_discrete_sequence= px.colors.qualitative.Bold)\n\nfig.update_traces(texttemplate='%{text:.2s}', \n                  textposition='outside', \n                  marker_line_color='rgb(8,48,107)', \n                  marker_line_width=1.5, \n                  opacity=0.7)\n\nfig.update_layout(width=1000, \n                  showlegend=False, \n                  xaxis_title=\"Company\",\n                  yaxis_title=\"Count\",\n                  title=\"Top 15 Companies by Job count\")\nfig.show()","ee80de60":"jobs = data_df['Job Title'].value_counts().nlargest(n=15)\nfig = px.bar(y=jobs.values, x=jobs.index, orientation='v', color=jobs.index, text=jobs.values, color_discrete_sequence= px.colors.qualitative.Bold)\n\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside', marker_line_color='rgb(8,48,107)',marker_line_width=1.5, opacity=0.7)\nfig.update_layout(width=1000, showlegend=False, xaxis_title=\"Job Title\", yaxis_title=\"Count\", title=\"Top 15 Job titles\")\nfig.show()","9f0479d7":"industry = data_df['Industry'].value_counts().nlargest(n=15)\nfig = px.pie(industry, values = industry.values, names = industry.index, title=\"Top 10 'Industry' of the Jobs posted\", color=industry.values, color_discrete_sequence=px.colors.qualitative.Prism)\nfig.update_traces(opacity=0.7,marker_line_color='rgb(8,48,107)', marker_line_width=1.5)\nfig.update_layout(title_x=0.5)\nfig.show()","0373f02c":"g = sns.barplot(y = data_df['Sector'].value_counts()[0:10],x = data_df['Sector'].value_counts()[0:10].index)\ng.set_title(\"Top 10 sectors of the jobs posted\")\ng.set_xticklabels(labels = data_df['Sector'].value_counts()[0:10].index,rotation=90)\nfor p in g.patches:\n        g.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')","8275db48":"top_rating = data_df[data_df['Rating'] >= 4.0]\ntop_rating.head(3)","367a4510":"low_rating = data_df[data_df['Rating'] < 0.5]\nlow_rating.head(3)","6489d993":"labels = data_df.Rating.value_counts(bins=5).index\nvalues = data_df.Rating.value_counts(bins=5).values\n\nplt.figure(figsize = (8, 8))\nplt.title(\"No. of companies across Rating bins\")\nax = sns.barplot(x=labels, y=values)\nfor i, p in enumerate(ax.patches):\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2., height + 0.1, values[i],ha=\"center\")","57898f07":"\ntype_ownership_df = data_df['Type of ownership'].value_counts(normalize=True)\ntype_ownership_df","46eb4181":"ownership = data_df['Type of ownership'].value_counts()\nownership = pd.DataFrame(ownership)\nownership = ownership.reset_index()\nfig = px.pie(ownership, values='Type of ownership', names='index', title=\"Type of ownership\", color_discrete_sequence = px.colors.qualitative.Vivid, hole = 0.5)\nfig.show()","19e0e40b":"state_df = data_df['State'].value_counts().to_frame().reset_index().rename(columns={'index':'state','State':'count'}).sort_values(by='count',ascending=False)\n\nfig = go.Figure(go.Bar(\n    y= state_df['state'].sort_index(ascending=False), \n    x= state_df['count'].sort_index(ascending=False),  \n     orientation='h',\n      text=state_df['count'].sort_index(ascending=False),\n    textposition='outside',\n    marker_color=state_df['count'].sort_index(ascending=False),\n))\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title_text='All States - Job Postings',yaxis_title='States',\n                 xaxis_title='Total number of Jobs', title_x=0.5,height=1000)\nfig.show()","5519e0d0":"US_jobs_df = data_df[data_df['US Job'] == True]\nhqstate_df = US_jobs_df['HQState'].value_counts().to_frame().reset_index().rename(columns={'index':'state','HQState':'count'}).sort_values(by='count',ascending=False)\n\nfig = go.Figure(go.Bar(\n    y= hqstate_df['state'].sort_index(ascending=False), \n    x= hqstate_df['count'].sort_index(ascending=False),  \n     orientation='h',\n      text=hqstate_df['count'].sort_index(ascending=False),\n    textposition='outside',\n    marker_color=hqstate_df['count'].sort_index(ascending=False),\n))\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title_text='All HeadQuarters States - Job Postings',yaxis_title='States',\n                 xaxis_title='Total number of Jobs', title_x=0.5,height=1000)\nfig.show()","1fe2d0c7":"g = sns.catplot(x=\"Revenue\",y=\"Max Salary\",kind= \"bar\",data=data_df, height=10, aspect=12\/10)\ng.set_xticklabels(rotation=90)","ba29e4f1":"g1 = sns.catplot(x=\"Revenue\",y=\"Min Salary\",kind=\"point\",data=data_df)\n#g1.set_title(\"Point plot for Min Salary\")\ng1.set_xticklabels(rotation=90)","a8748b8d":"hist_data = [data_df['Min Salary'], data_df['Max Salary']]\ngroup_labels = ['Minimum Salary','Maximum Salary'] # name of the dataset\ncolors = ['red','green']\n\nfig = ff.create_distplot(hist_data, group_labels,colors=colors)\n#fig.update_layout(title_text=\"Distribution of Min\/Max Salary\",title_x=0.5)\nfig.show()\n","3ed7640f":"# Min Salary Histogram\nsns.distplot(data_df['Min Salary'],rug=True, kde=True, color='g').set_title(\"Distribution of Mininum Salary for Data Analyst jobs\")","b69cd5dd":"# Max Salary Histogram\nsns.distplot(data_df['Max Salary'],color='r',rug=False, kde=False).set_title(\"Distribution Plot for Max Salary\")","db059dc5":"print(data_df['HQState'].unique())\nprint(data_df['HQState'].nunique())","66462f84":"sns.catplot(x=\"State\", y=\"Min Salary\", kind=\"box\", data=data_df, height=12, aspect=16\/12)# hue=\"Easy Apply\"","f1ab0bec":"group3 = data_df.groupby(['State']).median()\ngroup3[['Min Salary', 'Max Salary']]\n\ngroup1 = data_df.groupby(['State']).mean()\ngroup1[['Min Salary', 'Max Salary']]\n\ngroup2 = data_df.groupby(['State']).count()\ngroup2[['Job Title']]\n\nsns.catplot(x=\"State\", y=\"Max Salary\", kind=\"violin\", data=data_df, height=10, aspect=14\/10)# hue=\"Easy Apply\", split=True","732eb840":"\ndata_df.groupby('Industry')['Job Title'].count() \\\n    .plot(kind='bar', figsize=(15, 5), title='Target (accuracy group)')\nplt.show()","b6c7a4ec":"data_df.groupby('Sector')['Job Title'].count() \\\n    .plot(kind='bar', figsize=(15, 5), color = 'm',title='Sectors and Job titles')\nplt.show()","684ebd9a":"\ndef clean_text(text):\n   \n    text_lc = \"\".join([word.lower() for word in text if word not in string.punctuation]) # remove puntuation\n    text_rc = re.sub('\\n', '', text_lc)\n    text_rc = re.sub('[0-9]+', '', text_lc)\n    tokens = re.split('\\W+', text_rc)    # tokenization\n    \n    return text","d84988ac":"data_df['Clean Job Description'] = data_df['Job Description'].apply(clean_text)","dcbddc86":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nimport warnings \nwarnings.filterwarnings('ignore')\nfrom PIL import Image\ndef plot_wordcloud(text, mask=None, max_words=400, max_font_size=120, figure_size=(14.0,12.0), \n                   title = None, title_size=40, image_color=False):\n    stopwords = set(STOPWORDS)\n    more_stopwords = {'re','ha','nWe','Name','bring','Are','We','one', 'br', 'Unknown','Yes','nYou'}\n    stopwords = stopwords.union(more_stopwords)\n\n    wordcloud = WordCloud(background_color='white',\n                    stopwords = stopwords,\n                    max_words = max_words,\n                    max_font_size = max_font_size, \n                    random_state = 42,\n                          contour_width=2, \n                          contour_color='steelblue',\n                    mask = mask)\n    wordcloud.generate(text)\n    \n    plt.figure(figsize=figure_size)\n    if image_color:\n        image_colors = ImageColorGenerator(mask);\n        plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation=\"bilinear\");\n        plt.title(title, fontdict={'size': title_size, 'color': 'red','verticalalignment': 'bottom'})\n    else:\n        plt.imshow(wordcloud);\n        plt.title(title, fontdict={'size': title_size, 'color': 'red', 'verticalalignment': 'bottom'})\n    plt.axis('off');\n    plt.tight_layout()  \n    \nd = '..\/input\/masks12\/'\n\ncomments_text = str(data_df['Clean Job Description']).lower()\ncomments_mask = np.array(Image.open(d + 'mask_mask.jfif'))\nplot_wordcloud(comments_text, comments_mask, max_words=800, max_font_size=100, \n               title = 'Most common words in Job Description', title_size=50, image_color=True)","f7cc9ad1":"<a id=\"1\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Top 15 companies (by number of jobs posted)<\/b><\/font><br>","b58a9319":"<a id=\"3\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Top 10 'Industry' of jobs posted<\/b><\/font><br>","86b8fa83":"# Group by state and calculating Median for Min salary and Max Salary","2d8ea976":"* Extracting min and max salary from salary range and removing K and adding 000 and making it an integer for numerical operations\n* Converting Revenue and Easy Apply from -1 to Unspecified\n* Extracting State from Location\n* Extracting State from HeadQuarters\n* Remove the last characters of the company name\n* If the value of Industry is not specified marking it as 'Unspecified'","17e6ebed":"<a id=\"7\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>States in which jobs are posted<\/b><\/font><br>","66c9ffe7":"<a id=\"6\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Type of Ownership<\/b><\/font><br>","a5d6aeaf":"<a id=\"4\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Top 10 'Sector' of jobs posted<\/b><\/font><br>","70e7ebd5":"<a id=\"2\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Top 15 Jobs titles <\/b><\/font><br>","76480636":"# **For categorical variables - Use:\n# sns.catplot(x=\"education\", y=\"avg_training_score\",data=df2);\n# sns.catplot(x=\"education\",y=\"avg_training_score\",jitter=False,data=df2);\n# sns.catplot(x=\"education\",y=\"avg_training_score\",hue=\"gender\",data=df2);**\n\nhttps:\/\/www.kaggle.com\/raenish\/cheatsheet-50-plotly-charts","af0ee3d1":"<a id=\"data\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Preprocessing<\/b><\/font><br>","0a8ccb9d":"<a id=\"intro\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Importing Packages and Libraries<\/b><\/font><br>","a3e44c59":"<a id=\"9\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Company Revenues <\/b><\/font><br>","97750519":"<a id=\"8\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Head Quarters in which jobs are posted<\/b><\/font><br>","2a0ccf3e":"<a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">Table of contents<\/h3>\n\n* [Introduction](#intro)\n* [Data and Preprocessing](#data)\n* [1. Top 15 Companies](#1)\n* [2. Top 15 Job titles](#2)\n* [3. Top Industry](#3)\n* [4. Top Sector](#4)\n* [5. Rating](#5)\n* [6. Type of Ownership](#6)\n* [7. Top States](#7)\n* [8. Top HQ States](#8)\n* [9. Revenue](#9)\n* [10. Most suffered City](#10)\n* [11. Flee or not?](#11)\n* [12. Armed or not?](#12)\n* [13. Black peoples suffered](#13)\n* [14. All race victims in US](#14)\n* [15. Relation between Age and Race](#15) ","95e5f4a8":"<a id=\"5\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Rating<\/b><\/font><br>"}}