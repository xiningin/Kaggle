{"cell_type":{"458453a3":"code","0307647c":"code","073c88f0":"code","6b17a7b8":"code","bdf4521c":"code","cd0a8d10":"code","3897f731":"code","ae8891ef":"code","8d1e5b0d":"code","41531806":"code","f91cafec":"code","f6e612b1":"code","67baca63":"code","199f3cd2":"code","c5126f4d":"code","98b4ca82":"code","2cb48a08":"code","ab1ec437":"code","92f171d8":"code","2d63bf67":"code","866ae54d":"code","c0962f75":"code","fc154d27":"code","09806a2d":"code","17e0ce5f":"code","401133d0":"code","5ede1ebc":"code","bb4b7d57":"code","e1474d9b":"code","3d92a4ca":"code","49b76267":"code","f8673f3e":"code","6159eb92":"code","223fbc42":"code","60258085":"code","1b0f9a4d":"code","b2f005f7":"code","416a7fce":"code","7a7dd7b8":"code","1bc839d4":"code","651d88ce":"code","cca69842":"code","f9c001e9":"code","80b4dd9e":"code","63d1011b":"code","8fe7b928":"code","a917d9b8":"code","e05b4ea8":"code","4d409ea7":"code","48948366":"code","5741b841":"code","6790716c":"code","bf58ca0f":"code","61e008a2":"code","800c3482":"code","108f6cb6":"code","018137b5":"code","285311cb":"code","667d6852":"code","e95ebede":"code","80e2b76b":"code","37de5fdc":"code","51b6847f":"code","5e11631d":"code","98207b3c":"code","2e14cf60":"code","1a7d3036":"code","a12731ee":"code","d73ae8c8":"code","7024efa4":"markdown","3214c878":"markdown","a92d2dff":"markdown","6d04a356":"markdown","09a8c588":"markdown","bcf9b8d0":"markdown","0da0c2bc":"markdown","c1ddb3da":"markdown","e97a8da7":"markdown","c25bc179":"markdown","bb5d5a56":"markdown","4871bbce":"markdown","ad236257":"markdown","9c08fa6b":"markdown","2d1ad4e8":"markdown","27fefa65":"markdown","5046b761":"markdown","7ab7e5b8":"markdown","b645b96c":"markdown","8ccadf8e":"markdown","239dc226":"markdown","26e31912":"markdown","c36c51f4":"markdown","a3f61871":"markdown","17a2cef9":"markdown","d038017b":"markdown","15e5d36e":"markdown","fe63fd20":"markdown","38781dcf":"markdown","f9e9ee4c":"markdown","6ffc9347":"markdown","ecdae2e0":"markdown","3dc88d03":"markdown","f55d442e":"markdown","dec09227":"markdown","9e635479":"markdown","099f00f7":"markdown","6eca5e83":"markdown","d1872b14":"markdown","618bab24":"markdown","3202510b":"markdown"},"source":{"458453a3":"# Linear Algebra\nimport numpy as np\n\n# Data Processing\nimport pandas as pd\n\n# Data Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)","0307647c":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","073c88f0":"df = pd.read_csv('\/kaggle\/input\/hotel-booking-demand\/hotel_bookings.csv')","6b17a7b8":"df.head()","bdf4521c":"df.columns","cd0a8d10":"df.shape","3897f731":"df = df.drop_duplicates()\ndf.shape","ae8891ef":"df.info()","8d1e5b0d":"df.isna().sum()","41531806":"df=df.drop(columns='company')","f91cafec":"df.agent.unique()","f6e612b1":"df[df['agent']==0]","67baca63":"df['agent'].fillna(value=0,inplace=True)","199f3cd2":"df = df.dropna(axis=0) # To remove rows with null value","c5126f4d":"df.isna().sum()","98b4ca82":"for i in df.columns:\n    print(i ,'has', df[i].unique(),'\\n')","2cb48a08":"df.children= df.children.astype(int)\ndf.children.unique()","ab1ec437":"df.agent=df.agent.astype(int) #to remove decimal","92f171d8":"df = df[df['adults']!=0]","2d63bf67":"d = {'January':1, 'February':2, 'March':3, 'April':4,'May':5,'June':6,'July':7,\n    'August':8,'September':9,'October':10,'November':11,'December':12}\ndf.arrival_date_month = df.arrival_date_month.map(d)","866ae54d":"df_not_c =df[df['is_canceled']==0] #dataframe for bookings not cancelled\ndf_c = df[df['is_canceled']==1] #dataframe for bookings cancelled\ndf_not_c=df_not_c.drop('is_canceled',axis=1)\ndf_c=df_c.drop('is_canceled',axis=1,)","c0962f75":"plt.figure(figsize=(12,5))\nsns.barplot(x=df.hotel.value_counts().index,y=df.hotel.value_counts())\nplt.title('Hotel v No. of Guest')","fc154d27":"px.pie(data_frame=df.meal.value_counts(),names=df.meal.value_counts().index,values=df.meal.value_counts(),title='Type of Meals ordered (proportion)')","09806a2d":"px.pie(data_frame=df.market_segment.value_counts(),names=df.market_segment.value_counts().index,values=df.market_segment.value_counts(),title='Market Segment')","17e0ce5f":"px.pie(data_frame=df.distribution_channel.value_counts(),names=df.distribution_channel.value_counts().index,values=df.distribution_channel.value_counts(),title='Distribution Channel')","401133d0":"print('Percentage of repeated guests =',len(df_not_c[df_not_c['is_repeated_guest']==1])*100\/len(df_not_c),'%')","5ede1ebc":"plt.figure(figsize=(12,5))\nsns.barplot(x=df_not_c.reserved_room_type.value_counts().index,y=df_not_c.reserved_room_type.value_counts())\nplt.title('Reserved Room Type')","bb4b7d57":"plt.figure(figsize=(12,5))\nsns.barplot(x=df_not_c.assigned_room_type.value_counts().index,y=df_not_c.assigned_room_type.value_counts())\nplt.title('Assigned Room Type')","e1474d9b":"print('Proportion of bookings where assigned room type is not what was reserved room type=', len(df_not_c[df_not_c['reserved_room_type']!=df_not_c['assigned_room_type']])*100\/len(df_not_c),'%')","3d92a4ca":"df_not_c.deposit_type.value_counts()","49b76267":"px.pie(data_frame=df.customer_type.value_counts(),names=df.customer_type.value_counts().index,values=df.customer_type.value_counts(),title='Customer Type')","f8673f3e":"df_country = df_not_c['country'].value_counts().reset_index()\ndf_country.columns = ['Country','No.of Guests']\ndf_country","6159eb92":"px.choropleth(df_country,locations=df_country['Country'],color=df_country['No.of Guests'],\n              hover_name=df_country['Country'],title='Home Country of Guests')","223fbc42":"df_resort = df_not_c[(df_not_c['hotel'] == 'Resort Hotel')]\ndf_city = df_not_c[(df_not_c['hotel'] == 'City Hotel')]","60258085":"resort = df_resort.groupby(['arrival_date_month'])['adr'].mean().reset_index()\ncity=df_city.groupby(['arrival_date_month'])['adr'].mean().reset_index()\n\ncombined=resort.merge(city, on = 'arrival_date_month')\ncombined.columns = ['month', 'resort price', 'city price']\ncombined","1b0f9a4d":"px.line(combined, x = 'month', y = ['resort price','city price'],\n        title = 'Room price per night over the Months')","b2f005f7":"resort_m = df_resort['arrival_date_month'].value_counts().reset_index()\nresort_m.columns=['month','no of guests']\nresort_m","416a7fce":"city_m = df_city['arrival_date_month'].value_counts().reset_index()\ncity_m.columns=['month','no of guests']\ncity_m","7a7dd7b8":"combined_m = resort_m.merge(city_m,on='month')\ncombined_m.columns=['month','no of guests in resort','no of guest in city hotel']\ncombined_m","1bc839d4":"combined_m=combined_m.sort_values('month')","651d88ce":"px.line(combined_m, x = 'month', y = ['no of guests in resort','no of guest in city hotel'],\n        title='Total no of guests per Months')","cca69842":"label = ['days_in_waiting_list', 'arrival_date_year', 'arrival_date_year', 'assigned_room_type', 'booking_changes',\n               'reservation_status', 'country', 'days_in_waiting_list']\ndf.drop(labels=label,axis=1,inplace=True)","f9c001e9":"df","80b4dd9e":"cat_label=['hotel',\n 'meal',\n 'market_segment',\n 'distribution_channel',\n 'reserved_room_type',\n 'deposit_type',\n 'customer_type',\n 'reservation_status_date']","63d1011b":"cat_df = df[cat_label]\ncat_df.head()","8fe7b928":"cat_df['reservation_status_date'] = pd.to_datetime(cat_df['reservation_status_date'])\n\ncat_df['year'] = cat_df['reservation_status_date'].dt.year\ncat_df['month'] = cat_df['reservation_status_date'].dt.month\ncat_df['day'] = cat_df['reservation_status_date'].dt.day","a917d9b8":"cat_df","e05b4ea8":"cat_df.drop(['reservation_status_date'] , axis = 1, inplace = True)","4d409ea7":"cat_df","48948366":"cat_df['hotel'] = cat_df['hotel'].map({'Resort Hotel' : 0, 'City Hotel' : 1})\n\ncat_df['meal'] = cat_df['meal'].map({'BB' : 0, 'FB': 1, 'HB': 2, 'SC': 3, 'Undefined': 4})\n\ncat_df['market_segment'] = cat_df['market_segment'].map({'Direct': 0, 'Corporate': 1, 'Online TA': 2, 'Offline TA\/TO': 3,\n                                                           'Complementary': 4, 'Groups': 5, 'Undefined': 6, 'Aviation': 7})\n\ncat_df['distribution_channel'] = cat_df['distribution_channel'].map({'Direct': 0, 'Corporate': 1, 'TA\/TO': 2, 'Undefined': 3,\n                                                                       'GDS': 4})\n\ncat_df['reserved_room_type'] = cat_df['reserved_room_type'].map({'C': 0, 'A': 1, 'D': 2, 'E': 3, 'G': 4, 'F': 5, 'H': 6,\n                                                                   'L': 7, 'B': 8})\n\ncat_df['deposit_type'] = cat_df['deposit_type'].map({'No Deposit': 0, 'Refundable': 1, 'Non Refund': 3})\n\ncat_df['customer_type'] = cat_df['customer_type'].map({'Transient': 0, 'Contract': 1, 'Transient-Party': 2, 'Group': 3})\n\ncat_df['year'] = cat_df['year'].map({2015: 0, 2014: 1, 2016: 2, 2017: 3})","5741b841":"cat_df.head()","6790716c":"num_df = df.drop(columns = cat_label, axis = 1)\nnum_df.drop('is_canceled', axis = 1, inplace = True)\nnum_df","bf58ca0f":"num_df.var()","61e008a2":"num_df['lead_time'] = np.log(num_df['lead_time'] + 1)\nnum_df['arrival_date_week_number'] = np.log(num_df['arrival_date_week_number'] + 1)\nnum_df['arrival_date_day_of_month'] = np.log(num_df['arrival_date_day_of_month'] + 1)\nnum_df['agent'] = np.log(num_df['agent'] + 1)\nnum_df['adr'] = np.log(num_df['adr'] + 1)","800c3482":"num_df.var()","108f6cb6":"num_df['adr'] = num_df['adr'].fillna(value = num_df['adr'].mean())","018137b5":"X = pd.concat([cat_df, num_df], axis = 1)\ny = df['is_canceled']","285311cb":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","667d6852":"X_train , X_test , y_train , y_test = train_test_split(X,y,test_size=0.30,random_state=50)","e95ebede":"lr = LogisticRegression(solver='liblinear')\nlr.fit(X_train, y_train)\n\ny_pred_lr = lr.predict(X_test)\n\nacc_lr = accuracy_score(y_test, y_pred_lr)\nconf = confusion_matrix(y_test, y_pred_lr)\nclf_report = classification_report(y_test, y_pred_lr)\n\nprint(f\"Accuracy Score of Decision Tree is : {acc_lr}\")","80e2b76b":"sns.heatmap(conf,annot=True)","37de5fdc":"print(clf_report)","51b6847f":"dtc = DecisionTreeClassifier()\ndtc.fit(X_train, y_train)\n\ny_pred_dtc = dtc.predict(X_test)\n\nacc_dtc = accuracy_score(y_test, y_pred_dtc)\nconf = confusion_matrix(y_test, y_pred_dtc)\nclf_report = classification_report(y_test, y_pred_dtc)\n\nprint(f\"Accuracy Score of Decision Tree is : {acc_dtc}\")","5e11631d":"sns.heatmap(conf,annot=True)","98207b3c":"print(clf_report)","2e14cf60":"rd_clf = RandomForestClassifier()\nrd_clf.fit(X_train, y_train)\n\ny_pred_rd_clf = rd_clf.predict(X_test)\n\nacc_rd_clf = accuracy_score(y_test, y_pred_rd_clf)\nconf = confusion_matrix(y_test, y_pred_rd_clf)\nclf_report = classification_report(y_test, y_pred_rd_clf)\n\nprint(f\"Accuracy Score of Random Forest is : {acc_rd_clf}\")","1a7d3036":"sns.heatmap(conf,annot=True)","a12731ee":"print(clf_report)","d73ae8c8":"models = pd.DataFrame({\n    'Model' : ['Logistic Regression', 'Decision Tree Classifier', 'Random Forest Classifier'],\n    'Score' : [acc_lr,acc_dtc, acc_rd_clf]\n})\n\n\nmodels.sort_values(by ='Score', ascending = False)","7024efa4":"#### 1. Hotel","3214c878":"Convert datatype of agent from <font color= blue>__float__<\/font> to <font color= blue>__int__<\/font>","a92d2dff":"### Splitting data into training set and test set","6d04a356":"#### 5. Repeated Guest","09a8c588":"# Exploratory data analysis <a id=\"eda\"><\/a>","bcf9b8d0":"Datatype of children and agent is in float. We will change datatypes of children to integer and agent to string after removing null values, if any.","0da0c2bc":"# Table of Contents:","c1ddb3da":"Variance is very high in some columns, so let's normalize (or say rescale) them.","e97a8da7":"# Import Libraries <a id=\"import\"><\/a>","c25bc179":"Now there are no null values. <br>\nNow, to look for unique values in each feature we will loop through features","bb5d5a56":"#### 6. Room types","4871bbce":"Random Forest Classifier has accuracy of 94%, with weighted precision and recall of 94% which is great.","ad236257":"We see that no agent has value 0. Still lets check.","9c08fa6b":"## Converting Features","2d1ad4e8":"# Data Preprocessing <a id=\"preprocess\"><\/a>","27fefa65":"Aim of this notebook is to help the company in predicting which customer will cancel the booking.<br>\nWe have booking details for a city hotel and a resort hotel, such as when the booking was made, length of stay, arrival date, number of guests, available parking spaces and other parameters.<br>\nFirst,we will focus on Exploratory Data Analysis and then move on to the prediction approach.","5046b761":"# Introduction<a id=\"intro\"><\/a>","7ab7e5b8":"company feature has many null values. So this column can be dropped.","b645b96c":"# Building Machine Learning Models <a id=\"model\"><\/a>","8ccadf8e":"Now we convert datatype of children from <font color= blue>__float__<\/font> to <font color= blue>__int__<\/font>.","239dc226":"#### 9. Country","26e31912":"#### 8. Customer Type","c36c51f4":"Now we replace null values with 0 in agent feature.","a3f61871":"#### Making  2 dataframes with categorical and numberical data seperately for easy manipulation.","17a2cef9":"Adults has value 0. But by law, hotel can't be booked for childrens and babies. So we will drop that rows.","d038017b":"#### 3. Market Segment","15e5d36e":"## Decision Tree Classifier","fe63fd20":"We make two DataFrames, one in which bookings are cancelled and other where it's not cancelled","38781dcf":"## Random Forest Classifier","f9e9ee4c":"# Understanding Data and Cleaning <a id=\"clean\"><\/a>","6ffc9347":"Data had many duplicate values which now has been cleaned.","ecdae2e0":" - [Intro](#intro) <br>\n - [Import Libraries](#import) <br>\n - [Reading Data](#read) <br>\n - [Exploratory Data Analyis](#eda) <br>\n - [Data Preprocessing](#preprocess) <br>\n - [Building ML Models](#model)","3dc88d03":"# Reading Data <a id=\"read\"><\/a>","f55d442e":"### Drop columns that are not necessary","dec09227":"#### 2. Meal","9e635479":"#### 11. Busy month","099f00f7":"For agent feature, we assume that null value means booking is done by guest themselves. So first we will look through unique values in agent feature then assign null values with a different value.","6eca5e83":"#### 10. Hotel prices by month","d1872b14":"#### 4. Distribution Channel","618bab24":"## Logistic Regression","3202510b":"#### 7. Deposit Type"}}