{"cell_type":{"6226b5c6":"code","3651f9aa":"code","f0f5bb39":"code","68436d36":"code","ebf2ae14":"code","383b238a":"code","7e00a200":"code","ba12c177":"code","68d396af":"code","adff25ae":"code","d532fabb":"code","1fcf5d1c":"code","4c423350":"code","183fc29b":"code","1016cc82":"code","3b8edfae":"code","c0389847":"code","e83be63b":"code","3f0309a4":"code","1c61bc50":"code","19f9ad3d":"code","d9475eef":"code","36967d5d":"code","f7173ee5":"code","be217473":"code","4af9fdf0":"code","ee7340f5":"code","befebdaf":"code","61050f97":"code","9a6d9a7a":"code","52b367f7":"code","a041ec1f":"code","96ebb6c1":"code","993418f5":"code","e6df6ac6":"code","5d77ff70":"code","e6ad9ccc":"code","7f51a7a5":"code","d60a0e73":"code","2df2111e":"code","fa3a04f9":"code","36b1761e":"code","0efed050":"code","2d829f33":"code","cb7d5246":"code","a758e9b4":"code","f726d165":"code","36028b67":"code","bb8b74c1":"code","fe803004":"code","e5417658":"code","93c412c0":"code","332affd1":"code","0b3d982a":"code","09bb3dea":"code","273bbd28":"code","3f7012cc":"code","9ff30bf0":"code","285a893a":"code","e5ff3824":"code","37edb6db":"code","527d6730":"code","49f93dee":"code","49545b51":"code","50904699":"code","64040a7f":"code","316bba2f":"code","fa7fa710":"code","db2c4af0":"code","271f6e91":"code","fedad6c9":"code","4bae6901":"code","e86e6259":"code","02756ac5":"code","25bc783f":"code","2675717a":"code","3488f82c":"code","2540e333":"code","eeb63db6":"code","71085283":"code","4a4ad824":"code","f915e1db":"code","2f12e51b":"code","329a302f":"code","c26fb764":"code","e667c79b":"code","0355e35d":"code","11716ebf":"code","af4e7fee":"code","0508973b":"code","229ac8e2":"code","b991b054":"code","cdd4f495":"code","e1f5ef2f":"code","a7dff0f9":"code","80bc25ed":"code","8a47f468":"code","b8c169a4":"code","33865da4":"code","90392cb9":"code","279da93e":"code","dd971f07":"code","f37d6f3b":"code","75c84718":"code","be2142ed":"code","90323934":"code","47edffd0":"code","e526835c":"code","de0528b9":"code","5ce2c90e":"code","6dde63e1":"code","19b1d7d2":"code","263d43d1":"code","cb19912f":"code","8832f7f0":"code","9c5c3be1":"code","9f26eab4":"code","53513c4c":"code","bac23596":"code","6fdef581":"code","a2e2486e":"code","aa31fa89":"code","8785ff5d":"code","e5a826b0":"code","82aa5d07":"markdown","def2d967":"markdown","4b619c22":"markdown","39a1ed4f":"markdown","0e0ccc2d":"markdown","b0dafca3":"markdown","5e9979ac":"markdown","d1fed4a9":"markdown","92a9df0e":"markdown","c6fef491":"markdown","5af4f3b8":"markdown","58407bf2":"markdown","7e473082":"markdown","2871a986":"markdown","6a6ef34c":"markdown","091573ae":"markdown","ad155e3c":"markdown"},"source":{"6226b5c6":"import numpy as np \nimport pandas as pd\nimport os\nimport seaborn as sns\nprint(os.listdir(\"..\/input\"))\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport plotly.offline as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=False)\nfrom wordcloud import WordCloud\nfrom geopy.geocoders import Nominatim\nfrom folium.plugins import HeatMap\nimport folium\nfrom tqdm import tqdm\nimport re\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM, SpatialDropout1D\nfrom sklearn.model_selection import train_test_split\nfrom nltk import word_tokenize\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport gensim\nfrom collections import Counter\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nimport matplotlib.colors as mcolors\nfrom sklearn.manifold import TSNE\nfrom gensim.models import word2vec\nimport nltk\npd.options.mode.chained_assignment = None  # default='warn'","3651f9aa":"df = pd.read_csv('..\/input\/zomato-bangalore-restaurants\/zomato.csv')\ndf.head()","f0f5bb39":"df.columns","68436d36":"df.dtypes","ebf2ae14":"df.describe()","383b238a":"df.shape","7e00a200":"df = df.rename({'approx_cost(for two people)':'two_ppl_avg', 'listed_in(type)':'listed_in_type', 'listed_in(city)':'listed_in_city'}, axis='columns')","ba12c177":"df.head()","68d396af":"df.listed_in_city.unique()","adff25ae":"df.location.unique()","d532fabb":"len(df.name.unique())","1fcf5d1c":"plt.figure(figsize=(15, 6))\ndf1 = df['name'].value_counts()[:10]\nsns.barplot(y=df1.index, x=df1.values)\nplt.title('Most famous chains in Bangalore')\nplt.xlabel('Number of restaurants')\nplt.show()","4c423350":"plt.figure(figsize=(10,10))\nax = sns.countplot(df['online_order'])\nplt.title('Restaurants taking online orders')\n\n# The second parameter is the point to annotate - (p.get_x() + p.get_width() \/ 2., p.get_height()) points to the center of the top side of the bar plot\n# The xytext is used to define the place to put the text WITH RESPECT TO the annotate point\n# get_x returns the top left coordinate\n# ha and va are used to say which part of the text will be at the defined coordinate, if we don't use center then the left-side of the text would be at the starting coordinate\nfor p in ax.patches:\n    ax.annotate(\"%.2f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                ha=\"center\", va=\"center\",\n                fontsize=11, color='black', xytext=(0, 10),\n                textcoords='offset points')\nplt.show()","183fc29b":"for p in ax.patches:\n    print(p.get_x())\n    print(p.get_width())\n    print(p.get_height())","1016cc82":"df2 = df['online_order'].value_counts()\ncolors = ['#FEBFB3', '#E1396C']\n\ntrace = go.Pie(labels=df2.index, values=df2.values, textinfo=\"value\",\n              marker=dict(colors=colors, line=dict(width=2)))\nlayout = go.Layout(title='Accepting vs not accepting online orders', width=500, height=500)\nfig = go.Figure(data=[trace], layout=layout)\nfig.show()","3b8edfae":"df3 = df['book_table'].value_counts()\ncolors = ['#96D38C', '#D0F9B1']\n\ntrace = go.Pie(labels=df3.index, values=df3.values, textinfo=\"value\",\n              marker=dict(colors=colors, line=dict(width=2)))\nlayout = go.Layout(title='Accepting vs not accepting table bookings', width=500, height=500)\nfig = go.Figure(data=[trace], layout=layout)\nfig.show()","c0389847":"df4 = df['rate']\ndf4 = df4.dropna().apply(lambda x: float(x.split('\/')[0]) if (len(x)>3) else np.nan).dropna()\ndf4","e83be63b":"df4.unique()","3f0309a4":"plt.figure(figsize=(7, 5))\nsns.displot(df4, kde=True)\nplt.title('Distribution of ratings')\nplt.show()","1c61bc50":"df_5 = df[['two_ppl_avg','rate','online_order']]\ndf_5.head()","19f9ad3d":"df_5['two_ppl_avg'].unique()","d9475eef":"df_5.loc[:,'two_ppl_avg']","36967d5d":"df_5.loc[:,'two_ppl_avg'] = df_5.loc[:,'two_ppl_avg'].dropna().apply(lambda x: int(x.replace(',','')))\ndf_5.loc[:,'rate'] = df_5.loc[:,'rate'].dropna().apply(lambda x: float(x.split('\/')[0]) if len(x)>3 else np.nan).dropna()","f7173ee5":"df_5","be217473":"plt.figure(figsize=(10,7))\nsns.scatterplot(x='rate', y='two_ppl_avg', hue='online_order', data=df_5)\nplt.show()","4af9fdf0":"plt.figure(figsize=(7, 7))\nsns.histplot(df_5['two_ppl_avg'], kde=True, element='step')\nplt.show()","ee7340f5":"df['votes']","befebdaf":"df_yes = df[df['online_order']=='Yes']['votes']\ndf_no = df[df['online_order']=='No']['votes']","61050f97":"print(df_yes.shape)\nprint(df_no.shape)","9a6d9a7a":"df_yes","52b367f7":"trace0 = go.Box(y=df_yes, name='accepting online orders', marker=dict(color='rgb(202, 131, 11)'))\ntrace1 = go.Box(y=df_no, name='not accepting online orders', marker=dict(color='rgb(20,111,211)'))\n\nlayout = go.Layout(title='Box plots of votes', width=800, height=500)\ndata = [trace0, trace1]\nfig = go.Figure(data=data, layout=layout)\nfig.show()","a041ec1f":"df_6 = df['rest_type'].value_counts()[:10]\ndf_6","96ebb6c1":"sns.barplot(x=df_6.values, y=df_6.index)\nplt.title('Most common types of restaurants')\nplt.show()","993418f5":"df.head()","e6df6ac6":"df_5.head()","5d77ff70":"sns.boxplot(y='two_ppl_avg', x='online_order', data=df_5)","e6ad9ccc":"df_budget=df[['rate','two_ppl_avg','location','name','rest_type']].dropna()\ndf_budget['rate']=df_budget['rate'].apply(lambda x: float(x.split('\/')[0]) if len(x)>3 else 0)\ndf_budget['two_ppl_avg']=df_budget['two_ppl_avg'].apply(lambda x: int(x.replace(',','')))","7f51a7a5":"df_budget['rate']","d60a0e73":"def restaurant_calculator(location, rest):\n    places = df_budget[(df_budget['two_ppl_avg']<=400) & (df_budget['location']==location) & (df_budget['rest_type']==rest) & (df_budget['rate']>4)]\n    places = places['name'].unique()\n    return places","2df2111e":"restaurant_calculator('BTM',\"Quick Bites\")","fa3a04f9":"df.columns","36b1761e":"df7 = df.location.value_counts()[:10]\nsns.barplot(x=df7.values, y=df7.index, palette=\"dark:salmon_r\")\nplt.show()","0efed050":"df8 = df.groupby(['location','cuisines']).agg('count')\ndf8 = df8.reset_index()\ndf8","2d829f33":"df8 = df8.sort_values(by=\"url\", ascending=False)\ndf8","cb7d5246":"df8 = df8.drop_duplicates(subset=['location'],keep='first')","a758e9b4":"df8 = df8[:10]\ndf8 = df8[['location','cuisines','url']]\ndf8 = df8.rename(columns={\"url\":\"count\"})","f726d165":"df8","36028b67":"locs = pd.DataFrame({\"Name\":df['location'].unique()})\nlocs['Name'] = locs['Name'].apply(lambda x: 'Bangalore ' + str(x))\nlat_lon=[]\ngeolocator = Nominatim(user_agent=\"app\")\nfor location in locs['Name']:\n    location = geolocator.geocode(location)\n    if location is None:\n        lat_lon.append(np.nan)\n    else:\n        geo = (location.latitude, location.longitude)\n        lat_lon.append(geo)\n        \nlocs['geo_loc']=lat_lon\nlocs.to_csv('locs.csv',index=False)","bb8b74c1":"locs['Name'] = locs['Name'].apply(lambda x: x.replace(\"Bangalore\", \"\")[1:])\nlocs.head()","fe803004":"df_locs = pd.DataFrame(df['location'].value_counts().reset_index())\ndf_locs.columns = ['Name', 'count']\ndf_locs = df_locs.merge(locs, on='Name', how='left').dropna()\ndf_locs.head()","e5417658":"def generateBaseMap(default_location=[12.97, 77.59], default_zoom_start=12):\n    base_map = folium.Map(location=default_location, control_scale=True, zoom_start=default_zoom_start)\n    return base_map","93c412c0":"latitude, longitude = zip(*np.array(df_locs['geo_loc']))\nprint(latitude)\nprint(longitude)","332affd1":"df_locs['lat'] = latitude\ndf_locs['long'] = longitude","0b3d982a":"basemap = generateBaseMap()\nHeatMap(df_locs[['lat','long','count']].values.tolist(), zoom=20, radius=15).add_to(basemap)","09bb3dea":"basemap","273bbd28":"plt.figure(figsize=(6,6))\ndf9 = df['cuisines'].value_counts()[:10]\nsns.barplot(x = df9.values, y=df9.index)\nplt.title('Most popular cuisines in Bangalore')\nplt.show()","3f7012cc":"def heatmapping(col, name):\n    data = pd.DataFrame(df[df[col]==name].groupby(['location'],as_index=False)['url'].agg('count'))\n    data.columns=['Name', 'count']\n    print(data.head())\n    data = data.merge(locs, on=\"Name\", how='left').dropna()\n    #Use values to show values only\n    data['lat'], data['lon'] = zip(*data['geo_loc'].values)\n    return data.drop(['geo_loc'],axis=1)","9ff30bf0":"north_food = heatmapping('cuisines', 'North Indian')","285a893a":"basemap = generateBaseMap()\nHeatMap(north_food[['lat','lon','count']].values.tolist(),zoom=20,radius=15).add_to(basemap)\nbasemap","e5ff3824":"south_food = heatmapping('cuisines', 'South Indian')\nbasemap = generateBaseMap()\nHeatMap(south_food[['lat','lon','count']].values.tolist(),zoom=20,radius=15).add_to(basemap)\nbasemap","37edb6db":"df.head()","527d6730":"def produce_chains(name):\n    #The column which is counted becomes the index so we have to reset it\n    data_chain = pd.DataFrame(df[df['name']==name]['location'].value_counts().reset_index())\n    data_chain.columns = ['Name', 'count']\n    data_chain = data_chain.merge(locs, on='Name', how='left').dropna()\n    data_chain['lat'], data_chain['lon'] = zip(*data_chain['geo_loc'].values)\n    return data_chain[['Name','count','lat','lon']]","49f93dee":"testing = produce_chains('Jalsa')\ntesting","49545b51":"mapbox_access_token=\"pk.eyJ1Ijoic2hhaHVsZXMiLCJhIjoiY2p4ZTE5NGloMDc2YjNyczBhcDBnZnA5aCJ9.psBECQ2nub0o25PgHcU88w\"","50904699":"# Method - 1\n# Apply a groupby to get the count of each restaurant in each type\n# Group up the count results according to restaurant type \n# Sort each group in the object in descending order and take the top 3 of each\n# Series objects created\ndatas=df.groupby(['rest_type','name']).agg('count')\ng = datas['url'].groupby('rest_type',group_keys=False)\ng = g.apply(lambda x: x.sort_values(ascending=False).head(3))\ng","64040a7f":"# Method - 2\n# Straight use n-largest after the second group function\ndatas=df.groupby(['rest_type','name']).agg('count')\ng = datas['url'].groupby('rest_type',group_keys=False).nlargest(3)\ng","316bba2f":"# Convert series to dataframe\ndf_final = g.to_frame()\ndf_final = df_final.reset_index()\ndf_final","fa7fa710":"casual=df_final[df_final['rest_type']=='Casual Dining']\ncasual","db2c4af0":"def produce_trace(data_chain, name):\n    data_chain['text'] = data_chain['Name']+'<br>'+data_chain['count'].astype(str)\n    trace = go.Scattermapbox(\n            lat = data_chain['lat'],\n            lon = data_chain['lon'],\n            mode = 'markers',\n            marker = go.scattermapbox.Marker(\n                    size=data_chain['count']*4),\n            text=data_chain['text'],\n            name=name)\n    \n    return trace","271f6e91":"data = []\nfor row in casual['name']:\n    data_chain = produce_chains(row) #Produce lat lon of each restaurant in chain\n    trace_0 = produce_trace(data_chain, row)\n    data.append(trace_0)\n    \nlayout = go.Layout(title='Casual dining restaurant chain locations around Bangalore',\n                   autosize=True,\n                   hovermode='closest',\n                   mapbox=dict(\n                           accesstoken=mapbox_access_token,\n                           bearing=0,\n                           style=\"streets\",\n                           center=dict(\n                                   lat = 12.96,\n                                   lon = 77.59),\n                           pitch=0,\n                           zoom=10)\n                  )\nfig = dict(data=data, layout=layout)\npy.iplot(fig)","fedad6c9":"quick = df_final[df_final['rest_type']=='Quick Bites']\nquick","4bae6901":"data = []\nfor row in quick['name']:\n    data_chain = produce_chains(row) #Produce lat lon of each restaurant in chain\n    trace_0 = produce_trace(data_chain, row)\n    data.append(trace_0)\n    \nlayout = go.Layout(title='Quick Bites restaurant chain locations around Bangalore',\n                   autosize=True,\n                   hovermode='closest',\n                   mapbox=dict(\n                           accesstoken=mapbox_access_token,\n                           bearing=0,\n                           style=\"streets\",\n                           center=dict(\n                                   lat = 12.96,\n                                   lon = 77.59),\n                           pitch=0,\n                           zoom=10)\n                  )\nfig = dict(data=data, layout=layout)\npy.iplot(fig)","e86e6259":"cafes = df_final[df_final['rest_type']=='Cafe']\ncafes","02756ac5":"data = []\nfor row in cafes['name']:\n    data_chain = produce_chains(row) #Produce lat lon of each restaurant in chain\n    trace_0 = produce_trace(data_chain, row)\n    data.append(trace_0)\n    \nlayout = go.Layout(title='Cafe chain locations around Bangalore',\n                   autosize=True,\n                   hovermode='closest',\n                   mapbox=dict(\n                           accesstoken=mapbox_access_token,\n                           bearing=0,\n                           style=\"streets\",\n                           center=dict(\n                                   lat = 12.96,\n                                   lon = 77.59),\n                           pitch=0,\n                           zoom=10)\n                  )\nfig = dict(data=data, layout=layout)\npy.iplot(fig)","25bc783f":"df.head()","2675717a":"df['dish_liked']=df['dish_liked'].apply(lambda x : x.split(',') if type(x)==str else [''])\ndf['dish_liked']","3488f82c":"type(df['dish_liked'][0])","2540e333":"df10 = df['rest_type'].value_counts()[:9]\ndf10","eeb63db6":"df10 = df10.index","71085283":"def wordcloud(rest):\n    plt.figure(figsize=(30,30))\n    for i, r in enumerate(df10):\n        plt.subplot(3, 3, i+1)\n        #Creates a 2D list - Each element of the list is the dish_liked list \n        corpus = df[df['rest_type']==r]['dish_liked'].values.tolist()\n        #We use list comprehension in a nested method as we need to enter each list in the list, to extract our words\n        corpus = ','.join(x for list_words in corpus for x in list_words)\n        wordcloud = WordCloud(max_font_size=None, background_color='white', collocations='False', width=1500, height=1500).generate(corpus)\n        plt.imshow(wordcloud)\n        plt.title(r)\n        plt.axis('off')","4a4ad824":"wordcloud(df10)","f915e1db":"df.head()","2f12e51b":"df.reviews_list[0]","329a302f":"all_ratings=[]\nfor name, ratings in tqdm(zip(df['name'], df['reviews_list'])):\n    # Separates out rating from the text\n    ratings = eval(ratings)\n    for score, doc in ratings:\n        if score:\n            score = score.strip(\"Rated\").strip()\n            doc = doc.strip('RATED').strip()\n            score = float(score)\n            all_ratings.append([name, score, doc])","c26fb764":"all_ratings[:5]","e667c79b":"df_ratings = pd.DataFrame(all_ratings,columns=['name', 'rating', 'review'])","0355e35d":"df_ratings","11716ebf":"df_ratings['review']=df_ratings['review'].apply(lambda x : re.sub('[^a-zA-Z0-9\\s]',\"\",x))","af4e7fee":"df_ratings","0508973b":"review_rest = df_ratings['name'].value_counts()[:9]\nreview_rest","229ac8e2":"review_rest = review_rest.index","b991b054":"review_rest","cdd4f495":"rest=df_ratings['name'].value_counts()[:9].index\ndef produce_wordcloud(rest):\n    \n    plt.figure(figsize=(20,30))\n    for i,r in enumerate(rest):\n        plt.subplot(3,3,i+1)\n        corpus=df_ratings[df_ratings['name']==r]['review'].values.tolist()\n        corpus=' '.join(x  for x in corpus)\n        wordcloud = WordCloud(max_font_size=None, background_color='white', collocations=False,\n                      width=1500, height=1500).generate(corpus)\n        plt.imshow(wordcloud)\n        plt.title(r)\n        plt.axis(\"off\")\n        \n\n        \n        \nproduce_wordcloud(rest)","e1f5ef2f":"plt.figure(figsize=(7,6))\nrating=df_ratings['rating'].value_counts()\nsns.barplot(x=rating.index,y=rating)\nplt.xlabel(\"Ratings\")\nplt.ylabel('count')","a7dff0f9":"df_ratings['review_cat'] = np.where(df_ratings['rating']>2.5,1,0)","80bc25ed":"df_ratings.head()","8a47f468":"stops=stopwords.words('english')\nlem=WordNetLemmatizer()\ncorpus=' '.join(lem.lemmatize(x) for x in df_ratings[df_ratings['review_cat']==1]['review'][:3000] if x not in stops)\ntokens=word_tokenize(corpus)","b8c169a4":"len(tokens)","33865da4":"len(set(tokens))","90392cb9":"df_ratings.shape","279da93e":"tokens[:10]","dd971f07":"vect=TfidfVectorizer()\nvect_fit=vect.fit(tokens)    ","f37d6f3b":"id_map=dict((v,k) for k,v in vect.vocabulary_.items())\nvectorized_data = vect_fit.transform(tokens)","75c84718":"vectorized_data.shape","be2142ed":"gensim_corpus=gensim.matutils.Sparse2Corpus(vectorized_data,documents_columns=False)\nldamodel = gensim.models.ldamodel.LdaModel(gensim_corpus,id2word=id_map,num_topics=5,random_state=34,passes=25)","90323934":"counter=Counter(corpus.split(' '))","47edffd0":"len(gensim_corpus)","e526835c":"out=[]\n# Show topics default 10 words\ntopics = ldamodel.show_topics(formatted=False)\nfor i, topic in topics:\n    for word, weight in topic:\n        out.append([word, i, weight, counter[word]])\n        \ndataframe = pd.DataFrame(out, columns=['word','topic_id','importance','word_count'])","de0528b9":"dataframe","5ce2c90e":"fig, axes = plt.subplots(2, 2, figsize=(8,6), sharey=True, dpi=160)\ncols = [color for name, color in mcolors.TABLEAU_COLORS.items()]\nfor i, ax in enumerate(axes.flatten()):\n    ax.bar(x='word', height=\"word_count\", data=dataframe.loc[dataframe.topic_id==i, :], color=cols[i], width=0.3, alpha=0.3, label='Word Count')\n    ax.set_ylabel('Word Count', color=cols[i])\n    #ax_twin.set_ylim(0, 0.030); ax.set_ylim(0, 3500)\n    ax.set_title('Topic: ' + str(i), color=cols[i], fontsize=8)\n    ax.tick_params(axis='y', left=False)\n    ax.set_xticklabels(dataframe.loc[dataframe.topic_id==i, 'word'], rotation=30, horizontalalignment= 'right')\n    ax.legend(loc='upper left'); \n\nfig.tight_layout(w_pad=2)    \nfig.suptitle('Word Count and Importance of Topic Keywords', fontsize=8, y=1.05)    \nplt.show()","6dde63e1":"fig, axes = plt.subplots(2, 2, figsize=(8,6), sharey=True, dpi=160)\ncols = [color for name, color in mcolors.TABLEAU_COLORS.items()]\nfor i, ax in enumerate(axes.flatten()):\n    ax.bar(x='word', height=\"importance\", data=dataframe.loc[dataframe.topic_id==i, :], color=cols[i], width=0.2, label='Weights')\n    ax.set_ylabel('Word Importance', color=cols[i])\n    #ax_twin.set_ylim(0, 0.030); ax.set_ylim(0, 3500)\n    ax.set_title('Topic: ' + str(i), color=cols[i], fontsize=8)\n    ax.tick_params(axis='y', left=False)\n    ax.set_xticklabels(dataframe.loc[dataframe.topic_id==i, 'word'], rotation=30, horizontalalignment= 'right')\n    ax.legend(loc='upper left');\n\nfig.tight_layout(w_pad=2)    \nfig.suptitle('Word Count and Importance of Topic Keywords', fontsize=8, y=1.05)    \nplt.show()","19b1d7d2":"stops=stopwords.words('english')\nlem=WordNetLemmatizer()\ncorpus=' '.join(lem.lemmatize(x) for x in df_ratings[df_ratings['review_cat']==0]['review'][:3000] if x not in stops)\ntokens=word_tokenize(corpus)","263d43d1":"vect=TfidfVectorizer()\nvect_fit=vect.fit(tokens)\nid_map=dict((v,k) for k,v in vect.vocabulary_.items())\nvectorized_data=vect_fit.transform(tokens)\ngensim_corpus=gensim.matutils.Sparse2Corpus(vectorized_data,documents_columns=False)\nldamodel = gensim.models.ldamodel.LdaModel(gensim_corpus,id2word=id_map,num_topics=5,random_state=34,passes=25)","cb19912f":"counter=Counter(corpus.split(' '))\nout=[]\ntopics=ldamodel.show_topics(formatted=False)\nfor i,topic in topics:\n    for word,weight in topic:\n        out.append([word,i,weight,counter[word]])\n\ndataframe = pd.DataFrame(out, columns=['word', 'topic_id', 'importance', 'word_count']) ","8832f7f0":"dataframe","9c5c3be1":"fig, axes = plt.subplots(2, 2, figsize=(8,6), sharey=True, dpi=160)\ncols = [color for name, color in mcolors.TABLEAU_COLORS.items()]\nfor i, ax in enumerate(axes.flatten()):\n    ax.bar(x='word', height=\"word_count\", data=dataframe.loc[dataframe.topic_id==i, :], color=cols[i], width=0.3, alpha=0.3, label='Word Count')\n    ax.set_ylabel('Word Count', color=cols[i])\n    #ax_twin.set_ylim(0, 0.030); ax.set_ylim(0, 3500)\n    ax.set_title('Topic: ' + str(i), color=cols[i], fontsize=8)\n    ax.tick_params(axis='y', left=False)\n    ax.set_xticklabels(dataframe.loc[dataframe.topic_id==i, 'word'], rotation=30, horizontalalignment= 'right')\n    ax.legend(loc='upper left'); \n\nfig.tight_layout(w_pad=2)    \nfig.suptitle('Word Count and Importance of Topic Keywords', fontsize=8, y=1.05)    \nplt.show()","9f26eab4":"fig, axes = plt.subplots(2, 2, figsize=(8,6), sharey=True, dpi=160)\ncols = [color for name, color in mcolors.TABLEAU_COLORS.items()]\nfor i, ax in enumerate(axes.flatten()):\n    ax.bar(x='word', height=\"importance\", data=dataframe.loc[dataframe.topic_id==i, :], color=cols[i], width=0.2, label='Weights')\n    ax.set_ylabel('Word Importance', color=cols[i])\n    #ax_twin.set_ylim(0, 0.030); ax.set_ylim(0, 3500)\n    ax.set_title('Topic: ' + str(i), color=cols[i], fontsize=8)\n    ax.tick_params(axis='y', left=False)\n    ax.set_xticklabels(dataframe.loc[dataframe.topic_id==i, 'word'], rotation=30, horizontalalignment= 'right')\n    ax.legend(loc='upper left');\nfig.tight_layout(w_pad=2)    \nfig.suptitle('Word Count and Importance of Topic Keywords', fontsize=8, y=1.05)    \nplt.show()","53513c4c":"stops=set(stopwords.words('english'))\nlem=WordNetLemmatizer()\ncorpus=[]\nfor review in tqdm(df_ratings['review'][:10000]):\n    words=[]\n    for x in word_tokenize(review):\n        x=lem.lemmatize(x.lower())\n        if x not in stops:\n            words.append(x)\n            \n    corpus.append(words)","bac23596":"model = word2vec.Word2Vec(corpus, vector_size=100, window=20, min_count=200, workers=4)","6fdef581":"def tsne_plot(model):\n    labels=[]\n    tokens=[]\n    \n    for word in model.wv.index_to_key:\n        tokens.append(model.wv[word])\n        labels.append(word)\n        \n    tsne_model = TSNE(perplexity=40, n_components=2, init='pca', n_iter=2500, random_state=1)\n    new_values = tsne_model.fit_transform(tokens)\n    \n    x = []\n    y = []\n    for value in new_values:\n        x.append(value[0])\n        y.append(value[1])\n        \n    plt.figure(figsize=(10,10))\n    for i in range(len(x)):\n        plt.scatter(x[i], y[i])\n        plt.annotate(labels[i],\n                    xy=(x[i], y[i]),\n                    xytext=(5, 2), \n                    textcoords='offset points',\n                    ha='right',\n                    va='bottom')\n        \n    plt.show()","a2e2486e":"tsne_plot(model)","aa31fa89":"postive=df_ratings[df_ratings['rating']>3]['review'][:2000]\nnegative=df_ratings[df_ratings['rating']<2.5]['review'][:2000]\n\ndef return_corpus(df):\n    corpus=[]\n    for review in df:\n        tagged=nltk.pos_tag(word_tokenize(review))\n        adj=[]\n        for x in tagged:\n            if x[1]=='JJ':\n                adj.append(x[0])\n        corpus.append(adj)\n    return corpus","8785ff5d":"corpus=return_corpus(postive)\nmodel = word2vec.Word2Vec(corpus, vector_size=100, min_count=10,window=20, workers=4)\ntsne_plot(model)","e5a826b0":"corpus=return_corpus(negative)\nmodel = word2vec.Word2Vec(corpus, vector_size=100, min_count=10,window=20, workers=4)\ntsne_plot(model)","82aa5d07":"Online orders","def2d967":"Top restaurant chains in Bangalore","4b619c22":"<h2>Negative words","39a1ed4f":"<h2>EDA","0e0ccc2d":"<h2>Topic modelling","b0dafca3":"* Remove stop words\n* Lemmatize each word\n* Create corpus\n* Tokenize them","5e9979ac":"North Indian restaurants","d1fed4a9":"Geographical map","92a9df0e":"T-SNE","c6fef491":"Table bookings","5af4f3b8":"Rating distribution","58407bf2":"Most popular type of cuisine in each area","7e473082":"Map","2871a986":"Most popular cuisines in Bangalore","6a6ef34c":"Rating vs Cost","091573ae":"Restaurant chains","ad155e3c":"Areas with highest frequency of restaurants"}}