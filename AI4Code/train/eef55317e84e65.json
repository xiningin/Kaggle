{"cell_type":{"34936566":"code","d138fdc7":"code","6b053a8c":"code","68dde84e":"code","880d9aad":"code","c3a3ed44":"code","a836dc79":"code","608d0629":"code","795748cf":"code","a2c28f3f":"code","198275e1":"code","ccca6ea1":"code","339071ef":"code","77bac716":"code","338733e3":"code","b16c6b33":"code","f105c964":"code","dc3a8dec":"code","bcaf09a8":"code","9c409781":"code","38d127b8":"code","6771759b":"code","69685000":"code","8df42321":"code","3cd7c66d":"code","83d0cfcf":"code","a20027ac":"code","28cedac7":"code","8d36ed98":"code","f27969ae":"code","7b940649":"code","e1f7831e":"code","dffee9bb":"code","b20e9a5f":"code","ebfffd11":"code","76db8fcd":"code","8ee4f20d":"code","7fb2f7d4":"markdown","a584578c":"markdown","b3752eb0":"markdown","df6a1a24":"markdown","dcfc1b84":"markdown","0d1fde01":"markdown","6c7a04c2":"markdown","0d553ce5":"markdown","c46d4a77":"markdown","2f7c5e63":"markdown","c0a91166":"markdown","cc20d564":"markdown","e22f38af":"markdown","b55b46b6":"markdown","78bda075":"markdown","d38b4797":"markdown","15061471":"markdown","7cb6f221":"markdown","7fbce7c4":"markdown"},"source":{"34936566":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d138fdc7":"# For displaying all the rows of the data frame\npd.set_option('display.max_rows', None) # Thanks to @ https:\/\/dev.to\/chanduthedev\/how-to-display-all-rows-from-data-frame-using-pandas-dha\n\n# get training data\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","6b053a8c":"# get test data\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","68dde84e":"# Describe training data\ntrain_data.describe()","880d9aad":"# Describe test data\ntest_data.describe()","c3a3ed44":"# Check correlation in training data\ntrain_data.corr(method='pearson')","a836dc79":"# Look null values for train data\ntrain_data.isnull().sum()","608d0629":"# Look null values for test data\ntest_data.isnull().sum()","795748cf":"# There is 1 null value for 'Fare' column in test data\n# https:\/\/dzone.com\/articles\/pandas-find-rows-where-columnfield-is-null\ntest_data[test_data[\"Fare\"].isnull()]","a2c28f3f":"# There are 2 null values for 'Embarked' column in train data\n# https:\/\/dzone.com\/articles\/pandas-find-rows-where-columnfield-is-null\ntrain_data[train_data[\"Embarked\"].isnull()]","198275e1":"# Description of the people from Southampton who are traveling in the third class(training dataset)\nSouth_3C_train_data = train_data[train_data[\"Embarked\"] == \"S\"][train_data[\"Pclass\"] == 3]\nSouth_3C_train_data.describe()","ccca6ea1":"# Description of the people from Southampton who are traveling in the third class(test dataset)\nSouth_3C_test_data = test_data[test_data[\"Embarked\"] == \"S\"][test_data[\"Pclass\"] == 3]\nSouth_3C_test_data.describe()","339071ef":"# Look if there is another person who has the same ticket number with Mr Storey \ntrain_data[train_data[\"Ticket\"] == \"3701\"]","77bac716":"# Look if there is another person who has the same ticket number with Mr Storey \ntest_data[test_data[\"Ticket\"] == \"3701\"]","338733e3":"# Who paid \u00a3 7.854200 in Southampton(training dataset)\ntrain_data[train_data[\"Embarked\"] == 'S'][train_data[\"Fare\"] == 7.854200]","b16c6b33":"# Who paid \u00a3 7.854200 in Southampton(test dataset)\ntest_data[test_data[\"Embarked\"] == 'S'][test_data[\"Fare\"] == 7.854200]","f105c964":"# Who else has 4 digit tickets, embarked from Southampton and traveling in the third class? \ntrain_data[[len(x) == 4 for x in train_data[\"Ticket\"]]][train_data[\"Embarked\"] == \"S\"][train_data[\"Pclass\"] == 3]","dc3a8dec":"# Who else has 4 digit tickets, embarked from Southampton and traveling in the third class? \ntest_data[[len(x) == 4 for x in test_data[\"Ticket\"]]][test_data[\"Embarked\"] == \"S\"][test_data[\"Pclass\"] == 3]","bcaf09a8":"# Are there any tickets that contains the string 3701? May be Some digits in Mr Storey' ticket is missing.\ntrain_data[['3701' in x for x in train_data['Ticket']]]","9c409781":"# Are there any tickets that contains the string 3701? May be Some digits in Mr Storey' ticket is missing.\ntest_data[['3701' in x for x in test_data['Ticket']]]","38d127b8":"# Insert \u00a3 20.2125 for Mr Storey's fare\ntest_data.loc[152,'Fare'] = 20.2125","6771759b":"# Check Mr Storey\ntest_data.loc[152]","69685000":"# Check again\ntest_data.isnull().sum()","8df42321":"# There are 2 null values for 'Embarked' column in train data\n# https:\/\/dzone.com\/articles\/pandas-find-rows-where-columnfield-is-null\ntrain_data[train_data[\"Embarked\"].isnull()]","3cd7c66d":"# Who paid \u00a3 80 in training data \ntrain_data[train_data[\"Fare\"] == 80]","83d0cfcf":"# Who paid \u00a3 80 in test data\ntest_data[test_data[\"Fare\"] == 80]","a20027ac":"# People who paid more than \u00a3 70 in training data\ntrain_data[train_data[\"Fare\"] > 70]","28cedac7":"# People who paid more than \u00a3 70 in test data\ntest_data[test_data[\"Fare\"] > 70]","8d36ed98":"# people in Cabins starting with 'B' in training data\ntrain_data[['B' in str(x) for x in train_data['Cabin']]]","f27969ae":"# people in Cabins starting with 'B' in test data\ntest_data[['B' in str(x) for x in test_data['Cabin']]]","7b940649":"# people in Cabins starting with 'B2' in training data\ntrain_data[['B2' in str(x) for x in train_data['Cabin']]]","e1f7831e":"test_data[['B2' in str(x) for x in test_data['Cabin']]]","dffee9bb":"# Miss Icard\ntrain_data.loc[61, 'Embarked'] = 'S'\n# Mrs Stone\ntrain_data.loc[829, 'Embarked'] = 'S'","b20e9a5f":"# Check Miss Icard\ntrain_data.loc[61]","ebfffd11":"# Check Mrs Stone\ntrain_data.loc[829]","76db8fcd":"# Check again\ntrain_data.isnull().sum()","8ee4f20d":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Fare\", \"Embarked\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=7, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","7fb2f7d4":"It's seen that **B**'s are either from **'Cherbourg'** or **'Southampton'**. What about **'B2'**? Remember that their Cabin is **B28**.","a584578c":"OK. Now we can use **'Fare'** column in our model. Now it is time for **'Embarked'** column. Let's remember the missing values...","b3752eb0":"It seems that according to the training dataset aproximately **39%** of the passengers embarked from Southampton and were travelling in the third class with an avarage fare of **\u00a3 14.644083**.\n\nIt also seems that according to the test dataset aproximately **34%** of the passengers embarked from Southampton and were travelling in the third class with an avarage fare of **\u00a3 13.913030**.\n\nNote that percentage values are for third class passengers only. There may be passangers in the first and second class who are coming from Southampton\n\nFirst we can use some number between these amounts (\u00a3 13.913030 - \u00a3 14.644083) for Mr Storey's fare. \n\nBut before that let's check **\"Icard, Miss. Amelie\"** and **\"Stone Mrs. George Nelson (Martha Evelyn)\"** again. Although their embark location is not known it seems that they were in the same cabin (B28) and paid the same fare (\u00a3 80.0). As can be seen easily their ticket number is also the same (113572).\n\nSo is there any other person whose ticket number is the same with Mr Storey? If yes we can conclude that they paid the same fare.","df6a1a24":"**References**\n\nThanks to **@alexisbcook** and  **@dansbecker**\n\nhttps:\/\/github.com\/adam-p\/markdown-here\/wiki\/Markdown-Cheatsheet#links\nhttps:\/\/stackoverflow.com\/questions\/13842088\/set-value-for-particular-cell-in-pandas-dataframe-using-index thanks to @Yash","dcfc1b84":"As can be seen easily people who paid the same fares have some resemblance in their ticket number. The tickets that cost \u00a3 7.8542 are 6 digit numbers that start with 34 or 35. Probably they were in the same area next to each other while traveling and as a result paid the same amount.\n\nCan we find some ticket number similar to Mr Storey?","0d1fde01":"4 digit tickets does not reveal much. The only resemblancethat can found are the tickets:\n* 3470(\u00a3 7.8875),\n* 3410(\u00a3 8.7125),\n* 3474(\u00a3 7.8875),\n* 3460(\u00a3 7.0458),\n\nObviously there is not much similarity other that they all start with 3. But may be we can use \u00a3 7.8875 for Mr Storey. Let's try another option.","6c7a04c2":"Unfortunately no one but himself has the same ticket number with Mr Storey. May be this is because he doesn't have a cabin. Let's dive in to fares a litle bit more...","0d553ce5":"It seems that **'Fare'** and **'Embarked'** columns are encouraging for new patterns since they have very few null values which can be modified somehow.\n\nMoreover correlation of 'Fare' with 'Survived' is relatively **high** (second after **'Pclass'**). This is as expected. Probably how much they paid for the tickets determined where they slept at that unholly night.\n\nLet's see who have these missing values.","c46d4a77":"If we can replace missing 'Fare' data of **\"Storey, Mr. Thomas\"** with a meaningful value we can use the '*Fare*' column in our model (we do not want to drop any non value since our purpose is the use all the data as much as possible).\n\nSimilarly if we can replace missing 'Embarked' data of **\"Icard, Miss. Amelie\"** and **\"Stone Mrs. George Nelson (Martha Evelyn)\"** with meaningful values we can also use the \"*Embarked*\" column in our model.\n\nLet's start with **Mr. Storey**:\n\n**Mr. Storey** embarked from Southampton. He was traveling in the third class section. Let's look who else is in the same status at datasets.","2f7c5e63":"**Miss Icard's** and **Mrs Stone's** embarking location is missing. Let's start with **'Fare'**. Is there anybody else who gave **\u00a3 80.0** for their ticket?","c0a91166":"Hi all. I will use some work of **@alexisbcook** ([Titanic Tutorial](https:\/\/www.kaggle.com\/alexisbcook\/titanic-tutorial \"Alexis Cook\u2019s Titanic Tutorial\")) and **@dansbecker** ([Intro to Machine Learning](https:\/\/www.kaggle.com\/learn\/intro-to-machine-learning \"Dan Becker\u2019s course\")) in this notebook. My purpose is to use all columns of the training data in my model with the most reasonable imputations. I will also impute to test data.\n\nAt the end of the notebook there is a references section for some of my copy & pastes. The others can be found next to code I pasted.","cc20d564":"First let's search for some new patterns on both datasets. So far we have only used \"Pclass\", \"Sex\", \"SibSp\" and \"Parch\" columns ([Titanic Tutorial](https:\/\/www.kaggle.com\/alexisbcook\/titanic-tutorial \"Alexis Cook\u2019s Titanic Tutorial\")). ","e22f38af":" **'Fare'** does not reveal much. Let's try a different approach. **Miss Icard's** and **Mrs Stone's** Cabin number is **B28**. Let's find the cabins with **'B'**... ","b55b46b6":"It's seen that cabins starting with **'B2'** are from **'Southampton'**. So let's use **'S'** for **Miss Icard** and **Mrs Stone**.","78bda075":"OK. Now we can use **'Embarked'** column in our model.","d38b4797":"Let' search for null values...","15061471":"Get the data...","7cb6f221":"4 people in the datasets have string 3701 on their tickets. One of them is Mr Storey whose fare we do not know. The others are Rosblom family. Their ticket number is '370129' and paid \u00a3 20.2125 each. May be Mr Storey's ticket was something like '370128' and was torn somehow and we lost the last 2 digit and the fare amount together. This makes sense. Also explains why Mr Storey's fare is missing.\n\nWhich one shall we use for Mr Storey's fare?\n* \u00a3 14.644083 (the avarage training data fare)?\n* \u00a3 13.913030 (the avarage test data fare)?\n* \u00a3 7.8875 (4 digit tickets)?\n* \u00a3 20.2125 (tickets contain '3701')?\n\nLet's use \u00a3 20.2125 for Mr Storey's fare since torn ticket theory also explains why Mr Storey's fare is missing ","7fbce7c4":"No one else paid that amount of money. Let's check then who else paid **\u00a3 70.0** or more."}}