{"cell_type":{"18be35ff":"code","01295191":"code","e6a5dcfd":"code","1fdfcfe3":"code","10587bee":"code","1ebf9952":"code","9819d465":"code","d9541531":"code","151c6bba":"code","0d4d165a":"code","e0a84523":"code","49307fe2":"code","5c58d3b7":"code","ec5739b8":"code","72048d93":"code","b73da9e2":"code","d11a9592":"code","5f636804":"code","91b2e89c":"markdown","0a830123":"markdown","586234c5":"markdown","2e18ccb3":"markdown","1e8fdf16":"markdown","3162d5c8":"markdown","3464b485":"markdown","fbc78a00":"markdown","13b944a8":"markdown","d3ea1004":"markdown","6c0e64ad":"markdown","f1cbfe7a":"markdown","15c90859":"markdown","9535acd6":"markdown","f66ac63f":"markdown","a286c148":"markdown"},"source":{"18be35ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","01295191":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"..\/input\/food-preferences\/Food_Preference.csv\")","e6a5dcfd":"df.head(2)","1fdfcfe3":"data = df #creating copy of the data\n\ncolumns_with_null = data.isnull().sum()\ncolumns_with_null = columns_with_null[columns_with_null != 0]","10587bee":"columns_with_null","1ebf9952":"nan_entries = data.isnull()\nrow_has_nan = nan_entries.any(axis = 1)\ndata[row_has_nan]","9819d465":"print(list(data['Nationality'].unique()))","d9541531":"a4_dims = (21, 6)\nfig, ax = plt.subplots(1,2,figsize=a4_dims)\nax[0].set(title = 'Distribtion Including Indian Nationality')\nax[1].set(title = 'Distribution Excluding Indian Nationality')\nsns.barplot(x = data['Nationality'].value_counts(),y= data['Nationality'].value_counts().index, ax = ax[0])\nsns.barplot(x = data['Nationality'][data['Nationality'] != 'Indian'].value_counts(),y= data['Nationality'][data['Nationality'] != 'Indian'].value_counts().index, ax = ax[1])","151c6bba":"rowsWithIndianNationality = float(data['Nationality'][data['Nationality'] == \"Indian\"].value_counts())\ntotalRows = float(data['Nationality'].value_counts().sum())\nperc = (rowsWithIndianNationality)\/(totalRows)*100\n\nprint(\"The % of data belonging to Indian Nationality is:\", perc,\"%\")\n","0d4d165a":"dims = (20, 5)\nfig, ax = plt.subplots(1,3,figsize=dims)\nax[0].set(title = 'Distribution of Food')\nax[1].set(title = 'Distrubition of Juice')\nax[2].set(title = 'Distribution of Dessert')\n#ax[0].set_xticklabels(ax[0].get_yticklabels(), rotation=45)\n#ax[1].set_xticklabels(ax[1].get_yticklabels(), rotation=90)\n#ax[2].set_xticklabels(ax[2].get_yticklabels(), rotation=90)\nsns.barplot(x = data[data['Nationality'] == \"Indian\"].Food.value_counts(), y = data.Food.value_counts().index, ax = ax[0])\nsns.barplot(x = data[data['Nationality'] == \"Indian\"].Juice.value_counts(), y = data.Juice.value_counts().index, ax = ax[1])\nsns.barplot(x = data[data['Nationality'] == \"Indian\"].Dessert.value_counts(), y = data.Dessert.value_counts().index, ax = ax[2])","e0a84523":"dims = (20, 5)\nfig, ax = plt.subplots(1,3,figsize=dims)\nax[0].set(title = 'Gender-wise count of Food Choice')\nax[1].set(title = 'Gender-wise count of Juice Choice')\nax[2].set(title = 'Gender-wise count of Dessert Choice')\n\n#visualizing the above\nsns.countplot('Food', hue = 'Gender', data = data[data['Nationality'] == \"Indian\"], ax = ax[0])\nsns.countplot('Juice', hue = 'Gender', data = data[data['Nationality'] == \"Indian\"], ax = ax[1])\nsns.countplot('Dessert', hue = 'Gender', data = data[data['Nationality'] == \"Indian\"], ax = ax[2])","49307fe2":"sns.distplot(data['Age'], color = 'g')","5c58d3b7":"sns.FacetGrid(data[data['Nationality'] == \"Indian\"], col = 'Food', row = 'Gender').map(sns.distplot, 'Age')","ec5739b8":"sns.FacetGrid(data[data['Nationality'] == \"Indian\"], col = 'Juice', row = 'Gender').map(sns.distplot, 'Age')","72048d93":"sns.FacetGrid(data[data['Nationality'] == \"Indian\"], col = 'Dessert', row = 'Gender').map(sns.distplot, 'Age')","b73da9e2":"dims = (10, 15)\nfig, ax = plt.subplots(3,2,figsize=dims)\nax[0][0].set(title = 'Males Only (Food Choice vs Age)')\nax[0][1].set(title = 'Females Only(Food Choice vs Age)')\n\nsns.swarmplot(y = data['Age'][data.Gender == 'Male'], x = data['Food'][data.Gender == 'Male'], ax = ax[0][0])\nsns.swarmplot(y = data['Age'][data.Gender == 'Female'], x = data['Food'][data.Gender == 'Female'], ax = ax[0][1])\n\nax[1][0].set(title = 'Males Only (Juice Choice vs Age)')\nax[1][1].set(title = 'Females Only(Juice Choice vs Age)')\n\nsns.swarmplot(y = data['Age'][data.Gender == 'Male'], x = data['Juice'][data.Gender == 'Male'], ax = ax[1][0])\nsns.swarmplot(y = data['Age'][data.Gender == 'Female'], x = data['Juice'][data.Gender == 'Female'], ax = ax[1][1])\n\nax[2][0].set(title = 'Males Only (Dessert Choice vs Age)')\nax[2][1].set(title = 'Females Only (Dessert Choice vs Age)')\n\nsns.swarmplot(y = data['Age'][data.Gender == 'Male'], x = data['Dessert'][data.Gender == 'Male'], ax = ax[2][0])\nsns.swarmplot(y = data['Age'][data.Gender == 'Female'], x = data['Dessert'][data.Gender == 'Female'], ax = ax[2][1])","d11a9592":"dims = (20, 5)\nfig, ax = plt.subplots(1,3,figsize=dims)\n\nax[0].set(title = 'Food Choice vs Age')\nsns.swarmplot(y = data['Age'], x = data['Food'], ax = ax[0])\n\nax[1].set(title = 'Juice Choice vs Age')\nsns.swarmplot(y = data['Age'], x = data['Juice'], ax = ax[1])\n\nax[2].set(title = 'Dessert Choice vs Age')\nsns.stripplot(y = data['Age'], x = data['Dessert'], ax = ax[2])","5f636804":"dims = (20, 5)\nfig, ax = plt.subplots(1,2,figsize=dims)\nax[0].set(title = 'When Choice is Fresh Juice')\nsns.countplot('Dessert', hue = 'Food', data = data[data.Juice == 'Fresh Juice'], ax = ax[0])\n\nax[1].set(title = 'When Choice is Carbonated Drinks')\nsns.countplot('Dessert', hue = 'Food', data = data[data.Juice == 'Carbonated drinks'], ax = ax[1])","91b2e89c":"## Gender-Wise Age Distribution according to different Food Choices (using SwarmPlot)","0a830123":"## Choice of Dessert with Different Combinations of Food & Juice","586234c5":"## Handling Missing Values","2e18ccb3":"## Age Distribution in the Datset","1e8fdf16":"## Distribution of Food, Juice and Desserts","3162d5c8":"### Distribution of the Data according to different Nationalities","3464b485":"## Gender-Wise Age Distribution according to different Food Choices","fbc78a00":"#### Since 84% of our data belongs to Indian Nationality - we'll only focus on it for now","13b944a8":"## Nationality","d3ea1004":"#### We can see that that the null values are from two nationalities - Indian and Muslim. Both the rows contain relevant data except the null values in the Gender column.\n\n#### Hence, we can keep this data to avoid loss of information.","6c0e64ad":"## Age vs Choice Food, Juice and Dessert","f1cbfe7a":"#### We found that 4 entries have null values for the Gender column. Let's look at it to figure out how relevant it is for our EDA.","15c90859":"#### Let's have a look at the different nationalities present in the data.","9535acd6":"#### Percentage of Records belonging to Indian Nationality","f66ac63f":"## Gender-wise count of choice of Food, Juice and Dessert","a286c148":"### Choice of Food vs Age (for Males only) using SwarmPlot"}}