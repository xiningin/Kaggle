{"cell_type":{"3034bf0f":"code","7373576b":"code","b08051c5":"code","f9672d94":"code","ed32e758":"code","ce7535e4":"code","1f8888ce":"code","e97b9b09":"code","95500a4f":"code","8482c2f6":"code","ce1861c8":"code","59a6576f":"code","ccfa0e02":"code","5cd1e02f":"code","82e20ed5":"code","cb6740c3":"code","8cee6e10":"code","3784fdb7":"code","43c7eb01":"code","e02fc603":"code","0a266f62":"code","3b16e6de":"code","3d8d8981":"code","333d47c3":"code","9822422e":"code","c9127eda":"code","0a203206":"code","5c54339a":"code","b6903a81":"code","be8e81d6":"code","c976ac29":"code","b58fc08f":"code","371ddcb1":"code","e4e1ebf3":"code","90259a3b":"code","e469ad1e":"code","5ca71341":"code","5f3099c5":"code","cb8a8c1f":"code","4db2a226":"code","a8c6e203":"code","c237a49c":"code","2f03f273":"code","186ea5f2":"code","c0b73700":"code","48dcae1e":"code","6c2266fd":"code","322751ac":"code","3eda4b2a":"code","b8fdf89c":"code","678480db":"code","1c2204fa":"code","65ee7d2f":"code","139e7780":"code","f3736cf3":"code","f8c900c1":"code","65ca9438":"code","ad739a82":"code","d0990d97":"markdown","1ac2fd6c":"markdown","0fa74e21":"markdown","4b72c5d0":"markdown","e491965e":"markdown","ce139a93":"markdown","a723ba61":"markdown","bd29a6aa":"markdown","2e9a9321":"markdown","eb8abe49":"markdown","d2c9af1e":"markdown","85323a5e":"markdown","ab739427":"markdown","5b291e50":"markdown","c4290340":"markdown","feaca667":"markdown","79227a2c":"markdown","5d3ff453":"markdown","f5a59cb4":"markdown","075fbf40":"markdown","e5d2d528":"markdown","6e5bd7c1":"markdown","116e71ab":"markdown","5bf1106d":"markdown","91a60a01":"markdown","cfe69fc8":"markdown","e967fa4b":"markdown","fe8f2004":"markdown","f9309ca8":"markdown","53338db8":"markdown","c73462fc":"markdown","48c3fbdd":"markdown","a87c239a":"markdown","593a8749":"markdown","b420ebb3":"markdown","c505545d":"markdown","81be45c8":"markdown","e886d864":"markdown","9019a635":"markdown","a6904b67":"markdown","2f6e6f86":"markdown","02ef62db":"markdown","d9c798f4":"markdown"},"source":{"3034bf0f":"# ====================================================\n# CFG\n# ====================================================\nclass CFG:   \n    seed=2021\n    n_fold=5\n    max_model=10\n    max_runtime_secs=180 #10800","7373576b":"import os\nimport random\nimport glob\nimport gc\nfrom tqdm import tqdm\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport missingno as msno\n\nimport pyarrow as pa\nimport pyarrow.parquet as pq\n\nimport matplotlib.pyplot as plt\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b08051c5":"# ====================================================\n# Utils\n# ====================================================\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything(seed=CFG.seed)","f9672d94":"train = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\ntrain.head()","ed32e758":"msno.matrix(train, fontsize = 16)","ce7535e4":"def log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff()\n\n\ndef realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))\n\n\ndef calculate_wap(df):\n    '''\n    https:\/\/www.kaggle.com\/konradb\/we-need-to-go-deeper\n    '''\n#     a = df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1']\n#     b = df['bid_size1']+ df['ask_size1']\n        \n    a1 = df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1']\n    a2 = df['bid_price2'] * df['ask_size2'] + df['ask_price2'] * df['bid_size2']\n    b = df['bid_size1'] + df['ask_size1'] + df['bid_size2']+ df['ask_size2']\n    \n    x = (a1 + a2) \/ b\n    return x\n\n\ndef get_log_return_df_per_time_id(file_path):\n    #df_book_data = pd.read_parquet(file_path)\n    dataset = pq.ParquetDataset(file_path)\n    book_dataset = dataset.read()\n    df_book_data = book_dataset.to_pandas()\n    \n    df_book_data['wap'] = calculate_wap(df_book_data)\n    df_book_data['log_return'] = df_book_data.groupby(['time_id'])['wap'].apply(log_return)\n    df_book_data = df_book_data[~df_book_data['log_return'].isnull()]\n\n    stock_id = file_path.split('=')[1]\n    df_book_data['row_id'] = df_book_data['time_id'].apply(lambda x:f'{stock_id}-{x}')\n    \n    del dataset, book_dataset\n    gc.collect()\n    \n    return df_book_data\n\n\n\ndef get_realized_volatility_df_per_time_id(file_path):\n    #df_book_data = pd.read_parquet(file_path)\n    dataset = pq.ParquetDataset(file_path)\n    book_dataset = dataset.read()\n    df_book_data = book_dataset.to_pandas()\n    \n    df_book_data['wap'] = calculate_wap(book_example)\n    df_book_data['log_return'] = df_book_data.groupby(['time_id'])['wap'].apply(log_return)\n    df_book_data = df_book_data[~df_book_data['log_return'].isnull()]\n    \n    df_book_data['realized_volatility'] = df_book_data.groupby(['time_id'])['log_return'].apply(realized_volatility)\n    df_book_data = df_book_data[~df_book_data['realized_volatility'].isnull()]\n\n    stock_id = file_path.split('=')[1]\n    df_book_data['row_id'] = df_book_data['time_id'].apply(lambda x:f'{stock_id}-{x}')\n    \n    del dataset, book_dataset\n    gc.collect()    \n    \n    return df_book_data\n\n\ndef realized_volatility_per_time_id(file_path, prediction_column_name):\n    df_book = pd.read_parquet(file_path)\n    df_book['wap'] = calculate_wap(df_book)\n    df_book['log_return'] = df_book.groupby(['time_id'])['wap'].apply(log_return)\n    df_book = df_book[~df_book['log_return'].isnull()]\n    df_realized_vol_per_stock =  pd.DataFrame(df_book.groupby(['time_id'])['log_return'].agg(realized_volatility)).reset_index()\n    df_realized_vol_per_stock = df_realized_vol_per_stock.rename(columns = {'log_return':prediction_column_name})\n    stock_id = file_path.split('=')[1]\n    df_realized_vol_per_stock['row_id'] = df_realized_vol_per_stock['time_id'].apply(lambda x:f'{stock_id}-{x}')\n    return df_realized_vol_per_stock[['row_id',prediction_column_name]]\n","1f8888ce":"%%time\nbook_example = pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0')","e97b9b09":"%%time\ndataset = pq.ParquetDataset('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0')\nbook_example = dataset.read()\nbook_example = book_example.to_pandas()","95500a4f":"dataset = pq.ParquetDataset('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=5')\nbook_example = dataset.read()\nbook_example = book_example.to_pandas()","8482c2f6":"trade_dataset = pq.ParquetDataset('..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=5')\ntrade_example = trade_dataset.read()\ntrade_example = trade_example.to_pandas()","ce1861c8":"# stock_id = 5, time_id = 5\nstock_id = '5'\ntime_id = 5\n\nbook_example = book_example[book_example['time_id']==time_id]\nbook_example.loc[:,'stock_id'] = stock_id\n\ntrade_example = trade_example[trade_example['time_id']==time_id]\ntrade_example.loc[:,'stock_id'] = stock_id","59a6576f":"book_example.head()","ccfa0e02":"trade_example.head()","5cd1e02f":"msno.matrix(book_example, fontsize = 16)","82e20ed5":"msno.matrix(trade_example, fontsize = 16)","cb6740c3":"# Get WAP\nbook_example['wap'] = calculate_wap(book_example)","8cee6e10":"fig = px.line(book_example, x=\"seconds_in_bucket\", y=\"wap\", title='WAP of stock_id_5, time_id_5')\nfig.show()","3784fdb7":"book_example","43c7eb01":"book_example.loc[:,'log_return'] = log_return(book_example['wap'])\nbook_example","e02fc603":"book_example = book_example[~book_example['log_return'].isnull()]\n\nfig = px.line(book_example, x=\"seconds_in_bucket\", y=\"log_return\", title='Log return of stock_id_5, time_id_5')\nfig.show()","0a266f62":"%%time\nbook_example.groupby(['time_id'])['log_return'].apply(realized_volatility)","3b16e6de":"book_example.loc[:,'realized_volatility'] = book_example.groupby(['time_id'])['log_return'].apply(realized_volatility)\nbook_example","3d8d8981":"%%time\nbook_example.groupby(['time_id'])['log_return'].agg(realized_volatility)","333d47c3":"book_example.loc[:,'realized_volatility'] = book_example.groupby(['time_id'])['log_return'].agg(realized_volatility)\nbook_example","9822422e":"new_book_example = book_example[~book_example['realized_volatility'].isnull()].reset_index()\nnew_book_example","c9127eda":"new_book_example[['time_id', 'log_return']]","0a203206":"pd.DataFrame(book_example.groupby(['time_id'])['log_return'].agg(realized_volatility)).reset_index()","5c54339a":"book_example","b6903a81":"fig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=book_example[\"seconds_in_bucket\"], \n        y=book_example[\"bid_price1\"], \n        mode='lines', \n        name='bid_price1'\n    )\n)\nfig.add_trace(\n    go.Scatter(\n        x=book_example[\"seconds_in_bucket\"], \n        y=book_example[\"bid_price2\"], \n        mode='lines', \n        name='bid_price2'\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=trade_example[\"seconds_in_bucket\"], \n        y=trade_example[\"price\"], \n        mode='lines', \n        name='trade_price'\n    )\n)\n\nfig.show()","be8e81d6":"fig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=book_example[\"seconds_in_bucket\"], \n        y=book_example[\"ask_price1\"], \n        mode='lines', \n        name='ask_price1'\n    )\n)\nfig.add_trace(\n    go.Scatter(\n        x=book_example[\"seconds_in_bucket\"], \n        y=book_example[\"ask_price2\"], \n        mode='lines', \n        name='ask_price2'\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=trade_example[\"seconds_in_bucket\"], \n        y=trade_example[\"price\"], \n        mode='lines', \n        name='trade_price'\n    )\n)\n\nfig.show()","c976ac29":"fig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=book_example[\"seconds_in_bucket\"], \n        y=book_example[\"bid_price1\"], \n        mode='lines', \n        name='bid_price1'\n    )\n)\nfig.add_trace(\n    go.Scatter(\n        x=book_example[\"seconds_in_bucket\"], \n        y=book_example[\"bid_price2\"], \n        mode='lines', \n        name='bid_price2'\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=book_example[\"seconds_in_bucket\"], \n        y=book_example[\"ask_price1\"], \n        mode='lines', \n        name='ask_price1'\n    )\n)\nfig.add_trace(\n    go.Scatter(\n        x=book_example[\"seconds_in_bucket\"], \n        y=book_example[\"ask_price2\"], \n        mode='lines', \n        name='ask_price2'\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=trade_example[\"seconds_in_bucket\"], \n        y=trade_example[\"price\"], \n        mode='lines', \n        name='trade_price'\n    )\n)\n\nfig.show()","b58fc08f":"book_example","371ddcb1":"temp_aggs = book_example.groupby(['time_id']).agg(\n                                            bid_price1_min = ('bid_price1', 'min'),\n                                            bid_price2_max = ('bid_price2', 'max'),\n                                            bid_price1_mean = ('bid_price1', 'mean'),\n                                            bid_price2_mean = ('bid_price2', 'mean'),\n                                            bid_price1_median = ('bid_price1', 'median'),\n                                            bid_price2_median = ('bid_price2', 'median'),\n                                            ask_price1_min = ('ask_price1', 'min'),\n                                            ask_price2_max = ('ask_price2', 'max'),\n                                            ask_price1_mean = ('ask_price1', 'mean'),\n                                            ask_price2_mean = ('ask_price2', 'mean'),\n                                            ask_price1_median = ('ask_price1', 'median'),\n                                            ask_price2_median = ('ask_price2', 'median'),\n)","e4e1ebf3":"aggs_book_example = pd.merge(new_book_example, temp_aggs, on=['time_id'], how='left')\naggs_book_example","90259a3b":"aggs_book_example.columns","e469ad1e":"plt.figure(figsize=(16, 8))\n\nplt.plot(book_example['seconds_in_bucket'], book_example['bid_price1'])\nplt.plot(book_example['seconds_in_bucket'], book_example['bid_price2'])\n\nplt.plot(trade_example['seconds_in_bucket'], trade_example['price'])\n\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['bid_price1_min'],\n            s=150,\n            label='min'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['bid_price2_max'],\n            s=150,\n            label='max'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['bid_price1_mean'],\n            s=150,\n            label='mean1'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['bid_price2_mean'],\n            s=150,\n            label='mean2'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['bid_price1_median'],\n            s=150,\n            label='median1'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['bid_price2_median'],\n            s=150,\n            label='median2'\n           )\n\n\nplt.xlabel('seconds_in_bucket', fontsize=12)\nplt.ylabel('bid_price', fontsize=12)\n\nplt.legend()\nplt.show()","5ca71341":"plt.figure(figsize=(16, 8))\n\nplt.plot(book_example['seconds_in_bucket'], book_example['ask_price1'])\nplt.plot(book_example['seconds_in_bucket'], book_example['ask_price2'])\n\nplt.plot(trade_example['seconds_in_bucket'], trade_example['price'])\n\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['ask_price1_min'],\n            s=150,\n            label='min'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['ask_price2_max'],\n            s=150,\n            label='max'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['ask_price1_mean'],\n            s=150,\n            label='mean1'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['ask_price2_mean'],\n            s=150,\n            label='mean2'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['ask_price1_median'],\n            s=150,\n            label='median1'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['ask_price2_median'],\n            s=150,\n            label='median2'\n           )\n\nplt.xlabel('seconds_in_bucket', fontsize=12)\nplt.ylabel('ask_price', fontsize=12)\n\nplt.legend()\nplt.show()","5f3099c5":"plt.figure(figsize=(16, 8))\n\nplt.plot(book_example['seconds_in_bucket'], book_example['bid_price1'])\nplt.plot(book_example['seconds_in_bucket'], book_example['bid_price2'])\n\nplt.plot(book_example['seconds_in_bucket'], book_example['ask_price1'])\nplt.plot(book_example['seconds_in_bucket'], book_example['ask_price2'])\n\nplt.plot(trade_example['seconds_in_bucket'], trade_example['price'])\n\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['bid_price1_min'],\n            s=150,\n            label='min'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['bid_price2_max'],\n            s=150,\n            label='max'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['bid_price1_mean'],\n            s=150,\n            label='mean1'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['bid_price2_mean'],\n            s=150,\n            label='mean2'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['bid_price1_median'],\n            s=150,\n            label='median1'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['bid_price2_median'],\n            s=150,\n            label='median2'\n           )\n\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['ask_price1_min'],\n            s=150,\n            label='min'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['ask_price2_max'],\n            s=150,\n            label='max'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['ask_price1_mean'],\n            s=150,\n            label='mean1'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['ask_price2_mean'],\n            s=150,\n            label='mean2'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['ask_price1_median'],\n            s=150,\n            label='median1'\n           )\nplt.scatter(x=aggs_book_example['seconds_in_bucket'], \n            y=aggs_book_example['ask_price2_median'],\n            s=150,\n            label='median2'\n           )\n\n\nplt.xlabel('seconds_in_bucket', fontsize=12)\nplt.ylabel('bid_price & ask_price', fontsize=12)\n\nplt.legend()\nplt.show()","cb8a8c1f":"fig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=book_example[\"seconds_in_bucket\"], \n        y=book_example[\"bid_size1\"], \n        mode='lines', \n        name='bid_size1'\n    )\n)\nfig.add_trace(\n    go.Scatter(\n        x=book_example[\"seconds_in_bucket\"], \n        y=book_example[\"bid_size2\"], \n        mode='lines', \n        name='bid_size2'\n    )\n)\n\nfig.show()","4db2a226":"fig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=book_example[\"seconds_in_bucket\"], \n        y=book_example[\"ask_size1\"], \n        mode='lines', \n        name='ask_size1'\n    )\n)\nfig.add_trace(\n    go.Scatter(\n        x=book_example[\"seconds_in_bucket\"], \n        y=book_example[\"ask_size2\"], \n        mode='lines', \n        name='ask_size2'\n    )\n)\n\nfig.show()","a8c6e203":"temp_aggs = book_example.groupby(['time_id']).agg(\n    bid_size1_min = ('bid_size1', 'min'),\n    bid_size1_max = ('bid_size1', 'max'),\n    bid_size2_min = ('bid_size2', 'min'),\n    bid_size2_max = ('bid_size2', 'max'),\n    bid_size1_mean = ('bid_size1', 'mean'),\n    bid_size2_mean = ('bid_size2', 'mean'),\n    bid_size1_median = ('bid_size1', 'median'),\n    bid_size2_median = ('bid_size2', 'median'),\n    \n    ask_size1_min = ('ask_size1', 'min'),\n    ask_size1_max = ('ask_size1', 'max'),\n    ask_size2_min = ('ask_size2', 'min'),\n    ask_size2_max = ('ask_size2', 'max'),\n    ask_size1_mean = ('ask_size1', 'mean'),\n    ask_size2_mean = ('ask_size2', 'mean'),\n    ask_size1_median = ('ask_size1', 'median'),\n    ask_size2_median = ('ask_size2', 'median'),              \n)","c237a49c":"aggs_book_example2 = pd.merge(aggs_book_example, temp_aggs, on=['time_id'], how='left')\naggs_book_example2","2f03f273":"plt.figure(figsize=(16, 8))\n\n# plt.plot(book_example['bid_price1'])\n# plt.plot(book_example['bid_price2'])\nplt.scatter(x=1, \n            y=aggs_book_example2['bid_size1_min'],\n            s=50,\n            label='min1'\n           )\nplt.scatter(x=1, \n            y=aggs_book_example2['bid_size1_max'],\n            s=aggs_book_example2['bid_size1_max'] * 1.5,\n            label='max1'\n           )\nplt.scatter(x=2, \n            y=aggs_book_example2['bid_size2_min'],\n            s=50,\n            label='min2'\n           )\nplt.scatter(x=2, \n            y=aggs_book_example2['bid_size2_max'],\n            s=aggs_book_example2['bid_size2_max'] * 1.5,\n            label='max2'\n           )\nplt.scatter(x=1, \n            y=aggs_book_example2['bid_size1_mean'],\n            s=50,\n            label='mean1'\n           )\nplt.scatter(x=2, \n            y=aggs_book_example2['bid_size2_mean'],\n            s=50,\n            label='mean2'\n           )\nplt.scatter(x=1, \n            y=aggs_book_example2['bid_size1_median'],\n            s=50,\n            label='median1'\n           )\nplt.scatter(x=2, \n            y=aggs_book_example2['bid_size2_median'],\n            s=50,\n            label='median2'\n           )\n\n\nplt.xlabel('seconds_in_bucket', fontsize=12)\nplt.ylabel('bid_size', fontsize=12)\n\nplt.legend()\nplt.show()","186ea5f2":"plt.figure(figsize=(16, 8))\n\n# plt.plot(book_example['bid_price1'])\n# plt.plot(book_example['bid_price2'])\nplt.scatter(x=1, \n            y=aggs_book_example2['ask_size1_min'],\n            s=50,\n            label='min1'\n           )\nplt.scatter(x=1, \n            y=aggs_book_example2['ask_size1_max'],\n            s=aggs_book_example2['ask_size1_max'] * 1.5,\n            label='max1'\n           )\nplt.scatter(x=2, \n            y=aggs_book_example2['ask_size2_min'],\n            s=aggs_book_example2['ask_size2_min'],\n            label='min2'\n           )\nplt.scatter(x=2, \n            y=aggs_book_example2['ask_size2_max'],\n            s=aggs_book_example2['ask_size2_max'] * 1.5,\n            label='max2'\n           )\nplt.scatter(x=1, \n            y=aggs_book_example2['ask_size1_mean'],\n            s=50,\n            label='mean1'\n           )\nplt.scatter(x=2, \n            y=aggs_book_example2['ask_size2_mean'],\n            s=50,\n            label='mean2'\n           )\nplt.scatter(x=1, \n            y=aggs_book_example2['ask_size1_median'],\n            s=50,\n            label='median1'\n           )\nplt.scatter(x=2, \n            y=aggs_book_example2['ask_size2_median'],\n            s=50,\n            label='median2'\n           )\n\n\nplt.xlabel('size1 & size2', fontsize=12)\nplt.ylabel('ask_size', fontsize=12)\n\nplt.legend()\nplt.show()","c0b73700":"import h2o\nfrom h2o.automl import H2OAutoML","48dcae1e":"h2o.init(max_mem_size='10G', nthreads=16)","6c2266fd":"list_order_book_file_train = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/*')","322751ac":"# ==============================================================================\n# past_realized_volatility_per_stock -> get_realized_volatility_df_per_time_id\n# ==============================================================================\n\n# def past_realized_volatility_per_stock(list_file, isRV=True):\n#     df_past_realized = pd.DataFrame()\n#     for file in list_file:\n#         if isRV is True:\n#             df_past_realized = pd.concat([df_past_realized,\n#                                          get_realized_volatility_df_per_time_id(file)])\n#         else:\n#             df_past_realized = pd.concat([df_past_realized,\n#                                          get_log_return_df_per_time_id(file)])\n#     return df_past_realized\n#\n# later, i will ust above method\n\ndef past_realized_volatility_per_stock(list_file,prediction_column_name):\n    df_past_realized = pd.DataFrame()\n    for file in tqdm(list_file):\n        df_past_realized = pd.concat([df_past_realized,\n                              realized_volatility_per_time_id(file,prediction_column_name)])\n    return df_past_realized","3eda4b2a":"#df_past_realized_train = past_realized_volatility_per_stock(list_order_book_file_train, isRV=False)","b8fdf89c":"#msno.matrix(df_past_realized_train, fontsize=16)","678480db":"#df_past_realized_train","1c2204fa":"'''\ntrain['row_id'] = train['stock_id'].astype(str) + '-' + train['time_id'].astype(str)\nnew_train = train.merge(df_past_realized_train.loc[:, 'seconds_in_bucket':'row_id'], on=['row_id'], how='left')\n\nnew_train = new_train[~new_train['seconds_in_bucket'].isnull()].reset_index(drop=True)\n\nnew_train = new_train.loc[:, :'log_return'] # later, realized_volatility will be added.\n#new_train = new_train.loc[:, :'realized_volatility'] # later, realized_volatility will be added.\nnew_train\n'''","65ee7d2f":"'''\ntrain_df = h2o.H2OFrame(new_train)\n\nx = train_df.columns[4:]\ny = 'target'\n\ntrain_df\n\naml = H2OAutoML(\n    max_models=CFG.max_model,\n    seed=CFG.seed, \n    max_runtime_secs=CFG.max_runtime_secs, #10800\n    nfolds = CFG.n_fold,\n    exclude_algos = [\"DeepLearning\"]\n)\naml.train(x=x, y=y, training_frame=train_df)\n\nlb = aml.leaderboard \nlb.head(rows = lb.nrows)\n\ndel new_train, df_past_realized_train, train\ngc.collect()\n'''","139e7780":"test = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/test.csv')","f3736cf3":"# list_order_book_file_test = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_test.parquet\/*')\n\n# df_past_realized_test = past_realized_volatility_per_stock(list_order_book_file_test, isRV=False)\n\n# test['row_id'] = test['stock_id'].astype(str) + '-' + test['time_id'].astype(str)\n# new_test = test.merge(df_past_realized_test.loc[:, 'seconds_in_bucket':'row_id'], on=['row_id'], how='left')\n# new_test = new_test[~new_test['seconds_in_bucket'].isnull()].reset_index(drop=True)\n# temp_test = new_test.loc[:,'seconds_in_bucket':]","f8c900c1":"list_order_book_file_test = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_test.parquet\/*')\ndf_naive_pred_test = df_past_realized_train = past_realized_volatility_per_stock(\n                                                    list_file=list_order_book_file_test,\n                                                    prediction_column_name='target')","65ca9438":"list_order_book_file_test = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_test.parquet\/*')\n\ndf_naive_pred_test = df_past_realized_train = past_realized_volatility_per_stock(list_file=list_order_book_file_test,\n                                                           prediction_column_name='target')\ndf_naive_pred_test.to_csv('submission.csv',index = False)","ad739a82":"df_naive_pred_test","d0990d97":"# Basic Utils","1ac2fd6c":"<h1 id=\"title\" style=\"color:white;background:black\">\n    <center>\n        Optiver Realized Volatility Prediction\n    <\/center>\n    <center>\n        Basic EDA + \u03b1\n    <\/center>\n<\/h1>","0fa74e21":"The difference between min and max for `bid_size` is large.","4b72c5d0":"### Realized Volatility","e491965e":"# Make a submission","ce139a93":"# Import Libraries","a723ba61":"One missing value occurs. I will remove `NaN` value.","bd29a6aa":"# Using ParquetDataset","2e9a9321":"let's look at `bid_price1`, `bid_price2`.","eb8abe49":"And this is the same result as in the original example in `realized_volatility_per_time_id` method.\n- https:\/\/www.kaggle.com\/jiashenliu\/introduction-to-financial-concepts-and-data\n","d2c9af1e":"# AutoML - H2O","85323a5e":"- bid_price1, 2","ab739427":"Now, we have `min`, `max`, `mean`, `median` values for `bid_pricd` and `ask_price`.","5b291e50":"- `ask_size1` is a little higher than `ask_size2`.","c4290340":"## This notebook explains basic EDA and how to use AutoML.\n\nI will continue to do EDA and visualization for stock data little by little. :)\n\np.s. If you use this notebook as a submission, there is an issue with `memory overflow` during submission time.\n\nIt is recommended to safely separate the notebook that training and inference model for submission.","feaca667":"### Min, max, mean, median","79227a2c":"In this case, the stock price is expected to rise because the buy level is higher than the sell level.\n\nIt seems to be relatively high volatility.","5d3ff453":"We can get 1 row with `NaN` values removed.","f5a59cb4":"# CFG","075fbf40":"### WAP","e5d2d528":"- ask_price1, 2","6e5bd7c1":"Get `WAP` using the method below.","116e71ab":"There is no NaN values in train.","5bf1106d":"We can see the place for `max`, `min`, `mean`, and `median` values in the plot.","91a60a01":"- https:\/\/www.kaggle.com\/jiashenliu\/introduction-to-financial-concepts-and-data","cfe69fc8":"`ask_size` also has a big difference between min and max.","e967fa4b":"## bid_size, ask_size","fe8f2004":"We can also use `agg` instead of `apply`. CPU times of `agg` is a little faster than `apply`.","f9309ca8":"## bid_price, ask_price","53338db8":"I think most people will use `stock_id=0` as an example. I will use `stock_id=5` and `time_id=5` as an example here.","c73462fc":"## WIP... Later, I will make method for features and training AutoML.","48c3fbdd":"- `bid_size1` is a little higher than `bid_size2`.","a87c239a":"We know that various items have two features 1 and 2. for example, there are `bid_price1`, `bid_price2`.","593a8749":"Now, I just use the submission for original notebook.","b420ebb3":"Now let's look at `bid_size` and `ask_size`.\n\n- bid_size1, 2 - The number of shares on the most\/second most competitive buy level.\n- ask_size1, 2 - The number of shares on the most\/second most competitive sell level.","c505545d":"Based on `time_id`, I will apply `realized_volatility` method to `log_return`.","81be45c8":"## If this kernel is useful, <font color='orange'>please upvote<\/font>!","e886d864":"## If this kernel is useful, <font color='orange'>please upvote<\/font>!","9019a635":"## Check Utils","a6904b67":"We can also see `ask_price1`, `ask_price2`.","2f6e6f86":"### log return","02ef62db":"# Basic EDA","d9c798f4":"Currently `time_id=5`, so there is only one value."}}