{"cell_type":{"30d61def":"code","13d7d987":"code","4b91f8d3":"code","759b9d57":"code","6f195a5d":"code","48bdfcf3":"code","757557dd":"code","3ce48aa8":"code","1bf9c817":"code","2c0e3a47":"code","77b518b8":"code","ec4eda4b":"code","d9558b46":"code","da073aac":"code","310852d5":"code","2821dfb7":"code","c4412256":"code","f9a0ca93":"code","e0b9e2ec":"code","86ebf1c4":"code","f385fe44":"code","d319151a":"code","37e80858":"code","4f40d7a9":"code","985f2751":"code","ad70ef88":"markdown","512a2acf":"markdown","562f8238":"markdown","33b59bd0":"markdown","34dbe855":"markdown","c3531b1d":"markdown","bd27da22":"markdown","508795f7":"markdown"},"source":{"30d61def":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","13d7d987":"import seaborn as sns\nimport matplotlib.pyplot as plt","4b91f8d3":"pd_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\npd_train.head()\n\npd_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\npd_test.head()","759b9d57":"pd_test.shape","6f195a5d":"pd_train['Gender'] = (pd_train['Sex'] == 'male').astype(int)\npd_train['Embarked_C'] = (pd_train['Embarked'] == 'C').astype(int)\npd_train['Embarked_Q'] = (pd_train['Embarked'] == 'Q').astype(int)\npd_train['Embarked_S'] = (pd_train['Embarked'] == 'S').astype(int)\npd_train['Age'].fillna(pd_train['Age'].mean(), inplace=True)\npd_train.head()\n\npd_test['Gender'] = (pd_test['Sex'] == 'male').astype(int)\npd_test['Embarked_C'] = (pd_test['Embarked'] == 'C').astype(int)\npd_test['Embarked_Q'] = (pd_test['Embarked'] == 'Q').astype(int)\npd_test['Embarked_S'] = (pd_test['Embarked'] == 'S').astype(int)\npd_test['Age'].fillna(pd_train['Age'].mean(), inplace=True)\npd_test['Fare'].fillna(pd_train['Fare'].mean(), inplace=True)\npd_test.head()","48bdfcf3":"sns.pairplot(pd_train[['Age','Fare','Survived']])","757557dd":"sns.kdeplot(pd_train['Fare'])","3ce48aa8":"plt.scatter(pd_train['Age'],pd_train['Fare'])","1bf9c817":"#pd_train['Age'].value_counts().sort_index().plot().bar(x='Age',y='Counts')\nsns.kdeplot(pd_train[pd_train['Survived']==1]['Age'],cumulative=False)\nsns.kdeplot(pd_train[pd_train['Survived']==0]['Age'],cumulative=False)","2c0e3a47":"sns.kdeplot(pd_train[pd_train['Survived']==1]['Fare'],cumulative=False)\nsns.kdeplot(pd_train[pd_train['Survived']==0]['Fare'],cumulative=False)","77b518b8":"features = ['Gender','Age','Fare','Pclass','Embarked_C','Embarked_Q','Embarked_S','SibSp','Parch']\npd_x_train = pd_train[features]\npd_x_train.head()\n\npd_x_test = pd_test[features]\npd_x_test.head()","ec4eda4b":"pd_x_test.isnull().sum()","d9558b46":"# Miscellaneous operations\n\n# pd_x_train.isnull().sum()\n# type(pd_x_train[pd_x_train['Age']==22])\n# np.array(pd_x_train.values)\n# x_train.loc(0)[0].values()","da073aac":"x_train = pd_x_train.values\nprint(\"x_train =\", x_train)\n\nx_test = pd_x_test.values\nprint(\"x_test =\", x_test)\n\ny_train = pd_train['Survived'].values\nprint(\"y_train =\", y_train)","310852d5":"from sklearn.model_selection import train_test_split","2821dfb7":"x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.20, random_state=42)","c4412256":"print(\"x_train.shape = \", x_train.shape)\nprint(\"x_val.shape = \", x_val.shape)","f9a0ca93":"import tensorflow as tf\n\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(50, activation='relu'))\nmodel.add(tf.keras.layers.Dense(50, activation='relu'))\n#model.add(tf.keras.layers.Dense(200, activation='relu'))\nmodel.add(tf.keras.layers.Dense(10, activation='relu'))\nmodel.add(tf.keras.layers.Dense(10, activation='relu'))\nmodel.add(tf.keras.layers.Dense(10, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))","e0b9e2ec":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.binary_crossentropy,\n              metrics=['accuracy'])\n\nhistory = model.fit(x_train, \n                    y_train, \n                    epochs=250,\n                    batch_size=10,\n                    validation_data=(x_val, y_val))","86ebf1c4":"x_test.shape","f385fe44":"pd_test['Survived'] = (np.round(model.predict(x_test))[:,0]).astype(int)\n\n#np.abs((np.round(model.predict(x_test))[:,0] - y_test)).sum() \/891","d319151a":"pd_test","37e80858":"pd_test_result = pd_test[['PassengerId', 'Survived']]\npd_test_result","4f40d7a9":"pd_test_result[['PassengerId', 'Survived']].to_csv('Submission.csv', index = False)","985f2751":"# kaggle competitions submit -c titanic -f 'kaggle_submission.csv' -m \"Titatic Notebook - TensorFlow\"","ad70ef88":"# Machine Learning using TensorFlow","512a2acf":"**Transform Categorical values to Numeric values & Fill NA **","562f8238":"# KAGGLE Submission","33b59bd0":"**Define features that will be used to predict Survival values**","34dbe855":"# Filenames","c3531b1d":"# **Read Train & Test Dataframes**","bd27da22":"Transform Dataframe to values","508795f7":"# Analyze Data"}}