{"cell_type":{"919d44ea":"code","7052370f":"code","5d954b3d":"code","8266ef4c":"code","e6f63b2c":"code","b7fff36b":"code","f63c8c04":"code","4bbab8fb":"code","bbea3281":"code","86c62fac":"code","0067d410":"code","0ee868dd":"code","ca8eb8f7":"code","0cf7f906":"code","7b0e30ae":"code","9a7624fe":"code","425e77ef":"code","e846baa4":"code","17b86d14":"code","08f49143":"code","65387322":"code","fdc3c603":"code","8573aab3":"code","71adc02a":"code","3457fc48":"code","dea466e1":"code","bdd4db90":"code","e37eb491":"code","7eff875a":"code","556198d1":"code","5059af63":"code","9981f7db":"markdown","cd594f80":"markdown","19653885":"markdown","546aaf7e":"markdown","cfa14029":"markdown","81778d23":"markdown","7d13cdaa":"markdown","0f34edae":"markdown","1dff50c6":"markdown","74e643bb":"markdown","e0ca7823":"markdown","f18d57f0":"markdown","3d8cb1fd":"markdown","5f864356":"markdown","d4fa3378":"markdown"},"source":{"919d44ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7052370f":"!pip install mplcyberpunk","5d954b3d":"import pandas as pd\nimport numpy as np\nimport seaborn as sn\nimport mplcyberpunk\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot\nfrom plotly.subplots import make_subplots\nimport warnings\nimport matplotlib.pyplot as plt\n%matplotlib inline","8266ef4c":"pd.set_option('display.max_columns',None)\ndf_deliveries = pd.read_csv('\/kaggle\/input\/ipl-data-set\/deliveries.csv')\ndf_players = pd.read_excel('\/kaggle\/input\/ipl-data-set\/Players.xlsx')\ndf_matches = pd.read_csv('\/kaggle\/input\/ipl-data-set\/matches.csv')\ndf_teams = pd.read_csv('\/kaggle\/input\/ipl-data-set\/teams.csv')\ndf_mostruns = pd.read_csv('\/kaggle\/input\/ipl-data-set\/most_runs_average_strikerate.csv')\ndf_homeandaway = pd.read_csv('\/kaggle\/input\/ipl-data-set\/teamwise_home_and_away.csv')\n","e6f63b2c":"df_list = [df_deliveries,df_players,df_matches,df_teams,df_mostruns,df_homeandaway]\nname_list = ['df_deliveries','df_players','df_matches','df_teams','df_mostruns','df_homeandaway']\nfor i,j in zip(df_list,name_list):\n    print(f' shape of the dataset <{j}> is <{i.shape}>')\n    print('='*100)","b7fff36b":"plt.figure(figsize = (25,12.5))\nplt.style.use('cyberpunk')\nsn.relplot(x = 'batsman',y ='total_runs',data=df_mostruns.head(5),kind='line',color = 'yellow')\nmplcyberpunk.add_glow_effects()\nmplcyberpunk.make_lines_glow()","f63c8c04":"px.bar(data_frame=df_mostruns.head(10),x = 'batsman',y = 'total_runs',color='batsman',\n      labels = {'x':'Batsman','y':'Total_runs'},)","4bbab8fb":"df_mostruns.head(2)","bbea3281":"def glowplots(i,j):\n    plt.style.use('cyberpunk')\n    print(f' line plot for the follwing feature <{i}> is shown below \u2193')\n    sn.relplot(x = 'batsman',y = i,color = j,label = i,kind = 'line',height=10,aspect=2.5,data=df_mostruns.head(10))\n    mplcyberpunk.add_glow_effects()\n    mplcyberpunk.make_lines_glow()\n    plt.show()","86c62fac":"view_list  =['total_runs','average','strikerate']\ncolor_list = ['yellow','cyan','magenta']\nfor i,j in zip(view_list,color_list):\n    glowplots(i,j)\n    print(\"=\"*50)","0067d410":"fig1 = px.bar(df_mostruns.head(10),y = 'total_runs',x = 'batsman',\n             color = 'total_runs',text = 'total_runs',orientation='v',color_discrete_sequence=px.colors.qualitative.Dark24,)\nfig2 = px.bar(df_mostruns.head(10),y = 'average',x = 'batsman',\n             color = 'average',text = 'average',orientation='v',color_discrete_sequence=px.colors.qualitative.Dark24)\nfig3 = px.bar(df_mostruns.head(10),y = 'strikerate',x = 'batsman',\n             color = 'strikerate',text = 'strikerate',orientation='v',color_discrete_sequence=px.colors.qualitative.Dark24)\nfig4 = px.bar(df_mostruns.head(10),y = 'numberofballs',x = 'batsman',\n             color = 'numberofballs',text = 'numberofballs',orientation='v',color_discrete_sequence=px.colors.qualitative.Dark24)\nfig = make_subplots(rows = 2,cols=2,shared_xaxes=False,horizontal_spacing=0.2,vertical_spacing=0.3,\n                   subplot_titles=('Total_runs scored by the batsman',\n                                  'Average score of a batsman',\n                                  'StrikeRate of the batsman',\n                                  'Number of balls faced by the batsman'))\nfig.add_trace(fig1['data'][0],row = 1,col = 1)\nfig.add_trace(fig2['data'][0],row = 1,col = 2)\nfig.add_trace(fig3['data'][0],row = 2,col = 1)\nfig.add_trace(fig4['data'][0],row = 2,col = 2)\nfig.update_layout(height = 700,width = 1000)\nfig.show()","0ee868dd":"def treemapvisual(i,j):\n    print(f' tree map analysis of the feature <{i}> of the batsman')\n    fig = px.treemap(data_frame=df_mostruns.head(100),path=['batsman'],values=i,\n                     color_discrete_sequence=px.colors.qualitative.Plotly_r,\n              height=700,title = j)\n    fig.data[0].textinfo = 'label+text+value'\n    fig.show()","ca8eb8f7":"title_list = ['Total_runs scored','number of ball faced','Average score','StrikeRate']\nuse_list = ['total_runs', 'numberofballs', 'average','strikerate']\nfor i,j in zip(use_list,title_list):\n    treemapvisual(i,j)\n    print(\"=\"*50)","0cf7f906":"px.density_heatmap(data_frame=df_mostruns,x = 'batsman',y = 'total_runs',labels = {'x':'batsman','y':'total_runs'},\n                  color_continuous_scale=('purple','yellow'))","7b0e30ae":"df_kohli = df_deliveries[(df_deliveries['batsman'] == 'V Kohli')]\ndf_warner = df_deliveries[(df_deliveries['batsman'] == 'DA Warner')]\ndf_raina = df_deliveries[(df_deliveries['batsman'] == 'SK Raina')]\ndf_dhoni = df_deliveries[(df_deliveries['batsman'] == 'MS Dhoni')]\ndf_gayle = df_deliveries[df_deliveries['batsman'] == 'CH Gayle']","9a7624fe":"def barsixplot(df):\n    fig = px.bar(df[df['batsman_runs'] == 6],x = 'bowler',y = 'batsman_runs',color = 'bowler',opacity=1,\n      color_discrete_sequence=px.colors.qualitative.Plotly_r)\n    fig.show()","425e77ef":"df_top5 = [df_kohli,df_warner,df_raina,df_dhoni,df_gayle]\ndf_player_name = ['Virat Kohli','David Warner','Suresh Raina','MS dhoni','CH Gayle']\nfor i,j in zip(df_top5,df_player_name):\n    print(f' <{j}> has scored number of sixes with these bowlers')\n    barsixplot(i)\n    print(\"=\"*50)","e846baa4":"def foursplot(df):\n    fig = px.bar(data_frame=df[df['batsman_runs'] == 4],x = 'bowler',y = 'batsman_runs',color = 'bowler',opacity=1)\n    fig.show()","17b86d14":"for i,j in zip(df_top5,df_player_name):\n    print(f' <{j}> has scored number of fours with these bowlers')\n    foursplot(i)\n    print(\"=\"*50)","08f49143":"def matchmaps(i,j):\n    fig = px.treemap(data_frame=df_homeandaway,path=['team'],values=i,color_discrete_sequence=px.colors.qualitative.Dark2_r,\n                    title=j)\n    fig.data[0].textinfo = 'label+text+value'\n    fig.show()","65387322":"to_eval = ['home_wins', 'away_wins', 'home_matches', 'away_matches',\n       'home_win_percentage', 'away_win_percentage']\neval_name = ['home_wins','away_wins','home_matches','away_matches','home_win_percentage','away_win_percentage']\nfor i,j in zip(to_eval,eval_name):\n    print(f' stats for the value <{j}> is shown below \u2193')\n    matchmaps(i,j)\n    print(\"=\"*50)","fdc3c603":"def mplplots(i,j,k):\n    print(f' line plot stats for the feature <{k}> is shown below \u2193')\n    sn.relplot(x = 'team',y = i,data=df_homeandaway,color = j,kind = 'line',\n               height=10,\n               aspect=2.5\n              )\n    mplcyberpunk.add_glow_effects()\n    mplcyberpunk.make_lines_glow()\n    plt.show()","8573aab3":"to_eval = ['home_wins', 'away_wins', 'home_matches', 'away_matches',\n       'home_win_percentage', 'away_win_percentage']\ncolor_list = ['cyan','yellow','hotpink','red','blue','green']\neval_name = ['home_wins','away_wins','home_matches','away_matches','home_win_percentage','away_win_percentage']\nfor i,j,k in zip(to_eval,color_list,eval_name):\n    #print(f' line plot stats for the feature <{k}> is shown below \u2193')\n    mplplots(i,j,k)\n    print(\"=\"*100)","71adc02a":"fig1 = px.bar(df_homeandaway,y = 'home_wins',x = 'team',\n             color = 'home_wins',text = 'home_wins',orientation='v')\nfig2 = px.bar(df_homeandaway,y = 'away_wins',x = 'team',\n             color = 'away_wins',text = 'away_wins',orientation='v')\nfig3 = px.bar(df_homeandaway,y = 'home_matches',x = 'team',\n             color = 'home_matches',text = 'home_matches',orientation='v')\nfig4 = px.bar(df_homeandaway,y = 'away_matches',x = 'team',orientation='v',\n             color = 'away_matches',text = 'away_matches')\nfig5 = px.bar(df_homeandaway,y = 'home_win_percentage',x = 'team',\n             orientation='v',color = 'home_win_percentage',text = 'home_win_percentage')\nfig6 = px.bar(df_homeandaway,y = 'away_win_percentage',x = 'team',\n             orientation='v',color = 'away_win_percentage',text = 'away_win_percentage')\nfig = make_subplots(rows = 3,cols = 2,shared_xaxes=False,horizontal_spacing=0.2,vertical_spacing=0.2,\n                   subplot_titles=('Stats for the Home Wins \u2193',\n                                  'Stats for the Away Wins \u2193',\n                                  'Stats for the Home Matches \u2193',\n                                  'Stats for the Away Matches \u2193',\n                                  'Stats for the home Win % \u2193',\n                                  'Stats for the Away Win % \u2193'))\nfig.add_trace(fig1['data'][0],row = 1,col = 1)\nfig.add_trace(fig2['data'][0],row = 1,col = 2)\nfig.add_trace(fig3['data'][0],row = 2,col = 1)\nfig.add_trace(fig4['data'][0],row = 2,col = 2)\nfig.add_trace(fig5['data'][0],row = 3,col = 1)\nfig.add_trace(fig6['data'][0],row = 3,col = 2)\nfig.update_layout(height = 1500,width = 1000)\nfig.show()","3457fc48":"team = df_homeandaway.team\ndata = [\n    {\n        'y':df_homeandaway.home_matches,\n        'x':df_homeandaway.home_wins,\n        'mode':'markers',\n        'marker':{\n            'color':df_homeandaway.home_matches,\n            'size':df_homeandaway.home_wins,\n            'showscale':True\n        },\n        \"text\":df_homeandaway.team\n    }\n]\niplot(data)","dea466e1":"data = [\n    {\n        'y':df_homeandaway.away_matches,\n        'x':df_homeandaway.away_wins,\n        'mode':'markers',\n        'marker':{\n            'color':df_homeandaway.away_matches,\n            'size':df_homeandaway.away_wins,\n            'showscale':True\n        },\n        \"text\":df_homeandaway.team\n    }\n]\niplot(data)","bdd4db90":"toss_winner_cum_winner = df_matches[(df_matches['toss_winner']) == (df_matches['winner'])]","e37eb491":"plt.figure(figsize = (35,17.5))\nsn.countplot(x = 'winner',data = toss_winner_cum_winner,palette='plasma',saturation=1)\n","7eff875a":"px.bar(data_frame=toss_winner_cum_winner,x = 'winner',color = 'winner',opacity=1)","556198d1":"px.bar(data_frame=toss_winner_cum_winner,x = 'winner',y = 'venue',color = 'venue',opacity=1,\n      labels = {'x':'winner_team','y':'Venue'})","5059af63":"df_bowled = df_deliveries[df_deliveries['dismissal_kind'] == 'bowled']\npx.bar(data_frame=df_bowled,x = 'bowler',color = 'bowler',opacity=1)","9981f7db":"# Density HeatMap","cd594f80":"<font color = 'Blue' size = 6>Bubble Plot For Home Matches and Home Wins<\/font>","19653885":"# Total Runs Scored by the Top 5 Batsman","546aaf7e":"<font color = 'magenta' size = 5>**From the above plot we can observe that every team has won majority of their games in their respective Home stadiums,Mumbai Indians and Kolkata Night Riders have won games away from home as well**<\/font>","cfa14029":"<font color = 'blue' size = 7> Tree Map Analysis \ud83c\udf84 <\/font>","81778d23":"<font color = 'blue' size = 6>Boundaries Scored by Top 5 Batsman<\/font>","7d13cdaa":"## Line plot Analysis using MplCyberpunk \ud83d\udca5","0f34edae":"### Using Treemaps we can easily represent more than 50 records\/tuples,it's a better way for visualising data","1dff50c6":"## Bubble plot for Away matches and Away wins ","74e643bb":"<font color = 'red' size = 4.5>**\u2666 We can observe from the above plots that Mumbai Indians have the most number of Home Wins,followed by Chennai Super Kings.**<\/font>  \n\n<font color = 'red' size = 4>**\u2666 We can observe from the above plots that Kolkata Night Riders have the most number of Away Wins,followed byMumbai Indian,Chennai Super Kings.**<\/font>\n\n<font color = 'red' size = 4>**\u2666 We can observe from the above plots that Mumbai Indian have played most of their Matches at their home,followed by Chennai Super Kings.**<\/font>\n\n<font color = 'red' size = 4>**\u2666 We can observe from the above plots that Royal Challengers Banglore and Kolkata Night Riders have played most of their Matches away from their home,followed by Delhi DareDevils.**<\/font>","e0ca7823":"<font color = 'blue' size = 5>Indian Premier League has always been a top watch Sport-Event around the globe,Every year IPL is conducted and people around the World support their Favourite teams,through this we come to know about the emerging players,Young Players as they are the ones which will hold the next cap position of their respective International Teams,It's Amazing to watch the young talent play and shown case their skills.By,this i would like to conclude the Notebook,and if you feel that this notebook was helpful,please do upvote it!\ud83d\udc4d,Thank You\ud83d\ude0a<\/font>","f18d57f0":"# Tree Map Analysis","3d8cb1fd":"### \u2666 Virat Kholi has scored most number of Sixes Against Amit Mishra followed by Umesh Yadav\n\n### \u2666 David Warner has scored most number of Sixes Against Sunil Narine followed by Y.Chahal\n\n### \u2666 Suresh Raina has scored most number of Sixes Against PP Chawla followed by Vinay Kumar\n\n### \u2666 MS Dhoni has scored most number of Sixes Against DaleStyen followed by Y.chahal\n\n### \u2666 CH Gayle has scored most number of Sixes Against PP Chawla followed by B.kumar\n","5f864356":"### \u2666 Virat Kholi has scored most number of Fours Against Irfan Pathan followed by DJ bravo\n\n### \u2666 David Warner has scored most number of Fours Against P.kumar followed by MM.Sharma\n\n### \u2666 Suresh Raina has scored most number of Fours Against  PP.Chawla followed by UT.Yadav\n\n### \u2666 MS Dhoni has scored most number of Fours Against KA.Pollard followed by Dale Styen,\n\n### \u2666 Ch Gayle has scored most number of Fours Against P.Kumar followed by B.Kumar","d4fa3378":"<font color = 'red' size = 4>**From the above plot we can observe that L.Malinga has taken most of the wickets in \"Bowled by\" format ,followed by PP.Chawla**<\/font>"}}