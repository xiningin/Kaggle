{"cell_type":{"fb629ef8":"code","d0373768":"code","606cff6e":"code","33e83d59":"code","8e2f5e19":"code","96d1cb23":"code","a2ca14f3":"code","03435b76":"code","5f233958":"code","2ae9d4c9":"code","b65e64af":"code","a8326e1d":"code","835755a7":"code","98b05e0e":"code","eac82842":"code","67d9ab1f":"code","c37c7727":"code","fc6cfda8":"code","83719ef8":"markdown","7b0161ff":"markdown","05912f79":"markdown","525ac6aa":"markdown","240a91e0":"markdown","6a24848c":"markdown","773f66ef":"markdown","4ec1db99":"markdown","211d7d05":"markdown","e53fb565":"markdown","e304627e":"markdown","f2ac84f1":"markdown","19a2f202":"markdown","5c8635b6":"markdown","c6f4285e":"markdown","afb2c65e":"markdown","bb1b2446":"markdown","010f1f25":"markdown","c90d1a85":"markdown","f38504bc":"markdown","721fd0fc":"markdown","6cf5a88e":"markdown"},"source":{"fb629ef8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom matplotlib.ticker import NullFormatter\nfrom matplotlib.dates import MonthLocator, DateFormatter\nimport datetime\n%matplotlib inline","d0373768":"data1 = pd.read_csv(\"..\/input\/weather-in-athens\/NOAA_Athens.csv\", parse_dates = [\"DATE\"]) #read 1st excell file\ndf1 = data1.drop(['STATION','NAME'], axis = 1)  #drop values that don't need","606cff6e":"data2 = pd.read_csv(\"..\/input\/weather-in-athens\/HDS_Athens.csv\", header = None, parse_dates = [0]) #read 2nd excell file\/no header \ndf2 = data2[[0,1,10]] #drop values that don't need\ndf2.columns=[\"DATE\",'TAVG','PRCP']","33e83d59":"series = pd.DataFrame(pd.date_range(start='1955-01-01', end='2020-12-31', freq='D'), columns = ['DATE'])  # Dates df","8e2f5e19":"df_m1 = pd.merge(series,df1, how = 'outer' , on = 'DATE') # 1st merge\ndf_m = pd.merge(df_m1,df2, how = 'outer' , on = 'DATE', suffixes = ('_NOAA' , '_HDS')) # 2nd merge\ndf_m['TAVG_NOAA'].fillna(df_m['TAVG_HDS'], inplace = True) # fill missing temperatures\ndf_m['PRCP_NOAA'].fillna(df_m['PRCP_HDS'], inplace = True) #fill missing percipitations\ndf_m","96d1cb23":"df_74_99 = df_m.loc[(df_m['DATE']>='1974-01-01') & (df_m['DATE'] <='1999-12-31')]  # 1974-1999 values \ndf_sbl = df_74_99.groupby(df_m.DATE.dt.month).mean() #groupby month 1974-1999\nmean_summer_t = df_sbl.loc[6:8, 'TAVG_NOAA'].mean()  #keep temperature in summer months\nprint(\"The mean summer temperature (baseline) is:\", \"{:.2f}\".format(mean_summer_t), u\"\\N{DEGREE SIGN} C\")                ","a2ca14f3":"df_mth = df_m.groupby([df_m.DATE.dt.year, df_m.DATE.dt.month]).mean()  #groupby month 1955-2020\ndf_mth.index.names = ['YEAR','MONTH']      #multiIndex names\ndf_smth = df_mth.drop(index = [1,2,3,4,5,9,10,11,12], level = \"MONTH\")  #keep summer months \ndf_smth = df_smth.TAVG_NOAA.mean(level = \"YEAR\") #average summer temperature per year\ndf_smth = df_smth - mean_summer_t #subtract from baseline\ndf_smth = pd.DataFrame(df_smth) #to dataframe\ndf_smth.reset_index(level = 0, inplace = True) \ndf_smth['T_RA'] = df_smth['TAVG_NOAA'].rolling(window=10, min_periods=1).mean() # 10 year rolling average temperature\ndf_smth['TAVG_NOAA_P'] = df_smth.TAVG_NOAA.loc[df_smth['TAVG_NOAA'] >= 0] #positive temperatures values \ndf_smth['TAVG_NOAA_N'] = df_smth.TAVG_NOAA.loc[df_smth['TAVG_NOAA'] < 0]  #negative temperatures values \ndf_smth","03435b76":"fig = plt.figure(dpi=300)\nplt.style.use('ggplot')\nax = fig.add_axes([0,0,2,2]) #dimensions\nl1 = ax.plot(df_smth.YEAR, df_smth.T_RA, color = 'mediumpurple') #rolling average temperature\nl2 = ax.bar(df_smth.YEAR, df_smth.TAVG_NOAA_P, color ='orange', width = 0.15) #positive temperature\nl3 = ax.bar(df_smth.YEAR, df_smth.TAVG_NOAA_N ,color ='blue', width = 0.15) #negative temperature\nl4 = ax.plot([1957,2020], [0,0], color = 'dimgray') #baseline\nax.set_title(\"Mean Summer Temperature Difference from the 1974-1999 Mean\")\nplt.show()","5f233958":"df_d = df_74_99.groupby(df_74_99.DATE.dt.dayofyear).mean() #groupby date 74-99\ndf_d.reset_index(level = 0, inplace = True)\ndf_d['TAVG_RA'] = df_d['TAVG_NOAA'].rolling(window = 30, min_periods=1).mean() # 30 days rolling average temperature\ndf_d","2ae9d4c9":"df_m['Year'] = df_m.DATE.dt.year #set year column \ndf_m['Date'] = df_m.DATE.dt.dayofyear #set date column\ndf_m['T_RA'] = df_m['TAVG_NOAA'].rolling(window = 30, min_periods=1).mean() # 30 days rolling average temperature\ndf_m1 = df_m.drop(['DATE','PRCP_NOAA','TAVG_NOAA','TAVG_HDS','PRCP_HDS'],axis = 1) #drop columns\ndf_m1 = df_m1.groupby(['Year','Date']).mean() # groupby year and date \ndf_pv = df_m1.pivot_table(index = 'Date', columns = 'Year' , values = \"T_RA\") #pivot table on temperature\ndf_pv","b65e64af":"fig = plt.figure(dpi=300)\nplt.style.use('ggplot')\ndf_pv.plot(legend = False , cmap = 'Oranges', figsize=(20,10)) # day temperatures \ndf_d.TAVG_RA.plot(color = 'k', linewidth = 2.5) # baseline temperature\nplt.xlabel('Date',fontsize = 18) \nplt.ylabel('Average Daily Temperature',fontsize = 18)      \nplt.gca().xaxis.set_major_locator(mdates.MonthLocator()) #locate months\nplt.gca().xaxis.set_major_formatter(DateFormatter('%b')) #name months\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nplt.show()","a8326e1d":"df_d['TAVG_NOAA_BL'] = 1.1*df_d['TAVG_NOAA'] #q3 df_d \u03b1\u03c0\u03cc 1974 - 1999 group by date \/ calculate extreme heat baseline temperature \ndf_db1 = df_d.drop(['PRCP_NOAA','TAVG_NOAA','TAVG_HDS','PRCP_HDS','TAVG_RA'],axis = 1) #drop columns\ndf_db1","835755a7":"df_m2 = df_m.drop(['DATE','PRCP_NOAA','T_RA','TAVG_HDS','PRCP_HDS'],axis = 1) #drop columns\ndf_m2 = df_m2.groupby(['Year','Date']).mean() # groupby year and date \ndf_pv = df_m2.pivot_table(index = 'Date', columns = 'Year' , values = \"TAVG_NOAA\") #pivot table on temperature\ndf_pv.reset_index(level = 0, inplace = True)\ndf_pv1 = df_pv.join(df_db1) #join the two dataframes\ndf_pv1 = df_pv1.drop(['Date','DATE'],axis=1) #drop columns\ndf_tf = df_pv1.iloc[:, :-1].apply(lambda x: np.where(x > df_pv1.TAVG_NOAA_BL, True, False), axis=0)  # Compare the columns and set True False \ndf_tf","98b05e0e":"df_ee = df_tf.sum()  # number of extreme events per year\ndf_ee = pd.DataFrame(df_ee, columns = ['Extreme_Events']).reset_index().rename(columns={\"index\":\"Year\"}) #to dataframe\ndf_o = df_pv1.drop(['TAVG_NOAA_BL'], axis = 1).count() # number of observations per year\ndf_o = pd.DataFrame(df_o, columns = ['Observations']).reset_index().rename(columns={ \"index\":\"Year\" }) #to dataframe\ndf_o['Percentage']=df_ee['Extreme_Events']\/df_o['Observations'] #percentage calculation\ndf_o","eac82842":"df_eebl = df_ee.loc[(df_ee['Year']>= 1974) & (df_ee['Year']<= 1999)] #1974-1999 extreme events values \nee_bl = df_eebl.Extreme_Events.sum() #1974-1999 extreme events values sum\ndf_obl = df_o.loc[(df_o['Year'] >= 1974) & (df_o['Year']<= 1999)] #1974-1999 observation values \no_bl = df_obl.Observations.sum() #1974-1999 observation values sum\nbaseline = ee_bl\/o_bl #extreme heat event temperature percentage\nprint(\"The 1974-1999 extreme heat event temperature percentage is: \",\"{:.3f}\".format(baseline))\ndf_o['Percentage_P'] = df_o.Percentage.loc[(df_o['Percentage'] - baseline >= 0)] #values above percentage baseline\ndf_o['Percentage_N'] = df_o.Percentage.loc[(df_o['Percentage'] - baseline < 0)] #values below percentage baseline","67d9ab1f":"fig = plt.figure(dpi=300)\nplt.style.use('ggplot')\nax = fig.add_axes([0,0,1.5,1.7]) #dimensions\nl1 = ax.bar(df_o.Year, df_o.Percentage_P, color ='orange', width = 0.15) #values above percentage baseline\nl2 = ax.bar(df_o.Year, df_o.Percentage_N, color ='blue', width = 0.15) #values below percentage baseline\nl3 = ax.plot( [1957,2020] ,[0,0] ,color = 'dimgray',linewidth = 0.8) #baseline\nl4 = ax.hlines(y=baseline, xmin = 1954, xmax = 2025, color='dimgray',linewidth = 0.8) #baseline percentage\nax.set_ylim(-0.03, 0.58)\nax.set_xlim(1954,2023)\nplt.show()","c37c7727":"df_p_y = df_m.groupby(df_m.DATE.dt.year).sum() #group by year\ndf_p_y = df_p_y.drop(['TAVG_NOAA','TAVG_HDS','PRCP_HDS','T_RA','Year','Date'],axis = 1) #drop columns\ndf_p_y.reset_index(level = 0, inplace = True)\ndf_p = df_m.PRCP_NOAA.replace(0.0, np.nan)  #replace 0 values\ndf_p = df_p.groupby(df_m.DATE.dt.year).count() #count rain days per year \ndf_p = pd.DataFrame(df_p)\ndf_p.reset_index(level = 0, inplace = True)\ndf_p['PRCP_YEAR'] = df_p_y['PRCP_NOAA'] \/ df_p['PRCP_NOAA']  #percentage of rainy days per year\ndf_p['PRCP_RA'] = df_p['PRCP_YEAR'].rolling(window = 10, min_periods=1).mean() # 10 year rolling average precipitation\ndf_p","fc6cfda8":"fig = plt.figure(dpi=300)\nplt.style.use('ggplot')\nax = fig.add_axes([0,0,2,2]) #dimensions \nl1 = ax.plot(df_p.DATE, df_p.PRCP_RA , color = 'cadetblue' ) #rolling average precipitation\nl2 = ax.bar(df_p.DATE, df_p.PRCP_YEAR ,color ='blue' , width = 0.15) #rain days per year\nl3 = ax.plot([1955,2020] , [0,0] ,color = 'dimgray') #baseline\nax.set_ylim(-0.5 ,16)\nplt.show()","83719ef8":"#### Day extreme event temperature dataframe (True\/False values)\n* On initial dataset, drop unnecessary columns\n* Group by *Year* and *Date*\n* Pivot the dataframe on temperature with *Date* as index\n* Join with the baseline dataframe above\n* Drop again unnecessary columns\n* Compare each temperature with baseline temperature and set True or False","7b0161ff":"### Notes\n\n* From **NOAA_Athens.csv**  and we set _DATE_ as datetime object and drop the unuseful columns\n* From **HDS_Athens.csv** we keep the _0,1,10_ columns and set _0_ as datetime object ","05912f79":"#### Year extreme heat event temperature dataframe\n* Sum the number of extreme heat event temperatures\n* Count the observations per year\n* Calculate the percentage of extreme heat events over the number of observations for each year.","525ac6aa":"### Plot","240a91e0":"### Conclusion\n\nWe observe that **NOAA_Athens.csv** has a lot missing rows and values also. Especially in 2013 there was only a couple entries.\n<br>So we decide to create a new dataframe with the dates, in order to be able to fill the values from the second dataset. Also there are not any values <br> from average temparature in the first two years of our starting point. ","6a24848c":"### Conclusion\nFrom **mid '70s** to the **beginning of '90s** the extreme heat events was below the baseline in the most years, something that accords from the two previous plots. Combining that in this period the mean summer temperatures was below the baseline and the winter temperatures are mostly in the same range all of the years, is something that we expect it to see. \n<br>On the other hand, **after 2010** we have a lot more extreme events. Something, also we wait to see, as we combine the two above graphs.","773f66ef":"<a id=\"section-four\"><\/a>\n## Part 3: Evolution of Daily Temperatures\n---\nIn this part we will calculate the average temperature for each year for the full period from 1955 to 2020. We will smouth each line by using a *30 days rolling average*. The lines will be coloured from light orange to dark orang progressing through the years in ascending order to be more discrete.\nAlso, the average daily temperature for the baseline period of **1974-1999** will be projected in the plot, in black colour, smouthed also using a *30 days rolling average*.\n\n### Data Preparation\n#### Baseline\n* Group by date the 1974-1999 dataset \n* Calculate the 30 days rolling average temperature ","4ec1db99":"#### 1974-1999 extreme heat events temperature percentage (baseline)\n* From extreme event dataframe extract the 1974-1999 period and sum up the values\n* From observations dataframe extract the 1974-1999 period and sum up the values\n* Calculate the extreme heat event temperature percentage","211d7d05":"#### Summer Temperature Dataframe\n\n* Group by year and month our initial dataset and create a multiIndex dataframe \n* Keep summer months and find the average summer temperature of each year\n* Subtract each summer temperature from baseline\n* Calculate the 10 years rolling average temperature of the deviation from the mean","e53fb565":"#### Day Temperature Dataframe\n* Set an *Year* and *Date* column on initial dataset \n* Calculate the 30 days rolling average temperature \n* Drop unnecessary columns\n* Group by *Year* and *Date* \n* Pivot the dataframe on temperature with *Date* as index","e304627e":"### Conclusion\n\nFrom the chart it is clear that there is a downfall in average summer temperatures through the years and then a bounce back. More specicically:\n* We have a bottom in the **mid '80s** with a deviation below **$1,5^{\\circ}C$**.\n* At the begging of **'10s** we observe the highest summer temperatures. It is worth mentioning that in **2012** we have a deviation of **$3,5^{\\circ}C$** above the mean summer temperature.","f2ac84f1":"<a id=\"section-two\"><\/a>\n## Part 1: Obtain the Data\n---\nWe will work with data covering the period from **1955** to **2020**. Our data will be obtained from two sources:\n\n* National Oceanic and Atmospheric Administration's National Centers for Environmental Information\n* Hellenic Data Service \n\n\n\nThe [_National Oceanic and Atmospheric Administration_](https:\/\/www.ncdc.noaa.gov\/cdo-web\/search) will be the our primary dataset and will we use the [_Hellenic Data Service_](https:\/\/data.hellenicdataservice.gr\/dataset\/66e1c19a-7b0e-456f-b465-b301a1130e3f) <br> to fill any missing values. We will concentrate on the average daily temperature and precipitation.\n\n\n---","19a2f202":"### Plot","5c8635b6":"<a id=\"section-three\"><\/a>\n## Part 2: Deviation of Summer Temperatures\n---\nIn the second part of our study we will deal with summer temperatures. Our scope is to compare the mean summer temperature  of each year and then find deviation of a baseline.\nThe baseline we decide to be the mean summer temperature of **1974-2020** period. Also, we plot a line in the graph which is the *10 year rolling average* of the deviation from the mean.\n\n### Data Preparation \n#### Baseline\n\n* From our initial dataset we will keep the values from 1974-1999\n* Group by month and then keep the summer months","c6f4285e":"### Conclusion\nAt the first glance our diagram is smooth. The ratio of rainfall over rainy days is in the same range through the years. Nevertheless there are a couple of years with extreme rain burst. In **2005** more specific, the rainfall ratio was as double as usual.<br> In further attention, we see local tops every **4-5 years**. ","afb2c65e":"### Plot","bb1b2446":"\n<div class=\"alert alert-block alert-info\">\nMissing Rows in <b>NOAA dataset<b><\/div>\n\n### Data Preparation\n\n* Create a new dataframe with the dates from: **01-01-1995** to **31-12-2020**\n* Merge the initials two dataframes with the new one on _DATE_ \n* Fill any missing values between the two datasets\n","010f1f25":"<a id=\"section-one\"><\/a>\n# _Exploring the Weather in Athens_ <br>\nIn this assignment we will explore the weather in Athens over a period of more than 50 years.\n\n---\n ![](https:\/\/endlessicons.com\/wp-content\/uploads\/2012\/12\/mostly-sunny-icon-614x460.png)\n \n---\n >Panagiotis Giannopoulos <br \/>\n >MSc in Data Science <br \/>\n >Athens University of Economics and Business <br \/>\n pgiannopoulos@aueb.gr","c90d1a85":"### Conclusion\nIn the above plot we firstly see that the most darkest oranges lines are above the black line and the lightest orange lines are below it. More specific, we see the above pattern in summer and spring months. On the other hand, in winter months the lines are more mixed. To sum up:\n* The last years, in **summer months**, we have an increase in temperatures.\n* In **winter months**, the temperature is more mixed through the years.","f38504bc":"### Plot","721fd0fc":"<a id=\"section-five\"><\/a>\n## Part 4: Extreme Temperature Events\n---\nExteme events, that's what we will measure in this part. Extreme events are defined as those beyond 5% or 10% from the expected value. We will deal with extreme heat events going **10%** above the baseline.\nAgain, we will use the **1974-1999** period as our baseline and compare it with the yearly extreme events. At the end, we will count the number of extreme events of the **1974-1999** period and plot it in the diagram.\n### Data Preparation\n#### Baseline\n* Use the 1974-1999 dataset, group by date\n* Calculate the extreme heat events baseline temperature\n* Drop unnecessary columns","6cf5a88e":"<a id=\"section-six\"><\/a>\n## Part 5: Precipitation\n---\nIn the last part we will deal with rainfall as another form of extreme events. The weather may or may not be drying up. We are, however, interested in whether precipication becomes more intense over time. <br>We will count the overall rainfall over the year and the number of rainy days in each year. Then, by dividing the rainfall by the number of rainy days we will get an indication of whether we are getting rain in more concentrated bursts. Also, on the plot we will overlay the *10 years rolling average* of precipitation.\n### Data Preparation\n#### Year precipitation dataframe\n* Group by year our initial dataset and drop unnecessary columns\n* Replace 0.00 values with NaN from initial data set and count rain days\n* Calculate the percentage of rainy days per year\n* Calculate the 10 year rolling average precipitation"}}