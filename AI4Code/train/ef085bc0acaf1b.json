{"cell_type":{"5c5ad46e":"code","fafa7bcd":"code","b8231e07":"markdown","ee66044a":"markdown","80ae7e3b":"markdown","a704c77e":"markdown"},"source":{"5c5ad46e":"from IPython.display import YouTubeVideo\nYouTubeVideo('fwNLf4t7MR8', width=800, height=450)","fafa7bcd":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.python import keras\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, Conv2D, Dropout\n\nimg_rows, img_cols = 28, 28\nnum_classes = 10\n\ndef data_prep(raw):\n    out_y = keras.utils.to_categorical(raw.label, num_classes)\n\n    num_images = raw.shape[0]\n    x_as_array = raw.values[:,1:]\n    x_shaped_array = x_as_array.reshape(num_images, img_rows, img_cols, 1)\n    out_x = x_shaped_array \/ 255\n    return out_x, out_y\n\ntrain_size = 30000\ntrain_file = \"..\/input\/digit-recognizer\/train.csv\"\nraw_data = pd.read_csv(train_file)\n\nx, y = data_prep(raw_data)\n\nmodel = Sequential()\nmodel.add(Conv2D(30, kernel_size=(3, 3),\n                 strides=2,\n                 activation='relu',\n                 input_shape=(img_rows, img_cols, 1)))\nmodel.add(Dropout(0.5))\nmodel.add(Conv2D(30, kernel_size=(3, 3), strides=2, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer='adam',\n              metrics=['accuracy'])\nmodel.fit(x, y,\n          batch_size=128,\n          epochs=2,\n          validation_split = 0.2)","b8231e07":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161321) to chat with other Learners.*","ee66044a":"# Sample Code","80ae7e3b":"# Intro\n\nAt the end of this lesson, you will understand and know how to use\n- **Stride lengths** to make your model faster and reduce memory consumption\n- **Dropout** to combat overfitting\n\nBoth of these techniques are especially useful in large models.\n\n# Lesson","a704c77e":"# Exercise\n**[Apply dropout and strides](https:\/\/www.kaggle.com\/kernels\/fork\/663261)** yourself while experimenting with larger models."}}