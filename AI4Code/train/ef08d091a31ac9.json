{"cell_type":{"a86b0934":"code","39b858e0":"code","b6640170":"code","cc02b19e":"code","143959f4":"code","65234f8a":"code","cc12acc2":"code","0bac400d":"code","5110baa9":"code","d3a59cfd":"code","48b57081":"code","7489ed0f":"code","6ca9878c":"code","685dcaed":"code","9c22cfc0":"markdown","010b50e6":"markdown","81c23bad":"markdown","7dfd5396":"markdown","fbd54efb":"markdown","f992d2d5":"markdown"},"source":{"a86b0934":"import matplotlib\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport scipy\nimport scipy.interpolate","39b858e0":"data1=np.load('\/kaggle\/input\/depression-rest-eeg-features\/507_Depression_REST-epo-feat-v1.npy',allow_pickle=True)\ntype(data1)","b6640170":"data1.shape,data1[0].shape,data1[0][0].shape","cc02b19e":"Features =\"Min, Max, STD, Mean, Median, Activity, Mobility, Complexity, Kurtosis, 2nd Difference Mean, 2nd Difference Max, 1st Difference Mean, 1st Difference Max, Coeffiecient of Variation, Skewness, Wavelet Approximate Mean, Wavelet Approximate Std Deviation, Wavelet Detailed Mean, Wavelet Detailed Std Deviation, Wavelet Approximate Energy, Wavelet Detailed Energy, Wavelet Approximate Entropy, Wavelet Detailed Entropy, Mean of Vertex to Vertex Slope, Var of Vertex to Vertex Slope, FFT Delta Max Power, FFT Theta Max Power, FFT Alpha Max Power, FFT Beta Max Power, Delta\/Alpha, Delta\/Theta\"\nprint(len(Features.split(\", \")))\nfeatures=Features.split(\", \")","143959f4":"chs = ['FP1','FPZ','FP2','AF3','AF4','F7','F5','F3','F1','FZ','F2','F4','F6','F8','FT7','FC5','FC3','FC1','FCZ','FC2','FC4','FC6','FT8','T7','C5','C3','C1','CZ','C2','C4','C6','T8','M1','TP7','CP5','CP3','CP1','CPZ','CP2','CP4','CP6','TP8','M2','P7','P5','P3','P1','PZ','P2','P4','P6','P8','PO7','PO5','PO3','POZ','PO4','PO6','PO8','O1','OZ','O2']\nlen(chs)","65234f8a":"df0=pd.DataFrame(data1[0][0],columns=features,index=chs)\ndf0.shape","cc12acc2":"df=df0.reset_index().copy()\ndf.rename(columns={'index':'channel'},inplace=True)\ndf.head()","0bac400d":"BioSemi64 = pd.read_csv(\"..\/input\/channel-loc\/BioSemi64.csv\",header=None,usecols=None)\nBioSemi64.columns=['num','x','y','channel']\nBioSemi64.head()","5110baa9":"mn=BioSemi64.merge(df[['channel','Mean']],on='channel')\nmn.shape\n# mn","d3a59cfd":"df[(~df.channel.isin(mn.channel))] #elctrodes not specified in BioSemi64 file","48b57081":"BioSemi64[(~BioSemi64.channel.isin(mn.channel))] #Electrodes not specified in the data","7489ed0f":"#changed the electrode position to cartesian coordinate. Though there is a direct way to plot from polar coordinates\ndef pol2cart(x, y):\n    xx=[]\n    yy=[]\n    for i in range(0,58):\n#         print(i)\n        xx.append(y[i] * np.cos(np.radians(x[i])))\n        yy.append(y[i] * np.sin(np.radians(x[i])))\n    return(xx,yy)\nxx,yy=pol2cart(mn['x'].tolist(), mn['y'].tolist())","6ca9878c":"N=300\nz = mn['Mean']*100000\n\nxi = np.linspace(np.min(xx), np.max(xx), N)\nyi = np.linspace(np.min(yy), np.max(yy), N)\nzi = scipy.interpolate.griddata((xx, yy), z, (xi[None,:], yi[:,None]), method='cubic')","685dcaed":"xy_center = [0,0]   # center of the plot\nradius =0.45          # radius\n\n# set points > radius to not-a-number. They will not be plotted.\n# the dr\/2 makes the edges a bit smoother\ndr = xi[1] - xi[0]\nfor i in range(N):\n    for j in range(N):\n        r = np.sqrt((xi[i] - xy_center[0])**2 + (yi[j] - xy_center[1])**2)\n        if (r - dr\/2) > radius:\n            zi[j,i] = \"nan\"\n\n# make figure\nfig = plt.figure()\n\n# set aspect = 1 to make it a circle\nax = fig.add_subplot(111, aspect = 1)\n\n# use different number of levels for the fill and the lines\nCS = ax.contourf(xi, yi, zi, 60, cmap = plt.cm.jet, zorder = 1)\nax.contour(xi, yi, zi, 15, colors = \"grey\", zorder = 2)\n\n# make a color bar\ncbar = fig.colorbar(CS, ax=ax)\n\n# add the data points\n# I guess there are no data points outside the head...\nax.scatter(xx, yy, marker = 'o', c = 'b', s = 15, zorder = 3)\nfor i, txt in enumerate(mn['channel'].tolist()):\n    ax.annotate(txt, (xx[i], yy[i]))\n\n# Add some body parts. Hide unwanted parts by setting the zorder low\n# add two ears\ncircle = matplotlib.patches.Ellipse(xy = [0,-0.45], width = 0.1, height = 0.05, angle = 0, edgecolor = \"k\", facecolor = \"w\", zorder = 0)\nax.add_patch(circle)\ncircle = matplotlib.patches.Ellipse(xy = [0,0.45], width = 0.1, height = 0.05, angle = 0, edgecolor = \"k\", facecolor = \"w\", zorder = 0)\nax.add_patch(circle)\n# add a nose\n# xy = [[-0.05,0.425], [0,0.475],[0.05,0.425]]\nxy = [[0.425,-0.05], [0.475,0.0],[0.425,0.05]]\npolygon = matplotlib.patches.Polygon(xy = xy,edgecolor = \"k\", facecolor = \"w\", zorder = 0)\nax.add_patch(polygon) \nplt.show()\nfrom IPython.display import Image\nImage(\"..\/input\/electrode-location-fig\/Electrode_location.jpg\",height=300,width=300)","9c22cfc0":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. ","010b50e6":"Let's load the first data.","81c23bad":"Got the channel location from some website.\nExample Source: https:\/\/www.parralab.org\/isc\/BioSemi64.loc BioSemi location file for topoplot\n\n\n<img src=\"https:\/\/i.ibb.co\/M2GRQNz\/670px-International-10-20-system-for-EEG-MCN-svg.png\" alt=\"670px-International-10-20-system-for-EEG-MCN-svg\" border=\"0\">","7dfd5396":"There are 31 features and 62 channels. Let's look at a single feature across the channels in topography map for single person.","fbd54efb":"Note there is small difference from BioSemi64 channel locations (comparing two location figures there is no AF7, AF8, AFZ. There is additional PO5,PO6 in data but not plotted. Probably there should be different channel location file more relevant to the data).\n\nTo be continued ...","f992d2d5":"EEG Topography Map\n\nReference: https:\/\/stackoverflow.com\/questions\/15361143\/how-to-fit-result-of-matplotlib-pyplot-contourf-into-circle\n"}}