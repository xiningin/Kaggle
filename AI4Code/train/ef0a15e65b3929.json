{"cell_type":{"7d49ba1f":"code","08bcea3f":"code","1ecfe189":"code","62222f0a":"code","54d5880a":"code","d5a4d252":"code","70dda1f3":"code","d416b022":"code","2907f462":"code","0eb3dbbf":"code","a5e73af6":"markdown"},"source":{"7d49ba1f":"import numpy as np\nimport pandas as pd\nfrom sympy import sieve\nimport random\n%matplotlib inline","08bcea3f":"original = pd.read_csv(\"..\/input\/santa-2018-lkh\/submission_fromLKH.csv\")\ncities = pd.read_csv(\"..\/input\/traveling-santa-2018-prime-paths\/cities.csv\")\ncities.rename(columns={\"CityId\":\"Path\"}, inplace=True)\nbaseline = original.merge(cities,how='left',on='Path')","1ecfe189":"pnums = list(sieve.primerange(0, baseline.shape[0]))","62222f0a":"def score_it(df):\n    df['step'] = np.sqrt((df.X - df.X.shift())**2 + (df.Y - df.Y.shift())**2)\n    df['step_adj'] = np.where((df.index) % 10 != 0, df.step, df.step + \n                              df.step*0.1*(~df.Path.shift().isin(pnums)))\n    return df.step_adj.sum()\n\ndisplay(score_it(baseline))","54d5880a":"#%% imports\nfrom scipy.spatial.distance import pdist, squareform\nfrom ortools.constraint_solver import pywrapcp\nfrom ortools.constraint_solver import routing_enums_pb2\n\n#%% functions\ndef create_mat(df):\n#    print(\"building matrix\")\n    mat = pdist(df)\n    return squareform(mat)\n\ndef create_distance_callback(dist_matrix):\n    def distance_callback(from_node, to_node):\n      return int(dist_matrix[from_node][to_node])\n    return distance_callback\n\nstatus_dict = {0: 'ROUTING_NOT_SOLVED', \n               1: 'ROUTING_SUCCESS', \n               2: 'ROUTING_FAIL',\n               3: 'ROUTING_FAIL_TIMEOUT',\n               4: 'ROUTING_INVALID'}\n\ndef optimize(df, startnode, stopnode, fixed):     \n    num_nodes = df.shape[0]\n    mat = create_mat(df)\n    dist_callback = create_distance_callback(mat)\n    search_parameters = pywrapcp.RoutingModel.DefaultSearchParameters()\n    search_parameters.solution_limit = num_iters \n    search_parameters.first_solution_strategy = (\n                                    routing_enums_pb2.FirstSolutionStrategy.LOCAL_CHEAPEST_INSERTION)\n    search_parameters.local_search_metaheuristic = (\n                            routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH)\n\n    if fixed:\n        routemodel = pywrapcp.RoutingModel(num_nodes, 1, [startnode], [stopnode])\n    else:\n        routemodel = pywrapcp.RoutingModel(num_nodes, 1, startnode)\n    routemodel.SetArcCostEvaluatorOfAllVehicles(dist_callback)\n    \n    assignment = routemodel.SolveWithParameters(search_parameters)\n    return routemodel, assignment\n    \ndef get_route(df, startnode, stopnode, fixed): \n    routemodel, assignment = optimize(df, int(startnode), int(stopnode), fixed)\n    route_number = 0\n    node = routemodel.Start(route_number)\n    route = []\n    while not routemodel.IsEnd(node):\n        route.append(node) \n        node = assignment.Value(routemodel.NextVar(node))\n    return route","d5a4d252":"import random\npnums = list(sieve.primerange(0, baseline.shape[0]))","70dda1f3":"# df = dataframe\n# m = range of cities to optimize\n# n = number of optimizations to run\n\ndef run_opt(df,m,n):\n    i = 0\n    while i < n:\n        startpoint = random.randint(0,df.shape[0])\n        endpoint = min((startpoint + m),df.shape[0])\n        \n        district = df.iloc[startpoint:endpoint,:3].copy()\n        district = district.reset_index()\n        locations = district[['X', 'Y']].values\n        \n        segnodes = get_route(locations, 0, (m-1), fixed=True)\n        ord_district = district.iloc[segnodes]\n        segment = ord_district.index.tolist()\n        \n        temp = district.loc[segment, ['Path','X', 'Y']].reset_index()\n        district_2 = district.copy()\n        district_2.iloc[:(m-1),1:] = temp.copy()\n        district = district.set_index('index')\n        district_2 = district_2.set_index('index')\n        \n        district['step'] = np.sqrt((district.X - district.X.shift())**2 + (district.Y - district.Y.shift())**2)\n        district['step_adj'] = np.where((district.index) % 10 != 0, district.step, district.step + \n                                        district.step*0.1*(~district.Path.shift().isin(pnums)))\n        district_2['step'] = np.sqrt((district_2.X - district_2.X.shift())**2 + (district_2.Y - district_2.Y.shift())**2)\n        district_2['step_adj'] = np.where((district_2.index) % 10 != 0, district_2.step, district_2.step + \n                                          district_2.step*0.1*(~district_2.Path.shift().isin(pnums)))\n        \n        check_dist = district.step_adj.sum() > district_2.step_adj.sum()\n        print(i)\n        print(district.step_adj.sum(), district_2.step_adj.sum())\n        \n        if check_dist:\n            df.iloc[startpoint:endpoint,0:3] = district_2\n        i += 1","d416b022":"%%time\nnum_iters = 250\nrun_opt(baseline,40,200)","2907f462":"def score_it(df):\n    df['step'] = np.sqrt((df.X - df.X.shift())**2 + (df.Y - df.Y.shift())**2)\n    df['step_adj'] = np.where((df.index) % 10 != 0, df.step, df.step + \n                              df.step*0.1*(~df.Path.shift().isin(pnums)))\n    return df.step_adj.sum()\n\ndisplay(score_it(baseline))","0eb3dbbf":"sub = pd.read_csv(\"..\/input\/traveling-santa-2018-prime-paths\/sample_submission.csv\")\nsub['Path'] = baseline['Path']\nsub.to_csv('submission.csv', index=False)\nsub.head()","a5e73af6":"This method may potentially improve your score by 20~30 after you've done all the other methods such as 2-opts.\n\nWhat we are doing here is to randomly take a certain chunk (say 40 cities) from your current path, use Google OR-Tool to find an alternative path, compare the two, and replace with the alternative if that gives a better score. The score will not become worse, since we are replacing the path only when it results in some improvement.\n\nThis kernel only gives about 1.0 score improvement but will run in 4-5 minutes. This can be scaled up by running the function with larger number of runs (i.e. larger \"n\" in the run_opt function) and repeat the runs with different size of chunks (i.e. different \"m\"s in the run_opt function).\n\nThis code is based on kernels by  [JohnM](https:\/\/www.kaggle.com\/jpmiller\/google-or-tools-w-clusters) and  [Aguiar](https:\/\/www.kaggle.com\/jsaguiar\/lkh-solver). Thank you both for sharing these great kernels.\n"}}