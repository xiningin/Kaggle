{"cell_type":{"5c9ee0c1":"code","110fc4db":"code","32b3d8be":"code","9c96f171":"code","cc689ac9":"code","0f6a67ed":"code","23c2a62a":"code","ee895ad1":"code","1459098e":"code","a0a1e8c9":"code","75d97f0e":"code","61a00353":"markdown","8d5a52c0":"markdown"},"source":{"5c9ee0c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","110fc4db":"df=pd.read_csv(\"\/kaggle\/input\/bank-note-authentication-uci-data\/BankNote_Authentication.csv\")","32b3d8be":"df.head()","9c96f171":"df.describe()","cc689ac9":"# Count the number of observations of each class\nprint('Observations per class: \\n', df['class'].value_counts())","0f6a67ed":"# Import seaborn\nimport seaborn as sns\n#import matplotlib\nimport matplotlib.pyplot as plt\n# Use pairplot and set the hue to be our class\nsns.pairplot(df, hue='class') \n\n# Show the plot\nplt.show()","23c2a62a":"# Import the sequential model and dense layer\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Create a sequential model\nmodel = Sequential()\n# Add a dense layer \nmodel.add(Dense(1, input_shape=(4,), activation='sigmoid'))\n\n# Compile your model\nmodel.compile(loss='binary_crossentropy', optimizer='sgd', metrics=['accuracy'])\n\n# Display a summary of your model\nmodel.summary()","ee895ad1":"#defining features and target variable\ny = df['class']\nX = df.drop(columns = ['class'])\nfrom sklearn.model_selection import train_test_split\n#splitting the data into train and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","1459098e":"# Train your model for 20 epochs\nmodel.fit(X_train, y_train, epochs=20)\n\n# Evaluate your model accuracy on the test set\naccuracy = model.evaluate(X_test, y_test)[1]\n\n# Print accuracy\nprint('Accuracy:',accuracy)","a0a1e8c9":"# Prediction\npreds = model.predict(X_test)\n\nfor pred in enumerate(preds):\n  print(\"{} | {}\".format(pred,y_test))","75d97f0e":"# Import the early stopping callback\nfrom keras.callbacks import EarlyStopping\n\n# Define a callback to monitor val_acc\nmonitor_val_acc = EarlyStopping(monitor=\"val_acc\", \n                       patience=5)\n\n# Train your model using the early stopping callback\nmodel.fit(X_train, y_train, \n           epochs=1000, validation_data=(X_test,y_test),\n           callbacks=[monitor_val_acc])","61a00353":"**Improving the training model**","8d5a52c0":"**A binary classification model**"}}