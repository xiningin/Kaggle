{"cell_type":{"1830d53a":"code","de4a02cb":"code","15f1f7ae":"code","8098f37d":"code","bd9d56b8":"code","6f4033c0":"code","a5869a7e":"code","b197fcf6":"code","4c9a6fed":"code","1d7c551a":"code","012b77bf":"code","74e60afe":"code","373bcd39":"code","3ac14437":"code","9196020c":"code","fe269000":"code","692c34b7":"code","4a15ce30":"code","b68ee691":"code","2a0e4839":"code","59e43b15":"code","c6e79c92":"code","40eb9b48":"code","edd94646":"code","301f4cd3":"code","9d8593c3":"code","48c6929c":"code","0ed00062":"code","c839dc67":"code","462c4b0f":"code","492d5ee8":"code","62bf1020":"code","51c6d140":"code","335043e9":"code","8b54f7b1":"code","2a789e93":"code","87a96dd2":"code","8b1f4439":"code","519444d9":"code","e73956e9":"code","0dabf930":"code","3def10e3":"code","d2b017e2":"markdown","58172074":"markdown","befbe32e":"markdown","0ba1b46d":"markdown","16cafb4d":"markdown","4b244844":"markdown","43900237":"markdown"},"source":{"1830d53a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","de4a02cb":"data=pd.read_csv(\"\/kaggle\/input\/automobile-dataset\/Automobile_data.csv\", na_values=['?', ' ?', '? '])\ndata=data.replace(['?'], np.nan)","15f1f7ae":"df=data.copy()","8098f37d":"df.info()","bd9d56b8":"df.shape","6f4033c0":"df.head(7)","a5869a7e":"df.columns","b197fcf6":"df.nunique()","4c9a6fed":"def pie_chart(cols):\n    for col in cols:\n        fig, ax = plt.subplots(figsize=(6,4))\n        plt.pie(x=df[col].value_counts(), labels=list(df[col].value_counts().index), explode = (0, 0.1))\n        plt.show()\npie_chart(['fuel-type', 'aspiration', 'num-of-doors', 'engine-location'])","1d7c551a":"plt.figure(figsize=(8,5))\nsns.countplot(df.make)\nplt.xticks(rotation=90)\nplt.show()","012b77bf":"plt.figure(figsize=(8,5))\nsns.countplot(df['body-style'])\nplt.show()","74e60afe":"df.isnull().sum().sum()","373bcd39":"nulls=df.isnull().sum()\nprint(nulls[nulls > 0])","3ac14437":"nulls=df.isnull().sum()\/df.shape[0]\nprint(nulls[nulls > 0])","9196020c":"null_col_names=nulls[nulls>0].index\nfor col in null_col_names:\n    print(col, df[col].dtypes)","fe269000":"df['num-of-doors']=df['num-of-doors'].fillna(df['num-of-doors'].value_counts().sort_values(ascending=False).index[0])","692c34b7":"def fill_with_mean(df, cols):\n    for col in cols:\n        df[col]=df[col].fillna(np.round(df[col].mean() ,3))\n    return df","4a15ce30":"df=fill_with_mean(df, ['bore', 'stroke', 'horsepower', 'peak-rpm', 'price'])","b68ee691":"nulls=df.isnull().sum()\nprint(nulls[nulls > 0])","2a0e4839":"for col in df._get_numeric_data():\n    sns.boxplot(df[col])\n    plt.show()","59e43b15":"def thresholds(dataframe, cols, q1=0.25, q3=0.75):\n    for col_name in cols:\n        quartile1 = dataframe[col_name].quantile(q1)\n        quartile3 = dataframe[col_name].quantile(q3)\n        IQR = quartile3 - quartile1\n        up_limit = quartile3 + 1.5 * IQR\n        low_limit = quartile1 - 1.5 * IQR\n        dataframe.loc[(dataframe[col_name] < low_limit), col_name] = low_limit\n        dataframe.loc[(dataframe[col_name] > up_limit), col_name] = up_limit\n    return dataframe","c6e79c92":"df=thresholds(df, ['normalized-losses', 'wheel-base', 'length', 'width', 'engine-size', 'stroke', \n                   'compression-ratio', 'horsepower', 'highway-mpg', 'price'])","40eb9b48":"df=df.query(\"`city-mpg`<45\")","edd94646":"df=df.query(\"`highway-mpg`<48\")","301f4cd3":"for col in df._get_numeric_data():\n    sns.boxplot(df[col])\n    plt.show()","9d8593c3":"df=pd.get_dummies(df, drop_first=True)","48c6929c":"from sklearn.impute import KNNImputer","0ed00062":"def knn_imputer(df, n):\n    imputer = KNNImputer(n_neighbors = n)\n    df_filled = imputer.fit_transform(df)\n    df_knn_imp = pd.DataFrame(df_filled,columns = df.columns)\n    return df_knn_imp","c839dc67":"#Filling Null values with KNN imputer in normalized-loss column\ndf=knn_imputer(df, 4)","462c4b0f":"df.isnull().sum().sum()","492d5ee8":"from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge, ElasticNet\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor","62bf1020":"X=df.drop('price', axis=1)\nY=df[['price']]","51c6d140":"models=[LinearRegression(), Lasso(), Ridge(), ElasticNet(), KNeighborsRegressor(), DecisionTreeRegressor(), LGBMRegressor()]","335043e9":"def reg_models(x, y, models):\n    for model in models:\n        X_train, X_test, Y_train, Y_test=train_test_split(x, y, test_size=0.25, random_state=50)\n        model.fit(X_train,Y_train)\n        Y_test_pred=model.predict(X_test)\n        print(model)\n        print('Mean Squared Error: {}'.format(mean_squared_error(Y_test, Y_test_pred)))\n        print('Regression Score(r2): {}'.format(r2_score(Y_test, Y_test_pred)))\n        print('-----------------------------------------------------')","8b54f7b1":"reg_models(X, Y, models)","2a789e93":"model_parameters={\n    'Linear Regression':{\n        'model': LinearRegression(),\n        'params': {'fit_intercept': [True , False],\n                   'normalize': [True, False], \n                    }},\n    'Lasso Regression': {\n        'model': Lasso(),\n        'params': {'selection': ['cyclic', 'random'], \n                  'alpha': [0.1,0.01, 0.005, 0.05, 0.001 ,0.2, 0.3, 0.5, 0.8, 0.9, 1]}},\n    'Ridge Regression' : {\n        'model': Ridge(),\n        'params': {'alpha': [0.1, 0.01, 0.005, 0.05, 0.001 ,0.2, 0.3, 0.5, 0.8, 0.9, 1], \n                   'solver': ['auto', 'svd', 'cholesky']}},\n    'ElasticNet': {\n        'model': ElasticNet(), \n        'params': {'alpha': [0.1,0.01, 0.005, 0.05, 0.001 ,0.2, 0.3, 0.5, 0.8, 0.9, 1],\n                  'selection': ['cyclic', 'random']}},\n    'KNeighborsRegeressor': {\n        'model': KNeighborsRegressor(), \n        'params': {'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'], \n                  'weights': ['uniform', 'distance'],\n                  'n_neighbors': [3, 4, 5]}},\n    'DecisionTreeRegressor': {\n        'model': DecisionTreeRegressor(),\n        'params': {'criterion': ['mse', 'friedman_mse', 'mae', 'poisson'],\n                   'splitter': ['best', 'random']}}, \n    'LGBMRegressor': {\n        'model': LGBMRegressor(),\n        'params': {'learning_rate': [0.1, 0.2], 'max_depth': list(range(-1, 2, 1)), \n                   'n_estimators': list(range(97, 103))}}\n}","87a96dd2":"def tuning(x, y, model_params):\n    results=[]\n    for model_name, mp in model_params.items():\n        X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.25, random_state=50)\n        clf=GridSearchCV(mp['model'], mp['params'], cv=5, return_train_score=True)\n        clf.fit(X_train, Y_train)\n        Y_test_pred=clf.predict(X_test)\n        test_error=mean_squared_error(Y_test, Y_test_pred)\n        r2score=r2_score(Y_test, Y_test_pred)                                                  \n        print(model_name)\n        print('Mean Squared Error: {}'.format(test_error))\n        print('Regression Score(r2): {}'.format(r2score))\n        print('------------------------------------------------------')\n        results.append({'model': model_name, \n                        'MSE': test_error,\n                        'R2 Score': r2score,\n                        'best_score': clf.best_score_,\n                        'best_params': clf.best_params_})\n    return results","8b1f4439":"result = tuning(X, Y, model_parameters)","519444d9":"res = pd.DataFrame(result)","e73956e9":"res_sorted=res.sort_values('R2 Score', ascending = False)\nres_sorted","0dabf930":"res_sorted.to_csv('result.csv',index=False)","3def10e3":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=50)\nmodel=Lasso(alpha=1, selection='cyclic')\nmodel.fit(X_train, Y_train)\nY_test_pred=model.predict(X_test)\ntest_error=mean_squared_error(Y_test, Y_test_pred)\nr2score=r2_score(Y_test, Y_test_pred) \nprint('Mean Squared Error: {}'.format(test_error))\nprint('Regression Score(r2): {}'.format(r2score))","d2b017e2":"# Outlier Analysis","58172074":"# Data Understanding","befbe32e":"# Data Preprocessing","0ba1b46d":"# Encoding","16cafb4d":"# Final Model","4b244844":"# HyperParameter Tuning","43900237":"# Building Model"}}