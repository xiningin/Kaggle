{"cell_type":{"227b9244":"code","67638afb":"code","d5ab4a03":"code","2d77f276":"code","8bc89b26":"code","3770026c":"code","8c10e228":"code","d70934d6":"code","bb80ea62":"code","a3f240d1":"code","1be24ca4":"code","524f0d44":"code","1bb1d0df":"code","f895ef1a":"code","2b9b1378":"code","83ddb9e9":"code","d38119f5":"code","d2a7622a":"code","59d1badd":"code","13c8e094":"code","7503bc5d":"code","0afb07f4":"code","4fd7c236":"code","f9eb52cf":"code","039af43e":"code","d53cf41d":"code","a95fd3ab":"code","ff1327ae":"code","1d56bbad":"code","3fb4733c":"code","7dc81280":"code","00b19302":"code","c0853342":"code","cfb97050":"code","f408f6fd":"code","ab79a3d5":"code","3089a978":"code","a92bded7":"code","f0059251":"code","7ec4eee6":"code","e4b7e682":"code","5b1cfeb4":"code","dc2ce30c":"code","a4646838":"code","926b1452":"code","163a9282":"code","6b01daef":"code","2b3ddd03":"code","72c30040":"code","a0a77156":"code","8a341042":"code","6d1eb764":"code","6ce37e7c":"code","71b742f3":"code","88f7d9b5":"code","7e5e0849":"code","26a48573":"code","febae38c":"code","76d5b2ae":"code","ea31bb59":"code","00ddc161":"code","f95b8152":"code","ca105598":"code","6080a61f":"code","ad9ab8b9":"code","cdd81890":"code","783791ab":"code","e12946a1":"code","431d047e":"code","88e8c321":"code","fccc864d":"code","730377ab":"code","9fa954b4":"code","d5fad3ba":"code","2dd1e395":"code","bcde9be5":"code","37763bd6":"code","de1e8433":"code","8f3f34ce":"code","7b1169c5":"code","bede5c6b":"code","5fe5bb99":"code","2e6d0023":"code","e6138c86":"code","bb04a84a":"code","1f552985":"code","02b91bcd":"code","daf6536c":"code","42f5b5dc":"code","d0ba6a49":"code","e726de47":"code","14257939":"code","95e0e4fa":"code","755a6c58":"code","678d300a":"code","dd5b3d08":"code","59f1d942":"code","15f15755":"code","6ef46dd0":"code","51746f29":"code","8d03f03d":"code","04015acf":"code","4a57df11":"code","3a3da392":"code","5b2671f6":"markdown","d7ef0340":"markdown","56a7ada5":"markdown","02371bb4":"markdown","6210ab24":"markdown","8b50643c":"markdown","361bfaa7":"markdown","3539b04e":"markdown","0f358397":"markdown","bf05d74c":"markdown","b483a1cf":"markdown","b35e240e":"markdown","5a73ef58":"markdown","8f6ec896":"markdown","a34b18df":"markdown","8a6747ea":"markdown","6b8c7ea9":"markdown","1cb7ca96":"markdown","1b692c01":"markdown","9d225dc1":"markdown","37626a69":"markdown","deac0c63":"markdown","0587a1f7":"markdown","03f2827f":"markdown"},"source":{"227b9244":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67638afb":"pwd","d5ab4a03":"#Installation of required libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import scale \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import model_selection\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn import neighbors\nfrom sklearn.svm import SVR\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","2d77f276":"# Read train and test data with pd.read_csv():\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","8bc89b26":"# copy data in order to avoid any change in the original:\ndf_train=train_data.copy()\ndf_test=test_data.copy()","3770026c":"df_train.head()","8c10e228":"df_test.head()","d70934d6":"df_train.info","bb80ea62":"df_test.info","a3f240d1":"df_train.describe().T","1be24ca4":"df_test.describe().T","524f0d44":"!pip install pandas-profiling","1bb1d0df":"from pandas_profiling import ProfileReport","f895ef1a":"profile_train = ProfileReport(df_train, title='Titanic Data Set')","2b9b1378":"profile_train","83ddb9e9":"profile_test = ProfileReport(df_test, title='Titanic Data Set')","d38119f5":"profile_test","d2a7622a":"sns.barplot(x=\"Pclass\",y=\"Survived\", data=df_train);","59d1badd":"sns.barplot(x=\"SibSp\", y=\"Survived\" , data= df_train);","13c8e094":"sns.barplot(x= \"Parch\" , y=\"Survived\", data=df_train);","7503bc5d":"sns.barplot(x=\"Sex\",y=\"Survived\" , data= df_train);","0afb07f4":"Age_visualization=df_train[\"Age\"].dropna()\nsns.distplot(Age_visualization, kde = False);","4fd7c236":"sns.kdeplot(df_train[\"Fare\"], shade = True);","f9eb52cf":"(sns\n .FacetGrid(df_train,\n              hue = \"Survived\",\n              height = 6,\n              xlim = (0, 500))\n .map(sns.kdeplot, \"Fare\", shade= True)\n .add_legend()\n);","039af43e":"(sns\n .FacetGrid(df_train,\n              hue = \"Survived\",\n              height = 6,\n              xlim = (0, 90))\n .map(sns.kdeplot, \"Age\", shade= True)\n .add_legend()\n);","d53cf41d":"df_train= df_train.drop(\"Ticket\", axis=1)\ndf_test=df_test.drop(\"Ticket\", axis=1)\ndf_train.head()","a95fd3ab":"df_train.describe().T","ff1327ae":"sns.boxplot(x=df_train[\"Fare\"]);","1d56bbad":"Q1= df_train[\"Fare\"].quantile(0.25)\nQ3= df_train[\"Fare\"].quantile(0.75)\nIQR=Q3-Q1\n\nlower_limit=Q1-1.5*IQR\nupper_limit=Q3+1.5*IQR\nupper_limit","3fb4733c":"df_test.isnull().sum()","7dc81280":"df_train.sort_values(\"Fare\", ascending=False).head(20)","00b19302":"df_train_Fare=df_train[\"Fare\"]\ndf_test_Fare=df_test[\"Fare\"]\nupper_fare=263","c0853342":"outlier_train = (df_train_Fare>upper_fare)\noutlier_test = (df_test_Fare>upper_fare)","cfb97050":"df_train_Fare[outlier_train] = upper_fare\ndf_test_Fare[outlier_test] = upper_fare","f408f6fd":"df_train[\"Fare\"]=df_train_Fare\ndf_test[\"Fare\"]=df_test_Fare","ab79a3d5":"df_test[df_test[\"PassengerId\"]==1044]","3089a978":"df_train.sort_values(\"Fare\", ascending=False).head(10)","a92bded7":"df_test.sort_values(\"Fare\", ascending=False).head()","f0059251":"df_train[\"Title\"] = df_train[\"Name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\ndf_test[\"Title\"] = df_test[\"Name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)","7ec4eee6":"df_train.head()","e4b7e682":"df_train[\"Title\"].value_counts()","5b1cfeb4":"df_test[\"Title\"].value_counts()","dc2ce30c":"sns.barplot(x= \"Title\" , y=\"Survived\", data=df_train);","a4646838":"df_train['Title'] = df_train['Title'].replace([ 'Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\ndf_train['Title'] = df_train['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ndf_train['Title'] = df_train['Title'].replace('Mlle', 'Miss')\ndf_train['Title'] = df_train['Title'].replace('Ms', 'Miss')\ndf_train['Title'] = df_train['Title'].replace('Mme', 'Mrs')","926b1452":"df_test['Title'] = df_test['Title'].replace([ 'Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\ndf_test['Title'] = df_test['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ndf_test['Title'] = df_test['Title'].replace('Mlle', 'Miss')\ndf_test['Title'] = df_test['Title'].replace('Ms', 'Miss')\ndf_test['Title'] = df_test['Title'].replace('Mme', 'Mrs')","163a9282":"df_train[\"Title\"].value_counts()","6b01daef":"df_test[\"Title\"].value_counts()","2b3ddd03":"df_train[[\"Title\",\"Age\"]].groupby(\"Title\").mean()","72c30040":"for i in df_train[\"Title\"]:\n    if i==\"Master\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(5)\n    elif i==\"Miss\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(22) \n    elif i==\"Mr\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(32)\n    elif i==\"Mrs\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(36)\n    elif i==\"Rare\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(46)\n    else:\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(43)","a0a77156":"df_train.isnull().sum()","8a341042":"df_test[[\"Title\",\"Age\"]].groupby(\"Title\").mean()","6d1eb764":"for i in df_test[\"Title\"]:\n    if i==\"Master\":\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(7)\n    elif i==\"Miss\":\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(22) \n    elif i==\"Mr\":\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(32)\n    elif i==\"Mrs\":\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(39)\n    else:\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(44)","6ce37e7c":"df_test.isnull().sum()","71b742f3":"df_test[[\"Pclass\",\"Fare\"]].groupby(\"Pclass\").mean()","88f7d9b5":"df_test[\"Fare\"] = df_test[\"Fare\"].fillna(12)","7e5e0849":"df_test.isnull().sum()","26a48573":"df_train[\"N_cabin\"] = (df_train[\"Cabin\"].notnull().astype('int'))\ndf_test[\"N_Cabin\"] = (df_test[\"Cabin\"].notnull().astype('int'))\n\ndf_train = df_train.drop(['Cabin'], axis = 1)\ndf_test = df_test.drop(['Cabin'], axis = 1)\n\ndf_train.head()","febae38c":"df_train[\"Embarked\"].value_counts()","76d5b2ae":"df_train[\"Embarked\"]=df_train[\"Embarked\"].fillna(\"S\")","ea31bb59":"from sklearn import preprocessing\n\nlbe=preprocessing.LabelEncoder()\ndf_train[\"Embarked\"]=lbe.fit_transform(df_train[\"Embarked\"])\ndf_test[\"Embarked\"]=lbe.fit_transform(df_test[\"Embarked\"])","00ddc161":"df_train.head()","f95b8152":"Sex_mapping={\"male\":0,\"female\":1}\ndf_train[\"Sex\"]=df_train[\"Sex\"].map(Sex_mapping)\ndf_test[\"Sex\"]=df_test[\"Sex\"].map(Sex_mapping)","ca105598":"df_train.head()","6080a61f":"df_train[[\"Title\",\"Survived\"]].groupby([\"Title\"], as_index=False).mean().sort_values(\"Survived\")","ad9ab8b9":"Title_mapping={\"Mr\":1,\"Rare\":2,\"Master\":3,\"Miss\":4,\"Mrs\":5,\"Royal\":6}\ndf_train[\"Title\"]=df_train[\"Title\"].map(Title_mapping)\ndf_test[\"Title\"]=df_test[\"Title\"].map(Title_mapping)","cdd81890":"df_train.head()","783791ab":"df_test.head()","e12946a1":"df_train = df_train.drop(['Name'], axis = 1)\ndf_test = df_test.drop(['Name'], axis = 1)","431d047e":"sns.distplot(Age_visualization, kde = False);","88e8c321":"bins = [0, 13, 18, 24, 32, 75, np.inf]\nmylabels = ['Child', 'Teenager', 'Young', 'Young Adult', 'Adult', 'Senior']\ndf_train['AgeGroup'] = pd.cut(df_train[\"Age\"], bins, labels = mylabels)\ndf_test['AgeGroup'] = pd.cut(df_test[\"Age\"], bins, labels = mylabels)","fccc864d":"df_train[[\"AgeGroup\",\"Survived\"]].groupby(\"AgeGroup\").mean()","730377ab":"# Map each Age value to a numerical value:\nage_mapping = {'Child': 1, 'Teenager': 2, 'Young': 3, 'Young Adult':4 , 'Adult': 5, 'Senior':6}\ndf_train['AgeGroup'] = df_train['AgeGroup'].map(age_mapping)\ndf_test['AgeGroup'] = df_test['AgeGroup'].map(age_mapping)","9fa954b4":"df_train.head()","d5fad3ba":"sns.kdeplot(df_train[\"Fare\"], shade = True);","2dd1e395":"(sns\n .FacetGrid(df_train,\n                hue = \"Survived\",\n                height = 6,\n                xlim = (0, 300))\n .map(sns.kdeplot, \"Fare\", shade= True)\n .add_legend()\n);","bcde9be5":"df_train['FareBand'] = pd.qcut(df_train['Fare'], 10, labels = [1, 2, 3, 4,5,6,7,8,9,10])\ndf_test['FareBand'] = pd.qcut(df_test['Fare'], 10, labels = [1, 2, 3, 4,5,6,7,8,9,10])","37763bd6":"df_train.head()","de1e8433":"df_train[\"FamilySize\"] =df_train[\"SibSp\"]+df_train[\"Parch\"]+1\ndf_train[\"FamilySize\"].mean()","8f3f34ce":"df_test[\"FamilySize\"] =df_test[\"SibSp\"]+df_test[\"Parch\"]+1\ndf_test[\"FamilySize\"].mean()","7b1169c5":"sns.distplot(df_train[\"FamilySize\"], kde = False);","bede5c6b":"df_train['Single'] = df_train['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ndf_train['SmallFam'] = df_train['FamilySize'].map(lambda s: 1 if  2 <= s <= 3  else 0)\ndf_train['MedFam'] = df_train['FamilySize'].map(lambda s: 1 if 4 <= s <= 5 else 0)\ndf_train['LargeFam'] = df_train['FamilySize'].map(lambda s: 1 if s >= 6 else 0)","5fe5bb99":"df_test['Single'] = df_test['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ndf_test['SmallFam'] = df_test['FamilySize'].map(lambda s: 1 if  2 <= s <= 3  else 0)\ndf_test['MedFam'] = df_test['FamilySize'].map(lambda s: 1 if 4 <= s <= 5 else 0)\ndf_test['LargeFam'] = df_test['FamilySize'].map(lambda s: 1 if s >= 6 else 0)","2e6d0023":"df_train = pd.get_dummies(df_train, columns = [\"Title\"])\ndf_train = pd.get_dummies(df_train, columns = [\"Embarked\"], prefix=\"Em\")","e6138c86":"df_test = pd.get_dummies(df_test, columns = [\"Title\"])\ndf_test = pd.get_dummies(df_test, columns = [\"Embarked\"], prefix=\"Em\")","bb04a84a":"df_train[\"Pclass\"] = df_train[\"Pclass\"].astype(\"category\")\ndf_train = pd.get_dummies(df_train, columns = [\"Pclass\"],prefix=\"Pc\")","1f552985":"df_test[\"Pclass\"] = df_test[\"Pclass\"].astype(\"category\")\ndf_test = pd.get_dummies(df_test, columns = [\"Pclass\"],prefix=\"Pc\")","02b91bcd":"df_train.head()","daf6536c":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\npredictors = df_train.drop(['Survived', 'PassengerId'], axis=1)\ntarget = df_train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(predictors, target, test_size = 0.20, random_state = 42)","42f5b5dc":"x_train.shape","d0ba6a49":"x_test.shape","e726de47":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_test)\nacc_logreg = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_logreg)","14257939":"from sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier()\nrandomforest.fit(x_train, y_train)\ny_pred = randomforest.predict(x_test)\nacc_randomforest = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_randomforest)","95e0e4fa":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbk = GradientBoostingClassifier()\n\ngbk.fit(x_train, y_train)\ny_pred = gbk.predict(x_test)\nacc_gbk = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gbk)","755a6c58":"gbk","678d300a":"xgb_params = {\n        'n_estimators': [200, 500],\n        'subsample': [0.6, 1.0],\n        'max_depth': [2,5,8],\n        'learning_rate': [0.1,0.01,0.02],\n        \"min_samples_split\": [2,5,10]}","dd5b3d08":"xgb = GradientBoostingClassifier()\n\nxgb_cv_model = GridSearchCV(xgb, xgb_params, cv = 10, n_jobs = -1, verbose = 2)","59f1d942":"xgb_cv_model.fit(x_train, y_train)","15f15755":"xgb_cv_model.best_params_","6ef46dd0":"xgb = GradientBoostingClassifier(learning_rate = xgb_cv_model.best_params_[\"learning_rate\"], \n                    max_depth = xgb_cv_model.best_params_[\"max_depth\"],\n                    min_samples_split = xgb_cv_model.best_params_[\"min_samples_split\"],\n                    n_estimators = xgb_cv_model.best_params_[\"n_estimators\"],\n                    subsample = xgb_cv_model.best_params_[\"subsample\"])","51746f29":"xgb_tuned =  xgb.fit(x_train,y_train)","8d03f03d":"y_pred = xgb_tuned.predict(x_test)\nacc_gbk = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gbk)","04015acf":"feature_imp = pd.Series(xgb_tuned.feature_importances_,\n                        index=x_train.columns).sort_values(ascending=False)\n\nsns.barplot(x=feature_imp, y=feature_imp.index)\nplt.xlabel('Significance Score Of Variables')\nplt.ylabel('Variables')\nplt.title(\"Variable Severity Levels\")\nplt.show()","4a57df11":"ids = df_test['PassengerId']\npredictions = xgb_tuned.predict(df_test)\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.to_csv('submission.csv', index=False)","3a3da392":"output","5b2671f6":"## AgeGroup","d7ef0340":"# Modeling, Evaluation and Model Tuning","56a7ada5":"## Gradient Boosting Classifier","02371bb4":"## Embarked","6210ab24":"## Ticket","8b50643c":"# Variable Transformation","361bfaa7":"# Feature Engineering","3539b04e":"# Missing Value Treatment","0f358397":"## Logistic Regression","bf05d74c":"## Fare ","b483a1cf":"## Cabin","b35e240e":"## Deleting Unnecessary Variables","5a73ef58":"## Outlier Treatment","8f6ec896":"## Family Size","a34b18df":"## Visualization","8a6747ea":"## Embarked & Title &   Pclass","6b8c7ea9":"## Name and Title","1cb7ca96":"## Age ","1b692c01":"## Random Forest","9d225dc1":"# Data Preparations","37626a69":"## Spliting the train data","deac0c63":"## Embarked","0587a1f7":"## Sex","03f2827f":"# Analysis and Visualization of Numeric and Categorical Variables"}}