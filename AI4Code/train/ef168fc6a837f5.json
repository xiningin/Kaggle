{"cell_type":{"c832242a":"code","a0674b7b":"code","9b796617":"code","def6c1a3":"code","e2ec5fc9":"code","9f6db611":"code","698b9d15":"code","498be77f":"code","568e72ed":"code","57e04041":"code","9179e3b8":"code","67d1a73c":"code","7cd9d6d5":"code","6812e925":"code","761567e7":"code","1e55fedb":"code","eceb8b21":"code","fa20d69a":"code","817a7256":"code","883e93a6":"code","5f5b1242":"code","79fc68a5":"code","3c298df4":"code","855aa22a":"code","1992e816":"code","91a6d85c":"code","dd0ab281":"code","0533a3e8":"code","67fac7e7":"code","f4d667bb":"code","56208c22":"code","655d5e02":"code","8eee7c06":"code","5e62d2b9":"code","d45b7371":"code","31109f1b":"code","5b15d9c5":"code","af68563c":"code","0bd9cd8f":"code","b68369c6":"code","8b0f2c86":"code","6f4b3f28":"code","98d1eb84":"markdown","efdad83a":"markdown","a2a129c8":"markdown","4bb1f05a":"markdown","db44f42e":"markdown","7f24d638":"markdown","d6f8dbe8":"markdown","7b4fbcc5":"markdown","07dab3f7":"markdown","644f8ec0":"markdown"},"source":{"c832242a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom pandas_datareader.data import DataReader\nfrom datetime import datetime","a0674b7b":"study_list = [\"AAPL\", \"GOOG\", \"MSFT\", \"AMZN\"]\n\n\nend = datetime.now()\nstart = datetime(end.year - 1, end.month, end.day)\n\n# Extracting financial data from yahoo finance and set up as DataFrame\nfor stock in study_list:\n    globals()[stock] = DataReader(stock, \"yahoo\", start, end)","9b796617":"company_list = [AAPL, GOOG, MSFT, AMZN]\ncompany_name = [\"APPLE\", \"GOOGLE\", \"MICROSOFT\", \"AMAZON\"] # names list\n\nfor company, com_name in zip(company_list, company_name): # zip the dataframes by \"creating\" a column with their respective names as categories\n    company[\"company_name\"] = com_name\n    \ndf = pd.concat(company_list, axis = 0)\ndf.head()","def6c1a3":"import plotly.subplots\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected = True)\nimport plotly.graph_objs as go\nimport plotly.express as px","e2ec5fc9":"\nfig = px.area(df, facet_col = \"company_name\", facet_col_wrap = 2)\nfig.for_each_annotation(lambda t:t.update(text = t.text.split(\"=\")[1]))\nfig.show()","9f6db611":"plot_df = df[df.company_name == \"APPLE\"]\ntrace = go.Scatter(x = list(plot_df.index), y = list(plot_df[\"Adj Close\"]), marker_color = 'rgba(0, 39, 198, 1)', name = \"Adj Close\")\n\ndata = [trace]\nlayout = dict(\n    title = \"Performance timeline -- Adj Close Price, AAPL\",\n    xaxis = dict(\n        rangeselector = dict(\n            buttons = list([\n                dict(count = 1, \n                    label = \"1m\",\n                    step = \"month\", \n                    stepmode = \"backward\"),\n                dict(count = 6,\n                    label = \"6m\",\n                    step = \"month\",\n                    stepmode = \"backward\"),\n                dict(count = 1,\n                    label = \"YTD\",\n                    step = \"year\",\n                    stepmode = \"todate\"),\n                dict(count = 1, \n                    label = \"1y\", \n                    step = \"year\",\n                    stepmode = \"backward\"),\n                dict(step = \"all\")\n            ])\n        ),\n        rangeslider = dict(\n            visible = True\n        ),\n        type = \"date\"\n    )\n)\n\nfig = go.FigureWidget(data = data, layout = layout)\nfig.add_trace(go.Scatter(x = list(plot_df.index), y = list(plot_df[\"Volume\"]), marker_color = 'rgba(83, 117, 253, 1)', name = \"Volume\"))\nfig","698b9d15":"plot_df = df[df.company_name == \"GOOGLE\"]\ntrace1 = go.Scatter(x = list(plot_df.index), y = list(plot_df[\"Adj Close\"]), marker_color = 'rgba(239, 0, 0, 1)', name = \"Adj Close\")\n\ndata1 = [trace1]\nlayout1 = dict(\n    title = \"Performance timeline -- Adj Close Price, GOOGL\",\n    xaxis = dict(\n        rangeselector = dict(\n            buttons = list([\n                dict(count = 1, \n                    label = \"1m\",\n                    step = \"month\", \n                    stepmode = \"backward\"),\n                dict(count = 6,\n                    label = \"6m\",\n                    step = \"month\",\n                    stepmode = \"backward\"),\n                dict(count = 1,\n                    label = \"YTD\",\n                    step = \"year\",\n                    stepmode = \"todate\"),\n                dict(count = 1, \n                    label = \"1y\", \n                    step = \"year\",\n                    stepmode = \"backward\"),\n                dict(step = \"all\")\n            ])\n        ),\n        rangeslider = dict(\n            visible = True\n        ),\n        type = \"date\"\n    )\n)\n\nfig = go.FigureWidget(data = data1, layout = layout1)\nfig.add_trace(go.Scatter(x = list(plot_df.index), y = list(plot_df[\"Volume\"]), marker_color = 'rgba(253, 148, 148, 1)', name = \"Volume\"))\nfig","498be77f":"plot_df = df[df.company_name == \"AMAZON\"]\ntrace1 = go.Scatter(x = list(plot_df.index), y = list(plot_df[\"Adj Close\"]), marker_color = 'rgba(0, 0, 0, 1)', name = \"Adj Close\")\n\ndata = [trace1]\nlayout = dict(\n    title = \"Performance timeline -- Adj Close Price, AMZN\",\n    xaxis = dict(\n        rangeselector = dict(\n            buttons = list([\n                dict(count = 1, \n                    label = \"1m\",\n                    step = \"month\", \n                    stepmode = \"backward\"),\n                dict(count = 6,\n                    label = \"6m\",\n                    step = \"month\",\n                    stepmode = \"backward\"),\n                dict(count = 1,\n                    label = \"YTD\",\n                    step = \"year\",\n                    stepmode = \"todate\"),\n                dict(count = 1, \n                    label = \"1y\", \n                    step = \"year\",\n                    stepmode = \"backward\"),\n                dict(step = \"all\")\n            ])\n        ),\n        rangeslider = dict(\n            visible = True\n        ),\n        type = \"date\"\n    )\n)\n\nfig = go.FigureWidget(data = data, layout = layout)\nfig.add_trace(go.Scatter(x = list(plot_df.index), y = list(plot_df[\"Volume\"]), marker_color = 'rgba(109, 109, 109, 1)', name = \"Volume\"))\nfig","568e72ed":"plot_df = df[df.company_name == \"MICROSOFT\"]\ntrace1 = go.Scatter(x = list(plot_df.index), y = list(plot_df[\"Adj Close\"]), marker_color = 'rgba(0, 142, 71, 1)', name = \"Adj Close\")\n\ndata = [trace1]\nlayout = dict(\n    title = \"Performance timeline -- Adj Close Price, MSFT\",\n    xaxis = dict(\n        rangeselector = dict(\n            buttons = list([\n                dict(count = 1, \n                    label = \"1m\",\n                    step = \"month\", \n                    stepmode = \"backward\"),\n                dict(count = 6,\n                    label = \"6m\",\n                    step = \"month\",\n                    stepmode = \"backward\"),\n                dict(count = 1,\n                    label = \"YTD\",\n                    step = \"year\",\n                    stepmode = \"todate\"),\n                dict(count = 1, \n                    label = \"1y\", \n                    step = \"year\",\n                    stepmode = \"backward\"),\n                dict(step = \"all\")\n            ])\n        ),\n        rangeslider = dict(\n            visible = True\n        ),\n        type = \"date\"\n    )\n)\n\nfig = go.FigureWidget(data = data, layout = layout)\nfig.add_trace(go.Scatter(x = list(plot_df.index), y = list(plot_df[\"Volume\"]), marker_color = 'rgba(17, 252, 135, 1)', name = \"Volume\"))\nfig","57e04041":"# Moving average by 10, 20 and 50 days\nmoving_averages = [10, 20, 50]\n\nfor value in moving_averages:\n    for company in company_list:\n        col_name = f\"MA for {value} days\"\n        company[col_name] = company[\"Adj Close\"].rolling(value).mean()","9179e3b8":"trace1 = go.Scatter(x = list(AAPL.index), y = list(AAPL[\"MA for 10 days\"]), marker_color = 'rgba(0, 39, 198, 1)', name = \"MA 10\")\n\ndata = [trace1]\nlayout = dict(\n    title = \"Performance timeline -- Moving Average of Adj Close, AAPL\",\n    paper_bgcolor = \"rgba(0, 0, 0, 0)\",\n    plot_bgcolor = \"rgba(0, 0, 0, 0)\",\n    xaxis = dict(\n        showgrid = False,\n        rangeselector = dict(\n            buttons = list([\n                dict(count = 1, \n                    label = \"1m\",\n                    step = \"month\", \n                    stepmode = \"backward\"),\n                dict(count = 6,\n                    label = \"6m\",\n                    step = \"month\",\n                    stepmode = \"backward\"),\n                dict(count = 1,\n                    label = \"YTD\",\n                    step = \"year\",\n                    stepmode = \"todate\"),\n                dict(count = 1, \n                    label = \"1y\", \n                    step = \"year\",\n                    stepmode = \"backward\"),\n                dict(step = \"all\")\n            ])\n        ),\n        rangeslider = dict(\n            visible = True\n        ),\n        type = \"date\"\n    ),\n    yaxis = dict(showgrid = False)\n)\n\nfig = go.FigureWidget(data = data, layout = layout)\nfig.add_trace(go.Scatter(x = list(AAPL.index), y = list(AAPL[\"MA for 20 days\"]), marker_color = 'rgba(69, 105, 252, 1)', name = \"MA 20\"))\nfig.add_trace(go.Scatter(x = list(AAPL.index), y = list(AAPL[\"MA for 50 days\"]), marker_color = 'rgba(163, 181, 254, 1)', name = \"MA 50\"))\nfig","67d1a73c":"trace1 = go.Scatter(x = list(GOOG.index), y = list(GOOG[\"MA for 10 days\"]), marker_color = 'rgba(239, 0, 0, 1)', name = \"MA 10\")\n\ndata = [trace1]\nlayout = dict(\n    title = \"Performance timeline -- Moving Average of Adj Close, GOOG\",\n    paper_bgcolor = \"rgba(0, 0, 0, 0)\",\n    plot_bgcolor = \"rgba(0, 0, 0, 0)\",\n    xaxis = dict(\n        rangeselector = dict(\n            buttons = list([\n                dict(count = 1, \n                    label = \"1m\",\n                    step = \"month\", \n                    stepmode = \"backward\"),\n                dict(count = 6,\n                    label = \"6m\",\n                    step = \"month\",\n                    stepmode = \"backward\"),\n                dict(count = 1,\n                    label = \"YTD\",\n                    step = \"year\",\n                    stepmode = \"todate\"),\n                dict(count = 1, \n                    label = \"1y\", \n                    step = \"year\",\n                    stepmode = \"backward\"),\n                dict(step = \"all\")\n            ])\n        ),\n        rangeslider = dict(\n            visible = True\n        ),\n        type = \"date\"\n    )\n)\n\nfig = go.FigureWidget(data = data, layout = layout)\nfig.add_trace(go.Scatter(x = list(GOOG.index), y = list(GOOG[\"MA for 20 days\"]), marker_color = 'rgba(252, 99, 99, 1)', name = \"MA 20\"))\nfig.add_trace(go.Scatter(x = list(GOOG.index), y = list(GOOG[\"MA for 50 days\"]), marker_color = 'rgba(254, 184, 184, 1)', name = \"MA 50\"))\nfig","7cd9d6d5":"trace1 = go.Scatter(x = list(AMZN.index), y = list(AMZN[\"MA for 10 days\"]), marker_color = 'rgba(0, 0, 0, 1)', name = \"MA 10\")\n\ndata = [trace1]\nlayout = dict(\n    title = \"Performance timeline -- Moving Average of Adj Close, AMZN\",\n    paper_bgcolor = \"rgba(0, 0, 0, 0)\",\n    plot_bgcolor = \"rgba(0, 0, 0, 0)\",\n    xaxis = dict(\n        rangeselector = dict(\n            buttons = list([\n                dict(count = 1, \n                    label = \"1m\",\n                    step = \"month\", \n                    stepmode = \"backward\"),\n                dict(count = 6,\n                    label = \"6m\",\n                    step = \"month\",\n                    stepmode = \"backward\"),\n                dict(count = 1,\n                    label = \"YTD\",\n                    step = \"year\",\n                    stepmode = \"todate\"),\n                dict(count = 1, \n                    label = \"1y\", \n                    step = \"year\",\n                    stepmode = \"backward\"),\n                dict(step = \"all\")\n            ])\n        ),\n        rangeslider = dict(\n            visible = True\n        ),\n        type = \"date\"\n    )\n)\n\nfig = go.FigureWidget(data = data, layout = layout)\nfig.add_trace(go.Scatter(x = list(AMZN.index), y = list(AMZN[\"MA for 20 days\"]), marker_color = 'rgba(109, 109, 109, 1)', name = \"MA 20\"))\nfig.add_trace(go.Scatter(x = list(AMZN.index), y = list(AMZN[\"MA for 50 days\"]), marker_color = 'rgba(188, 188, 188, 1)', name = \"MA 50\"))\nfig","6812e925":"trace1 = go.Scatter(x = list(MSFT.index), y = list(MSFT[\"MA for 10 days\"]), marker_color = 'rgba(0, 142, 71, 1)', name = \"MA 10\")\n\ndata = [trace1]\nlayout = dict(\n    title = \"Performance timeline -- Moving Average of Adj Close, MSFT\",\n    paper_bgcolor = \"rgba(0, 0, 0, 0)\",\n    plot_bgcolor = \"rgba(0, 0, 0, 0)\",\n    xaxis = dict(\n        rangeselector = dict(\n            buttons = list([\n                dict(count = 1, \n                    label = \"1m\",\n                    step = \"month\", \n                    stepmode = \"backward\"),\n                dict(count = 6,\n                    label = \"6m\",\n                    step = \"month\",\n                    stepmode = \"backward\"),\n                dict(count = 1,\n                    label = \"YTD\",\n                    step = \"year\",\n                    stepmode = \"todate\"),\n                dict(count = 1, \n                    label = \"1y\", \n                    step = \"year\",\n                    stepmode = \"backward\"),\n                dict(step = \"all\")\n            ])\n        ),\n        rangeslider = dict(\n            visible = True\n        ),\n        type = \"date\"\n    )\n)\n\nfig = go.FigureWidget(data = data, layout = layout)\nfig.add_trace(go.Scatter(x = list(MSFT.index), y = list(MSFT[\"MA for 20 days\"]), marker_color = 'rgba(2, 242, 122, 1)', name = \"MA 20\"))\nfig.add_trace(go.Scatter(x = list(MSFT.index), y = list(MSFT[\"MA for 50 days\"]), marker_color = 'rgba(128, 254, 191, 1)', name = \"MA 50\"))\nfig","761567e7":"import plotly.figure_factory as ff","1e55fedb":"for company in company_list:\n    company[\"daily_returns\"] = company[\"Adj Close\"].pct_change()","eceb8b21":"fig = plotly.subplots.make_subplots(rows = 2, cols = 2, subplot_titles = [\"AAPL\", \"GOOG\", \"MSFT\", \"AMZN\"])\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x = AAPL.daily_returns, name = \"AAPL\"))\nfig.add_trace(go.Histogram(x = GOOG.daily_returns, name = \"GOOG\"))\nfig.add_trace(go.Histogram(x = AMZN.daily_returns, name = \"AMZN\"))\nfig.add_trace(go.Histogram(x = MSFT.daily_returns, name = \"MSFT\"))\n\nfig.update_layout(barmode = \"relative\", title = \"Daily Returns Distribution\",\n                 plot_bgcolor = \"rgba(0, 0, 0, 0)\")\nfig.show()\n","fa20d69a":"# Extracting only the companies and their resepective closing stock prices.\nclosing_prices = DataReader(study_list, \"yahoo\", start, end)[\"Adj Close\"]\n\nclosing_prices.head()","817a7256":"closing_prices.columns","883e93a6":"# Getting the daily returns\nreturns_df = closing_prices.pct_change()","5f5b1242":"fig = px.scatter_matrix(returns_df)\nfig.update_traces(diagonal_visible = False )\nfig.show()","79fc68a5":"fig = px.imshow(returns_df.corr())\nfig.update_xaxes(side = \"top\", title_font_family = \"Arial\")\nfig.update_layout(title = \"Correlation of Daily Returns between Companies\",\n                 font_family = \"Arial\",\n                 legend_title = \"Correlation\",\n                 xaxis_title = \"\",\n                 yaxis_title = \"\",\n                 )\nfig.show()","3c298df4":"fig = px.imshow(closing_prices.corr())\nfig.update_xaxes(side = \"top\", title_font_family = \"Arial\")\nfig.update_layout(title = \"Correlation of Closing Prices between Companies\",\n                 font_family = \"Arial\",\n                 legend_title = \"Correlation\",\n                 xaxis_title = \"\",\n                 yaxis_title = \"\",\n                 )\nfig.show()","855aa22a":"df = DataReader(\"MSFT\", data_source = \"yahoo\", start = \"2012-01-01\", end = datetime.now())\ndf.tail()","1992e816":"trace1 = go.Scatter(x = list(df.index), y = list(df[\"Close\"]), marker_color = 'rgba(0, 142, 71, 1)', name = \"Adj Close\")\n\ndata = [trace1]\nlayout = dict(\n    title = \"Performance timeline -- Closing Price 2012 to 2021, MSFT\",\n    xaxis = dict(\n        rangeselector = dict(\n            buttons = list([\n                dict(count = 1, \n                    label = \"1m\",\n                    step = \"month\", \n                    stepmode = \"backward\"),\n                dict(count = 6,\n                    label = \"6m\",\n                    step = \"month\",\n                    stepmode = \"backward\"),\n                dict(count = 1,\n                    label = \"YTD\",\n                    step = \"year\",\n                    stepmode = \"todate\"),\n                dict(count = 1, \n                    label = \"1y\", \n                    step = \"year\",\n                    stepmode = \"backward\"),\n                dict(step = \"all\")\n            ])\n        ),\n        rangeslider = dict(\n            visible = True\n        ),\n        type = \"date\"\n    )\n)\n\nfig = go.FigureWidget(data = data, layout = layout)\nfig","91a6d85c":"# Step 1\ndata = df.filter(['Close'])\ndataset = data.values","dd0ab281":"# Step 2 \nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range = (0,1))\nscaled_array = scaler.fit_transform(dataset)\n\nscaled_array","0533a3e8":"scaled_array.shape","67fac7e7":"# Step 3\ntraining_ratio = int(len(dataset) * 0.8)\ntraining_ratio","f4d667bb":"train_array = scaled_array[0: int(training_ratio), :]\nlen(train_array)","56208c22":"x_train = []\ny_train = []\nfor i in range(60, len(train_array)):\n    x_train.append(train_array[i-60: i, 0]) #first 749 values to x_train\n    y_train.append(train_array[i, 0]) #remaining 60 values to y_train\n    if i <= 61:\n        print(x_train)\n        print(y_train)\n        #print()","655d5e02":"x_train, y_train = np.array(x_train), np.array(y_train)","8eee7c06":"y_train.shape","5e62d2b9":"#%load_ext tensorboard\n#%tensorboard --logdir logs","d45b7371":"x_train.shape","31109f1b":"x_train = x_train.reshape(x_train.shape[0], x_train.shape[1], 1)","5b15d9c5":"test_array = scaled_array[training_ratio - 60:, :]\n\nx_test = []\n\nfor i in range(60, len(test_array)):\n    x_test.append(test_array[i-60: i, 0])\n    \nx_test = np.array(x_test)\n\nx_test = x_test.reshape(x_test.shape[0], x_test.shape[1], 1)","af68563c":"import tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM","0bd9cd8f":"# Step 4\n\nmodel = Sequential()\nmodel.add(LSTM(256, \n               input_shape = (x_train.shape[1], 1),\n               return_sequences = True)) # Whether to return the hidden state output for each input time step, further details:https:\/\/machinelearningmastery.com\/return-sequences-and-return-states-for-lstms-in-keras\/\nmodel.add(LSTM(128, return_sequences = False))\n#model.add(LSTM(64, return_sequences = False))\nmodel.add(Dense(32))\nmodel.add(Dense(1))\n\noptimizer = tf.keras.optimizers.RMSprop(learning_rate = 0.001, name = \"RMSprop\")\nmodel.compile(optimizer = optimizer, loss =  \"mean_squared_error\")\n\nmodel.fit(x_train, y_train, batch_size = 10, epochs = 3)","b68369c6":"# Step 5\npredictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions) # This reverses the scaling we did onto the prices back to their actual values\npredictions","8b0f2c86":"train = data[:training_ratio]\nvalid = data[training_ratio:]\nvalid[\"Predictions\"] = predictions","6f4b3f28":"trace1 = go.Scatter(x = list(train.index), y = list(train.Close), marker_color = 'rgba(239, 0, 0, 1)', name = \"Close\")\n\ndata1 = [trace1]\nlayout1 = dict(\n    title = \"Model Performance, Prediction vs Actual Closing Prices\",\n    xaxis = dict(\n        rangeselector = dict(\n            buttons = list([\n                dict(count = 1, \n                    label = \"1m\",\n                    step = \"month\", \n                    stepmode = \"backward\"),\n                dict(count = 6,\n                    label = \"6m\",\n                    step = \"month\",\n                    stepmode = \"backward\"),\n                dict(count = 1,\n                    label = \"YTD\",\n                    step = \"year\",\n                    stepmode = \"todate\"),\n                dict(count = 1, \n                    label = \"1y\", \n                    step = \"year\",\n                    stepmode = \"backward\"),\n                dict(step = \"all\")\n            ])\n        ),\n        rangeslider = dict(\n            visible = True\n        ),\n        type = \"date\"\n    )\n)\n\nfig = go.FigureWidget(data = data1, layout = layout1)\nfig.add_trace(go.Scatter(x = list(valid.index), y = list(valid.Predictions), marker_color = 'rgba(0, 39, 198, 1)', name = \"Predictions\"))\nfig.add_trace(go.Scatter(x = list(valid.index), y = list(valid.Close), marker_color = 'rgba(153, 244, 255, 1)', name = \"Close\"))\nfig","98d1eb84":"Steps:\n1. Create a numpy array of our closing prices (will be fed into the model, same process as most ML models employment).\n2. Scale Data\n3. Create Train\/Test\/Valid arrays \n4. Apply model onto train data\n5. Apply model to predict with test data.\n6. Compare prediction with validation data","efdad83a":"Testing set","a2a129c8":"Microsoft yields the highest daily returns, followed by Amazon, Google, and lastly, Apple.","4bb1f05a":"### Libraries","db44f42e":"#### Getting the daily returns is as easy as applying pandas.pct_change function onto the Adj Closing price(columns)","7f24d638":"> ### pandas_datareader.data.DataReader:\n> extracts data from various Internet sources into a pandas DataFrame.\n\n> ### globals()\n> The globals() method returns the dictionary of the current global symbol table\n> A symbol table is a data structure maintained by a compiler which contains all necessary information about the program, including variable names, methods, classes etc.","d6f8dbe8":"### Data extraction from Yahoo Finance","7b4fbcc5":"## Predicting the Adj Closing Price for MSFT inc:","07dab3f7":"Training set","644f8ec0":"Note: details about input_shape for LSTM: https:\/\/machinelearningmastery.com\/reshape-input-data-long-short-term-memory-networks-keras\/ \n- Input to every LSTM layer MUST be 3-dimensional, which are Samples, Time Steps 7 Features. This is enforced even if specific dimensionas of the array containa single value (e.g. one sample or feature)\n- if input shape is (50, 2), it means the alyer expects 1 or more samples, 50 time steps, and 2 features."}}