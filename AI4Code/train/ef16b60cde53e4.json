{"cell_type":{"2afdc157":"code","358caa39":"code","1f926d9f":"code","b500693a":"code","1d8ebf38":"code","908c8a43":"code","5981fcea":"code","32335ef9":"code","95a74c3f":"code","3721d453":"code","f9f6ac1f":"code","5ae01495":"code","e44e2c8c":"code","b4f5b004":"code","876a9f5f":"code","2f175f5c":"code","3b135eae":"code","5f884056":"code","fb242eeb":"code","f2646afc":"code","77695e54":"code","0f3a62c6":"code","1ec65c06":"code","23fc1b3e":"code","2052144c":"code","22637f23":"code","71ce1e3c":"code","7da20609":"code","244f02da":"code","36941c4a":"code","d78a0390":"code","e47e392e":"code","2c9e7aa7":"code","22160895":"code","a09ea5ed":"code","fa1639d3":"code","d1d2ae6a":"code","91418714":"code","f5120b8e":"code","ff8ca9b8":"code","17e0d4d2":"code","32c8c2dd":"code","e1ea44cd":"code","ebda546b":"code","933b5ab7":"code","c7d8e811":"code","e944aa62":"code","211a28c0":"code","69422e73":"code","3e44d60e":"code","00fc85b9":"code","d36a229c":"code","f69bd16b":"code","8e50468f":"code","c3f3bb79":"code","4ec3bea4":"code","7a2ba676":"code","eb60a518":"code","4b44c9a5":"code","f7f9fdd5":"code","7012c126":"code","1e8e5a25":"code","0fe624e0":"code","c98f4a04":"code","6942a51f":"code","f33b3a75":"code","3f100abc":"code","9be03ab5":"code","b197e83d":"code","7b9d2d93":"code","7a8a1768":"code","c7f7781d":"code","e9916cac":"code","eb4ab2b2":"code","cc8b01c4":"code","edea0fba":"code","a2cb31fb":"markdown","ba874443":"markdown","75f7ded6":"markdown","14adcb2e":"markdown","5ea6eb5d":"markdown","8496b6a6":"markdown","e85c8e00":"markdown","e829988b":"markdown","0da714dc":"markdown","24aa04f3":"markdown","320180ee":"markdown","3a84a3d3":"markdown","d20ffd11":"markdown","02f5d6ac":"markdown","ca381968":"markdown","e00d972c":"markdown","511e2ba8":"markdown","4d0ec05b":"markdown","4d3af753":"markdown","7f9c7bf7":"markdown","d038d04d":"markdown","13318b45":"markdown","a6a0e2f7":"markdown","74a0f38f":"markdown","99a72cf2":"markdown","aa2a3e02":"markdown","075a06e0":"markdown","fc0f5574":"markdown","8a08df58":"markdown","25d01046":"markdown","f97bb5a0":"markdown","3e676c1c":"markdown"},"source":{"2afdc157":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')","358caa39":"df = pd.read_csv('\/kaggle\/input\/property-prices-in-tunisia\/Property Prices in Tunisia.csv')","1f926d9f":"#See the first rows of the data\ndf.head()","b500693a":"#Data shape\ndf.shape","1d8ebf38":"#Statistical description\ndf.describe()","908c8a43":"#Null Values\ndf.isnull().sum()","5981fcea":"#See -1 values\n(df==-1).sum()","32335ef9":"#Replace -1 with nan\ndf = df.replace(-1,np.float('nan'))","95a74c3f":"#Drop duplicate rows\ndf.drop_duplicates(keep = 'first', inplace = True) ","3721d453":"#Start with the 'type' column\nprint(df.type.value_counts())","f9f6ac1f":"sns.countplot(data = df, x = 'type')","5ae01495":"#category column\nprint(df.category.nunique())\nprint(df.category.unique())","e44e2c8c":"#A quick barplot\nplt.figure(figsize=(20, 4))\nsns.countplot(data = df, x = 'category', order=df.category.value_counts().index)","b4f5b004":"print(df.city.nunique())\nprint(df.city.unique())","876a9f5f":"plt.figure(figsize=(10, 6))\nsns.countplot(data = df, y = 'city', order = df.city.value_counts().index)","2f175f5c":"print(df.room_count.nunique())\nprint(df.room_count.unique())","3b135eae":"plt.figure(figsize=(16, 4))\nsns.countplot(data = df, x = 'room_count', order = df.room_count.value_counts().index)","5f884056":"print(df.bathroom_count.nunique())\nprint(df.bathroom_count.unique())","fb242eeb":"plt.figure(figsize=(10, 4))\nsns.countplot(data = df, x = 'bathroom_count', order = df.bathroom_count.value_counts().index)","f2646afc":"#Use a density plot\nplt.figure(figsize=(10, 6))\nsns.distplot(df['size'], hist=True, kde=True, \n              color = 'green',bins = 50,\n             kde_kws={'linewidth': 1,'shade': True },\n             hist_kws={'edgecolor':'black'})","77695e54":"#Scatter plot price against the size, with the type as a hue\nplt.figure(figsize=(10, 7))\nsns.scatterplot(data = df , x=\"size\", y=\"price\", hue=\"type\")","0f3a62c6":"#Use a density plot\nplt.figure(figsize=(10, 6))\nsns.distplot(df['price'], hist=False, kde=True, \n              color = 'blue',bins = 50,\n             kde_kws={'linewidth': 1,'shade': True },\n             hist_kws={'edgecolor':'black'})","1ec65c06":"#Scatter plot price against the size, with the type as a hue\nplt.figure(figsize=(10, 7))\nsns.scatterplot(data = df , x=\"size\", y=\"log_price\", hue=\"type\")","23fc1b3e":"#Use a density plot\nplt.figure(figsize=(10, 6))\nsns.distplot(df['log_price'], hist=False, kde=True, \n              color = 'blue',bins = 20,\n             kde_kws={'linewidth': 1,'shade': True },\n             hist_kws={'edgecolor':'black'})","2052144c":"#Require that many non-NA values.\ndf.dropna(thresh = 9, inplace=True)","22637f23":"#A quick barplot again on the category\nplt.figure(figsize=(20, 4))\nsns.countplot(data = df, x = 'category', order=df.category.value_counts().index)","71ce1e3c":"dfVendre = df[df.type == '\u00c0 Vendre']\ndfLouer = df[df.type == '\u00c0 Louer']","7da20609":"print(dfVendre.shape)\nprint(dfLouer.shape)","244f02da":"#Scatter plot price against the size, with the type as a hue\nplt.figure(figsize=(10, 7))\nsns.scatterplot(data = dfVendre , x=\"size\", y=\"log_price\")","36941c4a":"z1 = np.abs(stats.zscore(dfVendre.log_price)) #Calculate Z score for dfVebdre\nz2 = np.abs(stats.zscore(dfLouer.log_price))  #Calculate Z score for dfAchat","d78a0390":"dfVendre_O  = dfVendre[(z1 < 2.5)]\ndfLouer_O  = dfLouer[(z2 < 2.5)]\nprint('Number of removed rows : ',dfVendre.shape[0]-dfVendre_O.shape[0])\nprint('Number of removed rows : ',dfLouer.shape[0]-dfLouer_O.shape[0])","e47e392e":"#Scatter plot price against the size, with the type as a hue\nplt.figure(figsize=(10, 7))\nsns.scatterplot(data = dfVendre_O , x=\"size\", y=\"price\", hue=\"type\")","2c9e7aa7":"#Scatter plot price against the size, with the type as a hue\nplt.figure(figsize=(10, 7))\nsns.scatterplot(data = dfLouer_O , x=\"size\", y=\"price\")","22160895":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.linear_model import LinearRegression,SGDRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error, r2_score\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nimport time","a09ea5ed":"#Separate categorical values and Numerical Values\nCat_Col = ['category','city','type']\nNum_Col = ['room_count','bathroom_count' , 'size']","fa1639d3":"Pipeline = ColumnTransformer([\n    (\"num\", StandardScaler(), Num_Col),\n    ('cat', OrdinalEncoder(),Cat_Col)\n])","d1d2ae6a":"#Separate Target and Features\nXl = dfLouer_O.drop(['price','log_price','region'],axis = 1)\nyl = dfLouer_O.price","91418714":"#Train_test split\nxl_train,xl_test,yl_train,yl_test = train_test_split(Xl,yl,test_size = 0.2,random_state = 42)","f5120b8e":"#Use the pipeline to transform my features\nxl_train = Pipeline.fit_transform(xl_train)\nxl_test = Pipeline.transform(xl_test)","ff8ca9b8":"#Define my models\nnames = [\"Linear Regression\", \"SGD Regressor\", \"Random Forest Regressor\"]\nRegressors = [LinearRegression(),SGDRegressor(),RandomForestRegressor() ]","17e0d4d2":"for name, Reg in zip(names, Regressors):\n  Reg.fit(xl_train, yl_train)\n  preds = Reg.predict(xl_test)\n  MAE = mean_absolute_error(yl_test,preds)\n  R2 = r2_score(yl_test,preds)\n  print (name, ' : mean absolute error  :  ', \"%.2f\" %(MAE), 'R2_Score : ', \"%.2f\" %(R2))","32c8c2dd":"mymodel = RandomForestRegressor()\nmymodel.fit(xl_train,yl_train)","e1ea44cd":"Xl.iloc[[85]]","ebda546b":"yl.iloc[85]","933b5ab7":"mymodel.predict(Pipeline.transform(Xl.iloc[[85]]))","c7d8e811":"#Concat the two dataframes\ndf_final = pd.concat([dfLouer_O,dfVendre_O])","e944aa62":"df_final.head()","211a28c0":"#Features and Target\nX = df_final.drop(['price','log_price','region'],axis = 1)\ny = df_final.price\n#Our Model\nmodel = RandomForestRegressor()","69422e73":"#Train test split\nx_train, x_test, y_train, y_test = train_test_split(X,y,test_size = 0.2, random_state = 100)","3e44d60e":"#Use the pipeline to transform my test features\nx_train = Pipeline.fit_transform(x_train)\nx_test = Pipeline.transform(x_test)","00fc85b9":"model.fit(x_train,y_train)","d36a229c":"#Generate Predictions\npreds = model.predict(x_test)","f69bd16b":"#Evaluation\nresult = (mean_absolute_error(y_test,preds))\nprint(result)","8e50468f":"preds_l = model.predict(xl_test)","c3f3bb79":"result = (mean_absolute_error(yl_test,preds_l))\nprint(result)","4ec3bea4":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nimport time","7a2ba676":"#Initialize my gridsearch parameters\nGrid_par = [\n    {'n_estimators' : [5,10,20,30,50,100] , 'max_features' : [4,5,6]},\n    {'bootstrap': [False], 'n_estimators' : [5,10,20,30,50,100] , 'max_features' : [4,5,6]},\n    {'n_estimators' : [5,10,20,30,50,100] , 'max_features' : [2,3,4],'max_depth' : [10,20,30]},\n    {'bootstrap': [False], 'n_estimators' : [5,10,20,30,50,100] , 'max_features' : [4,5,6],'max_depth' : [10,20,30]}]\n    \nmodel = RandomForestRegressor(n_jobs=-1)","eb60a518":"GridSearch = GridSearchCV(estimator= model , param_grid=Grid_par, cv = 5,\n                         scoring='neg_mean_absolute_error', return_train_score=True)","4b44c9a5":"start = time.time()\nGridSearch.fit(xl_train,yl_train)\nend = time.time()","f7f9fdd5":"print('Time used : ', end - start ,'Second')","7012c126":"results = GridSearch.cv_results_","1e8e5a25":"print('Number of estimators : ' , len(results[\"params\"]))\nfor mean_score, params in zip(results[\"mean_test_score\"], results[\"params\"]):\n    print ((-mean_score),params)","0fe624e0":"-GridSearch.best_score_","c98f4a04":"best = GridSearch.best_estimator_","6942a51f":"best.fit(xl_train,yl_train)","f33b3a75":"preds_grid = best.predict(xl_test)","3f100abc":"mean_absolute_error(yl_test,preds_grid)","9be03ab5":"RandSearch = RandomizedSearchCV(estimator=model, param_distributions=Grid_par, cv = 5 ,\n                               scoring='neg_mean_absolute_error', return_train_score=True,n_iter=20)","b197e83d":"start = time.time()\nRandSearch.fit(xl_train,yl_train)\nend = time.time()","7b9d2d93":"print('Time used : ', end - start ,'Second')","7a8a1768":"Randresult = RandSearch.cv_results_","c7f7781d":"print('Number of estimators : ' , len(Randresult[\"params\"]))\nfor mean_score, params in zip(Randresult[\"mean_test_score\"], Randresult[\"params\"]):\n    print ((-mean_score),params)","e9916cac":"best_rand = RandSearch.best_estimator_","eb4ab2b2":"best_rand.fit(xl_train,yl_train)","cc8b01c4":"rand_preds = best_rand.predict(xl_test)","edea0fba":"mean_absolute_error(yl_test,rand_preds)","a2cb31fb":"#### 'room_count' column","ba874443":"Import necessary things","75f7ded6":"### Before moving to the outlier removal, let's understand some concepts : \n* Standard Deviation or STD : measure of the amount of variation or dispersion of a set of values. A low standard deviation indicates that the values tend to be close to the mean of the set, while a high standard deviation indicates that the values are spread out over a wider range.\n<img src=\"https:\/\/campaign-image.com\/zohocampaigns\/180919000117207004_zc_v14_calculate_a_sample_standard_deviation_3126345_v4_cs_01_5b76f58f46e0fb0050bb4ab2.png\" alt=\"std\" width = '500px'>","14adcb2e":"#### **'type' column**","5ea6eb5d":"'size' column","8496b6a6":"### Now it is up to you to tune the model","e85c8e00":"#### We can see that :\n* The presence of -1 as a value => It is NULL value\n* The number of -1 values is equal in 3 columns\n* The presence of outliers in the data \n* The 'price' varies from 100 to 10e+11, and we can explain it using the fact that our data contains propoerties that are for 'Rent' (\u00c0 Louer) and for 'Sale' (\u00c0 Vendre) in the 'type' column","e829988b":"### Importing Data","0da714dc":"* Interquartile range :  aequal to the difference between 75th and 25th percentiles, or between upper and lower quartiles, IQR = Q\u2083 \u2212 Q\u2081 : A measurement used in statistics of a value's relationship to the mean (average) of a group of values, measured in terms of standard deviations from the mean\n<img src=\"https:\/\/blogs.sas.com\/content\/graphicallyspeaking\/files\/2016\/12\/Box_Key_SG.png\" alt=\"std\" width = '500px'>","24aa04f3":"* Z Score : A measurement used in statistics of a value's relationship to the mean (average) of a group of values, measured in terms of standard deviations from the mean <br>\n<img src=\"https:\/\/www.researchgate.net\/profile\/Petr_Svenda\/publication\/318873062\/figure\/fig3\/AS:568837446012928@1512632823992\/The-relation-of-Z-score-and-p-value-Z-score-is-expressed-in-the-units-of-the-standard.png\" alt=\"std\" width = '500px'>","320180ee":"Here we should evaluate our model differently, we will use the evaluation of dfLouer","3a84a3d3":"### Tuning, yay !","d20ffd11":" ### Randomized","02f5d6ac":"### Data Visualisation ","ca381968":"### Import Librairies","e00d972c":"Let's try to change the model","511e2ba8":"#### 'city' column","4d0ec05b":"'Price' Column","4d3af753":"## Approach 2 : Build a single non linear model","7f9c7bf7":"As you can see, when we use the price, I cannot really see my distribution. We called **Skewed Data**\n<img src='https:\/\/www.mathsisfun.com\/data\/images\/skewed-distribution.svg' alt='skewed data' width = 400px>","d038d04d":"## EDA : Exploratory data analysis","13318b45":"# Tunisian Property price prediction","a6a0e2f7":"#### 'category' column","74a0f38f":"#### 'region' have  high cardinality: 257 distinct values","99a72cf2":"Here come the power of the non linear models, they can see the difference between different types","aa2a3e02":"#### To get the best visualizations, we will replace all -1 values with Null (nan), and we willm drop duplicate rows","075a06e0":"'bathroom_count' column","fc0f5574":"### Let's  try some unit testing","8a08df58":"Before going on, lets delete those null values, there is a high probability that they are all related","25d01046":"## Approach 1 : Build 2 models","f97bb5a0":"First, we create our pipeline, so we can use some function and avoid repetition","3e676c1c":"Split our data based on the column Type"}}