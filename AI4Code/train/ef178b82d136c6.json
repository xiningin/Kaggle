{"cell_type":{"278db870":"code","1e7f682e":"code","2a88a811":"code","27717f42":"code","7998e374":"code","5f95e1f4":"code","f574736c":"code","0059aaf7":"code","440ddb70":"code","e638a055":"markdown","8f3db742":"markdown","6d1cb09c":"markdown","d5d4bbf6":"markdown"},"source":{"278db870":"NGRAMS = 2\nZINCIR_YOLU = '\/kaggle\/working\/zincir.pickle'","1e7f682e":"import re\nfrom sklearn import feature_extraction\nimport numpy as np\nimport pandas as pd\nimport json\nimport pickle\nimport sys\nimport os\nimport time\nfrom typing import Tuple, Dict\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2a88a811":"def remove_html_tags(text: str):\n    \"\"\"Remove html tags from a string\"\"\"\n    clean = re.compile('<.*?>')\n    return re.sub(clean, ' ', text)","27717f42":"def clean_entry(entry: str):\n    \"\"\"Strip content of punctuations.\"\"\"\n#     entry = remove_html_tags(entry)    \n    entry = entry.replace('quot', ' ')\n    entry = re.sub(r'[.,\u2019\u201d\u201c\\':;\\\"\\!\\@\\#\\$\\%\\^\\&\\*\\(\\_\\-\\+\\=\\)]', ' ', entry)\n    return entry","7998e374":"def cumle_uret(sayilar: Dict[Tuple[str], Dict[str, int]], besleme: str = None):\n    \"\"\"Create a sentence from given feed.\n    \n    Arguments:\n    -----------------\n    sayilar: Dict[Tuple[str,]: Dict[str, int]]\n        Frequency dictionary to create markov chain. A sample dict can be as follows:\n        {(\"<BOS>\", \"emre\", \"belozoglu\"): {\"transfer\": 1}, {\"oyuncu\": 1}, {\"<EOS>\": 2}}\n    besleme: str, default None.\n        Feed an input sequence for completion.\n    \n    Returns:\n    -----------------\n    cumle: str\n        Completed sentence\n    olasilik: float\n        Probability of sequence\n    \"\"\"\n    ngrams = len(list(sayilar)[0])\n    if besleme is None:\n        besleme = []\n    else:\n        besleme = besleme.split()\n    cumle = [\"<BOS>\"] * ngrams + besleme\n    son = ''\n    olas\u0131l\u0131k = 1.0\n    while son != '<EOS>':\n        onceki = cumle[-ngrams:]\n\n        mumkunat = sayilar.get(tuple(onceki), {'<EOS>': 1})\n        olasiliklar = pd.Series(mumkunat)\n        olasiliklar \/= olasiliklar.sum()\n\n        son = np.random.choice(olasiliklar.index.tolist(), p=olasiliklar.tolist())\n        olas\u0131l\u0131k *= olasiliklar[son]\n        cumle += [son]\n    return cumle, olas\u0131l\u0131k","5f95e1f4":"with open('\/kaggle\/input\/turkce-spor-yazlar-dataseti\/spor_yazilari.txt', encoding='utf-16') as f:\n    yazi = f.readlines()\nwith open('\/kaggle\/input\/turkce-spor-yazlar-dataseti\/spor_yazilar2.txt', encoding='utf-16') as f:\n    yazi += f.readlines()\nyazi = [y.replace('\\n', '') for y in yazi]\nyazi = [y for y in yazi if y]\nyazi = [clean_entry(y).lower() for y in yazi]\nveri = pd.DataFrame()\nveri['entries.entry'] = yazi","f574736c":"cumleler = veri['entries.entry'].str.lower().str.split().tolist()\ncumleler = [['<BOS>'] * NGRAMS + cumle + ['<EOS>'] for cumle in cumleler]\nNcumleler = len(cumleler)\n\nsayilar = {}\nbasla = time.time()\n\nfor ic, cumle in enumerate(cumleler):\n    if ic % 500 == 0:\n        simdi = time.time()\n        print(f\"{ic}\/{Ncumleler}\", 'cumle islendi. Sure:', round(simdi - basla, 4), 's')\n    sonraki = ''\n    i = 0\n    while sonraki != '<EOS>':\n        onceki = cumle[i:i+NGRAMS]\n        sonraki = cumle[i+NGRAMS]\n        kelime_sayilari = sayilar.setdefault(tuple(onceki), dict())\n        kelime_sayilari[sonraki] = kelime_sayilari.get(sonraki, 0) + 1\n        i += 1\n\nprint('Sozluk kaydediliyor...')\nwith open(ZINCIR_YOLU, 'wb') as f:\n    pickle.dump(sayilar, f)","0059aaf7":"print('Zincir yukleniyor...')\nwith open(ZINCIR_YOLU, 'rb') as f:\n    sayilar = pickle.load(f)\nprint('Basarili.')\nngrams = len(list(sayilar.keys())[1])\nprint('N-gram sayisi:', NGRAMS)","440ddb70":"girdi = None\ngirdi = \"uzaylilar\"\nif girdi is not None:\n    girdi = girdi.lower()\ncumle, olasilik = cumle_uret(sayilar, girdi)\ncumle = cumle[ngrams:-1]\ncumle = \" \".join(cumle)\nprint(\"-----------------------------\")\nprint(cumle)\nprint(\"-----------------------------\")\nprint('log(olasilik)=', np.log10(olasilik))\nprint(\"-----------------------------\")","e638a055":"Experiment with different inputs or set input to `None` to explore how sentences are generated using this Markov chain built on sports news corpus.\n\nHave fun!","8f3db742":"## Utility functions\n\nGiven below a set of utility functions","6d1cb09c":"Use cell below to generate sentences from input. Pass `girdi = None` for no feed.\n\nThe output has the following format:\n\n```\n------------------------\nGenerated sentence\n------------------------\nlog(olasilik) = <log probability of sequence>\n------------------------\n```","d5d4bbf6":"# A sample sentence completion application using Markov chain on Turkish sports news dataset\n\nBelow is a sample markov chain sentence completion application on Turkish sports news dataset. Adjust following parameters to your liking:\n- `NGRAMS` : int, default 2. n-grams to be used in states. Higher n-grams provide more relevant suggestions but may cause degraded richness.\n- `ZINCIR_YOLU` : str, default `\"kaggle\/working\/zincir.pickle\"`. Calculated frequencies are stored in this file and can be downloaded after run."}}