{"cell_type":{"d8b81236":"code","89cf9ae8":"code","cd1ddbb1":"code","7bc9c378":"code","520c4e66":"code","062747e5":"code","83d4ce9e":"code","79cfc0c7":"code","8f08d112":"code","9209eaa5":"code","b57031c3":"code","57b1fb9d":"code","c3919398":"code","f835add4":"code","af4ad316":"code","5984272a":"code","1edad16a":"code","874d6353":"code","e272d59f":"code","5d77e8a3":"code","0aa88dda":"code","a6373590":"code","aea3017a":"code","849c0ffe":"code","409c83c6":"code","b2bcd2d0":"code","78e2ea4a":"code","aa960c61":"code","1ce8e8a4":"code","0b921663":"code","17e01526":"code","003b6801":"code","dce21c12":"code","2b04ed2e":"code","dd05e37d":"code","c50fc1aa":"code","2c93eca2":"code","7512bc5a":"code","8530b254":"code","f86f6586":"code","5019d516":"code","9e54217b":"code","84d447e8":"code","f62a2e3e":"code","eb79d3ed":"code","c153a90f":"code","60d404ea":"code","896774f4":"code","35938531":"code","63ede7e9":"code","174fb26f":"code","9ba2e4cc":"code","248517e7":"code","14a9b460":"code","841b68ee":"code","dbe2fd96":"code","c40ab624":"code","f512b253":"code","696985bc":"code","d5067a32":"code","5d86e426":"code","24c50e1c":"code","f7308ac0":"code","98e0001f":"code","fc7b8835":"code","5f043d6c":"code","4a2c01fd":"code","b8162ff6":"code","70378b0f":"code","785f8798":"code","41771f39":"code","76b73264":"code","daf9a929":"code","b86e9b26":"code","6af93381":"code","8612f5b1":"code","87506b67":"code","b9145623":"code","23c39b08":"code","51f36434":"code","caa1a1b2":"code","ab14c598":"code","ff14a027":"code","5538eda6":"code","90d6e264":"code","678b3dc1":"code","2d70b177":"code","74ad6197":"code","97bc7930":"code","a9f47534":"code","c579c61b":"code","f7aeed97":"code","1cc971d7":"code","fba0ac34":"code","9b844f64":"code","baf72e0d":"code","959c3690":"code","72937890":"code","7b002b24":"code","776659de":"code","2d9f0b24":"code","4f283a66":"code","7f44a0e4":"code","76f828f0":"code","8b9ecf86":"code","20d21802":"code","cd6b6e9d":"code","c2ff49f7":"code","6f67e8f7":"code","a9e05487":"code","c383cef7":"code","6620a43e":"code","c64fd6bb":"code","74d0a043":"code","df7bf90d":"code","d92a11db":"code","bbb0e73b":"code","075cd39f":"code","c1a6d9e3":"code","49a606d3":"code","54befc48":"code","70e318e2":"code","551e8993":"code","d74da5ab":"code","7b7b62a7":"code","98975d2c":"code","aba54327":"code","0eee568a":"code","7b5d71d1":"code","92a478bf":"code","bf8c7483":"code","0c3c3117":"code","2bbf048e":"markdown","e5caaa9f":"markdown","b06d5117":"markdown","b2064f63":"markdown","9f1ee2d3":"markdown","17eb440d":"markdown","1a281c2d":"markdown","cd53a354":"markdown","cc4fdc4b":"markdown","edd265fd":"markdown","4581e4d4":"markdown","def0011c":"markdown","0f127647":"markdown","8f43f00a":"markdown","10227762":"markdown","ad2f2c12":"markdown"},"source":{"d8b81236":"import os\nimport gc\nimport time\nimport numpy as np\nimport pandas as pd\nfrom contextlib import contextmanager\nimport multiprocessing as mp\nfrom functools import partial\nfrom scipy.stats import kurtosis, iqr, skew\nfrom lightgbm import LGBMClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nimport warnings","89cf9ae8":"warnings.simplefilter(action = 'ignore', category = FutureWarning)","cd1ddbb1":"pd.set_option('display.max_rows', 60)\npd.set_option('display.max_columns', 100)","7bc9c378":"debug = True","520c4e66":"num_rows = 30000 if debug else None","062747e5":"NUM_THREADS = 4\nDATA_DIRECTORY = \"..\/input\/\"\nSUBMISSION_SUFIX = \"_model2_04\"","83d4ce9e":"path = DATA_DIRECTORY\nnum_rows = num_rows","79cfc0c7":"train =pd.read_csv(os.path.join(path, 'application_train.csv'), nrows = num_rows)\ntest = pd.read_csv(os.path.join(path, 'application_test.csv'), nrows = num_rows)","8f08d112":"train.head()","9209eaa5":"# imbalance \ud55c Target\uac12 \ud655\uc778\ntrain['TARGET'].value_counts().plot.bar()","b57031c3":"# trian\uacfc test\ub97c append \ub85c \ud569\uce68 (concat\uc73c\ub85c\ub3c4 \ud569\uce60\uc218 \uc788\uc74c)\ndf = train.append(test)\ndf","57b1fb9d":"del train, test;","c3919398":"gc.collect()","f835add4":"# CODE_GENDER\uc5d0 XNA(\uacb0\uce21\uce58)\uac00 4\uac1c\uac00 \uc788\uc73c\ubbc0\ub85c \uacb0\uce21\uce58 \ucc98\ub9ac\ub97c \ud574\uc900\ub2e4\ndf['CODE_GENDER'].value_counts().plot.bar()\ndf = df[df['CODE_GENDER'] != 'XNA']","af4ad316":"# test \uc14b\uacfc train set\uc758 AMT_INCOME_TOTAL\uac1c\uc218\ub97c \ub9de\ucda4\ndf = df[df['AMT_INCOME_TOTAL']< 20000000 ]","5984272a":"# DAYS_EMPLOYED \uc77c\ud55c \ub0a0\uc744 \ub098\ud0c0\ub0b4\ub294 \ub370\uc774\ud130\uc778\ub370 outlier\uac12\uc744 \uc5c6\uc5d0\uc90c -> 365243(\uc758\ubbf8\uc5c6\ub294 \uac12\uc774 11120\uac1c \uc788\uc74c)\n(df['DAYS_EMPLOYED'] == 365243).sum()\n# NAN \uac12\uc73c\ub85c \ucc44\uc6c0 \ndf['DAYS_EMPLOYED'].replace(365243, np.nan, inplace = True)","1edad16a":"# \ud578\ub4dc\ud3f0 \ubc14\uafbc\uc77c\uc790\ub97c \ub098\ud0c0\ub0b4\ub294 \uac12\uc778\ub370 outlier \uac12\uc744 \uc5c6\uc5d0\uc90c -> 0(\uc758\ubbf8\uc5c6\ub294 \uac12\uc744 NAN\uc73c\ub85c \ucc98\ub9ac)\n(df['DAYS_LAST_PHONE_CHANGE']==0).sum()\ndf['DAYS_LAST_PHONE_CHANGE'].replace(0, np.nan, inplace = True)","874d6353":"# docs \uc5d0  FLAG_DOC column \uc744 \ubaa8\ub450 \uc800\uc7a5 -> \uc720\ud55c\ub2d8 EDA\ub97c \ucc38\uace0\ud558\uba74 FLAG_DOC\uc758 \uac12\uc774 0~3 \uc73c\ub85c \ub098\ud0c0\ub098 \uc788\uae30 \ub54c\ubb38\ndocs = [f for f in df.columns if 'FLAG_DOC' in f]","e272d59f":"df['DOCUMENT_COUNT'] = df[docs].sum(axis=1)","5d77e8a3":"df['DOCUMENT_COUNT'].hist()","0aa88dda":"# kurtosis (\ubd84\ud3ec\uac00 \uc5b4\ub5bb\uac8c \ub418\uc5b4\uc788\ub294\uac00\ub97c \ud655\uc778\ud558\ub294 \ud1b5\uacc4\ubc29\ubc95)\n# \ub300\ubd80\ubd84\uc774 \ud2b9\uc815\uac12\uc73c\ub85c \ubab0\ub824\uc788\ub294\uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc74c\ndf[docs].kurtosis(axis = 1).hist()","a6373590":"df['NEW_DOC_KURT'] = df[docs].kurtosis(axis=1)","aea3017a":"# DAYS_BIRTH \ub77c\ub294 \uac12\uc740 \ud0dc\uc5b4\ub09c \ub0a0\uc778\ub370 \ud574\ub2f9\uac12\uc740 \uc74c\uc218\uc774\uace0, \uc815\ud655\ud55c \uc218\uce58\uac00 \uc544\ub2c8\uae30 \ub54c\ubb38\uc5d0 \uc544\ub798\uc640 \uac19\uc740 \ud568\uc218\ub85c \uac12\uc744 \ucc98\ub9ac\ud55c\ub2e4\ndf['DAYS_BIRTH']","849c0ffe":"def get_age_label(days_birth):\n    \"\"\" Return the age group label (int). \"\"\"\n    age_years = -days_birth \/ 365\n    if age_years < 27: return 1\n    elif age_years < 40: return 2\n    elif age_years < 50: return 3\n    elif age_years < 65: return 4\n    elif age_years < 99: return 5\n    else: return 0","409c83c6":"# apply \uc640 lambda \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec df\uc5d0 \uc801\uc6a9\ndf['AGE_RANGE'] = df['DAYS_BIRTH'].apply(lambda x: get_age_label(x))","b2bcd2d0":"# df['EXT_SOURCE_1'] , df['EXT_SOURCE_2'] , df['EXT_SOURCE_3'] \uac12\ub4e4\uc740 EDA\uc5d0\uc11c \ud56d\uc0c1 \uc88b\uc740\uac12\uc744 \ubcf4\uc5ec\uc654\uc73c\ubbc0\ub85c \ubb54\uc9c4\ubab0\ub77c\ub3c4 \ub2e4 \uacf1\ud574\uc11c \ud30c\uc0dd\ubcc0\uc218\uc5d0 \uc800\uc7a5\ndf['EXT_SOURCE_PROD']=df['EXT_SOURCE_1'] * df['EXT_SOURCE_2'] * df['EXT_SOURCE_3'] ","78e2ea4a":"# \uc5b4\ub5a4 \uc0ac\ub78c\uc774 \uc774 \uac12\uc774 \uac00\uc7a5 \uc88b\ub2e4\uace0 \ud574\uc11c \uac00\uc838\ub2e4 \uc500..\u314b\ndf['EXT_SOURCE_WEIGHTED']=df['EXT_SOURCE_1'] * 2 + df['EXT_SOURCE_2'] * 1 + df['EXT_SOURCE_3'] * 3","aa960c61":"np.warnings.filterwarnings('ignore', r'All-NaN (slice|axis) encountered')","1ce8e8a4":"# eval \uc744 \uc0ac\uc6a9\ud574\uc11c \ubc18\ubcf5\uc791\uc5c5\uc744 \ud574\uacb0\ud568\nfor function_name in ['min', 'max', 'mean', 'nanmedian', 'var']:\n    feature_name = 'EXT_SOURCES_{}'.format(function_name.upper())\n    df[feature_name] = eval('np.{}'.format(function_name))(df[['EXT_SOURCE_1', 'EXT_SOURCE_2','EXT_SOURCE_3']], axis =1)","0b921663":"df","17e01526":"# \uc5f0\uae08\ubcf4\ud5d8\ub2f9 \uc735\uc790(\ube5a)\ub97c \uad6c\ud55c \ud30c\uc0dd\ubcc0\uc218\ub97c \uc0dd\uc131\ndf['CREDIT_TO_ANNUITY_RATIO'] = df['AMT_CREDIT'] \/ df['AMT_ANNUITY']\n# \uc0c1\ud488\uac00\uaca9\ub2f9 \uc735\uc790(\ube5a)\ub97c \uad6c\ud55c \ud30c\uc0dd\ubcc0\uc218\ub97c \uc0dd\uc131\ndf['CREDIT_TO_GOODS_RATIO'] = df['AMT_CREDIT'] \/ df['AMT_GOODS_PRICE']","003b6801":"df['ANNUITY_TO_INCOME_RATIO'] = df['AMT_ANNUITY'] \/ df['AMT_INCOME_TOTAL']\ndf['CREDIT_TO_INCOME_RATIO'] = df['AMT_CREDIT'] \/ df['AMT_INCOME_TOTAL']\ndf['INCOME_TO_EMPLOYED_RATIO'] = df['AMT_INCOME_TOTAL'] \/ df['DAYS_EMPLOYED']\ndf['INCOME_TO_BIRTH_RATIO'] = df['AMT_INCOME_TOTAL'] \/ df['DAYS_BIRTH']","dce21c12":"df['EMPLOYED_TO_BIRTH_RATIO'] = df['DAYS_EMPLOYED'] \/ df['DAYS_BIRTH']\ndf['ID_TO_BIRTH_RATIO'] = df['DAYS_ID_PUBLISH'] \/ df['DAYS_BIRTH']\ndf['CAR_TO_BIRTH_RATIO'] = df['OWN_CAR_AGE'] \/ df['DAYS_BIRTH']\ndf['CAR_TO_EMPLOYED_RATIO'] = df['OWN_CAR_AGE'] \/ df['DAYS_EMPLOYED']\ndf['PHONE_TO_BIRTH_RATIO'] = df['DAYS_LAST_PHONE_CHANGE'] \/ df['DAYS_BIRTH']","2b04ed2e":"group = ['ORGANIZATION_TYPE', 'NAME_EDUCATION_TYPE', 'OCCUPATION_TYPE', 'AGE_RANGE', 'CODE_GENDER']","dd05e37d":"df, group_cols, counted, agg_name = df, group, 'EXT_SOURCES_MEAN','GROUP_EXT_SOURCES_MEDIAN'","c50fc1aa":"df[group_cols + [counted]]","2c93eca2":"df[group_cols + [counted]].groupby(group_cols)[counted].median().reset_index()","7512bc5a":"gp = df[group_cols + [counted]].groupby(group_cols)[counted].median().reset_index().rename(columns = {counted:agg_name})\ngp","8530b254":"df = df.merge(gp, on = group_cols , how = 'left')\ndf","f86f6586":"agg = {}\nagg['counted'] = {'max','min','median','std','mean'}","5019d516":"F = df[group_cols + [counted]].groupby(group_cols)[counted].agg(agg).reset_index()","9e54217b":"# aggregate\uc744 \ud65c\uc6a9\ud55c \uac12\uc5d0 \uc774\ub984 \ub123\uae30\nF.columns = [''.join(col).strip() for col in F.columns.values]\nF","84d447e8":"def do_mean(df, group_cols, counted, agg_name):\n    gp = df[group_cols + [counted]].groupby(group_cols)[counted].mean().reset_index().rename(\n        columns={counted: agg_name})\n    df = df.merge(gp, on=group_cols, how='left')\n    del gp\n    gc.collect()\n    return df\n\n\ndef do_median(df, group_cols, counted, agg_name):\n    gp = df[group_cols + [counted]].groupby(group_cols)[counted].median().reset_index().rename(\n        columns={counted: agg_name})\n    df = df.merge(gp, on=group_cols, how='left')\n    del gp\n    gc.collect()\n    return df\n\n\ndef do_std(df, group_cols, counted, agg_name):\n    gp = df[group_cols + [counted]].groupby(group_cols)[counted].std().reset_index().rename(\n        columns={counted: agg_name})\n    df = df.merge(gp, on=group_cols, how='left')\n    del gp\n    gc.collect()\n    return df\n\n\ndef do_sum(df, group_cols, counted, agg_name):\n    gp = df[group_cols + [counted]].groupby(group_cols)[counted].sum().reset_index().rename(\n        columns={counted: agg_name})\n    df = df.merge(gp, on=group_cols, how='left')\n    del gp\n    gc.collect()\n    return df","f62a2e3e":"    df = do_median(df, group, 'EXT_SOURCES_MEAN', 'GROUP_EXT_SOURCES_MEDIAN')\n    df = do_std(df, group, 'EXT_SOURCES_MEAN', 'GROUP_EXT_SOURCES_STD')\n    df = do_mean(df, group, 'AMT_INCOME_TOTAL', 'GROUP_INCOME_MEAN')\n    df = do_std(df, group, 'AMT_INCOME_TOTAL', 'GROUP_INCOME_STD')\n    df = do_mean(df, group, 'CREDIT_TO_ANNUITY_RATIO', 'GROUP_CREDIT_TO_ANNUITY_MEAN')\n    df = do_std(df, group, 'CREDIT_TO_ANNUITY_RATIO', 'GROUP_CREDIT_TO_ANNUITY_STD')\n    df = do_mean(df, group, 'AMT_CREDIT', 'GROUP_CREDIT_MEAN')\n    df = do_mean(df, group, 'AMT_ANNUITY', 'GROUP_ANNUITY_MEAN')\n    df = do_std(df, group, 'AMT_ANNUITY', 'GROUP_ANNUITY_STD')","eb79d3ed":"#\ub77c\ubca8 \uc778\ucf54\ub354 \ud568\uc218 \uc0ac\uc6a9, sklearn \uc758 labelencoder \ubcf4\ub2e4 pandas\uc758 factorize\uac00 \ub354 \ube60\ub984\ndef label_encoder(df, categorical_columns=None):\n    \"\"\"Encode categorical values as integers (0,1,2,3...) with pandas.factorize. \"\"\"\n    if not categorical_columns:\n        categorical_columns = [col for col in df.columns if df[col].dtype == 'object']\n    for col in categorical_columns:\n        df[col], uniques = pd.factorize(df[col])\n    return df, categorical_columns","c153a90f":"df, le_encoded_cols = label_encoder(df, None)","60d404ea":"# EDA\ub97c \ud1b5\ud574 \ub098\uc628 \uacb0\uacfc\uac12\uc744 \ubcf4\uace0 \ud544\uc694\uc5c6\ub294 column \ub4e4\uc744 \uc0ad\uc81c\ndef drop_application_columns(df):\n    \"\"\" Drop features based on permutation feature importance. \"\"\"\n    drop_list = [\n        'CNT_CHILDREN', 'CNT_FAM_MEMBERS', 'HOUR_APPR_PROCESS_START',\n        'FLAG_EMP_PHONE', 'FLAG_MOBIL', 'FLAG_CONT_MOBILE', 'FLAG_EMAIL', 'FLAG_PHONE',\n        'FLAG_OWN_REALTY', 'REG_REGION_NOT_LIVE_REGION', 'REG_REGION_NOT_WORK_REGION',\n        'REG_CITY_NOT_WORK_CITY', 'OBS_30_CNT_SOCIAL_CIRCLE', 'OBS_60_CNT_SOCIAL_CIRCLE',\n        'AMT_REQ_CREDIT_BUREAU_DAY', 'AMT_REQ_CREDIT_BUREAU_MON', 'AMT_REQ_CREDIT_BUREAU_YEAR', \n        'COMMONAREA_MODE', 'NONLIVINGAREA_MODE', 'ELEVATORS_MODE', 'NONLIVINGAREA_AVG',\n        'FLOORSMIN_MEDI', 'LANDAREA_MODE', 'NONLIVINGAREA_MEDI', 'LIVINGAPARTMENTS_MODE',\n        'FLOORSMIN_AVG', 'LANDAREA_AVG', 'FLOORSMIN_MODE', 'LANDAREA_MEDI',\n        'COMMONAREA_MEDI', 'YEARS_BUILD_AVG', 'COMMONAREA_AVG', 'BASEMENTAREA_AVG',\n        'BASEMENTAREA_MODE', 'NONLIVINGAPARTMENTS_MEDI', 'BASEMENTAREA_MEDI', \n        'LIVINGAPARTMENTS_AVG', 'ELEVATORS_AVG', 'YEARS_BUILD_MEDI', 'ENTRANCES_MODE',\n        'NONLIVINGAPARTMENTS_MODE', 'LIVINGAREA_MODE', 'LIVINGAPARTMENTS_MEDI',\n        'YEARS_BUILD_MODE', 'YEARS_BEGINEXPLUATATION_AVG', 'ELEVATORS_MEDI', 'LIVINGAREA_MEDI',\n        'YEARS_BEGINEXPLUATATION_MODE', 'NONLIVINGAPARTMENTS_AVG', 'HOUSETYPE_MODE',\n        'FONDKAPREMONT_MODE', 'EMERGENCYSTATE_MODE'\n    ]\n    for doc_num in [2,4,5,6,7,9,10,11,12,13,14,15,16,17,19,20,21]:\n        drop_list.append('FLAG_DOCUMENT_{}'.format(doc_num))\n    df.drop(drop_list, axis=1, inplace=True)\n    return df","896774f4":"# bureau\ub294 \ub2e4\ub978 \ud68c\uc0ac\uc758 \uce74\ub4dc\uac70\ub798 data\ub97c \uac00\uc838\uc628\uac83\nbureau = pd.read_csv(os.path.join(path, 'bureau.csv'), nrows = num_rows)\nbureau","35938531":"# Credit duration and credit\/account end date difference\nbureau['CREDIT_DURATION'] = -bureau['DAYS_CREDIT'] + bureau['DAYS_CREDIT_ENDDATE']\nbureau['ENDDATE_DIF'] = bureau['DAYS_CREDIT_ENDDATE'] - bureau['DAYS_ENDDATE_FACT']","63ede7e9":"# Credit to debt ratio and difference\nbureau['DEBT_PERCENTAGE'] = bureau['AMT_CREDIT_SUM'] \/ bureau['AMT_CREDIT_SUM_DEBT']\nbureau['DEBT_CREDIT_DIFF'] = bureau['AMT_CREDIT_SUM'] - bureau['AMT_CREDIT_SUM_DEBT']\nbureau['CREDIT_TO_ANNUITY_RATIO'] = bureau['AMT_CREDIT_SUM'] \/ bureau['AMT_ANNUITY']","174fb26f":"'''\nLabel encoder \ud568\uc218\uc640 one-hot encoder \ud568\uc218\ub294 \uac70\uc758 \ud761\uc0ac\ud558\uc9c0\ub9cc one-hot \uc5d0\uc11c\ub294 Null\uac12\uc744 encoder \ud574\uc8fc\uac70\ub098 \uc548\ud574\uc904\uc218 \uc788\uc74c\n\n\ud604\uc7ac \ucee4\ub110\uc5d0\uc11c\ub294 LGBM\uc744 \uc0ac\uc6a9\ud560\uac70\ub77c\uc11c Null\uac12\uc758 \uc720\ubb34\uac00 \uc0c1\uad00\uc5c6\uc73c\ubbc0\ub85c Null\uac12\uc744 encoder \ud574\uc8fc\uc9c0 \uc54a\ub294\ub2e4.\n\n'''\n\ndef one_hot_encoder(df, categorical_columns=None, nan_as_category=True):\n    \"\"\"Create a new column for each categorical value in categorical columns. \"\"\"\n    original_columns = list(df.columns)\n    if not categorical_columns:\n        categorical_columns = [col for col in df.columns if df[col].dtype == 'object']\n    df = pd.get_dummies(df, columns=categorical_columns, dummy_na=nan_as_category)\n    categorical_columns = [c for c in df.columns if c not in original_columns]\n    return df, categorical_columns","9ba2e4cc":"bureau, categorical_columns = one_hot_encoder(bureau, nan_as_category=False)","248517e7":"bb = pd.read_csv(os.path.join(path, 'bureau_balance.csv'), nrows= num_rows)\nbb","14a9b460":"bb, categorical_cols = one_hot_encoder(bb, nan_as_category= False)","841b68ee":"bb_processed = bb.groupby('SK_ID_BUREAU')[categorical_cols].mean().reset_index()","dbe2fd96":"agg = {'MONTHS_BALANCE' : ['min','max','mean','size']}\n#bb_processed = group_and_merge(bb, bb_processed, '', agg, 'SK_ID_BUREAU')","c40ab624":"df_to_agg = bb\ndf_to_merge = bb_processed\nprefix = ''\naggregations = agg\naggregate_by = 'SK_ID_BUREAU'","f512b253":"def group(df_to_agg, prefix, aggregations, aggregate_by= 'SK_ID_CURR'):\n    agg_df = df_to_agg.groupby(aggregate_by).agg(aggregations)\n    agg_df.columns = pd.Index(['{}{}_{}'.format(prefix, e[0], e[1].upper())\n                               for e in agg_df.columns.tolist()])\n    return agg_df.reset_index()","696985bc":"def group_and_merge(df_to_agg, df_to_merge, prefix, aggregations, aggregate_by= 'SK_ID_CURR'):\n    agg_df = group(df_to_agg, prefix, aggregations, aggregate_by= aggregate_by)\n    return df_to_merge.merge(agg_df, how='left', on= aggregate_by)","d5067a32":"def get_bureau_balance(path, num_rows= None):\n    bb = pd.read_csv(os.path.join(path, 'bureau_balance.csv'), nrows= num_rows)\n    bb, categorical_cols = one_hot_encoder(bb, nan_as_category= False)\n    # Calculate rate for each category with decay\n    bb_processed = bb.groupby('SK_ID_BUREAU')[categorical_cols].mean().reset_index()\n    # Min, Max, Count and mean duration of payments (months)\n    agg = {'MONTHS_BALANCE': ['min', 'max', 'mean', 'size']}\n    bb_processed = group_and_merge(bb, bb_processed, '', agg, 'SK_ID_BUREAU')\n    del bb; gc.collect()\n    return bb_processed","5d86e426":"bureau = bureau.merge(get_bureau_balance(path, num_rows), how='left', on='SK_ID_BUREAU')\nbureau","24c50e1c":"bureau['STATUS_12345'] = 0\nfor i in range(1,6):\n        bureau['STATUS_12345'] += bureau['STATUS_{}'.format(i)]","f7308ac0":" features = ['AMT_CREDIT_MAX_OVERDUE', 'AMT_CREDIT_SUM_OVERDUE', 'AMT_CREDIT_SUM',\n        'AMT_CREDIT_SUM_DEBT', 'DEBT_PERCENTAGE', 'DEBT_CREDIT_DIFF', 'STATUS_0', 'STATUS_12345']","98e0001f":"# MONTHS_BALANCE_SIZE(\uc774\uc790\uac00 \ub0a8\uc740 \uae30\uac04)\uc744 \uae30\uc900\uc73c\ub85c features\uc758 \ud3c9\uade0\uc744 \uc804\ubd80 \uad6c\ud55c\uac83\n# 82\uac1c\uc758 \ud3c9\uade0\uac12\uc774 \ub610\ub2e4\ub978 \ub370\uc774\ud130\uac00 \ub420 \uc218 \uc788\ub2e4..?\nagg_length = bureau.groupby('MONTHS_BALANCE_SIZE')[features].mean().reset_index()","fc7b8835":"# rename\uc744 \uc815\ub9d0 \ub611\ub611\ud558\uac8c \ud588\ub0b4..\nagg_length.rename({feat:'LL_' + feat for feat in features}, axis = 1, inplace = True)","5f043d6c":"{feat:'LL_' + feat for feat in features}","4a2c01fd":"bureau = bureau.merge(agg_length, how = 'left', on = 'MONTHS_BALANCE_SIZE')","b8162ff6":"del agg_length; gc.collect()","70378b0f":"BUREAU_AGG = {\n    'SK_ID_BUREAU': ['nunique'],\n    'DAYS_CREDIT': ['min', 'max', 'mean'],\n    'DAYS_CREDIT_ENDDATE': ['min', 'max'],\n    'AMT_CREDIT_MAX_OVERDUE': ['max', 'mean'],\n    'AMT_CREDIT_SUM': ['max', 'mean', 'sum'],\n    'AMT_CREDIT_SUM_DEBT': ['max', 'mean', 'sum'],\n    'AMT_CREDIT_SUM_OVERDUE': ['max', 'mean', 'sum'],\n    'AMT_ANNUITY': ['mean'],\n    'DEBT_CREDIT_DIFF': ['mean', 'sum'],\n    'MONTHS_BALANCE_MEAN': ['mean', 'var'],\n    'MONTHS_BALANCE_SIZE': ['mean', 'sum'],\n    # Categorical\n    'STATUS_0': ['mean'],\n    'STATUS_1': ['mean'],\n    'STATUS_12345': ['mean'],\n    'STATUS_C': ['mean'],\n    'STATUS_X': ['mean'],\n    'CREDIT_ACTIVE_Active': ['mean'],\n    'CREDIT_ACTIVE_Closed': ['mean'],\n    'CREDIT_ACTIVE_Sold': ['mean'],\n    'CREDIT_TYPE_Consumer credit': ['mean'],\n    'CREDIT_TYPE_Credit card': ['mean'],\n    'CREDIT_TYPE_Car loan': ['mean'],\n    'CREDIT_TYPE_Mortgage': ['mean'],\n    'CREDIT_TYPE_Microloan': ['mean'],\n    # Group by loan duration features (months)\n    'LL_AMT_CREDIT_SUM_OVERDUE': ['mean'],\n    'LL_DEBT_CREDIT_DIFF': ['mean'],\n    'LL_STATUS_12345': ['mean'],\n}","785f8798":"bureau.groupby('SK_ID_CURR').agg(BUREAU_AGG)","41771f39":"agg_bureau = group(bureau, 'BUREAU_', BUREAU_AGG)\nagg_bureau","76b73264":"BUREAU_ACTIVE_AGG = {\n    'DAYS_CREDIT': ['max', 'mean'],\n    'DAYS_CREDIT_ENDDATE': ['min', 'max'],\n    'AMT_CREDIT_MAX_OVERDUE': ['max', 'mean'],\n    'AMT_CREDIT_SUM': ['max', 'sum'],\n    'AMT_CREDIT_SUM_DEBT': ['mean', 'sum'],\n    'AMT_CREDIT_SUM_OVERDUE': ['max', 'mean'],\n    'DAYS_CREDIT_UPDATE': ['min', 'mean'],\n    'DEBT_PERCENTAGE': ['mean'],\n    'DEBT_CREDIT_DIFF': ['mean'],\n    'CREDIT_TO_ANNUITY_RATIO': ['mean'],\n    'MONTHS_BALANCE_MEAN': ['mean', 'var'],\n    'MONTHS_BALANCE_SIZE': ['mean', 'sum'],\n}","daf9a929":"active = bureau[bureau['CREDIT_ACTIVE_Active'] == 1]\nactive","b86e9b26":"agg_bureau = group_and_merge(active, agg_bureau, 'BUREAU_ACTIVE_',BUREAU_ACTIVE_AGG)","6af93381":"closed = bureau[bureau['CREDIT_ACTIVE_Closed']==1]\nclosed","8612f5b1":"BUREAU_CLOSED_AGG = {\n    'DAYS_CREDIT': ['max', 'var'],\n    'DAYS_CREDIT_ENDDATE': ['max'],\n    'AMT_CREDIT_MAX_OVERDUE': ['max', 'mean'],\n    'AMT_CREDIT_SUM_OVERDUE': ['mean'],\n    'AMT_CREDIT_SUM': ['max', 'mean', 'sum'],\n    'AMT_CREDIT_SUM_DEBT': ['max', 'sum'],\n    'DAYS_CREDIT_UPDATE': ['max'],\n    'ENDDATE_DIF': ['mean'],\n    'STATUS_12345': ['mean'],\n}","87506b67":"del active, closed; gc.collect()","b9145623":"BUREAU_LOAN_TYPE_AGG = {\n    'DAYS_CREDIT': ['mean', 'max'],\n    'AMT_CREDIT_MAX_OVERDUE': ['mean', 'max'],\n    'AMT_CREDIT_SUM': ['mean', 'max'],\n    'AMT_CREDIT_SUM_DEBT': ['mean', 'max'],\n    'DEBT_PERCENTAGE': ['mean'],\n    'DEBT_CREDIT_DIFF': ['mean'],\n    'DAYS_CREDIT_ENDDATE': ['max'],\n}","23c39b08":"# Aggregations for the main loan types\nfor credit_type in ['Consumer credit', 'Credit card', 'Mortgage', 'Car loan', 'Microloan']:\n    type_df = bureau[bureau['CREDIT_TYPE_' + credit_type] == 1]\n    prefix = 'BUREAU_' + credit_type.split(' ')[0].upper() + '_'\n    agg_bureau = group_and_merge(type_df, agg_bureau, prefix, BUREAU_LOAN_TYPE_AGG)\n    del type_df; gc.collect()","51f36434":"'BUREAU_' + credit_type.split(' ')[0].upper() + '_'","caa1a1b2":"BUREAU_TIME_AGG = {\n    'AMT_CREDIT_MAX_OVERDUE': ['max', 'mean'],\n    'AMT_CREDIT_SUM_OVERDUE': ['mean'],\n    'AMT_CREDIT_SUM': ['max', 'sum'],\n    'AMT_CREDIT_SUM_DEBT': ['mean', 'sum'],\n    'DEBT_PERCENTAGE': ['mean'],\n    'DEBT_CREDIT_DIFF': ['mean'],\n    'STATUS_0': ['mean'],\n    'STATUS_12345': ['mean'],\n}","ab14c598":"# Time based aggregations: last x months\nfor time_frame in [6, 12]:\n    prefix = \"BUREAU_LAST{}M_\".format(time_frame)\n    time_frame_df = bureau[bureau['DAYS_CREDIT'] >= -30*time_frame]\n    agg_bureau = group_and_merge(time_frame_df, agg_bureau, prefix, BUREAU_TIME_AGG)\n    del time_frame_df; gc.collect()","ff14a027":"sort_bureau = bureau.sort_values(by=['DAYS_CREDIT'])","5538eda6":"#last()\ub294 \uac00\uc7a5 \ucd5c\uadfc\uac83\uc744 \ubcf4\uc5ec\uc90c\ngr = sort_bureau.groupby('SK_ID_CURR')['AMT_CREDIT_MAX_OVERDUE'].last().reset_index()","90d6e264":"gr.rename(columns={'AMT_CREDIT_MAX_OVERDUE':'BUREAU_LAST_LOAN_MAX_OVERDUE'},inplace = True)","678b3dc1":"agg_bureau = agg_bureau.merge(gr, on = 'SK_ID_CURR', how = 'left')","2d70b177":"agg_bureau['BUREAU_DEBT_OVER_CREDIT'] = \\\n    agg_bureau['BUREAU_AMT_CREDIT_SUM_DEBT_SUM']\/agg_bureau['BUREAU_AMT_CREDIT_SUM_SUM']\nagg_bureau['BUREAU_ACTIVE_DEBT_OVER_CREDIT'] = \\\n    agg_bureau['BUREAU_ACTIVE_AMT_CREDIT_SUM_DEBT_SUM']\/agg_bureau['BUREAU_ACTIVE_AMT_CREDIT_SUM_SUM']","74ad6197":"df = df.merge(agg_bureau, on = 'SK_ID_CURR', how='left')","97bc7930":"df.head()","a9f47534":"prev = pd.read_csv(os.path.join(path, 'previous_application.csv'), nrows= num_rows)\npay = pd.read_csv(os.path.join(path, 'installments_payments.csv'), nrows= num_rows)","c579c61b":"ohe_columns = [\n        'NAME_CONTRACT_STATUS', 'NAME_CONTRACT_TYPE', 'CHANNEL_TYPE',\n        'NAME_TYPE_SUITE', 'NAME_YIELD_GROUP', 'PRODUCT_COMBINATION',\n        'NAME_PRODUCT_TYPE', 'NAME_CLIENT_TYPE']","f7aeed97":"prev, categorical_cols = one_hot_encoder(prev, ohe_columns, nan_as_category=False)","1cc971d7":"# AMT_APPLICATION -> \uc2e0\uc6a9\ub4f1\uae09?\nprev['APPLICATION_CREDIT_DIFF'] = prev['AMT_APPLICATION'] - prev['AMT_CREDIT']\nprev['APPLICATION_CREDIT_RATIO'] = prev['AMT_APPLICATION'] - prev['AMT_CREDIT']\nprev['CREDIT_TO_ANNUITY_RATIO'] = prev['AMT_CREDIT'] \/ prev['AMT_ANNUITY']\nprev['DOWN_PAYMENT_TO_CREDIT'] = prev['AMT_DOWN_PAYMENT'] \/ prev['AMT_CREDIT']","fba0ac34":"# Interest ratio on previous application\n# \uac04\ub2e8\ud55c \uc774\uc790 \uacf5\uc2dd \ub9cc\ub4e6\ntotal_payment = prev['AMT_ANNUITY'] * prev['CNT_PAYMENT']\n(total_payment\/prev['AMT_CREDIT'] -1) \/ prev['CNT_PAYMENT']\nprev['SIMPLE_INTERESTS'] = (total_payment\/prev['AMT_CREDIT'] -1) \/ prev['CNT_PAYMENT']","9b844f64":"approved = prev[prev['NAME_CONTRACT_STATUS_Approved'] == 1]\nactive_df = approved[approved['DAYS_LAST_DUE']== 365243]","baf72e0d":"# home credit data \uc124\uba85 \ucc38\uace0\n# previous_application\uc758 \uc815\ubcf4\ub97c \uc5bb\uae30 \uc704\ud574\uc11c\ub294 pay\uc758  installments_payments\ub97c \uc774\uc6a9\ud574\uc57c \ud558\uace0, \uadf8\ub54c \ud544\uc694\ud55c\uac83\uc774 SK_ID_PREV\uc774\ub2e4.\n# \uc5ec\uae30\uc5d0\uc11c isin \uc744 \uc0ac\uc6a9\ud574\uc11c pay\uc758 SK_ID_PREV\uac00 active_df\uc758 SK_ID_PREV\uc640 \uc77c\uce58\ud558\ub294\uc9c0\ub97c \ubcf4\ub294\uac83, boolean \ud615\uc2dd\uc73c\ub85c \ub098\uc634 -> True\uac12\ub9cc \ubf51\uc74c\n# Find how much was already payed in active loans (using installments csv)\nactive_pay = pay[pay['SK_ID_PREV'].isin(active_df['SK_ID_PREV'])]\nactive_pay_agg = active_pay.groupby('SK_ID_PREV')[['AMT_INSTALMENT', 'AMT_PAYMENT']].sum()\nactive_pay_agg.reset_index(inplace = True)","959c3690":"# Active loans: difference of what was payed and installments\nactive_pay_agg['INSTALMENT_PAYMENT_DIFF'] = active_pay_agg['AMT_INSTALMENT'] - active_pay_agg['AMT_PAYMENT']\n# Merge with active_df\nactive_df = active_df.merge(active_pay_agg, on = 'SK_ID_PREV', how = 'left')\nactive_df['REMAINING_DEBT'] = active_df['AMT_CREDIT'] - active_df['AMT_PAYMENT']\nactive_df['REPAYMENT_RATIO'] = active_df['AMT_PAYMENT'] \/ active_df['AMT_CREDIT']","72937890":"PREVIOUS_ACTIVE_AGG = {\n    'SK_ID_PREV': ['nunique'],\n    'SIMPLE_INTERESTS': ['mean'],\n    'AMT_ANNUITY': ['max', 'sum'],\n    'AMT_APPLICATION': ['max', 'mean'],\n    'AMT_CREDIT': ['sum'],\n    'AMT_DOWN_PAYMENT': ['max', 'mean'],\n    'DAYS_DECISION': ['min', 'mean'],\n    'CNT_PAYMENT': ['mean', 'sum'],\n    'DAYS_LAST_DUE_1ST_VERSION': ['min', 'max', 'mean'],\n    # Engineered features\n    'AMT_PAYMENT': ['sum'],\n    'INSTALMENT_PAYMENT_DIFF': ['mean', 'max'],\n    'REMAINING_DEBT': ['max', 'mean', 'sum'],\n    'REPAYMENT_RATIO': ['mean'],\n}","7b002b24":"# Perform aggregations for active applications\nactive_agg_df = group(active_df,'PREV_ACTIVE_',PREVIOUS_ACTIVE_AGG)","776659de":"active_agg_df['TOTAL_REPAYMENT_RATIO'] = active_agg_df['PREV_ACTIVE_AMT_PAYMENT_SUM']\/\\\n                                         active_agg_df['PREV_ACTIVE_AMT_CREDIT_SUM']","2d9f0b24":"del active_pay, active_pay_agg, active_df; gc.collect()","4f283a66":"# change 364,243 values to nan\nprev['DAYS_FIRST_DRAWING'].replace(365243, np.nan, inplace = True)\nprev['DAYS_FIRST_DUE'].replace(365243, np.nan, inplace = True)\nprev['DAYS_LAST_DUE_1ST_VERSION'].replace(365243, np.nan, inplace = True)\nprev['DAYS_LAST_DUE'].replace(365243, np.nan, inplace = True)\nprev['DAYS_TERMINATION'].replace(365243, np.nan, inplace = True)","7f44a0e4":"# Days last due difference(\uc720\ud6a8\uae30\uac04)\nprev['DAYS_LAST_DUE_DIFF'] = prev['DAYS_LAST_DUE_1ST_VERSION'] - prev['DAYS_LAST_DUE']\napproved['DAYS_LAST_DUE_DIFF'] = approved['DAYS_LAST_DUE_1ST_VERSION'] - approved['DAYS_LAST_DUE']","76f828f0":"#Categorical features\ncategorical_agg = {key:['mean'] for key in categorical_cols}","8b9ecf86":"PREVIOUS_AGG = {\n    'SK_ID_PREV': ['nunique'],\n    'AMT_ANNUITY': ['min', 'max', 'mean'],\n    'AMT_DOWN_PAYMENT': ['max', 'mean'],\n    'HOUR_APPR_PROCESS_START': ['min', 'max', 'mean'],\n    'RATE_DOWN_PAYMENT': ['max', 'mean'],\n    'DAYS_DECISION': ['min', 'max', 'mean'],\n    'CNT_PAYMENT': ['max', 'mean'],\n    'DAYS_TERMINATION': ['max'],\n    # Engineered features\n    'CREDIT_TO_ANNUITY_RATIO': ['mean', 'max'],\n    'APPLICATION_CREDIT_DIFF': ['min', 'max', 'mean'],\n    'APPLICATION_CREDIT_RATIO': ['min', 'max', 'mean', 'var'],\n    'DOWN_PAYMENT_TO_CREDIT': ['mean'],\n}","20d21802":"#Perform general aggregations\n#{**PREVIOUS_AGG, **categorical_agg}\ub294 \ub450\uac1c\ub97c \ud569\uce58\ub294\uac70\uc784\nagg_prev = group(prev, 'PREV_', {**PREVIOUS_AGG, **categorical_agg})","cd6b6e9d":"# Merge active loans dataframe on agg_prev\nagg_prev = agg_prev.merge(active_agg_df, how='left', on = 'SK_ID_CURR')","c2ff49f7":"del active_agg_df; gc.collect()","6f67e8f7":"PREVIOUS_APPROVED_AGG = {\n    'SK_ID_PREV': ['nunique'],\n    'AMT_ANNUITY': ['min', 'max', 'mean'],\n    'AMT_CREDIT': ['min', 'max', 'mean'],\n    'AMT_DOWN_PAYMENT': ['max'],\n    'AMT_GOODS_PRICE': ['max'],\n    'HOUR_APPR_PROCESS_START': ['min', 'max'],\n    'DAYS_DECISION': ['min', 'mean'],\n    'CNT_PAYMENT': ['max', 'mean'],\n    'DAYS_TERMINATION': ['mean'],\n    # Engineered features\n    'CREDIT_TO_ANNUITY_RATIO': ['mean', 'max'],\n    'APPLICATION_CREDIT_DIFF': ['max'],\n    'APPLICATION_CREDIT_RATIO': ['min', 'max', 'mean'],\n    # The following features are only for approved applications\n    'DAYS_FIRST_DRAWING': ['max', 'mean'],\n    'DAYS_FIRST_DUE': ['min', 'mean'],\n    'DAYS_LAST_DUE_1ST_VERSION': ['min', 'max', 'mean'],\n    'DAYS_LAST_DUE': ['max', 'mean'],\n    'DAYS_LAST_DUE_DIFF': ['min', 'max', 'mean'],\n    'SIMPLE_INTERESTS': ['min', 'max', 'mean'],\n}","a9e05487":"PREVIOUS_REFUSED_AGG = {\n    'AMT_APPLICATION': ['max', 'mean'],\n    'AMT_CREDIT': ['min', 'max'],\n    'DAYS_DECISION': ['min', 'max', 'mean'],\n    'CNT_PAYMENT': ['max', 'mean'],\n    # Engineered features\n    'APPLICATION_CREDIT_DIFF': ['min', 'max', 'mean', 'var'],\n    'APPLICATION_CREDIT_RATIO': ['min', 'mean'],\n    'NAME_CONTRACT_TYPE_Consumer loans': ['mean'],\n    'NAME_CONTRACT_TYPE_Cash loans': ['mean'],\n    'NAME_CONTRACT_TYPE_Revolving loans': ['mean'],\n}","c383cef7":"# Aggregations for approved and refused loans\nagg_prev = group_and_merge(approved, agg_prev, 'APPROVED_', PREVIOUS_APPROVED_AGG)\nrefused = prev[prev['NAME_CONTRACT_STATUS_Refused'] == 1]\nagg_prev = group_and_merge(refused, agg_prev, 'REFUSED_', PREVIOUS_REFUSED_AGG)\ndel approved, refused; gc.collect()","6620a43e":"# Aggregations for Consumer loans and Cash loans\nfor loan_type in ['Consumer loans', 'Cash loans']:\n    type_df = prev[prev['NAME_CONTRACT_TYPE_{}'.format(loan_type)] == 1]\n    prefix = 'PREV_' + loan_type.split(\" \")[0] + '_'\n    agg_prev = group_and_merge(type_df, agg_prev, prefix, PREVIOUS_LOAN_TYPE_AGG)\n    del type_df; gc.collect()","c64fd6bb":"PREVIOUS_LOAN_TYPE_AGG = {\n    'AMT_CREDIT': ['sum'],\n    'AMT_ANNUITY': ['mean', 'max'],\n    'SIMPLE_INTERESTS': ['min', 'mean', 'max', 'var'],\n    'APPLICATION_CREDIT_DIFF': ['min', 'var'],\n    'APPLICATION_CREDIT_RATIO': ['min', 'max', 'mean'],\n    'DAYS_DECISION': ['max'],\n    'DAYS_LAST_DUE_1ST_VERSION': ['max', 'mean'],\n    'CNT_PAYMENT': ['mean'],\n}","74d0a043":"PREVIOUS_LATE_PAYMENTS_AGG = {\n    'DAYS_DECISION': ['min', 'max', 'mean'],\n    'DAYS_LAST_DUE_1ST_VERSION': ['min', 'max', 'mean'],\n    # Engineered features\n    'APPLICATION_CREDIT_DIFF': ['min'],\n    'NAME_CONTRACT_TYPE_Consumer loans': ['mean'],\n    'NAME_CONTRACT_TYPE_Cash loans': ['mean'],\n    'NAME_CONTRACT_TYPE_Revolving loans': ['mean'],\n}","df7bf90d":"# Get the SK_ID_PREV for loans with late payments (days past due, \uae30\ud55c\uc774 \uc9c0\ub09c \ub0a0)\npay['LATE_PAYMENT'] = pay['DAYS_ENTRY_PAYMENT'] - pay['DAYS_INSTALMENT']\npay['LATE_PAYMENT'] = pay['LATE_PAYMENT'].apply(lambda x:1 if x>0 else 0)\n# dpd_id\ub294 \uc5f0\uccb4\uac00 \uc788\ub294 \uc0ac\ub78c\ub4e4\uc758 \uc815\ubcf4\ub97c \uc54c\uc544\ub0c4\ndpd_id = pay[pay['LATE_PAYMENT']>0]['SK_ID_PREV'].unique()","d92a11db":"# prev\uc5d0 \uc5f0\uccb4\uac00 \uc788\ub294 \uc0ac\ub78c\ub4e4\ub9cc \ucd94\ucd9c\nprev[prev['SK_ID_PREV'].isin(dpd_id)]","bbb0e73b":"#Aggregations for loans with late payments\nagg_dpd = group_and_merge(prev[prev['SK_ID_PREV'].isin(dpd_id)],agg_prev,'PREV_LATE_',PREVIOUS_LATE_PAYMENTS_AGG)\ndel agg_dpd, dpd_id; gc.collect","075cd39f":"PREVIOUS_TIME_AGG = {\n    'AMT_CREDIT': ['sum'],\n    'AMT_ANNUITY': ['mean', 'max'],\n    'SIMPLE_INTERESTS': ['mean', 'max'],\n    'DAYS_DECISION': ['min', 'mean'],\n    'DAYS_LAST_DUE_1ST_VERSION': ['min', 'max', 'mean'],\n    # Engineered features\n    'APPLICATION_CREDIT_DIFF': ['min'],\n    'APPLICATION_CREDIT_RATIO': ['min', 'max', 'mean'],\n    'NAME_CONTRACT_TYPE_Consumer loans': ['mean'],\n    'NAME_CONTRACT_TYPE_Cash loans': ['mean'],\n    'NAME_CONTRACT_TYPE_Revolving loans': ['mean'],\n}","c1a6d9e3":"#Aggregataions for loans in the last x months\n#-30\uc744 \uacf1\ud574\uc8fc\ub294 \uc774\uc720\ub294 prev['DAYS_DECISION']\uc758 \uac12\uc774 \uc74c\uc218\uc774\uace0, \ud55c\ub2ec\uc744 \uc758\ubbf8\ud558\uae30 \ub54c\ubb38, 30*12 = 360, 30*24 = 720\nfor time_frame in [12,24]:\n    time_frame_df = prev[prev['DAYS_DECISION'] >= -30*time_frame]\n    prefix = 'PREV_LAST{}M_'.format(time_frame)\n    agg_prev = group_and_merge(time_frame_df, agg_prev, prefix , PREVIOUS_TIME_AGG)\n    del time_frame_df; gc.collect()","49a606d3":"POS_CASH_AGG = {\n    'SK_ID_PREV': ['nunique'],\n    'MONTHS_BALANCE': ['min', 'max', 'size'],\n    'SK_DPD': ['max', 'mean', 'sum', 'var'],\n    'SK_DPD_DEF': ['max', 'mean', 'sum'],\n    'LATE_PAYMENT': ['mean']\n}","54befc48":"pos = pd.read_csv(os.path.join(path,'POS_CASH_balance.csv'), nrows =num_rows)","70e318e2":"# null value\uac00 \uc788\uc5b4\ub3c4 LGBM\uc774 \uac00\ub2a5\ud558\ubbc0\ub85c Null \uc548\uc5c6\uc5e0\npos, categorical_cols = one_hot_encoder(pos, nan_as_category= False)","551e8993":"#Flag months with late payment\n#pos data\uc758 \uc5f0\uccb4\uc815\ubcf4 \ud30c\uc0dd\ubcc0\uc218 \uc0dd\uc131\npos['LATE_PAYMENT'] = pos['SK_DPD'].apply(lambda x:1 if x>0 else 0)","d74da5ab":"#Aggregate by SK_ID_CURR\ncategorical_agg = {key : ['mean'] for key in categorical_cols}\npos_agg = group(pos, 'POS_', {**POS_CASH_AGG, **categorical_agg})","7b7b62a7":"#Sort and group by SK_ID_PREV\nsort_pos = pos.sort_values(by = ['SK_ID_PREV', 'MONTHS_BALANCE'])\ngp = sort_pos.groupby('SK_ID_PREV')\ndf = pd.DataFrame()\ndf['SK_ID_CURR'] = gp['SK_ID_CURR'].first()\ndf['MONTHS_BALANCE_MAX'] = gp['MONTHS_BALANCE'].max()","98975d2c":"#Percentage of previous loans completed and completed before initial term\n#CNT_INSTALMENT = \uc774\uc804 CREDIT\uc758 \uae30\uac04\n\ndf['POS_LOAN_COMPLETED_MEAN'] = gp['NAME_CONTRACT_STATUS_Completed'].mean()\ndf['POS_COMPLETED_BEFORE_MEAN'] = gp['CNT_INSTALMENT'].first() - gp['CNT_INSTALMENT'].last()\ndf['POS_COMPLETED_BEFORE_MEAN'] = df.apply(lambda x:1 if x['POS_COMPLETED_BEFORE_MEAN']>0 and x['POS_LOAN_COMPLETED_MEAN'] > 0 else 0, axis = 1)","aba54327":"# Number of remaining installments (future installments) and percentage from total\n# \uc794\uc5ec \ud560\ubd80 \uac74\uc218(\ud5a5\ud6c4 \ud560\ubd80) \ubc0f \ucd1d \ud560\ubd80 \ube44\uc728\ndf['POS_REMAINING_INSTALMENTS'] = gp['CNT_INSTALMENT_FUTURE'].last()\ndf['POS_REMAINING_INSTALMENTS_RATIO'] = gp['CNT_INSTALMENT_FUTURE'].last()\/gp['CNT_INSTALMENT'].last()","0eee568a":"# Group by SK_ID_CURR and merge\ndf_gp = df.groupby('SK_ID_CURR').sum().reset_index()\ndf_gp.drop(['MONTHS_BALANCE_MAX'], axis = 1, inplace = True)\npos_agg = pd.merge(pos_agg, df_gp, on = 'SK_ID_CURR', how= 'left')\ndel df, gp, df_gp, sort_pos; gc.collect()","7b5d71d1":"'''\ndef do_sum(df, group_cols, counted, agg_name):\n    gp = df[group_cols + [counted]].groupby(group_cols)[counted].sum().reset_index().rename(\n        columns={counted: agg_name})\n    df = df.merge(gp, on=group_cols, how='left')\n    del gp\n    gc.collect()\n    return df\n'''\npos = do_sum(pos, ['SK_ID_PREV'],'LATE_PAYMENT','LATE_PAYMENT_SUM')\n# pos.groupby(['SK_ID_PREV'])['LATE_PAYMENT'].sum().reset_index().rename(columns = {'LATE_PAYMENT':'LATE_PAYMENT_SUM'})","92a478bf":"# Last month of each application\n# idxmax -> \ucd5c\ub300\uac12\uc744 \uac16\uace0\uc788\ub294 \uc778\ub371\uc2a4 \ubc18\ud658 -> \uc81c\uc77c \ub9c8\uc9c0\ub9c9\uc5d0 \uc788\ub294 \uc778\ub371\uc2a4 \ubc18\ud658\ud568(\uc624\ub984\ucc28\uc21c\uc77c \uacbd\uc6b0)\nlast_month_df = pos.groupby('SK_ID_PREV')['MONTHS_BALANCE'].idxmax()","bf8c7483":"# Most recent applications (last 3)\nsort_pos = pos.sort_values(by=['SK_ID_PREV','MONTHS_BALANCE'])\ngp = sort_pos.iloc[last_month_df].groupby('SK_ID_CURR').tail(3)\ngp_mean = gp.groupby('SK_ID_CURR').mean().reset_index()\npos_agg = pd.merge(pos_agg, gp_mean[['SK_ID_CURR','LATE_PAYMENT_SUM']], on='SK_ID_CURR', how='left')","0c3c3117":"# Drop some useless categorical features\ndrop_features = [\n    'POS_NAME_CONTRACT_STATUS_Canceled_MEAN', 'POS_NAME_CONTRACT_STATUS_Amortized debt_MEAN',\n    'POS_NAME_CONTRACT_STATUS_XNA_MEAN']\npos_agg.drop(drop_features, axis=1, inplace=True)","2bbf048e":"- Last loan max overdue\n- \ucd5c\ub300 \uc5f0\ucc44 \ucd1d\uc561\uc744 \ub098\ud0c0\ub0b4\ub294 \uc218\uce58\ub97c groupby..\uc2dc\ucf1c\uc11c \uc0c8\ub85c\uc6b4 feature \uc0dd\uc131","e5caaa9f":"#------------------------------------------------------------------------------------------------------------------------------------","b06d5117":"- Active loans -> approved and not complete yet (last_due 36243)","b2064f63":"Credit Ratio","9f1ee2d3":"- Groupby: Statistics for applications in the same group","17eb440d":"### bureau_df = get_bureau(DATA_DIRECTORY, num_rows= num_rows)","1a281c2d":"Income ratios","cd53a354":"- Active and closed loans aggregation","cc4fdc4b":"- aggregate\ub97c \ud65c\uc6a9\n- \uc774\ub7f0\uc2dd\uc73c\ub85c max, min, median, std, mean \uac12\uc744 \uad6c\ud560\uc218\ub3c4 \uc788\uc74c","edd265fd":"- previous\ub05d,\n- pos \uc2dc\uc791","4581e4d4":"- Feature engineering : ratio and difference","def0011c":"# Preprocessing","0f127647":"-----------------------------------------------------------Groupby ------------------------------------------------------------------------","8f43f00a":"### df = get_train_test(DATA_DIRECTORY, num_rows= num_rows)","10227762":"Time ratios","ad2f2c12":"1. - Aggregate by number of months in balance and merge with bureau (loan length agg)"}}