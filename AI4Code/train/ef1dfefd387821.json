{"cell_type":{"1037f015":"code","280a754b":"code","50518668":"code","1a121196":"code","32bc81bb":"code","0f5332f2":"code","6cd592bd":"code","9f78092b":"code","ba6e268a":"code","df442324":"code","19cea58f":"code","3d215fa3":"code","287639b3":"markdown","9bace7ec":"markdown","1c93eeed":"markdown","570fe075":"markdown","6eb4f2a7":"markdown","1db7c4a8":"markdown"},"source":{"1037f015":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","280a754b":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport datatable as dtable","50518668":"train = dtable.fread(\"\/kaggle\/input\/jane-street-market-prediction\/train.csv\").to_pandas()","1a121196":"train.loc[:, 'action'] = (train.loc[:, 'resp'] > 0).astype('int')","32bc81bb":"ordered_sample = train.query('date == 499').apply(lambda x: np.arcsinh(x))\n# look for time patterns in features vs time stamp id\nfeatures = [c for c in train.columns if 'feature_' in c]\nn_features = len(features)\n\nfig = px.scatter_3d(ordered_sample, x='ts_id', y='feature_64', z='resp', color='ts_id')\n\n# tight layout\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))","0f5332f2":"ordered_sample = train.query('date == 499').apply(lambda x: np.arcsinh(x))\n# look for time patterns in features vs time stamp id\nfeatures = [c for c in train.columns if 'feature_' in c]\nn_features = len(features)\n\nfig = px.scatter_3d(ordered_sample, x='ts_id', y='feature_39', z='resp', color='ts_id')\n\n# tight layout\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))","6cd592bd":"ordered_sample = train.query('date == 499').apply(lambda x: np.arcsinh(x))\n\n# look for time patterns in features vs time stamp id\nfeatures = [c for c in train.columns if 'feature_' in c]\nn_features = len(features)\n\nfig = px.scatter_3d(ordered_sample, x='ts_id', y='feature_1', z='resp', color='feature_0')\n\n# tight layout\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))","9f78092b":"ordered_sample = train.query('date == 499').apply(lambda x: np.arcsinh(x))\n\n# look for time patterns in features vs time stamp id\nfeatures = [c for c in train.columns if 'feature_' in c]\nn_features = len(features)\n\nfig = px.scatter_3d(ordered_sample, x='ts_id', y='feature_29', z='resp', color='feature_0')\n\n# tight layout\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))","ba6e268a":"ordered_sample = train.query('date == 499').apply(lambda x: np.arcsinh(x))\n\n# look for time patterns in features vs time stamp id\nfeatures = [c for c in train.columns if 'feature_' in c]\nn_features = len(features)\n\nfig = px.scatter_3d(ordered_sample, x='ts_id', y='feature_62', z='resp', color='feature_0')\n\n# tight layout\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))\n\n                  \n","df442324":"ordered_sample = train.query('date == 499').apply(lambda x: np.arcsinh(x))\n\nordered_sample.loc[:, 'feature_62p64'] = train.feature_62 + train.feature_64\n\n# look for time patterns in features vs time stamp id\nfeatures = [c for c in train.columns if 'feature_' in c]\nn_features = len(features)\n\nfig = px.scatter_3d(ordered_sample, x='feature_64', y='feature_62p64', z='resp', color='feature_0')\n\n# tight layout\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))","19cea58f":"ordered_sample = train.query('date == 499').apply(lambda x: np.arcsinh(x))\n\nordered_sample.loc[:, 'feature_62p64'] = train.feature_62 + train.feature_64\n\n# look for time patterns in features vs time stamp id\nfeatures = [c for c in train.columns if 'feature_' in c]\nn_features = len(features)\n\nfig = px.scatter_3d(ordered_sample, x='ts_id', y='feature_62p64', z='resp', color='feature_0')\n\n# tight layout\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))","3d215fa3":"ordered_sample = train.query('date == 499').apply(lambda x: np.arcsinh(x))\n\nordered_sample.loc[:, 'feature_62p64'] = train.feature_62 + train.feature_64\n\n# look for time patterns in features vs time stamp id\nfeatures = [c for c in train.columns if 'feature_' in c]\nn_features = len(features)\n\nfig = px.scatter_3d(ordered_sample, x='feature_64', y='feature_51', z='weight', color='resp')\n\n# tight layout\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))","287639b3":"And you can cleary see the feature_0 can split some feature, but some can't be split.","9bace7ec":"Use feature_64 as timestamp","1c93eeed":"Also find out 60 ~ 71 are some time related feature.","570fe075":"You can cleary see the feature_64 have correlation with interday time","6eb4f2a7":"> feature_50 ~ 55 correalted with weight","1db7c4a8":"In feautre's 3d scatter you can see the strong correlation in some ts_id with resp."}}