{"cell_type":{"e3311dd1":"code","d69937f8":"code","f082eb6d":"code","c0ead048":"code","f7d03e61":"code","5fb535b3":"code","aad1188a":"code","a0c9f096":"code","1c2f68ac":"code","769596a6":"code","ee8fed44":"code","0322a0eb":"code","7b659554":"code","9efb1407":"code","ad8d1263":"code","c96f9ba5":"code","226f1499":"code","fff20a87":"code","827f39f4":"code","28e8509a":"code","d2aee794":"code","b29e32e6":"code","1124950e":"code","899715ab":"code","62b870b9":"code","d084229d":"markdown","dd972cb4":"markdown","d72caa19":"markdown","cf342499":"markdown","1b223400":"markdown","27e33b27":"markdown","42257d6e":"markdown","592c62d9":"markdown","71724d8a":"markdown","03c08e2c":"markdown","a9a12e06":"markdown","ff99afe3":"markdown","5b681e7d":"markdown","fda36ee3":"markdown"},"source":{"e3311dd1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport joblib\nimport gc\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.model_selection import GridSearchCV","d69937f8":"pd.set_option('max_columns', None)","f082eb6d":"train = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv')\ntrain = train.sample(frac=1, random_state=1)\n\nprint(train.shape)","c0ead048":"mb = train.memory_usage(index=True, deep=True).sum() \/ 1024**2\nprint(mb)","f7d03e61":"train.head()","5fb535b3":"train.isnull().sum().to_frame().T","aad1188a":"(train.target.value_counts() \/ len(train)).to_frame()","a0c9f096":"y_train = train.target.values\ntrain.drop(['id', 'target'], axis=1, inplace=True)","1c2f68ac":"for c, d in zip(train.columns, train.dtypes):\n    print(f'{c:<10}{d}')","769596a6":"cat_features = train.columns.values[train.dtypes.values == 'O'].tolist()\nnum_features = [c for c in train.columns if c not in cat_features]\nfeatures = num_features + cat_features\n\nprint(cat_features)\nprint(num_features)","ee8fed44":"train[cat_features].nunique()","0322a0eb":"cat_features.remove('cat10')\nfeatures.remove('cat10')","7b659554":"num_transformer = Pipeline(\n    steps = [\n        ('imputer', SimpleImputer(strategy='mean')),\n        ('scaler', StandardScaler())  \n    ]\n)\n\ncat_transformer = Pipeline(\n    steps = [\n        ('imputer', SimpleImputer(strategy='constant', fill_value='Missing')),\n        ('onehot', OneHotEncoder(handle_unknown='ignore'))\n    ]\n)\n\npreprocessor = ColumnTransformer(\n    transformers = [\n        ('num', num_transformer, num_features),\n        ('cat', cat_transformer, cat_features)\n    ]\n)","9efb1407":"preprocessor.fit(train)\nX_train = preprocessor.transform(train)\n\nprint('X_train shape:', X_train.shape)\nprint('y_train shape:', y_train.shape)","ad8d1263":"del train\ngc.collect()","c96f9ba5":"X_sample, X_valid, y_sample, y_valid = train_test_split(X_train, y_train, test_size=0.8, stratify=y_train, random_state=1)\n\nprint(X_sample.shape)\nprint(X_valid.shape)","226f1499":"%%time \n\nlr_clf = LogisticRegression(max_iter=1000, solver='saga', penalty='elasticnet')\n\nlr_parameters = {\n    'l1_ratio': [0, 1],\n    'C': [0.01, 0.1, 1, 10]\n}\n\nlr_grid = GridSearchCV(lr_clf, lr_parameters, cv=5, refit='True', n_jobs=-1, verbose=10, scoring='roc_auc')\nlr_grid.fit(X_sample, y_sample)\n\nlr_model = lr_grid.best_estimator_\n\nprint('Best Parameters:', lr_grid.best_params_)\nprint('Best CV Score:  ', lr_grid.best_score_)\nprint('Training Acc:   ', lr_model.score(X_sample, y_sample))\nprint('Validation Acc: ', lr_model.score(X_valid, y_valid))","fff20a87":"lr_summary = pd.DataFrame(lr_grid.cv_results_['params'])\nlr_summary['cv_score'] = lr_grid.cv_results_['mean_test_score']\n\nfor r in lr_parameters['l1_ratio']:\n    temp = lr_summary.query(f'l1_ratio == {r}')\n    plt.plot(temp.C, temp.cv_score, label=r)\nplt.xscale('log')\nplt.xlabel('Regularization Parameter (C)')\nplt.ylabel('CV Score')\nplt.legend(title='L1 Ratio', loc='lower right')\nplt.grid()\nplt.show()\n\nfor p, s in zip(lr_grid.cv_results_['params'], lr_grid.cv_results_['mean_test_score']):\n    print(f\"l1: {p['l1_ratio']:<.3f},  C: {p['C']:>8.3f},  score: {s:.4f}\")","827f39f4":"%%time \n\ndt_clf = DecisionTreeClassifier(random_state=1)\n\ndt_parameters = {\n    'max_depth': [2, 4, 6, 8, 10, 12, 14, 16],\n    'min_samples_leaf': [2, 4, 8, 16]\n}\n\ndt_grid = GridSearchCV(dt_clf, dt_parameters, cv=5, refit='True', n_jobs=-1, verbose=10, scoring='roc_auc')\ndt_grid.fit(X_sample, y_sample)\n\ndt_model = dt_grid.best_estimator_\n\nprint('Best Parameters:', dt_grid.best_params_)\nprint('Best CV Score:  ', dt_grid.best_score_)\nprint('Training Acc:   ', dt_model.score(X_sample, y_sample))\nprint('Validation Acc: ', dt_model.score(X_valid, y_valid))","28e8509a":"dt_summary = pd.DataFrame(dt_grid.cv_results_['params'])\ndt_summary['cv_score'] = dt_grid.cv_results_['mean_test_score']\n\nfor ms in dt_parameters['min_samples_leaf']:\n    temp = dt_summary.query(f'min_samples_leaf == {ms}')\n    plt.plot(temp.max_depth, temp.cv_score, label=ms)\nplt.xlabel('Maximum Depth')\nplt.ylabel('CV Score')\nplt.legend(title='Min Samples')\nplt.grid()\nplt.show()\n\nfor p, s in zip(dt_grid.cv_results_['params'], dt_grid.cv_results_['mean_test_score']):\n    print(f\"depth: {p['max_depth']:>3},  min_inst: {p['min_samples_leaf']:>4},  score: {s:.4f}\")","d2aee794":"%%time \n\nrf_clf = RandomForestClassifier(random_state=1, n_estimators=50)\n\nrf_parameters = {\n    'max_depth': [4, 8, 16, 20, 24, 28, 32],\n    'min_samples_leaf': [1, 2, 4]\n}\n\nrf_grid = GridSearchCV(rf_clf, rf_parameters, cv=5, refit='True', n_jobs=-1, verbose=10, scoring='roc_auc')\nrf_grid.fit(X_sample, y_sample)\n\nrf_model = rf_grid.best_estimator_\n\nprint('Best Parameters:', rf_grid.best_params_)\nprint('Best CV Score:  ', rf_grid.best_score_)\nprint('Training Acc:   ', rf_model.score(X_sample, y_sample))\nprint('Validation Acc: ', rf_model.score(X_valid, y_valid))","b29e32e6":"rf_summary = pd.DataFrame(rf_grid.cv_results_['params'])\nrf_summary['cv_score'] = rf_grid.cv_results_['mean_test_score']\n\nfor ms in rf_parameters['min_samples_leaf']:\n    temp = rf_summary.query(f'min_samples_leaf == {ms}')\n    plt.plot(temp.max_depth, temp.cv_score, label=ms)\nplt.xlabel('Maximum Depth')\nplt.ylabel('CV Score')\nplt.legend(title='Min Samples')\nplt.grid()\nplt.show()\n\nfor p, s in zip(rf_grid.cv_results_['params'], rf_grid.cv_results_['mean_test_score']):\n    print(f\"depth: {p['max_depth']:>3},  min_inst: {p['min_samples_leaf']:>4},  score: {s:.4f}\")","1124950e":"print(rf_grid.best_params_)","899715ab":"final_model = RandomForestClassifier(random_state=1, n_estimators=50, max_depth=24, min_samples_leaf=4)\nfinal_model.fit(X_train, y_train)\n\nprint(final_model.score(X_train, y_train))","62b870b9":"joblib.dump(preprocessor, 'tps_preprocessor_01.joblib')\njoblib.dump(final_model, 'tps_model_01.joblib')\nprint('Model written to file.')","d084229d":"# Missing Values","dd972cb4":"# Save Final Model","d72caa19":"# Load Data","cf342499":"# Model Selection","1b223400":"# Random Forest","27e33b27":"# Explore Categorical Levels","42257d6e":"# Train Final Model","592c62d9":"# Sample Training Data","71724d8a":"# Decision Trees","03c08e2c":"## Logistic Regression","a9a12e06":"# Column Types","ff99afe3":"# Preprocessing","5b681e7d":"# Tabular Playground Series - March 2021","fda36ee3":"# Label Distribution"}}