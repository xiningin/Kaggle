{"cell_type":{"a4c9aaf2":"code","06abc755":"code","18f6e7d3":"code","6557d68b":"code","2f27eeb1":"code","30d069db":"code","83f4f125":"code","8971087a":"code","fad9e608":"code","b173eb80":"code","98a10cd5":"code","f65ef055":"code","3e856708":"code","862040a5":"code","79549601":"code","39b55a3a":"code","cd9c4f3d":"code","518de4b0":"code","b620c8d0":"code","39441f0f":"code","72d4c5d1":"code","1d8d327d":"code","bd72f060":"code","2532942d":"code","1992c0ab":"code","74492b8b":"code","1b14c56e":"code","5165fd4f":"code","36e77723":"code","214b00bf":"code","fe6f94bb":"code","df6647ee":"code","91b00bb6":"code","65ab6e24":"code","11621bf3":"code","bdf0b035":"code","16a9b90e":"code","297e731c":"code","e7e83c0b":"code","17dfa077":"code","ed964310":"code","516b53ee":"code","48a68e49":"code","154a07d1":"code","2c6ac086":"code","675c4a5a":"code","9829cb07":"code","fb4d45f1":"code","746631a7":"code","3346a31d":"code","1efef2b5":"code","0504cc71":"code","dc934312":"code","86300951":"code","5bca189e":"code","5a933a3d":"code","45b74436":"code","4edc3974":"code","027ee264":"code","52a86466":"code","e664c40c":"code","ed817f58":"code","ec611827":"code","49c59c65":"code","0d6412b9":"code","e6cfe46f":"code","d5e4ed0d":"code","c06e4e1d":"code","3570b160":"code","9c8d915a":"code","f966b3b4":"code","399404a3":"code","2cd26c23":"code","db2cc0f5":"code","d8018605":"code","a70112e1":"code","0b80dfd3":"code","8ddf54bf":"code","ed1a526a":"code","430cfc84":"code","944e449a":"code","8f55037c":"code","883726c7":"code","fbed4248":"code","03cce3ad":"code","3db1f8cf":"markdown","1d036029":"markdown","a73b25c9":"markdown","5ca1c74c":"markdown","75ee68a1":"markdown","84aa2780":"markdown","76f474f1":"markdown","b3848a57":"markdown","99b82908":"markdown","68f2dc9f":"markdown","d1c64c0a":"markdown","bf66bae3":"markdown","751db376":"markdown","3fd70b9a":"markdown","b026430a":"markdown","55115db4":"markdown","60b4592b":"markdown","013996f5":"markdown","843620b3":"markdown","99c15586":"markdown","a5fe0687":"markdown"},"source":{"a4c9aaf2":"import pandas as pd\n\ncol_names=[\"target\", \"id\", \"date\", \"flag\", \"user\", \"text\"]\ndata_first_50k=pd.read_csv('..\/input\/sentiment140\/training.1600000.processed.noemoticon.csv', header=None, encoding='ISO-8859-1', names=col_names, nrows=50000)\ndata_first_50k.head(10)","06abc755":"col_names=[\"target\", \"id\", \"date\", \"flag\", \"user\", \"text\"]\ndata_last_50k=pd.read_csv('..\/input\/sentiment140\/training.1600000.processed.noemoticon.csv', header=None, encoding='ISO-8859-1', names=col_names, skiprows=1550000)\ndata_last_50k.head(10)","18f6e7d3":"data_first_50k['target'].value_counts()","6557d68b":"data_last_50k['target'].value_counts()","2f27eeb1":"data=pd.concat([data_first_50k,data_last_50k],axis=0)","30d069db":"data.shape","83f4f125":"data['text'][10]","8971087a":"data.reset_index(inplace=True)","fad9e608":"data['text'][10]","b173eb80":"data['target'].unique()","98a10cd5":"len(data['user'].unique())","f65ef055":"len(data['id'].unique()) == len(data['user'].unique())","3e856708":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud, STOPWORDS\n\n%matplotlib inline","862040a5":"wordcloud=WordCloud(background_color=\"black\",width=1600, height=800, random_state=0, collocations=False, stopwords=STOPWORDS).generate(' '.join(data_first_50k['text'].tolist()))\n\nplt.figure(figsize=(20,10), facecolor='k')\nplt.imshow(wordcloud)","79549601":"wordcloud=WordCloud(background_color=\"black\",width=1600, height=800, random_state=0, collocations=False, stopwords=STOPWORDS).generate(' '.join(data_last_50k['text'].tolist()))\n\nplt.figure(figsize=(20,10), facecolor='k')\nplt.imshow(wordcloud)","39b55a3a":"data.isnull().sum()","cd9c4f3d":"data.head()","518de4b0":"import numpy as np\nfrom sklearn.preprocessing import LabelEncoder\ny=data['target']\nle=LabelEncoder()\ny=le.fit_transform(y)\ntype(y)\nnp.unique(y, return_counts=True)","b620c8d0":"y","39441f0f":"import string\nimport re\nimport nltk\n\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import TweetTokenizer","72d4c5d1":"len(data['text'])","1d8d327d":"lemma=WordNetLemmatizer()\ncorpus=[]\n\nfor i in range(0, len(data)):\n    tweet=re.sub(r'\\$\\w*', '', data['text'][i])\n    tweet=re.sub(r'^RT[\\s]+', '', tweet)\n    tweet=re.sub(r'https?:\\\/\\\/.*[\\r\\n]*', '', tweet)\n    tweet=re.sub(r'#', '', tweet)\n    tokenizer=TweetTokenizer(preserve_case=False, strip_handles=True, reduce_len=True)\n    tweet=tokenizer.tokenize(tweet)\n    \n    tweet=[lemma.lemmatize(word) for word in tweet if (word not in stopwords.words('english') and word not in string.punctuation)]\n    tweet=' '.join(tweet)\n    corpus.append(tweet)","bd72f060":"data['text'][515]","2532942d":"corpus[515]","1992c0ab":"len(corpus)","74492b8b":"corpus_df=pd.DataFrame(corpus,columns=['Corpus'])\ncorpus_df[:7]","1b14c56e":"wordcloud=WordCloud(background_color=\"black\",width=1600, height=800, random_state=0, collocations=False, stopwords=STOPWORDS).generate(' '.join(corpus_df['Corpus'].tolist()))\n\nplt.figure(figsize=(20,10), facecolor='k')\nplt.imshow(wordcloud)","5165fd4f":"corpus[:50]","36e77723":"def plot_confusion_matrix(cm, classes, normalize=False, title='Confusion matrix', cmap=plt.cm.RdBu):\n    \"\"\"\n    Source: \n         http:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_confusion_matrix.html\n    \n    Input:\n         cm: confusion matrix\n         classes: output classes name\n         normalize: normalization can be applied by setting `normalize=True`\n    \n    Output:\n         This function prints and plots the confusion matrix.\n    \"\"\"\n    plt.figure(figsize=(20,10))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"green\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","214b00bf":"from sklearn.feature_extraction.text import CountVectorizer","fe6f94bb":"cv=CountVectorizer(max_features=2500, ngram_range=(1,3))","df6647ee":"X_count=cv.fit_transform(corpus).toarray()","91b00bb6":"X_count","65ab6e24":"from sklearn.model_selection import train_test_split","11621bf3":"X_train, X_test, y_train, y_test=train_test_split(X_count, y, test_size=0.20, random_state=0)","bdf0b035":"from sklearn.linear_model import LogisticRegression","16a9b90e":"lr=LogisticRegression(random_state=0, solver='saga', max_iter=5000)","297e731c":"lr.fit(X_train, y_train)","e7e83c0b":"pred_lr_count=lr.predict(X_test)","17dfa077":"y_test[:20]","ed964310":"pred_lr_count[:20]","516b53ee":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report","48a68e49":"accuracy_score(y_test, pred_lr_count)","154a07d1":"cm=confusion_matrix(y_test, pred_lr_count)","2c6ac086":"import itertools\nplot_confusion_matrix(cm, classes=['Negative', 'Positive'])","675c4a5a":"print(classification_report(y_test, pred_lr_count))","9829cb07":"from sklearn.ensemble import RandomForestClassifier","fb4d45f1":"rf=RandomForestClassifier(random_state=0)","746631a7":"rf.fit(X_train,y_train)","3346a31d":"pred_rf_count=rf.predict(X_test)","1efef2b5":"cm=confusion_matrix(y_test, pred_rf_count)\nplot_confusion_matrix(cm, classes=['Negative', 'Positive'])","0504cc71":"print(classification_report(y_test, pred_rf_count))","dc934312":"from sklearn.naive_bayes import MultinomialNB","86300951":"nb=MultinomialNB(alpha=0.1)","5bca189e":"nb.fit(X_train, y_train)","5a933a3d":"pred_nb_count=nb.predict(X_test)","45b74436":"cm=confusion_matrix(y_test, pred_nb_count)\nplot_confusion_matrix(cm, classes=['Negative', 'Positive'])","4edc3974":"print(classification_report(y_test, pred_nb_count))","027ee264":"from sklearn.linear_model import PassiveAggressiveClassifier","52a86466":"pac=PassiveAggressiveClassifier(max_iter=5000)","e664c40c":"pac.fit(X_train, y_train)","ed817f58":"pred_pac_count=pac.predict(X_test)","ec611827":"cm=confusion_matrix(y_test, pred_pac_count)\nplot_confusion_matrix(cm, classes=['Negative', 'Positive'])","49c59c65":"print(classification_report(y_test, pred_pac_count))","0d6412b9":"from sklearn.feature_extraction.text import TfidfVectorizer","e6cfe46f":"tfidf=TfidfVectorizer(max_features=2500, ngram_range=(1,3))","d5e4ed0d":"X_tfidf=tfidf.fit_transform(corpus).toarray()","c06e4e1d":"X_tfidf","3570b160":"X_train, X_test, y_train, y_test=train_test_split(X_tfidf, y, test_size=0.20, random_state=0)","9c8d915a":"lr.fit(X_train, y_train)","f966b3b4":"pred_lr_tfidf=lr.predict(X_test)","399404a3":"cm=confusion_matrix(y_test, pred_lr_tfidf)\nplot_confusion_matrix(cm, classes=['Negative', 'Positive'])","2cd26c23":"print(classification_report(y_test, pred_lr_tfidf))","db2cc0f5":"rf.fit(X_train,y_train)","d8018605":"pred_rf_tfidf=rf.predict(X_test)","a70112e1":"cm=confusion_matrix(y_test, pred_rf_tfidf)\nplot_confusion_matrix(cm, classes=['Negative', 'Positive'])","0b80dfd3":"print(classification_report(y_test, pred_rf_tfidf))","8ddf54bf":"nb.fit(X_train, y_train)","ed1a526a":"pred_nb_tfidf=nb.predict(X_test)","430cfc84":"cm=confusion_matrix(y_test, pred_nb_tfidf)\nplot_confusion_matrix(cm, classes=['Negative', 'Positive'])","944e449a":"print(classification_report(y_test, pred_nb_tfidf))","8f55037c":"pac.fit(X_train, y_train)","883726c7":"pred_pac_tfidf=pac.predict(X_test)","fbed4248":"cm=confusion_matrix(y_test, pred_pac_tfidf)\nplot_confusion_matrix(cm, classes=['Negative', 'Positive'])","03cce3ad":"print(classification_report(y_test, pred_pac_tfidf))","3db1f8cf":"### Logistic regression (tfidf)","1d036029":"### Positive sentiment","a73b25c9":"# Visualization","5ca1c74c":"### Corpus word cloud","75ee68a1":"### Naive bayes (bow)","84aa2780":"# Preprocessing","76f474f1":"# Term Frequency\u2013Inverse Document Frequency (TF-IDF)","b3848a57":"### Negative sentiment","99b82908":"### Logistic Regression (bow)","68f2dc9f":"### Label encoding\n* 0 -> negative\n* 1 -> positive","d1c64c0a":"# Bag of words","bf66bae3":"# Data loading","751db376":"### Splitting the data (bow)","3fd70b9a":"### Passive aggressive (tftdf)","b026430a":"### Random forest (bow)","55115db4":"### Passive aggressive (bow)","60b4592b":"### Naive bayes (tftdf)","013996f5":"### Splitting the data (tftdf)","843620b3":"1. I have used 100k data (First 50k (Negative sentiment) + last 50k (Positive sentiment))\n2. Word cloud visualization\n3. Twitter preprocessing\n4. Bag of words and term frequency\u2013inverse document frequency (TF-IDF)\n5. Logistic regression, random forest classifier, naive bayes and passive aggressive classifier","99c15586":"### Function for confusion matrix visualization","a5fe0687":"### Random forest (tftdf)"}}