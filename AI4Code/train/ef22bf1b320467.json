{"cell_type":{"64f5efa5":"code","1de0d23a":"code","884e7f1f":"code","c35929d5":"code","40ca1130":"code","3806eab0":"code","068ba023":"code","2ca56752":"code","8f5c98c9":"code","d7bfa498":"code","bbb0c2e5":"code","16397e53":"code","843f2b5b":"code","bbd02213":"markdown","2fe35cd5":"markdown","9986cd49":"markdown","17a8a5ad":"markdown","cc286e10":"markdown","6c8b9ab2":"markdown","bac0b7ae":"markdown","09b43f1e":"markdown"},"source":{"64f5efa5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1de0d23a":"import pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline \nfrom sklearn.utils import shuffle\nimport matplotlib.pyplot as plt\nfrom numpy import array\nfrom numpy import argmax\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import svm\nfrom sklearn.feature_extraction.text import CountVectorizer,HashingVectorizer\nfrom sklearn.feature_selection import chi2\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Activation\nfrom keras.utils import np_utils\nimport re\nimport seaborn as sns\nfrom keras.preprocessing import sequence\nfrom keras.preprocessing.text import one_hot\nfrom keras.preprocessing.text import text_to_word_sequence\nfrom sklearn.svm import LinearSVC","884e7f1f":"train = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/train.csv',delimiter=',',encoding='latin-1', na_filter=False)\ntest = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/test.csv',delimiter=',',encoding='latin-1', na_filter=False)\ntrain.head(10)","c35929d5":"train.sentiment.value_counts().plot(figsize=(12,5),kind='bar',color='green');\nplt.xlabel('Sentiment')\nplt.ylabel('Total Number Of Individual Sentiment for Training')","40ca1130":"lens = [len(x) for x in train.text]\nplt.figure(figsize=(12, 5));\nprint (max(lens), min(lens), np.mean(lens))\nsns.distplot(lens);\nplt.title('Text length distribution')","3806eab0":"lens = [len(x) for x in train.selected_text]\nplt.figure(figsize=(12, 5));\nprint (max(lens), min(lens), np.mean(lens))\nsns.distplot(lens);\nplt.title('Text length distribution')","068ba023":"from sklearn.feature_extraction import text\nstop_words = text.ENGLISH_STOP_WORDS\ntrain['text']=train['text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop_words)]))\ntrain.head(10)","2ca56752":"X_train=train['text']+' '+ train['sentiment']\ny_train=train['selected_text']","8f5c98c9":"X_test= test['text']+' '+ test['sentiment']","d7bfa498":"import nltk\nimport re\nimport string\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\ntest_subset=test['text']\nsentiment= test['sentiment']\n\nsid = SentimentIntensityAnalyzer()\nword_list=[]\ni=0\nfor word in test_subset:\n        #Removing URL\n        word = re.sub('http[s]?:\/\/\\S+', '', word)\n        split_text= word.split()\n        #Removing Punctuation\n        #word=re.sub('[!#?,.:\"-;]', '', word)\n        \n        score_list=[]\n        \n        if sentiment[i]=='positive':\n            for w in split_text:\n                score=sid.polarity_scores(w)['compound']\n                score_list.append(score)\n                max_index=np.argmax(score_list)\n            word_list.append(split_text[max_index])\n                    \n        elif sentiment[i]=='negative':\n            for w in split_text:\n                score=sid.polarity_scores(w)['compound']\n                score_list.append(score)\n                min_index=np.argmin(score_list)\n            word_list.append(split_text[min_index])\n         \n        else:\n             word_list.append(word)\n                \n        i=i+1\n       \n ","bbb0c2e5":"submission = pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv\")\nsubmission[\"selected_text\"]= word_list","16397e53":"submission.head(10)","843f2b5b":"submission.to_csv('submission.csv', index=False)","bbd02213":"## Training Data","2fe35cd5":"## Sentiment Extractor ","9986cd49":"## Submission","17a8a5ad":"## Text Length Distribution","cc286e10":"## Selected Text Distribution","6c8b9ab2":"## Sentiment Overview","bac0b7ae":"## Removing Stopwords","09b43f1e":"## Testing Data"}}