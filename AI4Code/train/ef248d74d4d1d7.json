{"cell_type":{"e55c5d43":"code","15a5a947":"code","5660582a":"code","245cecd7":"code","aa51bd32":"code","841aa410":"code","b63c1782":"code","2760ebc5":"code","e88bb45a":"code","2b2faf33":"code","6e0f8598":"code","0beef81f":"code","b3056ba8":"code","272dc64e":"code","afbb8eb5":"code","59a167c1":"code","1b6eb014":"code","ed23cb7c":"code","1d26b754":"code","bb95a8e7":"code","70db2c8e":"code","61738d8f":"code","256cda00":"markdown","5c61a1be":"markdown","b84de9f3":"markdown","2539761d":"markdown","9bd738fe":"markdown","390ab6a8":"markdown","9a1de261":"markdown"},"source":{"e55c5d43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n\n#load packages\nimport sys #access to system parameters https:\/\/docs.python.org\/3\/library\/sys.html\nprint(\"Python version: {}\". format(sys.version))\nimport seaborn as sns\nimport pandas as pd #collection of functions for data processing and analysis modeled after R dataframes with SQL like features\nprint(\"pandas version: {}\". format(pd.__version__))\n\nimport matplotlib.pyplot as plt\nimport matplotlib #collection of functions for scientific and publication-ready visualization\nprint(\"matplotlib version: {}\". format(matplotlib.__version__))\n\nimport numpy as np #foundational package for scientific computing\nprint(\"NumPy version: {}\". format(np.__version__))\n\nimport scipy as sp #collection of functions for scientific computing and advance mathematics\nprint(\"SciPy version: {}\". format(sp.__version__)) \n\nimport IPython\nfrom IPython import display #pretty printing of dataframes in Jupyter notebook\nprint(\"IPython version: {}\". format(IPython.__version__)) \n\nimport sklearn #collection of machine learning algorithms\nprint(\"scikit-learn version: {}\". format(sklearn.__version__))\n\n#misc libraries\nimport random\nimport time\n\n\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\nprint('-'*25)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","15a5a947":"#Loading the single csv file to a variable named 'airbnb'\nairbnb=pd.read_csv(\"..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv\")","5660582a":"airbnb.head(10)","245cecd7":"print (\"The shape of the  data is (row, column):\"+ str(airbnb.shape))\nprint (airbnb.info())","aa51bd32":"print('Columns with Null values')\nairbnb.isnull().sum()","841aa410":"airbnb['reviews_per_month'].fillna(value = 0 , inplace = True)\nairbnb.drop(['id' , 'host_id' , 'host_name' ,'last_review'] , axis = 1 , inplace = True)\nairbnb.head()","b63c1782":"plt.figure(figsize = (15,7))\nplt.subplot(2,2,1)\nsns.countplot(x=\"neighbourhood_group\", data=airbnb, palette=\"coolwarm_r\",\n             )\nfig = plt.gcf()\nfig.set_size_inches(10,10)\nplt.subplot(222)\nax=sns.countplot(x=\"neighbourhood\", data=airbnb, palette=\"coolwarm_r\",\n              order=airbnb.neighbourhood.value_counts().iloc[:10].index)\nfig = plt.gcf()\nfig.set_size_inches(10,10)\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_xticklabels(ax.get_xticklabels(), fontsize=9)\nplt.tight_layout()\nplt.show()\n\n#Room type\nplt.subplot(223)\nsns.countplot(x=\"room_type\", data=airbnb, palette=\"coolwarm_r\",\n              order=airbnb.room_type.value_counts().index)\nfig = plt.gcf()\nfig.set_size_inches(10,10)\n\n\nplt.show()","2760ebc5":"plt.figure(figsize = (15, 15))\nplt.style.use('seaborn-white')\nplt.subplot(221)\nsns.scatterplot(x=\"latitude\", y=\"longitude\",hue=\"neighbourhood_group\", data=airbnb)\nplt.subplot(222)\nsns.scatterplot(x=\"latitude\", y=\"longitude\",hue=\"room_type\", data=airbnb)\nplt.subplot(223)\nsns.scatterplot(x=\"latitude\", y=\"longitude\",hue=\"price\", data=airbnb)\nplt.subplot(224)\nsns.scatterplot(x=\"latitude\", y=\"longitude\",hue=\"availability_365\", data=airbnb)\nplt.show()","e88bb45a":"import pandas as pd\nimport geopandas as gpd\nimport math\nimport folium\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster\nm_1 = folium.Map(location=[40.7128,-74.0060], tiles='cartodbpositron', zoom_start=12)\n\n# Adding a heatmap to the base map\nHeatMap(data=airbnb[['latitude', 'longitude']], radius=10).add_to(m_1)\n\n# Displaying the map\nm_1","2b2faf33":"import tensorflow as tf\nimport keras \nfrom keras.layers import *\nfrom keras.models import *\nfrom keras import backend as K\nfrom sklearn.preprocessing import LabelEncoder\nfrom keras.utils import to_categorical","6e0f8598":"tf.__version__","0beef81f":"y = np.array(list(airbnb['price'].values))\ntrain = airbnb[['neighbourhood','room_type' , 'reviews_per_month'] ]","b3056ba8":"y","272dc64e":"label_ne = LabelEncoder()\nlabel_room = LabelEncoder()\n\nlabeled_ne = label_ne.fit_transform(list(train['neighbourhood']))\nlabeled_room = label_room.fit_transform(list(train['room_type']))\n\nx_ne = to_categorical(labeled_ne)\nx_ro = to_categorical(labeled_room)","afbb8eb5":"x_re = np.array(list(train['reviews_per_month'].values))","59a167c1":"def model_n():\n    inpA = Input(shape = (221,))\n    l = Dense(64 , activation = 'relu' )(inpA)\n    l = BatchNormalization(momentum=0.2)(l)\n    l = Dense(32 , activation= 'relu')(l)\n    l = BatchNormalization(momentum=0.2)(l)\n    l = Dropout(0.2)(l)\n    l = Dense(16 , activation= 'relu')(l)\n    l = BatchNormalization(momentum=0.2)(l)\n    l = Dropout(0.2)(l)\n    \n    model = Model(inpA , l)\n    return model\ndef model_r(linear = False):\n    if linear == True:\n        inpA = Input(shape = (1,))\n    else:\n        inpA = Input(shape = (3,))\n    l = Dense(32 , activation = 'relu' )(inpA)\n    l = BatchNormalization(momentum=0.2)(l)\n    l = Dense(16 , activation= 'relu')(l)\n    l = BatchNormalization(momentum = 0.2)(l)\n    l = Dropout(0.2)(l)\n    \n    model = Model(inpA , l)\n    return  model\n    ","1b6eb014":"cate = model_n()\nmlp0 = model_r(True)\nmlp1 = model_r(False)","ed23cb7c":"combinedInput = concatenate([cate.output,mlp0.output, mlp1.output])\nx = Dense(4, activation=\"relu\")(combinedInput)\nx = Dense(1, activation=\"linear\")(x)\nmodel = Model(inputs=[cate.input, mlp0.input , mlp1.input], outputs=x)\n","1d26b754":"model.compile(loss = 'mae' , metrics = ['mse'] , optimizer='adam')\nmodel.fit([x_ne,x_re,x_ro] , y , epochs = 5)","bb95a8e7":"pre=model.predict([x_ne,x_re,x_ro])","70db2c8e":"for i in range(10):\n    print('predicted:{} ,actual:{} '.format( pre[i],y[i]))\n    ","61738d8f":"fro i i","256cda00":"1.In neighbourhood group(location),Manhattan and Brooklyn stands in the top 2 positions respectively owing to the size and number of people who booked a room and it is followed by Queens, Bronx and Staten Island\n\n2.The top 10 of neighbourhood(area) is displayed second and Williamsburg stands top with most no. of books of nearly 3000\n\n3.Most of the Entire home were booked than private and shared room type\n","5c61a1be":"*Importing Libraries*","b84de9f3":"1. **Price** is our target Variable\n2. we will drop columns like **id** , **host_name** as they mean less sense\n","2539761d":"**Extracting Data**","9bd738fe":"**GEOGRAPHICAL VISUALISATION**","390ab6a8":"We have max null values for columns which are last_review,reviews_per_month ,\nwhich happens to be not of much value for our data","9a1de261":"**Checking for NUll values**"}}