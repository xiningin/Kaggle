{"cell_type":{"a2b3dc97":"code","cd4f4587":"code","1d4df978":"code","715f1a01":"code","3b964150":"code","f4dff3a1":"code","395d0acb":"code","11147323":"code","c73a8bf3":"code","72cfafeb":"code","da47146a":"code","665ed170":"code","35b81977":"code","b4fb1e06":"code","2062f97e":"code","dc3508b8":"code","e65491a2":"code","fcf9a5bb":"code","1b1357d3":"code","28a72e58":"code","ce637366":"code","a3a07038":"code","a49df27e":"code","4ae40130":"code","7401aa9c":"code","d1f3a565":"code","8ee6f1a9":"code","11934423":"code","7b2d513a":"code","20786395":"code","d61e6c9d":"code","12f86228":"code","2a11b771":"markdown","ec0f3574":"markdown","209a51ea":"markdown","4d012e1a":"markdown","45264ff0":"markdown","99d4354e":"markdown","3bff8071":"markdown"},"source":{"a2b3dc97":"!pip install openpyxl","cd4f4587":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree\nfrom sklearn import metrics\npd.options.display.max_columns = None\npd.options.display.max_rows = None","1d4df978":"dataset = pd.read_excel(\"..\/input\/covid19\/Kaggle_Sirio_Libanes_ICU_Prediction.xlsx\", engine=\"openpyxl\")","715f1a01":"dataset.head(5)","3b964150":"dataset.info()","f4dff3a1":"#total number of patients\nprint(f\"The total number of patients from the dataset is {dataset['PATIENT_VISIT_IDENTIFIER'].max()+1}\")","395d0acb":"# proportion of patients admitted\/ not admitted to ICU \nICU_prop = dataset[dataset['WINDOW'] == 'ABOVE_12']\n#group by ICU admission\nICU_prop_main = ICU_prop.groupby('ICU')['PATIENT_VISIT_IDENTIFIER'].count().reset_index()\n\nlabels = [\"not-admitted\", \"admitted\"]\nplt.title('ICU admissions proportion', fontdict= {'fontsize' : 16}, pad=75)\nplt.pie(ICU_prop_main['PATIENT_VISIT_IDENTIFIER'],textprops={'fontsize': 12},radius =2, labels = labels, startangle=90, autopct=lambda p : '{:.2f}%  ({:,.0f}patients)'.format(p,p * sum(ICU_prop_main['PATIENT_VISIT_IDENTIFIER'])\/100))\nplt.show()","11147323":"#proportion of patients below or above 65\nprop_65 = ICU_prop.groupby('AGE_ABOVE65')['PATIENT_VISIT_IDENTIFIER'].count().reset_index()\n\nlabels = [\"Below-65\", \"Above-65\"]\nplt.title('Proportion of ages; below\/above 65', fontdict= {'fontsize' : 16}, pad=75)\nplt.pie(prop_65['PATIENT_VISIT_IDENTIFIER'],textprops={'fontsize': 12},radius =2, labels = labels, startangle=90, autopct=lambda p : '{:.2f}%  ({:,.0f}patients)'.format(p,p * sum(prop_65['PATIENT_VISIT_IDENTIFIER'])\/100))\nplt.show()\n#print(f\"The proportion of patients above or below 65 is: *{prop_65['PATIENT_VISIT_IDENTIFIER'][0]} patients below 65 and *{prop_65['PATIENT_VISIT_IDENTIFIER'][1]} above 65\")","c73a8bf3":"#Age distribution of patients (below or above 65) according to ICU admissions\nAGE_65_ICU = ICU_prop[ICU_prop['ICU'] == 1]\nAGE_65_ICU = AGE_65_ICU.groupby('AGE_ABOVE65')['PATIENT_VISIT_IDENTIFIER'].count().reset_index()\n\nlabels = [\"Below-65\", \"Above-65\"]\nplt.title('ICU admissions proportion for ages below\/above 65', fontdict= {'fontsize' : 16}, pad=75)\nplt.pie(AGE_65_ICU['PATIENT_VISIT_IDENTIFIER'],textprops={'fontsize': 12},radius =2, labels = labels, startangle=90, autopct=lambda p : '{:.2f}%  ({:,.0f}patients)'.format(p,p * sum(AGE_65_ICU['PATIENT_VISIT_IDENTIFIER'])\/100))\nplt.show()\n","72cfafeb":"#Age distribution of patients(percentiles) according to ICU admissions\nAGE_prop_percentil = ICU_prop[ICU_prop['ICU'] == 1]\nAGE_prop_percentil = AGE_prop_percentil.groupby('AGE_PERCENTIL')['PATIENT_VISIT_IDENTIFIER'].count().reset_index()\nAGE_prop_percentil.head()\nplt.figure(figsize=(8,5))\nplt.bar(AGE_prop_percentil[\"AGE_PERCENTIL\"],AGE_prop_percentil[\"PATIENT_VISIT_IDENTIFIER\"])\nplt.xticks(rotation = 70)\nplt.ylabel(\"Patients Count\")\nplt.xlabel(\"Percentile\")\nplt.title('ICU admissions proportion according to AGE_PERCENTILE', fontdict= {'fontsize' : 14})\nplt.show()","da47146a":"dataset.shape","665ed170":"# create new column to indicate if a patient eventually went to ICU (ICU_SUM)\ndf_admitted = (dataset.groupby(\"PATIENT_VISIT_IDENTIFIER\")[\"ICU\"].sum()>0).reset_index()*1\ndf_admitted.columns = [\"PATIENT_VISIT_IDENTIFIER\", \"ICU_SUM\"]","35b81977":"dataset_admitted = pd.merge(dataset, df_admitted, on = \"PATIENT_VISIT_IDENTIFIER\")","b4fb1e06":"#check for missing data\ndataset.isna().sum()","2062f97e":"# fill missing values\ndataset_admitted.fillna(method='ffill', inplace = True)\ndataset_admitted.fillna(method='bfill', inplace = True)","dc3508b8":"#drop rows with ICU == 1 ie drop data when the target variable is present, as stipulated by dataset author\ndataset_ = dataset_admitted[dataset_admitted.ICU == 0].reset_index(drop= True)","e65491a2":"#keeping only window 0-2 data\ndataset_ = dataset_[dataset_.WINDOW == \"0-2\"].reset_index(drop = True)","fcf9a5bb":"#drop unnecessary columns\nfinal_data = dataset_.drop([\"PATIENT_VISIT_IDENTIFIER\", \"WINDOW\", \"ICU\"],axis = 1)","1b1357d3":"#look for categorical columns and convert them\ncat_columns = final_data.select_dtypes(object).columns \n#print()\nfinal_data = pd.get_dummies(final_data, columns = cat_columns)","28a72e58":"#drop duplicated columns\n#columns were values are equal\nfinal_data= final_data.reset_index().T.drop_duplicates().T.set_index('index')","ce637366":"final_data.head()","a3a07038":"final_data.shape","a49df27e":"#check for empty  or null cells\nnp.where(pd.isnull(final_data))","4ae40130":"#we reduce dataset  variables by checking correlations  with target column\ncorr_data = final_data.corrwith(final_data[\"ICU_SUM\"])\nprint(corr_data)\n","7401aa9c":"corr_data.describe()","d1f3a565":"#select columns from correlation data with conditions\nnp_corr_data = np.array(corr_data)\ncolumns = []\nfor i in np_corr_data:\n  if(i):\n    if(i>0.04):\n      columns.append(True)\n    elif(i<-0.02):\n      columns.append(True)\n    else:\n      columns.append(False)\n  else:\n    columns.append(False)\n\nprint(len(columns), columns.count(True))\nselection = np.array(columns)\n#print(selection)\nselected_final_data = final_data.loc[:, selection]\nselected_final_data.head()","8ee6f1a9":"#create x and y data\nX_data = selected_final_data.drop(['ICU_SUM'], axis = 1)\nY_data = selected_final_data[['ICU_SUM']]","11934423":"print(X_data.shape)\nprint(Y_data.shape)","7b2d513a":"#train test split\nX_train, X_test, Y_train, Y_test = train_test_split(X_data, Y_data, test_size=0.30, random_state=1)","20786395":"#fit model\nmodel =tree.DecisionTreeClassifier(criterion='entropy',max_depth=4,max_leaf_nodes=10)\nmodel.fit(X_train,Y_train)","d61e6c9d":"#model prediction \ny_pred = model.predict(X_test)","12f86228":"#accuracy, precision and recall\nprint(\"Accuracy:{:.6f}\".format(metrics.accuracy_score(Y_test, y_pred)))\nprint(\"Precision:{:.6f}\".format(metrics.precision_score(Y_test, y_pred)))\nprint(\"Recall:{:.6f}\".format(metrics.recall_score(Y_test, y_pred)))","2a11b771":"**Import Dataset**","ec0f3574":"**Exploratory Data Analysis**","209a51ea":"****Import Libraries****","4d012e1a":"**MODEL AND EVALUATION**","45264ff0":"**Data PreProcessing & Feature Engineering**","99d4354e":"**Feature Selection**","3bff8071":"The model created here is for ICU prediction for patients admitted under 0-2hrs "}}