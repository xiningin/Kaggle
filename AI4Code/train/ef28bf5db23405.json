{"cell_type":{"482fd3dc":"code","0ed5c45c":"code","b4efcbd1":"code","78faff65":"code","06b8d563":"code","65b5275e":"code","f28666f8":"code","13d22ce3":"code","d4cd7888":"code","86f61c09":"markdown"},"source":{"482fd3dc":"import numpy as np\nimport pandas as pd\n# pd.set_option('display.max_colwidth', -1)\n\nimport os\nimport json\nimport pickle\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0ed5c45c":"from langdetect import detect\n\ndef get_lang(row):\n    try:\n        return detect(row)\n    except:\n        return None","b4efcbd1":"from bs4 import BeautifulSoup\n\ndef parse_html(html):\n    soup = BeautifulSoup(html, 'lxml')       \n    \n    article = soup.find('div', class_='postArticle-content')    \n    content = article.getText(separator=' ')\n    imgs = len(article.select('img'))\n    hrefs = len(article.select('a'))    \n    \n    ul = soup.find('ul', class_='tags')\n    tags = []\n    if (ul):\n        tags = [a.text.replace(' ','') for a in ul.find_all('a')]    \n    \n    return content, imgs, hrefs, tags","78faff65":"def read_json_line(line=None):\n    result = None\n    try:        \n        result = json.loads(line)\n    except Exception as e:      \n        # Find the offending character index:\n        idx_to_replace = int(str(e).split(' ')[-1].replace(')',''))      \n        # Remove the offending character:\n        new_line = list(line)\n        new_line[idx_to_replace] = ' '\n        new_line = ''.join(new_line)     \n        return read_json_line(line=new_line)\n    return result","06b8d563":"def process_file(path_to_in_file):    \n    with open(path_to_in_file, encoding='utf-8') as in_file:\n        rows = []\n        for line in in_file:\n            json_data = read_json_line(line)\n            \n            html = json_data['content'].replace('\\n', ' ').replace('\\r', ' ')            \n            content, img_cnt, href_cnt, tags = parse_html(html)\n            \n            rows.append([\n                pd.to_datetime(json_data['published']['$date']),\n                json_data['title'],\n                json_data['url'].split('\/\/')[-1].split('\/')[0],\n                json_data['meta_tags']['description'],                \n                json_data['meta_tags']['author'],\n                json_data['meta_tags']['twitter:data1'].split(' ')[0],                          \n                tags,\n                content,\n                img_cnt,\n                href_cnt\n            ])\n            \n            # if (len(rows)==1000): break # dev mode\n        \n        columns = [\n            'ts',\n            'title',\n            'domain',\n            'description',             \n            'author', \n            'read_time', \n            'tags',\n            'content',\n            'img_cnt',\n            'href_cnt'\n        ]\n        df = pd.DataFrame(rows, columns=columns)\n        \n        #df['title'] = df['title'].map(lambda x: x.split('\u2013')[0])\n        \n        df['read_time'] = df['read_time'].astype(np.int8)        \n        df['content_len'] = df['content'].map(len).astype(np.int32)\n        df['title_len'] = df['title'].map(len).astype(np.int32)\n        df['desc_len'] = df['description'].map(len).astype(np.int32)        \n        \n        df = process_ts(df)\n        df = process_lang(df)\n        df = process_tags(df)\n        \n        return df\n\ndef process_ts(df):\n    df['mm'] = df['ts'].apply(lambda ts: ts.month).astype(np.int8)\n    df['yyyy'] = df['ts'].apply(lambda ts: ts.year).astype(np.int16)\n    df['yyyymm'] = df['ts'].apply(lambda ts: 100 * ts.year + ts.month).astype(np.int32)\n    df['hour'] = df['ts'].apply(lambda ts: ts.hour).astype(np.int8)\n    df['dayofweek'] = df['ts'].apply(lambda ts: ts.dayofweek).astype(np.int8)\n    df['weekend'] = df['ts'].apply(lambda ts: ts.dayofweek > 5).astype(np.int8)\n    df['morning'] = df['ts'].apply(lambda ts: (ts.hour >= 7) & (ts.hour < 12)).astype(np.int8)\n    df['day'] = df['ts'].apply(lambda ts: (ts.hour >= 12) & (ts.hour < 18)).astype(np.int8)\n    df['evening'] = df['ts'].apply(lambda ts: (ts.hour >= 18) & (ts.hour < 23)).astype(np.int8)\n    df['night'] = df['ts'].apply(lambda ts: (ts.hour >= 23) | (ts.hour < 7)).astype(np.int8) # or!\n    return df\n\ndef process_lang(df):\n    df['lang'] = df['description'].map(get_lang)\n    #df.loc[~df.lang.isin(['en','pt','fr','es','de','it']), 'lang'] = 'rare'\n    return df\n\ndef process_tags(df):\n    df['tags_cnt'] = df['tags'].map(len).astype(np.int8)\n    df['tags_str'] = df['tags'].map(' '.join)\n    return df","65b5275e":"%%time\ntrain = process_file(path_to_in_file='..\/input\/train.json')\ntest = process_file(path_to_in_file='..\/input\/test.json')\n\ntrain['target'] = pd.read_csv('..\/input\/train_log1p_recommends.csv')['log_recommends']\ntest['id'] = pd.read_csv('..\/input\/sample_submission.csv')['id']\n\ntrain.to_pickle('train.data')\ntest.to_pickle('test.data') ","f28666f8":"train = pd.read_pickle('train.data')\ntest = pd.read_pickle('test.data')","13d22ce3":"train.tail().T","d4cd7888":"test.head().T","86f61c09":"## How good is your Medium article?"}}