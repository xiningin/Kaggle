{"cell_type":{"6701d49f":"code","9b354e95":"code","c1550bce":"code","b8ae72df":"code","5d1285e1":"code","c70ee7c5":"code","ab35d42f":"code","e14a3aad":"code","b4c30535":"code","82a557d7":"code","58a7a723":"code","ec558abd":"code","841e1f85":"markdown","3d164eed":"markdown","3f2ce366":"markdown","46529a36":"markdown","63a26e8d":"markdown","bdce0feb":"markdown","9ee96bb9":"markdown"},"source":{"6701d49f":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\n\nfrom sklearn.metrics import confusion_matrix, classification_report","9b354e95":"data = pd.read_csv('..\/input\/honey-bee-pollen\/PollenDataset\/pollen_data.csv', usecols=['filename', 'pollen_carrying'])","c1550bce":"data","b8ae72df":"data.info()","5d1285e1":"def preprocess_df(df, image_path):\n    df = df.copy()\n    \n    # Change filenames into filepaths\n    df['filename'] = df['filename'].apply(lambda x: image_path \/ Path(x)).astype(str)\n    \n    # Create text labels for the images\n    df['pollen_carrying'] = df['pollen_carrying'].replace({0: \"NO POLLEN\", 1: \"POLLEN\"})\n    \n    # Train-test split\n    train_df, test_df = train_test_split(df, train_size=0.7, shuffle=True, random_state=1)\n    \n    return train_df, test_df","c70ee7c5":"train_df, test_df = preprocess_df(data, image_path='..\/input\/honey-bee-pollen\/PollenDataset\/images')","ab35d42f":"train_df","e14a3aad":"train_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.\/255,\n    validation_split=0.2\n)\n\ntest_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.\/255\n)","b4c30535":"train_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='filename',\n    y_col='pollen_carrying',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='binary',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='training'\n)\n\nval_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='filename',\n    y_col='pollen_carrying',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='binary',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='validation'\n)\n\ntest_images = test_generator.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='filename',\n    y_col='pollen_carrying',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='binary',\n    batch_size=32,\n    shuffle=False\n)","82a557d7":"inputs = tf.keras.Input(shape=(224, 224, 3))\nx = tf.keras.layers.Conv2D(filters=16, kernel_size=(3, 3), activation='relu')(inputs)\nx = tf.keras.layers.MaxPool2D()(x)\nx = tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu')(x)\nx = tf.keras.layers.MaxPool2D()(x)\nx = tf.keras.layers.GlobalAveragePooling2D()(x)\nx = tf.keras.layers.Dense(128, activation='relu')(x)\nx = tf.keras.layers.Dense(128, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=['accuracy']\n)\n\nhistory = model.fit(\n    train_images,\n    validation_data=val_images,\n    epochs=100,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=5,\n            restore_best_weights=True\n        )\n    ]\n)","58a7a723":"results = model.evaluate(test_images, verbose=0)\nprint(\"Accuracy: {:.2f}%\".format(results[1] * 100))\n\npredictions = np.squeeze(model.predict(test_images) >= 0.5).astype(np.int)\n\ncm = confusion_matrix(test_images.labels, predictions, labels=[0, 1])\nclr = classification_report(test_images.labels, predictions, labels=[0, 1], target_names=[\"NO POLLEN\", \"POLLEN\"])\n\nplt.figure(figsize=(6, 6))\nsns.heatmap(cm, annot=True, fmt='g', vmin=0, cmap='Blues', cbar=False)\nplt.xticks(ticks=[0.5, 1.5], labels=[\"NO POLLEN\", \"POLLEN\"])\nplt.yticks(ticks=[0.5, 1.5], labels=[\"NO POLLEN\", \"POLLEN\"])\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.title(\"Confusion Matrix\")\nplt.show()\n\nprint(\"Classification Report:\\n----------------------\\n\", clr)","ec558abd":"plt.figure(figsize=(10, 10))\n\nfor i in range(16):\n    plt.subplot(4, 4, i + 1)\n    plt.imshow(test_images[0][0][i])\n    plt.title(\n        \"NO POLLEN\" if predictions[i] == 0 else \"POLLEN\",\n        color='blue' if predictions[i] == test_images.labels[i] else 'red'\n    )\n    plt.axis('off')\n\nplt.suptitle(\"Sample Classifications\", size=24)\nplt.show()","841e1f85":"# Results","3d164eed":"# Getting Started","3f2ce366":"# Task for Today  \n\n***\n\n## Pollen Detection in Honeybee Images  \n  \nGiven *images of honeybees*, let's try to detect **pollen** in a given image.  \n  \nWe will use a TensorFlow\/Keras convolutional neural network to make our predictions.","46529a36":"# Training","63a26e8d":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/dSYuo6Isbto","bdce0feb":"# Preprocessing","9ee96bb9":"# Creating Generators"}}