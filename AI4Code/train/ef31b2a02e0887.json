{"cell_type":{"db7c9b75":"code","d8a3517b":"code","d63d0d70":"code","a795f7cc":"code","3bf5245f":"code","ca531309":"code","d62531ba":"code","80d9d497":"markdown","7c3d1390":"markdown","345185f9":"markdown","5918eb88":"markdown","539d441c":"markdown","941d7fc5":"markdown","a359b1df":"markdown"},"source":{"db7c9b75":"import numpy as np\nimport pandas as pd\nimport cv2\nimport os\nimport matplotlib.pyplot as plt\n\nfrom keras import layers\n\nfrom keras import models\n\nfrom keras.layers import (Input, Dense, Activation, ZeroPadding2D,\nBatchNormalization, Flatten, Conv2D, concatenate, Lambda)\n\nfrom keras.layers import (AveragePooling2D, MaxPooling2D, Dropout,\nGlobalMaxPooling2D, GlobalAveragePooling2D)\n\nfrom keras.models import Model, load_model\nfrom keras import regularizers, optimizers\n\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.utils import to_categorical\n\nprint(os.listdir(\"..\/input\"))\nprint(os.listdir('..\/input\/self driving car training data\/data'))","d8a3517b":"path = '..\/input\/self driving car training data\/data'\npath = os.path.join(path,'driving_log.csv')\n\ndata_frame = pd.read_csv(path)\ncenter = data_frame[data_frame.columns[0]].values\nleft = data_frame[data_frame.columns[1]].values\nright = data_frame[data_frame.columns[2]].values\nsteering = data_frame[data_frame.columns[3]].values\n\nno_of_examples = len(steering)\nprint(no_of_examples)","d63d0d70":"def random_flip(image, steering_angle):\n    \n    image = cv2.flip(image, 1)\n    steering_angle = -steering_angle\n    \n    return image, steering_angle","a795f7cc":"train_x = []\ntrain_y = []\n\nimg_folder = '..\/input\/self driving car training data\/data\/IMG'\nstear_adjust_factor = 0.2\nIMAGE_HEIGHT = 100 \nIMAGE_WIDTH = 100\n\nfor i in range(no_of_examples):\n    \n    for choice in range(3):\n        \n        if choice == 0: #Center\n            img = cv2.imread(os.path.join(img_folder,center[i].split('IMG\/')[1]))\n            steering_angle = steering[i]\n\n        elif choice == 1: #Left\n            img = cv2.imread(os.path.join(img_folder,left[i].split('IMG\/')[1]))\n            steering_angle = steering[i] + stear_adjust_factor\n\n        elif choice == 2: #Right\n            img = cv2.imread(os.path.join(img_folder,right[i].split('IMG\/')[1]))\n            steering_angle = steering[i] - stear_adjust_factor\n        \n        img = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)[:,:,1]\n        img = cv2.resize(img,(IMAGE_HEIGHT,IMAGE_WIDTH))\n        \n        train_x.append(img)\n        train_y.append(steering_angle)\n        \n        flip_img,steering_angle = random_flip(img,steering_angle)\n                \n        train_x.append(flip_img)\n        train_y.append(steering_angle)\n        \n\ntrain_x = np.array(train_x)\ntrain_x = np.reshape(train_x,[train_x.shape[0],train_x.shape[1],train_x.shape[2],1])\n\ntrain_y = np.array(train_y)\ntrain_y = np.reshape(train_y,[train_y.shape[0],1])\n\nprint(train_x.shape)\nprint(train_y.shape)","3bf5245f":"x_train,x_test,y_train,y_test = train_test_split(train_x,train_y,random_state=42,test_size=.20)","ca531309":"def model(height,width):\n        \n    x_input = Input(shape=(height,width,1))\n    \n    x = Lambda(lambda x: x\/127.5-1.0)(x_input)\n    \n    x = Conv2D(32,(3,3),activation='relu',padding='same')(x_input)\n    \n    x = Conv2D(32,(3,3),activation='relu',padding='same')(x)\n    x = MaxPooling2D((2,2),padding='valid')(x)\n    \n    x = Conv2D(64,(3,3),activation='relu',padding='same')(x)\n    \n    x = Conv2D(64,(3,3),activation='relu',padding='same')(x)\n    x = MaxPooling2D((2,2),padding='valid')(x)\n    \n    x = Conv2D(128,(3,3),activation='relu',padding='same')(x)\n    x = MaxPooling2D((2,2),padding='valid')(x)\n    \n    x = Conv2D(128,(3,3),activation='relu',padding='same')(x)\n    x = MaxPooling2D((2,2),padding='valid')(x)\n    \n    x = Flatten()(x)\n    x = Dropout(0.5)(x)\n       \n    x = BatchNormalization()(x)\n    x = Dense(512)(x)\n    x = Dense(256)(x)\n    x = Dense(64)(x)\n    x = Dense(1)(x)\n    \n    model = Model(inputs=x_input,outputs=x,name='model')\n    \n    return model\n    \nmodel = model(IMAGE_HEIGHT,IMAGE_WIDTH)\nprint(model.summary())\n\nopt = optimizers.Adam(lr=0.0001)\nmodel.compile(loss='mse',\n             optimizer=opt,\n             metrics=['mse'])\n\nhist = model.fit(x_train,y_train,validation_data=(x_test,y_test),batch_size=32,epochs=10)","d62531ba":"model.save('Saved_Model.h5')","80d9d497":"**Helper Function for data Augmentation**","7c3d1390":"**Neural Network Architecture**","345185f9":"**Saving the Model**","5918eb88":"**Splitting the Training Data into Train and Test sets**","539d441c":"**Importing Modules**","941d7fc5":"**Collecting the Training Data**","a359b1df":"**Reading Driving Data from driving_log.csv**"}}