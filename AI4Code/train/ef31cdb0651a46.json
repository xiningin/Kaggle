{"cell_type":{"d4708bee":"code","8f5ed73a":"code","9da6bf1d":"code","2ea8865a":"code","13c6e6b2":"code","fc2189e7":"code","0f44fcf3":"code","48e3e18c":"code","fa9187de":"code","aa10878b":"code","b6b576a3":"code","a481978e":"code","d4e2df9b":"code","b02522a7":"markdown"},"source":{"d4708bee":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/gearbox-fault-diagnosis-elaborated-datasets\/gearbox-fault-diagnosis-elaborated-datasets\/stdev'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8f5ed73a":"# Specific dependencies\nfrom ipywidgets import widgets\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nimport matplotlib.pyplot as plt\nimport math\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.dummy import DummyClassifier","9da6bf1d":"# DATASET IDENTIFICATION\npath = '\/kaggle'\ninput_path = path + '\/input\/gearbox-fault-diagnosis-elaborated-datasets\/gearbox-fault-diagnosis-elaborated-datasets\/stdev\/'\nbroken_dataset  = \"broken30hz_stdev_100.csv\"\nhealthy_dataset = \"healthy30hz_stdev_100.csv\"","2ea8865a":"# IMPORT DATASETS\nhealthyDataset = pd.read_csv(input_path + healthy_dataset)\nbrokenDataset  = pd.read_csv(input_path + broken_dataset)","13c6e6b2":"# CONCATENATE DATASETS INTO ONE\ndataset = pd.concat([healthyDataset, brokenDataset], axis=0)\ndataset.describe()","fc2189e7":"def preProcessData(df): \n    final_cols = df.columns.tolist()\n    x_cols = [x for x in final_cols if x != 'failure']\n    y_cols = ['failure']\n    X = np.array(df[x_cols])\n    Y = np.array(df[y_cols]).reshape((-1,))\n\n    skf = StratifiedKFold(n_splits=5)\n    skf.get_n_splits(X,Y);\n    for i1, i2 in skf.split(X,Y):\n        x_train, x_val = X[i1,:], X[i2,:]\n        y_train, y_val = Y[i1], Y[i2]\n        # CV is not important here, so generate only a single split\n        break\n    \n    return x_train, y_train, x_val, y_val","0f44fcf3":"def trainModels(x_train, y_train,max_iter):\n    lr = LogisticRegression(max_iter=max_iter).fit(x_train, y_train)\n    rf = RandomForestClassifier().fit(x_train, y_train)\n    return lr, rf","48e3e18c":"def ContingencyTableForGivenThreshold(X, Y, model, thres):\n    \"\"\"\n    Inputs:\n    X: (N,D)\n    Y: (N,)\n    model: represents the scoring rule\n    thres: scalar\n    Returns the tpr, fpr for the given threshold\n    \"\"\"\n    # compute the scores\n    scores = model.predict_proba(X)[:,1] # (N,)\n    # rates\n    tp = np.sum((scores >= thres) & (np.array(Y)==1))\n    tn = np.sum((scores < thres) & (np.array(Y)==0))\n    fp = np.sum((scores >= thres) & (np.array(Y)==0))\n    fn = np.sum((scores < thres) & (np.array(Y)==1))\n    \n    return round(tp, 3), round(fp, 3), round(tn, 3), round(fn, 3)","fa9187de":"def CreatePlotlyInteractivePlots(x_val, y_val, lr, rf):\n    # Some parameters to generate Logistic Distribution\n    x_high = 10\n    x_low = -10\n    n_pts = 1000\n    x = np.linspace(x_low, x_high, n_pts) \n    z = 1\/(1 + np.exp(-(x)) )\n    oneMunisZ = 1 - z\n    xx = np.linspace(x_low,x_high,n_pts)\n    zz= 0.5*np.ones((n_pts,))\n\n    # Compute TPR and FPR for both models\n    tpLR, fpLR, tnLR, fnLR = ContingencyTableForGivenThreshold(x_val, y_val, lr, 0.5)\n    tpRF, fpRF, tnRF, fnRF = ContingencyTableForGivenThreshold(x_val, y_val, rf, 0.5)\n\n    # Initial values to build the dashboard\n    fprLR, tprLR, _ = roc_curve(y_val, lr.predict_proba(x_val)[:,1])\n    fprRF, tprRF, _ = roc_curve(y_val, rf.predict_proba(x_val)[:,1])\n\n    # Colors for dashboard plots\n    cols = ['darkcyan', 'crimson']\n    cols_r = ['crimson', 'darkcyan']\n    \n    # Sliders for thresholds for both models\n    thresLR = widgets.FloatSlider(\n        value=0.5,\n        min=0,\n        max=1,\n        step = 0.01,\n        description='Thres (LR):',\n        continuous_update=True\n    )\n\n    thresRF = widgets.FloatSlider(\n        value=0.5,\n        min=0,\n        max=1,\n        step = 0.01,\n        description='Thres (RF):',\n        continuous_update=True\n    )\n\n    # Initialize the subplots object\n    fig = make_subplots(rows=2,cols=2,specs=[[{\"type\": \"scatter\"}, {\"type\": \"scatter\"}],\n               [{\"type\": \"bar\"}, {\"type\": \"bar\"}]],\n                subplot_titles=(\"Logistic Distribution (only for Logistic Regression)\",\"ROC Curve\", \"Contingency Table (LR)\", \"Contingency Table (RF)\"),\n                       vertical_spacing=0.1, horizontal_spacing=0.2)\n\n    # Logistic Distribution plot: only useful in case of Logistic Regression\n    trace11 = go.Scatter(x=x,y=z, mode='lines',\n                         name = 'P(C=1)')\n    trace12 = go.Scatter(x=x,y=oneMunisZ, mode='lines',\n                         name = 'P(C=0)')\n    trace_thres1 = go.Scatter(x=xx, y=zz, line=dict(dash='dash'),\n                              name = 'Threshold')\n\n    # ROC Curve\n    trace21 = go.Scatter(x=fprLR, y=tprLR, mode='lines',\n                         name ='Model horizon')\n    trace_thres2 = go.Scatter(x=[fpLR\/(fpLR+tnLR)], y=[tpLR\/(tpLR+fnLR)],\n                              mode='markers',\n                              name = 'Thres (LR)', marker=dict(color=\"black\", symbol=17, size=10)) \n    trace22 = go.Scatter(x=fprRF, y=tprRF, mode='lines',\n                         name ='Model horizon')\n    trace_thres21 = go.Scatter(x=[fpRF\/(fpRF+tnRF)], y=[tpRF\/(tpRF+fnRF)],\n                              mode='markers',\n                              name = 'Thres (RF)', marker=dict(color=\"black\", symbol=4, size=10))\n\n    # Bar plots with conditional distributions and accuracy for Logistic Regression\n    trace31 = go.Bar(name='1', x=['Pred=1', 'Pred=0'],\n                     y = [tpLR\/(tpLR+fpLR), fnLR\/(tnLR+fnLR)],\n                     text = ['TP', 'FN'], textposition='inside', marker=dict(color=cols))\n    trace32 = go.Bar(name='0', x=['Pred=1', 'Pred=0'],\n                     y= [fpLR\/(tpLR+fpLR), tnLR\/(tnLR+fnLR)],\n                     text = ['FP', 'TN'], textposition='inside', marker=dict(color=cols_r))\n    trace33 = go.Bar(name='Acc.', x=['Acc.'],\n                     y= [(tpLR+tnLR)\/(tpLR+fpLR+tnLR+fnLR)],\n                     text = ['Accuracy'], textposition='inside', marker=dict(color=['cornsilk']))\n\n    # Bar plots with conditional distributions and accuracy for Random Forest\n    trace41 = go.Bar(name='1', x=['Pred=1', 'Pred=0'],\n                     y = [tpRF\/(tpRF+fpRF), fnRF\/(tnRF+fnRF)],\n                     text = ['TP', 'FN'], textposition='inside', marker=dict(color=cols))\n    trace42 = go.Bar(name='0', x=['Pred=1', 'Pred=0'],\n                     y= [fpRF\/(tpRF+fpRF), tnRF\/(tnRF+fnRF)],\n                     text = ['FP', 'TN'], textposition='inside', marker=dict(color=cols_r))\n    trace43 = go.Bar(name='Acc.', x=['Acc.'],\n                     y= [(tpRF+tnRF)\/(tpRF+fpRF+tnRF+fnRF)],\n                     text = ['Accuracy'], textposition='inside', marker=dict(color=['cornsilk']))\n\n\n    fig.add_trace(trace11, row=1, col=1) # 0\n    fig.add_trace(trace12, row=1, col=1) # 1\n    fig.add_trace(trace_thres1, row=1, col=1) # 2\n    fig.add_trace(trace21, row=1, col=2) # 3\n    fig.add_trace(trace_thres2, row=1, col=2) # 4\n    fig.add_trace(trace31, row=2, col=1) # 5\n    fig.add_trace(trace32, row=2, col=1) # 6\n    fig.add_trace(trace41, row=2,col=2) # 7 ##### RF Bar plot 1\n    fig.add_trace(trace22, row=1, col=2) # 8\n    fig.add_trace(trace_thres21, row=1, col=2) # 9\n    fig.add_trace(trace33, row=2, col=1) # 10\n    fig.add_trace(trace42, row=2, col=2) # 11\n    fig.add_trace(trace43, row=2, col=2) # 12\n    # fix this: legend is overlapping right now\n    fig.update_layout(showlegend=False )\n    figW = go.FigureWidget(fig)\n    figW['layout']['barmode'] = 'stack'\n    figW['layout']['bargap'] = 0\n    figW.update_yaxes(range=[0,1], row=2, col=2);\n    figW.update_yaxes(range=[0,1], row=2, col=1);\n    figW.update_layout(height=570, width=900, margin=dict(l=20, r=20, t=20, b=20));\n    \n    return figW, thresLR, thresRF","aa10878b":"def responseLR(change):\n    n_pts = 1000\n    # update the data\n    zz = thresLR.value*np.ones((n_pts,))\n    tp, fp, tn, fn = ContingencyTableForGivenThreshold(x_val, y_val, lr, thresLR.value)\n    with figW.batch_update():\n        # probab dist plot\n        figW.data[2].y = zz\n        # ROC Cure\n        figW.data[4].x = [fp\/(fp+tn)]\n        figW.data[4].y = [tp\/(tp+fn)]\n        # Contingency table\n        figW.data[5].y = [tp\/(tp+fp) if tp+fp != 0 else 0, fn\/(tn+fn) if tn+fn !=0 else 0]\n        figW.data[6].y = [fp\/(tp+fp) if tp+fp != 0 else 0, tn\/(tn+fn) if tn+fn !=0 else 0]\n        figW.data[10].y = [(tp+tn)\/(tp+fp+tn+fn)]","b6b576a3":"def responseRF(change):\n    n_pts = 1000\n    # update the data\n    zz = thresRF.value*np.ones((n_pts,))\n    tp, fp, tn, fn = ContingencyTableForGivenThreshold(x_val, y_val, rf, thresRF.value)\n    with figW.batch_update():\n        # ROC Curve\n        figW.data[9].x = [fp\/(fp+tn)]\n        figW.data[9].y = [tp\/(tp+fn)]\n        # Contingnecy table\n        figW.data[7].y = [tp\/(tp+fp) if tp+fp != 0 else 0, fn\/(tn+fn) if tn+fn !=0 else 0]\n        figW.data[11].y = [fp\/(tp+fp) if tp+fp != 0 else 0, tn\/(tn+fn) if tn+fn !=0 else 0]\n        figW.data[12].y = [(tp+tn)\/(tp+fp+tn+fn)]","a481978e":"# Run all the functions and generate outputs\nx_train, y_train, x_val, y_val = preProcessData(dataset)\nlr, rf = trainModels(x_train, y_train, max_iter= 1000)","d4e2df9b":"# Create the interactive plot\nfigW, thresLR, thresRF = CreatePlotlyInteractivePlots(x_val, y_val, lr, rf)\n\nthresLR.observe(responseLR, names=\"value\")\nthresRF.observe(responseRF, names=\"value\")\ncontainer = widgets.HBox([thresLR, thresRF])\ndashboard = widgets.VBox([container, figW])\ndisplay(dashboard)","b02522a7":"# Functions definitions"}}