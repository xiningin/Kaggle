{"cell_type":{"7c7d61fa":"code","b0cf90cf":"code","77ecc2fa":"code","2d52fd44":"code","3d05521d":"code","22527b8c":"code","b042fd5d":"code","247dd989":"code","aa7de6d7":"code","ca6e654d":"code","090d976f":"code","2b69b1dd":"code","c20d47f4":"code","47197e95":"code","13bf95e0":"code","bbd95ba9":"code","6d161a0b":"code","509b16d8":"code","291468f4":"code","e9066fcb":"code","145a3b45":"code","38faeb09":"code","55d0c087":"code","ba718706":"code","87d89ab3":"code","72fe7210":"code","3d87a042":"code","f763e7f5":"code","6edc69a2":"code","0b24b906":"code","b80df764":"code","7335431a":"code","b54c06a7":"code","6ae568e7":"code","271bd86f":"code","71cd5a5f":"code","a95944f7":"code","4f2b3268":"code","fbe43f75":"code","b3d589ab":"code","d8f1c92f":"code","20b15261":"code","a69e3c21":"code","24393d97":"code","ad6f033a":"code","5819e3a4":"code","e989a836":"code","6a142156":"code","ace1331f":"code","cbf34d0f":"markdown","476e1bc9":"markdown","e0c76275":"markdown","117be82e":"markdown","78cdeef5":"markdown","e730b56a":"markdown","c6ed8aed":"markdown","8aa971a3":"markdown","46b805b5":"markdown","0391a362":"markdown","f193f259":"markdown","b41ece03":"markdown","91534506":"markdown","7fb916ab":"markdown","09d7daf2":"markdown","79f65a78":"markdown","4dd6b1b2":"markdown","3d8e29de":"markdown","8d595025":"markdown"},"source":{"7c7d61fa":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","b0cf90cf":"dataset = pd.read_csv('\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv')\ndataset.head()","77ecc2fa":"plt.figure(figsize=(20,20))\nchurn_corr = dataset.corr()\nchurn_corr_top = churn_corr.index\nsns.heatmap(dataset[churn_corr_top].corr(), annot=True)","2d52fd44":"X = dataset.iloc[:, 3:13]\ny = dataset.iloc[:, 13]","3d05521d":"X.head()","22527b8c":"geography = pd.get_dummies(dataset['Geography'], drop_first=True)\ngender = pd.get_dummies(dataset['Gender'], drop_first=True)\ngender.head()","b042fd5d":"X = pd.concat([X, geography, gender], axis=1)","247dd989":"X = X.drop(['Geography', 'Gender'], axis=1)","aa7de6d7":"X","ca6e654d":"from sklearn.model_selection import train_test_split","090d976f":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=0)","2b69b1dd":"from sklearn.preprocessing import StandardScaler","c20d47f4":"SC = StandardScaler()\nX_train = SC.fit_transform(X_train)\nX_test = SC.transform(X_test)","47197e95":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LeakyReLU, PReLU, ELU\nfrom keras.layers import Dropout","13bf95e0":"classifier = Sequential()","bbd95ba9":"# Adding the input layer and the first hidden layer\nclassifier.add(Dense(6, kernel_initializer = 'he_uniform',activation='relu',input_dim = 11))\nclassifier.add(Dropout(0.1))","6d161a0b":"# Adding the second hidden layer\nclassifier.add(Dense(6, kernel_initializer = 'he_uniform',activation='relu'))\nclassifier.add(Dropout(0.1))","509b16d8":"# Adding the output layer\nclassifier.add(Dense(1, kernel_initializer = 'glorot_uniform', activation = 'sigmoid'))","291468f4":"# Compiling the ANN\nclassifier.compile(optimizer='Adamax', loss='binary_crossentropy', metrics=['accuracy'])","e9066fcb":"model_history = classifier.fit(X_train, y_train, validation_split=0.33, batch_size = 10, epochs = 100)","145a3b45":"print(model_history.history.keys())","38faeb09":"# summarize history for accuracy\nplt.figure(figsize=(10, 7))\nplt.plot(model_history.history['accuracy'])\nplt.plot(model_history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","55d0c087":"# summarize history for loss\nplt.figure(figsize=(10, 7))\nplt.plot(model_history.history['loss'])\nplt.plot(model_history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","ba718706":"y_pred = classifier.predict(X_test)\ny_pred = (y_pred > 0.5)\ny_pred","87d89ab3":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)","72fe7210":"cm","3d87a042":"# Calculate the Accuracy\nfrom sklearn.metrics import accuracy_score\nscore = accuracy_score(y_test, y_pred)","f763e7f5":"score","6edc69a2":"from keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import GridSearchCV","0b24b906":"from keras.layers import Dense, Activation, Embedding, Flatten, LeakyReLU, BatchNormalization, Dropout\nfrom keras.activations import relu, sigmoid","b80df764":"def create_model(layers, activation):\n    model = Sequential()\n    for i, nodes in enumerate(layers):\n        if i == 0:\n            model.add(Dense(nodes, kernel_initializer = 'he_uniform',activation=activation,input_dim = X_train.shape[1]))\n            model.add(Dropout(0.1))\n        else:\n            model.add(Dense(nodes, kernel_initializer = 'he_uniform',activation=activation))\n            model.add(Dropout(0.1))\n\n    # Adding the output layer\n    model.add(Dense(1, kernel_initializer = 'glorot_uniform', activation = 'sigmoid'))\n                           \n    # Compiling the ANN\n    model.compile(optimizer='Adamax', loss='binary_crossentropy', metrics=['accuracy'])\n    return model","7335431a":"model = KerasClassifier(build_fn=create_model, verbose=0)\nlayers = [(6, 3, 3), (10, 10), (45, 30, 15)]\nactivations = ['sigmoid', 'relu']\nparam_grid = dict(layers=layers, activation=activations, batch_size = [128, 256], epochs=[30])\ngrid = GridSearchCV(estimator=model, param_grid=param_grid,cv=5)\ngrid_result = grid.fit(X_train, y_train)","b54c06a7":"[grid_result.best_score_,grid_result.best_params_]","6ae568e7":"X.head()","271bd86f":"y.head()","71cd5a5f":"params = {\n    \"max_depth\": [3, 4, 5, 6, 8, 10, 12, 15],\n    \"learning_rate\": [0.5, 0.10, 0.15, 0.20, 0.25, 0.30],\n    \"min_child_weight\": [1, 3, 5, 7],\n    \"gamma\": [0.0, 0.1, 0.2, 0.3, 0.4],\n    \"colsample_bytree\": [0.3, 0.4, 0.5, 0.7]\n}","a95944f7":"## Hyperparameter optimization using RandomizedSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nimport xgboost","4f2b3268":"xgb_init = xgboost.XGBClassifier()","fbe43f75":"random_cv = RandomizedSearchCV(xgb_init, param_distributions=params, n_iter=5, scoring=\"roc_auc\", n_jobs=1, cv=5, verbose=3)","b3d589ab":"random_cv.fit(X, y)","d8f1c92f":"random_cv.best_estimator_","20b15261":"random_cv.best_params_","a69e3c21":"xgb_classifier = xgboost.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.4, gamma=0.2, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.3, max_delta_step=0, max_depth=3,\n              min_child_weight=1, missing=None, monotone_constraints='()',\n              n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n              tree_method='exact', validate_parameters=1, verbosity=None)","24393d97":"from sklearn.model_selection import cross_val_score","ad6f033a":"predict = cross_val_score(xgb_classifier, X, y, cv=10)\npredict","5819e3a4":"predict = predict.mean()\npredict","e989a836":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import HTML","6a142156":"th_props = [\n  ('font-size', '28px'),\n  ('text-align', 'center'),\n  ('font-weight', 'bold'),\n  ('color', '#021755'),\n  ('background-color', '#fbe4e5')\n  ]\n\n# Set CSS properties for td elements in dataframe\ntd_props = [\n  ('font-size', '25px'),\n  ('background-color', '#f7f2ed')\n  ]\n\n# Set table styles\nstyles = [\n  dict(selector=\"th\", props=th_props),\n  dict(selector=\"td\", props=td_props)\n  ]","ace1331f":"d = {'ML Technique': [\"Deep-Learning\", \"XGBoost\"], 'Score': [score, predict]}\ndf = pd.DataFrame(data=d)\ncm = sns.light_palette(\"red\", as_cmap=True)\n\n(df.style\n  .set_caption('Deep-Learning VS XGBoost.')\n  .format({'total_amt_usd_pct_diff': \"{:.2%}\"})\n  .set_table_styles(styles))","cbf34d0f":"### Importing the Keras libraries and packages","476e1bc9":"# XGBoost","e0c76275":"### Initialising the ANN","117be82e":"* https:\/\/www.youtube.com\/watch?v=9HomdnM12o4\n* https:\/\/www.youtube.com\/watch?v=HdlDYng8g9s&t=100s\n* https:\/\/www.youtube.com\/watch?v=OTTOglLJxLU&list=PLZoTAELRMXVPGU70ZGsckrMdr0FteeRUi&index=17\n* https:\/\/mode.com\/example-gallery\/python_dataframe_styling\/","78cdeef5":"# Introduction\n\nThis notebook is just about a simple comparison of artificial neural networks vs xgboost. For this comparison I use the churn-modelling data set.\n\nHere we are not doing detailed EDA. Which is not the goal for here. All that is needed to complete this process is to do a simple EDA.\n\nDeep learning is best for long information through. But we want to see. What do they do in such a situation.\n\nHope u like this simple comparison.","e730b56a":"---\n\n<h1 style=\"text-align: center;font-size: 30px; color: #013b86;\">Simple Churn prediction with Deep-Learning VS XGBoost<\/h1>\n\n---\n\n<center><img style=\"width: 700px;\" src=\"https:\/\/i.ibb.co\/jWvLTtM\/vs-image-2.jpg\"><\/center>\n\n---\n<i>Source: Base image from Google, after edit image upload in imgbb<\/i>","c6ed8aed":"note: Deep-Learning predicted value always changeable. sometimes it cross xgboost predicted value but maximum times are not. So please don't judge those as a actuala value. Try it yourself hope so u get some better experience.","8aa971a3":"---\n\n<h1 style=\"text-align: center;font-size: 30px; color: #e34b4b;\">Deep-Learning VS XGBoost<\/h1>\n\n---","46b805b5":"### Building Deep layer ","0391a362":"---\n\n<center><img style=\"width: 700px;\" src=\"https:\/\/d1rwhvwstyk9gu.cloudfront.net\/2020\/02\/XG-Boost-FINAL-01.png\"><\/center>\n\n---","f193f259":"## Hyper Parameter Optimization for xgboost","b41ece03":"## Part 3 - Making the predictions and evaluating the model","91534506":"### Acknowledgement","7fb916ab":"\n### Feature Scaling","09d7daf2":"---\n\n<center><img style=\"width: 700px;\" src=\"https:\/\/www.mdpi.com\/genes\/genes-10-00553\/article_deploy\/html\/images\/genes-10-00553-g001.png\"><\/center>\n\n---","79f65a78":"# Artificial Neural Network","4dd6b1b2":"\n### list all data in history","3d8e29de":"### Splitting the dataset into the Training set and Test set","8d595025":"## Hyper parameter Tuning for ANN"}}