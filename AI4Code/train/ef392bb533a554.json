{"cell_type":{"6ccb8c3c":"code","095bd68d":"code","177fd9e4":"code","2252600c":"code","9b3211e1":"code","9fc0c13f":"code","ae5b7604":"code","331f2ce9":"code","cf02cff8":"code","8575dfd9":"code","bd1a9f66":"code","a1a07d1b":"code","20ea4081":"code","20c165c8":"code","97d87401":"code","8cd1ec1b":"code","f7ccd728":"code","40b08a5f":"code","91974346":"code","3030ba59":"code","a0f058f7":"code","ca47df18":"code","59d35bea":"code","2150d4e9":"code","91865f22":"code","afe6d519":"code","9ff1fe01":"code","bfe7a1cf":"code","7a06ea75":"code","1d1d03a9":"code","12af2d0c":"code","ee7504c6":"code","9a4633eb":"code","a19a9e5a":"code","96cba501":"code","ce4871bd":"markdown","277fd52d":"markdown","df93809a":"markdown","a4cfc375":"markdown","f91ba9bd":"markdown","a8b13be2":"markdown","fd0badf0":"markdown","71171d3d":"markdown","6298e00b":"markdown","b73c89c0":"markdown","caeeabc9":"markdown","3846ba17":"markdown","df87d17b":"markdown","c4b6c54b":"markdown","b9f2c40e":"markdown","294d3951":"markdown","0f998e6a":"markdown","0bc82b05":"markdown","4156f017":"markdown","79ab8da2":"markdown","f665ce4e":"markdown","7e8cfd28":"markdown","c8a4f2d4":"markdown","bd700934":"markdown","2478642b":"markdown","6a199671":"markdown","d6510bbc":"markdown","1a920a2f":"markdown","ef24cf44":"markdown"},"source":{"6ccb8c3c":"import numpy as np \nimport pandas as pd \nfrom scipy import spatial\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport re\nimport os\nprint(os.listdir(\"..\/input\"))\n","095bd68d":"ratings = pd.read_csv(\"..\/input\/ratings.csv\")\n# links = pd.read_csv(\"..\/input\/links.csv\")\ntags = pd.read_csv(\"..\/input\/tags.csv\")\nmovies = pd.read_csv(\"..\/input\/movies.csv\")","177fd9e4":"print(ratings.shape)\nratings.head(5)","2252600c":"pd.options.display.float_format = '{:f}'.format\nratings['rating'].describe()","9b3211e1":"ratings['rating'].hist()","9fc0c13f":"ratings['rating'].plot(kind='box', subplots=True)","ae5b7604":"userRatingsAggr = ratings.groupby(['userId']).agg({'rating': [np.size, np.mean]})\nuserRatingsAggr.reset_index(inplace=True)  # To reset multilevel (pivot-like) index\n# userRatingsAggr.head()","331f2ce9":"userRatingsAggr['rating'].describe()","cf02cff8":"userRatingsAggr['rating'].plot(kind='box', subplots=True)","8575dfd9":"movieRatingsAggr = ratings.groupby(['movieId']).agg({'rating': [np.size, np.mean]})\nmovieRatingsAggr.reset_index(inplace=True)\n# movieRatingsAggr.head()","bd1a9f66":"movieRatingsAggr['rating'].describe()","a1a07d1b":"movieRatingsAggr['rating'].plot(kind='box', subplots=True)","20ea4081":"print(tags.shape)\ntags.head(5)","20c165c8":"print(movies.shape)\nmovies.head(5)","97d87401":"movies = movies.merge(movieRatingsAggr, left_on='movieId', right_on='movieId', how='left')  # ['rating']\nmovies.columns = ['movieId', 'title', 'genres', 'rating_count', 'rating_avg']","8cd1ec1b":"movies.head(5)","f7ccd728":"def getYear(title):\n    result = re.search(r'\\(\\d{4}\\)', title)\n    if result:\n        found = result.group(0).strip('(').strip(')')\n    else: \n        found = 0\n    return int(found)\n    \nmovies['year'] = movies.apply(lambda x: getYear(x['title']), axis=1)\n# movies.head(10)","40b08a5f":"genresList = [\n  \"Action\",\n  \"Adventure\",\n  \"Animation\",\n  \"Children\",\n  \"Comedy\",\n  \"Crime\",\n  \"Documentary\",\n  \"Drama\",\n  \"Fantasy\",\n  \"Film-Noir\",\n  \"Horror\",\n  \"Musical\",\n  \"Mystery\",\n  \"Romance\",\n  \"Sci-Fi\",\n  \"Thriller\",\n  \"War\",\n  \"Western\",\n  \"(no genres listed)\"\n]\n\ndef setGenresMatrix(genres):\n    movieGenresMatrix = []\n    movieGenresList = genres.split('|')\n    for x in genresList:\n        if (x in movieGenresList):\n            movieGenresMatrix.append(1)\n        else:\n            movieGenresMatrix.append(0) \n    return movieGenresMatrix\n    \nmovies['genresMatrix'] = movies.apply(lambda x: np.array(list(setGenresMatrix(x['genres']))), axis=1)\n\nmovies.head(5)","91974346":"movieRatingsAggr['rating'].describe(percentiles=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.98, 0.99])","3030ba59":"def setRatingGroup(numberOfRatings):\n    # if (numberOfRatings is None): return 0\n    if (1 <= numberOfRatings <= 10): return 1\n    elif (11 <= numberOfRatings <= 30): return 2\n    elif (31 <= numberOfRatings <= 100): return 3\n    elif (101 <= numberOfRatings <= 300): return 4\n    elif (301 <= numberOfRatings <= 1000): return 5\n    elif (1001 <= numberOfRatings): return 6\n    else: return 0\n\nmovies['ratingGroup'] = movies.apply(lambda x: setRatingGroup(x['rating_count']), axis=1)\nmovies.fillna(0, inplace=True)  # Replace NaN values to zero\n\n# movies.head(10)","a0f058f7":"stopWords = ['a', 'about', 'above', 'above', 'across', 'after', 'afterwards', 'again', 'against', 'all', 'almost', \n        'alone', 'along', 'already', 'also','although','always','am','among', 'amongst', 'amoungst', 'amount',  'an', 'and', \n        'another', 'any','anyhow','anyone','anything','anyway', 'anywhere', 'are', 'around', 'as',  'at', 'back','be','became', \n        'because','become','becomes', 'becoming', 'been', 'before', 'beforehand', 'behind', 'being', 'below', 'beside', 'besides', \n        'between', 'beyond', 'bill', 'both', 'bottom','but', 'by', 'call', 'can', 'cannot', 'cant', 'co', 'con', 'could', 'couldnt', \n        'cry', 'de', 'describe', 'detail', 'do', 'done', 'down', 'due', 'during', 'each', 'eg', 'eight', 'either', 'eleven','else', \n        'elsewhere', 'empty', 'enough', 'etc', 'even', 'ever', 'every', 'everyone', 'everything', 'everywhere', 'except', 'few', 'fifteen', \n        'fify', 'fill', 'find', 'fire', 'first', 'five', 'for', 'former', 'formerly', 'forty', 'found', 'four', 'from', 'front', 'full', \n        'further', 'get', 'give', 'go', 'had', 'has', 'hasnt', 'have', 'he', 'hence', 'her', 'here', 'hereafter', 'hereby', 'herein', 'hereupon', \n        'hers', 'herself', 'him', 'himself', 'his', 'how', 'however', 'hundred', 'ie', 'if', 'in', 'inc', 'indeed', 'interest', 'into', 'is', 'it', \n        'its', 'itself', 'keep', 'last', 'latter', 'latterly', 'least', 'less', 'ltd', 'made', 'many', 'may', 'me', 'meanwhile', 'might', 'mill', \n        'mine', 'more', 'moreover', 'most', 'mostly', 'move', 'much', 'must', 'my', 'myself', 'name', 'namely', 'neither', 'never', 'nevertheless', \n        'next', 'nine', 'no', 'nobody', 'none', 'noone', 'nor', 'not', 'nothing', 'now', 'nowhere', 'of', 'off', 'often', 'on', 'once', 'one', \n        'only', 'onto', 'or', 'other', 'others', 'otherwise', 'our', 'ours', 'ourselves', 'out', 'over', 'own','part', 'per', 'perhaps', 'please', \n        'put', 'rather', 're', 'same', 'see', 'seem', 'seemed', 'seeming', 'seems', 'serious', 'several', 'she', 'should', 'show', 'side', 'since', \n        'sincere', 'six', 'sixty', 'so', 'some', 'somehow', 'someone', 'something', 'sometime', 'sometimes', 'somewhere', 'still', 'such', 'system', \n        'take', 'ten', 'than', 'that', 'the', 'their', 'them', 'themselves', 'then', 'thence', 'there', 'thereafter', 'thereby', 'therefore', 'therein', \n        'thereupon', 'these', 'they', 'thickv', 'thin', 'third', 'this', 'those', 'though', 'three', 'through', 'throughout', 'thru', 'thus', 'to', \n        'together', 'too', 'top', 'toward', 'towards', 'twelve', 'twenty', 'two', 'un', 'under', 'until', 'up', 'upon', 'us', 'very', 'via', 'was', \n        'we', 'well', 'were', 'what', 'whatever', 'when', 'whence', 'whenever', 'where', 'whereafter', 'whereas', 'whereby', 'wherein', 'whereupon', \n        'wherever', 'whether', 'which', 'while', 'whither', 'who', 'whoever', 'whole', 'whom', 'whose', 'why', 'will', 'with', 'within', 'without', 'would', \n        'yet', 'you', 'your', 'yours', 'yourself', 'yourselves', 'the']\n\ntagsDict = {}\n\nfor index, x in tags.iterrows():\n    wordlist = str(x['tag']).lower().split(' ')\n    movieId = x['movieId']\n    for y in wordlist:\n        if y not in stopWords:\n            if movieId in tagsDict:\n                # if y not in tagsDict[movieId]:  # Switched off (we will get a non unique list)\n                    tagsDict[movieId].append(y)\n            else:\n                tagsDict[movieId] = [y]\n\n# tags.apply(lambda x: str(x['tag']).split(' '), axis=1)\n# print(tagsDict[6])","ca47df18":"titleWordsDict = {}\n\nfor index, x in movies.iterrows():\n    wordlist = str(x['title']).lower().split(' ')\n    movieId = x['movieId']\n    for y in wordlist:\n        if y not in stopWords:\n            if movieId in titleWordsDict:\n                    titleWordsDict[movieId].append(y)\n            else:\n                titleWordsDict[movieId] = [y]","59d35bea":"# Parameter weights\ngenresSimilarityWeight = 0.8\ntagsSimilarityWeight = 2\ntitleSimilarityWeight = 1\nratingAvgWeight = 0.2\nratingGroupWeight = 0.005\nyearDistanceWeight = 0.1\n\ndef tagsSimilarity(basisMovieID, checkedMovieID, checkType):    \n    # The higher value is the more similar (from 0 to 1) \n    if checkType == 'tag':\n        dictToCheck = tagsDict\n    else:\n        dictToCheck = titleWordsDict\n        \n    counter = 0\n    if basisMovieID in dictToCheck: \n        basisTags = dictToCheck[basisMovieID]\n        countAllTags = len(basisTags)\n        basisTagsDict = {}\n        for x in basisTags:\n            if x in basisTagsDict:\n                basisTagsDict[x] += 1\n            else:\n                basisTagsDict[x] = 1   \n        \n        for x in basisTagsDict:\n            basisTagsDict[x] = basisTagsDict[x] \/ countAllTags\n    else: return 0\n    \n    if checkedMovieID in dictToCheck: \n        checkedTags = dictToCheck[checkedMovieID]\n        checkedTags = set(checkedTags) # Make the list unique\n        checkedTags = list(checkedTags)\n        \n    else: return 0\n    \n    for x in basisTagsDict:\n        if x in checkedTags: counter += basisTagsDict[x]\n    return counter\n    \ndef checkSimilarity(movieId):\n    # print(\"SIMILAR MOVIES TO:\")\n    # print (movies[movies['movieId'] == movieId][['title', 'rating_count', 'rating_avg']])\n    basisGenres = np.array(list(movies[movies['movieId'] == movieId]['genresMatrix']))\n    basisYear = int(movies[movies['movieId'] == movieId]['year'])\n    basisRatingAvg = movies[movies['movieId'] == movieId]['rating_avg']\n    basisRatingGroup = movies[movies['movieId'] == movieId]['ratingGroup']\n    \n    moviesWithSim = movies\n    moviesWithSim['similarity'] = moviesWithSim.apply(lambda x: \n                                                      spatial.distance.cosine(x['genresMatrix'], basisGenres) * genresSimilarityWeight + \n                                                      - tagsSimilarity(movieId, x['movieId'], 'tag') * tagsSimilarityWeight +\n                                                      - tagsSimilarity(movieId, x['movieId'], 'title') * titleSimilarityWeight +\n                                                      abs(basisRatingAvg - x['rating_avg']) * ratingAvgWeight +\n                                                      abs(basisRatingGroup - x['ratingGroup']) * ratingGroupWeight + \n                                                      abs(basisYear - x['year'])\/100 * yearDistanceWeight\n                                                     , axis=1)\n    \n    moviesWithSim = moviesWithSim.loc[(moviesWithSim.movieId != movieId)]\n    return moviesWithSim[['movieId', 'title', 'genres', 'rating_count', 'rating_avg', 'similarity']].sort_values('similarity')\n","2150d4e9":"# currentMovie = movies.loc[(movies.movieId == 3793)]\n# currentMovie.head(1)","91865f22":"# X-men\nsimilarityResult  = checkSimilarity(3793)\nsimilarityResult.head(5)","afe6d519":"# Lock, Stock & Two Smoking Barrels\nsimilarityResult  = checkSimilarity(2542)\nsimilarityResult.head(5)","9ff1fe01":"# Casino\nsimilarityResult  = checkSimilarity(16)\nsimilarityResult.head(5)","bfe7a1cf":"# Star Wars: Episode IV - A New Hope\nsimilarityResult  = checkSimilarity(260)\nsimilarityResult.head(5)","7a06ea75":"# Iron Man\nsimilarityResult  = checkSimilarity(59315)\nsimilarityResult.head(5)","1d1d03a9":"# The Good, the Bad and the Ugly\nsimilarityResult  = checkSimilarity(1201)\nsimilarityResult.head(5)","12af2d0c":"# Mega Shark vs. Giant Octopus\nsimilarityResult  = checkSimilarity(73829)\nsimilarityResult.head(5)","ee7504c6":"# King Kong Escapes (Kingu Kongu no gyakush\u00fb)\nsimilarityResult  = checkSimilarity(92518)\nsimilarityResult.head(5)","9a4633eb":"# Armageddon\nsimilarityResult  = checkSimilarity(1917)\nsimilarityResult.head(5)","a19a9e5a":"# Groundhog Day\nsimilarityResult  = checkSimilarity(1265)\nsimilarityResult.head(5)\n\n\n","96cba501":"# Cars\nsimilarityResult  = checkSimilarity(45517)\nsimilarityResult.head(5)","ce4871bd":"### Ratings","277fd52d":"**Movie ratings aggregated by movie:**","df93809a":"<img style=\"float: left;\" src=\"https:\/\/movieposters2.com\/images\/750888-b.jpg\" width=\"280\" height=\"400\"> \n<span style=\"font-size:200%;margin:20px;\">Iron Man<\/span>","a4cfc375":"**The desired rating number groups will be:**\n* 0 - not rated movie\n* 1 - count of ratings between 1 - 10\n* 2 - count of ratings between 11 - 30\n* 3 - count of ratings between 31 - 100\n* 4 - count of ratings between 101 - 300\n* 5 - count of ratings between 301 - 1000\n* 6 - count of ratings between 1001 - ","f91ba9bd":"**Movie ratings aggregated by user:**","a8b13be2":"### Get movie years from title","fd0badf0":"# Movie recommendation algorithm\n\nThe algorithm gets a \"movieId\" as input parameter and computes the similarity for every other movie in the dataset. To fine-tuning this process, we can set up weights for the 6 defined similarity attributes at the beginning of the code. At the end we just ordering the result set (the most similar movies will be at the beginning). ","71171d3d":"<img style=\"float: left;\" src=\"https:\/\/movieposters2.com\/images\/735848-b.jpg\" width=\"280\" height=\"400\">\n<span style=\"font-size:200%;margin:20px;\">Groundhog Day<\/span>","6298e00b":"**Check the distribution of ratings per movie**","b73c89c0":"### Set rating categories\nBased on the number of user ratings per movie, I have defined 7 rating groups.","caeeabc9":"<img style=\"float: left;\" src=\"https:\/\/movieposters2.com\/images\/641904-b.jpg\" width=\"280\" height=\"400\"> \n<span style=\"font-size:200%;margin:20px;\">Armageddon<\/span>","3846ba17":"<img style=\"float: left;\" src=\"https:\/\/movieposters2.com\/images\/641096-b.jpg\" width=\"280\" height=\"400\"> \n<span style=\"font-size:200%;margin:20px;\">Mega Shark vs. Giant Octopus<\/span>","df87d17b":"![](https:\/\/cdn20.patchcdn.com\/users\/22924509\/20180417\/024653\/styles\/T800x600\/public\/processed_images\/jag_cz_movie_theater_retro_shutterstock_594132752-1523990060-9711.jpg)\n# Description\nIn this kernel I built an item-based movie recommendation algorithm. The algorithm finds the most similar movies to a given movie, therefore it's not a personal recommender system based on former user behaviour.\n\nFirstly I analyzed the dataset and tried to find to most relevant attributes. For example the \"number of rating\" attribute is not so relevant in my opinion, because the dataset contains a lot of popular movies without any rating. To find the best solution, I decided to develop an algorithm that can be fine tuned with weights for each used attrributes. \n\n#### The final list of applied attributes are:\n- Average user ratings\n- Number of user ratings\n- Genres similarity\n- User given tags similarity\n- Title similarity\n- Movie year\n\nAfter that, I prepared the dataset and computed the relevant measurements.  For better performance of \"tag\" and \"title\" words analysis I exluded the most frequent English words from the tags and movie titles.\n\nFinally I created the recommendation algorithm and made some recommendation at the end.  \n\n\n","c4b6c54b":"# Movie recommendations","b9f2c40e":"<img style=\"float: left;\" src=\"https:\/\/movieposters2.com\/images\/1125336-b.jpg\" width=\"280\" height=\"400\"> \n<span style=\"font-size:200%;margin:20px;\">X-men<\/span>","294d3951":"### Tags","0f998e6a":"<img style=\"float: left;\" src=\"https:\/\/movieposters2.com\/images\/645250-b.jpg\" width=\"280\" height=\"400\">\n<span style=\"font-size:200%;margin:20px;\">Cars<\/span>","0bc82b05":"### Join movie rating data","4156f017":"<img style=\"float: left;\" src=\"https:\/\/movieposters2.com\/images\/660783-b.jpg\" width=\"280\" height=\"400\"> \n<span style=\"font-size:200%;margin:20px;\">Star Wars: Episode IV - A new hope<\/span>","79ab8da2":"### Movies (master data)","f665ce4e":"<img style=\"float: left;\" src=\"https:\/\/movieposters2.com\/images\/744898-b.jpg\" width=\"280\" height=\"400\"> \n<span style=\"font-size:200%;margin:20px;\">Lock, Stock & Two Smoking Barrels<\/span>","7e8cfd28":"### Ratings group by","c8a4f2d4":"<img style=\"float: left;\" src=\"https:\/\/movieposters2.com\/images\/637194-b.jpg\" width=\"280\" height=\"400\"> \n<span style=\"font-size:200%;margin:20px;\">King Kong Escapes (Kingu Kongu no gyakush\u00fb)<\/span>","bd700934":"<img style=\"float: left;\" src=\"https:\/\/images-na.ssl-images-amazon.com\/images\/I\/91BDDsP0clL._RI_SX200_.jpg\" width=\"280\" height=\"400\"> \n<span style=\"font-size:200%;margin:20px;\">The Good, the Bad and the Ugly<\/span>","2478642b":"### Create genres matrix - one hot encoding\nAt this step I create a \"genresMatrix\" field where every value is a list of binary values (19 elements in every list, for the 19 possible genres).  For example a movie with genres \"Action\", \"Adventure\" and \"Children\" will look like: [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] . This transformation called as \"one hot encoding\".\n\nThis matrix will be very useful to define the similarities between two \"genres\" sets. For this purpose I'm going to compute the Cosine distance between the given arrays. More info: [SciPy spatial.distance.cosine](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.spatial.distance.cosine.html)","6a199671":"### Tags \nIterate through all the user given tags, split the tags into words, filter the defined stop words (frequent English words) and put the results into a dictionary that indexed by movieId.","d6510bbc":"<img style=\"float: left;\" src=\"https:\/\/movieposters2.com\/images\/1328176-b.jpg\" width=\"280\" height=\"400\"> \n<span style=\"font-size:200%;margin:20px;\">Casino<\/span>","1a920a2f":"### Words in movie title\nThe same as the previous \"tags\" processing, but for the words in movie title.","ef24cf44":"# Load and check data"}}