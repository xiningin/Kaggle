{"cell_type":{"c6bb7fa3":"code","faa3a492":"code","060e8cef":"code","633dae8e":"code","53d3c338":"code","8691b0d0":"code","f296309f":"code","2416ed2c":"code","25e05041":"code","e8c080fc":"code","a2138dea":"code","fb098ba4":"code","11c88861":"code","8afaccae":"markdown"},"source":{"c6bb7fa3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","faa3a492":"train = pd.read_csv('..\/input\/titanic\/train.csv')","060e8cef":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","633dae8e":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age","53d3c338":"train['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)","8691b0d0":"train.drop('Cabin',axis=1,inplace=True)","f296309f":"train.dropna(inplace=True)","2416ed2c":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","25e05041":"y = train['Survived'] #select the column representing survival \nX = train.drop(['Survived', 'PassengerId', 'Name', 'Ticket'], 1, inplace=True) # drop the irrelevant columns and keep the rest\nX = pd.get_dummies(train) # convert non-numerical variables to dummy variables","e8c080fc":"from sklearn import tree\ndtc = tree.DecisionTreeClassifier()\ndtc.fit(X, y)","a2138dea":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\") # load the testing data\nids = test[['PassengerId']] # create a sub-dataset for submission file and saving it\ntest.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], 1, inplace=True) # drop the irrelevant and keeping the rest\ntest.fillna(2, inplace=True) # fill (instead of drop) empty rows so that I would get the exact row number required for submission\ntest = pd.get_dummies(test) # convert non-numerical variables to dummy variables","fb098ba4":"predictions = dtc.predict(test)","11c88861":"results = ids.assign(Survived = predictions) # assign predictions to ids\nresults.to_csv(\"titanic-results.csv\", index=False) # write the final dataset to a csv file.","8afaccae":"# First and most easy code and way to compete in the Titanic EDA competition"}}