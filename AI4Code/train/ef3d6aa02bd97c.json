{"cell_type":{"e5c1d704":"code","4e935a13":"code","17ff401c":"code","ba5d4b79":"code","11088e01":"code","f7baeeb1":"code","34b3d5fd":"code","ae047684":"code","2b602736":"markdown","f1e4840c":"markdown","cf57b0bc":"markdown","22d66c91":"markdown","fa3f88b9":"markdown","2160dd78":"markdown","7933531b":"markdown"},"source":{"e5c1d704":"# Set-up libraries\nimport os\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nimport tensorflow as tf\nfrom tensorflow import keras","4e935a13":"# Check source\nfor dirname, _, filenames in os.walk('..\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","17ff401c":"# Load data\ndf = pd.read_csv('..\/input\/amazon-fine-food-reviews\/Reviews.csv')\ndf.head()","ba5d4b79":"# Look at breakdown of label\ndf['Score'].value_counts()","11088e01":"# Separate positive and negative reviews\ndf['Score'] = np.where(df['Score'] > 3, 1, 0)\ndf['Score'].value_counts()","f7baeeb1":"# Split data into 80% training and 20% validation\nsentences = df['Text']\nlabels = df['Score']\n\ntrain_sentences, val_sentences, train_labels,val_labels = train_test_split(sentences, labels, test_size=0.2, random_state=0)\n\nprint(train_sentences.shape)\nprint(train_labels.shape)\nprint(val_sentences.shape)\nprint(val_labels.shape)","34b3d5fd":"# Tokenize and pad\nvocab_size = 10000\noov_token = '<00V>'\nmax_length = 500\npadding_type = 'post'\ntrunc_type = 'post'\n\ntokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_token)\ntokenizer.fit_on_texts(train_sentences)\nword_index = tokenizer.word_index\n\ntrain_sequences = tokenizer.texts_to_sequences(train_sentences)\ntrain_padded = pad_sequences(train_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n\nval_sequences = tokenizer.texts_to_sequences(val_sentences)\nval_padded = pad_sequences(val_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)","ae047684":"# Build and train neural network\nembedding_dim = 16\nnum_epochs = 3\nbatch_size = 100\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam',\n             loss='binary_crossentropy',\n              metrics=['accuracy']\n             )\n\nhistory = model.fit(train_padded, train_labels, batch_size=batch_size, epochs=num_epochs, verbose=2)","2b602736":"## Step 3: Build, train, and evaluate neural network\nFirst, we design the neural network, e.g., sequence of layers and activation functions. \n\nSecond, we train the neural network, we iteratively make a guess, calculate how accurate that guess is, and enhance our guess. The first guess is initialised with random values. The goodness or badness of the guess is measured with the loss function. The next guess is generated and enhanced by the optimizer function.\n\nLastly, we apply use the neural network on previously unseen data and evaluate the results.","f1e4840c":"## Step 2: Prepare data and understand some more\nIn this step, we perform the necessary transformations on the data so that the neural network would be able to understand it. Real-world datasets are complex and messy. For our purposes, most of the datasets we work on in this series require minimal preparation.","cf57b0bc":"## Learn more\nIf you found this example interesting, you may also want to check out:\n\n* [Deep learning - very fast fundamental examples](https:\/\/www.kaggle.com\/jamiemorales\/deep-learning-very-fast-simple-examples)\n* [Machine learning in minutes - very fast fundamental examples in Python](https:\/\/www.kaggle.com\/jamiemorales\/machine-learning-in-minutes-very-fast-examples)\n* [List of machine learning methods & datasets](https:\/\/www.kaggle.com\/jamiemorales\/list-of-machine-learning-methods-datasets)\n\nThanks for reading. Don't forget to upvote.","22d66c91":"## Step 1: Set-up and understand data\nIn this step, we layout the tools we will need to solve the problem identified in the previous step. We want to inspect our data sources and explore the data itself to gain an understanding of the data for preprocessing and modeling.","fa3f88b9":"## Step 0: Understand the problem\nWhat we're trying to do here is to classify whether an Amazon review is positive or negative.","2160dd78":"## About \nThis notebook contains a very fast and simple NLP example in Python.\n\nThis work is part of a series called [NLP in minutes - fast, simple examples](https:\/\/www.kaggle.com\/jamiemorales\/nlp-in-minutes-fast-simple-example)\n\nThe approach is designed to help grasp the applied artificial intelligence workflow in minutes. It is not an alternative to actually taking the time to learn. What it aims to do is help someone get started fast and gain intuitive understanding of the typical steps early on.","7933531b":"Clearly that's overfitting but we will leave it here for now and address this in future examples."}}