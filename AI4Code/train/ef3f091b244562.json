{"cell_type":{"13bc5f3c":"code","bbca9668":"code","230efaac":"code","e9d8e59f":"code","74009528":"code","660f1cfe":"code","eb581c22":"code","2db5ece4":"code","ebe8608d":"code","e8d69fef":"code","d401c68e":"code","26231501":"code","8e1ac1d1":"code","6b3b66b4":"code","933da17a":"code","32024c51":"code","b66b2a30":"code","2f6a5a5e":"code","e57d8751":"code","a113d065":"code","d0466bdd":"code","6a2718b1":"code","2cf3ee64":"code","764660b8":"code","8312bd6d":"code","fdf37b01":"code","ae4774ef":"code","961de3e0":"code","7eca5952":"code","de32c9d7":"code","1427441b":"code","a0e5665f":"code","2508d226":"code","e20f54a5":"code","71e771bc":"code","3d5bb3b9":"code","ca9d9e05":"markdown","a466a620":"markdown","b99a6506":"markdown","203ec807":"markdown","04aba79a":"markdown","c4794953":"markdown","b3826fde":"markdown","06f9c1d3":"markdown","aad46311":"markdown","81d6d4cb":"markdown","3cc4af38":"markdown","7be9aa7a":"markdown","2b683816":"markdown","74ea4cf8":"markdown","c50c392e":"markdown","0bc5dad4":"markdown","968cfb25":"markdown","d05f168b":"markdown","22466e30":"markdown","57069c02":"markdown","f0cb2828":"markdown","98e787df":"markdown","7f7aeaa6":"markdown","b2c7ef71":"markdown"},"source":{"13bc5f3c":"import os\nimport gc\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom datetime import datetime\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom xgboost import XGBClassifier\nfrom sklearn.feature_selection import chi2\nfrom scipy.stats import chi2_contingency","bbca9668":"train_id = pd.read_csv(\"..\/input\/ieee-fraud-detection\/train_identity.csv\")\ntrain_trans = pd.read_csv(\"..\/input\/ieee-fraud-detection\/train_transaction.csv\")","230efaac":"train = train_trans.merge(train_id, how='left', on='TransactionID')\n\nprint(train.shape)\n\nprint(f'{train.memory_usage(index=True, deep=True).sum():,}')","e9d8e59f":"del train_id\ndel train_trans\ngc.collect()","74009528":"train = train.sample(frac=0.1, random_state=1)","660f1cfe":"num_features = ['TransactionDT', 'TransactionAmt', 'dist1', 'dist2', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', \n                'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14', 'D1', 'D2', 'D3', 'D4', 'D5', 'D6', \n                'D7', 'D8', 'D9', 'D10', 'D11', 'D12', 'D13', 'D14', 'D15', 'V2', 'V3', 'V4', 'V5', 'V6', \n                'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20', \n                'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'V29', 'V30', 'V31', 'V32', 'V33', \n                'V34', 'V35', 'V36', 'V37', 'V38', 'V39', 'V40', 'V41', 'V42', 'V43', 'V44', 'V45', 'V46', \n                'V47', 'V48', 'V49', 'V50', 'V51', 'V52', 'V53', 'V54', 'V55', 'V56', 'V57', 'V58', 'V59', \n                'V60', 'V61', 'V62', 'V63', 'V64', 'V66', 'V67', 'V68', 'V69', 'V70', 'V71', 'V72', 'V73', \n                'V74', 'V75', 'V76', 'V77', 'V78', 'V79', 'V80', 'V81', 'V82', 'V83', 'V84', 'V85', 'V86', \n                'V87', 'V89', 'V90', 'V91', 'V92', 'V93', 'V94', 'V95', 'V96', 'V97', 'V98', 'V99', 'V100', \n                'V101', 'V102', 'V103', 'V104', 'V105', 'V107', 'V108', 'V109', 'V110', 'V111', 'V112', 'V113', \n                'V114', 'V115', 'V116', 'V117', 'V118', 'V119', 'V120', 'V121', 'V122', 'V123', 'V124', 'V125', \n                'V126', 'V127', 'V129', 'V130', 'V131', 'V132', 'V133', 'V134', 'V138', 'V139', 'V140', 'V141', \n                'V142', 'V143', 'V144', 'V145', 'V146', 'V147', 'V148', 'V149', 'V150', 'V151', 'V152', 'V153', \n                'V154', 'V155', 'V156', 'V157', 'V158', 'V159', 'V160', 'V161', 'V162', 'V163', 'V164', 'V165', \n                'V166', 'V167', 'V168', 'V169', 'V170', 'V171', 'V172', 'V173', 'V174', 'V176', 'V177', 'V178', \n                'V179', 'V180', 'V181', 'V182', 'V184', 'V185', 'V186', 'V187', 'V188', 'V189', 'V190', 'V191', \n                'V192', 'V193', 'V194', 'V195', 'V196', 'V197', 'V198', 'V199', 'V200', 'V201', 'V202', 'V203', \n                'V204', 'V205', 'V206', 'V207', 'V208', 'V209', 'V211', 'V212', 'V213', 'V214', 'V215', 'V217', \n                'V218', 'V219', 'V220', 'V221', 'V222', 'V225', 'V227', 'V228', 'V229', 'V230', 'V231', 'V232', \n                'V233', 'V234', 'V235', 'V236', 'V237', 'V238', 'V239', 'V242', 'V243', 'V244', 'V245', 'V246', \n                'V247', 'V248', 'V249', 'V250', 'V251', 'V252', 'V253', 'V254', 'V255', 'V256', 'V257', 'V258', \n                'V259', 'V260', 'V261', 'V262', 'V263', 'V264', 'V265', 'V266', 'V267', 'V268', 'V269', 'V270', \n                'V271', 'V272', 'V273', 'V274', 'V275', 'V276', 'V277', 'V278', 'V279', 'V281', 'V282', 'V283', \n                'V284', 'V285', 'V286', 'V287', 'V288', 'V289', 'V290', 'V291', 'V292', 'V293', 'V294', 'V296', \n                'V300', 'V301', 'V302', 'V303', 'V304', 'V307', 'V308', 'V309', 'V310', 'V312', 'V313', 'V314', \n                'V315', 'V316', 'V317', 'V320', 'V322', 'V323', 'V324', 'V325', 'V326', 'V328', 'V329', 'V330', \n                'V331', 'V332', 'V333', 'V338', 'V339', 'id_01', 'id_02', 'id_03', 'id_04', 'id_05', 'id_06', \n                'id_07', 'id_08', 'id_09', 'id_10', 'id_11']","eb581c22":"cat_features = ['ProductCD', 'card1', 'card2', 'card3', 'card4', 'card5', 'card6', 'addr1', \n                'addr2', 'P_emaildomain', 'R_emaildomain', 'M1', 'M2', 'M3', 'M4', 'M5', 'M6', \n                'M7', 'M8', 'M9', 'id_12', 'id_13', 'id_14', 'id_15', 'id_16', 'id_17', 'id_18', \n                'id_19', 'id_20', 'id_21', 'id_22', 'id_23', 'id_24', 'id_25', 'id_26', 'id_27', \n                'id_28', 'id_29', 'id_30', 'id_31', 'id_32', 'id_33', 'id_34', 'id_35', 'id_36', \n                'id_37', 'id_38', 'DeviceType', 'DeviceInfo']\n\nlen(cat_features)","2db5ece4":"y_train = train.isFraud.values","ebe8608d":"train_cat = train.loc[:,cat_features]\ntrain_cat.head()","e8d69fef":"def eval_cat_feature(feature):\n\n    # Remove Missing\n    sel = ~train_cat.loc[:,feature].isna().values\n    column = train_cat.loc[:,[feature]].dropna().astype('str')\n    y_temp = y_train[sel]\n\n    # Perform One-Hot Encoding of the Feature\n    encoder = OneHotEncoder(sparse=False)\n    encoder = encoder.fit(column)\n    enc_df = encoder.transform(column)\n\n    stats = []\n    pval = []\n    for i, c in enumerate(encoder.categories_[0]):\n        ct1 = pd.crosstab(enc_df[:,i], y_temp)                                 \n        stat, p, dof, expected = chi2_contingency(ct1, correction=True)\n        stats.append(stat)\n        pval.append(p)\n\n    ct2 = pd.crosstab(column.iloc[:,0], y_temp)\n    ct2['n'] = column.value_counts().sort_index().tolist()\n    ct2['propFraud'] = ct2[1] \/ ct2['n']\n    ct2['chi2'] = stats\n    ct2['p'] = pval\n    ct2 = ct2.sort_values('chi2', ascending=False)\n\n    return ct2","d401c68e":"\nP_emaildomain= eval_cat_feature('P_emaildomain')\nP_emaildomain.head(5)","26231501":"q = P_emaildomain.query('p < 0.05').query('n > 1000')\nq","8e1ac1d1":"print(len(q))\nprint(q.index.values.tolist())","6b3b66b4":"del P_emaildomain\ngc.collect()","933da17a":"# ProductCD\n\nkeep = ['C', 'W', 'S', 'H', 'R']\ntrain['ProductCD'] = train.ProductCD.astype(str).apply(lambda x : x if x in keep else 'NA' )\n\n#card1\n\nkeep = ['9633', '9026', '2256', '8755', '15063', '5812', '7919', '16062', '13832', '9002', \n        '2616', '4461', '11201', '3154', '2803', '6530', '12839', '15497', '10112', '16560', \n        '11207', '12577', '8320', '18132', '2884', '9803', '14858', '7676', '1974', '16132', \n        '4436', '12544', '12686', '18249', '10486', '4806', '10989', '6550', '7585', '17399', \n        '18018', '15651', '9112', '15775', '17131', '6170', '4663', '7815', '9992', '2392', \n        '13481', '10023', '17188', '16075', '11157', '17055', '15885', '13249', '10447', '7861', \n        '12501', '8528', '2772', '16255', '6019', '15484', '16659', '1444', '15986', '8406', \n        '12469', '2455', '17400', '9480', '12695', '14290', '1939', '7664', '9175', '7826', '1342', \n        '7508', '7207', '11106', '1893', '9300', '15066']\ntrain['card1'] = train.card1.astype(str).apply(lambda x : x if x in keep else 'NA')\n\n#card2\n\nkeep = ['130.0', '500.0', '142.0', '177.0', '296.0', '545.0', '408.0', '327.0', '103.0', '194.0', '375.0', \n        '360.0', '111.0', '204.0', '555.0', '490.0', '268.0', '476.0', '548.0', '543.0', '100.0', '206.0', \n        '215.0', '404.0', '361.0', '453.0', '512.0', '567.0', '321.0', '514.0', '455.0', '369.0', '553.0', \n        '558.0', '302.0', '390.0', '517.0', '122.0', '452.0', '199.0', '174.0', '583.0', '161.0', '513.0', \n        '418.0', '494.0', '181.0', '532.0', '470.0', '250.0', '298.0', '225.0', '310.0', '276.0', '393.0', \n        '383.0', '399.0', '264.0', '170.0', '127.0', '481.0', '158.0', '343.0']\ntrain['card2'] = train.card2.astype(str).apply(lambda x : x if x in keep else 'NA')\n\n#card3\n\nkeep = ['185.0', '150.0', '144.0', '106.0', '146.0']\ntrain['card3'] = train.card3.apply(lambda x : x if x in keep else 'NA')\n\n#card4\n\nkeep = ['discover', 'american express']\ntrain['card4'] = train.card4.apply(lambda x : x if x in keep else 'NA')\n\n\n#card5\n\nkeep = ['137.0', '138.0', '166.0', '102.0', '226.0', '117.0', '126.0', '219.0', '202.0', '162.0', \n        '224.0', '229.0', '197.0', '195.0', '150.0']\ntrain['card5'] = train.card5.astype(str).apply(lambda x : x if x in keep else 'NA')\n\n\n#card6\n\nkeep = ['credit', 'debit']\ntrain['card6'] = train.card6.apply(lambda x : x if x in keep else 'NA')\n\n#addr1\n\nkeep = ['122.0', '308.0', '184.0', '264.0', '324.0', '330.0', '143.0', '494.0', '315.0', '205.0', '191.0', \n        '226.0', '203.0', '512.0', '269.0', '299.0', '444.0', '476.0', '436.0', '272.0', '337.0', '194.0', \n        '387.0', '498.0', '420.0', '327.0', '310.0', '204.0', '170.0', '485.0', '177.0', '433.0', '181.0', '231.0']\ntrain['addr1'] = train.addr1.astype(str).apply(lambda x : x if x in keep else 'NA')\n\n\n#addr2\n\nkeep = ['87.0', '60.0']\ntrain['addr2'] = train.addr2.apply(lambda x : x if x in keep else 'NA')\n\n# P_emaildomain\n\nkeep = ['gmail.com', 'yahoo.com', 'outlook.com', 'hotmail.com', 'anonymous.com', \n        'aol.com', 'att.net', 'sbcglobal.net', 'verizon.net', 'yahoo.com.mx', 'msn.com',\n        'ymail.com', 'me.com', 'optonline.net', 'cox.net', 'live.com', 'comcast.net']\ntrain['P_emaildomain'] = train.P_emaildomain.apply(lambda x : x if x in keep else 'NA')","32024c51":"# R_emaildomain\n\nkeep = ['gmail.com', 'anonymous.com', 'outlook.com', 'yahoo.com', 'comcast.net', 'aol.com', 'yahoo.com.mx', 'icloud.com', 'hotmail.com']\ntrain['R_emaildomain'] = train.R_emaildomain.apply(lambda x : x if x in keep else 'NA')\n\n# M1\nkeep = ['0']\ntrain['M1'] = train.M1.apply(lambda x : x if x in keep else 'NA')\n\n# M2\nkeep = ['F', 'T']\ntrain['M2'] = train.M2.apply(lambda x : x if x in keep else 'NA')\n\n# M3\nkeep = ['F', 'T']\ntrain['M3'] = train.M3.apply(lambda x : x if x in keep else 'NA')\n\n# M4\n\nkeep = ['M2', 'M0', 'M1']\ntrain['M4'] = train.M4.apply(lambda x : x if x in keep else 'NA')\n\n# M5\n\nkeep = ['F', 'T']\ntrain['M5'] = train.M5.apply(lambda x : x if x in keep else 'NA')\n\n# M6\n\nkeep = ['F', 'T']\ntrain['M6'] = train.M6.apply(lambda x : x if x in keep else 'NA')\n\n# M7\n\nkeep = ['F', 'T']\ntrain['M7'] = train.M7.apply(lambda x : x if x in keep else 'NA')\n\n# M8\n\nkeep = ['F', 'T']\ntrain['M8'] = train.M8.apply(lambda x : x if x in keep else 'NA')\n\n# M9\n\nkeep = ['F', 'T']\ntrain['M9'] = train.M9.apply(lambda x : x if x in keep else 'NA')","b66b2a30":"# id_12\nkeep = ['Found', 'NotFound']\ntrain['id_12'] = train.id_12.apply(lambda x : x if x in keep else 'NA')\n\n# id_13\nkeep = ['33.0', '19.0', '27.0', '14.0', '49.0', '52.0', '64.0', '63.0', '25.0']\ntrain['id_13'] = train.id_13.astype(str).apply(lambda x : x if x in keep else 'NA')\n\n# id_14\n\nkeep = ['-420.0', '-480.0', '-300.0']\ntrain['id_14'] = train.id_14.astype(str).apply(lambda x : x if x in keep else 'NA')\n\n# id_15\n\nkeep = ['New', 'Found', 'Unknown']\ntrain['id_15'] = train.id_15.apply(lambda x : x if x in keep else 'NA')\n\n# id_16\n\nkeep = ['Found', 'NotFound']\ntrain['id_16'] = train.id_16.apply(lambda x : x if x in keep else 'NA')\n\n# id_17\n\nkeep = ['225.0', '166.0']\ntrain['id_17'] = train.id_17.astype(str).apply(lambda x : x if x in keep else 'NA')\n\n# id_18\nkeep = ['15.0', '13.0', '12.0']\ntrain['id_18'] = train.id_18.astype(str).apply(lambda x : x if x in keep else 'NA')\n\n# id_19\n\nkeep = ['384.0', '266.0', '321.0', '410.0', '567.0', '529.0', '176.0', '312.0', '100.0', \n        '153.0', '215.0', '254.0', '633.0', '427.0', '548.0', '290.0', '492.0', '341.0', \n        '621.0', '193.0', '271.0', '352.0', '417.0', '216.0', '542.0', '390.0']\ntrain['id_19'] = train.id_19.astype(str).apply(lambda x : x if x in keep else 'NA')\n\n# id_20\n\nkeep = ['325.0', '507.0', '561.0', '222.0', '595.0', '214.0', '612.0', '533.0', '368.0', '391.0', '500.0',\n        '611.0', '600.0', '177.0', '489.0', '225.0', '563.0', '280.0', '484.0', '266.0', '146.0', '333.0', \n        '535.0', '277.0', '161.0', '566.0', '401.0', '549.0', '315.0', '127.0', '256.0']\ntrain['id_20'] = train.id_20.astype(str).apply(lambda x : x if x in keep else 'NA')\n\n# id_21\n\nkeep = ['0']\ntrain['id_21'] = train.id_21.apply(lambda x : x if x in keep else 'NA')","2f6a5a5e":"# id_22\n\nkeep = ['14.0']\ntrain['id_22'] = train.id_22.apply(lambda x : x if x in keep else 'NA')\n\n# id_23\n\nkeep = ['IP_PROXY:ANONYMOUS', 'IP_PROXY:TRANSPARENT']\ntrain['id_23'] = train.id_23.apply(lambda x : x if x in keep else 'NA')\n\n# id_24\n\nkeep = ['15.0', '11.0']\ntrain['id_24'] = train.id_24.astype(str).apply(lambda x : x if x in keep else 'NA')\n\n# id_25\n\nkeep = ['0']\ntrain['id_25'] = train.id_25.apply(lambda x : x if x in keep else 'NA')\n\n# id_26\n\nkeep = ['0']\ntrain['id_26'] = train.id_26.apply(lambda x : x if x in keep else 'NA')\n\n# id_27\n\nkeep = ['0']\ntrain['id_27'] = train.id_27.apply(lambda x : x if x in keep else 'NA')\n\n# id_28\n\nkeep = ['Found', 'New']\ntrain['id_28'] = train.id_28.apply(lambda x : x if x in keep else 'NA')\n\n# id_29\n\nkeep = ['Found', 'NotFound']\ntrain['id_29'] = train.id_29.apply(lambda x : x if x in keep else 'NA')\n\n# id_30\n\nkeep = ['iOS 11.2.5', 'Windows 10', 'Android', 'Mac OS X 10_11_6', 'Mac OS X 10_12_6', 'Windows 7', \n        'Windows 8.1', 'Mac OS X 10_13_2', 'iOS 11.3.0', 'Linux', 'Mac OS X 10_13_1', 'Mac OS X 10_10_5', \n        'Android 7.0', 'iOS 11.1.2', 'iOS 11.2.6', 'iOS 10.3.3']\ntrain['id_30'] = train.id_30.apply(lambda x : x if x in keep else 'NA')\n\n# id_31\n\nkeep = ['chrome generic', 'ie 11.0 for desktop', 'safari generic', 'chrome 64.0 for android', 'chrome 65.0 for android',\n        'edge 16.0', 'chrome 62.0', 'chrome 63.0 for android', 'chrome 66.0 for android', 'mobile safari generic', \n        'mobile safari 11.0', 'chrome 63.0', 'mobile safari 10.0', 'edge 15.0', 'chrome 65.0', 'firefox 57.0', \n        'chrome generic for android', 'chrome 64.0', 'chrome 66.0']\ntrain['id_31'] = train.id_31.apply(lambda x : x if x in keep else 'NA')","e57d8751":"# id_32\n\nkeep = ['24.0', '32.0']\ntrain['id_32'] = train.id_32.apply(lambda x : x if x in keep else 'NA')\n\n# id_33\n\nkeep = ['2208x1242', '1280x720', '2436x1125', '1920x1080', '2560x1440', '2048x1536', '1680x1050', '2880x1800', \n        '2560x1600', '1440x900', '1366x768', '1334x750', '1600x900', '1920x1200', '1280x1024', '2001x1125']\ntrain['id_33'] = train.id_33.apply(lambda x : x if x in keep else 'NA')\n\n# id_34\n\nkeep = ['match_status:1', 'match_status:2']\ntrain['id_34'] = train.id_34.apply(lambda x : x if x in keep else 'NA')\n\n# id_35\n\nkeep = ['F', 'T']\ntrain['id_35'] = train.id_35.apply(lambda x : x if x in keep else 'NA')\n\n# id_36\n\nkeep = ['F', 'T']\ntrain['id_36'] = train.id_36.apply(lambda x : x if x in keep else 'NA')\n\n# id_37\n\nkeep = ['F', 'T']\ntrain['id_37'] = train.id_37.apply(lambda x : x if x in keep else 'NA')\n\n# id_38\n\nkeep = ['F', 'T']\ntrain['id_38'] = train.id_38.apply(lambda x : x if x in keep else 'NA')\n\n# DeviceType\n\nkeep = ['desktop', 'mobile']\ntrain['DeviceType'] = train.DeviceType.apply(lambda x : x if x in keep else 'NA')\n\n# DeviceInfo\n\nkeep = ['MacOS', 'Trident\/7.0', 'Windows', 'iOS Device', 'rv:11.0', 'rv:57.0', 'SM-J700M Build\/MMB29K']\ntrain['DeviceInfo'] = train.DeviceInfo.apply(lambda x : x if x in keep else 'NA')","a113d065":"features = num_features + cat_features\n\nprint(len(cat_features))\nprint(len(num_features))","d0466bdd":"num_transformer = Pipeline(\n    steps = [\n        ('imputer', SimpleImputer(strategy='mean')),\n        ('scaler', MinMaxScaler())\n    ])\n\ncat_transformer = Pipeline(\n    steps = [\n        ('imputer', SimpleImputer(strategy='constant', fill_value='NA')),\n        ('onehot', OneHotEncoder(handle_unknown='ignore'))\n    ])\n\npreprocessor = ColumnTransformer(\n    transformers = [\n        ('num', num_transformer, num_features),\n        ('cat', cat_transformer, cat_features)\n    ])","6a2718b1":"%%time \n\npreprocessor.fit(train[features])\n\nX_train = preprocessor.transform(train[features])\n\ny_train = train.isFraud.values\n\nprint(X_train.shape)\nprint(f'{X_train.size * X_train.itemsize:,}')\n\nprint('y_train shape:', y_train.shape)","2cf3ee64":"del train\ngc.collect()","764660b8":"lr_mod = LogisticRegression(solver='liblinear',C=10)\nlr_mod.fit(X_train, y_train)\nprint(lr_mod.score(X_train, y_train))","8312bd6d":" %%time\nDtree = DecisionTreeClassifier(min_samples_leaf=4)\nDtree.fit(X_train, y_train)\nprint(Dtree.score(X_train, y_train))","fdf37b01":" %%time\nforest = RandomForestClassifier(random_state=1, n_estimators=100)\nforest.fit(X_train, y_train)\nprint(forest.score(X_train, y_train))","ae4774ef":" %%time\nmodel = XGBClassifier(n_estimators=200)   \nmodel.fit(X_train, y_train)\nprint(model.score(X_train, y_train))","961de3e0":"test_id = pd.read_csv(\"..\/input\/ieee-fraud-detection\/test_identity.csv\")\ntest_trans = pd.read_csv(\"..\/input\/ieee-fraud-detection\/test_transaction.csv\")","7eca5952":"test = test_trans.merge(test_id, how='left', on='TransactionID' )","de32c9d7":"test = test.rename(columns={\"id-01\": \"id_01\", \"id-02\": \"id_02\", \"id-03\": \"id_03\", \n                            \"id-06\": \"id_06\", \"id-05\": \"id_05\", \"id-04\": \"id_04\", \n                            \"id-07\": \"id_07\", \"id-08\": \"id_08\", \"id-09\": \"id_09\", \n                            \"id-10\": \"id_10\", \"id-11\": \"id_11\", \"id-12\": \"id_12\", \n                            \"id-15\": \"id_15\", \"id-14\": \"id_14\", \"id-13\": \"id_13\", \n                            \"id-16\": \"id_16\", \"id-17\": \"id_17\", \"id-18\": \"id_18\", \n                            \"id-21\": \"id_21\", \"id-20\": \"id_20\", \"id-19\": \"id_19\", \n                            \"id-22\": \"id_22\", \"id-23\": \"id_23\", \"id-24\": \"id_24\", \n                            \"id-27\": \"id_27\", \"id-26\": \"id_26\", \"id-25\": \"id_25\", \n                            \"id-28\": \"id_28\", \"id-29\": \"id_29\", \"id-30\": \"id_30\", \n                            \"id-31\": \"id_31\", \"id-32\": \"id_32\", \"id-33\": \"id_33\", \n                            \"id-34\": \"id_34\", \"id-35\": \"id_35\", \"id-36\": \"id_36\", \n                            \"id-37\": \"id_37\", \"id-38\": \"id_38\"})\ntest.head()","1427441b":"del test_id\ndel test_trans","a0e5665f":"X_test = preprocessor.transform(test[features])","2508d226":"CSI_submission = pd.read_csv(\"..\/input\/ieee-fraud-detection\/sample_submission.csv\")\nCSI_submission.head()","e20f54a5":"test_pred = model.predict_proba(X_test)\nprint(test_pred[:20])","71e771bc":"submission = pd.DataFrame({\n    'TransactionID' : test.TransactionID,\n    'isFraud' : test_pred[:,1]\n})\nsubmission.head()","3d5bb3b9":"submission.to_csv('my_submission.csv', index=False)","ca9d9e05":"* {'max_depth': 16}    0.74893428\n* {'max_depth': 24}    0.69960432\n* {'max_depth': 6}     0.77110391\n* {'max_depth': 10}    0.78623385\n* {'max_depth': 28}    0.67791525\n","a466a620":"* {'C': 5} 0.86233991 \n* {'C': 25} 0.86105991\n* {'C': 50} 0.86072292\n* {'C': 200} 0.86012576","b99a6506":"Vesta Corporation provided the dataset for this competition. Vesta Corporation is the forerunner in guaranteed e-commerce payment solutions. Founded in 1995.\n\nIn this competition, the aim is to benchmark machine learning models on a challenging large-scale dataset.\n\nThe data comes from Vesta's real-world e-commerce transactions and contains a wide range of features from device type to product features.\nThe machine learning model will alert the fraudulent transaction for millions of people around the world, helping hundreds of thousands of businesses reduce their fraud loss and increase their revenue.\n\nThe training dataset consists of more than 400 features and 5.9 Million samples. This is supervised binary classification problem and goal is to predict if a credit card transaction is Fraud based on input features mentioned below\nEvaluation\n\nThe model is evaluated on ROC_AUC score. The notebook will produce an output csv file with TransactionID and predicted probabilties on test set, which will be automatically evaluted by Kaggle.\n","203ec807":"%%time \n\nmodel = XGBClassifier(n_estimators=200, max_depth=3)\nparameters = {\n    'learning_rate' : [0.4,0.25,0.3,0.1,0.5]\n}\n\ngrid = GridSearchCV(model, parameters, cv=5, refit='True', n_jobs=-1, verbose=10, scoring='roc_auc')\n\ngrid.fit(X_train, y_train)","04aba79a":"## Load the Train Data ","c4794953":"* {'learning_rate': 0.4}   0.90593755\n* {'learning_rate': 0.25}  0.90493450\n* {'learning_rate': 0.3}   0.90564158\n* {'learning_rate': 0.1}   0.89987809\n* {'learning_rate': 0.5}   0.90127143","b3826fde":" #### 1. Data preparation\n\n#### 2. Selecting Numerical Features\n\n####  3. Selecting Categorical Features\n\n#### 4. Evaluate the Categorical Features\n\n#### 5. Data Preprocessing \n\n#### 6. Logistic Regression Model\n\n#### 7. Decision Tree Model\n\n#### 8. Random Forest Model\n\n#### 9. Gradient Boosted Trees\n\n#### 10. Model selection \n\n#### 11. Load Test Dataset\n\n#### 12. Generate Test Prediction\n\n","06f9c1d3":"## GRADIENT BOOSTED TREES","aad46311":"## Import Packages ","81d6d4cb":"## Data Preprocessing ","3cc4af38":"## Random Forest Model","7be9aa7a":"## Generate Test Predictions","2b683816":"\n* {'max_depth': 14}    0.88508168\n* {'max_depth': 18}    0.89350588\n* {'max_depth': 22}    0.90002487\n* {'max_depth': 24}    0.89710636\n* {'max_depth': 26}    0.89957935\n","74ea4cf8":"## Selecting Numerical Features\u00b6","c50c392e":"model = LogisticRegression(solver='saga')\n\nparameters = {'C' : [5, 25 , 50, 200]}\n\nlr_grid = GridSearchCV(model, parameters, cv=5, refit='True', n_jobs=-1, verbose=10, scoring='roc_auc')\nlr_grid.fit(np.asfortranarray(X_train), y_train)","0bc5dad4":"## Decision Tree Model","968cfb25":"## Load test Data ","d05f168b":"## Overview","22466e30":"## Merge Data ","57069c02":"## Logistic Regression Model","f0cb2828":" %%time\n    \nforest = RandomForestClassifier(random_state=1, n_estimators=100)\nparameters = {\n    'max_depth': [14,18,22,24,26],\n}\n\nforest_grid = GridSearchCV(forest, parameters, cv=5, refit='True', n_jobs=-1, verbose=10, scoring='roc_auc')\nforest_grid.fit(np.asfortranarray(X_train), y_train)","98e787df":"%%time\n\ndtree = DecisionTreeClassifier(random_state=1)\nparameters = {\n     'max_depth': [16,24,6,10,28], \n}\n\ndt_grid = GridSearchCV(dtree, parameters, cv=5, refit='True', n_jobs=-1, verbose=10, scoring='roc_auc')\ndt_grid.fit(np.asfortranarray(X_train), y_train)","7f7aeaa6":"### Evaluate the Categorical Features","b2c7ef71":"## Selecting Categorical Features"}}