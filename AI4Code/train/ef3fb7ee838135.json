{"cell_type":{"2c527704":"code","cfaa591c":"code","4ae2d476":"code","aacf8dd9":"code","6ecdbb13":"code","eb1d224e":"code","b8331bc4":"code","649bcf94":"code","7a28fee1":"code","f79c7169":"code","f5cab63f":"code","71d22640":"code","cc41a5c1":"code","afc776b4":"code","dd0e912f":"code","61a3c0a1":"markdown","064823ed":"markdown","6338783b":"markdown"},"source":{"2c527704":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cfaa591c":"import os, gc, datetime\nfrom time import time\n\nimport numpy as np\nimport pandas as pd\nimport datatable as dtable\nimport seaborn as sns\nfrom scipy.stats import skew, boxcox_normmax\nfrom scipy.special import boxcox1p\nfrom sklearn.metrics import roc_auc_score, accuracy_score\n\nfrom IPython import display\nfrom matplotlib import pyplot as plt\nfrom tqdm import tqdm\n\nimport tensorflow as tf\nimport tensorflow_addons as tfa\ntf.random.set_seed(42)\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras import layers, regularizers\nfrom tensorflow.keras.callbacks import Callback, ReduceLROnPlateau, ModelCheckpoint, EarlyStopping, TensorBoard","4ae2d476":"train = dtable.fread('\/kaggle\/input\/jane-street-market-prediction\/train.csv').to_pandas()","aacf8dd9":"features = [c for c in train.columns if 'feature' in c]\nf_mean = train.loc[:, features[1:]].mean()\ntrain = train.query('weight > 0').reset_index(drop = True)\ntrain = train.query('date > 85').reset_index(drop = True)\ntrain.loc[:, features[1:]] = train.loc[:, features[1:]].fillna(f_mean)\ntrain.loc[:, 'action'] = (train.loc[:, 'resp'] > 0).astype('int')\n\nresp_cols = ['resp_1', 'resp_2', 'resp_3', 'resp', 'resp_4']\n\nf_mean = f_mean.values\nnp.save('f_mean.npy', f_mean)\n\nX = train[features].values\ny = np.stack([(train[c] > 0).astype('int') for c in resp_cols]).T","6ecdbb13":"from sklearn.model_selection._split import _BaseKFold, indexable, _num_samples\nfrom sklearn.utils.validation import _deprecate_positional_args\n\n# https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\nclass GroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_size : int, default=None\n        Maximum size for a single training set.\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.model_selection import GroupTimeSeriesSplit\n    >>> groups = np.array(['a', 'a', 'a', 'a', 'a', 'a',\\\n                           'b', 'b', 'b', 'b', 'b',\\\n                           'c', 'c', 'c', 'c',\\\n                           'd', 'd', 'd'])\n    >>> gtss = GroupTimeSeriesSplit(n_splits=3)\n    >>> for train_idx, test_idx in gtss.split(groups, groups=groups):\n    ...     print(\"TRAIN:\", train_idx, \"TEST:\", test_idx)\n    ...     print(\"TRAIN GROUP:\", groups[train_idx],\\\n                  \"TEST GROUP:\", groups[test_idx])\n    TRAIN: [0, 1, 2, 3, 4, 5] TEST: [6, 7, 8, 9, 10]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a']\\\n    TEST GROUP: ['b' 'b' 'b' 'b' 'b']\n    TRAIN: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] TEST: [11, 12, 13, 14]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a' 'b' 'b' 'b' 'b' 'b']\\\n    TEST GROUP: ['c' 'c' 'c' 'c']\n    TRAIN: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\\\n    TEST: [15, 16, 17]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a' 'b' 'b' 'b' 'b' 'b' 'c' 'c' 'c' 'c']\\\n    TEST GROUP: ['d' 'd' 'd']\n    \"\"\"\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_size=None\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_size = max_train_size\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n        group_test_size = n_groups \/\/ n_folds\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n            for train_group_idx in unique_groups[:group_test_start]:\n                train_array_tmp = group_dict[train_group_idx]\n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n            train_end = train_array.size\n            if self.max_train_size and self.max_train_size < train_end:\n                train_array = train_array[train_end -\n                                          self.max_train_size:train_end]\n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n            yield [int(i) for i in train_array], [int(i) for i in test_array]\n","eb1d224e":"class LearningRateLogger(tf.keras.callbacks.Callback):\n    def __init__(self):\n        super().__init__()\n        self._supports_tf_logs = True\n\n    def on_epoch_end(self, epoch, logs=None):\n        if logs is None or \"learning_rate\" in logs:\n            return\n        logs[\"learning_rate\"] = self.model.optimizer.lr\n\n        \ndef get_callbacks(name, fold):\n    return [\n        ReduceLROnPlateau(monitor = 'val_AUC', factor = 0.5, patience = 5, verbose = 0, min_delta = 1e-4, mode = 'max'),\n        ModelCheckpoint(f'JSModel_{fold}.hdf5' , monitor = 'val_AUC', verbose = 0, save_best_only = True, \n                        save_weights_only = True, mode = 'max'),\n        EarlyStopping(monitor = 'val_AUC', min_delta = 1e-4, patience = 15, mode = 'max', \n                      baseline = None, restore_best_weights = True, verbose = 0),\n        LearningRateLogger(),\n        # tf.keras.callbacks.TensorBoard(logdir\/f\"{name}_{fold}\"),\n    ]","b8331bc4":"def utility_score_bincount(date, weight, resp, action):\n    count_i = len(np.unique(date))\n    Pi = np.bincount(date, weight * resp * action)\n    t = np.sum(Pi) \/ np.sqrt(np.sum(Pi ** 2)) * np.sqrt(250 \/ count_i)\n    u = np.clip(t, 0, 6) * np.sum(Pi)\n    return u","649bcf94":"c_1 = [\"feature_0\", \"feature_1\",\"feature_3\",\"feature_5\",\"feature_7\",\"feature_9\",\"feature_11\",\"feature_13\",\"feature_15\",\"feature_17\",\"feature_19\",\"feature_21\",\"feature_23\",\"feature_25\",\"feature_27\",\"feature_29\",\"feature_31\",\"feature_33\",\"feature_35\",\"feature_37\",\"feature_39\",\"feature_41\",\"feature_42\",\"feature_43\",\"feature_44\",\"feature_45\",\"feature_46\",\"feature_47\",\"feature_48\",\"feature_49\",\"feature_50\",\"feature_51\",\"feature_52\",\"feature_53\",\"feature_54\",\"feature_55\",\"feature_56\",\"feature_57\",\"feature_58\",\"feature_59\",\"feature_60\",\"feature_61\",\"feature_62\",\"feature_63\",\"feature_64\",\"feature_65\",\"feature_66\",\"feature_67\",\"feature_68\",\"feature_69\",\"feature_70\",\"feature_71\",\"feature_120\",\"feature_121\",\"feature_122\",\"feature_123\",\"feature_124\",\"feature_125\",\"feature_126\",\"feature_127\",\"feature_128\",\"feature_129\"]\nc_2 = [\"feature_0\", \"feature_78\",\"feature_79\",\"feature_80\",\"feature_81\",\"feature_82\",\"feature_83\",\"feature_90\",\"feature_91\",\"feature_92\",\"feature_93\",\"feature_94\",\"feature_95\",\"feature_102\",\"feature_103\",\"feature_104\",\"feature_105\",\"feature_106\",\"feature_107\",\"feature_114\",\"feature_115\",\"feature_116\",\"feature_117\",\"feature_118\",\"feature_119\"]\nc_3 = [\"feature_0\", \"feature_72\",\"feature_73\",\"feature_74\",\"feature_75\",\"feature_76\",\"feature_77\",\"feature_84\",\"feature_85\",\"feature_86\",\"feature_87\",\"feature_88\",\"feature_89\",\"feature_96\",\"feature_97\",\"feature_98\",\"feature_99\",\"feature_100\",\"feature_101\",\"feature_108\",\"feature_109\",\"feature_110\",\"feature_111\",\"feature_112\",\"feature_113\"]\nc_4 = [\"feature_0\", \"feature_2\",\"feature_4\",\"feature_6\",\"feature_8\",\"feature_10\",\"feature_12\",\"feature_14\",\"feature_16\",\"feature_18\",\"feature_20\",\"feature_22\",\"feature_24\",\"feature_26\",\"feature_28\",\"feature_30\",\"feature_32\",\"feature_34\",\"feature_36\",\"feature_38\",\"feature_40\"]","7a28fee1":"c_1_ = np.array([int(x.split(\"_\")[-1]) for x in c_1])\nc_2_ = np.array([int(x.split(\"_\")[-1]) for x in c_2])\nc_3_ = np.array([int(x.split(\"_\")[-1]) for x in c_3])\nc_4_ = np.array([int(x.split(\"_\")[-1]) for x in c_4])","f79c7169":"f_shape = [len(c_1), len(c_2), len(c_3), len(c_4)]\nf_shape","f5cab63f":"from tensorflow.keras.utils import plot_model\n\ndef model_1(inp):\n    x = tf.keras.layers.LayerNormalization()(inp)\n    x = tf.keras.layers.Dropout(0.1)(x)\n    x = tf.keras.layers.Dense(64)(x)\n    x = tf.keras.layers.BatchNormalization()(x)\n    x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n    x = tf.keras.layers.Dropout(0.1)(x)\n    x = tf.keras.layers.Dense(64)(x)\n    x = tf.keras.layers.BatchNormalization()(x)\n    x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n    out = tf.keras.layers.Dropout(0.1)(x)\n    return out\n    \n\ndef model_2(inp):\n    x = tf.keras.layers.LayerNormalization()(inp)\n    x = tf.keras.layers.Dropout(0.1)(x)\n    x = tf.keras.layers.Dense(32)(x)\n    x = tf.keras.layers.BatchNormalization()(x)\n    x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n    x = tf.keras.layers.Dropout(0.1)(x)\n    x = tf.keras.layers.Dense(32)(x)\n    x = tf.keras.layers.BatchNormalization()(x)\n    x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n    out = tf.keras.layers.Dropout(0.1)(x)\n    return out\n\ndef model_3(inp):\n    x = tf.keras.layers.LayerNormalization()(inp)\n    x = tf.keras.layers.Dropout(0.1)(x)\n    x = tf.keras.layers.Dense(32)(x)\n    x = tf.keras.layers.BatchNormalization()(x)\n    x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n    x = tf.keras.layers.Dropout(0.1)(x)\n    x = tf.keras.layers.Dense(32)(x)\n    x = tf.keras.layers.BatchNormalization()(x)\n    x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n    out = tf.keras.layers.Dropout(0.1)(x)\n    return out\n\ndef model_4(inp):\n    x = tf.keras.layers.LayerNormalization()(inp)\n    x = tf.keras.layers.Dropout(0.1)(x)\n    x = tf.keras.layers.Dense(32)(x)\n    x = tf.keras.layers.BatchNormalization()(x)\n    x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n    x = tf.keras.layers.Dropout(0.1)(x)\n    x = tf.keras.layers.Dense(32)(x)\n    x = tf.keras.layers.BatchNormalization()(x)\n    x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n    out = tf.keras.layers.Dropout(0.1)(x)\n    return out\n\n\ndef create_mlp(f_shape, num_labels, hidden_units, dropout_rates, label_smoothing, learning_rate):\n    \n    inp1 = tf.keras.layers.Input(shape = (f_shape[0], ))\n    inp2 = tf.keras.layers.Input(shape = (f_shape[1], ))\n    inp3 = tf.keras.layers.Input(shape = (f_shape[2], ))\n    inp4 = tf.keras.layers.Input(shape = (f_shape[3], ))\n    \n    mlp1 = model_1(inp1)\n    mlp2 = model_2(inp2)\n    mlp3 = model_3(inp3)\n    mlp4 = model_4(inp4)\n    \n    combined = tf.keras.layers.Concatenate()([mlp1, mlp2, mlp3, mlp4])\n    \n#     x = tf.keras.layers.Dense(512)(combined)\n#     x = tf.keras.layers.BatchNormalization()(x)\n#     x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n#     x = tf.keras.layers.Dropout(0.2)(x)\n#     x = tf.keras.layers.Dense(256)(x)\n#     x = tf.keras.layers.BatchNormalization()(x)\n#     x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n#     x = tf.keras.layers.Dropout(0.2)(x)\n#     x = tf.keras.layers.Dense(256)(x)\n#     x = tf.keras.layers.BatchNormalization()(x)\n#     x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n#     x = tf.keras.layers.Dropout(0.2)(x)\n#     x = tf.keras.layers.Dense(512)(x)\n#     x = tf.keras.layers.BatchNormalization()(x)\n#     x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n#     x = tf.keras.layers.Dropout(0.2)(x)\n    \n    out = tf.keras.layers.Dense(num_labels, activation=\"sigmoid\")(combined)\n    \n    model = tf.keras.models.Model(inputs =[inp1, inp2, inp3, inp4], outputs = out)\n    \n    # plot_model(model, to_file='demo.png', show_shapes=True)\n    \n    model.compile(optimizer = tf.keras.optimizers.Adam(learning_rate = learning_rate),\n                  loss = tf.keras.losses.BinaryCrossentropy(label_smoothing = label_smoothing), \n                  metrics = tf.keras.metrics.AUC(name = 'AUC'))\n    return model","71d22640":"name = \"mlp\"\nbatch_size = 4096*16\nhidden_units = [64, 32, 64, 130, 256, 256, 128]\ndropout_rates = [0.1, 0.2, 0.2, 0.2, 0.25, 0.25, 0.25, 0.25]\nlabel_smoothing = 1e-2\nlearning_rate = 1e-3\n\nscores_list = []\ngtss = GroupTimeSeriesSplit(n_splits = 5)\n\n# for fold, (train_idx, test_idx) in enumerate(gtss.split(y, groups=train['date'])):\n#     start_time_fold = time()\n    \n# #     X_train, X_val = X.loc[train_idx, features].values, train.loc[test_idx, features].values\n# #     y_train, y_val = y.loc[train_idx, 'action'].values, train.loc[test_idx, 'action'].values\n#     X_train, X_val = X[train_idx], X[test_idx]\n#     y_train, y_val = y[train_idx], y[test_idx]\n    \n#     X_t_1 = X_train[:, c_1_]\n#     X_t_2 = X_train[:, c_2_]\n#     X_t_3 = X_train[:, c_3_]\n#     X_t_4 = X_train[:, c_4_]\n    \n#     X_v_1 = X_val[:, c_1_]\n#     X_v_2 = X_val[:, c_2_]\n#     X_v_3 = X_val[:, c_3_]\n#     X_v_4 = X_val[:, c_4_]\n    \n#     X_train_ = [X_t_1, X_t_2, X_t_3, X_t_4]\n#     X_val_ = [X_v_1, X_v_2, X_v_3, X_v_4]\n\n#     ckp_path = f'JSModel_{fold}.hdf5'\n#     model = create_mlp(f_shape, 5, hidden_units, dropout_rates, label_smoothing, learning_rate)\n    \n#     model.summary()\n\n#     history = model.fit(\n#         X_train_,\n#         y_train,\n#         batch_size = batch_size,\n#         validation_data = (X_val_, y_val),\n#         epochs = 250,\n#         callbacks = get_callbacks(name, fold),\n#         verbose = 1)\n    \n#     hist = pd.DataFrame(history.history)\n#     print(f'[{str(datetime.timedelta(seconds = time() - start_time_fold))[0:7]}] Fold {fold} ROC AUC:\\t', hist['val_AUC'].max())\n#     scores_list.append(hist['val_AUC'].max())\n#     # print(model.predict(X_val_, batch_size = batch_size).shape)\n#     # print(np.mean(model.predict(X_val_, batch_size = batch_size), axis=1).shape)\n#     val_res = np.where(np.mean(model.predict(X_val_, batch_size = batch_size), axis=1).ravel() > 0.5, 1, 0).astype(int)\n#     val_res2 = np.where(np.median(model.predict(X_val_, batch_size = batch_size), axis=1).ravel() > 0.5, 1, 0).astype(int)\n\n#     print(\"full u_score:\", utility_score_bincount(train.date[test_idx], train.weight[test_idx], train.resp[test_idx], train.action[test_idx]))\n#     print(\"model u_score:\", utility_score_bincount(train.date[test_idx], train.weight[test_idx], train.resp[test_idx], val_res))\n#     print(\"model u_score:\", utility_score_bincount(train.date[test_idx], train.weight[test_idx], train.resp[test_idx], val_res2))\n    \n#     # Finetune 3 epochs on validation set with small learning rate\n#     model = create_mlp(f_shape, 1, hidden_units, dropout_rates, label_smoothing, learning_rate \/ 100)\n#     model.load_weights(ckp_path)\n#     model.fit(X_val_, y_val, epochs = 3, batch_size = batch_size, verbose = 0)\n#     model.save_weights(ckp_path)\n    \n#     K.clear_session()\n#     del model\n#     rubbish = gc.collect()","cc41a5c1":"models_idx = [0,1,2,3,4]\n\nmodels = []\nfor i in models_idx:\n    clf = create_mlp(f_shape, 5, hidden_units, dropout_rates, label_smoothing, learning_rate)\n    path = f'..\/input\/stacknnmodels\/JSModel_{i}.hdf5'\n    print(path)\n    clf.load_weights(path)\n#     clf.load_weights(f'.\/JSModel_{i}.hdf5')\n    models.append(clf)","afc776b4":"import janestreet\nenv = janestreet.make_env()\nenv_iter = env.iter_test()","dd0e912f":"opt_th = 0.5\nw = np.asarray([0.05,0.05,0.1,0.5,0.3])\nfor (test_df, pred_df) in tqdm(env_iter):\n    if test_df['weight'].item() > 0:\n        x_tt = test_df.loc[:, features].values\n        if np.isnan(x_tt[:, 1:].sum()):\n            x_tt[:, 1:] = np.nan_to_num(x_tt[:, 1:]) + np.isnan(x_tt[:, 1:]) * f_mean\n        \n        x_tt_1 = x_tt[:, c_1_]\n        x_tt_2 = x_tt[:, c_2_]\n        x_tt_3 = x_tt[:, c_3_]\n        x_tt_4 = x_tt[:, c_4_]\n    \n        x_tt_ = [x_tt_1, x_tt_2, x_tt_3, x_tt_4]\n        \n        # pred = np.mean([model.predict(x_tt_) for model in models[-2:]],axis=0).squeeze()\n        # pred = np.average(models[-2](x_tt_, training = False).numpy().squeeze(), weights=w)\n        pred = np.mean(models[-2](x_tt_, training = False).numpy().squeeze())\n        pred_df.action = np.where(pred >= opt_th, 1, 0).astype(int)\n    else:\n        pred_df.action = 0\n    env.predict(pred_df)","61a3c0a1":"## use tags cluster info from Ignacio's https:\/\/www.kaggle.com\/ignacioalorre\/clustering-features-based-on-correlation-and-tags","064823ed":"![demo.png](attachment:demo.png)","6338783b":"## the network structure"}}