{"cell_type":{"e6b23760":"code","f3e6bd2b":"code","82ad71c5":"code","5a8a076e":"code","8e6dcd58":"code","a0d679c1":"code","4b173e9a":"code","df7bac9b":"code","e2e1e67d":"code","22328371":"code","d443cd29":"code","ac54ff77":"code","a6725765":"code","eb904e4b":"code","16a41173":"code","45112e24":"code","27a10ebc":"code","32666740":"code","78155312":"code","eef4c4bf":"code","2e9b5208":"code","d1ee34da":"code","65d99e4c":"code","f7fbcfdd":"code","6c3ebabe":"code","b53a3e7b":"code","4ca83d10":"code","39a405b0":"code","daac44d9":"code","1cc64f20":"code","9b0d5d15":"code","a64f06fc":"code","b6683c28":"markdown","41756610":"markdown","6b200a65":"markdown"},"source":{"e6b23760":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f3e6bd2b":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","82ad71c5":"df=pd.read_csv(\"..\/input\/911.csv\")\ndf.info() # here we get overal information about the data","5a8a076e":"df.head()# here we get the first 5 rows of the data","8e6dcd58":"#here we get the top 5 zipcodes for 911 calls: \ndf[\"zip\"].value_counts().head(5)","a0d679c1":"# here is the top 5 townships (twp) for 911 calls?\ndf[\"twp\"].value_counts().head(5)","4b173e9a":"#In the titles column there are \"Reasons\/Departments\" specified before the title code as EMS, Fire, and Traffic. \n#We will use .apply() with a custom lambda expression to create a new column called \"Reason\" that contains this string value.\ndf[\"Reason\"]=df[\"title\"].apply(lambda title: title.split(\":\")[0])\ndf.head(10)","df7bac9b":"#here is the most common Reason for a 911 call based off of this new column:\ndf[\"Reason\"].value_counts().head(1)","e2e1e67d":"# here we reate a countplot of 911 calls by Reason.\nplt.figure(figsize=(20,10))\nsns.countplot(x=\"Reason\",data=df,palette=\"viridis\")","22328371":"# here is the data type of the objects in the timeStamp column:\ndf[\"timeStamp\"].iloc[0] # it is a string, but to make more analysis with data we need to convert it into Timestamp object","d443cd29":"df[\"timeStamp\"]=pd.to_datetime(df[\"timeStamp\"]) # here we convert the column from strings to DateTime objects\ndf[\"timeStamp\"].iloc[0]","ac54ff77":"# here we will create three separate new columns that show Hour, Month and Day of Week to further analysis\ndf[\"Hour\"]=df[\"timeStamp\"].apply(lambda time: time.hour)\ndf[\"Hour\"] # now we have a new column showing just hour of the events","a6725765":"df[\"Month\"]=df[\"timeStamp\"].apply(lambda time: time.month )\ndf[\"Day of Week\"]=df[\"timeStamp\"].apply(lambda time: time.dayofweek)\ndf.head() # now we have three new separate columns that gives better understanding of the data ","eb904e4b":"# we can convert Day of Week columns from integer to their actual names for better understanding:\nday={0:'Monday',1:'Tuesday',2:'Wednesday',3:'Thursday',4:'Friday',5:'Saturday',6:'Sunday'}\ndf[\"Day of Week\"]=df[\"Day of Week\"].map(day) # here we convert integers into day names \n#.map() is a method of series in pandas not a method of dataframes\ndf.head(10)","16a41173":"# here we create a countplot of the Day of Week column with the hue based off of the Reason column\nplt.figure(figsize=(15,10))\nsns.countplot(x=\"Day of Week\", data=df,hue=\"Reason\")#this represents the number of call according to days with regard to Reason\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5)) # here we carry legend out of the plot","45112e24":"plt.figure(figsize=(15,10))\nsns.countplot(x=\"Month\", data=df)#this represents the number of call according to days","27a10ebc":"byMonth=df.groupby(\"Month\").count() \n# we can make a groupby object if we want to create other types of plot that will show the number of call\nbyMonth","32666740":"#here we create a simple plot off of the dataframe indicating the count of calls per month\n\nplt.figure(figsize=(15,10))\nplt.plot(byMonth)\nplt.show()","78155312":"months={1:'January',2:'February',3:'March',4:'April',5:'May',6:'June',7:'July',8:\"August\",9:\"September\",10:\"October\",11:\"November\",12:\"December\"}\ndf[\"Month\"]=df[\"Month\"].map(months) # here we make month be represented by their actual names not numbers in order make it more understandable\ndf.head()\n\n","eef4c4bf":"df[\"Date\"]=df[\"timeStamp\"].apply(lambda time: time.date() )\ndf[\"Date\"]# here we created a new columnd that get the date from another column via a lambda expression","2e9b5208":"# here we groupby this Date column with the count() aggregate and create a plot of counts of 911 calls.\ndate=df.groupby(\"Date\").count()\ndate=date.reset_index()\nplt.figure(figsize=(15,10))\nsns.lineplot(x=\"Date\",y=\"twp\",data=date)","d1ee34da":"# we can create the same line plot via plt.plot() method\nplt.figure(figsize=(15,10))\ndf.groupby(\"Date\").count()[\"twp\"].plot()","65d99e4c":"#here we recreate this plot but create 3 separate plots with each plot representing a Reason for the 911 call\ndf.groupby(\"Reason\").count() # here we can see the number of incidents according to reason","f7fbcfdd":"plt.figure(figsize=(20,10)) \ndf.groupby(\"Reason\").count()[\"twp\"].plot() # here we plot \n","6c3ebabe":"#For better understanding we can plot 3 different reasons separately as follows:\ndf[df[\"Reason\"]==\"Fire\"] # here we make a condition selection where the reason is fire","b53a3e7b":"# we can groupby it according the count and plot is separately as follows:\nplt.figure(figsize=(15,10))\ndf[df[\"Reason\"]==\"Fire\"].groupby(\"Date\").count().plot() #but this shows all of the columns so we need to narrow it","4ca83d10":"plt.figure(figsize=(15,10))\ndf[df[\"Reason\"]==\"Fire\"].groupby(\"Date\").count()[\"twp\"].plot(title=\"Fire\") # so this plot shows just fire as a reason\n# we copy the same code for other reasons as follows:","39a405b0":"plt.figure(figsize=(15,10))\ndf[df[\"Reason\"]==\"EMS\"].groupby(\"Date\").count()[\"twp\"].plot(title=\"EMS\",color=\"green\")# we just change the color and the type of reason","daac44d9":"plt.figure(figsize=(15,10))\ndf[df[\"Reason\"]==\"Traffic\"].groupby(\"Date\").count()[\"twp\"].plot(title=\"Traffic\",color=\"red\")","1cc64f20":"# we can make heatmaps with this data but we need not group two columns and use unstack() method in order to get a matrix data\n#because sns.heatmap() accepts only matrix data\nvalue=df.groupby([\"Day of Week\",\"Hour\"]).count()[\"Reason\"].unstack()\nvalue","9b0d5d15":"plt.figure(figsize=(15,10))\nsns.heatmap(value,linecolor=\"black\", linewidths=1)","a64f06fc":"# we can get more relational data via sns.clustermap\nplt.figure(figsize=(15,10))\nsns.clustermap(value,cmap=\"coolwarm\",linecolor=\"black\", linewidths=1)\n# we can see easliy for the heat or clustermap that most of the call come between 16:00-17:00, particularly in the weekdays","b6683c28":"Firstly we need to get an overall information about the data","41756610":"we need to import visualization libraries and set %matplotlib inline","6b200a65":"We can create new feature in order to make the data better more understandable"}}