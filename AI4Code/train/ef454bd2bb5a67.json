{"cell_type":{"5bfb5029":"code","5de8675d":"code","a34801fb":"code","47340664":"code","6c24398c":"code","1c46e270":"code","8b1ba60f":"code","36b57999":"code","cfcaaf92":"code","b7e5c17d":"code","b191748e":"code","06a01d9d":"code","8b150d07":"code","97dd5603":"code","4b0d695b":"code","bf296858":"code","a4e1da20":"code","d0eaf544":"code","310c9ece":"code","7f88b01d":"code","d037b218":"code","1e23f9cd":"code","1723fc6f":"code","e07d3a25":"code","7f31422c":"code","11fcac2e":"code","39f63769":"code","2665c596":"code","a20540ba":"code","1e163da4":"code","d59bda1d":"code","ea602bb9":"code","b84c448a":"code","bbb1b734":"code","3a557b44":"code","2324a2ea":"code","de23f628":"code","68c771bf":"code","ebbef8a9":"code","6f68c887":"code","ec064bdd":"code","9a0a751f":"code","4f573643":"code","bbc17121":"code","7dc9dd85":"code","f9c49f4b":"code","fd72293f":"code","39be7794":"code","31742b70":"code","bc131a3e":"code","15de7603":"code","e3e7b63b":"code","c06fb4bf":"code","ecaa7a15":"code","46ea43bc":"code","ba4a6a56":"code","bb664e56":"markdown","cb14574f":"markdown","79860f76":"markdown","7efe4aaa":"markdown","bbfbd753":"markdown","06abf36c":"markdown"},"source":{"5bfb5029":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5de8675d":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns","a34801fb":"os.listdir('\/kaggle\/input\/weather-dataset-rattle-package')","47340664":"df = pd.read_csv('\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv')","6c24398c":"df.head()","1c46e270":"df.shape","8b1ba60f":"plt.figure(figsize=(10,8))\nsns.heatmap(df.isna(),cmap='viridis',cbar=False)","36b57999":"plt.figure(figsize=(10,8))\nsns.heatmap(df.corr(),annot=True,cmap='viridis')","cfcaaf92":"feature_with_na = [feature for feature in df.columns if df[feature].isnull().sum()>1] ","b7e5c17d":"for feature in feature_with_na:\n    print(feature,np.round(df[feature].isnull().mean()*100,4), '% missing values')","b191748e":"df.head()","06a01d9d":"df['RainTomorrow'] = df['RainTomorrow'].replace('No',0)","8b150d07":"df['RainTomorrow'] = df['RainTomorrow'].replace('Yes',1)","97dd5603":"df.head()","4b0d695b":"for feature in feature_with_na:\n    data = df.copy()\n    data[feature] = np.where(data[feature].isnull(),1,0)\n    data.groupby(feature)['RainTomorrow'].median().plot.bar()\n    plt.title(feature)\n    plt.show()","bf296858":"numeric_feature = [feature for feature in df.columns if df[feature].dtype!='O']","a4e1da20":"print('Number of numerical feature : ',len(numeric_feature))\ndf[numeric_feature].head()","d0eaf544":"discrete_feature = [feature for feature in numeric_feature if len(df[feature].unique()) < 25]","310c9ece":"print('Discrete Feature count  : {} '.format(len(discrete_feature)))","7f88b01d":"discrete_feature","d037b218":"for feature in discrete_feature:\n    data = df.copy()\n    data.groupby(feature)['RainTomorrow'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('RainTomorrow')\n    plt.title(feature)\n    plt.show()","1e23f9cd":"contineous_feature = [feature for feature in numeric_feature if feature not in discrete_feature]","1723fc6f":"print('Count of contineous feature are {}'.format(len(contineous_feature)))","e07d3a25":"contineous_feature","7f31422c":"for feature in contineous_feature:\n    data = df.copy()\n    data.groupby(feature)['RainTomorrow'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('RainTomorrow')\n    plt.title(feature)\n    plt.show()","11fcac2e":"for feature in contineous_feature:\n    data = df.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature]=np.log(data[feature])\n        #data[feature]=np.log(data['RainTomorrow'])\n        plt.scatter(data[feature],data['RainTomorrow'])\n        plt.xlabel(feature)\n        plt.ylabel('RainTomorrow')\n        plt.title(feature)\n        plt.show()","39f63769":"df = df.drop('Date',axis=1)","2665c596":"categorical_feature = [feature for feature in df.columns if df[feature].dtype=='O']","a20540ba":"print(categorical_feature)","1e163da4":"def replace_cat_nan(dataset,feature_nan):\n    data=df.copy()\n    data[feature_nan] = data[feature_nan].fillna('Missing')\n    return data","d59bda1d":"df = replace_cat_nan(df,categorical_feature)","ea602bb9":"df[categorical_feature].isnull().sum()","b84c448a":"df[categorical_feature].isnull().sum()","bbb1b734":"for feature in numeric_feature:\n    median_value = df[feature].median()\n    #df[feature + \"Nan\"] = np.where(df[feature].isnull()1,0)\n    df[feature].fillna(median_value,inplace=True)\n    \ndf[numeric_feature].isnull().sum()","3a557b44":"sns.heatmap(df.isnull(),cbar=False,cmap='viridis')","2324a2ea":"feature_with_na_values = [feature for feature in df.columns if df[feature].isnull().sum()>1] ","de23f628":"for feature in feature_with_na_values:\n    print(feature,np.round(df[feature].isnull().mean()*100,4), '% missing values')","68c771bf":"print(feature_with_na_values)","ebbef8a9":"for feature in categorical_feature:\n    labels_ordered = df.groupby([feature])['RainTomorrow'].mean().sort_values().index\n    labels_ordered = {k:i for i,k in enumerate(labels_ordered,0)}\n    df[feature] = df[feature].map(labels_ordered)","6f68c887":"X = df.drop('RainTomorrow',axis=1)\ny = df['RainTomorrow']","ec064bdd":"from sklearn.model_selection import train_test_split","9a0a751f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","4f573643":"from sklearn.feature_selection import SelectFromModel\nfrom sklearn.linear_model import Lasso","bbc17121":"feature_for_model = SelectFromModel(Lasso(alpha=0.05,random_state=0))\nfeature_for_model.fit(X_train,y_train)","7dc9dd85":"feature_for_model.get_support()","f9c49f4b":"X.columns","fd72293f":"X = df[['Location','Rainfall','Sunshine','WindGustSpeed','WindDir3pm','WindSpeed3pm','Humidity3pm','Pressure3pm']]","39be7794":"y = df['RainTomorrow']","31742b70":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","bc131a3e":"from sklearn.linear_model import LogisticRegression","15de7603":"model = LogisticRegression()","e3e7b63b":"model.fit(X_train,y_train)","c06fb4bf":"y_pred=model.predict(X_test)","ecaa7a15":"from sklearn.metrics import classification_report,confusion_matrix","46ea43bc":"print(classification_report(y_test,y_pred))","ba4a6a56":"print(confusion_matrix(y_test,y_pred))","bb664e56":"### Get all Categorical Features","cb14574f":"### Find Discrete Variable","79860f76":"### How many features are numeric feature","7efe4aaa":"### Fill all missing values with a new label 'Missing'","bbfbd753":"### Fill all numerical value with Median","06abf36c":"### Missing Features ar importnat or not"}}