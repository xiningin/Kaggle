{"cell_type":{"a0a1758a":"code","d14d181c":"code","64c5f337":"code","72f3754c":"code","08c84a0b":"code","de9e3528":"code","067cf4ef":"code","8b17e292":"code","dbe32499":"code","ce1660e9":"code","a52346c5":"code","949ec4d0":"code","ee3dfa0a":"code","b7a0f1f0":"code","597e6b58":"code","bd35dae1":"code","930b5709":"code","55e42ca4":"code","e50fe622":"code","9e90e79d":"code","4c43ab39":"code","d40707dc":"code","2d0fdc4b":"code","afeed735":"code","9f8247bf":"code","a008bc80":"code","24b7921f":"code","34562da1":"code","ee64439b":"code","e86c3cf8":"code","cc0d947b":"code","ed089719":"code","6fc104cd":"code","790cd456":"code","4a7ab7bb":"code","51d12626":"code","436c05e4":"code","56013749":"code","57c861cf":"code","b21d7fc8":"code","afb584a3":"code","e88e2d88":"code","d2bc1d11":"code","dbefa4ec":"code","1493fa57":"code","cb3b6e75":"code","5ea3fba3":"code","ed6a7f9b":"code","47bf5274":"code","1707d60c":"code","f1905a42":"code","18d302b9":"code","a5ee11bf":"code","38ee8517":"code","e6e13c65":"code","e2fc1e96":"code","b2d1fe1b":"code","b9635e7f":"code","040c3a16":"code","1b9e71b3":"code","53fc780d":"code","4df097c9":"code","7a1a14b6":"code","c83f2c0b":"code","e858e496":"code","f467cfbe":"code","265b3790":"code","9e193857":"code","cbea08f7":"code","cfab7a09":"code","783eec9b":"code","1361a82c":"code","37b91b6a":"code","3f9a7ed2":"code","ce4be591":"code","4c93bc76":"code","9e44c570":"code","61916d98":"code","829affac":"code","5eec2981":"code","0613842c":"code","4de77faf":"code","769abb49":"code","2127af32":"code","acc7b9a5":"code","f813a3c2":"code","03505764":"code","b6b5301e":"markdown","6e5b4f52":"markdown","056afa09":"markdown","adf8c106":"markdown","24c489f2":"markdown","980a74b0":"markdown","53399b31":"markdown","9afd49fc":"markdown","58a90740":"markdown","75f4872a":"markdown","64579fb5":"markdown","a3c59ed1":"markdown","56d7a3d3":"markdown","6231b316":"markdown","a7de4129":"markdown","3951222c":"markdown","9a6d610b":"markdown","0e9f65f9":"markdown","77fc8df8":"markdown","3bd5b9c6":"markdown","b7e55e32":"markdown","a22b8645":"markdown","88256a4b":"markdown","99d8bafc":"markdown","9c5de47b":"markdown","537c6b4d":"markdown","4f8cbfd8":"markdown","0439cf9d":"markdown","b5600b7a":"markdown","6700cc7a":"markdown","f62c047f":"markdown","eaf027ef":"markdown","98c97cbf":"markdown","ddf0cb1c":"markdown","99d5b4bc":"markdown","f4024c28":"markdown","24862207":"markdown","ad6c42d2":"markdown","a9de24e1":"markdown","579d0ec5":"markdown","476558cb":"markdown","38e73c85":"markdown","f06cbe1b":"markdown","4d9ae96f":"markdown","ea04d6b3":"markdown","0ed4db3f":"markdown","f6915b83":"markdown","298e1c25":"markdown","87fe93da":"markdown","edcba1b4":"markdown","da080ad2":"markdown","3ce043e1":"markdown","3f009c64":"markdown","af3519a4":"markdown","a96ae473":"markdown","42246542":"markdown","642071c6":"markdown","5db010ca":"markdown","512ac432":"markdown","4269bcba":"markdown","0f3f74a8":"markdown","002096ea":"markdown","3c706bbe":"markdown","6266bbe5":"markdown","84e69005":"markdown","3b35d534":"markdown","141c0b1f":"markdown","2cb06e29":"markdown","8291cf9e":"markdown","9343c764":"markdown","df8e6ca4":"markdown","8264193f":"markdown","4bd55c83":"markdown","954124c0":"markdown","9563883a":"markdown","96bd6415":"markdown","aa94c705":"markdown","859980ff":"markdown","fa1a392c":"markdown","6c14e7ae":"markdown","65a260ed":"markdown","fa8b4c49":"markdown","9a117df8":"markdown","4ea555d9":"markdown","513989af":"markdown","6fdf708a":"markdown","40bbf984":"markdown","492dbf15":"markdown","2241eccb":"markdown","6414e0dc":"markdown","f4fae17d":"markdown","54c4eb2b":"markdown","b83d6599":"markdown","7a8bde6d":"markdown","16b50cf5":"markdown","4750ba94":"markdown","b952be35":"markdown","e1ea9de3":"markdown","a3e5abb9":"markdown","b8b389d7":"markdown","282132d5":"markdown","18a4d349":"markdown","4fed7b82":"markdown","ec5a3dad":"markdown","c22084a4":"markdown","a775768d":"markdown","a99c3607":"markdown","25f6d865":"markdown","85d29252":"markdown","d71b4ccc":"markdown","ee85c7aa":"markdown","9568592c":"markdown","015bc1ef":"markdown","b032ee08":"markdown","88b76dba":"markdown","86a9092a":"markdown","405184c0":"markdown","da2d4f8a":"markdown","19328c86":"markdown","be90d97a":"markdown","d180ec83":"markdown","f6b12064":"markdown","c4b3610d":"markdown","5e6cf899":"markdown","246ce803":"markdown","216007d9":"markdown","e6822bcf":"markdown"},"source":{"a0a1758a":"# @title Tutorial slides\n\n# @markdown These are the slides for the videos in this tutorial today\nfrom IPython.display import IFrame\nIFrame(src=f\"https:\/\/mfr.ca-1.osf.io\/render?url=https:\/\/osf.io\/wcjrv\/?direct%26mode=render%26action=download%26mode=render\", width=854, height=480)","d14d181c":"# @title Install dependencies\n!pip install pandas --quiet\n!pip install -U scikit-learn --quiet","64c5f337":"# Imports\nimport time\nimport torch\nimport random\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom torch import nn\nfrom torchvision import datasets\nfrom torchvision.transforms import ToTensor\nfrom torch.utils.data import DataLoader","72f3754c":"# @title Figure Settings\nimport ipywidgets as widgets\n%config InlineBackend.figure_format = 'retina'\nplt.style.use(\"https:\/\/raw.githubusercontent.com\/NeuromatchAcademy\/content-creation\/main\/nma.mplstyle\")","08c84a0b":"# @title Helper Functions\ndef checkExercise1(A, B, C, D):\n  \"\"\"\n  Helper function for checking exercise.\n\n  Args:\n    A: torch.Tensor\n    B: torch.Tensor\n    C: torch.Tensor\n    D: torch.Tensor\n  Returns:\n    Nothing.\n  \"\"\"\n  errors = []\n  #TODO better errors and error handling\n  if not torch.equal(A.to(int),torch.ones(20,21).to(int)):\n    errors.append(f\"Got: {A} \\n Expected: {torch.ones(20,21)} (shape: {torch.ones(20,21).shape})\")\n  if not np.array_equal( B.numpy(),np.vander([1,2,3], 4)):\n    errors.append(\"B is not a tensor containing the elements of Z \")\n  if C.shape != (20,21):\n    errors.append(\"C is not the correct shape \")\n  if not torch.equal(D,torch.arange(4,41,step=2)):\n    errors.append(\"D does not contain the correct elements\")\n\n  if errors == []:\n    print(\"All correct!\")\n\n  else:\n    [print(e) for e in errors]\n\n\ndef timeFun(f, dim, iterations, device):\n  iterations = iterations\n  t_total = 0\n  for _ in range(iterations):\n    start = time.time()\n    f(dim, device)\n    end = time.time()\n    t_total += end - start\n  print(f\"time taken for {iterations} iterations of {f.__name__}({dim}): {t_total:.5f}\")","de9e3528":"# @title Video 1: Welcome and History\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1Av411n7oL\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"ca21SNqt78I\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","067cf4ef":"# @title Video 2: Why DL is cool\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1gf4y1j7UZ\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"l-K6495BN-4\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","8b17e292":"# @title Video 3: Making Tensors\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1Rw411d7Uy\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"jGKd_4tPGrw\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","dbe32499":"# we can construct a tensor directly from some common python iterables,\n# such as list and tuple nested iterables can also be handled as long as the\n# dimensions make sense\n\n# tensor from a list\na = torch.tensor([0, 1, 2])\n\n#tensor from a tuple of tuples\nb = ((1.0, 1.1), (1.2, 1.3))\nb = torch.tensor(b)\n\n# tensor from a numpy array\nc = np.ones([2, 3])\nc = torch.tensor(c)\n\nprint(\"Tensor a:\", a)\nprint(\"Tensor b:\", b)\nprint(\"Tensor c:\", c)","ce1660e9":"# the numerical arguments we pass to these constructors\n# determine the shape of the output tensor\n\nx = torch.ones(5, 3)\ny = torch.zeros(2)\nz = torch.empty(1, 1, 5)\nprint(\"Tensor x:\", x)\nprint(\"Tensor y:\", y)\nprint(\"Tensor z:\", z)","a52346c5":"# there are also constructors for random numbers\n\n# uniform distribution\na = torch.rand(1, 3)\n\n# normal distribution\nb = torch.randn(3, 4)\n\n# there are also constructors that allow us to construct\n# a tensor according to the above constructors, but with\n# dimensions equal to another tensor\n\nc = torch.zeros_like(a)\nd = torch.rand_like(c)\n\nprint(\"Tensor a: \", a)\nprint(\"Tensor b: \", b)\nprint(\"Tensor c: \", c)\nprint(\"Tensor d: \", d)","949ec4d0":"def set_seed(seed=None, seed_torch=True):\n  \"\"\"\n  Function that controls randomness. NumPy and random modules must be imported.\n\n  Args:\n    seed : Integer\n      A non-negative integer that defines the random state. Default is `None`.\n    seed_torch : Boolean\n      If `True` sets the random seed for pytorch tensors, so pytorch module\n      must be imported. Default is `True`.\n\n  Returns:\n    Nothing.\n  \"\"\"\n  if seed is None:\n    seed = np.random.choice(2 ** 32)\n  random.seed(seed)\n  np.random.seed(seed)\n  if seed_torch:\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.benchmark = False\n    torch.backends.cudnn.deterministic = True\n\n  print(f'Random seed {seed} has been set.')","ee3dfa0a":"def simplefun(seed=True, my_seed=None):\n  if seed:\n    set_seed(seed=my_seed)\n\n  # uniform distribution\n  a = torch.rand(1, 3)\n  # normal distribution\n  b = torch.randn(3, 4)\n\n  print(\"Tensor a: \", a)\n  print(\"Tensor b: \", b)","b7a0f1f0":"simplefun(seed=True, my_seed=0)  # Turn `seed` to `False` or change `my_seed`","597e6b58":"a = torch.arange(0, 10, step=1)\nb = np.arange(0, 10, step=1)\n\nc = torch.linspace(0, 5, steps=11)\nd = np.linspace(0, 5, num=11)\n\nprint(f\"Tensor a: {a}\\n\")\nprint(f\"Numpy array b: {b}\\n\")\nprint(f\"Tensor c: {c}\\n\")\nprint(f\"Numpy array d: {d}\\n\")","bd35dae1":"def tensor_creation(Z):\n  \"\"\"A function that creates various tensors.\n\n  Args:\n    Z (numpy.ndarray): An array of shape\n\n  Returns:\n    A : 20 by 21 tensor consisting of ones\n    B : a tensor with elements equal to the elements of numpy array  Z\n    C : a tensor with the same number of elements as A but with values \u223cU(0,1)\n    D : a 1D tensor containing the even numbers between 4 and 40 inclusive.\n  \"\"\"\n  #################################################\n  ## TODO for students: fill in the missing code\n  ## from the first expression\n  ## raise NotImplementedError(\"Student exercise: say what they should have done\")\n  #################################################\n  A = torch.ones(20,21)\n  B = torch.from_numpy(Z)\n  C = torch.rand_like(input=A)\n  D = torch.arange(4,41,2)\n\n  return A, B, C, D\n\n\n# numpy array to copy later\nZ = np.vander([1, 2, 3], 4)\n\n# Uncomment below to check your function!\nA, B, C, D = tensor_creation(Z)\ncheckExercise1(A, B, C, D)","930b5709":"# @title Video 4: Tensor Operators\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1G44y127As\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"R1R8VoYXBVA\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","55e42ca4":"a = torch.ones(5, 3)\nb = torch.rand(5, 3)\nc = torch.empty(5, 3)\nd = torch.empty(5, 3)\n\n# this only works if c and d already exist\ntorch.add(a, b, out=c)\n#Pointwise Multiplication of a and b\ntorch.multiply(a, b, out=d)\nprint(c)\nprint(d)","e50fe622":"x = torch.tensor([1, 2, 4, 8])\ny = torch.tensor([1, 2, 3, 4])\nx + y, x - y, x * y, x \/ y, x**y  # The ** operator is exponentiation","9e90e79d":"x = torch.rand(3, 3)\nprint(x)\nprint(\"\\n\")\n# sum() - note the axis is the axis you move across when summing\nprint(f\"Sum of every element of x: {x.sum()}\")\nprint(f\"Sum of the columns of x: {x.sum(axis=0)}\")\nprint(f\"Sum of the rows of x: {x.sum(axis=1)}\")\nprint(\"\\n\")\n\nprint(f\"Mean value of all elements of x {x.mean()}\")\nprint(f\"Mean values of the columns of x {x.mean(axis=0)}\")\nprint(f\"Mean values of the rows of x {x.mean(axis=1)}\")","4c43ab39":"a1 = torch.tensor([[2, 4], [5, 7]])\na2 = torch.tensor([[1, 1], [2, 3]])\na1 @ a2 # matrix multiplication","d40707dc":"torch.matmul(a1,a2)","2d0fdc4b":"def simple_operations(a1: torch.Tensor, a2: torch.Tensor, a3: torch.Tensor):\n  ################################################\n  ## TODO for students:  complete the first computation using the argument matricies\n  ## raise NotImplementedError(\"Student exercise: fill in the missing code to complete the operation\")\n  ################################################\n  # multiplication of tensor a1 with tensor a2 and then add it with tensor a3\n  answer = torch.matmul(a1,a2) + a3\n  return answer\n\n\n# Computing expression 1:\n\n# init our tensors\na1 = torch.tensor([[2, 4], [5, 7]])\na2 = torch.tensor([[1, 1], [2, 3]])\na3 = torch.tensor([[10, 10], [12, 1]])\n## uncomment to test your function\nA = simple_operations(a1, a2, a3)\nprint(A)","afeed735":"def dot_product(b1: torch.Tensor, b2: torch.Tensor):\n  ###############################################\n  ## TODO for students:  complete the first computation using the argument matricies\n  ## raise NotImplementedError(\"Student exercise: fill in the missing code to complete the operation\")\n  ###############################################\n  # Use torch.dot() to compute the dot product of two tensors\n  product = torch.dot(b1,b2)\n  return product\n\n\n# Computing expression 2:\nb1 = torch.tensor([3, 5, 7])\nb2 = torch.tensor([2, 4, 8])\n## Uncomment to test your function\nb = dot_product(b1, b2)\nprint(b)","9f8247bf":"# @title Video 5: Tensor Indexing\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1BM4y1K7pD\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"0d0KSJ3lJbg\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","a008bc80":"x = torch.arange(0, 10)\nprint(x)\nprint(x[-1])\nprint(x[1:3])\nprint(x[:-2])","24b7921f":"# make a 5D tensor\nx = torch.rand(1, 2, 3, 4, 5)\n\nprint(f\" shape of x[0]:{x[0].shape}\")\nprint(f\" shape of x[0][0]:{x[0][0].shape}\")\nprint(f\" shape of x[0][0][0]:{x[0][0][0].shape}\")","34562da1":"z = torch.arange(12).reshape(6, 2)\nprint(f\"Original z: \\n {z}\")\n\n# 2D -> 1D\nz = z.flatten()\nprint(f\"Flattened z: \\n {z}\")\n\n# and back to 2D\nz = z.reshape(3, 4)\nprint(f\"Reshaped (3x4) z: \\n {z}\")","ee64439b":"torch.rand(2,2)","e86c3cf8":"x = torch.randn( 1, 10)\n# printing the zeroth element of the tensor will not give us the first number!\n#print(x)\nprint(x.shape)\nprint(f\"x[0]: {x[0]}\")","cc0d947b":"# lets get rid of that singleton dimension and see what happens now\nx = x.squeeze(0)\nprint(x.shape)\nprint(f\"x[0]: {x[0]}\")","ed089719":"# adding singleton dimensions works a similar way, and is often used when tensors\n# being added need same number of dimensions\n\ny = torch.randn(5, 5)\nprint(f\"shape of y: {y.shape}\")\n\n# lets insert a singleton dimension\ny = y.unsqueeze(1)\nprint(f\"shape of y: {y.shape}\")","6fc104cd":"y","790cd456":"# `x` has dimensions [color,image_height,image_width]\nx = torch.rand(3, 48, 64)\n\n# we want to permute our tensor to be [ image_height , image_width , color ]\nx = x.permute(1, 2, 0)\n# permute(1,2,0) means:\n# the 0th dim of my new tensor = the 1st dim of my old tensor\n# the 1st dim of my new tensor = the 2nd\n# the 2nd dim of my new tensor = the 0th\nprint(x.shape)","4a7ab7bb":"# Create two tensors of the same shape\nx = torch.arange(12, dtype=torch.float32).reshape((3, 4))\ny = torch.tensor([[2.0, 1, 4, 3], [1, 2, 3, 4], [4, 3, 2, 1]])\n\n\n#concatenate them along rows\ncat_rows = torch.cat((x, y), dim=0)\n\n# concatenate along columns\ncat_cols = torch.cat((x, y), dim=1)\n\n# printing outputs\nprint('Concatenated by rows: shape{} \\n {}'.format(list(cat_rows.shape), cat_rows))\nprint('\\n Concatenated by colums: shape{}  \\n {}'.format(list(cat_cols.shape), cat_cols))","51d12626":"x = torch.randn(5)\nprint(f\"x: {x}  |  x type:  {x.type()}\")\n\ny = x.numpy()\nprint(f\"y: {y}  |  y type:  {type(y)}\")\n\nz = torch.tensor(y)\nprint(f\"z: {z}  |  z type:  {z.type()}\")","436c05e4":"a = torch.tensor([3.5])\na, a.item(), float(a), int(a)","56013749":"def functionA(A, B):\n    \"\"\"\n    This function takes in two 2D tensors A and B and returns the column sum of\n    A multiplied by the sum of all the elmements of B, i.e., a scalar.\n\n    Args:\n        A: torch.Tensor\n        B: torch.Tensor\n    Retuns:\n    output: torch.Tensor\n    The multiplication of the column sum of `A` by the sum of `B`.\n    \"\"\"\n    ################################################\n    ## TODO for students: complete functionA\n    ## raise NotImplementedError(\"Student exercise: complete function A\")\n    ################################################\n    # TODO multiplication the sum of the tensors\n    output = torch.sum(A, axis=1) * torch.sum(B)\n\n    return output\n\n\ndef functionB(C):\n  \"\"\"\n  This function takes in a square matrix C and returns a 2D tensor consisting of\n  a flattened C with the index of each element appended to this tensor in the\n  row dimension.\n\n  Args:\n    C: torch.Tensor\n  Retuns:\n    output: torch.Tensor\n      Concatenated tensor.\n  \"\"\"\n  ################################################\n  ## TODO for students: complete functionB\n  ## raise NotImplementedError(\"Student exercise: complete function B\")\n  ################################################\n  # TODO flatten the tensor  C\n  C = C.flatten()\n  # TODO create the idx tensor to be concatenated to C\n  idx_tensor = torch.arange(0, len(C))\n  # TODO concatenate the two tensors\n  output = torch.cat((idx_tensor.unsqueeze(1), C.unsqueeze(1) ),  axis=1)\n\n  return output\n\n\ndef functionC(D, E):\n  \"\"\"\n  This function takes in two 2D tensors D and E . If the dimensions allow it,\n  this function returns the elementwise sum of D-shaped E, and D;\n  else this function returns a 1D tensor that is the concatenation of the\n  two tensors.\n\n  Args:\n    D: torch.Tensor\n    E: torch.Tensor\n  Retuns:\n    output: torch.Tensor\n      Concatenated tensor.\n  \"\"\"\n  ################################################\n  ## TODO for students: complete functionB\n  ##raise NotImplementedError(\"Student exercise: complete function C\")\n  ################################################\n  # TODO check we can reshape E into the shape of D\n  if torch.numel(D) == torch.numel(E):\n    # TODO reshape E into the shape of D\n    E = E.reshape(D.shape)\n    # TODO sum the two tensors\n    output = torch.add(D,E)\n  else:\n    # TODO flatten both tensors\n    D = D.flatten()\n    E = E.flatten()\n    # TODO concatenate the two tensors in the correct dimension\n    output = torch.cat((D,E), axis = 0)\n\n  return output\n\n\n## Implement the functions above and then uncomment the following lines to test your code\nprint(functionA(torch.tensor([[1, 1], [1, 1]]), torch.tensor([[1, 2, 3], [1, 2, 3]])))\nprint(functionB(torch.tensor([[2, 3], [-1, 10]])))\nprint(functionC(torch.tensor([[1, -1], [-1, 3]]), torch.tensor([[2, 3, 0, 2]])))\nprint(functionC(torch.tensor([[1, -1], [-1, 3]]), torch.tensor([[2, 3, 0]])))","57c861cf":"# @title Video 6: GPU vs CPU\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1nM4y1K7qx\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"9Mc9GFUtILY\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","b21d7fc8":"x = torch.randn(10)\nprint(x.device)","afb584a3":"print(torch.cuda.is_available())","e88e2d88":"def set_device():\n  device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n  if device != \"cuda\":\n    print(\"WARNING: For this notebook to perform best, \"\n          \"if possible, in the menu under `Runtime` -> \"\n          \"`Change runtime type.`  select `GPU` \")\n  else:\n    print(\"GPU is enabled in this notebook.\")\n\n  return device","d2bc1d11":"# common device agnostic way of writing code that can run on cpu OR gpu\n# that we provide for you in each of the tutorials\nDEVICE = set_device()\n\n# we can specify a device when we first create our tensor\nx = torch.randn(2, 2, device=DEVICE)\nprint(x.dtype)\nprint(x.device)\n\n# we can also use the .to() method to change the device a tensor lives on\ny = torch.randn(2, 2)\nprint(f\"y before calling to() |  device: {y.device} | dtype: {y.type()}\")\n\ny = y.to(DEVICE)\nprint(f\"y after calling to() |  device: {y.device} | dtype: {y.type()}\")","dbefa4ec":"x = torch.tensor([0, 1, 2], device=DEVICE)\ny = torch.tensor([3, 4, 5], device=\"cuda\")\n\n# Uncomment the following line and run this cell\nz = x + y\nz","1493fa57":"x = torch.tensor([0, 1, 2], device=DEVICE)\ny = torch.tensor([3, 4, 5], device=\"cpu\")\nz = torch.tensor([6, 7, 8], device=DEVICE)\n\n# moving to cpu\nx = x.to(\"cpu\")  # alternatively, you can use x = x.cpu()\nprint(x + y)\n\n# moving to gpu\ny = y.to(DEVICE)  # alternatively, you can use y = y.cuda()\nprint(y + z)","cb3b6e75":"DEVICE","5ea3fba3":"dim = 10000\niterations = 1","ed6a7f9b":"def simpleFun(dim, device='cpu'):\n  \"\"\"\n  Args:\n    dim: integer\n  Returns:\n    Nothing.\n  \"\"\"\n  x = torch.rand(dim, dim)\n  y = torch.rand_like(x)\n  z = 2*torch.ones(dim, dim)\n\n  x = x * y\n  x = x @ z\n\n  # garbage collection\n\n  del x\n  del y\n  del z","47bf5274":"DEVICE","1707d60c":"def simpleFunGPU(dim, device):\n  \"\"\"\n  Args:\n    dim: integer\n    device: \"cpu\" or \"cuda\"\n  Returns:\n    Nothing.\n  \"\"\"\n  ###############################################\n  ## TODO for students: recreate the above function, but\n  ## ensure all computation happens  on the GPU\n  ## raise NotImplementedError(\"Student exercise: fill in the missing code to create the tensors\")\n  x = torch.rand((dim, dim), device = device)\n  y = torch.rand_like(x, device = device)\n  z = 2 * torch.ones((dim, dim), device= device)\n\n  x = x * y\n  y = x @ y # dot product\n\n  del x\n  del y\n  del z\n\n\n## TODO: Implement the function above and uncomment the following lines to test your code\ntimeFun(simpleFun, dim=dim, iterations=iterations, device=DEVICE)\ntimeFun(simpleFunGPU, dim=dim, iterations=iterations, device='cuda')","f1905a42":"# to remove solution\ndef simpleFunGPU(dim, device):\n  \"\"\"\n  Args:\n    dim: integer\n    device: \"cpu\" or \"cuda\"\n  Returns:\n    Nothing.\n  \"\"\"\n  x = torch.rand(dim,dim).to(device)\n  y = torch.rand_like(x).to(device)\n  z = 2*torch.ones(dim,dim).to(device)\n\n  x = x * y\n  x = x @ z\n\n\n  del x\n  del y\n  del z\n\n\n## TODO: Implement the function above and uncomment the following lines to test your code\ntimeFun(f=simpleFun, dim=dim, iterations=iterations, device=DEVICE)\ntimeFun(f=simpleFunGPU, dim=dim, iterations=iterations, device=DEVICE)","18d302b9":"# @title Video 7: Getting Data\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1744y127SQ\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"LSkjPM1gFu0\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","a5ee11bf":"# Import dataset and dataloaders related packages\nfrom torchvision import datasets\nfrom torchvision.transforms import ToTensor\nfrom torch.utils.data import DataLoader\nfrom torchvision.transforms import Compose, Grayscale","38ee8517":"# Download and load the images from the CIFAR10 dataset\ncifar10_data = datasets.CIFAR10(\n    root=\"data\",            # path where the images will be stored\n    download=True,          # all images should be downloaded\n    transform=ToTensor()    # transform the images to tensors\n    )\n\n# Print the number of samples in the loaded dataset\nprint(f\"Number of samples:{len(cifar10_data)}\")\nprint(f\"Class names:{cifar10_data.classes}\")","e6e13c65":"# Choose a random sample\nrandom.seed(2021)\nimage, label = cifar10_data[random.randint(0, len(cifar10_data))]\nprint('Label:', cifar10_data.classes[label])\nprint('Image size:', image.shape)","e2fc1e96":"image.shape","b2d1fe1b":"# TODO: Uncomment the following line to see the error that arises from the current image format\n#plt.imshow(image)\n\n# TODO: Comment the above line and fix this code by reordering the tensor dimensions\nplt.imshow(image.permute(1,2,0));","b9635e7f":"#@title Video 8: Train and Test\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1rV411H7s5\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"JokSIuPs-ys\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","040c3a16":"# Load the training samples\ntraining_data = datasets.CIFAR10(\n    root=\"data\",\n    train=True,\n    download=True,\n    transform=ToTensor()\n    )\n\n# Load the test samples\ntest_data = datasets.CIFAR10(\n    root=\"data\",\n    train=False,\n    download=True,\n    transform=ToTensor()\n    )","1b9e71b3":"# @title Video 9: Data Augmentation - Transformations\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV19B4y1N77t\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"sjegA9OBUPw\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","53fc780d":"# Create dataloaders with\ntrain_dataloader = DataLoader(training_data, batch_size=64, shuffle=True)\ntest_dataloader = DataLoader(test_data, batch_size=64, shuffle=True)","4df097c9":"# Load the next batch\nbatch_images, batch_labels = next(iter(train_dataloader))\nprint('Batch size:', batch_images.shape)\n\n# Display the first image from the batch\nplt.imshow(batch_images[0].permute(1, 2, 0))","7a1a14b6":"def my_data_load():\n  ###############################################\n  ## TODO for students: recreate the above function, but\n  ## ensure all computation happens  on the GPU\n  ## raise NotImplementedError(\"Student exercise: fill in the missing code to load the data\")\n  ###############################################\n  ## TODO Load the CIFAR10 data using a transform that converts the images to grayscale tensors\n  data = datasets.CIFAR10(root='data', download = True,\n                          transform = Compose([ToTensor(), Grayscale()]))\n  # Display a random grayscale image\n  image, label = data[random.randint(0, len(data))]\n  plt.imshow(image.squeeze(), cmap=\"gray\")\n\n\nset_seed(seed=2021)\n## After implementing the above code, uncomment the following lines to test your code\nmy_data_load()","c83f2c0b":"weights_named = torch.tensor([0.2,0.8123, 0.123], names = ['channels'])","e858e496":"# @title Video 10: CSV Files\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1xy4y1T7kv\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"JrC_UAJWYKU\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","f467cfbe":"# @title Generate sample data\n# @markdown we used `scikit-learn` module\nfrom sklearn.datasets import make_moons\n\n# Create a dataset of 256 points with a little noise\nX, y = make_moons(256, noise=0.1)\n\n# Store the data as a Pandas data frame and save it to a CSV file\ndf = pd.DataFrame(dict(x0=X[:,0], x1=X[:,1], y=y))\ndf.to_csv('sample_data.csv')\ndf.head()","265b3790":"# Load the data from the CSV file in a Pandas DataFrame\ndata = pd.read_csv(\"sample_data.csv\")\n\n# Create a 2D numpy array from the x0 and x1 columns\nX_orig = data[[\"x0\", \"x1\"]].to_numpy()\n\n# Create a 1D numpy array from the y column\ny_orig = data[\"y\"].to_numpy()\n\n# Print the sizes of the generated 2D points X and the corresponding labels Y\nprint(f\"Size X:{X_orig.shape}\")\nprint(f\"Size y:{y_orig.shape}\")\n\n# Visualize the dataset. The color of the points is determined by the labels `y_orig`.\nplt.scatter(X_orig[:, 0], X_orig[:, 1], s=40, c=y_orig)\nplt.xlabel(\"x0\"), plt.ylabel('x1')","9e193857":"# Initialize the device variable\nDEVICE = set_device() # set to cuda\n\n# Convert the 2D points to a float32 tensor\nX = torch.tensor(X_orig, dtype=torch.float32)\n\n# Upload the tensor to the device\nX = X.to(DEVICE)\n\nprint(f\"Size X:{X.shape}\")\n\n# Convert the labels to a long interger tensor\ny = torch.from_numpy(y_orig).type(torch.LongTensor)\n# Upload the tensor to the device\ny = y.to(DEVICE)\n\nprint(f\"Size y:{y.shape}\")","cbea08f7":"# @title Video 11: Generating the Neural Network\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1fK4y1M74a\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"PwSzRohUvck\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","cfab7a09":"# Inherit from nn.Module - the base class for neural network modules provided by Pytorch\nclass NaiveNet(nn.Module):\n\n  # Define the structure of your network\n  def __init__(self):\n    super(NaiveNet, self).__init__()\n\n    # The network is defined as a sequence of operations\n    self.layers = nn.Sequential(\n        nn.Linear(2, 16),  # Transformation from the input to the hidden layer\n        nn.ReLU(),         # Activation function (ReLU) is a non-linearity which is widely used because it reduces computation. The function returns 0 if it receives any\n                           # negative input, but for any positive value x, it returns that value back.\n        nn.Linear(16,8), # add another hiddern layer\n        nn.Linear(8, 2),  # Transformation from the hidden to the output layer\n    )\n\n  # Specify the computations performed on the data\n  def forward(self, x):\n    # Pass the data through the layers\n    return self.layers(x)\n\n  # Choose the most likely label predicted by the network\n  def predict(self, x):\n    # Pass the data through the networks\n    output = self.forward(x)\n\n    # Choose the label with the highest score\n    return torch.argmax(output, 1)\n\n  # Train the neural network (will be implemented later)\n  def train(self, X, y):\n    pass","783eec9b":"# Create new NaiveNet and transfer it to the device\nmymodel = NaiveNet().to(DEVICE)\n\n# Print the structure of the network\nprint(mymodel)","1361a82c":"X.shape","37b91b6a":"torch.choose?","3f9a7ed2":"## Get the samples\nX_samples = X[:5]\nprint(\"Sample input:\", X_samples)\n\n## Do a forward pass of the network\noutput = mymodel.forward(X_samples)\nprint(\"Network output:\", output)\n\n## Predict the label of each point\ny_predicted = mymodel.predict(X_samples)\nprint(\"Predicted labels:\", y_predicted)","ce4be591":"# @title Video 12: Train the Network\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1v54y1n7CS\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"4MIqnE4XPaA\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","4c93bc76":"# @title Helper function to plot the decision boundary\n\n# Code adapted from this notebook: https:\/\/jonchar.net\/notebooks\/Artificial-Neural-Network-with-Keras\/\n\nfrom pathlib import Path\n\ndef plot_decision_boundary(model, X, y, device):\n  # Transfer the data to the CPU\n  X = X.cpu().numpy()\n  y = y.cpu().numpy()\n\n  # Check if the frames folder exists and create it if needed\n  frames_path = Path(\"frames\")\n  if not frames_path.exists():\n    frames_path.mkdir()\n\n  # Set min and max values and give it some padding\n  x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5\n  y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5\n  h = 0.01\n\n  # Generate a grid of points with distance h between them\n  xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\n\n  # Predict the function value for the whole gid\n  grid_points = np.c_[xx.ravel(), yy.ravel()]\n  grid_points = torch.from_numpy(grid_points).type(torch.FloatTensor)\n  Z = model.predict(grid_points.to(device)).cpu().numpy()\n  Z = Z.reshape(xx.shape)\n\n  # Plot the contour and training examples\n  plt.contourf(xx, yy, Z, cmap=plt.cm.Spectral)\n  plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.binary)","9e44c570":"# Implement the train function given a training dataset X and correcsponding labels y\ndef train(model, X, y):\n  # The Cross Entropy Loss is suitable for classification problems\n  loss_function = nn.CrossEntropyLoss()\n\n  # Create an optimizer (Stochastic Gradient Descent) that will be used to train the network\n  learning_rate = 1e-2\n  optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)\n\n  # Number of epochs\n  epochs = 15000\n\n  # List of losses for visualization\n  losses = []\n\n  for i in range(epochs):\n    # Pass the data through the network and compute the loss\n    # We'll use the whole dataset during the training instead of using batches\n    # in to order to keep the code simple for now.\n    y_logits = model.forward(X)\n    loss = loss_function(y_logits, y)\n\n    # Clear the previous gradients and compute the new ones\n    optimizer.zero_grad()\n    loss.backward()\n\n    # Adapt the weights of the network\n    optimizer.step()\n\n    # Store the loss\n    losses.append(loss.item())\n\n    # Print the results at every 1000th epoch\n    if i % 1000 == 0:\n      print(f\"Epoch {i} loss is {loss.item()}\")\n\n      plot_decision_boundary(model, X, y, DEVICE)\n      plt.savefig('frames\/{:05d}.png'.format(i))\n\n  return losses\n\n\n# Create a new network instance a train it\nmodel = NaiveNet().to(DEVICE)\nlosses = train(model, X, y)","61916d98":"plt.plot(np.linspace(1, len(losses), len(losses)), losses)\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")","829affac":"# @title Visualize the training process\n# @markdown ### Execute this cell!\n!pip install imageio --quiet\n!pip install pathlib --quiet\n\nimport imageio\nfrom IPython.core.interactiveshell import InteractiveShell\nfrom IPython.display import Image, display\nfrom pathlib import Path\n\nInteractiveShell.ast_node_interactivity = \"all\"\n\n# Make a list with all images\nimages = []\nfor i in range(10):\n  filename = \"frames\/0\"+str(i)+\"000.png\"\n  images.append(imageio.imread(filename))\n# Save the gif\nimageio.mimsave('frames\/movie.gif', images)\ngifPath = Path(\"frames\/movie.gif\")\nwith open(gifPath,'rb') as f:\n  display(Image(data=f.read(), format='png'))","5eec2981":"# @title Video 13: Play with it\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1Cq4y1W7BH\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"_GGkapdOdSY\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","0613842c":"# @title Video 14: XOR Widget\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1mB4y1N7QS\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"oTr1nE2rCWg\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","4de77faf":"# @markdown ###Play with the parameters to solve XOR\nfrom IPython.display import HTML\nHTML('<iframe width=\"1020\" height=\"660\" src=\"https:\/\/playground.arashash.com\/#activation=relu&batchSize=10&dataset=xor&regDataset=reg-plane&learningRate=0.03&regularizationRate=0&noise=0&networkShape=&seed=0.91390&showTestData=false&discretize=false&percTrainData=90&x=true&y=true&xTimesY=false&xSquared=false&ySquared=false&cosX=false&sinX=false&cosY=false&sinY=false&collectStats=false&problem=classification&initZero=false&hideText=false\" allowfullscreen><\/iframe>')","769abb49":"# @markdown Do you think we can solve the discrete XOR (only 4 possibilities) with only 2 hidden units?\nw1_min_xor = 'Select' #@param ['Select', 'Yes', 'No']\nif w1_min_xor == 'No':\n  print(\"Correct!\")\nelse:\n  print(\"How about giving it another try?\")","2127af32":"# @title Video 15: Ethics\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1Hw41197oB\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"Kt6JLi3rUFU\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","acc7b9a5":"# @title Video 16: Be a group\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1j44y1272h\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"Sfp6--d_H1A\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","f813a3c2":"# @title Video 17: It's a wrap!\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1e44y127ti\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"JwTn7ej2dq8\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","03505764":"# @title Video 18: Syllabus\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1iB4y1N7uQ\", width=730, height=410, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"cDvAqG_hAvQ\", width=730, height=410, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\ndisplay(out)","b6b5301e":"**Training and Test Datasets**\n\nWhen loading a dataset, you can specify if you want to load the training or the test samples using the `train` argument. We can load the training and test datasets separately. For simplicity, today we will not use both datasets separately, but this topic will be adressed in the next days.","6e5b4f52":"```\ntensor(82)\n```","056afa09":"---\n# Section 2: The Basics of PyTorch","adf8c106":"The cell below should return True.","24c489f2":"###  Video 4: Tensor Operators\n","980a74b0":"### Coding Exercise 2.2 : Simple tensor operations\n\nBelow are two expressions involving operations on matrices. \n\n$$ \\textbf{A} = \n\\begin{bmatrix}2 &4 \\\\5 & 7 \n\\end{bmatrix} \n\\begin{bmatrix} 1 &1 \\\\2 & 3\n\\end{bmatrix} \n + \n\\begin{bmatrix}10 & 10  \\\\ 12 & 1 \n\\end{bmatrix} \n$$\n\n\nand\n\n\n$$ b = \n\\begin{bmatrix} 3 \\\\ 5 \\\\ 7\n\\end{bmatrix} \\cdot \n\\begin{bmatrix} 2 \\\\ 4 \\\\ 8\n\\end{bmatrix}\n$$\n\nThe code block below that computes these expressions using PyTorch is incomplete - fill in the missing lines.\n\n","53399b31":" Do you think we can solve the discrete XOR (only 4 possibilities) with only 2 hidden units?\n","9afd49fc":"##  Video 15: Ethics\n","58a90740":"Now, let's use the `set_seed` function in the previous example. Execute the celll multiple times to verify that the numbers printed are always the same.","75f4872a":"---\n# Setup","64579fb5":"**Indexing**\n\nJust as in numpy, elements in a tensor can be accessed by index. As in any numpy array, the first element has index 0 and ranges are specified to include the first but before the last element. We can access elements according to their relative position to the end of the list by using negative indices. Indexing is also referred to as slicing.\n\nFor example, [-1] selects the last element; [1:3] selects the second and the third elements, and [:-2] will select all elements excluding the last and second-to-last elements.","a3c59ed1":"You may also see ```.transpose()``` used. This works in a similar way as permute, but can only swap two dimensions at once.","56d7a3d3":"####  Video 14: XOR Widget\n","6231b316":"**Some common tensor constructors:**\n\n---","a7de4129":"[*Click for solution*](https:\/\/github.com\/NeuromatchAcademy\/course-content-dl\/tree\/main\/\/tutorials\/W1D1_BasicsAndPytorch\/solutions\/W1D1_Tutorial1_Solution_524e1dab.py)\n\n","3951222c":"Throughout your Neuromatch tutorials, most (probably all!) notebooks contain setup cells. These cells will import the required Python packages (e.g., PyTorch, NumPy); set global or environment variables, and load in helper functions for things like plotting.\n\nBe sure to run all of the cells in the setup section. Feel free to expand them and have a look at what you are loading in, but you should be able to fulfill the learning objectives of every tutorial without having to look at these cells.\n\nIf you start building your own projects built on this code base we highly recommend looking at them in more detail.","9a6d610b":"### Coding Exercise 2.3: Manipulating Tensors\nUsing a combination of the methods discussed above, complete the functions below.","0e9f65f9":"---\n# Section 4: Ethics\n\nLet us watch the coded bias movie together and discuss","77fc8df8":"Now we can load the data from the CSV file using the Pandas library. Pandas provides many functions for reading files in varios formats. When loading data from a CSV file, we can reference the columns directly by their names.","3bd5b9c6":"[*Click for solution*](https:\/\/github.com\/NeuromatchAcademy\/course-content-dl\/tree\/main\/\/tutorials\/W1D1_BasicsAndPytorch\/solutions\/W1D1_Tutorial1_Solution_69b74721.py)\n\n*Example output:*\n\n<img alt='Solution hint' align='left' width=835.0 height=827.0 src=https:\/\/raw.githubusercontent.com\/NeuromatchAcademy\/course-content-dl\/main\/tutorials\/W1D1_BasicsAndPytorch\/static\/W1D1_Tutorial1_Solution_69b74721_1.png>\n\n","b7e55e32":"## Section 2.4: GPUs \n","a22b8645":"### Exercise 3.3: Tweak your Network\n\nYou can now play around with the network a little bit to get a feeling of what different parameters are doing. Here are some ideas what you could try:\n- Increase or decrease the number of epochs for training\n- Increase or decrease the size of the hidden layer\n- Add one additional hidden layer\n\nCan you get the network to better fit the data?","88256a4b":"## Section 3.1: Data Loading\n\nFirst we need some sample data to train our network on. You can use the function below to generate an example dataset consisting of 2D points along two interleaving half circles. The data will be stored in a file called `sample_data.csv`. You can inspect the file directly in Colab by going to Files on the left side and opening the CSV file.","99d8bafc":"###  Video 6: GPU vs CPU\n","9c5de47b":"### Coding Exercise 2.5: Display an image from the dataset\n\nLet's try to display the image using `matplotlib`. The code below will not work, because `imshow` expects to have the image in a different format - $H \\times W \\times C$.\n\nYou need to reorder the dimensions of the tensor using the `permute` method of the tensor. PyTorch `torch.permute(*dims)` rearranges the original tensor according to the desired ordering and returns a new multidimensional rotated tensor. The size of the returned tensor remains the same as that of the original.\n\n**Code hint:**\n\n```python\n# create a tensor of size 2 x 4\ninput_var = torch.randn(2, 4)\n# print its size and the tensor\nprint(input_var.size())\nprint(input_var)\n\n# dimensions permuted\ninput_var = input_var.permute(1, 0)\n# print its size and the permuted tensor\nprint(input_var.size())\nprint(input_var)\n```","537c6b4d":"###  Video 13: Play with it\n","4f8cbfd8":"##  Tutorial slides\n","0439cf9d":"##  Video 2: Why DL is cool\n","b5600b7a":"```\ntensor([[20, 24],\n        [31, 27]])\n```","6700cc7a":"**Permutation**\nSometimes our dimensions will be in the wrong order! For example, we may be dealing with RGB images with dim [3x48x64], but our pipeline expects the colour dimension to be the last dimension i.e. [48x64x3]. To get around this we can use ```.permute()```\n","f62c047f":"####  Video 9: Data Augmentation - Transformations\n","eaf027ef":"There are various ways of creating tensors, and when doing any real deep learning project we will usually have to do so.","98c97cbf":"You will also see the ```.view()``` methods used a lot to reshape tensors. There is a subtle difference between ```.view()``` and ```.reshape()```, though for now we will just use ```.reshape()```. The documentation can be found in the appendix.","ddf0cb1c":"###  Video 3: Making Tensors\n","99d5b4bc":"# Tutorial 1: PyTorch\n**Week 1, Day 1: Basics and PyTorch**\n\n**By Neuromatch Academy**\n\n\n__Content creators:__ Shubh Pachchigar, Vladimir Haltakov, Matthew Sargent, Konrad Kording\n\n__Content reviewers:__ Kelson Shilling-Scrivo, Deepak Raya, Siwei Bai\n\n__Content editors:__ Anoop Kulkarni, Spiros Chavlis\n\n__Production editors:__ Arush Tagade, Spiros Chavlis","f4024c28":"To convert a size-1 tensor to a Python scalar, we can invoke the item function or Python\u2019s built-in functions.","24862207":"###  Video 12: Train the Network\n","ad6c42d2":"<a href=\"https:\/\/colab.research.google.com\/github\/NeuromatchAcademy\/course-content-dl\/blob\/main\/tutorials\/W1D1_BasicsAndPytorch\/student\/W1D1_Tutorial1.ipynb\" target=\"_blank\"><img alt=\"Open In Colab\" src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\"\/><\/a>","a9de24e1":"## Section 2.1: Creating Tensors\n","579d0ec5":"Here, we define for you a function called `set_seed` that does the job for you!","476558cb":"**Discuss!**\n\nTry and reduce the dimensions of the tensors and increase the iterations. You can get to a point where the cpu only function is faster than the GPU function. Why might this be?\n","38e73c85":"[*Click for solution*](https:\/\/github.com\/NeuromatchAcademy\/course-content-dl\/tree\/main\/\/tutorials\/W1D1_BasicsAndPytorch\/solutions\/W1D1_Tutorial1_Solution_51c270eb.py)\n\n","f06cbe1b":"**Important note: Scratch Code Cells**\n\nIf you want to quickly try out something or take a look at the data you can use scratch code cells. They allow you to run Python code, but will not mess up the structure of your notebook.\n\nTo open a new scratch cell go to *Insert* \u2192 *Scratch code cell*.","4d9ae96f":"---\n# Section 3:  Neural Networks\n\nNow it's time for you to create your first neural network using PyTorch. This section will walk you through the process of:\n- Creating a simple neural network model\n- Training the network\n- Visualizing the results of the network\n- Tweeking the network\n\n","ea04d6b3":"## Section 2.5: Datasets and Dataloaders\n\n","0ed4db3f":"---\n# Appendix\n\n## Official PyTorch resources:\n### Tutorials\nhttps:\/\/pytorch.org\/tutorials\/\n\n### Documentation\n\n https:\/\/pytorch.org\/docs\/stable\/tensors.html (tensor methods)\n\n https:\/\/pytorch.org\/docs\/stable\/tensors.html#torch.Tensor.view  (The view method in particular)\n\n https:\/\/pytorch.org\/vision\/stable\/datasets.html (pre-loaded image datasets)\n\n ## Google Colab Resources:\n https:\/\/research.google.com\/colaboratory\/faq.html (FAQ including guidance on GPU usage)\n\n ## Books for reference:\n\nhttps:\/\/www.deeplearningbook.org\/ (Deep Learning by Ian Goodfellow, Yoshua Bengio and Aaron Courville)\n\n ","f6915b83":"We can now query the next batch from the data loader and inspect it. For this we need to convert the dataloader object to a Python iterator using the function `iter` and then we can query the next batch using the function `next`.\n\nWe can now see that we have a 4D tensor. This is because we have a 64 images in the batch ($B$) and each image has 3 dimensions: channels ($C$), height ($H$) and width ($W$). So, the size of the 4D tensor is $B \\times C \\times H \\times W$.","298e1c25":" we used `scikit-learn` module\n","87fe93da":"**Tensor Methods**","edcba1b4":"CUDA is an API developed by Nvidia for interfacing with GPUs. PyTorch provides us with a layer of abstraction, and allows us to launch CUDA kernels using pure Python. *NOTE I am assuming that GPU stuff might be covered in more detail on another day but there could be a bit more detail here.*\n\nIn short, we get the power of parallising our tensor computations on GPUs, whilst only writing (relatively) simple Python!\n\nLet's make some CUDA tensors!","da080ad2":"##  Video 16: Be a group\n","3ce043e1":"*Reproducibility*: \n\n- PyTorch random number generator: You can use `torch.manual_seed()` to seed the RNG for all devices (both CPU and CUDA)\n\n```python\nimport torch\ntorch.manual_seed(0)\n```\n- For custom operators, you might need to set python seed as well:\n\n```python\nimport random\nrandom.seed(0)\n```\n\n- Random number generators in other libraries\n\n```python\nimport numpy as np\nnp.random.seed(0)\n```\n","3f009c64":"**Function A** \n\nThis function takes in two 2D tensors $A$ and $B$ and returns the column sum of A multiplied by the sum of all the elmements of $B$ i.e. a scalar, e.g.:\n\n $ A = \\begin{bmatrix}\n1 & 1 \\\\\n1 & 1 \n\\end{bmatrix}$  $ B = \\begin{bmatrix}\n1 & 2 & 3\\\\\n1 & 2 & 3 \n\\end{bmatrix}$\n$ Out =  \\begin{bmatrix} 2 & 2 \\\\\n\\end{bmatrix} \\cdot 12 = \\begin{bmatrix}\n24 & 24\\\\\n\\end{bmatrix}$\n\n**Function B** \n\nThis function takes in a square matrix $C$ and returns a 2D tensor consisting of a flattened $C$ with the index of each element appended to this tensor in the row dimension, e.g.:\n\n $ C = \\begin{bmatrix}\n2 & 3 \\\\\n-1 & 10 \n\\end{bmatrix}$\n $ Out = \\begin{bmatrix}\n0 & 2 \\\\\n1 & 3 \\\\\n2 & -1 \\\\\n3 & 10\n\\end{bmatrix}$\n\n**Hint:** pay close attention to singleton dimensions\n\n**Function C**\n\nThis function takes in two 2D tensors $D$ and $E$. If the dimensions allow it, this function returns the elementwise sum of $D$-shaped $E$, and $D$; else this function returns a 1D tensor that is the concatenation of the two tensors, e.g.:\n\n $ D = \\begin{bmatrix}\n1 & -1 \\\\\n-1 & 3 \n\\end{bmatrix}$\n $ E = \\begin{bmatrix}\n2 & 3 & 0 & 2 \\\\\n\\end{bmatrix}$\n $ Out = \\begin{bmatrix}\n3 & 2 \\\\\n-1 & 5 \n\\end{bmatrix}$\n\n $ D = \\begin{bmatrix}\n1 & -1 \\\\\n-1 & 3 \n\\end{bmatrix}$\n $ E = \\begin{bmatrix}\n2 & 3 & 0  \\\\\n\\end{bmatrix}$\n $ Out = \\begin{bmatrix}\n1 & -1 & -1 & 3  & 2 & 3 & 0  \n\\end{bmatrix}$\n\n**Hint:** ```torch.numel()``` is an easy way of finding the number of elements in a tensor\n","af3519a4":"Meet our lecturers:\n\nWeek 1: the building blocks\n*   [Konrad Kording](https:\/\/kordinglab.com)\n*   [Andrew Saxe](https:\/\/www.saxelab.org\/)\n*   [Surya Ganguli](https:\/\/ganguli-gang.stanford.edu\/)\n*   [Ioannis Mitliagkas](http:\/\/mitliagkas.github.io\/)\n*   [Lyle Ungar](https:\/\/www.cis.upenn.edu\/~ungar\/)\n\nWeek 2: making things work\n* [Alona Fyshe](https:\/\/webdocs.cs.ualberta.ca\/~alona\/)\n* [Alexander Ecker](https:\/\/eckerlab.org\/)\n* [James Evans](https:\/\/sociology.uchicago.edu\/directory\/james-evans)\n* [He He](https:\/\/hhexiy.github.io\/)\n* [Vikash Gilja](https:\/\/tnel.ucsd.edu\/bio) and [Akash Srivastava](https:\/\/akashgit.github.io\/)\n\nWeek 3: more magic\n* [Tim Lillicrap](https:\/\/contrastiveconvergence.net\/~timothylillicrap\/index.php) and [Blake Richards](https:\/\/www.mcgill.ca\/neuro\/blake-richards-phd)\n* [Jane Wang](http:\/\/www.janexwang.com\/) and [Feryal Behbahani](https:\/\/feryal.github.io\/)\n* [Tim Lillicrap](https:\/\/contrastiveconvergence.net\/~timothylillicrap\/index.php) and [Blake Richards](https:\/\/www.mcgill.ca\/neuro\/blake-richards-phd)\n* [Josh Vogelstein](https:\/\/jovo.me\/) and [Vincenzo Lamonaco](https:\/\/www.vincenzolomonaco.com\/)\n\nNow, go to the [visualization of ICLR papers](https:\/\/iclr.cc\/virtual\/2021\/paper_vis.html). Read a few abstracts. Look at the various clusters. Where do you see yourself in this map?\n","a96ae473":"**Now we have a GPU**\n","42246542":"###  Video 5: Tensor Indexing\n","642071c6":"When training neural network models you will be working with large amounts of data. Fortunately, PyTorch offers some great tools that help you organize and manipulate your data samples.\n","5db010ca":"---\n# Tutorial Objectives\n\nThen have a few specific objectives for this tutorial:\n* Learn about PyTorch and tensors\n* Tensor Manipulations\n* Data Loading\n* GPUs and Cuda Tensors\n* Train NaiveNet\n* Get to know your pod\n* Start thinking about the course as a whole","512ac432":"## Section 3.2: Create a Simple Neural Network","4269bcba":"##  Install dependencies\n","0f3f74a8":"##  Helper Functions\n","002096ea":"**Matrix Operations**\n\nThe ```@``` symbol is overridden to represent matrix multiplication. You can also use ```torch.matmul()``` to multiply tensors. For dot multiplication, you can use ```torch.dot()```, or manipulate the axes of your tensors and do matrix multiplication (we will cover that in the next section). \n\nmatmul differs from dot in two important ways.\n\n* Multiplication by scalars is not allowed.\n* Stacks of matrices are broadcast together as if the matrices were elements.\n\nTransposes of 2D tensors are obtained using ```torch.t()``` or ```Tensor.t```. Note the lack of brackets for ```Tensor.t``` - it is an attribute, not a method.","3c706bbe":" Because of that pesky singleton dimension, x[0] gave us the first row instead!\n\n","6266bbe5":"###  Visualize the training process\n","84e69005":"**Squeezing tensors**\n\nWhen processing batches of data, you will quite often be left with singleton dimensions. e.g. [1,10] or [256, 1, 3]. This dimension can quite easilly mess up your matrix operations if you don't plan on it being there...\n\nIn order to compress tensors along their singleton dimensions we can use the ```.squeeze()``` method. We can use the ```.unsqueeze()``` method to do the opposite. \n","3b35d534":"## Section 2.3 Manipulating Tensors in Pytorch\n\n","141c0b1f":"###  Helper function to plot the decision boundary\n","2cb06e29":"When using Colab notebooks by default will not have access to a GPU. In order to start using GPUs we need to request one. We can do this by going to the runtime tab at the top of the page. \n\nBy following Runtime -> Change runtime type and selecting \"GPU\" from the Hardware Accelerator dropdown list, we can start playing with sending tensors to GPUs.\n\nOnce you have done this your runtime will restart and you will need to rerun the first setup cell to reimport PyTorch. Then proceed to the next cell.\n\n(For more information on the GPU usage policy you can view in the appendix)","8291cf9e":"We have 50000 samples loaded. Now let's take a look at one of them in detail. Each sample consists of an image and its corresponding label.","9343c764":"[*Click for solution*](https:\/\/github.com\/NeuromatchAcademy\/course-content-dl\/tree\/main\/\/tutorials\/W1D1_BasicsAndPytorch\/solutions\/W1D1_Tutorial1_Solution_49a61fb7.py)\n\n","df8e6ca4":"However, in PyTorch most common Python operators are overridden.\nThe common standard arithmetic operators (+, -, *, \/, and **) have all been lifted to elementwise operations","8264193f":"**Datasets**\n\nThe `torchvision` package gives you easy access to many of the publicly available datasets. Let's load the [CIFAR10](https:\/\/www.cs.toronto.edu\/~kriz\/cifar.html) dataset, which contains color images of 10 different classes, like vehicles and animals.\n\nCreating an object of type `datasets.CIFAR10` will automatically download and load all images from the dataset. The resulting data structure can be treated as a list containing data samples and their corresponding labels.","4bd55c83":"**Tensor-Tensor operations**\n\nWe can perform operations on tensors using methods under ```torch.``` ","954124c0":"**Creating random tensors and tensors like other tensors:**\n\n---","9563883a":" ###Play with the parameters to solve XOR\n","96bd6415":"When we have multidimensional tensors, indexing rules work the same way as numpy.","aa94c705":"### Coding Exercise 2.1: Creating Tensors\n\nBelow you will find some incomplete code. Fill in the missing code to construct the specified tensors.\n\nWe want the tensors: \n\n$A:$ 20 by 21 tensor consisting of ones\n\n$B:$ a tensor with elements equal to the elements of numpy array $Z$\n\n$C:$ a tensor with the same number of elements as $A$ but with values $\n\\sim U(0,1)$\n\n$D:$ a 1D tensor containing the even numbers between 4 and 40 inclusive.\n","859980ff":" ### Execute this cell!\n","fa1a392c":"###  Video 11: Generating the Neural Network\n","6c14e7ae":"##  Video 1: Welcome and History\n","65a260ed":"Notice that ```.empty()``` does not return zeros, but seemingly random small numbers. Unlike ```.zeros()```, which initialises the elements of the tensor with zeros, ```.empty()``` just allocates the memory. It is hence a bit faster if you are looking to just create a tensor.","fa8b4c49":"```\nAll correct!\n```","9a117df8":"### Coding Exercise 2.6: Load the CIFAR10 dataset as grayscale images\n\nThe goal of this excercise is to load the images from the CIFAR10 dataset as grayscale images. Note that we rerun the `set_seed` function to ensure reproducibility.","4ea555d9":"##  Video 17: It's a wrap!\n","513989af":"# Section 1: Welcome to Neuromatch Deep learning course","6fdf708a":"Tensors also have a number of common arithmetic operations built in. A full list of **all** methods can be found  in the appendix (there are a lot!) \n\nAll of these operations should have similar syntax to their numpy equivalents.(Feel free to skip if you already know this!)","40bbf984":"### Coding Exercise 3.2: Classify some samples\n\nNow let's pass some of the points of our dataset through the network and see if it works. You should not expect the network to actually classify the points correctly, because it has not been trained yet. \n\nThe goal here is just to get some experience with the data structures that are passed to the forward and predict methods and their results.","492dbf15":"**Plot the loss during training**\n\nPlot the loss during the training to see how it reduces and converges.","2241eccb":"**Concatenation**","6414e0dc":"### Coding Exercise 2.4: Just how much faster are GPUs?\n\nBelow is a simple function. Complete the second function, such that it is performs the same operations as the first function, but entirely on the GPU.","f4fae17d":"### Interactive Demo 3.3: Solving XOR\n\nHere we use an open source and famous visualization widget developed by Tensorflow team available [here](https:\/\/github.com\/tensorflow\/playground).\n* Play with the widget and observe that you can not solve the continuous XOR dataset.\n* Now add one hidden layer with three units, play with the widget, and set weights by hand to solve this dataset perfectly.\n\nFor the second part, you should set the weights by clicking on the connections and either type the value or use the up and down keys to change it by one increment. You could also do the same for the biases by clicking on the tiny square to each neuron's bottom left.\nEven though there are infinitely many solutions, a neat solution when $f(x)$ is ReLU is: \n\n\\begin{equation}\n  y = f(x_1)+f(x_2)-f(x_1+x_2)\n\\end{equation}\n\nTry to set the weights and biases to implement this function after you played enough :)","54c4eb2b":"**Numpy-like number ranges:**\n---\nThe ```.arange()``` and ```.linspace()``` behave how you would expect them to if you are familar with numpy.","b83d6599":"In this example, we concatenate two matrices along rows (axis 0, the first element of the shape) vs. columns (axis 1, the second element of the shape). We can see that the first output tensor\u2019s axis-0 length ( 6 ) is the sum of the two input tensors\u2019 axis-0 lengths ( 3+3 ); while the second output tensor\u2019s axis-1 length ( 8 ) is the sum of the two input tensors\u2019 axis-1 lengths ( 4+4 ).","7a8bde6d":"Color images are modeled as 3 dimensional tensors. The first dimension corresponds to the channels (C) of the image (in this case we have RGB images). The second dimensions is the height (H) of the image and the third is the width (W). We can denote this image format as C \u00d7 H \u00d7 W.","16b50cf5":"Exclusive OR (XOR) logical operation gives a true (`1`) output when the number of true inputs is odd. That is, a true output result if one, and only one, of the inputs to the gate is true. If both inputs are false (`0`) or both are true or false output results. Mathematically speaking, XOR represents the inequality function, i.e., the output is true if the inputs are not alike; otherwise, the output is false.\n\nIn case of two inputs ($X$ and $Y$) the following truth table is applied:\n\n\\begin{array}{ccc}\nX & Y & \\text{XOR} \\\\\n\\hline\n0 & 0 & 0 \\\\\n0 & 1 & 1 \\\\\n1 & 0 & 1 \\\\\n1 & 1 & 0 \\\\\n\\end{array}\n\nHere, with `0`, we denote `False`, and with `1` we denote `True` in boolean terms.","4750ba94":"*Reproducibility:* DataLoader will reseed workers following Randomness in multi-process data loading algorithm. Use `worker_init_fn()` and a `generator` to preserve reproducibility:\n\n\n```python\ndef seed_worker(worker_id):\n    worker_seed = torch.initial_seed() % 2**32\n    numpy.random.seed(worker_seed)\n    random.seed(worker_seed)\n\n\ng_seed = torch.Generator()\ng_seed.manual_seed(my_seed)\n\nDataLoader(\n    train_dataset,\n    batch_size=batch_size,\n    num_workers=num_workers,\n    worker_init_fn=seed_worker,\n    generator=g_seed\n    )\n```","b952be35":"##  Video 18: Syllabus\n","e1ea9de3":"Now it is time to train your network on your dataset. Don't worry if you don't fully understand everything yet - we wil cover training in much more details in the next days. For now, the goal is just to see your network in action!\n\nYou will usually implement the `train` method directly when implementing your class `NaiveNet`. Here, we will implement it as a function outside of the class in order to have it in a ceparate cell.","a3e5abb9":"###  Generate sample data\n","b8b389d7":" These are the slides for the videos in this tutorial today\n","282132d5":"####  Video 8: Train and Test\n","18a4d349":"**Conversion to Other Python Objects**\n\nConverting to a NumPy tensor, or vice versa, is easy. The converted result does not share memory. This minor inconvenience is actually quite important: when you perform operations on the CPU or on GPUs, you do not want to halt computation, waiting to see whether the NumPy package of Python might want to be doing something else with the same chunk of memory.\n\nWhen converting to a numpy array, the information being tracked by the tensor will be lost i.e. the computational graph. This will be covered in detail when you are introduced to autograd tomorrow! ","4fed7b82":"**Operations between cpu tensors and cuda tensors**\n\nNote that the type of the tensor changed after calling ```.to()```. What happens if we try and perform operations on tensors on devices?\n\n\n","ec5a3dad":"**Construct tensors directly:**\n\n---\n\n","c22084a4":"**Transformations**\n\nAnother useful feature when loading a dataset is applying transformations on the data - color conversions, normalization, cropping, rotation etc. There are many predefined transformations in the `torchvision.transforms` package and you can also combine them using the `Compose` transform. Checkout the [pytorch documentation](https:\/\/pytorch.org\/vision\/stable\/transforms.html) for details.","a775768d":"[*Click for solution*](https:\/\/github.com\/NeuromatchAcademy\/course-content-dl\/tree\/main\/\/tutorials\/W1D1_BasicsAndPytorch\/solutions\/W1D1_Tutorial1_Solution_2a69ad55.py)\n\n","a99c3607":"---\n# Bonus","25f6d865":"##  Figure Settings\n","85d29252":"###  Video 7: Getting Data\n","d71b4ccc":"We cannot combine cuda tensors and cpu tensors in this fashion. If we want to compute an operation that combines tensors on different devices, we need to move them first! We can use the ```.to()``` method as before, or the ```.cpu()``` and ```.cuda()``` methods.\n\nGenerally in this course all Deep learning is done on the GPU and any computation is done on the CPU, so sometimes we have to pass things back and forth so you'll see us call\n\n\n\n ","ee85c7aa":"```\nSample input: tensor([[ 0.9066,  0.5052],\n        [-0.2024,  1.1226],\n        [ 1.0685,  0.2809],\n        [ 0.6720,  0.5097],\n        [ 0.8548,  0.5122]], device='cuda:0')\nNetwork output: tensor([[-0.3032, -0.5563],\n        [-0.1419, -0.3195],\n        [-0.2879, -0.6030],\n        [-0.2665, -0.4831],\n        [-0.2973, -0.5369]], device='cuda:0', grad_fn=<AddmmBackward>)\nPredicted labels: tensor([0, 0, 0, 0, 0], device='cuda:0')\n```","9568592c":"## Section 2.2: Operations in PyTorch\n\n**Tensor-Tensor operations**\n\nWe can perform operations on tensors using methods under ```torch.``` \n\n","015bc1ef":"PyTorch is a Python-based scientific computing package targeted at two sets of\naudiences:\n\n-  A replacement for NumPy to use the power of GPUs\n-  A deep learning platform that provides significant flexibility\n   and speed\n\nAt its core, PyTorch provides a few key features:\n\n- A multidimensional [Tensor](https:\/\/pytorch.org\/docs\/stable\/tensors.html) object, similar to [NumPy Array](https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.ndarray.html) but with GPU acceleration.\n- An optimized **autograd** engine for automatically computing derivatives.\n- A clean, modular API for building and deploying **deep learning models**.\n\nYou can find more information about PyTorch in the appendix.","b032ee08":"**Dataloader**\n\nAnother important concept is the `Dataloader`. It is a wrapper around the `Dataset` that splits it into minibatches (important for training the neural network) and makes the data iterable. The `shuffle` argument is used to shuffle the order of the samples across the minibatches.\n","88b76dba":"**Prepare Data for PyTorch**\n\nNow let's prepare the data in a format suitable for PyTorch - convert everything into tensors.","86a9092a":"## Section 3.3: Train Your Neural Network\n\n","405184c0":"```\ntensor([24, 24])\ntensor([[ 0,  2],\n        [ 1,  3],\n        [ 2, -1],\n        [ 3, 10]])\ntensor([[ 3,  2],\n        [-1,  5]])\ntensor([[ 1, -1, -1,  3,  2,  3,  0]])\n```","da2d4f8a":"##  Video 10: CSV Files\n","19328c86":"For this example we want to have a simple neural network consisting of 3 layers:\n- 1 input layer of size 2 (our points have 2 coordinates)\n- 1 hidden layer of size 16 (you can play with different numbers here)\n- 1 output layer of size 2 (we want the have the scores for the two classes)\n\nDuring the course you will deal with differend kinds of neural networks. On Day 2 we will focus on linear networks, but you will work with some more complicated architectures in the next days. The example here is meant to demonstrate the process of creating and training a neural network end-to-end.\n\n**Programing the Network**\n\nPyTorch provides a base class for all neural network modules called [`nn.Module`](https:\/\/pytorch.org\/docs\/stable\/generated\/torch.nn.Module.html). You need to inherit from `nn.Module` and implement some important methods:\n\n`__init__`\n\nIn the `__init__` method you need to define the structure of your network. Here you will specify what layers will the network consist of, what activation functions will be used etc.\n\n`forward`\n\nAll neural network modules need to implement the `forward` method. It specifies the computations the network needs to do when data is passed through it.\n\n`predict`\n\nThis is not an obligatory method of a neural network module, but it is a good practice if you want to quickly get the most likely label from the network. It calls the `forward` method and chooses the label with the highest score.\n\n`train`\n\nThis is also not an obligatory method, but it is a good practice to have. The method will be used to train the network parameters and will be implemented later in the notebook.\n\n\n> Note that you can use the `__call__` method of a module directly and it will invoke the `forward` method: `net()` does the same as `net.forward()`.","be90d97a":"**Check that your network works**\n\nCreate an instance of your model and visualize it","d180ec83":"*This will be an intensive 3 week adventure. We will all learn Deep Learning. In a group. Groups need standards. Read our \n[Code of Conduct](https:\/\/docs.google.com\/document\/d\/1eHKIkaNbAlbx_92tLQelXnicKXEcvFzlyzzeWjEtifM\/edit?usp=sharing).\n","f6b12064":"[*Click for solution*](https:\/\/github.com\/NeuromatchAcademy\/course-content-dl\/tree\/main\/\/tutorials\/W1D1_BasicsAndPytorch\/solutions\/W1D1_Tutorial1_Solution_8a7b1b66.py)\n\n*Example output:*\n\n<img alt='Solution hint' align='left' width=835.0 height=827.0 src=https:\/\/raw.githubusercontent.com\/NeuromatchAcademy\/course-content-dl\/main\/tutorials\/W1D1_BasicsAndPytorch\/static\/W1D1_Tutorial1_Solution_8a7b1b66_1.png>\n\n","c4b3610d":"\nBy default, when we create a tensor it will *not* live on the GPU! ","5e6cf899":"**Flatten and reshape**\n\nThere are various methods for reshaping tensors. It is common to have to express 2D data in 1D format. Similarly, it is also common to have to reshape a 1D tensor into a 2D tensor. We can achieve this with the ```.flatten()``` and ```.reshape()``` methods.","246ce803":"**Our 2021 Sponsors, including Presenting Sponsor Facebook Reality Labs**\n\n<p align='center'><img src='https:\/\/github.com\/NeuromatchAcademy\/widgets\/blob\/master\/sponsors.png?raw=True'\/><\/p>","216007d9":"**Describe what you hope to get out of this course in about 100 words.**","e6822bcf":"[*Click for solution*](https:\/\/github.com\/NeuromatchAcademy\/course-content-dl\/tree\/main\/\/tutorials\/W1D1_BasicsAndPytorch\/solutions\/W1D1_Tutorial1_Solution_d99622ef.py)\n\n"}}