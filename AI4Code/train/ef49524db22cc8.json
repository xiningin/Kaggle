{"cell_type":{"453c3e64":"code","0328119b":"code","76431686":"code","e2193621":"code","89720278":"code","8c79f3db":"code","fbba7c07":"code","5bb0bc03":"code","46fdbcf2":"code","11a80bb7":"code","f0cb04cc":"code","1a655618":"code","b205e2d5":"code","2d5977ec":"code","87e146de":"code","85848d00":"code","90352e7f":"code","61d0fe2f":"code","4bca7f18":"code","142fc71c":"code","9c239688":"code","becb0978":"code","d854d844":"code","5883354d":"code","e8e5d44f":"code","749cdca7":"code","411b639f":"code","c61da195":"code","ae7d2565":"code","7766c3a9":"code","e553f428":"code","3d8dd383":"code","4bb2c325":"code","8fcca0f6":"code","716be68d":"code","f0463cfa":"code","37a07ed4":"code","5f0b90bf":"code","612bc3b3":"code","d019f6f5":"code","5cfc2838":"code","fc8ace47":"code","58ab94f4":"code","62fe31d4":"code","6f8e9e2f":"code","fa849e76":"code","5cb97ae1":"code","6e7f6c9e":"code","00cafd50":"code","2f112058":"code","77830cbc":"code","9205eb2e":"code","2e949ae9":"code","2c231629":"code","2de2e7e0":"code","790a4b7e":"code","373d2fe9":"code","5098df0b":"code","b8b0e461":"code","cc0e798f":"code","57c04bfe":"code","b0d81685":"code","05783bf6":"code","97e4ed2e":"code","7ba12227":"code","4de78974":"code","183c90e5":"code","d99946b9":"code","877b1725":"code","44f16d43":"code","f0e69634":"code","1d8827c3":"code","257be91f":"code","b90cf980":"code","0bb80a6e":"code","70be8a12":"code","b5296ea0":"code","47dcd557":"code","becb6a6c":"code","51d2685b":"code","db0552c8":"code","c7eb4457":"code","dcee475d":"code","85d98926":"code","f7ad4c74":"code","d59affcf":"code","5280d654":"code","4fc62e82":"code","01b24f33":"code","7848a27a":"code","2ebd2500":"code","38dce1b5":"code","d8f13456":"code","e930663b":"code","0f5f9f3e":"code","a85ca0f0":"code","6bfd0d9c":"code","dc71baf2":"code","0543a268":"code","60180fd5":"code","3b7243e4":"code","dd009d1b":"code","3f8eb18f":"code","766e5a00":"code","ff72897b":"code","7873a22a":"code","c1137c1b":"code","ec7c5cc4":"markdown","2a27040e":"markdown","790528d2":"markdown","b454bfcc":"markdown","841f066e":"markdown","7e5ac8db":"markdown","80a4e4b6":"markdown","ee5c472d":"markdown","29f39cc4":"markdown","f9f13eaa":"markdown","301bcf35":"markdown","40d92c0b":"markdown","79acfaee":"markdown","518407fb":"markdown","fe11f0c5":"markdown","bf56aede":"markdown","4ff4ce8d":"markdown","83a63ed4":"markdown","ad7f9b2a":"markdown","4db8e29c":"markdown","8ccb71ee":"markdown","8fc78ef4":"markdown","32bbc856":"markdown","970430bd":"markdown","9de8a3e1":"markdown","d0542250":"markdown","574f0e29":"markdown","762e5d5c":"markdown","7a44424f":"markdown","f5d06b90":"markdown","e2df382c":"markdown","203b2e7c":"markdown","a108a438":"markdown","11372ac2":"markdown","4cc65e9b":"markdown"},"source":{"453c3e64":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.","0328119b":"input_path = \"..\/input\/titanic\/\"\ndf_train = pd.read_csv(input_path + 'train.csv')\ndf_train","76431686":"my_col = ['Sex', 'Embarked']","e2193621":"#X_train = df_train.loc[:,['Pclass', 'Age']]\nX_train = df_train.loc[:,my_col]","89720278":"y_train = df_train['Survived']","8c79f3db":"df_test = pd.read_csv(input_path + 'test.csv')\ndf_test","fbba7c07":"df_train.sample(10)","5bb0bc03":"df_test.sample(10)","46fdbcf2":"X_test = df_test.loc[:,my_col]","11a80bb7":"# Verifie le nombre de champ null dans df_train \ndf_train.isnull().sum()","f0cb04cc":"# verifie le nombre de NaN dans le df_test\ndf_test.isnull().sum()","1a655618":"# recuperation des ages non NaN\nage = df_train.loc[df_train['Age'] > 0]\nage","b205e2d5":"# calcul de la moyen general de l'age des passager\nage_moyen = np.sum(age.Age)\/\/len(age.Age)\nage_moyen","2d5977ec":"age_null = df_train.loc[df_train['Age'].isnull()]\nage_null","87e146de":"age_null.loc[:,'Age'] = age_moyen\nage_null","85848d00":"#Ajouet de tout les age Nan avec le fontion fillna(), l'age moyen a etait calculer plus haut \ndf_train['Age'].fillna(age_moyen, inplace=True)\ndf_train","90352e7f":"#Verification que les ages NaN son bien remplacer\ndf_train.isnull().sum()","61d0fe2f":"df_test['Age'].fillna(age_moyen, inplace=True)\ndf_test","4bca7f18":"#Verification que les ages NaN son bien remplacer\ndf_test.isnull().sum()","142fc71c":"# on recupere les Fare null de df test \ndf_test.loc[df_test['Fare'].isnull()]","9c239688":"# on verifie si il existe dans train\ndf_train.loc[df_train['PassengerId'] == 1044]","becb0978":"#on vas recuper le fare moyen de train\nfare = df_train.loc[df_train['Fare'] > 0]\nfare_moyen = np.sum(fare.Fare)\/\/len(fare.Fare)\nfare_moyen","d854d844":"#on ajoute le fare moyen de train dans les valeur NaN de df_test\ndf_test['Fare'].fillna(fare_moyen, inplace=True)","5883354d":"df_test.loc[df_test['PassengerId'] == 1044]","e8e5d44f":"# creation d'une colonne sex en boolean initialiser a 0\ndf_train['Sex_bool'] = 0\ndf_train","749cdca7":"# ajout de la valeur 1 si son il est un homme\ndf_train['Sex_bool'].loc[df_train['Sex'] == 'male'] = 1\ndf_train","411b639f":"# meme chose que pour train \ndf_test['Sex_bool'] = 0","c61da195":"df_test['Sex_bool'].loc[df_test['Sex'] == 'male'] = 1","ae7d2565":"# q_cut pour decouper l'age en plusieur partie(5), puis on les labels pour pouvoir les passes en paramettre dans l'entrainement \ndf_train['age_cut'] = pd.qcut(df_train['Age'], 5, labels=[0, 1, 2, 3, 4])","7766c3a9":"df_train","e553f428":"df_test['age_cut'] = pd.qcut(df_test['Age'], 5, labels=[0, 1, 2, 3, 4])","3d8dd383":"df_test","4bb2c325":"df_train","8fcca0f6":"# transformation de valeur string en numerique pour les embarked\n# on regarde qu'elle est la valeur la plus rependu \nEmbarked = df_train.loc[df_train['Embarked'].notnull()]\nEmbarked['Embarked'].describe()","716be68d":"# puis on l'ajoute a tout les valeur manquante \ndf_train['Embarked'].fillna('S', inplace = True)","f0463cfa":"# on addition les deux colone pour recuper le nombre total de parsonne par famille \ndf_train['Family'] = df_train['SibSp'] + df_train['Parch'] + 1\n#df_train.tail()","37a07ed4":"df_test['Family'] = df_test['SibSp'] + df_test['Parch'] + 1\n#df_test.tail()","5f0b90bf":"df_train.loc[df_train['Cabin'].notnull()]","612bc3b3":"name = df_train['Name'].copy()","d019f6f5":"# je decoupe mes serie a partir de la ',' puis si je rencontre un carractere a \u00e0 z et A \u00e0 Z , je prend tous se qu'il y a apres jusqu'au point\nname = name.str.extract(', ([a-zA-Z]+).')","5cfc2838":"df_train['Titel_name_extract'] = name","fc8ace47":"df_train['Titel_name_extract'].value_counts()","58ab94f4":"df_train['Titel_name_extract_map'] = df_train['Titel_name_extract'].map({'Mr' : 0,\n'Miss' : 1,\n'Mrs' : 2,\n'Master' : 3\n})","62fe31d4":"df_train['Titel_name_extract_map'].fillna(4, inplace=True)","6f8e9e2f":"df_train","fa849e76":"name_test = df_test['Name'].copy()\nname_test = name_test.str.extract(', ([a-zA-Z]+).')\ndf_test['Titel_name_extract'] = name_test\ndf_test['Titel_name_extract'].value_counts()","5cb97ae1":"df_test['Titel_name_extract_map'] = df_test['Titel_name_extract'].map({'Mr' : 0,\n'Miss' : 1,\n'Mrs' : 2,\n'Master' : 3\n})","6e7f6c9e":"df_test['Titel_name_extract_map'].fillna(4, inplace=True)","00cafd50":"df_test","2f112058":"cabin = df_train.copy()\n#cabin","77830cbc":"df_train['Cabin_bool'] = 0","9205eb2e":"df_train['Cabin_bool'].loc[df_train['Cabin'].notnull()] = 1","2e949ae9":"sns.catplot(x='Survived', y='Cabin_bool', kind='bar', data=df_train);","2c231629":"df_test['Cabin_bool'] = 0\ndf_test['Cabin_bool'].loc[df_test['Cabin'].notnull()] = 1","2de2e7e0":"df_train['Ticket'].describe()","790a4b7e":"df_test['Ticket'].describe()","373d2fe9":"df_train.loc[df_train['Ticket'] == \"CA. 2343\"]","5098df0b":"ticket = df_train['Ticket'].copy()","b8b0e461":"ticket = ticket.str.extract(' ([0-9]+)')","cc0e798f":"df_train['Ticket_extract'] = ticket\ndf_train['Ticket_extract'].value_counts()","57c04bfe":"df_train['Ticket_extract'].loc[df_train['Ticket_extract'].isnull()] = df_train.loc[df_train['Ticket_extract'].isnull()]['Ticket']","b0d81685":"df_train.loc[:, ['Ticket', 'Ticket_extract']]","05783bf6":"df_train.loc[178:, ['Ticket', 'Ticket_extract']]","97e4ed2e":"df_train['Ticket_extract'].loc[df_train['Ticket_extract'] == 'LINE'] = -1","7ba12227":"df_train['Ticket_extract'] = pd.to_numeric(df_train['Ticket_extract'])","4de78974":"df_train['Ticket_extract_cut'] = pd.qcut(df_train['Ticket_extract'], 10, labels=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])","183c90e5":"sns.catplot(x='Ticket_extract_cut', y='Survived', kind='bar', height=7, aspect=1.5, data=df_train);","d99946b9":"ticket_test = df_test['Ticket'].copy()\nticket_test = ticket_test.str.extract(' ([0-9]+)')\ndf_test['Ticket_extract'] = ticket_test\ndf_test['Ticket_extract'].loc[df_test['Ticket_extract'].isnull()] = df_test.loc[df_test['Ticket_extract'].isnull()]['Ticket']\ndf_test['Ticket_extract'].loc[df_test['Ticket_extract'] == 'LINE'] = -1\ndf_test['Ticket_extract'] = pd.to_numeric(df_test['Ticket_extract'])\ndf_test['Ticket_extract_cut'] = pd.qcut(df_test['Ticket_extract'], 10, labels=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])","877b1725":"sns.catplot(x='Ticket_extract_cut', y='Survived', kind='bar', height=7, aspect=1.5, data=df_train);","44f16d43":"# visuelle d'impate en fonction du sexe (homme, femme)\nsns.catplot(x='Sex', y='Survived', kind='bar', data=df_train);","f0e69634":"sns.catplot(x='Pclass', y='Survived', kind='bar', data=df_train);","1d8827c3":"sns.catplot(x='Sex', y='Pclass', kind='bar', data=df_train);","257be91f":"sns.catplot(x='Sex', y='Age', kind='boxen', hue='Survived', data=df_train);","b90cf980":"sns.catplot(x='age_cut', y='Survived', kind='bar', height=7, aspect=1.5, data=df_train);","0bb80a6e":"sns.catplot(x=\"Pclass\", y=\"Age\", hue=\"Survived\", kind=\"bar\", height=7, aspect=2.5, data=df_train);","70be8a12":"df_femme = df_train.loc[df_train['Sex'] == 'female' ]","b5296ea0":"sns.catplot(x='Pclass', y='Survived', kind=\"bar\", data=df_train);","47dcd557":"df_homme = df_train.loc[df_train['Sex'] == 'male' ]","becb6a6c":"sns.catplot(x='Pclass', y='Survived', kind=\"bar\", data=df_homme);","51d2685b":"sns.relplot(x='Age', y='Fare', hue='Survived', data=df_train);","db0552c8":"# on decoupe en 5 par egale les prix des tickets \ndf_train['Fare_cut'] = pd.qcut(df_train['Fare'], 4, labels=[0, 1, 2, 3])\ndf_test['Fare_cut'] = pd.qcut(df_test['Fare'], 4, labels=[0, 1, 2, 3])","c7eb4457":"sns.catplot(x='Fare_cut', y='Survived', hue=\"Sex\", kind=\"bar\", height=7, aspect=2.5, data=df_train);","dcee475d":"sns.barplot(x='Embarked', y='Survived', data=df_train);","85d98926":"sns.barplot(x='Embarked', y='Fare', data=df_train);","f7ad4c74":"# on convertie nos embarked en numerique pour pouvoir les exploites dans l'entrainement \ndf_train['Embarked_map'] = df_train['Embarked'].map({'S': 0, 'C' : 1, 'Q' : 2})","d59affcf":"df_test['Embarked_map'] = df_test['Embarked'].map({'S': 0, 'C' : 1, 'Q' : 2})","5280d654":"df_train[1:29]","4fc62e82":"# commenter pour gagner du temps lors d'un run all\nsns.set(style=\"ticks\")\ncol = ['Survived', 'age_cut', 'Sex_bool', 'Fare_cut', 'Family', 'Pclass', 'Embarked_map', 'Age']\n#sns.pairplot(df_train.loc[:,col], hue=\"Survived\");","01b24f33":"sns.catplot(x='Titel_name_extract', y='Survived', kind=\"bar\", height=7, aspect=2.5, data=df_train);","7848a27a":"#sns.catplot(x='Titel_name_extract_map', y='Survived', kind=\"bar\", height=7, aspect=2.5, data=df_train);\nplt.figure()\nax = sns.barplot(x='Titel_name_extract_map', y='Survived', data=df_train);\nax.set_xticklabels(labels=['Mr', 'Miss', 'Mrs', 'Master' , 'Autre']);","2ebd2500":"sub = pd.read_csv(input_path + 'gender_submission.csv')","38dce1b5":"sub.columns","d8f13456":"my_col = ['age_cut', 'Sex_bool', 'Fare_cut', 'Family', 'Pclass', 'Embarked_map', 'Titel_name_extract_map']\n# le cabin_bool n'est pas assez pertinente donc on le retire","e930663b":"X_train = df_train.loc[:, my_col]","0f5f9f3e":"df_train","a85ca0f0":"y_train = df_train['Survived']","6bfd0d9c":"X_train.isnull().sum()","dc71baf2":"X_test = df_test.loc[:, my_col]  ","0543a268":"sns.catplot(x='Sex', y='Survived', kind=\"bar\", data=df_train)","60180fd5":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nrf = RandomForestClassifier(criterion='gini', \n                             n_estimators=700,\n                             min_samples_split=10,\n                             min_samples_leaf=1,\n                             max_features='auto',\n                             oob_score=True,\n                             random_state=1,\n                             n_jobs=-1)\n","3b7243e4":"rf.fit(X_train, y_train)","dd009d1b":"# y paramettre a predire , rf.predict() pour lancer le test \ntrain_acc = accuracy_score(y_train, rf.predict(X_train))\nprint(\"train accuraccy: {}\".format(train_acc))","3f8eb18f":"rf.predict(X_test)","766e5a00":"X = df_test.loc[:,my_col]\nfi_dict = {\n    'feats': X.columns,\n    'feature_importance': rf.feature_importances_\n}\nfi = pd.DataFrame(fi_dict).set_index('feats').sort_values(\n    'feature_importance', ascending=False)\nfi.sort_values(\n    'feature_importance', ascending=True).tail(10).plot.barh();","ff72897b":"#rf = pd.DataFrame()\n#rf['predict'] = sub['Survived']","7873a22a":"# cellule pour stocker le resultat du modele\nsubmission = pd.DataFrame({'PassengerId' : df_test['PassengerId'],\n                           'Survived' : rf.predict(X_test)})\nsubmission.to_csv('submission.csv', index=False)","c1137c1b":"from sklearn.model_selection import train_test_split\ndef train_model(model, X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X, y)\n    model.fit(X_train, y_train)\n    train_acc = accuracy_score(y_train, model.predict(X_train))\n    test_acc = accuracy_score(y_test, model.predict(X_test))\n    return {\n        'train accuracy': train_acc,\n        'test accuracy': test_acc\n    }\nprint(train_model(rf, X_train, y_train))","ec7c5cc4":"Partie train","2a27040e":"- on peux voir que les personnes qui avait des cabines avais plus de chance de sans sortir","790528d2":"#### Remplacer les valeurs manquante de Age par la moyenne d'age","b454bfcc":"- On peux contaster quand fonction de sa class dans le titanic nous avions moin de chance de survie quand on etait en 3eme class, puis en 2eme.","841f066e":"- on peux voir l'importance de titre par personne pour la survie ","7e5ac8db":"- les hommes de class 1 avais plus de chance de survie","80a4e4b6":"### Analyse de donner en grap pour trouver des correlations","ee5c472d":"# -------------------------------------------------------------------------","29f39cc4":"Partie pour traiter les tickerts","f9f13eaa":"#### Ajout d'une branche d'age decouper en 5 partie","301bcf35":"Partie test","40d92c0b":"##### Partie pour le fichier test :","79acfaee":"- on a regarder le nombre de personne survecu pas port et le port C a le plus survevu puis le Q, puis le S","518407fb":"- avec le graph si dessus on constast que la class 1 etait en moyen plus agee et qu'il avais moin de chance de survie, on vois que les graphs vas en dessans en plus ta class en haut donc plus tu etait jeune plus tu tas class etait haut(class3 entre 20 -30)","fe11f0c5":"- on peux voir avec le poid que l'age et le sex avais une grande importance surtout cher les femmes jeune","bf56aede":"#### decoupage de mon name","4ff4ce8d":"Colone le plus pertinant pour le debut Sex Age, OK\n\nPclass SibSb Farch Fare Ok\n\naller recuper d'autre donner ex les mort","83a63ed4":"- on regarde le l'importance du sex par class ","ad7f9b2a":"- avec se graph on peux constater que les jeunes on plus de chance de survie(0 a 16) alors les personne de plus de 64 on une faible chance de survie","4db8e29c":" - Le femme avaient plus de chance de survie d'apres le graphe du dessus","8ccb71ee":"- la on regarde le prix du ticket en fonction des ports et on constat que le port ou les ticker etait les plus cher a le mieux survecu","8fc78ef4":"- avec se graph on peux mieux voir les types de personne qui avais plus de chance de sans sortir (Mrs, Miss, Master)","32bbc856":"- on peux constater que les femme qui payer le plus cher avait une meilleur chance de sens sortir\n\n- Comme pour les homme meme si leur poucentage est bien inferieur a celui de la femme","970430bd":"**Creation d'un colone famille pour recenbler SibSp et Parch**","9de8a3e1":"## Partie creation du model","d0542250":"Analyse par title name","574f0e29":"test pour les cabins","762e5d5c":"- avec le graph on peuc voir quand fonction du groupe de ticket que les personne avaient acheter ils avaient moin de chance de sans sortir ou beaucoup plus de chance comme pour le 2, 3 , 4 et 5","7a44424f":"Nettoyage de Embarked ","f5d06b90":"- on peut voir qu le femme de 3 class avait moin de chance de survie","e2df382c":"#### Creer une nouvelle colone bool pour le sex","203b2e7c":"##### Remplacer le Fare dans le df_test par la moyen de Pclass(3)","a108a438":"- Se graph me permette de voir la proportion de femme par class","11372ac2":"##### Partie pour le fichier de train :","4cc65e9b":"- on peux deviner que les personnes les plus riche avais plus de chance de sens sortir"}}