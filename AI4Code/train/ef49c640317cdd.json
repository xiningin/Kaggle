{"cell_type":{"33ddf852":"code","86590395":"code","afc8d074":"code","26699b38":"code","95784321":"code","d4f90a9d":"code","cea5bae3":"code","64aad007":"code","a5483c6f":"code","18757d9b":"code","7aa1534b":"code","552c9c04":"code","1488c345":"code","3c100e5f":"code","b87cd338":"code","ee2d340b":"code","b37a6dc4":"code","31c4c2c1":"code","1c68bf13":"code","51ef9f9e":"code","32c28bf4":"code","9f7f873c":"code","f221ba12":"code","78d8c650":"code","42bd2056":"code","2a598a4b":"code","27b3f678":"code","b60b9232":"code","4a7b9910":"code","81224c5f":"code","31ea1b73":"code","9bf07c77":"code","604e33ed":"code","97ce3523":"code","73f24a97":"code","fb852030":"code","9a64762d":"markdown","b7cca7ea":"markdown","0dbe98d3":"markdown","36287202":"markdown","5c3fdb62":"markdown","387d0408":"markdown","7f9de099":"markdown"},"source":{"33ddf852":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86590395":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os","afc8d074":"data_dir='..\/input\/cell-images-for-detecting-malaria'","26699b38":"print(os.listdir(data_dir))","95784321":"print(os.listdir(data_dir+'\/cell_images'))\nprint(os.listdir(data_dir+'\/cell_images'+'\/cell_images'))","d4f90a9d":"print(os.listdir(data_dir+'\/cell_images'+'\/cell_images'+'\/Uninfected'))\nprint(os.listdir(data_dir+'\/cell_images'+'\/cell_images'+'\/Parasitized'))","cea5bae3":"from matplotlib.image import imread","64aad007":"uninfected=data_dir+'\/cell_images'+'\/cell_images'+'\/Uninfected'+'\/C130P91ThinF_IMG_20151004_142951_cell_89.png'\nparasitized=data_dir+'\/cell_images'+'\/cell_images'+'\/Parasitized'+'\/C186P147NThinF_IMG_20151203_150408_cell_170.png'","a5483c6f":"plt.figure(figsize=(15,8))\nplt.subplot(1,2,1)\nplt.imshow(imread(uninfected))\nplt.title('uninfected_image')\nplt.xticks([]) , plt.yticks([])\n\nplt.subplot(1,2,2)\nplt.imshow(imread(parasitized))\nplt.title('infected_image')\nplt.xticks([]) , plt.yticks([])","18757d9b":"imread(uninfected).shape","7aa1534b":"imread(parasitized).shape","552c9c04":"print('no of uninfected data:',len(os.listdir(data_dir+'\/cell_images'+'\/cell_images'+'\/Uninfected')))\nprint('no of parasitized data:',len(os.listdir(data_dir+'\/cell_images'+'\/cell_images'+'\/Parasitized')))","1488c345":"width=[]\nheight=[]\n\nfor image_name in os.listdir(data_dir+'\/cell_images'+'\/cell_images'+'\/Uninfected'):\n    img=imread(data_dir+'\/cell_images'+'\/cell_images'+'\/Uninfected\/'+image_name)\n    d1,d2,color=img.shape\n    width.append(d1)\n    height.append(d2)\n","3c100e5f":"width","b87cd338":"height","ee2d340b":"sns.jointplot(width,height)","b37a6dc4":"np.mean(width)","31c4c2c1":"np.mean(height)","1c68bf13":"# we can fix our height and width\nfix_width=130\nfix_height=130","51ef9f9e":"# there is no need to rescale our data as they are already between 0 and 1\nprint(imread(uninfected).max())\nprint(imread(parasitized).max())","32c28bf4":"from tensorflow.keras.preprocessing.image import ImageDataGenerator","9f7f873c":"image_gen=ImageDataGenerator(rotation_range=20,\n                             width_shift_range=0.1,\n                             height_shift_range=0.1,\n                            shear_range=0.1,\n                            zoom_range=0.1,\n                            horizontal_flip=True,\n                            fill_mode='nearest',\n                            validation_split=0.2)","f221ba12":"train=image_gen.flow_from_directory(directory='..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/',\n                                   target_size=(fix_width,fix_height),\n                                    color_mode='rgb',\n                                    class_mode = 'binary',\n                                    batch_size = 16,\n                                    subset='training')","78d8c650":"test=image_gen.flow_from_directory(directory='..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/',\n                                   target_size=(fix_width,fix_height),\n                                   color_mode='rgb',\n                                    class_mode = 'binary',\n                                    batch_size = 16,\n                                   shuffle=False,\n                                    subset='validation')","42bd2056":"train.class_indices","2a598a4b":"test.class_indices","27b3f678":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D,MaxPool2D,Dropout,Flatten,Dense,BatchNormalization","b60b9232":"model = Sequential()\nmodel.add(Conv2D(filters=32,kernel_size=(3,3),activation='relu',input_shape=(130,130,3)))\nmodel.add(MaxPool2D(2,2))\n\n\nmodel.add(Conv2D(filters=32,kernel_size=(3,3),activation='relu',input_shape=(130,130,3)))\nmodel.add(MaxPool2D(2,2))\n\nmodel.add(Conv2D(filters=32,kernel_size=(3,3),activation='relu',input_shape=(130,130,3)))\nmodel.add(MaxPool2D(2,2))\n\nmodel.add(Flatten())\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(1,activation='sigmoid'))\n\nmodel.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","4a7b9910":"model.summary()","81224c5f":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss',mode='min',patience=2)","31ea1b73":"results=model.fit_generator(train,\n                           epochs=20,\n                           validation_data=test,\n                           callbacks=[early_stop])","9bf07c77":"predictions=model.predict_generator(test)","604e33ed":"pred=predictions>0.5","97ce3523":"pred","73f24a97":"from sklearn.metrics import classification_report","fb852030":"print(classification_report(pred,test.classes))","9a64762d":"# **As we can see that our in our dataset the image size vary so we have to chose a  dimension for the images so that we can train these on CNN**","b7cca7ea":"# **plotting the images**","0dbe98d3":"# **checking the dimensions of the image**","36287202":"# **Importing libraries**","5c3fdb62":"# **Splitting the data**","387d0408":"# **Grab the list of images of parasitized and Uninfected**","7f9de099":"# **Dividing the data in training and testing sets**"}}