{"cell_type":{"019f5c79":"code","b1f9566a":"code","ddd8b9c6":"code","b6559cac":"code","64c59568":"code","f3b9d069":"code","5eb1e28e":"code","3f5163ad":"code","327159c2":"code","b1604855":"code","b7729605":"code","053dde10":"code","933d5466":"code","1a55cc99":"code","ed00938b":"code","201ebcf2":"code","031169dc":"code","fd0630e2":"code","35acecf6":"code","a84b1052":"code","a4f137aa":"code","26fda5e5":"code","1b61e87f":"code","acc4ba73":"code","e37c70a1":"code","602453e0":"code","392d46ec":"code","9eb1fcac":"code","00ffd08e":"code","add01a31":"code","2aab4dca":"code","ab5adb84":"code","9e8e0fde":"code","2790f0c1":"code","06609eb4":"code","7cc7c714":"code","a8986844":"code","6e74642c":"code","7daa14a9":"code","b50da646":"code","9e743930":"code","d95e8472":"code","12ed4a16":"code","45dee0de":"code","6a15ec03":"code","dcd24632":"code","41b579aa":"code","96fb7795":"markdown","7862103d":"markdown","e532aa5b":"markdown","c84afef9":"markdown","612cd13a":"markdown","eea41edd":"markdown","8a7e1456":"markdown","3e617559":"markdown","339dec24":"markdown","d190bc7e":"markdown","3f45177a":"markdown","254a9840":"markdown","578211a9":"markdown","080f10ae":"markdown","10d9d4c5":"markdown","0c2830ec":"markdown","e4275bd0":"markdown","bf07465d":"markdown","9db1306b":"markdown","5a46e9dd":"markdown","a2b1b0d7":"markdown"},"source":{"019f5c79":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1f9566a":"#importing data\ndata_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndata_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ny = data_train.Survived","ddd8b9c6":"data_train.head()","b6559cac":"data_train.info()","64c59568":"data_test.info()","f3b9d069":"data_train.describe()","5eb1e28e":"data_train.groupby('Pclass').Survived.mean()","3f5163ad":"data_train.groupby('Sex').Survived.mean()","327159c2":"data_train.groupby('SibSp').Survived.agg(['mean','count'])","b1604855":"data_train.groupby('Parch').Survived.agg(['mean','count'])","b7729605":"data_train.groupby('Embarked').Survived.mean()","053dde10":"survived_by_age=[data_train[data_train.Age<i].Survived.mean() for i in range(5,int(data_train.Age.max()),5)]\nfor i in range(len(survived_by_age)):\n    print(\"Age \"+str(i*5)+\" to \"+str((i+1)*5)+\", \"+\"Survival Rate: \"+str(survived_by_age[i]))","933d5466":"import pandas_profiling\npandas_profiling.ProfileReport(data_train)","1a55cc99":"X_train = data_train.drop(['Name','Ticket','PassengerId'],axis=1)\nX_test = data_test.drop(['Name','Ticket','PassengerId'],axis=1)","ed00938b":"X_train.head()","201ebcf2":"sns.heatmap(X_train.isnull(),cbar=False)","031169dc":"sns.heatmap(X_test.isnull(),cbar=False)","fd0630e2":"X_train = X_train.drop(['Cabin'],axis=1)\nX_test = X_test.drop(['Cabin'],axis=1)","35acecf6":"X_train[X_train.Embarked.isnull()]","a84b1052":"X_train.groupby('Embarked').Embarked.count()","a4f137aa":"plt.figure(figsize=(16,9))\nsns.FacetGrid(X_train,col = 'Embarked',row = 'Sex',height = 4, aspect = .8).map(sns.barplot,'Pclass','Fare',order=[1,2,3])\nplt.show()","26fda5e5":"X_train.Embarked=X_train.Embarked.fillna('S')","1b61e87f":"X_train[X_train.Embarked.isnull()]","acc4ba73":"plt.figure(figsize=(14,6))\nsns.scatterplot(x=X_train.Age,y=X_train.Fare,hue=X_train.Pclass)","e37c70a1":"X_train[X_train.Pclass==1].Age.mean()","602453e0":"X_train[X_train.Pclass==2].Age.mean()","392d46ec":"X_train[X_train.Pclass==3].Age.mean()","9eb1fcac":"def impute(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    if(pd.isnull(Age)):\n        if Pclass==1:\n            return 38\n        elif Pclass==2:\n            return 30\n        else:\n            return 25\n    return Age","00ffd08e":"X_train.Age = X_train[['Age','Pclass']].apply(impute,axis=1)\nX_test.Age = X_test[['Age','Pclass']].apply(impute,axis=1)","add01a31":"X_test[X_test.Fare.isnull()]","2aab4dca":"X_train[(X_train.Sex=='male')&(X_train.Pclass==3)].Fare.mean()","ab5adb84":"X_test['Fare']=X_test['Fare'].fillna(13)","9e8e0fde":"sns.heatmap(X_train.isnull(),cbar=False)","2790f0c1":"sns.heatmap(X_test.isnull(),cbar=False)","06609eb4":"X_train = X_train.drop(['Survived'],axis=1)","7cc7c714":"X_test.groupby('Sex').Sex.count()","a8986844":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder , LabelEncoder","6e74642c":"le =LabelEncoder()\nX_train['Sex']=le.fit_transform(X_train['Sex'])\nX_test['Sex'] = le.fit_transform(X_test['Sex'])\nX_train.head()","7daa14a9":"onh = OneHotEncoder(handle_unknown='ignore', sparse=False)\nX_train_trans = pd.DataFrame(onh.fit_transform(X_train[['Embarked']]))\nX_test_trans = pd.DataFrame(onh.fit_transform(X_test[['Embarked']]))\nX_train_trans.index = X_train.index\nX_test_trans.index = X_test.index\nX_train_conc = X_train.drop(['Embarked'],axis=1)\nX_test_conc = X_test.drop(['Embarked'],axis=1)\nX_train_final = pd.concat([X_train_conc,X_train_trans],axis=1)\nX_test_final = pd.concat([X_test_conc,X_test_trans],axis=1)","b50da646":"X_train_final.head()","9e743930":"X_test_final.head()","d95e8472":"X_train_final.info()","12ed4a16":"X_test_final.info()","45dee0de":"from sklearn.preprocessing import StandardScaler\nsc= StandardScaler()\nX_train_final = sc.fit_transform(X_train_final)\nX_test_final = sc.transform(X_test_final)","6a15ec03":"from sklearn.svm import SVC\nclf = SVC(kernel='rbf', degree = 5)\nclf.fit(X_train_final,y)","dcd24632":"pred = clf.predict(X_test_final)\noutput = pd.DataFrame({'PassengerId':data_test.PassengerId,'Survived':pred})\noutput.to_csv('submission.csv',index=False)","41b579aa":"output","96fb7795":"* Cabin: most no. of missing values\n* Age: A few missing values can be imputed\n* Embarked has 2 and Fare has 1 missing value","7862103d":"## Survival by Age","e532aa5b":"## Submitted with top 20% performance can be tuned to perform more better","c84afef9":"Clearly showing that Female with rs 80 fare will be S embarked ","612cd13a":"* More children were priorotized to be saved\n* For ages > 20 chances for survival were more or less the sam 40%","eea41edd":"## A whole report in one line..","8a7e1456":"* Most were 3rd class passengers\n* only 38.38% survived\n* Most people were without family","3e617559":"Full black, means all missing values are handled","339dec24":"## Feature Scaling","d190bc7e":"1. Let's drop the name and ticket columns, they're irrelevant and we dont need'em much!!","3f45177a":"# Featue Engineering","254a9840":"## Effect of various features on Survival\n","578211a9":"Seems like people from CHEROBOURG had luck in their favour, half of em were saved","080f10ae":"cabin is missing more than half of times, its better to drop it instead of imputing it with other values","10d9d4c5":"# Model Prediction","0c2830ec":"Females and children are usually oreffered during rescue, thats clearly visible","e4275bd0":"## Categorical Feature Encoding","bf07465d":"1st class was preffered to be saved","9db1306b":"Let's now check for missing values","5a46e9dd":"# Exploratory Data Analysis\n","a2b1b0d7":"# If found informative, upvote and give feedback, Thanks and Keep coding"}}