{"cell_type":{"965c3121":"code","eeb5278c":"code","7871c4a6":"code","77b7a5e9":"code","f9ee57a4":"code","5503f8c2":"code","14baff77":"code","0aac96da":"code","03fdce70":"code","2ab4bcf7":"code","609fcbd9":"code","6e59ba94":"code","98f60f33":"code","a17e9c40":"code","a9b2ee0d":"code","63515876":"code","f83b5439":"code","02caaeac":"code","03b43b2a":"code","657da3fd":"code","cd3f5d27":"code","a5c7eb6f":"code","6a86b92f":"code","250941f2":"code","f528c4af":"code","7bcf1b3d":"code","1c7b9cfe":"code","796714e6":"code","9587b411":"code","18264770":"code","cfa577aa":"code","86f31f25":"code","1c69431e":"code","c2c62d45":"code","75756a4d":"code","f1f80994":"markdown","d3195d31":"markdown","53b29009":"markdown","65c783b2":"markdown","aa87c8a9":"markdown","abfb3fad":"markdown","b1c7457b":"markdown","df0a8baa":"markdown","c1b55ad7":"markdown","e60be0ed":"markdown"},"source":{"965c3121":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eeb5278c":"import pandas as pd\ndocs = pd.read_table('..\/input\/sms-data-labelled-spam-and-non-spam\/SMSSpamCollection', header=None, names=['Class', 'sms'])\ndocs.head()\n","7871c4a6":"docs.Class.value_counts()","77b7a5e9":"ham_spam=docs.Class.value_counts()\nham_spam","f9ee57a4":"print(\"Spam % is \",(ham_spam[1]\/float(ham_spam[0]+ham_spam[1]))*100)","5503f8c2":"docs['label'] = docs.Class.map({'ham':0, 'spam':1})","14baff77":"docs.head()","0aac96da":"X=docs.sms\ny=docs.label","03fdce70":"X = docs.sms\ny = docs.label\nprint(X.shape)\nprint(y.shape)","2ab4bcf7":"from sklearn.model_selection  import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)","609fcbd9":"X_train.head()","6e59ba94":"from sklearn.feature_extraction.text import CountVectorizer\n\nvect = CountVectorizer(stop_words='english')","98f60f33":"vect.fit(X_train)","a17e9c40":"vect.vocabulary_","a9b2ee0d":"vect.get_feature_names()","63515876":"X_train_transformed = vect.transform(X_train)\nX_test_tranformed =vect.transform(X_test)","f83b5439":"from sklearn.naive_bayes import BernoulliNB\n\nbnb = BernoulliNB()\n","02caaeac":"bnb.fit(X_train_transformed,y_train)\n","03b43b2a":"y_pred_class = bnb.predict(X_test_tranformed)\n","657da3fd":"y_pred_proba =bnb.predict_proba(X_test_tranformed)\n","cd3f5d27":"from sklearn import metrics\nmetrics.accuracy_score(y_test, y_pred_class)\n","a5c7eb6f":"bnb","6a86b92f":"metrics.confusion_matrix(y_test, y_pred_class)","250941f2":"confusion = metrics.confusion_matrix(y_test, y_pred_class)\nprint(confusion)\n#[row, column]\nTN = confusion[0, 0]\nFP = confusion[0, 1]\nFN = confusion[1, 0]\nTP = confusion[1, 1]","f528c4af":"sensitivity = TP \/ float(FN + TP)\nprint(\"sensitivity\",sensitivity)","7bcf1b3d":"specificity = TN \/ float(TN + FP)\n\nprint(\"specificity\",specificity)","1c7b9cfe":"precision = TP \/ float(TP + FP)\n\nprint(\"precision\",precision)\nprint(metrics.precision_score(y_test, y_pred_class))","796714e6":"print(\"precision\",precision)\nprint(\"PRECISION SCORE :\",metrics.precision_score(y_test, y_pred_class))\nprint(\"RECALL SCORE :\", metrics.recall_score(y_test, y_pred_class))\nprint(\"F1 SCORE :\",metrics.f1_score(y_test, y_pred_class))","9587b411":"y_pred_proba","18264770":"from sklearn.metrics import confusion_matrix as sk_confusion_matrix\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred_proba[:,1])\nroc_auc = auc(false_positive_rate, true_positive_rate)","cfa577aa":"print (roc_auc)","86f31f25":"print(true_positive_rate)","1c69431e":"print(false_positive_rate)","c2c62d45":"print(thresholds)","75756a4d":"%matplotlib inline  \nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.title('ROC')\nplt.plot(false_positive_rate, true_positive_rate)","f1f80994":"Predict class\n","d3195d31":"df.column_name.value_counts() - gives no. of unique inputs in that columns\n","53b29009":"Accuracy\n","65c783b2":" vectorising the text\n","aa87c8a9":"Predict probability\n","abfb3fad":"mapping labels to 1 and 0\n","b1c7457b":"splitting into test and train\n","df0a8baa":" transform\n","c1b55ad7":"Fit ","e60be0ed":"Instantiate bernoulli NB object\n"}}