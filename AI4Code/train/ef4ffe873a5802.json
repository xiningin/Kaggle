{"cell_type":{"99a02d7b":"code","b2c44349":"code","86e24a2d":"code","fc2e7202":"code","b341c924":"code","86504312":"code","cd312b33":"code","4c224ec0":"code","874322a3":"code","e230d5b0":"code","cacb53d8":"code","74d07a7e":"code","5c0a50dd":"code","f0ed60e4":"code","eecf4d14":"code","c5027435":"code","c877b7ed":"code","ea8a5091":"code","950d4862":"code","5b3372c9":"code","f2d17d7d":"code","fb3cb4ca":"code","147fec46":"code","2aadec03":"code","18ac6749":"code","081b4acf":"code","013c934e":"code","8adf2e37":"code","fe8e92bd":"code","d577bd23":"code","d6bc28d6":"code","5508af2d":"code","a29532c7":"code","1d5b4f60":"code","02096ab8":"code","dbaaf713":"code","ddbf9936":"code","a77c3f37":"code","840707ed":"code","ccb0c3e0":"code","0bd2d5a6":"code","179f529c":"code","c3ac002a":"code","cf81cb84":"code","766a5cb0":"code","ef3fd264":"code","2b4de2d8":"code","3b67755a":"code","c93dc81e":"code","9cf72159":"code","7970fe88":"code","16ab6497":"code","cf4c15fc":"code","a96e34d6":"code","14c77bdf":"code","135dce46":"code","e4f5ce4c":"code","39e568d1":"code","9e78281b":"code","a11c8fe8":"code","78f3603b":"code","8720f999":"code","9c12bb5d":"code","3a3008ec":"code","2ffacaee":"code","19a323a7":"code","a3b430d4":"code","d7e40739":"code","d0fe967b":"code","f562c189":"code","1f50d6bc":"code","2ddd25a1":"code","1e60bce4":"code","16d46056":"code","0ab56947":"code","d4b6e56b":"code","cb6e6b37":"code","55f8b79f":"code","e726c3a9":"code","e3b0c270":"code","0a871311":"code","79c4471e":"code","9cae4ea9":"code","5693ed61":"code","7f26e90d":"code","815f1ce4":"code","cb02fdf9":"code","22a50d7c":"code","e62d49e8":"code","fec206db":"code","c5e9c498":"code","c13e9049":"code","b141fb42":"code","fe16656c":"code","5a00f5c8":"code","5894e627":"code","5bf48232":"code","925dcf28":"code","8e57764d":"code","1f28246b":"code","ec1cde47":"code","d6686a26":"code","e01fb7c2":"code","cd021e9e":"code","ce3ae126":"markdown","f287b102":"markdown","035127c7":"markdown","ecf65ef2":"markdown","416f32cf":"markdown","9afc1e84":"markdown","bc398f9c":"markdown","a1677e17":"markdown","7a2d8fa5":"markdown","f3d51614":"markdown","861c3618":"markdown"},"source":{"99a02d7b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2c44349":"data=pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')","86e24a2d":"data.head() #show first 5 row of data","fc2e7202":"data.columns #show data column names","b341c924":"data.shape #show row and column counts","86504312":"data.info() #show some information about data like column names, data tyoes, non-null value counts...","cd312b33":"#frequency of country data\nprint(data[\"country\"].value_counts(dropna=False))\n#if there are non values, also show them ","4c224ec0":"data.describe() #ignore null values","874322a3":"data.boxplot(column='release_year',by='type')\nplt.show\n#black line at top is max\n#blue line at top is 75%\n#green line is median 50%\n#blue line at bottom is 25%\n#black line at bottom is min\n#circles are outliers..","e230d5b0":"new_data=data.head()","cacb53d8":"new_data","74d07a7e":"melted=pd.melt(frame=new_data,id_vars='title',value_vars=['type','duration'])","5c0a50dd":"melted","f0ed60e4":"melted.pivot(index='title',columns='variable',values='value')","eecf4d14":"data1=data.head()\ndata2=data.tail() #we'll concatenate these dataframes.","c5027435":"conc_data=pd.concat([data1,data2],axis=0,ignore_index=True)\n#concatenate data1 and data2 vertically","c877b7ed":"conc_data","ea8a5091":"d1=data['title'].head()\nd2=data['release_year'].head()","950d4862":"c_data=pd.concat([d1,d2],axis=1)\n#concatenate data1 and data2 horizontally","5b3372c9":"c_data","f2d17d7d":"data.dtypes","fb3cb4ca":"data['type'].unique()","147fec46":"data['type']=data['type'].astype('category')","2aadec03":"data.dtypes","18ac6749":"data.info()","081b4acf":"data.isnull().sum() #How many nulls are in which column","013c934e":"data[\"director\"].value_counts(dropna=False)\n#There are 1969 NaN (missing) values","8adf2e37":"data.dropna(subset=['director'],axis=0,inplace=True)\n#inplace=True means dont have to assign new variable","fe8e92bd":"#check with assert statement\nassert data[\"director\"].notnull().all() # if it's true, return nothing\n#if it's false, return error\n\n# assert 1=1 return nothing\n# assert 1=2 return error","d577bd23":"data","d6bc28d6":"data[\"cast\"].fillna('empty',inplace=True)","5508af2d":"#check with assert statement\nassert data[\"cast\"].notnull().all() # if it's true, return nothing\n#if it's false, return error\n\n# assert 1=1 return nothing\n# assert 1=2 return error","a29532c7":"data[\"cast\"].value_counts(dropna=False)\n#There isn't any NaN (missing) values","1d5b4f60":"Movie=[\"Automata\",\"Good People\"]\nDate=[1995,2015]\nlist_label=[\"Movie\",\"Date\"]\nlist_col=[Movie,Date]\nzipped=list(zip(list_label,list_col))\ndata_dict=dict(zipped)\ndf=pd.DataFrame(data_dict)\ndf","02096ab8":"df[\"director\"]=[\"henry\",\"chriss\"]\ndf[\"duration\"]=0 #broadcasting\ndf","dbaaf713":"data.head()","ddbf9936":"data1.describe()","a77c3f37":"data[\"int_duration\"]=data[\"duration\"].str.split(n=1,expand=True)[0]\n","840707ed":"data[\"int_duration\"]=data[\"int_duration\"].astype(int)","ccb0c3e0":"data1=data.loc[:,[\"release_year\",\"int_duration\"]]\ndata1.plot()","0bd2d5a6":"data1.plot(subplots=True)","179f529c":"data1.plot(kind=\"scatter\",x=\"release_year\",y=\"int_duration\")\nplt.show()","c3ac002a":"data1.plot(kind = \"hist\",y = \"release_year\",bins = 20,range= (1950,2040),density = True)","cf81cb84":"data1.plot(kind = \"hist\",y = \"release_year\",bins = 20,range= (1950,2040),density = True,cumulative=True)\n#density for normalized, cumulative to sum the previous ones\nplt.savefig('graph.png')","766a5cb0":"data1.describe()","ef3fd264":"data=data.reset_index(drop=True)\ndata.head()","2b4de2d8":"data[\"date_added\"]","3b67755a":"data[\"date_added\"].value_counts(dropna=True)","c93dc81e":"# we'll convert date_added column to yyyy-mm-dd format\ndata[\"Month\"]=data[\"date_added\"].str.split(n=1,expand=True)[0]","9cf72159":"data['Month']=[\"01\" if i==\"January\" else \"02\" if i==\"February\" else \"03\" if i==\"March\" else \"04\" if i==\"April\" else \"05\" if i==\"May\" else \"06\" if i==\"June\" else \"07\" if i==\"July\" else \"08\" if i==\"August\" else \"09\" if i==\"September\" else \"10\" if i==\"October\" else \"11\" if i==\"November\" else \"12\" if i==\"December\" else \"NaN\" for i in data['Month']]","7970fe88":"data['Month'].fillna(\"1\", inplace = True) \n","16ab6497":"data[\"days\"]=data[\"date_added\"].str.split(n=1,expand=True)[1].str.split(',',n=1,expand=True)[0]","cf4c15fc":"data[\"days\"].fillna(\"1\", inplace = True) ","a96e34d6":"data[\"year\"]=data[\"date_added\"].str.split(n=1,expand=True)[1].str.split(n=1,expand=True)[1]\ndata[\"year\"].fillna(\"2000\", inplace = True) ","14c77bdf":"data[\"date\"]=data[\"year\"]+\"-\"+data['Month']+\"-\"+data[\"days\"]","135dce46":"data[\"date\"]","e4f5ce4c":"del data[\"year\"]\ndel data[\"Month\"]\ndel data[\"days\"]","39e568d1":"#convert to datetime type\ndatetime_object=pd.to_datetime(data[\"date\"])\ndatetime_object","9e78281b":"dfm=data.copy()","a11c8fe8":"dfm[\"date\"]=datetime_object","78f3603b":"dfm=dfm.set_index(\"date\")  #time series\n","8720f999":"print(dfm.loc[\"2017-04-15\"])","9c12bb5d":"#if it was unique:\n#dfm.loc[\"2019-08-30\":\"2017-04-15\"]\n#but this is non-unique","3a3008ec":"#A=year, M =month\ndfm.resample(\"A\").mean()","2ffacaee":"dfm.resample(\"M\").mean()","19a323a7":"dfm.resample(\"M\").mean().interpolate(\"linear\")  #Fills intervals as linear between upper and lower value.","a3b430d4":"data","d7e40739":"#data[\"ind\"]=0\n#i=1\n#while i<4266: \n#    data[\"ind\"][i-1]=i \n#    i+=1\n    \ndata[\"ind\"]=range(1,4266,1)    ","d0fe967b":"data.head()","f562c189":"data=data.set_index('ind')","1f50d6bc":"data.head()","2ddd25a1":"data[\"title\"][1] #previous index was 0","1e60bce4":"data.title[1]","16d46056":"data.loc[1,\"director\"]","0ab56947":"data[[\"date\",\"title\"]]","d4b6e56b":"type(data[\"title\"]) #series","cb6e6b37":"type(data[[\"title\"]]) #data frame","55f8b79f":"data.loc[1:10,\"title\":\"cast\"]","e726c3a9":"data.loc[10:1:-1,\"title\":\"cast\"]","e3b0c270":"data.loc[10:1:-1,\"cast\":]","0a871311":"data[data[\"release_year\"]>2015]","79c4471e":"first=data[\"release_year\"]>2015 #first filter\nsecond=data[\"type\"]==\"TV Show\" #second fiter\n\ndata[first & second] #apply both","9cae4ea9":"data.title[data.director==\"Mariano Barroso\"]","5693ed61":"def inc(n):\n    return n+1\ndata.show_id.apply(inc) #we can use \"apply\" for functions in data frames","7f26e90d":"data.show_id.apply(lambda n: n+1)\n#data.show_id=...","815f1ce4":"# data[\"new_feature\"]=data.int_duration+data.release_year \n#we can create a new feature using other columns.","cb02fdf9":"print(data.index.name)","22a50d7c":"data.index.name=\"index\"","e62d49e8":"data.head()","fec206db":"d=data.copy()\nd.index=range(31,4296,1)\nd.head()","c5e9c498":"d=d.set_index([\"type\",\"rating\"])\nd.head(10)","c13e9049":"d.info()","b141fb42":"d1=data.copy()  \nd1=d1.loc[5:10,[\"release_year\",\"duration\",\"title\"]]\nd1.head()","fe16656c":"d1.pivot(index=\"duration\",columns=\"release_year\",values=\"title\")","5a00f5c8":"d2=data.copy()\nd2=d2.loc[60:145,[\"listed_in\",\"date\",\"title\"]]\nd2","5894e627":"d2 = d2.set_index([\"title\",\"listed_in\"])\n#d2 = d2.set_index([\"title\",\"listed_in\"], append=True)\nd2","5bf48232":"# level determines indexes\nd2.unstack(level=1) #if there are more than one index, this decrease it.","925dcf28":"d2=d2.swaplevel(0,1)","8e57764d":"d2","1f28246b":"data.head()","ec1cde47":"pd.melt(data,id_vars=\"title\",value_vars=[\"type\",\"date\"])","d6686a26":"data.groupby(\"type\").release_year.mean() ","e01fb7c2":"data.groupby(\"int_duration\").mean() \n#sum(),min(),max()..","cd021e9e":"data.groupby(\"type\")[[\"release_year\",\"int_duration\"]].min() ","ce3ae126":"**MISSING DATA AND TESTING WITH ASSERT**\n\nThere may be data whose some features are not defined. This is called missing value.\n\nThere are two important questions here.\n\n1) Doesn't this feature really exist?\n\n2) Is data missing?\n\nIn this case, there are some options we can do.\n\n* To continue with same data\n* Drop them (The dropna() function is used.)\n* Filling them as NaN (The fillna() function is used.)\n* Filling them with test statistics like mean.","f287b102":"**resample**\n\n* Resampling: statistical method over different time intervals\n* Downsampling: reduce date time rows to slower frequency like from daily to weekly\n* Upsampling: increase date time rows to faster frequency like from daily to hourly\n* Interpolate: Interpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019 ","035127c7":"**PIVOTING DATA** \n\nreverse of melting","ecf65ef2":"**TIDY DATA**","416f32cf":"**Visual Exploratory Data Analysis**","9afc1e84":"**Concatenating Data**\n\nwe can concatenate two different dataframes vertically or horizontally.","bc398f9c":"**DATA TYPES**\n\n* Object(string)\n* Integer\n* Float\n* Boolean\n* Categorical\n\nWe can convert these data types to each other under suitable conditions.","a1677e17":"**Indexing Pandas Time Series**","7a2d8fa5":"**Datetime \/ Time Series**","f3d51614":"**Indexing, Slicing, Filtering and Transforming Data Frames**","861c3618":"* Different way of create data frame:\n"}}