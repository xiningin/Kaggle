{"cell_type":{"0a15d8bc":"code","c2bb699d":"code","a2dd38f1":"code","c3126492":"code","3c338e91":"code","8edef636":"code","9fb365af":"code","abeb4e60":"code","e9bc4dd2":"code","462f0463":"code","97ef062f":"code","511d0cb2":"code","6ea04d57":"code","fed9cc5a":"code","b9946067":"code","492dec14":"code","ba5ee462":"code","d5a04103":"code","61ee14fa":"code","d82607cc":"code","3c340422":"code","70ac178e":"code","a14de11c":"code","fa4b533e":"code","3dd9e989":"markdown","4aaa12bb":"markdown"},"source":{"0a15d8bc":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns","c2bb699d":"train_data = pd.read_csv('..\/input\/human-activity-recognition-with-smartphones\/train.csv')\ntest_data = pd.read_csv('..\/input\/human-activity-recognition-with-smartphones\/test.csv')","a2dd38f1":"train_data.head()","c3126492":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\ncolumns = train_data.columns\n\n## Removing ()\n\ncolumns = columns.str.replace('[()]','')\ncolumns = columns.str.replace('[-]','')\ncolumns = columns.str.replace('[,]','')\n\ntrain_data.columns = columns\ntest_data.columns = columns","3c338e91":"train_data.head()","8edef636":"test_data.head()","9fb365af":"train_data.shape","abeb4e60":"test_data.shape","e9bc4dd2":"train_data.columns","462f0463":"train_data.describe()","97ef062f":"train_data['Activity'].value_counts()","511d0cb2":"print(\"Total Duplicates in Train: {} \\n\".format(sum(train_data.duplicated())))\nprint(\"Total Duplicates in Test: {} \\n\".format(sum(test_data.duplicated())))","6ea04d57":"print(\"Total Null values in Train: {}\\n\".format(train_data.isnull().values.sum()))\nprint(\"Total Null values in Test: {} \\n\".format(test_data.isnull().values.sum()))","fed9cc5a":"plt.figure(figsize = (12,8))\nsns.countplot(x = 'Activity', data = train_data);","b9946067":"y_train = train_data.Activity\nX_train = train_data.drop(['subject','Activity'], axis = 1)\ny_test = test_data.Activity\nX_test = test_data.drop(['subject','Activity'], axis = 1)\nprint('Training data size:', X_train.shape)\nprint('Test data size:', X_test.shape)","492dec14":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny_train = le.fit_transform(y_train)\ny_test = le.fit_transform(y_test)","ba5ee462":"from sklearn.preprocessing import MinMaxScaler\n\nscaling_data = MinMaxScaler()\nX_train = scaling_data.fit_transform(X_train)\nX_test = scaling_data.transform(X_test)","d5a04103":"from tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout","61ee14fa":"model = Sequential()\nmodel.add(Dense(units=64,kernel_initializer='normal',activation='sigmoid',input_dim=X_train.shape[1]))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units=6,kernel_initializer='normal',activation='softmax'))\nmodel.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])\nhistory = model.fit(X_train, y_train, batch_size = 64, epochs= 10,validation_data = (X_test,y_test))","d82607cc":"model = Sequential()\nmodel.add(Dense(units=64,kernel_initializer='normal',activation='sigmoid',input_dim=X_train.shape[1]))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units=6,kernel_initializer='normal',activation='softmax'))\nmodel.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])\nhistory = model.fit(X_train, y_train, batch_size = 64, epochs= 10,validation_data = (X_test,y_test))","3c340422":"model = Sequential()\nmodel.add(Dense(units=64,kernel_initializer='normal',activation='sigmoid',input_dim=X_train.shape[1]))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units=6,kernel_initializer='normal',activation='softmax'))\nmodel.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])\nhistory = model.fit(X_train, y_train, batch_size = 64, epochs= 10,validation_data = (X_test,y_test))","70ac178e":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nrf_classifier = RandomForestClassifier()\nrf_classifier.fit(X_train, y_train)\ny_pred = rf_classifier.predict(X_test)\n\nrf_accuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy using Random Forest:\", rf_accuracy)","a14de11c":"rf_classifier = RandomForestClassifier()\nrf_classifier.fit(X_train, y_train)\ny_pred = rf_classifier.predict(X_test)\n\nrf_accuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy using Random Forest:\", rf_accuracy)","fa4b533e":"rf_classifier = RandomForestClassifier()\nrf_classifier.fit(X_train, y_train)\ny_pred = rf_classifier.predict(X_test)\n\nrf_accuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy using Random Forest:\", rf_accuracy)","3dd9e989":"We can see, some () 'bracket' between the feature's name. We will remove all these brackets quickly. So it's easier for us to type correctly later.","4aaa12bb":"# Splitting training and testing"}}