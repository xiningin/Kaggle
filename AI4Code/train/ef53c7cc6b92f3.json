{"cell_type":{"a2cf9b5b":"code","b8ddce43":"code","571018b3":"code","defe4e78":"code","029b85f4":"code","393cf136":"code","9b31e535":"code","672d7d38":"code","4deb8be0":"code","813c777c":"code","f52222d5":"code","dd8b4565":"code","fb19cb3a":"code","dedee55e":"code","885f96ec":"code","318d6db9":"code","cf7fb22b":"code","80465902":"code","23100af0":"code","1aceca92":"code","7112cd10":"code","1cc0d63a":"code","a42f8146":"code","af2ef6fe":"markdown"},"source":{"a2cf9b5b":"import os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport shutil\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","b8ddce43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","571018b3":"# dict_labels={}\nlabel_csv = pd.read_csv(\"\/kaggle\/input\/dog-breed-identification\/labels.csv\")","defe4e78":"X = label_csv.iloc[:, 0].values\nY = label_csv.iloc[:, 1].values","029b85f4":"#____________________________________--","393cf136":"breeds = list(sorted(set(Y)))\nos.mkdir(\"\/kaggle\/working\/training\/\")\nfor i in breeds:\n    os.mkdir(\"\/kaggle\/working\/training\/\" + i)","9b31e535":"label_paths = label_csv.assign(img_path = lambda x: \"\/kaggle\/input\/dog-breed-identification\/train\/\" + x[\"id\"] + \".jpg\")\nfor i in range(10222):\n    shutil.copyfile(label_paths['img_path'][i], \"\/kaggle\/working\/training\/\" + label_paths['breed'][i] + \"\/\" + label_paths['id'][i] + \".jpg\")\n","672d7d38":"from tensorflow.keras.applications.inception_v3 import InceptionV3\npre_trained_model = InceptionV3(input_shape = (150,150, 3), include_top = False, weights = 'imagenet')\nfor layer in pre_trained_model.layers:\n    layer.trainable = False\npre_trained_model.summary()","4deb8be0":"last_layer = pre_trained_model.get_layer('mixed7')\nlast_output = last_layer.output\nprint(last_output)","813c777c":"class mcb(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if logs['acc']>0.99:\n            print(\"\\nReached 99% accuracy\\n\")\n            self.model.stop_training = True\ncallbacks = mcb()","f52222d5":"from tensorflow import keras\nimport tensorflow as tf\nx = tf.keras.layers.Flatten()(last_output)\nx = tf.keras.layers.Dense(1024, activation = 'relu')(x)\nx = tf.keras.layers.Dense(120, activation = 'softmax')(x)\nmodel = tf.keras.Model(pre_trained_model.input, x)\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['acc'])","dd8b4565":"model.summary()","fb19cb3a":"#_______________________________","dedee55e":"print(tf.version)","885f96ec":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(\n    rescale =1.0\/ 255.0\n)\ntrain_generator = train_datagen.flow_from_directory(\n    \"\/kaggle\/working\/training\",\n    target_size = (150,150),\n    batch_size = 19,\n    class_mode = 'categorical'\n)\ntest_datagen = ImageDataGenerator(\n    rescale = 1.0\/ 255.0\n)\nfmodelt = model.fit_generator(train_generator, epochs =10, steps_per_epoch = len(train_generator), callbacks = [callbacks])","318d6db9":"%matplotlib inline\nimport matplotlib.image  as mpimg\nimport matplotlib.pyplot as plt\nacc = fmodelt.history['acc']\nloss = fmodelt.history['loss']\nepochs = range(len(acc))\nplt.plot(epochs,acc, 'r', label = \"Training_accuracy\")\nplt.legend(loc = \"lower right\")\nplt.figure()\nplt.plot(epochs, loss, 'b', label = \"Training_loss\")\nplt.title(\"Training accuracy and loss\")\nplt.legend(loc=0)","cf7fb22b":"os.mkdir(\"\/kaggle\/working\/testing\/\")\nos.mkdir(\"\/kaggle\/working\/testing\/test\")\nfor i in os.listdir(\"\/kaggle\/input\/dog-breed-identification\/test\/\"):\n    shutil.copyfile(\"\/kaggle\/input\/dog-breed-identification\/test\/\" + i, \"\/kaggle\/working\/testing\/test\/\"+ i)","80465902":"test_datagen = ImageDataGenerator(rescale = 1.0\/ 255.0)\ntest_generator = test_datagen.flow_from_directory(\n    \"\/kaggle\/working\/testing\/\",\n    target_size = (150,150),\n    class_mode = 'categorical',\n    shuffle=False\n)\npreds = model.predict(test_generator, verbose=1)","23100af0":"preds[0].round(3)","1aceca92":"ids=[]\nfor i in os.listdir(\"\/kaggle\/working\/testing\/test\/\"):\n    ids.append(i[:-4])","7112cd10":"sol = pd.DataFrame(preds.round(4))\nsol.columns = breeds","1cc0d63a":"sol.insert(0, 'id', ids)","a42f8146":"sol.to_csv(\"Dog_breed_classifier.csv\", index=False)","af2ef6fe":"**First we organise the labels**"}}