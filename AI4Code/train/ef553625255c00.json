{"cell_type":{"3c199076":"code","6fc5c820":"code","7d6a9db8":"code","5ef029b4":"code","756bd9d5":"code","ef6d37a0":"code","23565be7":"code","aa9e4196":"code","8e1b2b29":"code","81d60a7d":"code","bfb9714d":"code","a1fd7a41":"code","376e7c76":"code","b29632b6":"code","ce2af2af":"code","31831bf9":"code","fa91ee48":"code","c1940fe2":"code","800a167c":"code","1127eaeb":"code","89b396a9":"code","8518a0e3":"code","af82cd69":"code","4f32fcba":"code","da4fd3a4":"code","8126afba":"code","e400d9e8":"code","58f72590":"markdown","71981e5c":"markdown","55145ad1":"markdown","55553f04":"markdown","c3691382":"markdown","4d1b146d":"markdown","17b1afc1":"markdown","057d69ed":"markdown","13d4ef28":"markdown","78b0b4a2":"markdown","629146f1":"markdown","c2ad5e68":"markdown","19755ade":"markdown","4283577e":"markdown","e954e6cd":"markdown","d6e059a2":"markdown","48173bf9":"markdown","32d70529":"markdown","8d874f9c":"markdown"},"source":{"3c199076":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt","6fc5c820":"dataset=pd.read_csv('..\/input\/train.csv')\ntestset=pd.read_csv('..\/input\/test.csv')","7d6a9db8":"dataset.columns","5ef029b4":"dataset.head()","756bd9d5":"print(dataset.dtypes)","ef6d37a0":"print(dataset.describe())","23565be7":"Survived_m = dataset.Survived[dataset.Sex == 'male'].value_counts()\nSurvived_f = dataset.Survived[dataset.Sex == 'female'].value_counts()\n\ndf=pd.DataFrame({'male':Survived_m, 'female':Survived_f})\ndf.plot(kind='bar', stacked=True)\nplt.title(\"survived by sex\")\nplt.xlabel(\"survived\") \nplt.ylabel(\"count\")\nplt.show()","aa9e4196":"dataset['Age'].hist()  \nplt.ylabel(\"Number\") \nplt.xlabel(\"Age\") \nplt.title('Age distribution')\nplt.show() \n\ndataset[dataset.Survived==0]['Age'].hist()  \nplt.ylabel(\"Number\") \nplt.xlabel(\"Age\") \nplt.title('Age distribution of people who did not survive')\nplt.show()\n\ndataset[dataset.Survived==1]['Age'].hist()  \nplt.ylabel(\"Number\") \nplt.xlabel(\"Age\") \nplt.title('Age distribution of people who survived')\nplt.show()","8e1b2b29":"dataset['Fare'].hist()  \nplt.ylabel(\"Number\") \nplt.xlabel(\"Fare\") \nplt.title('Fare distribution')\nplt.show() \n\ndataset[dataset.Survived==0]['Fare'].hist()  \nplt.ylabel(\"Number\") \nplt.xlabel(\"Fare\") \nplt.title('Fare distribution of people who did not survive')\nplt.show()\n\ndataset[dataset.Survived==1]['Fare'].hist()  \nplt.ylabel(\"Number\") \nplt.xlabel(\"Fare\") \nplt.title('Fare distribution of people who survived')\nplt.show()","81d60a7d":"dataset['Pclass'].hist()  \nplt.show()  \nprint(dataset['Pclass'].isnull().values.any())","bfb9714d":"Survived_p1 = dataset.Survived[dataset['Pclass'] == 1].value_counts()\nSurvived_p2 = dataset.Survived[dataset['Pclass'] == 2].value_counts()\nSurvived_p3 = dataset.Survived[dataset['Pclass'] == 3].value_counts()\n\ndf=pd.DataFrame({'p1':Survived_p1, 'p2':Survived_p2, 'p3':Survived_p3})\nprint(df)","a1fd7a41":"df.plot(kind='bar', stacked=True)\nplt.title(\"survived by pclass\")\nplt.xlabel(\"pclass\") \nplt.ylabel(\"count\")\nplt.show()","376e7c76":"Survived_S = dataset.Survived[dataset['Embarked'] == 'S'].value_counts()\nSurvived_C = dataset.Survived[dataset['Embarked'] == 'C'].value_counts()\nSurvived_Q = dataset.Survived[dataset['Embarked'] == 'Q'].value_counts()\ndf = pd.DataFrame({'S':Survived_S, 'C':Survived_C, 'Q':Survived_Q})\nprint(df)","b29632b6":"\ndf.plot(kind='bar', stacked=True)\nplt.title(\"Survived by Embarked\")\nplt.xlabel(\"Survival\") \nplt.ylabel(\"count\")\nplt.show()","ce2af2af":"label=dataset.loc[:,'Survived']\ndata=dataset.loc[:,['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]\ntestdat=testset.loc[:,['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]\n\nprint(data.shape)","31831bf9":"def fill_NAN(data):  \n    data_copy = data.copy(deep=True)\n    data_copy.loc[:,'Age'] = data_copy['Age'].fillna(data_copy['Age'].median())\n    data_copy.loc[:,'Fare'] = data_copy['Fare'].fillna(data_copy['Fare'].median())\n    data_copy.loc[:,'Pclass'] = data_copy['Pclass'].fillna(data_copy['Pclass'].median())\n    data_copy.loc[:,'Sex'] = data_copy['Sex'].fillna('female')\n    data_copy.loc[:,'Embarked'] = data_copy['Embarked'].fillna('S')\n    return data_copy\n\n\ndata_no_nan = fill_NAN(data)\ntestdat_no_nan = fill_NAN(testdat)","fa91ee48":"print(testdat.isnull().values.any())    \nprint(testdat_no_nan.isnull().values.any())\nprint(data.isnull().values.any())   \nprint(data_no_nan.isnull().values.any())    \n\n#print(data_no_nan)","c1940fe2":"print(data_no_nan['Sex'].isnull().values.any())","800a167c":"def transfer_sex(data):\n    data_copy = data.copy(deep=True)\n    data_copy.loc[data_copy['Sex'] == 'female', 'Sex'] = 0\n    data_copy.loc[data_copy['Sex'] == 'male', 'Sex'] = 1\n    return data_copy\n\ndata_after_sex = transfer_sex(data_no_nan)\ntestdat_after_sex = transfer_sex(testdat_no_nan)\n# print(testdat_after_sex)","1127eaeb":"def transfer_embark(data):\n    data_copy = data.copy(deep=True)\n    data_copy.loc[data_copy['Embarked'] == 'S', 'Embarked'] = 0\n    data_copy.loc[data_copy['Embarked'] == 'C', 'Embarked'] = 1\n    data_copy.loc[data_copy['Embarked'] == 'Q', 'Embarked'] = 2\n    return data_copy\n\ndata_after_embarked = transfer_embark(data_after_sex)\ntestdat_after_embarked = transfer_embark(testdat_after_sex)\n# print(testdat_after_embarked)","89b396a9":"data_now = data_after_embarked\ntestdat_now = testdat_after_embarked\nfrom sklearn.model_selection import train_test_split\n\n\ntrain_data,val_data,train_labels,val_labels=train_test_split(data_now,label,random_state=0,test_size=0.2)\nprint(train_data.shape, val_data.shape, train_labels.shape, val_labels.shape)","8518a0e3":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, classification_report\nk_range = range(1, 51)\nk_scores = []\nfor K in k_range:\n    clf=KNeighborsClassifier(n_neighbors = K)\n    clf.fit(train_data,train_labels)\n    print('K =', K)\n    predictions=clf.predict(val_data)\n    score = accuracy_score(val_labels, predictions)\n    print('Accuracy:', score)\n    k_scores.append(score)","af82cd69":"plt.plot(k_range, k_scores)\nplt.xlabel('K for KNN')\nplt.ylabel('Accuracy on validation set')\nplt.show()\nprint(np.array(k_scores).argsort())","4f32fcba":"# \u9884\u6d4b\n# k=33 (arg was 32) was the best\nclf = KNeighborsClassifier(n_neighbors=33)\nclf.fit(data_now,label)\nresult = clf.predict(testdat_now)","da4fd3a4":"# print(result)","8126afba":"# \u68c0\u6d4b\u6a21\u578bprecision\uff0c recall \u7b49\u5404\u9879\u6307\u6807\nfrom sklearn.metrics import accuracy_score, classification_report\nclf=KNeighborsClassifier(n_neighbors = 33)\nclf.fit(train_data,train_labels)\nprint('K =', 33)\npredictions=clf.predict(val_data)\nscore = accuracy_score(val_labels, predictions)\nprint('Accuracy:', score)\nprint(classification_report(val_labels, predictions))\nk_scores.append(score)","e400d9e8":"df = pd.DataFrame({\"PassengerId\": testset['PassengerId'],\"Survived\": result})\ndf.to_csv('submission.csv',header=True, index=False)","58f72590":"0, PassengerId\uff1a\u4e58\u5ba2\u7684\u6570\u5b57id\n\n1, Survived\uff1a\u5e78\u5b58(1)\u3001\u6b7b\u4ea1(0)\n\n2, Pclass\uff1a\u4e58\u5ba2\u8239\u5c42\u20141st = Upper\uff0c2nd = Middle\uff0c 3rd = Lower\n\n3, Name\uff1a\u540d\u5b57\u3002\n\n4, Sex\uff1a\u6027\u522b\n\n5, Age\uff1a\u5e74\u9f84\n\n6, SibSp\uff1a\u5144\u5f1f\u59d0\u59b9\u548c\u914d\u5076\u7684\u6570\u91cf\u3002\n\n7, Parch\uff1a\u7236\u6bcd\u548c\u5b69\u5b50\u7684\u6570\u91cf\u3002\n\n8, Ticket\uff1a\u8239\u7968\u53f7\u7801\u3002\n\n9, Fare\uff1a\u8239\u7968\u4ef7\u94b1\u3002\n\n10, Cabin\uff1a\u8239\u8231\u3002\n\n11, Embarked\uff1a\u4ece\u54ea\u4e2a\u5730\u65b9\u767b\u4e0a\u6cf0\u5766\u5c3c\u514b\u53f7\u3002 C = Cherbourg, Q = Queenstown, S = Southampton","71981e5c":"# \u4fdd\u7559\u4e0b\u6709\u6548\u6570\u636e\npclass, sex, age, fare, embarked","55145ad1":"\u5904\u7406Embarked","55553f04":"\u52a0\u5165numpy, pandas, matplot\u7b49\u5e93","c3691382":"\u5229\u7528KNN\u8bad\u7ec3\u6570\u636e","4d1b146d":"\u89c2\u5bdf\u4e58\u5ba2\u8231\u5c42","17b1afc1":"\u770b\u770b\u5e74\u9f84","057d69ed":"# \u5206\u79bblabel \u548c \u8bad\u7ec3\u6570\u636e","13d4ef28":"\u6253\u5370\u8f93\u51fa","78b0b4a2":"# \u4ed4\u7ec6\u89c2\u5bdf\u6570\u636e","629146f1":"# Titanic\nhttps:\/\/www.kaggle.com\/c\/titanic","c2ad5e68":"\u5904\u7406Sex ","19755ade":"\u5904\u7406\u7a7a\u6570\u636e","4283577e":"# \u67e5\u770b\u8bfb\u5165\u6570\u636e","e954e6cd":"\u8bfb\u5165\u6570\u636e","d6e059a2":"\u89c2\u5bdf\u767b\u8239\u5730\u70b9","48173bf9":"> **\u89c2\u5bdf\u6027\u522b","32d70529":"\u4ece\u4e0a\u9762\u6570\u636e\u53d1\u73b0\u4e24\u4e2a\u6709\u610f\u601d\u7684\u4e8b\u60c5\n\n1. \u6570\u636e\u6709NULL\u5143\u7d20\n2. \u6570\u636e","8d874f9c":"\u770b\u770b\u8239\u7968\u4ef7\u94b1"}}