{"cell_type":{"ef1a848a":"code","5691b23b":"code","f13fa8cc":"code","a4c0b15f":"code","948644dc":"code","47ed3ad9":"code","ce5baefd":"code","cb8a608c":"code","0d906137":"code","48efeeeb":"code","359c8b0b":"code","8a86a3a0":"code","47099c43":"markdown","da61209c":"markdown","12812328":"markdown","38d08fc9":"markdown"},"source":{"ef1a848a":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import log_loss, accuracy_score, confusion_matrix\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support, confusion_matrix # \u56de\u5e30\u554f\u984c\u306b\u304a\u3051\u308b\u6027\u80fd\u8a55\u4fa1\u306b\u95a2\u3059\u308b\u95a2\u6570\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.model_selection import KFold \nfrom sklearn.metrics import mean_absolute_error\nimport seaborn  as sns\n\n\n# \u30c7\u30fc\u30bf\u306e\u8aad\u8fbc\ncf_data = pd.read_csv(\"..\/input\/skillup_ai\/ks-projects-201801.csv\", encoding=\"cp932\")\n\n#\u30c7\u30fc\u30bf\u306e\u5927\u304d\u3055\u3068\u9805\u76ee\u3092\u78ba\u8a8d\nprint(cf_data.shape)\nprint(cf_data.columns)\n\n# \u30c7\u30fc\u30bf\u306e\u8868\u793a\nprint(cf_data)\ncf_data.head(50)\ncf_data.describe()","5691b23b":"#\u4e0d\u8981\u306a\u30c7\u30fc\u30bf\u3092\u524a\u9664\ncf_data_rem = ['goal', 'pledged', 'usd pledged', 'usd_pledged_real', 'ID', 'name', 'category', 'backers', 'country', 'Unnamed: 15', 'Unnamed: 16']\ndata_exp = cf_data.drop(cf_data_rem, axis = 1)\ndata_exp.head()","f13fa8cc":"# dead_line \u304b\u3089 launched \u3092\u5dee\u3057\u5f15\u304d\u3057\uff0cperiod \u3092\u5c0e\u51fa  \ndata_exp['launched'] = pd.to_datetime(data_exp['launched'], errors = 'coerce') #\u30a8\u30e9\u30fc\u5024\u306fNaN\u306b\u5909\u63db\ndata_exp['deadline'] = pd.to_datetime(data_exp['deadline'], errors = 'coerce') #\u30a8\u30e9\u30fc\u5024\u306fNaN\u306b\u5909\u63db\ndata_exp['period'] = (data_exp['deadline'] - data_exp['launched']).dt.days\n\n# deadline\u3068launched\u3092\u524a\u9664\ndata_exp = data_exp.drop(['deadline', 'launched'], axis=1)\ndata_exp.head()","a4c0b15f":"# \u6b20\u640d\u5024\uff08NULL\uff09\u306e\u78ba\u8a8d\nprint(data_exp.isnull().any())\nprint(data_exp.isnull().sum(axis=0))\n# \u5404\u5217\u306e\u7d71\u8a08\u91cf\uff08\u5e73\u5747\uff0c\u6a19\u6e96\u504f\u5dee\u306a\u3069\uff09\u306e\u8981\u7d04\u3092\u53d6\u5f97\ndisplay(data_exp.describe)","948644dc":"states = data_exp[\"state\"].unique()\ncategories = data_exp[\"main_category\"].unique()\nnum_cat = len(categories)\nprint(states)\nprint(categories)\nprint(num_cat, \"main_categoies\")","47ed3ad9":"# Success \u3068 Failed \u306e\u62bd\u51fa\ndata_exp = data_exp[(data_exp['state'] == 'successful') | (data_exp['state'] == 'failed')]\ndisplay(data_exp)\ndata_exp.describe(include='all')","ce5baefd":"#usd_goal_real\u306e\u78ba\u8a8d\nsns.distplot(data_exp['usd_goal_real']);","cb8a608c":"#usd_goal_real\u306b\u3042\u308b\u7a0b\u5ea6\u5e45\u304c\u898b\u3089\u308c\u305f\u305f\u3081\u3001\u5bfe\u6570\u3092\u3068\u308b\ndata_exp['usd_goal_real'] = np.log(data_exp['usd_goal_real'] )\nsns.distplot(data_exp['usd_goal_real']);","0d906137":"# One-Hot\u30d9\u30af\u30c8\u30eb\u5316\ncat_onehot = pd.get_dummies(data_exp['main_category'])\ndata_exp = pd.concat([data_exp.drop(['main_category'], axis=1), cat_onehot], axis=1)\ncur_onehot = pd.get_dummies(data_exp['currency'])\ndata_exp = pd.concat([data_exp.drop(['currency'], axis=1), cur_onehot], axis=1)\nprint(data_exp.shape)\n# \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\uff08\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u309220%\uff09\ny = data_exp['state'].map({'failed' : 0, 'successful' : 1})\nx = data_exp.drop('state', axis=1)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)\ndisplay(x_train.describe())\ndisplay(x_test.describe())\ndisplay(y_train.describe())\ndisplay(y_test.describe())","48efeeeb":"# \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30, \u5b66\u7fd2\uff0c\u7d50\u679c\u3092\u4e88\u6e2c\u3059\u308b\nimport matplotlib.pyplot as plt\n\nlinerR_data_exp = LogisticRegression()\nlinerR_data_exp.fit(x_train, y_train)\ny_esti = linerR_data_exp.predict(x_test)\nplt.hist(y_esti)\n","359c8b0b":"#split = 6\n#split_num = 1\n\n#result_df = pd.DataFrame( columns=['\u6b63\u7b54\u7387\uff08Accuracy\uff09','\u9069\u5408\u7387\uff08Precision\uff09','\u518d\u73fe\u7387\uff08Recall\uff09','F1\u5024\uff08F1-score\uff09'] )\n\n# \u30c6\u30b9\u30c8\u5f79\u3092\u4ea4\u4ee3\u3055\u305b\u306a\u304c\u3089\u5b66\u7fd2\u3068\u8a55\u4fa1\u3092\u7e70\u308a\u8fd4\u3059\n#for train_idx, test_idx in KFold(n_splits=split, shuffle=True, random_state=1234).split(X, y):\n #   X_train, y_train = x_train[train_idx], y_train[train_idx] #\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\n #  X_test, y_test = x_test[test_idx], y_test[test_idx]     #\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\n    \n    # \u5b66\u7fd2\u306e\u5b9f\u884c\n #   clf = SGDClassifier(loss='log', penalty='none', max_iter=10000, fit_intercept=True,tol=1e-3)\n #   clf_std = clf.fit(X_train, y_train)\n #   y_pred_test = clf_std.predict(X_test)\n    \n    # \u7d50\u679c\u306e\u8a08\u7b97\u3001\u84c4\u7a4d\n #   accuracy = accuracy_score(y_test, y_pred_test) # \u6b63\u7b54\u7387\n #  precision, recall, f1_score, _ = precision_recall_fscore_support(y_test, y_pred_test) # \u9069\u5408\u7387\u30fb\u518d\u73fe\u7387\u30fbF1\u5024\n #  tmp_se = pd.Series( [100 * accuracy, 100 * precision[1], 100 * recall[1], 100 * f1_score[1]], index=result_df.columns )\n #  result_df = result_df.append( tmp_se, ignore_index=True )\n\n# \u7d50\u679c\u306e\u8868\u793a\n#result_df2 = pd.concat([result_df,pd.DataFrame(result_df.mean(axis=0),columns=['\u5e73\u5747']).T])\n#result_df2.head(100)","8a86a3a0":"# \u6b63\u89e3\u7387\uff0c\u9069\u5408\u7387\uff0c\u518d\u73fe\u7387\u3092\u8868\u793a\nprint(\"\u6b63\u89e3\u7387 =  :{:.2}\".format(accuracy_score(y_test, y_esti)))\nprint(\"\u9069\u5408\u7387 =  {:.2}\".format(precision_score(y_test, y_esti)))\nprint(\"\u518d\u73fe\u7387 =  {:.2}\".format(recall_score(y_test, y_esti)))\nprint(\"F1\u5024 =  {:.2}\".format(f1_score(y_test, y_esti)))","47099c43":"### Preprocessing  \n#### \u30c7\u30fc\u30bf\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\uff0c\u30af\u30ec\u30f3\u30b8\u30f3\u30b0\uff0c\u5909\u6570\u306e\u6574\u7406\uff0c","da61209c":"# DAY3 \u30e1\u30e2  \n### \u8ab2\u984c Feedback  \n#### \u30b3\u30e1\u30f3\u30c8\nn[3]\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5b9f\u65bd\u65e5\u6570\u3092\u5c0e\u51fa\u3055\u308c\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u65e5\u4ed8\u3092datetime\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5229\u7528\u3057\u3066\u5909\u63db\u3055\u308c\u308b\u306e\u304c\u4e00\u756a\u624b\u3063\u53d6\u308a\u65e9\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u307e\u305f\u3001nan\u306e\u542b\u307e\u308c\u305f\u30b3\u30e9\u30e0\u304c\u3042\u308b\u5834\u5408\u306e\u51e6\u7406\u3092\u540c\u30bb\u30eb\u3067\u884c\u308f\u308c\u308b\u3068\u3001\u305d\u306e\u5f8c\u306e\u51e6\u7406\u304c\u884c\u3044\u3084\u3059\u3044\u306e\u3067\u306f\u7121\u3044\u3067\u3057\u3087\u3046\u304b\u3002(\u677e\u5c71)  \n\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u3001head\u3092\u78ba\u8a8d\u3057\u3066\u30c7\u30fc\u30bf\u306e\u72b6\u6cc1\u3092\u307f\u308b\u306e\u306f\u3001\u57fa\u672c\u7684\u3067\u91cd\u8981\u306a\u30b9\u30c6\u30c3\u30d7\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u4eca\u56de\u306e\u76ee\u6a19\u306f\u3068\u308a\u3042\u3048\u305a\u5b66\u7fd2\u3092\u56de\u3059\u3053\u3068\u3067\u3057\u305f\u306e\u3067\u3001\u307e\u305a\u306f\u76ee\u7684\u5909\u6570\u3068\u8aac\u660e\u5909\u6570\u306e\u30bb\u30c3\u30c8\u306e\u4ed5\u65b9\u3092\u8003\u3048\u3001\u5206\u985e\u7cbe\u5ea6\u304c\u4f4e\u304f\u3066\u3082\u4f55\u304b\u3057\u3089\u306e\u7d50\u679c\u3092\u5165\u624b\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3055\u308c\u3066\u3082\u826f\u304b\u3063\u305f\u3068\u611f\u3058\u307e\u3057\u305f\u3002\u5b9f\u969b\u306b\u306f\u7d50\u679c\u3060\u3051\u3067\u306a\u304f\u4eee\u8aac\u3084\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u904e\u7a0b\u3001\u305d\u306e\u7406\u7531\u306a\u3069\u307e\u3067\u542b\u3081\u3066\u5206\u6790\u3068\u306a\u308a\u307e\u3059\u306e\u3067\u3001\u8aad\u307f\u8fbc\u307f\u30fb\u53ef\u8996\u5316\u30fb\u524d\u51e6\u7406\u306a\u3069\u3092\u542b\u3081\u305f\u5168\u4f53\u306e\u6d41\u308c\u3092\u5fa9\u7fd2\u3055\u308c\u307e\u3059\u3068\u3001\u4eca\u5f8c\u306e\u5b66\u7fd2\u306b\u3082\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002(\u677e\u5c71)  \nOneHotEncoding\u3084hold-out\u306a\u3069\u306e\u624b\u6cd5\u3092\u5229\u7528\u3057\u3066\u5206\u6790\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u3066\u3044\u307e\u3059\u3002day2\u3067\u884c\u306a\u3063\u305f\u6a19\u6e96\u5316\u3084\u4ea4\u5dee\u691c\u8a3c\u306b\u3064\u3044\u3066\u3082\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u3001\u3055\u3089\u306b\u826f\u3044\u3068\u601d\u3044\u307e\u3057\u305f\u3002  \n\u30e2\u30c7\u30eb\u306e\u7279\u5fb4\u62bd\u51fa\u304c\u9069\u5207\u3067\u306a\u304b\u3063\u305f\u308a\u3001\u30e2\u30c7\u30eb\u751f\u6210\u306e\u30b9\u30c6\u30c3\u30d7\u306b\u8aa4\u308a\u304c\u3042\u308b\u3068\u3001\u5b66\u7fd2\u3059\u308b\u969b\u306b\u5168\u3066\u306e\u4e88\u6e2c\u5024\u3092positive\/negative sample\u3068\u3057\u3066\u5224\u5b9a\u3057\u305f\u65b9\u304c\u4e88\u6e2c\u7cbe\u5ea6\u304c\u9ad8\u304f\u306a\u308b\u3068\u5224\u65ad\u3055\u308c\u3001\u7d50\u679c\u3068\u3057\u3066F\u5024\u304c0\u3068\u306a\u308b\u3001\u3068\u3044\u3046\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\u4eca\u4e00\u5ea6\u7279\u5fb4\u62bd\u51fa\u30fb\u30e2\u30c7\u30eb\u4f5c\u6210\u306e\u90e8\u5206\u306e\u898b\u76f4\u3057\u3092\u3055\u308c\u3066\u307f\u3066\u306f\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002(\u677e\u5c71)  \n#### DAY3 \u8b1b\u7fa9\u30e1\u30e2  \n\u89e3\u6790\u30a2\u30a4\u30c7\u30a3\u30a2\u30e1\u30e2\uff1aGoogle trend \u306a\u3069\u3067\u3001\u3044\u3064\u3001\u3069\u306e\u30ef\u30fc\u30c9\u304c\u30d0\u30ba\u3063\u3066\u3044\u305f\u304b\u3092\u30d5\u30e9\u30b0\u5024\u3068\u3057\u3066\u3082\u305f\u305b\u308b\nbag of words : \u6587\u66f8\u4e2d\u306b\u51fa\u73fe\u3059\u308b\u5358\u8a9e\u3092\u6570\u3048\u3001\u305d\u306e\u6570\u3092\u7279\u5fb4\u3068\u3059\u308b\u624b\u6cd5  \nrf = RandomForest(n_jobs=-1)\u3068\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067PC\u306e\u30b3\u30a2\u3092\u3059\u3079\u3066\u4f7f\u7528\u3057\u3066\u8a08\u7b97\u3067\u304d\u308b  \n","12812328":"### Analysis  \n#### One-hot \u30d9\u30af\u30c8\u30eb\u5316\uff0c\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u3092\u5229\u7528\u3057\u3066\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\uff0c\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u7528\u3044\u305f\u89e3\u6790","38d08fc9":"### \u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u306a\u3069\u3092\u6574\u7406  \n#### \u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u4ee5\u4e0b\u3092\u4f7f\u7528\nmain_category, currency, usd_goal_real, main_category, currency, usd_goal_real, state  \n#### \u76ee\u7684\u5909\u6570\uff0c\u4ed6\u306e\u9805\u76ee\uff08cf_data_rem\uff09\u3092\u524a\u9664  \ngoal, pleadged, usd_goal_real, usd pleadged, usd_pleadged_real, ID, name, category, backers, country, Unnamed: 15, Unnamed: 16  "}}