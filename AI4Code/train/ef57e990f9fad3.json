{"cell_type":{"270b638f":"code","18f94a54":"code","ca5d2ec7":"code","5f9b3b9e":"code","3e5fb096":"code","290b8e6e":"code","e5e13f34":"code","b49e758c":"code","1e164bff":"code","7bc6ca5b":"code","0416b815":"code","fc28b391":"code","3141790b":"code","363418e0":"code","e32452d5":"code","20b736ca":"code","6d5c2fa1":"code","dd7ae206":"code","945a1c17":"code","cd043d36":"code","70a8a69f":"code","87ab1168":"code","0b50b97a":"code","e4196fcd":"code","efc76ae0":"code","30a9511f":"code","5201dd7a":"code","071f1eed":"code","3b971aa7":"code","c823e8fe":"code","fb4a578f":"code","fc0d35f0":"code","dd5a976b":"code","49f3c4de":"code","9704283f":"code","5dceb0cc":"markdown"},"source":{"270b638f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18f94a54":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ngender_submission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","ca5d2ec7":"train.head()","5f9b3b9e":"test.head()","3e5fb096":"train.groupby(['Sex'])[['Survived']].mean()","290b8e6e":"train.groupby(['Embarked', 'Pclass', 'Sex'])[['Survived']].mean()","e5e13f34":"condition = (train['Age'] < 5) & (train['Sex'] == 'male')\ntrain.loc[condition, 'Survived'].mean()","b49e758c":"test.loc[(test['Age'] < 5) & (test['Sex'] == 'male')]","1e164bff":"train.groupby('Pclass')[['Survived']].mean()","7bc6ca5b":"train.groupby('SibSp')[['Survived']].mean()","0416b815":"train['Sex_num'] = train['Sex'].apply(lambda x: 1 if x == 'male' else 0)\ntest['Sex_num'] = test['Sex'].apply(lambda x: 1 if x == 'male' else 0)","fc28b391":"embarked_dict = {\n    'S': 0, \n    'C': 1,\n    'Q': 2,\n}","3141790b":"def encode(x):\n    return embarked_dict[x]","363418e0":"train['Embarked'].isnull().sum()","e32452d5":"train['Embarked'].value_counts()","20b736ca":"# \uacb0\uce21\uce58 \ucc44\uc6c0\ntrain['Embarked'].fillna('S', inplace=True)\ntest['Embarked'].fillna('S', inplace=True)","6d5c2fa1":"train['Embarked'].isnull().sum()","dd7ae206":"train['Embarked_num'] = train['Embarked'].map(embarked_dict)\ntest['Embarked_num'] = test['Embarked'].map(embarked_dict)","945a1c17":"train.head()","cd043d36":"test.head()","70a8a69f":"cols = [\n    'Pclass', \n#     'Age', \n    'SibSp', \n    'Parch', \n    'Fare', \n    'Sex_num', \n    'Embarked_num'\n]","87ab1168":"test['Fare'].fillna(0, inplace=True)","0b50b97a":"train[cols].head()","e4196fcd":"test[cols].isnull().sum()","efc76ae0":"train[cols].head()","30a9511f":"train['Survived']","5201dd7a":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(n_estimators=500)\nmodel.fit(train[cols], train['Survived'])","071f1eed":"prediction = model.predict(test[cols])","3b971aa7":"prediction","c823e8fe":"# \uc815\ub2f5 \uae30\uc785\ngender_submission['Survived'] = prediction\n\n# \uc815\ub2f5 \uc81c\ucd9c\ngender_submission.to_csv('submission-05.csv', index=False)","fb4a578f":"test.head()","fc0d35f0":"# \uc870\uac74 1: \uc5ec\uc131\uc740 \uc0b4\uc558\ub2e4!\ncond1 = (test['Sex'] == 'female')\n\n# \uc870\uac74 2: 1\ub4f1\uae09, 2\ub4f1\uae09 \ud0d1\uc2b9\ud55c \uc2b9\uac1d\ub9cc \uc0dd\uc874!\ncond2 = (test['Pclass'] <= 2)\n\n# \uc870\uac74 3: \ub0a8\uc790\uc544\uc774 (5\uc0b4 \ubbf8\ub9cc) \uc2b9\uac1d\uc744 \uc0dd\uc874!\n# cond3 = (test['Sex'] == 'male') & (test['Age'] < 5)\n\n# \uc870\uac74 4: Q \ud56d\uad6c\uc5d0\uc11c \ud0d1\uc2b9\ud55c 3\ub4f1\uae09 \uac1d\uc2e4\uc758 \uc5ec\uc131 \uc0dd\uc874!\ncond4 = (test['Sex'] == 'female') & (test['Embarked'] == 'Q') & (test['Pclass'] == 3)\n\ntest['Survived'] = 0\ntest.loc[cond1 & cond2, 'Survived'] = 1\n# test.loc[cond3, 'Survived'] = 1\ntest.loc[cond4, 'Survived'] = 1","dd5a976b":"test['Survived'].value_counts()","49f3c4de":"# \uc815\ub2f5 \uae30\uc785\ngender_submission['Survived'] = test['Survived']\n\n# \uc815\ub2f5 \uc81c\ucd9c\ngender_submission.to_csv('submission-04.csv', index=False)","9704283f":"# \uc815\ub2f5 \uc81c\ucd9c\ngender_submission.to_csv('submission-04.csv', index=False)","5dceb0cc":"## \uc801\uc6a9"}}