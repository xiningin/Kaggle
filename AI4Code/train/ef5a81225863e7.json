{"cell_type":{"4e7771d6":"code","d08108bc":"code","cc507000":"code","a46cc007":"code","b013a548":"code","4973b19d":"code","23187f28":"code","6d17c820":"code","97748278":"code","3bbb7ca7":"code","b394807c":"code","712e7f35":"code","7f92c0ff":"code","d00003c5":"code","0c9a9fff":"code","c5b7766a":"code","c9c6279d":"code","bfbef41e":"code","12902cae":"code","5e2c3084":"code","4f0d5ef7":"code","0bf8909b":"code","1298641b":"code","6e15fa1b":"code","ce4a6310":"code","c9f51d98":"code","5670ee14":"code","c9ee9274":"code","bfe46ad6":"code","3a00e233":"code","994dd88f":"code","78113b49":"code","32291b1b":"code","5c9e6adb":"code","a146cf87":"code","f469a160":"code","a333c04e":"markdown","7bf6c9ce":"markdown","eb3264e7":"markdown","769d7505":"markdown","2e037a9e":"markdown","467d9adf":"markdown","59887c1a":"markdown","1d3633da":"markdown"},"source":{"4e7771d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d08108bc":"data = pd.read_csv ('..\/input\/countries of the world.csv')","cc507000":"print(data.columns)  #column names (feature)","a46cc007":"data.info()  #gives information about the database","b013a548":"data.describe()  #gives information about numeric values","4973b19d":"data.head()  #show the top five entries in the database","23187f28":"data.tail()  #gives the last five entries in the database","6d17c820":"#Correlation\ndata.corr()  ","97748278":"#Correlation Map\nplt.subplots(figsize=(5,5))\nsns.heatmap(data.corr(), annot=True, linewidths=0.5)\nplt.show()","3bbb7ca7":"print(data.Country) \n#print(data.loc[:,\"Country\"])\n#print(data.loc[:,:\"Country\"])\n#print(data.iloc[:,0])","b394807c":"print(data.loc[:5,\"Country\"])","712e7f35":"print(data.loc[:3,\"Country\":\"Population\"])","7f92c0ff":"print(data.loc[:4,[\"Country\",\"Population\"]])","d00003c5":"print(data.loc[::-1,:])","0c9a9fff":"print(data.Region)","c5b7766a":"print(data.Region.unique())","c9c6279d":"#Changing Feature\nnew_columns_name = ['Country', 'Region', 'Population', 'Area', 'Pop_Density','Coastline', 'Net_migration', 'Infant_mortality', 'GDP','Literacy_(%)', 'Phones',\n'Arable_(%)', 'Crops_(%)',  'Other_(%)', 'Climate', 'Birthrate', 'Deathrate', 'Agriculture', 'Industry','Service']\ndata.columns = new_columns_name\nprint(data.columns)","bfbef41e":"mean_population = data.Population.mean()   #Calculate the average of column Population\ndata[\"Population_level\"] = [ \"low\" if mean_population > each else \"high\" for each in data.Population ]  #Creates new column with population levels\nprint(data.loc[:5,[\"Country\",\"Population\",\"Population_level\"]])","12902cae":"data.drop([\"Service\"],axis=1,inplace = True)  #delete column Service\nprint(data.columns)","5e2c3084":"#Filtering\ndata[(data['Population'] > 70000000)]","4f0d5ef7":"#Filtering\ndata[(data['Population'] > 70000000) & (data['Area'] == 780580)]","0bf8909b":"#Line Plot\ndata.Area.plot(kind = 'line', color = 'blue', label = 'Area' , linewidth = '1' , grid = True)\ndata.Population.plot(kind = 'line', color = 'red', label = 'Population' , linewidth = '1', grid = True , alpha = 0.8)\nplt.legend()\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Plot')\nplt.show()\n","1298641b":"#Line Plot\nplt.plot(data.Area, color = 'blue', label = 'Area')\nplt.plot(data.Population, color = 'red' , label = 'Population', alpha = 0.7, linestyle = ':')\nplt.legend()\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.show\n","6e15fa1b":"#Subplot\nplt.subplot(2,1,1)\nplt.plot(data.Area, color=\"blue\", label=\"Area\")\nplt.ylabel(\"Area\")\nplt.legend()\nplt.subplot(2,1,2)\nplt.plot(data.Population, color=\"red\", label=\"Population\")\nplt.ylabel(\"Population\")\nplt.legend()\nplt.show()\n","ce4a6310":"#Scatter Plot\ndata.plot(kind='scatter', x='Area', y='Population',color = 'pink')\nplt.xlabel('Area')              \nplt.ylabel('Population')\nplt.title('Scatter Plot')\n","c9f51d98":"#Scatter Plot\nplt.scatter(data.Population, data.Area, color=\"pink\")\nplt.xlabel('Area')              \nplt.ylabel('Population')\nplt.title('Scatter Plot')\n","5670ee14":"#Histogram\ndata.GDP.plot(kind = 'hist',bins = 50,figsize = (5,5))\nplt.title(\"Histogram\")\nplt.show()","c9ee9274":"#Defined Function\ndef operation():\n    \"\"\"return defined x\"\"\"  #docstring: explanation for function\n    x = 1\n    return x\nprint(operation())\n\ndef operation_1(x):\n    \"\"\"return x variable 's square\"\"\"\n    y = x**2\n    return y\nprint(operation_1(2))","bfe46ad6":"#Lambda Function\noperation_1 = lambda x: x**2     #function is single line\nprint(operation_1(2))","3a00e233":"#Anonymous Function -> uses lambda function\nvalue_list = [0,1,2]\ny = map(lambda x:x + 2,value_list)  #map: applies a function to all the items in a list\nprint(list(y))","994dd88f":"#Nested Function\ndef operation():  #function inside function\n    def add():\n        x = 1\n        y = x + 1\n        return y\n    return add()*10\nprint(operation())","78113b49":"#Default Function\ndef operation(a, b=1):\n    x = a + b \n    return x\nprint(operation(3))  #value b is not entered  -> 3+1\nprint(operation(3,2))   #value b is entered   -> 3+2\n","32291b1b":"#Flexible Function\ndef operation(*args):  #multiple values can be entered\n    for each in args:\n        y = each + 1\n        print (y)\noperation(1)  # 1+1\nprint(\"\")\noperation(1,2)  # 1+1, 2+1\nprint(\"\")\noperation(1,2,3)  # 1+1, 2+1, 3+1","5c9e6adb":"#Global Scope & Local Scope \n\nx=1    #global\ndef operation():\n    x=2    #local\n    return x\n\nprint(x)    #variable outside a function\nprint(operation())   #variable inside a function","a146cf87":"#Iterators\nnum_list = [1,2,3]\na = iter(num_list)\nprint(next(a))    \nprint(*a)\nprint(\"\")\n\nname_list = [\"ali\",\"ayse\",\"deniz\"]\nb = iter(name_list)\nprint(next(b))\nprint(*b)\nprint(\"\")\n\nword = \"afyonkarahisar\"\nc = iter(word)\nprint(next(c))\nprint(*c)","f469a160":"#Zip Lists\nname_list = [\"ali\",\"ayse\",\"deniz\"]\nage_list = [20,30,40]\nz = zip(name_list,age_list)\nprint(z)\nprint(list(z))","a333c04e":"**L\u0130ST COMPREHENS\u0130ON**","7bf6c9ce":"**PYTHON DATA SCIENCE TOOLBOX**","eb3264e7":"**MATPLOTLIB LIBRARY**","769d7505":"**INDEXING AND SLICING**","2e037a9e":"**DROP AND FILTERING**","467d9adf":"**PANDAS LIBRARY**","59887c1a":" **DATA SC\u0130ENCE**\n\n\n Hi. I am learning python and want to share  my learning with you. I hope you'll like it..","1d3633da":"**SEABORN LIBRARY**"}}