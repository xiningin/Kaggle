{"cell_type":{"2efc854a":"code","ead13910":"code","6da6ff43":"code","0e41413c":"code","31ceef23":"code","dd791093":"code","106ec6b8":"code","9ad97971":"code","483d96ae":"code","edfe65ab":"code","d0683e84":"code","01852395":"code","e724b582":"code","83ce43a5":"code","5a5c33cd":"code","ae982cbc":"code","5ea21978":"code","aa375c13":"markdown","d22ffe88":"markdown","79c875f6":"markdown","83459ee5":"markdown","8504aa70":"markdown","a8eed931":"markdown","a0bee6f8":"markdown","54cb061f":"markdown","e8a4e87c":"markdown","b0cdeeb2":"markdown"},"source":{"2efc854a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport csv\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom os import getcwd","ead13910":"data_train=pd.read_csv('\/kaggle\/input\/sign-language-mnist\/sign_mnist_train.csv')\ndata_test=pd.read_csv('\/kaggle\/input\/sign-language-mnist\/sign_mnist_test.csv')","6da6ff43":"data_train.head(10)\n","0e41413c":"data_train.info()","31ceef23":"data_test.head()","dd791093":"data_test.info()","106ec6b8":"import matplotlib.pyplot as plt\nimport seaborn as sns\n# Plotting for the label having more than 1200 rows.\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(14,7))\ng = sns.countplot(data_train['label'], color='lightgrey')\n\nfor p in g.patches:\n    g.annotate('{:.0f}'.format(p.get_height()), (p.get_x(), p.get_height()+10))\n    if p.get_height() > 1200:\n        p.set_color('blue')\ng.set_ylabel('')    \ng.set_xlabel('')\ng.axes.get_yaxis().set_visible(False)","9ad97971":"# Data splitting and PreProcessing \n\n# In this section you will have to add another dimension to the data\n# So, for example, if your array is (10000, 28, 28)\n# You will need to make it (10000, 28, 28, 1)\n\n\n#training_images = np.expand_dims(training_images, axis=3)\n#testing_images = np.expand_dims(testing_images, axis=3)\n\ntraining_images = data_train.iloc[:,1:].values\ntraining_labels = data_train.iloc[:,0].values\n\ntesting_images = data_test.iloc[:,1:].values\ntesting_labels = data_test.iloc[:,0].values\n\ntraining_images = training_images.reshape(-1,28,28,1)\ntesting_images = testing_images.reshape(-1,28,28,1)\n\n\nprint(training_images.shape)\nprint(training_labels.shape)\nprint(testing_images.shape)\nprint(testing_labels.shape)\n\n# Their output should be:\n# (27455, 28, 28, 1)\n# (27455,)\n# (7172, 28, 28, 1)\n# (7172,)\n","483d96ae":"# Plotting the first 10 images \nfig, ax = plt.subplots(2,5) \nfig.set_size_inches(10, 10)\nk = 0\nfor i in range(2):\n    for j in range(5):\n        ax[i,j].imshow(training_images[k].reshape(28, 28) , cmap = \"gray\")\n        k += 1\n    plt.tight_layout()","edfe65ab":"\n# Create an ImageDataGenerator and do Image Augmentation\ntrain_datagen = ImageDataGenerator(\n    rescale=1. \/ 255,\n    rotation_range=40,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest'\n)\n\nvalidation_datagen = ImageDataGenerator(\n    rescale=1 \/ 255\n)\n    \n# Keep These\nprint(training_images.shape)\nprint(testing_images.shape)\n    \n# Their output should be:\n# (27455, 28, 28, 1)\n# (7172, 28, 28, 1)","d0683e84":"\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(26, activation='softmax')\n])\n\n# Compile Model. \nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)\n\n# Train the Model\nhistory = model.fit_generator(train_datagen.flow(training_images, training_labels, batch_size=32),\n                              steps_per_epoch=len(training_images) \/ 32,\n                              epochs=10,\n                              validation_data=validation_datagen.flow(testing_images, testing_labels, batch_size=32),\n                              validation_steps=len(testing_images) \/ 32)\n\n\n\nmodel.evaluate(testing_images, testing_labels, verbose=0)","01852395":"history.history['accuracy']","e724b582":"import matplotlib.pyplot as plt\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend(loc=0)\nplt.figure()\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\n\nplt.show()","83ce43a5":"# Predictions \npredictions = model.predict_classes(testing_images)\npredictions[:15]   ","5a5c33cd":"# Predictions \npredictions = model.predict_classes(testing_images)\nfor i in range(len(predictions)):\n    if(predictions[i] >= 9):\n        predictions[i] += 1\npredictions[:20]   ","ae982cbc":"# Precision, recall, f1-score for all the classes\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nclasses = [\"Class \" + str(i) for i in range(26) if i != 9]\nprint(classification_report(data_test['label'], predictions, target_names = classes))","5ea21978":"# Confusion Matrix for the model predictions\ncm = confusion_matrix(data_test['label'],predictions)\n\nplt.figure(figsize=(12,7))\ng = sns.heatmap(cm, cmap='Reds',annot=True,\n           fmt='')","aa375c13":"<h1 style='background:#E3C6DD; border:0; color:black'><center> Data splitting and PreProcessing  <\/center><\/h1> ","d22ffe88":"<h1 style='background:#E3C6AD; border:0; color:black'><center> Define the model <\/center><\/h1> ","79c875f6":"<h1 style='background:#73A788; border:0; color:black'><center> Importing Packages<\/center><\/h1> ","83459ee5":"<h1 style='background:#73A788; border:0; color:black'><center> Create an ImageDataGenerator and do Image Augmentation<\/center><\/h1> ","8504aa70":"<h1 style='background:#B676BD; border:0; color:black'><center> Sign Language Alphabets <\/center><\/h1> \n\n- Sign language is a visual means of communicating through hand signals, gestures, facial expressions, and body language. It\u2019s the main form of communication for the Deaf and Hard-of-Hearing community, but sign language can be useful for other groups of people as well. People with disabilities including Autism, Apraxia of speech, Cerebral Palsy, and Down Syndrome may also find sign language beneficial for communicating.","a8eed931":"![image.png](attachment:image.png)","a0bee6f8":"<h1 style='background:#B2C6AB; border:0; color:black'><center> Plotting the first 10 images  <\/center><\/h1> ","54cb061f":"<h1 style='background:#E3C6AD; border:0; color:black'><center> About this file <\/center><\/h1> \n\n- Cropped image montage panel of various users and backgrounds for American Sign Language letters\n- This dataset was inspired by the Fashion-MNIST and the machine learning pipeline for gestures by Sreehari .\n\n- The dataset format is patterned to match closely with the classic MNIST. Each training and test case represents a label (0-25) as a one-to-one map for each alphabetic letter A-Z (and no cases for 9=J or 25=Z because of gesture motions). The training data (27,455 cases) and test data (7172 cases) are approximately half the size of the standard MNIST but otherwise similar with a header row of label, pixel1,pixel2\u2026.pixel784 which represent a single 28x28 pixel image with grayscale values between 0-255. The original hand gesture image data represented multiple users repeating the gesture against different backgrounds. The Sign Language MNIST data came from greatly extending the small number (1704) of the color images included as not cropped around the hand region of interest. To create new data, an image pipeline was used based on ImageMagick and included cropping to hands-only, gray-scaling, resizing, and then creating at least 50+ variations to enlarge the quantity. The modification and expansion strategy was filters ('Mitchell', 'Robidoux', 'Catrom', 'Spline', 'Hermite'), along with 5% random pixelation, +\/- 15% brightness\/contrast, and finally 3 degrees rotation. Because of the tiny size of the images, these modifications effectively alter the resolution and class separation in interesting, controllable ways.","e8a4e87c":"<h1 style='background:#E3C6AD; border:0; color:black'><center> Importing MNIST Data <\/center><\/h1> ","b0cdeeb2":"<h1 style='background:#73A788; border:0; color:black'><center> Plotting for the label having more than 1200 rows<\/center><\/h1> "}}