{"cell_type":{"1ba325b7":"code","4e7c1407":"code","2c0bb990":"code","d11e767f":"code","63d69477":"code","164832e5":"code","93fb38c4":"code","f444a0a9":"code","829d33f6":"code","f06be276":"code","93dcd3e3":"code","5e4beda7":"code","0846d3e0":"code","27d33d87":"code","a3ddf545":"code","0e7e60e8":"code","f6dc1652":"code","735f0838":"code","fc8ca065":"code","e3c57e71":"code","1f268352":"code","bb11ce51":"code","2d08079a":"code","b7ca9119":"code","b9d05cfa":"code","322dfb88":"code","de2692f9":"code","1736239a":"code","d6a220c2":"code","7b387e39":"code","14845b8e":"code","9d281f8d":"code","e95c61de":"code","ec25bc11":"code","ed3bcdea":"code","df549cdd":"code","48287fc1":"code","3952065f":"code","63656d10":"code","f6d420c5":"code","c0fd16f8":"code","9845c8bb":"code","b423b070":"code","d29812d9":"code","1f1409e9":"code","8b7c3c5a":"code","3478aa82":"code","ed4a3673":"code","d329d260":"code","41e2e90e":"code","3cbd03a5":"code","d60f2e2f":"code","0aec05e9":"code","3716be21":"code","39fb9c5f":"code","4bdc0268":"code","a1de55b3":"code","1125a343":"code","0c2a2bab":"code","865964b7":"code","ee88debb":"code","8f8a00bc":"code","e291fb8b":"code","08069fa4":"code","0d931365":"code","360a340d":"code","870f9ea8":"code","3eff79d4":"code","c66bc88d":"code","bd3c5a61":"code","c7be02f0":"code","921c19f4":"code","de776792":"code","7154a317":"code","366d41c3":"code","19c12227":"markdown","423775b8":"markdown","25083c79":"markdown","99367215":"markdown","334e543d":"markdown","1f9cb380":"markdown","a7cbedcf":"markdown","0bad31bc":"markdown","aca96e53":"markdown","10267981":"markdown","bdd5e12a":"markdown","e9adfce3":"markdown","90b6d851":"markdown","9f54a3ce":"markdown","38f8ef7e":"markdown","4c5a8dc5":"markdown","df081ff1":"markdown"},"source":{"1ba325b7":"# Installation of required libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LogisticRegression  \nfrom sklearn.neighbors import KNeighborsClassifier  \nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nwarnings.filterwarnings(\"ignore\", category=FutureWarning) \nwarnings.filterwarnings(\"ignore\", category=UserWarning) \n\n%config InlineBackend.figure_format = 'retina'\n\n# to display all columns and rows:\npd.set_option('display.max_columns', None); pd.set_option('display.max_rows', None);\n","4e7c1407":"# Reading the dataset\ndf = pd.read_csv(\"..\/input\/predicting-churn-for-bank-customers\/Churn_Modelling.csv\", index_col=0)\ndf.columns = map(str.lower, df.columns)","2c0bb990":"# The first 5 observation units of the data set were accessed.\ndf.head()","d11e767f":"# The size of the data set was examined. It consists of 10000 observation units and 13 variables.\ndf.shape","63d69477":"# Feature information\ndf.info()","164832e5":"# Descriptive statistics of the data set accessed.\ndf.describe().T","93fb38c4":"# The average of the age variable was taken according to the dependent variable.\ndf.groupby(\"exited\").agg(\"mean\")","f444a0a9":"# The average of the age variable according to the gender variable was examined.\ndf.groupby(\"gender\").agg({\"age\": \"mean\"})","829d33f6":"# The average of the dependent variable according to the gender variable was examined.\ndf.groupby(\"gender\").agg({\"exited\": \"mean\"})","f06be276":"# The average of the dependent variable according to the geography variable was examined.\ndf.groupby(\"geography\").agg({\"exited\": \"mean\"})","93dcd3e3":"# The frequency of the dependent variable has been reached.\ndf[\"exited\"].value_counts()","5e4beda7":"# Access to those who left us through the dependent variable. (exited == 1)\nchurn = df[df[\"exited\"] == 1]","0846d3e0":"# The first 5 observation units were reached.\nchurn.head()","27d33d87":"# Size information has been accessed.\nchurn.shape","a3ddf545":"# Who left most than the gender variable?\nchurn.groupby(\"gender\").agg({\"exited\": \"count\"})","0e7e60e8":"# Which country has left us the most?\nchurn.groupby(\"geography\").agg({\"exited\": \"count\"})","f6dc1652":"# Access to those who do not leave us on the dependent variable. (exited == 0)\nnon_churn = df[df[\"exited\"] == 0]","735f0838":"# The first 5 observation units were reached.\nnon_churn.head()","fc8ca065":"# Size information has been accessed.\nnon_churn.shape","e3c57e71":"# Which country does not leave the most?\nnon_churn.groupby(\"geography\").agg({\"exited\": \"count\"})","1f268352":"# Unique observation units were examined. Surname variable will be examined.\ndf.nunique()","bb11ce51":"# What are the most commonly used surnames?\ndf.groupby('surname')['surname'].count().sort_values(ascending=False).head(10)","2d08079a":"# The most commonly used surname was examined and observed to be non-multiplexing.\ndf[df[\"surname\"] == \"Smith\"]","b7ca9119":"# They were grouped by gender variable and looked at how many years on average they were clients.\ndf.groupby([\"gender\", \"exited\"]).agg({\"tenure\" : \"mean\"})","b9d05cfa":"# Min, mean and max values \u200b\u200bof all variables were taken according to the dependent variable.\ndf.groupby(\"exited\").agg([\"min\",\"mean\",\"max\"])","322dfb88":"# Isactivemember is grouped according to the hascrcard variables and the dependent variable is examined.\ndf.groupby([\"isactivemember\", \"hascrcard\"]).agg({\"exited\" : \"count\"})","de2692f9":"# Isactivemember is grouped according to hascrcard variables and the balance variable is examined.\ndf.groupby([\"isactivemember\", \"hascrcard\"]).agg({\"balance\" : \"mean\"})","1736239a":"# The balance variable was examined according to the gender variable.\ndf.groupby(\"gender\").agg({\"balance\": \"mean\"})","d6a220c2":"# The age variable was divided into 5 parts and the age range in which there is the most abandonment was examined.\ndf[\"NewAge\"] = pd.qcut(df['age'], 5)\ndf.groupby(\"NewAge\")[\"exited\"].value_counts()","7b387e39":"# The dependent variable was studied according to the gender variable and age range variable.\ndf.groupby([\"gender\",\"NewAge\" ])[\"exited\"].value_counts()","14845b8e":"# How many people whose balance is 0 and do not leave?\ndf[(df[\"balance\"] == 0) & (df[\"exited\"] == 0)].shape","9d281f8d":"# How many people whose balance is 0 leave?\ndf[(df[\"balance\"] == 0) & (df[\"exited\"] == 1)].shape","e95c61de":"# Access to the correlation of the data set was provided. What kind of relationship is examined between the variables. \n# If the correlation value is> 0, there is a positive correlation. While the value of one variable increases, the value of the other variable also increases.\n# Correlation = 0 means no correlation.\n# If the correlation is <0, there is a negative correlation. While one variable increases, the other variable decreases. \n# When the correlations are examined, there are 1 variables that act as a positive correlation to the exited dependent variable.\n# This variable is Age. As this increases, the Result variable increases.\ndf.corr()","ec25bc11":"# The distribution of the dependent variable in the dataset is plotted as pie and columns graphs.\nf,ax=plt.subplots(1,2,figsize=(18,8))\ndf['exited'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('da\u011f\u0131l\u0131m')\nax[0].set_ylabel('')\nsns.countplot('exited',data=df,ax=ax[1])\nax[1].set_title('exited')\nplt.show()\n","ed3bcdea":"# Plotted the categorical variables on the basis of the graph of the column according to the dependent variable.\nfig, axarr = plt.subplots(2, 2, figsize=(20, 12))\nsns.countplot(x='geography', hue = 'exited',data = df, ax=axarr[0][0])\nsns.countplot(x='gender', hue = 'exited',data = df, ax=axarr[0][1])\nsns.countplot(x='hascrcard', hue = 'exited',data = df, ax=axarr[1][0])\nsns.countplot(x='isactivemember', hue = 'exited',data = df, ax=axarr[1][1])","df549cdd":"# The distribution of the dependent variable according to the gender variable is plotted in the pie chart.\nimport plotly.express as px\nfig = px.pie(df, values =df.groupby(\"gender\")[\"exited\"].value_counts(), names = [\"Female,0\",\"Female 1\",\"Male,0\",\"Male,1\"])\nfig.show()","48287fc1":"# Dependent variable was plotted according to age and geography variable.\nimport plotly.express as px\nfig = px.bar(df,y = \"exited\", x = \"age\" , color = \"geography\")\nfig.show()","3952065f":"# Correlation Matrix\nf, ax = plt.subplots(figsize= [20,15])\nsns.heatmap(df.corr(), annot=True, fmt=\".2f\", ax=ax, cmap = \"magma\" )\nax.set_title(\"Correlation Matrix\", fontsize=20)\nplt.show()","63656d10":"# Boxplot graph for outlier observation analysis\nfig, axarr = plt.subplots(3, 2, figsize=(20, 12))\nsns.boxplot(y='creditscore',x = 'exited', hue = 'exited',data = df, ax=axarr[0][0])\nsns.boxplot(y='age',x = 'exited', hue = 'exited',data = df , ax=axarr[0][1])\nsns.boxplot(y='tenure',x = 'exited', hue = 'exited',data = df, ax=axarr[1][0])\nsns.boxplot(y='balance',x = 'exited', hue = 'exited',data = df, ax=axarr[1][1])\nsns.boxplot(y='numofproducts',x = 'exited', hue = 'exited',data = df, ax=axarr[2][0])\nsns.boxplot(y='estimatedsalary',x = 'exited', hue = 'exited',data = df, ax=axarr[2][1])","f6d420c5":"# Missing Observation Analysis\ndf.isnull().sum()","c0fd16f8":"# Outlier Observation Analysis\nfor feature in df[['creditscore','tenure', 'balance','estimatedsalary']]:\n    \n    Q1 = df[feature].quantile(0.25)\n    Q3 = df[feature].quantile(0.75)\n    IQR = Q3-Q1\n    lower = Q1- 1.5*IQR\n    upper = Q3 + 1.5*IQR\n    \n    if df[(df[feature] > upper)].any(axis=None):\n        print(feature,\"yes\")\n    else:\n        print(feature, \"no\")","9845c8bb":"df[\"NewAGT\"] = df[\"age\"] - df[\"tenure\"]\ndf[\"CreditsScore\"] = pd.qcut(df['creditscore'], 10, labels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ndf[\"AgeScore\"] = pd.qcut(df['age'], 8, labels = [1, 2, 3, 4, 5, 6, 7, 8])\ndf[\"BalanceScore\"] = pd.qcut(df['balance'].rank(method=\"first\"), 10, labels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ndf[\"EstSalaryScore\"] = pd.qcut(df['estimatedsalary'], 10, labels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ndf[\"NewEstimatedSalary\"] = df[\"estimatedsalary\"] \/ 12 ","b423b070":"df.head()","d29812d9":"df = pd.get_dummies(df, columns =[\"geography\", \"gender\"], drop_first = True)","1f1409e9":"df.head()","8b7c3c5a":"df = df.drop([\"customerid\",\"surname\",\"NewAge\"], axis = 1)","3478aa82":"df.head()","ed4a3673":"cat_df = df[[\"geography_Germany\", \"geography_Spain\", \"gender_Male\", \"hascrcard\",\"isactivemember\"]]","d329d260":"cat_df.head()","41e2e90e":"y = df[\"exited\"]\nX = df.drop([\"exited\",\"geography_Germany\", \"geography_Spain\", \"gender_Male\", \"hascrcard\",\"isactivemember\"], axis = 1)\ncols = X.columns\nindex = X.index","3cbd03a5":"X.head()    ","d60f2e2f":"from sklearn.preprocessing import RobustScaler\ntransformer = RobustScaler().fit(X)\nX = transformer.transform(X)\nX = pd.DataFrame(X, columns = cols, index = index)","0aec05e9":"X = pd.concat([X,cat_df], axis = 1)","3716be21":"X.head()","39fb9c5f":"y.head()","4bdc0268":"print(X.shape, y.shape)","a1de55b3":"# Train-Test Separation\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=12345)\n","1125a343":"# Because it's an unstable data set, we're going to increase the number of samples.\n# References: https:\/\/imbalanced-learn.readthedocs.io\/en\/stable\/generated\/imblearn.combine.SMOTETomek.html\nfrom imblearn.combine import SMOTETomek\n\nsmk = SMOTETomek()\n# Oversample training  data\nX_train, y_train = smk.fit_sample(X_train, y_train)\n\n# Oversample validation data\nX_test, y_test = smk.fit_sample(X_test, y_test)","0c2a2bab":"print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","865964b7":"models = []\nmodels.append(('LR', LogisticRegression(random_state = 12345)))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier(random_state = 12345)))\nmodels.append(('RF', RandomForestClassifier(random_state = 12345)))\nmodels.append(('SVM', SVC(gamma='auto', random_state = 12345)))\nmodels.append(('XGB', GradientBoostingClassifier(random_state = 12345)))\nmodels.append((\"LightGBM\", LGBMClassifier(random_state = 12345)))\nmodels.append((\"CatBoost\", CatBoostClassifier(random_state = 12345, verbose = False)))\n\n# evaluate each model in turn\nresults = []\nnames = []","ee88debb":"for name, model in models:\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        msg = \"%s: (%f)\" % (name, accuracy)\n        print(msg)","8f8a00bc":"models2 = []\nmodels2.append(('CART', DecisionTreeClassifier( random_state = 12345)))\nmodels2.append(('RF', RandomForestClassifier( random_state = 12345)))\nmodels2.append(('XGB', GradientBoostingClassifier( random_state = 12345)))\nmodels2.append((\"LightGBM\", LGBMClassifier( random_state = 12345)))\nmodels2.append((\"CatBoost\", CatBoostClassifier(random_state = 12345, verbose = False)))","e291fb8b":"for name, model in models2:\n        base = model.fit(X_train,y_train)\n        y_pred = base.predict(X_test)\n        acc_score = accuracy_score(y_test, y_pred)\n        feature_imp = pd.Series(base.feature_importances_,\n                        index=X.columns).sort_values(ascending=False)\n\n        sns.barplot(x=feature_imp, y=feature_imp.index)\n        plt.xlabel('De\u011fi\u015fken \u00d6nem Skorlar\u0131')\n        plt.ylabel('De\u011fi\u015fkenler')\n        plt.title(name)\n        plt.show()","08069fa4":"# Hyperparameters have previously been obtained with the help of GridSearchCV.\nmodels = []\nmodels.append(('XGB', GradientBoostingClassifier(random_state = 12345,learning_rate = 0.05, max_depth = 5, min_samples_split = 2, n_estimators = 500, subsample = 0.8)))\nmodels.append((\"LightGBM\", LGBMClassifier(random_state = 12345,  learning_rate = 0.05, max_depth = 3, n_estimators = 1000)))\nmodels.append((\"CatBoost\", CatBoostClassifier(random_state = 12345, verbose = False, depth = 10, iterations = 1000, l2_leaf_reg = 5, learning_rate = 0.01)))\n\n# evaluate each model in turn\nresults = []\nnames = []\n\nfor name, model in models:\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        msg = \"%s: (%f)\" % (name, accuracy)\n        print(msg)","0d931365":"models2 = []\nmodels2.append((\"LightGBM\", LGBMClassifier(random_state = 12345,  learning_rate = 0.05, max_depth = 3, n_estimators = 1000)))\n\n# evaluate each model in turn\nresults = []\nnames = []\n\nfor name, model in models2:\n        base = model.fit(X_train,y_train)\n        y_pred = base.predict(X_test)\n        acc_score = accuracy_score(y_test, y_pred)\n        feature_imp = pd.Series(base.feature_importances_,\n                        index=X.columns).sort_values(ascending=False)\n\n        sns.barplot(x=feature_imp, y=feature_imp.index)\n        plt.xlabel('De\u011fi\u015fken \u00d6nem Skorlar\u0131')\n        plt.ylabel('De\u011fi\u015fkenler')\n        plt.title(name)\n        plt.show()","360a340d":"from sklearn.metrics import  accuracy_score, f1_score, precision_score,confusion_matrix, recall_score, roc_auc_score\ny_pred = model.predict(X_test)\ncm_xgb = confusion_matrix(y_test, y_pred=y_pred)\n\nTP = cm_xgb[1, 1]\nTN = cm_xgb[0, 0]\nFP = cm_xgb[0, 1]\nFN = cm_xgb[1, 0]","870f9ea8":"from matplotlib import rc,rcParams\ndef plot_confusion_matrix(cm, classes,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n\n    plt.rcParams.update({'font.size': 19})\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title,fontdict={'size':'16'})\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45,fontsize=12,color=\"blue\")\n    plt.yticks(tick_marks, classes,fontsize=12,color=\"blue\")\n    rc('font', weight='bold')\n    fmt = '.1f'\n    thresh = cm.max()\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"red\")\n\n    plt.ylabel('True label',fontdict={'size':'16'})\n    plt.xlabel('Predicted label',fontdict={'size':'16'})\n    plt.tight_layout()","3eff79d4":"import itertools\nplot_confusion_matrix(confusion_matrix(y_test, y_pred=y_pred), classes=['Non Churn','Churn'],\n                      title='Confusion matrix')","c66bc88d":"tn, fp, fn, tp = cm_xgb.ravel()\nprint(\"True Negatives: \",tn)\nprint(\"False Positives: \",fp)\nprint(\"False Negatives: \",fn)\nprint(\"True Positives: \",tp)","bd3c5a61":"df_pred = pd.DataFrame(data=[],columns=[\"y_test\"])\ndf_pred[\"y_pred\"] = y_pred\ndf_pred[\"y_test\"] = y_test\ndf_pred.index = df_pred.index + 1\ndf_pred.head()","c7be02f0":"FP_predicts_indexes = [] \nTP_predicts_indexes=[]\nFN_predict_indexes =[]\nTN_predicts_indexes  = []\nfor index, row in df_pred.iterrows():\n    if row['y_test'] == 0 and row['y_pred'] == 1:\n        FP_predicts_indexes.append(row.name)\n    elif row['y_test'] == 1 and row['y_pred'] == 1:\n        TP_predicts_indexes.append(row.name)\n    elif row['y_test'] == 0 and row['y_pred'] == 0:\n        TN_predicts_indexes.append(row.name)\n    elif row['y_test'] == 1 and row['y_pred'] == 0:\n        FN_predict_indexes.append(row.name)    ","921c19f4":"df_pred.loc[TN_predicts_indexes,\"prediction_result\"] = \"TN\"\ndf_pred.loc[TP_predicts_indexes,\"prediction_result\"] = \"TP\"\ndf_pred.loc[FP_predicts_indexes,\"prediction_result\"] = \"FP\"\ndf_pred.loc[FN_predict_indexes,\"prediction_result\"] = \"FN\"\ndf_pred.head()","de776792":"df_pred[df_pred[\"prediction_result\"] == \"FP\"].head()","7154a317":"df_pred[df_pred[\"prediction_result\"] == \"FN\"].head()","366d41c3":"lbgm_tuned = model\nfrom sklearn.metrics import confusion_matrix, classification_report, roc_auc_score, precision_recall_curve, roc_curve, auc, average_precision_score\ny_pred_prob = lbgm_tuned.predict_proba(X_test)[:,1]\nfig, ax = plt.subplots()\nfpr, tpr, thresholds_roc = roc_curve(y_test, y_pred_prob)\nroc_auc = auc(fpr,tpr)\nax.plot(fpr,tpr, label = \" area = {:0.2f}\".format(roc_auc))\nax.plot([0,1], [0,1], 'r', linestyle = \"--\", lw = 2)\nax.set_xlabel(\"False Positive Rate\", fontsize = 10)\nax.set_ylabel(\"True Positive Rate\", fontsize = 10)\nax.set_title(\"ROC Curve\", fontsize = 18)\nax.legend(loc = 'best')\n\nclose_default = np.argmin(np.abs(thresholds_roc - 0.5))\nax.plot(fpr[close_default], tpr[close_default], 'o', markersize = 8)\nplt.tight_layout()","19c12227":"## 4.2) Variable Importance Levels of All Models","423775b8":"# 4) Modelling","25083c79":"## 3.2) Feature Engineering","99367215":"## 3.1) Missing and Outlier Observation Analysis","334e543d":"## 4.1) Accuracy Score","1f9cb380":"## 3.5) Train-Test Separation & Balancing","a7cbedcf":"# Churn Prediction using Machine Learning\n\n![Churn.png](attachment:Churn.png)\n\n## Objective \n\n**Can you develop a model of machine learning that can predict customers who will leave the company?**\n\nThe aim is to estimate whether a bank's customers leave the bank or not. The event that defines the customer abandonment is the closing of the customer's bank account.\n\n## Details about the dataset:\nIt consists of 10000 observations and 12 variables. Independent variables contain information about customers. Dependent variable refers to customer abandonment status.\n\n### **Variables:**\n\n**RowNumber** \u2014 corresponds to the record (row) number and has no effect on the output. This column will be removed.\n\n**CustomerId** \u2014 contains random values and has no effect on customer leaving the bank. This column will be removed.\n\n**Surname** \u2014 the surname of a customer has no impact on their decision to leave the bank. This column will be removed.\n\n**CreditScore** \u2014 can have an effect on customer churn, since a customer with a higher credit score is less likely to leave the bank.\n\n**Geography** \u2014 a customer\u2019s location can affect their decision to leave the bank. We\u2019ll keep this column.\n\n**Gender** \u2014 it\u2019s interesting to explore whether gender plays a role in a customer leaving the bank. We\u2019ll include this column, too.\n\n**Age** \u2014 this is certainly relevant, since older customers are less likely to leave their bank than younger ones.\n\n**Tenure** \u2014 refers to the number of years that the customer has been a client of the bank. Normally, older clients are more loyal and less likely to leave a bank.\n\n**Balance** \u2014 also a very good indicator of customer churn, as people with a higher balance in their accounts are less likely to leave the bank compared to those with lower balances.\n\n**NumOfProducts** \u2014 refers to the number of products that a customer has purchased through the bank.\n\n**HasCrCard** \u2014 denotes whether or not a customer has a credit card. This column is also relevant, since people with a credit card are less likely to leave the bank. (0=No,1=Yes)\n\n**IsActiveMember** \u2014 active customers are less likely to leave the bank, so we\u2019ll keep this. (0=No,1=Yes)\n\n**EstimatedSalary** \u2014 as with balance, people with lower salaries are more likely to leave the bank compared to those with higher salaries.\n\n**Exited** \u2014 whether or not the customer left the bank. This is what we have to predict. (0=No,1=Yes)\n\n## Result; \nThe model created as a result of LightGBM hyperparameter optimization became the model with the maxium Accuracy Score. (0.9116)","0bad31bc":"# 3) Data Preprocessing","aca96e53":"# 8) Reporting\nThe aim of this study was to create classification models for the churn dataset and to predict whether a person abandons us by creating models and to obtain maximum accuracy score in the established models. The work done is as follows:\n\n1) Churn Data Set read.\n\n2) With Exploratory Data Analysis; The data set's structural data were checked. The types of variables in the dataset were examined. Size information of the dataset was accessed. Descriptive statistics of the data set were examined. It was concluded that there were no missing observations and outliers in the data set.\n\n4) During Model Building; Logistic Regression, KNN, SVM, CART, Random Forests, XGBoost, LightGBM, CatBoost like using machine learning models Accuracy  Score were calculated. Later XGBoost, LightGBM, CatBoost hyperparameter optimizations optimized to increase Accuracy score.\n\n5) Result; The model created as a result of LightGBM hyperparameter optimization became the model with the maxium Accuracy Score. **(0.9116)**","10267981":"# 5) Model Tuning","bdd5e12a":"# 2) Data Visualization","e9adfce3":"## 3.3) One Hot Encoding","90b6d851":"# 7) ROC Curve","9f54a3ce":"## 3.4) Scaling","38f8ef7e":"# 6) Confusion Matrix\n\n![TP%20TN%20FP%20FN.png](attachment:TP%20TN%20FP%20FN.png)","4c5a8dc5":"## 5.1) Model Tuning Variable Importance Level","df081ff1":"# 1) Exploratory Data Analysis"}}