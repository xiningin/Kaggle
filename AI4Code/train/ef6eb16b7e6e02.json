{"cell_type":{"6a1ddb05":"code","14d551d1":"code","4df9795f":"code","1c0d1b85":"code","fe2adc57":"code","2b37029c":"code","77c7970d":"code","eeef7427":"code","1c9140e2":"code","d98a04eb":"code","ef2053fa":"code","0286b392":"code","6f5eba1b":"code","a45afd53":"code","86c44050":"code","139728e8":"code","38ded089":"code","bb7123c5":"markdown","6bad3d79":"markdown","0567a411":"markdown","cebbe8c9":"markdown"},"source":{"6a1ddb05":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","14d551d1":"!git clone https:\/\/github.com\/PaulStryck\/nih-chest-x-ray.git .\/nih_chest_x_ray\n!git -C nih_chest_x_ray pull\n!git -C nih_chest_x_ray checkout tags\/1.1","4df9795f":"from nih_chest_x_ray.modules import net, trainer\nimport torch\nfrom torchvision import transforms\nfrom nih_chest_x_ray.modules import net, dataset\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nfrom numpy import argmax\nimport tensorflow as tf\nfrom tqdm import tqdm\nfrom sklearn.metrics import roc_auc_score, roc_curve\nimport seaborn as sn","1c0d1b85":"transform = transforms.Compose([\n    transforms.Resize(224),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                         std=[0.229, 0.224, 0.225])\n])\n\ndata_wrapper = dataset.ChestXRayImages(root  = \"..\/input\/data\",\n                                    folds = 5,\n                                    frac  = 0.001,\n                                    seed  = 2021)\n\ndata_test = dataset.ChestXRayImageDataset(\n         \"..\/input\/data\",\n         data_wrapper.data_test,\n         transform=transform)\n\ntest_loader = torch.utils.data.DataLoader(data_test,batch_size=128)","fe2adc57":"from nih_chest_x_ray.modules import net, dataset\nimport torch\n\nPATH = \"..\/input\/resnet-epoch1\/model_weights_epoch_1.pth\"\nmodel = net.get_model(len(dataset.ChestXRayImageDataset.labels))\nmodel.load_state_dict(torch.load(PATH))\nmodel.eval()","2b37029c":"def get_all_preds(model, loader):\n    all_preds = torch.tensor([])\n    for batch in loader:\n        images, labels = batch\n\n        preds = model(images)\n        all_preds = torch.cat(\n            (all_preds, preds)\n            ,dim=0\n        )\n    return all_preds","77c7970d":"#arange ture labels same shape as preds\ntrue_y =[]\nfor i in data_test:\n    inst = np.array(i[1])\n    inst = inst.astype('int64')\n    true_y.append(inst)\ntrue_y = np.array(true_y)\ntrue_y.shape","eeef7427":"#training\nwith torch.no_grad():\n    train_preds = get_all_preds(model, test_loader)\n\n#saving\npreds_np = train_preds.numpy()\npreds_df = pd.DataFrame(preds_np)\npreds_df.to_csv('preds.csv', index=False)\n\n#saving\ntrue_y_df = pd.DataFrame(true_y)\ntrue_y_df.to_csv('true_y.csv', index=False)\n\npreds_np.shape","1c9140e2":"#loading\n#data = pd.read_csv('..\/input\/preds-conf-matrix\/preds.csv', sep=',', na_values=\".\")\n#train_preds = np.array(data)\n#loading true\n#data = pd.read_csv('..\/input\/preds-conf-matrix\/true_y.csv', sep=',', na_values=\".\")\n#true_y = np.array(data)","d98a04eb":"preds_sig = 1\/(1 + np.exp(-train_preds))\npreds_sig.shape","ef2053fa":"labels = ['Atelectasis', 'Cardiomegaly', 'Consolidation', 'Edema',\n         'Effusion', 'Emphysema', 'Fibrosis', 'Hernia', 'Infiltration',\n         'Mass', 'Nodule', 'Pleural_Thickening', 'Pneumonia',\n         'Pneumothorax', 'none']\n\nmatrices=[]\n\nfor i in range(0,15):\n    fpr, tpr, thresholds = roc_curve(true_y[:, i], preds_sig[:, i])\n    J = tpr - fpr\n    ix = argmax(J)\n    best_thresh = thresholds[ix]\n    pred = np.where(preds_sig[:, i] > best_thresh, 1, 0)\n    matrices.append(confusion_matrix(y_pred=pred, y_true=true_y[:, i]))\n    \nplt.figure(figsize=(24,20))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9, wspace=0.4, hspace=0.5)\n\nfor i,j,k,m in zip(labels, matrices, range(0,15), range(1,16)):\n    plt.subplot(5,5,m)\n    sn.set(font_scale=1.2)\n    plt.title('{}'.format(labels[k], 4, 4), y=1.0)\n    df_cm = pd.DataFrame(matrices[k], index=None, columns=None)\n    sn.heatmap(df_cm, annot=True, annot_kws={\"size\": 15}, fmt='g') \n    sn.set(font_scale=0.8)\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n\nplt.show()","0286b392":"for i in tqdm(data_test):\n    real.append(i[1])\n    \nreal","6f5eba1b":"#preds_copy = train_preds.detach().clone()\n#sig = tf.nn.sigmoid(preds_copy)\n\nreal = []\nwith tf.device(\"\/device:GPU:0\"):\n    for i in tqdm(data_test):\n        real.append(i[1])\n        \nlabels = data_test.labels\n\ndef get_roc_curve(labels, predicted_vals, liste, when = ''):\n    auc_roc_vals = []\n    for i,j in enumerate(liste):\n        try:\n            gt = j\n            pred = predicted_vals[:, i]\n            auc_roc = roc_auc_score(gt, pred)\n            auc_roc_vals.append(auc_roc)\n            fpr_rf, tpr_rf, _ = roc_curve(gt, pred)\n            plt.figure(1, figsize=(10, 10))\n            plt.plot([0, 1], [0, 1], 'k--')\n            plt.plot(fpr_rf, tpr_rf,\n                     label=labels[i] + \" (\" + str(round(auc_roc, 3)) + \")\")\n            plt.xlabel('False positive rate')\n            plt.ylabel('True positive rate')\n            plt.title('ROC curve ' + when)\n            plt.legend(loc='best')\n        except:\n            print(\n                f\"Error in generating ROC curve for {labels[i]}. \"\n                f\"Dataset lacks enough examples.\"\n            )\n    plt.show()\n    return auc_roc_vals","a45afd53":"for i,j in enumerate(real_vals):\n    print(i,j)","86c44050":"pred0 = []\npred1 = []\npred2 = []\npred3 = []\npred4 = []\npred5 = []\npred6 = []\npred7 = []\npred8 = []\npred9 = []\npred10 = []\npred11 = []\npred12 = []\npred13 = []\npred14 = []\n\nfor i in tqdm(real):\n    pred0.append(i[0])\n    pred1.append(i[1])\n    pred2.append(i[2])\n    pred3.append(i[3])\n    pred4.append(i[4])\n    pred5.append(i[5])\n    pred6.append(i[6])\n    pred7.append(i[7])\n    pred8.append(i[8])\n    pred9.append(i[9])\n    pred10.append(i[10])\n    pred11.append(i[11])\n    pred12.append(i[12])\n    pred13.append(i[13])\n    pred14.append(i[14])","139728e8":"real_vals = [pred0,pred1,pred2,pred3,pred4,pred5,pred6,pred7,pred8,pred9,pred10,pred11,pred12,pred13,pred14]","38ded089":"get_roc_curve(labels, preds_sig, real_vals, when = '')","bb7123c5":"##### You will notice a lot of classifications in the False Positive (FP) upper right square. This is okay, because the doctor can double check the diagnosis. Our model is tuned so the false negatives are minimized (FN) at the bottom left of the confusion matrix. Having many FN means that these will not be checked by the doctor.","6bad3d79":"### Comment-In to Train and Save Preds\nUncomment \"saving\" to work with full sample saved predictions, while commenting-out \"training\". May need to adjust file path below.","0567a411":"### AUC Test","cebbe8c9":"### Load Model and Predict"}}