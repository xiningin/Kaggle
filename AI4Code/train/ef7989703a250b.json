{"cell_type":{"85002d52":"code","514da166":"code","a7d72234":"code","df55b1f1":"code","05048767":"code","f957c89c":"code","c7776c81":"code","a2c36122":"code","fe90dc75":"code","4704db33":"code","4c093871":"code","b3333b29":"code","fce510bc":"code","fefdc2df":"code","e32bf932":"code","b751a798":"code","6fa9d9f8":"code","1ce2bce4":"code","cc7e9fa9":"code","69415d27":"code","1d199c04":"markdown","ff1edfe2":"markdown","9a6bb98e":"markdown","e3ce56d3":"markdown","ca1a3fdf":"markdown"},"source":{"85002d52":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport plotly.express as px\nimport datetime\nfrom datetime import date, timedelta\nfrom sklearn.cluster import KMeans\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nimport plotly.offline as py\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport statsmodels.api as sm\nfrom keras.models import Sequential\nfrom keras.layers import LSTM,Dense\nfrom keras.layers import Dropout\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\npy.init_notebook_mode(connected=True)","514da166":"cases = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")","a7d72234":"grp = cases.groupby(['ObservationDate', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\ngrp = grp.reset_index()\ngrp['Date'] = pd.to_datetime(grp['ObservationDate'])\ngrp['Date'] = grp['Date'].dt.strftime('%m\/%d\/%Y')\ngrp['Active'] = grp['Confirmed'] - grp['Recovered'] - grp['Deaths']\ngrp['Country'] =  grp['Country\/Region']\n\nfig = px.choropleth(grp, locations=\"Country\", locationmode='country names', \n                     color=\"Active\", hover_name=\"Country\/Region\",hover_data = [grp.Recovered,grp.Deaths,grp.Active],projection=\"natural earth\",\n                     animation_frame=\"Date\",width=800, height=500,\n                     color_continuous_scale='Reds',\n                     range_color=[1000,100000],\n\n                     title='World Map of Coronavirus')\n\nfig.update(layout_coloraxis_showscale=True)\npy.offline.iplot(fig)","df55b1f1":"data_frame=pd.read_csv(\"..\/input\/coronavirus-2019ncov\/covid-19-all.csv\")\ndata_frame.head()","05048767":"data_frame['Country\/Region'].unique()","f957c89c":"russia_frame = data_frame[data_frame['Country\/Region'] ==  'Russia']\nrussia_frame.head()","c7776c81":"confirmed_cases = russia_frame.Confirmed.max()\nconfirmed_cases","a2c36122":"death_cases=russia_frame.Deaths.max()\ndeath_cases","fe90dc75":"recovered_cases=russia_frame.Recovered.max()\nrecovered_cases","4704db33":"plt.figure(figsize=(50,40))\nplt.bar(russia_frame.Date, russia_frame.Confirmed,label=\"Confirmed Cases\")\nplt.bar(russia_frame.Date, russia_frame.Recovered,label=\"Recovered Cases\")\nplt.bar(russia_frame.Date, russia_frame.Deaths,label=\"Deaths\")\nplt.xlabel('Date')\nplt.ylabel(\"Count\")\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\n\nplt.legend(frameon=True, fontsize=42)\nplt.title('ConfirmedCases vs RecoveredCases vs Deaths',fontsize=30)\nplt.show()","4c093871":"f, ax = plt.subplots(figsize=(30,10))\nax=sns.scatterplot(x=\"Date\", y=\"Confirmed\", data=russia_frame,\n             color=\"black\",label = \"ConfirmedCases\")\nax=sns.scatterplot(x=\"Date\", y=\"Recovered\", data=russia_frame,\n             color=\"red\",label = \"RecoveredCases\")\nax=sns.scatterplot(x=\"Date\", y=\"Deaths\", data=russia_frame,\n             color=\"blue\",label = \"Death\")\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=20)\n\nplt.legend(frameon=True, fontsize=22)\nplt.plot(russia_frame.Date,russia_frame.Confirmed,zorder=1,color=\"black\")\nplt.plot(russia_frame.Date,russia_frame.Recovered,zorder=1,color=\"red\")\nplt.plot(russia_frame.Date,russia_frame.Deaths,zorder=1,color=\"blue\")","b3333b29":"import folium\nmap = folium.Map(location=[55.5852,95.2384 ], zoom_start=4,tiles='Open street map')\n\nfor lat, lon,Confirmed,Recovered,Deaths in zip(russia_frame['Latitude'], russia_frame['Longitude'],russia_frame['Confirmed'],russia_frame['Recovered'],russia_frame['Deaths']):\n    folium.CircleMarker([lat, lon],\n                        radius=5,\n                        color='red',\n                        \n                      popup =(\n                    'Confirmed: ' + str(Confirmed) + '<br>'\n                      'Recovered: ' + str(Recovered) + '<br>'\n                      'Deaths: ' + str(Deaths) + '<br>'),\n\n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(map)\nmap","fce510bc":"#russia_frame = russia_frame.tail(5)","fefdc2df":"confirmed_r = russia_frame.loc[:,['Date','Confirmed']]\nconfirmed_r.columns = ['ds','y']\nconfirmed_r.head()","e32bf932":"m=Prophet()\nm.fit(confirmed_r)\nfuture=m.make_future_dataframe(periods=15)\nforecast_confirmed_r=m.predict(future)\nforecast_confirmed_r","b751a798":"confirmed_forecast = forecast_confirmed_r.loc[:,['ds','trend']]\nconfirmed_forecast = confirmed_forecast[confirmed_forecast['trend']>0]\nconfirmed_forecast.columns = ['Date','Confirmed']\nconfirmed_forecast","6fa9d9f8":"fig_r = plot_plotly(m, forecast_confirmed_r)\npy.iplot(fig_r) \n\nfig_r = m.plot(forecast_confirmed_r,xlabel='Date',ylabel='Confirmation Count')","1ce2bce4":"global_data = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\n","cc7e9fa9":"def smoother(inputdata,w,imax):\n    data = 1.0*inputdata\n    data = data.replace(np.nan,1)\n    data = data.replace(np.inf,1)\n    #print(data)\n    smoothed = 1.0*data\n    normalization = 1\n    for i in range(-imax,imax+1):\n        if i==0:\n            continue\n        smoothed += (w**abs(i))*data.shift(i,axis=0)\n        normalization += w**abs(i)\n    smoothed \/= normalization\n    return smoothed\n\ndef growth_factor(confirmed):\n    confirmed_iminus1 = confirmed.shift(1, axis=0)\n    confirmed_iminus2 = confirmed.shift(2, axis=0)\n    return (confirmed-confirmed_iminus1)\/(confirmed_iminus1-confirmed_iminus2)\n\ndef growth_ratio(confirmed):\n    confirmed_iminus1 = confirmed.shift(1, axis=0)\n    return (confirmed\/confirmed_iminus1)\n\n# This is a function which plots (for in input country) the active, confirmed, and recovered cases, deaths, and the growth factor.\ndef plot_country_active_confirmed_recovered(country):\n    \n    # Plots Active, Confirmed, and Recovered Cases. Also plots deaths.\n    country_data = global_data[global_data['Country\/Region']==country]\n    table = country_data.drop(['SNo','Province\/State', 'Last Update'], axis=1)\n    table['ActiveCases'] = table['Confirmed'] - table['Recovered'] - table['Deaths']\n    table2 = pd.pivot_table(table, values=['ActiveCases','Confirmed', 'Recovered','Deaths'], index=['ObservationDate'], aggfunc=np.sum)\n    table3 = table2.drop(['Deaths'], axis=1)\n   \n    # Growth Factor\n    w = 0.5\n    table2['GrowthFactor'] = growth_factor(table2['Confirmed'])\n    table2['GrowthFactor'] = smoother(table2['GrowthFactor'],w,5)\n\n    # 2nd Derivative\n    table2['2nd_Derivative'] = np.gradient(np.gradient(table2['Confirmed'])) #2nd derivative\n    table2['2nd_Derivative'] = smoother(table2['2nd_Derivative'],w,7)\n\n\n    #Plot confirmed[i]\/confirmed[i-1], this is called the growth ratio\n    table2['GrowthRatio'] = growth_ratio(table2['Confirmed'])\n    table2['GrowthRatio'] = smoother(table2['GrowthRatio'],w,5)\n    \n    #Plot the growth rate, we will define this as k in the logistic function presented at the beginning of this notebook.\n    table2['GrowthRate']=np.gradient(np.log(table2['Confirmed']))\n    table2['GrowthRate'] = smoother(table2['GrowthRate'],0.5,3)\n    \n    # horizontal line at growth rate 1.0 for reference\n    x_coordinates = [1, 100]\n    y_coordinates = [1, 1]\n    #plots\n    table2['Deaths'].plot(title='Deaths')\n    plt.show()\n    table3.plot() \n    plt.show()\n    table2['GrowthFactor'].plot(title='Growth Factor')\n    plt.plot(x_coordinates, y_coordinates) \n    plt.show()\n    table2['2nd_Derivative'].plot(title='2nd_Derivative')\n    plt.show()\n    table2['GrowthRatio'].plot(title='Growth Ratio')\n    plt.plot(x_coordinates, y_coordinates)\n    plt.show()\n    table2['GrowthRate'].plot(title='Growth Rate')\n    plt.show()\n\n    return ","69415d27":"plot_country_active_confirmed_recovered('Russia')","1d199c04":"Importing **Important ** libraries:","ff1edfe2":"# Pls UPVOTE,it helps to keep me motivated","9a6bb98e":"Importing Data and Seeing what hides inside it :)","e3ce56d3":"> Last Updated : 11.5.20\n\n> Contact if you want update!!\n\n> And Pls Upvote!!","ca1a3fdf":"Preparing the data prophet prediction:"}}