{"cell_type":{"80260331":"code","aa98f0a6":"code","72cbfbb1":"code","701938db":"code","9c61f151":"code","e413d8d9":"code","d5c9f403":"code","e522628f":"code","c62ffe24":"code","cf513d75":"code","39e02fc0":"code","2bd5bee0":"code","4901fe5b":"code","01049df3":"code","35b86f11":"code","8d03e749":"code","0205901a":"code","8eda7c4c":"code","1d3b74a5":"code","ace93462":"code","20802c41":"code","01226cb3":"code","f69cd2a7":"code","06e616d7":"code","a5d8b726":"code","c85d77b5":"markdown","75ae287e":"markdown","0aab0c51":"markdown","d04fcab8":"markdown","d7a049cd":"markdown","effaa1e5":"markdown","d0bf219a":"markdown","3ce7d528":"markdown","fc0407d9":"markdown","38da809c":"markdown","559369c4":"markdown","392727f5":"markdown","e48c05f0":"markdown","40f94410":"markdown","9069076b":"markdown","7170eadf":"markdown","bfdb31c1":"markdown","aa59971d":"markdown"},"source":{"80260331":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.preprocessing import StandardScaler\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_auc_score","aa98f0a6":"data = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","72cbfbb1":"data.dtypes","701938db":"data[\"Residence_type\"] = data[\"Residence_type\"].apply(lambda x: 1 if x == \"Urban\" else 0)\ndata[\"ever_married\"] = data[\"ever_married\"].apply(lambda x: 1 if x == \"Yes\" else 0)\ndata[\"gender\"] = data[\"gender\"].apply(lambda x: 1 if x == \"Male\" else 0)\ndata = pd.get_dummies(data=data, columns=['smoking_status', 'work_type'])","9c61f151":"data.isnull().sum()","e413d8d9":"data['bmi'] = data['bmi'].fillna(data['bmi'].mean())","d5c9f403":"std = StandardScaler()\ncolumns = ['avg_glucose_level', 'bmi', 'age']\ndata[columns] = std.fit_transform(data[['avg_glucose_level', 'bmi', 'age']])","e522628f":"print(\"Data shape : \", data.shape)\nprint(\"stroke Data : \", sum(data.stroke == 1))\nprint(\"stroke Data : \", sum(data.stroke == 0))","c62ffe24":"data.drop(columns='id', axis=1, inplace=True)","cf513d75":"X = data[['gender', 'age', 'hypertension', 'heart_disease', 'ever_married',\n          'Residence_type', 'avg_glucose_level', 'bmi',\n          'smoking_status_Unknown', 'smoking_status_formerly smoked',\n          'smoking_status_never smoked', 'smoking_status_smokes',\n          'work_type_Govt_job', 'work_type_Never_worked', 'work_type_Private',\n          'work_type_Self-employed', 'work_type_children']].values\ny = data['stroke'].values","39e02fc0":"smote = SMOTE()\nx_smote, y_smote = smote.fit_resample(X, y)","2bd5bee0":"X_train, X_test, y_train, y_test = train_test_split(x_smote, y_smote, test_size=0.1, stratify = y_smote)","4901fe5b":"print(\"stroke Data in Train : \", sum(y_train))\nprint(\"stroke Data in Test : \", sum(y_test))","01049df3":"print(\"\\n\\n\")\nprint(\"=\" * 80)\nprint(\"=\" * 15, \"SVM\", \"=\" * 15)\nprint(\"=\" * 80)\nsvc = SVC(random_state=0, kernel='linear', gamma='auto',C=1)\nsvc.fit(X_train, y_train)","35b86f11":"svc_score = svc.score(X_train, y_train)\nsvc_test = svc.score(X_test, y_test)","8d03e749":"y_pred = svc.predict(X_test)","0205901a":"print('\\nTraining Score', svc_score)\nprint('Testing Score ', svc_test)\nprint(\"confusion_matrix  : \\n\", confusion_matrix(y_test, y_pred))\nprint(\"classification_report : \\n\", classification_report(y_test, y_pred, zero_division=True))","8eda7c4c":"auc = roc_auc_score(y_test,y_pred)\nauc","1d3b74a5":"print(\"\\n\\n\")\nprint(\"=\" * 80)\nprint(\"=\" * 35, \"XGBOOST\", \"=\" * 35)\nprint(\"=\" * 80)\nxgboost = GradientBoostingClassifier(random_state=0)\nxgboost.fit(X_train, y_train)","ace93462":"xgboost_score = xgboost.score(X_train, y_train)\nxgboost_test = xgboost.score(X_test, y_test)\n","20802c41":"y_pred = xgboost.predict(X_test)","01226cb3":"print('\\nTraining Score', xgboost_score)\nprint('Testing Score ', xgboost_test)\nprint(\"confusion_matrix  : \\n\", confusion_matrix(y_test, y_pred))\nprint(\"classification_report : \\n\", classification_report(y_test, y_pred))","f69cd2a7":"auc = roc_auc_score(y_test,y_pred)\nauc","06e616d7":"print(\"\\n\\n\")\nprint(\"=\" * 80)\nprint(\"=\" * 35, \"MLPClassifier\", \"=\" * 35)\nprint(\"=\" * 80)\nmlp = MLPClassifier(hidden_layer_sizes=(300, 300, 300), max_iter=2000, alpha=0.00001,\n                    solver='adam', verbose=1, random_state=21)\nmlp.fit(X_train, y_train)\n\nmlp_score = mlp.score(X_train, y_train)\nmlp_test = mlp.score(X_test, y_test)\n\ny_pred = mlp.predict(X_test)\n\nprint('\\nTraining Score', mlp_score)\nprint('Testing Score ', mlp_test)\nprint(\"confusion_matrix  : \\n\", confusion_matrix(y_test, y_pred))\nprint(\"classification_report : \\n\", classification_report(y_test, y_pred))","a5d8b726":"auc = roc_auc_score(y_test,y_pred)\nauc","c85d77b5":"**Here the datset will be split for training and testing using train_test_split.**","75ae287e":"Conclusion:\n\nHello Fellow Coders, this is my first submission and beginning to the AI\/ML Journey. I recently started learning and got help of friends as well as submissions provided by other coders and just continued trial and errors to complete the task.\n\nSo if you find it helpful give it an Upvote and most importantly any suggestions, description of mistakes in my code and learnings are most welcomed. I would like to gain knowlege and move further in my journey of learning AI\/ML. \n\nprint(\"Thank-You\")","0aab0c51":"**Here the accuracy is 91 which is significantly increasd by the use of GradientBoostingClassifier. But in order to obtain a more enhanced version \"MLPClassifier\" is used.**","d04fcab8":"3. So the last step of data preprocessing is to make sure that the data does not contain any kind of imbalance. Here, \"Standard Scalar\" is used to remove imbalance in avg_glucose_level, bmi and age columns. ","d7a049cd":"**Here as we can see the last recorded accuracy is 96 which we obtained after merging different types of alorithms.**","effaa1e5":"**Data PreProcessing:**","d0bf219a":"2. Before providing data for modelling we need to ensure that our dataset does not contain any null values. But as we can see above \"bmi\"column has null values which we have filled using mean of the column. ","3ce7d528":"**Here, column \"id\" does not need to be a part of model training so it is removed.**","fc0407d9":"**Exploring \"Stroke\" column which shows high level of imbalance which will be dealt with later.**","38da809c":"**Import Neccessary Files:**","559369c4":"**Dataset is divided into Target And Features. Here X contains the features and y contains the target.**","392727f5":"**So above displayed is the accuracy which we archieved using SVM which is still in minimal terms. In order to enhahnce it more \"GradientBoostingClassifier\" is used.**","e48c05f0":"1. As we can see in the above list of datatypes, columns named gender, ever_married, work_type, Residence_type, smoking_status all are of object data type which need to be converted to numerical values before providing them for training the model. So here we mapped them to numerical values such as 1 or 0.  ","40f94410":"**As it was explored above that there is a high imbalance so \"smote\" is used which is an oversampling technique where the synthetic samples are generated for the minority class.**","9069076b":"**Read Data:**","7170eadf":"**Problem Statement:**\n\n* A stroke occurs when the blood supply to part of your brain is interrupted or reduced, preventing brain tissue from getting oxygen and nutrients. Brain cells begin to die in minutes.\n\n* A stroke is a medical emergency, and prompt treatment is crucial. Early action can reduce brain damage and other complications.\n\n**Goal:**\n\n* To create a prediction system to predict the stroke in its early stages.\n\n**Approach:**\n\n* A mixture of SVM, XGBOOST And MLPCLASSIFIER is used to archieve maximum accuracy.","bfdb31c1":"**Now the training and Testing data is provided to SVM and model is trained.**","aa59971d":"**Analysing Data Read From CSV File:**"}}