{"cell_type":{"b415fdf7":"code","d5a7272b":"code","03acf61a":"code","767dcbab":"code","4f6d502a":"code","14941477":"code","4c97cfb4":"code","79b9cdb8":"code","700f3f20":"code","06eac6af":"code","2a2246a3":"code","14466c0f":"code","9c7e3031":"code","b3f1f7ff":"code","3c06a545":"markdown","c6ff39f8":"markdown","ebff6caf":"markdown","9344b9ad":"markdown","380b70c0":"markdown","4aabb6bf":"markdown","66063da0":"markdown","7e92f9dc":"markdown","4f36f9ed":"markdown","7a71c927":"markdown","ebe975ce":"markdown","117eb21e":"markdown","dddba516":"markdown","6d815d73":"markdown","2d7e81a0":"markdown","1b4e3be8":"markdown"},"source":{"b415fdf7":"#!pip install xlrd\n!pip -q install openpyxl\n#!pip install altair\n#!pip install pandas","d5a7272b":"import pandas as pd\nimport altair as alt\nfrom IPython.display import display, HTML\nfrom datetime import date\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","03acf61a":"#hide\n\n# Translations and mapping dictionaries\n\nLANG = 'en' # 'de' 'en'\n\nif LANG == 'en':\n    MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    \n    # titles \/ labels \n    T_AGE = 'Age'\n    T_AGE_GRP = 'Age group'\n    T_ALL = 'All'\n    T_AND = 'and'\n    T_DEATHS = 'Deaths'\n    T_DEATHS_BC = 'Deaths before Covid19 (monthly average)'\n    T_DEATHS_BY_AGE = 'Deaths by Age (monthly average)'\n    T_DEATHS_BY_STATE = 'Deaths by State (monthly average)'\n    T_DEATHS_C = 'Deaths during Covid19 (monthly average)'\n    T_DEATHS_MONTHLY = 'Deaths (monthly average)'\n    T_DEATHS_HTH = 'Deaths per 100,000 (monthly average)'\n    T_DENSITY = 'Population per km\\xb2'\n    T_DENSITY2 = 'Population density'\n    T_MEASURE = 'Measure'\n    T_MONTH = 'Month'\n    T_MORT_INC = 'Increased mortality'\n    T_PERIOD = 'Period'\n    T_PERIOD_SPLIT = 'Split of the Periods'\n    T_PER_HTH = 'per 100,000'\n    T_STATE = 'State'\n    T_STATE_MEASURES = ['Deaths', 'Deaths per 100,000']\n    \nelif LANG == 'de':\n    MONTHS = ['Jan', 'Feb', 'Mrz', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez']\n    \n    # titels \/ labels\n    T_AGE = 'Alter'\n    T_AGE_GRP = 'Altersgruppe'\n    T_ALL = 'Alle'\n    T_AND = 'und'\n    T_DEATHS = 'Todesf\u00e4lle'\n    T_DEATHS_BC = 'Tote vor Covid19 (monatl. \\xd8)'\n    T_DEATHS_BY_AGE = 'Todesf\u00e4lle nach Alter (monatl. \\xd8)'\n    T_DEATHS_BY_STATE = 'Todesf\u00e4lle nach Bundesland (monatl. \\xd8)'\n    T_DEATHS_C = 'Tote seit Covid19 (monatl. \\xd8)'\n    T_DEATHS_MONTHLY = 'Todesf\u00e4lle (monatl. \\xd8)'\n    T_DEATHS_HTH = 'Tote je 100.000 Einwohner (monatl. \\xd8)'\n    T_DENSITY = 'Einwohner je km\\xb2'\n    T_DENSITY2 = 'Bev\u00f6lkerungsdichte'\n    T_MEASURE = 'Kennzahl'\n    T_MONTH = 'Monat'\n    T_MORT_INC = 'Zunahme der Todesf\u00e4lle'\n    T_PERIOD = 'Zeitraum'\n    T_PERIOD_SPLIT = 'Aufteilung der Zeitr\u00e4ume'\n    T_PER_HTH = 'je 100.000'\n    T_STATE = 'Bundesland'\n    T_STATE_MEASURES = ['Todesf\u00e4lle', 'Tote je 100.000']\n\nAGE_MAP = {'0-15' : 15, \n           '15-30' : 30, \n           '30-35' : 35, \n           '35-40' : 40, \n           '40-45' : 45, \n           '45-50' : 50, \n           '50-55' : 55, \n           '55-60' : 60,\n           '60-65' : 65, \n           '65-70' : 70, \n           '70-75' : 75, \n           '75-80' : 80, \n           '80-85' : 85, \n           '85-90' : 90, \n           '90-95' : 95,\n           '95+' : 100,\n           '0-65' : 65,\n           '65+': 100}\n\nSTATE_MAP = {'Schleswig-Holstein': 'SH', \n             'Hamburg': 'HH', \n             'Niedersachsen': 'NI', \n             'Bremen': 'HB',\n             'Nordrhein-Westfalen': 'NW', \n             'Hessen':'HE', \n             'Rheinland-Pfalz': 'RP',\n             'Baden-W\u00fcrttemberg': 'BW', \n             'Bayern': 'BY', \n             'Saarland': 'SL', \n             'Berlin': 'BE', \n             'Brandenburg': 'BB', \n             'Mecklenburg-Vorpommern': 'MV',\n             'Sachsen': 'SN',\n             'Sachsen-Anhalt': 'ST',\n             'Th\u00fcringen': 'TH'\n}\n","767dcbab":"data_in = pd.read_excel(io = \"..\/input\/mortality-by-age-and-state-in-germany-20162021\/sonderauswertung-sterbefaelle.xlsx\", sheet_name = 'D_2016-2021_Monate_AG_Ins', header = 8, index_col = 0,engine='openpyxl')\n\ndata_in = data_in.drop(['Unnamed: 15', 'Unnamed: 16'], axis = 1).reset_index(drop=True)\ndata_in.columns = ['year', 'age'] + MONTHS\n\n# drop total\ndata_in = data_in[data_in.age != 'Insgesamt'].reset_index(drop=True)\n\n# clean age column\ndata_in['age'] = data_in['age'].str.replace(' u. mehr', '+')\n# define upper bound of age range\ndata_in['age_to'] = data_in['age'].map(AGE_MAP)\n\n#data_in.tail()","4f6d502a":"# unpivot on months\ndata = data_in.melt(id_vars=['year', 'age', 'age_to'] , value_vars = MONTHS).dropna()\ndata.columns = ['year', 'age', 'age_to', 'month', 'deaths']\n\n# drop January and February 2016 to get four full years\ndata = data[(data['year']>2016) | (data['month'].isin(MONTHS[2:]))].reset_index(drop=True)\n\n# mark covid period (2020\/Mar - 2021\/Feb) and non-covid period (2016\/Mar - 2020\/Feb)\ndata['period'] = '2020\/Mar - 2021\/Feb'\ndata.loc[(data.year < 2020) | ((data.year == 2020) & (data.month.isin(['Jan', 'Feb']))), 'period'] = '2016\/Mar - 2020\/Feb'\n\n#data.tail()","14941477":"alt.Chart(data).mark_rect().encode(\n    x=alt.X('month:N', sort=MONTHS, title=''),\n    y=alt.Y('year:N', title=''),\n    color=alt.Color('period', legend=alt.Legend(title=T_PERIOD))\n).properties(title = T_PERIOD_SPLIT, width=580, height=200)\n","4c97cfb4":"# set html position for dropbox\ndisplay(HTML(\"\"\"\n<style>\nform.vega-bindings {\n  position: absolute;\n  right: 50px;\n  top: 0px;\n}\n<\/style>\n\"\"\"))\n\n\nline = alt.Chart(data).mark_line().encode(\n    x = alt.X('age_to', title=T_AGE),\n    y = alt.Y('mean(deaths)', scale = alt.Scale(domain=[0, 23000])),\n    color = alt.Color('period', legend=alt.Legend(title=T_PERIOD)),\n)\n\nband = alt.Chart(data).mark_errorband(extent='iqr').encode(\n    x = alt.X('age_to', title=T_AGE),\n    y = alt.Y('deaths', title=T_DEATHS, scale= alt.Scale(domain=[0, 23000])),\n    color = alt.Color('period', legend=alt.Legend(title=T_PERIOD))\n)\n\nmonths_dropdown = alt.binding_select(options=[None]+MONTHS[2:]+MONTHS[:2],labels=[T_ALL]+MONTHS[2:]+MONTHS[:2], name=T_MONTH + ': ')\nmonths_select = alt.selection_single(fields=['month'], bind=months_dropdown, name='month')\n\nfilter_line = line.add_selection(\n    months_select\n)\n\n\n# Create a selection that chooses the nearest point & selects based on x-value\nnearest = alt.selection(type='single', nearest=True, on='mouseover',\n                        fields=['age_to'], empty='none')\n# Transparent selectors across the chart. This is what tells us\n# the x-value of the cursor\nselectors = alt.Chart(data).mark_point().encode(\n    x='age_to:Q',\n    opacity=alt.value(0),\n).add_selection(\n    nearest\n)\n\n# Draw points on the line, and highlight based on selection\npoints = line.mark_point().encode(\n    opacity=alt.condition(nearest, alt.value(1), alt.value(0))\n)\n\n# Draw text labels near the points, and highlight based on selection\ntext = line.mark_text(align='left', dx=5, dy=-5).encode(\n    text=alt.condition(nearest, alt.Text('mean(deaths):Q', format='.0f'), alt.value(' '))\n)\n\n# Draw a rule at the location of the selection\nrules = alt.Chart(data).mark_rule(color='gray').encode(\n    x='age_to:Q',\n).transform_filter(\n    nearest\n)\n\n# Put the five layers into a chart and bind the data\nplot_interactive = (\n    alt.layer(\n        band + filter_line.interactive()  , selectors, points, rules, text\n    ).transform_filter(\n     months_select \n    ).properties(title=T_DEATHS_BY_AGE, width=580, height=290)\n)\n\n\ndef plot_static(month):\n    return alt.layer(line + band).transform_filter(alt.datum.month == month).properties(title=month, width=150, height=75)\n\nplot_interactive","79b9cdb8":"\n((plot_static(MONTHS[2]) | plot_static(MONTHS[3]) | plot_static(MONTHS[4])) & \n (plot_static(MONTHS[5]) | plot_static(MONTHS[6]) | plot_static(MONTHS[7])) &\n (plot_static(MONTHS[8]) | plot_static(MONTHS[9]) | plot_static(MONTHS[10])) & \n (plot_static(MONTHS[11]) | plot_static(MONTHS[0]) | plot_static(MONTHS[1])))\n","700f3f20":"# Load deaths by state\ndata_in = pd.read_excel(io = \"..\/input\/mortality-by-age-and-state-in-germany-20162021\/sonderauswertung-sterbefaelle.xlsx\", \n                        sheet_name = 'BL_2016_2021_Monate_AG_Ins', \n                        header = 8, \n                        index_col = 0,\n                        engine='openpyxl')\ndata_in = data_in.drop(['Unnamed: 16'], axis = 1)\n\ndata_in.columns = ['year', 'state', 'age'] + MONTHS\n\n# drop total\ndata_in = data_in[data_in.age != 'Insgesamt'].reset_index(drop=True)\n\n# clean age column\ndata_in['age'] = data_in['age'].str.replace(' u. mehr', '+')\n# define upper bound of age range\ndata_in['age_to'] = data_in['age'].map(AGE_MAP)\n# map state abbreviations\ndata_in['state_abbrv'] = data_in['state'].map(STATE_MAP)\n\n# Load population and population density by state\n\ndata_pop = pd.read_excel(io = \"..\/input\/mortality-by-age-and-state-in-germany-20162021\/02-bundeslaender.xlsx\", \n                         sheet_name = 'Bundesl\u00e4nder_mit_Hauptst\u00e4dten', \n                         header = 4, \n                         engine='openpyxl')\ndata_pop = data_pop[data_pop['Unnamed: 0'].notna()][['Unnamed: 0', 'Unnamed: 2', 'insgesamt', 'je km2']]\ndata_pop.columns = ['state', 'sq_km', 'population', 'pop_density']\ndata_pop['state'] = data_pop['state'].str.slice(start=4)\n\ndata_pop = data_pop[data_pop['state'].isin(list(STATE_MAP.keys()))].reset_index(drop = True)\n\n\n# merege deaths data and popuilation data\n\ndata_in = data_in.merge(data_pop, on = 'state')\n\n#data_in.head()","06eac6af":"# unpivot by months\ndata = data_in.melt(id_vars=['year', 'state_abbrv', 'age', 'age_to', 'pop_density', 'population'] , value_vars = MONTHS).dropna()\ndata.columns = ['year', 'state_abbrv', 'age', 'age_to', 'pop_density', 'population', 'month', 'deaths']\n\n# drop January and February 2016 to get four full years\ndata = data[(data['year']>2016) | (data['month'].isin(MONTHS[2:]))]\n\n# mark covid period (2020\/Mar - 2021\/Feb) and non-covid period (2016\/Mar - 2020\/Feb)\ndata['period'] = '2020\/Mar - 2021\/Feb'\ndata.loc[(data.year < 2020) | ((data.year == 2020) & (data.month.isin(['Jan', 'Feb']))), 'period'] = '2016\/Mar - 2020\/Feb'\n\n# aggregate data\ndata = data.groupby(['state_abbrv', 'age', 'period'], as_index=False)['state_abbrv', 'age', 'period', 'pop_density', 'population', 'deaths'].mean()\n\n# define new measures \ndata['deaths_per_pop'] = data['deaths'] \/ data['population'] * 100000\n\n# unpivot by measures \ndata_m = data.melt(id_vars=['state_abbrv', 'age', 'period'] , value_vars = ['deaths', 'deaths_per_pop']).dropna()\ndata_m.columns = ['state_abbrv', 'age', 'period', 'measure', 'val']\n\n#data_m.head()","2a2246a3":"# allow more then 5000 data entries\n#alt.data_transformers.enable('json')\n#alt.data_transformers.enable('default', max_rows=6000)\n\n# prepare dropdown\nmeasures = ['deaths', 'deaths_per_pop']\nmeasure_dropdown = alt.binding_select(options=measures, labels = T_STATE_MEASURES, name=T_MEASURE + ': ')\nmeasure_select = alt.selection_single(fields=['measure'], bind=measure_dropdown, name='measure')\n\nbase = alt.Chart(data_m).transform_calculate(\n    color_age = 'datum.period == \"2016\/Mar - 2020\/Feb\" ? (datum.age == \"0-65\" ? \"#106ba3\" : \"#48aff0\") : (datum.age == \"0-65\" ? \"#bf7326\" : \"#f57c00\")'\n)\n\n# plot chart\nbar_chart = base.mark_bar().encode(\n    x= alt.X('val', title = T_DEATHS_MONTHLY),\n    y = alt.Y('period', title = ''),\n    color = alt.Color('color_age:N', scale=None), #alt.Color('age', legend=alt.Legend(title=T_AGE)),\n    row = alt.Row('state_abbrv', header = alt.Header(title = ' ')),\n    order = alt.Order(\n      'state_abbrv',\n      sort ='ascending'\n    ),\n    tooltip = [alt.Tooltip('state_abbrv', title = T_STATE),\n               alt.Tooltip('age', title = T_AGE_GRP),\n               alt.Tooltip('val', title = T_DEATHS_MONTHLY, format = '.0f')\n              ]\n).add_selection(\n    measure_select\n).transform_filter(\n    measure_select  \n).properties(width=580, height=50, title = f'{T_DEATHS_BY_STATE} {T_AND} {T_AGE_GRP}')\n\n\nlegend_df =  pd.DataFrame({'age_group' : ['0-65',\"0-65 \", '65+','65+ '],\n                           'color': [ \"#106ba3\",\"#bf7326\",\"#48aff0\",\"#f57c00\"],\n                          'period': ['2016\/Mar - 2020\/Feb (0-65)', '2020\/Mar - 2021\/Feb (0-65)', '2016\/Mar - 2020\/Feb (65+)', '2020\/Mar - 2021\/Feb (65+)']})\n\n#https:\/\/medium.com\/dataexplorations\/focus-generating-an-interactive-legend-in-altair-9a92b5714c55\nlegend = alt.Chart(legend_df\n).mark_rect(#filled=True, size=200\n).transform_calculate(\n    color_legend = 'datum.color'\n).encode(\n    y=alt.Y('period:O', axis=alt.Axis(orient='right'), title = ' '),\n    color=alt.Color('color_legend:N', scale=None),\n    order = alt.Order(\n      'period:O',\n      sort ='ascending'\n    )\n)\n\nbar_chart | legend","14466c0f":"\ndata_dpp = data.groupby(['state_abbrv', 'period'], as_index=False).agg(deaths=('deaths','sum'), \n                                                                       pop_density= ('pop_density','min'), \n                                                                       population= ('population','min'))\n\ndata_dpp['deaths_per_pop'] = data_dpp['deaths'] \/ data_dpp['population'] * 100000\n\ndata_dpp = data_dpp.pivot(index=['state_abbrv', 'pop_density'], columns = ['period'], values=['deaths', 'deaths_per_pop'])\n\ndata_dpp.columns = ['deaths_pre_covid_period', \n                    'deaths_covid_period',\n                    'deaths_per_pop_pre_covid_period', \n                    'deaths_per_pop_covid_period']\n\ndata_dpp = data_dpp.reset_index()\n\ndata_dpp['incr_mortality'] = (data_dpp.deaths_covid_period)\/(data_dpp.deaths_pre_covid_period)-1\n\n#data_dpp","9c7e3031":"\nscl_min = data_dpp['deaths_per_pop_pre_covid_period'].min() *0.9\nscl_max = data_dpp['deaths_per_pop_covid_period'].max() * 1.1\n\nc_tooltip = [alt.Tooltip('state_abbrv', title = T_STATE),\n             alt.Tooltip('incr_mortality', title = T_MORT_INC, format='.2%'),\n             alt.Tooltip('deaths_pre_covid_period', title = T_DEATHS_BC, format='.0f'),\n             alt.Tooltip('deaths_per_pop_pre_covid_period', title = T_PER_HTH, format='.0f'),\n             alt.Tooltip('deaths_covid_period', title = T_DEATHS_C, format='.0f'),\n             alt.Tooltip('deaths_per_pop_covid_period', title = ' '+T_PER_HTH, format='.0f')\n            ]\n\nbase = alt.Chart(data_dpp).encode(\n    y=alt.Y('pop_density:Q', title = T_DENSITY),\n    color = alt.Color('state_abbrv', legend=alt.Legend(title=T_STATE)),\n    tooltip = c_tooltip)\n\n\nc1 = base.mark_point().encode(\n    x=alt.X('deaths_per_pop_pre_covid_period:Q', \n            title = T_DEATHS_HTH, \n            scale=alt.Scale(domain=(scl_min, scl_max))),\n    size=alt.Size('deaths_pre_covid_period:Q', legend=alt.Legend(title=T_DEATHS_MONTHLY))\n).interactive(bind_x = False)\n\nc2 = base.mark_circle().encode(\n    x=alt.X('deaths_per_pop_covid_period:Q', \n            title = T_DEATHS_HTH, \n            scale=alt.Scale(domain=(scl_min, scl_max))),\n    size= alt.Size('deaths_covid_period:Q', legend=alt.Legend(title=T_DEATHS_MONTHLY))\n).interactive(bind_x = False)\n\ndiffbar = base.mark_errorbar().encode(\n    x= alt.X('deaths_per_pop_pre_covid_period:Q', \n            title = T_DEATHS_HTH),\n    x2= alt.X2(\"deaths_per_pop_covid_period:Q\", \n            title = T_DEATHS_HTH)\n)\n\n(alt.layer( c1 + c2 + diffbar)\n    .properties(width=580, height=400, title = f'{T_DEATHS_BY_STATE} {T_AND} {T_DENSITY2}')\n    .configure_title(fontSize=15, offset=15, orient='top', anchor='middle')\n)","b3f1f7ff":"print(f\"{data_dpp[['pop_density', 'incr_mortality']].corr().values[1,0]:.4f}\")","3c06a545":"# Technical conclusion\nWith Altair you can easily setup interactive charts and integrate them into notebooks. Their website contains a variety of examples [AA1]. Some questions are also answered in their Github Issue tracker [AA2].\n\nI spent some time debugging JavaScript when I used the bindings incorrectly. However, there was finally a solution to every problem [AA2] or workarounds such as for the legend in the bar diagram [AG18]. As expected, a bit of practice is neccessary to get used to a new framework.\n\nI will certainly use the framework elsewhere.","c6ff39f8":"# Deaths by state\nIn the next diagram, the age groups *0-65* and *65+* can be evaluated for the two periods grouped by *state*. By drop-down box, you can choose between the key figures *Deaths* or *Deaths per 100,000 inhabitants*.","ebff6caf":"## Observation\nIn the age groups under 55, there was no excess mortality during these periods. In the age groups from 80 years and older, mortality increased massively.","9344b9ad":">Important: (**Updated on 2021\/11\/22**) First of all here are some clarifying personal notes: **I'm vaccinated!** The guidelines of of the [STIKO](https:\/\/www.rki.de\/DE\/Content\/Infekt\/EpidBull\/Archiv\/2021\/Ausgaben\/38_21.pdf?__blob=publicationFile) (official German board for vaccination recommendation) have always been plausible. Therefore my eldest daughter got vaccinated, too. And our younger children will also get their vaccination as soon as a recommendation exists. So, if you look at the numbers below, keep in mind, those were the numbers from **Spring 2021**, before Delta hit Germany and during a time where kids had more restrictions than adults.","380b70c0":"## Observation\nNorth Rhine-Westphalia (NW) has the largest number of deaths, since it is the state with highest population. In each state, there are increases in death rates in the Covid19 period. However, only minimal increases in Hesse (HE) and Bavaria (BY) can be seen for the age groups under the age of 65. In the other states, there is no noticeable increase in this age group.\n\nThere are smaller variations looking at the number of deaths per 100.000 inhabitants in the age group below 65. The increase in deaths in North Rhine-Westphalia (NW) is slightly lower than in Bavaria (BY) and roughly as high as in Baden-W\u00fcrttemberg (BW). Saxony (SN) and Brandenburg (BB) have the strongest increases.\n\n> Note: Only *deaths* are evaluated. No other aspects (such as demographic aspects) are taken into account.","4aabb6bf":"Below are the average deaths by age for each month. The list starts with the month of March.","66063da0":"In this notebook, I want to find out how easy it is to create interactive charts in notebooks. As a framework, I will use [Altair](https:\/\/altair-viz.github.io\/).\n\nIn order to make the contribution interesting, I evaluate the death rates from Germany over the last five years. I construct two periods - the first period before and the second one during Covid19.\n\nWe will analyze these questions: \n- How do deaths per age group and month change?\n- How do deaths per state change?\n\nThe first part describes the origin and processing of the data. Then, charts are built around the above questions.\nFinally, a technical conclusion to the framework follows.\n\n> Important: The death rates are not an indicator of the danger of Covid19. They only reflect the number of people who died retrospectively.","7e92f9dc":"## Aggregation of data\nIn the calculations, the values are averaged over a period of time. Depending on the evaluation, this happens over the whole period or per month. The first and third quartile of the aggregated data may also be shown as shading in the diagrams.\nIn some charts, the calculated points are interpolated to increase readability.","4f36f9ed":"# Deaths by state and population density\nThe last diagram refers to the *population density* of the *states* and the amount of *deaths per 100,000 inhabitants*.","7a71c927":"# Source of data\nFor the analysis of deaths in Germany, the current death data from the *Statistisches Bundesamt* (Federal Statistical Office) [SB21] are used. The data include the number of deaths by age group or state on a monthly basis. In this blog post, the monthly death figures for the period March 2016 to February 2021 are examined. The most recent data are currently only available until February 2021 and include some estimations, which are explained in the data source in the tab \"Hinweise\".\nIn addition to the death figures, data on the population density of the states are processed [SB20]. These figures refere to the reference date 31.12.2019.\n\n# Procession of the data \n## Preprocessing\nThe evaluation period is limited to March 2016 until February 2021. The period in which Corona was heavily active in Germany is simplified here to March 2020 (when Covid19 triggered the first major social changes in Germany) until February 2021 (orange). The pre-Covid19 period is set to March 2016 until February 2020 (blue). Thus, the Covid19 period covers exactly one year and the pre-Covid19 period exactly four years. Thus, both periods remain comparable without serious seasonal deviations. The split of the periods is illustrated in the diagram below.","ebe975ce":"# Deaths by age\nThe diagram below shows the average number of *deaths per month* per *age group*. One age group covers five years. The point *age 55* includes, for example, all deaths between 50 and 55. Deaths of those over 100 years of age are shown in point *100*.\n\nThe values are aggregated over the pre-Covid19 period (blue) and the Covid19 period (orange). In the diagram, the *months* can be selected via drop-down box.","117eb21e":"## Observation\n\nThe city-states Hamburg (HH) and Bremen (HB) show a moderate increase in deaths despite their high population density. Berlin (BE) instead has a high increase in death rate. Schleswig-Holstein (SH) recorded the lowest increase.\n\nThe correlation coefficient of *population density* and *increase in mortality* is:","dddba516":"Hence, There is no correlation for this comparison. \n\n> Note: Only deaths are evaluated. No other aspects (such as demographic aspects) are taken into account.","6d815d73":"> Tip: For some of the charts there are control elements in the upper right corner, such as drop-down boxes. The mouse wheel can be used to zoom and a chart can be reset by double-clicking.","2d7e81a0":"# Deaths by age group and states in Germany from 2016 to 2021\n> Interactive analysis of death rates before and during Covid19.\n\nThis notebook is almost a copy of my [blog post](https:\/\/joatom.github.io\/ai_curious\/eda\/2021\/04\/06\/mortality-germany.html). You can find a German version [here](https:\/\/joatom.github.io\/ai_curious\/eda\/2021\/04\/06\/mortality-germany_de.html).\n\nPublished: *April 6th 2021*","1b4e3be8":"# References\n## Data sources\nThe data used here are from the \"Statistisches Bundesamt\" (Federal Statistical Office) and are subject to the license \"dl-de\/by-2-0\". The license text can be found at www.govdata.de\/dl-de\/by-2-0. The data were modified exclusively within this notebook by executing the specified program code for the purpose of analysis.\n- [SB21] Statistisches Bundesamt (Destatis), 2021 (published 2012\/03\/30), *Sterbef\u00e4lle - Fallzahlen nach Tagen, Wochen, Monaten, Altersgruppen, Geschlecht und Bundesl\u00e4ndern f\u00fcr Deutschland 2016 - 2021*, visited 2021\/04\/03, <https:\/\/www.destatis.de\/DE\/Themen\/Gesellschaft-Umwelt\/Bevoelkerung\/Sterbefaelle-Lebenserwartung\/Tabellen\/sonderauswertung-sterbefaelle.xlsx?__blob=publicationFile>\n- [SB20] Statistisches Bundesamt (Destatis), 2020 (published 2020\/09\/02), *Bundesl\u00e4nder mit Hauptst\u00e4dten nach Fl\u00e4che, Bev\u00f6lkerung und Bev\u00f6lkerungsdichte am 31.12.2019*, visited 2021\/04\/03, <https:\/\/www.destatis.de\/DE\/Themen\/Laender-Regionen\/Regionales\/Gemeindeverzeichnis\/Administrativ\/02-bundeslaender.xlsx?__blob=publicationFile>\n\n## Other references\nA lot of the coding is derived from various examples of the Altair homepage and from great examples in the coresponding Github Issue tracker answered by https:\/\/github.com\/jakevdp.\n- [AA1] https:\/\/altair-viz.github.io\/gallery\/index.html\n- [AA2] https:\/\/github.com\/altair-viz\/altair\/issues\/\n- [AG18] A. Gordon, 2018 (published 2018\/10\/06), *Focus: generating an interactive legend in Altair*, visited 2021\/04\/05, <https:\/\/medium.com\/dataexplorations\/focus-generating-an-interactive-legend-in-altair-9a92b5714c55>"}}