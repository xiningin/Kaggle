{"cell_type":{"389143d6":"code","5cfe9ea6":"code","085a3c83":"code","64795d6a":"code","cb225296":"code","990f1a67":"code","3610c33b":"code","0aebac9d":"code","493077a8":"code","c9fdd49c":"code","8a9be0bc":"code","0a973229":"code","f24cb257":"code","7ca75fda":"code","a15b9431":"code","275d57ff":"code","29ae0a60":"code","1b3ad49b":"code","a3543226":"code","14719772":"markdown","501f5a1e":"markdown","731642c7":"markdown","041a6333":"markdown","12eb5a49":"markdown","55c36e95":"markdown","5f83af3f":"markdown","a209a880":"markdown","e242b24f":"markdown"},"source":{"389143d6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib.pyplot import rcParams\nrcParams['figure.figsize'] = 15,10","5cfe9ea6":"dateparser = lambda dates: pd.datetime.strptime(dates,'%Y-%m')\ndata = pd.read_csv('..\/input\/accidental-deaths-in-usa-monthly.csv',header = 0, names = ['Month', 'Deaths'], parse_dates = ['Month'],index_col='Month',date_parser=dateparser)\ndata = pd.DataFrame(data)\ndata.head(10)","085a3c83":"plt.plot(data)","64795d6a":"ts = data[\"Deaths\"]\nts.head(10)","cb225296":"plt.plot(ts)","990f1a67":"from statsmodels.tsa.stattools import adfuller\ndef test_stationarity(ts):\n    rolling_mean = ts.rolling(12).mean()\n    rolling_std = ts.rolling(12).std()\n    \n    plt.plot(ts,color=\"blue\", label=\"Original\")\n    plt.plot(rolling_mean,color=\"red\", label=\"Rolling Mean\")\n    plt.plot(rolling_std,color=\"green\", label = \"Rolling Std\")\n    plt.legend(loc=\"best\")\n    plt.title('Rolling Mean and Standard Deviation')\n    plt.show(block=False)\n    \n    print(\"Results of Dickey Fuller Test\")\n    dfresult = adfuller(ts,autolag = \"AIC\")\n    dfoutput=pd.Series(dfresult[0:4],index=['Test Statistics','p-value','#lags used','#obv used'])\n    for key,value in dfresult[4].items():\n        dfoutput[\"Critical Value (%s)\"%key] = value\n    print(dfoutput)","3610c33b":"test_stationarity(ts)","0aebac9d":"ts_log=np.log(ts)\nplt.plot(ts_log)","493077a8":"ts_log_diff = ts_log - ts_log.shift()\nplt.plot(ts_log_diff)","c9fdd49c":"ts_log_diff.dropna(inplace=True)\ntest_stationarity(ts_log_diff)","8a9be0bc":"ts_log_diff = ts_log_diff - ts_log_diff.shift()\nplt.plot(ts_log_diff)","0a973229":"ts_log_diff.dropna(inplace=True)\ntest_stationarity(ts_log_diff)","f24cb257":"from statsmodels.tsa.stattools import acf,pacf\n\nlag_acf=acf(ts_log_diff,nlags=20)\nlag_pacf=pacf(ts_log_diff,nlags=20,method=\"ols\")\n\nplt.subplot(\"121\")\nplt.plot(lag_acf)\nplt.axhline(y=0,color=\"gray\",linestyle=\"--\")\nplt.axhline(y=1.96\/np.sqrt(len(ts_log_diff)),color=\"gray\",linestyle=\"--\")\nplt.axhline(y=-1.96\/np.sqrt(len(ts_log_diff)),color=\"gray\",linestyle=\"--\")\nplt.xticks(np.arange(0,21,1.0))\nplt.title(\"Autocorrelation Function\")\n\nplt.subplot(\"122\")\nplt.plot(lag_pacf)\nplt.axhline(y=0,color=\"gray\",linestyle=\"--\")\nplt.axhline(y=1.96\/np.sqrt(len(ts_log_diff)),color=\"gray\",linestyle=\"--\")\nplt.axhline(y=-1.96\/np.sqrt(len(ts_log_diff)),color=\"gray\",linestyle=\"--\")\nplt.xticks(np.arange(0,21,1.0))\nplt.title(\"Partial Autocorrelation Function\")\n\nplt.tight_layout()","7ca75fda":"p,d,q = 1,2,1","a15b9431":"from statsmodels.tsa.arima_model import ARIMA\n\nmodel = ARIMA(ts_log, order=(p,d,q))\nresults_ARIMA = model.fit(disp=-1)\nplt.plot(ts_log_diff)\nplt.plot(results_ARIMA.fittedvalues,color=\"red\")\nplt.title(\"RSS = %.4f\"% sum((results_ARIMA.fittedvalues-ts_log_diff)**2))\n#plt.title('RMSE: %.4f'% np.sqrt(((results_ARIMA.fittedvalues-ts_log_diff)**2).mean()))","275d57ff":"predictions_ARIMA_diff = pd.Series(results_ARIMA.fittedvalues, copy=True)\nprint(predictions_ARIMA_diff.head(10))","29ae0a60":"predictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()\nprint(predictions_ARIMA_diff_cumsum.head(10))","1b3ad49b":"predictions_ARIMA_log = pd.Series(ts_log.iloc[0], index=ts_log.index)\npredictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum,fill_value=0)\nprint(predictions_ARIMA_log.head(10))","a3543226":"predictions_ARIMA = np.exp(predictions_ARIMA_log)\nplt.plot(ts)\nplt.plot(predictions_ARIMA)\nplt.title('RMSE: %.4f'% np.sqrt(sum((predictions_ARIMA-ts)**2)\/len(ts)))","14719772":"## Converting Dataframe into a Series","501f5a1e":"Test statistic is less tha 1% critical value - 99% confidence","731642c7":"### Determining the values of p and q from the ACF and PACF graphs. d is the order of differencing = 2","041a6333":"## PACF and ACF graphs","12eb5a49":"## Second-order differencing","55c36e95":"## Fitting ARIMA model","5f83af3f":"## Parsing the data as a datatime object","a209a880":"## Logarithmic Transform to smoothen the data","e242b24f":"### A method to test the stationarity of the time series"}}