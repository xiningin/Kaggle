{"cell_type":{"76685867":"code","e871f02e":"code","086d288c":"code","1c1af18f":"code","3dcfd8e1":"code","810980ef":"code","e99bdf86":"code","b259e338":"code","e356f5ed":"code","ae773f4c":"code","b8e5fd46":"code","9fe0ab95":"code","be5d2581":"code","8363c06f":"code","e1915fa4":"code","15a38b5c":"code","56d2362e":"code","22fa7a28":"code","96f5c77c":"code","2ab79d4b":"code","04857b39":"code","bf25febf":"code","8c22823b":"code","9ebf546b":"code","0e825a9f":"code","93568e64":"code","97a9cb99":"code","dce7fcfe":"code","8ac20702":"code","52281fdd":"code","b8ebba0b":"code","04792604":"code","2f157580":"code","412612a6":"code","22d32756":"code","541ba08a":"code","ef08d0da":"code","ff33967a":"code","23c39ed0":"code","1c0f6692":"code","7d28316d":"code","de7586d1":"code","700de210":"code","261a7813":"code","158e44b5":"code","98487228":"code","e2c8bc40":"code","d3e6d90b":"code","cecec105":"code","7699a82d":"code","70d99b4a":"code","20e0b9d5":"code","913623a3":"code","97687ee2":"code","1d32eedb":"code","c1f7a529":"code","cd71061e":"code","dc3278f6":"code","8ef9568b":"code","e3d0da22":"code","e34b14c6":"code","7358fc6a":"code","7e38a906":"code","f0e34ba2":"code","1396eea9":"code","30ee3188":"code","a3b7fbe0":"code","848f526d":"code","a13e884c":"code","b9c878fb":"code","275a2e3f":"code","12f90cb0":"code","29edbbb4":"code","87167baf":"code","148cb686":"code","f5a934de":"code","6931ff9a":"code","f3d01538":"code","40f30999":"code","ca194c6b":"code","5ffd1c3f":"code","56d1821b":"code","57651b0c":"code","ca3b0b91":"code","4695d050":"code","bfa10f89":"code","6bcea50a":"code","c77aea97":"code","8e16b86b":"code","2c26d18c":"code","fc85e238":"code","3343bec5":"code","e78ae73f":"code","ac1093d5":"code","e14f4bdf":"code","c63795b7":"code","7f16ab62":"code","1f923df8":"code","9304352f":"code","5b4efe4b":"code","7b31b3ac":"markdown","7d9defc6":"markdown","1b3a9c31":"markdown","23c17fec":"markdown","4db86997":"markdown","c43704a9":"markdown","9b1cc79a":"markdown","5b7d4c98":"markdown","0a1ab157":"markdown","09eb0889":"markdown","244046f6":"markdown","c0aeb06e":"markdown","2977dd61":"markdown","1a034d1c":"markdown","a7553a62":"markdown","72c7a626":"markdown","1f348347":"markdown","41ac14cf":"markdown","c6ef15ab":"markdown","53d8931c":"markdown","14ecd3e3":"markdown","4f49379c":"markdown","34fede30":"markdown","1a6f7ac6":"markdown","02950379":"markdown","ac4a579d":"markdown","53f4d086":"markdown","8430bc4a":"markdown","09c381cd":"markdown"},"source":{"76685867":"import numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nfrom collections import Counter\nfrom sklearn.preprocessing import scale\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score, StratifiedKFold\nfrom sklearn.metrics import mean_squared_error, r2_score, confusion_matrix, accuracy_score \nfrom sklearn.metrics import roc_curve, classification_report, roc_auc_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier","e871f02e":"train_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","086d288c":"train_df.columns","1c1af18f":"train_df.head()","3dcfd8e1":"train_df.describe().T","810980ef":"train_df.info()","e99bdf86":" def bar_plot (variable):\n        \n        var = train_df[variable]\n        varValue = var.value_counts()\n        \n        plt.figure(figsize=(9,4))\n        plt.bar(varValue.index, varValue)\n        plt.xticks(varValue.index, varValue.index.values)\n        plt.ylabel(\"Frequency\")\n        plt.title(variable)\n        plt.show()\n        print(\"{}: \\n {}\".format(variable, varValue))","b259e338":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","e356f5ed":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor i in category2:\n    print(\"{} \\n\".format(train_df[i].value_counts()))","ae773f4c":"def plot_hist(variable):\n    plt.figure(figsize=(12,6))\n    plt.hist(train_df[variable],bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","b8e5fd46":"numeric = [\"Fare\",\"Age\"] #\"PassengerId\"\nfor i in numeric:\n    plot_hist(i)","9fe0ab95":"(train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False)\n .mean().sort_values(by = \"Survived\", ascending = False))","be5d2581":"(train_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False)\n .mean().sort_values(by = \"Survived\", ascending = False))","8363c06f":"(train_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False)\n .mean().sort_values(by = \"Survived\", ascending = False))","e1915fa4":"(train_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False)\n .mean().sort_values(by = \"Survived\", ascending = False))","15a38b5c":"def detect_outlier(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        Q1 = np.percentile(df[c],25)\n        Q3 = np.percentile(df[c],75)\n        IQR = Q3 - Q1\n        outlier_step = IQR * 1.5\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","56d2362e":"train_df.loc[detect_outlier(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","22fa7a28":"train_df = train_df.drop(detect_outlier(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),\n                    axis = 0).reset_index(drop = True)","96f5c77c":"train_df.isnull().sum()","2ab79d4b":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop=True)","04857b39":"train_df.head()","bf25febf":"train_df.columns[train_df.isnull().any()]","8c22823b":"train_df.isnull().sum()","9ebf546b":"## Fill Missing Value (Embarked & Fare)","0e825a9f":"train_df[train_df[\"Embarked\"].isnull()]","93568e64":"train_df.boxplot(column = \"Fare\", by = \"Embarked\")\nplt.show()","97a9cb99":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","dce7fcfe":"train_df[train_df[\"Fare\"].isnull()]","8ac20702":"np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"])","52281fdd":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","b8ebba0b":"train_df[train_df[\"Fare\"].isnull()]","04792604":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt =\".2f\")\nplt.show()","2f157580":"# Fare is important (0.26)","412612a6":"g = sns.catplot(x=\"SibSp\", y=\"Survived\", data = train_df, kind = \"bar\", height = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","22d32756":"# \u00e7ok SibSp \u00f6l\u00fcme sebep","541ba08a":"g = sns.catplot(x=\"Parch\", y=\"Survived\", data = train_df, kind = \"bar\", height = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","ef08d0da":"#SibSp ve Parch 3 ten birle\u015ftirilebilir.","ff33967a":"g = sns.catplot(x=\"Pclass\", y=\"Survived\", data = train_df, kind = \"bar\", height = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","23c39ed0":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot,\"Age\", bins = 25)\nplt.show()","1c0f6692":"# 10 ya\u015fa kadar survived iyi\n# 80 ya\u015f iyi\n# 20 ya\u015f k\u00f6t\u00fc\n# yolcu da\u011f\u0131l\u0131m\u0131 15-35 aras\u0131\n# ya\u015fs\u0131zlar\u0131 doldururuz","7d28316d":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\")\ng.map(plt.hist,\"Age\", bins = 25)\ng.add_legend\nplt.show()","de7586d1":"# Pclass is important","700de210":"g = sns.FacetGrid(train_df, row = \"Embarked\")\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\")\ng.add_legend\nplt.show()","261a7813":"# mavi kad\u0131n\n# kad\u0131nlar daha fazla hayatta\n# C liman\u0131nda erkekler daha fazla","158e44b5":"g = sns.FacetGrid(train_df, row = \"Embarked\", col =\"Survived\", height = 2.5 )\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend\nplt.show()","98487228":"# more money more survived\n# Fare may be categorical","e2c8bc40":"train_df[train_df[\"Age\"].isnull()]","d3e6d90b":"# Age tahmini i\u00e7in sex olamaz\nsns.catplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\");","cecec105":"# 1.class older > 2.class > 3.class\nsns.catplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\", data = train_df, kind = \"box\");","7699a82d":"sns.catplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.catplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","70d99b4a":"# Sex i o ve 1 yapt\u0131k\ntrain_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"] ]","20e0b9d5":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True);","913623a3":"# \"SibSp\",\"Parch\",\"Pclass\" correlated with \"Age\"","97687ee2":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) &(train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","1d32eedb":"train_df[train_df[\"Age\"].isnull()]","c1f7a529":"train_df[\"Name\"].head(10)","cd71061e":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","dc3278f6":"train_df[\"Title\"].head(10)","8ef9568b":"sns.countplot(x = \"Title\", data = train_df)\nplt.xticks(rotation = 60);","e3d0da22":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\n                                               \"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" \n                     else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head()","e34b14c6":"sns.countplot(x = \"Title\", data = train_df)\nplt.xticks(rotation = 60);","7358fc6a":"g = sns.catplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","7e38a906":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)\ntrain_df.head()","f0e34ba2":"train_df = pd.get_dummies(train_df,columns = [\"Title\"])\ntrain_df.head()","1396eea9":"train_df.head()","30ee3188":"train_df[\"Famsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","a3b7fbe0":"train_df.head()","848f526d":"g = sns.catplot(x=\"Famsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival Probability\")\nplt.show()","a13e884c":"train_df[\"Famsize\"] = [1 if i<5 else 0 for i in train_df[\"Famsize\"]]","b9c878fb":"train_df.head(10)","275a2e3f":"sns.countplot(x=\"Famsize\", data = train_df);","12f90cb0":"g = sns.catplot(x=\"Famsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival Probability\")\nplt.show()","29edbbb4":"# k\u00fc\u00e7\u00fck aileler, kalabal\u0131k ailelere g\u00f6re daha Survived","87167baf":"train_df = pd.get_dummies(train_df,columns = [\"Famsize\"])\ntrain_df.head()","148cb686":"train_df[\"Embarked\"].head()","f5a934de":"sns.countplot(x=\"Embarked\", data = train_df);","6931ff9a":"train_df = pd.get_dummies(train_df,columns = [\"Embarked\"])\ntrain_df.head()","f3d01538":"train_df[\"Ticket\"].head(20)","40f30999":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","ca194c6b":"train_df[\"Ticket\"].head(10)","5ffd1c3f":"train_df.head()","56d1821b":"train_df = pd.get_dummies(train_df,columns = [\"Ticket\"],prefix = \"T\")\ntrain_df.head(10)","57651b0c":"sns.countplot(x=\"Pclass\", data = train_df);","ca3b0b91":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns = [\"Pclass\"])\ntrain_df.head(10)","4695d050":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns = [\"Sex\"])\ntrain_df.head(10)","bfa10f89":"train_df.drop(labels = [\"Cabin\"], axis = 1, inplace = True)","6bcea50a":"train_df.columns","c77aea97":"train_df_len","8e16b86b":"test = train_df[train_df_len:]\ntest.drop(labels = \"Survived\", axis =1, inplace= True)","2c26d18c":"test.head()","fc85e238":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis =1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\", len(X_train))\nprint(\"X_test\", len(X_test))\nprint(\"y_train\", len(y_train))\nprint(\"y_test\", len(y_test))\nprint(\"test\", len(test))","3343bec5":"log_reg = LogisticRegression(solver = \"liblinear\")\nlog_reg.fit(X_train,y_train)\nacc_log_train = round(log_reg.score(X_train,y_train)*100,2)\nacc_log_test = round(log_reg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","e78ae73f":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             MLPClassifier(random_state = random_state),\n             GradientBoostingClassifier(random_state = random_state),\n             KNeighborsClassifier()]\n\ngbc_param_gird = {\"max_depth\":[3,5],\n                  \"n_estimators\":[100,200]}\n\nmlp_param_grid = {\"alpha\": [0.01,0.001],\n                  \"max_iter\": [100,200]}\n\ndt_param_grid = {\"min_samples_split\" : [10],\n                 \"max_depth\":[3]}\n\nsvc_param_grid = {\"kernel\": [\"rbf\"],\n                  \"gamma\": [0.01],\n                  \"C\": [200]}\n\nrf_param_grid = {\"max_features\" : [3],\n                 \"min_samples_split\" : [3],\n                 \"min_samples_leaf\" : [3],\n                 \"bootstrap\" : [False],\n                 \"n_estimators\" : [300], \n                 \"criterion\" : [\"gini\"]}\n\nlogreg_param_grid = {\"C\": [1],\n                     \"solver\" : [\"liblinear\"],\n                     \"penalty\":[\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": [10]}\n\nclassifier_param =[dt_param_grid,svc_param_grid,rf_param_grid,\n                   logreg_param_grid,mlp_param_grid,gbc_param_gird,knn_param_grid]","ac1093d5":"cv_result = []\nbest_estimators =[]\n\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i],\n                      param_grid=classifier_param[i],\n                      cv = 10,\n                      scoring = \"accuracy\",\n                      n_jobs = -1,\n                      verbose = 2)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","e14f4bdf":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result,\n                         \"ML Models\":[\"DecisionTreeClassifier\",\n                                      \"SVM\",\n                                      \"RandomForestClassifier\",\n                                      \"LogisticRegression\",\n                                      \"MLPClassifier\",\n                                      \"GradientBoostingClassifier\",\n                                      \"KNeighborsClassifier\"]})\ncv_results","c63795b7":"g = sns.barplot( x = \"Cross Validation Means\",y = \"ML Models\",data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\");","7f16ab62":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                         (\"rfc\",best_estimators[2]),\n                                         (\"lr\",best_estimators[3]),\n                                         (\"mlb\",best_estimators[4]),\n                                         (\"gbc\",best_estimators[5])],\n                                         voting = \"soft\",\n                                         n_jobs = -1)\n\nvotingC = votingC.fit(X_train,y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","1f923df8":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\",sep = \";\", index = False)","9304352f":"results.head()","5b4efe4b":"!pip install kaggle","7b31b3ac":"<a id='3'><\/a>\n## Univariate Variable Analysis","7d9defc6":"# Visualization\n## Correlation","1b3a9c31":"# Modeling\n## Train-Test Split","23c17fec":"### Numerical : Age, PassengerId, Fair","4db86997":"## Hyperparameter Tuning - Grid Search - Cross Validation","c43704a9":"## Sex","9b1cc79a":"### Categorical : Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp, Parch","5b7d4c98":"## Age - Survived","0a1ab157":"## Simple Logistic Regression","09eb0889":"## Ensemble Modeling","244046f6":"## Parch - Survived","c0aeb06e":"## Embarked - Sex - Pclass - Survived","2977dd61":"## SibSp - Survived","1a034d1c":"## Embarked - Sex - Fare - Survived","a7553a62":"<a id='2'><\/a>\n# Variable Description\n1. PassengerId : unique Id number to each passenger\n1. Survived : passenger survived(1) or dead(0)\n1. Pclass : passenger class\n1. Name : passenger name\n1. Sex : gender of passenger\n1. Age : age of passenger\n1. SibSp : number of siblings\/spouses\n1. Parch : number of parents\/children\n1. Ticket : ticket number\n1. Fare : amount of money spent on ticket\n1. Cabin : cabin category\n1. Embarked : port where passenger embarked (C = Cherbourg, Q = Queenstown , S = Southampton)","72c7a626":"# Feature Engineering\n## Name -- Title","1f348347":"## Pclass - Survived - Age","41ac14cf":"## Drop Cabin","c6ef15ab":"# Outlier Detection","53d8931c":"# Missing  Value","14ecd3e3":"## Family Size","4f49379c":"## Embarked","34fede30":"## Pclass - Survived","1a6f7ac6":"## Prediction and Submission","02950379":"## Find & Fill Missing: Age Feature","ac4a579d":"<a id='1'><\/a>\n# Load and Check Data","53f4d086":"# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","8430bc4a":"## Pclass","09c381cd":"## Ticket"}}