{"cell_type":{"45f35245":"code","40b1c859":"code","cf8106f0":"code","1cd0410f":"code","038f53ed":"code","f1376905":"code","8128c1ea":"code","00d1c204":"code","427c0fc8":"code","0ca81b33":"code","70d4eb48":"code","17ccdc0a":"code","7aa41128":"code","b30e2cbd":"code","88eb5a0f":"code","dcbac95d":"code","c4ed9e3e":"markdown","a2088b24":"markdown","b6e16146":"markdown","e4f2a154":"markdown","b1ca48de":"markdown","67fb6e8a":"markdown","4d24adb9":"markdown","32aaf098":"markdown","88656d18":"markdown"},"source":{"45f35245":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np","40b1c859":"data_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\ntraining_tasks = sorted(os.listdir(training_path))\neval_tasks = sorted(os.listdir(evaluation_path))\n\nT = training_tasks\nTrains = []\nfor i in range(400):\n    task_file = str(training_path \/ T[i])\n    task = json.load(open(task_file, 'r'))\n    Trains.append(task)\n    \nE = eval_tasks\nEvals= []\nfor i in range(400):\n    task_file = str(evaluation_path \/ E[i])\n    task = json.load(open(task_file, 'r'))\n    Evals.append(task)\n","cf8106f0":"cmap = colors.ListedColormap(\n    ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n# 0:black, 1:blue, 2:red, 3:greed, 4:yellow,\n# 5:gray, 6:magenta, 7:orange, 8:sky, 9:brown\nplt.figure(figsize=(5, 2), dpi=200)\nplt.imshow([list(range(10))], cmap=cmap, norm=norm)\nplt.xticks(list(range(10)))\nplt.yticks([])\nplt.show()\n\ndef plot_task(task):\n    n = len(task[\"train\"]) + len(task[\"test\"])\n    fig, axs = plt.subplots(2, n, figsize=(4*n,8), dpi=50)\n    plt.subplots_adjust(wspace=0, hspace=0)\n    fig_num = 0\n    for i, t in enumerate(task[\"train\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Train-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Train-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    for i, t in enumerate(task[\"test\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Test-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Test-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    \n    plt.tight_layout()\n    plt.show()\n    \ndef plot_picture(x):\n    plt.imshow(np.array(x), cmap = cmap, norm = norm)\n    plt.show()\n    \ndef Defensive_Copy(A): \n    n = len(A)\n    k = len(A[0])\n    L = np.zeros((n,k), dtype = int)\n    for i in range(n):\n        for j in range(k):\n            L[i,j] = 0 + A[i][j]\n    return L.tolist()\n\ndef Create(task, task_id = 0):\n    n = len(task['train'])\n    Input = [Defensive_Copy(task['train'][i]['input']) for i in range(n)]\n    Output = [Defensive_Copy(task['train'][i]['output']) for i in range(n)]\n    Input.append(Defensive_Copy(task['test'][task_id]['input']))\n    return Input, Output\n\ndef flattener(pred):\n    str_pred = str([row for row in pred])\n    str_pred = str_pred.replace(', ', '')\n    str_pred = str_pred.replace('[[', '|')\n    str_pred = str_pred.replace('][', '|')\n    str_pred = str_pred.replace(']]', '|')\n    return str_pred\n\n\nexample_grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ndisplay(example_grid)\nprint(flattener(example_grid))\n","1cd0410f":"def Translation(x):\n    n = len(x)\n    k = len(x[0])\n    Best_r = n\n    Best_s = k\n    x0 = np.array(x, dtype = int)\n    for r in range(1,n):\n        if x0[:n-r,:].tolist() == x0[r:,:].tolist():\n            Best_r = r\n            break\n    for s in range(1,k):\n        if x0[:,:k-s].tolist() == x0[:,s:].tolist():\n            Best_s = s\n            break\n    if (Best_r, Best_s) == (n,k):\n        return []\n    r = Best_r\n    s = Best_s\n    E = {}\n    for i in range(n):\n        for j in range(k):\n            u = i%r\n            v = j%s\n            p = (u,v)\n            if p not in E:\n                E[p] = [(i,j)]\n            else:\n                E[p] = E[p]+[(i,j)]\n    Ans = []\n    for p in E:\n        item = E[p]\n        if len(item) > 1:\n            Ans.append(item)\n    return Ans\n            \n            \n\ndef Translation1D(x):\n    n = len(x)\n    k = len(x[0])\n \n    PossibleS = []\n    \n    for r in range(-n+1,n):\n        for s in range(-k+1,k): \n            if s == 0 and r == 0:\n                continue\n            Equiv_Colors = {}\n            possible = True\n            for i in range(n):\n                if possible == False:\n                    break\n                for j in range(k):\n                    u = i*s-j*r \n                    v = (i*r+j*s+100*(r*r+s*s))%(r*r+s*s)\n                    color = 0+  x[i][j]\n                    if (u,v) not in Equiv_Colors:\n                        Equiv_Colors[(u,v)] = color\n                    elif color != Equiv_Colors[(u,v)]:\n                        possible = False\n                        break\n            if possible:\n                PossibleS.append((r,s))\n                \n    if len(PossibleS) == 0:\n        return []\n   \n    Scores = []\n    for p in PossibleS:\n        r, s = p\n        Scores.append((abs(r)+abs(s),p))\n    Scores.sort()\n    Best_r, Best_s = Scores[0][1]\n    r = Best_r\n    s = Best_s\n    E = {}\n    for i in range(n):\n        for j in range(k):\n            u = i*s-j*r\n            v = (i*r+j*s+100*(r*r+s*s))%(r*r+s*s)\n            p = (u,v)\n            if p not in E:\n                E[p] = [(i,j)]\n            else:\n                E[p] = E[p]+[(i,j)]\n    Ans = []\n    for p in E:\n        item = E[p]\n        if len(item) > 1:\n            Ans.append(item)\n    return Ans\n   \ndef HorSym(x): \n    n = len(x)\n    k = len(x[0])\n    PossibleR = []\n    \n    for r in range(1,2*n-2): \n        possible = True\n        for i in range(n):\n            for j in range(k):\n                i1 = r-i\n                if i1 <0 or i1>=n:\n                    continue\n                color1 = x[i][j]\n                color2 = x[i1][j]\n                if color1 != color2:\n                    possible = False\n                    break\n        if possible:\n            PossibleR.append(r)\n    if len(PossibleR) == 0:\n        return []\n    \n    Scores = []\n    for r in PossibleR:\n        Scores.append((abs(r-n+1),r))\n    Scores.sort()\n    Best_r = Scores[0][1]\n    r = Best_r\n    Ans = []\n    for i in range(n):\n        for j in range(k):\n            i1 = r-i\n            if i1 <0 or i1 >= n:\n                continue\n            a = (i,j)\n            b = (i1,j)\n            i\n            if [a,b] in Ans or [b,a] in Ans or a==b:\n                continue\n            Ans.append([a,b])\n    return Ans\n\n\ndef VertSym(x):\n    n = len(x)\n    k = len(x[0])\n    PossibleS = []\n \n    for s in range(1,2*k-2): \n        possible = True\n        for i in range(n):\n            for j in range(k):\n                j1 = s-j\n                if j1 <0 or j1>=k:\n                    continue\n                color1 = x[i][j]\n                color2 = x[i][j1]\n                if  color1 != color2:\n                    possible = False\n                    break\n        if possible:\n            PossibleS.append(s)\n    if len(PossibleS) == 0:\n        return []\n    \n    Scores = []\n    for s in PossibleS:\n        Scores.append((abs(s-k+1),s))\n    Scores.sort()\n    Best_s = Scores[0][1]\n    s = Best_s\n    Ans = []\n    \n    for i in range(n):\n        for j in range(k):\n            j1 = s-j\n            if j1 <0 or j1 >= k:\n                continue\n            a = (i,j)\n            b = (i,j1)\n            if [a,b] in Ans or [b,a] in Ans or a==b:\n                continue\n            Ans.append([a,b])\n    return Ans\n    \n    \n\ndef NWSym(x):\n    n = len(x)\n    k = len(x[0])\n    PossibleS= []\n \n    for s in range(-k+2,n-1): \n        possible = True\n        for i in range(n):\n            for j in range(k):\n                i1 = s+j\n                j1 = -s+i\n                \n                if  i1 <0 or i1 >= n or j1 <0 or j1>=k:\n                    continue\n                color1 = x[i][j]\n                color2 = x[i1][j1]\n                if  color1 != color2:\n                    possible = False\n                    break\n        if possible:\n            PossibleS.append(s)\n    if len(PossibleS) == 0:\n        return []\n    \n    Scores = []\n    for s in PossibleS:\n        Scores.append((abs(s),s))\n    Scores.sort()\n    Best_s = Scores[0][1]\n    s = Best_s\n    Ans = []\n    \n    for i in range(n):\n        for j in range(k):\n            i1 = s+j\n            j1 = -s+i\n            if i1 <0 or i1 >=n or j1 <0 or j1 >= k:\n                continue\n            a = (i,j)\n            b = (i1,j1)\n            if [a,b] in Ans or [b,a] in Ans or a==b:\n                continue\n            Ans.append([a,b])\n    return Ans\n   \n\ndef NESym(x):\n    n = len(x)\n    k = len(x[0])\n    PossibleS = []\n \n    for s in range(2,n+k-3):\n        possible = True\n        for i in range(n):\n            for j in range(k):\n                i1 = s-j\n                j1 = s-i\n                \n                if  i1 <0 or i1 >= n or j1 <0 or j1>=k:\n                    continue\n                color1 = x[i][j]\n                color2 = x[i1][j1]\n                if  color1 != color2:\n                    possible = False\n                    break\n        if possible:\n            PossibleS.append(s)\n    if len(PossibleS) == 0:\n        return []\n    \n    Scores = []\n    for s in PossibleS:\n        Scores.append((abs(2*s-n-k-2),s))\n    Scores.sort()\n    Best_s = Scores[0][1]\n    s = Best_s\n    Ans = []\n    \n    for i in range(n):\n        for j in range(k):\n            i1 = s-j\n            j1 = s-i\n            if i1 <0 or i1 >=n or j1 <0 or j1 >= k:\n                continue\n            a = (i,j)\n            b = (i1,j1)\n            if [a,b] in Ans or [b,a] in Ans or a==b:\n                continue\n            Ans.append([a,b])\n    return Ans\n \n    \ndef Rotate180Sym(x):\n \n    n = len(x)\n    k = len(x[0])\n \n    PossibleS = []\n    \n    for r in range(1,2*n-2):\n        for s in range(1,2*k-2):#sum of indexes = r min 1, max = 2n-3\n           \n            possible = True\n            for i in range(n):\n                if possible == False:\n                    break\n                for j in range(k):\n                    i1 = r-i\n                    j1 = s-j\n                    if j1 <0 or j1>=k or i1<0 or i1 >=n:\n                        continue\n                    color1 = x[i][j]\n                    color2 = x[i1][j1]\n                    if color1 != color2:\n                        possible = False\n                        break\n            if possible:\n                PossibleS.append((r,s))\n    if len(PossibleS) == 0:\n        return []\n    \n    Scores = []\n    for p in PossibleS:\n        r, s = p\n        Scores.append((abs(r-n+1)+abs(s-k+1),p))\n    Scores.sort()\n    Best_r, Best_s = Scores[0][1]\n    r = Best_r\n    s = Best_s\n    Ans = []\n    \n    for i in range(n):\n        for j in range(k):\n            i1 = r-i\n            j1 = s-j\n            if i1 <0 or i1 >=n or j1 <0 or j1 >= k:\n                continue\n            a = (i,j)\n            b = (i1,j1)\n            if [a,b] in Ans or [b,a] in Ans or a==b:\n                continue\n            Ans.append([a,b])\n    return Ans\n   \ndef Rotate90Sym(x):\n    n = len(x)\n    k = len(x[0])\n \n    PossibleS = []\n   \n    \n    for r in range(1,2*n-2):\n        for s in range(1,2*k-2): \n            if (s+r)%2 != 0:\n                continue\n            u = (r-s)\/\/2\n            v = (r+s)\/\/2\n            possible = True\n            for i in range(n):\n                if possible == False:\n                    break\n                for j in range(k):\n                    Neig = [ (v-j, -u+i), (r-i,s-j), (j+u,v-i) ]\n                    for i1, j1 in Neig:\n                        if j1 <0 or j1>=k or i1<0 or i1 >=n:\n                            continue\n                        color1 = x[i][j]\n                        color2 = x[i1][j1]\n                        if color1 != color2:\n                            possible = False\n                            break\n            if possible:\n                PossibleS.append((r,s))\n    \n    if len(PossibleS) == 0:\n        return []\n\n    Scores = []\n    for p in PossibleS:\n        r, s = p\n        Scores.append((abs(r-n+1)+abs(s-k+1),p))\n    Scores.sort()\n    Best_r, Best_s = Scores[0][1]\n    r = Best_r\n    s = Best_s\n    u = (r-s)\/\/2\n    v = (r+s)\/\/2\n    Ans = []\n    for i in range(n):\n        for j in range(k):\n            Neig = [ (v-j, -u+i), (r-i,s-j), (j+u,v-i) ]\n            N2 = [(i,j)]\n            for i1, j1 in Neig:\n                if i1 <0 or i1 >=n or j1 <0 or j1 >= k:\n                    continue\n                else:\n                    N2.append((i1,j1))\n            N2.sort()\n            if len(N2) ==1 or N2 in Ans:\n                continue\n            Ans.append(N2)\n          \n    return Ans\n\ndef ReportColorChange(x,y):\n    n= len(x)\n    k = len(x[0])\n    if len(x)!= len(y) or len(x[0]) != len(y[0]):\n        return -1\n    \n    ChangingColors = []\n    for i in range(n):\n        for j in range(k):\n            color1 = x[i][j]\n            color2 = y[i][j]\n            if color1 != color2 and color1 not in ChangingColors:\n                ChangingColors.append(color1)\n                \n    for i in range(n):\n        for j in range(k):\n            color1 = x[i][j]\n            color2 = y[i][j]\n            if color1 != color2 and color2 in ChangingColors:\n                return -1\n    ColorsP = [] #Partially Disappearing Colors\n    ColorsC = [] #Completely Disappearing Colors\n    \n    for i in range(n):\n        for j in range(k):\n            color1 = x[i][j]\n            color2 = y[i][j]\n            if color2 in ChangingColors and color2 not in ColorsP:\n                ColorsP.append(color2)\n    for c in ChangingColors:\n        if c not in ColorsP:\n            ColorsC.append(c)\n    ColorsP.sort()\n    ColorsC.sort()\n    return ColorsP, ColorsC\n\n\ndef Equivalence1(x,y,L):\n    n= len(x)\n    k = len(x[0])\n    if len(x)!= len(y) or len(x[0]) != len(y[0]):\n        return -1\n    Report = ReportColorChange(x,y)\n    if Report == -1:\n        return -1\n    ColorsP, ColorsC = Report\n    F = [Translation, Translation1D, HorSym, VertSym, NWSym, NESym, Rotate90Sym, Rotate180Sym]\n    A = [ ] \n    for i in L:\n        f = F[i]\n        A = A+ f(y)\n    G = {}\n    for i in range(n):\n        for j in range(k):\n            G[(i,j)] = (i,j)\n    for Class in A:\n        for p in Class:\n            for q in Class:\n                if G[p] == G[q]:\n                    continue\n                else:\n                    a = G[p]\n                    b = G[q]\n                    if a < b:\n                        G[q] = a\n                    else:\n                        G[p] = b\n    H = {}\n    for i in range(n):\n        for j in range(k):\n            p = (i,j)\n            while G[p] != p:\n                p = G[p]\n            if p not in H:\n                H[p] = [(i,j)]\n            else:\n                H[p] = H[p]+[(i,j)]\n   \n    for key in H: #key gives an equivalence class, where key is the smallest element\n        item = H[key]\n        Colors1 = [] #will contain the different colors of the eqivalence class\n        Colors2 = [] # the new color of the orbit\n        for i, j in item:\n            c1 = x[i][j]\n            c2 = y[i][j]\n            if c1 not in Colors1:\n                Colors1.append(c1)\n                \n            if c2 not in Colors2:\n                Colors2.append(c2)\n        \n        if len(Colors2) != 1:\n            plot_picture(y)\n            print(\"Problem\")\n            print(item)\n            return -1\n            \n        # Allowed cases : \n        # 1 : both Colors1 and Colors2 contain one element and they agree\n        # 2 : Colors1 contain exactly one element that is not partially or completely disappearing and that\n        # agrees with the new color for the orbit            \n            \n        Colors3 = []\n        for c in Colors1:\n            if c not in ColorsP+ColorsC:\n                Colors3.append(c)\n        if (len(Colors3) > 1 or (len(Colors3) == 1 and Colors3 != Colors2) or \n            (len(Colors3) == 0 and Colors1 != Colors2)):\n            return -1\n       \n    return 1\n            \n\n\n\n\nCut = 30\n\ndef Translation_Params(x, badcolor = 20):\n    n = len(x)\n    k = len(x[0])\n    x0 = np.array(x, dtype = int)\n    R = []\n    S = []\n    for r in range(1,n):\n        possible = True\n        for j in range(k):\n            if possible == False:\n                break\n            for t in range(r):\n                Col = []\n                for i in range(t,n,r):\n                    color = x[i][j]\n                    if color != badcolor and color not in Col:\n                        Col.append(color)\n                if len(Col) >1:\n                    possible = False\n                    break\n        if possible:\n            R.append(r)\n    \n    for s in range(1,k):\n        possible = True\n        for i in range(n):\n            if possible == False:\n                break\n            for t in range(s):\n                Col = []\n                for j in range(t,k,s):\n                    color = x[i][j]\n                    if color != badcolor and color not in Col:\n                        Col.append(color)\n                if len(Col) >1:\n                    possible = False\n                    break\n        if possible:\n            S.append(s)  \n            \n \n    R.append(n)\n    S.append(k)\n    Param = []\n    Scores = []\n    for t in range(1,n+k):\n        for r in R:\n            for s in S:\n                if r+s == t:\n                    Param.append((r,s))\n                    Scores.append(t)\n                    \n    Sym_Level = 0\n    if Param != []:\n        r,s = Param[0]\n        Sym_Level = 2 - r\/n - s\/k\n   \n                   \n    return Param[:Cut], Scores[:Cut], Sym_Level\n            \n            \n\ndef Translation1D_Params(x, badcolor = 20):\n    n = len(x)\n    k = len(x[0])\n \n    PossibleS = []\n    \n    for r in range(-n+1,n):\n        for s in range(-k+1,k): \n            if s == 0 and r == 0:\n                continue\n            Equiv_Colors = {}\n            possible = True\n            for i in range(n):\n                if possible == False:\n                    break\n                for j in range(k):\n                    u = i*s-j*r \n                    v = (i*r+j*s+100*(r*r+s*s))%(r*r+s*s)\n                    color = 0+  x[i][j]\n                    if (u,v) not in Equiv_Colors or Equiv_Colors[(u,v)] == badcolor:\n                        Equiv_Colors[(u,v)] = color\n                    elif color != badcolor and color !=Equiv_Colors[(u,v)]:\n                        possible = False\n                        break\n            if possible:\n                PossibleS.append((r,s))\n    \n    if PossibleS == []:\n        return [], [], 0\n    Scores = []\n    for p in PossibleS:\n        r, s = p\n        Scores.append((abs(r)+abs(s),p))\n    Scores.sort()\n    Ans = [item[1] for item in Scores]\n    Penalty = [item[0] for item in Scores]\n    \n    Sym_Level = 0\n    if Ans != []:\n        r,s = Ans[0]\n        Sym_Level = 1 -(abs(r)+abs(s))\/(n+k)\n \n    return Ans[:Cut], Penalty[:Cut], Sym_Level\n   \ndef HorSym_Params(x, badcolor = 20): \n    n = len(x)\n    k = len(x[0])\n    PossibleR = []\n    \n    for r in range(1,2*n-2): \n        possible = True\n        for i in range(n):\n            for j in range(k):\n                i1 = r-i\n                if i1 <0 or i1>=n:\n                    continue\n                color1 = x[i][j]\n                color2 = x[i1][j]\n                if color1 != color2 and color1 != badcolor and color2 != badcolor:\n                    possible = False\n                    break\n        if possible:\n            PossibleR.append(r)\n            \n    if PossibleR == []:\n        return [], [], 0\n    Scores = []\n    \n    for r in PossibleR:\n        Scores.append((abs(r-n+1),r))\n    \n    Scores.sort()\n    Ans = [item[1] for item in Scores]\n    \n    Penalty = [item[0] for item in Scores]\n    \n    Sym_Level = 0\n    if Ans != []:\n        r = Ans[0]\n        Sym_Level = 1 - abs(r-n+1)\/n\n \n    return Ans[:Cut], Penalty[:Cut], Sym_Level\n    \ndef VertSym_Params(x, badcolor = 20):\n    n = len(x)\n    k = len(x[0])\n    PossibleS = []\n \n    for s in range(1,2*k-2):\n        possible = True\n        for i in range(n):\n            for j in range(k):\n                j1 = s-j\n                if j1 <0 or j1>=k:\n                    continue\n                color1 = x[i][j]\n                color2 = x[i][j1]\n                if  color1 != color2 and color1 != badcolor and color2 != badcolor:\n                    possible = False\n                    break\n        if possible:\n            PossibleS.append(s)\n            \n    if PossibleS == []:\n        return [], [], 0\n    Scores = []\n    for s in PossibleS:\n        Scores.append((abs(s-k+1),s))\n   \n    Scores.sort()\n    Ans = [item[1] for item in Scores]\n    Penalty = [item[0] for item in Scores]\n    \n    Sym_Level = 0\n    if Ans != []:\n        s = Ans[0]\n        Sym_Level = 1 - abs(s-k+1)\/k\n        \n    return Ans[:Cut], Penalty[:Cut], Sym_Level\n   \n    \n    \n\ndef NWSym_Params(x, badcolor = 20):\n    n = len(x)\n    k = len(x[0])\n    PossibleS= []\n \n    for s in range(-k+2,n-1): \n        possible = True\n        for i in range(n):\n            for j in range(k):\n                i1 = s+j\n                j1 = -s+i\n                \n                if  i1 <0 or i1 >= n or j1 <0 or j1>=k:\n                    continue\n                color1 = x[i][j]\n                color2 = x[i1][j1]\n                if  color1 != color2:\n                    possible = False\n                    break\n        if possible:\n            PossibleS.append(s)\n    if PossibleS == []:\n        return [], [], 0\n    Scores = []\n    for s in PossibleS:\n        Scores.append((abs(s),s))\n   \n    Scores.sort()\n    Ans = [item[1] for item in Scores]\n    Penalty = [item[0] for item in Scores]\n    \n    Sym_Level = 0\n    if Ans != []:\n        s = Ans[0]\n        Sym_Level = 1 - abs(s)\/(n+k)\n        \n    return Ans[:Cut], Penalty[:Cut], Sym_Level      \n   \ndef NESym_Params(x, badcolor = 20):\n    n = len(x)\n    k = len(x[0])\n    PossibleS = []\n \n    for s in range(2,n+k-3): \n        possible = True\n        for i in range(n):\n            for j in range(k):\n                i1 = s-j\n                j1 = s-i\n                \n                if  i1 <0 or i1 >= n or j1 <0 or j1>=k:\n                    continue\n                color1 = x[i][j]\n                color2 = x[i1][j1]\n                if  color1 != color2 and color1 != badcolor and color2 != badcolor:\n                    possible = False\n                    break\n        if possible:\n            PossibleS.append(s)\n    if PossibleS == []:\n        return [], [], 0\n    Scores = []\n    for s in PossibleS:\n        Scores.append((abs(2*s-n-k-2),s))\n\n   \n    Scores.sort()\n    Ans = [item[1] for item in Scores]\n    Penalty = [item[0] for item in Scores]\n    \n    Sym_Level = 0\n    if Ans != []:\n        s = Ans[0]\n        Sym_Level = 1 - abs(2*s-n-k-2)\/(n+k)\n    \n    return Ans[:Cut], Penalty[:Cut], Sym_Level\n  \n \n    \ndef Rotate180Sym_Params(x, badcolor = 20):\n \n    n = len(x)\n    k = len(x[0])\n \n    PossibleS = []\n    \n    for r in range(1,2*n-2):\n        for s in range(1,2*k-2):\n           \n            possible = True\n            for i in range(n):\n                if possible == False:\n                    break\n                for j in range(k):\n                    i1 = r-i\n                    j1 = s-j\n                    if j1 <0 or j1>=k or i1<0 or i1 >=n:\n                        continue\n                    color1 = x[i][j]\n                    color2 = x[i1][j1]\n                    if color1 != color2 and color1 != badcolor and color2 != badcolor:\n                        possible = False\n                        break\n            if possible:\n                PossibleS.append((r,s))\n                \n    if PossibleS == []:\n        return [], [], 0\n    Scores = []\n    for p in PossibleS:\n        r, s = p\n        Scores.append((abs(r-n+1)+abs(s-k+1),p))\n     \n\n   \n    Scores.sort()\n    Ans = [item[1] for item in Scores]\n    Penalty = [item[0] for item in Scores]\n    \n    Sym_Level = 0\n    if Ans != []:\n        r, s = Ans[0]\n        Sym_Level = 1 - ((abs(r-n+1)+abs(s-k+1))\/(n+k))\n        \n    return Ans[:Cut], Penalty[:Cut], Sym_Level\n\n  \ndef Rotate90Sym_Params(x, badcolor = 20):\n    n = len(x)\n    k = len(x[0])\n \n    PossibleS = []\n   \n    \n    for r in range(1,2*n-2):\n        for s in range(1,2*k-2): \n            if (s+r)%2 != 0:\n                continue\n            u = (r-s)\/\/2\n            v = (r+s)\/\/2\n            possible = True\n            for i in range(n):\n                if possible == False:\n                    break\n                for j in range(k):\n                    Neig = [ (v-j, -u+i), (r-i,s-j), (j+u,v-i) ]\n                    for i1, j1 in Neig:\n                        if j1 <0 or j1>=k or i1<0 or i1 >=n:\n                            continue\n                        color1 = x[i][j]\n                        color2 = x[i1][j1]\n                        if color1 != color2 and color1 !=badcolor and color2 !=badcolor:\n                            possible = False\n                            break\n            if possible:\n                PossibleS.append((r,s))\n    if PossibleS == []:\n        return [], [], 0\n    Scores = []\n    for p in PossibleS:\n        r, s = p\n        Scores.append((abs(r-n+1)+abs(s-k+1),p))\n     \n\n   \n    Scores.sort()\n    Ans = [item[1] for item in Scores]\n    Penalty = [item[0] for item in Scores]\n    \n    Sym_Level = 0\n    if Ans != []:\n        r, s = Ans[0]\n        Sym_Level = 1 - ((abs(r-n+1)+abs(s-k+1))\/(n+k))\n        \n    return Ans[:Cut], Penalty[:Cut], Sym_Level \n\n\ndef SymScore(x,First_P):\n    F = [Translation_Params, Translation1D_Params, HorSym_Params, VertSym_Params, \n         NWSym_Params, NESym_Params, Rotate90Sym_Params, Rotate180Sym_Params]\n    Score = 0\n    for s in First_P:\n        f = F[s]\n        value = f(x)[2]\n        Score += value\n    return Score\n        \n","038f53ed":"def Solvable2(task):\n    V = [[0], [1], [0,1], [2], [3], [2,3], [4], [5], [4,5], [6], [7], [0,2], [0,3], [0,2,3],[0,4], [0,5],\n         [0,4,5], [0,6], [0,7], [2,3,6], [0,2,3,6]]\n    \n    W = [1.5, 1, 2.3, 1, 1, 1.5, 1, 1, 1.5, 1, 1, 2.3, 2.3, 2.5, 2, 2, 2.3, 2, 2, 2, 3]\n    \n    Ans = []\n    Input = [Defensive_Copy(x) for x in task[0]]\n    Output = [Defensive_Copy(y) for y in task[1]]\n    Test_Example = Input[:-1]\n    for x,y in zip(Input, Output):\n        if ReportColorChange(x,y) == -1:\n            return -1\n    \n    F = [Translation_Params, Translation1D_Params, HorSym_Params, VertSym_Params, \n         NWSym_Params, NESym_Params, Rotate90Sym_Params, Rotate180Sym_Params]\n    \n    Input = Input[:-1]\n    Can_Be_Solved = False\n    Solutions = []\n    \n    \n    for i  in range(len(V)):\n        t = V[i]\n        if len(t) >2:\n            continue\n        possible = True\n        Sym_Scores = []\n        for x, y in zip(Input, Output):\n            \n            if Equivalence1(x,y,t) == -1:\n                possible = False\n                break\n            Local_Score = 0\n            for s in t:\n                f = F[s]\n                value = f(y)[2]\n                Local_Score+=value\n            Local_Score = Local_Score\/W[i]\n            Sym_Scores.append(Local_Score)\n\n        \n            \n        if possible:\n            Can_Be_Solved = True\n            Solutions.append((min(Sym_Scores), t))\n    Solutions.sort()\n    Solutions.reverse()\n    Solutions2 = [ item[1] for item in Solutions]\n    if Solutions2 != []:\n        print(\"Symmetries found : \" ,Solutions2)\n    if Can_Be_Solved :\n        return Solutions2\n    \n    return -1","f1376905":"Function = Solvable2","8128c1ea":"print(\"Going through the Training Set:\")\nprint(\" \")\n\n\ntraining_examples_found = []\nfor i in range(400):\n    task = Trains[i]\n    basic_task = Create(task,0)\n    a = Function(basic_task)\n    if a != -1:\n        print(\"Task number : \", i)\n        plot_task(task)\n        training_examples_found.append(i)\n        \n        \nprint(\"Going through the Evaluation Set:\")\nprint(\" \")\n\nevaluation_examples_found = []\nfor i in range(400):\n    task = Evals[i]\n    basic_task = Create(task,0)\n    a = Function(basic_task)\n    if a != -1:\n        print(\"Task number : \", i)\n        plot_task(task)\n        \n        evaluation_examples_found.append(i)\n             ","00d1c204":"print('Training Examples Found: ')\nprint(len(training_examples_found))\nprint(training_examples_found)\n\nprint(\"   \")\n\nprint(\"Evaluation Examples Found :\")\nprint(len(evaluation_examples_found))\nprint(evaluation_examples_found)","427c0fc8":"Cut = 30\n\n\ndef Translation_Eq(x, Param):\n    r, s = Param\n    n = len(x)\n    k = len(x[0])\n   \n    E = {}\n    for i in range(n):\n        for j in range(k):\n            u = i%r\n            v = j%s\n            p = (u,v)\n            if p not in E:\n                E[p] = [(i,j)]\n            else:\n                E[p] = E[p]+[(i,j)]\n    Ans = []\n    for p in E:\n        item = E[p]\n        if len(item) > 1:\n            Ans.append(item)\n    return Ans\n            \n            \n\ndef Translation1D_Eq(x, Param):\n    n = len(x)\n    k = len(x[0])\n    r, s = Param\n    E = {}\n    for i in range(n):\n        for j in range(k):\n            u = i*s-j*r\n            v = (i*r+j*s+100*(r*r+s*s))%(r*r+s*s)\n            p = (u,v)\n            if p not in E:\n                E[p] = [(i,j)]\n            else:\n                E[p] = E[p]+[(i,j)]\n    Ans = []\n    for p in E:\n        item = E[p]\n        if len(item) > 1:\n            Ans.append(item)\n    return Ans\n   \ndef HorSym_Eq(x, Param): # symmetric for reflection along a line parallel to the x axis\n    n = len(x)\n    k = len(x[0])\n    r = Param\n    Ans = []\n    for i in range(n):\n        for j in range(k):\n            i1 = r-i\n            if i1 <0 or i1 >= n:\n                continue\n            a = (i,j)\n            b = (i1,j)\n            i\n            if [a,b] in Ans or [b,a] in Ans or a==b:\n                continue\n            Ans.append([a,b])\n    return Ans\n\n\ndef VertSym_Eq(x, Param):\n    n = len(x)\n    k = len(x[0])\n    \n    s = Param\n    Ans = []\n    \n    for i in range(n):\n        for j in range(k):\n            j1 = s-j\n            if j1 <0 or j1 >= k:\n                continue\n            a = (i,j)\n            b = (i,j1)\n            if [a,b] in Ans or [b,a] in Ans or a==b:\n                continue\n            Ans.append([a,b])\n    return Ans\n    \n    \n\ndef NWSym_Eq(x, Param):\n    n = len(x)\n    k = len(x[0])\n    s = Param\n    Ans = []\n    for i in range(n):\n        for j in range(k):\n            i1 = s+j\n            j1 = -s+i\n            if i1 <0 or i1 >=n or j1 <0 or j1 >= k:\n                continue\n            a = (i,j)\n            b = (i1,j1)\n            if [a,b] in Ans or [b,a] in Ans or a==b:\n                continue\n            Ans.append([a,b])\n    return Ans\n   \n\ndef NESym_Eq(x, Param):\n    n = len(x)\n    k = len(x[0])\n    s = Param\n    Ans = []\n    for i in range(n):\n        for j in range(k):\n            i1 = s-j\n            j1 = s-i\n            if i1 <0 or i1 >=n or j1 <0 or j1 >= k:\n                continue\n            a = (i,j)\n            b = (i1,j1)\n            if [a,b] in Ans or [b,a] in Ans or a==b:\n                continue\n            Ans.append([a,b])\n    return Ans\n \n    \ndef Rotate180Sym_Eq(x, Param):\n \n    n = len(x)\n    k = len(x[0])\n    r, s = Param\n \n    Ans = []\n    \n    for i in range(n):\n        for j in range(k):\n            i1 = r-i\n            j1 = s-j\n            if i1 <0 or i1 >=n or j1 <0 or j1 >= k:\n                continue\n            a = (i,j)\n            b = (i1,j1)\n            if [a,b] in Ans or [b,a] in Ans or a==b:\n                continue\n            Ans.append([a,b])\n    return Ans\n   \ndef Rotate90Sym_Eq(x, Param):\n    n = len(x)\n    k = len(x[0])\n    r, s = Param\n \n    u = (r-s)\/\/2\n    v = (r+s)\/\/2\n    Ans = []\n    for i in range(n):\n        for j in range(k):\n            Neig = [ (v-j, -u+i), (r-i,s-j), (j+u,v-i) ]\n            N2 = [(i,j)]\n            for i1, j1 in Neig:\n                if i1 <0 or i1 >=n or j1 <0 or j1 >= k:\n                    continue\n                else:\n                    N2.append((i1,j1))\n            N2.sort()\n            if len(N2) ==1 or N2 in Ans:\n                continue\n            Ans.append(N2)\n          \n    return Ans\n\ndef Make_Picture(x, Relations, badcolor):\n    # returns -1 if there are conflicts between non-badcolors\n    n = len(x)\n    k = len(x[0])\n    A = Relations\n    G = {}\n    x0 = np.array(x, dtype = int)\n    for i in range(n):\n        for j in range(k):\n            G[(i,j)] = (i,j)\n    for Class in A:\n        for p in Class:\n            for q in Class:\n                if G[p] == G[q]:\n                    continue\n                else:\n                    a = G[p]\n                    b = G[q]\n                    if a < b:\n                        G[q] = a\n                    else:\n                        G[p] = b\n    H = {}\n    for i in range(n):\n        for j in range(k):\n            p = (i,j)\n            while G[p] != p:\n                p = G[p]\n            if p not in H:\n                H[p] = [(i,j)]\n            else:\n                H[p] = H[p]+[(i,j)]\n   \n    for key in H:\n        item = H[key]\n        Colors = []\n        for i, j in item:\n            c = x[i][j]\n            if c not in Colors:\n                Colors.append(c)\n        if len(Colors) <= 1:\n            continue #nothing to recolor\n        if len(Colors) > 2:\n            return -1 #collision\n        if len(Colors) ==2 and badcolor not in Colors:\n            return -1 #collision\n        if len(Colors) == 2 and badcolor == Colors[0]:\n            fillcolor = Colors[1]\n        else :\n            fillcolor = Colors[0]\n        for i, j in item:\n            x0[i,j] = fillcolor\n    return x0.tolist()\n            \n\n    \ndef Proba(task, Bad, First_P):\n    Input = [Defensive_Copy(x) for x in task[0]]\n    Output = [Defensive_Copy(y) for y in task[1]]\n    Test_Picture = Input[-1]\n    Input = Input[:-1]\n    \n    V1 = [Translation_Params, Translation1D_Params, HorSym_Params, VertSym_Params, NWSym_Params, \n          NESym_Params, Rotate90Sym_Params, Rotate180Sym_Params]\n    \n    V2 = [Translation_Eq, Translation1D_Eq, HorSym_Eq, VertSym_Eq, NWSym_Eq, \n          NESym_Eq, Rotate90Sym_Eq, Rotate180Sym_Eq]\n    \n    Ans = []\n    \n    if len(First_P) == 1:\n        S = First_P[0]\n        f = V1[S]\n        g = V2[S]\n        Params = f(Test_Picture,Bad)[0]\n        for p in Params:\n            A = g(Test_Picture,p)\n            picture = Make_Picture(Test_Picture, A, Bad)\n            if picture != -1 and picture not in Ans and np.min(picture) != np.max(picture):\n                        Ans.append(picture)\n                    \n    if len(First_P) == 2:\n        S1 = First_P[0]\n        S2 = First_P[1]\n        f1 = V1[S1]\n        f2 = V1[S2]\n        g1 = V2[S1]\n        g2 = V2[S2]\n        Params1 = f1(Test_Picture, Bad)[0]\n        Params2 = f2(Test_Picture, Bad)[0]\n        for K in range(6):\n            for i in range(len(Params1)):\n                for j in range(len(Params2)):\n                    if i+j == K:\n                        p1 = Params1[i]\n                        p2 = Params2[j]\n                        A1 = g1(Test_Picture,p1)\n                        A2 = g2(Test_Picture,p2)\n                        A = A1+A2\n                        picture = Make_Picture(Test_Picture,A,Bad)\n                        if picture != -1 and picture not in Ans and np.min(picture) != np.max(picture):\n                            Ans.append(picture)\n    \n   \n    \n   \n    if len(Ans) == 0:\n        return -1\n    return Ans[:6]\n    \n    \n    \n    \n\n    ","0ca81b33":"def Final_Version(task):\n    Input = [Defensive_Copy(x) for x in task[0]]\n    Output = [Defensive_Copy(y) for y in task[1]]\n    Test_Picture = Input[-1]\n    Input = Input[:-1]\n    Colors = []\n    for x, y in zip(Input, Output):\n        if len(x) != len(y) or len(x[0]) != len(y[0]):\n            return -1\n        Disappearing = []\n        n = len(x)\n        k = len(x[0])\n        for i in range(n):\n            for j in range(k):\n                color1 = 0+x[i][j]\n                color2 = 0 + y[i][j]\n                if color2 != color1 and color1 not in Disappearing:\n                    Disappearing.append(color1)\n        if len(Disappearing) > 1:\n            return -1\n        if len(Disappearing) == 1:\n            c = Disappearing[0]\n        if c not in Colors:\n            Colors.append(c)\n    AAA = Solvable2(task)\n    \n    if AAA == -1:\n        return -1\n  \n    if len(Colors) == 1:\n        C2 = [Colors[0]]\n    else:\n        C2 = []\n        for row in Test_Picture:\n            for c in row:\n                if c not in C2:\n                    C2.append(c)\n                    \n   \n    Ans = []\n    First_P = -1\n    \n    for P in AAA:\n        for c in C2:\n            Candidates = Proba(task, c, P)\n            if Candidates != -1:\n                Ans = Ans+Candidates[:6]\n        if Ans != []:\n            First_P = P\n            break\n            \n    if Ans == []:\n        return -1\n    \n    Scores = []\n    for picture in Ans:\n        S = SymScore(picture, First_P)\n        Scores.append((S,picture))\n    Scores.sort()\n    Scores.reverse()\n    Ans2 =[]\n    for _, picture in Scores:\n        if picture not in Ans2:\n            Ans2.append(picture)\n    return Ans2[: 3]\n                ","70d4eb48":"Function = Final_Version","17ccdc0a":"training_examples_attempted = []\ntraining_examples_solved = []\n\nfor i in training_examples_found:\n    print(\"Training task number : \" , i)\n    task = Trains[i]\n    basic_task = Create(task,0)\n    a = Function(basic_task)\n    \n    if a != -1:\n        for b in a[:3]:\n            plot_picture(b)\n        plot_task(task)\n        training_examples_attempted.append(i)\n        if task['test'][0]['output'] in a:\n            print(True)\n            training_examples_solved.append(i) ","7aa41128":"print(\"Training examples that the program believed it solved:\")\nprint(training_examples_attempted)\nprint(\"Number of attempted : \",  len(training_examples_attempted))\n\nprint(\" \")\n\nprint(\"Training examples the program actually solved:\")\nprint(training_examples_solved)\nprint(\"Number of solved : \", len(training_examples_solved))","b30e2cbd":"evaluation_examples_attempted = []\nevaluation_examples_solved = []\n\n\nfor i in evaluation_examples_found:\n    print(\"Evaluation task number : \", i)\n    task = Evals[i]\n    basic_task = Create(task,0)\n    a = Function(basic_task)\n    \n    if a != -1:\n        for b in a[:3]:\n            plot_picture(b)\n        plot_task(task)\n        print(i)\n        evaluation_examples_attempted.append(i)\n        if task['test'][0]['output'] in a:\n           \n            print(True)\n            evaluation_examples_solved.append(i) ","88eb5a0f":"print(\"Evaluation examples that the program believed it solved:\")\nprint(evaluation_examples_attempted)\nprint(\"Number of attempted : \",  len(evaluation_examples_attempted))\n\nprint(\" \")\n\nprint(\"Evaluation examples the program actually solved:\")\nprint(evaluation_examples_solved)\nprint(\"Number of solved : \", len(evaluation_examples_solved))","dcbac95d":"sample_sub = pd.read_csv(data_path\/ 'sample_submission.csv')\nProblems = sample_sub['output_id'].values\nProposed_Answers = []\nfor i in  range(len(Problems)):\n    output_id = Problems[i]\n    task_id = output_id.split('_')[0]\n    pair_id = int(output_id.split('_')[1])\n    f = str(test_path \/ str(task_id + '.json'))\n   \n    with open(f, 'r') as read_file:\n        task = json.load(read_file)\n    \n    n = len(task['train'])\n    Input = [Defensive_Copy(task['train'][j]['input']) for j in range(n)]\n    Output = [Defensive_Copy(task['train'][j]['output']) for j in range(n)]\n    Input.append(Defensive_Copy(task['test'][pair_id]['input']))\n    \n    solution = Function([Input, Output])\n   \n    \n    pred = ''\n        \n    if solution != -1:\n        for sol in solution[:3]:\n                pred1 = flattener(sol)\n                pred = pred+pred1+' '\n        \n    if pred == '':\n        pred = flattener(example_grid)\n        \n    Proposed_Answers.append(pred)\n    \nsample_sub['output'] = Proposed_Answers\nsample_sub.to_csv('submission.csv', index = False)","c4ed9e3e":"# Looking for symmetries\n\n### Given the type of symmetry (for example rotation by 180 degrees) we search for solutions (for example the coordinates for the center of the rotation)\n\n### Here badcolor = 20 means completely symmetric, otherwise we allow for 1 outlier bad color\n\n### Then we report the best 30 solutions together with symmetry score of the best solution\n\n### For example reflection along a line that goes through the center of the picture gets best score 1, a non central line gets scores between 0 and 1\n\n### This scoring surely can be fine tuned, for example the allowable maximal scores for different symmetries \n\n### This crude version was hastily improvised in the last few hours of the competition. \n","a2088b24":"# This notebook looks for problems where the output is more symmetric than the input\n\n### This includes Translational Symmetries, Rotations (90 and 180 degrees), Reflections along lines.\n\n### This version looks only for cases where one color partially or completely disappears from the input. \n\n### The program tries to identify partially symmetric inputs, and tries to guess which symmetries and which colors to use to create a more symmetric output.\n\n### For demonstration purposes it runs on all the 400 training and 400 evaluation problems, not just the 100 test problems.\n\n\n## This version was developed on the last day of the competition and there are lots of ways to improve:\n\n### A, The algorithm is not optimized for speed.\n\n### B, The relative strength of the symmetries are not tuned. \n\n### C, It tries to solve two slightly different problems with the just one approach: \n### Repairing mosaics and making the input more symmetric. So it can fail on a more complicated mosaic.\n### Would be better to develop 2 versions of the algorithm.\n\n### D, It treats only the base case, making one color to partially disappear. \n\n","b6e16146":"# Getting the data","e4f2a154":"# Making submission on the Test set","b1ca48de":"# Finding the tasks that the program thinks it can handle.\n\n### It also ranks the most likely sets of symmetries that can explain the task. The relative scoring (between symmetries) is crude.","67fb6e8a":"# Helper Functions","4d24adb9":"# There are lots of parameters\n### The color, the symmetry types, their parameters. \n### Among the most likely solutions the program scores how symmetric the output is. For the symmetry score it only uses the predicted type of symmetries.\n### It returns the most likely candidates.","32aaf098":"# The solution\n\n### Given a symmetry and a parameter, for example translation in the plane by (r,s) we compute the corresponding equivalence relation on the coordinate pixels. \n### Given the badcolor (the color that the program partially or completely eliminates from the picture) we compute the new picture","88656d18":"# Scores:\n\n## Training: 11\/400\n## Evaluation: 10\/400\n## Test: 5\/100"}}