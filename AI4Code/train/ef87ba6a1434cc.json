{"cell_type":{"e0459781":"code","94515749":"code","b7db5853":"code","cf8c5974":"code","8bee3215":"code","d0799c10":"code","41595406":"code","34acd407":"code","7af789b9":"code","079169cc":"code","68b6ab97":"code","ab163c66":"code","61f0a06c":"code","d8665a36":"code","b41242c5":"code","845bca1d":"markdown","eb7aa4cf":"markdown","f4710a88":"markdown"},"source":{"e0459781":"#Importing necessary Libraries:\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","94515749":"# Reading data from remote link\nurl = \"http:\/\/bit.ly\/w-data\"\ndf = pd.read_csv(url)\n\n#To read first 5 enties in the DF\ndf.head()","b7db5853":"df.shape #size of DataFrame","cf8c5974":"# To find the datatypes and missing values if any\ndf.info() ","8bee3215":"# summary statistics\ndf.describe().T","d0799c10":"# Scatter plot to see the distribution of data\nplt.figure(figsize=(10,5))\nsns.scatterplot(x=df.Hours,y=df.Scores)\nplt.xlabel('Hours Studied')  \nplt.ylabel('Marks Scored')  \nplt.show()","41595406":"#correlation plot\nplt.figure(figsize=(5,5))\ncorrelation_matrix = df.corr()\n# annot = True to print the values inside the square\nsns.heatmap(data=correlation_matrix, annot=True)\nplt.show()","34acd407":"# Dividing the DF to independent and dependent variable\nX = df['Hours'].values.reshape(-1,1)\ny = df['Scores']","7af789b9":"# Spliting the X,y into train and test \n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test , y_train, y_test = train_test_split(X,y, test_size = 0.20, random_state = 0)","079169cc":"# Importing LinearRegression from sklearn\nfrom sklearn.linear_model import LinearRegression\n\n# Creating object and fitting the model\nlin_reg = LinearRegression()\nmodel = lin_reg.fit(X_train,y_train)\n","68b6ab97":"# Plotting the regression line\nbest_fitline = model.coef_*X+model.intercept_\n\n# Plotting for the data\nplt.scatter(X, y)\nplt.plot(X, best_fitline, color = 'r');\nplt.show()","ab163c66":"# Predicting for test dataset\ny_pred = model.predict(X_test)","61f0a06c":"# Creating Actual and Predicted dataset \ndf1 = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndf1","d8665a36":"# Model Evaluation \n\n# Importing metrics from sklearn \nfrom sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error\n\n# To find Mean Absolute Error(mse)\nmse = (mean_absolute_error(y_test, y_pred))\nprint(\"MAE:\",mse)\n\n# To find Root Mean Squared Error(rmse)\nrmse = (np.sqrt(mean_squared_error(y_test, y_pred)))\nprint(\"RMSE:\",rmse)\n\n# To find coefficient of determination\nr2 =  r2_score(y_test, y_pred)\nprint(\"R-Square:\",r2)","b41242c5":"# Testing with your own data\nhours = np.array([9.25]) # No. of hours should be mentioned inside array\nhours = hours.reshape(-1,1)\nown_pred = model.predict(hours)\nprint(\"No of Hours = {}\".format(float(hours)))\nprint(\"Predicted Score = {}\".format(round(own_pred[0],2)))","845bca1d":"- From the above graph we see that there is a positive linear relation between the number of Hours Studied and Marks Scored.","eb7aa4cf":"## Linear Regression:\nIn this regression task we will predict the percentage of marks that a student is expected to score based upon the number of hours they studied. This is a simple linear regression task as it involves just two variables.","f4710a88":"- From the above graph we see that Hours and Scores are highly correlated."}}