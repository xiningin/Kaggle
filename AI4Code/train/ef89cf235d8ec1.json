{"cell_type":{"cec3df60":"code","ee12accf":"code","4a8328c3":"code","3e352b6e":"code","211567ea":"code","095190f4":"code","a9d1cb80":"code","d2719f7d":"code","eae7c10b":"code","0129cc88":"code","13cf4c99":"code","e6b5ff28":"code","a9775060":"code","34e5aa85":"code","d6384db8":"code","ce7ab5fc":"markdown","66c6dd70":"markdown","3c5b8d9e":"markdown","804ff391":"markdown","abaddada":"markdown","bf61624d":"markdown","e76cc2bc":"markdown","7182b884":"markdown","68bc5b47":"markdown","eb400308":"markdown","b46261af":"markdown","44614d6a":"markdown","255f0d99":"markdown"},"source":{"cec3df60":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","ee12accf":"df=pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\ndf.head()","4a8328c3":"df.isnull().sum()","3e352b6e":"df.pivot_table('show_id',index='release_year',columns='type',aggfunc='count').plot(figsize=(7, 7))","211567ea":"df.groupby('type').count()","095190f4":"#Removing \"Seasons\/Season\/Minutes\" from duration so that we can convert it in numeric values\n\ndf['duration']=df['duration'].str.replace(' Seasons', \"\", case = False) \ndf['duration']=df['duration'].str.replace(' Season', \"\", case = False) \ndf['duration']=df['duration'].str.replace(' min', \"\", case = False) \ndf['duration']=df['duration'].astype(int)\n\n#We need to convert TV Show\/Movies in same unit of time(Hour) so that we can compare them\n\nindex = df.index[df[\"type\"] == \"TV Show\"]\ndf.loc[index,'duration'] = df['duration']*40*10 #I'm assuming every season has 10 episode and each episode is of 40 min.\ndf[\"show_id\"] = df.index\ndf.groupby('type')['duration'].sum()\/\/60 # Converting Minutes value into hours\n","a9d1cb80":"d={'TV-Y':\"Kid\", 'TV-Y7':\"Kid\", 'G':\"Kid\", 'TV-G':\"Kid\", 'PG':\"Kid\", 'TV-PG':\"Kid\",'PG-13':\"Teen\", 'TV-14':\"Teen\",'TV-MA':\"Adults\",'R':\"Adults\",'NC-17':\"Adults\"}\ndf['Maturity']=df['rating'].map(d)\ndf.pivot_table('rating',index='type',columns='Maturity',aggfunc='count').plot(kind='bar',figsize=(7, 7))","d2719f7d":"new= df[\"date_added\"].str.split(\",\", n = 1, expand = True) # we need year part of date only\ndf['added_date']=new[1]\ndf['added_date'].fillna(0,inplace=True)\ndf['added_date']=df['added_date'].astype(int)\ndf['release_year']=df['release_year'].astype(int)\ndf['Orginal vs Licensed']= df['release_year']==df['added_date'] #comparing both release year and added date\nd = {True: 'Orginal', False: 'Licensed'}\ndf['Orginal vs Licensed']=df['Orginal vs Licensed'].map(d)\n\ndf.pivot_table('show_id',index='Maturity',columns='Orginal vs Licensed',aggfunc='count').plot(kind='bar',figsize=(7, 7))","eae7c10b":"# For Single Values like Director and Country\ndef TopCalulatorForSingle(a):\n    df[a].value_counts().head(5).plot(kind='barh',figsize=(7, 7))\n    plt.xlabel(\"No of TV show\/Movies\", labelpad=14)\n    plt.ylabel(a, labelpad=14)\n    plt.title(\"Top 5\", y=1.02);\n\n    \nfrom collections import Counter \n\n# For Multiple Values like Listed_in and Cast\n\ndef TopCalulatorForMultiple(a):\n    l=list()\n    for i in df[a].dropna(): #We can drop null values because it will be unfair to replace it with sommeone else name\n        for j in i.split(','):\n            l.append(j.strip())\n    d = Counter(l) \n    df_new=pd.DataFrame(d.items(), columns=['Category', 'Count'])\n    return df_new.sort_values(by=['Count'],ascending=False).head(5)\n","0129cc88":"TopCalulatorForSingle('country')\n","13cf4c99":"TopCalulatorForSingle('director')","e6b5ff28":"TopCalulatorForMultiple('cast')","a9775060":"TopCalulatorForMultiple('listed_in')","34e5aa85":"import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nsid = SentimentIntensityAnalyzer()\ndef get_sentiment(row, **kwargs):\n\n    sentiment_score = sid.polarity_scores(row)\n    positive_meter = round((sentiment_score['pos'] * 10), 2)\n    negative_meter = round((sentiment_score['neg'] * 10), 2)\n    if abs(positive_meter-negative_meter) <1:\n        return 'Neutral'\n    else:\n        if positive_meter>negative_meter:\n            return 'Poitive'\n        else:\n            return 'Negative'\n\n        \ndf['sentiment'] = df['description'].apply(get_sentiment)","d6384db8":"df.pivot_table('show_id',index='Maturity',columns='sentiment',aggfunc='count').plot(kind='bar',figsize=(7, 7))","ce7ab5fc":"If a movie\/show is created by netflix(orginal) it will directly be released on Netflix and if it is Licensed Netflix has to buy it means there will be time difference between released date and added date ","66c6dd70":"**Observation 2**\n1. Most of the movies have been released after 2010\n2. There are more movies than TV shows but still TV shows has more hours.\n3. There are lots of adults movies available. Incase of TV shows it is almost the same.","3c5b8d9e":"# Sentimental Analysis","804ff391":"# **TV shows VS Movies**","abaddada":"From the description, we will try to find sentiment, based on the score we can categorise it between Positive, Negative and Neutral.","bf61624d":"There are different features like Director, Country, Cast and Listed_in\nDirector and Country has **single** values in it and Cast and Listed_in has **multiple** values\nWe will create a function that can show us the top 5 in each of the features.\n","e76cc2bc":"# **Top 5 in Different features**","7182b884":"**Observation 3**\n1. US has the highest number of movies\/shows. 2nd highest in India but it's not even half of the US.\n2. Although US has the highest number of movies\/shows, All the top actors with the highest number of movies are from India.\u00a0\n3. It is strange that there is no one from India in Top Director.\n4. We have no information to show if the actors are in the Lead role or the supporting role.\n5. People are enjoying more Dramas and Comedies.","68bc5b47":"**Observation 4**\n\n1. It's good to see that Kids has more positive content and very less of negative content.\n2. With the increase in maturity content get more balance between the 3 categories.","eb400308":"# Task : Netflix Orginal vs Licensed","b46261af":"We have lots  of values in the Rating Column. We can divide them into 3 categories based on United States's Rating format i.e ***Maturity ratings and classifications on Netflix***. This Data is available on Netflix's site Link- [https:\/\/help.netflix.com\/en\/node\/2064\/us](http:\/\/)\n\n![image.png](attachment:image.png)","44614d6a":"**Observation 1**\n1. Data has no numeric values.\n2. TV shows have a duration in \"Seasons\" and movies has in \"Minutes\".\n3. Cast and Listed_in columns have many names for every show\/movies.\n","255f0d99":"# **Explore Data**"}}