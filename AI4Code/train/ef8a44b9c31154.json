{"cell_type":{"2ab78011":"code","37bbab27":"code","cace4e08":"code","f20cc76d":"code","14af8c9b":"code","22cc7a5d":"code","c2b58f13":"code","a91c3328":"code","2464c922":"code","26f8e61a":"code","6c3fb947":"code","df631c3e":"code","9105ebab":"code","6c64e61b":"code","9b0c2741":"code","1741cec8":"code","e4a18632":"code","0ca30a78":"code","4955f661":"code","f705121e":"code","eddd0958":"code","9d0ee59f":"code","2cb81f5b":"code","ededa002":"code","c72d603f":"code","d4c97901":"code","42aca6b2":"code","db00dc62":"code","9a8e3880":"code","9c5681cf":"code","1f974f0a":"code","2043eb81":"code","81d17a14":"code","e8add191":"code","3fb3e9fb":"code","4128d0a0":"code","9ce7bc5b":"code","cc9a247d":"code","d3a48a03":"markdown","3ce0ab08":"markdown","0682254a":"markdown","2eb5a405":"markdown","0adb241a":"markdown","4f90cdc6":"markdown","e7e38883":"markdown","3b432dde":"markdown","976b323b":"markdown","58da1c44":"markdown","8022e428":"markdown","2b1c0d84":"markdown","f6e3e206":"markdown","5de78f86":"markdown","51c3536c":"markdown","aee242dc":"markdown","b22bd1e8":"markdown","cff0e6c4":"markdown"},"source":{"2ab78011":"# Importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nimport os\n%matplotlib inline","37bbab27":"print(os.listdir('..\/input'))","cace4e08":"# Loading in dataset\ndf = pd.read_csv('..\/input\/rotten-tomatoes\/reviews.tsv', sep='\\t', encoding = 'ISO-8859-1')\ndf.head()","f20cc76d":"# Way too many types of reviews from critics with each reviewer using their own set of review rating system\nprint('List of Reviews:')\nprint(df['rating'].unique())\nprint('\\n')\nprint('Number of unique reviews:')\nprint(df['rating'].nunique())","14af8c9b":"# We'll stick with Rotten Tomatoes' final review classification of \"Fresh\" vs. \"Rotten\" when training our model\ndf['fresh'].value_counts()","22cc7a5d":"df['fresh'].unique()","c2b58f13":"# Distribution of \"Fresh\" vs \"Rotten\" reviews is roughly balanced. \nsns.countplot(df['fresh'])\nplt.show()","a91c3328":"# Checking for missing values\ndf.isnull().sum()","2464c922":"# Since we cannot work with missing data or find a viable way to replace missing text reviews, we will drop these missings rows under reviews.\ndf = df.dropna(subset=['review'])","26f8e61a":"df.isnull().sum()","6c3fb947":"df.describe(include='all')","df631c3e":"df_fresh = df[['fresh', 'review']]","9105ebab":"# Checking for reviews with no text in review\nblank_reviews = []\n\n# (index, label, review text)\nfor i, label, review in df_fresh.itertuples():\n    if type(review) == str:\n        if review.isspace():\n            blank_reviews.append(i)","6c64e61b":"# All remaining reviews contain text\nblank_reviews","9b0c2741":"# Addining in a new feature to see if there is any correlation to the length of the review to the fresh rating.\ndf_fresh['review length'] = df_fresh['review'].apply(lambda review: len(review))","1741cec8":"df_fresh.head()","e4a18632":"bins = 20\nplt.hist(df_fresh[df_fresh['fresh']=='fresh']['review length'],bins=bins,alpha=0.5)\nplt.hist(df_fresh[df_fresh['fresh']=='rotten']['review length'],bins=bins,alpha=0.5)\nplt.legend(('fresh','rotten'))\nplt.show()","0ca30a78":"# Splitting data into training and testing datasets\nfrom sklearn.model_selection import train_test_split\n\nX = df_fresh['review']\ny = df_fresh['fresh']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","4955f661":"# Building a simple pipeline to preprocess text data\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import LinearSVC\n\ntext_clf_svc = Pipeline([('tfidf', TfidfVectorizer()),\n                    ('clf', LinearSVC())])","f705121e":"# Fitting and generating predictions\ntext_clf_svc.fit(X_train, y_train)\ny_pred_svc = text_clf_svc.predict(X_test)","eddd0958":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nprint(classification_report(y_test, y_pred_svc))\nprint(confusion_matrix(y_test, y_pred_svc))","9d0ee59f":"from sklearn.linear_model import LogisticRegression\n# Building pipeline\ntext_clf_lr = Pipeline([('tfidf', TfidfVectorizer()),\n                    ('clf', LogisticRegression())])\n# Fitting and generating predictions\ntext_clf_lr.fit(X_train, y_train)\ny_pred_lr = text_clf_lr.predict(X_test)","2cb81f5b":"print(classification_report(y_test, y_pred_lr))\nprint(confusion_matrix(y_test, y_pred_lr))","ededa002":"from xgboost import XGBClassifier\n# Building pipeline\ntext_clf_xgb = Pipeline([('tfidf', TfidfVectorizer()),\n                    ('clf', XGBClassifier())])\n# Fitting and generating predictions\ntext_clf_xgb.fit(X_train, y_train)\ny_pred_xgb = text_clf_xgb.predict(X_test)","c72d603f":"print(classification_report(y_test, y_pred_xgb))\nprint(confusion_matrix(y_test, y_pred_xgb))","d4c97901":"from sklearn.ensemble import RandomForestClassifier\n# Building pipeline\ntext_clf_rf = Pipeline([('tfidf', TfidfVectorizer()),\n                    ('clf', RandomForestClassifier())])\n# Fitting and generating predictions\ntext_clf_rf.fit(X_train, y_train)\ny_pred_rf = text_clf_rf.predict(X_test)","42aca6b2":"print(classification_report(y_test, y_pred_rf))\nprint(confusion_matrix(y_test, y_pred_rf))","db00dc62":"model_performance = [accuracy_score(y_test, y_pred_svc),accuracy_score(y_test, y_pred_lr),accuracy_score(y_test, y_pred_xgb),accuracy_score(y_test, y_pred_rf)]\nmodels = ['Linear SVC', 'Logistic Regression', 'XGBoost', 'Random Forest']\ndf_model = pd.DataFrame(model_performance, columns=['Accuracy'])\ndf_model['Model'] = models\ndf_model","9a8e3880":"plt.figure(figsize=(8,6))\nplt.ylim(0.5,0.8)\nsns.barplot(x='Model', y='Accuracy', data=df_model)\nplt.show()","9c5681cf":"np.random.seed(42)\nrand_sample_1 = int(np.random.randint(0, len(X_test), size=1))\nlist(X_test)[rand_sample_1]","1f974f0a":"y_pred_1 = text_clf_svc.predict([list(X_test)[rand_sample_1]])\ny_pred_1","2043eb81":"df[df['review'] == 'As a work of cinema, The Passion of the Christ possesses a majestic beauty within its horror, one that comes most effectively through a tiny, solitary teardrop.']['fresh']","81d17a14":"np.random.seed(43)\nrand_sample_2 = int(np.random.randint(0, len(X_test), size=1))\nlist(X_test)[rand_sample_2]","e8add191":"y_pred_2 = text_clf_svc.predict([list(X_test)[rand_sample_2]])\ny_pred_2","3fb3e9fb":"df[df['review'] == 'A character-driven dramedy with equal parts humor and heart, Safety Not Guaranteed is a magical film about the human spirit whose charm is impossible to ignore.']['fresh']","4128d0a0":"np.random.seed(44)\nrand_sample_3 = int(np.random.randint(0, len(X_test), size=1))\nlist(X_test)[rand_sample_3]","9ce7bc5b":"y_pred_3 = text_clf_svc.predict([list(X_test)[rand_sample_3]])\ny_pred_3","cc9a247d":"df[df['review'] == 'My mother is going to love this movie. ']['fresh']","d3a48a03":"**Sample Prediction 2**","3ce0ab08":"**Logistic Regression**","0682254a":"**Sample Prediction 1**","2eb5a405":"- Model Predition: 'fresh'\n- True Result: 'fresh'","0adb241a":"# Exploratory Data Analysis\n- For our movie review classification, we will stick with the Rotten Tomoatoes benchmark of \"Fresh\" vs \"Rotten\".\n- This is a simpler task than predicting a rating as many of the critics appear to use their own metrics (e.g. numeric rating system out of 4, 5 or out of 10. Other critics use a letter grade system.","4f90cdc6":"**Sample Prediction 3**","e7e38883":"- Not a clear trend to see if the length of reviews has any relation to the movie review.\n- The distribution of review length looks pretty similar between \"Fresh\" movies and \"Rotten\" movies.","3b432dde":"# Model Selection\n- Feature extraction of the text reviews was performed using TfidfVectorizer.\n- The classification models evaluated include:\n- LinearSVC\n- Logistic Regression Model\n- XGBoost\n- Random Forest\n","976b323b":"# Sample Predictions\n- We will use the linear SVC model for the sample predictions.\n- Randomly selected reviews from the testing data will be used for these predictions.","58da1c44":"**XGBoost**","8022e428":"- The top two performers were the linear SVC and logistic regression models.\n- Ensemble tree based models don't appear to be that great.\n- Surprisingly the XGBoost model performed worse than the normal random forest model, and the worst out of the four models.","2b1c0d84":"# Model Comparisons","f6e3e206":"**Linear SVC**","5de78f86":"- Model Predition: 'rotten'\n- True Result: 'rotten'","51c3536c":"# Project Overview\n- We have a dataset from the moview review website RottenTomatoes.com.\n- The dataset includes written reviews on movies, the names of each critic, review date, and a verdict of whether of not a movie was consider \"Fresh\" (positive review) or \"Rotten\" (negative review).\n- The goal of this project is to use the text in each review to create a model to predict whether or not a review is considered \"Fresh\" or \"Rotten\" based solely on the information extracted from the text review alone.","aee242dc":"**Random Forest Classifier**","b22bd1e8":"**Some notes on these preditions:** <br>\n- After surveying the text reviews for these sample predictions, it seems reasonable to predict on our own that the first two reviews would be given a \"Fresh\" rating given how the reviews were written.\n- The third review also looked like it had a positive sentiment to it using the word \"love\". However, the model predicted that this review would be \"Rotten\".\n- Interestingly, the actual review was indeed \"Rotten\", perhaps this review was sarcastic and the model appears to have understood this after feature extraction of the text.","cff0e6c4":"- Model Predition: 'fresh'\n- True Result: 'fresh'"}}