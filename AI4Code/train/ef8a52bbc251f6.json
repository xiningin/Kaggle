{"cell_type":{"b0f1f7a6":"code","535e4f63":"code","fd199e83":"code","f3a0911f":"code","16f42075":"code","9da102cf":"code","f3ee74b3":"code","6efacc69":"code","9838e97b":"code","4b4e11fd":"code","6c0dc161":"code","4c882aca":"code","93304067":"code","56403245":"code","f07d8ecb":"code","963ee897":"code","01966603":"code","75937314":"code","1144363a":"code","5a5141a4":"code","52b181e3":"code","fbc3edbc":"code","e1eaaa1e":"code","f1b20f5c":"code","5130cceb":"code","606430fa":"code","5b55e349":"code","8514b5a5":"code","deae4229":"code","c2618b83":"code","493de467":"code","45c8b9a6":"code","de0a62c5":"code","38a5ba83":"code","b888d834":"code","97bf0804":"code","2837674e":"code","a2426b5d":"code","f88fcadb":"code","dfc06df9":"code","556c8576":"code","398064f3":"code","9ad55962":"code","cea9b20c":"code","9578c8ee":"code","6e4ded1a":"code","82620753":"code","c416cbc7":"code","11cac688":"code","90e2a053":"markdown","628cee87":"markdown","dab31090":"markdown","58240c6c":"markdown","5f9fae36":"markdown","25cd959e":"markdown","46bb1483":"markdown","f0345648":"markdown","6713e86e":"markdown","7918a370":"markdown","2679a063":"markdown","310988a5":"markdown"},"source":{"b0f1f7a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n'''for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n'''\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","535e4f63":"os.listdir('\/kaggle\/input\/basicshapes\/shapes\/shapes\/circles')\n","fd199e83":"os.listdir('\/kaggle\/input\/basicshapes\/shapes\/shapes\/circles')","f3a0911f":"import matplotlib.pyplot as plt\nfrom matplotlib import image","16f42075":"im=image.imread('\/kaggle\/input\/basicshapes\/shapes\/shapes\/squares\/drawing(55).png')\nim.shape","9da102cf":"plt.imshow(im)","f3ee74b3":"im","6efacc69":"im[:,:,0]","9838e97b":"np.set_printoptions(linewidth=np.inf)\nprint(np.round(im[:,:,0],1))","4b4e11fd":"print(np.round(im[:,:,1],1))","6c0dc161":"print(np.round(im[:,:,2],1))","4c882aca":"im1=im.mean(axis=2)\nim1.shape","93304067":"plt.imshow(im1)","56403245":"plt.imshow(im1,cmap='gray')","f07d8ecb":"np.set_printoptions(linewidth=np.inf)\nprint(im1.round(1))","963ee897":"from PIL import Image\nim=Image.open('\/kaggle\/input\/basicshapes\/shapes\/shapes\/squares\/drawing(55).png')\nprint(im.format,im.size,im.mode)\nplt.imshow(im)","01966603":"os.listdir('\/kaggle\/input\/basicshapes\/shapes\/shapes\/')","75937314":"def load_imgs(impath):\n    imgs=[]\n    label=[]\n    l1=os.listdir(impath)\n    for i in l1:\n        l2=os.listdir(impath+'\/'+i)\n        for j in l2:\n            c=0\n            img=Image.open(impath+i+'\/'+j)\n            img=img.resize(size=(28,28))\n            img=img.convert('L')\n            #img=np.array(img,dtype=np.float16)\/255\n            imgs.append(np.array(img).flatten())\n            label.append(i)\n            del img\n        \n        '''if(c%1000==0):\n            plt.imshow(img)\n            plt.show()\n            c=c+1'''\n    return np.array(imgs),label","1144363a":"x,y=load_imgs('\/kaggle\/input\/basicshapes\/shapes\/shapes\/')\nx.shape,len(y)","5a5141a4":"x","52b181e3":"y","fbc3edbc":"target=pd.Series(y,dtype='category')\ntarget","e1eaaa1e":"target.value_counts()","f1b20f5c":"t=target.cat.codes\nt","5130cceb":"from sklearn.model_selection import train_test_split\ntrain_x,test_x,train_y,test_y=train_test_split(x,t,test_size=0.2,shuffle=True)\ntrain_x.shape,test_x.shape,train_y.shape,test_y.shape","606430fa":"from sklearn.linear_model import LogisticRegression\nlg=LogisticRegression(max_iter=200,solver='saga')\nlg.fit(train_x,train_y)","5b55e349":"yhat=lg.predict(test_x)","8514b5a5":"from sklearn.metrics import accuracy_score\naccuracy_score(test_y,yhat)","deae4229":"from sklearn.svm import SVC \nlg=SVC()\nlg.fit(train_x,train_y)","c2618b83":"yhat=lg.predict(test_x)","493de467":"yhat","45c8b9a6":"accuracy_score(test_y,yhat)","de0a62c5":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nmodel=Sequential()\nmodel.add(Dense(64,input_dim=train_x.shape[1],activation='relu',name='sh_dense1'))\n#model.add(Dense(120,activation='relu'))\nmodel.add(Dense(3,activation='softmax',name='sh_dense2'))\n\nmodel.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\nmodel.summary()\n\nmodel.fit(train_x,train_y,epochs=500)","38a5ba83":"yhat=model.predict_classes(test_x)","b888d834":"yhat","97bf0804":"accuracy_score(test_y,yhat)","2837674e":"model.save('my_model')","a2426b5d":"model.save('my_model.h5')","f88fcadb":"model.save_weights('my_model_weights')","dfc06df9":"model.weights","556c8576":"model.layers","398064f3":"model.layers[0].weights[0].numpy()","9ad55962":"l1_weights=model.layers[0].weights[0].numpy()\nl1_weights","cea9b20c":"l1_bias=model.layers[0].weights[1].numpy()\nl1_bias","9578c8ee":"np.save('l1_w',l1_weights,)","6e4ded1a":"for i in model.layers:\n    print(i.name)\n    print(i.output)","82620753":"l1_weights.astype('float32').tofile('l1_weights.bin')\n","c416cbc7":"outputs = [layer.output for layer in model.layers]\noutputs","11cac688":"from tensorflow.keras import backend as K\n\noutputs = [K.function([model.input], [layer.output])([train_x, 1]) for layer in model.layers]\noutputs[0][0].shape","90e2a053":"# Classification using Logistic Regression","628cee87":"# Using ANN","dab31090":"# Saving Weights","58240c6c":"# matplotlib.image","5f9fae36":"# Saving as flat binary file","25cd959e":"# Saving weights using numpy","46bb1483":"# Output for each layer","f0345648":"# PIL (Python Imaging Library)","6713e86e":"https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/Model","7918a370":"#  Loading bulk of images & Preprocess for ML Algorithms","2679a063":"# Back to PPT...","310988a5":"# Preprocessing - Target "}}