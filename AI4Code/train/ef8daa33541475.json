{"cell_type":{"5d5ec99f":"code","64d93ea9":"code","b8561b97":"code","3224999c":"code","2822bb7d":"code","d93c49e7":"code","29b1fbf7":"code","fd291f35":"code","c291a105":"code","4e1d7af3":"code","4ff3b16c":"code","04549689":"code","35f0de3a":"code","e3b93062":"markdown","ae8a285f":"markdown","a0f4b521":"markdown","9ce9fe26":"markdown","c9a8f277":"markdown","4bc412e7":"markdown","ab15ef82":"markdown","24054db5":"markdown","0633438b":"markdown","d60b27e7":"markdown","ff87d998":"markdown","d2f050a6":"markdown","31bfc351":"markdown","edfba764":"markdown"},"source":{"5d5ec99f":"import torch\nfrom torch import nn\nfrom tqdm.auto import tqdm\nfrom torchvision import transforms\nfrom torchvision.utils import make_grid\nfrom torchvision.datasets import CelebA\nfrom torch.utils.data import DataLoader\nimport matplotlib.pyplot as plt\ntorch.manual_seed(0) # Set for our testing purposes, please do not change!\n\ndef show_tensor_images(image_tensor, num_images=16, size=(3, 64, 64), nrow=3):\n    '''\n    Function for visualizing images: Given a tensor of images, number of images, and\n    size per image, plots and prints the images in an uniform grid.\n    '''\n    image_tensor = (image_tensor + 1) \/ 2\n    image_unflat = image_tensor.detach().cpu()\n    image_grid = make_grid(image_unflat[:num_images], nrow=nrow)\n    plt.imshow(image_grid.permute(1, 2, 0).squeeze())\n    plt.show()","64d93ea9":"class Generator(nn.Module):\n    '''\n    Generator Class\n    Values:\n        z_dim: the dimension of the noise vector, a scalar\n        im_chan: the number of channels of the output image, a scalar\n              (CelebA is rgb, so 3 is our default)\n        hidden_dim: the inner dimension, a scalar\n    '''\n    def __init__(self, z_dim=10, im_chan=3, hidden_dim=64):\n        super(Generator, self).__init__()\n        self.z_dim = z_dim\n        # Build the neural network\n        self.gen = nn.Sequential(\n            self.make_gen_block(z_dim, hidden_dim * 8),\n            self.make_gen_block(hidden_dim * 8, hidden_dim * 4),\n            self.make_gen_block(hidden_dim * 4, hidden_dim * 2),\n            self.make_gen_block(hidden_dim * 2, hidden_dim),\n            self.make_gen_block(hidden_dim, im_chan, kernel_size=4, final_layer=True),\n        )\n\n    def make_gen_block(self, input_channels, output_channels, kernel_size=3, stride=2, final_layer=False):\n        '''\n        Function to return a sequence of operations corresponding to a generator block of DCGAN;\n        a transposed convolution, a batchnorm (except in the final layer), and an activation.\n        Parameters:\n            input_channels: how many channels the input feature representation has\n            output_channels: how many channels the output feature representation should have\n            kernel_size: the size of each convolutional filter, equivalent to (kernel_size, kernel_size)\n            stride: the stride of the convolution\n            final_layer: a boolean, true if it is the final layer and false otherwise \n                      (affects activation and batchnorm)\n        '''\n        if not final_layer:\n            return nn.Sequential(\n                nn.ConvTranspose2d(input_channels, output_channels, kernel_size, stride),\n                nn.BatchNorm2d(output_channels),\n                nn.ReLU(inplace=True),\n            )\n        else:\n            return nn.Sequential(\n                nn.ConvTranspose2d(input_channels, output_channels, kernel_size, stride),\n                nn.Tanh(),\n            )\n\n    def forward(self, noise):\n        '''\n        Function for completing a forward pass of the generator: Given a noise tensor, \n        returns generated images.\n        Parameters:\n            noise: a noise tensor with dimensions (n_samples, z_dim)\n        '''\n        x = noise.view(len(noise), self.z_dim, 1, 1)\n        return self.gen(x)\n\ndef get_noise(n_samples, z_dim, device='cpu'):\n    '''\n    Function for creating noise vectors: Given the dimensions (n_samples, z_dim)\n    creates a tensor of that shape filled with random numbers from the normal distribution.\n    Parameters:\n        n_samples: the number of samples in the batch, a scalar\n        z_dim: the dimension of the noise vector, a scalar\n        device: the device type\n    '''\n    return torch.randn(n_samples, z_dim, device=device)","b8561b97":"class Classifier(nn.Module):\n    '''\n    Classifier Class\n    Values:\n        im_chan: the number of channels of the output image, a scalar\n              (CelebA is rgb, so 3 is our default)\n        n_classes: the total number of classes in the dataset, an integer scalar\n        hidden_dim: the inner dimension, a scalar\n    '''\n    def __init__(self, im_chan=3, n_classes=2, hidden_dim=64):\n        super(Classifier, self).__init__()\n        self.classifier = nn.Sequential(\n            self.make_classifier_block(im_chan, hidden_dim),\n            self.make_classifier_block(hidden_dim, hidden_dim * 2),\n            self.make_classifier_block(hidden_dim * 2, hidden_dim * 4, stride=3),\n            self.make_classifier_block(hidden_dim * 4, n_classes, final_layer=True),\n        )\n\n    def make_classifier_block(self, input_channels, output_channels, kernel_size=4, stride=2, final_layer=False):\n        '''\n        Function to return a sequence of operations corresponding to a classifier block; \n        a convolution, a batchnorm (except in the final layer), and an activation (except in the final layer).\n        Parameters:\n            input_channels: how many channels the input feature representation has\n            output_channels: how many channels the output feature representation should have\n            kernel_size: the size of each convolutional filter, equivalent to (kernel_size, kernel_size)\n            stride: the stride of the convolution\n            final_layer: a boolean, true if it is the final layer and false otherwise \n                      (affects activation and batchnorm)\n        '''\n        if final_layer:\n            return nn.Sequential(\n                nn.Conv2d(input_channels, output_channels, kernel_size, stride),\n            )\n        else:\n            return nn.Sequential(\n                nn.Conv2d(input_channels, output_channels, kernel_size, stride),\n                nn.BatchNorm2d(output_channels),\n                nn.LeakyReLU(0.2, inplace=True),\n            )\n\n    def forward(self, image):\n        '''\n        Function for completing a forward pass of the classifier: Given an image tensor, \n        returns an n_classes-dimension tensor representing fake\/real.\n        Parameters:\n            image: a flattened image tensor with im_chan channels\n        '''\n        class_pred = self.classifier(image)\n        return class_pred.view(len(class_pred), -1)","3224999c":"z_dim = 64\nbatch_size = 128\ndevice = 'cuda'","2822bb7d":"def train_classifier(filename):\n    import seaborn as sns\n    import matplotlib.pyplot as plt\n\n    # You can run this code to train your own classifier, but there is a provided pretrained one.\n    # If you'd like to use this, just run \"train_classifier(filename)\"\n    # to train and save a classifier on the label indices to that filename.\n\n    # Target all the classes, so that's how many the classifier will learn\n    label_indices = range(40)\n\n    n_epochs = 3\n    display_step = 500\n    lr = 0.001\n    beta_1 = 0.5\n    beta_2 = 0.999\n    image_size = 64\n\n    transform = transforms.Compose([\n        transforms.Resize(image_size),\n        transforms.CenterCrop(image_size),\n        transforms.ToTensor(),\n        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),\n    ])\n\n    dataloader = DataLoader(\n        CelebA(\".\", split='train', download=True, transform=transform),\n        batch_size=batch_size,\n        shuffle=True)\n\n    classifier = Classifier(n_classes=len(label_indices)).to(device)\n    class_opt = torch.optim.Adam(classifier.parameters(), lr=lr, betas=(beta_1, beta_2))\n    criterion = nn.BCEWithLogitsLoss()\n\n    cur_step = 0\n    classifier_losses = []\n    # classifier_val_losses = []\n    for epoch in range(n_epochs):\n        # Dataloader returns the batches\n        for real, labels in tqdm(dataloader):\n            real = real.to(device)\n            labels = labels[:, label_indices].to(device).float()\n\n            class_opt.zero_grad()\n            class_pred = classifier(real)\n            class_loss = criterion(class_pred, labels)\n            class_loss.backward() # Calculate the gradients\n            class_opt.step() # Update the weights\n            classifier_losses += [class_loss.item()] # Keep track of the average classifier loss\n\n            ## Visualization code ##\n            if cur_step % display_step == 0 and cur_step > 0:\n                class_mean = sum(classifier_losses[-display_step:]) \/ display_step\n                print(f\"Step {cur_step}: Classifier loss: {class_mean}\")\n                step_bins = 20\n                x_axis = sorted([i * step_bins for i in range(len(classifier_losses) \/\/ step_bins)] * step_bins)\n                sns.lineplot(x_axis, classifier_losses[:len(x_axis)], label=\"Classifier Loss\")\n                plt.legend()\n                plt.show()\n                torch.save({\"classifier\": classifier.state_dict()}, filename)\n            cur_step += 1\n\n# Uncomment the last line to train your own classfier - this line will not work in Coursera.\n# If you'd like to do this, you'll have to download it and run it, ideally using a GPU \n# train_classifier(\"filename\")","d93c49e7":"# Downlaod the prtrained models from Google Drive\n!wget -q -O pretrained_celeba.pth \"https:\/\/drive.google.com\/uc?id=1Hp3A7cAmCPWwPtKzp9sj91jF1szwioJS\"\n!wget -q -O pretrained_classifier.pth \"https:\/\/drive.google.com\/uc?id=1-8OsxfPiUHVB8vNtJCLrPDMMkuKKNDU7\"\n\nimport torch\ngen = Generator(z_dim).to(device)\ngen_dict = torch.load(\"pretrained_celeba.pth\", map_location=torch.device(device))[\"gen\"]\ngen.load_state_dict(gen_dict)\ngen.eval()\n\nn_classes = 40\nclassifier = Classifier(n_classes=n_classes).to(device)\nclass_dict = torch.load(\"pretrained_classifier.pth\", map_location=torch.device(device))[\"classifier\"]\nclassifier.load_state_dict(class_dict)\nclassifier.eval()\nprint(\"Loaded the models!\")\n\nopt = torch.optim.Adam(classifier.parameters(), lr=0.01)","29b1fbf7":"# UNQ_C1 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: calculate_updated_noise\ndef calculate_updated_noise(noise, weight):\n    '''\n    Function to return noise vectors updated with stochastic gradient ascent.\n    Parameters:\n        noise: the current noise vectors. You have already called the backwards function on the target class\n          so you can access the gradient of the output class with respect to the noise by using noise.grad\n        weight: the scalar amount by which you should weight the noise gradient\n    '''\n    #### START CODE HERE ####\n    new_noise = noise + noise.grad*weight\n    #### END CODE HERE ####\n    return new_noise","fd291f35":"# UNIT TEST\n# Check that the basic function works\nopt.zero_grad()\nnoise = torch.ones(20, 20) * 2\nnoise.requires_grad_()\nfake_classes = (noise ** 2).mean()\nfake_classes.backward()\nnew_noise = calculate_updated_noise(noise, 0.1)\nassert type(new_noise) == torch.Tensor\nassert tuple(new_noise.shape) == (20, 20)\nassert new_noise.max() == 2.0010\nassert new_noise.min() == 2.0010\nassert torch.isclose(new_noise.sum(), torch.tensor(0.4) + 20 * 20 * 2)\nprint(\"Success!\")","c291a105":"# Check that it works for generated images\nopt.zero_grad()\nnoise = get_noise(32, z_dim).to(device).requires_grad_()\nfake = gen(noise)\nfake_classes = classifier(fake)[:, 0]\nfake_classes.mean().backward()\nnoise.data = calculate_updated_noise(noise, 0.01)\nfake = gen(noise)\nfake_classes_new = classifier(fake)[:, 0]\nassert torch.all(fake_classes_new > fake_classes)\nprint(\"Success!\")","4e1d7af3":"# First generate a bunch of images with the generator\nn_images = 8\nfake_image_history = []\ngrad_steps = 10 # Number of gradient steps to take\nskip = 2 # Number of gradient steps to skip in the visualization\n\nfeature_names = [\"5oClockShadow\", \"ArchedEyebrows\", \"Attractive\", \"BagsUnderEyes\", \"Bald\", \"Bangs\",\n\"BigLips\", \"BigNose\", \"BlackHair\", \"BlondHair\", \"Blurry\", \"BrownHair\", \"BushyEyebrows\", \"Chubby\",\n\"DoubleChin\", \"Eyeglasses\", \"Goatee\", \"GrayHair\", \"HeavyMakeup\", \"HighCheekbones\", \"Male\", \n\"MouthSlightlyOpen\", \"Mustache\", \"NarrowEyes\", \"NoBeard\", \"OvalFace\", \"PaleSkin\", \"PointyNose\", \n\"RecedingHairline\", \"RosyCheeks\", \"Sideburn\", \"Smiling\", \"StraightHair\", \"WavyHair\", \"WearingEarrings\", \n\"WearingHat\", \"WearingLipstick\", \"WearingNecklace\", \"WearingNecktie\", \"Young\"]\n\n### Change me! ###\ntarget_indices = feature_names.index(\"Young\") # Feel free to change this value to any string from feature_names!\n\nnoise = get_noise(n_images, z_dim).to(device).requires_grad_()\nfor i in range(grad_steps):\n    opt.zero_grad()\n    fake = gen(noise)\n    fake_image_history += [fake]\n    fake_classes_score = classifier(fake)[:, target_indices].mean()\n    fake_classes_score.backward()\n    noise.data = calculate_updated_noise(noise, 1 \/ grad_steps)\n\nplt.rcParams['figure.figsize'] = [n_images * 2, grad_steps * 2]\nshow_tensor_images(torch.cat(fake_image_history[::skip], dim=2), num_images=n_images, nrow=n_images)","4ff3b16c":"# UNQ_C2 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: get_score\ndef get_score(current_classifications, original_classifications, target_indices, other_indices, penalty_weight):\n    '''\n    Function to return the score of the current classifications, penalizing changes\n    to other classes with an L2 norm.\n    Parameters:\n        current_classifications: the classifications associated with the current noise\n        original_classifications: the classifications associated with the original noise\n        target_indices: the index of the target class\n        other_indices: the indices of the other classes\n        penalty_weight: the amount that the penalty should be weighted in the overall score\n    '''\n    # Steps: 1) Calculate the change between the original and current classifications (as a tensor)\n    #           by indexing into the other_indices you're trying to preserve, like in x[:, features].\n    #        2) Calculate the norm (magnitude) of changes per example.\n    #        3) Multiply the mean of the example norms by the penalty weight. \n    #           This will be your other_class_penalty.\n    #           Make sure to negate the value since it's a penalty!\n    #        4) Take the mean of the current classifications for the target feature over all the examples.\n    #           This mean will be your target_score.\n    #### START CODE HERE ####\n    # Calculate the norm (magnitude) of changes per example and multiply by penalty weight\n    other_class_penalty = -torch.norm(current_classifications[:,other_indices] - original_classifications[:,other_indices], dim=1).mean()*penalty_weight\n    # Take the mean of the current classifications for the target feature\n    target_score = current_classifications[:, target_indices].mean()\n    #### END CODE HERE ####\n    return target_score + other_class_penalty","04549689":"# UNIT TEST\nassert torch.isclose(\n    get_score(torch.ones(4, 3), torch.zeros(4, 3), [0], [1, 2], 0.2), \n    1 - torch.sqrt(torch.tensor(2.)) * 0.2\n)\nprint(\"Success!\")","35f0de3a":"fake_image_history = []\n### Change me! ###\ntarget_indices = feature_names.index(\"Smiling\") # Feel free to change this value to any string from feature_names from earlier!\nother_indices = [cur_idx != target_indices for cur_idx, _ in enumerate(feature_names)]\nnoise = get_noise(n_images, z_dim).to(device).requires_grad_()\noriginal_classifications = classifier(gen(noise)).detach()\nfor i in range(grad_steps):\n    opt.zero_grad()\n    fake = gen(noise)\n    fake_image_history += [fake]\n    fake_score = get_score(\n        classifier(fake), \n        original_classifications,\n        target_indices,\n        other_indices,\n        penalty_weight=0.1\n    )\n    fake_score.backward()\n    noise.data = calculate_updated_noise(noise, 1 \/ grad_steps)\n\nplt.rcParams['figure.figsize'] = [n_images * 2, grad_steps * 2]\nshow_tensor_images(torch.cat(fake_image_history[::skip], dim=2), num_images=n_images, nrow=n_images)","e3b93062":"## Specifying Parameters\nBefore you begin training, you need to specify a few parameters:\n  *   z_dim: the dimension of the noise vector\n  *   batch_size: the number of images per forward\/backward pass\n  *   device: the device type","ae8a285f":"# Controllable Generation","a0f4b521":"## Getting started!\n\nYou will start off by importing useful libraries and packages and defining a visualization function. You have also been provided with the generator, noise, and classifier code from earlier assignments. The classifier has the same archicture as the earlier critic (remember that the discriminator\/critic is simply a classifier used to classify real and fake).\n\n#### CelebA\nFor this notebook, instead of the MNIST dataset, you will be using [CelebA](http:\/\/mmlab.ie.cuhk.edu.hk\/projects\/CelebA.html). CelebA is a dataset of annotated celebrity images. Since they are colored (not black-and-white), the images have three channels for red, green, and blue (RGB).\n\n![alt text](https:\/\/drive.google.com\/uc?id=1xn6LXNdQHia4Av31qx_TDP3r5QkC_cTe)","9ce9fe26":"#### Packages and Visualization","c9a8f277":"#### Generator and Noise","4bc412e7":"## Train a Classifier (Optional)\n\nYou're welcome to train your own classifier with this code, but you are provided with a pretrained one later in the code. Feel free to skip this code block, and if you do want to train your own classifier, it is recommended that you initially go through the assignment with the provided classifier!","ab15ef82":"#### Generation\nNow, you can use the classifier along with stochastic gradient ascent to make noise that generates more of a certain feature. In the code given to you here, you can generate smiling faces. Feel free to change the target index and control some of the other features in the list! You will notice that some features are easier to detect and control than others.\n\nThe list you have here are the features labeled in CelebA, which you used to train your classifier. If you wanted to control another feature, you would need to get data that is labeled with that feature and train a classifier on that feature.","24054db5":"## Loading the Pretrained Models\nYou will then load the pretrained generator and classifier using the following code. (If you trained your own classifier, you can load that one here instead.)","0633438b":"## Entanglement and Regularization\nYou may also notice that sometimes more features than just the target feature change. This is because some features are entangled. To fix this, you can try to isolate the target feature more by holding the classes outside of the target class constant. One way you can implement this is by penalizing the differences from the original class with L2 regularization. This L2 regularization would apply a penalty for this difference using the L2 norm and this would just be an additional term on the loss function.\n\nHere, you'll have to implement the score function: the higher, the better. The score is calculated by adding the target score and a penalty -- note that the penalty is meant to lower the score, so it should have a negative value.\n\nFor every non-target class, take the difference between the current noise and the old noise. The greater this value is, the more features outside the target have changed. You will calculate the magnitude of the change, take the mean, and negate it. Finally, add this penalty to the target score. The target score is the mean of the target class in the current noise.\n\n<details>\n\n<summary>\n<font size=\"3\" color=\"green\">\n<b>Optional hints for <code><font size=\"4\">get_score<\/font><\/code><\/b>\n<\/font>\n<\/summary>\n\n1.   The higher the score, the better!\n2.   You want to calculate the loss per image, so you'll need to pass a dim argument to [`torch.norm`](https:\/\/pytorch.org\/docs\/stable\/generated\/torch.norm.html).\n3.   Calculating the magnitude of the change requires you to take the norm of the difference between the classifications, not the difference of the norms.\n\n<\/details>","d60b27e7":"#### Update Noise\nFor training, you need to write the code to update the noise to produce more of your desired feature. You do this by performing stochastic gradient ascent. You use stochastic gradient ascent to find the local maxima, as opposed to stochastic gradient descent which finds the local minima. Gradient ascent is gradient descent over the negative of the value being optimized. Their formulas are essentially the same, however, instead of subtracting the weighted value, stochastic gradient ascent adds it; it can be calculated by `new = old + (\u2207 old * weight)`, where \u2207 is the gradient of `old`. You perform stochastic gradient ascent to try and maximize the amount of the feature you want. If you wanted to reduce the amount of the feature, you would perform gradient descent. However, in this assignment you are interested in maximize your feature using gradient ascent, since many features in the dataset are not present much more often than they're present and you are trying to add a feature to the images, not remove.\n\nGiven the noise with its gradient already calculated through the classifier, you want to return the new noise vector.\n\n<details>\n\n<summary>\n<font size=\"3\" color=\"green\">\n<b>Optional hint for <code><font size=\"4\">calculate_updated_noise<\/font><\/code><\/b>\n<\/font>\n<\/summary>\n\n1.   Remember the equation for gradient ascent: `new = old + (\u2207 old * weight)`.\n\n<\/details>","ff87d998":"#### Classifier","d2f050a6":"## Training\nNow you can start implementing a method for controlling your GAN!","31bfc351":"In the following block of code, you will run the gradient ascent with this new score function. You might notice a few things after running it: \n\n1.   It may fail more often at producing the target feature when compared to the original approach. This suggests that the model may not be able to generate an image that has the target feature without changing the other features. This makes sense! For example, it may not be able to generate a face that's smiling but whose mouth is NOT slightly open. This may also expose a limitation of the generator. \nAlternatively, even if the generator can produce an image with the intended features, it might require many intermediate changes to get there and may get stuck in a local minimum.\n\n2.   This process may change features which the classifier was not trained to recognize since there is no way to penalize them with this method. Whether it's possible to train models to avoid changing unsupervised features is an open question.","edfba764":"### Goals\nIn this notebook, you're going to implement a GAN controllability method using gradients from a classifier. By training a classifier to recognize a relevant feature, you can use it to change the generator's inputs (z-vectors) to make it generate images with more or less of that feature.\n\nYou will be started you off with a pre-trained generator and classifier, so that you can focus on the controllability aspects. However, in case you would like to train your own classifier, the code for that has been provided as well.\n\n### Learning Objectives\n1. Observe how controllability can change a generator's output.\n2. Resolve\u00a0some\u00a0of\u00a0the\u00a0challenges\u00a0that entangled\u00a0features pose to controllability."}}