{"cell_type":{"d73b2bba":"code","e3029ad2":"code","ba0ccd32":"code","2d81e1db":"code","f6aa9049":"markdown","70fb8864":"markdown","4eca2808":"markdown","2a72161f":"markdown"},"source":{"d73b2bba":"import pandas as pd\nfrom sklearn.model_selection import train_test_split, GridSearchCV\n\n# Read the data\nX = pd.read_csv('..\/input\/train.csv', index_col='Id')\nX_test_full = pd.read_csv('..\/input\/test.csv', index_col='Id')\n\n# Remove rows with missing target, separate target from predictors\nX.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X.SalePrice              \nX.drop(['SalePrice'], axis=1, inplace=True)\n\n# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\nlow_cardinality_cols = [cname for cname in X_train_full.columns if X_train_full[cname].nunique() < 10 and \n                        X_train_full[cname].dtype == \"object\"]\n\n# Select numeric columns\nnumerical_cols = [cname for cname in X_train_full.columns if X_train_full[cname].dtype in ['int64', 'float64']]\n\n# Select categorical columns\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10 and \n                    X_train_full[cname].dtype == \"object\"]\n\n# Keep selected columns only\nmy_cols = low_cardinality_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()\n\n","e3029ad2":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import mean_absolute_error\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='constant')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n","ba0ccd32":"from xgboost import XGBRegressor\n\n# Define the model\nxgb = XGBRegressor()\n\nparam_grid = {'n_estimators' : [50, 100, 200, 500, 1000],\n              'learning_rate' : [0.3, 0.1, 0.033, 0.011, 0.003, 0.001]\n             }\n\nbetter_xgb = GridSearchCV(xgb, param_grid, cv = 5, verbose = 5)\n\n# Pipeline the model with preprocessing\nimproved_xgb = Pipeline(steps = [('preprocessor', preprocessor),\n                          ('model', better_xgb)])\n\n# fit the model\nimproved_xgb.fit(X_train, y_train)\n\npred_imp_xgb = improved_xgb.predict(X_valid)\nmae_imp_xgb = mean_absolute_error(pred_imp_xgb, y_valid)\n\nprint(\"Mean Absolute Error with default XGB : 17662.736729452055\")\nprint(\"MAE with GridSearchCV improved XGB : \", mae_imp_xgb)","2d81e1db":"imp_xgb_preds = improved_xgb.predict(X_test)\n# Save test predictions to file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': imp_xgb_preds})\noutput.to_csv('submission.csv', index=False)","f6aa9049":"\n\n![Ames Housing dataset image](https:\/\/i.imgur.com\/lTJVG4e.png)\n\n","70fb8864":"# One-hot encode the data \nWe'll be pipelining all the preprocessing steps\n","4eca2808":"# Creating our Model and fitting it\nWe'll be using Extreme Gradient Boosting along with GridSearchCV","2a72161f":"# Making Predictions\nWe output our predictions to a CSV file for submission"}}