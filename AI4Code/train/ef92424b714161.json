{"cell_type":{"a4b35098":"code","97f15730":"code","b5fcf3c3":"code","15a8c0aa":"code","67b75bb4":"code","28dc5460":"code","8285eb31":"code","f2797ffe":"code","e3b3f459":"code","93984945":"code","47504990":"code","65e7a81a":"code","5c3afedd":"code","779cefb1":"code","cde765d8":"code","5ee20938":"code","61ab255a":"code","0a972aca":"code","f412783a":"code","adba6154":"code","db988e5b":"code","5e791fa8":"code","e039bf20":"code","cbe6ac12":"code","d3e8857b":"code","5b864a30":"code","0f18534d":"code","6b1cebab":"code","7d1fef10":"code","af6111e4":"code","3459c1b5":"code","7de2fbde":"code","e0bc86b7":"code","4954fe59":"code","7f01ce4d":"code","d1e7f71e":"code","5f13c0ec":"code","326cefc7":"code","8e9ab91b":"code","3c8f7c28":"code","316a3651":"code","8b208040":"code","3cc29435":"code","5d5318f1":"code","6a68e5dd":"code","4fb1ba49":"code","54972491":"code","59619be1":"code","03376c1b":"code","82375e9c":"code","822fbca5":"code","b679ed71":"code","4b1cf9e1":"code","c7f865ea":"code","4b2e923e":"code","23317ffa":"code","9b141ddd":"code","ab17d228":"code","015bc9bf":"code","8bd51290":"code","2a7e46e7":"code","6cc1f02e":"code","d937ffa4":"code","0abb1b23":"code","cea4fb8b":"code","a1a9820a":"code","c7d224b1":"code","05ca39ff":"code","6d9be9ce":"code","f87248ec":"code","7ec28d6d":"code","26f4ae2e":"code","42055d24":"code","42e4bccd":"code","b8efa4a6":"code","4ed80378":"code","9ab1e4e7":"code","8dc68dd7":"code","84eec69c":"code","93096fa5":"code","5c649bb1":"code","d01c7137":"code","a28c6d71":"code","14c9fdc4":"code","b6cae3c4":"code","d412a972":"code","d3bcb083":"code","ede0f77b":"code","7341b947":"code","892b1a4e":"code","67856d50":"code","366dec8d":"code","7e8bf0e9":"code","02bbeb13":"code","0eb2956e":"code","83d7ad5c":"code","9ca6d128":"code","8245440e":"code","75cd7b8b":"code","385519f1":"code","d58897a9":"code","83daedb1":"code","73bc6115":"code","e2a2fada":"code","8c6711a7":"code","729dee58":"code","15e28384":"code","947fcc54":"code","20514171":"code","4d2c5cf7":"code","15c22e60":"code","3139f2f8":"code","415dace4":"code","df6ebbd3":"code","b71cc84b":"code","e5c87fa0":"code","9cce23d6":"code","048a1853":"code","6007ae97":"code","7342dd4b":"code","6c0c57ed":"markdown","e2cff96b":"markdown","112e714a":"markdown","bb656815":"markdown","00a9e443":"markdown","4fff89ee":"markdown","54b48eef":"markdown","eff5a852":"markdown","14767aae":"markdown","dfbd2fac":"markdown","46632422":"markdown","00dcdf05":"markdown","fee83fad":"markdown","9ae3aab6":"markdown","18f0a2d8":"markdown","02a0c567":"markdown","b1b9e424":"markdown","b0366227":"markdown","7d2f15dd":"markdown","635936d9":"markdown","6ebe5ea6":"markdown","12d6b99e":"markdown","be63b82e":"markdown","3ebca2d0":"markdown","e69839fe":"markdown","e97825d9":"markdown","9fa0680b":"markdown","2faf1f9a":"markdown","ddb2b539":"markdown","2ff99e54":"markdown","96228637":"markdown","7c170c1e":"markdown","cf9ac483":"markdown","c7cfb783":"markdown","49ef4580":"markdown","e9c8ed20":"markdown","28293dc9":"markdown","9eed33a9":"markdown","854f4ce9":"markdown","bd0c5f53":"markdown","32c0d8c6":"markdown","7433e690":"markdown","805468f2":"markdown","bd34ad3c":"markdown","40cc8237":"markdown","8783931e":"markdown","0b67c12a":"markdown","42ae7df1":"markdown","0ee0290c":"markdown","09b54388":"markdown","c2e09432":"markdown","1668b83a":"markdown","570d215d":"markdown","393d294f":"markdown","7fe4bfe3":"markdown","ff2af2f4":"markdown","9bf05beb":"markdown","9b99e0be":"markdown","21ccb9de":"markdown","099297bf":"markdown","5dc5e99a":"markdown","1e5417ee":"markdown","d827c6b2":"markdown","966501df":"markdown","014ef1f5":"markdown","8e2f8685":"markdown","4e2a5813":"markdown","12201f5a":"markdown","1e4b2666":"markdown","d062097d":"markdown","d00fe4f3":"markdown","70d222f6":"markdown","1094f424":"markdown","9f49a953":"markdown","3c670f74":"markdown","92c8117a":"markdown","8ebf43ad":"markdown","94032c42":"markdown","23371674":"markdown","245fd195":"markdown","95cb4c92":"markdown","3f9e0861":"markdown","1e169504":"markdown","918bfb54":"markdown","e1ee6d23":"markdown","b858a868":"markdown","f824d440":"markdown","b0b476b0":"markdown","1fd373f8":"markdown","b932f03a":"markdown","b3b26b91":"markdown","dbe30ed1":"markdown","bc8bc912":"markdown","d648022f":"markdown","35b46524":"markdown","f9c2b776":"markdown","7ce30bac":"markdown"},"source":{"a4b35098":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nimport seaborn as sb\nimport os\nimport re\nfrom wordcloud import WordCloud\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly\nimport plotly.graph_objs as go\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.cluster import KMeans\n\ninit_notebook_mode(connected=True)\n%matplotlib inline \n\n# load dataset\nquestions = pd.read_csv(os.path.join(os.getcwd(), '..\/input\/\/questions.csv')) \nanswers = pd.read_csv(os.path.join(os.getcwd(), '..\/input\/\/answers.csv')) \nstudents = pd.read_csv(os.path.join(os.getcwd(), \"..\/input\/\/students.csv\")) \nprofessionals = pd.read_csv(os.path.join(os.getcwd(), '..\/input\/\/professionals.csv')) \ntag_questions = pd.read_csv(os.path.join(os.getcwd(), '..\/input\/\/tag_questions.csv')) \ntags = pd.read_csv(os.path.join(os.getcwd(), '..\/input\/\/tags.csv'))  \ngroups = pd.read_csv(os.path.join(os.getcwd(), '..\/input\/\/groups.csv'))  \ngroup_memberships = pd.read_csv(os.path.join(os.getcwd(), '..\/input\/\/group_memberships.csv'))  \nschool_memberships = pd.read_csv(os.path.join(os.getcwd(), '..\/input\/\/school_memberships.csv')) \nemails = pd.read_csv(os.path.join(os.getcwd(), '..\/input\/\/emails.csv')) \nmatches = pd.read_csv(os.path.join(os.getcwd(), '..\/input\/\/matches.csv')) \ncomments = pd.read_csv(os.path.join(os.getcwd(), '..\/input\/\/comments.csv'))\n","97f15730":"# define some utils methods\ndef draw_bar(dt, s, head=20, sort=True):\n    if sort:\n        dt.groupby([s])[s].count().sort_values(ascending=False).head(head).plot(kind='bar', figsize=(15,8))\n    else:\n        dt.groupby([s])[s].count().head(head).plot(kind='bar', figsize=(15,8))\n    \ndef draw_map(dt, s1, s2, sort=False):\n    d1 = dt[s1]\n    d2 = dt[s2]\n    fig, ax = plt.subplots(figsize=(12,12))\n    sb.heatmap(pd.crosstab(d1, d2).head(20), annot=True, ax=ax, fmt='d', linewidths=0.1)\n    \ndef clean_body(raw_html):\n    cleanr = re.compile('<.*?>|\\\\W|\\\\n|\\\\r')\n    cleantext = re.sub(cleanr, ' ', raw_html)\n    cleantext = re.sub('\\\\s{2,}', ' ', cleantext)\n    return cleantext\n\ndef draw_cloud(s, n=100, what='str'):\n    if what == 'str':\n        cloud = WordCloud(width=1440, height=1080, max_words=n).generate(\" \".join(s.astype(str)))\n    else:\n        cloud = WordCloud(width=1440, height=1080, max_words=n).generate_from_frequencies(s)\n    plt.figure(figsize=(20, 15))\n    plt.imshow(cloud)\n    \ndef draw_plotly(x_1, y_1, x_2, y_2, l_name, r_name, title):\n    trace0 = go.Bar(\n        x=x_1,\n        y=y_1,\n        name=l_name\n    )\n    trace1 = go.Bar(\n        x=x_2,\n        y=y_2,\n        name=r_name\n    )\n\n    data = [trace0, trace1]\n    layout = {'title': title, 'xaxis': {'tickangle': 45}}\n\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig, show_link=False)","b5fcf3c3":"professionals_lower = professionals.copy()","15a8c0aa":"professionals_industry = professionals.groupby('professionals_industry')['professionals_industry'].count().sort_values(ascending=False).head(20)\nprofessionals_lower['professionals_industry'] = professionals_lower['professionals_industry'].str.lower()\nprofessionals_industry_lower = professionals_lower.groupby('professionals_industry')['professionals_industry'].count().sort_values(ascending=False).head(20)\ndraw_plotly(professionals_industry_lower.index, professionals_industry, professionals_industry_lower.index,\n            professionals_industry_lower, 'Professionals industry', 'Professionals industry lowercas', 'Professionals Industry')","67b75bb4":"professionals_location = professionals.groupby('professionals_location')['professionals_location'].count().sort_values(ascending=False).head(20)\nprofessionals_lower['professionals_location'] = professionals_lower['professionals_location'].str.lower()\nprofessionals_location_lower = professionals_lower.groupby('professionals_location')['professionals_location'].count().sort_values(ascending=False).head(20)\ndraw_plotly(professionals_location_lower.index, professionals_location, professionals_location_lower.index,\n           professionals_location_lower, 'Professionals location', 'Professionals location lowercase', 'Professionals Location')","28dc5460":"professionals_headline = professionals.groupby('professionals_headline')['professionals_headline'].count().sort_values(ascending=False).head(20)\nprofessionals_lower['professionals_headline'] = professionals_lower['professionals_headline'].str.lower()\nprofessionals_headline_lower = professionals_lower.groupby('professionals_headline')['professionals_headline'].count().sort_values(ascending=False).head(20)\ndraw_plotly(professionals_headline_lower.index, professionals_headline, professionals_headline_lower.index,\n           professionals_headline_lower, 'Professionals headlite', 'Professionals headline lowercase',\n           'Professionals Headline')","8285eb31":"professionals['year_joined'] = pd.to_datetime(professionals['professionals_date_joined']).dt.year","f2797ffe":"professionals['month_joined'] = pd.to_datetime(professionals['professionals_date_joined']).dt.month","e3b3f459":"professionals.shape","93984945":"draw_map(professionals, 'year_joined', 'month_joined')","47504990":"draw_bar(professionals, 'year_joined', sort=False)","65e7a81a":"students['year_joined'] = pd.to_datetime(students['students_date_joined']).dt.year","5c3afedd":"students['month_joined'] = pd.to_datetime(students['students_date_joined']).dt.month","779cefb1":"draw_map(students, 'year_joined', 'month_joined')","cde765d8":"draw_bar(students, 'year_joined', sort=False)","5ee20938":"students_location = students.groupby('students_location')['students_location'].count().sort_values(ascending=False).head(20)\nstudents_lower = students.copy()\nstudents_lower['students_location'] = students_lower['students_location'].str.lower()\nstudents_location_lower = students_lower.groupby('students_location')['students_location'].count().sort_values(ascending=False).head(20)\ndraw_plotly(students_location_lower.index, students_location, students_location_lower.index, students_location_lower,\n           'Students location', 'Students location lowercase', 'Students Location')","61ab255a":"answers['year_added'] = pd.to_datetime(answers['answers_date_added']).dt.year","0a972aca":"answers['month_added'] = pd.to_datetime(answers['answers_date_added']).dt.month","f412783a":"draw_map(answers, 'year_added', 'month_added')","adba6154":"draw_bar(answers, 'year_added', sort=False)","db988e5b":"prof_answ = pd.merge(answers, professionals, right_on='professionals_id', left_on='answers_author_id', how='left')","5e791fa8":"draw_bar(prof_answ, 'answers_author_id')","e039bf20":"prof_answ['answers_author_id'].unique().size","cbe6ac12":"professionals['professionals_id'].unique().size","d3e8857b":"u1 = prof_answ.drop(['answers_id', 'answers_author_id', 'answers_question_id', 'answers_date_added', 'answers_body', 'month_added', 'professionals_date_joined', 'year_added'], axis=1).drop_duplicates()","5b864a30":"profs = professionals.groupby('year_joined')[['professionals_id']].count().join(\n    u1.groupby('year_joined')[['professionals_id']].count(), lsuffix='_left', rsuffix='_right')\n\ndraw_plotly(profs.index, profs.professionals_id_left, profs.index, profs.professionals_id_right, \n            'All professionals', 'Active professionals', 'Professionals')","0f18534d":"profs = professionals.groupby('professionals_location')[['professionals_id']].count().nlargest(30, columns=['professionals_id']).join(\n    u1.groupby('professionals_location')[['professionals_id']].count().nlargest(30, columns=['professionals_id']), lsuffix='_left', rsuffix='_right')\ndraw_plotly(profs.index, profs.professionals_id_left, profs.index, profs.professionals_id_right, 'All professionals', \n           'Active professionals', \"Top 30. Professional's activity by location\")","6b1cebab":"p = professionals.groupby('professionals_location')[['professionals_id']].count().join(\n    u1.groupby('professionals_location')[['professionals_id']].count(), lsuffix='_left', rsuffix='_right')\nprofs = p[p['professionals_id_right'].isna()].sort_values(by=['professionals_id_left'], ascending=False).head(30)\ndraw_plotly(profs.index, profs.professionals_id_left, profs.index, profs.professionals_id_right, 'All professionals', \n           'Active professionals', \"Top 30 not active professionals by location\")","7d1fef10":"profs = professionals.groupby('professionals_industry')[['professionals_id']].count().nlargest(30, columns=['professionals_id']).join(\n    u1.groupby('professionals_industry')[['professionals_id']].count().nlargest(30, columns=['professionals_id']), lsuffix='_left', rsuffix='_right')\ndraw_plotly(profs.index, profs.professionals_id_left, profs.index, profs.professionals_id_right, 'All professionals', \n           'Active professionals', \"Top 30. Professional's activity by industry\")","af6111e4":"p = professionals.groupby('professionals_industry')[['professionals_id']].count().join(\n    u1.groupby('professionals_industry')[['professionals_id']].count(), lsuffix='_left', rsuffix='_right')\nprofs = p[p['professionals_id_right'].isna()].sort_values(by=['professionals_id_left'], ascending=False).head(30)\ndraw_plotly(profs.index, profs.professionals_id_left, profs.index, profs.professionals_id_right, 'All professionals', \n           'Active professionals', \"Top 30 not active professionals by industry\")","3459c1b5":"profs = professionals.groupby('professionals_headline')[['professionals_id']].count().nlargest(30, columns=['professionals_id']).join(\n    u1.groupby('professionals_headline')[['professionals_id']].count().nlargest(30, columns=['professionals_id']), lsuffix='_left', rsuffix='_right')\ndraw_plotly(profs.index, profs.professionals_id_left, profs.index, profs.professionals_id_right, 'All professionals', \n           'Active professionals', \"Top 30. Professional's activity by headline\")","7de2fbde":"p = professionals.groupby('professionals_headline')[['professionals_id']].count().join(\n    u1.groupby('professionals_headline')[['professionals_id']].count(), lsuffix='_left', rsuffix='_right')\nprofs = p[p['professionals_id_right'].isna()].sort_values(by=['professionals_id_left'], ascending=False).head(30)\ndraw_plotly(profs.index, profs.professionals_id_left, profs.index, profs.professionals_id_right, 'All professionals', \n           'Active professionals', \"Top 30 not active professionals by headline\")","e0bc86b7":"prof_answ['answers_body'] = prof_answ['answers_body'].apply(lambda x: clean_body(str(x)))\ndraw_cloud(prof_answ['answers_body'])","4954fe59":"draw_bar(questions, 'questions_body')","7f01ce4d":"draw_bar(questions, 'questions_title')","d1e7f71e":"questions.groupby(['questions_body', 'questions_author_id'])['questions_body'].count().sort_values(ascending=False).head(10).T","5f13c0ec":"questions[questions['questions_author_id'] == 'c17fb778ae734737b08f607e75a87460'].sort_values(by='questions_date_added').head(20).T","326cefc7":"questions['year_added'] = pd.to_datetime(questions['questions_date_added']).dt.year","8e9ab91b":"questions['month_added'] = pd.to_datetime(questions['questions_date_added']).dt.month","3c8f7c28":"draw_map(questions, 'month_added', 'year_added')","316a3651":"draw_bar(questions, 'year_added', sort=False)","8b208040":"a = answers.groupby('year_added')['year_added'].count().head(20)\nq = questions.groupby('year_added')['year_added'].count().head(20)\ndraw_plotly(a.index, a, q.index, q, 'Answers', 'Questions', 'Questions vs Answers')","3cc29435":"draw_cloud(questions['questions_title'])","5d5318f1":"draw_cloud(questions['questions_body'])","6a68e5dd":"stud_quest = pd.merge(questions, students, right_on='students_id', left_on='questions_author_id', how='inner')","4fb1ba49":"draw_bar(stud_quest, 'students_id', 40)","54972491":"tags.shape","59619be1":"tags['tags_tag_name'].unique().size","03376c1b":"tag_questions.shape","82375e9c":"tags_with_name = pd.merge(tags, tag_questions, left_on='tags_tag_id', right_on='tag_questions_tag_id', how='inner')","822fbca5":"tags_with_name['tags_tag_name'].unique().size","b679ed71":"draw_bar(tags_with_name, 'tags_tag_name')","4b1cf9e1":"draw_cloud(tags_with_name['tags_tag_name'])","c7f865ea":"unused_tags_id = set(tags['tags_tag_id'].tolist()) - set(tag_questions['tag_questions_tag_id'].tolist())","4b2e923e":"len(unused_tags_id)","23317ffa":"unused_tags = tags[tags['tags_tag_id'].isin(unused_tags_id)]\n","9b141ddd":"draw_cloud(unused_tags['tags_tag_name'])","ab17d228":"tags[tags['tags_tag_name'].str.contains('college', regex=False, na=False)].head(20)","015bc9bf":"unused_tags[unused_tags['tags_tag_name'].str.contains('college', regex=False, na=False)].head(20)","8bd51290":"answ_quest = pd.merge(answers, questions, left_on='answers_question_id', right_on='questions_id', how='outer', suffixes=('_answ', '_quest'))\nansw_quest_tags = pd.merge(answ_quest, tags_with_name, left_on='questions_id', right_on='tag_questions_question_id', how='outer')","2a7e46e7":"draw_bar(answ_quest, 'questions_id')","6cc1f02e":"without_answer = answ_quest[answ_quest['answers_id'].isna()]","d937ffa4":"draw_map(without_answer, 'month_added_quest', 'year_added_quest')","0abb1b23":"unanswered = answ_quest_tags[answ_quest_tags['answers_id'].isna()]","cea4fb8b":"draw_cloud(unanswered['tags_tag_name'])","a1a9820a":"unansw_tag_list = unanswered['tags_tag_name'].tolist()\nfreq_unansw_tags = {str(x): unansw_tag_list.count(x) for x in unansw_tag_list}\ndraw_cloud(freq_unansw_tags, what='freq')","c7d224b1":"\ndraw_cloud(unanswered['questions_title'])","05ca39ff":"draw_cloud(unanswered['questions_body'])","6d9be9ce":"groups['groups_group_type'].unique()","f87248ec":"draw_bar(groups, 'groups_group_type')","7ec28d6d":"draw_bar(group_memberships, 'group_memberships_user_id')","26f4ae2e":"prof_group = pd.merge(group_memberships, professionals, left_on='group_memberships_user_id', right_on='professionals_id')","42055d24":"stud_group = pd.merge(group_memberships, students, left_on='group_memberships_user_id', right_on='students_id')","42e4bccd":"draw_bar(prof_group, 'year_joined')","b8efa4a6":"draw_bar(stud_group, 'year_joined')","4ed80378":"group_answ = pd.merge(prof_group, answers, left_on='professionals_id', right_on='answers_author_id', how='inner')\nprof_group_unansw = set(prof_group['professionals_id'].tolist()) - set(group_answ['answers_author_id'].tolist())\ngroups_members_and_type = pd.merge(groups, group_memberships, left_on='groups_id', right_on='group_memberships_group_id')","9ab1e4e7":"draw_bar(groups_members_and_type[groups_members_and_type['group_memberships_user_id'].isin(prof_group_unansw)], 'groups_group_type')","8dc68dd7":"draw_bar(school_memberships, 'school_memberships_school_id')","84eec69c":"prof_school = pd.merge(school_memberships, professionals, left_on='school_memberships_user_id', right_on='professionals_id')","93096fa5":"stud_school = pd.merge(school_memberships, students, left_on='school_memberships_user_id', right_on='students_id')","5c649bb1":"prof_school.shape","d01c7137":"stud_school.shape","a28c6d71":"school_answ = pd.merge(school_memberships, answers, left_on='school_memberships_user_id', right_on='answers_author_id', how='inner')\nschool_answ.shape","14c9fdc4":"prof_school_unansw = school_answ[school_answ['answers_author_id'].isna()]\nprof_school_unansw.shape","b6cae3c4":"draw_bar(school_answ, 'school_memberships_school_id')","d412a972":"emails.shape","d3bcb083":"emails['year_sent'] = pd.to_datetime(emails['emails_date_sent']).dt.year","ede0f77b":"emails['month_sent'] = pd.to_datetime(emails['emails_date_sent']).dt.month","7341b947":"draw_map(emails, 'month_sent', 'year_sent')","892b1a4e":"draw_bar(emails, 'year_sent')","67856d50":"emails['emails_frequency_level'].unique()","366dec8d":"draw_bar(emails, 'emails_frequency_level')","7e8bf0e9":"draw_bar(emails, 'emails_recipient_id')","02bbeb13":"top_5 = emails.groupby('emails_recipient_id')['emails_recipient_id'].count().sort_values(ascending=False).head(5).index","0eb2956e":"professionals[professionals['professionals_id'].isin(top_5)].head()","83d7ad5c":"answers[answers['answers_author_id'].isin(top_5)].groupby('answers_author_id')['answers_author_id'].count()","9ca6d128":"draw_map(questions[questions['questions_id'].isin(matches['matches_question_id'].unique())], 'month_added', 'year_added')","8245440e":"draw_bar(matches, 'matches_email_id')","75cd7b8b":"draw_bar(matches, 'matches_question_id')","385519f1":"questions.shape","d58897a9":"matches['matches_question_id'].unique().size","83daedb1":"quest_tags = pd.merge(questions, tags_with_name, left_on='questions_id', right_on='tag_questions_question_id', how='inner')\nnot_sent_ids = set(quest_tags['questions_id'].tolist()) - set(matches['matches_question_id'].tolist())\nnot_sent_quest = quest_tags[quest_tags['questions_id'].isin(not_sent_ids)].dropna()","73bc6115":"not_sent_quest.head(10).T","e2a2fada":"\nnot_sent_quest.groupby('tags_tag_name')['tags_tag_name'].count().sort_values(ascending=False).head(20)","8c6711a7":"q_copy = questions.copy()\na_copy = answers.copy()\np_copy = professionals.copy()\nq_copy.drop(['questions_date_added', 'questions_author_id', 'questions_title'], axis=1, inplace=True)\na_copy.drop(['answers_date_added', 'answers_body'], axis=1, inplace=True)\np_copy.drop(['professionals_location', 'professionals_industry', 'professionals_headline', 'professionals_date_joined'], axis=1, inplace=True)\na_p = pd.merge(a_copy, p_copy, left_on='answers_author_id', right_on='professionals_id')\na_p.drop(['answers_id', 'answers_author_id'], axis=1, inplace=True)\nt = pd.merge(tags, tag_questions, left_on='tags_tag_id', right_on='tag_questions_tag_id')\nt.drop(['tags_tag_id', 'tag_questions_tag_id'], axis=1, inplace=True)","729dee58":"stop_tags = ['college', 'career', 'college-major ', 'career-counseling', 'scholarships', 'jobs', 'college-advice', \n             'double-major', 'chef', 'college-minor', 'college-applications', 'college-student', 'school', \n             'college-admissions', 'career-choice', 'university', 'job', 'college-major', 'any', 'student', \n             'professional', 'graduate-school', 'career-path', 'career-paths', 'college-majors', 'career-details', \n             'work', 'college-bound', 'success', 'studying', 'first-job', 'life', 'classes', 'resume', 'job-search']","15e28384":"most_used_tags = t[~t['tags_tag_name'].isin(stop_tags)].groupby('tags_tag_name')['tags_tag_name'].count().nlargest(200).index","947fcc54":"a_q_p = pd.merge(a_p, questions, left_on='answers_question_id', right_on='questions_id')\na_q_p.drop(['answers_question_id'], axis=1, inplace=True)\na_q_p_t = pd.merge(t, a_q_p, left_on='tag_questions_question_id', right_on='questions_id', how='inner')\na_q_p_t.drop(['tag_questions_question_id', 'questions_id'], axis=1, inplace=True)\nfiltered = a_q_p_t[a_q_p_t['tags_tag_name'].isin(most_used_tags)]\nfiltered = filtered.copy()\nfiltered.loc[:, 'questions_body'] = filtered['questions_body'].map(clean_body)\nfiltered = filtered.fillna('')","20514171":"labels = filtered['tags_tag_name']\ndata = filtered['questions_body']\nn_clusters = np.unique(labels).shape[0]","4d2c5cf7":"test_data_1 = data.iloc[11]\ntest_tag_1 = labels.iloc[11]\ntest_data_2 = data.iloc[40]\ntest_tag_2 = labels.iloc[40]\nprint(test_data_1)\nprint(test_tag_1)\nprint()\nprint(test_data_2)\nprint(test_tag_2)","15c22e60":"vectorizer = TfidfVectorizer(max_df=0.5, max_features=10000, min_df=2, stop_words='english',use_idf=True)\nX = vectorizer.fit_transform(data)","3139f2f8":"km = KMeans(n_clusters=n_clusters, init='k-means++', max_iter=100, n_init=1)","415dace4":"print(\"Clustering sparse data with %s\" % km)\n%time km.fit(X)","df6ebbd3":"clusters = km.labels_.tolist()\nquest = { 'tags': filtered['tags_tag_name'].tolist(), 'professionals_id': filtered['professionals_id'].tolist(), 'question': filtered['questions_body'].tolist(), 'cluster': clusters }\nframe = pd.DataFrame(quest, index = [clusters] , columns = ['tags', 'professionals_id', 'question', 'cluster'])","b71cc84b":"result = dict()\n\nfor i in range(n_clusters):\n    tags = [tag for tag in frame.loc[i]['tags'].unique()]\n    profs = [prof for prof in frame.loc[i]['professionals_id'].unique()]\n    quests = [quest for quest in frame.loc[i]['question'].unique()]\n        \n    if test_data_1 in quests:\n        result['test_data_1'] = test_data_1\n        result['test_tag_1'] = test_tag_1\n        result['tags_1'] = tags\n        result['profs_1'] = profs\n    if test_data_2 in quests:\n        result['test_data_2'] = test_data_2\n        result['test_tag_2'] = test_tag_2\n        result['tags_2'] = tags\n        result['profs_2'] = profs","e5c87fa0":"print(result.get('test_data_1'))\nprint()\nprint(result.get('test_tag_1'))\nprint(len(result.get('profs_1')))","9cce23d6":"a_q_p_t[a_q_p_t['professionals_id'].isin(result.get('profs_1'))].groupby('questions_body')['questions_body'].count().sort_values(ascending=False).head(10)","048a1853":"print(result.get('test_data_2'))\nprint()\nprint(result.get('test_tag_2'))\nprint(len(result.get('profs_2')))","6007ae97":"a_q_p_t[a_q_p_t['professionals_id'].isin(result.get('profs_2'))].groupby('questions_body')['questions_body'].count().sort_values(ascending=False).head(10)","7342dd4b":"print(len(result.get('profs_1')))\nprint(result.get('profs_1'))\nprint()\nprint(len(result.get('profs_2')))\nprint(result.get('profs_2'))","6c0c57ed":"**How many unanswered questions in each group type**","e2cff96b":"**Let's see how many professionals and students indicated school**","112e714a":"**Now we need to combine and clear the data we need**","bb656815":"# Questions + Answers + Tags Analysis <a class=\"anchor\" id=\"q_a_t\"><\/a>","00a9e443":"### Unused tags for questions","4fff89ee":"**And find new questions in the clusters**","54b48eef":"# Questions <a class=\"anchor\" id=\"questions\"><\/a>","eff5a852":"**Let's look how many active and not active professionals by industry**","14767aae":"**Well, most of questions about work, career and job. Unexpected ))**","dfbd2fac":"**Let's take a look at the students location. Seems to look good.**","46632422":"**Let's group and sort the questions by number of answers**","00dcdf05":"**To check the result, I filtered out the professional ID from the resulting cluster and chose the top 10 questions, which are answered more.**","fee83fad":"**Let's check questions without answers**","9ae3aab6":"**Let's look to most used words in the question's title and body.**","18f0a2d8":"# Answers <a class=\"anchor\" id=\"answers\"><\/a>","02a0c567":"**Seems like you need to invite more medical professionals**","b1b9e424":"**There is our hero 36ff3b3666df400f956f8335cf53e09e with biggest count of answers, but why do others get so many emails? And the hero-receiver of e-mails 0079e89bf1544926b98310e81315b9f1  has no answer at all. I think, you need check last user activity and not to send emails to people who haven't logged in a long time. Perhaps because of the number of emails they are blocked by some spam filter. It is better to send some invitation.**","b0366227":"**And in terms of tags**","7d2f15dd":"**Let's look at the most curious students.**","635936d9":"**And by year**","6ebe5ea6":"# Matches <a class=\"anchor\" id=\"matches\"><\/a>","12d6b99e":"**How many questions were sent for each email (top 20)** ","be63b82e":"**How many emails were sent for each question (top 20)**","3ebca2d0":"**Let's look at the number of answers by months and years**","e69839fe":"**Let's look how many e-mails sent by year\/month and by year**","e97825d9":"**Suppose we have new questions and tags for them. And we want to identify the professionals who will answer these questions. And we have prepared data from previous questions. We need to add new questions to the existing ones, cluster the questions and get a list of the most relevant professionals to the topic of the question.**","9fa0680b":"**Let's look how many e-mails sent by emails_recipient_id**","2faf1f9a":"**Let's look top 20 active and not active professionais by location** ","ddb2b539":"**Let's see how many questions and answers for years.**","2ff99e54":"# Tags <a class=\"anchor\" id=\"tags\"><\/a>","96228637":"**Doesn't look good. Most of the professionals are not active. Perhaps you should do a survey for inactive professionals and find out the reason.**","7c170c1e":"**Let's look at the tags for unanswered questions**","cf9ac483":"**So, we have 16269 tags, but for questions used 7091 tags only. Seems, a lot of tags are used for comments and answers, but we don't have such data for analysis.**","c7cfb783":"**As we can see, the largest number of unanswered questions were in 2018**","49ef4580":"# Students <a class=\"anchor\" id=\"students\"><\/a>","e9c8ed20":"**Let's check that all questions were sent by email**","28293dc9":"**It's very easy solution and you can play with tags and cluster size. Looks not bad, though it doesn't give 100% accuracy. \nNote: A lot of questions that don't make sense, but completely consist of tags.**","9eed33a9":"**Let's look how many active and not active professionals by headline**","854f4ce9":"**Let's see most used tags**","bd0c5f53":"**Interesting observation - all those who have indicated the school are active participants**","32c0d8c6":"**How many groups in each type**","7433e690":"# Professionals <a class=\"anchor\" id=\"professionals\"><\/a>","805468f2":"**As we can see, most of the unanswered questions have a medical subject**","bd34ad3c":"**Let's see how many professionals have answers**","40cc8237":"**Now we need to combine the clusters we've got with the professionals**","8783931e":"**We need data, labels and number of clusters**","0b67c12a":"#### [1. Data preparation](#data_preparation)\n#### [2. Professionals](#professionals)\n#### [3. Students](#students)\n#### [4. Answers](#answers)\n#### [5. Questions](#questions)\n#### [6. Tags](#tags)\n#### [7. Questions + Answers + Tags Analysis](#q_a_t)\n#### [8. Groups](#groups)\n#### [9. Schools](#schools)\n#### [10. Emails](#emails)\n#### [11. Matches](#matches)\n### [12. Recommender](#recommender)","42ae7df1":"**Let's look to most active professionals**","0ee0290c":"**We need more details.**","09b54388":"# Reocommender <a class=\"anchor\" id=\"recommender\"><\/a>","c2e09432":"**Let's take a look at the top five email recipients**","1668b83a":"**Looks like not all the questions were sent out. We need to do a deeper investigation**","570d215d":"**Let's look at the number of e-mails sent by year and month**","393d294f":"**Let's see how many professionals and students in the groups**","7fe4bfe3":"**Let's look at the number of questions by months and years**","ff2af2f4":"**And how many answers do they have**","9bf05beb":"**In terms of words**","9b99e0be":"**Let's look how many e-mails sent by frequency level**","21ccb9de":"**Let's merge questions, answers and tags**","099297bf":"**Let's see how many answers has each school(top 20)**","5dc5e99a":"**Lets check the duplicates of body and title**","1e5417ee":"**Let these be the new questions we've added to our data.**","d827c6b2":"**Unanswered questions seem to relate to areas where you do not have professionals - medicine, law, art, etc. Or just we have not full data**","966501df":"**So, you just can send emails for these proffesionals**","014ef1f5":"**As we can see, most unanswered questions have medical or biological tags**","8e2f8685":"**So, our hero 'c17fb778ae734737b08f607e75a87460' is very impatient. The question was duplicated 10 times in the interval 2017-03-14 22:01:34 - 2017-03-14 22:29:50 with a frequency of ~30 seconds and 10 times in the interval 2017-03-20 14:21:15 - 2017-03-20 14:29:12 with the same frequency. Interestingly, the title of the question changes, but not the body. I would suggest that in this case someone used (perhaps for the test) some kind of bot. Since we don't have many duplicates, it is not very important, but it may be useful for behavior analysis.**","4e2a5813":"**Let's look to word cloud for answers.**","12201f5a":"**We have tag 'college' in the used tags and tags '#college', '#-college', 'college-' and 'college#' in the unused tags. In my opinion, there is not enough formatting for tags. It may be better to define the format for the tags, it may be useful for searching by tags.**","1e4b2666":"**Let's see what types of groups are represented in the data**","d062097d":"# Schools <a class=\"anchor\" id=\"schools\"><\/a>","d00fe4f3":"# Emails <a class=\"anchor\" id=\"emails\"><\/a>","70d222f6":"**Let's see how many proffesionals we have for each question.**","1094f424":"**Let's look at the title and body for unanswered questions**","9f49a953":"**Question #2**","3c670f74":"**Combine proffessionals with answers for analysis**","92c8117a":"**4283 professionals and 1355 students**","8ebf43ad":"**Let's look at the distribution of the joining date by year and month**","94032c42":"**Let's see how many members per school id**","23371674":"**Seems to look good. But we'll check later to see if we have any unanswered questions**","245fd195":"**How many groups has each member**","95cb4c92":"**Question #1**","3f9e0861":"**And by year**","1e169504":"**What is emails_frequency_level?**","918bfb54":"**I also propose to exclude from the analysis some tags that do not define the subject matter of the question. You can increase or decrease this list**","e1ee6d23":"**Let's look tags.**","b858a868":"**I'll use clustering. First we need to prepare the data. To identify the most suitable professionals, we need the body of the question, the tags and the professionals themselves. \nLet's prepare the data. **","f824d440":"**Let's look at the result**","b0b476b0":"# Groups <a class=\"anchor\" id=\"groups\"><\/a>","1fd373f8":"# Data preparation <a class=\"anchor\" id=\"data_preparation\"><\/a>","b932f03a":"**Let's look at the distribution of the joining date by year and month**","b3b26b91":"**Let's take a look at the industry, location and headlines of professionals. As we can see, this is a free format and we can have the same elements, but with different names - in the lower and upper cases.**","dbe30ed1":"**It's strange, seems we have the same used and unused tags. Need more details. Lets check tag 'college'.**","bc8bc912":"**And we will take the 200 most used tags. I tried to increase and decrease this value - 200 tags give the best result.**","d648022f":"**It would be better to have some standard for these fields. This is not useful for students, but may be useful for future data analysis.**","35b46524":"# Table Of Content","f9c2b776":"**Let's see how many tags we have**","7ce30bac":"**Let's see how many professionals and students who have indicated the school has answers**"}}