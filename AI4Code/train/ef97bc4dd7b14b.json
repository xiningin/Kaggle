{"cell_type":{"864caccc":"code","7065a7ff":"code","174af573":"code","5b27f222":"code","81d0893b":"code","3fb1fbec":"code","828075a1":"markdown","a1a92db8":"markdown","fcfa6bc6":"markdown"},"source":{"864caccc":"import pandas as pd\nimport imagesize\nimport numpy as np","7065a7ff":"def mask2rle_old(img):\n    '''\n    Original implementation of mask2rle, this is memory hungry\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    Source: https:\/\/www.kaggle.com\/paulorzp\/rle-functions-run-lenght-encode-decode\n    '''\n    pixels= img.T.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)\n \ndef rle2mask(mask_rle, shape=(1600,256)):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (width,height) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n    Source: https:\/\/www.kaggle.com\/paulorzp\/rle-functions-run-lenght-encode-decode\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape).T\n\ndef mask2rle(img):\n    '''\n    Efficient implementation of mask2rle, from @paulorzp\n    --\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    Source: https:\/\/www.kaggle.com\/xhlulu\/efficient-mask2rle\n    '''\n    pixels = img.T.flatten()\n    pixels = np.pad(pixels, ((1, 1), ))\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)\n ","174af573":"train = pd.read_csv('\/kaggle\/input\/hubmap-kidney-segmentation\/train.csv')\n\nfile, enc = train.loc[3]\n\npath = f\"\/kaggle\/input\/hubmap-kidney-segmentation\/train\/{file}.tiff\"\n\nwidth, height = imagesize.get(path)\nprint(width, height)","5b27f222":"mask = rle2mask(enc, (width, height))\nmask.shape","81d0893b":"re_enc = mask2rle(mask)","3fb1fbec":"re_enc == enc","828075a1":"First let's get the RLE string from the training images:","a1a92db8":"Now, let's first convert it to mask:","fcfa6bc6":"The classical way (from this [awesome kernel](https:\/\/www.kaggle.com\/paulorzp\/run-length-encode-and-decode)) will use too much memory (might crash):\n```python\nre_enc = mask2rle_old(mask)\n```\n\nInstead, this is the efficient implementation:"}}