{"cell_type":{"243e3039":"code","c1e68c16":"code","b5ad3689":"code","f79b2e5e":"code","bbd30983":"code","98154c28":"code","626dca3c":"code","4fe7f7b5":"code","7f1d3083":"code","783e3db9":"code","04699c18":"code","914f94a9":"code","f2a842a2":"code","48acee69":"code","f4b6b0b0":"code","688bf21e":"code","1b91a2de":"markdown","5a54bdf0":"markdown","0552956d":"markdown","81ef4876":"markdown","a5fcbf09":"markdown","1b15c270":"markdown","9e690b5d":"markdown","70131fc6":"markdown","f5e5c3ba":"markdown","3ee2a095":"markdown","9982a3f4":"markdown","4df2984e":"markdown","48ae4605":"markdown"},"source":{"243e3039":"# Load data and preview data\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\ndata = pd.read_csv(\"..\/input\/census.csv\")\ndata.head()","c1e68c16":"def convert_income(income):\n    if (income == ' >50K'):\n        return 1\n    else:\n        return 0\n\n# convert categorical value to numerical value\ndata['c#income'] = data['c#income'].apply(convert_income)\n\n# preview info about the dependent variable\ndata['c#income'].unique()","b5ad3689":"# define variables to X axis\ndata_x = data.drop('c#income', axis=1) # all columns except column \"income\"\ndata_x.head()","f79b2e5e":"# define variables to Y axis\ndata_y = data['c#income'] \ntype(data_y)\n","bbd30983":"data_x.head()","98154c28":"import tensorflow as tf\n\ndef create_bucket_categorical(column_name):\n    return tf.feature_column.categorical_column_with_hash_bucket(key = column_name, hash_bucket_size=100)\n\nworkclass = create_bucket_categorical('workclass')\neducation = create_bucket_categorical('education')\nmarital_status = create_bucket_categorical('marital-status')\noccupation = create_bucket_categorical('occupation')\nrelationship = create_bucket_categorical('relationship')\nrace = create_bucket_categorical('race')\ncountry = create_bucket_categorical('inative-country')\nsex = tf.feature_column.categorical_column_with_vocabulary_list(key='sex', vocabulary_list=[' Male', ' Female'])","626dca3c":"def create_embedded(column, column_dimension):\n    return tf.feature_column.embedding_column(column, dimension=column_dimension)\n\nworkclass_embedded = tf.feature_column.embedding_column(workclass, len(data['education'].unique()))\neducation_embedded = create_embedded(education, len(data['education'].unique()))\nmarital_status_embedded = create_embedded(marital_status, len(data['marital-status'].unique()))\noccupation_embedded = create_embedded(occupation, len(data['occupation'].unique()))\nrelationship_embedded = create_embedded(relationship, len(data['relationship'].unique()))\nrace_embedded = create_embedded(race, len(data['race'].unique()))\ncountry_embedded = create_embedded(country, len(data['inative-country'].unique()))\nsex_embedded = create_embedded(sex, len(data['sex'].unique()))","4fe7f7b5":"def create_numerical(column_name):\n    return tf.feature_column.numeric_column(key=column_name)\n\nage = create_numerical('age')\nfinal_weight = create_numerical('final-weight')\neducation_num = create_numerical('education-num')\ncapital_gain = create_numerical('capital-gain')\ncapital_loos = create_numerical('capital-loos')\nhour = create_numerical('hour-per-week')","7f1d3083":"columns = [age, workclass_embedded, final_weight, education_embedded, education_num, marital_status_embedded, \n           occupation_embedded, relationship_embedded, race_embedded, sex_embedded, capital_gain, capital_loos, hour, country_embedded]","783e3db9":"from sklearn.model_selection import train_test_split\ndata_x_train, data_x_test, data_y_train, data_y_test = train_test_split(data_x, data_y, test_size = 0.3) # 70% to train and 30% to test\n\nprint('Items to train: ' + str(data_x_train.shape))\nprint('Items to test: ' + str(data_x_test.shape))\n","04699c18":"print(data_x_train.shape)\nprint(type(data_y_train))\n\n\ndata_x.head()","914f94a9":"train_function = tf.estimator.inputs.pandas_input_fn(x = data_x_train, y = data_y_train, batch_size=32, num_epochs=None, shuffle=True)","f2a842a2":"classifier = tf.estimator.DNNClassifier(hidden_units=[8,8], feature_columns=columns, n_classes=2)\nclassifier.train(input_fn=train_function, steps=10000)\n\n# after that, our classifier are trained","48acee69":"predict_function = tf.estimator.inputs.pandas_input_fn(x = data_x_test, batch_size = 32, num_epochs=1, shuffle = False)","f4b6b0b0":"predictions = classifier.predict(input_fn=predict_function)\npredictions_result = []\nfor p in predictions:\n    predictions_result.append(p['class_ids'])\n\n    # using our trained classifier, we predict the class for unknown data (data_x_test)","688bf21e":"from sklearn.metrics import accuracy_score\nscore = accuracy_score(data_y_test, predictions_result)\nscore\n\n# using our predictions, we evaluate how good is our classifier\n# we got a 76% score","1b91a2de":"# Processing with TensorFlow Estimators\n\nHere we will use Estimators from TensorFlow.\n\nTo predict, we will create functions to train, evaluate and predict.\n\n![image.png](https:\/\/cdn-images-1.medium.com\/max\/800\/1*Mn6sIkeGOfRw6myY3EA22g.png)\n*Source:  https:\/\/medium.com\/learning-machine-learning\/introduction-to-tensorflow-estimators-part-1-39f9eb666bc7* \n\n### The training function","5a54bdf0":"### Transforming Columns\n\nBefore to process the data, we will to convert some columns to TensorFlow Features.","0552956d":"### Predicting values over test data items","81ef4876":"### Numerical Columns","a5fcbf09":"# Pre-processing\n\nFor the preprocessing step we will use sklearn.\n\n### Load and Preview Data","1b15c270":"### Evaluate the accuracy","9e690b5d":"### Training the DNNClassifier Model","70131fc6":"### Divide data into train and test data","f5e5c3ba":"### Dependent (Y) and Independent  (X) Variables","3ee2a095":"### Categorical Embedding Columns\n\nTo use the categorical columns into DNNClassifier we need to Embedding them.\n\n![Embedding Categorical Columns](https:\/\/i.imgur.com\/tcc6nP4.png)","9982a3f4":"**BASIC Dense Neural Network with TensorFlow Estimators for Binary Classification**\n\nA simple kernel to review some basic concepts and implementations for Binary Classification using DNNClassifier and Estimators from TensorFlow  library.\n\nThe GOAL is to classify people into two groups (binary classification) considering their INCOME (dependent variable).","4df2984e":"### The Predict Function","48ae4605":"### Categorical Columns\n- (workclass, education, marital-status, occupation, relationship, race, sex and native-country)"}}