{"cell_type":{"f0031c2d":"code","b64416d1":"code","48709c77":"code","5217521e":"code","5aabb389":"code","b4f7615f":"code","2d5b6977":"code","bdfa6194":"code","25b7182d":"code","1561a01a":"code","54bacb77":"code","1f93d272":"code","662253ed":"code","d9b4d029":"code","b05651a0":"code","c1271e86":"code","c4833fce":"code","362e034b":"code","e31fa932":"markdown","6a2d8a08":"markdown","ac812384":"markdown","23b728dc":"markdown","95a0ca7d":"markdown","07ad9c5f":"markdown","e93eb8e6":"markdown","dae05900":"markdown","e10da38e":"markdown","95e78f48":"markdown","4ffd77c0":"markdown","0f3b66a9":"markdown","5baa4a16":"markdown","19fe15e4":"markdown","3d3cdd01":"markdown","ff1e233b":"markdown"},"source":{"f0031c2d":"#Example:  Define a function with the name f to show how a function works. \n\ndef f():\n    s=\"-----Inside the f()\"\n    print(s)\n    \nprint(\"Before the function f()\")\nf()\nprint(\"After the function f()\")","b64416d1":"def JHHS_am_greeting():\n    print(\"Good Morning Handley Judges!\")\n    print(\"Let's start our school day by respecting ourselves, others, and our school.\")\n    print(\"So please remove hats\/hoods, personal listening devices, and placing your cell phone off and out of sight.\")\n    \nJHHS_am_greeting()","48709c77":"#Assignment 1","5217521e":"#Example:  Function definitions\n\n#Define the function print_menu\ndef print_menu():\n    print(\"taco:     $1.50\")\n    print(\"nachos:   $5.00\")\n    print(\"burrito   $3.00\")\n    print(\"enchilada $2.00\")\n\n#the actual program\norder = \"yes\"\nprint_menu() #call function\nwhile order == \"yes\":\n    choice = input(\"Would you like to order or see the menu again?\")\n    if choice == \"menu\":\n        print_menu() #call function\n    else:\n        food = input(\"What would you like to order?\")\n    order = input(\"anything else?\")\n","5aabb389":"#Code to ask the user their name and greet them\n\nname = input(\"What is your name?\")\nprint(\"Hello, \", name)\nname = input(\"What is your name?\")\nprint(\"Goodbye, \", name)\nname = input(\"What is your name?\")\nprint(\"Hola, \", name)\n","b4f7615f":"#define function to ask the user their name and greet them\ndef greeting(type_of_greeting):\n    name = input(\"What is your name?\")\n    print(type_of_greeting, \", \" ,name)\n\n#call function\ngreeting(\"Hello\")\ngreeting(\"Goodbye\")\ngreeting(\"Hola\")","2d5b6977":"#Assignment 3\n","bdfa6194":"#Example:  Using parameters to pass in data for the function to use. \n\n#Define the function with no parameters\ndef my_function():\n    print(\"Hello from My Function!\")\n    \nmy_function()\n\n\n#Define the function with two parameters:  John Doe and a greeting to have a great year.\ndef my_function_with_parameters(username, greeting):\n    print(\"Hello\", username,\"from My Function!  I wish you \", greeting)\n    \nmy_function_with_parameters(\"John Doe\", \"a great year!\")","25b7182d":"#Example:  Define a function to accept 3 numbers and complete a series of addition problems. \n\ndef add_numbers(x, y, z):\n    a=x+y\n    b=x+z\n    c=y+z\n    print(a, b, c)\n    \nadd_numbers(1, 2, 3)","1561a01a":"#Assignment 4","54bacb77":"#Assignment 5","1f93d272":"#Assignment 6","662253ed":"#Functions exit immediately when they hit a return statement whether or not they are returning a value. \n#Example:\ndef loop_five():\n    for x in range (0,25):\n        print(x)\n        if x==5: \n            return     #stop function at x==5\n    print(\"This line will not execute. The return exited the function.\")","d9b4d029":"#Functions that return a value, return the value at the location in the program that the function was called. \n#Example: Create a function that squares a parameter. \ndef square(x):\n    y=x**2\n    return y    #Notice that there are no ()\n\nresult=square(3)\nprint(result)","b05651a0":"#Example:  Define a function to accept 3 numbers and complete a series of addition problems, then returns the results of the addition.\n\ndef add_numbers(x, y, z):\n    a=x+y\n    b=x+z\n    c=y+z\n    return a, b, c\n\nsums=add_numbers(1, 2, 3)\nprint(sums)\n\n#Recall from earlier example that print(a, b, c) gave the output 3  4  5. \n#Since the return statement had at least one comma, the output matches form as:  (3, 4, 5)","c1271e86":"#Assignment 7","c4833fce":"#Assignment 8","362e034b":"#Example to show use of a global variable and local variable\n\nx=12       #This is a global variable.  It can be accessed and used anywhere in the program.\n\ndef test_functions():\n    y=5    # This is a local variable. It can only be accessed and used inside the function. \n    print(x)\n    pring(y)\n    \ntest_function()\nprint(x)   #This is a global variable so it can be used here. \nprint(y)   #This is a local variable so it cannot be used outside the function - will throw an error","e31fa932":"**Assignment 8:**  Write a program that uses a user defined function that accepts name and grade, and identifies the student as on track to graduate with the Class of 2022, Class of 2023, Class of 2024, or Class of 2025. Call the function four (4) times with different parameters each time. ","6a2d8a08":"To define a function, use the keyword *def*. \n\n```\ndef name_of_function():\n    everything the function does\n```\n\nTo use a function (this is referred to as *calling a function*), identify it by name with () following: \n\n```\nname_of_function()\n```","ac812384":"**Assignment 4:**   Create a function called ```multiply``` that takes *two* numbers as parameters and prints their product. In the main part of the program (the part that is not inside the function), call your function to test it out. ","23b728dc":"Functions can receive data to use (called *parameters* or *arguments*) and return data values to the program using a *return statement*. \n\nTwo useful features of functions:\n* parameters\n* return statements\n\nA *parameter* is something \"passed in\" to the function, allowing the function to act just a tiny bit differently.\n```\n#definition\ndef name_of_function(parameter):\n    what you want to do\n\n#calling function\nname_of_function(parameter)\n```","95a0ca7d":"## November 17: FUNCTIONS","07ad9c5f":"A *return statement* can be used to *exit a function* and\/or to *return a value*.","e93eb8e6":"You can have multiple parameters\n```\ndef name_of_function(param1, param2):\n    do stuff with 2 variables\n\nname_of_function(param1, param2)\n```","dae05900":"**Assignment 7:**  You want to paint one wall in your bedroom with whiteboard paint. To know how much paint to buy, you need to know the area of the wall. Write a function that accepts the length and the width of the wall, calculates the area, and returns the area to the program in a statement.  (Area = length x width)\n\nExample output: \nThe area of the wall is 300 sq ft. \n\nCHALLENGE:  Also calculate and display the amount of paint needed, given that 1 gallon of paint will cover 350 square feet. ","e10da38e":"**Assignment 3:**  Create a function called ```add_one``` that takes a number as a parameter and prints that number plus 1","95e78f48":"**Assignment 2** Brainstorm and identify at least 2 cases of past projects where functions may have been useful. \n","4ffd77c0":"## *Namespaces*\nA namespace is the area of a program where a variable can be accessed. \n\n*Global Variables*  defined outside of a function and can be accessed anywhere in the program\n\n*Local Variables:*  defined inside a function and can only be accessed inside of that function. ","0f3b66a9":"*Definition: Functions*\n\nA *function* is a block of code that performs a certain task and once defined, can be reused. Organizing your code into functions is called *modularizing*. It is good to use functions:\n* when you repeat the same set of instructions multiple times\n* to break a program into smaller parts","5baa4a16":"**Assignment 1** \n\nWrite a function called greeting that asks for the user's name and says hello to the user.","19fe15e4":"**Assignment 6:**  Write a function that takes two arguments, a string and an integer, adn prints the string multiple times. The integer specifies how many times the string is printed. In the main part of your program (the part that isn't inside a function), call yourfunction to test it out. \n\nExample:  print_multiple_times(\"hi\",3) should provide the following output: \n\n```\nhi\nhi\nhi\n```\n\nHint:  A *for* loop can be useful for this!","3d3cdd01":"Objectives:\n\n* modularize code using functions\n* pass parameters into functions\n* return values from functions","ff1e233b":"**Assignment 5:**   Create a function called ```profile_info``` that takes a *user name* and *number of followers* as parameters. (You can use both parameters as \"strings\".)\n\nYour output should look like: \n```\nUsername: sammyshark\nFollowers: 1121\n```"}}