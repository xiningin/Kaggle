{"cell_type":{"c3d8b76e":"code","9b06daef":"code","485a1089":"code","cf609fe5":"code","f196fdfa":"code","d0519161":"code","1d5e7a07":"code","761284e2":"code","02d7f3cb":"code","e948d4a8":"code","106407f4":"code","43d8b184":"code","befafbbc":"code","365fd73b":"code","c2df6dd9":"code","8ff5e77e":"code","cf6c3070":"code","3f711346":"code","d029e2ff":"code","34a85689":"code","7f1c6718":"code","4927e81f":"code","522a510b":"code","bb479d77":"code","d3b9dd5c":"code","084e4bcf":"code","98efbf1e":"code","f8110afe":"code","9541018d":"code","281f79ce":"code","f6bd01d0":"code","56de461b":"code","f2a70d17":"code","8ca42725":"code","ab0b246c":"code","af64601e":"code","9d1931cf":"code","be3c4e59":"code","2e01964f":"code","9cf11338":"code","d6455409":"code","5cce4460":"code","bb809f73":"code","9a23f72a":"code","d6f2de75":"code","516a07bf":"code","39079050":"code","b0425d8c":"code","40578308":"code","0d426ec1":"code","1fe27109":"code","bfcf3b81":"code","a7671fa2":"code","d45787e8":"code","4cced623":"code","4b0612dd":"code","f39f6e51":"code","296ecf6e":"code","335b76c2":"code","b6881c82":"code","9e0e88eb":"code","5a9e7744":"code","b597fe80":"code","141affd1":"code","2ac4bd26":"code","a5c78d18":"code","823d6e5e":"code","6cdb85a0":"code","4dd7f839":"code","fcbc0676":"code","41676fea":"code","1d391139":"code","c8ecb629":"code","65b08dfb":"code","2eee4b92":"code","33625441":"code","b4bd0ec0":"code","fbbdfb5a":"code","d5535462":"code","880b40db":"code","2e222a96":"code","00fc6507":"code","f0355214":"code","df3c6c44":"code","8216b9ae":"code","19d83bb2":"code","3489a57e":"code","58869414":"code","ca691625":"code","31ce2272":"code","1b01edbd":"code","e45ff84a":"code","f3932c7f":"code","4ba2815c":"code","77af01c5":"code","f689b148":"code","3c98ac4c":"code","71ad8c49":"code","c1021011":"code","6cb26e43":"code","33e69ed6":"code","cfd65bb6":"code","00b87a0b":"code","54b731d8":"code","793e88ff":"code","677ce480":"code","95c14907":"code","e51cd910":"code","3259c9c2":"code","02c7a656":"code","234bcb12":"code","4679d1fb":"code","b6457516":"code","20b7d071":"code","00ac0c6f":"code","02914133":"code","e1dab2db":"code","cfbddbba":"code","d68b4e7a":"code","8d263f6d":"code","4983d678":"code","0301a4cd":"code","3f9da506":"code","396f317c":"code","30122b39":"code","b478e828":"code","2aca8dac":"code","6351b158":"code","f7da5040":"code","334ce4c6":"code","3ef881e4":"code","f2269325":"code","eeedfabe":"code","2f485a25":"code","5cabbbaf":"code","5af47154":"code","8714be1a":"code","047ed535":"code","f7a1f115":"code","ae0c2b23":"code","49cc00ec":"code","8fdb6721":"code","f17543ed":"code","3a9a2678":"code","abebc75f":"code","53594ea2":"code","a9511bc8":"code","15ba54f5":"code","8739878a":"code","5e269192":"code","dc5151bf":"code","6afd26c9":"code","37a94993":"code","a2c287fd":"markdown","f1f0ab9f":"markdown","3a7c7577":"markdown","5ace2d80":"markdown","862a8825":"markdown","188a1113":"markdown","4e39ac98":"markdown","ec644e92":"markdown","baf05cdd":"markdown","3d681f1f":"markdown","6b9b87c3":"markdown","4218c406":"markdown","da32444e":"markdown","2759438d":"markdown","a176c803":"markdown","5f86dcd0":"markdown","5dfd2a79":"markdown","80e5f811":"markdown","c7a34a09":"markdown","fb2585ad":"markdown","3783c380":"markdown","35def5de":"markdown","d2775828":"markdown","907cab9a":"markdown","d474194d":"markdown","2acf6d2b":"markdown","377723ff":"markdown","545629e9":"markdown","a27dabe9":"markdown","09211444":"markdown","6ecab652":"markdown","2618007f":"markdown","1109557c":"markdown","e1c92c3f":"markdown","ccb710bd":"markdown","8a1808fb":"markdown","c4d3f293":"markdown","a26d2eb7":"markdown","cff25720":"markdown","1c05f092":"markdown","87d06e55":"markdown","40555ec4":"markdown","6d9f0e14":"markdown","0bdce8d9":"markdown","5d2a7766":"markdown","fce7ec56":"markdown","42fab504":"markdown","47bbe709":"markdown","86461420":"markdown","5ea1ea32":"markdown","e3fea1c8":"markdown","9b7e04f1":"markdown","da328d0f":"markdown","995d8532":"markdown","f4dbcc49":"markdown","44b405cf":"markdown","0c44757d":"markdown","fe403480":"markdown","4188fe94":"markdown","6ccf7ac9":"markdown","30d948ac":"markdown","2cad808f":"markdown","46f4b27f":"markdown","3bd565d4":"markdown","cee873e5":"markdown","f5905b30":"markdown","f8d28484":"markdown","6884ffa7":"markdown","608a3a10":"markdown","a4922db7":"markdown","20a0871e":"markdown","9b8d2425":"markdown","79da53ae":"markdown","5ed6ec9e":"markdown","1dc64b9c":"markdown","4284bdd4":"markdown","5bdd2203":"markdown","189f4b69":"markdown","4da0a0a5":"markdown","844b11e5":"markdown","46264ff4":"markdown","f46165cf":"markdown","a9a7e88b":"markdown","13ad90e9":"markdown","1398c470":"markdown","1fb1031c":"markdown","35fc0b8e":"markdown","e13cb53f":"markdown","d88f48a8":"markdown","f7a5df51":"markdown"},"source":{"c3d8b76e":"# --- CSS STYLE ---\nfrom IPython.core.display import HTML\ndef css_styling():\n    styles = open(\"..\/input\/competiongoal\/archive\/alerts.css\", \"r\").read()\n    return HTML(\"<style>\"+styles+\"<\/style>\")\ncss_styling()","9b06daef":"!pip install simdkalman","485a1089":"%matplotlib inline\nfrom matplotlib import pyplot as plt\nimport numpy as np # linear algebra\nfrom pathlib import Path\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy import sparse\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sns\nimport simdkalman\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tqdm.notebook import tqdm\nfrom warnings import simplefilter\n\nsimplefilter('ignore')\nplt.style.use('fivethirtyeight')\npd.set_option('max_columns', 100)\npd.set_option('max_rows', 100)","cf609fe5":"model_name = 'nn_v2'\n\ndata_dir = Path('..\/input\/google-smartphone-decimeter-challenge')\ntrain_file = data_dir \/ 'baseline_locations_train.csv'\ntest_file = data_dir \/ 'baseline_locations_test.csv'\nsample_file = data_dir \/ 'sample_submission.csv'\n\nbuild_dir = Path('.\/build')\nbuild_dir.mkdir(parents=True, exist_ok=True)\npredict_val_file = build_dir \/ f'{model_name}.val.txt'\npredict_tst_file = build_dir \/ f'{model_name}.tst.txt'\nsubmission_file = 'submission.csv'\n\ncname_col = 'collectionName'\npname_col = 'phoneName'\nphone_col = 'phone'\nts_col = 'millisSinceGpsEpoch'\ndt_col = 'datetime'\nlat_col = 'latDeg'\nlon_col = 'lngDeg'\n\nlrate = .002 #.001\nbatch_size = 1024\nepochs = 100\nn_stop = 10\nn_fold = 5\nseed = 77","f196fdfa":"train = pd.read_csv(train_file)\ntest = pd.read_csv(test_file)","d0519161":"train.groupby('collectionName').apply(lambda x: x['phoneName'].unique())","1d5e7a07":"test.groupby('collectionName').apply(lambda x: x['phoneName'].unique())","761284e2":"train.phoneName.unique()","02d7f3cb":"f = open('..\/input\/google-smartphone-decimeter-challenge\/train\/2020-05-14-US-MTV-1\/Pixel4\/supplemental\/Pixel4_GnssLog.20o', 'r')\ndata = f.readlines()\nf.close()\ndata[:20]","e948d4a8":"f = open('..\/input\/google-smartphone-decimeter-challenge\/train\/2020-05-14-US-MTV-1\/Pixel4\/supplemental\/SPAN_Pixel4_10Hz.nmea', 'r')\ndata = f.readlines()\nf.close()\ndata[:10]","106407f4":"ground = pd.read_csv('..\/input\/google-smartphone-decimeter-challenge\/train\/2020-05-14-US-MTV-1\/Pixel4\/ground_truth.csv')\nground.head(5)","43d8b184":"f = open('..\/input\/google-smartphone-decimeter-challenge\/train\/2020-05-14-US-MTV-1\/Pixel4\/Pixel4_GnssLog.txt', 'r')\ndata = f.readlines()\nf.close()\ndata[:10]","befafbbc":"derived = pd.read_csv('..\/input\/google-smartphone-decimeter-challenge\/train\/2020-05-14-US-MTV-1\/Pixel4\/Pixel4_derived.csv')\nderived","365fd73b":"derived_unique = list(derived.millisSinceGpsEpoch.unique())\nlen(derived_unique)","c2df6dd9":"ground_unique = list(ground.millisSinceGpsEpoch.unique())\nlen(ground_unique)","8ff5e77e":"import json\njson_open = open('..\/input\/google-smartphone-decimeter-challenge\/metadata\/accumulated_delta_range_state_bit_map.json', 'r')\njson.load(json_open)","cf6c3070":"import json\njson_open = open('..\/input\/google-smartphone-decimeter-challenge\/metadata\/raw_state_bit_map.json', 'r')\njson.load(json_open)","3f711346":"pd.read_csv('..\/input\/google-smartphone-decimeter-challenge\/metadata\/constellation_type_mapping.csv').head(5)","d029e2ff":"# from https:\/\/www.kaggle.com\/sohier\/loading-gnss-logs\ndef gnss_log_to_dataframes(path):\n    print('Loading ' + path, flush=True)\n    gnss_section_names = {'Raw','UncalAccel', 'UncalGyro', 'UncalMag', 'Fix', 'Status', 'OrientationDeg'} #\u3053\u308c\u306f\u3069\u3053\u304b\u3089\u3067\u3066\u304d\u305f\u306e\u304b\uff1f\n    with open(path) as f_open:\n        datalines = f_open.readlines()\n\n    datas = {k: [] for k in gnss_section_names}\n    gnss_map = {k: [] for k in gnss_section_names}\n    for dataline in datalines:\n        is_header = dataline.startswith('#')\n        dataline = dataline.strip('#').strip().split(',')\n        # skip over notes, version numbers, etc\n        if is_header and dataline[0] in gnss_section_names:\n            gnss_map[dataline[0]] = dataline[1:]\n        elif not is_header:\n            datas[dataline[0]].append(dataline[1:])\n\n    results = dict()\n    for k, v in datas.items():\n        results[k] = pd.DataFrame(v, columns=gnss_map[k])\n    # pandas doesn't properly infer types from these lists by default\n    for k, df in results.items():\n        for col in df.columns:\n            if col == 'CodeType':\n                continue\n            results[k][col] = pd.to_numeric(results[k][col])\n\n    return results","34a85689":"gnss_section_names = {'Raw','UncalAccel', 'UncalGyro', 'UncalMag', 'Fix', 'Status', 'OrientationDeg'}\ndatas = {k: [] for k in gnss_section_names}\ngnss_map = {k: [] for k in gnss_section_names}\ndatas","7f1c6718":"results = dict()\nfor k, v in datas.items():\n     results[k] = pd.DataFrame(v, columns=gnss_map[k])\nresults","4927e81f":"# from https:\/\/www.kaggle.com\/dannellyz\/start-here-simple-folium-heatmap-for-geo-data\nimport folium\nfrom folium import plugins\n\n\ndef simple_folium(df:pd.DataFrame, lat_col:str, lon_col:str):\n    \"\"\"\n\n     ----------\n         \u30de\u30fc\u30ab\u30fc\u4ed8\u304d\u306e\u5358\u7d14\u306a Folium HeatMap \u3092\u8fd4\u3057\u307e\u3059\u3002\n     ----------\n     \u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\n     ----------\n         df :padnas \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3001\u5fc5\u9808\n             \u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u30c7\u30fc\u30bf\u3092\u542b\u3080 DataFrane\n         lat_col : str\u3001\u5fc5\u9808\n             \u7def\u5ea6\u3092\u6301\u3064\u5217\u306e\u540d\u524d\n         lon_col : str\u3001\u5fc5\u9808\n             \u7d4c\u5ea6\u3092\u6301\u3064\u5217\u306e\u540d\u524d \n    \"\"\"\n    #Preprocess\n    #Drop rows that do not have lat\/lon\n    df = df[df[lat_col].notnull() & df[lon_col].notnull()]\n\n    # Convert lat\/lon to (n, 2) nd-array format for heatmap\n    # Then send to list\n    df_locs = list(df[[lat_col, lon_col]].values)\n\n    ##folium.Map\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\n    fol_map = folium.Map([df[lat_col].median(), df[lon_col].median()])\n\n    # plot heatmap\n    heat_map = plugins.HeatMap(df_locs)\n    print(heat_map)\n    fol_map.add_child(heat_map)\n\n    # plot markers\n    markers = plugins.MarkerCluster(locations = df_locs)\n    fol_map.add_child(markers)\n\n    #Add Layer Control\n    folium.LayerControl().add_to(fol_map)\n\n    return fol_map","522a510b":"# from https:\/\/www.kaggle.com\/jpmiller\/baseline-from-host-data\n# simplified haversine distance\ndef calc_haversine(lat1, lon1, lat2, lon2):\n    \"\"\"2 \u70b9\u9593\u306e\u5927\u5186\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u307e\u3059\n     \u5730\u7403\u4e0a\u3067\u3002 \u5165\u529b\u306f\u914d\u5217\u306b\u4f3c\u3066\u304a\u308a\u300110 \u9032\u5ea6\u3067\u6307\u5b9a\u3055\u308c\u307e\u3059\u3002\n    \"\"\"\n    lat1, lon1, lat2, lon2 = map(np.radians, [lat1, lon1, lat2, lon2])\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = np.sin(dlat\/2.0)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon\/2.0)**2\n\n    c = 2 * np.arcsin(a**0.5)\n    dist = 6_367_000 * c\n    return dist","bb479d77":"# from https:\/\/www.kaggle.com\/emaerthin\/demonstration-of-the-kalman-filter\u3000\u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u3044\u308b\u3002\nT = 1.0 #\u3053\u3053\u3089\u3078\u3093\u306e\u6570\u5024\u306f\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3088\u3046\u304c\u306a\u3044\u3067\u3059\u306d\u3002\nstate_transition = np.array([[1, 0, T, 0, 0.5 * T ** 2, 0], [0, 1, 0, T, 0, 0.5 * T ** 2], [0, 0, 1, 0, T, 0],\n                             [0, 0, 0, 1, 0, T], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1]])\nprocess_noise = np.diag([1e-5, 1e-5, 5e-6, 5e-6, 1e-6, 1e-6]) + np.ones((6, 6)) * 1e-9\nobservation_model = np.array([[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0]])\nobservation_noise = np.diag([5e-5, 5e-5]) + np.ones((2, 2)) * 1e-9\n\nkf = simdkalman.KalmanFilter(\n        state_transition = state_transition,\n        process_noise = process_noise,\n        observation_model = observation_model,\n        observation_noise = observation_noise)\n\ndef apply_kf_smoothing(df, kf_=kf):\n    unique_paths = df[phone_col].unique()\n    for phone in tqdm(unique_paths):\n        data = df.loc[df[phone_col] == phone][[lat_col, lon_col]].values\n        data = data.reshape(1, len(data), 2)\n        smoothed = kf_.smooth(data)\n        df.loc[df[phone_col] == phone, lat_col] = smoothed.states.mean[0, :, 0]\n        df.loc[df[phone_col] == phone, lon_col] = smoothed.states.mean[0, :, 1]\n    return df","d3b9dd5c":"trn = pd.read_csv(train_file)\nprint(trn.shape)\ntrn.head()","084e4bcf":"tst = pd.read_csv(test_file)\nprint(tst.shape)\ntst.head()","98efbf1e":"sub = pd.read_csv(sample_file)\nprint(sub.shape)\nsub.head()","f8110afe":"cname = trn[cname_col][0]\ncname","9541018d":"pname = trn[pname_col][0]\npname","281f79ce":"path =str(data_dir \/ 'train' \/ cname \/ pname \/ f'{pname}_GnssLog.txt')\nwith open(path) as f_open:\n        datalines = f_open.readlines()","f6bd01d0":"    for dataline in datalines:\n        is_header = dataline.startswith('#')\n        dataline = dataline.strip('#').strip().split(',')\n        break","56de461b":"datalines[:10]","f2a70d17":"for col in [cname_col, pname_col]:\n    print(f'# of unique {col:>14s} in training: {trn[col].nunique():4d}')\n    print(f'# of unique {col:>14s}     in test: {tst[col].nunique():4d}')","8ca42725":"trn[pname_col].value_counts()","ab0b246c":"tst[pname_col].value_counts()","af64601e":"print(f'# of unique phone in training: {trn[phone_col].nunique():4d}')\nprint(f'    # of unique phone in test: {tst[phone_col].nunique():4d}')","9d1931cf":"trn[phone_col].value_counts()[:10]","be3c4e59":"tst[phone_col].value_counts()[:10]","2e01964f":"overlapping_phones = [x for x in tst[phone_col] if x in trn[phone_col]]\nprint(len(overlapping_phones))","9cf11338":"tst[ts_col].min(), tst[ts_col].max()","d6455409":"dt_offset = pd.to_datetime('1980-01-06 00:00:00')\nprint(dt_offset)\ndt_offset_in_ms = int(dt_offset.value \/ 1e6)","5cce4460":"trn[dt_col] = pd.to_datetime(trn[ts_col] + dt_offset_in_ms, unit='ms')\ntst[dt_col] = pd.to_datetime(tst[ts_col] + dt_offset_in_ms, unit='ms')\nprint(f'Training data range: {trn[dt_col].min()} - {trn[dt_col].max()}')\nprint(f'    Test data range: {tst[dt_col].min()} - {tst[dt_col].max()}')","bb809f73":"latlon_trn = trn[[lat_col, lon_col]].round(3)\nlatlon_trn['counts'] = 1\nlatlon_trn = latlon_trn.groupby([lat_col, lon_col]).sum().reset_index()\nlatlon_trn.head()","9a23f72a":"    #def simple_folium(df:pd.DataFrame, lat_col:str, lon_col:str):\n    simple_folium(latlon_trn, lat_col, lon_col)\n    df = pd.DataFrame(latlon_trn)\n    \n    \"\"\"\n\n     ----------\n         \u30de\u30fc\u30ab\u30fc\u4ed8\u304d\u306e\u5358\u7d14\u306a Folium HeatMap \u3092\u8fd4\u3057\u307e\u3059\u3002\n     ----------\n     \u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\n     ----------\n         df :padnas \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3001\u5fc5\u9808\n             \u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u30c7\u30fc\u30bf\u3092\u542b\u3080 DataFrane\n         lat_col : str\u3001\u5fc5\u9808\n             \u7def\u5ea6\u3092\u6301\u3064\u5217\u306e\u540d\u524d\n         lon_col : str\u3001\u5fc5\u9808\n             \u7d4c\u5ea6\u3092\u6301\u3064\u5217\u306e\u540d\u524d \n    \"\"\"\n    #Preprocess\n    #Drop rows that do not have lat\/lon\n    df = df[df[lat_col].notnull() & df[lon_col].notnull()]\n    df\n","d6f2de75":"\n    # Convert lat\/lon to (n, 2) nd-array format for heatmap\n    # Then send to list\n    df_locs = list(df[[lat_col, lon_col]].values)\n    ","516a07bf":"df[lat_col].median() #\u4e2d\u592e\u5024","39079050":"    ##folium.Map\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\n    fol_map = folium.Map([df[lat_col].median(), df[lon_col].median()])\n","b0425d8c":"    # plot heatmap\n    heat_map = plugins.HeatMap(df_locs)\n    print(heat_map)","40578308":"    fol_map.add_child(heat_map)\n ","0d426ec1":"\n    # plot markers\n    markers = plugins.MarkerCluster(locations = df_locs)\n    ","1fe27109":"len(df_locs)","bfcf3b81":"df_locs[:10]","a7671fa2":"fol_map.add_child(markers)","d45787e8":"    #Add Layer Control\n    folium.LayerControl().add_to(fol_map)","4cced623":"simple_folium(latlon_trn, lat_col, lon_col)","4b0612dd":"latlon_trn = trn[[lat_col, lon_col]].round(3)\nlatlon_trn['counts'] = 1\nlatlon_trn = latlon_trn.groupby([lat_col, lon_col]).sum().reset_index()\nlatlon_trn","f39f6e51":"latlon_tst = tst[[lat_col, lon_col]].round(3)\n","296ecf6e":"latlon_tst['counts'] = 1\nlatlon_tst = latlon_tst.groupby([lat_col, lon_col]).sum().reset_index()\nlatlon_tst","335b76c2":"simple_folium(latlon_tst, lat_col, lon_col)","b6881c82":"cname = trn[cname_col][0]\ncname","9e0e88eb":"pname = trn[pname_col][0]\npname","5a9e7744":"dfs = gnss = gnss_log_to_dataframes(str(data_dir \/ 'train' \/ cname \/ pname \/ f'{pname}_GnssLog.txt'))\nprint(dfs.keys())","b597fe80":"df_raw = dfs['Raw']\nprint(df_raw.shape)\ndf_raw.head()","141affd1":"df_raw.info()","2ac4bd26":"df_raw['ArrivalTime'] = df_raw['TimeNanos'] - df_raw['FullBiasNanos'] - df_raw['BiasNanos']\nprint(df_raw['ArrivalTime'].describe())\ndf_raw['ArrivalTime'].hist(bins=20)","a5c78d18":"print(df_raw['BiasUncertaintyNanos'].describe())\ndf_raw['BiasUncertaintyNanos'].hist(bins=20)","823d6e5e":"print(df_raw['ReceivedSvTimeUncertaintyNanos'].describe())\ndf_raw['ReceivedSvTimeUncertaintyNanos'].hist(bins=20)","6cdb85a0":"print(df_raw.AccumulatedDeltaRangeUncertaintyMeters.describe())\ndf_raw.AccumulatedDeltaRangeUncertaintyMeters.hist(bins=20)","4dd7f839":"print(df_raw.Cn0DbHz.describe())\ndf_raw.Cn0DbHz.hist(bins=20)","fcbc0676":"df_raw = df_raw.loc[\n    ~pd.isnull(df_raw.FullBiasNanos) &\n    (df_raw.BiasUncertaintyNanos < 100) &\n    (df_raw.ArrivalTime > 0) &\n    (df_raw.ConstellationType != 0) &\n    ~pd.isnull(df_raw.TimeNanos) &\n    (df_raw.State != 3) & (df_raw.State != 14) & (df_raw.State != 7) & (df_raw.State != 15) &\n    (df_raw.ReceivedSvTimeUncertaintyNanos < 100) &\n    (df_raw.AccumulatedDeltaRangeUncertaintyMeters < 0.3) &\n    (df_raw.Cn0DbHz > 20)\n]\nprint(df_raw.shape)","41676fea":"df_raw","1d391139":"derived = pd.read_csv(data_dir \/ 'train' \/ cname \/ pname \/ f'{pname}_derived.csv')\nprint(derived.shape)\nderived.head()","c8ecb629":"derived.info()","65b08dfb":"derived = derived.loc[derived.constellationType != 0]\nprint(derived.shape)","2eee4b92":"derived","33625441":"derived['correctedPrM'] = (derived['rawPrM'] + derived['satClkBiasM'] - derived['isrbM'] - \n                           derived['ionoDelayM'] - derived['tropoDelayM'])\nsns.pairplot(data=derived, vars=['correctedPrM', 'rawPrM'], size=3)","b4bd0ec0":"derived[dt_col] = pd.to_datetime(derived[ts_col] + dt_offset_in_ms, unit='ms')\nprint(f'Data range for {cname}\/{pname}: {derived[dt_col].min()} - {derived[dt_col].max()}')","fbbdfb5a":"derived[['constellationType', 'svid', 'signalType']].value_counts()","d5535462":"derived[[ts_col, 'constellationType', 'correctedPrM']].groupby([ts_col, 'constellationType']).agg(['mean', 'std', 'count']).describe()","880b40db":"derived.loc[derived.constellationType == 1][[ts_col, 'svid', 'correctedPrM']].groupby([ts_col, 'svid']).agg(['mean', 'std', 'count']).describe()","2e222a96":"pd.read_csv('..\/input\/google-smartphone-decimeter-challenge\/metadata\/constellation_type_mapping.csv')","00fc6507":"derived.loc[derived.signalType == 'GPS_L1'][[ts_col, 'svid', 'correctedPrM']].groupby([ts_col, 'svid']).agg(['mean', 'std', 'count'])","f0355214":"derived.loc[derived.signalType == 'GPS_L1'][[ts_col, 'svid', 'correctedPrM']].groupby([ts_col, 'svid']).agg(['mean', 'std', 'count']).describe()","df3c6c44":"derived.loc[derived.signalType == 'GPS_L1'][[ts_col, 'svid']].drop_duplicates().groupby([ts_col]).agg(['mean', 'std', 'count']).describe()","8216b9ae":"gps_l1 = derived.loc[derived.signalType == 'GPS_L1'][[ts_col, 'svid', 'correctedPrM']].drop_duplicates([ts_col, 'svid'])\nprint(gps_l1.shape)\ngps_l1.head()","19d83bb2":"label = pd.read_csv(data_dir \/ 'train' \/ cname \/ pname \/ 'ground_truth.csv')\nprint(label.shape)\nlabel.head()","3489a57e":"label[dt_col] = pd.to_datetime(label[ts_col] + dt_offset_in_ms, unit='ms')\nprint(f'Labels range for {cname}\/{pname}: {label[dt_col].min()} - {label[dt_col].max()}')","58869414":"cname = trn[cname_col][10]\npname = trn[pname_col][10]\nderived2 = pd.read_csv(data_dir \/ 'train' \/ cname \/ pname \/ f'{pname}_derived.csv')\nlabel2 = pd.read_csv(data_dir \/ 'train' \/ cname \/ pname \/ 'ground_truth.csv')\nprint(f\"Derived data starts at: {pd.to_datetime(derived2[ts_col].min() + dt_offset_in_ms, unit='ms')}\")\nprint(f\"  Label data starts at: {pd.to_datetime(label2[ts_col].min() + dt_offset_in_ms, unit='ms')}\")","ca691625":"derived2","31ce2272":"label2","1b01edbd":"trn.head(5)","e45ff84a":"trn.sort_values([phone_col, ts_col], inplace=True)","f3932c7f":"trn[['prev_lat']] = trn[lat_col].shift().where(trn[phone_col].eq(trn[phone_col].shift()))\ntrn[['prev_lat']] ","4ba2815c":"trn[['prev_lon']] = trn[lon_col].shift().where(trn[phone_col].eq(trn[phone_col].shift()))\ntrn[['prev_lon']]","77af01c5":"tst.head(5)","f689b148":"tst.sort_values([phone_col, ts_col], inplace=True)","3c98ac4c":"tst.head(5)","71ad8c49":"tst[['prev_lat']] = tst[lat_col].shift().where(tst[phone_col].eq(tst[phone_col].shift()))\ntst[['prev_lat']] ","c1021011":"tst[['prev_lon']] = tst[lon_col].shift().where(tst[phone_col].eq(tst[phone_col].shift()))\ntrn.head()","6cb26e43":"# from https:\/\/www.kaggle.com\/jpmiller\/baseline-from-host-data\nlabel_files = (data_dir \/ 'train').rglob('ground_truth.csv')\nlabel_files","33e69ed6":"cols = [phone_col, ts_col, lat_col, lon_col]\n\ndf_list = []\nfor t in tqdm(label_files, total=73):\n    label = pd.read_csv(t, usecols=[cname_col, pname_col, ts_col, lat_col, lon_col])\n    df_list.append(label)\n   ","cfd65bb6":"df_label = pd.concat(df_list, ignore_index=True)\ndf_label","00b87a0b":"pd.DataFrame(df_list)[:5]","54b731d8":"df_label[phone_col] = df_label[cname_col] + '_' + df_label[pname_col]\ndf_label","793e88ff":"trn","677ce480":"phone_col","95c14907":"cols","e51cd910":"ts_col","3259c9c2":"df = df_label.merge(trn[cols + ['prev_lat', 'prev_lon']], how='inner', on=[phone_col, ts_col], \n                    suffixes=('_gt', '')).drop([cname_col, pname_col], axis=1) #\u5217\u540d\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u5834\u5408\u306e\u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u6307\u5b9a: \u5f15\u6570suffixes\ndf","02c7a656":"df['sSinceGpsEpoch'] = df[ts_col] \/\/ 1000 ## \u5207\u308a\u6368\u3066\u9664\u7b97\nprint(df.shape)\ndf.head()","234bcb12":"df_tst = sub[[phone_col, ts_col]].merge(tst[[phone_col, ts_col, lat_col, lon_col, 'prev_lat', 'prev_lon']], \n                                        how='left', on=[phone_col, ts_col], suffixes=('', '_basepred'))\ndf_tst","4679d1fb":"df_tst['sSinceGpsEpoch'] = df_tst[ts_col] \/\/ 1000\nprint(df_tst.shape)\ndf_tst.head()","b6457516":"derived_files = (data_dir \/ 'train').rglob('*_derived.csv')\ncols = [ts_col, 'svid', 'correctedPrM']\nderived_files","20b7d071":"df_list = []\nfor t in tqdm(derived_files, total=73):\n    derived = pd.read_csv(t).drop_duplicates([ts_col, 'svid'])\n    derived['correctedPrM'] = (derived['rawPrM'] + derived['satClkBiasM'] - derived['isrbM'] - \n                               derived['ionoDelayM'] - derived['tropoDelayM'])\n    df_list.append(derived[[cname_col, pname_col, ts_col, 'svid', 'correctedPrM']])","00ac0c6f":"df_derived = pd.concat(df_list, ignore_index=True)\ndf_derived","02914133":"df_derived[phone_col] = df_derived[cname_col] + '_' + df_derived[pname_col]\ndf_derived[phone_col] ","e1dab2db":"df_derived.drop([cname_col, pname_col], axis=1, inplace=True)\n\nprint(df_derived.shape)\ndf_derived.head()","cfbddbba":"df_derived_pivot = pd.pivot_table(df_derived, \n                                  values='correctedPrM', \n                                  index=[phone_col, ts_col],\n                                  columns=['svid'],\n                                  aggfunc=np.mean)\ndf_derived_pivot ","d68b4e7a":"df_derived_pivot.columns = [f'svid_{x}' for x in df_derived_pivot.columns]\ndf_derived_pivot.columns","8d263f6d":"df_derived_pivot.reset_index(inplace=True)\ndf_derived_pivot","4983d678":"df_derived_pivot['sSinceGpsEpoch'] = df_derived_pivot[ts_col] \/\/ 1000\n\nprint(df_derived_pivot.shape)\ndf_derived_pivot.head()","0301a4cd":"df = df.merge(df_derived_pivot, how='left', on=[phone_col, 'sSinceGpsEpoch'], suffixes=['', '_2'])\ndf.drop(['sSinceGpsEpoch', ts_col + '_2'], axis=1, inplace=True)\nprint(df.shape)\ndf.head()","3f9da506":"df['d_lat'] = df['latDeg_gt'] - df[lat_col]\ndf['d_lon'] = df['lngDeg_gt'] - df[lon_col]\ndf[['d_lat', 'd_lon']].describe()","396f317c":"derived_files = (data_dir \/ 'test').rglob('*_derived.csv')\ncols = [ts_col, 'svid', 'correctedPrM']\nderived_files ","30122b39":"df_list = []\nfor t in tqdm(derived_files, total=48):\n    derived = pd.read_csv(t)\n    derived['sSinceGpsEpoch'] = derived[ts_col] \/\/ 1000\n    derived.drop_duplicates(['sSinceGpsEpoch', 'svid'], inplace=True)\n    derived['correctedPrM'] = (derived['rawPrM'] + derived['satClkBiasM'] - derived['isrbM'] - \n                               derived['ionoDelayM'] - derived['tropoDelayM'])\n    df_list.append(derived[[cname_col, pname_col, 'sSinceGpsEpoch', 'svid', 'correctedPrM']])\n    ","b478e828":"df_derived = pd.concat(df_list, ignore_index=True)\ndf_derived","2aca8dac":"df_derived[phone_col] = df_derived[cname_col] + '_' + df_derived[pname_col]\ndf_derived.drop([cname_col, pname_col], axis=1, inplace=True)\ndf_derived","6351b158":"df_derived_pivot = pd.pivot_table(df_derived, \n                                  values='correctedPrM', \n                                  index=[phone_col, 'sSinceGpsEpoch'],\n                                  columns=['svid'],\n                                  aggfunc=np.mean)\ndf_derived_pivot","f7da5040":"df_derived_pivot.columns = [f'svid_{x}' for x in df_derived_pivot.columns]\ndf_derived_pivot.reset_index(inplace=True)\ndf_derived_pivot","334ce4c6":"df_tst = df_tst.merge(df_derived_pivot, how='left', \n                      on=[phone_col, 'sSinceGpsEpoch']).drop(['sSinceGpsEpoch'], axis=1)\nprint(df_tst.shape)\ndf_tst.head()","3ef881e4":"df_tst.describe()","f2269325":"feature_cols = [x for x in df_tst.columns if x not in [phone_col, ts_col]]\ntarget_cols = ['d_lat', 'd_lon']\ninput_dim = len(feature_cols)\noutput_dim = len(target_cols)","eeedfabe":"feature_cols ","2f485a25":"scaler = StandardScaler()\nlabel_scaler = StandardScaler()\nscaler.fit(pd.concat([df[feature_cols], df_tst[feature_cols]], axis=0).fillna(0).values)\nX = scaler.transform(df[feature_cols].fillna(0).values)\nX_tst = scaler.transform(df_tst[feature_cols].fillna(0).values)\nY = label_scaler.fit_transform(df[target_cols].values)\nprint(X.shape, Y.shape, X_tst.shape)","5cabbbaf":"def scheduler(epoch, lr, warmup=5):\n    if epoch < warmup:\n        return lr * 1.5\n    else:\n        return lr * tf.math.exp(-.1) #epoch\u6bce\u306b\u6e1b\u8870\u3055\u305b\u3066\u3044\u308b\u3002","5af47154":"Y","8714be1a":"import optuna \nimport optuna.integration.lightgbm as lgbo\nimport lightgbm as lgb\n'''\nparams = { 'objective': 'mae', 'metric': 'l2' }\nY = pd.DataFrame(Y,columns={'data','data2'})\n\nlgb_train1 = lgb.Dataset(X, Y.data)\nlgb_valid1 = lgb.Dataset(X, Y.data)\nmodel1 = lgbo.train(params, lgb_train1, valid_sets=[lgb_valid1], verbose_eval=False, num_boost_round=100, early_stopping_rounds=5) \nmodel1.params[\"learning_rate\"] = 0.01\nmodel1.params[\"early_stopping_round\"] = 100\nmodel1.params[\"num_iterations\"] = 8000\nmodel1.params\n'''","047ed535":"params1={'objective': 'mae',\n 'metric': 'l2',\n 'feature_pre_filter': False,\n 'lambda_l1': 0.0,\n 'lambda_l2': 0.0,\n 'num_leaves': 251,\n 'feature_fraction': 0.7,\n 'bagging_fraction': 0.9251930861598833,\n 'bagging_freq': 1,\n 'min_child_samples': 20,\n 'num_iterations': 8000,\n 'early_stopping_round': 100,\n 'learning_rate': 0.01}","f7a1f115":"'''\nlgb_train2 = lgb.Dataset(X, Y.data2)\nlgb_valid2 = lgb.Dataset(X, Y.data2)\nmodel2 = lgbo.train(params, lgb_train2, valid_sets=[lgb_valid2], verbose_eval=False, num_boost_round=100, early_stopping_rounds=5) \nmodel2.params[\"learning_rate\"] = 0.01\nmodel2.params[\"early_stopping_round\"] = 100\nmodel2.params[\"num_iterations\"] = 8000\nmodel2.params\n'''","ae0c2b23":"params2 = {'objective': 'mae',\n 'metric': 'l2',\n 'feature_pre_filter': False,\n 'lambda_l1': 0.0,\n 'lambda_l2': 0.0,\n 'num_leaves': 250,\n 'feature_fraction': 0.9520000000000001,\n 'bagging_fraction': 1.0,\n 'bagging_freq': 0,\n 'min_child_samples': 5,\n 'num_iterations': 8000,\n 'early_stopping_round': 100,\n 'learning_rate': 0.01}","49cc00ec":"params = {'objective': 'mse',\n 'metric': 'mse',\n 'num_iterations': 8000,\n 'early_stopping_round': 100,\n 'learning_rate': 0.001}","8fdb6721":"\nfrom sklearn.multioutput import MultiOutputRegressor\nimport lightgbm as lgb\n\nparams={'learning_rate': 0.04, #0.02\n        'objective':'mae', #mse\n        'metric':'l1', #mse l2 l1=l2\n        'num_leaves': 250, #9 @@\n        'verbose': 0, \n        'feature_fraction': 0.5, #0.5\n        'bagging_fraction': 0.5, #0.9 \u5909\u5316\u306a\u3057\n        'max_depth':150 #100 \n        #'bagging_fraction': 0.8, #0.7\n        #'feature_fraction': 0.8 #0.7\n       }\nreg = MultiOutputRegressor(lgb.LGBMRegressor(**params, n_estimators=2000))#@2000\n\ncv = KFold(n_splits=n_fold, shuffle=True, random_state=seed)\n\nP = np.zeros_like(Y, dtype=float)\nP_tst = np.zeros((X_tst.shape[0], output_dim), dtype=float)\n#Y = pd.DataFrame(Y,columns={'data','data2'})\nfor i, (i_trn, i_val) in enumerate(cv.split(X), 1):\n    print(f'Training for CV #{i}')\n        \n    reg.fit(X[i_trn], Y[i_trn])\n    tt = reg.predict(X[i_val])\n    P[i_val] = label_scaler.inverse_transform(tt)\n    \n    tt = reg.predict(X_tst)\n\n    P_tst += label_scaler.inverse_transform(tt) \/ n_fold\n    \n    distance_i = calc_haversine(df.latDeg_gt.values[i_val], \n                                df.lngDeg_gt.values[i_val], \n                                P[i_val, 0] + df.latDeg.values[i_val], \n                                P[i_val, 1] + df.lngDeg.values[i_val]).mean()\n    print(f'CV #{i}: ',distance_i)\n    \n#P_tst = P_tst \/   n_fold","f17543ed":"'''\ncv = KFold(n_splits=n_fold, shuffle=True, random_state=seed)\n\nP = np.zeros_like(Y, dtype=float)\nP_tst = np.zeros((X_tst.shape[0], output_dim), dtype=float)\nY = pd.DataFrame(Y,columns={'data','data2'})\nfor i, (i_trn, i_val) in enumerate(cv.split(X), 1):\n    print(f'Training for CV #{i}')\n    lgb_train1 = lgb.Dataset(X[i_trn], Y.data[i_trn])\n    lgb_valid1 = lgb.Dataset(X[i_val], Y.data[i_val])\n    \n    lgb_train2 = lgb.Dataset(X[i_trn], Y.data2[i_trn])\n    lgb_valid2 = lgb.Dataset(X[i_val], Y.data2[i_val])\n    \n\n    model1 = lgb.train(params1, lgb_train1, valid_sets=[lgb_valid1], verbose_eval=100)\n    model2 = lgb.train(params2, lgb_train2, valid_sets=[lgb_valid2], verbose_eval=100)\n    \n    a =model1.predict(X[i_val])\n    b =model2.predict(X[i_val])\n    tt = pd.DataFrame(columns=['a','b'],index=range(len(a)))\n    tt.a = a\n    tt.b = b\n   \n    P[i_val] = label_scaler.inverse_transform(tt)\n    \n    \n    a =model1.predict(X_tst)\n    b =model2.predict(X_tst)\n    tt = pd.DataFrame(columns=['a','b'],index=range(len(a)))\n    tt.a = a\n    tt.b = b\n\n    P_tst += label_scaler.inverse_transform(tt) \/ n_fold\n    \n    distance_i = calc_haversine(df.latDeg_gt.values[i_val], \n                                df.lngDeg_gt.values[i_val], \n                                P[i_val, 0] + df.latDeg.values[i_val], \n                                P[i_val, 1] + df.lngDeg.values[i_val]).mean()\n    print(f'CV #{i}:',distance_i)\n   '''","3a9a2678":"print(P.mean(axis=0), P_tst.mean(axis=0))\nnp.savetxt(predict_val_file, P, delimiter=',', fmt='%.6f')\nnp.savetxt(predict_tst_file, P_tst, delimiter=',', fmt='%.6f')","abebc75f":"distance = calc_haversine(df.latDeg_gt, df.lngDeg_gt, P[:, 0] + df.latDeg, P[:, 1] + df.lngDeg)\nprint(f'CV All: {np.percentile(distance, [50, 95])}')","53594ea2":"df.sort_values([phone_col, ts_col], inplace=True)\ndf_smoothed = df.copy()\ndf_smoothed[lat_col] = df[lat_col] + P[:, 0]\ndf_smoothed[lon_col] = df[lon_col] + P[:, 1]\ndf_smoothed = apply_kf_smoothing(df_smoothed)\ndistance = calc_haversine(df_smoothed.latDeg_gt, df_smoothed.lngDeg_gt, df_smoothed.latDeg, df_smoothed.lngDeg)\nprint(f'CV All (smoothed): {np.percentile(distance, [50, 95])}')","a9511bc8":"distance_tst = calc_haversine(df_tst.latDeg, df_tst.lngDeg, P_tst[:, 0] + df_tst.latDeg, P_tst[:, 1] + df_tst.lngDeg)\nprint(f'CV All: {np.percentile(distance_tst, [50, 95])}')","15ba54f5":"distance_tst","8739878a":"df_tst.sort_values([phone_col, ts_col], inplace=True)\ndf_tst_smoothed = df_tst.copy()\ndf_tst_smoothed[lat_col] = df_tst_smoothed[lat_col] + P_tst[:, 0]\ndf_tst_smoothed[lon_col] = df_tst_smoothed[lon_col] + P_tst[:, 1]\ndf_tst_smoothed","5e269192":"df_tst_smoothed = apply_kf_smoothing(df_tst_smoothed)\ndf_tst_smoothed","dc5151bf":"distance_tst = calc_haversine(df_tst.latDeg, df_tst.lngDeg, df_tst_smoothed.latDeg, df_tst_smoothed.lngDeg)\nprint(f'CV All (smoothed): {np.percentile(distance_tst, [50, 95])}')","6afd26c9":"df_tst_smoothed[[phone_col, ts_col, lat_col, lon_col]].to_csv(submission_file, index=False)","37a94993":"submission = df_tst_smoothed[[phone_col, ts_col, lat_col, lon_col]]\n","a2c287fd":"### <font color=\"orange\">folium\u306e\u6982\u8981<\/font><br>\nfolium\u306fleaflet.js\u3068\u3044\u3046Javascript\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u30de\u30c3\u30d7\u3092Python\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001Python\u3067\u7c21\u6613\u7684\u306b\u30de\u30c3\u30d7\u3092\u7528\u3044\u3066\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u3092\u884c\u3048\u307e\u3059\u3002\n\n\u30de\u30c3\u30d7\u306fOpenStreetMap\u304c\u6a19\u6e96\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u3055\u3089\u306b\u3001Mapbox\u3068\u3044\u3063\u305f\u30de\u30c3\u30d7\u3082\u81ea\u8eab\u3067\u53d6\u5f97\u3057\u305fAPI key\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u5229\u7528\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002","f1f0ab9f":"### <font color=\"orange\">\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u30fc<\/font>","3a7c7577":"\u300cGPS_L1\u300d\u306e\u4fe1\u53f7\u30bf\u30a4\u30d7\u304c\u4e0e\u3048\u3089\u308c\u305f\u5404\u30a8\u30dd\u30c3\u30af\u306b\u306f\u3001\u5c11\u306a\u304f\u3068\u3082 3 \u3064\u306e\u885b\u661f\u304b\u3089\u306e\u4fe1\u53f7\u304c\u3042\u308a\u307e\u3059\u3002","5ace2d80":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf","862a8825":"## \ud83d\udcbcconstellation_type_mapping.csv","188a1113":"# Phone Level Data EDA","4e39ac98":"<pre><font color=\"orange\">numpy.percentile()\u306f\u3001\u4e0e\u3048\u305f\u914d\u5217\u304b\u3089\u6307\u5b9a\u3057\u305f\u30d1\u30fc\u30bb\u30f3\u30bf\u30a4\u30eb\u5024\u3092\u8a08\u7b97\u3059\u308b\u3002<\/font>\n\npercentile(a, q)\na\uff1a\u30d1\u30fc\u30bb\u30f3\u30bf\u30a4\u30eb\u3092\u8a08\u7b97\u3059\u308b\u5143\u306e\u914d\u5217\u3002\nq\uff1a\u30d1\u30fc\u30bb\u30f3\u30bf\u30a4\u30eb\u5024\u3001\u307e\u305f\u306f\u914d\u5217\u3002\u30d1\u30fc\u30bb\u30f3\u30bf\u30a4\u30eb\u5024\u306f0\uff5e100\u3067\u3001\u767e\u5206\u7387\u8868\u793a\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u30021\u6b21\u5143\u914d\u5217\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u5404\u8981\u7d20\u306e\u30d1\u30fc\u30bb\u30f3\u30bf\u30a4\u30eb\u5024\u306b\u76f8\u5f53\u3059\u308b\u5024\u304c\u540c\u3058\u30b5\u30a4\u30ba\u306e\u914d\u5217\u3067\u8fd4\u3055\u308c\u308b\u3002\n\nprint(np.percentile(a, [55, 75]))\n [5.5 7.5]","ec644e92":"## `millisSinceGpsEpoch`","baf05cdd":"## \u23f3\u308f\u304b\u3089\u306a\u3044\u304b\u3089\u3001train\u30d5\u30a9\u30eb\u30c0\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u5168\u90e8\u8aad\u3093\u3067\u307f\u308b","3d681f1f":"## Pixel4_GnssLog.20o\n\u8aad\u3093\u3060\u3082\u306e\u306e\u3001\u3069\u3046\u3057\u305f\u3089\u3044\u3044\u304b\u308f\u304b\u3089\u306a\u3044\u3002","6b9b87c3":"### \ud83d\udd0etest\u30c7\u30fc\u30bf\u306ecollectionName\u3068phone\u306e\u95a2\u4fc2","4218c406":"\u30c7\u30fc\u30bf\u306e\u8aac\u660e\u306b\u3088\u308b\u3068\u3001`millisSinceGpsEpoch` \u306f\u300cGPS \u30a8\u30dd\u30c3\u30af (1980\/1\/6 \u5348\u524d 0 \u6642 UTC) \u304b\u3089\u306e\u30df\u30ea\u79d2\u6570\u3092\u8868\u3059\u6574\u6570\u3067\u3059\u3002 \u6b21\u306e\u3088\u3046\u306b\u300cpd.to_datetime()\u300d\u3092\u4f7f\u7528\u3057\u3066\u3001\u305d\u308c\u3089\u3092\u300cdatatime64\u300d\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002","da32444e":"## `latDeg` and `lngDeg`","2759438d":"# \u2460","a176c803":"# \u30c8\u30ec\u30a4\u30f3\u30c7\u30fc\u30bf","5f86dcd0":"###  MultiOutputRegressor","5dfd2a79":"{'Raw','UncalAccel', 'UncalGyro', 'UncalMag', 'Fix', 'Status', 'OrientationDeg'} \u3092\u30ad\u30fc\u306b\u3057\u3066\u62fe\u3063\u3066\u3044\u308b","80e5f811":"# Submission File","c7a34a09":"\ud83d\udcd4\u30fbmillisSinceGpsEpoch-GPS\u30a8\u30dd\u30c3\u30af\uff081980\/1\/6\u771f\u591c\u4e2dUTC\uff09\u304b\u3089\u306e\u6574\u6570\u30df\u30ea\u79d2\u3002 \u305d\u306e\u5024\u306f\u7b49\u3057\u3044<br>\n\u30fblatDeg\u3001lngDeg-\u53c2\u7167GNSS\u53d7\u4fe1\u6a5f\uff08NovAtel SPAN\uff09\u306b\u3088\u3063\u3066\u63a8\u5b9a\u3055\u308c\u305fWGS84\u306e\u7def\u5ea6\u3001\u7d4c\u5ea6\uff0810\u9032\u5ea6\uff09\u3002 \u5834\u6240\u3092\u4e88\u60f3\u3055\u308c\u308b\u975e\u6574\u6570\u306e\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306b\u5408\u308f\u305b\u308b\u305f\u3081\u306b\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u7dda\u5f62\u88dc\u9593\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002<br>\n\u30fbheightAboveWgs84EllipsoidM-\u53c2\u7167GNSS\u53d7\u4fe1\u6a5f\u306b\u3088\u3063\u3066\u63a8\u5b9a\u3055\u308c\u305fWGS84\u6955\u5186\u4f53\u304b\u3089\u306e\u9ad8\u3055\uff08\u30e1\u30fc\u30c8\u30eb\u5358\u4f4d\uff09\u3002","fb2585ad":"## GNSS Logs","3783c380":"> GNSS\uff08Global Navigation Satellite System \/ \u5168\u7403\u6e2c\u4f4d\u885b\u661f\u30b7\u30b9\u30c6\u30e0\uff09\u306f\u3001GPS\u3001\u6e96\u5929\u9802\u885b\u661f\uff08QZSS\uff09\u3001GLONASS\u3001Galileo\u7b49\u306e\u885b\u661f\u6e2c\u4f4d\u30b7\u30b9\u30c6\u30e0\u306e\u7dcf\u79f0\u3067\u3059\u3002GNSS\u6e2c\u91cf\u306f\u3001\u5730\u7403\u4e0a\u7a7a\u3092\u5468\u56de\u3059\u308bGNSS\u885b\u661f\u304b\u3089\u9001\u3089\u308c\u308b\u96fb\u6ce2\u3092\u5229\u7528\u3057\u3066\u3001\u5ea7\u6a19\u3092\u6c42\u3081\u308b\u9ad8\u7cbe\u5ea6\u306a\u6e2c\u91cf\u65b9\u6cd5\u3067\u3059\u3002\u6e2c\u70b9\u306b\u636e\u3048\u4ed8\u3051\u305f\u53d7\u4fe1\u6a5f\u3067\u4e0a\u7a7a\u304b\u3089\u306e\u96fb\u6ce2\u3092\u53d7\u4fe1\u3059\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u3053\u308c\u307e\u3067\u306e\u3088\u3046\u306a\u6e2c\u70b9\u9593\u306e\u8996\u901a\u306e\u78ba\u4fdd\u3084\u5929\u5019\u306e\u826f\u3057\u60aa\u3057\u306b\u7121\u95a2\u4fc2\u306b\u6e2c\u91cf\u304c\u5b9f\u65bd\u3067\u304d\u307e\u3059\u3002\n> \n> \u3000GNSS\u6e2c\u91cf\u306f\u30013\u6b21\u5143\u306e\u9ad8\u7cbe\u5ea6\u6e2c\u91cf\u304c\u53ef\u80fd\u3067\u3042\u308a\u3001\u6e2c\u91cf\u4f5c\u696d\u3082\u8efd\u6e1b\u5316\u30fb\u52b9\u7387\u5316\u304c\u56f3\u308c\u308b\u305f\u3081\u3001\u73fe\u5728\u3001\u6e2c\u5730\u6e2c\u91cf\u306e\u4e3b\u6d41\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n> \n> \u3000\u30ab\u30fc\u30ca\u30d3\u3084\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306a\u3069\u306eGNSS\u306b\u3088\u308a\u5f97\u3089\u308c\u308b\u5ea7\u6a19\u5024\u306f\u3001\u4e00\u822c\u7684\u306bWGS 84\u5ea7\u6a19\u7cfb\u3067\u8868\u3055\u308c\u3066\u3044\u307e\u3059\u3002 WGS 84\u5ea7\u6a19\u7cfb\u3068ITRF\u5ea7\u6a19\u7cfb\u306f\u3068\u3082\u306b\u5730\u7403\u4e2d\u5fc3\u306e\u5ea7\u6a19\u7cfb\u3067\u3059\u3002WGS 84\u306f\u3053\u308c\u307e\u3067\u306b\u6570\u56de\u306e\u6539\u5b9a\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u90fd\u5ea6ITRF\u7cfb\u306b\u63a5\u8fd1\u3057\u73fe\u5728\u306f\u307b\u3068\u3093\u3069\u540c\u4e00\u306e\u3082\u306e\u3068\u3057\u3066\u6271\u3063\u3066\u3082\u554f\u984c\u306a\u304f\u3001\u5b9f\u7528\u4e0a\u306e\u9055\u3044\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u305f\u3060\u3057\u3001\u65e5\u672c\u56fd\u5185\u306e\u6e2c\u91cf\u3067\u306fITRF\u5ea7\u6a19\u7cfbGRS80\u6955\u5186\u4f53\u3092\u7528\u3044\u308b\u3088\u3046\u5b9a\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n> ","35def5de":"# \u2461","d2775828":"\u30d7\u30ec\u30d3\u30e5\u30fc\u30c7\u30fc\u30bf\u3092\u3064\u304f\u308b\u305f\u3081\u306bshift\u3067\uff11\u884c\u3065\u3089\u3057\u3066\u3044\u308b\u3002\u306a\u306e\u30671\u884c\u76ee\u306fNaN\u306b\u306a\u308b\u3002","907cab9a":"### \u30b3\u30f3\u30b9\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u30bf\u30a4\u30d7","d474194d":"### \u666e\u901a\u306eLightGBM","2acf6d2b":"<font color=\"orange\">pd.concat\u3092\u3064\u304b\u3063\u3066pandas\u30d5\u30a1\u30a4\u30eb\u306b\u3057\u3066\u3044\u308b\u3002<\/font><br>\nconcat\u3092\u4f7f\u3063\u3066\u7d50\u5408\u3057\u306a\u3044\u3084\u308a\u304b\u305f\u304c\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3002","377723ff":"## \ud83d\udcbcSPAN_Pixel4_10Hz.nmea\n\u3053\u308c\u3082\u898b\u65b9\u304c\u308f\u304b\u3089\u306a\u3044\u3002","545629e9":"\u643a\u5e2f\u96fb\u8a71\u306e GNSS \u30c1\u30c3\u30d7\u30bb\u30c3\u30c8\u304b\u3089\u306e\u6e2c\u5b9a\u5024\u306f\u3001\u30ce\u30a4\u30ba\u304c\u591a\u304f\u3001\u8aa4\u5dee\u304c\u5927\u304d\u3044\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002\u9069\u7528 (\u9664\u5916) \u3067\u304d\u308b\u30d5\u30a3\u30eb\u30bf\u30fc\u306e\u4f8b\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002<br>\n<br>\n\n1. \u300cFullBiasNanos\u300d (GNSS Raw) \u304c\u30bc\u30ed\u307e\u305f\u306f\u7121\u52b9\n2. \u300cBiasUncertaintyNanos\u300d (GNSS Raw) \u304c\u5927\u304d\u3059\u304e\u308b (> 1e6)\n3. \u5230\u7740\u6642\u9593\u304c\u8ca0\u307e\u305f\u306f\u975e\u73fe\u5b9f\u7684\u306b\u9577\u3044 - \u300crawPrM\u300d\u304b\u3089\u8a08\u7b97\u3067\u304d\u308b (\u6d3e\u751f)\n4. \u672a\u77e5\u306e\u661f\u5ea7 (`constellationType == 0`) (\u6d3e\u751f\u3001GNSS Raw)\n5. \u300cTimeNanos\u300d\u304c\u7a7a (GNSS Raw)\n6. \u300cState\u300d\u304c (\u300cSTATE_TOW_DECODED\u300d\u3001\u300cSTATE_TOW_KNOWN\u300d\u3001\u300cSTATE_GLO_TOD_DECODED\u300d\u3001\u300cSTATE_GLO_TOD_KNOWN\u300d) \u306b\u306a\u3044 (GNSS Raw)\n7. \u300cReceivedSvTimeUncertaintyNanos\u300d\u304c\u9ad8\u3044 (500 ns) (GNSS Raw)\n8. \u3053\u306e\u6761\u4ef6\u306b\u9055\u53cd\u3059\u308b\u300cAccumulatedDeltaRangeState\u300d: \u300cADR_STATE_VALID == 1 & ADR_STATE_RESET == 0 & ADR_STATE_CYCLE_SLIP == 0\u300d (GNSS Raw)\n9. \u300cAccumulatedDeltaRangeUncertaintyMeters\u300d\u304c\u9ad8\u3044 (GNSS Raw)\n10. \u300cCn0DbHz\u300d\u304c 20 db-Hz \u672a\u6e80 (GNSS Raw)","a27dabe9":"## \ud83d\udcbcraw_state_bit_map.json","09211444":"## \ud83d\udcbcPixel4_derived.csv","6ecab652":"# \ud83d\udd13supplemental","2618007f":"<preCV #1:  2.195005878674228","1109557c":"### \u30c8\u30ec\u30a4\u30f3\u30c7\u30fc\u30bf\u306b\u3057\u304b\u306a\u3044\u3082\u306e\u3002ground_truth.csv\u3000\u3064\u307e\u308a\u6b63\u89e3\u30c7\u30fc\u30bf","e1c92c3f":"\ud83c\udf13\u3053\u306e\u8ab2\u984c\u306f\u3001GPS\u885b\u661f\u304b\u3089\u306e\u4fe1\u53f7\u3001\u52a0\u901f\u5ea6\u8a08\u306e\u8aad\u307f\u53d6\u308a\u5024\u3001\u30b8\u30e3\u30a4\u30ed\u30b9\u30b3\u30fc\u30d7\u306e\u8aad\u307f\u53d6\u308a\u5024\u306a\u3069\u3001\u96fb\u8a71\u306e\u4f4d\u7f6e\u3092\u7279\u5b9a\u3059\u308b\u306e\u306b\u5f79\u7acb\u3064\u3055\u307e\u3056\u307e\u306a\u6a5f\u5668\u304b\u3089\u306e\u30c7\u30fc\u30bf\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u8ab2\u984c\u306e\u8a2d\u8a08\u306f\u8eca\u7dda\u30ec\u30d9\u30eb\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u306a\u3069\u306e\u5f8c\u51e6\u7406\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u7126\u70b9\u3092\u5408\u308f\u305b\u3066\u3044\u308b\u305f\u3081\u3001\u30eb\u30fc\u30c8\u306b\u6cbf\u3063\u305f\u5c06\u6765\u306e\u30c7\u30fc\u30bf\u3092\u5229\u7528\u3057\u3066\u3001\u53ef\u80fd\u306a\u9650\u308a\u6b63\u78ba\u306b\u4f4d\u7f6e\u3092\u751f\u6210\u3067\u304d\u307e\u3059\u3002 \u591a\u304f\u306e\u30eb\u30fc\u30c8\u304c\u8907\u6570\u306e\u96fb\u8a71\u3067\u8868\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308b\u305f\u3081\u3001\u8fd1\u96a3\u306e\u96fb\u8a71\u304b\u3089\u306e\u60c5\u5831\u3092\u5229\u7528\u3057\u3066\u898b\u7a4d\u3082\u308a\u3092\u652f\u63f4\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u4e00\u822c\u7684\u306aGNSS\u6e2c\u4f4d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u958b\u767a\u3092\u4fc3\u9032\u3059\u308b\u305f\u3081\u306b\u3001\u96fb\u8a71\u5185GPS\u30c1\u30c3\u30d7\u30bb\u30c3\u30c8\u306e\u5834\u6240\u306f\u3001\u96fb\u8a71\u30e2\u30c7\u30eb\u3084\u305d\u306e\u4ed6\u306e\u8981\u56e0\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u30e1\u30fc\u30ab\u30fc\u72ec\u81ea\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304b\u3089\u6d3e\u751f\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u63d0\u4f9b\u3055\u308c\u307e\u305b\u3093\u3002\n","ccb710bd":"\ud83d\udcd4\u30fbcollectionName-\u300c\u30b0\u30e9\u30f3\u30c9\u300d\u89aa\u30d5\u30a9\u30eb\u30c0\u30fc\u306e\u540d\u524d\u3002<br>\n\u30fbhDop-GGA\u30bb\u30f3\u30c6\u30f3\u30b9\u304b\u3089\u306e\u9ad8\u7cbe\u5ea6DOP\u306e\u6c34\u5e73\u5e0c\u91c8\u306f\u3001\u6e2c\u5b9a\u306e\u30a8\u30e9\u30fc\u304c\u6700\u7d42\u7684\u306a\u6c34\u5e73\u4f4d\u7f6e\u63a8\u5b9a\u306b\u3069\u306e\u3088\u3046\u306b\u5f71\u97ff\u3059\u308b\u304b\u3092\u8aac\u660e\u3057\u307e\u3059\u3002<br>\n\u30fbvDop-GSA\u30bb\u30f3\u30c6\u30f3\u30b9\u304b\u3089\u306e\u9ad8\u7cbe\u5ea6DOP\u306e\u5782\u76f4\u5e0c\u91c8\u306f\u3001\u6e2c\u5b9a\u5024\u306e\u30a8\u30e9\u30fc\u304c\u6700\u7d42\u7684\u306a\u5782\u76f4\u4f4d\u7f6e\u63a8\u5b9a\u306b\u3069\u306e\u3088\u3046\u306b\u5f71\u97ff\u3059\u308b\u304b\u3092\u793a\u3057\u307e\u3059\u3002<br>\n\u30fbspeedMps-\u5730\u4e0a\u306e\u901f\u5ea6\uff08\u30e1\u30fc\u30c8\u30eb\/\u79d2\uff09\u3002<br>\n\u30fbcourseDegree-\u5730\u4e0a\u306e\u771f\u5317\u306b\u5bfe\u3059\u308b\u6642\u8a08\u56de\u308a\u306e\u30b3\u30fc\u30b9\u89d2\u5ea6\uff08\u5ea6\u5358\u4f4d\uff09\u3002<br>\n\u30fbmillisSinceGpsEpoch-GPS\u30a8\u30dd\u30c3\u30af\uff081980\/1\/6\u771f\u591c\u4e2dUTC\uff09\u304b\u3089\u306e\u6574\u6570\u30df\u30ea\u79d2\u3002 \u305d\u306e\u5024\u306f\u7b49\u3057\u3044<br>\n\u30fblatDeg\u3001lngDeg-\u53c2\u7167GNSS\u53d7\u4fe1\u6a5f\uff08NovAtel SPAN\uff09\u306b\u3088\u3063\u3066\u63a8\u5b9a\u3055\u308c\u305fWGS84\u306e\u7def\u5ea6\u3001\u7d4c\u5ea6\uff0810\u9032\u5ea6\uff09\u3002 \u5834\u6240\u3092\u4e88\u60f3\u3055\u308c\u308b\u975e\u6574\u6570\u306e\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306b\u5408\u308f\u305b\u308b\u305f\u3081\u306b\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u7dda\u5f62\u88dc\u9593\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002<br>\n\u30fbcourseDegree-\u5730\u4e0a\u306e\u771f\u5317\u306b\u5bfe\u3059\u308b\u6642\u8a08\u56de\u308a\u306e\u30b3\u30fc\u30b9\u89d2\u5ea6\uff08\u5ea6\u5358\u4f4d\uff09\u3002","8a1808fb":"\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0 \u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8 \u30c7\u30fc\u30bf\u306e\u9593\u306e\u63a8\u5b9a\u4f4d\u7f6e\u304c\u3069\u306e\u3088\u3046\u306b\u898b\u3048\u308b\u304b\u3092\u898b\u307e\u3059\u3002 \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0 \u30c7\u30fc\u30bf\u306e\u30b0\u30e9\u30a6\u30f3\u30c9 \u30c8\u30a5\u30eb\u30fc\u30b9\u306f\u3001\u300c{collectionName}\/{phoneName}\/ground_truth.csv\u300d\u306e\u300cphone\u300d\u3054\u3068\u306b\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002","c4d3f293":"\u30b3\u30e1\u30f3\u30c8\u3092\u5916\u305b\u3070\u3001optuna\u304c\u52d5\u304d\u307e\u3059\u3002\n\n\u52c9\u5f37\u3057\u305f\u3044\u4eba\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u5916\u3057\u3066\u3001\u52d5\u304b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n","a26d2eb7":"with tpu_strategy.scope():\n    model = build_model()\n    model.summary()","cff25720":"# Load Libraries & Data","1c05f092":"## Ground Truth","87d06e55":"## <font color=\"#FE2EF7\">simdkalman<\/font><br>\n\u5358\u4e00\u547d\u4ee4\u306e\u8907\u6570\u30c7\u30fc\u30bf\u306e\u30d9\u30af\u30c8\u30eb\u5316\u3092\u5229\u7528\u3057\u305f Python \u306e\u9ad8\u901f\u30ab\u30eb\u30de\u30f3 \u30d5\u30a3\u30eb\u30bf\u30fc\u3002 \u3064\u307e\u308a\u3001n \u500b\u306e\u72ec\u7acb\u3057\u305f\u4e00\u9023\u306e\u89b3\u6e2c\u306b\u5bfe\u3057\u3066 n \u500b\u306e\u985e\u4f3c\u3057\u305f\u30ab\u30eb\u30de\u30f3 \u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 SIMD \u30d7\u30ed\u30bb\u30c3\u30b5\u306e\u547d\u4ee4\u3068\u6df7\u540c\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 examples\/benchmark.py \u306b\u3088\u308b\u3068\u3002 \u3053\u308c\u306f\u3001\u591a\u304f\u306e\u72ec\u7acb\u3057\u305f\u6642\u7cfb\u5217\u3067\u30d9\u30af\u30c8\u30eb\u5316\u3067\u304d\u308b\u5834\u5408\u3001pykalman \u3088\u308a\u3082\u6700\u5927 100 \u500d\u3001filterpy \u3088\u308a\u3082 70 \u500d\u9ad8\u901f\u306b\u306a\u308a\u307e\u3059\u3002 \u307e\u305f\u3001\u30d9\u30af\u30c8\u30eb\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3067\u3082\u30012 \u500d\u9ad8\u901f\u306b\u306a\u308a\u307e\u3059\u3002<br>\n\n=>\u96e3\u3057\u3044\u3067\u3059\u304c\u3001\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\u30e1\u30e2\u306b\u3082\u66f8\u3044\u3066\u3042\u308b\u3068\u304a\u308a\u3001\u4eca\u56de\u306e\u30b3\u30f3\u30da\u3067\u306f\u5fc5\u8981\u306a\u6a5f\u80fd\u306b\u306a\u308a\u307e\u3059\u3002","40555ec4":"<pre><font color=\"orange\">Python\u306e\u8f9e\u66f8\uff08dict\uff09\u306efor\u30eb\u30fc\u30d7\u51e6\u7406\u306e\u4ed5\u65b9\uff08keys, values, items\uff09<\/font>\n\n\u3000\u3000keys(): \u5404\u8981\u7d20\u306e\u30ad\u30fckey\u306b\u5bfe\u3057\u3066for\u30eb\u30fc\u30d7\u51e6\u7406\n\u3000\u3000values(): \u5404\u8981\u7d20\u306e\u5024value\u306b\u5bfe\u3057\u3066for\u30eb\u30fc\u30d7\u51e6\u7406\n\u3000\u3000items(): \u5404\u8981\u7d20\u306e\u30ad\u30fckey\u3068\u5024value\u306b\u5bfe\u3057\u3066for\u30eb\u30fc\u30d7\u51e6\u7406<\/pre>","6d9f0e14":"## `collectionName`, `phoneName`","0bdce8d9":"\ud83d\udcd4[train \/ test] \/ [drive_id] \/ [phone_name] \/ [phone_name] _GnssLog.txt-GnssLogger\u30a2\u30d7\u30ea\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u305f\u96fb\u8a71\u306e\u30ed\u30b0\u3002 \u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306f\u3001\u30ed\u30b0\u3092\u89e3\u6790\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002 \u5404gnss\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u30b5\u30d6\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059","5d2a7766":"## Derived Values","fce7ec56":"\u5404mobile-phone\u306b\u306f\u3001577 \uff5e 3,517 \u306e\u7bc4\u56f2\u306e\u304b\u306a\u308a\u306e\u91cf\u306e\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30c8\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002","42fab504":"\u6b63\u89e3\u30c7\u30fc\u30bf\u306elanDeg,ingDeg\u3092\u30ab\u30a6\u30f3\u30c8","47bbe709":"### \ud83d\udd0etrain\u30c7\u30fc\u30bf\u306ecollectionName\u3068phone\u306e\u95a2\u4fc2","86461420":"\u6a19\u6e96\u5316","5ea1ea32":"CV #1: 4.183675011673838","e3fea1c8":"# Feature Generation","9b7e04f1":"1\u79d2\u306e\u305a\u308c\u304c\u3042\u308a\u307e\u3059\u3002","da328d0f":"# \u2460","995d8532":"# \u30c7\u30fc\u30bf\u4f5c\u6210","f4dbcc49":"<pre>\u51fa\u529b\u4f8b<br>\n[           collectionName phoneName  millisSinceGpsEpoch     latDeg  \\ >\n 0     2020-07-17-US-MTV-1       Mi8        1279059935000  37.428281   \n 1     2020-07-17-US-MTV-1       Mi8        1279059936000  37.428281  \n 2     2020-07-17-US-MTV-1       Mi8        1279059937000  37.428281  \n 3     2020-07-17-US-MTV-1       Mi8        1279059938000  37.428281   \n 4     2020-07-17-US-MTV-1       Mi8        1279059939000  37.428281  \n ...                   ...       ...                  ...        ...  \n 2090  2020-07-17-US-MTV-1       Mi8        1279062025000  37.524305   \n 2091  2020-07-17-US-MTV-1       Mi8        1279062026000  37.524305  \n 2092  2020-07-17-US-MTV-1       Mi8        1279062027000  37.524305  \n 2093  2020-07-17-US-MTV-1       Mi8        1279062028000  37.524305   \n 2094  2020-07-17-US-MTV-1       Mi8        1279062029000  37.524305  \n \n           lngDeg  \n 0    -122.072541  \n 1    -122.072541  \n 2    -122.072541  \n 3    -122.072541 \n 4    -122.072541  \n ...          ...  \n 2090 -122.352372  \n 2091 -122.352372 \n 2092 -122.352372  \n 2093 -122.352372  \n 2094 -122.352372  <\/pre>","44b405cf":"# Model Training","0c44757d":"\u5358\u7d14\u306bPandas\u306b\u3044\u308c\u308b\u3068\u3053\u3093\u306a\u5f62\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002","fe403480":"\u3053\u308c\u306f\u5909\u3067\u3059\u3002 \u30e9\u30d9\u30eb \u30c7\u30fc\u30bf\u306f\u3001derived\u30c7\u30fc\u30bf\u3088\u308a\u3082 1 \u79d2\u65e9\u304f\u59cb\u307e\u308a\u307e\u3059\u3002 \u3053\u308c\u306f\u3001dervied\u30c7\u30fc\u30bf\u3068\u30e9\u30d9\u30eb \u30c7\u30fc\u30bf\u3092\u7d50\u5408\u3059\u308b\u3068\u3001\u6700\u521d\u306e 2 \u756a\u76ee\u306bderived\u5217\u306e NaN \u304c\u542b\u307e\u308c\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002 \u5225\u306e\u96fb\u8a71\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","4188fe94":"# \ud83d\udcbcmetadata\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u3093\u3067\u307f\u308b","6ccf7ac9":"### EDA","30d948ac":"\ud83c\udf34\u7a81\u7136\u306e\u750c\u7a74\u3084\u305d\u306e\u4ed6\u306e\u9053\u8def\u306e\u969c\u5bb3\u7269\u306b\u3076\u3064\u304b\u3063\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304b\uff1f\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30a2\u30d7\u30ea\u304c\u3088\u308a\u6b63\u78ba\u306a\u4f4d\u7f6e\u307e\u305f\u306f\u8eca\u7dda\u30ec\u30d9\u30eb\u306e\u7cbe\u5ea6\u3092\u63d0\u4f9b\u3067\u304d\u308b\u3053\u3068\u3092\u671b\u307f\u307e\u3059\u304b\uff1f\u3053\u308c\u3089\u304a\u3088\u3073\u305d\u306e\u4ed6\u306e\u65b0\u3057\u3044\u6a5f\u80fd\u306f\u3001\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306e\u30dd\u30b8\u30b7\u30e7\u30cb\u30f3\u30b0\u30b5\u30fc\u30d3\u30b9\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u6a5f\u68b0\u5b66\u7fd2\u3068\u7cbe\u5ea6\u306eGNSS\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001\u3053\u306e\u7cbe\u5ea6\u3092\u5411\u4e0a\u3055\u305b\u3001\u4f55\u5341\u5104\u3082\u306eAndroid\u643a\u5e2f\u30e6\u30fc\u30b6\u30fc\u306b\u3055\u3089\u306b\u5fae\u8abf\u6574\u3055\u308c\u305f\u6e2c\u4f4d\u4f53\u9a13\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u304c\u671f\u5f85\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30b0\u30ed\u30fc\u30d0\u30eb\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u885b\u661f\u30b7\u30b9\u30c6\u30e0\uff08GNSS\uff09\u306f\u3001GPS\u30c1\u30c3\u30d7\u30bb\u30c3\u30c8\u304c\u4f4d\u7f6e\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3059\u308b\u751f\u306e\u4fe1\u53f7\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u73fe\u5728\u306e\u643a\u5e2f\u96fb\u8a71\u306f\u30013\u301c5\u30e1\u30fc\u30c8\u30eb\u306e\u6e2c\u4f4d\u7cbe\u5ea6\u3057\u304b\u63d0\u4f9b\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u591a\u304f\u306e\u5834\u5408\u4fbf\u5229\u3067\u3059\u304c\u3001\u300c\u30b8\u30e3\u30f3\u30d4\u30fc\u300d\u306a\u4f53\u9a13\u3092\u751f\u307f\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u591a\u304f\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3067\u306f\u3001\u7d50\u679c\u306f\u826f\u597d\u3067\u306f\u306a\u304f\u3001\u4fe1\u983c\u3067\u304d\u308b\u307b\u3069\u5b89\u5b9a\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\nAndroid GPS\u30c1\u30fc\u30e0\u304c\u4e3b\u50ac\u3059\u308b\u3053\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u306f\u3001ION GNSS +2021\u30ab\u30f3\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u767a\u8868\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5f7c\u3089\u306f\u3001\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306eGNSS\u6e2c\u4f4d\u7cbe\u5ea6\u306e\u7814\u7a76\u3092\u9032\u3081\u3001\u4eba\u3005\u304c\u81ea\u5206\u305f\u3061\u306e\u5468\u308a\u306e\u4e16\u754c\u3092\u3088\u308a\u3088\u304f\u30ca\u30d3\u30b2\u30fc\u30c8\u3067\u304d\u308b\u3088\u3046\u652f\u63f4\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u3067\u306f\u3001\u30db\u30b9\u30c8\u30c1\u30fc\u30e0\u306eAndroid\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u304b\u3089\u53ce\u96c6\u3057\u305f\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u3001\u53ef\u80fd\u3067\u3042\u308c\u3070\u30c7\u30b7\u30e1\u30fc\u30c8\u30eb\u307e\u305f\u306f\u30bb\u30f3\u30c1\u30e1\u30fc\u30c8\u30eb\u306e\u89e3\u50cf\u5ea6\u307e\u3067\u4f4d\u7f6e\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\u63d0\u51fa\u7269\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u304a\u3088\u3073\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306b\u3001\u6b63\u78ba\u306a\u30b0\u30e9\u30a6\u30f3\u30c9\u30c8\u30a5\u30eb\u30fc\u30b9\u3001\u751f\u306eGPS\u6e2c\u5b9a\u5024\u3001\u304a\u3088\u3073\u8fd1\u304f\u306eGPS\u30b9\u30c6\u30fc\u30b7\u30e7\u30f3\u304b\u3089\u306e\u652f\u63f4\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\n\n\u6210\u529f\u3059\u308c\u3070\u3001\u3088\u308a\u6b63\u78ba\u306a\u4f4d\u7f6e\u3092\u4f5c\u6210\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u3001\u3088\u308a\u7d30\u304b\u3044\u4eba\u9593\u306e\u884c\u52d5\u306e\u5730\u7406\u7a7a\u9593\u60c5\u5831\u3068\u3001\u306f\u308b\u304b\u306b\u7d30\u304b\u3044\u7c92\u5ea6\u306e\u30e2\u30d0\u30a4\u30eb\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u3068\u306e\u9593\u306e\u63a5\u7d9a\u3092\u6a4b\u6e21\u3057\u3057\u307e\u3059\u3002\u30e2\u30d0\u30a4\u30eb\u30e6\u30fc\u30b6\u30fc\u306f\u3001\u3088\u308a\u826f\u3044\u8eca\u7dda\u30ec\u30d9\u30eb\u306e\u5ea7\u6a19\u3001\u4f4d\u7f6e\u30d9\u30fc\u30b9\u306e\u30b2\u30fc\u30e0\u306e\u30a8\u30af\u30b9\u30da\u30ea\u30a8\u30f3\u30b9\u306e\u5411\u4e0a\u3001\u304a\u3088\u3073\u4ea4\u901a\u5b89\u5168\u306e\u554f\u984c\u306e\u5834\u6240\u306e\u3088\u308a\u9ad8\u3044\u7279\u7570\u6027\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3042\u306a\u305f\u306f\u3042\u306a\u305f\u304c\u884c\u304f\u5fc5\u8981\u304c\u3042\u308b\u3068\u3053\u308d\u306b\u3042\u306a\u305f\u3092\u9023\u308c\u3066\u884c\u304f\u306e\u304c\u3088\u308a\u7c21\u5358\u3067\u3042\u308b\u3053\u3068\u306b\u6c17\u4ed8\u304f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002","2cad808f":"\u306a\u305c\u3053\u306eMultiOutputRegressor\u3092\u4f7f\u3063\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u76ee\u7684\u95a2\u6570\u304c\u8907\u6570\u3042\u308b\u304b\u3089\u3002\n\n\u76ee\u7684\u95a2\u6570\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u3001\u8907\u6570\u306elightGBM\u3092\u5305\u307f\u3053\u3093\u3067\u3042\u3052\u308b\u5f62\u3067\u52d5\u3044\u3066\u304f\u308c\u307e\u3059\u3002","46f4b27f":"# \u2461","3bd565d4":" \n<pre>es = keras.callbacks.EarlyStopping(patience=n_stop, restore_best_weights=True)\nlr = keras.callbacks.LearningRateScheduler(scheduler)\n\ncv = KFold(n_splits=n_fold, shuffle=True, random_state=seed)\n\nP = np.zeros_like(Y, dtype=float)\nP_tst = np.zeros((X_tst.shape[0], output_dim), dtype=float)\n\nfor i, (i_trn, i_val) in enumerate(cv.split(X), 1):\n    print(f'Training for CV #{i}')\n    model = build_model()\n    history = model.fit(X[i_trn], Y[i_trn], validation_data=(X[i_val], Y[i_val]), \n                        epochs=epochs, batch_size=batch_size, callbacks=[es, lr], verbose=0)\n    P[i_val] = label_scaler.inverse_transform(model.predict(X[i_val]))\n    P_tst += label_scaler.inverse_transform(model.predict(X_tst)) \/ n_fold\n    \n    distance_i = calc_haversine(df.latDeg_gt.values[i_val], \n                                df.lngDeg_gt.values[i_val], \n                                P[i_val, 0] + df.latDeg.values[i_val], \n                                P[i_val, 1] + df.lngDeg.values[i_val]).mean()\n    print(f'CV #{i}: {np.percentile(distance_i, [50, 95])}')<\/pre>\n","cee873e5":"## Derived Data Aggregation","f5905b30":"### 0\u304b\u3089\u4f5c\u6210\u3057\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u307e\u3063\u305f\u304f\u89e3\u6cd5\u304c\u308f\u304b\u3089\u305a\u3002\u3084\u3080\u3092\u3048\u305a\u4ed6\u306e\u65b9\u306e\u3082\u306e\u3092\u30b3\u30d4\u30fc\u3057\u3066\u3001\u52c9\u5f37\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u3066\u3044\u307e\u3059\u3002\n### \u5206\u89e3\u3057\u307e\u3057\u305f\u304c\u3001\u304b\u306a\u308a\u5185\u5bb9\u306f\u5c02\u9580\u7684\u3067\u9ad8\u5ea6\u3067\u3059\u3002\n\nthanks https:\/\/www.kaggle.com\/jeongyoonlee\/google-smartphone-decimeter-eda-keras-tpu  Mr.Jeong-Yoon Lee","f8d28484":"## Label Data Aggregation","6884ffa7":"\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0 \u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8 \u30c7\u30fc\u30bf\u306e\u9593\u306b\u91cd\u8907\u3059\u308bmobile-phone\u306f\u306a\u3044\u3067\u3059\u3002","608a3a10":" add.child\u3067\u6570\u5b57\u3092\u3044\u308c\u3066\u3044\u308b","a4922db7":"> \u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u30fc\u3068\u306f\u3001\u904e\u53bb(1\u6642\u523b\u524d)\u306e\u63a8\u5b9a\u5024\u3068\u73fe\u5728\u306e\u30b7\u30b9\u30c6\u30e0\u3078\u306e\u5165\u529b\u304a\u3088\u3073\u30b7\u30b9\u30c6\u30e0\u304b\u3089\u8a08\u6e2c\u3057\u305f\u5024\u304b\u3089\u30b7\u30b9\u30c6\u30e0\u306e\u72b6\u614b\u3092\u63a8\u5b9a\u3059\u308b\u65b9\u6cd5\u306b\u306a\u308a\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u5165\u529b\u306b\u306f\u96d1\u97f3\u304c\u4e57\u3063\u3066\u304a\u308a\u3001\u8a08\u6e2c\u3057\u305f\u5024\u306b\u3082\u96d1\u97f3\u304c\u4e57\u3063\u3066\u3044\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n> \n> \u4f8b\u3048\u3070\u30bb\u30f3\u30b5\u30fc\u3067\u63a1\u53d6\u3057\u305f\u4fe1\u53f7\u306b\u306f\u3001\u5fc5\u305a\u96d1\u97f3\u304c\u6df7\u5165\u3055\u308c\u307e\u3059\u3002\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u30fc\u306f\u3053\u306e\u3088\u3046\u306a\u5b9f\u73fe\u8c61\u306e\u5f71\u97ff\u3092\u52a0\u5473\u3057\u305f\u8003\u3048\u65b9\u3067\u69cb\u7bc9\u3055\u308c\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3001\u78ba\u7387\u7684\u306a\u67a0\u7d44\u307f\u3067\u72b6\u614b\u63a8\u5b9a\u3092\u884c\u3046\u3053\u3068\u3067\u30b7\u30b9\u30c6\u30de\u30c6\u30a3\u30c3\u30af\u306b\u6700\u9069\u8a2d\u8a08\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n> \n> \u307e\u305a\u521d\u3081\u306b\u3001\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u69cb\u7bc9\u3059\u308b\u306b\u3042\u305f\u308a\u3001\u5165\u529b\u304b\u3089\u63a8\u5b9a\u5024\u3092\u7b97\u51fa\u3059\u308b\u305f\u3081\u306b\u3001\u5236\u5fa1\u5bfe\u8c61\u3068\u306a\u308b\u6570\u5b66\u30e2\u30c7\u30eb\u3092\u7b97\u51fa\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059","20a0871e":"\u30c7\u30fc\u30bf\u306f 30 \u5206\u307e\u305f\u306f 1,800 \u79d2\u3067\u3059\u3002 \u305f\u3060\u3057\u3001\u3082\u3063\u3068\u591a\u304f\u306e\u30b5\u30f3\u30d7\u30eb (55K) \u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u308c\u306f\u3001\u6bce\u79d2\u3001\u7570\u306a\u308b\u300cconstellationType\u300d\u3001\u300csvid\u300d\u3001\u304a\u3088\u3073\u300csignalType\u300d\u3092\u6301\u3064\u8907\u6570\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002","9b8d2425":"### \u305d\u306e\u307e\u3093\u307etest\u30c7\u30fc\u30bf\u3092\u5909\u63db\u3057\u3066\u51fa\u3059\u3068\u3069\u3046\u306a\u308b\u306e\uff1f=>7.187\u3068\u3044\u3046\u30b9\u30b3\u30a2\u306b\u306a\u308a\u307e\u3059\u30020\u70b9\u304b\u3068\u601d\u3063\u305f\u3051\u3069\u3001\u30b9\u30b3\u30a2\u3064\u3044\u305f\u3002\n### \u3064\u307e\u308a\u3001\u8aa4\u5dee\u304c\u3067\u304b\u3044\u3068\u3044\u3046\u3053\u3068\u3002grand_truth\u304c\u6b63\u89e3\u306a\u306e\u3067\u305d\u308c\u3092\u5b66\u7fd2\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u3044\u3046\u306e\u304c\u4eca\u56de\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u3060\u3068\u7406\u89e3\u3057\u307e\u3057\u305f\u3002\ud83d\ude0a","79da53ae":"# \ud83d\udd16\u306a\u306b\u3092\u4e88\u6e2c\u3059\u308b\u304b\n\ud83d\udcd4df_test\u306e\u4e2d\u306e\u7b54\u3048\u3058\u3083\u3060\u3081\u306a\u306e\uff1f=>\u3060\u3081\u3067\u3057\u305f\u3002<br>\ntrain\u30c7\u30fc\u30bf\u306e\u4e2d\u306b\u3057\u304b\u306a\u3044grand_truth.csv\u306emillisSinceGpsEpoch\tlatDeg\tlngDeg\u3000\u3092\u4e88\u6e2c\u3059\u308b\u3002","5ed6ec9e":"![image.png](attachment:6106612b-28cc-479a-9277-12c3b6838d12.png)","1dc64b9c":"## Raw Data Aggregation - To Be Updated","4284bdd4":"\u30b3\u30f3\u30b9\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3 \u30bf\u30a4\u30d7\u304c\u300c1\u300d(\u307e\u305f\u306f GPS) \u306e\u5834\u5408\u3001\u540c\u3058\u885b\u661f\u304b\u3089\u306e\u5404\u30a8\u30dd\u30c3\u30af\u306f\u3001\u4fe1\u53f7\u30bf\u30a4\u30d7\u304c\u7570\u306a\u308b\u305f\u3081\u3001\u300ccoorectedPrM\u300d\u304c\u7570\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002","5bdd2203":"### \ud83d\udcbcPixel4_GnssLog.txt\n","189f4b69":"millisSinceGpsEpoch : GPS \u30a8\u30dd\u30c3\u30af (1980\/1\/6 \u5348\u524d 0 \u6642 UTC) \u304b\u3089\u306e\u6574\u6570\u306e\u30df\u30ea\u79d2\u6570\u3002<br>\n<font color=\"#008800\">latDeg\u3001lngDeg : GNSS \u53d7\u4fe1\u6a5f (NovAtel SPAN) \u306b\u3088\u3063\u3066\u63a8\u5b9a\u3055\u308c\u305f WGS84 \u7def\u5ea6\u3001\u7d4c\u5ea6 (10 \u9032\u5ea6)\u3002 \u4f4d\u7f6e\u3092\u4e88\u60f3\u3055\u308c\u308b\u975e\u6574\u6570\u306e\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306b\u5408\u308f\u305b\u308b\u305f\u3081\u306b\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u7dda\u5f62\u88dc\u9593\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002<\/font><br>\nheightAboveWgs84EllipsoidM -:GNSS \u53d7\u4fe1\u6a5f\u306b\u3088\u3063\u3066\u63a8\u5b9a\u3055\u308c\u305f WGS84 \u6955\u5186\u4f53\u4e0a\u306e\u9ad8\u3055 (\u30e1\u30fc\u30c8\u30eb\u5358\u4f4d)\u3002","4da0a0a5":"55K\u884c\u3042\u308a\u307e\u3059\u304c\u3001\u300cground_truth.csv\u300d\u306b\u306f1,740\u884c\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u3002","844b11e5":"\u30a2\u30c9\u30ec\u30b9\u306e\u4e2d\u592e\u5024\u3092\u6307\u5b9a\u3057\u3066\u5730\u56f3\u3092\u8868\u793a","46264ff4":"# Aggregated Data EDA","f46165cf":"<div class=\"alert simple-alert\"><font color=\"black\">\n <b>Competition \u30b4\u30fc\u30eb<\/b> train\u30c7\u30fc\u30bf\u306e\u4e2d\u306b\u3057\u304b\u306a\u3044grand_truth.csv\u306emillisSinceGpsEpoch latDeg lngDeg\u3092\u4e88\u6e2c\u3059\u308b\u3002\n<\/div>","a9a7e88b":"KFold\u3067\u5206\u5272\u3057\u3066\u5b66\u7fd2\u3002build_model\u3092\u6bce\u56de\u3055\u305b\u3066\u521d\u671f\u5316\u3055\u305b\u3066\u3044\u308b\u3002","13ad90e9":"# \uff1c\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\u30e1\u30e2\ud83c\udf3b\uff1e<br>\n\u30fb\u751f\u306eGNSS\u30c7\u30fc\u30bf<br>\ntrain\u3068\u30c6\u30b9\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u306f\u305d\u308c\u305e\u308c\u3001\u3044\u304f\u3064\u304b\u306e\u7570\u306a\u308b\u6a19\u6e96\u5f62\u5f0f\u306e\u751f\u306eGNSS\u30c7\u30fc\u30bf\u3068\u3001\u8aad\u307f\u3084\u3059\u3044derivedcsv\u5f62\u5f0f\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002<br>\n\u3053\u306e\u751f\u306egnss\u30c7\u30fc\u30bf\u3092\u5b8c\u5168\u306b\u7121\u8996\u3057\u3001baseline_\u30d5\u30a1\u30a4\u30eb\u3092\u51e6\u7406\u3059\u308b\u3060\u3051\u3067\u958b\u59cb\u3067\u304d\u307e\u3059\u3002<br>\n<font color=\"orange\">\u751f\u306eGNSS\u306b\u306f\u3001\u500b\u3005\u306e\u885b\u661f\u307e\u3067\u306e\u5b9f\u969b\u306e\u8ddd\u96e2\u3092\u628a\u63e1\u3057\u3001\u305d\u308c\u304c\u7def\u5ea6\/\u7d4c\u5ea6\u306b\u3068\u3063\u3066\u4f55\u3092\u610f\u5473\u3059\u308b\u304b\u3092\u628a\u63e1\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u3059\u3079\u3066\u306e\u57fa\u672c\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u306f\u6df7\u4e71\u3092\u62db\u304f\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff01 \u3060\u304b\u3089\u305d\u3053\u304b\u3089\u59cb\u3081\u306a\u3044\u3067\u304f\u3060\u3055\u3044:)<br>\n\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306fIMU\u30c7\u30fc\u30bf\uff08\u52a0\u901f\u3001\u30b8\u30e3\u30a4\u30ed\u3001\u30de\u30b0\uff09\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u3061\u3087\u3063\u3068\u7d1b\u3089\u308f\u3057\u3044\u3067\u3059-\u751f\u306eGNSS\u885b\u661f\u30c7\u30fc\u30bf\u3068IMU\u30c7\u30fc\u30bf\u306e\u4e21\u65b9\u304c\u540c\u3058\u30d5\u30a1\u30a4\u30eb\u306b\u3042\u308b\u306e\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u6ce8\u610f\u6df1\u304f\u89e3\u6790\u3057\u3066\u3001 \u5fc5\u8981\u306a\u60c5\u5831\u3002<br>\n\u30fbGPS\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u3001\u6700\u521d\u306f\u6c17\u304c\u9060\u304f\u306a\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u591a\u304f\u306e\u30c9\u30e1\u30a4\u30f3\u77e5\u8b58\u3092\u63d0\u793a\u3057\u307e\u3059\u3002 \u3053\u306e\u5206\u91ce\u306b\u4e0d\u6163\u308c\u306a\u5834\u5408\u306f\u3001\u3053\u308c\u3089\u306e\u5c64\u306e\u554f\u984c\u3092\u3001\u8907\u96d1\u3055\u3084\u5fc5\u8981\u306a\u30c9\u30e1\u30a4\u30f3\u77e5\u8b58\u306e\u91cf\u306e\u9806\u306b\u8abf\u3079\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002<\/font><br>\n\u30fb\u3053\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u3067\u306f\u3001\u6642\u9593\u306fmillisSinceGpsEpoch\u3067\u3059\u304c\u3001\u751f\u30c7\u30fc\u30bf\u306e\u6642\u9593\u306futcTimeMillis\u3067\u3059\u3002\n\u4f7f\u7528\u3055\u308c\u308bUTC\u6642\u9593\u306f\u30011970\u5e741\u67081\u65e5\u306b\u958b\u59cb\u3055\u308c\u305fUnix\u6642\u9593\u3067\u3042\u308a\u3001GPS\u6642\u9593\u306f1980\u5e741\u67086\u65e5\u306b\u958b\u59cb\u3055\u308c\u307e\u3057\u305f\u3002\u3057\u305f\u304c\u3063\u3066\u3001UTC\u304b\u3089GPS\u306b\u5909\u63db\u3059\u308b\u306b\u306f\uff1a\nGPS\uff08ms\uff09= UTC\uff08ms\uff09-315964800000\n\u305f\u3060\u3057\u3001\u3053\u308c\u307b\u3069\u7c21\u5358\u306a\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u5404\u885b\u661f\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30b7\u30b9\u30c6\u30e0\u306f\u3046\u308b\u3046\u79d2\u3092\u72ec\u81ea\u306e\u65b9\u6cd5\u3067\u51e6\u7406\u3059\u308b\u305f\u3081\u3001\u3046\u308b\u3046\u79d2\u306b\u6ce8\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u308c\u3089\u3092\u8003\u616e\u306b\u5165\u308c\u308b\u3082\u306e\u3082\u3042\u308c\u3070\u3001\u8003\u616e\u3057\u306a\u3044\u3082\u306e\u3082\u3042\u308a\u3001\u79c1\u305f\u3061\u306e\u96fb\u8a71\u306f\u885b\u661f\u30b3\u30f3\u30b9\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\uff08ConstellationType\uff09\u3092\u983b\u7e41\u306b\u5207\u308a\u66ff\u3048\u308b\u3088\u3046\u3067\u3059\u3002<br>\n\u30fb\u57fa\u672c\u7684\u306b\u30ed\u30b0\u30c7\u30fc\u30bf\u306f\u6700\u521d\u304b\u3089gt_csv\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u306e\u3067\u3001\u8ab0\u304b\u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306b\u30de\u30fc\u30b8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3001\u3053\u308c\u306f\u30da\u30a2\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u6a5f\u80fd\u3059\u308b\u306f\u305a\u3067\u3059-\u96fb\u8a71\uff1a\n\uff08GPS_time_column-start_Baseline_time + 500\uff09\/\/ 1000<br>\n\u30fb{meta\u3001summary\u3001geospatial}\u30c7\u30fc\u30bf\u306e\u63a2\u7d22\u3068\u3001\u4e0a\u4f4d\u306eEDA\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306e\u8aad\u307f\u53d6\u308a\u306b\u6642\u9593\u3092\u8cbb\u3084\u3059\u3053\u3068\u306f\u3001\u8907\u96d1\u306a\u5730\u7406\u7a7a\u9593\u30c7\u30fc\u30bf\u306e\u51e6\u7406\u65b9\u6cd5\u3092\u5b66\u3076\u4e0a\u3067\u9593\u9055\u3044\u306a\u304f\u6709\u76ca\u3067\u3059\u3002\n\u30fb\u6a5f\u68b0\u5b66\u7fd2\u304c\u5c11\u306a\u3044\n-\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff08\u4e3b\u306b\u52fe\u914d\u30d6\u30fc\u30b9\u30c8\u3055\u308c\u305f\u30de\u30b7\u30f3\u3068\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u53c2\u7167\uff09\u306f\u3001\u307b\u307c\u3059\u3079\u3066\u306ekaggle\u30c1\u30e3\u30ec\u30f3\u30b8\u3067\u9593\u9055\u3044\u306a\u304f\u5f79\u7acb\u3061\u307e\u3059\u3002\u305d\u3046\u306f\u8a00\u3063\u3066\u3082\u3001\u3053\u306e\u30c7\u30fc\u30bf\u3092\u64cd\u4f5c\u3059\u308b\u3068\u304d\u306f\u3001baseline_locations_test\u30d5\u30a1\u30a4\u30eb\u306blatDeg\u5217\u3068lngDeg\u5217\u304c\u3042\u308a\u3001\u9001\u4fe1\u30d5\u30a1\u30a4\u30eb\u306b\u914d\u7f6e\u3059\u308b\u3068\u3001\u3059\u3067\u306b\u7d047.19\u306e\u304b\u306a\u308a\u826f\u3044\u30b9\u30b3\u30a2\u304c\u751f\u6210\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\u3053\u306e\u305f\u3081\u3001\u4ed6\u306e\u5f8c\u51e6\u7406\u6280\u8853\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u3088\u308a\u3082\u4fa1\u5024\u306e\u3042\u308b\u7d50\u679c\u3092\u751f\u307f\u51fa\u3059\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002<br>\n-<u>\u5916\u308c\u5024\u3092\u4fee\u6b63\u3059\u308b<\/u><br>\n\u6642\u7cfb\u5217\u30d1\u30b9\u306e\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u5916\u308c\u5024\u306e\u4fee\u6b63\u306f\u7279\u306b\u6709\u7528\u3067\u3042\u308a\u3001\u304a\u305d\u3089\u304f\u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u306e1\u3064\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\u30ea<br>\n-\u5e73\u6ed1\u5316\u30c7\u30fc\u30bf\u3068\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u30fc<br>\n<u>\u30c7\u30fc\u30bf\u5e73\u6ed1\u5316\u306f\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u30ce\u30a4\u30ba\u3092\u9664\u53bb\u3057\u307e\u3059\u3002<\/u>\u3053\u308c\u306f\u3001GPS\u30c7\u30fc\u30bf\u3092\u64cd\u4f5c\u3059\u308b\u3068\u304d\u306b\u975e\u5e38\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\u672c\u5f53\u306b\u5f37\u529b\u306a\u65b9\u6cd5\u306f\u3001\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u30fc\u3067\u3059\uff08\u4f8b\u306f\u30ea\u30f3\u30af\u3055\u308c\u3066\u3044\u307e\u3059\uff09\u3002\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u30fc\u306b\u306f\u8907\u6570\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u3001\u30ab\u30eb\u30de\u30f3\u4ee5\u5916\u306b\u3082\u4ed6\u306e\u5f62\u5f0f\u306e\u5e73\u6ed1\u5316\u304c\u3042\u308b\u305f\u3081\u3001\u591a\u304f\u306e\u7a2e\u985e\u306e\u30c7\u30fc\u30bf\u5e73\u6ed1\u5316\u3092\u8a66\u3059\u3053\u3068\u3092\u5f37\u304f\u304a\u52e7\u3081\u3057\u307e\u3059\u3002<br>\n-\u5f8c\u51e6\u7406<br>\n\u30c7\u30fc\u30bf\u306e\u5e73\u6ed1\u5316\u4ee5\u5916\u306b\u4f7f\u7528\u3067\u304d\u308b\u5f8c\u51e6\u7406\u306b\u306f\u3001\u4ed6\u306b\u3082\u3044\u304f\u3064\u304b\u306e\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002\u5730\u7406\u7a7a\u9593\u30c7\u30fc\u30bf\u306e\u5f8c\u51e6\u7406\u306b\u3064\u3044\u3066\u8aad\u3080\u3068\u3001\u512a\u4f4d\u306b\u7acb\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002<br>","1398c470":"![image.png](attachment:47764433-862e-4332-877d-5a233aa3c027.png)","1fb1031c":"![image.png](attachment:b3c88584-1184-48d0-9cf5-a997cd4ae91f.png)","35fc0b8e":" \u3053\u3053\u3067\u5730\u56f3\u3068heatmap\u3092\u5408\u6210\u3057\u3066\u3044\u308b\u3002","e13cb53f":"<font color=\"orange\">utcTimeMillis : UTC \u30a8\u30dd\u30c3\u30af (1970\/1\/1) \u304b\u3089\u306e\u30df\u30ea\u79d2\u3001GnssClock \u304b\u3089\u5909\u63db<\/font><br>\nTimeNanos - \u30ca\u30ce\u79d2\u5358\u4f4d\u306e GNSS \u53d7\u4fe1\u6a5f\u306e\u5185\u90e8\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2 \u30af\u30ed\u30c3\u30af\u5024\u3002<br>\nLeapSecond - \u30af\u30ed\u30c3\u30af\u306e\u6642\u9593\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f\u3046\u308b\u3046\u79d2\u3002<br>\nTimeUncertaintyNanos - \u30af\u30ed\u30c3\u30af\u306e\u6642\u9593\u306e\u4e0d\u78ba\u5b9f\u6027 (1 \u30b7\u30b0\u30de) (\u30ca\u30ce\u79d2\u5358\u4f4d)\u3002<br>\nFullBiasNanos - GPS \u53d7\u4fe1\u6a5f\u5185\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2 \u30af\u30ed\u30c3\u30af getTimeNanos() \u3068\u30011980 \u5e74 1 \u6708 6 \u65e5\u306e 0000Z \u4ee5\u964d\u306e\u5b9f\u969b\u306e G\u200b\u200bPS \u6642\u9593\u3068\u306e\u5dee (\u30ca\u30ce\u79d2\u5358\u4f4d)\u3002<br>\nBiasNanos - \u30af\u30ed\u30c3\u30af\u306e\u30b5\u30d6\u30ca\u30ce\u79d2\u30d0\u30a4\u30a2\u30b9\u3002<br>\nBiasUncertaintyNanos - \u30af\u30ed\u30c3\u30af\u306e\u30d0\u30a4\u30a2\u30b9\u306e\u4e0d\u78ba\u5b9f\u6027 (1 \u30b7\u30b0\u30de) (\u30ca\u30ce\u79d2\u5358\u4f4d)\u3002<br>\nDriftNanosPerSecnd - \u30af\u30ed\u30c3\u30af\u306e\u30c9\u30ea\u30d5\u30c8 (\u30ca\u30ce\u79d2\/\u79d2)\u3002<br>\nDriftUncertaintyNanosPerSecond - \u30af\u30ed\u30c3\u30af\u306e\u30c9\u30ea\u30d5\u30c8\u306e\u4e0d\u78ba\u5b9f\u6027 (1 \u30b7\u30b0\u30de) (\u30ca\u30ce\u79d2\/\u79d2)\u3002<br>\nHardwareClockDiscontinuityCount - \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2 \u30af\u30ed\u30c3\u30af\u306e\u4e0d\u9023\u7d9a\u6027\u306e\u6570\u3002<br>\n<font color=\"orange\">Svid - \u30b5\u30c6\u30e9\u30a4\u30c8 ID\u3002\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002https:\/\/developer.android.com\/reference\/android\/location\/GnssMeasurement#getSvid%28%29<\/font><br>\n-\u3053\u306esvid\u306f\u3001\u307b\u3068\u3093\u3069\u306e\u30b3\u30f3\u30b9\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7591\u4f3c\u4e71\u6570\u3067\u3059\u3002 Glonass\u306eFCN\uff06OSN\u756a\u53f7\u3067\u3059\u3002<br>\nTimeOffsetNanos - \u6e2c\u5b9a\u5024\u304c\u30ca\u30ce\u79d2\u5358\u4f4d\u3067\u53d6\u5f97\u3055\u308c\u305f\u6642\u9593\u30aa\u30d5\u30bb\u30c3\u30c8\u3002<br>\nstate - \u30b5\u30c6\u30e9\u30a4\u30c8\u306e\u540c\u671f\u72b6\u614b\u3092\u793a\u3059\u6574\u6570\u3002\u6574\u6570\u306e\u5404\u30d3\u30c3\u30c8\u306f\u3001\u6e2c\u5b9a\u306e\u7279\u5b9a\u306e\u72b6\u614b\u60c5\u5831\u306b\u5c5e\u3057\u307e\u3059\u3002\u30d3\u30c3\u30c8\u3068\u72b6\u614b\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u306b\u3064\u3044\u3066\u306f\u3001metadata\/raw_state_bit_map.json \u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002<br>\n<u>ReceivedSvTimeNanos - \u6e2c\u5b9a\u6642\u306b\u53d7\u4fe1\u3057\u305f GNSS \u885b\u661f\u6642\u9593 (\u30ca\u30ce\u79d2\u5358\u4f4d)\u3002<\/u><br>\nReceivedSvTimeUncertaintyNanos - \u53d7\u4fe1\u3057\u305f GNSS \u6642\u9593\u306e\u30a8\u30e9\u30fc\u63a8\u5b9a\u5024 (1 \u30b7\u30b0\u30de) (\u30ca\u30ce\u79d2\u5358\u4f4d)\u3002<br>\nCn0DbHz - dB-Hz \u5358\u4f4d\u306e\u642c\u9001\u6ce2\u5bfe\u96d1\u97f3\u5bc6\u5ea6\u3002<br>\nPseudorangeRateMetersPerSecond - \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3067\u306e\u64ec\u4f3c\u8ddd\u96e2\u30ec\u30fc\u30c8 (m\/s)\u3002<br>\nPseudorangeRateUncertaintyMetersPerSecond - \u64ec\u4f3c\u8ddd\u96e2\u306e\u30ec\u30fc\u30c8\u306e\u4e0d\u78ba\u5b9f\u6027 (1 \u30b7\u30b0\u30de) (m\/s)\u3002<br>\nAccumulatedDeltaRangeState - \u3053\u308c\u306f\u3001\u300c\u7d2f\u7a4d\u30c7\u30eb\u30bf\u7bc4\u56f2\u300d\u6e2c\u5b9a\u306e\u72b6\u614b\u3092\u793a\u3057\u307e\u3059\u3002\u6574\u6570\u306e\u5404\u30d3\u30c3\u30c8\u306f\u3001\u6e2c\u5b9a\u306e\u72b6\u614b\u306b\u5c5e\u6027\u3057\u307e\u3059\u3002\u30d3\u30c3\u30c8\u3068\u72b6\u614b\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u306b\u3064\u3044\u3066<br>AccumulatedDeltaRangeState - \u3053\u308c\u306f\u3001\u300c\u7d2f\u7a4d\u30c7\u30eb\u30bf\u7bc4\u56f2\u300d\u6e2c\u5b9a\u306e\u72b6\u614b\u3092\u793a\u3057\u307e\u3059\u3002\u6574\u6570\u306e\u5404\u30d3\u30c3\u30c8\u306f\u3001\u6e2c\u5b9a\u306e\u72b6\u614b\u306b\u5c5e\u6027\u3057\u307e\u3059\u3002\u30d3\u30c3\u30c8\u3068\u72b6\u614b\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u306b\u3064\u3044\u3066\u306f\u3001metadata\/accumulated_delta_range_state_bit_map.json \u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3002<br>\nAccumulatedDeltaRangeMeters - \u6700\u5f8c\u306e\u30c1\u30e3\u30cd\u30eb \u30ea\u30bb\u30c3\u30c8\u4ee5\u964d\u306e\u7d2f\u7a4d\u30c7\u30eb\u30bf\u7bc4\u56f2 (\u30e1\u30fc\u30c8\u30eb\u5358\u4f4d)\u3002<br>\nAccumulatedDeltaRangeUncertaintyMeters - \u30e1\u30fc\u30c8\u30eb\u5358\u4f4d\u306e\u7d2f\u7a4d\u30c7\u30eb\u30bf\u7bc4\u56f2\u306e\u4e0d\u78ba\u5b9f\u6027 (1 \u30b7\u30b0\u30de)\u3002<br>\nCarrierFrequencyHz - \u8ffd\u8de1\u3055\u308c\u305f\u4fe1\u53f7\u306e\u30ad\u30e3\u30ea\u30a2\u5468\u6ce2\u6570\u3002<br>\nCarrierCycles - \u885b\u661f\u3068\u53d7\u4fe1\u6a5f\u306e\u9593\u306e\u5b8c\u5168\u306a\u30ad\u30e3\u30ea\u30a2 \u30b5\u30a4\u30af\u30eb\u306e\u6570\u3002\u3053\u308c\u3089\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306f Null \u3067\u3059\u3002<br>\nCarrierPhase - \u53d7\u4fe1\u6a5f\u306b\u3088\u3063\u3066\u691c\u51fa\u3055\u308c\u305f RF \u4f4d\u76f8\u3002\u3053\u308c\u3089\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306f Null \u3067\u3059\u3002<br>\nCarrierPhaseUncertainty - \u30ad\u30e3\u30ea\u30a2 \u30d5\u30a7\u30fc\u30ba\u306e\u4e0d\u78ba\u5b9f\u6027 (1 \u30b7\u30b0\u30de)\u3002\u3053\u308c\u3089\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306f Null \u3067\u3059\u3002<br>\nMultipathIndicator - \u30a4\u30d9\u30f3\u30c8\u306e\u300c\u30de\u30eb\u30c1\u30d1\u30b9\u300d\u72b6\u614b\u3092\u793a\u3059\u5024\u3002<br>\nSnrInDb - (\u76f8\u95a2\u304a\u3088\u3073\u7a4d\u5206\u5f8c\u306e) \u4fe1\u53f7\u5bfe\u96d1\u97f3\u6bd4 (SNR) (dB)\u3002<br>\nConstellationType - GNSS \u30b3\u30f3\u30b9\u30bf\u30ec\u30fc\u30b7\u30e7\u30f3 \u30bf\u30a4\u30d7\u3002\u3053\u308c\u306f\u6574\u6570\u3067\u3042\u308a\u3001\u6587\u5b57\u5217\u5024\u3078\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u306f constellation_type_mapping.csv \u30d5\u30a1\u30a4\u30eb\u3067\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002<br>\nAgcDb - dB \u5358\u4f4d\u306e\u81ea\u52d5\u30b2\u30a4\u30f3\u5236\u5fa1\u30ec\u30d9\u30eb\u3002\n","d88f48a8":"\u540c\u3058\u885b\u661f\u304b\u3089\u306e\u300cGPS_L1\u300d\u306e\u4fe1\u53f7\u30bf\u30a4\u30d7\u3092\u8003\u3048\u308b\u3068\u3001\u5404\u30a8\u30dd\u30c3\u30af\u306f\u30e6\u30cb\u30fc\u30af\u3067\u3059\u3002","f7a5df51":"\u30c7\u30fc\u30bf\u306e\u8aac\u660e\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001\u300ccorrectedPrM\u300d\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n```\n\u4fee\u6b63\u3055\u308c\u305fPrM = rawPrM + satClkBiasM - isrbM -ionoDelayM - tropoDelayM\n```\n\u300c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u4f4d\u7f6e\u306f\u3001\u6a19\u6e96\u306e\u52a0\u91cd\u6700\u5c0f\u4e8c\u4e57 (WLS) \u30bd\u30eb\u30d0\u30fc\u3092\u4f7f\u7528\u3057\u3066\u3001\u88dc\u6b63\u3055\u308c\u305fPrM \u3068\u885b\u661f\u306e\u4f4d\u7f6e\u3092\u4f7f\u7528\u3057\u3066\u8a08\u7b97\u3055\u308c\u307e\u3059\u3002\u96fb\u8a71\u306e\u4f4d\u7f6e (x\u3001y\u3001z)\u3001\u30af\u30ed\u30c3\u30af \u30d0\u30a4\u30a2\u30b9 (t)\u3001\u304a\u3088\u3073\u5404\u56fa\u6709\u306e\u4fe1\u53f7\u30bf\u30a4\u30d7\u306e isrbM \u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u300d\n"}}