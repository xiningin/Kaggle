{"cell_type":{"5edc1bc5":"code","250d17eb":"code","f0ae12af":"code","c7b5354b":"code","7b42c7bd":"code","7abfdcd5":"code","788af0d6":"code","5880d524":"code","9906e971":"code","fe1b77b6":"code","d5640676":"code","28df22f0":"code","fc8b3dc9":"code","8841f6f7":"code","0791565d":"code","7c54fb40":"code","2d715a16":"code","ddc6e9b8":"code","339f8d7b":"code","be9ab56a":"code","e711f1f7":"code","f2a07805":"code","602754d1":"code","f6ddd428":"code","48fc9c2a":"code","87b4160a":"code","a5c23444":"code","566d74ad":"code","68b1ae5a":"code","b8c1752d":"code","dbcb63bd":"code","17bafef3":"code","5f31085d":"code","1ce11bf7":"code","f84e1d57":"code","5b8ee201":"code","4e3b2f5e":"code","9adbd713":"code","74d4616a":"code","2a663eaa":"code","90c795b4":"code","0a73f0bf":"markdown","d187fddc":"markdown","b24e189f":"markdown","39bd0a8b":"markdown","685186eb":"markdown","50212886":"markdown","6615d3e0":"markdown","4fea55ee":"markdown","322b6000":"markdown","b096aeb5":"markdown","56ec0afa":"markdown","da1addae":"markdown","60ff5f0f":"markdown","9021e10e":"markdown","0b96ff88":"markdown","73b3ccd7":"markdown"},"source":{"5edc1bc5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","250d17eb":"pd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom scipy.stats import norm\nimport numpy as np\nimport sys\nimport math","f0ae12af":"# import machine learning libraries from sklearn (Decision Tree & Random Forest)\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\n# for splitting data into training and testing\nfrom sklearn.model_selection import train_test_split\n\n# for measuring the efficiency of the model\nfrom sklearn.metrics import mean_absolute_error\n\n# importing XGBoost API\nfrom xgboost import XGBRegressor\n\n# importing the cross validation library\nfrom sklearn.model_selection import cross_val_score\n\n# importing linear regression API\nfrom sklearn.linear_model import LinearRegression","c7b5354b":"file_path = \"\/kaggle\/input\/ipl-dataset2008-may-2021\/ball_by_ball.csv\"\nfile = pd.read_csv(file_path)\nfile = file.dropna()","7b42c7bd":"# Adding a column to record a loss of a wicket\nfile['dismissal_kind'] = file['dismissal_kind'].replace(' ',1)\n\ndismissals =[]\nfor i in file.index: \n    if file.loc[i,'dismissal_kind'] == 1:\n        dismissals.append(0)\n    else:\n        dismissals.append(1)\n\nfile['Wicket_Lost'] = dismissals","7abfdcd5":"features = ['Match_id','Over','delivery','total_runs','Wicket_Lost']\nfile_inn1 = file[features].loc[file.Inning==1]\nfile_inn1['Inn_Score_atm'] = file_inn1.groupby('Match_id').total_runs.cumsum()\nfile_inn1['Inn_Wicks_atm'] = file_inn1.groupby('Match_id').Wicket_Lost.cumsum()","788af0d6":"m1_id = file_inn1.groupby(['Match_id']).Inn_Score_atm.idxmax()\nfeatures1 = ['Match_id','Inn_Score_atm','Inn_Wicks_atm','Over']\nmatch_1 = file_inn1.loc[m1_id,features1]\nmatch_1 = match_1.rename(columns={'Inn_Score_atm': 'Final_Inning_Score'})\nmatch_1 = match_1.rename(columns={'Inn_Wicks_atm': 'Final_Wickets_Lost'})\nmatch_1 = match_1.rename(columns={'Over': 'Max_over_played'})","5880d524":"# to avoid selecting matches affected by rain and couldn't complete an ideal 20 overs\n# let's take all the matches which managed to bat until a minumum of 16 overs or lost more than 8 wickets\n\n# matches omitted from the model due to far from incomplete innings\n# match.loc[((match.Max_over_played < 16)) & (match.Final_Wickets_Lost <= 8)]\n\nmatch_1 = match_1.loc[((match_1.Max_over_played >= 16) & (match_1.Final_Wickets_Lost != 10)) |\n                      (match_1.Final_Wickets_Lost > 8)]","9906e971":"# obtaining details about each over in the 1st innings as file_over1 database\n\na_id = file_inn1.groupby(['Match_id','Over']).delivery.idxmax()\nfeatures2 = ['Match_id','Over','Inn_Score_atm','Inn_Wicks_atm']\nfile_over1 = file_inn1.loc[a_id,features2]\n\n# Run Rate at the end of each over of the 1st innings\nfile_over1['R_Rate_atm'] = round((file_over1.Inn_Score_atm \/ file_over1.Over),2)\n\n# Average Patnership Score (Total Runs Scored\/(No of Wickets + 1)) at the end of each over of 1st innings\nfile_over1['Ptnr_Avg_atm'] = round((file_over1.Inn_Score_atm \/ (file_over1.Inn_Wicks_atm+1)),2)\n\n# Average Strike Rate of Wickets falling or No of balls on average a partnership stayed \n# (Total no of balls played \/ (No of wickets +1))\nfile_over1['Ptnr_Balls_atm'] = round(((file_over1.Over*6) \/ (file_over1.Inn_Wicks_atm+1)),2)\n\n# Runs and Wickets Lost in the last 3 recent overs of the innings\nfile_over1['L3_Runs'] = file_over1.Inn_Score_atm - file_over1.Inn_Score_atm.shift(3)     \nfile_over1['L3_Wicks'] = file_over1.Inn_Wicks_atm - file_over1.Inn_Wicks_atm.shift(3)   ","fe1b77b6":"# The final database we use for our data prediction\n\nbase_data_i1 = match_1.set_index(\"Match_id\").join(file_over1.set_index(\"Match_id\"))\nbase_data_i1['Runs_to_be_Scored'] = base_data_i1['Final_Inning_Score'] - base_data_i1['Inn_Score_atm']\nbase_data_i1 = base_data_i1.loc[base_data_i1.Over > 3]","d5640676":"features = ['Match_id','Over','delivery','total_runs','Wicket_Lost']\nfile_inn2 = file[features].loc[file.Inning == 2]\nfile_inn2['Inn_Score_atm'] = file_inn2.groupby('Match_id').total_runs.cumsum()\nfile_inn2['Inn_Wicks_atm'] = file_inn2.groupby('Match_id').Wicket_Lost.cumsum()\nfile_inn2 = file_inn2.sort_values(by=['Match_id','Over'])","28df22f0":"m2_id = file_inn2.groupby(['Match_id']).Inn_Score_atm.idxmax()\nfeatures1 = ['Match_id','Inn_Score_atm','Inn_Wicks_atm','Over']\nmatch_2 = file_inn2.loc[m2_id,features1]\nmatch_2 = match_2.rename(columns={'Inn_Score_atm': 'Final_Inning_Score'})\nmatch_2 = match_2.rename(columns={'Inn_Wicks_atm': 'Final_Wickets_Lost'})\nmatch_2 = match_2.rename(columns={'Over': 'Max_over_played'})\nmatch_2['matchid'] = match_2['Match_id']\nmatch_2 = match_2.sort_values(by='Match_id')","fc8b3dc9":"# target to chase for each match \n# extarct from match_1 table\ntarg = pd.DataFrame({'Match_id' : match_1['Match_id'], 'Target' : (match_1['Final_Inning_Score'] + 1)})\ntarg = targ.sort_values(by='Match_id')","8841f6f7":"# obtaining details about each over in the 2nd innings as file_over2 database\n\nb_id = file_inn1.groupby(['Match_id','Over']).delivery.idxmax()\nfeatures2 = ['Match_id','Over','Inn_Score_atm','Inn_Wicks_atm']\nfile_over2 = file_inn1.loc[b_id,features2]\n\n# Run Rate at the end of each over of the 2nd innings\nfile_over2['R_Rate_atm'] = round((file_over2.Inn_Score_atm \/ file_over2.Over),2)\n\n# Average Patnership Score (Total Runs Scored\/(No of Wickets + 1)) at the end of each over of 2nd innings\nfile_over2['Ptnr_Avg_atm'] = round((file_over2.Inn_Score_atm \/ (file_over2.Inn_Wicks_atm+1)),2)\n\n# Average Strike Rate of Wickets falling or No of balls on average a partnership stayed \n# (Total no of balls played \/ (No of wickets +1))\nfile_over2['Ptnr_Balls_atm'] = round(((file_over2.Over*6) \/ (file_over2.Inn_Wicks_atm+1)),2)\n\n# Runs and Wickets Lost in the last 3 recent overs of the innings\nfile_over2['L3_Runs']  = file_over2.Inn_Score_atm - file_over2.Inn_Score_atm.shift(3)     \nfile_over2['L3_Wicks'] = file_over2.Inn_Wicks_atm - file_over2.Inn_Wicks_atm.shift(3)   \n\nfile_over2 = file_over2.loc[file_over2.Over > 3]","0791565d":"# combining matches and over information\n\nbase_data_i2 = match_2.set_index(\"Match_id\").join(file_over2.set_index(\"Match_id\"))\n\n# combining the target into the inn2 data\n\nbase_data_i2 = base_data_i2.set_index(\"matchid\").join(targ.set_index(\"Match_id\"))\nbase_data_i2 = base_data_i2.rename_axis(\"Match_id\", axis='rows')","7c54fb40":"# obtaining information based on Target and Required Rate to win\n\nbase_data_i2['Runs_to_Target'] = base_data_i2['Target'] - base_data_i2['Inn_Score_atm']\nbase_data_i2['Required_Rate'] = round((base_data_i2['Runs_to_Target'] \/ (20 - base_data_i2['Over'])),2)\n\n# information based runs scored\n\nbase_data_i2['Runs_to_be_Scored'] = base_data_i2['Final_Inning_Score'] - base_data_i2['Inn_Score_atm']","2d715a16":"# limits of data to be used \n\nbase_data_i2 = base_data_i2.loc[base_data_i2.Over > 3]\nbase_data_i2 = base_data_i2.loc[base_data_i2.Over < 20]\nbase_data_i2 = base_data_i2.loc[base_data_i2.Runs_to_Target > 0]\nbase_data_i2 = base_data_i2.rename_axis(\"Match_id\", axis='rows')","ddc6e9b8":"# function to obatin inputs for calculation\ndef input_t20_i1():\n    \n    global input_data\n    \n    # obtaining inputs for the predictor\n    receive_over_t20()         # no of overs played yet\n    receive_runs()             # no of runs scored in the innings yet\n    \n    # calculating other variables such as Run Rate(input_RunR) to displayed to user\n    input_RunR = round((input_runs\/input_over),2)\n    print(\">> Current Run Rate : \" + str(input_RunR) )\n    \n    receive_wick()         # no of wickets lost in the innings yet\n    receive_L3Ws()         # no of wickets lost in the last 3 overs\n    receive_L3Rs()         # no of runs scores in the last 3 overs\n    \n    # calculating other variables - Partnership Average(input_pAvg)\n    input_PAvg = round((input_runs\/(input_wick + 1)),2)\n    \n    # placing input data into a dataframe\n    input_data = pd.DataFrame( {'over' : [input_over] , 'Inn_Score_atm' : [input_runs] , 'Inn_Wicks_atm': [input_wick],\n                               'R_Rate_atm': [input_RunR] ,  'Ptnr_Avg_atm': [input_PAvg] , 'L3_Wicks': [input_L3Ws],\n                               'L3_Runs': [input_L3Rs] })\n    \n    # calling out the next function to obtain data from base_data\n    # using input_over & input_wick for the inputs\n    obtain_data_t20_i1(input_over, input_wick)","339f8d7b":"# function to receive no of overs played in the innings (input_over)\ndef receive_over_t20():\n    \n    # placing input_over as a gobal variable\n    global input_over\n    \n    # statement to receive input_over \n    input_over = int(input(\"Enter number of Overs completed : \"))\n    \n    # validating input_over variable \n    if input_over > 0:\n        if input_over >= 5:\n            if input_over < 20:\n                pass\n            elif input_over == 20:\n                print(\">>!! Innings completed. Input a number for overs from 5 to 19.\")\n                print(' ')\n                sys.exit()\n            else:\n                print(\">>!! Invalid over. Input a number for overs from 5 to 19.\")\n                print(' ')\n                sys.exit()\n        else:\n            print(\">>!! Over inputted is to early to make a prediction. Reinput data from the 5th over onwards\")\n            print(' ')\n            sys.exit()\n    else:\n        print(\">>!! Invalid over. Input a number for overs from 5 to 19.\")\n        print(' ')\n        sys.exit()\n        \n    # output to receive_input function\n    return input_over","be9ab56a":"# function to receive no of wickets lost in the innings (input_wick)\ndef receive_wick():\n    \n    # placing input_wick as a gobal variable\n    global input_wick\n    \n    # statement to receive input_wick\n    input_wick = int(input(\"Enter number of Wickets Lost : \"))\n    \n    # validating input_wick\n    if input_wick >= 0:\n        if input_wick < 10:\n            pass\n        elif input_wick == 10:\n            print(\">>!! Batting team All Out.\")\n            print(' ')\n            sys.exit()\n        else:\n            print(\">>!! Invalid number of wickets. Input a number from 0 to 9.\")\n            print(' ')\n            sys.exit()\n    else:\n        print(\">>!! Invalid number of wickets. Input a number from 0 to 9.\")\n        print(' ')\n        sys.exit()\n    \n    # output to receive_input function\n    return input_wick","e711f1f7":"# function to receive no of runs scored in the innings currently (input_runs)\ndef receive_runs():\n    \n    # placing input_runs as a global variable\n    global input_runs\n    \n    # statement to recive input_runs\n    input_runs = int(input(\"Enter runs scored in innings currently : \"))\n    \n    # validating input_runs\n    if input_runs < 0:\n        print(\">>!! Invalid amount of runs.\")\n        print(' ')\n        sys.exit()\n    \n    # output to receive_input function\n    return input_runs","f2a07805":"# function to receive no of wickets lost in the last 3 overs played in the innings (input_L3Ws)\ndef receive_L3Ws():\n    \n    # placing input_L3Ws as a global variable\n    global input_L3Ws\n    \n    # statement to recive input_L8Ws\n    input_L3Ws = int(input(\"Enter number of wickets lost in previous 3 overs : \"))\n    \n    # validating input_L3Ws\n    if input_L3Ws > input_wick:\n        print(\">>!! No of Wickets lost in the last 3 overs cannot be more than the total no of Wickets lost in the innings.\")\n        print(\">>!! Input a number less than or equal to \" + str(input_wick))\n        print(' ')\n        sys.exit()\n    else:\n        pass\n    # output to receive_input function\n    return input_L3Ws","602754d1":"# function to receive no of runs scored in the last 3 overs played in the innings (input_L3Rs)\ndef receive_L3Rs():\n    \n    # placing input_L3Rs as a global variable\n    global input_L3Rs\n    \n    # statement to receive input_L3Sc to calcualte input_L8Rs\n    input_L3Sc = int(input(\"Enter the Innings Total at the end of over no. \" + str(input_over - 3) + \" : \"))\n    \n    # validating input_L3Sc\n    if input_L3Sc > input_runs:\n        print(\">>!! No of Runs Scored in the last 3 overs cannot be more than the total no of Runs Scored in the innings.\")\n        print(\">>!! Input a number less than (or equal) to \" + str(input_runs))\n        print(' ')\n        sys.exit()\n    else:\n        pass\n    \n    # calculating input_L3Rs\n    input_L3Rs = input_runs - input_L3Sc\n    print(\">> Last 3 overs : \" + str(input_L3Rs) + \"\/\" + str(input_L3Ws))\n    print(\" \")\n    \n    # output to receive_input function\n    return input_L3Rs","f6ddd428":"def obtain_data_t20_i1(input_over, input_wick):\n    global overs_req\n    global wicks_req\n    global data_base\n    \n    # our base dataframe is base_data_i1\n    \n    # required rows of data to model fromwhich are played within +\/- 3 overs of the input_over\n    overs_req = (\n                 (base_data_i1.Over == (input_over-3)) | (base_data_i1.Over == (input_over-2)) | \n                 (base_data_i1.Over == (input_over-1)) | (base_data_i1.Over == (input_over+0)) | \n                 (base_data_i1.Over == (input_over+1)) | (base_data_i1.Over == (input_over+2)) | \n                 (base_data_i1.Over == (input_over+3))\n                )\n    \n    # required rows of data to model from which are played having lost +\/- 1 wicket of the input_wick\n    wicks_req = ((base_data_i1.Inn_Wicks_atm == (input_wick-1)) | (base_data_i1.Inn_Wicks_atm == (input_wick)) |\n                 (base_data_i1.Inn_Wicks_atm == (input_wick+1))\n                )\n    # required rows of data to model from which the same number of wickets have been lost in the preceeding 3 overs\n    L3WLs_req = base_data_i1.L3_Wicks == input_L3Ws\n    \n    # required rows of data to model from which the similar run scoring in the preceeding 3 overs\n    L3RSc_req = ((base_data_i1.L3_Runs == (input_L3Rs-3)) | (base_data_i1.L3_Runs == (input_L3Rs-2)) |\n                 (base_data_i1.L3_Runs == (input_L3Rs-1)) | (base_data_i1.L3_Runs == (input_L3Rs-0)) |\n                 (base_data_i1.L3_Runs == (input_L3Rs+1)) | (base_data_i1.L3_Runs == (input_L3Rs+2)) |\n                 (base_data_i1.L3_Runs == (input_L3Rs+3))\n                )\n    \n    # extracting required data from the either of the two criteria above\n    data_base = base_data_i1.loc[ overs_req | wicks_req | L3WLs_req | L3RSc_req ] \n    \n    print(' ')\n    print('>> Calculating from ' + str(data_base.Over.count()) + ' similar instances.')\n    \n    #calling out the next function\n    select_features_i1(data_base)","48fc9c2a":"def select_features_i1(data_base):\n    \n    # independent and input variables features\n    x_features = ['Over','Inn_Score_atm','Inn_Wicks_atm','R_Rate_atm','Ptnr_Avg_atm','L3_Wicks','L3_Runs']\n    X = data_base[x_features]\n    \n    # target variable \n    y = data_base.Runs_to_be_Scored\n    \n    #calling out the next function\n    XGB_model = data_modelling(X,y)\n    \n    #calling out the next function\n    (expected_runs, err) = obtain_error(XGB_model,X,y)\n    \n    #calling out next function\n    design_output_i1(expected_runs,err)","87b4160a":"def data_modelling(X,y):\n    \n    # programming the model\n    XGB_model = XGBRegressor(n_estimators = 400, learning_rate=0.05)\n    XGB_model.fit(X,y)\n    return XGB_model","a5c23444":"def obtain_error(XGB_model,X,y):\n    # obatining the predictions\n    pred_y = XGB_model.predict(X)\n    \n    # error measured by mean_absolute_error according to predicted and actual target values\n    err = int(mean_absolute_error(y, pred_y))\n    \n    # adjusting error depending on over                                                   # this was obtained by trial and\n    err_adj_1 = math.log(-27+50,(math.e**math.sqrt(12)))                                     # error\n    \n    # adjusting error depending on prediction of score\n    expected_runs = int(XGB_model.predict(input_data))\n    expected_percent = round( (abs(expected_runs) \/ (input_runs+expected_runs) ),2)*100.\n    err_adj_2 = math.log(expected_percent,(math.e**math.sqrt(16)))\n    \n    # error value\n    err = err * (err_adj_1 * err_adj_2) ** (1\/2)\n    err = int(err)\n    return expected_runs,err","566d74ad":"def design_output_i1(expected_runs,err):\n    \n    # developing outputs\n    pred_score = input_runs + expected_runs\n    max_score  = int(pred_score + err)\n    min_score  = int(pred_score - err)\n    proj_RunR  = round((expected_runs\/(20-input_over)),2)\n    \n    if min_score < input_runs:\n        min_score = min_score_adj(min_score)\n    else:\n        pass\n    display_outputs_i1(min_score, max_score, pred_score, err, expected_runs, proj_RunR)","68b1ae5a":"def min_score_adj(min_score):\n    min_score = input_runs + 5\n    return min_score","b8c1752d":"def display_outputs_i1(min_score, max_score, pred_score, err, expected_runs, proj_RunR):\n    # printing out the output predictions\n    print(' ')\n    print('>> PREDICTION : ' + str(pred_score))\n    print('>> VARIANCE IN PREDICTION : +\/-' + str(int(err)))\n    print('>> RANGE OF INNINGS TOTAL : ' + str(min_score) + ' to ' + str(max_score))\n    print('>> PROJECTED RUN RATE FOR REMAINDER OF THE INNINGS : ' + str(proj_RunR))\n    \n    # calling out the next function\n    dist_vars_i1(base_data_i1,expected_runs)","dbcb63bd":"def dist_vars_i1(innings_data,expected_runs):\n    mu = innings_data.loc[ ((innings_data.Over == input_over) & wicks_req) ].Runs_to_be_Scored.mean()\n    sigma = innings_data.loc[ ((innings_data.Over == input_over) & wicks_req) ].Runs_to_be_Scored.std(ddof=1)\n    \n    display_dist(innings_data, expected_runs, mu, sigma)","17bafef3":"def display_dist(innings_data, expected_runs, mu, sigma):\n    \n    # probability of the runs_scored to be achieved\n    nn = np.arange(0 , norm.pdf(expected_runs , mu , sigma) , 0.00001)                          \n    \n    sns.set_style(\"whitegrid\")\n    plt.figure(figsize=(10, 6))\n    \n    sns.kdeplot(data = innings_data.loc[ (innings_data.Over == input_over) ].Runs_to_be_Scored, \n                 shade = True, label = 'Based on overs only'\n                )\n    \n    sns.kdeplot(data = innings_data.loc[ (innings_data.Over == input_over) & wicks_req ].Runs_to_be_Scored, \n                 shade = True, label='Based on overs and wickets'\n                )\n    plt.plot(expected_runs + (nn-nn) , nn ,linestyle='-')\n        \n    plt.legend()\n    plt.xlabel(\"Predicted Runs to be Scored\")","5f31085d":"# function to obatin inputs for calculation\ndef input_t20_i2():\n    \n    global input_data\n    \n    # obtaining inputs for the predictor\n    receive_over_t20()         # no of overs played yet\n    receive_runs()             # no of runs scored in the innings yet\n    \n    # calculating other variables such as Run Rate(input_RunR) to displayed to user\n    input_RunR = round((input_runs\/input_over),2)\n    print(\">> Current Run Rate : \" + str(input_RunR) )\n    \n    receive_wick()         # no of wickets lost in the innings yet\n    receive_L3Ws()         # no of wickets lost in the last 3 overs\n    receive_L3Rs()         # no of runs scores in the last 3 overs\n    receive_targ()         # target to be chased\n      \n    # calculating other variables - Partnership Average(input_pAvg)\n    input_PAvg = round((input_runs\/(input_wick + 1)),2)\n    \n    # placing input data into a dataframe\n    input_data = pd.DataFrame( {'over' : [input_over] , 'Inn_Score_atm' : [input_runs] , 'Inn_Wicks_atm': [input_wick],\n                               'R_Rate_atm': [input_RunR] ,  'Ptnr_Avg_atm': [input_PAvg] , 'L3_Wicks': [input_L3Ws],\n                               'L3_Runs': [input_L3Rs], 'Required_Rate': [input_ReqR], 'Target': [input_targ] })\n    \n    # when the target is close to be chased or trivial situations\n    # we consider a chase is trivial when there is less than or equal to 4 runs per over is required to win and\n    # when there are less than 10 overs remaining\n    if input_ReqR <= 4 & input_over >= 10:\n        print(\"Run-Chase is appears to be Trivial\")\n    else:\n        # calling out the next function to obtain data from base_data\n        # using input_over & input_wick for the inputs\n        obtain_data_t20_i2(input_over, input_wick)","1ce11bf7":"def receive_targ():\n    global input_targ\n    global input_ReqR\n    \n    input_targ = int(input(\"Enter target to be chased : \"))\n    if input_targ < 0:\n        print(\">>!! Invalid amount of runs.\")\n        print(' ')\n        sys.exit()\n    if input_runs >= input_targ :\n        print(\">>!! Target Score has been chased.\")\n        print(' ')\n        sys.exit()\n    print(' ')\n    input_ReqR = round(((input_targ - input_runs)\/(20 - input_over)),2)\n    \n    # printing out the required rates to win\n    print(\">> To win need \" +\n          str(input_targ - input_runs) + \n          \" from \" + str(6*(20 - input_over)) + \n          \" balls at \" + \n          str(round(((input_targ - input_runs)\/(20 - input_over)),2)) +\n          \" runs per over.\")\n    \n    return input_targ, input_ReqR","f84e1d57":"def obtain_data_t20_i2(input_over, input_wick):\n    global overs_req\n    global wicks_req\n    global ReqRR_req\n    global data_base\n    \n    # our base dataframe is base_data_i2\n    \n    # required rows of data to model fromwhich are played within +\/- 3 overs of the input_over\n    overs_req = (\n                 (base_data_i2.Over == (input_over-3)) | (base_data_i2.Over == (input_over-2)) | \n                 (base_data_i2.Over == (input_over-1)) | (base_data_i2.Over == (input_over+0)) | \n                 (base_data_i2.Over == (input_over+1)) | (base_data_i2.Over == (input_over+2)) | \n                 (base_data_i2.Over == (input_over+3))\n                )\n    \n    # required rows of data to model from which are played having lost +\/- 1 wicket of the input_wick\n    wicks_req = ((base_data_i2.Inn_Wicks_atm == (input_wick-1)) | (base_data_i2.Inn_Wicks_atm == (input_wick)) |\n                 (base_data_i2.Inn_Wicks_atm == (input_wick+1))\n                )\n    # required rows of data to model from which the same number of wickets have been lost in the preceeding 3 overs\n    L3WLs_req = base_data_i2.L3_Wicks == input_L3Ws\n    \n    # required rows of data to model from which the similar run scoring in the preceeding 3 overs\n    L3RSc_req = ((base_data_i2.L3_Runs == (input_L3Rs-3)) | (base_data_i2.L3_Runs == (input_L3Rs-2)) |\n                 (base_data_i2.L3_Runs == (input_L3Rs-1)) | (base_data_i2.L3_Runs == (input_L3Rs-0)) |\n                 (base_data_i2.L3_Runs == (input_L3Rs+1)) | (base_data_i2.L3_Runs == (input_L3Rs+2)) |\n                 (base_data_i2.L3_Runs == (input_L3Rs+3))\n                )\n    \n   # required rows of data to model from which the similar Required Run Rate\n    ReqRR_req = ((base_data_i2.Required_Rate > (input_ReqR-1)) & (base_data_i2.Required_Rate < (input_ReqR+1)))\n    \n    # required rows of data to model from which the similar Targets were chased\n    targ_req = ((base_data_i2.Target > (input_targ-20)) & (base_data_i2.Target < (input_targ+20)))\n    \n    # extracting required data from the either of the two criteria above\n    data_base = base_data_i2.loc[ overs_req | wicks_req | L3WLs_req | L3RSc_req | ReqRR_req | targ_req ] \n    \n    print(' ')\n    print('>> Calculating from ' + str(data_base.Over.count()) + ' similar instances.')\n    \n    #calling out the next function\n    select_features_i2(data_base)","5b8ee201":"def select_features_i2(data_base):\n    \n    # independent and input variables features\n    x_features = ['Over', 'Inn_Score_atm', 'Inn_Wicks_atm', 'R_Rate_atm', 'Ptnr_Avg_atm', 'L3_Wicks', 'L3_Runs',\n                  'Required_Rate','Target' ]\n    X = data_base[x_features]\n    \n    # target variable \n    y = data_base.Runs_to_be_Scored\n    \n    #calling out the next function\n    XGB_model = data_modelling(X,y)\n    \n    #calling out the next function\n    (expected_runs, err) = obtain_error(XGB_model,X,y)\n    \n    #calling out next function\n    dist_vars_i2(base_data_i2,expected_runs)","4e3b2f5e":"def dist_vars_i2(innings_data,expected_runs):\n    mu = innings_data.loc[ (overs_req & wicks_req)].Runs_to_be_Scored.mean()\n    sigma = innings_data.loc[ (overs_req & wicks_req)].Runs_to_be_Scored.std(ddof=1)\n    \n    display_prob(base_data_i2, expected_runs, mu, sigma)","9adbd713":"def display_prob(innings_data, expected_runs, mu, sigma):\n    \n    # obtaining required runs to win\n    runs_to_win = input_targ - input_runs\n    \n    # obtaining probability of winning using the cumulative density function under normal distribution\n    prob = round((1 - norm.cdf(runs_to_win ,mu ,sigma)),4)*100\n    \n    print(\" \")\n    print(\">> PROBABILITY OF CHASING A TARGET OF \" + str(input_targ) + \" IS : \" + str(prob) + \" %\")\n    \n    display_dist_i2(base_data_i2, mu, sigma, expected_runs, runs_to_win)","74d4616a":"def display_dist_i2(innings_data, mu, sigma, expected_runs, runs_to_win):\n    \n    ww = np.arange(0 , norm.pdf(runs_to_win , mu , sigma) , 0.00001)\n\n    plt.figure(figsize=(10, 6))\n    \n    sns.kdeplot(data =innings_data.loc[ overs_req & wicks_req ].Runs_to_be_Scored, \n                 shade = True, label = 'Based on overs and wickets only'\n                )\n    sns.kdeplot(data =innings_data.loc[ (overs_req & wicks_req) | ReqRR_req ].Runs_to_be_Scored, \n                 shade = True, label='Based on overs and wickets and Required Rates'\n                )\n    \n    plt.plot(runs_to_win+ww-ww, ww, linestyle='-', label='Runs to Target', color='red')\n    \n    if runs_to_win + 50 > (20-input_over)*30:\n        max_limit = (20-input_over)*30\n    else:\n        max_limit = runs_to_win + 50\n    \n    \n    plt.xlim([0,max_limit])\n    plt.legend()\n    plt.xlabel(\"Predicted Runs to be Scored\")\n    plt.show()","2a663eaa":"input_t20_i1()","90c795b4":"input_t20_i2()","0a73f0bf":"## Getting the data","d187fddc":"### First Innings","b24e189f":"# T20 Score and Win Predictor","39bd0a8b":"### 2nd Innings","685186eb":"The program uses Machine Learning Libraries such as \n1. sklearn\n2. xgboost\nto construct these estimates.","50212886":"For the test data in order to train the program, ball by ball data from the matches in the Indian Premier League (IPL) from the years 2008 - 2021 May have been used. Even though most of the matches are played in India and majority of players are from a single country, I have considered using this dataset to apply for International Matches (and other league matches) for a few reasons. \n* The matches span over a decade hence we have a very large number of match and overs scenarios.\n* Though all matches are played in India (barring some in South Africa and UAE) the variety in their own pitch conditions allow all type of scenarios.\n* The IPL provides a platform for both seasoned international players as well as young inexperienced players, hence we a large number of player profiles of all types of skills.\n* The competitive nature of the IPL provides a near equal competitiveness to events such as a World Cup Tournament.\n* Non Availability of Datasets for all International Matches.","6615d3e0":"## Making the prediction program to predict probability of chasing the target in 2nd innings","4fea55ee":"#### Run the below cell to obtain score prediction for the first innings","322b6000":"This program is designed to aid cricket fans make a fair estimate of how the cricket match will progress by; \n1. making an estimate on the innings total of the team batting first and,\n2. providing an indicator of how well the team batting second is chasing the target,\n\nat a midway stage of the innings.","b096aeb5":"# Open Predictor","56ec0afa":"#### Run the below cell to obtain the win prediction for the second innings","da1addae":"Nevertheless, cricket is very unpredictable game which is one of the reasons it is such an enjoyable soprt to watch. Therefore more often than not match predictions will fluctuate as the match further progresses.","60ff5f0f":"# ","9021e10e":"## Making the prediction program to predict final score at end of 1st innings","0b96ff88":"## Setting up the data","73b3ccd7":"Our basic assusmption is that the run scoring will be independent of who the teams are, or grounds where they played, or when they have played these matches used in the test data"}}