{"cell_type":{"199199a8":"code","4c1e80ef":"code","44888699":"code","55805159":"code","a0ab43e5":"code","5d6d1151":"code","ae1ef6e0":"code","4420ea97":"code","3e53edac":"code","af35fc7b":"code","a6482529":"code","523f782b":"code","13b14d2b":"code","e9351cf6":"code","dcef884d":"code","7871137f":"code","6f0b1a77":"markdown","b3724f17":"markdown","9b68bfa0":"markdown","3572d6e6":"markdown","690182b5":"markdown","2fb92705":"markdown","3c0d1168":"markdown","c620f5bc":"markdown","c8e469b1":"markdown","9918cc19":"markdown","f6651f3d":"markdown","ecb4ad85":"markdown","9ad209b3":"markdown","9b0042dc":"markdown"},"source":{"199199a8":"import pandas as pd\nimport random\nimport math","4c1e80ef":"# Cr\u00e9ation de la dataFrame \u00e0 partir du tableau d'exemple\ndata = {'Record':  ['A', 'B', 'C', 'D', 'E',],\n        'Pedal width': [2.5, 2.7, 3.2, 3.5, 3.6],\n        'Pedal length': [5.5, 6, 4.5, 5, 4.7],\n        }\ndf = pd.DataFrame (data, columns = ['Record','Pedal width', 'Pedal length'])\nrandom.seed(1)","44888699":"# R\u00e9cup\u00e9ration des valeurs et premi\u00e8re initialisation\nA = [0, 0]\nB = [0, 0]\nC = [0, 0]\nD = [0, 0]\nE = [0, 0]\n\nlistePoints = [A, B, C, D, E]\n\nfor i, x in enumerate(df['Pedal width']):\n    listePoints[i][0] = x\n\nfor i, y in enumerate(df['Pedal length']):\n    listePoints[i][1] = y \n    \ndef getRandomInBounds():\n    return random.randint(math.floor(df['Pedal width'].min()), math.ceil(df['Pedal length'].max()))\n    \nc1 = [2,6]\nc2 = [3,5]\n\npoints_in_c1 = []\npoints_in_c2 = []","55805159":"def calc_mahn_dist(x, y):\n    return abs(x[0] - y[0]) + abs(x[1] - y[1])","a0ab43e5":"\nfor point in listePoints:\n    if calc_mahn_dist(c1, point) > calc_mahn_dist(c2, point):\n        points_in_c1.append(point)\n        \npoints_in_c1","5d6d1151":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\n%matplotlib inline","ae1ef6e0":"df = pd.read_csv(\"..\/input\/chronic-kidney-disease\/chronic_kidney_disease.csv\" , header = 0)","4420ea97":"df.head()","3e53edac":"df.describe()\n\ndf.info()","af35fc7b":"#1- Separate the labels from the variables\ndata = df.drop(\"class\", axis =1)\nlabels = df[\"class\"]","a6482529":"# 2-Separate the numerical from the categorical variables\n\ndata_num = data[[\"age\", \"bp\",\"sg\", \"al\", \"su\", \"bgr\", \"bu\", \"sc\", \"sod\", \"pot\", \"hemo\",\"pcv\", \"wbcc\", \"rbcc\"]]\n\n# (Do the same for the categorical attributes)\ndata_cat = data[[\"rbc\",\"pc\",\"pcc\",\"ba\",\"htn\",\"dm\", \"cad\", \"appet\", \"pe\", \"ane\"]]\n# Help: the nominal attributes are: \"rbc\",\"pc\",\"pcc\",\"ba\",\"htn\",\"dm\", \"cad\", \"appet\", \"pe\", \"ane\"\n","523f782b":"# 3- Replace the missing values from both numerical and categorical variables\n# In the case of numerical variables, we will replace the missing values by the median.\n# In the case of nominal variables, we will first transform and represent them into numerical values \n# using factorize (search the pandas user guide for more info ) and then we will replace the missing \n# values by the most frequent one. \n\n# Numerical: \nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy=\"median\")\nimputer.fit(data_num)\n\n# (Do the same for the categorical attributes)\n# Use the scikit learn user guide to find the correct strategy to use.\ndata_cat = data_cat.apply(lambda x: abs(pd.factorize(x)[0]))\n","13b14d2b":"\n# Concatenate the two datasets again into one dataframe called: data_tr\ndata_tr = pd.concat([data_num, data_cat], axis=1)\ndata_tr","e9351cf6":"sns.distplot(data_tr['age']).set_title('Pourcentage de personnes ayant une maladie infantile dans la population, par age')","dcef884d":"kmeans = KMeans(n_clusters=3)","7871137f":"from sklearn.metrics import confusion_matrix,classification_report\n\n#K Means\n\n","6f0b1a77":"**What are the cluster center vectors?**","b3724f17":"**Create a confusion matrix and classification report to see how well the clustering algorithm worked without being given any labels.**","9b68bfa0":"**After importing the data, we need to check what it looks like and its properties. Use the panda's head, describe and info functions.**","3572d6e6":"## Part 2:  K-means using Python and Scikit learn\n\nThe aim of this part of the practical session is to apply a clustering algorithm seen in class: K-Means in order to cluster patients into two groups: chronic kidney disease patients and no chronic kidney disease patients. \n\n**Reminder: Clustering algorithms are unsupervised methods and hence we do not use the labels when applying them. However, we can use them afterwards as an evaluation step.**\n\n**Useful links: \nBefore using any method, it is important to know how and when to use it. For this, you can refer to the extra notebooks: KMeansClusteringwithPython.ipynb.**\n\n**In addition, there is a Scikit Learn user guide that you can find here : https:\/\/scikit-learn.org\/stable\/user_guide.html and a Pandas user guide that you can find her: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/index.html.** \n\n## Data Description\n\nWe will use a data frame with 400 instances on the following 24 variables.\n* Attribute Information:\nWe use 24 ( 11 numeric, 13 nominal) \n\n1.Age(numerical) \nage in years \n\n2.Blood Pressure(numerical) \nbp in mm\/Hg \n\n3.Specific Gravity(nominal??) \nsg - (1.005,1.010,1.015,1.020,1.025) \n\n4.Albumin(nominal??) \nal - (0,1,2,3,4,5) \n\n5.Sugar(nominal??) \nsu - (0,1,2,3,4,5) \n\n6.Red Blood Cells(nominal) \nrbc - (normal,abnormal) \n\n7.Pus Cell (nominal) \npc - (normal,abnormal) \n\n8.Pus Cell clumps(nominal) \npcc - (present,notpresent) \n\n9.Bacteria(nominal) \nba - (present,notpresent) \n\n10.Blood Glucose Random(numerical)\t\nbgr in mgs\/dl \n\n11.Blood Urea(numerical)\t\nbu in mgs\/dl\n\n12.Serum Creatinine(numerical)\t\nsc in mgs\/dl\n\n13.Sodium(numerical) \nsod in mEq\/L \n\n14.Potassium(numerical)\t\npot in mEq\/L \n\n15.Hemoglobin(numerical) \nhemo in gms \n\n16.Packed Cell Volume(numerical) \n\n17.White Blood Cell Count(numerical) \nwc in cells\/cumm \n\n18.Red Blood Cell Count(numerical)\t\nrc in millions\/cmm \n\n19.Hypertension(nominal)\t\nhtn - (yes,no) \n\n20.Diabetes Mellitus(nominal)\t\ndm - (yes,no) \n\n21.Coronary Artery Disease(nominal) \ncad - (yes,no) \n\n22.Appetite(nominal)\t\nappet - (good,poor) \n\n23.Pedal Edema(nominal) \npe - (yes,no)\t\n\n24.Anemia(nominal) \nane - (yes,no) \n\n","690182b5":"## Data Visualization\nIt's time to create some data visualizations! ","2fb92705":"## Part 1:  Simple clustering example\n\nBelow is a data table of a few records taken from the IRIS flowers dataset represented by their petal width and petal length.\n\n\n   | Record   |      Petal width  |   Petal length  | \n   |----------|-------------------|-----------------|  \n   |  A       |          2.5      |      5.5        | \n   |   B      |           2.7     |     6           |\n   |  C       |          3.2      |    4.5          | \n   |  D       |          3.5      |     5           |   \n   |   E      |         3.6       |       4.7       |\n  \nPerform k-means (k=2) and hierarchical clustering using single linkage clustering.","3c0d1168":"## K Means Cluster Creation","c620f5bc":"# Practical course 1: K-means","c8e469b1":"**Fit the model to all the data except for the class label.**","9918cc19":"## Data Preparation\n\n**There are multiple things we need to do before being able to apply any clustering algorithm:**\n\n**1- Separate the labels from the variables**\n\n**2- Separate the numerical from the categorical variables**\n\n**3- Replace the missing values from both numerical and categorical variables**","f6651f3d":"**Create an instance of a K Means model with the selected number of clusters.**","ecb4ad85":"## Import the data\n\n**Read in the \"chronic_kidney_disease\" file using read_csv.**","9ad209b3":"## Evaluation\n\nThere is no perfect way to evaluate clustering if you don't have the labels. In this practical course we take advantage of the availability of labels to evaluate our clusters.\n\n**Create a new column for df called 'Cluster_model', which is a class column for each model.**","9b0042dc":"## Import librairies\n\n**First, we import the libraries we usually use for data analysis: numpy, pandas, matplotlib and seaborn.**"}}