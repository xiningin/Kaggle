{"cell_type":{"1228540e":"code","7424f4c8":"code","22d8c5c0":"code","0e26832e":"code","36f4dd42":"code","0d0db7d7":"code","2da2b6f0":"code","7deeacd5":"code","1d5a4060":"code","d651e777":"code","33f1083d":"code","ed93e042":"code","9961abb4":"code","618b278e":"code","796013c2":"code","a6102b6f":"code","2a1efe3f":"code","ee88132d":"code","04d4bdc4":"code","63057efa":"code","8ab1b675":"code","324ca534":"code","6cd4baea":"code","36f9540c":"code","53031caf":"code","5edf42d2":"code","2e485b03":"code","20f47aee":"code","32464a06":"code","49450cfb":"code","94f1ac93":"code","b4d07d1d":"code","c3edcd72":"code","9787e114":"code","38f597dd":"code","bcc3bf05":"code","241c515f":"code","37f9c20a":"code","eccb5ae2":"code","0335ed77":"code","fbdacf3c":"code","bf78bd7c":"code","945d5a8b":"code","cd7e0325":"code","266c980b":"code","fb997c95":"code","f4634b2e":"code","bf040d91":"code","06cd0f93":"code","96c312c6":"markdown","1eca4695":"markdown","21c72be1":"markdown","7b3464c1":"markdown","d475e651":"markdown","dd123587":"markdown","be700e66":"markdown","c7be2842":"markdown","7d76e609":"markdown","ed9aec6b":"markdown","41db560e":"markdown","70d636bb":"markdown","d34abdad":"markdown","5640e0cd":"markdown","573a3f96":"markdown","188500a5":"markdown","a2b8fab0":"markdown","6233de7e":"markdown","3621130a":"markdown","90c84630":"markdown","d084fcd3":"markdown","9ecaeac7":"markdown","55f43b57":"markdown","4b181e47":"markdown","4ef1ad4f":"markdown","8bcfdc7c":"markdown"},"source":{"1228540e":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7424f4c8":"import numpy as np\nimport pandas as pd","22d8c5c0":"train = pd.read_csv(\"\/kaggle\/input\/usedcarprices\/Data_Train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/usedcarprices\/Data_Test.csv\")","0e26832e":"train.head()","36f4dd42":"train.shape","0d0db7d7":"train.info()","2da2b6f0":"train.nunique()","7deeacd5":"train.isnull().sum()","1d5a4060":"train.shape","d651e777":"train.Fuel_Type.value_counts()","33f1083d":"train = train[train['Fuel_Type'] != 'Electric']\ntrain.shape","ed93e042":"print(train.Kilometers_Driven.min())\nprint(train.Kilometers_Driven.max())","9961abb4":"plt.boxplot(train.Kilometers_Driven)","618b278e":"print(len(train[train['Kilometers_Driven'] > 500000]))\nprint(len(train[train['Kilometers_Driven'] < 1000]))","796013c2":"train = train[train['Kilometers_Driven'] < 500000]\ntrain = train[train['Kilometers_Driven'] > 1000]\ntrain.shape\n","a6102b6f":"train.Name = train.Name.str.split().str.get(0)\ntest.Name = test.Name.str.split().str.get(0)","2a1efe3f":"train.head()","ee88132d":"train.Name.value_counts()","04d4bdc4":"train = train[train['Name'] != 'Force']\ntrain = train[train['Name'] != 'ISUZU']\ntrain = train[train['Name'] != 'Bentley']\ntrain = train[train['Name'] != 'Lamborghini']\ntrain = train[train['Name'] != 'Isuzu']\ntrain = train[train['Name'] != 'Smart']\ntrain = train[train['Name'] != 'Ambassador']","63057efa":"train.shape","8ab1b675":"sns.boxplot(train.Price)","324ca534":"print(train.Price.min())\nprint(train.Price.max())","6cd4baea":"train = train[train.Price < 120]\ntrain.shape","36f9540c":"train = train[train.Price > 0.5]\ntrain.shape","53031caf":"train.Mileage = train.Mileage.str.split().str.get(0).astype('float')\ntrain.Engine = train.Engine.str.split().str.get(0).astype('int', errors='ignore')\ntrain.Power = train.Power.str.split().str.get(0).astype('float', errors='ignore')\ntrain.head()\n\ntest.Mileage = test.Mileage.str.split().str.get(0).astype('float')\ntest.Engine = test.Engine.str.split().str.get(0).astype('int', errors='ignore')\ntest.Power = test.Power.str.split().str.get(0).astype('float', errors='ignore')","5edf42d2":"train['Car_age'] = 2020 - train['Year']\ntest['Car_age'] = 2020 - test['Year']\ntrain.head()","2e485b03":"train.Price = np.log1p(train.Price)","20f47aee":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()","32464a06":"train['Name'] = label_encoder.fit_transform(train['Name'])\ntrain['Location'] = label_encoder.fit_transform(train['Location'])\ntrain['Fuel_Type'] = label_encoder.fit_transform(train['Fuel_Type'])\ntrain['Transmission'] = label_encoder.fit_transform(train['Transmission'])\ntrain['Owner_Type'] = label_encoder.fit_transform(train['Owner_Type'])\n\n\ntest['Name'] = label_encoder.fit_transform(test['Name'])\ntest['Location'] = label_encoder.fit_transform(test['Location'])\ntest['Fuel_Type'] = label_encoder.fit_transform(test['Fuel_Type'])\ntest['Transmission'] = label_encoder.fit_transform(test['Transmission'])\ntest['Owner_Type'] = label_encoder.fit_transform(test['Owner_Type'])\n\ntrain.head()","49450cfb":"train.isnull().sum()","94f1ac93":"train.dtypes","b4d07d1d":"train.Engine = pd.to_numeric(train.Engine, errors='coerce')\ntrain.Power = pd.to_numeric(train.Power, errors='coerce')\ntest.Engine = pd.to_numeric(test.Engine, errors='coerce')\ntest.Power = pd.to_numeric(test.Power, errors='coerce')","c3edcd72":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values = np.nan, strategy ='mean')\ntrain[[\"Engine\", \"Power\", \"Seats\"]] = imputer.fit_transform(train[[\"Engine\", \"Power\", \"Seats\"]])\ntest[[\"Engine\", \"Power\", \"Seats\"]] = imputer.fit_transform(test[[\"Engine\", \"Power\", \"Seats\"]])\n","9787e114":"train.isnull().sum()","38f597dd":"y = train.Price\nX = train.drop(['Price'],axis=1)","bcc3bf05":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X,y,test_size=0.2)","241c515f":"from sklearn.linear_model import LinearRegression\n\nmodel1 = LinearRegression() \nmodel1.fit(X_train, y_train) \n\ny_pred = model1.predict(X_valid) ","37f9c20a":"from sklearn import metrics\nfrom sklearn.metrics import r2_score\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_valid, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_valid, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_valid, y_pred)))\nprint(\"R2 score : %f\" % r2_score(y_valid,y_pred))","eccb5ae2":"from sklearn.ensemble import RandomForestRegressor\n\nmodel2 = RandomForestRegressor(n_estimators=200)\nmodel2.fit(X_train, y_train)\ny_pred2 = model2.predict(X_valid)","0335ed77":"print('Mean Absolute Error:', metrics.mean_absolute_error(y_valid, y_pred2))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_valid, y_pred2))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_valid, y_pred2)))\nprint(\"R2 score : %f\" % r2_score(y_valid,y_pred2))","fbdacf3c":"from xgboost import XGBRegressor\n\nmodel3 = XGBRegressor(n_estimators=1000, learning_rate=0.05)\nmodel3.fit(X_train, y_train, early_stopping_rounds=5, eval_set=[(X_valid, y_valid)], verbose=False)\ny_pred3 = model3.predict(X_valid)","bf78bd7c":"print('Mean Absolute Error:', metrics.mean_absolute_error(y_valid, y_pred3))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_valid, y_pred3))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_valid, y_pred3)))\nprint(\"R2 score : %f\" % r2_score(y_valid,y_pred3))","945d5a8b":"from sklearn.linear_model import Ridge\n\nmodel4 = Ridge(alpha=1.0)\nmodel4.fit(X_train, y_train)\ny_pred4 = model4.predict(X_valid)","cd7e0325":"print('Mean Absolute Error:', metrics.mean_absolute_error(y_valid, y_pred4))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_valid, y_pred4))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_valid, y_pred4)))\nprint(\"R2 score : %f\" % r2_score(y_valid,y_pred4))","266c980b":"from sklearn.linear_model import Lasso\n\nmodel5 = Lasso(alpha=1.0)\nmodel5.fit(X_train, y_train)\ny_pred5 = model5.predict(X_valid)","fb997c95":"print('Mean Absolute Error:', metrics.mean_absolute_error(y_valid, y_pred5))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_valid, y_pred5))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_valid, y_pred5)))\nprint(\"R2 score : %f\" % r2_score(y_valid,y_pred5))","f4634b2e":"final_test_predictions = model3.predict(test)\nfinal_test_predictions = np.exp(final_test_predictions)-1 #converting target to original state\ntype(final_test_predictions)","bf040d91":"test['Price'] = pd.Series(final_test_predictions)","06cd0f93":"test.to_csv('predictions.csv', index=False)","96c312c6":"#### Removing the outliers in Kilomerers_Driven","1eca4695":"## Data Pre-processing ","21c72be1":"# Predicting Used Car Prices","7b3464c1":"### XGBoost Regressor has the best performance among the regressors chosen. So choosing XGBoost for prediciton on test values.","d475e651":"#### Removing outliers in car brands","dd123587":"### 3. XGBoost Regressor","be700e66":"### 4. Ridge Regressor","c7be2842":"#### The columns Mileage, Engine, Power, Seats have null values","7d76e609":"#### Dealing with missing values ","ed9aec6b":"### 2. Random Forest Regressor","41db560e":"## Data Exploration","70d636bb":"#### Converting Mileage, Engine and Power to numerical columns","d34abdad":"#### Applying Log to the Price to normalise it","5640e0cd":"### Exporting the predictions to the test dataset","573a3f96":"#### Removing the outliers in Fuel_Type","188500a5":"#### Removing Outliers in Price","a2b8fab0":"#### Modifying car names to group by brand","6233de7e":"### Fetching Datasets","3621130a":"#### The data now has no missing values","90c84630":"## Applying ML models","d084fcd3":"#### Performing label encoding for categorical data","9ecaeac7":"### Removing Outliers from the Data","55f43b57":"#### Calculating age of the car from Year","4b181e47":"### Importing libraries","4ef1ad4f":"### 5. Lasso Regressor\n","8bcfdc7c":"### 1. Linear Regression"}}