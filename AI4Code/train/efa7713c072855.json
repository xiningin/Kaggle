{"cell_type":{"bdb1e997":"code","c0b9cb5b":"code","0f6cce78":"code","f8433f89":"code","803e86a9":"code","aa747aec":"code","a9c1531a":"code","a766e7a9":"code","06f9132a":"code","aa06eedd":"code","4842e734":"code","cc9beb29":"code","180a1b6f":"code","437c7a7b":"code","172ef527":"code","8ac4e69f":"code","9b1bf628":"code","f36f1929":"code","70b02e85":"code","2ee28e97":"code","673d5bb0":"code","a4b81a1e":"code","49ead342":"code","3f16fe9a":"code","3f5bd724":"code","8f11ab35":"code","d2079aa8":"code","b36e7b56":"markdown","e2eb4049":"markdown","e226c593":"markdown","be740799":"markdown","750e30f9":"markdown"},"source":{"bdb1e997":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\n%matplotlib inline","c0b9cb5b":"df_heart = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf_heart.head()","0f6cce78":"df_heart.shape","f8433f89":"df_heart.info() #all values are non-null","803e86a9":"df_heart.isnull().sum()","aa747aec":"df_heart.describe()","a9c1531a":"df_heart['DEATH_EVENT'].value_counts() #1 means death occured and 0 means that the person was alive","a766e7a9":"df_heart.groupby('DEATH_EVENT').mean() # To see visible difference in features of the dataset between the two classes.","06f9132a":"X = np.asarray(df_heart.drop(columns = ['DEATH_EVENT']))\nY = np.asarray(df_heart['DEATH_EVENT'])","aa06eedd":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.3)","4842e734":"slr = StandardScaler()\nslr.fit(x_train)\nx_train = slr.transform(x_train)\nx_test = slr.transform(x_test)","cc9beb29":"print(x_train.shape, y_train.shape)","180a1b6f":"print(x_test.shape, y_test.shape)","437c7a7b":"from sklearn import svm\nfrom sklearn.metrics import accuracy_score","172ef527":"svm_model = svm.SVC(kernel = 'linear')\nsvm_model.fit(x_train, y_train)","8ac4e69f":"svm_model_prediction = svm_model.predict(x_train)","9b1bf628":"print('accuracy of training data predictions :' , accuracy_score(y_train, svm_model_prediction))","f36f1929":"svm_model_testPrediction = svm_model.predict(x_test)","70b02e85":"print('accuracy of testing data predictions :', accuracy_score(y_test, svm_model_testPrediction))","2ee28e97":"from sklearn.linear_model import LogisticRegression\nLogistic_Model = LogisticRegression(C = 0.01, solver = 'liblinear').fit(x_train, y_train)\nLogistic_Model_Prediction = Logistic_Model.predict(x_train)","673d5bb0":"print(\"Accuracy of training data prediction :\", accuracy_score(y_train, Logistic_Model_Prediction))","a4b81a1e":"Logistic_Model_TestPrediction = Logistic_Model.predict(x_test)","49ead342":"print('Accuracy of test data prediction :', accuracy_score(y_test, Logistic_Model_TestPrediction))","3f16fe9a":"from sklearn.tree import DecisionTreeClassifier\nDT_Model = DecisionTreeClassifier(criterion = 'entropy', max_depth = 4)\nDT_Model.fit(x_train, y_train)\nDT_Model_Prediction = DT_Model.predict(x_train)","3f5bd724":"print('Acccuracy of training data prediction : ', accuracy_score(y_train, DT_Model_Prediction))","8f11ab35":"DT_Model_TestPrediction = DT_Model.predict(x_test)","d2079aa8":"print(\"Accuracy of test data predictrion :\", accuracy_score(y_test, DT_Model_TestPrediction))","b36e7b56":"# ** Scaling Data **","e2eb4049":"# DATA PREPROCESSING","e226c593":"# Logistic Regression Model\n","be740799":"# Linear - Support Vector Machine Model","750e30f9":"# Decision Tree Model"}}