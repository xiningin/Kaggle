{"cell_type":{"a4df34e9":"code","c2ca365b":"code","ff6c36a8":"code","3f8576a4":"code","1c8ad082":"code","b47f9e3f":"code","dd498fa8":"code","d05502db":"code","5bc11da8":"code","d16144ea":"code","9b5348a1":"code","e5b379c3":"code","4110f1e5":"code","e8ed1059":"code","80bc9d71":"code","917ce0aa":"code","4dbcba4e":"code","0ded2c2d":"code","f5fb539b":"code","4562a9ab":"code","5f109285":"code","4355b94e":"code","80c74f61":"code","1fff7143":"code","cfbe4070":"code","7143bc3c":"code","b5194604":"code","fe965069":"code","a1f72a7d":"code","c498fee2":"code","87a4888a":"code","e41d8adb":"code","c394466c":"code","bccdb8d8":"code","dbb2ebe5":"code","9dd40306":"code","cda817ec":"code","3bd58951":"code","c84ec8c8":"code","51502c8d":"markdown","7a249e2a":"markdown","e77d1e12":"markdown"},"source":{"a4df34e9":"import numpy as np \nimport pandas as pd\nimport matplotlib.pylab as plt\nimport os\nfrom os import listdir\nfrom os.path import isfile, join\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Model, load_model","c2ca365b":"# Resized images directory\ndir_2019_images = \"\/kaggle\/input\/resizedsiimisic\/train_resized\/\"\ndir_2019_aug_images = \"\/kaggle\/input\/models\/oversampling\/train_resized\/\"\n\n# CSV files\ntrain_df = pd.read_csv('\/kaggle\/input\/resizedsiimisic\/train.csv')\nundersampling_test = pd.read_csv('\/kaggle\/input\/models\/random_undersampling\/test.csv')\nweighted_test = pd.read_csv('\/kaggle\/input\/models\/weighted_loss\/test.csv')\noversampling_test = pd.read_csv('\/kaggle\/input\/models\/oversampling\/test.csv')\n\n# Load models\nundersampling = load_model('\/kaggle\/input\/models\/random_undersampling\/undersampling_model.h5')\nweighted = load_model('\/kaggle\/input\/models\/weighted_loss\/weighted_model.h5')\noversampling = load_model('\/kaggle\/input\/models\/oversampling\/oversampling_model.h5')","ff6c36a8":"oversampling_test = oversampling_test.drop(['index'], axis=1)\nundersampling_test[\"target\"] = undersampling_test['target'].astype(str)\nweighted_test[\"target\"] = weighted_test['target'].astype(str)\noversampling_test[\"target\"] = oversampling_test['target'].astype(str)","3f8576a4":"datagen = ImageDataGenerator(rescale=1.\/255.)\n\ntest_generator_under = datagen.flow_from_dataframe(\n    dataframe=undersampling_test,\n    directory=dir_2019_images,\n    x_col=\"image_name\",\n    y_col=\"target\",\n    batch_size=32,\n    seed=42,\n    shuffle=False,\n    class_mode=\"binary\"\n)\n\ntest_generator_weight = datagen.flow_from_dataframe(\n    dataframe=weighted_test,\n    directory=dir_2019_images,\n    x_col=\"image_name\",\n    y_col=\"target\",\n    batch_size=32,\n    seed=42,\n    shuffle=False,\n    class_mode=\"binary\"\n)\n\ntest_generator_over = datagen.flow_from_dataframe(\n    dataframe=oversampling_test,\n    directory=dir_2019_aug_images,\n    x_col=\"image_name\",\n    y_col=\"target\",\n    batch_size=32,\n    seed=42,\n    shuffle=False,\n    class_mode=\"binary\"\n)","1c8ad082":"true_labels_test_under = test_generator_under.classes\ntrue_labels_test_weight = test_generator_weight.classes\ntrue_labels_test_over = test_generator_over.classes\n\npredict_undersampling_test = undersampling.predict(test_generator_under, verbose=1)\npredict_weighted_test = weighted.predict(test_generator_weight, verbose=1)\npredict_oversampling_test = oversampling.predict(test_generator_over, verbose=1)","b47f9e3f":"df_2019 = train_df.rename(columns={\"anatom_site_general_challenge\": \"location\"})\n# df_2020 = train_df.rename(columns={\"anatom_site_general_challenge\": \"location\"})","dd498fa8":"print(\"Train shape:\", df_2019.shape)\ndf_2019.head()","d05502db":"# Unique values in each features\nfor k in df_2019.keys():\n    print('{0}: {1}'.format(k, len(df_2019[k].unique())))","5bc11da8":"def for_age(row):\n    try:\n        age = float(row['age_approx'])\n        if age < 18:\n            return 'teen'\n        elif age < 30:\n            return 'twenties'\n        elif age < 40:\n            return 'thirties'\n        elif age < 50:\n            return 'forties'\n        elif age < 60:\n            return 'fifties'\n        elif age < 70:\n            return 'sixties'\n        else:\n            return 'old'\n    except ValueError:\n        return np.nan\n    \ndef for_boolean(row, col):\n    try:\n        val = int(row[col])\n        if row[col] >= 1:\n            return \"True\"\n        else:\n            return \"False\"\n    except ValueError:\n        return \"False\"","d16144ea":"def pretreat(df):\n    if 'target' in df.columns:\n        df['target'] = df.apply(lambda row: for_boolean(row, 'target'), axis=1)\n    df['age_approx'] = df.apply(for_age, axis=1)\n    return df\n\ndf_2019 = pretreat(df_2019)\nundersampling_test = pretreat(undersampling_test)\nweighted_test = pretreat(weighted_test)\noversampling_test = pretreat(oversampling_test)\n\n# df_2020 = pretreat(df_2020)","9b5348a1":"df_2019.head()","e5b379c3":"!pip install pyAgrum\n!pip install pydotplus","4110f1e5":"import pyAgrum as gum\nimport pyAgrum.lib.notebook as gnb\n%matplotlib inline \n\nbn = gum.BayesNet(\"Melanoma\")\nbn =gum.fastBN(\"age{teen|twenties|thirties|forties|fifties|sixties|old}<-target{False|True}->location{anterior torso|head\/neck|lateral torso|lower extremity|oral\/genital|palms\/soles|posterior torso|upper extremity}->sex{female|male}\")\nprint(bn.variable(\"target\"))\nprint(bn.variable(\"age\"))\nprint(bn.variable(\"sex\"))\nprint(bn.variable(\"location\"))\n\nbn","e8ed1059":"# Benign malignant prevalence\ndf_2019.groupby(['target']).size()\/len(df_2019)","80bc9d71":"print(\"ISIC_0031543.jpg - Label:\", np.array(true_labels_test_under)[1])\nprint(\"ISIC_0031543.jpg - Predicted\", predict_undersampling_test[1])\nundersampling_test.head()","917ce0aa":"# Classifier prediction\nbn.cpt('target')[:] = [1-predict_undersampling_test[1][0], predict_undersampling_test[1][0]]\nbn.cpt('target')","4dbcba4e":"df_2019.groupby(['age_approx', 'target']).size()\/len(df_2019)","0ded2c2d":"bn.cpt('age')[{'target':0}] = [0.020685, 0.041326, 0.101957, 0.159742, 0.147153, 0.129226, 0.206584]\nbn.cpt('age')[{'target':1}] = [0.000311, 0.002802, 0.012055, 0.027847, 0.037144, 0.038835, 0.074333]\nbn.cpt('age')","f5fb539b":"df_2019.groupby(['sex', 'location']).size()\/len(df_2019)","4562a9ab":"bn.cpt('sex').fillWith = [[0.129448, 0.174644], \n                          [0.085454, 0.118105], \n                          [0.000578, 0.001423], \n                          [0.130516, 0.090036],\n                          [0.001290, 0.001335],\n                          [0.010721, 0.006762],\n                          [0.047464, 0.074244],\n                          [0.062945, 0.065036]]\nbn.cpt('sex')","5f109285":"df_2019.groupby(['location', 'target']).size()\/len(df_2019)","4355b94e":"bn.cpt('location')[{'target':0}] = [0.245285, 0.164591, 0.001379, 0.185543, 0.001779, 0.008763, 0.102936, 0.096397]\nbn.cpt('location')[{'target':1}] = [0.058808, 0.038968, 0.000623, 0.035009, 0.000845, 0.008719, 0.018772,0.031584]\nbn.cpt('location')","80c74f61":"undersampling_test.head()","1fff7143":"age = undersampling_test.values[1][2]\nsex = undersampling_test.values[1][1]\nloc = undersampling_test.values[1][3]\n\ndict_ = {'age':age, 'sex':sex, 'location':loc}\ndict_","cfbe4070":"ie = gum.LazyPropagation(bn)","7143bc3c":"gnb.showProba(ie.posterior(\"target\"))","b5194604":"gnb.showPosterior(bn, evs=dict_, target='target')","fe965069":"ie.setEvidence(dict_)\nie.makeInference()\nie.posterior(\"target\")[:]","a1f72a7d":"# De 93.84% a 60.03%\ngnb.showInference(bn, evs=dict_)","c498fee2":"# Benign malignant prevalence\n# df_2019.groupby(['target']).size()\/len(df_2019)","87a4888a":"# bn.cpt('target')[:] = [0.806673, 0.193327]\n# bn.cpt('target')","e41d8adb":"# gnb.showInference(bn)","c394466c":"undersampling_test.head()","bccdb8d8":"new_predictions = []\nrow = 0\n\nfor i in predict_undersampling_test:   \n    age = undersampling_test.values[row][2]\n    sex = undersampling_test.values[row][1]\n    loc = undersampling_test.values[row][3]\n    evidence = {'age':age, 'sex':sex, 'location':loc}\n    print(\"Case\", row, \"-\",evidence)\n    \n    # Establish classifier's prediction\n    if i[0] == 0.5:\n        bn.cpt('target')[:] = [i[0], i[0]]\n    else:\n        bn.cpt('target')[:] = [1-i[0], i[0]]\n    \n    # Set evidence (age, sex and location)\n    ie = gum.LazyPropagation(bn)\n    ie.setEvidence(dict_)\n    ie.makeInference()\n    \n    print(\"Classifier prediction\", i[0])\n    print(bn.cpt('target'))\n    print(\"Posterior prediction ->\", \"False:\", ie.posterior(\"target\")[:][0], \n                                     \"True:\", ie.posterior(\"target\")[:][1])\n    print(\"---------------------------------------------------------------\")\n    row += 1\n    new_predictions.append(ie.posterior(\"target\")[:][1])","dbb2ebe5":"np.where(np.array(new_predictions) > 0.5, 1, 0)","9dd40306":"from sklearn.metrics import confusion_matrix\n\ncm_before = confusion_matrix(true_labels_test_under.values.astype(float), \n                             np.where(np.array(predict_undersampling_test) > 0.5, 1, 0))\ncm_before","cda817ec":"cm = confusion_matrix(true_labels_test_under.values.astype(float), \n                      np.where(np.array(new_predictions) > 0.5, 1, 0))\ncm","3bd58951":"import seaborn as sns\n\ncm = [cm[0][0], cm[0][1], cm[1][0], cm[1][1]]\n\ngroup_names = ['True Neg','False Pos','False Neg','True Pos']\ngroup_counts = [\"{0:0.0f}\".format(value) for value in cm]\ngroup_percentages = [\"{0:.2%}\".format(value) for value in cm\/np.sum(cm)]\nlabels = [f\"{v1}\\n{v2}\\n{v3}\" for v1, v2, v3 in zip(group_names,group_counts,group_percentages)]\nlabels = np.asarray(labels).reshape(2,2)\n\nsns.heatmap([[cm[0], cm[1]], [cm[2], cm[3]]], annot=labels, fmt='', cmap='Blues')","c84ec8c8":"all_predictions = {'Ground Truth': true_labels_test_under.values.astype(float),\n                   'Classifier prediction': predict_undersampling_test.ravel(),\n                   'Bayesian prediction': new_predictions}\n\ndf_predictions = pd.DataFrame(all_predictions)\ndf_predictions","51502c8d":"## <font color=red>2. <\/font>Red bayesiana ","7a249e2a":"## <font color=red>1. <\/font>Cargar las im\u00e1genes y los datos tabulares","e77d1e12":"basado en: http:\/\/webia.lip6.fr\/~phw\/aGrUM\/docs\/last\/notebooks\/Tutorial.ipynb.html"}}