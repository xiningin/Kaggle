{"cell_type":{"9bc85797":"code","2a2530c3":"code","21c0c0b5":"code","7e7ffc5e":"code","b68d342d":"code","c51c3318":"code","67cf8b6d":"code","f45919bc":"code","af1e6232":"code","c64f3872":"code","d675df1b":"code","f1cdf091":"code","8ea89206":"code","86b3282c":"code","9de4e436":"code","37340505":"code","392e415f":"code","520dc904":"code","5cb2786c":"code","6e57478d":"code","5f5f5acb":"code","7495add3":"code","00197a7b":"code","b3ec4581":"code","a16abd66":"code","6200a7e1":"markdown","0c5bfe1f":"markdown","8440aa10":"markdown","87a5ecfd":"markdown","5e75ee4a":"markdown","32a09146":"markdown","15afdbd2":"markdown","46b1ed53":"markdown","ad16b5ca":"markdown","86405d7d":"markdown","8e1428d1":"markdown","f037771f":"markdown"},"source":{"9bc85797":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a2530c3":"data = pd.read_csv(\"\/kaggle\/input\/sf-salaries\/Salaries.csv\")","21c0c0b5":"data.head()","7e7ffc5e":"data.shape","b68d342d":"for column in data.columns:\n    print(\"No of empty rows in {} is {}\".format(column,data[column].isna().sum()))","c51c3318":"empty_features = [column for column in data.columns if data[column].isna().sum() > 0]\nempty_features","67cf8b6d":"for feature in empty_features:\n    df = data.copy()\n    print('Percentage of empty rows in {} is {} %'.format(feature,np.round(df[feature].isna().mean(),2)))","f45919bc":"df.info()","af1e6232":"df[\"BasePay\"].unique()","c64f3872":"df[\"BasePay\"].isna().sum()","d675df1b":"for column in ['BasePay', 'Benefits']:\n    df[column] = np.where((df[column].isna()) | (df[column] == \"Not Provided\"),\n                          0,\n                          df[column])","f1cdf091":"df[\"BasePay\"].isna().sum()","8ea89206":"df.info()","86b3282c":"df[\"Agency\"].unique()","9de4e436":"df.drop(['Id','Agency','Notes'],axis = 1, inplace = True)","37340505":"df.head()","392e415f":"df[\"Status\"].unique()","520dc904":"df[\"Status\"] = df[\"Status\"].fillna(\"Missing Value\")","5cb2786c":"import matplotlib.pyplot as plt\n%matplotlib inline","6e57478d":"df.groupby(\"Status\")[\"TotalPayBenefits\"].median().plot.bar()","5f5f5acb":"df.groupby(\"Year\")[\"TotalPayBenefits\"].mean().plot.bar()","7495add3":"df[df[\"Status\"] == \"PT\"].describe()","00197a7b":"df[df[\"Status\"] == \"PT\"][\"Year\"].value_counts()","b3ec4581":"df[df[\"Status\"] == \"FT\"].describe()","a16abd66":"df[df[\"Status\"] == \"Missing Value\"].describe()","6200a7e1":"***Reviewing the top 5 rows by using head() fucntion***","0c5bfe1f":"***Replacing the null values & \"Not Provided\" values in Basepay & Benefits with 0s***","8440aa10":"***Checking the unique values & count of missing values in Basepay***","87a5ecfd":"***Replacing the NaN values with new category \"Missing Values\"***","5e75ee4a":"***Visualizing the Status column with respect to Total Pay***","32a09146":"***Count the empty rows in each columns***","15afdbd2":"***Checking the number of rows & columns***","46b1ed53":"***Checking the unique values in Status***","ad16b5ca":"***Analysing for Status = Part Time***","86405d7d":"***Calculate the percentage of null values in above columns***","8e1428d1":"***Dropping \"Id\",\"Notes\" & \"Agency\" columns***","f037771f":"***Extracting columns with null values***"}}