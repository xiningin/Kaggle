{"cell_type":{"aa38cfc6":"code","d6265c26":"code","32f96e1b":"code","8b33cc14":"code","99a0c939":"code","97a847de":"code","705edd0b":"code","80b02f95":"code","4f82051a":"code","f52dfd84":"code","29f4487e":"code","d1209a40":"code","f21e5950":"code","ccf029d6":"code","b9b942b8":"code","6559203d":"code","51da51cf":"code","4861d0f7":"code","27c69923":"code","a2652e69":"code","06963e1a":"code","0ad931f1":"code","8ab039d9":"code","5a79bedc":"code","c9d0b356":"code","eb0720ff":"code","39f73897":"code","0ee9e566":"code","b3135aaa":"code","55086c8d":"code","7d37375b":"code","2d5ffed7":"code","32236c1a":"code","ee46da5c":"code","5ebe39d4":"code","00e647f5":"code","6c2b0cf3":"code","d622d8ba":"code","299ff9fc":"code","aa41c69f":"code","e0313e23":"code","b8f87df2":"code","71ecc6c4":"code","4d0aac61":"code","b2dfa63c":"code","a21c80c6":"code","9e2c32f8":"code","5996fec1":"code","5573af94":"code","f550537c":"code","0bb7c980":"code","58759425":"code","435b7b7d":"code","3dc4d29f":"code","c52402bd":"code","a1aa8cb0":"code","0f174352":"code","e04296c5":"code","ab5ff7a6":"code","469a2f1d":"code","9df763b7":"code","8ad3d4e4":"code","21a65a95":"code","2b3f98a3":"code","0ef31302":"code","30724d9d":"code","3c8adc66":"code","9827b5e2":"code","7351aee9":"code","a383cf0a":"code","bd71244b":"code","086b37e7":"code","c1e6f54a":"code","ecba58af":"code","e2dc83f0":"code","686c4c51":"code","3eb4f55c":"code","7f2d6ee1":"code","e52887e3":"markdown","d25e5015":"markdown","0e11e081":"markdown","3e423e5e":"markdown","eec3b05a":"markdown","86af4874":"markdown","13c5b7a6":"markdown","e4aef165":"markdown"},"source":{"aa38cfc6":"#import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d6265c26":"#import the DataSet\ndf= pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")","32f96e1b":"df.head()","8b33cc14":"df.info()","99a0c939":"df.shape","97a847de":"#Correlation overview\ndf.corr()[\"SalePrice\"].sort_values()","705edd0b":"sns.scatterplot(data=df , x=\"OverallQual\" , y=\"SalePrice\" )","80b02f95":"sns.scatterplot(data=df , x=\"OverallQual\" , y=\"SalePrice\")\nplt.axhline(y=200000 , color=\"red\")\nplt.axvline(x=8 , color=\"red\")","4f82051a":"# Remove the outliers\noutlier =df[(df[\"OverallQual\"]>8)&(df[\"SalePrice\"]<200000)].index\ndf=df.drop(outlier , axis=0)","f52dfd84":"sns.scatterplot(data=df , x=\"OverallQual\" , y=\"SalePrice\")\nplt.axhline(y=200000 , color=\"red\")\nplt.axvline(x=8 , color=\"red\")","29f4487e":"# Remove the unusable column\ndf= df.drop(\"Id\" , axis=1)","d1209a40":"# How much Data is missing?\ndf.isnull().sum().sort_values()","f21e5950":"#Calculate the percent of missing data in each column\ndef missing_percent(df):\n    nan_percent= 100*(df.isnull().sum()\/len(df))\n    nan_percent= nan_percent[nan_percent>0].sort_values()\n    return nan_percent","ccf029d6":"nan_percent= missing_percent(df)","b9b942b8":"nan_percent","6559203d":"plt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index , y=nan_percent)\nplt.xticks(rotation=90)","51da51cf":"df[df[\"Electrical\"].isnull()]","4861d0f7":"#Dropping row\ndf=df.dropna(axis=0 , subset=[\"Electrical\"])","27c69923":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index , y=nan_percent)\nplt.xticks(rotation=90)","a2652e69":"#string columns fill with None:\nbsmt_str= [\"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinType2\"]\ndf[bsmt_str]=df[bsmt_str].fillna(\"None\")","06963e1a":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index , y=nan_percent)\nplt.xticks(rotation=90)","0ad931f1":"df[\"MasVnrType\"]= df[\"MasVnrType\"].fillna(\"None\")\ndf[\"MasVnrArea\"]= df[\"MasVnrArea\"].fillna(0)","8ab039d9":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index , y=nan_percent)\nplt.xticks(rotation=90)\n","5a79bedc":"#Filling the missing Value:\nGar_str= [\"GarageType\",\"GarageFinish\",\"GarageQual\",\"GarageCond\"]\ndf[Gar_str]= df[Gar_str].fillna(\"None\")\n\ndf[\"GarageYrBlt\"]= df[\"GarageYrBlt\"].fillna(0)","c9d0b356":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index , y=nan_percent)\nplt.xticks(rotation=90)","eb0720ff":"# Remove the columns with more than 80% missing values:\n\ndf= df.drop([\"Fence\",'Alley',\"MiscFeature\",\"PoolQC\"],axis=1)","39f73897":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(8,4))\nsns.barplot(x=nan_percent.index , y=nan_percent)\nplt.xticks(rotation=90)","0ee9e566":"#FireplaceQu column fill with None\ndf[\"FireplaceQu\"]=df[\"FireplaceQu\"].fillna(\"None\")","b3135aaa":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(8,4))\nsns.barplot(x=nan_percent.index , y=nan_percent)\nplt.xticks(rotation=90)","55086c8d":"#we understand that the LotFrontage is related to Neighborhood \ndf[\"Neighborhood\"].unique()","7d37375b":"plt.figure(figsize=(12,6))\nsns.boxplot(data=df, x=\"LotFrontage\" , y=\"Neighborhood\")","2d5ffed7":"# Impute missing data based on other columns:\n\ndf.groupby(\"Neighborhood\")[\"LotFrontage\"]","32236c1a":"df.groupby(\"Neighborhood\")[\"LotFrontage\"].mean()","ee46da5c":"df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda val:val.fillna(val.mean()))","5ebe39d4":"df[\"Lot Frontage\"]= df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda val:val.fillna(val.mean()))","00e647f5":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(8,4))\nsns.barplot(x=nan_percent.index , y=nan_percent)\nplt.xticks(rotation=90)","6c2b0cf3":"df[\"LotFrontage\"]= df[\"LotFrontage\"].fillna(0)","d622d8ba":"nan_percent = missing_percent(df)","299ff9fc":"nan_percent","aa41c69f":"#Numerical Columns to Categorical\ndf['MSSubClass']","e0313e23":"df['MSSubClass'].unique()","b8f87df2":"#Convert to String:\ndf['MSSubClass']= df['MSSubClass'].apply(str)","71ecc6c4":"df.select_dtypes(include='object')","4d0aac61":"df_num= df.select_dtypes(exclude='object')\ndf_obj= df.select_dtypes(include='object')","b2dfa63c":"df_num.info()","a21c80c6":"df_obj.info()","9e2c32f8":"# Converting:\ndf_obj= pd.get_dummies(df_obj, drop_first=True)","5996fec1":"df_obj.shape","5573af94":"Final_df= pd.concat([df_num, df_obj], axis=1)","f550537c":"Final_df.head()","0bb7c980":"sns.distplot(Final_df['SalePrice'])","58759425":"#Determine the Features & Target Variable\nX= Final_df.drop([\"SalePrice\"] , axis=1)\ny= Final_df[\"SalePrice\"]","435b7b7d":"#Split the Dataset to Train & Test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","3dc4d29f":"# Train the Model\nfrom sklearn.linear_model import LinearRegression","c52402bd":"model= LinearRegression()","a1aa8cb0":"model.fit(X_train , y_train)","0f174352":"# Predicting Test Data\ny_pred=model.predict(X_test)","e04296c5":"from sklearn import metrics\nMAE= metrics.mean_absolute_error(y_test, y_pred)\nMSE= metrics.mean_squared_error(y_test, y_pred)\nRMSE=np.sqrt(MSE)\n\npd.DataFrame([MAE, MSE, RMSE], index=['MAE', 'MSE', 'RMSE'], columns=['Metrics'])","ab5ff7a6":"#Compare the metrics to the mean of target variable\ndf['SalePrice'].mean()","469a2f1d":"RMSE","9df763b7":"#Residuals\ntest_residuals=y_test-y_pred","8ad3d4e4":"sns.scatterplot(x=y_test, y=y_pred)\nplt.xlabel('Y-Test')\nplt.ylabel('Y-Pred')","21a65a95":"sns.scatterplot(x=y_test, y=test_residuals)\nplt.axhline(y=0, color='r', ls='--')","2b3f98a3":"sns.distplot(test_residuals, bins=25, kde=True)","0ef31302":"#Preprocessing\nfrom sklearn.preprocessing import PolynomialFeatures","30724d9d":"polynomial_converter=PolynomialFeatures(degree=2, include_bias=False)","3c8adc66":"poly_features=polynomial_converter.fit(X)","9827b5e2":"poly_features=polynomial_converter.transform(X)","7351aee9":"poly_features.shape","a383cf0a":"X.shape","bd71244b":"#Split the Data to Train & Test\nX_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)","086b37e7":"#Train the Model\npolymodel=LinearRegression()","c1e6f54a":"polymodel.fit(X_train, y_train)","ecba58af":"#Predicting Test Data\ny_pred=polymodel.predict(X_test)","e2dc83f0":"pd.DataFrame({'Y_Test': y_test,'Y_Pred':y_pred, 'Residuals':(y_test-y_pred) }).head(5)","686c4c51":"#Evaluating the Model\nfrom sklearn import metrics\nMAE_Poly = metrics.mean_absolute_error(y_test,y_pred)\nMSE_Poly = metrics.mean_squared_error(y_test,y_pred)\nRMSE_Poly = np.sqrt(MSE_Poly)\n\npd.DataFrame([MAE_Poly, MSE_Poly, RMSE_Poly], index=['MAE', 'MSE', 'RMSE'], columns=['metrics'])","3eb4f55c":"XS_train, XS_test, ys_train, ys_test = train_test_split(X, y, test_size=0.3, random_state=101)\nsimplemodel=LinearRegression()\nsimplemodel.fit(XS_train, ys_train)\nys_pred=simplemodel.predict(XS_test)\n\nMAE_simple = metrics.mean_absolute_error(ys_test,ys_pred)\nMSE_simple = metrics.mean_squared_error(ys_test,ys_pred)\nRMSE_simple = np.sqrt(MSE_simple)","7f2d6ee1":"pd.DataFrame({'Poly Metrics': [MAE_Poly, MSE_Poly, RMSE_Poly], 'Simple Metrics':[MAE_simple, MSE_simple, RMSE_simple]}, index=['MAE', 'MSE', 'RMSE'])","e52887e3":"OverallQual has most correlation with 0.790982  ","d25e5015":"**Linear Regression**","0e11e081":"**About House-Price Dataset:**\nThe housing dataset was the basis for the Kaggle house prices competition. The object of the competition was to predict the sale price of a house based on a set of features such as the number of bedrooms, the neighbourhood , etc.","3e423e5e":"**Compare to the simple linear regression:**","eec3b05a":"We have 1460 rows and 81 columns.","86af4874":"The Dataset is Ready for any Machine Learing Model & Analysis","13c5b7a6":"We don't have any Missing Data","e4aef165":"**Polynomial Regression**"}}