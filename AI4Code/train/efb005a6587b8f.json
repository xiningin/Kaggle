{"cell_type":{"9c7ca173":"code","73f81599":"code","65a85cde":"code","b57a6d3a":"code","7227ab36":"code","deee4a51":"code","daaa9ec3":"code","bc999de4":"code","a5b62bcd":"code","d4432609":"code","851bc0b9":"code","b0905ee1":"code","d632dec6":"code","ddc634d4":"code","ecbea6b8":"code","536d6b76":"code","8d477c2a":"code","e15c2941":"code","ee73ec6a":"code","b4f12a6e":"code","28359232":"code","59cc9496":"code","2bd993cb":"code","4a943b5d":"code","3e9371c8":"code","40461b5f":"code","2310d022":"code","6b101b89":"code","f65abb72":"code","88c9da88":"code","829590a8":"code","27230586":"code","eb409ae0":"code","291881aa":"code","1d1e18b8":"markdown","b4d57b5b":"markdown","6adc5b11":"markdown"},"source":{"9c7ca173":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","73f81599":"df=pd.read_csv('https:\/\/raw.githubusercontent.com\/krishnaik06\/Feature-Engineering-Live-sessions\/master\/monthly-milk-production-pounds.csv')","65a85cde":"df.head()","b57a6d3a":"df.columns=['ds','y']","7227ab36":"df","deee4a51":"df.drop(168,axis=0,inplace=True)","daaa9ec3":"df.plot()","bc999de4":"df['ds']=pd.to_datetime(df['ds'])","a5b62bcd":"df.head()","d4432609":"df['y'].plot()","851bc0b9":"df['y'].head()","b0905ee1":"df['y'].plot()","d632dec6":"from fbprophet import Prophet\nimport matplotlib.pyplot as plt\n%matplotlib inline","ddc634d4":"dir(Prophet)","ecbea6b8":"#intialize the model\nmodel=Prophet()\nmodel.fit(df)","536d6b76":"model","8d477c2a":"model.seasonalities","e15c2941":"model.component_modes","ee73ec6a":"#future dates of 365 days\nfuture_dates=model.make_future_dataframe(periods=365)","b4f12a6e":"df.tail()","28359232":"future_dates","59cc9496":"#prediction\nprediction=model.predict(future_dates)","2bd993cb":"prediction.head()","4a943b5d":"prediction[['ds','yhat','yhat_lower','yhat_upper',]].tail()","3e9371c8":"prediction[['ds','yhat','yhat_lower','yhat_upper',]].head()","40461b5f":"###plot the predicted prediction\nmodel.plot(prediction)","2310d022":"###visualize each componeent trends,weekly\nmodel.plot_components(prediction)","6b101b89":"df.shape","f65abb72":"from fbprophet.diagnostics import cross_validation\ndf_cv=cross_validation(model,horizon=\"365 days\",period='180 days',initial='1095 days')","88c9da88":"df.head()","829590a8":"df_cv.head()","27230586":"from fbprophet.diagnostics import performance_metrics\ndf_performance=performance_metrics(df_cv,)\ndf_performance.head()","eb409ae0":"df_performance","291881aa":"from fbprophet.plot import plot_cross_validation_metric\nfig=plot_cross_validation_metric(df_cv,metric='rmse')","1d1e18b8":"##cross validation \n1.horizonthe forecast horizon\n2.intialize the sizeofthe intial training period\n3.period ","b4d57b5b":"##ploting the forcast","6adc5b11":"* * #obtaining performace metric"}}