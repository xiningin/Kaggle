{"cell_type":{"5d91c0bc":"code","6e9618f7":"code","2fc1bb76":"code","65e294dc":"code","2dff897a":"code","16e14ccb":"code","4424b06b":"code","1a5c8b53":"code","bbe4ecfa":"code","ff2ac7e5":"code","1cd4cc18":"code","dce02bbc":"code","eaeaa8f4":"code","c7ff4015":"code","52cbd10d":"code","13f09c8b":"code","199be005":"code","b5308f7c":"code","dac63d36":"code","10c168e2":"markdown","27c69f2c":"markdown","bfbe36a7":"markdown","cd2eb89e":"markdown","15845071":"markdown","633e245e":"markdown","494a235a":"markdown","ef106acb":"markdown","32ee0b26":"markdown","b995878d":"markdown","55eab46d":"markdown","697be610":"markdown","bbf97d31":"markdown","7a158988":"markdown","c336a1cb":"markdown","34a03a8c":"markdown","2a854a35":"markdown","1d95c7f5":"markdown","fdd71263":"markdown"},"source":{"5d91c0bc":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport pydicom as dicom\nimport cv2\nimport ast\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","6e9618f7":"path = '\/kaggle\/input\/siim-covid19-detection\/'\nos.listdir(path)","2fc1bb76":"train_image = pd.read_csv(path+'train_image_level.csv')\ntrain_study = pd.read_csv(path+'train_study_level.csv')\nsamp_subm = pd.read_csv(path+'sample_submission.csv')","65e294dc":"print('Number train images samples:', len(train_image))\nprint('Number train study samples:', len(train_study))\nprint('Number test samples:', len(samp_subm))","2dff897a":"train_image.head()","16e14ccb":"train_study.head()","4424b06b":"# Define image path of the example\npath_train = path+'train\/'+train_image.loc[0, 'StudyInstanceUID']+'\/'+'81456c9c5423'+'\/'\n# Extract image name of the example\nimg_id = train_image.loc[0, 'id'].replace('_image', '.dcm')\n# Load dicom file\ndata_file = dicom.dcmread(path_train+img_id)\n# Extract image data of the dicom file\nimg = data_file.pixel_array","1a5c8b53":"print(data_file)","bbe4ecfa":"print('Image shape:', img.shape)","ff2ac7e5":"boxes = ast.literal_eval(train_image.loc[0, 'boxes'])\nboxes","1cd4cc18":"fig, ax = plt.subplots(1, 1, figsize=(20, 4))\n\nfor box in boxes:\n    p = matplotlib.patches.Rectangle((box['x'], box['y']), box['width'], box['height'],\n                                     ec='r', fc='none', lw=2.)\n    ax.add_patch(p)\nax.imshow(img, cmap='gray')\nplt.show()","dce02bbc":"fig, axs = plt.subplots(3, 3, figsize=(20, 20))\nfig.subplots_adjust(hspace = .1, wspace=.1)\naxs = axs.ravel()\n\nfor row in range(9):\n    study = train_image.loc[row, 'StudyInstanceUID']\n    path_in = path+'train\/'+study+'\/'\n    folder = os.listdir(path_in)\n    path_file = path_in+folder[0]\n    filename = os.listdir(path_file)[0]\n    file_id = filename.split('.')[0]\n    \n    data_file = dicom.dcmread(path_file+'\/'+file_id+'.dcm')\n    img = data_file.pixel_array\n    if (train_image.loc[row, 'boxes']!=train_image.loc[row, 'boxes']) == False:\n        boxes = ast.literal_eval(train_image.loc[row, 'boxes'])\n    \n        for box in boxes:\n            p = matplotlib.patches.Rectangle((box['x'], box['y']), box['width'], box['height'],\n                                     ec='r', fc='none', lw=2.)\n            axs[row].add_patch(p)\n    axs[row].imshow(img, cmap='gray')\n    axs[row].set_title(train_image.loc[row, 'label'].split(' ')[0])\n    axs[row].set_xticklabels([])\n    axs[row].set_yticklabels([])","eaeaa8f4":"label_dict = {0: 'none', 1: 'simple_opacity', 2: 'double_opacity'}","c7ff4015":"def split_label(s):\n    split_string = s.split(' ')\n    if len(split_string)==6 and 'none' in split_string:\n        return 0\n    elif len(split_string)==6 and 'opacity' in split_string:\n        return 1\n    else:\n        return 2","52cbd10d":"train_image['category'] = train_image['label'].apply(split_label)","13f09c8b":"train_image.head()","199be005":"train_image['category'].value_counts().sort_index().rename(label_dict).plot.bar(rot=0, color='orange', alpha=0.6, grid=True, figsize=(8,4), fontsize=16)\nplt.show()","b5308f7c":"train_study.sum()[1:].plot.bar(rot=45, color='orange', alpha=0.6, grid=True, figsize=(8,4), fontsize=12)\nplt.show()","dac63d36":"samp_subm.to_csv('submission.csv', index=False)","10c168e2":"# Load Data","27c69f2c":"# Export","bfbe36a7":"# Overview","cd2eb89e":"Print meta data of the image:","15845071":"# Data Generator\nTo load the data on demand we use a data generator.\n\n*Coming soon*","633e245e":"# EDA","494a235a":"The train image-level metadata, with one row for each image, including both correct labels and any bounding boxes in a dictionary format.","ef106acb":"# Read DCM File\nWe consider the first train sample.\n\nAll images are stored in paths with the form **study\/series\/image**.","32ee0b26":"# Libraries","b995878d":"The train study-level metadata, with one row for each study, including correct labels.","55eab46d":"Plot the image of the chest-x-ray with the bounding boxes:","697be610":"# Intro\nWelcome to the [SIIM-FISABIO-RSNA COVID-19 Detection](https:\/\/www.kaggle.com\/c\/siim-covid19-detection\/data) compedition.\n\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/26680\/logos\/header.png)\n\nFor handling chest-x-ray data we recommend [this notebook](https:\/\/www.kaggle.com\/drcapa\/chest-x-ray-starter).\n\n<span style=\"color: royalblue;\">Please vote the notebook up if it helps you. Feel free to leave a comment above the notebook. Thank you. <\/span>","bbf97d31":"# Feature Engineering\nThere are 3 labels possible:\n* none: no abnormalities on chest radiographs\n* simple opacity: abnormalities on one side\n* double opacity: abnormalities on both sides\n\nSo we can define 3 catgories:","7a158988":"# Path","c336a1cb":"We consider on the distribution of the three categories:","34a03a8c":"Next we have a look on the study-level metadata:\n* Negative for Pneumonia - 1 if the study is negative for pneumonia, 0 otherwise\n* Typical Appearance - 1 if the study has this appearance, 0 otherwise\n* Indeterminate Appearance  - 1 if the study has this appearance, 0 otherwise\n* Atypical Appearance  - 1 if the study has this appearance, 0 otherwise","2a854a35":"Image shape:","1d95c7f5":"# Show Examples\nWe plot some examples with the chest-x-ray image, the bounding boxes and the label:","fdd71263":"Bounding Boxes:"}}