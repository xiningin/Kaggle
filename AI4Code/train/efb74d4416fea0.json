{"cell_type":{"28d0fa99":"code","c4d2050d":"code","2abfa326":"code","0af9f403":"code","18e9f916":"code","6a0e480b":"code","97a3cf8c":"code","fb3df8b1":"code","c87f8b31":"code","a0108ee3":"code","8f5f00f9":"code","6b3e243f":"code","b75845dc":"code","bcc3e250":"code","bf7b39b2":"code","e9b73c1a":"code","e3237cc9":"code","3c0f95b8":"code","bf19a147":"code","c3245357":"code","5739302e":"code","aeb63093":"code","c44cd726":"code","7d21e8f8":"code","c12ff0f2":"code","6264bc3b":"code","66be3253":"code","541da234":"code","6e0e3ab1":"code","a0592a9a":"code","81308f15":"code","02b7f30d":"markdown","85f4d907":"markdown","19abe270":"markdown","054b08d7":"markdown","d5e655f7":"markdown","38205730":"markdown","5bfea985":"markdown","195cf057":"markdown","fa32834c":"markdown","d47fe607":"markdown"},"source":{"28d0fa99":"# Matplotlib config\n%matplotlib inline\n%config InlineBackend.figure_formats = ['svg']\n%config InlineBackend.rc = {'figure.figsize': (5.0, 3.0)}\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","c4d2050d":"df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndf_pred = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","2abfa326":"df.head()","0af9f403":"df.dtypes","18e9f916":"print('All data set: ' + str(df.shape))\nprint('Prediction set: ' + str(df_pred.shape))","6a0e480b":"#The label from the first photo\ndf.iloc[0,0]","97a3cf8c":"#Plot the first photo\nplt.imshow(df.iloc[0,1:].to_numpy().reshape(28,28))","fb3df8b1":"plt.figure(figsize=(5,5))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(df.iloc[i,1:].to_numpy().reshape(28,28))\n    plt.xlabel([df.iloc[i,0]])\nplt.show()","c87f8b31":"#Define the X and y variables, delete the lable columns from Xs\nX = df.drop('label',axis=1)  \nX_pred = df_pred\n\ny = df['label']\n\nprint(X.head())\nprint(y.head())","a0108ee3":"print('All data set: ' + str(X.shape))\nprint('Prediction set: ' + str(X_pred.shape))","8f5f00f9":"#Splitting the data\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state= 32)\n\nprint('Train set: ' + str(X_train.shape))\nprint('Test set: ' + str(X_test.shape))\n\nprint('Prediction set: ' + str(X_pred.shape))","6b3e243f":"#Change the type\nX_train = X_train.astype(np.float32)\nX_test = X_test.astype(np.float32)\nX_pred = X_pred.astype(np.float32)","b75845dc":"#Dataframes to numpy array\nX_train_relu_sigm = X_train.to_numpy().reshape(-1, 784)\nX_test_relu_sigm = X_test.to_numpy().reshape(-1, 784)\nX_pred_relu_sigm = X_pred.to_numpy().reshape(-1, 784)\n\nfrom tensorflow.keras.utils import to_categorical\ny_train_relu_sigm = to_categorical(y_train)\ny_test_relu_sigm = y_test","bcc3e250":"#Loading Tensorflow \nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nmodel_relu_sigm = keras.Sequential([\n    keras.Input(shape = (784,)),\n    layers.Dense(1030, activation = \"relu\"),\n    layers.Dense(10, activation = \"sigmoid\")\n])\n\nprint(model_relu_sigm.summary())\n\nmodel_relu_sigm.compile(\n    optimizer = keras.optimizers.RMSprop(),\n    loss = keras.losses.BinaryCrossentropy(),\n    metrics = [\n        keras.metrics.CategoricalAccuracy()\n    ]\n)\n\nmodel_relu_sigm.fit(X_train_relu_sigm, y_train_relu_sigm, \n          batch_size = 64, \n          epochs = 10,\n         validation_split = 0.1\n         )","bf7b39b2":"#Train further with a smaller rate (0.0001)\nmodel_relu_sigm.compile(\n    optimizer = keras.optimizers.RMSprop(0.0001),\n    loss = keras.losses.BinaryCrossentropy(),\n    metrics = [\n        keras.metrics.CategoricalAccuracy()\n    ]\n)\n\nmodel_relu_sigm.fit(X_train_relu_sigm, y_train_relu_sigm, \n          batch_size = 64, \n          epochs = 5,\n          validation_split = 0.1\n         )","e9b73c1a":"y_test_pred_relu_sigm = model_relu_sigm.predict(X_test_relu_sigm.astype(np.float32))\nA_relu_sigm = np.mean(np.argmax(y_test_pred_relu_sigm, axis = 1) == y_test_relu_sigm)\nprint('Accuracy of RELU Sigmoid NN: ' + str(A_relu_sigm))","e3237cc9":"#Dataframes to numpy array\nX_train_relu_soft = X_train.to_numpy().reshape(-1, 784)\nX_test_relu_soft = X_test.to_numpy().reshape(-1, 784)\nX_pred_relu_soft = X_pred.to_numpy().reshape(-1, 784)\n\nfrom tensorflow.keras.utils import to_categorical\ny_train_relu_soft = to_categorical(y_train)\ny_test_relu_soft = y_test","3c0f95b8":"#Loading Tensorflow\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nmodel_relu_soft = keras.Sequential([\n    keras.Input(shape = (784,)),\n    layers.Dense(1024, activation = \"relu\"),\n    layers.Dense(10, activation = \"softmax\")\n])\n\nprint(model_relu_soft.summary())\n\nmodel_relu_soft.compile(\n    optimizer = keras.optimizers.RMSprop(),\n    loss = keras.losses.CategoricalCrossentropy(),\n    metrics = [\n        keras.metrics.CategoricalAccuracy()\n    ]\n)\n\nmodel_relu_soft.fit(X_train_relu_soft, y_train_relu_soft, \n                    batch_size = 64, \n                    epochs = 10, \n                    validation_split = 0.1\n                   )","bf19a147":"#Train further with a smaller rate (0.0001)\nmodel_relu_soft.compile(\n    optimizer = keras.optimizers.RMSprop(0.0001),\n    loss = keras.losses.CategoricalCrossentropy(),\n    metrics = [\n        keras.metrics.CategoricalAccuracy()\n    ]\n)\n\nmodel_relu_soft.fit(X_train_relu_soft, y_train_relu_soft, \n                    batch_size = 64, \n                    epochs = 7, \n                    validation_split = 0.1,\n                   )","c3245357":"y_test_pred_relu_soft = model_relu_soft.predict(X_test_relu_soft)\nA_relu_soft = np.mean(np.argmax(y_test_pred_relu_soft, axis = 1) == y_test_relu_soft)\nprint('Accuracy of RELU Softmax NN: ' + str(A_relu_soft))","5739302e":"#Dataframes to numpy array, reshape\nX_train_cnn = X_train.to_numpy().reshape(-1, 28, 28, 1)\nX_test_cnn = X_test.to_numpy().reshape(-1, 28, 28, 1)\nX_pred_cnn = X_pred.to_numpy().reshape(-1, 28, 28, 1)","aeb63093":"print(X_train_cnn.shape)","c44cd726":"#Normalize\nX_train_cnn = X_train_cnn \/ 255\nX_test_cnn = X_test_cnn \/ 255\nX_pred_cnn = X_pred_cnn \/ 255\n\nfrom tensorflow.keras.utils import to_categorical\ny_train_cnn = to_categorical(y_train)\ny_test_cnn = y_test","7d21e8f8":"#Loading Tensorflow\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nmodel_cnn = keras.Sequential([\n    keras.Input(shape = (28, 28, 1)),\n    layers.Conv2D(50, kernel_size = (3, 3), padding = \"same\", activation = \"relu\"),\n    layers.MaxPooling2D(),\n    layers.Conv2D(50, kernel_size = (3, 3), padding = \"same\", activation = \"relu\"),\n    layers.MaxPooling2D(),\n    layers.Flatten(),\n    #layers.Dropout(0.5),\n    #layers.Dense(1000, activation = \"relu\"),\n    layers.Dropout(0.5),\n    layers.Dense(1000, activation = \"relu\"),\n    layers.Dense(10, activation = \"softmax\")\n])\n\nprint(model_cnn.summary())","c12ff0f2":"model_cnn.compile(\n    optimizer = keras.optimizers.RMSprop(),\n    loss = keras.losses.CategoricalCrossentropy(),\n    metrics = [\n        keras.metrics.CategoricalAccuracy()\n    ]\n)\n\nmodel_cnn.fit(X_train_cnn, y_train_cnn, \n          batch_size = 64, \n          epochs = 15, \n          validation_split = 0.1\n             )","6264bc3b":"#Train further with a smaller rate (0.0001)\nmodel_cnn.compile(\n    optimizer = keras.optimizers.RMSprop(0.0001),\n    loss = keras.losses.CategoricalCrossentropy(),\n    metrics = [\n        keras.metrics.CategoricalAccuracy()\n    ]\n)\n\nmodel_cnn.fit(X_train_cnn, y_train_cnn, \n          batch_size = 64, \n          epochs = 10, \n          validation_split = 0.1\n             )","66be3253":"y_test_pred_cnn = model_cnn.predict(X_test_cnn)\n\nA_cnn = np.mean(np.argmax(y_test_pred_cnn, axis = 1) == y_test_cnn)\n\nprint('Accuracy of CNN: ' + str(A_cnn))","541da234":"relevant_metrics_test = pd.DataFrame({\n    'Model': ['RELU Sigmoid NN', 'RELU Softmax NN', 'CNN'],\n    'Accuracy, A': [A_relu_sigm, A_relu_soft, A_cnn]\n})\nbest_model_test =relevant_metrics_test.sort_values(by='Accuracy, A', ascending=False)\nbest_model_test","6e0e3ab1":"y_pred_cnn = model_cnn.predict(X_pred_cnn)\n\ndf_pred['label'] = np.argmax(y_pred_cnn, axis = 1)\ndf_pred['ImageId'] = range(1,len(y_pred_cnn)+1)","a0592a9a":"df_pred.head()","81308f15":"df_sub = pd.DataFrame({'ImageId': df_pred['ImageId'], 'label': df_pred['label']})\n\ndf_sub.to_csv (r'submission_cezara.csv', index = False, header=True)","02b7f30d":"## <a id='sum'>3.4. Summary<\/a>","85f4d907":"# <a id='fit'>3. Fitting and testing the models<\/a>","19abe270":"**<center><font size=6>Digit Recognizer with CNN<\/font><\/center>**\n***\n\n**Date**: 19.01.2021\n\n**Table of Contents**\n- <a href='#intro'>1. The data<\/a> \n- <a href='#split'>2. Splitting the data<\/a>\n- <a href='#fit'>3. Fitting and validating the models<\/a>\n    - <a href='#relu_sigm'>3.1. NN with RELU and Sigmoid<\/a>\n    - <a href='#relu_soft'>3.2. NN with RELU and Softmax<\/a>\n    - <a href='#cnn'>3.3. CNN with RELU and Softmax<\/a>\n    - <a href='#sum'>3.4. Summary<\/a>\n- <a href='#perd'>4. Predicting with CNN<\/a>\n- <a href='#sub'>5. Submitting the file<\/a>","054b08d7":"## <a id='cnn'>3.3. CNN with RELU and Softmax<\/a>","d5e655f7":"# <a id='intro'>1. The data<\/a>","38205730":"## <a id='relu_soft'>3.2. NN with RELU and Softmax<\/a>","5bfea985":"# <a id='split'>2. Splitting the data<\/a>","195cf057":"## <a id='relu_sigm'>3.1. NN with RELU and Sigmoid<\/a>","fa32834c":"# <a id='sub'>5. Submitting the file<\/a>","d47fe607":"# <a id='pred'>4. Predicting with CNN<\/a>"}}