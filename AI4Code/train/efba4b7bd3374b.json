{"cell_type":{"26408ac9":"code","ac6a0194":"code","079e0f4b":"code","ceef1571":"code","7e100e4d":"code","9c814beb":"code","093cad3d":"code","4d97ab50":"code","39f8d7e4":"code","26ccdfb5":"code","2e92ef19":"code","536f8084":"code","db5a22d2":"code","d9d189f3":"code","aa8088af":"code","4573aa66":"code","d4e401b0":"code","b6983a02":"code","1c76eb5b":"code","57b0d460":"code","5eb7240f":"code","933306d6":"code","ced23e05":"code","1f6c5a9a":"code","b0b21634":"code","d804af25":"code","4bad7f25":"code","40989d4f":"code","769acd8a":"code","4055107d":"markdown","9de4a330":"markdown","e159c3d5":"markdown","37828176":"markdown","35909f80":"markdown","af728afd":"markdown","4d87c320":"markdown","986c2d6d":"markdown","ef21a806":"markdown","c26dbff1":"markdown","d4bf83cf":"markdown","d766b81e":"markdown"},"source":{"26408ac9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')","ac6a0194":"train_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","079e0f4b":"train_df.columns","ceef1571":"train_df.head()","7e100e4d":"train_df.describe()","9c814beb":"train_df.info()","093cad3d":"def bar_plot(variable):\n    \"\"\"\n    input: variable, ex: \"sex\"\n    output: bar plot & value count\n    \n    \"\"\"\n    # get feature \n    var = train_df[variable]\n    \n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9, 3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Variable\")\n    plt.show()\n    print(\" {}: \\n {} \" .format(variable, varValue))","4d97ab50":"category = ['Survived', 'Sex', 'Pclass', 'Embarked', 'SibSp', 'Parch']\n\nfor i in category:\n    bar_plot(i)","39f8d7e4":"category2 = ['Name', 'Cabin', 'Ticket']\nfor i in category2:\n    print(\"{} \\n \" .format(train_df[i].value_counts()))","26ccdfb5":"def plot_hist(variable):\n    plt.figure(figsize = (10, 4))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\" .format(variable))\n    plt.show()","2e92ef19":"numericVar = [ \"Fare\", \"Age\", \"PassengerId\"]\nfor i in numericVar:\n    plot_hist(i)","536f8084":"# Pclass - Survived\ntrain_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","db5a22d2":"# Sex - Survived\ntrain_df[['Sex', 'Survived']].groupby(['Sex'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","d9d189f3":"# SibSp - Survived\ntrain_df[['SibSp', 'Survived']].groupby(['SibSp'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","aa8088af":"# Sex - Survived\ntrain_df[['Parch', 'Survived']].groupby(['Parch'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","4573aa66":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","d4e401b0":"train_df.loc[detect_outliers(train_df, ['Age', 'SibSp', 'Parch', 'Fare'])]","b6983a02":"train_df = train_df.drop(detect_outliers(train_df, ['Age', 'SibSp', 'Parch', 'Fare']), axis = 0).reset_index(drop = True)","1c76eb5b":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)","57b0d460":"train_df.head()","5eb7240f":"# check if any column has null variable\ntrain_df.columns[train_df.isnull().any()]","933306d6":"train_df.isnull().sum()","ced23e05":"## We can delete the missing values but we do not want to lose any value, so that they will be filled.\n\ntrain_df[train_df['Embarked'].isnull()]","1f6c5a9a":"train_df.boxplot(column = 'Fare', by = 'Embarked')\nplt.show()","b0b21634":"train_df['Embarked'] = train_df['Embarked'].fillna('C')\n# CHECK\ntrain_df[train_df['Embarked'].isnull()]","d804af25":"train_df[train_df['Fare'].isnull()]","4bad7f25":"train_df.groupby('Pclass').Fare.mean()","40989d4f":"# train_df.groupby('Embarked').Fare.mean()\n# train_df['Fare'] = train_df['Fare'].fillna(12.741220)\n# train_df[train_df.PassengerId == 1044]\n\n## Or\n\ntrain_df['Fare'] = train_df['Fare'].fillna(np.mean(train_df[train_df['Pclass'] == 3]['Fare']))\ntrain_df[train_df.PassengerId == 1044]","769acd8a":"train_df[train_df['Fare'].isnull()]","4055107d":"<a id = '5' ><\/a><br>\n## Numerical Variable Analysis","9de4a330":"<a id = '8'><\/a><br>\n# Missing Value\n   * Find Missing Value\n   * Fill Missing Value","e159c3d5":"<a id = '2' > <\/a> <br>\n## Variable Description\n1. PassengerId: Unique id number to each passenger.\n2. Survived: Passenger who survived(1) or died(0).\n3. Pclass: Passenger class.\n4. Name: Name of passenger.\n5. Sex: Gender of passenger.\n6. Age: Age of passenger.\n7. SibSp: Number of siblings\/spouses.\n8. Parch: Numver of parents\/childs.\n9. Ticket: Ticket number.\n10. Fare: Cost of ticket.\n11. Cabin: Place that passengers stay.\n12. Embarked: Port where passengers embarked(C = Cherbourg, Q = Queenstown, S = Southampton)","37828176":"<a id = '9'><\/a><br>\n# Find Missing Value","35909f80":"<a id = '6' ><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","af728afd":"<a id = '10'><\/a><br>\n# Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","4d87c320":"<a id = '7' ><\/a><br>\n# Outlier Detection","986c2d6d":"<a id = '1'><\/a><br>\n## Load and check data","ef21a806":"<a id = '3' ><\/a><br>  \n# Univariate Variable Analysis\n* Categorical Variable Analysis: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch.\n* Numerical Variable Analysis: Fare, Age and PassengerId.","c26dbff1":"<a id = '4' ><\/a><br>\n## Categorical Variable Analysis","d4bf83cf":"* float64(2) : Age, Fare.\n* int64(5): PassengerId, Survived, Pclass, Sibsp, Parch.\n* object(5): Name, Sex, Ticket, Cabin, Embarked.","d766b81e":"# Introduction\n\n\nThe Titanic accident is one of the most dramatic ship break-accident all around the world, forr all times. In 1912, during her voyage, The Titanic sank because of iceberg, killing 1502 out of 2224 passengers and crew.\n<font color = 'Red'>\n# Content:\n    \n    \n1. [Load and Check data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        *     [Categorical Variable Analysis](#4)\n        *     [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)"}}