{"cell_type":{"bb8ad340":"code","c16d28d9":"code","a131b2ad":"code","8a82ed31":"code","ca5d297a":"code","124dbefd":"code","b3603438":"code","3c56fad5":"code","9cf420a5":"code","25d1bfa6":"code","7b954655":"code","d7e8a1f9":"code","a87d24d4":"code","29042556":"code","59c9aab3":"code","a7cde21f":"code","1c19aef4":"code","5a49e4d2":"code","dc793b96":"code","f221843f":"code","37300e86":"code","440c8da0":"code","bc069d4a":"code","e65ff479":"code","66d46713":"code","36c349e8":"code","ecc84b34":"code","5e77ca10":"code","d99d1b6d":"code","ad911432":"code","78036ebb":"code","916966fc":"code","d49db942":"code","fedc7bff":"code","a2cb84ec":"code","0c0937b4":"code","e8482796":"code","00c074aa":"markdown"},"source":{"bb8ad340":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import r2_score, accuracy_score, mean_absolute_error, mean_squared_error, roc_curve, auc, confusion_matrix, classification_report\n\nfrom imblearn.over_sampling import RandomOverSampler","c16d28d9":"!ls ..\/input\/ozone-level-detection","a131b2ad":"data=pd.read_csv(\"..\/input\/ozone-level-detection\/eighthr.data.csv\", header=None)\ndata","8a82ed31":"data.info()","ca5d297a":"data.shape","124dbefd":"data.drop([0], axis=1, inplace=True)\ndata","b3603438":"data.describe()","3c56fad5":"for i in data.columns:\n    data[i]=data[i].replace([\"?\"],np.nan)","9cf420a5":"data.isna().sum()","25d1bfa6":"data","7b954655":"for i in data.columns[:-1]:\n    data[i]=data[i].astype(str).astype(float)","d7e8a1f9":"for i in data.columns:\n    if data[i].isnull().sum()>0:\n        data[i]=data[i].ffill()","a87d24d4":"data.isnull().sum()","29042556":"data.info()","59c9aab3":"data.head()","a7cde21f":"data.describe()","1c19aef4":"data[73].value_counts()","5a49e4d2":"x=data.drop([73], axis=1)\ny=data[73]","dc793b96":"oversample = RandomOverSampler()\nxnew, ynew= oversample.fit_resample(x, y)","f221843f":"ynew.value_counts()","37300e86":"new_data=pd.DataFrame(data=xnew, columns=xnew.columns)\nnew_data[73]=ynew\nnew_data","440c8da0":"corr=new_data.corr()\nplt.subplots(figsize=(30, 30))\nsns.heatmap(corr, annot=True)","bc069d4a":"corr[73].sort_values(ascending=False)","e65ff479":"def get_corelated_col(cor_dat, threshold):\n    feature=[]\n    value=[]\n    for i ,index in enumerate(cor_dat.index):\n        if cor_dat[index] > threshold:\n            feature.append(index)\n            value.append(cor_dat[index])\n    df = pd.DataFrame(data = value, index = feature, columns=['corr value'])\n    return df\n            \ntop_corelated_values = get_corelated_col(corr[73], 0)\ntop_corelated_values","66d46713":"final = new_data[top_corelated_values.index]\nfinal.shape","36c349e8":"x=final.drop(73, axis=1)\n\nscaler = StandardScaler()\nx =scaler.fit_transform(x)\n\ny=final[73]\ny","ecc84b34":"xtrain, xtest, ytrain, ytest= train_test_split(x, y, test_size=0.25, random_state=42)","5e77ca10":"reg= KNeighborsClassifier(n_neighbors=6)\nreg.fit(xtrain, ytrain)","d99d1b6d":"ypredict=reg.predict(xtest)","ad911432":"print(\"Mean Absolute Error is {} \".format(mean_absolute_error(ytest, ypredict)))\nprint(\"Mean Squared Error is {} \".format(mean_squared_error(ytest, ypredict)))","78036ebb":"fpr, tpr, threshold= roc_curve(ytest, ypredict, pos_label=1)\nplt.plot(fpr, tpr)\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"ROC curve\")\nplt.show()\nprint(\"AUC value is {} \".format(auc(fpr, tpr)))","916966fc":"print(\"Accuracy score of the predictions: {}%\".format(accuracy_score(ypredict, ytest)*100))","d49db942":"# Confusion matrix\n\nconfu = confusion_matrix(ytest, ypredict, labels = [0,1])\nsns.heatmap(confu, annot=True)","fedc7bff":"print(\"Classification Report for our model is \")\nprint(classification_report(ytest, ypredict))","a2cb84ec":"rf= RandomForestRegressor(n_estimators=500)\nrf.fit(xtrain, ytrain)\nypredict=rf.predict(xtest)\nr2_score(ytest, ypredict)","0c0937b4":"#Finding Error Score \nprint(\"Mean Absolute Error is {} \".format(mean_absolute_error(ytest, ypredict)))\nprint(\"Mean Squared Error is {} \".format(mean_squared_error(ytest, ypredict)))","e8482796":"#Plotting AUC curve\nfpr, tpr, threshold= roc_curve(ytest, ypredict, pos_label=1)\nplt.plot(fpr, tpr)\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"ROC curve\")\nplt.show()\nprint(\"AUC value is {} \".format(auc(fpr, tpr)))","00c074aa":"# Applying Random Forest Regressor"}}