{"cell_type":{"8e5b6d43":"code","71690536":"code","ed0f05d2":"code","d066389d":"code","ef05142a":"code","e7559f58":"code","20254553":"code","127826c2":"code","dafb871a":"code","79aadaa2":"code","f1da01a4":"code","e4434ecb":"code","4659df87":"code","b50be0ac":"code","91719916":"code","47bc5c05":"code","7bf4a53a":"code","aaed4c67":"code","0304cc92":"markdown","d08c27b7":"markdown","34dc69df":"markdown","f7b53f14":"markdown","11778c19":"markdown","6d107e36":"markdown","43f4a2d1":"markdown","6ba90c91":"markdown","3632c614":"markdown","a3f25481":"markdown","e130b450":"markdown","db2e0e98":"markdown"},"source":{"8e5b6d43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","71690536":"#import module\nimport numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n%matplotlib inline","ed0f05d2":"movies = pd.read_csv('..\/input\/oscar-movies\/oscars_df.csv')\nmovies.shape","d066389d":"#movies dataseata overview\nmovies.head()\n","ef05142a":"movies.info()","e7559f58":"movies.nunique()","20254553":"oscars = movies[['Oscar Year','Film','Award','IMDB Rating','IMDB Votes','Tomatometer Rating','Tomatometer Count','Audience Rating','Audience Count']]\noscars.head()","127826c2":"oscars.isnull().sum()","dafb871a":"#duplicate values\noscars.duplicated().sum()","79aadaa2":"total_null = oscars.isnull().sum().sort_values(ascending=False) \ncount = oscars.count().sort_values(ascending=False) \nmovies_p = (((oscars.isnull().sum()\/oscars.isnull().count()).sort_values(ascending=False)).round(2))*100 #Get the Percentage\nmovies_p.head(30)","f1da01a4":"oscars1= oscars.dropna()\noscars1['IMDB Votes'] = oscars1['IMDB Votes'].str.replace(',','')\noscars1['IMDB Votes'] = oscars1['IMDB Votes'].astype(float)\noscars1.info()\n","e4434ecb":"# average rating\noscars1['avg.rating']=((oscars1['IMDB Rating']*oscars1['IMDB Votes']+oscars1['Tomatometer Rating']*0.1*oscars1['Tomatometer Count']+oscars1['Audience Rating']*0.1*oscars1['Audience Count'])\/(oscars1['IMDB Votes']+oscars1['Tomatometer Count']+oscars1['Audience Count'])).round(2)\noscars1.head(10)","4659df87":"# Graphic of Oscar Winner Movies\nwinner_rate =oscars1[oscars1.Award =='Winner'].sort_values('Oscar Year',ascending=True)\nplt.figure(figsize=(20,6))\nlw = 2\nplt.plot(winner_rate['Oscar Year'],winner_rate['avg.rating'],  color='red', lw=lw, label='Average Rating')\nplt.plot(winner_rate['Oscar Year'],winner_rate['IMDB Rating'],  color='blue', lw=lw, label='IMDB Rating')\nplt.plot(winner_rate['Oscar Year'],winner_rate['Tomatometer Rating']\/10,  color='green', lw=lw, label='Tomatometer Rating')\nplt.plot(winner_rate['Oscar Year'],winner_rate['Audience Rating']\/10,  color='yellow', lw=lw, label='Audience Rating')\nplt.xlabel('DATE')\nplt.ylabel('Rating')\nplt.xticks(rotation=45, fontsize=8)\nplt.title('Figure 1 : Rating of Oscar Winner Movies')\nplt.legend(loc=\"lower right\")\nplt.grid()\nplt.show()","b50be0ac":"# omparation of nominee rating and winner rating \nnomination_rate =oscars1[oscars1.Award =='Nominee'].sort_values('Oscar Year',ascending=True)\nw1= winner_rate[winner_rate['Oscar Year'] != '1927\/28']\nw1= w1[winner_rate['Oscar Year'] != '1930\/31']\nplt.figure(figsize=(20,6))\nlw = 2\nplt.plot(nomination_rate['Oscar Year'],nomination_rate['avg.rating'],  color='black', lw=lw,label='Nominee')\nplt.plot(w1['Oscar Year'],w1['avg.rating'],  color='red', lw=lw,label='Oscar Winner')\n\nplt.xlabel('DATE')\nplt.ylabel('Rating')\nplt.xticks(rotation=45, fontsize=8)\nplt.title('Figure 2: Rating of Movies')\nplt.legend(loc=\"lower right\")\nplt.grid()\nplt.show()","91719916":"# most high rate movie\nhigh_rating =oscars1.sort_values('avg.rating',ascending=False)","47bc5c05":"winner_nominee = high_rating[high_rating['avg.rating']> 8].groupby('Award').agg({'avg.rating': 'count'}).sort_values('avg.rating',ascending = False).reset_index()\nplt.figure(figsize=(10,6))\n# Plot the pie chart\nplt.pie(winner_nominee['avg.rating'],labels=winner_nominee['Award'], autopct='%1.1f%%', startangle=30)\n# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.axis('equal')\nplt.subplots_adjust(wspace=2, hspace=1)\nplt.title(\"Figure 3: Winner and Nominee for movie Rating above 8\")\n# Display the graph onto the screen\nplt.show()","7bf4a53a":"# TOP 10 Oscar Winner Movie\ntop10awards=winner_rate.sort_values('avg.rating',ascending=False).head(10)     \nplt.figure(figsize=(10,6))\nclr =(\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\nplt.bar(top10awards['Film'], top10awards['avg.rating'], color=clr)\nplt.xlabel('Film')\nplt.ylabel('Ratings')\nplt.xticks(rotation=70, fontsize=10)\nplt.title('Figure 4: TOP 10 High Ratings Oscar Movies')\nplt.grid()\nplt.show()","aaed4c67":"### TOP 10 Oscar High Rating Movie\ntop10rating=high_rating.sort_values('avg.rating',ascending=False).head(10)  \nplt.figure(figsize=(10,6))\nclr =(\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\nplt.bar(top10rating['Film'], top10rating['avg.rating'], color=clr)\nplt.xlabel('Film')\nplt.ylabel('Ratings')\nplt.xticks(rotation=80, fontsize=10)\nplt.title('Figure 5: TOP 10 High Ratings Movies')\nplt.grid()\nplt.show()","0304cc92":"If we look up the general, The top 3 rating movies are \"The Shawshank Redemption\", \"The Godfather\", and \"Pulp Fiction\". If we compare Figure 4 and Figure 5, We found that 6 movies are not winning the oscars but having high ratings while only 6 oscar movie include in the top 10 list.\nHowever, since the rating score between of movies very tight, we can see that in general, nominee and winner are considered high rated movies that can be translated as movies that liked by most viewers.","d08c27b7":"the Dataset column cointain 8 float, 3 integer, and 19 objects. The total rows suppose to be 571 but some data seem has null value. We will start to fix the null value in order to clean the data. In this study, we are going to include only Oscar Year, Film, Award, IMDB Rating, IMDB Votes, TOmatometer Rating, Tomatometer Count, Audience Rating and Audience Count.","34dc69df":"On the Next step, we will see how sthe rating trend for oscar winning movies.","f7b53f14":"According to Figure 3 above, we can see that from movie with rating above 8, only   24 % of oscar winning movie on the list while 76% are nominee. ","11778c19":"According to Graphic above, Oscar Winner Movies in beginning of the time show have low rating. By its time, the ratings are improved. from three source of rating system (IMDB, Tomatometer, Audiance), it show similiar trends. The average rating will be used for further analysis. most oscar winning movies are in range of above 7.\nWe going to compare its rating to nominee movies ratings.","6d107e36":"The movie contain 571 rows and 30 columns. Lets see the columns attributes. It seem contain NaN values that we need to clean.","43f4a2d1":"The Top 3 high rating oscar winning movies are \"the Godfather\", followed by \" Schindler's List\" and Forest Gump.","6ba90c91":"We found that 29 columns contain null values. Dataset does not show duplicate values. We going to see how many percentage of data did not countain value. if the missing data over 15% of total data, the data will be dropped.","3632c614":"As we can see data rows reduced from 571 to 439 rows. the IMDB Votes converted into float. Since we have three indicator rating (IMDB, Tomatometer, and Audiance), we are going to add column repsenting it's average value from three. Please in mind that while scale of IMDB from 1 to 10, the other two using scale 1 to 100. ","a3f25481":"The Oscar winner movies ratings show close but slightly above nominee movies. Lets see if top 20 high rate movie contain nominee movies as wells.","e130b450":"We found that data missing each row over 23%. It would be good idea to drop the null values","db2e0e98":"# OSCAR MOVIES\nAt this section, we going to explore the dataset of Oscar Movies. Before define the task, lets we what the data set contain about and what can we analyze. "}}