{"cell_type":{"65182dcb":"code","e4600d41":"code","d4b18de9":"code","4882f0c9":"code","77d643e2":"code","7e8f959b":"code","13bfda9d":"code","f3551799":"code","d2038c40":"code","03c156da":"code","b21d248e":"code","daad86b7":"code","61fde368":"code","db767417":"code","beb10dcc":"code","c14518be":"code","03b731bd":"code","f02fbdc7":"code","15491da7":"code","946ac828":"code","63d6a2fa":"code","c4cdaa02":"code","e8c2ff6c":"code","3e000fb3":"code","1615e0f9":"code","da0b992c":"code","9c329db7":"code","a87b2b5c":"code","8cfedca2":"code","d01d0908":"code","1a43f124":"markdown","7f9fadd9":"markdown","228797b5":"markdown","88ace29e":"markdown","c45dde78":"markdown","aa6a42c1":"markdown","7c9bd4b2":"markdown"},"source":{"65182dcb":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport os, re, sys\nimport matplotlib.pyplot as plt\nfrom IPython.core.display import HTML, Image","e4600d41":"YEAR = 2016\nOUTPUT_ZIP = f'mm_heatmaps_{YEAR}.zip'\nDIR  = f'..\/input\/2016-march-ml-mania'\nPDIR = f'{DIR}\/predictions\/predictions'\nTDIR = f'..\/input\/meta-march-mania'\nPNG_DIR = '\/kaggle\/plots'","d4b18de9":"os.makedirs(PNG_DIR, exist_ok=True)","4882f0c9":"teams = pd.read_csv(f'{DIR}\/Teams.csv', index_col=0)\nteams.shape","77d643e2":"seeds = pd.read_csv(f'{DIR}\/TourneySeeds.csv', index_col=2).query(f'Season=={YEAR}')\nseeds.shape","7e8f959b":"res = pd.read_csv(f'{TDIR}\/GroundTruths.csv', index_col=0).query(f'Season=={YEAR}')\nres.shape","13bfda9d":"ids = set(res.Low) | set(res.High)\nnteams = len(ids)\nnteams","f3551799":"seeds = seeds[seeds.index.isin(ids)] # 64 teams\nseeds = seeds.join(teams)\n', '.join(seeds.Team_Name) # Team_Name -> seed based position","d2038c40":"inds = dict(zip(seeds.index, range(nteams)))\nprint(inds)  # TeamID -> seed based position","03c156da":"ICOLS = ['i1', 'i2']\n\ndef add_inds(df, col):\n    parts = getattr(df, col).str.split('_')\n    df = df.assign(**{ICOLS[i]:parts.str[i+1].astype(int).map(inds) for i in range(2)})\n    df = df.dropna()\n    df[ICOLS] = df[ICOLS].astype(int)\n    return df\n\n# return a submission in a standard form\ndef read_sub(name):\n    df = pd.read_csv(name)\n    df.columns = df.columns.str.lower()\n    df = add_inds(df, 'id')\n    return df[['id', 'pred'] + ICOLS].set_index('id')\n\ndef log_loss(df):\n    p = np.where(df.Truth, df.pred, 1 - df.pred)\n    # clip low predictions to avoid infinite loss\n    p = p.clip(min=1e-15)\n    return (-np.log(p)).mean()\n\ndef score(sub):\n    df = sub.join(res, how='inner')\n    return log_loss(df)\n\n# return final score and the round 1 score from first 32 games\ndef score_multi(sub):\n    df = sub.join(res, how='inner')\n    return log_loss(df), log_loss(df.query('Round==1'))\n\ndef to_matrix(sub):\n    m = np.ones((nteams, nteams)) * 0.5\n    m[sub.i1, sub.i2] = sub.pred\n    m[sub.i2, sub.i1] = 1 - sub.pred\n    return m","b21d248e":"plt.rc('figure', figsize=(14, 14))\nplt.rc('font', size=12)","daad86b7":"def save_heatmap(probs, filename, cmap=plt.cm.seismic):\n    fig, ax = plt.subplots()\n    heatmap = ax.pcolormesh(probs, vmin=0., vmax=1., cmap=cmap)\n\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n    ax.spines['left'].set_visible(False)\n    \n    ax.invert_yaxis()\n    ax.tick_params(direction='out')\n    ax.xaxis.tick_top()\n    ax.yaxis.tick_left()\n    plt.xticks(rotation=90)\n    \n    team_labels = seeds.Team_Name.values\n    # put the major ticks at the middle of each cell\n    ax.set_xticks(np.arange(nteams)+0.5, minor=False)\n    ax.set_yticks(np.arange(nteams)+0.5, minor=False)\n    ax.set_xticklabels(team_labels)\n    ax.set_yticklabels(team_labels)\n    plt.savefig(filename, bbox_inches='tight')   ","61fde368":"save_heatmap(to_matrix(add_inds(res, 'index').rename(columns={'Truth': 'pred'})), f'truth_{YEAR}', cmap=plt.cm.bwr)","db767417":"lst = os.listdir(PDIR)\nlen(lst)","beb10dcc":"errs = []\nsums = 0\ncount = 0\nfor name in lst:\n    if name.lower().endswith('.csv'):\n        try:\n            sub = read_sub(f'{PDIR}\/{name}')\n            out = re.sub(r'\\.csv$', '.png', name, re.IGNORECASE)\n            s = score_multi(sub)\n            m = to_matrix(sub)\n            sums += sub[['pred']].clip(0, 1)\n            count += 1\n            save_heatmap(m, f'{PNG_DIR}\/{s[0]:.6f}_{s[1]:.6f}_{out}')\n            plt.close()\n        except:\n            errs.append(name)","c14518be":"len(errs)","03b731bd":"errs","f02fbdc7":"ensemble = (sums \/ count)\nensemble = add_inds(ensemble, 'index')\nscore_multi(ensemble)","15491da7":"save_heatmap(to_matrix(ensemble), f'ensemble_{YEAR}')","946ac828":"lst = sorted(os.listdir(PNG_DIR))\nlen(lst)","63d6a2fa":"for i, f in enumerate(lst[:50], 1):\n    (score, sr1, tag) = re.findall(r'([\\d\\.]+)_([\\d\\.]+)_(.+)\\.png$', f)[0]\n    name = tag.replace('_', ' ')\n    display(HTML(\n        f'<h1 id=\"{tag}\">[#{i}] {name}<\/h1>'\n        f'<p>Score: {score} <br\/>'\n        f'R1 Score: {sr1}'\n    ))\n    display(Image(f'{PNG_DIR}\/{f}'))","c4cdaa02":"lst = np.asarray(os.listdir(PNG_DIR))\n\nnp.random.seed(42)\nnp.random.shuffle(lst)\n\ndef read_row(names):\n    return np.hstack([plt.imread(os.path.join(PNG_DIR, n)) for n in names])\n\ndef read_grid(names2d):\n    return np.vstack([read_row(row) for row in names2d])\n\ndef pop_gallery(shape):\n    global lst\n    n = np.product(shape)\n    g = read_grid(lst[:n].reshape(shape))\n    lst = lst[n:]\n    return g\n\ndef show_gallery(gal):\n    fig, ax = plt.subplots(figsize=(12, 12))\n    ax.imshow(gal, interpolation='bilinear')\n    ax.axis('off')\n    plt.tight_layout(pad=0)\n    plt.show()","e8c2ff6c":"show_gallery(pop_gallery((2,2)))","3e000fb3":"show_gallery(pop_gallery((3,3)))","1615e0f9":"show_gallery(pop_gallery((4,4)))","da0b992c":"show_gallery(pop_gallery((5,5)))","9c329db7":"show_gallery(pop_gallery((6,6)))","a87b2b5c":"show_gallery(pop_gallery((7,7)))","8cfedca2":"show_gallery(pop_gallery((8,8)))","d01d0908":"!7z a -bd -mmt4 {OUTPUT_ZIP} {PNG_DIR}\/*.png","1a43f124":"# Heatmap All *March Machine Learning Mania 2016* Submissions\n\nThe plot format is introduced [here](https:\/\/www.kaggle.com\/c\/march-machine-learning-mania-2017\/discussion\/30333), along with generated heatmaps for all the 2017 entries.\n\nTo recap: it is easiest to read the row for each team, where white means 50:50, red indicates probably winning, blue means probably losing, the deeper the color, the higher the probability.\n\nIn this Notebook the play-in matches are removed, leaving a 64x64 grid showing the four 16x16 regions, and all possible tournament matches.\n\nThe outline is:\n\n 1. list all csv submissions\n 2. for each: load; score; save heatmap\n 3. display selection\n 4. zip all 1084 heatmaps for download\n\n","7f9fadd9":"# Ground Truth\n\nThis is it &mdash; the correct solution to 2016 &mdash; all the 63 matches actually played, and the results; reading rows, red means a win, blue is a loss. All the white cells are ignored in scoring solutions.","228797b5":"# Generate All Plots","88ace29e":"# Zip All Plots\n\nThat's still less than half the submissions!\n\nSurely some of the above tempt you to download them all and take a look?","c45dde78":"# Ensemble of All Submissions","aa6a42c1":"# Random Galleries!\n\nLet's zoom out, step by step, seeing more and more submissions :)","7c9bd4b2":"# Preview Top Plots\n\nShow the best submissions by log loss score - ranks not exactly same as leaderboard ranks as some teams had two strong submissions. See the [2016 leaderboard here](https:\/\/www.kaggle.com\/c\/march-machine-learning-mania-2016\/leaderboard). Also, beware that double digit logloss values 10+ aren't sorted correctly - but that will not affect the top 50 shown here."}}