{"cell_type":{"e855f596":"code","77506f4d":"code","6dffdd26":"code","1736a0a2":"code","366e54cb":"code","4f3d65d1":"code","73cf7bf6":"code","a281e38e":"code","b5d2f4e4":"code","0d8bb6c1":"code","313074db":"code","1422f98d":"code","dea6d22b":"code","91dc1b90":"code","ad2fa34d":"code","15712324":"code","e2715fc3":"code","a9e6b3c2":"code","fb4c9e96":"code","dcac4bba":"markdown","841f3c8c":"markdown","70e1e278":"markdown","e50b5b48":"markdown","620ee4ea":"markdown","12951261":"markdown","57e03d27":"markdown","6417d7a3":"markdown","cf7aad0f":"markdown","3430b682":"markdown","373e4040":"markdown","d6a71947":"markdown","be71fd11":"markdown","3b31311c":"markdown","4159aea1":"markdown","918dc588":"markdown","fb896414":"markdown","f8892ea1":"markdown","f9b8b4d4":"markdown","70f9bc34":"markdown","3ab48ece":"markdown","b5e4e3ef":"markdown","156e8910":"markdown","9edb5dfc":"markdown","18cca5e6":"markdown","6bcda6e3":"markdown","6aee7e61":"markdown","c8fc7554":"markdown","8978f0b0":"markdown","bdb86c6d":"markdown","777796ae":"markdown","46f624ee":"markdown","416713be":"markdown","c747cdc8":"markdown","bb7d0e35":"markdown","fe20202c":"markdown"},"source":{"e855f596":"import os                               # Operating system\nimport math                             # Mathematics\nimport numpy as np                      # Arrays\nimport pandas as pd                     # Dataframes\nimport matplotlib.pyplot as plt         # Graphs\nfrom matplotlib import cm               # Colours\nimport scipy                            # Scientific computing\nimport cvxpy as cp                      # Convex optimisation\nfrom mpl_toolkits.mplot3d import Axes3D # 3D graphs","77506f4d":"%matplotlib inline","6dffdd26":"stocks = [stock.split('.')[0] for stock in sorted(os.listdir('\/kaggle\/input\/australian-historical-stock-prices'))]","1736a0a2":"dates = pd.date_range('2000-01-01', '2020-03-31') # Create date range from 01-01-2000 to 31-03-2020\ndata = pd.DataFrame({'Time': dates})              # Add dates to dataframe with column name","366e54cb":"for stock in stocks:                                                          # For each stock\n    prices = pd.read_csv(                                                     # Read prices into dataframe\n        '\/kaggle\/input\/australian-historical-stock-prices\/' + stock + '.csv', # Get filename\n        usecols=['Date', 'Adj Close']                                         # Select date and adjusted closing price\n    )\n    prices['Date'] = pd.to_datetime(prices['Date'])                           # Typecast dates to datetimes\n    prices.rename(                                                            # Rename columns\n        columns={\"Date\": \"Time\", \"Adj Close\": stock},\n        inplace=True\n    )\n    data = pd.merge(                                                          # Add stock to master dataframe\n        data,                                                                 # Initially contains dates only\n        prices,                                                               # Insert stock prices\n        how='left',                                                           # Left outer join\n        on=['Time'],                                                          # Key on the time column\n        sort=False\n    )","4f3d65d1":"data = data[data['Time'].dt.weekday < 5] # Remove weekend dates\ndata = data.dropna(axis=0, how='all') # Remove empty rows","73cf7bf6":"p = data \\\n    .drop(['Time'], axis=1) \\\n    .tail(1) \\\n    .to_numpy()","a281e38e":"r = data[(data['Time'].dt.weekday == 4) & (data['Time'] >= '2019-01-01')] \\\n    .drop(['Time'], axis=1) \\\n    .pct_change(fill_method='ffill')","b5d2f4e4":"sigma = r.cov().to_numpy()\nmu = r.mean().to_numpy()","0d8bb6c1":"n = len(stocks)","313074db":"x = cp.Variable(shape=n, integer=True)\nthreshold = cp.Parameter(nonneg=True) # maximum portfolio variance\nk = cp.Parameter(nonneg=True) # maximum allocation into one stock","1422f98d":"mean = mu.T*x\nvariance = cp.quad_form(x, sigma)","dea6d22b":"objective = cp.Maximize(mean)","91dc1b90":"constraints = [\n    x >= 0,                                 # no shorting\n    variance <= threshold                   # upper bound on portfolio variance\n]\nfor pi in p:\n    constraints = constraints + [pi*x <= k] # upper bound on single-stock allocation","ad2fa34d":"problem = cp.Problem(objective, constraints)","15712324":"z_values = []\nk_values = np.arange(1000, 5000, 1000)\nthreshold_values = np.arange(1, 5.5, 0.5)\nfor threshold_value in threshold_values:\n    for k_value in k_values:\n        threshold.value = threshold_value\n        k.value = k_value\n        problem.solve()\n        if problem.status != 'optimal': continue\n        counts = x.value.round()\n        investments = p*counts\n        returns = mu@investments[0]\n        z_values.append(returns)","e2715fc3":"if len(z_values) == 0:\n    print('No optimal solutions')\nelse:\n    Z = np.reshape(z_values, (len(k_values), len(threshold_values)))\n    figure = plt.figure(figsize = (12,10))\n    axes = figure.add_subplot(111, projection='3d')\n    for i in range(len(k_values))[::-1]:\n        c = cm.jet(i\/float(len(k_values)))\n        axes.bar(\n            threshold_values,\n            Z[i,:],\n            zs=k_values[i],\n            zdir='y',\n            width=0.4\n        )\n    axes.set_xlabel('Portfolio variance')\n    axes.set_ylabel('Maximum single-asset allocation')\n    axes.set_zlabel('Portfolio return')\n    axes.set_title('Expected portfolio return vs. portfolio variance and maximum single-asset allocation')\n    plt.show()","a9e6b3c2":"stocks_optimal = np.array(stocks)[np.where(counts > 0)]\ncounts_optimal = counts[counts>0]\nprices_optimal = np.around(np.array(p), 2)[0][np.where(counts > 0)]\ninvestments_optimal = np.around(investments, 2)[investments > 0]\ncapital_optimal = np.around(counts_optimal@prices_optimal, 2)\nrisk_optimal = np.around(counts.T@sigma@counts, 2)\nreturn_optimal = np.around(52*returns\/capital_optimal, 3)","fb4c9e96":"print('Stocks:\\t\\t', stocks_optimal)\nprint('Counts:\\t\\t', counts_optimal)\nprint('Prices:\\t\\t', prices_optimal)\nprint('Investments:\\t', investments_optimal)\nprint('Capital:\\t', capital_optimal)\nprint('Return:\\t\\t', return_optimal)\nprint('Risk:\\t\\t', risk_optimal)","dcac4bba":"Plot expected portfolio return as a function of portfolio variance and maximum single-asset allocation","841f3c8c":"Print results","70e1e278":"Calculate expected return and covariance matrix","e50b5b48":"Given a set of $n$ assets:\n* $\\mathbf{p} \\in \\mathbb{R}_+^n$ is the price vector where $p_i$ is the price of asset $i$.\n* $\\mathbf{x} \\in \\mathbb{Z}^n$ is the portfolio allocation vector where $x_i$ is the number of shares in asset $i$ to buy. To prevent shorting: $\\mathbf{x}\\geq0$.\n* In one time period, $\\mathbf{r} \\in \\mathbb{R}^n$ is the return vector where $r_i$ is the return on asset $i$. The return is the difference in price divided by the price at the beginning of the period: $r_i = \\frac{p_{t+1}-p_t}{p_t}$. Portfolio return $R$ is given by: $R = \\mathbf{r}^T\\mathbf{x}$.\n* The return vector $\\mathbf{r}$ can be modelled as a random variable with mean $\\mathbb{E}[\\mathbf{r}]=\\mathbf{\\mu}$ and covariance $\\mathbb{E}[(\\mathbf{r}-\\mathbf{\\mu})(\\mathbf{r}-\\mathbf{\\mu})^T]=\\Sigma$. It follows that the portfolio return is also a random variable with mean $\\mathbb{E}[R]=\\mathbf{\\mu}^T\\mathbf{x}$ and variance $\\mathrm{Var}[R]=\\mathbf{x}^T\\Sigma\\mathbf{x}$.\n* $k \\in \\mathbb{R}_+^n$ is the maximum amount in one asset.","620ee4ea":"Calculate weekly returns from 1 January 2019 onwards","12951261":"Set optimisation variable and parameters","57e03d27":"## 5 Conclusion<a id=\"5\"><\/a>","6417d7a3":"### 2.1 Libraries<a id=\"2.1\"><\/a>","cf7aad0f":"## 2 Environment<a id=\"2\"><\/a>","3430b682":"Create a dataframe containing dates","373e4040":"### 3.4 Solution<a id=\"3.4\"><\/a>","d6a71947":"**1&nbsp;&nbsp;[Introduction](#1)**  \n**2&nbsp;&nbsp;[Environment](#2)**  \n&nbsp;&nbsp;&nbsp;&nbsp;2.1&nbsp;&nbsp;[Libraries](#2.1)  \n&nbsp;&nbsp;&nbsp;&nbsp;2.2&nbsp;&nbsp;[Data](#2.2)  \n**3&nbsp;&nbsp;[Optimisation](#3)**  \n&nbsp;&nbsp;&nbsp;&nbsp;3.1&nbsp;&nbsp;[Constants, parameters and variables](#3.1)  \n&nbsp;&nbsp;&nbsp;&nbsp;3.2&nbsp;&nbsp;[Objective function](#3.2)  \n&nbsp;&nbsp;&nbsp;&nbsp;3.3&nbsp;&nbsp;[Constraints](#3.3)  \n&nbsp;&nbsp;&nbsp;&nbsp;3.4&nbsp;&nbsp;[Solution](#3.4)  \n**4&nbsp;&nbsp;[Evaluation](#4)**  \n&nbsp;&nbsp;&nbsp;&nbsp;4.1&nbsp;&nbsp;[Parameterised portfolio](#4.1)  \n&nbsp;&nbsp;&nbsp;&nbsp;4.2&nbsp;&nbsp;[Optimal portfolio](#4.2)  \n**5&nbsp;&nbsp;[Conclusion](#5)**","be71fd11":"### 2.2 Data<a id=\"2.2\"><\/a>","3b31311c":"### 4.2 Optimal portfolio<a id=\"4.2\"><\/a>","4159aea1":"### 3.2 Objective function<a id=\"3.2\"><\/a>","918dc588":"Get last price for each stock","fb896414":"### 3.1 Constants, parameters and variables<a id=\"3.1\"><\/a>","f8892ea1":"## 1 Introduction<a id=\"1\"><\/a>","f9b8b4d4":"Append the adjusted closing price of each stock to a dataframe keyed on date","70f9bc34":"Define optimisation constraints","3ab48ece":"## 3 Optimisation<a id=\"3\"><\/a>","b5e4e3ef":"## 4 Evaluation<a id=\"4\"><\/a>","156e8910":"Define the objective function (maximise expected portfolio return)","9edb5dfc":"Calculate optimal portfolio using highest variance and maximum single-asset allocation","18cca5e6":"Formulate portfolio mean and variance","6bcda6e3":"Get list of stock names","6aee7e61":"Solve optimisation problem for each parameter combination","c8fc7554":"Load libraries into notebook","8978f0b0":"### 4.1 Parameterised return<a id=\"4.1\"><\/a>","bdb86c6d":"### 3.3 Constraints<a id=\"3.3\"><\/a>","777796ae":"CSL and FPH, both growth companies in the Australian biotechnology sector, dominate the portfolio making up more than 80% of the total investment. While the expected portfolio return may have been maximised for a given portfolio variance based on historical price data, a more risk-averse portfolio will require further diversification. The expected return is based on past prices which is not a reasonable indicator of future performance.","46f624ee":"An equivalent optimisation problem is to set an upper bound $\\sigma^2$ on the portfolio variance and maximise the expected portfolio fractional return:\n$$\\mathrm{arg}\\max_{\\mathbf{x}} \\mathbf{\\mu}^T\\mathbf{x}$$\n$$\\mathrm{subject\\ to}$$\n$$\\mathbf{x} \\in \\mathbb{Z}^n$$\n$$\\mathbf{x}\\geq0$$\n$$\\mathbf{x}^T\\Sigma\\mathbf{x} \\leq \\sigma^2$$\n$$p_i\\mathbf{x}\\leq k$$","416713be":"Get number of stocks","c747cdc8":"Remove non-trading days","bb7d0e35":"The optimal portfolio allocation is found by maximising the expected portfolio fractional return and minimising the portfolio variance. This becomes a mixed-integer quadratic programming problem:\n$$\\mathrm{arg}\\max_{\\mathbf{x}} \\mathbf{\\mu}^T\\mathbf{x}-\\frac{1}{2} \\mathbf{x}^T\\Sigma\\mathbf{x}$$\n$$\\mathrm{subject\\ to}$$\n$$\\mathbf{x} \\in \\mathbb{Z}^n$$\n$$\\mathbf{x}\\geq0$$\n$$p_i\\mathbf{x} \\leq k$$","fe20202c":"Initialise the optimisation problem using objective function and constraints"}}