{"cell_type":{"569ddc4f":"code","88de217b":"code","e0826d61":"code","4706b6b0":"code","d7144009":"code","110a38e1":"code","a6ba3bf1":"code","945da5b4":"code","b9dcab9e":"code","01215af2":"code","889ecf6c":"code","94af9d91":"code","7725ad55":"code","33d8c4c1":"code","4b3367aa":"code","09e56342":"code","2b2fe525":"code","53a2e1ab":"code","0e88815b":"code","74e40eb6":"code","7165494f":"code","08df27af":"code","44ae870b":"code","76fd7a14":"code","58977d98":"code","8e842636":"code","cf851872":"code","885401b9":"code","2af2fb89":"code","5bb74355":"code","edca3313":"code","e1186de5":"code","73226b30":"code","25dfdb9e":"code","af99cffc":"code","c291d4cb":"code","16622121":"code","fa786de1":"code","9d5793a4":"code","000443ce":"code","e7daf0b1":"code","e5f16141":"code","c95209fb":"code","db0097bd":"code","49f5b2b8":"code","1774047c":"code","5296d6ea":"markdown","15df2a2c":"markdown","2804b05a":"markdown","3f518344":"markdown","c80262b2":"markdown","bc598dcd":"markdown","f87f06ee":"markdown","bf384ef2":"markdown","25581266":"markdown","c5abf639":"markdown","ea3762c3":"markdown","361c648a":"markdown","fb214876":"markdown","fdcf6d09":"markdown","4778579c":"markdown","09a339cf":"markdown"},"source":{"569ddc4f":"# numerical analysis\nimport numpy as np\n# processing and storing in dataframe\nimport pandas as pd\n\n# basic plotting\nimport matplotlib.pyplot as plt\n# advanced plotting\nimport seaborn as sns\n# interactive plotting\nimport plotly.express as px\n\n# dealing with geographic data\nimport geopandas as gpd\n# to get geolocation \nfrom geopandas.tools import geocode\n\n# register the converters:\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()","88de217b":"# plotly offline\nimport plotly\nplotly.offline.init_notebook_mode(connected=True)","e0826d61":"def plot_cal(title, start, end):\n    '''Plot incubation period'''\n    inc_day = []\n    for i in range(1, 29):\n        if(i>=start and i<=end):\n            inc_day.append(1)\n        else:\n            inc_day.append(0)\n            \n    inc_day = np.array(inc_day)\n    inc_day = inc_day.reshape(4, 7)\n    \n    fig, ax = plt.subplots(figsize=(6, 3))\n    ax=sns.heatmap(inc_day, linewidths=2, square=True, \n                   xticklabels='', yticklabels='', ax=ax,\n                   cbar=False, cmap=['whitesmoke','royalblue'])\n    ax.set_title(title, fontdict={'fontsize':16}, loc='left', pad=15)\n    \n    plt.show()","4706b6b0":"def plot_barh(col):\n    \n    temp_df = latest.sort_values(col, ascending=False).head(10)\n    temp_df = temp_df[temp_df[col]!=0]\n    \n    hover_data = ['Cumulative total cases', 'No. of deaths', 'Case fatalities ratio (%)']\n    \n    fig =  px.bar(temp_df, x=col, y='Country\/Region', orientation='h', color='Country\/Region', \n                  text=col, title=col, width=700, hover_data = hover_data,\n                  color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_traces(textposition='auto')\n    fig.update_layout(xaxis_title=\"\", yaxis_title=\"\", showlegend=False,\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","d7144009":"def plot_pie(col1, col2, title, pal):\n\n    temp = latest[[col1, col2]].sum()\n    temp = pd.DataFrame(temp).reset_index()\n    temp.columns = ['Column', 'Value']\n    \n    fig = px.sunburst(temp, path=['Column'], values='Value',\n                      color_discrete_sequence=pal, title=title)\n    fig.data[0].textinfo = 'label+text+value+percent root'\n    fig.show()","110a38e1":"# list of files\n!ls -lt ..\/input\/sars-outbreak-2003-complete-dataset","a6ba3bf1":"# importing daywise dataset\ndf = pd.read_csv('..\/input\/sars-outbreak-2003-complete-dataset\/sars_2003_complete_dataset_clean.csv', parse_dates=['Date'])\n# rename columns\ndf.columns = ['Date', 'Country', 'Cases', 'Deaths', 'Recovered']\n# active no. of cases\ndf['Active'] = df['Cases'] - df['Deaths'] - df['Recovered']\n# first few rows\ndf.head()","945da5b4":"# day wise data\nday_wise = df.groupby(['Date'])['Cases', 'Deaths', 'Recovered', 'Active'].sum()\n# reset index\nday_wise = day_wise.reset_index()\n# first few rows\nday_wise.head()","b9dcab9e":"# importing summary dataset\nlatest = pd.read_csv('..\/input\/sars-outbreak-2003-complete-dataset\/summary_data_clean.csv')\n# fix datetime columns\ncols = ['Date onset first probable case', 'Date onset last probable case']\nfor col in cols:\n    latest[col] = pd.to_datetime(latest[col])\ncols = ['Number of Imported cases', 'Percentage of Imported cases']\nfor col in cols:\n    latest[col] = latest[col].fillna(0)\n# new columns\nlatest['Number of locally transmitted cases'] = latest['Cumulative total cases'] - latest['Number of Imported cases']\nlatest['Percentage of locally transmitted cases'] = 100 - latest['Percentage of Imported cases']\nlatest['Number of non HCW affected'] = latest['Cumulative total cases'] - latest['Number of HCW affected']\nlatest['Percentage of non HCW affected'] = 100 - latest['Percentage of HCW affected']\nlatest['Non fatality case (%)'] = 100 - latest['Case fatalities ratio (%)']\nlatest['No. of recovered'] = latest['Cumulative total cases'] - latest['No. of deaths']\n\n# first few rows\nlatest.head()","01215af2":"# load countries map\nworld_map = gpd.read_file('..\/input\/human-development-index-hdi\/countries.geojson')\n# avoid Antartica\nworld_map = world_map[world_map['name']!='Antarctica']\n# select only important columns\nworld_map = world_map[['name', 'continent', 'geometry']]\n# first few rows\nworld_map.head()","889ecf6c":"fig, ax = plt.subplots(figsize=(18, 14))\nsns.set_style('whitegrid')\n\nworld_map.plot(ax=ax, color='white', edgecolor='black', alpha=0.4)\nax.set_title('First infected humans', \n             loc='left', fontdict={'fontsize': 24, \n                                   'fontfamily': 'monospace', \n                                   'fontweight': 'bold',\n                                   'color': 'black'})\n\nax.scatter(113.7633, 23.3790, color='orangered', s=200, alpha=0.8)\nax.text(120.7633, 23.3790, 'Guandong, China \\nin 2002', \n        fontfamily='monospace', fontsize=12, fontweight='bold',\n        color='white', backgroundcolor='black')\n\nax.set_axis_off()","94af9d91":"plot_cal('Incubation period of Ebola is from 2 to 7 days', 2, 7)","7725ad55":"fig = px.choropleth(latest, locations=\"Country\/Region\", locationmode='country names',\n                    color=\"Cumulative total cases\", hover_name=\"Country\/Region\", \n                    color_continuous_scale=\"Sunset\", \n                    title='Choropleth map cumulative no. of cases')\nfig.update(layout_coloraxis_showscale=True)\nfig.show()","33d8c4c1":"plot_barh('Cumulative total cases')","4b3367aa":"plot_barh('No. of deaths')","09e56342":"plot_barh('Case fatalities ratio (%)')","2b2fe525":"plot_barh('Number of Imported cases')","53a2e1ab":"plot_barh('Number of HCW affected')","0e88815b":"plot_pie('No. of deaths', 'No. of recovered', 'CFR', ['lightseagreen', 'orangered'])","74e40eb6":"plot_pie('Cumulative male cases', 'Cumulative female cases', 'Gender wise', ['royalblue', 'crimson'])","7165494f":"plot_pie('Number of HCW affected', 'Number of non HCW affected', 'HCW', ['whitesmoke', 'dodgerblue'])","08df27af":"plot_pie('Number of Imported cases', 'Number of locally transmitted cases', 'Imported cases', ['slateblue', 'gold'])","44ae870b":"latest = latest.sort_values('Date onset first probable case', ascending=False)\n\ncountry = latest['Country\/Region']\nstart = latest['Date onset first probable case'].to_numpy()\nend = latest['Date onset last probable case'].to_numpy()\n\nsns.set_style('whitegrid')\nplt.figure(figsize=(15, 12))\n\nplt.hlines(y=country, xmin=start, xmax=end, color='black', alpha=0.8)\nplt.scatter(start, country, color='tomato', alpha=1, s=200, label='Date onset first probable case')\nplt.scatter(end, country, color='black', alpha=1 , s=200, label='Date onset last probable case')\n\nsns.despine(left=False, bottom=True)\nplt.title('Onset Date', loc='left', fontsize=24)\nplt.legend(ncol=2)\nplt.show()","76fd7a14":"age = latest[['Country\/Region', 'Median age', 'Age range']]\nage = age.sort_values('Median age', ascending=False)\nage = age.dropna(subset=['Median age'])        \n\nage['Min age'] = age['Age range'].str.extract('(\\d+)')\nage['Max age'] = age['Age range'].str.extract('\\-(\\d+)')\n\nfor col in ['Median age', 'Min age', 'Max age']:\n    age[col] = pd.to_numeric(age[col])\n\ncountry = age['Country\/Region']\nmedian_age = pd.to_numeric(age['Median age'])\nmin_age = pd.to_numeric(age['Min age'])\nmax_age = pd.to_numeric(age['Max age'])\n\nsns.set_style('whitegrid')\nplt.figure(figsize=(15, 12))\n\nplt.hlines(y=country, xmin=min_age, xmax=max_age, color='black', alpha=0.8)\nplt.scatter(min_age, country, color='dimgray', alpha=1, s=200, label='Minimum Age')\nplt.scatter(median_age, country, color='turquoise', alpha=1, s=200, label='Median age')\nplt.scatter(max_age, country, color='black', alpha=1 , s=200, label='Maximum Age')\n\nsns.despine(left=False, bottom=True)\nplt.title('Age Range', loc='left', fontsize=24)\nplt.legend(ncol=3)\nplt.show()","58977d98":"def plot_daywise(col, hue):\n    temp = day_wise[day_wise['Date'] > '2003-04-12']\n    fig = px.area(temp, x=\"Date\", y=col, width=700, \n                  color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","8e842636":"def plot_stacked(col):\n    temp = df[df['Date'] > '2003-04-12']\n    fig = px.area(temp, x=\"Date\", y=col, color='Country', \n                 height=600, title=col, \n                 color_discrete_sequence = px.colors.cyclical.mygbm)\n    fig.update_layout(showlegend=True)\n    fig.show()","cf851872":"plot_daywise('Cases', 'black')","885401b9":"plot_daywise('Deaths', 'orangered')","2af2fb89":"plot_daywise('Recovered', 'limegreen')","5bb74355":"plot_daywise('Active', 'crimson')","edca3313":"plot_stacked('Cases')","e1186de5":"plot_stacked('Deaths')","73226b30":"plot_stacked('Recovered')","25dfdb9e":"plot_stacked('Active')","af99cffc":"# temp = df.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\n# temp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n#                  var_name='Case', value_name='Count')\n# temp.head()\n\n# # fig = px.area(temp, x=\"Date\", y=\"Count\", color='Case', \n#               height=600, width=700, title='Cases over time', \n#               color_discrete_sequence = ['limegreen', 'crimson', 'black'])\n# fig.update_layout(xaxis_rangeslider_visible=True)\n# fig.show()","c291d4cb":"temp = latest[['Country\/Region', 'Cumulative male cases', 'Cumulative female cases']]\ntemp['% Male'] = temp['Cumulative male cases']*100\/(temp['Cumulative male cases']+temp['Cumulative female cases'])\ntemp['% Female'] = temp['Cumulative female cases']*100\/(temp['Cumulative male cases']+temp['Cumulative female cases'])\ntemp.head()","16622121":"temp1 = temp.melt(id_vars='Country\/Region', \n                 value_vars=['Cumulative male cases', 'Cumulative female cases'], \n                 var_name='Case', value_name='Count')\ntemp1 = temp1.sort_values(['Count'], ascending=True)\n\n\nfig = px.bar(temp1, x='Count', y='Country\/Region', color='Case', \n             opacity=1, orientation='h', height=600,\n             barmode='stack',\n             color_discrete_sequence=['indigo', 'deeppink'])\nfig.update_layout(title='No. of case based on Gender', xaxis_title=\"\", yaxis_title=\"\")\nfig.show()","fa786de1":"temp2 = temp.melt(id_vars='Country\/Region', \n                 value_vars=['% Male', '% Female'], \n                 var_name='Case', value_name='Percentage')\ntemp2 = temp2.sort_values(['Percentage'], ascending=True)\n\nfig = px.bar(temp2, x='Percentage', y='Country\/Region', color='Case', \n             opacity=1, orientation='h', height=600,\n             barmode='stack',\n             color_discrete_sequence=['indigo', 'deeppink'])\nfig.update_layout(title='No. of case based on Gender', xaxis_title=\"\", yaxis_title=\"\")\nfig.show()","9d5793a4":"def plot_overlay_bar(col, hue):\n    temp = latest[['Country\/Region', 'Cumulative total cases', col]]\n    temp = temp.melt(id_vars='Country\/Region', \n                     value_vars=['Cumulative total cases', col], \n                     var_name='Case', value_name='Count')\n    temp = temp.sort_values(['Case', 'Count'], ascending=True)\n    \n    fig = px.bar(temp, x='Count', y='Country\/Region', color='Case', \n                 opacity=1, orientation='h', height=600,\n                 barmode='overlay',\n                 color_discrete_sequence=['black', hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","000443ce":"def plot_overlay_percent_bar(col1, col2, hue):\n    temp = latest[['Country\/Region', col1, col2]]\n    temp = temp.melt(id_vars='Country\/Region', \n                     value_vars=[col1, col2], \n                     var_name='Case', value_name='Percentage')\n    temp = temp.sort_values(['Case', 'Percentage'], ascending=True)\n    \n    fig = px.bar(temp, x='Percentage', y='Country\/Region', color='Case', \n                 opacity=1, orientation='h', height=600,\n                 barmode='stack', range_x=[0,100],\n                 color_discrete_sequence=[hue, 'black'])\n    fig.update_layout(title=col1, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","e7daf0b1":"plot_overlay_bar('No. of deaths', 'orangered')","e5f16141":"plot_overlay_percent_bar('Case fatalities ratio (%)', 'Non fatality case (%)', 'orangered')","c95209fb":"plot_overlay_bar('Number of Imported cases', 'gold')","db0097bd":"plot_overlay_percent_bar('Percentage of Imported cases', 'Percentage of locally transmitted cases', 'gold')","49f5b2b8":"plot_overlay_bar('Number of HCW affected', 'cornflowerblue')","1774047c":"plot_overlay_percent_bar('Percentage of HCW affected', 'Percentage of non HCW affected', 'cornflowerblue')","5296d6ea":"### Age Range","15df2a2c":"### Health Care Workers","2804b05a":"### List of files","3f518344":"# Utility Functions","c80262b2":"# Dataset","bc598dcd":"### Geographical distribution\n> * The disease appeared in November 2002 in the Guangdong province of southern China. \n> * This area is considered as a potential zone of re-emergence of SARS-CoV.\n> * SARS-CoV affected 26 countries and resulted in more than 8000 cases in 2003","f87f06ee":"### Incubation period (time interval from infection with the virus to onset of symptoms)\n> * Incubation period of SARS-CoV is from 2 to 7 days. \n> * A person infected with SARS-CoV cannot spread the disease until they develop symptoms.","bf384ef2":"### Transmission\n> * Transmission of SARS-CoV is primarily from person to person. \n> * It appears to have occurred mainly during the second week of illness, which corresponds to the peak of virus excretion in respiratory secretions and stool, and when cases with severe disease start to deteriorate clinically. \n> * Most cases of human-to-human transmission occurred in the health care setting, in the absence of adequate infection control precautions. \n> * Implementation of appropriate infection control practices brought the global outbreak to an end.\n\n### Symptoms\n> * Influenza-like and include fever\n> * Malaise\n> * Myalgia\n> * Headache\n> * Diarrhoea, and\n> * Shivering (rigors). \n\n### Nature of the disease\n> * No individual symptom or cluster of symptoms has proved to be specific for a diagnosis of SARS. \n> * Although fever is the most frequently reported symptom, it is sometimes absent on initial measurement, especially in elderly and immunosuppressed patients.\n> * Cough (initially dry), shortness of breath, and diarrhoea are present in the first and\/or second week of illness. \n> * Severe cases often evolve rapidly, progressing to respiratory distress and requiring intensive care.\n\n### Vaccines\n> * None. Experimental vaccines are under development.","25581266":"## Country wise summary","c5abf639":"### Imported Cases","ea3762c3":"# Libraries","361c648a":"## SARS (Severe Acute Respiratory Syndrome)\n\n### Cause\n> * SARS coronavirus (SARS-CoV) \u2013 virus identified in **2003**. \n> * SARS-CoV is thought to be an animal virus from an as-yet-uncertain animal reservoir, perhaps **bats**, that spread to other animals (**civet cats**)\n> * It was first infected humans in the **Guangdong province of southern China** in **2002**.","fb214876":"# Day wise","fdcf6d09":"### Import files","4778579c":"### Onset Date","09a339cf":"# EDA"}}