{"cell_type":{"ff386f8e":"code","9ce6f72a":"code","36371f2c":"code","6a26fc69":"code","a6d5a209":"code","a7d1088a":"code","132764eb":"markdown","bcdd58ab":"markdown","b41bb929":"markdown","fcaf1558":"markdown","1ab8437b":"markdown","b589d55a":"markdown","ab4ab357":"markdown","a6cbaa7a":"markdown","89dd0955":"markdown","3fd386cf":"markdown"},"source":{"ff386f8e":"from google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()","9ce6f72a":"query = \"\"\"\n         SELECT 'table: USERS' as table,\n                 id AS user_id,\n                 MIN(creation_date) as min_date,\n                 'date of joinning Stack Overflow' as date_description\n             FROM `bigquery-public-data.stackoverflow.users`\n             WHERE id IN (11486952, 10904707, 10977933, 11040013, 10600000)\n             GROUP BY table, user_id\n         UNION ALL\n         SELECT 'table: POSTS_QUESTIONS' as table,\n                 owner_user_id AS user_id,\n                 MIN(creation_date) as min_date,\n                 'date of first question' as date_description\n             FROM `bigquery-public-data.stackoverflow.posts_questions`\n             WHERE owner_user_id IN (11486952, 10904707, 10977933, 11040013, 10600000)\n             GROUP BY table, user_id\n         UNION ALL\n         SELECT 'table: POSTS_ANSWERS' as table,\n                 owner_user_id AS user_id,\n                 MIN(creation_date) as min_date,\n                 'date of first answer' as date_description\n             FROM `bigquery-public-data.stackoverflow.posts_answers`                     \n             WHERE owner_user_id IN (11486952, 10904707, 10977933, 11040013, 10600000)\n             GROUP BY table, user_id\n                    \"\"\"\n\nuser = client.query(query).result().to_dataframe()\nuser.sort_values('user_id')","36371f2c":"three_tables_query = \"\"\"\n             SELECT u.id AS id,\n                 MIN(q.creation_date) AS q_creation_date,\n                 MIN(a.creation_date) AS a_creation_date\n             FROM `bigquery-public-data.stackoverflow.posts_questions` AS q\n                 FULL JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n                     ON q.owner_user_id = a.owner_user_id \n                 RIGHT JOIN `bigquery-public-data.stackoverflow.users` AS u\n                     ON q.owner_user_id = u.id\n             WHERE u.creation_date >= '2019-01-01' and u.creation_date < '2019-02-01'\n             AND u.id IN (11486952, 10904707, 10977933, 11040013, 10600000)\n             GROUP BY id\n                    \"\"\"\n\nclient.query(three_tables_query).result().to_dataframe()\n","6a26fc69":"three_tables_query = \"\"\"\n         SELECT q.owner_user_id AS q_id,\n             a.owner_user_id as a_id,\n             MIN(q.creation_date) AS q_creation_date,\n             MIN(a.creation_date) AS a_creation_date\n         FROM `bigquery-public-data.stackoverflow.posts_questions` AS q\n             FULL JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n                 ON q.owner_user_id = a.owner_user_id \n         WHERE q.owner_user_id IN (11486952, 10904707, 10977933, 11040013, 10600000)\n             or a.owner_user_id IN (11486952, 10904707, 10977933, 11040013, 10600000)\n         GROUP BY q_id,a_id\n                    \"\"\"\n\nclient.query(three_tables_query).result().to_dataframe()\n","a6d5a209":"three_tables_query = \"\"\"\n             SELECT u.id AS id,\n                 MIN(q.creation_date) AS q_creation_date,\n                 MIN(a.creation_date) AS a_creation_date\n             FROM `bigquery-public-data.stackoverflow.posts_questions` AS q\n                 FULL JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n                     ON q.owner_user_id = a.owner_user_id \n                 RIGHT JOIN `bigquery-public-data.stackoverflow.users` AS u\n                     ON COALESCE(q.owner_user_id, a.owner_user_id) = u.id\n             WHERE u.creation_date >= '2019-01-01' and u.creation_date < '2019-02-01'\n             AND u.id IN (11486952, 10904707, 10977933, 11040013, 10600000)\n             GROUP BY id\n                    \"\"\"\n\nclient.query(three_tables_query).result().to_dataframe()\n","a7d1088a":"# Your code here\nthree_tables_query = \"\"\"\n            SELECT u.id,\n                MIN(q.creation_date) AS q_creation_date,\n                MIN(a.creation_date) AS a_creation_date\n            FROM `bigquery-public-data.stackoverflow.users` AS u\n            LEFT JOIN `bigquery-public-data.stackoverflow.posts_questions` AS q\n                ON u.id = q.owner_user_id\n            LEFT JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n                ON u.id = a.owner_user_id \n            WHERE u.creation_date >= '2019-01-01' AND u.creation_date < '2019-02-01' \n            AND u.id IN (11486952, 10904707, 10977933, 11040013, 10600000)\n            GROUP BY u.id\n                     \"\"\"\n\n\nclient.query(three_tables_query).result().to_dataframe()\n","132764eb":"## 1. Connect to BiqQuery","bcdd58ab":"# Exercises\n### 3) Initial questions and answers, Part 2\n\nNow you'll address a more realistic (and complex!) scenario.  To answer this question, you'll need to pull information from *three* different tables!  This syntax very similar to the case when we have to join only two tables.  For instance, consider the three tables below.\n\n![three tables](https:\/\/i.imgur.com\/OyhYtD1.png)\n\nWe can use two different **JOINs** to link together information from all three tables, in a single query.\n\n![double join](https:\/\/i.imgur.com\/G6buS7P.png)\n\nWith this in mind, say you're interested in understanding users who joined the site in January 2019.  You want to track their activity on the site: when did they post their first questions and answers, if ever?\n\nWrite a query that returns the following columns:\n- `id` - the IDs of all users who created Stack Overflow accounts in January 2019 (January 1, 2019, to January 31, 2019, inclusive)\n- `q_creation_date` - the first time the user posted a question on the site; if the user has never posted a question, the value should be null\n- `a_creation_date` - the first time the user posted a question on the site; if the user has never posted a question, the value should be null\n\nNote that questions and answers posted after January 31, 2019, should still be included in the results.  And, all users who joined the site in January 2019 should be included (even if they have never posted a question or provided an answer).\n\nThe query from the previous question should be a nice starting point to answering this question!  You'll need to use the `posts_answers` and `posts_questions` tables.  You'll also need to use the `users` table from the Stack Overflow dataset.  The relevant columns from the `users` table are `id` (the ID of each user) and `creation_date` (when the user joined the Stack Overflow site, in DATETIME format).","b41bb929":"## 2. Let's choose some users and check how their activity looks like in all 3 tables\n\nUser **11486952** - there are answers but no questions<br\/>\nUser **10904707** - there are questions but no answers <br\/>\nUser **10977933** - there are both answers and questions <br\/>\nUser **11040013** - there are no answers and no questions <br\/>\nUser **10600000** - join the site before Jan 1","fcaf1558":"Looks good!","1ab8437b":"**[Advanced SQL Home Page](https:\/\/www.kaggle.com\/learn\/advanced-sql)**\n\n---\n","b589d55a":"## 4. What went wrong?\n\nLet's look on the FULL JOIN result","ab4ab357":"**Look at last row.**<br\/>\nThink what is happening when we try to RIGHT JOIN USERS using condition:<br\/>\n    ON q.owner_user_id = u.id<br\/>\nThat's right we use q_id column. Instead we should write:<br\/>\n    ON **COALESCE**(q.owner_user_id, a.owner_user_id) = u.id<br\/>\nBut we don't know this function yet ;) Let's try that solution.","a6cbaa7a":"## 3. Now, let's see the result for them if we use sugested solution from Kaggle","89dd0955":"## 5. Finally, our LEFT JOIN solution","3fd386cf":"We've got 4 users - it's OK, cause user 10600000 join Stack Overflow earlier, so he's out.<br\/><br\/>\n\n**But what about user 11486952? There should be a date in *a_creation_date*.**"}}