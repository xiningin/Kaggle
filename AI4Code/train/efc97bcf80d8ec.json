{"cell_type":{"6b3e4802":"code","b95ed2e2":"code","0f1d0696":"code","3933cb70":"code","aad06a4a":"code","00ee5a3a":"code","46d8df26":"code","9be0bc29":"code","6febfd40":"code","998f8575":"code","3d82f0b1":"code","968d98ae":"code","253b15fc":"code","aef0dd7a":"code","bd6b2d1c":"code","4855f284":"code","a6eba8e5":"code","32f44262":"code","f4cc75c0":"code","af09267b":"code","4d638e2e":"code","c7501996":"code","04523527":"code","9caf6661":"code","4da4bb7b":"code","5a33d9e2":"code","8fce952e":"code","c1e63d22":"code","dbb81a02":"code","8680b41f":"code","22c4f566":"code","887c66cb":"code","d18a8b31":"code","0c42b09b":"code","15d48a32":"code","d30b0679":"code","26467853":"code","77851c55":"code","745dc0f3":"code","3d0e24fe":"code","c2f46dc6":"code","11650f21":"code","e5f952e7":"code","a4d58d0d":"code","a1adf93f":"code","f9762014":"code","4e091ee1":"code","39bf4649":"code","2999f2ec":"code","754281d4":"code","265f1f1e":"code","e62a169b":"code","4c8c025a":"code","9c65204e":"code","8a10ac29":"code","df3ea09c":"code","1b014208":"code","bc06b357":"code","bb1c77a0":"code","0eef7559":"markdown","09141a06":"markdown","729d8c5e":"markdown","45bc1035":"markdown","1fc15d6b":"markdown","b4216764":"markdown","679b91b5":"markdown","3e01eba1":"markdown","cb22f2fc":"markdown","1363604c":"markdown","afcd39bf":"markdown"},"source":{"6b3e4802":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b95ed2e2":"train_set=pd.read_csv('\/kaggle\/input\/titanic\/train.csv', index_col='PassengerId')\ntest_set=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","0f1d0696":"train_set.head(10)","3933cb70":"import missingno as msn\nmsn.bar(train_set,figsize=(12,6), color='blue')","aad06a4a":"msn.bar(test_set,figsize=(12,6), color='red')","00ee5a3a":"def get_age_category(x):\n    if (x >= 0 and x<21):\n        return 'Young'\n    elif(x>=21 and x<35):\n        return 'Young-middle'\n    elif (x >= 35 and x<51):\n        return 'Middle'\n    elif x >= 51:\n        return 'Old'\n    else:\n        return 'Unk'\ntrain_set['Age_category'] = train_set.apply(lambda row: get_age_category(row['Age']), axis=1)\ntest_set['Age_category'] = test_set.apply(lambda row: get_age_category(row['Age']), axis=1)\nplt.figure(figsize=(12,6))\nsns.histplot(data=train_set, x='Age_category', hue='Survived', binwidth=5)\nplt.xlabel('\u0412\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u0430\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f(train)',fontsize=14)\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432(train)',fontsize=14)","46d8df26":"plt.figure(figsize=(12,6))\nsns.histplot(data=test_set, x='Age_category', binwidth=5)\nplt.xlabel('\u0412\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u0430\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f(test)',fontsize=14)\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432(test)',fontsize=14)","9be0bc29":"train_set.loc[((train_set.Age_category == 'Unk') & (train_set.Parch !=0),'Age_category')]='Young'\ntest_set.loc[((test_set.Age_category == 'Unk') & (test_set.Parch !=0),'Age_category')]='Young'","6febfd40":"data = train_set[train_set.Age_category=='Middle']\nsns.set(style='darkgrid')\nplt.figure(figsize=(8,4))\nax = sns.countplot(x=data.Pclass, data=data)\nplt.xlabel('\u041a\u043b\u0430\u0441\u0441 (Pclass)-Middle', fontsize=14)\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e-Middle', fontsize=14)\ndata = train_set[train_set.Age_category=='Young-middle']\nsns.set(style='darkgrid')\nplt.figure(figsize=(8,4))\nax = sns.countplot(x=data.Pclass, data=data)\nplt.xlabel('\u041a\u043b\u0430\u0441\u0441 (Pclass)-Young-middle', fontsize=14)\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e-Middle', fontsize=14)\ndata = train_set[train_set.Age_category=='Old']\nsns.set(style='darkgrid')\nplt.figure(figsize=(8,4))\nax = sns.countplot(x=data.Pclass, data=data)\nplt.xlabel('\u041a\u043b\u0430\u0441\u0441 (Pclass)-Old', fontsize=14)\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e-Old', fontsize=14)\ndata = train_set[train_set.Age_category=='Young']\nsns.set(style='darkgrid')\nplt.figure(figsize=(8,4))\nax = sns.countplot(x=data.Pclass, data=data)\nplt.xlabel('\u041a\u043b\u0430\u0441\u0441 (Pclass)-Young', fontsize=14)\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e-Young', fontsize=14)\ndata = train_set[train_set.Age_category=='Unk']\nsns.set(style='darkgrid')\nplt.figure(figsize=(8,4))\nax = sns.countplot(x=data.Pclass, data=data)\nplt.xlabel('\u041a\u043b\u0430\u0441\u0441 (Pclass)-Unk', fontsize=14)\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e-Unk', fontsize=14)","998f8575":"df=train_set[train_set.Age_category == 'Unk']\ndf2=train_set[train_set.Age_category=='Middle']\ndf3=train_set[train_set.Age_category=='Old']\ndf4=train_set[train_set.Age_category=='Young']\ndf5 = train_set[train_set.Age_category=='Young-middle']\nplt.figure(figsize=(12,6))\nsns.catplot(x=\"Embarked\", y=\"Fare\", data=df2)\nplt.xlabel('\u041c\u0435\u0441\u0442\u043e \u043f\u043e\u0441\u0430\u0434\u043a\u0438 (Embarked)-Middle',fontsize=14)\nplt.ylabel('\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043b\u0435\u0442\u0430 (Fare)-Middle',fontsize=14)\nsns.catplot(x=\"Embarked\", y=\"Fare\", data=df3)\nplt.xlabel('\u041c\u0435\u0441\u0442\u043e \u043f\u043e\u0441\u0430\u0434\u043a\u0438 (Embarked)-Old',fontsize=14)\nplt.ylabel('\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043b\u0435\u0442\u0430 (Fare)-Old',fontsize=14)\nsns.catplot(x=\"Embarked\", y=\"Fare\", data=df4)\nplt.xlabel('\u041c\u0435\u0441\u0442\u043e \u043f\u043e\u0441\u0430\u0434\u043a\u0438 (Embarked)-Young',fontsize=14)\nplt.ylabel('\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043b\u0435\u0442\u0430 (Fare)-Young',fontsize=14)\nsns.catplot(x=\"Embarked\", y=\"Fare\", data=df)\nplt.xlabel('\u041c\u0435\u0441\u0442\u043e \u043f\u043e\u0441\u0430\u0434\u043a\u0438 (Embarked) - Unk',fontsize=14)\nplt.ylabel('\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043b\u0435\u0442\u0430 (Fare) - Unk',fontsize=14)\nsns.catplot(x=\"Embarked\", y=\"Fare\", data=df2)\nplt.xlabel('\u041c\u0435\u0441\u0442\u043e \u043f\u043e\u0441\u0430\u0434\u043a\u0438 (Embarked)-Young-middle',fontsize=14)\nplt.ylabel('\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043b\u0435\u0442\u0430 (Fare)-Young-middle',fontsize=14)","3d82f0b1":"data = train_set\nsns.set(style='darkgrid')\nplt.figure(figsize=(8,4))\nax = sns.countplot(x=data.Survived, data=data)\nplt.xlabel('C\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 (0) \u0438 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 (1) \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432', fontsize=14)\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e', fontsize=14)","968d98ae":"train_set.loc[(train_set.Age_category == 'Unk') & (train_set.Fare <=101) & (train_set.Embarked=='S'),'Age_category']='Young-middle'\ntrain_set.loc[(train_set.Age_category == 'Unk') & (train_set.Fare <=101) & (train_set.Embarked=='C'),'Age_category']='Middle'\ntrain_set.loc[(train_set.Age_category == 'Unk') & (train_set.Fare <=101) & (train_set.Embarked=='Q'),'Age_category']='Old'\ntrain_set.loc[(train_set.Age_category == 'Unk') & (train_set.Fare >=101) & (train_set.Embarked!='Q'),'Age_category']='Old'\ntest_set.loc[(test_set.Age_category == 'Unk') & (test_set.Fare <=101) & (test_set.Embarked=='S'),'Age_category']='Young-middle'\ntest_set.loc[(test_set.Age_category == 'Unk') & (test_set.Fare <=101) & (test_set.Embarked=='C'),'Age_category']='Middle'\ntest_set.loc[(test_set.Age_category == 'Unk') & (test_set.Fare <=101) & (test_set.Embarked=='Q'),'Age_category']='Old'\ntest_set.loc[(test_set.Age_category == 'Unk') & (test_set.Fare >=101) & (test_set.Embarked!='Q'),'Age_category']='Old'","253b15fc":"plt.figure(figsize=(12,6))\nsns.histplot(data=train_set, x='Age_category', hue='Survived', binwidth=5)\nplt.xlabel('\u0412\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u0430\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f(train)',fontsize=14)\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432(train)',fontsize=14)","aef0dd7a":"plt.figure(figsize=(12,6))\nsns.histplot(data=test_set, x='Age_category', binwidth=5)\nplt.xlabel('\u0412\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u0430\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f(test)',fontsize=14)\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432(test)',fontsize=14)","bd6b2d1c":"d=dict()\nmeans1=list(train_set.groupby('Age_category').median().Age)\nmeans2=[]\nfor i in means1:\n    i=round(i,2)\n    means2.append(i)\nmeans2\nd['Middle'] = means2[0]\nd['Old'] = means2[1]\nd['Young']= means2[2]\nd['Young-middle'] = means2[3]\nd","4855f284":"train_set.Age.isnull().sum()","a6eba8e5":"train_set","32f44262":"#dff=pd.concat([train_set.Age,train_set.Age_category],axis=1)\ntrain_set.loc[(train_set.Age.isnull()) & (train_set.Age_category=='Middle'),'Age']=d['Middle']\ntrain_set.loc[(train_set.Age.isnull()) & (train_set.Age_category=='Old'),'Age']=d['Old']\ntrain_set.loc[(train_set.Age.isnull()) & (train_set.Age_category=='Young'),'Age']=d['Young']\ntrain_set.loc[(train_set.Age.isnull()) & (train_set.Age_category=='Young-middle'),'Age']=d['Young-middle']\ntest_set.loc[(test_set.Age.isnull()) & (test_set.Age_category=='Middle'),'Age']=d['Middle']\ntest_set.loc[(test_set.Age.isnull()) & (test_set.Age_category=='Old'),'Age']=d['Old']\ntest_set.loc[(test_set.Age.isnull()) & (test_set.Age_category=='Young'),'Age']=d['Young']\ntest_set.loc[(test_set.Age.isnull()) & (test_set.Age_category=='Young-middle'),'Age']=d['Young-middle']\ntest_set.head(30)","f4cc75c0":"plt.figure(figsize=(8,5))\nplt.title('\u041f\u0440\u043e\u0446\u0435\u043d\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u043c \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0433\u0435\u043d\u0434\u0435\u0440\u043d\u043e\u0439 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438',fontsize=16)\ntrain_set.groupby(\"Sex\")[\"Survived\"].sum().plot.pie(autopct=\"%.1f%%\",explode=[0.05]*2, pctdistance=0.5);","af09267b":"plt.figure(figsize=(8,5))\nplt.title('\u041f\u0440\u043e\u0446\u0435\u043d\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u043c \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u043a \u043a\u043b\u0430\u0441\u0441\u0443 (1,2,3)',fontsize=16)\ntrain_set.groupby(\"Pclass\")[\"Survived\"].sum().plot.pie(autopct=\"%.1f%%\",explode=[0.05]*3, pctdistance=0.5);","4d638e2e":"train_set.Embarked.fillna(train_set.Embarked.mode()[0], inplace = True)","c7501996":"from sklearn.preprocessing import LabelEncoder\nlab_en = LabelEncoder()","04523527":"train_set['Sex'] = lab_en.fit_transform(train_set['Sex'])\ntrain_set['Embarked'] = lab_en.fit_transform(train_set['Embarked'])\ntest_set['Sex'] = lab_en.fit_transform(test_set['Sex'])\ntest_set['Embarked'] = lab_en.fit_transform(test_set['Embarked'])","9caf6661":"test_set[:30]","4da4bb7b":"train_set.Age = train_set.Age.astype(int)\ntrain_set.Fare = train_set.Fare.astype(int)","5a33d9e2":"X = train_set.copy().drop(['Ticket','Cabin','Name'],axis=1)\ny = X.pop('Survived')","8fce952e":"from sklearn.feature_selection import mutual_info_regression\n\ndef make_mi_scores(X, y):\n    X = X.copy()\n    for colname in X.select_dtypes([\"object\", \"category\"]):\n        X[colname], _ = X[colname].factorize()\n    # All discrete features should now have integer dtypes\n    mi_scores = mutual_info_regression(X, y,random_state=241)\n    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores\nmi_scores = make_mi_scores(X, y)\nmi_scores","c1e63d22":"from sklearn.ensemble import RandomForestClassifier,VotingClassifier \nfrom sklearn.model_selection import train_test_split,StratifiedShuffleSplit,GridSearchCV,validation_curve\nfrom sklearn.metrics import roc_auc_score, f1_score, plot_confusion_matrix, plot_roc_curve, plot_precision_recall_curve, classification_report, precision_score, recall_score, confusion_matrix,accuracy_score\nfrom sklearn.preprocessing import StandardScaler","dbb81a02":"X= train_set[['Pclass','Sex','Age','Embarked','SibSp','Parch']]\nY = train_set[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=241)\nclassifier_RF = RandomForestClassifier(max_depth=2, random_state=241, n_estimators=100)\nclassifier_RF.fit(X_train, y_train)\npredictions = classifier_RF.predict(X_test)\ny_pred_proba = classifier_RF.predict_proba(X_test)[:, 1]\ny_pred_rf = classifier_RF.predict(X_test)\nprint(confusion_matrix(y_test,predictions))\nprint(classification_report(y_test,predictions))\nprint(accuracy_score(y_test, predictions))","8680b41f":"df_report = pd.DataFrame(columns={'ROC-AUC'}, data=[0])\ndf_report['ROC-AUC'] = roc_auc_score(y_test, y_pred_proba)\ndf_report['F1'] = f1_score(y_test, y_pred_rf)\ndf_report['precision_0'] = precision_score(y_test, y_pred_rf, pos_label=0)\ndf_report['recall_0'] = recall_score(y_test, y_pred_rf, pos_label=0)\ndf_report['precision_1'] = precision_score(y_test, y_pred_rf, pos_label=1)\ndf_report['recall_1'] = recall_score(y_test, y_pred_rf, pos_label=1)\ndf_report.index = ['RandomForestClassifier']\ndf_report","22c4f566":"def get_scores(report_df, model, X_test, y_test, name):\n    report = pd.DataFrame(columns={'ROC-AUC'}, data=[0])\n    report['ROC-AUC'] = roc_auc_score(y_test,model.predict_proba(X_test)[:, 1])\n    report['F1'] = f1_score(y_test, model.predict(X_test))\n    report['precision_0'] = precision_score(y_test, model.predict(X_test), pos_label=0)\n    report['precision_1'] = precision_score(y_test, model.predict(X_test), pos_label=1)\n    report['recall_0'] = recall_score(y_test, model.predict(X_test), pos_label=0)\n    report['recall_1'] = recall_score(y_test, model.predict(X_test), pos_label=1)\n    report.index = [name]\n    report_df = report_df.append(report)\n    return report_df.drop_duplicates(keep='last')","887c66cb":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(13, 5))\nplot_precision_recall_curve(classifier_RF, X_test, y_test, ax=ax1)\nplot_roc_curve(classifier_RF, X_test, y_test, ax=ax2);","d18a8b31":"import warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.utils.class_weight import compute_sample_weight\nrf_skf = RandomForestClassifier(class_weight='balanced')\nskf = StratifiedShuffleSplit(n_splits=5, random_state=10)\nparam = {'bootstrap': [True], 'max_depth': [5,10,15,20,25,30], 'n_estimators': [50,100,200,300,400,500]}\nclf_rf = GridSearchCV(rf_skf, param, scoring='roc_auc', refit=True, cv=skf)\nclf_rf.fit(X_train, y_train)\nprint('Best roc_auc: {:.4}, with best C: {}'.format(clf_rf.best_score_, clf_rf.best_params_))","0c42b09b":"df_report = get_scores(df_report, clf_rf, X_test, y_test, 'rf_skf')\ndf_report","15d48a32":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(13, 5))\nplot_precision_recall_curve(clf_rf, X_test, y_test, ax=ax1)\nplot_roc_curve(clf_rf, X_test, y_test, ax=ax2);","d30b0679":"from imblearn.over_sampling import RandomOverSampler\noversample = RandomOverSampler(sampling_strategy=1.0)\nX_over, y_over = oversample.fit_resample(X_train, y_train)","26467853":"rf_skf = RandomForestClassifier()\nskf = StratifiedShuffleSplit(n_splits=5, random_state=10)\n# verbose - \u043f\u0435\u0447\u0430\u0442\u044c \u0440\u0435\u0437\u043b\u044c\u0443\u0442\u0430\u0442\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435  \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 (\u043f\u043e \u0443\u043c\u043e\u043b 0), \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438\nclf_rf_over = GridSearchCV(rf_skf, param, scoring='roc_auc', cv=skf, verbose=1)\nclf_rf_over.fit(X_over, y_over)\nprint('Best roc_auc: {:.4}, with best C: {}'.format(clf_rf_over.best_score_, clf_rf_over.best_params_))","77851c55":"df_report = get_scores(df_report, clf_rf_over, X_test, y_test, 'rf_skf_imb')\ndf_report","745dc0f3":"from eli5.sklearn import PermutationImportance\nimport eli5\nperm = PermutationImportance(classifier_RF, scoring='f1').fit(X_test, y_test)","3d0e24fe":"eli5.show_weights(perm, feature_names=X_test.columns.tolist())","c2f46dc6":"from sklearn.linear_model import LogisticRegression\nX= train_set[['Pclass','Sex','SibSp']]\nY = train_set[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=241)\nlr = LogisticRegression()\nlr.fit(X_train, y_train)\ny_pred_proba = lr.predict_proba(X_test)[:, 1]\ny_pred_lr = lr.predict(X_test)\nprint(classification_report(y_test, y_pred_lr))\n#print(accuracy_score(y_test, predictions))","11650f21":"df_report = get_scores(df_report, lr, X_test, y_test, 'LogisticRegression')\ndf_report","e5f952e7":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(13, 5))\nplot_precision_recall_curve(lr, X_test, y_test, ax=ax1)\nplot_roc_curve(lr, X_test, y_test, ax=ax2);","a4d58d0d":"lr_skf = LogisticRegression(class_weight='balanced')\nskf = StratifiedShuffleSplit(n_splits=5, random_state=10)\nparam = {'C': np.linspace(0.001, 10, 10), 'penalty': ['l1','l2']}\n# refit - \u043f\u043e\u043b \u0443\u043c\u043e\u043b\u0447\u0430\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043f\u0440\u0438 \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u0435 \u0443\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043b\u0443\u0447\u0448\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c\nclf_lr = GridSearchCV(lr_skf, param, scoring='roc_auc', refit=True, cv=skf)\nclf_lr.fit(X_train, y_train)\nprint('Best roc_auc: {:.4}, with best C: {}'.format(clf_lr.best_score_, clf_lr.best_params_))","a1adf93f":"df_report = get_scores(df_report, clf_lr, X_test, y_test, 'LogisticRegression_skf')\ndf_report","f9762014":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(13, 5))\nplot_precision_recall_curve(clf_lr, X_test, y_test, ax=ax1)\nplot_roc_curve(clf_lr, X_test, y_test, ax=ax2);","4e091ee1":"X_over, y_over = oversample.fit_resample(X_train, y_train)","39bf4649":"lr_skf = LogisticRegression()\nskf = StratifiedShuffleSplit(n_splits=5, random_state=10)\n# verbose - \u043f\u0435\u0447\u0430\u0442\u044c \u0440\u0435\u0437\u043b\u044c\u0443\u0442\u0430\u0442\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435  \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 (\u043f\u043e \u0443\u043c\u043e\u043b 0), \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438\nclf_lr_over = GridSearchCV(lr_skf, param, scoring='roc_auc', cv=skf, verbose=1)\nclf_lr_over.fit(X_over, y_over)\nprint('Best roc_auc: {:.4}, with best C: {}'.format(clf_lr_over.best_score_, clf_lr_over.best_params_))","2999f2ec":"df_report = get_scores(df_report, clf_lr_over, X_test, y_test, 'LogisticRegression_skf_imb')\ndf_report","754281d4":"perm = PermutationImportance(clf_lr_over, scoring='f1').fit(X_test, y_test)","265f1f1e":"eli5.show_weights(perm, feature_names=X_test.columns.tolist())","e62a169b":"rf_1 = RandomForestClassifier(bootstrap=True, max_depth=2, n_estimators=100)\nrf_2 = RandomForestClassifier(bootstrap=True, max_depth=5, n_estimators=300)\nrf_3 = RandomForestClassifier(bootstrap=True, max_depth=10, n_estimators=500)\nclf_st = VotingClassifier(estimators=[('rf_1', rf_1), ('rf_2', rf_2),('rf_3', rf_3)], voting='soft')\nclf_st.fit(X_over.values, y_over.values)","4c8c025a":"df_report = get_scores(df_report, clf_st, X_test, y_test,'VotingClassifier_rf')\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(13, 5))\nplot_precision_recall_curve(clf_st, X_test, y_test, ax=ax1)\nplot_roc_curve(clf_st, X_test, y_test, ax=ax2);\ndf_report","9c65204e":"rf_1 = RandomForestClassifier(bootstrap=True, max_depth=2, n_estimators=100)\nrf_2 = RandomForestClassifier(bootstrap=True, max_depth=5, n_estimators=300)\nrf_3 = RandomForestClassifier(bootstrap=True, max_depth=10, n_estimators=500)\nclf_st = VotingClassifier(estimators=[('rf_1', rf_1), ('rf_2', rf_2),('rf_3', rf_3)], voting='soft')\nclf_st.fit(X_train, y_train)","8a10ac29":"df_report = get_scores(df_report, clf_st, X_test, y_test,'VotingClassifier_rf_2')\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(13, 5))\nplot_precision_recall_curve(clf_st, X_test, y_test, ax=ax1)\nplot_roc_curve(clf_st, X_test, y_test, ax=ax2);\ndf_report","df3ea09c":"lr_1 = LogisticRegression()\nlr_2 = LogisticRegression(class_weight='balanced',C = 1.1119999999999999, penalty = 'l2')\nclf_st = VotingClassifier(estimators=[('lr1', lr_1), ('lr2', lr_2)], voting='soft')\nclf_st.fit(X_over.values, y_over.values)","1b014208":"df_report = get_scores(df_report, clf_st, X_test, y_test,'VotingClassifier_lr_2')\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(13, 5))\nplot_precision_recall_curve(clf_st, X_test, y_test, ax=ax1)\nplot_roc_curve(clf_st, X_test, y_test, ax=ax2);\ndf_report","bc06b357":"y = train_set[\"Survived\"]\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\",'Age']\nX = train_set[features]\nX_test = test_set[features]\nX = StandardScaler().fit_transform(X)\nX_test = StandardScaler().fit_transform(X_test)\nmodel_rf = RandomForestClassifier(n_estimators=100, max_depth=2, random_state=241)\nmodel_rf.fit(X, y)\npredictions = model_rf.predict(X_test)\nsubmission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = predictions\nsubmission.to_csv('submission_titanic_rf.csv',index = False)","bb1c77a0":"X","0eef7559":"\u041d\u0435 \u0432\u0441\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0438\u043c\u0435\u044e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 Age, Cabin \u0438 Embarked. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Cabin \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u0430\u043b\u0435\u0435 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0438 ,\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430. \u0414\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 Embarked \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e 2 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0434\u043b\u044f Age - 177.","09141a06":"\u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043f\u0440\u043e\u0434\u0435\u043b\u0430\u043d\u043d\u044b\u0445 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432, \u0434\u043b\u044f \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0431\u044b\u043b\u0430 \u043e\u0442\u043e\u0431\u0440\u0430\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u043e\u0433\u043e \u043b\u0435\u0441\u0430.","729d8c5e":"\u041f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u044b \u0431\u044b\u043b\u0438 \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043d\u0430 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0431\u044b\u043b\u0430 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0430 4 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u043e\u0448\u043b\u0438 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u044b \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d. \u0414\u0430\u043d\u043d\u044b\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0442 \u0444\u0430\u043a\u0442 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u043e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 Middle \u0432 \u043e\u0431\u0435\u0438\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0430\u0445. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0430\u0437\u043d\u0435\u0441\u0442\u0438 \u043f\u0430\u0441\u0441\u0438\u0436\u0438\u0440\u043e\u0432 \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 Unk \u043f\u043e \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c.","45bc1035":"\u0427\u0442\u043e \u043a\u0430\u0441\u0430\u0435\u043c\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0442\u043e \u0437\u0434\u0435\u0441\u044c \u0442\u0430 \u0436\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u0430 - \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c Age \u0438 Cabin, \u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u043f\u0443\u0441\u043a \u043f\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443 Fare. ","1fc15d6b":"\u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e \u043a\u0430\u043a \u0432\u0441\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u044b \u0431\u044b\u043b\u0438 \u0440\u0430\u0437\u043d\u0435\u0441\u0435\u043d\u044b \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u044b\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438.","b4216764":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f RandomForestClassifier \u0438 LogisticRegression.","679b91b5":"\u0421\u0440\u0435\u0434\u0438 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 Unk \u0431\u044b\u043b\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u044b \u0442\u0435, \u043a\u0442\u043e \u0438\u043c\u0435\u043b \u043d\u0430 \u0431\u043e\u0440\u0442\u0443 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439, \u0442.\u0435. Parch>1. \u0422\u0430\u043a\u0438\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u044b \u0431\u044b\u043b\u0438 \u043e\u0442\u043d\u0435\u0441\u0435\u043d\u044b \u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 Young.","3e01eba1":"\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0442\u044c \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438: Sex, Pclass, SibSp, Parch, Age, Fare, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u0441\u0432\u044f\u0437\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 Embarked = 0, \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438. ","cb22f2fc":"\u0414\u0432\u0430 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f Embarked \u0431\u044b\u043b\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043c\u043e\u0434\u043e\u0439 - Southempton","1363604c":"\u0414\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 Middle \u0438 Young \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 3-\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0441\u0435\u0440\u044c\u0451\u0437\u043d\u043e \u043f\u0440\u0435\u0432\u0430\u043b\u0438\u0440\u0443\u0435\u0442. ","afcd39bf":"\u041d\u0435\u043c\u043d\u043e\u0433\u043e \u0432\u044b\u0440\u043e\u0441\u043b\u0430 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0430 \u043d\u0435\u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445, \u0438 \u043f\u043e\u043b\u043d\u043e\u0442\u0430 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0430 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445. \u041e\u0441\u043e\u0431\u044b\u0445 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043d\u0435\u0437\u0430\u043c\u0435\u0442\u043d\u043e. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0442\u0430\u043a \u043a\u0430\u043a \u043a\u043b\u0430\u0441\u0441\u044b \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b, \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430."}}