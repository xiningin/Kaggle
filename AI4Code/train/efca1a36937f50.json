{"cell_type":{"5772df7c":"code","162b60de":"code","48fd1cbc":"code","6784f3c6":"code","72f3f6e1":"code","928faa7a":"code","1685b2a2":"code","2873330f":"code","f7ee967c":"code","c2b1b1d0":"code","f311da96":"code","170efe83":"code","61ef132a":"code","e49bddb1":"code","4f811f50":"code","a98c218d":"code","6f9f6c04":"code","74cfef38":"code","224750da":"code","6c6b5c4a":"code","8a13469d":"code","d87bc14d":"code","bd21f59e":"code","93b6e0be":"code","78408ed5":"code","4e3fabbe":"code","c076162f":"code","54fa34d8":"code","c0495329":"code","88188b6f":"code","7a018866":"code","e81eb793":"code","456c739a":"code","c75cb735":"code","6f326f01":"code","7ac719a6":"code","457038a8":"code","9b85012e":"code","43b3ed1e":"code","ed90011f":"code","3aa7b17b":"code","e4d21372":"code","121ce78e":"code","54a48fff":"code","fd20b5c3":"code","4f1ccb1f":"code","e9a97d2d":"code","dc335114":"code","46588318":"code","a15df6bd":"code","742f617a":"code","c4fd9476":"code","7a2b469b":"code","88a2e29c":"code","512e3212":"code","01b8c887":"code","a942411f":"code","93842faa":"code","8673f5c8":"code","b8da4464":"code","d029df9f":"code","1abd9a78":"code","d205ecfe":"code","6ff20337":"code","693cc3aa":"code","0522a669":"code","746d5863":"code","2de706ea":"code","92cca4ce":"code","fb690819":"code","9eed4f41":"code","2a74b042":"code","79ff2cef":"code","aee7bc12":"code","24e8dc99":"code","2f2d7feb":"code","de3b49e1":"code","669f9209":"code","db6caa71":"code","80b87475":"code","63944a67":"code","f907e0eb":"code","173fbfcf":"code","16c82972":"code","7291a7b3":"code","ab8c29ad":"code","44568085":"code","3fa0ef7b":"code","bd3e2f85":"code","dbd8a4c7":"code","7cb5d148":"code","20a84b24":"code","09f432a8":"code","59d66dfb":"code","0471aac3":"code","d3274775":"code","ef4bdbf6":"code","ca102a15":"code","1d331fbb":"code","188f2e18":"code","e3202161":"code","978ee9c1":"code","78227752":"code","20d55f00":"code","f844f533":"markdown"},"source":{"5772df7c":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np; np.random.seed(0)\nimport seaborn as sns; sns.set()\nimport matplotlib.pyplot as plt\n%matplotlib inline","162b60de":"from sklearn.datasets import load_boston\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error","48fd1cbc":"boston=load_boston()\ntype(boston)","6784f3c6":"boston.keys()","72f3f6e1":"boston.DESCR","928faa7a":"boston.feature_names","1685b2a2":"boston.target","2873330f":"data=boston.data\ntype(data)","f7ee967c":"data.shape","c2b1b1d0":"data=pd.DataFrame(data=data, columns=boston.feature_names)\ndata.head()","f311da96":"data[\"price\"]=boston.target\ndata.head()","170efe83":"data.describe()","61ef132a":"data.info()","e49bddb1":"data.isnull()","4f811f50":"data.isnull().sum()","a98c218d":"sns.pairplot(data)","6f9f6c04":"rows=2\ncols=7\nfig, ax= plt.subplots(nrows= rows, ncols=cols, figsize=(16,4))\ncol=data.columns\nindex=0\nfor i in range (rows):\n    for j in range(cols):\n        sns.distplot(data[col[index]], ax=ax[i][j])\n        index=index+1\nplt.tight_layout()","74cfef38":"corrmat=data.corr()\ncorrmat","224750da":"uniform_data = np.random.rand(10, 12)\nax = sns.heatmap(corrmat)","6c6b5c4a":"corrmat.index.values","8a13469d":"def getCorrelatedFeature(corrdata,thershold):\n    feature=[]\n    value=[]\n    for i,index in enumerate(corrdata.index):\n        if abs(corrdata[index])>thershold:\n            feature.append(index)\n            value.append(corrdata[index])\n    df=pd.DataFrame(data=value, index=feature, columns=['Corr Value'])\n    return df","d87bc14d":"thershold=0.50\ncorr_value=getCorrelatedFeature(corrmat['price'],thershold)\ncorr_value","bd21f59e":"corr_value.index.values","93b6e0be":"correlated_data=data[corr_value.index]\ncorrelated_data.head()","78408ed5":"sns.pairplot(correlated_data)\nplt.tight_laayout()","4e3fabbe":"x = sns.heatmap(correlated_data.corr())","c076162f":"X=correlated_data.drop(labels=['price'],axis=1)\ny=correlated_data['price']\nX.head()","54fa34d8":"y.head()","c0495329":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","88188b6f":"X_train.shape,X_test.shape","7a018866":"model=LinearRegression()\nmodel.fit(X_train,y_train)","e81eb793":"y_predict=model.predict(X_test)\n","456c739a":"y_predict,y_test","c75cb735":"df=pd.DataFrame(data=[y_predict,y_test])\ndf.T","6f326f01":"from sklearn.metrics import r2_score","7ac719a6":"score=r2_score(y_test,y_predict)\nmae=mean_absolute_error(y_test,y_predict)\nmse=mean_squared_error(y_test,y_predict)\nprint('r2_ score:',score)\nprint('mae:',mae)\nprint('mse:',mse)","457038a8":"total_features=[]\ntotal_features_name=[]\nselected_correlation_value=[]\nr2_scores=[]\nmae_value=[]\nmse_value=[]\n","9b85012e":"def perfomance_metrices(features,th,y_true,y_pred):\n    score=r2_score(y_true,y_pred)\n    mae=mean_absolute_error(y_true,y_pred)\n    mse=mean_squared_error(y_true,y_pred)\n    total_features.append(len(features)-1)\n    total_features_name.append(str(features))\n    selected_correlation_value.append(th)\n    r2_scores.append(score)\n    mae_value.append(mae)\n    mse_value.append(mse)\n    metrics_datatframe=pd.DataFrame(data=[total_features_name,total_features,selected_correlation_value,r2_scores,mae_value,mse_value],index=['features name','#feature','corr_value','MAE','MSE','as'])\n    return metrics_datatframe.T","43b3ed1e":" perfomance_metrices(correlated_data.columns.values,thershold,y_test,y_predict)","ed90011f":"rows=2\ncols=2\nfig,ax=plt.subplots(nrows=rows,ncols=cols,figsize=(16,4))\ncol=correlated_data.columns\nindex=0\nfor i in range(rows):\n    for j in range(cols):\n        sns.regplot(x=correlated_data[col[index]],y=correlated_data['price'],ax=ax[i][j])\n        index= index+1\nfig.tight_layout()","3aa7b17b":"from numpy import std\nfrom numpy import absolute\nfrom pandas import read_csv\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.linear_model import Ridge\nmodel = Ridge()\nmodel.fit(X_train,y_train)","e4d21372":"y_predict=model.predict(X_test)\nr2_score(y_test,y_predict)","121ce78e":"corrmat['price']","54a48fff":"thershold=0.60\ncorr_value=getCorrelatedFeature(corrmat['price'],thershold)\ncorr_value","fd20b5c3":"correlated_data=data[corr_value.index]\ncorrelated_data.head()\n\n\n\n\n","4f1ccb1f":"def get_y_predict(corr_data):\n    x=corr_data.drop(labels=['price'],axis=1)\n    y=corr_data['price']\n    X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2, random_state=0)\n    model=LinearRegression()\n    model.fit(X_train,y_train)\n    return y_predict","e9a97d2d":"y_predict=get_y_predict(correlated_data)","dc335114":"perfomance_metrices(correlated_data.columns.values,thershold,y_test,y_predict)","46588318":"corrmat['price']","a15df6bd":"thershold=0.70\ncorr_value=getCorrelatedFeature(corrmat['price'],thershold)\ncorr_value","742f617a":"correlated_data=data[corr_value.index]\ncorrelated_data.head()","c4fd9476":"y_predicts=get_y_predict(correlated_data)\nperfomance_metrices(correlated_data.columns.values,thershold,y_test,y_predict)","7a2b469b":"correlated_data=data[['RM','price']]\ncorrelated_data.head()","88a2e29c":"y_predicts=get_y_predict(correlated_data)\nperfomance_metrices(correlated_data.columns.values,thershold,y_test,y_predict)","512e3212":"model=LinearRegression(normalize=True)\nmodel.fit(X_train,y_train)","01b8c887":"y_predict=model.predict(X_test)\ns1=r2_score(y_test,y_predict)\nprint(s1)","a942411f":"from sklearn import datasets, linear_model\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold","93842faa":"model = linear_model.Ridge()\nmodel.fit(X_train,y_train)","8673f5c8":"y_predict=model.predict(X_test)\ns2=r2_score(y_test,y_predict)\nprint(s2)\n","b8da4464":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import PolynomialFeatures","d029df9f":"model = make_pipeline(PolynomialFeatures(degree=3), linear_model.Ridge())\nmodel.fit(X_train,y_train)\n","1abd9a78":"y_predict=model.predict(X_test)\ns3=r2_score(y_test,y_predict)\nprint(s3)","d205ecfe":"from sklearn.svm import SVR\nfrom sklearn.model_selection import GridSearchCV\nmodel = SVR(kernel='rbf', C=1e3, gamma=0.1)\nmodel.fit(X_train,y_train)","6ff20337":"y_predict=model.predict(X_test)\ns4=r2_score(y_test,y_predict)\nprint(s4)","693cc3aa":"from sklearn.tree import DecisionTreeRegressor\nmodel = DecisionTreeRegressor(max_depth=5)\nmodel.fit(X_train,y_train)\n","0522a669":"y_predict=model.predict(X_test)\ns5=r2_score(y_test,y_predict)\nprint(s5)","746d5863":"from sklearn.neighbors import KNeighborsRegressor\nmodel= KNeighborsRegressor(n_neighbors=7)\nmodel.fit(X_train,y_train)","2de706ea":"y_predict=model.predict(X_test)\ns6=r2_score(y_test,y_predict)\nprint(s6)","92cca4ce":"from sklearn.ensemble import GradientBoostingRegressor\n\nmodel = GradientBoostingRegressor(alpha=0.9,learning_rate=0.05, max_depth=2, min_samples_leaf=5, min_samples_split=2, n_estimators=100, random_state=30)\nmodel.fit(X_train,y_train)\n","fb690819":"y_predict=model.predict(X_test)\ns7=r2_score(y_test,y_predict)\nprint(s7)","9eed4f41":"import matplotlib.pyplot as plt\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nmodels = ['linear_reg.','Ridg_reg.','poly_reg','SVM','Decission_tree','k_nearest','gradient']\nscore = [s1,s2,s3,s4,s5,s6,s7]\nax.bar(models,score)\nplt.show()","2a74b042":"y_predict=model.predict(X_test)\n","79ff2cef":"df=pd.DataFrame(data=[y_predict,y_test])\ndf.T","aee7bc12":"from sklearn.model_selection import learning_curve","24e8dc99":"train_sizes = [1, 30,40,80,120,180,200,250]\ntrain_sizes, train_scores, validation_scores = learning_curve(\nestimator = LinearRegression(),\nX = X_train,\ny = y_train, train_sizes = train_sizes, cv = 5,\nscoring = 'neg_mean_squared_error')","2f2d7feb":"print('Training scores:\\n\\n', train_scores)\nprint('\\n', '-' * 70) # separator to make the output easy to read\nprint('\\nValidation scores:\\n\\n', validation_scores)","de3b49e1":"train_scores_mean = -train_scores.mean(axis = 1)\nvalidation_scores_mean = -validation_scores.mean(axis = 1)\nprint('Mean training scores\\n\\n', pd.Series(train_scores_mean, index = train_sizes))\nprint('\\n', '-' * 20) # separator\nprint('\\nMean validation scores\\n\\n',pd.Series(validation_scores_mean, index = train_sizes))","669f9209":"import matplotlib.pyplot as plt\n\nplt.style.use('seaborn')\nplt.plot(train_sizes, train_scores_mean, label = 'Training error')\nplt.plot(train_sizes, validation_scores_mean, label = 'Validation error')\nplt.ylabel('MSE', fontsize = 14)\nplt.xlabel('Training set size', fontsize = 14)\nplt.title('Learning curves for a linear regression model', fontsize = 18, y = 1.03)\nplt.legend()\nplt.ylim(0,40)","db6caa71":"train_sizes = [1, 30,40,80,120,180,200,250]\ntrain_sizes, train_scores, validation_scores = learning_curve(\nestimator = GradientBoostingRegressor(alpha=0.9,learning_rate=0.05, max_depth=2, min_samples_leaf=5, min_samples_split=2, n_estimators=100, random_state=30),\nX = X_train,\ny = y_train, train_sizes = train_sizes, cv = 5,\nscoring = 'neg_mean_squared_error')","80b87475":"print('Training scores:\\n\\n', train_scores)\nprint('\\n', '-' * 70) # separator to make the output easy to read\nprint('\\nValidation scores:\\n\\n', validation_scores)","63944a67":"train_scores_mean = -train_scores.mean(axis = 1)\nvalidation_scores_mean = -validation_scores.mean(axis = 1 )\nprint('Mean training scores\\n\\n', pd.Series(train_scores_mean, index = train_sizes))\nprint('\\n', '-' * 20) # separator\nprint('\\nMean validation scores\\n\\n',pd.Series(validation_scores_mean, index = train_sizes))","f907e0eb":"import matplotlib.pyplot as plt\n\nplt.style.use('seaborn')\nplt.plot(train_sizes, train_scores_mean, label = 'Training error')\nplt.plot(train_sizes, validation_scores_mean, label = 'Validation error')\nplt.ylabel('MSE', fontsize = 14)\nplt.xlabel('Training set size', fontsize = 14)\nplt.title('Learning curves for Gradient Decent', fontsize = 18, y = 1.03)\nplt.legend()\nplt.ylim(0,40)","173fbfcf":"from xgboost import XGBRegressor\nreg = XGBRegressor()\nreg.fit(X_train, y_train)","16c82972":"y_pred = reg.predict(X_train)","7291a7b3":"s7=r2_score(y_test,y_predict)\nprint(s6)","ab8c29ad":"data.describe()","44568085":"prices = data['price']\nfeatures = data.drop('price', axis = 1)","3fa0ef7b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(features, prices, test_size=0.2, random_state = 42)","bd3e2f85":"model = GradientBoostingRegressor(alpha=0.9,learning_rate=0.05, max_depth=2, min_samples_leaf=5, min_samples_split=2, n_estimators=100, random_state=30)\nmodel.fit(X_train,y_train)","dbd8a4c7":"y_predict=model.predict(X_test)\ns_final=r2_score(y_test,y_predict)\nprint(s_final)","7cb5d148":"from sklearn import preprocessing\nmin_max_scaler = preprocessing.MinMaxScaler()\ncolumn_sels = ['LSTAT', 'INDUS', 'NOX', 'PTRATIO', 'RM', 'TAX', 'DIS', 'AGE']\nx = data.loc[:,column_sels]\nx = pd.DataFrame(data=min_max_scaler.fit_transform(x), columns=column_sels)","20a84b24":"from sklearn import datasets, linear_model\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nimport numpy as np\n","09f432a8":"min_max_scaler = preprocessing.MinMaxScaler()\nx_scaled = min_max_scaler.fit_transform(x)\n","59d66dfb":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x_scaled, prices, test_size=0.2, random_state = 42)","0471aac3":"model = GradientBoostingRegressor(alpha=0.9,learning_rate=0.05, max_depth=2, min_samples_leaf=5, min_samples_split=2, n_estimators=100, random_state=30)\nmodel.fit(X_train,y_train)\ny_predict=model.predict(X_test)\ns_finall=r2_score(y_test,y_predict)\nprint(s_finall)","d3274775":"y_predict=model.predict(X_test)\ndf=pd.DataFrame(data=[y_predict,y_test])\ndf.T","ef4bdbf6":"train_sizes = [1, 30,40,80,120,180,200,250]\ntrain_sizes, train_scores, validation_scores = learning_curve(\nestimator = GradientBoostingRegressor(alpha=0.9,learning_rate=0.05, max_depth=2, min_samples_leaf=5, min_samples_split=2, n_estimators=100, random_state=30),\nX = X_train,\ny = y_train, train_sizes = train_sizes, cv = 5,\nscoring = 'neg_mean_squared_error')","ca102a15":"print('Training scores:\\n\\n', train_scores)\nprint('\\n', '-' * 70) # separator to make the output easy to read\nprint('\\nValidation scores:\\n\\n', validation_scores)","1d331fbb":"train_scores_mean = -train_scores.mean(axis = 1)\nvalidation_scores_mean = -validation_scores.mean(axis = 1)\nprint('Mean training scores\\n\\n', pd.Series(train_scores_mean, index = train_sizes))\nprint('\\n', '-' * 20) # separator\nprint('\\nMean validation scores\\n\\n',pd.Series(validation_scores_mean, index = train_sizes))","188f2e18":"import matplotlib.pyplot as plt\n\nplt.style.use('seaborn')\nplt.plot(train_sizes, train_scores_mean, label = 'Training error')\nplt.plot(train_sizes, validation_scores_mean, label = 'Validation error')\nplt.ylabel('MSE', fontsize = 14)\nplt.xlabel('Training set size', fontsize = 14)\nplt.title('Learning curves for Gradient Decent', fontsize = 18, y = 1.03)\nplt.legend()\nplt.ylim(0,40)","e3202161":"from sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor()\nmodel.fit(X_train,y_train)\ny_predict=model.predict(X_test)\ns=r2_score(y_test,y_predict)\nprint(s)","978ee9c1":"from sklearn.model_selection import RandomizedSearchCV\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\nmin_samples_split = [2, 5, 10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\nprint(random_grid)\nrf = RandomForestRegressor()\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)\nrf_random.fit(X_train,y_train)","78227752":"y_predict=rf_random.predict(X_test)","20d55f00":"sa=r2_score(y_test,y_predict)\nprint(sa)","f844f533":"corr_value.index.values"}}