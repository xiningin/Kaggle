{"cell_type":{"a6709c59":"code","312a6240":"code","773e1b5f":"code","708bb9ce":"code","177682f2":"code","f7172233":"code","cb0afbfe":"code","45a968ba":"code","b9fa4723":"code","42c85a23":"code","cef0c388":"code","92b08510":"code","773edfc4":"code","4d18ce83":"code","a4a001eb":"markdown"},"source":{"a6709c59":"import pandas as pd\nimport sys\nimport os\nimport shutil\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten\nfrom tensorflow.keras.preprocessing.image import array_to_img, img_to_array, load_img, ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom keras import regularizers\nfrom tensorflow.keras import layers\n# from tensorflow.keras.applications import EfficientNetB0\n# from tensorflow.keras.applications import EfficientNetB1\n# from tensorflow.keras.applications import EfficientNetB2\n# from tensorflow.keras.applications import EfficientNetB3\n# from tensorflow.keras.applications import EfficientNetB4\nfrom tensorflow.keras.applications import EfficientNetB5\n# from tensorflow.keras.applications import EfficientNetB6\n# from tensorflow.keras.applications import EfficientNetB7\nfrom tensorflow import keras","312a6240":"os.listdir('\/kaggle\/input\/')","773e1b5f":"# detect and init the TPU\n# tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n# tf.config.experimental_connect_to_cluster(tpu)\n# tf.tpu.experimental.initialize_tpu_system(tpu)\n\n# instantiate a distribution strategy\n# tpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\n# from kaggle_datasets import KaggleDatasets\n# GCS_DS_PATH_1 = KaggleDatasets().get_gcs_path('cassavaimagedata800x600')\n# GCS_DS_PATH_2 = KaggleDatasets().get_gcs_path('efficientnet-h5')\n# GCS_DS_PATH_3 = KaggleDatasets().get_gcs_path('cassava-leaf-disease-classification')\n# GCS_DS_PATH_4 = KaggleDatasets().get_gcs_path('model-k1')\n","708bb9ce":"# ---------------------------------------------------------------------------------------------------\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\n# ---------------------------------------------------------------------------------------------------\n\nlabels = [\"0\", \"1\", \"2\", \"3\", \"4\"]          # \u30e9\u30d9\u30eb\u8a2d\u5b9a\nNUM_LABELS = len(labels)                    # \u5206\u985e\u6570\nLEARNING_RATE = 0.0001                        # \u5b66\u7fd2\u7387 : Adam\u30671e-2\u306f\u5927\u304d\u3059\u304e\u30011e-3, 1e-4\u3042\u305f\u308a\u304c\u4e00\u822c\u7684\n                                            # \u81ea\u52d5\u6e1b\u8870\u3092\u5b9f\u88c5\u3057\u305f\u306e\u3067\u5927\u304d\u3081\u3067OK\nEPOCHS = 10                                 # \u30a8\u30dd\u30c3\u30af\u6570\nBATCH = 4                                   # \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba -> \u30b5\u30f3\u30d7\u30eb\u6570\u306e\u90fd\u5408\u4e0a\u3001128\u306fOK, 256\u4ee5\u4e0a\u306fNG\n# BATCH = 16 * tpu_strategy.num_replicas_in_sync\nHEIGHT = 600                                # \u753b\u50cf\u306e\u9ad8\u3055\nWIDTH = 800                                 # \u753b\u50cf\u306e\u5e45\nHEIGHT_DEVIDE = 1                           # \u753b\u50cf\u30b5\u30a4\u30ba\u7e26(600\/HEIGHT_DEVIDE)\nWIDTH_DEVIDE  = 1                           # \u753b\u50cf\u30b5\u30a4\u30ba\u6a2a(800\/WIDTH_DEVIDE)","177682f2":"# \u753b\u50cf\u30c7\u30fc\u30bf\u3092TF\u306b\u3076\u3061\u8fbc\u3081\u308b\u5f62\u5f0f\u306b\u5909\u63db\n# \u30e9\u30d9\u30eb\u306fone-hot\u306b\ntrain_data_gen = ImageDataGenerator(rescale=1.\/255)\nval_data_gen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_images_path = '..\/input\/cassavaimagedata800x600\/train_images\/train_images'\ntest_images_path  = '..\/input\/cassavaimagedata800x600\/test_images\/test_images'\n\ntrain_data = train_data_gen.flow_from_directory(train_images_path, \n                                                target_size=(int(WIDTH\/WIDTH_DEVIDE), int(HEIGHT\/HEIGHT_DEVIDE)),\n                                                color_mode='rgb', \n                                                batch_size=BATCH,\n                                                class_mode='categorical', \n                                                shuffle=True)\n\nvalidation_data = val_data_gen.flow_from_directory(test_images_path, \n                                                   target_size=(int(WIDTH\/WIDTH_DEVIDE), int(HEIGHT\/HEIGHT_DEVIDE)),\n                                                   color_mode='rgb', \n                                                   batch_size=BATCH,\n                                                   class_mode='categorical', \n                                                   shuffle=True)\n\n# \u753b\u50cf\u30c7\u30fc\u30bf\u3068\u30e9\u30d9\u30eb\u3092\u9023\u306d\u3066\u3044\u304f\u611f\u3058\n#             batch, width, height, rgb \n# image_data      8,   800,    600,   3\n#\n#             betch, category\n# label_data      8,     5\n#\n\n(image_data,label_data) = train_data.next()","f7172233":"# with tpu_strategy.scope():\ninputs = layers.Input(shape=(int(WIDTH\/WIDTH_DEVIDE), int(HEIGHT\/HEIGHT_DEVIDE), 3))\nmodel = EfficientNetB5(include_top=False, \n                       input_tensor=inputs, \n                       weights=\"..\/input\/efficientnet-h5\/efficientnetb5_notop.h5\",\n                       classifier_activation=\"ReLU\", # Softmax\u3060\u3068\u7de9\u3084\u304b\u306b\u767a\u6563\n                       pooling='max')\n\n\n# Rebuild top\n# x = layers.GlobalAveragePooling2D(name=\"avg_pool\")(model.output)\n# x = layers.BatchNormalization()(x)\nx = layers.Dense(units = BATCH, name=\"avg_pool\")(model.output)\ntop_dropout_rate = 0.25\nx = layers.Dropout(top_dropout_rate, name=\"top_dropout\")(x)\noutputs = layers.Dense(NUM_LABELS, \n                       activation='softmax',\n                       name=\"pred\")(x)\n\n\nmodel = keras.Model(inputs, outputs, name=\"EfficientNet\")\n\n# model.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\nmodel.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=LEARNING_RATE), \n              loss='categorical_crossentropy', \n              metrics=['accuracy'],\n#                   steps_per_execution=32 # TPU\n             )\n\n\nmodel.summary()","cb0afbfe":"# Early Stopping\n# epoch\u5c11\u306a\u304f\u3057\u3066\u308b\u3068\u304d\u306f\u3044\u3089\u306a\u3044\nearly_stopping = EarlyStopping(\n                        monitor   = 'val_loss',\n                        min_delta = 0.0,\n                        patience  = 10)\n\n# 2epoch\u6539\u5584\u304c\u898b\u3089\u308c\u306a\u3051\u308c\u3070Learning_rate\u30920.5\u500d\nreduce_lr = ReduceLROnPlateau(\n                        monitor  = 'val_loss',\n                        factor   = 0.5,\n                        patience = 2,\n                        min_lr   = 0.0001)\n\nhist = model.fit(train_data, \n                 epochs=EPOCHS, \n                 validation_data=validation_data, \n                 verbose=1,\n                 callbacks=[early_stopping, reduce_lr]\n                )","45a968ba":"model.save('model.h5', include_optimizer=False)\n# model = keras.models.load_model('model.h5', compile=False)\n\n# TPU\n# save_locally = tf.saved_model.SaveOptions(experimental_io_device='\/job:localhost')\n# model.save('.\/model', options=save_locally) # saving in Tensorflow's \"SavedModel\" format","b9fa4723":"print(\"Done.\")","42c85a23":"model = keras.models.load_model('..\/input\/model-k1\/model.h5', compile=False)\n# TPU\n# with strategy.scope():\n#     load_locally = tf.saved_model.LoadOptions(experimental_io_device='\/job:localhost')\n#     model = tf.keras.models.load_model('.\/model', options=load_locally) # loading in Tensorflow's \"SavedModel\" format","cef0c388":"output_csv = '..\/input\/cassava-leaf-disease-classification\/sample_submission.csv'\nsubmission = pd.read_csv(output_csv)\nsubmission.head()","92b08510":"output_img = '..\/input\/cassava-leaf-disease-classification\/test_images\/2216849948.jpg'\nimg = load_img(output_img)\nimg = img_to_array(img)\nimg = tf.reshape(img, (-1, int(WIDTH\/WIDTH_DEVIDE), int(HEIGHT\/HEIGHT_DEVIDE), 3))\npred = model.predict(img)\npred = np.argmax(pred)\n","773edfc4":"pred","4d18ce83":"submission_result = pd.DataFrame({'image_id' : submission.image_id, 'label' : pred})\nsubmission_result.to_csv('submission.csv', index=False)","a4a001eb":"# Output\u4f5c\u6210"}}