{"cell_type":{"e65cd36d":"code","33ec941d":"code","981322bc":"code","7ba0cba0":"code","3a7dae81":"code","8f63dfbd":"code","b82aa2eb":"code","3b854f37":"code","51a7a450":"code","0ca37318":"code","a254a112":"code","a8ac1521":"code","826c2e14":"code","e23d297f":"code","190bf2d9":"code","5dbd59c0":"code","8785e28c":"code","32fd1d42":"code","72bc2615":"code","de413616":"code","308be5d8":"code","efa2002d":"code","043f9dcb":"code","1c41dd15":"code","eedba055":"code","b009bbe7":"code","27482170":"code","9a95fa53":"code","fc5d423d":"code","c587e94f":"code","e1fc77b2":"code","3512707f":"code","8c6b6bf9":"code","980ca72f":"code","35e4904c":"code","e64dd493":"code","5122a14f":"markdown","7b92ae55":"markdown","5addd511":"markdown","4a1fc4ef":"markdown","0d5a1eab":"markdown","feff4217":"markdown","732a78b9":"markdown","1e8865ae":"markdown","a9892017":"markdown","fd5a7105":"markdown","684ae06b":"markdown","c0fb5d4d":"markdown","bcd92057":"markdown","b19ee957":"markdown","41a7e6ac":"markdown"},"source":{"e65cd36d":"#Assignment Author = Haider Ali\n#Code provided by = Genoveva Vargas-Solar\n#INP-Grenoble-SGB\n#HVDC\n#Student id: 42002598 \n#Email-id: haider2303@gmail.com , Haider.Ali@grenoble-inp.org","33ec941d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","981322bc":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n","7ba0cba0":"football = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","3a7dae81":"print(football)","8f63dfbd":"edu = pd.read_csv('\/kaggle\/input\/ense32020-ict-lesson-2\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","b82aa2eb":"edu.tail()","3b854f37":"edu.head(9)","51a7a450":"edu.tail()","0ca37318":"edu.describe()","a254a112":"edu['Value']","a8ac1521":"edu[10:14]","826c2e14":"edu.iloc[90:94][['TIME','GEO']]","e23d297f":"edu['Value'] > 6.5\n\n\n","190bf2d9":"edu[edu['Value'] > 6.5]","5dbd59c0":"edu[edu[\"Value\"].isnull()].head()","8785e28c":"edu.max(axis = 0)","32fd1d42":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","72bc2615":"s = edu[\"Value\"]\/100\ns.head()","de413616":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","308be5d8":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","efa2002d":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","043f9dcb":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.tail()","1c41dd15":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'appended_value'},\n                  ignore_index = True)\nedu.tail()","eedba055":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","b009bbe7":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","27482170":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","9a95fa53":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","fc5d423d":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","c587e94f":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","e1fc77b2":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","3512707f":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\n\npivedu","8c6b6bf9":"pivedu","980ca72f":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","35e4904c":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","e64dd493":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","5122a14f":"> **Question#6: What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?**\n* Ans: It returns boolean variable (True or False) for each index, based on the above condition.\n* If indexedu[edu['Value']>6.5], it returns aDataFrame with all the elements having value greater than 6.5.","7b92ae55":"> ******Question#5: What does this index return? What does the first index represent? And the second one?**\n* Ans: The first index represents the range of rows to display. Which in this particular case is 90 to 94. \n* The second index presents the name of columns we want to display","5addd511":"# Reading data\nNormally, CSV files have a header with the names of the columns. If this is the case, we can use the usecolsparameter to select which columns in the file will be used.","4a1fc4ef":"> ****Question#4:******Which measures does the result show? It seems that it shows some default values, can you guess which ones?******\n* Ans: It shows statistical information on all the numeric columns. \n* This statistical information will include mean, minimum value, maximum value etc.","0d5a1eab":"# Filtering data\nBoolean indexing uses the result of a Boolean operation over the data, returning a mask with True or False for each row. The rows marked True in the mask will be selected.","feff4217":"> ***Question#1 Which is the size of the edu DataFrame (rows x columns)?**\n* Ans: 384 rows\n* 3 columns","732a78b9":"# **PLOTTING THE DATA**\nndas DataFramesand Seriescan be plotted using the function plot, which uses the library for graphics Matplotlib","1e8865ae":"> **Question#2: What happens if we give a number as argument to the method head()?**\n* Ans: It gives the started indices equal to argument, staring from 0 to the \"given input - 1\". \n* For example edu.head(8) will returntotal first 8 elements with column numbers 0 to 7.","a9892017":"# **GROUPING OF DATA**\ngrouping of data on specific attributes. Pandas has the function groupbythat allows us to do exactly this. The value returned by this function is a special grouped DataFrame. To have a proper DataFrameas a result, it is necessary to apply an aggregation function. Thus, this function will be applied to all the values in the same group.","fd5a7105":"# **REARRANGING THE DATA**\nFor transforming arrangement of data for better manipulation.We can transform the arrangement of our data, redistributing the indexes and columns for better manipulation of our data, which normally leads to better performance. We can rearrange our data using the function pivot_table ","684ae06b":"> **Question#3:What does the method tail()return?**\nAns: It returns some last values of DataFrame.","c0fb5d4d":"# The DataFrameData Structure\nThe key data structure in Pandas is the DataFrameobject. A DataFrameis a tabular data structure, with rows and columns. Rows have a specific index to access them, which can be any name or value. In Pandas, the columns are called Series, a special type of data, which consists of a list of several values, where each value has an index","bcd92057":"# **SORTING OF DATA STRUCTURES**\nThis part deals with sorting the data either in ascending or descending order.We can sort a DataFrameusing any column, using the sort function. ","b19ee957":"# **RANKING THE DATA**\n> **Question#7: **What do you observe regarding the parameter ascending=False? \n******The values for different years is given in decending order******","41a7e6ac":"# Selecting data\nIf we want to select a subset of data from a DataFrame, it is necessary to indicate this subset using square brackets ([ ])after the DataFrame. The subset can be specified in several ways. If we want to select only one column from a DataFrame, we only need to put its name between the square brackets. "}}