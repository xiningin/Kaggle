{"cell_type":{"296b1c7b":"code","2493549e":"code","d085f14c":"code","cc4d5ae3":"code","6ced26ce":"code","397ec39d":"code","cb9f506c":"code","ba937cf4":"code","32b9f930":"code","1330c613":"code","c6fa17ac":"code","4fdba14b":"code","6d6d0ac0":"code","52d66599":"code","db699fd0":"code","b798a3f0":"code","003b28ad":"code","401f1601":"code","396c1355":"code","0004679c":"code","b7018a9b":"code","7231241a":"code","97d51073":"code","662b6583":"code","59478994":"code","b0f55b79":"code","b83e8197":"code","98e4d099":"code","d01dfaea":"code","4a0d1927":"code","87b33cb8":"code","ba9bedbe":"code","b8bd7d53":"code","4a91315c":"code","14bb23d7":"code","6969bf41":"code","9cb9326d":"code","596defcb":"code","69fcd94c":"code","56f15943":"markdown","78fb3113":"markdown","2856044f":"markdown","1accbf00":"markdown","fce1e2bd":"markdown","ace009f8":"markdown","30c2b39d":"markdown","2a153baa":"markdown"},"source":{"296b1c7b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random","2493549e":"train = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/test.csv')","d085f14c":"train.info()\n## Great Not Even 1 Null Value","cc4d5ae3":"train.drop(columns=['id', 'Policy_Sales_Channel'], inplace=True)\ntest.drop(columns=['id', 'Policy_Sales_Channel'],inplace=True)","6ced26ce":"train['Gender'].value_counts()","397ec39d":"train.plot(kind='box', figsize=(20, 12))","cb9f506c":"train['Annual_Premium'] = train['Annual_Premium'].astype('int')\ntest['Annual_Premium'] = test['Annual_Premium'].astype('int')","ba937cf4":"print(train['Annual_Premium'].describe())\nprint('-----------------TEST------------------')\nprint(test['Annual_Premium'].describe())\n","32b9f930":"train = train[(train['Annual_Premium'] > 24405) & (train['Annual_Premium'] <39400)]\ntest = test[(test['Annual_Premium'] > 2630) & (test['Annual_Premium'] <39408)]","1330c613":"sns.countplot(train['Gender'])","c6fa17ac":"train['Age'].describe()","4fdba14b":"train1 = train[train['Driving_License'] != 0]\ntest1 = test[test['Driving_License'] != 0]","6d6d0ac0":"# We Have 53 Region \ntrain1['Region_Code'].nunique()\ntrain1['Region_Code'] = train1['Region_Code'].astype('int')","52d66599":"plt.figure(figsize=(20, 12))\nsns.countplot(x='Region_Code', hue='Gender', data=train1)","db699fd0":"plt.figure(figsize=(20, 12))\nsns.countplot(x='Previously_Insured', hue='Gender',data=train1)","b798a3f0":"how_g_r_p = train1.pivot_table(index='Gender', columns='Region_Code', values='Previously_Insured', aggfunc='size')","003b28ad":"how_g_r_p.plot(kind='bar', figsize=(20, 20))","401f1601":"train1['Vehicle_Age'].value_counts()","396c1355":"def age_car_categori(x):\n    if x in '< 1 Year':\n        return 0\n    elif x in '1-2 Year':\n        return 1\n    else:\n        return 2\ntrain1['Vehicle_Age'] =  train1['Vehicle_Age'].apply(age_car_categori)\ntest1['Vehicle_Age'] =  test1['Vehicle_Age'].apply(age_car_categori)","0004679c":"train1.pivot_table(index='Vehicle_Age',columns='Gender' ,values='Previously_Insured', aggfunc='size').plot(kind='bar')","b7018a9b":"train1.groupby(['Vehicle_Age','Vehicle_Damage', 'Previously_Insured']).size().plot(kind='bar', color='y')","7231241a":"train1['Vintage'].describe()","97d51073":"def convert_to_month(x):\n    return x \/ 30\ntrain1['Vintage'] = train1['Vintage'].apply(convert_to_month)\ntrain1['Vintage'] = train1['Vintage'].astype('int')\ntest1['Vintage'] = test1['Vintage'].apply(convert_to_month)\ntest1['Vintage'] = test1['Vintage'].astype('int')","662b6583":"train1['Annual_Premium'].plot(kind='hist', bins=200)","59478994":"train['Age'].describe()","b0f55b79":"bins = [19, 37, 55, 86]\ntrain1['Age'] = pd.cut(train1['Age'], bins, labels=['young', 'Middle age', 'senior'])\ntest1['Age'] = pd.cut(test1['Age'], bins, labels=['young', 'Middle age', 'senior'])","b83e8197":"train2 = pd.get_dummies(train1)\ntest2 = pd.get_dummies(test1)","98e4d099":"train2","d01dfaea":"train3 = train2.drop(['Driving_License', 'Region_Code', 'Gender_Female', 'Vehicle_Damage_No'], axis=1)\ntest3 = test2.drop(['Driving_License', 'Region_Code', 'Gender_Female', 'Vehicle_Damage_No'], axis=1)","4a0d1927":"train3['Previously_Insured'] = pd.get_dummies(train3['Previously_Insured'])[0]\ntest3['Previously_Insured'] = pd.get_dummies(test3['Previously_Insured'])[0]","87b33cb8":"train3.plot(kind='box', figsize=(20, 12))","ba9bedbe":"count_class_0, count_class_1 = train3['Response'].value_counts()\ntrain3_res_0 = train3[train3['Response'] == 0]\ntrain3_res_1 = train3[train3['Response'] == 1]\nprint('befor balance data:')\nprint(train3_res_0.shape, train3_res_1.shape)\ntrain3_res_0 = train3_res_0.sample(count_class_1)\nprint('after balance data:')\nprint(train3_res_0.shape, train3_res_1.shape)\nmain_train = pd.concat([train3_res_1, train3_res_0], ignore_index=True)","b8bd7d53":"test3.shape, main_train.shape","4a91315c":"test3.shape, main_train.shape","14bb23d7":"y_train = main_train['Response']\nnp.random.shuffle(y.values)\nmain_train.drop('Response', axis=1, inplace=True)\nx_train = main_train\nx_test = test3[:43104]","6969bf41":"from sklearn.ensemble import RandomForestClassifier\nrn = RandomForestClassifier(max_depth=5, n_estimators=1000)\nrn.fit(x_train, y_train)\nprint(rn.score(x_train, y_train))","9cb9326d":"from xgboost import XGBClassifier\nmodel = XGBClassifier(max_depth=8, eta=0.6, subsample=0.7)\nmodel.fit(x_train, y_train)\nprint(model.score(x_train, y_train))\ny_predict = model.predict(x_test)","596defcb":"from sklearn.metrics import classification_report, confusion_matrix","69fcd94c":"print(classification_report(y_train, y_predict))","56f15943":"## Balance The Data","78fb3113":"## XGBoost:","2856044f":"## id \tUnique ID for the customer\n## Gender \tGender of the customer\n## Age \tAge of the customer\n## Driving_License \t0 : Customer does not have DL, 1 : Customer already has DL\n## Region_Code \tUnique code for the region of the customer\n## Previously_Insured \t1 : Customer already has Vehicle Insurance, 0 : Customer doesn't have Vehicle Insurance\n## Vehicle_Age \tAge of the Vehicle\n## Vehicle_Damage \t1 : Customer got his\/her vehicle damaged in the past. 0 : Customer didn't get his\/her vehicle damaged in the past.\n## Annual_Premium \tThe amount customer needs to pay as premium in the year\n## PolicySalesChannel \tAnonymized Code for the channel of outreaching to the customer ie. Different Agents, Over Mail, Over Phone, In Person, etc.\n## Vintage \tNumber of Days, Customer has been associated with the company\n## Response \t1 : Customer is interested, 0 : Customer is not interested","1accbf00":"### Work With Gender: ","fce1e2bd":"# Remove Person That's Not Have Driver Lincense","ace009f8":"## RandomForest:","30c2b39d":"## Because Of Not At The Same Size Get Lower Acc \n## We Balance The Data ","2a153baa":"## Remove Outlier :"}}