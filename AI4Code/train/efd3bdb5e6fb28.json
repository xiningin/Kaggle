{"cell_type":{"41192f33":"code","ef191e00":"code","8728d1cc":"code","11a718d9":"code","5437621c":"code","f9ec46fd":"code","cb494f4b":"code","04480740":"code","920195a8":"code","b49234de":"code","8187c5dd":"code","19cab9f4":"code","c6fe0e24":"code","e2584a2d":"code","9346afd1":"code","ce46ffa8":"code","61f0c746":"code","8116c1dd":"code","332296e1":"code","29ea0792":"code","5794aa4b":"code","7beb9155":"code","888dc1a4":"code","1d2f99eb":"code","820970d2":"code","c4ae21c4":"code","c8d62bd5":"code","d5110eac":"code","10bcf8eb":"code","69e33358":"code","719c3e64":"code","caa07c99":"code","af8a7b26":"code","86ec409d":"code","cf2f51c3":"code","ccdf7d7e":"code","ac4cf7d0":"code","42d0da4a":"code","993fc171":"code","8b1d4d9a":"code","75aae568":"code","5a42dad7":"code","4b9d0d8f":"code","4f253ad3":"code","a549b460":"code","87282e59":"code","0405cc01":"code","d4d1624d":"code","240fc17d":"code","555d62bb":"code","cd5d283f":"code","b53e9f5d":"code","0c563acc":"code","bd2485e8":"code","f5e1fce3":"code","550556c9":"code","80d49cab":"code","563f9542":"code","ba4d162a":"code","00dd7f6d":"code","fb43b018":"code","a4cd7106":"code","f2c90f93":"code","52fd354d":"code","9fabebea":"code","5a1c4676":"code","95cb9c54":"code","a6ed4ead":"code","0b1aa7cc":"code","35e3bec6":"code","123ae3b5":"code","1da6a230":"code","3b2f4400":"code","1bc0536c":"code","b9f6cde3":"code","e38ac3a9":"code","93271f3e":"code","cc977d9e":"code","07c6ccc6":"code","8ba4478d":"code","8e6d9fe9":"code","55574689":"code","3a1f170f":"code","893452c3":"code","ecabaa87":"code","d2fb94fe":"code","c4758396":"code","bf9fa0f2":"code","4ff5311a":"code","6c74f73a":"code","7c2d5c82":"code","4d5d1635":"code","b062862d":"code","7e8e9d44":"code","87a2b16d":"code","14300045":"code","c1097525":"code","5c01f1ee":"code","51bfef81":"code","fdaa6953":"code","ae58f832":"code","ce117375":"code","04a107b1":"code","7d356ecd":"code","abfdbce2":"code","3557e930":"code","c49efc6d":"code","00ed02ae":"code","036ba769":"code","f22f3c9b":"code","f344e551":"code","6adf9cb3":"code","f7a38351":"code","4d22887c":"code","0e1b2232":"code","226c5352":"code","fd3552ba":"code","915c0527":"code","17a873e5":"code","070bd99b":"code","b242f77a":"code","90e5f55b":"code","1d433e69":"code","50b3767b":"code","6a2d5f1f":"code","318ce6a1":"code","48fea0a6":"code","397796d2":"code","211f9402":"code","85736cd7":"markdown","fd29586d":"markdown","d71867e0":"markdown","fcba5886":"markdown","c06d49b5":"markdown","bd38af93":"markdown","6d766e3b":"markdown","832f3f59":"markdown","f65227d8":"markdown","654f3a41":"markdown","fb314e82":"markdown","4b0fa60a":"markdown","e8782823":"markdown","97da092d":"markdown","c0d528a5":"markdown","e598f45c":"markdown","bf2639f8":"markdown","ff888503":"markdown","37522be9":"markdown","0f7ab1aa":"markdown","eaaee5f2":"markdown","25c79e0c":"markdown","93359978":"markdown","5a1cd7e8":"markdown","828dab48":"markdown","58930a20":"markdown","8bd2f457":"markdown","88fc8826":"markdown","de1c7711":"markdown","a747884a":"markdown","e0e461bd":"markdown","9330fb8e":"markdown","5196a64d":"markdown","a36284af":"markdown","d14e320b":"markdown","98cf9a2b":"markdown","c8cf6ab2":"markdown"},"source":{"41192f33":"# Importing libraries\nimport numpy as np\nimport pandas as pd","ef191e00":"labels=['a','b','c']   #list\nmy_data = [10,20,30]   #list\narr = np.array(my_data)  #use numpy\narr","8728d1cc":"d = {'a':10,'b':20,'c':30}  # dictionary (key -value pair relationship)\n# Using List\npd.Series(data = my_data)","11a718d9":"pd.Series(data =my_data,index =labels)   #Note data comes after index","5437621c":"#You can simply this as \npd.Series(my_data,labels)","f9ec46fd":"# Numpy Arrays\npd.Series(arr) ","cb494f4b":"pd.Series(arr,labels)","04480740":"pd.Series(d)","920195a8":"pd.Series(data=labels)","b49234de":"# Even functions (although unlikely that you will use this)\npd.Series([sum,print,len])","8187c5dd":"ser1 = pd.Series([1,2,3,4],['USA','Germany','USSR','Japan'])\nser1","19cab9f4":"ser1['USA']","c6fe0e24":"ser2 = pd.Series([1,2,5,4],['USA','Germany','Italy','Japan'])\nser2","e2584a2d":"ser2['USA']","9346afd1":"# Operations are then also done based off of index:\nser1 + ser2\n# Note :  When you add two series, your Integers are converted as float. (Also see some rows got NAN values) \n# Tell what's the reason behind it in the comment below.","ce46ffa8":"#however we have already install above (to remind you I typed again)\nimport numpy as np\nimport pandas as pd","61f0c746":"from numpy.random import randn\nnp.random.seed(101)","8116c1dd":"df = pd.DataFrame(randn(5,4),['A','B','C','D','E'],['W','X','Y','Z'])\ndf","332296e1":"df['W']","29ea0792":"type(df['W'])   # Return type","5794aa4b":"# Pass a list of column names\ndf[['W','Z']]","7beb9155":"# SQL Syntax (NOT RECOMMENDED!)\ndf.W","888dc1a4":"df['new'] = df['W'] + df['Y']","1d2f99eb":"df","820970d2":"df.drop('new',axis=1)   # Note if you don't specify the axis =1 it will assume to be zero\n# axis =1 means for columns\n# axis =0 means for rows\/index","c4ae21c4":"df\n#see new is not deleted or drop permanently\n# so we have to use inplace = True","c8d62bd5":"df.drop('new',axis=1,inplace=True)\ndf","d5110eac":"df.drop('E',axis=0)","10bcf8eb":"df.loc['A']","69e33358":"# Or select based off of position instead of label \ndf.iloc[2]    # So we will get all values of C row","719c3e64":"df.loc['B','Y']","caa07c99":"df.loc[['A','B'],['W','Y']]","af8a7b26":"df","86ec409d":"df>0    # output true(means positive) or false(means negative)","cf2f51c3":"df[df>0]\n# In this case all the false value is replace by NaN and True value replace by original value.","ccdf7d7e":"df['W']>0","ac4cf7d0":"df[df['W']>0]    # element C row did you notice!!!!","42d0da4a":"df[df['W']>0]['Y']\n# B and D elemented because of negative value in Y column","993fc171":"df[df['W']>0][['Y','X']]","8b1d4d9a":"df[(df['W']>0) & (df['Y'] > 1)]","75aae568":"df","5a42dad7":"# Reset to default 0,1...n index\ndf.reset_index()","4b9d0d8f":"newind = 'CA NY WY OR CO'.split()\nnewind","4f253ad3":"df['States'] = newind\ndf","a549b460":"df.set_index('States')","87282e59":"df","0405cc01":"df.set_index('States',inplace=True)\ndf","d4d1624d":"# Index Levels\noutside = ['G1','G1','G1','G2','G2','G2']\ninside = [1,2,3,1,2,3]\nhier_index = list(zip(outside,inside))\nhier_index = pd.MultiIndex.from_tuples(hier_index)","240fc17d":"hier_index","555d62bb":"df = pd.DataFrame(np.random.randn(6,2),index=hier_index,columns=['A','B'])\ndf","cd5d283f":"df.loc['G1']","b53e9f5d":"df.loc['G1'].loc[1]","0c563acc":"df.index.names","bd2485e8":"df.index.names = ['Group','Num']\ndf","f5e1fce3":"df.xs('G1')","550556c9":"df.xs(['G1',1])","80d49cab":"df.xs(1,level='Num')","563f9542":"# Again I import for you (however it is not requried)\nimport numpy as np\nimport pandas as pd","ba4d162a":"df = {'A':[1,2,np.nan],'B':[5,np.nan,np.nan],'C':[1,2,3]}  # \/\/ we make dictonary\ndf ","00dd7f6d":"d = pd.DataFrame(df)     # now we make a data frame with using pandas\nd","fb43b018":"d.dropna()   # it will drop all the NaN values from the table","a4cd7106":"d.dropna(axis=1)  # for column","f2c90f93":"d.dropna(thresh=2) # thresh = 2 means keep only the rows with atleast 2 Non-Na values ","52fd354d":"d    # Note : I don't pass inplace = True that is why not rows or columns deleted permanently.","9fabebea":"d.dropna(thresh = 3 )  # it means keep only those rows which having atleast 3 Non-Na values that is index 0","5a1c4676":"d.fillna(value='FILL VALUE')","95cb9c54":"d['A'].fillna(value=d['A'].mean())  # here we replace NaN value with mean of the column","a6ed4ead":"import pandas as pd\n# Create dataframe\ndata = {'Company':['GOOG','GOOG','MSFT','MSFT','FB','FB'],\n       'Person':['Sam','Charlie','Amy','Vanessa','Carl','Sarah'],\n       'Sales':[200,120,340,124,243,350]}","0b1aa7cc":"df = pd.DataFrame(data)\ndf","35e3bec6":"df.groupby('Company')","123ae3b5":"# You can save this object as a new variable:\nby_comp = df.groupby(\"Company\")\nby_comp","1da6a230":"# And then call aggregate methods off the object:\nby_comp.mean()","3b2f4400":"# or Simply write this\ndf.groupby('Company').mean()   # you can calculate other things like sum, standard deviation etc.","1bc0536c":"df.groupby('Company').std() # standard deviation","b9f6cde3":"df.groupby('Company').sum()","e38ac3a9":"df.groupby('Company').min()","93271f3e":"by_comp.count()\n# or \ndf.groupby('Company').count()","cc977d9e":"by_comp.describe()\n# or\n# df.groupby('Company').describe()","07c6ccc6":"by_comp.describe().transpose()","8ba4478d":"by_comp.describe().transpose()['GOOG']","8e6d9fe9":"import pandas as pd","55574689":"df1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],\n                        'B': ['B0', 'B1', 'B2', 'B3'],\n                        'C': ['C0', 'C1', 'C2', 'C3'],\n                        'D': ['D0', 'D1', 'D2', 'D3']},\n                        index=[0, 1, 2, 3])","3a1f170f":"df2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'],\n                        'B': ['B4', 'B5', 'B6', 'B7'],\n                        'C': ['C4', 'C5', 'C6', 'C7'],\n                        'D': ['D4', 'D5', 'D6', 'D7']},\n                         index=[4, 5, 6, 7]) ","893452c3":"df3 = pd.DataFrame({'A': ['A8', 'A9', 'A10', 'A11'],\n                        'B': ['B8', 'B9', 'B10', 'B11'],\n                        'C': ['C8', 'C9', 'C10', 'C11'],\n                        'D': ['D8', 'D9', 'D10', 'D11']},\n                        index=[8, 9, 10, 11])","ecabaa87":"df1","d2fb94fe":"df2","c4758396":"df3","bf9fa0f2":"pd.concat([df1,df2,df3])","4ff5311a":"pd.concat([df1,df2,df3],axis=1)","6c74f73a":"left = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],\n                     'A': ['A0', 'A1', 'A2', 'A3'],\n                     'B': ['B0', 'B1', 'B2', 'B3']})\n   \nright = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],\n                          'C': ['C0', 'C1', 'C2', 'C3'],\n                          'D': ['D0', 'D1', 'D2', 'D3']})    ","7c2d5c82":"left","4d5d1635":"right","b062862d":"pd.merge(left,right,how='inner',on='key')","7e8e9d44":"# Or to show a more complicated example:\nleft = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],\n                     'key2': ['K0', 'K1', 'K0', 'K1'],\n                        'A': ['A0', 'A1', 'A2', 'A3'],\n                        'B': ['B0', 'B1', 'B2', 'B3']})\n    \nright = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],\n                               'key2': ['K0', 'K0', 'K0', 'K0'],\n                                  'C': ['C0', 'C1', 'C2', 'C3'],\n                                  'D': ['D0', 'D1', 'D2', 'D3']})","87a2b16d":"pd.merge(left, right, on=['key1', 'key2'])","14300045":"pd.merge(left, right, how='outer', on=['key1', 'key2'])","c1097525":"pd.merge(left, right, how='right', on=['key1', 'key2'])","5c01f1ee":"pd.merge(left, right, how='left', on=['key1', 'key2'])","51bfef81":"left = pd.DataFrame({'A': ['A0', 'A1', 'A2'],\n                     'B': ['B0', 'B1', 'B2']},\n                      index=['K0', 'K1', 'K2']) \n\nright = pd.DataFrame({'C': ['C0', 'C2', 'C3'],\n                    'D': ['D0', 'D2', 'D3']},\n                      index=['K0', 'K2', 'K3'])","fdaa6953":"left.join(right)","ae58f832":"left.join(right, how='outer')","ce117375":"import pandas as pd\ndf = pd.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})\ndf.head()   # when you use head function it will display only 5 index by default\n# however in this we have only 4 index\/rows so it display all four index","04a107b1":"df['col2'].unique()","7d356ecd":"df['col2'].nunique()\n# Return Series with number of distinct observations over requested","abfdbce2":"df['col2'].value_counts()","3557e930":"#Select from DataFrame using criteria from multiple columns\nnewdf = df[(df['col1']>2) & (df['col2']==444)]","c49efc6d":"newdf","00ed02ae":"### Applying Functions\ndef times2(x):\n    return x*2","036ba769":"df['col1'].apply(times2)","f22f3c9b":"df['col3'].apply(len)","f344e551":"df['col1'].sum()","6adf9cb3":"del df['col1']","f7a38351":"df","4d22887c":"df.columns","0e1b2232":"df.index","226c5352":"df","fd3552ba":"df.sort_values(by='col2') #inplace=False by default","915c0527":"df.isnull()","17a873e5":"# Drop rows with NaN Values\ndf.dropna()","070bd99b":"import numpy as np","b242f77a":"df = pd.DataFrame({'col1':[1,2,3,np.nan],\n                   'col2':[np.nan,555,666,444],\n                   'col3':['abc','def','ghi','xyz']})\ndf.head()","90e5f55b":"df.fillna('FILL')","1d433e69":"data = {'A':['foo','foo','foo','bar','bar','bar'],\n     'B':['one','one','two','two','one','one'],\n       'C':['x','y','x','y','x','y'],\n       'D':[1,3,2,5,4,1]}\n\ndf = pd.DataFrame(data)","50b3767b":"df","6a2d5f1f":"df.pivot_table(values='D',index=['A', 'B'],columns=['C'])","318ce6a1":"import numpy as np\nimport pandas as pd","48fea0a6":"#df = pd.read_csv('..\/input\/salaries\/Salaries.csv')\n#df","397796d2":"df.head()","211f9402":"# df = pd.read_html('https:\/\/www.fdic.gov\/bank\/individual\/failed\/banklist.html')\n# df","85736cd7":"**HTML**\n\nYou may need to install htmllib5,lxml, and BeautifulSoup4. In your terminal\/command prompt run:\n\nconda install lxml\nconda install html5lib\nconda install BeautifulSoup4\nThen restart Jupyter Notebook. (or use pip install if you aren't using the Anaconda Distribution)\n\nPandas can read table tabs off of html. For example:\n\n**HTML Input**\n\nPandas read_html function will read tables off of a webpage and return a list of DataFrame objects:","fd29586d":"### Info on Unique Values","d71867e0":"** Filling in NaN values with something else: **","fcba5886":"**Topic **\n1. Series\n2. Data Frames\n3. Missing Data\n4. Group by\n5. Merging, Joining and Concatenation\n6. Operations\n7. Data Input and Output","c06d49b5":"** Sorting and Ordering a DataFrame:**","bd38af93":"## Selection and Indexing\n\nLet's learn the various methods to grab data from a DataFrame","6d766e3b":"### Selecting Data","832f3f59":"**Data Frames**\n\nDataFrames are the workhorse of pandas and are directly inspired by the R programming language. We can think of a DataFrame as a bunch of Series objects put together to share the same index. Let's use pandas to explore this topic!","f65227d8":"**Merging, Joining, and Concatenating**\n\nThere are 3 main ways of combining DataFrames together: Merging, Joining and Concatenating. In this lecture we will discuss these 3 methods with examples.","654f3a41":"### Conditional Selection\n\nAn important feature of pandas is conditional selection using bracket notation, very similar to numpy:","fb314e82":"**Data Input and Output**\n\nThis notebook is the reference code for getting input and output, pandas can read a variety of file types using its pd.read_ methods. Let's take a look at the most common data types:","4b0fa60a":"** Permanently Removing a Column**","e8782823":"**PANDAS**\n\n* Pandas is an open source library built on top of Numpy.\n* It allows for fast analysis and data cleaning and preparation.\n* It excels in performance and productivity.\n* It also have build-in visualization features.\n* It can work with data from a wide variety of sources.\n\n\nYou can use for Anaconda case -  conda install pandas\n\nOtherwise on cmd prompt - pip install pandas","97da092d":"Now let's show how to index this! For index hierarchy we use df.loc[], if this was on the columns axis, you would just use normal bracket notation df[]. Calling one level of the index returns the sub-dataframe:","c0d528a5":"** Now you can use the .groupby() method to group rows together based off of a column name. For instance let's group based off of Company. This will create a DataFrameGroupBy object:**","e598f45c":"** Find Null Values or Check for Null Values**","bf2639f8":"## More Index Details\n\nLet's discuss some more features of indexing, including resetting the index or setting it something else. We'll also talk about index hierarchy!","ff888503":"**Group By**\n\nThe groupby method allows you to group rows of data together and call aggregate functions","37522be9":"**Missing Data**\n\nLet's show a few convenient methods to deal with Missing Data in pandas","0f7ab1aa":"Docstring:\nseed(seed=None)\n\nSeed the generator.\n\nThis method is called when `RandomState` is initialized. It can be\ncalled again to re-seed the generator. For details, see `RandomState`.\n\nParameters\n----------\nseed : int or 1-d array_like, optional\n    Seed for `RandomState`.\n    Must be convertible to 32 bit unsigned integers.\n\nSee Also\n--------\nRandomState\nType:      builtin_function_or_method","eaaee5f2":"**CSV**\n\n**CSV Input**","25c79e0c":"**Operations**\n\nThere are lots of operations with pandas that will be really useful to you, but don't fall into any distinct category. Let's show them here in this lecture:","93359978":"** Selecting subset of rows and columns **","5a1cd7e8":"**1. Series**\n\n\nA Series is very similar to a NumPy array (in fact it is built on top of the NumPy array object).\nWhat differentiates the NumPy array from a Series, is that a Series can \nhave axis labels, meaning it can be indexed by a label, instead of just a number location. \nIt also doesn't need to hold numeric data, it can hold any arbitrary Python Object.\n","828dab48":"** Removing Columns**","58930a20":"## Concatenation\n\nConcatenation basically glues together DataFrames. Keep in mind that dimensions should match along the axis you are concatenating on. You can use **pd.concat** and pass in a list of DataFrames to concatenate together:","8bd2f457":"For two conditions you can use | and & with parenthesis:","88fc8826":"** Get column and index names: **","de1c7711":"**Drop Na parameters**\n\nSignature :\ndf.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)\n\nDocstring :\nReturn object with labels on given axis omitted where alternately any\nor all of the data are missing\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, or tuple\/list thereof\n    Pass tuple or list to drop on multiple axes\nhow : {'any', 'all'}\n    * any : if any NA values are present, drop that label\n    * all : if all values are NA, drop that label\nthresh : int, default None\n    int value : require that many non-NA values\nsubset : array-like\n    Labels along other axis to consider, e.g. if you are dropping rows\n    these would be a list of columns to include\ninplace : boolean, default False\n    If True, do operation inplace and return None.\n\nReturns\n-------\ndropped : DataFrame\n","a747884a":"## Multi-Index and Index Hierarchy\n\nLet us go over how to work with Multi-Index, first we'll create a quick example of what a Multi-Indexed DataFrame would look like:","e0e461bd":"**Using an Index\n**\n\nThe key to using a Series is understanding its index. Pandas makes use of these index names or numbers by allowing for fast look ups of information (works like a hash table or dictionary).\n\nLet's see some examples of how to grab information from a Series. Let us create two sereis, ser1 and ser2:\n","9330fb8e":"**Data in Series**\n\nA pandas Series can hold a variety of object types:","5196a64d":"**Selecting Rows**","a36284af":"## Joining\n\nJoining is a convenient method for combining the columns of two potentially differently-indexed DataFrames into a single result DataFrame.","d14e320b":"**We can also drop Rows in same way**","98cf9a2b":"**Creating a new column:**","c8cf6ab2":"## Merging\n\nThe **merge** function allows you to merge DataFrames together using a similar logic as merging SQL Tables together. For example:"}}