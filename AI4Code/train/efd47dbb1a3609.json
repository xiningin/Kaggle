{"cell_type":{"18e4e2cc":"code","f982e39e":"code","19e777d5":"code","fb747d27":"code","0edef0ac":"code","a82fa5ac":"code","738c3442":"code","156d8532":"code","71d4e547":"code","7ea8691b":"code","6ee9f350":"code","226f5d37":"code","2b9b77b4":"code","491c1b0d":"code","00b1ee5d":"code","bf0efa7e":"code","a6a79ec3":"code","e2bcaa2a":"code","014c3e59":"code","8703044d":"code","029422a6":"code","05b4e129":"code","491fb566":"code","ca2df0b4":"code","5ac4bc8c":"code","32bf09b0":"code","cd201a42":"code","f1107fba":"code","c5a44184":"markdown","994f7181":"markdown","ea3fe652":"markdown","2d1b9a37":"markdown","18568597":"markdown","8d1a2aa1":"markdown","77001274":"markdown","b31859dc":"markdown","fcebdd00":"markdown","085cb29b":"markdown","7538a6b2":"markdown","3fd626d4":"markdown","9358b788":"markdown","823d7a24":"markdown","e9539aa0":"markdown","adf6dfcf":"markdown","00c381e1":"markdown","a227d229":"markdown","013060be":"markdown","eed1f519":"markdown"},"source":{"18e4e2cc":"import tensorflow as tf \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport os\nimport cv2\ntf.__version__","f982e39e":"img_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n                            #rotation_range=90,\n                            brightness_range=(0.5,1), \n                            #shear_range=0.2, \n                            #zoom_range=0.2,\n                            channel_shift_range=0.2,\n                            horizontal_flip=True,\n                            vertical_flip=True,\n                            rescale=1.\/255,\n                            validation_split=0.3)","19e777d5":"root_dir = '..\/input\/dandelionimages\/Images'\n\nimg_generator_flow_train = img_generator.flow_from_directory(\n    directory=root_dir,\n    target_size=(224, 224),\n    batch_size=16,\n    shuffle=True,\n    subset=\"training\")\n\nimg_generator_flow_valid = img_generator.flow_from_directory(\n    directory=root_dir,\n    target_size=(224, 224),\n    batch_size=16,\n    shuffle=True,\n    subset=\"validation\")","fb747d27":"data_dir='..\/input\/dandelionimages\/Images'\nNames0 = os.listdir(data_dir)\nNames=sorted(Names0)\nprint(Names)","0edef0ac":"N=[0,1]\nnormal_mapping=dict(zip(Names,N))\nreverse_mapping=dict(zip(N,Names))","a82fa5ac":"imgs, labels = next(iter(img_generator_flow_train))\nfor img, label in zip(imgs, labels):\n    plt.imshow(cv2.cvtColor(img,cv2.COLOR_BGR2RGB))\n    value=np.argmax(label)\n    plt.title(reverse_mapping[value])\n    plt.show()","738c3442":"base_model = tf.keras.applications.InceptionV3(input_shape=(224,224,3),\n                                               include_top=False,\n                                               weights = \"imagenet\"\n                                               )","156d8532":"base_model.trainable = False","71d4e547":"model = tf.keras.Sequential([\n    base_model,\n    tf.keras.layers.MaxPooling2D(),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(2, activation=\"softmax\")\n])","7ea8691b":"model.summary()","6ee9f350":"model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = 0.001),\n              loss = tf.keras.losses.CategoricalCrossentropy(),\n              metrics = [tf.keras.metrics.CategoricalAccuracy()])","226f5d37":"model.fit(img_generator_flow_train, \n          validation_data=img_generator_flow_valid, \n          steps_per_epoch=8, epochs=32) #8,64","2b9b77b4":"# Visualise train \/ Valid Accuracy\nplt.plot(model.history.history[\"categorical_accuracy\"], c=\"r\", label=\"train_accuracy\")\nplt.plot(model.history.history[\"val_categorical_accuracy\"], c=\"b\", label=\"test_accuracy\")\nplt.legend(loc=\"upper left\")\nplt.show()","491c1b0d":"# Visualise train \/ Valid Loss\nplt.plot(model.history.history[\"loss\"], c=\"r\", label=\"train_loss\")\nplt.plot(model.history.history[\"val_loss\"], c=\"b\", label=\"test_loss\")\nplt.legend(loc=\"upper left\")\nplt.show()","00b1ee5d":"imgs, labels = next(iter(img_generator_flow_valid))","bf0efa7e":"for layer in model.layers:\n    print(layer.name)","a6a79ec3":"base_model = model.layers[0]","e2bcaa2a":"tf.keras.utils.plot_model(base_model, show_shapes=True, show_layer_names=True)","014c3e59":"for layer in base_model.layers:\n    print(layer.name)","8703044d":"last_conv_layer_name = \"mixed10\"\nclassifier_layer_names = [layer.name for layer in model.layers][1:]","029422a6":"# We start by setting up the dependencies we will use\n\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Display\nfrom IPython.display import Image\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm","05b4e129":"# The Grad-CAM algorithm\ndef get_img_array(img_path, size):\n    # `img` is a PIL image of size 299x299\n    img = keras.preprocessing.image.load_img(img_path, target_size=size)\n    # `array` is a float32 Numpy array of shape (299, 299, 3)\n    array = keras.preprocessing.image.img_to_array(img)\n    # We add a dimension to transform our array into a \"batch\"\n    # of size (1, 299, 299, 3)\n    array = np.expand_dims(array, axis=0)\n    return array\n\n\ndef make_gradcam_heatmap(\n    img_array, base_model, model, last_conv_layer_name, classifier_layer_names):\n    # First, we create a model that maps the input image to the activations\n    # of the last conv layer\n    last_conv_layer = base_model.get_layer(last_conv_layer_name)\n    last_conv_layer_model = keras.Model(base_model.inputs, last_conv_layer.output)\n\n    # Second, we create a model that maps the activations of the last conv\n    # layer to the final class predictions\n    classifier_input = keras.Input(shape=last_conv_layer.output.shape[1:])\n    x = classifier_input\n    for layer_name in classifier_layer_names:\n        x = model.get_layer(layer_name)(x)\n    classifier_model = keras.Model(classifier_input, x)\n\n    # Then, we compute the gradient of the top predicted class for our input image\n    # with respect to the activations of the last conv layer\n    with tf.GradientTape() as tape:\n        # Compute activations of the last conv layer and make the tape watch it\n        last_conv_layer_output = last_conv_layer_model(img_array)\n        tape.watch(last_conv_layer_output)\n        # Compute class predictions\n        preds = classifier_model(last_conv_layer_output)\n        top_pred_index = tf.argmax(preds[0])\n        top_class_channel = preds[:, top_pred_index]\n\n    # This is the gradient of the top predicted class with regard to\n    # the output feature map of the last conv layer\n    grads = tape.gradient(top_class_channel, last_conv_layer_output)\n\n    # This is a vector where each entry is the mean intensity of the gradient\n    # over a specific feature map channel\n    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n\n    # We multiply each channel in the feature map array\n    # by \"how important this channel is\" with regard to the top predicted class\n    last_conv_layer_output = last_conv_layer_output.numpy()[0]\n    pooled_grads = pooled_grads.numpy()\n    for i in range(pooled_grads.shape[-1]):\n        last_conv_layer_output[:, :, i] *= pooled_grads[i]\n\n    # The channel-wise mean of the resulting feature map\n    # is our heatmap of class activation\n    heatmap = np.mean(last_conv_layer_output, axis=-1)\n\n    # For visualization purpose, we will also normalize the heatmap between 0 & 1\n    heatmap = np.maximum(heatmap, 0) \/ np.max(heatmap)\n    return heatmap","491fb566":"# Print what the top predicted class is\npreds = model.predict(imgs)\npred_labels = tf.argmax(preds, axis = -1)\n\nprint(\"Prediction output:\", preds)\nprint(\"Predicted label:\", pred_labels)","ca2df0b4":"# Generate class activation heatmap\nheatmaps = []\n\nfor img in imgs:\n    heatmap = make_gradcam_heatmap(\n    tf.expand_dims(img,axis=0),\n        base_model, model, \n        last_conv_layer_name, \n        classifier_layer_names\n  )\n    heatmaps.append(heatmap)\n\n\n# Display heatmap\nplt.matshow(heatmaps[0])\nplt.show()\n","5ac4bc8c":"from pathlib import Path\n\nfor img, pred_label, true_label, heatmap in zip(imgs, pred_labels, labels, heatmaps): \n    # We rescale heatmap to a range 0-255\n    heatmap = np.uint8(255 * heatmap)\n\n    # We use jet colormap to colorize heatmap\n    jet = cm.get_cmap(\"jet\")\n\n    # We use RGB values of the colormap\n    jet_colors = jet(np.arange(256))[:, :3]\n    jet_heatmap = jet_colors[heatmap]\n\n    # We create an image with RGB colorized heatmap\n    jet_heatmap = keras.preprocessing.image.array_to_img(jet_heatmap)\n    jet_heatmap = jet_heatmap.resize((img.shape[1], img.shape[0]))\n    jet_heatmap = keras.preprocessing.image.img_to_array(jet_heatmap)\n\n    # Superimpose the heatmap on original image\n    superimposed_img = jet_heatmap * 0.003 + img\n    superimposed_img = keras.preprocessing.image.array_to_img(superimposed_img)\n\n    # Save the superimposed image\n    save_path = \"saved_img.jpg\"\n    superimposed_img.save(save_path)\n\n    # Display Grad CAM\n    pred_file_path = np.argmax(img_generator_flow_valid.labels == pred_label)\n    pred_label_name = Path(img_generator_flow_valid.filepaths[pred_file_path]).parent.name\n\n    true_file_path = np.argmax(img_generator_flow_valid.labels == tf.argmax(true_label))\n    true_label_name = Path(img_generator_flow_valid.filepaths[true_file_path]).parent.name\n\n    print(\"Predicted label:\",pred_label_name)\n    print(\"True label:\", true_label_name)\n\n    display(Image(save_path))","32bf09b0":"LABEL=[]\nfor item in labels:\n    LABEL+=[np.argmax(item)]\nPRED=pred_labels.numpy().tolist()","cd201a42":"print(LABEL)\nprint(PRED)","f1107fba":"from sklearn.metrics import classification_report\nprint(classification_report(LABEL,PRED))","c5a44184":"### Create heatmap","994f7181":"### Predicted label and heatmap","ea3fe652":"# Interpretation with Grad Cam\n","2d1b9a37":"### Prepare ImageDataGenerator\nhttps:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/preprocessing\/image\/ImageDataGenerator","18568597":"### make_gradcam_heatmap","8d1a2aa1":"## compare the result with Dandelion DINO Attention Image Transfer Learning\nhttps:\/\/www.kaggle.com\/stpeteishii\/dandelion-dino-attention-transfer-learning","77001274":"![Upvote!](https:\/\/img.shields.io\/badge\/Upvote-If%20you%20like%20my%20work-07b3c8?style=for-the-badge&logo=kaggle)<br\/>\nhttps:\/\/www.kaggle.com\/stpeteishii\/dandelion-image-transfer-learning","b31859dc":"### Compile model","fcebdd00":"### Prepare img_generator_flow","085cb29b":"### Set the weights of the imported model","7538a6b2":"### Visualize accuracy and loss","3fd626d4":"### Create imgs and labels","9358b788":"### Import a pretrained model\nhttps:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/applications\/InceptionV3","823d7a24":"### Train the model","e9539aa0":"### Create model","adf6dfcf":"# Transfer Learning ","00c381e1":"### Predict","a227d229":"# Dandelion Image Transfer Learning \nThis notebook referred to the following notebook.<br\/>\nhttps:\/\/www.kaggle.com\/pierrelouisdanieau\/transfer-learning-on-images-with-tensorflow","013060be":"# Preprocessing with ImageDataGenerator","eed1f519":"### Visualize a batch of images"}}