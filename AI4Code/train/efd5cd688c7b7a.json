{"cell_type":{"8602b173":"code","54432d97":"code","90489173":"code","20ee6eba":"code","c2fe2b88":"code","79a88a1b":"code","6961d2eb":"code","9b420c2a":"code","5f4ef625":"code","94923a61":"code","d5180ceb":"code","b9f14edb":"code","5395dfe0":"code","9df50df1":"code","75677890":"code","0026c247":"code","f40d9fb2":"code","25453fa1":"code","60af399f":"code","8b09a694":"code","5211e548":"code","c4db224a":"code","ccb782f4":"code","8e35c643":"code","d89cd545":"markdown"},"source":{"8602b173":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns","54432d97":"df=pd.read_csv('\/kaggle\/input\/nasa-asteroids-classification\/nasa.csv')","90489173":"df.head()","20ee6eba":"df.shape","c2fe2b88":"df.info","79a88a1b":"print(df.isnull().sum())\nimport missingno as msno\nmsno.matrix(df)","6961d2eb":"from sklearn.preprocessing import LabelEncoder\nl_enc = LabelEncoder()\ndf['hazardous'] = l_enc.fit_transform(df.Hazardous) \nprint('Hazardous == True -> 1')\nprint('Hazardous == False -> 0\\n')","9b420c2a":"df = df.drop([\"Hazardous\"],axis=1)\ndf.head()","5f4ef625":"plt.figure(figsize = (20,20))\nsns.heatmap(df.corr(),cmap=\"Spectral\",annot=True) ","94923a61":"df = df.drop([\"Orbiting Body\", \"Equinox\"], axis =1) #consist same data","d5180ceb":"df = df.drop([\"Name\",\"Neo Reference ID\",\"Orbit ID\"],axis = 1) #name and Id doesn't contribute anything in our objective","b9f14edb":"df = df.drop([\"Epoch Date Close Approach\",\"Close Approach Date\",\"Orbit Determination Date\"],axis =1) #Date doesn't co","5395dfe0":"df = df.drop([\"Est Dia in KM(max)\", \"Est Dia in M(min)\", \"Est Dia in M(max)\", \"Est Dia in Miles(min)\" ,\"Est Dia in Miles(max)\", \"Est Dia in Feet(min)\", \"Est Dia in Feet(max)\", \"Relative Velocity km per hr\", \"Miles per hour\", \"Miss Dist.(lunar)\", \"Miss Dist.(kilometers)\", \"Miss Dist.(miles)\"], axis = 1) #same data with different Units so Doesn't contribute anything in our objective","9df50df1":"df.head()","75677890":"df.shape","0026c247":"plt.figure(figsize = (20,20))\nsns.heatmap(df.corr(),cmap=\"Spectral\",annot=True) ","f40d9fb2":"x=df.drop(['hazardous'],axis=1)\ny=df['hazardous'].astype(int)\nx, y = df.iloc[: , :-1], df.iloc[: , -1]","25453fa1":"df.head()","60af399f":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, random_state=10 , test_size=0.3)","8b09a694":"from sklearn.metrics import classification_report,confusion_matrix, accuracy_score","5211e548":"params = {\n    \"max_depth\" :[3,4,5],\n    \"min_child_weight\":[2,3,5,7],\n    \"learning_rate\":[0.01,0.05,0.07,0.1,0.2,0.3],\n    \"colsample_bytree\":[0.3,0.5,0.7,0.9],\n    \"gamma\":[0.0,0.1,0.2,0.3,0.4]\n}","c4db224a":"# Hyper parameter optimization\nfrom sklearn.model_selection import RandomizedSearchCV , GridSearchCV\nimport xgboost","ccb782f4":"from xgboost import XGBClassifier\nclassifier_xbg = XGBClassifier()\nrandom_search = RandomizedSearchCV(classifier_xbg,param_distributions=params,n_iter=5,scoring=\"roc_auc\",n_jobs = -1,cv=5,verbose = 3)\nclassifier_xbg.fit(x_train, y_train)\nY_pred_xbg = classifier_xbg.predict(x_test)\nprint(confusion_matrix(y_test,Y_pred_xbg ))\nprint(classification_report(y_test,Y_pred_xbg ))\nprint(accuracy_score(y_test,Y_pred_xbg ))","8e35c643":"from matplotlib import pyplot\nfrom xgboost import plot_importance\nplot_importance(classifier_xbg)\npyplot.show()","d89cd545":"**About Dataset**\n\nThe data consist information regarding Asteroid like their Name, IDs, relative velocities, Estimated diameter inclination etc. by using this data we can search for Asteroids based on their closest approach date to Earth, lookup a specific Asteroid with its NASA JPL small body Id, as well as browse the overall data-set.\n\n**Task**\n-Build a model that can predict if the asteroid is going to be hazardous or not.\n\n-To find the features which contribute the most in our prediction.\n\n**Method used in Predicting**\nXGBoost Classifier\nusing randomized search\n\n**Conclusion**\nXGBoost classifier predicts the most accurate ($99.92$%) \n\n\nBy observing Graph we can conclude the importance and contribution of that particular feature in the prediction of our model.\n"}}