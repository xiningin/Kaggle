{"cell_type":{"b9a57821":"code","c0ad162b":"code","6d0c56a6":"code","b4d3b126":"code","384c3a01":"code","80284177":"code","09f03720":"code","ec62eb13":"code","04fc2796":"code","c3862a2b":"code","d9a7aa83":"code","1a1bd8ce":"code","82af1dc9":"code","c189468f":"code","acc15213":"code","d5713f77":"code","fa82abb9":"code","6ca97742":"markdown","6af9b941":"markdown","198d5c01":"markdown","efbbcffa":"markdown","3153b6d3":"markdown","1efa5a91":"markdown","d4a64a87":"markdown","489ab721":"markdown","bcdb2113":"markdown","32241681":"markdown","aa92323e":"markdown","557e287a":"markdown","e98431a8":"markdown","5705b77c":"markdown","77587848":"markdown"},"source":{"b9a57821":"import random\n\nclass Sentiment:\n    NEGATIVE = \"NEGATIVE\"\n    NEUTRAL = \"NEUTRAL\"\n    POSITIVE = \"POSITIVE\"\n\nclass Review:\n    def __init__(self, text, score):\n        self.text = text\n        self.score = score\n        self.sentiment = self.get_sentiment()\n        \n    def get_sentiment(self):\n        if self.score <= 2:\n            return Sentiment.NEGATIVE\n        elif self.score == 3:\n            return Sentiment.NEUTRAL\n        else: #Score of 4 or 5\n            return Sentiment.POSITIVE\n\nclass ReviewContainer:\n    def __init__(self, reviews):\n        self.reviews = reviews\n        \n    def get_text(self):\n        return [x.text for x in self.reviews]\n    \n    def get_sentiment(self):\n        return [x.sentiment for x in self.reviews]\n        \n    def evenly_distribute(self):\n        negative = list(filter(lambda x: x.sentiment == Sentiment.NEGATIVE, self.reviews))\n        positive = list(filter(lambda x: x.sentiment == Sentiment.POSITIVE, self.reviews))\n        positive_shrunk = positive[:len(negative)]\n        self.reviews = negative + positive_shrunk\n        random.shuffle(self.reviews)","c0ad162b":"import json\n\nfile_name = '..\/input\/amazon-reviews\/Books_small_10000.json'\n\nreviews = []\nwith open(file_name) as f:\n    for line in f:\n        review = json.loads(line)\n        reviews.append(Review(review['reviewText'], review['overall']))\n        \nreviews[5].text","6d0c56a6":"from sklearn.model_selection import train_test_split\n\ntraining, test = train_test_split(reviews, test_size=0.33, random_state=42)\n\ntrain_container = ReviewContainer(training)\n\ntest_container = ReviewContainer(test)","b4d3b126":"train_container.evenly_distribute()\ntrain_x = train_container.get_text()\ntrain_y = train_container.get_sentiment()\n\ntest_container.evenly_distribute()\ntest_x = test_container.get_text()\ntest_y = test_container.get_sentiment()\n\nprint(train_y.count(Sentiment.POSITIVE))\nprint(train_y.count(Sentiment.NEGATIVE))\n436","384c3a01":"from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n\n# This book is great !\n# This book was so bad\n\nvectorizer = TfidfVectorizer()\ntrain_x_vectors = vectorizer.fit_transform(train_x)\n\ntest_x_vectors = vectorizer.transform(test_x)\n\nprint(train_x[0])\nprint(train_x_vectors[0].toarray())\n","80284177":"from sklearn import svm\n\nclf_svm = svm.SVC(kernel='linear')\n\nclf_svm.fit(train_x_vectors, train_y)\n\ntest_x[0]\n\nclf_svm.predict(test_x_vectors[0])","09f03720":"from sklearn.tree import DecisionTreeClassifier\n\nclf_dec = DecisionTreeClassifier()\nclf_dec.fit(train_x_vectors, train_y)\n\nclf_dec.predict(test_x_vectors[0])","ec62eb13":"from sklearn.naive_bayes import GaussianNB\n\nclf_gnb = GaussianNB()\nclf_gnb.fit(train_x_vectors.toarray(), train_y)\n\nclf_gnb.predict(test_x_vectors[0].toarray())","04fc2796":"from sklearn.linear_model import LogisticRegression\n\nclf_log = LogisticRegression()\nclf_log.fit(train_x_vectors, train_y)\n\nclf_log.predict(test_x_vectors[0])","c3862a2b":"# Mean Accuracy\nprint(clf_svm.score(test_x_vectors, test_y))\nprint(clf_dec.score(test_x_vectors, test_y))\nprint(clf_gnb.score(test_x_vectors.toarray(), test_y))\nprint(clf_log.score(test_x_vectors, test_y))\n","d9a7aa83":"# F1 Scores\nfrom sklearn.metrics import f1_score\n\nf1_score(test_y, clf_svm.predict(test_x_vectors), average=None, labels=[Sentiment.POSITIVE, Sentiment.NEGATIVE])\n#f1_score(test_y, clf_log.predict(test_x_vectors), average=None, labels=[Sentiment.POSITIVE, Sentiment.NEUTRAL, Sentiment.NEGATIVE])","1a1bd8ce":"test_set = ['very fun', \"bad book do not buy\", 'horrible waste of time']\nnew_test = vectorizer.transform(test_set)\n\nclf_svm.predict(new_test)","82af1dc9":"from sklearn.model_selection import GridSearchCV\n\nparameters = {'kernel': ('linear', 'rbf'), 'C': (1,4,8,16,32)}\n\nsvc = svm.SVC()\nclf = GridSearchCV(svc, parameters, cv=5)\nclf.fit(train_x_vectors, train_y)","c189468f":"print(clf.score(test_x_vectors, test_y))\n","acc15213":"import pickle5 as pickle\n\nwith open('\/Users\/danacassidy\/Code_projects\/SCIKIT PRACTICE\/sentiment_classifier.pkl', 'wb') as f:\n    pickle.dump(clf, f)","d5713f77":"with open('\/Users\/danacassidy\/Code_projects\/SCIKIT PRACTICE\/sentiment_classifier.pkl', 'rb') as f:\n    loaded_clf = pickle.load(f)","fa82abb9":"print(test_x[0])\n\nloaded_clf.predict(test_x_vectors[0])","6ca97742":"#### Decision Tree","6af9b941":"####  Save model","198d5c01":"#### Load model","efbbcffa":"#### Bag of words vectorization ","3153b6d3":"### Evaluation","1efa5a91":"# Machine Learning: Classification Model\n### I built a model that automatically classifies text as having either a negative or positive sentiment using amazon reviews as the training data.\n\nThe project idea comes from Keith Galli.\n\nData directory contains several files of 1000+ amazon reviews across different departments. The raw data can be found here: http:\/\/jmcauley.ucsd.edu\/data\/amazon\/","d4a64a87":"### Prep Data","489ab721":"## Classification","bcdb2113":"## Saving Model","32241681":"#### Linear SVM","aa92323e":"### Data Class","557e287a":"#### Naive Bayes","e98431a8":"### Tuning the model (with Grid Search)","5705b77c":"#### Logistic Regression","77587848":"### Load Data"}}