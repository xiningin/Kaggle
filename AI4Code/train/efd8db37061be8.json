{"cell_type":{"5e3dd783":"code","7becbb1e":"code","ad1fdc8f":"code","13409629":"code","0e231950":"code","f3a4766e":"code","104dcb0b":"code","ee47bad6":"code","96457d42":"code","2fe9188e":"code","972b2296":"code","686baf80":"code","da71292c":"code","31e29cf6":"code","5c80a705":"code","21ddcf5c":"code","839d3806":"code","28da62a8":"code","a1991e21":"code","f0145fe7":"code","54925f8e":"code","18a1d7da":"code","c749c912":"code","5c48f628":"code","68cdaaef":"code","5e03ecfe":"code","e14e344b":"code","50540753":"code","ecb173c6":"code","d3382acc":"code","7ae8e9b8":"code","9c23e393":"code","3a81405f":"code","703a5f70":"code","04f789f5":"code","8eda5aee":"code","19e20b11":"code","a7eb64db":"code","a6e60aad":"code","e2647fe4":"code","45ef8955":"code","c1267352":"code","8435bbf7":"code","03b185b6":"code","84312b21":"code","7dc5e046":"code","813e4dd3":"code","6c85fc84":"code","cba276a7":"code","13b6f07b":"code","de9ef8be":"code","fe957cbc":"code","27b49cbc":"code","3b7a53d1":"code","a2bf434f":"code","ccdd3e9b":"code","83d02a99":"code","d1f5d0ef":"code","b965e227":"code","e56af011":"code","2482536b":"code","388775d1":"code","38173b64":"markdown","5ab4e63a":"markdown","94cf9589":"markdown","120b81d1":"markdown","e2712d63":"markdown","407b95a3":"markdown","51228046":"markdown","385df886":"markdown"},"source":{"5e3dd783":"# Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport warnings \nwarnings.filterwarnings('ignore')","7becbb1e":"# Importing the dataset\ndataset = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","ad1fdc8f":"dataset.head()","13409629":"dataset.info()","0e231950":"# Checking for null values in the dataset\ndataset.isnull().values.any()","f3a4766e":"# Visualising the dataset\nplt.figure(figsize=(9,7))\nplt.style.use('seaborn-pastel')\nlabels=['female','male']\nsns.set_style(\"darkgrid\")\nax=sns.barplot(x='target',y='age',data=dataset,hue='sex')\nh, l = ax.get_legend_handles_labels()\nax.legend(h,labels,title=\"Gender\",loc='upper right')\nax.set_ylabel(\"Age\",fontdict={'fontsize' : 12})\nax.set_xlabel(\"Target variable: Angiographic disease status\",fontdict={'fontsize' : 12})\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate('{:.2f}'.format(height), (x+ 0.15, y + height + 2.4))\nplt.title('Mean age of patients grouped by gender',fontweight=\"bold\")\nplt.show()","104dcb0b":"# Defining the features and the outcome variable\nx= dataset.iloc[:,:-1].values\ny = dataset.iloc[:,-1].values","ee47bad6":"# Splitting the dataset into training set and test set\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)","96457d42":"## Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train[:,[0,3,4,7,9,11]] = sc.fit_transform(x_train[:,[0,3,4,7,9,11]])\nx_test[:,[0,3,4,7,9,11]] = sc.transform(x_test[:,[0,3,4,7,9,11]])","2fe9188e":"print(x_train[0])","972b2296":"print(x_test[0])","686baf80":"## Applying the Logistic regression model on the training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state=0)\nclassifier.fit(x_train,y_train)","da71292c":"## Predicting test results\ny_pred = classifier.predict(x_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))","31e29cf6":"# Visualising the test results vs predicted results\nbins = np.linspace(-1,2,10)\nplt.figure(figsize=(8,6))\nax =plt.hist([y_test,y_pred],bins=bins,color=['blue','lawngreen'],label=['Actual result','Predicted result'],align='left')\nplt.xlabel('Target variable: Angiographic disease status',fontdict={'fontsize' : 12})\nplt.ylabel('Test set sample size',fontdict={'fontsize' : 12})\nplt.xlim(-1,2)\nplt.xticks([0,1])\nplt.ylim(0,len(y_test))\nplt.legend(prop={'size': 12})\nplt.show()","5c80a705":"## Calculating the accuracy score and confusion matrix\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nac_LogReg = accuracy_score(y_test,y_pred)\ncm = confusion_matrix(y_test,y_pred)","21ddcf5c":"## Printing the accuracy score\nprint(ac_LogReg)","839d3806":"## Printing the confusion matrix\nprint(cm)","28da62a8":"## Applying the non-linear SVC model on the training set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel='rbf',random_state=0)\nclassifier.fit(x_train,y_train)","a1991e21":"## Predicting test results\ny_pred = classifier.predict(x_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))","f0145fe7":"# Visualising the test results vs predicted results\nbins = np.linspace(-1,2,10)\nplt.figure(figsize=(8,6))\nax =plt.hist([y_test,y_pred],bins=bins,color=['blue','lawngreen'],label=['Actual result','Predicted result'],align='left')\nplt.xlabel('Target variable: Angiographic disease status',fontdict={'fontsize' : 12})\nplt.ylabel('Test set sample size',fontdict={'fontsize' : 12})\nplt.xlim(-1,2)\nplt.xticks([0,1])\nplt.ylim(0,len(y_test))\nplt.legend(prop={'size': 12})\nplt.show()","54925f8e":"## Calculating the accuracy score and confusion matrix\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nac_SVC = accuracy_score(y_test,y_pred)\ncm = confusion_matrix(y_test,y_pred)","18a1d7da":"## Printing the accuracy score\nprint(ac_SVC)","c749c912":"## Printing the confusion matrix\nprint(cm)","5c48f628":"## Applying the Linear SVC model on the training set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel='linear',random_state=0)\nclassifier.fit(x_train,y_train)","68cdaaef":"## Predicting test results\ny_pred = classifier.predict(x_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))","5e03ecfe":"# Visualising the test results vs predicted results\nbins = np.linspace(-1,2,10)\nplt.figure(figsize=(8,6))\nax =plt.hist([y_test,y_pred],bins=bins,color=['blue','lawngreen'],label=['Actual result','Predicted result'],align='left')\nplt.xlabel('Target variable: Angiographic disease status',fontdict={'fontsize' : 12})\nplt.ylabel('Test set sample size',fontdict={'fontsize' : 12})\nplt.xlim(-1,2)\nplt.xticks([0,1])\nplt.ylim(0,len(y_test))\nplt.legend(prop={'size': 12})\nplt.show()","e14e344b":"## Calculating the accuracy score and confusion matrix\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nac_LinearSVC = accuracy_score(y_test,y_pred)\ncm = confusion_matrix(y_test,y_pred)","50540753":"## Printing accuracy score\nprint(ac_LinearSVC)","ecb173c6":"#Printing confusion matrix\nprint(cm)","d3382acc":"## Applying the K-NN classification model on the training set\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier()\nclassifier.fit(x_train,y_train)","7ae8e9b8":"## Predicting test results\ny_pred = classifier.predict(x_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))","9c23e393":"# Visualising the test results vs predicted results\nbins = np.linspace(-1,2,10)\nplt.figure(figsize=(8,6))\nax =plt.hist([y_test,y_pred],bins=bins,color=['blue','lawngreen'],label=['Actual result','Predicted result'],align='left')\nplt.xlabel('Target variable: Angiographic disease status',fontdict={'fontsize' : 12})\nplt.ylabel('Test set sample size',fontdict={'fontsize' : 12})\nplt.xlim(-1,2)\nplt.xticks([0,1])\nplt.ylim(0,len(y_test))\nplt.legend(prop={'size': 12})\nplt.show()","3a81405f":"## Calculating the accuracy score and confusion matrix\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nac_KNN = accuracy_score(y_test,y_pred)\ncm = confusion_matrix(y_test,y_pred)","703a5f70":"# Printing accuarcy score\nprint(ac_KNN)","04f789f5":"# Printing confusion matrix\nprint(cm)","8eda5aee":"## Applying the Naive Bayes classification model on the training set\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(x_train,y_train)","19e20b11":"## Predicting test results\ny_pred = classifier.predict(x_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))","a7eb64db":"# Visualising the test results vs predicted results\nbins = np.linspace(-1,2,10)\nplt.figure(figsize=(8,6))\nax =plt.hist([y_test,y_pred],bins=bins,color=['blue','lawngreen'],label=['Actual result','Predicted result'],align='left')\nplt.xlabel('Target variable: Angiographic disease status',fontdict={'fontsize' : 12})\nplt.ylabel('Test set sample size',fontdict={'fontsize' : 12})\nplt.xlim(-1,2)\nplt.xticks([0,1])\nplt.ylim(0,len(y_test))\nplt.legend(prop={'size': 12})\nplt.show()","a6e60aad":"## Calculating the accuracy score and confusion matrix\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nac_NBayes = accuracy_score(y_test,y_pred)\ncm = confusion_matrix(y_test,y_pred)","e2647fe4":"# Printing accuracy score\nprint(ac_NBayes)","45ef8955":"# Printing confusion matrix\nprint(cm)","c1267352":"## Applying the Decision Tree Classification model on the training set\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion='entropy',random_state=0)\nclassifier.fit(x_train,y_train)","8435bbf7":"## Predicting test results\ny_pred = classifier.predict(x_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))","03b185b6":"# Visualising the test results vs predicted results\nbins = np.linspace(-1,2,10)\nplt.figure(figsize=(8,6))\nax =plt.hist([y_test,y_pred],bins=bins,color=['blue','lawngreen'],label=['Actual result','Predicted result'],align='left')\nplt.xlabel('Target variable: Angiographic disease status',fontdict={'fontsize' : 12})\nplt.ylabel('Test set sample size',fontdict={'fontsize' : 12})\nplt.xlim(-1,2)\nplt.xticks([0,1])\nplt.ylim(0,len(y_test))\nplt.legend(prop={'size': 12})\nplt.show()","84312b21":"## Calculating the accuracy score and confusion matrix\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nac_DecisionTree = accuracy_score(y_test,y_pred)\ncm = confusion_matrix(y_test,y_pred)","7dc5e046":"## Printing accuracy score\nprint(ac_DecisionTree)","813e4dd3":"## Printing confusion matrix\nprint(cm)","6c85fc84":"## Applying the Random Forest Classification model on the training set\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators=200,criterion='entropy',random_state=0)\nclassifier.fit(x_train,y_train)","cba276a7":"## Predicting test results\ny_pred = classifier.predict(x_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))","13b6f07b":"# Visualising the test results vs predicted results\nbins = np.linspace(-1,2,10)\nplt.figure(figsize=(8,6))\narr =plt.hist(x=[y_test,y_pred],bins=bins,color=['blue','lawngreen'],label=['Actual result','Predicted result'],align='left')\nplt.xlabel('Target variable: Angiographic disease status',fontdict={'fontsize' : 12})\nplt.ylabel('Test set sample size',fontdict={'fontsize' : 12})\nplt.xlim(-1,2)\nplt.xticks([0,1])\nplt.ylim(0,len(y_test))\nplt.legend(prop={'size': 12})\nplt.show()","de9ef8be":"## Calculating the accuracy score and confusion matrix\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nac_randomForest = accuracy_score(y_test,y_pred)\ncm = confusion_matrix(y_test,y_pred)","fe957cbc":"## Printing accuarcy score\nprint(ac_randomForest)","27b49cbc":"## Printing confusion matrix\nprint(cm)","3b7a53d1":"## Applying the XGBoost Classification model on the training set\nfrom xgboost import XGBClassifier\nclassifier = XGBClassifier()\nclassifier.fit(x_train,y_train)","a2bf434f":"## Predicting test results\ny_pred = classifier.predict(x_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))","ccdd3e9b":"# Visualising the test results vs predicted results\nbins = np.linspace(-1,2,10)\nplt.figure(figsize=(8,6))\narr =plt.hist(x=[y_test,y_pred],bins=bins,color=['blue','lawngreen'],label=['Actual result','Predicted result'],align='left')\nplt.xlabel('Target variable: Angiographic disease status',fontdict={'fontsize' : 12})\nplt.ylabel('Test set sample size',fontdict={'fontsize' : 12})\nplt.xlim(-1,2)\nplt.xticks([0,1])\nplt.ylim(0,len(y_test))\nplt.legend(prop={'size': 12})\nplt.show()","83d02a99":"## Calculating the accuracy score and confusion matrix\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nac_xgb = accuracy_score(y_test,y_pred)\ncm = confusion_matrix(y_test,y_pred)","d1f5d0ef":"## Printing accuarcy score\nprint(ac_xgb)","b965e227":"## Printing confusion matrix\nprint(cm)","e56af011":"#Comparing results of the models based on accuracy score\nmodelList = [ac_LogReg,ac_SVC,ac_LinearSVC,ac_KNN,ac_NBayes,ac_DecisionTree,ac_randomForest,ac_xgb]","2482536b":"for i in range(0,len(modelList)):\n    modelList[i] = modelList[i]*100\nprint(modelList)","388775d1":"labelList = ['Logistic Regression','Kernel SVC','Linear SVC','K-NN','Naive Bayes','Decision Tree','Random Forest',\n            'XGBoost']\nplt.figure(figsize=(12,7))\nsns.set_style('dark')\nax = sns.barplot(x=labelList,y=modelList,palette=sns.cubehelix_palette(8))\nplt.ylim(0,100)\nplt.title('Accuracy score comparison among different classification models')\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate('{:.2f}%'.format(height), (x+0.25, y + height + 0.8))\nplt.show()","38173b64":"---","5ab4e63a":"---","94cf9589":"---","120b81d1":"---","e2712d63":"---","407b95a3":"****","51228046":"---","385df886":"---"}}