{"cell_type":{"0e9040de":"code","b69133f6":"code","cc6d4949":"code","a28ef200":"code","53b8d2d1":"code","d377f060":"code","f8d03b0a":"code","c3e60fca":"code","5bf43a85":"code","8cfa6f32":"code","07941d5d":"code","c510cb92":"code","bd6514a7":"code","a596ef72":"code","faf6e53a":"code","7cdfadea":"code","0eb2d33d":"code","9d9056aa":"code","6a11f9da":"code","39f275cd":"code","2e8f181b":"code","87f25f5a":"code","354d2e56":"code","b452824a":"code","e9142da7":"code","99cc4370":"code","4ebdeec4":"code","1db7ea96":"code","766bf048":"code","201eaea8":"code","c54ef37a":"code","de223d63":"code","7b6c4fb2":"code","e23e45a5":"code","0ba34fd3":"code","8e1135fe":"code","1fb9b144":"code","59d39784":"code","07ba22a0":"code","bd62934b":"code","87ee7132":"code","d9cd049a":"code","a7d798fc":"code","a90a6abb":"code","9c08055f":"code","03a883bb":"code","f89589de":"code","6c75d4fa":"code","debb2c3e":"code","ac947316":"code","ab2fb6ba":"code","585473f8":"code","87912588":"code","68494417":"code","7128038f":"code","91917675":"code","701b5dcf":"code","e03406ab":"code","bb043d3b":"code","981a18d0":"code","b6032040":"code","86590408":"code","e662c006":"code","22f3a2e5":"code","a453d8ad":"markdown","8ff8f54e":"markdown","1d5a5b5b":"markdown","30a7fbef":"markdown","6d8ad90c":"markdown","1a29bc40":"markdown","41f0448a":"markdown","6f284602":"markdown","e86bb7fc":"markdown","91d9fc90":"markdown","d2921043":"markdown","52977b71":"markdown","9b945753":"markdown","dd213806":"markdown","ace6ec01":"markdown","c18ddd48":"markdown","25315ea7":"markdown","ebaa4749":"markdown","aeaa43ef":"markdown","8d7ca746":"markdown","e5e4e13f":"markdown","7d8f0a01":"markdown","196f6ab1":"markdown","bdeb682a":"markdown","571333f9":"markdown","6390b925":"markdown","74c31445":"markdown","bf60621d":"markdown","0d37c22b":"markdown","077407b5":"markdown","a100bc45":"markdown","37e88c34":"markdown","67bb271d":"markdown","3892b493":"markdown","aa06528a":"markdown","b672c790":"markdown","69102a21":"markdown","3ab378de":"markdown","bd4df395":"markdown","08be4930":"markdown","c774aeea":"markdown","0bfe3574":"markdown","56676cae":"markdown","e5f2e1b1":"markdown","42c3a55e":"markdown","477181a3":"markdown","43b7cba4":"markdown","a4b23dbe":"markdown","56bf3efe":"markdown","b9242dcc":"markdown","c330867a":"markdown","e83484a1":"markdown","aabcc8c3":"markdown"},"source":{"0e9040de":"#Numpy\/Pandas\nimport numpy as np\nimport pandas as pd\n\n# plotly\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)\nimport plotly.offline as off\n\n#For HTML Rendering\nfrom IPython.core.display import display, HTML\n\n#matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\n#folium for Map\nimport folium\nfrom folium import plugins\n\n\n# word cloud\nfrom wordcloud import WordCloud\n\n%matplotlib inline","b69133f6":"#Setting Matplotlib Params\nplt.rcParams[\"font.size\"] = 12\nplt.rcParams[\"font.weight\"] = 'bold'\nplt.rcParams[\"figure.figsize\"] = (15,10)\n\n#Setting Seaborn Style\nsns.set_style(\"whitegrid\")","cc6d4949":"df = pd.read_csv('..\/input\/Attacks on Political Leaders in Pakistan.csv', encoding='latin1')","a28ef200":"#Fixing misspelled column name\nlat_col = df.columns.values\nlat_col[11] = 'Longitude'\ndf.columns = lat_col\ndf.columns","53b8d2d1":"df.head()","d377f060":"df.info()","f8d03b0a":"#Dropping Irrelevant columns\ndf.drop('S#', axis=1, inplace=True)","c3e60fca":"#Replace NULL values in Location Category with UNKNOWN\ndf['Location Category'].fillna('UNKNOWN', inplace=True)\n\n#Giving same values but with different text, the same text\ndf.loc[df['Location Category'] == 'Details Missing', 'Location Category'] = 'UNKNOWN'\ndf.loc[df['Province'] == 'Fata', 'Province'] = 'FATA'\ndf.loc[df['City'] == 'ATTOCK', 'City'] = 'Attock'","5bf43a85":"#Convert Categorical variables to Category type\ncolumns = ['Target Status', 'Day', 'Day Type', 'Time', 'City', 'Location Category',\n          'Province', 'Target Category', 'Space (Open\/Closed)', 'Party']\ndf[columns] = df[columns].astype('category')","8cfa6f32":"#Get Month and Year of Attack\ndf['month'] = pd.DatetimeIndex(df['Date']).month\ndf['year'] = pd.DatetimeIndex(df['Date']).year\n\n#correct wrong interpretation of data\ndf['year']=df['year'].replace(2051, 1951)\ndf['year']=df['year'].replace(2058, 1958)","07941d5d":"df.describe()","c510cb92":"print(df['Target Category'].value_counts())\nprint(df['Target Status'].value_counts())\nprint(df['Space (Open\/Closed)'].value_counts())","bd6514a7":"df['marker_popup'] = ''\nfor index, row in df.iterrows():\n    df.loc[index, 'marker_popup'] = df.loc[index,'City'].strip() + '(' + str(df.loc[index,'Date']) + '  |  <b>Killed<\/b>: ' + str(df.loc[index,'Killed']) + '  |  Injured: ' + str(df.loc[index,'Injured'])  + ')'","a596ef72":"df['Target Attack'] = (df['Target Category'] == 'Target').astype(int)\ndf['Suicide Attack'] = (df['Target Category'] != 'Target').astype(int)\ndf['Open Space'] = (df['Space (Open\/Closed)'] == 'Open').astype(int)\ndf['Closed Space'] = (df['Space (Open\/Closed)'] != 'Open').astype(int)\ndf['Politician Killed'] = (df['Target Status'] == 'Killed').astype(int)\ndf['Politician Escaped'] = (df['Target Status'] != 'Killed').astype(int)","faf6e53a":"month_lookup = {1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May',\n            6: 'Jun', 7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'}\n\ndf['month'] = df['month'].apply(lambda x: month_lookup[x])","7cdfadea":"pk_map = folium.Map(location=[30.3753, 69.3451],\n                   zoom_start=5)\n# mark each station as a point\nfor index, row in df.iterrows():\n    folium.Marker([df.loc[index,'Latitude'], df.loc[index,'Longitude']],\n                  icon=folium.Icon(color= 'red' if df.loc[index, 'Target Status'] == 'Killed' else 'green'),\n                  popup=df.loc[index,'marker_popup']).add_to(pk_map)\npk_map","0eb2d33d":"sns.countplot(y='Day', data = df)","9d9056aa":"sns.countplot(y='Time', data = df)","6a11f9da":"sns.countplot(y='City', data = df)","39f275cd":"sns.countplot(x='Province', data = df)","2e8f181b":"sns.countplot(y='Location Category', data = df)","87f25f5a":"sns.countplot(y='Party', data = df)","354d2e56":"def draw_barchart(dataframe, x_col, y_cols, chart_title='', x_title='', y_title='', agg_func = 'sum', tick_angle=0):\n    \n    if dataframe is None:\n        raise ValueError('dataframe is not Provided')\n    if not isinstance(dataframe, pd.DataFrame):\n        raise ValueError('dataframe should be of type Pandas Dataframe')\n    if type(x_col) is not str:\n        raise ValueError('x_col should be of string type')\n    if not isinstance(y_cols,(list,)):\n        raise ValueError('x_col should be passed as a list')\n    \n    Province = dataframe[x_col]\n    data = []\n\n    for i in range(len(y_cols)):\n        data.append(\n            dict(\n            type = 'bar',\n            x = Province,\n            y = dataframe[y_cols[i]],\n            name = y_cols[i],\n            transforms = [\n                dict(\n                    type = 'aggregate',\n                    groups = Province,\n                    aggregations = [dict(\n                        target = 'y', func = agg_func, enabled = True)]\n                )\n            ]\n            )\n        )\n\n\n    if tick_angle > 0:\n        layout = dict(\n            title = '<b>' + chart_title + '<\/b>',\n            xaxis = dict(title = x_col if len(x_title) == 0 else x_title, tickangle=tick_angle),\n            yaxis = dict(title = y_title),\n            barmode = 'relative'\n        )\n    else:\n        layout = dict(\n            title = '<b>' + chart_title + '<\/b>',\n            xaxis = dict(title = x_col if len(x_title) == 0 else x_title),\n            yaxis = dict(title = y_title),\n            barmode = 'relative'\n    )\n\n    off.iplot({\n        'data': data,\n        'layout': layout\n    }, validate = False)","b452824a":"def draw_bubblechart(dataframe, x_col, y_cols):\n    \n    if dataframe is None:\n        raise ValueError('dataframe is not Provided')\n    if not isinstance(dataframe, pd.DataFrame):\n        raise ValueError('dataframe should be of type Pandas Dataframe')\n    if type(x_col) is not str:\n        raise ValueError('x_col should be of string datatype')\n    if not isinstance(y_cols,(list,)):\n        raise ValueError('x_col should be passed as a list')\n    \n    ycol_size = len(y_cols)\n    data = []\n    updatemenu_list = []\n    \n    for i in range(ycol_size):\n        visible = [True if j == i else False for j in range(ycol_size)]\n        data.append(\n            dict(\n                type = 'scatter',\n                mode = 'markers',\n                x = dataframe[x_col],\n                y = dataframe[y_cols[i]],\n                text = dataframe[y_cols[i]],\n                hoverinfo = 'text',\n                name = y_cols[i],\n                opacity = 0.8,\n                marker = dict(\n                    size = dataframe[y_cols[i]],\n                    sizemode = 'area'\n                ),\n                transforms = [\n                    dict(\n                        type = 'aggregate',\n                        groups = dataframe[x_col],\n                        aggregations = [dict(\n                            target = 'y', func = 'sum', enabled = True)]\n                    )\n                ]\n            ))\n        updatemenu_list.append(\n            dict(label = y_cols[i],\n                method = 'update',\n                args = [{\n                        'visible': visible\n                    },\n                    {\n                        'title': y_cols[i] + ' Per Year',\n                        'yaxis.title': y_cols[i]\n                    }\n                ])\n        )\n\n    layout = dict(\n        title = '<b>Casualty Rate Per Year<\/b>',\n        xaxis = dict(\n            title = x_col,\n            showgrid = False\n        ),\n        yaxis = dict(\n            type = 'exp'\n        ),\n        updatemenus = list([\n            dict(\n                active = -1,\n                buttons = updatemenu_list,\n                direction = 'down',\n                pad = {'r': 10, 't': 10},\n                showactive = True,\n                x = 0.05,\n                xanchor = 'left',\n                y = 1.1,\n                yanchor = 'top'\n            )\n        ])\n    )\n\n    off.iplot({\n        'data': data,\n        'layout': layout\n    }, validate = False)","e9142da7":"draw_barchart(df, 'Province', ['Killed', 'Injured'], 'Total Casualty Rate By Province','Province', 'Casualty Rate')","99cc4370":"draw_barchart(df, 'Province', ['Politician Killed', 'Politician Escaped'], 'Politician Casualty Rate By Province','Province', 'Politician Casualty Rate')","4ebdeec4":"draw_barchart(df, 'Province', ['Target Attack', 'Suicide Attack'], 'Suicide Attack vs Target Attack By Province','Province', 'Attack Type')","1db7ea96":"draw_barchart(df, 'Province', ['Open Space', 'Closed Space'], 'Open\/Closed Space Attacks By Province','Province', 'Open\/Closed Space')","766bf048":"#Group By Province and Day\ndf_province_day = df.groupby(['Province', 'Day'])['Politician Killed', 'Politician Escaped', 'Killed', 'Injured'].sum()\n#Reset Index\ndf_province_day.reset_index(level=[0, 1], inplace=True)\n#Join and Clean Columns\ndf_province_day['ProvinceByDay'] = df_province_day['Day'].str.cat(df_province_day['Province'],sep='-' )\ndf_province_day[['Politician Killed', 'Politician Escaped', 'Killed', 'Injured']] = df_province_day[['Politician Killed', 'Politician Escaped', 'Killed', 'Injured']].fillna(0)","201eaea8":"draw_barchart(df_province_day, 'ProvinceByDay', ['Killed', 'Injured'], 'Total Casualty Rate By Province','Province', 'Casualty Rate', tick_angle=45)","c54ef37a":"draw_barchart(df_province_day, 'ProvinceByDay', ['Politician Killed', 'Politician Escaped'], 'Politician Casualty Rate By Province','Province', 'Casualty Rate', tick_angle=45)","de223d63":"#Group By Province and Time\ndf_province_time = df.groupby(['Province', 'Time'])['Politician Killed', 'Politician Escaped', 'Killed', 'Injured'].sum()\n#Reset Index\ndf_province_time.reset_index(level=[0, 1], inplace=True)\n#Join and Clean Columns\ndf_province_time['ProvinceByTime'] = df_province_time['Time'].str.cat(df_province_time['Province'],sep='-' )\ndf_province_time[['Politician Killed', 'Politician Escaped', 'Killed', 'Injured']] = df_province_time[['Politician Killed', 'Politician Escaped', 'Killed', 'Injured']].fillna(0)","7b6c4fb2":"draw_barchart(df_province_time, 'ProvinceByTime', ['Killed', 'Injured'], 'Total Casualty Rate By Province','Province', 'Casualty Rate', tick_angle=45)","e23e45a5":"draw_barchart(df_province_time, 'ProvinceByTime', ['Politician Killed', 'Politician Escaped'], 'Politician Casualty Rate By Province','Province', 'Casualty Rate', tick_angle=45)","0ba34fd3":"draw_barchart(df, 'City', ['Killed', 'Injured'], 'Total Casualty By City ','City', 'Total Casualty', tick_angle=90)","8e1135fe":"draw_barchart(df, 'City',  ['Politician Killed', 'Politician Escaped'], 'Politician Casualty By City ','City', 'Politician Casualty', tick_angle=90)","1fb9b144":"draw_barchart(df, 'City', ['Target Attack', 'Suicide Attack'], 'Suicide Attack vs Target Attack By City','City', 'Attack Type')","59d39784":"draw_barchart(df, 'City', ['Open Space', 'Closed Space'], 'Open\/Closed Space Attacks By City','City', 'Open\/Closed Space')","07ba22a0":"#Group By City and Time\ndf_city_time = df.groupby(['City', 'Time'])['Politician Killed', 'Politician Escaped', 'Killed', 'Injured'].sum()\n#Reset Index\ndf_city_time.reset_index(level=[0, 1], inplace=True)\n#Join and Clean Columns\ndf_city_time['CityByTime'] = df_city_time['Time'].str.cat(df_city_time['City'],sep='-' )\ndf_city_time[['Politician Killed', 'Politician Escaped', 'Killed', 'Injured']] = df_city_time[['Politician Killed', 'Politician Escaped', 'Killed', 'Injured']].fillna(0)","bd62934b":"draw_barchart(df_city_time, 'CityByTime', ['Killed', 'Injured'], 'Total Casualty Rate By City and Time','City', 'Casualty Rate', tick_angle=45)","87ee7132":"draw_barchart(df_city_time, 'CityByTime', ['Politician Killed', 'Politician Escaped'], 'Politician Casualty Rate By City and Time','City', 'Casualty Rate', tick_angle=45)","d9cd049a":"#Group By City and Day\ndf_city_day = df.groupby(['City', 'Day'])['Politician Killed', 'Politician Escaped', 'Killed', 'Injured'].sum()\n#Reset Index\ndf_city_day.reset_index(level=[0, 1], inplace=True)\n#Join and Clean Columns\ndf_city_day['CityByDay'] = df_city_day['Day'].str.cat(df_city_day['City'],sep='-' )\ndf_city_day[['Politician Killed', 'Politician Escaped', 'Killed', 'Injured']] = df_city_day[['Politician Killed', 'Politician Escaped', 'Killed', 'Injured']].fillna(0)","a7d798fc":"draw_barchart(df_city_day, 'CityByDay', ['Killed', 'Injured'], 'Total Casualty Rate By City and Day','City', 'Casualty Rate', tick_angle=45)","a90a6abb":"draw_barchart(df_city_day, 'CityByDay', ['Politician Killed', 'Politician Escaped'], 'Politician Casualty Rate By City and Day','City', 'Casualty Rate', tick_angle=45)","9c08055f":"draw_barchart(df, 'Day', ['Target Attack', 'Suicide Attack'], 'Attack Type By Days','Day', 'Attack Type')","03a883bb":"draw_barchart(df, 'Time', ['Target Attack', 'Suicide Attack'], 'Attack Type By Time of Day','Time of Day', 'Attack Type')","f89589de":"draw_barchart(df, 'Location Category', ['Target Attack', 'Suicide Attack'], 'Attack Type By Time of Day','Time of Day', 'Attack Type')","6c75d4fa":"draw_barchart(df, 'Day', ['Politician Killed', 'Politician Escaped'], 'Politician Casualty By Day','Day', 'Politician Casualty')","debb2c3e":"draw_barchart(df, 'Location Category', ['Killed', 'Injured'], 'Total Casualty By Location ','Location', 'Total Casualty')","ac947316":"draw_barchart(df, 'Location Category', ['Politician Killed', 'Politician Escaped'], 'Politician Casualty By Location ','Location', 'Politician Casualty')","ab2fb6ba":"#Group By Location and Time\ndf_loc_time = df.groupby(['Location Category', 'Time'])['Politician Killed', 'Politician Escaped', 'Killed', 'Injured'].sum()\n#Reset Index\ndf_loc_time.reset_index(level=[0, 1], inplace=True)\n#Join and Clean Columns\ndf_loc_time['LocationByTime'] = df_loc_time['Time'].str.cat(df_loc_time['Location Category'],sep='-' )\ndf_loc_time[['Politician Killed', 'Politician Escaped', 'Killed', 'Injured']] = df_loc_time[['Politician Killed', 'Politician Escaped', 'Killed', 'Injured']].fillna(0)","585473f8":"draw_barchart(df_loc_time, 'LocationByTime', ['Killed', 'Injured'], 'Total Casualty Rate By Location Category and Time','Location Category', 'Casualty Rate', tick_angle=45)","87912588":"draw_barchart(df_loc_time, 'LocationByTime', ['Politician Killed', 'Politician Escaped'], 'Politician Casualty Rate By Location Category and Time','Location Category', 'Casualty Rate', tick_angle=45)","68494417":"#Group By Location and Time\ndf_loc_day = df.groupby(['Location Category', 'Day'])['Politician Killed', 'Politician Escaped', 'Killed', 'Injured'].sum()\n#Reset Index\ndf_loc_day.reset_index(level=[0, 1], inplace=True)\n#Join and Clean Columns\ndf_loc_day['LocationByDay'] = df_loc_day['Day'].str.cat(df_loc_day['Location Category'],sep='-' )\ndf_loc_day[['Politician Killed', 'Politician Escaped', 'Killed', 'Injured']] = df_loc_day[['Politician Killed', 'Politician Escaped', 'Killed', 'Injured']].fillna(0)","7128038f":"draw_barchart(df_loc_day, 'LocationByDay', ['Killed', 'Injured'], 'Total Casualty Rate By Location Category and Day','Location Category', 'Casualty Rate', tick_angle=45)","91917675":"draw_barchart(df_loc_day, 'LocationByDay', ['Politician Killed', 'Politician Escaped'], 'Politician Casualty Rate By Location Category and Day','Location Category', 'Casualty Rate', tick_angle=45)","701b5dcf":"draw_barchart(df, 'Target Category', ['Killed', 'Injured'], 'Total Casualty By Attack Type','Attack Type', 'Total Casualty')","e03406ab":"draw_barchart(df, 'Target Category', ['Politician Killed', 'Politician Escaped'], 'Politician Casualty By Attack Type','Attack Type', 'Politician Casualty')","bb043d3b":"draw_barchart(df, 'Party', ['Killed', 'Injured'], 'Total Casualty By Party ','Party', 'Total Casualty')","981a18d0":"draw_barchart(df, 'Party', ['Politician Killed', 'Politician Escaped'], 'Politician Casualty By Party ','Party', 'Politician Casualty')","b6032040":"draw_barchart(df, 'Party', ['Target Attack', 'Suicide Attack'], 'Attack Type By Party ','Party', 'Attack Type')","86590408":"#Group By Year\ndf_year = df.groupby('year')['Injured', 'Killed'].sum()\ndf_year.reset_index(level=0, inplace=True)","e662c006":"draw_bubblechart(df_year, 'year', ['Killed', 'Injured'])","22f3a2e5":"wordcloud = WordCloud(background_color='white').generate(\" \".join(df['Location']))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","a453d8ad":"**Let's see which Province has more Politician Casualty Rate**","8ff8f54e":"<a id=\"a5\"><\/a> <br>\n**Which Days are Suicide and Target Attacks more likely to happen?**","1d5a5b5b":"<a id=\"a7\"><\/a> <br>\n**Does Attack Type show any relation with Politician Casualty?**","30a7fbef":"<a id=\"9\"><\/a> <br>\n### Analysis on Party","6d8ad90c":"\n* [**Most Political attacks were done on road or in their residence**](#a1)\n\n\n* [**Low attack frequency was observed on Sunday**](#2)\n\n\n* [**KPK faced most attacks along with highest politician killed but most civilian casualty was observed in Sindh Province**](#a2)\n\n\n* [**After Karachi, most civilian casualty was observed in Quetta whereas Quetta and Peshawar had same number of Politicians Killed after Karachi**](#a3)\n\n\n* [**Even though Karachi had most civilian casualty but most suicide attacks were done in Peshawar whereas Karachi only had a single suicide attack**](#a4)\n\n\n* [**Attacks on Thursday were mostly suicide attacks with only single attack out of 7 attacks being a targeted attack**](#a5)\n\n\n* [**Most attacks were done on afternoon and evening but 16\/23 attacks in evening were suicide attacks whereas 5\/9 attacks in afternoon were suicide attacks**](#a6)\n\n\n* [**In a targeted attack, only 3 politicians out of 24 escaped whereas suicide attack 17 politicians out of 27 managed to escape**](#a7)\n\n\n* [**All attacks on ANP party were suicide attacks whereas PTI politicians only faced targeted attacks. Additionally, PPPP and PMLN were mostly victims of suicide attacks**](#a7)\n\n","1a29bc40":"<a id=\"4\"><\/a> <br>\n### Analysis on Province","41f0448a":"<a id=\"a4\"><\/a> <br>\n**What kind of Attack has more tendency to occur in each City?**","6f284602":"**What kind of Attack has more tendency to occur in each Province?**","e86bb7fc":"**We could already see attack rate on Province from Map but let's still check it out**","91d9fc90":"<a id=\"7\"><\/a> <br>\n### Analysis on Location Category","d2921043":"**Does place of attack affect Politician Casualty?**","52977b71":"<a id=\"1\"><\/a> <br>\n### Attack Locations on Map\n\n***\"Red\"* markers show locations where politicians got killed and *\"Green\"* markers show locations where politicians escaped the attack. Click on markers for attack details**","9b945753":"**Has Day got anything to do with Casualty?**","dd213806":"**Now Let's look at Location Feature and try to see if there exists some pattern in it**","ace6ec01":"<a id=\"8\"><\/a> <br>\n### Analysis on Attack Type","c18ddd48":"<a id=\"a6\"><\/a> <br>\n**How about Time of the Day?**","25315ea7":"**Does day and location has any relation with total casualty?**","ebaa4749":"<a id=\"11\"><\/a> <br>\n### Location Word Cloud","aeaa43ef":"**Does place of attack affect Total Casualty?**","8d7ca746":"<a id=\"a3\"><\/a> <br>\n**Did City had any affect on Total Casualty?**","e5e4e13f":"# INTRODUCTION\n\nThis is an EDA performed on a dataset named [Sacred Games](https:\/\/www.kaggle.com\/zusmani\/sacred-games) about *political attacks* in Pakistan from year **1947**-**2018**. I have tried to analyze civilian and politician's casualty rate based on different factors.\n\n**Warning: Plotly graphs may take some time to render**\n\n<br>Content:\n\n1. [Attack Locations on Map](#1)\n1. [Attack Rate w.r.t Other Factors](#2)\n1. [Customized Functions](#3)\n1. [Analysis on Province](#4)\n1. [Analysis on City](#5)\n1. [Analysis on Day and Time](#6)\n1. [Analysis on Location](#7)\n1. [Analysis on Attack Type](#8)\n1. [Analysis on Party](#9)\n1. [Trend Over The Years](#10)\n1. [Location Word Cloud](#11)\n1. [Observations](#12)","7d8f0a01":"**Grouping Casualty Data by Year**","196f6ab1":"<a id=\"3\"><\/a> <br>\n### Customized Functions\n\n**DRAW BAR CHART FUNCTION**","bdeb682a":"<a id=\"12\"><\/a> <br>\n### Observations","571333f9":"**Does more Attacks happened in Open or Closed Space in each City?**","6390b925":"**What time of day has more casualty rate in each Province?**","74c31445":"<a id=\"10\"><\/a> <br>\n### Trend Over The Years","bf60621d":"**How about City having any affect on Politician Casualty?**","0d37c22b":"**Which day has more casualty rate in each City?**","077407b5":"## EDA","a100bc45":"**Does day and location has any relation with political casualty?**","37e88c34":"**Does more Attacks happened in Open or Closed Space?**","67bb271d":"**DRAW BUBBLE CHART FUNCTION**","3892b493":"**At What time does most Attacks happen?**","aa06528a":"<a id=\"5\"><\/a> <br>\n### Analysis on City","b672c790":"**How about City? Which City suffered most attack?**","69102a21":"## Importing Packages","3ab378de":"**Does time and location has any relation with politician casualty?**","bd4df395":"**How's the politician's casualty rate for each party?**","08be4930":"**Does time and location has any relation with total casualty?**","c774aeea":"## Data Cleaning","0bfe3574":"## Loading Data","56676cae":"**What's the Total Casualty in both Attack Types?**","e5f2e1b1":"**How's the total casualty rate for attack on each party?**","42c3a55e":"<a id=\"6\"><\/a> <br>\n### Analysis on Day and Time","477181a3":"<a id=\"a1\"><\/a> <br>","43b7cba4":"**What time of day has more casualty rate in each City?**","a4b23dbe":"## Feature Engineering","56bf3efe":"**What day has more casualty rate in each Province?**","b9242dcc":"<a id=\"2\"><\/a> <br>\n### Attack Rate w.r.t Other Factors\n**Let's check out on which day does most attacks happen?**","c330867a":"<a id=\"a2\"><\/a> <br>\n**Let's first check out Total Casualty Rate in each Province**","e83484a1":"<a id=\"a8\"><\/a> <br>\n**Which kind of attack each party faced?**","aabcc8c3":"**At what time of day does more Politician's casualty happen in each Province?**"}}