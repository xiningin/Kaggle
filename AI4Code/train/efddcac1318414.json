{"cell_type":{"43d2ab12":"code","a256a159":"code","0b7a2f91":"code","78495e29":"code","3b670517":"code","2e85f04b":"code","62b9d5b3":"code","9b42262c":"code","7ba12bbd":"code","f80e691e":"code","7460f8b7":"code","3045c668":"code","616f7fdc":"code","eb501c18":"code","89a6d82e":"code","429fe50e":"code","aeccdde3":"code","9cabfa92":"code","1b8a6dd1":"code","d79f9496":"code","ae93ef72":"code","ac7b3dd5":"code","84621c24":"code","0513ab95":"code","7f66c263":"code","87d4bb5c":"code","78bee0e1":"code","8006da9b":"code","ca5e8419":"code","62262683":"code","39ae559d":"code","5e5b74dd":"code","8952b9d8":"code","85d90315":"code","d4d64a39":"code","8d02f753":"code","47f20dff":"code","3f00b74b":"code","ce8955e6":"code","ecfccbbf":"code","a8b15a0d":"code","40421f58":"code","f67266d1":"code","2a1687b1":"code","c9bd8af3":"code","cc04d487":"code","7d7fbd24":"code","5e18ab50":"code","abba32d2":"code","b52bb3a6":"code","24829b8d":"code","f0b8fa21":"code","b8b43a70":"code","f813f97c":"code","68d00f69":"code","f8f2bab5":"code","d4d141a2":"code","cea15c21":"code","99b50078":"code","25b74a22":"code","2baab7e9":"code","1f62d22a":"code","a39619c6":"code","9c5fdf28":"code","a7ebca23":"code","65cd5a64":"code","9b56ab1c":"code","c72ac91f":"code","ba99532a":"code","3c6b6c85":"code","0ea50637":"code","57d874c0":"code","ac394d32":"code","061ee6c6":"code","55c08e48":"code","44fd376e":"code","ca39b3ca":"code","8fc267f1":"code","68bc57ab":"code","dc6144e7":"code","3a9eacea":"code","d53a372a":"code","51a46486":"code","658c4e9c":"code","d39f72ab":"code","608b705a":"code","3bdf091d":"code","572114c9":"code","2ce44416":"code","caecdde8":"code","9dc8ca5a":"code","a562a592":"code","8c1fd055":"code","3fed8b55":"code","af530c8e":"code","8f08d1f6":"code","ff07223a":"code","4afaabba":"code","b6876872":"code","ea992087":"code","542b1941":"code","9af598ed":"code","2ea09291":"code","5a2a9c97":"code","a1da1702":"code","78f8c3e2":"code","cafef2d9":"code","1545697c":"code","fab72129":"code","e8f8d79b":"code","b4ca4b75":"code","279afeab":"code","2b7b6210":"markdown","3f039f9f":"markdown","d5f1b5c6":"markdown","5073a28e":"markdown","95cd0628":"markdown","9b6e2f8d":"markdown","e1183b67":"markdown","eec903e4":"markdown","9ce1c514":"markdown","127cd2af":"markdown","3d31de06":"markdown","725c10b9":"markdown","7d4249a3":"markdown","b03a586a":"markdown","986353e4":"markdown","44d68adb":"markdown","130893b8":"markdown","0e95b9df":"markdown","7c1148f8":"markdown","234c864b":"markdown","8f0a2d88":"markdown","64727b34":"markdown","3041ef89":"markdown","05f485c2":"markdown"},"source":{"43d2ab12":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a256a159":"import matplotlib as plt\nimport IPython\nimport sklearn\nimport random\nimport time\nimport warnings\nimport sys","0b7a2f91":"#Common Model Algorithms\nfrom sklearn import svm, tree, linear_model, neighbors, naive_bayes, ensemble, discriminant_analysis, gaussian_process\nfrom xgboost import XGBClassifier\nimport xgboost as xgb\n\n#Common Model Helpers\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn import metrics\n\n#Visualization\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\nimport seaborn as sns\n\n#\nfrom scipy.stats import norm, skew","78495e29":"from pandas.plotting import scatter_matrix","3b670517":"train_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv', dtype = {'MSSubClass':str})\ntest_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv', dtype = {'MSSubClass':str})","2e85f04b":"train_data","62b9d5b3":"train_data.columns","9b42262c":"test_data","7ba12bbd":"train_data.info()\n#test_data.info()","f80e691e":"train_data['SalePrice'].describe()","7460f8b7":"sns.distplot(train_data['SalePrice'])\nfig = plt.figure()\n","3045c668":"print (\"\u504f\u5ea6\u4e3a %f \" % train_data['SalePrice'].skew())\nprint (\"\u5cf0\u5ea6\u4e3a %f\"  % train_data['SalePrice'].kurt())","616f7fdc":"#train_data[train_data.duplicated()]\n#test_data[test_data.duplicated()]\n#train_data[train_data[train_data.columns].duplicated()==True]\n#test_data[test_data[test_data.columns].duplicated()==True]","eb501c18":"train_data.describe(include = 'all')\n\nlimit_missing_values = 0.25 # \u627e\u51fa\u7f3a\u5931\u7387>25%\u7684\u7f3a\u5931\u503c\ntrain_limit_missing_values = len(train_data) * limit_missing_values\nprint(\"\",train_data.columns[train_data.isnull().sum().values > train_limit_missing_values])\ndata_loss = train_data.isnull().sum().sort_values(ascending=False)\npercent = (train_data.isnull().sum()\/train_data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([data_loss, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)\n","89a6d82e":"test_data.describe(include = 'all')\n\nlimit_missing_values = 0.25 # \u627e\u51fa\u7f3a\u5931\u7387>25%\u7684\u7f3a\u5931\u503c\ntest_limit_missing_values = len(test_data) * limit_missing_values\nprint(\"\",test_data.columns[test_data.isnull().sum().values > test_limit_missing_values])\ndata_loss = test_data.isnull().sum().sort_values(ascending=False)\npercent = (test_data.isnull().sum()\/test_data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([data_loss, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(40)","429fe50e":"train_data.drop(columns=['Alley', 'MiscFeature','PoolQC','MiscVal'],inplace = True)\ntest_data.drop(columns=['Alley', 'MiscFeature','PoolQC','MiscVal'],inplace = True)","aeccdde3":"train_data['Fence'].fillna(\"None\", inplace =True)\ntrain_data['FireplaceQu'].fillna(\"None\", inplace =True)\ntest_data['Fence'].fillna(\"None\", inplace =True)\ntest_data['FireplaceQu'].fillna(\"None\", inplace =True)\nprint(test_data.isnull().sum().sort_values(ascending=False).head(20))\ndata_loss = train_data.isnull().sum().sort_values(ascending=False)\ndata_loss.head(20)","9cabfa92":"train_lost_column = list(train_data.columns[train_data.isnull().sum()!=0])\nprint('Train_lost_column:', train_lost_column)","1b8a6dd1":"train_lost_digital = list(train_data[train_lost_column].dtypes[train_data[train_lost_column].dtypes != 'object'].index)\nprint('train_lost_digital:',train_lost_digital)#\u6570\u503c\u7c7b\n\ntrain_lost_catagory = list(train_data[train_lost_column].dtypes[train_data[train_lost_column].dtypes == 'object'].index)\nprint('train_lost_catagory:',train_lost_catagory)#\u7c7b\u522b\u7c7b","d79f9496":"x = 'LotFrontage'\ndata = pd.concat([train_data['SalePrice'], train_data[x]], axis=1)\nfig = sns.boxplot(x=x, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\n#\u5b9e\u5728\u4e0d\u77e5\u9053\u53d6\u4e2d\u4f4d\u6570\u8fd8\u662f\u53d60\uff0c\u6ca1\u641e\u61c2\u600e\u4e48\u5f97\u76f8\u5173\u6027\uff0c\u4e07\u4e00\u540e\u9762\u7528\u4e0d\u5230\u6211\u4e0d\u662f\u767d\u5206\u6790\u4e86\uff08\u7b11","ae93ef72":"train_data['LotFrontage'].fillna(train_data['LotFrontage'].median(), inplace =True)\ntest_data['LotFrontage'].fillna(test_data['LotFrontage'].median(), inplace =True)","ac7b3dd5":"for c in ('GarageType','GarageCond','GarageQual','GarageFinish'):\n    train_data[c].fillna('None',inplace = True)\nfor c in ('GarageType','GarageCond','GarageQual','GarageFinish'):\n    test_data[c].fillna('None',inplace = True)\ntrain_data['GarageYrBlt'].fillna(train_data['GarageYrBlt'].median(), inplace =True)\ntest_data['GarageYrBlt'].fillna(train_data['GarageYrBlt'].median(), inplace =True)","84621c24":"for c in ('BsmtExposure','BsmtFinType2','BsmtQual','BsmtCond','BsmtFinType1'):\n    train_data[c].fillna('None',inplace = True)\nfor c in ('BsmtExposure','BsmtFinType2','BsmtQual','BsmtCond','BsmtFinType1'):\n    test_data[c].fillna('None',inplace = True)\nfor a in ('BsmtFullBath','BsmtHalfBath','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF'):\n    test_data[a].fillna(0,inplace = True)","0513ab95":"x = 'MasVnrType'\ndata = pd.concat([train_data['SalePrice'], train_data[x]], axis=1)\nfig = sns.boxplot(x=x, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","7f66c263":"x = 'MasVnrArea'\ndata = pd.concat([train_data['SalePrice'], train_data[x]], axis=1)\nfig = sns.boxplot(x=x, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","87d4bb5c":"train_data['MasVnrType'].fillna(\"None\", inplace =True)\ntrain_data['MasVnrArea'].fillna(0, inplace = True)\ntest_data['MasVnrType'].fillna(\"None\", inplace =True)\ntest_data['MasVnrArea'].fillna(0, inplace = True)","78bee0e1":"train_data['Electrical'].fillna(train_data['Electrical'].mode()[0],inplace = True)\ntest_data['Electrical'].fillna(test_data['Electrical'].mode()[0],inplace = True)","8006da9b":"train_data['Electrical'].head()","ca5e8419":"#\u60f3\u4e86\u5f88\u4e45\u505a\u4e86\u4e00\u534a\u7684\u4e1c\u897f\u4e0d\u60f3\u518d\u5408\u8d77\u6765\u91cd\u65b0\u5f04\u4e86\uff0c\u6240\u4ee5\u8bad\u7ec3\u548c\u6d4b\u8bd5\u5206\u5f00\u5904\u7406\uff0c\u5269\u4e0b\u7684\u8bad\u7ec3\u96c6\u4e2d\u7684\u6570\u636e\uff1a\ntest_data['MSZoning'].fillna('RL',inplace = True)\ntest_data['Utilities'].fillna('AllPub',inplace = True)\ntest_data['Functional'].fillna('Typ',inplace = True)\ntest_data['Exterior2nd'].fillna('VinylSd',inplace = True)\ntest_data['SaleType'].fillna('WD',inplace = True)\n\ntest_data['Exterior1st'].fillna('VinylSd',inplace = True)\ntest_data['KitchenQual'].fillna('TA', inplace = True)\ntest_data['GarageArea'].fillna(0, inplace =True)\ntest_data['GarageCars'].fillna(0, inplace =True)\ntest_data['TotalBsmtSF'].fillna(test_data['TotalBsmtSF'].mean(), inplace =True)","62262683":"print(test_data.isnull().sum().sort_values(ascending=False).head(20))\nprint(train_data.isnull().sum().sort_values(ascending=False).head(20))","39ae559d":"train_data.info()","5e5b74dd":"var = 'LotArea'#\u6574\u4f53\u5360\u5730\u9762\u79ef\uff08\ndata = pd.concat([train_data['SalePrice'], train_data[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","8952b9d8":"x = 'OverallQual'#\u5bf9\u623f\u5b50\u7684\u6574\u4f53\u6750\u6599\u548c\u88c5\u4fee\u8fdb\u884c\u8bc4\u5206\ndata = pd.concat([train_data['SalePrice'], train_data[x]], axis=1)\nfig = sns.boxplot(x=x, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);#\u6574\u4f53\u4e0a\u5347\u8d8b\u52bf\uff0c\u4fdd\u7559","85d90315":"x = 'OverallCond'#\u8bc4\u4f30\u623f\u5c4b\u7684\u6574\u4f53\u72b6\u51b5\ndata = pd.concat([train_data['SalePrice'], train_data[x]], axis=1)\nfig = sns.boxplot(x=x, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);#\u6574\u4f53\u4e0a\u5347\uff0c\u5148\u4fdd\u7559\u3002","d4d64a39":"x = 'YearBuilt'#\u5efa\u9020\u65f6\u95f4\ndata = pd.concat([train_data['SalePrice'], train_data[x]], axis=1)\nf, ax = plt.subplots(figsize=(25, 12))  # \u6539\u53d8\u5927\u5c0f\nfig = sns.boxplot(x=x, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);#\u76f8\u5173\u6027\u770b\u8d77\u6765\u6bd4\u8f83\u5c0f\uff0c\u6709\u4e9b\u8001\u623f\u5b50\u4ef7\u503c\u5e94\u8be5\u4e5f\u4e0d\u4f4e\u3002\u5148\u4fdd\u7559","8d02f753":"var = 'TotalBsmtSF'#\u6574\u4f53\u5730\u4e0b\u5ba4\u9762\u79ef\uff0c\u628a\u4e00\u5217Bsmt\u7cfb\u5217\u5305\u62ec\u8fdb\u6765\ndata = pd.concat([train_data['SalePrice'], train_data[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));#\u5448\u6307\u6570\/\u7ebf\u6027\u76f8\u5173\uff0c\u4fdd\u7559","47f20dff":"x = 'HeatingQC'#\u6696\u6c14\u8bc4\u4ef7\ndata = pd.concat([train_data['SalePrice'], train_data[x]], axis=1)\nfig = sns.boxplot(x=x, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);#\u5148\u4fdd\u7559","3f00b74b":"x = 'CentralAir'#\u6709\u65e0\u4e2d\u592e\u7a7a\u8c03\ndata = pd.concat([train_data['SalePrice'], train_data[x]], axis=1)\nfig = sns.boxplot(x=x, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);#\u5148\u4fdd\u7559","ce8955e6":"var = '1stFlrSF'#\u4e00\u697c\u9762\u79ef\ndata = pd.concat([train_data['SalePrice'], train_data[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","ecfccbbf":"var = 'GrLivArea'#\u6574\u4f53\u5730\u4e0a\u9762\u79ef\uff08\u4e0d\u7b97\u5730\u4e0b\u5ba4\uff09\ndata = pd.concat([train_data['SalePrice'], train_data[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));#\u6574\u4f53\u66f4\u503e\u5411\u4e0e\u7ebf\u6027\uff0c\u4fdd\u7559\u6574\u4f53","a8b15a0d":"x = 'FullBath'#\u5b8c\u6574\u7684\u6d17\u624b\u95f4(\u53ef\u6dcb\u6d74)\ndata = pd.concat([train_data['SalePrice'], train_data[x]], axis=1)\nfig = sns.boxplot(x=x, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);#\u5148\u4fdd\u7559","40421f58":"x = 'KitchenQual'#\u53a8\u623f\u8bc4\u4ef7\ndata = pd.concat([train_data['SalePrice'], train_data[x]], axis=1)\nfig = sns.boxplot(x=x, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);#\u987a\u5e8f\u9519\u4e86\uff0c\u53ef\u4fdd\u7559\uff08\u4f46\u611f\u89c9\u548c\u623f\u5c4b\u8bc4\u4ef7\u76f8\u5173\uff0c\u6240\u4ee5\u5927\u6982\u7387\u5220\u9664\uff09","f67266d1":"x = 'TotRmsAbvGrd'#\u603b\u7684\u623f\u95f4\u6570\u91cf\uff08\u4e0d\u8ba1\u7b97\u6d17\u624b\u95f4\uff09\ndata = pd.concat([train_data['SalePrice'], train_data[x]], axis=1)\nfig = sns.boxplot(x=x, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);#\u5148\u4fdd\u7559","2a1687b1":"var = 'GarageArea'#\u8f66\u5e93\u5927\u5c0f\ndata = pd.concat([train_data['SalePrice'], train_data[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","c9bd8af3":"x = 'GarageCars'#\u8f66\u5e93\u53ef\u505c\u8f66\u8f86\uff0c\u5e94\u8be5\u548c\u5927\u5c0f\u5f3a\u76f8\u5173\uff0c\u4fdd\u7559\u5176\u4e00\u770b\u6837\u5b50\u7559\u8f66\u5e93\u5927\u5c0f\ndata = pd.concat([train_data['SalePrice'], train_data[x]], axis=1)\nfig = sns.boxplot(x=x, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","cc04d487":"x = 'Neighborhood'#\u533a\u57df\u623f\u4ef7\uff0c\u5e94\u8be5\u4e0e\u623f\u4ef7\u5f3a\u76f8\u5173\uff0c\u540e\u7eed\u8fdb\u884c\u5904\u7406\u3002\ndata = pd.concat([train_data['SalePrice'], train_data[x]], axis=1)\nfig,ax = plt.subplots(figsize=(16, 9))\nfig = sns.boxplot(x=x, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","7d7fbd24":"x = 'OverallCond'\ndata = pd.concat([train_data['SalePrice'], train_data[x]], axis=1)\nfig = sns.boxplot(x=x, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","5e18ab50":"corrmat = train_data.corr()\nfig,ax = plt.subplots(figsize=(16, 13))\nsns.heatmap(corrmat, vmax=0.8, square=True,fmt='.2f')","abba32d2":"k  = 12 # \u5173\u7cfb\u77e9\u9635\u4e2d\u5c06\u663e\u793a12\u4e2a\u7279\u5f81\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train_data[cols].values.T)\nsns.set(font_scale=1.25)\nfig,ax = plt.subplots(figsize=(12, 9))\nhm = sns.heatmap(cm, cbar=True, annot=True, \\\n                 square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","b52bb3a6":"# \u9009\u53d6OverallQual,TotalBsmtSF,GrLivArea,YearBuilt\u8fd9\u56db\u4e2a\u7279\u5f81\u6765\u67e5\u770b\u76f8\u5173\u6027\nfig = plt.figure(figsize=(15,12))\ncols = ['OverallQual','TotalBsmtSF','GrLivArea','YearBuilt']\nfor col in cols:\n    ax = fig.add_subplot(3, 2, cols.index(col)+1)\n    ax.scatter(train_data[col], train_data['SalePrice'])\n    ax.set_xlabel(col)\nplt.show()","24829b8d":"#GrLivArea > \u5f02\u5e38\u503c\u5904\u7406\uff0c\u4ece\u524d\u9762\u4e3b\u89c2\u5206\u6790\u53ef\u4ee5\u5f97\u51fa\u6709\u51e0\u4e2a\u79bb\u7fa4\u70b9\uff0c\u8fdb\u884c\u53bb\u9664\n\ntrain_data.drop(train_data[(train_data['OverallQual']<5) & (train_data['SalePrice']>200000)].index,inplace=True)\ntrain_data.drop(train_data[(train_data['GrLivArea']>4000) & (train_data['SalePrice']<200000)].index,inplace=True)\ntrain_data.drop(train_data[(train_data['YearBuilt']<1900) & (train_data['SalePrice']>400000)].index,inplace=True)\ntrain_data.drop(train_data[(train_data['TotalBsmtSF']>6000) & (train_data['SalePrice']<200000)].index,inplace=True)\ntrain_data.reset_index(drop=True, inplace=True)","f0b8fa21":"train_data.info()","b8b43a70":"# \u9009\u53d6OverallQual,TotalBsmtSF,GrLivArea,YearBuilt\u8fd9\u56db\u4e2a\u7279\u5f81\u6765\u67e5\u770b\u76f8\u5173\u6027\nfig = plt.figure(figsize=(15,12))\ncols = ['OverallQual','TotalBsmtSF','GrLivArea','YearBuilt']\nfor col in cols:\n    ax = fig.add_subplot(3, 2, cols.index(col)+1)\n    ax.scatter(train_data[col], train_data['SalePrice'])\n    ax.set_xlabel(col)\nplt.show()","f813f97c":"sns.set()\ncols = ['SalePrice','OverallQual','GrLivArea', 'GarageCars','TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train_data[cols], height = 2.5)\nplt.show()","68d00f69":"cols = ['OverallQual','GrLivArea', 'GarageCars','TotalBsmtSF', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt']\ntest_data[cols].isnull().sum()","f8f2bab5":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\ntrain_data['CentralAir'] = le.fit_transform(train_data['CentralAir']) \ntest_data['CentralAir'] = le.fit_transform(test_data['CentralAir'])  \nx = 'CentralAir'\ndata = pd.concat([train_data['SalePrice'], train_data[x]], axis=1)\nfig = sns.boxplot(x=x, y=\"SalePrice\", data=data)\n\n\nprint ('Shape train_data: {}'.format(train_data.shape))\nprint ('Shape test_data: {}'.format(test_data.shape))\n","d4d141a2":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfes = ['HeatingQC','BsmtCond','BsmtQual','ExterCond','ExterQual','FireplaceQu',\n              'GarageCond','GarageQual','KitchenQual']\nordinalmap = {'Ex': 5,'Gd': 4,'TA': 3,'Fa': 2,'Po': 1,'None': 0}\n\nfor c in fes:\n    train_data[c] = train_data[c].map(ordinalmap) \n    \nfor a in fes:\n    test_data[a] = test_data[a].map(ordinalmap) ","cea15c21":"train_data.info()","99b50078":"from scipy import stats","25b74a22":"train_data['SalePrice'] = np.log1p(train_data['SalePrice'])\n\nsns.distplot(train_data['SalePrice'], fit=norm)\nfig = plt.figure()\nres = stats.probplot(train_data['SalePrice'], plot=plt)","2baab7e9":"train_data=train_data[np.abs(train_data['SalePrice']-train_data['SalePrice'].mean())<=(3*train_data['SalePrice'].std())]","1f62d22a":"\ntrain_id = train_data['Id']\ntest_id = test_data['Id']\ntrain_data.drop(columns='Id', inplace=True)\ntest_data.drop(columns='Id', inplace=True)\nprint('\u5220\u9664ID\u5217\u540e\u7684\u8bad\u7ec3\u96c6\u5927\u5c0f\uff1a', train_data.shape)\nprint('\u5220\u9664ID\u5217\u540e\u7684\u6d4b\u8bd5\u96c6\u5927\u5c0f\uff1a', test_data.shape)\n \n# \u5408\u5e76\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nall_data = pd.concat([train_data, test_data], axis=0, ignore_index=True)\n# \u4fdd\u5b58\u6807\u7b7e\u5217\uff0c\u5e76\u5220\u9664\uff0c\u65b9\u4fbf\u6570\u636e\u6e05\u6d17\nsale_price = train_data['SalePrice']\nall_data.drop(columns='SalePrice', inplace=True)","a39619c6":"sale_price.index = range(len(sale_price))\nsale_price = sale_price.reset_index(drop = True)","9c5fdf28":"from sklearn.preprocessing import LabelEncoder\ntime_cols = ['GarageYrBlt','YearBuilt','YearRemodAdd','YrSold']\nfor time_col in time_cols:\n    all_data[time_col] = LabelEncoder().fit_transform(all_data[time_col])","a7ebca23":"all_data.info()","65cd5a64":"numeric_df = all_data.select_dtypes(['float64','int32','int64'])\nnumeric_cols = numeric_df.columns.tolist()\n \nfig = plt.figure(figsize=(20, 30))\nfor col in numeric_cols:\n    ax = fig.add_subplot(7, 8, numeric_cols.index(col)+1)\n    ax.set_xlabel(col)\n    ax.hist(numeric_df[col])","9b56ab1c":"from sklearn.preprocessing import LabelEncoder\ntime_cols = ['GarageYrBlt','YearBuilt','YearRemodAdd','YrSold']\nfor time_col in time_cols:\n    all_data[time_col] = LabelEncoder().fit_transform(all_data[time_col])","c72ac91f":"skewed_cols = all_data[numeric_cols].apply(lambda x: skew(x)).sort_values(ascending=False)#\u5bf9\u6570\u5316\u5904\u7406\nskewed_df = pd.DataFrame({'skew':skewed_cols})\nskewed_df","ba99532a":"skew_cols = skewed_df[skewed_df['skew'].abs()>1].index.tolist()\nfor col in skew_cols:\n    all_data[col] = np.log1p(all_data[col])","3c6b6c85":"skewed_cols = all_data[numeric_cols].apply(lambda x: skew(x)).sort_values(ascending=False)\nskewed_df = pd.DataFrame({'skew':skewed_cols})\nskewed_df","0ea50637":"all_data = pd.get_dummies(all_data)\nall_data.info()","57d874c0":"# \u8fd8\u539f\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nclean_train = all_data.iloc[:1444, :]\nclean_test = all_data.iloc[1444:, :]\n \n# \u52a0\u4e0a\u53bb\u9664\u79bb\u7fa4\u70b9\u540e\u7684\u6807\u7b7e\u5217\nclean_train = pd.concat([clean_train, sale_price], axis=1)\n \nprint('\u5904\u7406\u540e\u7684\u8bad\u7ec3\u96c6\u5927\u5c0f\uff1a', clean_train.shape)\nprint('\u5904\u7406\u540e\u7684\u6d4b\u8bd5\u96c6\u5927\u5c0f\uff1a', clean_test.shape)","ac394d32":"clean_train.info()","061ee6c6":"clean_test","55c08e48":"clean_test.info()","44fd376e":"#clean_train['SalePrice'] = np.log1p(clean_train['SalePrice'])#\u6807\u51c6\u5316\n#sns.histplot(clean_train['SalePrice']);","ca39b3ca":"####\u5efa\u6a21\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import KFold, GridSearchCV, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error","8fc267f1":"cols=cols[:22]\ncols","68bc57ab":"#cols = cols[:22] \n#drop_columns = [i for i in corrmat.columns if i not in cols]\n\n#print (drop_columns , \"\\n\")\n#clean_train = clean_train.drop(drop_columns, axis=1)\n#print (len(clean_train.columns))","dc6144e7":"# \u5212\u5206\u6570\u636e\u96c6\nX = clean_train.drop(columns='SalePrice')\ny = clean_train['SalePrice']\n \nXtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.3, random_state=10)\n \n# \u5b9a\u4e49\u4ea4\u53c9\u9a8c\u8bc1\u6a21\u5f0f\nkf = KFold(n_splits=5, random_state=50, shuffle=True)\n \n# \u5b9a\u4e49\u8861\u91cf\u6307\u6807\u51fd\u6570\ndef rmse(y, y_pred):\n    rmse = np.sqrt(mean_squared_error(y, y_pred))\n    return rmse\n \ndef cv_rmse(model, X=X):\n    rmse = np.sqrt(-cross_val_score(model, X, y, scoring='neg_mean_squared_error', cv=kf))\n    return rmse","3a9eacea":"# \u5efa\u7acb\u57fa\u7ebf\u6a21\u578b\nxgb0 = XGBRegressor(objective='reg:squarederror', random_state=50)\nrf = RandomForestRegressor(random_state=50,oob_score=True)\n \n# \u57fa\u7ebf\u6a21\u578b\u8bc4\u4f30\nmodels = [xgb0, rf]\nmodel_names = ['xgb','rf']\nscores = {}\n \nfor i, model in enumerate(models):\n    score = cv_rmse(model)\n    print('{} rmse score: {:.4f}, rmse std: {:.4f}'.format(model_names[i], score.mean(), score.std()))\n    scores[model_names[i]] = (score.mean(), score.std())\n    \nrmse_df = pd.DataFrame(scores, index=['rmse_score','rmse_std'])\nrmse_df.sort_values('rmse_score', axis=1, inplace=True)\nrmse_df","d53a372a":"'''cv_params = {'n_estimators': range(680,690,5)}\nother_params = {'learning_rate': 0.1, 'n_estimators': 340, 'max_depth': 5, 'min_child_weight': 1, 'seed': 0,\n                    'subsample': 0.8, 'colsample_bytree': 0.8, 'gamma': 0, 'reg_alpha': 0, 'reg_lambda': 1}\nmodel = xgb.XGBRegressor(**other_params)\noptimized_GBM = GridSearchCV(estimator=model, param_grid=cv_params, scoring='neg_mean_squared_error', cv=5, verbose=1, n_jobs=4)\noptimized_GBM.fit(Xtrain, ytrain)\n#evalute_result = optimized_GBM.grid_scores_\n#print('\u6bcf\u8f6e\u8fed\u4ee3\u8fd0\u884c\u7ed3\u679c:{0}'.format(evalute_result))\nprint(optimized_GBM)\nprint('\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c\uff1a{0}'.format(optimized_GBM.best_params_))\nprint('\u6700\u4f73\u6a21\u578b\u5f97\u5206:{0}'.format(optimized_GBM.best_score_))'''","51a46486":"#best_score = 1\n#for x in range(300,800,100):\n#    xgb100 = XGBRegressor(learning_rate= 0.1, n_estimators= x, max_depth= 5, min_child_weight= 1, seed= 0,\n#                    subsample= 0.8, colsample_bytree= 0.8, gamma= 0, reg_alpha= 0, reg_lambda= 1)\n#    score = cv_rmse(xgb100)\n#    print('{}, rmse score: {:.4f}, rmse std: {:.4f}'.format(x, score.mean(), score.std()))\n#    scores = np.mean(score)\n#    if scores < best_score:\n#        best_score = scores\n#        best_parameters = {x}\n#print('\u6a21\u578b\u6700\u4f4e\u5206\u4e3a:{:.4f}'.format(best_score))\n#print('\u6700\u4f73\u53c2\u6570\u4e3a\uff1a{}'.format(best_parameters))","658c4e9c":"'''xgb1 = XGBRegressor(\n                colsample_bytree=0.4,\n                 gamma=0.045,\n                 learning_rate=0.07,\n                 max_depth=5,\n                 min_child_weight=1.5,\n                 n_estimators=300,\n                 reg_alpha=0.65,\n                 reg_lambda=0.45,\n                 subsample=0.95)\n\nmodels = [xgb1]\nmodel_names = ['xgb']\nscores = {}\n\n\nfor i, model in enumerate(models):\n    score = cv_rmse(model)\n    print('{} rmse score: {:.4f}, rmse std: {:.4f}'.format(model_names[i], score.mean(), score.std()))\n    scores[model_names[i]] = (score.mean(), score.std())\n    \nrmse_df = pd.DataFrame(scores, index=['rmse_score','rmse_std'])\nrmse_df.sort_values('rmse_score', axis=1, inplace=True)'''","d39f72ab":"xgb2 = XGBRegressor(learning_rate=0.01, n_estimators= 2100, max_depth= 5, min_child_weight= 6, seed= 0,\n                    subsample= 0.7, colsample_bytree= 0.6, gamma= 0, reg_alpha= 0.001, reg_lambda= 1)\n\nmodels = [xgb2]\nmodel_names = ['xgb']\nscores = {}\n\n\nfor i, model in enumerate(models):\n    score = cv_rmse(model)\n    print('{} rmse score: {:.4f}, rmse std: {:.4f}'.format(model_names[i], score.mean(), score.std()))\n    scores[model_names[i]] = (score.mean(), score.std())\n    \nrmse_df = pd.DataFrame(scores, index=['rmse_score','rmse_std'])\nrmse_df.sort_values('rmse_score', axis=1, inplace=True)\nrmse_df","608b705a":"#print (rf.oob_score_)","3bdf091d":"'''from sklearn.ensemble import RandomForestClassifier\ncv_params = {'n_estimators': [10,20,30,40,50,60,70]}\nother_params = {'min_samples_split':100,'n_estimators': 40,\n                                  'min_samples_leaf':20,'max_depth':8,'max_features':'auto','random_state':50,'oob_score':True}\nmodel = RandomForestRegressor(**other_params)\noptimized_GBM = GridSearchCV(estimator=model, param_grid=cv_params, scoring='neg_mean_squared_error', cv=5, verbose=1, n_jobs=4)\noptimized_GBM.fit(Xtrain, ytrain)\n#evalute_result = optimized_GBM.grid_scores\n#print('\u6bcf\u8f6e\u8fed\u4ee3\u8fd0\u884c\u7ed3\u679c:{0}'.format(evalute_result))\n\noptimized_GBM.cv_results_['mean_test_score'], optimized_GBM.best_params_, optimized_GBM.best_score_\n\nmeans = optimized_GBM.cv_results_['mean_test_score']\nstds = optimized_GBM.cv_results_['std_test_score']\nparams = optimized_GBM.cv_results_['params']\n\nfor mean,std,param in zip(means,stds,params):\n    print(\"mean:%f ,std:%f ,param:%r\" % (mean,std,param))\nprint('\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c\uff1a{0}'.format(optimized_GBM.best_params_))#340\nprint('\u6700\u4f73\u6a21\u578b\u5f97\u5206:{0}'.format(optimized_GBM.best_score_))'''","572114c9":"#model.fit(X,y)\n#print (model.oob_score_)\n#model","2ce44416":"'''from sklearn.ensemble import RandomForestClassifier\ncv_params = {'n_estimators': [32,34,36,38,40,42,44,46,48]}\nother_params = {'min_samples_split':100,\n                                  'min_samples_leaf':20,'max_depth':8,'max_features':'auto','random_state':50}\nmodel = RandomForestRegressor(**other_params)\noptimized_GBM = GridSearchCV(estimator=model, param_grid=cv_params, scoring='neg_mean_squared_error', cv=5, verbose=1, n_jobs=4)\noptimized_GBM.fit(Xtrain, ytrain)\n\n#evalute_result = optimized_GBM.grid_scores\n#print('\u6bcf\u8f6e\u8fed\u4ee3\u8fd0\u884c\u7ed3\u679c:{0}'.format(evalute_result))\n\noptimized_GBM.cv_results_['mean_test_score'], optimized_GBM.best_params_, optimized_GBM.best_score_\n\nmeans = optimized_GBM.cv_results_['mean_test_score']\nstds = optimized_GBM.cv_results_['std_test_score']\nparams = optimized_GBM.cv_results_['params']\n\nfor mean,std,param in zip(means,stds,params):\n    print(\"mean:%f ,std:%f ,param:%r\" % (mean,std,param))\nprint('\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c\uff1a{0}'.format(optimized_GBM.best_params_))\nprint('\u6700\u4f73\u6a21\u578b\u5f97\u5206:{0}'.format(optimized_GBM.best_score_))\n\n#\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c\uff1a{'n_estimators': 42}\n#\u6700\u4f73\u6a21\u578b\u5f97\u5206:-0.03812130679381557'''","caecdde8":"'''\ncv_params = {'max_depth':[7,8,9], 'min_samples_split':range(2,11,1)}\nother_params = {'min_samples_split':100,'n_estimators': 42,\n                                  'min_samples_leaf':20,'max_depth':8,'max_features':'auto','random_state':50,'oob_score':True}\nmodel = RandomForestRegressor(**other_params)\noptimized_GBM = GridSearchCV(estimator=model, param_grid=cv_params, scoring='neg_mean_squared_error', cv=5, verbose=1, n_jobs=4)\noptimized_GBM.fit(Xtrain, ytrain)\n#evalute_result = optimized_GBM.grid_scores\n#print('\u6bcf\u8f6e\u8fed\u4ee3\u8fd0\u884c\u7ed3\u679c:{0}'.format(evalute_result))\n\noptimized_GBM.cv_results_['mean_test_score'], optimized_GBM.best_params_, optimized_GBM.best_score_\n\nmeans = optimized_GBM.cv_results_['mean_test_score']\nstds = optimized_GBM.cv_results_['std_test_score']\nparams = optimized_GBM.cv_results_['params']\n\nfor mean,std,param in zip(means,stds,params):\n    print(\"mean:%f ,std:%f ,param:%r\" % (mean,std,param))\nprint('\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c\uff1a{0}'.format(optimized_GBM.best_params_))#340\nprint('\u6700\u4f73\u6a21\u578b\u5f97\u5206:{0}'.format(optimized_GBM.best_score_))\n\n#'min_samples_split':range(50,201,20)\n#'min_samples_split':range(20,71,10)\n#'max_depth':[7,8,9], 'min_samples_split':range(2,11,1)\n\n\n#\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c\uff1a{'max_depth': 9, 'min_samples_split': 50}\n#\u6700\u4f73\u6a21\u578b\u5f97\u5206:-0.03103002039425078\n#\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c\uff1a{'max_depth': 9, 'min_samples_split': 20}\n#\u6700\u4f73\u6a21\u578b\u5f97\u5206:-0.02944460355978031\n#\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c\uff1a{'max_depth': 8, 'min_samples_split': 2}\n#\u6700\u4f73\u6a21\u578b\u5f97\u5206:-0.02944460355978031\n'''","9dc8ca5a":"'''\ncv_params = {'min_samples_split':range(2,5,2), 'min_samples_leaf':range(2,5,2)}\nother_params = {'min_samples_split':2,'n_estimators': 380,\n                                  'min_samples_leaf':2,'max_depth':8,'max_features':90,'random_state':50,'oob_score':True}\nmodel = RandomForestRegressor(**other_params)\noptimized_GBM = GridSearchCV(estimator=model, param_grid=cv_params, scoring='neg_mean_squared_error', cv=5, verbose=1, n_jobs=4)\noptimized_GBM.fit(Xtrain, ytrain)\n#evalute_result = optimized_GBM.grid_scores\n#print('\u6bcf\u8f6e\u8fed\u4ee3\u8fd0\u884c\u7ed3\u679c:{0}'.format(evalute_result))\n\noptimized_GBM.cv_results_['mean_test_score'], optimized_GBM.best_params_, optimized_GBM.best_score_\n\nmeans = optimized_GBM.cv_results_['mean_test_score']\nstds = optimized_GBM.cv_results_['std_test_score']\nparams = optimized_GBM.cv_results_['params']\n\nfor mean,std,param in zip(means,stds,params):\n    print(\"mean:%f ,std:%f ,param:%r\" % (mean,std,param))\nprint('\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c\uff1a{0}'.format(optimized_GBM.best_params_))#340\nprint('\u6700\u4f73\u6a21\u578b\u5f97\u5206:{0}'.format(optimized_GBM.best_score_))\n\n#\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c\uff1a{'min_samples_leaf': 2, 'min_samples_split': 2}\n#\u6700\u4f73\u6a21\u578b\u5f97\u5206:-0.021911970283232343'''","a562a592":"'''cv_params = {'max_features':range(10,100,2)}\nother_params = {'min_samples_split':2,'n_estimators': 360,\n                                  'min_samples_leaf':2,'max_depth':8,'max_features':'auto','random_state':50,'oob_score':True}\nmodel = RandomForestRegressor(**other_params)\noptimized_GBM = GridSearchCV(estimator=model, param_grid=cv_params, scoring='neg_mean_squared_error', cv=5, verbose=1, n_jobs=4)\noptimized_GBM.fit(Xtrain, ytrain)\n#evalute_result = optimized_GBM.grid_scores\n#print('\u6bcf\u8f6e\u8fed\u4ee3\u8fd0\u884c\u7ed3\u679c:{0}'.format(evalute_result))\n\noptimized_GBM.cv_results_['mean_test_score'], optimized_GBM.best_params_, optimized_GBM.best_score_\n\nmeans = optimized_GBM.cv_results_['mean_test_score']\nstds = optimized_GBM.cv_results_['std_test_score']\nparams = optimized_GBM.cv_results_['params']\n\nfor mean,std,param in zip(means,stds,params):\n    print(\"mean:%f ,std:%f ,param:%r\" % (mean,std,param))\nprint('\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c\uff1a{0}'.format(optimized_GBM.best_params_))#340\nprint('\u6700\u4f73\u6a21\u578b\u5f97\u5206:{0}'.format(optimized_GBM.best_score_))\n\n#\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c\uff1a{'max_features': 90}\n#\u6700\u4f73\u6a21\u578b\u5f97\u5206:-0.0182593272047933'''","8c1fd055":"'''cv_params = {'n_estimators':range(340,500,20)}\nother_params = {'min_samples_split':2,'n_estimators': 42,\n                                  'min_samples_leaf':2,'max_depth':8,'max_features':90,'random_state':50,'oob_score':True}\nmodel = RandomForestRegressor(**other_params)\noptimized_GBM = GridSearchCV(estimator=model, param_grid=cv_params, scoring='neg_mean_squared_error', cv=5, verbose=1, n_jobs=4)\noptimized_GBM.fit(Xtrain, ytrain)\n#evalute_result = optimized_GBM.grid_scores\n#print('\u6bcf\u8f6e\u8fed\u4ee3\u8fd0\u884c\u7ed3\u679c:{0}'.format(evalute_result))\n\noptimized_GBM.cv_results_['mean_test_score'], optimized_GBM.best_params_, optimized_GBM.best_score_\n\nmeans = optimized_GBM.cv_results_['mean_test_score']\nstds = optimized_GBM.cv_results_['std_test_score']\nparams = optimized_GBM.cv_results_['params']\n\nfor mean,std,param in zip(means,stds,params):\n    print(\"mean:%f ,std:%f ,param:%r\" % (mean,std,param))\nprint('\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c\uff1a{0}'.format(optimized_GBM.best_params_))#340\nprint('\u6700\u4f73\u6a21\u578b\u5f97\u5206:{0}'.format(optimized_GBM.best_score_))\n\n#\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c\uff1a{'n_estimators': 380}\n#\u6700\u4f73\u6a21\u578b\u5f97\u5206:-0.01825351524811524'''","3fed8b55":"'''other_params = {'min_samples_split':2,'n_estimators': 380,\n                                  'min_samples_leaf':2,'max_depth':8,'max_features':90,'random_state':50,'oob_score':True}\nmodel = RandomForestRegressor(**other_params)\nmodel.fit(X,y)\nprint (model.oob_score_)\n\n#0.8848178840987325'''","af530c8e":"rf2 = RandomForestRegressor(min_samples_split=2,n_estimators= 460,\n                                  min_samples_leaf=2,max_depth=8,max_features=90,random_state=50,oob_score=True)\n \n# \u57fa\u7ebf\u6a21\u578b\u8bc4\u4f30\nmodels = [rf2]\nmodel_names = ['rf']\nscores = {}\n \nfor i, model in enumerate(models):\n    score = cv_rmse(model)\n    print('{} rmse score: {:.4f}, rmse std: {:.4f}'.format(model_names[i], score.mean(), score.std()))\n    scores[model_names[i]] = (score.mean(), score.std())\n    \nrmse_df = pd.DataFrame(scores, index=['rmse_score','rmse_std'])\nrmse_df.sort_values('rmse_score', axis=1, inplace=True)\nrmse_df","8f08d1f6":"#print(xgb0,'\\n\\n',xgb1,'\\n\\n',rf)","ff07223a":"xgb0.fit(X,y)\nxgb_pred = xgb0.predict(clean_test)","4afaabba":"#rf.fit(X,y)\n#rf_pred = rf.predict(clean_test)","b6876872":"rf2.fit(X,y)\nrf2_pred = rf2.predict(clean_test)","ea992087":"xgb2.fit(X,y)\nxgb2_pred = xgb2.predict(clean_test)","542b1941":"rf2_pred","9af598ed":"y_test1 = ytest.drop(columns='Id', inplace=True)","2ea09291":"\n\ndef drawing(y_hat):\n    # \u83b7\u53d6\u9884\u6d4b\u7684\u6d4b\u8bd5\u96c6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7684\u7d22\u5f15\n    order = np.argsort(y_hat)\n    # \u5c06\u6d4b\u8bd5\u96c6\u548c\u9884\u6d4b\u7684\u6d4b\u8bd5\u96c6\u6309\u7d22\u5f15\u6392\u5e8f\n    ytest_new = ytest[order]\n    y_hat = y_hat[order]\n    # \u753b\u56fe\u5c55\u793a\n    plt.figure(figsize=(8, 6))\n    t = np.arange(len(ytest))\n    plt.plot(t, ytest_new, 'b-', linewidth=2, label='True')\n    plt.plot(t, y_hat, 'r-', linewidth=2, label='Predicted')\n    plt.legend(loc='upper left')\n    plt.grid(b=True)\n    plt.show()","5a2a9c97":"xgb2.fit(Xtrain,ytrain)\ny_hat1 = xgb2.predict(Xtest)\nprint(\"RMSE =  %.4f\" % np.sqrt(np.mean((y_hat1 - ytest) ** 2)))\nprint('R2_train = %.4f' % xgb2.score(Xtrain, ytrain))\nprint('R2_test = %.4f' % xgb2.score(Xtest, ytest))\n\n","a1da1702":"xgb3_pred = xgb2.predict(Xtest)\nrf3_pred = rf2.predict(Xtest)","78f8c3e2":"    fig = plt.figure(figsize=(100,5))  # dpi\u53c2\u6570\u6307\u5b9a\u7ed8\u56fe\u5bf9\u8c61\u7684\u5206\u8fa8\u7387\uff0c\u5373\u6bcf\u82f1\u5bf8\u591a\u5c11\u4e2a\u50cf\u7d20\uff0c\u7f3a\u7701\u503c\u4e3a80\n    axes = fig.add_subplot(1, 1, 1)#\u8bbe\u7f6e\u67e5\u770b\u7684\u5b50\u56fe\n    line1, = axes.plot(range(len(xgb3_pred)), xgb3_pred, 'b--', label='predict', linewidth=2)\n    line3, = axes.plot(range(len(xgb3_pred)), ytest, 'g', label='true')\n    axes.grid()\n    fig.tight_layout()\n    plt.legend(handles=[line1, line3])\n    plt.title('\u62df\u5408\u66f2\u7ebf')\n    plt.show()\n    #\n\n","cafef2d9":"    fig = plt.figure(figsize=(100,5))  # dpi\u53c2\u6570\u6307\u5b9a\u7ed8\u56fe\u5bf9\u8c61\u7684\u5206\u8fa8\u7387\uff0c\u5373\u6bcf\u82f1\u5bf8\u591a\u5c11\u4e2a\u50cf\u7d20\uff0c\u7f3a\u7701\u503c\u4e3a80\n    axes = fig.add_subplot(1, 1, 1)#\u8bbe\u7f6e\u67e5\u770b\u7684\u5b50\u56fe\n    line1, = axes.plot(range(len(rf3_pred)), rf3_pred, 'b--', label='predict', linewidth=2)\n    line3, = axes.plot(range(len(rf3_pred)), ytest, 'g', label='true')\n    axes.grid()\n    fig.tight_layout()\n    plt.legend(handles=[line1, line3])\n    plt.title('\u62df\u5408\u66f2\u7ebf')\n    plt.show()","1545697c":"# \u6a21\u578b\u878d\u5408\uff1ablending\ndef blending(X, y, test):\n    \n    xgb2.fit(X, y)\n    xgb_pred = xgb2.predict(test)\n    \n\n\n    rf2.fit(X, y)\n    rf_pred = rf2.predict(test)\n\n    \n    # \u52a0\u6743\u6c42\u548c\n    blended_pred = (\n                    1 * xgb_pred +\n                    0 * rf_pred )\n    return blended_pred","fab72129":"blended_pred = blending(Xtrain, ytrain, Xtest)\nblending_score = rmse(ytest, blended_pred)\nprint(blending_score)\n# \u8f93\u51fa\n#0.09774131430212737 # 0.9 0.1\n#0.09876795269146431 # 0.8 0.2\n#0.09945884766911149 # 0.75 0.25","e8f8d79b":"# \u9884\u6d4b\u5e76\u63d0\u4ea4\u7ed3\u679c\n#pred = np.exp(xgb_pred)\n#pred = np.exp(rf_pred)\npred = np.expm1(xgb2_pred)\n#pred = np.exp(rf2_pred)\n#pred = np.expm1(blending(X,y,clean_test))\nsample = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsample['SalePrice'] = pred\nsample.to_csv('result.csv', index=False)","b4ca4b75":"np.expm1()","279afeab":"pred","2b7b6210":"\u5168\u7bc7\u6587\u7ae0\u57fa\u4e8ehttps:\/\/www.kaggle.com\/marsggbo\/kaggle\/output?scriptVersionId=1392261 \u5b8c\u6210\uff0c\u5728\u6587\u7ae0\u4e0b\u65b9\u6709\u5f88\u591a\u4eba\u8bc4\u8bba\uff0c\u5bf9\u4e8e\u2018neighbour\u2019\u72ec\u70ed\u7f16\u7801\u6216\u8005\u54d1\u53d8\u91cf\u5904\u7406\u4ee5\u53ca\u5bf9\u6d4b\u8bd5\u96c6\u548c\u8bad\u7ec3\u96c6\u4e00\u8d77\u8fdb\u884c\u6570\u636e\u9884\u5904\u7406\u8fdb\u884c\u8003\u8651\uff0c\u4ee5\u53ca\u90e8\u5206\u8ba8\u8bba\u63d0\u53ca\u5173\u4e8e\u5f52\u4e00\u5316\u5904\u7406\uff0c\u8fdb\u884c\u91cd\u65b0\u8c03\u6574\u548c\u5904\u7406\u3002","3f039f9f":"\u809d\u4e0d\u52a8\u4e86\uff0c\u6478\u4e86","d5f1b5c6":"\u5206\u6790'Garage'\u7c7b\n\nGarageType\uff1a\u8f66\u5e93\u4f4d\u7f6e\n\nGarageYrBlt\uff1a\u5e74\u8f66\u5e93\u5df2\u5efa\u6210\n\nGarageFinish\uff1a\u8f66\u5e93\u7684\u5185\u90e8\u88c5\u9970\n\nGarageCars\uff1a\u8f66\u5e93\u5bb9\u91cf\u4e2d\u7684\u8f66\u5e93\u5927\u5c0f\n\nGarageArea\uff1a\u8f66\u5e93\u7684\u5927\u5c0f\uff08\u4ee5\u5e73\u65b9\u82f1\u5c3a\u4e3a\u5355\u4f4d\uff09\n\nGarageQual\uff1a\u8f66\u5e93\u8d28\u91cf \n\nGarageCond\uff1a\u8f66\u5e93\u6761\u4ef6 \n\n81\u4e2a\u7f3a\u5931\u5f88\u660e\u663e\u662f\u6ca1\u6709\u8f66\u5e93\uff0c\u6240\u4ee5\u586bnone\uff0cyrblt\u586b\u4e2d\u4f4d\u6570.\u800c\u4e14\u540e\u7eed\u5927\u6982\u53ef\u4ee5\u5220\u53bb\u90e8\u5206\u7279\u5f81\u7b80\u5316\uff0c\u8fd9\u51e0\u4e2a\u7279\u5f81\u5e94\u8be5\u662f\u5f3a\u76f8\u5173\u3002","5073a28e":"\u2018PoolQC          1453\nMiscFeature     1406\nAlley           1369\nFence           1179\nFireplaceQu      690\u2019\n\n* \u524d\u4e09\u4e2a\u51e0\u4e4e\u80af\u5b9a\u53ef\u4ee5\u629b\u5f03\uff0c\u4f46\u662f\u521d\u5b66\u8fd8\u662f\u60f3\u786e\u8ba4\u4e00\u4e0b\u3002\n\nAlley: Type of alley access to property \uff1a \u8fdb\u5165\u4f4f\u5b85\u7684\u95e8\u53e3\u7684\u5c0f\u5df7\u7c7b\u578b\uff08\u4e0e\u5176\u4ed6\u4e0d\u76f8\u5173\uff09\n\nMiscFeature: Miscellaneous feature not covered in other categories \uff1a\u5176\u4ed6\u7c7b\u522b\u672a\u6db5\u76d6\u7684\u6742\u9879\u529f\u80fd\uff08\u4e0eMISCval\u76f8\u5173\uff0c\u4e00\u5e76\u5220\u9664)\n\nPoolQC: Pool quality \uff1a\u6cf3\u6c60\u8d28\u91cf (\u4e0epool\u7cfb\u5217\u76f8\u5173\uff1apoolarea\uff09\u5220\u9664\u6216\u8005\u586bNone\n\nFence : \u522b\u5885\u56f4\u680f\uff08\uff1f\uff0c\u516c\u5bd3\u6ca1\u6709\u56f4\u680f\uff0c\u586bnone\uff09\n\nFireplaceQu\uff1a\u58c1\u7089\uff08\u6709\u4e9b\u6ca1\u6709\u4e5f\u6b63\u5e38\uff0c\u586bnone\uff09","95cd0628":">  \u7279\u5f81\u5206\u6790\uff1a\u4e3b\u89c2\n\n>  \u56e0\u4e3a\u7279\u5f81\u8fc7\u591a\uff0c\u7701\u7565\u6389\u4e00\u4e2a\u4e2a\u601d\u8003\u7684\u8fc7\u7a0b\n\u76f4\u63a5\u9009\u4e0b\u51e0\u4e2a\u5f71\u54cd\u53ef\u80fd\u8f83\u5927\u7684\u7279\u5f81\uff0c\u7136\u540e\u8fdb\u884c\u89c2\u5bdf\u3002","9b6e2f8d":"\u6700\u540e\u4e00\u4e2a\uff1aElectrical \u7535\u529b\u7cfb\u7edf \u76f4\u63a5\u586b\u4f17\u6570","e1183b67":"# \u4e00\uff1a\u660e\u786e\u76ee\u7684\n* \u9664\u53bbID\u548c\u6700\u7ec8\u7279\u5f81HP\uff0c\u9884\u6d4b79\u4e2a\u7279\u5f81\u7684\u6570\u636e\u96c6\n* \u7814\u7a76\u4e3b\u8981\u7279\u5f81\uff1aHP\uff08\u623f\u4ef7\uff09\n* \u6570\u636e\u6e05\u6d17\uff08\u5bf9\u6570\u636e\u7684\u5f02\u5e38\u503c\uff0c\u7f3a\u5931\u503c\uff0c\u548c\u5f3a\u76f8\u5173\u53d8\u91cf\u8fdb\u884c\u5206\u6790\n* \u4ece\u4e3b\u89c2\u548c\u5ba2\u89c2\u89d2\u5ea6\u786e\u8ba4\u53d8\u91cf\u5bf9\u623f\u4ef7\u7684\u5f71\u54cd\n* \u5957\u5165\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\u3002","eec903e4":"\u9009\u4e0b'OverallQual,GrlivArea,GarageCars,TotalBsmtSF,FullBath,YearBuilt\uff0c\u4e0d\u9009\u62e9'GarageArea','TotRmsAbvGrd','1stFlrSF','YearRemodAdd','GarageYrBlt'\u662f\u56e0\u4e3a\u542b\u6709\u66f4\u5f3a\u7684\u5f3a\u76f8\u5173\u9879\u3002","9ce1c514":"# \u7279\u5f81\u5206\u6790\uff1a\u5ba2\u89c2","127cd2af":">  \u7ec8\u4e8e\u5904\u7406\u5b8c\u7f3a\u5931\u503c\u4e86\u545c\u545c","3d31de06":"\u6839\u636e https:\/\/blog.csdn.net\/u010657489\/article\/details\/51952785?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.baidujs&dist_request_id=1328740.49434.16170913799818839&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.baidujs\n\nxgboost\u8c03\u53c2\u8c03\u4f18\u7684\u6b65\u9aa4\uff1a\n1. \u7b2c\u4e00\u6b65\uff1a\u786e\u5b9a\u5b66\u4e60\u901f\u7387\u548ctree_based \u53c2\u6570\u8c03\u4f18\u7684\u4f30\u8ba1\u5668\u6570\u76ee\n2. \u7b2c\u4e8c\u6b65\uff1amax_depth\u548cmin_weight\u53c2\u6570\u8c03\u4f18\n3. \u7b2c\u4e09\u6b65\uff1agamma\u53c2\u6570\u8c03\u4f18\n4. \u7b2c\u56db\u6b65\uff1a\u8c03\u6574subsample \u548c colsample_bytree \u53c2\u6570\n5. \u7b2c\u4e94\u6b65\uff1a\u6b63\u5219\u5316\u53c2\u6570\u8c03\u4f18\n6. \u7b2c\u516d\u6b65\uff1a\u964d\u4f4e\u5b66\u4e60\u901f\u7387","725c10b9":"\u5bf9\u4e8e\u5f52\u4e00\u5316\u5904\u7406\uff0c\u6211\u5728https:\/\/blog.csdn.net\/qq_43149373\/article\/details\/89408692?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.baidujs&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.baidujs \u4e2d\u770b\u5230\u5bf9\u4e8e\u5f52\u4e00\u5316\u5904\u7406\u7684\u8981\u6c42\u548c\u539f\u56e0\uff1a\n\n\u4ec0\u4e48\u60c5\u51b5\u4e0b(\u4e0d)\u9700\u8981\u5f52\u4e00\u5316\uff1f\n* \u9700\u8981\uff1a \u57fa\u4e8e\u53c2\u6570\u7684\u6a21\u578b\u6216\u57fa\u4e8e\u8ddd\u79bb\u7684\u6a21\u578b\uff0c\u90fd\u662f\u8981\u8fdb\u884c\u7279\u5f81\u7684\u5f52\u4e00\u5316\u3002\n* \u4e0d\u9700\u8981\uff1a\u57fa\u4e8e\u6811\u7684\u65b9\u6cd5\u662f\u4e0d\u9700\u8981\u8fdb\u884c\u7279\u5f81\u7684\u5f52\u4e00\u5316\uff0c\u4f8b\u5982\u968f\u673a\u68ee\u6797\uff0cbagging \u548c boosting\u7b49\u3002\n\n\u56e0\u4e3a\u672c\u8eab\u662f\u6253\u7b97\u505a\u968f\u673a\u68ee\u6797\u548cxgboost\u7684\u6bd4\u8f83\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u5f52\u4e00\u5316\u5904\u7406\uff0c\u4f46\u662f\u4f1a\u5f52\u4e00\u5316\u5bf9\u7ed3\u679c\u8fdb\u884c\u5bf9\u6bd4\u3002","7d4249a3":"GarageCars\u586b\u4e2d\u4f4d\u6570\uff0c TotalBsmtSF\u586b\u5e73\u5747\u6570","b03a586a":"\u5206\u6790\u2018Bsmt\u2019\u7c7b\n\nBsmtQual\uff1a\u8bc4\u4f30\u5730\u4e0b\u5ba4\u7684\u9ad8\u5ea6\n\nBsmtCond\uff1a\u8bc4\u4f30\u5730\u4e0b\u5ba4\u7684\u4e00\u822c\u72b6\u51b5\n\nBsmtExposure\uff1a\u6307\u82b1\u56ed\u6c34\u5e73\u7684\u5899\u58c1\uff08\uff1f\uff1f\uff1f\u5e94\u8be5\u662f\u662f\u6307\u5730\u4e0b\u5ba4\u91c7\u5149\uff09\n\nBsmtFinType1\uff1a\u5730\u4e0b\u5ba4\u5b8c\u6210\u533a\u57df\u7684\u7b49\u7ea7\n\nBsmtFinSF1\uff1a1\u578b\u6210\u54c1\u5e73\u65b9\u82f1\u5c3a\n\nBsmtFinType2\uff1a\u5730\u4e0b\u5ba4\u6210\u54c1\u533a\u57df\u7684\u7b49\u7ea7\uff08\u5982\u679c\u6709\u591a\u79cd\u7c7b\u578b\uff09\n\nBsmtFinSF2\uff1a2\u578b\u6210\u54c1\u5e73\u65b9\u82f1\u5c3a\n\nBsmtUnfSF\uff1a\u5730\u4e0b\u5ba4\u672a\u5b8c\u6210\u7684\u5e73\u65b9\u82f1\u5c3a\n\nTotalBsmtSF\uff1a\u5730\u4e0b\u5ba4\u9762\u79ef\u7684\u603b\u5e73\u65b9\u82f1\u5c3a\n\nBsmtFullBath\uff1a\u5730\u4e0b\u5ba4\u5b8c\u6574\u7684\u6d74\u5ba4\n\nBsmtHalfBath\uff1a\u5730\u4e0b\u5ba4\u534a\u6d74\u5ba4 \n\n\u4ee5\u4e0a\uff0c\u7f3a\u5931\u503c\u5e94\u8be5\u662f\u6ca1\u6709\u5730\u4e0b\u5ba4\u5373TotalBsmtSF=0\uff0c\u6240\u4ee5\u5168\u90e8\u586bnone\u5c31\u884c\u3002","986353e4":"# \u4e8c\u3001\u89c2\u5bdf\u4e3b\u8981\u7279\u5f81\u4e0e\u623f\u4ef7\u5173\u7cfb\n","44d68adb":"\u6ca1\u6709\u91cd\u590d\u503c\u3002","130893b8":"\u5bf9\u5269\u4e0b\u7684\u7f3a\u5931\u503c\u4e8c\u6b21\u5904\u7406\uff0c\u5e76\u8fdb\u884c\u6570\u503c\u5316\u548c\u7c7b\u522b\u5316\u5206\u7c7b\u3002\u4e0a\u9762\u7684\u8fd8\u53ef\u4ee5\u5206\u6210\u2018Garage\u2019\u7c7b\uff0c\u2018Bsmt\u2019\u7c7b\uff0c\u2018Mas\u2019\u7c7b\uff0c\u548c\u4e24\u4e2a\u5355\u72ec\u7684\u3002","0e95b9df":"\u623f\u4ef7\u4e3b\u8981\u96c6\u4e2d\u572810-25w\uff0c\u6574\u4f53\u662f\u504f\u6b63\u6001\u5206\u5e03\uff0c\u4e14\u6ca1\u6709\u7f3a\u5931\u503c","7c1148f8":"\u5148\u5206\u6790'LotFrontage'","234c864b":"\u5148\u5bf9\u91cd\u590d\u503c\u8fdb\u884c\u5904\u7406","8f0a2d88":"xgboost \u8c03\u53c2 https:\/\/blog.csdn.net\/qq_30868737\/article\/details\/108384751","64727b34":"\u504f\u5ea6\u4e3a 1.882876 \n\u5cf0\u5ea6\u4e3a 6.536282\n\n\u623f\u4ef7\u4e3b\u8981\u96c6\u4e2d\u572810-25w\uff0c\u6574\u4f53\u662f\u504f\u6b63\u6001\u5206\u5e03\uff0c\u4e14\u6ca1\u6709\u7f3a\u5931\u503c\u5bf9\u7f3a\u5931\u503c\u8fdb\u884c\u5904\u7406","3041ef89":"mas\u7c7b\u770b\u6837\u5b50\u548c\u51fa\u552e\u4ef7\u683c\u76f8\u5173\u6027\u4e0d\u9ad8\uff0c\u6240\u4ee5\u76f4\u63a5\u586bnone\u548c0\u4e86","05f485c2":"\u5148\u5904\u7406\u6570\u503c\u53d8\u91cf\uff0c\u518d\u5904\u7406\u7c7b\u522b\u53d8\u91cf"}}