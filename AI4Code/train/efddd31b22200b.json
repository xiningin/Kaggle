{"cell_type":{"2bb8ed0d":"code","0da9c46a":"code","65b875e4":"code","d88090d6":"code","e59a9713":"code","1339f5a3":"code","25ed73b4":"code","da87fb80":"code","5ba124c6":"code","b92f3679":"code","e8a6934f":"code","c385ec24":"code","074943ac":"code","48ad7b43":"code","795369d3":"code","fa79d55b":"code","15fe7b75":"code","04f9dd2a":"code","db913808":"code","22622897":"code","5a8b2687":"code","211a556e":"code","8ba548b0":"code","759ec9a7":"markdown","6e84cb39":"markdown","f9025f50":"markdown","8986251a":"markdown","5afac56b":"markdown"},"source":{"2bb8ed0d":"# LIBRARY IMPORTS\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","0da9c46a":"auto = pd.read_csv('..\/input\/autompg-dataset\/auto-mpg.csv')","65b875e4":"auto.head()","d88090d6":"# cyclinder --> categorical (but ordinal)\n# origin (country\/region) --> categorical\n# car name --> extract make and model\n# horsepower --> int\n# drop '?' from horsepower column or fill\n# model year --> categorical","e59a9713":"# origin categories\norigin_dict = {1:'USA',2:'Europe',3:'Asia'}\nauto['origin'] = auto['origin'].replace(origin_dict)\n# cylinder categories\nauto['cylinders'] = auto['cylinders'].astype(str) +' '+'cylinder'\n# car make and car model extraction\nauto['car manufacturer'] = auto['car name'].apply(lambda x : str.split(x)[0])\nauto['car model'] = auto['car name'].apply(lambda x : ' '.join(str.split(x)[1:]))\n# drop rows with horsepower '?'\nauto = auto[auto['horsepower'] != '?']\n# horsepower --> int\nauto['horsepower'] = auto['horsepower'].astype('int')\n# model year\nauto['model year'] = 'year'+' '+'19'+auto['model year'].astype('str')","1339f5a3":"auto.head()","25ed73b4":"sns.pairplot(auto);","da87fb80":"auto.corr()","5ba124c6":"# mpg distribution by origin\nbins = np.linspace(0, 60, 50)\nplt.hist(auto[auto['origin']=='USA']['mpg'], bins, alpha=0.5, label='USA')\nplt.hist(auto[auto['origin']=='Europe']['mpg'], bins, alpha=0.5, label='Europe')\nplt.hist(auto[auto['origin']=='Asia']['mpg'], bins, alpha=0.5, label='Asia')\nplt.legend(loc='upper right')\nplt.show()","b92f3679":"# mpg distribution by cylinders\nbins = np.linspace(0, 60, 50)\nplt.hist(auto[auto['cylinders']=='8 cylinder']['mpg'], bins, alpha=0.5, label='8 cylinder')\nplt.hist(auto[auto['cylinders']=='6 cylinder']['mpg'], bins, alpha=0.5, label='6 cylinder')\nplt.hist(auto[auto['cylinders']=='5 cylinder']['mpg'], bins, alpha=1, label='5 cylinder')\nplt.hist(auto[auto['cylinders']=='4 cylinder']['mpg'], bins, alpha=0.5, label='4 cylinder')\nplt.hist(auto[auto['cylinders']=='3 cylinder']['mpg'], bins, alpha=1, label='3 cylinder')\nplt.legend(loc='upper right')\nplt.show()","e8a6934f":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score,train_test_split, KFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\nlr = LinearRegression()\nscaler = StandardScaler()","c385ec24":"# only numerical columns\nnum_cols = ['displacement','horsepower','weight','acceleration']\ny = auto['mpg']\nX = auto[num_cols]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3,random_state=0)\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\nlr.fit(X_train_scaled,y_train)\nlr.score(X_train_scaled,y_train),lr.score(X_test_scaled,y_test)","074943ac":"# using some cat columns\ncols = ['cylinders', 'displacement', 'horsepower', 'weight',\n       'acceleration', 'origin','model year']\ny = auto['mpg']\nX = auto[cols]\nX_dummy = pd.get_dummies(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X_dummy,y,test_size = 0.3,random_state=0)\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\nlr.fit(X_train_scaled,y_train)\nlr.score(X_train_scaled,y_train),lr.score(X_test_scaled,y_test)","48ad7b43":"# using some cat columns (cylinders made ordinal)\ncylinders_dict = {\n    '8 cylinder':8, \n    '4 cylinder':4, \n    '6 cylinder':6, \n    '3 cylinder':3,\n    '5 cylinder':5\n}\nauto['cylinders_ord'] =  auto['cylinders'].replace(cylinders_dict)\n\ncols = ['cylinders_ord', 'displacement', 'horsepower', 'weight',\n       'acceleration', 'origin','model year']\ny = auto['mpg']\nX = auto[cols]\nX_dummy = pd.get_dummies(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X_dummy,y,test_size = 0.3,random_state=0)\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\nlr.fit(X_train_scaled,y_train)\nlr.score(X_train_scaled,y_train),lr.score(X_test_scaled,y_test)","795369d3":"# auto[auto['model year'] == 'year 1978']['mpg'].hist()","fa79d55b":"# using some cat columns (cylinders made ordinal) + bin model years\nmodel_year_bucket_dict = {\n    'year 1970':'early 70s', \n    'year 1971':'early 70s', \n    'year 1972':'early 70s', \n    'year 1973':'early 70s', \n    'year 1974':'mid 70s',\n    'year 1975':'mid 70s', \n    'year 1976':'mid 70s', \n    'year 1977':'mid 70s', \n    'year 1978':'late 70s', \n    'year 1979':'late 70s',\n    'year 1980':'early 80s', \n    'year 1981':'early 80s', \n    'year 1982':'early 80s'\n}\n\nauto['model_year_bucket'] = auto['model year'].replace(model_year_bucket_dict)\n\ncols = ['cylinders_ord', 'displacement', 'horsepower', 'weight',\n       'acceleration', 'origin','model_year_bucket']\ny = auto['mpg']\nX = auto[cols]\nX_dummy = pd.get_dummies(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X_dummy,y,test_size = 0.3,random_state=0)\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\nlr.fit(X_train_scaled,y_train)\nlr.score(X_train_scaled,y_train),lr.score(X_test_scaled,y_test)","15fe7b75":"kf = KFold(n_splits=5,shuffle=True, random_state=1234)","04f9dd2a":"y = auto['mpg']\nX = auto[cols]\nX_dummy = pd.get_dummies(X)\n\n\nfor train_index, test_index in kf.split(X):\n\n    \n    X_train = X_dummy.iloc[train_index,:]\n    X_test = X_dummy.iloc[test_index,:]\n    y_train = pd.DataFrame(y).iloc[train_index,:]\n    y_test = pd.DataFrame(y).iloc[test_index,:]\n    X_train_scaled = scaler.fit_transform(X_train)\n    X_test_scaled = scaler.transform(X_test)\n    lr.fit(X_train_scaled,y_train)\n    print('Train R2: ',lr.score(X_train_scaled,y_train),'Test R2: ',lr.score(X_test_scaled,y_test))\n    train_pred = lr.predict(X_train_scaled)\n    train_mse = mean_squared_error(y_train,train_pred)\n    test_pred = lr.predict(X_test_scaled)\n    test_mse = mean_squared_error(y_test,test_pred)\n    print('Train RMSE: ',np.sqrt(train_mse),'Test RMSE: ',np.sqrt(test_mse))","db913808":"from sklearn.linear_model import ElasticNetCV,ElasticNet\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline","22622897":"# define model\nmodel = ElasticNet()\n# define model evaluation method\ncv = RepeatedKFold(n_splits=5, n_repeats=1, random_state=1)\n# define grid\ngrid = dict()\ngrid['elasticNet__alpha'] = [1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 0.0, 1.0, 10.0, 100.0]\ngrid['elasticNet__l1_ratio'] = np.arange(0, 1, 0.01)\n\npipe = Pipeline([\n    ('scaler',scaler),\n    ('elasticNet',model)\n])\n\n# define search\nsearch = GridSearchCV(pipe, grid, scoring='r2', cv=cv, n_jobs=-1)\n# perform the search\nresults = search.fit(X=X_dummy, y=y)\n# summarize\nprint('MAE: %.3f' % results.best_score_)\nprint('Config: %s' % results.best_params_)","5a8b2687":"results.best_score_","211a556e":"results.best_params_","8ba548b0":"model = ElasticNet(alpha=0.01,l1_ratio=0.99)\nfor train_index, test_index in kf.split(X):\n\n    X_train = X_dummy.iloc[train_index,:]\n    X_test = X_dummy.iloc[test_index,:]\n    y_train = pd.DataFrame(y).iloc[train_index,:]\n    y_test = pd.DataFrame(y).iloc[test_index,:]\n    X_train_scaled = scaler.fit_transform(X_train)\n    X_test_scaled = scaler.transform(X_test)\n    model.fit(X_train_scaled,y_train)\n    print('Train R2: ',lr.score(X_train_scaled,y_train),'Test R2: ',lr.score(X_test_scaled,y_test))\n    train_pred = lr.predict(X_train_scaled)\n    train_mse = mean_squared_error(y_train,train_pred)\n    test_pred = lr.predict(X_test_scaled)\n    test_mse = mean_squared_error(y_test,test_pred)\n    print('Train RMSE: ',np.sqrt(train_mse),'Test RMSE: ',np.sqrt(test_mse))","759ec9a7":"**K fold CV**","6e84cb39":"https:\/\/www.kaggle.com\/uciml\/autompg-dataset","f9025f50":"**Linear Regression**","8986251a":"**Regularization: Elastic Net**","5afac56b":"**PairPlot**"}}