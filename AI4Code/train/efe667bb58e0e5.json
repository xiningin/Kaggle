{"cell_type":{"fc00c7c2":"code","7ae44fa5":"code","0bb53e24":"code","94b89b15":"code","d7ef8272":"code","3f7597e9":"code","7cc800f1":"code","b73811a4":"markdown"},"source":{"fc00c7c2":"import os\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","7ae44fa5":"df_oof = pd.read_csv('..\/input\/seti-baseline-oof\/oof_df.csv')","0bb53e24":"clf_thres = 0.5\n\ndf_oof_tp = df_oof.query('target == 1 & preds >= @clf_thres')\ndf_oof_fp = df_oof.query('target == 0 & preds >= @clf_thres')\ndf_oof_fn = df_oof.query('target == 1 & preds < @clf_thres')\n\ndisplay(df_oof_tp.shape)\ndisplay(df_oof_fp.shape)\ndisplay(df_oof_fn.shape)","94b89b15":"def show_cadence(filename: str, label: int, preds) -> None:\n    plt.figure(figsize=(16, 10))\n    arr = np.load(filename)\n    for i in range(6):\n        plt.subplot(6, 1, i + 1)\n        if i == 0:\n            plt.title(f\"ID: {os.path.basename(filename)} TARGET: {label} PRED: {round(preds, 5)}\", fontsize=18)\n        plt.imshow(arr[i].astype(float), interpolation='nearest', aspect='auto')\n        plt.text(5, 100, [\"ON\", \"OFF\"][i % 2], bbox={'facecolor': 'white'})\n        plt.xticks([])\n    plt.show()\n\n\ndef get_train_filename_by_id(_id: str) -> str:\n    return f\"..\/input\/seti-breakthrough-listen\/train\/{_id[0]}\/{_id}.npy\"\n\n\ndef show_cadence_from_df(df, n=1):\n    df_tmp = df.sample(n)\n    for ind, row in df_tmp.iterrows():\n        show_cadence(get_train_filename_by_id(row[\"id\"]), row[\"target\"], row['preds'])\n","d7ef8272":"show_cadence_from_df(df_oof_tp, n=3)","3f7597e9":"show_cadence_from_df(df_oof_fp, n=3)","7cc800f1":"show_cadence_from_df(df_oof_fn, n=3)","b73811a4":"Reference  \n[1] https:\/\/www.kaggle.com\/ihelon\/signal-search-exploratory-data-analysis  \n[2] https:\/\/www.kaggle.com\/yasufuminakama\/seti-nfnet-l0-starter-training?select=oof_df.csv  \n\nI've been using oof data from great notebook [2]"}}