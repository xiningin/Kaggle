{"cell_type":{"8d4ece1c":"code","7d34dc78":"code","7320e053":"code","8aa09ece":"code","3cd91fb4":"code","22f3aede":"code","820f88f0":"code","03e7f672":"code","a47384d8":"code","de8b8f95":"code","599df4cb":"code","c9a24946":"code","b87bf2c0":"code","e360a0a7":"code","7345e27c":"code","1d22bb0c":"code","fd252a24":"code","f539e0bc":"code","f8b9063d":"code","0be42cde":"code","9924ada9":"code","8866e802":"code","edbbb2f6":"code","adc4e000":"code","9166751b":"code","4c201c88":"code","2d2b0569":"code","2d2b4b5b":"code","b6d462fc":"code","a06d3483":"code","4c5cfba4":"code","7e169c42":"code","c843a612":"code","874a3701":"code","8a384d56":"code","6be021e9":"code","03cfcfcd":"code","8a6f79da":"code","c763b240":"code","f104ffea":"code","5bf54a84":"code","c27e00e6":"code","982e1240":"code","73b8d5c8":"code","e5d39a91":"code","fe606970":"code","bf59d373":"code","bdc516e4":"code","a8ceeb35":"code","d222b789":"code","a024ac73":"code","f7892c91":"code","d91bbfa6":"code","3af9d7fc":"code","c15a6144":"code","c8080e42":"code","a3d1f8e3":"code","a01547c0":"code","0a597b8f":"code","8050e893":"code","ce2037d2":"code","fa1d3430":"code","5fc28feb":"code","303fc8c6":"code","c3e3d212":"code","b36688b3":"code","34bc8897":"code","c127f0be":"code","57c80739":"code","05bfebe9":"markdown","0c7a07e8":"markdown","c658c910":"markdown","daf01218":"markdown","77006b7f":"markdown","9b5070c2":"markdown","4092a75a":"markdown","82997e6b":"markdown"},"source":{"8d4ece1c":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import make_blobs\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.manifold import TSNE\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.metrics import silhouette_score\nfrom yellowbrick.cluster import SilhouetteVisualizer\n\nimport re\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport os","7d34dc78":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","7320e053":"os.chdir('\/kaggle\/input\/customer-segmentation-tutorial-in-python\/')","8aa09ece":"os.listdir()","3cd91fb4":"df=pd.read_csv(\"Mall_Customers.csv\")","22f3aede":"df.head()","820f88f0":"df.describe()","03e7f672":"df.shape\ndf.dtypes","a47384d8":"df.rename({'CustomerID':'Customer_ID',\n           'Annual Income (k$)':'Annual_Income',\n           'Spending Score (1-100)':'Spending_Score'},\n           axis=1,\n           inplace=True)","de8b8f95":"df.columns","599df4cb":"df.drop(columns={'Customer_ID'}, inplace=True)","c9a24946":"df.shape\ndf.columns","b87bf2c0":"df.Gender.value_counts()","e360a0a7":"df.Gender[df.Gender == 'Male'] = 1\ndf.Gender[df.Gender == 'Female'] = 0\n# Male=1, Female=0\ndf.head()\ndf.describe()","7345e27c":"df[\"Age_cat\"] = pd.cut(\n                       df['Age'],\n                       bins = [0,35,50,80],\n                       labels= [\"y\", \"m\", \"s\"]\n                      )","1d22bb0c":"df[\"Annual_Income_cat\"] = pd.cut(\n                               df['Annual_Income'],\n                               bins = [0,40,80,150],\n                               labels= [\"l\", \"m\", \"h\"]\n                               )","fd252a24":"df[\"Spending_Score_cat\"] = pd.cut(\n                               df['Spending_Score'],\n                               bins = 3,\n                               labels= [\"Ls\", \"Ms\", \"Hs\"]\n                               )","f539e0bc":"df.sample(n=10)","f8b9063d":"columns = ['Gender', 'Age', 'Annual_Income', 'Spending_Score']\nfig = plt.figure(figsize = (10,10))\nfor i in range(len(columns)):\n    plt.subplot(2,2,i+1)\n    sns.distplot(df[columns[i]])","0be42cde":"fig = plt.figure(figsize = (10,8))\nsns.barplot(x = 'Gender',\n            y = 'Spending_Score',\n            hue = 'Age_cat',       # Age-cat wise plots\n            estimator = np.mean,\n            ci = 68,\n            data =df)\n","9924ada9":"sns.boxplot(x = 'Age',                 \n            y = 'Spending_Score',\n            data = df\n            )\n","8866e802":"sns.boxplot(x = 'Annual_Income',\n            y = 'Age', \n            data = df\n            )","edbbb2f6":"sns.jointplot(df.Age, df.Spending_Score,kind = \"kde\")","adc4e000":"sns.jointplot(df.Age, df.Annual_Income,kind=\"hex\")","9166751b":"sns.barplot(x = 'Annual_Income',\n            y = 'Spending_Score',\n            estimator = np.mean,\n            ci = 95,\n            data =df\n            )\n","4c201c88":"df.columns","2d2b0569":"grouped = df.groupby(['Gender', 'Age_cat'])\ndf_wh = grouped['Spending_Score'].sum().unstack()\ndf_wh\n\nsns.heatmap(df_wh)","2d2b4b5b":"grouped = df.groupby(['Gender', 'Age_cat'])\ndf_wh = grouped['Annual_Income'].sum().unstack()\ndf_wh\n\nsns.heatmap(df_wh)","b6d462fc":"grouped = df.groupby(['Age_cat','Spending_Score_cat'])\ndf_wq = grouped['Annual_Income'].sum().unstack()\nsns.heatmap(df_wq, cmap = plt.cm.Spectral)","a06d3483":"sns.catplot(x = 'Spending_Score',\n            y = 'Age', \n            row = 'Spending_Score_cat',\n            col = 'Age_cat' ,\n            kind = 'box',\n            estimator = np.sum,\n            data = df)","4c5cfba4":"sns.relplot(x = 'Annual_Income',\n            y = 'Spending_Score', \n            col = 'Age_cat' ,\n            kind = 'line',\n            estimator = np.sum,\n            data = df)","7e169c42":"df.dtypes\ndf.shape","c843a612":"y=df['Spending_Score'].values","874a3701":"num1=df.select_dtypes('int64').copy()","8a384d56":"num1.shape\nnum1.head()","6be021e9":"ss=StandardScaler()","03cfcfcd":"ss.fit(num1)","8a6f79da":"X=ss.transform(num1)","c763b240":"X[:5,]","f104ffea":"gm=GaussianMixture(n_components=3,\n                   n_init=10,\n                   max_iter=100)","5bf54a84":"gm.fit(X)","c27e00e6":"gm.means_","982e1240":"gm.converged_","73b8d5c8":"gm.n_iter_","e5d39a91":"gm.predict(X)","fe606970":"gm.weights_","bf59d373":"np.unique(gm.predict(X), return_counts = True)[1]\/len(X)","bdc516e4":"gm.sample()","a8ceeb35":"fig=plt.figure()","d222b789":"plt.scatter(X[:,0],X[:,1],c=gm.predict(X),s=2)","a024ac73":"plt.scatter(gm.means_[:, 0], gm.means_[:, 1],\n            marker='v',\n            s=5,               # marker size\n            linewidths=5,      # linewidth of marker edges\n            color='red'\n            )\nplt.show()","f7892c91":"densities=gm.score_samples(X)","d91bbfa6":"densities","3af9d7fc":"density_threshold=np.percentile(densities,4)","c15a6144":"density_threshold","c8080e42":"bic = []\naic = []","a3d1f8e3":"for i in range(8):\n    gm = GaussianMixture(\n                     n_components = i+1,\n                     n_init = 10,\n                     max_iter = 100)\n    gm.fit(X)\n    bic.append(gm.bic(X))\n    aic.append(gm.aic(X))","a01547c0":"fig = plt.figure()\nplt.plot([1,2,3,4,5,6,7,8], aic)\nplt.plot([1,2,3,4,5,6,7,8], bic)\nplt.show()","0a597b8f":"tsne = TSNE(n_components = 2)\ntsne_out = tsne.fit_transform(X)\nplt.scatter(tsne_out[:, 0], tsne_out[:, 1],\n            marker='x',\n            s=50,              # marker size\n            linewidths=5,      # linewidth of marker edges\n            c=gm.predict(X)   # Colour as per gmm\n            )","8050e893":"anomalies=X[densities<density_threshold]","ce2037d2":"anomalies","fa1d3430":"plt.scatter(X[:, 0], X[:, 1], c = gm.predict(X))","5fc28feb":"plt.scatter(anomalies[:, 0], anomalies[:, 1],\n            marker='x',\n            s=50,               # marker size\n            linewidths=5,      # linewidth of marker edges\n            color='red'\n            )\nplt.show()","303fc8c6":"unanomalies = X[densities >= density_threshold]","c3e3d212":"unanomalies.shape","b36688b3":"df_anomalies = pd.DataFrame(anomalies, columns = ['w','x', 'y'])\ndf_anomalies['z'] = 'anomalous'   # Create a IIIrd constant column\ndf_normal = pd.DataFrame(unanomalies, columns = ['w','x','y'])\ndf_normal['z'] = 'unanomalous'","34bc8897":"sns.distplot(df_anomalies['w'])\nsns.distplot(df_normal['w'])","c127f0be":"df = pd.concat([df_anomalies,df_normal])","57c80739":"sns.boxplot(x = df['z'], y = df['x'])\nsns.boxplot(x = df['z'], y = df['w'])","05bfebe9":"# Mall Customer Segmentation_Vineet","0c7a07e8":"### i)    Read dataset and rename columns appropriately\n### ii)   Drop customerid column and also transform Gender column to [0,1]\n### iii)  Use seaborn to understand each feature and relationships among features.\n### iv)  Use sklearn's StandardScaler() to scale dataset\n### v)   Perform clustering using Gaussian Mixture Modeling.\n### vi)  Use aic and bic measures to draw a scree plot and discover ideal number of clusters\n### viii) Lookup anomalous customers and try to understand their behavior.","c658c910":"## - Thanks...","daf01218":"## Mall Customer Segmentation using Gaussian Mixture Model","77006b7f":"### Perform Clustering using GaussianMixtureModeling","9b5070c2":"### Split Dataset ","4092a75a":"### Discover ideal number of Clusters - Using aic and bic measures and Scree plot","82997e6b":"### Anomalies Behaviour observation.."}}