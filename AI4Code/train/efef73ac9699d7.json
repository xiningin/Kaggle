{"cell_type":{"906f1af5":"code","8f12762a":"code","8f19cce1":"code","5aa6bc63":"code","62777a15":"code","93cc601c":"code","665244fe":"code","02f3b1c2":"code","9431f85d":"code","d1dcc025":"code","943d5b74":"code","03eeabe3":"code","30769a28":"code","c49f8601":"code","45846df1":"code","8734ee1c":"code","5d3cfc85":"code","8a40e052":"code","649a7b8b":"code","4a4cc328":"code","5747ddc0":"code","a80435ed":"code","31478de7":"code","f124b436":"code","9915d535":"code","f1af34d1":"code","70228139":"code","fdabc271":"code","61847867":"code","71541a95":"code","7c09f9ef":"code","a048ca8f":"markdown","06176c32":"markdown","a177dd4c":"markdown","ff25268d":"markdown","5db6b753":"markdown","dfe3e32d":"markdown","daffb4f5":"markdown","d4fef9d0":"markdown","c5829597":"markdown","a1841d7b":"markdown","0321c007":"markdown","80a3483b":"markdown","34d9350e":"markdown","5e079da1":"markdown"},"source":{"906f1af5":"import pandas as pd\nimport os\nimport shutil\nprint(os.listdir(\"..\/input\/Dataset\"))","8f12762a":"TRAIN_PATH = \"..\/input\/Dataset\/Train\"\nVAL_PATH = \"..\/input\/Dataset\/Val\"","8f19cce1":"import numpy as np\nimport matplotlib.pyplot as plt\nimport keras\nfrom keras.layers import *\nfrom keras.models import *\nfrom keras.preprocessing import image","5aa6bc63":"model = Sequential()\nmodel.add(Conv2D(32,kernel_size=(3,3),activation=\"relu\",input_shape=(224,224,3)))\n\nmodel.add(Conv2D(64,(3,3),activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64,(3,3),activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128,(3,3),activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128,(3,3),activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(64,activation=\"relu\"))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(1,activation=\"sigmoid\"))\n\nmodel.compile(loss=keras.losses.binary_crossentropy,optimizer = \"adam\",metrics=[\"accuracy\"])\n","62777a15":"model.summary()","93cc601c":"train_datagen = image.ImageDataGenerator(\n    rescale = 1.\/255,\n    shear_range = 0.2,\n    zoom_range = 0.2,\n    horizontal_flip = True,\n)\ntest_dataset = image.ImageDataGenerator(rescale = 1.\/255)\n","665244fe":"train_generator = train_datagen.flow_from_directory(\n    '..\/input\/Dataset\/Train',\n    target_size = (224,224),\n    batch_size = 32,\n    class_mode = 'binary'\n)","02f3b1c2":"train_generator.class_indices","9431f85d":"validation_generator = test_dataset.flow_from_directory(\n    '..\/input\/Dataset\/Val',\n    target_size = (224,224),\n    batch_size = 32,\n    class_mode = 'binary'\n)","d1dcc025":"hist = model.fit_generator(\n    train_generator,\n    steps_per_epoch = 8,\n    epochs = 10,\n    validation_data = validation_generator,\n    validation_steps = 2\n)","943d5b74":"model.save(\"Detection_Covid_19.h5\")","03eeabe3":"# model.evaluate_generator(train_generator)","30769a28":"# model.evaluate_generator(validation_generator)","c49f8601":"model = load_model(\"Detection_Covid_19.h5\")","45846df1":"import os","8734ee1c":"train_generator.class_indices","5d3cfc85":"y_actual = []\ny_test = []","8a40e052":"for i in os.listdir(\".\/Dataset\/Val\/Normal\"):\n  img = image.load_img(\".\/Dataset\/Val\/Normal\/\"+i,target_size=(224,224))\n  img = image.img_to_array(img)\n  img = np.expand_dims(img,axis=0)\n  p = model.predict_classes(img)\n  y_test.append(p[0,0])\n  y_actual.append(1)","649a7b8b":"for i in os.listdir(\".\/Dataset\/Val\/Covid\"):\n  img = image.load_img(\".\/Dataset\/Val\/Covid\/\"+i,target_size=(224,224))\n  img = image.img_to_array(img)\n  img = np.expand_dims(img,axis=0)\n  p = model.predict_classes(img)\n  y_test.append(p[0,0])\n  y_actual.append(0)","4a4cc328":"y_actual = np.array(y_actual)\ny_test = np.array(y_test)","5747ddc0":"from sklearn.metrics import confusion_matrix","a80435ed":"cm = confusion_matrix(y_actual,y_test)","31478de7":"import seaborn as sns","f124b436":"# sns.heatmap(cm,cmap = \"plasma\" , annot=True)","9915d535":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nclass_names = [\"Covid-19\",\"Normal\"]\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=\"plasma\"):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","f1af34d1":"plt.figure()\nplot_confusion_matrix(cm, classes=class_names,\n                      title='Confusion matrix for Covid-19 Detection',cmap=\"plasma\")\n","70228139":"\nhistory = hist\nprint(history.history.keys())","fdabc271":"\nplt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n","61847867":"\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","71541a95":"import numpy as np\n# from google.colab.patches import cv2_imshow\nimport cv2\nfrom keras.preprocessing import image\nxtest_image = image.load_img('Dataset\/Prediction\/ryct.2020200034.fig5-day7.jpeg', target_size = (224, 224))\nxtest_image = image.img_to_array(xtest_image)\nxtest_image = np.expand_dims(xtest_image, axis = 0)\nresults = model.predict_classes(xtest_image)\n# training_set.class_indices\nimggg = cv2.imread('Dataset\/Prediction\/ryct.2020200034.fig5-day7.jpeg')\nprint(\"This Xray Image is of positive covid-19 patient\")\nimggg = np.array(imggg)\nimggg = cv2.resize(imggg,(400,400))\nplt.imshow(imggg)\n# cv2_imshow(imggg)\n# print(results)\nif results[0][0] == 0:\n    prediction = 'Positive For Covid-19'\nelse:\n    prediction = 'Negative for Covid-19'\nprint(\"Prediction Of Our Model : \",prediction)","7c09f9ef":"import numpy as np\n# from google.colab.patches import cv2_imshow\nfrom keras.preprocessing import image\nxtest_image = image.load_img('Dataset\/Prediction\/NORMAL2-IM-0354-0001.jpeg', target_size = (224, 224))\nxtest_image = image.img_to_array(xtest_image)\nxtest_image = np.expand_dims(xtest_image, axis = 0)\nresults = model.predict_classes(xtest_image)\n# training_set.class_indices\n\nimggg = cv2.imread('Dataset\/Prediction\/NORMAL2-IM-0354-0001.jpeg')\nprint(\"This Xray Image is of Negative covid-19 patient\")\nimggg = np.array(imggg)\nimggg = cv2.resize(imggg,(400,400))\n\nplt.imshow(imggg)\n# cv2_imshow(imggg)\n# print(results)\nif results[0][0] == 0:\n    prediction = 'Positive For Covid-19'\nelse:\n    prediction = 'Negative for Covid-19'\nprint(\"Prediction Of Our Model : \",prediction)","a048ca8f":"# **Fit The Model**","06176c32":"# **Importing Required Libraries**","a177dd4c":"## *Loss is very less and accuracy is on point*","ff25268d":"## *Data Augmentation*","5db6b753":"## ***Confusion Matrix***","dfe3e32d":"# **Predictions from X-Ray Images**","daffb4f5":"# **Test Images**","d4fef9d0":"# **Train From Scratch**","c5829597":"# **Confusion Matrix**","a1841d7b":"# **Building Architecture**\n","0321c007":"# **Summarize history for loss**","80a3483b":"# **List all data in history**","34d9350e":"# **Summarize history for accuracy**","5e079da1":"# Load Datasets"}}