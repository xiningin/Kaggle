{"cell_type":{"f0048808":"code","68256a38":"code","95e1280a":"code","7f632f49":"code","7b4143d5":"code","5a3018c0":"code","496d087a":"code","8a98730b":"code","f1a4e427":"code","7657a276":"code","1cf5bd98":"code","d86f27e7":"code","a2100639":"code","8797054a":"code","87786887":"code","638c0b6a":"code","eff8affa":"code","04c88852":"markdown","d1811c9b":"markdown","0e714ddf":"markdown"},"source":{"f0048808":"# Load the extension and start TensorBoard\n\"\"\"!kill 30\n%load_ext tensorboard\n%tensorboard --logdir logs\"\"\"","68256a38":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n            os.path.join(dirname, filename)      \n\n# Any results you write to the current directory are saved as output.","95e1280a":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport cv2\n\nDATADIR='\/kaggle\/input\/cats-and-dogs-sentdex-tutorial\/kagglecatsanddogs_3367a\/PetImages'\nCATEGORIES=['Cat','Dog']\n\nfor category in CATEGORIES:\n    path=os.path.join(DATADIR, category)\n    for img in os.listdir(path):\n        img_array=cv2.imread(os.path.join(path,img), cv2.IMREAD_GRAYSCALE)\n        plt.imshow(img_array, cmap='gray')\n        plt.show()\n        break\n    break","7f632f49":"print(img_array.shape)","7b4143d5":"IMG_SIZE=50\nnew_array=cv2.resize(img_array,(IMG_SIZE,IMG_SIZE))\nplt.imshow(new_array, cmap='gray')\nplt.show()","5a3018c0":"training_data=[]\ndef create_training_data():\n    for category in CATEGORIES:\n        path=os.path.join(DATADIR, category)\n        class_num=CATEGORIES.index(category)\n        for img in os.listdir(path):\n            try:\n                img_array=cv2.imread(os.path.join(path,img), cv2.IMREAD_GRAYSCALE)\n                new_array=cv2.resize(img_array,(IMG_SIZE,IMG_SIZE))\n                training_data.append([new_array,class_num])\n            except Exception as e:\n                pass\ncreate_training_data()            ","496d087a":"print(len(training_data))","8a98730b":"import random\nrandom.shuffle(training_data)","f1a4e427":"for sample in training_data:\n    print(sample[1])","7657a276":"X=[]\ny=[]\n\nfor categories, label in training_data:\n    X.append(categories)\n    y.append(label)\nX= np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 1)","1cf5bd98":"print(X.shape)","d86f27e7":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Activation, MaxPooling2D, Dense, Flatten","a2100639":"X=X\/255.0","8797054a":"print(X.shape)","87786887":"model=Sequential()\nmodel.add(Conv2D(64, (3,3), input_shape=X.shape[1:]))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(64, (3,3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\n\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\nmodel.compile(optimizer='adam',\n             loss='binary_crossentropy',\n             metrics=['accuracy'])","638c0b6a":"from tensorflow.keras.callbacks import TensorBoard\nimport datetime\nimport time\n#Name=\"cats-vs-dogs-cnn-{}\".format(int(time.time()))\n#tensorboard=TensorBoard(log_dir='logs\/{}'.format(Name))\nlog_dir = \"logs\/fit\/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n#tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n","eff8affa":"y=np.array(y)\nmodel.fit(X,y, batch_size=32, epochs=1, validation_split=0.1)","04c88852":"# Building a Simple CNN","d1811c9b":"# Import Image Data and Convert to Features and Labels","0e714ddf":"# Using TensorBoard to Plot the Curve"}}