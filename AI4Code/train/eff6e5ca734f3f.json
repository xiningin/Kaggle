{"cell_type":{"ea28746b":"code","aeadb218":"code","ddfde0c3":"code","0821b7f5":"code","f7c91727":"code","1d879cc3":"code","facf0ce5":"code","eeab7778":"code","6724f5e7":"code","1103ec23":"code","93a17e01":"code","76556f43":"code","369fae22":"code","135406ec":"code","dcbd9254":"code","1df7e389":"code","0148395e":"code","235b0a45":"code","ec59d408":"code","24fca993":"code","f0b28c8d":"code","4346a570":"code","a481160c":"code","ab919f2e":"code","f34410fd":"code","7262ca1c":"code","7efc3ec9":"code","5197d478":"code","cb43ecb0":"code","53aa5f4d":"code","28bd36c2":"code","70dd75f2":"markdown","df531061":"markdown","1a7cef13":"markdown","0ad6184a":"markdown","08025451":"markdown","904bc95a":"markdown","f0461a12":"markdown"},"source":{"ea28746b":"import warnings\nwarnings.filterwarnings('ignore')\n\n# Modules for data manipulation\nimport numpy as np\nimport pandas as pd\nimport re\n\n# Modules for visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\n# Tools for preprocessing input data\nfrom bs4 import BeautifulSoup\nfrom nltk import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\n\n# Tools for creating ngrams and vectorizing input data\nfrom gensim.models import Word2Vec, Phrases\n\n# Tools for building a model\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout, Bidirectional\nfrom keras.layers.embeddings import Embedding\nfrom keras.preprocessing.sequence import pad_sequences\n\n# Tools for assessing the quality of model prediction\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\nimport os\nfor file in os.listdir(\"..\/input\"):\n    print(file)","aeadb218":"SMALL_SIZE = 12\nMEDIUM_SIZE = 14\nBIG_SIZE = 16\nLARGE_SIZE = 20\n\nparams = {\n    'figure.figsize': (16, 8),\n    'font.size': SMALL_SIZE,\n    'xtick.labelsize': MEDIUM_SIZE,\n    'ytick.labelsize': MEDIUM_SIZE,\n    'legend.fontsize': BIG_SIZE,\n    'figure.titlesize': LARGE_SIZE,\n    'axes.titlesize': MEDIUM_SIZE,\n    'axes.labelsize': BIG_SIZE\n}\nplt.rcParams.update(params)","ddfde0c3":"usecols = ['sentiment','review']\ntrain_data = pd.read_csv(\n    filepath_or_buffer='..\/input\/word2vec-nlp-tutorial\/labeledTrainData.tsv',\n    usecols=usecols, sep='\\t')\nadditional_data = pd.read_csv(\n    filepath_or_buffer='..\/input\/imdb-review-dataset\/imdb_master_filtered.csv',\n    sep='\\t')[usecols]\nunlabeled_data = pd.read_csv(\n    filepath_or_buffer=\"..\/input\/word2vec-nlp-tutorial\/unlabeledTrainData.tsv\", \n    error_bad_lines=False,\n    sep='\\t')\nsubmission_data = pd.read_csv(\n    filepath_or_buffer=\"..\/input\/word2vec-nlp-tutorial\/testData.tsv\",\n    sep='\\t')","0821b7f5":"datasets = [train_data, additional_data, submission_data, unlabeled_data]\ntitles = ['Train data', 'Additional data', 'Unlabeled train data', 'Submission data']\nfor dataset, title in zip(datasets,titles):\n    print(title)\n    dataset.info()\n    display(dataset.head())\n","f7c91727":"all_reviews = np.array([], dtype=str)\nfor dataset in datasets:\n    all_reviews = np.concatenate((all_reviews, dataset.review), axis=0)\nprint('Total number of reviews:', len(all_reviews))","1d879cc3":"train_data = pd.concat((train_data, additional_data[additional_data.sentiment != -1]),\n                       axis=0, ignore_index=True)\ntrain_data.info()","facf0ce5":"plt.hist(train_data[train_data.sentiment == 1].sentiment,\n         bins=2, color='green', label='Positive')\nplt.hist(train_data[train_data.sentiment == 0].sentiment,\n         bins=2, color='blue', label='Negative')\nplt.title('Classes distribution in the train data', fontsize=LARGE_SIZE)\nplt.xticks([])\nplt.xlim(-0.5, 2)\nplt.legend()\nplt.show()","eeab7778":"def clean_review(raw_review: str) -> str:\n    # 1. Remove HTML\n    review_text = BeautifulSoup(raw_review, \"lxml\").get_text()\n    # 2. Remove non-letters\n    letters_only = REPLACE_WITH_SPACE.sub(\" \", review_text)\n    # 3. Convert to lower case\n    lowercase_letters = letters_only.lower()\n    return lowercase_letters\n\n\ndef lemmatize(tokens: list) -> list:\n    # 1. Lemmatize\n    tokens = list(map(lemmatizer.lemmatize, tokens))\n    lemmatized_tokens = list(map(lambda x: lemmatizer.lemmatize(x, \"v\"), tokens))\n    # 2. Remove stop words\n    meaningful_words = list(filter(lambda x: not x in stop_words, lemmatized_tokens))\n    return meaningful_words\n\n\ndef preprocess(review: str, total: int, show_progress: bool = True) -> list:\n    if show_progress:\n        global counter\n        counter += 1\n        print('Processing... %6i\/%6i'% (counter, total), end='\\r')\n    # 1. Clean text\n    review = clean_review(review)\n    # 2. Split into individual words\n    tokens = word_tokenize(review)\n    # 3. Lemmatize\n    lemmas = lemmatize(tokens)\n    # 4. Join the words back into one string separated by space,\n    # and return the result.\n    return lemmas","6724f5e7":"counter = 0\nREPLACE_WITH_SPACE = re.compile(r'[^A-Za-z\\s]')\nstop_words = set(stopwords.words(\"english\")) \nlemmatizer = WordNetLemmatizer()","1103ec23":"all_reviews = np.array(list(map(lambda x: preprocess(x, len(all_reviews)), all_reviews)))\ncounter = 0","93a17e01":"X_train_data = all_reviews[:train_data.shape[0]]\nY_train_data = train_data.sentiment.values\nX_submission = all_reviews[125000: 150000]","76556f43":"train_data['review_lenght'] = np.array(list(map(len, X_train_data)))\nmedian = train_data['review_lenght'].median()\nmean = train_data['review_lenght'].mean()\nmode = train_data['review_lenght'].mode()[0]","369fae22":"fig, ax = plt.subplots()\nsb.distplot(train_data['review_lenght'], bins=train_data['review_lenght'].max(),\n            hist_kws={\"alpha\": 0.9, \"color\": \"blue\"}, ax=ax,\n            kde_kws={\"color\": \"black\", 'linewidth': 3})\nax.set_xlim(left=0, right=np.percentile(train_data['review_lenght'], 95))\nax.set_xlabel('Words in review')\nymax = 0.014\nplt.ylim(0, ymax)\nax.plot([mode, mode], [0, ymax], '--', label=f'mode = {mode:.2f}', linewidth=4)\nax.plot([mean, mean], [0, ymax], '--', label=f'mean = {mean:.2f}', linewidth=4)\nax.plot([median, median], [0, ymax], '--',\n        label=f'median = {median:.2f}', linewidth=4)\nax.set_title('Words per review distribution', fontsize=20)\nplt.legend()\nplt.show()","135406ec":"%%time\nbigrams = Phrases(sentences=all_reviews)","dcbd9254":"%%time\ntrigrams = Phrases(sentences=bigrams[all_reviews])","1df7e389":"print(bigrams['space station near the solar system'.split()])","0148395e":"%%time\nembedding_vector_size = 256\ntrigrams_model = Word2Vec(\n    sentences = trigrams[bigrams[all_reviews]],\n    size = embedding_vector_size,\n    min_count=3, window=5, workers=4)","235b0a45":"print(\"Vocabulary size:\", len(trigrams_model.wv.vocab))","ec59d408":"trigrams_model.wv.most_similar('galaxy')","24fca993":"trigrams_model.wv.doesnt_match(['galaxy', 'starship', 'planet', 'dog'])","f0b28c8d":"%%time\ndef vectorize_data(data, vocab: dict) -> list:\n    print('Vectorize sentences...', end='\\r')\n    keys = list(vocab.keys())\n    filter_unknown = lambda word: vocab.get(word, None) is not None\n    encode = lambda review: list(map(keys.index, filter(filter_unknown, review)))\n    vectorized = list(map(encode, data))\n    print('Vectorize sentences... (done)')\n    return vectorized\n\nprint('Convert sentences to sentences with ngrams...', end='\\r')\nX_data = trigrams[bigrams[X_train_data]]\nprint('Convert sentences to sentences with ngrams... (done)')\ninput_length = 150\nX_pad = pad_sequences(\n    sequences=vectorize_data(X_data, vocab=trigrams_model.wv.vocab),\n    maxlen=input_length,\n    padding='post')\nprint('Transform sentences to sequences... (done)')","4346a570":"X_train, X_test, y_train, y_test = train_test_split(\n    X_pad,\n    Y_train_data,\n    test_size=0.05,\n    shuffle=True,\n    random_state=42)","a481160c":"def build_model(embedding_matrix: np.ndarray, input_length: int):\n    model = Sequential()\n    model.add(Embedding(\n        input_dim = embedding_matrix.shape[0],\n        output_dim = embedding_matrix.shape[1], \n        input_length = input_length,\n        weights = [embedding_matrix],\n        trainable=False))\n    model.add(Bidirectional(LSTM(128, recurrent_dropout=0.1)))\n    model.add(Dropout(0.25))\n    model.add(Dense(64))\n    model.add(Dropout(0.3))\n    model.add(Dense(1, activation='sigmoid'))\n    model.summary()\n    return model\n\nmodel = build_model(\n    embedding_matrix=trigrams_model.wv.vectors,\n    input_length=input_length)","ab919f2e":"model.compile(\n    loss=\"binary_crossentropy\",\n    optimizer='adam',\n    metrics=['accuracy'])\n\nhistory = model.fit(\n    x=X_train,\n    y=y_train,\n    validation_data=(X_test, y_test),\n    batch_size=100,\n    epochs=20)","f34410fd":"def plot_confusion_matrix(y_true, y_pred, ax, class_names, vmax=None,\n                          normed=True, title='Confusion matrix'):\n    matrix = confusion_matrix(y_true,y_pred)\n    if normed:\n        matrix = matrix.astype('float') \/ matrix.sum(axis=1)[:, np.newaxis]\n    sb.heatmap(matrix, vmax=vmax, annot=True, square=True, ax=ax,\n               cmap=plt.cm.Blues_r, cbar=False, linecolor='black',\n               linewidths=1, xticklabels=class_names)\n    ax.set_title(title, y=1.20, fontsize=16)\n    #ax.set_ylabel('True labels', fontsize=12)\n    ax.set_xlabel('Predicted labels', y=1.10, fontsize=12)\n    ax.set_yticklabels(class_names, rotation=0)","7262ca1c":"%%time\ny_train_pred = model.predict_classes(X_train)\ny_test_pred = model.predict_classes(X_test)","7efc3ec9":"fig, (axis1, axis2) = plt.subplots(nrows=1, ncols=2)\nplot_confusion_matrix(y_train, y_train_pred, ax=axis1,\n                      title='Confusion matrix (train data)',\n                      class_names=['Positive', 'Negative'])\nplot_confusion_matrix(y_test, y_test_pred, ax=axis2,\n                      title='Confusion matrix (test data)',\n                      class_names=['Positive', 'Negative'])","5197d478":"fig, (axis1, axis2) = plt.subplots(nrows=1, ncols=2, figsize=(16,6))\n\n# summarize history for accuracy\naxis1.plot(history.history['acc'], label='Train', linewidth=3)\naxis1.plot(history.history['val_acc'], label='Validation', linewidth=3)\naxis1.set_title('Model accuracy', fontsize=16)\naxis1.set_ylabel('accuracy')\naxis1.set_xlabel('epoch')\naxis1.legend(loc='upper left')\n\n# summarize history for loss\naxis2.plot(history.history['loss'], label='Train', linewidth=3)\naxis2.plot(history.history['val_loss'], label='Validation', linewidth=3)\naxis2.set_title('Model loss', fontsize=16)\naxis2.set_ylabel('loss')\naxis2.set_xlabel('epoch')\naxis2.legend(loc='upper right')\nplt.show()","cb43ecb0":"print('Convert sentences to sentences with ngrams...', end='\\r')\nX_submit = trigrams[bigrams[X_submission]]\nprint('Convert sentences to sentences with ngrams... (done)')\nX_sub = pad_sequences(\n    sequences=vectorize_data(X_submit, vocab=trigrams_model.wv.vocab),\n    maxlen=input_length,\n    padding='post')\nprint('Transform sentences to sequences... (done)')","53aa5f4d":"%%time\nY_sub_pred = model.predict_classes(X_sub)","28bd36c2":"def submit(predictions):\n    submission_data['sentiment'] = predictions\n    submission_data.to_csv('submission.csv', index=False, columns=['id','sentiment'])\n\nsubmit(Y_sub_pred)","70dd75f2":"## Check class balance","df531061":"And now we can use gensim's word2vec model to build a word embedding. Also we can use the word2vec model to define most similar words, calculate diffence between the words, etc.","1a7cef13":"### Set some matplotlib configs for visualization","0ad6184a":"## Make submission","08025451":"## Import data\nImporting the existing datasets and also importing the IMDB dataset from another source. It helps us to increase maximal accuracy of our model from ~87% to 90+%.","904bc95a":"## Import modules","f0461a12":"Now we can use gensim's phrases to find bigrams or trigrams"}}