{"cell_type":{"2bcb9c45":"code","6b2a76d3":"code","5bea23a8":"code","ece7a82b":"code","fff5c675":"code","911a82a7":"code","7f8df2cf":"code","52ee01f0":"code","3e715783":"code","a48f9a9a":"code","9c288f09":"code","d1cb3bf1":"code","eb471d9e":"code","b4b7b5dc":"code","7faac745":"code","4c7a4572":"code","79503f1d":"markdown"},"source":{"2bcb9c45":"import numpy as np\nimport pandas as pd\nimport pickle as pkl\nimport os\nimport random\nimport tensorflow as tf\nimport tensorflow.keras\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.optimizers import RMSprop,SGD,Adam\nfrom tensorflow.keras.utils import to_categorical","6b2a76d3":"train_x = pkl.load(open(\"..\/input\/heberhackathon\/images_array_train.pkl\",\"rb\"))\ntrain_y = pkl.load(open(\"..\/input\/heberhackathon\/target_train.pkl\",\"rb\"))\ntest_x= pkl.load(open(\"..\/input\/heberhackathon\/images_array_test.pkl\",\"rb\"))","5bea23a8":"train_x = np.array(train_x)\nprint(\"Shapes\")\nprint(\"train_x:\", train_x.shape)\ntest_x = np.array(test_x)\nprint(\"test_x:\", test_x.shape)\ntrain_y = np.array(train_y)\nprint(\"train_y:\", train_y.shape)","ece7a82b":"plt.matshow(train_x[266])","fff5c675":"print(train_y[266])","911a82a7":"num_classes = 10\ntrain_y = to_categorical(train_y, num_classes)","7f8df2cf":"plt.figure(figsize=(15,10))\nfor i in range(5):\n  plt.subplot(3,5,i+1)\n  plt.xticks([])\n  plt.yticks([])\n  rand_no = random.randint(0,len(train_x))     \n  plt.imshow(train_x[rand_no])\n  plt.xlabel(np.argmax(train_y[rand_no]))","52ee01f0":"train_x = train_x.astype('float32')\ntest_x = test_x.astype('float32')\ntrain_x \/= 255\ntest_x \/= 255","3e715783":"Input_Shape = (28,28,3)\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters=32, kernel_size=(3,3), activation='relu', padding='same', input_shape=Input_Shape))\nmodel.add(MaxPooling2D(pool_size=(2,2),padding='same' ))\nmodel.add(Conv2D(filters=32, kernel_size=(3,3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2,2),padding='same' ))\nmodel.add(MaxPooling2D(pool_size=(2,2),padding='same' ))\nmodel.add(Flatten())\nmodel.add(Dropout(0.75))\nmodel.add(Dense(2056, activation='relu'))\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dropout(0.75))\nmodel.add(Dense(10, activation='softmax'))\nmodel.summary()","a48f9a9a":"model.compile(optimizer='SGD',loss='categorical_crossentropy',metrics=['accuracy'])\nhistory = model.fit(train_x, train_y ,epochs=200,batch_size=32,verbose=1)","9c288f09":"print('Train accuracy:',history.history['accuracy'][49])","d1cb3bf1":"score = model.evaluate(test_x)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","eb471d9e":"predict = model.predict(test_x)\npredict","b4b7b5dc":"predict.shape","7faac745":"class_data = [np.argmax(element) for element in predict]","4c7a4572":"id=[item for item in range(0, 3000)]\n\nsubmit = pd.DataFrame({ 'ID':id,'Class':class_data})\nsubmit.to_csv('submission.csv', index=False)","79503f1d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session"}}