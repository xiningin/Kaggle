{"cell_type":{"b4e028fc":"code","554ed31c":"code","8b4a2e28":"code","02782234":"code","8fe88db9":"code","23142724":"code","7d97c63d":"code","cb2cf091":"code","9f6bb527":"code","122b328b":"code","3dfdcfe1":"code","24e6ce2c":"code","66a0d0bc":"code","b1dafa6e":"code","6ca18572":"code","22447340":"code","03d056bf":"code","a3f36c8b":"code","0dac2198":"code","5750dd24":"code","667ef590":"code","864298ba":"code","3c48a949":"code","5fe095e1":"code","5903bb07":"code","fb7a18cf":"code","a399538c":"code","e0a2fb94":"code","422ef872":"markdown","f845a82f":"markdown","3440474d":"markdown","ded78400":"markdown","9c5ec2eb":"markdown","f34cc04c":"markdown","a178ab7e":"markdown","3b53bcaf":"markdown","244d8934":"markdown","36c3372a":"markdown"},"source":{"b4e028fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","554ed31c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","8b4a2e28":"df = pd.read_csv('\/kaggle\/input\/amazon-fine-food-reviews\/Reviews.csv')","02782234":"df.head()","8fe88db9":"df.shape","23142724":"df.info()","7d97c63d":"df.Summary.head()","cb2cf091":"df.Text.head()","9f6bb527":"! pip install textblob","122b328b":"from nltk.corpus import stopwords \nfrom textblob import TextBlob\nfrom textblob import Word\n# Lower casing and removing punctuations\n\ndf['Text'] = df['Text'].apply(lambda x: \" \".join(x.lower() for\nx in x.split()))\n","3dfdcfe1":"df['Text'] = df['Text'].str.replace('[^\\w\\s]', \"\")\ndf.Text.head(5)","24e6ce2c":"#remove the stopwords\nstop = stopwords.words('english')\ndf['Text'] = df['Text'].apply(lambda x: \" \".join(x for x in\nx.split() if x not in stop))\ndf.Text.head()","66a0d0bc":"#Lemmatization\ndf['Text'] = df['Text'].apply(lambda x: \" \".join([Word(word).\nlemmatize() for word in x.split()]))\ndf.Text.head()","b1dafa6e":"! pip install wordcloud","6ca18572":"from wordcloud import WordCloud\nfrom wordcloud import STOPWORDS","22447340":"# Create a new data frame \"reviews\" to perform exploratory data analysis upon that\nreviews = df\n# Dropping null values\nreviews.dropna(inplace=True)","03d056bf":"score_1 = reviews[reviews['Score'] == 1]\nscore_2 = reviews[reviews['Score'] == 2]\nscore_3 = reviews[reviews['Score'] == 3]\nscore_4 = reviews[reviews['Score'] == 4]\nscore_5 = reviews[reviews['Score'] == 5]","a3f36c8b":"reviews_sample = pd.concat([score_1,score_2,score_3,score_4,score_5],axis=0)\nreviews_sample.reset_index(drop=True,inplace=True)","0dac2198":"#Wordcloud function's input needs to be a single string of text.\n# concatenating all Summaries into a single string.\n# similarly you can build for Text column\nreviews_str = reviews_sample.Summary.str.cat()\nwordcloud = WordCloud(background_color='white').generate(reviews_str)\nplt.figure(figsize=(10,10))\nplt.imshow(wordcloud,interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","5750dd24":"# Now let's split the data into Negative (Score is 1 or 2) and Positive (4 or #5) Reviews.\nnegative_reviews = reviews_sample[reviews_sample['Score'].isin([1,2]) ]\npositive_reviews = reviews_sample[reviews_sample['Score'].isin([4,5]) ]\n# Transform to single string\nnegative_reviews_str = negative_reviews.Summary.str.cat()\npositive_reviews_str = positive_reviews.Summary.str.cat()\n","667ef590":"wordcloud_negative = WordCloud(background_color='white').generate(negative_reviews_str)\nwordcloud_positive = WordCloud(background_color='black').generate(positive_reviews_str)\n# Plot\nfig = plt.figure(figsize=(10,10))\nax1 = fig.add_subplot(211)\nax1.imshow(wordcloud_negative,interpolation='bilinear')\nax1.axis(\"off\")\nax1.set_title('Reviews with Negative Scores',fontsize=20)","864298ba":"fig = plt.figure(figsize=(10,10))\nax2 = fig.add_subplot(212)\nax2.imshow(wordcloud_positive,interpolation='bilinear')\nax2.axis(\"off\")\nax2.set_title('Reviews with Positive Scores',fontsize=20)\nplt.show()","3c48a949":"!pip install vaderSentiment","5fe095e1":"import re\nimport os\nimport sys\nimport ast\nplt.style.use('fivethirtyeight')\n# Function for getting the sentiment\ncp = sns.color_palette()\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\nanalyzer = SentimentIntensityAnalyzer()","5903bb07":"# Generating sentiment for all the sentence present in the dataset\nemptyline=[]\nfor row in df['Text']:\n    \n    vs=analyzer.polarity_scores(row)\n    emptyline.append(vs)\n# Creating new dataframe with sentiments\ndf_sentiments=pd.DataFrame(emptyline)\ndf_sentiments.head()","fb7a18cf":"# Merging the sentiments back to reviews dataframe\ndf_c = pd.concat([df.reset_index(drop=True), df_sentiments], axis=1)\ndf_c.head(3)","a399538c":"# Convert scores into positive and negetive sentiments using some threshold\ndf_c['Sentiment'] = np.where(df_c['compound'] >= 0 , 'Positive','Negative')\ndf_c.head(5)","e0a2fb94":"result=df_c['Sentiment'].value_counts()\nresult.plot(kind='bar', rot=0, color=['plum','cyan']);","422ef872":"### Load Basic Libraries","f845a82f":"For Text Preprocessing we will use TextBlob Library. \nIn Text Preprocessing we remove stop words, punctuations, convert into lower cases, lemmatize,spell check \n\nTextBlob is built upon NLTK and provides an easy to use interface to the NLTK library.\nvarious tasks can be performed like part-of-speech tagging, noun phrase extraction, sentiment analysis, \nclassification, translation, and more.","3440474d":"### Explore the Data","ded78400":"# WORDCLOUD","9c5ec2eb":"#  Text Preprocessing","f34cc04c":"Make the Wordcloud for Summary and for that a little more analysis and exploration is \nrequired.","a178ab7e":"# Results","3b53bcaf":"##### Let us check the summary and Text column","244d8934":"Sentiment Analysis: Pretrained model takes the input from the text\ndescription and outputs the sentiment score ranging from -1 to +1 for each\nsentence\n\nVADER (Valence Aware Dictionary and sEntiment Reasoner) is\na lexicon and rule-based sentiment analysis tool that is specifically \nattuned to sentiments expressed in social media. VADER uses a combination of \nA sentiment lexicon is a list of lexical features (e.g., words) which are generally\nlabeled according to their semantic orientation as either positive or negative. \nVADER not only tells about the Positive and Negative score\nbut also tells us about how positive or negative a sentiment is.","36c3372a":"A Wordcloud (or Tag cloud) is a visual representation of text data.\nIt displays a list of words, the importance of each being shown with font size or colorm. \nThis format is useful for quickly perceiving the most prominent term"}}