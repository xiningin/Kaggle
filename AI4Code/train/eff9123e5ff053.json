{"cell_type":{"0f953a34":"code","b906ec9e":"code","a182b93e":"code","50d8456a":"code","f90fa040":"code","d7d4e21f":"code","d7a4f3f0":"code","540753dc":"code","7d3b9bd2":"code","1226b43c":"code","a4e6c430":"code","b45151d6":"code","e13e3b49":"code","2320a0c3":"code","66341f0d":"code","0ce866b3":"code","569a6b21":"code","349128db":"code","2a2d9d51":"code","eceb96fe":"code","2cf7b19f":"code","98c7f864":"code","dc47b5d9":"code","11cf368f":"code","e4b01855":"code","dad199af":"code","55ec2ddb":"code","baaf421b":"code","d11811d4":"code","25dec526":"code","e9d875cd":"code","ae3c1162":"code","fe2eead2":"code","d4099164":"code","24195a13":"code","14e51873":"code","8a10b025":"code","4a03274f":"code","a552562d":"code","be651cb7":"code","1fa6ce2d":"code","f8b909d2":"code","562dee26":"code","e3299b40":"code","d08f4b3c":"code","b4ddea10":"markdown","30b91fb9":"markdown","78a9953a":"markdown","cf770f6b":"markdown","cfd99d06":"markdown","3a6005d8":"markdown","d4296ffa":"markdown","eedd7a7e":"markdown","e9dd597c":"markdown","ba493dd4":"markdown","996520c8":"markdown","8da4b7ee":"markdown","566f976f":"markdown","01b8403a":"markdown","f9045b49":"markdown"},"source":{"0f953a34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nimport warnings\nwarnings.filterwarnings('ignore')","b906ec9e":"test=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\nsample=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nprint(train.shape)\nprint(test.shape)\nprint(sample.shape)","a182b93e":"train['RoofStyle']","50d8456a":"train.info()","f90fa040":"train.drop(columns=['Id','SaleCondition','SaleType','MiscFeature','Fence','PoolQC','PavedDrive','GarageCond','GarageQual','GarageFinish','GarageType','FireplaceQu','Functional','KitchenQual','Electrical','CentralAir','HeatingQC','Heating','BsmtFinType2','BsmtFinType1','BsmtExposure','BsmtCond','BsmtQual','Foundation','ExterCond','ExterQual','MasVnrType','Exterior2nd','Exterior1st','RoofMatl','RoofStyle','HouseStyle','BldgType','Condition2','Condition1','Neighborhood','LandSlope','LotConfig','Utilities','LandContour','LotShape','Alley','Street','MSZoning'],inplace=True)\ntrain.head()","d7d4e21f":"train.info()","d7a4f3f0":"train.shape","540753dc":"test.drop(columns=['Id','SaleCondition','SaleType','MiscFeature','Fence','PoolQC','PavedDrive','GarageCond','GarageQual','GarageFinish','GarageType','FireplaceQu','Functional','KitchenQual','Electrical','CentralAir','HeatingQC','Heating','BsmtFinType2','BsmtFinType1','BsmtExposure','BsmtCond','BsmtQual','Foundation','ExterCond','ExterQual','MasVnrType','Exterior2nd','Exterior1st','RoofMatl','RoofStyle','HouseStyle','BldgType','Condition2','Condition1','Neighborhood','LandSlope','LotConfig','Utilities','LandContour','LotShape','Alley','Street','MSZoning'],inplace=True)\ntest.head()","7d3b9bd2":"test.info()","1226b43c":"test.shape","a4e6c430":"train.info()","b45151d6":"train['LotFrontage'].fillna(train['LotFrontage'].mean(),inplace=True)\ntrain['MasVnrArea'].fillna(train['MasVnrArea'].mean(),inplace=True)\ntrain['GarageYrBlt'].fillna(train['GarageYrBlt'].mean(),inplace=True)\ntrain.info()","e13e3b49":"test['LotFrontage'].fillna(test['LotFrontage'].mean(),inplace=True)\ntest['MasVnrArea'].fillna(test['MasVnrArea'].mean(),inplace=True)\ntest['BsmtFinSF1'].fillna(test['BsmtFinSF1'].mean(),inplace=True)\ntest['BsmtFinSF2'].fillna(test['BsmtFinSF2'].mean(),inplace=True)\ntest['BsmtUnfSF'].fillna(test['BsmtUnfSF'].mean(),inplace=True)\ntest['TotalBsmtSF'].fillna(test['TotalBsmtSF'].mean(),inplace=True)\ntest['BsmtFullBath'].fillna(test['BsmtFullBath'].mean(),inplace=True)\ntest['BsmtHalfBath'].fillna(test['BsmtHalfBath'].mean(),inplace=True)\ntest['GarageYrBlt'].fillna(test['GarageYrBlt'].mean(),inplace=True)\ntest['GarageCars'].fillna(test['GarageCars'].mean(),inplace=True)\ntest['GarageArea'].fillna(test['GarageArea'].mean(),inplace=True)\ntest.info()","2320a0c3":"import matplotlib.pyplot as plt\n%matplotlib inline\nplt.scatter(train['LotArea'],train['SalePrice'])","66341f0d":"plt.scatter(train['MSSubClass'],train['SalePrice'])","0ce866b3":"plt.scatter(train['LotFrontage'],train['SalePrice'])","569a6b21":"print(train.shape)\nprint(test.shape)\nprint(sample.shape)","349128db":"X=train.drop(columns=['SalePrice']) #trying to understand the model with just a single feature\ny=train[['SalePrice']]\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nX_trans=PolynomialFeatures(2).fit_transform(X)\ntest_trans=PolynomialFeatures(2).fit_transform(test)\nmodel_lr=LinearRegression().fit(X_trans,y)\ny_pred=model_lr.predict(test_trans)\ny_pred","2a2d9d51":"print(model_lr.score(X_trans,y))\nprint(model_lr.score(test_trans,sample['SalePrice']))","eceb96fe":"sample.head()","2cf7b19f":"sample['SalePrice']=y_pred\nsample.head()","98c7f864":"\"\"\"sample.to_csv('\/kaggle\/working\/output.csv', index=False)\ndata=pd.read_csv('\/kaggle\/working\/output.csv')\ndata.head()\"\"\"","dc47b5d9":"from sklearn.linear_model import Ridge\nmodel_ridge=Ridge(normalize=True).fit(X,y)\n\"\"\"y_pred_ridge=model_ridge.predict(test)\nsample['SalePrice']=y_pred_ridge\nsample.to_csv('\/kaggle\/working\/output_ridge.csv', index=False)\ndata=pd.read_csv('\/kaggle\/working\/output_ridge.csv')\ndata.head()\"\"\"","11cf368f":"model_ridge.score(X,y)","e4b01855":"from sklearn.linear_model import Lasso\nmodel_lasso=Lasso(normalize=True).fit(X,y)\n\"\"\"y_pred_lasso=model_lasso.predict(test)\nsample['SalePrice']=y_pred_lasso\nsample.to_csv('\/kaggle\/working\/output_lasso.csv',index=False)\ndata_lasso=pd.read_csv('\/kaggle\/working\/output_lasso.csv')\ndata_lasso.head()\"\"\"","dad199af":"model_lasso.score(X,y)","55ec2ddb":"import keras\nimport tensorflow as tf","baaf421b":"X.shape","d11811d4":"model_nn=keras.Sequential([\n    keras.layers.Dense(36, activation=tf.nn.relu,input_shape=[36]),\n    keras.layers.Dense(36, activation=tf.nn.relu),\n    keras.layers.Dense(36, activation=tf.nn.relu),\n    keras.layers.Dense(1)\n    ])","25dec526":"optimizer=tf.keras.optimizers.RMSprop(0.001)\nmodel_nn.compile(loss='mean_squared_error',optimizer=optimizer, metrics=['mean_absolute_error','mean_squared_error'])\nmodel_nn.fit(X,y,epochs=10)","e9d875cd":"\"\"\"y_pred_nn=model_nn.predict(test)\nsample['SalePrice']=y_pred_nn\nsample.to_csv('\/kaggle\/working\/output_neural.csv',index=False)\ndata_nn=pd.read_csv('\/kaggle\/working\/output_neural.csv')\ndata_nn.head()\"\"\"","ae3c1162":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import Ridge, Lasso\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV","fe2eead2":"test=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\nsample=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","d4099164":"X_train=train.drop(columns=['SalePrice'])\nY_train=train[['SalePrice']]","24195a13":"num_feat=X_train.select_dtypes(include='number').columns.to_list()\ncat_feat=X_train.select_dtypes(exclude='number').columns.to_list()","14e51873":"num_pipe=Pipeline([\n    ('imputer',SimpleImputer(strategy='mean')),\n    ('scaler', StandardScaler())\n])\n\ncat_pipe=Pipeline([\n    ('imputer',SimpleImputer(strategy='most_frequent')),\n    ('encoder', OneHotEncoder(handle_unknown='ignore'))\n])","8a10b025":"ct=ColumnTransformer(remainder='drop',\n                    transformers=[\n                        ('numeric', num_pipe, num_feat),\n                        ('categorical', cat_pipe, cat_feat)\n                    ])\n\nmodel_ranf=Pipeline([\n    ('transformer',ct),\n    ('predictor', RandomForestRegressor())\n])","4a03274f":"model_ranf.fit(X_train, Y_train);","a552562d":"print(model_ranf.score(X_train, Y_train))","be651cb7":"def submission(test, model):\n    y_pred=model.predict(test)\n    sample['SalePrice']=y_pred\n    date=pd.datetime.now().strftime(format='%d_%m_%Y_%H-%M_')\n    sample.to_csv(f'\/kaggle\/working\/{date}result.csv',index=False)","1fa6ce2d":"submission(test,model_ranf)","f8b909d2":"from sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures","562dee26":"ct=ColumnTransformer(remainder='drop',\n                    transformers=[\n                        ('numeric', num_pipe, num_feat),\n                        ('categorical', cat_pipe, cat_feat)\n                    ])\nmodel=Pipeline([\n    ('transformer',ct),\n    ('poly',PolynomialFeatures(2)),\n    ('predictor', Lasso())\n])","e3299b40":"model.fit(X_train, Y_train);","d08f4b3c":"model.score(X_train, Y_train)","b4ddea10":"**Submission Function**","30b91fb9":"### Table of contents\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n    <ol>\n        <li><a href=\"#ref1\">Exploratory Data Analysis and Visualization<\/a><\/li>\n        <li><a href=\"#ref2\">Predictive Modeling: Simple Linear Regression, Ridge Regression, Lasso Regression, Neural Network, Liner Regression with Polynomial Feature<\/a><\/li>\n        <li><a href=\"#ref3\">Building a Simple Pipeline<\/a><\/li>\n    <\/ol>\n<\/div>\n<br>","78a9953a":"**Visualization**","cf770f6b":"**Missing Value Handling**","cfd99d06":"**Lasso Regression**","3a6005d8":"# Exploratory Data Analysis and Visualization","d4296ffa":"This is a perfect notebook for data science students who have completed an online course in machine learning and are looking to expand their skill set before trying a featured competition. ","eedd7a7e":"**Neural Network**\n","e9dd597c":"**Simple Linear Regression**","ba493dd4":"# Predictive Modeling","996520c8":"**Please upvote if you like this or find this notebook useful, thanks.**","8da4b7ee":"# Building a Simple Pipeline","566f976f":"**Linear Regression with Polynomial Feature**","01b8403a":"# House Prices: Advanced Regression Techniques","f9045b49":"**Ridge Regresssion**"}}