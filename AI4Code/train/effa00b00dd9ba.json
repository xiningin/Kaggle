{"cell_type":{"b48ce897":"code","feadb49f":"code","75243f39":"code","94b07952":"code","5550039d":"code","adfbadfd":"code","c17f4a2e":"code","0c61dae2":"code","cf0864c0":"code","976ff457":"code","36fb9b39":"code","d00a192c":"code","8f4bb48e":"code","48c5715a":"code","6e800e94":"code","116a2e7a":"code","743298fd":"code","f880e83b":"code","4bd7312e":"code","2273fff6":"code","1cf312cb":"code","edec0a9d":"code","b00dc91a":"code","bf0b1ed1":"code","37b13e7c":"code","abbeb544":"code","671f95e1":"code","20e2e862":"code","985c22e8":"code","78e53598":"code","11a68122":"code","41603573":"code","3385d03f":"code","c6dae691":"code","ee49b697":"code","e69cd510":"code","75643f25":"code","26db3a0f":"code","3fdce138":"code","011ba61d":"code","8cddf0aa":"code","a1798759":"code","e5ec0217":"code","7fbe5aa5":"code","01c376e7":"code","6f3b5835":"code","d947335c":"code","223a5490":"code","fe6dd9c3":"code","7220a5e1":"code","0701c1f5":"code","7db7943c":"code","8ac1912e":"code","5af68954":"code","7707b396":"code","c96c1ce5":"code","ba3a64d2":"code","0d9bde8d":"code","e677aae0":"code","5ac197bc":"markdown","00b2b94e":"markdown","ba717ba4":"markdown","059a282e":"markdown","a2eb7bdb":"markdown","972f2f68":"markdown","fb907707":"markdown","89dcb1cc":"markdown","3bc3e35c":"markdown","97dbe830":"markdown","dd7ec18c":"markdown","e6b1f852":"markdown","1be3c4bf":"markdown","be993b61":"markdown","aaf82e97":"markdown","818c4c32":"markdown","edd0e8ef":"markdown","1a6cb2b9":"markdown","dd7327c7":"markdown","3b75073c":"markdown","4b7d86d4":"markdown","09263b5d":"markdown","444d4da0":"markdown","61eb4278":"markdown"},"source":{"b48ce897":"from tqdm import tqdm\nimport os\nimport time\nfrom random import randint\n\nimport numpy as np\nfrom scipy import stats\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import KFold\n\nimport nibabel as nib\nimport pydicom as pdm\nimport nilearn as nl\nimport nilearn.plotting as nlplt\nimport h5py\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport matplotlib.animation as anim\nimport matplotlib.patches as mpatches\nimport matplotlib.gridspec as gridspec\n\nimport seaborn as sns\nimport imageio\nfrom skimage.transform import resize\nfrom skimage.util import montage\n\nfrom IPython.display import Image as show_gif\nfrom IPython.display import clear_output\nfrom IPython.display import YouTubeVideo\n\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.nn.functional as F\n\nfrom torch.optim import Adam\nfrom torch.optim.lr_scheduler import ReduceLROnPlateau\nfrom torch.nn import MSELoss\n\n\nimport albumentations as A\nfrom albumentations import Compose, HorizontalFlip\nfrom albumentations.pytorch import ToTensor, ToTensorV2 \n\nimport warnings\nwarnings.simplefilter(\"ignore\")","feadb49f":"sample_filename = '..\/input\/brats20-dataset-training-validation\/BraTS2020_TrainingData\/MICCAI_BraTS2020_TrainingData\/BraTS20_Training_001\/BraTS20_Training_001_flair.nii'\nsample_filename_mask = '..\/input\/brats20-dataset-training-validation\/BraTS2020_TrainingData\/MICCAI_BraTS2020_TrainingData\/BraTS20_Training_001\/BraTS20_Training_001_seg.nii'\n\nsample_img = nib.load(sample_filename)\nsample_img = np.asanyarray(sample_img.dataobj)\nsample_img = np.rot90(sample_img)\nsample_mask = nib.load(sample_filename_mask)\nsample_mask = np.asanyarray(sample_mask.dataobj)\nsample_mask = np.rot90(sample_mask)\nprint(\"img shape ->\", sample_img.shape)\nprint(\"mask shape ->\", sample_mask.shape)\n","75243f39":"sample_filename2 = '..\/input\/brats20-dataset-training-validation\/BraTS2020_TrainingData\/MICCAI_BraTS2020_TrainingData\/BraTS20_Training_001\/BraTS20_Training_001_t1.nii'\nsample_img2 = nib.load(sample_filename2)\nsample_img2 = np.asanyarray(sample_img2.dataobj)\nsample_img2  = np.rot90(sample_img2)\n\nsample_filename3 = '..\/input\/brats20-dataset-training-validation\/BraTS2020_TrainingData\/MICCAI_BraTS2020_TrainingData\/BraTS20_Training_001\/BraTS20_Training_001_t2.nii'\nsample_img3 = nib.load(sample_filename3)\nsample_img3 = np.asanyarray(sample_img3.dataobj)\nsample_img3  = np.rot90(sample_img3)\n\nsample_filename4 = '..\/input\/brats20-dataset-training-validation\/BraTS2020_TrainingData\/MICCAI_BraTS2020_TrainingData\/BraTS20_Training_001\/BraTS20_Training_001_t1ce.nii'\nsample_img4 = nib.load(sample_filename4)\nsample_img4 = np.asanyarray(sample_img4.dataobj)\nsample_img4  = np.rot90(sample_img4)\n\nmask_WT = sample_mask.copy()\nmask_WT[mask_WT == 1] = 1\nmask_WT[mask_WT == 2] = 1\nmask_WT[mask_WT == 4] = 1\n\nmask_TC = sample_mask.copy()\nmask_TC[mask_TC == 1] = 1\nmask_TC[mask_TC == 2] = 0\nmask_TC[mask_TC == 4] = 1\n\nmask_ET = sample_mask.copy()\nmask_ET[mask_ET == 1] = 0\nmask_ET[mask_ET == 2] = 0\nmask_ET[mask_ET == 4] = 1","94b07952":"# https:\/\/matplotlib.org\/3.3.2\/gallery\/images_contours_and_fields\/plot_streamplot.html#sphx-glr-gallery-images-contours-and-fields-plot-streamplot-py\n# https:\/\/stackoverflow.com\/questions\/25482876\/how-to-add-legend-to-imshow-in-matplotlib\nfig = plt.figure(figsize=(20, 10))\n\ngs = gridspec.GridSpec(nrows=2, ncols=4, height_ratios=[1, 1.5])\n\n#  Varying density along a streamline\nax0 = fig.add_subplot(gs[0, 0])\nflair = ax0.imshow(sample_img[:,:,65], cmap='bone')\nax0.set_title(\"FLAIR\", fontsize=18, weight='bold', y=-0.2)\nfig.colorbar(flair)\n\n#  Varying density along a streamline\nax1 = fig.add_subplot(gs[0, 1])\nt1 = ax1.imshow(sample_img2[:,:,65], cmap='bone')\nax1.set_title(\"T1\", fontsize=18, weight='bold', y=-0.2)\nfig.colorbar(t1)\n\n#  Varying density along a streamline\nax2 = fig.add_subplot(gs[0, 2])\nt2 = ax2.imshow(sample_img3[:,:,65], cmap='bone')\nax2.set_title(\"T2\", fontsize=18, weight='bold', y=-0.2)\nfig.colorbar(t2)\n\n#  Varying density along a streamline\nax3 = fig.add_subplot(gs[0, 3])\nt1ce = ax3.imshow(sample_img4[:,:,65], cmap='bone')\nax3.set_title(\"T1 contrast\", fontsize=18, weight='bold', y=-0.2)\nfig.colorbar(t1ce)\n\n#  Varying density along a streamline\nax4 = fig.add_subplot(gs[1, 1:3])\n\n#ax4.imshow(np.ma.masked_where(mask_WT[:,:,65]== False,  mask_WT[:,:,65]), cmap='summer', alpha=0.6)\nl1 = ax4.imshow(mask_WT[:,:,65], cmap='summer',)\nl2 = ax4.imshow(np.ma.masked_where(mask_TC[:,:,65]== False,  mask_TC[:,:,65]), cmap='rainbow', alpha=0.6)\nl3 = ax4.imshow(np.ma.masked_where(mask_ET[:,:,65] == False, mask_ET[:,:,65]), cmap='winter', alpha=0.6)\n\nax4.set_title(\"\", fontsize=20, weight='bold', y=-0.1)\n\n_ = [ax.set_axis_off() for ax in [ax0,ax1,ax2,ax3, ax4]]\n\ncolors = [im.cmap(im.norm(1)) for im in [l1,l2, l3]]\nlabels = ['Non-Enhancing tumor core', 'Peritumoral Edema ', 'GD-enhancing tumor']\npatches = [ mpatches.Patch(color=colors[i], label=f\"{labels[i]}\") for i in range(len(labels))]\n# put those patched as legend-handles into the legend\nplt.legend(handles=patches, bbox_to_anchor=(1.1, 0.65), loc=2, borderaxespad=0.4,fontsize = 'xx-large',\n           title='Mask Labels', title_fontsize=18, edgecolor=\"black\",  facecolor='#c5c6c7')\n\nplt.suptitle(\"Multimodal Scans -  Data | Manually-segmented mask - Target\", fontsize=20, weight='bold')\n\nfig.savefig(\"data_sample.png\", format=\"png\",  pad_inches=0.2, transparent=False, bbox_inches='tight')\nfig.savefig(\"data_sample.svg\", format=\"svg\",  pad_inches=0.2, transparent=False, bbox_inches='tight')","5550039d":"YouTubeVideo('nrmizEvG8aM', width=600, height=400)","adfbadfd":"class Image3dToGIF3d:\n    \"\"\"\n    Displaying 3D images in 3d axes.\n    Parameters:\n        img_dim: shape of cube for resizing.\n        figsize: figure size for plotting in inches.\n    \"\"\"\n    def __init__(self, \n                 img_dim: tuple = (55, 55, 55),\n                 figsize: tuple = (15, 10),\n                 binary: bool = False,\n                 normalizing: bool = True,\n                ):\n        \"\"\"Initialization.\"\"\"\n        self.img_dim = img_dim\n        print(img_dim)\n        self.figsize = figsize\n        self.binary = binary\n        self.normalizing = normalizing\n\n    def _explode(self, data: np.ndarray):\n        \"\"\"\n        Takes: array and return an array twice as large in each dimension,\n        with an extra space between each voxel.\n        \"\"\"\n        shape_arr = np.array(data.shape)\n        size = shape_arr[:3] * 2 - 1\n        exploded = np.zeros(np.concatenate([size, shape_arr[3:]]),\n                            dtype=data.dtype)\n        exploded[::2, ::2, ::2] = data\n        return exploded\n\n    def _expand_coordinates(self, indices: np.ndarray):\n        x, y, z = indices\n        x[1::2, :, :] += 1\n        y[:, 1::2, :] += 1\n        z[:, :, 1::2] += 1\n        return x, y, z\n    \n    def _normalize(self, arr: np.ndarray):\n        \"\"\"Normilize image value between 0 and 1.\"\"\"\n        arr_min = np.min(arr)\n        return (arr - arr_min) \/ (np.max(arr) - arr_min)\n\n    \n    def _scale_by(self, arr: np.ndarray, factor: int):\n        \"\"\"\n        Scale 3d Image to factor.\n        Parameters:\n            arr: 3d image for scalling.\n            factor: factor for scalling.\n        \"\"\"\n        mean = np.mean(arr)\n        return (arr - mean) * factor + mean\n    \n    def get_transformed_data(self, data: np.ndarray):\n        \"\"\"Data transformation: normalization, scaling, resizing.\"\"\"\n        if self.binary:\n            resized_data = resize(data, self.img_dim, preserve_range=True)\n            return np.clip(resized_data.astype(np.uint8), 0, 1).astype(np.float32)\n            \n        norm_data = np.clip(self._normalize(data)-0.1, 0, 1) ** 0.4\n        scaled_data = np.clip(self._scale_by(norm_data, 2) - 0.1, 0, 1)\n        resized_data = resize(scaled_data, self.img_dim, preserve_range=True)\n        \n        return resized_data\n    \n    def plot_cube(self,\n                  cube,\n                  title: str = '', \n                  init_angle: int = 0,\n                  make_gif: bool = False,\n                  path_to_save: str = 'filename.gif'\n                 ):\n        \"\"\"\n        Plot 3d data.\n        Parameters:\n            cube: 3d data\n            title: title for figure.\n            init_angle: angle for image plot (from 0-360).\n            make_gif: if True create gif from every 5th frames from 3d image plot.\n            path_to_save: path to save GIF file.\n            \"\"\"\n        if self.binary:\n            facecolors = cm.winter(cube)\n            print(\"binary\")\n        else:\n            if self.normalizing:\n                cube = self._normalize(cube)\n            facecolors = cm.gist_stern(cube)\n            print(\"not binary\")\n            \n        facecolors[:,:,:,-1] = cube\n        facecolors = self._explode(facecolors)\n\n        filled = facecolors[:,:,:,-1] != 0\n        x, y, z = self._expand_coordinates(np.indices(np.array(filled.shape) + 1))\n\n        with plt.style.context(\"dark_background\"):\n\n            fig = plt.figure(figsize=self.figsize)\n            ax = fig.gca(projection='3d')\n\n            ax.view_init(30, init_angle)\n            ax.set_xlim(right = self.img_dim[0] * 2)\n            ax.set_ylim(top = self.img_dim[1] * 2)\n            ax.set_zlim(top = self.img_dim[2] * 2)\n            ax.set_title(title, fontsize=18, y=1.05)\n\n            ax.voxels(x, y, z, filled, facecolors=facecolors, shade=False)\n\n            if make_gif:\n                images = []\n                for angle in tqdm(range(0, 360, 5)):\n                    ax.view_init(30, angle)\n                    fname = str(angle) + '.png'\n\n                    plt.savefig(fname, dpi=120, format='png', bbox_inches='tight')\n                    images.append(imageio.imread(fname))\n                    #os.remove(fname)\n                imageio.mimsave(path_to_save, images)\n                plt.close()\n\n            else:\n                plt.show()\n\n                \nclass ShowResult:\n  \n    def mask_preprocessing(self, mask):\n        \"\"\"\n        Test.\n        \"\"\"\n        mask = mask.squeeze().cpu().detach().numpy()\n        mask = np.moveaxis(mask, (0, 1, 2, 3), (0, 3, 2, 1))\n\n        mask_WT = np.rot90(montage(mask[0]))\n        mask_TC = np.rot90(montage(mask[1]))\n        mask_ET = np.rot90(montage(mask[2]))\n\n        return mask_WT, mask_TC, mask_ET\n\n    def image_preprocessing(self, image):\n        \"\"\"\n        Returns image flair as mask for overlaping gt and predictions.\n        \"\"\"\n        image = image.squeeze().cpu().detach().numpy()\n        image = np.moveaxis(image, (0, 1, 2, 3), (0, 3, 2, 1))\n        flair_img = np.rot90(montage(image[0]))\n        return flair_img\n    \n    def plot(self, image, ground_truth, prediction):\n        image = self.image_preprocessing(image)\n        gt_mask_WT, gt_mask_TC, gt_mask_ET = self.mask_preprocessing(ground_truth)\n        pr_mask_WT, pr_mask_TC, pr_mask_ET = self.mask_preprocessing(prediction)\n        \n        fig, axes = plt.subplots(1, 2, figsize = (35, 30))\n    \n        [ax.axis(\"off\") for ax in axes]\n        axes[0].set_title(\"Ground Truth\", fontsize=35, weight='bold')\n        axes[0].imshow(image, cmap ='bone')\n        axes[0].imshow(np.ma.masked_where(gt_mask_WT == False, gt_mask_WT),\n                  cmap='cool_r', alpha=0.6)\n        axes[0].imshow(np.ma.masked_where(gt_mask_TC == False, gt_mask_TC),\n                  cmap='autumn_r', alpha=0.6)\n        axes[0].imshow(np.ma.masked_where(gt_mask_ET == False, gt_mask_ET),\n                  cmap='autumn', alpha=0.6)\n\n        axes[1].set_title(\"Prediction\", fontsize=35, weight='bold')\n        axes[1].imshow(image, cmap ='bone')\n        axes[1].imshow(np.ma.masked_where(pr_mask_WT == False, pr_mask_WT),\n                  cmap='cool_r', alpha=0.6)\n        axes[1].imshow(np.ma.masked_where(pr_mask_TC == False, pr_mask_TC),\n                  cmap='autumn_r', alpha=0.6)\n        axes[1].imshow(np.ma.masked_where(pr_mask_ET == False, pr_mask_ET),\n                  cmap='autumn', alpha=0.6)\n\n        plt.tight_layout()\n        \n        plt.show()\n        \n#show_result = ShowResult()\n#show_result.plot(data['image'], data['mask'], data['mask'])\n\n\ndef merging_two_gif(path1: str, path2: str, name_to_save: str):\n    \"\"\"\n    Merging GIFs side by side.\n    Parameters:\n        path1: path to gif with ground truth.\n        path2: path to gif with prediction.\n        name_to_save: name for saving new GIF.\n    \"\"\"\n    #https:\/\/stackoverflow.com\/questions\/51517685\/combine-several-gif-horizontally-python\n    #Create reader object for the gif\n    gif1 = imageio.get_reader(path1)\n    gif2 = imageio.get_reader(path2)\n\n    #If they don't have the same number of frame take the shorter\n    number_of_frames = min(gif1.get_length(), gif2.get_length()) \n\n    #Create writer object\n    new_gif = imageio.get_writer(name_to_save)\n\n    for frame_number in range(number_of_frames):\n        img1 = gif1.get_next_data()\n        img2 = gif2.get_next_data()\n        #here is the magic\n        new_image = np.hstack((img1, img2))\n        new_gif.append_data(new_image)\n\n    gif1.close()\n    gif2.close()    \n    new_gif.close()\n    \n#merging_two_gif('BraTS20_Training_001_flair_3d.gif',\n#                'BraTS20_Training_001_flair_3d.gif', \n#                'result.gif')\n\ndef get_all_csv_file(root: str) -> list:\n    \"\"\"Extraction all unique ids from file names.\"\"\"\n    ids = []\n    for dirname, _, filenames in os.walk(root):\n        for filename in filenames:\n            path = os.path.join(dirname, filename)\n            if path.endswith(\".csv\"):\n                ids.append(path) \n    ids = list(set(filter(None, ids)))\n    print(f\"Extracted {len(ids)} csv files.\")\n    return ids\n\n#csv_paths = get_all_csv_file(\"..\/input\/brats20-dataset-training-validation\/BraTS2020_TrainingData\")","c17f4a2e":"class GlobalConfig:\n    root_dir = '..\/input\/brats20-dataset-training-validation'\n    train_root_dir = '..\/input\/brats20-dataset-training-validation\/BraTS2020_TrainingData\/MICCAI_BraTS2020_TrainingData'\n    test_root_dir = '..\/input\/brats20-dataset-training-validation\/BraTS2020_ValidationData\/MICCAI_BraTS2020_ValidationData'\n    path_to_csv = '.\/train_data.csv'\n    pretrained_model_path = '..\/input\/brats20logs\/brats2020logs\/unet\/last_epoch_model.pth'\n    train_logs_path = '..\/input\/brats20logs\/brats2020logs\/unet\/train_log.csv'\n    ae_pretrained_model_path = '..\/input\/brats20logs\/brats2020logs\/ae\/autoencoder_best_model.pth'\n    tab_data = '..\/input\/brats20logs\/brats2020logs\/data\/df_with_voxel_stats_and_latent_features.csv'\n    seed = 55\n    \ndef seed_everything(seed: int):\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed(seed)\n    \nconfig = GlobalConfig()\nseed_everything(config.seed)","0c61dae2":"survival_info_df = pd.read_csv('..\/input\/brats20-dataset-training-validation\/BraTS2020_TrainingData\/MICCAI_BraTS2020_TrainingData\/survival_info.csv')\nname_mapping_df = pd.read_csv('..\/input\/brats20-dataset-training-validation\/BraTS2020_TrainingData\/MICCAI_BraTS2020_TrainingData\/name_mapping.csv')\n\nname_mapping_df.rename({'BraTS_2020_subject_ID': 'Brats20ID'}, axis=1, inplace=True) \n\n\ndf = survival_info_df.merge(name_mapping_df, on=\"Brats20ID\", how=\"right\")\n\npaths = []\nfor _, row  in df.iterrows():\n    \n    id_ = row['Brats20ID']\n    phase = id_.split(\"_\")[-2]\n    \n    if phase == 'Training':\n        path = os.path.join(config.train_root_dir, id_)\n    else:\n        path = os.path.join(config.test_root_dir, id_)\n    paths.append(path)\n    \ndf['path'] = paths\n\n#split data on train, test, split\n#train_df, val_df = train_test_split(train_df, test_size=0.1, random_state=69, shuffle=True)\n#train_df, val_df = train_df.reset_index(drop=True), val_df.reset_index(drop=True)\n\ntrain_data = df.loc[df['Age'].notnull()].reset_index(drop=True)\ntrain_data[\"Age_rank\"] =  train_data[\"Age\"] \/\/ 10 * 10\ntrain_data = train_data.loc[train_data['Brats20ID'] != 'BraTS20_Training_355'].reset_index(drop=True, )\n\nskf = StratifiedKFold(\n    n_splits=7, random_state=config.seed, shuffle=True\n)\nfor i, (train_index, val_index) in enumerate(\n        skf.split(train_data, train_data[\"Age_rank\"])\n        ):\n        train_data.loc[val_index, \"fold\"] = i\n\ntrain_df = train_data.loc[train_data['fold'] != 0].reset_index(drop=True)\nval_df = train_data.loc[train_data['fold'] == 0].reset_index(drop=True)\n\ntest_df = df.loc[~df['Age'].notnull()].reset_index(drop=True)\nprint(\"train_df ->\", train_df.shape, \"val_df ->\", val_df.shape, \"test_df ->\", test_df.shape)\ntrain_data.to_csv(\"train_data.csv\", index=False)","cf0864c0":"class BratsDataset(Dataset):\n    def __init__(self, df: pd.DataFrame, phase: str=\"test\", is_resize: bool=False):\n        self.df = df\n        self.phase = phase\n        self.augmentations = get_augmentations(phase)\n        self.data_types = ['_flair.nii', '_t1.nii', '_t1ce.nii', '_t2.nii']\n        self.is_resize = is_resize\n        \n    def __len__(self):\n        return self.df.shape[0]\n    \n    def __getitem__(self, idx):\n        id_ = self.df.loc[idx, 'Brats20ID']\n        root_path = self.df.loc[self.df['Brats20ID'] == id_]['path'].values[0]\n        # load all modalities\n        images = []\n        for data_type in self.data_types:\n            img_path = os.path.join(root_path, id_ + data_type)\n            img = self.load_img(img_path)#.transpose(2, 0, 1)\n            \n            if self.is_resize:\n                img = self.resize(img)\n    \n            img = self.normalize(img)\n            images.append(img)\n        img = np.stack(images)\n        img = np.moveaxis(img, (0, 1, 2, 3), (0, 3, 2, 1))\n        \n        if self.phase != \"test\":\n            mask_path =  os.path.join(root_path, id_ + \"_seg.nii\")\n            mask = self.load_img(mask_path)\n            \n            if self.is_resize:\n                mask = self.resize(mask)\n                mask = np.clip(mask.astype(np.uint8), 0, 1).astype(np.float32)\n                mask = np.clip(mask, 0, 1)\n            mask = self.preprocess_mask_labels(mask)\n    \n            augmented = self.augmentations(image=img.astype(np.float32), \n                                           mask=mask.astype(np.float32))\n            \n            img = augmented['image']\n            mask = augmented['mask']\n    \n        \n            return {\n                \"Id\": id_,\n                \"image\": img,\n                \"mask\": mask,\n            }\n        \n        return {\n            \"Id\": id_,\n            \"image\": img,\n        }\n    \n    def load_img(self, file_path):\n        data = nib.load(file_path)\n        data = np.asarray(data.dataobj)\n        return data\n    \n    def normalize(self, data: np.ndarray):\n        data_min = np.min(data)\n        return (data - data_min) \/ (np.max(data) - data_min)\n    \n    def resize(self, data: np.ndarray):\n        data = resize(data, (78, 120, 120), preserve_range=True)\n        return data\n    \n    def preprocess_mask_labels(self, mask: np.ndarray):\n\n        mask_WT = mask.copy()\n        mask_WT[mask_WT == 1] = 1\n        mask_WT[mask_WT == 2] = 1\n        mask_WT[mask_WT == 4] = 1\n\n        mask_TC = mask.copy()\n        mask_TC[mask_TC == 1] = 1\n        mask_TC[mask_TC == 2] = 0\n        mask_TC[mask_TC == 4] = 1\n\n        mask_ET = mask.copy()\n        mask_ET[mask_ET == 1] = 0\n        mask_ET[mask_ET == 2] = 0\n        mask_ET[mask_ET == 4] = 1\n\n        mask = np.stack([mask_WT, mask_TC, mask_ET])\n        mask = np.moveaxis(mask, (0, 1, 2, 3), (0, 3, 2, 1))\n\n        return mask\n\n        ","976ff457":"def get_augmentations(phase):\n    list_transforms = []\n    \n    list_trfms = Compose(list_transforms)\n    return list_trfms\n\n\ndef get_dataloader(\n    dataset: torch.utils.data.Dataset,\n    path_to_csv: str,\n    phase: str,\n    fold: int = 0,\n    batch_size: int = 1,\n    num_workers: int = 4,\n):\n    '''Returns: dataloader for the model training'''\n    df = pd.read_csv(path_to_csv)\n    \n    train_df = df.loc[df['fold'] != fold].reset_index(drop=True)\n    val_df = df.loc[df['fold'] == fold].reset_index(drop=True)\n\n    df = train_df if phase == \"train\" else val_df\n    dataset = dataset(df, phase)\n    dataloader = DataLoader(\n        dataset,\n        batch_size=batch_size,\n        num_workers=num_workers,\n        pin_memory=True,\n        shuffle=True,   \n    )\n    return dataloader","36fb9b39":"dataloader = get_dataloader(dataset=BratsDataset, path_to_csv='train_data.csv', phase='valid', fold=0)\nlen(dataloader)\n","d00a192c":"data = next(iter(dataloader))\ndata['Id'], data['image'].shape, data['mask'].shape","8f4bb48e":"img_tensor = data['image'].squeeze()[0].cpu().detach().numpy() \nmask_tensor = data['mask'].squeeze()[0].squeeze().cpu().detach().numpy()\nprint(\"Num uniq Image values :\", len(np.unique(img_tensor, return_counts=True)[0]))\nprint(\"Min\/Max Image values:\", img_tensor.min(), img_tensor.max())\nprint(\"Num uniq Mask values:\", np.unique(mask_tensor, return_counts=True))\n\nimage = np.rot90(montage(img_tensor))\nmask = np.rot90(montage(mask_tensor)) \n\nfig, ax = plt.subplots(1, 1, figsize = (20, 20))\nax.imshow(image, cmap ='bone')\nax.imshow(np.ma.masked_where(mask == False, mask),\n           cmap='cool', alpha=0.6)","48c5715a":"def dice_coef_metric(probabilities: torch.Tensor,\n                     truth: torch.Tensor,\n                     treshold: float = 0.5,\n                     eps: float = 1e-9) -> np.ndarray:\n    \"\"\"\n    Calculate Dice score for data batch.\n    Params:\n        probobilities: model outputs after activation function.\n        truth: truth values.\n        threshold: threshold for probabilities.\n        eps: additive to refine the estimate.\n        Returns: dice score aka f1.\n    \"\"\"\n    scores = []\n    num = probabilities.shape[0]\n    predictions = (probabilities >= treshold).float()\n    assert(predictions.shape == truth.shape)\n    for i in range(num):\n        prediction = predictions[i]\n        truth_ = truth[i]\n        intersection = 2.0 * (truth_ * prediction).sum()\n        union = truth_.sum() + prediction.sum()\n        if truth_.sum() == 0 and prediction.sum() == 0:\n            scores.append(1.0)\n        else:\n            scores.append((intersection + eps) \/ union)\n    return np.mean(scores)\n\n\ndef jaccard_coef_metric(probabilities: torch.Tensor,\n               truth: torch.Tensor,\n               treshold: float = 0.5,\n               eps: float = 1e-9) -> np.ndarray:\n    \"\"\"\n    Calculate Jaccard index for data batch.\n    Params:\n        probobilities: model outputs after activation function.\n        truth: truth values.\n        threshold: threshold for probabilities.\n        eps: additive to refine the estimate.\n        Returns: jaccard score aka iou.\"\n    \"\"\"\n    scores = []\n    num = probabilities.shape[0]\n    predictions = (probabilities >= treshold).float()\n    assert(predictions.shape == truth.shape)\n\n    for i in range(num):\n        prediction = predictions[i]\n        truth_ = truth[i]\n        intersection = (prediction * truth_).sum()\n        union = (prediction.sum() + truth_.sum()) - intersection + eps\n        if truth_.sum() == 0 and prediction.sum() == 0:\n            scores.append(1.0)\n        else:\n            scores.append((intersection + eps) \/ union)\n    return np.mean(scores)\n\n\nclass Meter:\n    '''factory for storing and updating iou and dice scores.'''\n    def __init__(self, treshold: float = 0.5):\n        self.threshold: float = treshold\n        self.dice_scores: list = []\n        self.iou_scores: list = []\n    \n    def update(self, logits: torch.Tensor, targets: torch.Tensor):\n        \"\"\"\n        Takes: logits from output model and targets,\n        calculates dice and iou scores, and stores them in lists.\n        \"\"\"\n        probs = torch.sigmoid(logits)\n        dice = dice_coef_metric(probs, targets, self.threshold)\n        iou = jaccard_coef_metric(probs, targets, self.threshold)\n        \n        self.dice_scores.append(dice)\n        self.iou_scores.append(iou)\n    \n    def get_metrics(self) -> np.ndarray:\n        \"\"\"\n        Returns: the average of the accumulated dice and iou scores.\n        \"\"\"\n        dice = np.mean(self.dice_scores)\n        iou = np.mean(self.iou_scores)\n        return dice, iou\n\n\nclass DiceLoss(nn.Module):\n    \"\"\"Calculate dice loss.\"\"\"\n    def __init__(self, eps: float = 1e-9):\n        super(DiceLoss, self).__init__()\n        self.eps = eps\n        \n    def forward(self,\n                logits: torch.Tensor,\n                targets: torch.Tensor) -> torch.Tensor:\n        \n        num = targets.size(0)\n        probability = torch.sigmoid(logits)\n        probability = probability.view(num, -1)\n        targets = targets.view(num, -1)\n        assert(probability.shape == targets.shape)\n        \n        intersection = 2.0 * (probability * targets).sum()\n        union = probability.sum() + targets.sum()\n        dice_score = (intersection + self.eps) \/ union\n        #print(\"intersection\", intersection, union, dice_score)\n        return 1.0 - dice_score\n        \n        \nclass BCEDiceLoss(nn.Module):\n    \"\"\"Compute objective loss: BCE loss + DICE loss.\"\"\"\n    def __init__(self):\n        super(BCEDiceLoss, self).__init__()\n        self.bce = nn.BCEWithLogitsLoss()\n        self.dice = DiceLoss()\n        \n    def forward(self, \n                logits: torch.Tensor,\n                targets: torch.Tensor) -> torch.Tensor:\n        assert(logits.shape == targets.shape)\n        dice_loss = self.dice(logits, targets)\n        bce_loss = self.bce(logits, targets)\n        \n        return bce_loss + dice_loss\n    \n# helper functions for testing.  \ndef dice_coef_metric_per_classes(probabilities: np.ndarray,\n                                    truth: np.ndarray,\n                                    treshold: float = 0.5,\n                                    eps: float = 1e-9,\n                                    classes: list = ['WT', 'TC', 'ET']) -> np.ndarray:\n    \"\"\"\n    Calculate Dice score for data batch and for each class.\n    Params:\n        probobilities: model outputs after activation function.\n        truth: model targets.\n        threshold: threshold for probabilities.\n        eps: additive to refine the estimate.\n        classes: list with name classes.\n        Returns: dict with dice scores for each class.\n    \"\"\"\n    scores = {key: list() for key in classes}\n    num = probabilities.shape[0]\n    num_classes = probabilities.shape[1]\n    predictions = (probabilities >= treshold).astype(np.float32)\n    assert(predictions.shape == truth.shape)\n\n    for i in range(num):\n        for class_ in range(num_classes):\n            prediction = predictions[i][class_]\n            truth_ = truth[i][class_]\n            intersection = 2.0 * (truth_ * prediction).sum()\n            union = truth_.sum() + prediction.sum()\n            if truth_.sum() == 0 and prediction.sum() == 0:\n                 scores[classes[class_]].append(1.0)\n            else:\n                scores[classes[class_]].append((intersection + eps) \/ union)\n                \n    return scores\n\n\ndef jaccard_coef_metric_per_classes(probabilities: np.ndarray,\n               truth: np.ndarray,\n               treshold: float = 0.5,\n               eps: float = 1e-9,\n               classes: list = ['WT', 'TC', 'ET']) -> np.ndarray:\n    \"\"\"\n    Calculate Jaccard index for data batch and for each class.\n    Params:\n        probobilities: model outputs after activation function.\n        truth: model targets.\n        threshold: threshold for probabilities.\n        eps: additive to refine the estimate.\n        classes: list with name classes.\n        Returns: dict with jaccard scores for each class.\"\n    \"\"\"\n    scores = {key: list() for key in classes}\n    num = probabilities.shape[0]\n    num_classes = probabilities.shape[1]\n    predictions = (probabilities >= treshold).astype(np.float32)\n    assert(predictions.shape == truth.shape)\n\n    for i in range(num):\n        for class_ in range(num_classes):\n            prediction = predictions[i][class_]\n            truth_ = truth[i][class_]\n            intersection = (prediction * truth_).sum()\n            union = (prediction.sum() + truth_.sum()) - intersection + eps\n            if truth_.sum() == 0 and prediction.sum() == 0:\n                 scores[classes[class_]].append(1.0)\n            else:\n                scores[classes[class_]].append((intersection + eps) \/ union)\n\n    return scores","6e800e94":"class DoubleConv(nn.Module):\n    \"\"\"(Conv3D -> BN -> ReLU) * 2\"\"\"\n    def __init__(self, in_channels, out_channels, num_groups=8):\n        super().__init__()\n        self.double_conv = nn.Sequential(\n            nn.Conv3d(in_channels, out_channels, kernel_size=3, stride=1, padding=1),\n            #nn.BatchNorm3d(out_channels),\n            nn.GroupNorm(num_groups=num_groups, num_channels=out_channels),\n            nn.ReLU(inplace=True),\n\n            nn.Conv3d(out_channels, out_channels, kernel_size=3, stride=1, padding=1),\n            #nn.BatchNorm3d(out_channels),\n            nn.GroupNorm(num_groups=num_groups, num_channels=out_channels),\n            nn.ReLU(inplace=True)\n          )\n\n    def forward(self,x):\n        return self.double_conv(x)\n\n    \nclass Down(nn.Module):\n\n    def __init__(self, in_channels, out_channels):\n        super().__init__()\n        self.encoder = nn.Sequential(\n            nn.MaxPool3d(2, 2),\n            DoubleConv(in_channels, out_channels)\n        )\n    def forward(self, x):\n        return self.encoder(x)\n\n    \nclass Up(nn.Module):\n\n    def __init__(self, in_channels, out_channels, trilinear=True):\n        super().__init__()\n        \n        if trilinear:\n            self.up = nn.Upsample(scale_factor=2, mode='trilinear', align_corners=True)\n        else:\n            self.up = nn.ConvTranspose3d(in_channels \/\/ 2, in_channels \/\/ 2, kernel_size=2, stride=2)\n            \n        self.conv = DoubleConv(in_channels, out_channels)\n\n    def forward(self, x1, x2):\n        x1 = self.up(x1)\n\n        diffZ = x2.size()[2] - x1.size()[2]\n        diffY = x2.size()[3] - x1.size()[3]\n        diffX = x2.size()[4] - x1.size()[4]\n        x1 = F.pad(x1, [diffX \/\/ 2, diffX - diffX \/\/ 2, diffY \/\/ 2, diffY - diffY \/\/ 2, diffZ \/\/ 2, diffZ - diffZ \/\/ 2])\n\n        x = torch.cat([x2, x1], dim=1)\n        return self.conv(x)\n\n    \nclass Out(nn.Module):\n    def __init__(self, in_channels, out_channels):\n        super().__init__()\n        self.conv = nn.Conv3d(in_channels, out_channels, kernel_size = 1)\n\n    def forward(self, x):\n        return self.conv(x)\n\n\nclass UNet3d(nn.Module):\n    def __init__(self, in_channels, n_classes, n_channels):\n        super().__init__()\n        self.in_channels = in_channels\n        self.n_classes = n_classes\n        self.n_channels = n_channels\n\n        self.conv = DoubleConv(in_channels, n_channels)\n        self.enc1 = Down(n_channels, 2 * n_channels)\n        self.enc2 = Down(2 * n_channels, 4 * n_channels)\n        self.enc3 = Down(4 * n_channels, 8 * n_channels)\n        self.enc4 = Down(8 * n_channels, 8 * n_channels)\n\n        self.dec1 = Up(16 * n_channels, 4 * n_channels)\n        self.dec2 = Up(8 * n_channels, 2 * n_channels)\n        self.dec3 = Up(4 * n_channels, n_channels)\n        self.dec4 = Up(2 * n_channels, n_channels)\n        self.out = Out(n_channels, n_classes)\n\n    def forward(self, x):\n        x1 = self.conv(x)\n        x2 = self.enc1(x1)\n        x3 = self.enc2(x2)\n        x4 = self.enc3(x3)\n        x5 = self.enc4(x4)\n\n        mask = self.dec1(x5, x4)\n        mask = self.dec2(mask, x3)\n        mask = self.dec3(mask, x2)\n        mask = self.dec4(mask, x1)\n        mask = self.out(mask)\n        return mask","116a2e7a":"class Trainer:\n    \"\"\"\n    Factory for training proccess.\n    Args:\n        display_plot: if True - plot train history after each epoch.\n        net: neural network for mask prediction.\n        criterion: factory for calculating objective loss.\n        optimizer: optimizer for weights updating.\n        phases: list with train and validation phases.\n        dataloaders: dict with data loaders for train and val phases.\n        path_to_csv: path to csv file.\n        meter: factory for storing and updating metrics.\n        batch_size: data batch size for one step weights updating.\n        num_epochs: num weights updation for all data.\n        accumulation_steps: the number of steps after which the optimization step can be taken\n                    (https:\/\/www.kaggle.com\/c\/understanding_cloud_organization\/discussion\/105614).\n        lr: learning rate for optimizer.\n        scheduler: scheduler for control learning rate.\n        losses: dict for storing lists with losses for each phase.\n        jaccard_scores: dict for storing lists with jaccard scores for each phase.\n        dice_scores: dict for storing lists with dice scores for each phase.\n    \"\"\"\n    def __init__(self,\n                 net: nn.Module,\n                 dataset: torch.utils.data.Dataset,\n                 criterion: nn.Module,\n                 lr: float,\n                 accumulation_steps: int,\n                 batch_size: int,\n                 fold: int,\n                 num_epochs: int,\n                 path_to_csv: str,\n                 display_plot: bool = True,\n                ):\n\n        \"\"\"Initialization.\"\"\"\n        self.device = 'cuda' if torch.cuda.is_available() else 'cpu'\n        print(\"device:\", self.device)\n        self.display_plot = display_plot\n        self.net = net\n        self.net = self.net.to(self.device)\n        self.criterion = criterion\n        self.optimizer = Adam(self.net.parameters(), lr=lr)\n        self.scheduler = ReduceLROnPlateau(self.optimizer, mode=\"min\",\n                                           patience=2, verbose=True)\n        self.accumulation_steps = accumulation_steps \/\/ batch_size\n        self.phases = [\"train\", \"val\"]\n        self.num_epochs = num_epochs\n\n        self.dataloaders = {\n            phase: get_dataloader(\n                dataset = dataset,\n                path_to_csv = path_to_csv,\n                phase = phase,\n                fold = fold,\n                batch_size = batch_size,\n                num_workers = 4\n            )\n            for phase in self.phases\n        }\n        self.best_loss = float(\"inf\")\n        self.losses = {phase: [] for phase in self.phases}\n        self.dice_scores = {phase: [] for phase in self.phases}\n        self.jaccard_scores = {phase: [] for phase in self.phases}\n         \n    def _compute_loss_and_outputs(self,\n                                  images: torch.Tensor,\n                                  targets: torch.Tensor):\n        images = images.to(self.device)\n        targets = targets.to(self.device)\n        logits = self.net(images)\n        loss = self.criterion(logits, targets)\n        return loss, logits\n        \n    def _do_epoch(self, epoch: int, phase: str):\n        print(f\"{phase} epoch: {epoch} | time: {time.strftime('%H:%M:%S')}\")\n\n        self.net.train() if phase == \"train\" else self.net.eval()\n        meter = Meter()\n        dataloader = self.dataloaders[phase]\n        total_batches = len(dataloader)\n        running_loss = 0.0\n        self.optimizer.zero_grad()\n        for itr, data_batch in enumerate(dataloader):\n            images, targets = data_batch['image'], data_batch['mask']\n            loss, logits = self._compute_loss_and_outputs(images, targets)\n            loss = loss \/ self.accumulation_steps\n            if phase == \"train\":\n                loss.backward()\n                if (itr + 1) % self.accumulation_steps == 0:\n                    self.optimizer.step()\n                    self.optimizer.zero_grad()\n            running_loss += loss.item()\n            meter.update(logits.detach().cpu(),\n                         targets.detach().cpu()\n                        )\n            \n        epoch_loss = (running_loss * self.accumulation_steps) \/ total_batches\n        epoch_dice, epoch_iou = meter.get_metrics()\n        \n        self.losses[phase].append(epoch_loss)\n        self.dice_scores[phase].append(epoch_dice)\n        self.jaccard_scores[phase].append(epoch_iou)\n\n        return epoch_loss\n        \n    def run(self):\n        for epoch in range(self.num_epochs):\n            self._do_epoch(epoch, \"train\")\n            with torch.no_grad():\n                val_loss = self._do_epoch(epoch, \"val\")\n                self.scheduler.step(val_loss)\n            if self.display_plot:\n                self._plot_train_history()\n                \n            if val_loss < self.best_loss:\n                print(f\"\\n{'#'*20}\\nSaved new checkpoint\\n{'#'*20}\\n\")\n                self.best_loss = val_loss\n                torch.save(self.net.state_dict(), \"best_model.pth\")\n            print()\n        self._save_train_history()\n            \n    def _plot_train_history(self):\n        data = [self.losses, self.dice_scores, self.jaccard_scores]\n        colors = ['deepskyblue', \"crimson\"]\n        labels = [\n            f\"\"\"\n            train loss {self.losses['train'][-1]}\n            val loss {self.losses['val'][-1]}\n            \"\"\",\n            \n            f\"\"\"\n            train dice score {self.dice_scores['train'][-1]}\n            val dice score {self.dice_scores['val'][-1]} \n            \"\"\", \n                  \n            f\"\"\"\n            train jaccard score {self.jaccard_scores['train'][-1]}\n            val jaccard score {self.jaccard_scores['val'][-1]}\n            \"\"\",\n        ]\n        \n        clear_output(True)\n        with plt.style.context(\"seaborn-dark-palette\"):\n            fig, axes = plt.subplots(3, 1, figsize=(8, 10))\n            for i, ax in enumerate(axes):\n                ax.plot(data[i]['val'], c=colors[0], label=\"val\")\n                ax.plot(data[i]['train'], c=colors[-1], label=\"train\")\n                ax.set_title(labels[i])\n                ax.legend(loc=\"upper right\")\n                \n            plt.tight_layout()\n            plt.show()\n            \n    def load_predtrain_model(self,\n                             state_path: str):\n        self.net.load_state_dict(torch.load(state_path))\n        print(\"Predtrain model loaded\")\n        \n    def _save_train_history(self):\n        \"\"\"writing model weights and training logs to files.\"\"\"\n        torch.save(self.net.state_dict(),\n                   f\"last_epoch_model.pth\")\n\n        logs_ = [self.losses, self.dice_scores, self.jaccard_scores]\n        log_names_ = [\"_loss\", \"_dice\", \"_jaccard\"]\n        logs = [logs_[i][key] for i in list(range(len(logs_)))\n                         for key in logs_[i]]\n        log_names = [key+log_names_[i] \n                     for i in list(range(len(logs_))) \n                     for key in logs_[i]\n                    ]\n        pd.DataFrame(\n            dict(zip(log_names, logs))\n        ).to_csv(\"train_log.csv\", index=False)","743298fd":"nodel = UNet3d(in_channels=4, n_classes=3, n_channels=24).to('cuda')","f880e83b":"trainer = Trainer(net=nodel,\n                  dataset=BratsDataset,\n                  criterion=BCEDiceLoss(),\n                  lr=5e-4,\n                  accumulation_steps=4,\n                  batch_size=1,\n                  fold=0,\n                  num_epochs=1,\n                  path_to_csv = config.path_to_csv,)\n\nif config.pretrained_model_path is not None:\n    trainer.load_predtrain_model(config.pretrained_model_path)\n    \n    # if need - load the logs.      \n    train_logs = pd.read_csv(config.train_logs_path)\n    trainer.losses[\"train\"] =  train_logs.loc[:, \"train_loss\"].to_list()\n    trainer.losses[\"val\"] =  train_logs.loc[:, \"val_loss\"].to_list()\n    trainer.dice_scores[\"train\"] = train_logs.loc[:, \"train_dice\"].to_list()\n    trainer.dice_scores[\"val\"] = train_logs.loc[:, \"val_dice\"].to_list()\n    trainer.jaccard_scores[\"train\"] = train_logs.loc[:, \"train_jaccard\"].to_list()\n    trainer.jaccard_scores[\"val\"] = train_logs.loc[:, \"val_jaccard\"].to_list()","4bd7312e":"%%time\ntrainer.run()","2273fff6":"def compute_scores_per_classes(model,\n                               dataloader,\n                               classes):\n    \"\"\"\n    Compute Dice and Jaccard coefficients for each class.\n    Params:\n        model: neural net for make predictions.\n        dataloader: dataset object to load data from.\n        classes: list with classes.\n        Returns: dictionaries with dice and jaccard coefficients for each class for each slice.\n    \"\"\"\n    device = 'cuda' if torch.cuda.is_available() else 'cpu'\n    dice_scores_per_classes = {key: list() for key in classes}\n    iou_scores_per_classes = {key: list() for key in classes}\n\n    with torch.no_grad():\n        for i, data in enumerate(dataloader):\n            imgs, targets = data['image'], data['mask']\n            imgs, targets = imgs.to(device), targets.to(device)\n            logits = model(imgs)\n            logits = logits.detach().cpu().numpy()\n            targets = targets.detach().cpu().numpy()\n            \n            dice_scores = dice_coef_metric_per_classes(logits, targets)\n            iou_scores = jaccard_coef_metric_per_classes(logits, targets)\n\n            for key in dice_scores.keys():\n                dice_scores_per_classes[key].extend(dice_scores[key])\n\n            for key in iou_scores.keys():\n                iou_scores_per_classes[key].extend(iou_scores[key])\n\n    return dice_scores_per_classes, iou_scores_per_classes\n","1cf312cb":"val_dataloader = get_dataloader(BratsDataset, 'train_data.csv', phase='valid', fold=0)\nlen(dataloader)","edec0a9d":"nodel.eval();","b00dc91a":"%%time\ndice_scores_per_classes, iou_scores_per_classes = compute_scores_per_classes(\n    nodel, val_dataloader, ['WT', 'TC', 'ET']\n    )","bf0b1ed1":"dice_df = pd.DataFrame(dice_scores_per_classes)\ndice_df.columns = ['WT dice', 'TC dice', 'ET dice']\n\niou_df = pd.DataFrame(iou_scores_per_classes)\niou_df.columns = ['WT jaccard', 'TC jaccard', 'ET jaccard']\nval_metics_df = pd.concat([dice_df, iou_df], axis=1, sort=True)\nval_metics_df = val_metics_df.loc[:, ['WT dice', 'WT jaccard', \n                                      'TC dice', 'TC jaccard', \n                                      'ET dice', 'ET jaccard']]\nval_metics_df.sample(5)","37b13e7c":"colors = ['#35FCFF', '#FF355A', '#96C503', '#C5035B', '#28B463', '#35FFAF']\npalette = sns.color_palette(colors, 6)\n\nfig, ax = plt.subplots(figsize=(12, 6));\nsns.barplot(x=val_metics_df.mean().index, y=val_metics_df.mean(), palette=palette, ax=ax);\nax.set_xticklabels(val_metics_df.columns, fontsize=14, rotation=15);\nax.set_title(\"Dice and Jaccard Coefficients from Validation\", fontsize=20)\n\nfor idx, p in enumerate(ax.patches):\n        percentage = '{:.1f}%'.format(100 * val_metics_df.mean().values[idx])\n        x = p.get_x() + p.get_width() \/ 2 - 0.15\n        y = p.get_y() + p.get_height()\n        ax.annotate(percentage, (x, y), fontsize=15, fontweight=\"bold\")\n\nfig.savefig(\"result1.png\", format=\"png\",  pad_inches=0.2, transparent=False, bbox_inches='tight')\nfig.savefig(\"result1.svg\", format=\"svg\",  pad_inches=0.2, transparent=False, bbox_inches='tight')","abbeb544":"def compute_results(model,\n                    dataloader,\n                    treshold=0.33):\n\n    device = 'cuda' if torch.cuda.is_available() else 'cpu'\n    results = {\"Id\": [],\"image\": [], \"GT\": [],\"Prediction\": []}\n\n    with torch.no_grad():\n        for i, data in enumerate(dataloader):\n            id_, imgs, targets = data['Id'], data['image'], data['mask']\n            imgs, targets = imgs.to(device), targets.to(device)\n            logits = model(imgs)\n            probs = torch.sigmoid(logits)\n            \n            predictions = (probs >= treshold).float()\n            predictions =  predictions.cpu()\n            targets = targets.cpu()\n            \n            results[\"Id\"].append(id_)\n            results[\"image\"].append(imgs.cpu())\n            results[\"GT\"].append(targets)\n            results[\"Prediction\"].append(predictions)\n            \n            # only 5 pars\n            if (i > 5):    \n                return results\n        return results","671f95e1":"%%time\nresults = compute_results(\n    nodel, val_dataloader, 0.33)","20e2e862":"for id_, img, gt, prediction in zip(results['Id'][4:],\n                    results['image'][4:],\n                    results['GT'][4:],\n                    results['Prediction'][4:]\n                    ):\n    \n    print(id_)\n    break","985c22e8":"show_result = ShowResult()\nshow_result.plot(img, gt, prediction)","78e53598":"gt = gt.squeeze().cpu().detach().numpy()\ngt = np.moveaxis(gt, (0, 1, 2, 3), (0, 3, 2, 1))\nwt,tc, et = gt\nprint(wt.shape, tc.shape, et.shape)\ngt = (wt + tc + et)\ngt = np.clip(gt, 0, 1)\nprint(gt.shape)","11a68122":"%%time\ntitle = \"Ground Truth_\" + id_[0]\nfilename1 = title + \"_3d.gif\"\n\ndata_to_3dgif = Image3dToGIF3d(img_dim = (120, 120, 78), binary=True, normalizing=False)\ntransformed_data = data_to_3dgif.get_transformed_data(gt)\ndata_to_3dgif.plot_cube(\n    transformed_data,\n    title=title,\n    make_gif=True,\n    path_to_save=filename1\n)\n#show_gif(filename1, format='png')","41603573":"prediction = prediction.squeeze().cpu().detach().numpy()\nprediction = np.moveaxis(prediction, (0, 1, 2, 3), (0, 3, 2, 1))\nwt,tc,et = prediction\nprint(wt.shape, tc.shape, et.shape)\nprediction = (wt + tc + et)\nprediction = np.clip(prediction, 0, 1)\nprint(prediction.shape)","3385d03f":"%%time\ntitle = \"Prediction_\" + id_[0]\nfilename2 = title + \"_3d.gif\"\n\ndata_to_3dgif = Image3dToGIF3d(img_dim = (120, 120, 78), binary=True, normalizing=False)\ntransformed_data = data_to_3dgif.get_transformed_data(prediction)\ndata_to_3dgif.plot_cube(\n    transformed_data,\n    title=title,\n    make_gif=True,\n    path_to_save=filename2\n)\n#show_gif(filename2, format='png')#","c6dae691":"merging_two_gif(filename1,\n                filename2, \n                'result.gif')\nshow_gif('result.gif', format='png')","ee49b697":"class AutoEncoder(nn.Module):\n    def __init__(self):\n        super(AutoEncoder, self).__init__()\n        # Encoder\n        self.conv1 = nn.Conv3d(4, 16, 3)\n        self.conv2 = nn.Conv3d(16, 32, 3)\n        self.conv3 = nn.Conv3d(32, 96, 2)\n        self.pool1 = nn.MaxPool3d(kernel_size=2, stride=2, return_indices=True)\n        self.pool2 = nn.MaxPool3d(kernel_size=3, stride=3, return_indices=True)\n        self.pool3 = nn.MaxPool3d(kernel_size=2, stride=2, return_indices=True)\n        self.enc_linear = nn.Linear(381216, 512)\n        \n        # Decoder\n        self.deconv1 = nn.ConvTranspose3d(96, 32, 2)\n        self.deconv2 = nn.ConvTranspose3d(32, 16, 3)\n        self.deconv3 = nn.ConvTranspose3d(16, 4, 3)\n        self.unpool1 = nn.MaxUnpool3d(kernel_size=2, stride=2)\n        self.unpool2 = nn.MaxUnpool3d(kernel_size=3, stride=3)\n        self.unpool3 = nn.MaxUnpool3d(kernel_size=2, stride=2)\n\n        self.dec_linear = nn.Linear(512, 381216)\n        \n    def encode(self, x, return_partials=True):\n        # Encoder\n        x = self.conv1(x)\n        up3out_shape = x.shape\n        x, indices1 = self.pool1(x)\n        x = self.conv2(x)\n        up2out_shape = x.shape\n        x, indices2 = self.pool2(x)\n        x = self.conv3(x)\n        up1out_shape = x.shape\n        x, indices3 = self.pool3(x)\n        #print(x.shape)\n        x = x.view((x.size(0), -1))\n        #print(x.shape)\n        x = self.enc_linear(x)\n\n        # required for unpool\n        pool_par = {\n            \"P1\": [indices1, up3out_shape], \n            \"P2\": [indices2, up2out_shape], \n            \"P3\": [indices3, up1out_shape]\n                   }\n        \n        if return_partials:\n            return x, pool_par\n        else:\n            return x\n\n    def decode(self, x, pool_par):\n        x = self.dec_linear(x)\n        x = x.view((x.size(0), 96, 11, 19, 19))\n        \n        x = self.unpool1(x, output_size=pool_par[\"P3\"][1], indices=pool_par[\"P3\"][0])\n        #print(x.shape)\n        x = self.deconv1(x)\n        x = self.unpool2(x, output_size=pool_par[\"P2\"][1], indices=pool_par[\"P2\"][0])\n        x = self.deconv2(x)\n        x = self.unpool3(x, output_size=pool_par[\"P1\"][1], indices=pool_par[\"P1\"][0])\n        x = self.deconv3(x)\n        return x\n    \n    def forward(self, x):\n        self.feature, pool_par = self.encode(x)\n        out = self.decode(self.feature, pool_par)\n        return out","e69cd510":"def get_augmentations(phase):\n    list_transforms = []\n    \n    list_trfms = Compose(list_transforms)\n    return list_trfms\n\n\ndef get_dataloader(\n    dataset: torch.utils.data.Dataset,\n    path_to_csv: str,\n    phase: str,\n    fold: int = 0,\n    batch_size: int = 1,\n    num_workers: int = 4,\n):\n    '''Returns: dataloader for the model training'''\n    df = pd.read_csv(path_to_csv)\n    \n    train_df = df.loc[df['fold'] != fold].reset_index(drop=True)\n    val_df = df.loc[df['fold'] == fold].reset_index(drop=True)\n\n    df = train_df if phase == \"train\" else val_df\n    dataset = dataset(df, phase)\n    dataloader = DataLoader(\n        dataset,\n        batch_size=batch_size,\n        num_workers=num_workers,\n        pin_memory=True,\n        shuffle=True,   \n    )\n\n    return dataloader","75643f25":"class AutoEncoderDataset(Dataset):\n    def __init__(self, df: pd.DataFrame, phase: str = \"test\"):\n        self.df = df\n        self.phase = phase\n        self.augmentations = get_augmentations(phase)\n        self.data_types = ['_flair.nii', '_t1.nii', '_t1ce.nii', '_t2.nii']\n        \n    def __len__(self):\n        return self.df.shape[0]\n    \n    def __getitem__(self, idx):\n        id_ = self.df.loc[idx, 'Brats20ID']\n        root_path = self.df.loc[self.df['Brats20ID'] == id_]['path'].values[0]\n        # load all modalities\n        images = []\n        for data_type in self.data_types:\n            img_path = os.path.join(root_path, id_ + data_type)\n            img = self.load_img(img_path)\n\n            img = self.normalize(img)\n            images.append(img.astype(np.float32))\n        img = np.stack(images)\n        img = np.moveaxis(img, (0, 1, 2, 3), (0, 3, 2, 1))\n    \n        \n        return {\n            \"Id\": id_,\n            \"data\": img,\n            \"label\": img,\n            }\n    \n    def load_img(self, file_path):\n        data = nib.load(file_path)\n        data = np.asarray(data.dataobj)\n        return data\n    \n    def normalize(self, data: np.ndarray,  mean=0.0, std=1.0):\n        \"\"\"Normilize image value between 0 and 1.\"\"\"\n        data_min = np.min(data)\n        return (data - data_min) \/ (np.max(data) - data_min)\n        ","26db3a0f":"dataloader = get_dataloader(AutoEncoderDataset, 'train_data.csv', phase='valid', fold=0)\nlen(dataloader)\n\ndata = next(iter(dataloader))\ndata['Id'], data['data'].shape, data['label'].shape","3fdce138":"class Trainer:\n    def __init__(self,\n                 net: nn.Module,\n                 criterion: nn.Module,\n                 lr: float,\n                 accumulation_steps: int,\n                 batch_size: int,\n                 fold: int,\n                 num_epochs: int,\n                 path_to_csv: str,\n                 dataset: torch.utils.data.Dataset,\n                ):\n\n        \"\"\"Initialization.\"\"\"\n        self.device = 'cuda' if torch.cuda.is_available() else 'cpu'\n        print(\"device:\", self.device)\n        self.net = net\n        self.net = self.net.to(self.device)\n        self.criterion = criterion\n        self.optimizer = Adam(self.net.parameters(), lr=lr)\n        self.scheduler = ReduceLROnPlateau(self.optimizer, mode=\"min\",\n                                           patience=2, verbose=True)\n        self.accumulation_steps = accumulation_steps \/\/ batch_size\n        self.phases = [\"train\", \"val\"]\n        self.num_epochs = num_epochs\n\n        self.dataloaders = {\n\n            phase: get_dataloader(\n                dataset = dataset,\n                path_to_csv = path_to_csv,\n                phase = phase,\n                fold = fold,\n                batch_size = batch_size,\n                num_workers = 4\n            )\n            for phase in self.phases\n        }\n        self.best_loss = float(\"inf\")\n        self.losses = {phase: [] for phase in self.phases}\n         \n    def _compute_loss_and_outputs(self,\n                                  images: torch.Tensor,\n                                  targets: torch.Tensor):\n        images = images.to(self.device)\n        targets = targets.to(self.device)\n        logits = self.net(images)\n        loss = self.criterion(logits, targets)\n        return loss, logits\n        \n    def _do_epoch(self, epoch: int, phase: str):\n        print(f\"{phase} epoch: {epoch} | time: {time.strftime('%H:%M:%S')}\")\n\n        self.net.train() if phase == \"train\" else self.net.eval()\n        dataloader = self.dataloaders[phase]\n        total_batches = len(dataloader)\n        running_loss = 0.0\n        self.optimizer.zero_grad()\n        for itr, data_batch in enumerate(dataloader):\n            images, targets = data_batch['data'], data_batch['label']\n            loss, logits = self._compute_loss_and_outputs(images, targets)\n            loss = loss \/ self.accumulation_steps\n            if phase == \"train\":\n                loss.backward()\n                if (itr + 1) % self.accumulation_steps == 0:\n                    self.optimizer.step()\n                    self.optimizer.zero_grad()\n            running_loss += loss.item()\n            \n        epoch_loss = (running_loss * self.accumulation_steps) \/ total_batches\n\n        \n        self.losses[phase].append(epoch_loss)\n        print(f\"Loss | {self.losses[phase][-1]}\")\n\n\n        return epoch_loss\n        \n    def run(self):\n        for epoch in range(self.num_epochs):\n            self._do_epoch(epoch, \"train\")\n            with torch.no_grad():\n                val_loss = self._do_epoch(epoch, \"val\")\n                self.scheduler.step(val_loss)\n                \n            if val_loss < self.best_loss:\n                print(f\"\\n{'#'*20}\\nSaved new checkpoint\\n{'#'*20}\\n\")\n                self.best_loss = val_loss\n                torch.save(self.net.state_dict(), \"autoencoder_best_model.pth\")\n            print()\n        self._save_train_history()\n            \n            \n    def load_predtrain_model(self,\n                             state_path: str):\n        self.net.load_state_dict(torch.load(state_path))\n        print(\"Predtrain model loaded\")\n        \n    def _save_train_history(self):\n        \"\"\"writing model weights and training logs to files.\"\"\"\n        torch.save(self.net.state_dict(),\n                   f\"autoencoder_last_epoch_model.pth\")\n","011ba61d":"model = AutoEncoder().to('cuda')\n\ntrainer = Trainer(net=model,\n                  dataset= AutoEncoderDataset,\n                  criterion=MSELoss(),\n                  lr=5e-4,\n                  accumulation_steps=4,\n                  batch_size=1,\n                  fold=0,\n                  num_epochs=1,\n                  path_to_csv = config.path_to_csv,)\n\n\nif config.ae_pretrained_model_path is not None:\n    trainer.load_predtrain_model(config.ae_pretrained_model_path)","8cddf0aa":"%%time\ntrainer.run()","a1798759":"dataloader = get_dataloader(AutoEncoderDataset, 'train_data.csv', phase='val', fold=0)","e5ec0217":"model.eval();\nwith torch.no_grad():\n    for data in dataloader:\n        id_, imgs, targets = data['Id'], data['data'], data['label']\n        imgs, targets = imgs.to('cuda'), targets.to('cuda')\n        output = model(imgs)\n        output = output.cpu()\n        break","7fbe5aa5":"imgs = imgs.squeeze().cpu().numpy()\nimgs = np.moveaxis(imgs, (0, 1, 2, 3), (0, 3, 2, 1))\nprint(imgs.shape)\n\ngt_flair, gt_t1, gt_t1ce, gt_t2 = imgs\nprint(gt_flair.shape, gt_t1.shape, gt_t1ce.shape, gt_t2.shape)","01c376e7":"plt.figure(figsize=(15, 10))\nplt.imshow(np.rot90(montage(gt_flair)), cmap='bone')","6f3b5835":"%%time\ntitle = \"AE_Ground_Truth_\" + id_[0]\nfilename1 = title + \"_3d.gif\"\n\n\ndata_to_3dgif = Image3dToGIF3d(img_dim = (55, 55, 55), binary=False, normalizing=False)\ntransformed_data = data_to_3dgif.get_transformed_data(gt_flair)\n#transformed_data = np.rot90(transformed_data)\ndata_to_3dgif.plot_cube(\n    transformed_data[:38, :47, :35],\n    title=title,\n    make_gif=True,\n    path_to_save=filename1\n)\n#show_gif(filename1, format='png')","d947335c":"output = output.squeeze().numpy()\noutput = np.moveaxis(output, (0, 1, 2, 3), (0, 3, 2, 1))\nprint(output.shape)\n\npr_flair, pr_t1, pr_t1ce, pr_t2 = output\nprint(pr_flair.shape, pr_t1.shape, pr_t1ce.shape, pr_t2.shape)","223a5490":"plt.figure(figsize=(15, 10))\npr_flair1 = pr_flair.copy()\npr_flair1[pr_flair1 < 1e-7] = 0  # remove artifacts.\nplt.imshow(np.rot90(montage(pr_flair1)), cmap='bone')","fe6dd9c3":"%%time\ntitle = \"AE_Prediction_\" + id_[0]\nfilename2 = title + \"_3d.gif\"\n\n\ndata_to_3dgif = Image3dToGIF3d(img_dim = (55, 55, 55), binary=False, normalizing=False)\ntransformed_data = data_to_3dgif.get_transformed_data(pr_flair1)\n#transformed_data = np.rot90(transformed_data)\ndata_to_3dgif.plot_cube(\n    transformed_data[:38, :47, :35],\n    title=title,\n    make_gif=True,\n    path_to_save=filename2\n)\n#show_gif(filename1, format='png')\"\"\"","7220a5e1":"merging_two_gif(filename1,\n                filename2, \n                'AE_result.gif')\nshow_gif('AE_result.gif', format='png')","0701c1f5":"class LatentFeaturesGenerator:\n    def __init__(self, \n                 autoencoder, \n                 device: str = 'cuda'):\n        \n        self.autoencoder = autoencoder.to(device)\n        self.device = device\n\n    def __call__(self, img):\n        with torch.no_grad():\n            img = torch.FloatTensor(img).unsqueeze(0).to(self.device)\n            latent_features = self.autoencoder.encode(\n                img, return_partials=False).squeeze(0).cpu().numpy()\n\n        return latent_features","7db7943c":"class Features_Generator:\n    \n    def __init__(self, df, autoencoder):\n        self.df = df\n        self.df_voxel_stats = pd.DataFrame()\n        self.latent_feature_generator = LatentFeaturesGenerator(autoencoder)\n        \n    def _read_file(self, file_path):\n        data = nib.load(file_path)\n        data = np.asarray(data.dataobj).astype(np.float32)\n        return data\n    \n    def _normalize(self, data: np.ndarray):\n        \"\"\"Normilize image value between 0 and 1.\"\"\"\n        data_min = np.min(data)\n        return (data - data_min) \/ (np.max(data) - data_min)\n    \n    def _create_features(self, Brats20ID):\n        features = {}\n        images = []\n        # vOXEL STATS\n        for data_type in ['_t1.nii', '_t2.nii', '_flair.nii', '_t1ce.nii']:\n            \n            \n            # data path\n            root_path = self.df.loc[self.df['Brats20ID'] == Brats20ID]['path'].values[0]\n            file_path = os.path.join(root_path, Brats20ID + data_type)\n            \n            # flatten 3d array\n            img_data = self._read_file(file_path)\n            data = img_data.reshape(-1)\n            \n            # create features\n            data_mean = data.mean()\n            data_std = data.std()\n            intensive_data = data[data > data_mean]\n            more_intensive_data = data[data > data_mean + data_std]\n            non_intensive_data = data[data < data_mean]\n            \n            data_skew = stats.skew(data)\n            data_kurtosis = stats.kurtosis(data)\n            intensive_skew = stats.skew(intensive_data)\n            non_intensive_skew = stats.skew(non_intensive_data)\n            \n            data_diff = np.diff(data)\n            \n            # write new features in df\n            features['Brats20ID'] = Brats20ID\n            features[f'{data_type}_skew'] = data_skew,\n            features[f'{data_type}_kurtosis'] = data_kurtosis,\n            features[f'{data_type}_diff_skew'] = stats.skew(data_diff),\n            features[f'{data_type}_intensive_dist'] = intensive_data.shape[0],\n            features[f'{data_type}_intensive_skew'] = intensive_skew,\n            features[f'{data_type}_non_intensive_dist'] = non_intensive_data.shape[0],\n            features[f'{data_type}_non_intensive_skew'] = non_intensive_skew,\n            #features[f'{data_type}_intensive_non_intensive_mean_ratio'] = intensive_data.mean() \/ non_intensive_data.mean(),\n            #features[f'{data_type}_intensive_non_intensive_std_ratio'] = intensive_data.std() \/ non_intensive_data.std(),\n            features[f'{data_type}_data_intensive_skew_difference'] = data_skew - intensive_skew,\n            features[f'{data_type}_data_non_intensive_skew_difference'] = data_skew - non_intensive_skew,\n            features[f'{data_type}_more_intensive_dist'] = more_intensive_data.shape[0],\n            \n            parts = 15\n            for p, part in enumerate(np.array_split(data, parts)):\n                features[f'{data_type}_part{p}_mean'] = part.mean()\n                \n            # Latent Features    \n            img = self._normalize(img_data)\n            images.append(img.astype(np.float32))\n            \n        img = np.stack(images)\n        img = np.moveaxis(img, (0, 1, 2, 3), (0, 3, 2, 1))\n        latent_features = self.latent_feature_generator(img)\n        \n        for i, lf in enumerate(latent_features):\n                features[f'latent_f{i}'] = lf\n          \n        return pd.DataFrame(features)\n    \n    \n    def run(self):\n        \n        for _, row in tqdm(self.df.iterrows()):\n            ID = row['Brats20ID']\n            \n            df_features = self._create_features(ID)\n            \n            self.df_voxel_stats  = pd.concat([self.df_voxel_stats, df_features], axis=0) \n            \n        self.df_voxel_stats.reset_index(inplace=True, drop=True) \n        self.df_voxel_stats = self.df_voxel_stats.merge(self.df[['Brats20ID', 'Age', 'Survival_days']], on='Brats20ID', how='left')\n            ","8ac1912e":"%%time\nmodel.eval();\nfg =  Features_Generator(df, model)\nfg.run()\nfg.df_voxel_stats.to_csv(\"df_with_voxel_stats_and_latent_features.csv\", index=False)\nfg.df_voxel_stats","5af68954":"df = pd.read_csv(\"df_with_voxel_stats_and_latent_features.csv\")#\n\ndf['is_train'] = 0\ndf['is_train'].loc[df['Survival_days'].notnull()] = 1\n\ndf['SD'] = df['Survival_days'].str.extract(r'(\\d+[.\\d]*)')\ndf['SD'] = df['SD'].astype(\"float64\")\ndf['Age'] = df['Age'].astype(\"float64\")\ndf.sample(5)","7707b396":"test_df = df[df[\"is_train\"] != True].copy()\ndf = df[df[\"is_train\"] == True].copy()\nprint(\"train ->\", df.shape, \"test ->\", test_df.shape)","c96c1ce5":"fig, ax = plt.subplots(figsize=(20, 10))\nsns.countplot(df['Age'].apply(lambda x: np.round(x, 0)), ax=ax, palette='Dark2')\n\nax.set_xticks(ax.get_xticks()[::2]);\nax.set_ylabel('number of unique (rounded) ages', fontsize=20)\nax.set_xlabel('unique (rounded) ages', fontsize=20)\nax.set_title(\"Distribution of rounded Ages in data\", fontsize=25, y=1.05, fontweight='bold');","ba3a64d2":"fig, ax = plt.subplots(figsize=(20, 10))\nk = 10\nsns.countplot(df['SD'].apply(lambda x: int(k * round(float(x)\/k))), ax=ax, palette='Dark2')#base * round(float(x)\/base)\n\nax.set_xticks(ax.get_xticks()[::2]);\nax.set_ylabel('number of unique (rounding to the nearest {k}) Survival_days', fontsize=15)\nax.set_xlabel(f'unique (rounding to the nearest {k}) Survival_days', fontsize=17)\nax.set_title(\"Distribution of rounded Survival_days in data\", fontsize=25, y=1.05, fontweight='bold');","0d9bde8d":"def metric(y_true, y_pred):\n    return np.mean(np.sum(np.abs(y_true - y_pred), axis=0)\/np.sum(y_true, axis=0))","e677aae0":"%%time\nNUM_FOLDS = 7\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=config.seed)\n\n\nfeatures = list(df.columns[1:-4])\n\noveral_score = 0\nfor target, c, w in [(\"Age\", 100, 0.5), (\"SD\", 5, 0.5)]:    \n    y_oof = np.zeros(df.shape[0])\n    y_test = np.zeros((test_df.shape[0], NUM_FOLDS))\n    \n    for f, (train_ind, val_ind) in enumerate(kf.split(df, df)):\n        train_df, val_df = df.iloc[train_ind], df.iloc[val_ind]\n        train_df = train_df[train_df[target].notnull()]\n\n        model = SVR(C=c, cache_size=3000.0)\n        model.fit(train_df[features], train_df[target])\n\n        y_oof[val_ind] = model.predict(val_df[features])\n        y_test[:, f] = model.predict(test_df[features])\n        \n    df[\"pred_{}\".format(target)] = y_oof\n    test_df[target] = y_test.mean(axis=1)\n    score = metric(df[df[target].notnull()][target].values, df[df[target].notnull()][\"pred_{}\".format(target)].values)\n    overal_score += w*score\n    print(target, np.round(score, 4))\n    print()\n    \nprint(\"Overal score:\", np.round(overal_score, 4))","5ac197bc":"prediction","00b2b94e":"## More visualization","ba717ba4":"ground truth","059a282e":"### Dataset and Dataloader","a2eb7bdb":"### training process","972f2f68":"# Metric and Loss","fb907707":"### convert 3d to 2d ground truth and prediction","89dcb1cc":"result","3bc3e35c":"# Trainer","97dbe830":"Checking quality of AE ","dd7ec18c":"helper classes and functions","e6b1f852":"# Data\n\nAll BraTS multimodal scans are available as NIfTI files (.nii.gz) and describe a) native (T1) and b) post-contrast T1-weighted (T1Gd), c) T2-weighted (T2), and d) T2 Fluid Attenuated Inversion Recovery (T2-FLAIR) volumes.\n\nAnnotations comprise the GD-enhancing tumor (ET \u2014 label 4), the peritumoral edema (ED \u2014 label 2), and the necrotic and non-enhancing tumor core (NCR\/NET \u2014 label 1).\nYou can look at the 3d data projection [here](https:\/\/www.kaggle.com\/polomarco\/brats20logs\/) or [here](https:\/\/www.youtube.com\/watch?v=0nliIOj2WVQ).\n\n# Formulation of the problem:\n+ 1. Each pixel must be labeled \u201c1\u201d if it is part of one of the classes (NCR\/NET \u2014 label 1, ED \u2014 label 2, ET \u2014 label 4), and \u201c0\u201d if not.\n+ 2. Make a prediction of age and survival days for each unique identifier in the data.\n\n# Solution\n+ 1. For automatic segmentation we will use Unet3d\n+ 2. To predict the age and number of days of survival: first, we will train the auto-encoder to scale the space from 4 * 240 * 240 * 150 to 512, and then extract the statistical values, \u200b\u200band hidden representations for each identifier in the data encoded by the pre-trained auto-encoder and based on this tabular data we will train SVR.\n","1be3c4bf":"# Experiments and Results","be993b61":"Now let's generates all latent features","aaf82e97":"### What's the data looks like ?","818c4c32":"# 3DUnet","edd0e8ef":"prediction","1a6cb2b9":"Data Preprocessing","dd7327c7":"Now that we have tabular data, we can use it to predict age and survival days.\nwe will use SVR for this purpose.","3b75073c":"training process","4b7d86d4":"# 3DAutoEncoder","09263b5d":"# Dataset DataLoader","444d4da0":"### 3d binary mask projection for ground truth and prediction","61eb4278":"ground truth"}}