{"cell_type":{"b2f1c33e":"code","07dadf39":"code","1082daf3":"code","bd362dd3":"code","c4d39441":"code","b124c1ac":"code","64999db8":"code","c7af083c":"code","ce1df2d1":"code","c2058494":"code","d80184fa":"code","2e2fec08":"code","f939d155":"code","563ce6ec":"code","0badbd3a":"code","f3ce6539":"code","3628ff7b":"code","9bed8a57":"code","774b93f7":"code","a1881d49":"code","4540292f":"code","920b0812":"code","4cc324ef":"code","5f772c2f":"code","da38e0ce":"code","66ea2459":"code","e9df3c49":"code","547c4feb":"code","b04b5755":"code","5e65b54c":"code","35fc183e":"code","fb369220":"code","6f357556":"code","e12f8ef7":"code","845d2a92":"code","6b415bec":"code","6a645ada":"code","8d835519":"code","05fb0fa1":"code","10be05eb":"code","f3179a52":"code","1a3bcc4c":"code","49a71952":"code","1d3c1d76":"code","654d4e55":"code","6587fe46":"code","0e67e3c9":"code","70c3ea7d":"code","7ef8a86e":"code","ecaa7dcd":"code","5561c3b5":"code","2cc7a735":"code","85c09e97":"code","1654cbfb":"code","d34828f4":"code","dbf73691":"code","e79fd5e3":"code","e36a9582":"code","0036470d":"code","0d83fcb4":"code","06014575":"code","99c0591f":"code","013bd9ec":"code","ec754e74":"code","57235380":"code","2b34f8b2":"code","fd7d04e3":"code","322d12f6":"code","0ed0af70":"code","940f6416":"code","c23418f5":"code","17a86ced":"code","671aca3b":"code","fd51e035":"code","1d5af708":"code","16f487b3":"code","b711761d":"code","dcdbbf52":"code","c2321ce7":"code","afb0797a":"code","95b56f9f":"code","7b82e81a":"code","8054f88b":"code","1cd4c033":"code","b180bc90":"code","630a6984":"code","74c76669":"code","cd9957cb":"code","a524d913":"code","81f86829":"code","996243de":"code","0963f112":"code","56c7d9dd":"code","81a28623":"code","0a66beeb":"code","337d69fb":"code","a217f98e":"code","d347c235":"code","489df8dd":"code","b495c677":"code","309796b8":"code","0ffd1691":"code","8e701bd6":"code","b75161ec":"code","ff94a377":"code","7dd44b46":"code","59ed9772":"code","0c82a698":"code","7169e519":"code","7d035244":"code","24e5c566":"code","37293603":"code","58313c3f":"code","3671de2e":"code","caacc31b":"code","add7e5ab":"code","5e16c594":"code","e674fe5b":"code","5ab8ef33":"code","91839dbc":"code","abbb5823":"code","67bdb101":"code","659b96ec":"code","9ec8d2ff":"code","e83628c9":"code","2bff90bf":"code","f0f29e9b":"code","0fd5135a":"code","43dec4fb":"code","df9edd6f":"code","0e1cb4a1":"code","c4415e96":"code","44b474b3":"code","c6fccc9e":"code","a860666f":"code","69b7cd7c":"code","de4dd8eb":"code","71017107":"code","b5fa7e2c":"markdown","dc4628bb":"markdown","6a2b978a":"markdown","5bc648bf":"markdown","70e916f4":"markdown","a3d539a6":"markdown","e522ed4c":"markdown","30fafca3":"markdown","de086114":"markdown","739ab203":"markdown","4194f92a":"markdown","f21491fb":"markdown","5557a176":"markdown","ccc92aeb":"markdown","aa26f622":"markdown","ac4895e9":"markdown","abaea11d":"markdown","f99d66ce":"markdown","b0807fe8":"markdown","9e5fa282":"markdown","0d4bc6a5":"markdown","d15249ab":"markdown","1a43e033":"markdown","bd918b97":"markdown","cacdc7cd":"markdown","726c4d62":"markdown","791c07e9":"markdown","50231d5d":"markdown","9cc88dc2":"markdown","af4b70c7":"markdown","39991d0f":"markdown","24a0d1e5":"markdown","d90e29b6":"markdown","cf6fade0":"markdown","4930e450":"markdown","681900ad":"markdown","f4eaabb3":"markdown","88d76ade":"markdown","1d9d338c":"markdown","162a5eb5":"markdown","994c53c4":"markdown","52493869":"markdown","031c2052":"markdown","bcf5330e":"markdown","a400f988":"markdown","78dc8776":"markdown","09535c59":"markdown","f3943173":"markdown","9fda42d3":"markdown","7ae0cbd8":"markdown","b60f082d":"markdown","75f61bff":"markdown","b1a49b91":"markdown","d4cb0ec8":"markdown","c5d66004":"markdown","1b6afaca":"markdown","1c4e68a4":"markdown","143647cd":"markdown","51463230":"markdown","98453d87":"markdown","3a89fb30":"markdown","1212964d":"markdown","e861903d":"markdown","069581f0":"markdown","2de2bcde":"markdown","f8a76cf4":"markdown","54690033":"markdown","cca6e974":"markdown","6845e873":"markdown","2523bd72":"markdown","20625a0b":"markdown","62f92b65":"markdown","a428f68f":"markdown","cedbe7d8":"markdown","9a7c05ea":"markdown","8b588fae":"markdown","bcf99402":"markdown","ce9f9734":"markdown","d89a3f0f":"markdown","6dade2b7":"markdown","9e5b7a6b":"markdown","c47bfbb7":"markdown","ec58a94a":"markdown","8bdc8071":"markdown","6aae7fcd":"markdown","b66db0e7":"markdown","7753ef4d":"markdown","8f473a6d":"markdown","54a79ab3":"markdown","e2458e7e":"markdown","7b64ccdd":"markdown","52458575":"markdown","f537fdd5":"markdown","7f1f1349":"markdown","165bc09b":"markdown","2dcc731b":"markdown","b4f45165":"markdown","3ccadfaa":"markdown","c6d1ea94":"markdown","d1d36979":"markdown","490ab1de":"markdown","54b1b1d6":"markdown","e85fa489":"markdown","01dfea92":"markdown","ee861678":"markdown","f26b6fb0":"markdown","5f2852d8":"markdown","c75ad7ff":"markdown","60b55adb":"markdown","d6ec8ed3":"markdown"},"source":{"b2f1c33e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07dadf39":"# Supress Warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n# Importing necessary libraries\n\nimport os\nimport chardet\n\nimport numpy as np\nimport pandas as pd\n\n# visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\n# Model analysis and building libraries\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.metrics import r2_score, mean_squared_error\n\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n","1082daf3":"# Reading the data\n\ndf = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\noriginal = df.copy()","bd362dd3":"df.shape","c4d39441":"# Viewing the dataset\n\ndf.head()","b124c1ac":"# Checking for features datatype \n\ndf.dtypes.value_counts()","64999db8":"# Checking the Null values\n\ndf.info()","c7af083c":"# Feature Analysis\n\ndf.describe(include='all')","ce1df2d1":"# Function to generate Bar Plots\n\ndef bar(title, x, size):\n  plt.figure(figsize=size)\n  ax = sns.countplot(x=x)\n  plt.title(title, fontsize=16)\n  plt.show()","c2058494":"ax = sns.distplot(df[\"SalePrice\"])\nax.set_xlabel(\"SalePrice\")\nax.set_title('Distribution of SalePrice')\nplt.show()","d80184fa":"df = df.drop(['Id'],axis=1)","2e2fec08":"# MSSubClass Feature Distribution \n\ndf['MSSubClass'].value_counts()*100\/len(df)","f939d155":"# We can group all labels having the percentage less than 5% into single group as OTHERS\n\nMSSubClassDict = {'MSSubClass': {\n    20:\t'1-STORY 1946 & NEWER ALL STYLES',\n    60:\t'2-STORY 1946 & NEWER',\n    50:\t'1-1\/2 STORY FINISHED ALL AGES',\n    120: '1-STORY W\/FINISHED ATTIC ALL AGES',\n    30: 'MSSubClass_Others',\n    40: 'MSSubClass_Others',\n    45: 'MSSubClass_Others',\n    70: 'MSSubClass_Others',\n    75: 'MSSubClass_Others',\n    80: 'MSSubClass_Others',\n    85: 'MSSubClass_Others',\n    90: 'MSSubClass_Others',\n    150: 'MSSubClass_Others',\n    160: 'MSSubClass_Others',\n    180: 'MSSubClass_Others',\n    190: 'MSSubClass_Others'\n}} \n\ndf['MSSubClass'] = df.replace(MSSubClassDict)['MSSubClass']\n\n# Visualization\nbar('MSSubClass Distribution', df['MSSubClass'], (15,6))","563ce6ec":"# MSZoning Feature Distribution \n\ndf['MSZoning'].value_counts()*100\/len(df)","0badbd3a":"# We can group all labels having the percentage less than 10 % into single group as OTHERS\n\nMSZone = {'MSZoning': {\n    'FV':\t'MSZone_Others',\n    'RH':\t'MSZone_Others',\n    'C (all)':\t'MSZone_Others'\n}} \n\ndf['MSZoning'] = df.replace(MSZone)['MSZoning']\n\n# Visualization\nbar('MSZoning Distribution', df['MSZoning'], (8,6))","f3ce6539":"# Street can be dropped as data is fully biased with 99.5% of Pave\nprint(df['Street'].value_counts()*100\/len(df), '\\n')\n\ndf['Street'].value_counts()\n","3628ff7b":"# Alley can be dropped as there are NUll values more than 94%\nprint('Null Value Percentage:' ,df['Alley'].isna().sum()*100\/len(df), '\\n')\n\ndf['Alley'].value_counts()","9bed8a57":"# Utilities can be dropped as data is fully biased with 99.9% of AllPub\nprint(df['Utilities'].value_counts()*100\/len(df), '\\n')\n\ndf['Utilities'].value_counts()","774b93f7":"# Dropping Alley, Street, Utilities\ndf = df.drop(['Utilities','Alley','Street'], axis=1)","a1881d49":"# LotFrontage can be derived through Lot Area (LotFrontage = LotArea\/LotWidth)\n\n# Missing Values in Lot Frontage\ndf['LotFrontage'].isna().sum()","4540292f":"print(df['LotFrontage'].describe())\nax = sns.boxplot(df['LotFrontage'])\nplt.show()","920b0812":"# Imputing Null values with median\ndf['LotFrontage'] = df['LotFrontage'].fillna(df['LotFrontage'].median())","4cc324ef":"df['LotShape'].value_counts()","5f772c2f":"# We can group Lot shape into 2 labels Reg and IR\n\nLot = {'LotShape': {\n    'IR1':\t'IR',\n    'IR2':\t'IR',\n    'IR3':\t'IR'\n}} \n\ndf['LotShape'] = df.replace(Lot)['LotShape']\n\n\n# Visualization\nbar('LotShape Distribution', df['LotShape'], (8,6))","da38e0ce":"# Lot Config\ndf['LotConfig'].value_counts()","66ea2459":"# We can group Lot shape into 3 labels Merging (Inside, Corner, Others)\n\nLot = {'LotConfig': {\n    'CulDSac':\t'LotConfig_others',\n    'FR2':\t'LotConfig_others',\n    'FR3':\t'LotConfig_others'\n}} \n\ndf['LotConfig'] = df.replace(Lot)['LotConfig']\n\n# Visualization\nbar('LotConfig Distribution', df['LotConfig'], (8,6))","e9df3c49":"ax = sns.displot(df, x=\"LotArea\", kind='hist', kde=True, height=6, aspect=1.5)\nax.set_axis_labels(\"Area SF\")\nax.fig.suptitle('Distribution of LotArea')\nplt.show()","547c4feb":"# LandContour\n\ndf['LandContour'].value_counts() ","b04b5755":"# We can group Landcontour into 2 labels Merging (Lvl,  Others)\n\nLand = {'LandContour': {\n    'Bnk':\t'Landcont_others',\n    'HLS':\t'Landcont_others',\n    'Low':\t'Landcont_others'\n}} \n\ndf['LandContour'] = df.replace(Land)['LandContour']","5e65b54c":"# LandSlope can be dropped as 90% is from singe class\n\ndf['LandSlope'].value_counts()","35fc183e":"df = df.drop(['LandSlope'],axis=1)","fb369220":"# We cant group these as each location has its resembelence\n\ndf['Neighborhood'].value_counts()*100\/len(df)","6f357556":"# Condition1 and Condition2 can be conidered as a single entity by its defination\n\ndf[['Condition1','Condition2']].value_counts()","e12f8ef7":"# Almost every row has Norm Condition to proximities ,so both columns can be ignored\n\ndf=df.drop(['Condition1','Condition2'],axis=1)","845d2a92":"# HouseStyle\n\ndf['HouseStyle'].value_counts()","6b415bec":"# We can group HouseStyle into 4 labels  (1Story,  2Story, 1.5Story, Others)\n\nHouse = {'HouseStyle': {\n    'SLvl':\t'Housestyle_others',\n    'SFoyer':\t'Housestyle_others',\n    '1.5Unf':\t'Housestyle_others',\n    '2.5Unf':\t'Housestyle_others',\n    '2.5Fin':\t'Housestyle_others'\n}} \n\ndf['HouseStyle'] = df.replace(House)['HouseStyle']\n\n\n# Visualization\nbar('HouseStyle Distribution', df['HouseStyle'], (8,6))","6a645ada":"# Building Type\n\ndf['BldgType'].value_counts()","8d835519":"# We can group Building type into 2 labels (1Fam, Others)\n\nHouse = {'BldgType': {\n    'TwnhsE':\t'BldgType_others',\n    'Duplex':\t'BldgType_others',\n    'Twnhs':\t'BldgType_others',\n    '2fmCon':\t'BldgType_others'\n}} \n\ndf['BldgType'] = df.replace(House)['BldgType']\n\n\n# Visualization\nbar('BldgType Distribution', df['BldgType'], (8,6))","05fb0fa1":"ax = sns.distplot(df[\"OverallQual\"])\nax.set_xlabel(\"OverallQual\")\nax.set_title('Distribution of OverallQual')\nplt.show()","10be05eb":"ax = sns.distplot(df[\"OverallCond\"])\nax.set_xlabel(\"OverallCond\")\nax.set_title('Distribution of OverallCond')\nplt.show()\n","f3179a52":"df = df.drop(['YearBuilt'],axis=1)","1a3bcc4c":"# Will consider the age of house since last remodelled and last sold\ndf['YearRemodAdd'] = df['YrSold'] - df['YearRemodAdd']\n\n# YearRemodAdd can be remain same as continous value (Ordinal Categories)\n\n# YrSold can be dropped\ndf = df.drop('YrSold', axis=1)","49a71952":"# RoofStyle\n\ndf['RoofStyle'].value_counts()","1d3c1d76":"# We can group RoofStyle into 3 labels  (Gaple, Hip, Others)\n\nHouse = {'RoofStyle': {\n    'Flat':\t'RoofStyle_others',\n    'Gambrel':\t'RoofStyle_others',\n    'Mansard':\t'RoofStyle_others',\n    'Shed':\t'RoofStyle_others'\n}} \n\ndf['RoofStyle'] = df.replace(House)['RoofStyle']\n\n# Visualization\nbar('MSZoning Distribution', df['MSZoning'], (8,6))","654d4e55":"# Roof Material\n\ndf['RoofMatl'].value_counts()*100\/len(df)","6587fe46":"# RoofMatl can be dropped as 98% values are from CopmShg\n\ndf = df.drop(['RoofMatl'],axis=1)","0e67e3c9":"# Exterior1st and Exterior2nd can be conidered as a single entity by its defination\n\ndf[['Exterior1st','Exterior2nd']].value_counts()","70c3ea7d":"df['Exterior1st'].value_counts()","7ef8a86e":"# Exteriorist2nd can be dropped\ndf = df.drop(['Exterior2nd'],axis=1)\n\n# We can group Exteriorist1st into 5 labels\n\nHouse = {'Exterior1st': {\n    'CemntBd':\t'Exterior_others',\n    'BrkFace':\t'Exterior_others',\n    'Stucco':\t'Exterior_others',\n    'WdShing':\t'Exterior_others',\n    'AsbShng':\t'Exterior_others',\n    'BrkComm':\t'Exterior_others',\n    'Stone':\t'Exterior_others',\n    'ImStucc':\t'Exterior_others',\n    'CBlock':\t'Exterior_others',\n    'AsphShn':\t'Exterior_others'\n}} \n\ndf['Exterior1st'] = df.replace(House)['Exterior1st']\n\n\n# Visualization\nbar('Exterior1st Distribution', df['Exterior1st'], (8,6))","ecaa7dcd":"# Null values treated with None\nprint(df['MasVnrType'].isna().sum())\n\ndf['MasVnrType'] = df['MasVnrType'].fillna('None')","5561c3b5":"# MasVnrType\ndf['MasVnrType'].value_counts()","2cc7a735":"# We can group MasVnrType into 3 labels\n\nHouse = {'MasVnrType': {\n    'BrkCmn':\t'Stone'\n}} \n\ndf['MasVnrType'] = df.replace(House)['MasVnrType']","85c09e97":"df['MasVnrArea'].describe()","1654cbfb":"ax = sns.boxplot(df['MasVnrArea'])","d34828f4":"# Null values treated with Median vales\nprint(df['MasVnrArea'].isna().sum())\n\ndf['MasVnrArea'] = df['MasVnrArea'].fillna(df['MasVnrArea'].median())","dbf73691":"# ExterQual\ndf['ExterQual'].value_counts()","e79fd5e3":"# ExterCond\ndf['ExterCond'].value_counts()","e36a9582":"df = df.drop(['ExterQual','ExterCond'],axis=1)","0036470d":"# Foundation \n\ndf['Foundation'].value_counts()","0d83fcb4":"# We can group Foundation into 3 labels\n\nHouse = {'Foundation': {\n    'BrkTil':\t'Foundation_Others',\n    'Slab':\t'Foundation_Others',\n    'Stone':\t'Foundation_Others',\n    'Wood':\t'Foundation_Others'\n}} \n\ndf['Foundation'] = df.replace(House)['Foundation']","06014575":"# Bsmnt Condition: Most of the values are typical and good so this feature can be ignored\n\ndf['BsmtCond'].value_counts()","99c0591f":"df = df.drop(['BsmtCond'],axis=1)","013bd9ec":"# Bsmnt Condition: Most of the values are typical and good so this feature can be ignored\n\ndf['BsmtQual'].value_counts()","ec754e74":"df = df.drop(['BsmtQual'],axis=1)","57235380":"# BsmtExposure will divide into two clases yes\/no\n\ndf['BsmtExposure'].value_counts()","2b34f8b2":"# Imputing null values with No since NA indicates NO basement here\n# NO basement = No Basement Exposure\n\ndf['BsmtExposure'] = df['BsmtExposure'].fillna('No')","fd7d04e3":"House = {'BsmtExposure': {\n    'Av':\t'Yes',\n    'Gd':\t'Yes',\n    'Mn':\t'Yes'\n}} \n\ndf['BsmtExposure'] = df.replace(House)['BsmtExposure']","322d12f6":"# BaseFinType1\n\ndf['BsmtFinType1'].value_counts()","0ed0af70":"# Imputing null values with mode\n\ndf['BsmtFinType1'] = df['BsmtFinType1'].fillna('No Basement')","940f6416":"# We can convert labels into nominal increasing labels\n\nHouse = {'BsmtFinType1': {\n    'Unf':\t0,\n    'No Basement':\t0,\n    'LwQ':\t1,\n    'Rec':\t2,\n    'BLQ':\t3,\n    'ALQ':\t4,\n    'GLQ':\t5,\n}} \n\ndf['BsmtFinType1'] = df.replace(House)['BsmtFinType1']","c23418f5":"# BsmtFinype2 is an extension for BsmtFinType2 and can be dropped because most of them are unfininshed\n\ndf['BsmtFinType2'].value_counts()","17a86ced":"# Dropping BsmtFinType2\ndf = df.drop(['BsmtFinType2'],axis=1)","671aca3b":"# TotalBsmtSf = BsmtFinSF1 + BsmtFinSF2\n# Hence both BsmtFinSF1 and BsmtFinSF2 can be dropped\n\ndf = df.drop(['BsmtFinSF1', 'BsmtFinSF2'],axis=1)","fd51e035":"# Both FinishedBsmt and  UnfinishedBsmt can be made as a single feature\n# As anyone can finish basement in unfinished area after purchasing\n# Hence we can drop BsmtUnfSF\n\ndf = df.drop(['BsmtUnfSF'],axis=1)","1d5af708":"# Heating \n\ndf['Heating'].value_counts()","16f487b3":"# Heating can be dropped beacuse most of the values are from GasA\ndf = df.drop(['Heating'],axis=1)","b711761d":"df['HeatingQC'].value_counts()","dcdbbf52":"# Most of the values in HeatingQC are good so the column can be dropped\ndf = df.drop(['HeatingQC'],axis=1)","c2321ce7":"df['CentralAir'].value_counts()","afb0797a":"# Most of the values in Central Air are good so the column can be dropped\ndf = df.drop(['CentralAir'],axis=1)","95b56f9f":"df['Electrical'].value_counts()","7b82e81a":"# Most of the values in Electrical are good so the column can be dropped\ndf = df.drop(['Electrical'],axis=1)","8054f88b":"df['LowQualFinSF'].value_counts()*100\/len(df)","1cd4c033":"# Most of the houses dont have low quality finished , so this feature can be dropped\n\ndf = df.drop(['LowQualFinSF'],axis=1)","b180bc90":"# BsmtFullbath this can be either yes or No as most \n\ndf['BsmtFullBath'].value_counts()","630a6984":"# We can convert labels into nominal increasing labels\n\nHouse = {'BsmtFullBath': {\n    2:\t1,\n    3:\t1,\n}} \n\ndf['BsmtFullBath'] = df.replace(House)['BsmtFullBath']","74c76669":"# Halfbath this can be either yes or No as most \n\ndf['HalfBath'].value_counts()","cd9957cb":"# We can convert labels into nominal increasing labels\n\nHouse = {'HalfBath': {\n    2:\t1,\n    3:\t1,\n}} \n\ndf['HalfBath'] = df.replace(House)['HalfBath']","a524d913":"print(df['BsmtHalfBath'].value_counts())\n\n#Most of the houses sont have basement half bathroom so the column can be ignored\ndf = df.drop(['BsmtHalfBath'],axis=1)","81f86829":"df['GrLivArea'].value_counts()      ","996243de":"# KitchenQual\nprint(df['KitchenQual'].value_counts())\n\n# Most of the Quality values are typical and Good so\n# Kitchen quality can be ignored\n\ndf = df.drop(['KitchenQual'],axis=1)","0963f112":"# KitchenAbvGr\nprint(df['KitchenAbvGr'].value_counts())\n\n# Most of the Quality values are 1 kitchen so,\n#  KitchenAbvGr can be ignored\n\ndf = df.drop(['KitchenAbvGr'],axis=1)","56c7d9dd":"# Functional\nprint(df['Functional'].value_counts())\n\n# Most of the Functional values are Typical,\n#  Functional can be ignored\n\ndf = df.drop(['Functional'],axis=1)","81a28623":"# FireplaceQu\nprint(df['FireplaceQu'].value_counts())\nprint('\\n Null values: ', df['FireplaceQu'].isna().sum())\n# Most of the FireplaceQu values are Typical and Good also many Null calues,\n# FireplaceQu can be ignored\n\ndf = df.drop(['FireplaceQu'],axis=1)","0a66beeb":"# GarageQual\n\nprint('\\n Null values: ', df['GarageQual'].isna().sum())\n\n# NA in datset refers to no garage\ndf['GarageQual'] = df['GarageQual'].fillna('No')\n\nprint(df['GarageQual'].value_counts())\n\n# Most of the GarageQual values are Typical and Good also many Null calues,\n# GarageQual can be ignored\n\ndf = df.drop(['GarageQual'],axis=1)","337d69fb":"# GarageCond\nprint('\\n Null values: ', df['GarageCond'].isna().sum())\n\n# NA in datset refers to no garage\ndf['GarageCond'] = df['GarageCond'].fillna('No')\n\nprint(df['GarageCond'].value_counts())\n\n# Most of the GarageCond values are Typical and Good also many Null calues,\n# GarageCond can be ignored\n\ndf = df.drop(['GarageCond'],axis=1)","a217f98e":"# Garage Year Built can be ignored as its not important in business aspect\ndf = df.drop(['GarageYrBlt'],axis=1)","d347c235":"# GarageType\n\ndf['GarageType'] = df['GarageType'].fillna('No Garage')","489df8dd":"# We can convert labels into two groups (Attached, Not Attached)\n\nHouse = {'GarageType': {\n    'Attchd':\t1,\n    'Detchd':\t0,\n    'BuiltIn': 0,\n    'Basment': 0,\n    'CarPort': 0,\n    '2Types': 0,\n    'No Garage': 0\n}} \n\ndf['GarageType'] = df.replace(House)['GarageType']","b495c677":"# Garage Cars is more significant than Garage Area, it tells occupancy of cars\n# GarageArea can be dropped\n\ndf = df.drop(['GarageArea'],axis=1)","309796b8":"df['GarageFinish'].value_counts()\n\ndf['GarageFinish'] = df['GarageFinish'].fillna('No Garage')","0ffd1691":"# We can convert labels into two groups (Attached, Not Attached)\n\nHouse = {'GarageFinish': {\n    'Unf':\t0,\n    'RFn':\t1,\n    'No Garage': 1,\n    'Fin': 1\n}} \n\ndf['GarageFinish'] = df.replace(House)['GarageFinish']","8e701bd6":"# PavedDrive\nprint('\\nNull values: ', df['PavedDrive'].isna().sum())\n\nprint(df['PavedDrive'].value_counts())\n\n# Most of the GarageCond values are Typical and Good also many Null calues,\n# GarageCond can be ignored\n\ndf = df.drop(['PavedDrive'],axis=1)","b75161ec":"# OpenPorchSF and EnclosedPorch are complimentary if one exists other wont exist","ff94a377":"# 3SsnPorch\nprint('\\nNull values: ', df['3SsnPorch'].isna().sum())\n\nprint(df['3SsnPorch'].value_counts())\n\n# Most of the 3SsnPorch values are 0 means most wont have it\n# 3SsnPorch can be ignored\n\ndf = df.drop(['3SsnPorch'],axis=1)","7dd44b46":"# ScreenPorch\nprint('\\nNull values: ', df['ScreenPorch'].isna().sum())\n\nprint(df['ScreenPorch'].value_counts())\n\n# Most of the ScreenPorch values are 0 means most wont have it\n# ScreenPorch can be ignored\n\ndf = df.drop(['ScreenPorch'],axis=1)","59ed9772":"# PoolQC\nprint('\\nNull values: ', df['PoolQC'].isna().sum())\n\nprint(df['PoolQC'].value_counts())\n\n# Most of the PoolQC values are null values\n# PoolQC can be ignored\n\ndf = df.drop(['PoolQC'],axis=1)","0c82a698":"# Fence\nprint('\\nNull values: ', df['Fence'].isna().sum())\n\nprint(df['Fence'].value_counts())\n\n# Most of the Fence values are null values\n# Fence can be ignored\n\ndf = df.drop(['Fence'],axis=1)","7169e519":"# MiscFeature\nprint('\\nNull values: ', df['MiscFeature'].isna().sum())\n\nprint(df['MiscFeature'].value_counts())\n\n# Most of the MiscFeature values are null values\n# MiscFeature can be ignored\n\ndf = df.drop(['MiscFeature'],axis=1)\n\n# MiscValues\n# we should sropMiscValues as MiscFeatures are dropped\ndf = df.drop(['MiscVal'],axis=1)\n","7d035244":"# MoSold\n\nHouse = {'MoSold': {\n    1 : 'Jan',\n    2 :\t'Feb',\n    3 : 'Mar',\n    4 : 'Apr',\n    5 : 'May',\n    6 : 'Jun',\n    7 : 'Jul',\n    8 : 'Aug',\n    9 : 'Sep',\n    10: 'Oct',\n    11: 'Nov',\n    12: 'Dec'\n}} \n\ndf['MoSold'] = df.replace(House)['MoSold']\n\ndf['MoSold'].value_counts()","24e5c566":"#Saletype\n\nprint(df['SaleType'].value_counts())\n\nHouse = {'SaleType': {\n    'COD' : 'Sales_others',\n    'ConLD' :\t'Sales_others',\n    'ConLw' : 'Sales_others',\n    'ConLI' : 'Sales_others',\n    'CWD' : 'Sales_others',\n    'Oth' : 'Sales_others',\n    'Con' : 'Sales_others'\n}} \n\n#df['SaleType'] = df.replace(House)['SaleType']\n","37293603":"# SaleCondition\n\nprint(df['SaleCondition'].value_counts())\n\n\nHouse = {'SaleCondition': {\n    'Family' : 'SalesCon_others',\n    'Alloca' :\t'SalesCon_others',\n    'AdjLand' : 'SalesCon_others'\n}} \n\ndf['SaleCondition'] = df.replace(House)['SaleCondition']","58313c3f":"df.describe(include='all')","3671de2e":"clean_df = df.copy()","caacc31b":"# dummy values are encoded for nominal values\n\nall_categorical_features = list(clean_df.select_dtypes(include=['object']).columns)\n\ndummy_encoding = pd.get_dummies(clean_df[all_categorical_features], drop_first=True)\n\n# Concatinating with existing datafraem\ndf_cleaned = pd.concat([clean_df, dummy_encoding], axis=1)\n\n# Drop parent category column which are encoded \ndf_cleaned = df_cleaned.drop(all_categorical_features , axis=1)","add7e5ab":"df_cleaned","5e16c594":"np.random.seed(0)\n\nX_train, X_test = train_test_split(df_cleaned, test_size=0.3,  random_state=40)","e674fe5b":"all_numerical_features = list(clean_df.select_dtypes(include=['float64','int64']).columns)\n\n# Scaling high valued features to range of [0,1] using MinMax Scaler\nscaler = MinMaxScaler()\nX_train[all_numerical_features] = scaler.fit_transform(X_train[all_numerical_features])\n\n# Scaling for Test Data\nscaler = MinMaxScaler()\nX_test[all_numerical_features] = scaler.fit_transform(X_test[all_numerical_features])","5ab8ef33":"# SalePrice is a target variabla\n\ny_train = X_train.pop('SalePrice')\ny_test = X_test.pop('SalePrice')","91839dbc":"X_train.shape","abbb5823":"regressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# Selecting 30 features through RFE \nfeatures = RFE(regressor, 30)\nrfe = features.fit(X_train, y_train)","67bdb101":"rfe_list = list(zip(X_train.columns, rfe.support_, rfe.ranking_))\nrfe_list ","659b96ec":"# list of only top 20 featuers \nrfe_selected = [r[0] for r in rfe_list if r[1] == True]","9ec8d2ff":"lm = LinearRegression()\n\nlm.fit(X_train[rfe_selected], y_train)","e83628c9":"# Metric Evaluation\n\ny_pred_train = lm.predict(X_train[rfe_selected])\nr2_train_lr = r2_score(y_train, y_pred_train)\nmse_train_lr = mean_squared_error(y_train, y_pred_train)\nprint('Train R2 score: ', r2_train_lr)\nprint('Train MSE score: ', mse_train_lr)\n\ny_pred_test = lm.predict(X_test[rfe_selected])\nr2_test_lr = r2_score(y_test, y_pred_test)\nmse_test_lr = mean_squared_error(y_test, y_pred_test)\nprint('Test R2 score: ', r2_test_lr)\nprint('Test MSE score: ', mse_test_lr)\n\nres = pd.DataFrame(columns=('Model', 'R2', 'MSE','Type'))\nres.loc[0] = ['Vanila',r2_train_lr, mse_train_lr, 'Train']\nres.loc[1] = ['Vanila',r2_test_lr, mse_test_lr, 'Test']","2bff90bf":"ridge = Ridge()\n\n# list of alphas to tune \nparams = {'alpha': [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, \n 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]}\n","f0f29e9b":"# cross validation\nfolds = 5\nmodel_cv = GridSearchCV(estimator = ridge, \n                        param_grid = params, \n                        scoring= 'r2',  \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1) \n#model_cv.fit(X_train_rfe, y_train)            \nmodel_cv.fit(X_train[rfe_selected], y_train) ","0fd5135a":"mean_train_score = model_cv.cv_results_['mean_train_score']\nmean_test_score = model_cv.cv_results_['mean_test_score']\n\nplot_data_train = [[params['alpha'][r], mean_train_score[r], 'Train'] for r in range(len(params['alpha']))]\nplot_data_test = [[params['alpha'][r], mean_test_score[r], 'Test'] for r in range(len(params['alpha']))]\n\nplot_data_train = pd.DataFrame(plot_data_train,columns=['Lambda','Value','Data'])\nplot_data_test = pd.DataFrame(plot_data_test,columns=['Lambda','Value','Data'])\n\nplot_data = pd.concat([plot_data_train, plot_data_test])\n\nax = sns.lineplot(x=plot_data['Lambda'], y=plot_data['Value'], hue=plot_data['Data'])\nplt.legend()\nplt.xlabel('Lambda')\nplt.ylabel('Mean score')\nplt.show()","43dec4fb":"# Printing the best hyperparameter alpha\n\nprint(model_cv.best_params_)","df9edd6f":"#Fitting Ridge model for alpha\nalpha = model_cv.best_params_['alpha']\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train[rfe_selected], y_train)\nprint(ridge.coef_)","0e1cb4a1":"# Metric Evaluation\n\ny_pred_train = ridge.predict(X_train[rfe_selected])\nr2_train_lr = r2_score(y_train, y_pred_train)\nmse_train_lr = mean_squared_error(y_train, y_pred_train)\nprint('Train R2 score: ', r2_train_lr)\nprint('Train MSE score: ', mse_train_lr)\n\ny_pred_test = ridge.predict(X_test[rfe_selected])\nr2_test_lr = r2_score(y_test, y_pred_test)\nmse_test_lr = mean_squared_error(y_test, y_pred_test)\nprint('Test R2 score: ', r2_test_lr)\nprint('Test MSE score: ', mse_test_lr)\n\nres.loc[2] = ['Ridge',r2_train_lr, mse_train_lr, 'Train']\nres.loc[3] = ['Ridge',r2_test_lr, mse_test_lr, 'Test']","c4415e96":"lasso = Lasso()\n\n# list of alphas to tune \nparams = {'alpha': [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, \n 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]}\n","44b474b3":"# cross validation\nfolds = 5\nmodel_cv = GridSearchCV(estimator = lasso, \n                        param_grid = params, \n                        scoring= 'r2',  \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1) \n       \nmodel_cv.fit(X_train[rfe_selected], y_train) ","c6fccc9e":"mean_train_score = model_cv.cv_results_['mean_train_score']\nmean_test_score = model_cv.cv_results_['mean_test_score']\n\nplot_data_train = [[params['alpha'][r], mean_train_score[r], 'Train'] for r in range(len(params['alpha']))]\nplot_data_test = [[params['alpha'][r], mean_test_score[r], 'Test'] for r in range(len(params['alpha']))]\n\nplot_data_train = pd.DataFrame(plot_data_train,columns=['Lambda','Value','Data'])\nplot_data_test = pd.DataFrame(plot_data_test,columns=['Lambda','Value','Data'])\n\nplot_data = pd.concat([plot_data_train, plot_data_test])\n\nax = sns.lineplot(x=plot_data['Lambda'], y=plot_data['Value'], hue=plot_data['Data'])\nplt.legend()\nplt.xlabel('Lambda')\nplt.ylabel('Mean score')\nplt.show()","a860666f":"# Printing the best hyperparameter alpha\n\nprint(model_cv.best_params_)","69b7cd7c":"# Fitting Lasso model for alpha\nalpha = model_cv.best_params_['alpha']\nlasso = Lasso(alpha=alpha)\n\nlasso.fit(X_train[rfe_selected], y_train)\nprint(lasso.coef_)","de4dd8eb":"# Metric Evaluation\n\ny_pred_train = lasso.predict(X_train[rfe_selected])\nr2_train_lr = r2_score(y_train, y_pred_train)\nmse_train_lr = mean_squared_error(y_train, y_pred_train)\nprint('Train R2 score: ', r2_train_lr)\nprint('Train MSE score: ', mse_train_lr)\n\ny_pred_test = lasso.predict(X_test[rfe_selected])\nr2_test_lr = r2_score(y_test, y_pred_test)\nmse_test_lr = mean_squared_error(y_test, y_pred_test)\nprint('Test R2 score: ', r2_test_lr)\nprint('Test MSE score: ', mse_test_lr)\n\nres.loc[4] = ['Lasso',r2_train_lr, mse_train_lr, 'Train']\nres.loc[5] = ['Lasso',r2_test_lr, mse_test_lr, 'Test']\n","71017107":"# Metrics Coparison for Models\nres.pivot_table(index='Model', columns=['Type'],values=['R2','MSE'])","b5fa7e2c":"> Exterior Condition and Quality have most of the ratings as Typical and Good. \n\n> This Feature wont be significant and can be dropped","dc4628bb":"**Roof Style**","6a2b978a":"`Neighborhood`: Physical locations within Ames city limits\n","5bc648bf":"# Conclusion","70e916f4":"`RoofStyle`: Type of roof\n\n`RoofMatl`: Roof material\n\n`Exterior1st`: Exterior covering on house\n\n`Exterior2nd`: Exterior covering on house (if more than one material)\n\n`MasVnrType`: Masonry veneer type\n\n`MasVnrArea`: Masonry veneer area in square feet\n\n`ExterQual`: Evaluates the quality of the material on the exterior \n\n`ExterCond`: Evaluates the present condition of the material on the exterior","a3d539a6":"**YearBuilt** and **YearRemodAdd**","e522ed4c":"**BsmtFullBath**","30fafca3":"**Land Slope**","de086114":"**BsmtQual**","739ab203":"## Dividing Data to Dependent and Independent Variable\n\n> `SalePrice` is considered as Target Variable ","4194f92a":"**Functional**","f21491fb":"> There are `1460` rows in housing dataset\n\n> We have around `81` features\/attributes","5557a176":"## Problem Statement\n\nA US-based housing company named Surprise Housing has decided to enter the Australian market. The company uses data analytics to purchase houses at a price below their actual values and flip them on at a higher price. For the same purpose, the company has collected a data set from the sale of houses in Australia. The data is provided in the CSV file below.\n\n \n\nThe company is looking at prospective properties to buy to enter the market. You are required to build a regression model using regularisation in order to predict the actual value of the prospective properties and decide whether to invest in them or not.\n\n \n\nThe company wants to know:\n\n1. Which variables are significant in predicting the price of a house, and\n\n2. How well those variables describe the price of a house.\n\n \n\nAlso, determine the optimal value of lambda for ridge and lasso regression.\n\n ","ccc92aeb":"The Variance explained (r2) by Train and Test is 85% and 72%\n\n\n> Will try to reduce the overfitting between Train and Test sets using Regularization","aa26f622":"## Normalizing Features\n\nDifferent features have different units of measurement and hence few features contains high valued records and few features contains low valued records\n\n> We are going to use MinMax Scaler to normalize the features\n\n> Normalizing helps to reach minima easily","ac4895e9":"## Basement","abaea11d":"**Neighbourhood**","f99d66ce":"> Outliners are there so imputing null values with Median","b0807fe8":"## Garage, Drive and Fireplaces","9e5fa282":"`Foundation`: Type of foundation\n\t\t\t\t\n`BsmtQual`: Evaluates the height of the basement\n\t\t\n`BsmtCond`: Evaluates the general condition of the basement\n\n`BsmtExposure`: Refers to walkout or garden level walls\n\t\n`BsmtFinType1`: Rating of basement finished area\n\t\t\n`BsmtFinSF1`: Type 1 finished square feet\n\n`BsmtFinType2`: Rating of basement finished area (if multiple types)\n\n`BsmtFinSF2`: Type 2 finished square feet\n\n`BsmtUnfSF`: Unfinished square feet of basement area\n\n`TotalBsmtSF`: Total square feet of basement area","0d4bc6a5":"`SalePrice` is Considered as Target Variable","d15249ab":"## RFE for Variable Selection","1a43e033":"## Features Encoding to dummy variables\n\nCategorical variables are dummy encoded by dropping the first column to avoid collinearlity among them ","bd918b97":"**Electrical**","cacdc7cd":"**Foundation**","726c4d62":"**GarageQual**","791c07e9":"**ExterQual and ExterCond**","50231d5d":"**GarageCars, GarageArea**","9cc88dc2":"**MasVnrType**","af4b70c7":"**HalfBath**","39991d0f":"**BsmtCond**","24a0d1e5":"`OpenPorchSF`: Open porch area in square feet\n\n`EnclosedPorch`: Enclosed porch area in square feet\n\n`3SsnPorch`: Three season porch area in square feet\n\n`ScreenPorch`: Screen porch area in square feet\n\n`PoolArea`: Pool area in square feet\n\n`PoolQC`: Pool quality","d90e29b6":"**Central Air**","cf6fade0":"## LandSlope, LandContour and Neighbourhood","4930e450":"**Exterior1st and Exterior2nd**","681900ad":"**KitchenAbvGr**","f4eaabb3":"`LotFrontage`: Linear feet of street connected to property. Its can be calculated if LotArea and Lot width is known\n\n`LotArea`: Lot size in square feet\n\n`LotShape`: General shape of property\n\n`LotConfig`: Lot configuration","88d76ade":"> We can group all IR into single group","1d9d338c":"**Fence**","162a5eb5":"**FireplaceQu**","994c53c4":"`LandContour`: Flatness of the property\n\n`LandSlope`: Slope of property\n","52493869":"**GarageFinish**","031c2052":"**BsmtSF**","bcf5330e":"**GarageYrBlt**","a400f988":"## Rooms and RoomsSF","78dc8776":"HyperParameter Tuning using Cross validation and Grid Search","09535c59":"## Roof and Exterior","f3943173":"Imputing 259 null values with median as there are outliners","9fda42d3":"> OverallQual can be remain same as continous value (Ordinal Categories)\n\n> OverallCond can also be remain same as continous value (Ordinal Categories)\n","7ae0cbd8":"### Lasso Regularization\n","b60f082d":"## Miscellaneous and Sales","75f61bff":"**KitchenQual**","b1a49b91":"## Train Test Split\n\nThe overall dataset size has around 1460 records. Comparitively its a small dataset so we will try to split data into 7:3 ratio. \n\n> Here we will consider 30% data as test set","d4cb0ec8":"## Buiding Condition, Style and Quality","c5d66004":"**MasVnrArea**","1b6afaca":"> Target Variable is normally distributed and there are few outliners which will normalised by scaling during model building","1c4e68a4":"**BsmtHalfBath**","143647cd":"# Data Understanding","51463230":"## Vanilla Model for selected 30 Features","98453d87":"**GarageType**","3a89fb30":"**SaleCondition**","1212964d":"## Lot","e861903d":"**Pool**","069581f0":"**GrLivArea**","2de2bcde":"**Condition1 and Condition2**","f8a76cf4":"**Overall Cond**","54690033":"* As Mentioned Earlier Ridge Regularized Model is selected as a final model\n* In Vanilla Model (Basic Linear Regression) the model is clearly overfitting as Test Accuracy is 77% and Train Accuracy is 85%.\n* After Regularization, the model is now not overfitting as difference between Test and Train Accuracy is 1%.\n* The Modal has same accuracy on unseen or future data which is quiet generalised and robust model\n* There is minimal bias as accuracy is stuck around 85% which can be increased with increasing the training data.\n\n\n*Ridge Model is considered as Generalised Model*","cca6e974":"`Alley`: Type of alley access to property. Feature can be dropped as there are 94% of missing data\n\n`Steet`: Type of road access to property. Feature can be dropped as there is dominance of a single class('Pave') which has 99.5% of occurances\n\n`Utilities`: Type of utilities available. Feature can be dropped as there are 99% of missing data","6845e873":"**BsmtFinType1**","2523bd72":"**Lot** Frontage","20625a0b":"We have `94` features for model building. \n\n> We will reduce the features to 30 using RFE","62f92b65":"**Lot Shape**","a428f68f":"## Heating and Air","cedbe7d8":"**Utilities**","9a7c05ea":"## Regularization\n","8b588fae":"**Paved Drive**","bcf99402":"HyperParameter Tuning using Cross validation and Grid Search","ce9f9734":"**Land Contour**","d89a3f0f":"> Not all int64 are continous values there are few categorical columns with int64 type ","6dade2b7":"**Lot Area**","9e5b7a6b":"**Building Type**","c47bfbb7":"**Overall Qual**","ec58a94a":"# Data Preprocessing","8bdc8071":"Street","6aae7fcd":"## MSSubClass and MSZoning\n`MSSubClass`: Identifies the type of dwelling involved in the sale.\n\n`MSZoning`: Identifies the general zoning classification of the sale.\n","b66db0e7":"### Ridge Regularization","7753ef4d":"## Business Goal\n\nYou are required to model the price of houses with the available independent variables. This model will then be used by the management to understand how exactly the prices vary with the variables. They can accordingly manipulate the strategy of the firm and concentrate on areas that will yield high returns. Further, the model will be a good way for management to understand the pricing dynamics of a new market.","8f473a6d":"# Model Building\n","54a79ab3":"**LowQualFinSF**","e2458e7e":"**House Style**","7b64ccdd":"## Target Feature\n","52458575":"**GarageCond**","f537fdd5":"`Id`: Id is number used for listing the dataset `This Column can be dropped`.","7f1f1349":"**Monthly Sold**","165bc09b":"**BsmtExposure**","2dcc731b":"## Porch and Pool","b4f45165":"**SaleType**","3ccadfaa":"**BsmtFinType2**","c6d1ea94":"**HeatingQC**","d1d36979":"**Alley**","490ab1de":"**MiscFeature and MiscValues**","54b1b1d6":"**Heating**","e85fa489":"**Lot Config**","01dfea92":"> In Year built and Year remodelled we can consider only Year remodelled as both are same entities \n\n> We will drop year built\n\n","ee861678":"## Alley, Street and Utilities","f26b6fb0":"<center><h1> House Price Prediction \ud83c\udfe0\ud83c\udfe0\ud83c\udfe0<\/h1>\n    <h2> Regularized Regression Model <\/h2>\n<img src=\"https:\/\/www.wallpaperup.com\/uploads\/wallpapers\/2013\/04\/26\/78580\/04c1250628ce818200ab3e665429fc21-700.jpg\" width=\"1000\" >\n<\/center>\n\n<br><br>\n\n    ","5f2852d8":"**Roof Material**","c75ad7ff":"\t\t\n`1stFlrSF`: First Floor square feet\n \n`2ndFlrSF`: Second floor square feet\n\n`LowQualFinSF`: Low quality finished square feet (all floors)\n\n`GrLivArea`: Above grade (ground) living area square feet\n\n`BsmtFullBath`: Basement full bathrooms\n\n`BsmtHalfBath`: Basement half bathrooms\n\n`FullBath`: Full bathrooms above grade\n\n`HalfBath`: Half baths above grade\n\n`Bedroom`: Bedrooms above grade (does NOT include basement bedrooms)\n\n`Kitchen`: Kitchens above grade\n\n`KitchenQual`: Kitchen quality\n       \t\n`TotRmsAbvGrd`: Total rooms above grade (does not include bathrooms)\n\n`Functional`: Home functionality (Assume typical unless deductions are warranted)","60b55adb":"`Condition1`: Proximity to various conditions\n\n`Condition2`: Proximity to various conditions (if more than one is present)\n\n`BldgType`: Type of dwelling\n\n`HouseStyle`: Style of dwelling\n\n`OverallQual`: Rates the overall material and finish of the house\n\n`OverallCond`: Rates the overall condition of the house\n\n`YearBuilt`: Original construction date\n\n`YearRemodAdd`: Remodel date\n","d6ec8ed3":"# Helper Functions for Preprocessing and EDA"}}