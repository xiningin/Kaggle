{"cell_type":{"38e339ce":"code","2857bd2b":"code","e4f48adf":"code","d8cea6b7":"code","33fff58f":"code","0c8dce83":"code","ae93a7fe":"code","389a0345":"code","b85f9a5b":"code","cf8fa206":"code","5266feb7":"code","da5a1004":"code","742411b7":"code","d3731e4e":"code","825779f1":"code","de9ee6f5":"code","d14116f7":"code","95caa1c7":"code","f889ccc0":"code","b58f32c1":"code","567a640c":"code","3f5529a0":"code","ad09ae2b":"code","b35308f8":"code","ab456f5f":"code","54de164d":"code","b1c0eee9":"code","b42a19bf":"code","8c1a2b15":"code","6de5519c":"code","376cb250":"code","0b164819":"code","7f6e4582":"code","c04bf805":"code","f8a10e55":"code","ac181a6b":"code","060703e4":"markdown","d86e997d":"markdown","9b07b557":"markdown","c42d9c34":"markdown","fefc2d2a":"markdown","c0fc1d96":"markdown","5461966b":"markdown","fbfac5c5":"markdown","0dde44eb":"markdown","7e6afb92":"markdown","93d75487":"markdown","4d17404c":"markdown","c0a52a85":"markdown","c8fe5fd2":"markdown","2355ebae":"markdown","83cc16db":"markdown","765ca7f4":"markdown","7c1fb320":"markdown","e92a5607":"markdown","80db7298":"markdown","3052da0b":"markdown","dde5398a":"markdown","6de33e8a":"markdown","b7960b09":"markdown","3215cbeb":"markdown","bd293098":"markdown","6b3cd56d":"markdown","24b164fb":"markdown","02908236":"markdown","05ce4251":"markdown","79e98498":"markdown","35f851a2":"markdown","faa248b1":"markdown"},"source":{"38e339ce":"import tensorflow as tf\n\n# Get the GPU device name.\ndevice_name = tf.test.gpu_device_name()\n\n# The device name should look like the following:\nif device_name == '\/device:GPU:0':\n    print('Found GPU at: {}'.format(device_name))\nelse:\n    raise SystemError('GPU device not found')","2857bd2b":"import torch\n\n# If there's a GPU available...\nif torch.cuda.is_available():    \n\n    # Tell PyTorch to use the GPU.    \n    device = torch.device(\"cuda\")\n\n    print('There are %d GPU(s) available.' % torch.cuda.device_count())\n\n    print('We will use the GPU:', torch.cuda.get_device_name(0))\n\n# If not...\nelse:\n    print('No GPU available, using the CPU instead.')\n    device = torch.device(\"cpu\")","e4f48adf":"# !pip install transformers","d8cea6b7":"import pandas as pd\nimport numpy as np\nimport json, re\nfrom tqdm import tqdm_notebook\nfrom uuid import uuid4\n\n## Torch Modules\nimport torch\nimport torch.optim as optim\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.autograd import Variable\nfrom torch.utils.data import Dataset, DataLoader","33fff58f":"import pandas as pd\nimport re\n# import emoji\n\n# Load the dataset into a pandas dataframe.\ndf_true = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/True.csv',encoding='UTF-8')\ndf_fake = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/Fake.csv',encoding='UTF-8')\n\n# creating target variable\ndf_true['target'] = 1\ndf_fake['target'] = 0\n\n# concatenating in one single dataframe\ntrain_df = df_true.append(df_fake)\ntrain_df = train_df.sample(frac=1).reset_index(drop=True)\n\n# Report the number of sentences.\nprint('Number of training sentences: {:,}\\n'.format(train_df.shape[0]))\n\n# Display 10 random rows from the data.\ntrain_df.sample(10)","0c8dce83":"# I have not written any code for text cleaning yet","ae93a7fe":"# Get the lists of sentences and labels\nsentences = train_df['title'].values\nlabels = train_df['target'].values\ntrain_df['title'][10]","389a0345":"# loading pre-trained models\nfrom transformers import (\n    BertForSequenceClassification,\n#     TFBertForSequenceClassification, \n                          BertTokenizer,\n#                           TFRobertaForSequenceClassification,\n                          RobertaForSequenceClassification,\n                          RobertaTokenizer,\n                         AdamW)\n\n# BERT\nbert_model = BertForSequenceClassification.from_pretrained(\"bert-base-uncased\", # Use the 12-layer BERT model, with an uncased vocab.\n                                                                num_labels = 2, # The number of output labels--2 for binary classification.\n                                                                                # You can increase this for multi-class tasks.   \n                                                                output_attentions = False, # Whether the model returns attentions weights.\n                                                                output_hidden_states = False # Whether the model returns all hidden-states.\n                                                          )\nbert_tokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\n# Tell pytorch to run this model on the GPU.\nbert_model.cuda()\n                                                           \n\n# RoBERTa\nroberta_model = RobertaForSequenceClassification.from_pretrained(\"roberta-base\", # 12-layer, 768-hidden, 12-heads, 125M parameters RoBERTa using the BERT-base architecture\n                                                                    num_labels = 2, # The number of output labels--2 for binary classification.\n                                                                                    # You can increase this for multi-class tasks.   \n                                                                    output_attentions = False, # Whether the model returns attentions weights.\n                                                                    output_hidden_states = False # Whether the model returns all hidden-states.\n                                                                )\nroberta_tokenizer = RobertaTokenizer.from_pretrained(\"roberta-base\")\n# Tell pytorch to run this model on the GPU.\nroberta_model.cuda()\n\nprint(' Base models loaded')","b85f9a5b":"# Print the original sentence.\nprint(' Original: ', sentences[0])\n\n# Print the tweet split into tokens.\nprint('Tokenized BERT: ', bert_tokenizer.tokenize(sentences[0]))\n\n# Print the tweet mapped to token ids.\nprint('Token IDs BERT: ', bert_tokenizer.convert_tokens_to_ids(bert_tokenizer.tokenize(sentences[0])))\n\n# Print the tweet split into tokens.\nprint('Tokenized RoBERT: ', roberta_tokenizer.tokenize(sentences[0]))\n\n# Print the tweet mapped to token ids.\nprint('Token IDs RoBERTa: ', roberta_tokenizer.convert_tokens_to_ids(roberta_tokenizer.tokenize(sentences[0])))","cf8fa206":"sequence = \"\"\"Will Your Hometown Be Taking In Obama\u2019s Refugees? Here\u2019s The List Of Cities Where They\u2019re Being Transplanted \ud83c\udfd9\ufe0f\"\"\"\n\nbert_tokenized_sequence = bert_tokenizer.tokenize(sequence)\nroberta_tokenized_sequence = roberta_tokenizer.tokenize(sequence)\n\nprint(\"\"\"Will Your Hometown Be Taking In Obama\u2019s Refugees? Here\u2019s The List Of Cities Where They\u2019re Being Transplanted \ud83c\udfd9\ufe0f\"\"\")\nprint(\"BERT:\", bert_tokenized_sequence)\nprint(\"RoBERTa:\", roberta_tokenized_sequence)","5266feb7":"max_len_bert = 0\nmax_len_roberta = 0\n\n# For every sentence...\nfor sent in sentences:\n\n    # Tokenize the text and add `[CLS]` and `[SEP]` tokens.\n    input_ids_bert = bert_tokenizer.encode(sent, add_special_tokens=True)\n    input_ids_roberta = roberta_tokenizer.encode(sent, add_special_tokens=True)\n\n    # Update the maximum sentence length.\n    max_len_bert = max(max_len_bert, len(input_ids_bert))\n    max_len_roberta = max(max_len_roberta, len(input_ids_roberta))\n\n    \nprint('Max sentence length BERT: ', max_len_bert)\nprint('Max sentence length RoBERTa: ', max_len_roberta)","da5a1004":"# Tokenize all of the sentences and map the tokens to thier word IDs.\nbert_input_ids = []\nbert_attention_masks = []\nroberta_input_ids = []\nroberta_attention_masks = []\nsentence_ids = []\ncounter = 0\n\n# For every sentence...\nfor sent in sentences:\n    # `encode_plus` will:\n    #   (1) Tokenize the sentence.\n    #   (2) Prepend the `[CLS]` token to the start.\n    #   (3) Append the `[SEP]` token to the end.\n    #   (4) Map tokens to their IDs.\n    #   (5) Pad or truncate the sentence to `max_length`\n    #   (6) Create attention masks for [PAD] tokens.\n    bert_encoded_dict = bert_tokenizer.encode_plus(\n                        sent,                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                        max_length = 120,           # Pad & truncate all sentences.\n                        pad_to_max_length = True,\n                        return_attention_mask = True,   # Construct attn. masks.\n                        return_tensors = 'pt',     # Return pytorch tensors.\n                   )\n    \n    \n    roberta_encoded_dict = roberta_tokenizer.encode_plus(\n                        sent,                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                        max_length = 120,           # Pad & truncate all sentences.\n                        pad_to_max_length = True,\n                        return_attention_mask = True,   # Construct attn. masks.\n                        return_tensors = 'pt',     # Return pytorch tensors.\n                   )\n    # Add the encoded sentence to the list.    \n    bert_input_ids.append(bert_encoded_dict['input_ids'])\n    roberta_input_ids.append(roberta_encoded_dict['input_ids'])\n    \n    # And its attention mask (simply differentiates padding from non-padding).\n    bert_attention_masks.append(bert_encoded_dict['attention_mask'])\n    roberta_attention_masks.append(roberta_encoded_dict['attention_mask'])\n    \n    # collecting sentence_ids\n    sentence_ids.append(counter)\n    counter  = counter + 1\n    \n    \n    \n# Convert the lists into tensors.\nbert_input_ids = torch.cat(bert_input_ids, dim=0)\nbert_attention_masks = torch.cat(bert_attention_masks, dim=0)\n\nroberta_input_ids = torch.cat(roberta_input_ids, dim=0)\nroberta_attention_masks = torch.cat(roberta_attention_masks, dim=0)\n\nlabels = torch.tensor(labels)\nsentence_ids = torch.tensor(sentence_ids)\n\n# Print sentence 0, now as a list of IDs.\nprint('Original: ', sentences[1])\nprint('Token IDs BERT:', bert_input_ids[1])\nprint('Token IDs RoBERTa:', roberta_input_ids[1])","742411b7":"from torch.utils.data import TensorDataset, random_split\n# function to seed the script globally\ntorch.manual_seed(0)\n\n# Combine the training inputs into a TensorDataset.\nbert_dataset = TensorDataset(sentence_ids, bert_input_ids, bert_attention_masks, labels)\nroberta_dataset = TensorDataset(roberta_input_ids, roberta_attention_masks, labels)","d3731e4e":"# function to remove sentice ids from the tensor dataset post train test split\ndef index_remover(tensordata):\n    input_ids = []\n    attention_masks = []\n    labels = []\n   \n    for a,b,c,d in tensordata:\n        input_ids.append(b.tolist())\n        attention_masks.append(c.tolist())\n        labels.append(d.tolist())\n        \n    input_ids = torch.tensor(input_ids)\n    attention_masks = torch.tensor(attention_masks)\n    labels = torch.tensor(labels)\n    \n    final_dataset =  TensorDataset(input_ids, attention_masks, labels)\n    return final_dataset\n        \n# check\ntrial_dataset =  index_remover(bert_dataset)\ntrial_dataset[0]\n# yes we were able to remove the sentence id from the data without disturbing the data format","825779f1":"# Create a 90-10 train-validation split.\n\n# Calculate the number of samples to include in each set.\ntrain_size = int(0.9 * len(bert_dataset))\nval_size = len(bert_dataset) - train_size\n\n# Divide the dataset by randomly selecting samples.\nbert_train_dataset, bert_val_dataset = random_split(bert_dataset, [train_size, val_size])\nroberta_train_dataset, roberta_val_dataset = random_split(roberta_dataset, [train_size, val_size])\n\n# Checking whether the distribution of target is consitent across both the sets\nsentence_ids_list_valid = []\nfor a,b,c,d in bert_val_dataset:\n  sentence_ids_list_valid.append(a.tolist())\n\n# removing sentence ids from tensor dataset so that it can be used for training \nbert_train_dataset = index_remover(bert_train_dataset)\nbert_val_dataset = index_remover(bert_val_dataset)\n\n# Checking whether the distribution of target is consitent across both the sets\nlabel_temp_list = []\nfor a,b,c in bert_train_dataset:\n  label_temp_list.append(c)\n\nprint('{:>5,} training samples'.format(train_size))\nprint('{:>5,} training samples with real disater tweets'.format(sum(label_temp_list)))\n\n\nlabel_temp_list = []\nfor a,b,c in bert_val_dataset:\n  label_temp_list.append(c)\n\nprint('{:>5,} validation samples'.format(val_size))\nprint('{:>5,} validation samples with real disater tweets'.format(sum(label_temp_list)))","de9ee6f5":"from torch.utils.data import DataLoader, RandomSampler, SequentialSampler\n\n# The DataLoader needs to know our batch size for training, so we specify it \n# here. For fine-tuning BERT on a specific task, the authors recommend a batch \n# size of 16 or 32.\nbatch_size = 32\n\n# Create the DataLoaders for our training and validation sets.\n# We'll take training samples in random order. \nbert_train_dataloader = DataLoader(\n            bert_train_dataset,  # The training samples.\n            sampler = RandomSampler(bert_train_dataset), # Select batches randomly\n            batch_size = batch_size # Trains with this batch size.\n        )\nroberta_train_dataloader = DataLoader(\n            roberta_train_dataset,  # The training samples.\n            sampler = RandomSampler(roberta_train_dataset), # Select batches randomly\n            batch_size = batch_size # Trains with this batch size.\n        )\n\n# For validation the order doesn't matter, so we'll just read them sequentially.\nbert_validation_dataloader = DataLoader(\n            bert_val_dataset, # The validation samples.\n            sampler = SequentialSampler(bert_val_dataset), # Pull out batches sequentially.\n            batch_size = batch_size # Evaluate with this batch size.\n        )\n\nroberta_validation_dataloader = DataLoader(\n            roberta_val_dataset, # The validation samples.\n            sampler = SequentialSampler(roberta_val_dataset), # Pull out batches sequentially.\n            batch_size = batch_size # Evaluate with this batch size.\n        )","d14116f7":"# Get all of the roberta_model's parameters as a list of tuples.\nparams = list(roberta_model.named_parameters())\n\nprint('The RoBERTa model has {:} different named parameters.\\n'.format(len(params)))\n\nprint('==== Embedding Layer ====\\n')\n\nfor p in params[0:5]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n\nprint('\\n==== First Transformer ====\\n')\n\nfor p in params[5:21]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n\nprint('\\n==== Output Layer ====\\n')\n\nfor p in params[-4:]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))","95caa1c7":"# Note: AdamW is a class from the huggingface library (as opposed to pytorch) \n# I believe the 'W' stands for 'Weight Decay fix\"\nbert_optimizer = AdamW(bert_model.parameters(),\n                  lr = 5e-5, # args.learning_rate - default is 5e-5\n                  eps = 1e-8 # args.adam_epsilon  - default is 1e-8.\n                )\n\nroberta_optimizer = AdamW(roberta_model.parameters(),\n                  lr = 5e-5, # args.learning_rate - default is 5e-5\n                  eps = 1e-8 # args.adam_epsilon  - default is 1e-8.\n                )","f889ccc0":"from transformers import get_linear_schedule_with_warmup\n\n# Number of training epochs. The BERT authors recommend between 2 and 4. \n# We chose to run for 2,I have already seen that the model starts overfitting beyound 2 epochs\nepochs = 2\n\n# Total number of training steps is [number of batches] x [number of epochs]. \n# (Note that this is not the same as the number of training samples).\ntotal_steps = len(bert_train_dataloader) * epochs\n\n# Create the learning rate scheduler.\nbert_scheduler = get_linear_schedule_with_warmup(bert_optimizer, \n                                            num_warmup_steps = 0, # Default value in run_glue.py\n                                            num_training_steps = total_steps)\n\nroberta_scheduler = get_linear_schedule_with_warmup(roberta_optimizer, \n                                            num_warmup_steps = 0, # Default value in run_glue.py\n                                            num_training_steps = total_steps)","b58f32c1":"import numpy as np\n\n# Function to calculate the accuracy of our predictions vs labels\ndef flat_accuracy(preds, labels):\n    pred_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return np.sum(pred_flat == labels_flat) \/ len(labels_flat)","567a640c":"import time\nimport datetime\n\ndef format_time(elapsed):\n    '''\n    Takes a time in seconds and returns a string hh:mm:ss\n    '''\n    # Round to the nearest second.\n    elapsed_rounded = int(round((elapsed)))\n    \n    # Format as hh:mm:ss\n    return str(datetime.timedelta(seconds=elapsed_rounded))","3f5529a0":"import random\n\n# This training code is based on the `run_glue.py` script here:\n# https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L128\n\n# Set the seed value all over the place to make this reproducible.\nseed_val = 100\n\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)\n\n# We'll store a number of quantities such as training and validation loss, \n# validation accuracy, and timings.\nbert_training_stats = []\n\n# Measure the total training time for the whole run.\ntotal_t0 = time.time()\n\n# For each epoch...\nfor epoch_i in range(0, epochs):\n    \n    # ========================================\n    #               Training\n    # ========================================\n    \n    # Perform one full pass over the training set.\n\n    print(\"\")\n    print('======== Epoch {:} \/ {:} ========'.format(epoch_i + 1, epochs))\n    print('Training...')\n\n    # Measure how long the training epoch takes.\n    t0 = time.time()\n\n    # Reset the total loss for this epoch.\n    total_train_loss = 0\n\n    # Put the bert_model into training mode. Don't be mislead--the call to \n    # `train` just changes the *mode*, it doesn't *perform* the training.\n    # `dropout` and `batchnorm` layers behave differently during training\n    # vs. test (source: https:\/\/stackoverflow.com\/questions\/51433378\/what-does-bert_model-train-do-in-pytorch)\n    bert_model.train()\n\n    # For each batch of training data...\n    for step, batch in enumerate(bert_train_dataloader):\n\n        # Progress update every 40 batches.\n        if step % 40 == 0 and not step == 0:\n            # Calculate elapsed time in minutes.\n            elapsed = format_time(time.time() - t0)\n            \n            # Report progress.\n            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(bert_train_dataloader), elapsed))\n\n        # Unpack this training batch from our dataloader. \n        #\n        # As we unpack the batch, we'll also copy each tensor to the GPU using the \n        # `to` method.\n        #\n        # `batch` contains three pytorch tensors:\n        #   [0]: input ids \n        #   [1]: attention masks\n        #   [2]: labels \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n\n        # Always clear any previously calculated gradients before performing a\n        # backward pass. PyTorch doesn't do this automatically because \n        # accumulating the gradients is \"convenient while training RNNs\". \n        # (source: https:\/\/stackoverflow.com\/questions\/48001598\/why-do-we-need-to-call-zero-grad-in-pytorch)\n        bert_model.zero_grad()        \n\n        # Perform a forward pass (evaluate the bert_model on this training batch).\n        # The documentation for this `bert_model` function is here: \n        # https:\/\/huggingface.co\/transformers\/v2.2.0\/bert_model_doc\/bert.html#transformers.BertForSequenceClassification\n        # It returns different numbers of parameters depending on what arguments\n        # are given and what flags are set. For our usage here, it returns\n        # the loss (because we provided labels) and the \"logits\"--the bert_model\n        # outputs prior to activation.\n        loss, logits = bert_model(b_input_ids, \n                             token_type_ids=None, \n                             attention_mask=b_input_mask, \n                             labels=b_labels)\n\n        # Accumulate the training loss over all of the batches so that we can\n        # calculate the average loss at the end. `loss` is a Tensor containing a\n        # single value; the `.item()` function just returns the Python value \n        # from the tensor.\n        total_train_loss += loss.item()\n\n        # Perform a backward pass to calculate the gradients.\n        loss.backward()\n\n        # Clip the norm of the gradients to 1.0.\n        # This is to help prevent the \"exploding gradients\" problem.\n        torch.nn.utils.clip_grad_norm_(bert_model.parameters(), 1.0)\n\n        # Update parameters and take a step using the computed gradient.\n        # The bert_optimizer dictates the \"update rule\"--how the parameters are\n        # modified based on their gradients, the learning rate, etc.\n        bert_optimizer.step()\n\n        # Update the learning rate.\n        bert_scheduler.step()\n\n    # Calculate the average loss over all of the batches.\n    avg_train_loss = total_train_loss \/ len(bert_train_dataloader)            \n    \n    # Measure how long this epoch took.\n    training_time = format_time(time.time() - t0)\n\n    print(\"\")\n    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n    print(\"  Training epcoh took: {:}\".format(training_time))\n        \n    # ========================================\n    #               Validation\n    # ========================================\n    # After the completion of each training epoch, measure our performance on\n    # our validation set.\n\n    print(\"\")\n    print(\"Running Validation...\")\n\n    t0 = time.time()\n\n    # Put the bert_model in evaluation mode--the dropout layers behave differently\n    # during evaluation.\n    bert_model.eval()\n\n    # Tracking variables \n    total_eval_accuracy = 0\n    total_eval_loss = 0\n    nb_eval_steps = 0\n\n    # Evaluate data for one epoch\n    for batch in bert_validation_dataloader:\n        \n        # Unpack this training batch from our dataloader. \n        #\n        # As we unpack the batch, we'll also copy each tensor to the GPU using \n        # the `to` method.\n        #\n        # `batch` contains three pytorch tensors:\n        #   [0]: input ids \n        #   [1]: attention masks\n        #   [2]: labels \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n        \n        # Tell pytorch not to bother with constructing the compute graph during\n        # the forward pass, since this is only needed for backprop (training).\n        with torch.no_grad():        \n\n            # Forward pass, calculate logit predictions.\n            # token_type_ids is the same as the \"segment ids\", which \n            # differentiates sentence 1 and 2 in 2-sentence tasks.\n            # Get the \"logits\" output by the bert_model. The \"logits\" are the output\n            # values prior to applying an activation function like the softmax.\n            (loss, logits) = bert_model(b_input_ids, \n                                   token_type_ids=None, \n                                   attention_mask=b_input_mask,\n                                   labels=b_labels)\n            \n        # Accumulate the validation loss.\n        total_eval_loss += loss.item()\n\n        # Move logits and labels to CPU\n        logits = logits.detach().cpu().numpy()\n        label_ids = b_labels.to('cpu').numpy()\n\n        # Calculate the accuracy for this batch of test sentences, and\n        # accumulate it over all batches.\n        total_eval_accuracy += flat_accuracy(logits, label_ids)\n        \n\n    # Report the final accuracy for this validation run.\n    avg_val_accuracy = total_eval_accuracy \/ len(bert_validation_dataloader)\n    print(\"  Accuracy: {0:.2f}\".format(avg_val_accuracy))\n\n    # Calculate the average loss over all of the batches.\n    avg_val_loss = total_eval_loss \/ len(bert_validation_dataloader)\n    \n    # Measure how long the validation run took.\n    validation_time = format_time(time.time() - t0)\n    \n    print(\"  Validation Loss: {0:.2f}\".format(avg_val_loss))\n    print(\"  Validation took: {:}\".format(validation_time))\n\n    # Record all statistics from this epoch.\n    bert_training_stats.append(\n        {\n            'epoch': epoch_i + 1,\n            'Training Loss': avg_train_loss,\n            'Valid. Loss': avg_val_loss,\n            'Valid. Accur.': avg_val_accuracy,\n            'Training Time': training_time,\n            'Validation Time': validation_time\n        }\n    )\n\nprint(\"\")\nprint(\"Training complete!\")\n\nprint(\"Total training took {:} (h:mm:ss)\".format(format_time(time.time()-total_t0)))","ad09ae2b":"import random\n\n# This training code is based on the `run_glue.py` script here:\n# https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L128\n\n# Set the seed value all over the place to make this reproducible.\nseed_val = 100\n\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)\n\n# We'll store a number of quantities such as training and validation loss, \n# validation accuracy, and timings.\nroberta_training_stats = []\n\n# Measure the total training time for the whole run.\ntotal_t0 = time.time()\n\n# For each epoch...\nfor epoch_i in range(0, epochs):\n    \n    # ========================================\n    #               Training\n    # ========================================\n    \n    # Perform one full pass over the training set.\n\n    print(\"\")\n    print('======== Epoch {:} \/ {:} ========'.format(epoch_i + 1, epochs))\n    print('Training...')\n\n    # Measure how long the training epoch takes.\n    t0 = time.time()\n\n    # Reset the total loss for this epoch.\n    total_train_loss = 0\n\n    # Put the roberta_model into training mode. Don't be mislead--the call to \n    # `train` just changes the *mode*, it doesn't *perform* the training.\n    # `dropout` and `batchnorm` layers behave differently during training\n    # vs. test (source: https:\/\/stackoverflow.com\/questions\/51433378\/what-does-roberta_model-train-do-in-pytorch)\n    roberta_model.train()\n\n    # For each batch of training data...\n    for step, batch in enumerate(roberta_train_dataloader):\n\n        # Progress update every 40 batches.\n        if step % 40 == 0 and not step == 0:\n            # Calculate elapsed time in minutes.\n            elapsed = format_time(time.time() - t0)\n            \n            # Report progress.\n            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(roberta_train_dataloader), elapsed))\n\n        # Unpack this training batch from our dataloader. \n        #\n        # As we unpack the batch, we'll also copy each tensor to the GPU using the \n        # `to` method.\n        #\n        # `batch` contains three pytorch tensors:\n        #   [0]: input ids \n        #   [1]: attention masks\n        #   [2]: labels \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n\n        # Always clear any previously calculated gradients before performing a\n        # backward pass. PyTorch doesn't do this automatically because \n        # accumulating the gradients is \"convenient while training RNNs\". \n        # (source: https:\/\/stackoverflow.com\/questions\/48001598\/why-do-we-need-to-call-zero-grad-in-pytorch)\n        roberta_model.zero_grad()        \n\n        # Perform a forward pass (evaluate the roberta_model on this training batch).\n        # The documentation for this `roberta_model` function is here: \n        # https:\/\/huggingface.co\/transformers\/v2.2.0\/roberta_model_doc\/bert.html#transformers.BertForSequenceClassification\n        # It returns different numbers of parameters depending on what arguments\n        # are given and what flags are set. For our usage here, it returns\n        # the loss (because we provided labels) and the \"logits\"--the roberta_model\n        # outputs prior to activation.\n        loss, logits = roberta_model(b_input_ids, \n#                              token_type_ids=None, \n                             attention_mask=b_input_mask, \n                             labels=b_labels)\n\n        # Accumulate the training loss over all of the batches so that we can\n        # calculate the average loss at the end. `loss` is a Tensor containing a\n        # single value; the `.item()` function just returns the Python value \n        # from the tensor.\n        total_train_loss += loss.item()\n\n        # Perform a backward pass to calculate the gradients.\n        loss.backward()\n\n        # Clip the norm of the gradients to 1.0.\n        # This is to help prevent the \"exploding gradients\" problem.\n        torch.nn.utils.clip_grad_norm_(roberta_model.parameters(), 1.0)\n\n        # Update parameters and take a step using the computed gradient.\n        # The roberta_optimizer dictates the \"update rule\"--how the parameters are\n        # modified based on their gradients, the learning rate, etc.\n        roberta_optimizer.step()\n\n        # Update the learning rate.\n        roberta_scheduler.step()\n\n    # Calculate the average loss over all of the batches.\n    avg_train_loss = total_train_loss \/ len(roberta_train_dataloader)            \n    \n    # Measure how long this epoch took.\n    training_time = format_time(time.time() - t0)\n\n    print(\"\")\n    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n    print(\"  Training epcoh took: {:}\".format(training_time))\n        \n    # ========================================\n    #               Validation\n    # ========================================\n    # After the completion of each training epoch, measure our performance on\n    # our validation set.\n\n    print(\"\")\n    print(\"Running Validation...\")\n\n    t0 = time.time()\n\n    # Put the roberta_model in evaluation mode--the dropout layers behave differently\n    # during evaluation.\n    roberta_model.eval()\n\n    # Tracking variables \n    total_eval_accuracy = 0\n    total_eval_loss = 0\n    nb_eval_steps = 0\n\n    # Evaluate data for one epoch\n    for batch in roberta_validation_dataloader:\n        \n        # Unpack this training batch from our dataloader. \n        #\n        # As we unpack the batch, we'll also copy each tensor to the GPU using \n        # the `to` method.\n        #\n        # `batch` contains three pytorch tensors:\n        #   [0]: input ids \n        #   [1]: attention masks\n        #   [2]: labels \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n        \n        # Tell pytorch not to bother with constructing the compute graph during\n        # the forward pass, since this is only needed for backprop (training).\n        with torch.no_grad():        \n\n            # Forward pass, calculate logit predictions.\n            # token_type_ids is the same as the \"segment ids\", which \n            # differentiates sentence 1 and 2 in 2-sentence tasks.\n            # Get the \"logits\" output by the roberta_model. The \"logits\" are the output\n            # values prior to applying an activation function like the softmax.\n            (loss, logits) = roberta_model(b_input_ids, \n#                                    token_type_ids=None, \n                                   attention_mask=b_input_mask,\n                                   labels=b_labels)\n            \n        # Accumulate the validation loss.\n        total_eval_loss += loss.item()\n\n        # Move logits and labels to CPU\n        logits = logits.detach().cpu().numpy()\n        label_ids = b_labels.to('cpu').numpy()\n\n        # Calculate the accuracy for this batch of test sentences, and\n        # accumulate it over all batches.\n        total_eval_accuracy += flat_accuracy(logits, label_ids)\n        \n\n    # Report the final accuracy for this validation run.\n    avg_val_accuracy = total_eval_accuracy \/ len(roberta_validation_dataloader)\n    print(\"  Accuracy: {0:.2f}\".format(avg_val_accuracy))\n\n    # Calculate the average loss over all of the batches.\n    avg_val_loss = total_eval_loss \/ len(roberta_validation_dataloader)\n    \n    # Measure how long the validation run took.\n    validation_time = format_time(time.time() - t0)\n    \n    print(\"  Validation Loss: {0:.2f}\".format(avg_val_loss))\n    print(\"  Validation took: {:}\".format(validation_time))\n\n    # Record all statistics from this epoch.\n    roberta_training_stats.append(\n        {\n            'epoch': epoch_i + 1,\n            'Training Loss': avg_train_loss,\n            'Valid. Loss': avg_val_loss,\n            'Valid. Accur.': avg_val_accuracy,\n            'Training Time': training_time,\n            'Validation Time': validation_time\n        }\n    )\n\nprint(\"\")\nprint(\"Training complete!\")\n\nprint(\"Total training took {:} (h:mm:ss)\".format(format_time(time.time()-total_t0)))","b35308f8":"import pandas as pd\n\n# Display floats with two decimal places.\npd.set_option('precision', 2)\n\n# Create a DataFrame from our training statistics.\ndf_stats = pd.DataFrame(data=roberta_training_stats)\n\n# Use the 'epoch' as the row index.\ndf_stats = df_stats.set_index('epoch')\n\n# A hack to force the column headers to wrap.\n#df = df.style.set_table_styles([dict(selector=\"th\",props=[('max-width', '70px')])])\n\n# Display the table.\ndf_stats","ab456f5f":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n\n# Use plot styling from seaborn.\nsns.set(style='darkgrid')\n\n# Increase the plot size and font size.\nsns.set(font_scale=1.5)\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\n# Plot the learning curve.\nplt.plot(df_stats['Training Loss'], 'b-o', label=\"Training\")\nplt.plot(df_stats['Valid. Loss'], 'g-o', label=\"Validation\")\n\n# Label the plot.\nplt.title(\"Training & Validation Loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.xticks([1, 2, 3, 4])\n\nplt.show()","54de164d":"import pandas as pd\n\n# Load the dataset into a pandas dataframe.\ndf  = train_df.iloc[sentence_ids_list_valid,]","b1c0eee9":"# Report the number of sentences.\nprint('Number of test sentences: {:,}\\n'.format(df.shape[0]))\n\n# Create sentence and label lists\nsentences = df.title.values\nlabels = df.target.values\n\n# Tokenize all of the sentences and map the tokens to thier word IDs.\ninput_ids = []\nattention_masks = []\n\n# For every sentence...\nfor sent in sentences:\n    # `encode_plus` will:\n    #   (1) Tokenize the sentence.\n    #   (2) Prepend the `[CLS]` token to the start.\n    #   (3) Append the `[SEP]` token to the end.\n    #   (4) Map tokens to their IDs.\n    #   (5) Pad or truncate the sentence to `max_length`\n    #   (6) Create attention masks for [PAD] tokens.\n    encoded_dict = roberta_tokenizer.encode_plus(\n                        sent,                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                        max_length = 75,           # Pad & truncate all sentences.\n                        pad_to_max_length = True,\n                        return_attention_mask = True,   # Construct attn. masks.\n                        return_tensors = 'pt',     # Return pytorch tensors.\n                   )\n    \n    # Add the encoded sentence to the list.    \n    input_ids.append(encoded_dict['input_ids'])\n    \n    # And its attention mask (simply differentiates padding from non-padding).\n    attention_masks.append(encoded_dict['attention_mask'])\n\n# Convert the lists into tensors.\ninput_ids = torch.cat(input_ids, dim=0)\nattention_masks = torch.cat(attention_masks, dim=0)\nlabels = torch.tensor(labels)\n\n# Set the batch size.  \nbatch_size = 32  \n\n# Create the DataLoader.\nprediction_data = TensorDataset(input_ids, attention_masks, labels)\n# prediction_data = TensorDataset(input_ids, attention_masks)\nprediction_sampler = SequentialSampler(prediction_data)\nprediction_dataloader = DataLoader(prediction_data, sampler=prediction_sampler, batch_size=batch_size)","b42a19bf":"# Prediction on test set\n\nprint('Predicting labels for {:,} test sentences...'.format(len(input_ids)))\n\n# Put model in evaluation mode\nroberta_model.eval()\n\n# Tracking variables \npredictions , true_labels = [], []\n\n# Predict \nfor batch in prediction_dataloader:\n  # Add batch to GPU\n  batch = tuple(t.to(device) for t in batch)\n  \n  # Unpack the inputs from our dataloader\n  b_input_ids, b_input_mask, b_labels = batch\n#   b_input_ids, b_input_mask = batch\n  \n  # Telling the model not to compute or store gradients, saving memory and \n  # speeding up prediction\n  with torch.no_grad():\n      # Forward pass, calculate logit predictions\n      outputs = roberta_model(b_input_ids, token_type_ids=None, \n                      attention_mask=b_input_mask)\n\n  logits = outputs[0]\n\n  # Move logits and labels to CPU\n  logits = logits.detach().cpu().numpy()\n  label_ids = b_labels.to('cpu').numpy()\n  \n  # Store predictions and true labels\n  predictions.append(logits)\n  true_labels.append(label_ids)\n\nprint('    DONE.')\n","8c1a2b15":"print('Positive samples: %d of %d (%.2f%%)' % (df.target.sum(), len(df.target), (df.target.sum() \/ len(df.target) * 100.0)))","6de5519c":"from sklearn.metrics import matthews_corrcoef, confusion_matrix\n\nmatthews_set = []\n\n# Evaluate each test batch using Matthew's correlation coefficient\nprint('Calculating Matthews Corr. Coef. for each batch...')\n\n# For each input batch...\nfor i in range(len(true_labels)):\n  \n  # The predictions for this batch are a 2-column ndarray (one column for \"0\" \n  # and one column for \"1\"). Pick the label with the highest value and turn this\n  # in to a list of 0s and 1s.\n  pred_labels_i = np.argmax(predictions[i], axis=1).flatten()\n  \n  # Calculate and store the coef for this batch.  \n  matthews = matthews_corrcoef(true_labels[i], pred_labels_i)                \n  matthews_set.append(matthews)","376cb250":"# Create a barplot showing the MCC score for each batch of test samples.\nax = sns.barplot(x=list(range(len(matthews_set))), y=matthews_set, ci=None)\n\nplt.title('MCC Score per Batch')\nplt.ylabel('MCC Score (-1 to +1)')\nplt.xlabel('Batch #')\n\nplt.show()","0b164819":"# Combine the results across all batches. \nflat_predictions = np.concatenate(predictions, axis=0)\n\n# For each sample, pick the label (0 or 1) with the higher score.\nflat_predictions = np.argmax(flat_predictions, axis=1).flatten()\n\n# adding to the main datframe\ndf['target'] = flat_predictions\n\n# Combine the correct labels for each batch into a single list.\nflat_true_labels = np.concatenate(true_labels, axis=0)\n\n# Calculate the MCC\n# mcc = matthews_corrcoef(flat_true_labels, flat_predictions)\n\ndef get_eval_report(labels, preds):\n    mcc = matthews_corrcoef(labels, preds)\n    tn, fp, fn, tp = confusion_matrix(labels, preds).ravel()\n    return {\n        \"mcc\": mcc,\n        \"tp\": tp,\n        \"tn\": tn,\n        \"fp\": fp,\n        \"fn\": fn\n    }\nget_eval_report(flat_true_labels, flat_predictions)\n# print('Total MCC: %.3f' % mcc)","7f6e4582":"# import torch\n# import numpy as np\n# import pickle\n\n# from sklearn.metrics import matthews_corrcoef, confusion_matrix\n\n# from torch.utils.data import (DataLoader, RandomSampler, SequentialSampler,\n#                               TensorDataset)\n# from torch.utils.data.distributed import DistributedSampler\n# from torch.nn import CrossEntropyLoss, MSELoss\n\n# from tools import *\n# from multiprocessing import Pool, cpu_count\n# import convert_examples_to_features\n\n# from tqdm import tqdm_notebook, trange\n# import os\n# from pytorch_pretrained_bert import BertTokenizer, BertModel, BertForMaskedLM, BertForSequenceClassification\n# from pytorch_pretrained_bert.optimization import BertAdam, WarmupLinearSchedule\n\n# # OPTIONAL: if you want to have more information on what's happening, activate the logger as follows\n# import logging\n# logging.basicConfig(level=logging.INFO)\n\n# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","c04bf805":"# The input data dir. Should contain the .tsv files (or other data files) for the task.\nDATA_DIR = \"data\/\"\n\n# Bert pre-trained model selected in the list: bert-base-uncased, \n# bert-large-uncased, bert-base-cased, bert-large-cased, bert-base-multilingual-uncased,\n# bert-base-multilingual-cased, bert-base-chinese.\nBERT_MODEL = 'yelp.tar.gz'\n\n# The name of the task to train.I'm going to name this 'yelp'.\nTASK_NAME = 'yelp'\n\n# The output directory where the fine-tuned model and checkpoints will be written.\nOUTPUT_DIR = f'outputs\/{TASK_NAME}\/'\n\n# The directory where the evaluation reports will be written to.\nREPORTS_DIR = f'reports\/{TASK_NAME}_evaluation_reports\/'\n\n# This is where BERT will look for pre-trained models to load parameters from.\nCACHE_DIR = 'cache\/'\n\n# The maximum total input sequence length after WordPiece tokenization.\n# Sequences longer than this will be truncated, and sequences shorter than this will be padded.\nMAX_SEQ_LENGTH = 128\n\nTRAIN_BATCH_SIZE = 24\nEVAL_BATCH_SIZE = 8\nLEARNING_RATE = 2e-5\nNUM_TRAIN_EPOCHS = 1\nRANDOM_SEED = 42\nGRADIENT_ACCUMULATION_STEPS = 1\nWARMUP_PROPORTION = 0.1\nOUTPUT_MODE = 'classification'\n\nCONFIG_NAME = \"config.json\"\nWEIGHTS_NAME = \"pytorch_model.bin\"","f8a10e55":"def get_eval_report(task_name, labels, preds):\n    mcc = matthews_corrcoef(labels, preds)\n    tn, fp, fn, tp = confusion_matrix(labels, preds).ravel()\n    return {\n        \"task\": task_name,\n        \"mcc\": mcc,\n        \"tp\": tp,\n        \"tn\": tn,\n        \"fp\": fp,\n        \"fn\": fn\n    }\n\ndef compute_metrics(task_name, labels, preds):\n    assert len(preds) == len(labels)\n    return get_eval_report(task_name, labels, preds)","ac181a6b":"model.eval()\neval_loss = 0\nnb_eval_steps = 0\npreds = []\n\nfor input_ids, input_mask, segment_ids, label_ids in tqdm_notebook(eval_dataloader, desc=\"Evaluating\"):\n    input_ids = input_ids.to(device)\n    input_mask = input_mask.to(device)\n    segment_ids = segment_ids.to(device)\n    label_ids = label_ids.to(device)\n\n    with torch.no_grad():\n        logits = model(input_ids, segment_ids, input_mask, labels=None)\n\n    # create eval loss and other metric required by the task\n    if OUTPUT_MODE == \"classification\":\n        loss_fct = CrossEntropyLoss()\n        tmp_eval_loss = loss_fct(logits.view(-1, num_labels), label_ids.view(-1))\n    elif OUTPUT_MODE == \"regression\":\n        loss_fct = MSELoss()\n        tmp_eval_loss = loss_fct(logits.view(-1), label_ids.view(-1))\n\n    eval_loss += tmp_eval_loss.mean().item()\n    nb_eval_steps += 1\n    if len(preds) == 0:\n        preds.append(logits.detach().cpu().numpy())\n    else:\n        preds[0] = np.append(\n            preds[0], logits.detach().cpu().numpy(), axis=0)\n\neval_loss = eval_loss \/ nb_eval_steps\npreds = preds[0]\nif OUTPUT_MODE == \"classification\":\n    preds = np.argmax(preds, axis=1)\nelif OUTPUT_MODE == \"regression\":\n    preds = np.squeeze(preds)\nresult = compute_metrics(TASK_NAME, all_label_ids.numpy(), preds)\n\nresult['eval_loss'] = eval_loss\n\noutput_eval_file = os.path.join(REPORTS_DIR, \"eval_results.txt\")\nwith open(output_eval_file, \"w\") as writer:\n    logger.info(\"***** Eval results *****\")\n    for key in (result.keys()):\n        logger.info(\"  %s = %s\", key, str(result[key]))\n        writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n","060703e4":"We see a stark difference between how BERT and RoBERTa tokenize sentences","d86e997d":"### 6. Training & Validation Split","9b07b557":"The final score will be based on the entire test set, but let's take a look at the scores on the individual batches to get a sense of the variability in the metric between batches.\n\nEach batch has 32 sentences in it, except the last batch.","c42d9c34":"#### 8.1 BERT","fefc2d2a":"### 8. Training Loop","c0fc1d96":"Browsing all of the model's parameters by name here.\n\nIn the below cell, we have names and dimensions of the weights for:\n\nThe embedding layer.\nThe first of the twelve transformers.\nThe output layer","5461966b":"### 5. Tokenization\n\nBERT and RoBERTa are both Transformer models that have the same architecture. As such, they accept only a certain kind of inputs: vectors of integers, each value representing a token. Each string of text must first be converted to a list of indices to be fed to the model. The tokenizer takes care of that for us.\n\nBERT and RoBERTa may have the same architecture, but they differ in tokenization. BERT uses a sub-word tokenization, whereas RoBERTa uses the same tokenization than GPT-2: byte-level byte-pair-encoding. Let's see what this means:","fbfac5c5":"### 1. Installing required dependencies","0dde44eb":"Just in case there are some longer test sentences, I'll set the maximum length to 120.","7e6afb92":"In order for torch to use the GPU, we need to identify and specify the GPU as the device. Later, in our training loop, we will load data onto the device.","93d75487":"**BERT Tokenizer**\n\nHere, the BERT tokenizer splits the string into multiple substrings. If the substrings are in its vocabulary, they will stay as is: this is the case for `Cities`, `Taking` and `List`. However, if a resulting string is not in its vocabulary, it will be split again until every string is represented by its vocabulary. For example, `Transplanted` is split multiple times until every token is represented in the BERT vocabulary: it is split into three tokens.\nThe BERT tokenizer is lacking when it comes to complex characters spread over multiple bytes, as can be seen with emojis. In the sequence used, an emoji of a Cityscape was added. As the BERT tokenizer cannot interpret this emoji on a byte-level, it replaces it by the unknown token [UNK].\n\n**RoBERTa Tokenizer**\n\nOn the other hand, the RoBERTa tokenizer has a slightly different approach. Here too, the string is split into multiple substrings, which are themselves split into multiple substrings until every substring can be represented by the vocabulary. However, the RoBERTa tokenizer has a **byte-level approach**. This tokenizer can represent every sequence as a combination of bytes, which makes it shine in the case of complex characters spread over multiple bytes, as with the Cityscape emoji. Instead of using the unknown token, this tokenizer can correctly encode the Cityscape emoji as the combination of multiple bytes. This tokenizer therefore does not require an unknown token, as it can handle every byte separately.","4d17404c":"Now we're ready to perform the real tokenization.\n\nThe tokenizer.encode_plus function combines multiple steps for us:\n\n1. Split the sentence into tokens.\n2. Add the special [CLS] and [SEP] tokens.\n3. Map the tokens to their IDs.\n4. Pad or truncate all sentences to the same length.\n5. Create the attention masks which explicitly differentiate real tokens from [PAD] tokens.\n6. The first four features are in tokenizer.encode, but I'm using tokenizer.encode_plus to get the fifth item (attention masks)","c0a52a85":"#### 1.2. Installing the Hugging Face Library","c8fe5fd2":"Below is our training loop. There's a lot going on, but fundamentally for each pass in our loop we have a trianing phase and a validation phase.\n\n**Training:**\n\n1. Unpack our data inputs and labels\n2. Load data onto the GPU for acceleration\n3. Clear out the gradients calculated in the previous pass.\n4. In pytorch the gradients accumulate by default (useful for things like RNNs) unless you explicitly clear them out.\n5. Forward pass (feed input data through the network)\n6. Backward pass (backpropagation)\n7. Tell the network to update parameters with optimizer.step()\n8. Track variables for monitoring progress\n\n**Evaluation:**\n\n1. Unpack our data inputs and labels\n2. Load data onto the GPU for acceleration\n3. Forward pass (feed input data through the network)\n4. Compute loss on our validation data and track variables for monitoring progress\n5. Define a helper function for calculating accuracy.","2355ebae":"#### 8.2 RoBERTa","83cc16db":"Let's apply the tokenizer to one sentence just to see the output.","765ca7f4":"### 9. Evaluation ","7c1fb320":"### 10. Detalied Evaluation on Test data","e92a5607":"Helper function for formatting elapsed times as hh:mm:ss","80db7298":"### 4. Initializing the pre-trained models\n\nLet's initialize the models with pre-trained weights. The list of pre-trained weights is available in [the official documentation](https:\/\/huggingface.co\/transformers\/pretrained_models.html). Downloading the weights may take a bit of time, but it only needs to be done once!","3052da0b":"### 3. Pre-processing Text","dde5398a":"Now that we have our model loaded we need to grab the training hyperparameters from within the stored model.\n\nFor the purposes of fine-tuning, the authors recommend choosing from the following values :\n\nBatch size: 16, 32\nLearning rate (Adam): 5e-5, 3e-5, 2e-5\nNumber of epochs: 2, 3, 4\nWe chose:\n\nBatch size: 32 (set when creating our DataLoaders)\nLearning rate: 2e-5\nEpochs: 4 (we'll see that this is probably too many...)\nThe epsilon parameter eps = 1e-8 is \"a very small number to prevent any division by zero in the implementation\"","6de33e8a":"#### 2.1 TrainData","b7960b09":"## Getting State-of-the-Art results on sequence classification\n\nIn order to get State-of-the-Art results on this task, we will fine-tune our models on a given dataset. Fine-tuning a model means that we will slightly train it on top of an already trained checkpoint. The learning rate will be very low, as having it to high would result in catastrophic forgetting -> the model would forget what it had learned until now semantically and syntaxically.\n\nWe will follow the procedure detailed below:\n1. Installing required dependencies\n2. Loading both Fake and Real news data\n3. Preprocess the text - Data Cleaning & Standardisation\n4. Initiatizing pretrained models - BERT & RoBERTa\n5. Tokenzie this dataset so that it can be used by the model\n6. Train and Test split\n7. Set-up a training loop; train the model on the training data\n8. Evaluate the model on the testing data by comparing to the actual results","3215cbeb":"# Classifying News Articles as Fake using only Article Title\n\nIn this notebook I'll use Facebook's RoBERTa with the huggingface PyTorch library to fine-tune a model to get near state of the art performance in Jigsaw Multilingual Toxic Comment Classification.\n\nIn order to build this notebook references were taken from a blog post [here](https:\/\/medium.com\/@lysandrejik\/using-tensorflow-2-for-state-of-the-art-natural-language-processing-102445cda54a) and a Colab Notebook [here](https:\/\/colab.research.google.com\/drive\/1l39vWjZ5jRUimSQDoUcuWGIoNjLjA2zu)","bd293098":"The transformers library provides a helpful encode function which will handle most of the parsing and data prep steps for us.\n\nBefore we are ready to encode our text, though, we need to decide on a maximum sentence length for padding \/ truncating to.\n\nThe below cell will perform one tokenization pass of the dataset in order to measure the maximum sentence length.","6b3cd56d":"We're ready to kick off the training!","24b164fb":"### 2. Loading Data","02908236":"We'll also create an iterator for our dataset using the torch DataLoader class. This helps save on memory during training because, unlike a for loop, with an iterator the entire dataset does not need to be loaded into memory.","05ce4251":"### 7. Optimizer & Learning Rate Scheduler","79e98498":"Now we'll combine the results for all of the batches and calculate our final MCC score.","35f851a2":"#### 1.1. Using GPU for Training","faa248b1":"In this scenario I shall pickup the validation dataset which was eariler created and shall use it for prediction. The features have already been created on the data so I would just use them for evaluation of our model as well"}}