{"cell_type":{"cd907244":"code","f3fc5bee":"code","96d6d6b4":"code","24e55191":"code","d91ff332":"code","8c26c913":"code","93fb4d02":"code","1e06b31d":"code","84942408":"code","706be061":"code","72052cad":"code","215e3995":"code","30aacebe":"code","44d23d23":"code","18daa5d7":"code","f33ae41f":"code","dc33ff3f":"code","2970b037":"code","88e2a271":"code","d9679592":"code","939810f2":"code","b3b26f67":"code","666048a7":"code","cf4ad106":"markdown","8e993c7d":"markdown","bf975004":"markdown","4240ea25":"markdown","4b14d9ad":"markdown","5ff8cb2d":"markdown","29f5e5b4":"markdown","4235f20f":"markdown","8b1afab9":"markdown"},"source":{"cd907244":"!pip install word2number","f3fc5bee":"import pandas as pd \nimport numpy as np\nimport re\nimport os\nfrom word2number import w2n","96d6d6b4":"def my_function(x):\n    return (list(dict.fromkeys(x)))","24e55191":"def find_between(s, start, end):\n    return (s.split(start))[1].split(end)[0]","d91ff332":"path =\"..\/input\/cityofla\/CityofLA\/Job Bulletins\/\"\ncwd= os.chdir(path)","8c26c913":"structured_csv= pd.DataFrame(index=np.arange(len([name for name in os.listdir('.') if os.path.isfile(name)])),\n                             columns=['FILE_NAME','JOB_CLASS_TITLE','JOB_CLASS_NO','REQUIREMENT_SET_ID','REQUIREMENT_SUBSET_ID',\n                                     'JOB_DUTIES','EDUCATION_YEARS','SCHOOL_TYPE','EDUCATION_MAJOR','EXPERIENCE_LENGHT',\n                                     'FULL_TIME_PART_TIME','EXP_JOB_CLASS_TITLE','EXP_JOB_CLASS_FUNCTION','COURSE_COUNT',\n                                     'COURSE_LENGHT','COURSE_SUBJECT','DRIVERS_LICENSE_REQ','DRIV_LIC_TYPE','EXAM_TYPE',\n                                     'ENTRY_SALARY_GEN','ENTRY_SALARY_DWP','OPEN_DATE'])","93fb4d02":"import nltk\nnltk.download('punkt')\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords","1e06b31d":"\nz= 0\nfor filename in os.listdir(cwd):    \n\n    with open(filename, 'r') as f:\n        try:\n            lower=f.readlines()\n        except UnicodeDecodeError:\n            pass\n    with open(filename, 'r') as f:   \n        try:\n            upper= [word for word in f.readlines() if word.isupper()]\n        except UnicodeDecodeError:\n            pass\n        lower= [word.replace(\"\\n\",\"\") for word in lower]\n        lower= [x for x in lower if x]\n\n        upper= [word.replace(\"\\n\",\"\") for word in upper]\n        upper= [word.replace(\"\\t\",\"\") for word in upper]\n        diz_job= dict((el,\"\") for el in upper)\n\n        # FOR EACH FILE THE PART OF CODE ABOVE, READS LINE BY LINE THE DOCUMENT AND IT PUTS THE LOWER PART OF THE FILE IN A LIST AND THE UPPER WORDS \n\n        # ANOTHER ONE. THIS IS USEFULL TO CREATE A DICTIONARY TO ACCESS AT THE INFORMATION. AS WE CAN SE IN THE CODE ABOVE.\n        \n        for i in range (0,len(lower)):\n            if lower[i] in diz_job.keys():\n                name = lower[i]\n                diz_job[lower[i]]=\" \"\n            else:\n                try:\n                    diz_job[name]= diz_job[name] + \" \" + lower[i]\n                except:\n                    pass\n        #ON THIS PART I PUT THE KEY \"SALARY,REQUIREMENT,DUTIE\" ON A VARIABLE. THIS IS USEFULL TO AUTOMATE EVERYTHING.\n        fi_sal = str([x for x in upper if 'SALARY' in x])\n        salary_k= fi_sal.replace(\"['\",\"\").replace(\"']\",\"\")\n\n        re_sal=str([x for x in upper if 'REQUIREMENT' in x])\n        req_k= re_sal.replace(\"['\",\"\").replace(\"']\",\"\")\n\n        dut_sal=str([x for x in upper if 'DUTIE' in x])\n        dut_k= dut_sal.replace(\"['\",\"\").replace(\"']\",\"\")\n        \n        # HERE I FIND THE NAME OF THE JOB, FIRST THING IN UPPER FOR EACH DOCUMENT\n        JOB_CLAS_TITLE=upper[0]\n        \n        #TO FIND THE CLASS CODE, I FIND WHERE THE STRING 'Class Code' IS IN THE LOWER LIST AND I TAKE THE NUMERIC WORD.\n        for i in range (0,4):\n            if \"Class Code\" in str(lower[i]):\n                JOB_CLASS_NO= \"\".join([word for word in lower[i] if word.isnumeric()])\n        \n        school=[]\n        school=\"university\",\"high school\",\"college\",\"apprenticeship\"\n        \n        # AFTER DECLARED A LIST WITH ALL POSSIBLE SCHOOL TYPE, I'LL FIND IT IN THE DOCUMENT\n        SCHOOL_TYPE=[]\n        for word in school:\n            if word in str(lower):\n                SCHOOL_TYPE.append(word)\n        #AS DONE FOR CLASSE CODE, OPEN DATE IS EXTRACTED IN THE SAME WAY AND USING THE PD.TO_DATETIME TO TRANSFORM IT IN A DATE \n        for i in range (0,4):\n            if \"Open Date\" in str(lower[i]):\n                data= \"\".join([word for word in lower[i] if word.isnumeric()])\n        try:\n            data=pd.to_datetime(data,format=\"%m%d%y\")\n            OPEN_DATE=str(data.month) + \"-\" + str(data.day) + \"-\" + str(data.year)\n        except:\n            OPEN_DATE=data\n        \n        #NOW THE DICTIONARY CREATED BEFORE IS USEFULL TO RETRIEVE THE (FIRST) SALARY, FOR EACH JOB\n        salary=[]\n        try:\n            if \"and\" in str(diz_job[salary_k]):\n                salary= diz_job[salary_k].split(\" and\")\n                ENTRY_SALARY_GEN=salary[0]\n            else:\n                ENTRY_SALARY_GEN = diz_job[salary_k]\n        except:\n            ENTRY_SALARY_GEN=\"\"\n        try:\n            JOB_DUTIES=diz_job[dut_k]\n        except:\n            JOB_DUTIES=\"\"\n        \n        # FIND IF LICENSE IS REQUIRED, MAY REQUIRE OR NO REQUIRED \n        if \"driver's license is required\" in str(lower):\n                DRIVERS_LICENSE_REQ=\"R\"\n        elif \"may require a valid California driver's license\" in str(lower):\n            DRIVERS_LICENSE_REQ=\"P\"\n        else:\n            DRIVERS_LICENSE_REQ=\"NoR\"\n        \n        # IF EXIST EXTRACT THE TYPE OF DRIVER'S LICENSE NEEDED \n        DRIV_LIC_TYPE=\" \"\n        if \"Class C driver's\" in str(lower):\n            DRIV_LIC_TYPE= \"C\"\n            DRIVERS_LICENSE_REQ=\"R\"\n        elif \"Class B\" in str(lower):\n            DRIV_LIC_TYPE=\"B\"\n            DRIVERS_LICENSE_REQ=\"R\"\n        elif \"Class A\" in str(lower):\n            DRIV_LIC_TYPE=\"A\"\n            DRIVERS_LICENSE_REQ=\"R\"\n        elif \"Class M1\" in str(lower):\n            DRIV_LIC_TYPE=\"M1\"\n            DRIVERS_LICENSE_REQ=\"R\"\n        elif \"Class M2\" in str(lower):\n            DRIV_LIC_TYPE=\"M2\"\n            DRIVERS_LICENSE_REQ=\"R\"\n        else:\n            DRIV_LIC_TYPE=\" \"\n        \n        #TO HAVE NE NUMBER OF REQUESTS AND SUB_REQUEST, I WILL FIND IT IN LOWER AND IF LOWER[i] IS LIKE THE DICTIONARY.KEY OF REQUIREMENT\n        # I WILL TAKE EVERITHING BEFORE AND SPLIT IT TO SEE IF IT IS A NUMBER(REQUIREMENT) ORA A LETTER (SUBREQUIREMENT)\n        list2=[]\n        list3=[]\n        for i in range(0,len(lower)):\n            if lower[i]== str(req_k):\n                for j in range(1,(len(lower)-i)):\n                    if lower[i+j].isupper():\n                        break\n                    else:\n                        list2.append([word for word in lower[i+j][0:2] if word.isnumeric()])\n                        list3.append([word for word in lower[i+j][0:1] if word.isalpha() & word.islower()])\n\n        D1= len([x for x in list2 if x])\n\n        str1 = ''.join(str(e) for e in list3 if e)\n        D2= str1.replace(\"['\",\"\").replace(\"']\",\"\").upper()\n        \n        #IN THE CODE BELOW I WILL SAVE THE REQUIREMENT TEXT IN A STRING, IF A NEED SOMETHING ELSE \n        lista_req=[]\n        k=0\n\n        for i in range(0,len(lower)): \n            if lower[i]==str(req_k):\n                for j in range(1,(len(lower)-i)):\n                    if lower[i+j].isupper():\n                        break\n                    else:\n                        lista_req.append(lower[i+j])\n                        k=k+1\n        #TO HAVE THE EDUCATION YEAR, I WILL USE THE FOLLOWING LIST OF NUMBER, AND USING THE ATTRIVUTE CREATED BEFORE IF A JOB HAVE A SCHOOL_TYPE\n        #I WILL FIND IT IN THE LIST OF REQUIREMENTS AND I WILL TAKE THE NUMBER, THEN I TRANSFORM IT IN A NUMBER\n        nums_0_19 = ['One','Two','Three','Four','Five','Six','Seven','Eight',\"Nine\", 'Ten',\n                    'one','two','three','four','five','six','seven','eight',\"nine\", 'ten']\n        take_num=[]\n        for el in SCHOOL_TYPE:\n            for i in range(0,len(lista_req)):\n                if el in str(lista_req[i]):\n                    take_num= lista_req[i].split(el,1)\n\n        year_ed=[]\n\n        if len(take_num) > 0:\n            year_ed.append([w2n.word_to_num(word) for word in nums_0_19 if word in take_num[0]])\n        else:\n            year_ed=[]\n        # FOR COUNT OF SEMESTER AND QUARTER, WORD TOKENIZE IS USED, SO AFTER SPLITTED THE STRING I TAKE THE FIRST PART OF THE SPLIT\n        # AND IF IS NUMERIC I WILL TAKE IT OTHERWISE I TRANSFROM IT USING THE FUNCTION w2n.word_to_num(). SAME FOR QUARTER\n        for i in range(0,len(lista_req)):\n            if 'semester' in lista_req[i]:\n                n_sem= lista_req[i].split('semester',1)\n                num_s=[word.lower() for word in word_tokenize(n_sem[0],'english',False)][-1]\n                if num_s.isnumeric():\n                    sem= \"#S\"+\" \" + num_s\n                else:\n                    try:\n                        sem= \"#S\"+\" \" + str(w2n.word_to_num(num_s))\n                    except:\n                        sem= \"\"\n            else:\n                n_sem=\" \"\n                sem= \" \"\n            if 'quarter' in lista_req[i]:\n                n_quar= lista_req[i].split('quarter',1)\n                num_q= [word.lower() for word in word_tokenize(n_quar[0],'english',False)][-1]\n                if num_q.isnumeric():\n                    quar= \"#Q\" + \" \" + num_q\n                else:\n                    try:\n                        quar= \"#Q\" + \" \" + str(w2n.word_to_num(num_q))\n                    except:\n                        quar=\"\"\n            else:\n                n_quar=\" \"\n                quar=\" \"\n\n        word_exp=[]\n        year_exp=[]\n        ftpt=[]\n        job_exp=[]\n        job_fun1=[]\n        period=['full-time','part-time',\"apprenticeship\"]\n        # FOR EXP_JOB_TITLE, FULL_TIME_PART_TIME AND EXPERIENCE LENGHT. THE SAME LOGIC IS USED TO EXTRACT THE INFORMATION \n        for i in range(0,len(lista_req)):\n            exp=lista_req[i].split('experience',1)\n            if 'experience' in lista_req[i]:\n\n                if \"City of Los Angeles\" in exp[1]:\n                    year_exp.append([word for word in nums_0_19 if word in exp[0]])\n                    ftpt.append([word for word in period if word in exp[0]])        \n                    try:\n                        bck= exp[1].split('as',1)[1]\n                    except:\n                    #bck= exp[1].split('in',1)[1]\n                        pass\n                    job_exp.append(bck.split('with',1)[0])\n                else:\n                    try:\n                        if \" as \" in exp[1]:\n                            year_exp.append([word for word in nums_0_19 if word in exp[0]])\n                            ftpt.append([word for word in period if word in exp[0]])\n                            job_exp.append(\" \")\n                            job_fun= exp[1].split('as a',1)[1]\n                            fun_j= job_fun.split(',')\n                            for j in range(0,len(fun_j)):\n                                job_fun1.append(fun_j[j])\n                        else:\n                            year_exp.append([word for word in nums_0_19 if word in exp[0]])\n                            ftpt.append([word for word in period if word in exp[0]])\n                            job_exp.append(\" \")\n                            job_fun= exp[1].split(' in ',1)[1]\n                            fun_j= job_fun.split(',')\n\n                            for j in range(0,len(fun_j)):\n                                job_fun1.append(fun_j[j])\n                    except:\n                        pass\n        try:\n            EXPERIENCE_LENGTH=year_exp[0]\n            FULL_TIME_PART_TIME=ftpt[0]\n            EXP_JOB_CLASS_TITLE=job_exp[0]\n        except:\n            EXPERIENCE_LENGTH=\"\"\n            FULL_TIME_PART_TIME=\"\"\n            EXP_JOB_CLASS_TITLE=\"\"\n        #FOR JOB CLASS FUNCTION THE ONLY WAY TO EXTRACT THE INFORMATION IS THE FOLLOWING ONE, I'LL TAKE IT IF WE DON'T HAVE THE \n        #\"City of Los Angeles\" FOR THE WORK AND I'LL SPLIT IT AND I TAKE EACH ITEMS IN JOB_FUN1.\n        \n        if \"job_fun1\" in locals():\n            job_fun1 = my_function(job_fun1)\n\n            EXP_JOB_CLASS_FUNCTION=\"\"\n\n            for item in job_fun1:\n                EXP_JOB_CLASS_FUNCTION=EXP_JOB_CLASS_FUNCTION +\"|\"+ item\n        else:\n            job_fun1=\"\"\n        \n        #TO UNDERSTAND THE EDUCATION MAJOR I WILL TAKE EVERYTHING AFTER THE STRING \"major in\",\"college in\",\"university in\" AND AFTER I WILL\n        #CLEAN IT IN THE DATA CLEANING CHUNKS\n        EDUCATION_MAJOR=\" \"\n        for i in range(0,len(lista_req)):\n            if \"apprenticeship\" in SCHOOL_TYPE:\n                EDUCATION_MAJOR= EXP_JOB_CLASS_FUNCTION\n            elif \"major in\" in lista_req[i]:\n                #result= re.search('major in(.*);', lista_req[i]\n                EDUCATION_MAJOR = find_between(lista_req[i],\"major in\",\";\")\n            elif \"college in\" in lista_req[i]:\n                #result= re.search('college in(.*);', lista_req[i]\n                EDUCATION_MAJOR = find_between(lista_req[i],\"college in\",\";\")\n            elif \"university in\" in lista_req[i]:\n                #result= re.search('university in(.*);', lista_req[i]\n                EDUCATION_MAJOR = find_between(lista_req[i],\"university in\",\";\")\n        \n        #EXAM TYPE IS OFTEN IN THE END OF THE FILE AND IS ALWAYS UPPER, I TAKE THE LAST 5 STRING IN UPPER AND I COMPARE IT WITH SOME STRING\n        #TO FIND THE FINAL EXAM TYPE\n        get_exam=[]\n        get_exam.append([word for word in word_tokenize(str(upper[-5:]),'english',False)])\n        \n        for i in range(0,len(get_exam)):\n            if \"OPEN\" and (\"INTERDEPARTMENTAL\" in get_exam[i] or \"'INTERDEPARTMENTAL\" in get_exam[i]):\n                EXAM_TYPE = \"OPEN_INT_PROM\"\n            elif \"OPEN\" in get_exam[i] and (\"INTERDEPARTMENTAL\" not in get_exam[i] or \"'INTERDEPARTMENTAL\" not in get_exam[i]) :\n                EXAM_TYPE = \"OPEN\"\n            elif (\"INTERDEPARTMENTAL\" in get_exam[i] or \"'INTERDEPARTMENTAL\" in get_exam[i]) and \"OPEN\" not in get_exam[i]:\n                EXAM_TYPE = \"INT_DEPT_PROM\"\n            else:\n                EXAM_TYPE = \"DEPT_PROM\"\n\n        #FOR SALARY_DWP THE SAME LOGIC OF SALARY IS USED IF \"Department of Water and Power\" IS IN THE ELEMENT \"ANNUAL SALARY\" OF THE DICTIONARY\n        try:    \n            if \"Department of Water and Power\" in diz_job[salary_k]:\n                try:\n                    if len(diz_job[salary_k].split(\"is\",1)[1]) > 21:\n                        try:\n                            ENTRY_SALARY_DWP=diz_job[salary_k].split(\"is\",1)[1][1:20]\n                        except:\n                            ENTRY_SALARY_DWP=diz_job[salary_k].split(\"is\",1)[1][1:19]\n                    else:\n                        ENTRY_SALARY_DWP=diz_job[salary_k].split(\"is\",1)[1]\n                except:\n                    ENTRY_SALARY_DWP = diz_job[salary_k]\n            else:\n                ENTRY_SALARY_DWP=\" \"\n        except:\n            ENTRY_SALARY_DWP=\" \"\n        \n       #COURSE SUBJECT IS EXTRACTED SPLITTING THE STRING WHERE IS \"semester\" or \"quarter\", SPLITTED IN \"units\" AND TAKE THE WORDS AFTER.\n        for i in range(0,len(lista_req)):\n            if \"semester\" in lista_req[i]:\n                semester=True\n            else:\n                semester=False\n            if \"quarter\" in lista_req[i]:\n                quarter=True\n            else:\n                quarter=False\n\n            try:\n                if quarter==True | semester==True:\n                    COURSE_SUBJECT= lista_req[i].split(\"units\",1)[1].split(\",\",1)[0]\n                else:\n                    COURSE_SUBJECT = \" \"\n            except:\n                COURSE_SUBJECT= \" \"\n         \n        #TO FIND UNITS OF COURSE NEEDED IS USED THE CODE BELOW, SAME LOGICO FO YEAR EDUCATION OR EXPERIENCE, IF THERE IS \"courses\" TAKE THE NUMBER\n         #BEFORE OTHERWISE IF THERE IS \"semester\" or \"quarter\" PUT 1\n            if quarter==True | semester==True:\n                if 'courses' in lista_req[i]:\n                    n_courses= lista_req[i].split('courses',1)\n                    COURSE_COUNT = [word.lower() for word in word_tokenize(n_courses[0],'english',False)][-1]\n                else:\n                    COURSE_COUNT= \"1\"\n            else:\n                COURSE_COUNT=\" \"\n        \n        #CREATE THE DATAFRAME\n        structured_csv['FILE_NAME'][z]= filename\n        structured_csv['JOB_CLASS_TITLE'][z]=JOB_CLAS_TITLE\n        structured_csv['JOB_CLASS_NO'][z]=JOB_CLASS_NO\n        structured_csv['REQUIREMENT_SET_ID'][z]=D1\n        structured_csv['REQUIREMENT_SUBSET_ID'][z]= str(D2)\n        structured_csv['JOB_DUTIES'][z]= JOB_DUTIES\n        structured_csv['EDUCATION_YEARS'][z]=str(year_ed)\n        structured_csv['SCHOOL_TYPE'][z]=str(SCHOOL_TYPE)\n        structured_csv['EDUCATION_MAJOR'][z]=EDUCATION_MAJOR\n        structured_csv['EXPERIENCE_LENGHT'][z]=str(EXPERIENCE_LENGTH)\n        structured_csv['FULL_TIME_PART_TIME'][z]=str(FULL_TIME_PART_TIME)\n        structured_csv['EXP_JOB_CLASS_TITLE'][z] = str(EXP_JOB_CLASS_TITLE)\n        structured_csv['EXP_JOB_CLASS_FUNCTION'][z] = str(EXP_JOB_CLASS_FUNCTION)\n        structured_csv['COURSE_COUNT'][z]=COURSE_COUNT\n        structured_csv['COURSE_LENGHT'][z] = str(quar) + \" \" + str(sem)\n        structured_csv['COURSE_SUBJECT'][z]=str(COURSE_SUBJECT)\n        structured_csv['DRIVERS_LICENSE_REQ'][z]=DRIVERS_LICENSE_REQ\n        structured_csv['DRIV_LIC_TYPE'][z]=DRIV_LIC_TYPE\n        structured_csv['EXAM_TYPE'][z]=EXAM_TYPE\n        structured_csv['ENTRY_SALARY_GEN'][z]=ENTRY_SALARY_GEN\n        structured_csv['ENTRY_SALARY_DWP'][z]=ENTRY_SALARY_DWP\n        structured_csv['OPEN_DATE'][z]=OPEN_DATE\n\n        z=z+1\n        \n\n        \n        \n     \n    ","84942408":"for i in range(0,len(structured_csv)):\n    \n    if len(re.findall('\\d*\\.?\\d+',structured_csv['ENTRY_SALARY_GEN'][i].replace(\",\",\".\"))) > 1:\n        st= str(re.findall('\\d*\\.?\\d+',structured_csv['ENTRY_SALARY_GEN'][i].replace(\",\",\".\"))[0])\n        en= str(re.findall('\\d*\\.?\\d+',structured_csv['ENTRY_SALARY_GEN'][i].replace(\",\",\".\"))[1])\n        structured_csv['ENTRY_SALARY_GEN'][i]=st.replace(\".\",\",\") + \" - \" + en.replace(\".\",\",\")\n    elif len(re.findall('\\d*\\.?\\d+',structured_csv['ENTRY_SALARY_GEN'][i].replace(\",\",\".\"))) ==1:\n        st= re.findall('\\d*\\.?\\d+',structured_csv['ENTRY_SALARY_GEN'][i].replace(\",\",\".\"))[0]\n        en= \"(flat-rated)\"\n        structured_csv['ENTRY_SALARY_GEN'][i]=st.replace(\".\",\",\") + \" \" + en.replace(\".\",\",\")\n    else:\n        st= \"\"\n        en= \"\"\n        structured_csv['ENTRY_SALARY_GEN'][i]=st.replace(\".\",\",\") + \" \" + en.replace(\".\",\",\")\n        \n    if len(re.findall('\\d*\\.?\\d+',structured_csv['ENTRY_SALARY_DWP'][i].replace(\",\",\".\"))) > 1:\n        st= str(re.findall('\\d*\\.?\\d+',structured_csv['ENTRY_SALARY_DWP'][i].replace(\",\",\".\"))[0])\n        en= str(re.findall('\\d*\\.?\\d+',structured_csv['ENTRY_SALARY_DWP'][i].replace(\",\",\".\"))[1])\n        structured_csv['ENTRY_SALARY_DWP'][i]=st.replace(\".\",\",\") + \" - \"  + en.replace(\".\",\",\")\n    elif len(re.findall('\\d*\\.?\\d+',structured_csv['ENTRY_SALARY_DWP'][i].replace(\",\",\".\"))) ==1:\n        st= re.findall('\\d*\\.?\\d+',structured_csv['ENTRY_SALARY_DWP'][i].replace(\",\",\".\"))[0]\n        en= \"(flat-rated)\"\n        structured_csv['ENTRY_SALARY_DWP'][i]=st.replace(\".\",\",\") + \" \" + en.replace(\".\",\",\")\n    else:\n        st= \"\"\n        en= \"\"\n        structured_csv['ENTRY_SALARY_DWP'][i]=st.replace(\".\",\",\") + \" \" + en.replace(\".\",\",\")\n    \n    ","706be061":"for j in range(0,len(structured_csv)):\n    try:\n        structured_csv['EXPERIENCE_LENGHT'][j]=w2n.word_to_num(structured_csv['EXPERIENCE_LENGHT'][j].replace(\"[\",\"\").replace(\"'\",\"\").replace(\"]\",\"\"))\n    except:\n        structured_csv['EXPERIENCE_LENGHT'][j]= \" \"","72052cad":"for j in range(0,len(structured_csv)):\n    structured_csv['EDUCATION_YEARS'][j]=structured_csv['EDUCATION_YEARS'][j].replace(\"[\",\"\").replace(\"]\",\"\")\n    structured_csv['SCHOOL_TYPE'][j]=structured_csv['SCHOOL_TYPE'][j].replace(\"[\",\"\").replace(\"]\",\"\").replace(\"'\",\"\")\n    structured_csv['FULL_TIME_PART_TIME'][j]=structured_csv['FULL_TIME_PART_TIME'][j].replace(\"[\",\"\").replace(\"]\",\"\").replace(\"'\",\"\")","215e3995":"for i in range(0,len(structured_csv)):\n    structured_csv['EXP_JOB_CLASS_TITLE'][i]=' '.join(re.findall(r'\\b[A-Z][a-z]+|\\b[A-Z]\\b', structured_csv['EXP_JOB_CLASS_TITLE'][i]))","30aacebe":"l_prova=[]\nfor i in range(0,len(structured_csv)):\n    try:\n        text_after= structured_csv['COURSE_SUBJECT'][i].split(' in ',1)[1]\n        l_prova.append([word for word in word_tokenize(text_after,'English',False) if word not in stopwords.words('English')])    \n    \n    except:\n        l_prova.append(\"\")               ","44d23d23":"for i in range(0,len(l_prova)):\n    if len(l_prova[i])> 0:\n        if l_prova[i][0:2] not in stopwords.words('English'):\n            if l_prova[i][0]==\"following\":\n                l_prova[i]=l_prova[i][-2:]\n            elif l_prova[i][0]==\"accredited\":\n                l_prova[i]=l_prova[i][-2:]\n            else:\n                if len(l_prova[i])> 1:\n                    if re.findall(r'\\b[A-Z][a-z]+|\\b[A-Z]\\b',l_prova[i][1]):\n                        l_prova[i]=l_prova[i][0] + \" \" + l_prova[i][1]\n                    else:\n                        l_prova[i]=l_prova[i][0]\n                else:\n                    l_prova[i]=l_prova[i][0]\n        else:\n            l_prova[i]=\" \"\n\nstructured_csv['COURSE_SUBJECT']=l_prova","18daa5d7":"structured_csv.head(8)","f33ae41f":"#def extract_mean:\nsalary_list4plot=[]\nfor i in range(0,len(structured_csv)):\n    salary_list4plot.append([word for word in word_tokenize(structured_csv['ENTRY_SALARY_GEN'][i],'english',False)])","dc33ff3f":"media=[]\nfor i in range(0,len(salary_list4plot)):    \n    if len(salary_list4plot[i]) ==3:\n        salary_list4plot[i][0]=salary_list4plot[i][0].replace(\",\",\".\")\n        salary_list4plot[i][2]=salary_list4plot[i][2].replace(\",\",\".\")\n        media.append(round((float(salary_list4plot[i][0]) + float(salary_list4plot[i][2])\/2),3))\n    elif len(salary_list4plot[i]) == 4:\n        salary_list4plot[i][0]=salary_list4plot[i][0].replace(\",\",\".\")\n        media.append(float(salary_list4plot[i][0]))\n    elif len(salary_list4plot[i])== 0:\n        media.append(0)","2970b037":"df_4viz=pd.DataFrame()","88e2a271":"df_4viz['JOB_TITLE'] = structured_csv['JOB_CLASS_TITLE']\ndf_4viz['DATE']= structured_csv['OPEN_DATE']\ndf_4viz['AVG_SALARY']= media\ndf_4viz['EXAM_TYPE']= structured_csv['EXAM_TYPE']\ndf_4viz['REQUIREMENTS']= structured_csv['REQUIREMENT_SET_ID']\ndf_4viz['SCHOOL']= structured_csv['SCHOOL_TYPE']\ndf_4viz['EDUC_YEAR']=structured_csv['EDUCATION_YEARS']","d9679592":"df_4viz['DATE']=pd.to_datetime(df_4viz['DATE'],format='%m-%d-%Y',errors=\"coerce\")","939810f2":"df_4viz['AVG_SALARY']=pd.to_numeric(df_4viz['AVG_SALARY'])","b3b26f67":"df_4viz.head()","666048a7":"%%HTML \n<div class='tableauPlaceholder' id='viz1561137697641' style='position: relative'><noscript><a href='#'><img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;JO&#47;JOB_LACITY&#47;Dashboard1&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='JOB_LACITY&#47;Dashboard1' \/><param name='tabs' value='no' \/><param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;JO&#47;JOB_LACITY&#47;Dashboard1&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><param name='filter' value='publish=yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1561137697641');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","cf4ad106":"Function usefull to find word between two other words","8e993c7d":"The code below do all the Job of this request. For each file txt content in the directory Job Bullettins, this alghorithm will extract the following information:\n* 'FILE_NAME'\n* 'JOB_CLASS_TITLE'\n* 'JOB_CLASS_NO'\n* 'REQUIREMENT_SET_ID'\n* 'REQUIREMENT_SUBSET_ID'\n* 'JOB_DUTIES'\n* 'EDUCATION_YEARS' \n* 'SCHOOL_TYPE\n* 'EDUCATION_MAJOR'\n* 'EXPERIENCE_LENGHT'\n* 'FULL_TIME_PART_TIME'\n* 'EXP_JOB_CLASS_TITLE'\n* 'EXP_JOB_CLASS_FUNCTION' \n* 'COURSE_COUNT',\n* 'COURSE_LENGHT'\n* 'COURSE_SUBJECT'\n* 'DRIVERS_LICENSE_REQ'\n* 'DRIV_LIC_TYPE' \n* 'EXAM_TYPE'\n* 'ENTRY_SALARY_GEN'\n* 'ENTRY_SALARY_DWP' \n* 'OPEN_DATE'\n\nInformations are extracted using text mining, that is very usefull for this task. One of the best library used for text mining is nltk, in the code you will find an explenation of what it do, to make it more understandable.","bf975004":"This function remove all duplicates from list.","4240ea25":"# Information for visualization\nTo make some insight, a new df is created with the attributes, in my opinion,that has a better comparison. In the end a tool is generated and it is easy to use.","4b14d9ad":"# A little tool with Tableau","5ff8cb2d":"# Data Science for Good: City of Los Angeles","29f5e5b4":"Set the output dataframe","4235f20f":"# DATA CLEANING\n\nIn this section, after that we have our structured dataframe we need to clean it, to make it better and more understandable. So stopwords in the EXP_JOB_TITLE,FUNCTION,SCHOOL_TYPE are deleted and Salary is made like this 123,456-145,678. ","8b1afab9":"I'll set the directory"}}