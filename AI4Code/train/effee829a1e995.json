{"cell_type":{"d2931dd1":"code","3b2ab9de":"code","acdc19ed":"code","6bc4946c":"code","a9c43141":"code","117fb670":"code","159a3da5":"code","76257f32":"code","f9661a0a":"code","cc1d9533":"code","e228fee6":"code","47082510":"code","de3aa42e":"code","e22938bf":"code","138fcf62":"code","9a27f896":"code","f8149346":"code","439e85c9":"markdown"},"source":{"d2931dd1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3b2ab9de":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport geopandas as gpd\n\n%matplotlib inline","acdc19ed":"events_df = pd.read_csv('\/kaggle\/input\/covid19-measures-in-bulgaria\/covid-19 Bulgaria measures.csv')\nevents_df","6bc4946c":"df = pd.read_csv('..\/input\/covid19-ourworldindata\/full_data.csv')","a9c43141":"#leave only non zeros total cases\ndf = df[df['total_cases']!=0]","117fb670":"appear_date_df = df.groupby('location').agg({'date':['min','max']}).sort_values(by=('date','min'), ascending=True, na_position='last')\nappear_date_df.columns = [' '.join(col).strip() for col in appear_date_df.columns.values]\ndf1_c = pd.merge(df, appear_date_df, on=\"location\")\ndf1_c['days since first case'] = pd.to_datetime(df1_c['date']) - pd.to_datetime(df1_c['date min'])\ndf1_c['days since first case']=df1_c['days since first case']\/np.timedelta64(1,'D')\n#df1_c=df1_c.reset_index()\ndf1_c","159a3da5":"kwargs = {\"fontsize\": 16,\n          \"fontstyle\": \"normal\"\n         }","76257f32":"#plot several countries\n\ncountries = ['Bulgaria',\n             'Greece', \n             'Romania', \n             'Serbia', \n             'Macedonia', \n             'Turkey', \n             'Albania', \n             'Croatia',\n             'Montenegro', \n             'Bosnia and Herzegovina', \n             'Slovenia',\n             'Slovakia',\n             'Moldova',\n             'Hungary',\n             'Kosovo'\n            ]\ndf_plot = df1_c[ df1_c['location'].isin(countries)] \n\ndf_balkans = df_plot.copy()\n\nplt.figure(figsize=(20,12))\nsns.lineplot(data=df_plot, x='days since first case',y='total_cases', hue='location').set(title = 'After the first case in each country on the Balkans')\n\n\ndf_annotate = df_plot.groupby('location').agg({'days since first case':'max', 'total_cases':  'max'})\n\nfor index, row in df_annotate.iterrows():\n    plt.annotate(#'{}\\n(day: {:.0f}, cases: {:.0f})'.format(row.name,row['days since first case'],row['total_cases']),\n                row.name,\n                 xy=(row['days since first case']+0.1,row['total_cases']), \n                 xytext=(row['days since first case']+0.5, row['total_cases']+3),\n                 arrowprops=dict(facecolor='black', shrink=0.05, headwidth=4, width=0.5),\n                **kwargs\n                )\nplt.show()\n\n","f9661a0a":"#plot Byulgaria and border countries\n\ncountries = ['Bulgaria',\n             'Greece', \n             'Romania', \n             'Serbia', \n             'Macedonia', \n             #'Turkey'\n            ]\ndf_plot = df1_c[ df1_c['location'].isin(countries)] \n\nplt.figure(figsize=(20,15))\nsns.lineplot(data=df_plot, x='days since first case',y='total_cases', hue='location').set(title = 'Bulgaria and neighbour countries after the first case')\n\n\ndf_annotate = df_plot.groupby('location').agg({'days since first case':'max', 'total_cases':  'max'})\n\nfor index, row in df_annotate.iterrows():\n    plt.annotate('{} (day: {:.0f}, cases: {:.0f})'.format(row.name,row['days since first case'],row['total_cases']),\n                #row.name,\n                 xy=(row['days since first case']+0.1,row['total_cases']), \n                 xytext=(row['days since first case']+0.5, row['total_cases']+50),\n                 arrowprops=dict(facecolor='black', shrink=0.05, headwidth=4, width=0.5),\n                **kwargs\n                )\nplt.show()","cc1d9533":"#plot Byulgaria and border countries\n\ncountries = ['Bulgaria',\n             'Greece', \n             'Romania', \n             'Serbia', \n             'Macedonia', \n             #'Turkey'\n            ]\ndf_plot = df1_c[ df1_c['location'].isin(countries)] \n\nplt.figure(figsize=(20,15))\nsns.lineplot(data=df_plot, x='days since first case',y='new_cases', hue='location').set(title = 'New cases daily - Bulgaria and neighbour countries after the first case')\n\n\ndf_annotate = df_plot.groupby('location').agg({'days since first case':'max'})\ndf_annotate = pd.merge(df_annotate, df_plot, on=[\"location\",'days since first case'], how = 'left')\nprint(df_annotate)\n\nfor index, row in df_annotate.iterrows():\n    plt.annotate('{} (day: {:.0f}, cases: {:.0f})'.format(row.location,row['days since first case'],row['new_cases']),\n                #row.name,\n                 xy=(row['days since first case']+0.1,row['new_cases']), \n                 xytext=(row['days since first case']+0.5, row['new_cases']+10),\n                 arrowprops=dict(facecolor='black', shrink=0.05, headwidth=4, width=0.5),\n                **kwargs\n                )\nplt.show()","e228fee6":"#plot Byulgaria and border countries by date\n\ncountries = ['Bulgaria',\n             'Greece', \n             'Romania', \n             'Serbia', \n             'Macedonia', \n             #'Turkey'\n            ]\ndf_plot = df1_c[ df1_c['location'].isin(countries)] \n#print(df_plot)\n\n\nplt.figure(figsize=(20,15))\n#g=sns.relplot(data=df_plot, x='date',y='new_cases', hue='location', kind=\"line\").set(title = 'New cases daily - Bulgaria and neighbour countries')\n\nsns.lineplot(data=df_plot, x='date',y='new_cases', hue='location').set(title = 'New cases daily - Bulgaria and neighbour countries')\nplt.xticks(rotation=45)\n#print(type(axs[0]))\n#g.fig.autofmt_xdate()\n#g.set_xticklabels(rotation=30)\nplt.gca().xaxis.set_major_locator(plt.MultipleLocator(10))\n#ax.xaxis.set_major_locator(mdates.WeekdayLocator(interval=10))\n\ndf_annotate = df_plot.groupby('location').agg({'date':'max'})\n#print(df_annotate)\ndf_annotate = pd.merge(df_annotate, df_plot, on=[\"location\",'date'], how = 'left')\n#print(df_annotate)\n\nx_position =  df_annotate[\"days since first case\"].max()\n\n#print(x_position)\n\nfor index, row in df_annotate.iterrows():\n    plt.annotate('{} (date: {:s}, cases: {:.0f})'.format(row.location,row['date'],row['new_cases']),\n                #row.name,\n                 xy=(x_position+0.1,row['new_cases']), \n                 xytext=(x_position+10, row['new_cases']+20),\n                 arrowprops=dict(facecolor='black', shrink=0.05, headwidth=4, width=0.5),\n                **kwargs\n                )\nplt.show()","47082510":"df_plot.info()","de3aa42e":"import datetime\ndatetime.datetime.strptime('2020-03-08', \"%Y-%m-%d\").date()\n\nevents_df = events_df[['date','restriction']]\nevents_df['first date'] = datetime.datetime.strptime('2020-03-08', \"%Y-%m-%d\").date()\nevents_df['days since first case'] = pd.to_datetime(events_df['date']) - pd.to_datetime(events_df['first date'])\nevents_df['days since first case']=events_df['days since first case']\/np.timedelta64(1,'D')\nevents_df=events_df.reset_index()","e22938bf":"#plot Byulgaria and events\n\ncountries = 'Bulgaria'\ndf_plot = df1_c[ df1_c['location'].eq(countries)] \n\ndf_plot = pd.merge(df_plot, events_df, how='left', on=[\"days since first case\",'date'])\n#print(events_df)\nplt.figure(figsize=(15,20))\nsns.lineplot(data=df_plot, x='days since first case',y='total_cases', hue='location').set(title = 'Bulgaria after the first case')\n\n# annotate with events\n#print(df_plot.columns)\n\ndf_annotate = (df_plot.assign(rn=df_plot.groupby(['days since first case'])['total_cases']\n                                          .rank(method='first', ascending=False))\n                                          #.query('rn <= 2')\n                                          .sort_values(['days since first case', 'rn']))\n#print(df_annotate)\nfor index, row in df_annotate.iterrows():\n    if str(row['restriction']) != str(np.nan):\n        print(row['restriction'], np.nan)\n        plt.annotate('day {:.0f}: {} - {}'.format(row['days since first case'],row['date'], row['restriction']),\n                    #row.name,\n                     xy=(row['days since first case']+0.1,row['total_cases']), \n                     xytext=(row['days since first case']+0.5, row['total_cases']-8*(row['rn'] - 1)),\n                     arrowprops=dict(facecolor='black', shrink=0.05, headwidth=4, width=0.5),\n                    **kwargs\n                    )\nplt.show()","138fcf62":"countries = ['Bulgaria',\n             'Greece', \n             'Romania', \n             'Serbia', \n             'Macedonia', \n             'Turkey', \n             'Albania', \n             'Croatia',\n             'Montenegro', \n             'Bosnia and Herz.', \n             'Slovenia',\n             'Slovakia',\n             'Moldova',\n             'Hungary',\n             'Kosovo'\n            ]\n\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\nbalkans = world[world.name.isin(countries)].sort_values('name')\n\ndf_balkans = df_balkans[df_balkans.date == df_balkans['date max']]\n\n# manually change Bosnia and Herz. to Bosnia and Herzegovina\nbalkans.at[170,'name']= 'Bosnia and Herzegovina'\n\ndf_balkans = pd.merge(balkans, df_balkans, how='left', left_on='name', right_on='location')","9a27f896":"df_balkans['coords'] = df_balkans['geometry'].apply(lambda x: x.representative_point().coords[:])\ndf_balkans['coords'] = [coords[0] for coords in df_balkans['coords']]","f8149346":"fig, ax = plt.subplots(1, figsize=(20, 15))\nax.axis('off')\nax.set_title('COVID-19 Total Cases by country in the Balkans', fontdict={'fontsize': '20', 'fontweight' : '3'})\n\n#bbox_props = dict(boxstyle=\"round\", fc=\"cyan\", ec=\"b\", lw=2)\nbbox_props = dict(boxstyle=\"round\",fc=\"white\", ec=\"b\" )\n\n#df_balkans.plot(column='total_cases', cmap='Blues', figsize=(15,10), scheme='equal_interval', k=9, legend=True, alpha=0.5, edgecolor='k')\nax = df_balkans.plot(column='total_cases', cmap='Blues', edgecolor='k', ax=ax)\ndf_balkans.apply(lambda x: ax.annotate(s='{}\\n{:.0f}'.format(x.location, x.total_cases), xy=x.geometry.centroid.coords[0], ha='center', bbox=bbox_props),axis=1)\n#df_balkans","439e85c9":"Here we see all countries except Turkey have slow increase of covid-19 cases."}}