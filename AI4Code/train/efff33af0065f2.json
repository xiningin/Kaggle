{"cell_type":{"0fc3c255":"code","a41672dc":"code","c297dede":"code","4117d774":"code","4f114404":"code","47050cee":"code","30321776":"code","3a14372c":"code","9f4f4894":"code","4e4c167a":"code","7e1165dd":"code","92807bf7":"code","b8af9488":"code","d11ecc13":"code","634c7673":"code","f1757b8f":"code","c1b950a7":"markdown","9d28a109":"markdown","d1e0045a":"markdown","f025bc6f":"markdown","4b7c9eb7":"markdown","f9656e10":"markdown"},"source":{"0fc3c255":"# load libraries\nimport os\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,Input\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.models import Sequential\nfrom numpy.random import seed\nseed(0)","a41672dc":"train_dir='\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/'\ntest_dir='\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/test\/'\ntrain=pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/sample_submission.csv')\ntrain.head()","c297dede":"test['path'] = test_dir + test.image_name + \".jpg\"\ntest = test.drop([\"image_name\"],axis=1)\ntest.head()","4117d774":"train['path'] = train_dir + train.image_name + \".jpg\"\ntrain = train.drop([\"image_name\",\"patient_id\",\"sex\",\"age_approx\",\"anatom_site_general_challenge\",\"diagnosis\",\"benign_malignant\"],axis=1)\ntrain.head()","4f114404":"val = train[26500:][:]\ntrain = train[:26500][:]","47050cee":"train.target.value_counts()","30321776":"test.target.value_counts()","3a14372c":"train_datagen = ImageDataGenerator(rescale=1.\/255,rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,horizontal_flip=True)\nval_datagen=ImageDataGenerator(rescale=1.\/255)\ntrain_generator = train_datagen.flow_from_dataframe(\n    train,\n    x_col='path',\n    y_col='target',\n    target_size=(224, 224),\n    batch_size=8,\n    shuffle=True,\n    class_mode='raw')\n\nvalidation_generator = val_datagen.flow_from_dataframe(\n    val,\n    x_col='path',\n    y_col='target',\n    target_size=(224, 224),\n    shuffle=False,\n    batch_size=8,\n    class_mode='raw')\n","9f4f4894":"test_datagen = ImageDataGenerator(rescale=1.\/255,rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,horizontal_flip=True)\ntest_generator = train_datagen.flow_from_dataframe(\n    test,\n    x_col='path',\n    y_col='target',\n    target_size=(224, 224),\n    batch_size=8,\n    shuffle=True,\n    class_mode='raw')","4e4c167a":"import matplotlib.pyplot as plt\nfor i in range(8):\n    plt.figure()\n    plt.imshow(validation_generator[0][0][i])","7e1165dd":"model = models.Sequential()\nmodel.add(layers.Conv2D(filters=32, kernel_size=(3, 3), strides=(1, 1), activation='relu',\n                        input_shape=(224, 224, 3)))\nmodel.add(layers.MaxPooling2D((2, 2),strides=2))\nmodel.add(layers.Conv2D(filters=64, kernel_size=(3, 3), strides=(1, 1), activation='relu'))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2),strides=2))\nmodel.add(layers.Conv2D(filters=128, kernel_size=(3, 3), strides=(1, 1), activation='relu'))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2),strides=2))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(units=1, activation='sigmoid'))\nmodel.summary()","92807bf7":"model.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\nhistory = model.fit(train_generator, steps_per_epoch=5, epochs=2,\n                         validation_data=validation_generator, validation_steps=5)","b8af9488":"a =  2\nf, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\nt = f.suptitle('Basic CNN Performance', fontsize=12)\nf.subplots_adjust(top=0.85, wspace=0.3)\n\nepoch_list = list(range(1,a+1))\nax1.plot(epoch_list, history.history['accuracy'], label='Train Accuracy')\nax1.plot(epoch_list, history.history['val_accuracy'], label='Validation Accuracy')\nax1.set_xticks(np.arange(0, a+1, 5))\nax1.set_ylabel('Accuracy Value')\nax1.set_xlabel('Epoch')\nax1.set_title('Accuracy')\nl1 = ax1.legend(loc=\"best\")\n\nax2.plot(epoch_list, history.history['loss'], label='Train Loss')\nax2.plot(epoch_list, history.history['val_loss'], label='Validation Loss')\nax2.set_xticks(np.arange(0, a+1, 5))\nax2.set_ylabel('Loss Value')\nax2.set_xlabel('Epoch')\nax2.set_title('Loss')\nl2 = ax2.legend(loc=\"best\")","d11ecc13":"results = model.evaluate(test_generator)\nprint(results)","634c7673":"model.save(\"model\")","f1757b8f":"!zip -r model.zip .\/model","c1b950a7":"## Train CNN's","9d28a109":"## save CNN's","d1e0045a":"## Build CNN's","f025bc6f":"## data preprocessing","4b7c9eb7":"## Evaluate Convnet","f9656e10":"## Load Data"}}