{"cell_type":{"bd93f570":"code","7fbb4911":"code","283b4dc1":"code","2ecfc4d6":"code","0efd0e7c":"code","7edf3d79":"code","cf3e5a26":"code","48c24b80":"code","734b63ee":"code","9beef0b1":"code","6ba04da1":"code","14dca2ec":"code","f84c2951":"code","ee8c6dc2":"code","dbb42276":"code","47fb8bd4":"code","967c647f":"code","42e71085":"code","a21ca625":"code","c449bd14":"markdown","cf490819":"markdown","4d01b258":"markdown","70a9d39f":"markdown","bcfe37ee":"markdown","0327e915":"markdown","d64352d8":"markdown","964c9f5e":"markdown"},"source":{"bd93f570":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7fbb4911":"df = pd.read_csv('\/kaggle\/input\/customer-personality-analysis\/marketing_campaign.csv', sep='\\t')","283b4dc1":"df.head()","2ecfc4d6":"df.shape","0efd0e7c":"df1=df.dropna()","7edf3d79":"df1.describe()","cf3e5a26":"df1['c_year'] = 2015\ndf1['Age'] = df1['c_year']-df1['Year_Birth']\ndf1['c_day'] = '01-01-2015'\ndf1['Dt_Customer'] = pd.to_datetime(df1.Dt_Customer)\ndf1['c_day'] = pd.to_datetime(df1.c_day)\ndf1['engaged_days'] = (df1['c_day']-df1['Dt_Customer']).dt.days\ndf1['leisure_expense'] = df1['MntWines'] + df1['MntSweetProducts'] + df1['MntGoldProds']\ndf1['food'] = df1['MntFishProducts'] + df1['MntFruits'] + df1['MntMeatProducts']\ndf1['accepted_any_cmp']= df1['AcceptedCmp1']+df1['AcceptedCmp2']+df1['AcceptedCmp3']+df1['AcceptedCmp4']+df1['AcceptedCmp5']+df1['Response']\ndf1['accepted_any_cmp']= np.where(df1['accepted_any_cmp'] > 0, 1, 0)\nmapping = {'Single' : 0, 'Together': 1, 'Married': 1, 'Divorced': 0, 'Widow': 0, 'Alone': 0,\n      'Absurd': 0, 'YOLO': 0, 'Graduation': 1, 'PhD': 2, 'Master': 2, 'Basic': 0, '2n Cycle': 2}\ndf1=df1.replace({'Marital_Status': mapping, 'Education': mapping}) \ndf1['kids_teen'] = np.where(df1['Kidhome'] + df1['Teenhome'] > 0,1,0)\n\n\ndf1.head()\n\n","48c24b80":"df1.columns","734b63ee":"df1= df1[[ 'Education', 'Marital_Status', 'Income', 'kids_teen', 'Recency', 'NumDealsPurchases', 'NumWebPurchases',\n       'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth',\n    'Complain', 'Age', 'engaged_days', 'leisure_expense', 'food',\n       'accepted_any_cmp']]","9beef0b1":"df1.head()","6ba04da1":"df1.corr()","14dca2ec":"from sklearn.preprocessing import StandardScaler","f84c2951":"sc = StandardScaler()\nX = sc.fit_transform(df1)","ee8c6dc2":"from sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt","dbb42276":"wcss = []\nfor i in range(1, 16):\n    Kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)\n    Kmeans.fit(X)\n    wcss.append(Kmeans.inertia_)\n    \nplt.plot(range(1,16), wcss)\nplt.title('The elbow method')\nplt.xlabel('no. of clusters')\nplt.ylabel('wcss')\nplt.show()","47fb8bd4":"from sklearn.decomposition import PCA\npca = PCA(n_components = 2)\nX = pca.fit_transform(X)","967c647f":"kmeans = KMeans(n_clusters = 3, init = 'k-means++', random_state = 42)\ny_means = kmeans.fit_predict(X)","42e71085":"print(y_means)","a21ca625":"plt.scatter(X[y_means ==0, 0], X[y_means == 0, 1], s = 100, c = 'red', label='cluster1')\nplt.scatter(X[y_means ==1, 0], X[y_means == 1, 1], s = 100, c = 'blue', label='cluster2')\nplt.scatter(X[y_means ==2, 0], X[y_means == 2, 1], s = 100, c = 'green', label='cluster3')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], s = 300, c = 'yellow', label = 'centroids')\nplt.title('The clusters of customers')\nplt.xlabel('Component1')\nplt.ylabel('Component2')\nplt.legend()\nplt.show()\n","c449bd14":"# Consideration of all useful columns and dropping extras.","cf490819":"# Data Correlation","4d01b258":"# Getting optimal no. of clusters using Elbow Method","70a9d39f":"# For Plotting a 2D graph use of PCA ","bcfe37ee":"# Applying Feature scaling","0327e915":"# Plotting Clusters using matplot lib","d64352d8":"# > Dimentinality reduction using simple process\n* Converting 'Year_Birth' column to 'Age' of the customer on 01-01-2015.\n* dimentionality reduction of other features by considering them in a single column.","964c9f5e":"# Reading the csv file using kaggle kernels"}}