{"cell_type":{"81120c64":"code","7f3e6e94":"code","1a564f20":"code","2539f911":"code","7aaea9fb":"code","273e0e86":"code","d40c676b":"code","ff73c92d":"code","89238494":"code","728d5a3c":"code","6a246adc":"code","ab60efcf":"code","37aa7ac9":"code","dbd99ff9":"code","83b01e80":"code","96ca964a":"code","2c0453e7":"code","37e5b403":"code","3b51f924":"code","d9adc3b9":"code","70f0677a":"code","d3cfcfbb":"code","2f00f61c":"code","0924371e":"code","06845063":"code","999724b5":"code","d137565f":"code","fc2ef6e2":"code","cbd66a36":"code","bc1e3fe2":"code","473e9990":"code","1eb9c072":"code","635882f0":"code","52a6e5b5":"code","f9bbfd2e":"code","868b1388":"markdown","72a15cd4":"markdown","39d02624":"markdown"},"source":{"81120c64":"import numpy as np\nimport pandas as pd \n#import datatable as dt","7f3e6e94":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\n\ndef import_data(file):\n    \"\"\"create a dataframe and optimize its memory usage\"\"\"\n    df = pd.read_csv(file, parse_dates=True, keep_date_col=True)\n    df = reduce_mem_usage(df)\n    return df","1a564f20":"df_train = import_data('..\/input\/tabular-playground-series-dec-2021\/train.csv')\ndf_test = import_data('..\/input\/tabular-playground-series-dec-2021\/test.csv')","2539f911":"df_train.head()","7aaea9fb":"df_train.isnull().sum().sum()","273e0e86":"df_train = df_train.set_index('Id')\ndf_train.head()","d40c676b":"df_train.isnull().sum().sum()","ff73c92d":"df_train['Cover_Type'].unique()","89238494":"df_train['Cover_Type'].value_counts()","728d5a3c":"df_train[df_train['Cover_Type'] == 5]","6a246adc":"df_train = df_train[df_train['Cover_Type'] != 5]\ndf_train","ab60efcf":"X = df_train.drop('Cover_Type', axis=1)\nX.head()","37aa7ac9":"cat_features = list(range(0, X.shape[1]))\nprint(cat_features)","dbd99ff9":"X.dtypes","83b01e80":"y = df_train['Cover_Type']\ny","96ca964a":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","2c0453e7":"from catboost import CatBoostClassifier\nfrom catboost import CatBoostClassifier as lgb","37e5b403":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, stratify = y)","3b51f924":"y_train.unique()","d9adc3b9":"model = CatBoostClassifier(\n    iterations=50,\n    random_seed=43,\n    loss_function='MultiClass'#, \n    #timeout=600\n)\n\nmodel.fit(\n    X_train, y_train,\n    eval_set=(X_test, y_test),\n    verbose=False,\n    plot=True\n)","70f0677a":"y_pred = model.predict(X_test)\ny_pred","d3cfcfbb":"accuracy_score(y_test, y_pred)","2f00f61c":"import optuna","0924371e":"def objective(trial):\n    \n    train_x, valid_x, train_y, valid_y = train_test_split(X, y, test_size=0.20, stratify = y)\n     \n    params = {\n            'iterations':trial.suggest_int(\"iterations\", 4000, 25000),\n            'od_wait':trial.suggest_int('od_wait', 500, 2300),\n            'loss_function':'MultiClass',\n            'task_type':\"GPU\",\n            'eval_metric':'MultiClass',\n            'leaf_estimation_method':'Newton',\n            \"bootstrap_type\": trial.suggest_categorical(\"bootstrap_type\", [\"Bayesian\", \"Bernoulli\"]),\n            'learning_rate' : trial.suggest_uniform('learning_rate',0.02,1),\n            'reg_lambda': trial.suggest_uniform('reg_lambda',1e-5,100),\n            #'subsample': trial.suggest_uniform('subsample',0,1),\n            'random_strength': trial.suggest_uniform('random_strength',10,50),\n            'depth': trial.suggest_int('depth',1,15),\n            'min_data_in_leaf': trial.suggest_int('min_data_in_leaf',1,30),\n            'leaf_estimation_iterations': trial.suggest_int('leaf_estimation_iterations',1,15),\n            }\n\n    if params[\"bootstrap_type\"] == \"Bayesian\":\n        params[\"bagging_temperature\"] = trial.suggest_float(\"bagging_temperature\", 0, 10)\n    elif params[\"bootstrap_type\"] == \"Bernoulli\":\n        params[\"subsample\"] = trial.suggest_float(\"subsample\", 0.1, 1)\n\n    gbm = CatBoostClassifier(**params)\n\n    gbm.fit(train_x, train_y, eval_set=[(valid_x, valid_y)], verbose=0, early_stopping_rounds=100)\n\n    preds = gbm.predict(valid_x)\n    pred_labels = np.rint(preds)\n    accuracy = accuracy_score(valid_y, pred_labels)\n    return accuracy","06845063":"study = optuna.create_study(direction=\"maximize\")\n\nstudy.optimize(objective, n_trials=50, timeout=600) ","999724b5":"print(\"Number of completed trials: {}\".format(len(study.trials)))\nprint(\"Best trial:\")\n\ntrial = study.best_trial\n\nprint(\"\\tBest Score: {}\".format(trial.value))\nprint(\"\\tBest Params: \")","d137565f":"for key, value in trial.params.items():\n    print(\"    {}: {}\".format(key, value))","fc2ef6e2":"print(study.best_params)\nprint(study.best_value)\nprint(study.best_trial)","cbd66a36":"study.best_params","bc1e3fe2":"model = CatBoostClassifier(**study.best_params,loss_function ='MultiClass',\n              eval_metric = 'MultiClass',\n              leaf_estimation_method = 'Newton', task_type=\"GPU\")\n\n\nmodel.fit(X_train, y_train,\n    eval_set=(X_test, y_test),\n   verbose=0, early_stopping_rounds=100)","473e9990":"df_test.head()","1eb9c072":"df_test = df_test.set_index('Id')\ndf_test.head()","635882f0":"y_pred = model.predict(df_test)\ny_pred","52a6e5b5":"df_sapsub = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv')\ndf_sapsub","f9bbfd2e":"df_sapsub['Cover_Type'] = y_pred\ndf_sapsub.to_csv('final.csv', index = False)","868b1388":"## base model","72a15cd4":"## Droping the label 5","39d02624":"## Optuna"}}