{"cell_type":{"2c1667ff":"code","3f37d289":"code","0416d728":"code","5e0339f7":"code","0c4a33d4":"code","de2490b1":"code","cca1f5b4":"code","81c75a73":"code","62a7fc3a":"code","f68b3356":"code","8766abc0":"code","7e32c6e0":"code","0c6c2195":"markdown","0a57c298":"markdown","ae91d519":"markdown","9c14c10e":"markdown","e21015dc":"markdown","d9d31b4c":"markdown"},"source":{"2c1667ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f37d289":"import numpy as np\nimport h5py\nfrom keras import layers\nfrom keras.layers import Input, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import AveragePooling2D, MaxPooling2D, Dropout, GlobalMaxPooling2D, GlobalAveragePooling2D\nfrom keras.models import Model\nfrom keras import regularizers, optimizers\nfrom keras.preprocessing import image\nfrom keras.utils import layer_utils\nfrom keras.utils.data_utils import get_file\nfrom keras.applications.imagenet_utils import preprocess_input\nimport pydot\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\nfrom keras.utils import plot_model\n\n\nimport keras.backend as K\nK.set_image_data_format('channels_last')\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow\nfrom keras.models import Sequential\n%matplotlib inline","0416d728":"\ntest = h5py.File(\"..\/input\/happy-house-dataset\/test_happy.h5\")\ntrain = h5py.File(\"..\/input\/happy-house-dataset\/train_happy.h5\")","5e0339f7":"train_x = np.array(train['train_set_x'])\ntrain_y = np.array(train['train_set_y'])\ntest_x= np.array(test['test_set_x'])\ntest_y = np.array(test['test_set_y'])\n\nprint(train_x.shape)\nprint(train_y.shape)\nprint(test_x.shape)\nprint(test_y.shape)\n","0c4a33d4":"train_x = train_x\/255\n\ntest_x= test_x\/255","de2490b1":"train_y=train_y.reshape((600,1))\ntest_y=test_y.reshape((150,1))\ntrain_y.shape","cca1f5b4":"plt.imshow(train_x[0])","81c75a73":"def model(input_shape):\n    X_input = Input(input_shape)\n\n    X = ZeroPadding2D((3, 3))(X_input)\n    X = Conv2D(32, (7, 7), strides = (1, 1), name = 'conv0')(X)\n    X = BatchNormalization(axis = 3, name = 'bn0')(X)\n    X = Activation('relu')(X)\n\n    # MAXPOOL\n    X = MaxPooling2D((2, 2), name='max_pool')(X)\n\n    # FLATTEN X \n    X = Flatten()(X)\n    X = Dense(1, activation='sigmoid', name='fc')(X)\n\n    model = Model(inputs = X_input, outputs = X, name='HappyModel')\n\n    return model\n\n\ndef HappyModel(input_shape):\n  \n    X_input = Input(shape= (input_shape,input_shape,3))\n\n    X = ZeroPadding2D((3, 3))(X_input)\n    X = Conv2D(32, (7, 7), strides = (1, 1), name = 'conv0')(X)\n    X = BatchNormalization(axis = 3, name = 'bn0')(X)\n    X = Activation('relu')(X)\n    X = MaxPooling2D((2, 2), name='max_pool')(X)\n    X = Flatten()(X)\n    X = Dense(1, activation='sigmoid', name='fc')(X)\n    model = Model(inputs = X_input, outputs = X, name='HappyModel')\n\n    return model\n","62a7fc3a":"happyModel = HappyModel(64)\nhappyModel.summary()","f68b3356":"happyModel.compile(loss='binary_crossentropy',\n        optimizer=\"Adam\",\n        metrics=['accuracy'])","8766abc0":"happyModel.fit(train_x, train_y,\n              batch_size=16,\n              epochs=50,\n              validation_data=(test_x, test_y),\n              shuffle=False)","7e32c6e0":"\npreds = happyModel.evaluate(test_x,test_y)\n\nprint (\"Loss = \" + str(preds[0]))\nprint (\"Test Accuracy = \" + str(preds[1]))","0c6c2195":" ## normalization","0a57c298":"### train and test","ae91d519":"## loading dataset","9c14c10e":"## accuracy","e21015dc":"## cnn model","d9d31b4c":"## reshaping"}}