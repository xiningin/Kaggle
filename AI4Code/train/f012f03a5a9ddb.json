{"cell_type":{"67d78d56":"code","4f6b20e1":"code","83e6f0fc":"code","ee92dc9b":"code","c30d43e6":"code","a4bc3b10":"code","624a6579":"code","a6df49a5":"code","63abee3c":"code","25e66cf7":"code","c52144b3":"code","7b885719":"code","2d299185":"code","66fe0e97":"code","7752ed11":"code","e37dbd84":"markdown","1beb89b0":"markdown","a3c95da1":"markdown","59cb570f":"markdown","5e68843d":"markdown","eb88876d":"markdown","9d836dcc":"markdown","3c974295":"markdown","4aa8d9bc":"markdown"},"source":{"67d78d56":"import numpy as np \nimport pandas as pd\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nimport category_encoders as ce","4f6b20e1":"df_train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\") #train \ub370\uc774\ud130\ub97c \ub85c\ub4dc\ud569\ub2c8\ub2e4\ndf_test = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\") #test \ub370\uc774\ud130\ub97c \ub85c\ub4dc\ud569\ub2c8\ub2e4\ndf_sample = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/sample_submission.csv\") #submission \ud30c\uc77c \uc608\uc2dc\ub97c \ub85c\ub4dc\ud569\ub2c8\ub2e4","83e6f0fc":"df_train.drop(\"id\", axis=1, inplace=True) #train \ub370\uc774\ud130\uc5d0\uc11c id \uc5f4\uc744 \ubc84\ub9bd\ub2c8\ub2e4. inplace\uac00 True\uba74 \ubcf5\uc0ac\ubcf8\uc744 \ubc18\ud658\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\ndf_test.drop(\"id\", axis=1, inplace=True) #test \ub370\uc774\ud130\uc5d0\uc11c id \uc5f4\uc744 \ubc84\ub9bd\ub2c8\ub2e4.","ee92dc9b":"cat_labels = [f\"cat{i}\" for i in range(10)] #cat0\ubd80\ud130 cat9\uae4c\uc9c0 10\uac1c\uc758 \ubb38\uc790\ub85c \uc774\ub8e8\uc5b4\uc9c4 \ub808\uc774\ube14\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. ","c30d43e6":"onehot_encoder = ce.one_hot.OneHotEncoder() #OneHotEncoder\ub97c \uc815\uc758\ud569\ub2c8\ub2e4.\nonehot_encoder.fit(pd.concat([df_train[cat_labels], df_test[cat_labels]], axis=0)) #train \ub370\uc774\ud130\uc640 test \ub370\uc774\ud130\ub97c \ud569\uce5c \ud6c4 OneHotEncoding\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4.\ntrain_ohe = onehot_encoder.transform(df_train[cat_labels]) #train \ub370\uc774\ud130\uc5d0 OneHotEncoding\uc744 \uc801\uc6a9\ud55c train_ohe\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\ntest_ohe = onehot_encoder.transform(df_test[cat_labels]) #test \ub370\uc774\ud130\uc5d0 OneHotEncoding\uc744 \uc801\uc6a9\ud55c test_ohe\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\ntrain_ohe.columns = [f\"OHE_{col}\" for col in train_ohe] #OneHotEncoder\ub294 \uac01 \ub808\uc774\ube14\uc758 \uc774\ub984\uc744 \uc815\ud574\uc8fc\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0, \ub808\uc774\ube14\uc758 \uc774\ub984\uc744 \uc815\ud574\uc90d\ub2c8\ub2e4. \ntest_ohe.columns = [f\"OHE_{col}\" for col in test_ohe] #\ub808\uc774\ube14\uc758 \uc774\ub984\uc744 \uc815\ud574\uc90d\ub2c8\ub2e4. ","a4bc3b10":"numerical_labels = [f\"cont{i}\" for i in range(14)] #cont0\ubd80\ud130 cont13\uae4c\uc9c0 14\uac1c\uc758 \uc22b\uc790\ub85c \uc774\ub8e8\uc5b4\uc9c4 \ub808\uc774\ube14\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. ","624a6579":"train_x = pd.concat([df_train[numerical_labels],train_ohe], axis=1) #OneHotEncoding\uc744 \ud55c \ubb38\uc790 label\uacfc \uc22b\uc790 label\uc744 \ud569\uccd0 \ucd5c\uc885 train \ub370\uc774\ud130\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.","a6df49a5":"test_x = pd.concat([df_test[numerical_labels],test_ohe], axis=1) #\ucd5c\uc885 train \ub370\uc774\ud130\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.","63abee3c":"train_y = df_train[\"target\"] #train \ub370\uc774\ud130\uc758 Target \uac12\uc744 train_y\ub85c \uc815\uc758\ud574\uc90d\ub2c8\ub2e4. ","25e66cf7":"folds = KFold(n_splits=5, shuffle=True, random_state=2021) #5 fold\uc758 KFold\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. random_state\ub294 \uc784\uc758\ub300\ub85c \uc815\uc758\ud558\uc5ec\ub3c4 \ub429\ub2c8\ub2e4. ","c52144b3":"lgb_params = dict({'objective': 'regression', #LGBM \ubaa8\ub378\uc758 \ub2e4\uc591\ud55c parameter\ub4e4\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. \uc774 \ubb38\uc81c\ub294 \ud68c\uadc0 \ubb38\uc81c\uc774\ubbc0\ub85c regression\uc73c\ub85c \uc815\uc758\ud569\ub2c8\ub2e4. \n 'metric': 'rmse', #\uc774 \ub300\ud68c\uc5d0\uc11c\ub294 \ud3c9\uac00\uc5d0 RMSE\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \n 'verbosity': -1, #\ubaa8\ub378 \ud6c8\ub828 \uc0c1\ud0dc\ub97c \uc5bc\ub9c8\ub9cc\ud07c \uc54c\ub824\uc904 \uac83\uc778\uc9c0 \uc124\uc815\ud569\ub2c8\ub2e4. \n 'learning_rate': 0.01, #learning rate\ub97c \uc124\uc815\ud569\ub2c8\ub2e4\n 'early_stopping_round' : 200, #200\ubc88\uc758 \ud6c8\ub828 \ub3d9\uc548 \ubaa8\ub378\uc758 \uc131\ub2a5\uc5d0 \ud5a5\uc0c1\uc774 \uc5c6\uc73c\uba74 \ud559\uc2b5\uc744 \uc911\uc9c0\ud569\ub2c8\ub2e4. \n 'num_iterations' : 20000}) #\ucd5c\ub300 20000\ubc88 \ud6c8\ub828\ud569\ub2c8\ub2e4. ","7b885719":"oof_preds = np.zeros_like(train_y) #validation\uc758 \uc608\uce21\uac12\uc744 \uc800\uc7a5\ud560 DataFrame\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\nmodels = [] #5\uac1c\uc758 \ubaa8\ub378\uc744 \uc800\uc7a5\ud560 list\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\nfor tr_idx, va_idx in folds.split(train_x): #5\ubc88 \uc0c1\ud638 \uac80\uc99d\uc744 \uc218\ud589\ud558\uba70 \ud6c8\ub828\ud560 for \ubc18\ubcf5\ubb38\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \n    tr_x, va_x = train_x.iloc[tr_idx], train_x.iloc[va_idx] #\uc608\uce21\uc5d0 \uc0ac\uc6a9\ud560 x \uac12\ub4e4\uc5d0\uc11c validation \ub370\uc774\ud130\ub97c \ubd84\ub9ac\ud569\ub2c8\ub2e4.\n    tr_y, va_y = train_y[tr_idx], train_y[va_idx] #\uc608\uce21\ud560 \ub370\uc774\ud130\uc778 y \uac12\ub4e4\uc5d0\uc11c validation \ub370\uc774\ud130\ub97c \ubd84\ub9ac\ud569\ub2c8\ub2e4.\n            \n    lgb_train_dataset = lgb.Dataset(tr_x, tr_y) #train \ub370\uc774\ud130\ub97c LGBM\uc6a9 \ub370\uc774\ud130\uc14b\uc73c\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uacf5\uc2dd \ubb38\uc11c\ub97c \ucc38\uc870\ud558\uc138\uc694. https:\/\/lightgbm.readthedocs.io\/en\/latest\/pythonapi\/lightgbm.Dataset.html\n    lgb_valid_dataset = lgb.Dataset(va_x, va_y) #test \ub370\uc774\ud130\ub97c LGBM\uc6a9 \ub370\uc774\ud130\uc14b\uc73c\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4.\n    model = lgb.train(lgb_params, lgb_train_dataset, valid_sets=[lgb_valid_dataset], verbose_eval=100) #LGBM \ubaa8\ub378\uc744 \ud6c8\ub828\ud569\ub2c8\ub2e4.\n    models.append(model) #\uac01 \ubaa8\ub378\uc744 \uc704\uc5d0\uc11c \uc815\uc758\ud55c \ubaa8\ub378 \ub9ac\uc2a4\ud2b8\uc5d0 \uc785\ub825\ud569\ub2c8\ub2e4.\n    oof_pred = model.predict(va_x) #validation \ub370\uc774\ud130\ub97c \uc608\uce21\ud569\ub2c8\ub2e4.\n    oof_preds[va_idx] = oof_pred #\uc608\uce21\ud55c \uac12\uc744 \uc704\uc5d0\uc11c \ub9cc\ub4e0 DataFrame\uc5d0 \uc785\ub825\ud569\ub2c8\ub2e4.","2d299185":"np.sqrt(mean_squared_error(df_train.target, oof_preds)) #\uac01 \ubaa8\ub378\ub85c \uc0b0\ucd9c\ud55c validation \ub370\uc774\ud130\uc758 RMSE \uc810\uc218\ub97c \ucd9c\ub825\ud558\uc5ec \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.","66fe0e97":"preds = [] #\uc608\uce21\uac12\uc744 \uc800\uc7a5\ud560 DataFrame\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\nfor model in models: #\uc800\uc7a5\ud588\ub358 \ubaa8\ub378\ub4e4\uc744 \ud558\ub098\uc529 \uc608\uce21\ud558\ub294 for \ubc18\ubcf5\ubb38\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n    pred = model.predict(test_x) #\uac01 \ubaa8\ub378\uc744 \ud558\ub098\uc529 \uc608\uce21\ud569\ub2c8\ub2e4.\n    preds.append(pred) #\uac01 \uc608\uce21\uac12\uc744 \uc704\uc5d0\uc11c \ub9cc\ub4e0 DataFrame\uc5d0 \uc785\ub825\ud569\ub2c8\ub2e4.\npreds = np.mean(preds, axis=0) #\uac01 \uc608\uce21\uac12\uc758 \ud3c9\uade0\uc744 \ub0b4\uc5b4 \ucd5c\uc885 \uc608\uce21\uac12\uc744 \uc644\uc131\ud569\ub2c8\ub2e4.","7752ed11":"sub = df_sample.copy() #submission \uc0d8\ud50c\uc744 \ubcf5\uc0ac\ud569\ub2c8\ub2e4.\nsub[\"target\"] = preds #\uc0d8\ud50c\uc758 target column\uc5d0 \ucd5c\uc885 \uc608\uce21\uac12\uc744 \uc785\ub825\ud569\ub2c8\ub2e4.\n\nsub.to_csv(\"submission_baseline(simple parameter).csv\", index=False) #\uc81c\ucd9c\uc744 \uc704\ud55c csv \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\n\nsub.head() #\ucd5c\uc885 \uc81c\ucd9c \ud30c\uc77c\uc758 \uc55e\ubd80\ubd84\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.","e37dbd84":"\uc774 competition\uc740 Kaggle\uc5d0\uc11c \ub9e4 \ub2ec\ub9c8\ub2e4 \uc9c4\ud589\ud558\ub294 Tabular Playground \uc2dc\ub9ac\uc988\uc758 2\uc6d4 \ub300\ud68c\uc785\ub2c8\ub2e4. Titanic\uc774\ub098 mnist \ub4f1 \uc785\ubb38\uaca9\uc758 \ub300\ud68c\ubcf4\ub2e4\ub294 \uc5b4\ub835\uc9c0\ub9cc, \uc0c1\uae08\uc774 \uac78\ub9b0 \ub300\ud68c\ubcf4\ub2e4\ub294 \ud6e8\uc52c \uc26c\uc6b4, \uba38\uc2e0\ub7ec\ub2dd \ucd08\ubcf4\uc790\ub4e4\uc774 \ucc38\uc5ec\ud558\uae30 \uc88b\uc740 \ub300\ud68c\uc785\ub2c8\ub2e4. \n\n\uc774 \ub300\ud68c\ub294 10\uac1c\uc758 \ubb38\uc790\ub85c \uc774\ub8e8\uc5b4\uc9c4 \ub808\uc774\ube14\uacfc 14\uac1c\uc758 \uc22b\uc790 \ub808\uc774\ube14\uc744 \ud1b5\ud558\uc5ec \ud558\ub098\uc758 Target\uc744 \uc608\uce21\ud558\ub294 \ubb38\uc81c\uc785\ub2c8\ub2e4. \uac04\ub2e8\ud55c DNN\ubd80\ud130 Random Forest\uc640 \uac19\uc740 Tree-based \ubaa8\ub378, XGBoost\uc640 \uac19\uc740 Gradient Boosting \ubaa8\ub378 \ub4f1\uc744 \uc774\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ubca0\uc774\uc2a4\ub77c\uc778 \ucf54\ub4dc\uc5d0\uc11c\ub294 LightGBM \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4. LGBM \ubaa8\ub378\uc5d0 \uad00\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc774 \ub9c1\ud06c\ub97c \ucc38\uace0\ud574\uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. https:\/\/nurilee.com\/2020\/04\/03\/lightgbm-definition-parameter-tuning\/\n\n\uc785\ubb38\uc790 \ubd84\ub4e4\uc744 \uc704\ud558\uc5ec \ub77c\uc774\ube0c\ub7ec\ub9ac import\ub97c \uc81c\uc678\ud55c \ucf54\ub4dc \ud558\ub098\ud558\ub098 \uc8fc\uc11d\uc73c\ub85c \uc124\uba85\uc744 \ucca8\ubd80\ud558\uc600\uc2b5\ub2c8\ub2e4. \n\n\uc9c8\ubb38\uc740 \uc5b8\uc81c\ub4e0\uc9c0 \ub313\uae00\uc5d0 \ub0a8\uaca8\uc8fc\uc138\uc694! numpy, pandas, scikit-learn, LGBM\uc740 \uacf5\uc2dd \ubb38\uc11c\ub97c \ucc38\uace0\ud558\uba74 \ub354\uc6b1 \uc815\ud655\ud55c \uc815\ubcf4\ub97c \ube60\ub974\uac8c \ucc3e\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n* numpy - https:\/\/numpy.org\/doc\/1.19\/\n* pandas - https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/index.html\n* scikit-learn - https:\/\/scikit-learn.org\/stable\/modules\/classes.html\n* LGBM - https:\/\/lightgbm.readthedocs.io\/en\/latest\/","1beb89b0":"\uad50\ucc28 \uac80\uc99d (Cross Validation)\uc774\ub780 train \ub370\uc774\ud130\uc5d0\uc11c \uc2e4\uc81c\ub85c \ud559\uc2b5\uc2dc\ud0a4\ub294 \ub370\uc774\ud130\uc640 \ud655\uc778\uc744 \uc704\ud55c validation \ub370\uc774\ud130\ub97c \uc5ec\ub7ec\ubc88 \ubd84\ub9ac\ud558\uc5ec \ud559\uc2b5\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud558\uc5ec \ubaa8\ub378\uc758 \uc131\ub2a5 \ud3c9\uac00\ub97c \uc77c\ubc18\ud654\ud558\uace0, \uc624\ubc84\ud53c\ud305\uc744 \ubc29\uc9c0\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 KFold\ub97c 5\uac1c\uc758 fold\ub85c \ub098\ub204\ub294\ub370, \uc774\ub807\uac8c \ub418\uba74 20%\uc758 train \ub370\uc774\ud130\ub97c validation\uc5d0 \uc0ac\uc6a9\ud558\uba70, 5\ubc88 \ubaa8\ub450 \ub2e4\ub978 20%\uc758 \ub370\uc774\ud130\ub85c validation\uc744 \ud569\ub2c8\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc774 \ub9c1\ud06c\ub97c \ucc38\uace0\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. https:\/\/3months.tistory.com\/321","a3c95da1":"# **\ubaa8\ub378 \ud6c8\ub828 (\uad50\ucc28 \uac80\uc99d \ud3ec\ud568)**","59cb570f":"# **\ud55c\uad6d\uc778\uc744 \uc704\ud55c Tabular Playground Feb. \ubca0\uc774\uc2a4\ub77c\uc778**","5e68843d":"\ub370\uc774\ud130 \uc804\ucc98\ub9ac \uacfc\uc815\uc5d0\uc11c OneHotEncoder\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ubb38\uc790\ub85c \uc774\ub8e8\uc5b4\uc9c4 \ub808\uc774\ube14\uc740 \ubc14\ub85c \uacc4\uc0b0\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uc22b\uc790\ub85c \ubc14\uafb8\uc5b4\uc8fc\uc5b4\uc57c \ud569\ub2c8\ub2e4.\nOneHotEncoder\ub294 \uac01 \ub808\uc774\ube14 \uad6c\uc131 \uc694\uc18c\uc758 \uc885\ub958\ub9cc\ud07c \uc0c8\ub85c\uc6b4 \ub808\uc774\ube14\uc744 \ub9cc\ub4e4\uace0, \uac01 \uc885\ub958\uc5d0 \ud574\ub2f9\ud558\ub294\uc9c0\ub97c 0\uacfc 1\ub85c \ud45c\ud604\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ubb38\uc790\ub97c \uc22b\uc790\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. \n\uac00\uc7a5 \uc815\ud655\ub3c4\uac00 \ub192\uc9c0\ub9cc \ub370\uc774\ud130\uc758 \uc591\uc774 \ub9ce\uc544\uc9c8 \uc218 \uc788\ub2e4\ub294 \ub2e8\uc810\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \n\uc608\ub97c \ub4e4\uc5b4, A\uc640 B\ub85c \uc774\ub8e8\uc5b4\uc9c4 \ub808\uc774\ube14\uc744 OneHotEncoder\ub97c \uc0ac\uc6a9\ud574\uc11c \ubcc0\ud658\ud558\uba74 A\ub294 [1,0], B\ub294 [0,1]\uacfc \uac19\uc740 \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\ud558\uac8c \ub429\ub2c8\ub2e4. ","eb88876d":"# **\ub370\uc774\ud130 \uc804\ucc98\ub9ac**","9d836dcc":"**\ub3c4\uc6c0\uc774 \ub418\uc5c8\ub2e4\uba74 \uc5c5\ubcf4\ud2b8 upvote \ubd80\ud0c1\ub4dc\ub9bd\ub2c8\ub2e4!!!**","3c974295":"# **\ub77c\uc774\ube0c\ub7ec\ub9ac import**","4aa8d9bc":"I refer to this notebook for making this kernel. Thank you @shogosuzuki !! https:\/\/www.kaggle.com\/shogosuzuki\/optuna-lightgbm-onehotencoder-lr-0-001"}}