{"cell_type":{"5bf37b76":"code","e6ad9704":"code","b9f15da0":"code","889260ba":"code","e3b59b2d":"code","8aea7816":"code","e353abbe":"code","0582d24f":"code","82ec583c":"code","86a0677d":"code","95e8503c":"code","29878006":"code","6eae4807":"code","5d547dd0":"code","9ace7845":"code","3fc6893f":"code","a46078fc":"code","261ac383":"code","81f0aeae":"code","df287a83":"code","0bb06da8":"code","25533ce7":"code","05822414":"code","0597291c":"code","c50f4635":"code","2198b84d":"code","dbcbefeb":"code","857dffed":"code","c4db21ec":"code","00988967":"code","a870a793":"code","003a3903":"code","48229894":"code","a68175d0":"code","6aaeacfe":"code","4a5280e5":"code","b4cd98f9":"code","92086dc7":"markdown","13e52acb":"markdown","cdb30c69":"markdown","e9cd2b9c":"markdown","f35b7cce":"markdown"},"source":{"5bf37b76":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e6ad9704":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats","b9f15da0":"from keras.datasets import imdb\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers.embeddings import Embedding\nfrom keras.layers import SimpleRNN, Dense, Activation","889260ba":"(X_train, Y_train), (X_test, Y_test) = imdb.load_data(path = \"imdb.npz\",\n                                                       num_words= None,\n                                                       skip_top = 0,\n                                                       maxlen = None,\n                                                       seed = 113,\n                                                       start_char = 1,\n                                                       oov_char = 2,\n                                                       index_from = 3)","e3b59b2d":"print(\"Type: \", type(X_train))\nprint(\"Type: \", type(Y_train))","8aea7816":"print(\"X train shape: \",X_train.shape)\nprint(\"Y train shape: \",Y_train.shape)","e353abbe":"print(\"Y train values: \",np.unique(Y_train))\nprint(\"Y test values: \",np.unique(Y_test))","0582d24f":"unique, counts = np.unique(Y_train, return_counts = True)\nprint(\"Y train distribution: \",dict(zip(unique,counts)))","82ec583c":"unique, counts = np.unique(Y_test, return_counts = True)\nprint(\"Y testdistribution: \",dict(zip(unique,counts)))","86a0677d":"plt.figure()\nsns.countplot(Y_train)\nplt.xlabel(\"Classes\")\nplt.ylabel(\"Freq\")\nplt.title(\"Y train\")","95e8503c":"plt.figure()\nsns.countplot(Y_test)\nplt.xlabel(\"Classes\")\nplt.ylabel(\"Freq\")\nplt.title(\"Y test\")","29878006":"d = X_train[0]\nprint(d)","6eae4807":"review_len_train = []\nreview_len_test = []\nfor i, ii in zip(X_train, X_test):\n    review_len_train.append(len(i))\n    review_len_test.append(len(ii))","5d547dd0":"sns.distplot(review_len_train, hist_kws = {\"alpha\":0.3})\nsns.distplot(review_len_test, hist_kws = {\"alpha\":0.3})","9ace7845":"print(\"Train mean:\", np.mean(review_len_train))\nprint(\"Train median:\", np.median(review_len_train))\nprint(\"Train mode:\", stats.mode(review_len_train))","3fc6893f":"word_index = imdb.get_word_index()\nprint(type(word_index))\nprint(len(word_index))","a46078fc":"for keys, values in word_index.items():\n    if values == 22:\n        print(keys)","261ac383":"for keys, values in word_index.items():\n    if values == 4:\n        print(keys)","81f0aeae":"for keys, values in word_index.items():\n    if values == 2:\n        print(keys)","df287a83":"def whatItSay(index = 24):\n    \n    reverse_index = dict([(value, key) for (key, value) in word_index.items()])\n    decode_review = \" \".join([reverse_index.get(i - 3, \"!\") for i in X_train[index]])\n    print(decode_review)\n    print(Y_train[index])\n    return decode_review\n\ndecoded_review = whatItSay()","0bb06da8":"decoded_review = whatItSay(2)","25533ce7":"decoded_review = whatItSay(42)\n","05822414":"num_words = 15000\n(X_train, Y_train), (X_test, Y_test) = imdb.load_data(num_words=num_words)","0597291c":"maxlen = 130\nX_train = pad_sequences(X_train, maxlen=maxlen)\nX_test = pad_sequences(X_test, maxlen=maxlen)","c50f4635":"print(X_train[5])","2198b84d":"for i in X_train[0:10]:\n    print(len(i))","dbcbefeb":"decoded_review = whatItSay(5)","857dffed":"rnn = Sequential()\nrnn.add(Embedding(num_words, 32, input_length = len(X_train[0])))\nrnn.add(SimpleRNN(16, input_shape = (num_words,maxlen), return_sequences= False, activation= \"relu\"))\nrnn.add(Dense(1))\nrnn.add(Activation(\"sigmoid\"))","c4db21ec":"print(rnn.summary())\nrnn.compile(loss = \"binary_crossentropy\", optimizer=\"rmsprop\", metrics= [\"accuracy\"])","00988967":"history = rnn.fit(X_train, Y_train, validation_data= (X_test, Y_test), epochs=5, batch_size= 128, verbose=1)","a870a793":"score = rnn.evaluate(X_test, Y_test)\nprint(\"Accuracy: %\",score[1]*100)","003a3903":"plt.figure()\nplt.show()","48229894":"history.history","a68175d0":"plt.plot(history.history[\"accuracy\"], label = \"Train\")","6aaeacfe":"plt.plot(history.history[\"val_accuracy\"], label = \"Test\")","4a5280e5":"plt.plot(history.history[\"accuracy\"], label = \"Train\")\nplt.plot(history.history[\"val_accuracy\"], label = \"Test\")\nplt.title(\"Acc\")\nplt.ylabel(\"Acc\")\nplt.xlabel(\"Epochs\")\nplt.legend()\nplt.show()","b4cd98f9":"plt.plot(history.history[\"loss\"], label = \"Train\")\nplt.plot(history.history[\"val_loss\"], label = \"Test\")\nplt.title(\"Acc\")\nplt.ylabel(\"Acc\")\nplt.xlabel(\"Epochs\")\nplt.legend()\nplt.show()","92086dc7":"*# %100 dengeli bir seti : olumsuz(0) ve olumlu(1) g\u00f6r\u00fc\u015flerden e\u015fit say\u0131da var*","13e52acb":"**RNN**","cdb30c69":"**number of words\n**","e9cd2b9c":"**Preprocessing**","f35b7cce":"**EDA**"}}