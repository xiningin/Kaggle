{"cell_type":{"a648ae4d":"code","a473a02e":"code","249f8372":"code","1251557f":"code","bdf0d796":"code","382f0dad":"code","ac8264dc":"code","0146005b":"code","fddfbca6":"code","7df15abc":"code","4680006e":"code","845daf18":"code","b3ca5b94":"code","5bd03edd":"code","1d3f8c92":"code","b4c5c331":"code","3daeaa30":"code","21c88b36":"code","1672fce6":"code","00992f79":"code","14772be8":"code","77826754":"code","5d9f6875":"code","ac5b20a4":"code","383d2d35":"code","2ca26f87":"code","e079e940":"code","88a78bef":"code","1656eb24":"markdown","43147d22":"markdown","59aa699d":"markdown","899c6b99":"markdown","7c11843e":"markdown","b7b8c30f":"markdown","6d3adc9b":"markdown","db9aa4f7":"markdown","39b8c1e9":"markdown"},"source":{"a648ae4d":"# packages\nimport numpy as np\nimport pandas as pd\n\nimport plotly.express as px","a473a02e":"# import data: first read only descriptions\ndf_desc = pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv',\n                      low_memory=False, nrows=1)\n# show descriptions\ndf_desc","249f8372":"# now import full data frame...\ndf = pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv',\n                low_memory=False)\n\n# ...and remove detailed description of questions\ndf = df.drop(0, axis=0)\ndf.head()","1251557f":"# look at age first, this is question Q1\nsel_question = 'Q1'\nprint(df_desc[sel_question][0])","bdf0d796":"# treemap displaying frequencies\nfig = px.treemap(df, path=[sel_question], title='Age (Q1)')\nfig.show()","382f0dad":"# gender\nsel_question = 'Q2'\nprint(df_desc[sel_question][0])","ac8264dc":"# treemap displaying frequencies\nfig = px.treemap(df, path=[sel_question], title='Gender (Q2)')\nfig.show()","0146005b":"# country\nsel_question = 'Q3'\nprint(df_desc[sel_question][0])","fddfbca6":"# treemap displaying frequencies\nfig = px.treemap(df, path=[sel_question], title='Country (Q3)')\nfig.show()","7df15abc":"# education\nsel_question = 'Q4'\nprint(df_desc[sel_question][0])","4680006e":"# a little issue: we have missing values here\nprint('Missing entries:', sum(df[sel_question].isnull()))\n# we have to impute the missings otherwise the plot won't work\ndf[sel_question] = df[sel_question].fillna('NA')","845daf18":"# treemap displaying frequencies\nfig = px.treemap(df, path=[sel_question], title='Education (Q4)')\nfig.show()","b3ca5b94":"# role title\nsel_question = 'Q5'\nprint(df_desc[sel_question][0])","5bd03edd":"# missing value handling\nprint('Missing entries:', sum(df[sel_question].isnull()))\ndf[sel_question] = df[sel_question].fillna('NA')","1d3f8c92":"fig = px.treemap(df, path=[sel_question], title='Role title (Q5)')\nfig.show()","b4c5c331":"# coding experience\nsel_question = 'Q6'\nprint(df_desc[sel_question][0])","3daeaa30":"# missing value handling\nprint('Missing entries:', sum(df[sel_question].isnull()))\ndf[sel_question] = df[sel_question].fillna('NA')","21c88b36":"# treemap displaying frequencies\nfig = px.treemap(df, path=[sel_question], title='Coding Experience (Q6)')\nfig.show()","1672fce6":"# yearly compensation\nsel_question = 'Q24'\nprint(df_desc[sel_question][0])","00992f79":"# missing value handling; here we have quite a lot of them\nprint('Missing entries:', sum(df[sel_question].isnull()))\ndf[sel_question] = df[sel_question].fillna('NA')","14772be8":"# treemap displaying frequencies\nfig = px.treemap(df, path=[sel_question], title='Yearly Compensation (Q24)')\nfig.show()","77826754":"# trying e. g. education(Q4) and gender(Q2)\nfig = px.treemap(df, path=['Q4','Q2'], title='Gender by Education')\nfig.show()","5d9f6875":"# another example: gender(Q2) by role(Q5)\nfig = px.treemap(df, path=['Q5','Q2'], title='Gender by Role')\nfig.show()","ac5b20a4":"# another example: education(Q4) by role(Q5)\nfig = px.treemap(df, path=['Q5','Q4'], title='Education by Role')\nfig.show()","383d2d35":"# another example: country(Q3) by role(Q5)\nfig = px.treemap(df, path=['Q5','Q3'], title='Country by Role')\nfig.show()","2ca26f87":"df_stats = df[df.Q5=='Statistician']\nfig = px.treemap(df_stats, path=['Q3'], title='Statisticians by Country')\nfig.show()","e079e940":"# example for three features: role(Q5) => age(Q1) => coding experience(Q6)\nfig = px.treemap(df, path=['Q5','Q1','Q6'], title='Role | Age | Coding Experience')\nfig.show()","88a78bef":"# another example: country(Q3) => role(Q5) => yearly compensation(Q24)\nfig = px.treemap(df, path=['Q3','Q5','Q24'], title='Country | Role | Yearly Compensation')\nfig.show()","1656eb24":"### We can easily also arrange three features in one plot. However, you will need the drill down feature in order to really benefit from the plots.","43147d22":"# Combined view on two features","59aa699d":"#### So at first glance it seems that in every role category the most respondents are from India? There is one exception, namely the Statisticians:","899c6b99":"If you are interested in an evaluation of the multiple choice questions, like e. g. usage of programming languages, ML frameworks, IDEs etc. please check out also the following notebook: [https:\/\/www.kaggle.com\/docxian\/2020-kaggle-survey-multiple-choice-correlations](https:\/\/www.kaggle.com\/docxian\/2020-kaggle-survey-multiple-choice-correlations)","7c11843e":"# Three levels","b7b8c30f":"# Visualization of responses using interactive treemaps.","6d3adc9b":"### Let's try to combine two features in one plot in a hierarchical way:","db9aa4f7":"# Frequency evaluations","39b8c1e9":"#### Click into the plot to drill down. Double-click to \"zoom out\" again."}}