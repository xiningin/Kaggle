{"cell_type":{"8853b1c1":"code","05301b57":"code","c86665f7":"code","bf1ba9fc":"code","5d6f6236":"code","8c649a22":"code","4373c35c":"code","81c73168":"code","079f1ddf":"code","e8b0d2a8":"code","873d8d67":"code","e1760b6e":"code","e29f5810":"code","4072a0bf":"code","269e9e41":"code","b276f755":"code","bc9d42a7":"code","642c22db":"code","d3d7f9eb":"code","2e2e770b":"code","10694554":"code","97564bb3":"code","0c40312e":"code","f9d1a4d5":"code","1ca4bc44":"code","414a13bb":"code","d56cb1ee":"code","50c6cde6":"markdown","f14f154b":"markdown","07113447":"markdown","6f3bb4b4":"markdown","eafadeda":"markdown","bf2acbc2":"markdown","5e1e23a9":"markdown","fd859a27":"markdown","cde112f1":"markdown","eee0ff57":"markdown","d167f400":"markdown","bc7ace60":"markdown","1e286a93":"markdown"},"source":{"8853b1c1":"import numpy as np\nimport pandas as pd\nimport plotly_express as px\nimport plotly.graph_objects as go\nimport plotly.io as pio\nfrom plotly.offline import plot, iplot,init_notebook_mode\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\n\ninit_notebook_mode()\npio.templates.default = 'plotly_white'","05301b57":"df = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')\ndf.head()","c86665f7":"df.info()\n\n#converting the columns into categorical variables, this would make it easier for us to visualize them later. \ndf['target'] = df['target'].astype('category')\ndf['slope'] = df['slope'].astype('category')\ndf['fbs'] = df['fbs'].astype('category')\ndf['ca'] = df['ca'].astype('category')\ndf['thal'] = df['thal'].astype('category')\ndf['exang'] = df['exang'].astype('category')","bf1ba9fc":"df.describe()","5d6f6236":"target = df.target.value_counts(normalize = True)*100\ntrace1 = go.Bar(\n    x = ['Has Disease','Does not have Disease'],\n    y = target.values, \n    text = target.values, \n    textposition = 'auto',\n    texttemplate = \"%{y:.2f} %\"\n)\nfig = go.Figure(data = [trace1])\nfig.update_layout(title_text = '<b>Target Distribution<\/b>',\n                 xaxis_title=\"Target\",\n                yaxis_title=\"Percentage\")\nfig.show()","8c649a22":"traces = []\nfor sex,data in df.groupby('sex'):\n    if sex == 1:\n        name = 'Male'\n    else:\n        name = 'Female'\n    target = data['target'].value_counts(normalize = True)*100\n    trace = go.Bar(\n        x = target.index,\n        y = target.values,\n        text = target.values,\n        textposition = 'auto',\n        name = name,\n        texttemplate = \"%{y:.2f} %\"\n    )\n    traces.append(trace)\nfig = go.Figure(data = traces)\nfig.update_layout(title = '<b>Distribution of target based on sex<\/b>',\n    xaxis_title=\"Target\",\n    yaxis_title=\"Percentage\",\n    legend_title=\"Sex\"\n)\niplot(fig)","4373c35c":"traces = []\nfor target,data in df.groupby('target'):\n    if target == 1:\n        name = 'Has Disease'\n    else:\n        name = 'Does not have Disease'\n    age = data['age'].value_counts()\n    trace = go.Bar(\n        x = age.index,\n        y = age.values,\n        name = name\n    )\n    traces.append(trace)\nfig = go.Figure(data = traces)\nfig.update_layout(title = 'Distribution of target based on age',\n    xaxis_title=\"Age\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Target\",\n    legend = dict(x = 0)\n)\niplot(fig)","81c73168":"print(f\"The average age of People without Heart Disease is {df[df['target'] == 0]['age'].mean()}\")\nprint(f\"The average age of People with Heart Disease is {df[df['target'] == 1]['age'].mean()}\")","079f1ddf":"fig = px.scatter(df,x = 'age', y = 'thalach',trendline = 'ols', marginal_y = 'violin',color = 'target')\nfig.update_traces(marker = dict(size = 8, ))\nfig.update_layout(title = '<b>Distribution of heartrate based on age in people with and without heart disease<\/b>',\n    xaxis_title=\"Age\",\n    yaxis_title=\"Heart Rate\",\n    legend_title=\"Target\",\n    legend = dict(x = 0)\n)\niplot(fig)","e8b0d2a8":"fig = px.scatter(df,x = 'age', y = 'trestbps', color = 'target', trendline = 'ols', marginal_y = 'violin')\nfig.update_traces(marker = dict(size = 10, ))\nfig.update_layout(title = '<b>Distribution of Resting Blood Pressure based on age in people with and without heart attack<\/b>',\n    xaxis_title=\"Age\",\n    yaxis_title=\"Blood Pressure\",\n    legend_title=\"Target\",\n    legend = dict(x = 0)   \n)\niplot(fig)","873d8d67":"traces = []\nfor slope,data in df.groupby('slope'):\n    target = data['target'].value_counts(normalize = True)*100\n    trace = go.Bar(\n        x = target.index,\n        y = target.values,\n        text = target.values,\n        textposition = 'auto',\n        name = slope,\n        texttemplate = \"%{y:.2f} %\"\n    )\n    traces.append(trace)\nfig = go.Figure(data = traces)\nfig.update_layout(title = 'Distribution of target based on Slope of The Peak Exercise ST Segment ',\n    xaxis_title=\"Target\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Slope\"\n)\niplot(fig)","e1760b6e":"traces = []\nfor fbs,data in df.groupby('fbs'):\n    if fbs == 1:\n        name = 'Fasting Blood Sugar > 120 mg\/dl'\n    else:\n        name = 'Fasting Blood Sugar <= 120 mg\/dl'\n    target = data['target'].value_counts(normalize = True)*100\n    trace = go.Bar(\n        x = target.index,\n        y = target.values,\n        text = target.values,\n        textposition = 'auto',\n        name = name,\n        texttemplate = \"%{y:.2f} %\"\n    )\n    traces.append(trace)\nfig = go.Figure(data = traces)\nfig.update_layout(title = 'Distribution of target based on Fasing Blood Sugar',\n    xaxis_title=\"Target\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Fasting Blood Sugar\"\n)\niplot(fig)","e29f5810":"traces = []\nfor ca,data in df.groupby('ca'):\n    target = data['target'].value_counts(normalize = True)\n    trace = go.Bar(\n        x = target.index,\n        y = target.values,\n        text = target.values,\n        textposition = 'auto',\n        name = ca,\n        texttemplate = \"%{y:.2f} %\"\n    )\n    traces.append(trace)\nfig = go.Figure(data = traces)\nfig.update_layout(title = 'Distribution of target based on Number of Major Vessels',\n    xaxis_title=\"Target\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Number of Major Vessels\"\n)\niplot(fig)","4072a0bf":"traces = []\nfor exang,data in df.groupby('exang'):\n    if exang == 1:\n        name = 'Yes'\n    else:\n        name = 'No'\n    target = data['target'].value_counts(normalize = True)*100\n    trace = go.Bar(\n        x = target.index,\n        y = target.values,\n        text = target.values,\n        textposition = 'auto',\n        name = name,\n        texttemplate = \"%{y:.2f} %\"\n    )\n    traces.append(trace)\nfig = go.Figure(data = traces)\nfig.update_layout(title = 'Distribution of target based on Exercise Induced Angina',\n    xaxis_title=\"Target\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Exercise Induced Angina\"\n)\niplot(fig)","269e9e41":"traces = []\nfor thal,data in df.groupby('thal'):\n    target = data['target'].value_counts(normalize = True)*100\n    trace = go.Bar(\n        x = target.index,\n        y = target.values,\n        text = target.values,\n        textposition = 'auto',\n        name = thal,\n        texttemplate = \"%{y:.2f} %\"\n    )\n    traces.append(trace)\nfig = go.Figure(data = traces)\nfig.update_layout(title = 'Distribution of target based on Thal',\n    xaxis_title=\"Target\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Thal\"\n)\niplot(fig)","b276f755":"df = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')","bc9d42a7":"df['age'] = pd.cut(df['age'],bins=[0,47,61,100],labels=['Adult','Aging','Old'])","642c22db":"categorical_features = ['age','cp', 'fbs', 'exang', 'slope', 'ca', 'thal']\nfor feature in categorical_features:\n    encoder = LabelEncoder()\n    df[feature] = encoder.fit_transform(df[feature])","d3d7f9eb":"continuous_features = ['trestbps', 'chol','restecg','thalach','oldpeak']\nscaler = StandardScaler()\ndf[continuous_features] = scaler.fit_transform(df[continuous_features])","2e2e770b":"y = df.target.values\nX = df.drop(['target'], axis = 1)","10694554":"from sklearn.model_selection import StratifiedShuffleSplit\nstratifiedSplit = StratifiedShuffleSplit(n_splits=1, test_size = 0.1, random_state = 0)\nfor train_idx, test_idx in stratifiedSplit.split(X, y):\n    x_train, x_test = X.iloc[train_idx,], X.iloc[test_idx,]\n    y_train, y_test = y[train_idx], y[test_idx]","97564bb3":"log_reg = LogisticRegression(random_state=0,class_weight='balanced')\nlog_reg.fit(x_train, y_train)\nfrom sklearn.metrics import accuracy_score\ntrain_acc = accuracy_score(y_train, log_reg.predict(x_train))\ntest_acc = accuracy_score(y_test, log_reg.predict(x_test))\nprint('-'*25)\nprint('Training Accuracy is {:.2f}'.format(train_acc*100))\nprint('-'*25)\nprint('-'*25)\nprint('Testing Accuracy is {:.2f}'.format(test_acc*100))\nprint('-'*25)","0c40312e":"conf = confusion_matrix(y_test, log_reg.predict(x_test))\nfig = px.imshow(conf)\nfig.update_layout(\ntitle = 'Logistic Regression Confusion Matrix',\nxaxis_title = 'Predicted Label',\nyaxis_title = 'True Label'\n)\niplot(fig)","f9d1a4d5":"max_acc = 0.0\nneighbours = 0\nfor i in range(1,10):\n    knn = KNeighborsClassifier(n_neighbors=i,p=1)\n    knn.fit(x_train, y_train)\n    test_acc = accuracy_score(y_test, knn.predict(x_test))\n    if(test_acc>max_acc):\n        max_acc = test_acc\n        neighbours = i\nknn = KNeighborsClassifier(n_neighbors=neighbours)\nknn.fit(x_train, y_train)\ntrain_acc = accuracy_score(y_train, knn.predict(x_train))\nprint('-'*25)\nprint('Training Accuracy is {:.2f} with {} neighbours'.format(train_acc*100, neighbours))\nprint('-'*25)\nprint('-'*25)\nprint('Maximum Testing Accuracy is {:.2f} with {} neighbours'.format(max_acc*100, neighbours))\nprint('-'*25)","1ca4bc44":"conf = confusion_matrix(y_test, knn.predict(x_test))\nfig = px.imshow(conf)\nfig.update_layout(\ntitle = 'KNN Classifier Confusion Matrix',\nxaxis_title = 'Predicted Label',\nyaxis_title = 'True Label'\n)\niplot(fig)","414a13bb":"rf = RandomForestClassifier(n_estimators=5,min_samples_split=15,random_state = 0, class_weight='balanced_subsample')\nrf.fit(x_train, y_train)\ntest_acc = accuracy_score(y_test, rf.predict(x_test))\ntrain_acc = accuracy_score(y_train, rf.predict(x_train))\nprint('-'*25)\nprint('Training Accuracy is {:.2f}'.format(train_acc*100))\nprint('-'*25)\nprint('-'*25)\nprint('Testing Accuracy is {:.2f}'.format(test_acc*100))\nprint('-'*25)","d56cb1ee":"conf = confusion_matrix(y_test, rf.predict(x_test))\nfig = px.imshow(conf)\nfig.update_layout(\ntitle = 'Random Forest Classifier Confusion Matrix',\nxaxis_title = 'Predicted Label',\nyaxis_title = 'True Label'\n)\niplot(fig)","50c6cde6":"# Preprocessing","f14f154b":"![Heart - Disease](https:\/\/www.deccanherald.com\/sites\/dh\/files\/styles\/article_detail\/public\/article_images\/2019\/11\/20\/heart-attack-1574189524.jpg)","07113447":"# Training and Evaluating Models","6f3bb4b4":"Although we do not get a significant $R^2$ value, we can still see that the slope of the OLS trendline is more in case of people with heart disease, thus as the age increases the blood pressure increases at a faster pace in case of people with Heart Disease as compared to people without heart disease.","eafadeda":"We see that the dataset contains a greater number of samples with Heart Disease. ","bf2acbc2":"## We decide to use KNN Classifier as the final model.","5e1e23a9":"While we would think that the heart diseases are prominent in elderly, the given dataset shows that the Average age of people without heart disease is more than those of people with heart disease.","fd859a27":"Heart Diseases are very common and are also very fatal. A lot of Machine Learning algorithms have been used in the Healthcare sector in order to tackle many problems. Here, in this kernel, we are going to see how we can apply some common Machine Learning Algorithms to get a reasonably good model that can help predict Heart Disease fairly well. ","cde112f1":"We see we have no null values in our dataset. ","eee0ff57":"**Females have a much higher chance of having heart diseases as compared to males.** \n\n75% of the females in the dataset have heart disease, while 55% of the males do not have a heart disease","d167f400":"# Importing Libraries","bc7ace60":"# EDA","1e286a93":"# Data Description\n\nDataset Features\n* age - age in years\n* sex - (1 = male; 0 = female)\n* cp - chest pain type\n* trestbps - resting blood pressure (in mm Hg on admission to the hospital)\n* chol - serum cholestoral in mg\/dl\n* fbs - (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n* restecg - resting electrocardiographic results\n* thalach - maximum heart rate achieved\n* exang - exercise induced angina (1 = yes; 0 = no)\n* oldpeak - ST depression induced by exercise relative to rest\n* slope - the slope of the peak exercise ST segment\n* ca - number of major vessels (0-3) colored by flourosopy\n* thal - 3 = normal; 6 = fixed defect; 7 = reversable defect\n* target - have disease or not (1=yes, 0=no)"}}