{"cell_type":{"b2d8e518":"code","702e1a85":"code","c5d6d597":"code","96537184":"code","9ad6d3c6":"code","073859cd":"code","b2ad4252":"code","1f6d4353":"code","23e81c29":"code","cc67da78":"code","c40d62af":"code","d0359362":"code","a76f054b":"code","868d57b2":"code","402e0c81":"code","028c98ff":"code","9e13f2cc":"code","5691f92e":"code","23743e92":"code","7552b9a0":"markdown"},"source":{"b2d8e518":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","702e1a85":"hyd=pd.read_csv(\"\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/hyundi.csv\")\nhyd.head()\nhyd.columns","c5d6d597":"hyd.groupby('year').agg(\"mean\")[\"price\"].plot(kind=\"bar\")","96537184":"hyd.year=hyd.year-2000","9ad6d3c6":"hyd.groupby('year').agg(\"mean\")[\"price\"].plot(kind=\"bar\")","073859cd":"hyd.groupby('model').agg(\"mean\")[\"price\"]","b2ad4252":"hyd.groupby('fuelType').agg(\"mean\")[\"price\"].plot(kind=\"bar\")","1f6d4353":"hyd.groupby('transmission').agg(\"mean\")[\"price\"].plot(kind=\"bar\")","23e81c29":"hyd.groupby('mileage').agg(\"mean\")[\"price\"].plot(kind=\"bar\")","cc67da78":"hyd.groupby('mpg').agg(\"mean\")[\"price\"].plot(kind=\"bar\")","c40d62af":"hyd.groupby('engineSize').agg(\"mean\")[\"price\"].plot(kind=\"bar\")","d0359362":"hyd.groupby('tax(\u00a3)').agg(\"mean\")[\"price\"].plot(kind=\"bar\")","a76f054b":"hyd.drop(columns=\"model\")","868d57b2":"X2=pd.get_dummies(hyd)\nX2","402e0c81":"Y=hyd.price\nX = X2.iloc[:,1:]\ny = X2.iloc[:,2]\n\n\nX.shape\ny.shape\nimport sklearn.model_selection as model_selection\nX_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, train_size=0.65,test_size=0.35, random_state=101)\nX_train\ny","028c98ff":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","9e13f2cc":"y_pred = regressor.predict(X_test)\ny_pred","5691f92e":"df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndf","23743e92":"from sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","7552b9a0":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)"}}