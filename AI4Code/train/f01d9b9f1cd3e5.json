{"cell_type":{"95da8ef2":"code","24eb7d30":"code","643510f4":"code","c39fca82":"code","56cdc86f":"code","c82e2d52":"code","4d87a819":"code","e6b227de":"code","2d66a0f0":"code","07d8a786":"code","4b28c7c7":"code","ec2f0fa3":"code","3384988f":"code","2266f4ef":"code","d6c2c4b4":"code","23e82bfc":"code","7fdf99a9":"code","a24bf59c":"code","57df0a65":"code","24f35ac8":"code","b92b6343":"code","d29e7cce":"code","71fd0d7e":"code","3e2b63ea":"code","d18ff62b":"code","02f25dbf":"code","77ae8ef0":"code","001e4ef1":"code","67f51976":"code","a2bb910a":"code","63782bb5":"code","363d2049":"code","dcae6f7b":"code","81cf4a6d":"code","a67dc53c":"code","3d507ae7":"code","bed75b43":"code","51014c59":"code","c88863b4":"code","95d870a9":"code","c3303eb2":"code","e1c59c56":"code","76031af0":"code","bb55fbdf":"code","a1924fe2":"code","143a7f70":"code","6eb0873d":"code","f518d2ac":"code","a7b5474b":"code","bddd738d":"code","d7d4481d":"code","394a15bd":"code","2f02fceb":"code","32736667":"code","11c6627e":"code","ef9295da":"code","e20be5f2":"code","8e2003cb":"code","f2995bb6":"code","941ef041":"code","bde76de6":"code","6679e65d":"code","8aedd46c":"code","30120881":"code","4be70af1":"code","0ab0453a":"markdown","b29bfdf4":"markdown","5bf1eafb":"markdown","afda0123":"markdown","4928afbd":"markdown","fbc7a11d":"markdown","e12dca78":"markdown","577e4aba":"markdown","70dfff41":"markdown","ffc850d9":"markdown","ba691d0a":"markdown","c866fdd7":"markdown","7e76382c":"markdown","f5470132":"markdown","46327f27":"markdown","3c5ad02f":"markdown","ac6d48c6":"markdown","b5599213":"markdown","5a48fac0":"markdown","f218c7a9":"markdown","451caaa5":"markdown","a3c00b17":"markdown","9ea89e97":"markdown","88f0faee":"markdown","c96d4704":"markdown","0551ae27":"markdown","6ae014c7":"markdown","e6bbd40a":"markdown","9a5f6433":"markdown","ee563903":"markdown","0b66793d":"markdown","2373870d":"markdown","275de0d2":"markdown","a152c13e":"markdown","43ca7236":"markdown","9ba283ad":"markdown","c0bfdfc3":"markdown","77e2da67":"markdown","6d13ad65":"markdown","fa252712":"markdown","b499d976":"markdown","d49d023f":"markdown","d59b4f02":"markdown","f317ad82":"markdown","52c6e0fd":"markdown","a9032ce6":"markdown","394d0266":"markdown","044c3b7d":"markdown","b3d2c13c":"markdown","58b8bd6e":"markdown","fb56f848":"markdown","e3cd4426":"markdown","64d49597":"markdown","83ed1d9f":"markdown","4e597e81":"markdown"},"source":{"95da8ef2":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","24eb7d30":"df_m = pd.read_csv(\"..\/input\/movielenssimplilearn\/movies.dat\", engine='python', sep='::', names=[\"MovieID\", \"Title\", \"Genres\"])","643510f4":"df_m.head()","c39fca82":"df_r = pd.read_csv(\"..\/input\/movielenssimplilearn\/ratings.dat\", engine='python', sep='::', names=[\"UserID\", \"MovieID\", \"Rating\", \"Timestamp\"])","56cdc86f":"df_r.head()","c82e2d52":"df_u = pd.read_csv(\"..\/input\/movielenssimplilearn\/users.dat\", engine='python', sep='::', names=[\"UserID\", \"Gender\", \"Age\", \"Occupation\", \"Zip-code\"])","4d87a819":"df_u.head()","e6b227de":"df_merged1 = df_m.merge(df_r, how='outer')","2d66a0f0":"df_merged1.head()","07d8a786":"df_merged2 = df_u.merge(df_r, how='inner')","4b28c7c7":"df_merged2.head()","ec2f0fa3":"df_merged3 = df_merged1.merge(df_merged2, how='inner')","3384988f":"df_merged3.head()","2266f4ef":"df_merged3.UserID = df_merged3.UserID.astype(int)\ndf_merged3.Rating = df_merged3.Rating.astype(int)","d6c2c4b4":"df_merged3.head()","23e82bfc":"df_merged3.shape","7fdf99a9":"df_merged3.sort_values(by=['UserID'], ascending=True)","a24bf59c":"cols = list(df_merged3.columns.values)","57df0a65":"print(cols)","24f35ac8":"master_data = df_merged3[['UserID', 'MovieID', 'Title', 'Rating', 'Genres', 'Zip-code', 'Gender', 'Age', 'Occupation', 'Timestamp']]","b92b6343":"master_data.head()","d29e7cce":"master_data.sort_values(by=['MovieID'], ascending=True)","71fd0d7e":"master_data.hist(column='Age')","3e2b63ea":"bins_list = [1, 18, 25, 35, 45, 50, 56]","d18ff62b":"master_data.hist(column='Age', bins = bins_list)","02f25dbf":"master_data[master_data['MovieID'] == 1].hist(column='Rating')","77ae8ef0":"master_data[master_data['MovieID'] == 1].count()","001e4ef1":"master_data[master_data['MovieID'] == 1].Rating.mean()","67f51976":"master_data.sort_values(by=['Rating'], ascending=False)","a2bb910a":"master_data[master_data['Rating'] == 5].Rating.count()","63782bb5":"master_data[master_data['Rating'] == 5].Title.unique()","363d2049":"most_rated = master_data.groupby('Title').size().sort_values(ascending=False)[:25]","dcae6f7b":"most_rated","81cf4a6d":"user2696 = master_data[master_data['UserID'] == 2696]","a67dc53c":"user2696.shape","3d507ae7":"user2696","bed75b43":"master_data['Genres_list'] = master_data['Genres'].str.split('|')","51014c59":"master_data.head()","c88863b4":"master_data['Gender'].replace(['F','M'],[0,1],inplace=True)","95d870a9":"master_data.head()","c3303eb2":"from sklearn.preprocessing import MultiLabelBinarizer\n\n## assign a new series to the genres_list column that contains a list of categories for each movie\nlist2series = pd.Series(master_data.Genres_list)\n\nmlb = MultiLabelBinarizer()\n\n## use mlb to create a new dataframe of the genres from the list for each row from the original data\n\none_hot_genres = pd.DataFrame(mlb.fit_transform(list2series),columns=mlb.classes_,index=list2series.index)\n","e1c59c56":"print(one_hot_genres.head())","76031af0":"type(one_hot_genres)","bb55fbdf":"md_small = master_data.iloc[:, [1,3,5,6,7,8]]","a1924fe2":"md_small.head()","143a7f70":"md_small.dtypes","6eb0873d":"md_small['Zip-code'] = md_small['Zip-code'].str[:5]\npd.to_numeric(md_small['Zip-code'])","f518d2ac":"## skip the correlation of movieID\n\nmd_small[md_small.columns[1:]].corr()['Rating'][:]","a7b5474b":"master_features = pd.merge(md_small, one_hot_genres, left_index=True, right_index=True)","bddd738d":"master_features.head()","d7d4481d":"X_feature = md_small.drop(['Zip-code'], axis=1)","394a15bd":"X_feature.head()","2f02fceb":"X_feature_small = X_feature[X_feature['MovieID'] < 50] ","32736667":"X_feature_small_trimmed = X_feature_small.drop(['MovieID','Rating'], axis=1)","11c6627e":"X_feature_small_trimmed.shape","ef9295da":"X_feature_small_trimmed.head()","e20be5f2":"Y_target = master_features['Rating'][master_features['MovieID']< 50]","8e2003cb":"Y_target.shape","f2995bb6":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X_feature_small_trimmed,Y_target,random_state=1)","941ef041":"from sklearn.linear_model import LogisticRegression","bde76de6":"#logreg = LogisticRegression(solver='lbfgs',class_weight='balanced', max_iter=100000)\nlogreg = LogisticRegression(max_iter=100000)","6679e65d":"logreg.fit(x_train,y_train)","8aedd46c":"y_pred = logreg.predict(x_test)","30120881":"from sklearn import metrics\nmetrics.accuracy_score(y_test,y_pred)","4be70af1":"# print the first 30 true and predicted responses\nprint ('actual:    ', y_test.values[0:30])\nprint ('predicted: ', y_pred[0:30])","0ab0453a":"Split the data into training and testing data.  By default this is 75% training and 25% testing","b29bfdf4":"***","5bf1eafb":"### Summary","afda0123":"***","4928afbd":"***","fbc7a11d":"## Find the ratings for all the movies reviewed by for a particular user of user id = 2696\n","e12dca78":"Logistic regression is best used for predicting categorical data\n\nneed to do logistic regression on the training data so we can see how well our test data does the prediction\n\nThe dataset kept throwing off a non-convergence error where max iterations had been reached.  I used the code below to increase the max iter.","577e4aba":"Let's sort the master data by rating","70dfff41":"let's get the accuracy score of the test data","ffc850d9":"***","ba691d0a":"split the genre content from pipe delimited to a list in a new column","c866fdd7":"**Student**:  David O'Dell\n\n**Course**:  Data Science with Python\n\n**Project 2**:  Movielens Case Study, predictive modeling with logistic regression\n\n\n**Tasks**:\n\n\n* Import the three datasets\n\n* Create a new dataset named \"master_data\" with the following columns (MovieID Title UserID Age Gender Occupation Rating)\n\n* Explore the datasets using visual representations (graphs or tables), also include your comments on the following:\n\n\n** User Age Distribution\n\n** User rating of the movie \u201cToy Story\u201d\n\n** Top 25 movies by viewership rating\n\n** Find the ratings for all the movies reviewed by for a particular user of user id = 2696\n\n\n* Feature Engineering:\n\n** Find out all unique genres \n\n** Create a separate column for each genre category with a one-hot encoding ( 1 and 0) whether or not the movie belongs to that genre.\n\n** Determine the features affecting the ratings of any particular movie.\n\n** Develop an appropriate model to predict the movie ratings","7e76382c":"merge feature column with genre categories one hot list","f5470132":"## Import the datasets","46327f27":"***","3c5ad02f":"change 'zip code' into numerical data type","ac6d48c6":"***","b5599213":"***","5a48fac0":"***","f218c7a9":"## Find out all the unique genres","451caaa5":"## View the distribution of user ages","a3c00b17":"The target feature we are trying to predict is the dependent variable, in other words the 'y' of the linear equation.  \n\nIn this case our target is the Rating feature.","9ea89e97":"Let's rearrange the columns into something we prefer","88f0faee":"## Determine the features affecting the ratings of any particular movie.","c96d4704":"## Average rating of Toy Story","0551ae27":"Since we're dealing with a large dataset, let's just train and test on a smaller portion of the dataset.  Let's grab only the first 50 unique movie IDs.  We have to make sure both our X and Y vectors are the same number of rows.","6ae014c7":"How many data points are we dealing with when we draw this histogram for Toy Story ratings","e6bbd40a":"## Top 25 movies by rating of entire viewership","9a5f6433":"- pull all the columns to analyze exclude the Ratings column since this is our dependent variable\n- let's drop the zip code and rating columns, zip code might not be worth the cycles at this point\n- let's make a smaller dataset with only those relevant features","ee563903":"Movies that had the most numerous ratings","0b66793d":"***","2373870d":"***","275de0d2":"## Train model for linear regression","a152c13e":"![](https:\/\/storage.needpix.com\/rsynced_images\/movie-64073_1280.jpg)","43ca7236":"## Merge the datasets into one","9ba283ad":"***","c0bfdfc3":"The training data need only include the features we feel would influence the outcome of the movie rating.  \n\nI have chosen that Occupation, Age and Gender are the most influential.\n\nWe will get rid of the MovieID and Rating column as this will conflict with our regression","77e2da67":"***","6d13ad65":"We need to find the unique users who rated movies at rating = 5","fa252712":"Create a smaller features dataframe of the movie data features that are relevant to rating outcome:\n\n- zip code\n- gender\n- age\n- occupation\n","b499d976":"### Develop an appropriate model to predict the movie ratings","d49d023f":"Toy story is MovieID = 1, let's get a distribution of ratings on that single ID","d59b4f02":"- The best accuracy score was 36.6% reached with 23302 rows corresponding to 50 movies being evaluated\n\n- Relative to the best score, a decrease in accuracy to 35% was observed when 25 movies were evaluated corresponding to 12476 rows.\n\n- Relative to the best score, a decrease in accuracy to 34% was observed when 100 movies were evaluated corresponding to 32244 rows.\n\n* - These observations remained the same when including or excluding \"Occupation\" and \"Gender\" as these two features had the least influence on the outcome.\n","f317ad82":"Check the data types of the set","52c6e0fd":"Let's predict the outcome based on test set","a9032ce6":"## User rating on the movie Toy Story","394d0266":"***","044c3b7d":"***","b3d2c13c":"We see that Age has the highest correlation","58b8bd6e":"## Create master data dataframe","fb56f848":"## One hot encode Genre list into separate columns","e3cd4426":"How many 5 star ratings are there?","64d49597":"In the user data set, we have ages mapped to categorical numbers using this table from the description of the dataset: \n\n**Value  \tDescription**\n\n1  = \"Under 18\"\n\n18 = \"18-24\"\n\n25 = \"25-34\"\n\n35 = \"35-44\"\n\n45 = \"45-49\"\n\n50 = \"50-55\"\n\n56 = \"56+\"\n","83ed1d9f":"Convert M and F category to binary","4e597e81":"Let's redraw our histogram based on our newly mapped bin values"}}