{"cell_type":{"72a52a9c":"code","c6c54aca":"code","f34993d7":"code","2f5b6683":"code","bb0d21ef":"code","a5c23da4":"code","26fe13d3":"markdown","cdfe42d3":"markdown","500a556d":"markdown","28d95e98":"markdown","8e055e2e":"markdown"},"source":{"72a52a9c":"import pandas as pd","c6c54aca":"df = pd.read_csv(\"..\/input\/trojan-detection\/Trojan_Detection.csv\", sep = r',', skipinitialspace = True)\n\ndf.head()","f34993d7":"df = df.dropna()\n\ndf.drop([\"Unnamed: 0\"], axis = 1).values\n\ndf = df.replace(\"Trojan\", 1)\ndf = df.replace(\"Benign\", 0)\n\ndf.head()","2f5b6683":"from sklearn import preprocessing\n\nnumber = preprocessing.LabelEncoder()\n\ndf[\"Flow ID\"] = number.fit_transform(df[\"Flow ID\"])\ndf[\"Source IP\"] = number.fit_transform(df[\"Source IP\"])\ndf[\"Destination IP\"] = number.fit_transform(df[\"Destination IP\"])\ndf[\"Timestamp\"] = number.fit_transform(df[\"Timestamp\"])\n\ndf.head()","bb0d21ef":"from sklearn.model_selection import train_test_split\n\n# Columns used as predictors\nX = df.drop([\"Class\"], axis = 1).values\n\ny = df[\"Class\"].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size = 0.2)","a5c23da4":"# from pandas import read_csv\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\n\n#Scale data, otherwise model will fail.\n#Standardize features by removing the mean and scaling to unit variance\nfrom sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nscaler.fit(X_train)\n\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n\n# define the model\n#Experiment with deeper and wider networks\nmodel = Sequential()\n\nmodel.add(Dense(128, input_dim=85, activation='relu'))\nmodel.add(Dense(64, input_dim=85, activation='relu'))\n\nmodel.add(Dense(64, input_dim=85, activation='relu'))\nmodel.add(Dense(64, input_dim=85, activation='relu'))\n\n#Output layer\nmodel.add(Dense(1, activation='relu'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()\n\nhistory = model.fit(X_train_scaled, y_train, validation_split=0.2, epochs =20)\n\nfrom matplotlib import pyplot as plt\n#plot the training and validation accuracy and loss at each epoch\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(loss) + 1)\nplt.plot(epochs, loss, 'y', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","26fe13d3":"#### Loading and Displaying data","cdfe42d3":"#### Encoding","500a556d":"#### Defining X and y and Splitting data","28d95e98":"#### Pre-Cleaning data","8e055e2e":"# Trojan Detection with Random Forest"}}