{"cell_type":{"65d046cd":"code","314b21e2":"code","f8f19b9d":"code","631946ab":"code","0d93a0d7":"code","c3e73512":"code","6692f1ee":"code","41ff0d70":"code","cc9d9f67":"code","f6f827bd":"code","34d3b009":"code","a7e3d1cb":"code","8480f63e":"code","1b14459d":"code","29241b51":"code","e280188d":"markdown","fc830f3f":"markdown","4f4f88fa":"markdown","13f4f568":"markdown","add93344":"markdown","ec1afa9c":"markdown","074dc430":"markdown","5c35a313":"markdown","f40bd3da":"markdown","1e5125ff":"markdown","ab537bba":"markdown","4ed99fbf":"markdown"},"source":{"65d046cd":"import os\nimport numpy as np\nimport glob\nimport cv2\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport pandas as pd\nimport keras\nfrom keras import backend as K\nfrom sklearn.model_selection import train_test_split\nfrom keras.layers.normalization import BatchNormalization","314b21e2":"def getFileName(path):\n    return (path.split(\"..\/input\/sign-language-images\/Dataset\/\")[1])","f8f19b9d":"images = {}\nmetaData = []\nfolders = next(os.walk('..\/input\/sign-language-images\/Dataset'))[1]\nfor folder in folders:\n    csvFile = pd.read_csv(\"..\/input\/sign-language-images\/Dataset\/%s\/%s_loc.csv\" %(folder,folder))\n    metaData.append(np.array(csvFile))\n    for img in glob.glob(\"..\/input\/sign-language-images\/Dataset\/%s\/*.jpg\" %folder):\n        n= mpimg.imread(img)\n        picName = getFileName(img)\n        images.update({picName : n})","631946ab":"def preprocess(image,box):\n    return cv2.resize(image[box[0]:box[1],box[2]:box[3]], (90,90))","0d93a0d7":"imagesAfterCrop = {}\nfor userImages in metaData:\n    for img in userImages:\n        imagesAfterCrop.update({img[0] : preprocess(images[img[0]],[img[2], img[4], img[1], img[3]])})","c3e73512":"img=imagesAfterCrop[\"user_10\/A1.jpg\"]\nimgplot = plt.imshow(img)\nplt.show()\nimagesAfterCrop[\"user_10\/A1.jpg\"].shape","6692f1ee":"def createLabelsArray(images):\n    counter = 0;\n    labels = np.zeros((len(images),26))\n    for img in images:\n        labels[counter][(ord(img.split('\/')[1][0]) - ord('A'))] = 1 \n        counter = counter + 1\n    return labels\n    \n        \ny = createLabelsArray(imagesAfterCrop)\nprint(y.shape)","41ff0d70":"x_train, x_test, y_train, y_test = train_test_split(list(imagesAfterCrop.values()), y, test_size=0.2, random_state = 0)\nx_train = np.array(x_train)\nx_test = np.array(x_test)\nx_train = x_train \/ 255\nx_test = x_test \/ 255","cc9d9f67":"num_classes = 26\n\nmodel = keras.models.Sequential()\nmodel.add(keras.layers.Conv2D(32, (3, 3), input_shape=(90, 90, 3)))\nmodel.add(keras.layers.Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(keras.layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(keras.layers.Conv2D(32, (3, 3)))\nmodel.add(keras.layers.Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(keras.layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(keras.layers.Conv2D(32, (3, 3)))\nmodel.add(keras.layers.Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(keras.layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dense(1024))\nmodel.add(keras.layers.Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(keras.layers.Dense(num_classes))\nmodel.add(keras.layers.Activation('softmax'))","f6f827bd":"# Let's train the model using RMSprop\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=keras.optimizers.RMSprop(lr=0.0001, decay=1e-6),\n              metrics=['accuracy'])\n\nhistory = model.fit(\n    x_train, y_train,\n    batch_size=16,\n    epochs=10,\n    validation_data=(x_test, y_test)\n).history","34d3b009":"# Score trained model.\nloss, acc = model.evaluate(x_test, y_test, verbose=1)\nprint('Test loss:', loss)\nprint('Test accuracy:', acc)","a7e3d1cb":"def decodeReal(yHat):\n    return chr(np.argmax(yHat) + 97).upper()\n\ndef decodePrediction(number):\n    return chr(number + 97).upper()","8480f63e":"fig=plt.figure(figsize=(15, 15))\ncolumns = 3\nrows = 3\nfor i in range(1, columns*rows +1):\n    img = x_test[0+ i]\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(img)\n    plt.axis('off')\n    print(\"The predicted Letter for Example#\"+str(i)+\" is \"+decodePrediction(model.predict_classes(np.array([x_test[i],]))))\n    print(\"The real Letter for Example#\"+str(i)+ \" is \" +decodeReal(y_test[i]))\nplt.show()","1b14459d":"allLettersTestArray = np.zeros(26)\nallLettersTestMistakesArray = np.zeros(26)\ncounter = 0\nfor example in x_test:\n    yhat = np.argmax(y_test[counter])\n    allLettersTestArray[yhat] += 1\n    if(model.predict_classes(np.array([x_test[counter],])) != yhat):\n        allLettersTestMistakesArray[yhat] += 1\n    counter += 1\nallLettersTestArray[allLettersTestArray == 0] = -1    \nmistakesPerLetter = allLettersTestMistakesArray \/ allLettersTestArray\nlettersArray = np.array(list(map(chr, range(97, 123))))\ndf = pd.DataFrame({'leters' : lettersArray, 'mistakes' : mistakesPerLetter})\ndf['colors'] = 'b'\ndf.loc[df.mistakes > 0.15, 'colors'] ='r'","29241b51":"f, ax = plt.subplots(figsize=(18,5))\nplt.bar(df.leters, df.mistakes, color=df.colors)\nax.set_title('Mistake Frequency by letter', fontsize=18)\nax.set_ylabel('Mistake Frequency', fontsize=18)","e280188d":"First lets do some imports","fc830f3f":"# Sign language recognition using CNN","4f4f88fa":"Finaly we can create and train our model!\nfor better results we use BatchNormalization and the Adam optimizer.\nWe use the softmax function for the classification.","13f4f568":"Here we create the labels array, using the pictures names.\nThe labels are one hot encoding, we would make sure everything fine by printing the shape of the labels array.","add93344":"* This Notebook inspirde by the course Scientific computation in Python from IDC and Dr. Yoav Ram","ec1afa9c":"We almost there!\nNow we split the data to train and test, and rescale all the x(pixels) values to be between 0 to 1(keras requirment)","074dc430":"After loading the data we crop the images so we would have only the \"interesting\" part of the images, and resize all the images to the same size(keras requirment).","5c35a313":"In this Exercise we would train a CNN to clasify images of sign languge.\nThis Notebook has 4 main parts:\n\n    1. Loading the Data.\n    2. Prepering the data for the model(images and labels).\n    3. Creating and training the model.\n    4. Presinting the results.","f40bd3da":"The First step would be loading the data from the Dataset folder, we load all the images. \nWe also load the data from the csv files which would help us to crop the images.","1e5125ff":"Here we can see the Mistakes frequncy per letter,\nthe red ones are the letters which had the most mistakes.\nThere could be many reasons why we had more mistakes on those letters(maybe similarity to other letters), but thats out of our scope :)","ab537bba":"# Thank you for reading","4ed99fbf":"Great!\nwe get ~90% accuracy on the test set.\nhere are some examples of our predictions."}}