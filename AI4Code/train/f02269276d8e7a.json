{"cell_type":{"1e9fd25b":"code","95cc448f":"code","9e721ff5":"code","2e00a7f7":"code","2635f578":"code","13861ef7":"code","059f39a6":"code","ee6c1db9":"code","ec67b93b":"code","08e5527e":"code","922a74fc":"code","24147184":"code","019e38c6":"code","bb86254a":"code","14ea6c63":"code","f441cd14":"code","17853516":"code","1e308529":"code","1371b1e9":"code","33082fa0":"code","3209ba95":"code","309b579b":"code","02558137":"code","725cbc25":"code","126a4a19":"code","0e81a6a9":"code","c97f126d":"code","9ba010f3":"code","49dd6f20":"code","3f3cd0b9":"code","500dcc3b":"code","a274406d":"code","4433b34b":"code","94c9fa08":"code","2a95558c":"code","03d2ecaa":"code","369cd55d":"code","5d365922":"code","0193419c":"code","7ba6b11d":"code","778b3f6e":"code","4b004ecf":"code","5a06be88":"code","2e140620":"code","6a75b7df":"code","5e2381fb":"code","bb04ec41":"code","1c012b27":"code","2b2664b9":"code","23f23370":"code","2876983f":"code","2c2339a1":"code","df3b7594":"markdown","3e3dba4b":"markdown","a7529466":"markdown","a43a28b3":"markdown","8f3eadde":"markdown","586230dc":"markdown","f42f2809":"markdown","02da5968":"markdown","bdb3e3c1":"markdown","423aa3bb":"markdown","f7eb6477":"markdown","c81c5f90":"markdown","72678f5e":"markdown","54632c38":"markdown","cfb04397":"markdown"},"source":{"1e9fd25b":"##Libraries \n\nimport numpy as np\nimport pandas as pd\nimport os, time, re\nimport pickle, gzip\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\nimport matplotlib as mpl\n\n%matplotlib inline\n\n\nfrom sklearn import preprocessing as pp\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.model_selection import StratifiedKFold \nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import precision_recall_curve, average_precision_score\nfrom sklearn.metrics import roc_curve, auc, roc_auc_score\n\n\nimport lightgbm as lgb\n\n\nimport tensorflow as tf\nimport keras\nfrom keras import backend as K\nfrom keras.models import Sequential, Model\nfrom keras.layers import Activation, Dense, Dropout\nfrom keras.layers import BatchNormalization, Input, Lambda\nfrom keras import regularizers\nfrom keras.losses import mse, binary_crossentropy","95cc448f":"df = pd.read_pickle('..\/input\/searching-for-bad-loan-data-preprocessing\/df_pp.pkl')","9e721ff5":"df['Loan_status'].value_counts()","2e00a7f7":"f,ax=plt.subplots(1,2,figsize=(18,8))\ndf['Loan_status'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Loan_status')\nax[0].set_ylabel('')\nsns.countplot('Loan_status',data=df,ax=ax[1])\nax[1].set_title('Loan_status')\nplt.show()","2635f578":"X = df.drop('Loan_status', axis=1)\ny = df['Loan_status']\n\nfrom sklearn import preprocessing as pp\nfeaturesToScale = X.columns\nsX = pp.StandardScaler(copy=True)\nX.loc[:,featuresToScale] = sX.fit_transform(X[featuresToScale])\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2 , random_state = 2020, stratify = y)","13861ef7":"X_train_AE = X_train.copy()\nX_test_AE = X_test.copy()","059f39a6":"len(X_train_AE.columns)","ee6c1db9":"def anomalyScores(originalDF, reducedDF):\n    loss = np.sum((np.array(originalDF) - \\\n                   np.array(reducedDF))**2, axis=1)\n    loss = pd.Series(data=loss,index=originalDF.index)\n    loss = (loss-np.min(loss))\/(np.max(loss)-np.min(loss))\n    return loss","ec67b93b":"def plotResults(trueLabels, anomalyScores, returnPreds = False):\n    preds = pd.concat([trueLabels, anomalyScores], axis=1)\n    preds.columns = ['trueLabel', 'anomalyScore']\n    precision, recall, thresholds = \\\n        precision_recall_curve(preds['trueLabel'], \\\n                               preds['anomalyScore'])\n    average_precision = average_precision_score( \\\n                        preds['trueLabel'], preds['anomalyScore'])\n    \n    plt.step(recall, precision, color='k', alpha=0.7, where='post')\n    plt.fill_between(recall, precision, step='post', alpha=0.3, color='k')\n\n    plt.xlabel('Recall')\n    plt.ylabel('Precision')\n    plt.ylim([0.0, 1.05])\n    plt.xlim([0.0, 1.0])\n    \n    plt.title('Precision-Recall curve: Average Precision = \\\n        {0:0.2f}'.format(average_precision))\n\n    fpr, tpr, thresholds = roc_curve(preds['trueLabel'], \\\n                                     preds['anomalyScore'])\n    areaUnderROC = auc(fpr, tpr)\n\n    plt.figure()\n    plt.plot(fpr, tpr, color='r', lw=2, label='ROC curve')\n    plt.plot([0, 1], [0, 1], color='k', lw=2, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic: Area under the \\\n        curve = {0:0.2f}'.format(areaUnderROC))\n    plt.legend(loc=\"lower right\")\n    plt.show()\n    \n    if returnPreds==True:\n        return preds, average_precision  ### diff","08e5527e":"model = Sequential()\nmodel.add(Dense(units=31, activation='linear',input_dim=31))\nmodel.add(Dense(units=31, activation='linear'))","922a74fc":"model.compile(optimizer='adam',\n              loss='mean_squared_error',\n              metrics=['accuracy'])","24147184":"\nnum_epochs = 10\nbatch_size = 32\n\nhistory = model.fit(x=X_train_AE, y=X_train_AE,\n                    epochs=num_epochs,\n                    batch_size=batch_size,\n                    shuffle=True,\n                    validation_data=(X_train_AE, X_train_AE),\n                    verbose=1)","019e38c6":"\npredictions = model.predict(X_test, verbose=1)\nanomalyScoresAE = anomalyScores(X_test, predictions)\npreds = plotResults(y_test, anomalyScoresAE, True)\nmodel.reset_states()","bb86254a":"# # mean of mean precisions (10 times)\n\n# test_scores = []\n# for i in range(0,10):\n#     model = Sequential()\n#     model.add(Dense(units=31, activation='linear',input_dim=31))\n#     model.add(Dense(units=31, activation='linear'))\n#     model.compile(optimizer='adam',\n#                   loss='mean_squared_error',\n#                   metrics=['accuracy'])\n\n\n#     num_epochs = 10\n#     batch_size = 32\n\n#     history = model.fit(x=X_train_AE, y=X_train_AE,\n#                         epochs=num_epochs,\n#                         batch_size=batch_size,\n#                         shuffle=True,\n#                         validation_data=(X_train_AE, X_train_AE),\n#                         verbose=1)\n\n\n#     predictions = model.predict(X_test, verbose=1)\n#     anomalyScoresAE = anomalyScores(X_test, predictions)\n#     preds, avgPrecision = plotResults(y_test, anomalyScoresAE, True)\n#     test_scores.append(avgPrecision)\n#     model.reset_states()\n","14ea6c63":"\n# print(\"Mean average precision over 10 runs: \", np.mean(test_scores))\n# print(\"Coefficient of variation over 10 runs: \", np.std(test_scores)\/ \\\n#                                                 np.mean(test_scores))\n# test_scores","f441cd14":"model = Sequential()\nmodel.add(Dense(units=20, activation='linear',input_dim=31))\nmodel.add(Dense(units=31, activation='linear'))\nmodel.compile(optimizer='adam',\n              loss='mean_squared_error',\n              metrics=['accuracy'])\n\nnum_epochs = 10\nbatch_size = 32\n\nhistory = model.fit(x=X_train_AE, y=X_train_AE,\n                    epochs=num_epochs,\n                    batch_size=batch_size,\n                    shuffle=True,\n                    validation_data=(X_train_AE, X_train_AE),\n                    verbose=1)\n\n\npredictions = model.predict(X_test, verbose=1)\nanomalyScoresAE = anomalyScores(X_test, predictions)\npreds = plotResults(y_test, anomalyScoresAE, True)\nmodel.reset_states()","17853516":"# mean of mean precisions (10 times)\n\ntest_scores = []\nfor i in range(0,10):\n    model = Sequential()\n    model.add(Dense(units=20, activation='linear',input_dim=31))\n    model.add(Dense(units=31, activation='linear'))\n    model.compile(optimizer='adam',\n                  loss='mean_squared_error',\n                  metrics=['accuracy'])\n\n\n    num_epochs = 10\n    batch_size = 32\n\n    history = model.fit(x=X_train_AE, y=X_train_AE,\n                        epochs=num_epochs,\n                        batch_size=batch_size,\n                        shuffle=True,\n                        validation_data=(X_train_AE, X_train_AE),\n                        verbose=1)\n\n\n    predictions = model.predict(X_test, verbose=1)\n    anomalyScoresAE = anomalyScores(X_test, predictions)\n    preds, avgPrecision = plotResults(y_test, anomalyScoresAE, True)\n    test_scores.append(avgPrecision)\n    model.reset_states()\n\n","1e308529":"print(\"Mean average precision over 10 runs: \", np.mean(test_scores))\nprint(\"Coefficient of variation over 10 runs: \", np.std(test_scores)\/ \\\n                                                np.mean(test_scores))\ntest_scores","1371b1e9":"model = Sequential()\nmodel.add(Dense(units=28, activation='linear',input_dim=31))\nmodel.add(Dense(units=31, activation='linear'))\nmodel.compile(optimizer='adam',\n              loss='mean_squared_error',\n              metrics=['accuracy'])\n\nnum_epochs = 10\nbatch_size = 32\n\nhistory = model.fit(x=X_train_AE, y=X_train_AE,\n                    epochs=num_epochs,\n                    batch_size=batch_size,\n                    shuffle=True,\n                    validation_data=(X_train_AE, X_train_AE),\n                    verbose=1)\n\n\npredictions = model.predict(X_test, verbose=1)\nanomalyScoresAE = anomalyScores(X_test, predictions)\npreds = plotResults(y_test, anomalyScoresAE, True)\nmodel.reset_states()","33082fa0":"# mean of mean precisions (10 times)\n\ntest_scores = []\nfor i in range(0,10):\n    model = Sequential()\n    model.add(Dense(units=28, activation='linear',input_dim=31))\n    model.add(Dense(units=31, activation='linear'))\n    model.compile(optimizer='adam',\n                  loss='mean_squared_error',\n                  metrics=['accuracy'])\n\n\n    num_epochs = 10\n    batch_size = 32\n\n    history = model.fit(x=X_train_AE, y=X_train_AE,\n                        epochs=num_epochs,\n                        batch_size=batch_size,\n                        shuffle=True,\n                        validation_data=(X_train_AE, X_train_AE),\n                        verbose=1)\n\n\n    predictions = model.predict(X_test, verbose=1)\n    anomalyScoresAE = anomalyScores(X_test, predictions)\n    preds, avgPrecision = plotResults(y_test, anomalyScoresAE, True)\n    test_scores.append(avgPrecision)\n    model.reset_states()\n","3209ba95":"print(\"Mean average precision over 10 runs: \", np.mean(test_scores))\nprint(\"Coefficient of variation over 10 runs: \", np.std(test_scores)\/ \\\n                                                np.mean(test_scores))\ntest_scores","309b579b":"model = Sequential()\nmodel.add(Dense(units=28, activation='linear',input_dim=31))\nmodel.add(Dense(units=27, activation='linear'))\nmodel.add(Dense(units=31, activation='linear'))\nmodel.compile(optimizer='adam',\n              loss='mean_squared_error',\n              metrics=['accuracy'])\n\nnum_epochs = 10\nbatch_size = 32\n\nhistory = model.fit(x=X_train_AE, y=X_train_AE,\n                    epochs=num_epochs,\n                    batch_size=batch_size,\n                    shuffle=True,\n                    validation_data=(X_train_AE, X_train_AE),\n                    verbose=1)\n\n\npredictions = model.predict(X_test, verbose=1)\nanomalyScoresAE = anomalyScores(X_test, predictions)\npreds = plotResults(y_test, anomalyScoresAE, True)\nmodel.reset_states()","02558137":"# mean of mean precisions (10 times)\n\ntest_scores = []\nfor i in range(0,10):\n    model = Sequential()\n    model.add(Dense(units=28, activation='linear',input_dim=31))\n    model.add(Dense(units=27, activation='linear'))\n    model.add(Dense(units=31, activation='linear'))\n    model.compile(optimizer='adam',\n                  loss='mean_squared_error',\n                  metrics=['accuracy'])\n\n\n    num_epochs = 10\n    batch_size = 32\n\n    history = model.fit(x=X_train_AE, y=X_train_AE,\n                        epochs=num_epochs,\n                        batch_size=batch_size,\n                        shuffle=True,\n                        validation_data=(X_train_AE, X_train_AE),\n                        verbose=1)\n\n\n    predictions = model.predict(X_test, verbose=1)\n    anomalyScoresAE = anomalyScores(X_test, predictions)\n    preds, avgPrecision = plotResults(y_test, anomalyScoresAE, True)\n    test_scores.append(avgPrecision)\n    model.reset_states()\n\n","725cbc25":"print(\"Mean average precision over 10 runs: \", np.mean(test_scores))\nprint(\"Coefficient of variation over 10 runs: \", np.std(test_scores)\/ \\\n                                                np.mean(test_scores))\ntest_scores","126a4a19":"model = Sequential()\nmodel.add(Dense(units=28, activation='relu',input_dim=31))\nmodel.add(Dense(units=23, activation='relu'))\n\n\nmodel.add(Dense(units=28, activation='relu'))\nmodel.add(Dense(units=31, activation='relu'))\n\n\n\nmodel.compile(optimizer='adam',\n              loss='mean_squared_error',\n              metrics=['accuracy'])\n\nnum_epochs = 10\nbatch_size = 32\n\nhistory = model.fit(x=X_train_AE, y=X_train_AE,\n                    epochs=num_epochs,\n                    batch_size=batch_size,\n                    shuffle=True,\n                    validation_data=(X_train_AE, X_train_AE),\n                    verbose=1)\n\n\npredictions = model.predict(X_test, verbose=1)\nanomalyScoresAE = anomalyScores(X_test, predictions)\npreds = plotResults(y_test, anomalyScoresAE, True)\nmodel.reset_states()","0e81a6a9":"# # mean of mean precisions (10 times)\n\n# test_scores = []\n# for i in range(0,10):\n#     model = Sequential()\n#     model.add(Dense(units=28, activation='relu',input_dim=31))\n#     model.add(Dense(units=23, activation='relu'))\n\n\n#     model.add(Dense(units=28, activation='relu'))\n#     model.add(Dense(units=31, activation='relu'))\n#     model.compile(optimizer='adam',\n#                   loss='mean_squared_error',\n#                   metrics=['accuracy'])\n\n\n#     num_epochs = 10\n#     batch_size = 32\n\n#     history = model.fit(x=X_train_AE, y=X_train_AE,\n#                         epochs=num_epochs,\n#                         batch_size=batch_size,\n#                         shuffle=True,\n#                         validation_data=(X_train_AE, X_train_AE),\n#                         verbose=1)\n\n\n#     predictions = model.predict(X_test, verbose=1)\n#     anomalyScoresAE = anomalyScores(X_test, predictions)\n#     preds, avgPrecision = plotResults(y_test, anomalyScoresAE, True)\n#     test_scores.append(avgPrecision)\n#     model.reset_states()","c97f126d":"# print(\"Mean average precision over 10 runs: \", np.mean(test_scores))\n# print(\"Coefficient of variation over 10 runs: \", np.std(test_scores)\/ \\\n#                                                 np.mean(test_scores))\n# test_scores","9ba010f3":"model = Sequential()\nmodel.add(Dense(units=28, activation='relu',input_dim=31))\nmodel.add(Dropout(0.10))\n\nmodel.add(Dense(units=31, activation='relu'))\n\n\n\nmodel.compile(optimizer='adam',\n              loss='mean_squared_error',\n              metrics=['accuracy'])\n\nnum_epochs = 10\nbatch_size = 32\n\nhistory = model.fit(x=X_train_AE, y=X_train_AE,\n                    epochs=num_epochs,\n                    batch_size=batch_size,\n                    shuffle=True,\n                    validation_data=(X_train_AE, X_train_AE),\n                    verbose=1)\n\n\npredictions = model.predict(X_test, verbose=1)\nanomalyScoresAE = anomalyScores(X_test, predictions)\npreds = plotResults(y_test, anomalyScoresAE, True)\nmodel.reset_states()","49dd6f20":"# # mean of mean precisions (10 times)\n\n# test_scores = []\n# for i in range(0,10):\n#     model = Sequential()\n#     model.add(Dense(units=28, activation='relu',input_dim=31))\n#     model.add(Dropout(0.10))\n\n#     model.add(Dense(units=31, activation='relu'))\n#     model.compile(optimizer='adam',\n#                   loss='mean_squared_error',\n#                   metrics=['accuracy'])\n\n\n#     num_epochs = 10\n#     batch_size = 32\n\n#     history = model.fit(x=X_train_AE, y=X_train_AE,\n#                         epochs=num_epochs,\n#                         batch_size=batch_size,\n#                         shuffle=True,\n#                         validation_data=(X_train_AE, X_train_AE),\n#                         verbose=1)\n\n\n#     predictions = model.predict(X_test, verbose=1)\n#     anomalyScoresAE = anomalyScores(X_test, predictions)\n#     preds, avgPrecision = plotResults(y_test, anomalyScoresAE, True)\n#     test_scores.append(avgPrecision)\n#     model.reset_states()","3f3cd0b9":"# print(\"Mean average precision over 10 runs: \", np.mean(test_scores))\n# print(\"Coefficient of variation over 10 runs: \", np.std(test_scores)\/ \\\n#                                                 np.mean(test_scores))\n# test_scores","500dcc3b":"model = Sequential()\nmodel.add(Dense(units=40, activation='linear',input_dim=31))\nmodel.add(Dense(units=31, activation='linear'))\nmodel.compile(optimizer='adam',\n              loss='mean_squared_error',\n              metrics=['accuracy'])\n\nnum_epochs = 10\nbatch_size = 32\n\nhistory = model.fit(x=X_train_AE, y=X_train_AE,\n                    epochs=num_epochs,\n                    batch_size=batch_size,\n                    shuffle=True,\n                    validation_data=(X_train_AE, X_train_AE),\n                    verbose=1)\n\n\npredictions = model.predict(X_test, verbose=1)\nanomalyScoresAE = anomalyScores(X_test, predictions)\npreds = plotResults(y_test, anomalyScoresAE, True)\nmodel.reset_states()","a274406d":"# # mean of mean precisions (10 times)\n\n# test_scores = []\n# for i in range(0,10):\n#     model = Sequential()\n#     model.add(Dense(units=40, activation='linear',input_dim=31))\n#     model.add(Dense(units=31, activation='linear'))\n#     model.compile(optimizer='adam',\n#                   loss='mean_squared_error',\n#                   metrics=['accuracy'])\n\n\n#     num_epochs = 10\n#     batch_size = 32\n\n#     history = model.fit(x=X_train_AE, y=X_train_AE,\n#                         epochs=num_epochs,\n#                         batch_size=batch_size,\n#                         shuffle=True,\n#                         validation_data=(X_train_AE, X_train_AE),\n#                         verbose=1)\n\n\n#     predictions = model.predict(X_test, verbose=1)\n#     anomalyScoresAE = anomalyScores(X_test, predictions)\n#     preds, avgPrecision = plotResults(y_test, anomalyScoresAE, True)\n#     test_scores.append(avgPrecision)\n#     model.reset_states()","4433b34b":"# print(\"Mean average precision over 10 runs: \", np.mean(test_scores))\n# print(\"Coefficient of variation over 10 runs: \", np.std(test_scores)\/ \\\n#                                                 np.mean(test_scores))\n# test_scores","94c9fa08":"model = Sequential()\nmodel.add(Dense(units=40, activation='linear',input_dim=31))\nmodel.add(Dropout(0.10))\nmodel.add(Dense(units=31, activation='linear'))\nmodel.compile(optimizer='adam',\n              loss='mean_squared_error',\n              metrics=['accuracy'])\n\nnum_epochs = 10\nbatch_size = 32\n\nhistory = model.fit(x=X_train_AE, y=X_train_AE,\n                    epochs=num_epochs,\n                    batch_size=batch_size,\n                    shuffle=True,\n                    validation_data=(X_train_AE, X_train_AE),\n                    verbose=1)\n\n\npredictions = model.predict(X_test, verbose=1)\nanomalyScoresAE = anomalyScores(X_test, predictions)\npreds = plotResults(y_test, anomalyScoresAE, True)\nmodel.reset_states()","2a95558c":"# # mean of mean precisions (10 times)\n\n# test_scores = []\n# for i in range(0,10):\n#     model = Sequential()\n#     model.add(Dense(units=40, activation='linear',input_dim=31))\n#     model.add(Dropout(0.10))\n#     model.add(Dense(units=31, activation='linear'))\n#     model.compile(optimizer='adam',\n#                   loss='mean_squared_error',\n#                   metrics=['accuracy'])\n\n\n#     num_epochs = 10\n#     batch_size = 32\n\n#     history = model.fit(x=X_train_AE, y=X_train_AE,\n#                         epochs=num_epochs,\n#                         batch_size=batch_size,\n#                         shuffle=True,\n#                         validation_data=(X_train_AE, X_train_AE),\n#                         verbose=1)\n\n\n#     predictions = model.predict(X_test, verbose=1)\n#     anomalyScoresAE = anomalyScores(X_test, predictions)\n#     preds, avgPrecision = plotResults(y_test, anomalyScoresAE, True)\n#     test_scores.append(avgPrecision)\n#     model.reset_states()","03d2ecaa":"# print(\"Mean average precision over 10 runs: \", np.mean(test_scores))\n# print(\"Coefficient of variation over 10 runs: \", np.std(test_scores)\/ \\\n#                                                 np.mean(test_scores))\n# test_scores","369cd55d":"model = Sequential()\nmodel.add(Dense(units=40, activation='linear',\\\n                activity_regularizer=regularizers.l1(10e-5),input_dim=31))\nmodel.add(Dense(units=31, activation='linear'))\nmodel.compile(optimizer='adam',\n              loss='mean_squared_error',\n              metrics=['accuracy'])\n\nnum_epochs = 10\nbatch_size = 32\n\nhistory = model.fit(x=X_train_AE, y=X_train_AE,\n                    epochs=num_epochs,\n                    batch_size=batch_size,\n                    shuffle=True,\n                    validation_data=(X_train_AE, X_train_AE),\n                    verbose=1)\n\n\npredictions = model.predict(X_test, verbose=1)\nanomalyScoresAE = anomalyScores(X_test, predictions)\npreds = plotResults(y_test, anomalyScoresAE, True)\nmodel.reset_states()","5d365922":"# # mean of mean precisions (10 times)\n\n# test_scores = []\n# for i in range(0,10):\n#     model = Sequential()\n#     model.add(Dense(units=40, activation='linear',\\\n#                     activity_regularizer=regularizers.l1(10e-5),input_dim=31))\n#     model.add(Dense(units=31, activation='linear'))\n#     model.compile(optimizer='adam',\n#                   loss='mean_squared_error',\n#                   metrics=['accuracy'])\n\n\n#     num_epochs = 10\n#     batch_size = 32\n\n#     history = model.fit(x=X_train_AE, y=X_train_AE,\n#                         epochs=num_epochs,\n#                         batch_size=batch_size,\n#                         shuffle=True,\n#                         validation_data=(X_train_AE, X_train_AE),\n#                         verbose=1)\n\n\n#     predictions = model.predict(X_test, verbose=1)\n#     anomalyScoresAE = anomalyScores(X_test, predictions)\n#     preds, avgPrecision = plotResults(y_test, anomalyScoresAE, True)\n#     test_scores.append(avgPrecision)\n#     model.reset_states()","0193419c":"# print(\"Mean average precision over 10 runs: \", np.mean(test_scores))\n# print(\"Coefficient of variation over 10 runs: \", np.std(test_scores)\/ \\\n#                                                 np.mean(test_scores))\n# test_scores","7ba6b11d":"model = Sequential()\nmodel.add(Dense(units=40, activation='linear',\\\n                activity_regularizer=regularizers.l1(10e-5),input_dim=31))\nmodel.add(Dropout(0.05))\nmodel.add(Dense(units=31, activation='linear'))\n\nmodel.compile(optimizer='adam',\n              loss='mean_squared_error',\n              metrics=['accuracy'])\n\nnum_epochs = 10\nbatch_size = 32\n\nhistory = model.fit(x=X_train_AE, y=X_train_AE,\n                    epochs=num_epochs,\n                    batch_size=batch_size,\n                    shuffle=True,\n                    validation_data=(X_train_AE, X_train_AE),\n                    verbose=1)\n\n\npredictions = model.predict(X_test, verbose=1)\nanomalyScoresAE = anomalyScores(X_test, predictions)\npreds = plotResults(y_test, anomalyScoresAE, True)\nmodel.reset_states()","778b3f6e":"# # mean of mean precisions (10 times)\n\n# test_scores = []\n# for i in range(0,10):\n#     model = Sequential()\n#     model.add(Dense(units=40, activation='linear',\\\n#                     activity_regularizer=regularizers.l1(10e-5),input_dim=31))\n#     model.add(Dropout(0.05))\n#     model.add(Dense(units=31, activation='linear'))\n#     model.compile(optimizer='adam',\n#                   loss='mean_squared_error',\n#                   metrics=['accuracy'])\n\n\n#     num_epochs = 10\n#     batch_size = 32\n\n#     history = model.fit(x=X_train_AE, y=X_train_AE,\n#                         epochs=num_epochs,\n#                         batch_size=batch_size,\n#                         shuffle=True,\n#                         validation_data=(X_train_AE, X_train_AE),\n#                         verbose=1)\n\n\n#     predictions = model.predict(X_test, verbose=1)\n#     anomalyScoresAE = anomalyScores(X_test, predictions)\n#     preds, avgPrecision = plotResults(y_test, anomalyScoresAE, True)\n#     test_scores.append(avgPrecision)\n#     model.reset_states()","4b004ecf":"# print(\"Mean average precision over 10 runs: \", np.mean(test_scores))\n# print(\"Coefficient of variation over 10 runs: \", np.std(test_scores)\/ \\\n#                                                 np.mean(test_scores))\n# test_scores","5a06be88":"noise_factor = 0.50\nX_train_AE_noisy = X_train_AE.copy() + noise_factor * \\\n np.random.normal(loc=0.0, scale=1.0, size=X_train_AE.shape)\nX_test_AE_noisy = X_test_AE.copy() + noise_factor * \\\n np.random.normal(loc=0.0, scale=1.0, size=X_test_AE.shape) ","2e140620":"\nmodel = Sequential()\nmodel.add(Dense(units=29, activation='linear', input_dim=31))\nmodel.add(Dense(units=31, activation='linear'))\n\n\nmodel.compile(optimizer='adam',\n                      loss='mean_squared_error',\n                      metrics=['accuracy'])\n\nnum_epochs = 10\nbatch_size = 32\n\nhistory = model.fit(x=X_train_AE_noisy, y=X_train_AE_noisy,\n                            epochs=num_epochs,\n                            batch_size=batch_size,\n                            shuffle=True,\n                            validation_data=(X_train_AE, X_train_AE),\n                            verbose=1)\n\npredictions = model.predict(X_test_AE_noisy, verbose=1)\nanomalyScoresAE = anomalyScores(X_test, predictions)\npreds, avgPrecision = plotResults(y_test, anomalyScoresAE, True)\ntest_scores.append(avgPrecision)\nmodel.reset_states()","6a75b7df":"# # mean of mean precisions (10 times)\n\n# test_scores = []\n# for i in range(0,10):\n#     model = Sequential()\n#     model.add(Dense(units=29, activation='linear', input_dim=31))\n#     model.add(Dense(units=31, activation='linear'))\n\n\n#     model.compile(optimizer='adam',\n#                           loss='mean_squared_error',\n#                           metrics=['accuracy'])\n\n\n\n#     num_epochs = 10\n#     batch_size = 32\n\n#     history = model.fit(x=X_train_AE, y=X_train_AE,\n#                         epochs=num_epochs,\n#                         batch_size=batch_size,\n#                         shuffle=True,\n#                         validation_data=(X_train_AE, X_train_AE),\n#                         verbose=1)\n\n\n#     predictions = model.predict(X_test, verbose=1)\n#     anomalyScoresAE = anomalyScores(X_test, predictions)\n#     preds, avgPrecision = plotResults(y_test, anomalyScoresAE, True)\n#     test_scores.append(avgPrecision)\n#     model.reset_states()","5e2381fb":"# print(\"Mean average precision over 10 runs: \", np.mean(test_scores))\n# print(\"Coefficient of variation over 10 runs: \", np.std(test_scores)\/ \\\n#                                                 np.mean(test_scores))\n# test_scores","bb04ec41":"noise_factor = 0.50\nX_train_AE_noisy = X_train_AE.copy() + noise_factor * \\\n np.random.normal(loc=0.0, scale=1.0, size=X_train_AE.shape)\nX_test_AE_noisy = X_test_AE.copy() + noise_factor * \\\n np.random.normal(loc=0.0, scale=1.0, size=X_test_AE.shape) \n\n\nmodel = Sequential()\nmodel.add(Dense(units=40, activation='linear', activity_regularizer=regularizers.l1(10e-5), input_dim=31))\nmodel.add(Dropout(0.05))\nmodel.add(Dense(units=31, activation='linear'))\n\n\nmodel.compile(optimizer='adam',\n                      loss='mean_squared_error',\n                      metrics=['accuracy'])\n\nnum_epochs = 10\nbatch_size = 32\n\nhistory = model.fit(x=X_train_AE_noisy, y=X_train_AE_noisy,\n                            epochs=num_epochs,\n                            batch_size=batch_size,\n                            shuffle=True,\n                            validation_data=(X_train_AE, X_train_AE),\n                            verbose=1)\n\npredictions = model.predict(X_test_AE_noisy, verbose=1)\nanomalyScoresAE = anomalyScores(X_test, predictions)\npreds, avgPrecision = plotResults(y_test, anomalyScoresAE, True)\ntest_scores.append(avgPrecision)\nmodel.reset_states()","1c012b27":"# # mean of mean precisions (10 times)\n\n# test_scores = []\n\n# noise_factor = 0.50\n# X_train_AE_noisy = X_train_AE.copy() + noise_factor * \\\n#  np.random.normal(loc=0.0, scale=1.0, size=X_train_AE.shape)\n# X_test_AE_noisy = X_test_AE.copy() + noise_factor * \\\n#  np.random.normal(loc=0.0, scale=1.0, size=X_test_AE.shape) \n\n# for i in range(0,10):\n#     model = Sequential()\n#     model.add(Dense(units=40, activation='linear', activity_regularizer=regularizers.l1(10e-5), input_dim=31))\n#     model.add(Dropout(0.05))\n#     model.add(Dense(units=31, activation='linear'))\n\n#     model.compile(optimizer='adam',\n#                           loss='mean_squared_error',\n#                           metrics=['accuracy'])\n\n\n\n#     num_epochs = 10\n#     batch_size = 32\n\n#     history = model.fit(x=X_train_AE, y=X_train_AE,\n#                         epochs=num_epochs,\n#                         batch_size=batch_size,\n#                         shuffle=True,\n#                         validation_data=(X_train_AE, X_train_AE),\n#                         verbose=1)\n\n\n#     predictions = model.predict(X_test, verbose=1)\n#     anomalyScoresAE = anomalyScores(X_test, predictions)\n#     preds, avgPrecision = plotResults(y_test, anomalyScoresAE, True)\n#     test_scores.append(avgPrecision)\n#     model.reset_states()","2b2664b9":"# print(\"Mean average precision over 10 runs: \", np.mean(test_scores))\n# print(\"Coefficient of variation over 10 runs: \", np.std(test_scores)\/ \\\n#                                                 np.mean(test_scores))\n# test_scores","23f23370":"noise_factor = 0.50\nX_train_AE_noisy = X_train_AE.copy() + noise_factor * \\\n np.random.normal(loc=0.0, scale=1.0, size=X_train_AE.shape)\nX_test_AE_noisy = X_test_AE.copy() + noise_factor * \\\n np.random.normal(loc=0.0, scale=1.0, size=X_test_AE.shape) \n\n\nmodel = Sequential()\nmodel.add(Dense(units=40, activation='relu', activity_regularizer=regularizers.l1(10e-5), input_dim=31))\nmodel.add(Dropout(0.05))\nmodel.add(Dense(units=31, activation='linear'))\n\n\nmodel.compile(optimizer='adam',\n                      loss='mean_squared_error',\n                      metrics=['accuracy'])\n\nnum_epochs = 10\nbatch_size = 32\n\nhistory = model.fit(x=X_train_AE_noisy, y=X_train_AE_noisy,\n                            epochs=num_epochs,\n                            batch_size=batch_size,\n                            shuffle=True,\n                            validation_data=(X_train_AE, X_train_AE),\n                            verbose=1)\n\npredictions = model.predict(X_test_AE_noisy, verbose=1)\nanomalyScoresAE = anomalyScores(X_test, predictions)\npreds, avgPrecision = plotResults(y_test, anomalyScoresAE, True)\ntest_scores.append(avgPrecision)\nmodel.reset_states()","2876983f":"# # mean of mean precisions (10 times)\n\n# test_scores = []\n\n# noise_factor = 0.50\n# X_train_AE_noisy = X_train_AE.copy() + noise_factor * \\\n#  np.random.normal(loc=0.0, scale=1.0, size=X_train_AE.shape)\n# X_test_AE_noisy = X_test_AE.copy() + noise_factor * \\\n#  np.random.normal(loc=0.0, scale=1.0, size=X_test_AE.shape) \n\n# for i in range(0,10):\n#     model = Sequential()\n#     model.add(Dense(units=40, activation='relu', activity_regularizer=regularizers.l1(10e-5), input_dim=31))\n#     model.add(Dropout(0.05))\n#     model.add(Dense(units=31, activation='linear'))\n\n#     model.compile(optimizer='adam',\n#                           loss='mean_squared_error',\n#                           metrics=['accuracy'])\n\n\n\n#     num_epochs = 10\n#     batch_size = 32\n\n#     history = model.fit(x=X_train_AE, y=X_train_AE,\n#                         epochs=num_epochs,\n#                         batch_size=batch_size,\n#                         shuffle=True,\n#                         validation_data=(X_train_AE, X_train_AE),\n#                         verbose=1)\n\n\n#     predictions = model.predict(X_test, verbose=1)\n#     anomalyScoresAE = anomalyScores(X_test, predictions)\n#     preds, avgPrecision = plotResults(y_test, anomalyScoresAE, True)\n#     test_scores.append(avgPrecision)\n#     model.reset_states()","2c2339a1":"# print(\"Mean average precision over 10 runs: \", np.mean(test_scores))\n# print(\"Coefficient of variation over 10 runs: \", np.std(test_scores)\/ \\\n#                                                 np.mean(test_scores))\n# test_scores","df3b7594":"## 3-4. Sparse OverComplete Auto-Encoder with linear Activation \/ Dropout","3e3dba4b":"## 3-3. Sparse OverComplete Auto-Encoder with linear Activation","a7529466":"## 3-2. OverComplete Auto-Encoder with linear Activation \/ Dropout   ","a43a28b3":"## 4-3. Noise Elimination OverComplete AutoEncoder with non-linear Activation","8f3eadde":"## 2-1. Change number of node Undercomplete Single Layer Auto-encoder ","586230dc":"#### apply methods learned from \"Hands on Unsupervised Learning \" Author - Ankur A. Patel","f42f2809":"## 2-4. linear Activation Undercomplete Auto-encoder \/ Dropout\n","02da5968":"## 2. Undercomplete Single Layer Auto-encoder ","bdb3e3c1":"## 1. First AutoEncoder","423aa3bb":"## 2-2. Add more nodes to Undercomplete Auto-encoder ","f7eb6477":"## 3. OverComplete Auto-Encoder with linear Activation","c81c5f90":"## 4. Noise Dataset","72678f5e":"## 2-3. Non-linear Activation(Relu) Undercomplete Auto-encoder","54632c38":"## 4-2. Noise Elimination OverComplete AutoEncoder","cfb04397":"## 4-1. Noise Elimination UnderComplete AutoEncoder"}}