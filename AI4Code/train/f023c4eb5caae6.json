{"cell_type":{"5f744a1a":"code","bdf7d233":"code","524e89b4":"code","172bce18":"code","aacef781":"code","093677de":"code","bac116cd":"code","d4744a83":"code","b3175747":"markdown","a4cffe23":"markdown","be294dd3":"markdown","ee32007e":"markdown","8ad3bcfe":"markdown","a2703c9b":"markdown","886b7ff9":"markdown","6a4aafbd":"markdown","67fdb633":"markdown","5b2e1c76":"markdown","e8515ac4":"markdown","70edff3a":"markdown"},"source":{"5f744a1a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bdf7d233":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head(7)","524e89b4":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head(3)","172bce18":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)\nwomen.tail(7)","aacef781":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)\nmen.shape\n","093677de":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Sex': test_data.Sex, 'Survived': predictions})\nstdOutput = pd.DataFrame({'PassengerId': test_data.PassengerId,'Survived': predictions})\nstdOutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","bac116cd":"stdOutput.head()","d4744a83":"chkTestWomen = output.loc[test_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(chkTestWomen)\/len(chkTestWomen)\n\nprint(\"% of chkTestWomen who survived:\", rate_women)\nchkTestWomen.tail(7)","b3175747":"Women pattern confirm","a4cffe23":"Test Data Set","be294dd3":"#Type Markdown and LaTeX: \u03b12","ee32007e":"Lets see my predictions\n","8ad3bcfe":"Checking this first ML model prediction with Women Pattern fact. ","a2703c9b":"Predictions looks too optimistic, 94% over 74% from the training dataset. ","886b7ff9":"Men pattern confirm","6a4aafbd":"# Setting up my Titanic Notebook","67fdb633":"Training Data Set","5b2e1c76":"# Explore a pattern","e8515ac4":"# Load the data","70edff3a":"# First ML Model"}}