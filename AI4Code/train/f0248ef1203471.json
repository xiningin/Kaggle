{"cell_type":{"781d037a":"code","2da2dc02":"code","3dc9efc0":"code","637169bd":"code","cbca4c99":"code","5e02a8bd":"code","e4f64a37":"code","6c635900":"code","062db7d0":"code","f168a5ae":"code","15f26e7c":"code","6e732c7d":"code","04e47e2d":"code","1433727a":"code","1674d2a9":"code","e713362f":"code","634829ce":"code","8b5ac52f":"code","d6290b26":"code","0fdbb2ae":"code","0f9aae3f":"code","f00974f5":"code","126ef06b":"code","5045d263":"code","b554d1da":"code","2826102b":"code","0200f888":"code","959357d2":"code","9d0db0e4":"code","ae946190":"code","34cbd477":"code","fe01de0d":"code","2cdc32a4":"code","06830c54":"code","19a35f64":"code","c71dc3fe":"code","d0087bc8":"code","8ed99515":"markdown","0b9b1dbc":"markdown","1f92c856":"markdown","79edea26":"markdown","315982e9":"markdown","321e42c5":"markdown","a4735d5e":"markdown","01368470":"markdown","4131e5a5":"markdown"},"source":{"781d037a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2da2dc02":"!pip install imblearn\n!pip install torch==1.6.0\n!pip install simpletransformers\n!pip install pandas\n!pip install scikit-learn\n!pip install wandb==0.10.8","3dc9efc0":"TRAIN_EPOCHS=4\nTRAIN_METRIC = \"error_rate\"\nTRAIN_BATCH_SIZE = 12","637169bd":"!rm -fR \/kaggle\/working\/cache_dir\n!rm -fR \/kaggle\/working\/wandb\n!rm -fR \/kaggle\/working\/*\n!ls -l \/kaggle\/working\/","cbca4c99":"WANDB_API_KEY = \"36928f7b58810b2b42194a7aba61b31745385b20\"\nWANDB_PROJECT = \"dmoz-classifier\"\nWANDB_ENTITY = \"\"\n# WANDB_USERNAME = \"x0rzkov\"\n# WANDB_NAME\n# WANDB_NOTES\n# WANDB_BASE_URL\n# WANDB_MODE\n# WANDB_TAGS\n# WANDB_DIR\n# WANDB_RESUME\n# WANDB_RUN_ID\n# WANDB_IGNORE_GLOBS\n# WANDB_ERROR_REPORTING\n# WANDB_SHOW_RUN\n# WANDB_DOCKER\n# WANDB_DISABLE_CODE\n# WANDB_ANONYMOUS\n# WANDB_CONFIG_PATHS\n# WANDB_CONFIG_DIR\n# WANDB_NOTEBOOK_NAME\n# WANDB_HOST\n# WANDB_SILENT\n\nos.environ[\"WANDB_API_KEY\"] = WANDB_API_KEY\nprint(f\"os.environ.get('WANDB_API_KEY',WANDB_API_KEY) == '{os.environ.get('WANDB_API_KEY', WANDB_API_KEY)}'\")\n\nos.environ[\"WANDB_PROJECT\"] = WANDB_PROJECT\nprint(f\"os.environ.get('WANDB_PROJECT',WANDB_PROJECT) == '{os.environ.get('WANDB_PROJECT', WANDB_PROJECT)}'\")\n\nos.environ[\"WANDB_ENTITY\"] = WANDB_ENTITY\nprint(f\"os.environ.get('WANDB_ENTITY',WANDB_ENTITY) == '{os.environ.get('WANDB_ENTITY', WANDB_ENTITY)}'\")\n\n# os.environ[\"WANDB_USERNAME\"] = WANDB_USERNAME\n# print(f\"os.environ.get('WANDB_USERNAME',WANDB_USERNAME) == '{os.environ.get('WANDB_USERNAME', WANDB_USERNAME)}'\")","5e02a8bd":"!pip uninstall -y wandb==0.10.10\n!pip install wandb==0.10.8","e4f64a37":"import wandb\nfrom datetime import date\n\nprint(\"wandb version:\", wandb.__version__)\n\nwandb.init(project=WANDB_PROJECT)\nwandb.config.allow_val_change=True\nwandb_run = wandb.init(job_type='train')\nwandb.config.epochs = TRAIN_EPOCHS\nwandb.config.batch_size = TRAIN_BATCH_SIZE\nwandb.config.entity = WANDB_ENTITY\nwandb.config.save_code = True\nwandb.config.name = date.today()","6c635900":"import os\nfrom pathlib import Path\n\nfrom simpletransformers.classification import ClassificationModel\n\nimport torch\nimport pandas as pd\n\nimport imblearn\nfrom imblearn.over_sampling import RandomOverSampler, SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\n\nimport sklearn\nfrom sklearn.model_selection import train_test_split","062db7d0":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint('Using device:', device)\nprint()\n\n#Additional Info when using cuda\nif device.type == 'cuda':\n    print(torch.cuda.get_device_name(0))\n    print('Memory Usage:')\n    print('Allocated:', round(torch.cuda.memory_allocated(0)\/1024**3,1), 'GB')\n    print('Cached:   ', round(torch.cuda.memory_reserved(0)\/1024**3,1), 'GB')","f168a5ae":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\n\ndef import_data(file):\n    \"\"\"create a dataframe and optimize its memory usage\"\"\"\n    df = pd.read_csv(file, parse_dates=True, keep_date_col=True, sep='\\t', low_memory=False)\n    df = reduce_mem_usage(df)\n    return df","15f26e7c":"DATA_ROOT=Path('\/kaggle\/input\/dmoz-dataset-11-classes')\nDATASET_TSV_FILENAME=\"dmoz_full_toplevel_imbalanced-v2.tsv\"\nDATASET_TSV_PATH=DATA_ROOT \/ DATASET_TSV_FILENAME\n\ndf = pd.read_csv(DATASET_TSV_PATH, sep='\\t', low_memory=False)\n# df = import_data(DATASET_TSV_PATH)\ndf = df.drop(columns=[\"externalpage\"])\ndf = df.drop(columns=[\"externalpage_md5\"])\ndf = df.drop(columns=[\"ages\"])\ndf = df.drop(columns=[\"mediadate\"])\ndf = df.drop(columns=[\"priority\"])\ndf = df.drop(columns=[\"resource\"])\ndf = df.drop(columns=[\"resource_md5\"])\ndf = df.drop(columns=[\"language\"])\ndf = df.drop(columns=[\"language_script\"])\ndf = df.drop(columns=[\"language_confidence\"])\ndf = df.drop(columns=[\"type\"])\ndf = df.drop(columns=[\"catid\"])\ndf = df.drop(columns=[\"topic\"])\ndf = df.drop(columns=[\"topic_parent\"])\ndf = df.drop(columns=[\"topic_main\"])\n\ndf = df[df['language_iso6391']=='en']\nprint('filtering only english description:')\nprint(df.shape)\ndf = df.drop(columns=[\"language_iso6391\"])\n\ndf[\"text\"] = df[\"title\"].astype(str) + ' ' + df[\"description\"].astype(str)\n\ndf = df.drop(columns=[\"title\"])\ndf = df.drop(columns=[\"description\"])\n\ndf = df.rename(columns={'main_topic_id': 'labels'})\n\ntry:\n  df.drop(['Unnamed: 0'], axis=1, inplace=True)\nexcept:\n  pass","6e732c7d":"y = df['labels']\nX = df\n\n# X = df.drop('topic_main', axis=1)\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=1) # 0.25 x 0.8 = 0.2","04e47e2d":"print(\"\\nX_train:\\n\")\nprint(\"\\nX_train.head():\\n\")\nprint(X_train.head())\nprint(\"\\nX_train.shape:\\n\")\nprint(X_train.shape)\nr, c = X_train.shape\nprint('rows:', r)\nprint('cols:', c)","1433727a":"print(\"\\nX_test:\\n\")\nprint(\"\\nX_test.head():\\n\")\nprint(X_test.head())\nprint(\"\\nX_test.shape:\\n\")\nprint(X_test.shape)\nr, c = X_test.shape\nprint('rows:', r)\nprint('cols:', c)","1674d2a9":"print(\"\\nX_val:\\n\")\nprint(\"\\nX_val.head():\\n\")\nprint(X_val.head())\nprint(\"\\nX_val.shape:\\n\")\nprint(X_val.shape)\nr, c = X_val.shape\nprint('rows:', r)\nprint('cols:', c)","e713362f":"print(\"\\nbefore oversampling:\\n\")\nprint(pd.Series(y_train).value_counts()\/len(y_train))","634829ce":"from collections import Counter\nros = RandomOverSampler()\nrus = RandomUnderSampler()\n# sm = SMOTE(random_state=42)\nX_ros, y_ros = rus.fit_sample(X_train, y_train)","8b5ac52f":"after downsampling","d6290b26":"print('Resampled dataset shape %s' % Counter(y_ros))","0fdbb2ae":"print(\"\\nX_ros:\\n\")\nprint(\"\\nX_ros.head():\\n\")\nprint(X_ros.head())\nprint(\"\\nX_ros.shape:\\n\")\nprint(X_ros.shape)\nr, c = X_ros.shape\nprint('rows:', r)\nprint('cols:', c)","0f9aae3f":"print(\"\\ny_ros:\\n\")\nprint(\"\\ny_ros.head():\\n\")\nprint(y_ros.head())\nprint(\"\\ny_ros.shape:\\n\")\nprint(y_ros.shape)\nr, c = y_ros.shape\nprint('rows:', r)\nprint('cols:', c)","f00974f5":"print(\"\\nafter oversampling:\\n\")\nprint(pd.Series(y_ros).value_counts()\/len(y_ros))","126ef06b":"train=X_ros # pd.concat([X_ros,pd.get_dummies(X_resampled['labels'])],axis=1)\n#train.dropna(how='all')\ntrain.dropna(subset=[\"text\"], inplace=True)\ntrain.fillna(0)\nprint(\"\\ntrain.sample:\\n\")\nprint(train.sample(5))\nr, c = train.shape\nprint('rows:', r)\nprint('cols:', c)","5045d263":"print(\"\\ntest.sample:\\n\")\ntest=X_test # pd.concat([X_test,pd.get_dummies(X_test['labels'])],axis=1)\ntest.dropna(subset=[\"text\"], inplace=True)\ntest.fillna(0)\nprint(test.sample(5))\nr, c = test.shape\nprint('rows:', r)\nprint('cols:', c)","b554d1da":"print(\"\\nval.sample:\\n\")\nval=X_val # pd.concat([X_val,pd.get_dummies(X_val['labels'])],axis=1)\nval.dropna(subset=[\"text\"], inplace=True)\nval.fillna(0)\nprint(val.sample(5))\nr, c = val.shape\nprint('rows:', r)\nprint('cols:', c)","2826102b":"del df","0200f888":"num_labels=len(y_ros.sort_values().unique().tolist())","959357d2":"from simpletransformers.classification import ClassificationArgs\n\nmodel_args = ClassificationArgs()\nmodel_args.use_early_stopping = True\nmodel_args.early_stopping_delta = 0.01\nmodel_args.early_stopping_metric = \"mcc\"\nmodel_args.early_stopping_metric_minimize = False\nmodel_args.early_stopping_patience = 5\nmodel_args.save_steps = 10000\nmodel_args.save_optimizer_and_scheduler = False\nmodel_args.save_eval_checkpoints = False\nmodel_args.evaluate_during_training_steps = 8000\nmodel_args.reprocess_input_data = True\nmodel_args.overwrite_output_dir = True\nmodel_args.n_gpu = 1\nmodel_args.train_batch_size = 2\nmodel_args.num_train_epochs = 4\nmodel_args.use_multiprocessing = False\nmodel_args.no_cache = False","9d0db0e4":"import gc\ngc.collect()","ae946190":"model = ClassificationModel(\n    \"bert\", \"bert-large-uncased\", num_labels=num_labels, args=model_args, use_cuda=True\n)","34cbd477":"model.train_model(train, output_dir=\"\/kaggle\/working\/\", acc=sklearn.metrics.accuracy_score)","fe01de0d":"result, model_outputs, wrong_predictions = model.eval_model(val, acc=sklearn.metrics.accuracy_score)","2cdc32a4":"print(\"result\", result)\nprint(\"model_outputs\", model_outputs)\nprint(\"wrong_predictions\", wrong_predictions)","06830c54":"categories = ['Arts', 'Business', 'Computers', 'Games', 'Health', 'Home', 'News', 'Recreation', 'Reference', 'Science', 'Shopping', 'Society', 'Sports']","19a35f64":"text = '''\nThis framework provides an easy method to compute dense vector representations for sentences and paragraphs (also known as sentence embeddings). The models are based on transformer networks like BERT \/ RoBERTa \/ XLM-RoBERTa etc. and are tuned specificially meaningul sentence embeddings such that sentences with similar meanings are close in vector space.\n'''\n# Eedama is a social enterprise that was formed as an independent training and consultancy agency to support companies, schools, universities and communities in their sustainability initiatives. Eedama was born from an environmental and green sensibility shared by scientists, engineers, teachers and parents with a common perception: talking about the environment is no longer enough, the time has come for true understanding and action.'\nprint('text:', text)","c71dc3fe":"predictions, raw_outputs = model.predict([text])","d0087bc8":"print('predictions', categories[int(predictions)])","8ed99515":"### Set input text","0b9b1dbc":"### Run prediction on model","1f92c856":"> # Train the model","79edea26":"# after oversampling","315982e9":"# before oversampling","321e42c5":"# Predict class","a4735d5e":"# Evaluate the model","01368470":"### Set list of classes","4131e5a5":"# Create a ClassificationModel"}}