{"cell_type":{"883d4db2":"code","9f5fe584":"code","71a7f976":"code","ae4f7b59":"code","7a4b7216":"code","bf231abb":"code","0a98887c":"code","5f6d51e0":"code","a83c63ba":"code","6b9f3afe":"code","161194fd":"code","d41da3cb":"code","bb85d944":"code","2d05c1b8":"code","903f617f":"code","402dfbb9":"code","2a3b3fc1":"code","5ca1f24e":"code","9eba9751":"code","50c6d28a":"code","ffc086e0":"code","08472a36":"code","1fbd569e":"code","0856ec0c":"code","ecaf429f":"code","b1a397e3":"code","b058c12f":"code","004d648c":"code","c438b506":"code","1bea58b8":"code","96bbc07f":"code","eb510c9a":"code","0b16b124":"code","c4d51cec":"code","d56f0f87":"code","80cc2e05":"code","dfe15b1d":"code","d08ea709":"code","be38db7a":"code","57f15634":"code","4eb4cf1a":"code","0838ec68":"code","9b90eade":"code","cbaacf40":"code","45c08d85":"code","8d0462c3":"code","8f99c40e":"code","ed59a25d":"code","6f07f69e":"code","94423c8d":"code","38f5f4d8":"code","31b3ff83":"code","1311b8bb":"code","bad9259f":"code","a2009513":"code","c617a888":"code","8f7cae44":"code","2e8ce3e8":"code","229fef28":"code","7554dbde":"code","70e118af":"code","f6752786":"code","3980bcce":"code","3c9ac617":"code","26c1f926":"code","073fc59a":"code","69406c42":"code","9b03d743":"code","6c8d102f":"code","f6d0d2be":"code","37cd452f":"code","15841ca8":"code","ac9dd352":"code","5521a5cb":"code","9d3fa8ac":"code","983dccda":"code","a366541d":"code","76c5eec1":"code","18c4f50d":"code","18953959":"code","3787577d":"code","cbb1623a":"code","0d3202e4":"markdown","3ea5b936":"markdown","e9fdcf0a":"markdown","2121f341":"markdown","2bdc90a6":"markdown","0dcf82ef":"markdown","789b69d1":"markdown","136002da":"markdown","5d1f3b3d":"markdown","6e845fc8":"markdown","8a0dbcc3":"markdown","03a86fc4":"markdown","d52481b6":"markdown","93d3eb33":"markdown","6ebbbad0":"markdown","87ef26c3":"markdown","aabc34d5":"markdown","3ad8c720":"markdown","5317aff9":"markdown","8297f59f":"markdown","d405569f":"markdown","34f7b48c":"markdown","7c20f04a":"markdown","4a51ccbf":"markdown","d385d4d7":"markdown","9e3674b4":"markdown","23778347":"markdown","5a333d9c":"markdown","e06d89a5":"markdown","9cb517c2":"markdown","24cf687e":"markdown","5ace5d60":"markdown","55baed77":"markdown","b7f043ed":"markdown","edf0e229":"markdown","659d150e":"markdown","0db84df4":"markdown","bcba4bdb":"markdown","c3531abf":"markdown","66815458":"markdown","a57768ec":"markdown","81c30735":"markdown","3f482974":"markdown","d53a0913":"markdown","23da04f6":"markdown","fe397cf6":"markdown","fcd663d7":"markdown","c32ca40f":"markdown","380d9cbc":"markdown","8c68df1a":"markdown","6d1c9d9a":"markdown","670bea1b":"markdown","aeb6ad9b":"markdown","578b58f6":"markdown","04655682":"markdown","383ee3a9":"markdown","b3c062fc":"markdown","2c0ab350":"markdown","183e93d1":"markdown","fdc33e68":"markdown","c6368d8a":"markdown","99f36830":"markdown","4b1b414e":"markdown"},"source":{"883d4db2":"import pandas as pd\npd.set_option('display.max_column',None)\npd.set_option('display.max_rows',None)\npd.set_option('display.max_seq_items',None)\npd.set_option('display.max_colwidth', 500)\npd.set_option('expand_frame_repr', True)\nimport numpy as np\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport statsmodels.api as sm  \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom random import sample\nimport sklearn\nfrom numpy.random import uniform\nfrom math import isnan\n\nfrom sklearn import metrics\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.metrics import r2_score,mean_squared_error\nfrom sklearn.model_selection import KFold, cross_val_score\n\nfrom scipy.special import boxcox1p, inv_boxcox1p\nfrom scipy.stats import skew,norm","9f5fe584":"def countOutlier(df_in, col_name):\n    if df_in[col_name].nunique() > 2:\n        orglength = len(df_in[col_name])\n        q1 = df_in[col_name].quantile(0.00)\n        q3 = df_in[col_name].quantile(0.95)\n        iqr = q3-q1 #Interquartile range \n        fence_low  = q1-1.5*iqr \n        fence_high = q3+1.5*iqr \n        df_out = df_in.loc[(df_in[col_name] > fence_low) & (df_in[col_name] < fence_high)]\n        newlength = len(df_out[col_name])\n        return round(100 - (newlength*100\/orglength),2)  \n    else:\n        return 0\n\ndef drop_columns(dataframe, axis =1, percent=0.3):\n    '''\n    * drop_columns function will remove the rows and columns based on parameters provided.\n    * dataframe : Name of the dataframe  \n    * axis      : axis = 0 defines drop rows, axis =1(default) defines drop columns    \n    * percent   : percent of data where column\/rows values are null,default is 0.3(30%)\n    '''\n    df = dataframe.copy()\n    ishape = df.shape\n    if axis == 0:\n        rownames = df.transpose().isnull().sum()\n        rownames = list(rownames[rownames.values > percent*len(df)].index)\n        df.drop(df.index[rownames],inplace=True) \n        print(\"\\nNumber of Rows dropped\\t: \",len(rownames))\n    else:\n        colnames = (df.isnull().sum()\/len(df))\n        colnames = list(colnames[colnames.values>=percent].index)\n        df.drop(labels = colnames,axis =1,inplace=True)        \n        print(\"Number of Columns dropped\\t: \",len(colnames))\n        \n    print(\"\\nOld dataset rows,columns\",ishape,\"\\nNew dataset rows,columns\",df.shape)\n\n    return df\n\ndef rmse_cv(model, X, y, kfolds):\n    rmse = np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=kfolds))\n    return (rmse) ","71a7f976":"df_org=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_org=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","ae4f7b59":"df=df_org.loc[:, df_org.columns != 'Id']\ntest=test_org.loc[:, test_org.columns != 'Id']","7a4b7216":"df.head()","bf231abb":"test.head()","0a98887c":"df.shape","5f6d51e0":"test.shape","a83c63ba":"df.info()","6b9f3afe":"df.describe()","161194fd":"df.dtypes.value_counts()","d41da3cb":"df.select_dtypes('object').apply(pd.Series.nunique, axis = 0)","bb85d944":"df.select_dtypes('int64').apply(pd.Series.nunique, axis = 0)","2d05c1b8":"df.select_dtypes('float64').apply(pd.Series.nunique, axis = 0)","903f617f":"#Checking null values in each cols.\n(df.isnull().sum()*100\/df.shape[0]).sort_values(ascending=False)","402dfbb9":"#Checking null values in each cols.\n(test.isnull().sum()*100\/test.shape[0]).sort_values(ascending=False)","2a3b3fc1":"# Plotting null values for first 20 columns\nisna_train = df.isnull().sum().sort_values(ascending=False)\nisna_train[:20].plot(kind='bar')","5ca1f24e":"df = drop_columns(df, axis =1, percent=0.4)\ntest = drop_columns(test, axis =1, percent=0.4)","9eba9751":"#Checking null values in each cols and printing top 15 only\nmissing_pc = (df.isnull().sum()*100\/df.shape[0]).sort_values(ascending=False)[:15]\nmissing_pc","50c6d28a":"#Finding the columns whether they are categorical or numerical\ncols = df[missing_pc.index[:15]].columns\nnum = df[missing_pc.index[:15]]._get_numeric_data().columns\nnum_cols = list(num)\nprint(\"Numerical Columns\",num_cols)\ncat_cols=list(set(cols) - set(num))\nprint(\"Categorical Columns:\",cat_cols)","ffc086e0":"#Checking null values in each cols and printing top 15 only\nmissing_pc = (test.isnull().sum()*100\/test.shape[0]).sort_values(ascending=False)[:30]\nmissing_pc","08472a36":"#Finding the columns whether they are categorical or numerical\ncols = df[missing_pc.index[:30]].columns\nnum = df[missing_pc.index[:30]]._get_numeric_data().columns\nnum_cols_test = list(num)\nprint(\"Numerical Columns\",num_cols_test)\ncat_cols_test=list(set(cols) - set(num))\nprint(\"Categorical Columns:\",cat_cols_test)","1fbd569e":"i = 1\nplt.figure(figsize=[15,15])\nfor cols in num_cols:\n    plt.subplot(3,3,i)\n    sns.distplot(df[cols].dropna().values)\n    i = i + 1\nplt.suptitle(\"Distribution of Data for Numeric Columns\")\nplt.show()","0856ec0c":"# Looking at mean value\ndf.groupby('Neighborhood')['LotFrontage'].mean()","ecaf429f":"# Looking at median values\ndf.groupby('Neighborhood')['GarageYrBlt','MasVnrArea'].median()","b1a397e3":"# Imputing missing values\ndf['LotFrontage']=df.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\ndf['GarageYrBlt']=df.groupby('Neighborhood')['GarageYrBlt'].transform(lambda x: x.fillna(x.median()))\ndf['MasVnrArea']=df.groupby('Neighborhood')['MasVnrArea'].transform(lambda x: x.fillna(x.median()))\n\n\ntest['LotFrontage']=test.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\ntest['GarageYrBlt']=test.groupby('Neighborhood')['GarageYrBlt'].transform(lambda x: x.fillna(x.median()))\ntest['MasVnrArea']=test.groupby('Neighborhood')['MasVnrArea'].transform(lambda x: x.fillna(x.median()))\ntest['BsmtHalfBath']=test.groupby('Neighborhood')['BsmtHalfBath'].transform(lambda x: x.fillna(x.median()))\ntest['BsmtFullBath']=test.groupby('Neighborhood')['BsmtFullBath'].transform(lambda x: x.fillna(x.median()))\ntest['TotalBsmtSF']=test.groupby('Neighborhood')['TotalBsmtSF'].transform(lambda x: x.fillna(x.median()))\ntest['GarageCars']=test.groupby('Neighborhood')['GarageCars'].transform(lambda x: x.fillna(x.median()))\ntest['BsmtUnfSF']=test.groupby('Neighborhood')['BsmtUnfSF'].transform(lambda x: x.fillna(x.median()))\ntest['GarageArea']=test.groupby('Neighborhood')['GarageArea'].transform(lambda x: x.fillna(x.median()))\ntest['BsmtFinSF2']=test.groupby('Neighborhood')['BsmtFinSF2'].transform(lambda x: x.fillna(x.median()))\ntest['BsmtFinSF1']=test.groupby('Neighborhood')['BsmtFinSF1'].transform(lambda x: x.fillna(x.median()))","b058c12f":"# Plotting again after imputing missing values\ni = 1\nplt.figure(figsize=[15,15])\nfor cols in num_cols:\n    plt.subplot(3,3,i)\n    sns.distplot(df[cols].dropna().values)\n    i = i + 1\nplt.suptitle(\"Distribution of Data for Numeric Columns after filling NA Values\")\nplt.show()","004d648c":"i = 1\nplt.figure(figsize=[15,15])\nfor cols in cat_cols:\n    plt.subplot(4,3,i)\n    sns.countplot(cols,data=df)\n    i = i + 1\nplt.suptitle(\"Distribution of Data for Categorical Columns\")\nplt.show()","c438b506":"plt.figure(figsize=(20, 12))\nsns.countplot('GarageCond', hue = 'Neighborhood', data = df)\nplt.show()","1bea58b8":"plt.figure(figsize=(20, 12))\nsns.countplot('BsmtExposure', hue = 'Neighborhood', data = df)\nplt.show()","96bbc07f":"plt.figure(figsize=(20, 12))\nsns.countplot('BsmtFinType1', hue = 'Neighborhood', data = df)\nplt.show()\n","eb510c9a":"plt.figure(figsize=(20, 12))\nsns.countplot('BsmtCond', hue = 'Neighborhood', data = df)\nplt.show()","0b16b124":"for column in cat_cols:\n    df[column]=df.groupby('Neighborhood')[column].fillna(df[column].mode()[0])\n    test[column]=test.groupby('Neighborhood')[column].fillna(test[column].mode()[0])","c4d51cec":"# Plotting agaain after filling null values\ni = 1\nplt.figure(figsize=[15,15])\nfor cols in cat_cols:\n    plt.subplot(4,3,i)\n    sns.countplot(cols,data=df)\n    i = i + 1\nplt.suptitle(\"Distribution of Data for Categorical Columns after filling NA Values\")\nplt.show()","d56f0f87":"#Checking null values in each cols.\n(df.isnull().sum()*100\/df.shape[0]).sort_values(ascending=False)","80cc2e05":"# filling null with 0 in tests\ncategorical_V2 = []\nfor i in test.columns:\n    if test[i].dtype == object:\n        categorical_V2.append(i)\ntest.update(test[categorical_V2].fillna('None'))\n\nQuantitative = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nQuantitative_V2 = []\nfor i in test.columns:\n    if test[i].dtype in Quantitative:\n        Quantitative_V2.append(i)\ntest.update(test[Quantitative_V2].fillna(0))","dfe15b1d":"#Checking null values in each cols.\n(test.isnull().sum()*100\/test.shape[0]).sort_values(ascending=False)","d08ea709":"#Checking duplicate row\ndf.loc[df.duplicated()]","be38db7a":"#Checking duplicate row\ntest.loc[test.duplicated()]","57f15634":"numerical = df.select_dtypes(include=[np.number]).columns.tolist()\nfor col in numerical:\n    print(col,\"=\",countOutlier(df,col))","4eb4cf1a":"for i in range(0, len(df.columns), 5):\n    sns.pairplot(data=df,\n                x_vars=df.columns[i:i+5],\n                y_vars=['SalePrice'])","0838ec68":"df.shape","9b90eade":"test.shape","cbaacf40":"plt.figure(figsize=(20,5))\nsns.distplot(df.SalePrice)\nplt.title(\"Target distribution - Sales Price\")\nplt.ylabel(\"Density\");","45c08d85":"df['SalePrice'].skew()","8d0462c3":"num_cols = df._get_numeric_data().columns\nprint(\"Numerical Columns\",num_cols)\ncat_cols=list(set(df.columns) - set(num_cols))\nprint(\"Categorical Columns:\",cat_cols)","8f99c40e":"plt.figure(figsize=(20,5))\ndf.hist(figsize=(16, 20), bins=30, xlabelsize=8, ylabelsize=8)\nplt.show()","ed59a25d":"dfg=df.groupby(['Neighborhood','YearBuilt'])['SalePrice']\ndfg=dfg.describe()['mean'].to_frame()\ndfg=dfg.reset_index(level=[0,1])\ndfg=dfg.groupby('Neighborhood')\ndfg","6f07f69e":"dfg_index=df['Neighborhood'].unique()\nfig = plt.figure(figsize=(20,30))\nfig.suptitle('Yearwise Trend of each Neighborhood')\nfor num in range(1,25):\n    temp=dfg.get_group(dfg_index[num])\n    ax = fig.add_subplot(8,3,num)\n    ax.plot(temp['YearBuilt'], temp['mean'])\n    ax.set_title(temp['Neighborhood'].unique())\n    ","94423c8d":"cat_c = ['SaleType','SaleCondition','MSSubClass','MSZoning','OverallQual','OverallCond']\ni = 1\nplt.figure(figsize=(20, 10))\nfor cols in cat_c:\n    plt.subplot(2,3,i)\n    sns.boxplot(x = cols, y = 'SalePrice', data = df)\n    i = i + 1\nplt.suptitle(\"Distribution of Sales Data for Categorical Columns\")\nplt.show()","38f5f4d8":"cat_c = ['Condition1','Condition2','LandContour','LotConfig','LotShape','HouseStyle','Foundation','Street','LandContour'\n        ,'LandSlope','BldgType','Functional']\ni = 1\nplt.figure(figsize=(20, 15))\nfor cols in cat_c:\n    plt.subplot(4,3,i)\n    sns.boxplot(x = cols, y = 'SalePrice', data = df)\n    i = i + 1\nplt.suptitle(\"Distribution of House Data for Categorical Columns\")\nplt.show()","31b3ff83":"cat_c = ['Exterior1st','Exterior2nd','ExterQual','ExterCond']\ni = 1\nplt.figure(figsize=(20, 10))\nfor cols in cat_c:\n    plt.subplot(2,2,i)\n    sns.boxplot(x = cols, y = 'SalePrice', data = df)\n    plt.xticks(rotation=30)\n    i = i + 1\nplt.suptitle(\"Distribution of House Exterior Data for Categorical Columns\")\nplt.show()","1311b8bb":"cat_c = ['RoofStyle','RoofMatl']\ni = 1\nplt.figure(figsize=(20, 5))\nfor cols in cat_c:\n    plt.subplot(1,2,i)\n    sns.boxplot(x = cols, y = 'SalePrice', data = df)\n    i = i + 1\nplt.suptitle(\"Distribution of House Roof Data for Categorical Columns\")\nplt.show()","bad9259f":"cat_c = ['KitchenQual','Utilities','Electrical','CentralAir']\ni = 1\nplt.figure(figsize=(20, 10))\nfor cols in cat_c:\n    plt.subplot(2,2,i)\n    sns.boxplot(x = cols, y = 'SalePrice', data = df)\n    i = i + 1\nplt.suptitle(\"Distribution of House Features Data for Categorical Columns\")\nplt.show()","a2009513":"cat_c = ['GarageCond','GarageQual','GarageType','GarageFinish','PavedDrive']\ni = 1\nplt.figure(figsize=(20, 10))\nfor cols in cat_c:\n    plt.subplot(2,3,i)\n    sns.boxplot(x = cols, y = 'SalePrice', data = df)\n    i = i + 1\nplt.suptitle(\"Distribution of House Garage Data for Categorical Columns\")\nplt.show()","c617a888":"cat_c = ['BsmtCond','BsmtQual','BsmtFinType2']\n\ni = 1\nplt.figure(figsize=(20, 15))\nfor cols in cat_c:\n    plt.subplot(3,3,i)\n    sns.boxplot(x = cols, y = 'SalePrice', data = df)\n    i = i + 1\nplt.suptitle(\"Distribution of House Basement Data for Categorical Columns\")\nplt.show()","8f7cae44":"cat_c = ['Heating','HeatingQC']\n\ni = 1\nplt.figure(figsize=(20, 5))\nfor cols in cat_c:\n    plt.subplot(1,2,i)\n    sns.boxplot(x = cols, y = 'SalePrice', data = df)\n    i = i + 1\nplt.suptitle(\"Distribution of House Heating Data for Categorical Columns\")\nplt.show()","2e8ce3e8":"df['AgeOfHome'] = df['YrSold'] - df['YearBuilt']\ndf['TotalSF'] = df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF'] \ndf['TotalPorchArea'] = df['WoodDeckSF'] + df['OpenPorchSF'] + df['EnclosedPorch'] + df['3SsnPorch'] + df['ScreenPorch'] \ndf['TotalBathrooms'] = (df['FullBath'] + (0.5 * df['HalfBath']) +df['BsmtFullBath'] + (0.5 * df['BsmtHalfBath']))","229fef28":"test['AgeOfHome'] = test['YrSold'] - test['YearBuilt']\ntest['TotalSF'] = test['TotalBsmtSF'] + test['1stFlrSF'] + test['2ndFlrSF'] \ntest['TotalPorchArea'] = test['WoodDeckSF'] + test['OpenPorchSF'] + test['EnclosedPorch'] + test['3SsnPorch'] + test['ScreenPorch'] \ntest['TotalBathrooms'] = (test['FullBath'] + (0.5 * test['HalfBath']) +test['BsmtFullBath'] + (0.5 * test['BsmtHalfBath']))","7554dbde":"# basically string variable represented as numeric in data so converting in string\ndf['MSSubClass']= df['MSSubClass'].apply(str)\ndf['OverallCond'] =df['OverallCond'].astype(str)\n\ntest['MSSubClass']= test['MSSubClass'].apply(str)\ntest['OverallCond'] =test['OverallCond'].astype(str)","70e118af":"cat_c = ['AgeOfHome','TotalSF','TotalPorchArea','TotalBathrooms']\ni = 1\nplt.figure(figsize=(20, 20))\nfor cols in cat_c:\n    plt.subplot(2,2,i)\n    plt.scatter(x = 'SalePrice', y = cols, c='SalePrice', data=df)\n    plt.xlabel(\"Sale Price\")\n    plt.ylabel(cols)\n    cbar= plt.colorbar()\n    cbar.set_label(\"elevation (m)\", labelpad=+1)\n    i = i + 1\nplt.suptitle(\"Distribution of Feature Data Vs Sale Price\")\nplt.show()","f6752786":"newdf=df.loc[:, df.columns != 'SalePrice']\nfig,ax = plt.subplots(figsize=(10,10))\nsns.heatmap(newdf.corr(),ax=ax,annot= False,linewidth= 0.02,linecolor='black',fmt='.2f',cmap = 'Blues_r')\nplt.show()","3980bcce":"# Create correlation matrix\ncorr_matrix = newdf.corr().abs()\n\n# Select upper triangle of correlation matrix\nupper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n\n# Find index of feature columns with correlation greater than 0.95\nto_drop = [column for column in upper.columns if any(upper[column] > 0.7) | any(upper[column] < -0.7)]\nto_drop","3c9ac617":"fig,ax = plt.subplots(figsize=(10,10))\nresult_corr=newdf.corr(method='pearson')\nsns.heatmap(result_corr[(result_corr >= 0.7) | (result_corr <= -0.7)],ax=ax,annot= False,linewidth= 0.02,linecolor='black',fmt='.2f',cmap = 'Blues_r')\nplt.show()","26c1f926":"# dropping these two columns as we derived quality percentage and age of homw\ndf.drop(['YearBuilt','YrSold','MoSold','OverallCond','GarageYrBlt','Utilities','YearRemodAdd'], axis=1, inplace=True)\n# dropping these two columns as we derived quality percentage and age of homw\ntest.drop(['YearBuilt','YrSold','MoSold','OverallCond','GarageYrBlt','Utilities','YearRemodAdd'], axis=1, inplace=True)","073fc59a":"#price correlation with features\ncorr=df.corr()\ncorr=corr.sort_values(by=[\"SalePrice\"],ascending=False).iloc[0].sort_values(ascending=False)\nplt.figure(figsize=(15,20))\nsns.barplot(x=corr.values, y=corr.index.values);\nplt.title(\"Correlation Plot\")","69406c42":"# Create correlation matrix\nprint(corr.values)\nprint(corr.index.values)","9b03d743":"#log transform skewed numeric features \nnumeric_features = df.dtypes[df.dtypes != \"object\"].index\n\nskewed_features = df[numeric_features].apply(lambda x : skew (x.dropna())).sort_values(ascending=False)\n#compute skewness\nprint (\"skew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_features})   \nskewness","6c8d102f":"#handling skewnees\nskewness = skewness[abs(skewness) > 0.75]\nprint (\"There are {} skewed numerical features to box cox transform\".format(skewness.shape[0]))\nskewed_features = skewness.index\nlam = 0.1\nfor feat in skewed_features:\n    df[feat] = boxcox1p(df[feat], lam)","f6d0d2be":"#log transform skewed numeric features \nnumeric_features = test.dtypes[test.dtypes != \"object\"].index\n\nskewed_features = test[numeric_features].apply(lambda x : skew (x.dropna())).sort_values(ascending=False)\n#compute skewness\nprint (\"skew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_features})   \nskewness","37cd452f":"#handling skewnees\nskewness = skewness[abs(skewness) > 0.75]\nprint (\"There are {} skewed numerical features to box cox transform\".format(skewness.shape[0]))\nskewed_features = skewness.index\nlam = 0.1\nfor feat in skewed_features:\n    test[feat] = boxcox1p(test[feat], lam)","15841ca8":"test.shape","ac9dd352":"df.shape","5521a5cb":"print(df.isnull().values.any())\nprint(test.isnull().values.any())","9d3fa8ac":"# Perform One-Hot Encoding on concatenated Dataframe\ntemp = pd.get_dummies(pd.concat([df,test],keys=[0,1]))\n\n# Split concatenated dataframe back into train and test dataframes\ntrain,test = temp.xs(0),temp.xs(1)\n\ntest.drop([\"SalePrice\"], axis = 1, inplace = True)","983dccda":"X, y = train.loc[:, train.columns != 'SalePrice'], train[[\"SalePrice\"]]","a366541d":"kfolds = KFold(n_splits= 20, shuffle=True, random_state=42) \n\nlasso = make_pipeline(RobustScaler(), \n                      LassoCV(max_iter=1e7, \n                              random_state=42, cv=kfolds))","76c5eec1":"score = rmse_cv(lasso,X,y,kfolds)\nprint(\"Lasso RMSE:  \", score.mean())","18c4f50d":"lasso_model = lasso.fit(X, y)","18953959":"lr_train_score=lasso.score(X,y)\nprint('Lasso training score: ', lr_train_score)","3787577d":"predicted_prices = lasso.predict(test)\nprint(inv_boxcox1p(predicted_prices, lam))","cbb1623a":"my_submission = pd.DataFrame({'Id': test_org.Id, 'SalePrice': inv_boxcox1p(predicted_prices, lam)})\nmy_submission.to_csv('House_Lasso.csv', index=False)","0d3202e4":"### 3.2 Plotting all columns with respect to SalePrice to see Outliers","3ea5b936":"### 2.9 Verifying null values again after NA fill","e9fdcf0a":"### 3.4 After removing Outlires Looking at Shape","2121f341":"- KitchenQual, 'Ex (Excellent)' - can attract more sale price\n- Electrical, 'SBrkr (Standard Circuit Breakers & Romex))' - can attract more sale price\n- CentralAir, 'Yes' - can attract more sale price","2bdc90a6":"## 2. Data Cleaning ","0dcf82ef":"### 2.10 Looking for duplticate rows","789b69d1":"- Target variable is normally distributed\n- Skewness in around 1.71","136002da":"## 6. Model Buildng","5d1f3b3d":"### 4.5 Creating New Features (Derived Features)","6e845fc8":"- GarageCond has most value as 'TA'\n- BsmtExposure has most value as 'No'\n- RoofStyle has most value as 'Gable'\n- BsmtFinType2 has most value as 'Unf'\n- Electrical has most value as 'SBrkr'\n- GarageQual has most value as 'TA'\n- BsmtCond has most value as 'TA'\n- Other columns has values well distributed ","8a0dbcc3":"### 6.3 Getting Training Data","03a86fc4":"- 5 columns having null values more than 45%","d52481b6":"### 2.3 Dropping null values more than 40%","93d3eb33":"- These are the features which are highlty correlated.","6ebbbad0":"### 4.1 Target Variable data Distribution","87ef26c3":"### Import Libraries\n","aabc34d5":"### 2.8 Handling null values in Categorical Columns","3ad8c720":"### 1.3 Count unique values in each Types of column","5317aff9":"- Heating, 'GasA (Gas forced warm air furnace) and GasW (Gas hot water or steam heat)' - can attract more sale price\n- HeatingQC, 'Ex (Excellent)' - can attract more sale price","8297f59f":"### 2.4 Handling null values for remaining Columns","d405569f":"### 2.2 Plotting null values for first 20 columns","34f7b48c":"## 5. Feature Selection","7c20f04a":"### 4.2 Looking at overall data Distribution of Numeric Variable","4a51ccbf":"### 2.7 Plotting Categorical columns having null to see distribution of Data based on Neighborhood","d385d4d7":"- Houses structure will be common for a particular location so localizing this data based on Neihbourhood","9e3674b4":"- BsmtCond, 'Good' - can attract more sale price\n- BsmtQual, 'Ex (Excellent)' - can attract more sale price","23778347":"- First 5 columns having null values more than 45% so planning to drop the same","5a333d9c":"- AgeOfHome, attract more price as age of home is less\n- TotalSF, attract more price as sqft increases\n- TotalPorchArea, attract more price as sqft increases\n- TotalBathrooms, attract more price as number of bathroom increases","e06d89a5":"## 3. Outliers Analysis","9cb517c2":"### 5.3 Plotting correlated features with Target Variable (Sales Price)","24cf687e":"- There is no duplicate row in dataset.","5ace5d60":"- SaleType, 'New' can attract more sale price\n- OverallQual, '10 (Very Excellent)' can attract more sale price\n- OverallCond, '9 (Excellent)' can attract more sale price\n- MSZoning, 'FV (Floating Village Residential)' can attract more sale price\n- SaleCondition, 'Partial - Home was not completed when last assessed (associated with New Homes)'  can attract more sale price","55baed77":"### 6.1 Handling skewness of the Data","b7f043ed":"### 6.2 Getting Dummis","edf0e229":"- Houses in Bluestem has different features compared to Briardale so in order to make them loaclized based on Neighborhood and we can impute the data with mode based on Neighborhood","659d150e":"- No missing values in dataset now","0db84df4":"#   Assignment - Housing Price Prediction\n##  Naman Mehta","bcba4bdb":"### 2.1 Checking null Values","c3531abf":"- Condition1- PosN\t- 'Near positive off-site feature--park, greenbelt, etc' - can attract more sale price\n- Condition2- Norm\t- 'Normal' - can attract more sale price\n- LandContour - HLS - 'Hillside - Significant slope from side to side' - can attract little more sale price\n- Street - Pave - 'Paved' street - can attract little more sale price\n- Foundation - 'PConc & Stone' - Poured Contrete & Stone - can attract little more sale price\n- Other different category column values has not much siginificance on Sales price","66815458":"### 5.1 Looking at Correlateion  between features","a57768ec":"### 1.2 Understand the dataset","81c30735":"## Problem Statement\n\nA US-based housing company named Surprise Housing has decided to enter the Australian market. The company uses data analytics to purchase houses at a price below their actual values and flip them at a higher price. The company is looking at prospective properties to buy to enter the market.\n \n\n## Business Goal \n\nWe need to identify variables are significant in predicting the price of a house, and how well those variables describe the price of a house. This model will then be used by the management to understand how exactly the prices vary with the variables.","3f482974":"### 2.7 Plotting Categorical columns having null values to see distribution of Data","d53a0913":"- LotFrontage, having outliers above 200\n- LotArea, having outliers above 100000\n- Utilities, having single value pointing to 'NoSeWa'\n- MasVnrArea, having outliers above 1100\n- BsmtFinSF1, having outliers above 3000\n- BsmtFinSF2, having outliers above 1200\n- TotalBsmtSF, having outliers above 3300\n- Heating, having very few values for 'Othw' & 'Floor'\n- HeatingQC, having one values for 'Po'\n- 1stFlrSF, having outliers above 3300\n- GrLivArea, having outliers above 4500\n- BedroomAbvGr, having outliers above 6\n- WoodDeckSF, having outliers above 700\n- OpenPorchSF, having outliers above 450\n- EnclosedPorch, having outliers avove 400\n- 3SsnPorch, having outliers avove 400\n- MiscVal, having outliers avove 5000","23da04f6":"## 4. EDA (Exploratory Data Analysis)","fe397cf6":"- Above graph showing how the sales price is changine with year in each nighbourhood.\n    - BrDale, Blmngtn - Sales price is at bottom during recent sale.\n    - MeadowV, NoRidge, Crawfor, NPkVill - Sales price is at pick during recent sale.\n    - SWISU, ClearCr, Edwards, IDOTRR, Brkside, Mitchel, Crawfor - Sales price is showing fluctuating every year.","fcd663d7":"### 6.5 Predicting on Test Data","c32ca40f":"### 2.6 Handling null values in Numeric Columns","380d9cbc":"### 6.4 Lasso Regression\n\nLASSO (Least Absolute Shrinkage Selector Operator), is quite similar to ridge. In case of lasso, even at smaller alpha\u2019s, our coefficients are reducing to absolute zeroes. Therefore, lasso selects the only some feature while reduces the coefficients of others to zero. This property is known as feature selection and which is absent in case of ridge. \n\nLasso uses L1 regularization technique. Lasso is generally used when we have more number of features, because it automatically does feature selection.","8c68df1a":"### 2.5 Plotting numeric columns having null values to see distribution of Data","6d1c9d9a":"- RoofMatl, 'WdShngl (Wood Shingles)' - can attract more sale price","670bea1b":"### 4.3 How the SalePrice changed with year in each Nighbour Hood","aeb6ad9b":"### 5.2 Removing correalted features","578b58f6":"### 4.4 Looking at Data Distribution for Categorical Variable","04655682":"### 3.1 Counting outlires between 5th and 95th quantile","383ee3a9":"- There are outliers in each column.\n- Some of columns is showing outliers 100% because values are either 0 or max.","b3c062fc":"### Common Functions","2c0ab350":"- LotFrontage is normally distributed so impute it with mean\n- GarageYrBlt is skewed so impute it with median\n- MasVnrArea is skewed so impute it with median","183e93d1":"- First Floor square feet, normally distributed.\n- Second floor square feet, normally distributed but some of the housed have very high square feet values.\n- Bedrooms above grade, max values around 2,3,4.\n- Type 1 & Type 2 finished square feet, range of 0 - 200.\n- Basement full bathrooms, most of the values are 0 & 1.\n- Basement half bathrooms, most of the values are 0.\n- Unfinished square feet of basement area, range of 0 to 1000.\n- Enclosed porch area in square feet, most of the vaues are 0.\n- Size of garage in square feet, normally disrtibuted but few houses don't have garage.\n- Year garage was built, early years don't have concept of garage most garage built in early 2000.\n- Above grade (ground) living area square feet, skewed left.\n- Dwelling involved in the sale, 1-story 2-story from 1946 and newer\n- Open porch area in square feet, skewed left most of th housed dont have open porch area\n- Original construction date, skewed right most of the houses constructed around year 2000.","fdc33e68":"- GarageType, 'Built-In (Garage part of house - typically has room above garage)' - can attract more sale price\n- GarageQual, 'Ex (Excellent)' - can attract more sale price\n- PavedDrive, 'Y (Paved)' - can attract more sale price","c6368d8a":"## 1. Data Sourcing\n### 1.1 Read dataset from csv file","99f36830":"- Types of columns \n    - Objects\n    - Float\n    - Integer","4b1b414e":"- ExterQual, 'Ex (Excellent)' - can attract more sale price\n- ExterCond, 'Ex (Excellent)' - can attract more sale price\n- Exterior1st, 'CemntBd (Cement Board)' - can attract more sale price\n- Exterior2nd, 'CemntBd (Cement Board) ImStucc (Imitation Stucco)' - can attract more sale price"}}