{"cell_type":{"7f214168":"code","99e5a876":"code","f586ada9":"code","9db808d7":"code","88bfff55":"code","19facbf9":"code","b3ec6440":"code","3d396b33":"code","4561ab66":"code","939f7f10":"code","0c5f3903":"code","fd91ebac":"code","30ec0376":"code","dc07af1b":"code","c4612fa0":"code","2129bcaa":"code","b042a916":"code","c0994cd3":"code","3f40d179":"code","9e09f798":"code","384a5a22":"code","39ba11d5":"code","b8353536":"code","e43b1e09":"code","24cbeb61":"code","b6e6b8b1":"code","bc5a48a7":"code","33e1bf71":"code","438c1b08":"code","9cfbda62":"code","f1cef62f":"code","f3387e3a":"code","5f39ebe5":"code","52973746":"code","fed90031":"code","c410c2b6":"code","e6bbc3fa":"code","8e081ddb":"code","0f32fbe7":"code","6be6c27c":"code","79f7737e":"code","2761e578":"code","32bcf52c":"code","a80e5ba9":"code","528dda3e":"code","6a9168ed":"code","b02e63cc":"code","ea9e11e7":"code","01a4b0be":"code","4b0a02b5":"code","fb64c1f4":"code","2b0452bf":"code","e00ed679":"code","fcca8c79":"code","2de16107":"code","5c647f4b":"code","de683fb8":"code","5aedeba4":"code","18f336e3":"code","c6b5fc0b":"code","19b3a049":"code","bc88f43c":"code","e6d2276c":"code","2865892d":"code","aa8a5fad":"code","2758448d":"code","bc690f8e":"markdown","f931cf6d":"markdown","05cee92f":"markdown","45bdf4ca":"markdown","7f936808":"markdown","49c2f340":"markdown","cf42afe9":"markdown","0b723c82":"markdown","3eb8f16e":"markdown","c3c8c07e":"markdown","a2f19dd3":"markdown","33252f40":"markdown","33c7c288":"markdown","911726eb":"markdown","1d21e9d2":"markdown","8cec867a":"markdown","fc41fc2d":"markdown","5d322a6f":"markdown","dcab3a01":"markdown","8aaa820f":"markdown","02ca04d1":"markdown","e8e34828":"markdown","54374cde":"markdown","f204015d":"markdown","f0c76b74":"markdown","5f9792e4":"markdown","14ff9f2f":"markdown","8e252fc7":"markdown","a079b46c":"markdown","b5608521":"markdown","b3218190":"markdown","e2ff8325":"markdown","1157fff1":"markdown","8e8705a6":"markdown","ebacba27":"markdown","2efb5d61":"markdown","3fd35cb2":"markdown","4949e35e":"markdown","60132ed2":"markdown","3c3afbe2":"markdown"},"source":{"7f214168":"!wget https:\/\/raw.githubusercontent.com\/MicrosoftDocs\/mslearn-introduction-to-machine-learning\/main\/graphing.py","99e5a876":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt # plotting\nimport seaborn as sns # plotting\n%matplotlib inline\n\nfrom sklearn.preprocessing import OrdinalEncoder\n\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings('ignore')","f586ada9":"df_train = pd.read_csv(\"..\/input\/song-popularity-prediction\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/song-popularity-prediction\/test.csv\")\ndf_sample = pd.read_csv(\"..\/input\/song-popularity-prediction\/sample_submission.csv\")\n\n# https:\/\/www.kaggle.com\/robikscube\/handling-with-missing-data-youtube-stream\ndf_train[\"isTrain\"] = True\ndf_test[\"isTrain\"] = False\n\ntt = pd.concat([df_train, df_test]).reset_index(drop=True).copy()","9db808d7":"df_train.head()","88bfff55":"# https:\/\/www.geeksforgeeks.org\/set-pandas-dataframe-background-color-and-font-color-in-python\/\n\n# cm = sns.light_palette(\"green\", as_cmap=True)\n# train_df.sample(10).style.background_gradient(cmap=cm).set_precision(2).highlight_null('red')\n\ndf_train.head(5).style.highlight_null(null_color='red')","19facbf9":"df_train.describe()","b3ec6440":"# https:\/\/www.kaggle.com\/robikscube\/handling-with-missing-data-youtube-stream\ndf_train.shape, df_test.shape, tt.shape","3d396b33":"categorical_columns = ['key', 'audio_mode', 'time_signature']\n\nnumerical_columns = ['song_duration_ms', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'liveness', 'loudness', 'speechiness', 'tempo', 'audio_valence']\n\n# All 13 features\nall_columns = categorical_columns + numerical_columns\n\n\ntarget = 'song_popularity'\nall_columns_and_target = all_columns + [target]","4561ab66":"list = [\"% No Popular\", \"% Popular   \"]\ndf = (df_train['song_popularity'].value_counts() \/ len(df_train) * 100).to_frame()\ndf.index = list\nprint(df)\ndf_train['song_popularity'].value_counts().plot(kind='bar')","939f7f10":"print(df)","0c5f3903":"# https:\/\/www.kaggle.com\/mohammadkashifunique\/spp-eda-model-prediction-lightgbm\nmsno.matrix(df_train[all_columns], figsize=(10, 6))","fd91ebac":"msno.matrix(df_test[all_columns], figsize=(10, 6))","30ec0376":"# https:\/\/www.kaggle.com\/mohammadkashifunique\/spp-eda-model-prediction-lightgbm\ndf_train[all_columns].isnull().mean() * 100","dc07af1b":"msno.bar(df_train[all_columns], figsize=(8, 4))","c4612fa0":"# https:\/\/www.kaggle.com\/snikhil17\/song-popularity-eda-coding-fun-python-version\n\nsns.displot(\n    data=df_train.isna().melt(value_name=\"missing\"),\n    y=\"variable\",\n    hue=\"missing\",\n    multiple=\"fill\",\n    aspect=3,\n    palette='magma' \n)","2129bcaa":"# df_train.isna().melt(value_name=\"missing\")","b042a916":"# http:\/\/theprofessionalspoint.blogspot.com\/2019\/03\/visualize-missing-values-in-bar-plot.html\n\n#missing_values = df_train.isnull().sum() \/ len(df_train)\nmissing_values_trn = df_train[all_columns].isnull().mean() * 100\nmissing_values_tst = df_test[all_columns].isnull().mean() * 100\n#missing_values_trn","c0994cd3":"# Training\nmissing_values_trn = missing_values_trn.to_frame()\nmissing_values_trn.columns = ['% Missing']\nmissing_values_trn[\"Data\"] = \"Training\"\nmissing_values_trn.index.names = ['Feature']\nmissing_values_trn['Feature'] = missing_values_trn.index\n\n# Test\nmissing_values_tst = missing_values_tst.to_frame()\nmissing_values_tst.columns = ['% Missing']\nmissing_values_tst[\"Data\"] = \"Test\"\nmissing_values_tst.index.names = ['Feature']\nmissing_values_tst['Feature'] = missing_values_tst.index\n\nmissing_values = missing_values_trn.append(missing_values_tst, ignore_index=True)\nmissing_values.head(5)","3f40d179":"#sns.set(style=\"whitegrid\", color_codes=True)\nsns.set_theme(style=\"whitegrid\")\nsns.barplot(x = 'Feature', y = '% Missing', hue=\"Data\", data=missing_values)\nplt.xticks(rotation = 90)\nplt.show()","9e09f798":"# https:\/\/www.kaggle.com\/robikscube\/handling-with-missing-data-youtube-stream\n\nncounts = pd.DataFrame([df_train.isna().mean(), df_test.isna().mean()]).T\nncounts = ncounts.rename(columns={0: \"train_missing\", 1: \"test_missing\"})\n\nncounts.query(\"train_missing > 0\").plot(\n    kind=\"barh\", figsize=(8, 5), title=\"% of Values Missing\"\n)\nplt.show()","384a5a22":"# Number of missing values in the same row\ndf_train[all_columns].isnull().sum(axis=1).sample(5)","39ba11d5":"df_train[all_columns].isnull().sum(axis=1).value_counts()","b8353536":"df_train_missing = df_train[target].to_frame()\ndf_train_missing['missing_values'] = df_train[all_columns].isnull().sum(axis=1)","e43b1e09":"# Distribution of number of missing values in the same row\n\nsns.histplot(data=df_train_missing, x=\"missing_values\", hue=target, multiple=\"dodge\", shrink=14)","24cbeb61":"filter = df_train_missing['song_popularity'] == 0\nmissing_in_same_row = pd.DataFrame(df_train_missing['missing_values'][filter].value_counts())\nmissing_in_same_row.columns = ['missing in unpopular']","b6e6b8b1":"filter = df_train_missing['song_popularity'] == 1\nmissing_in_same_row['missing in popular'] = df_train_missing['missing_values'][filter].value_counts()\nmissing_in_same_row = missing_in_same_row.fillna(0)\n\nmissing_in_same_row['Total'] = missing_in_same_row['missing in popular'] + missing_in_same_row['missing in unpopular']\nmissing_in_same_row['% popular'] = missing_in_same_row['missing in popular'] \/ missing_in_same_row['Total']\nmissing_in_same_row","bc5a48a7":"# https:\/\/www.kaggle.com\/robikscube\/handling-with-missing-data-youtube-stream\n\ntt[\"n_missing\"] = tt[all_columns].isna().sum(axis=1)\ndf_train[\"n_missing\"] = df_train[all_columns].isna().sum(axis=1)\ndf_test[\"n_missing\"] = df_test[all_columns].isna().sum(axis=1)","33e1bf71":"tt[\"n_missing\"].value_counts().plot(\n    kind=\"bar\", title=\"Number of Missing Values per Sample\"\n)","438c1b08":"# https:\/\/stackoverflow.com\/questions\/12589481\/multiple-aggregations-of-the-same-column-using-pandas-groupby-agg\n\ndf1=df_train.groupby(\"n_missing\").agg(\n    {\"n_missing\": [\"count\"],\n     \"song_popularity\": [np.mean]\n    }\n).reset_index()#.plot.bar()\n\ndf1=df_train.groupby(\"n_missing\").agg(\n    n_missing_count=('n_missing', 'count'), \n    song_popularity_percentage=('song_popularity', np.mean),\n).reset_index()#.plot.bar()\n#df1","9cfbda62":"df2=df_train.groupby([\"n_missing\", target]).agg(\n    {\"n_missing\": [\"count\"],\n     #\"song_popularity\": [np.mean]\n    }\n).reset_index()\n\n#df2.columns = df2.columns.droplevel(0)\ndf2.columns = [(col[0] + col[1]) for col in df2.columns]\ndf2","f1cef62f":"# https:\/\/stackoverflow.com\/questions\/63945535\/seaborn-plotting-histogram-and-lineplot-on-the-same-figure-with-2-y-axis\n\nfig = plt.figure(figsize=(10,8))\nax1 = fig.add_subplot(111)\n\nax2 = ax1.twinx()\nax2.set_ylabel('% Popular Songs', color='g')\n\n#sns.barplot(x='Bin', y='Frequency',data=df1, color='blue', ax=ax1)\nsns.barplot(x='n_missing', y='n_missingcount', data=df2, hue=\"song_popularity\", ax=ax1)\n\nsns.lineplot(x='n_missing', y='song_popularity_percentage', data=df1, marker='s', color='g', ax=ax2, dashes=True)\n\nax1.set_xlabel('Number of missing values in same observation')\nax1.set_ylabel('Number of songs')\nax2.grid(None)\n\nax1.set_ylim(0, 14000)\nax2.set_ylim(0, 0.4)\n\nax1.legend(loc=\"right\", title='Popularity')\n\n#plt.xticks(rotation=60)\nplt.show()","f3387e3a":"# https:\/\/www.kaggle.com\/mohammadkashifunique\/spp-eda-model-prediction-lightgbm\n\nfeatures = numerical_columns\ni = 0\n\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(10,10,figsize=(10,14))\n\nfor feature in features:\n    i += 1\n    plt.subplot(5,2,i)\n    \n    sns.distplot(df_train[feature], hist=False,label='train')\n    sns.distplot(df_test[feature], hist=False,label='test')\n    \n    plt.xlabel(feature, fontsize=9)\n    locs, labels = plt.xticks()\n    plt.tick_params(axis='x', which='major', labelsize=6, pad=-6)\n    plt.tick_params(axis='y', which='major', labelsize=6)\nplt.show();","5f39ebe5":"features = numerical_columns\ni = 0\n\nsns.set_style('whitegrid')\nplt.figure()\n\nfig, ax = plt.subplots(10, 10, figsize=(10,14))\n\ndf_not = df_train[df_train[target] == 0]\ndf_yes = df_train[df_train[target] == 1]\n\nfor feature in features:\n    i += 1\n    plt.subplot(5, 2, i)\n    \n    sns.distplot(df_yes[feature], hist=True, label='Popular', color='r')\n    sns.distplot(df_not[feature], hist=True, label='Not popular', color='g')\n    \n    plt.xlabel(feature, fontsize=9)\n    locs, labels = plt.xticks()\n    plt.tick_params(axis='x', which='major', labelsize=6, pad=-6)\n    plt.tick_params(axis='y', which='major', labelsize=6)\nplt.show();","52973746":"features = numerical_columns\ni = 0\n\nplt.figure()\nfig, ax = plt.subplots(10, 10, figsize=(10,14))\n\nfor feature in features:\n    i += 1\n    plt.subplot(5, 2, i)\n    \n    #sns.distplot(df_yes[feature], hist=False, label='Popular')\n    #sns.distplot(df_not[feature], hist=False, label='Not popular')\n    sns.kdeplot(\n        data=df_train, x=feature, hue=target, fill=True, common_norm=False, palette=\"Set2\", alpha=.5, linewidth=0,\n    )\n    \n    plt.xlabel(feature, fontsize=9)\n    locs, labels = plt.xticks()\n    plt.tick_params(axis='x', which='major', labelsize=10, pad=-4)\n    plt.tick_params(axis='y', which='major', labelsize=10)\nplt.show();","fed90031":"def get_lineplot_df(df, feature, target):\n    data_b = df_train[[feature, target]].dropna()\n    \n    # https:\/\/stackoverflow.com\/questions\/60512271\/how-can-i-extract-the-bins-from-seaborns-kde-distplot-object\n    # Get number of bins (same as kdeplot)\n    bins = min(len(np.histogram_bin_edges(data_b[feature], bins=\"fd\")), 50)\n    \n    # Create bins column\n    data_b[\"bins\"] = pd.cut(data_b[feature], bins=bins)\n    # Group by bins\n    data_b_group = data_b.groupby(\"bins\").agg(popularity_percent=(target, np.mean),).reset_index()\n    \n    # # https:\/\/stackoverflow.com\/questions\/32744558\/python-bin-data-and-return-bin-midpoint-maybe-using-pandas-cut-and-qcut\n    # Get center of bins as column\n    data_b_group[\"bin_centres\"] = data_b_group[\"bins\"].apply(lambda x: x.mid)\n    \n    return data_b_group[[\"bin_centres\", \"popularity_percent\"]]\n\n\n# https:\/\/stackoverflow.com\/questions\/63945535\/seaborn-plotting-histogram-and-lineplot-on-the-same-figure-with-2-y-axis\n# https:\/\/stackoverflow.com\/questions\/53831482\/share-secondary-y-axis-in-looped-seaborn-plots\n\nfeatures = numerical_columns\ni = 0\n\nplt.figure()\nfig, ax = plt.subplots(10, 10, figsize=(18,20))\n\nfor feature in features:\n    i += 1\n    plt.subplot(5, 2, i)\n\n    ax1 = sns.kdeplot(\n        data=df_train, x=feature, hue=target, fill=True, common_norm=False, palette=\"Set2\", alpha=.55, linewidth=0.1,\n    )\n    \n    ax2 = ax1.twinx()\n    ax2.grid(None)\n    \n    lineplot_df = get_lineplot_df(df_train, feature, target)\n    ax2 = sns.lineplot(\n        x='bin_centres', y='popularity_percent', data=lineplot_df, color='royalblue', ax=ax2, \n        #dashes=[(5,5)],\n        marker='X',\n        linestyle='--',\n        linewidth=.5\n    )\n    ax2.set_ylabel('% Popular Songs', color='royalblue')\n    \n    plt.xlabel(feature, fontsize=9)\n    locs, labels = plt.xticks()\n    plt.tick_params(axis='x', which='major', labelsize=10, pad=-4)\n    plt.tick_params(axis='y', which='major', labelsize=8)\n    \n    new_labels = ['Popular', 'Not Popular']\n    ax1.legend(bbox_to_anchor=(1.00, 1), title='Popularity', labels = new_labels)\n    \nplt.show();","c410c2b6":"fig, ax = plt.subplots(10, 1, figsize=(8, 10))\ni = 0\n\nfor col in df_train[numerical_columns].columns:\n    #sns.kdeplot(data= df_train[numerical_columns], x=col, fill=True, color='blue', ax=ax[i\/\/2][i%2])\n    sns.kdeplot(data= df_train[numerical_columns], x=col, fill=True, color='blue', ax=ax[i])\n    #ax[i\/\/2][i%2].set_xlabel(col)\n    i += 1\n\nplt.tight_layout()\n#fig.suptitle","e6bbc3fa":"modal_map = {0: 'minor', 1: 'Major'}\ndf_train[\"tonal_mode\"] = df_train.audio_mode.map(modal_map)","8e081ddb":"df_train.groupby(\"tonal_mode\").agg(popularity_percent=(target, np.mean),).reset_index()","0f32fbe7":"feature = \"tonal_mode\"\n\nax1 = sns.countplot(x=feature, hue=target, data=df_train, palette=\"Set2\")\nnew_labels = ['Not Popular', 'Popular']\nax1.legend(\n    bbox_to_anchor=(1.00, 0.75), title='Popularity', labels = new_labels,\n)\n\nax2 = ax1.twinx()\nax2.grid(None)\n\nlineplot_df = df_train.groupby(feature).agg(popularity_percent=(target, np.mean),).reset_index()\n\nax2 = sns.lineplot(\n        x=feature, y='popularity_percent', data=lineplot_df, color='royalblue', ax=ax2, \n        marker='X', linestyle='-', linewidth=.75\n)\n\nax1.set_ylim(0, 20000)\nax2.set_ylim(0, 0.4)\nax2.set_ylabel('% Popular Songs', color='royalblue')","6be6c27c":"key_map = {0: 'C', 1: 'C#\/Db', 2: 'D', 3: 'D#\/Eb', 4: 'E', 5: 'F', 6: 'F#\/Gb', 7: 'G', 8: 'G#\/Ab', 9: 'A', 10: 'A#\/Bb', 11: 'B'}\ndf_train[\"key_name\"] = df_train.key.map(key_map).fillna('Unknown')","79f7737e":"feature = \"key_name\"\n\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\nax1 = sns.countplot(\n    x=feature, hue=target, data=df_train, palette=\"Set2\", \n    order = df_train.groupby(feature)['id'].count().sort_values(ascending = False).index,\n)\n\nnew_labels = ['Not Popular', 'Popular']\n\nax1.legend(bbox_to_anchor=(1.00, 0.75), title='Popularity', labels = new_labels)\nax1.set_title(f\"Target distribution by {feature}, sort by song count\")\n\nax2 = ax1.twinx()\nax2.grid(None)\n\nlineplot_df = df_train.groupby(feature).agg(popularity_percent=(target, np.mean),).reset_index()\n\nax2 = sns.lineplot(\n    x=feature, y='popularity_percent', data=lineplot_df, color='royalblue', ax=ax2, \n    marker='s', linestyle='-', linewidth=.0,\n)\n\nax1.set_ylim(0, 5000)\nax1.tick_params(axis='x', rotation=90)\nax2.set_ylim(0, 0.45)\nax2.set_ylabel('% Popular Songs', color='royalblue')","2761e578":"df_train[\"tonality\"] = df_train[\"key_name\"] + \" \" + df_train[\"tonal_mode\"]","32bcf52c":"feature = \"tonality\"\n\nfig, ax = plt.subplots(figsize=(12, 6))\n\nax1 = sns.countplot(\n    x=feature, hue=target, data=df_train, palette=\"Set2\", \n    order = df_train.groupby(feature)['id'].count().sort_values(ascending = False).index,\n)\n\nnew_labels = ['Not Popular', 'Popular']\n\nax1.legend(bbox_to_anchor=(1.00, 0.45), title='Popularity', labels = new_labels)\nax1.set_title(f\"Target distribution by {feature}, sort by song count\")\n\nax2 = ax1.twinx()\nax2.grid(None)\n\n# We need to set the dataframe with same order as arder set in ax1\nlineplot_df = df_train.groupby(feature).agg(popularity_percent=(target, np.mean), total_song_count=(\"id\", \"count\"),).reset_index().sort_values(by=['total_song_count'], ascending=False)\n\nax2 = sns.lineplot(\n        x=feature, y='popularity_percent', data=lineplot_df, color='royalblue', ax=ax2, \n        marker='s', linestyle='-', linewidth=.0\n)\n\nax1.set_ylim(0, 3000)\nax1.tick_params(axis='x', rotation=90)\nax2.set_ylim(0, 0.5)\nax2.set_ylabel('% Popular Songs', color='royalblue')","a80e5ba9":"#df_train.groupby(feature).agg(popularity_percent=(target, np.mean), total_song_count=(\"id\", \"count\"),).reset_index().sort_values(by=['total_song_count'], ascending=False)","528dda3e":"key_map = {2: '2\/4', 3: '3\/4', 4: '4\/4', 5: '5\/4'}\ndf_train[\"time_signature_name\"] = df_train.time_signature.map(key_map)","6a9168ed":"feature = \"time_signature_name\"\n\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\nax1 = sns.countplot(\n    x=feature, hue=target, data=df_train, palette=\"Set2\", \n    order = df_train.groupby(feature)['id'].count().sort_values(ascending = False).index,\n)\n\nnew_labels = ['Not Popular', 'Popular']\n\nax1.legend(bbox_to_anchor=(1.00, 0.75), title='Popularity', labels = new_labels)\nax1.set_title(f\"Target distribution by {feature}, sort by song count\")\n\nax2 = ax1.twinx()\nax2.grid(None)\n\n#lineplot_df = df_train.groupby(feature).agg(popularity_percent=(target, np.mean),).reset_index()\nlineplot_df = df_train.groupby(feature).agg(popularity_percent=(target, np.mean), total_song_count=(\"id\", \"count\"),).reset_index().sort_values(by=['total_song_count'], ascending=False).reset_index()\n\nax2 = sns.lineplot(\n        x=feature, y='popularity_percent', data=lineplot_df, color='royalblue', ax=ax2, \n        marker='s', linestyle='-', linewidth=.0\n)\n\nax1.set_ylim(0, 20000)\nax1.tick_params(axis='x', rotation=0)\nax2.set_ylim(0, 0.4)\nax2.set_ylabel('% Popular Songs', color='royalblue')","b02e63cc":"# https:\/\/www.kaggle.com\/vtorsousa\/eda-and-insights-30daysml\n    \n# Plot dataframe\ndf = df_train[numerical_columns + [target]]\n\n# Encoding tonality with OrdinalEncoder\n#encoder = OrdinalEncoder()\n#col = \"tonality\"\n#df[col] = encoder.fit_transform(np.array(df[col]).reshape(-1, 1))\n\n# Calculatin correlation values\ndf = df.corr().round(2)\n\n# Mask to hide upper-right part of plot as it is a duplicate\nmask = np.zeros_like(df)\nmask[np.triu_indices_from(mask)] = True\n\n# Making a plot\nplt.figure(figsize=(14,14))\nax = sns.heatmap(df, annot=True, mask=mask, cmap=\"RdBu\", annot_kws={\"weight\": \"normal\", \"fontsize\":9})\nax.set_title(\"Feature correlation heatmap\", fontsize=17)\nplt.setp(ax.get_xticklabels(), rotation=90, ha=\"right\",\n         rotation_mode=\"anchor\", weight=\"normal\")\nplt.setp(ax.get_yticklabels(), weight=\"normal\",\n         rotation_mode=\"anchor\", rotation=0, ha=\"right\")\nplt.show();","ea9e11e7":"# https:\/\/seaborn.pydata.org\/generated\/seaborn.kdeplot.html\n    \nplt.figure(figsize=(12,6))\nsns.kdeplot(\n   data=df_train, x=\"danceability\", hue=\"time_signature_name\",\n   fill=True, common_norm=False, palette=\"husl\",\n   alpha=.5, linewidth=0,\n)\nplt.figure(figsize=(12,6))\nsns.kdeplot(\n   data=df_train, x=\"tempo\", hue=\"time_signature_name\",\n   fill=True, common_norm=False, palette=\"husl\",\n   alpha=.5, linewidth=0,\n)","01a4b0be":"tempo_map = { \n    \"1. Larghetto\": (60, 66),\n    \"2. Adagio\": (66, 76),\n    \"3. Andante\": (76, 108),\n    \"4. Moderato\": (108, 120),\n    \"5. Allegro\": (120, 156),\n    \"6. Vivace\": (156, 176),\n    \"7. Presto\": (168, 200),\n    \"8. Prestissimo\": (200, 300)\n}\n\ndef set_tempo_name(x):\n    for tempo in tempo_map:\n        if (x >= tempo_map[tempo][0]) and (x < tempo_map[tempo][1]):\n            return tempo + \" \" + str(tempo_map[tempo])\n\ndf_train[\"tempo_name\"] = df_train['tempo'].apply(set_tempo_name)","4b0a02b5":"sorted([each for each in df_train[\"tempo_name\"].unique()])","fb64c1f4":"feature = \"tempo_name\"\n\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\nax1 = sns.countplot(\n    x=feature, hue=target, data=df_train, palette=\"Set2\", \n    order = sorted([each for each in df_train[\"tempo_name\"].unique()])\n)\n\nnew_labels = ['Not Popular', 'Popular']\n\nax1.legend(bbox_to_anchor=(1.00, .35), title='Popularity', labels = new_labels)\nax1.set_title(f\"Target distribution by {feature}, sort by song count\")\n\nax2 = ax1.twinx()\nax2.grid(None)\n\n#lineplot_df = df_train.groupby(feature).agg(popularity_percent=(target, np.mean),).reset_index()\nlineplot_df = df_train.groupby(feature).agg(popularity_percent=(target, np.mean), total_song_count=(\"id\", \"count\"),).reset_index()#.sort_values(by=['total_song_count'], ascending=False).reset_index()\n\nax2 = sns.lineplot(\n        x=feature, y='popularity_percent', data=lineplot_df, color='royalblue', ax=ax2, \n        marker='s', linestyle='-', linewidth=.0\n)\n\nax1.set_ylim(0, 18000)\nax1.tick_params(axis='x', rotation=90)\nax2.set_ylim(0, 0.50)\nax2.set_ylabel('% Popular Songs', color='royalblue')","2b0452bf":"lineplot_df","e00ed679":"dance_tempo_df = df_train.groupby([\n    \"time_signature_name\", \n    \"tempo_name\", \n    #\"tonal_mode\"\n]).agg(\n    song_count=(\"id\", \"count\"),\n    danceability_median=(\"danceability\", np.median), \n    valence_median=(\"audio_valence\", np.median), \n    popularity_mean=(target, np.mean), \n).reset_index()\n\ndance_tempo_df.style.background_gradient(axis=0, cmap='YlOrRd')","fcca8c79":"dance_df = dance_tempo_df.pivot(\"time_signature_name\", \"tempo_name\", \"danceability_median\")\nax = sns.heatmap(dance_df, cmap=\"YlGnBu\")\n","2de16107":"dance_df = dance_tempo_df.pivot(\"time_signature_name\", \"tempo_name\", \"popularity_mean\")\nax = sns.heatmap(dance_df, cmap=\"YlGnBu\")","5c647f4b":"plt.figure(figsize=(12,6))\nsns.histplot(df_train, x=\"tempo\", hue=\"time_signature_name\", \n             element=\"poly\"\n             #element=\"bars\"\n            )\nplt.figure(figsize=(12,6))\nsns.histplot(df_train, x=\"danceability\", hue=\"time_signature_name\", \n             element=\"poly\"\n             #element=\"bars\"\n            )","de683fb8":"sns.boxplot(x=\"time_signature_name\", y=\"danceability\",\n            hue=target, palette=[\"m\", \"g\"],\n            data=df_train)\nsns.despine(offset=10, trim=True)","5aedeba4":"sns.violinplot(data=df_train, x=\"time_signature_name\", y=\"danceability\", hue=target,\n               split=True, inner=\"quart\", linewidth=1,\n               palette={0: \"b\", 1: \".85\"})\nsns.despine(left=True)","18f336e3":"sns.violinplot(data=df_train, x=\"tempo_name\", y=\"danceability\", hue=target,\n               split=True, inner=\"quart\", linewidth=1,\n               palette={0: \"b\", 1: \".85\"})\nsns.despine(left=True)","c6b5fc0b":"dance_tempo_df = df_train.groupby([\n    \"tonality\", \n    #\"tempo_name\", \n    #\"tonal_mode\"\n]).agg(\n    song_count=(\"id\", \"count\"),\n    danceability_median=(\"danceability\", np.median), \n    valence_median=(\"audio_valence\", np.median), \n    popularity_mean=(target, np.mean), \n).reset_index()\n\ndance_tempo_df.style.background_gradient(axis=0, cmap='YlOrRd')","19b3a049":"import graphing\nimport plotly\n\ngraphing.histogram(df_train, label_x='key', label_y=target, histfunc='avg', include_boxplot=True)","bc88f43c":"graphing.histogram(df_train, label_x=\"tempo\", label_y=target, histfunc=\"avg\", nbins=60, title=\"Tempo vs Popularity\", include_boxplot=True, show=True)\ngraphing.histogram(df_train, label_x=\"loudness\", label_y=target, histfunc=\"avg\", nbins=60, title=\"Loudness vs Popularity\", include_boxplot=True, show=True)\nprint()","e6d2276c":"graphing.histogram(df_train, label_x=\"audio_mode\", label_y=target, histfunc=\"avg\", nbins=60, title=\"Tempo vs Popularity\", include_boxplot=True, show=True)\nprint()","2865892d":"# https:\/\/www.kaggle.com\/parulpandey\/penguin-dataset-the-new-iris\n# sns.pairplot(df_train.sample(100), hue=target, size=2, diag_kind=\"hist\")","aa8a5fad":"# https:\/\/www.kaggle.com\/vanshsharma10\/python-song-popularity-eda\nplt.figure(figsize=(7,6))\nplt.scatter(df_train['energy'], df_train['loudness'], s=1, c='black')\nplt.xlabel('Energy')\nplt.ylabel('Loudness')\nplt.grid()\nplt.show()","2758448d":"# https:\/\/www.kaggle.com\/vanshsharma10\/python-song-popularity-eda\nplt.figure(figsize=(7,6))\nplt.scatter(df_train['energy'], df_train['acousticness'], s=1, c='black')\nplt.xlabel('Energy')\nplt.ylabel('Acousticness')\nplt.grid()\nplt.show()","bc690f8e":"### The greatest negative correlation\nEnergy vs Loudness","f931cf6d":"### Features\nWe can read the description of each feature in Spotify Web API Reference: [Get Tracks' Audio Features](https:\/\/developer.spotify.com\/documentation\/web-api\/reference\/#\/operations\/get-several-audio-features)\n\n1. \ud83d\udd51 **`song_duration`**: song duration in miliseconds\n2. \ud83e\ude95 **`acousticness`**: 0.0 to 1.0 of whether the track is acoustic\n3. \ud83d\udc83\ud83c\udfff\ud83e\udd38\ud83c\udffd **`danceability`**: how suitable a track is for dancingbased on *tempo*, rhythm stability, beat strength. 0.0 is least danceable and 1.0 is most danceable\n4. \ud83d\udca5 **`energy`**: from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel *fast* (tempo), *loud*, and noisy\n5. \ud83c\udfba **`instrumentalness`**: the closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0\n6. \ud83c\udfb9 **`key`**: integers map to pitches using standard Pitch Class notation. E.g. 0 = C, 1 = C\u266f\/D\u266d, 2 = D, and so on. If no key was detected, the value is -1\n7. \ud83e\udd18\ud83c\udfdf\ufe0f **`liveness`**: detects the presence of an audience in the recording, a value above 0.8 provides strong likelihood that the track is live. \n8. \ud83d\udd09\ud83d\ude49 **`loudness`**: the overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db\n9. \ud83c\udfbc **`audio_mode`**: mode indicates the modality (major or minor) of a track, major is represented by 1 and minor is 0\n10. \ud83e\udd9c **`speechiness`**: speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks\n11. \u23f2\ufe0f **`tempo`**: the overall estimated tempo of a track in beats per minute (BPM)\n12. \ud83e\udd41 **`time_signature`**: the time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3\/4\", to \"7\/4\"\n13. \ud83d\ude0c\ud83d\ude04 **`audio_valence`**: a measure from 0.0 to 1.0. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), low valence sound more negative (e.g. sad, depressed, angry).","05cee92f":"At the right side we can see, by observation (row), the minimum and maximum number of features (columns) with no-null values.  \nSo 7 means that there 6 nulls in at least one observation. 13 Is the total number of features (columns)\n### Test data","45bdf4ca":"## Correlation Matrix","7f936808":"### `time_signature`\n- 2\/4 marchs, *pasodobles* (double step)...\n- 3\/4 waltz\n- 4\/4 most popular music\n- 5\/4 Take 5, Money, more on [9 Popular Songs With Odd Time Signatures](https:\/\/www.youtube.com\/watch?v=-RU4ku-OSdo) and some Radiohead","49c2f340":"### Tonality, music scale or `key` with `audio_mode`","cf42afe9":"## Exploration of data","0b723c82":"### Song Popularity percentage distribution","3eb8f16e":"### From Microsoft tutorials","c3c8c07e":"## Libraries","a2f19dd3":"## Plot both popular and unpopular with an axis for `% Popular`","33252f40":"### From MLSpace\nhttps:\/\/discord.com\/channels\/736298460231499817\/932957356357189673\/934078227721383966","33c7c288":"### Major or minor for `audio_mode`\nThis feature should be better called Tonal Mode, as it refers to the mode of the scale (tonality) of the song.  \nThere exists more modes, but in the competition the feature has 0 for minor songs and 1 for Major.  \nIn music theory the mode is referred as having a specific character or mood.  \nIn general minor mode is associated with introspection or sadness while major mode is more cheerfull.  \nOf course there isn't a fixed character or mood for specific mode in a theme, but C minor sounds very different to C Major.\n\n[Major & Minor: Hearing and Understanding the Difference](https:\/\/www.bax-shop.co.uk\/blog\/miscellaneous\/major-minor-hearing-and-understanding-the-difference\/)  \n[Youtube: Major Vs. Minor Chords. What's the difference?](https:\/\/youtu.be\/it43JQy136I)","911726eb":"## Missing values\n\nUsing missingno visualization library to plot missing values on the features.  \n","1d21e9d2":"- I also didn't expect that 3\/4 was the time signature with the greatest number of songs","8cec867a":"## Distribution of numerical features (Train vs Test)","fc41fc2d":"- There are big jumps in `% Popular Songs` when the number of songs is small\n- We can see the instability of `instrumentalness`, in line with its skewness and peculiarity (1)\n- Not sure if the \"instability\" could be treated processing outliers\n\n(1) For more info look at [6 Intermission: The curious case of Instrumentalness](https:\/\/www.kaggle.com\/headsortails\/song-popularity-eda-live-coding-fun#intermission-the-curious-case-of-instrumentalness)","5d322a6f":"```\n17,259 rows without missing values (63.5% are not popular songs)  \n15,182 rows with 1 missing values (63.6% are not popular songs)  \n 5,937 rows with 2 missing values (63.2% are not popular songs)  \n 1,393 rows with 3 missing values (64.5% are not popular songs)  \n   195 rows with 4 missing values (69.2% are not popular songs)  \n    32 rows with 5 missing values (78.1% are not popular songs)  \n     2 rows with 6 missing values (100% are not popular songs)  \n```","dcab3a01":"#### Another way, now horizontal","8aaa820f":"# Introduction\n\nFrom the french word *pot pourri*, the spanish *popurr\u00ed* is often used both as a musical term by referring to a composition or execution formed by fragments of music themes - what is called a **medley**. It also refers to a mix of things, hodgepodge.  \n  \nThis notebook wasn't intended to be a hodpodge, but in the process of learning for this competition, I ended taking bits from here and there umtil I got the visualizations I was looking for.  \n  \nI put in each cell all references used in this *popurr\u00ed*. \n  \n\n## References\n  \n- [Discord: MLSpace: The Machine Learning Community](https:\/\/discord.gg\/UzykbURDAC) \n- [Kaggle: penguin dataset : The new Iris](https:\/\/www.kaggle.com\/parulpandey\/penguin-dataset-the-new-iris)\n- [Kaggle: \ud83d\udd25EDA +FE+TabNet \ud83e\udde0\ud83e\udde0[Weights and Biases]](https:\/\/www.kaggle.com\/usharengaraju\/eda-fe-tabnet-weights-and-biases)\n- [Kaggle: Kiva Loans EDA part 1 | Interactive Visualizations](https:\/\/www.kaggle.com\/pranav84\/kiva-loans-eda-part-1-interactive-visualizations)\n- [Kaggle: \ud83c\udfb6[SPP]:- EDA+Model_Prediction(LightGBM)\ud83d\udccc](https:\/\/www.kaggle.com\/mohammadkashifunique\/spp-eda-model-prediction-lightgbm)\n- [Youtube: Song Popularity Prediction EDA with Martin Henze (Heads or Tails)](https:\/\/youtu.be\/JXF-7rCcR1c)\n- [Youtube: Song Popularity Prediction: EDA with Martin Henze (Part-2)](https:\/\/youtu.be\/2aE6SvCVOis)\n- [Kaggle: Song Popularity EDA - Live Coding Fun](https:\/\/www.kaggle.com\/headsortails\/song-popularity-eda-live-coding-fun)\n- [Kaggle: [Python] Song Popularity EDA](https:\/\/www.kaggle.com\/vanshsharma10\/python-song-popularity-eda)\n- [Towardsdatascience: The Next Level of Data Visualization in Python](https:\/\/towardsdatascience.com\/the-next-level-of-data-visualization-in-python-dd6e99039d5e)\n- [Kaggle: Song Popularity Prediction_dataQueen](https:\/\/www.kaggle.com\/dataqueenpending\/song-popularity-prediction-dataqueen\/notebook)\n- [Kaggle: \ud83c\udfbbSong Popularity EDA-Coding Fun(Python Version)\ud83c\udfbb](https:\/\/www.kaggle.com\/snikhil17\/song-popularity-eda-coding-fun-python-version)\n- [Kaggle: [Python] Song Popularity EDA](https:\/\/www.kaggle.com\/vanshsharma10\/python-song-popularity-eda)\n- [Kaggle: Song Popularity Prediction - \ud83d\udccaEDA + MODELLING\ud83d\udcca](https:\/\/www.kaggle.com\/odins0n\/song-popularity-prediction-eda-modelling)\n- [Handling With Missing Data [Youtube Stream]](https:\/\/www.kaggle.com\/robikscube\/handling-with-missing-data-youtube-stream)\n- [SongPopularity EDA+Insignts+Clean Plots \ud83d\udd25\ufe0f\ud83d\udd25\ufe0f\ud83d\udd25\ufe0f](https:\/\/www.kaggle.com\/imams2000\/songpopularity-eda-insignts-clean-plots)","02ca04d1":"### Categorical and numerical columns ","e8e34828":"### Another way","54374cde":"## Distribution of categorical features","f204015d":"Maybe it is not that 2\/4 has less danceability than 3\/4, but:\n- Most 2\/4 songs are concentrated in a slow tempo. The slow tempo could be what makes them less danceable.\n- 3\/4 in slow tempo is less danceable than 3\/4 with bigger tempos. ","f0c76b74":"![image.png](attachment:809f8348-c1b1-4ca4-94ff-f5d7e6bc788c.png)","5f9792e4":"### Music scale or `key`\n\nIn \"equal tempered\" tuning there are 7 notes. C (Do) to B (Si).  \nThere are two semi-tones between notes except between E and F, and B and C, which give us a total of 12 tones (keys).  \n\n[Wikipedia: 12 equal temperament](https:\/\/en.wikipedia.org\/wiki\/12_equal_temperament)  \n  \nIn the data this feature has integers from 0 to 11, representing the following keys:","14ff9f2f":"- The bars were sorted by number of songs in each category, may be there are other sorts that could give another insight","8e252fc7":"- % of popularity remain stable between 0 and 3 missing values per row. Then it goes down, but also goes down the number of rows for 4, 5 and 6 missing values per row.\n","a079b46c":"### The greatest positive correlation\nEnergy vs Loudness","b5608521":"- % Popular for D minor is not being plotted (?)","b3218190":"#### Another way, for training and test together","e2ff8325":"## Target distribution","1157fff1":"### Missing values in same row (observation)","8e8705a6":"## Show `% Popular songs` in secondary axis","ebacba27":"#### What's next with categoricals...\n\n- Explore the relation between \ud83c\udfbc `audio_mode` and \ud83d\ude0c\ud83d\ude04 `audio_valence` and maybe \ud83d\udd09\ud83d\ude49 `loudness`\n- Explore the relation between \ud83e\udd41 `time_signature` and \ud83d\udc83\ud83c\udfff\ud83e\udd38\ud83c\udffd `danceability`","2efb5d61":"## Distribution of numerical features (Red: Popular vs Green: Not popular)","3fd35cb2":"- I didn't expect that there were more minor than major scale songs\n- The % Popular is the same by mode","4949e35e":"## Loading data","60132ed2":"### Train data","3c3afbe2":"### Completeness bar charts"}}