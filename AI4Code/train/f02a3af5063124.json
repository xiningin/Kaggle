{"cell_type":{"ba4ca2a2":"code","44cdf5a4":"code","76145ad2":"code","84b944ae":"code","4a76acdd":"code","063f7cf0":"code","c0aa802b":"code","a38a1c08":"markdown"},"source":{"ba4ca2a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n #   for filename in filenames:\n  #      print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","44cdf5a4":"import cv2\nimport os\n\nimage_meta_path = \"\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv\"\nimage_path = \"\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/\"\nimage_meta = pd.read_csv(image_meta_path)\nimage_meta[\"height\"] = 0\nimage_meta[\"width\"] = 0","76145ad2":"from torch.utils.data import DataLoader, Dataset #Create an efficient dataloader set to feed images to the model\n\nclass TrainData(Dataset):\n\n    def __init__(self, dataframe, image_dir, transforms = None):\n        super().__init__()\n        self.df = dataframe\n        self.image_ids = dataframe['image_name'].unique()\n        self.image_dir = image_dir\n\n\n    def __getitem__(self, idx: int):\n        image_id = self.image_ids[idx]\n        image = cv2.imread(f'{self.image_dir}\/{image_id}.jpg', cv2.IMREAD_COLOR)\n        #image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        height = image.shape[0]\n        width = image.shape[1]\n        \n        return image_id, height, width\n    \n    def __len__(self) -> int:\n        return self.image_ids.shape[0]\n\ntrain_dataset = TrainData(image_meta, image_path)\n\ndef sizefinder(image):\n    image_id = image[0]\n    height = image[1]\n    width = image[2]\n    image_meta.loc[image_meta['image_name'] == image_id, ['height']] = height\n    image_meta.loc[image_meta['image_name'] == image_id, ['width']] = width\n    \n    \nsizefinder = [sizefinder(image) for image in train_dataset]\nimage_meta.to_csv(\"ImageSizes.csv\", index= False)","84b944ae":"image_meta","4a76acdd":"import matplotlib.pyplot as plt\n\npd.DataFrame.hist(image_meta, column = \"image_name\", by = \"height\")","063f7cf0":"import seaborn as sns\nimage_meta = pd.read_csv(\"\/kaggle\/input\/imagesizes\/image_meta.csv\")\nheight = sns.kdeplot(image_meta[\"height\"])","c0aa802b":"width = sns.kdeplot(image_meta[\"width\"])","a38a1c08":"This notebook does simple EDA for the dataset to see the distribution of original sizes. It is common to downscale all images for initial training to save processor power. However, as we can see with this notebook there is some distinct groups of original sizes - some very large - and hence a considerable amount of data may be lost."}}