{"cell_type":{"49f52070":"code","bc8f1088":"code","878d8fa9":"code","9926b9b2":"code","9a0ff5e3":"code","416e0809":"code","695b8f30":"code","4156afee":"code","041f274d":"code","fa9b75b2":"code","559b1ee4":"markdown","c7c64e76":"markdown","a6244391":"markdown","508351e2":"markdown","4ce8d061":"markdown","34ae4b20":"markdown","beec2423":"markdown","26665f7c":"markdown"},"source":{"49f52070":"import numpy as np \nimport pandas as pd \n\nimport seaborn as sns\nimport matplotlib.pyplot as plt \n\nfrom sklearn import datasets \nfrom sklearn import manifold  \n\nfrom sklearn.cluster import KMeans \n\n%matplotlib inline\n\nimport numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Conv2D, MaxPool2D, UpSampling2D, Activation\nfrom keras import backend as K\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nfrom sklearn import manifold\nfrom sklearn import datasets","bc8f1088":"data = datasets.fetch_openml(\n 'mnist_784',\n version=1,\n return_X_y=True\n)\npixel_values, targets = data\ntargets=targets.astype(int)","878d8fa9":"tsne=manifold.TSNE(n_components=2)\ntransformed_data = tsne.fit_transform(pixel_values[:3000, :])# only using the first 3000 images","9926b9b2":"tsne_df = pd.DataFrame(\nnp.column_stack((transformed_data, targets[:3000])),\ncolumns=[\"x\", \"y\", \"targets\"]\n)\ntsne_df.loc[:, \"targets\"] = tsne_df.targets.astype(int)","9a0ff5e3":"tsne_df.x=tsne_df.x\/(max(tsne_df.x)) \ntsne_df.y=tsne_df.y\/(max(tsne_df.y)) # scaling the tsne data to 0-1\ntsne_df[:10]","416e0809":"grid = sns.FacetGrid(tsne_df, hue=\"targets\", height=8)\ngrid.map(plt.scatter, \"x\", \"y\").add_legend()","695b8f30":"X=tsne_df[['x','y']]\nX.x=X.x\/(max(X.x))\nX.y=X.y\/(max(X.y))","4156afee":"kmeans=KMeans(n_clusters=10, init='k-means++',random_state=4)\ny_pred=kmeans.fit_predict(X)","041f274d":"X=X.values\nplt.figure(figsize=(10,10))\nplt.scatter(X[y_pred==0,0],X[y_pred==0,1],c='red',label='cluster 0')\nplt.scatter(X[y_pred==1,0],X[y_pred==1,1],c='blue',label='cluster 1')\nplt.scatter(X[y_pred==2,0],X[y_pred==2,1],c='green',label='cluster 2')\nplt.scatter(X[y_pred==3,0],X[y_pred==3,1],c='yellow',label='cluster 3')\nplt.scatter(X[y_pred==4,0],X[y_pred==4,1],c='orange',label='cluster 4')\nplt.scatter(X[y_pred==5,0],X[y_pred==5,1],c='cyan',label='cluster5 ')\nplt.scatter(X[y_pred==6,0],X[y_pred==6,1],c='black',label='cluster 6')\nplt.scatter(X[y_pred==7,0],X[y_pred==7,1],c='magenta',label='cluster 7')\nplt.scatter(X[y_pred==8,0],X[y_pred==8,1],c='brown',label='cluster 8')\nplt.scatter(X[y_pred==9,0],X[y_pred==9,1],c='pink',label='cluster 9')\nplt.legend()\nplt.show()","fa9b75b2":"plt.figure(figsize=(10,10))\nplt.scatter(X[tsne_df.targets==0,0],X[tsne_df.targets==0,1],c='red')\nplt.scatter(X[tsne_df.targets==1,0],X[tsne_df.targets==1,1],c='blue')\nplt.scatter(X[tsne_df.targets==2,0],X[tsne_df.targets==2,1],c='green')\nplt.scatter(X[tsne_df.targets==3,0],X[tsne_df.targets==3,1],c='yellow')\nplt.scatter(X[tsne_df.targets==4,0],X[tsne_df.targets==4,1],c='orange')\nplt.scatter(X[tsne_df.targets==5,0],X[tsne_df.targets==5,1],c='cyan')\nplt.scatter(X[tsne_df.targets==6,0],X[tsne_df.targets==6,1],c='black')\nplt.scatter(X[tsne_df.targets==7,0],X[tsne_df.targets==7,1],c='magenta')\nplt.scatter(X[tsne_df.targets==8,0],X[tsne_df.targets==8,1],c='brown')\nplt.scatter(X[tsne_df.targets==9,0],X[tsne_df.targets==9,1],c='pink')\nplt.show()","559b1ee4":"# Plotting the data learnt from Kmeans Algorithm","c7c64e76":"# Plotting and comparing with matplotlib","a6244391":"# Loading the data","508351e2":"# From Comparing both the above graphs\nWe can see that the Kmeans algorithm has done a good job in clustering although at parts where the data was too close it has some difficulties.\n* cluster red = 4\n* cluster blue = 3\n* cluster green = 1\n* cluster yellow = 5\n* cluster orange = 6\n* cluster cyan = 7\n* cluster black = 2 \n* cluster magenta = 8\n* cluster brown = 9\n* cluster pink = 0","4ce8d061":"# Plotting our data","34ae4b20":"# Importing the directories","beec2423":"# Using Kmeans algorithm on the data","26665f7c":"# Visualising with tsne"}}