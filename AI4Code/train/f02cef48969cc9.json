{"cell_type":{"044e73f1":"code","2f9a9aa1":"code","81ab571a":"code","9f162c7c":"code","f6d78235":"code","8b627976":"code","040ccfa5":"code","b2bf3db4":"code","8203b07b":"code","882d3e5f":"code","f8ccdb4f":"code","d1d99edf":"code","624bacba":"code","8b14f9fc":"code","14c0be13":"code","fa98f156":"code","44b00d1e":"code","28a3a221":"code","3a423cde":"code","f36480e9":"code","4fc5f38a":"code","c26d5a09":"code","4eb8d1d3":"code","95dcaa20":"code","4b5bcf1d":"code","077147f2":"code","229bdcb6":"code","e792a08b":"code","d89565f4":"code","d1db06a0":"code","ccc0436e":"code","77a9c2f7":"code","e3a352c6":"code","dd341869":"code","9bb44794":"code","cd14e05a":"code","68523b3c":"code","913e1d05":"markdown"},"source":{"044e73f1":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns","2f9a9aa1":"df = pd.read_csv('..\/input\/nba2k20-player-dataset\/nba2k20-full.csv')","81ab571a":"df.head()","9f162c7c":"#dropping unnecessary values \n\ndf.drop('jersey', axis = 1, inplace = True)\ndf.drop('college', axis = 1, inplace = True)","f6d78235":"#renaming misspelled or edited columns\n\ndf.rename(columns={'b_day' : 'age'}, inplace=True)\ndf.rename(columns={'draft_peak' : 'draft_pick'}, inplace=True)","8b627976":"#processing the data to prepare for analysis \n\ndf['salary'] = df['salary'].str.replace('$', '')\ndf['draft_round'] = df['draft_round'].str.replace('Undrafted', '0')\ndf['draft_pick'] = df['draft_pick'].str.replace('Undrafted', '0')","040ccfa5":"#fixing discrepancy in datatypes\n\ndf[['salary', 'draft_year', 'draft_pick']] = df[['salary', 'draft_year', 'draft_pick']].apply(pd.to_numeric)","b2bf3db4":"#removing metric measurements\n\ndf[\"age\"] = pd.to_datetime(df[\"age\"]).dt.year\ndf[\"height\"] = df[\"height\"].str.split(\"\/\").str[1].astype(\"float\")\ndf[\"weight\"] = df[\"weight\"].str.split(\"\/\").str[1].str[0:-3].astype(\"float\")","8203b07b":"#changing from date of birth to current age as of 2021\n\nyear = 2021\ndf['age'] = year - df['age'].values","882d3e5f":"df['draft_round'] = df['draft_round'].apply(pd.to_numeric)","f8ccdb4f":"df.dtypes","d1d99edf":"#updated dataframe looking much better for analysis and prediction\n\ndf","624bacba":"#creating a copy of preserve the original dataset and apply the new one to our machine learning algorithms \n\ndf2 = df.copy()","8b14f9fc":"df2['draft_year'] = year - df2['draft_year'].values\ndf2.rename(columns={'draft_year' : 'active seasons'}, inplace=True)","14c0be13":"#data exploration\n\nplt.figure(figsize=(10, 5))\nplt.title(\"Salary distribution by team\", fontsize=18)\nx = sns.boxplot(x=\"team\", y=\"salary\", data=df)\nplt.xticks(rotation = 'vertical')","fa98f156":"plt.figure(figsize = (8,5))\nplt.title(\"Salary by age\", fontsize=18)\nsns.stripplot(x='age', y='salary', data = df2, jitter = True, alpha = 0.5)\nsns.pointplot(x='age', y='salary', data = df2, join = False, palette = 'muted')","44b00d1e":"plt.figure(figsize = (8,5))\nplt.title(\"Salary by seasons played\", fontsize=18)\nsns.stripplot(x='active seasons', y = 'salary', data = df2)","28a3a221":"plt.figure(figsize = (13,6))\nplt.title(\"Salary by draft pick\", fontsize=18)\nsns.barplot(x='draft_pick', y = 'salary', data = df)\nsns.pointplot(x = 'draft_pick', y = 'salary', data = df, scale = 0.6, color = 'k')","3a423cde":"p = sns.boxplot(x='position', y='salary', data = df)\nplt.xticks([0, 1, 2, 3, 4, 5, 6], ['C','C-F','F','F-C','F-G','G','G-F'])","f36480e9":"plt.figure(figsize=(10, 5))\nplt.title(\"Rating by team\", fontsize=18)\nx = sns.boxplot(x=\"team\", y=\"rating\", data=df)\nplt.xticks(rotation = 'vertical')","4fc5f38a":"#encoding columns\n\nfrom sklearn.preprocessing import LabelEncoder\n\nencode = LabelEncoder()\n\nencode.fit(df.position.drop_duplicates())\ndf.position = encode.transform(df.position)\n\nencode.fit(df2.position.drop_duplicates())\ndf2.position = encode.transform(df2.position)","c26d5a09":"df.corr()","4eb8d1d3":"#the heatmap visualizes correlation between various factors\n\nplt.figure(figsize = (8,6))\ncorr = df.corr()\nsns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap = 'vlag', square = True)","95dcaa20":"#dropping columns that don't contribute to the prediction\n\ndf2.drop(['full_name','country','draft_round','draft_pick'], axis = 1, inplace = True)","4b5bcf1d":"df2.drop('team', axis = 1, inplace = True)","077147f2":"#rearranging columns\n\ndf2 = df2[['rating','position','age','height','weight','active seasons','salary']]","229bdcb6":"#final dataset to be used in our algorithms \n\ndf2","e792a08b":"#Here we enter the predictive analysis portion of the project\n#We are predicting the salary of NBA players based on their NBA 2K ratings, position, age, height, weight, and number of seasons\n#played\n\nx = df2.iloc[:, 0:5].values\ny = df2.iloc[:, -1].values","d89565f4":"#splitting the variables in 90:10 ratio to provide enough training data as our dataset is pretty small\n\nfrom sklearn.model_selection import train_test_split\n\nxTrain, xTest, yTrain, yTest = train_test_split(x,y, test_size = 0.10, random_state = 0)","d1db06a0":"print(xTrain.shape)\nprint(yTrain.shape)","ccc0436e":"#linear regression resulting in a accuracy of 80%, pretty good considering our training set has less than 400 values\n\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\nlr.fit(xTrain, yTrain)\n\npred = lr.predict(xTest)\n\nprint('Linear Regression Score: %.3f' % lr.score(xTest,yTest))","77a9c2f7":"plt.figure(figsize = (8,5))\nsns.regplot(x = 'rating', y = 'salary', data  = df, color = 'royalblue')\nplt.title('Linear Regression Plot')","e3a352c6":"f, ax = plt.subplots(1, figsize=(6, 3), sharex=True)\n\nsns.stripplot(x = yTest.flatten(), color = 'darkmagenta', alpha = 0.7, label = 'Test Data')\nsns.stripplot(x = pred.flatten(), color = 'lawngreen', alpha = 0.7, label = 'Predicted Data')\nplt.xlabel('salary')\nplt.title('Linear Regression Accuracy')\nplt.legend()\nplt.show()","dd341869":"#Random Forest Regressor yielding a similar accuracy as the Linear Regression Model\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score,mean_squared_error\n\nrfr = RandomForestRegressor(n_estimators = 43, random_state = 0)\nrfr.fit(xTrain, yTrain)\n\nrfrYpred = rfr.predict(xTest)\n\nrfrScore = r2_score(yTest,rfrYpred)\nprint('R2 score: %.3f' % rfrScore)","9bb44794":"f, ax = plt.subplots(1, figsize=(6, 3), sharex=True)\n\nsns.stripplot(x = yTest.flatten(), color = 'darkmagenta', alpha = 0.7, label = 'Test Data')\nsns.stripplot(x = pred.flatten(), color = 'lawngreen', alpha = 0.7, label = 'Predicted Data')\nplt.xlabel('salary')\nplt.title('Random Forest Regressor Accuracy')\nplt.legend()\nplt.show()","cd14e05a":"#Support Vector Classifier accuracy reaching about 70%\n\nfrom sklearn.svm import SVC\nsvclassifier = SVC(kernel='linear')\nsvclassifier.fit(xTrain, yTrain)\n\nsvm = svclassifier.predict(xTest)\n\nsvmScore = r2_score(yTest,svm)\nprint('R2 score: %.3f' % svmScore)","68523b3c":"f, ax = plt.subplots(1, figsize=(6, 3), sharex=True)\n\nsns.stripplot(x = yTest.flatten(), color = 'darkmagenta', alpha = 0.7, label = 'Test Data')\nsns.stripplot(x = pred.flatten(), color = 'lawngreen', alpha = 0.7, label = 'Predicted Data')\nplt.xlabel('salary')\nplt.title('SVM Accuracy')\nplt.legend()\nplt.show()","913e1d05":"Our models gave us a relatively high accuracy given the fact that the dataset had only 429 rows. This exact project done in the year 2050 will yield a higer accuracy as the NBA and NBA 2K will have more players who would've played and been featured in the videogame. "}}