{"cell_type":{"56f9dbd5":"code","07abaaa9":"code","5eaaca74":"code","de1ae458":"code","41474461":"code","b3eca970":"code","39b232a4":"code","8eeb86de":"code","b2aeb481":"code","76a22092":"code","8b43c524":"code","5de35b3f":"code","c61a8fc4":"code","913f65ea":"code","c949f0bb":"code","ffa75947":"code","af304b16":"code","a3e25d85":"code","16a54ec2":"code","8946b374":"code","87b283f7":"code","b6ab2ba1":"code","1fc12c92":"code","9993de3a":"code","1b7aa126":"code","7e7c20b1":"code","f3482ac0":"code","4ccbe7d0":"code","27fdf77e":"code","df843d41":"code","0f602de5":"code","fbb8de99":"code","a863a4b9":"code","9b5e58ce":"code","ddcf3950":"code","76616d68":"code","c0c0c0d0":"markdown","05c94916":"markdown","95243979":"markdown","8c7aa2c1":"markdown","3058098f":"markdown","c6994f9b":"markdown","359e31db":"markdown","6b2805f5":"markdown","d9efd8bc":"markdown","60513d34":"markdown","fb73054f":"markdown","c03dd6de":"markdown","ce69f878":"markdown","9df764a0":"markdown","1fd3a751":"markdown","e71a2574":"markdown","99ec03b2":"markdown","2a9bd0fd":"markdown","1cde42d5":"markdown","8b1d2c3a":"markdown","331e24a9":"markdown","e900ca3c":"markdown","a312d4bc":"markdown","8ea66244":"markdown","d3fe12ee":"markdown","17586733":"markdown","cc1d1d83":"markdown","923bf7a9":"markdown","d9cd436d":"markdown","a531836f":"markdown","805cdfbc":"markdown","20b43f6d":"markdown","145142c1":"markdown","3b4ead09":"markdown","ac85443a":"markdown","f929da27":"markdown","a0430408":"markdown","3115889c":"markdown","9a219cea":"markdown","9072eaa3":"markdown","d58ac590":"markdown","7ae8575f":"markdown","4be1169f":"markdown","1c09777f":"markdown","ee047353":"markdown"},"source":{"56f9dbd5":"import numpy as np\nimport pandas as pd","07abaaa9":"%matplotlib inline\nimport matplotlib.pyplot as plot\nimport seaborn as sns\nsns.set_style('whitegrid')\n","5eaaca74":"plot.rcParams[\"figure.figsize\"]=(30,15)\nSMALL_SIZE = 20\nMEDIUM_SIZE = 22\nBIG_SIZE = 25\n\nplot.rc('font', size=BIG_SIZE)          # controls default text sizes\nplot.rc('axes', titlesize=BIG_SIZE)     # fontsize of the axes title\nplot.rc('axes', labelsize=BIG_SIZE)    # fontsize of the x and y labels\nplot.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\nplot.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\nplot.rc('legend', fontsize=MEDIUM_SIZE)    # legend fontsize\nplot.rc('figure', titlesize=BIG_SIZE)  # fontsize of the figure title","de1ae458":"df=pd.read_csv(\"..\/input\/montcoalert\/911.csv\")","41474461":"df.info()","b3eca970":"df.head()","39b232a4":"df['zip'].value_counts().head(5)","8eeb86de":"df['twp'].value_counts().head(5)","b2aeb481":"df['addr'].value_counts().head(5)","76a22092":"def extract(Title):\n   new=Title.split(':',1)\n   return new[0]\n\ndf['Dept']=df.apply(lambda x:extract(x[\"title\"]),axis=1)","8b43c524":"def extract2(Title):\n   new=Title.split(':',1)\n   return new[1]\n\ndf['ExactR']=df.apply(lambda x:extract(x[\"title\"]),axis=1)","5de35b3f":"fig,ax = plot.subplots()\nb=sns.countplot(df['Dept'],data=df,palette='Set1',ax=ax)\nb.axes.set_title(\"Dept vs Number of calls\")\nb.set_xlabel(\"Department\")\nb.set_ylabel(\"Number of calls\")\nplot.savefig('noofcalls.jpg', format='jpeg', dpi=70)\n","c61a8fc4":"fig,ax = plot.subplots()\nb=sns.countplot(x=df['ExactR'],palette='Set1',data=df,order=df.ExactR.value_counts().iloc[:5].index,ax=ax)\nb.axes.set_title(\"Reasons vs Number of calls\")\nb.set_xlabel(\"Reason\")\nb.set_ylabel(\"Number of calls\")\nplot.savefig('noofcallsbyreason.jpg', format='jpeg', dpi=70)","913f65ea":"df['timeStamp'].astype('str')","c949f0bb":"df['timeStamp']=pd.to_datetime(df['timeStamp'])\ndf['timeStamp']","ffa75947":"df['Hour']=pd.Series(df['timeStamp'].apply(lambda time: time.hour))\ndf['Month']=pd.Series(df['timeStamp'].apply(lambda time: time.month))\ndf['Day']=pd.Series(df['timeStamp'].apply(lambda time: time.day_name()))","af304b16":"df.info()","a3e25d85":"df['Day'] = df['Day'].map({'Monday': 'Mon', 'Tuesday': 'Tue','Wednesday': 'Wed','Thursday': 'Thu','Friday': 'Fri','Saturday': 'Sat','Sunday': 'Sun'}).astype(str)","16a54ec2":"fig,ax=plot.subplots()\nsns.countplot(df['Day'],hue=df['Dept'],palette='Set1',order=df['Day'].value_counts().index,ax=ax) # Checking for the weekday with most calls\nplot.legend(bbox_to_anchor=(1.05, 1),loc=2, borderaxespad=0)","8946b374":"fig,ax=plot.subplots(ncols=3)\nsns.countplot(df['Day'],data=df,palette='Set1',order = df['Day'].value_counts().index, ax=ax[0]).set_title('All seasons')\nsns.countplot(df['Day'][df['Month'].isin([10,11,12,1,2,3])],palette='Set1',order = df['Day'].value_counts().index,ax=ax[1]).set_title('Winter')\nsns.countplot(df['Day'][df['Month'].isin([4,5,6,7,8,9])],palette='Set1',order = df['Day'].value_counts().index,ax=ax[2]).set_title('Summer')","87b283f7":"fig,ax=plot.subplots()\nsns.countplot(df['Month'],hue=df['Dept'],palette='Set1',ax=ax)\nplot.legend(bbox_to_anchor=(1.05,1), loc=2, borderaxespad=0)","b6ab2ba1":"bymonth=df.groupby('Month')['Dept'].count() # Used only one columns to save space and reduce redundancy\nbymonth","1fc12c92":"bymonth.plot()","9993de3a":"sns.lmplot(x='Month',y='Dept',data=bymonth.reset_index(),height=8,aspect=2)","1b7aa126":"df['Date']=pd.Series(df['timeStamp'].apply(lambda x:x.date()))","7e7c20b1":"df.groupby('Date').count()['title'].plot()\nplot.title('All calls to 911')","f3482ac0":"df[df['Dept']=='Traffic'].groupby('Date').count()['Dept'].plot()\nplot.title('911 calls due to traffic')","4ccbe7d0":"df[df['Dept']=='Fire'].groupby('Date').count()['Dept'].plot()\nplot.title('911 calls due to Fire')","27fdf77e":"df[df['Dept']=='EMS'].groupby('Date').count()['Dept'].plot()\nplot.title('911 calls to Emergency Medical Services')","df843d41":"df.groupby(by=['Day','Hour']).count()['Dept']","0f602de5":"de=df.groupby(by=['Day','Hour']).count()['Dept'].unstack()\nde.head()","fbb8de99":"\nsns.heatmap(de,cmap='summer_r')","a863a4b9":"sns.clustermap(de,cmap='summer_r')","9b5e58ce":"dm=df.groupby(by=['Day','Month']).count()['Dept'].unstack()\ndm.head()","ddcf3950":"sns.heatmap(dm,cmap='summer_r')","76616d68":"sns.clustermap(dm,cmap='summer_r')","c0c0c0d0":"Even after seperating the data in seasons (summer\/winter), \nFridays still have a higher than usual count for 911 calls.\n\n*The data suggests that if the police wants to effectively(crimes vs patrols) boost patrols in a chosen weekday, it should be Fridays.*","05c94916":"___\n**Now let us begin to focus on time of these calls. What is the data type of the objects in the timeStamp column?**","95243979":"## Creating new features from the dataset","8c7aa2c1":"**Calls to EMS, according to date**","3058098f":"# Heatmaps and Clustermaps for a fresh perspective at the data.","c6994f9b":"**Thank you for time. I hope this was a useful exploratory data analysis.** \n","359e31db":"## Data and Setup","6b2805f5":"**We create a group by object called byMonth, where you group the DataFrame by the month column and use the count() method for aggregation.**","d9efd8bc":"**911 calls by Month:**","60513d34":"**The top 5 zipcodes for 911 calls (and crimes \u2620\ufe0f)**","fb73054f":"Let's split the dates from 'timestamp' for further analysis","c03dd6de":"**You can now grab specific attributes from a Datetime object by calling them. For example:**\n\n    time = df['timeStamp'].iloc[0]\n    time.hour\n\n**Creating 3 new columns called Hour, Month, and Day of Week to better compare and analyze the data. The day month and hour of the accident matter if we want to analysize the data better and works towards reducing the number of calls (and mishaps\/accidents)**","ce69f878":"**911 calls on days of the week**","9df764a0":"**A HeatMap of Days vs Hours**","1fd3a751":"**Created a new column called 'Date' that contains the date from the timeStamp column.** ","e71a2574":"The data contains:\n\n* lat : String variable, Latitude\n* lng: String variable, Longitude\n* desc: String variable, Description of the Emergency Call\n* zip: String variable, Zipcode\n* title: String variable, Title\n* timeStamp: String variable, YYYY-MM-DD HH:MM:SS\n* twp: String variable, Township\n* addr: String variable, Address\n* e: String variable, Dummy variable (always 1)","99ec03b2":"# 911 Calls Exploratory Data Analysis","2a9bd0fd":"*If you have any comments\/suggestions feel free to comment below.*\n\n*As the saying goes, 'There is always scope for improvement' (This saying is wholly true for me because I'm new to data science \ud83d\ude03)*","1cde42d5":"On a quick glance we can see that the Department and injury types are in the 'title' column and it is structured as **Department:Injury type**.\n\nLet's extract Dept of call from the 'title' column.","8b1d2c3a":"**A countplot of top 5 reasons for 911 calls**","331e24a9":"**Heatmap of Days vs Months.**","e900ca3c":"**Calls due to Traffic, according to date**","a312d4bc":"Creating a dataframe using groupby on Days and Months","8ea66244":"## Exploring the basics of the database","d3fe12ee":"Interesting, Fridays are at the number 1 position for 911 calls. (Freaky Friday for real \ud83d\ude28.)\n\nLet's now see whether this trend continues if we split the data to different seasons of the month.","17586733":"I have converted weekdays to their shorter forms for better labelling in plots.","cc1d1d83":"**A simple plot off of the dataframe indicating the count of calls per month**","923bf7a9":"____\n**Now let's move on to creating  heatmaps with seaborn and our data. We'll first need to restructure the dataframe so that the columns become the Hours and the Index becomes the Day of the Week. We do this by trying to combine groupby with an [unstack](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.unstack.html) method.** \n\nNote that without unstack, the values would be stacked according to the weekdays in axis 0. Example-","d9cd436d":"*If you have any comments\/suggestions feel free to comment below.*\n\n*As the saying goes, 'There is always scope for improvement' (Haha this saying is wholly true for me because I'm spanking new to this \u263a\ufe0f)*","a531836f":"**The top 5 townships (twp) for 911 calls  (and crimes \u2620\ufe0f)**","805cdfbc":"Let's try another way of analyzing the data and plot it according to months.","20b43f6d":"Create dataframe using groupby on Days and Hours and using the unstack() method.","145142c1":"**Grouping by this Date column with the count() aggregate and creating a plot of counts of 911 calls.**","3b4ead09":"**Let's use seaborn's lmplot() to create a linear fit on the number of calls per month. We needed to reset index because month is not an column yet.**","ac85443a":"Importing necessary visualization libraries and reading the dataset.","f929da27":"**The linear regression model suggests a similar story.** \n\n\"*In winters not only the weather becomes cold, people do too.*\"","a0430408":"**Calls due to Fire, according to date**","3115889c":"The number of calls go up as the season changes from summers to winters and falls back to the lowest around September (9th month)","9a219cea":"**Let's convert object types (which are actually strings pointed by object) to the date time format**","9072eaa3":"# Let's plot these new features now","d58ac590":"Now, let's extract the injury type from the 'title' column.","7ae8575f":"**A clustermap using this DataFrame**","4be1169f":"**The top 5 addresses (addr) for 911 calls (and crimes \u2620\ufe0f)**","1c09777f":"**A cluster map according to months.**","ee047353":"**A countplot of 911 calls by Departments**"}}