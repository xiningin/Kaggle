{"cell_type":{"9b1602bc":"code","06e55262":"code","416b280d":"code","aee52585":"code","cfb9f176":"code","885666ee":"code","92d128ae":"code","0f93d43d":"code","def71a47":"code","e991b2c4":"code","fd5afe5b":"code","bdb4fbdd":"code","3256c80b":"code","4b4aac63":"code","1e878967":"code","8a8b8aa3":"code","9ce875b9":"code","d0704cf4":"code","76f52443":"code","99bcd1fc":"markdown","a869cf3c":"markdown","74b5a512":"markdown","e782ec13":"markdown","ebcfc2ce":"markdown","2e0e3e6f":"markdown","605053c1":"markdown"},"source":{"9b1602bc":"import numpy as np\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom PIL import Image","06e55262":"import torch\nfrom torchvision import datasets, models, transforms\nimport torch.nn as nn\nfrom torch.nn import functional as F\nimport torch.optim as optim","416b280d":"torch.__version__  # should be 0.4.1","aee52585":"import torchvision\ntorchvision.__version__  # should be 0.2.1","cfb9f176":"# Kaggle Kernel-dependent\ninput_path = \"..\/input\/alien_vs_predator_thumbnails\/data\/\"","885666ee":"normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                                 std=[0.229, 0.224, 0.225])\n\ndata_transforms = {\n    'train':\n    transforms.Compose([\n        transforms.Resize((224,224)),\n        transforms.RandomAffine(0, shear=10, scale=(0.8,1.2)),\n        transforms.RandomHorizontalFlip(),\n        transforms.ToTensor(),\n        normalize\n    ]),\n    'validation':\n    transforms.Compose([\n        transforms.Resize((224,224)),\n        transforms.ToTensor(),\n        normalize\n    ]),\n}\n\nimage_datasets = {\n    'train': \n    datasets.ImageFolder(input_path + 'train', data_transforms['train']),\n    'validation': \n    datasets.ImageFolder(input_path + 'validation', data_transforms['validation'])\n}\n\ndataloaders = {\n    'train':\n    torch.utils.data.DataLoader(image_datasets['train'],\n                                batch_size=32,\n                                shuffle=True,\n                                num_workers=0),  # for Kaggle\n    'validation':\n    torch.utils.data.DataLoader(image_datasets['validation'],\n                                batch_size=32,\n                                shuffle=False,\n                                num_workers=0)  # for Kaggle\n}","92d128ae":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\ndevice","0f93d43d":"model = models.resnet50(pretrained=True).to(device)\n    \nfor param in model.parameters():\n    param.requires_grad = False   \n    \nmodel.fc = nn.Sequential(\n               nn.Linear(2048, 128),\n               nn.ReLU(inplace=True),\n               nn.Linear(128, 2)).to(device)","def71a47":"criterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.fc.parameters())","e991b2c4":"def train_model(model, criterion, optimizer, num_epochs=3):\n    for epoch in range(num_epochs):\n        print('Epoch {}\/{}'.format(epoch+1, num_epochs))\n        print('-' * 10)\n\n        for phase in ['train', 'validation']:\n            if phase == 'train':\n                model.train()\n            else:\n                model.eval()\n\n            running_loss = 0.0\n            running_corrects = 0\n\n            for inputs, labels in dataloaders[phase]:\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n\n                outputs = model(inputs)\n                loss = criterion(outputs, labels)\n\n                if phase == 'train':\n                    optimizer.zero_grad()\n                    loss.backward()\n                    optimizer.step()\n\n                _, preds = torch.max(outputs, 1)\n                running_loss += loss.item() * inputs.size(0)\n                running_corrects += torch.sum(preds == labels.data)\n\n            epoch_loss = running_loss \/ len(image_datasets[phase])\n            epoch_acc = running_corrects.double() \/ len(image_datasets[phase])\n\n            print('{} loss: {:.4f}, acc: {:.4f}'.format(phase,\n                                                        epoch_loss,\n                                                        epoch_acc))\n    return model","fd5afe5b":"model_trained = train_model(model, criterion, optimizer, num_epochs=3)","bdb4fbdd":"!mkdir models\n!mkdir models\/pytorch","3256c80b":"torch.save(model_trained.state_dict(), 'models\/pytorch\/weights.h5')","4b4aac63":"model = models.resnet50(pretrained=False).to(device)\nmodel.fc = nn.Sequential(\n               nn.Linear(2048, 128),\n               nn.ReLU(inplace=True),\n               nn.Linear(128, 2)).to(device)\nmodel.load_state_dict(torch.load('models\/pytorch\/weights.h5'))","1e878967":"validation_img_paths = [\"validation\/alien\/11.jpg\",\n                        \"validation\/alien\/22.jpg\",\n                        \"validation\/predator\/33.jpg\"]\nimg_list = [Image.open(input_path + img_path) for img_path in validation_img_paths]","8a8b8aa3":"validation_batch = torch.stack([data_transforms['validation'](img).to(device)\n                                for img in img_list])","9ce875b9":"pred_logits_tensor = model(validation_batch)\npred_logits_tensor","d0704cf4":"pred_probs = F.softmax(pred_logits_tensor, dim=1).cpu().data.numpy()\npred_probs","76f52443":"fig, axs = plt.subplots(1, len(img_list), figsize=(20, 5))\nfor i, img in enumerate(img_list):\n    ax = axs[i]\n    ax.axis('off')\n    ax.set_title(\"{:.0f}% Alien, {:.0f}% Predator\".format(100*pred_probs[i,0],\n                                                            100*pred_probs[i,1]))\n    ax.imshow(img)","99bcd1fc":"### 2. Create PyTorch data generators","a869cf3c":"There is some error (even though the same version work on my own computer):\n\n> RuntimeError: DataLoader worker (pid 56) is killed by signal: Bus error. Details are lost due to multiprocessing. Rerunning with num_workers=0 may give better error trace.\n> RuntimeError: DataLoader worker (pid 59) exited unexpectedly with exit code 1. Details are lost due to multiprocessing. Rerunning with num_workers=0 may give better error trace.\n \nSee [this issue](https:\/\/github.com\/pytorch\/pytorch\/issues\/5301) and [that thread](https:\/\/discuss.pytorch.org\/t\/dataloader-randomly-crashes-after-few-epochs\/20433\/2). Setting `num_workers=0` in `DataLoader` solved it.","74b5a512":"### 4. Train the model","e782ec13":"### 3. Create the network","ebcfc2ce":"### 6. Make predictions on sample test images","2e0e3e6f":"For the general context, see  also:\n\n* A deepsense.ai blog post [Keras vs. PyTorch - Alien vs. Predator recognition with transfer learning](https:\/\/deepsense.ai\/keras-vs-pytorch-avp-transfer-learning) in which we compare and contrast Keras and PyTorch approaches.\n* Repo with code: [github.com\/deepsense-ai\/Keras-PyTorch-AvP-transfer-learning](https:\/\/github.com\/deepsense-ai\/Keras-PyTorch-AvP-transfer-learning).\n* Free event: [upcoming webinar (10 Oct 2018)](https:\/\/www.crowdcast.io\/e\/KerasVersusPyTorch\/register), in which we walk trough the code (and you will be able to ask questions).\n\n### 1. Import dependencies","605053c1":"### 5. Save and load the model"}}