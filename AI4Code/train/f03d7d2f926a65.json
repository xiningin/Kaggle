{"cell_type":{"c2865da4":"code","8a93f43a":"code","0aedfc9b":"code","30cb37c4":"code","b706d3b7":"code","58b0f1a6":"code","73716d23":"code","6d92f1be":"code","5c27213b":"code","a28426d9":"code","3e130f4e":"code","4670ee31":"code","c7810835":"code","821d9ea4":"code","144e092b":"code","1d5626d7":"code","2468559b":"code","cf0d97ff":"code","a1dd5028":"code","278cae11":"markdown","3d2b15a0":"markdown","350fc188":"markdown","2ab1d7c8":"markdown","3aa5b243":"markdown","c529179b":"markdown","3400120d":"markdown","6d2fda65":"markdown","7f7d65a8":"markdown","d26f2f08":"markdown","048d72bd":"markdown","c5f00a48":"markdown"},"source":{"c2865da4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8a93f43a":"df = pd.read_csv('..\/input\/telecom_churn.csv')\ndf.head()\ndf.columns\ndf.info()\ndf.sort_values(by='Total day charge', ascending=False).head()\ndf['Churn'] = df['Churn'].astype('int64')\ndf['Churn'].value_counts()","0aedfc9b":"df.loc[0:5, 'State':'Area code']","30cb37c4":"df.iloc[0:5, 4:6]","b706d3b7":"df.iloc[-1:]","58b0f1a6":"df[df['State'].apply(lambda state:state[0] == 'W')].head()","73716d23":"d = {'No' : False, 'Yes' : True}\ndf['International plan'] = df['International plan'].map(d)\ndf.head()","6d92f1be":"df = df.replace({'Voice mail plan': d})\ndf.head()","5c27213b":"columns_to_show = ['Total day minutes', 'Total eve minutes', 'Total night minutes']\ndf.groupby(['Churn'])[columns_to_show].describe(percentiles=[])","a28426d9":"pd.crosstab(df['Churn'], df['International plan'])","3e130f4e":"total_calls = df['Total day calls'] + df['Total eve calls'] + df['Total night calls'] + df['Total intl calls']\ndf.insert(loc=len(df.columns), column='Total calls', value=total_calls) \ndf.head()","4670ee31":"df['Total charge'] = df['Total day charge'] + df['Total eve charge'] + df['Total night charge'] + df['Total intl charge']\ndf.head()","c7810835":"# Delete columns\ndf.drop(['Total calls', 'Total charge'], axis=1, inplace=True)\n# Delete rows\ndf.drop([1, 2]).head()","821d9ea4":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.rcParams['figure.figsize'] = (8, 6)\nsns.countplot(x='International plan', hue='Churn', data=df);","144e092b":"pd.crosstab(df['Churn'], df['Customer service calls'], margins=True)\nsns.countplot(x='Customer service calls', hue='Churn', data=df)","1d5626d7":"df['Many_service_calls'] = (df['Customer service calls'] > 3).astype('int')\ndf.head()","2468559b":"pd.crosstab(df['Many_service_calls'], df['Churn'], margins=True)\nsns.countplot(x='Many_service_calls', hue='Churn', data=df);","cf0d97ff":"pd.crosstab(df['Many_service_calls'] & df['International plan'], df['Churn'])","a1dd5028":"sns.countplot(x='International plan', hue='Churn', data=df);","278cae11":"Picture clearly states that the **Churn** rate strongly increases starting from 4 calls to the service center.\n\nAdd a binary attribute to our DataFrame - **Customer service calls > 3**","3d2b15a0":"Add a column more easily without creating an intermediate Series instance","350fc188":"**DataFrame transformations** - Add\/Remove columns to existing DataFrame\nCalculate the total number of calls for all users","2ab1d7c8":"**Group by** - Syntax **df.groupby(by=grouping_columns)[columns_to_show].function()**","3aa5b243":"Relationship between **Many_service_calls** and **International plan** with **Churn**","c529179b":"**Predicting Telecom Churn**\nRelation between churn rate and international plan and visual analysis with **Seaborn**","3400120d":"Relationship between **Many_service_calls** and **Churn**","6d2fda65":"**map** method can be used to **replace the values in the columns** by passing a dictionary of the form *{old_value: new_value}* as arguments.","7f7d65a8":"**Delete columns and rows**\nMethod - **drop**\nParameters - **indexes**, **axis**: **1** to delete columns and **0** to delete rows and **inplace**: **True** change in original DataFrame and **False** doesn't change original DataFrame","d26f2f08":"**Summary tables** - Helps us how the observations for our sample are distributed in context of two variables.\nWe can use **crosstab** Contingency Table","048d72bd":"    Relation between **Customer Service Call** with **Churn**","c5f00a48":"Appling function to cells, columns and rows. Use **apply()** function"}}