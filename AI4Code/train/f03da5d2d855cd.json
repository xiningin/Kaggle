{"cell_type":{"bab48d99":"code","a4ea2a23":"code","7d23a39a":"code","48d3da63":"code","c16585d6":"code","06639c1e":"code","e18e10d0":"code","3fa73dc3":"code","a805f93d":"code","a0d9bf47":"code","dfe877bf":"code","e4b7d48a":"code","5c106f7b":"code","4b6b5643":"code","eb16232d":"markdown","d22de070":"markdown","65a62730":"markdown","04c38e70":"markdown","dcade02c":"markdown"},"source":{"bab48d99":"import numpy as np \nimport pandas as pd \n\nimport os","a4ea2a23":"loading = pd.read_csv('\/kaggle\/input\/trends-assessment-prediction\/loading.csv')\nfeatures = pd.read_csv('\/kaggle\/input\/trends-assessment-prediction\/train_scores.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/trends-assessment-prediction\/sample_submission.csv')\nfnc = pd.read_csv(\"\/kaggle\/input\/trends-assessment-prediction\/fnc.csv\")\nscore = pd.read_csv(\"\/kaggle\/input\/trends-assessment-prediction\/train_scores.csv\")","7d23a39a":"fnc_features, loading_features = list(fnc.columns[1:]), list(loading.columns[1:])\n","48d3da63":"df = fnc.merge(loading, on=\"Id\")\nscore[\"is_train\"] = True\ndf = df.merge(score, on=\"Id\", how=\"left\")\ntest_df = df[df[\"is_train\"] != True].copy()\ndf = df[df[\"is_train\"] == True].copy()\n","c16585d6":"FNC_SCALE = 1\/400\n\ndf[fnc_features] *= FNC_SCALE\ntest_df[fnc_features] *= FNC_SCALE","06639c1e":"features = loading_features + fnc_features\n","e18e10d0":"from sklearn.model_selection import KFold\n\ndef metric(y_true, y_pred):\n    return np.mean(np.sum(np.abs(y_true - y_pred), axis=0)\/np.sum(y_true, axis=0))","3fa73dc3":"import sklearn\nfrom sklearn.svm import SVR","a805f93d":"%%time\nNUM_FOLDS = 10\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=0)\n\n\nfeatures = loading_features + fnc_features\n\noveral_score = 0\nfor target, c, w in [(\"age\", 50, 0.3), (\"domain1_var1\", 5, 0.175), (\"domain1_var2\", 5, 0.175), (\"domain2_var1\", 5, 0.175), (\"domain2_var2\", 5, 0.175)]:    \n    y_oof = np.zeros(df.shape[0])\n    y_test = np.zeros((test_df.shape[0], NUM_FOLDS))\n    \n    for f, (train_ind, val_ind) in enumerate(kf.split(df, df)):\n        train_df, val_df = df.iloc[train_ind], df.iloc[val_ind]\n        train_df = train_df[train_df[target].notnull()]\n\n        model = SVR(C=c, cache_size=3000.0)\n        model.fit(train_df[features], train_df[target])\n\n        y_oof[val_ind] = model.predict(val_df[features])\n        y_test[:, f] = model.predict(test_df[features])\n        \n    df[\"pred_{}\".format(target)] = y_oof\n    test_df[target] = y_test.mean(axis=1)\n    score = metric(df[df[target].notnull()][target].values, df[df[target].notnull()][\"pred_{}\".format(target)].values)\n    overal_score += w*score\n    print(target, np.round(score, 4))\n    print()\n    \nprint(\"Overal score:\", np.round(overal_score, 4))","a0d9bf47":"sub_df4 = pd.melt(test_df[[\"Id\", \"age\", \"domain1_var1\", \"domain1_var2\", \"domain2_var1\", \"domain2_var2\"]], id_vars=[\"Id\"], value_name=\"Predicted\")\nsub_df4[\"Id\"] = sub_df4[\"Id\"].astype(\"str\") + \"_\" +  sub_df4[\"variable\"].astype(\"str\")\n\nsub_df4 = sub_df4.drop(\"variable\", axis=1).sort_values(\"Id\")\n","dfe877bf":"sub_df4.to_csv(\"submission50.csv\", index=False, float_format='%.6f')","e4b7d48a":"%%time\nNUM_FOLDS = 10\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=0)\n\n\nfeatures = loading_features + fnc_features\n\noveral_score = 0\nfor target, c, w in [(\"age\", 80, 0.3), (\"domain1_var1\", 8, 0.175), (\"domain1_var2\", 8, 0.175), (\"domain2_var1\", 8, 0.175), (\"domain2_var2\", 8, 0.175)]:    \n    y_oof = np.zeros(df.shape[0])\n    y_test = np.zeros((test_df.shape[0], NUM_FOLDS))\n    \n    for f, (train_ind, val_ind) in enumerate(kf.split(df, df)):\n        train_df, val_df = df.iloc[train_ind], df.iloc[val_ind]\n        train_df = train_df[train_df[target].notnull()]\n\n        model = SVR(C=c, cache_size=3000.0)\n        model.fit(train_df[features], train_df[target])\n\n        y_oof[val_ind] = model.predict(val_df[features])\n        y_test[:, f] = model.predict(test_df[features])\n        \n    df[\"pred_{}\".format(target)] = y_oof\n    test_df[target] = y_test.mean(axis=1)\n    score = metric(df[df[target].notnull()][target].values, df[df[target].notnull()][\"pred_{}\".format(target)].values)\n    overal_score += w*score\n    print(target, np.round(score, 4))\n    print()\n    \nprint(\"Overal score:\", np.round(overal_score, 4))","5c106f7b":"sub_df4 = pd.melt(test_df[[\"Id\", \"age\", \"domain1_var1\", \"domain1_var2\", \"domain2_var1\", \"domain2_var2\"]], id_vars=[\"Id\"], value_name=\"Predicted\")\nsub_df4[\"Id\"] = sub_df4[\"Id\"].astype(\"str\") + \"_\" +  sub_df4[\"variable\"].astype(\"str\")\n\nsub_df4 = sub_df4.drop(\"variable\", axis=1).sort_values(\"Id\")\n","4b6b5643":"sub_df4.to_csv(\"submission80.csv\", index=False, float_format='%.6f')","eb16232d":"## Import data","d22de070":"\n\n*************************************\n\n\n# Scikit-Learn\n\n\n************************************\n\n\n## Import Scikit-Learn, create Support Vector Machine model ","65a62730":"## Transform data","04c38e70":"## Import libraries","dcade02c":"## Train SVR"}}