{"cell_type":{"cd9c4345":"code","4dc5afa5":"code","928ef675":"code","3234ca2b":"code","f735e0ed":"code","a0f3ab8f":"code","6bd16ad7":"code","8ea79109":"code","dec0a4f8":"code","89717c74":"code","8de7b228":"markdown","bd5a6cb2":"markdown","d1365015":"markdown","0647aa56":"markdown","95660ce7":"markdown","f2a86245":"markdown","799985eb":"markdown","c2d4cf09":"markdown"},"source":{"cd9c4345":"# 1. Enable Internet in the Kernel (Settings side pane)\n\n# 2. Curl cache may need purged if v0.1.4 cannot be found (uncomment if needed). \n# !curl -X PURGE https:\/\/pypi.org\/simple\/kaggle-environments\n\n# ConnectX environment was defined in v0.1.4\n!pip install 'kaggle-environments>=0.1.4'","4dc5afa5":"from kaggle_environments import evaluate, make\nfrom kaggle_environments.envs.connectx import connectx as ctx\n\nenv = make(\"connectx\", debug=True)\nenv.render()","928ef675":"def my_agent(observation, configuration):\n    \n    from random import choice\n    \n    # me:me_or_enemy=1, enemy:me_or_enemy=2\n    def check_vertical_chance(me_or_enemy):\n        for i in range(0, 7):\n            if observation.board[i+7*5] == me_or_enemy \\\n            and observation.board[i+7*4] == me_or_enemy \\\n            and observation.board[i+7*3] == me_or_enemy \\\n            and observation.board[i+7*2] == 0:\n                return i\n            elif observation.board[i+7*4] == me_or_enemy \\\n            and observation.board[i+7*3] == me_or_enemy \\\n            and observation.board[i+7*2] == me_or_enemy \\\n            and observation.board[i+7*1] == 0:\n                return i\n            elif observation.board[i+7*3] == me_or_enemy \\\n            and observation.board[i+7*2] == me_or_enemy \\\n            and observation.board[i+7*1] == me_or_enemy \\\n            and observation.board[i+7*0] == 0:\n                return i\n        # no chance\n        return -99\n    \n    # me:me_or_enemy=1, enemy:me_or_enemy=2\n    def check_horizontal_chance(me_or_enemy):\n        chance_cell_num = -99\n        for i in [0,7,14,21,28,35]:\n            for j in range(0, 4):\n                val_1 = i+j+0\n                val_2 = i+j+1\n                val_3 = i+j+2\n                val_4 = i+j+3\n                if sum([observation.board[val_1] == me_or_enemy, \\\n                        observation.board[val_2] == me_or_enemy, \\\n                        observation.board[val_3] == me_or_enemy, \\\n                        observation.board[val_4] == me_or_enemy]) == 3:\n                    for k in [val_1,val_2,val_3,val_4]:\n                        if observation.board[k] == 0:\n                            chance_cell_num = k\n                            # bottom line\n                            for l in range(35, 42):\n                                if chance_cell_num == l:\n                                    return l - 35\n                            # others\n                            if observation.board[chance_cell_num+7] != 0:\n                                return chance_cell_num % 7\n        # no chance\n        return -99\n    \n    # me:me_or_enemy=1, enemy:me_or_enemy=2\n    def check_slanting_chance(me_or_enemy, lag, cell_list):\n        chance_cell_num = -99\n        for i in cell_list:\n            val_1 = i+lag*0\n            val_2 = i+lag*1\n            val_3 = i+lag*2\n            val_4 = i+lag*3\n            if sum([observation.board[val_1] == me_or_enemy, \\\n                    observation.board[val_2] == me_or_enemy, \\\n                    observation.board[val_3] == me_or_enemy, \\\n                    observation.board[val_4] == me_or_enemy]) == 3:\n                for j in [val_1,val_2,val_3,val_4]:\n                    if observation.board[j] == 0:\n                        chance_cell_num = j\n                        # bottom line\n                        for k in range(35, 42):\n                            if chance_cell_num == k:\n                                return k - 35\n                        # others\n                        if chance_cell_num != -99 \\\n                        and observation.board[chance_cell_num+7] != 0:\n                            return chance_cell_num % 7\n        # no chance\n        return -99\n    \n    def check_horizontal_first_enemy_chance():\n        # enemy's chance\n        if observation.board[38] == enemy_num:\n            if sum([observation.board[39] == enemy_num, observation.board[40] == enemy_num]) == 1 \\\n            and observation.board[37] == 0:\n                for i in range(39, 41):\n                    if observation.board[i] == 0:\n                        return i - 35\n            if sum([observation.board[36] == enemy_num, observation.board[37] == enemy_num]) == 1 \\\n            and observation.board[39] == 0:\n                for i in range(36, 38):\n                    if observation.board[i] == 0:\n                        return i - 35\n        # no chance\n        return -99\n\n    def check_first_or_second():\n        count = 0\n        for i in observation.board:\n            if i != 0:\n                count += 1\n        # first\n        if count % 2 != 1:\n            my_num = 1\n            enemy_num = 2\n        # second\n        else:\n            my_num = 2\n            enemy_num = 1\n        return my_num, enemy_num\n    \n    # check first or second\n    my_num, enemy_num = check_first_or_second()\n    \n    def check_my_chances():\n        # check my virtical chance\n        result = check_vertical_chance(my_num)\n        if result != -99:\n            return result\n        # check my horizontal chance\n        result = check_horizontal_chance(my_num)\n        if result != -99:\n            return result\n        # check my slanting chance 1 (up-right to down-left)\n        result = check_slanting_chance(my_num, 6, [3,4,5,6,10,11,12,13,17,18,19,20])\n        if result != -99:\n            return result\n        # check my slanting chance 2 (up-left to down-right)\n        result = check_slanting_chance(my_num, 8, [0,1,2,3,7,8,9,10,14,15,16,17])\n        if result != -99:\n            return result\n        # no chance\n        return -99\n    \n    def check_enemy_chances():\n        # check horizontal first chance\n        result = check_horizontal_first_enemy_chance()\n        if result != -99:\n            return result\n        # check enemy's vertical chance\n        result = check_vertical_chance(enemy_num)\n        if result != -99:\n            return result\n        # check enemy's horizontal chance\n        result = check_horizontal_chance(enemy_num)\n        if result != -99:\n            return result\n        # check enemy's slanting chance 1 (up-right to down-left)\n        result = check_slanting_chance(enemy_num, 6, [3,4,5,6,10,11,12,13,17,18,19,20])\n        if result != -99:\n            return result\n        # check enemy's slanting chance 2 (up-left to down-right)\n        result = check_slanting_chance(enemy_num, 8, [0,1,2,3,7,8,9,10,14,15,16,17])\n        if result != -99:\n            return result\n        # no chance\n        return -99\n    \n    if my_num == 1:\n        result = check_my_chances()\n        if result != -99:\n            return result\n        result = check_enemy_chances()\n        if result != -99:\n            return result\n    if my_num == 2:\n        result = check_enemy_chances()\n        if result != -99:\n            return result\n        result = check_my_chances()\n        if result != -99:\n            return result\n    \n    # select center as priority (3 > 2 > 4 > 1 > 5 > 0 > 6)\n    # column 3\n    if observation.board[24] != enemy_num \\\n    and observation.board[17] != enemy_num \\\n    and observation.board[10] != enemy_num \\\n    and observation.board[3] == 0:\n        return 3\n    # column 2\n    elif observation.board[23] != enemy_num \\\n    and observation.board[16] != enemy_num \\\n    and observation.board[9] != enemy_num \\\n    and observation.board[2] == 0:\n        return 2\n    # column 4\n    elif observation.board[25] != enemy_num \\\n    and observation.board[18] != enemy_num \\\n    and observation.board[11] != enemy_num \\\n    and observation.board[4] == 0:\n        return 4\n    # column 1\n    elif observation.board[22] != enemy_num \\\n    and observation.board[15] != enemy_num \\\n    and observation.board[8] != enemy_num \\\n    and observation.board[1] == 0:\n        return 1\n    # column 5\n    elif observation.board[26] != enemy_num \\\n    and observation.board[19] != enemy_num \\\n    and observation.board[12] != enemy_num \\\n    and observation.board[5] == 0:\n        return 5\n    # column 0\n    elif observation.board[21] != enemy_num \\\n    and observation.board[14] != enemy_num \\\n    and observation.board[7] != enemy_num \\\n    and observation.board[0] == 0:\n        return 0\n    # column 6\n    elif observation.board[27] != enemy_num \\\n    and observation.board[20] != enemy_num \\\n    and observation.board[13] != enemy_num \\\n    and observation.board[6] == 0:\n        return 6\n    # random\n    else:\n        return ctx.negamax_agent(observation, configuration)","3234ca2b":"env.reset()\n# Play as the first agent against default \"random\" agent.\nenv.run([my_agent, \"random\"])\n# env.run([my_agent, \"negamax\"])\nenv.render(mode=\"ipython\", width=500, height=450)","f735e0ed":"env.reset()\n# Play as the first agent against default \"random\" agent.\nenv.run([\"random\", my_agent])\n# env.run([my_agent, \"negamax\"])\nenv.render(mode=\"ipython\", width=500, height=450)","a0f3ab8f":"env.reset()\n# my agent VS my agent\nenv.run([my_agent, my_agent])\n# env.run([my_agent, \"negamax\"])\nenv.render(mode=\"ipython\", width=500, height=450)","6bd16ad7":"# Play as first position against random agent.\ntrainer = env.train([None, \"random\"])\n\nobservation = trainer.reset()","8ea79109":"while not env.done:\n    my_action = my_agent(observation, env.configuration)\n    print(\"My Action\", my_action)\n    observation, reward, done, info = trainer.step(my_action)\n    env.render(mode=\"ipython\", width=100, height=90, header=False, controls=False)\nenv.render()","dec0a4f8":"def mean_reward(rewards):\n    return sum(r[0] for r in rewards) \/ sum(r[0] + r[1] for r in rewards)\n\n# Run multiple episodes to estimate it's performance.\nprint(\"My Agent vs Random Agent:\", mean_reward(evaluate(\"connectx\", [my_agent, \"random\"], num_episodes=10000)))\nprint(\"Random Agent vs My Agent:\", mean_reward(evaluate(\"connectx\", [\"random\", my_agent], num_episodes=10000)))\n# print(\"My Agent vs Negamax Agent:\", mean_reward(evaluate(\"connectx\", [my_agent, \"negamax\"], num_episodes=1000)))","89717c74":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(my_agent, \"submission.py\")","8de7b228":"fork from : https:\/\/www.kaggle.com\/ajeffries\/connectx-getting-started<br><br>\nI customized only \"my_agent\" cell.<br>\nMy agent VS random agent, winning average is over 99%.","bd5a6cb2":"# Install kaggle-environments","d1365015":"# Evaluate your Agent","0647aa56":"# Create an Agent","95660ce7":"# Debug\/Train your Agent","f2a86245":"# Create ConnectX Environment","799985eb":"# Write Submission File\n\n","c2d4cf09":"# Test your Agent"}}