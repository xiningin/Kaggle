{"cell_type":{"f9bf77b9":"code","ddcf9a48":"code","8bcdbec1":"code","ed1de1ec":"code","352b4b91":"code","03e02201":"code","8ae79b5a":"code","fd164ba4":"code","c0d036f2":"code","ebb3578d":"code","fd2c89d1":"code","7a0e1f3e":"code","cb4ee90a":"code","02421caf":"code","eb8f8618":"code","4ed3b824":"code","3b48f3b7":"code","2394a392":"markdown","9380c9b4":"markdown","000fd2e0":"markdown","8b56fc2c":"markdown"},"source":{"f9bf77b9":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings(action='ignore')\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.metrics import f1_score\n\nimport os","ddcf9a48":"# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\ntrain = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/sample_submission.csv')","8bcdbec1":"# 1) columns \uc81c\uac70\ntrain.drop(['id','education','relationship','native_country','workclass'], axis=1, inplace=True)\ntest.drop(['id','education','relationship','native_country','workclass'], axis=1, inplace=True)","ed1de1ec":"# 2) marital_status \uc870\uc815\n## married_civ_spouse -> 1 \ub098\uba38\uc9c0\ub294 0\ntrain['marital_status'] = (train['marital_status'] == 'Married-civ-spouse').astype(int)\ntest['marital_status'] = (test['marital_status'] == 'Married-civ-spouse').astype(int)","352b4b91":"# 1) capital_gain, capital_loss: log \ucc98\ub9ac + \uc0c8 \ubcc0\uc218 \uc0dd\uc131\ntrain['cap_gain_high'] = (train['capital_gain'] != 0).astype(int)\ntest['cap_gain_high'] = (test['capital_gain'] != 0).astype(int)\n\ntrain['cap_loss_high'] = (train['capital_loss'] >= 1700).astype(int)\ntest['cap_loss_high'] = (test['capital_loss'] >= 1700).astype(int)\n\ntrain['capital_gain'] = train['capital_gain'].map(lambda x : np.log(x) if x != 0 else 0)\ntest['capital_gain']  = test['capital_gain'].map(lambda x : np.log(x) if x != 0 else 0)","03e02201":"# 2) age\ntrain.loc[train['age'] < 20, 'age_range'] = '~20'\ntrain.loc[train['age'] >= 65, 'age_range'] = '~65'\ntest.loc[test['age'] < 20, 'age_range'] = '~20'\ntest.loc[test['age'] >= 65, 'age_range'] = '~65'\n\ndown = 20\nfor i in range(45\/\/5):\n    train.loc[(train['age'] >= down) & (train['age'] < down+5), 'age_range'] = str(down)+'~'+str(down+5)\n    test.loc[(test['age'] >= down) & (test['age'] < down+5), 'age_range'] = str(down)+'~'+str(down+5)\n    down += 5\n\ntrain['age'] = train['age_range']\ntrain.drop(['age_range'], axis=1, inplace=True)\ntest['age'] = test['age_range']\ntest.drop(['age_range'], axis=1, inplace=True)","8ae79b5a":"# 3) Categorical: One-hot encoding\ntrain = pd.get_dummies(train)\ntest = pd.get_dummies(test)","fd164ba4":"# 4) fnlwgt","c0d036f2":"# 5) education_num\nmm_scaler = MinMaxScaler()\n\ntrain['edu_num_high'] = (train['education_num'] >= 13).astype(int)\ntest['edu_num_high']  = (test['education_num'] >= 13).astype(int)\n\ntrain['education_num'] = mm_scaler.fit_transform(train['education_num'].values.reshape(-1,1))\ntest['education_num'] = mm_scaler.fit_transform(test['education_num'].values.reshape(-1,1))","ebb3578d":"# 6) hours_per_week\ntrain['hpw_high'] = (train['hours_per_week'] >= 50).astype(int)\ntest['hpw_high']  = (test['hours_per_week'] >= 50).astype(int)\n\ntrain['hours_per_week'] = mm_scaler.fit_transform(train['hours_per_week'].values.reshape(-1,1))\ntest['hours_per_week'] = mm_scaler.fit_transform(test['hours_per_week'].values.reshape(-1,1))","fd2c89d1":"# 7) target value \ud558\ub098\ub9cc \ub098\uc624\uac8c \uc218\uc815 + \ubd84\ub9ac\ntrain['income'] = train['income_>50K']\ntrain.drop(['income_>50K','income_<=50K'], axis=1, inplace=True)\n\ny_train = train.income\nX_train = train.drop(['income'], axis=1, inplace=False)","7a0e1f3e":"X_test = test","cb4ee90a":"dt_clf = DecisionTreeClassifier()\ndt_clf.fit(X_train, y_train)","02421caf":"y_test_predict = dt_clf.predict(X_test).astype(int)","eb8f8618":"sample_submission['prediction'] = dt_clf.predict(X_test).astype(int)\nsample_submission.to_csv('submission3.csv', index=False)","4ed3b824":"# 1) column \uc81c\uac70\ndef col_reduction(df):\n    df.drop(['id','education','relationship','native_country','workclass'], axis=1, inplace=True)\n    \n    return df\n\n# 2) marital_status \uc870\uc815\ndef mar_st(df):\n    df['marital_status'] = (df['marital_status'] == 'Married-civ-spouse').astype(int)\n    \n    return df\n\n# 3) capital_gain, loss \uc870\uc815\ndef capital(df):\n    df['cap_gain_high'] = (df['capital_gain'] != 0).astype(int)\n    df['cap_loss_high'] = (df['capital_loss'] >= 1700).astype(int)\n    df['capital_gain'] = df['capital_gain'].map(lambda x : np.log(x) if x != 0 else 0)\n    \n    return df\n\n# 4) age \uc870\uc815 \ud568\uc218\ndef age(df):\n    df.loc[df['age'] < 20, 'age_range'] = '~20'\n    df.loc[df['age'] >= 65, 'age_range'] = '~65'\n\n    down = 20\n    for i in range(45\/\/5):\n        df.loc[(df['age'] >= down) & (df['age'] < down+5), 'age_range'] = str(down)+'~'+str(down+5)\n        down += 5\n\n    df['age'] = df['age_range']\n    df.drop(['age_range'], axis=1, inplace=True)\n    \n    return df\n    \n# 5) One-hot encoding\uc740 \ub9cc\ub4e4\uc9c0 \uc54a\uc558\ub2e4.\n\n# 6) edu_num, hpw \uc870\uc815 (Minmax scaler \ub54c\ubb38\uc5d0 \ud569\uccd0\uc11c \ud574\ubd24\ub2e4.)\ndef mm_features(df):\n    mm_scaler = MinMaxScaler()\n    \n    df['edu_num_high'] = (df['education_num'] >= 13).astype(int)\n    df['education_num'] = mm_scaler.fit_transform(df['education_num'].values.reshape(-1,1))\n    \n    df['hpw_high'] = (df['hours_per_week'] >= 50).astype(int)\n    df['hours_per_week'] = mm_scaler.fit_transform(df['hours_per_week'].values.reshape(-1,1))\n    \n    return df\n\n# 7) target \ubd84\ub9ac: train\uc740 \ud558\uace0, test\ub294 \uc548\ud558\ubbc0\ub85c \ub530\ub85c \ub9cc\ub4e4\uaca0\ub2e4.\ndef target_handle(df):\n    df['income'] = df['income_>50K']\n    df.drop(['income_>50K','income_<=50K'], axis=1, inplace=True)\n    \n    y_df = df.income\n    X_df = df.drop(['income'], axis=1, inplace=False)\n    \n    return X_df, y_df\n\ndef main(df):\n    \n    df1 = col_reduction(df)\n    df2 = mar_st(df1)\n    df3 = capital(df2)\n    df4 = age(df3)\n    \n    df5 = pd.get_dummies(df4)\n    \n    df_fin = mm_features(df5)\n    \n    return df_fin","3b48f3b7":"# \uc801\uc6a9\ntrain = main(train)\nX_train, y_train = target_handle(train)\nX_test = main(test)","2394a392":"# 3. \ud568\uc218\ud654\n- \uc77c\ub2e8\uc740 Preprocessing \uacfc\uc815\ub9cc \uc218\ud589","9380c9b4":"# 1. \ub370\uc774\ud130 \ubcc0\ud615\n## 1-1. Categorical\n1. column \uc81c\uac70: id, education, relationship, native_country, workclass\n2. marital_status \uc870\uc815: married_civ_spouse -> 1 \ub098\uba38\uc9c0\ub294 0\n3. occupation, sex, race: onehot encoding (\uc5ec\uae30\uc120 income\ub3c4 encoding\ub418\uc11c income \ubcc0\uc218 1 or 0\uc73c\ub85c \ubcc0\uacbd\ud568","000fd2e0":"## 1-2. numerical\n1. capital_gain, capital_loss: log \ucc98\ub9ac\ud558\uace0, \uc0c8 \ubcc0\uc218 \uc0dd\uc131\n    - cap_gain_high: capital_gain\uc774 0\uc774 \uc544\ub2c8\uba74 1, 0\uc774\uba74 0\n    - cap_loss_high: capital_loss\uac00 1700\ubcf4\ub2e4 \ud06c\uba74 1, \uc791\uc73c\uba74 0\n2. age: categorical\ud574\uc11c onehot encoding (0\\~20 \/ 20\\~65\ub97c 5\uc138 \ub2e8\uc704\ub85c \/ 65~)\n3. fnlwgt: logistic modeling\ud560 \ub54c\ub294 \ud544\uc694\ud55c\ub370, \ub2e4\ub978 \uacf3\uc5d0\ub294 \uc4f8 \uc5ec\uc9c0\uac00 \uc5c6\ub2e4. (\uc5f0\uae30)\n4. education_num: MinMax Scaler, \uc0c8 \ubcc0\uc218 \uc0dd\uc131\n    - edu_num_high: 13\uc774\uc0c1\uc774\uba74 1, \uc544\ub2c8\uba74 0\n5. hours_per_week: MinMax Scaler, \uc0c8 \ubcc0\uc218 \uc0dd\uc131\n    - hpw_high: 50\uc774\uc0c1\uc774\uba74 1, \uc544\ub2c8\uba74 0","8b56fc2c":"# 2. \ubaa8\ub378\ub9c1: \uae30\ub0e5 \ud574\ubd04"}}