{"cell_type":{"a535e799":"code","9d9f8241":"code","6f8bb02c":"code","08c9ffeb":"code","6d307d90":"code","ed433111":"code","2464abd8":"code","1a294148":"code","f6fbc821":"code","d56b9bb9":"code","06d40c14":"code","ff512bad":"code","8d4a62b4":"code","5cd18824":"code","9b4ada95":"code","693ca41a":"code","f9e6bf6e":"code","f36fd88d":"code","f1fde7e9":"code","add8e02c":"code","c8992acd":"code","b26cd1ad":"code","4c146afe":"code","636988e4":"code","2ade8222":"code","14b8fc1d":"code","e646b718":"code","5b7a860f":"code","554d7f16":"markdown","e857b633":"markdown","33f656ad":"markdown","f30731ae":"markdown","3674cb00":"markdown","a64fee1e":"markdown","a785a30d":"markdown","7e8d4704":"markdown","d4bea026":"markdown","6541efce":"markdown","b70708a2":"markdown","24ee5f14":"markdown","5c1ebe3f":"markdown","06965bda":"markdown","18de0d03":"markdown","93b1edda":"markdown","a870952e":"markdown","2c6fbe94":"markdown"},"source":{"a535e799":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport cv2\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\nfrom functools import partial\nimport warnings\nwarnings.filterwarnings('ignore')\nsns.set()","9d9f8241":"os.listdir('..\/input\/plant-village\/PlantVillage\/')","6f8bb02c":"def get_images(directory):\n    Images = []\n    Labels = []  # 0 for Potato___Early_blight , 1 for Potato___Late_blight, 2 for Potato___healthy\n    label = 0\n    \n    for labels in os.listdir(directory): #Main Directory where each class label is present as folder name.\n        if labels == 'Potato___Early_blight': #Folder contain Potato___Early_blight images get the '0' class label.\n            label = 0\n        elif labels == 'Potato___Late_blight':\n            label = 1\n        elif labels == 'Potato___healthy':\n            label = 2\n        else:\n            continue\n        print(labels)\n        for image_file in os.listdir(directory+labels): #Extracting the file name of the image from Class Label folder\n            image = cv2.imread(directory+labels+r'\/'+image_file) #Reading the image (OpenCV)\n            image = cv2.resize(image,(150,150)) #Resize the image, Some images are different sizes. (Resizing is very Important)\n            Images.append(image)\n            Labels.append(label)\n    \n    return shuffle(Images,Labels,random_state=42) #Shuffle the dataset you just prepared.\n\ndef get_classlabel(class_code):\n    labels = {0:'Early blight', 1:'Late blight', 2:'Healthy'}\n    \n    return labels[class_code]","08c9ffeb":"images, labels = get_images('..\/input\/plant-village\/PlantVillage\/') #Extract the images from the folders.\n\nimages = np.array(images) #converting the list of images to numpy array.\nlabels = np.array(labels)","6d307d90":"print(images.shape)\nprint(labels.shape)","ed433111":"def plot_image(image):\n    plt.imshow(image, cmap=\"gray\", interpolation=\"nearest\")\n    plt.axis(\"off\")\n\ndef plot_color_image(image):\n    plt.imshow(image, interpolation=\"nearest\")\n    plt.axis(\"off\")","2464abd8":"plt.figure(figsize=(12, 12))\nfor index in range(25):\n    rnd = np.random.randint(0,len(images))\n    plt.subplot(5, 5, index + 1)\n    plot_color_image(images[index])\n    plt.title(\"Class: {}\".format(get_classlabel(labels[index])))\n    plt.axis(\"off\")\nplt.show()","1a294148":"x_train, x_test, y_train, y_test = train_test_split(images, labels, test_size=0.1, random_state=42, stratify=labels) # split images in train, test sets","f6fbc821":"x_train, x_valid, y_train, y_valid = train_test_split(x_train, y_train, test_size=0.2, random_state=42, stratify=y_train) # split train set in train and validation sets","d56b9bb9":"print(\"Shape of X_train :\", x_train.shape)\nprint(\"Shape of y_train :\", y_train.shape)\nprint(\"Shape of X_valid :\", x_valid.shape)\nprint(\"Shape of y_valid :\", y_valid.shape)\nprint(\"Shape of X_test :\", x_test.shape)\nprint(\"Shape of y_test :\", y_test.shape)","06d40c14":"tf.random.set_seed(42)\nnp.random.seed(42)","ff512bad":"def central_crop(image):\n    shape = tf.shape(image)\n    min_dim = tf.reduce_min([shape[0], shape[1]])\n    top_crop = (shape[0] - min_dim) \/\/ 4\n    bottom_crop = shape[0] - top_crop\n    left_crop = (shape[1] - min_dim) \/\/ 4\n    right_crop = shape[1] - left_crop\n    return image[top_crop:bottom_crop, left_crop:right_crop]\n\ndef random_crop(image):\n    shape = tf.shape(image)\n    min_dim = tf.reduce_min([shape[0], shape[1]]) * 90 \/\/ 100\n    return tf.image.random_crop(image, [min_dim, min_dim, 3])\n\ndef preprocess(image, label, randomize=False):\n    if randomize:\n        cropped_image = random_crop(image)\n        cropped_image = tf.image.random_flip_left_right(cropped_image)\n    else:\n        cropped_image = central_crop(image)\n    resized_image = tf.image.resize(cropped_image, [224, 224])\n    final_image = keras.applications.xception.preprocess_input(resized_image)\n    return final_image, label","8d4a62b4":"train_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train))","5cd18824":"valid_dataset = tf.data.Dataset.from_tensor_slices((x_valid, y_valid))","9b4ada95":"batch_size = 32\ntrain_validation_size = x_train.shape[0] + x_valid.shape[0]\nprint(batch_size, train_validation_size)","693ca41a":"train_dataset = train_dataset.map(partial(preprocess, randomize=True)).batch(batch_size).prefetch(1)","f9e6bf6e":"valid_dataset = valid_dataset.map(preprocess).batch(batch_size).prefetch(1)","f36fd88d":"plt.figure(figsize=(12, 12))\nfor X_batch, y_batch in train_dataset.take(1):\n    for index in range(9):\n        plt.subplot(3, 3, index + 1)\n        plt.imshow(X_batch[index] \/ 2 + 0.5)\n        plt.title(\"Class: {}\".format(get_classlabel(y_batch[index].numpy())))\n        plt.axis(\"off\")\n\nplt.show()","f1fde7e9":"plt.figure(figsize=(12, 12))\nfor X_batch, y_batch in valid_dataset.take(1):\n    for index in range(9):\n        plt.subplot(3, 3, index + 1)\n        plt.imshow(X_batch[index] \/ 2 + 0.5)\n        plt.title(\"Class: {}\".format(get_classlabel(y_batch[index].numpy())))\n        plt.axis(\"off\")\n\nplt.show()","add8e02c":"n_classes = 3 # 3 classes for Potato___Early_blight , 1 for Potato___Late_blight, 2 for Potato___healthy","c8992acd":"base_model = keras.applications.xception.Xception(weights=\"imagenet\",\n                                                  include_top=False)\navg = keras.layers.GlobalAveragePooling2D()(base_model.output)\noutput = keras.layers.Dense(n_classes, activation=\"softmax\")(avg)\nmodel_xception = keras.models.Model(inputs=base_model.input, outputs=output)","b26cd1ad":"for layer in base_model.layers:\n    layer.trainable = False\n\noptimizer = keras.optimizers.SGD(lr=0.2, momentum=0.9, decay=0.01)\nmodel_xception.compile(loss=\"sparse_categorical_crossentropy\", optimizer=optimizer,\n              metrics=[\"accuracy\"])\nhistory = model_xception.fit(train_dataset,\n                    validation_data=valid_dataset,\n                    epochs=5)","4c146afe":"for layer in base_model.layers:\n    layer.trainable = True\n\ncheckpoint_cb = keras.callbacks.ModelCheckpoint(\"\/kaggle\/working\/SavedModels\/potatodisease\/tmp\/checkpoint\",\n                                                monitor='val_accuracy',\n                                                mode='max', \n                                                save_best_only=True)\nearly_stopping_cb = keras.callbacks.EarlyStopping(patience=5,\n                                                  restore_best_weights=True)\noptimizer = keras.optimizers.SGD(learning_rate=0.01, momentum=0.9,\n                                 nesterov=True, decay=0.001)\nmodel_xception.compile(loss=\"sparse_categorical_crossentropy\", optimizer=optimizer,\n              metrics=[\"accuracy\"])\nhistory = model_xception.fit(train_dataset,\n                    validation_data=valid_dataset,\n                    epochs=40,\n                    callbacks=[checkpoint_cb,early_stopping_cb])","636988e4":"model_xception.save('\/kaggle\/working\/h5\/model_potato.h5')","2ade8222":"def plot_training_vs_validation(history):\n  fig, ax = plt.subplots(1,2,figsize=(10,5))\n  ax[0].plot(history.history['accuracy'],'bd--', label = \"train_acc\")\n  ax[0].plot(history.history['val_accuracy'],'rd--', label = \"val_acc\")\n  ax[1].plot(history.history['loss'],'g*--', label = \"train_loss\")\n  ax[1].plot(history.history['val_loss'],'c*--', label = \"val_loss\")\n  ax[0].set_title('Training vs Validation [accuracy]')\n  ax[1].set_title('Training vs Validation [loss]')\n  ax[0].legend()\n  ax[1].legend()\n  ax[0].set_xlabel('Epochs')\n  ax[1].set_xlabel('Epochs')\n  ax[0].set_ylabel('Accuracy')\n  ax[1].set_ylabel('Loss')\n  plt.show()","14b8fc1d":"plot_training_vs_validation(history)","e646b718":"test_dataset = tf.data.Dataset.from_tensor_slices((x_test, y_test))\ntest_dataset = test_dataset.map(preprocess).batch(batch_size)\nlen(test_dataset)\nmodel_xception.evaluate(test_dataset)","5b7a860f":"os.listdir('.\/h5')","554d7f16":"## Setting the Seed to make the results consistent","e857b633":"## Training the full model","33f656ad":"## Plotting Training and Validation","f30731ae":"## Functions to display images","3674cb00":"## Reading the Images","a64fee1e":"## Image Directory","a785a30d":"## Batch size for training and validate in batches","7e8d4704":"## Functions to preprocess images before using them in the model","d4bea026":"## Correspondance between images and labels","6541efce":"## Plotting validation images","b70708a2":"## Loading Xception Model","24ee5f14":"## Importing Libraries","5c1ebe3f":"## Preprocessing the training images with the \"preprocess\" function","06965bda":"## From numpy to tensors dataset format","18de0d03":"## Plotting training images","93b1edda":"## Test set accuracy","a870952e":"## Training only the lasts layers","2c6fbe94":"## Train, validation and test sets: \n* 10% test\n* 20% validation\n* 70% training"}}