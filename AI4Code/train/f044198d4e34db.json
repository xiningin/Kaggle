{"cell_type":{"b70009aa":"code","e9005fda":"code","72f9bf87":"code","7ec09b66":"code","e24c375d":"code","0c43133c":"code","a772787e":"code","c5c95ab2":"code","6f989214":"code","14baf1c9":"code","4ada8335":"code","925324de":"code","41b0f01a":"code","a4ada3df":"code","3972f6ad":"code","f3c3e7fc":"code","15a5c93c":"code","c737af5c":"code","05b36709":"code","a37926ee":"code","b5f9b4d2":"code","85b2325c":"code","71d9429b":"code","b0bcc183":"code","00e4d21c":"code","14980cbc":"code","e4a449eb":"code","e4535a74":"code","ccb24e97":"code","d365896a":"code","45ea5e40":"markdown","c815efc0":"markdown","e5a053e2":"markdown","e4b0fc59":"markdown","89b9a0a6":"markdown","3f921c03":"markdown","f15b16a3":"markdown","bb6cd274":"markdown","109f19ff":"markdown","36edd403":"markdown","bccf155d":"markdown","8eda7062":"markdown","7bb54c1a":"markdown","adcd8186":"markdown"},"source":{"b70009aa":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","e9005fda":"df = pd.read_csv(\"..\/input\/loan-prediction\/train_loan.csv\")","72f9bf87":"df.head(3)","7ec09b66":"df.describe()","e24c375d":"df.shape","0c43133c":"quantitative = [f for f in df.columns if df.dtypes[f] != 'object']\nprint(quantitative)","a772787e":"fig,ax = plt.subplots(figsize=(10,10))\nsns.heatmap(df.corr(),ax=ax,annot= True,linewidth= 0.02,fmt='.2f',cmap = 'Blues')\nplt.show()","c5c95ab2":"df['ApplicantIncome'].hist(bins=50)","6f989214":"df.boxplot(column='ApplicantIncome')","14baf1c9":"df.boxplot(column='ApplicantIncome', by = 'Education')","4ada8335":"df['LoanAmount'].hist(bins=50)","925324de":"df.boxplot(column='LoanAmount')","41b0f01a":"temp1 = df['Credit_History'].value_counts(ascending=True)\ntemp2 = df.pivot_table(values='Loan_Status',index=['Credit_History'],aggfunc=lambda x: x.map({'Y':1,'N':0}).mean())\nprint ('Frequency Table for Credit History:') \nprint (temp1)\n\nprint ('\\nProbility of getting loan for each Credit History class:')\nprint (temp2)","a4ada3df":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(8,4))\nax1 = fig.add_subplot(121)\nax1.set_xlabel('Credit_History')\nax1.set_ylabel('Count of Applicants')\nax1.set_title(\"Applicants by Credit_History\")\ntemp1.plot(kind='bar',color='Black')\n\n\ntemp2.plot(kind = 'bar',color='Black')\nax2 = fig.add_subplot(122)\nax2.set_xlabel('Credit_History')\nax2.set_ylabel('Probability of getting loan')\nax2.set_title(\"Probability of getting loan by credit history\")","3972f6ad":"temp3 = pd.crosstab(df['Credit_History'], df['Loan_Status'])\ntemp3.plot(kind='bar', stacked=True, color=['Red','black'], grid=False)","f3c3e7fc":" df.apply(lambda x: sum(x.isnull()),axis=0) ","15a5c93c":"missing = df.isnull().sum()\nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\nmissing.plot.bar()\nprint(\"Number of attributes having missing values \" + str(len(missing)))\n","c737af5c":"df['LoanAmount'].fillna(df['LoanAmount'].mean(), inplace=True)\ndf['LoanAmount'].isnull().sum()","05b36709":"df['Self_Employed'].value_counts()\n","a37926ee":"df['Self_Employed'].isnull().sum()","b5f9b4d2":"df['Self_Employed'].fillna('NO', inplace=True)\ndf['Self_Employed'].isnull().sum()","85b2325c":"#table = df.pivot_table(values='LoanAmount', index='Self_Employed' ,columns='Education', aggfunc=np.median)\n# Define function to return value of this pivot_table\n#def fage(x):\n #return table.loc[x['Self_Employed'],x['Education']]\n# Replace missing values\n#df['LoanAmount'].fillna(df[df['LoanAmount'].isnull()].apply(fage, axis=1), inplace=True)","71d9429b":"df['LoanAmount'].hist(bins=50)","b0bcc183":"df['LoanAmount_log'] = np.log(df['LoanAmount'])\ndf['LoanAmount_log'].hist(bins=20)","00e4d21c":"df['TotalIncome'] = df['ApplicantIncome'] + df['CoapplicantIncome']\ndf['TotalIncome_log'] = np.log(df['TotalIncome'])\ndf['LoanAmount_log'].hist(bins=20) ","14980cbc":"df['Gender'].fillna(df['Gender'].mode()[0], inplace=True)\ndf['Married'].fillna(df['Married'].mode()[0], inplace=True)\ndf['Dependents'].fillna(df['Dependents'].mode()[0], inplace=True)\ndf['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mode()[0], inplace=True)\ndf['Credit_History'].fillna(df['Credit_History'].mode()[0], inplace=True)","e4a449eb":"from sklearn.preprocessing import LabelEncoder\nvar_mod = ['Gender','Married','Dependents','Education','Self_Employed','Property_Area','Loan_Status']\nle = LabelEncoder()\nfor i in var_mod:\n    df[i] = le.fit_transform(df[i])\ndf.dtypes ","e4535a74":"#import models from scikit learn module:\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import KFold   #For K-fold cross validation\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn import metrics\n\n#Generic function for making a classification model and accessing performance:\ndef classification_model(model, data, predictors, outcome):\n  #Fit the model:\n  model.fit(data[predictors],data[outcome])\n  \n  #Make predictions on training set:\n  predictions = model.predict(data[predictors])\n  \n  #Print accuracy\n  accuracy = metrics.accuracy_score(predictions,data[outcome])\n  print (\"Accuracy : %s\" % \"{0:.3%}\".format(accuracy))\n\n  #Perform k-fold cross-validation with 5 folds\n  kf = KFold(data.shape[0], n_splits=5)\n  error = []\n  for train, test in kf:\n    # Filter training data\n    train_predictors = (data[predictors].iloc[train,:])\n    \n    # The target we're using to train the algorithm.\n    train_target = data[outcome].iloc[train]\n    \n    # Training the algorithm using the predictors and target.\n    model.fit(train_predictors, train_target)\n    \n    #Record error from each cross-validation run\n    error.append(model.score(data[predictors].iloc[test,:], data[outcome].iloc[test]))\n \n  print (\"Cross-Validation Score : %s\" % \"{0:.3%}\".format(np.mean(error)))\n\n  #Fit the model again so that it can be refered outside the function:\n  model.fit(data[predictors],data[outcome])","ccb24e97":"outcome_var = 'Loan_Status'\nmodel = LogisticRegression()\npredictor_var = ['Credit_History','Education','Married','Self_Employed','Property_Area']\nclassification_model(model, df,predictor_var,outcome_var)\n","d365896a":"model = DecisionTreeClassifier()\npredictor_var = ['Credit_History','Gender','Married','Education']\nclassification_model(model, df,predictor_var,outcome_var)","45ea5e40":"We will percentage of employment","c815efc0":"Reading the train dataset using the pandas in a dataframe","e5a053e2":"Replacing the other column null values with mode values","e4b0fc59":"Now we are goind to replace the null values in Loanamount column with the median values using the function.","89b9a0a6":"*Following code sample and datasets has been refered from AV*","3f921c03":"From the above value count almost 80% of persons not self employed,so we will replace the missing values with 'NO'","f15b16a3":"To look the summary of the Numerical fields.","bb6cd274":"**Probability of getting loan.**","109f19ff":"Sometimes loan will be also give based on the co applicant income , so we are adding applicant income and co applicant income.","36edd403":"**Checking the Missing values.**","bccf155d":"As sklearn requires all inputs with numeric , we should convert all our categorical varialbe into numeric by encoding categories.","8eda7062":"Now we are going replace the null values with the mean of loan amount.","7bb54c1a":"To check the first 3 rows from the dataframe.","adcd8186":"**Distribution Analysis**"}}