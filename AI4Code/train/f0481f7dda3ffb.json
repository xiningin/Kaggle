{"cell_type":{"8beecf73":"code","1943dba4":"code","476939d4":"code","e319a7f8":"code","fcaf7d1a":"code","345c21d9":"code","65d96ccc":"code","7ede3260":"code","bf046185":"code","948ed8a6":"code","952e1c4f":"code","c6bdaa0d":"code","df546a4e":"code","b1987be0":"code","3613a842":"code","c1733277":"code","04f1ead2":"code","c9513ab4":"code","f715aaf0":"code","89580bd8":"code","bc805ab8":"code","43e3558c":"code","fabda4d6":"code","02af953c":"code","09470dd0":"code","befab741":"code","ac67d2b1":"code","a8fd5d2a":"code","3776e953":"code","0e15fee7":"code","eaa9536c":"code","0462c296":"code","ede4893d":"code","78b74813":"code","a37b3872":"code","5c38cb49":"code","35918aeb":"code","650f9092":"code","b5b83c54":"code","00424e2f":"code","59dfc425":"code","27e25950":"code","41407e24":"code","e0be060d":"code","39b122af":"code","50040390":"markdown","da34cf56":"markdown","b88c67cc":"markdown","256bf4f3":"markdown"},"source":{"8beecf73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1943dba4":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf_train = pd.read_csv(\"..\/input\/predict-the-diabetes\/train.csv\")\ndf_train.head()","476939d4":"df_test= pd.read_csv(\"..\/input\/predict-the-diabetes\/test.csv\")\ndf_test.head()","e319a7f8":"df_train.set_index('Id').head(5)\n","fcaf7d1a":"df_test.set_index('Id').head(5)","345c21d9":"df_train.isnull().sum()","65d96ccc":"df_test.isnull().sum()","7ede3260":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","bf046185":"#the missing values are 0(S) in the dataset\ndf_train[\"Glucose\"] = df_train[\"Glucose\"].replace(0,df_train[\"Glucose\"].mean())\ndf_train[\"BloodPressure\"] = df_train[\"BloodPressure\"].replace(0,df_train[\"BloodPressure\"].mean())\ndf_train[\"SkinThickness\"] = df_train[\"SkinThickness\"].replace(0,df_train[\"SkinThickness\"].mean())\ndf_train[\"Insulin\"] = df_train[\"Insulin\"].replace(0,df_train[\"Insulin\"].mean())\ndf_train[\"BMI\"] = df_train[\"BMI\"].replace(0,df_train[\"BMI\"].mean())\ndf_train[\"Pregnancies\"] = df_train[\"Pregnancies\"].replace(0,df_train[\"Pregnancies\"].mean())\ndf_train.head(5)\n","948ed8a6":"df_test[\"Glucose\"] = df_test[\"Glucose\"].replace(0,df_test[\"Glucose\"].mean())\ndf_test[\"BloodPressure\"] = df_test[\"BloodPressure\"].replace(0,df_test[\"BloodPressure\"].mean())\ndf_test[\"SkinThickness\"] = df_test[\"SkinThickness\"].replace(0,df_test[\"SkinThickness\"].mean())\ndf_test[\"Insulin\"] = df_test[\"Insulin\"].replace(0,df_test[\"Insulin\"].mean())\ndf_test[\"BMI\"] = df_test[\"BMI\"].replace(0,df_train[\"BMI\"].mean())\ndf_test[\"Pregnancies\"] = df_test[\"Pregnancies\"].replace(0,df_test[\"Pregnancies\"].mean())\ndf_test.head(5)","952e1c4f":"age_labels= [0,1,2,3,4,5]\nage_bins = [20,32,42,51,61,71,100]\ndf_train['Age_group'] = pd.cut(df_train['Age'],bins=age_bins,labels=age_labels)\ndf_test['Age_group'] = pd.cut(df_test['Age'],bins=age_bins,labels=age_labels)\nsns.barplot(x=\"Age_group\", y=\"Outcome\", data=df_train)","c6bdaa0d":"bp_labels= [0,1,2,3,4,5,6,7]\nbp_bins = [20,42,52,62,72,82,92,100,150]\ndf_train['BP_group'] = pd.cut(df_train['BloodPressure'],bins=bp_bins,labels=bp_labels)\ndf_test['BP_group'] = pd.cut(df_test['BloodPressure'],bins=bp_bins,labels=bp_labels)\nsns.barplot(x=\"BP_group\", y=\"Outcome\", data=df_train)","df546a4e":"glucose_labels= [0,1,2,3,4,5]\nglucose_bins = [0,50,100,125,150,250,350]\ndf_train['Glucose_group'] = pd.cut(df_train['Glucose'],bins=glucose_bins,labels=glucose_labels)\ndf_test['Glucose_group'] = pd.cut(df_test['Glucose'],bins=glucose_bins,labels=glucose_labels)\nsns.barplot(x=\"Glucose_group\", y=\"Outcome\", data=df_train)","b1987be0":"sns.barplot(x=\"Pregnancies\", y=\"Outcome\", data=df_train)","3613a842":"#BMI_labels= [0,1,2,3,4,5,6]\n#BMI_bins = [21,27,32,37,42,47,50,300]\n#df_train['BMI_group'] = pd.cut(df_train['BMI'],bins=BMI_bins,labels=BMI_labels)\n#df_test['BMI_group'] = pd.cut(df_test['BMI'],bins=BMI_bins,labels=BMI_labels)\n#sns.barplot(x=\"BMI_group\", y=\"Outcome\", data=df_train)##","c1733277":"insulin_labels=[0,1,2,3,4]\ninsulin_bins=[0,50,100,150,300,850]\ndf_train['insulin_group'] = pd.cut(df_train['Insulin'],bins=insulin_bins,labels=insulin_labels)\ndf_test['insulin_group'] = pd.cut(df_test['Insulin'],bins=insulin_bins,labels=insulin_labels)\nsns.barplot(x=\"insulin_group\", y=\"Outcome\", data=df_train)","04f1ead2":"SkinThickness_labels=[0,1,2,3,4,5,6,7]\nSkinThickness_bins=[0,1,11,21,31,41,50,70,500]\ndf_train['SkinThickness_group'] = pd.cut(df_train['SkinThickness'],bins=SkinThickness_bins,labels=SkinThickness_labels)\ndf_test['SkinThickness_group'] = pd.cut(df_test['SkinThickness'],bins=SkinThickness_bins,labels=SkinThickness_labels)\nsns.barplot(x=\"SkinThickness_group\", y=\"Outcome\", data=df_train)","c9513ab4":"DPFun_labels=[0,1,2,3,4,5,6,7,8,9,10,11,12]\nDPFun_bins=[0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,2,3,4]\ndf_train['DPFun_group'] = pd.cut(df_train['DiabetesPedigreeFunction'],bins=DPFun_bins,labels=DPFun_labels)\ndf_test['DPFun_group'] = pd.cut(df_test['DiabetesPedigreeFunction'],bins=DPFun_bins,labels=DPFun_labels)\nsns.barplot(x=\"DPFun_group\", y=\"Outcome\", data=df_train)","f715aaf0":"df_train['Outcome'].value_counts().plot(kind='bar')","89580bd8":"df_train.describe()","bc805ab8":"df_train.info()","43e3558c":"correl= df_train.corr()\nfig = plt.figure(figsize = (12, 12))\n\nsns.heatmap(correl, vmax = 1, square = True,annot=True,vmin=-1)\nplt.show()\n","fabda4d6":"df_train.describe()","02af953c":"df_test.describe()","09470dd0":"df_train.drop(['Age','BloodPressure',\"Glucose\",\"BMI\",\"Insulin\",\"SkinThickness\",\"DiabetesPedigreeFunction\"],axis=1,inplace=True)\ndf_train.set_index(\"Id\").head()","befab741":"df_test.drop(['Age','BloodPressure',\"Glucose\",\"BMI\",\"Insulin\",\"SkinThickness\",\"DiabetesPedigreeFunction\"],axis=1,inplace=True)","ac67d2b1":"#df_train.info()\ndf_train.dropna()","a8fd5d2a":"X=df_train.drop([\"Outcome\",'Id'],axis=1)\ny = df_train[\"Outcome\"]","3776e953":"X.isnull().sum()","0e15fee7":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","eaa9536c":"X_train.shape","0462c296":"X_test.shape","ede4893d":"from sklearn.linear_model import LogisticRegression \nfrom sklearn.metrics import accuracy_score\nans=LogisticRegression()\nans.fit(X_train,y_train)\nprediction=ans.predict(X_test)\naccuracy_score(y_test,prediction)*100","78b74813":"from sklearn.neighbors import KNeighborsClassifier\nclf = KNeighborsClassifier()\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint(\"Accuracy score using KNN:\", acc*100)","a37b3872":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier()\nclf = clf.fit(X_train,y_train)\n\n\ny_pred = clf.predict(X_test)\n\n\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nresult = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(y_test, y_pred)\nprint(\"Classification Report:\")\nprint (result1)\nresult2 = accuracy_score(y_test,y_pred)\nprint(\"Accuracy:\",result2*100)","5c38cb49":"from sklearn.naive_bayes import GaussianNB\nmodel_GNB = GaussianNB()\nnodel_GNB = model_GNB.fit(X_train, y_train)\ny_pred = model_GNB.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint(\"Accuracy score using GBN\", acc*100)","35918aeb":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 50)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\nac=accuracy_score(y_test,y_pred)\nprint(\"Accuracy score using RandomForest\", ac*100)","650f9092":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nresult = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(y_test, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(y_test,y_pred)\nprint(\"Accuracy:\",result2*100)","b5b83c54":"df_test.drop(['Id'],axis=1,inplace=True)","00424e2f":"df_test.shape","59dfc425":"df_test.isnull().sum()","27e25950":"prediction = ans.predict(df_test)","41407e24":"results_df= pd.DataFrame({'Outcome': prediction})\nresults_df.head(5)","e0be060d":"results_df['Outcome'].value_counts().plot(kind='bar')\n\n","39b122af":"results_df.to_csv(\"my_submissions\", index=False)\nprint(\"Your submission was successfully saved!\")","50040390":"DATA VISUALISATION","da34cf56":"Testing ML Model Libraries","b88c67cc":"CLEANING THE DATA\n","256bf4f3":"Using LOGISTIC REGRESSION as it gives best result"}}