{"cell_type":{"9517e0a4":"code","af53640d":"code","0e8f39c1":"code","c8fa68e5":"code","3448cee0":"code","fd9d97e3":"code","14d296c1":"code","e77382f3":"code","9e356e32":"code","6b1aca8f":"code","7bd12923":"code","a50c042a":"code","579bfbd7":"code","5f54c34f":"code","ceef8639":"code","4a12ce5d":"code","31137f82":"code","d2d8d183":"code","f74abe18":"code","ea5bc9a5":"code","51590238":"code","487c908a":"code","d40f48d7":"code","94a9946f":"code","dccc8ac6":"code","3b07ecbb":"code","ee53939f":"code","420670d1":"code","19e1d178":"code","be0def8f":"code","8cf89ae0":"code","06261b32":"code","5ea8ae6f":"code","b6d39897":"markdown","a46a74d2":"markdown","89df95d6":"markdown","0ca1f5c7":"markdown","b72c67f0":"markdown","41aca2e5":"markdown"},"source":{"9517e0a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","af53640d":"pip install pyspark","0e8f39c1":"from pyspark import SparkContext\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import *","c8fa68e5":"spark = SparkSession.Builder().getOrCreate()","3448cee0":"df= spark.read.csv('\/kaggle\/input\/pima-indians-diabetes data.xls',header = True,inferSchema=True)","fd9d97e3":"df.count()","14d296c1":"df.limit(5).show()","e77382f3":"from pyspark.sql.functions import when, count, col\ndf.select([count(when(isnull(c), c)).alias(c) for c in df.columns]).show()","9e356e32":"pip install missingno","6b1aca8f":"import missingno as msno\nmsno.bar(df.toPandas())","7bd12923":"msno.matrix(df.toPandas())","a50c042a":"msno.heatmap(df.toPandas())","579bfbd7":"#describe correlation by groupoing variables\nmsno.dendrogram(df.toPandas())","5f54c34f":"noMissing=df.dropna(how='any',subset=['Glucose','BMI','Diastolic_BP'])","ceef8639":"noMissing.show()","4a12ce5d":"from pyspark.sql.functions import when, count, col\nnoMissing.select([count(when(isnull(c), c)).alias(c) for c in noMissing.columns]).show()","31137f82":"noMissing.count()","d2d8d183":"from sklearn.impute import SimpleImputer","f74abe18":"noMissing_mean = noMissing.toPandas().copy(deep=True)\nmean_imputer = SimpleImputer(strategy='mean')\nnoMissing_mean.iloc[:, :] = mean_imputer.fit_transform(noMissing_mean)","ea5bc9a5":"noMissing_median = noMissing.toPandas().copy(deep=True)\nmean_imputer = SimpleImputer(strategy='median')\nnoMissing_median.iloc[:, :] = mean_imputer.fit_transform(noMissing_median)","51590238":"noMissing_fq = noMissing.toPandas().copy(deep=True)\nmean_imputer = SimpleImputer(strategy='most_frequent')\nnoMissing_fq.iloc[:, :] = mean_imputer.fit_transform(noMissing_fq)","487c908a":"noMissing_cst = noMissing.toPandas().copy(deep=True)\nmean_imputer = SimpleImputer(strategy='constant',fill_value=0)\nnoMissing_cst.iloc[:, :] = mean_imputer.fit_transform(noMissing_cst)","d40f48d7":"import matplotlib.pyplot as plt","94a9946f":"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10, 10))\ndata=noMissing.toPandas()\nnullity = data.Serum_Insulin.isnull()+data.Glucose.isnull()\nimputations = {'Mean Imputation':noMissing_mean, 'Median Imputation': noMissing_median, \n               'Most Frequent Imputation': noMissing_fq, 'Constant Imputation': noMissing_cst}\n# Loop over flattened axes and imputations\nfor ax, df_key in zip(axes.flatten(), imputations):\n    # Select and also set the title for a DataFrame\n    imputations[df_key].plot(x='Serum_Insulin', y='Glucose', kind='scatter', \n                          alpha=0.5, c=nullity, cmap='rainbow', ax=ax, \n                          colorbar=False, title=df_key)\nplt.show()","dccc8ac6":"\nfrom fancyimpute import KNN\nknn_imputed = noMissing.toPandas().copy(deep=True)\nknn_imputer = KNN()\nknn_imputed.iloc[:, :] = knn_imputer.fit_transform(knn_imputed)","3b07ecbb":"from fancyimpute import IterativeImputer\nmice_imputed =noMissing.toPandas().copy(deep=True)\nmice_imputer = IterativeImputer()\nmice_imputed.iloc[:, :] = mice_imputer.fit_transform(mice_imputed)","ee53939f":"data=noMissing.toPandas().dropna(how='any')","420670d1":"data.count()","19e1d178":"import statsmodels.api as sm\nX = sm.add_constant(data.iloc[:, :-1])\ny = data['Class']\nlm = sm.OLS(y, X).fit()\nprint(lm.summary())","be0def8f":"import statsmodels.api as sm\nX = sm.add_constant(noMissing_mean.iloc[:, :-1])\ny = noMissing_mean['Class']\nlm_mean = sm.OLS(y, X).fit()\nprint(lm_mean.summary())","8cf89ae0":"X = sm.add_constant(knn_imputed.iloc[:, :-1])\ny = knn_imputed['Class']\nlm_knn = sm.OLS(y, X).fit()\nprint(lm_knn.summary())","06261b32":"X = sm.add_constant(mice_imputed.iloc[:, :-1])\ny =mice_imputed['Class']\nlm_mice = sm.OLS(y, X).fit()\nprint(lm_mice.summary())","5ea8ae6f":"data['Skin_Fold'].plot(kind='kde', c='red', linewidth=3)\nnoMissing_mean['Skin_Fold'].plot(kind='kde')\nknn_imputed['Skin_Fold'].plot(kind='kde')\nmice_imputed['Skin_Fold'].plot(kind='kde')\n\n# Create labels for the four DataFrames\nlabels = ['Baseline (Complete Case)', 'Mean Imputation', 'KNN Imputation', 'MICE Imputation']\nplt.legend(labels)","b6d39897":"Imputing Categorical column","a46a74d2":"Diastolic_BP: blood pressure\nBMI:body mass index \nDiabetes_Pedigree: degree of diabetes","89df95d6":"here we can drop the Glucose and BMI columns because there is no correlation with other columns and just few values are missing=> MCAR (Missing Completely At Random)","0ca1f5c7":"imputing using KNN and MICE","b72c67f0":"imputing using the mean, median, mode and constant","41aca2e5":"# Imputation techniques"}}