{"cell_type":{"b959abef":"code","2d425431":"code","66d64f7a":"code","a715c4a9":"code","fa6804b7":"code","2c312be1":"code","29b418fb":"code","25d23f69":"code","00ff7ed4":"code","b1678122":"code","f7aec922":"code","e5c56e9c":"code","e0c8ad98":"code","f512dae9":"code","6756fc6a":"code","fe0ec61a":"code","f9face90":"code","dcf3c16d":"code","171948c1":"code","ce74df77":"code","3ab2376d":"code","26a7b6fb":"code","297ec7d7":"markdown","b9ba3cf4":"markdown","45c71f03":"markdown","ae659899":"markdown","9681e3df":"markdown","a3f72443":"markdown","bd325d76":"markdown","b4c2a2bb":"markdown","8e1fb1a9":"markdown","d83fdc98":"markdown","6525b7ef":"markdown","7b0f2538":"markdown","59b293b5":"markdown","bcd19b18":"markdown","f00b3c24":"markdown"},"source":{"b959abef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d425431":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set()\n\nfrom sklearn.model_selection import train_test_split,GridSearchCV\n\nimport xgboost as xgb\n\nfrom sklearn.metrics import plot_confusion_matrix\n","66d64f7a":"df = pd.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndf.head()","a715c4a9":"df.drop('customerID',axis = 1,inplace = True)\ndf.info()","fa6804b7":"#df['TotalCharges'] = pd.to_numeric(df['TotalCharges'],errors = 'raise')","2c312be1":"len(df[df['TotalCharges'] == ' '])","29b418fb":"df['TotalCharges'] = df['TotalCharges'].replace(' ',0)\n\n#Now converting to numeric dtype\ndf['TotalCharges'] = pd.to_numeric(df['TotalCharges'],errors = 'raise')\n\ndf.head()","25d23f69":"df.replace(' ','_',regex = True,inplace = True)\ndf.head()","00ff7ed4":"X = df.drop('Churn',axis = 1)\ny = df['Churn']","b1678122":"X.dtypes","f7aec922":"cat_cols = [c for c in X.columns if X[c].dtype == 'object'] #making list of category columns\n            \nX_encoded = pd.get_dummies(X,columns = cat_cols)\n    \nX_encoded.head()","e5c56e9c":"y.unique()","e0c8ad98":"y_encoded = y.replace({'Yes':1,'No':0})","f512dae9":"y.value_counts()","6756fc6a":"X_train,X_test,y_train,y_test = train_test_split(X_encoded,y_encoded)","fe0ec61a":"clf = xgb.XGBClassifier(objective = 'binary:logistic',missing = None,seed = 42)\nclf.fit(X_train,y_train,verbose=True,early_stopping_rounds = 10,eval_metric = 'aucpr',eval_set = [(X_test,y_test)])","f9face90":"plot_confusion_matrix(clf,X_test,y_test,display_labels = ['Did Not Leave','Left'])","dcf3c16d":"print('Proportion of positive points in the dataset is: ',round(sum(y_encoded)\/len(y_encoded),2) * 100)","171948c1":"params = {\n    'max_depth' : [3,4,5],\n    'learning_rate':[0.01,0.05,0.1,0.5],\n    'gamma':[0,0.5,1.0],\n    'reg_lambda':[0,1.0,10.0],\n    'scale_pos_weight':[2,3]\n    \n}\n\noptimal_params = GridSearchCV(estimator=xgb.XGBClassifier(objective = 'binary:logistic',missing = None,subsample = 0.8,colsample_bytree=0.6),\n                             param_grid = params,\n                             scoring = 'roc_auc',\n                             n_jobs = -1,\n                             cv = 4)\n","ce74df77":"optimal_params.fit(X_train,y_train,early_stopping_rounds = 10,eval_metric = 'auc',eval_set = [(X_test,y_test)])\nprint(optimal_params.best_params_)","3ab2376d":"op_clf = xgb.XGBClassifier(objective = 'binary:logistic',gamma = 1.0, learning_rate= 0.05, max_depth= 3, reg_lambda= 10.0, scale_pos_weight= 3)\nop_clf.fit(X_train,y_train,verbose = True,early_stopping_rounds = 10,eval_metric = 'aucpr',eval_set = [(X_test,y_test)])","26a7b6fb":"plot_confusion_matrix(op_clf,X_test,y_test,display_labels = ['Did Not Leave','Left'])","297ec7d7":"Now in various categorical columns like 'MultipleLines','InternetService' it can be seen that white space(' ') is present between some category values.Hence replacing the spaces with underscore ('_') will do good for visualisation","b9ba3cf4":"By applying the conversion to TotalCharges, an error is raised as the column contains \"  \" (empty) values which cannot be converted to numeric type.<br\/>\n\nHence \" \" values should be dealt first before model building","45c71f03":"## Confusion Matrix\n","ae659899":"## One hot encoding","9681e3df":"## Model Building","a3f72443":"Not good!!\n\nBut Xgboost has a parameter 'scale_pos_weight' which will give penalty to majority class \nscale_pos_weight is the ratio of number of negative class to the positive class","bd325d76":"No null values are present in this dataset\n\nHere we can observe that even though TotalCharges should be numeric but it is of object type.So converting it to numeric.","b4c2a2bb":"## Train_Test_Split","8e1fb1a9":"Since customer ID is unique to every user it won't be useful for prediction","d83fdc98":"Since the classes are imbalanced we will use stratify in train test split to gain correct proportion of datas in both train and test set ","6525b7ef":"So scale_pos_weight can be taken as 73\/27 ~ 2.7 or 3 as round figure","7b0f2538":"replacing y values of 'Yes' with 1 and 'No' with 0","59b293b5":"## Optimal Model Build","bcd19b18":"## Cross Validation","f00b3c24":"Since there are only 11 columns so replacing the values with 0"}}