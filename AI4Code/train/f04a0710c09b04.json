{"cell_type":{"8f686f85":"code","72de1d27":"code","323c1fd4":"code","7c548a98":"code","d3ad4567":"code","d022e9c0":"code","d928fe4f":"code","029c782c":"code","dbccd5fc":"code","242e9f6b":"code","cc8d0150":"code","05af6399":"code","3a18a1c8":"code","5c9acb72":"code","7deb7e42":"code","8246e497":"code","253704f3":"code","f8165288":"code","8465ec14":"code","ad360a3e":"code","4bbeecfd":"code","4783b10b":"code","737731c4":"markdown","94141c31":"markdown","655263eb":"markdown","88ba4127":"markdown","448c3166":"markdown","dd7e18ea":"markdown","19aad57b":"markdown"},"source":{"8f686f85":"import numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nfrom sklearn.metrics import mean_squared_error as mse\nimport matplotlib.pyplot as plt","72de1d27":"train = pd.read_csv(\"..\/input\/eda-avocado-prices\/Filtered_dataset.csv\")","323c1fd4":"train.drop(['Unnamed: 0'],axis=1,inplace=True)\ntrain","7c548a98":"x = train.drop(['Date','AveragePrice'],axis=1)\ny = train['AveragePrice']","d3ad4567":"le = preprocessing.LabelEncoder()\nfor i in x.columns:\n    if x[i].dtype == 'object':\n        x[i] = le.fit_transform(x[i].astype(str))\nx","d022e9c0":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx = scaler.fit_transform(x)","d928fe4f":"# splitting the dataset into train and test dataset with 4:1 ratio (80%-20%)\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = .2, random_state = 26)","029c782c":"from sklearn.linear_model import LinearRegression\n\n# Create instance of model\nlreg = LinearRegression()\n# Pass training data into model\nlreg.fit(x_train, y_train)","dbccd5fc":"# Getting prediciton on x_test\ny_pred_lreg = lreg.predict(x_test)","242e9f6b":"def rmse(y,y_pred):\n    return (np.sqrt(mse(y,y_pred)))","cc8d0150":"# Scoring our model\nprint('Linear Regression')\n# Root mean square error of our model\nprint('--'*50)\nlinreg_error = rmse(y_test, y_pred_lreg)\nprint('RMSE = ', linreg_error)\n","05af6399":"%%time\nfrom sklearn.svm import SVR\n\nsvr = SVR(kernel = 'rbf')\n\n# Fit the model on training data\nsvr.fit(x_train, y_train)","3a18a1c8":"# Getting the predictions for x_test\ny_pred_svr = svr.predict(x_test)","5c9acb72":"print('Support Vector Classifier')\n# Root mean square error of our model\nprint('--'*50)\nsvr_error = rmse(y_test, y_pred_svr)\nprint('RMSE = ', svr_error)","7deb7e42":"%%time\nfrom sklearn.tree import DecisionTreeRegressor\n\ndtr = DecisionTreeRegressor()\n# Fit new DT on training data\ndtr.fit(x_train, y_train)","8246e497":"# Predict DTR\ny_pred_dtr = dtr.predict(x_test)","253704f3":"print('Decision Tree')\n# Root mean square error of our model\nprint('--'*50)\ndtr_error = rmse(y_test, y_pred_dtr)\nprint('RMSE = ', dtr_error)","f8165288":"from sklearn.ensemble import RandomForestRegressor\n\n# Create model object\nrfr = RandomForestRegressor(n_estimators = 250,n_jobs=-1)\n# Fit model to training data\nrfr.fit(x_train,y_train)\ny_pred_rfr = rfr.predict(x_test)","8465ec14":"print('Random Forest')\n# Root mean square error of our model\nprint('--'*50)\nrfr_error = rmse(y_test, y_pred_rfr)\nprint('RMSE = ', rfr_error)","ad360a3e":"from xgboost import XGBRegressor\n\n# Create model object\nxgb = XGBRegressor(n_jobs=-1)\n\n# Fit model to training data\nxgb.fit(x_train, y_train)\ny_pred_xgb = xgb.predict(x_test)","4bbeecfd":"print('XGBoost Classifer')\nprint('--'*50)\nxgb_error = rmse(y_test, y_pred_xgb)\nprint('RMSE = ', xgb_error)","4783b10b":"models = pd.DataFrame({\n     'Model': ['Linear Regression', 'RBF SVC', \n               'Decision Tree', 'Random Forest','XGBoost Regressor'],\n    'Score': [linreg_error, svr_error, \n               dtr_error, rfr_error,xgb_error]})\nmodels.sort_values(by='Score', ascending=True)","737731c4":"### Linear Regression","94141c31":"## Training on different algorithms","655263eb":"### RANDOM FOREST","88ba4127":"## Importing Dataset","448c3166":"### Decision Tree - Regression","dd7e18ea":"### XGBoost Regressor","19aad57b":"### RBF SUPPORT VECTOR REGRESSOR"}}