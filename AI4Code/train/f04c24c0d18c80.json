{"cell_type":{"48802e6d":"code","5b5c212e":"code","d0431dbd":"code","f5eb9ff2":"code","383c77fc":"code","3d17b9a6":"code","a018034f":"code","fe62d8b8":"code","48028cf6":"code","941f97ef":"markdown","e18be08d":"markdown","08cff65c":"markdown","a900f73c":"markdown","bbe1280e":"markdown"},"source":{"48802e6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5b5c212e":"!pip install mplfinance","d0431dbd":"! pip install backtrader\n","f5eb9ff2":"# Using the Cipla share for reference, any other will also do.\ndf= pd.read_csv('\/kaggle\/input\/nifty50-stock-market-data\/CIPLA.csv', index_col='Date')\ndf.index = pd.to_datetime(df.index)\ndf.tail()","383c77fc":"# candlestick patterns do all than make pretty\n# Visualise first\nimport mplfinance as mpf\n# only considering the recent data\nrecent = df[df.index > '2020-05-29']\nmpf.plot(recent,type='candle')","3d17b9a6":"df.drop(['Symbol','Series','Prev Close','Trades','Deliverable Volume','%Deliverble','Last','VWAP','Volume','Turnover'],inplace=True,axis=1)","a018034f":"df.head()","fe62d8b8":"import backtrader as bt\n# Most of the code directly copied from the backtrader website********************************************\nclass TestStrategy(bt.Strategy):\n\n    def log(self, txt, dt=None):\n        ''' Logging function fot this strategy'''\n        dt = dt or self.datas[0].datetime.date(0)\n        print('%s, %s' % (dt.isoformat(), txt))\n\n    def __init__(self):\n        \n        self.dataclose = self.datas[0].close\n        self.datahigh = self.datas[0].High\n        self.dataopen = self.datas[0].Open\n        self.datalow = self.datas[0].Low\n        # To keep track of pending orders\n        self.order = None\n\n    def notify_order(self, order):\n        if order.status in [order.Submitted, order.Accepted]:\n            # Buy\/Sell order submitted\/accepted to\/by broker - Nothing to do\n            return\n\n        # Check if an order has been completed\n        \n        if order.status in [order.Completed]:\n            if order.isbuy():\n                self.log('BUY EXECUTED, %.2f' % order.executed.price)\n            elif order.issell():\n                self.log('SELL EXECUTED, %.2f' % order.executed.price)\n\n            self.bar_executed = len(self)\n\n        elif order.status in [order.Canceled, order.Margin, order.Rejected]:\n            self.log('Order Canceled\/Margin\/Rejected')\n\n        # Write down: no pending order\n        self.order = None\n    def next(self):\n        # Simply log the closing price of the series from the reference\n        self.log('Close, %.2f' % self.dataclose[0])\n\n        # Check if an order is pending ... if yes, we cannot send a 2nd one\n        if self.order:\n            return\n\n       \n        if not self.position:\n            if (((self.datahigh - self.datalow) > 3 * (self.dataopen - self.dataclose)) and((self.dataclose - self.datalow) \/ (.001 + self.datahigh - self.datalow) > 0.6) and ((self.dataopen - self.datalow) \/ (.001 + self.datahigh - self.datalow) > 0.6)):\n                self.order = self.buy() \n\n\n        else:\n\n            # Randomly selling after 3 timecyles...\n            if len(self) >= (self.bar_executed + 3):\n                # SELL, SELL, SELL!!! (with all possible default parameters)\n                self.log('SELL CREATE, %.2f' % self.dataclose[0])\n\n                # Keep track of the created order to avoid a 2nd order\n                self.order = self.sell()","48028cf6":"import backtrader as bt\ncerebro = bt.Cerebro()\nprint('Starting Portfolio Value: %.2f' % cerebro.broker.getvalue())\ndata = bt.feeds.PandasData(dataname=recent)\ncerebro.adddata(data)\ncerebro.addstrategy(TestStrategy)\ncerebro.run()\nprint('Final Portfolio Value: %.2f' % cerebro.broker.getvalue())","941f97ef":"# ****[Backtrader](https:\/\/www.backtrader.com\/docu\/quickstart\/quickstart\/)**** \nis used for backtrading given stratergy\n","e18be08d":"# ****HAMMER CANDLESTICK STRATERGY****\n![HAMMER_CANDLE](https:\/\/a.c-dn.net\/c\/content\/dam\/publicsites\/igcom\/uk\/images\/ContentImage\/hammer.png)","08cff65c":"# Hammer logic found online\n \nhammer ->(((hi - lo) > 3 * (op - cl)) and((cl - lo) \/ (.001 + hi - lo) > 0.6) and ((op - lo) \/ (.001 + hi - lo) > 0.6))\n# Although mentioned , i have not used the inv_hammer yet\ninv_hammer ->:  (((hi - lo) > 3 * (op - cl)) and ((hi - cl) \/ (.001 + hi - lo) > 0.6) and ((hi - op) \/ (.001 + hi - lo) > 0.6))","a900f73c":"***This is a rudimentary introduction to the concept of hammercandlestick.***\n\n*A hammer is a price pattern in candlestick charting that occurs when a security trades significantly lower than its opening, but rallies within the period to close near opening price. This pattern forms a hammer-shaped candlestick, in which the lower shadow is at least twice the size of the real body. The body of the candlestick represents the difference between the open and closing prices, while the shadow shows the high and low prices for the period.*\n\nThis algo only uses the hammer candle logic as the buying signal and holds the share for 5 time cycles and that is about it.\nNo other logic is used so further work is needed.\n","bbe1280e":"# ****[MPL_Finance](https:\/\/github.com\/matplotlib\/mplfinance)**** \nis a visualisation tool used in finace"}}