{"cell_type":{"07a1616d":"code","05bc6473":"code","972a636a":"code","a2bb63ae":"code","50f75bb5":"code","937d5122":"code","7763d3a3":"code","31f31687":"code","0ad29cdd":"code","42314c6c":"code","88aee90a":"code","c4f949c1":"code","e5bfee17":"code","c8319728":"markdown","6d407851":"markdown","ae56da33":"markdown","6a3720da":"markdown","616cc17a":"markdown","1f418589":"markdown","b8291bc1":"markdown","06a82834":"markdown","28416a3f":"markdown"},"source":{"07a1616d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","05bc6473":"canada_income=pd.read_csv('..\/input\/canada-per-capita-income\/canada_per_capita_income.csv')\ncanada_income.head()","972a636a":"canada_income.shape","a2bb63ae":"import matplotlib.pyplot as plt\nplt.xlabel('year',color='green',fontsize='large')\nplt.ylabel('per capita income (US$)',color='green',fontsize='large')\nplt.title('Canada per capita income',fontsize='large')\nplt.scatter(canada_income[['year']],canada_income[['per capita income (US$)']])","50f75bb5":"from sklearn.linear_model import LinearRegression","937d5122":"reg_model=LinearRegression()  #Initialize your model","7763d3a3":"reg_model.fit(canada_income[['year']],canada_income[['per capita income (US$)']])","31f31687":"m=reg_model.coef_   #slope of our model(stright line)\nm","0ad29cdd":"c=reg_model.intercept_  # intercept of our model(stright line)\nc","42314c6c":"plt.xlabel('year',color='green',fontsize='large')\nplt.ylabel('per capita income (US$)',color='green',fontsize='large')\nplt.title('Canada per capita income',fontsize='large')\nplt.scatter(canada_income[['year']],canada_income[['per capita income (US$)']],label='Canada per capita income')\nplt.plot(canada_income[['year']],reg_model.predict(canada_income[['year']]),label='Linear_reg_model',color='red')\nplt.legend(fontsize='large',shadow=True)","88aee90a":"reg_model.predict([[2020],[2021],[2022]])","c4f949c1":"from sklearn.metrics import mean_absolute_error","e5bfee17":"Actual_income=canada_income[['per capita income (US$)']]\npredictions=reg_model.predict(canada_income[['year']])\nmean_absolute_error(Actual_income,predictions)","c8319728":"1.Load the data using pandas and print first five columns.","6d407851":"Now we going to fit the model using the dataset available","ae56da33":"we can calculate the performance of our model using mean_absolute_error","6a3720da":"The  performance of our model can be improved if we have more number of features with a large number of observations.","616cc17a":"We can also predict the future income as below\n","1f418589":"**sklearn**  is a machine learning tool in python by which we can implement all the machine learning models","b8291bc1":"From the above figure you could observe the linear trend in the data.So,I have decide to fit the linear regression model to the above data in order to predict the future per-capita income of Canada.\n\ny=mx+c\n\ny=per capita income (US$)\n\nx=year\n\nm=slope of the straight line that we want to fit\n\nc=intercept of y-axis","06a82834":"Now let us combine our dataset and model in one plot.\n\nreg_model.predict(canada_data[['year']]) gives the income as predicted by our model ","28416a3f":"2.Observe the per capita income (US$) vs Year using matplotlib "}}