{"cell_type":{"74ce6699":"code","93375bd1":"code","ff1a1969":"code","524fdd60":"code","128f696f":"code","cd6cac74":"code","186124d6":"code","7aaa44e1":"code","db6fcf2b":"code","a07c70a9":"code","35b3f6f0":"code","bbac6863":"code","7970e2ec":"code","55984de5":"code","d7a7a424":"code","8a6123e5":"code","382d2fd6":"code","7902f539":"code","9372c54b":"markdown","3205b387":"markdown","4dbd5228":"markdown","c5ae8f33":"markdown"},"source":{"74ce6699":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","93375bd1":"df1 = pd.read_csv('\/kaggle\/input\/toronto-bikeshare-data\/bikeshare-ridership-2017\/2017 Data\/Bikeshare Ridership (2017 Q1).csv')\ndf2 = pd.read_csv('\/kaggle\/input\/toronto-bikeshare-data\/bikeshare-ridership-2017\/2017 Data\/Bikeshare Ridership (2017 Q2).csv')\ndf3 = pd.read_csv('\/kaggle\/input\/toronto-bikeshare-data\/bikeshare-ridership-2017\/2017 Data\/Bikeshare Ridership (2017 Q3).csv')\ndf4 = pd.read_csv('\/kaggle\/input\/toronto-bikeshare-data\/bikeshare-ridership-2017\/2017 Data\/Bikeshare Ridership (2017 Q4).csv')","ff1a1969":"df2017 = df1.copy()\ndf2017 = df2017.append([df2, df3, df4], sort=False)\ndel df1\ndel df2\ndel df3\ndel df4","524fdd60":"df2017.head(10)","128f696f":"# prepare the dataset\ndf2017['time'] = pd.to_datetime(df2017.trip_start_time)\ndf2017.index = df2017.time.dt.date\ndf2017.index.name = 'index'\n# cleaning the dataset\ndf2017 = df2017.dropna(subset=['from_station_name','to_station_name'])\ndf = df2017.copy()","cd6cac74":"\nstation = list(set(list(df.from_station_name.values) + list(df.to_station_name.values)))\ndate = df.index.unique().values","186124d6":"route = df.copy()\nroute = route[['from_station_name', 'to_station_name']]","7aaa44e1":"twoway = route.copy()\ntwoway = twoway[twoway.from_station_name == twoway.to_station_name]\noneway = route.copy()\noneway = oneway[oneway.from_station_name != oneway.to_station_name]","db6fcf2b":"twoway_map = twoway.groupby('from_station_name').count().sort_values(by='to_station_name', ascending=False)\nprint('10 Stations with the highest number of two-way traveller')\ntwoway_map[:10]","a07c70a9":"# mapping the number of outgoing bike from each station each day in 2017\noutmap = pd.get_dummies(route.from_station_name).groupby('index').sum()\n# mapping the number of incoming bike to each station each day in 2017\ninmap = pd.get_dummies(route.to_station_name).groupby('index').sum()","35b3f6f0":"outmap.head(5) # number of bikes leaves the station","bbac6863":"inmap.head(5) # number of bikes entering the station","7970e2ec":"print('number of station with enough bike to use next morning, aka number of bikes entering > number of bikes leaving the station')\n((inmap - outmap)>=0).sum(axis=1)","55984de5":"print('number of station with less bike to use next morning, or need a crew to return bikes back to station before next morning')\n((inmap - outmap)<0).sum(axis=1)","d7a7a424":"print('Station and the total number of days in 2017 where stations need more bikes to be returned by the crew every night')\n((inmap - outmap)<0).sum(axis=0).sort_values(ascending=False)[:20]","8a6123e5":"bike_minus = inmap - outmap # incoming bikes minus leaving bikes\nbike_minus = np.absolute(bike_minus[bike_minus < 0]) # show only minus value","382d2fd6":"bike_minus.head(10) # number of bikes that required by crew to be returned to each station","7902f539":"print('20 Stations with the highest number of required returned bikes in a day')\nnp.max(bike_minus, axis=0).sort_values(ascending=False)[:20]","9372c54b":"calculate the number of bikes entering the station minus number of bikes leaving the station\n* if the result >= 0 then there are enough bike available in the station to be used next morning\n* if the result < 0 then we need crew to return some bikes back to the station from other station","3205b387":"Total unique days in 2017 are 329 days. But as we can see below, some stations always lack of bikes for more than 200 days out of 329 days in a year.\n\nMay be we should add more bikes in the stations or require user\/member to bring their own bikes","4dbd5228":"Separate two-way traveller with one-way traveller for each station","c5ae8f33":"Create a table regarding to the number of bikes leaving ('from_station') and entering ('to_station') each day"}}