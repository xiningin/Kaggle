{"cell_type":{"6161c494":"code","3a090725":"code","fdf6003c":"code","fde05130":"code","48337d26":"code","e642d4a2":"code","86a0a951":"markdown","7e4d920a":"markdown","59e2e74d":"markdown","028c818c":"markdown","0c3822db":"markdown","5e3d122a":"markdown","a204106f":"markdown","742a6e9b":"markdown","32819072":"markdown"},"source":{"6161c494":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport geopandas\nfrom wordcloud import WordCloud\nimport os\n\n\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport warnings\nwarnings.filterwarnings('ignore') \n\n!pip install openpyxl   # Solving Kaggle error while importing the data\n\n# Import data\nathletes = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Athletes.xlsx', index_col = 0)\ncoaches = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Coaches.xlsx', index_col = 0)\nentries_gender = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/EntriesGender.xlsx', index_col = 0)\nmedals = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Medals.xlsx', index_col = 0)\nteams = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Teams.xlsx', index_col = 0)","3a090725":"# Change some contries names\nathletes['NOC'] = athletes['NOC'].replace('ROC', 'Russia')\nathletes['NOC'] = athletes['NOC'].replace(\"People's Republic of China\", 'China')\nathletes['NOC'] = athletes['NOC'].replace('Islamic Republic of Iran', 'Iran')\nathletes['NOC'] = athletes['NOC'].replace('United Republic of Tanzania', 'Tanzania')\nathletes['NOC'] = athletes['NOC'].replace('Democratic Republic of the Congo', 'Democratic republic of the congo')\n\n# Number of athletes by country\nathletes_country = athletes.groupby('NOC').count().reset_index()\nathletes_country.columns = ['country', 'count']                    # Set the correct variables'names\nathletes_country = athletes_country.sort_values('count', ascending = False)\nathletes_top_country = athletes_country.head(30)\n\n# geopandas\nworld = geopandas.read_file(geopandas.datasets.get_path(\"naturalearth_lowres\"))\nathletes_country_final = world.merge(athletes_country, how = 'left', left_on=['name'], right_on=['country'])\n\nsns.set_style(\"ticks\")\nathletes_country_final.plot(\"count\",\n                           figsize=(22,12),\n                           legend=True,\n                           edgecolor=\"black\",\n                           legend_kwds={\"label\":\"Athletes by Country\"},\n                           cmap='OrRd',\n                           missing_kwds={\"color\":\"white\"}\n                          )\nplt.title(\"Number of Athletes by Country\", fontsize = 30);","fdf6003c":"# Visualization\nsns.set_style(\"ticks\")\nplt.figure(figsize=(20,10))\nsns.barplot(x=athletes_top_country['country'], \n            y=athletes_top_country['count'], \n            edgecolor=(0,0,0),\n            linewidth = 1,\n            palette = sns.color_palette(\"rocket\", \n            n_colors=30))\nplt.xticks(rotation = 90)\nplt.xlabel('Top 30 countries', fontsize = 20)\nplt.ylabel('Count', fontsize = 20)\nplt.title('Number of athletes by country', fontsize = 30);","fde05130":"count_discipline = athletes.Discipline.value_counts()\ncount_discipline\n\nsns.set_style(\"ticks\")\n\nwordcloud = WordCloud(\n                    width=2000,\n                    height=1000, \n                    scale=1,\n                    normalize_plurals=False,\n                    repeat=False,\n                    random_state=42,\n                    background_color='white')\n\nwordcloud.generate_from_frequencies(frequencies = count_discipline)\nplt.figure(figsize=(17,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title('Number of athletes by sport', fontsize = 30)\nplt.show()","48337d26":"entries_gender\nentries_gender.loc[:,['Female', 'Male', 'Total']] = entries_gender.loc[:,['Female', 'Male', 'Total']].astype(float)\nentries_gender['discipline'] = entries_gender.index\nentries_gender['females_ratio'] = entries_gender['Female'] \/ entries_gender['Total']\nentries_gender['males_ratio'] = entries_gender['Male'] \/ entries_gender['Total']\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y=entries_gender.discipline,\n    x=entries_gender.females_ratio,\n    orientation='h',\n    name='Females',\n    marker=dict(\n        color='rgba(246, 78, 139, 0.6)',\n        line=dict(color='rgba(246, 78, 139, 1.0)')\n    )\n))\nfig.add_trace(go.Bar(\n    y=entries_gender.discipline,\n    x=entries_gender.males_ratio,\n    orientation='h',\n    name='Males',\n    marker=dict(\n        color='rgba(58, 71, 80, 0.6)',\n        line=dict(color='rgba(58, 71, 80, 1.0)')\n    )\n))\n\ntemplate = dict(layout=go.Layout(title_font=dict(family=\"Rockwell\", size=30)))\n\nfig.update_layout(\n                title = 'Distribution of disciplines by gender',\n                template = template,\n                barmode='stack', \n                autosize=False,\n                width=680,\n                height=900,\n                margin=dict(\n                  l=150,\n                  r=100,\n                   b=30,\n                   t=100,\n                   pad=4\n                          )\n)\n\nfig.layout.xaxis.tickformat = ',.0%'\nfig.show()","e642d4a2":"medals.rename(columns={'Team\/NOC':'country'}, inplace=True)\nmedals_final = medals.copy()\nmedals_final['rank'] = medals_final.index\nmedals_final = medals_final[medals_final['rank'] <= 30]\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    y=medals_final.Gold,\n    x=medals_final.country,\n    name='Gold',\n    marker=dict(\n        color='rgb(255,215,0)',\n        line=dict(color='rgba(0, 0, 0, 0.5)')\n    )\n))\n\nfig.add_trace(go.Bar(\n    y=medals_final.Silver,\n    x=medals_final.country,\n    name='Silver',\n    marker=dict(\n        color='rgb(192,192,192)',\n        line=dict(color='rgba(0, 0, 0, 0.5)')\n    )\n))\n\nfig.add_trace(go.Bar(\n    y=medals_final.Bronze,\n    x=medals_final.country,\n    name='Bronze',\n    marker=dict(\n        color='rgb(205, 127, 50)',\n        line=dict(color='rgba(0, 0, 0, 0.5)')\n    )\n))\n\ntemplate = dict(layout=go.Layout(title_font=dict(family=\"Rockwell\", size=30)))\n\nfig.update_layout(\n                title = 'Medals by country <br><sup>Top 30 countries by rank<\/sup>',\n                template = template,\n                showlegend = False,\n                barmode='stack', \n                autosize=False,\n                width=680,\n                height=650,\n                margin=dict(\n                  l=30,\n                  r=30,\n                  b=180,\n                  t=100,\n                  pad=4\n                          )\n)\n\nfig.layout.xaxis.tickformat = ',.0%'\nfig.show()","86a0a951":"## Bar Plot","7e4d920a":"## Stacked Bar Plot II","59e2e74d":"# Olympics Tokyo (2020)\n\nIn this notebook, we'll explore some cool ways to represent data and gain useful insights. For this, we'll use data from the Olympics in Tokyo (2020). Let's do it!","028c818c":"## Word Cloud Plot","0c3822db":"If you found this useful or interesting, please don't forget to comment and upvote. Thank you!","5e3d122a":"## Mapping the World","a204106f":"## Stacked Bar Plot I","742a6e9b":"We can observe that USA and Japan have the most athletes competing.","32819072":"In this plot, we can see the different displines competed in Tokyo 2020. The size of the discipline corresponds to the number of athletes participating."}}