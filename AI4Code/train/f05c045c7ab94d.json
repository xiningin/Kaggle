{"cell_type":{"9840b4cc":"code","8acaa6f4":"code","a4068a86":"code","8f31f8a5":"code","64f6b664":"code","821cf39c":"code","93ef54a5":"code","a2d6ecd6":"code","222d91d8":"code","63065743":"code","270b6b6b":"code","bb98c7c0":"code","779b719c":"code","7d7804bc":"code","c3c3d2e4":"code","68be7d9a":"code","decd710c":"code","0d68c603":"code","e2afa5bc":"code","d844a375":"code","cf479da2":"code","f0e1a23c":"code","6b3c886f":"code","192b775b":"code","5954d140":"code","465625c6":"code","e182613d":"markdown","91413bb9":"markdown","cd70d2e6":"markdown","1aefe4b7":"markdown","8922b4ea":"markdown","7f994862":"markdown","e0c45014":"markdown","919fc11d":"markdown","49fe6a79":"markdown","0422b0e6":"markdown","239bf50b":"markdown","e23d83c6":"markdown","f0ee7809":"markdown","1c01abf9":"markdown","372f1063":"markdown","6d40cfbb":"markdown","605927b1":"markdown","09e3d9a3":"markdown","be4f20a6":"markdown","9d95d7c9":"markdown","fffd3eb4":"markdown","37db029a":"markdown","9ca2e563":"markdown","777e3f6a":"markdown","10f4327f":"markdown","a2fd3ae1":"markdown","75ce5511":"markdown","a1f7ba0b":"markdown","384365c1":"markdown","d3354f1e":"markdown","6dd3f363":"markdown","6384cc7d":"markdown"},"source":{"9840b4cc":"import tensorflow as tf\n\n# Get the GPU device name.\ndevice_name = tf.test.gpu_device_name()\n\n# The device name should look like the following:\nif device_name == '\/device:GPU:0':\n    print('Found GPU at: {}'.format(device_name))\nelse:\n    raise SystemError('GPU device not found')","8acaa6f4":"import torch\n\n# If there's a GPU available...\nif torch.cuda.is_available():    \n\n    # Tell PyTorch to use the GPU.    \n    device = torch.device(\"cuda\")\n\n    print('There are %d GPU(s) available.' % torch.cuda.device_count())\n\n    print('We will use the GPU:', torch.cuda.get_device_name(0))\n\n# If not...\nelse:\n    print('No GPU available, using the CPU instead.')\n    device = torch.device(\"cpu\")","a4068a86":"!pip install transformers","8f31f8a5":"import pandas as pd\n\n# Load the dataset into a pandas dataframe.\ndf = pd.read_csv(\"\/content\/sample_data\/dataframe.csv\")\n\n# Report the number of sentences.\nprint('Number of training sentences: {:,}\\n'.format(df.shape[0]))\n\n# Display 10 random rows from the data.\ndf.sample(10)","64f6b664":"df.loc[df.Label == 0].sample(5)[['Text', 'Label']]","821cf39c":"# Get the lists of sentences and their labels.\nsentences = df.Text.values\nlabels = df.Label.values","93ef54a5":"from transformers import BertTokenizer\n\n# Load the BERT tokenizer.\nprint('Loading BERT tokenizer...')\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased', do_lower_case=True)","a2d6ecd6":"# Print the original sentence.\nprint(' Original: ', sentences[0])\n\n# Print the sentence split into tokens.\nprint('Tokenized: ', tokenizer.tokenize(sentences[0]))\n\n# Print the sentence mapped to token ids.\nprint('Token IDs: ', tokenizer.convert_tokens_to_ids(tokenizer.tokenize(sentences[0])))","222d91d8":"# Tokenize all of the sentences and map the tokens to thier word IDs.\ninput_ids = []\n\n# For every sentence...\nfor sent in sentences:\n    encoded_sent = tokenizer.encode(\n                        sent,                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                   )\n    \n    # Add the encoded sentence to the list.\n    input_ids.append(encoded_sent)\n\n# Print sentence 0, now as a list of IDs.\nprint('Original: ', sentences[0])\nprint('Token IDs:', input_ids[0])","63065743":"print('Max sentence length: ', max([len(sen) for sen in input_ids]))","270b6b6b":"from keras.preprocessing.sequence import pad_sequences\nMAX_LEN = 64\n\nprint('\\nPadding\/truncating all sentences to %d values...' % MAX_LEN)\n\nprint('\\nPadding token: \"{:}\", ID: {:}'.format(tokenizer.pad_token, tokenizer.pad_token_id))\n\ninput_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype=\"long\", \n                          value=0, truncating=\"post\", padding=\"post\")\n\nprint('\\nDone.')","bb98c7c0":"# Create attention masks\nattention_masks = []\n\n# For each sentence...\nfor sent in input_ids:\n    att_mask = [int(token_id > 0) for token_id in sent]\n    \n    # Store the attention mask for this sentence.\n    attention_masks.append(att_mask)","779b719c":"# Use train_test_split to split our data into train and validation sets for\n# training\nfrom sklearn.model_selection import train_test_split\n\n# Use 90% for training and 10% for validation.\ntrain_inputs, validation_inputs, train_labels, validation_labels = train_test_split(input_ids, labels, \n                                                            random_state=2018, test_size=0.1)\n# Do the same for the masks.\ntrain_masks, validation_masks, _, _ = train_test_split(attention_masks, labels,\n                                             random_state=2018, test_size=0.1)","7d7804bc":"# Convert all inputs and labels into torch tensors, the required datatype \n# for our model.\ntrain_inputs = torch.tensor(train_inputs)\nvalidation_inputs = torch.tensor(validation_inputs)\n\ntrain_labels = torch.tensor(train_labels)\nvalidation_labels = torch.tensor(validation_labels)\n\ntrain_masks = torch.tensor(train_masks)\nvalidation_masks = torch.tensor(validation_masks)","c3c3d2e4":"from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n\nbatch_size = 32\n\n# Create the DataLoader for our training set.\ntrain_data = TensorDataset(train_inputs, train_masks, train_labels)\ntrain_sampler = RandomSampler(train_data)\ntrain_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)\n\n# Create the DataLoader for our validation set.\nvalidation_data = TensorDataset(validation_inputs, validation_masks, validation_labels)\nvalidation_sampler = SequentialSampler(validation_data)\nvalidation_dataloader = DataLoader(validation_data, sampler=validation_sampler, batch_size=batch_size)\n","68be7d9a":"from transformers import BertForSequenceClassification, AdamW, BertConfig\n\n# Load BertForSequenceClassification, the pretrained BERT model with a single \n# linear classification layer on top. \nmodel = BertForSequenceClassification.from_pretrained(\n    \"bert-base-uncased\", # Use the 12-layer BERT model, with an uncased vocab.\n    num_labels = 2, # The number of output labels--2 for binary classification.\n                    # You can increase this for multi-class tasks.   \n    output_attentions = False, # Whether the model returns attentions weights.\n    output_hidden_states = False, # Whether the model returns all hidden-states.\n)\n\n# Tell pytorch to run this model on the GPU.\nmodel.cuda()","decd710c":"# Get all of the model's parameters as a list of tuples.\nparams = list(model.named_parameters())\n\nprint('The BERT model has {:} different named parameters.\\n'.format(len(params)))\n\nprint('==== Embedding Layer ====\\n')\n\nfor p in params[0:5]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n\nprint('\\n==== First Transformer ====\\n')\n\nfor p in params[5:21]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n\nprint('\\n==== Output Layer ====\\n')\n\nfor p in params[-4:]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))","0d68c603":"# Note: AdamW is a class from the huggingface library (as opposed to pytorch) \n# I believe the 'W' stands for 'Weight Decay fix\"\noptimizer = AdamW(model.parameters(),\n                  lr = 2e-5, # args.learning_rate - default is 5e-5, our notebook had 2e-5\n                  eps = 1e-8 # args.adam_epsilon  - default is 1e-8.\n                )\n","e2afa5bc":"from transformers import get_linear_schedule_with_warmup\n\n# Number of training epochs (authors recommend between 2 and 4)\nepochs = 5\n\n# Total number of training steps is number of batches * number of epochs.\ntotal_steps = len(train_dataloader) * epochs\n\n# Create the learning rate scheduler.\nscheduler = get_linear_schedule_with_warmup(optimizer, \n                                            num_warmup_steps = 0, # Default value in run_glue.py\n                                            num_training_steps = total_steps)","d844a375":"import numpy as np\n\n# Function to calculate the accuracy of our predictions vs labels\ndef flat_accuracy(preds, labels):\n    pred_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return np.sum(pred_flat == labels_flat) \/ len(labels_flat)","cf479da2":"import time\nimport datetime\n\ndef format_time(elapsed):\n    '''\n    Takes a time in seconds and returns a string hh:mm:ss\n    '''\n    # Round to the nearest second.\n    elapsed_rounded = int(round((elapsed)))\n    \n    # Format as hh:mm:ss\n    return str(datetime.timedelta(seconds=elapsed_rounded))\n","f0e1a23c":"import random\n\n# This training code is based on the `run_glue.py` script here:\n# https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L128\n\n\n# Set the seed value all over the place to make this reproducible.\nseed_val = 42\n\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)\n\n# Store the average loss after each epoch so we can plot them.\nloss_values = []\n\n# For each epoch...\nfor epoch_i in range(0, epochs):\n\n    print(\"\")\n    print('======== Epoch {:} \/ {:} ========'.format(epoch_i + 1, epochs))\n    print('Training...')\n\n    # Measure how long the training epoch takes.\n    t0 = time.time()\n\n    # Reset the total loss for this epoch.\n    total_loss = 0\n    model.train()\n\n    # For each batch of training data...\n    for step, batch in enumerate(train_dataloader):\n\n        # Progress update every 40 batches.\n        if step % 40 == 0 and not step == 0:\n            # Calculate elapsed time in minutes.\n            elapsed = format_time(time.time() - t0)\n            \n            # Report progress.\n            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader), elapsed))\n\n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n\n        model.zero_grad()        \n\n        outputs = model(b_input_ids, \n                    token_type_ids=None, \n                    attention_mask=b_input_mask, \n                    labels=b_labels)\n        \n        # The call to `model` always returns a tuple, so we need to pull the \n        # loss value out of the tuple.\n        loss = outputs[0]\n\n        total_loss += loss.item()\n\n        # Perform a backward pass to calculate the gradients.\n        loss.backward()\n\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        optimizer.step()\n\n        # Update the learning rate.\n        scheduler.step()\n\n    # Calculate the average loss over the training data.\n    avg_train_loss = total_loss \/ len(train_dataloader)            \n    \n    # Store the loss value for plotting the learning curve.\n    loss_values.append(avg_train_loss)\n\n    print(\"\")\n    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n    print(\"  Training epcoh took: {:}\".format(format_time(time.time() - t0)))\n        \n\n    print(\"\")\n    print(\"Running Validation...\")\n\n    t0 = time.time()\n\n    # Put the model in evaluation mode--the dropout layers behave differently\n    # during evaluation.\n    model.eval()\n\n    # Tracking variables \n    eval_loss, eval_accuracy = 0, 0\n    nb_eval_steps, nb_eval_examples = 0, 0\n\n    # Evaluate data for one epoch\n    for batch in validation_dataloader:\n        \n        # Add batch to GPU\n        batch = tuple(t.to(device) for t in batch)\n        \n        # Unpack the inputs from our dataloader\n        b_input_ids, b_input_mask, b_labels = batch\n        \n        # Telling the model not to compute or store gradients, saving memory and\n        # speeding up validation\n        with torch.no_grad():        \n\n            outputs = model(b_input_ids, \n                            token_type_ids=None, \n                            attention_mask=b_input_mask)\n        \n        # Get the \"logits\" output by the model. The \"logits\" are the output\n        # values prior to applying an activation function like the softmax.\n        logits = outputs[0]\n\n        # Move logits and labels to CPU\n        logits = logits.detach().cpu().numpy()\n        label_ids = b_labels.to('cpu').numpy()\n        \n        # Calculate the accuracy for this batch of test sentences.\n        tmp_eval_accuracy = flat_accuracy(logits, label_ids)\n        \n        # Accumulate the total accuracy.\n        eval_accuracy += tmp_eval_accuracy\n\n        # Track the number of batches\n        nb_eval_steps += 1\n\n    # Report the final accuracy for this validation run.\n    print(\"  Accuracy: {0:.2f}\".format(eval_accuracy\/nb_eval_steps))\n    print(\"  Validation took: {:}\".format(format_time(time.time() - t0)))\n\nprint(\"\")\nprint(\"Training complete!\")","6b3c886f":"import matplotlib.pyplot as plt\n% matplotlib inline\n\nimport seaborn as sns\n\n# Use plot styling from seaborn.\nsns.set(style='darkgrid')\n\n# Increase the plot size and font size.\nsns.set(font_scale=1.5)\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\n# Plot the learning curve.\nplt.plot(loss_values, 'b-o')\n\n# Label the plot.\nplt.title(\"Training loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\n\nplt.show()","192b775b":"import pandas as pd\n\n# Load the dataset into a pandas dataframe.\ndf = pd.read_csv(\"\/content\/sample_data\/test.csv\")\nprint(df.head())\n# Report the number of sentences.\nprint('Number of test sentences: {:,}\\n'.format(df.shape[0]))\n\n# Create sentence and label lists\nsentences = df.Text.values\nprint(len(sentences))\n# labels = df.label.values\nid = df.ID.values\n\n# Tokenize all of the sentences and map the tokens to thier word IDs.\ninput_ids = []\n\n# For every sentence...\nfor sent in sentences:\n    encoded_sent = tokenizer.encode(\n                        str(sent),                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                   )\n    \n    input_ids.append(encoded_sent)\n\n# Pad our input tokens\ninput_ids = pad_sequences(input_ids, maxlen=MAX_LEN, \n                          dtype=\"long\", truncating=\"post\", padding=\"post\")\n\n# Create attention masks\nattention_masks = []\n\n# Create a mask of 1s for each token followed by 0s for padding\nfor seq in input_ids:\n  seq_mask = [float(i>0) for i in seq]\n  attention_masks.append(seq_mask) \n\n# Convert to tensors.\nprediction_inputs = torch.tensor(input_ids)\nprediction_masks = torch.tensor(attention_masks)\n# prediction_labels = torch.tensor(labels)\n\n# Set the batch size.  \nbatch_size = 32  \n\n# Create the DataLoader.\nprediction_data = TensorDataset(prediction_inputs, prediction_masks)\nprediction_sampler = SequentialSampler(prediction_data)\nprediction_dataloader = DataLoader(prediction_data, sampler=prediction_sampler, batch_size=batch_size)","5954d140":"# Prediction on test set\n\nprint('Predicting labels for {:,} test sentences...'.format(len(prediction_inputs)))\n\n# Put model in evaluation mode\nmodel.eval()\n\n# Tracking variables \npredictions , true_labels = [], []\n\n# Predict \nfor batch in prediction_dataloader:\n  # Add batch to GPU\n  batch = tuple(t.to(device) for t in batch)\n  \n  # Unpack the inputs from our dataloader\n  b_input_ids, b_input_mask = batch\n  \n  # Telling the model not to compute or store gradients, saving memory and \n  # speeding up prediction\n  with torch.no_grad():\n      # Forward pass, calculate logit predictions\n      outputs = model(b_input_ids, token_type_ids=None, \n                      attention_mask=b_input_mask)\n\n  logits = outputs[0]\n\n  # Move logits and labels to CPU\n  logits = logits.detach().cpu().numpy()\n  label_ids = b_labels.to('cpu').numpy()\n  \n  # Store predictions and true labels\n  predictions.append(logits)\n\nprint('    DONE.')","465625c6":"# print('Positive samples: %d of %d (%.2f%%)' % (df.label.sum(), len(df.label), (df.label.sum() \/ len(df.label) * 100.0)))\ndf = pd.read_csv(\"\/content\/sample_data\/test.csv\")\nresults = []\nfor i, line in enumerate(predictions):\n  for predict in line:\n    # print(predict)\n    if predict[1] > 0:\n      result = 1\n    else:\n      result = 0\n    results.append(result)\n# print(results)\ndf = df.drop('Text', 1)\ndf.insert(1, \"Label\", results, True)\ndf = df[df[\"Label\"] == 1]\ndf = df.drop('Label', 1)\nprint(df.head())\n\ndf.to_csv ('text_submit.csv', index = False, header=True)","e182613d":"Our model expects PyTorch tensors rather than numpy.ndarrays, so convert all of our dataset variables.","91413bb9":"The attention mask simply makes it explicit which tokens are actual words versus which are padding. \n\nThe BERT vocabulary does not use the ID 0, so if a token ID is 0, then it's padding, and otherwise it's a real token.","cd70d2e6":"## 3.3. Padding & Truncating","1aefe4b7":"Let's apply the tokenizer to one sentence just to see the output.\n","8922b4ea":"## 3.5. Training & Validation Split\n","7f994862":"Given that, let's choose MAX_LEN = 64 and apply the padding.","e0c45014":"Divide up our training set to use 90% for training and 10% for validation.","919fc11d":"Helper function for formatting elapsed times.\n","49fe6a79":"Pad and truncate our sequences so that they all have the same length, `MAX_LEN`.","0422b0e6":"\nWith the test set prepared, we can apply our fine-tuned model to generate predictions on the test set.","239bf50b":"The code in this notebook is actually a simplified version of the [run_glue.py](https:\/\/github.com\/huggingface\/transformers\/blob\/master\/examples\/run_glue.py) example script from huggingface.\n\n`run_glue.py` is a helpful utility which allows you to pick which GLUE benchmark task you want to run on, and which pre-trained model you want to use (you can see the list of possible models [here](https:\/\/github.com\/huggingface\/transformers\/blob\/e6cff60b4cbc1158fbd6e4a1c3afda8dc224f566\/examples\/run_glue.py#L69)). It also supports using either the CPU, a single GPU, or multiple GPUs. It even supports using 16-bit precision if you want further speed up.\n\nUnfortunately, all of this configurability comes at the cost of *readability*. In this Notebook, we've simplified the code greatly and added plenty of comments to make it clear what's going on. ","e23d83c6":"## 4.2. Optimizer & Learning Rate Scheduler","f0ee7809":"OK, let's load BERT! There are a few different pre-trained BERT models available. \"bert-base-uncased\" means the version that has only lowercase letters (\"uncased\") and is the smaller version of the two (\"base\" vs \"large\").\n\nThe documentation for `from_pretrained` can be found [here](https:\/\/huggingface.co\/transformers\/v2.2.0\/main_classes\/model.html#transformers.PreTrainedModel.from_pretrained), with the additional parameters defined [here](https:\/\/huggingface.co\/transformers\/v2.2.0\/main_classes\/configuration.html#transformers.PretrainedConfig).","1c01abf9":"In order for torch to use the GPU, we need to identify and specify the GPU as the device. Later, in our training loop, we will load data onto the device. ","372f1063":"\nTo feed our text to BERT, it must be split into tokens, and then these tokens must be mapped to their index in the tokenizer vocabulary.\n\nThe tokenization must be performed by the tokenizer included with BERT--the below cell will download this for us. We'll be using the \"uncased\" version here.\n","6d40cfbb":"First, what's the maximum sentence length in our dataset?","605927b1":"## 3.4. Attention Masks","09e3d9a3":"## 3.6. Converting to PyTorch Data Types","be4f20a6":"Let's take a look at our training loss over all batches:","9d95d7c9":"When we actually convert all of our sentences, we'll use the `tokenize.encode` function to handle both steps, rather than calling `tokenize` and `convert_tokens_to_ids` separately. \n\nBefore we can do that, though, we need to talk about some of BERT's formatting requirements.","fffd3eb4":"Now that we have our model loaded we need to grab the training hyperparameters from within the stored model.\n\nFor the purposes of fine-tuning, the authors recommend choosing from the following values:\n- Batch size: 16, 32  (We chose 32 when creating our DataLoaders).\n- Learning rate (Adam): 5e-5, 3e-5, 2e-5  (We'll use 2e-5).\n- Number of epochs: 2, 3, 4  (We'll use 4).\n\nThe epsilon parameter `eps = 1e-8` is \"a very small number to prevent any division by zero in the implementation\" (from [here](https:\/\/machinelearningmastery.com\/adam-optimization-algorithm-for-deep-learning\/)).\n\nYou can find the creation of the AdamW optimizer in `run_glue.py` [here](https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L109).","37db029a":"## 5.2. Evaluate on Test Set\n","9ca2e563":"\nWe'll need to apply all of the same steps that we did for the training data to prepare our test data set.","777e3f6a":"The `tokenizer.encode` function combines multiple steps for us:\n1. Split the sentence into tokens.\n2. Add the special `[CLS]` and `[SEP]` tokens.\n3. Map the tokens to their IDs.\n\nOddly, this function can perform truncating for us, but doesn't handle padding. ","10f4327f":"We're ready to kick off the training!","a2fd3ae1":"Define a helper function for calculating accuracy.","75ce5511":"Accuracy on the CoLA benchmark is measured using the \"[Matthews correlation coefficient](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.matthews_corrcoef.html)\" (MCC).\n\nWe use MCC here because the classes are imbalanced:\n","a1f7ba0b":"Here are five sentences which are labeled as not grammatically acceptible. Note how much more difficult this task is than something like sentiment analysis!","384365c1":"We'll also create an iterator for our dataset using the torch DataLoader class. This helps save on memory during training because, unlike a for loop, with an iterator the entire dataset does not need to be loaded into memory.","d3354f1e":"\n\nLet's extract the sentences and labels of our training set as numpy ndarrays.","6dd3f363":"The two properties we actually care about are the the `sentence` and its `label`, which is referred to as the \"acceptibility judgment\" (0=unacceptable, 1=acceptable).","6384cc7d":"Just for curiosity's sake, we can browse all of the model's parameters by name here.\n\nIn the below cell, I've printed out the names and dimensions of the weights for:\n\n1. The embedding layer.\n2. The first of the twelve transformers.\n3. The output layer.\n\n\n"}}