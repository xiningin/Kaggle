{"cell_type":{"f84e4466":"code","161ad3ac":"code","03ef745c":"code","ad576ec2":"code","22bca78f":"code","93ce6e2b":"code","0faf9a4e":"code","a6181283":"code","955c3032":"code","c27f417f":"code","d917fdca":"code","42ca3118":"code","d6679bcf":"code","112664e1":"code","59c8599d":"code","70cd2248":"code","db22e5e2":"code","e30b6bc0":"code","1cf0454f":"code","ee30e058":"code","2aef6eb5":"code","8a958d6c":"code","5978b514":"code","0a04352e":"code","3a65744a":"code","7097b4c6":"code","4932cac9":"code","5f6fafcc":"code","3af283ad":"markdown","ec8d3761":"markdown","9ad0ee65":"markdown","3a7f5576":"markdown","e8010f55":"markdown","0bc90df7":"markdown","ea822dba":"markdown","5a2cbb3d":"markdown"},"source":{"f84e4466":"import tensorflow as tf\nimport tensorflow.keras.layers as tfl\nimport os\nfrom tqdm import tqdm\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.cluster import KMeans\nfrom PIL import Image\nfrom os.path import splitext\n","161ad3ac":"os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\npath='..\/input\/cityscapes-image-pairs'\ndef images_upload(path):\n    images=[]\n    for root,subfolders,files in os.walk(path):\n        for file in tqdm(files):\n            filename=root+os.sep+file\n            if filename.endswith('jpg') or filename.endwith('png'):\n                images.append(filename)\n    return images\nimages=images_upload(path)","03ef745c":"def convert_image_rgb(data):\n    imgs=[]\n    for i in tqdm(data):\n        img = cv2.imread(i,cv2.COLOR_BGR2RGB)\n        del i\n        imgs.append(img)\n    return imgs\nimg=convert_image_rgb(images)","ad576ec2":"plt.imshow(img[np.random.randint(0,len(img))]);","22bca78f":"def split_input_mask(data):\n    inputs=[]\n    mask=[]\n    for i in data:\n        a=i[:,:256]\n        inputs.append(a)\n        b=i[:,256:]\n        mask.append(b)\n    return inputs,mask\ninputs,mask=split_input_mask(img)","93ce6e2b":"del images\ndel img","0faf9a4e":"def show_images(data):\n    plt.figure(figsize=(10,10))\n    for i in range(9):\n        idx=np.random.randint(0,len(data))\n        plt.subplot(3,3,i+1)\n        img=data[idx]\n        plt.imshow(img)\nshow_images(inputs)","a6181283":"show_images(mask)","955c3032":"def images_compare(inputs,mask):\n    idx_new=np.random.randint(0,len(mask))\n    fig = plt.figure()\n    ax1 = fig.add_subplot(1,2,1)\n    ax1.imshow(mask[idx_new])\n    ax2 = fig.add_subplot(1,2,2)\n    ax2.imshow(inputs[idx_new],cmap='gray')\n    plt.show()\nimages_compare(inputs,mask)","c27f417f":"num_items = 1000\ncolor_array = np.random.choice(range(256), 3*num_items).reshape(-1,3)\nnum_classes = 20\nlabel_model = KMeans(n_clusters = num_classes)\nlabel_model.fit(color_array)\nlabel_class = label_model.predict(mask[10].reshape(-1,3)).reshape(256,256)\nfig, axes = plt.subplots(1,3,figsize=(15,5))\naxes[0].imshow(inputs[10]);\naxes[1].imshow(mask[10]);\naxes[2].imshow(label_class);","d917fdca":"def new_labels(mask):\n    num_items = 1000\n    color_array = np.random.choice(range(256), 3*num_items).reshape(-1,3)\n    num_classes = 10\n    label_model = KMeans(n_clusters = num_classes)\n    label_model.fit(color_array)\n    labels=[]\n    for i in tqdm(range(len(mask))):\n        label_class = label_model.predict(mask[i].reshape(-1,3)).reshape(256,256)\n        labels.append(label_class)\n    return labels\n","42ca3118":"labels=new_labels(mask)\nidx=np.random.randint(0,len(labels))\nclasses,freq=np.unique(labels[idx],return_counts=True)\nprint(f'number of classes :{len(classes)}')","d6679bcf":"plt.figure(figsize=(10,10))\nfor i in range(9):\n        plt.subplot(3,3,i+1)\n        im=labels[i]\n        plt.imshow(im)\n# plt.imshow(a)","112664e1":"def rescale(data):\n    rescaled=[]\n    for i in tqdm(data):\n        img=tf.image.convert_image_dtype(i, tf.float32)\n        del i\n        rescaled.append(img)\n    return rescaled","59c8599d":"rescaled_input=rescale(inputs)\n","70cd2248":"def build_model(inputsize=(256,256,3),classes=None):\n    inputs = tf.keras.Input(shape=(inputsize))\n\n    conv = tfl.Conv2D(32, (3, 3), padding=\"same\",kernel_initializer='he_normal', name='Conv1')(\n        inputs)\n    x=tfl.BatchNormalization()(conv)\n    x=tfl.LeakyReLU()(x)\n    x1 = tfl.Conv2D(32, (3, 3), padding=\"same\",kernel_initializer='he_normal', name='Conv2')(\n        x)\n    x=tfl.BatchNormalization()(x1)\n    x=tfl.LeakyReLU()(x)\n    x = tfl.MaxPool2D(pool_size=(2, 2), strides=(2, 2), name='MaxPool1')(x)\n\n    x = tfl.Conv2D(64, (3, 3), padding=\"same\",kernel_initializer='he_normal', name='Conv3')(x)\n    x=tfl.BatchNormalization()(x)\n    x=tfl.LeakyReLU()(x)\n    x2 = tfl.Conv2D(64, (3, 3), padding=\"same\",kernel_initializer='he_normal', name='Conv4')(x)\n    x=tfl.BatchNormalization()(x2)\n    x=tfl.LeakyReLU()(x)\n    x = tfl.MaxPool2D(pool_size=(2, 2), name='MaxPool2')(x)\n\n    x = tfl.Conv2D(128, (3, 3), padding=\"same\",kernel_initializer='he_normal', name='Conv5')(x)\n    x=tfl.BatchNormalization()(x)\n    x=tfl.LeakyReLU()(x)\n    x3 = tfl.Conv2D(128, (3, 3), padding=\"same\",kernel_initializer='he_normal', name='Conv6')(x)\n    x=tfl.BatchNormalization()(x3)\n    x=tfl.LeakyReLU()(x)\n    x = tfl.MaxPool2D(pool_size=(2, 2), strides=(2, 2), name='MaxPool3')(x)\n\n    \n    x = tfl.Conv2D(256, (3, 3), padding=\"same\",kernel_initializer='he_normal', name='Conv7')(x)\n    x=tfl.BatchNormalization()(x)\n    x=tfl.LeakyReLU()(x)\n    x = tfl.Conv2D(256, (3, 3), padding=\"same\",kernel_initializer='he_normal', name='Conv8')(x)\n    x=tfl.BatchNormalization()(x)\n    x=tfl.LeakyReLU()(x)\n    \n    x = tfl.Conv2DTranspose(128, (3, 3), strides=2, padding=\"same\")(x)\n    x=tfl.BatchNormalization()(x)\n    x=tfl.LeakyReLU()(x)\n\n    x = tfl.concatenate([x, x3], axis=3)\n    \n    x = tfl.Conv2D(128, (3, 3), padding=\"same\",kernel_initializer='he_normal', name='Conv9')(x)\n    x=tfl.BatchNormalization()(x)\n    x=tfl.LeakyReLU()(x)\n    x = tfl.Conv2D(128, (3, 3), padding=\"same\",kernel_initializer='he_normal', name='Conv10')(x)\n    x=tfl.BatchNormalization()(x)\n    x=tfl.LeakyReLU()(x)\n    x = tfl.Conv2DTranspose(64, (3, 3), strides=2, padding=\"same\")(x)\n    x=tfl.BatchNormalization()(x)\n    x=tfl.LeakyReLU()(x)\n\n    x = tfl.concatenate([x, x2], axis=3)\n\n    x = tfl.Conv2D(64, (3, 3), padding=\"same\",kernel_initializer='he_normal', name='Conv11')(x)\n    x=tfl.BatchNormalization()(x)\n    x=tfl.LeakyReLU()(x)\n    x = tfl.Conv2D(64, (3, 3), padding=\"same\",kernel_initializer='he_normal', name='Conv12')(x)\n    x=tfl.BatchNormalization()(x)\n    x=tfl.LeakyReLU()(x)\n    \n    x = tfl.Conv2DTranspose(32, (3, 3), strides=2, padding=\"same\")(x)\n    x=tfl.BatchNormalization()(x)\n    x=tfl.LeakyReLU()(x)\n\n    x = tfl.concatenate([x, x1], axis=3)\n\n    x = tfl.Conv2D(32, (3, 3), padding=\"same\",kernel_initializer='he_normal', name='Conv25')(x)\n    x=tfl.BatchNormalization()(x)\n    x=tfl.LeakyReLU()(x)\n    x = tfl.Conv2D(32, (3, 3), padding=\"same\",kernel_initializer='he_normal', name='Conv26')(x)\n    x=tfl.BatchNormalization()(x)\n    x=tfl.LeakyReLU()(x)\n    \n    outputs = tfl.Conv2D(classes, (1, 1), padding=\"same\", activation='softmax', name='Outputs')(x)\n    final_model = tf.keras.Model(inputs=inputs, outputs=outputs)\n    final_model.summary()\n    return final_model","db22e5e2":"mymodel=build_model(classes=10)","e30b6bc0":"img_file = '.\/model_arch.png'\n\ntf.keras.utils.plot_model(mymodel, to_file=img_file, show_shapes=True, show_layer_names=True)","1cf0454f":"del inputs","ee30e058":"def split_data(x,y,test_size=0.2):\n    x1=np.array(x)\n    del x\n    y1=np.array(y)\n    del y\n    x_train, x_test, y_train, y_test = train_test_split(x1, y1, test_size=test_size)\n    return  x_train, x_test, y_train, y_test","2aef6eb5":" x_train, x_test, y_train, y_test=split_data(rescaled_input[:1300],labels[:1300],test_size=0.2)\n\n  ","8a958d6c":"def callbacks(patience=5):\n    checkpoint = tf.keras.callbacks.ModelCheckpoint('seg_model.h5', monitor='loss', verbose=1, save_best_only=True, save_weights_only=True)\n    early=tf.keras.callbacks.EarlyStopping(monitor='loss',patience=patience)\n    callbacks_list=[checkpoint, early]\n    return callbacks_list\n","5978b514":"mymodel.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.01),loss=tf.keras.losses.sparse_categorical_crossentropy,metrics=['acc'])\nhist=mymodel.fit(x_train,y_train,batch_size=16,epochs=200,callbacks=callbacks())","0a04352e":"plt.plot(hist.history['loss'])\nplt.title(\"model loss\")\nplt.ylabel(\"Loss\")\nplt.xlabel(\"Epochs\")\nplt.show()","3a65744a":"plt.plot(hist.history[\"acc\"])\nplt.title(\"model accuracy\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.show()","7097b4c6":"pred=mymodel.predict(x_test)\ny_pred=tf.argmax(pred,axis=-1)","4932cac9":"\ndef show_predications(x_test,y_test,y_pred):\n    idx=np.random.randint(0,len(y_pred))\n    fig, axes = plt.subplots(1,3,figsize=(10,10))\n    axes[0].imshow(x_test[idx])\n    axes[0].set_title(\"original\")\n    axes[1].imshow(y_test[idx])\n    axes[1].set_title(\"mask\")\n    axes[2].imshow(y_pred[idx])\n    axes[2].set_title(\"predicated\")\n \n","5f6fafcc":"for i in range(3):\n    show_predications(x_test,y_test,y_pred)","3af283ad":"<p style=\"padding: 10px;color:black;font-size:120%;font-family: Times New Roman, Times, serif;\">Let us look at one of the images. It can be seen that the image contains both the real image and the mask, so the next task will be to distinguish between them. Randmoly has selected the following image.<\/p>","ec8d3761":" <div style=\"color:black;\n           display:fill;\n           border-radius:5px;\n           font-size:300%;\n           font-family: Times New Roman, Times, serif;\n    letter-spacing:0.5px\"><b>Training the model<\/b>\n\n<p style=\"padding: 10px;color:black;font-size:40%;font-family: Times New Roman, Times, serif;\"> The data is divided into train and test segments, with each segment accounting for 80% and 20% of the total. To prevent RAM memory from crashing, I'm using 1300 images. Because the model's output employs 'softmax' activation layer, the loss function is sparse categorical crossentropy. Next, I'm going to use argmax to return the index with the highest value, and then I'm going to make some predictions for the test.<\/p>","9ad0ee65":" <div style=\"color:black;\n           display:fill;\n           border-radius:5px;\n           font-size:300%;\n           font-family: Times New Roman, Times, serif;\n    letter-spacing:0.5px\"><b>Buliding the model<\/b>\n\n<p style=\"padding: 10px;color:black;font-size:40%;font-family: Times New Roman, Times, serif;\"> Here I'm using UNet since the position of the object is crucial for this task. The feature map is upsampled to the size of the original input image using a transposed convolution layer that preserves the spatial information. It also includes skip connections, which help to keep information that would otherwise be lost during encoding. This model is kind of mini-VGG. <\/p>","3a7f5576":" <div style=\"color:black;\n           display:fill;\n           border-radius:5px;\n           font-size:300%;\n           font-family: Times New Roman, Times, serif;\n    letter-spacing:0.5px\"><b>Labeling using K-means<\/b>\n\n<p style=\"padding: 10px;color:black;font-size:40%;font-family: Times New Roman, Times, serif;\">Although each pixel in these images is labeled, it was still necessary to separate the different colors to labels. K-means will be used to categorize these colored labels into ten different groups. This is a hyperparameter. The next few labeled images will be shown, followed by rescaling of the original image.<\/p>","e8010f55":" <div style=\"color:black;\n           display:fill;\n           border-radius:5px;\n           font-size:300%;\n           font-family: Times New Roman, Times, serif;\n    letter-spacing:0.5px\"><b>Conclusions<\/b>\n\n<p style=\"padding: 10px;color:black;font-size:40%;font-family: Times New Roman, Times, serif;\">\nDespite the fact that the results are not amazing, they are not so bad. More layers, as well as augmentations and different class clustering, are required for even better results.<\/p>","0bc90df7":" <div style=\"color:black;\n           display:fill;\n           border-radius:5px;\n           font-size:300%;\n           font-family: Times New Roman, Times, serif;\n    letter-spacing:0.5px\"><b>Loading Data & Data Preprocessing<\/b>\n\n<p style=\"padding: 10px;color:black;font-size:40%;font-family: Times New Roman, Times, serif;\">First using the OS library I'll upload the cityscapes pair images.<\/p>","ea822dba":"<p style=\"padding: 10px;color:black;font-size:120%;font-family: Times New Roman, Times, serif;\">Because the image shape is 512*256, it should be divided into two groups, real images and mask images, at 256 pixels on the x axis.<\/p>","5a2cbb3d":"<p style=\"padding: 10px;color:black;font-size:120%;font-family: Times New Roman, Times, serif;\">In this section, I'll show a few images of the real images as well as a few images of the mask images after they've been separated.<\/p>"}}