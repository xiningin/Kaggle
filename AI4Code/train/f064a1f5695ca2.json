{"cell_type":{"4990f459":"code","9f65d966":"code","f506fb2d":"code","312a8703":"code","7c73a2a8":"code","d9e6622a":"code","cde67354":"code","36e9d5be":"code","1e116a58":"code","25bccdc6":"code","db63bc5f":"code","a22ba09a":"code","f5d6fcbb":"code","cd8626dc":"code","5bf42aa7":"code","e03963f6":"code","03ea9b85":"markdown","a320d693":"markdown","ca71199e":"markdown","60bda6ee":"markdown","e0f42682":"markdown","a3e62170":"markdown","28388d18":"markdown","73667001":"markdown","fef43b9c":"markdown","8ec19656":"markdown"},"source":{"4990f459":"# Import all the necessary libraries\n\nimport numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing import image\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Conv2D, MaxPooling2D,MaxPool2D ,UpSampling2D, Flatten, Input\nfrom keras.optimizers import SGD, Adam, Adadelta, Adagrad\nfrom keras import backend as K\nimport tensorflow as tf\nfrom tensorflow.keras.callbacks import EarlyStopping","9f65d966":"train_images = sorted(os.listdir('..\/input\/chest-xray\/normal_xray\/'))\ntrain_image = []\n\nfor im in train_images:\n    img = image.load_img('..\/input\/chest-xray\/normal_xray\/'+ im, target_size=(64,64), color_mode= 'grayscale')\n    img = image.img_to_array(img)\n    img = img\/255\n    train_image.append(img)\ntrain_df = np.array(train_image)","f506fb2d":"def show_img(dataset):\n    f, ax = plt.subplots(1,5)\n    f.set_size_inches(40, 20)\n    for i in range(5,10):\n        ax[i-5].imshow(dataset[i].reshape(64,64), cmap='gray')\n    plt.show()","312a8703":"def add_noise(image):\n    row,col,ch= image.shape\n    mean = 0\n    sigma = 1\n    gauss = np.random.normal(mean,sigma,(row,col,ch))\n    gauss = gauss.reshape(row,col,ch)\n    noisy = image + gauss*0.03\n    return noisy","7c73a2a8":"noise_imgs= []\n\nfor img in train_df:\n    noisy_img = add_noise(img)\n    noise_imgs.append(noisy_img)\n\nnoise_imgs= np.array(noise_imgs)","d9e6622a":"show_img(train_df)","cde67354":"show_img(noise_imgs)","36e9d5be":"print('Noisy image shape: ',noise_imgs.shape,' Train image shape: ',train_df.shape)","1e116a58":"xnoised= noise_imgs[0:80]\nxtest= noise_imgs[80:]","25bccdc6":"def autoencoder():\n    \n    input_img = Input(shape=(64,64,1), name='image_input')\n    \n    #enoder \n    x = Conv2D(64, (3,3), activation='relu', padding='same', name='Conv1')(input_img)\n    x = MaxPooling2D((2,2), padding='same', name='pool1')(x)\n    x = Conv2D(64, (3,3), activation='relu', padding='same', name='Conv2')(x)\n    x = MaxPooling2D((2,2), padding='same', name='pool2')(x)\n    \n    #decoder\n    x = Conv2D(64, (3,3), activation='relu', padding='same', name='Conv3')(x)\n    x = UpSampling2D((2,2), name='upsample1')(x)\n    x = Conv2D(64, (3,3), activation='relu', padding='same', name='Conv4')(x)\n    x = UpSampling2D((2,2), name='upsample2')(x)\n    x = Conv2D(1, (3,3), activation='sigmoid', padding='same', name='Conv5')(x)\n    \n    #model\n    autoencoder = Model(inputs=input_img, outputs=x)\n    autoencoder.compile(optimizer='adam', loss='binary_crossentropy')\n    \n    return autoencoder","db63bc5f":"model= autoencoder()\nmodel.summary()","a22ba09a":"with tf.device('\/device:GPU:0'):\n    early_stopping = EarlyStopping(monitor='val_loss', min_delta=0, patience=10, verbose=1, mode='auto')\n    model.fit(xnoised, xnoised, epochs=70, batch_size=10, validation_data=(xtest, xtest), callbacks=[early_stopping])","f5d6fcbb":"xtrain= train_df[80:]","cd8626dc":"import cv2\n\npred= model.predict(xtest[:5])\ndef plot_predictions(y_true, y_pred):    \n    f, ax = plt.subplots(4, 5)\n    f.set_size_inches(10.5,7.5)\n    for i in range(5):\n        ax[0][i].imshow(np.reshape(xtrain[i], (64,64)), aspect='auto', cmap='gray')\n        ax[1][i].imshow(np.reshape(y_true[i], (64,64)), aspect='auto', cmap='gray')\n        ax[2][i].imshow(np.reshape(y_pred[i], (64,64)), aspect='auto', cmap='gray')\n        ax[3][i].imshow(cv2.medianBlur(xtrain[i], (5)), aspect='auto', cmap='gray')\n       \n    plt.tight_layout()\nplot_predictions(xtest[:5], pred[:5])","5bf42aa7":"new_image = cv2.medianBlur(xtrain[0], (5))\nplt.figure(figsize=(6,3))\nplt.subplot(121)\nplt.imshow(pred[0].reshape(64,64), cmap='gray')\nplt.title('Autoencoder Image')\nplt.xticks([])\nplt.yticks([])\nplt.subplot(122)\nplt.imshow(new_image, cmap='gray')\nplt.title('Median Filter')\nplt.xticks([])\nplt.yticks([])\nplt.show()","e03963f6":"from math import log10, sqrt \n  \ndef PSNR(original, denoiced): \n    mse = np.mean((original - denoiced) ** 2) \n    if(mse == 0):  # MSE is zero means no noise is present in the signal . \n                  # Therefore PSNR have no importance. \n        return 100\n    max_pixel = 255.0\n    psnr = 20 * log10(max_pixel \/ sqrt(mse)) \n    return psnr \n  \nvalue1 = PSNR(xtest[0], new_image)\nvalue2 = PSNR(xtest[0], pred[0])\n\nprint(f\"PSNR value for Denoised image is {value2} dB while for Median filtered image is {value1} dB\")","03ea9b85":"### Defining a function to add Gaussian noise to our images. In addition we also multiply by a factor of 0.03, as it is the fraction of noise that we want in our picture.","a320d693":"### Load and preprocess the images\n1. Read the images in gray scale\n2. Resize them to size 64x64\n3. Normalize the pixels","ca71199e":"### Defining the model architecture as per the design suggested in the paper","60bda6ee":"### Introduciton\n\n1. In this notebook, I've implemented [Medical image denoising using convolutional denoising autoencoders](http:\/\/https:\/\/arxiv.org\/pdf\/1608.04667.pdf) paper for Chest X-Ray images. \n2. In This paper author proposed a method to contruct a denoising autoencoder, which gives far superior results than that the Median filtering. ","e0f42682":"### Display Normal Images in Train Set","a3e62170":"### Take 80% images for training and rest 20% we will use for testing","28388d18":"### Display a singel image after denoising using autoencoder","73667001":"## Plotting the predictions.\n\n1. First row:   Original image\n2. Second row:  Noice image\n3. Third row:   Denoised image using Autoencoder\n4. Fourth row:  Median filter image","fef43b9c":"### Display Noisy Images","8ec19656":"### Defining Function to plot the images"}}