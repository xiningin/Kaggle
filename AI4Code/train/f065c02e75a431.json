{"cell_type":{"1c7e0bbe":"code","7d680935":"code","70216248":"markdown"},"source":{"1c7e0bbe":"from typing import TypeVar, Generic, List\nT = TypeVar('T')\n\n\nclass Stack(Generic[T]):\n    def __init__(self):\n        self.container: List[T] = []\n\n    def push(self, item:T):\n        self.container.append(item)\n\n    def pop(self) -> T:\n        return self.container.pop()\n\n    def __repr__(self) -> str:\n        return repr(self.container)\n\n\nnum_discs: int = 10\ntower_a: Stack[int] = Stack()\ntower_b: Stack[int] = Stack()\ntower_c: Stack[int] = Stack()\n\nfor i in range(1, num_discs + 1):\n    tower_a.push(i)\n\nprint(tower_a)","7d680935":"def solve_hanoi(begin: Stack[int],  end: Stack[int], middle: Stack[int], n:int) -> None:\n    if n == 1:\n        return end.push(begin.pop())\n    else:\n        solve_hanoi(begin, middle, end, n - 1)\n        solve_hanoi(begin, end, middle, 1)\n        solve_hanoi(middle, end, begin, n - 1)\n\n\nsolve_hanoi(tower_a, tower_c, tower_b, num_discs)\n\n\nprint(f'tower A: {tower_a}')\nprint(f'tower B: {tower_b}')\nprint(f'tower C: {tower_c}')","70216248":"# Tower of hanoi - Python implementation"}}