{"cell_type":{"536ded61":"code","4bade837":"code","8c5483f9":"code","2619a7ec":"code","8931bcc1":"code","73327a19":"code","f795ead8":"code","d6346713":"code","60e79d63":"code","5e174528":"code","ec77bb4f":"code","76ab297f":"code","93b59325":"code","0eafa677":"code","b220db69":"code","b14ef3b8":"code","834dbcd8":"code","ca1b9050":"code","4f446d86":"code","9365ee2c":"code","bbe729bc":"code","39a9c0c6":"code","5df36fde":"code","f4e0c66a":"code","579d17d9":"code","da1681a9":"code","d65a7722":"code","a001403b":"code","f00ea064":"code","172fe347":"code","51415896":"code","7935866f":"code","be62f69d":"code","242ed4ce":"code","be218fb0":"code","9fa2e4bb":"code","ed24fe45":"code","e54b4293":"code","a80b1c5f":"code","d0f31c85":"code","ddcd2d9e":"code","7a35b248":"code","44a0a74a":"code","ce210a94":"code","289aa7cf":"code","87045986":"code","e9adc7ce":"code","a4ecf294":"code","467a97da":"code","b92f50f0":"code","82b1b466":"markdown","dc352db5":"markdown","b9382356":"markdown","b6824429":"markdown","da168157":"markdown"},"source":{"536ded61":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport datetime as dt\nfrom scipy import stats\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4bade837":"crime_chi = pd.read_csv(\"..\/input\/crimes-in-chicago\/Chicago_Crimes_2012_to_2017.csv\", usecols=[\"Date\", \"Primary Type\"], error_bad_lines=False)\n","8c5483f9":"weather = pd.read_csv(\"..\/input\/chicago-beach-swim,-weather,-lab-data\/beach-weather-stations-automated-sensors.csv\", usecols=[\"Measurement Timestamp\", \"Air Temperature\", \"Total Rain\"], error_bad_lines=False)","2619a7ec":"\nweather.columns = ['Date', 'Temp', 'Total Precipitation']\nweather.loc[:,'Date'] = pd.to_datetime(weather.loc[:,'Date'])\nweather['Date'] = weather['Date'].dt.date\n","8931bcc1":"#This cell takes a long time to run\ncrime_chi.loc[:,'Date'] = pd.to_datetime(crime_chi.loc[:,'Date'], dayfirst=True, yearfirst=False)\ncrime_chi['Date'] = crime_chi['Date'].dt.date","73327a19":"crime_chi = crime_chi.sort_values(by=['Date'])\nweather = weather.dropna()","f795ead8":"start_date = dt.date(2015,5,22)\n# print(start_date)\nend_date = dt.date(2017,1,18)\n# print(end_date)\ndate_mask = (weather['Date'] > start_date) & (weather['Date'] <= end_date)\ndate_mask2 = (crime_chi['Date'] > start_date) & (crime_chi['Date'] <= end_date)","d6346713":"weather = weather.loc[date_mask]\ncrime_chi = crime_chi.loc[date_mask2]","60e79d63":"#Get the list of the crimes considered \"violent\" by US law\nviolent = ['ASSAULT','BATTERY','CRIM SEXUAL ASSAULT', 'ROBBERY',\n           'SEX OFFENSE', 'HOMICIDE', 'INTIMIDATION', 'KIDNAPPING', 'SEX']\n","5e174528":"#calculate the total frequency of all crimes per day. \ntotal_crimes = (crime_chi.groupby(['Date']).size())\navg_weather = weather.groupby(['Date']).mean()\n# print(avg_weather)\n# print(total_crimes)","ec77bb4f":"# date = pd.date_range(start=start_date, end=end_date)\n# new_df = pd.DataFrame({'Date':date, 'Incidents':total_crimes}, )\n# new_df\n\n#create a merged data frame?\nframes = [total_crimes, avg_weather]\nresult = pd.concat(frames, axis=1, sort=True)\nresult = result.dropna()\nresult.columns = ['Incidents','Temp (C)', 'Total Precipitation (mm)']\nresult.plot(kind='Scatter', x='Temp (C)', y='Incidents')\nresult.plot(kind='Scatter', x='Total Precipitation (mm)', y='Incidents', color='r')\nresult.plot()\n","76ab297f":"\nresult.isnull().values.any()\nregr = LinearRegression()\n# std_dev = 4\n#getting rid of data that is outside 4 standard deviations.\n# result = result[(np.abs(stats.zscore(result)) < float(std_dev)).all(axis=1)]\nX = pd.DataFrame(result['Temp (C)'])\ny = pd.DataFrame(result['Incidents'])\n# print(y)\nregr.fit(X,y)\nprint(regr.coef_)\nprint(regr.intercept_)\npred = regr.predict(X)\nplt.scatter(result['Temp (C)'], result['Incidents'], color='g')\nplt.plot(X, pred, color='b')\nplt.show()\n\nX2 = pd.DataFrame(result['Total Precipitation (mm)'])\nregr2 = LinearRegression()\nregr2.fit(X2, y)\np2 = regr2.predict(X2)\nprint(regr2.coef_)\nprint(regr2.intercept_)\nplt.scatter(result['Total Precipitation (mm)'], result['Incidents'], color='k')\nplt.plot(X2, p2, color='y')\nplt.show()\n","93b59325":"v = (X.values.reshape([1,584]))\nv.shape\nw = y.values.reshape([1,584])\nq = w.shape\nprint(type(q))\nprint(np.corrcoef(v,w))","0eafa677":"start_summer15 = dt.date(2015, 6, 21)\nend_summer15 = dt.date(2015, 9, 23)\nstart_summer16 = dt.date(2016, 6, 20)\nend_summer16 = dt.date(2016, 9, 22)\n\nsummer15 = (weather['Date'] > start_summer15) & (weather['Date'] <= end_summer15)\ncsummer15 = (crime_chi['Date'] > start_summer15) & (crime_chi['Date'] <= end_summer15)\nsummer16 = (weather['Date'] > start_summer16) & (weather['Date'] <= end_summer16)\ncsummer16 = (crime_chi['Date'] > start_summer16) & (crime_chi['Date'] <= end_summer16)\n\nsummer_incidents = crime_chi[csummer15 | csummer16]\nsummer_weather = weather[summer15 | summer16]\n \navg_summerC = (summer_incidents.groupby(['Date']).size())\navg_summerT = summer_weather.groupby(['Date']).mean()\n\n","b220db69":"#combine the new data groups\n\nf2 = [avg_summerC, avg_summerT]\nsummer_data = pd.concat(f2, axis=1, sort=True)\nsummer_data = summer_data.dropna()\nsummer_data.columns = ['Incidents','Temp (C)', 'Total Precipitation (mm)']\nsummer_data.plot(kind='Scatter', x='Total Precipitation (mm)', y='Incidents')\n# summer_data","b14ef3b8":"crime_chi_X = pd.DataFrame()","834dbcd8":"def clean_date(dataframe):\n    dataframe.loc[:,'Date'] = pd.to_datetime(dataframe.loc[:,'Date'], dayfirst=True, yearfirst=False)\n    dataframe['Date'] = dataframe['Date'].dt.date\n    dataframe = dataframe.sort_values(by=['Date'])\n    dataframe = dataframe.dropna()\n    return dataframe","ca1b9050":"crime_la = pd.read_csv('..\/input\/los-angeles-crime\/Crimes_2012-2016.csv', \n                       engine='python', usecols = ['DATE.OCC', 'CrmCd.Desc'], error_bad_lines=False)\n","4f446d86":"crime_la.columns = ['Date', 'Description']\ncrime_la = clean_date(crime_la)\ncrime_la.head(3)","9365ee2c":"crime_baltimore = pd.read_csv('..\/input\/crime-in-baltimore\/BPD_Part_1_Victim_Based_Crime_Data.csv', usecols = [\"CrimeDate\", \"Description\"], \n                              engine='python',error_bad_lines=False)\n","bbe729bc":"crime_baltimore.columns = ['Date', 'Description']\ncrime_baltimore = clean_date(crime_baltimore)\ncrime_baltimore.head(3)","39a9c0c6":"crime_boston = pd.read_csv('..\/input\/boston-crime-data\/crime.csv', engine='python',\n                           usecols=[\"OFFENSE_DESCRIPTION\", \"OCCURRED_ON_DATE\"], error_bad_lines=False)\n","5df36fde":"crime_boston.columns = ['Description', 'Date']\ncrime_boston = clean_date(crime_boston)\ncrime_boston.head(3)","f4e0c66a":"crime_chi.columns = ['Date', 'Description']\ncrime_chi = clean_date(crime_chi)\ncrime_chi.head(3)\n#takes a long time to run\n","579d17d9":"temperatures_all = pd.read_csv('..\/input\/historical-hourly-weather-data\/temperature.csv', engine='python',\n                               usecols=[\"datetime\",\"Los Angeles\",\"Chicago\",\"Boston\"], \n                               error_bad_lines=False)\n","da1681a9":"temperatures_all.columns = ['Date', 'LA', 'CHI', 'BO']\ntemperatures_all = clean_date(temperatures_all)\ntemperatures_all.head(3)","d65a7722":"def k_to_c(column):\n    result = [(x - 273.15) for x in column]\n    return result\n","a001403b":"#convert kelvin to celcius\n#only rune this cell ONCE, otherwise the data will be off by, n*-273.15\nfor column in temperatures_all:\n    if column == 'Date':\n        pass\n    else:\n        temperatures_all[column] = k_to_c(temperatures_all[column])\n","f00ea064":"def quant_corr(df):\n    '''df is a two column dataframe.\n    This function returns the slope, intercept, and r-values for \n    a scatter plot to quantify the strength of a relationship.w'''\n    \n#     std_dev = 3\n#     print(\"excluding values outside a SD =\", std_dev)\n#     getting rid of data that is outside 4 standard deviations.\n#     df = df[(np.abs(stats.zscore(df)) < float(std_dev)).all(axis=1)]\n    regr = LinearRegression()\n    X = pd.DataFrame(df.iloc[:,1]) #incidents\n    y = pd.DataFrame(df.iloc[:,0]) #temperatures\n    regr.fit(X,y)\n    print(regr.coef_) #slope of correlation\n    print(regr.intercept_) #y intercept\n    pred = regr.predict(X) #this can be plotted against X to get a line. \n    rval, pval = stats.pearsonr(X, y)\n    print(\"Correlation coefficient is:\", rval, \"P value is: \", pval)\n    return pred","172fe347":"def intersection(lst1,lst2, *args):\n#     for ar in args:\n#         print(ar)\n    lst3 = [value for value in lst1 if (value in lst2)]# and (value in args[0])]\n    return lst3\n\n\ndef temp_correlation(temps, incidents, *args):\n    '''This function produces a scatter plot after inputting two dataframes that\n    do not have consistent date ranges. '''\n    #check intersection of dates\n    t_dates = list(temps.Date.unique()) \n    crime_dates = list(incidents.Date.unique())\n    date_range = intersection(t_dates, crime_dates)\n    \n    #get start date and end date masks\n    start_date = date_range[0]\n    end_date = date_range[len(date_range) - 1]\n    date_mask = (temps['Date'] > start_date) & (temps['Date'] <= end_date)\n    date_mask2 = (incidents['Date'] > start_date) & (incidents['Date'] <= end_date)\n    \n    #match the timeframes\n    temps = temps.loc[date_mask]\n    incidents = incidents.loc[date_mask2]\n    \n    #get number of incidents of crime\n    total_crimes = (incidents.groupby(['Date']).size())\n    avg_weather = temps.groupby(['Date']).mean()\n    \n    #combine dataframes\n    frames = [total_crimes, avg_weather]\n    result = pd.concat(frames, axis=1, sort=True)\n    result = result.dropna()\n    std_dev = 3\n    result = result[(np.abs(stats.zscore(result)) < float(std_dev)).all(axis=1)]\n    #get correlation\n    if len(result.columns) == 4:\n        result.columns = ['Incidents','LA', 'CHI', 'BO']\n    elif len(result.columns) == 2:\n        result.columns = ['Incidents', args[0]]\n    result.plot(kind='Scatter', x=args[0], y='Incidents')\n#     plt.title(\"\")\n    combined = result[['Incidents', args[0]]]\n#     print(combined)\n\n    return combined #This is the combined dataframe with overall average \n\nla_result = temp_correlation(temperatures_all, crime_la, 'LA')","51415896":"bo_result = temp_correlation(temperatures_all, crime_boston, 'BO')\n# print(bo_result)","7935866f":"chi_result = temp_correlation(temperatures_all, crime_chi, 'CHI')","be62f69d":"qchi = quant_corr(chi_result)","242ed4ce":"qla = quant_corr(la_result)","be218fb0":"qbo = quant_corr(bo_result)","9fa2e4bb":"bo_result.plot()\nchi_result.plot()\nla_result.plot()","ed24fe45":"std_dev = 3\nla_clean = la_result[(np.abs(stats.zscore(la_result)) < float(std_dev)).all(axis=1)]\nbo_clean = bo_result[(np.abs(stats.zscore((bo_result))) < float(std_dev)).all(axis=1)]\nchi_clean = chi_result[(np.abs(stats.zscore(chi_result)) < float(std_dev)).all(axis=1)]\n# plt.fig(figsize=([11,8.5]))\nla_clean.plot()\nbo_clean.plot()\nchi_clean.plot()","e54b4293":"# types_baltimore = (list(crime_baltimore['Description'].unique()))\nalltypes_chi = (list(crime_chi['Description'].unique()))\nalltypes_bo = (list(crime_boston['Description'].unique()))\nalltypes_la = (list(crime_la['Description'].unique()))\n\n\ndef get_types(all_types, type_list):\n    violent_type = []\n    for x in all_types:\n        for y in type_list:\n#             print(type(x))\n            if y in x:\n                violent_type.append(x)\n    return violent_type\ntypes = get_types(alltypes_la, violent)\nincidents = crime_la.loc[crime_la['Description'].isin(types)]","a80b1c5f":"def type_correlation(city, temps, types, *args):\n    '''Func temperature correlation gives temp vs overall crime, this gives\n    a correlation for violent\/nonviolent crime.'''\n    #first, get the dataframe for the types of crime\n    incidents = city.loc[city['Description'].isin(types)]\n    weather = temps\n    \n    #check intersection of dates\n    t_dates = list(temps.Date.unique()) \n    crime_dates = list(incidents.Date.unique())\n    date_range = intersection(t_dates, crime_dates)\n    \n    #get start date and end date masks\n    start_date = date_range[0]\n    end_date = date_range[len(date_range) - 1]\n    date_mask = (temps['Date'] > start_date) & (temps['Date'] <= end_date)\n    date_mask2 = (incidents['Date'] > start_date) & (incidents['Date'] <= end_date)\n    \n    #match the timeframes\n    temps = temps.loc[date_mask]\n    incidents = incidents.loc[date_mask2]\n    \n    #get number of incidents of crime\n    total_crimes = (incidents.groupby(['Date']).size())\n    avg_weather = temps.groupby(['Date']).mean()\n    \n    #combine dataframes\n    frames = [total_crimes, avg_weather]\n    result = pd.concat(frames, axis=1, sort=True)\n    result = result.dropna()\n    #get correlation\n    if len(result.columns) == 4:\n        result.columns = ['Incidents','LA', 'CHI', 'BO']\n    elif len(result.columns) ==2:\n        result.columns = ['Incidents', 'Total Precipitation']\n    result.plot(kind='Scatter', x=args[0], y='Incidents')\n    combined = result[['Incidents', args[0]]]\n#     print(combined)\n#     combined = temp_correlation(incidents, weather, args[0])\n    return combined\n","d0f31c85":"violent_chi = type_correlation(crime_chi, temperatures_all, violent, 'CHI')\nviolent_chi.plot(kind='scatter', x='CHI', y='Incidents')\nvchi = quant_corr(violent_chi)\nplt.plot(violent_chi['CHI'], vchi, color='y')","ddcd2d9e":"v_la = get_types(alltypes_la, violent)\nviolent_la = type_correlation(crime_la, temperatures_all, v_la, 'LA')\nviolent_la.plot(kind='scatter', x='LA', y='Incidents')\nvla = quant_corr(violent_la)\nplt.plot(violent_la['LA'], vla, color='y')","7a35b248":"v_bo = get_types(alltypes_bo, violent)\nviolent_bo = type_correlation(crime_boston, temperatures_all, v_bo, 'BO')\nviolent_bo.plot(kind='scatter', x='BO', y='Incidents')\nvbo = quant_corr(violent_bo) #These are all very weakly correlated. \nplt.plot(violent_bo['BO'], vbo, color='y')","44a0a74a":"def winter_correlation(incidents, temps, *args):\n    #create dateranges\n    winter_start1718 = dt.datetime(2017, 12, 21).date()\n    winter_end1718 = dt.datetime(2018,3,20).date()\n    winter_start1617 = dt.datetime(2016,12,21).date()\n    winter_end1617 = dt.datetime(2017,3,20).date()\n    winter_start1516 = dt.datetime(2015,12,21).date()\n    winter_end1516=dt.datetime(2016,3,19).date()\n    #create masks\n    win_temp1718 = (temps['Date'] > winter_start1718) & (temps['Date'] <= winter_end1718)\n    win_crim1718 = (incidents['Date'] > winter_start1718) & (incidents['Date'] <= winter_end1718)\n    win_temp1617 = (temps['Date'] > winter_start1617) & (temps['Date'] <= winter_end1617)\n    win_crim1617 = (incidents['Date'] > winter_start1617) & (incidents['Date'] <= winter_end1617)\n    win_temp1516 = (temps['Date'] > winter_start1516) & (temps['Date'] <= winter_end1516)\n    win_crim1516 = (incidents['Date'] > winter_start1516) & (incidents['Date'] <= winter_end1516)\n    winter = win_temp1516 | win_temp1617 | win_temp1718\n    winter_crime = win_crim1516 | win_crim1617 | win_crim1718\n    #change dataframes\n    incidents = incidents[winter_crime]\n    temps = temps[winter]\n    \n    combined = temp_correlation(temps, incidents, args[0])\n    return combined\n\nchi_winter = winter_correlation(crime_chi, temperatures_all, 'CHI')","ce210a94":"def extreme_corr(df, *args):\n    avg_temp = np.mean(df[args[0]])\n    std_dev = 0.75\n    ex_df = df[(np.abs(stats.zscore(df)) > float(std_dev)).all(axis=1)]\n#     ex_df = ex_df[ex_df[args[0]] < 0]\n#     print(ex_df)\n    ex_df.plot(kind='Scatter', x=args[0], y='Incidents')\n    return ex_df\n\n\nchi_cold = extreme_corr(chi_winter, 'CHI')\nvchi = quant_corr(chi_cold)\n    \n","289aa7cf":"# def c_to_k(column):\n#     result = [(x + 273.15) for x in column]\n#     return result\n\n# result['Temp (C)'] = c_to_k(result['Temp (C)'])\n# result.plot()","87045986":"def summer_correlation(incidents, temps, *args):\n    '''Func returns scatterplot of summer weather vs overall crime.'''\n    #create dateranges\n    summer_start15 = dt.date(2015, 6, 21)\n    summer_end15 = dt.date(2015, 9, 23)\n    summer_start16 = dt.date(2016, 6, 20)\n    summer_end16 = dt.date(2016, 9, 22)\n    summer_start17 = dt.date(2017, 6, 21)\n    summer_end17 = dt.date(2017, 9, 22)\n    #create masks\n    sum_temp17 = (temps['Date'] > summer_start17) & (temps['Date'] <= summer_end17)\n    sum_crim17 = (incidents['Date'] > summer_start17) & (incidents['Date'] <= summer_end17)\n    sum_temp16 = (temps['Date'] > summer_start16) & (temps['Date'] <= summer_end16)\n    sum_crim16 = (incidents['Date'] > summer_start16) & (incidents['Date'] <= summer_end16)\n    sum_temp15 = (temps['Date'] > summer_start15) & (temps['Date'] <= summer_end15)\n    sum_crim15 = (incidents['Date'] > summer_start15) & (incidents['Date'] <= summer_end15)\n    summer = sum_temp15 | sum_temp16 | sum_temp17\n    summer_crime = sum_crim15 | sum_crim16 | sum_crim17\n    #change dataframes\n    incidents = incidents[summer_crime]\n    weather = temps[summer]\n    \n    #The rest is the same as temps correlation\n    combined = temp_correlation(weather, incidents, args[0])\n    \n    return combined","e9adc7ce":"BO_winter = winter_correlation(crime_boston, temperatures_all, 'BO')\nBO_winter.plot(kind='scatter', x='BO', y='Incidents')\nBO_cold = extreme_corr(BO_winter, 'BO')\n# chi_cold.plot(kind='')\npBO_winter = quant_corr(BO_winter)\npBO_cold = quant_corr(BO_cold)\n\nBO_summer = summer_correlation(crime_boston, temperatures_all, 'BO')\nBO_summer.plot(kind='scatter', x='BO', y='Incidents')\nBO_hot = extreme_corr(BO_summer, 'BO')\n\npBO_summer = quant_corr(BO_summer)\npBO_hot = quant_corr(BO_hot)\n\nprint(\"The average number of incidents in the summer months in Boston is:\", np.mean(BO_summer['Incidents']))\nprint(\"The average number of incidents in the winter months in Boston is:\", np.mean(BO_winter['Incidents']))","a4ecf294":"LA_winter = winter_correlation(crime_la, temperatures_all, 'LA')\nLA_winter.plot(kind='scatter', x='LA', y='Incidents')\nLA_cold = extreme_corr(LA_winter, 'LA')\n# chi_cold.plot(kind='')\npLA_winter = quant_corr(LA_winter)\npLA_cold = quant_corr(LA_cold)\n\nLA_summer = summer_correlation(crime_boston, temperatures_all, 'LA')\nLA_summer.plot(kind='scatter', x='LA', y='Incidents')\nLA_hot = extreme_corr(LA_summer, 'LA')\n\npLA_summer = quant_corr(LA_summer)\npLA_hot = quant_corr(LA_hot)\n\n# print(\"The average number of incidents in the summer months in Los Angeles is:\", np.mean(LA_summer['Incidents']))\n# print(\"The average number of incidents in the winter months in Los Angeles is:\", np.mean(LA_winter['Incidents'])","467a97da":"# result.plot()\nprint(len(result.columns))\n# crime_chi\nprecip = weather[['Date', 'Total Precipitation']]\n# precip\n\nrain_corr_all = temp_correlation(precip, crime_chi, 'Total Precipitation')\nchicago_rain = quant_corr(rain_corr_all)\nplt.plot(rain_corr_all['Total Precipitation'], chicago_rain, color='y', label='all')\n\nrain_corr_sum = summer_correlation(crime_chi, precip, 'Total Precipitation')\nchicago_summer_rain = quant_corr(rain_corr_sum)\nplt.plot(rain_corr_sum['Total Precipitation'], chicago_summer_rain, color='y', label='Summer')\n\nsum_ex_rain = extreme_corr(rain_corr_sum, 'Total Precipitation')\npsumxrain = quant_corr(sum_ex_rain)\nplt.plot(sum_ex_rain['Total Precipitation'], psumxrain, color='y')\n\nrain_corr_win = winter_correlation(crime_chi, precip, 'Total Precipitation')\nchicago_winter_rain = quant_corr(rain_corr_win)\nplt.plot(rain_corr_win['Total Precipitation'], chicago_winter_rain, color='y')\n\nwin_x_rain = extreme_corr(rain_corr_win, 'Total Precipitation')\npwinxrain = quant_corr(win_x_rain)\nplt.plot(win_x_rain['Total Precipitation'], pwinxrain, color='y')","b92f50f0":"violent_chi_rain = type_correlation(crime_chi, precip, violent, 'Total Precipitation')\n","82b1b466":"**This section is where I read in all the data into their respective dataframes.** \n","dc352db5":"**Create some new masks to distinguish between summer and winter months**","b9382356":"# Importing All Files","b6824429":"**Creating a new dataframe containing [Date, Total Daily Crimes, Average Temperature for the Day[C]]**","da168157":"**If the relationship between temperature and weather was strongly correlated, we could qualitatively observe that more extreme weather resulted in more incidents.**"}}