{"cell_type":{"a52c15fb":"code","bb4985f9":"code","66dedb93":"code","65f756b4":"code","a3f48d7f":"code","88c3b80f":"code","ed28675b":"code","f2ae24f0":"code","82a78eb6":"code","1b4c2913":"code","cdfcc86f":"code","3282edec":"code","73e44999":"code","6b251363":"code","eb0d29fe":"code","19af45f8":"code","c67db6df":"code","4ea4a474":"code","a0de2bfb":"code","e791fb15":"markdown","32b9873d":"markdown","be3d83d9":"markdown","1a5671d3":"markdown","9d35ecf0":"markdown","77bb9278":"markdown","9142f5b6":"markdown","19914938":"markdown","3cbc7bb2":"markdown","e5966a4b":"markdown","7a3ffd55":"markdown","9346116f":"markdown","fac47f35":"markdown","7cd98f19":"markdown"},"source":{"a52c15fb":"!pip install openai","bb4985f9":"\n\"\"\"Creates the Example and GPT classes for a user to interface with the OpenAI\nAPI.\"\"\"\n\nimport openai\nimport uuid\n\n\ndef set_openai_key(key):\n    \"\"\"Sets OpenAI key.\"\"\"\n    openai.api_key = key\n\n\nclass Example:\n    \"\"\"Stores an input, output pair and formats it to prime the model.\"\"\"\n    def __init__(self, inp, out):\n        self.input = inp\n        self.output = out\n        self.id = uuid.uuid4().hex\n\n    def get_input(self):\n        \"\"\"Returns the input of the example.\"\"\"\n        return self.input\n\n    def get_output(self):\n        \"\"\"Returns the intended output of the example.\"\"\"\n        return self.output\n\n    def get_id(self):\n        \"\"\"Returns the unique ID of the example.\"\"\"\n        return self.id\n\n    def as_dict(self):\n        return {\n            \"input\": self.get_input(),\n            \"output\": self.get_output(),\n            \"id\": self.get_id(),\n        }\n\n\nclass GPT:\n    \"\"\"The main class for a user to interface with the OpenAI API.\n    A user can add examples and set parameters of the API request.\n    \"\"\"\n    def __init__(self,\n                 engine='davinci',\n                 temperature=0.5,\n                 max_tokens=100,\n                 input_prefix=\"input: \",\n                 input_suffix=\"\\n\",\n                 output_prefix=\"output: \",\n                 output_suffix=\"\\n\\n\",\n                 append_output_prefix_to_query=False):\n        self.examples = {}\n        self.engine = engine\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.input_prefix = input_prefix\n        self.input_suffix = input_suffix\n        self.output_prefix = output_prefix\n        self.output_suffix = output_suffix\n        self.append_output_prefix_to_query = append_output_prefix_to_query\n        self.stop = (output_suffix + input_prefix).strip()\n\n    def add_example(self, ex):\n        \"\"\"Adds an example to the object.\n        Example must be an instance of the Example class.\n        \"\"\"\n        assert isinstance(ex, Example), \"Please create an Example object.\"\n        self.examples[ex.get_id()] = ex\n\n    def delete_example(self, id):\n        \"\"\"Delete example with the specific id.\"\"\"\n        if id in self.examples:\n            del self.examples[id]\n\n    def get_example(self, id):\n        \"\"\"Get a single example.\"\"\"\n        return self.examples.get(id, None)\n\n    def get_all_examples(self):\n        \"\"\"Returns all examples as a list of dicts.\"\"\"\n        return {k: v.as_dict() for k, v in self.examples.items()}\n\n    def get_prime_text(self):\n        \"\"\"Formats all examples to prime the model.\"\"\"\n        return \"\".join(\n            [self.format_example(ex) for ex in self.examples.values()])\n\n    def get_engine(self):\n        \"\"\"Returns the engine specified for the API.\"\"\"\n        return self.engine\n\n    def get_temperature(self):\n        \"\"\"Returns the temperature specified for the API.\"\"\"\n        return self.temperature\n\n    def get_max_tokens(self):\n        \"\"\"Returns the max tokens specified for the API.\"\"\"\n        return self.max_tokens\n\n    def craft_query(self, prompt):\n        \"\"\"Creates the query for the API request.\"\"\"\n        q = self.get_prime_text(\n        ) + self.input_prefix + prompt + self.input_suffix\n        if self.append_output_prefix_to_query:\n            q = q + self.output_prefix\n\n        return q\n\n    def submit_request(self, prompt):\n        \"\"\"Calls the OpenAI API with the specified parameters.\"\"\"\n        response = openai.Completion.create(engine=self.get_engine(),\n                                            prompt=self.craft_query(prompt),\n                                            max_tokens=self.get_max_tokens(),\n                                            temperature=self.get_temperature(),\n                                            top_p=1,\n                                            n=1,\n                                            stream=False,\n                                            stop=self.stop)\n        return response\n\n    def get_top_reply(self, prompt):\n        \"\"\"Obtains the best result as returned by the API.\"\"\"\n        response = self.submit_request(prompt)\n        return response['choices'][0]['text']\n\n    def format_example(self, ex):\n        \"\"\"Formats the input, output pair.\"\"\"\n        return self.input_prefix + ex.get_input(\n        ) + self.input_suffix + self.output_prefix + ex.get_output(\n        ) + self.output_suffix\n","66dedb93":"import json\nimport openai","65f756b4":"import getpass\ncity = getpass.getpass('Input your open ai service key:')","a3f48d7f":"openai.api_key = city","88c3b80f":"\ngpt1 = GPT(engine=\"davinci\", temperature=0.2, max_tokens=100)\nprompt1 = \"How to learn data science?\"\noutput1 = gpt1.submit_request(prompt1)\noutput1.choices[0].text","ed28675b":"\ngpt2 = GPT(engine=\"davinci\", temperature=0.5, max_tokens=100)\n# Directly use as chatbot\ngpt2.add_example(Example('Two plus two equals four', '2 + 2 = 4'))\ngpt2.add_example(Example('The integral from zero to infinity', '\\\\int_0^{\\\\infty}'))\ngpt2.add_example(Example('The gradient of x squared plus two times x with respect to x', '\\\\nabla_x x^2 + 2x'))\ngpt2.add_example(Example('The log of two times x', '\\\\log{2x}'))\ngpt2.add_example(Example('x squared plus y squared plus equals z squared', 'x^2 + y^2 = z^2'))","f2ae24f0":"prompt2 = \"x squared plus 2 times x\"\noutput2 = gpt2.submit_request(prompt2)\noutput2.choices[0].text","82a78eb6":"gpt3 = GPT(engine=\"davinci\", temperature=0.5, max_tokens=100)\ngpt3.add_example(Example('What is your name?', 'quel est votre nom?'))\ngpt3.add_example(Example('What are you doing?', 'Que faites-vous?'))\ngpt3.add_example(Example('How are you?', 'Comment allez-vous?'))","1b4c2913":"prompt3 = \"where are you?\"\noutput3 = gpt3.submit_request(prompt3)\noutput3.choices[0].text","cdfcc86f":"gpt4 = GPT(engine=\"davinci\", temperature=0.5, max_tokens=100)","3282edec":"import pandas as pd","73e44999":"jokes = pd.read_csv('..\/input\/qa-jokes\/jokes.csv')\njokes.head()","6b251363":"len(jokes)","eb0d29fe":"# just checking\njokes['Question'][0]","19af45f8":"import random\nprint(\"Prompts selected: \")\nfor i in range(5):\n    lucky_number =  random.randrange(0,38269,1)\n    ques = jokes['Question'][lucky_number]\n    ans = jokes['Answer'][lucky_number]\n    print(i, \": \", ques , \" : \", ans)\n    gpt4.add_example(Example(ques,ans))","c67db6df":"gpt4.get_example(1)","4ea4a474":"prompt = \"why did chicken cross the road?\"\noutput = gpt4.submit_request(prompt)\noutput.choices[0].text","a0de2bfb":"prompt = \"what did the dog say to a cat?\"\noutput = gpt4.submit_request(prompt)\noutput.choices[0].text","e791fb15":"### Application 1 - Directly use as chatbot Use-case","32b9873d":"### installing necessary libraries","be3d83d9":"### Application 3 - Translator Use-case\n","1a5671d3":"Are you ready to prompt it?","9d35ecf0":"Adapted from https:\/\/github.com\/shreyashankar\/gpt3-sandbox","77bb9278":"### Application 2 - LaTex Use-case - Text to Equation","9142f5b6":"Hmm could work on the technique but it does have a sense of humour I think.","19914938":"Hmm very fierce sense of humour.","3cbc7bb2":"# So lets now move onto producing jokes","e5966a4b":"### This is a helper function for easy input and access to openai's api","7a3ffd55":"# Lets first try using gpt3 in kaggle","9346116f":"### input your openai secret key here\n\nYou can get your openai keys from here: https:\/\/beta.openai.com\/account\/api-keys","fac47f35":"## Lets try some well documented use cases of openai","7cd98f19":"We can get individual examples like this:"}}