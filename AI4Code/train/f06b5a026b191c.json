{"cell_type":{"088e8b40":"code","c89aa849":"code","8a239339":"code","927f1404":"code","8a5d2189":"code","fda0ce14":"code","cc087d0e":"code","73e84168":"code","04d2dff9":"code","4ce7bac3":"code","5806fbd1":"code","6831aa21":"code","84e5f783":"code","7b5b9800":"code","d3890f97":"code","d9e7361c":"code","13f0496d":"code","633c40b0":"code","1304c3c4":"code","06851575":"code","2bff99e1":"code","d1401c44":"code","04aacc8b":"code","cc6ac115":"code","fe7b5ebe":"code","6e29932d":"code","0dd3ed67":"code","07a2b737":"code","952fc59a":"code","cf27d5a2":"code","8fd1a996":"code","276ac7c1":"code","4c919d66":"code","93aad94a":"code","a7bbf4ef":"code","b412ee12":"code","94f2f018":"code","f2335f27":"code","312dcf50":"code","afc2a43e":"code","c0164f9d":"code","f010e0e7":"code","da1596bc":"code","3229c6b2":"code","bc5f6314":"code","9203d7fe":"code","dae4df14":"code","b5ae2393":"code","999f10e0":"code","c6bd28a3":"code","16b670bc":"code","faddd061":"code","0e859c3b":"code","6a8c96cb":"code","1c0ea918":"code","cb4078a5":"code","3dab9ecb":"code","83e5a259":"code","3b678a74":"code","6f4f7a7a":"code","c79d83a1":"code","b859db32":"code","b9d3b5ac":"code","7602bcee":"markdown","425731ce":"markdown","db2e6cb1":"markdown","8ae4f2ee":"markdown","02eadf3e":"markdown","e36bf801":"markdown","54c2a281":"markdown"},"source":{"088e8b40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c89aa849":"import math\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_absolute_error\nfrom math import sqrt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")","8a239339":"pd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 200)","927f1404":"df = pd.read_csv('\/kaggle\/input\/christano-ronaldo\/data.csv')\ndf","8a5d2189":"df.info()","fda0ce14":"percent_missing = df.isnull().sum() * 100 \/ len(df)\nmissing_value_df = pd.DataFrame({'percent_missing': percent_missing})\nmissing_value_df","cc087d0e":"df['team_name'].value_counts()","73e84168":"df['match_id'].value_counts()","04d2dff9":"#Drop irrelevant columns and columns having more than 50% missing values\ndropcols = [\"Unnamed: 0\", \"match_event_id\", \"team_name\", \"match_id\", \"team_id\", \"date_of_game\",\"type_of_shot\", \"type_of_combined_shot\", \"remaining_min.1\", \"power_of_shot.1\", \"knockout_match.1\", \"remaining_sec.1\", \"distance_of_shot.1\"  ]\ndf = df.drop(dropcols, axis=1)","4ce7bac3":"#Removing Null values from 'home\/away'\ndf['home\/away'] = df['home\/away'].fillna(method='ffill')","5806fbd1":"#Home:1; Away:0\n\ndef find(word):\n    if ('vs') in word:\n        return 0\n    else:\n        return 1\ndf['home\/away'] = df['home\/away'].apply(lambda x :find(x))\ndf = pd.get_dummies(df, columns=[\"home\/away\"])","6831aa21":"df['shot_basics'].value_counts()","84e5f783":"df['shot_basics'] = df['shot_basics'].fillna('Not Known')\ndef process_shot_basics(x):\n    if(x in [\"Mid Range\", \"Goal Area\", \"Penalty Spot\", \"Goal Line\"]):\n        return x\n    return \"Others\"\n\ndf['shot_basics'] = df['shot_basics'].apply(lambda x : process_shot_basics(x))\nplt.figure(figsize=(15,8))\nsns.countplot(df['shot_basics'])\ndf = pd.get_dummies(df, columns=[\"shot_basics\"])","7b5b9800":"df['area_of_shot'].value_counts()","d3890f97":"chart = sns.countplot(df['area_of_shot'])\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45)\n\ndf = pd.get_dummies(df, columns=[\"area_of_shot\"])","d9e7361c":"df['game_season'].value_counts()","13f0496d":"df['game_season'] = df['game_season'].fillna(method= 'ffill')\ndef process_game_season(x):\n    if(x in [\"2015-16\", \"1997-98\", \"1998-99\", \"2014-15\",\"1996-97\", \"2013-14\"]):\n        return \"others\"\n    return x\n\ndf['game_season'] = df['game_season'].apply(lambda x : process_game_season(x))\nplt.figure(figsize=(15,8))\nchart = sns.countplot(df['game_season'])\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45)\n\ndf = pd.get_dummies(df, columns=[\"game_season\"])","633c40b0":"df['range_of_shot'].value_counts()","1304c3c4":"plt.figure(figsize=(8,5))\nsns.countplot(df['range_of_shot'])\ndf = pd.get_dummies(df, columns=[\"range_of_shot\"])","06851575":"df['lat\/lng'].value_counts()\ndf['lat\/lng'] = df['lat\/lng'].fillna(method= 'ffill')\ndef process_lat_lng(x):\n    if(x in ['28.549237, -81.372780','39.993941, -75.143458', \"42.379455, -83.115635\",\"40.361408, -86.186052\", \n             \"43.717098, -79.395917\", \"40.708999, -73.872430\", \"41.484971, -81.671552\" ,\"38.919619, -77.015211\",\n             \"35.492151, -97.519011\", \"41.845137, -87.660450\", \"33.768092, -84.393817\", \"25.790710, -80.207819\" , \n             \"30.018061, -90.022651\" , \"43.062206, -87.944754\", \"40.643505, -73.939507\", \"35.262047, -80.865746\", \n             \"30.028164, -89.997933\", \"49.250068, -123.114646\", \"30.055498, -89.960838\" , \"35.205878, -80.841194\",\n             \"40.623199, -73.951223\", \"33.513157, -112.082793\", \"40.324211, -111.674849\"]):\n        return \"others\"\n    return x\n\ndf['lat\/lng'] = df['lat\/lng'].apply(lambda x : process_lat_lng(x))\nplt.figure(figsize=(15,8))\nchart = sns.countplot(df['lat\/lng'])\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45)\ndf = pd.get_dummies(df, columns=['lat\/lng'])","2bff99e1":"df['knockout_match'].value_counts()","d1401c44":"df['knockout_match'] = df['knockout_match'].fillna(df['knockout_match'].mode()[0])\ndf = pd.get_dummies(df, columns=[\"knockout_match\"])","04aacc8b":"df['power_of_shot'].value_counts()","cc6ac115":"df['power_of_shot'] = df['power_of_shot'].fillna(method= 'ffill')\ndef process_power_of_shot(x):\n    if(x in [5.0, 6.0, 7.0]):\n        return \"others\"\n    return x\n\ndf['power_of_shot'] = df['power_of_shot'].apply(lambda x : process_power_of_shot(x))\ndf = pd.get_dummies(df, columns=[\"power_of_shot\"])","fe7b5ebe":"df.isnull().sum()\ndf['Pos-x'] = np.cos(df['location_x']) * np.cos(df['location_y'])\ndf['Pos-y'] = np.cos(df['location_x']) * np.sin(df['location_y'])\ndf['Pos-z'] = np.sin(df['location_x'])\n\ndf['Pos-x'] = df['Pos-x'].fillna('-1')\ndf['Pos-y'] = df['Pos-y'].fillna('-1')\ndf['Pos-z'] = df['Pos-z'].fillna('-1')\n\ndel df['location_x']\ndel df['location_y']","6e29932d":"#Filling NaN values in \"shot_id_number\"\nfor i in range(1, (len(df['shot_id_number'])-1)):\n    if (math.isnan(df['shot_id_number'][i])):\n        df['shot_id_number'][i] = ((df['shot_id_number'][i-1]) + 1 )\n        ","0dd3ed67":"df.head(10)","07a2b737":"#Filling NaN Values\n\ndf['remaining_min'] = df['remaining_min'].fillna(df['remaining_min'].mean())                                                       \ndf['distance_of_shot'] = df['distance_of_shot'].fillna(df['distance_of_shot'].mean())    \ndf['remaining_sec'] = df['remaining_sec'].fillna(df['remaining_sec'].mean()) \n\n","952fc59a":"# Correlation Matrix\n\ncorr_matrix = df.corr()\ncorr_matrix","cf27d5a2":"cols = list(df.columns.values)\ncols","8fd1a996":"#Rearrange column order\n\ndf = df[['remaining_min',\n 'remaining_sec',\n 'distance_of_shot',\n 'shot_id_number',\n 'home\/away_0',\n 'home\/away_1',\n 'shot_basics_Goal Area',\n 'shot_basics_Goal Line',\n 'shot_basics_Mid Range',\n 'shot_basics_Others',\n 'shot_basics_Penalty Spot',\n 'area_of_shot_Center(C)',\n 'area_of_shot_Left Side Center(LC)',\n 'area_of_shot_Left Side(L)',\n 'area_of_shot_Mid Ground(MG)',\n 'area_of_shot_Right Side Center(RC)',\n 'area_of_shot_Right Side(R)',\n 'game_season_1999-00',\n 'game_season_2000-01',\n 'game_season_2001-02',\n 'game_season_2002-03',\n 'game_season_2003-04',\n 'game_season_2004-05',\n 'game_season_2005-06',\n 'game_season_2006-07',\n 'game_season_2007-08',\n 'game_season_2008-09',\n 'game_season_2009-10',\n 'game_season_2010-11',\n 'game_season_2011-12',\n 'game_season_2012-13',\n 'game_season_others',\n 'range_of_shot_16-24 ft.',\n 'range_of_shot_24+ ft.',\n 'range_of_shot_8-16 ft.',\n 'range_of_shot_Back Court Shot',\n 'range_of_shot_Less Than 8 ft.',\n 'lat\/lng_29.444994, -98.524120',\n 'lat\/lng_29.740325, -95.365762',\n 'lat\/lng_32.757824, -96.786653',\n 'lat\/lng_33.552026, -112.071667',\n 'lat\/lng_34.189593, -118.471724',\n 'lat\/lng_35.103812, -89.964007',\n 'lat\/lng_37.754130, -122.437947',\n 'lat\/lng_38.567296, -121.456638',\n 'lat\/lng_39.739968, -104.954013',\n 'lat\/lng_40.774891, -111.930790',\n 'lat\/lng_42.330507, -71.074655',\n 'lat\/lng_42.982923, -71.446094',\n 'lat\/lng_45.539131, -122.651648',\n 'lat\/lng_46.667324, -94.419250',\n 'lat\/lng_47.633181, -122.308343',\n 'lat\/lng_others',\n 'knockout_match_0.0',\n 'knockout_match_1.0',\n 'power_of_shot_1.0',\n 'power_of_shot_2.0',\n 'power_of_shot_3.0',\n 'power_of_shot_4.0',\n 'power_of_shot_others',\n 'Pos-x',\n 'Pos-y',\n 'Pos-z',\n 'is_goal',\n]]","276ac7c1":"df_input = df.dropna(subset=['is_goal'])\ndf_output = df[df['is_goal'].isnull()]\n","4c919d66":"df_output = df_output.drop(\"is_goal\", axis=1)\n","93aad94a":"df_output","a7bbf4ef":"sns.boxplot(df_input[\"remaining_min\"])","b412ee12":"sns.boxplot(df_input[\"remaining_sec\"])","94f2f018":"sns.boxplot(df_input[\"distance_of_shot\"])","f2335f27":"#Removing Outliers\n\ndf_input = df_input[(df_input['distance_of_shot']<65) ]\n","312dcf50":"df.isnull().sum()","afc2a43e":"df_output.shape","c0164f9d":"y = df_input.is_goal.values\nX = df_input.drop([\"is_goal\"], axis = 1)","f010e0e7":"# Initialise the Scaler \nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler() \nX = scaler.fit_transform(X)","da1596bc":"# Splitting the Data set in training and test data\n\n\nfrom sklearn.model_selection import RepeatedKFold\ncv = RepeatedKFold(n_splits=10, random_state=42)\nfor train_index, test_index in cv.split(X):\n    X_train, X_test, y_train, y_test = X[train_index], X[test_index], y[train_index], y[test_index]","3229c6b2":"def score(mae):\n    return(1\/(1+mae))    ","bc5f6314":"# Fitting Logistic regression to the training set \nfrom sklearn.linear_model import LogisticRegression\n\nlr_model = LogisticRegression(random_state=0)\nlr_model.fit(X_train, y_train)\ny_pred_proba = lr_model.predict_proba(X_test)[:,1]\nmae1 = (mean_absolute_error(y_test, y_pred_proba))\nscore1 = score(mae1)\n\nprint(\"Score: {}\".format(score1))","9203d7fe":"from sklearn import tree\n\ndt_model = tree.DecisionTreeClassifier()\ndt_model.fit(X_train, y_train)\ny_pred_proba = dt_model.predict_proba(X_test)[:,1]\nmae2 = (mean_absolute_error(y_test, y_pred_proba))\nscore2 = score(mae2)\n\nprint(\"Score: {}\".format(score2))","dae4df14":"from sklearn.ensemble import RandomForestClassifier\n\nrf_model = RandomForestClassifier()\nrf_model.fit(X_train, y_train)\ny_pred_proba = rf_model.predict_proba(X_test)[:,1]\nmae3 = (mean_absolute_error(y_test, y_pred_proba))\nscore3 = score(mae3)\n\nprint(\"Score: {}\".format(score3))","b5ae2393":"from sklearn.ensemble import AdaBoostClassifier\n\nabc_model = AdaBoostClassifier(learning_rate=1)\nabc_model.fit(X_train, y_train)\ny_pred_proba = abc_model.predict_proba(X_test)[:,1]\nmae4 = (mean_absolute_error(y_test, y_pred_proba))\nscore4 = score(mae4)\n\nprint(\"Score: {}\".format(score4))","999f10e0":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbc_model = GradientBoostingClassifier(n_estimators = 100, learning_rate=1, max_depth=1)\ngbc_model.fit(X_train, y_train)\ny_pred_proba = gbc_model.predict_proba(X_test)[:,1]\nmae5 = (mean_absolute_error(y_test, y_pred_proba))\nscore5 = score(mae5)\n\nprint(\"Score: {}\".format(score5))","c6bd28a3":"from xgboost import XGBClassifier\n\nxgb_model = XGBClassifier()\nxgb_model.fit(X_train, y_train)\ny_pred_proba = xgb_model.predict_proba(X_test)[:,1]\nmae6 = (mean_absolute_error(y_test, y_pred_proba))\nscore6 = score(mae6)\n\nprint(\"Score: {}\".format(score6))","16b670bc":"methods = [\"Logistic Regression\", \"Decision Tree\", \"Random Forest\", \"AdaBoost\", \"Gradient Boosting\", \"XGBoost\"]\nscore = [score1, score2, score3, score4, score5, score6 ]\ncolors = [\"purple\", \"green\", \"orange\", \"magenta\",\"#CFC60E\",\"#0FBBAE\"]\n\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(8,5))\nplt.ylabel(\"Score %\")\nplt.xlabel(\"Algorithms\")\nchart = sns.barplot(x=methods, y=score, palette=colors)\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45)\n\nplt.show()","faddd061":"df_output","0e859c3b":"shot_id = df_output[['shot_id_number']]","6a8c96cb":"new_index = np.arange(0,6268)\n\nshot_id['index_values'] = new_index\nshot_id.set_index('index_values', inplace= True)","1c0ea918":"shot_id","cb4078a5":"df_output = scaler.transform(df_output)","3dab9ecb":"#Predicting Output\ny_output_prediction =  xgb_model.predict_proba(df_output)[:,1]\nprint(y_output_prediction)","83e5a259":"result = pd.DataFrame(data=y_output_prediction)","3b678a74":"result","6f4f7a7a":"#Column addition\n\nresult['shot_id_number']= shot_id['shot_id_number']\nresult","c79d83a1":"result.columns = ['is_goal', 'shot_id_number']\nresult.shot_id_number = result.shot_id_number.astype(int)\nresult = result[['shot_id_number', 'is_goal']]\nresult['is_goal'] = round((result['is_goal'].astype(float)),4) \nresult","b859db32":"result.to_csv(\"prediction.csv\", index=False)","b9d3b5ac":"from IPython.display import HTML\n\ndef download_link(title=\"Download CSV\", filename='data.csv'):\n    html = '<a href={filename}>{title}<\/a>'\n    html = html.format(title=title, filename=filename)\n    return HTML(html)\n\ndownload_link(filename='prediction.csv')","7602bcee":"# Random Forest","425731ce":"# Result Visualization","db2e6cb1":"# Logistic Regression","8ae4f2ee":"# Adaboost","02eadf3e":"# XGBoost","e36bf801":"# Gradient Boosting","54c2a281":"# Decision Tree"}}