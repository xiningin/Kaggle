{"cell_type":{"e3159032":"code","f6aca390":"code","a8f65f8f":"code","89b3cafe":"code","e82b12d5":"code","0c426fe3":"code","a8f44b28":"code","ab7473a1":"code","5dd27947":"code","4271c548":"code","67b18cb6":"code","39e96ba9":"code","078a7541":"code","394d89ad":"code","545913d2":"code","069093da":"code","ff4035f3":"code","03b1c035":"code","462531a1":"code","102e6457":"code","740970e8":"code","57906ba8":"code","ddda027c":"code","75b2fbb1":"code","f3dd442d":"code","350361fd":"code","956cc78f":"code","83768d5d":"code","cb9bc966":"code","0785fe88":"code","3e4a2763":"code","76440ddf":"code","8da220ce":"code","c949cb80":"code","60e9760c":"code","7ba27ac2":"code","87f6a3a3":"code","5c488436":"code","cc94385f":"code","41668b84":"code","c3faeb10":"markdown","d7b52b13":"markdown","82ff4ac9":"markdown","b1d4c1c3":"markdown","a1f5d52c":"markdown","39a3f3fa":"markdown","a211c272":"markdown","147510f1":"markdown","1e64832f":"markdown","9d50229b":"markdown","7311f893":"markdown"},"source":{"e3159032":"# import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","f6aca390":"# movies data\ncolumn_names_movies = ['movie_id', 'title', 'genres']\nmovies = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv', delimiter = ',', names = column_names_movies,\n                     header = 0)\nmovies.head()","a8f65f8f":"# ratings data\ncolumn_names_ratings = ['user_id', 'movie_id', 'rating', 'timestamp']\nratings = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv', delimiter = ',', names= column_names_ratings\n                      , header = 0)\nratings.head()","89b3cafe":"# check NaN values\nprint (\"Number of movies Null values: \", movies.isnull().sum())\nprint (\"Number of ratings Null values: \", ratings.isnull().sum())","e82b12d5":"# drop Null values\nmovies.dropna(inplace=True)\n\n# and check again for Nan values\nprint (\"Number of movies Null values: \", movies.isnull().sum())","0c426fe3":"# summary of the movies Dataframe\nmovies.info()","a8f44b28":"# summary of the ratings Dataframe\nratings.info()","ab7473a1":"# users data\ncolumn_names_users = ['user_id', 'gender', 'age', 'occupation', 'zipcode']\nusers = pd.read_csv('..\/input\/movielens-1m-dataset-users-data\/users.csv', delimiter = ';', names= column_names_users\n                    , header = 0)\nusers.head(5)","5dd27947":"# summary of the users Dataframe\nusers.info()","4271c548":"# split title and release year in separate columns\nmovies['year'] = movies.title.str.extract(\"\\((\\d{4})\\)\", expand=True)\nmovies.head()","67b18cb6":"# check for NaN values\nprint (\"Number of movies Null values: \", movies.isnull().sum())\n\n# and drop them\nmovies.dropna(inplace=True)\n\n# verify they dropped\nprint (\"Number of movies Null values: \", movies.isnull().sum())","39e96ba9":"# convert year column to integer \nyear_asint = movies['year'].astype(int)","078a7541":"# add the int(year) column  \nmovies.drop(['year'], inplace = True, axis = 1)\nmovies['year'] = year_asint\nmovies.head()","394d89ad":"# convert timestamp to date\ndate = pd.to_datetime(ratings['timestamp']).astype(str)\n\n# add column date to ratings\nratings['date'] = date\nratings.head()","545913d2":"# remove the time from the date\nratings['date'] = [time[:10] for time in ratings['date']]\nratings.drop(['timestamp'], inplace = True, axis = 1)\nratings.head()","069093da":"#  descriptive statistics of movies Dataframe\nmovies.describe()","ff4035f3":"#  descriptive statistics of ratings Dataframe\nratings.describe()","03b1c035":"df = pd.merge(movies,ratings,on='movie_id')\ndf.head()","462531a1":"# summary of the df Dataframe\ndf.info()","102e6457":"# number of ratings with values equals or greater than 4.5\ndf[df['rating'] >= 4.5]['movie_id'].count()","740970e8":"# ration of the movies with values equals or greater than 4.5 \ndf[df['rating'] >= 4.5]['movie_id'].count() \/ ratings['rating'].count()","57906ba8":"# number of ratings with values equals 5.0\ndf[df['rating'] == 5]['movie_id'].count()","ddda027c":"# ration of the movies with values equals or greater than 5.0\ndf[df['rating'] == 5]['movie_id'].count() \/ ratings['rating'].count()","75b2fbb1":"# The most rated movies\ndf.groupby('title')['rating'].count().sort_values(ascending=False).head()","f3dd442d":"# create Dataframe: ratings count per movie\ndf_ratingCount = pd.DataFrame(df.groupby('title', as_index = False)['rating'].count()\n                              .rename(columns={'rating' : 'ratingCount'}))\ndf_ratingCount.sort_values('ratingCount',ascending=False).head(5)","350361fd":"# create Dataframe: mean rating per movie\ndf_ratingMean = pd.DataFrame(df.groupby('title', as_index = False)['rating'].mean()\n                              .rename(columns={'rating' : 'ratingMean'}))\ndf_ratingMean.sort_values('ratingMean',ascending=False).head(5)","956cc78f":"# create Dataframe: ratings count and mean rating per movie\ndf_movies_ext = pd.merge(df_ratingCount,df_ratingMean, on='title')\ndf_movies_ext.sort_values('ratingCount',ascending=False).head(5)","83768d5d":"# create Dataframe: ratings count per value\ndf_rating_dist= pd.DataFrame(ratings.groupby('rating', as_index = False)['user_id'].count()\n                         .rename(columns={'user_id' : 'ratingCount'}))\ndf_rating_dist.head(10)","cb9bc966":"# the users with most ratings\nratings_per_user = ratings[['user_id', 'movie_id']].groupby('user_id').count()\nratings_per_user = ratings_per_user.rename(columns={'movie_id' : 'Total'})\nratings_per_user.sort_values('Total',ascending=False).head()","0785fe88":"# users per gender \nusers_by_gender = users.groupby('gender', as_index = False)['user_id'].count()\nusers_by_gender.rename(columns={'user_id' : 'Total'}).head()","3e4a2763":"# users per occupation (top 5)\nusers_by_occ =users.groupby('occupation', as_index = False)['user_id'].count()\nusers_by_occ = users_by_occ.rename(columns={'user_id' : 'Total'})\nusers_by_occ.sort_values('Total',ascending=False).head()","76440ddf":"# most popular genres (with most ratings)\nmost_popular_genre = df.groupby('genres', as_index = False)['user_id'].count()\nmost_popular_genre = most_popular_genre.rename(columns={'user_id' : 'Total ratings'})\nmost_popular_genre.sort_values('Total ratings',ascending=False).head(10)","8da220ce":"# movies distribution per genres\nmovies_genres = movies.groupby('genres', as_index = False)['movie_id'].count()\nmovies_genres = movies_genres.rename(columns={'movie_id' : 'Total ratings'})\nmovies_genres.sort_values('Total ratings',ascending=False).head(10)","c949cb80":"# select plot style\nplt.style.use('ggplot')\n\n# import libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('white')\n%matplotlib inline","60e9760c":"# the graph indicates that most of the movies have less than 40000 ratings\nplt.figure(figsize=(12,6))\ndf_movies_ext[df_movies_ext['ratingCount'] > 10000]['ratingCount'].hist(bins=100)\nplt.title('Number of ratings per movie')\nplt.xlabel('Number of ratings')\nplt.ylabel('Number of movies')","7ba27ac2":"# most movies have been released after 1990\nplt.figure(figsize=(12,8))\nmovies[movies['year'] > 1960]['year'].hist(bins=150)\nplt.title('Movies per year')\nplt.xlabel('Year')\nplt.ylabel('Number of movies')","87f6a3a3":"# most of the students are students\nsns.factorplot(\"occupation\", data=users, aspect=3, kind=\"count\", color=\"b\").set_xticklabels(rotation=90)","5c488436":"# most of the grades are equals or greater than 3\nsns.jointplot(x='rating',y='ratingCount',data=df_rating_dist,alpha=0.5)","cc94385f":"# the movies with the most ratings tend to have better rankings\nsns.jointplot(x='ratingMean',y='ratingCount',data= df_movies_ext,alpha=0.5)","41668b84":"# most users have less than 4000 ratings\nplt.figure(figsize=(12,8))\nratings_per_user['Total'].hist(bins=100, edgecolor='black', log=True)\nplt.title('Ratings per user')\nplt.xlabel('Number of ratings given')\nplt.ylabel('Number of users')\nplt.xlim(0,)\nplt.xticks(np.arange(0,10000,1000))\nplt.show()","c3faeb10":"## Visual Data Analysis","d7b52b13":"#### Movies distribution per year (> 1960)","82ff4ac9":"#### Distribution of ratings per movie (with ratings count  > 10000)","b1d4c1c3":"#### Ratings per user","a1f5d52c":"### Run some ad-hoc queries","39a3f3fa":"#### Relationship between number of ratings - ratings mean","a211c272":"#### Users distribution per occupation","147510f1":"### Merge the two Dataframes ","1e64832f":"#### Ratings distribution per grade","9d50229b":"# Exploratory Analysis - MovieLens 20M DataSet\n","7311f893":"### Import data"}}