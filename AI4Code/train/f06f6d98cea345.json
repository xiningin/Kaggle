{"cell_type":{"87e99966":"code","1aba2cbb":"code","ded34199":"code","dda61ddb":"code","0764be98":"code","ffe99d4e":"code","ce5178ad":"code","a773dd47":"code","b2e27b6a":"code","a2a90dc1":"code","c2ec561c":"code","10b03728":"code","581928eb":"code","896ffaac":"markdown","5cdbab79":"markdown","1b89da0d":"markdown","a09be5ba":"markdown"},"source":{"87e99966":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport os, gc\nimport cudf\nimport pandas as pd\nimport numpy as np\nimport cupy as cp\nimport janestreet\nimport xgboost as xgb\nfrom hyperopt import hp, fmin, tpe, Trials\nfrom hyperopt.pyll.base import scope\nfrom sklearn.metrics import roc_auc_score, roc_curve\n\n\n\nfrom sklearn.model_selection import GroupKFold\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nfrom joblib import dump, load\n\nimport tensorflow as tf\ntf.random.set_seed(2212)\nimport tensorflow.keras.backend as K\nimport tensorflow.keras.layers as layers\nfrom tensorflow.keras.callbacks import Callback, ReduceLROnPlateau, ModelCheckpoint, EarlyStopping\n\nTEST = True","1aba2cbb":"# weighted average as per Donate et al.'s formula\n# https:\/\/doi.org\/10.1016\/j.neucom.2012.02.053\n# [0.0625, 0.0625, 0.125, 0.25, 0.5] for 5 fold\ndef weighted_average(a):\n    w = []\n    n = len(a)\n    for j in range(1, n + 1):\n        j = 2 if j == 1 else j\n        w.append(1 \/ (2**(n + 1 - j)))\n    return np.average(a, weights = w)","ded34199":"from sklearn.model_selection._split import _BaseKFold, indexable, _num_samples\nfrom sklearn.utils.validation import _deprecate_positional_args\n\n# https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\nclass GroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_size : int, default=None\n        Maximum size for a single training set.\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.model_selection import GroupTimeSeriesSplit\n    >>> groups = np.array(['a', 'a', 'a', 'a', 'a', 'a',\\\n                           'b', 'b', 'b', 'b', 'b',\\\n                           'c', 'c', 'c', 'c',\\\n                           'd', 'd', 'd'])\n    >>> gtss = GroupTimeSeriesSplit(n_splits=3)\n    >>> for train_idx, test_idx in gtss.split(groups, groups=groups):\n    ...     print(\"TRAIN:\", train_idx, \"TEST:\", test_idx)\n    ...     print(\"TRAIN GROUP:\", groups[train_idx],\\\n                  \"TEST GROUP:\", groups[test_idx])\n    TRAIN: [0, 1, 2, 3, 4, 5] TEST: [6, 7, 8, 9, 10]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a']\\\n    TEST GROUP: ['b' 'b' 'b' 'b' 'b']\n    TRAIN: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] TEST: [11, 12, 13, 14]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a' 'b' 'b' 'b' 'b' 'b']\\\n    TEST GROUP: ['c' 'c' 'c' 'c']\n    TRAIN: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\\\n    TEST: [15, 16, 17]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a' 'b' 'b' 'b' 'b' 'b' 'c' 'c' 'c' 'c']\\\n    TEST GROUP: ['d' 'd' 'd']\n    \"\"\"\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_size=None\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_size = max_train_size\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n        group_test_size = n_groups \/\/ n_folds\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n            for train_group_idx in unique_groups[:group_test_start]:\n                train_array_tmp = group_dict[train_group_idx]\n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n            train_end = train_array.size\n            if self.max_train_size and self.max_train_size < train_end:\n                train_array = train_array[train_end -\n                                          self.max_train_size:train_end]\n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n            yield [int(i) for i in train_array], [int(i) for i in test_array]\nimport numpy as np\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection._split import _BaseKFold, indexable, _num_samples\nfrom sklearn.utils.validation import _deprecate_positional_args\n\n# modified code for group gaps; source\n# https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\nclass PurgedGroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Allows for a gap in groups to avoid potentially leaking info from\n    train into test if the model has windowed or lag features.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_group_size : int, default=Inf\n        Maximum group size for a single training set.\n    group_gap : int, default=None\n        Gap between train and test\n    max_test_group_size : int, default=Inf\n        We discard this number of groups from the end of each train split\n    \"\"\"\n\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_group_size=np.inf,\n                 max_test_group_size=np.inf,\n                 group_gap=None,\n                 verbose=False\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_group_size = max_train_group_size\n        self.group_gap = group_gap\n        self.max_test_group_size = max_test_group_size\n        self.verbose = verbose\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        group_gap = self.group_gap\n        max_test_group_size = self.max_test_group_size\n        max_train_group_size = self.max_train_group_size\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n\n        group_test_size = min(n_groups \/\/ n_folds, max_test_group_size)\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n\n            group_st = max(0, group_test_start - group_gap - max_train_group_size)\n            for train_group_idx in unique_groups[group_st:(group_test_start - group_gap)]:\n                train_array_tmp = group_dict[train_group_idx]\n                \n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n\n            train_end = train_array.size\n \n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n\n            test_array  = test_array[group_gap:]\n            \n            \n            if self.verbose > 0:\n                    pass\n                    \n            yield [int(i) for i in train_array], [int(i) for i in test_array]","dda61ddb":"print('Loading...')\ntrain = cudf.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')\nfeatures = [c for c in train.columns if 'feature' in c]\n#     features.remove('feature_43')\n\nprint('Filling...')\ntrain1 = train.to_pandas()\n\ntrain = train1.query('date > 85').reset_index(drop = True) \ntrain = train.query('weight > 0').reset_index(drop = True)\ntrain[features] = train[features].fillna(method = 'ffill').fillna(0)\ntrain['action'] = ((train['resp_1'] > 0) & (train['resp_2'] > 0) & (train['resp_3'] > 0) & (train['resp_4'] > 0) & (train['resp'] > 0)).astype('int')\n\nresp_cols = ['resp', 'resp_1', 'resp_2', 'resp_3', 'resp_4']\n\nX = train[features].values\ny = np.stack([(train[c] > 0).astype('int') for c in resp_cols]).T\nsw = np.mean(np.abs(train[resp_cols].values), axis = 1)","0764be98":"n_splits = 5\ngroup_gap = 31","ffe99d4e":"def create_ae_mlp(num_columns, num_labels, hidden_units, dropout_rates, ls = 1e-2, lr = 1e-3):\n    \n    inp = tf.keras.layers.Input(shape = (num_columns, ))\n    x0 = tf.keras.layers.BatchNormalization()(inp)\n    \n    encoder = tf.keras.layers.GaussianNoise(dropout_rates[0])(x0)\n    encoder = tf.keras.layers.Dense(hidden_units[0])(encoder)\n    encoder = tf.keras.layers.BatchNormalization()(encoder)\n    encoder = tf.keras.layers.Activation('swish')(encoder)\n    \n    decoder = tf.keras.layers.Dropout(dropout_rates[1])(encoder)\n    decoder = tf.keras.layers.Dense(num_columns, name = 'decoder')(decoder)\n\n    x_ae = tf.keras.layers.Dense(hidden_units[1])(decoder)\n    x_ae = tf.keras.layers.BatchNormalization()(x_ae)\n    x_ae = tf.keras.layers.Activation('swish')(x_ae)\n    x_ae = tf.keras.layers.Dropout(dropout_rates[2])(x_ae)\n\n    out_ae = tf.keras.layers.Dense(num_labels, activation = 'sigmoid', name = 'ae_action')(x_ae)\n    \n    x = tf.keras.layers.Concatenate()([x0, encoder])\n    x = tf.keras.layers.BatchNormalization()(x)\n    x = tf.keras.layers.Dropout(dropout_rates[3])(x)\n    \n    for i in range(2, len(hidden_units)):\n        x = tf.keras.layers.Dense(hidden_units[i])(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Activation('swish')(x)\n        x = tf.keras.layers.Dropout(dropout_rates[i + 2])(x)\n        \n    out = tf.keras.layers.Dense(num_labels, activation = 'sigmoid', name = 'action')(x)\n    \n    model = tf.keras.models.Model(inputs = inp, outputs = [decoder, out_ae, out])\n    model.compile(optimizer = tf.keras.optimizers.Adam(learning_rate = lr),\n                  loss = {'decoder': tf.keras.losses.MeanSquaredError(), \n                          'ae_action': tf.keras.losses.BinaryCrossentropy(label_smoothing = ls),\n                          'action': tf.keras.losses.BinaryCrossentropy(label_smoothing = ls), \n                         },\n                  metrics = {'decoder': tf.keras.metrics.MeanAbsoluteError(name = 'MAE'), \n                             'ae_action': tf.keras.metrics.AUC(name = 'AUC'), \n                             'action': tf.keras.metrics.AUC(name = 'AUC'), \n                            }, \n                 )\n    \n    return model","ce5178ad":"params = {'num_columns': len(features), \n          'num_labels': 5, \n          'hidden_units': [96, 96, 896, 448, 448, 256], \n          'dropout_rates': [0.03527936123679956, 0.038424974585075086, 0.42409238408801436, 0.10431484318345882, 0.49230389137187497, 0.32024444956111164, 0.2716856145683449, 0.4379233941604448], \n          'ls': 0, \n          'lr':1e-3, \n         }","a773dd47":"if not TEST:\n    scores = []\n    batch_size = 4096\n    gkf = PurgedGroupTimeSeriesSplit(n_splits = n_splits, group_gap = group_gap)\n    for fold, (tr, te) in enumerate(gkf.split(train['action'].values, train['action'].values, train['date'].values)):\n        ckp_path = f'JSModel_{fold}.hdf5'\n        model = create_ae_mlp(**params)\n        ckp = ModelCheckpoint(ckp_path, monitor = 'val_action_AUC', verbose = 0, \n                              save_best_only = True, save_weights_only = True, mode = 'max')\n        es = EarlyStopping(monitor = 'val_action_AUC', min_delta = 1e-4, patience = 10, mode = 'max', \n                           baseline = None, restore_best_weights = True, verbose = 0)\n        history = model.fit(X[tr], [X[tr], y[tr], y[tr]], validation_data = (X[te], [X[te], y[te], y[te]]), \n                            sample_weight = sw[tr], epochs = 100, batch_size = batch_size, callbacks = [ckp, es], verbose = 0)\n        hist = pd.DataFrame(history.history)\n        score = hist['val_action_AUC'].max()\n        print(f'Fold {fold} ROC AUC:\\t', score)\n        scores.append(score)\n\n        K.clear_session()\n        del model\n        rubbish = gc.collect()","b2e27b6a":"if not TEST:\n    print('Weighted Average CV Score:', weighted_average(scores))","a2a90dc1":"def reduce_mem_usage(props):\n    start_mem_usg = props.memory_usage().sum() \/ 1024**2 \n    print(\"Memory usage of properties dataframe is :\",start_mem_usg,\" MB\")\n    NAlist = [] # Keeps track of columns that have missing values filled in. \n    for col in props.columns:\n        if props[col].dtype != object:  # Exclude strings\n            \n            # Print current column type\n            # print(\"******************************\")\n            # print(\"Column: \",col)\n            # print(\"dtype before: \",props[col].dtype)\n            \n            # make variables for Int, max and min\n            IsInt = False\n            mx = props[col].max()\n            mn = props[col].min()\n            \n            # Integer does not support NA, therefore, NA needs to be filled\n            if not np.isfinite(props[col]).all(): \n                NAlist.append(col)\n                props[col].fillna(mn-1,inplace=True)  \n                   \n            # test if column can be converted to an integer\n            asint = props[col].fillna(0).astype(np.int64)\n            result = (props[col] - asint)\n            result = result.sum()\n            if result > -0.01 and result < 0.01:\n                IsInt = True\n\n            \n            # Make Integer\/unsigned Integer datatypes\n            if IsInt:\n                if mn >= 0:\n                    if mx < 255:\n                        props[col] = props[col].astype(np.uint8)\n                    elif mx < 65535:\n                        props[col] = props[col].astype(np.uint16)\n                    elif mx < 4294967295:\n                        props[col] = props[col].astype(np.uint32)\n                    else:\n                        props[col] = props[col].astype(np.uint64)\n                else:\n                    if mn > np.iinfo(np.int8).min and mx < np.iinfo(np.int8).max:\n                        props[col] = props[col].astype(np.int8)\n                    elif mn > np.iinfo(np.int16).min and mx < np.iinfo(np.int16).max:\n                        props[col] = props[col].astype(np.int16)\n                    elif mn > np.iinfo(np.int32).min and mx < np.iinfo(np.int32).max:\n                        props[col] = props[col].astype(np.int32)\n                    elif mn > np.iinfo(np.int64).min and mx < np.iinfo(np.int64).max:\n                        props[col] = props[col].astype(np.int64)    \n            \n            # Make float datatypes 32 bit\n            else:\n                props[col] = props[col].astype(np.float32)\n            \n            # Print new column type\n            # print(\"dtype after: \",props[col].dtype)\n            # print(\"******************************\")\n    \n    # Print final result\n    print(\"___MEMORY USAGE AFTER COMPLETION:___\")\n    mem_usg = props.memory_usage().sum() \/ 1024**2 \n    print(\"Memory usage is: \",mem_usg,\" MB\")\n    print(\"This is \",100*mem_usg\/start_mem_usg,\"% of the initial size\")\n    return props, NAlist\n\n\n\nif TEST:\n    train, _ = reduce_mem_usage(train1)\n    exclude = set([2,5,19,26,29,36,37,43,63,77,87,173,262,264,268,270,276,294,347,499])\n    train = train[~train.date.isin(exclude)]\n\n    features = [c for c in train.columns if 'feature' in c]\n\n    f_mean = train[features[1:]].mean()\n    train[features[1:]] = train[features[1:]].fillna(f_mean)\n\n    train = train[train.weight>0]\n\n\n    train['action'] = ((train['resp'].values) > 0).astype('int')\n    train['action1'] = ((train['resp_1'].values) > 0).astype('int')\n    train['action2'] = ((train['resp_2'].values) > 0).astype('int')\n    train['action3'] = ((train['resp_3'].values) > 0).astype('int')\n    train['action4'] = ((train['resp_4'].values) > 0).astype('int')\n\n\n    X = train.loc[:, train.columns.str.contains('feature')].values\n    y = train.loc[:, 'action'].astype('int').values\n\n    X_ = X\n    y_ = train.loc[:, 'action3'].astype('int').values\n    \n    clf1 = xgb.XGBClassifier(\n      n_estimators=100,\n      max_depth=11,\n      learning_rate=0.05,\n      subsample=0.90,\n      colsample_bytree=0.7,\n      missing=-999,\n      random_state=21,\n      tree_method='gpu_hist',  # THE MAGICAL PARAMETER\n      reg_alpha=10,\n      reg_lambda=10,\n    )\n\n\n    clf1.fit(X_, y_)\n    \n    clf2 = xgb.XGBClassifier(\n      n_estimators=100,\n      max_depth=11,\n      learning_rate=0.05,\n      subsample=0.90,\n      colsample_bytree=0.7,\n      missing=-999,\n      random_state=210,\n      tree_method='gpu_hist',  # THE MAGICAL PARAMETER\n      reg_alpha=10,\n      reg_lambda=10,\n    )\n\n\n    clf2.fit(X_, y_)\n    \n    clf3 = xgb.XGBClassifier(\n      n_estimators=100,\n      max_depth=11,\n      learning_rate=0.05,\n      subsample=0.90,\n      colsample_bytree=0.7,\n      missing=-999,\n      random_state=2010,\n      tree_method='gpu_hist',  # THE MAGICAL PARAMETER\n      reg_alpha=10,\n      reg_lambda=10,\n    )\n\n\n    clf3.fit(X_, y_)","c2ec561c":"if TEST:\n    inp = tf.keras.layers.Input(shape = len(features))\n\n    model4 = create_ae_mlp(**params)\n    model4.load_weights('..\/input\/jsmodelesade\/JSModel_3 (1).hdf5')\n    out4 = model4(inp)\n\n    model5 = create_ae_mlp(**params)\n    model5.load_weights('..\/input\/jsmodelesade\/JSModel_4 (1).hdf5')\n    out5 = model5(inp)\n    \n    model6 = create_ae_mlp(**params)\n    model6.load_weights('..\/input\/jsmodelesade\/JSModel_4_1212.hdf5')\n    out6 = model6(inp)\n    \n    model7 = create_ae_mlp(**params)\n    model7.load_weights('..\/input\/jsmodelesade\/JSModel_4_1214.hdf5')\n    out7 = model7(inp)\n\n    out = (out4[-1] + out5[-1]+out6[-1] + out7[-1]) \/ 4\n\n    model = tf.keras.models.Model(inputs = inp, outputs = out)\n    model.call = tf.function(model.call, experimental_relax_shapes = True)\n    model.summary()","10b03728":"# example_test = pd.read_csv('..\/input\/jane-street-market-prediction\/example_test.csv')\n# example_test = example_test.query('weight > 0').reset_index(drop = True)\n# example_test[features] = example_test[features].fillna(method = 'ffill').fillna(0)\n# test_preds = np.mean(model.predict(example_test[features], batch_size = 4096), axis = 1)\n# opt_th = test_preds.mean()\n# print(opt_th)","581928eb":"if TEST:\n    from numba import njit\n\n    @njit\n    def fast_fillna(array, values):\n        if np.isnan(array.sum()):\n            array = np.where(np.isnan(array), values, array)\n        return array\n    env = janestreet.make_env()\n    env_iter = env.iter_test()\n    opt_th = 0.5031397\n    tmp = np.zeros(len(features))\n    for (test_df, pred_df) in tqdm(env_iter):\n        if test_df['weight'].item() > 0:\n            x_tt = test_df.loc[:, features].values\n            x_tt[0, :] = fast_fillna(x_tt[0, :], tmp)\n            tmp = x_tt[0, :]\n            pred = ((np.mean(model(x_tt, training = False).numpy(), axis = 1)+(clf1.predict_proba(x_tt)[0][1]+clf2.predict_proba(x_tt)[0][1]+clf3.predict_proba(x_tt)[0][1])\/3))\/2\n            pred_df.action = np.where(pred >= opt_th, 1, 0).astype(int)\n        else:\n            pred_df.action = 0\n        env.predict(pred_df)","896ffaac":"# Preprocessing","5cdbab79":"# Example Test Prediction","1b89da0d":"# Submission","a09be5ba":"# Training"}}