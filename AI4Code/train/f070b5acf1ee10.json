{"cell_type":{"c840ce52":"code","e43f5445":"code","328f45a1":"code","3c06b990":"code","0bbc7846":"code","9b2516a5":"code","18fcebb4":"code","8a20cb15":"code","463b6d56":"code","021bad43":"code","9920f934":"code","8ef6dab4":"code","0ea70fed":"code","d99b4f10":"code","84e61070":"code","7a567f60":"code","162b4980":"code","aa4b5b0b":"code","1f7e4854":"code","113af560":"markdown","da24ec35":"markdown","cc41f363":"markdown","dd928b74":"markdown","5a62ccea":"markdown","9aa4ff1b":"markdown","e78e38f7":"markdown","0741fee7":"markdown"},"source":{"c840ce52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree\n\nimport graphviz as gv\n\n\n\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (28,30)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e43f5445":"df = pd.read_excel(\"\/kaggle\/input\/Credit.xlsx\")\ndf","328f45a1":"df.columns","3c06b990":"for col in df.columns:\n    if df[col].dtype not in (np.int32, np.int64, np.float32, np.float64, np.int16, np.uint8):\n        print(df[col].value_counts(dropna=False))\n        print(\"--------------------------------------\")","0bbc7846":"df.drop(\n    [\n        \"\u0414\u0430\u0442\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0432\u0430\u043d\u0438\u044f\", # \u041d\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e, \u0440\u0430\u0432\u0437\u0432\u0435 \u0447\u0442\u043e \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438 \u0438\u0437\u0432\u043b\u0435\u0447, \u043d\u043e \u0442\u043e\u0436\u0435 \u0441\u043e\u043c\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\n        \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\", # \u0423 \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 =1\n        \"\u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\" # \n    ], axis=1, inplace=True)","9b2516a5":"df.replace({\"\u0414\u0430\":1, \"\u041d\u0435\u0442\":0}, inplace=True)\nfactors = {}\nfor col in [\n            \"\u041f\u043e\u043b\",\n            \"\u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435\",\n            \"\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c\"\n           ]:\n    df[col], factors[col] = pd.factorize(df[col])","18fcebb4":"df[\"\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\"] = df[\"\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\"].map({\"\u0441\u0440\u0435\u0434\u043d\u0435\u0435\":0, \"\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435\": 1, \"\u0432\u044b\u0441\u0448\u0435\u0435\":2})\ndf[\"\u041c\u0430\u0448\u0438\u043d\u0430\"] = df[\"\u041c\u0430\u0448\u0438\u043d\u0430\"].map({\"\u041d\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\":0, \"\u043e\u0442\u0435\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f\": 1, \"\u0438\u043c\u043f\u043e\u0440\u0442\u043d\u0430\u044f\":2}) # \u041d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\ndf[\"\u041a\u043b\u0430\u0441\u0441 \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u044f\"] = df[\"\u041a\u043b\u0430\u0441\u0441 \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u044f\"].map({\"\u043c\u0430\u043b\u043e\u0435\":0, \"\u0441\u0440\u0435\u0434\u043d\u0435\u0435\": 1, \"\u043a\u0440\u0443\u043f\u043d\u043e\u0435\":2})","8a20cb15":"for col in [\"\u0426\u0435\u043b\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0432\u0430\u043d\u0438\u044f\", \"\u0421\u043f\u043e\u0441\u043e\u0431 \u043f\u0440\u0438\u043e\u0431\u0440\u0435\u0442\u0435\u043d\u0438\u044f \u0441\u043e\u0431\u0441\u0442\u0432.\", \"\u041e\u0442\u0440\u0430\u0441\u043b\u044c \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u044f\", \"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432\"]:\n    vc = df[col].value_counts()\n    vc = vc[vc<7].index\n    df[col].replace(vc, np.nan, inplace=True)\ndf = pd.get_dummies(df)","463b6d56":"df.dtypes","021bad43":"Y = df[\"\u0414\u0430\u0432\u0430\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442\"] # \u043e\u0442\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043e\u0442 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\nX = df.drop(\"\u0414\u0430\u0432\u0430\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442\", axis=1, inplace=False)\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=40)\ndtc = DecisionTreeClassifier(random_state=1,max_depth=7, min_samples_split=0.05, min_samples_leaf=2)#, class_weight=\"balanced\")\ndtc.fit(X_train, y_train)\ntree.plot_tree(dtc,\n               feature_names = X.columns, \n               class_names=[\"\u041d\u0435\u0442\", \"\u0414\u0430\"],\n               filled = True);","9920f934":"dtc.score(X_test, y_test)","8ef6dab4":"f_imp = pd.DataFrame({\"feature\": X.columns, \"importance\": dtc.feature_importances_})\nf_imp = f_imp[f_imp[\"importance\"]>0.04].sort_values(\"importance\", ascending=False)\nf_imp","0ea70fed":"parameters = dict(max_depth=np.arange(3, 10),\n                  min_samples_split=np.arange(3, 15),\n                  min_samples_leaf=np.arange(1, 6))\ndtc = DecisionTreeClassifier(random_state=1)\ngs = GridSearchCV(dtc, parameters, scoring=['accuracy', 'f1', 'precision', 'recall', 'roc_auc'], cv=7, return_train_score=True, refit=\"accuracy\")\ngs.fit(X, Y)\nresults = pd.concat(\n    [pd.DataFrame(gs.cv_results_[\"params\"])] + \n        [\n            pd.DataFrame(gs.cv_results_[\"mean_test_\" + metric], columns=[metric])\n                for metric in ['accuracy', 'f1', 'precision', 'recall', 'roc_auc']\n        ] + \n        [\n            pd.DataFrame(gs.cv_results_[\"mean_train_\" + metric], columns=[\"train \" + metric])\n                for metric in ['accuracy', 'f1', 'precision', 'recall', 'roc_auc']\n        ],\n    axis=1)\nresults","d99b4f10":"gs.best_params_, gs.best_score_","84e61070":"dupl = results.duplicated(subset=[\"accuracy\", \"f1\", \"precision\", \"recall\", \"roc_auc\",\n                                  \"train accuracy\", \"train f1\", \"train precision\", \"train recall\", \"train roc_auc\"], keep=\"first\")\nresults = results[~dupl]\nresults.sort_values(\"accuracy\", ascending=False).head(10)","7a567f60":"X = X[['\u0421\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430', '\u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435', '\u0421\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430', '\u0421\u0440\u0435\u0434\u043d\u0435\u043c\u0435\u0441. \u0434\u043e\u0445\u043e\u0434','\u0421\u0440\u0435\u0434\u043d\u0435\u043c\u0435\u0441. \u0440\u0430\u0441\u0445\u043e\u0434']]","162b4980":"gs.fit(X, Y)\nresults = pd.concat(\n    [pd.DataFrame(gs.cv_results_[\"params\"])] + \n        [\n            pd.DataFrame(gs.cv_results_[\"mean_test_\" + metric], columns=[metric])\n                for metric in ['accuracy', 'f1', 'precision', 'recall', 'roc_auc']\n        ] + \n        [\n            pd.DataFrame(gs.cv_results_[\"mean_train_\" + metric], columns=[\"train \" + metric])\n                for metric in ['accuracy', 'f1', 'precision', 'recall', 'roc_auc']\n        ] +\n        [pd.DataFrame(gs.cv_results_['std_test_accuracy'], columns=[\"std_test_accuracy\"])],\n    axis=1)\ndupl = results.duplicated(subset=[\"accuracy\", \"f1\", \"precision\", \"recall\", \"roc_auc\", \"train accuracy\",], keep=\"first\")\nresults = results[~dupl]\nresults.sort_values(\"accuracy\", ascending=False).head(10)","aa4b5b0b":"f_imp = pd.DataFrame({\"feature\": X.columns, \"importance\": gs.best_estimator_.feature_importances_})\nf_imp = f_imp[f_imp[\"importance\"]>0.00].sort_values(\"importance\", ascending=False)\nf_imp","1f7e4854":"tree.plot_tree(gs.best_estimator_,\n               feature_names = X.columns,\n               class_names=[\"\u041d\u0435\u0442\", \"\u0414\u0430\"],\n               filled = True)\ngv.Source(tree.export_graphviz(gs.best_estimator_,\n               feature_names = X.columns,\n               class_names=[\"\u041d\u0435\u0442\", \"\u0414\u0430\"],\n               filled = True), format='png').render(filename=\"credit_tree\", cleanup=True)","113af560":"\u041f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","da24ec35":"\u041f\u043e\u0441\u043b\u0435 \u0444\u0430\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043e\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 (\u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430) \u0432\u044b\u0440\u043e\u0441\u043b\u0430 \u043d\u0430 10%+, f1 \u043d\u0430 16%","cc41f363":"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","dd928b74":"\u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0431\u0435\u0437 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u043f\u0435\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435, \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043b\u0435\u0433\u043a\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0438 \u0432 \u043a\u0430\u043a\u043e\u043c \u0442\u043e \u0441\u043c\u044b\u0441\u043b\u0435 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c","5a62ccea":"# \u041f\u043e\u0434\u0431\u043e\u0440 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438 \u0444\u0430\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f","9aa4ff1b":"\u041f\u043e\u0434\u0431\u0435\u0440\u0451\u043c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","e78e38f7":"# \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430","0741fee7":"\u041a\u043b\u0430\u0441\u0441\u044b \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b. \u041d\u043e \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u044b\u0434\u0430\u0442\u044c \u043d\u0435\u043f\u043e\u0433\u0430\u0448\u0430\u0435\u043c\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442 \u043e\u0431\u044b\u0447\u043d\u043e \u0443\u0431\u044b\u0442\u043e\u0447\u043d\u0435\u0435, \u0447\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0435 \u0432\u044b\u0434\u0430\u0442\u044c, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043a\u043b\u0430\u0441\u0441\u044b \u043d\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c."}}