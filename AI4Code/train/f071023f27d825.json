{"cell_type":{"4ffb0429":"code","0abb9ffd":"code","cbadcdff":"code","5aba0fc4":"code","41ade0e6":"code","72955bda":"code","a33b9ba5":"code","126c4ab4":"code","5e651b6b":"code","6c02fca7":"code","fff16e3f":"code","0b9ebda5":"markdown","f711f2ea":"markdown","d191d9ce":"markdown","19247680":"markdown","24665141":"markdown","33c6a2fd":"markdown","75a4ed81":"markdown"},"source":{"4ffb0429":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0abb9ffd":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom datetime import date, timedelta, datetime\n\ndata = pd.read_csv('..\/input\/airplane-crashes-since-1908\/Airplane_Crashes_and_Fatalities_Since_1908.csv')","cbadcdff":"data.head()","5aba0fc4":"data.tail()","41ade0e6":"data.shape","72955bda":"data.isnull().sum()","a33b9ba5":"#cleanup\ndata['Time'] = data['Time'].replace(np.nan, '00:00') \ndata['Time'] = data['Time'].str.replace('c: ', '')\ndata['Time'] = data['Time'].str.replace('c:', '')\ndata['Time'] = data['Time'].str.replace('c', '')\ndata['Time'] = data['Time'].str.replace('12\\'20', '12:20')\ndata['Time'] = data['Time'].str.replace('18.40', '18:40')\ndata['Time'] = data['Time'].str.replace('0943', '09:43')\ndata['Time'] = data['Time'].str.replace('22\\'08', '22:08')\ndata['Time'] = data['Time'].str.replace('114:20', '00:00')\n\n\ndata['Time'] = data['Date'] + ' ' + data['Time'] #joining two rows\ndef todate(x):\n    return datetime.strptime(x, '%m\/%d\/%Y %H:%M')\ndata['Time'] = data['Time'].apply(todate) #convert to date type\nprint('Date ranges from ' + str(data.Time.min()) + ' to ' + str(data.Time.max())) \n\ndata.Operator = data.Operator.str.upper() #to avoid duplicates.","126c4ab4":"Temp = data.groupby(data.Time.dt.year)[['Date']].count()\nTemp = Temp.rename(columns={\"Date\": \"Count\"})\n\nplt.figure(figsize=(12,6))\nplt.style.use('bmh')\nplt.plot(Temp.index, 'Count', data=Temp, color='m', marker = \"o\", linewidth=1)\nplt.xlabel('Year', fontsize=10)\nplt.ylabel('Count', fontsize=10)\nplt.title('Yearly Accidents', loc='Center', fontsize=18)\nplt.show()","5e651b6b":"\nimport matplotlib.pylab as pl\nimport matplotlib.gridspec as gridspec\n\ngs = gridspec.GridSpec(2, 2)\npl.figure(figsize=(15,10))\nplt.style.use('seaborn-muted')\nax = pl.subplot(gs[0, :]) # row 0, col 0\nsns.barplot(data.groupby(data.Time.dt.month)[['Date']].count().index, 'Date', data=data.groupby(data.Time.dt.month)[['Date']].count(), color='red', linewidth=2)\nplt.xticks(data.groupby(data.Time.dt.month)[['Date']].count().index, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\nplt.xlabel('Month', fontsize=10)\nplt.ylabel('Count', fontsize=10)\nplt.title('Monthly Accidents', loc='Center', fontsize=20)\n\nax = pl.subplot(gs[1, 0])\nsns.barplot(data.groupby(data.Time.dt.weekday)[['Date']].count().index, 'Date', data=data.groupby(data.Time.dt.weekday)[['Date']].count(), color='blue', linewidth=2)\nplt.xticks(data.groupby(data.Time.dt.weekday)[['Date']].count().index, ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'])\nplt.xlabel('Day of Week', fontsize=10)\nplt.ylabel('Count', fontsize=10)\nplt.title('Weekly Accidents', loc='Center', fontsize=20)\n\nax = pl.subplot(gs[1, 1])\nsns.barplot(data[data.Time.dt.hour != 0].groupby(data.Time.dt.hour)[['Date']].count().index, 'Date', data=data[data.Time.dt.hour != 0].groupby(data.Time.dt.hour)[['Date']].count(),color ='magenta', linewidth=2)\nplt.xlabel('Hour', fontsize=10)\nplt.ylabel('Count', fontsize=10)\nplt.title('Hourly Accidents', loc='Center', fontsize=20)\nplt.tight_layout()\nplt.show()","6c02fca7":"Temp = data.copy()\nTemp['isMilitary'] = Temp.Operator.str.contains('MILITARY')\nTemp = Temp.groupby('isMilitary')[['isMilitary']].count()\nTemp.index = ['Passenger', 'Military']\n\nTemp2 = data.copy()\nTemp2['Military'] = Temp2.Operator.str.contains('MILITARY')\nTemp2['Passenger'] = Temp2.Military == False\nTemp2 = Temp2.loc[:, ['Time', 'Military', 'Passenger']]\nTemp2 = Temp2.groupby(Temp2.Time.dt.year)[['Military', 'Passenger']].aggregate(np.count_nonzero)\n\ncolors = ['red', 'yellow']\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\npatches, texts = plt.pie(Temp.isMilitary, colors=colors, labels=Temp.isMilitary, startangle=90)\nplt.legend(patches, Temp.index, loc=\"best\", fontsize=10)\nplt.axis('equal')\nplt.title('Accidents by Type of flight', loc='Center', fontsize=14)\n\nplt.subplot(1, 2, 2)\nplt.plot(Temp2.index, 'Military', data=Temp2, color='red', marker = \".\", linewidth=1)\nplt.plot(Temp2.index, 'Passenger', data=Temp2, color='yellow', marker = \".\", linewidth=1)\nplt.legend(fontsize=10)\nplt.xlabel('Year', fontsize=10)\nplt.ylabel('Count', fontsize=10)\nplt.title('Yearly Accidents', loc='Center', fontsize=14)\nplt.tight_layout()\nplt.show()","fff16e3f":"Fatalities = data.groupby(data.Time.dt.year).sum()\nFatalities['Proportion'] = Fatalities['Fatalities'] \/ Fatalities['Aboard']\n\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nplt.fill_between(Fatalities.index, 'Aboard', data=Fatalities, color=\"green\", alpha=0.2)\nplt.plot(Fatalities.index, 'Aboard', data=Fatalities, marker = \".\", color=\"red\", alpha=0.6, linewidth=1)\nplt.fill_between(Fatalities.index, 'Fatalities', data=Fatalities, color=\"magenta\", alpha=0.2)\nplt.plot(Fatalities.index, 'Fatalities', data=Fatalities, color=\"blue\", marker = \".\", alpha=0.6, linewidth=1)\nplt.legend(fontsize=10)\nplt.xlabel('Year', fontsize=10)\nplt.ylabel('Amount of people', fontsize=10)\nplt.title('Yearly Human Deaths', loc='Center', fontsize=14)\n\nplt.subplot(1, 2, 2)\nplt.plot(Fatalities.index, 'Proportion', data=Fatalities, marker = \".\", color = 'red', linewidth=1)\nplt.xlabel('Year', fontsize=10)\nplt.ylabel('Ratio', fontsize=10)\nplt.title('Fatalities Ratio by Year', loc='Center', fontsize=14)\nplt.tight_layout()\nplt.show()","0b9ebda5":"# **Gathering the required libraries**","f711f2ea":"# **Data Cleaning**","d191d9ce":"**Checking for missing values**","19247680":"# **Military Vs Commericial Flights**","24665141":"**Through inspection, we found that missing values are present but employing feature engineering techniques and neglecting the features of less interest can result in good results.**","33c6a2fd":"# **Visualizing the Data**","75a4ed81":"# **Total Fatalities**"}}