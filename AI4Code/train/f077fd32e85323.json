{"cell_type":{"f59b4c14":"code","7039d6cf":"code","4442f834":"code","51bff42c":"code","2570f7c3":"code","872b30ed":"code","4e9d5975":"code","1314fe98":"code","0c8ccd79":"code","a729ee51":"code","aaa2274f":"code","eddfc397":"code","a5592341":"code","1bbe3cfb":"code","b79d77c9":"code","0183cb09":"code","baa34243":"code","8b7e3f92":"code","e3a4729a":"code","2bc38452":"code","83333232":"code","a5f882e1":"code","0f6827b3":"code","a0b13de7":"markdown","79a6f739":"markdown","d1ec0f87":"markdown","f6aba2ba":"markdown","668ebd4d":"markdown","9ccf6cd6":"markdown","010deb4b":"markdown","b3e58d41":"markdown","a761bf0c":"markdown","e2c9b40e":"markdown","6e6bb96a":"markdown","78e71bba":"markdown","30d2a3af":"markdown","fc620eca":"markdown","4640faf4":"markdown","47cb5f19":"markdown","70d21d3d":"markdown","ab19f865":"markdown","5d04417e":"markdown","d1f87d6f":"markdown","f0b7c773":"markdown","25613366":"markdown","342532b5":"markdown"},"source":{"f59b4c14":"!pip install pycaret\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as plx\nfrom pycaret.classification import *\nimport warnings\nwarnings.filterwarnings(\"ignore\")","7039d6cf":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","4442f834":"train.head()","51bff42c":"print(\"Rows and columns in the training set are:-\",train.shape[0],\",\",train.shape[1])\nprint(\"Rows and columns in the test set are:-\",test.shape[0],\",\",test.shape[1])","2570f7c3":"train.info()","872b30ed":"fig = plx.pie(names=train[\"Sex\"].value_counts().index,values=train[\"Sex\"].value_counts(),width=500,height=500)\n\nfig.update_layout(\n    title={\n        'text': \"Gender Split\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()","4e9d5975":"fig=plx.bar(train.groupby([\"Sex\",\"Survived\"])[\"PassengerId\"].count().reset_index().rename(columns={\"PassengerId\":\"Count\"}),y=\"Count\",x=\"Sex\",color=\"Survived\",orientation=\"v\")\nfig.update(layout_coloraxis_showscale=False)","1314fe98":"train[\"Age_bin\"] = pd.cut(train.Age,[0,18,30,40,50,60,100])\ntrain[\"Age_bin\"]=train[\"Age_bin\"].astype(\"str\")\ndf=train.groupby([\"Age_bin\",\"Survived\"])[\"PassengerId\"].count().reset_index().rename(columns={\"PassengerId\":\"Count\"})\ndf=df[df[\"Age_bin\"]!=\"nan\"]\nfig=plx.bar(df,y=\"Count\",x=\"Age_bin\",color=\"Survived\",orientation=\"v\")\nfig.update(layout_coloraxis_showscale=False)","0c8ccd79":"df=train.groupby([\"Pclass\",\"Survived\"])[\"PassengerId\"].count().reset_index().rename(columns={\"PassengerId\":\"Count\"})\ndf['Pclass']= df['Pclass'].map({1:\"1st Class\",2:\"2nd Class\",3:\"3rd Class\"})\ndf['Survived']= df['Survived'].map({0:\"Not Survived\",1:\"Survived\"})\n\nfig = plx.treemap(df, path=['Survived', 'Pclass'], values='Count')\nfig.show()","a729ee51":"df=train.groupby([\"Embarked\",\"Survived\"])[\"PassengerId\"].count().reset_index().rename(columns={\"PassengerId\":\"Count\"})\nfig = plx.funnel(df, x='Count', y='Embarked', color='Survived')\nfig.show()","aaa2274f":"df=train.groupby([\"Pclass\",\"Survived\",\"Embarked\"])[\"PassengerId\"].count().reset_index().rename(columns={\"PassengerId\":\"Count\"})\ndf['Pclass']= df['Pclass'].map({1:\"1st Class\",2:\"2nd Class\",3:\"3rd Class\"})\ndf['Survived']= df['Survived'].map({0:\"Not Survived\",1:\"Survived\"})\n\nfig = plx.treemap(df, path=['Survived', 'Embarked','Pclass'], values='Count')\nfig.show()","eddfc397":"train=train.drop([\"PassengerId\",\"Name\",\"Cabin\",\"Ticket\"],axis=1)","a5592341":"clf_1 = setup(data = train.dropna(), target = 'Survived', session_id=10001)","1bbe3cfb":"best_model = compare_models()","b79d77c9":"cat_boost = create_model('catboost')","0183cb09":"tuned_catboost = tune_model(cat_boost)","baa34243":"boosted_dt = ensemble_model(cat_boost, method = 'Boosting', n_estimators = 100)","8b7e3f92":"interpret_model(cat_boost,plot=\"summary\")","e3a4729a":"final_cat_boost = finalize_model(cat_boost)","2bc38452":"predict_model(final_cat_boost)","83333232":"#test=test.drop([\"PassengerId\",\"Name\",\"Cabin\",\"Ticket\"],axis=1)\ntest[\"Age_bin\"] = pd.cut(test.Age,[0,18,30,40,50,60,100])\ntest[\"Age_bin\"]=test[\"Age_bin\"].astype(\"str\")\ntest_predictions = predict_model(final_cat_boost, data=test)\ntest_predictions.head()","a5f882e1":"submit = test_predictions[[\"PassengerId\",\"Label\"]].rename(columns={\"Label\":\"Survived\"})","0f6827b3":"submit.to_csv(\"titanic_submit.csv\",index=False)","a0b13de7":"# PyCaret Library\n\nNow let us set up the pycaret library. When we set up the data as below, it takes care of the below preprocessing steps by default:\n1. Imputation : Mean for numeric data types and Mode for categorical. It can be changed.\n2. One hot encoding for categorical variables\n3. Normalization : z-score by default","79a6f739":"Let us have a look at the ist of columns, their datatypes and non null value count.","d1ec0f87":"# Classification using PyCaret - Quick Modelling\n\n#### We will be using plotly express for the Exploratory data analysis and PyCaret for the classification model for this problem.\n\nPyCaret is a library which helps in prototyping quick solutions with minimal code. **Irrespective of the flexibility it offers it is a must have in the toolkit for all ML practioners.**\n\nIt allows us to do all the basic operations of a machine learning model as we can see below.\n\nHere we will build a model using PyCaret quickly with minimal code which would give us a decent score of 0.77 .\n\nThe notebook is under development and I will be adding ensembling using PyCaret soon.\nEdit: Have added ensembling.\n\n![](https:\/\/i.ibb.co\/kS1PBYJ\/Model-Comparison-Analysis.png)\n\nPyCaret Homepage:- https:\/\/pycaret.org\/guide\/\n\nA little about the Titanic dataset at hand:-\n\nRMS Titanic was a British passenger ship, which tragically sunk on 15th April 1912 after colliding with an iceberg during it's maiden journey from Southampton to New York. It was one of the deadliest peacetime marine disasters of modern history.\n\nIt was the largest passenger ship at it's time and was considered \"unsinkable\". There was a shortage of lifeboats onboard, one of the main reasons which caused the deaths of 1502 out of 2224 passenger and crew. We are provided a dataset with the particulars of the passengers onboard along with the flag if they survived or not.\n\nOur aim is to study this dataset and find out if it was more than chance that determined if a passenger survived or not. If there is a pattern we need to build a predictive model for the chance of survival of a passenger with a particular set of features(i.e. age, gender, economic status etc).\n","f6aba2ba":"Let us try boosting. Adaboost with 100 estimators.","668ebd4d":"Preparing the data for output file.","9ccf6cd6":"We can check for the best model by comparision in just one line of code !!!","010deb4b":"Before preparing the model we can drop the below columns as they are not useful for the model. PassengerID, Name and Ticket No has low probablity of any predicictive power, whereas for Cabin only 204 out our 891 are non null values.","b3e58d41":"We predict the values of holdout set by training the model on the entire train dataset. The accuracy here can be a bit misleading.","a761bf0c":"We finalize the model by training it on the entire training dataset now.","e2c9b40e":"The main reason why passengers who embarked from Southampton had a low survival rate was that most of them were 3rd class ticked holders.","6e6bb96a":"Predicting the Survived label on the test set.","78e71bba":"Import the train and test dataset","30d2a3af":"Let's try to optimize the hyperparamerts using Randomised search. But the results are worse, so we stuck with the categorical boost without tuning.\n\nPlease note that the scoring here is done based on a holdout set from the training set.","fc620eca":"Exporting the result file.","4640faf4":"Percentage of survival was higher in the lower age bands.","47cb5f19":"We can even infer that the passengers who embarked at Southampton had a lower chance of survival.","70d21d3d":"Lets use categorical boost as it performed best.","ab19f865":"Checking a sample of the first 5 rows of of the train dataset","5d04417e":"We can see that a high percentage of females survived whereas a low percentage of males survived. In plotly express charts you can hover your mouse over the bars to check the figures and labels.","d1f87d6f":"We can check feature importance below.","f0b7c773":"Import all the required libraries","25613366":"We have created a treemap which shows clearly that passengers in the 3rd class had a much lower chance of survival. ","342532b5":"About 65% of the passengers were male and ~35% were female."}}