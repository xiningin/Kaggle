{"cell_type":{"ac2b2b1b":"code","a18bd15a":"code","921a4b74":"code","d7877c8a":"code","d5a20c3f":"code","1a2ac43b":"code","faab7cc9":"code","6648a6e0":"code","11bc0d91":"code","e05c3059":"code","320df6c1":"code","f32ce970":"code","afe107b3":"code","177f147b":"code","5d0ab2d5":"code","17628d19":"code","564e32d3":"code","f93b36f7":"code","76f50405":"code","d8bcf870":"code","cd3710af":"code","cf3da7a8":"code","063aa467":"code","1d257455":"code","cf194ced":"code","131769c4":"code","c7896393":"code","12111548":"code","b9922dbb":"code","84c9df22":"code","bf8a7b91":"markdown"},"source":{"ac2b2b1b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a18bd15a":"import matplotlib.pyplot as plt\nimport seaborn as sns\n","921a4b74":"low_memory=False","d7877c8a":"# Store the path in variables\nairlines_path = \"..\/input\/flight-delays\/airlines.csv\"\nairport_path = \"..\/input\/flight-delays\/airports.csv\"\nflights_path = \"..\/input\/flight-delays\/flights.csv\"\n\n# Load the data\nairlines_data = pd.read_csv(airlines_path)\nairport_data = pd.read_csv(airport_path)\nflights_data = pd.read_csv(flights_path)","d5a20c3f":"airlines_data.head()","1a2ac43b":"airport_data.head()","faab7cc9":"flights_data['DEPARTURE_DELAY'].max()","6648a6e0":"flights_data.head()","11bc0d91":"flights_data.shape","e05c3059":"#lets take a segment of this data for now \nflights_seg = flights_data[0:150000]\nflights_seg","320df6c1":"flights_seg.info()","f32ce970":"#year column is unneccesary since the data is bounded to 2015 but day and month are important\ndelay =[]\nfor row in flights_seg['ARRIVAL_DELAY']:\n    if row > 60:\n        delay.append(3)\n    elif row > 30:\n        delay.append(2)\n    elif row > 15:\n        delay.append(1)\n    else:\n        delay.append(0)  \nflights_seg['delay'] = delay","afe107b3":"# 0 = On time\/ before time\/ not more than 15 mins of delay\n# 1 = more than 15 mins and less than 30 mins of delay\n# 2 = more than 30 mins and less than 1 hr of delay\n# 3 = more than an hour of delay\nflights_seg.value_counts('delay')","177f147b":"def plot_bar(group, title):\n    plt.figure(figsize=(14,6))\n    sns.barplot(x=group.index,y=group.values)     \n    plt.title(title)\n    plt.xticks(rotation=45)\n    plt.show()\nplot_bar(flights_seg.value_counts('DAY'), 'Travel Frequency Month Wise')\nplot_bar(flights_data.value_counts('MONTH'), 'x')\nplot_bar(flights_seg.value_counts('DAY_OF_WEEK'), 'Travel Frequency Month Wise')","5d0ab2d5":"sns.jointplot(data=flights_seg, x=\"SCHEDULED_ARRIVAL\", y=\"ARRIVAL_TIME\")","17628d19":"sns.jointplot(data=flights_seg, y=\"AIRLINE\", x=\"delay\")","564e32d3":"Flight_data_delay =[]\nfor row in flights_data['ARRIVAL_DELAY']:\n    if row > 60:\n        Flight_data_delay.append(3)\n    elif row > 30:\n        Flight_data_delay.append(2)\n    elif row > 15:\n        Flight_data_delay.append(1)\n    else:\n        Flight_data_delay.append(0)  \n","f93b36f7":"flights_data['Delay'] = Flight_data_delay","76f50405":"sns.heatmap(flights_data.corr())","d8bcf870":"flights_data=flights_data.drop(['YEAR','FLIGHT_NUMBER','AIRLINE','DISTANCE','TAIL_NUMBER','TAXI_OUT','SCHEDULED_TIME','DEPARTURE_TIME','WHEELS_OFF','ELAPSED_TIME','AIR_TIME','WHEELS_ON','DAY_OF_WEEK','TAXI_IN','CANCELLATION_REASON','ORIGIN_AIRPORT', 'DESTINATION_AIRPORT', 'ARRIVAL_TIME', 'ARRIVAL_DELAY', \"CANCELLED\"],\n                                             axis=1)","cd3710af":"flights_data.describe()","cf3da7a8":"flights_data=flights_data.fillna(flights_data.mean())","063aa467":"flights_data.head(25)","1d257455":"sns.heatmap(flights_data.corr())","cf194ced":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import roc_auc_score","131769c4":"data = flights_data.values\nX, y = data[:,:-1], data[:,-1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)","c7896393":"scaled_features = StandardScaler().fit_transform(X_train, X_test)","12111548":"clf = DecisionTreeClassifier()\nclf = clf.fit(X_train,y_train)","b9922dbb":"clf = DecisionTreeClassifier()\nclf = clf.fit(X_train,y_train)","84c9df22":"pred_prob = clf.predict_proba(X_test)\nauc_score = roc_auc_score(y_test, pred_prob, multi_class='ovr')\nauc_score","bf8a7b91":"<h1>Accuracy is 0.9983<\/h1>"}}