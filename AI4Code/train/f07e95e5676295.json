{"cell_type":{"a2e6af85":"code","cda128c2":"code","03fb8308":"code","5253936b":"code","16223c54":"code","a2d31a00":"code","2be93349":"code","0b3fbac7":"code","a64bccd6":"code","f7338b8d":"code","eddb3e5d":"code","dcd8247b":"code","d439d737":"code","c0482fab":"code","1c944af3":"code","4f2c74fa":"code","f5187daa":"code","394f90ac":"code","38ef6c5c":"code","380d731c":"code","cf1fda81":"markdown","af60675a":"markdown"},"source":{"a2e6af85":"# General Libs\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense, BatchNormalization, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.applications.inception_resnet_v2 import InceptionResNetV2, preprocess_input\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.image as mpimg\nimport json\nfrom tensorflow.keras.utils import to_categorical \nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom PIL import Image\nimport os\n%matplotlib inline","cda128c2":"dir_path = '..\/input\/cassava-leaf-disease-classification'\ntrain_read = pd.read_csv(dir_path + \"\/train.csv\", sep=',')\ntrain_read.head(5)","03fb8308":"test_dir_path = '..\/input\/cassava-leaf-disease-classification\/test_images'\ntest_file_path = '\/2216849948.jpg'\ndata = {'image_id': ['2216849948.jpg']}\ntest_df = pd.DataFrame(data=data)\ntest_df.head()","5253936b":"with open(dir_path + '\/label_num_to_disease_map.json') as f:\n    labelnames = json.loads(f.read())\n    labelnames = {int(k): v for k,v in labelnames.items()}","16223c54":"train_read['label'] = train_read['label'].astype('string')","a2d31a00":"train_im_path = dir_path + '\/train_images\/'\nfig = plt.figure(figsize=(15, 10))\nnpics= 6\n\ncount = 1\nimage_list = train_read[train_read['label'] == str(list(labelnames.keys())[list(labelnames.values()).index('Healthy')])]['image_id'].sample(frac=1)[:npics].to_list()  \nfor i, img in enumerate(image_list):\n    \n    sample = os.path.join(train_im_path, img) \n    sample_img = Image.open(sample)   \n    ax = fig.add_subplot(npics\/2 , 3, count, xticks=[],yticks=[])   \n    plt.imshow(sample_img)\n    count +=1\nfig.suptitle('Healthy')\nplt.tight_layout()\nplt.show()","2be93349":"fig = plt.figure(figsize=(15, 10))\nnpics= 6\ncount = 1\nimage_list = train_read[train_read['label'] == str(list(labelnames.keys())[list(labelnames.values()).index('Cassava Bacterial Blight (CBB)')])]['image_id'].sample(frac=1)[:npics].to_list()  \nfor i, img in enumerate(image_list):\n    \n    sample = os.path.join(train_im_path, img) \n    sample_img = Image.open(sample)   \n    ax = fig.add_subplot(npics\/2 , 3, count, xticks=[],yticks=[])   \n    plt.imshow(sample_img)\n    count +=1\nfig.suptitle('CBB')\nplt.tight_layout()\nplt.show()","0b3fbac7":"target_size = (300, 300)\ninput_shape = (300, 300, 3)\nbatch_size = 64\nseed = 10\nepochs = 3","a64bccd6":"datagen = ImageDataGenerator(validation_split=0.2)\nval_data_generator = ImageDataGenerator(validation_split=0.2)\n\ntrain_generator = datagen.flow_from_dataframe(train_read,\n                                              directory=train_im_path,\n                                              x_col=\"image_id\",\n                                              y_col=\"label\",\n                                              target_size=target_size,\n                                              batch_size=batch_size,\n                                              shuffle=True, \n                                              seed=seed,\n                                              class_mode=\"categorical\",\n                                              subset=\"training\",)\n\nval_generator = val_data_generator.flow_from_dataframe(train_read,\n                                            directory=train_im_path,\n                                            x_col=\"image_id\",\n                                            y_col=\"label\",\n                                            target_size=target_size,\n                                            batch_size=batch_size,\n                                            shuffle=True, \n                                            seed=seed,\n                                            class_mode=\"categorical\",\n                                            subset=\"validation\",)\n\nclasses = list(train_generator.class_indices.keys())\nprint('Classes: '+str(classes))\nnum_classes  = len(classes)","f7338b8d":"model = Sequential()\nmodel.add(Conv2D(40, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=(input_shape)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(80, kernel_size=(3,3), activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(num_classes, activation='softmax'))\nmodel.summary()\n\n# Compila o modelo\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=Adam(),\n              metrics=['accuracy'])","eddb3e5d":"#Callback to save the best model\ncallbacks_list = [\n    keras.callbacks.ModelCheckpoint(\n        filepath='model.h5',\n        monitor='val_loss', save_best_only=True, verbose=1),\n    keras.callbacks.EarlyStopping(monitor='val_loss', patience=10,verbose=1)\n]\n\n#Training\n\nhistory = model.fit(\n        train_generator,\n        steps_per_epoch=train_generator.samples \/\/ batch_size,\n        epochs=epochs,\n        callbacks = callbacks_list,\n        validation_data=val_generator,\n        verbose = 1,\n        validation_steps=val_generator.samples \/\/ batch_size)\n","dcd8247b":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(1, len(acc) + 1)\n\nfig = plt.figure(figsize=(15, 5))\nfig.add_subplot(121)\n\nplt.plot(epochs_range, acc, linestyle='--', label = \"Training acc\")\nplt.plot(epochs_range, val_acc, linestyle='-.', label = \"Validation acc\")\nplt.title(\"Training and validation acc\")\nplt.legend()\n\nfig.add_subplot(122)\nplt.plot(epochs_range, loss, linestyle='--', label = \"Training loss\", alpha=0.8)\nplt.plot(epochs_range, val_loss, linestyle='-.', label = \"Validation loss\", alpha=0.6)\nplt.title(\"Training and validation loss\")\nplt.legend()\n\nplt.show()","d439d737":"# Load the best saved model\nfrom tensorflow.keras.models import load_model\nmodel = load_model(\"model.h5\")\nscore = model.evaluate(val_generator)","c0482fab":"print('Val loss:', score[0])\nprint('Val accuracy:', score[1])","1c944af3":"submission_df = pd.read_csv(\"..\/input\/cassava-leaf-disease-classification\/sample_submission.csv\")\nsubmission_df.head()","4f2c74fa":"preds = []\n# preds_no_argmax = []\n\n\ntest_images = os.listdir('\/kaggle\/input\/cassava-leaf-disease-classification\/test_images\/')\npreds = []\n\nfor i in test_images:\n    image = Image.open(f'\/kaggle\/input\/cassava-leaf-disease-classification\/test_images\/{i}')\n    image = image.resize(target_size)\n    image = np.expand_dims(image, axis=0)\n    preds.append(np.argmax(model.predict(image)))\n\ndf_sub = pd.DataFrame({'image_id': test_images, 'label': preds})\ndf_sub.head()\ndf_sub.to_csv(\"submission.csv\", index=None)","f5187daa":"base_model = InceptionResNetV2(weights='imagenet', include_top=False, input_shape=input_shape)\n\nx = base_model.output\nx = Flatten()(x)\nx = Dense(100, activation='relu')(x)\npredictions = Dense(num_classes, activation='softmax', kernel_initializer='random_uniform')(x)\n\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\n# Freezing pretrained layers\nfor layer in base_model.layers:\n    layer.trainable=False\n    \noptimizer = Adam()\nmodel.compile(optimizer=optimizer,loss='categorical_crossentropy',metrics=['accuracy'])","394f90ac":"# Saving the best model\ncallbacks_list = [\n    keras.callbacks.ModelCheckpoint(\n        filepath='model_transfer.h5',\n        monitor='val_loss', save_best_only=True, verbose=1),\n    keras.callbacks.EarlyStopping(monitor='val_loss', patience=2,verbose=1)\n]\n\nhistory = model.fit(\n        train_generator,\n        steps_per_epoch=train_generator.samples \/\/ batch_size,\n        epochs=epochs,\n        callbacks = callbacks_list,\n        validation_data=val_generator,\n        verbose = 1,\n        validation_steps=val_generator.samples \/\/ batch_size)","38ef6c5c":"history_dict = history.history\nloss_values = history_dict['loss']\nval_loss_values = history_dict['val_loss']\n\nepochs_x = range(1, len(loss_values) + 1)\nplt.figure(figsize=(10,10))\nplt.subplot(2,1,1)\nplt.plot(epochs_x, loss_values, 'bo', label='Training loss')\nplt.plot(epochs_x, val_loss_values, 'b', label='Validation loss')\nplt.title('Training and validation Loss and Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\n#plt.legend()\nplt.subplot(2,1,2)\nacc_values = history_dict['accuracy']\nval_acc_values = history_dict['val_accuracy']\nplt.plot(epochs_x, acc_values, 'bo', label='Training acc')\nplt.plot(epochs_x, val_acc_values, 'b', label='Validation acc')\n#plt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Acc')\nplt.legend()\nplt.show()","380d731c":"model = load_model('model_transfer.h5')\nscore = model.evaluate(val_generator)\nprint('Val loss:', score[0])\nprint('Val accuracy:', score[1])","cf1fda81":"# Exerc\u00edcio 2\n\n**Francisco De Assis Marinho Aguiar**\n\n**Leandro da Cruz Farias**","af60675a":"# Transfer\u00eancia de aprendizagem"}}