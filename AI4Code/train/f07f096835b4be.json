{"cell_type":{"8e33e962":"code","e50efe1a":"code","a270befe":"code","fcc9dab3":"code","454c1698":"code","a95dfb07":"code","d9f99142":"code","b53139df":"code","f8293173":"code","8bdab7b5":"code","a5159e86":"code","0b9e624c":"code","c2063957":"code","e86bb33e":"code","37093cc0":"code","e2e6905f":"code","dbdf2684":"code","08230145":"code","96da3c48":"code","dfe986ec":"code","79293bc2":"markdown","3b678550":"markdown","763d34c0":"markdown","0fe1e5f9":"markdown","66c24640":"markdown","6f55bf9d":"markdown","7052c3ab":"markdown","d9a29bdd":"markdown","925d47c6":"markdown"},"source":{"8e33e962":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e50efe1a":"# Import \ndf_train = pd.read_csv(\"..\/input\/train.csv\", sep=\",\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\", sep=\",\")\n\n# Check import\ndf_train.head()","a270befe":"# % survived split by sex\ndf_train[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values(by='Survived',ascending=False).round(2)","fcc9dab3":"# Shape of train dataset\ndf_train.shape","454c1698":"# Types of features in train dataset\ndf_train.dtypes","a95dfb07":"# Drop columns of datasets\ndf_train = df_train.drop([\"PassengerId\", \"Name\"], axis=1)\ndf_test = df_test.drop([\"Name\"], axis=1)","d9f99142":"# Check NaN in column 'Cabin'\ndf_train['Cabin'].isna().sum()","b53139df":"# Check Cabin columns values unique \ndf_train['Cabin'].unique()","f8293173":"# Drop more columns of datasets\ndf_train = df_train.drop([\"Cabin\"], axis=1)\ndf_test = df_test.drop([\"Cabin\"], axis=1)","8bdab7b5":"# Check Ticket columns values unique \ndf_train['Ticket'].unique()","a5159e86":"# (TRAIN) - 'Create' category variables\ndf_train['Ticket'] = df_train['Ticket'].astype(\"category\").cat.codes\ndf_train['Sex']= df_train['Sex'].astype(\"category\").cat.codes\ndf_train['Embarked'] = df_train['Embarked'].astype(\"category\").cat.codes\ndf_train['Age'] = round(df_train['Age'])\n\n# (TRAIN) - Create a feature to see if passeger is alone in ship\nis_alone_train=[]\nfor x in df_train['SibSp']:\n  if(x==0):is_alone_train.append(0)\n  else: is_alone_train.append(1)\ndf_train['is_alone'] = is_alone_train\n\n# (TRAIN) - Create a feature to agroup people by age\nage_group_train=[]\nfor x in df_train['Age']:\n  if x <=16: age_group_train.append(1)\n  elif x >=17 and x <= 32:age_group_train.append(2)\n  elif x >= 33 and x <= 42:age_group_train.append(3)\n  else:age_group_train.append(4)   \ndf_train['age_group'] = age_group_train\n\n# ---------------------------------------------------------------------\n\n# (TEST) - 'Create' category variables\ndf_test['Ticket'] = df_test['Ticket'].astype(\"category\").cat.codes\ndf_test['Sex']= df_test['Sex'].astype(\"category\").cat.codes\ndf_test['Embarked'] = df_test['Embarked'].astype(\"category\").cat.codes\ndf_test['Age'] = round(df_test['Age'])\n\n# (TEST) - Create a feature to see if passeger is alone in ship\nis_alone_test=[]\nfor x in df_test['SibSp']:\n  if(x==0): is_alone_test.append(0)\n  else: is_alone_test.append(1)\ndf_test['is_alone'] = is_alone_test\n\n# (TEST) - Create a feature to agroup people by age\nage_group_test=[]\nfor x in df_test['Age']:\n  if x <=16: age_group_test.append(1)\n  elif x >=17 and x <= 32:  age_group_test.append(2)\n  elif x >= 33 and x <= 42: age_group_test.append(3)\n  else: age_group_test.append(4)\ndf_test['age_group'] = age_group_test","0b9e624c":"# Fill missing values with 'mode' and 0\n\ndf_train['Age'].fillna(0,inplace=True)\ndf_train['Embarked'].fillna(df_train['Embarked'].mode()[0],inplace=True)\ndf_train['Fare'].fillna(0, inplace=True)\n\ndf_test['Age'].fillna(0,inplace=True)\ndf_test['Embarked'].fillna(df_test['Embarked'].mode()[0],inplace=True)\ndf_test['Fare'].fillna(0, inplace=True)","c2063957":"# Plotting 'Age Group'\nax = sns.kdeplot(df_train['age_group'],shade=True)\nax2 = sns.kdeplot(df_test['age_group'],shade=True)\nsns.set_context(\"notebook\")\nplt.legend([\"Group train\",\"Group test\"])\nplt.title(\"Age group by dataset\", size=15, x=0.5,y=1.1)","e86bb33e":"# (TRAIN) - Correlation table \ndf_train.corr().round(2)","37093cc0":"# Using seaborn to plot features correlation \n\n# Appply style\nsns.set(style=\"white\")\n\n# Compute the correlation matrix\ncorr = df_train.corr().round(2)\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(13, 8))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","e2e6905f":"# (TRAIN) - Check dataset after changes\ndf_train.head()","dbdf2684":"# Set 'y' as a target\ny = df_train['Survived']\n\n# Create a dataframe\nexport = pd.DataFrame()\nexport['PassengerId'] = df_test['PassengerId']\n\ndf_test = df_test.drop(['PassengerId'], axis=1)\n\n# Removing target from data to train\ndf_train = df_train.drop('Survived', axis=1 )\n\n# Set X\nX = df_train","08230145":"# Libriries to create model\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\n\n# Split train dataset \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.18, random_state=0)\n\n# Create a model and parameters\nclf = RandomForestClassifier(n_estimators=50, \n                               max_depth=6,\n                               n_jobs = -1,\n                               random_state=0)\n# Training model\nclf.fit(X_train, y_train) \n\n\nprint(\"Teste: {}%\".format(clf.score(X_test, y_test).round(2)))\nprint(\"Train: {}%\".format(clf.score(X_train, y_train).round(2)))\nprint('-----------------------------')\nprint('The mae of prediction is:', metrics.mean_absolute_error(y_train, clf.predict(X_train)).round(2) )\nprint('Mean Squared Error:', metrics.mean_squared_error(y_train, clf.predict(X_train)).round(2))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_train, clf.predict(X_train))).round(2))\n","96da3c48":"# Create X_test to predict (test dataset)\nX_test = df_test\n\n# Predic y from X_test\ny_pred_test = clf.predict(X_test)\n\n# Fill dataframe with values predict\nexport['Survived'] = y_pred_test \n\n# Export file\nexport_csv = export.to_csv (r'titanic.csv', index = None, header=True)","dfe986ec":"# Libriries to create model\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import KFold\n\n# Scaling variables\nsc = StandardScaler()\nX_scale = sc.fit_transform(X)\n\n# Create k-fold\ncv = KFold(n_splits = 6, shuffle = True)\n\nresult = cross_validate(clf,X_scale,y,cv=cv, return_train_score=False)\nprint(\"Cross validate median {}%\".format(np.median(result['test_score']).round(2)*100))\nprint(\"Cross validate average {}%\".format(np.average(result['test_score']).round(2)*100))","79293bc2":"\n\n## Reading CSV files","3b678550":"I'm starting to study in machine learning.\n\nI hope this kernel helps people that are improving your knowledge.\n","763d34c0":"## Export CSV file","0fe1e5f9":"## Cross Validation - Sklearn","66c24640":"Linkedin: www.linkedin.com\/in\/wesleywatanabe\n","6f55bf9d":"## Import libraries","7052c3ab":"## Data analysis","d9a29bdd":"Thank you for reading!","925d47c6":"##  Model - Random Forest Classifier"}}