{"cell_type":{"830d7639":"code","d0d30c37":"code","c6be09f1":"code","ff6da28f":"code","5a796e53":"code","90dfec92":"code","912ded4f":"code","f9c87fd8":"code","30203808":"markdown","0c5a835b":"markdown","e56b6378":"markdown","12635107":"markdown","567a0e5e":"markdown","b75c845c":"markdown"},"source":{"830d7639":"EPOCHS = 5\nSPLITS = 6","d0d30c37":"import os\n# os.system('ls -l')\n# os.system('pip install tensorflow_addons')\n!pip install tensorflow_addons==0.9.1\nimport tensorflow as tf\nfrom tensorflow.keras.layers import *\nimport pandas as pd\nimport numpy as np\nimport random\nfrom tensorflow.keras.callbacks import Callback, LearningRateScheduler\nfrom tensorflow.keras.losses import categorical_crossentropy\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras import losses, models, optimizers\nimport tensorflow_addons as tfa\nimport gc\n\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.metrics import f1_score\n\nimport warnings\nwarnings.simplefilter('ignore')\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', 1000)\npd.set_option('display.max_rows', 500)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c6be09f1":"# configurations and main hyperparammeters\nNNBATCHSIZE = 16\nGROUP_BATCH_SIZE = 4000\nSEED = 321\nLR = 0.0015\n\ndef seed_everything(seed):\n    random.seed(seed)\n    np.random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    tf.random.set_seed(seed)","ff6da28f":"# read data\ndef read_data():\n    train = pd.read_csv('\/kaggle\/input\/data-without-drift\/train_clean.csv', dtype={'time': np.float32, 'signal': np.float32, 'open_channels':np.int32})\n    test  = pd.read_csv('\/kaggle\/input\/data-without-drift\/test_clean.csv', dtype={'time': np.float32, 'signal': np.float32})\n    sub  = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv', dtype={'time': np.float32})\n    \n    Y_train_proba = np.load(\"\/kaggle\/input\/ion-shifted-rfc-proba\/Y_train_proba.npy\")\n    Y_test_proba = np.load(\"\/kaggle\/input\/ion-shifted-rfc-proba\/Y_test_proba.npy\")\n    \n    for i in range(11):\n        train[f\"proba_{i}\"] = Y_train_proba[:, i]\n        test[f\"proba_{i}\"] = Y_test_proba[:, i]\n\n    return train, test, sub\n\n# create batches of 4000 observations\ndef batching(df, batch_size):\n    df['group'] = df.groupby(df.index\/\/batch_size, sort=False)['signal'].agg(['ngroup']).values\n    df['group'] = df['group'].astype(np.uint16)\n    return df\n\n# normalize the data (standard scaler). We can also try other scalers for a better score!\ndef normalize(train, test):\n    train_input_mean = train.signal.mean()\n    train_input_sigma = train.signal.std()\n    train['signal'] = (train.signal - train_input_mean) \/ train_input_sigma\n    test['signal'] = (test.signal - train_input_mean) \/ train_input_sigma\n    return train, test\n\n# get lead and lags features\ndef lag_with_pct_change(df, windows):\n    for window in windows:    \n        df['signal_shift_pos_' + str(window)] = df.groupby('group')['signal'].shift(window).fillna(0)\n        df['signal_shift_neg_' + str(window)] = df.groupby('group')['signal'].shift(-1 * window).fillna(0)\n    return df\n\n# main module to run feature engineering. Here you may want to try and add other features and check if your score imporves :).\ndef run_feat_engineering(df, batch_size):\n    # create batches\n    df = batching(df, batch_size = batch_size)\n    # create leads and lags (1, 2, 3 making them 6 features)\n    df = lag_with_pct_change(df, [1, 2, 3])\n    # create signal ** 2 (this is the new feature)\n    df['signal_2'] = df['signal'] ** 2\n    \n    # 'batch_index' from https:\/\/www.kaggle.com\/jazivxt\/physically-possible and https:\/\/www.kaggle.com\/siavrez\/simple-eda-model\n    df['batch'] = df.index \/\/ 25_000\n    df['batch_index'] = df.index  - (df.batch * 25_000)\n    \n    # add shifts_2 - my upgrade\n    df['signal_shift_+2'] = [0,] + [1,] + list(df['signal'].values[:-2])\n    df['signal_shift_-2'] = list(df['signal'].values[2:]) + [0] + [1]\n    for i in df[df['batch_index']==0].index:\n        df['signal_shift_+2'][i] = np.nan\n    for i in df[df['batch_index']==1].index:\n        df['signal_shift_+2'][i] = np.nan\n    for i in df[df['batch_index']==49999].index:\n        df['signal_shift_-2'][i] = np.nan\n    for i in df[df['batch_index']==49998].index:\n        df['signal_shift_-2'][i] = np.nan    \n    df = df.drop(columns=['batch', 'batch_index'])\n    \n    return df\n\n# fillna with the mean and select features for training\ndef feature_selection(train, test):\n    features = [col for col in train.columns if col not in ['index', 'group', 'open_channels', 'time']]\n    train = train.replace([np.inf, -np.inf], np.nan)\n    test = test.replace([np.inf, -np.inf], np.nan)\n    for feature in features:\n        feature_mean = pd.concat([train[feature], test[feature]], axis = 0).mean()\n        train[feature] = train[feature].fillna(feature_mean)\n        test[feature] = test[feature].fillna(feature_mean)\n    return train, test, features\n\n# model function (very important, you can try different arquitectures to get a better score. I believe that top public leaderboard is a 1D Conv + RNN style)\ndef Classifier(shape_):\n    \n    def cbr(x, out_layer, kernel, stride, dilation):\n        x = Conv1D(out_layer, kernel_size=kernel, dilation_rate=dilation, strides=stride, padding=\"same\")(x)\n        x = BatchNormalization()(x)\n        x = Activation(\"relu\")(x)\n        return x\n    \n    def wave_block(x, filters, kernel_size, n):\n        dilation_rates = [2**i for i in range(n)]\n        x = Conv1D(filters = filters,\n                   kernel_size = 1,\n                   padding = 'same')(x)\n        res_x = x\n        for dilation_rate in dilation_rates:\n            tanh_out = Conv1D(filters = filters,\n                              kernel_size = kernel_size,\n                              padding = 'same', \n                              activation = 'tanh', \n                              dilation_rate = dilation_rate)(x)\n            sigm_out = Conv1D(filters = filters,\n                              kernel_size = kernel_size,\n                              padding = 'same',\n                              activation = 'sigmoid', \n                              dilation_rate = dilation_rate)(x)\n            x = Multiply()([tanh_out, sigm_out])\n            x = Conv1D(filters = filters,\n                       kernel_size = 1,\n                       padding = 'same')(x)\n            res_x = Add()([res_x, x])\n        return res_x\n    \n    inp = Input(shape = (shape_))\n    x = cbr(inp, 64, 7, 1, 1)\n    x = BatchNormalization()(x)\n    x = wave_block(x, 16, 3, 12)\n    x = BatchNormalization()(x)\n    x = wave_block(x, 32, 3, 8)\n    x = BatchNormalization()(x)\n    x = wave_block(x, 64, 3, 4)\n    x = BatchNormalization()(x)\n    x = wave_block(x, 128, 3, 1)\n    x = cbr(x, 32, 7, 1, 1)\n    x = BatchNormalization()(x)\n    x = wave_block(x, 64, 3, 1)\n    x = cbr(x, 32, 7, 1, 1)\n    x = BatchNormalization()(x)\n    x = Dropout(0.2)(x)\n    out = Dense(11, activation = 'softmax', name = 'out')(x)\n    \n    model = models.Model(inputs = inp, outputs = out)\n    \n    opt = Adam(lr = LR)\n    opt = tfa.optimizers.SWA(opt)\n    model.compile(loss = losses.CategoricalCrossentropy(), optimizer = opt, metrics = ['accuracy'])\n    return model\n\n# function that decrease the learning as epochs increase (i also change this part of the code)\ndef lr_schedule(epoch):\n    if epoch < 3:\n        lr = LR\n    elif epoch < 10:\n        lr = LR \/ 3\n    elif epoch < 30:\n        lr = LR \/ 5\n    elif epoch < 60:\n        lr = LR \/ 7\n    elif epoch < 70:\n        lr = LR \/ 9\n    elif epoch < 80:\n        lr = LR \/ 11\n    elif epoch < 90:\n        lr = LR \/ 13\n    else:\n        lr = LR \/ 100\n    return lr\n\n# class to get macro f1 score. This is not entirely necessary but it's fun to check f1 score of each epoch (be carefull, if you use this function early stopping callback will not work)\nclass MacroF1(Callback):\n    def __init__(self, model, inputs, targets):\n        self.model = model\n        self.inputs = inputs\n        self.targets = np.argmax(targets, axis = 2).reshape(-1)\n        \n    def on_epoch_end(self, epoch, logs):\n        pred = np.argmax(self.model.predict(self.inputs), axis = 2).reshape(-1)\n        score = f1_score(self.targets, pred, average = 'macro')\n        print(f'F1 Macro Score: {score:.5f}')\n\n# main function to perfrom groupkfold cross validation (we have 1000 vectores of 4000 rows and 8 features (columns)). Going to make 5 groups with this subgroups.\ndef run_cv_model_by_batch(train, test, splits, batch_col, feats, sample_submission, nn_epochs, nn_batch_size):\n    \n    seed_everything(SEED)\n    K.clear_session()\n    config = tf.compat.v1.ConfigProto(intra_op_parallelism_threads=1,inter_op_parallelism_threads=1)\n    sess = tf.compat.v1.Session(graph=tf.compat.v1.get_default_graph(), config=config)\n    tf.compat.v1.keras.backend.set_session(sess)\n    oof_ = np.zeros((len(train), 11)) # build out of folds matrix with 11 columns, they represent our target variables classes (from 0 to 10)\n    preds_ = np.zeros((len(test), 11))\n    target = ['open_channels']\n    group = train['group']\n    kf = GroupKFold(n_splits=SPLITS)\n    splits = [x for x in kf.split(train, train[target], group)]\n\n    new_splits = []\n    for sp in splits:\n        new_split = []\n        new_split.append(np.unique(group[sp[0]]))\n        new_split.append(np.unique(group[sp[1]]))\n        new_split.append(sp[1])    \n        new_splits.append(new_split)\n    # pivot target columns to transform the net to a multiclass classification estructure (you can also leave it in 1 vector with sparsecategoricalcrossentropy loss function)\n    tr = pd.concat([pd.get_dummies(train.open_channels), train[['group']]], axis=1)\n\n    tr.columns = ['target_'+str(i) for i in range(11)] + ['group']\n    target_cols = ['target_'+str(i) for i in range(11)]\n    train_tr = np.array(list(tr.groupby('group').apply(lambda x: x[target_cols].values))).astype(np.float32)\n    train = np.array(list(train.groupby('group').apply(lambda x: x[feats].values)))\n    test = np.array(list(test.groupby('group').apply(lambda x: x[feats].values)))\n\n    for n_fold, (tr_idx, val_idx, val_orig_idx) in enumerate(new_splits[0:], start=0):\n        train_x, train_y = train[tr_idx], train_tr[tr_idx]\n        valid_x, valid_y = train[val_idx], train_tr[val_idx]\n        print(f'Our training dataset shape is {train_x.shape}')\n        print(f'Our validation dataset shape is {valid_x.shape}')\n\n        gc.collect()\n        shape_ = (None, train_x.shape[2]) # input is going to be the number of feature we are using (dimension 2 of 0, 1, 2)\n        model = Classifier(shape_)\n        # using our lr_schedule function\n        cb_lr_schedule = LearningRateScheduler(lr_schedule)\n        model.fit(train_x,train_y,\n                  epochs = nn_epochs,\n                  callbacks = [cb_lr_schedule, MacroF1(model, valid_x, valid_y)], # adding custom evaluation metric for each epoch\n                  batch_size = nn_batch_size,verbose = 2,\n                  validation_data = (valid_x,valid_y))\n        preds_f = model.predict(valid_x)\n        f1_score_ = f1_score(np.argmax(valid_y, axis=2).reshape(-1),  np.argmax(preds_f, axis=2).reshape(-1), average = 'macro') # need to get the class with the biggest probability\n        print(f'Training fold {n_fold + 1} completed. macro f1 score : {f1_score_ :1.5f}')\n        preds_f = preds_f.reshape(-1, preds_f.shape[-1])\n        oof_[val_orig_idx,:] += preds_f\n        te_preds = model.predict(test)\n        model.save(\"model-wavenet.h5\")\n        te_preds = te_preds.reshape(-1, te_preds.shape[-1])           \n        preds_ += te_preds \/ SPLITS\n    # calculate the oof macro f1_score\n    f1_score_ = f1_score(np.argmax(train_tr, axis = 2).reshape(-1),  np.argmax(oof_, axis = 1), average = 'macro') # axis 2 for the 3 Dimension array and axis 1 for the 2 Domension Array (extracting the best class)\n    print(f'Training completed. oof macro f1 score : {f1_score_:1.5f}')\n    sample_submission['open_channels'] = np.argmax(preds_, axis = 1).astype(int)\n    sample_submission.to_csv('submission_wavenet.csv', index=False, float_format='%.4f')","5a796e53":"# this function run our entire program\n\nprint('Reading Data Started...')\ntrain, test, sample_submission = read_data()\ntrain, test = normalize(train, test)\nprint('Reading and Normalizing Data Completed')\n\nprint('Creating Features')\nprint('Feature Engineering Started...')\ntrain = run_feat_engineering(train, batch_size = GROUP_BATCH_SIZE)\ntest = run_feat_engineering(test, batch_size = GROUP_BATCH_SIZE)\ntrain, test, features = feature_selection(train, test)\nprint('Feature Engineering Completed...')","90dfec92":"print(f'Training Wavenet model with {SPLITS} folds of GroupKFold Started...')\nrun_cv_model_by_batch(train, test, SPLITS, 'group', features, sample_submission, EPOCHS, NNBATCHSIZE)\nprint('Training completed...')","912ded4f":"train","f9c87fd8":"test","30203808":"Commit 5 (the first successful commit)\n* with my new shifts_2 (+1 \/ -1)\n* EPOCHS = 3 # (testing of the code)\n* SPLITS = 6\n\n**LB = 0.937**","0c5a835b":"# Acknowledgements\n### Notebooks:\n\n* [Physically Possible](https:\/\/www.kaggle.com\/jazivxt\/physically-possible)\n* [Simple EDA-Model](https:\/\/www.kaggle.com\/siavrez\/simple-eda-model)\n* [MM 2020 NCAAM: LGB, XGB, LogReg - Tuning&Merging](https:\/\/www.kaggle.com\/vbmokin\/mm-2020-ncaam-lgb-xgb-logreg-tuning-merging)\n* [Merging FE & Prediction - xgb, lgb, logr, linr](https:\/\/www.kaggle.com\/vbmokin\/merging-fe-prediction-xgb-lgb-logr-linr)\n* [BOD prediction in river - 15 regression models](https:\/\/www.kaggle.com\/vbmokin\/bod-prediction-in-river-15-regression-models)\n* [Automatic selection from 20 classifier models](https:\/\/www.kaggle.com\/vbmokin\/automatic-selection-from-20-classifier-models)\n* [\ud83d\udca53 Simple Ideas [Ensemble]](https:\/\/www.kaggle.com\/teejmahal20\/3-simple-ideas-ensemble)\n* [Single Model lgbm - Kalman Filter](https:\/\/www.kaggle.com\/teejmahal20\/single-model-lgbm-kalman-filter)\n* [Wavenet with SHIFTED-RFC Proba and CBR](https:\/\/www.kaggle.com\/nxrprime\/wavenet-with-shifted-rfc-proba-and-cbr)\n* [Wavenet with SHIFTED-RFC Proba](https:\/\/www.kaggle.com\/sggpls\/wavenet-with-shifted-rfc-proba)\n* [WaveNet-Keras](https:\/\/www.kaggle.com\/siavrez\/wavenet-keras)\n* [SHIFTED-RFC Pipeline](https:\/\/www.kaggle.com\/sggpls\/shifted-rfc-pipeline)\n* [Ion Switching - Advanced FE, LGB, XGB, ConfMatrix](https:\/\/www.kaggle.com\/vbmokin\/ion-switching-advanced-fe-lgb-xgb-confmatrix)\n\n### Datasets:\n* [Data Without Drift](https:\/\/www.kaggle.com\/cdeotte\/data-without-drift)\n* [ION-SHIFTED-RFC-PROBA](https:\/\/www.kaggle.com\/sggpls\/ion-shifted-rfc-proba)","e56b6378":"## My upgrade - in FE","12635107":"<a class=\"anchor\" id=\"0\"><\/a>\n# [University of Liverpool - Ion Switching](https:\/\/www.kaggle.com\/c\/liverpool-ion-switching)","567a0e5e":"### Commit now","b75c845c":"* with my new shifts_2 (+1 \/ -1)\n* EPOCHS = 5\n* SPLITS = 6"}}