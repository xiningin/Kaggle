{"cell_type":{"754f4ac2":"code","977ee1c9":"code","ae142be2":"code","0f5595c0":"code","684f002c":"code","6c8467a3":"code","66a4927a":"code","06595b82":"code","b35bef5f":"code","4e2e0aff":"code","f9ad823e":"code","9651294b":"code","7dd65005":"code","9132fc29":"markdown","11e4e321":"markdown","a073d061":"markdown","110c6727":"markdown","0e0d01f1":"markdown"},"source":{"754f4ac2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom numpy import NaN\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","977ee1c9":"book_df = pd.read_csv('..\/input\/book-recommendation-dataset\/Books.csv')\nratings_df = pd.read_csv('..\/input\/book-recommendation-dataset\/Ratings.csv').sample(40000)\nuser_df = pd.read_csv('..\/input\/book-recommendation-dataset\/Users.csv')","ae142be2":"book_df.head(2)","0f5595c0":"ratings_df.sample(2)","684f002c":"user_df.head(2)","6c8467a3":"user_rating_df = ratings_df.merge(user_df, left_on = 'User-ID', right_on = 'User-ID')","66a4927a":"user_rating_df.head(2).fillna(0)","06595b82":"book_mat = user_rating_df.pivot_table(index = 'User-ID', columns = 'ISBN', values = 'Book-Rating').replace({NaN:-1})","b35bef5f":"book_mat","4e2e0aff":"ratings = pd.DataFrame(user_rating_df.groupby('ISBN')['Book-Rating'].mean())\nratings['num_of_ratings'] = pd.DataFrame(user_rating_df.groupby('ISBN')['Book-Rating'].count())\n#ratings.sort_values('num_of_ratings', ascending = False)\nratings.merge(book_df[['ISBN','Book-Title']], left_on = 'ISBN', right_on = 'ISBN').sort_values('num_of_ratings', ascending = False)","f9ad823e":"book_target_user_ratings = book_mat['0316666343']","9651294b":"similar_to_book_target = book_mat.corrwith(book_target_user_ratings)\ncorr_book_target = pd.DataFrame(similar_to_book_target, columns = ['Correlation'])\n#corr_book_target.dropna(inplace = True)\ncorr_book_target = corr_book_target.join(ratings['num_of_ratings']).join(ratings['Book-Rating'])\ncorr_book_target = corr_book_target.merge(book_df[['ISBN','Book-Title']], left_on = 'ISBN', right_on = 'ISBN')","7dd65005":"corr_book_target[corr_book_target['num_of_ratings'] > 10].sort_values('Correlation', ascending = False).head(10)","9132fc29":"# Show Book Recomendation","11e4e321":"# **1. Read file**","a073d061":"# Select target book","110c6727":"# Calculate rating for each Book","0e0d01f1":"# Calculate correlation value between target book to other"}}