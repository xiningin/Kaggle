{"cell_type":{"401d4543":"code","bf9f641c":"code","1c71c7a4":"code","ecc967a5":"code","39560a79":"code","10d29444":"code","b26d2329":"code","ddc0c48e":"code","ae11285c":"code","3eb34a8d":"code","006e58bb":"code","1afba361":"code","6222c6bb":"code","ed25123c":"code","6b78b732":"code","f99f7783":"code","df07c6b4":"code","ee98ff55":"code","e7976c1d":"code","9b9028fe":"code","f65b26e7":"markdown","9a58a789":"markdown","3c069396":"markdown","f9581d82":"markdown","3a5bdb11":"markdown","9d17e2a8":"markdown","8161fa7f":"markdown","e46619b5":"markdown","4a1fb8e4":"markdown","b69a8de0":"markdown","5434df74":"markdown","7fdd0e6a":"markdown","1c2d80d9":"markdown","53928532":"markdown","d73b8e22":"markdown","2b03839c":"markdown","7224dc89":"markdown","f5ee8355":"markdown","1ce865a0":"markdown","fe38b320":"markdown","7dd53562":"markdown","0f8af830":"markdown","7b11d8ad":"markdown"},"source":{"401d4543":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n#seaborn\nimport seaborn as sns\n# matplotlib\nimport matplotlib.pyplot as plt\n# ignore warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nprint(os.listdir(\"..\/input\"))","bf9f641c":"data=pd.read_csv(\"..\/input\/car data.csv\")\ndata.head()","1c71c7a4":"data.info()","ecc967a5":"data.isna().any()","39560a79":"print(data.Fuel_Type.value_counts(),\"\\n\")\nprint(data.Seller_Type.value_counts(),\"\\n\")\nprint(data.Transmission.value_counts())","10d29444":"#Fuel_Type ==> 1 = Petrol , 0 = Diesel , 2 = CNG\n#Seller_Type ==> 1 = Manual , 0 = Automatic \n#Seller_Type ==> 1 = Dealer , 0 = Individual\n\ndata.Fuel_Type.replace(regex={\"Petrol\":\"0\",\"Diesel\":\"1\",\"CNG\":\"2\"},inplace=True)\ndata.Seller_Type.replace(regex={\"Dealer\":\"0\",\"Individual\":\"1\"},inplace=True)\ndata.Transmission.replace(regex={\"Manual\":\"0\",\"Automatic\":\"1\"},inplace=True)\ndata[[\"Fuel_Type\",\"Seller_Type\",\"Transmission\"]]=data[[\"Fuel_Type\",\"Seller_Type\",\"Transmission\"]].astype(int)","b26d2329":"sns.pairplot(data,diag_kind=\"kde\", diag_kws=dict(shade=True, bw=.05, vertical=False))\nplt.show()","ddc0c48e":"from mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure(figsize=(16,9))\nax  = fig.gca(projection = \"3d\")\n\nplot =  ax.scatter(data[\"Year\"],\n           data[\"Present_Price\"],\n           data[\"Kms_Driven\"],\n           linewidth=1,edgecolor =\"k\",\n           c=data[\"Selling_Price\"],s=100,cmap=\"hot\")\n\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Present_Price\")\nax.set_zlabel(\"Kms_Driven\")\n\nlab = fig.colorbar(plot,shrink=.5,aspect=5)\nlab.set_label(\"Selling_Price\",fontsize = 15)\n\nplt.title(\"3D plot for Year, Present price and Kms driven\",color=\"red\")\nplt.show()","ae11285c":"y=data.Selling_Price\nx=data.drop([\"Selling_Price\",\"Car_Name\"],axis=1)","3eb34a8d":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)\nprint(\"x train: \",x_train.shape)\nprint(\"x test: \",x_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)","006e58bb":"from sklearn.metrics import r2_score\nfrom sklearn.model_selection import cross_val_score","1afba361":"cv=5 # CV value\nr_2 = [] # List for r 2 score\nCV = [] # list for CV scores mean\n\n# Main function for models\ndef model(algorithm,x_train_,y_train_,x_test_,y_test_): \n    algorithm.fit(x_train_,y_train_)\n    predicts=algorithm.predict(x_test_)\n    prediction=pd.DataFrame(predicts)\n    R_2=r2_score(y_test_,prediction)\n    cross_val=cross_val_score(algorithm,x_train_,y_train_,cv=cv)\n    \n    # Appending results to Lists \n    r_2.append(R_2)\n    CV.append(cross_val.mean())\n    \n    # Printing results  \n    print(algorithm,\"\\n\") \n    print(\"r_2 score :\",R_2,\"\\n\")\n    print(\"CV scores:\",cross_val,\"\\n\")\n    print(\"CV scores mean:\",cross_val.mean())\n    \n    # Plot for prediction vs originals\n    test_index=y_test_.reset_index()[\"Selling_Price\"]\n    ax=test_index.plot(label=\"originals\",figsize=(12,6),linewidth=2,color=\"r\")\n    ax=prediction[0].plot(label = \"predictions\",figsize=(12,6),linewidth=2,color=\"g\")\n    plt.legend(loc='upper right')\n    plt.title(\"ORIGINALS VS PREDICTIONS\")\n    plt.xlabel(\"index\")\n    plt.ylabel(\"values\")\n    plt.show()","6222c6bb":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nmodel(lr,x_train,y_train,x_test,y_test)","ed25123c":"from sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\n\nalphas = np.logspace(-3,3,num=14) # range for alpha\n\ngrid = GridSearchCV(estimator=Lasso(), param_grid=dict(alpha=alphas))\ngrid.fit(x_train, y_train)\n\nprint(grid.best_score_)\nprint(grid.best_estimator_.alpha)","6b78b732":"ls = Lasso(alpha = grid.best_estimator_.alpha, normalize = True) # applied the best estimator\nmodel(ls,x_train,y_train,x_test,y_test)","f99f7783":"from sklearn.linear_model import Ridge\n\nalphas = np.logspace(-3,3,num=14) # range for alpha\n\ngrid2 = GridSearchCV(estimator=Ridge(), param_grid=dict(alpha=alphas)) \ngrid2.fit(x_train, y_train)\n\nprint(grid2.best_score_)\nprint(grid2.best_estimator_.alpha)","df07c6b4":"ridge = Ridge(alpha = 0.01, normalize = True) # applied the best estimator\nmodel(ridge,x_train,y_train,x_test,y_test)","ee98ff55":"from sklearn.tree import DecisionTreeRegressor\ndtr = DecisionTreeRegressor()\nmodel(dtr,x_train,y_train,x_test,y_test)","e7976c1d":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators = 100, random_state = 42)\nmodel(rf,x_train,y_train,x_test,y_test)","9b9028fe":"Model = [\"LinearRegression\",\"Lasso\",\"Ridge\",\"DecisionTreeRegressor\",\"RandomForestRegressor\"]\nresults=pd.DataFrame({'Model': Model,'R Squared': r_2,'CV score mean': CV})\nresults","f65b26e7":"Lets see the results together in dataframe","9a58a789":"**5. Random Forest Regressor**","3c069396":"**4. Decision Tree Regressor**","f9581d82":"**1. Linear Regression**","3a5bdb11":"**1. Introduction: (#1)**\n\n**2. Loading Data and Explanation of Features: (#2)**\n\n**3. Exploratory Data Analysis (EDA): (#3)**\n\n**4. Applying Regression Models: (#4)**\n\n**5. CONCLUSION: (#5)**","9d17e2a8":"**3. Ridge**","8161fa7f":"<a id=\"5\"><\/a> \n**5. CONCLUSION**","e46619b5":"Looks like our data is complete one. There is no NaN values and also feature's types are proper.","4a1fb8e4":"<a id=\"4\"><\/a> \n**4. Applying Regression Models**","b69a8de0":"I am going to chance these object values to numerical values to make it proper for regression models.","5434df74":"<a id=\"3\"><\/a> \n**3. Exploratory Data Analysis (EDA)**","7fdd0e6a":"<a id=\"2\"><\/a> \n**2. Loading Data and Explanation of Features**","1c2d80d9":"Spliting data to train and test sizes.","53928532":"If we 3D plot critic features that effect selling price, we can see most of the cars accumulate around after 2010 year, low present price and low kms driven. Now its time to apply regression models.","d73b8e22":"Secondly we are going to load libraries that we need calculate scores fo regression models. Than apply function which fit the models, get the scores and plot our predictions .","2b03839c":"Lets see value counts of the features which are the object type.","7224dc89":"Before applying Lasso model, I am going to assign a alpha range that effect model and choose the best estimator for model.   ","f5ee8355":"Firstly lets separate Selling price from the data and drop unnecessary features.","1ce865a0":"Before applying regression models, lets look at the features and also relationship with each other by visually.","fe38b320":"**2. Lasso **","7dd53562":"We are going to do same operation for Ridge","0f8af830":"<a id=\"1\"><\/a> \n**1. Introduction**\n\nHello everyone!  In this kernel we will be working on Vehicle dataset from cardekho Dataset . This dataset contains information about used cars listed on www.cardekho.com. We are going to use for finding predictions of price with the use of regression models.\n\nThe datasets consist of several  independent variables  include:\n\n* Car_Name\n* Year\n* Selling_Price\n* Present_Price\n* Kms_Driven\n* Fuel_Type\n* Seller_Type\n* Transmission\n* Owner\n\nWe are going to use some of the variables which we need for regression models.","7b11d8ad":"We applied couple of regression models on dataset.  From the final dataframe, it gives opinion  about the score of models  and also the  plots help us to understand which models is more succesful.\n\n* If you like it, thank you for you upvotes.\n* If you have any question, I will happy to hear it\n\nAlso look for https:\/\/www.kaggle.com\/kanncaa1\/machine-learning-tutorial-for-beginners for Machine Learning"}}