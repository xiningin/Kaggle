{"cell_type":{"1125b54f":"code","d6ec14ae":"code","84dad690":"code","ba0ada18":"code","a2a20be7":"code","67092693":"code","4399c29f":"code","ce678d99":"code","4212a635":"code","d3360458":"code","2d76d53f":"code","335937dd":"code","e91d7a2d":"code","3f9177e0":"code","56acc284":"code","bafc23f8":"code","e371d7b2":"code","f4722cec":"code","e23c0731":"code","75120530":"code","3b46ff21":"code","09b92883":"code","8ac1e564":"code","a8b1c2a7":"code","74a779bd":"code","6878b604":"code","22a8943a":"code","f0e8986b":"markdown","f3d00e58":"markdown","2d963273":"markdown","3ebe0d59":"markdown","e5877e5a":"markdown","a81c875d":"markdown","39b6d902":"markdown","999b6e6f":"markdown","f524d0a2":"markdown","39edac6c":"markdown","318a16e7":"markdown"},"source":{"1125b54f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.options.mode.chained_assignment = None  # default='warn'\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d6ec14ae":"from sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn import svm\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.preprocessing import LabelEncoder\nimport re","84dad690":"train_data = pd.read_csv(\"\/kaggle\/input\/mini-flight-delay-prediction\/flight_delays_train.csv\")\ntrain_data.head()","ba0ada18":"train_data.info()","a2a20be7":"test = pd.read_csv(\"\/kaggle\/input\/mini-flight-delay-prediction\/flight_delays_test.csv\")\ntest.head()","67092693":"test.info()","4399c29f":"def monthDay2number(text):\n    text = int(re.sub(r\"c-\", \"\", text))\n    return text","ce678d99":"train_data.Month = train_data.Month.map(lambda month: monthDay2number(month))\ntrain_data.DayofMonth = train_data.DayofMonth.map(lambda day: monthDay2number(day))\ntrain_data.DayOfWeek = train_data.DayOfWeek.map(lambda day: monthDay2number(day))\ntrain_data.drop(columns=['Origin','Dest'], inplace=True)\n\ntrain_data.dep_delayed_15min = train_data.dep_delayed_15min.map(lambda label: 0 if label=='Y' else 1)","4212a635":"test.Month = test.Month.map(lambda month: monthDay2number(month))\ntest.DayofMonth = test.DayofMonth.map(lambda day: monthDay2number(day))\ntest.DayOfWeek = test.DayOfWeek.map(lambda day: monthDay2number(day))\ntest.drop(columns=['Origin','Dest'], inplace=True)","d3360458":"train_data = pd.get_dummies(train_data)\ntest = pd.get_dummies(test)\n\nfor column in train_data.columns:\n    if not column in test.columns:\n        test[column] = pd.DataFrame(0, index=np.arange(len(test)), columns=[column])\n\nfor column in test.columns:\n    if not column in train_data.columns:\n        train_data[column] = pd.DataFrame(0, index=np.arange(len(train_data)), columns=[column])","2d76d53f":"train, test = train_test_split(train_data)","335937dd":"labels_train = train.dep_delayed_15min\ntrain.drop(columns=\"dep_delayed_15min\", inplace=True)\n\nlabels_test = test.dep_delayed_15min\ntest.drop(columns=\"dep_delayed_15min\", inplace=True)","e91d7a2d":"clf_svm = svm.SVC(class_weight='balanced')\nclf_svm.fit(train, labels_train)","3f9177e0":"labels_predicted = clf_svm.predict(test)\nprint('F1-score: ', metrics.f1_score(labels_test, labels_predicted))","56acc284":"metrics.confusion_matrix(labels_test, labels_predicted)","bafc23f8":"clf_randomforest = RandomForestClassifier(n_estimators=100, class_weight='balanced')\nclf_randomforest.fit(train, labels_train)","e371d7b2":"labels_predicted = clf_randomforest.predict(test)\nprint('F1-score: ', metrics.f1_score(labels_test, labels_predicted))","f4722cec":"metrics.confusion_matrix(labels_test, labels_predicted)","e23c0731":"clf_boosting =  GradientBoostingClassifier()\nclf_boosting.fit(train, labels_train)","75120530":"labels_predicted = clf_boosting.predict(test)\nprint('F1-score: ', metrics.f1_score(labels_test, labels_predicted))","3b46ff21":"metrics.confusion_matrix(labels_test, labels_predicted)","09b92883":"clf_mlp = MLPClassifier(hidden_layer_sizes=(500, 20), max_iter=3000)\nclf_mlp.fit(train, labels_train)","8ac1e564":"labels_predicted = clf_mlp.predict(test)\nprint('F1-score: ', metrics.f1_score(labels_test, labels_predicted))","a8b1c2a7":"metrics.confusion_matrix(labels_test, labels_predicted)","74a779bd":"labels_train_data = train_data.dep_delayed_15min\ntrain_data.drop(columns=\"dep_delayed_15min\", inplace=True)\n\nclf_boosting.fit(train_data, labels_train_data)","6878b604":"labels_predicted = clf_boosting.predict(test)","22a8943a":"labels_submission = pd.Series(labels_predicted)\nlabels_submission = labels_submission.map(lambda label: 'Y' if label==0 else 'N')\nlabels_submission.to_csv('submission.csv', index=False)","f0e8986b":"# Classifica\u00e7\u00e3o","f3d00e58":"# Escolha do Classificador","2d963273":"O treinamento ser\u00e1 refeito, agora utilizando o conjunto inteiro para treinar o modelo.","3ebe0d59":"O classificador que obteve o maior f1-score foi Gradiente Boosting classifier. Assim, ele ser\u00e1 usado para predizer os r\u00f3tulos do conjunto de teste.","e5877e5a":"# Bibliotecas Necess\u00e1rias","a81c875d":"### SVM","39b6d902":"###  Gradient Boosting","999b6e6f":"# Pr\u00e9 processamento dos dados","f524d0a2":"### Random Forest","39edac6c":"# Leitura dos Dados","318a16e7":"### MLP"}}