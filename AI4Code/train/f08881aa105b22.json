{"cell_type":{"520a9f57":"code","a0369df3":"code","3e265c2f":"code","43fa7912":"code","c1bc95fc":"code","8c696517":"code","d7f16e9c":"code","cb2f88b9":"code","4d6f0fa4":"code","5f47db83":"code","0679845a":"code","dcd47ffe":"code","efc0d43d":"code","d58c5458":"code","0510ac1a":"code","0847deba":"code","31bd4678":"code","068c11bd":"code","e97193f0":"code","cc42d81e":"code","b1fcda54":"markdown","cfb376fe":"markdown"},"source":{"520a9f57":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a0369df3":"#importing the libraries\nimport tensorflow as tf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam, SGD\nimport seaborn as sns","3e265c2f":"#importing the dataset\ndftrain = pd.read_csv('..\/input\/titanic\/train.csv')\ndftest = pd.read_csv('..\/input\/titanic\/test.csv')","43fa7912":"dftrain.head()","c1bc95fc":"#Background\nsns.scatterplot(x=dftrain.index,y=dftrain['Pclass'],hue=dftrain['Survived'],palette=[\"C0\",\"C1\"])","8c696517":"#gender bias\nsns.countplot(dftrain['Sex'],hue=dftrain['Survived'])","d7f16e9c":"#location vs survival\nsns.scatterplot(x=dftrain.index,y=dftrain['Embarked'],hue=dftrain['Survived'])","cb2f88b9":"#age vs survival\nsns.scatterplot(x=dftrain.index,y=dftrain['Age'],hue=dftrain['Survived'])","4d6f0fa4":"#removing the unnecesary stuff\ndftrain.drop(['PassengerId','Ticket','Cabin','Name'],axis=1,inplace=True)\npassengerid = dftest['PassengerId']\ndftest.drop(['PassengerId','Ticket','Cabin','Name'],axis=1,inplace=True)","5f47db83":"#dummy variable encoding\nsex = pd.get_dummies(dftrain['Sex'],drop_first=True)\npclass = pd.get_dummies(dftrain['Pclass'],drop_first=True)\nembarked = pd.get_dummies(dftrain['Embarked'],drop_first=True)\n\n#test set\nsextest = pd.get_dummies(dftest['Sex'],drop_first=True)\npclasstest = pd.get_dummies(dftest['Pclass'],drop_first=True)\nembarkedtest = pd.get_dummies(dftest['Embarked'],drop_first=True)","0679845a":"#dropping categorical data\ndftrain.drop(['Sex','Pclass','Embarked'],axis=1,inplace=True)\n#test set\ndftest.drop(['Sex','Pclass','Embarked'],axis=1,inplace=True)","dcd47ffe":"#concatenating dummies\ndftrain = pd.concat([dftrain,sex,pclass,embarked],axis=1)\n#test set\ndftest = pd.concat([dftest,sextest,pclasstest,embarkedtest],axis=1)","efc0d43d":"#removing nan\ndftrain.dropna(inplace=True,axis=0)\n#dftest.dropna(inplace=True,axis=0)","d58c5458":"#defining x and y array\nx_train = np.array(dftrain.drop(['Survived'],axis=1))\ny_train = np.array(dftrain['Survived'])\nprint(\"shape of x: \",x_train.shape)\nprint(\"shape of y: \",y_train.shape)\n\n#test data\nx_test = np.array(dftest)","0510ac1a":"#creating a model\ni = Input(shape=(9))\nx = Dense(10,activation='relu')(i)\nx = Dense(1,activation='sigmoid')(x)\nmodel = Model(i,x)","0847deba":"#compiling the model\nmodel.compile(optimizer=Adam(learning_rate=0.0007),loss='binary_crossentropy',metrics=['accuracy'])\ntrain = model.fit(x_train,y_train,epochs=300,shuffle=True)","31bd4678":"#visualing the accuracy\nplt.plot(train.history['accuracy'],label='train acc')\nplt.legend()","068c11bd":"#visualising the loss\nplt.plot(train.history['loss'],label='train loss')\nplt.legend()","e97193f0":"#prediction\ny_pred = model.predict(x_test).round()\nprint(y_pred)","cc42d81e":"for i in range(y_pred.shape[0]):\n    print(passengerid.iloc[i],y_pred[i])","b1fcda54":"# Machine Learning Starts Here","cfb376fe":"# Exploratary Data Analysis"}}