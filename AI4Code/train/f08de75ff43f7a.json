{"cell_type":{"47426449":"code","b811038c":"code","57d1be61":"code","a3cca5d5":"code","2deff8e8":"code","06d58977":"code","bbe75315":"code","6dbe14e2":"code","ee6a3096":"code","6fead3a7":"code","e85e0c07":"code","c33bdb14":"markdown","cb2fe50e":"markdown","d06fa237":"markdown","712db6a2":"markdown","f6bea2b4":"markdown","e0ded4d7":"markdown","e7134cf0":"markdown"},"source":{"47426449":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nfrom math import floor\nfrom IPython.display import clear_output\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b811038c":"container_df = pd.read_csv('\/kaggle\/input\/market-basket-id-ndsc-2020\/association_order.csv')\nrules_df = pd.read_csv('\/kaggle\/input\/market-basket-id-ndsc-2020\/rules.csv')","57d1be61":"container_df.head()","a3cca5d5":"rules_df.head()","2deff8e8":"container_df.info()","06d58977":"rules_df.info()","bbe75315":"grouped_container = container_df.groupby('orderid')['itemid'].apply(list)\ngrouped_df = pd.DataFrame(grouped_container)\ngrouped_df.head()","6dbe14e2":"def get_total_one_product(df, product_a) :\n    return(len(df[df['itemid'].apply(lambda x : product_a in x)]))\n    \ndef get_total_two_product(df, product_a, product_b) :\n    return(len(df[df['itemid'].apply(lambda x : (product_a in x) & (product_b in x))]))\n\ndef get_total_three_product(df, product_a, product_b, product_c) :\n    return(len(df[df['itemid'].apply(lambda x : (product_a in x) & (product_b in x) & (product_c in x))]))\n\ndef process_data(idx, data_len) :\n    clear_output(wait = True)\n    print(str(idx), '\/', str(data_len), '(', str(round(((idx \/ data_len) * 100), 2)) + '% )')\n\ndef get_confidence(item_a, item_b) :\n    output = 0\n    try :\n        output = floor((item_a \/ item_b) * 1000)\n        return output\n    except : \n        return output","ee6a3096":"prediction = []\nfor idx, rules in enumerate(rules_df['rule']) :\n    rule_checker = ''.join([i for i in rules if not i.isdigit()])\n    result = 0\n    if rule_checker == '>' :\n        product_a = int(rules.split('>')[0])\n        product_b = int(rules.split('>')[1])\n        \n        total_a_b = get_total_two_product(grouped_df, product_a, product_b)\n        total_a = get_total_one_product(grouped_df, product_a)\n        result = get_confidence(total_a_b, total_a)\n        \n    elif rule_checker == '>&' :\n        product_a = int(rules.split('>')[0])\n        product_b = int((rules.split('>')[1]).split('&')[0])\n        product_c = int(rules.split('&')[1])\n        \n        total_a_b_c = get_total_three_product(grouped_df, product_a, product_b, product_c)\n        total_a = get_total_one_product(grouped_df, product_a)\n        result = get_confidence(total_a_b_c, total_a)\n        \n    elif rule_checker == '&>' :\n        product_a = int(rules.split('&')[0])\n        product_b = int((rules.split('>')[0]).split('&')[1])\n        product_c = int(rules.split('>')[1])\n        \n        total_a_b_c = get_total_three_product(grouped_df, product_a, product_b, product_c)\n        total_a_b = get_total_two_product(grouped_df, product_a, product_b)\n        result = get_confidence(total_a_b_c, total_a_b)\n        \n    prediction.append(result)\n    process_data(idx + 1, len(rules_df))","6fead3a7":"rules_df['confidence'] = prediction\nrules_df.head()","e85e0c07":"rules_df.to_csv('output.csv', index=False)","c33bdb14":"# Generating Prediction","cb2fe50e":"# Importing Dataset","d06fa237":"# Exporting","712db6a2":"# Finalizing","f6bea2b4":"# Function Declaration","e0ded4d7":"# Grouping Container by Order ID","e7134cf0":"# Dataset Inspection"}}