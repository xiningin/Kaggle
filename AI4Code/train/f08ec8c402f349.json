{"cell_type":{"03fb03f9":"code","89cc4f9b":"code","c989408b":"code","aa0be9f2":"code","fac78344":"code","e33ef080":"code","5e069bca":"code","6e18325c":"code","9829dbcf":"code","14ca28ca":"code","bbdcc903":"code","5e3b97ae":"code","8e516dc7":"code","c7a743ef":"code","11a30231":"code","c6649699":"code","bf6ffc8d":"code","1b8c5fc6":"code","72f836db":"code","60648a72":"code","0c78dc2d":"code","945a8ed6":"code","d6227bb7":"code","de60abca":"code","3819bb92":"code","13ec01da":"code","5d4b5d55":"markdown","294e8b80":"markdown","b698d81d":"markdown","91d43a46":"markdown","6bd290d7":"markdown","a4520587":"markdown","bfa743fa":"markdown","8b8a9052":"markdown","2fab4db7":"markdown","4df5543f":"markdown","b290f442":"markdown","11df663a":"markdown","14531832":"markdown","69d406d4":"markdown"},"source":{"03fb03f9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\nfrom keras.preprocessing.image import load_img, save_img, img_to_array\nimport matplotlib.pyplot as plt\nfrom keras.models import Model,Sequential\nfrom keras.layers import Input,Conv2D,MaxPooling2D,UpSampling2D,Dense,Dropout,Flatten\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","89cc4f9b":"\ndef preprocess_image(image_path):\n    \n    from keras.applications import vgg19\n    img = load_img(image_path)\n    new_width  = 100\n    new_height = 100\n    img = img.resize((new_width, new_height))\n    img = img_to_array(img)\n    img=img.astype(int)\n    return img\n\n","c989408b":"Path = '..\/input\/images\/images\/'\nplt.figure()\nplt.title(\"First Image\",fontsize=20)\nimg1 = load_img(Path+'Paul_Gauguin\/Paul_Gauguin_3.jpg')\nnew_width  = 200\nnew_height = 200\nimg1 = img1.resize((new_width, new_height))\nimg1 = img_to_array(img1)\nplt.imshow(img1.astype(int))\n","aa0be9f2":"all_paint=[]\nartists=os.listdir(Path)\nfor artist in artists:\n    paint=os.listdir(Path+artist)\n    for paints in paint:\n        all_paint.append(preprocess_image(Path+artist+'\/'+paints))\n\nlen(all_paint)","fac78344":"all_paint=np.stack(all_paint)\nall_paint=all_paint.astype('float32')\/255\nall_paint.shape","e33ef080":"noise_factor=0.5\nx_train_noisy=all_paint+noise_factor*np.random.normal(loc=0.0,scale=1.0,size=all_paint.shape)\nx_train_noisy=np.clip(x_train_noisy,0.,1.)","5e069bca":"n=17\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(all_paint[i])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(x_train_noisy[i])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n\n","6e18325c":"x_test_noisy=x_train_noisy[round(len(x_train_noisy)*80\/100):,:,:,:]\nx_test=all_paint[round(len(all_paint)*80\/100):,:,:,:]\nx_train_noisy=x_train_noisy[:round(len(x_train_noisy)*80\/100),:,:,:]\nall_paint=all_paint[:round(len(all_paint)*80\/100),:,:,:]","9829dbcf":"model=Sequential()\n\nmodel.add(Conv2D(32,(3,3),activation='relu',padding='same',input_shape=(100,100,3)))\nmodel.add(MaxPooling2D((2,2),padding='same'))\nmodel.add(Conv2D(32,(3,3),activation='relu',padding='same'))\nmodel.add(MaxPooling2D((2,2),padding='same'))\n\n\nmodel.add(Conv2D(32,(3,3),activation='relu',padding='same'))\nmodel.add(UpSampling2D((2,2)))\nmodel.add(Conv2D(32,(3,3),activation='relu',padding='same'))\nmodel.add(UpSampling2D((2,2)))\nmodel.add(Conv2D(3,(3,3),activation='sigmoid',padding='same'))\n","14ca28ca":"model.compile(optimizer='adam',loss='binary_crossentropy')\nmodel.fit(x_train_noisy,all_paint,epochs=30,batch_size=64,shuffle=True,validation_data=(x_test_noisy,x_test))\n","bbdcc903":"essai=model.predict(x_test_noisy)\nn=17\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(x_test_noisy[i])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n\n\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(essai[i])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(x_test[i])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n\n\n\n","5e3b97ae":"x_train_noisy=all_paint.copy()\nx_test_noisy=x_test.copy()","8e516dc7":"size=15\nfor element in x_train_noisy:\n    number=np.random.randint(low=1, high=85, size=1)\n    number=number[0]\n    element[number:number+size,number:number+size,:]=1.0\nfor element in x_test_noisy:\n    number=np.random.randint(low=1, high=85, size=1)\n    number=number[0]\n    element[number:number+size,number:number+size,:]=1.0","c7a743ef":"\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(all_paint[i])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(x_train_noisy[i])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","11a30231":"model_blank=Sequential()\n\nmodel_blank.add(Conv2D(32,(3,3),activation='relu',padding='same',input_shape=(100,100,3)))\nmodel_blank.add(MaxPooling2D((2,2),padding='same'))\nmodel_blank.add(Conv2D(32,(3,3),activation='relu',padding='same'))\nmodel_blank.add(MaxPooling2D((2,2),padding='same'))\n\n\nmodel_blank.add(Conv2D(32,(3,3),activation='relu',padding='same'))\nmodel_blank.add(UpSampling2D((2,2)))\nmodel_blank.add(Conv2D(32,(3,3),activation='relu',padding='same'))\nmodel_blank.add(UpSampling2D((2,2)))\nmodel_blank.add(Conv2D(3,(3,3),activation='sigmoid',padding='same'))\n\nmodel_blank.compile(optimizer='adam',loss='binary_crossentropy')\nmodel_blank.fit(x_train_noisy,all_paint,epochs=30,batch_size=64,shuffle=True,validation_data=(x_test_noisy,x_test))","c6649699":"essai=model_blank.predict(x_test_noisy)\nn=17\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(x_test_noisy[i+2])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n\n\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(essai[i+2])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(x_test[i+2])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","bf6ffc8d":"x_train_noisy=all_paint.copy()\nx_test_noisy=x_test.copy()","1b8c5fc6":"size=4\nfor element in x_train_noisy:\n    number=np.random.randint(low=1, high=100, size=1)\n    number=number[0]\n    element[number:number+size,:,:]=1.0\nfor element in x_test_noisy:\n    number=np.random.randint(low=1, high=100, size=1)\n    number=number[0]\n    element[number:number+size,:,:]=1.0","72f836db":"plt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(all_paint[i])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(x_train_noisy[i])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","60648a72":"model_line=Sequential()\n\nmodel_line.add(Conv2D(32,(3,3),activation='relu',padding='same',input_shape=(100,100,3)))\nmodel_line.add(MaxPooling2D((2,2),padding='same'))\nmodel_line.add(Conv2D(32,(3,3),activation='relu',padding='same'))\nmodel_line.add(MaxPooling2D((2,2),padding='same'))\n\n\nmodel_line.add(Conv2D(32,(3,3),activation='relu',padding='same'))\nmodel_line.add(UpSampling2D((2,2)))\nmodel_line.add(Conv2D(32,(3,3),activation='relu',padding='same'))\nmodel_line.add(UpSampling2D((2,2)))\nmodel_line.add(Conv2D(3,(3,3),activation='sigmoid',padding='same'))\n\nmodel_line.compile(optimizer='adam',loss='binary_crossentropy')\nmodel_line.fit(x_train_noisy,all_paint,epochs=30,batch_size=64,shuffle=True,validation_data=(x_test_noisy,x_test))","0c78dc2d":"essai=model_line.predict(x_test_noisy)\nn=17\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(x_test_noisy[i+2])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n\n\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(essai[i+2])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(x_test[i+2])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","945a8ed6":"x_train_noisy=all_paint.copy()\nx_test_noisy=x_test.copy()","d6227bb7":"size=15\nfor element in x_train_noisy:\n    number=np.random.randint(low=1, high=85, size=1)\n    number=number[0]\n    element[number:number+size,number:number+size,:]=0.0\nfor element in x_test_noisy:\n    number=np.random.randint(low=1, high=85, size=1)\n    number=number[0]\n    element[number:number+size,number:number+size,:]=0.0","de60abca":"model_black=Sequential()\n\nmodel_black.add(Conv2D(32,(3,3),activation='relu',padding='same',input_shape=(100,100,3)))\nmodel_black.add(MaxPooling2D((2,2),padding='same'))\nmodel_black.add(Conv2D(32,(3,3),activation='relu',padding='same'))\nmodel_black.add(MaxPooling2D((2,2),padding='same'))\n\n\nmodel_black.add(Conv2D(32,(3,3),activation='relu',padding='same'))\nmodel_black.add(UpSampling2D((2,2)))\nmodel_black.add(Conv2D(32,(3,3),activation='relu',padding='same'))\nmodel_black.add(UpSampling2D((2,2)))\nmodel_black.add(Conv2D(3,(3,3),activation='sigmoid',padding='same'))\n\nmodel_black.compile(optimizer='adam',loss='binary_crossentropy')\nmodel_black.fit(x_train_noisy,all_paint,epochs=30,batch_size=64,shuffle=True,validation_data=(x_test_noisy,x_test))","3819bb92":"essai=model_black.predict(x_test_noisy)\nn=17\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(x_test_noisy[i+2])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n\n\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(essai[i+2])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(x_test[i+2])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","13ec01da":"essai=model_blank.predict(x_test_noisy)\nn=17\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(x_test_noisy[i+2])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n\n\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(essai[i+2])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n\nplt.figure(figsize=(100,4))\nfor i in range (12,n):\n    i=i+1\n    ax=plt.subplot(1,n,i)\n    plt.imshow(x_test[i+2])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","5d4b5d55":"**Art denoising\/recreate**","294e8b80":"**LOAD AND PREPROCESS DATA**","b698d81d":"**Just under**:\n* First Line you have the real Image \n* Second you have the noisy one.","91d43a46":"4.**TEST Black noise**","6bd290d7":"4.**Conclusion**","a4520587":"1.**Random Noise and First Reconstruction**","bfa743fa":"I created this kernel in order to try **autoencoder** for denoising\/recreate technique. **I will add differents noises to  pictures and i will try to recreate it**. I think this type of technique can be interresting for art restorer. the kernel will focus on 3 differents types of noises:\n\n1. **A random noise on the pixel**\n2. **A white square **\n3. **A white line**\n\n**All the code is provide with visual result!**\nMaybe other type of noise or technique will comme after. A GAN may be better but i don't underestimate simple technique when their result can be great! I wanted to try later with a higher resolution to see if this type of technique is abble to the same as now. \n\nA little** UPVOTE** is welcome **if you like the kernel**.\n\nEdit:\nI add a last part:\n4. **Test with black noise**","8b8a9052":"I want to try if it changes when i change noises value from white to black for instance. ","2fab4db7":"It seems to work well maybe better than with white (just a my feeling). \ni will try a last experience, use the black noise images with the white classifier. Let see what append!","4df5543f":"The autoencoder decrease the resolution of the picture but is abble to rebuilt it. I think the capacity of this model is interessting, maybe with more sample and a higher resolution it can work better!\nHope you like this kernel, i will maybe continue later!","b290f442":"3.**LINE NOISE**","11df663a":"the transfert don't work maybe with a train containing two color at the same time. with two color maybe we can reconstruct from any!","14531832":"2.**SQUARE NOISE**","69d406d4":"* **First line** you have the **input of th Network**\n* **Second** you have the **output**\n* And **third** the **real picture**"}}