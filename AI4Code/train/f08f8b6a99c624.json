{"cell_type":{"c9504cf4":"code","cfb02ae6":"code","d61064cf":"code","5745c6c9":"code","ece5e00a":"code","cba97ae3":"code","10be96b4":"code","4d0aa7d2":"code","e2ce2e8e":"code","769ff111":"code","bb5ed571":"code","36083707":"code","e155fabe":"code","1e229272":"code","7b0d4b96":"code","41e3f528":"code","eaff0a7e":"code","0bca6aaa":"code","98c466fa":"code","bccd908d":"markdown","0ed75a8a":"markdown","79a90f05":"markdown","16832bab":"markdown"},"source":{"c9504cf4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cfb02ae6":"import glob\nimport cv2\nimport sklearn\nimport tqdm\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nos.chdir('\/kaggle\/input')","d61064cf":"# Deskewing images\ndef deskew(img):\n    m = cv2.moments(img)\n    SZ=28 # Size of the image\n    if abs(m['mu02']) < 1e-2: \n        return img.copy()\n    skew = m['mu11']\/m['mu02']\n    M = np.float32([[1, skew, -0.5*SZ*skew], [0, 1, 0]])\n    img = cv2.warpAffine(img, M, (SZ, SZ), flags=cv2.WARP_INVERSE_MAP | cv2.INTER_LINEAR)\n    return img","5745c6c9":"# Test \"deskew\" function on a Sample Image\nskew_img=cv2.imread(\"mnistasjpg\/testSet\/testSet\/img_10001.jpg\",0)\ndeskew_img=deskew(skew_img)\nfig=plt.figure(figsize=(8,8))\ncolumns=1\nrows=2\nfig.add_subplot(columns, rows, 1)\nplt.imshow(skew_img,cmap='gray')\nplt.title(\"Skewed Image\")\nfig.add_subplot(columns, rows, 2)\nplt.imshow(deskew_img,cmap='gray')\nplt.title(\"De-Skewed Image\")\nplt.show()","ece5e00a":"# Computer HOG descriptor for all the images.\ndef HistOfGrad(img):\n    img=deskew(img)\n    winSize = (28,28)\n    blockSize = (14,14)\n    blockStride = (7,7)\n    cellSize = (14,14)\n    nbins = 9\n    derivAperture = 1\n    winSigma = -1.\n    histogramNormType = 0\n    L2HysThreshold = 0.2\n    gammaCorrection = 1\n    nlevels = 64\n    signedGradients = True\n    hog = cv2.HOGDescriptor(winSize,blockSize,blockStride,\n                            cellSize,nbins,derivAperture,winSigma,\n                            histogramNormType,L2HysThreshold,\n                            gammaCorrection,nlevels, signedGradients)\n    descriptor = hog.compute(img)\n    return descriptor","cba97ae3":"# Test the model on 12 random test images\ndef test_on_random_images(model=None):\n    testing_files=glob.glob('mnistasjpg\/testSet\/testSet\/*.jpg')\n    test_images=random.choices(testing_files,k=12)\n    fig=plt.figure(figsize=(15,15))\n    columns=3\n    rows=4\n    for i in range(len(test_images)):\n        img=cv2.imread(test_images[i],0)\n        fig.add_subplot(columns, rows, i + 1)\n        if model:\n            desc=HistOfGrad(img)\n            desc=np.array(desc)\n            desc=np.resize(desc,(desc.shape[1],desc.shape[0]))\n            pred=model.predict(desc)\n            text=\"The Predicted Number is: \\n\"+ str(pred[0])\n        else:\n            text=\"\"\n        img=cv2.resize(img,(224,224)) # Resizing for displaying\n        plt.text(100,-10, text, size=12, ha=\"center\")\n        plt.imshow(img,cmap='gray')\n    plt.show()","10be96b4":"# Test the \"test_on_random_images\" function\n# Running the function each time gives a different set of images\ntest_on_random_images()","4d0aa7d2":"folders=glob.glob('mnistasjpg\/trainingSet\/trainingSet\/*')\nX=[]\ny=[]\ncount=0\nfor i in tqdm.tqdm(folders):\n    count=int(os.path.basename(i))\n    images=glob.glob(i+\"\/*.jpg\")\n    for j in images:\n        image=cv2.imread(j,0)\n        desc=HistOfGrad(image)\n        X.append(desc)\n        y.append(count)\nassert len(X)==len(y)","e2ce2e8e":"# Visualizing Number of Labels\nplt.figure(figsize=(10,10))\nsns.countplot(y)","769ff111":"# Importing Required Library\nfrom sklearn import datasets \nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.model_selection import train_test_split","bb5ed571":"# Train and Test Splits\nX=np.array(X)\ny=np.array(y)\nX=np.reshape(X,(X.shape[0],X.shape[1]))\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0) ","36083707":"# Support Vector Machine\nfrom sklearn.svm import SVC\ndef SVM(X_train, X_test, y_train, y_test):\n    svm = SVC(kernel = 'poly', C = 1).fit(X_train, y_train)\n    svm_predictions = svm.predict(X_test)\n    accuracy = svm.score(X_test, y_test)\n    cm = confusion_matrix(y_test, svm_predictions)\n    print(accuracy)\n    print(cm)\n    return svm","e155fabe":"model=SVM(X_train, X_test, y_train, y_test)\ntest_on_random_images(model)","1e229272":"# K-Nearest Neighbours\nfrom sklearn.neighbors import KNeighborsClassifier \ndef KNN(X_train, X_test, y_train, y_test):\n    knn = KNeighborsClassifier(n_neighbors = 7).fit(X_train, y_train)\n    accuracy = knn.score(X_test, y_test)\n    knn_predictions=knn.predict(X_test)\n    cm=confusion_matrix(knn_predictions,y_test)\n    print(accuracy)\n    print(cm)\n    return knn","7b0d4b96":"model=KNN(X_train, X_test, y_train, y_test)\ntest_on_random_images(model)","41e3f528":"# Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndef DecisionTree(X_train, X_test, y_train, y_test):\n    dtree = DecisionTreeClassifier(max_depth = 25).fit(X_train, y_train)\n    dtree_predictions=dtree.predict(X_test)\n    accuracy=dtree.score(X_test,y_test)\n    cm=confusion_matrix(y_test,dtree_predictions)\n    print(accuracy)\n    print(cm)\n    return dtree","eaff0a7e":"model=DecisionTree(X_train, X_test, y_train, y_test)\ntest_on_random_images(model)","0bca6aaa":"# Neural Network (Multi Layer Perceptron)\nfrom sklearn.neural_network import MLPClassifier\ndef NeuralNetwork(X_train, X_test, y_train, y_test):\n    nn = MLPClassifier(random_state=1, max_iter=300, learning_rate='adaptive').fit(X_train, y_train)\n    accuracy = nn.score(X_test, y_test)\n    nn_predictions = nn.predict(X_test)\n    cm=confusion_matrix(nn_predictions,y_test)\n    print(accuracy)\n    print(cm)\n    return nn","98c466fa":"model=NeuralNetwork(X_train, X_test, y_train, y_test)\ntest_on_random_images(model)","bccd908d":"**Deskew Images**<br><br>\nDeskew Images to correct the slanted handwritings.<br>\nThis is helps us to reduce the noise created due to difference in handwriting patterns of each person.<br>","0ed75a8a":"# MNIST Classification using HOG and ML Models\n\nName: Vijay Vignesh P\n\nLinkedIn: https:\/\/www.linkedin.com\/in\/vijay-vignesh-0002\/\n\nGitHub: https:\/\/github.com\/VijayVignesh1\n\nEmail: vijayvigneshp02@gmail.com\n\n<b>**Please Upvote if you like it**<\/b>","79a90f05":"**Histogram of Gradients**<br>\n* Compute HOG Descriptor for each deskewed image. <br>\n* Each block is of size (14,14)<br>\n* Gradient magnitude and angles are computed for each block.<br>\n* The angles are split into 9 buckets\/bins and each gradient in the cell is placed in one of the boxes. <br>\n* The bins are then normalized. <br>","16832bab":"# Training the Models\nAccuracy and Confusion Matrix of various ML models along with test image predictions. <br>\n1. K-Nearest Neighbours <br>\n2. Support Vector Machine <br>\n3. Decision Tree <br>\n4. Neural Network <br>"}}