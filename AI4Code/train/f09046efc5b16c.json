{"cell_type":{"81c83840":"code","49442677":"code","bbc4bc1e":"code","d6d7260d":"code","06a12d30":"code","47463cae":"code","0f845135":"code","c88fef6e":"code","d07cb5ff":"code","f3d110dc":"code","65d1ef64":"code","11a147de":"code","a97bc5f1":"code","0f885305":"code","6ac581ff":"code","f715897f":"code","f2533eb0":"code","3f768101":"code","848ca92c":"code","a3671dfd":"code","26dcae79":"code","1650eac8":"code","863e66cf":"code","4110dff4":"code","19d9a670":"code","e6243e39":"markdown","729a7c1b":"markdown","92df5336":"markdown","dcc6fc32":"markdown","10d71deb":"markdown","cc0d74f3":"markdown","8f847608":"markdown","ee407006":"markdown","572301c1":"markdown","f7409a5c":"markdown","a2a39e08":"markdown","5c26d39d":"markdown","1993e018":"markdown","6cabe000":"markdown","74122879":"markdown","f00808c4":"markdown","848b5997":"markdown","82bad3bc":"markdown","395a875e":"markdown","b4dc4f72":"markdown","94b753ee":"markdown","bdb198d9":"markdown","bb84be70":"markdown"},"source":{"81c83840":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set(style='ticks', rc={'figure.figsize':(15, 10)})\n\n# machine learning\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix","49442677":"data = pd.read_csv(\"..\/input\/predicting-a-pulsar-star\/pulsar_stars.csv\")","bbc4bc1e":"data.head()","d6d7260d":"def detailed_analysis(df):\n  obs = df.shape[0]\n  types = df.dtypes\n  counts = df.apply(lambda x: x.count())\n  nulls = df.apply(lambda x: x.isnull().sum())\n  distincts = df.apply(lambda x: x.unique().shape[0])\n  missing_ratio = (df.isnull().sum() \/ obs) * 100\n  uniques = df.apply(lambda x: [x.unique()])\n  skewness = df.skew()\n  kurtosis = df.kurt()\n  print('Data shape:', df.shape)\n\n  cols = ['types', 'counts', 'nulls', 'distincts', 'missing ratio', 'uniques', 'skewness', 'kurtosis']\n  details = pd.concat([types, counts, nulls, distincts, missing_ratio, uniques, skewness, kurtosis], axis=1)\n\n  details.columns = cols \n  dtypes = details.types.value_counts()\n  print('________________________\\nData types:\\n', dtypes)\n  print('________________________')\n\n  return details","06a12d30":"details = detailed_analysis(data)\ndetails","47463cae":"data.describe()","0f845135":"data.columns.values","c88fef6e":"data.rename(columns={ ' Mean of the integrated profile':'mean_profile', ' Standard deviation of the integrated profile':'std_profile', \n                     ' Excess kurtosis of the integrated profile':'kurt_profile', ' Skewness of the integrated profile':'skew_profile',\n                     ' Mean of the DM-SNR curve':'mean_dmsnr_curve', ' Standard deviation of the DM-SNR curve':'std_dmsnr_curve',\n                     ' Excess kurtosis of the DM-SNR curve':'kurt_dmsnr_curve', ' Skewness of the DM-SNR curve': 'skew_dmsnr_curve'}, inplace=True)\n\ndata.head()","d07cb5ff":"values = data.target_class.value_counts()\nindexes = values.index\n\nsns.barplot(indexes, values)\n\nplt.xlabel('target_class')\nplt.ylabel('Number of values')","f3d110dc":"sns.pairplot(data=data, vars=data.columns.values[:-1], hue='target_class')","65d1ef64":"sns.jointplot(x='mean_profile', y='std_profile', data=data, kind='kde', height=12)","11a147de":"fig = plt.figure(figsize=(25, 25))\n\nfig1 = fig.add_subplot(421)\nsns.distplot(data.mean_profile, color='r')\n\nfig2 = fig.add_subplot(422)\nsns.distplot(data.std_profile, color='g')\n\nfig3 = fig.add_subplot(423)\nsns.distplot(data.kurt_profile, color='b')\n\nfig4 = fig.add_subplot(424)\nsns.distplot(data.skew_profile, color='y')\n\nfig5 = fig.add_subplot(425)\nsns.distplot(data.mean_dmsnr_curve, color='purple')\n\nfig6 = fig.add_subplot(426)\nsns.distplot(data.std_dmsnr_curve, color='grey')\n\nfig6 = fig.add_subplot(427)\nsns.distplot(data.kurt_dmsnr_curve, color='black')\n\nfig6 = fig.add_subplot(428)\nsns.distplot(data.skew_dmsnr_curve, color='orange')","a97bc5f1":"fig = plt.figure(figsize=(12, 10))\n\ncorrelation = data.corr()\nsns.heatmap(correlation, annot=True, cmap='GnBu_r', center=1)","0f885305":"fig = plt.figure(figsize=(20, 20))\n\nvalues = data.groupby('target_class')[data.columns.values[:-1]].mean()\nfor item in range(len(values.iloc[0])):\n  plot = fig.add_subplot(4, 2, item + 1)\n  sns.barplot(x=data.target_class.value_counts().index, y=values[values.columns.values[item]], palette='Greens')","6ac581ff":"X = data.drop('target_class', axis=1)\ny = data.target_class\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\nprint('Input train shape', X_train.shape)\nprint('Output train shape', y_train.shape)\nprint('Input test shape', X_test.shape)\nprint('Output test shape', y_test.shape)","f715897f":"model = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\n\nprint('Accuracy:', accuracy * 100)","f2533eb0":"sns.heatmap(confusion_matrix(y_test, y_pred), annot=True)","3f768101":"gbc = GradientBoostingClassifier()\ngbc.fit(X_train, y_train)\n\ny_pred = gbc.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\n\nprint('Accuracy:', accuracy * 100)","848ca92c":"sns.heatmap(confusion_matrix(y_test, y_pred), annot=True)","a3671dfd":"model = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\n\nprint('Accuracy:', accuracy * 100)","26dcae79":"sns.heatmap(confusion_matrix(y_test, y_pred), annot=True)","1650eac8":"model = GaussianNB()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\n\nprint('Accuracy:', accuracy * 100)","863e66cf":"sns.heatmap(confusion_matrix(y_test, y_pred), annot=True)","4110dff4":"xgb = XGBClassifier()\nxgb.fit(X_train, y_train)\n\ny_pred = xgb.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\n\nprint('Accuracy:', accuracy * 100)","19d9a670":"sns.heatmap(confusion_matrix(y_test, y_pred), annot=True)","e6243e39":"**Gaussian Naive Bayes**","729a7c1b":"# **Exploratory Data Analysis (EDA)**","92df5336":"**Gradient Boosting Classifier**","dcc6fc32":"**Acquire data**","10d71deb":"# **Introduction**","cc0d74f3":"# **Model**","8f847608":"**Comparison of all atributes for target classes**","ee407006":"# **Preparing the environment and uploading data**","572301c1":"**Comparison of mean values between stars and not stars**","f7409a5c":"**Distplots of numeric values**","a2a39e08":"**Target class distribution**","5c26d39d":"**Decision Tree Classifier**","1993e018":"**Split our data**","6cabe000":"**Correlation heatmap**","74122879":"**XGBoost Classifier**","f00808c4":"**We got nearly perfect accuracy. Thanks for reading my notebook! If you like it, please upvote :)**","848b5997":"**It seems we haven't got null values, so we can start to work with the data without any troubles. However we have to rename our columns**","82bad3bc":"**Relationship between mean_profile and std_profile by target class**","395a875e":"**Import packages**","b4dc4f72":"**Get detailed statistics about the data.** I created a function that shows us various stats about our data","94b753ee":"![](https:\/\/miro.medium.com\/max\/600\/1*IfOF_QNqAwFJY0tbU7UlZQ.jpeg)\n<br>**Hello, everyone! That's my EDA and prediction of a pulsar star in the universe.** Here you can find some exploration using Seaborn and applying our data on several algorithms. If you can help me with my code and say what I'm doing wrong feel free to do it. Enjoy the notebook :)","bdb198d9":"**Random Forest Classifier**","bb84be70":"**Take a first look**"}}