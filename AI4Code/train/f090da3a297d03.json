{"cell_type":{"57ee44bd":"code","30fd8557":"code","b5b754de":"code","389195c6":"code","748eb36d":"code","fe6cfa1f":"code","e960cb22":"code","e35db46c":"code","dd466222":"code","0964fa6f":"code","6d011e2b":"code","61d87319":"code","d265d269":"code","388bcc9e":"code","fe3dfe75":"code","eace4157":"code","ee29fea8":"code","ca21c51a":"code","0486b8ae":"markdown","476d723e":"markdown","df518a5a":"markdown"},"source":{"57ee44bd":"!pip install japanize-matplotlib","30fd8557":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pylab as plt\nimport japanize_matplotlib\nimport seaborn as sns\nimport pystan\nimport arviz\n\nimport warnings\nwarnings.filterwarnings('ignore')","b5b754de":"df_ippon = pd.read_csv('\/kaggle\/input\/ippon-gp-data\/ippon_gp_data_asof_20210531.csv')","389195c6":"dic_ippon = {}\nfor i, row in df_ippon.iterrows():\n    dic_ippon[i] = {\n        row['\u51fa\u5834\u8005\uff11']: row['\u7372\u5f97\u6570\uff11'],\n        row['\u51fa\u5834\u8005\uff12']: row['\u7372\u5f97\u6570\uff12'],\n        row['\u51fa\u5834\u8005\uff13']: row['\u7372\u5f97\u6570\uff13'],\n        row['\u51fa\u5834\u8005\uff14']: row['\u7372\u5f97\u6570\uff14'],\n        row['\u51fa\u5834\u8005\uff15']: row['\u7372\u5f97\u6570\uff15'],\n        row['\u51fa\u5834\u8005\uff16']: row['\u7372\u5f97\u6570\uff16'],\n        row['\u51fa\u5834\u8005\uff17']: row['\u7372\u5f97\u6570\uff17'],\n        row['\u51fa\u5834\u8005\uff18']: row['\u7372\u5f97\u6570\uff18'],\n        row['\u51fa\u5834\u8005\uff19']: row['\u7372\u5f97\u6570\uff19'],\n        row['\u51fa\u5834\u8005\uff11\uff10']: row['\u7372\u5f97\u6570\uff11\uff10'],\n    }","748eb36d":"dic_race = {}\nfor _, value in dic_ippon.items():\n    for key, _ in value.items():\n        if key not in dic_race:\n            dic_race[key] = [[]]\n\nfor key, value in dic_ippon.items():\n    for player in dic_race.keys():\n        if player in value:\n            dic_race[player].append(dic_race[player][-1] + [value[player]])\n        else:\n            dic_race[player].append(dic_race[player][-1] + [np.nan])\n            \nfor key, value in dic_race.items():\n    dic_race[key] = value[1:]\n    \nfor key, value in dic_race.items():\n    dic_race[key] = list(map(np.nanmean, value))\n    \ndf_race = []\nfor key, value in dic_race.items():\n    df_race.append([key] + value)\ndf_race = pd.DataFrame(df_race)\n\ndf_race.columns = ['\u51fa\u5834\u8005'] + \\\n                  (df_ippon['\u958b\u50ac\u56de\u6570'].str.strip() + '(' + pd.to_datetime(df_ippon['\u958b\u50ac\u5e74\u6708\u65e5'].astype(str)).dt.strftime('%Y\u5e74%m\u6708%d\u65e5') + ')').values.tolist()\n\ndf_race.to_csv('bar_chart_race_ippon.csv', index=False, encoding='utf_8_sig')","fe6cfa1f":"player_scores = {}\n\nfor key, values in dic_ippon.items():\n    for player_name, score in values.items():\n        \n        if player_name not in player_scores:\n            player_scores[player_name] = [score]\n        else:\n            player_scores[player_name].append(score)\n            \nplayer_list = []\nmean_score_list = []\nparticipating_num_list = []\n\nfor player_name, scores in player_scores.items():\n    player_list.append(player_name)\n    mean_score_list.append(np.mean(scores))\n    participating_num_list.append(len(scores))\n\ndf_tmp = pd.DataFrame({'player': player_list, 'mean_score': mean_score_list, 'participating_num': participating_num_list})\ndf_tmp = df_tmp.sort_values(by='mean_score', ascending=False)\n    \nplt.rcParams[\"font.size\"] = 15\nfig, ax1 = plt.subplots(figsize=(25, 7))\nax2 = ax1.twinx()\nsns.barplot(x=df_tmp['player'], y=df_tmp['mean_score'], color='skyblue', ax=ax1)\nsns.scatterplot(x=df_tmp['player'], y=df_tmp['participating_num'], color='black', s=200, ax=ax2)\nfig.autofmt_xdate(rotation=90)\nplt.show()\nfig.savefig('mean_score_par_num.png', dpi=200, bbox_inches='tight', pad_inches=0.1)","e960cb22":"# Need to prepare participating_players and scores\n\n# Prepare participating_players\n\n# First, create a dictionary that player_name to player_id\n# and, a dictionary that player_id to player_name\n\nplayer_name_player_id = {}\nplayer_id_player_name = {}\n\nfor key, values in dic_ippon.items():\n    for player_name, score in values.items():\n        \n        if player_name not in player_name_player_id:\n            player_name_player_id[player_name] = len(player_name_player_id)\n            \nplayer_id_player_name = {v: k for k, v in player_name_player_id.items()}\n\n# Second, create participating_players\n\nparticipating_players = []\n\nfor key, values in dic_ippon.items():\n    \n    players = []\n    \n    for player_name in values:\n        players.append(player_name_player_id[player_name])\n        \n    participating_players.append(players)\n\n# Check that all of matches, participating players num is 10\nfor i, pp in enumerate(participating_players):\n    if len(pp) != 10:\n        print(i, 'match, player num was NOT 10. player num = ', len(pp))\n        \n\n# Next prepare scores\n\nscores = []\n\n# prepare player's score rows\nfor _ in range(len(player_name_player_id)):\n    scores.append([])\n    \n# adding a score\nfor key, value in dic_ippon.items():\n    for player_id, player_name in player_id_player_name.items():\n        \n        if player_name in value:\n            scores[player_id].append(value[player_name])\n        else:\n            scores[player_id].append(-1)","e35db46c":"# Visualize scores\nfig, ax1 = plt.subplots(figsize=(20, 30))\nyticklabels = list(player_name_player_id.keys())\nsns.heatmap(scores, ax=ax1, cmap='binary', annot=True, annot_kws={'color': 'white'}, cbar=True, cbar_kws={'shrink': .3}, linewidths=.1, yticklabels=yticklabels)\nplt.show()\nfig.savefig('scores.png', dpi=200, bbox_inches='tight', pad_inches=0.1)","dd466222":"N = len(player_name_player_id)\nT = len(dic_ippon)\n\ndata = {\n    'N': N,\n    'T': T,\n    'participating_players': participating_players,\n    'scores': scores,\n}\n\nmodel = \"\"\"\ndata {\n    int N;\n    int T;\n    int participating_players[T, 10];\n    int scores[N, T];\n}\nparameters {\n    real<lower=0> mu_player[N];\n    real<lower=0> mu_gp[T];\n}\nmodel {\n    for (t in 1:T) {\n        for (i in 1:10) {\n            scores[participating_players[t, i] + 1, t] ~ poisson(mu_player[participating_players[t, i] + 1] + mu_gp[t]);\n        }\n    }\n}\n\"\"\"\nfit = pystan.stan(\n    model_code=model,\n    data=data,\n    iter=1000,\n    chains=4,\n)\nla = fit.extract()","0964fa6f":"fit","6d011e2b":"df_tmp = pd.DataFrame({\n    't': [f'\u7b2c{t+1}\u56de' for t in range(T)],\n    'mu_gp_median': np.median(la['mu_gp'], axis=0),\n})\n\ncm = sns.light_palette('blue', as_cmap=True)\ndf_tmp = df_tmp.style.background_gradient(cmap=cm)\ndf_tmp","61d87319":"df_tmp = pd.DataFrame({\n    'player_name': list(player_name_player_id.keys()),\n    'mu_player_median': np.median(la['mu_player'], axis=0),\n})\ndf_tmp = df_tmp.sort_values(by='mu_player_median', ascending=False)\ndf_tmp['No'] = pd.RangeIndex(start=1, stop=len(df_tmp)+1, step=1)\ndf_tmp = df_tmp[['No', 'player_name', 'mu_player_median']]\n\ncm = sns.light_palette('blue', as_cmap=True)\ndf_tmp = df_tmp.style.background_gradient(cmap=cm)\n\ndf_tmp","d265d269":"fig, ax1 = plt.subplots(figsize=(10, 15))\narviz.plot_forest(fit, var_names=['mu_gp'], ax=ax1)\nax1.set_yticklabels([f'\u7b2c{t}\u56de' for t in range(T, 0, -1)])\nplt.show()\nfig.savefig('plot_forest_mu_gp.png', dpi=200, bbox_inches='tight', pad_inches=0.1)","388bcc9e":"fig, ax1 = plt.subplots(figsize=(10, 40))\narviz.plot_forest(fit, var_names=['mu_player'], ax=ax1)\nax1.set_yticklabels([pn for pn in reversed(list(player_name_player_id.keys()))])\nplt.show()\nfig.savefig('plot_forest_mu_player.png', dpi=200, bbox_inches='tight', pad_inches=0.1)","fe3dfe75":"### Test code ###\n\nN = 6\nT = 3\nparticipating_players = [\n    [1, 2, 3, 4, 5], # ippon_g1, participating player id\n    [1, 3, 4, 2, 5], # ippon_g2, participating player id\n    [1, 2, 3, 4, 6],\n]\nscores = [\n    [3, 5, 6], # player1's ippon_score\n    [4, 6, 7], # player2's ippon_score\n    [2, 1, 2],\n    [4, 4, 4],\n    [2, 3, -1],\n    [-1, -1, 8],\n]\n\ndata = {\n    'N': N,\n    'T': T,\n    'participating_players': participating_players,\n    'scores': scores,\n}\n\nmodel = \"\"\"\ndata {\n    int N;\n    int T;\n    int participating_players[T, 5];\n    int scores[N, T];\n}\nparameters {\n    real<lower=0> mu_player[N];\n    real<lower=0> mu_gp[T];\n}\nmodel {\n    for (t in 1:T) {\n        for (i in 1:5) {\n            scores[participating_players[t, i], t] ~ poisson(mu_player[participating_players[t, i]] + mu_gp[t]);\n        }\n    }\n}\n\"\"\"\nfit = pystan.stan(\n    model_code=model,\n    data=data,\n    iter=1000,\n    chains=4,\n)\nla = fit.extract()","eace4157":"fit","ee29fea8":"np.mean(la['mu_player'], axis=0)","ca21c51a":"np.mean(la['mu_gp'], axis=0)","0486b8ae":"# Bar Chart Race CSV Output","476d723e":"# Bayes Modeling","df518a5a":"# Basical analysis"}}