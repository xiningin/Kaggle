{"cell_type":{"3fc1b1ed":"code","2d54bcd9":"code","f54430f1":"code","099632b7":"code","a3b3a80e":"code","e80a63f6":"code","472cc5d1":"code","c19df566":"code","14904ad9":"code","12ab692a":"code","7dbc7ca2":"code","7ed37bbc":"code","024e38d0":"code","0d8a6eea":"code","40058694":"code","00c0a8e6":"code","927aed16":"code","b3c8b3a7":"code","3695376d":"code","06087759":"code","ed9ea1f9":"code","b89e9f02":"code","d943f9b9":"code","8243b308":"code","fab11dce":"code","0b5cd24c":"code","d2bd05e6":"code","81bcb7c5":"code","04ff3089":"code","3f95e481":"code","8c5aa685":"code","00b105ca":"code","dfaed647":"code","2d48595b":"code","23bdbb7c":"code","3b1058b5":"code","83184885":"code","5ecae10f":"code","c7f95ac7":"code","89976e6e":"code","f89fc0b3":"code","91101b5d":"code","6a4991bd":"code","b182cc7d":"code","54ca1958":"code","5a51f646":"code","65b86c0b":"code","477f6e85":"code","032012db":"code","8720922a":"code","324c029a":"code","84f75dc5":"code","d679cc29":"code","5b5c1d9b":"code","d38d48dd":"code","a85aea2c":"code","e2da948b":"code","b1ee3e05":"code","c763652a":"code","c74874f5":"code","2b54d0fc":"code","f43c8c53":"code","0be2e8e5":"code","4d48bb1f":"code","11885e1b":"code","ad13748c":"code","0bff3b45":"code","39a476fd":"code","95933e84":"code","bdf7d3ea":"code","5116c0f5":"code","cfca3b83":"code","bcabe24a":"code","7b8a65e7":"code","21bb4366":"code","49f32750":"markdown","63006668":"markdown","def9c301":"markdown","4853c38e":"markdown","8edec30d":"markdown","1c2ad93e":"markdown","8a765f4d":"markdown","c5e6dc8b":"markdown","e2663eb6":"markdown","c4d58bfd":"markdown","c0840477":"markdown","f885b00e":"markdown","7c7c1421":"markdown","fc03947a":"markdown","58d0a830":"markdown","f57fe941":"markdown","7d1efdea":"markdown"},"source":{"3fc1b1ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d54bcd9":"from tensorflow.keras.preprocessing.text import Tokenizer\nsentence1 =[\"What's up?\",\"I like the world\",\"Life is a gift\",\n           \"We inherited a beautiful world and we have to protect and pass over the coming generations.\"]\ntokenizer = Tokenizer(num_words=100,lower=True,oov_token=\"<Not In Vocabulary>\")\n\n","f54430f1":"tokenizer.fit_on_texts(sentence1) #Updates internal vocabulary based on a list of texts.\nword_index= tokenizer.word_index\nprint(word_index) #This is the list that shows which number is assigned to which word","099632b7":"sentences= tokenizer.texts_to_sequences(sentence1)\nprint(sentences) #Here we get a list of every sentence","a3b3a80e":"from tensorflow.keras.preprocessing.sequence import pad_sequences\npadded_sentences= pad_sequences(sentences) # we may use maxlen parameter if we want to limit the size\npadded_sentences\n#If we want to add 0's at the end of each small lists, we need to use padding='post' parameter","e80a63f6":"df = pd.read_json(\"..\/input\/news-headlines-dataset-for-sarcasm-detection\/Sarcasm_Headlines_Dataset.json\",lines=True)\ndf.head()","472cc5d1":"X_train=df[\"headline\"].iloc[:20000]\ny_train= df[\"is_sarcastic\"].iloc[:20000]\nX_test =df[\"headline\"].iloc[20000:]\ny_test=df[\"is_sarcastic\"].iloc[20000:]\nprint(len(X_train))\nprint(len(y_train))\nprint(len(X_test))\nprint(len(y_test))","c19df566":"from tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\ntokenizer = Tokenizer(num_words= 15000, lower=True,oov_token=\"<Out of Vocabulary>\")\ntokenizer.fit_on_texts(X_train)# now tokenizer have fitted the data and creates a dictionary of words and their numbers\nword_index = tokenizer.word_index\nprint(word_index[\"movie\"]) #For example the wor movie is tokenized as 18 ","14904ad9":"# Now we will create sequences of every sentence\ntrain_sequences= tokenizer.texts_to_sequences(X_train)\nprint(train_sequences[:3]) # here we the first 3 seqquences \nprint(X_train[:3])","12ab692a":"print(len(max(X_train))) #The length of the largest sarcasm is 96","7dbc7ca2":"#Because sequences are different sizes, we need to make them in similar sizes\npadded_train_sequences= pad_sequences(train_sequences,padding=\"post\",maxlen=96) #this will add 0's to the smaller sequences\nprint(padded_train_sequences[:2])","7ed37bbc":"#lets do the operations for the test set\ntest_sequences = tokenizer.texts_to_sequences(X_test)\npadded_test_sequences= pad_sequences(test_sequences,padding=\"post\",maxlen=96)\nprint(padded_test_sequences[:2])","024e38d0":"reverse_word_index= dict([(value,key) for (key,value) in word_index.items()])\nprint(reverse_word_index[1]) # we will use this dictionary in order revert numbers into their original words\nprint(word_index['<Out of Vocabulary>']) \n#It seems it is correct","0d8a6eea":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, Dense, Flatten\nnlp= Sequential() \nnlp.add(Embedding(15000,16,input_length=96))#number of word is 15000, 16 represents embedding dimenstion\nnlp.add(Flatten())\nnlp.add(Dense(units=100,activation=\"relu\"))\nnlp.add(Dense(units=1,activation=\"sigmoid\")) #This is the output layer which will show whether text has positive or negative point\nnlp.compile(optimizer=\"adam\",loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\nnlp.summary() #This is the summary of our model","40058694":"df.head()","00c0a8e6":"history=nlp.fit(padded_train_sequences,y_train,epochs=3,validation_data=(padded_test_sequences,y_test))","927aed16":"pd.DataFrame(nlp.history.history).plot() \n#It seems model reaches highest accuracy in the first epoch and begin to overfit\n#We get around %86 accuracy in the test data and it is pretty good","b3c8b3a7":"def predictor(test_data):\n    sentence = test_data\n    sequence=tokenizer.texts_to_sequences([sentence])\n    padded_sequence = pad_sequences(sequence,padding=\"post\",maxlen=96)\n    result = nlp.predict(padded_sequence)\n    if result[0][0] >= 0.5:\n        print(\"The message is sarcastic\")\n    else:\n        print(\"The message is not sarcastic\")\n","3695376d":"test_data=X_test.iloc[1] #Lets try the first sentence in the test data\ntest_data","06087759":"predictor(test_data)","ed9ea1f9":"#Lets test another sentence\ntest_data=X_test.iloc[2]\ntest_data","b89e9f02":"predictor(test_data) # It seems the model does a pretty good job","d943f9b9":"import tensorflow_datasets as tfds\nimdb, info = tfds.load(\"imdb_reviews\", with_info=True, as_supervised=True)","8243b308":"print(info) #Here we find general information about the downloaded data:","fab11dce":"print(len(imdb[\"test\"])) #Both train and test data have 25000 IMDB\nprint(len(imdb[\"train\"]))","0b5cd24c":"#In this section we get the sentences and labels from the dataset and make them numpy arrays separately\ntrain, test = imdb['train'], imdb['test']\n\ntrain_sentences = list()\ntrain_labels = list()\n\ntest_sentences = list()\ntest_labels = list()\n# str(s.tonumpy()) is needed in Python3 instead of just s.numpy()\nfor sentence,label in train:\n    train_sentences.append(sentence.numpy().decode('utf8'))\n    train_labels.append(label.numpy())\nfor sentence,label in test:\n    test_sentences.append(sentence.numpy().decode('utf8'))\n    test_labels.append(label.numpy())\n#we also need to convert list into numpy arrays:\ntrain_labels_final = np.array(train_labels)\ntest_label_final = np.array(test_labels)","d2bd05e6":"print(len(max(train_sentences)))\nprint(len(max(test_sentences)))","81bcb7c5":"print(train_sentences[0])\nprint(\"**************************\")\nprint(type(train_labels[0]))\nprint(test_sentences[0])\nprint(test_labels[0])","04ff3089":"from tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\ntokenizer = Tokenizer(num_words= 15000, lower=True,oov_token=\"<Out of Vocabulary>\")\ntokenizer.fit_on_texts(train_sentences)# now tokenizer have fitted the data and creates a dictionary of words and their numbers\nword_index = tokenizer.word_index\nprint(word_index[\"movie\"]) #For example the wor movie is tokenized as 18 ","3f95e481":"# Now we will create sequences of every sentence\nsequences= tokenizer.texts_to_sequences(train_sentences)\nprint(sequences[:3]) # here we the first 3 seqquences ","8c5aa685":"#Because sequences are different sizes, we need to make them in similar sizes\npadded_train_sequences= pad_sequences(sequences,padding=\"post\",maxlen=1300) #this will add 0's to the smaller sequences\nprint(padded_train_sequences[:2])","00b105ca":"#lets do the operations for the test set\ntest_sequences = tokenizer.texts_to_sequences(test_sentences)\npadded_test_sequences= pad_sequences(test_sequences,padding=\"post\",maxlen=1300)\nprint(padded_test_sequences[:2])","dfaed647":"reverse_word_index= dict([(value,key) for (key,value) in word_index.items()])\nprint(reverse_word_index[1]) # we will use this dictionary in order revert numbers into their original words\n","2d48595b":"def decoder(text):\n    return \" \".join([reverse_word_index.get(i, \"?\") for i in text])\nprint(decoder(padded_train_sequences[3]))\nprint(train_sentences[3])\n#The padded version has the same word with more ? sign because we padded each word according to the length of the longest sentence","23bdbb7c":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, Dense, Flatten\nnlp= Sequential() \nnlp.add(Embedding(15000,16,input_length=1300))#number of word is 15000, 16 represents embedding dimenstion\nnlp.add(Flatten())\nnlp.add(Dense(units=100,activation=\"relu\"))\nnlp.add(Dense(units=50,activation=\"relu\"))\nnlp.add(Dense(units=1,activation=\"sigmoid\")) #This is the output layer which will show whether text has positive or negative point\nnlp.compile(optimizer=\"adam\",loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\nnlp.summary() #This is the summary of our model","3b1058b5":"history=nlp.fit(padded_train_sequences,train_labels_final,epochs=2,validation_data=(padded_test_sequences,test_label_final))","83184885":"pd.DataFrame(nlp.history.history).plot() # We have over %86 accuracy in test dataset","5ecae10f":"e = nlp.layers[0]\nweights = e.get_weights()[0]\nprint(weights.shape) # shape: (vocab_size, embedding_dim)","c7f95ac7":"sentence = \"I really think this is amazing. honest.\"\nsequence = tokenizer.texts_to_sequences([sentence])\nprint(sequence)","89976e6e":"padded_sequence= pad_sequences(sequence,padding=\"post\",maxlen=1300)\npadded_sequence","f89fc0b3":"nlp.predict(padded_sequence) # our model predict accurately this as positive point","91101b5d":"def predictor(sentence):\n    sequence=tokenizer.texts_to_sequences([sentence])\n    padded_sequence = pad_sequences(sequence,padding=\"post\",maxlen=1300)\n    result = nlp.predict(padded_sequence)\n    if result[0][0] >= 0.5:\n        print(\"This is a positive IMDB point\")\n    else:\n        print(\"This is a negative IMDB point\")\n    ","6a4991bd":"sentence= \"This film is a bad film, casts and actors performs badly\"\npredictor(sentence)","b182cc7d":"sentence2= \"This one of the amazing films I have ever seen\"\npredictor(sentence2)","54ca1958":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, Bidirectional,Dense, Flatten,LSTM\nnlp2= Sequential() \nnlp2.add(Embedding(15000,64,input_length=1300))#number of word is 15000, 16 represents embedding dimenstion\nnlp2.add(Bidirectional(LSTM(64)))\nnlp2.add(Dense(units=100,activation=\"relu\"))\nnlp2.add(Dense(units=50,activation=\"relu\"))\nnlp2.add(Dense(units=1,activation=\"sigmoid\")) #This is the output layer which will show whether text has positive or negative point\nnlp2.compile(optimizer=\"adam\",loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\nnlp2.summary() #This is the summary of our model","5a51f646":"history=nlp2.fit(padded_train_sequences,train_labels_final,epochs=2,validation_data=(padded_test_sequences,test_label_final))","65b86c0b":"pd.DataFrame(nlp2.history.history).plot() # We have over %86 accuracy in test dataset","477f6e85":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, Conv1D,Dense, GlobalAveragePooling1D\nconv= Sequential() \nconv.add(Embedding(15000,64,input_length=1300))#number of word is 15000, 16 represents embedding dimenstion\nconv.add(Conv1D(128, 5, activation='relu'))\nconv.add(GlobalAveragePooling1D())\nconv.add(Dense(units=100,activation=\"relu\"))\nconv.add(Dense(units=50,activation=\"relu\"))\nconv.add(Dense(units=1,activation=\"sigmoid\")) #This is the output layer which will show whether text has positive or negative point\nconv.compile(optimizer=\"adam\",loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\nconv.summary() #This is the summary of our model","032012db":"history=conv.fit(padded_train_sequences,train_labels_final,epochs=10,validation_data=(padded_test_sequences,test_label_final))","8720922a":"pd.DataFrame(conv.history.history).plot() # We have over %86 accuracy in test dataset","324c029a":"import tensorflow as tf\n\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nimport numpy as np ","84f75dc5":"data=\"In the town of Athy one Jeremy Lanigan \\n Battered away til he hadnt a pound. \\nHis father died and made him a man again \\n Left him a farm and ten acres of ground. \\nHe gave a grand party for friends and relations \\nWho didnt forget him when come to the wall, \\nAnd if youll but listen Ill make your eyes glisten \\nOf the rows and the ructions of Lanigans Ball. \\nMyself to be sure got free invitation, \\nFor all the nice girls and boys I might ask, \\nAnd just in a minute both friends and relations \\nWere dancing round merry as bees round a cask. \\nJudy ODaly, that nice little milliner, \\nShe tipped me a wink for to give her a call, \\nAnd I soon arrived with Peggy McGilligan \\nJust in time for Lanigans Ball. \\nThere were lashings of punch and wine for the ladies, \\nPotatoes and cakes; there was bacon and tea, \\nThere were the Nolans, Dolans, OGradys \\nCourting the girls and dancing away. \\nSongs they went round as plenty as water, \\nThe harp that once sounded in Taras old hall,\\nSweet Nelly Gray and The Rat Catchers Daughter,\\nAll singing together at Lanigans Ball. \\nThey were doing all kinds of nonsensical polkas \\nAll round the room in a whirligig. \\nJulia and I, we banished their nonsense \\nAnd tipped them the twist of a reel and a jig. \\nAch mavrone, how the girls got all mad at me \\nDanced til youd think the ceiling would fall. \\nFor I spent three weeks at Brooks Academy \\nLearning new steps for Lanigans Ball. \\nThree long weeks I spent up in Dublin, \\nThree long weeks to learn nothing at all,\\n Three long weeks I spent up in Dublin, \\nLearning new steps for Lanigans Ball. \\nShe stepped out and I stepped in again, \\nI stepped out and she stepped in again, \\nShe stepped out and I stepped in again, \\nLearning new steps for Lanigans Ball. \\nBoys were all merry and the girls they were hearty \\nAnd danced all around in couples and groups, \\nTil an accident happened, young Terrance McCarthy \\nPut his right leg through miss Finnertys hoops. \\nPoor creature fainted and cried Meelia murther, \\nCalled for her brothers and gathered them all. \\nCarmody swore that hed go no further \\nTil he had satisfaction at Lanigans Ball. \\nIn the midst of the row miss Kerrigan fainted, \\nHer cheeks at the same time as red as a rose. \\nSome of the lads declared she was painted, \\nShe took a small drop too much, I suppose. \\nHer sweetheart, Ned Morgan, so powerful and able, \\nWhen he saw his fair colleen stretched out by the wall, \\nTore the left leg from under the table \\nAnd smashed all the Chaneys at Lanigans Ball. \\nBoys, oh boys, twas then there were runctions. \\nMyself got a lick from big Phelim McHugh. \\nI soon replied to his introduction \\nAnd kicked up a terrible hullabaloo. \\nOld Casey, the piper, was near being strangled. \\nThey squeezed up his pipes, bellows, chanters and all. \\nThe girls, in their ribbons, they got all entangled \\nAnd that put an end to Lanigans Ball.\"\ndata","d679cc29":"corpus= data.lower().split(\"\\n\") # we split every line with \"\\n\" and get a list of strings\ncorpus","5b5c1d9b":"tokenizer= Tokenizer()\ntokenizer.fit_on_texts(corpus)\nword_index = tokenizer.word_index\nword_index[\"and\"]","d38d48dd":"total_word=len(word_index)+1 # we add 1 for unknown words\ntotal_word","a85aea2c":"input_sentences= list()\nfor line in corpus:\n    token_list=tokenizer.texts_to_sequences([line])[0]\n    for i in range(1, len(token_list)):\n        n_sequence=token_list[:i+1]\n        input_sentences.append(n_sequence)\ninput_sentences[:20]\n   ","e2da948b":"# pad sequences \nmax_sequence_len = max([len(x) for x in input_sentences])\ninput_sequences = np.array(pad_sequences(input_sentences, maxlen=max_sequence_len, padding='pre'))\n\n# create predictors and label\nxs, labels = input_sequences[:,:-1],input_sequences[:,-1]\n\nys = tf.keras.utils.to_categorical(labels, num_classes=total_word)","b1ee3e05":"xs[0]","c763652a":"ys[0]","c74874f5":"print(xs[6])\nprint(ys[6])","2b54d0fc":"print(xs[5])\nprint(ys[5])","f43c8c53":"nlp = Sequential()\nnlp.add(Embedding(total_word,64,input_length=max_sequence_len-1))\nnlp.add(Bidirectional(LSTM(20)))\nnlp.add(Dense(units=total_word,activation=\"softmax\"))\nnlp.compile(loss=\"categorical_crossentropy\",optimizer=\"adam\",metrics=[\"accuracy\"])\nhistory= nlp.fit(xs,ys,epochs=500)","0be2e8e5":"pd.DataFrame(nlp.history.history)","4d48bb1f":"pd.DataFrame(nlp.history.history).plot() # we get %95 accuracy","11885e1b":"import urllib\nirish_lyrics= list()\nfile = urllib.request.urlopen(\"https:\/\/storage.googleapis.com\/laurencemoroney-blog.appspot.com\/irish-lyrics-eof.txt\")\nfor line in file:\n    decoded_line = line.decode(\"utf-8\")\n    irish_lyrics.append(decoded_line)\n    \nprint(irish_lyrics[3])","ad13748c":"corpus= \" \".join(irish_lyrics)\ncorpus = corpus.lower().split(\"\\n\")\n","0bff3b45":"corpus[3]","39a476fd":"tokenizer.fit_on_texts(corpus)\ntotal_words = len(tokenizer.word_index) + 1\n\nprint(tokenizer.word_index)\nprint(total_words)","95933e84":"input_sequences = []\nfor line in corpus:\n    token_list = tokenizer.texts_to_sequences([line])[0]\n    for i in range(1, len(token_list)):\n        n_sequence = token_list[:i+1]\n        input_sequences.append(n_sequence)\n\n# pad sequences \nmax_sequence_len = max([len(x) for x in input_sequences])\ninput_sequences = np.array(pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre'))\n\n# create predictors and label\nxs= input_sequences[:,:-1]\nlabels=input_sequences[:,-1]\n\nys = tf.keras.utils.to_categorical(labels, num_classes=total_words)","bdf7d3ea":"print(xs[3])\nprint(ys[3])\nprint(len(xs[3]))\nprint(len(ys[3]))","5116c0f5":"print(total_words)\nprint(max_sequence_len-1)","cfca3b83":"nlp=Sequential()\nnlp.add(Embedding(total_words,100,input_length=max_sequence_len-1))\nnlp.add(Bidirectional(LSTM(200)))\nnlp.add(Dense(total_words, activation=\"softmax\"))\nnlp.compile(optimizer=\"adam\",loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])\nnlp.summary()","bcabe24a":"history= nlp.fit(xs,ys,epochs=100)","7b8a65e7":"pd.DataFrame(nlp.history.history).plot()","21bb4366":"seed_text = \"I've got a bad feeling about this\"\nnext_words = 100\n  \nfor _ in range(next_words):\n    token_list = tokenizer.texts_to_sequences([seed_text])[0]\n    token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\n    predicted = nlp.predict(token_list, verbose=0)\n    output_word = \"\"\n    for word, index in tokenizer.word_index.items():\n        if index == predicted:\n            utput_word = word\n            break\n    seed_text += \" \" + output_word\nprint(seed_text)","49f32750":"<font color=\"blue\"> \nLets apply nlp on IMDB Review Data in Tensorflow:","63006668":"<font color=\"blue\">\n    ","def9c301":"<font color=\"blue\">\ntokenizer.texts_to_sequences(texts):Transforms each text in texts to a sequence of integers.","4853c38e":"Lets try a long lyrics example:","8edec30d":"<font color=\"blue\">\nTokenizer(num_words=None, filters='!\"#$%&()*+,-.\/:;<=>?@[\\\\]^_`{|}~\\t\\n', lower=True, split=' ', char_level=False, oov_token=None, document_count=0, **kwargs)\n |  \n |  Text tokenization utility class.\n |  \n |  This class allows to vectorize a text corpus, by turning each\n |  text into either a sequence of integers (each integer being the index\n |  of a token in a dictionary) or into a vector where the coefficient\n |  for each token could be binary, based on word count, based on tf-idf...\n |  \n |  # Arguments:\n \n |      num_words: the maximum number of words to keep, based\n |          on word frequency. Only the most common `num_words-1` words will\n |          be kept.\n \n |      filters: a string where each element is a character that will be\n |          filtered from the texts. The default is all punctuation, plus\n |          tabs and line breaks, minus the `'` character.\n \n |      lower: boolean. Whether to convert the texts to lowercase.\n \n |      split: str. Separator for word splitting.\n \n |      char_level: if True, every character will be treated as a token.\n \n |      oov_token: if given, it will be added to word_index and used to\n |          replace out-of-vocabulary words during text_to_sequence calls","1c2ad93e":"Lets test whether the data has been tokenized correctly or not","8a765f4d":"Implemeting the Model:","c5e6dc8b":"## 1. Data Preparation:","e2663eb6":"<font color=\"blue\">\nWe see that taking your tokenized words and using Embeddings to establish meaning from them in a mathematical way. Words were mapped to vectors in higher dimensional space, and the semantics of the words then learned when those words were labelled with similar meaning. So, for example, when looking at movie reviews, those movies with positive sentiment had the dimensionality of their words ending up \u2018pointing\u2019 a particular way, and those with negative sentiment pointing in a different direction. From this, the words in future sentences could have their \u2018direction\u2019 established, and from this the sentiment inferred. Therefore,not only do the meanings of the words matter, but also the sequence in which they are found. ","c4d58bfd":"Lets test the performance of the model in the test set:","c0840477":"## 2. Implemeting the Model:","f885b00e":"## Sequence models and literature","7c7c1421":"Embedding(*args, **kwargs)\n |  \n |  Turns positive integers (indexes) into dense vectors of fixed size.\n model = tf.keras.Sequential()\n |  >>> model.add(tf.keras.layers.Embedding(1000, 64, input_length=10))\n |  >>> # The model will take as input an integer matrix of size (batch,\n |  >>> # input_length), and the largest integer (i.e. word index) in the input\n |  >>> # should be no larger than 999 (vocabulary size).\n |  >>> # Now model.output_shape is (None, 10, 64), where `None` is the batch\n |  >>> # dimension.","fc03947a":"<font color=\"blue\">\nBecause every sentences have different lengths, we need to using padding and extend their length according to the longest word's length by adding 0's.\n\npad_sequences(sequences, maxlen=None, dtype='int32', padding='pre', truncating='pre', value=0.0)\n    Pads sequences to the same length.","58d0a830":"<font color=\"red\">\nUsing Convolutional Neural Networks:","f57fe941":"<font color=\"red\">\nUsing LSTM:","7d1efdea":"You then learned about embeddings, and how words could be mapped to vectors, and words of similar semantics given vectors pointing in a similar direction, giving you a mathematical model for their meaning, which could then be fed into a deep neural network for classification.\n\nFrom there you started learning about sequence models, and how they help deepen your understanding of sentiment in text by not just looking at words in isolation, but also how their meanings change when they qualify one another."}}