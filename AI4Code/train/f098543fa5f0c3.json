{"cell_type":{"18f34769":"code","a58f5339":"code","79fd3034":"code","85d978a4":"code","f58364a0":"code","9d2c6d62":"code","63322a64":"code","e50a7ceb":"code","4149efe5":"code","ad00d19b":"code","36aaecbc":"code","4248e902":"code","b6c96d05":"code","3d77078b":"code","f6e6eea4":"code","61ada721":"code","ad45fef8":"code","30bcae20":"code","8336a6b3":"code","e856e3c7":"code","5bbdec8f":"code","4dd9157c":"code","cad3f8f2":"code","88ea63c3":"code","ee75ea6d":"code","46ba957a":"code","f517d561":"code","06c89ba8":"code","32074d24":"code","f573aaed":"code","5de1405c":"code","99e860ba":"code","4beaf6cd":"code","d98ee2d2":"code","1fbe0319":"code","6dd881cd":"code","2a161625":"code","e0802b79":"code","76361b88":"code","9e590b5d":"code","bb65a258":"code","328efcb6":"code","be3d4a22":"code","f3357b4e":"code","1b43f05b":"code","76ded2c4":"code","557d50fc":"code","f86bb63c":"code","e08f88ba":"code","5ae08935":"code","f2cd9c4b":"code","deed468a":"code","b58954f9":"code","17db9d5a":"code","58de6642":"code","77d58210":"code","293ae667":"code","9787b948":"code","81bb02a5":"code","eb0e086d":"code","a1862d9d":"code","fdf0d701":"code","06dace5a":"code","e27914d8":"code","8b85d9d6":"code","4ee1ba18":"code","2b91cb75":"code","b01f4ee7":"code","a541f4e3":"code","da2f3cb1":"markdown","c5895ecd":"markdown","0d427c09":"markdown","ca82314d":"markdown","2f95b2db":"markdown","0192b4ce":"markdown","7c7da791":"markdown","730edf28":"markdown","abd90765":"markdown","08bafbc9":"markdown","5397ca30":"markdown","7636ca76":"markdown","6c2f8437":"markdown","bdb61ed7":"markdown","4d19aa66":"markdown","bd7726e8":"markdown","3db71463":"markdown","91cdcb53":"markdown","7042cb9b":"markdown","2381a233":"markdown","39f076b1":"markdown","11b1173d":"markdown","32c11c24":"markdown","a6aeeaa9":"markdown","a16a16a2":"markdown","3daa9306":"markdown","b7ebfdd6":"markdown","4ffa094f":"markdown","fd39bc46":"markdown","1f58c511":"markdown","6cc9237d":"markdown","6c0948d9":"markdown","b922a72f":"markdown","4606a2c1":"markdown","17d2c791":"markdown","11ad5e42":"markdown","8563076d":"markdown","212a4ffc":"markdown"},"source":{"18f34769":"# 1- import python medules which i will uses in this task.\n# 2- read FIFA 19 dataset,and show info and describe columns f it.\n# 3- calculate the most 10 country that have players in FIFA 19.\n# 4- Show Distribution of Age for all players and calculate most fit line for it.\n# 5- Preferred foot analysis: calculate the of left and right foot that player preferred.\n# 6- Show most Position in Playground that has player in FIFA 19.\n# 7- Popular 10 players for ST, GK, LW, RF Position.\n# 8- Distribution of all players value  and calcuate The average of players value.\n# 9- Overall rating distribution and most fit line for it.\n# 10- Make Analysis for Real Madrid Club.\n# 11- Calculate the relation between weight and height for all players(corr. and distribution)\n# 12- Top 10 expensive teams in the world\n# 13- Calculate ATTRIBUTE DETAILS for any player you want.\n# 14- Radar Plot for player attribute's Details.\n# 15- Radar plot for  player's skills.\n# 16- Show the best squad in the world by choosing Lineup.\n# 17- Plot the best squad on playground based on Lineup [3,4,3].\n# 18- Predict Overall Rating for player using ML (Liner Regression)","a58f5339":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sp\nfrom scipy import stats\nimport re\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom sklearn.linear_model import LinearRegression\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom PIL import Image\nimport warnings","79fd3034":"warnings.filterwarnings('ignore')","85d978a4":"# read data and show some sample.\ndf = pd.read_csv(\"..\/input\/fifa19\/data.csv\", index_col=\"Unnamed: 0\")\ndf.head()","f58364a0":"# get columns names.\ncol = df.columns\ncol","9d2c6d62":"# dimention of data\ndf.shape","63322a64":"# info for all dataset columns_name, dataType, null_count\ndf.info()","e50a7ceb":"# describe of data min, max, mean, std values for all columns\ndf.describe()","4149efe5":"# count number of rows that have null value in every columns.\ndf.isnull().sum()","ad00d19b":"# group data by Nationlity and sort it by number of player to get most country have player.\nnational_player = df[['Nationality',\"ID\"]].groupby(by=['Nationality'],as_index=False).count().sort_values(\"ID\",ascending=False)\nnational_player.rename(columns = {'Nationality':\"country\", 'ID':'player_count'}, inplace = True)\nnational_player = national_player.reset_index()\nnational_player = national_player.drop([\"index\"], axis=1)\nnational_player.head(10)","36aaecbc":"# Slicing first 10 row form country player_count dataset\nplayer_count = national_player.iloc[0:10,1]\nnational = national_player.iloc[0:10,0]","4248e902":"# select seaborn style of chart to make display more good for eyes.\nplt.style.use(\"seaborn\")\n# create bar chart between most 10 country and no. of player \nplt.bar(national,player_count)\nplt.xticks(rotation=45)\nplt.title('Top 10 Country that have player in FIFA 19')\nplt.show()","b6c96d05":"# slicing Age column and group it and count no. of player have same age for all age.\nplayer_age = df[['Age',\"ID\"]].groupby(by=['Age'],as_index=False).count().sort_values(\"ID\",ascending=False)\nplayer_age.rename(columns = {'ID':'count'}, inplace = True)\nplayer_age = player_age.reset_index().drop([\"index\"], axis=1)\nplayer_age.head()","3d77078b":"# display histogram of age for all player and fit normal distribution line for it.\n_,bins,_ = plt.hist(df.Age,bins=df.Age.max()-df.Age.min(),label=\"Age with no. of player\")\nmu, sigma = sp.stats.norm.fit(df.Age)\nbest_fit_line = sp.stats.norm.pdf(bins, mu, sigma)\nplt.plot(bins, df.shape[0] * best_fit_line,label=\"fit_line\",color=\"red\")\n\nplt.title('Distrbution of Age with players in FIFA 19')\nplt.ylabel(\"no. of player\")\nplt.xlabel(\"Age of player\")\nplt.legend()\nplt.show()","f6e6eea4":"# count number for left and right foot preferred players\npreferred_foot = df.groupby(\"Preferred Foot\")[\"Preferred Foot\"].count()\npreferred_foot","61ada721":"# plot pie chart to display the percentage for every foot that players preferred\nplt.pie(preferred_foot, labels=[\"left\",\"right\"], explode=[0.1,0], autopct='%1.2f%%',colors=[\"#ea157a\",\"#0089af\"])\nplt.legend()\nplt.show()","ad45fef8":"# count number for every position in playground that have players and sorted it.\nplayer_position = df[[\"Position\",\"ID\"]].groupby(by=['Position'],as_index=False).count().sort_values(\"ID\",ascending=False)\nplayer_position.rename(columns = {'ID':'count'}, inplace = True)\nplayer_position = player_position.reset_index().drop([\"index\"], axis=1)\nplayer_position.head()","30bcae20":"# plot bar chart to display the number of players for every position with sorted.\nplt.figure(figsize=(15,7))\nplt.bar(player_position[\"Position\"],player_position[\"count\"])\nplt.xticks(rotation=70)\nplt.title(\"Player's Position Distrbution\", color=\"black\")\nplt.show()","8336a6b3":"# get top 10 ST players in the world.\nST_position = df[df[\"Position\"]==\"ST\"].sort_values(\"Overall\",ascending=False)[[\"Name\",\"Overall\"]]\nST_position = ST_position.iloc[:10,:]","e856e3c7":"GK_position = df[df[\"Position\"]==\"GK\"].sort_values(\"Overall\",ascending=False)[[\"Name\",\"Overall\"]]\nGK_position = GK_position.iloc[:10,:]","5bbdec8f":"LW_position = df[df[\"Position\"]==\"LW\"].sort_values(\"Overall\",ascending=False)[[\"Name\",\"Overall\"]]\nLW_position = LW_position.iloc[:10,:]","4dd9157c":"RF_position = df[df[\"Position\"]==\"RF\"].sort_values(\"Overall\",ascending=False)[[\"Name\",\"Overall\"]]\nRF_position = RF_position.iloc[:10,:]","cad3f8f2":"# function plot bar chart for top 10 player in selected position.\ndef draw(df, color, position, ax):\n    plt.style.use('tableau-colorblind10')\n    sns.barplot(df[\"Name\"],df[\"Overall\"],color=color , ax=ax).set_title(\"Most Top 10 \" + position +\" players\", fontsize=14)\n    ax.set_xticklabels(ax.get_xticklabels(),rotation=40)","88ea63c3":"# plot 4 figures that display Top 10 player in ST, GK, LW, RF positions.\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=[20, 15])\n\ndraw(GK_position,\"#e91e63\", \"GK\",axes[0,0])\ndraw(ST_position,\"#0089af\", \"ST\",axes[0,1])\ndraw(LW_position,\"#1ab39f\", \"LW\",axes[1,0])\ndraw(RF_position,\"#72bd35\", \"RF\",axes[1,1])\nplt.show()","ee75ea6d":"# function that convert value column of players to numeric.\ndef getValue(df):\n    new = []\n    for i in df:\n        i = i.strip(\"\u20ac\")\n        if \"K\" in i:\n            i = i.strip(\"K\")\n            new.append(float(i)*(1000))\n        elif \"M\" in i:\n            i = i.strip(\"M\")\n            new.append(float(i)*(10**6))\n        else:\n            new.append(0.0)\n            \n    return new","46ba957a":"# convert value columns to numeric and calculate the avarage value.\nlis = getValue(df.Value.values)\nprint(\"The average of players value in the world = \",round(np.average(np.array(lis))\/10**6,2),\"M\")","f517d561":"# plot histogram of values to show distribution of it.\nplt.hist(lis,bins=100)\nplt.show()","06c89ba8":"sns.boxplot(x=getValue(df.Value.values))\nplt.show()","32074d24":"# plot the distribution of overall rating.\nplt.figure(figsize=(15, 7))\nsns.countplot(df.Overall, label=\"overall_hist\",color=\"#c81067\")\nplt.title(\"Overall rating distribution for all Player\")\nplt.legend()\nplt.show()","f573aaed":"# plot the distribution of overall rating and get most fit line for it.\n_,bins,_ = plt.hist(df.Overall, bins=(df.Overall.max()-df.Overall.min()),label=\"overall_hist\", color=\"#0093bc\")\nmu, sigma = sp.stats.norm.fit(df.Overall)\nbest_fit_line = sp.stats.norm.pdf(bins, mu, sigma)\nplt.plot(bins, df.shape[0] * best_fit_line,label=\"fit_line\",color=\"red\")\nplt.title(\"Overall rating histogram\")\nplt.legend()\nplt.show()","5de1405c":"# select Real Madrid player from data \nreal_Madrid_players = df[df.Club == \"Real Madrid\"]\nreal_Madrid_players = real_Madrid_players[[\"Name\",\"Age\",\"Nationality\",\"Value\",\"Release Clause\",\"Overall\"]]\nreal_Madrid_players = real_Madrid_players\nreal_Madrid_players.rename(columns={'Release Clause': 'Release'},inplace=True)","99e860ba":"# convert value column to numeric.\nreal_Madrid_players.Release = getValue(real_Madrid_players.Release)","4beaf6cd":"# sort them by Release column.\nreal_Madrid_players.sort_values(\"Release\",inplace=True,ascending=False)\nreal_Madrid_players = real_Madrid_players.reset_index()\nreal_Madrid_players.drop(\"index\",axis=1,inplace=True)\nreal_Madrid_players.head(10)","d98ee2d2":"print(\"Overall mean value for Real Madrid Team = \", round(real_Madrid_players.Overall.mean()),\"%\")","1fbe0319":"print(\"Release Corr. Overall= \",round(real_Madrid_players.Release.corr(real_Madrid_players.Overall),2))","6dd881cd":"# plot chart for most player have Release.\nplt.figure(figsize=(14, 8))\nplt.bar(real_Madrid_players.Name[:20],real_Madrid_players.Release[:20],width=0.8,\n        label=\"player Vs Value\")\nplt.title(\"Most RealMadrid players have Release Value\")\nplt.xticks(rotation=40)\nplt.xlabel(\"player name\")\nplt.ylabel(\"vlaue\")\nplt.legend()\nplt.show()","2a161625":"# function that convert weight to numeric.\ndef get_weight(weight):\n    new = []\n    for i in weight:\n        if \"lbs\" in str(i):\n            new.append(i.strip(\"lbs\"))\n    return new\n\n# function that convert height to numeric.\ndef get_height(height):\n    new = []\n    for i in height:\n        if \"'\" in str(i):\n            new.append(i.replace(\"'\",\".\"))\n    return new","e0802b79":"# drop nan values form weight and height colmns and convert it to numeric.\nweight_height =df[[\"Weight\",\"Height\"]].dropna(how=\"any\")\nweight_height.Weight =get_weight(list(weight_height.Weight.values))\nweight_height.Height = get_height(list(weight_height.Height.values))","76361b88":"# plot scattar for  weight column.\nweight_height.sort_values(\"Weight\",ascending=True,inplace=True)\nplt.figure(figsize=(15,10))\nplt.scatter(weight_height.Weight, weight_height.Height)\nplt.xticks(rotation=40)\nplt.show()","9e590b5d":"weight_height.Weight = weight_height.Weight.astype(\"float64\")\nweight_height.Height = weight_height.Height.astype(\"float64\")\nprint(\"correlation between Weight and Height of players=\",round(weight_height.Weight.corr(weight_height.Height),2))","bb65a258":"# plot the distribution of wieght.\nplt.hist(weight_height.Weight,bins=40)\nplt.show()","328efcb6":"# plot distribution of Height columns.\nplt.hist(weight_height.Height,bins=40)\nplt.show()\nstats.mode(weight_height.Height)\n(weight_height.Height.shape)","be3d4a22":"# drop nan from needed columns and group by Clubs and sort it by sum op player values. \nclub_value_df = df[[\"Club\",\"Release Clause\"]].dropna(how=\"any\")\nclub_value_df.columns = [\"club\",\"value\"]\nclub_value_df.value = getValue(club_value_df.value)\nclub_value_df = club_value_df.groupby(by=['club'],as_index=False).sum().sort_values(by=\"value\",ascending=False)\nclub_value_df.reset_index().drop(\"index\",axis=1).head(10)","f3357b4e":"# plot most 10 team have expensive players.\nplt.figure(figsize=(12,7))\nplt.style.use(\"seaborn\")\nplt.bar(club_value_df.club[:10], club_value_df.value[:10], label=\"club with value\")\nplt.title(\"Top 10 expensive teams in the world\",fontsize=15)\nplt.xlabel(\"Teams\")\nplt.ylabel(\"value\")\nplt.xticks(rotation=40)\nplt.legend()\nplt.show()","1b43f05b":"# attribute dictionary key attribute and values skills colmns for every attribute.\nattribute_dict = {\"shooting\" : [\"Positioning\",\"Finishing\",\"ShotPower\",\"LongShots\",\"Volleys\",\"Penalties\"],\n                  \"passing\" : [\"Vision\",\"Crossing\",\"FKAccuracy\",\"ShortPassing\",\"LongPassing\",\"Curve\"],\n                  \"dribbling\" : [\"Agility\",\"Balance\", \"Reactions\", \"BallControl\", \"Dribbling\",\"Composure\"],\n                  \"defending\" : [\"Interceptions\", \"HeadingAccuracy\", \"Marking\", \"StandingTackle\",\"SlidingTackle\"],\n                  \"physical\" : [\"Jumping\", \"Stamina\", \"Strength\",\"Aggression\"]}","76ded2c4":"# funcion that calcualte attribute for any player: need using player index\ndef calculate_attribute(dataframe,player_index):\n    allcols = []\n    \n    for i in attribute_dict.values():\n        allcols.extend(i) \n        \n    player_observation = dataframe.loc[player_index,allcols].astype(\"int64\")\n    player_skills = []\n    \n    for i in attribute_dict.keys():\n        lis = attribute_dict.get(i)\n        player_skills.append(int(sum(player_observation[lis])\/len(player_observation[lis])))\n\n    return {i.upper()+\": \"+str(j)+\"%\":j for i,j in zip(attribute_dict.keys(),player_skills)}","557d50fc":"# function get skills values for any attribute.\ndef get_attributes_values(attribute, observation):\n    return observation.loc[attribute_dict.get(attribute)].astype(\"int64\")","f86bb63c":"# funcion that plot player attribute: need index of player skills.\ndef plot_player_attribute(player_index, observation, skills):\n    colors = ['#03a309', \"#a3037e\", \"#fd3689\", \"#ded118\", \"#474bc9\"]\n    fig = go.Figure()\n    fig = make_subplots(rows=1, cols=5)\n    # create skills bar chart\n    for key, skill_name, color_i, column in zip(attribute_dict.keys(),skills,colors, range(1,6)):\n        values = get_attributes_values(key,observation)\n        fig.add_trace(go.Bar(x=values,y=attribute_dict.get(key),name=skill_name,\n                             marker=go.bar.Marker(color=color_i,line=dict(color=\"#454545\",width=1)), orientation=\"h\",\n                             width=0.5, text=values, textposition='auto'),row=1, col=column)\n\n    # read image\n    img = Image.open(\"..\/input\/players\/playerface\/\"+str(player_index)+\".webp\")\n    # Add image\n    fig.add_layout_image(dict(source=img, xref=\"paper\", yref=\"paper\",\n                              x=1, y=1.5, sizex=0.5, sizey=0.5, xanchor=\"right\", yanchor=\"top\"))\n    # update layout properties\n    fig.update_layout(autosize=False, height=300, width=2300, bargap=0.5, bargroupgap=0.3, barmode=\"overlay\",\n                      hovermode=\"x\", margin=dict(r=0, l=0, b=0, t=100),\n                      title=({'text': observation[\"Name\"]+\" ATTRIBUTE DETAILS\",'y':0.9,'x':0.5,'xanchor': 'right',\n                              'yanchor': 'top'}))\n    fig.update_xaxes(range=[0,100])\n    fig.show()","e08f88ba":"# draw attribute details for MESSI.\nplayer_index = 0\nplayer_skills = calculate_attribute(df,player_index)\nplot_player_attribute(player_index, df.iloc[player_index], list(player_skills.keys()))","5ae08935":"# draw attribute details for RONALDO.\nplayer_index = 1\nplayer_skills = calculate_attribute(df,player_index)\nplot_player_attribute(player_index, df.iloc[player_index], list(player_skills.keys()))","f2cd9c4b":"# draw attribute details for Neymar Jr\nplayer_index = 2\nplayer_skills = calculate_attribute(df,player_index)\nplot_player_attribute(player_index, df.iloc[player_index], list(player_skills.keys()))","deed468a":"# draw attribute details for M.SALAH.\nplayer_index = 26\nplayer_skills = calculate_attribute(df,player_index)\nplot_player_attribute(player_index, df.iloc[player_index], list(player_skills.keys()))","b58954f9":"# function plot radar diagram for any player, need player skills and player name.\ndef plot_player_radar(skills,player_name):\n    fig = go.Figure()\n\n    fig.add_trace(go.Scatterpolar(r=list(skills.values()),theta=list(skills.keys()),fill='toself',\n                                  name=player_name, line_color='darkviolet',))\n\n    fig.update_layout(polar=dict(radialaxis=dict(visible=False,range=[0,100])),showlegend=True)\n    fig.show()","17db9d5a":"# draw attribute Details radar chart for RONALDO.\n\nplayer_index = 1\nplayer_skills = calculate_attribute(df,player_index)\nplot_player_radar(player_skills,df.iloc[player_index][\"Name\"])","58de6642":"# draw attribute Details radar chart for M.SALAH.\nplayer_index = 26\nplayer_skills = calculate_attribute(df,player_index)\nplot_player_radar(player_skills,df.iloc[player_index][\"Name\"])","77d58210":"# select player, skills columns and convert it to numeric.\nplayer_index = 0\ncol = ['Crossing','Finishing','ShortPassing','SprintSpeed','Stamina', 'Strength','Vision', 'Acceleration','BallControl']\nobservation = df.loc[player_index,col].astype(\"int64\")","293ae667":"# use to concat skills with it's value.\ncategories = []\nfor i in col:\n    categories.append(i + \": \" + str(int(observation[i]))+\"%\")","9787b948":"# plot MESSI skills radar.\nfig = go.Figure()\nfig.add_trace(go.Scatterpolar(r=observation, theta=categories,fill='toself',\n                              name=df.iloc[player_index][\"Name\"],line_color=\"red\"))\nfig.update_layout(polar=dict(radialaxis=dict(visible=False,range=[0, 100])),showlegend=True)\nfig.show()","81bb02a5":"# player position in each line in playground.\nposition = {\"deffender\":[\"RB\",\"LB\",\"CB\",\"LCB\",\"RCB\",\"RWB\",\"RDM\",\"CDM\",\"LDM\",\"LWB\"],\n             \"midder\":[\"RM\",\"LM\",\"CM\",\"LCM\",\"RCM\",\"RAM\",\"CAM\",\"LAM\"],\n             \"attacker\":[\"RW\",\"RF\",\"CF\",\"LF\",\"LW\",\"RS\",\"ST\",\"LS\"]\n            }\nlineup = [3,4,3]","eb0e086d":"# function that get best squad in the world based on your Lineup.\ndef get_best_squad(lineup):\n    best_squad = df[df.Position == \"GK\"].sort_values(\"Overall\",ascending=False).iloc[0:1]\n    for j, k in zip(position.keys(),range(3)):\n        best = []\n        for i in position.get(j):\n            best.append(df[df.Position == i].sort_values([\"Overall\",\"Potential\"], ascending=[False,False]).iloc[0])\n        best = pd.DataFrame(best).sort_values([\"Overall\",\"Potential\"], ascending=[False,False])\n        best = best.iloc[0:lineup[k]]\n        best_squad = pd.concat([best_squad, best])\n    return best_squad","a1862d9d":"# get best squad on the world based on lineup which you select.\nbest_sqaud = get_best_squad(lineup)\nbest_sqaud.reset_index(inplace=True)\nplayer_index = list(best_sqaud.loc[:,[\"index\"]].values.reshape(11,))\nbest_sqaud.drop(\"index\",axis=1,inplace=True)\nbest_sqaud","fdf0d701":"# location of player on chart.\nlocation_3_4_3 = {  0:[150,80],\n                    1:[150,145],\n                    2:[220,145],\n                    3:[80,145],\n                    4:[60,300],\n                    5:[150,230],\n                    6:[240,300],\n                    7:[150,320],\n                    8:[60,400],\n                    9:[150,450],\n                    10:[240,400]\n                 }","06dace5a":"# Create figure\nfig = go.Figure()\n\n# Constants\nimg_width = 900\nimg_height = 1200\nscale_factor = 0.4\n\n# add plot\nfig.add_trace(go.Scatter(x=[0, img_width * scale_factor], y=[0, img_height * scale_factor], mode=\"markers\", marker_opacity=0))\n\n# Configure axes\nfig.update_xaxes(visible=False, range=[0, img_width * scale_factor])\n\n# disable y-axis visiable\nfig.update_yaxes(visible=False,range=[0, img_height * scale_factor],scaleanchor=\"x\")\n\n# add player image\nfor i in range(11):\n    img = Image.open(\"..\/input\/players\/playerface\/\"+str(player_index[i])+\".webp\")\n    fig.add_layout_image(dict(x=location_3_4_3[i][0], y=location_3_4_3[i][1], sizex=60, sizey=60, xref=\"x\", \n                              yref=\"y\",opacity=1.0,layer=\"above\"\n                              ,source=img))\n# Add background image\nimg = Image.open(\"..\/input\/background\/field.jpg\")\nfig.add_layout_image(dict(x=0,sizex=img_width * scale_factor,y=img_height * scale_factor,\n                          sizey=img_height * scale_factor,xref=\"x\",yref=\"y\",opacity=1.0,layer=\"below\",\n                          sizing=\"stretch\",source=img))\n# Configure other layout\nfig.update_layout(width=img_width * scale_factor, height=img_height * scale_factor, margin={\"l\": 0, \"r\": 0, \"t\": 50, \"b\": 0},\n                  title_font_size=15, title_font_family=\"Dosis\", \n                  title=({'text': \"---Best Squad in The World for Lineup[3,4,3]---\",\n                          'y':0.95,'x':0.5,'xanchor': 'center','yanchor': 'top',}))\nfig.show()","e27914d8":"# select column that i will need to predict\ncol = ['Age', \"Nationality\",'Overall',\"Club\",'Wage',\"Value\", 'Special',\n       'Preferred Foot','Position','Height', 'Weight', 'Release Clause']\n# drop any row that has null values.\nnew_data =df[col].dropna(how=\"any\")\n# open encoder to convert column values to numeric.\nord_enc = OrdinalEncoder()\nfor i in [\"Nationality\", \"Club\", \"Preferred Foot\",\"Position\"]:\n    new_data[i] = ord_enc.fit_transform(new_data[[i]])\n    \nnew_data[\"Value\"] = getValue(new_data[\"Value\"])\nnew_data[\"Wage\"] = getValue(new_data[\"Wage\"])\nnew_data[\"Release Clause\"] = getValue(new_data[\"Release Clause\"])\nnew_data[\"Height\"] = get_height(new_data[\"Height\"])\nnew_data[\"Height\"] = new_data[\"Height\"].astype('float64')\nnew_data[\"Weight\"] = get_weight(new_data[\"Weight\"])\nnew_data[\"Weight\"] = new_data[\"Weight\"].astype(\"float64\")\nnew_data.head(10)\n","8b85d9d6":"# plot heatmap that reprsent correlation between columns.\ncolormap=plt.cm.RdBu\nfigure = plt.figure(figsize=(12,12))\nsns.heatmap(new_data.corr(),linewidths=0.1,vmax=1.0, square=True, cmap=colormap, linecolor='white', annot=True)\nplt.title(\"Correlations\",size=15)\nplt.xlabel(\"Features\")\nplt.ylabel(\"Features\")\nplt.show()","4ee1ba18":"# from heatmap i select (\"Age\",\"Special\",\"Release Clause\") columns that have relation with Overall.\n# split dataset to train and test dataset.\ntrain, test = train_test_split(new_data[[\"Age\",\"Special\",\"Release Clause\",\"Overall\"]], test_size=0.3, random_state=42)\ntrain.head()","2b91cb75":"# split train and test data to features and target.\nX_train = train.drop([\"Overall\"], axis=1)\nY_train = train[\"Overall\"]\nX_test  = test.drop([\"Overall\"], axis=1)\nY_test = test[\"Overall\"]\nX_train.shape, Y_train.shape, X_test.shape","b01f4ee7":"# applay liner regression on data to train model.\nLR = LinearRegression().fit(X_train,Y_train)\n# get predict values after training model.\nY_predict = LR.predict(X_test)\n# print accuracy of model of prediction\nprint(f\"Overall_Prediction_Score = {round(r2_score(Y_test, Y_predict)*100,2)} %\")","a541f4e3":"# plot Y_test with Y_predict\nplt.scatter(Y_test, Y_predict)\nplt.show()","da2f3cb1":"this hist show that Age distribution is like normal distribution.","c5895ecd":"23% of players is played by using left foot.","0d427c09":"Pridiction score is 66%, is it good for prediction?","ca82314d":"### 8- Distribution of all players value  and calcuate The average of players value.","2f95b2db":"### 3- Calculate the most 10 country that have players in FIFA 19","0192b4ce":"### This notebook divided into 5 parts:\n\n> EDA\n\n> Visualiztion\n\n> MESSI VS RONALDO Attribute Details\n\n> Dream Team\n\n> Machine learning ","7c7da791":"wish to see that squad in real life :)","730edf28":"Is player attributes Details good for rating or not?","abd90765":"### 7- Popular 10 players for ST, GK, LW, RF Position ","08bafbc9":"\n### 13- Calculate ATTRIBUTE DETAILS for any player you want.","5397ca30":"### In this NoteBook:\n#### Calculate some distribution like Age, Overall Rating, Value, Weight and Height.\n#### Draw some graph to get relation between col like Weight VS height, Prefferred foot.\n#### Calculate Top 10 for most Countries have players, most Position, Expensive Teams.\n#### Calculate player attirbutes Details test on (MESSI VS RONALDO).\n#### Calculate best squad in the world and plot it based on Lineup [3,4,3].\n#### Predict Overall Ration using ML (Linear Regression).","7636ca76":"### 9- Overall rating distribution and most fit line for it.","6c2f8437":"### 16- Show the best squad in the world by choosing Lineup.","bdb61ed7":"### 11- Calculate the relation between weight and height for all players(corr. and distribution)","4d19aa66":"## Machine Learing","bd7726e8":"### 5- Preferred foot analysis.","3db71463":"### 14- Radar Plot for player attribute's Details","91cdcb53":"It is normal for me this sorted of country, is you agree with me?","7042cb9b":"### 18- Predict Overall Rating for player using ML (Liner Regression).","2381a233":"### FIFA 19 | Dream Team \u26bd\ufe0f Visualization, Data Analysis and ML.\n[![newplot.png](https:\/\/i.postimg.cc\/Wp94DGs2\/newplot.png)](https:\/\/postimg.cc\/grZpQ6w5)\n#### At the end of this notebook, I get this squad is the best team in the world, follow code to kown ,how i get it.\n####  I think it will be very helpful for me, if you like this kernel an upvote would be great.","39f076b1":"### 6- Show most Position in Playground that has player in FIFA 19.","11b1173d":"### Player Attributes select player index form dataset","32c11c24":"Did you expect this sorted for most expensive team?","a6aeeaa9":"## EDA","a16a16a2":"<!-- ### 2-show top 10 country that has player in FIFA_19 -->","3daa9306":"### 15- Radar plot for  player's skills.","b7ebfdd6":"### 2- Read FIFA 19 dataset and show info and describe columns form it.","4ffa094f":"### 17- Plot the best squad on playground based on Lineup [3,4,3].","fd39bc46":"### 1- Import python medules which i will uses in this task.","1f58c511":"distribution of Overall rating is normal distribution, so i get most fit normal line.","6cc9237d":"## Dream Team","6c0948d9":"### 4- Show Distribution of Age for all players","b922a72f":"## Data Visaulization","4606a2c1":"### 10- Make Analysis for Real Madrid Club.","17d2c791":"### 12- Top 10 expensive teams in the world","11ad5e42":"Oh K.Benzema is the 12th player in values, i don't know that :)","8563076d":"which columns has a big relation with Overall Rating columns?","212a4ffc":"## Attribute Details for Players"}}