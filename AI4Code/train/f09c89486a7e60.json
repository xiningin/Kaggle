{"cell_type":{"69ae053d":"code","fb44d4cf":"code","c6e62162":"code","7983cff9":"code","7c18a27e":"code","3f41e7b0":"code","12c00124":"code","5a18bf12":"markdown","85bf75a7":"markdown","a0781278":"markdown","3e57814e":"markdown","32c2a22b":"markdown","56e9c813":"markdown"},"source":{"69ae053d":"import numpy as np\nimport pandas as pd\nimport os\nimport warnings\nimport random\nimport torch \nfrom torch import nn\nfrom sklearn.model_selection import StratifiedKFold\nimport tokenizers\nfrom transformers import RobertaModel, RobertaConfig\n\nwarnings.filterwarnings('ignore')","fb44d4cf":"def seed_everything(seed_value):\n    random.seed(seed_value)\n    np.random.seed(seed_value)\n    torch.manual_seed(seed_value)\n    os.environ['PYTHONHASHSEED'] = str(seed_value)\n    \n    if torch.cuda.is_available(): \n        torch.cuda.manual_seed(seed_value)\n        torch.cuda.manual_seed_all(seed_value)\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = True\n\nseed = 42\nseed_everything(seed)","c6e62162":"class TweetDataset(torch.utils.data.Dataset):\n    def __init__(self, df, max_len=96):\n        self.df = df\n        self.max_len = max_len\n        self.labeled = 'selected_text' in df\n        self.tokenizer = tokenizers.ByteLevelBPETokenizer(\n            vocab_file='..\/input\/roberta-base\/vocab.json', \n            merges_file='..\/input\/roberta-base\/merges.txt', \n            lowercase=True,\n            add_prefix_space=True)\n\n    def __getitem__(self, index):\n        data = {}\n        row = self.df.iloc[index]\n        \n        ids, masks, tweet, offsets = self.get_input_data(row)\n        data['ids'] = ids\n        data['masks'] = masks\n        data['tweet'] = tweet\n        data['offsets'] = offsets\n        \n        if self.labeled:\n            start_idx, end_idx = self.get_target_idx(row, tweet, offsets)\n            data['start_idx'] = start_idx\n            data['end_idx'] = end_idx\n        \n        return data\n\n    def __len__(self):\n        return len(self.df)\n    \n    def get_input_data(self, row):\n        tweet = \" \" + \" \".join(row.text.lower().split())\n        encoding = self.tokenizer.encode(tweet)\n        sentiment_id = self.tokenizer.encode(row.sentiment).ids\n        ids = [0] + sentiment_id + [2, 2] + encoding.ids + [2]\n        offsets = [(0, 0)] * 4 + encoding.offsets + [(0, 0)]\n                \n        pad_len = self.max_len - len(ids)\n        if pad_len > 0:\n            ids += [1] * pad_len\n            offsets += [(0, 0)] * pad_len\n        \n        ids = torch.tensor(ids)\n        masks = torch.where(ids != 1, torch.tensor(1), torch.tensor(0))\n        offsets = torch.tensor(offsets)\n        \n        return ids, masks, tweet, offsets\n        \n    def get_target_idx(self, row, tweet, offsets):\n        selected_text = \" \" +  \" \".join(row.selected_text.lower().split())\n\n        len_st = len(selected_text) - 1\n        idx0 = None\n        idx1 = None\n\n        for ind in (i for i, e in enumerate(tweet) if e == selected_text[1]):\n            if \" \" + tweet[ind: ind+len_st] == selected_text:\n                idx0 = ind\n                idx1 = ind + len_st - 1\n                break\n\n        char_targets = [0] * len(tweet)\n        if idx0 != None and idx1 != None:\n            for ct in range(idx0, idx1 + 1):\n                char_targets[ct] = 1\n\n        target_idx = []\n        for j, (offset1, offset2) in enumerate(offsets):\n            if sum(char_targets[offset1: offset2]) > 0:\n                target_idx.append(j)\n\n        start_idx = target_idx[0]\n        end_idx = target_idx[-1]\n        \n        return start_idx, end_idx\n\ndef get_test_loader(df, batch_size=32):\n    loader = torch.utils.data.DataLoader(\n        TweetDataset(df), \n        batch_size=batch_size, \n        shuffle=False, \n        num_workers=2)    \n    return loader","7983cff9":"class TweetModel(nn.Module):\n    def __init__(self):\n        super(TweetModel, self).__init__()\n        \n        config = RobertaConfig.from_pretrained(\n            '..\/input\/roberta-base\/config.json', output_hidden_states=True)    \n        self.roberta = RobertaModel.from_pretrained(\n            '..\/input\/roberta-base\/pytorch_model.bin', config=config)\n        self.dropout = nn.Dropout(0.5)\n        self.fc = nn.Linear(config.hidden_size, 2)\n        nn.init.normal_(self.fc.weight, std=0.02)\n        nn.init.normal_(self.fc.bias, 0)\n\n    def forward(self, input_ids, attention_mask):\n        _, _, hs = self.roberta(input_ids, attention_mask)\n         \n        x = torch.stack([hs[-1], hs[-2], hs[-3], hs[-4]])\n        x = torch.mean(x, 0)\n        x = self.dropout(x)\n        x = self.fc(x)\n        start_logits, end_logits = x.split(1, dim=-1)\n        start_logits = start_logits.squeeze(-1)\n        end_logits = end_logits.squeeze(-1)\n                \n        return start_logits, end_logits","7c18a27e":"def get_selected_text(text, start_idx, end_idx, offsets):\n    selected_text = \"\"\n    for ix in range(start_idx, end_idx + 1):\n        selected_text += text[offsets[ix][0]: offsets[ix][1]]\n        if (ix + 1) < len(offsets) and offsets[ix][1] < offsets[ix + 1][0]:\n            selected_text += \" \"\n    return selected_text","3f41e7b0":"%%time\n\ntest_df = pd.read_csv('..\/input\/tweet-sentiment-extraction\/test.csv')\ntest_df['text'] = test_df['text'].astype(str)\ntest_loader = get_test_loader(test_df)\npredictions = []\nmodels = []\nskf = StratifiedKFold(n_splits=10, shuffle=True, random_state=seed)\n\nfor fold in range(skf.n_splits):\n    model = TweetModel()\n    model.cuda()\n    model.load_state_dict(torch.load(f'..\/input\/tweet-sentiment-roberta-pytorch-train\/roberta_fold{fold+1}.pth'))\n    model.eval()\n    models.append(model)\n\nfor data in test_loader:\n    ids = data['ids'].cuda()\n    masks = data['masks'].cuda()\n    tweet = data['tweet']\n    offsets = data['offsets'].numpy()\n\n    start_logits = []\n    end_logits = []\n    for model in models:\n        with torch.no_grad():\n            output = model(ids, masks)\n            start_logits.append(torch.softmax(output[0], dim=1).cpu().detach().numpy())\n            end_logits.append(torch.softmax(output[1], dim=1).cpu().detach().numpy())\n\n    start_logits = np.mean(start_logits, axis=0)\n    end_logits = np.mean(end_logits, axis=0)\n    for i in range(len(ids)):    \n        start_pred = np.argmax(start_logits[i])\n        end_pred = np.argmax(end_logits[i])\n        if start_pred > end_pred:\n            pred = tweet[i]\n        else:\n            pred = get_selected_text(tweet[i], start_pred, end_pred, offsets[i])\n        predictions.append(pred)","12c00124":"sub_df = pd.read_csv('..\/input\/tweet-sentiment-extraction\/sample_submission.csv')\nsub_df['selected_text'] = predictions\nsub_df['selected_text'] = sub_df['selected_text'].apply(lambda x: x.replace('!!!!', '!') if len(x.split())==1 else x)\nsub_df['selected_text'] = sub_df['selected_text'].apply(lambda x: x.replace('..', '.') if len(x.split())==1 else x)\nsub_df['selected_text'] = sub_df['selected_text'].apply(lambda x: x.replace('...', '.') if len(x.split())==1 else x)\nsub_df.to_csv('submission.csv', index=False)\nsub_df.head()","5a18bf12":"### Notice in this notebook\n\n- Important handling for Question-Answering models\n        ids = [0] + sentiment_id + [2, 2] + encoding.ids + [2]\n        offsets = [(0, 0)] * 4 + encoding.offsets + [(0, 0)]\n\n<br>\n\n- Text is lowercased. Notice:\n    - The use of `lower()`\n    - ByteLevelBPETokenizer is `lowercase`\n\n<br>\n\n- Although Huggingface has a ready-to-use Question-Answering model (class RobertaForQuestionAnswering), we are not using it; we DIY a Question-Answering model by taking the raw output of a Roberta model and specifying the Question-Answering logic in `forward()`. One of the purposes of doing so is to get the opportunity to custimize (e.g. averaging the last four output layers). \n  \n  The `forward()` of Roberta or Bert question answering contains the following steps:\n  - The Roberta model outputs hidden states\n  - Get the last one or the last a few layers of the hidden states\n  - Use a fully connected layer to map `hidden_size` to 2\n  - Split to start_logits and end_logits\n  \n  Then loss is calculated.\n\n<br>\n\n- The output of the model would go through `softmax`, before going through `argmax`. The `softmax` makes sure that output values lie in the range [0,1] and sum to 1, so that it makes sense to element-wise add 10 lists of output values from 10 different models (10-fold split) and then take the average, before going through `argmax`.\n\n<br>\n\n- Code structure of this notebook:\n\n        class TweetDataset\n            def __init__\n            def __getitem__\n                process one tweet\n                return a dict of information about this tweet\n        class TweetModel\n            def __init__\n            def forward\n                return start_logits, end_logits\n\n        load all models and set them to eval mode\n\n        for each batch from DataLoader\n            for each model\n                with torch.no_grad()\n                    model predict\n            average the predictions\n            extract the answer text for each tweet\n\n### Changes compared to the [original notebook](https:\/\/www.kaggle.com\/shoheiazuma\/tweet-sentiment-roberta-pytorch):\n- Split into two notebooks (train and inference)\n- Added early stopping, and used one of the following manipulations to the Roberta output in `forward()`\n    - Averaged the last four layers (Private 0.71557, Public 0.71521)\n        - Further added learning rate scheduler and fine tuned, and added memory cleaning (THIS RUN) (Private 0.71620, Public 0.71286)\n    - Concatenated last hidden layer and the third last layer, instead of averaging the last four layers (Private 0.71647, Public 0.71240)\n    - Reduced to use only the last one layer of hidden layer instead of averaging the last four layers (Private 0.71439, Public 0.71240)\n    \n### View the [training notebook here](https:\/\/www.kaggle.com\/kanruwang\/tweet-sentiment-roberta-pytorch-train)\n\n\n# Libraries","85bf75a7":"# Seed","a0781278":"# Inference","3e57814e":"# Submission","32c2a22b":"# Data Loader","56e9c813":"# Model"}}