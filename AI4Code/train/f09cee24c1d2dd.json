{"cell_type":{"bebc03a8":"code","36d75e88":"code","0e981955":"code","35db439d":"code","184d6044":"code","b70c6176":"code","3eee1e77":"code","86084ca2":"code","1dec8053":"code","3ebe8e96":"code","904fcd41":"code","7501023b":"code","dfa875db":"code","a22a3a99":"code","59e41832":"code","8b27d605":"code","48530bfb":"code","133d93bf":"code","db842589":"code","940cbc90":"code","461379f6":"code","89c215ba":"code","e60ee1f5":"code","c8378473":"code","f91392a4":"code","37aa38bb":"code","f1f34366":"code","3c8f6ccd":"code","774dc15b":"code","359ef71e":"code","aec5bd87":"code","38ce4330":"code","511ab783":"code","3bf01a7d":"code","f0571d30":"code","b195a6ed":"code","cae3339d":"code","46befb1f":"code","3f8eb7e5":"code","0892cc41":"code","d0647141":"code","ae8795a8":"code","e185983d":"code","92e41fa2":"code","9550ef61":"code","6412b675":"code","c27c987b":"code","7e103933":"markdown"},"source":{"bebc03a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# Any results you write to the current directory are saved as output.","36d75e88":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\n!pip install fastai\nimport fastai\n\nfrom fastai import *\nfrom fastai.vision import *\n\n# from torchvision.models import *\n# import pretrainedmodels\n\nfrom utils import *\nimport sys\n\nfrom fastai.callbacks.hooks import *\n\nfrom fastai.callbacks.tracker import EarlyStoppingCallback\nfrom fastai.callbacks.tracker import SaveModelCallback","0e981955":"path = Path('..\/input\/best-artworks-of-all-time\/images\/images')","35db439d":"tfms = get_transforms(max_rotate= 10.,max_zoom=1., max_lighting=0.20, do_flip=False,\n                      max_warp=0., xtra_tfms=[flip_lr(), brightness(change=(0.3, 0.60), p=0.7), contrast(scale=(0.5, 2), p=0.7),\n                                              crop_pad(size=600, padding_mode='border', row_pct=0.,col_pct=0.),\n                                              rand_zoom(scale=(1.,1.5)), rand_crop(),\n                                              perspective_warp(magnitude=(-0.1,0.1)),\n                                              symmetric_warp(magnitude=(-0.1,0.1)) ])\n\nsrc = (ImageList.from_folder(path)\n        .split_by_rand_pct(0.2, seed=42)\n        .label_from_folder())","184d6044":"data = (src.transform(tfms, resize_method=ResizeMethod.CROP, padding_mode='border', size=128)\n        .databunch(bs=64, num_workers=0)\n        .normalize(imagenet_stats))","b70c6176":"data.show_batch()","3eee1e77":"print(f'Classes: \\n {data.classes}')","86084ca2":"learn = cnn_learner(data, models.resnet50, metrics=accuracy, model_dir=\"\/temp\/model\" ).mixup()","1dec8053":"learn.freeze()\nlearn.lr_find()\nlearn.recorder.plot(suggestion=True)","3ebe8e96":"lr=1e-3\nlearn.fit_one_cycle(2, max_lr=slice(1e-2), wd = (1e-6, 1e-4, 1e-2), pct_start=0.5)","904fcd41":"learn.unfreeze()\nlearn.lr_find()\nlearn.recorder.plot(suggestion=True)","7501023b":"learn.fit_one_cycle(2, max_lr = slice(5e-6,lr\/5), wd=(1e-6, 1e-4, 1e-2), pct_start=0.5)","dfa875db":"data_big = (src.transform(tfms, resize_method=ResizeMethod.CROP, padding_mode='border', size=256)\n        .databunch(bs=64, num_workers=0)\n        .normalize(imagenet_stats))\n\nlearn.data = data_big","a22a3a99":"learn.freeze()\nlearn.lr_find()\nlearn.recorder.plot(suggestion=True)","59e41832":"lr = 1e-5\nlearn.fit_one_cycle(2, max_lr=slice(lr), wd=(1e-6, 1e-4, 1e-2), pct_start=0.5)","8b27d605":"learn.unfreeze()\nlearn.lr_find()\nlearn.recorder.plot(suggestion=True)","48530bfb":"learn.fit_one_cycle(2, max_lr=slice(1e-6, 1e-4), wd=(1e-6, 1e-4, 1e-2), pct_start=0.5)","133d93bf":"interp = ClassificationInterpretation.from_learner(learn)\n\nlosses,idxs = interp.top_losses()\n\nlen(data_big.valid_ds)==len(losses)==len(idxs)","db842589":"interp.plot_top_losses(9, figsize=(15,11))","940cbc90":"interp.plot_confusion_matrix(figsize=(12,12), dpi=60)\n","461379f6":"interp.most_confused(min_val=2)","89c215ba":"learn.save('final_model')","e60ee1f5":"learn.model","c8378473":"class SaveFeatures():\n    features=None\n    def __init__(self, m): \n        self.hook = m.register_forward_hook(self.hook_fn)\n        self.features = None\n    def hook_fn(self, module, input, output): \n        out = output.detach().cpu().numpy()\n        if isinstance(self.features, type(None)):\n            self.features = out\n        else:\n            self.features = np.row_stack((self.features, out))\n    def remove(self): \n        self.hook.remove()","f91392a4":"# Second last layer of the model\nlearn.model[1][4]","37aa38bb":"sf = SaveFeatures(learn.model[1][4])","f1f34366":"_= learn.get_preds(data_big.train_ds)\n_= learn.get_preds(DatasetType.Valid)","3c8f6ccd":"len(sf.features)","774dc15b":"img_path = [str(x) for x in (list(data_big.train_ds.items) +list(data_big.valid_ds.items))]\nlabel = [data_big.classes[x] for x in (list(data_big.train_ds.y.items) +list(data_big.valid_ds.y.items))]\nlabel_id = [x for x in (list(data_big.train_ds.y.items) +list(data_big.valid_ds.y.items))]","359ef71e":"len(img_path), len(label), len(label_id)","aec5bd87":"df_new = pd.DataFrame({'img_path': img_path, 'label': label, 'label_id': label_id})\ndf_new","38ce4330":"array = np.array(sf.features)","511ab783":"x=array.tolist()","3bf01a7d":"df_new['img_repr'] = x","f0571d30":"df_new.head()","b195a6ed":"df_new.shape","cae3339d":"from annoy import AnnoyIndex","46befb1f":"f = len(df_new['img_repr'][0])\nt = AnnoyIndex(f, metric='euclidean')","3f8eb7e5":"f","0892cc41":"t","d0647141":"ntree = 50\n\nfor i, vector in enumerate(df_new['img_repr']):\n    t.add_item(i, vector)\n_  = t.build(ntree)","ae8795a8":"import time\ndef get_similar_images_annoy(img_index):\n    start = time.time()\n    base_img_id, base_vector, base_label  = df_new.iloc[img_index, [0, 3, 1]]\n    similar_img_ids = t.get_nns_by_item(img_index, 8)\n    end = time.time()\n    print(f'{(end - start) * 1000} ms')\n    return base_img_id, base_label, df_new.iloc[similar_img_ids]","e185983d":"base_image, base_label, similar_images_df = get_similar_images_annoy(1943)","92e41fa2":"print(base_label)\nopen_image(base_image)","9550ef61":"similar_images_df","6412b675":"def show_similar_images(similar_images_df):\n    images = [open_image(img_id) for img_id in similar_images_df['img_path']]\n    categories = [learn.data.train_ds.y.reconstruct(y) for y in similar_images_df['label_id']]\n    return learn.data.show_xys(images, categories)","c27c987b":"show_similar_images(similar_images_df)","7e103933":"> **Note** : Code is taken from https:\/\/www.kaggle.com\/abhikjha\/fastai-hooks-and-image-similarity-search and applied to this dataset for understanding the functionality.\n\n"}}