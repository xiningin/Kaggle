{"cell_type":{"dbd0ce38":"code","ea3a82c1":"code","a71fd202":"code","bbdd744b":"code","a12227bf":"code","2861d8aa":"code","5cdd8c65":"code","ead60cd4":"code","815ff060":"code","03447a97":"code","fe0854bf":"code","39c89486":"code","87eb40e6":"code","4bd73b05":"code","12cd12f6":"code","9265cc39":"code","3e8c7db0":"code","a39e11fc":"code","d8c880c1":"code","b4a0d86b":"code","d260663d":"code","e6b1514f":"code","a4b253ac":"code","2920ca1d":"markdown","45322b42":"markdown","dcfa3ac6":"markdown","c5c41e59":"markdown","b438a233":"markdown","ce3ae423":"markdown","f7c8d0d3":"markdown","9c6c55ba":"markdown","b4c86514":"markdown","5dd86861":"markdown","05dc3142":"markdown","9242a957":"markdown","694ac602":"markdown","8694da24":"markdown","b525af81":"markdown","800595ea":"markdown","a64ead96":"markdown","887eacd7":"markdown","d1fe43b3":"markdown"},"source":{"dbd0ce38":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea3a82c1":"from keras.layers import Input, Lambda, Dense, Flatten,Dropout\nfrom keras.models import Model\nimport tensorflow as tf\nfrom keras import regularizers\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import confusion_matrix\nimport numpy as np\nfrom glob import glob\nimport matplotlib.pyplot as plt","a71fd202":"import matplotlib.pyplot as plt #for plotting things\nimport cv2\ntrain_n = \"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\/\"\ntrain_p = \"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\/\"\n#Normal pic \nprint(len(os.listdir(train_n)))\nrand_norm= np.random.randint(0,len(os.listdir(train_n)))\nnorm_pic = os.listdir(train_n)[rand_norm]\nprint('normal picture title: ',norm_pic)\n\nnorm_pic_address = train_n+norm_pic\n\n#Pneumonia\nrand_p = np.random.randint(0,len(os.listdir(train_p)))\n\nsic_pic =  os.listdir(train_p)[rand_norm]\nsic_address = train_p+sic_pic\nprint('pneumonia picture title:', sic_pic)\n\n# Load the images\nnorm_load = cv2.imread(norm_pic_address)\nsic_load = cv2.imread(sic_address)\n\n#Let's plt these images\nf = plt.figure(figsize= (10,6))\na1 = f.add_subplot(1,2,1)\nimg_plot = plt.imshow(norm_load)\na1.set_title('Normal')\n\na2 = f.add_subplot(1, 2, 2)\nimg_plot = plt.imshow(sic_load)\na2.set_title('Pneumonia')","bbdd744b":"IMAGE_SIZE = [224, 224]\n\ntrain_path = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train'\nvalid_path = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/val'\n\n# add preprocessing layer to the front of VGG\nvgg = VGG16(input_shape=(224,224,3), weights='imagenet', include_top=False)\n","a12227bf":"# don't train existing weights\nfor layer in vgg.layers:\n  layer.trainable = False","2861d8aa":"\n  # useful for getting number of classes\nfolders = glob('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train\/*')\nfolders","5cdd8c65":"x = Flatten()(vgg.output)\nx = Dense(400, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\nx = Dense(128, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\nx = Dense(400, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\nprediction = Dense(1, activation='sigmoid')(x)","ead60cd4":"# create a model object\nmodel = Model(inputs=vgg.input, outputs=prediction)\n\n# view the structure of the model\nmodel.summary()","815ff060":"# tell the model what cost and optimization method to use\nopt = tf.keras.optimizers.Adam(learning_rate=0.01)\nmodel.compile(\n  loss='binary_crossentropy',\n  optimizer=\"adam\",\n  metrics=['accuracy']\n)","03447a97":"from keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\nval_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntraining_set = train_datagen.flow_from_directory('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train',\n                                                 target_size = (224, 224),\n                                                 batch_size = 32,\n                                                 class_mode = 'binary')\nval_set = val_datagen.flow_from_directory('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/val',\n                                            target_size = (224, 224),\n                                            batch_size = 32,\n                                            class_mode = 'binary')\n\ntest_set = test_datagen.flow_from_directory('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/test',\n                                            target_size = (224, 224),\n                                            batch_size = 32,\n                                            class_mode = 'binary', shuffle = False)","fe0854bf":"filepath=\"model.{epoch:02d}-{val_loss:.2f}.h5\"\ncheckpoint = tf.keras.callbacks.ModelCheckpoint(filepath, monitor='val_accuracy',save_weights_only=False, verbose=1, save_best_only=False, mode='max')","39c89486":"r = model.fit_generator(\n  training_set,\n  validation_data=val_set,\n  epochs=5,\n  verbose =1,\n  steps_per_epoch=len(training_set),\n  validation_steps=len(val_set),\n  callbacks = [checkpoint]\n)","87eb40e6":"plt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')","4bd73b05":"# accuracies\nplt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","12cd12f6":"import tensorflow as tf\n\nfrom keras.models import load_model\n\nbest_model = load_model('.\/model.04-0.17.h5')","9265cc39":"\n### START CODE HERE ### (1 line)\npreds = best_model.evaluate_generator(test_set, steps = 624)\n### END CODE HERE ###\nprint (\"Loss = \" + str(preds[0]))\nprint (\"Test Accuracy = \" + str(preds[1]))","3e8c7db0":"test_set.reset()\nY_pred = best_model.predict_generator(test_set, (624\/\/32)+1)","a39e11fc":"predict_labels = Y_pred\npredict_labels[predict_labels<0.5] = 0\npredict_labels[predict_labels>=0.5] = 1\npredict_labels","d8c880c1":"orig_labels = test_set.labels\npredict_labels.shape, orig_labels.shape","b4a0d86b":"a = predict_labels.reshape(-1)\nfnames = test_set.filenames\npath = '..\/input\/chest-xray-pneumonia\/chest_xray\/test\/'\nind_misclassified = np.where(a!=orig_labels)[0][0:5]\nfor ind in ind_misclassified:\n    print(\"Original Label: \" + str(orig_labels[ind]))\n    print(\"Predicted Label: \" + str(a[ind]))\n    print(\"Filename: \" + fnames[ind])\n    img = cv2.imread(path+fnames[ind])\n    plt.figure()\n    plt.imshow(img)\n    plt.title(fnames[ind])\n    plt.show()","d260663d":"cm  = confusion_matrix(orig_labels, predict_labels)\nplt.figure()\nplot_confusion_matrix(cm,figsize=(12,8), hide_ticks=True, cmap=plt.cm.Blues)\nplt.xticks(range(2), ['Normal', 'Pneumonia'], fontsize=16)\nplt.yticks(range(2), ['Normal', 'Pneumonia'], fontsize=16)\nplt.show()","e6b1514f":"tn, fp, fn, tp = cm.ravel()\nprint(tn,fp, fn, tp)\nprecision = tp\/(tp+fp)\nrecall = tp\/(tp+fn)\nacc = (tp+tn)\/(tn+fp+fn+tp)\n\nprint(\"Recall of the model is {:.2f}\".format(recall))\nprint(\"Precision of the model is {:.2f}\".format(precision))\nprint(\"Accuracy of the model is {:.2f}\".format(acc))","a4b253ac":"predicted_class_indices=np.argmax(Y_pred,axis=1)\nlabels = (test_set.class_indices)\nlabels2 = dict((v,k) for k,v in labels.items())\npredictions = [labels2[k] for k in predicted_class_indices]\nprint(predicted_class_indices)\nprint (labels2)\nprint (predictions)","2920ca1d":"# 1. **Visualizing Normal and Pneumonia Case**","45322b42":"# 0. **Importing Necessary Modules**","dcfa3ac6":"**Shape of predict_labels and original labels**","c5c41e59":"# 9. **Load the Best Model for evaluation and prediction**","b438a233":"# 5. **Data Augmentation**","ce3ae423":"# 3. **Adding Fully Connected Layers**","f7c8d0d3":"# 7. **Plotting Loss**","9c6c55ba":"**Creating Model**","b4c86514":"# 2. **Loading VGG16 Model**","5dd86861":"**Setting pre-trained layers to not get trained again**","05dc3142":"# 4. **Compile Model**","9242a957":"# 12. **Displaying First Five Missclassified Examples**","694ac602":"**Callback to save the best model**","8694da24":"# 11. **Test Set Prediction**","b525af81":"# 13. **Confusion Matrix**","800595ea":"# 6. **Fit the model**","a64ead96":"# 10. **Test Set Evaluation**","887eacd7":"# 8. **Plotting Accuracy**","d1fe43b3":"**Classifying as either 0 - Normal or 1- Pneumonia**"}}