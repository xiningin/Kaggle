{"cell_type":{"99c60dce":"code","3af8c277":"code","321444a1":"code","f5a42b9f":"code","c4a98c40":"code","6e26c3a9":"code","e0179f3d":"code","5aacab02":"code","de0ebd16":"code","3809f711":"code","aa13ef04":"code","0b4e38fd":"code","dafba2fa":"code","b49f83d8":"code","fda10225":"code","9c3bd1fc":"code","8158911d":"code","529c5972":"code","96d0febb":"code","0aeb54f8":"code","270d0f20":"code","be7cab15":"code","8562e161":"code","d4cce979":"code","49936289":"code","eea1b67e":"code","f5d09bff":"code","dc3d5dd3":"code","6edf7a64":"code","41367db3":"code","72929efd":"code","79c1221f":"code","b5e59ef6":"code","2cb17a43":"code","365fffdd":"code","60c12a1b":"code","6a34eb78":"code","78af6037":"code","e69ae9a7":"code","48e9507d":"code","c98b5e25":"code","80957986":"code","70398873":"code","ea3ec38c":"code","3b6db99b":"code","af1a867c":"code","2389191b":"code","2098065f":"code","df2bf176":"code","aefe17fe":"code","fdd93a0a":"code","9461072d":"code","d045f84b":"code","ec4dc524":"code","b3323c41":"code","21594ee4":"code","efd72925":"code","ea3dfc3c":"code","461f6d7c":"code","827bcc2d":"code","3fd6cf37":"code","bbe8a865":"code","ebfe7750":"code","0d2de14a":"code","f9340c1e":"code","765f9d7e":"code","f999918c":"code","81a6731e":"code","91223a68":"code","458d2db8":"code","657c3e51":"code","f5e2a243":"code","c4d9b69b":"code","47e5ba35":"code","c38e75b1":"code","403d2f77":"code","31c22c09":"code","902e5755":"code","4648577f":"code","935c86bb":"code","d4a202f6":"code","a166d34e":"code","38a97515":"code","48d3f8ef":"code","1b06ab12":"code","f46b54a4":"code","2304b0bc":"code","59545d1d":"code","cb8ac7b6":"markdown","7152f2cd":"markdown","8f472930":"markdown","464c6b1a":"markdown","33b5861b":"markdown","8bd6456f":"markdown","33aa6b03":"markdown","98b36135":"markdown","c0fef5fa":"markdown","509c8d31":"markdown","8bec240b":"markdown","551e86b8":"markdown","5a8737ed":"markdown","5b32969a":"markdown","e5470329":"markdown","53e2efa3":"markdown","1945837f":"markdown","1612e7a9":"markdown","2c592e71":"markdown","71a972fd":"markdown","7d92931d":"markdown","6e1e2a7c":"markdown","0af3295d":"markdown","8d2dafea":"markdown"},"source":{"99c60dce":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns #visualize\nfrom collections import Counter\nimport warnings # don't show warnings\nwarnings.filterwarnings(\"ignore\")\nfrom wordcloud import WordCloud\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom tensorflow.keras import regularizers\nfrom sklearn.metrics import confusion_matrix\n%matplotlib inline","3af8c277":"#Reading Our Dataset with Pandas Library\ndata_fifa20 = pd.read_csv(\"\/kaggle\/input\/fifa-20-complete-player-dataset\/players_20.csv\")\ndata_fifa20.head(8)","321444a1":"data_fifa20.columns","f5a42b9f":"fig, ax = plt.subplots(figsize=(22,20))#This will set the Width and Height of our visuals\nsns.set_context('poster')#This affects things like the size of the labels, lines, and other elements of the plot\ncorr = data_fifa20.corr()#Extent Of Correlation in our Dataset\nsns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns,cmap='flare')#Heatmap Declaration & visualization\nax.set_title('Multi-Collinearity of FIFA 2020 Attribute')#Title for Our Graph\n# plt.savefig('heatmap.png')","c4a98c40":"# relationship between player acceleration and SprintSpeed\n\nsns.set_context('paper')\ndata_lm = data_fifa20.head(100)\nsns.pairplot(data_lm, vars=['height_cm','weight_kg','pace','physic','overall','power_stamina'],kind='reg')\n# plt.savefig('pairplot.png')","6e26c3a9":"#WordCloud Of Nationality\nd_frame = data_fifa20.nationality\n\nplt.subplots(figsize=(15,15))\nwordcloud = WordCloud(\n                   background_color='white',\n                        width = 2000,\n                        height = 1200\n    ).generate(\" \".join(d_frame))\n\nplt.imshow(wordcloud)\nplt.axis('off')\n# plt.savefig('wordcloud.png')","e0179f3d":"data_fifa20.groupby(\"nationality\").long_name.count().sort_values(ascending=False).head(10)\/100","5aacab02":"# problem : Top 20 players overall\n# We get the names and overals from the data\nOverall = data_fifa20[\"overall\"]\nfootballer_name = data_fifa20[\"short_name\"]\n\n# We create dataframe(Name,Overall)\ndata = pd.DataFrame({'PlayerName': footballer_name,'BestOverallRating':Overall})\n\"\"\"\ndata = { example = (messi : 94) }\n\"\"\"\nx = data.PlayerName.head(20)  # comes in order from large to small\ny = data.BestOverallRating.head(20)\n\n# visualize\nsns.set_context('talk')\nplt.figure(figsize=(15,10))\n\"\"\"\ncubehelix_palette = This produces a colormap with linearly-decreasing (or increasing) brightness.\n(sets according to the number of data)\n\"\"\"\nax= sns.barplot(x=y, y=x,palette ='gray') # x = Name, y = Overall\nplt.xticks(rotation= 90)\nplt.xlabel('Overall', size = 20) # x-axis name\nplt.ylabel('Player Name', size = 20 ) # y-axis name\nplt.title('Fifa 20, Top 20 players base on Best Overall Rating') # title\nplt.show()\n#plt.savefig('Top20.png')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x()-0.1, p.get_height()+30))\n\nfig = ax.get_figure()\n# fig.savefig('top_players.png') ","de0ebd16":"# Which foot does the footballers in fifa 21 use more?\npreferred_foot_labels = data_fifa20[\"preferred_foot\"].value_counts().index # (Right,Left) \npreferred_foot_values = data_fifa20[\"preferred_foot\"].value_counts().values # (Right Values, Left Values)\nexplode = (0, 0.1) # used to separate a slice of cake\n\n# Visualize\nplt.figure(figsize = (7,7))\nplt.pie(preferred_foot_values, labels=preferred_foot_labels,explode=explode, autopct='%1.2f%%')\nplt.title('Football Players Preferred Feet',color = 'darkred',fontsize = 15)\nplt.legend()\n#plt.show()\n# plt.savefig('Piechart.jpg')","3809f711":"# Market Value of a Player ?(for 45 players)\nsns.set_context('paper')\nvalue = list(data_fifa20[\"value_eur\"]) \n#value = [float(each.replace('\u20ac','').replace('M','').replace('K','')) for each in value]    \nname = data_fifa20[\"short_name\"]\n\ndata = pd.DataFrame({ 'PlayerValue' : value,'PlayerName':name})\n\nx = data.PlayerName.head(100)\nvalue_y = data.PlayerValue.head(100) # value_y = footballer value(30 players)\n\n# visualize\nf,ax1 = plt.subplots(figsize =(20,10))\n\nsns.pointplot(x=x,y=value_y,color='black',alpha=0.9) # alpha = transparency(0) or opacity(1)\n\nplt.xticks(rotation= 90) # Position of text on the x-axis\n\nplt.xlabel('Footballer Name',fontsize = 25,color='green') # x-axis name\n\nplt.ylabel('Values',fontsize = 25,color='green') # y-axis name\n\nplt.title('2020 Most Valuable Player ',fontsize = 30,color='green') # title\nplt.grid()","aa13ef04":"#Converting Our Datatime column to Numerical Column @year e.g 1996 and @Month e.g 11th month\ndata_fifa20['dob'] = pd.to_datetime(data_fifa20['dob'])\ndata_fifa20['year']= data_fifa20['dob'].dt.year\ndata_fifa20['month']= data_fifa20['dob'].dt.month\n\n#Subtract 2021 from Date Of Birth to get Age\ntoday = pd.to_datetime('2021-10-28')\ndata_fifa20['age'] = today.year - data_fifa20['dob'].dt.year","0b4e38fd":"#Fifa 20 Player's Age\n\nsns.set_context('paper')\nplt.figure(figsize=(26,14))\nax = data_fifa20.groupby('age')['short_name'].count().plot.bar()\nplt.title('Age of Fifa Player',fontsize=30)\nplt.xticks(fontsize = 18,rotation=0)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x()-0.1, p.get_height()+30))\nplt.xlabel('Age',fontsize=24)\nplt.ylabel('Frequency',fontsize=24)\nplt.savefig('ageplot.png')\n","dafba2fa":"def transform_object_cols(col):\n    new_values=[]\n    for j in col:\n        if('+' in str(j)):\n            k=str(j).split('+')\n            new_val=int(k[0])+int(k[1])\n            new_values.append(new_val)\n        elif('-' in str(j)):\n            k=str(j).split('-')\n            new_val=int(k[0])-int(k[1])\n            new_values.append(new_val)\n        else:\n            new_val=int(j)\n            new_values.append(new_val)\n    return new_values","b49f83d8":"def clean_fifa_data(df):\n    \n    #Working with Null Values in String Columns\n    df['player_tags']=df['player_tags'].fillna('')\n    df['loaned_from']=df['loaned_from'].fillna('Unknown')\n    df['joined']=df['joined'].fillna('2019-07-10')\n    df['contract_valid_until']=df['contract_valid_until'].fillna(2019.0)\n    df['nation_position']=df['nation_position'].fillna('Unknown')\n    df['release_clause_eur']=df['release_clause_eur'].fillna(0)\n    \n    #Working with Null Values in String Columns\n    for i in df.columns:\n        if df[i].isna().sum()>0:\n            df[i]=df[i].fillna(0)\n            \n    # Find Columns to remove + and -\n    columns=list(df.columns)\n    trans=[]\n    for c in range(len(columns)):\n        if c>=columns.index('attacking_crossing'):\n            trans.append(columns[c])\n            \n    #Use Transform Function to transoform Data \n    df[trans]=df[trans].transform(transform_object_cols)\n    \n    return df","fda10225":"def add_dummy(col_name,df):\n    if col_name not in df.columns:\n        print('Column not in DataFrame')\n        return\n    else:\n        df=pd.concat([df,pd.get_dummies(df[col_name],prefix=col_name[:2])],axis=1)\n        df.drop(col_name,axis=1,inplace=True)\n        if col_name not in df.columns:\n            print('Dummies Succesfully Created')\n    return df\ndef join_dataframe(df1,df2,col_name):\n    #Let's start by stripping the data string \n    df1[col_name]=df1[col_name].astype('string').str.strip()\n    df2[col_name]=df2[col_name].astype('string').str.strip()\n    joined=df1.merge(df2,on=col_name)\n    return joined\ndef drop_cols(df):\n    df_new = df.drop(['player_url','sofifa_id','long_name','wage_eur','dob','wage_eur','nationality','team_position','player_positions','real_face','body_type','player_tags','loaned_from','joined','nation_position','player_traits','nation_jersey_number'],axis=1)\n    return df_new","9c3bd1fc":"#Loading the data\nfifa19=pd.read_csv('\/kaggle\/input\/fifa-20-complete-player-dataset\/players_19.csv')\nfifa20=pd.read_csv('\/kaggle\/input\/fifa-20-complete-player-dataset\/players_20.csv')","8158911d":"fifa19.head()","529c5972":"#Cleaning Data \nfifa19=clean_fifa_data(fifa19)\nfifa20=clean_fifa_data(fifa20)","96d0febb":"#Splitting data into predictors and response variable\nX=fifa19.drop(['overall','player_url','sofifa_id','short_name','long_name','dob','nationality','team_position','club','potential','player_positions','real_face','body_type','player_tags','loaned_from','joined','nation_position','player_traits','nation_jersey_number'],axis=1)\nY=fifa19['overall']","0aeb54f8":"#Adding dummy variables for categorical columns\nX = add_dummy('preferred_foot',X)\nX = add_dummy('work_rate',X)","270d0f20":"X = X.drop('wo_Low\/Low',axis = 1)","be7cab15":"X.head()","8562e161":"#Splitting the data into test and train\nx_train,x_val,y_train,y_val=train_test_split(X,Y,train_size=0.8)","d4cce979":"#Standardizing the data for the neural network\nscaler=StandardScaler()\nx_train=scaler.fit_transform(x_train)\nx_val=scaler.transform(x_val)","49936289":"x_train.shape","eea1b67e":"#Creating our neural network\ninputs=keras.Input(shape=93)\nx=keras.layers.Dense(16,activation='relu',kernel_regularizer=tf.keras.regularizers.l1_l2(l1=1e-3, l2=1e-4))(inputs)\nx=keras.layers.Dense(16,activation='relu',kernel_regularizer=tf.keras.regularizers.l1_l2(l1=1e-3, l2=1e-4))(x)\nx=keras.layers.Dense(16,activation='relu',kernel_regularizer=tf.keras.regularizers.l1_l2(l1=1e-3, l2=1e-4))(x)\n# x=keras.layers.Dense(16,activation='relu')(x)\noutputs=keras.layers.Dense(1,activation='linear')(x)\nmodel=keras.Model(inputs,outputs)\nmodel.compile(optimizer='adam',loss='mse',metrics=['mse'])\nmodel.summary()","f5d09bff":"#Fitting our model to the train data and validating it\nhistory =model.fit(x_train,y_train,batch_size=1024,epochs=800,validation_split=0.2)","dc3d5dd3":"#Evaluating our model on the validation set\nmodel.evaluate(x_val,y_val)","6edf7a64":"#Predicting model on the validation set\ny_pred=model.predict(x_val)","41367db3":"#Plotting the train and validation loss\nfig,ax =plt.subplots(figsize=(10,10))\nplt.plot(history.history['loss'],label='Train Loss',linewidth=10)\nplt.plot(history.history['val_loss'],label='validation Loss',linewidth=5)\nplt.legend()\nplt.title('Loss Convergence',fontsize=18)\nplt.ylabel('Loss',fontsize=16)\nplt.xlabel('Epochs',fontsize=16)","72929efd":"#Crating the test set filtered by the clubs mentioned\ntest_df_fifa_20 = fifa20[fifa20['club'].isin(['FC Barcelona','FC Bayern M\u00fcnchen','Real Madrid','Paris Saint-Germain','Juventus','Manchester City','Liverpool','Manchester United'])]","79c1221f":"#Dropping unwanted columns\nX_test = test_df_fifa_20.drop(['overall','player_url','sofifa_id','short_name','long_name','dob','nationality','team_position','club','potential','player_positions','real_face','body_type','player_tags','loaned_from','joined','nation_position','player_traits','nation_jersey_number'],axis=1)","b5e59ef6":"#Adding dummy variables for categorical columns\n#X_test['work_rate'] = X_test['work_rate'].astype('category')\nX_test = add_dummy('preferred_foot',X_test)\nX_test=pd.concat([X_test,pd.get_dummies(X_test['work_rate'],prefix='work_rate'[:2])],axis=1)\nX_test.drop('work_rate',axis=1,inplace=True)\n","2cb17a43":"X_test.head()","365fffdd":"#Standardizing the test set by the values computed for the training set\nX_test=scaler.transform(X_test)","60c12a1b":"#Evaluating the model on the test set\nmodel.evaluate(X_test,test_df_fifa_20['overall'])","6a34eb78":"#Dataset for the classification\nB=fifa19.copy()","78af6037":"B.head(5)","e69ae9a7":"# We are categorising the wider categories to simpler Striker, Midfielder and Forward \ndef transform_positions(df):\n    for i in ['ST', 'CF', 'LF', 'LS', 'LW', 'RF', 'RS', 'RW']:\n        df.loc[df['player_position'] == i , 'player_position'] = 'Striker' \n    \n    for i in ['CAM', 'CDM', 'LCM', 'CM', 'LAM', 'LDM', 'LM', 'RAM', 'RCM', 'RDM', 'RM']:\n        df.loc[df['player_position'] == i , 'player_position'] = 'Midfielder' \n    \n    for i in ['CB', 'LB', 'LCB', 'LWB', 'RB', 'RCB', 'RWB','GK']:\n        df.loc[df['player_position'] == i , 'player_position'] = 'Defender' \n","48e9507d":"#Extracting Primary Player Positions \ndef select_pos(col):\n    new_val=[]\n    for i in col:\n        x=str(i).split(',')[0]\n        new_val.append(x)\n    return new_val\n    ","c98b5e25":"#Creating New Player Positon Column\nB['player_position']=select_pos(B['player_positions'])","80957986":"#Dropping the old column\nB.drop(['player_positions'],axis=1,inplace=True)","70398873":"#Converting Player Positions To The new Striker, Midfielder, Defender Classes\ntransform_positions(B)","ea3ec38c":"#Confirming our changes\nB['player_position'].nunique()","3b6db99b":"#dropping unecessary Columns\nX_B=B.drop(['overall','player_url','sofifa_id','short_name','long_name','dob','nationality','team_position','club','potential','work_rate','body_type','real_face','player_tags','loaned_from','joined','nation_position','player_traits','nation_jersey_number','wage_eur'],axis=1)","af1a867c":"#Adding Dummy Variables for categorical Data \nX_B=pd.concat([X_B,pd.get_dummies(X_B['preferred_foot'],prefix='Foot_')],axis=1)\nX_B.drop('preferred_foot',inplace=True,axis=1)\ny_B=pd.get_dummies(B['player_position'],prefix_sep='')\ndummies=pd.get_dummies(X_B['player_position'],prefix_sep='')\ndummy_cols=dummies.columns\nX_B_New=pd.concat([X_B,dummies],axis=1)\nX_B_New.drop('player_position',axis=1)\n","2389191b":"#Splitting our Dataset into train and test with stritified classes\nx_train,x_val,y_train,y_val=train_test_split(X_B_New,y_B,train_size=0.8,stratify=X_B_New[dummy_cols])","2098065f":"#Dropping Response Columns\nx_train.drop('player_position',axis=1,inplace=True)\nx_val.drop('player_position',axis=1,inplace=True)\n\nx_train.drop(['Defender','Midfielder','Striker'],axis=1,inplace=True)\nx_val.drop(['Defender','Midfielder','Striker'],axis=1,inplace=True)","df2bf176":"#Converting Data Frame into numpy arrays \nx_train=x_train.values\nx_val=x_val.values\ny_train=y_train.values\ny_val=y_val.values","aefe17fe":"#Standardizing our Data \nscaler1=StandardScaler()\nx_train=scaler1.fit_transform(x_train)\nx_val=scaler1.transform(x_val)","fdd93a0a":"x_train.shape","9461072d":"#Constructing our model\ninputs=keras.Input(shape=84)\n\n#Hidden Layers\n\nx=keras.layers.Dense(8,activation='relu', kernel_regularizer=regularizers.l1_l2(l1=1e-5, l2=1e-4))(inputs)\nx=keras.layers.Dense(8,activation='relu', kernel_regularizer=regularizers.l1_l2(l1=1e-5, l2=1e-4))(x)\nx=keras.layers.Dense(8,activation='relu', kernel_regularizer=regularizers.l1_l2(l1=1e-5, l2=1e-4))(x)\n# x=keras.layers.Dense(16,activation='relu')(x)\n\n#Output Layer\n\noutputs=keras.layers.Dense(3,activation='softmax')(x)","d045f84b":"#Threading our model together \nmodel2=keras.Model(inputs,outputs)\nmodel2.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy',tf.keras.metrics.Recall(),tf.keras.metrics.Precision()])\nmodel2.summary()","ec4dc524":"history2=model2.fit(x_train,y_train,batch_size=1024,validation_split=0.2,epochs=250)","b3323c41":"#Epochs Vs Accuracy Graph\nfig,ax =plt.subplots(figsize=(10,10))\nplt.plot(history2.history['accuracy'],label='Train Loss',linewidth=4)\nplt.plot(history2.history['val_accuracy'],label='validation Loss',linewidth=4)\nplt.legend()\nplt.title('Accuracy Over Epochs',fontsize=18)\nplt.ylabel('Accuracy',fontsize=16)\nplt.xlabel('Epochs',fontsize=16)","21594ee4":"#Evaluating Our Model in Validation Set\nmodel2.evaluate(x_val,y_val)","efd72925":"#Filtering Data Sets on the Required Clubs\ntest_df_fifa_20 = fifa20[fifa20['club'].isin(['FC Barcelona','FC Bayern M\u00fcnchen','Real Madrid','Paris Saint-Germain','Juventus','Manchester City','Liverpool','Manchester United'])]\ntest_df_fifa_19 = B[B['club'].isin(['FC Barcelona','FC Bayern M\u00fcnchen','Real Madrid','Paris Saint-Germain','Juventus','Manchester City','Liverpool','Manchester United'])]","ea3dfc3c":"#Merging Our Data Set and we deleted the columns of fifa19\nmerged=pd.merge(test_df_fifa_20,test_df_fifa_19,on='sofifa_id')\nfor i in merged.columns:\n    if i.endswith('y'):\n        merged.drop(i,axis=1,inplace=True)","461f6d7c":"#Dropping Old position column and Changing Column Names\nmerged.drop('player_positions',axis=1,inplace=True)\nnew_cols=[]\nnew_cols.append('sofifa_id')\nfor i in merged.columns:\n    if i.endswith('_x'):\n        new=i.split('_x')[0]\n        new_cols.append(new)","827bcc2d":"new_cols.append('player_position')\n","3fd6cf37":"merged.columns=new_cols","bbe8a865":"#Creating Test Set form the modified data \nX_B_test=merged.drop(['overall','player_url','sofifa_id','short_name','long_name','dob','nationality','team_position','club','potential','work_rate','body_type','real_face','player_tags','loaned_from','joined','nation_position','player_traits','nation_jersey_number','wage_eur'],axis=1)","ebfe7750":"#The Response Variable Creation\ny_B=pd.get_dummies(X_B_test['player_position'],prefix_sep='')","0d2de14a":"#Dropping Response From Predictors\nX_B_test.drop(['player_position'],axis=1,inplace=True)","f9340c1e":"#Matching it with the test Data \nX_B_test=pd.concat([X_B_test,pd.get_dummies(X_B_test['preferred_foot'],prefix='Foot_')],axis=1)\nX_B_test.drop('preferred_foot',inplace=True,axis=1)","765f9d7e":"#Numpy Array Conversion\nX_B_test=X_B_test.values","f999918c":"#Standardizing data with the values computed on test data \nX_B_test=scaler1.transform(X_B_test)","81a6731e":"#Evaluating Our Model On Test Set Now \nmodel2.evaluate(X_B_test,y_B)","91223a68":"#predictions\ny_pred=model2.predict(X_B_test)","458d2db8":"#Converting OneHot Encoded Values to Labeled Column\nx=y_B.stack()\ny=pd.Series(pd.Categorical(x[x!=0].index.get_level_values(1)))\nfor i in y_pred:\n    for j in range(len(i)):\n        k=i\n        if(i[j]==max(k)):\n            i[j]=1\n        else:\n            i[j]=0\npreds_df=pd.DataFrame(y_pred,columns=['Defender','Midfielder','Striker'])\nx1=preds_df.stack()\npreds=pd.Series(pd.Categorical(x1[x1!=0].index.get_level_values(1)))","657c3e51":"#Graphically Representing our Results on Test Set `\nx=merged['short_name']\nfig,ax=plt.subplots(figsize=(35,7))\nplt.scatter(x[:100],y[:100],label='Original Position',s=100)\nplt.scatter(x[:100],preds[:100],label='Predicted Position',s=80)\nplt.xticks(rotation=90)\nplt.legend()\nplt.tight_layout()\nplt.xticks(fontsize=10);\n#plt.savefig(\"A:\/Datasets\/Project\/PartB_graph.jpeg\", dpi=1200)","f5e2a243":"#Creating COonfusion Matrix\ncm=confusion_matrix(y,preds)\ndf_cm = pd.DataFrame(cm,columns =['Defender', 'Midfielder', 'Striker'])\nplt.figure(figsize = (10,10))\nsns.heatmap(df_cm, annot=True)\nplt.title('Confusion Matrix',fontsize=16)\n","c4d9b69b":"#Loading Datsets For a fresh Start\ntemp='\/kaggle\/input\/fifa-20-complete-player-dataset\/'\ntemp1='\/kaggle\/input\/top-5-league\/'\nfifa20=pd.read_csv(f'{temp}players_20.csv')\nfifa19=pd.read_csv(f'{temp}players_19.csv')\nfifa18=pd.read_csv(f'{temp}players_18.csv')\nfifa17=pd.read_csv(f'{temp}players_17.csv')\nfifa16=pd.read_csv(f'{temp}players_16.csv')\nfifa15=pd.read_csv(f'{temp}players_15.csv')\nteams=pd.read_csv(f'{temp1}fifa_teams.csv')","47e5ba35":"#Cleaning Data \nfifa20=clean_fifa_data(fifa20)\nfifa19=clean_fifa_data(fifa19)\nfifa18=clean_fifa_data(fifa18)\nfifa17=clean_fifa_data(fifa17)\nfifa16=clean_fifa_data(fifa16)\nfifa15=clean_fifa_data(fifa15)","c38e75b1":"# Cleaning extra columns\nteams.dropna(axis=1,inplace=True)\nteams.rename(columns={'team':'club'},inplace=True)","403d2f77":"#A Peak into the teams dataset, we'll map our teams to the clubs according to this, thanks to a fellow mate.\nteams.head()","31c22c09":"#Data Frame Merged for top 5 leagues\ntop5_20=join_dataframe(fifa20,teams,'club')\ntop5_19=join_dataframe(fifa19,teams,'club')\ntop5_18=join_dataframe(fifa18,teams,'club')\ntop5_17=join_dataframe(fifa17,teams,'club')\ntop5_16=join_dataframe(fifa16,teams,'club')\ntop5_15=join_dataframe(fifa15,teams,'club')","902e5755":"#Drop unecessary columns\ndrop_cols(top5_20)\ndrop_cols(top5_19)\ndrop_cols(top5_18)\ndrop_cols(top5_17)\ndrop_cols(top5_16)\ndrop_cols(top5_15)","4648577f":"#Trasnfromed Data Sets Look like this \ntop5_20.head()","935c86bb":"#Taking mean for the basic attributes stated above and calculate their column wise avergae by club and then averaged along the x-axis\n#to reach a final score for each season\/year\ntop_15 = top5_15[['short_name','club','shooting','pace','passing','dribbling','defending','physic']].groupby('club').mean().sort_values('shooting',ascending=False).mean(axis=1)\ntop_16 = top5_16[['short_name','club','shooting','pace','passing','dribbling','defending','physic']].groupby('club').mean().sort_values('shooting',ascending=False).mean(axis=1)\ntop_17 = top5_17[['short_name','club','shooting','pace','passing','dribbling','defending','physic']].groupby('club').mean().sort_values('shooting',ascending=False).mean(axis=1)\ntop_18 = top5_18[['short_name','club','shooting','pace','passing','dribbling','defending','physic']].groupby('club').mean().sort_values('shooting',ascending=False).mean(axis=1)\ntop_19 = top5_19[['short_name','club','shooting','pace','passing','dribbling','defending','physic']].groupby('club').mean().sort_values('shooting',ascending=False).mean(axis=1)\ntop_20 = top5_20[['short_name','club','shooting','pace','passing','dribbling','defending','physic']].groupby('club').mean().sort_values('shooting',ascending=False).mean(axis=1)","d4a202f6":"#A sneak into the transformation\ntop_15.head(4)","a166d34e":"#Converting Series To Dataframe\ntop_15 = top_15.to_frame().reset_index()\ntop_16 = top_16.to_frame().reset_index()\ntop_17 = top_17.to_frame().reset_index()\ntop_18 = top_18.to_frame().reset_index()\ntop_19 = top_19.to_frame().reset_index()\ntop_20 = top_20.to_frame().reset_index()","38a97515":"#Renaming Columns accordingly\ntop_15.rename(columns = {'club': 'Club',0:'Score'}, inplace = True)\ntop_16.rename(columns = {'club': 'Club',0:'Score'}, inplace = True)\ntop_17.rename(columns = {'club': 'Club',0:'Score'}, inplace = True)\ntop_18.rename(columns = {'club': 'Club',0:'Score'}, inplace = True)\ntop_19.rename(columns = {'club': 'Club',0:'Score'}, inplace = True)\ntop_20.rename(columns = {'club': 'Club',0:'Score'}, inplace = True)","48d3f8ef":"#Merging Scores for every Season \nmerged = top_15.merge(top_16,on='Club')\nmerged = merged.merge(top_17,on='Club')\nmerged = merged.merge(top_18,on='Club')\nmerged = merged.merge(top_19,on='Club')\nmerged = merged.merge(top_20,on='Club')","1b06ab12":"#In The final Step we Find the final score for each club\nclubs = merged.Club\nmean_scores = merged.mean(axis = 1)\n\nsum_scores = np.sum(mean_scores)\nmean_scores = np.round(mean_scores\/sum_scores , 4)\nmean_scores = np.round(mean_scores\/np.max(mean_scores)*100,1)\n\nd = {'Clubs': clubs, 'Final Score': mean_scores}\nscores = pd.DataFrame(data=d)","f46b54a4":"sorted_scores=scores.sort_values('Final Score',ascending=False)\nprint(f'The Top 10 Clubs with Best Staffs are:\\n{sorted_scores[:10].Clubs.reset_index(drop=True)}')","2304b0bc":"plt.rcParams['figure.figsize']=(20,15)\nplt.rcParams['figure.dpi'] = 600\nsorted_scores=scores.sort_values('Final Score',ascending=False)\nsns.barplot(sorted_scores['Final Score'],sorted_scores['Clubs'],palette='coolwarm')\nplt.xlabel('Final Score',fontsize=25);\nplt.ylabel('Clubs',fontsize=25);\nplt.title('Clubs With Best Staff Scores',fontsize=30)\nplt.xticks(fontsize=25);\n# plt.savefig('clubs_score.jpeg',dpi=1200)","59545d1d":"sorted_scores.to_csv('Final_scores.csv',index=False)","cb8ac7b6":"<a id ='20' ><\/a>\n<h1 style = \"background:lightblue;border:0\">Correlation<\/h1>","7152f2cd":"<a id ='27' ><\/a>\n<h2 style = \"background:lightblue;border:0\">Approach- 1 (Using primary positions)<\/h2>","8f472930":"<a id ='27' ><\/a>\n<h3 style = \"background:lightblue;border:0\">To conclude here we considered 3 playing positions; Striker, Defender and Midfilder. We did not use original positions because of the class mismatch that occured; when we trained our model on 15 different playing positions(classes) we did not get the same amount of classes in our test set(13 classes), hence we decided to go with this approach. We used a neural network with 3 hidden layers of 8 neurons each with l1 and l2 rehularization and trained our model using 180 epochs. We registered a train accuracy of 0.9 and validation accuracy of 0.9.When we evaluated the model on test data we achieved and accuracy of 0.87 <\/h3>","464c6b1a":"<a id ='27' ><\/a>\n<h1 style = \"background:lightblue;border:0\">Part A - Rank the Players<\/h1>","33b5861b":"**The Mean Squared Error on the Test set was obtained approximately as 0.7. We Regularized our models using L1 and L2 regularizations simultaneously**","8bd6456f":"<a id ='27' ><\/a>\n<h2 style = \"background:lightblue;border:0\">Creating the Test Data<\/h2>","33aa6b03":"# Graphically Representing our Results on Test Set ","98b36135":"<a id ='27' ><\/a>\n<h1 style = \"background:lightblue;border:0\">Part B - Classify player position<\/h1>","c0fef5fa":"# Fifa 20 Player's Age Distribution","509c8d31":"### We used this approach as fifa keep decreasing the player attributes as they cross 30 each year and players get transferred or bought by other clubs that presented a consistency problem for a club. As the player moves, his developement would have been counted in the next club, which caused a lot of problems in analysis.","8bec240b":"<a id ='26' ><\/a>\n<h1 style = \"background:lightblue;border:0\">Most Valuable Players in Fifa 20<\/h1>","551e86b8":"## - Our Approach for this problem is that we take the 6 basic attributes for each player that fifa; the game, uses to define a player, those are: Shooting, Pace, Passing, Dribbling, Defending, Physic. \n## - We group the data obtained by considering these six attributes and grouping them by clubs of the players and take the average for every attribute. \n## - We then create a score by averaging these averaged score to obtain a final score for  each year\/season. \n## - We then merge these scores for each season by clubs and then obtain the final score by averaging over each season ","5a8737ed":"<h3 style = \"background:lightblue;border:0\"> Video Link: <a href =  \"https:\/\/us05st1.zoom.us\/web_client\/5g6glw\/html\/externalLinkPage.html?ref=https:\/\/drive.google.com\/file\/d\/17OlztT2N-k8yFJwgiURQyJ2O2enwqLNV\/view?usp=sharing\">Click This Link for the Video.<\/a> <\/h3>\n\n<p style = \"font-size: 16px;text-indent:15px;\">Team Members: <ui style = \"font-size: 16px;text-indent:15px;\">\n    <li> Aamir Ahmad Ansari<\/li>\n    <li> Rahul Krishna<\/li>\n    <li> Sangbid Das <\/li>\n    <li> Vasanth J <\/li>\n    \n<\/ui><\/p>\n<h1 style = \"background:lightblue;border:0\"> Introduction <\/h1>\n\n\n<p style = \"font-size: 16px;text-indent:15px;\">Fifa is one of the most played console games in the world. Fifa 20 is a series of this. Fifa 20 is a soccer game. We start by doing some Exploratory Data Analysis (EDA) and then move forward with tasks at hand namely:<\/p>\n<ui style = \"font-size: 16px;text-indent:15px;\">\n    <li> Part A - Rank the Players <\/li>\n    <li> Part B - Classify player position<\/li>\n    <li> Part C - Which Club has the Best Staff <\/li>\n    \n<\/ui>        \n<p style = \"font-size: 16px;text-indent:15px;\">We used the club mappings file by Adithya for taking the top clubs in the Top 5 European Leagues. One advantage of this was we don't have to deal with relegations\/promotions of teams. The same file will be uploaded with this notebook.<\/p> \n \n<p style = \"font-size: 16px;text-indent:15px;\"><b> Cloud Environment Presented Some Changes in our Metrics, Kindly Ignore them<\/b><\/p> \n\n\n    \n    \n\n\n\n","5b32969a":"<a id ='23' ><\/a>\n<h1 style = \"background:lightblue;border:0\">Who are the Top Players in FIFA 2020?<\/h1>","e5470329":"<a id ='27' ><\/a>\n<h2 style = \"background:lightblue;border:0\">Building the test set <\/h2>","53e2efa3":"<a id ='27' ><\/a>\n<h1 style = \"background:lightblue;border:0\">Age Distribution of FIFA players<\/h1>","1945837f":"<a id ='22' ><\/a>\n<h1 style = \"background:lightblue;border:0\">WordCloud Of Nationality<\/h1>","1612e7a9":"<a id ='27' ><\/a>\n<h4 style = \"background:lightblue;border:0\">The Mean Squared Error on the training set was found to be approximately 0.71.We also observe from the the loss curve that we are not overfitting and the loss converges nicely.<\/h4>","2c592e71":"0 is Defender, 1 is Midfielder and 2 is Striker on Y axis","71a972fd":"<a id ='21' ><\/a>\n<h1 style = \"background:lightblue;border:0\">Pair Plot<\/h1>","7d92931d":"<a id ='1' ><\/a>\n<h1 style = \"background:lightblue;border:0\"> Load and Check Data <\/h1>","6e1e2a7c":"<a id ='24' ><\/a>\n<h1 style = \"background:lightblue;border:0\">Which foot does the footballers in fifa 20 use more?<\/h1>","0af3295d":"<a id ='27' ><\/a>\n<h1 style = \"background:lightblue;border:0\">Part C - Which Club has the Best Staff<\/h1>","8d2dafea":"<a id ='0' ><\/a>\n<h1 style = \"background:lightblue;border:0\"> Importing our libraries for EDA <\/h1>"}}