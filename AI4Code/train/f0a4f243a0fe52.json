{"cell_type":{"5ee9ba83":"code","01057a40":"code","99dba3da":"code","70ad8d43":"code","81ded52c":"code","8d573220":"code","af9bc872":"code","467a2286":"code","664d20a5":"code","74d61748":"code","8f25d33e":"code","3d76efc0":"code","b0cf8564":"code","d0707f93":"code","1230c062":"code","5ed89a37":"code","b4fce818":"code","016c9f83":"code","3079ccf1":"code","582af437":"code","c7c5ffa9":"code","ececc196":"code","9fa684f1":"code","457a7b16":"code","82d4e882":"code","35b03a88":"code","1b01d23c":"code","faf7d490":"code","96356468":"markdown","40fb5a96":"markdown","e75e5c1d":"markdown","857acad3":"markdown","fb679a74":"markdown","9302167e":"markdown","7f74114a":"markdown","dd1549f8":"markdown","bd1bb395":"markdown","18edf580":"markdown","742010cd":"markdown","1d5f49ed":"markdown","5e09384e":"markdown","c458aaae":"markdown","58fc308a":"markdown","9457ed2c":"markdown","c0b41601":"markdown","e5b0f0e5":"markdown","98a90c65":"markdown","a7ebe243":"markdown","cc68d0ac":"markdown","37168259":"markdown"},"source":{"5ee9ba83":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","01057a40":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv') #loading datasets","99dba3da":"train.info()","70ad8d43":"train.describe()\n#note that cabin has a large amount of null values - may not be useful\n#embarked has two null values\n#age has a couple null values - (may want to see if we should fill these with the mean if normally distributed)","81ded52c":"#split data into numerical and categorical for analysis\nnum = train[['Age','SibSp','Parch','Fare']]\ncat = train[['Survived','Pclass','Sex']]\n#num.head()","8d573220":"for i in num.columns:\n    plt.hist(num[i])\n    plt.title(i)\n    plt.show()\n\n#note that fare is very logarthmic","af9bc872":"for i in cat.columns:\n    sns.barplot(x=cat[i].value_counts().index,y=cat[i].value_counts()).set_title(i)\n    plt.show()","467a2286":"sns.heatmap(train.corr(),annot=True)","664d20a5":"sns.heatmap(num.corr(),annot=True)","74d61748":"#Lets see what ages survived.\nsns.histplot(data=train,x='Age',hue='Survived')","8f25d33e":"#sns.histplot(data=train,x='Fare',hue='Survived')\nsns.violinplot(x=\"Survived\", y=\"Fare\", data=train)","3d76efc0":"sns.barplot(data=train,x='Pclass',y='Survived')","b0cf8564":"#looking at Class and Age\n#sns.scatterplot(data=train,x='Age',y='Pclass',hue='Survived')\nsns.stripplot(data=train, x = 'Pclass', y = 'Age', hue='Survived')","d0707f93":"sns.scatterplot(data=train, x='Fare',y='Age',hue='Survived')","1230c062":"#Does SibSp and Parch have an effect on survival?\nsns.barplot(data=train, x='SibSp',y='Survived')","5ed89a37":"sns.barplot(data=train, x='Parch',y='Survived')","b4fce818":"#How many survived per class?\nclasssurvived = train.groupby(['Survived','Pclass']).Pclass.count()\nprint(classsurvived)","016c9f83":"#How many of top 100 fare purchasers survived?\ntopHundred = train.nlargest(100,'Fare')\nnumberSurvivedTopHundred = topHundred.groupby('Survived').PassengerId.count()\nprint(numberSurvivedTopHundred)","3079ccf1":"#how many survived per age group?\nages = train.groupby(pd.cut(train[\"Age\"], np.arange(0, 100, 9))).Survived.count()\nprint(ages)","582af437":"#rate of gender survival\nwomen = train.loc[train.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women) #as 1 == survived we can sum\n\nmen = train.loc[train.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of women who survived:\", rate_women)\nprint(\"% of men who survived:\", rate_men)","c7c5ffa9":"#How many survived depending on the number of parents\/children they had aboard?\nparch = train.groupby(['Parch','Survived']).PassengerId.count()\nprint(parch)\n","ececc196":"##How many survived depending on the number of siblings\/spouses they had aboard?\nsibsp = train.groupby(['SibSp','Survived']).PassengerId.count()\nprint(sibsp)","9fa684f1":"train_model = train #keeping copies of orignal\ntest_model = test","457a7b16":"#creating travelling alone variable\ntrain_model['TravelAlone']=np.where((train_model[\"SibSp\"]+train_model[\"Parch\"])>0, 0, 1)\ntest_model['TravelAlone']=np.where((test_model[\"SibSp\"]+test_model[\"Parch\"])>0, 0, 1)\n\n#creating family size variable\n#train_model['FamilySize']= train_model['SibSp'] + train_model['Parch']\n#test_model['FamilySize']= test_model['SibSp'] + test_model['Parch']\n\n#creating first class variable\ntrain_model['FirstClass']=np.where((train_model[\"Pclass\"])==1, 1, 0)\ntest_model['FirstClass']=np.where((test_model[\"Pclass\"])==1, 1, 0)\n\n#creating first and second class variable\n#train_model['FirstSecondClass']=np.where((train_model[\"Pclass\"])<3, 1, 0)\n#test_model['FirstSecondClass']=np.where((test_model[\"Pclass\"])<3, 1, 0)","82d4e882":"train_model = train_model.drop(['Name'], axis=1)\ntest_model = test_model.drop(['Name'], axis=1)\n\ntrain_model = train_model.drop(['SibSp'], axis=1)\ntest_model = test_model.drop(['SibSp'], axis=1)\n\ntrain_model = train_model.drop(['Parch'], axis=1)\ntest_model = test_model.drop(['Parch'], axis=1)\n\ntrain_model = train_model.drop(['Ticket'], axis=1)\ntest_model = test_model.drop(['Ticket'], axis=1)\n\ntrain_model = train_model.drop(['Cabin'], axis=1)\ntest_model = test_model.drop(['Cabin'], axis=1)\n\ntrain_model = train_model.drop(['Embarked'], axis=1)\ntest_model = test_model.drop(['Embarked'], axis=1)\n\n#keep ahold of ID's for final submission\npassengerId = test_model['PassengerId']\ntrain_model = train_model.drop(['PassengerId'], axis=1)\ntest_model = test_model.drop(['PassengerId'], axis=1)","35b03a88":"#concatenate the data as processing it together is easier \n\nall_data = pd.concat((train_model.loc[:,'Sex':'FirstClass'], #\n                      test_model.loc[:,'Sex':'FirstClass'])) #\n\nall_data = pd.get_dummies(all_data)\n\n\nall_data = all_data.fillna(all_data.mean().round(0)) #only age has null values - so we will fill it with its mean as it is normally distributed\n\n#taking the log of fare to make it more normally distributed\nall_data['Fare'] = np.log(all_data.Fare+1)\nall_data['Fare'].hist()\n\nprint(all_data)","1b01d23c":"X_train = all_data[:train.shape[0]]\nX_test = all_data[train.shape[0]:]\n\ny = train.Survived\nprint(X_train)","faf7d490":"#Using logistic Regression Model\nfrom sklearn.linear_model import LogisticRegression\n\nlgr = LogisticRegression()\nlgr.fit(X_train, y)\nLR_pred = lgr.predict(X_test)\n\nsubmission = test_model\n\nsubmission['PassengerId'] = passengerId\nsubmission['Survived'] = LR_pred\n\nsubmission = submission.drop(['Pclass'], axis=1)\nsubmission = submission.drop(['Sex'], axis=1)\nsubmission = submission.drop(['Age'], axis=1)\nsubmission = submission.drop(['Fare'], axis=1)\n\nsubmission = submission[['PassengerId','Survived']]\n\nprint(submission)\nsubmission.to_csv('submission.csv', index = False)","96356468":"**Here we create all data, a combination of the training and test data in order to do a couple of things:**\n* Get dummies on all the data so that the training and test data is consistent. We use get dummies to translate categorical variables into numerical ones.\n* Take the logarithm of fare to make it more normally distributed in our model.","40fb5a96":"* Over 60% of people in first clkass survived - whereas around only a quarter of third class survived.","e75e5c1d":"* We can see that the majority of people wh didnt survive are those who didn't pay a high fare, we also see that purchasing a higher fare will increase your chances of survival.","857acad3":"* As fare inreases, chances of survival increase","fb679a74":"* Helps us visualise the difference in chances of survival between classes\n* Also helps us see that young children have a great chnce of survival, regardless of class","9302167e":"# **5. Creating our Logistic Regression Model**","7f74114a":"* We can see clearly that age has an impact on your suvival rate.\n","dd1549f8":"**Alternatives for feature egineering:**\n* You could create a family size variable\n* You could create a variable based on first and second class rather than just first.","bd1bb395":"# **4.Feature engineering and Data Pre-Processing**\n* I am going to create a travelling alone variable, to combine SibSp and Parch\n* I am also going to create a first class variable, making it a 1 if you are in first class and a 0 if not. As it is clear first class has a higher chance of survival.","18edf580":"# **3. Getting Numbers and Asking Questions**","742010cd":"**Dropping unwanted vairables**","1d5f49ed":"**Here we see that the fare variable is very logarithmically distributed - this may be important if we are using it in our model.**","5e09384e":"**Now lets look at some interesting graphs to see what attributes we should be using in our model.**","c458aaae":"# **1. Reading In and Understanding the Data**","58fc308a":"**Plotting distributions for numerical Data**","9457ed2c":"**Splitting into test and train**","c0b41601":"* From the above two graphs it is clear that having family increases chances of survival in some cases.","e5b0f0e5":"**Plotting categorical values**","98a90c65":"**Now that we have a rough idea of the data, both numerical and categorical. Lets take a look at some correlations.**","a7ebe243":"# **2. Visualising Data**","cc68d0ac":"**Here we get an understanding of the types of data we are dealing with alongside seeing which attributes contain the\nmost null values in our dataset. Seeing these null values early on help us begin to think about the feature egineering process\nas we may wantt to fill these null values with the mean or median, or totally disregard the attribute entirely.**","37168259":"**In order to visualise the data the steps I am going to take are:**\n*  Splitting Data into Numerical and Categorical Variables so I can quickly visualise each and get a quick understanding of them\n* Take a look at the correlations of the data\n* Creating more meaningful plots to understand what variables are going to be important to use in our model."}}