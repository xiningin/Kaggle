{"cell_type":{"d123bad6":"code","dfecd90a":"code","73eff6c5":"code","bea9b99b":"code","e2c1e66f":"code","605e03f9":"code","ca7cbe06":"code","0668e37a":"code","ed93b465":"code","e4cf8663":"code","cfe5d3c4":"code","33221100":"code","935f8488":"code","fab3d4d9":"code","04409be0":"code","dbde2caf":"code","eb8cbc78":"code","cfc5ede2":"code","851ba146":"code","4362f9fe":"code","5c8d8307":"code","1ad34cae":"code","c1cb0b7c":"code","84b5ad3a":"code","f5e70368":"code","6e182d53":"code","34cac633":"code","2e615cb0":"code","12092299":"code","d9c1a43b":"code","c8848689":"code","866136e4":"code","679fec69":"markdown","dbb271c4":"markdown","90c4171d":"markdown","d9a0c035":"markdown","8e735940":"markdown","6b7dbbc8":"markdown","a4db32ad":"markdown","1fe2abfb":"markdown","e2701f35":"markdown","1b12fa50":"markdown","122b9092":"markdown","ceccd571":"markdown","7f45d141":"markdown","cc0c8350":"markdown","ccf8f763":"markdown","51a0eb98":"markdown","186367ca":"markdown","79c5540f":"markdown","56029c69":"markdown","95f5ee3f":"markdown"},"source":{"d123bad6":"import numpy as np\nimport pandas as pd\nfrom pandas import Series,DataFrame\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","dfecd90a":"plt.rcParams['figure.figsize'] = (10,20)\nplt.style.use('ggplot')","73eff6c5":"train_df = pd.read_csv('\/kaggle\/input\/daily-climate-time-series-data\/DailyDelhiClimateTrain.csv',parse_dates=['date'],index_col='date')\ntrain_df.head()","bea9b99b":"train_df.plot(subplots=True)","e2c1e66f":"from statsmodels.tsa.stattools import grangercausalitytests","605e03f9":"variables = train_df.columns\nmaxlag = 12\ntest = 'ssr_chi2test'\n\ncause = DataFrame(np.zeros((len(variables),len(variables))),columns=variables,index=variables)\nfor c in variables:\n    for r in variables:\n        x = grangercausalitytests(train_df[[r,c]],maxlag=maxlag,verbose=False)\n        p_values = [round(x[i+1][0][test][1],5) for i in range(maxlag)]\n        min_value = np.min(p_values)\n        cause.loc[r,c] = min_value\n\ncause","ca7cbe06":"from statsmodels.tsa.vector_ar.vecm import coint_johansen","0668e37a":"coint = coint_johansen(train_df,-1,12)","ed93b465":"\"\"\"Trail Static\"\"\"\ncoint.lr1.astype(int)","e4cf8663":"\"\"\"Critical trail values\"\"\"\ncoint.cvt","cfe5d3c4":"\"\"\"Eigen Static\"\"\"\ncoint.lr2.astype(int)","33221100":"\"\"\"Eigen Critical values\"\"\"\ncoint.cvm","935f8488":"from statsmodels.tsa.seasonal import seasonal_decompose","fab3d4d9":"for variable in variables:\n    decomposed = seasonal_decompose(train_df[variable])\n    x = decomposed.plot(seasonal=False,resid=False)\n    ","04409be0":"from statsmodels.tsa.stattools import adfuller","dbde2caf":"print('significance level : 0.05')\nfor variable in variables:\n    adf = adfuller(train_df[variable])\n    print(f'For {variable}')\n    print(f'Test static {adf[1]}',end='\\n \\n')","eb8cbc78":"from statsmodels.tsa.vector_ar.var_model import VAR","cfc5ede2":"\"\"\"Training AR Model\"\"\"\nmodel = VAR(train_df)","851ba146":"for i in [1,2,3,4,5,6,7,8,9]:\n    result = model.fit(i)\n    print(f'lag_order {i}')\n    print(f'AIC : {result.aic}')\n    #print(f'BIC : {result.bic}')","4362f9fe":"\"\"\" Training the model with lag_order 6\"\"\"\nmodel_fitted = model.fit(6)","5c8d8307":"\"\"\"Creating train-test dataset\"\"\"\nqwer = train_df.dropna()\nlag_order = model_fitted.k_ar\nX = qwer[:-lag_order]\nY = qwer[-lag_order:]","1ad34cae":"from statsmodels.stats.stattools import durbin_watson","c1cb0b7c":"out = durbin_watson(model_fitted.resid)\nfor col,val in (zip(variables,out)):\n    print(col, ':',  val)","84b5ad3a":"y = X.values[-lag_order:]\nforcast = model_fitted.forecast(y,steps=lag_order)","f5e70368":"df_forcast = DataFrame(forcast,index=train_df.index[-lag_order:],columns=Y.columns)\ndf_forcast","6e182d53":"import math\nfrom math import sqrt","34cac633":"from sklearn.metrics import mean_squared_error","2e615cb0":"for i in train_df.columns:\n    print(f'RMSE of {i} is {sqrt(mean_squared_error(Y[[i]],df_forcast[[i]]))}')","12092299":"from sklearn.metrics import mean_absolute_error","d9c1a43b":"for i in train_df.columns:\n    print(f'MAE of {i} is {mean_absolute_error(Y[[i]],df_forcast[[i]])}')","c8848689":"test_df = pd.read_csv('\/kaggle\/input\/daily-climate-time-series-data\/DailyDelhiClimateTest.csv',parse_dates=['date'],index_col='date')\ntest_df.head()","866136e4":"\"\"\" Forcasting the next 6 periods\"\"\"\ndate_range = pd.date_range('2017-01-05',periods=6)\n\nlag_order = model_fitted.k_ar\nX1,Y1 = test_df[1:-lag_order],test_df[-lag_order:]\ninput_values = Y1.values[-lag_order:]\nforcast1 = model_fitted.forecast(input_values,steps=lag_order)\nforcast_df1 = DataFrame(forcast1,columns=X1.columns,index=date_range)\nforcast_df1","679fec69":"# Serial Correlation : Durbin Watson Static","dbb271c4":"All the values are nearby 2, implies no correlation among residues.","90c4171d":"# Checking for Stationarity","d9a0c035":"It should be assume that some unforseen events occurs which varies Humidity and MeanPressure causing high forcast error.","8e735940":"# Co-Integration test","6b7dbbc8":"This justifies that the features are much dependent with each other.","a4db32ad":"# Causality Test","1fe2abfb":"All test static are below significance level, hence we can reject the null hypothesis[Data is non-stationary]. \nSo pretty much proved that data is stationary.","e2701f35":"So we may now move on to create a model.","1b12fa50":"# Forcasting","122b9092":"## Seasonal Decompose","ceccd571":"## Augmented Dickey Fuller (ADF Test)","7f45d141":"let's take lag_order which we have calculated before.","cc0c8350":"AIC is lower for lag_order 6. Hence, we can assume the lag_order of 6.","ccf8f763":"From the above statics, it can be assumed that, 'wind speed' and 'mean pressure' has much co-integration at 95% confidence[static < critical value]","51a0eb98":"# Model validation","186367ca":"So , by this model, we can confidently forcast Meantemp and Wind_speed with less then 5% error.","79c5540f":"# Order Selection","56029c69":"# Data Visualisation","95f5ee3f":"Graphs imples, except meanpressure, data are Stationary."}}