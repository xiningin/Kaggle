{"cell_type":{"8ef1a0ec":"code","4645cd12":"code","6dcdcbb3":"code","828868bd":"code","dede5a82":"code","0bcd7231":"code","7c835f68":"code","59917cf0":"code","aa934517":"code","dea87ed4":"code","348448e6":"code","06e6f390":"code","1638fae2":"code","a0c82665":"code","9d1695fe":"code","0a7442d2":"code","a52aad94":"code","6d772235":"code","89708469":"code","a2c7b361":"code","784f5d09":"markdown","6a5956d9":"markdown","e1e0c2de":"markdown","e2f84ac2":"markdown"},"source":{"8ef1a0ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4645cd12":"import io #The io module provides Python\u2019s main facilities for dealing with various types of I\/O.\nimport json #JSON (JavaScript Object Notation) is a lightweight data-interchange format\nimport cv2 # cv2.imread(), cv2.imshow() , cv2.imwrite()\nimport numpy as np #create a NumPy array, use broadcasting, access values, manipulate arrays, and much more\nimport requests #Make a request to a web page, and print the response text\nimport matplotlib.pyplot as plt  #Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.","6dcdcbb3":"#import the necessary libraries and load the image using matplotlib. \n#\nimg = cv2.imread(\"..\/input\/cusersmarildownloads23396jpeg\/23396.jpeg\")\nheight, width, _ = img.shape\nheight\nwidth,height","828868bd":"plt.imshow(img)","dede5a82":"url_api = \"https:\/\/api.ocr.space\/parse\/image\"","0bcd7231":"# Ocr\nurl_api = \"https:\/\/api.ocr.space\/parse\/image\"\n_, compressedimage = cv2.imencode(\".jpg\", img, [1, 90])\nfile_bytes = io.BytesIO(compressedimage)","7c835f68":"#you execute this code \n\"\"\"\nresult = requests.post(url_api,\n              files = {\"screenshot.jpg\": file_bytes},\n              data = {\"apikey\": \"YOURAPIKEYHERE\",\n                      \"language\": \"eng\"})\n\n\"\"\"","59917cf0":"result = requests.post(url_api,\n              files = {\"..\/input\/cusersmarildownloads23396jpeg\/23396.jpeg\": file_bytes},\n              data = {\"apikey\": \"eb516eb1f288957\",\n                      \"language\": \"eng\"})","aa934517":"result = result.content.decode()\nresult = json.loads(result)","dea87ed4":"result","348448e6":"parsed_results = result.get(\"ParsedResults\")[0]\ntext_detected = parsed_results.get(\"ParsedText\")\ntext_detected","06e6f390":"# Generic Libraries\nfrom PIL import Image\nimport os\nimport pandas as pd\nimport numpy as np\nimport re,string,unicodedata\n\n#Tesseract Library\nimport pytesseract\n\n#Warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n#Garbage Collection\nimport gc\n\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport pytesseract","1638fae2":"# Let's start with a simple image\nimg = cv2.imread(\"..\/input\/cusersmarildownloads23396jpeg\/23396.jpeg\") # image in BGR format\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nfig = plt.figure(figsize = [10,10])\nheight,width,channel = img.shape\nplt.imshow(img)\nprint(type(img))\nprint(height,width,channel)","a0c82665":"# as the image is simple enough, image_to_string method reads all characters almost perfectly!\ntext = pytesseract.image_to_string(img)\nprint(text)","9d1695fe":"# the output of OCR can be saved in a file in necessary\nfile = open('output.txt','a') # file opened in append mode\nfile.write(text)\nfile.close()","0a7442d2":"!pip install https:\/\/github.com\/myhub\/tr\/archive\/1.5.1.zip","a52aad94":"from tr import *\nfrom PIL import Image, ImageDraw, ImageFont","6d772235":"img_pil = Image.open(\"..\/input\/cusersmarildownloads23396jpeg\/23396.jpeg\")\nMAX_SIZE = 2000\nif img_pil.height > MAX_SIZE or img_pil.width > MAX_SIZE:\n    scale = max(img_pil.height \/ MAX_SIZE, img_pil.width \/ MAX_SIZE)\n\n    new_width = int(img_pil.width \/ scale + 0.5)\n    new_height = int(img_pil.height \/ scale + 0.5)\n    img_pil = img_pil.resize((new_width, new_height), Image.BICUBIC)\n\nprint(img_pil.width, img_pil.height)\n# img_pil","89708469":"gray_pil = img_pil.convert(\"L\")\n\nrect_arr = detect(img_pil, FLAG_RECT)\n\nimg_draw = ImageDraw.Draw(img_pil)\ncolors = ['red', 'green', 'blue', \"yellow\", \"pink\"]\n\nfor i, rect in enumerate(rect_arr):\n    x, y, w, h = rect\n    img_draw.rectangle(\n        (x, y, x + w, y + h),\n        outline=colors[i % len(colors)],\n        width=4)\n\nimg_pil","a2c7b361":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#32a838','#32a858','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Thanks for your patience \u2013 please keep coming back to see my improvements, @mpwolke Was Here.' )","784f5d09":"Credits to :\n\nSabbir Ahmed https:\/\/www.kaggle.com\/ggck43\/ocr-using-pytesseract-bengali-english\n\nNaim Mhedhbi. https:\/\/www.kaggle.com\/naim99\/ocr-text-recognition-ocr-space-api-tesseract\/data","6a5956d9":"#Extract text using tesseract","e1e0c2de":"#Third Method","e2f84ac2":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQAU8_ps-JHVwLyG5o_64nOTTCj_9Oh_bQhbg&usqp=CAU)dnaindia.com"}}