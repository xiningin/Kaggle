{"cell_type":{"12817814":"code","38fec8dd":"code","9a8f2db3":"code","ec766c2f":"code","7e90cc5e":"code","bb51859c":"code","0c790f47":"code","703d2919":"code","06d37c2c":"code","2008123e":"code","a1f7a302":"code","9d580d41":"code","1311e21b":"code","959b5863":"code","b01f158e":"code","a22dd60d":"code","ffff01ac":"code","23149936":"code","6930e4ea":"code","a512dfda":"code","81a7fe5e":"code","72e291a8":"code","c5deb449":"code","c295e023":"code","461ac8d4":"code","1d8f7c04":"code","d88e1f9b":"code","e356a58d":"code","9f1d8664":"code","92ce0933":"code","aa7461b3":"code","ea5eec2f":"code","32bcf542":"code","a9d8e63f":"markdown","47cf07b5":"markdown","64da5489":"markdown","e7934401":"markdown","54722541":"markdown","f7707d5c":"markdown","d5ad7e79":"markdown","23aa87ae":"markdown","deff24ba":"markdown","d46d04a5":"markdown","37599557":"markdown"},"source":{"12817814":"import sys\nsys.path.append('..\/input\/timm-pytorch-image-models\/pytorch-image-models-master')\nfrom timm import create_model","38fec8dd":"from fastai.vision.all import *","9a8f2db3":"set_seed(365, reproducible=True)\nBATCH_SIZE = 32","ec766c2f":"dataset_path = Path('..\/input\/petfinder-pawpularity-score\/')\ndataset_path.ls()","7e90cc5e":"train_df = pd.read_csv(dataset_path\/'train.csv')\ntrain_df.head()","bb51859c":"train_df['path'] = train_df['Id'].map(lambda x:str(dataset_path\/'train'\/x)+'.jpg')\ntrain_df = train_df.drop(columns=['Id'])\ntrain_df = train_df.sample(frac=1).reset_index(drop=True) #shuffle dataframe\ntrain_df.head()","0c790f47":"len_df = len(train_df)\nprint(f\"There are {len_df} images\")","703d2919":"train_df['Pawpularity'].hist(figsize = (10, 5))\nprint(f\"The mean Pawpularity score is {train_df['Pawpularity'].mean()}\")\nprint(f\"The median Pawpularity score is {train_df['Pawpularity'].median()}\")\nprint(f\"The standard deviation of the Pawpularity score is {train_df['Pawpularity'].std()}\")","06d37c2c":"print(f\"There are {len(train_df['Pawpularity'].unique())} unique values of Pawpularity score\")","2008123e":"train_df['norm_score'] = train_df['Pawpularity']\/100\ntrain_df['norm_score']","a1f7a302":"im = Image.open(train_df['path'][1])\nwidth, height = im.size\nprint(width,height)","9d580d41":"im","1311e21b":"if not os.path.exists('\/root\/.cache\/torch\/hub\/checkpoints\/'):\n    os.makedirs('\/root\/.cache\/torch\/hub\/checkpoints\/')\n!cp '..\/input\/swin-transformer\/swin_large_patch4_window7_224_22kto1k.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/swin_large_patch4_window7_224_22kto1k.pth'","959b5863":"seed=365\nset_seed(seed, reproducible=True)\ntorch.manual_seed(seed)\ntorch.cuda.manual_seed(seed)\ntorch.backends.cudnn.deterministic = True\ntorch.use_deterministic_algorithms = True","b01f158e":"import math\n#Rice rule\nnum_bins = int(np.ceil(2*((len(train_df))**(1.\/3))))\nnum_bins","a22dd60d":"train_df['bins'] = pd.cut(train_df['norm_score'], bins=num_bins, labels=False)\ntrain_df['bins'].hist()","ffff01ac":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\n\ntrain_df['fold'] = -1\n\n\nN_FOLDS = 10\nstrat_kfold = StratifiedKFold(n_splits=N_FOLDS, random_state=seed, shuffle=True)\nfor i, (_, train_index) in enumerate(strat_kfold.split(train_df.index, train_df['bins'])):\n    train_df.iloc[train_index, -1] = i\n    \ntrain_df['fold'] = train_df['fold'].astype('int')\n\ntrain_df.fold.value_counts().plot.bar()","23149936":"train_df[train_df['fold']==0].head()","6930e4ea":"train_df[train_df['fold']==0]['bins'].value_counts()","a512dfda":"train_df[train_df['fold']==1]['bins'].value_counts()","81a7fe5e":"def petfinder_rmse(input,target):\n    return 100*torch.sqrt(F.mse_loss(F.sigmoid(input.flatten()), target))","72e291a8":"def get_data(fold):\n#     train_df_no_val = train_df.query(f'fold != {fold}')\n#     train_df_val = train_df.query(f'fold == {fold}')\n    \n#     train_df_bal = pd.concat([train_df_no_val,train_df_val.sample(frac=1).reset_index(drop=True)])\n    train_df_f = train_df.copy()\n    # add is_valid for validation fold\n    train_df_f['is_valid'] = (train_df_f['fold'] == fold)\n    \n    dls = ImageDataLoaders.from_df(train_df_f, #pass in train DataFrame\n#                                valid_pct=0.2, #80-20 train-validation random split\n                               valid_col='is_valid', #\n                               seed=365, #seed\n                               fn_col='path', #filename\/path is in the second column of the DataFrame\n                               label_col='norm_score', #label is in the first column of the DataFrame\n                               y_block=RegressionBlock, #The type of target\n                               bs=BATCH_SIZE, #pass in batch size\n                               num_workers=8,\n                               item_tfms=Resize(224), #pass in item_tfms\n                               batch_tfms=setup_aug_tfms([Brightness(), Contrast(), Hue(), Saturation()])) #pass in batch_tfms\n    \n    return dls","c5deb449":"#Valid Kfolder size\nthe_data = get_data(0)\nassert (len(the_data.train) + len(the_data.valid)) == (len(train_df)\/\/BATCH_SIZE)","c295e023":"def get_learner(fold_num):\n    data = get_data(fold_num)\n    \n    model = create_model('swin_large_patch4_window7_224', pretrained=True, num_classes=data.c)\n\n    learn = Learner(data, model, loss_func=BCEWithLogitsLossFlat(), metrics=petfinder_rmse).to_fp16()\n    \n    return learn","461ac8d4":"test_df = pd.read_csv(dataset_path\/'test.csv')\ntest_df.head()","1d8f7c04":"test_df['Pawpularity'] = [1]*len(test_df)\ntest_df['path'] = test_df['Id'].map(lambda x:str(dataset_path\/'test'\/x)+'.jpg')\ntest_df = test_df.drop(columns=['Id'])\ntrain_df['norm_score'] = train_df['Pawpularity']\/100","d88e1f9b":"get_learner(fold_num=0).lr_find(end_lr=3e-2)","e356a58d":"import gc","9f1d8664":"all_preds = []\n\nfor i in range(N_FOLDS):\n\n    print(f'Fold {i} results')\n    \n    learn = get_learner(fold_num=i)\n\n    learn.fit_one_cycle(5, 2e-5, cbs=[SaveModelCallback(), EarlyStoppingCallback(monitor='petfinder_rmse', comp=np.less, patience=2)]) \n    \n    learn.recorder.plot_loss()\n\n    #learn = learn.to_fp32()\n    \n    #learn.export(f'model_fold_{i}.pkl')\n    #learn.save(f'model_fold_{i}.pkl')\n    \n    dls = ImageDataLoaders.from_df(train_df, #pass in train DataFrame\n                               valid_pct=0.2, #80-20 train-validation random split\n                               seed=365, #seed\n                               fn_col='path', #filename\/path is in the second column of the DataFrame\n                               label_col='norm_score', #label is in the first column of the DataFrame\n                               y_block=RegressionBlock, #The type of target\n                               bs=BATCH_SIZE, #pass in batch size\n                               num_workers=8,\n                               item_tfms=Resize(224), #pass in item_tfms\n                               batch_tfms=setup_aug_tfms([Brightness(), Contrast(), Hue(), Saturation()])) \n    \n    test_dl = dls.test_dl(test_df)\n    \n    preds, _ = learn.tta(dl=test_dl, n=5, beta=0)\n    \n    all_preds.append(preds)\n    \n    del learn\n\n    torch.cuda.empty_cache()\n\n    gc.collect()","92ce0933":"all_preds","aa7461b3":"np.mean(np.stack(all_preds*100))","ea5eec2f":"sample_df = pd.read_csv(dataset_path\/'sample_submission.csv')\npreds = np.mean(np.stack(all_preds), axis=0)\nsample_df['Pawpularity'] = preds*100\nsample_df.to_csv('submission.csv',index=False)","32bcf542":"pd.read_csv('submission.csv').head()","a9d8e63f":"# Model","47cf07b5":"### source for optimal bins formula [click here](https:\/\/www.statology.org\/sturges-rule\/)","64da5489":"# Import","e7934401":"#### You can criticize my work or give your suggestion, your comment is a treasure of knowledge for me\n##### P.S. sorry for a poor grammar","54722541":"# Datasets","f7707d5c":"# Constants","d5ad7e79":"# **Reference**\n###  [Petfinder Pawpularity EDA & fastai starter \ud83d\udc31\ud83d\udc36](https:\/\/www.kaggle.com\/tanlikesmath\/petfinder-pawpularity-eda-fastai-starter)\n###  [Petfinder& fastai with DataAugmentation KFold 10](https:\/\/www.kaggle.com\/bobber\/petfinder-fastai-with-dataaugmentation-kfold-10)","23aa87ae":"### Swin-Transformer document [click here](https:\/\/github.com\/microsoft\/Swin-Transformer)","deff24ba":"# **About author: I'm a beginner in this field trying to learn and discovering the enjoyment of Data Science.**\n### Note1: This notebook is a copy version plus some editing and experimenting for my own understanding and learning.\n### Note2: If this notebook is useful for you in anyway, please give an upvote or commenting your gratitude on the notebook in the reference section. ","d46d04a5":"# Find optimal number of bins","37599557":"# Data loading"}}