{"cell_type":{"296e389e":"code","c45b008d":"code","1b9455d1":"code","1672e316":"code","8d57dd37":"code","a0c64ba4":"code","7dbb2db4":"code","8f9f624f":"code","78129f95":"code","ffdbe6d7":"code","89e3db47":"code","2fbc93ac":"code","e14f3e11":"code","3723542f":"code","8058ff42":"code","5b12d2dc":"markdown","a696d65b":"markdown","dd15b23f":"markdown","887be039":"markdown","8ccb3320":"markdown","f26d1c94":"markdown","d0abe650":"markdown","c7be63da":"markdown","a0993c2d":"markdown"},"source":{"296e389e":"!pip install pmdarima","c45b008d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom pmdarima import auto_arima\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error","1b9455d1":"data = pd.read_csv('..\/input\/Historical_Data.csv')\ndata.head()","1672e316":"data.info()","8d57dd37":"data.Country_Code.unique()","a0c64ba4":"data['Date'] = pd.to_datetime(data.Date.astype('str'), errors='raise')\ndata['Month'] = data['Date'].dt.month_name()\ndata['Year'] = data['Date'].dt.year\n\ndata['Country_Code'] = data.Country_Code.astype('category')\nprint(data.info(), end='\\n\\n')\nprint(data.head())","7dbb2db4":"#1. Print number of days which sold more than 3 units.\ngrouped_df = data.groupby(['Date'], as_index=False)['Sold_Units'].sum()\nprint(grouped_df.head(5), end='\\n\\n')\nprint('Number of days which sold more than 3 units:', grouped_df.loc[grouped_df.Sold_Units >3, :].shape[0])","8f9f624f":"#2. Print sales of the country(FR) in the month of August\ndf_FR_Aug = data.loc[((data.Country_Code == 'FR') & (data.Month=='August')), :]\nprint('Sales of the country(FR) in the month of August:', np.sum(df_FR_Aug.Sold_Units))","78129f95":"#3. Print total units sold in the country(AT). \ndf_AT = data.loc[data.Country_Code == 'AT', :]\nprint('Total units sold in the country(AT):', np.sum(df_AT.Sold_Units))","ffdbe6d7":"def preprocess(country):        \n    #set observed = True because Country_Code is category column\n    df = data.groupby(['Country_Code', 'Date'], as_index=False, observed=True)['Sold_Units'].sum()        \n    df_country = df.loc[df.Country_Code==country, :].set_index(['Date', 'Country_Code']).unstack(fill_value=0).asfreq('D', fill_value=0).stack().sort_index(level=1).reset_index()\n    df_country_sorted = df_country.sort_values(['Date'], ascending=True)\n    return (country, df_country_sorted)\n\n#preprocess data for each country\ncountry_dfs = {}\nfor country in data.Country_Code.unique():\n    country, df = preprocess(country)\n    country_dfs[country] = df","89e3db47":"print('Starting date of sale for \u2018FR\u2019:', country_dfs['FR'].loc[0, 'Date'])","2fbc93ac":"df_AT = country_dfs['AT']\ndf_AT_non_selling = df_AT.loc[df_AT['Sold_Units'] == 0, :]\nprint(\"Number of non-selling days for the country('AT'):\", df_AT_non_selling.shape[0])\n\nfig, ax = plt.subplots(figsize=(25, 5))\nsns.lineplot(x='Date', y='Sold_Units', data=df_AT, ax=ax)","e14f3e11":"def fit_predict_auto_arima(train, test):\n    #fit the model using training data\n    model = auto_arima(train['Sold_Units'], \n                       seasonal=False, \n                       stationary=False, \n                       trace=False, \n                       error_action='ignore', \n                       suppress_warnings=True,\n                       random_state=1)\n    model.fit(train['Sold_Units'])\n\n    #predict using test data\n    forecast = model.predict(n_periods=len(test))\n    forecast = pd.DataFrame({'Date': test.Date, 'Prediction': forecast}, index = test.index)\n\n    #calculate rmse\n    rmse = np.round(np.sqrt(mean_squared_error(test['Sold_Units'], forecast['Prediction'])), 3)\n    \n    #calculate mean absolue error\n    mae = np.round(mean_absolute_error(test['Sold_Units'], forecast['Prediction']), 3)\n\n    #plot the predictions for test set       \n    fig, ax = plt.subplots(figsize=(25, 5))\n    ax.plot('Date', 'Sold_Units', data=train, label='Train')\n    ax.plot('Date', 'Sold_Units', data=test, label='Valid')\n    ax.plot('Date', 'Prediction', data=forecast, label='Prediction')\n    ax.legend()\n    ax.set_title(f'Sold units for country {country} on daily basis')\n    \n    return (model, rmse, mae)","3723542f":"#for each country fit and predict    \ncountry_error_map = {}\ncountry_models_map = {}\nfor country in data.Country_Code.unique():\n    df_country = country_dfs[country]\n    #divide data into train and test set.\n    train = df_country.loc[:len(df_country)-10, :]\n    test = df_country.loc[len(df_country)-10:, :]\n\n    #fit and predict\n    model, rmse, mae = fit_predict_auto_arima(train, test)\n    print(f'For country {country}, RMSE={rmse}, MAE={mae}')\n    country_error_map[country] = mae\n    country_models_map[country] = model","8058ff42":"#print the model summary of country AT\ncountry_models_map['AT'].summary()","5b12d2dc":"#### Print sales of the country(FR) in the month of August","a696d65b":"#### Print the starting date of sale for \u2018FR\u2019.","dd15b23f":"You will observe that for some dates the sales were not made. Add 0 as \u2018Sold_Units\u2019 and \u2018Article_ID\u2019 for such dates.\n\nExample: If sales for country \u2018FR\u2019 was made on 2017-03-02 and next sale on 2017-03-04 then, for 2017-03-03, country \u2018FR\u2019 fill 0 for \u2018Sold_Units\u2019 and \u2018Article_ID\u2019.\n","887be039":"# Date Preprocessing","8ccb3320":"# Predicting daily sales of each country using auto arima\n\nWe are provided with a \u201cHistorical_Data.csv\u201d from a company named ABC which sell products online. The dataset (Historical data) contains sales record (on daily basis ) from different countries.","f26d1c94":"# Model selection and building the model","d0abe650":"#### Print number of days which sold more than 3 units.","c7be63da":"#### References\n* https:\/\/stackoverflow.com\/questions\/48471648\/pandas-groupby-with-categories-with-redundant-nan\n* https:\/\/stackoverflow.com\/questions\/44978196\/pandas-filling-missing-dates-and-values-within-group?noredirect=1&lq=1\n* https:\/\/stackoverflow.com\/questions\/47231496\/pandas-fill-missing-dates-in-time-series","a0993c2d":"#### Print the number of non-selling days for the country('AT')"}}