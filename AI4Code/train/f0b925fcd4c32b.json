{"cell_type":{"74ddef70":"code","9bc27230":"code","32305d5d":"code","724b60c0":"code","1b6686d5":"code","ae6f109e":"code","167e2e75":"code","702e9c2a":"code","36bb9c0f":"code","72451e12":"code","b2c1fbbb":"code","88964eed":"code","76a36088":"code","9e73cb5b":"code","a7ff76b3":"code","f1e08e85":"code","bc3054dd":"code","47e95203":"code","52b287e4":"code","824a3b03":"code","945b635b":"code","6f062631":"code","2e2e67ff":"code","93a9c497":"code","c1372b2b":"code","fb06e4fe":"code","96c07057":"code","3265571e":"code","1ad5087b":"code","58cbfdd0":"code","ab32c143":"code","ae808343":"code","f7175e12":"code","abda84ff":"code","bfa4faff":"code","b757d51c":"code","f8d9eaf6":"code","5dd083ef":"code","1171ba91":"code","adaa479a":"code","fc32db22":"code","711d2250":"code","dd071b5e":"code","5c54ece5":"code","c4a3059b":"code","d8dc390d":"code","62569472":"code","23f587fc":"code","f4c15ce7":"code","5fc425d8":"code","b03077cd":"code","7a7c296c":"code","53ce96fb":"code","25c695e9":"code","485f73e2":"code","7165e56b":"code","2679d6b6":"code","a9f973c1":"code","9d7118ad":"code","f7f0bc92":"code","edc789ab":"markdown","9528419b":"markdown","08e51f41":"markdown","a3528e35":"markdown"},"source":{"74ddef70":"###############################################\n# PYTHON \u0130LE VER\u0130 ANAL\u0130Z\u0130\n###############################################\n\n# - NumPy\n# - Pandas\n# - Veri G\u00f6rselle\u015ftirme: Seaborn & Matplotlib\n# - Geli\u015fmi\u015f Fonksiyonel Ke\u015fif\u00e7i Veri Analizi (Advanced Functional EDA)\n\n\n#############################################\n# NUMPY\n#############################################\n\n# - Neden NumPy? (Why Numpy?)\n    # liste, boyut tip bilgisini tutar.\n# - NumPy Array'i Olu\u015fturmak (Creating Numpy Arrays)\n# - NumPy Array \u00d6zellikleri (Attibutes of Numpy Arrays)\n# - Yeniden \u015eekillendirme (Reshaping)\n# - Index Se\u00e7imi (Index Selection)\n# - Slicing\n# - Fancy Index\n# - Numpy'da Ko\u015fullu \u0130\u015flemler (Conditions on Numpy)\n# - Matematiksel \u0130\u015flemler (Mathematical Operations)\n\n\n# Numerical Python.\n# Bilimsel hesaplamalar i\u00e7in kullan\u0131l\u0131r.\n# Arrayler \/ \u00e7ok boyutlu arrayler ve matrisler \u00fczerinde y\u00fcksek performansl\u0131 \u00e7al\u0131\u015fma imkan\u0131 sa\u011flar.\n# Temelleri 1995\u2019te (matrix-sig, Guido Van Rossum) at\u0131lm\u0131\u015f nihai olarak 2005 (Travis Oliphant) y\u0131l\u0131nda hayata ge\u00e7mi\u015ftir.\n# Listelere benzerdir, fark\u0131; verimli veri saklama ve vekt\u00f6rel operasyonlard\u0131r.\n# H\u0131zl\u0131 (listelere g\u00f6re 50 kata kadar) ve y\u00fcksek seviye (daha az \u00e7aba ile daha \u00e7ok i\u015flem) \u00e7al\u0131\u015fma imkan\u0131 sa\u011flamaktad\u0131r.\n\n\n#############################################\n# Neden NumPy?\n#numerical\n# listelerden fark\u0131\n#1. verimli ver saklama ve vekt\u00f6rel\n#############################################\n\n#######################\n# Python Lists vs. Numpy Arrays\n#######################\n\nimport numpy as np\nprint(np.__version__) ##versiyon double under skor, dounder \u0131\nimport time\nsize_of_vec = 10000\n\n\ndef pure_python_version():\n    t1 = time.time()\n    x = range(size_of_vec)\n    y = range(size_of_vec)\n    z = [x[i] + y[i] for i in range(len(x))]\n    return time.time() - t1\n\n\ndef numpy_version():\n    t1 = time.time()\n    x = np.arange(size_of_vec)\n    y = np.arange(size_of_vec)\n    z = x + y\n    return time.time() - t1\n\n\nt1 = pure_python_version()\nt2 = numpy_version()\n\nprint(t1, t2)\nprint(\"Numpy is in this example \" + str(t1 \/ t2) + \" faster!\")\n\n# source:\n# https:\/\/webcourses.ucf.edu\/courses\/1249560\/pages\/python-lists-vs-numpy-arrays-what-is-the-difference\n\n","9bc27230":"#######################\n# Low Level vs High Level\n#######################\n\na = [1, 2, 3, 4]\nb = [2, 3, 4, 5]\nab = []\n\nfor i in range(0, len(a)):\n    ab.append(a[i] * b[i])\n\nab","32305d5d":"\n\n# Ayn\u0131 i\u015flemin numpy ile yap\u0131l\u0131\u015f\u0131\na = np.array([1, 2, 3, 4])\nb = np.array([2, 3, 4, 5])\na * b\n","724b60c0":"#############################################\n# NumPy Array'i Olu\u015fturmak (Creating Numpy Arrays)\n#############################################\n\nnp.array([1, 2, 3, 4, 5])\ntype(np.array([1, 2, 3, 4, 5]))\nnp.zeros(10, dtype=int)\nnp.random.randint(0, 10, size=10)\nnp.random.normal(10, 4, (3, 4))\nnp.random.randint(0, 10, (3, 3))","1b6686d5":"#############################################\n# NumPy Array \u00d6zellikleri (Attibutes of Numpy Arrays)\n#############################################\n\n# ndim: boyut say\u0131s\u0131\n# shape: boyut bilgisi\n# size: toplam eleman say\u0131s\u0131\n# dtype: array veri tipi\n\na = np.random.randint(10, size=10)\n\na.ndim\na.shape\na.size\na.dtype","ae6f109e":"#############################################\n# Yeniden \u015eekillendirme (Reshaping)\n#############################################\n\nnp.arange(1, 10)\nnp.arange(1, 10).reshape((3, 3))","167e2e75":"#############################################\n# Index Se\u00e7imi (Index Selection)\n#############################################\n\na = np.random.randint(10, size=10)\na[0]\na[-1]\na[0] = 999\na","702e9c2a":"m = np.random.randint(10, size=(3, 5))\nm","36bb9c0f":"m[0, 0]\nm[1, 1]\nm[2, 3]\nm[2, 3] = 9999\n\nm","72451e12":"# ondal\u0131k say\u0131 ekleme\nm[2, 3] = 2.9\nm","b2c1fbbb":"m\n\nm[:, 0]## t\u00fcm sat\u0131rlar\u0131 t\u00fcm s\u00fct\u00fcnlar\u0131\nm[1, :]\n","88964eed":"m[0:2, 0:3]","76a36088":"#############################################\n# Slicing\n#############################################\n\na = np.random.randint(10, size=10)\na[1:10]","9e73cb5b":"m = np.random.randint(10, size=(3, 5))\nm[:, 0]\nm[1, :]\nm[0:2, 0:3]","a7ff76b3":"#############################################\n# Step\n#############################################\n\nstep = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nstep[1:10:2]# \u0130LK B\u00d6L\u00dcM ARALIK, nas\u0131l gitsin","f1e08e85":"#############################################\n# Fancy Index\n#############################################\n\nv = np.arange(0, 30, 3)\nv","bc3054dd":"\nv[1]\nv[4]\nv[3]","47e95203":"catch = [1, 2, 3]\nv[catch]\n\nm = np.arange(9).reshape((3, 3))\nm\n\nm[2, [1, 2]]# sat\u0131rlarda index, s\u00fct\u00fcnlerde \nm\nm[0:1, [1, 2]] # ayn\u0131 anda hem slice hem pancy i\u015flemi nas\u0131l yap\u0131l\u0131r\n##slice par\u00e7a al\u0131yor ald\u0131\u011f\u0131 par\u00e7a ard\u0131\u015f\u0131k. fancy istenenleri getiriyor ard\u0131\u015f\u0131k olmas\u0131na gerek yok\n#Fancy istedi\u011fimiz index de\u011ferlerini bir listede belirterek ilgili indexe kar\u015f\u0131l\u0131k gelen elemanlar se\u00e7ilir. Slice i\u015flemi ilgili veri setinden dilim almak i\u00e7in \u00f6rne\u011fin 1:7 aras\u0131 index dilimini se\u00e7tirir.\n","52b287e4":"#############################################\n# Numpy'da Ko\u015fullu \u0130\u015flemler (Conditions on Numpy)\n#############################################\n\nv = np.array([1, 2, 3, 4, 5])\nv","824a3b03":"#######################\n# Klasik d\u00f6ng\u00fc ile\n#######################\n\nab = []\n\nfor i in v:\n    if i < 3:\n        ab.append(i)\n\nab","945b635b":"v","6f062631":"#######################\n# Numpy ile\n#######################\n\nv < 3 # truefalse d\u00f6ner\nv[v < 3] # true g\u00f6rd\u00fcklerini getirecek., d\u00f6ng\u00fc var append var.\nv[v > 3]\nv[v >= 3]\nv[v <= 3]\nv[v == 3]","2e2e67ff":"#############################################\n# Matematiksel \u0130\u015flemler (Mathematical Operations)\n#############################################\n\nv = [1, 2, 3] # listeyi b\u00f6lemem, numpy array \u00e7evirip\nv \/ 5\nv * 5 \/ 10\nv ** 2\nv - 1\nv * 5","93a9c497":"v= np.array([1,2,3,4,5])\nv \/ 5\nv * 5 \/ 10\nv ** 2\nv - 1\nv * 5","c1372b2b":"# yufang\nnp.subtract(v, 1)\nnp.add(v, 1)\nnp.mean(v)\nnp.sum(v)\nnp.min(v)\nnp.max(v)\nnp.var(v)","fb06e4fe":"#######################\n# NumPy ile \u0130ki Bilinmeyenli Denklem \u00c7\u00f6z\u00fcm\u00fc\n#######################\n\n# 5*x0 + x1 = 12\n# x0 + 3*x1 = 10\n\na = np.array([[5, 1], [1, 3]]) # xlerin katsay\u0131lar\u0131lar\u0131\nb = np.array([12, 10]) #\n\nnp.linalg.solve(a, b) # bilinmeyeni bulma\n# \u00f6zet, vekt\u00f6rel h\u0131zl\u0131 i\u015flem yapar. tek tip. pandas, seaborn \u00fczerinden y\u00fcklseliyor","96c07057":"#############################################\n# PANDAS\n#############################################\n\n# Panel Data\n# Veri manip\u00fclasyonu ve veri analizi i\u00e7in yaz\u0131lm\u0131\u015f a\u00e7\u0131k kaynak kodlu bir Python k\u00fct\u00fcphanesidir.\n# Ekonometrik ve finansal \u00e7al\u0131\u015fmalar i\u00e7in do\u011fmu\u015ftur.\n# Temeli 2008 y\u0131l\u0131nda at\u0131lm\u0131\u015ft\u0131r.\n# Bir \u00e7ok farkl\u0131 veri tipini okuma ve yazma imkan\u0131 sa\u011flar.\n\n# - Pandas Series\n# - Veri Okuma (Reading Data)\n# - Veriye H\u0131zl\u0131 Bak\u0131\u015f (Quick Look at Data)\n# - Pandas'ta Se\u00e7im \u0130\u015flemleri (Selection in Pandas)\n# - Toplula\u015ft\u0131rma ve Gruplama (Aggregation & Grouping)\n# - Apply ve Lambda\n# - Birle\u015ftirme (Join) \u0130\u015flemleri\n\n\n#############################################\n# Pandas Series\n#############################################\n\nimport pandas as pd\n\ns = pd.Series([10, 88, 3, 4, 5])\n\ntype(s)\ns.index\ns.dtype\ns.size\ns.ndim\n\n","3265571e":"type(s)","1ad5087b":"# numpy arraya \u00e7eviryor dikkat.\ntype(s.values)","58cbfdd0":"s.head(3)\ns.tail(3)","ab32c143":"#############################################\n# Veri Okuma (Reading Data)\n#############################################\n\nimport pandas as pd\ndf = pd.read_csv('..\/input\/titanic.csv')\n","ae808343":"help(np.read)","f7175e12":"#############################################\n# Bir Dizindeki Birden Fazla CSV Dosyas\u0131n\u0131 Okumak ve Tek Bir DF'e \u00c7evirmek\n#############################################\n\nimport glob\n\nall_files = glob.glob(r'\/Users\/mvahit\/Documents\/DSMLBC5\/datasets\/csv_path' + \"\/*.csv\")\nfile_list = [pd.read_csv(f) for f in all_files]\nall_df = pd.concat(file_list, axis=0, ignore_index=True)\n# list comprehension yerine d\u00f6ng\u00fc ve append de kullan\u0131labilir.\n\n# alternatif\nall_df = pd.concat(map(pd.read_csv, glob.glob('\/Users\/mvahit\/Documents\/DSMLBC5\/datasets\/csv_path\/*.csv')))\n","abda84ff":"#############################################\n# Bir Dizindeki Birden Fazla CSV Dosyas\u0131n\u0131 Okumak ve Tek Bir DF'e \u00c7evirmek\n#############################################\n\nimport glob\n\nall_files = glob.glob(r'\/Users\/mvahit\/Documents\/DSMLBC5\/datasets\/csv_path' + \"\/*.csv\")\nfile_list = [pd.read_csv(f) for f in all_files]\nall_df = pd.concat(file_list, axis=0, ignore_index=True)\n# list comprehension yerine d\u00f6ng\u00fc ve append de kullan\u0131labilir.\n\n# alternatif\nall_df = pd.concat(map(pd.read_csv, glob.glob('\/Users\/mvahit\/Documents\/DSMLBC5\/datasets\/csv_path\/*.csv')))\n","bfa4faff":"#############################################\n# Veriye H\u0131zl\u0131 Bak\u0131\u015f (Quick Look at Data)\n#############################################\ndf = pd.read_csv('datasets\/titanic.csv')\ndf.head()\ndf.tail()\ndf.shape\ndf.info()\ndf.columns\ndf.index\ndf.describe().T\ndf.isnull().values.any() # eksik de\u011fer var m\u0131 bir tane bile olsa\ndf.isnull().sum()\ndf[\"Sex\"].value_counts()","b757d51c":"############################################\n# Pandas'ta Se\u00e7im \u0130\u015flemleri (Selection in Pandas)\n#############################################\n\n# - Index \u00dczerinde \u0130\u015flemler\n# - De\u011fi\u015fkeni Indexe \u00c7evirmek\n# - Indexi De\u011fi\u015fkene \u00c7evirmek\n# - De\u011fi\u015fkenler \u00dczerinde \u0130\u015flemler\n# - Value'lar \u00dczerinde \u0130\u015flemler\n# - iloc & loc\n# - Ko\u015fullu Se\u00e7im (Conditional Selection)\n\n\n#######################\n# Index \u00dczerinde \u0130\u015flemler\n#######################\n\ndf.index\ndf[13:18]\ndf.drop(0, axis=0).head()\ndelete_indexes = [1, 3, 5, 7]\ndf.drop(delete_indexes, axis=0).head(10)\n# df.drop(delete_indexes, axis=0, inplace=True) # index sildirk dikkat\n","f8d9eaf6":"#######################\n# De\u011fi\u015fkeni Indexe \u00c7evirmek\n#######################\n\ndf.sort_values(\"PassengerId\").head()# passangerId g\u00f6re s\u0131rama\ndf = df.sort_values(\"PassengerId\")\ndf.index = df[\"PassengerId\"] #indexe yeni Id atamak\ndf.head()\n\ndf.drop(\"PassengerId\", axis=1).head() #de\u011fi\u015fken sildim\ndf.loc[:, df.columns != 'PassengerId'].head()\n\ndf.drop(\"PassengerId\", axis=1, inplace=True)\ndf.head()\ndf.index","5dd083ef":"#######################\n# Indexi De\u011fi\u015fkene \u00c7evirmek\n#######################\n\n\n# birinci yol\ndf[\"PassengerId\"] = df.index # yeni de\u011fi\u015fken tan\u0131mlama\ndf.head()\n\ndf.drop(\"PassengerId\", axis=1, inplace=True)\ndf.head()\n\n# ikinci yol\ndf.reset_index().head()\ndf = df.reset_index() # kal\u0131c\u0131 \u015fekilde kay\u0131t etme","1171ba91":" \n\n#######################\n# De\u011fi\u015fkenler \u00dczerinde \u0130\u015flemler\n#######################\n\n\n\"Age\" in df\ndf[\"Age\"].head() # k\u00f6\u015feli i\u00e7inde eleman se\u00e7me\ndf[[\"Age\"]].head()## iki  k\u00f6\u015feli parantez\ndf.Age.head()\ndf[[\"Age\", \"PassengerId\"]].head()  # birden fazla eleman se\u00e7me\n\ncol_names = [\"Age\", \"Embarked\", \"Ticket\"] birden fazla de\u011fi\u015fken se\u00e7me i\u015flemleri\ndf[col_names].head() \n\n\ndf[\"Age2\"] = df[\"Age\"] ** 2 #olmayan bir de\u011fi\u015fkeni yaratma\ndf[\"Age3\"] = df[\"Age\"] \/ df[\"Age2\"]\ndf.head()\n\n\ndf.drop(\"Age3\", axis=1).head()\n\ncol_names = [\"Age\", \"Embarked\", \"Ticket\"]\ndf.drop(col_names, axis=1).head()\n\n\ndf.head()\n\n# \u0130\u00e7erisinde age ge\u00e7meyen de\u011fi\u015fkenleri silme:\ndf.loc[:, ~df.columns.str.contains('Age')].head()\n\n# \u0130\u00e7erisinde age ge\u00e7en de\u011fi\u015fkenleri se\u00e7me\ndf.loc[:, df.columns.str.contains('Age')].head()\n","adaa479a":"#######################\n# Value'lar \u00dczerinde \u0130\u015flemler\n#######################\n\ndf.values\n\n# Peki mesela bunu bir d\u00f6ng\u00fc ile gezmek istesek:\nfor row in df.values:\n    print(row)\n    \n    # Peki mesela bunu bir d\u00f6ng\u00fc ile gezmek istesek:\nfor row in df.values:\n    print(row[2] +row[0])","fc32db22":"#######################\n# iloc & loc\n#######################\n\n# iloc: integer based selection\ndf.head()\ndf.iloc[0:3]\ndf.iloc[0, 0]\n\n# loc: label based selection\ndf.loc[0:3]\ndf[0:3]\n","711d2250":"\n\n# df[0:3, \"Age\"]\n# df.iloc[0:3, \"Age\"]\n\ndf.loc[0:3, \"Age\"]\ncol_names = [\"Age\", \"Embarked\", \"Ticket\"]\ndf.loc[0:3, col_names]\n\n#######################\n# Ko\u015fullu Se\u00e7im (Conditional Selection)\n#######################\n\n# Se\u00e7meleri bir hat\u0131rlayal\u0131m:\ndf[\"Age\"].head()\ndf.Age.head()\ndf[[\"Age\", \"Age2\", \"Age3\"]].head()\n\n\ndf[\"Age\"] > 50\ndf[df[\"Age\"] > 50].head()\ndf[df[\"Age\"] > 50].count()\ndf[df[\"Age\"] > 50][\"PassengerId\"].count()\ndf[df[\"Age\"] > 50][\"Name\"]\ndf[df[\"Age\"] > 50][\"Name\"].nunique()\ndf.loc[df[\"Age\"] > 50, \"Name\"].head()\n\n\ndf[(df[\"Age\"] > 50) & (df[\"Sex\"] == \"female\")].head()\ndf[(df[\"Age\"] > 50) & (df[\"Sex\"] == \"female\")][\"PassengerId\"].count()\ndf[df[\"Age\"] > 50][\"PassengerId\"].count()\n\n\n#############################################\n# Toplula\u015ft\u0131rma ve Gruplama (Aggregation & Grouping)\n#############################################\n\n# - count()\n# - first()\n# - last()\n# - mean()\n# - median()\n# - min()\n# - max()\n# - std()\n# - var()\n# - sum()\n# - pivot table\n\n\ndf[df[\"Age\"] > 50][[\"PassengerId\", \"Sex\"]].groupby(\"Sex\").agg({\"count\"})\n\ndf.loc[df[\"Age\"] > 50, [\"PassengerId\", \"Sex\"]].groupby(\"Sex\").agg({\"count\"})\n\ndf.loc[df[\"Age\"] > 50, [\"PassengerId\", \"Sex\"]].groupby(\"Sex\").agg([\"count\", \"mean\"])\n\ndf.loc[df[\"Age\"] > 50, [\"PassengerId\", \"Age\", \"Sex\"]].groupby(\"Sex\").agg({\"PassengerId\": \"count\",\n                                                                          \"Age\": \"mean\"})\n\n\ndf.loc[df[\"Age\"] > 50, [\"PassengerId\", \"Age\", \"Sex\"]].groupby(\"Sex\").agg({\"PassengerId\": \"count\",\n                                                                          \"Age\": [\"min\", \"max\", \"mean\"]})\n\n\ndf.loc[df[\"Age\"] > 50].groupby([\"Sex\", \"Embarked\", \"Pclass\"]).agg({\"PassengerId\": \"count\",\n                                                                   \"Age\": [\"min\", \"max\", \"mean\"]})\n\ndf.groupby([\"Sex\", \"Embarked\", \"Pclass\"]).agg({\"PassengerId\": \"count\",\n                                               \"Age\": [\"min\", \"max\", \"mean\"]})\n\nagg_functions = [\"nunique\", \"first\", \"last\", \"sum\", \"var\", \"std\"]\n\n# T\u00fcm veriye uygulayal\u0131m\ndf.groupby([\"Sex\", \"Embarked\", \"Pclass\"]).agg({\"PassengerId\": \"count\",\n                                               \"Age\": agg_functions})\n\n#######################\n# Pivot table\n#######################\n\n# Veriyi tekrar okutal\u0131m.\ndf = pd.read_csv('datasets\/titanic.csv')\n\ndef load_titanic():\n    return pd.read_csv('datasets\/titanic.csv')\n\n\ndf = load_titanic()\ndf.head()\n\n\ndf.pivot_table(values=\"Age\", index=\"Sex\", columns=\"Embarked\")\n\ndf.pivot_table(values=\"Survived\", index=\"Sex\", columns=\"Embarked\")\n\ndf.pivot_table(values=\"Age\", index=\"Sex\", columns=\"Embarked\", aggfunc=\"std\")\n\n#######################\n# Say\u0131sal De\u011fi\u015fkenin Kategorik De\u011fi\u015fkene \u00c7evrilmesi\n#######################\n\n# Ya\u015f de\u011fi\u015fkenini daha sa\u011fl\u0131kl\u0131 bir \u015fekilde pivota almak istiyoruz.\ndf.head()\ndf[\"new_age\"] = pd.cut(df[\"Age\"], [0, 10, 18, 25, 40, 90])\ndf.head()\n\ndf.pivot_table(\"Survived\", index=\"Sex\", columns=\"new_age\")\n\n# Bir boyut daha ekleyelim\ndf.pivot_table(\"Survived\", index=[\"Sex\", \"Pclass\"], columns=\"new_age\")\n","dd071b5e":"#############################################\n# Apply ve Lambda\n#############################################\n\n# \u015eimdi amac\u0131m ya\u015f de\u011fi\u015fkenine bir d\u00f6n\u00fc\u015f\u00fcm uygulamak olsun.\n# \u00d6nce klasik yolla d\u00f6ng\u00fc yazarak yapaca\u011f\u0131z sonra apply ile yapaca\u011f\u0131z.\n\n# E \u00f6ncelikle bir uygulayal\u0131m mesela el ile.\n(df[\"Age\"] ** 2).head()\n(df[\"Age2\"] ** 2).head()\n(df[\"Age3\"] ** 2).head()\n","5c54ece5":"for col in df.columns:\n    if \"Age\" in col:\n        print(col)\n\n\nfor col in df.columns:\n    if \"Age\" in col:\n        print((df[col] ** 2).head())\n\n# Hayat kurtaran serisi\nfor col in df.columns:\n    if \"Age\" in col:\n        df[col] = df[col] ** 2\n\ndf.head()","c4a3059b":"\n\n\n\ndf[[\"Age\", \"Age2\", \"Age3\"]].apply(lambda x: x ** 2).head()\n\n\ndf.loc[:, df.columns.str.contains('Age')].apply(lambda x: x ** 2).head()\n\ndf.loc[:, df.columns.str.contains('Age')].apply(lambda x: (x - x.mean()) \/ x.std()).head()\n# x her bir de\u011fi\u015fkene gitti\u011findeki de\u011fer,\ndf[[\"Age\"]].apply(lambda x: (x - x.mean()) \/ x.std()).head()\n\n\ndef standart_scaler(col_name):\n    return (col_name - col_name.mean()) \/ col_name.std()\n\n\nstandart_scaler(df[\"Age\"]).head()\n\n\ndf[[\"Age\"]].apply(standart_scaler).head()\n\ndf.loc[:, df.columns.str.contains('Age')].apply(standart_scaler).head()\n\n\ndf.loc[:, [\"Age\", \"Age2\", \"Age3\"]] = df.loc[:, df.columns.str.contains('Age')].apply(standart_scaler)\ndf.head()\n","d8dc390d":"#############################################\n# Birle\u015ftirme (Join) \u0130\u015flemleri\n#############################################\n\n\nimport numpy as np\nimport pandas as pd\n\nm = np.random.randint(1, 30, size=(5, 3))\ndf1 = pd.DataFrame(m, columns=[\"var1\", \"var2\", \"var3\"])\ndf1\n\ndf2 = df1 + 99\n\ndf2\n\n#######################\n# concat ile Birle\u015ftirme \u0130\u015flemleri\n#######################\n\n\npd.concat([df1, df2])\n\n\npd.concat([df1, df2], ignore_index=True)\n\n\ndf2.columns = [\"var1\", \"var2\", \"deg3\"]\ndf1.columns\n\npd.concat([df1, df2])\n\n#kesi\u015fenleri bana getir.\npd.concat([df1, df2], join=\"inner\")","62569472":"######################\n# Merge ile Birle\u015ftirme \u0130\u015flemleri\n#######################\nimport pandas as pd\ndf1 = pd.DataFrame({'employees': ['john', 'dennis', 'mark', 'maria'],\n                    'group': ['accounting', 'engineering', 'engineering', 'hr']})\n\ndf2 = pd.DataFrame({'employees': ['mark', 'john', 'dennis', 'maria'],\n                    'start_date': [2010, 2009, 2014, 2019]})","23f587fc":"df1","f4c15ce7":"df2","5fc425d8":"# Ama\u00e7: Her \u00e7al\u0131\u015fan\u0131n i\u015fe ba\u015flang\u0131\u00e7 tarihine ula\u015fmak\npd.merge(df1, df2)","b03077cd":"# Ama\u00e7: Her \u00e7al\u0131\u015fan\u0131n i\u015fe ba\u015flang\u0131\u00e7 tarihine ula\u015fmak\npd.merge(df1, df2)\npd.merge(df1, df2, on=\"employees\")","7a7c296c":"# Ama\u00e7: Her \u00e7al\u0131\u015fan\u0131n m\u00fcd\u00fcr\u00fcn\u00fcn bilgisine eri\u015fmek\ndf3 = pd.merge(df1, df2)\ndf3","53ce96fb":"df4 = pd.DataFrame({'group': ['accounting', 'engineering', 'hr'],\n                    'manager': ['Caner', 'Mustafa', 'Berkcan']})\n\npd.merge(df3, df4)","25c695e9":" # Ama\u00e7: Meslek grubu yeteneklerinin ki\u015filerle e\u015fle\u015ftirilmesi\ndf5 = pd.DataFrame({'group': ['accounting', 'accounting', 'engineering', 'engineering', 'hr', 'hr'],\n                    'skills': ['math', 'excel', 'coding', 'linux', 'excel', 'management']})\n\ndf5","485f73e2":"# Ama\u00e7: Meslek grubu yeteneklerinin ki\u015filerle e\u015fle\u015ftirilmesi\ndf5 = pd.DataFrame({'group': ['accounting', 'accounting', 'engineering', 'engineering', 'hr', 'hr'],\n                    'skills': ['math', 'excel', 'coding', 'linux', 'excel', 'management']})\n\npd.merge(df1, df5)","7165e56b":"import seaborn as sns\nsns.load(\"tips\")","2679d6b6":"#############################################\n# VER\u0130 G\u00d6RSELLE\u015eT\u0130RME: SEABORN & MATPLOTLIB\n#############################################\n\n\n#############################################\n# MATPLOTLIB\n#############################################\n\n# Low level python veri g\u00f6rselle\u015ftirme arac\u0131.\n# Di\u011fer veri g\u00f6rselle\u015ftirme ara\u00e7lar\u0131n\u0131n atas\u0131.\n# Bir\u00e7ok noktada di\u011fer g\u00f6rselle\u015ftirme ara\u00e7lar\u0131na da destek sa\u011flamaktad\u0131r.\n# \u00d6zellikle grafik bi\u00e7imlendirme konular\u0131nda.\n\nimport matplotlib.pyplot as plt","a9f973c1":"#############################################\n# Kategorik De\u011fi\u015fken G\u00f6rselle\u015ftirme\n#############################################\n\ndf['sex'].value_counts().plot(kind='bar', rot=0)\nplt.show()","9d7118ad":"#############################################\n# Say\u0131sal De\u011fi\u015fken G\u00f6rselle\u015ftirme\n#############################################\n\n# Histogram\nplt.hist(df[\"total_bill\"])\nplt.show()\n\n# Boxplot\nplt.boxplot(df[\"total_bill\"])\nplt.show()\n\n#############################################\n# Matplotlib'in \u00d6zellikleri\n#############################################\n\n#######################\n# plot\n#######################\n\n# \u0130ki nokta aras\u0131nda \u00e7izgi \u00e7izmek\nx = np.array([1, 8])\ny = np.array([0, 150])\n\nplt.plot(x, y)\nplt.show()\n\n# \u00c7izgisiz sadece noktalar\u0131 g\u00f6stermek\nplt.plot(x, y, 'o')\nplt.show()\n\n# Daha fazla say\u0131da nokta\nx = np.array([2, 4, 6, 8, 10])\ny = np.array([1, 3, 5, 7, 9])\n\nplt.plot(x, y)\nplt.show()\n\n#######################\n# marker\n#######################\n\ny = np.array([13, 28, 11, 100])\n\n# y noktalar\u0131na i\u00e7i dolu daire koymak\nplt.plot(y, marker='o')\nplt.show()\n\n# y noktalar\u0131na y\u0131ld\u0131z koymak\nplt.plot(y, marker='*')\nplt.show()\n\n# bu markerlerdan bir\u00e7ok var.\nmarkers = ['o', '*', '.', ',', 'x', 'X', '+', 'P', 's', 'D', 'd', 'p', 'H', 'h']\n\nfor marker in markers:\n    plt.plot(y, marker)\n    plt.show()\n\n#######################\n# line\n#######################\n\ny = np.array([13, 28, 11, 100])\nplt.plot(y)\nplt.show()\n\n# bir\u00e7ok \u00e7izgi \u00e7e\u015fidi de var\nstyles = ['dotted', 'dashed', 'dashdot']\nfor style in styles:\n    plt.plot(y, linestyle=style)\n    plt.show()\n\n# e bir\u00e7ok renk de var\n# hem rengi hem de stilleri de\u011fi\u015ftirerek yazd\u0131ral\u0131m\nstyles = ['dotted', 'dashed', 'dashdot']\ncolors = ['r', 'g', 'b', 'c', 'm', 'y', 'k', 'w']\n\nfor style in styles:\n    for color in colors:\n        plt.plot(y, linestyle=style, color=color)\n        plt.title(style + \" \" + color)\n        plt.show()\n\n# \u015fimdi daha da \u00e7\u0131ld\u0131rtal\u0131m patronu\ncolors_dict = {'r': \"red\", 'g': \"green\", 'b': \"blue\", 'c': \"cyan\",\n               'm': \"magenta\", 'y': \"yellow\", 'k': \"black\", 'w': \"white\"}\n\nfor style in styles:\n    for color in colors_dict.keys():\n        plt.plot(y, linestyle=style, color=color)\n        plt.title(style.upper() + \" \" + colors_dict[color])\n        plt.show()\n\n#######################\n# Multiple Lines\n#######################\n\nx = np.array([23, 18, 31, 10])\ny = np.array([13, 28, 11, 100])\nplt.plot(x)\nplt.plot(y)\nplt.show()\n\n#######################\n# Labels\n#######################\n\nx = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\ny = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])\nplt.plot(x, y)\n\n# Ba\u015fl\u0131k\nplt.title(\"Bu ana ba\u015fl\u0131k\")\n# X eksenini isimlendirme\nplt.xlabel(\"X ekseni isimlendirmesi\")\n# Y eksenini isimlendirme\nplt.ylabel(\"Y ekseni isimlendirmesi\")\n# Izgara\nplt.grid()\n\nplt.show()\n\n#######################\n# Subplots\n#######################\n\n\n# 2 farkl\u0131 grafi\u011fi tek sat\u0131r iki s\u00fctun olarak konumlamak.\n# plot 1\nx = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\ny = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])\nplt.subplot(1, 2, 1)\nplt.title(\"1\")\nplt.plot(x, y)\n\n# plot 2\nx = np.array([8, 8, 9, 9, 10, 15, 11, 15, 12, 15])\ny = np.array([24, 20, 26, 27, 280, 29, 30, 30, 30, 30])\nplt.subplot(1, 2, 2)\nplt.title(\"2\")\nplt.plot(x, y)\n\nplt.show()\n\n# 3 grafi\u011fi bir sat\u0131r 3 s\u00fctun olarak konumlamak.\n# plot 1\nx = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\ny = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])\nplt.subplot(1, 3, 1)\nplt.title(\"1\")\nplt.plot(x, y)\n\n# plot 2\nx = np.array([8, 8, 9, 9, 10, 15, 11, 15, 12, 15])\ny = np.array([24, 20, 26, 27, 280, 29, 30, 30, 30, 30])\nplt.subplot(1, 3, 2)\nplt.title(\"2\")\nplt.plot(x, y)\n\n# plot 3\nx = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\ny = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])\nplt.subplot(1, 3, 3)\nplt.title(\"3\")\nplt.plot(x, y)\n\nplt.show()","f7f0bc92":" \n\n#############################################\n# SEABORN\n#############################################\n\n# Veri g\u00f6rselle\u015ftirme i\u00e7in kullan\u0131lan y\u00fcksek seviye bir k\u00fct\u00fcphanedir.\n\n# Veri g\u00f6rselle\u015ftirme k\u00fct\u00fcphaneleri fazla alternatif ve \u00f6zellik oldu\u011fundan dolay\u0131 kullan\u0131lmas\u0131 kar\u0131\u015f\u0131kl\u0131k yaratmaktad\u0131r.\n\n# Basit\u00e7e veri g\u00f6rselle\u015ftirme yapabilmenin 2 ad\u0131m\u0131 vard\u0131r.\n# De\u011fi\u015fken tipini ve tipe uygun veri g\u00f6rselle\u015ftirme tekni\u011fini bilmektir.\n\n# Kategorik De\u011fi\u015fkenler: countplot\n# Say\u0131sal De\u011fi\u015fkenler: histogram ve boxplot\n\n\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\ndf = sns.load_dataset(\"tips\")\n\ndf.head()\ndf.describe().T\n\n#############################################\n# Kategorik De\u011fi\u015fken G\u00f6rselle\u015ftirme\n#############################################\n\ndf[\"sex\"].value_counts()\n\nsns.countplot(x=df[\"sex\"], data=df)\nplt.show()\n\ndf['sex'].value_counts().plot(kind='bar', rot=0)\nplt.show()\n\n#############################################\n# Say\u0131sal De\u011fi\u015fken G\u00f6rselle\u015ftirme\n#############################################\n\n# pandas ile histogram\ndf[\"total_bill\"].hist()\nplt.show()\n\n# seaborn ile boxplot\nsns.boxplot(x=df[\"total_bill\"])\nplt.show()\n\n\n\n\n\n\n#############################################\n# GEL\u0130\u015eM\u0130\u015e FONKS\u0130YONEL KE\u015e\u0130F\u00c7\u0130 VER\u0130 ANAL\u0130Z\u0130 (ADVANCED FUNCTIONAL EDA)\n#############################################\n\n# 1. Genel Resim\n# 2. Kategorik De\u011fi\u015fken Analizi (Analysis of Categorical Variables)\n# 3. Say\u0131sal De\u011fi\u015fken Analizi (Analysis of Numerical Variables)\n# 4. Hedef De\u011fi\u015fken Analizi (Analysis of Target Variable)\n# 5. Korelasyon Analizi (Analysis of Correlation)\n\n\n\n#############################################\n# 1. Genel Resim\n#############################################\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\npd.pandas.set_option('display.max_columns', None)\n\ndef load_titanic():\n    df = pd.read_csv(\"datasets\/titanic.csv\")\n    return df\n\ndef load_app_train():\n    df = pd.read_csv(\"datasets\/application_train.csv\")\n    return df\n\ndf = load_titanic()\n\ndf.head()\ndf.tail()\ndf.shape\ndf.info()\ndf.columns\ndf.index\ndf.describe().T\ndf.isnull().values.any()\ndf.isnull().sum()\n\n\n# S\u0131k kullan\u0131lan baz\u0131 ihtiya\u00e7lar\u0131m\u0131za g\u00f6re genel resmi \u00e7\u0131karak bir fonksiyon yazal\u0131m.\ndef check_df(dataframe, head=5):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(head))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(head))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n\ncheck_df(df)\n\ndff = load_app_train()\ncheck_df(dff)\n\n\n\n#############################################\n# 2. Kategorik De\u011fi\u015fken Analizi (Analysis of Categorical Variables)\n#############################################\n\n# Kategorik de\u011fi\u015fken s\u0131n\u0131flar\u0131 ve frekanslar\u0131\ndf[\"Sex\"].value_counts()\n\n# Kategorik de\u011fi\u015fkenin s\u0131n\u0131flar\u0131\ndf[\"Sex\"].unique()\n\n# E\u015fsiz s\u0131n\u0131f say\u0131s\u0131\ndf[\"Sex\"].nunique()\n\n# Kac kategorik de\u011fi\u015fken var ve isimleri neler?\ncat_cols = [col for col in df.columns if df[col].dtypes == \"O\"]\n\n# Say\u0131sal olan fakat 10'dan az say\u0131da s\u0131n\u0131fa sahip olan de\u011fi\u015fkenleri nas\u0131l yakalar\u0131z?\nnum_but_cat = [col for col in df.columns if df[col].nunique() < 10 and df[col].dtypes != \"O\"]\n\n# Peki kategorik olan fakat \u00f6l\u00e7\u00fclemeyecek kadar fazla say\u0131da s\u0131n\u0131fa sahip olan de\u011fi\u015fkenleri nas\u0131l yakalar\u0131z?\ncat_but_car = [col for col in df.columns if df[col].nunique() > 20 and df[col].dtypes == \"O\"]\n\n\ncat_cols\nnum_but_cat\ncat_but_car\n\n# cat_cols var bir de numerik gibi davranan cat'ler var. Hepsini bir araya getirelim.\ncat_cols = cat_cols + num_but_cat\n\n# kategorikler i\u00e7erisinden kardinalleri \u00e7\u0131karal\u0131m\ncat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n# nihai de\u011fi\u015fkenleri ve s\u0131n\u0131f say\u0131lar\u0131n\u0131 g\u00f6zlemleyelim\ndf[cat_cols].nunique()\n\n\ndef cat_summary(dataframe, col_name, plot=False):\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                        \"Ratio\": 100 * dataframe[col_name].value_counts() \/ len(dataframe)}))\n    print(\"##########################################\")\n    if plot:\n        sns.countplot(x=dataframe[col_name], data=dataframe)\n        plt.show()\n\n\ncat_summary(df, \"Survived\")\ncat_summary(df, \"Survived\", plot=True)\n\n\nfor col in cat_cols:\n    cat_summary(df, col)\n\n\n#############################################\n# 3. Say\u0131sal De\u011fi\u015fken Analizi (Analysis of Numerical Variables)\n#############################################\n\ndf.describe().T\ndf[[\"Age\", \"Fare\"]].describe([0.05, 0.10, 0.25, 0.50, 0.75, 0.80, 0.90, 0.95, 0.99]).T\n\n\nnum_cols = [col for col in df.columns if df[col].dtypes != 'O']\n\n# survived ve passengerid'yi \u00e7\u0131karal\u0131m.\nnum_cols = [col for col in df.columns if df[col].dtypes != 'O' and col not in [\"PassengerId\", \"Survived\"]]\n\n# cat cols'da olmayanlar\u0131 se\u00e7elim\nnum_cols = [col for col in num_cols if col not in cat_cols]\n\ncat_cols\nnum_cols\n\ndf[\"Age\"].hist(bins=30)\nplt.show()\n\nsns.boxplot(x=df[\"Age\"])\nplt.show()\n\n\ndef num_summary(dataframe, numerical_col, plot=False):\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[numerical_col].describe(quantiles).T)\n\n    if plot:\n        dataframe[numerical_col].hist(bins=20)\n        plt.xlabel(numerical_col)\n        plt.title(numerical_col)\n        plt.show()\n\n\nnum_summary(df, \"Age\")\n\nfor col in num_cols:\n    num_summary(df, col, plot=True)\n\n\ndff = load_app_train()\ncheck_df(dff)\n\n\n#############################################\n# Kategorik ve Say\u0131sal De\u011fi\u015fken Analizinin Genelle\u015ftirilmesi\n#############################################\n\ndef grab_col_names(dataframe, cat_th=10, car_th=20):\n    \"\"\"\n\n    Veri setindeki kategorik, numerik ve kategorik fakat kardinal de\u011fi\u015fkenlerin isimlerini verir.\n    Not: Kategorik de\u011fi\u015fkenlerin i\u00e7erisine numerik g\u00f6r\u00fcn\u00fcml\u00fc kategorik de\u011fi\u015fkenler de dahildir.\n\n    Parameters\n    ------\n        dataframe: dataframe\n                De\u011fi\u015fken isimleri al\u0131nmak istenilen dataframe\n        cat_th: int, optional\n                numerik fakat kategorik olan de\u011fi\u015fkenler i\u00e7in s\u0131n\u0131f e\u015fik de\u011feri\n        car_th: int, optinal\n                kategorik fakat kardinal de\u011fi\u015fkenler i\u00e7in s\u0131n\u0131f e\u015fik de\u011feri\n\n    Returns\n    ------\n        cat_cols: list\n                Kategorik de\u011fi\u015fken listesi\n        num_cols: list\n                Numerik de\u011fi\u015fken listesi\n        cat_but_car: list\n                Kategorik g\u00f6r\u00fcn\u00fcml\u00fc kardinal de\u011fi\u015fken listesi\n\n    Examples\n    ------\n        import seaborn as sns\n        df = sns.load_dataset(\"iris\")\n        print(grab_col_names(df))\n\n\n    Notes\n    ------\n        cat_cols + num_cols + cat_but_car = toplam de\u011fi\u015fken say\u0131s\u0131\n        num_but_cat cat_cols'un i\u00e7erisinde.\n        Return olan 3 liste toplam\u0131 toplam de\u011fi\u015fken say\u0131s\u0131na e\u015fittir: cat_cols + num_cols + cat_but_car = de\u011fi\u015fken say\u0131s\u0131\n\n    \"\"\"\n\n\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    return cat_cols, num_cols, cat_but_car\n\ncat_cols, num_cols, cat_but_car = grab_col_names(dff)\n\nfor col in cat_cols:\n    cat_summary(dff, col)\n\nfor col in num_cols:\n    num_summary(dff, col, plot=True)\n\n\n#############################################\n# 4. Hedef De\u011fi\u015fken Analizi (Analysis of Target Variable)\n#############################################\n\n#######################\n# Hedef De\u011fi\u015fkenin Kategorik De\u011fi\u015fkenler ile Analizi\n#######################\n\ndf = load_titanic()\ncat_cols, num_cols, cat_but_car = grab_col_names(df)\n\ndef target_summary_with_cat(dataframe, target, categorical_col):\n    print(pd.DataFrame({\"TARGET_MEAN\": dataframe.groupby(categorical_col)[target].mean()}), end=\"\\n\\n\\n\")\n\n\ntarget_summary_with_cat(df, \"Survived\", \"Sex\")\n\nfor col in cat_cols:\n    target_summary_with_cat(df, \"Survived\", col)\n\n\n\n\n#######################\n# Hedef De\u011fi\u015fkenin Say\u0131sal De\u011fi\u015fkenler ile Analizi\n#######################\n\n\ndef target_summary_with_num(dataframe, target, numerical_col):\n    print(dataframe.groupby(target).agg({numerical_col: \"mean\"}), end=\"\\n\\n\\n\")\n\n\ntarget_summary_with_num(df, \"Survived\", \"Age\")\n\nfor col in num_cols:\n    target_summary_with_num(df, \"Survived\", col)\n\n\n#############################################\n# 5. Korelasyon Analizi (Analysis of Correlation)\n#############################################\n\ndf = pd.read_csv(\"\/Users\/mvahit\/Documents\/DSMLBC5\/datasets\/breast_cancer.csv\")\ndf = df.iloc[:, 1:-1]\nnum_cols = [col for col in df.columns if df[col].dtype in [int, float]]\ncorr = df[num_cols].corr()\n\n\nsns.set(rc={'figure.figsize': (12, 12)})\nsns.heatmap(corr, cmap=\"RdBu\")\nplt.show()\n\n#######################\n# Y\u00fcksek Korelasyonlu De\u011fi\u015fkenlerin Silinmesi\n#######################\n\n# birinci yol\ncolumns = np.full((corr.shape[0],), True, dtype=bool)\n\n# de\u011fi\u015fken \u00e7iftlerinden birisini yakala\nfor i in range(corr.shape[0]):\n    # de\u011fi\u015fken \u00e7iftlerinden di\u011ferini yakala\n    for j in range(i + 1, corr.shape[0]):\n        # e\u011fer korelasyon y\u00fczde 90 ya da daha b\u00fcy\u00fckse birisini se\u00e7\n        if corr.iloc[i, j] >= 0.9:\n            columns[j] = False\n\ndf.columns[columns]\n\n\n# ikinci yol\npd.set_option('display.max_columns', 5)\n# pd.set_option('display.max_rows', None)\ncor_matrix = df.corr().abs()\n\n#           0         1         2         3\n# 0  1.000000  0.117570  0.871754  0.817941\n# 1  0.117570  1.000000  0.428440  0.366126\n# 2  0.871754  0.428440  1.000000  0.962865\n# 3  0.817941  0.366126  0.962865  1.000000\n\n\n#     0        1         2         3\n# 0 NaN  0.11757  0.871754  0.817941\n# 1 NaN      NaN  0.428440  0.366126\n# 2 NaN      NaN       NaN  0.962865\n# 3 NaN      NaN       NaN       NaN\n\nupper_triangle_matrix = cor_matrix.where(np.triu(np.ones(cor_matrix.shape), k=1).astype(np.bool))\ndrop_list = [col for col in upper_triangle_matrix.columns if any(upper_triangle_matrix[col] > 0.90)]\ncor_matrix[~drop_list]\ndf.drop(drop_list, axis=1)\n\n\n\n# fonksiyonla\u015ft\u0131ral\u0131m:\ndef high_correlated_cols(dataframe, plot=False, corr_th=0.90):\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtype in [int, float]]\n    corr = dataframe[num_cols].corr()\n    cor_matrix = corr.abs()\n    upper_triangle_matrix = cor_matrix.where(np.triu(np.ones(cor_matrix.shape), k=1).astype(np.bool))\n    drop_list = [col for col in upper_triangle_matrix.columns if any(upper_triangle_matrix[col] > corr_th)]\n    if plot:\n        import seaborn as sns\n        import matplotlib.pyplot as plt\n        sns.set(rc={'figure.figsize': (15, 15)})\n        sns.heatmap(corr, cmap=\"RdBu\")\n        plt.show()\n    return drop_list\n\n\nhigh_correlated_cols(df, plot=True)\n\n\ndrop_list = high_correlated_cols(df)\n\n\ndf.drop(drop_list, axis=1)\n\n\nhigh_correlated_cols(df.drop(drop_list, axis=1), plot=True)\n\n\n# Yakla\u015f\u0131k 600 mb'l\u0131k 300'den fazla de\u011fi\u015fkenin oldu\u011fu bir veri seti\n# https:\/\/www.kaggle.com\/c\/ieee-fraud-detection\/data?select=train_transaction.csv\n\ndf = pd.read_csv(\"datasets\/fraud_train_transaction.csv\")\ndf.head()\nlen(df.columns)\n\ndrop_list = high_correlated_cols(df, plot=True)\n\nlen(df.drop(drop_list, axis=1).columns)\n","edc789ab":"y\u00fczlerce dosyas\u0131 tek tek mi okuyacaks\u0131n","9528419b":"# hayat kurtaran, Tekilleme veya \u00e7oklama","08e51f41":"Data kalp d\u00f6nd\u00fcren veri okuma","a3528e35":"# df.drop(delete_indexes, axis=0, inplace=True)\n\nkal\u0131c\u0131 de\u011fi\u015fiklik yapar"}}