{"cell_type":{"094a189c":"code","0373890e":"code","f3ded1bc":"code","744064fe":"code","e189942a":"code","42870dee":"markdown"},"source":{"094a189c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0373890e":"# load data\ndata = pd.read_csv(\"..\/input\/nasdaq-and-nyse-stocks-histories\/fh_20181104\/full_history\/AAPL.csv\")\ndata = data.sort_index(axis=0, ascending=False)\ndata[\"date\"] = pd.to_datetime(data[\"date\"])\n\ndata","f3ded1bc":"# Simple Moving Averages (50 and 200 days)\n#data['open_5SMA'] = data.iloc[:,2].rolling(window=5).mean()\ndata['open_50SMA'] = data[\"open\"].rolling(window=50).mean()\ndata['open_200SMA'] = data[\"open\"].rolling(window=200).mean()\n\n# Exponential Moving Averages (12 and 26 days)\n# One person had different math: .ewm(com=(12-1)\/2).mean()\ndata[\"open_12EMA\"] = data['open'].ewm(span=12).mean()\ndata[\"open_26EMA\"] = data['open'].ewm(span=26).mean()\n\n# Moving Average Convergence Divergence (MACD)\ndata[\"MACD\"] = data[\"open_12EMA\"] - data[\"open_26EMA\"]\n# MACD signal line is a 9 day EMA\ndata[\"MACD_signal_line\"] = data['MACD'].ewm(span=9).mean()\n\n\n# Stochastic Oscillator\n# current open - lowest open \/ (highest open - lowest open) * 100.   | Typically done with close, but I'm doing open for everything\nlookback = 14 # most common period range\n\ndata[\"stochastic_oscillator\"] = ((data[\"open\"] - data[\"open\"].rolling(lookback).min()) \/\n                                 (data[\"open\"].rolling(lookback).max() - data[\"open\"].rolling(lookback).min())) * 100\n# Signal line (3 day SMA of Stochstic Oscillator)\ndata[\"so_3SMA\"] = data[\"stochastic_oscillator\"].rolling(window=3).mean()\n\n\n# Relative Strength Index (RSI)\nwindow_length = 14\nclose = data[\"open\"]\n\ndelta = close.diff()\n# Get rid of the first row, which is NaN since it did not have a previous \n# row to calculate the differences\ndelta = delta[1:] \n\n# Make the positive gains (up) and negative gains (down) Series\nup, down = delta.copy(), delta.copy()\nup[up < 0] = 0\ndown[down > 0] = 0\n\n# Calculate the EWMA\nroll_up1 = up.ewm(span=window_length).mean()\nroll_down1 = down.abs().ewm(span=window_length).mean()\n\n# Calculate the RSI based on EWMA\nRS1 = roll_up1 \/ roll_down1\ndata[\"RSI_EMA\"] = 100.0 - (100.0 \/ (1.0 + RS1))\n\n# Calculate the SMA\nroll_up2 = up.rolling(window_length).mean()\nroll_down2 = down.abs().rolling(window_length).mean()\n\n# Calculate the RSI based on SMA\nRS2 = roll_up2 \/ roll_down2\ndata[\"RSI_SMA\"] = 100.0 - (100.0 \/ (1.0 + RS2))\n\n# Bollinger Bands\ndata[\"upper_band\"] = data[\"open\"].rolling(window=20).mean() + (2 * data[\"open\"].rolling(window=20).std())\ndata[\"middle_band\"] = data[\"open\"].rolling(window=20).mean()\ndata[\"lower_band\"] = data[\"open\"].rolling(window=20).mean() - (2 * data[\"open\"].rolling(window=20).std())\n\n\n# Bollinger Bands (other calculation, for how far outside of mean?)\n#data[\"bollinger\"] = ((data[\"open\"] - data[\"open\"].rolling(21).mean()) \/ \n #       2 * data[\"open\"].rolling(21).std())\n\n\n\ndata = data.dropna()\ndata.head()","744064fe":"#Cuts most of the data for graphing purposes  (~1 year left)\ndata = data[int(len(data) *.97):]","e189942a":"import matplotlib.pyplot as plt\n\n# Simple Moving Averages\nplt.figure(figsize=(24,7))\n\nplt.subplot(1, 2, 1)\ngraph = plt.plot(data[\"date\"], data[\"close\"], label= \"Close price\")\ngraph = plt.plot(data[\"date\"], data[\"open_50SMA\"], label= \"50 day SMA\")\nplt.title(\"50 Day Simple Moving Average\")\nplt.legend()\n\nplt.subplot(1,2,2)\ngraph = plt.plot(data[\"date\"], data[\"close\"], label= \"Close price\")\ngraph = plt.plot(data[\"date\"], data[\"open_200SMA\"], label = '200 day SMA')\nplt.title(\"200 Day Simple Moving Average\")\nplt.legend()\n\nplt.show()\n\n\n\n# Exponential Moving Averages\nplt.figure(figsize=(24,7))\n\nplt.subplot(1, 2, 1)\ngraph = plt.plot(data[\"date\"], data[\"close\"], label= \"Close price\")\ngraph = plt.plot(data[\"date\"], data[\"open_12EMA\"], label= \"12 day EMA\", color=\"red\")\nplt.title(\"12 Day Exponential Moving Average\")\nplt.legend()\n\nplt.subplot(1,2,2)\ngraph = plt.plot(data[\"date\"], data[\"close\"], label= \"Close price\")\ngraph = plt.plot(data[\"date\"], data[\"open_26EMA\"], label = '26 day EMA', color=\"red\")\nplt.title(\"26 Day Exponential Moving Average\")\nplt.legend()\n\nplt.show()\n\n\n\n# MACD and Signal Line\nplt.figure(figsize=(24,4))\n\nplt.subplot(1, 2, 1)\ngraph = plt.plot(data[\"date\"], data[\"MACD\"], label= \"MACD\", color=\"purple\")\ngraph = plt.plot(data[\"date\"], data[\"MACD_signal_line\"], label= \"MACD Signal Line\", color=\"green\")\nplt.title(\"Moving Average Convergence Divergence Trend and Signal Line\")\nplt.axhline(y=0, color=\"grey\")\nplt.legend()\n\n# Volume\nplt.subplot(1, 2, 2)\ngraph = plt.bar(data[\"date\"], data[\"volume\"], label= \"Volume\", color=\"purple\")\nplt.title(\"Volume (haven't figured out how to do volume indicators yet)\")\nplt.axhline(y=0, color=\"grey\")\nplt.legend(loc = \"upper left\")\n\nplt.show()\n\n\n\n# Stochastic Oscillators\nplt.figure(figsize=(24,4))\n\nplt.subplot(1, 2, 1)\ngraph = plt.plot(data[\"date\"], data[\"stochastic_oscillator\"], label= \"Stochastic Oscillator\", color=\"brown\")\nplt.legend(loc = \"upper left\")\nplt.title(\"Stochastic Oscillator with 14 Day Window\")\n\n\nplt.subplot(1, 2, 2)\ngraph = plt.plot(data[\"date\"], data[\"so_3SMA\"], label= \"3 Day SMA of Stochastic Oscillator\", color=\"gold\")\nplt.legend(loc = \"upper left\")\nplt.title(\"3 Day SMA of Stochastic Oscillator\")\n\nplt.show()\n\n\n\n# Relative Strength Index\nplt.figure(figsize=(24,4))\n\nplt.subplot(1, 2, 1)\ngraph = plt.plot(data[\"date\"], data[\"RSI_SMA\"], label= \"RSI based off SMA\", color=\"blue\")\nplt.legend(loc = \"upper left\")\nplt.title(\"Relative Strength Index based off 14 day SMA\")\n\n\nplt.subplot(1, 2, 2)\ngraph = plt.plot(data[\"date\"], data[\"RSI_EMA\"], label= \"RSI based off EMA\", color=\"blue\")\nplt.legend(loc = \"upper left\")\nplt.title(\"Relative Strength Index based off 14 day EMA\")\n\nplt.show()\n\n\n\n# Bollinger Bands\nplt.figure(figsize=(24,8))\n\nplt.subplot(1, 1, 1)\ngraph = plt.plot(data[\"date\"], data[\"upper_band\"], label= \"Upper Band\", color=\"lightblue\")\ngraph = plt.plot(data[\"date\"], data[\"middle_band\"], '--', label= \"Middle Band (20 SMA)\", color=\"lightblue\")\ngraph = plt.plot(data[\"date\"], data[\"close\"], label= \"Close price\", color=\"red\")\ngraph = plt.plot(data[\"date\"], data[\"lower_band\"], label= \"Lower Band\", color=\"lightblue\")\n\nplt.legend(loc = \"upper left\")\nplt.title(\"Bollinger Bands with close price\")\n\n\nplt.show()","42870dee":"### Trend following indicators:\n* Simple Moving Averages (SMA)\n* Exponential Moving Averages (EMA)\n* Moving Average Convergence Divergence (MACD)\n* MACD Signal\n\n### Momentum indicators:\n* Stochastic Oscillator\n* Relative Strength Index (RSI) based off SMA or EMA\n\n### Mean Reversion Indicators\n* Bollinger Bands\n\n### Volume Indicators\n* On-Balance-Volume (OBV)\n\n*Haven't figured out how to compute volume indicators yet*"}}