{"cell_type":{"96afd221":"code","59f8f33d":"code","7f553f35":"code","8b29d1ce":"code","ccde2d97":"code","f60d6f41":"code","01a1d411":"code","58251f9d":"code","ce65fffe":"code","58cfb045":"code","d35f42de":"code","a63fde3a":"code","a166f1ad":"code","9a4576e4":"code","5a79a49d":"code","c3bd4ae3":"code","eb2711de":"markdown","cf37a8f4":"markdown","b50ec596":"markdown","061ca59e":"markdown","9dcbf4be":"markdown"},"source":{"96afd221":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59f8f33d":"def df_snapshot(df):\n    display(df)\n    return df","7f553f35":"import matplotlib\n\nmatplotlib.rcParams['font.weight'] = \"light\"\nmatplotlib.rcParams['font.style'] = \"normal\"\nmatplotlib.rcParams['ytick.color'] = \"#434343\"\nmatplotlib.rcParams['xtick.color'] = \"#434343\"\nmatplotlib.rcParams['text.color'] = \"#434343\"\nmatplotlib.rcParams['axes.spines.left'] = False\nmatplotlib.rcParams['axes.spines.bottom'] = False\nmatplotlib.rcParams['axes.spines.top'] = False\nmatplotlib.rcParams['axes.spines.right'] = False\nmatplotlib.rcParams['axes.titleweight'] = 'semibold'\nmatplotlib.rcParams['axes.axisbelow'] = True\nmatplotlib.rcParams['xtick.bottom'] = False\nmatplotlib.rcParams['ytick.left'] = False\nmatplotlib.rcParams['grid.color'] = 'grey'\nmatplotlib.rcParams['grid.alpha'] = 0.5\n","8b29d1ce":"def data_processing(df):\n    df = (\n        pd.get_dummies(df, columns=['tier']).drop(columns=['Unnamed: 0', ])\n        .assign(\n             gender = lambda x: np.where(x['gender'] == 1, 1, 0),\n             tier_1_gender = lambda x: np.where(\n                (x.tier_1 == 1) & (x.gender == 1),\n                1,\n                0\n            )\n        )\n    )\n    \n    return df","ccde2d97":"dirname = '\/kaggle\/input\/trell-social-media-usage-data\/'\ntest = pd.read_csv(os.path.join(dirname,'test_age_dataset.csv'))\ntrain = pd.read_csv(os.path.join(dirname,'train_age_dataset.csv'))\n\ntest = data_processing(test)\ntrain = data_processing(train)","f60d6f41":"train.info()","01a1d411":"# How are \nax = (\n    train\n    .groupby(['age_group'])\n    .agg(user_count = ('userId','count'))\n    .assign(\n        percentage = lambda x: x['user_count'] \/train.userId.count()\n    )\n    .pipe(df_snapshot)\n    [['percentage']].T\n    .plot(\n        kind = 'barh',\n        stacked=True\n    )\n)\n","58251f9d":"numeric_feature_cols = [x for x in train.columns if x not in ['gender', 'tier', 'userId' ,'age_group', 'Unnamed: 0']]\ncat_feature_cols = ['gender', 'tier_1', 'tier_2', 'tier_3', 'tier_1_gender']\ntarget_col = ['age_group']\n","ce65fffe":"import scipy.stats \n\ncorrs = []\nfor col in numeric_feature_cols:\n    corr = scipy.stats.spearmanr(train['age_group'], train[col])\n    corrs.append({\n        'feature': col,\n        'correlation': corr[0],\n        'correlation_p_value': corr[1]\n    })\n    \npd.DataFrame(corrs).sort_values('correlation')","58cfb045":"train.groupby('age_group')[['creations', 'avgt2', 'number_of_words_per_action']].agg(['mean', 'median'])","d35f42de":"strong_correlations = ['creations', 'avgt2', 'number_of_words_per_action', 'tier_1_gender']","a63fde3a":"X=train[strong_correlations]\nY=train[target_col]\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,random_state=42)\n\nrf_model=RandomForestClassifier(n_estimators=20, max_depth=15, random_state=42)\nrf_model.fit(X_train, np.ravel(Y_train))\n\n\nprint('Random Forest:')\nprint('Traning Model accruracy: {:.2%}'.format(rf_model.score(X_train,Y_train)))\nprint('Test Model accruracy: {:.2%}'.format(rf_model.score(X_test,Y_test[target_col[0]])))","a166f1ad":"Y_predict = rf_model.predict(X_test)\nprediction_comparison = (\n    pd.DataFrame({\n        'prediction': Y_predict, 'age_group': Y_test['age_group']\n    })\n    .assign(correct = lambda x: np.where(x['prediction']==x['age_group'], 1, 0))\n)","9a4576e4":"ax = (\n    prediction_comparison\n    .groupby(['age_group', 'prediction'])\n    .agg(total_predictions = ('correct','count'))\n    .join(prediction_comparison.groupby(['age_group']).agg(total=('correct','count')))\n    .assign(\n        percentage_in_age_group = lambda x: x['total_predictions'] \/x['total']\n    )\n    .reset_index()\n    .pivot(\n        index='age_group',\n        columns = 'prediction',\n        values = 'percentage_in_age_group'\n    )\n    .pipe(df_snapshot)\n    .plot(\n        kind='barh',\n        stacked=True\n    )\n)\n","5a79a49d":"test['prediction'] = rf_model.predict(test[strong_correlations])","c3bd4ae3":"test[['userId', 'prediction']].to_csv('submission.csv')","eb2711de":"Creations appears to have a strong correlation with the age group also number of words per action.","cf37a8f4":"# To set a base line lets just look at random forest based on the 'stronger correlated' features.","b50ec596":"# Preparing a submission","061ca59e":"It seems that age group 3 is where the predictions are going wrong the most, lets dig into features that better predict group 3.","9dcbf4be":"# What columns have strong correlations with age_group?"}}