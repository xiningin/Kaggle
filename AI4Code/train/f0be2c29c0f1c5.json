{"cell_type":{"35acb9b5":"code","cc91038e":"code","52e35be0":"code","ca82e24d":"code","9dad9c9c":"code","f2520993":"markdown","ccef749f":"markdown","f0511972":"markdown","b73b41de":"markdown"},"source":{"35acb9b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cc91038e":"data = pd.read_csv(\"\/kaggle\/input\/ads-ctr-optimisation\/Ads_CTR_Optimisation.csv\")\ndata.head(5)","52e35be0":"# just choose random variable , not learning just sum of our reward value \nimport random\n\ndata.describe()\n# we have 10.000 data\ndataCount = 10000\nnumberofAd = 10\nsum = 0\nselection = []\nfor item in range(0,dataCount):\n    ad = random.randrange(numberofAd)\n    selection.append(ad)\n    val = data.values[item,ad]\n    sum += val\n    \n    \nprint(sum)\nplt.hist(selection)\nplt.show()","ca82e24d":"import math\ndataCount = 10000\nd = 10\nrewards = [0] * d\nclickad = [0] * d\n\ntotal = 0\nselections = []\n\nfor item in range(1,dataCount): ## all data\n    ad = 0 ## current ad\n    max_ucb = 0 # max \n    for i in range(0,d): ## all cell mean ad\n        if(clickad[i] > 0):\n            ortalama = rewards[i] \/ clickad[i] # total rewar value \/ clickable value\n            delta = math.sqrt(3\/2* math.log(item)\/clickad[i])\n            ucb = ortalama + delta\n        else :\n            ucb = 10*dataCount\n        if max_ucb < ucb: \n            max_ucb = ucb\n            ad = i \n            \n            \n    selections.append(ad)\n    clickad[ad] = clickad[ad]+ 1\n    reward = data.values[item,ad]\n    rewards[ad] = rewards[ad] + reward ## ad if 1 plus otherhande 0 \n    total += reward\n\n\nprint(total)\n\nplt.hist(selections)\nplt.show()","9dad9c9c":"import random\n\ntotalCount = 0 \nselections = []\nones = [0] * d \nzeros = [0] * d \n\n\nfor n in range(1,dataCount):\n    ad = 0 \n    max_th = 0 \n    for i in range(0,d):\n        betavalue = random.betavariate(ones[i] + 1 , zeros[i] + 1)\n        if betavalue > max_th:\n            max_th = betavalue\n            ad = i \n    selections.append(ad)\n    reward = data.values[n,ad]\n    # take reward highest betaValue in cell\n    if reward == 1:\n        ones[ad] += 1\n    else :\n        zeros[ad] += 1\n    totalCount += reward\n        \nprint(totalCount)\nplt.hist(selections)\n","f2520993":"# *Random Sampling*","ccef749f":"# Upper Confidience Bound  ","f0511972":"# **Thompson Sampling**","b73b41de":"Upper conf. bound : Just getting all input and disturbite them , after learning change their position in distibution.Algorithms hold all click data from this ex\nHighest value is our selection "}}