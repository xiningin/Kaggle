{"cell_type":{"e70415b4":"code","ffc0ca74":"code","6105c9e1":"code","a0c0924e":"code","a317d6fb":"code","0bc12e07":"code","38c4471a":"code","60e3b1d3":"code","c9b339b7":"code","2d21807b":"code","4bcb82ea":"code","e765bdc6":"code","c7f00454":"code","3ad5cdf7":"code","15d2a51e":"code","07f0cfa1":"code","197c1b5c":"code","67b6f1f3":"code","7a4e5d81":"code","a11737a4":"code","73176bde":"markdown","c626f48b":"markdown","6a5d52b8":"markdown","c8d2a486":"markdown","351d6f89":"markdown","face9be9":"markdown","53c4a472":"markdown","7fcaec7b":"markdown","8ca43b65":"markdown"},"source":{"e70415b4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as mno\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\n\n%matplotlib inline","ffc0ca74":"data = pd.read_csv(\"..\/input\/africa-economic-banking-and-systemic-crisis-data\/african_crises.csv\")\nprint(data.info())\ndata.sample(10)","6105c9e1":"mno.matrix(data, figsize = (20, 6))","a0c0924e":"x = data.iloc[:, 2:12]\ny = data.iloc[:,13]","a317d6fb":"col_names_int = list(x.select_dtypes(int).columns)\nle=LabelEncoder()\ny = pd.DataFrame(le.fit_transform(np.array(y.values.ravel())), columns=[\"BankCrisis\"])\nfor col in col_names_int:\n    x[col] = le.fit_transform(x[col].astype(str))\n    y = pd.DataFrame(le.fit_transform(np.array(y.values.ravel())), columns=[\"RainTomorrow\"])\ndf1= x[col_names_int]","0bc12e07":"col_names = list(x.select_dtypes(float).columns)\nscaler = StandardScaler()\ndf2 = scaler.fit_transform(x.select_dtypes(float))\ndf2 = pd.DataFrame(df2, columns=col_names)","38c4471a":"#join features\nx = pd.concat([df1, df2], axis=1)","60e3b1d3":"resultsagg = pd.DataFrame()","c9b339b7":"results30=[]\nfor i in range(30): \n    kf = KFold(10, shuffle=True, random_state=i)\n    results = []\n    for l_train, l_valid in kf.split(x):\n        x_train, x_valid = x.iloc[l_train], x.iloc[l_valid] \n        y_train, y_valid = y.iloc[l_train], y.iloc[l_valid]\n\n        knn = KNeighborsClassifier(n_neighbors=10)\n        knn.fit(x_train, y_train.values.ravel())\n        y_pred = knn.predict(x_valid)\n        acc = accuracy_score(y_valid.values.ravel(), y_pred)\n        results.append(acc)\n    \n    results30.append(np.mean(results))\n\nresultsagg[\"KNN\"]=results30","2d21807b":"sns.distplot(results30)","4bcb82ea":"results30=[]\nfor i in range(30):\n    kf = KFold(10, shuffle=True, random_state=i)\n    results = []\n    for l_train, l_valid in kf.split(x):\n        x_train, x_valid = x.iloc[l_train], x.iloc[l_valid] \n        y_train, y_valid = y.iloc[l_train], y.iloc[l_valid]\n\n        log = LogisticRegression(random_state=i, solver='liblinear')\n        log.fit(x_train, y_train.values.ravel())\n        y_pred = log.predict(x_valid)\n        acc = accuracy_score(y_valid.values.ravel(), y_pred)\n        results.append(acc)\n    results30.append(np.mean(results))\n\nresultsagg[\"LogisticRegression\"]=results30","e765bdc6":"sns.distplot(resultsagg[\"LogisticRegression\"])","c7f00454":"results30=[]\nfor i in range(30):\n    kf = KFold(10, shuffle=True, random_state=i)\n    results = []\n    for l_train, l_valid in kf.split(x):\n        x_train, x_valid = x.iloc[l_train], x.iloc[l_valid] \n        y_train, y_valid = y.iloc[l_train], y.iloc[l_valid]\n\n        rf = RandomForestClassifier(n_estimators=20, n_jobs=-1, random_state=i)\n        rf.fit(x_train, y_train.values.ravel())\n        y_pred = rf.predict(x_valid)\n        acc = accuracy_score(y_valid.values.ravel(), y_pred)\n        results.append(acc)\n    results30.append(np.mean(results))\n\nresultsagg[\"RandomForest\"]=results30","3ad5cdf7":"sns.distplot(resultsagg[\"RandomForest\"])","15d2a51e":"results30=[]\nfor i in range(30):\n    kf = KFold(10, shuffle=True, random_state=i)\n    results = []\n    for l_train, l_valid in kf.split(x):\n        x_train, x_valid = x.iloc[l_train], x.iloc[l_valid] \n        y_train, y_valid = y.iloc[l_train], y.iloc[l_valid]\n\n        nb = GaussianNB()\n        nb.fit(x_train, y_train.values.ravel())\n        y_pred = nb.predict(x_valid)\n        acc = accuracy_score(y_valid.values.ravel(), y_pred)\n        results.append(acc)\n    results30.append(np.mean(results))\n\nresultsagg[\"NaiveBayes\"]=results30","07f0cfa1":"sns.distplot(resultsagg[\"NaiveBayes\"])","197c1b5c":"print(\"KNN:\",  resultsagg[\"KNN\"].mean())\nprint(\"RandomForest:\",  resultsagg[\"RandomForest\"].mean())\nprint(\"LogisticRegression:\",  resultsagg[\"LogisticRegression\"].mean())\nprint(\"NaiveBayes:\",  resultsagg[\"NaiveBayes\"].mean())","67b6f1f3":"resultsagg","7a4e5d81":"def ranking_model(results_aggregate):\n    ranking = pd.DataFrame(columns=results_aggregate.columns)\n    for i in range(results_aggregate.shape[0]):\n        ranking.loc[i, resultsagg.iloc[i].rank(ascending=False).index]=resultsagg.iloc[i].rank(ascending=False)\n    return ranking","a11737a4":"ranking_model(resultsagg)","73176bde":"**Transform Scale**","c626f48b":"**Results and Friedman Test**","6a5d52b8":"**PRE-PROCESSING DATA **","c8d2a486":"**Random Forest**","351d6f89":"**KNN**","face9be9":"**TRAINING **","53c4a472":"**Transform Feature Cat**","7fcaec7b":"**Naive Bayes**","8ca43b65":"**Logistic Regression**"}}