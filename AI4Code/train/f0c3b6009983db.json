{"cell_type":{"b2941d4b":"code","9ee99d61":"code","1505434a":"code","840b81dc":"code","e9db8fdc":"code","01540e0b":"code","55f1a450":"code","7bb88df0":"code","050634ad":"code","b3d48051":"code","6f11f34f":"code","a0c9dc9e":"code","8e435df8":"code","786a948d":"code","9ede7f1b":"code","18590bf2":"code","356ec86e":"code","7baade76":"code","b8b6128c":"code","4d2edd76":"code","290f74ac":"code","cb490b84":"code","8fbef53d":"code","33bf1202":"code","d1e90384":"markdown","5e142efe":"markdown","fcbcf698":"markdown","22406339":"markdown","7ec162f8":"markdown","9fdad2ad":"markdown","305da697":"markdown","7db89765":"markdown","406cab4e":"markdown","8e2b1b51":"markdown","06cf3f59":"markdown","a4b43ce9":"markdown","c7e6a365":"markdown","167d482c":"markdown","8ebb5da2":"markdown","d4d7718a":"markdown","2a060eb8":"markdown","e7eaabb2":"markdown","1ec48cbb":"markdown","f3efb5fa":"markdown","4624aacf":"markdown","93270910":"markdown"},"source":{"b2941d4b":"import numpy as np\nimport pandas as pd\nimport pickle\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport json\nimport re \nimport time\nfrom pandas.io.json import json_normalize","9ee99d61":"chall_game = pd.read_csv('..\/input\/tft-match-data\/TFT_Challenger_MatchData.csv')\ngr_game = pd.read_csv('..\/input\/tft-match-data\/TFT_GrandMaster_MatchData.csv')\nmaster_game = pd.read_csv('..\/input\/tft-match-data\/TFT_Master_MatchData.csv')\nchamp = pd.read_csv('..\/input\/league-of-legends-tftteamfight-tacticschampion\/TFT_Champion_CurrentVersion.csv')","1505434a":"chall_game.head()","840b81dc":"gr_game.head()","e9db8fdc":"master_game.head()","01540e0b":"# Challenger\ndata_cons = chall_game.groupby('gameId')['Ranked'].count().tolist()\nerr_game = []\n\nfor i in range(len(data_cons)):\n    if data_cons[i] != 8:\n        print(chall_game.groupby('gameId')['Ranked'].count().keys()[i])\n        err_game.append(chall_game.groupby('gameId')['Ranked'].count().keys()[i])","55f1a450":"# GrandMaster\ndata_cons = gr_game.groupby('gameId')['Ranked'].count().tolist()\nerr_game2 = []\n\nfor i in range(len(data_cons)):\n    if data_cons[i] != 8:\n        print(gr_game.groupby('gameId')['Ranked'].count().keys()[i])\n        err_game2.append(gr_game.groupby('gameId')['Ranked'].count().keys()[i])","7bb88df0":"# Master\ndata_cons = master_game.groupby('gameId')['Ranked'].count().tolist()\nerr_game3 = []\n\nfor i in range(len(data_cons)):\n    if data_cons[i] != 8:\n        print(master_game.groupby('gameId')['Ranked'].count().keys()[i])\n        err_game3.append(master_game.groupby('gameId')['Ranked'].count().keys()[i])","050634ad":"# Delete data that does not match the consistency\n\nchall_game = chall_game[chall_game['gameId'] != err_game[0]]\nmaster_game = master_game[master_game['gameId'] != err_game3[0]]\n","b3d48051":"# Class\n\ntype_df = pd.DataFrame()\ntype_df['type'] = champ['origin'].unique().tolist()\n\ntype_df['1st'] = [2,3,2,3,3,3,3,2,3,2]\ntype_df['2nd'] = [4,6,4,6,np.nan,6,6,np.nan,np.nan,4]\ntype_df['3rd'] = [np.nan,np.nan,6,9,np.nan,np.nan,9,np.nan,np.nan,6]\n\n\n#-----------------\n#Suited Match Game data combination names\ntype_df['type'].iloc[4] = 'MechPilot'\ntype_df['type'].iloc[0] = 'SpacePirate'\ntype_df['type'].iloc[8] = 'Set3_Void'\ntype_df['type'].iloc[2] = 'Set3_Celestial'\ntype_df['type'].iloc[1] = 'StarGuardian'\ntype_df['type'].iloc[3] = 'DarkStar'\n\n\n\n# Job\n\nwork = []\nfor i in champ['class'].tolist():\n    work0 = i.split(',')\n    for j in work0:\n        work.append(''.join(re.findall('[a-zA-Z]',j)))\n        \nwork_df = pd.DataFrame()\n\n#------------\n#for unique job name\nwork_df['work'] = list(set(work))[:7] + list(set(work))[8:]\n\nwork_df['1st'] = [2,2,3,2,2,1,2,2,2,1,2,2,2]\nwork_df['2nd'] = [4,4,6,4,4,np.nan,np.nan,np.nan,4,np.nan,4,np.nan,4]\nwork_df['3rd'] = [np.nan,6,9,6,np.nan,np.nan,np.nan,np.nan,6,np.nan,np.nan,np.nan,np.nan]\nwork_df['4th'] = [np.nan,8,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan]\n\nwork_df['work'].iloc[1] = 'Set3_Sorcerer'\nwork_df['work'].iloc[2] = 'Set3_Blademaster'\nwork_df['work'].iloc[4] = 'Set3_Mystic'\nwork_df['work'].iloc[10] = 'Set3_Brawler'","6f11f34f":"work_df","a0c9dc9e":"type_df","8e435df8":"print('challenger game Duration : ', chall_game['gameDuration'].mean())\nprint('grandmaster game Duration : ', gr_game['gameDuration'].mean())\nprint('master game Duration : ', master_game['gameDuration'].mean())","786a948d":"# function\n\ndef combination_distribution(df, rank, rank_range = False):\n    \n    if rank_range == False:\n        df = df[df['Ranked']==rank]\n    elif rank_range == True:\n        \n        df2 = pd.DataFrame()\n        \n        for i in range(rank[0],rank[1]+1):\n            df2 = df2.append(df[df['Ranked']==i])\n            \n        df = df2\n    \n    forth_combi2 = []\n    third_combi, third_combi2 = [],[]\n    second_combi, second_combi2 = [],[]\n    first_combi, first_combi2 = [],[]\n    non_combi, non_combi2 = [], []\n    temp_ls = []\n\n    # \uc804\uccb4\ub4f1\uc218\uc5d0 \ub300\ud574\uc11c\n    for i in range(len(df)):\n        char = df['combination'].iloc[i]\n        char2 = char.replace(\"'\",\"\\\"\")\n        key_ls = list(json.loads(char2).keys())\n        value_ls = list(json.loads(char2).values())\n        if i != 0  and i % 1000 ==0:\n            print(i)\n\n        for j in range(len(key_ls)):\n\n            if key_ls[j] in type_df['type'].tolist():\n                #\ub9c8\uc9c0\ub9c9 \uc2dc\ub108\uc9c0\ub97c \ub0b4\uace0 \uc788\ub294 \uacc4\uc5f4\n                if type_df[type_df['type']==key_ls[j]]['3rd'].iloc[0] == np.nan:\n                    pass #3rd\uac00 null\uac12\uc774\uba74 2nd\ub098 1st\uc5d0\uc11c \ub9c8\uc9c0\ub9c9 \uc2dc\ub108\uc9c0\uc774\ubbc0\ub85c \ud328\uc2a4\n                else:\n                    if value_ls[j] >= type_df[type_df['type']==key_ls[j]]['3rd'].iloc[0]:\n                        third_combi.append(key_ls[j])#3rd \uc2dc\ub108\uc9c0\ub97c \ub0b4\uace0 \uc788\ub294 \uac83\n                        continue\n                    else:\n                        pass\n\n                if type_df[type_df['type']==key_ls[j]]['2nd'].iloc[0] == np.nan:\n                    pass\n                else:\n                    if value_ls[j] >= type_df[type_df['type']==key_ls[j]]['2nd'].iloc[0]:\n                        second_combi.append(key_ls[j])\n                        continue\n                    else:\n                        pass\n\n                if value_ls[j] >= type_df[type_df['type']==key_ls[j]]['1st'].iloc[0]:\n                    first_combi.append(key_ls[j])\n\n                else:\n                    non_combi.append(key_ls[j])\n\n\n            elif key_ls[j] in work_df['work'].tolist():\n\n\n                if work_df[work_df['work']==key_ls[j]]['4th'].iloc[0] == np.nan:\n                    pass #3rd\uac00 null\uac12\uc774\uba74 2nd\ub098 1st\uc5d0\uc11c \ub9c8\uc9c0\ub9c9 \uc2dc\ub108\uc9c0\uc774\ubbc0\ub85c \ud328\uc2a4\n\n                else:\n                    if value_ls[j] >= work_df[work_df['work']==key_ls[j]]['4th'].iloc[0]:\n                        forth_combi2.append(key_ls[j]) #4th \uc2dc\ub108\uc9c0\ub97c \ub0b4\uace0 \uc788\ub294 \uac83\n                        continue\n                    else:\n                        pass\n\n                if work_df[work_df['work']==key_ls[j]]['3rd'].iloc[0] == np.nan:\n                    pass\n                else:\n                    if value_ls[j] >= work_df[work_df['work']==key_ls[j]]['3rd'].iloc[0]:\n                        third_combi2.append(key_ls[j])\n                        continue\n                    else:\n                        pass\n\n                if work_df[work_df['work']==key_ls[j]]['2nd'].iloc[0] == np.nan:\n                    pass\n                else:\n                    if value_ls[j] >= work_df[work_df['work']==key_ls[j]]['2nd'].iloc[0]:\n                        second_combi2.append(key_ls[j])\n                        continue\n                    else:\n                        pass\n\n                if value_ls[j] >= work_df[work_df['work']==key_ls[j]]['1st'].iloc[0]:\n                    first_combi2.append(key_ls[j])\n\n                else:\n                    non_combi2.append(key_ls[j])\n\n\n            else:\n                temp_ls.append(i)\n                \n    return non_combi, non_combi2, first_combi, first_combi2, second_combi, second_combi2\\\n            ,third_combi, third_combi2, forth_combi2, temp_ls","9ede7f1b":"# challenger first place distribution\n\nnon_combi, non_combi2, first_combi, first_combi2, second_combi, second_combi2,third_combi, third_combi2, forth_combi2, temp_ls = combination_distribution(chall_game,1)","18590bf2":"# grand master first place distribution\ngr_non_combi, gr_non_combi2, gr_first_combi, gr_first_combi2, gr_second_combi, gr_second_combi2,gr_third_combi, gr_third_combi2, gr_forth_combi2, gr_temp_ls = combination_distribution(gr_game,1)","356ec86e":"# master first place distribution\nmas_non_combi, mas_non_combi2, mas_first_combi, mas_first_combi2,mas_second_combi, mas_second_combi2,mas_third_combi, mas_third_combi2, mas_forth_combi2, mas_temp_ls = combination_distribution(master_game,1)","7baade76":"def class_distribution_plot(first_combination_list, second_combination_list, third_combination_list):\n\n    fig,axes = plt.subplots(3,1,figsize = (12,36))\n    \n    plot_key0 = pd.Series(first_combination_list).value_counts().keys().tolist()\n    plot_value0 = pd.Series(first_combination_list).value_counts().values.tolist()\n    \n    plot_key1 = pd.Series(second_combination_list).value_counts().keys().tolist()\n    plot_value1 = pd.Series(second_combination_list).value_counts().values.tolist()\n    \n    plot_key2 = pd.Series(third_combination_list).value_counts().keys().tolist()\n    plot_value2 = pd.Series(third_combination_list).value_counts().values.tolist()\n    \n\n    for ls,ax in zip([[plot_key0,plot_value0],[plot_key1,plot_value1],[plot_key2,plot_value2]],axes):\n        \n        ax.barh(ls[0],ls[1])\n\n        #ax.set_title('{} \uc774\uc6c3'.format(n_neighbors))\n        ax.set_xlabel('Value')\n        ax.set_ylabel('Synergy')\n        \ndef job_distribution_plot(first_combination_list, second_combination_list, third_combination_list,forth_combination):\n\n    fig,axes = plt.subplots(4,1,figsize = (12,48))\n    \n    plot_key0 = pd.Series(first_combination_list).value_counts().keys().tolist()\n    plot_value0 = pd.Series(first_combination_list).value_counts().values.tolist()\n    \n    plot_key1 = pd.Series(second_combination_list).value_counts().keys().tolist()\n    plot_value1 = pd.Series(second_combination_list).value_counts().values.tolist()\n    \n    plot_key2 = pd.Series(third_combination_list).value_counts().keys().tolist()\n    plot_value2 = pd.Series(third_combination_list).value_counts().values.tolist()\n    \n    plot_key3 = pd.Series(forth_combination).value_counts().keys().tolist()\n    plot_value3 = pd.Series(forth_combination).value_counts().values.tolist()\n    \n\n    for ls,ax in zip([[plot_key0,plot_value0],[plot_key1,plot_value1],[plot_key2,plot_value2],[plot_key3,plot_value3]],axes):\n        \n        ax.barh(ls[0],ls[1])\n\n        #ax.set_title('{} \uc774\uc6c3'.format(n_neighbors))\n        ax.set_xlabel('Value')\n        ax.set_ylabel('Synergy')\n    ","b8b6128c":"class_distribution_plot(first_combi,second_combi,third_combi)","4d2edd76":"job_distribution_plot(first_combi2,second_combi2,third_combi2,forth_combi2)","290f74ac":"class_distribution_plot(gr_first_combi,gr_second_combi,gr_third_combi)","cb490b84":"job_distribution_plot(gr_first_combi2,gr_second_combi2,gr_third_combi2,gr_forth_combi2)","8fbef53d":"class_distribution_plot(mas_first_combi,mas_second_combi,mas_third_combi)","33bf1202":"job_distribution_plot(mas_first_combi2,mas_second_combi2,mas_third_combi2,mas_forth_combi2)","d1e90384":"# 3. Analytics","5e142efe":"- Challenger Classes Distribution of preferred combinations for each stage of each game\n    - Step 1\n        - best : Chrono \/ Set3_Celestial \/ Valkyrie (Final Combination: Valkyrie)\n        - worst : Cybernetic \/ Set3_Void \/ StarGuardian (Final Combination: Set3_Void)\n            \n    - Step 2\n        - best : Cybernetic \/ Set3_Celestial \/ StarGuardian (Final Combination: Cybernetic, StarGuardian)\n        - worst : SpacePirate \/ Rebel (Final Combination : SpacePirate)\n            \n    - Step 3\n        - best : Set3_Celestial (Final Combination : Set3_Celestial)\n        - worst : Rebel (Final Combination : Rebel)\n            \n*Final Combination : No more champions to combine","fcbcf698":"# 2. Data Consistency check","22406339":"## 3-4. Which champions you prefer for each combination","7ec162f8":"## 3-3. EDA","9fdad2ad":"- null : If there are no more synergies","305da697":"## 3-5. Distribution of upper and lower volumes","7db89765":"## 3-2. Each Ranked combination distribution","406cab4e":"- For each rank similar GameDuration ","8e2b1b51":"- challenger, grandmaster, master game combination distribution\n    - first place distribution\n    - upper, Subvolume distribution","06cf3f59":"- First-class users never go to spaceships with job synergy.\n- Also The infiltrator prefers only the first stage.\n- Mana predators are also not preferred.\n- Preferred occupations Set3_Brawler and sorcerers, and mystics usually prefer only up to Level 1.","a4b43ce9":"### 3-3-2. Grand Master","c7e6a365":"# 1. Data Parsing","167d482c":"- non_combi : non classes Synergy\n- non_combi2 : non Job synergy\n\n- first_combi : Step 1 classes Synergy\n- fitst_combi2 : Step 1 Job Synergy\n\n- second_combi : Step 2 classes Synergy\n- second_combi2 : Step 2 Job Synergy\n\n- third_combi : Step 3 classes Synergy\n- third_combi2 : Step 3 Job Synergy\n\n- forth_combi2 : Step 4 Job Synergy\n\n- temp_ls : TemplateTrait(Skill)\n\n\n**Even if the first thing you need to know is that there are careers and classes that produce final synergy (for example, mercenaries, spaceships, voids, valkyrie, etc.), we will not cover those parts yet and will be covered below.**\n\n**Therefore, a combination of mercenaries, valkyrie, and voids is included in the first-level synergy.**\n\n","8ebb5da2":"- Classes = type\n- Job = work","d4d7718a":"- Very favorite classes group is Set3_Celestial\n- Star Guardians and Cybernetics rarely match the first stage, and prefer the second stage or higher.\n- The rebels are largely unfavorable.","2a060eb8":"### 3-3-1. Challenger","e7eaabb2":"## 2-1. Check ranking data from 1st to 8th place by game for each rank","1ec48cbb":"### 3-3-3. Master","f3efb5fa":"- Challenger Job Distribution of preferred combinations for each stage of each game\n    - Step 1\n        - best : Infiltrator \/ Set3_Mystic \/ Set3_Bladmaster (Final Combination: X)\n        - worst : Mercenary \/ Set3_Brawler \/ Protector (Final Combination: Mercenary)\n            \n    - Step 2\n        - best : Set3_Brawler \/ Set3_Sorcerer (Final Combination: Set3_Brawler)\n        - worst : Demolitionist \/ Set3_Bladmaster (Final Combination : Demolitionist)\n            \n    - Step 3\n        - best : Set3_Sorcerer (Final Combination : X)\n        - worst : Set3_Bladmaster (Final Combination : Set3_Bladmaster)\n    \n    - Step 4\n        - only one : Set3_Sorcerer\n            \n*Final Combination : No more champions to combine","4624aacf":"## 3-0. Make Classes Synergy, Job Synergy","93270910":"## 3-1. Game Duration Check"}}