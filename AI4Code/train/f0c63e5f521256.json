{"cell_type":{"cf64ec29":"code","148afe8d":"code","07b7c04d":"code","6ae75c6d":"code","7e9a8170":"code","d84d3d41":"code","8a7e6f30":"code","451ed53a":"code","ca9b78da":"code","4e0497b1":"code","43c6513c":"code","cdae051f":"code","8c4a5fd2":"code","418c5476":"code","60ccd52b":"code","931fa352":"code","3a47ca71":"code","be11e9af":"code","c3a1d421":"code","75983664":"code","ef534285":"code","c3e10a44":"code","0b6ab7d0":"markdown","9fe8eb8e":"markdown","29edcc07":"markdown","e6a8be58":"markdown","54dce205":"markdown"},"source":{"cf64ec29":"import numpy as np\nimport pandas as pd\n\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntrain.head()\n","148afe8d":"test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest.head()","07b7c04d":"test.shape","6ae75c6d":"\nx, y = train.iloc[:,1:785], train.iloc[:,0]\nprint(x.shape)\nprint(y.shape)","7e9a8170":"x_standard = []\nfor i in range(0,x.shape[0]):\n    x_standard.append(x.iloc[i,:].values.reshape(28,28)\/255)","d84d3d41":"x_standard_array = np.array(x_standard)\n","8a7e6f30":"x_standard_array.shape","451ed53a":"%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\n\n\n","ca9b78da":"plt.imshow(x_standard_array[8])\nplt.show()\nprint(y[8])","4e0497b1":"from keras import layers\nfrom keras import models\nfrom keras.utils import to_categorical","43c6513c":"model = models.Sequential()\nmodel.add(layers.Conv2D(32,(3,3), activation='relu', input_shape=(28,28,1)))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add((layers.Conv2D(64,(3,3), activation = 'relu')))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64,(3,3), activation = 'relu'))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64,activation = 'relu'))\nmodel.add(layers.Dense(10,activation = 'softmax'))","cdae051f":"model.compile(optimizer = 'rmsprop',\n             loss = 'categorical_crossentropy',\n             metrics=['accuracy'])","8c4a5fd2":"train_images = x_standard_array.reshape((42000,28,28,1))\ny_labels = to_categorical(y)","418c5476":"model.fit(train_images, y_labels, epochs = 5)","60ccd52b":"test_images = test.values.reshape(28000,28,28)\/255\ntest_images = np.array(test_images)\ntest_images.reshape((28000,28,28,1))\ntest_images.shape","931fa352":"plt.imshow(test_images[1])\nplt.show()","3a47ca71":"test_images[0].shape","be11e9af":"pred=[]\nfor x in test_images:\n    pred.append(model.predict(x.reshape(1,28,28,1)))\n","c3a1d421":"eval_results = []\nfor i in range(0,len(pred)):\n    eval_results.append(int(np.argmax(pred[i],axis=1)))\n","75983664":"eval_results[0:10]","ef534285":"results = pd.Series(eval_results, name = 'Label')\n\nsubmission = pd.concat([pd.Series(range(1,28001), name = 'ImageId'), results], axis = 1)","c3e10a44":"submission.to_csv('Deep_Learning_Results.csv',index = False)","0b6ab7d0":"**Submission**","9fe8eb8e":"Show some standardized digit's image\n","29edcc07":"Implement Small Convnet Model","e6a8be58":"Convert Into Array","54dce205":"Standardardize The Training Input"}}