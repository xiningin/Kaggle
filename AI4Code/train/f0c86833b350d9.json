{"cell_type":{"47f9f7b1":"code","48ad04d4":"code","5d8b97c0":"code","8c67482d":"code","eb0a704c":"code","95848c23":"code","94228449":"code","9151bb50":"code","1893f8f7":"code","341bc98a":"code","75bc5c4d":"code","3b7fda02":"code","d5b41637":"code","e5f02160":"code","e4894c3a":"code","dc17a598":"code","0f3edb02":"code","d422d137":"code","f8d7f454":"code","9f559122":"code","a93ac8d0":"code","9e3b987e":"code","1d0e7137":"code","23837380":"code","06b2bc8e":"code","bf344646":"code","b4c7bf69":"code","8fc53745":"code","be546071":"code","1acf2530":"code","ebba059d":"code","02087235":"code","1439a1c5":"code","bd5fb041":"code","8656e793":"code","3b788adb":"code","7a352504":"code","a7715926":"code","93966abd":"code","b7f1a6f7":"code","6e4448c1":"code","b72747d8":"code","f2455950":"code","0ba4a063":"code","aed4384c":"code","0975ae79":"code","40f55fb6":"code","32548c86":"code","11180f8f":"code","4b0a01b9":"code","32464f7f":"code","80467460":"code","e5cb15a5":"code","dc0aa571":"code","ff667f44":"code","73b3033b":"code","5ecea896":"code","69ede71a":"markdown","bd121d0b":"markdown"},"source":{"47f9f7b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48ad04d4":"import pandas as pd\nimport numpy as np\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\n%matplotlib inline","5d8b97c0":"data = pd.read_csv('\/kaggle\/input\/noshowappointments\/KaggleV2-May-2016.csv')","8c67482d":"data.describe()","eb0a704c":"data.head()","95848c23":"data['No-show'].value_counts()","94228449":"data.dtypes","9151bb50":"data['ScheduledDay'] = pd.to_datetime(data['ScheduledDay'])\ndata['AppointmentDay'] = pd.to_datetime(data['AppointmentDay'])","1893f8f7":"data.head()","341bc98a":"data.dtypes","75bc5c4d":"(data['ScheduledDay'] > data['AppointmentDay']).sum()","3b7fda02":"# Adding 23h 59min 59s to Appointment Day to make sense of the data\ndata['AppointmentDay'] = data['AppointmentDay'] + pd.Timedelta('1d') - pd.Timedelta('1s')","d5b41637":"data.head()","e5f02160":"(data['ScheduledDay'] > data['AppointmentDay']).sum()","e4894c3a":"# dropping rows that still contain Scheduled Day ahead of Appointment Day\ndata.drop(data[data['ScheduledDay'] > data['AppointmentDay']].index, inplace=True, axis=0)","dc17a598":"(data['ScheduledDay'] > data['AppointmentDay']).sum()","0f3edb02":"#Breaking down years, months, weeks, days, and hours\ndata['ScheduledDay_year'] = data['ScheduledDay'].dt.year\ndata['ScheduledDay_month'] = data['ScheduledDay'].dt.month\ndata['ScheduledDay_week'] = data['ScheduledDay'].dt.isocalendar().week\ndata['ScheduledDay_day'] = data['ScheduledDay'].dt.day\ndata['ScheduledDay_hour'] = data['ScheduledDay'].dt.hour\ndata['ScheduledDay_dayofweek'] = data['ScheduledDay'].dt.day_name()\ndata['AppointmentDay_year'] = data['AppointmentDay'].dt.year\ndata['AppointmentDay_month'] = data['AppointmentDay'].dt.month\ndata['AppointmentDay_week'] = data['AppointmentDay'].dt.isocalendar().week\ndata['AppointmentDay_day'] = data['AppointmentDay'].dt.day\ndata['AppointmentDay_hour'] = data['AppointmentDay'].dt.hour\ndata['AppointmentDay_dayofweek'] = data['AppointmentDay'].dt.day_name()","d422d137":"data[['ScheduledDay_year', 'ScheduledDay_month', 'ScheduledDay_week', 'ScheduledDay_day', 'ScheduledDay_hour', 'ScheduledDay_dayofweek']].head()","f8d7f454":"data[['AppointmentDay_year', 'AppointmentDay_month', 'AppointmentDay_week', 'AppointmentDay_day', 'AppointmentDay_hour', 'AppointmentDay_dayofweek']].head()","9f559122":"data.groupby('AppointmentDay_year').size()","a93ac8d0":"data.groupby('AppointmentDay_month').size()","9e3b987e":"data.groupby('AppointmentDay_hour').size()","1d0e7137":"data.groupby('AppointmentDay_dayofweek').size()","23837380":"def show_probability(a):\n    probab = sum(a)\/len(a)\n    return probab","06b2bc8e":"data['OUTPUT_LABEL'] = (data['No-show'] == 'Yes').astype('int')","bf344646":"data.groupby('AppointmentDay_year').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","b4c7bf69":"data.groupby('AppointmentDay_month').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","8fc53745":"data.groupby('ScheduledDay_month').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","be546071":"data.groupby('AppointmentDay_week').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","1acf2530":"data.groupby('ScheduledDay_week').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","ebba059d":"data.groupby('AppointmentDay_day').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","02087235":"data.groupby('ScheduledDay_day').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","1439a1c5":"data.groupby('ScheduledDay_hour').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","bd5fb041":"data.groupby('AppointmentDay_dayofweek').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","8656e793":"data.groupby('ScheduledDay_dayofweek').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","3b788adb":"data.groupby('Gender').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","7a352504":"data.groupby('Age').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","a7715926":"data.groupby('Neighbourhood').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","93966abd":"data.groupby('Scholarship').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","b7f1a6f7":"data.groupby('Hipertension').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","6e4448c1":"data.groupby('Diabetes').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","b72747d8":"data.groupby('Alcoholism').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","f2455950":"data.groupby('Handcap').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","0ba4a063":"data.groupby('SMS_received').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","aed4384c":"# We observe that SMS received makes a significant difference\n# Let's check if the gap between the appointment and scheduled day makes a difference\ndata['days_gap'] = (data['AppointmentDay'] - data['ScheduledDay']).dt.days\ndata.groupby('SMS_received').apply(lambda p: show_probability(p.OUTPUT_LABEL.values))","0975ae79":"# We see that number of days of gap is another significant factor","40f55fb6":"# Making a list of relevant factors:\ncols = ['ScheduledDay_month', 'ScheduledDay_week', 'Age', 'Scholarship', 'Handcap', 'SMS_received', 'days_gap']","32548c86":"X = data[cols].values\ny = data['OUTPUT_LABEL'].values","11180f8f":"from sklearn.model_selection import train_test_split","4b0a01b9":"# Code to handle class imbalance here","32464f7f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)","80467460":"from sklearn.ensemble import RandomForestClassifier","e5cb15a5":"rf = RandomForestClassifier(max_depth=8, n_estimators=100, random_state=0)","dc0aa571":"rf.fit(X_train, y_train)","ff667f44":"y_pred = rf.predict(X_test)","73b3033b":"from sklearn.metrics import confusion_matrix \nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import classification_report","5ecea896":"print(\"Confusion Matrix : \\n \",confusion_matrix(y_test, y_pred))\nprint(\"\\n Accuracy Score : \\n \",accuracy_score(y_test,y_pred))\nprint(\"\\n Classification Report : \\n\",classification_report(y_test, y_pred))","69ede71a":"# Check which of these factors are predictive","bd121d0b":"# Now we're done with exploratory data analysis and selecting suitable decisive factors.\n# Next, we proceed to fit a suitable model for predictions."}}