{"cell_type":{"9aec10be":"code","4badf9f8":"code","857ced05":"code","852d6847":"code","b016deac":"markdown","5687d54c":"markdown","0ffdd74a":"markdown","bf663a4a":"markdown"},"source":{"9aec10be":"import numpy as np \nimport pandas as pd \nimport os\nimport cv2\n\nos.chdir(\"\/kaggle\/input\/brain-mri-images-for-brain-tumor-detection\")\nyes=os.listdir('.\/brain_tumor_dataset\/yes')\nno=os.listdir('.\/brain_tumor_dataset\/no')\n\nX_data =[]\nfor file in yes:\n    img = cv2.imread('.\/brain_tumor_dataset\/yes\/'+file)\n    face = cv2.resize(img, (224, 224) )\n    (b, g, r)=cv2.split(face) \n    img=cv2.merge([r,g,b])\n    X_data.append(img)\n\nfor file in no:\n    img = cv2.imread('.\/brain_tumor_dataset\/no\/'+file)\n    face = cv2.resize(img, (224, 224) )\n    (b, g, r)=cv2.split(face) \n    img=cv2.merge([r,g,b])\n    X_data.append(img)\n    \n    X = np.squeeze(X_data)\nX.shape\n#show one training sample\nfrom matplotlib import pyplot as plt\nplt.imshow(X[5], interpolation='nearest')\nplt.show()\n\n","4badf9f8":"# normalize data\nX = X.astype('float32')\nX \/= 255\n\ntarget_x=np.full(len(yes),1)\ntarget_y=np.full(len(no),0)\nY=np.concatenate([target_x,target_y])\nY","857ced05":"# Then lets create x_train, y_train, x_test, y_test arrays\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\nnumber_of_train = X_train.shape[0]\nnumber_of_test = X_test.shape[0]\n\nx_train= X_train.reshape(number_of_train,X_train.shape[1]*X_train.shape[2]*3)\nx_test= X_test .reshape(number_of_test,X_test.shape[1]*X_test.shape[2]*3)\n\n","852d6847":"\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom keras.models import Sequential # initialize neural network library\nfrom keras.layers import Dense # build our layers library\ndef build_classifier():\n    classifier = Sequential() # initialize neural network\n    classifier.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu', input_dim = x_train.shape[1]))\n    classifier.add(Dense(units = 4, kernel_initializer = 'uniform', activation = 'relu'))\n    classifier.add(Dense(units = 4, kernel_initializer = 'uniform', activation = 'relu'))\n    classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n    return classifier\nclassifier = KerasClassifier(build_fn = build_classifier, epochs = 100)\naccuracies = cross_val_score(estimator = classifier, X = x_train, y = y_train, cv = 3)\nmean = accuracies.mean()\nvariance = accuracies.std()\nprint(\"Accuracy mean: \"+ str(mean))\nprint(\"Accuracy variance: \"+ str(variance))","b016deac":"The data are split as train and test. ","5687d54c":"# Evaluating the ANN","0ffdd74a":"# Evaluating Brain MRI images for brain tumor the ANN\n\n\nThe following codes based on \"https:\/\/www.kaggle.com\/kanncaa1\/deep-learning-tutorial-for-beginners\" and \"https:\/\/www.kaggle.com\/cevher\/brain-mri-images-for-brain-tumor-detection\"\nThe features (X) and output (Y) are obtained.  One training sample is visualized.","bf663a4a":"The data is normalized so that some features do not dominate others."}}