{"cell_type":{"92032cb5":"code","0e856ac8":"code","e845e45f":"code","ec949c00":"code","14855752":"code","ebc27ece":"code","d5e180c7":"code","6cafae19":"code","82cb56b5":"code","4582ab15":"code","005aca53":"code","00f90637":"code","eaea30bf":"code","3d6e92c5":"code","db997ec7":"code","eb3869f0":"code","8457437d":"code","d349dda9":"code","ab42889d":"code","00b751ec":"code","038a4827":"code","6af02366":"code","ab433a72":"code","8f1dfe51":"code","513d734b":"markdown"},"source":{"92032cb5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e856ac8":"Data=pd.read_csv('..\/input\/digit-recognizer\/train.csv')","e845e45f":"Data.head()","ec949c00":"Y=np.array(Data['label'])\nX=np.array(Data.drop('label',axis=1))\/ 255.","14855752":"X=X.reshape((-1,28,28,1))","ebc27ece":"import matplotlib.pyplot as plt\nplt.imshow(X[25].reshape(28,28))\nprint(Y[25])","d5e180c7":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2)","6cafae19":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Flatten,BatchNormalization,Dropout,Conv2D,MaxPool2D","82cb56b5":"print(tf.config.list_physical_devices('GPU'),'\/\/',tf.test.is_built_with_cuda())","4582ab15":"datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n    rotation_range=12,\n    width_shift_range=0.12,\n    height_shift_range=0.12,\n    shear_range=0.12,\n    validation_split=0.2\n)","005aca53":"training_generator = datagen.flow(X_train, y_train, batch_size=32,subset='training')\nvalidation_generator = datagen.flow(X_train, y_train, batch_size=32,subset='validation')","00f90637":"plt.figure(figsize=(10,5))\nfor i in range(6):\n    plt.subplot(2,3,i+1)\n    for x,y in training_generator:\n        plt.imshow((x[0]\/255).reshape(28,28),cmap='gray')\n        plt.title('y={}'.format(y[0]))\n        plt.axis('off')\n        break\nplt.tight_layout()\nplt.show()","eaea30bf":"model=Sequential()","3d6e92c5":"model.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same',activation ='relu', input_shape = (28,28,1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.3))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.3))\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","db997ec7":"model.compile(\n    loss=\"sparse_categorical_crossentropy\",\n    optimizer=tf.keras.optimizers.RMSprop(lr=0.003, rho=0.9, epsilon=1e-08, decay=0.0),\n    metrics=[\"accuracy\"]\n)","eb3869f0":"cb=tf.keras.callbacks.EarlyStopping(patience=10,restore_best_weights=True)\nlearning_rate_reduction = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","8457437d":"model.fit(training_generator,epochs=100,callbacks=[cb,learning_rate_reduction],validation_data=validation_generator)","d349dda9":"his=model.history.history","ab42889d":"plt.plot(his['accuracy'])\nplt.plot(his['val_accuracy'])","00b751ec":"plt.plot(his['loss'])\nplt.plot(his['val_loss'])","038a4827":"model.evaluate( X_test, y_test)","6af02366":"pred_Data=np.array(pd.read_csv('..\/input\/digit-recognizer\/test.csv')\/ 255.)\nX_pred=pred_Data.reshape((-1,28,28,1))","ab433a72":"predictions=model.predict_classes(X_pred)","8f1dfe51":"submit=pd.DataFrame({'ImageId':range(1,len(predictions)+1),'Label':predictions})\nsubmit.to_csv('submission.csv',index=False)","513d734b":"**PREDICTIONS**"}}