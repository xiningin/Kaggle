{"cell_type":{"d067bb7a":"code","1f532bb1":"code","ac3422f7":"code","c1a75868":"code","f4629d62":"code","8227fc89":"code","fbe299c2":"code","c0c41995":"code","efa3e9a8":"code","238d9ec8":"code","681261bd":"code","1dd8db27":"code","ab5ecae6":"code","d7219134":"code","3181f8b1":"code","7a327944":"code","d9e943c5":"code","d9852663":"code","51ba1cf9":"code","96b1157c":"code","fb353e73":"code","d6b7f25e":"code","4338f8d3":"code","aa0f4058":"code","65780077":"code","b5339b88":"markdown","bd890fb3":"markdown","e1f6c962":"markdown","705c4f0a":"markdown","d117c28c":"markdown","8ca75333":"markdown","2b7cf46b":"markdown","52dc55d6":"markdown","e7db97a7":"markdown","ad14a1a5":"markdown","84d7b3b1":"markdown","f5048d42":"markdown","881092af":"markdown","aa5bcb46":"markdown","5464c8a8":"markdown"},"source":{"d067bb7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1f532bb1":"!wget https:\/\/pjreddie.com\/media\/files\/yolov3-tiny.weights","ac3422f7":"!git clone https:\/\/github.com\/larsien\/keras-yolo3","c1a75868":"!ls keras-yolo3","f4629d62":"import os \nos.chdir('keras-yolo3')\n!ls ","8227fc89":"!python convert.py yolov3-tiny.cfg ..\/yolov3-tiny.weights model_data\/yolo_tiny.h5","fbe299c2":"!unzip \/kaggle\/input\/2019-3rd-ml-month-with-kakr\/train.zip -d \/kaggle\/working\/data\/train\/","c0c41995":"!ls ..\/input","efa3e9a8":"#\ud604\uc7ac \uc704\uce58\ub294 .\/kaggle\/working\nfrom PIL import Image\n\ndef get_resized_img(file, file_name='test.jpg', \n                    save_path='.\/', \n                    image_size=(320,320)):\n    Image.open(file).resize(image_size).save(save_path+file_name)\n    return Image.open(save_path+file_name)\n\ntest_img = get_resized_img('\/kaggle\/working\/data\/train\/train_00036.jpg')\ntest_img","238d9ec8":"os.chdir('.\/keras-yolo3')","681261bd":"!ls ..\/","1dd8db27":"#\uc5d0\ub7ec \ub09c\ub2e4\uba74 tensorflow \ubc84\uc804 \ud655\uc778 \ud544\uc694\nfrom yolo import YOLO\ndef objectDetection(path, model_path, class_path):\n    yolo = YOLO(model_path = model_path, classes_path = class_path, anchors_path = 'model_data\/tiny_yolo_anchors.txt')\n    result_image, label = yolo.detect_image(Image.open(path))\n    display(result_image)\n    return result_image\n    \n# os.chdir('.\/keras-yolo3')\ntest_result = objectDetection('..\/test.jpg', 'model_data\/yolo_tiny.h5','model_data\/coco_classes.txt')\ntest_result","ab5ecae6":"# \ud658\uacbd\ub9c8\ub2e4 \uc0ad\uc81c\ud574\uc57c \ud560 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc870\uae08 \uc529 \ub2e4\ub984. \uc5d0\ub7ec\ub098\ub294 \uac83\ub4e4 \uc9c0\uc6b0\uace0 \ud150\uc11c\ud50c\ub85c\uc6b0 \uc124\uce58 \n!pip uninstall tensorflow tensorflow-estimator tensorflow-probability keras fancyimpute catalyst --yes\n!pip uninstall tensorflow-gpu tensorflow-tensorboard --yes \n\n!pip install tensorflow-gpu==1.13.1\n!pip install keras==2.1.5\n","d7219134":"import warnings\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport PIL\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import Xception\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nfrom tensorflow.keras import layers, models, optimizers\nfrom tensorflow.keras.utils import multi_gpu_model\nimport keras \nimport warnings \nimport tensorflow as tf\nwarnings.filterwarnings('ignore')\n\nprint(K.image_data_format()) # \uc774\ubbf8\uc9c0 \ub370\uc774\ud130 \ud3ec\ub9f7 \ubc29\uc2dd \ud655\uc778. first, last 2\uac00\uc9c0. \uc774\ubbf8\uc9c0\ub97c \ucc98\uc74c\ubd80\ud130 \uc77d\uc744\uc9c0 \ub9c8\uc9c0\ub9c9\ubd80\ud130 \uc77d\uc744\uc9c0 \nprint(keras.__version__)\nprint(tf.__version__)","3181f8b1":"import gc\nimport os\nimport glob\nimport zipfile\nimport warnings\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nimport cv2\nimport PIL\nfrom PIL import ImageOps, ImageFilter, ImageDraw\nimport pandas as pd\nimport os\n\nDATA_PATH = os.getcwd()+'\/data\/'\nTRAIN_IMG_PATH = os.path.join(DATA_PATH, 'train')\nTEST_IMG_PATH = os.path.join(DATA_PATH, 'test')\n\n# CSV \ud30c\uc77c \uacbd\ub85c\ndf_train = pd.read_csv(os.path.join(DATA_PATH, 'train.csv'))\ndf_test = pd.read_csv(os.path.join(DATA_PATH, 'test.csv'))\ndf_class = pd.read_csv(os.path.join(DATA_PATH, 'class.csv'))\n","7a327944":"df_train.head()\n","d9e943c5":"IMAGE_SIZE = 320\n\ndef crop_resize_boxing_img(img_name, margin=16, size=(288,288)):\n    PATH = ''\n    if 'train_' in img_name:\n        PATH = TRAIN_IMG_PATH\n        data = df_train\n    elif 'test_' in img_name:\n        PATH = TEST_IMG_PATH\n        data = df_test\n    else:\n        print(f'wrong file input {img_name}')\n        return\n    img = PIL.Image.open(os.path.join(PATH, img_name))\n#     print(data['img_file'] )\n    pos = data.loc[data['img_file'] == img_name, ['bbox_x1','bbox_y1','bbox_x2','bbox_y2']].values.reshape(-1)\n#     print(pos[:10])\n    width, height =  img.size\n    x1 = max(0, pos[0] - margin)\n    y1 = max(0, pos[1] - margin)\n    x2 = min(pos[2] + margin, width)\n    y2 = min(pos[3] + margin, height)\n    return img.crop((x1, y1, x2, y2)).resize(size)\n\nTRAIN_CROP_PATH = '.\/data\/cropped_train'\nTEST_CROP_PATH = '.\/data\/cropped_test'\n\nif (os.path.isdir(TRAIN_CROP_PATH) == False):\n    os.mkdir(TRAIN_CROP_PATH)\n    for i, row in df_train.iterrows():\n        cropped = crop_resize_boxing_img(row['img_file'])\n        cropped.save(f\"{TRAIN_CROP_PATH}\/{row['img_file']}\")\n\nif (os.path.isdir(TEST_CROP_PATH) == False):\n    os.mkdir(TEST_CROP_PATH)\n    for i, row in df_test.iterrows():\n        cropped = crop_resize_boxing_img(row['img_file'])\n        cropped.save(f\"{TEST_CROP_PATH}\/{row['img_file']}\")\n\n\n\n","d9852663":"display(PIL.Image.open(os.path.join(TRAIN_IMG_PATH, df_train.loc[0,'img_file'])))\ndisplay(PIL.Image.open(os.path.join(TRAIN_CROP_PATH,df_train.loc[0, 'img_file'])))","51ba1cf9":"df_train.to_csv('sample.txt', index=False, header=None, sep=',')\n\nwith open('sample.txt', 'r') as f, open('.\/keras-yolo3\/train.txt', 'w') as w:\n    # train_00001.jpg,1,80,641,461,108\n    lines = f.readlines()\n    for line in lines:\n        w.write(f\"{line.split(',')[0].replace('train_',home+'\/data\/cropped_train\/train_')} 0,0,320,320,{int(line.split(',')[-1]) -1}\\n\")\n","96b1157c":"class_df = pd.read_csv('.\/data\/class.csv')\nclass_df = class_df.loc[:, 'name']\nclass_df.to_frame().to_csv('.\/keras-yolo3\/class.txt',index=None, header=False)","fb353e73":"def is_history_exist(log_dir):\n    history_files = []\n    for file in os.listdir(log_dir):\n        if '.h5' in file:\n            history_files.append(file)\n    \n    if len(history_files) == 0:\n        return False\n    else : \n        return True\n    \ndef get_minimum_loss_weight(log_dir):\n    history_files = []\n    for file in os.listdir(log_dir):\n        if '.h5' in file:\n            history_files.append(file)\n    minimum_loss = float(9999999)\n    minimum_loss_file = ''\n    for file in history_files:\n        loss = float(file.split('-')[1].replace('loss',''))\n        if loss < minimum_loss:\n            minimum_loss = loss\n            minimum_loss_file = file\n    print(f'Minimum loss file : {minimum_loss_file}, minimum loss : {minimum_loss}, ')\n    epoch = int(minimum_loss_file.split('-')[0].replace('ep', ''))\n    return os.path.join(log_dir,minimum_loss_file), epoch\n\nlog_dir = 'logs\/000'\nprint(is_history_exist('.\/test'))\nprint(get_minimum_loss_weight(log_dir))","d6b7f25e":"#\ud604\uc7ac \uc704\uce58\ub294 keras-yolo \n!python .\/train.py","4338f8d3":"# print(os.getcwd())\nimport os\n# os.chdir('.\/keras-yolo3')\nfrom PIL import Image\nfrom yolo import  YOLO \nimg, i2 = objectDetection('..\/data\/cropped_test\/test_00002.jpg', 'logs\/000\/ep100-loss8.058-val_loss8.383.h5', 'model_data\/voc_classes.txt')\n","aa0f4058":"def objects_detection(path, model_path, class_path):\n    yolo = YOLO(model_path = model_path, classes_path = class_path, anchors_path = 'model_data\/tiny_yolo_anchors.txt')\n    result_image, score = yolo.detect_image(Image.open(path))\n    print(score)\n    display(result_image)","65780077":"submission_df = df_test.loc[:,'img_file'].to_frame()\nfor i, img_path in enumerate(submission_df.loc[:,'img_file']):\n    objectDetection(os.path.join(TEST_CROP_PATH, img_path), 'model_data\/yolo_tiny.h5', 'class.txt')\n\nsubmission_df['class'] = pred\nsubmission_df.to_csv('suvmission.csv', index = False)\nsubmission_df.head()","b5339b88":"Trouble shooting\n1. cause : AttributeError: module 'keras.backend' has no attribute 'control_flow_ops'\n* solve : hange K.control_flow_ops.while_loop to tf.while_loop\n* https:\/\/github.com\/qqwweee\/keras-yolo3\/issues\/544#issuecomment-526825314\n2. Failed to get convolution algorithm. This is probably because cuDNN failed to initialize, so try looking to see if a warning log message was printed above.\n* solve : \nimport keras\nimport tensorflow as tf\n\nconfig = tf.ConfigProto()\nconfig.gpu_options.per_process_gpu_memory_fraction = 0.9\nkeras.backend.tensorflow_backend.set_session(tf.Session(config=config))\n\nand \n\nchanged gpu counts from 2 to 1 \n\n* https:\/\/github.com\/tensorflow\/tensorflow\/issues\/24828#issuecomment-609426655\n\n3. AssertionError: class id must be less than num_classes\ntrain.txt \uc5d0 \ub4e4\uc5b4\uac08 label \uac12\uc774 0 \ubd80\ud130 \uc2dc\uc791\ud574 \ucd1d \uac2f\uc218\uac00 class.txt \uac2f\uc218\uc640 \ub9de\uc544\uc57c \ud568. \uce90\uae003rd\ub370\uc774\ud130\uc14b \uacbd\uc6b0 label\uc774 1\ubd80\ud130 \uc2dc\uc791\ud588\uc74c. ","bd890fb3":"## 2.6 train.py \ud6c8\ub828 \n* \ud6c8\ub828 \uc2dc home \ub514\ub809\ud1a0\ub9ac \ubcc0\uacbd \ud6c4 \ud574\uc57c \ud568. \n\n","e1f6c962":"## 2.3 \ud6c8\ub828 \ud30c\uc77c \ubaa9\ub85d train.txt \uc0dd\uc131 \n\n* \ud615\uc2dd : \ud30c\uc77c \uacbd\ub85c x1,y1,x2,y2,class x1,y1,x2,y2,class\n\n* ex) \/KaggleKorea3rd_2\/data\/train_00001.jpg 1,80,641,461,108 \n\n* yolo\ub294 label\uc774 0 \ubd80\ud130 \uc2dc\uc791 \ud574\uc57c \ud568. \uce90\uae00 \ud6c8\ub828 \uc14b\uc758 label\uc774 1\ubd80\ud130 \uc2dc\uc791\ud558\uae30 \ub54c\ubb38\uc5d0 \uc870\uc815\ud574\uc57c \ud568. \n","705c4f0a":"# 0. \uc54c\uc544 \ub458 \uc0ac\ud56d\ub4e4 \n * tensorflow 2.x \ubc84\uc804\uc5d0\uc11c \uc548\ub3cc\uc544\uac00\uc694. tensorflow-gpu==1.13.1 . keras-2.1.5\n * keras-yolo3 \ud3f4\ub354\uac00 \ud648\uc544\ub798\uc5d0 \uc788\uc5b4\uc11c object detection \uc218\ud589\ud560 \ub54c \uadc0\ucc2e\uc9c0\ub9cc \ud648\ub514\ub809\ud1a0\ub9ac\ub97c \ubcc0\uacbd \ud55c \ud6c4 \ud574\uc57c\ud569\ub2c8\ub2e4.\n * \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870 \n\n```\n--\/kaggle\/working\/\n  |-YoloV3.ipynb\n  |-data\/cropped_train\/cropped_train\/\n  |-data\/cropped_train\/cropped_test\/\n  |-keras-yolo3\n    |-train.py\n    |-class.txt (label \ud30c\uc77c)\n    |-train.txt (yolo\uc5d0\uc11c \ud6c8\ub828\ud560 \uc218 \uc788\ub294 \ud3ec\ub9f7\uc73c\ub85c \ub9cc\ub4e0 \ud6c8\ub828\ud30c\uc77c \ubaa9\ub85d\n    |-model_data\n      |-yolo_tiny.h5 (convert.py \ub85c \ube4c\ub4dc\ud574 \ub9cc\ub4e0 weigth \ud30c\uc77c)\n      |-voc_classes.txt(label\ud30c\uc77c\uc758 \uc0ac\ubcf8)\n    |-logs\n      |-000\n        |-checkpoint files .. (checkpoint \ud30c\uc77c \uc800\uc7a5 \uacbd\ub85c)\n```\n# 1. pre-requsite\n- 1.1. tiny yolov3 pretrained weights \ub2e4\uc6b4\ub85c\ub4dc\n- 1.2 kears-yolo3 \ub2e4\uc6b4\ub85c\ub4dc \n- 1.3 convert darknet model to Keras \n- 1.4 \ud14c\uc2a4\ud2b8 \n\n# 2. yolo \uc801\uc6a9 \n- 2.1 \ud658\uacbd \uccb4\ud06c, \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\n- 2.2 yolo\ud6c8\ub828\uc6a9 \uc774\ubbf8\uc9c0 \ub9ac\uc0ac\uc774\uc9d5 \n- 2.3 \ud6c8\ub828 \ud30c\uc77c \ubaa9\ub85d train.txt \uc0dd\uc131 \n- 2.4 \ub77c\ubca8 \ud30c\uc77c \ubaa9\ub85d class.txt \uc0dd\uc131 \n- 2.5 train.py \uc18c\uc2a4 \uc218\uc815\n- 2.6 train.py \ud6c8\ub828 \n                 \n# 1.Pre-requsite\n## 1.1 tiny yolov3 pretrained weights(\ubaa8\ubc14\uc77c\uc6a9 \uacbd\ub7c9\ud654 \ub41c yolo) \ub2e4\uc6b4\ub85c\ub4dc","d117c28c":"### 2.5 train.py \uc18c\uc2a4 \uc218\uc815 \n* train.py\uc758 \ub2e4\uc74c \ubd80\ubd84\uc744 \uc6b0\ub9ac\uac00 \ub9cc\ub4e0 train.txt\uc640 class.txt \ubcc0\uacbd \n\n* before \n```python\nclasses_path = 'model_data\/voc_classes.txt'\nanchors_path = 'model_data\/yolo_anchors.txt' \nmodel = create_tiny_model(input_shape, anchors, num_classes,\n            freeze_body=2, weights_path='model_data\/tiny_yolo_weights.h5')\n```\n* after\n``` python\nclasses_path = 'class.txt'\nanchors_path = 'model_data\/tiny_yolo_anchors.txt'\nmodel = create_tiny_model(input_shape, anchors, num_classes,\n            freeze_body=2, weights_path='model_data\/yolo_tiny.h5')\n```\n","8ca75333":"## 2.7 \ud6c8\ub828\ub41c \ubaa8\ub378 \ud14c\uc2a4\ud2b8 ","2b7cf46b":"# 2. yolo \uc801\uc6a9 \n## 2.1 \ud658\uacbd \uccb4\ud06c, \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","52dc55d6":"## 1.4 \ud14c\uc2a4\ud2b8 \n\n\uc798 \ub3cc\uc544\uac00\ub294\uc9c0 \uc774\ubbf8\uc9c0 \ud55c\uac1c \ud14c\uc2a4\ud2b8 \ud574\ubcf4\uae30. Yolo\ub294 \uc785\ub825 \uc774\ubbf8\uc9c0\ub97c \uc77c\uc815 \ud06c\uae30\uc758 \uadf8\ub9ac\ub4dc\ub85c \ub098\ub220\uc11c \uc624\ube0c\uc81d\ud2b8\ub97c \ud0d0\uc0c9\ud569\ub2c8\ub2e4. \uc5ec\uae30\uc11c \uc785\ub825 \uc774\ubbf8\uc9c0\ub294 32\uc758 \ubc30\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4. yolo.py \ud30c\uc77c\uc5d0\uc11c \ud655\uc778 \uac00\ub2a5.","e7db97a7":"## 2.8 \uacb0\uacfc \uc81c\ucd9c ","ad14a1a5":"## 1.4.1 \uc774\ubbf8\uc9c0 \ub9ac\uc0ac\uc774\uc988","84d7b3b1":"## 2.2 yolo\ud6c8\ub828\uc6a9 \uc774\ubbf8\uc9c0 \ub9ac\uc0ac\uc774\uc9d5 \n\n32\uc758 \ubc30\uc218\ub9cc \uc0ac\uc6a9 \uac00\ub2a5 . 320x320, 288x288\ub4f1. \uc804 320\uc73c\ub85c \uace0 ","f5048d42":"## 1.3 convert darknet model to Keras \n\n\ucf00\ub77c\uc2a4\uc6a9 \ubaa8\ub378\ub85c \ucee8\ubc84\ud2b8","881092af":"* model_checkpoint \uc7ac\uc0ac\uc6a9\uc744 \uc704\ud55c \ucf54\ub4dc\ub97c train.py\uc5d0 \ucd94\uac00 ","aa5bcb46":"## 1.2 keras-yolo3 \ub2e4\uc6b4\ub85c\ub4dc","5464c8a8":"## 2.4 \ub77c\ubca8 \ud30c\uc77c class.txt \uc0dd\uc131\n* keras-yolo3\/model_data\/voc_classes.txt \ubcf4\uba74 \ud615\uc2dd\uc774 \ub2e4\uc74c\uacfc \uac19\uc74c. classes.csv \uc758 \ud615\uc2dd \ubcc0\uacbd\n\n```python\naeroplane\nbicycle\nbird\n```\n* 'class id must be less than num_classes' train\uc14b\uc758 \ub77c\ubca8 \uac2f\uc218\uc640 class.txt \ud30c\uc77c\uc5d0 \ub77c\ubca8 \uac2f\uc218 \ub9de\ucdb0\uc57c \ud568 "}}