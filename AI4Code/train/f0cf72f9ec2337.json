{"cell_type":{"6418e25f":"code","14488cee":"code","bcc75083":"code","17cafbff":"code","ad0e7c77":"code","8b5d1e5e":"code","d7967dcd":"code","de2c6893":"code","6c46e846":"code","32617f09":"code","97da328f":"code","3e8c1b72":"code","70528820":"code","2ae2db58":"code","64881971":"code","60a75b42":"code","11e0ce48":"code","f24da53a":"code","6b6b7f9f":"code","0bcdf7f5":"code","816c6af5":"code","552536b5":"code","f559ed06":"code","dd9ec227":"code","dd5b550e":"code","2300c91f":"code","e00b00b6":"code","72d1c3d2":"code","73501576":"code","582109c1":"code","91f528aa":"code","dd4d9b6c":"code","e82da1b0":"code","47fb7973":"code","e9e62cd8":"code","a2adfd6f":"code","eb6bf00d":"code","7bcb7c92":"code","aff3fa85":"code","3f93040b":"code","8e1f459c":"code","360e0b98":"markdown","3a3b189b":"markdown"},"source":{"6418e25f":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport altair as alt \nimport warnings\nwarnings.filterwarnings(\"ignore\")","14488cee":"df1 = pd.read_csv('..\/input\/top-250s-in-imdb\/imdb(MOVIES).csv')\ndf1.head()","bcc75083":"df1.columns","17cafbff":"df1.info()","ad0e7c77":"df2 = pd. read_csv('..\/input\/top-250s-in-imdb\/imdb(SERIES).csv')\ndf2.head()","8b5d1e5e":"df2.columns","d7967dcd":"empty_=[]\nfor i in df2.VOTES:\n    test_string = i.replace(\",\", \"\")\n    empty_.append(test_string)\n    \ndf2.VOTES=empty_\ndf2.VOTES=df2.VOTES.astype(\"int64\")\ndf2","de2c6893":"df2.keys()","6c46e846":"df2.info()","32617f09":"df2[\"VOTES\"]=df2.VOTES.astype(\"int64\")\ndf2.keys()","97da328f":"df3 = pd. read_csv('..\/input\/top-250s-in-imdb\/imdb(VIDEO GAMES).csv')\ndf3.head()","3e8c1b72":"df3.keys()","70528820":"f, axs = plt.subplots(3,1,figsize=(20,20),facecolor=\"lightgrey\")\nsns.barplot(x='movie name ',y=\"votes\",data=df1.sort_values(by=\"votes\",ascending=False).head(10),ax=axs[0])\naxs[0].tick_params(axis='x', rotation=30)\naxs[0].set_title(\"movies\")\nsns.barplot(x='series name',y='VOTES',data=df2.sort_values(by='VOTES',ascending=False).head(10),ax=axs[1])\naxs[1].tick_params(axis='x', rotation=30)\naxs[1].set_title(\"series name\")\nsns.barplot(x='VIDEO GAME NAME ',y='VOTES ',data=df3.sort_values(by='VOTES ',ascending=False).head(10),ax=axs[2])\naxs[2].tick_params(axis='x', rotation=30)\naxs[2].set_title(\"video games\")\nplt.suptitle(\"Category leaders as per Votes\")\nsns.despine()\nplt.show()","2ae2db58":"df1[\"category\"]=\"movies\"\ndf2[\"category\"]=\"series\"\ndf3[\"category\"]=\"games\"\nnew1=df1.loc[:,[\"votes\",\"category\",\"RATING\"]]\nnew2=df2.loc[:,[\"VOTES\",\"category\",\"rating\"]]\nnew3=df3.loc[:,['VOTES ',\"category\",\"Rating\"]]\nnew1=new1.rename(columns={\"RATING\":\"rating\"});new2\nnew2=new2.rename(columns={\"VOTES\":\"votes\"});new2\nnew3=new3.rename(columns={\"VOTES \":\"votes\",\"Rating\":\"rating\"});new3\nas_newdf=pd.concat([new1,new2,new3])\nalt.Chart(as_newdf).mark_bar().encode(\n    alt.X(\"votes:Q\", bin=True),\n    y='count()',\n    column='category:N'\n).properties(\n    width=350,\n    height=180\n).configure_title(fontSize=14).configure(background=\"lightgrey\").interactive()","64881971":"plt.figure(figsize=(20,5),facecolor=\"lightgrey\")\nsns.barplot(x=\"metascore\",y=\"movie name \",data=df1.dropna().head(20))\nplt.show()","60a75b42":"chart1=alt.Chart(as_newdf).mark_point().encode(\n    alt.X(\"votes:Q\", bin=True),\n    y='count()',\n    color='category:N'\n).properties(\n    height=300,\n    width=500\n).interactive()\n\nchart2 = alt.Chart(as_newdf).mark_bar().encode(\n    x='count()',\n    y=alt.Y('votes:Q', bin=alt.Bin(maxbins=15)),\n    color='category:N'\n).properties(\n    height=300,\n    width=100\n).interactive()\n\n(chart1 | chart2).configure_title(fontSize=14).configure(background=\"lightgrey\")","11e0ce48":"import re\ndf1[\"GROSS COLLECTION\"]= [re.sub('[^A-Za-z0-9]+','', str(i)).replace(\"M\", \"\") for i in df1[\"GROSS COLLECTION\"]]\ndf1.at[0,\"GROSS COLLECTION\"]=int(0)\ndf1[\"GROSS COLLECTION\"]=df1[\"GROSS COLLECTION\"].astype(\"float64\")","f24da53a":"df1[\"Year\"]=[i.translate({ord('-'): None,ord('('): None,ord(')'): None,ord('I'): None}) for i in df1[\"Year\"]]\ndf1.Year=[i.lstrip() for i in df1.Year]\nalt.Chart(df1).mark_bar().encode(\n    x=\"Year:Q\",\n    y='count(Year)',\n    tooltip=['count(Year)',\"Year\",\"sum(GROSS COLLECTION)\"]\n).properties(width=1000,height=350).configure_title(fontSize=14).configure(background=\"lightgrey\").interactive()\n","6b6b7f9f":"alt.Chart(df1).mark_line().encode(\n    x='Year:O',\n    y='sum(GROSS COLLECTION)',\n    color='certificate'\n).configure_axis(\n    grid=False).properties(width=1000).configure_title(fontSize=14).configure(background=\"lightgrey\").interactive()","0bcdf7f5":"df1.runtime=[int(i.split(\" \",2)[0]) for i in df1[\"runtime\"]]\ndf1 = df1.infer_objects()\nplt.figure(figsize=(20,5),facecolor=\"lightgrey\")\nsns.violinplot(x=df1.certificate,y=df1[\"GROSS COLLECTION\"],hue=df1.certificate)\nsns.despine()\nplt.show()","816c6af5":"plt.figure(figsize=(10,10),facecolor=\"lightgrey\")\nsns.histplot(data=df1, x=\"runtime\",hue=\"certificate\",palette=\"Paired\",bins=20)\nplt.show()","552536b5":"alt.Chart(df1).mark_circle(size=100).encode(\n    x='RATING',\n    y='runtime',\n    color='certificate',\n    tooltip=['movie name ','Year','RATING', 'runtime', 'certificate',\"GROSS COLLECTION\"],size=\"GROSS COLLECTION\"\n).configure_view(\n    strokeWidth=0).properties(width=1000,height=500).configure_title(fontSize=14).configure(background=\"lightgrey\").interactive()","f559ed06":"bars = alt.Chart(df1.sort_values(by=\"Year\",ascending=False)).mark_bar().encode(\n    x='mean(GROSS COLLECTION):Q',\n    y=\"Year:O\",\n    color=alt.condition(\n        alt.datum.Year == str(2019),  # If the year is 2019 this test returns True,\n        alt.value('steelblue'),     # which sets the bar steelblue.\n        alt.value('orange'),   # And if it's not true it sets the bar orange.\n    )\n)\n\ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(\n    text='mean(GROSS COLLECTION):Q'\n)\n\n(bars + text).configure_title(fontSize=14).configure(background=\"lightgrey\").configure_axis(grid=False).properties(height=900)","dd9ec227":"def pervalue(x):\n    return '{:.4f}%\\n({:.0f} movies)'.format(x, total*x\/100)\ntotal = len(df1[\"certificate\"])\nnames = df1[\"certificate\"].value_counts().keys()\nsize = df1[\"certificate\"].value_counts().values\n \n# Create a circle at the center of the plot\nmy_circle = plt.Circle( (0,0), 0.7, color='lightgrey')\n\n# Not enough colors --> colors will cycle\nplt.figure(figsize=(15,10),facecolor=\"lightgrey\")\nplt.pie(size, labels=names,autopct=pervalue,shadow=True )\np = plt.gcf()\np.gca().add_artist(my_circle)\n\n# Show the graph\nplt.show()","dd5b550e":"import plotly.express as px\ndata1=df1[[\"certificate\",\"GROSS COLLECTION\"]].groupby(\"certificate\").sum().sort_values(by=\"GROSS COLLECTION\",ascending=True).reset_index()\nfig = px.pie(data1, values='GROSS COLLECTION', names='certificate', color_discrete_sequence=px.colors.sequential.Electric_r)\nfig.update_layout(template=\"plotly_dark\",title=\"GROSS COLLECTION as per their Movie certificate\")\nfig.show()","2300c91f":"import matplotlib\nimport squarify\nfrom collections import Counter,defaultdict\nz = df1[\"genre\"]\nkeys=list(Counter(z).keys()) \nvalues=list(Counter(z).values())\nnorm = matplotlib.colors.Normalize(vmin=min(values), vmax=max(values))\ncolors = [matplotlib.cm.Reds(norm(value)) for value in values]\nlabels=[\"%s\\n%i\" % (label) for label in zip(keys,values)]\nplt.figure(figsize=(25,10))\nsquarify.plot(values, label = labels,text_kwargs={'wrap':True},color=colors)\nplt.axis('off')\nplt.show()","e00b00b6":"sns.jointplot(x=\"metascore\",y=\"GROSS COLLECTION\",data=df1,palette='Paired', kind=\"reg\")\nsns.jointplot(x=\"metascore\",y=\"GROSS COLLECTION\",data=df1,hue=\"certificate\",palette='Paired', kind=\"kde\")\nsns.despine()\nplt.show()","72d1c3d2":"act_list=[list(i) for i in zip(df1[\"ACTOR 1\"],df1[\"ACTOR 2\"],df1[\"ACTOR 3\"],df1[\"ACTOR 4\"])]\nempty_list=[]\nfor i in act_list:\n    for j in i:\n        empty_list.append(j)\nd = Counter(empty_list)\ndf_50 = pd.DataFrame.from_dict(d, orient='index').reset_index()\ndf_50=df_50.sort_values(by=0,ascending=False).head(200)\ndf_50.columns=[\"actor\",\"movies count\"]\nalt.Chart(df_50).mark_bar().encode(\n    x='actor',\n    y=\"movies count\",\n    color=alt.condition(\n        alt.datum[\"movies count\"] >= 3,  # If the year is 2019 this test returns True,\n        alt.value('steelblue'),     # which sets the bar steelblue.\n        alt.value('orange'),   # And if it's not true it sets the bar orange.\n    )\n).configure_title(fontSize=14).configure(background=\"lightgrey\").interactive()","73501576":"NEW_DF=df1.loc[:,[\"movie name \",\"RATING\",\"GROSS COLLECTION\",\"ACTOR 1\",\"ACTOR 2\",\"ACTOR 3\",\"ACTOR 4\",\"DIRECTOR \"]]\nNEW_DF[\"actors list\"]=act_list;NEW_DF=NEW_DF.drop(columns=[\"ACTOR 1\",\"ACTOR 2\",\"ACTOR 3\",\"ACTOR 4\"])\nNEW_DF=NEW_DF.explode('actors list').reset_index(drop=True)\ntop_act=list(NEW_DF[\"actors list\"].value_counts().head(50).keys())\nnew4=NEW_DF[NEW_DF[\"actors list\"].isin(top_act)]\nNEW_DF1=NEW_DF[[\"actors list\",\n                \"GROSS COLLECTION\"]].groupby(by=\n                                             \"actors list\").mean(\"GROSS COLLECTION\").reset_index().sort_values(by=\n                                                                                                               \"GROSS COLLECTION\",ascending=False)\nNEW_DF1=NEW_DF1.dropna().head(50)\nfig,ax=plt.subplots(2,1,figsize=(20,25),sharex=True,facecolor=\"lightgrey\")\nsns.barplot(y=\"actors list\",x=\"GROSS COLLECTION\",data=new4[[\"actors list\",\"GROSS COLLECTION\"]].groupby(\"actors list\",as_index=False).agg({\"GROSS COLLECTION\":np.mean}),ax=ax[0])\nax[0].set_ylabel(\"best actors with highest AVG. GROSS Collection with highest number of movies (LISTED ON IMDB)\")\nsns.barplot(y=\"actors list\",x=\"GROSS COLLECTION\",data=NEW_DF1,ax=ax[1])\nax[1].set_ylabel(\"best actors with highest AVG. GROSS COLLECTED\")\nsns.despine()\nplt.show()","582109c1":"BARS =alt.Chart(df1.loc[:,[\"DIRECTOR \",\"GROSS COLLECTION\",\"certificate\"]]).mark_bar().encode(\n    x='DIRECTOR ',\n    y='count(DIRECTOR )',\n    color='certificate'\n)\ntext = alt.Chart(df1.loc[:,[\"DIRECTOR \",\"GROSS COLLECTION\",\"certificate\"]]).mark_text(dx=-15, dy=3, color='black').encode(\n    y=alt.Y('count(DIRECTOR ):Q', stack='zero'),\n    x=alt.X('DIRECTOR :N'),\n    detail='count(DIRECTOR ):N',\n    text=alt.Text('sum(GROSS COLLECTION):Q')\n)\n(BARS+text).configure_title(fontSize=14).configure(background=\"lightgrey\")","91f528aa":"fig = px.box(NEW_DF, x=\"DIRECTOR \", y=\"GROSS COLLECTION\",)\nfig.update_layout(template=\"plotly_dark\",title=\"GROSS COLLECTION boxplot of directors\",)\nfig.show()","dd4d9b6c":"direc=new4.sort_values(by=\"GROSS COLLECTION\",ascending=False).dropna()\nfig = px.parallel_categories(direc, dimensions=['DIRECTOR ', 'actors list', 'movie name '],\n                color=\"GROSS COLLECTION\", color_continuous_scale=px.colors.sequential.Blackbody,\n                labels={'DIRECTOR ':'Director', 'actors list':\"Actor\", 'movie name ':'Name of movie'})\nfig.update_layout(\n    autosize=False,\n    width=1200,\n    coloraxis_colorbar_x=-0.15,\n    height=1000,template=\"plotly_dark\",title=\"Director favourite actors through which they made wealth & in which movie\")\n\nfig.show()","e82da1b0":"df1[\"DETAIL ABOUT MOVIE\"][0] #LET SEE AN EXAMPLE","47fb7973":"from sklearn.feature_extraction.text import TfidfVectorizer\n\n\ntfv = TfidfVectorizer(min_df=3,  max_features=None, \n            strip_accents='unicode', analyzer='word',token_pattern=r'\\w{1,}',\n            ngram_range=(1, 3),\n            stop_words = 'english')","e9e62cd8":"# Filling NaNs with empty string\ndf1['DETAIL ABOUT MOVIE']=df1['DETAIL ABOUT MOVIE'].fillna('')","a2adfd6f":"tfv_matrix = tfv.fit_transform(df1['DETAIL ABOUT MOVIE'])","eb6bf00d":"tfv_matrix.shape","7bcb7c92":"from sklearn.metrics.pairwise import sigmoid_kernel\nsig = sigmoid_kernel(tfv_matrix, tfv_matrix)\nsig[0]","aff3fa85":"indices = pd.Series(df1.index, index=df1['movie name ']).drop_duplicates()\nindices","3f93040b":"list(enumerate(sig[indices['Avengers: Endgame']]))\nsorted(list(enumerate(sig[indices['Avengers: Endgame']])), key=lambda x: x[1], reverse=True)\ndef give_rec(title, sig=sig):\n    # Get the index corresponding to original_title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores \n    sig_scores = list(enumerate(sig[idx]))\n\n    # Sort the movies \n    sig_scores = sorted(sig_scores, key=lambda x: x[1], reverse=True)\n\n    # Scores of the 10 most similar movies\n    sig_scores = sig_scores[1:11]\n\n    # Movie indices\n    movie_indices = [i[0] for i in sig_scores]\n\n    # Top 10 most similar movies\n    return df1['movie name '].iloc[movie_indices]","8e1f459c":"give_rec('It Happened One Night') #result we get from the our movie recommender system","360e0b98":"<u>**Now Building simple Recommendation engine**<\/u>","3a3b189b":"<h5>Content Based Recommendation System<\/h5>"}}