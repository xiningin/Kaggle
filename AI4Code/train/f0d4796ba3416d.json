{"cell_type":{"c142e47a":"code","4b2489a5":"code","74555dba":"code","1e99ce0e":"code","8f93cd0b":"code","7d49c475":"code","81c9c705":"code","0a5a9a63":"code","1da90d76":"code","1ceefc8e":"code","80cf9af2":"code","848510b0":"code","f0e1bffd":"code","f4205308":"code","cb7abeb7":"code","6a6dd988":"code","2158387d":"code","8ac632f2":"code","ceaa5522":"code","13295515":"code","19b69427":"code","16e49cbb":"code","09ea7795":"code","8a4472a8":"code","1c4721c2":"code","34de2402":"code","00634416":"code","f20c4124":"code","2b94d2f9":"code","07b69969":"code","1823508a":"code","2969dbb3":"code","5847769b":"code","3def72af":"code","c604f6c4":"code","497e744b":"code","72f7ac3c":"code","d212159b":"code","3fe15f8a":"code","ae684fa4":"code","95fc1d16":"code","fecd1da4":"code","867547c4":"code","74c590a1":"code","701ef671":"code","b85c26d1":"code","bb323ff7":"code","42fad13b":"code","db8bddc1":"code","80d067fa":"markdown","342f4fe6":"markdown","b18021dd":"markdown","b6826e72":"markdown","d4ff8fb0":"markdown","2be0073b":"markdown","9eb6a87f":"markdown","b99abcaa":"markdown","698c0924":"markdown","0b11a662":"markdown","dac62249":"markdown","470ecbde":"markdown","8b8f57c8":"markdown","a63768b8":"markdown","da504083":"markdown","09822664":"markdown","a8310706":"markdown","b1ea107f":"markdown","22521c0f":"markdown","e3c3a4f6":"markdown","c9ed2461":"markdown"},"source":{"c142e47a":"%reset -f\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os","4b2489a5":"from imblearn.over_sampling import SMOTE, ADASYN","74555dba":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import  OneHotEncoder as ohe\nfrom sklearn.preprocessing import StandardScaler as ss\nfrom sklearn.compose import ColumnTransformer as ct","1e99ce0e":"from xgboost.sklearn import XGBClassifier\nfrom sklearn.metrics import precision_recall_fscore_support","8f93cd0b":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import average_precision_score\nimport sklearn.metrics as metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import auc, roc_curve","7d49c475":"os.chdir(\"..\/input\")\ncr = pd.read_csv(\"creditcard.csv\")","81c9c705":"cr.head()","0a5a9a63":"cr.info()","1da90d76":"cr.describe()","1ceefc8e":"cr.shape","80cf9af2":"cr.columns.values","848510b0":"cr.dtypes.value_counts()","f0e1bffd":"f, axes = plt.subplots(2, 2, figsize=(7, 7))\nsns.boxplot(x=\"Class\", y=\"Time\", data=cr, ax=axes[0, 0])\nsns.boxplot(x=\"Class\", y=\"V1\", data=cr, ax=axes[0, 1])\nsns.boxplot(x=\"Class\", y=\"V2\", data=cr, ax=axes[1, 0])\nsns.boxplot(x=\"Class\", y=\"V3\", data=cr, ax=axes[1, 1])\nplt.show()","f4205308":"cr.corr()\nsns.heatmap(cr.corr())","cb7abeb7":"sns.countplot(x='Class', data=cr)","6a6dd988":"(cr.isnull()).apply(sum, axis = 0)","2158387d":"y = cr.iloc[:,30]\nX = cr.iloc[:,0:30]","8ac632f2":"X.shape              ","ceaa5522":"X.columns","13295515":"y.head()","19b69427":"X_trans = ss().fit_transform(X)\nX_trans.shape","16e49cbb":"X_train, X_test, y_train, y_test =   train_test_split(X_trans,\n                                                      y,\n                                                      test_size = 0.3,\n                                                      stratify = y\n                                                      )\n\n\nX_train.shape        ","09ea7795":"xg = XGBClassifier(learning_rate=0.5,\n                   reg_alpha= 5,\n                   reg_lambda= 0.1\n                   )","8a4472a8":"sm = SMOTE(random_state=42)\nX_res, y_res = sm.fit_sample(X_train, y_train)","1c4721c2":"X_res.shape","34de2402":"y_res.shape","00634416":"xg_res = xg.fit(X_res, y_res)","f20c4124":"#Predict\ny_pred_xg_res = xg_res.predict(X_test)\ny_pred_xg_res","2b94d2f9":"y_pred_xg_res_prob = xg_res.predict_proba(X_test)\ny_pred_xg_res_prob","07b69969":"#Accuracy\nprint ('Accuracy using XGB and SMOTE',accuracy_score(y_test,y_pred_xg_res))","1823508a":"#Confusion Matrix\nconfusion_matrix(y_test,y_pred_xg_res)","2969dbb3":"fpr_xg_res, tpr_xg_res, thresholds = roc_curve(y_test,\n                                 y_pred_xg_res_prob[: , 1],\n                                 pos_label= 1\n                                 )\n","5847769b":"#Precion, Recall and F1 Score\np_xg_res,r_xg_res,f_xg_res,_ = precision_recall_fscore_support(y_test,y_pred_xg_res)","3def72af":"p_xg_res,r_xg_res,f_xg_res","c604f6c4":"print ('AUC using XGB and SMOTE',auc(fpr_xg_res,tpr_xg_res))","497e744b":"fig = plt.figure(figsize=(12,10)) \nax = fig.add_subplot(111)\nax.plot([0, 1], [0, 1], ls=\"--\")   \nax.set_xlabel('False Positive Rate')  \nax.set_ylabel('True Positive Rate')\nax.set_title('ROC curve for XGB and SMOTE')\nax.set_xlim([0.0, 1.0])\nax.set_ylim([0.0, 1.0])\nax.plot(fpr_xg_res, tpr_xg_res, label = \"xgb\")\nax.legend(loc=\"lower right\")\nplt.show()","72f7ac3c":"ad = ADASYN(random_state=42)\nX_ada, y_ada = sm.fit_sample(X_train, y_train)","d212159b":"X_ada.shape","3fe15f8a":"y_ada.shape","ae684fa4":"xg_ada = xg.fit(X_ada, y_ada)","95fc1d16":"y_pred_xg_ada = xg_ada.predict(X_test)\ny_pred_xg_ada","fecd1da4":"y_pred_xg_ada_prob = xg_ada.predict_proba(X_test)\ny_pred_xg_ada_prob","867547c4":"print ('Accuracy using XGB and ADASYN',accuracy_score(y_test,y_pred_xg_ada))","74c590a1":"confusion_matrix(y_test,y_pred_xg_ada)","701ef671":"fpr_xg_ada, tpr_xg_ada, thresholds = roc_curve(y_test,\n                                 y_pred_xg_ada_prob[: , 1],\n                                 pos_label= 1\n                                 )","b85c26d1":"p_xg_ada,r_xg_ada,f_xg_ada,_ = precision_recall_fscore_support(y_test,y_pred_xg_ada)","bb323ff7":"p_xg_ada,r_xg_ada,f_xg_ada","42fad13b":"print ('AUC using XGB and ADASYN',auc(fpr_xg_ada,tpr_xg_ada))","db8bddc1":"fig = plt.figure(figsize=(12,10))        \nax = fig.add_subplot(111)\nax.plot([0, 1], [0, 1], ls=\"--\")\nax.set_xlabel('False Positive Rate')\nax.set_ylabel('True Positive Rate')\nax.set_title('ROC curve for XGB and ADASYN')\nax.set_xlim([0.0, 1.0])\nax.set_ylim([0.0, 1.0])\nax.plot(fpr_xg_ada, tpr_xg_ada, label = \"xgb\")\nax.legend(loc=\"lower right\")\nplt.show()","80d067fa":"_Split data into train\/test_     ","342f4fe6":"_Fit and transform_","b18021dd":"####  Credit Card Fraud - Working with unbalanced dataset","b6826e72":"_Separation into target\/predictors_","d4ff8fb0":"## Modelling","2be0073b":"_Import SMOTE AND ADASYN to balance the dataset_","9eb6a87f":"_for ROC graphs & metrics_","b99abcaa":"_Processing data_","698c0924":"__Call libraries__","0b11a662":"## ADASYN-Balancing the data","dac62249":"_Just check any columns have missing data_","470ecbde":"### SMOTE-Balancing the data","8b8f57c8":"_Call Modeling module, we will be using XBG for modeling._","a63768b8":"__Credit Card Fraud dataset__\n\n================================\n\nThe datasets contains transactions made by credit cards in September 2013 by European cardholders. This dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.\n\nIt contains only numerical input variables which are the result of a PCA transformation. Due to confidentiality issues, original features and more background information about the data can't be provided. Features V1, V2, ... V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-senstive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.","da504083":"*As we can below the X_res and y_res are having same number of rows, that means we have balanced the data*","09822664":"_Explore data_","a8310706":"_ROC Curve_","b1ea107f":"_Read data_","22521c0f":"_XGB Classifier_","e3c3a4f6":"_ploting_","c9ed2461":"_Fit the data_"}}