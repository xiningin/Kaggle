{"cell_type":{"5abd66ed":"code","45890cc0":"code","695f8990":"code","3ff42e72":"code","0dc14bf8":"code","1c15061e":"code","a560ea64":"code","176492d1":"code","0f34f886":"code","1bcd2d7a":"code","b3e25616":"markdown","a7293436":"markdown","09364eee":"markdown","7b6aec59":"markdown","6101edad":"markdown","09321ffc":"markdown","17a44ec7":"markdown","53b46fe9":"markdown"},"source":{"5abd66ed":"import spacy","45890cc0":"## load spacy model\nnlp = spacy.load('en_core_web_sm')","695f8990":"## Apply the Annotation on a document\ndoc = nlp('Hi I doing virtual internship at DataGlacier and I am happy')","3ff42e72":"\nfor i in doc:\n    print(i.text, i.lemma_)","0dc14bf8":"## POS tagging with general and fine grained tag\nfor i in doc:\n    print(i.text, i.pos_,i.tag_)","1c15061e":"## Dependency Parsing \nfor i in doc:\n    print(i.text, i.pos_, i.dep_)","a560ea64":"## Noun Chunk Extraction\nfor chunk in doc.noun_chunks:\n    print(chunk)","176492d1":"## Entity Extraction\nfor entity in doc.ents:\n    print(entity.label_, ' | ', entity.text)","0f34f886":"from spacy.matcher import Matcher\n\n# Initialize the matcher with the shared vocab\nmatcher = Matcher(nlp.vocab)\n\n# Add the pattern to the matcher\npattern = [{\"TEXT\": \"iPhone\"}, {\"TEXT\": \"X\"}]\nmatcher.add(\"IPHONE_PATTERN\", None, pattern)\n\n# Process some text\ndoc = nlp(\"Upcoming iPhone X release date leaked\")\n\n# Call the matcher on the doc\nmatches = matcher(doc)\nfor match_id, start, end in matches:\n    # Get the matched span\n    matched_span = doc[start:end]\n    print(matched_span.text)","1bcd2d7a":"doc = nlp(\n    \"After making the iOS update you won't notice a radical system-wide \"\n    \"redesign: nothing like the aesthetic upheaval we got with iOS 7. Most of \"\n    \"iOS 11's furniture remains the same as in iOS 10. But you will discover \"\n    \"some tweaks once you delve a little deeper.\"\n)\n\n# Write a pattern for full iOS versions (\"iOS 7\", \"iOS 11\", \"iOS 10\")\npattern = [{\"TEXT\": \"iOS\"}, {\"IS_DIGIT\": True}]\n\n# Add the pattern to the matcher and apply the matcher to the doc\nmatcher.add(\"IOS_VERSION_PATTERN\", None, pattern)\nmatches = matcher(doc)\nprint(\"Total matches found:\", len(matches))\n\n# Iterate over the matches and print the span text\nfor match_id, start, end in matches:\n    print(\"Match found:\", doc[start:end].text)","b3e25616":"### Noun Chunk Extraction","a7293436":"### Lemma extraction","09364eee":"### Entity Extraction","7b6aec59":"### Dependency Parsing ","6101edad":"### Spacy Models\n\n1. en_core_web_sm\n2. en_core_web_md\n3. en_core_web_lg\n4. en_core_web_trf\n","09321ffc":"### Rule Based Mactcher","17a44ec7":"## Spacy\n\nspaCy is a free, open-source library for advanced Natural Language Processing (NLP) in Python.\n\nIf you\u2019re working with a lot of text, you\u2019ll eventually want to know more about it. For example, what\u2019s it about? What do the words mean in context? Who is doing what to whom? What companies and products are mentioned? Which texts are similar to each other?\n\nspaCy is designed specifically for production use and helps you build applications that process and \u201cunderstand\u201d large volumes of text. It can be used to build information extraction or natural language understanding systems, or to pre-process text for deep learning.","53b46fe9":"### POS Tagging"}}