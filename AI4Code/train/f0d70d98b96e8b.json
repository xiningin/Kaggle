{"cell_type":{"d3461ae2":"code","6b3f98bf":"code","97f358e3":"code","f95d51c4":"code","5d04fbe3":"code","bda60acf":"code","22f4949d":"code","db56eb47":"code","1bd95c20":"code","a9f8e7df":"code","70f2463d":"code","19c03d5e":"code","fed55272":"code","2d764fee":"code","fa7c70ba":"code","4b845ffa":"code","20133f20":"code","deb22bdb":"code","40b8964b":"code","80add975":"code","12b5f9c7":"code","e85f559f":"code","2364f06d":"code","8bc3fbfc":"code","2643b59e":"code","1b5629b2":"code","89d8e04b":"code","9c7fd155":"code","ca686da4":"code","a8a76a9d":"code","ce4db6f1":"code","6185e7c3":"code","fc78cefb":"code","916df0c6":"code","e1afd435":"code","9164800c":"code","075bdaff":"code","3b2a2555":"code","bc17289b":"code","605b858a":"code","cfa16ff8":"code","118dbb53":"code","e3458255":"code","1fc126d6":"code","4fd7b02e":"code","78a94af4":"code","7fa57a38":"code","4c3f61ad":"code","9748d4d8":"code","125b1926":"code","842d7a11":"code","eb63b881":"code","36767987":"code","14b9cd3c":"code","8ed5348a":"code","77f6f2ba":"code","024aedca":"code","f916d9b9":"code","413f184e":"markdown","0e1f2a21":"markdown","3ef535c2":"markdown","68bbc529":"markdown","9157a121":"markdown","449109f8":"markdown","07c2cc67":"markdown","5c22acb8":"markdown","fdcb008a":"markdown","cc5da668":"markdown","1f5b9134":"markdown","3d8197e7":"markdown","19417bd2":"markdown","b588c289":"markdown","b7b7fe91":"markdown","1e9f1ca9":"markdown","66f7816b":"markdown","7677a756":"markdown","1af43e5f":"markdown","1788ba72":"markdown","799dc788":"markdown","e7a09ac2":"markdown","c21e0452":"markdown","dd2a1a81":"markdown","06cb8459":"markdown","81c3b590":"markdown","f69c2ec1":"markdown","c9f97b29":"markdown","11c9abcc":"markdown","a22c22f1":"markdown","188dce41":"markdown"},"source":{"d3461ae2":"import sys\nimport os\nimport warnings\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\nfrom sklearn.model_selection import train_test_split,GridSearchCV,KFold,cross_val_score\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso\nfrom sklearn.feature_selection import RFE\nfrom sklearn.metrics import r2_score","6b3f98bf":"warnings.filterwarnings('ignore')\n%matplotlib inline","97f358e3":"house_price = pd.read_csv('..\/input\/house-prediction\/train.csv')","f95d51c4":"house_price.shape","5d04fbe3":"house_price.info()","bda60acf":"house_price.head()","22f4949d":"house_price.describe([0.25,0.50,0.75,0.99])","db56eb47":"round(house_price.isnull().sum()\/len(house_price.index),2).sort_values(ascending=False).head(18)","1bd95c20":"round(house_price.isnull().sum()\/len(house_price.index),2)[round(house_price.isnull().sum()\/\n                                                                 len(house_price.index),2).values>0.10]","a9f8e7df":"house_price = house_price.drop(['LotFrontage','Alley','FireplaceQu','PoolQC','Fence','MiscFeature','MoSold'],axis='columns')","70f2463d":"round(house_price.isnull().sum()\/len(house_price.index),2)[round(house_price.isnull().sum()\/\n                                                                 len(house_price.index),2).values>0.00]","19c03d5e":"house_price['YearBuilt_Old'] = house_price.YearBuilt.max()-house_price.YearBuilt\nhouse_price['YearRemodAdd_Old'] = house_price.YearRemodAdd.max()-house_price.YearRemodAdd\nhouse_price['GarageYrBlt_Old'] = house_price.GarageYrBlt.max()-house_price.GarageYrBlt\nhouse_price['YrSold_Old'] = house_price.YrSold.max()-house_price.YrSold\nhouse_price[['YearBuilt','YearRemodAdd','GarageYrBlt','YrSold','YearBuilt_Old','YearRemodAdd_Old',\n             'GarageYrBlt_Old','YrSold_Old']].sample(10)","fed55272":"house_price = house_price.drop(['YearBuilt','YearRemodAdd','GarageYrBlt','YrSold'],axis='columns')","2d764fee":"house_price.MasVnrType.fillna('None',inplace=True)\nhouse_price.MasVnrArea.fillna(house_price.MasVnrArea.mean(),inplace=True)\nhouse_price.BsmtQual.fillna('TA',inplace=True)\nhouse_price.BsmtCond.fillna('TA',inplace=True)\nhouse_price.BsmtExposure.fillna('No',inplace=True)\nhouse_price.BsmtFinType1.fillna('Unf',inplace=True)\nhouse_price.BsmtFinType2.fillna('Unf',inplace=True)\nhouse_price.GarageType.fillna('Attchd',inplace=True)\nhouse_price.GarageYrBlt_Old.fillna(-1,inplace=True)\nhouse_price.GarageFinish.fillna('Unf',inplace=True)\nhouse_price.GarageQual.fillna('TA',inplace=True)\nhouse_price.GarageCond.fillna('TA',inplace=True)","fa7c70ba":"house_price.Street.value_counts()\nhouse_price.Utilities.value_counts()\nhouse_price = house_price.drop(['Street','Utilities'],axis='columns')\n# we see that these values are really skewed and will alter the analysis","4b845ffa":"house_price = house_price.drop('Id',axis='columns')","20133f20":"house_price[list(house_price.dtypes[house_price.dtypes!='object'].index)].describe()","deb22bdb":"plt.figure(figsize=(16,8))\nplt.subplot(2,3,1)\nplt.scatter(house_price.MasVnrArea,house_price.SalePrice)\nplt.subplot(2,3,2)\nplt.scatter(house_price.TotalBsmtSF,house_price.SalePrice)\nplt.subplot(2,3,3)\nplt.scatter(house_price['1stFlrSF'],house_price.SalePrice)\nplt.subplot(2,3,4)\nplt.scatter(house_price['GarageArea'],house_price.SalePrice)\nplt.subplot(2,3,5)\nplt.scatter(house_price['GrLivArea'],house_price.SalePrice)\nplt.subplot(2,3,6)\nplt.scatter(house_price['WoodDeckSF'],house_price.SalePrice)","40b8964b":"plt.figure(figsize=(16,16))\nsns.heatmap(house_price[list(house_price.dtypes[house_price.dtypes!='object'].index)].corr(),annot=True)\nplt.show()","80add975":"house_price.shape","12b5f9c7":"num_col = list(house_price.dtypes[house_price.dtypes !='object'].index)\nnum_col = ['LotArea','MasVnrArea','BsmtFinSF1','BsmtFinSF2','TotalBsmtSF','1stFlrSF','GrLivArea','OpenPorchSF',\n           'EnclosedPorch','3SsnPorch',\n           'ScreenPorch' ,'PoolArea','MiscVal','SalePrice']\ndef drop_outliers(x):\n    list = []\n    for col in num_col:\n        Q1 = x[col].quantile(.25)\n        Q3 = x[col].quantile(.99)\n        IQR = Q3-Q1\n        x =  x[(x[col] >= (Q1-(1.5*IQR))) & (x[col] <= (Q3+(1.5*IQR)))] \n    return x   \n\nhouse_price = drop_outliers(house_price)","e85f559f":"house_price.shape","2364f06d":"house_price[list(house_price.dtypes[house_price.dtypes=='object'].index)].head()","8bc3fbfc":"house_price[['LandSlope','ExterQual','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n            'HeatingQC','CentralAir',  'KitchenQual','GarageFinish','GarageQual','GarageCond',\n             'ExterCond','LotShape']].head()","2643b59e":"#Label encoding the values manually because it can be easier to interpret the columns\nhouse_price['LandSlope'] = house_price.LandSlope.map({'Gtl':0,'Mod':1,'Sev':2})\nhouse_price['ExterQual'] = house_price.ExterQual.map({'Po':0,'Fa':1,'TA':2,'Gd':3,'Ex':4})\nhouse_price['BsmtQual'] = house_price.BsmtQual.map({'NA':0,'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5})\nhouse_price['BsmtCond'] = house_price.BsmtCond.map({'NA':0,'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5})\nhouse_price['BsmtExposure'] = house_price.BsmtExposure.map({'NA':0,'No':1,'Mn':2,'Av':3,'Gd':4})\nhouse_price['BsmtFinType1'] = house_price.BsmtFinType1.map({'NA':0,'Unf':1,'LwQ':2,'Rec':3,'BLQ':4,'ALQ':5,'GLQ':6})\nhouse_price['BsmtFinType2'] = house_price.BsmtFinType2.map({'NA':0,'Unf':1,'LwQ':2,'Rec':3,'BLQ':4,'ALQ':5,'GLQ':6})\nhouse_price['HeatingQC'] = house_price.HeatingQC.map({'Po':0,'Fa':1,'TA':2,'Gd':3,'Ex':4})\nhouse_price['CentralAir'] = house_price.CentralAir.map({'N':0,'Y':1})\nhouse_price['KitchenQual'] = house_price.KitchenQual.map({'Po':0,'Fa':1,'TA':2,'Gd':3,'Ex':4})\nhouse_price['GarageFinish'] = house_price.GarageFinish.map({'NA':0,'Unf':1,'RFn':2,'Fin':3})\nhouse_price['GarageQual'] = house_price.GarageQual.map({'NA':0,'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5})\nhouse_price['GarageCond'] = house_price.GarageCond.map({'NA':0,'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5})\nhouse_price['ExterCond'] = house_price.ExterCond.map({'Po':0,'Fa':1,'TA':2,'Gd':3,'Ex':4})\nhouse_price['LotShape'] = house_price.LotShape.map({'IR1':0,'IR2':1,'IR3':2,'Reg':3})","1b5629b2":"house_price[['LandSlope','ExterQual','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n            'HeatingQC','CentralAir',  'KitchenQual','GarageFinish','GarageQual','GarageCond',\n             'ExterCond','LotShape']].head()","89d8e04b":"dummy_col = pd.get_dummies(house_price[['MSZoning','LandContour','LotConfig','Neighborhood','Condition1','Condition2','BldgType',\n             'HouseStyle','RoofStyle','RoofMatl','Exterior1st',  'Exterior2nd','MasVnrType','Foundation',\n             'Heating','Electrical','Functional','GarageType','PavedDrive','SaleType','SaleCondition']],\n                           drop_first=True)\n\nhouse_price = pd.concat([house_price,dummy_col],axis='columns')\n\nhouse_price = house_price.drop(['MSZoning','LandContour','LotConfig','Neighborhood','Condition1','Condition2','BldgType',\n             'HouseStyle','RoofStyle','RoofMatl','Exterior1st',  'Exterior2nd','MasVnrType','Foundation',\n             'Heating','Electrical','Functional','GarageType','PavedDrive','SaleType','SaleCondition'],axis='columns')","9c7fd155":"plt.figure(figsize=(16,6))\nsns.distplot(house_price.SalePrice)\nplt.show()","ca686da4":"df_train,df_test = train_test_split(house_price,train_size=0.7,test_size=0.3,random_state=42)","a8a76a9d":"house_price[['LandSlope','ExterQual','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n            'HeatingQC','CentralAir',  'KitchenQual','GarageFinish','GarageQual','GarageCond',\n             'ExterCond','LotShape']].head()","ce4db6f1":"num_col = ['MSSubClass','LotArea','OverallQual','OverallCond',\n           'MasVnrArea','BsmtFinSF1',\n           'BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','1stFlrSF','2ndFlrSF',\n           'LowQualFinSF','GrLivArea','BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr',\n           'KitchenAbvGr','TotRmsAbvGrd','Fireplaces','GarageCars',\n           'GarageArea','WoodDeckSF','OpenPorchSF','EnclosedPorch','3SsnPorch',\n           'ScreenPorch','PoolArea','MiscVal','SalePrice']\n\nscaler = StandardScaler()\ndf_train[num_col] = scaler.fit_transform(df_train[num_col])\ndf_test[num_col] = scaler.transform(df_test[num_col])","6185e7c3":"plt.figure(figsize=(16,6))\nplt.subplot(121)\nsns.distplot(df_train.SalePrice)\nplt.subplot(122)\nsns.distplot(df_test.SalePrice)","fc78cefb":"y_train = df_train.pop('SalePrice')\nX_train = df_train","916df0c6":"y_test = df_test.pop('SalePrice')\nX_test = df_test","e1afd435":"len(X_train.columns)","9164800c":"lm  = LinearRegression()\nlm.fit(X_train,y_train)\nrfe = RFE(lm,40)\n#using 40 features to be selected\nrfe.fit(X_train,y_train)","075bdaff":"rfe_scores = pd.DataFrame(list(zip(X_train.columns,rfe.support_,rfe.ranking_)))\nrfe_scores.columns = ['Column_Names','Status','Rank']","3b2a2555":"rfe_sel_columns = list(rfe_scores[rfe_scores.Status==True].Column_Names)","bc17289b":"X_train = X_train[rfe_sel_columns]\nX_test = X_test[rfe_sel_columns]","605b858a":"lm = Lasso(alpha=0.001)\nlm.fit(X_train,y_train)\n\ny_train_pred = lm.predict(X_train)\nprint(r2_score(y_true=y_train,y_pred=y_train_pred))\n\ny_test_pred  = lm.predict(X_test)\nprint(r2_score(y_true=y_test,y_pred=y_test_pred))","cfa16ff8":"model_parameter = list(lm.coef_)\nmodel_parameter.insert(0,lm.intercept_)\nmodel_parameter = [round(x,3) for x in model_parameter]\ncol = df_train.columns\ncol.insert(0,'Constant')\nlist(zip(col,model_parameter))","118dbb53":"folds = KFold(n_splits=10,shuffle=True,random_state=42)\n\nhyper_param = {'alpha':[0.001, 0.01, 0.1,1.0, 5.0, 10.0,20.0]}\n\nmodel = Lasso()\n\nmodel_cv = GridSearchCV(estimator = model,\n                        param_grid=hyper_param,\n                        scoring='r2',\n                        cv=folds,\n                        verbose=1,\n                        return_train_score=True\n                       )\n\nmodel_cv.fit(X_train,y_train)","e3458255":"cv_result_l = pd.DataFrame(model_cv.cv_results_)\ncv_result_l['param_alpha'] = cv_result_l['param_alpha'].astype('float32')\ncv_result_l.head()","1fc126d6":"plt.figure(figsize=(16,8))\nplt.plot(cv_result_l['param_alpha'],cv_result_l['mean_train_score'])\nplt.plot(cv_result_l['param_alpha'],cv_result_l['mean_test_score'])\nplt.xscale('log')\nplt.ylabel('R2 Score')\nplt.xlabel('Alpha')\nplt.show()","4fd7b02e":"# Checking the best parameter(Alpha value)\nmodel_cv.best_params_","78a94af4":"lasso = Lasso(alpha=0.001)\nlasso.fit(X_train,y_train)\n\ny_train_pred = lasso.predict(X_train)\ny_test_pred = lasso.predict(X_test)\n\nprint(r2_score(y_true=y_train,y_pred=y_train_pred))\nprint(r2_score(y_true=y_test,y_pred=y_test_pred))","7fa57a38":"model_param = list(lasso.coef_)\nmodel_param.insert(0,lasso.intercept_)\ncols = df_train.columns\ncols.insert(0,'const')\nlasso_coef = pd.DataFrame(list(zip(cols,model_param)))\nlasso_coef.columns = ['Featuere','Coef']","4c3f61ad":"lasso_coef.sort_values(by='Coef',ascending=False).head(10)","9748d4d8":"ridge = Ridge(alpha=0.001)\nridge.fit(X_train,y_train)\n\ny_train_pred = ridge.predict(X_train)\nprint(r2_score(y_train,y_train_pred))\ny_test_pred = ridge.predict(X_test)\nprint(r2_score(y_test,y_test_pred))","125b1926":"folds  = KFold(n_splits=10,shuffle=True,random_state=42)\n\nhyper_param = {'alpha':[0.001,0.01,0.1,0.2,0.5,0.9,1.0, 5.0, 10.0,20.0]}\n\nmodel = Ridge()\n\nmodel_cv = GridSearchCV(estimator=model,\n                        param_grid=hyper_param,\n                        scoring='r2',\n                        cv=folds,\n                        verbose=1,\n                        return_train_score=True)\n\nmodel_cv.fit(X_train,y_train)","842d7a11":"cv_result_r = pd.DataFrame(model_cv.cv_results_)\ncv_result_r['param_alpha'] = cv_result_r['param_alpha'].astype('float32')\ncv_result_r.head()","eb63b881":"plt.figure(figsize=(16,8))\nplt.plot(cv_result_r['param_alpha'],cv_result_r['mean_train_score'])\nplt.plot(cv_result_r['param_alpha'],cv_result_r['mean_test_score'])\nplt.xlabel('Alpha')\n# plt.xscale('log')\nplt.ylabel('R2 Score')\nplt.show()","36767987":"# Checking the best parameter(Alpha value)\nmodel_cv.best_params_","14b9cd3c":"ridge = Ridge(alpha = 0.9)\nridge.fit(X_train,y_train)\n\ny_pred_train = ridge.predict(X_train)\nprint(r2_score(y_train,y_pred_train))\n\ny_pred_test = ridge.predict(X_test)\nprint(r2_score(y_test,y_pred_test))","8ed5348a":"model_parameter = list(ridge.coef_)\nmodel_parameter.insert(0,ridge.intercept_)\ncols = df_train.columns\ncols.insert(0,'constant')\nridge_coef = pd.DataFrame(list(zip(cols,model_parameter)))\nridge_coef.columns = ['Feaure','Coef']","77f6f2ba":"ridge_coef.sort_values(by='Coef',ascending=False).head(10)","024aedca":"lasso = Lasso(alpha=0.001)\nlasso.fit(X_train,y_train)\n\ny_train_pred = lasso.predict(X_train)\ny_test_pred = lasso.predict(X_test)\n\nprint(r2_score(y_true=y_train,y_pred=y_train_pred))\nprint(r2_score(y_true=y_test,y_pred=y_test_pred))","f916d9b9":"#FullBath : Full bathrooms above grade\n#BsmtFinSF2 : Type 2 finished square feet\n#WoodDeckSF : Wood deck area in square feet\n#HeatingQC : Heating quality and condition\n#ExterQual : Evaluates the quality of the material on the exterior ","413f184e":"#### Comparing Ridge and Lasso for the best features","0e1f2a21":"#### Now using  RFE  lets try to to find the optimal number of feature","3ef535c2":"## Advanced Regression","68bbc529":"#### Scaling the train dataset","9157a121":"#### Plotting heatmap to check the corellation between varables","449109f8":"## Data dictionary (Legend)\n\nLandContour: Flatness of the property\n\n       Lvl\tNear Flat\/Level\t\n       Bnk\tBanked - Quick and significant rise from street grade to building\n       HLS\tHillside - Significant slope from side to side\n       Low\tDepression\n\t\t\nUtilities: Type of utilities available\n\t\t\n       AllPub\tAll public Utilities (E,G,W,& S)\t\n       NoSewr\tElectricity, Gas, and Water (Septic Tank)\n       NoSeWa\tElectricity and Gas Only\n       ELO\tElectricity only\t\n\t\nLotConfig: Lot configuration\n\n       Inside\tInside lot\n       Corner\tCorner lot\n       CulDSac\tCul-de-sac\n       FR2\tFrontage on 2 sides of property\n       FR3\tFrontage on 3 sides of property\n\t\nLandSlope: Slope of property\n\t\t\n       Gtl\tGentle slope\n       Mod\tModerate Slope\t\n       Sev\tSevere Slope\n\t\nNeighborhood: Physical locations within Ames city limits\n\n       Blmngtn\tBloomington Heights\n       Blueste\tBluestem\n       BrDale\tBriardale\n       BrkSide\tBrookside\n       ClearCr\tClear Creek\n       CollgCr\tCollege Creek\n       Crawfor\tCrawford\n       Edwards\tEdwards\n       Gilbert\tGilbert\n       IDOTRR\tIowa DOT and Rail Road\n       MeadowV\tMeadow Village\n       Mitchel\tMitchell\n       Names\tNorth Ames\n       NoRidge\tNorthridge\n       NPkVill\tNorthpark Villa\n       NridgHt\tNorthridge Heights\n       NWAmes\tNorthwest Ames\n       OldTown\tOld Town\n       SWISU\tSouth & West of Iowa State University\n       Sawyer\tSawyer\n       SawyerW\tSawyer West\n       Somerst\tSomerset\n       StoneBr\tStone Brook\n       Timber\tTimberland\n       Veenker\tVeenker\n\t\t\t\nCondition1: Proximity to various conditions\n\t\n       Artery\tAdjacent to arterial street\n       Feedr\tAdjacent to feeder street\t\n       Norm\tNormal\t\n       RRNn\tWithin 200' of North-South Railroad\n       RRAn\tAdjacent to North-South Railroad\n       PosN\tNear positive off-site feature--park, greenbelt, etc.\n       PosA\tAdjacent to postive off-site feature\n       RRNe\tWithin 200' of East-West Railroad\n       RRAe\tAdjacent to East-West Railroad\n\t\nCondition2: Proximity to various conditions (if more than one is present)\n\t\t\n       Artery\tAdjacent to arterial street\n       Feedr\tAdjacent to feeder street\t\n       Norm\tNormal\t\n       RRNn\tWithin 200' of North-South Railroad\n       RRAn\tAdjacent to North-South Railroad\n       PosN\tNear positive off-site feature--park, greenbelt, etc.\n       PosA\tAdjacent to postive off-site feature\n       RRNe\tWithin 200' of East-West Railroad\n       RRAe\tAdjacent to East-West Railroad\n\t\nBldgType: Type of dwelling\n\t\t\n       1Fam\tSingle-family Detached\t\n       2FmCon\tTwo-family Conversion; originally built as one-family dwelling\n       Duplx\tDuplex\n       TwnhsE\tTownhouse End Unit\n       TwnhsI\tTownhouse Inside Unit\n\t\nHouseStyle: Style of dwelling\n\t\n       1Story\tOne story\n       1.5Fin\tOne and one-half story: 2nd level finished\n       1.5Unf\tOne and one-half story: 2nd level unfinished\n       2Story\tTwo story\n       2.5Fin\tTwo and one-half story: 2nd level finished\n       2.5Unf\tTwo and one-half story: 2nd level unfinished\n       SFoyer\tSplit Foyer\n       SLvl\tSplit Level\n\t\nOverallQual: Rates the overall material and finish of the house\n\n       10\tVery Excellent\n       9\tExcellent\n       8\tVery Good\n       7\tGood\n       6\tAbove Average\n       5\tAverage\n       4\tBelow Average\n       3\tFair\n       2\tPoor\n       1\tVery Poor\n\t\nOverallCond: Rates the overall condition of the house\n\n       10\tVery Excellent\n       9\tExcellent\n       8\tVery Good\n       7\tGood\n       6\tAbove Average\t\n       5\tAverage\n       4\tBelow Average\t\n       3\tFair\n       2\tPoor\n       1\tVery Poor\n\t\t\nYearBuilt: Original construction date\n\nYearRemodAdd: Remodel date (same as construction date if no remodeling or additions)\n\nRoofStyle: Type of roof\n\n       Flat\tFlat\n       Gable\tGable\n       Gambrel\tGabrel (Barn)\n       Hip\tHip\n       Mansard\tMansard\n       Shed\tShed\n\t\t\nRoofMatl: Roof material\n\n       ClyTile\tClay or Tile\n       CompShg\tStandard (Composite) Shingle\n       Membran\tMembrane\n       Metal\tMetal\n       Roll\tRoll\n       Tar&Grv\tGravel & Tar\n       WdShake\tWood Shakes\n       WdShngl\tWood Shingles\n\t\t\nExterior1st: Exterior covering on house\n\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\t\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles\n\t\nExterior2nd: Exterior covering on house (if more than one material)\n\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles\n\t\nMasVnrType: Masonry veneer type\n\n       BrkCmn\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       None\tNone\n       Stone\tStone\n\t\nMasVnrArea: Masonry veneer area in square feet\n\nExterQual: Evaluates the quality of the material on the exterior \n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor\n\t\t\nExterCond: Evaluates the present condition of the material on the exterior\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor\n\t\t\nFoundation: Type of foundation\n\t\t\n       BrkTil\tBrick & Tile\n       CBlock\tCinder Block\n       PConc\tPoured Contrete\t\n       Slab\tSlab\n       Stone\tStone\n       Wood\tWood\n\t\t\nBsmtQual: Evaluates the height of the basement\n\n       Ex\tExcellent (100+ inches)\t\n       Gd\tGood (90-99 inches)\n       TA\tTypical (80-89 inches)\n       Fa\tFair (70-79 inches)\n       Po\tPoor (<70 inches\n       NA\tNo Basement\n\t\t\nBsmtCond: Evaluates the general condition of the basement\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical - slight dampness allowed\n       Fa\tFair - dampness or some cracking or settling\n       Po\tPoor - Severe cracking, settling, or wetness\n       NA\tNo Basement\n\t\nBsmtExposure: Refers to walkout or garden level walls\n\n       Gd\tGood Exposure\n       Av\tAverage Exposure (split levels or foyers typically score average or above)\t\n       Mn\tMimimum Exposure\n       No\tNo Exposure\n       NA\tNo Basement\n\t\nBsmtFinType1: Rating of basement finished area\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement\n\t\t\nBsmtFinSF1: Type 1 finished square feet\n\nBsmtFinType2: Rating of basement finished area (if multiple types)\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement\n\nBsmtFinSF2: Type 2 finished square feet\n\nBsmtUnfSF: Unfinished square feet of basement area\n\nTotalBsmtSF: Total square feet of basement area\n\nHeating: Type of heating\n\t\t\n       Floor\tFloor Furnace\n       GasA\tGas forced warm air furnace\n       GasW\tGas hot water or steam heat\n       Grav\tGravity furnace\t\n       OthW\tHot water or steam heat other than gas\n       Wall\tWall furnace\n\t\t\nHeatingQC: Heating quality and condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor\n\t\t\nCentralAir: Central air conditioning\n\n       N\tNo\n       Y\tYes\n\t\t\nElectrical: Electrical system\n\n       SBrkr\tStandard Circuit Breakers & Romex\n       FuseA\tFuse Box over 60 AMP and all Romex wiring (Average)\t\n       FuseF\t60 AMP Fuse Box and mostly Romex wiring (Fair)\n       FuseP\t60 AMP Fuse Box and mostly knob & tube wiring (poor)\n       Mix\tMixed\n\t\t\n1stFlrSF: First Floor square feet\n \n2ndFlrSF: Second floor square feet\n\nLowQualFinSF: Low quality finished square feet (all floors)\n\nGrLivArea: Above grade (ground) living area square feet\n\nBsmtFullBath: Basement full bathrooms\n\nBsmtHalfBath: Basement half bathrooms\n\nFullBath: Full bathrooms above grade\n\nHalfBath: Half baths above grade\n\nBedroom: Bedrooms above grade (does NOT include basement bedrooms)\n\nKitchen: Kitchens above grade\n\nKitchenQual: Kitchen quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       \t\nTotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n\nFunctional: Home functionality (Assume typical unless deductions are warranted)\n\n       Typ\tTypical Functionality\n       Min1\tMinor Deductions 1\n       Min2\tMinor Deductions 2\n       Mod\tModerate Deductions\n       Maj1\tMajor Deductions 1\n       Maj2\tMajor Deductions 2\n       Sev\tSeverely Damaged\n       Sal\tSalvage only\n\t\t\nFireplaces: Number of fireplaces\n\nFireplaceQu: Fireplace quality\n\n       Ex\tExcellent - Exceptional Masonry Fireplace\n       Gd\tGood - Masonry Fireplace in main level\n       TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n       Fa\tFair - Prefabricated Fireplace in basement\n       Po\tPoor - Ben Franklin Stove\n       NA\tNo Fireplace\n\t\t\nGarageType: Garage location\n\t\t\n       2Types\tMore than one type of garage\n       Attchd\tAttached to home\n       Basment\tBasement Garage\n       BuiltIn\tBuilt-In (Garage part of house - typically has room above garage)\n       CarPort\tCar Port\n       Detchd\tDetached from home\n       NA\tNo Garage\n\t\t\nGarageYrBlt: Year garage was built\n\t\t\nGarageFinish: Interior finish of the garage\n\n       Fin\tFinished\n       RFn\tRough Finished\t\n       Unf\tUnfinished\n       NA\tNo Garage\n\t\t\nGarageCars: Size of garage in car capacity\n\nGarageArea: Size of garage in square feet\n\nGarageQual: Garage quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage\n\t\t\nGarageCond: Garage condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage\n\t\t\nPavedDrive: Paved driveway\n\n       Y\tPaved \n       P\tPartial Pavement\n       N\tDirt\/Gravel\n\t\t\nWoodDeckSF: Wood deck area in square feet\n\nOpenPorchSF: Open porch area in square feet\n\nEnclosedPorch: Enclosed porch area in square feet\n\n3SsnPorch: Three season porch area in square feet\n\nScreenPorch: Screen porch area in square feet\n\nPoolArea: Pool area in square feet\n\nPoolQC: Pool quality\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       NA\tNo Pool\n\t\t\nFence: Fence quality\n\t\t\n       GdPrv\tGood Privacy\n       MnPrv\tMinimum Privacy\n       GdWo\tGood Wood\n       MnWw\tMinimum Wood\/Wire\n       NA\tNo Fence\n\t\nMiscFeature: Miscellaneous feature not covered in other categories\n\t\t\n       Elev\tElevator\n       Gar2\t2nd Garage (if not described in garage section)\n       Othr\tOther\n       Shed\tShed (over 100 SF)\n       TenC\tTennis Court\n       NA\tNone\n\t\t\nMiscVal: $Value of miscellaneous feature\n\nMoSold: Month Sold (MM)\n\nYrSold: Year Sold (YYYY)\n\nSaleType: Type of sale\n\t\t\n       WD \tWarranty Deed - Conventional\n       CWD\tWarranty Deed - Cash\n       VWD\tWarranty Deed - VA Loan\n       New\tHome just constructed and sold\n       COD\tCourt Officer Deed\/Estate\n       Con\tContract 15% Down payment regular terms\n       ConLw\tContract Low Down payment and low interest\n       ConLI\tContract Low Interest\n       ConLD\tContract Low Down\n       Oth\tOther\n\t\t\nSaleCondition: Condition of sale\n\n       Normal\tNormal Sale\n       Abnorml\tAbnormal Sale -  trade, foreclosure, short sale\n       AdjLand\tAdjoining Land Purchase\n       Alloca\tAllocation - two linked properties with separate deeds, typically condo with a garage unit\t\n       Family\tSale between family members","07c2cc67":"#### We will try to convert the Year columns with the age from when it was built (instead of having a year which as a value can't be measure easily","5c22acb8":"#### Checking the dataset for the amount of nulls present","fdcb008a":"#### Handling the outliers by taking the lower and upper quantile as 0.25 & 0.99 respectively","cc5da668":"#### Creating and adding dummy column with the dataset","1f5b9134":"#### Imputing missing value","3d8197e7":"#### Removing the id column","19417bd2":"#### Improving our model with the optimal value of alpha using GridSearchCV","b588c289":"#### Importing all the libraries","b7b7fe91":"Please find the Data dictionary(legend) in the end of this notebook","1e9f1ca9":"#### Considering 10 percent as my threshold and dropping the column having more missing values than 10 percent","66f7816b":"## Final Model","7677a756":"#### Creating train and test dataset for validation purpose","1af43e5f":"#### Checking the distribution of the target variable again after scaling","1788ba72":"#### The distribution of our target variable before Scaling","799dc788":"#### Dropping the earlier Year columns\n","e7a09ac2":" After creating model in both Ridge and Lasso we can see that the r2_scores are almost same for both of them but as lasso will penalize more on the dataset and can also help in feature elimination-> Final model.","c21e0452":"## Lasso regression model","dd2a1a81":"Filtering the train and test set for the RFE selected columns","06cb8459":"#### Spliting the dependent and independent variable","81c3b590":"#### Graphical Analysis","f69c2ec1":"*Regression done linearly but gives a basic understanding of the regularisation using Lasso and Ridge*","c9f97b29":"## Ridge regression","11c9abcc":"#### Best alpha value for Lasso : {'alpha': 0.001}","a22c22f1":"#### As we can see the above alpha value is not optimal for ridge - there are sign of overfitting the clear difference we can see in the train and test score\n\n#### Trying to improve our model with the optimal value of alpha using GridSearchCV","188dce41":"#### Best alpha value for Ridge : {'alpha': 0.9}"}}