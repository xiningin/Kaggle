{"cell_type":{"a4995f60":"code","c58a6dd3":"code","b4a29ed7":"code","bc6e426e":"code","a26b16a6":"code","acf00ed0":"code","dc52dcfd":"code","d265c53a":"code","5acc0c0b":"code","61e94310":"code","cb1226f1":"code","ee809b6e":"code","3a7d53a5":"code","313627eb":"code","5225d361":"code","3e1e5259":"code","2c267020":"code","0f4faafb":"code","1bc74bc5":"code","68c40938":"code","692819f5":"code","dee3d46b":"code","3e3cb2e8":"code","4324d06e":"code","46c7aa5e":"markdown","16d2bb4c":"markdown","4597b0b9":"markdown","7a913656":"markdown","59187782":"markdown","1b478ab2":"markdown","061f789e":"markdown","7328eae6":"markdown","5fe11aeb":"markdown","5ac8f580":"markdown"},"source":{"a4995f60":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pylab as pl\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge, BayesianRidge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import accuracy_score\nfrom time import time\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c58a6dd3":"df = pd.read_csv('..\/input\/dataset_fixed.csv')\ndf.head()","b4a29ed7":"df.info()","bc6e426e":"df['timestamp'] = pd.to_datetime(df['timestamp'],unit='s')","a26b16a6":"df = df.dropna()\ndf.isnull().sum()","acf00ed0":"df.info()","dc52dcfd":"df.describe()","d265c53a":"df['hours'] = df['timestamp'].dt.hour\ndf = df.drop(['id', 'timestamp'], axis=1)\ndf.head()","5acc0c0b":"sns.heatmap(df.corr(), annot=True)","61e94310":"for column in df.columns:\n    q1 = df[column].quantile(0.25)\n    q3 = df[column].quantile(0.75)\n    iqr = q3-q1 #Interquartile range\n    fence_low  = q1-1.5*iqr\n    fence_high = q3+1.5*iqr\n    df = df.loc[(df[column] > fence_low) & (df[column] < fence_high)]","cb1226f1":"df.describe()","ee809b6e":"df.hist(bins=30, figsize=(15,8))","3a7d53a5":"sns.heatmap(df.corr(), annot=True)","313627eb":"dummies = pd.get_dummies(df[\"node\"], prefix=\"node\")\ndf = pd.concat([df.drop(\"node\", axis=1), dummies], axis=1)\ndf.head()","5225d361":"std_scaler = StandardScaler()\ndf_numeric = df.drop([\"node_0\", \"node_1\", \"node_9\"], axis=1)\ndf_numeric_scaled = pd.DataFrame(std_scaler.fit_transform(df_numeric), columns=df_numeric.columns)\ndf_numeric_scaled.head()","3e1e5259":"df_category = df.drop(['co2', 'temp', 'humidity', 'light', 'hours'], axis=1).reset_index().drop(['index'], axis=1)\ndf_category.head()","2c267020":"df_new = pd.concat([df_numeric_scaled, df_category], sort=False, axis=1)\ndf_new.head()","0f4faafb":"X = df.drop(['humidity'], axis=1)\ny = df['humidity']\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=100, test_size=0.3)\nprint(\"Ukuran data training {}, data testing {}\".format(X_train.shape, X_test.shape))","1bc74bc5":"linreg = LinearRegression()\ntime_start = time()\nlinreg.fit(X_train, y_train)\ntime_end = time()\naccuracy = linreg.score(X_test, y_test)\nprint('LinearRegression accuracy:', accuracy)\nprint('Time:', time_end-time_start)","68c40938":"ridged = Ridge()\ntime_start = time()\nlinreg.fit(X_train, y_train)\ntime_end = time()\naccuracy = linreg.score(X_test, y_test)\nprint('Ridge accuracy:', accuracy)\nprint('Time:', time_end-time_start)","692819f5":"lasso = Lasso()\ntime_start = time()\nlasso.fit(X_train, y_train)\ntime_end = time()\naccuracy = lasso.score(X_test, y_test)\nprint('Lasso accuracy:', accuracy)\nprint('Time:', time_end-time_start)","dee3d46b":"bayesian = BayesianRidge()\ntime_start = time()\nbayesian.fit(X_train, y_train)\ntime_end = time()\naccuracy = bayesian.score(X_test, y_test)\nprint('BayesianRidge accuracy:', accuracy)\nprint('Time:', time_end-time_start)","3e3cb2e8":"dtr = DecisionTreeRegressor()\ntime_start = time()\ndtr.fit(X_train, y_train)\ntime_end = time()\naccuracy = dtr.score(X_test, y_test)\nprint('DecisionTreeRegressor accuracy:', accuracy)\nprint('Time:', time_end-time_start)","4324d06e":"rf = RandomForestRegressor()\ntime_start = time()\nrf.fit(X_train, y_train)\ntime_end = time()\naccuracy = rf.score(X_test, y_test)\nprint('RandomForestRegressor accuracy:', accuracy)\nprint('Time:', time_end-time_start)","46c7aa5e":"## Mentransformasikan data numeric dengan StandardScaler","16d2bb4c":"## Menambah feature baru (jam) dan mengurangi feature id dan timestamp","4597b0b9":"## Splitting data training dan testing","7a913656":"## Drop data yang null","59187782":"## Metode Machine Learning","1b478ab2":"## Membaca data dan menampilkan deskripsi dan statistik data","061f789e":"## Melihat korelasi data","7328eae6":"## Melakukan drop data outlier","5fe11aeb":"## Membuat data dummy node","5ac8f580":"## Mengubah timestamp integer menjadi datetime64"}}