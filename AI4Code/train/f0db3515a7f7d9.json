{"cell_type":{"c29c45a8":"code","f038f695":"code","6cf25e75":"code","bc571217":"code","2566bab6":"code","d723ca2f":"code","ffaab8be":"code","01294533":"code","0dedd1a8":"code","17d95f97":"code","7d58ae00":"code","59f5030b":"code","268cf22b":"code","422dd456":"code","40bb4eff":"code","f8d2e161":"code","694fc167":"code","0cbb632d":"code","73858121":"code","0a10cfdd":"code","6002ee36":"code","3c7579f2":"code","ef22a8fa":"code","39e926ec":"code","de1c576b":"code","db0d0931":"code","20391f9b":"code","cf0fdb43":"code","b17c7fb8":"code","69d33a40":"code","9b6caab3":"markdown","e25289f7":"markdown","c678a1d2":"markdown","0e8284b5":"markdown","3ffcbca0":"markdown","28b34c3c":"markdown","39c3aae3":"markdown","5d89eabc":"markdown","d8c8dd16":"markdown"},"source":{"c29c45a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f038f695":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/train.csv', index_col='id')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/test.csv', index_col='id')","6cf25e75":"train.columns","bc571217":"train.isna().mean()","2566bab6":"test.isna().mean()","d723ca2f":"from torch.distributions import Categorical, Normal, kl_divergence\nfrom torch import from_numpy\ndef kl_train_test(train, test):\n    result = {}\n    for c in test.columns:\n        if c.startswith('cat'):\n            train_d = train[c].value_counts() \/ len(train)\n            test_d = test[c].value_counts() \/ len(test)\n            for cat in train_d.index:\n                if cat not in test_d.index:\n                    test_d[cat] = 0.0\n            for cat in test_d.index:\n                if cat not in train_d.index:\n                    train_d[cat] = 0.0\n            train_d = Categorical(from_numpy(train_d.values))\n            test_d = Categorical(from_numpy(test_d.values))\n            result[c] = kl_divergence(train_d, test_d).item()\n        elif c.startswith('cont'):\n            train_d = Normal(train[c].mean(), train[c].std())\n            test_d = Normal(test[c].mean(), test[c].std())\n            result[c] = kl_divergence(train_d, test_d).item()\n    return result","ffaab8be":"kl_train_test(train, test)","01294533":"from pandas_profiling import ProfileReport\n\np = ProfileReport(train)\n\np.to_file('train_report.html')\np","0dedd1a8":"def preprocessing(df):\n    catcols = df.columns[df.columns.str.startswith('cat')]\n    df[catcols] = df[catcols].astype('category')\n    for c in catcols:\n        df[c] = df[c].cat.codes\n    df = df.drop(columns='cat10') #infinite kl divergence\n    return df","17d95f97":"train = preprocessing(train)\ntest = preprocessing(test)","7d58ae00":"train.head()","59f5030b":"test.head()","268cf22b":"val_mode = False","422dd456":"X_train, y_train = train.drop(columns='target'), train['target']","40bb4eff":"from sklearn.model_selection import train_test_split","f8d2e161":"if val_mode:\n    if len(X_train) == 300000:\n        X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.3)\n    else:\n        print('skipped multiple split')","694fc167":"from sklearn.ensemble import RandomForestClassifier","0cbb632d":"rf = RandomForestClassifier(max_depth=30)","73858121":"rf.fit(X_train, y_train)","0a10cfdd":"if val_mode:\n    y_pred_train = rf.predict(X_train)\n    y_pred_val = rf.predict(X_val)\n    plot_roc_curve(rf, X_train, y_train)\n    plot_roc_curve(rf, X_val, y_val)","6002ee36":"y_prob_test = rf.predict_proba(test)","3c7579f2":"output = pd.DataFrame({'id': test.index, 'target': y_prob_test[:, 1]})\noutput.to_csv('rf_prediction.csv', index=False)","ef22a8fa":"output.head()","39e926ec":"!pip install pytorch-tabnet","de1c576b":"from pytorch_tabnet.tab_model import TabNetClassifier","db0d0931":"cat_indexes = [i for i, col in enumerate(X_train.columns) if col.startswith('cat')]","20391f9b":"tabnet = TabNetClassifier(cat_idxs=cat_indexes)","cf0fdb43":"tabnet.fit(X_train.values, y_train.values, max_epochs=100)","b17c7fb8":"y_prob_test = tabnet.predict_proba(test.values)","69d33a40":"output = pd.DataFrame({'id': test.index, 'target': y_prob_test[:, -1]})\noutput.to_csv('tabnet_prediction.csv', index=False)","9b6caab3":"Conclusion: Remove cat10 because kl is infinite","e25289f7":"# Test Prediction","c678a1d2":"# Extra: try TabNet (NN with transformer architecture)\n* Paper link: https:\/\/arxiv.org\/pdf\/1908.07442.pdf\n* Implementation link: https:\/\/github.com\/dreamquark-ai\/tabnet","0e8284b5":"# Preprocessing fn\nUnique function for both train and test to avoid as much as possible discrepancy between train\/test","3ffcbca0":"## Train-test Discrepancy\nCheck discrepancy between train and test using [KL divercence](https:\/\/en.wikipedia.org\/wiki\/Kullback%E2%80%93Leibler_divergence) on predictor variables. Specifically to calculate KL Divergence:\n* Treat categorical variables like Multinomial distributed\n* Treat continuos variables like Normal distributed","28b34c3c":"# RF Training","39c3aae3":"## Check Missing Values","5d89eabc":"## Train overview with pandas profiling","d8c8dd16":"* Numerical are already scaled, some are normal distributed other no\n* There are some high cardinality categorical columns"}}