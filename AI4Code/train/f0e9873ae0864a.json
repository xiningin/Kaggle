{"cell_type":{"33b40fc7":"code","cc166a9b":"code","91e911ec":"code","99fa8314":"code","bc4a933e":"code","2f306c1e":"code","19c34bf7":"markdown","60c8fc54":"markdown"},"source":{"33b40fc7":"import numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nimport sklearn\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nfrom sklearn.linear_model import Ridge, Lasso\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom random import random, seed \nfrom sklearn.pipeline import make_pipeline\nimport matplotlib.pyplot as plt \nimport ipywidgets as widgets\nfrom IPython.display import display\n%matplotlib inline","cc166a9b":"data=pd.read_csv(\"\/kaggle\/input\/corona-virus-in-norway\/coronaNorway.csv\")","91e911ec":"def get_data(days,infected):\n    X=days\n    y=infected\n    X=np.asarray(X)\n    y=np.asarray(y)\n    X=X.reshape(-1,1)\n    y=y.reshape(-1,1)\n    return X,y\n\ndef PolynomialRidge(pol,alphafactor, **kwargs):\n    return make_pipeline(PolynomialFeatures(degree=pol),\n                         Ridge(**kwargs, alpha=alphafactor))\n\ndef PolynomialLasso(pol,alphafactor, **kwargs):\n    return make_pipeline(PolynomialFeatures(degree=pol),\n                         Lasso(**kwargs, alpha=alphafactor))\n\ndef PolynomialRegression(pol, **kwargs):\n    return make_pipeline(PolynomialFeatures(degree=pol),\n                         LinearRegression(**kwargs))\n\ndef fit_lasso_model(pol,X,y,alphafactor):\n    lassomodel = PolynomialLasso(pol,alphafactor)\n    lassomodel.fit(X,y)\n    return lassomodel\n\ndef fit_ridge_model(pol,X,y,alphafactor):\n    ridgemodel = PolynomialRidge(pol,alphafactor)\n    ridgemodel.fit(X,y)\n    return ridgemodel\n\ndef fit_reg_model(pol,X,y):\n    regmodel = PolynomialRegression(pol)\n    regmodel.fit(X,y)\n    return regmodel\n    \ndef create_test_data(start_day, end_day,steps):\n    X_test=np.linspace(start_day, end_day, steps)[:, None]\n    return X_test\n\ndef ridge_pred(ridgemodel,X_test):\n    y_test = ridgemodel.predict(X_test)\n    return X_test,y_test\n\ndef lasso_pred(lassomodel, X_test):\n    y_test = lassomodel.predict(X_test)\n    return X_test,y_test\n\ndef reg_pred(regmodel, X_test):\n    y_test = regmodel.predict(X_test)\n    return X_test,y_test","99fa8314":"def execute_ridge_model(days,infected,pol,alphafactor,start_test,end_test,steps):\n    X , y = get_data(days,infected)\n    ridgemodel = fit_ridge_model(pol,X,y,alphafactor)\n    X_test, y_test = ridge_pred(ridgemodel,create_test_data(start_test,end_test,steps))\n    return X , y , X_test , y_test, ridgemodel\n\ndef execute_lasso_model(days,infected,pol,alphafactor,start_test,end_test,steps):\n    X , y = get_data(days,infected)\n    lassomodel = fit_lasso_model(pol,X,y,alphafactor)\n    X_test, y_test = lasso_pred(lassomodel,create_test_data(start_test,end_test,steps))\n    return X , y , X_test , y_test, lassomodel\n\ndef execute_reg_model(days,infected,pol,start_test,end_test,steps):\n    X , y = get_data(days,infected)\n    regmodel = fit_reg_model(pol,X,y)\n    X_test, y_test = reg_pred(regmodel,create_test_data(start_test,end_test,steps))\n    return X , y , X_test , y_test, regmodel","bc4a933e":"def plot_pred(X,y,X_test,y_test,model):\n    plt.style.use('ggplot')\n    mse=mean_squared_error(model.predict(X), y)\n    r2=r2_score(model.predict(X),y)\n    print (\"{} mean Square Error: \".format(model.get_params().get('steps')[1][0]),mse)\n    print (\"{} R2-score: \".format(model.get_params().get('steps')[1][0]),r2 )\n    print('Mean absolute error: %.2f' % mean_absolute_error(model.predict(X), y))\n    print (\"------------------------------------\")\n    plt.plot(X_test.ravel(), y_test, color='C1',label='predicted')\n    plt.plot(X,y, 'ro', label='infected', color='C7')\n    plt.xlabel(r'$x$') #Setter navn p\u00e5 x-akse\n    plt.ylabel(r'$y$')\n    plt.ylim(bottom=0)\n    plt.title(r' {}model - {}.order polynomial, alpha = {}'.format(model.get_params().get('steps')[1][0],model.get_params().get('steps')[0][1].get_params().get('degree'),model.get_params().get('steps')[1][1].get_params().get('alpha')))\n    plt.legend()\n","2f306c1e":"w = widgets.IntSlider(\n    value=5,\n    min=0,\n    max=10,\n    step=1,\n    description='Polynom:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='d'\n)\nv = widgets.FloatSlider(\n    value=0.7,\n    min=0,\n    max=1.0,\n    step=0.1,\n    description='Alpha:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='.1f',\n)\no = widgets.IntSlider(\n    value=4,\n    min=0,\n    max=10,\n    step=1,\n    description='Polynom:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='d'\n)\np = widgets.FloatSlider(\n    value=0.2,\n    min=0,\n    max=1.0,\n    step=0.1,\n    description='Alpha:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='.1f',\n)\nq = widgets.IntSlider(\n    value=3,\n    min=0,\n    max=10,\n    step=1,\n    description='Polynom:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='d'\n)\ns = widgets.IntSlider(\n    value=0,\n    min=0,\n    max=100,\n    step=1,\n    description='Start test set',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='d'\n)\ne = widgets.IntSlider(\n    value=50,\n    min=0,\n    max=100,\n    step=1,\n    description='End test set',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='d'\n)\nprint(\"Ridge Parameters:\")\ndisplay(w)\ndisplay(v)\nprint(\"Lasso Parameters:\")\ndisplay(o)\ndisplay(p)\nprint(\"Polynomial Regression Parameters:\")\ndisplay(q)\nprint(\"Test set:\")\ndisplay(s)\ndisplay(e)\n\nbutton = widgets.Button(description=\"Run prediction\")\noutput = widgets.Output()\n\ndisplay(button, output)\n\ndef on_button_clicked(b):\n    with output:\n        X_r,y_r,X_test_r,y_test_r,ridgemodel = execute_ridge_model(data.iloc[0:,0],data['Infected'],int(w.value),float(v.value),int(s.value),int(e.value),int(e.value)-int(s.value))\n        fig = plt.figure(figsize=(30,5))\n        fig.add_subplot(131)\n        plot_pred(X_r,y_r,X_test_r,y_test_r,ridgemodel)\n        \n        \n        X_l,y_l,X_test_l,y_test_l,lassomodel = execute_lasso_model(data.iloc[0:,0],data['Infected'],int(o.value),float(p.value),int(s.value),int(e.value),int(e.value)-int(s.value))\n        fig.add_subplot(132)\n        plot_pred(X_l,y_l,X_test_l,y_test_l,lassomodel)\n        \n        X_r,y_r,X_test_r,y_test_r,regmodel = execute_reg_model(data.iloc[0:,0],data['Infected'],int(q.value),int(s.value),int(e.value),int(e.value)-int(s.value))\n        fig.add_subplot(133)\n        plot_pred(X_r,y_r,X_test_r,y_test_r,regmodel)\n        plt.suptitle(\"Regression methods for predicting Corona Virus in Norway\",fontsize=18 )\n        plt.show()\n        \n        %matplotlib inline\n\nbutton.on_click(on_button_clicked)","19c34bf7":"<section data-markdown>\n    <img src=\"https:\/\/www.uio.no\/bilder\/corona-cdc-970.jpg\"\/>\n<\/section>","60c8fc54":"# <center>Corona virus in Norway<\/center>"}}