{"cell_type":{"032d0af2":"code","c2bf5fad":"code","d18f4b6d":"code","4fafd939":"code","a044defd":"code","30d3955d":"code","9f81ed17":"code","7115aee0":"code","6aec7535":"code","5aab20fb":"code","d12b98e0":"code","9de842ce":"code","b6fec159":"code","627e6de2":"code","e06697ab":"code","2310662b":"code","b9a8e8d8":"code","3a6f10db":"code","9c0d3723":"code","94fc2136":"code","e7a6e13d":"code","9499bd18":"code","262a0767":"code","7dae80a2":"code","9feff61e":"code","c27849d0":"code","6fed65ec":"code","1ade3c43":"code","4413b1ae":"code","a6a94ca4":"code","ca0896a5":"code","5fc82ba6":"code","58b16f5f":"code","3fb1de60":"code","470cb95a":"code","7167affd":"code","1854ab3d":"code","6b20a9b2":"code","8e1ccb4c":"code","f0642123":"code","45109739":"code","597df271":"code","a1af4098":"code","6e16780b":"code","1eb82685":"code","765dc1a9":"code","d90bc03c":"code","9b642031":"code","4b5dbc05":"code","9b63cb91":"code","e78b9e87":"code","63a43f2c":"code","ea92737d":"code","e87ab65a":"code","d22851d3":"code","89e878fe":"code","5e803996":"code","a86ab1b3":"code","ded75377":"code","8a02af02":"code","6e9db012":"code","28f8f350":"code","7ad6138d":"code","ab5dae07":"code","892ebb3f":"code","e14a09e1":"code","92830447":"code","214b6db2":"code","cbbca405":"code","86a8a0b0":"code","37be0f18":"code","85ba2daa":"code","ed684fd9":"code","089e5ee2":"markdown","82752322":"markdown","b22be4cb":"markdown"},"source":{"032d0af2":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 100)\n","c2bf5fad":"df = pd.read_csv('..\/input\/big-mart-sales-prediction\/Train.csv')","d18f4b6d":"df.head(100)","4fafd939":"df.shape","a044defd":"# total unique items \nlen(df['Item_Identifier'].unique())","30d3955d":"# total unique outlets\ndf['Outlet_Type'].value_counts()","9f81ed17":"df.corr()","7115aee0":"# item sales in each of outlets\npd.concat([df['Outlet_Identifier'].loc[df['Item_Identifier']=='DRC01'],\n          df['Item_Outlet_Sales'].loc[df['Item_Identifier']=='DRC01']],\n          axis=1).reset_index()","6aec7535":"df.isnull().sum()","5aab20fb":"df.Item_Fat_Content.unique()","d12b98e0":"# replace all the NaN\/Null values using mean\/mode.\ndf['Item_Weight'] = df['Item_Weight'].fillna(df['Item_Weight'].mean())\ndf['Outlet_Size'] = df['Outlet_Size'].fillna(df['Outlet_Size'].mode()[0])","9de842ce":"df.isnull().sum()","b6fec159":"# convert Outlet_Establishment_Year into number of year it has been established.\ndf['Outlet_Establishment_Year'] = 2020 - df['Outlet_Establishment_Year']\ndf = df.rename({'Outlet_Establishment_Year': 'No_Of_Years'}, axis=1)","627e6de2":"df.head(10)","e06697ab":"df['No_Of_Years'].corr(df['Item_Outlet_Sales'])","2310662b":"df.shape","b9a8e8d8":"df.columns","3a6f10db":"test_df = pd.read_csv('..\/input\/big-mart-sales-prediction\/Test.csv')","9c0d3723":"test_df.head()","94fc2136":"test_df.shape","e7a6e13d":"test_df.isnull().sum()","9499bd18":"# replace all the NaN\/Null values using mean\/mode.\ntest_df['Item_Weight'] = test_df['Item_Weight'].fillna(test_df['Item_Weight'].mean())\ntest_df['Outlet_Size'] = test_df['Outlet_Size'].fillna(test_df['Outlet_Size'].mode()[0])","262a0767":"test_df.isnull().sum()","7dae80a2":"# convert Outlet_Establishment_Year into number of year it has been established.\ntest_df['Outlet_Establishment_Year'] = 2020 - test_df['Outlet_Establishment_Year']\ntest_df = test_df.rename({'Outlet_Establishment_Year': 'No_Of_Years'}, axis=1)","9feff61e":"combined_df = pd.concat([df, test_df], axis=0, sort=False)","c27849d0":"combined_df.head()","6fed65ec":"categorical_columns = ['Item_Fat_Content',\n       'Item_Type', 'Outlet_Identifier',\n       'Outlet_Size', 'Outlet_Location_Type',\n       'Outlet_Type', 'No_Of_Years']\n\ndef category_onehot_multcols(multcolumns):\n    #df_final = combined_df\n    i = 0\n    for fields in multcolumns:\n    \n        df1 = pd.get_dummies(combined_df[fields], drop_first=True)\n        \n        combined_df.drop([fields], axis=1, inplace=True)\n        if i==0:\n            df_final = df1.copy()\n        else:\n            df_final = pd.concat([df_final, df1], axis=1)\n        i=i+1\n    \n    df_final = pd.concat([combined_df, df_final], axis=1)\n\n    return df_final\n\ncombined_df = category_onehot_multcols(categorical_columns)","1ade3c43":"combined_df.shape\n","4413b1ae":"combined_df.head()","a6a94ca4":"combined_df.drop(['Item_Identifier'], axis=1, inplace=True)","ca0896a5":"combined_df.head()","5fc82ba6":"scaler = MinMaxScaler()","58b16f5f":"Item_Outlet_Sales_df = combined_df['Item_Outlet_Sales']","3fb1de60":"combined_df.drop(['Item_Outlet_Sales'], axis=1, inplace=True)","470cb95a":"columns = combined_df.columns","7167affd":"columns","1854ab3d":"combined_df.head()","6b20a9b2":"combined_df = scaler.fit_transform(combined_df)","8e1ccb4c":"combined_df","f0642123":"combined_df = pd.DataFrame(combined_df,columns=columns)","45109739":"combined_df.head()","597df271":"# divide train and test data\ndf_train = combined_df.iloc[:8523, :]\ndf_test = combined_df.iloc[8523:, :]","a1af4098":"df_train.shape","6e16780b":"df_test.shape","1eb82685":"X = df_train\ny = Item_Outlet_Sales_df[:8523]","765dc1a9":"X_test = df_test\n","d90bc03c":"X.shape","9b642031":"y.shape","4b5dbc05":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.20, random_state = 42)","9b63cb91":"# defining a function which calculates details of each algorithm\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\n\n\ndef model_details(model, alg_name):\n    y_pred = model.predict(X_val)\n    rmse = np.sqrt(mean_squared_error(y_val, y_pred))\n    acc = round(model.score(X_val, y_val)*100, 2)\n    cvs = cross_val_score(model, X_val, y_val, cv=5)\n    mean = round(cvs.mean()*100, 2)\n    std = round(cvs.std()*2, 2)\n    print('Model Report')\n    print('Accuracy of {}: {}%'.format(alg_name, acc))\n    print('RMSE Value: ', round(rmse, 2))\n    print('Cross Validation Score: Mean - {} | Std - {}'.format(mean, std))\n    ","e78b9e87":"!pip install xgboost\nimport xgboost\nregressor = xgboost.XGBRegressor()","63a43f2c":"n_estimators = [100, 500, 900, 1100, 1500]\nmax_depth = [2, 3, 5, 10, 15]\nbooster = ['gbtree', 'gblinear']\nlearning_rate = [0.05,0.1,0.15,0.20]\nmin_child_weight = [1,2,3,4]\nbase_score = [0.25, 0.5, 0.75, 1]\n\n# define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators' : n_estimators,\n    'max_depth' : max_depth,\n    'learning_rate' : learning_rate,\n    'min_child_weight' : min_child_weight,\n    'booster' : booster,\n    'base_score' : base_score\n}","ea92737d":"# set up the random search with 4-fold cross validation\nfrom sklearn.model_selection import RandomizedSearchCV\nrandom_cv = RandomizedSearchCV(estimator=regressor,\n                              param_distributions=hyperparameter_grid,\n                              cv=5, n_iter=50,\n                              scoring = 'neg_mean_absolute_error', n_jobs=4,\n                              verbose=5,\n                              return_train_score = True,\n                              random_state  = 42)","e87ab65a":"#random_cv.fit(X_train, y_train)","d22851d3":"#random_cv.best_estimator_","89e878fe":"regressor = xgboost.XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=0.1, max_delta_step=0, max_depth=2,\n             min_child_weight=1, missing=None, monotone_constraints='()',\n             n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method='exact', validate_parameters=1, verbosity=None)","5e803996":"regressor.fit(X_train, y_train)","a86ab1b3":"model_details(regressor, 'XGBoost')","ded75377":"X_test.shape","8a02af02":"y_pred = regressor.predict(X_test)\ny_pred","6e9db012":"x=list(y_pred)\nx[30]","28f8f350":"from sklearn.ensemble import RandomForestRegressor\nrf_random = RandomForestRegressor()","7ad6138d":"### hyperparameters \n\n# number of trees in random forrest\nn_estimators = [int(x) for x in np.linspace(start=100, stop=1200, num=12)]\n\n# number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n\n# maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num=6)]\n\n# minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15, 100]\n\n# minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 5, 10]","ab5dae07":"# create the random grid\nrandom_grid = {\n                'n_estimators' : n_estimators,\n                'max_features' : max_features,\n                'max_depth' : max_depth,\n                'min_samples_split' : min_samples_split,\n                'min_samples_leaf' : min_samples_leaf\n}","892ebb3f":"rf = RandomForestRegressor()","e14a09e1":"from sklearn.model_selection import RandomizedSearchCV\n\nrf_random = RandomizedSearchCV(\n        estimator = rf, \n        param_distributions = random_grid,\n        scoring = 'neg_mean_squared_error',\n        n_iter = 10,\n        cv = 5,\n        verbose = 2,\n        random_state = 42,\n        n_jobs = 1\n)","92830447":"rf_random.fit(X_train, y_train)","214b6db2":"model_details(rf_random, 'Random Forest')","cbbca405":"X_test.shape","86a8a0b0":"y_pred = rf_random.predict(X_test)\ny_pred","37be0f18":"pred = pd.DataFrame(y_pred)\n\nsub = pd.read_csv('..\/input\/big-mart-sales-prediction\/Submission.csv')\n\nsub['Item_Outlet_Sales'] = pred\nsub.to_csv('submission_rf.csv', index=False)\n","85ba2daa":"sub[sub['Item_Outlet_Sales'] < 0]","ed684fd9":"sub","089e5ee2":"# XGBOOST IMPLEMENTATION !","82752322":"# RANDOM FOREST IMPLEMENTATION !","b22be4cb":"# Writing To The Submission File !"}}