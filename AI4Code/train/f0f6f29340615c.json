{"cell_type":{"ca786a2c":"code","6c69533d":"code","b747a460":"code","7bc77e18":"code","9f1655f4":"code","9ba89f7d":"code","d9785f85":"code","a7751e87":"code","53277e1a":"code","107ad4f3":"code","4895c2d9":"code","cd12a8b3":"code","0f82b322":"code","d8e8c708":"code","fcd59bfb":"code","a8ac128e":"code","c3919a28":"code","bad64fdb":"code","831a581d":"code","04349d3f":"code","d40f42df":"code","4889c178":"markdown","e4cfd87c":"markdown","1e8578d4":"markdown"},"source":{"ca786a2c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n\ntrainingDataset = pd.read_csv(\"..\/input\/train_LoanPrediction.csv\")\ntestingDataset = pd.read_csv(\"..\/input\/test_LoanPrediction.csv\")\nprint (trainingDataset.head())\ncombined = pd.concat([trainingDataset, testingDataset],ignore_index=True, sort=False)\nprint (combined.shape)\nprint (combined.columns)\ny = trainingDataset['Loan_Status']","6c69533d":"print (\"TRAINING DATA DETAILS\")\nprint (\"Total  number of records present in the dataset -\", trainingDataset.shape[0])\nprint (\"Total  number of columns present in the dataset -\", trainingDataset.shape[1])\n\nprint (\"\\n TESTING DATA DETAILS\")\nprint (\"Total  number of records present in the dataset -\", testingDataset.shape[0])\nprint (\"Total  number of columns present in the dataset -\", testingDataset.shape[1])","b747a460":"print (\"Following are the columns present in the dataset - \", trainingDataset.columns)\nprint (trainingDataset.dtypes)","7bc77e18":"print (\"TOTAL NUMBER OF RECORDS IN THE COMBINED DATASET  - \", combined.shape[0])\nprint (\"\\n\")\ncategoricalColNames = combined.iloc[:,1:].select_dtypes(include=['object'])\nrequiredCategoricalVariables = list(categoricalColNames.columns.values)\nfor x in requiredCategoricalVariables:\n    print (\"Number of value counts for -\", x)\n    print (combined[x].value_counts())\n    print ('Number of Missing values: %d'% sum(combined[x].isnull()))\n    print (\"\\n\")\n    \nnumericalColNames = combined.iloc[:,1:].select_dtypes(include=['int64','float64'])\nrequiredCategoricalVariables = list(numericalColNames.columns.values)\nfor x in requiredCategoricalVariables:\n    print ('Number of missing values in ', x ,': %d'% sum(combined[x].isnull()))\n","9f1655f4":"combined.info()","9ba89f7d":"### FILLING THE MISSING VALUES IN THE REQUIRED COLUMNS\ncombined['LoanAmount'].fillna(combined['LoanAmount'].mean(), inplace=True)\ncombined['Loan_Amount_Term'].fillna(combined['Loan_Amount_Term'].mean(), inplace=True)\ncombined['Self_Employed'].fillna('No',inplace=True)\ncombined['Married'].fillna('NA',inplace=True)\ncombined['Gender'].fillna('NA',inplace=True)\ncombined['Dependents'].fillna('0',inplace=True)\ncombined['Credit_History'].fillna(0,inplace=True)","d9785f85":"requiredColumns = list(combined.columns.values)\nprint (\"Checking if there are any missing values in the dataset - \")\nfor col in requiredColumns:\n    print (\"column name  -\", col)\n    print ('Final #missing: %d'% sum(combined[col].isnull()))\n    print (\"\\n\")","a7751e87":"import seaborn as sns\nplt.figure(figsize=(12,12))\nsns.heatmap(combined.iloc[:, 2:].corr(), annot=True, square=True, cmap='BuPu')\nplt.show()","53277e1a":"plt.figure(figsize=(20,20))\ntemp = trainingDataset.iloc[:,2:].select_dtypes(include=['int64','float64'])\nrequiredColumns = list(temp.columns.values)\ncounter = 1\nfor col in requiredColumns:\n    plt.subplot(3, 3, counter)\n    trainingDataset[col].hist(color = 'green')\n    plt.title(col)\n    counter = counter + 1\n   ","107ad4f3":"plt.figure(figsize=(10,10))\ntemp3 = pd.crosstab(trainingDataset['Credit_History'], trainingDataset['Loan_Status'])\ntemp3.plot(kind='bar', stacked=True, color=['green','red'], grid=False)","4895c2d9":"nrow_train = trainingDataset.shape[0]\nX_train = combined[:nrow_train]\nX_test = combined[nrow_train:]\nfrom sklearn.preprocessing import LabelEncoder\nvar_mod = ['Gender','Married','Education','Self_Employed','Property_Area','Loan_Status','Dependents']\nle = LabelEncoder()\nfor i in var_mod:\n    X_train[i] = le.fit_transform(X_train[i])\n    X_test[i] = le.fit_transform(X_test[i])\nprint (\"CONVERTED THE CATEGORICAL VARIABLES INTO NUMERICALS\")","cd12a8b3":"sns.pairplot(trainingDataset[trainingDataset.columns.values], hue='Loan_Status', diag_kind='kde', height=2);","0f82b322":"### THE BOX PLOT SHOW THE OUTLIERS IN YOUR DATA. \n### AS YOU CAN SEE COLUMNS NAMED \"APPLICANT INCOME\" AND \"CO APPLICANT INCOME\" HAVE OUTLIERS\ntemp = trainingDataset.iloc[:,2:].select_dtypes(include=['int64','float64'])\nrequiredColumns = list(temp.columns.values)\nplt.figure(figsize=(10,10))\n#trainingDataset[trainingDataset.columns.values].plot.box();\nsns.boxplot(data=X_train[requiredColumns], palette=\"Set2\")","d8e8c708":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split #For K-fold cross validation\n\nfrom sklearn import metrics\nX = X_train.iloc[:, 2:11].values\ny = X_train.iloc[:, 12].values\n#X = X.reshape(X.shape[0],1)\nX_tr,X_te,y_tr,y_te = train_test_split(X,y,test_size=0.20, random_state=0)\n\nLR_model = LogisticRegression(solver='sag')\nLR_model.fit(X_tr,y_tr)\n#Make predictions on training set:\npredictions = LR_model.predict(X_te)\n\n#Print accuracy\naccuracy = metrics.accuracy_score(predictions,y_te)\nprint (\"Accuracy : %s\" % \"{0:.3%}\".format(accuracy))\nprint(\"\\n Classification report for classifier %s:\\n%s\\n\"\n      % (LR_model, metrics.classification_report(y_te, predictions)))\nprint(\"Confusion matrix:\\n%s\" % metrics.confusion_matrix(y_te, predictions))\n\ncount = 0\nprint (\"TOTAL NUMBER OF TESTING RECORD - \",X_te.shape[0])\nfor x in range(len(X_te)):\n    if(y_te[x] == predictions[x]):\n        count = count + 1\nprint (\"NUMBER OF CORRECTLY PREDICTED OUTPUTS - \",count)\nprint(\"\\n\")\nfor x in range(0,5):\n    if(y_te[x] == predictions[x]):\n        print (\"TESTING RECORD - \",X_te[x])\n        print (\"ACTUAL OUTPUT - \", y_te[x])\n        print (\"PREDICTED OUTPUT - \",predictions[x])\n        print (\"_________________________________\")\n","fcd59bfb":"temp = trainingDataset.iloc[:,2:11]\nrequiredColumns = list(temp.columns.values)\nprint (requiredColumns)\nFinalData = list(zip(X_te, y_te, predictions))\nprint (FinalData[0])\nmy_submission = pd.DataFrame( X_te, columns=[requiredColumns])\nmy_submission['Actual_Loan_Status'] = y_te\nmy_submission['Predicted_Loan_Status'] = predictions\nmy_submission.head()\nmy_submission.to_csv('LoanPredictionSubmissions.csv', index=False)\n","a8ac128e":"#Import models from scikit learn module:\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split #For K-fold cross validation\n\nfrom sklearn import metrics\n\nmodel = LogisticRegression(solver='sag')\nX = X_train.iloc[:, 10:11].values\ny = X_train.iloc[:, 12].values\n#X = X.reshape(X.shape[0],1)\nX_tr,X_te,y_tr,y_te = train_test_split(X,y,test_size=0.25,random_state=0)\n\nmodel.fit(X_tr,y_tr)\n#Make predictions on training set:\npredictions = model.predict(X_te)\n\n#Print accuracy\naccuracy = metrics.accuracy_score(predictions,y_te)\nprint (\"Accuracy : %s\" % \"{0:.3%}\".format(accuracy))\nprint(\"\\n Classification report for classifier %s:\\n%s\\n\"\n      % (model, metrics.classification_report(y_te, predictions)))\nprint(\"Confusion matrix:\\n%s\" % metrics.confusion_matrix(y_te, predictions))\n\ncount = 0\nprint (\"TOTAL NUMBER OF TESTING RECORD - \",X_te.shape[0])\nfor x in range(len(X_te)):\n    if(y_te[x] == predictions[x]):\n        count = count + 1\nprint (\"NUMBER OF CORRECTLY PREDICTED OUTPUTS - \",count)\nprint(\"\\n\")\nfor x in range(0,5):\n    if(y_te[x] == predictions[x]):\n        print (\"TESTING RECORD - \",X_te[x])\n        print (\"ACTUAL OUTPUT - \", y_te[x])\n        print (\"PREDICTED OUTPUT - \",predictions[x])\n        print (\"_________________________________\")","c3919a28":"import seaborn as sns\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(12,6))\nax = sns.countplot(x=predictions)\nax.set_xticklabels([\"Loan Not Approved\",\"Loan Approved\"])\nprint (\"FOLLOWING IS THE COUNTPLOT DISPLAYING THE PREDICTIONS - \")","bad64fdb":"from sklearn.ensemble import RandomForestClassifier\nrf_model = RandomForestClassifier()\nrf_model.fit(X_tr,y_tr)\npredictions = rf_model.predict(X_te)\n\n#Print accuracy\naccuracy = metrics.accuracy_score(predictions,y_te)\nprint (\"Accuracy : %s\" % \"{0:.3%}\".format(accuracy))\nprint(\"\\n Classification report for classifier %s:\\n%s\\n\"\n      % (model, metrics.classification_report(y_te, predictions)))\nprint(\"Confusion matrix:\\n%s\" % metrics.confusion_matrix(y_te, predictions))\n\ncount = 0\nprint (\"TOTAL NUMBER OF TESTING RECORD - \",X_te.shape[0])\nfor x in range(len(X_te)):\n    if(y_te[x] == predictions[x]):\n        count = count + 1\nprint (\"NUMBER OF CORRECTLY PREDICTED OUTPUTS - \",count)\nprint(\"\\n\")\nfor x in range(0,5):\n    if(y_te[x] == predictions[x]):\n        print (\"TESTING RECORD - \",X_te[x])\n        print (\"ACTUAL OUTPUT - \", y_te[x])\n        print (\"PREDICTED OUTPUT - \",predictions[x])\n        print (\"_________________________________\")","831a581d":"import seaborn as sns\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(12,6))\nax = sns.countplot(x=predictions)\nax.set_xticklabels([\"Loan Not Approved\",\"Loan Approved\"])\nprint (\"FOLLOWING IS THE COUNTPLOT DISPLAYING THE PREDICTIONS - \")","04349d3f":"from sklearn import tree\nclf = tree.DecisionTreeClassifier()\nclf.fit(X_tr,y_tr)\npredictions = clf.predict(X_te)\n\n#Print accuracy\naccuracy = metrics.accuracy_score(predictions,y_te)\nprint (\"Accuracy : %s\" % \"{0:.3%}\".format(accuracy))\nprint(\"\\n Classification report for classifier %s:\\n%s\\n\"\n      % (clf, metrics.classification_report(y_te, predictions)))\nprint(\"Confusion matrix:\\n%s\" % metrics.confusion_matrix(y_te, predictions))\n\ncount = 0\nprint (\"TOTAL NUMBER OF TESTING RECORD - \",X_te.shape[0])\nfor x in range(len(X_te)):\n    if(y_te[x] == predictions[x]):\n        count = count + 1\nprint (\"NUMBER OF CORRECTLY PREDICTED OUTPUTS - \",count)\nprint(\"\\n\")\nfor x in range(0,5):\n    if(y_te[x] == predictions[x]):\n        print (\"TESTING RECORD - \",X_te[x])\n        print (\"ACTUAL OUTPUT - \", y_te[x])\n        print (\"PREDICTED OUTPUT - \",predictions[x])\n        print (\"_________________________________\")","d40f42df":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_tr,y_tr)\npredictions = knn.predict(X_te)\n\n#Print accuracy\naccuracy = metrics.accuracy_score(predictions,y_te)\nprint (\"Accuracy : %s\" % \"{0:.3%}\".format(accuracy))\nprint(\"\\n Classification report for classifier %s:\\n%s\\n\"\n      % (knn, metrics.classification_report(y_te, predictions)))\nprint(\"Confusion matrix:\\n%s\" % metrics.confusion_matrix(y_te, predictions))\n\ncount = 0\nprint (\"TOTAL NUMBER OF TESTING RECORD - \",X_te.shape[0])\nfor x in range(len(X_te)):\n    if(y_te[x] == predictions[x]):\n        count = count + 1\nprint (\"NUMBER OF CORRECTLY PREDICTED OUTPUTS - \",count)\nprint(\"\\n\")\nfor x in range(0,5):\n    if(y_te[x] == predictions[x]):\n        print (\"TESTING RECORD - \",X_te[x])\n        print (\"ACTUAL OUTPUT - \", y_te[x])\n        print (\"PREDICTED OUTPUT - \",predictions[x])\n        print (\"_________________________________\")","4889c178":"## The above diagram tells us that there are outliers in columns such as \"Applicant Income\" and \"Co Applicant Income\"","e4cfd87c":"### Lets understand the distributions of ApplicantIncome and LoanAmount. Also Lets understand the categorical variables in more detail","1e8578d4":"# LOAN PREDICTION APPLICATION"}}