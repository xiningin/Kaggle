{"cell_type":{"9be395ff":"code","b6e23460":"code","a622a659":"code","913b211e":"code","7186e1b8":"code","30797d84":"code","5a8e1b9e":"code","23792360":"code","4bf0699d":"code","4b0baf48":"code","30603590":"code","8a90efb5":"code","7cea7f01":"code","fd0130d3":"code","436f1e3f":"code","a4a7caf1":"code","6ab09d5b":"code","fcecb1b6":"code","b182cf4c":"code","9ffad7ad":"code","2231ccd9":"code","dfbd05d1":"code","a541e7aa":"code","b13d2abd":"code","29341e04":"code","1ac6dd1b":"code","b2c707a7":"code","2e13b4fb":"code","32c67e10":"code","17c50a79":"code","c943ae0e":"code","13218596":"code","f56ccdcf":"code","f743d314":"code","45f73ef4":"code","4952cc93":"markdown","3eb3e60d":"markdown","b52af677":"markdown","ad86ec34":"markdown","d6bd9f7b":"markdown","ec256df7":"markdown","68c4a836":"markdown","b91fd124":"markdown","1d1c9643":"markdown","d0885eb4":"markdown","7e886319":"markdown","3ebaf3ae":"markdown","b4e90945":"markdown","55ac1b31":"markdown","87542ae3":"markdown","9b3be770":"markdown","460638c1":"markdown","3a0ad641":"markdown","56578495":"markdown","37db0cc0":"markdown"},"source":{"9be395ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime # convert to datetime\nimport collections\nimport itertools\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b6e23460":"netflix = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')","a622a659":"netflix.head()","913b211e":"netflix.info()","7186e1b8":"netflix.drop('show_id', axis = 1, inplace = True)","30797d84":"\nnetflix.isnull().mean()*100","5a8e1b9e":"netflix.loc[netflix[\"date_added\"].isna(), 'date_added'] =  netflix.loc[netflix[\"date_added\"].isna(), 'release_year']","23792360":"netflix['year_added'] = netflix['date_added'].apply(lambda x : x[-4:] if type(x) == str else str(x))","4bf0699d":"netflix.date_added = netflix.date_added.apply(lambda x : datetime.strptime(x.strip(), '%B %d, %Y') if type(x) == str else x)\nnetflix = netflix[~netflix['date_added'].apply(lambda x: str(x).isdigit())]","4b0baf48":"netflix = netflix[(netflix['year_added'] >= '2010') & (netflix['year_added'] < '2021')]","30603590":"netflix.director.fillna('Other', inplace=True)\nnetflix.cast.fillna('Other', inplace=True)\nnetflix.country.fillna('Other', inplace=True)\nnetflix.rating.fillna('Other', inplace=True)","8a90efb5":"idx_drop = netflix[(netflix.director == 'Other') & (netflix.cast == 'Other') & (netflix.country == 'Other') & (netflix.rating == 'Other')].index\nnetflix.drop(idx_drop , inplace=True)","7cea7f01":"genre = list(set([ i.strip(' ') for i in list(set([e for l in list(set(netflix.listed_in.to_list())) for e in  l.split(',') ])) ]))\ncountries = list(set([ i.strip(' ') for i in list(set([e for l in list(set(netflix.country.to_list())) for e in  l.split(',') ])) ]))\ncountries.remove('')\nactors = list(set([ i.strip(' ') for i in list(set([e for l in list(set(netflix.cast.to_list())) for e in  l.split(',') ])) ]))\ndirector = list(set([ i.strip(' ') for i in list(set([e for l in list(set(netflix.director.to_list())) for e in  l.split(',') ])) ]))","fd0130d3":"netflix['genre'] = netflix.listed_in.apply(lambda x : [e.strip() for e in x.strip().split(',')])\nnetflix['country_list'] = netflix.country.apply(lambda x : [e.strip() for e in x.strip().split(',')])\nnetflix['director_list'] = netflix.director.apply(lambda x : [e.strip() for e in x.strip().split(',')])\nnetflix['cast_list'] = netflix.cast.apply(lambda x : [e.strip() for e in x.strip().split(',')])","436f1e3f":"bins = [0, 90, 120, 180, 240]\nlabels = ['short', 'medium', 'average', 'lengthy']\nnetflix.duration.loc[netflix.duration.str.contains(' min'), ] = pd.cut(netflix.duration.loc[netflix.duration.str.contains(' min'), ].apply(lambda x : int(x.strip(' min'))), bins, labels= labels)","a4a7caf1":"netflix.duration.value_counts()","6ab09d5b":"netflix.head(10)","fcecb1b6":"netflix.shape","b182cf4c":"netflix.to_csv('netflix_processed.csv', index = False)","9ffad7ad":"netflix.head(2)","2231ccd9":"netflix.groupby('type')['type'].count().plot(kind='bar')","dfbd05d1":"def bar_plot(df, col_name, col_list):\n    \n    df = pd.concat([df[[col_name]],pd.DataFrame(columns = col_list)])\n    \n    for c in col_list:\n        df[c] = df[col_name].apply(lambda x : len([e for e in x if e == c]) )\n    \n        \n    plt.figure(figsize=(20,10))\n    df.iloc[:,1:].sum(axis=0)[df.iloc[:,1:].sum(axis=0)>100].sort_values(ascending = False).plot(kind='bar')","a541e7aa":"bar_plot(netflix, 'country_list', countries)","b13d2abd":"bar_plot(netflix, 'genre', genre)","29341e04":"def top_actor_or_director(df, country, attribute, top = 2, other = False):\n    \n    df = df[(df.country.str.contains(country))]\n    a = [l.strip() for l in df[attribute].to_list()]\n    b = [i.split(',') for i in a]\n    c = [j for i in b for j in i]\n    d = [i.strip() for i in c]\n    e = dict(collections.Counter(d))\n    f = dict(collections.OrderedDict(sorted(e.items(), \n                                  key=lambda kv: kv[1], reverse=True)))\n    \n    del a,b,c,d,e\n    \n    if other:\n        m = dict(itertools.islice(f.items(), 0, top))\n    \n    else:\n        m = dict((k, v) for k, v in f.items() if k != 'Other')\n        m = dict(itertools.islice(m.items(), 0, top))\n    \n    \n    plt.figure(figsize=(15,10))\n    explode = tuple(sorted(np.linspace(0, 0.25, len(m)), reverse=True))\n    def absolute_value(val):\n        a  = np.round(val*sum(m.values())\/100)\n        return a\n    \n    plt.pie(m.values(), labels=m.keys(), autopct= absolute_value, #'%1.1f%%',\n            shadow=True, startangle=90, explode=explode)\n    \n    plt.title ('Top ' + str(top) + ' ' + attribute + ' of' + ' ' + country, size=15, weight=\"bold\")\n    \n    \n    plt.show()","1ac6dd1b":"top_actor_or_director(netflix, country='India', attribute='director', top = 7, other = False)","b2c707a7":"top_actor_or_director(netflix, country='United States', attribute='cast', top = 7)","2e13b4fb":"netflix.groupby(['year_added', 'type'])['type'].count().unstack(level=1).plot(kind='bar', subplots=False, figsize=(15, 8))\nplt.show()","32c67e10":"netflix[netflix['type'] == 'Movie'].groupby('rating')['rating'].count().plot(kind='bar', figsize=(15, 8))","17c50a79":"netflix[netflix['type'] == 'TV Show'].groupby('rating')['rating'].count().plot(kind='bar', figsize=(15, 8))","c943ae0e":"def genre_actor_or_director(df, name, actor = False, director = False):\n    \n    if actor:\n        df = df[df.cast.str.contains(name)]['listed_in'].to_list()\n    elif director:\n        df = df[df.director.str.contains(name)]['listed_in'].to_list()\n    else:\n        return('Please specify if an actor or director')\n    \n    a = [l.strip() for l in df]\n    b = [i.split(',') for i in a]\n    c = [j for i in b for j in i]\n    d = [i.strip() for i in c]\n    e = dict(collections.Counter(d))\n    m = dict(collections.OrderedDict(sorted(e.items(), \n                                  key=lambda kv: kv[1], reverse=True)))\n    \n    plt.figure(figsize=(15,10))\n    explode = tuple(sorted(np.linspace(0, 0.25, len(m)), reverse=True))\n    def absolute_value(val):\n        a  = np.round(val*sum(m.values())\/100)\n        return a\n    \n    plt.pie(m.values(), labels=m.keys(), autopct= absolute_value, #'%1.1f%%',\n            shadow=True, startangle=90, explode=explode)\n    \n    plt.title ('Top genre of ' + name, size=15, weight=\"bold\")\n    \n    \n    plt.show()","13218596":"genre_actor_or_director(netflix, 'Leonardo DiCaprio', actor = True)","f56ccdcf":"genre_actor_or_director(netflix, 'Christopher Nolan', director = True)","f743d314":"netflix['date_added'] = pd.to_datetime(netflix['date_added'])\nnetflix['content_added_month'] = netflix['date_added'].dt.month","45f73ef4":"netflix.groupby(['content_added_month', 'type'])['type'].count().unstack(level=1).plot(kind='bar', subplots=False, figsize=(15, 8))\nplt.show()","4952cc93":"## d. Bar plot showing number of content (movie and TV show) added per year","3eb3e60d":"## b. We can see that US and India are the countries where most of the content is made. Also further below we can see the top genres made in the last 10 years","b52af677":"## b. Taking only last 10 year data","ad86ec34":"## a. From the below plot we can see that Movies dominate","d6bd9f7b":"## c. Replacing 'nan' values in ['director', 'cast', 'country', 'rating'] col with 'Other'","ec256df7":"## e. The bar plot below shows the total number of Movies and TV Shows per ratings respectively","68c4a836":"## 1. Importing required packages","b91fd124":"## d. Collecting a list of all directors, actors, genres and countries","1d1c9643":"## g. From the below bar chart we can see that most of the content is added towards the last qarter of a year","d0885eb4":"### percentage of null values in the data","7e886319":"## f. A function 'genre_actor_or_director' with i\/p parameter the dataframe name of actor \/ director and a bool value indicating Ture for actor or director rspectively plots a pie chart with the total number of movies \/ TV shows done in each genre by the actor\/director","3ebaf3ae":"# 2. Preparing data for analysis","b4e90945":"# Steps followed in this notebook :\n\n1. Importing required packages\n\n2. Preparing Data for analysis:\n     \n    a. Creating a new column 'year_added'\n    \n    b. Taking only last 10 year data\n    \n    c. Replacing 'nan' values in ['director', 'cast', 'country', 'rating'] col with 'Other'\n    \n    d. Collecting a list of all directors, actors, genres and countries\n    \n    e. Converting 'listed_id' and country to a list of show types and list of countries respectively\n    \n    f. Converting duration into a bin with different lengths\n    \n3. Analysing the data:\n\n    a. Bar Plot to see which (Movie \/ TV Shows) has the most number of contents\n    \n    b. Which country has the most number of content in the last 10 years, also the top genres made in the last 10 years.\n    \n    c. A function 'top_actor_or_director' with i\/p parameter dataframe, country (can take any of the countries) and attribute ('director' or 'cast) which returns a pie chart of top (parameter 'top' take any int n) n 'director' or 'actor' in that specific country\n    \n    d. Bar plot showing number of content (movie and TV show) added per year\n    \n    e. Bar plot showing the total number of Movies and TV Shows per ratings respectively\n    \n    f. A function 'genre_actor_or_director' with i\/p parameter dataframe, name (of actor \/ director) and a bool value indicating Ture for actor or director rspectively plots a pie chart with the total number of movies \/ TV shows done in each genre by the actor\/director\n    \n    g. Bar chart showing when is the most content added during the year\n  ","55ac1b31":"# 3. Visually Analysing the data","87542ae3":"########################################################################################################################################","9b3be770":"### Below we can see the data prepared for analysis","460638c1":"## e. Converting 'listed_id' and country to a list of show types and list of countries respectively","3a0ad641":"## c. A function 'top_actor_or_director' with i\/p parameter country can take any of the countries and attribute ('director' or 'cast) gives us pie chart of top (parameter 'top' take any int n) n 'director' or 'actor' in that specific country","56578495":"## f. Converting duration into a bin with different lengths","37db0cc0":"## a. Creating a new column 'year_added'\n\n1. Extracted from 'date_added'\n2. Contaings year in which the show\/movie was added \n3. Row where the data was missing was substituted from the release year\n4. Converting 'date_added' to datetime and removing rows withi have only year information (keeping month day and year information)"}}