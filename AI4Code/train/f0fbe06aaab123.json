{"cell_type":{"031daa2f":"code","c3f2d2e5":"code","336daf66":"code","b7ace405":"code","64238820":"code","34aab9e0":"code","37a79c0c":"code","31b5426e":"code","c4e6a5b6":"code","3808a635":"code","389652f4":"code","08f68794":"code","d7b7f3be":"code","a694e23c":"code","7f43cf45":"code","b3c94bca":"code","1a982eb8":"code","c1645c47":"code","e2dc9c36":"code","104bbacb":"code","7bbacb90":"code","93bd8aea":"code","7ef6d744":"code","2ff7057f":"code","d1d2af53":"code","09208f70":"markdown","9e8d049c":"markdown","3fbf5072":"markdown","a7413a20":"markdown","858e07b8":"markdown","ea09e65f":"markdown","eba01e60":"markdown","e37195f8":"markdown","a1ed9d10":"markdown","47f052e4":"markdown","ce36870c":"markdown","297755b4":"markdown","0012f7f7":"markdown","e4a216a1":"markdown","d3dc431e":"markdown","5bb83896":"markdown","54380575":"markdown","242667e0":"markdown","322c09ac":"markdown"},"source":{"031daa2f":"import numpy as np\nimport pandas as pd \nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport random\nimport os\nprint(os.listdir(\"..\/input\/dogs-vs-cats\/\"))","c3f2d2e5":"FAST_RUN = False\nIMAGE_WIDTH=128\nIMAGE_HEIGHT=128\nIMAGE_SIZE=(IMAGE_WIDTH, IMAGE_HEIGHT)\n# channel refer to number of colors, here RGB\nIMAGE_CHANNELS=3","336daf66":"import zipfile\nzip_ref = zipfile.ZipFile('\/kaggle\/input\/dogs-vs-cats\/train.zip', 'r')\nzip_ref.extractall('\/tmp\/train')\nzip_ref.close()\n","b7ace405":"filenames = os.listdir(\"\/tmp\/train\/train\")\n# we are definig empty list categories\n# it will contain 0 or 1 as per the image\ncategories=[]\nfor f_name in filenames:\n    category=f_name.split('.')[0]\n    if category=='dog':\n        categories.append(1)\n    else:\n        categories.append(0)\n\n# creating a dataframe conataining columns of image-name and (0\/1) according to type of image\ndf=pd.DataFrame({\n    'filename':filenames,\n    'category':categories\n})","64238820":"df.head()","34aab9e0":"df.tail()","37a79c0c":"# now lets look at total number of dog and cat present \ndf['category'].value_counts().plot.bar()","31b5426e":"# looking as a sample image\nsample = random.choice(filenames)\nimage = load_img(\"\/tmp\/train\/train\/\"+sample)\nplt.imshow(image)","c4e6a5b6":"from keras.models import Sequential\nfrom keras.layers import Conv2D,MaxPooling2D,\\\n     Dropout,Flatten,Dense,Activation,\\\n     BatchNormalization\n\n# Keras defines a sequential model as a sequential stack of linear layers.\nmodel=Sequential()\n\n# here we using 32 filter layers and kernel size of (3,3), with relu activation function (max(0,x))\n# Batch normalization() is a technique for improving the speed, performance, and stability of cnn.\n# max pooling reduces the dimensionality of images by reducing the number of pixels in the output from previous cnn\n# pool size define size of filter\n# Droupout drops out the nodes from the layer and reduce chances of overfitting\n\n#1st layer is input layer\nmodel.add(Conv2D(32,(3,3),activation='relu',input_shape=(IMAGE_WIDTH,IMAGE_HEIGHT,IMAGE_CHANNELS)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n# 2nd layer\nmodel.add(Conv2D(64,(3,3),activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n# 3rd layer\nmodel.add(Conv2D(128,(3,3),activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n# Flatten convert matrix into single array\nmodel.add(Flatten())\nmodel.add(Dense(512,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\n# Finally we compile our model with rsmprop optimizer\nmodel.add(Dense(2,activation='softmax'))\nmodel.compile(loss='categorical_crossentropy',\n  optimizer='rmsprop',metrics=['accuracy'])","3808a635":"model.summary()","389652f4":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau\n\n#One way to avoid overfitting is to terminate the process early using earlystop\nearlystop = EarlyStopping(patience = 10)\n\n# Following line will reduce learning rate when a metric has stopped improving. \nlearning_rate_reduction = ReduceLROnPlateau(monitor = 'val_acc',patience = 2,verbose = 1,factor = 0.5,min_lr = 0.00001)\n\ncallbacks = [earlystop,learning_rate_reduction]\n","08f68794":"# replacing category with their name\ndf[\"category\"] = df[\"category\"].replace({0:'cat',1:'dog'})\n\n#using train_test_split to split your data\ntrain_df,validate_df = train_test_split(df,test_size=0.20,random_state=42)\n\n#resetting the index\ntrain_df = train_df.reset_index(drop=True)\nvalidate_df = validate_df.reset_index(drop=True)\n\ntotal_train=train_df.shape[0]\ntotal_validate=validate_df.shape[0]\n\n# batch_size specifies how many training samples should be sent to the model at once.\nbatch_size=15","d7b7f3be":"# we create multiple image from one image for good efficiency \ntrain_datagen = ImageDataGenerator(\n    rotation_range=15,\n    rescale=1.\/255,\n    shear_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \"\/tmp\/train\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","a694e23c":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    validate_df, \n    \"\/tmp\/train\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","7f43cf45":"example_df = train_df.sample(n=1).reset_index(drop=True)\nexample_generator = train_datagen.flow_from_dataframe(\n    example_df, \n    \"\/tmp\/train\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical'\n)","b3c94bca":"plt.figure(figsize=(12, 12))\nfor i in range(0, 15):\n    plt.subplot(5, 3, i+1)\n    for X_batch, Y_batch in example_generator:\n        image = X_batch[0]\n        plt.imshow(image)\n        break\nplt.tight_layout()\nplt.show()","1a982eb8":"# instead of 5 use 50 for bests results\nepochs=3 if FAST_RUN else 5\nhistory = model.fit_generator(\n    train_generator, \n    epochs=epochs,\n    validation_data=validation_generator,\n    validation_steps=total_validate\/\/batch_size,\n    steps_per_epoch=total_train\/\/batch_size,\n    callbacks=callbacks\n)","c1645c47":"model.save_weights(\"model.h5\")\nmodel.save(\"model1_catsVSdogs_10epoch.h5\")","e2dc9c36":"import zipfile\nzip_ref = zipfile.ZipFile('\/kaggle\/input\/dogs-vs-cats\/test1.zip', 'r')\nzip_ref.extractall('\/tmp\/test1')\nzip_ref.close()\n","104bbacb":"test_filenames = os.listdir(\"\/tmp\/test1\/test1\")\ntest_df = pd.DataFrame({\n    'filename': test_filenames\n})\nnb_samples = test_df.shape[0]","7bbacb90":"test_gen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    \"\/tmp\/test1\/test1\/\", \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    target_size=IMAGE_SIZE,\n    batch_size=15,\n    shuffle=False\n)","93bd8aea":"predict = model.predict_generator(test_generator, steps=np.ceil(nb_samples\/batch_size))","7ef6d744":"test_df['category'] = np.argmax(predict, axis=-1)","2ff7057f":"label_map = dict((v,k) for k,v in train_generator.class_indices.items())\ntest_df['category'] = test_df['category'].replace(label_map)\n\ntest_df['category'] = test_df['category'].replace({ 'dog': 1, 'cat': 0 })\n\nsample_test = test_df.head(18)\nsample_test.head()\nplt.figure(figsize=(12, 24))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(\"\/tmp\/test1\/test1\/\"+filename, target_size=IMAGE_SIZE)\n    plt.subplot(6, 3, index+1)\n    plt.imshow(img)\n    plt.xlabel(filename + '(' + \"{}\".format(category) + ')' )\nplt.tight_layout()\nplt.show()","d1d2af53":"submission_df = test_df.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename', 'category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)","09208f70":"## 7. Manage DATA\nBecause we will use image genaretor with class_mode=\"categorical\". We need to convert column category into string. Then imagenerator will convert it one-hot encoding which is good for our classification.\n\nSo we will convert 1 to dog and 0 to cat","9e8d049c":"## 3. Prepare dataset for training model:","3fbf5072":"## Validation Generator","a7413a20":"For categoral classication the prediction will come with probability of each category. So we will pick the category that have the highest probability with numpy average max","858e07b8":"## 9. Training Model","ea09e65f":"## 1. Import Important **Libraries**","eba01e60":"## 2. Define Image PROPERTIES","e37195f8":"## 4. Creating a neural network model","a1ed9d10":"## 6. Define callbacks and learning rate:\nA callback is a set of functions to be applied at given stages of the training procedure. You can use callbacks to get a view on internal states and statistics of the model during training.\n\nYou define and use a callback when you want to automate some tasks after every training\/epoch that help you have controls over the training process. This includes stopping training when you reach a certain accuracy\/loss score, saving your model as a checkpoint after each successful epoch, adjusting the learning rates over time, and more. Let\u2019s dive deep into some callback functions!","47f052e4":"## 15. Submission","ce36870c":"## Testing the working of our generators","297755b4":"## 12. Create Testing Generator","0012f7f7":"## 10. Save Model","e4a216a1":"## 13. Predict","d3dc431e":"## END","5bb83896":"## 14. See Predicted Result","54380575":"## 11. Prepare Testing Data","242667e0":"## 5. Analyzing model ","322c09ac":"## 8. Training Generator"}}