{"cell_type":{"6be9ea9c":"code","c176136f":"code","00ac4f04":"code","b4e9b4db":"code","5bc0db4b":"code","cc7c0299":"code","cef3a028":"code","c47656fa":"code","3fcf2ded":"code","11e890f9":"code","e82305b7":"code","c21e6ead":"code","2c7b76cf":"code","0426cb14":"code","ef5d9ac3":"code","7eaebc41":"code","a75a42a3":"code","ea8fed10":"code","abd05f37":"code","1fdf3bb8":"code","1ec57629":"code","6a7c5cae":"code","d5908cb8":"code","f0a6c5c8":"code","159b3219":"code","1c41f632":"code","98f3fd84":"code","e8dc9cb3":"code","9ccf4d70":"code","1367772d":"code","6074536f":"code","7b631bc9":"code","6d4f3f26":"code","eb07f2ce":"code","b14d1708":"code","e7af8bbf":"code","6815772d":"code","f7b9e490":"code","75cf89fe":"code","6212248b":"code","cb15fa5e":"code","6aaefcaf":"code","e12cb260":"code","bb988203":"code","c5e0d51f":"code","3755f3e2":"code","d06b3853":"code","2c7b6417":"code","daa0d7dd":"code","95f64ce3":"code","cc54f69b":"code","01ad89eb":"code","10a76c3d":"code","68781d09":"code","ef432776":"code","1538dc0e":"code","6a97e6d7":"code","5f497aac":"code","e1b3269a":"code","6a45fe01":"markdown","64479718":"markdown","820ed00c":"markdown","f982f93f":"markdown","93691d14":"markdown","95f005a1":"markdown","45502d25":"markdown","bfc95a8e":"markdown","4581fb9d":"markdown","a780492a":"markdown","c92ddcc1":"markdown","aebc4135":"markdown","6bb02d7a":"markdown","ac4a7847":"markdown","2345bba9":"markdown","6fce6b94":"markdown","eff088ad":"markdown","a2b45476":"markdown","1ab62da0":"markdown","34bbc15c":"markdown","7cec7b78":"markdown","3e123391":"markdown","bc375217":"markdown","fce48595":"markdown"},"source":{"6be9ea9c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n#Visualization styling code\nsns.set_context('talk')","c176136f":"data = pd.read_csv('..\/input\/eda-hotelbooking-logistic-reg-decision-tree\/HotelBookings.csv')","00ac4f04":"df = data.copy()","b4e9b4db":"df.shape","5bc0db4b":"df.describe(include= 'all')","cc7c0299":"df.dtypes","cef3a028":"df.isnull().sum()","c47656fa":"df.fillna(0, inplace=True)\ndf.isnull().sum()","3fcf2ded":"df['arrival_date'] = pd.to_datetime(df['arrival_date'])\ndf['arrival_month'] = pd.DatetimeIndex(df['arrival_date']).month\ndf['arrival_year'] = pd.DatetimeIndex(df['arrival_date']).year\ndf['arrival_day'] = pd.DatetimeIndex(df['arrival_date']).day\ndf['week_day'] = pd.DatetimeIndex(df['arrival_date']).day_name()\ndf['month'] = pd.DatetimeIndex(df['arrival_date']).month_name()\ndf['stays_in_weeks'] = df['stays_in_weekend_nights'] + df['stays_in_week_nights']\ndf['quarter'] = pd.PeriodIndex(df['arrival_date'], freq='Q')\ndf.shape","11e890f9":"df.head(3)","e82305b7":"##################\ndf.groupby(['arrival_month','arrival_year'])['adults', 'children'].sum().plot.bar(figsize=(15,5))\nprint(\"graph shows the number of adults and children that arrived\")\nplt.ylabel('no. of adults \/ children')\n##################","c21e6ead":"df_dow = df.groupby(['hotel', 'week_day'])['stays_in_weeks'].sum()\ndf_dow = df_dow.reset_index().sort_values(['hotel','stays_in_weeks'],ascending=False).set_index(['hotel','week_day'])\ndf_dow","2c7b76cf":"df_dow.plot.bar(figsize=(10,7))\n\n","0426cb14":"df_month = df.groupby(['hotel', 'month'])['stays_in_weeks'].sum()\ndf_month = df_month.reset_index().sort_values(['hotel','stays_in_weeks'],ascending=False).set_index(['hotel','month'])\ndf_month","ef5d9ac3":"df_month.plot.bar(figsize=(15, 7))","7eaebc41":"df_quarter = df.groupby(['hotel', 'quarter'])['stays_in_weekend_nights', 'stays_in_week_nights'].sum()\n\ndf_quarter","a75a42a3":"df_quarter.plot.bar(figsize = (15, 10))","ea8fed10":"df_kids = df.groupby('hotel')['children'].sum()\ndf_kids","abd05f37":"df_kids.plot.bar(figsize=(10, 7))","1fdf3bb8":"df_cbmw = df.groupby(['month', 'week_day'])['children', 'babies'].sum()\n\ndf_cbmw","1ec57629":"df_cbmw.plot.barh(figsize =(20, 30))","6a7c5cae":"df_cbmw.plot(kind='bar', figsize=(25, 15))\nplt.title(\"Count of Children and Babies visiting hotel WRT to Month and Days\", y=1.013)\nplt.ylabel(\"Count [Children and Babies]\")\nplt.xlabel(\"Date [Month - Year]\");","d5908cb8":"df_loyalCust = df.groupby('hotel')['is_repeated_guest'].sum()\ndf_loyalCust","f0a6c5c8":"df_loyalCust.plot.bar(figsize =(10, 7))\nplt.title('Loyal customers')\nplt.xlabel('Hotel type')\nplt.ylabel('Customers count')","159b3219":"df_custType = df.groupby(['customer_type','hotel'])['customer_type'].count()\ndf_custType","1c41f632":"plt.figure(figsize=(15, 12))\nsns.countplot(x = df['customer_type'], hue = df['hotel'], data = df)","98f3fd84":"df_depoType = df.groupby(['deposit_type', 'customer_type'])['customer_type'].count()\ndf_depoType","e8dc9cb3":"df_depoType = df.groupby(['deposit_type', 'is_repeated_guest'])['deposit_type'].count()\ndf_depoType","9ccf4d70":"df_roomBook = df.groupby(['reserved_room_type', 'is_repeated_guest'])['reserved_room_type'].count()\n\ndf_roomBook","1367772d":"plt.figure(figsize=(15, 12))\nsns.countplot(x = df['is_repeated_guest'], hue = df['reserved_room_type'], data = df)","6074536f":"df_roomAssign = df.groupby(['assigned_room_type', 'is_repeated_guest'])['assigned_room_type'].count()\n\ndf_roomAssign","7b631bc9":"plt.figure(figsize=(15, 12))\n\nsns.countplot(x = df['is_repeated_guest'],  hue = df['assigned_room_type'], data = df)","6d4f3f26":"corelation=df.corr()\nplt.figure(figsize=(30, 20))\nsns.heatmap(corelation, xticklabels = corelation.columns, yticklabels = corelation.columns ,annot=True)","eb07f2ce":"corr_matrix=df.corr().abs()\n\nupperMatrix = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\nlowerMatrix = corr_matrix.where(np.tril(np.ones(corr_matrix.shape), k =-1).astype(np.bool))\n# Find index of feature columns with correlation greater than 0.90\ncorrFutures = [column for column in upperMatrix.columns if any(upperMatrix[column] > 0.89)]\ncorrFutureslower = [column for column in lowerMatrix.columns if any(lowerMatrix[column] > 0.89)]\n\nprint(corrFutureslower)\nprint(corrFutures)\n\n","b14d1708":"#dropped the column already\n#df.drop(columns= corrFutures)","e7af8bbf":"df.shape","6815772d":"df.to_csv (r'exported_hotelbooking.csv', index = False, header=True)","f7b9e490":"import numpy as np\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split\n\n# Load the diabetes dataset\n#diabetes_X, diabetes_y = datasets.load_diabetes(return_X_y=True)\n\n#diabetes_X = diabetes.data \n\n# Split the data into training\/testing sets\n#diabetes_X_train = diabetes_X[:-20]\n#diabetes_X_test = diabetes_X[-20:]\n\n#diabetes_X\n\ndf=pd.read_csv('..\/input\/eda-hotelbooking-logistic-reg-decision-tree\/diabetes_dataset.csv')\n#target variable\n\nx=df.drop(['Outcome'], axis=1)\nx.shape","75cf89fe":"y=df.Outcome\ny.shape","6212248b":"# Split the targets into training\/testing sets\n#diabetes_y_train = diabetes_y[:-20]\n#diabetes_y_test = diabetes_y[-20:]\n#diabetes_y_test.shape\n# Split the data into training\/testing sets\n\ndiabetes_X_train, diabetes_X_test, diabetes_y_train, diabetes_y_test = train_test_split(x, y, test_size=0.3, random_state=50)\ndiabetes_X","cb15fa5e":"# Create SVN Classifier\nfrom sklearn.svm import SVC\nsvclassifier = SVC(kernel='linear')\nsvclassifier.fit(diabetes_X_train, diabetes_y_train)\n\naccuracy = svclassifier.score(diabetes_X_test,diabetes_y_test)\nprint(accuracy *100,'%')","6aaefcaf":"# Make predictions using the testing set\ndiabetes_y_pred = svclassifier.predict(diabetes_X_test)\nprint(diabetes_y_pred)","e12cb260":"from sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(diabetes_y_test, diabetes_y_pred))\nprint(classification_report(diabetes_y_test, diabetes_y_pred))","bb988203":"# The coefficients\nprint('Coefficients: \\n', svclassifier.coef_)\n# The mean squared error\nprint('Mean squared error: %.2f'\n      % mean_squared_error(diabetes_y_test, diabetes_y_pred))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n      % r2_score(diabetes_y_test, diabetes_y_pred))","c5e0d51f":"df=pd.read_csv('..\/input\/eda-hotelbooking-logistic-reg-decision-tree\/diabetes_dataset.csv')\ndf.head()","3755f3e2":"x=df.drop(['Outcome'], axis=1)\nx.shape","d06b3853":"#target variable\ny=df.Outcome\ny.shape","2c7b6417":"from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\nfrom sklearn.model_selection import train_test_split # Import train_test_split function\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.28, random_state=1)","daa0d7dd":"# Create Decision Tree classifer object\nmodel = DecisionTreeClassifier()\n\n# Train Decision Tree Classifer\nmodel = model.fit(x_train,y_train)\n\n#Predict the response for test dataset\ny_pred = model.predict(x_test)","95f64ce3":"#Evaluation using Accuracy score\nfrom sklearn import metrics #Import scikit-learn metrics module for accuracy calculation\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred)*100)","cc54f69b":"#Evaluation using Confusion matrix\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,y_pred)","01ad89eb":"#Evaluation using Classification report\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))\n","10a76c3d":"# Create Decision Tree classifer object\nmodel = DecisionTreeClassifier(criterion=\"entropy\", max_depth=3)\n\n# Train Decision Tree Classifer\nmodel = model.fit(x_train,y_train)\n\n#Predict the response for test dataset\ny_pred = model.predict(x_test)\n\n# Model Accuracy\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred)*100)","68781d09":"from sklearn.linear_model import LogisticRegression\n\n#Createlogistic regression object\nregr = LogisticRegression(random_state=0)\n\n# Train logistic regression\nmodel2 = regr.fit(x_train, y_train)\n\n#Predict the response for test dataset\ny_pred = model2.predict(x_test)\n\n# Model Accuracy\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred)*100)","ef432776":"data = pd.read_csv('..\/input\/eda-hotelbooking-logistic-reg-decision-tree\/HotelBookings.csv')\ndf = data.copy()","1538dc0e":"# Random Sample\nrandom_sample = df.sample(frac=0.1, replace = True, random_state =50)\nrandom_sample.head(10)","6a97e6d7":"#Cluster sampling\n\ncluster_sample = df.take(np.random.permutation(len(df))[:500])\ncluster_sample.head(5)","5f497aac":"# Stratified Sampling\n\nstartified_sample = df.groupby('hotel').apply(lambda x:x.sample(frac = 0.1))\nstartified_sample.head(5)","e1b3269a":"#systematic sampling\n\nsystematic_sample = df.iloc[:,:50]\nsystematic_sample.head(5)","6a45fe01":"since we can see that descision tree classifier has more accuracy then logistic regression model on a same dataset and same level of feature engineering on X and Y.","64479718":"### 3c.\tWhat is the number of night stays on weekends and weekdays for each quarter in each year?","820ed00c":"since we found out that we have two column or features who has high correlation and to find out I used the optimal way to find it by setting the threshold 0.89 and will drop one of the column between 2 i.e. 'stays_in_weeks' as I have created it by adding 2 columns 'stays_in_week_nights', 'stays_in_weekend_nights'.","f982f93f":"### 4b.\tWhat type of deposits did they use ?","93691d14":"All the columns expect week_days column which I dropped is required as their lower and average correlation with eachother and will effect the outcome and prediction.","95f005a1":"### 5b.\tMention the columns you will want to keep in the data set along with reasoning for each.","45502d25":"## 4.\tFind out the number of loyal customers for each hotel type. ","bfc95a8e":"## Sampling","4581fb9d":"## 2.\tAnalysis on data is to be done on yearly, monthly, daily basis where we need to analyze which hotel had the most number of customers (Use arrival_date column). ","a780492a":"### 4c.\tWhat type of rooms did they book for?","c92ddcc1":"# Exploratory Data Analysis","aebc4135":"Find out if you get any null values and also fix them. Write the steps for fixing nulls with the justification\/reasoning for the approach you will use.","6bb02d7a":"### 2a.\tWhich days of the week are most occupied in each hotel type?","ac4a7847":"### 4a.\tWhich type of customers are these?","2345bba9":"### 2b. Which months have more visits for each hotel type?","6fce6b94":"In <b>August<\/b> both <b>Resort hotel<\/b> and <b>City Hotel<\/b> has more visits.","eff088ad":"# 5.\tFind the correlation of columns using heatmap ","a2b45476":"Repeated and loyal guest makes more deposits, having less numbers in non-refundable amount nand refundable amount which shows the trsutful bidirectional relationship between customers\/guests and hotels.","1ab62da0":"## Task 2:\nDownload Diabetes data set from sklearn.datasets that is for linear regression. \nBuild basic forecasting model using linear regression. State the accuracy\nConvert the Y column into Outcome variable having (Yes and No or 1 and 0)\nBuild decision tree on it and state some of the rules.\nBuilding predictions using decision tree and logistic regression for the Outcome class. State the difference in training and testing scores for both algorithms.\n","34bbc15c":"generating columns form arrival_year columns so that we can perfrom variety of operation and query data.","7cec7b78":"First we need to set the parameters of loyality for the customers. let's say we define the loyal customers are those who are returning customers because Customer loyalty is an ongoing positive relationship between a customer and a business. It\u2019s what drives repeat purchases and prompts existing customers to choose your company.","3e123391":"# 3.\tFinding out which hotel type has more kids. You also need to check and identify the months and days for which there is more count of kids and babies as compared to others. ","bc375217":"### 4d.\tWhat type of rooms were assigned to them?","fce48595":"So it can be seen  from sorted bar chart as well that for Resort Hotels Saturday is been most occupied day while in City Hotels Friday is the most occupied day"}}