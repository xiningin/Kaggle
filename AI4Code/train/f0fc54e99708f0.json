{"cell_type":{"ea0343ae":"code","72d5e9a0":"code","9d48f948":"code","ced2f412":"code","091e7891":"code","db736b19":"code","2c7cdca4":"code","c63f9a66":"code","f279c3b7":"code","a80f2f3e":"code","e6094b50":"code","e8135db2":"code","e356a9cd":"code","84847ca1":"code","77991177":"code","ebab3d54":"code","68a62867":"code","0a6fd8df":"code","045512e4":"code","4ca21ede":"code","2c720e49":"code","4f7f587c":"code","1db6d815":"code","816d617c":"code","bd6aaa7b":"code","465408cd":"code","a68acc86":"code","4439fae5":"code","b7b1992b":"code","5c9beec7":"code","2a398adc":"code","1a69861a":"code","00f40ee4":"code","fe020f43":"code","09398a7d":"code","0623b086":"code","cbf88483":"code","6be817b1":"code","4434fffa":"code","dda099b9":"markdown","ded8fe13":"markdown","70665a32":"markdown","eaf5ef16":"markdown","60ded4cb":"markdown","491957e1":"markdown","fa8f5160":"markdown","8a943e1c":"markdown","1cce6f69":"markdown","2116045e":"markdown","e4171d3c":"markdown","6d2de84d":"markdown","7671abfc":"markdown","315e1850":"markdown"},"source":{"ea0343ae":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom imblearn.over_sampling import RandomOverSampler \nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport os, cv2\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Flatten, Dense, MaxPool2D\nfrom sklearn.metrics import confusion_matrix , classification_report\nfrom keras.utils import to_categorical","72d5e9a0":"import pandas as pd\ndata = pd.read_csv('\/kaggle\/input\/skin-cancer-mnist-ham10000\/hmnist_28_28_RGB.csv')\ndata.head()","9d48f948":"#I realize the last column being the label\ny = data['label']\nx = data.drop(columns = ['label'])\n#get x_train ,y_train\nx.shape","ced2f412":"other = pd.read_csv('\/kaggle\/input\/skin-cancer-mnist-ham10000\/HAM10000_metadata.csv')\nother.head()","091e7891":"#After review infomations of the data, I knew 'dx' column being diseases's name.\nclasses = {4: ('nv', ' melanocytic nevi'), \n           6: ('mel', 'melanoma'), \n           2 :('bkl', 'benign keratosis-like lesions'), \n           1:('bcc' , ' basal cell carcinoma'), \n           5: ('vasc', ' pyogenic granulomas and hemorrhage'), \n           0: ('akiec', 'Actinic keratoses and intraepithelial carcinomae'),  \n           3: ('df', 'dermatofibroma')}","db736b19":"sns.countplot(x = 'dx', data = other)\nplt.xlabel('Disease', size=20)\nplt.ylabel('Frequency', size=20)\nplt.title('Frequency Distribution of Classes', size=20)","2c7cdca4":"#I realize unbalance d\u00edtributed data","c63f9a66":"bar, ax = plt.subplots(figsize = (10,10))\nplt.pie(other['sex'].value_counts(), \n        labels = other['sex'].value_counts().index, \n        autopct=\"%.1f%%\")\nplt.title('Gender of Patient', size=20)","f279c3b7":"#maybe balance","a80f2f3e":"bar, ax = plt.subplots(figsize=(10,10))\nsns.histplot(other['age'])\nplt.title('Histogram of Age of Patients', size=20)","e6094b50":"#maybe balance","e8135db2":"value = other[['localization', 'sex']].value_counts().to_frame()\nvalue.reset_index(level=[1,0 ], inplace=True)\ntemp = value.rename(columns = {'localization':'location', 0: 'count'})\n\nbar, ax = plt.subplots(figsize = (12, 12))\nsns.barplot(x = 'location',  y='count', hue = 'sex', data = temp)\nplt.title('Location of disease over Gender', size = 16)\nplt.xlabel('Disease', size=12)\nplt.ylabel('Frequency\/Count', size=12)\nplt.xticks(rotation = 90)","e356a9cd":"oversample = RandomOverSampler()\nx,y  = oversample.fit_resample(x,y)\nx = np.array(x).reshape(-1,28,28,3)\nprint('Shape of Data :',x.shape)","84847ca1":"plt.figure(figsize = (10,10))\nsns.countplot(y)","77991177":"f , ax = plt.subplots(2,5)\nf.set_size_inches(10, 10)\nk = 0 \nfor i in range(2):\n    for j in range(5):\n        ax[i,j].imshow(x[k].reshape(28,28,3))\n        k = k + 1\n    plt.tight_layout()","ebab3d54":"x = (x-np.mean(x))\/np.std(x)","68a62867":"X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size=0.2, random_state=42)","0a6fd8df":"f , ax = plt.subplots(2,5)\nf.set_size_inches(10, 10)\nk = 0 \nfor i in range(2):\n    for j in range(5):\n        ax[i,j].imshow(X_train[k].reshape(28,28,3))\n        k = k + 1\n    plt.tight_layout()","045512e4":"#model_1, Because Input shape just have 28x28, so we need simple model\nmodel = Sequential()\nmodel.add(Conv2D(16, kernel_size = (3,3), input_shape = (28, 28, 3), activation = 'relu', padding = 'same'))\nmodel.add(Conv2D(32, kernel_size = (3,3), activation = 'relu'))\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Conv2D(32, kernel_size = (3,3), activation = 'relu', padding = 'same'))\nmodel.add(Conv2D(64, kernel_size = (3,3), activation = 'relu'))\nmodel.add(MaxPool2D(pool_size = (2,2), padding = 'same'))\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(7, activation='softmax'))\nmodel.summary()","4ca21ede":"tf.keras.utils.plot_model(model, show_shapes = True, show_dtype = True, show_layer_names = True, rankdir=\"TB\", expand_nested = True, dpi = 100) # ,to_file='model.png')","2c720e49":"Checkpoint = tf.keras.callbacks.ModelCheckpoint(filepath='best_model.h5',\n                                                  monitor='val_loss', mode='max',\n                                                 verbose=1)\nFile = 'SkinDiseases'\ncallback = [Checkpoint, \n             tf.keras.callbacks.EarlyStopping(patience = 1, monitor= \"val_loss\"),\n             tf.keras.callbacks.TensorBoard(log_dir = \"logs\/{}\".format(File))]","4f7f587c":"model.compile(loss = 'sparse_categorical_crossentropy',\n             optimizer = 'adam',\n              metrics = ['accuracy'])\nhistory = model.fit(X_train,\n                    Y_train,\n                    validation_split=0.2,\n                    batch_size = 128,\n                    epochs = 50,\n                    callbacks=[callback])","1db6d815":"plt.plot(history.history[\"accuracy\"] , 'ro-' , label = \"Training Accuracy\")\nplt.plot(history.history[\"val_accuracy\"] , 'go-' , label = \"Testing Accuracy\")\nplt.legend()\nplt.show()","816d617c":"plt.plot(history.history[\"loss\"] , 'ro-' , label = \"Training Loss\")\nplt.plot(history.history[\"val_loss\"] , 'go-' , label = \"Testing Loss\")\nplt.legend()\nplt.show()","bd6aaa7b":"#You can see from 35th epoch to 50th epoch, it have overfitting","465408cd":"#convert to one-hot\nY_train_1hot = to_categorical(Y_train)\nY_test_1hot = to_categorical(Y_test)","a68acc86":"Y_pred  = model.predict(X_test).round()\n","4439fae5":"target_names = [f\"{classes[i]}\" for i in range(7)]\nprint(classification_report(Y_test_1hot , Y_pred , target_names =target_names ))","b7b1992b":"cm = confusion_matrix(Y_test_1hot.argmax(axis = 1) , Y_pred.argmax(axis = 1))\ncm = pd.DataFrame(cm , index = [i for i in range(7)] , columns = [i for i in range(7)])\nplt.figure(figsize = (10,10))\nsns.heatmap(cm,cmap= \"Blues\", linecolor = 'black' , linewidth = 1 , annot = True, fmt='')","5c9beec7":"fpr = dict()\ntpr = dict()\nroc_auc = dict()\nfrom sklearn.metrics import roc_curve, auc","2a398adc":"for i in range(7):\n    fpr[i], tpr[i], _ = roc_curve(Y_test_1hot[:, i], Y_pred[:, i])\n    roc_auc[i] = auc(fpr[i], tpr[i])","1a69861a":"fpr[\"micro\"], tpr[\"micro\"], _ = roc_curve(Y_test_1hot.ravel(), Y_pred.ravel())\nroc_auc[\"micro\"] = auc(fpr[\"micro\"], tpr[\"micro\"])","00f40ee4":"plt.figure()\nlw = 2\nplt.plot(fpr[2], tpr[2], color='darkorange',\n         lw=lw, label='ROC curve (area = %0.3f)' % roc_auc[2])\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('SkinClasicify characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","fe020f43":"from scipy import interp\nfrom itertools import cycle\n# First aggregate all false positive rates\nall_fpr = np.unique(np.concatenate([fpr[i] for i in range(7)]))\n\n# Then interpolate all ROC curves at this points\nmean_tpr = np.zeros_like(all_fpr)\nfor i in range(7):\n    mean_tpr += interp(all_fpr, fpr[i], tpr[i])\n\n# Finally average it and compute AUC\nmean_tpr \/= 7\n\nfpr[\"macro\"] = all_fpr\ntpr[\"macro\"] = mean_tpr\nroc_auc[\"macro\"] = auc(fpr[\"macro\"], tpr[\"macro\"])\n\n# Plot all ROC curves\nplt.figure(figsize = (20,20))\nplt.plot(fpr[\"micro\"], tpr[\"micro\"],\n         label='micro-average ROC curve (area = {0:0.5f})'\n               ''.format(roc_auc[\"micro\"]),\n         color='deeppink', linestyle=':', linewidth=4)\n\nplt.plot(fpr[\"macro\"], tpr[\"macro\"],\n         label='macro-average ROC curve (area = {0:0.5f})'\n               ''.format(roc_auc[\"macro\"]),\n         color='navy', linestyle=':', linewidth=4)\n\ncolors = cycle(['aqua', 'darkorange', 'cornflowerblue'])\nfor i, color in zip(range(7), colors):\n    plt.plot(fpr[i], tpr[i], color=color, lw=lw,\n             label='ROC curve of class {0} (area = {1:0.5f})'\n             ''.format(i, roc_auc[i]))\nplt.plot([0, 1], [0, 1], 'k--', lw=lw)\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Some extension of Receiver operating characteristic to multi-class')\nplt.legend(loc=\"lower right\")\nplt.show()","09398a7d":"model.load_weights('best_model.h5')","0623b086":"loss, acc = model.evaluate(X_test, Y_test, verbose=2)","cbf88483":"!pip install google.colab\nfrom google.colab.patches import cv2_imshow\nsrcdir = '\/kaggle\/input\/skin-cancer-mnist-ham10000\/HAM10000_images_part_1'\ncount=0\nfor temp in os.listdir(srcdir):\n    img = cv2.imread(os.path.join(srcdir, temp))\n    cv2.imwrite(temp, img)\n    cv2_imshow(img)\n    img = cv2.resize(img, (28, 28))\n    result = model.predict(img.reshape(1, 28, 28, 3))\n    max_prob = max(result[0])\n    class_ind = list(result[0]).index(max_prob)\n    class_name = classes[class_ind]\n    print(class_name)\n    count+=1\n    if count>10:\n        break","6be817b1":"!pip install visualkeras\nimport visualkeras","4434fffa":"visualkeras.layered_view(model).show() # display using your system viewer\nvisualkeras.layered_view(model, to_file='output.png') # write to disk\nvisualkeras.layered_view(model, to_file='output.png').show() # write and show\nvisualkeras.layered_view(model)","dda099b9":"# **IMPORT LIBRARIES**","ded8fe13":"# **Location of disease over Gende**","70665a32":"# **OTHER DATA**","eaf5ef16":"# **MODEL**","60ded4cb":"# **Standardization and Splitting Data**","491957e1":"# **Model Testing**","fa8f5160":"# **Oversampling**","8a943e1c":"As you see the data is imbalanced , so let's make it balanced","1cce6f69":"# **Histogram of Age of Patients**","2116045e":"# **Model Inference**","e4171d3c":"# **IMPORT DATA (HAM10000)**","6d2de84d":"# **Plot Accuracy and Loss**","7671abfc":"# **Distribution of Disease over Gender**","315e1850":"# **FREQUENCY DISTRIBUTION OF DATA**"}}