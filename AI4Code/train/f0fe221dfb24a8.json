{"cell_type":{"e69abf03":"code","186c6a46":"code","62982cce":"code","24a26c28":"code","5d09d179":"code","0446149b":"code","6277ad5e":"code","94ab2f22":"code","5eb194cf":"code","38be02d4":"code","1c8139bd":"code","c1befe94":"code","c15bf0b0":"code","ad1ee4cb":"code","7e2f9e97":"code","138764d4":"code","103409db":"code","9211c7df":"code","6046bcdc":"code","7fdeea44":"code","85ee69a4":"code","58976034":"code","51940e84":"code","ba0e9f93":"code","69466ad9":"code","838b91ee":"code","f4dc351b":"code","21991a4d":"markdown","3c8a4b40":"markdown","c4e98aad":"markdown","2d195bda":"markdown","8a4fc321":"markdown","ee285881":"markdown","7323e806":"markdown","59260c9b":"markdown"},"source":{"e69abf03":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nimport matplotlib\nmatplotlib.rcParams['figure.figsize'] = (15,8)\n#Plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nfrom warnings import filterwarnings as fw\nfw('ignore')\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))","186c6a46":"data = pd.read_csv('..\/input\/beauty.csv')\ndata.head()","62982cce":"plt.figure(figsize=(12,8))\nsns.heatmap(data.corr(),cmap='PiYG',linewidths=0.5, annot=True), ;","24a26c28":"data.looks.nunique()","5d09d179":"plt.figure(figsize=(15,8))\ndata['looks'].value_counts().plot(kind='bar');\nplt.xlabel('Looks',fontsize = 14);\nplt.ylabel('#People',fontsize = 14);\nplt.title('Distribution of Looks',fontsize = 18);","0446149b":"plt.figure(figsize=(15,8))\nsns.distplot(data['wage'], fit = norm);","6277ad5e":"plt.figure(figsize=(15,8))\nplt.plot(data.groupby('educ')['wage'].mean());\nplt.title('Average Variation in Wage with Education Level');\nplt.xlabel('Education Level');\nplt.ylabel('Mean Wage Level');","94ab2f22":"data.female.value_counts()","5eb194cf":"plt.figure(figsize = (15,7))\nsns.countplot(data.educ ,hue=data.female);","38be02d4":"pd.crosstab(data['female'],data['married'])","1c8139bd":"df = pd.read_csv('..\/input\/telecom_churn.csv')\ndf.head()","c1befe94":"df['Churn'] = df['Churn']*1 # To make the column numeric","c15bf0b0":"df.Churn.value_counts().plot(kind='bar');","ad1ee4cb":"plt.figure(figsize=(15,15))\nsns.heatmap(df.corr(),cmap='PiYG',annot=True,linewidths=0.5);","7e2f9e97":"trace1 = go.Scatter(\n                    x = df['Customer service calls'],\n                    y = df['Total day charge'],\n                    mode = \"lines\",\n                    name = \"Day Charge\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df['Total day calls'])\n\ntrace2 = go.Scatter(\n                    x = df['Customer service calls'],\n                    y = df['Total eve charge'],\n                    mode = \"lines\",\n                    name = \"Evening Charge\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df['Total eve calls'])\n\ntrace3 = go.Scatter(\n                    x = df['Customer service calls'],\n                    y = df['Total night charge'],\n                    mode = \"lines\",\n                    name = \"Day Charge\",\n                    marker = dict(color = 'rgba(255, 128, 10, 0.8)'),\n                    text= df['Total night calls'])\n\ndata = [trace1, trace2, trace3]\n\nlayout = dict(title = 'Charges paid by Customers vs Service Calls',\n              xaxis= dict(title= 'Customer Service Calls',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","138764d4":"df['Total minutes']=df['Total day minutes']+df['Total eve minutes']+df['Total night minutes']\ndf['Total calls'] = df['Total day calls'] + df['Total eve calls'] + df['Total night calls']\ntrace1 = go.Histogram(\n    x=df['Total minutes'],\n    opacity=0.75,\n    name = \"Total Minutes\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=df['Total calls'],\n    opacity=0.75,\n    name = \"Total Calls\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title='Total Minutes vs Total Calls',\n                   xaxis=dict(title='Minutes and Calls Distrubution'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","103409db":"df['Total charge'] = df['Total day charge'] + df['Total eve charge'] + df['Total night charge']\ntrace0 = go.Box(\n    y=df['Total calls'],\n    name = '# Total Calls',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=df['Total minutes'],\n    name = '# Total Minutes',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n         \n)\ntrace2 = go.Box(\n    y=df['Total charge'],\n    name = '# Total Charge',\n    marker = dict(\n        color = 'rgb(256, 128, 128)',\n    )         \n)         \ndata = [trace0, trace1, trace2]\niplot(data)","9211c7df":"sns.pairplot(df, hue='Churn');","6046bcdc":"sns.lmplot(x='Total calls', y='Total charge', hue='Churn', markers='o',\n           fit_reg=False, data = df);","7fdeea44":"_, axes = plt.subplots(1, 3, sharey=True, figsize=(20, 6))\nsns.countplot(x = 'Customer service calls', hue = 'Churn', data=df);\nsns.countplot(x='International plan', hue='Churn', data=df, ax=axes[0]);\nsns.countplot(x='Voice mail plan', hue='Churn', data=df, ax=axes[1]);","85ee69a4":"from sklearn.manifold import TSNE\nfrom sklearn.preprocessing import StandardScaler","58976034":"dataframe = df.drop(['Churn', 'State'], axis=1)\ndataframe['International plan'] = dataframe['International plan'].map({'Yes': 1, 'No': 0})\ndataframe['Voice mail plan'] = dataframe['Voice mail plan'].map({'Yes': 1, 'No': 0})\n\n# Scaling for tSNE\nscaler = StandardScaler()\nscaled_df = scaler.fit_transform(dataframe)","51940e84":"%%time\ntsne = TSNE(random_state=17)\ntsne_repr = tsne.fit_transform(scaled_df)","ba0e9f93":"plt.figure(figsize=(15,8))\nplt.scatter(tsne_repr[:, 0], tsne_repr[:, 1]);","69466ad9":"plt.figure(figsize=(15,8))\nplt.scatter(tsne_repr[:, 0], tsne_repr[:, 1],\n            c=df['Churn'].map({False: 'blue', True: 'orange'}), alpha=.7);","838b91ee":"_, axes = plt.subplots(1, 2, sharey=True, figsize=(12, 5))\n\nfor i, name in enumerate(['International plan', 'Voice mail plan']):\n    axes[i].scatter(tsne_repr[:, 0], tsne_repr[:, 1], \n                    c=df[name].map({'Yes': 'orange', 'No': 'blue'}), alpha=.5);\n    axes[i].set_title(name);","f4dc351b":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=df['Total calls'],\n    y=df['Total charge'],\n    z=df['Churn'],\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,0,0)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","21991a4d":"## 3D\n### You can see how churned and loyal customers have been partitioned in the 3-d graph below.","3c8a4b40":"#### Looks is our Dependent or Target variable here, so let's look into it first.","c4e98aad":"### If you like the visualizations, please Upvote the kernel.\n","2d195bda":"## Plotly","8a4fc321":"Reference : [This excellent kernel on plotly.](https:\/\/www.kaggle.com\/kanncaa1\/plotly-tutorial-for-beginners)\nand Thanks [Yury](https:\/\/www.kaggle.com\/kashnitsky).","ee285881":"## Building tSNE representation.","7323e806":"This suggests that we have 5 unique values for our target variable. 5 being the most beautiful and then decreasing to 1.","59260c9b":"The graph shows that looks are more likely to be 3 which is an average value while odds of being at both exterems are low."}}