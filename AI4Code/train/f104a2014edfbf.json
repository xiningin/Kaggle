{"cell_type":{"2dba9a4f":"code","d1e58f4b":"code","4d5d0162":"code","8a0fb41c":"code","4af12346":"code","b59673bb":"code","3341cdc5":"code","e368010b":"code","8281beed":"code","878646a0":"code","46a90a1b":"code","b740ce87":"code","94b206c5":"code","bee2b73c":"code","c6ba5f0a":"code","014536fa":"code","efc3edac":"code","bcb0d948":"code","1b323d0c":"code","61472082":"code","d6b84fb9":"code","18e07745":"code","04476e73":"code","55ee5b89":"code","3f9d596b":"code","230bfb81":"code","30cce3e2":"code","956275ae":"code","04fcff32":"code","905c0c7f":"code","664a39a9":"code","bfa78e35":"code","7a8ff13c":"code","1f957f33":"code","efbe47c3":"code","1ac715f8":"code","ccbf0dff":"code","f154b13c":"code","25ffa0d6":"code","4ffcaf5e":"code","d87ab2b4":"code","f87591ea":"code","46c202f5":"code","662cbd7f":"code","33702686":"code","3479df0f":"code","47ca9528":"code","913b5b8d":"code","ae09d35b":"code","1333ec03":"code","9958754d":"code","044d9f04":"code","46f82f3e":"code","a0f79647":"code","135a2840":"code","f1f02c72":"code","b287c8de":"code","3a0ce93f":"code","1120373a":"code","fe0d1ba5":"code","90c3c124":"code","6879fdb4":"code","e4507ab8":"code","e07fff6d":"code","ceb3e649":"code","63c9711f":"code","ca3c0b1d":"code","dc80806a":"code","782d550b":"code","fd06fa0b":"code","ea966d0b":"code","be4e0603":"code","297ef6bf":"code","881c7575":"code","7100d9ce":"code","8dd6d432":"code","2a845799":"code","51ee4fa2":"code","8463d914":"code","3beaa938":"code","97569401":"code","df954925":"code","f019bae6":"code","03dba4da":"code","ef5352fa":"code","fbabe629":"code","2ff1cad0":"code","2a08f863":"code","2f88c97b":"markdown","615ea1c8":"markdown","66880101":"markdown","52719edd":"markdown","f2fd0711":"markdown","aed46855":"markdown","59761fb2":"markdown","1fe66b12":"markdown","02bfd2a8":"markdown","5dc524aa":"markdown","e6615a89":"markdown","1e87fe91":"markdown","c4256ff5":"markdown","7d245e0e":"markdown","5a07e319":"markdown","efe25bfa":"markdown","79484f2b":"markdown","40c60a7a":"markdown","c0b1dd68":"markdown","340620ff":"markdown","d9b0c1f9":"markdown","f499565a":"markdown","c2e94fb0":"markdown","cf6e6e0e":"markdown","3b2f92c2":"markdown","2c6d08f1":"markdown","ee6072f6":"markdown","ec0fd832":"markdown","48fdd859":"markdown","d7349f44":"markdown","8346cae6":"markdown","02f212fd":"markdown","f14d9ab6":"markdown","94b63708":"markdown","07a1e07c":"markdown","e9641b13":"markdown","1ab43fb2":"markdown","5e885b6d":"markdown","25247213":"markdown","bf2d1191":"markdown","53e3be8b":"markdown","087566f4":"markdown","7112a09b":"markdown","820289a4":"markdown","241b473b":"markdown","948a1aad":"markdown","95ce747a":"markdown","a824ad11":"markdown","f3fc52ca":"markdown"},"source":{"2dba9a4f":"import pandas as pd\nimport numpy as np\nimport sklearn\nimport matplotlib.pyplot as plt\nimport os\nimport seaborn as sns\n\n%matplotlib inline\n\n# Checking for all file\nos.listdir('..\/input')","d1e58f4b":"# Training data\napp_train = pd.read_csv('..\/input\/application_train.csv')\nprint('Training data shape: ', app_train.shape)\napp_train.head()","4d5d0162":"# Testing data features\napp_test = pd.read_csv('..\/input\/application_test.csv')\nprint('Testing data shape: ', app_test.shape)\napp_test.head()","8a0fb41c":"app_train['TARGET'].value_counts().plot.bar()\nn_group = app_train['TARGET'].value_counts()\nn_group_sum = n_group.sum()\n\nprint('Repaid: {}'.format(n_group[0]))\nprint('Not repaid: {}'.format(n_group[1]))\n\nprint('Repaid: {:.2f} {}'.format(n_group[0]\/n_group_sum*100, '%'))\nprint('Not repaid: {:.2f} {}'.format(n_group[1]\/n_group_sum*100, '%'))","4af12346":"def summary_missing(dataset):\n    n_miss = dataset.isnull().sum()\n    n_obs = dataset.shape[0]\n    n_miss_per = n_miss\/n_obs*100\n    n_miss_tbl = pd.concat([n_miss, n_miss_per], axis = 1).sort_values(1, ascending = False).round(1)\n    n_miss_tbl = n_miss_tbl[n_miss_tbl[1] != 0]\n    print('No fields: ', dataset.shape[0])\n    print('No missing fields: ', n_miss_tbl.shape[0])\n    n_miss_tbl = n_miss_tbl.rename(columns = {0:'Number mising Value', 1:'Percentage missing Value'})\n    return n_miss_tbl\n\nsummary_missing(app_train)","b59673bb":"def _tbl_dtype(dataset):\n    sum_dtype = pd.DataFrame(dataset.dtypes).sort_values(0).rename(columns = {0:'Data Type'})\n    return sum_dtype\n\ntable_dtype = _tbl_dtype(app_train)\ntable_dtype","3341cdc5":"table_dtype['Data Type'].value_counts()","e368010b":"# C\u00e1c d\u00f2ng d\u1eef li\u1ec7u d\u1ea1ng object\napp_train.select_dtypes('object').head()","8281beed":"app_train.select_dtypes('object').apply(pd.Series.nunique)","878646a0":"dtypes_object = table_dtype[table_dtype['Data Type'] == 'object'].index.tolist()\ndtypes_object = [col for col in dtypes_object if col not in ['OCCUPATION_TYPE', 'ORGANIZATION_TYPE']]\n\n\ndef _plot_bar_classes(cols):\n    app_train[cols].value_counts().plot.bar()\n\nplt.figure(figsize = (20, 15))    \nfor i in range(1, 15, 1):\n    plt.subplot(5, 3, i)\n    _plot_bar_classes(dtypes_object[i-1])\n    plt.title(dtypes_object[i-1])","46a90a1b":"def _per_categorical(col):\n    tbl_per = pd.pivot_table(app_train[['TARGET', col]], index = ['TARGET'], columns = [col], aggfunc = len)\n    per_categorical = (tbl_per.iloc[0, :]\/tbl_per.iloc[1, :]).sort_values(ascending = True)\n    print(per_categorical)\n    print('-------------------------------------\\n')\n    return per_categorical\n\nfor col in dtypes_object:\n    _per_categorical(col)","b740ce87":"def _plot_per_categorical(col):\n    tbl_per = pd.pivot_table(app_train[['TARGET', col]], index = ['TARGET'], columns = [col], aggfunc = len)\n    per_categorical = (tbl_per.iloc[0, :]\/tbl_per.iloc[1, :]).sort_values(ascending = True)\n    per_categorical.plot.bar()\n    plt.title(col)\n    return per_categorical\n\nplt.figure(figsize = (20, 15))\ni = 0\nfor col in dtypes_object:\n    i += 1\n    plt.subplot(5, 3, i)\n    _plot_per_categorical(col)","94b206c5":"plt.figure(figsize = (15, 7))\ni = 0\nfor col in ['ORGANIZATION_TYPE', 'OCCUPATION_TYPE']:\n    i += 1\n    plt.subplot(2, 1, i)\n    _plot_per_categorical(col)","bee2b73c":"for col in ['ORGANIZATION_TYPE', 'OCCUPATION_TYPE']:\n    _per_categorical(col)","c6ba5f0a":"# Nh\u00f3m c\u00e1c gi\u00e1 tr\u1ecb rate g\u1ea7n b\u1eb1ng nhau v\u00e0o 1 nh\u00f3m theo schedule_div.\ndef _devide_group(col, schedule_div = None, n_groups = 3, *kwargs):\n    cols = []\n    tbl_per_cat = _per_categorical(col)\n    \n    if schedule_div is None:\n        n_cats = len(tbl_per_cat)\n        n_val_incat = int(n_cats\/n_groups)\n        n_odd = n_cats - n_groups*n_val_incat\n\n        for i in range(n_groups):\n            if i == n_groups - 1:\n                el = tbl_per_cat[(n_val_incat*i):(n_val_incat*(i+1)+n_odd)].index.tolist()\n            else:\n                el = tbl_per_cat[(n_val_incat*i):n_val_incat*(i+1)].index.tolist()    \n            cols.append(el)\n    else:\n        idx = 0\n        for n_cols in schedule_div:\n            el_cols = tbl_per_cat[idx:(idx+n_cols)].index.tolist()\n            cols.append(el_cols)\n            idx += n_cols\n                \n    return cols\n\ncols_OCCUPATION_TYPE = _devide_group(col = 'OCCUPATION_TYPE', schedule_div = [1, 7, 9, 1])\ncols_OCCUPATION_TYPE","014536fa":"cols_ORGANIZATION_TYPE = _devide_group(col = 'ORGANIZATION_TYPE')\ncols_ORGANIZATION_TYPE","efc3edac":"def _map_lambda_cats(cols_list, colname, x): \n    cats = list(map(lambda x:colname + '_' + str(x), np.arange(len(cols_list)).tolist()))\n    for i in range(len(cols_ORGANIZATION_TYPE)):\n        if x in cols_list[i]:\n            return cats[i]\n        \ndef _map_cats(cols_list, colname, dataset):                    \n    return list(map(lambda x: _map_lambda_cats(cols_list, colname, x), \n                    dataset[colname]))\n\napp_train['ORGANIZATION_TYPE'] = _map_cats(cols_ORGANIZATION_TYPE, 'ORGANIZATION_TYPE', app_train)\npd.Series.unique(app_train['ORGANIZATION_TYPE'])","bcb0d948":"app_test['ORGANIZATION_TYPE'] = _map_cats(cols_ORGANIZATION_TYPE, 'ORGANIZATION_TYPE', app_test)\npd.Series.unique(app_test['ORGANIZATION_TYPE'])","1b323d0c":"app_train['OCCUPATION_TYPE'] = _map_cats(cols_OCCUPATION_TYPE, 'OCCUPATION_TYPE', app_train)\napp_test['OCCUPATION_TYPE'] = _map_cats(cols_OCCUPATION_TYPE, 'OCCUPATION_TYPE', app_test)","61472082":"i = 0\nplt.figure(figsize = (16, 8))\nfor col in ['ORGANIZATION_TYPE', 'OCCUPATION_TYPE']:\n    i += 1\n    plt.subplot(2, 1, i)\n    _plot_per_categorical(col)","d6b84fb9":"app_train = pd.get_dummies(app_train)\napp_test = pd.get_dummies(app_test)","18e07745":"print('app_train shape: ', app_train.shape)\nprint('app_test shape: ', app_test.shape)","04476e73":"for fea_name in app_train.columns:\n    if fea_name not in app_test.columns:\n        print(fea_name)","55ee5b89":"TARGET = app_train['TARGET']\n\n# L\u1ec7nh align theo axis = 1 s\u1ebd l\u1ea5y nh\u1eefng tr\u01b0\u1eddng xu\u1ea5t hi\u1ec7n \u0111\u1ed3ng th\u1eddi trong app_train v\u00e0 app_test\napp_train, app_test = app_train.align(app_test, join = 'inner', axis = 1)\n# Sau l\u1ec7nh align bi\u1ebfn TARGET b\u1ecb m\u1ea5t, do \u0111\u00f3 ta c\u1ea7n g\u00e1n l\u1ea1i bi\u1ebfn n\u00e0y\napp_train['TARGET'] = TARGET\n\nprint('app_train shape: ', app_train.shape)\nprint('app_test shape: ', app_test.shape)","3f9d596b":"app_train.head()","230bfb81":"app_train['AMT_INCOME_TOTAL'].describe().plot.box()","30cce3e2":"app_train['AMT_INCOME_TOTAL'].describe()","956275ae":"def _plot_density(colname):\n    plt.figure(figsize = (10, 8))\n    sns.kdeplot(app_train[colname][app_train['TARGET'] == 0], label = 'Target = 0')\n    sns.kdeplot(app_train[colname][app_train['TARGET'] == 1], label = 'Target = 1')\n    plt.xlabel(colname)\n    plt.ylabel('Density')\n    plt.title('Distribution of %s'%colname)\n\n_plot_density('AMT_INCOME_TOTAL')","04fcff32":"def _zoom_3sigma(col, dataset, dataset_apl):\n    '''\n    col: T\u00ean c\u1ed9t d\u1eef li\u1ec7u\n    dataset: B\u1ea3ng d\u1eef li\u1ec7u g\u1ed1c s\u1eed d\u1ee5ng \u0111\u1ec3 t\u00ednh kho\u1ea3ng 3 sigma\n    dataset_apl: B\u1ea3ng d\u1eef li\u1ec7u m\u1edbi \u00e1p d\u1ee5ng kho\u1ea3ng 3 sigma \u0111\u01b0\u1ee3c l\u1ea5y t\u1eeb dataset.\n    '''\n    xs = dataset[col]\n    mu = xs.mean()\n    sigma = xs.std()\n    low =  mu - 3*sigma\n#     low =  0 if low < 0 else low\n    high = mu + 3*sigma\n    \n    def _value(x):\n        if x < low: return low\n        elif x > high: return high\n        else: return x\n    xapl = dataset_apl[col]    \n    xnew = list(map(lambda x: _value(x), xapl))\n    n_low = len([i for i in xnew if i == low])\n    n_high = len([i for i in xnew if i == high])\n    n = len(xapl)\n    print('Percentage of low: {:.2f}{}'.format(100*n_low\/n, '%'))\n    print('Percentage of high: {:.2f}{}'.format(100*n_high\/n, '%'))\n    print('Low value: {:.2f}'.format(low))\n    print('High value: {:.2f}'.format(high))\n    return xnew\n\n# Ki\u1ec3m tra v\u1edbi bi\u1ebfn FLAG_MOBIL\nx = _zoom_3sigma('FLAG_MOBIL', app_train, app_train)    ","905c0c7f":"app_train.dtypes.unique()","664a39a9":"# Th\u1ed1ng k\u00ea c\u00e1c gi\u00e1 tr\u1ecb kh\u00e1c bi\u1ec7t trong to\u00e0n b\u1ed9 c\u00e1c bi\u1ebfn.\ndef _count_unique(x):\n    return pd.Series.nunique(x)\n\ntbl_dis_val = app_train.apply(_count_unique).sort_values(ascending = False)\ntbl_dis_val[tbl_dis_val > 500]","bfa78e35":"cols_3sigma = tbl_dis_val[tbl_dis_val > 500].index.tolist()\n# Lo\u1ea1i b\u1ecf bi\u1ebfn key l\u00e0 SK_ID_CURR ra kh\u1ecfi danh s\u00e1ch:\ncols_3sigma = cols_3sigma[1:]","7a8ff13c":"# Lo\u1ea1i b\u1ecf c\u00e1c outlier b\u1eb1ng 3 sigma\nfor col in cols_3sigma:\n    print(col)\n    app_train[col] = _zoom_3sigma(col, app_train, app_train) \n    print('------------------------\\n')","1f957f33":"for col in cols_3sigma:\n    print(col)\n    app_test[col] = _zoom_3sigma(col, app_train, app_test) \n    print('------------------------\\n')","efbe47c3":"# Ki\u1ec3m tra l\u1ea1i bi\u1ebfn AMT_INCOME_TOTAL sau khi lo\u1ea1i b\u1ecf outlier\napp_train['AMT_INCOME_TOTAL'].describe().plot.box()","1ac715f8":"_plot_density('AMT_INCOME_TOTAL')","ccbf0dff":"from sklearn.preprocessing import MinMaxScaler, Imputer\n\nif 'TARGET' in app_train.columns:\n    TARGET = app_train.pop('TARGET')\n\n# G\u00e1n train v\u00e0 test v\u00e0o app_train v\u00e0 app_test; train, test \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 scale d\u1eef li\u1ec7u\ntrain = app_train\ntest = app_test\n\n# Kh\u1edfi t\u1ea1o inputer theo ph\u01b0\u01a1ng ph\u00e1p trung b\u00ecnh\ninputer = Imputer(strategy = 'mean')\ninputer.fit(train)\n\n# \u0110i\u1ec1n c\u00e1c gi\u00e1 tr\u1ecb NA b\u1eb1ng trung b\u00ecnh\ntrain = inputer.transform(train)\ntest = inputer.transform(test)\n\n# Kh\u1edfi t\u1ea1o scaler theo ph\u01b0\u01a1ng ph\u00e1p MinMaxScaler trong kho\u1ea3ng [-1, 1]\nscaler = MinMaxScaler(feature_range = (-1, 1))\nscaler.fit(train)\n\n# Scale d\u1eef li\u1ec7u tr\u00ean train v\u00e0 test\ntrain = scaler.transform(train)\ntest = scaler.transform(test)\n\n# Lo\u1ea1i b\u1ecf c\u1ed9t SK_ID_CURR \u0111\u1ea7u ti\u00ean do c\u1ed9t n\u00e0y l\u00e0 key. Khi c\u1ea7n l\u1ea5y t\u1eeb app_train v\u00e0 app_test sang\ntrain = train[:, 1:]\ntest = test[:, 1:]\n\nprint('train shape: ', train.shape)\nprint('test shape: ', test.shape)","f154b13c":"app_train['TARGET'] = TARGET\ncorr_tbl = app_train.corr()\ncorr_tbl","25ffa0d6":"corr_tbl['TARGET'].sort_values()","4ffcaf5e":"pd_train = pd.DataFrame(train, columns = app_train.columns[1:-1])\npd_train['TARGET'] = TARGET\npd_train.head()","d87ab2b4":"corr_tbl_train = pd_train.corr()\ncorr_tbl_train","f87591ea":"corr_tbl_train['TARGET'].sort_values()","46c202f5":"# L\u1ea5y ra danh s\u00e1ch 15 bi\u1ebfn c\u00f3 t\u01b0\u01a1ng quan l\u1edbn nh\u1ea5t t\u1edbi bi\u1ebfn m\u1ee5c ti\u00eau theo tr\u1ecb tuy\u1ec7t \u0111\u1ed1i.\ncols_corr_15 = np.abs(corr_tbl_train['TARGET']).sort_values()[-16:].index.tolist()\n\n# T\u00ednh ma tr\u1eadn h\u1ec7 s\u1ed1 t\u01b0\u01a1ng quan\ncols_tbl_15 = pd_train[cols_corr_15].corr()\n\n# Bi\u1ec3u di\u1ec5n tr\u00ean bi\u1ec3u \u0111\u1ed3 heatmap\nplt.figure(figsize = (13, 10))\nsns.heatmap(cols_tbl_15, cmap = plt.cm.RdYlBu_r, annot = True)","662cbd7f":"plt.figure(figsize = (20, 5))\nfor i in range(5):\n    _plot_density(cols_corr_15[i])","33702686":"age_bin = app_train[['TARGET', 'DAYS_BIRTH']]\nage_bin['YEAR_OLD'] = -app_train['DAYS_BIRTH']\/365\n\n# Ph\u00e2n chia kho\u1ea3ng tu\u1ed5i thanh 10 kho\u1ea3ng b\u1eb1ng nhau\nage_bin['DAYS_BIN'] = pd.cut(age_bin['YEAR_OLD'], bins = np.linspace(20, 70, num = 11))\nage_bin.head()","3479df0f":"age_bin.groupby(['DAYS_BIN']).mean()","47ca9528":"plt.figure(figsize = (8, 6))\nage_bin.groupby(['DAYS_BIN']).mean()['TARGET'].plot.barh(color = 'b')\nplt.xticks(rotation = '75')\nplt.xlabel('Not Repaid rate')","913b5b8d":"from sklearn.linear_model import LogisticRegression\n\n# X\u00e2y d\u1ef1ng m\u00f4 h\u00ecnh logistic v\u1edbi tham s\u1ed1 ki\u1ec3m so\u00e1t C = 0.0001\nlog_reg = LogisticRegression(C = 0.0001)\n\n# Hu\u1ea5n luy\u1ec7n m\u00f4 h\u00ecnh\nlog_reg.fit(train, TARGET)","ae09d35b":"train_pred_prob = log_reg.predict_proba(train)[:, 1]","1333ec03":"TARGET.value_counts()\/TARGET.value_counts().sum()","9958754d":"from sklearn.metrics import roc_curve, precision_recall_curve\nfpr, tpr, thres = precision_recall_curve(TARGET, train_pred_prob)\n\ndef _plot_roc_curve(fpr, tpr, thres):\n    plt.figure(figsize = (10, 8))\n    plt.plot(fpr, tpr, 'b-', label = 'ROC')\n    plt.plot([0, 1], [0, 1], '--')\n    plt.axis([0, 1, 0, 1])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC Curve')\n\n_plot_roc_curve(fpr, tpr, thres)","044d9f04":"from sklearn.metrics import precision_recall_curve\nprec, rec, thres = precision_recall_curve(TARGET, train_pred_prob)\n\ndef _plot_prec_rec_curve(prec, rec, thres):\n    plt.figure(figsize = (10, 8))\n    plt.plot(thres, prec[:-1], 'b--', label = 'Precision')\n    plt.plot(thres, rec[:-1], 'g-', label = 'Recall')\n    plt.xlabel('Threshold')\n    plt.ylabel('Probability')\n    plt.title('Precsion vs Recall Curve')\n    plt.legend()\n\n_plot_prec_rec_curve(prec, rec, thres)","46f82f3e":"print(cols_corr_15)","a0f79647":"from sklearn.preprocessing import PolynomialFeatures, Imputer, MinMaxScaler\n\n# Kh\u1edfi t\u1ea1o c\u00e1c preprocessing. Trong \u0111\u00f3 inputer theo mean, minmax scaler theo kho\u1ea3ng 0, 1 v\u00e0 polynomial features b\u1eadc 3.\ninputer = Imputer(strategy = 'mean')\nminmax_scaler = MinMaxScaler(feature_range = (0, 1))\npoly_engineer = PolynomialFeatures(degree = 3)\n\n# L\u1ea5y c\u00e1c feature c\u00f3 t\u01b0\u01a1ng quan l\u1edbn nh\u1ea5t \u0111\u1ebfn bi\u1ebfn m\u1ee5c ti\u00eau t\u1eeb app_train v\u00e0 app_test\nTARGET = app_train[cols_corr_15[-1]]\ntrain_poly_fea = app_train[cols_corr_15[:-1]]\ntest_poly_fea = app_test[cols_corr_15[:-1]]\n\n# input d\u1eef li\u1ec7u missing\ninputer = inputer.fit(train_poly_fea)\ntrain_poly_fea = inputer.transform(train_poly_fea)\ntest_poly_fea = inputer.transform(test_poly_fea)\n\n# Minmax scaler d\u1eef li\u1ec7u\nminmax_scaler = minmax_scaler.fit(train_poly_fea)\ntrain_poly_fea = minmax_scaler.transform(train_poly_fea)\ntest_poly_fea = minmax_scaler.transform(test_poly_fea)\n\nprint('train_poly_fea shape: ', train_poly_fea.shape)\nprint('test_poly_fea shape: ', test_poly_fea.shape)","135a2840":"# Polynormial features d\u1eef li\u1ec7u\npoly_engineer = poly_engineer.fit(train_poly_fea)\ntrain_poly_fea = poly_engineer.transform(train_poly_fea)\ntest_poly_fea = poly_engineer.transform(test_poly_fea)\n\nprint('train_poly_fea shape: ', train_poly_fea.shape)\nprint('test_poly_fea shape: ', test_poly_fea.shape)","f1f02c72":"features = poly_engineer.get_feature_names(input_features = cols_corr_15[:-1])\nfeatures[:10]","b287c8de":"from sklearn.linear_model import LogisticRegression\n\n# X\u00e2y d\u1ef1ng m\u00f4 h\u00ecnh h\u1ed3i qui logistic v\u1edbi tham s\u1ed1 ki\u1ec3m so\u00e1t l\u00e0 C = 0.0001\nlg_reg = LogisticRegression(C = 0.0001)\nlg_reg.fit(train_poly_fea, TARGET)\nlg_reg","3a0ce93f":"# D\u1ef1 b\u00e1o x\u00e1c xu\u1ea5t logistic\ntrain_pred_prob = lg_reg.predict_proba(train_poly_fea)[:, 1]","1120373a":"# Bi\u1ec3u di\u1ec5n \u0111\u01b0\u1eddng roc_curve\nfrom sklearn.metrics import roc_curve\nfpr, tpr, thres = roc_curve(TARGET, train_pred_prob)\n\n\ndef _plot_roc_curve(fpr, tpr, thres):\n    roc = plt.figure(figsize = (10, 8))\n    plt.plot(fpr, tpr, 'b-', label = 'ROC')\n    plt.plot([0, 1], [0, 1], '--')\n    plt.axis([0, 1, 0, 1])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC Curve')\n    return roc\n\n# L\u01b0u bi\u1ec3u \u0111\u1ed3 v\u00e0o p1\np1 = _plot_roc_curve(fpr, tpr, thres)","fe0d1ba5":"from sklearn.metrics import auc\n#0.7127599620726505\nauc(fpr, tpr)","90c3c124":"from sklearn.metrics import precision_recall_curve, accuracy_score\n\nprec, rec, thres = precision_recall_curve(TARGET, train_pred_prob)\n\ndef _plot_prec_rec_curve(prec, rec, thres):\n    plot_pr = plt.figure(figsize = (10, 8))\n    plt.plot(thres, prec[:-1], 'b--', label = 'Precision')\n    plt.plot(thres, rec[:-1], 'g-', label = 'Recall')\n    plt.xlabel('Threshold')\n    plt.ylabel('Probability')\n    plt.title('Precsion vs Recall Curve')\n    return plot_pr\n\n_plot_prec_rec_curve(prec, rec, thres)","6879fdb4":"# Accuracy\ntrain_pred_label = lg_reg.predict(train_poly_fea)\naccuracy_score(TARGET, train_pred_label)","e4507ab8":"from sklearn.ensemble import RandomForestClassifier\n\n# Kh\u1edfi t\u1ea1o r\u1eebng c\u00e2y\nrd_classifier = RandomForestClassifier(n_estimators = 100, # S\u1ed1 c\u00e2y trong r\u1eebng c\u00e2y\n                                       max_depth = 5, # \u0110\u1ed9 s\u00e2u c\u1ee7a c\u00e2y\n                                       random_state = 123, # Khai b\u00e1o seed \u0111\u1ec3 m\u00f4 h\u00ecnh kh\u00f4ng \u0111\u1ed5i cho c\u00e1c l\u1ea7n ch\u1ea1y sau\n                                       verbose = 1, # In log c\u1ee7a qu\u00e1 tr\u00ecnh hu\u1ea5n luy\u1ec7n\n                                       n_jobs = -1 # S\u1eed d\u1ee5ng \u0111a lu\u1ed3ng \u0111\u1ec3 v\u1eadn h\u00e0nh m\u00f4 h\u00ecnh\n                                      )\nrd_classifier","e07fff6d":"# Hu\u1ea5n luy\u1ec7n m\u00f4 h\u00ecnh\nrd_classifier.fit(train_poly_fea, TARGET)\n\n# D\u1ef1 b\u00e1o tr\u00ean t\u1eadp train\ntrain_prob_rd = rd_classifier.predict_proba(train_poly_fea)[:,1]","ceb3e649":"fpr2, tpr2, thres2 = roc_curve(TARGET, train_prob_rd)\np2 = _plot_roc_curve(fpr, tpr, thres)","63c9711f":"plt.figure(figsize = (10, 8))\nplt.plot(fpr2, tpr2, 'b-', label = 'Random Forest')\nplt.plot(fpr, tpr, 'r-', label = 'Logistic')\nplt.plot([0, 1], [0, 1], '--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.legend()","ca3c0b1d":"from sklearn.metrics import auc\n#0.7300858815170105\nauc(fpr2, tpr2)","dc80806a":"prec, rec, thres = precision_recall_curve(TARGET, train_pred_prob)\n_plot_prec_rec_curve(prec, rec, thres)","782d550b":"# L\u1ea5y th\u00f4ng tin v\u1ec1 m\u1ee9c \u0111\u1ed9 quan tr\u1ecdng c\u00e1c bi\u1ebfn t\u00e1c \u0111\u1ed9ng l\u00ean bi\u1ebfn m\u1ee5c ti\u00eau\nfeature_importance = rd_classifier.feature_importances_\nfeature_importance = pd.DataFrame({'importance values': feature_importance})\nfeature_importance.index = features\nfeature_importance = feature_importance.sort_values('importance values', ascending = False)\nfeature_importance[:10]","fd06fa0b":"feature_importance[:10].sort_values('importance values', ascending = True).plot.barh(figsize = (8, 6))\nplt.yticks(rotation = 15)\nplt.xlabel('Importance values')","ea966d0b":"feature_importance.iloc[:5, 0].tolist()","be4e0603":"from sklearn.metrics import accuracy_score\ntrain_label_rd = rd_classifier.predict(train_poly_fea)\naccuracy_score(train_label_rd, TARGET)","297ef6bf":"np.unique(train_label_rd, return_counts = True)","881c7575":"from sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nimport lightgbm as lgb\nimport gc","7100d9ce":"lgb_classifier = lgb.LGBMClassifier(n_estimator = 10000, \n                                    objective = 'binary', \n                                    class_weight = 'balanced',\n                                    learning_rate = 0.05,\n                                    reg_alpha = 0.1,\n                                    reg_lambda = 0.1,\n                                    subsample = 0.8,\n                                    n_job = -1,\n                                    random_state = 12\n                                   )\nlgb_classifier","8dd6d432":"kfold = KFold(n_splits = 10, shuffle = True, random_state = 12)\nvalid_scores = []\ntrain_scores = []\ncount = 0\nfor train_idx, valid_idx in kfold.split(train_poly_fea):\n    count += 1\n    # Split train, valid\n    train_features, train_labels = train_poly_fea[train_idx], TARGET[train_idx]\n    valid_features, valid_labels = train_poly_fea[valid_idx], TARGET[valid_idx]\n    lgb_classifier.fit(train_features, train_labels, eval_metric = 'auc',\n              eval_set = [(valid_features, valid_labels), (train_features, train_labels)],\n              eval_names = ['valid', 'train'], \n              early_stopping_rounds = 100, verbose = 200)\n    \n    valid_score = lgb_classifier.best_score_['valid']['auc'] \n    train_score = lgb_classifier.best_score_['train']['auc'] \n    \n    valid_scores.append(valid_score)\n    train_scores.append(train_score)\n    \n    print('fold time: {}; train score: {}; valid score: {}'.format(count, valid_score, train_score))","2a845799":"# Deep learning v\u1edbi Keras\nfrom keras.layers import Input, Dense, Flatten, Concatenate, concatenate, Dropout, Lambda\nfrom keras.models import Model\nfrom keras.layers.embeddings import Embedding","51ee4fa2":"train.shape","8463d914":"# design neural network\ninput_els = []\nencode_els = []\n\n# Generate a list include many Input layers\n\nfor i in range(train.shape[1]):\n    # input alway have the shape (*, 1)\n    input_els.append(Input(shape = (1,)))\n    encode_els.append(input_els[-1])\n# encode_els","3beaa938":"# concate nate all layers\nencode_els = concatenate(encode_els) \n\n# After completed the input layers, we design the hidden layers\nhidden1 = Dense(units = 128, kernel_initializer = 'normal', activation = 'relu')(encode_els)\ndroplayer1 = Dropout(0.2)(hidden1)\nhidden2 = Dense(64, kernel_initializer = 'normal', activation = 'relu')(droplayer1)\ndroplayer2 = Dropout(0.2)(hidden2)\noutputlayer = Dense(1, kernel_initializer = 'normal', activation = 'sigmoid')(droplayer2)\n\nclassifier = Model(input = input_els, outputs = [outputlayer])","97569401":"classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\nclassifier.summary()","df954925":"# split train\/valid\nfrom sklearn.model_selection import KFold\ncount = 0\nkfold = KFold(n_splits = 10, shuffle = True, random_state = 12)\nvalid_scores = []\ntrain_scores = []\nfor train_idx, valid_idx in kfold.split(train_poly_fea):\n    while count < 1:\n        count += 1\n        # Split train, valid\n        train_features, train_labels = train[train_idx], TARGET[train_idx]\n        valid_features, valid_labels = train[valid_idx], TARGET[valid_idx]\n        classifier.fit(\n            [train_features[:, i] for i in range(train.shape[1])], #l\u1ea5y list to\u00e0n b\u1ed9 c\u00e1c c\u1ed9t\n            train_labels,\n            epochs=1,\n            batch_size=128,\n            shuffle=True,\n            validation_data=([valid_features[:, i] for i in range(train.shape[1])], valid_labels) \n        )","f019bae6":"# D\u1ef0 b\u00e1o tr\u00ean t\u1eadp train.\ntrain_prob_nn = classifier.predict([train[:, i] for i in range(train.shape[1])])\ntrain_prob_nn","03dba4da":"# np.save('train_prob_nn.npy',train_prob_nn)\n\nfpr4, tpr4, thres4 = roc_curve(TARGET, train_prob_nn)\n_plot_roc_curve(fpr4, tpr4, thres4)","ef5352fa":"from sklearn.metrics import auc\nauc(fpr4, tpr4)","fbabe629":"prec, rec, thres = precision_recall_curve(TARGET, train_prob_nn)\n_plot_prec_rec_curve(prec, rec, thres)","2ff1cad0":"# Save data\n# np.save('train1.npy', train)\n# np.save('test1.npy', test)\n# np.save('TARGET.npy', TARGET)\n","2a08f863":"# import numpy as np\n# train = np.load('train.npy')\n# print(train.shape)\n# test = np.load('test.npy')\n# print(test.shape)","2f88c97b":"Bi\u1ec3u \u0111\u1ed3 cho th\u1ea5y t\u1ef7 l\u1ec7 kh\u00f4ng tr\u1ea3 n\u1ee3 \u1edf nh\u1eefng ng\u01b0\u1eddi thu\u1ed9c nh\u00f3m tu\u1ed5i cao th\u1ea5p h\u01a1n so v\u1edbi nh\u00f3m tu\u1ed5i th\u1ea5p. H\u00e0nh vi n\u00e0y c\u00f3 th\u1ec3 l\u00e0 do ng\u01b0\u1eddi tr\u1ebb t\u1eeb 20-25 tu\u1ed5i ch\u01b0a c\u00f3 thu nh\u1eadp cao v\u00e0 c\u00e1c kho\u1ea3n ti\u1ebft ki\u1ec7m trong khi ng\u01b0\u1eddi gia c\u00f3 nhi\u1ec1u ti\u1ec1n ti\u1ebft ki\u1ec7m. \n\nSau khi x\u1eed l\u00fd d\u1eef li\u1ec7u missing v\u00e0 t\u00ecm hi\u1ec3u ph\u00e2n ph\u1ed1i t\u1ef7 l\u1ec7 Repaid\/ Not Repaid c\u1ee7a c\u00e1c bi\u1ebfn numeric. Ch\u00fang ta s\u1ebd h\u1ed3i qui m\u00f4 h\u00ecnh.","615ea1c8":"Ta coi c\u00e1c bi\u1ebfn c\u00f3 s\u1ed1 l\u01b0\u1ee3ng gi\u00e1 tr\u1ecb kh\u00e1c bi\u1ec7t > 500 l\u00e0 c\u00e1c bi\u1ebfn li\u00ean t\u1ee5c. \u00c1p d\u1ee5ng nguy\u00ean l\u00fd 3 sigma cho c\u00e1c bi\u1ebfn n\u00e0y.","66880101":"Sau khi \u0111\u00e3 nh\u00f3m xong c\u00e1c bi\u1ebfn category th\u00e0nh nh\u1eefng features t\u1ed5ng h\u1ee3p, ch\u00fang ta c\u1ea7n bi\u1ebfn \u0111\u1ed5i c\u00e1c bi\u1ebfn n\u00e0y sao cho ch\u00fang c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong m\u00f4 h\u00ecnh h\u1ed3i qui. C\u00f3 2 c\u00e1ch bi\u1ebfn \u0111\u1ed5i ch\u00ednh c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng \u0111\u00f3 l\u00e0 one-hot coding v\u00e0 t\u1ea1o bi\u1ebfn th\u1ee9 b\u1eadc. T\u1ea1o bi\u1ebfn th\u1ee9 b\u1eadc th\u01b0\u1eddng \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng khi c\u00e1c nh\u00f3m c\u00f3 s\u1ef1 kh\u00e1c bi\u1ec7t v\u1ec1 m\u1ee9c \u0111\u1ed9 ch\u1eb3ng h\u1ea1n nh\u01b0 x\u1ebfp h\u1ea1ng h\u1ecdc l\u1ef1c: Gi\u1ecfi, Kh\u00e1, Trung b\u00ecnh, Y\u1ebfu. Trong khi \u0111\u00f3 one-hot coding s\u1ebd bi\u1ec3u di\u1ec5n m\u1ed9t bi\u1ebfn category b\u1edfi m\u1ed9t vector sparse (c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a vector l\u00e0 0 ho\u1eb7c 1) c\u00f3 \u0111\u1ed9 d\u00e0i b\u1eb1ng s\u1ed1 l\u01b0\u1ee3ng c\u00e1c nh\u00f3m sao cho \u0111\u1eb7c tr\u01b0ng t\u01b0\u01a1ng \u1ee9ng v\u1edbi gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn s\u1ebd \u0111\u01b0\u1ee3c g\u00e1n l\u00e0 1 v\u00e0 c\u00e1c \u0111\u1eb7c tr\u01b0ng c\u00f2n l\u1ea1i l\u00e0 0. Ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng h\u00e0m `get_dummies()` trong pandas \u0111\u1ec3 t\u1ef1 \u0111\u1ed9ng bi\u1ebfn \u0111\u1ed5i c\u00e1c bi\u1ebfn category trong data frame v\u1ec1 d\u1ea1ng one-hot coding.","52719edd":"Ch\u1ecdn 15 bi\u1ebfn c\u00f3 m\u1ee9c \u0111\u1ed9 t\u01b0\u01a1ng quan l\u1edbn nh\u1ea5t \u0111\u1ebfn bi\u1ebfn m\u1ee5c ti\u00eau v\u00e0 bi\u1ec3u di\u1ec5n ma tr\u1eadn h\u1ec7 s\u1ed1 t\u01b0\u01a1ng quan c\u1ee7a ch\u00fang.","f2fd0711":"Ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng h\u00e0m np.corrcoef(arr) \u0111\u1ec3 t\u00ednh ma tr\u1eadn h\u1ec7 s\u1ed1 t\u01b0\u01a1ng quan cho c\u00e1c bi\u1ebfn. Tuy nhi\u00ean t\u00ednh to\u00e1n correlation tr\u00ean numpy c\u1ea7n nhi\u1ec1u t\u00e0i nguy\u00ean h\u01a1n so v\u1edbi pandas. V\u1edbi l\u1ec7nh tr\u00ean, m\u00e1y c\u1ee7a m\u00ecnh \u0111\u00e3 bung memory. M\u1ed9t l\u01b0u \u00fd nh\u1ecf \u0111\u00f3 l\u00e0 c\u00e1c chi\u1ec1u d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c coi nh\u01b0 c\u00e1c d\u00f2ng v\u00e0 c\u00e1c quan s\u00e1t l\u00e0 c\u00e1c c\u1ed9t trong l\u1ec7nh np.corrcoef(arr). Chuy\u1ec3n ma tr\u1eadn qua data frame v\u00e0 t\u00ednh correlation.","aed46855":"Bi\u1ebfn TARGET c\u1ee7a t\u1eadp test \u0111\u00e3 \u0111\u01b0\u1ee3c gi\u1ea5u \u0111i \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 m\u00f4 h\u00ecnh \u0111\u01b0\u1ee3c x\u00e2y d\u1ef1ng t\u1eeb t\u1eadp train. S\u1ed1 l\u01b0\u1ee3ng quan s\u00e1t c\u1ee7a train l\u1edbn g\u1ea5p kho\u1ea3ng 6 l\u1ea7n train. \n\nB\u00ean d\u01b0\u1edbi ta s\u1ebd th\u1ed1ng k\u00ea s\u1ed1 l\u01b0\u1ee3ng v\u00e0 t\u1ef7 l\u1ec7 c\u00e1c class Repaid v\u00e0 Not repaid trong t\u1eadp train.","59761fb2":"G\u00e1n l\u1ea1i c\u00e1c bi\u1ebfn n\u00e0y b\u1eb1ng d\u1eef li\u1ec7u sau khi map.","1fe66b12":"## 3.5. Gradient Boosting","02bfd2a8":"V\u1ebd bi\u1ec3u \u0111\u1ed3 ph\u00e2n ph\u1ed1i s\u1ed1 l\u01b0\u1ee3ng c\u00e1c quan s\u00e1t theo nh\u00f3m \u0111\u1ed1i v\u1edbi d\u1eef li\u1ec7u d\u1ea1ng object. \u0110\u1ed1i v\u1edbi c\u00e1c bi\u1ebfn ORGANIZATION_TYPE, OCCUPATION_TYPE ta s\u1ebd nghi\u00ean c\u1ee9u ri\u00eang do s\u1ed1 l\u01b0\u1ee3ng class l\u1edbn.","5dc524aa":"M\u1ed9t trong nh\u1eefng \u01b0u th\u1ebf c\u1ee7a m\u00f4 h\u00ecnh random forest \u0111\u00f3 l\u00e0 kh\u1ea3 n\u0103ng \u0111\u00e1nh gi\u00e1 m\u1ee9c \u0111\u1ed9 quan tr\u1ecdng c\u1ee7a c\u00e1c bi\u1ebfn d\u1ef1 b\u00e1o d\u1ef1a tr\u00ean m\u1ee9c \u0111\u1ed9 \u1ea3nh h\u01b0\u1edfng c\u1ee7a n\u00f3 t\u1edbi x\u00e1c xu\u1ea5t c\u1ee7a bi\u1ebfn m\u1ee5c ti\u00eau. \u0110\u00e2y l\u00e0 m\u1ed9t trong nh\u1eefng ph\u01b0\u01a1ng ph\u00e1p feature selection th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong machine learning \u0111\u1ec3 tuy\u1ec3n ch\u1ecdn bi\u1ebfn. Th\u00f4ng tin v\u1ec1 m\u1ee9c \u0111\u1ed9 quan tr\u1ecdng c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c khai th\u00e1c th\u00f4ng qua thu\u1ed9c t\u00ednh `feature_importances_` nh\u01b0 sau:","e6615a89":"## 3.3. S\u1eed d\u1ee5ng k\u0129 thu\u1eadt feature engineering\n\nH\u1ea7u h\u1ebft b\u00ed quy\u1ebft \u0111\u1ec3 chi\u1ebfn th\u1eafng trong c\u00e1c cu\u1ed9c thi ph\u00e2n t\u00edch d\u1eef li\u1ec7u \u0111\u00f3 l\u00e0 feature engineering. Feature engineering quan tr\u1ecdng \u0111\u1ebfn m\u1ee9c th\u1ea7y Andrew Ng \u0111\u00e3 n\u00f3i r\u1eb1ng: '\u00c1p d\u1ee5ng h\u1ecdc m\u00e1y c\u01a1 b\u1ea3n l\u00e0 s\u1eed d\u1ee5ng feature engineering'. V\u00e0 theo kinh nghi\u1ec7m c\u1ee7a m\u00ecnh, feature engineering th\u01b0\u1eddng mang l\u1ea1i k\u1ebft qu\u1ea3 t\u1ed1t h\u01a1n so v\u1edbi c\u00e1c ph\u01b0\u01a1ng ph\u00e1p hyparameter tunning. T\u1ea5t nhi\u00ean s\u1eed d\u1ee5ng k\u1ebft h\u1ee3p c\u1ea3 2 ph\u01b0\u01a1ng ph\u00e1p n\u00e0y l\u00e0 t\u1ed1t nh\u1ea5t nh\u01b0ng m\u00ecnh v\u1eabn th\u01b0\u1eddng c\u00f3 xu h\u01b0\u1edbng th\u1ef1c hi\u1ec7n feature engineering tr\u01b0\u1edbc khi l\u1ef1a ch\u1ecdn c\u00e1c ph\u01b0\u01a1ng ph\u00e1p ph\u1ee9c t\u1ea1p. Tr\u00e1nh t\u00ecnh tr\u1ea1ng garbage in garbage out. M\u1ed9t m\u00f4 h\u00ecnh ph\u1ee9c t\u1ea1p nh\u01b0ng kh\u00f4ng c\u00f3 c\u00e1c bi\u1ebfn \u0111\u1ea7u v\u00e0o tin c\u1eady th\u00ec k\u1ebft qu\u1ea3 m\u00f4 h\u00ecnh s\u1ebd kh\u00f4ng th\u1ec3 t\u1ed1t.\n\nV\u1edbi m\u00f4 h\u00ecnh hi\u1ec7n t\u1ea1i ch\u00fang ta nh\u1eadn th\u1ea5y c\u00e1c bi\u1ebfn kh\u00f4ng \u0111\u1ee7 m\u1ea1nh \u0111\u1ec3 t\u1ea1o ra m\u1ed9t k\u1ebft qu\u1ea3 chu\u1ea9n x\u00e1c. Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y m\u00ecnh ngh\u0129 ngay \u0111\u1ebfn vi\u1ec7c \u00e1p d\u1ee5ng feature engineering nh\u01b0 m\u1ed9t gi\u1ea3i ph\u00e1p c\u1ea3i thi\u1ec7n t\u00ecnh h\u00ecnh. feature engineering s\u1ebd t\u1ea1o ra nh\u1eefng bi\u1ebfn m\u1edbi m\u00e0 kh\u1ea3 n\u0103ng gi\u1ea3i th\u00edch c\u1ee7a n\u00f3 s\u1ebd t\u1ed1t h\u01a1n \u0111\u00e1ng k\u1ec3 n\u1ebfu \u00e1p d\u1ee5ng v\u00e0o m\u00f4 h\u00ecnh. \n\nV\u1ec1 k\u0129 thu\u1eadt feature engineering ch\u00fang ta c\u00f3 2 nh\u00e1nh ch\u00ednh l\u00e0:\n\n* feature selection: l\u1ef1a ch\u1ecdn c\u00e1c bi\u1ebfn t\u1ed1t nh\u1ea5t t\u1eeb c\u00e1c bi\u1ebfn \u0111\u00e3 c\u00f3. Ph\u01b0\u01a1ng ph\u00e1p n\u00e0y c\u00f3 th\u1ec3 d\u1ef1a tr\u00ean ranking c\u1ee7a c\u00e1c feature theo c\u00e1c ti\u00eau ch\u00ed \u0111\u00e1nh gi\u00e1 s\u1ee9c m\u1ea1nh ho\u1eb7c d\u1ef1a tr\u00ean kinh nghi\u1ec7m v\u00e0 hi\u1ec3u bi\u1ebft v\u1ec1 \u0111\u1ec1 t\u00e0i nghi\u00ean c\u1ee9u.\n\n* th\u00eam m\u1edbi: T\u1ea1o ra c\u00e1c feature m\u1edbi t\u1eeb c\u00e1c feature s\u1eb5n c\u00f3. C\u00e1c bi\u1ebfn \u0111\u1ed5i c\u00f3 th\u1ec3 l\u00e0 scale, chu\u1ea9n h\u00f3a d\u1eef li\u1ec7u, s\u1eed d\u1ee5ng l\u0169y th\u1eeba, logarith,....\n\nTrong b\u00e0i n\u00e0y m\u00ecnh s\u1ebd s\u1eed d\u1ee5ng feature engineering theo ph\u01b0\u01a1ng ph\u00e1p th\u00eam m\u1edbi b\u1eb1ng \u0111a th\u1ee9c b\u1eadc cao (polynormal feature). C\u00e1c bi\u1ebfn \u0111\u01b0\u1ee3c l\u1ef1a ch\u1ecdn \u0111\u1ec3 feature ch\u1ec9 bao g\u1ed3m 15 bi\u1ebfn c\u00f3 t\u01b0\u01a1ng quan cao nh\u1ea5t. B\u1eadc \u0111\u01b0\u1ee3c l\u1ef1a ch\u1ecdn cao nh\u1ea5t l\u00e0 3. Th\u00f4ng qua polynormal feature c\u00e1c bi\u1ebfn b\u1eadc cao v\u00e0 bi\u1ebfn t\u00edch ch\u00e9o s\u1ebd \u0111\u01b0\u1ee3c t\u1ea1o th\u00e0nh. Ch\u1eb3ng h\u1ea1n t\u1eeb 2 bi\u1ebfn EXT_SOURCE_1 v\u00e0 EXT_SOURCE_2 ch\u00fang ta c\u00f3 th\u1ec3 t\u1ea1o ra EXT_SOURCE_1^2, EXT_SOURCE_2^2 v\u00e0 EXT_SOURCE_1xEXT_SOURCE_2.\n\nTrong sklearn ch\u00fang ta c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng s\u1eed d\u1ee5ng k\u0129 thu\u1eadt n\u00e0y th\u00f4ng qua h\u00e0m `PolynormialFeatures()`.","1e87fe91":"DAYS_BIRTH l\u00e0 m\u1ed9t bi\u1ebfn li\u00ean t\u1ee5c c\u00f3 range n\u1eb1m trong kho\u1ea3ng t\u1eeb 20 - 70. Tr\u1ee5c ho\u00e0nh bi\u1ec3u di\u1ec5n \u0111\u1ed9 tu\u1ed5i theo ng\u00e0y, gi\u00e1 tr\u1ecb \u00e2m th\u1ec3 hi\u1ec7n s\u1ed1 ng\u00e0y ch\u00eanh l\u1ec7ch t\u1eeb th\u1eddi \u0111i\u1ec3m sinh so v\u1edbi hi\u1ec7n t\u1ea1i. Nh\u01b0 v\u1eady ng\u01b0\u1eddi tr\u1ebb s\u1ebd n\u1eb1m \u1edf b\u00ean ph\u1ea3i c\u1ee7a tr\u1ee5c ho\u00e0nh v\u00e0 ng\u01b0\u1eddi gi\u00e0 s\u1ebd n\u1eb1m b\u00ean tr\u00e1i. T\u1eeb bi\u1ec3u \u0111\u1ed3 ta c\u00f3 th\u1ec3 th\u1ea5y nh\u1eefng ng\u01b0\u1eddi tr\u1ebb c\u00f3 xu h\u01b0\u1edbng kh\u00f4ng tr\u1ea3 n\u1ee3 nhi\u1ec1u h\u01a1n nh\u1eefng ng\u01b0\u1eddi gi\u00e0. B\u1eb1ng ch\u1ee9ng l\u00e0 t\u1ea1i \u0111\u1ed3 th\u1ecb m\u1eadt \u0111\u1ed9 ta nh\u1eadn th\u1ea5y ph\u00e2n ph\u1ed1i l\u1ec7ch ph\u1ea3i. \u0110\u1ec3 l\u00e0m r\u00f5 h\u01a1n nh\u1eadn \u0111\u1ecbnh, ch\u00fang ta \u0111i t\u00ecm hi\u1ec3u h\u00e0nh vi tr\u1ea3 n\u1ee3 theo c\u00e1c nh\u00f3m tu\u1ed5i.","c4256ff5":"Ph\u00e2n ph\u1ed1i x\u00e1c xu\u1ea5t c\u1ee7a c\u00e1c bi\u1ebfn tr\u00ean theo c\u00e1c nh\u00f3m c\u1ee7a bi\u1ebfn m\u1ee5c ti\u00eau.","7d245e0e":"Nh\u01b0 v\u1eady sau khi lo\u1ea1i b\u1ecf oulier, \u0111\u1ed3 th\u1ecb ph\u00e2n ph\u1ed1i c\u1ee7a AMT_INCOME_TOTAL \u0111\u00e3 kh\u00f4ng c\u00f2n thi\u00ean l\u1ec7ch. C\u00e1c \u0111i\u1ec3m m\u1ed1c Q1, Q2, Q3, Q4 trong t\u1ee9 ph\u00e2n v\u1ecb (quintile) \u0111\u00e3 kh\u00f4ng qu\u00e1 nh\u1ecf so v\u1edbi gi\u00e1 tr\u1ecb l\u1edbn nh\u1ea5t trong bi\u1ec3u \u0111\u1ed3 box plot nh\u01b0 ban \u0111\u1ea7u. Bi\u1ec3u \u0111\u1ed3 h\u00e0m m\u1eadt \u0111\u1ed9 c\u0169ng cho th\u1ea5y m\u1ed9t ph\u00e2n ph\u1ed1i kh\u00f4ng c\u00f3 c\u00e1c gi\u00e1 tr\u1ecb d\u1ecb bi\u1ec7t nh\u01b0 tr\u01b0\u1edbc khi \u0111i\u1ec1u ch\u1ec9nh.","5a07e319":"Sau c\u00e1c x\u1eed l\u00fd tr\u00ean, d\u1eef li\u1ec7u tr\u00ean app_train v\u00e0 app_test s\u1ebd \u0111\u01b0\u1ee3c map theo c\u00e1c nh\u00f3m ph\u00e2n lo\u1ea1i m\u1edbi. Ch\u00fang ta c\u00f3 th\u1ec3 ki\u1ec3m tra l\u1ea1i t\u1ef7 l\u1ec7 Repaid\/No Repaid c\u1ee7a c\u00e1c nh\u00f3m bi\u1ebfn m\u1edbi nh\u01b0 b\u00ean d\u01b0\u1edbi.","efe25bfa":"Nh\u1eefng bi\u1ebfn n\u00e0y kh\u00f4ng xu\u1ea5t hi\u1ec7n trong t\u1eadp test l\u00e0 do c\u00f3 m\u1ed9t s\u1ed1 bi\u1ebfn kh\u00f4ng x\u1ea3y ra \u0111\u1ea7y \u0111\u1ee7 c\u00e1c kh\u1ea3 n\u0103ng. Ch\u00fang ta c\u1ea7n lo\u1ea1i b\u1ecf nh\u1eefng bi\u1ebfn kh\u00f4ng c\u00f3 trong t\u1eadp train. Ch\u1ec9 d\u1eef l\u1ea1i nh\u1eefng bi\u1ebfn c\u00f3 trong c\u1ea3 app_train v\u00e0 app_test:","79484f2b":"Th\u00f4ng qua bi\u1ec3u \u0111\u1ed3 ta c\u0169ng h\u00ecnh dung \u0111\u01b0\u1ee3c m\u1ed9t v\u00e0i bi\u1ebfn ph\u00e2n lo\u1ea1i c\u00f3 s\u1ef1 kh\u00e1c bi\u1ec7t l\u1edbn gi\u1eefa t\u1ef7 l\u1ec7 Repaid\/Non Repaid l\u1edbn nh\u01b0 NAME_CONTRACT_TYPE, GENDER, FLAG_OWN_REALITY do \u0111\u00f3 \u0111\u00e2y l\u00e0 nh\u1eefng bi\u1ebfn c\u00f3 t\u00e1c \u0111\u1ed9ng l\u1edbn \u0111\u1ebfn bi\u1ebfn m\u1ee5c ti\u00eau.\n\nKi\u1ec3m tra ri\u00eang cho 2 bi\u1ebfn ORGANIZATION_TYPE, OCCUPATION_TYPE.","40c60a7a":"## 3.4. Random Forest\n\nRandom Forest l\u00e0 m\u00f4 h\u00ecnh thu\u1ed9c l\u1edbp k\u1ebft h\u1ee3p (ensemble model) t\u1ee9c k\u1ebft qu\u1ea3 \u0111\u01b0\u1ee3c \u0111\u01b0a ra d\u1ef1a tr\u00ean kh\u00f4ng ch\u1ec9 m\u1ed9t m\u00f4 h\u00ecnh m\u00e0 t\u1eeb nhi\u1ec1u m\u00f4 h\u00ecnh kh\u00e1c nhau. \n\nRandom Forest s\u1ebd x\u00e2y d\u1ef1ng m\u1ed9t r\u1eebng c\u00e2y ng\u1eabu nhi\u00ean d\u1ef1a tr\u00ean c\u00e1c node v\u00e0 nh\u00e1nh. \u0110\u1ea1i di\u1ec7n cho m\u1ed7i node l\u00e0 m\u1ed9t c\u00e2u h\u1ecfi m\u00e0 gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 l\u00e0 YES ho\u1eb7c NO. C\u00e1c nh\u00e1nh s\u1ebd c\u00f3 t\u00e1c d\u1ee5ng k\u1ebft n\u1ed1i c\u00e1c nodes \u0111\u1ec3 t\u1ea1o ra m\u1ed9t k\u1ecbch b\u1ea3n \u0111\u01b0\u1eddng \u0111i (routine).\n\nNode b\u1eaft \u0111\u1ea7u c\u1ee7a Random Forest l\u00e0 root node. T\u1eeb root node, m\u00f4 h\u00ecnh s\u1ebd x\u00e2y d\u1ef1ng m\u1ed9t b\u1ed9 c\u00e2u h\u1ecfi Yes\/No d\u1ef1a tr\u00ean th\u00f4ng tin \u0111\u01b0\u1ee3c cung c\u1ea5p t\u1eeb bi\u1ebfn d\u1ef1 b\u00e1o. C\u00e1c nh\u00e1nh YES, NO s\u1ebd r\u1ebd \u0111\u1ebfn c\u00e1c node m\u1edbi \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 internal node. Ch\u1eb3ng h\u1ea1n \u0111\u1ed1i v\u1edbi bi\u1ebfn li\u00ean l\u1ee5c nh\u01b0 YEAR_OLD m\u00f4 h\u00ecnh c\u00f3 th\u1ec3 \u0111\u1eb7t ra c\u00e2u h\u1ecfi YEAR_OLD > 30 hay kh\u00f4ng? D\u1ef1a tr\u00ean gi\u00e1 tr\u1ecb c\u1ee7a quan s\u00e1t \u0111\u1ed1i v\u1edbi bi\u1ebfn YEAR_OLD m\u00e0 m\u1ed9t quan s\u00e1t c\u00f3 th\u1ec3 r\u1ebd theo nh\u00e1nh YES ho\u1eb7c NO. \n\nT\u1ea1i ph\u00eda cu\u1ed1i c\u1ee7a c\u00e1c nh\u00e1nh YES\/NO m\u00f4 h\u00ecnh ti\u1ebfp t\u1ee5c kh\u1edfi t\u1ea1o nh\u1eefng internal node \u1edf t\u1ea7ng th\u1ea5p h\u01a1n v\u1edbi c\u00e1c bi\u1ebfn kh\u00e1c. Th\u1ee9 t\u1ef1 c\u00e1c bi\u1ebfn \u0111\u01b0\u1ee3c l\u1ef1a ch\u1ecdn l\u00e0 ng\u1eabu nhi\u00ean. Qu\u00e1 tr\u00ecnh r\u1ebd nh\u00e1nh \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n li\u00ean t\u1ee5c cho \u0111\u1ebfn khi m\u00f4 h\u00ecnh \u0111i \u0111\u1ebfn node cu\u1ed1i. T\u1ea1i node n\u00e0y kh\u00f4ng c\u00f3 nh\u00e1nh n\u00e0o \u0111\u01b0\u1ee3c r\u1ebd th\u00eam. \n\nS\u01a1 \u0111\u1ed3 c\u1ee7a m\u00f4 h\u00ecnh r\u1ea5t gi\u1ed1ng m\u1ed9t c\u00e1i c\u00e2y. Xu\u1ea5t ph\u00e1t t\u1eeb g\u1ed1c c\u00e2y r\u1ebd v\u00e0o c\u00e1c c\u00e0nh to, c\u00e0nh nh\u1ecf v\u00e0 k\u1ebft th\u00fac \u1edf l\u00e1. B\u1edfi th\u1ebf node cu\u1ed1i c\u00f9ng c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 leaf node. T\u1ea1i leaf node m\u00f4 h\u00ecnh s\u1ebd \u0111\u01b0a ra k\u1ebft qu\u1ea3 th\u1ed1ng k\u00ea c\u1ee7a k\u1ecbch b\u1ea3n \u0111\u01b0\u1eddng \u0111i (routine) t\u1eeb g\u1ed1c t\u1edbi l\u00e1 l\u00e0 m\u1ed9t gi\u00e1 tr\u1ecb x\u00e1c xu\u1ea5t c\u1ee7a positive v\u00e0 negative. M\u1ed7i m\u1ed9t k\u1ecbch b\u1ea3n r\u1ebd nh\u00e1nh t\u1eeb root node t\u1edbi leaf node \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 m\u1ed9t c\u00e2y.\n\nL\u01b0u \u00fd r\u1eb1ng m\u1ed7i m\u1ed9t c\u00e2y \u0111\u01b0\u1ee3c s\u1ebd \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng tr\u00ean nhi\u1ec1u m\u1eabu d\u1eef li\u1ec7u con \u0111\u01b0\u1ee3c l\u1ef1a ch\u1ecdn ng\u1eabu nhi\u00ean \u0111\u1ec3 quy\u1ebft \u0111\u1ecbnh nh\u00e3n cho bi\u1ebfn m\u1ee5c ti\u00eau t\u1ea1i leaf node. M\u1ed9t quan s\u00e1t \u0111\u01b0\u1ee3c d\u1ef1 b\u00e1o tr\u00ean r\u1ea5t nhi\u1ec1u c\u00e2y kh\u00e1c nhau v\u00e0 k\u1ebft qu\u1ea3 nh\u00e3n tr\u1ea3 v\u1ec1 t\u1eeb c\u00e1c c\u00e2y s\u1ebd l\u00e0 c\u01a1 s\u1edf \u0111\u1ec3 voting nh\u00e3n cho quan s\u00e1t.\n\nK\u1ebft qu\u1ea3 t\u1eeb m\u00f4 h\u00ecnh Random Forest \u0111\u01b0\u1ee3c k\u1ebft h\u1ee3p t\u1eeb nhi\u1ec1u c\u00e2y quy\u1ebft \u0111\u1ecbnh con v\u00e0 \u0111\u01b0\u1ee3c th\u1eed nghi\u1ec7m tr\u00ean nhi\u1ec1u b\u1ed9 d\u1eef li\u1ec7u con n\u00ean sai s\u1ed1 d\u1ef1 b\u00e1o th\u00f4ng th\u01b0\u1eddng nh\u1ecf h\u01a1n so v\u1edbi nh\u1eefng m\u00f4 h\u00ecnh ph\u00e2n lo\u1ea1i tuy\u1ebfn t\u00ednh nh\u01b0 logistic ho\u1eb7c linear regression. \n\nB\u00ean c\u1ea1nh Random Forest th\u00ec Gradient Boosting v\u00e0 AdaBoost c\u0169ng l\u00e0 c\u00e1c m\u00f4 h\u00ecnh thu\u1ed9c l\u1edbp m\u00f4 h\u00ecnh k\u1ebft h\u1ee3p th\u01b0\u1eddng \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng v\u00e0 mang l\u1ea1i hi\u1ec7u qu\u1ea3 b\u1ea5t ng\u1edd t\u1ea1i nhi\u1ec1u cu\u1ed9c thi.\n\n\u0110\u1ec3 s\u1eed d\u1ee5ng Random Forest trong python ch\u00fang ta c\u00f3 th\u1ec3 khai th\u00e1c module `sklearn.ensemble`","c0b1dd68":"Trong c\u00e1c m\u00f4 h\u00ecnh ph\u00e2n lo\u1ea1i ch\u00fang ta th\u01b0\u1eddng quan t\u00e2m \u0111\u1ebfn t\u1ef7 l\u1ec7 Accuracy. \u0110\u00e2y l\u00e0 ch\u1ec9 s\u1ed1 \u0111\u1ea1i di\u1ec7n nh\u1ea5t v\u00ec n\u00f3 ph\u1ea3n \u00e1nh tr\u1ef1c ti\u1ebfp hi\u1ec7u qu\u1ea3 c\u1ee7a m\u1ed9t m\u00f4 h\u00ecnh th\u00f4ng qua s\u1ed1 tr\u01b0\u1eddng h\u1ee3p ph\u00e2n lo\u1ea1i \u0111\u00fang \/t\u1ed5ng s\u1ed1 tr\u01b0\u1eddng h\u1ee3p ph\u00e2n lo\u1ea1i. Tuy nhi\u00ean ch\u1ec9 s\u1ed1 n\u00e0y t\u1ecf ra k\u00e9m hi\u1ec7u qu\u1ea3 \u0111\u1ed1i v\u1edbi tr\u01b0\u1eddng h\u1ee3p m\u1eabu m\u1ea5t c\u00e2n b\u1eb1ng nghi\u00eam tr\u1ecdng. Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y k\u1ebft qu\u1ea3 d\u1ef1 b\u00e1o c\u1ee7a m\u00f4 h\u00ecnh th\u01b0\u1eddng thi\u00ean l\u1ec7ch v\u1ec1 m\u1ed9t l\u1edbp \u0111a s\u1ed1. Do \u0111\u00f3 Accuracy hi\u1ec3n nhi\u00ean cao \u0111\u1ed1i v\u1edbi nh\u1eefng m\u00f4 h\u00ecnh ph\u1ea9m ch\u1ea5t k\u00e9m b\u1edfi s\u1ed1 tr\u01b0\u1eddng h\u1ee3p h\u1ed3 s\u01a1 t\u1ed1t l\u00e0 qu\u00e1 nhi\u1ec1u d\u1eabn \u0111\u1ebfn m\u1ed9t m\u1ed9t m\u00f4 h\u00ecnh c\u1ea3m t\u00ednh quy\u1ebft \u0111\u1ecbnh to\u00e0n b\u1ed9 l\u00e0 h\u1ed3 s\u01a1 t\u1ed1t c\u0169ng d\u1eabn t\u1edbi Accuracy l\u1edbn. M\u1ed9t modeler thi\u1ebfu kinh nghi\u1ec7m s\u1ebd r\u1ea5t d\u1ec5 h\u00e0i l\u00f2ng v\u1edbi k\u1ebft qu\u1ea3 n\u00e0y. N\u1ebfu \u0111\u01b0a v\u00e0o \u00e1p d\u1ee5ng nh\u1eefng m\u00f4 h\u00ecnh nh\u01b0 v\u1eady s\u1ebd \u1ea3nh h\u01b0\u1edfng kh\u00f4ng nh\u1ecf t\u1edbi c\u00e1c t\u1ed5 ch\u1ee9c t\u00e0i ch\u00ednh, kinh doanh. V\u1eady trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y t\u1ef7 l\u1ec7 n\u00e0o \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng thay th\u1ec3 \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 m\u00f4 h\u00ecnh?\nPrecision v\u00e0 Recall l\u00e0 m\u1ed9t l\u1ef1a ch\u1ecdn thay th\u1ebf ph\u00f9 h\u1ee3p nh\u1ea5t b\u1edfi n\u00f3 th\u1ecfa m\u00e3n c\u00e1c t\u00ednh ch\u1ea5t:\n\n* C\u1ea3 2 \u0111\u1ec1u \u0111\u00e1nh m\u1ee9c \u0111\u1ed9 d\u1ef1 b\u00e1o ch\u00ednh x\u00e1c c\u1ee7a positive t\u1ee9c h\u1ed3 s\u01a1 ph\u00e2n lo\u1ea1i l\u00e0 x\u1ea5u. \u0110\u00e2y l\u00e0 nh\u00f3m \u0111\u01b0\u1ee3c \u01b0u ti\u00ean ph\u00e2n lo\u1ea1i ch\u00ednh x\u00e1c h\u01a1n v\u00ec thi\u1ec7t h\u1ea1i g\u00e2y ra b\u1edfi n\u00f3 l\u1edbn h\u01a1n.\n* Precision \u0111\u00e1nh gi\u00e1 t\u1ef7 l\u1ec7 d\u1ef1 b\u00e1o ch\u00ednh x\u00e1c h\u1ed3 s\u01a1 x\u1ea5u trong t\u1ed5ng s\u1ed1 tr\u01b0\u1eddng h\u1ee3p \u0111\u01b0\u1ee3c d\u1ef1 b\u00e1o l\u00e0 x\u1ea5u.\n* Recall \u0111\u00e1nh gi\u00e1 t\u1ef7 l\u1ec7 d\u1ef1 b\u00e1o ch\u00ednh x\u00e1c h\u1ed3 s\u01a1 x\u1ea5u khi h\u1ed3 s\u01a1 v\u1ec1 m\u1eb7t b\u1ea3n ch\u1ea5t l\u00e0 x\u1ea5u.\n\nB\u00ean c\u1ea1nh \u0111\u00f3 c\u00f2n c\u00f3 c\u00e1c ch\u1ec9 s\u1ed1 kh\u00e1c ch\u00fang ta c\u00f3 th\u1ec3 c\u00e2n nh\u1eafc nh\u01b0 F1-Score, Kappa, Gini.\n\nKhi nh\u00ecn v\u00e0o bi\u1ec3u \u0111\u1ed3 c\u1ee7a Precision v\u00e0 Recall ta s\u1ebd bi\u1ebft \u0111\u01b0\u1ee3c t\u1ea1i m\u1ed7i m\u1ed9t ng\u01b0\u1ee1ng threshold s\u1ebd tr\u1ea3 v\u1ec1 t\u1ef7 l\u1ec7 ph\u00e2n lo\u1ea1i h\u1ed3 s\u01a1 x\u1ea5u l\u00e0 bao nhi\u00eau tr\u00ean l\u1ea7n l\u01b0\u1ee3t t\u1ed5ng s\u1ed1 c\u00e1c h\u1ed3 s\u01a1 \u0111\u01b0\u1ee3c d\u1ef1 b\u00e1o l\u00e0 x\u1ea5u v\u00e0 t\u1ed5ng s\u1ed1 c\u00e1c h\u1ed3 s\u01a1 x\u1ea5u tr\u00ean th\u1ef1c t\u1ebf.","340620ff":"T\u00ednh to\u00e1n m\u1ee9c \u0111\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a m\u00f4 h\u00ecnh d\u1ef1 b\u00e1o.","d9b0c1f9":"\u00c1p d\u1ee5ng tr\u00ean t\u1eadp test.","f499565a":"# 3. X\u00e2y d\u1ef1ng m\u00f4 h\u00ecnh\n## 3.1. \u0110\u00e1nh gi\u00e1 m\u1ee9c \u0111\u1ed9 t\u01b0\u01a1ng quan\n\nTrong m\u1ed9t m\u00f4 h\u00ecnh c\u00f3 qu\u00e1 nhi\u1ec1u bi\u1ebfn input, ch\u00fang ta c\u1ea7n lo\u1ea1i b\u1ecf c\u00e1c bi\u1ebfn kh\u00f4ng quan tr\u1ecdng \u0111\u1ec3 gi\u1ea3m chi ph\u00ed t\u00ednh to\u00e1n v\u00e0 h\u1ea1n ch\u1ebf kh\u1ea3 n\u0103ng overfiting c\u1ee7a m\u00f4 h\u00ecnh. M\u1ed9t c\u00e1ch ph\u1ed5 bi\u1ebfn nh\u1ea5t trong \u0111\u00e1nh gi\u00e1 m\u1ed1i quan h\u1ec7 gi\u1eefa bi\u1ebfn d\u1ef1 b\u00e1o v\u00e0 bi\u1ebfn m\u1ee5c ti\u00eau \u0111\u00f3 l\u00e0 s\u1eed d\u1ee5ng b\u1ea3ng h\u1ec7 s\u1ed1 t\u01b0\u01a1ng quan. C\u00f3 m\u1ed9t v\u00e0i ph\u01b0\u01a1ng ph\u00e1p ti\u1ebfp c\u1eadn kh\u00e1c cao c\u1ea5p h\u01a1n nh\u01b0:\n\n* Th\u00f4ng qua c\u00e1c m\u00f4 h\u00ecnh ensemble \u0111\u1ec3 x\u1ebfp h\u1ea1ng m\u1ee9c \u0111\u1ed9 quan tr\u1ecdng c\u1ee7a c\u00e1c bi\u1ebfn trong tree boosting ho\u1eb7c random forest.\n* S\u1eed d\u1ee5ng ch\u1ec9 s\u1ed1 Information Value trong Scorecard. C\u00e1ch n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ph\u1ed5 bi\u1ebfn trong c\u00e1c m\u00f4 h\u00ecnh credit risk.\n* S\u1eed d\u1ee5ng ch\u1ec9 s\u1ed1 Akaike Inforamtion Criterion k\u1ebft h\u1ee3p v\u1edbi ph\u01b0\u01a1ng ph\u00e1p step wise \u00e1p d\u1ee5ng trong c\u00e1c m\u00f4 h\u00ecnh thu\u1ed9c l\u1edbp h\u1ed3i qui.\n\nC\u00f3 th\u1eddi gian m\u00ecnh s\u1ebd tr\u00ecnh b\u00e0y th\u00eam v\u1ec1 c\u00e1c ph\u01b0\u01a1ng ph\u00e1p n\u00e0y. T\u1ea1m th\u1eddi ch\u00fang ta \u0111\u00e1nh gi\u00e1 quan h\u1ec7 gi\u1eefa c\u00e1c bi\u1ebfn th\u00f4ng qua m\u1ee9c \u0111\u1ed9 t\u01b0\u01a1ng quan.","c2e94fb0":"Sau feature engineering, s\u1ed1 l\u01b0\u1ee3ng c\u00e1c bi\u1ebfn \u0111\u00e3 t\u0103ng t\u1eeb 15 l\u00ean 816 bi\u1ebfn. Ch\u00fang ta c\u00f3 th\u1ec3 xem danh s\u00e1ch c\u00e1c features \u0111\u01b0\u1ee3c t\u1ea1o m\u1edbi nh\u01b0 sau:","cf6e6e0e":"# 1. Gi\u1edbi thi\u1ec7u\n\nHome credit l\u00e0 m\u1ed9t cu\u1ed9c thi ph\u00e2n t\u00edch d\u1eef li\u1ec7u do kaggle t\u1ed5 ch\u1ee9c. \u0110\u1ec1 t\u00e0i c\u1ea7n gi\u1ea3i quy\u1ebft l\u00e0 m\u1ed9t b\u00e0i to\u00e1n thu\u1ed9c l\u1edbp m\u00f4 h\u00ecnh ph\u00e2n lo\u1ea1i v\u00e0 h\u1ecdc c\u00f3 gi\u00e1m s\u00e1t. Y\u00eau c\u1ea7u c\u1ee7a c\u00e1c \u0111\u1ed9i thi l\u00e0 x\u00e2y d\u1ef1ng m\u00f4 h\u00ecnh ph\u00e2n lo\u1ea1i c\u00e1c h\u1ee3p \u0111\u1ed3ng t\u00edn d\u1ee5ng \u0111\u00e3 \u0111\u01b0\u1ee3c g\u00e1n nh\u00e3n repaid (tr\u1ea3 n\u1ee3) v\u00e0 no repaid  (kh\u00f4ng tr\u1ea3 n\u1ee3) sao cho m\u1ee9c \u0111\u1ed9 ch\u00ednh x\u00e1c trong ph\u00e2n lo\u1ea1i l\u00e0 l\u1edbn nh\u1ea5t. Ti\u00eau ch\u00ed \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 m\u00f4 h\u00ecnh l\u00e0 ch\u1ec9 s\u1ed1 AUC, m\u1ed9t ch\u1ec9 s\u1ed1 kh\u00e1 quen thu\u1ed9c trong l\u0129nh v\u1ef1c scorecard. V\u1ec1 m\u1eb7t to\u00e1n h\u1ecdc AUC ch\u00ednh l\u00e0 ph\u1ea7n di\u1ec7n t\u00edch n\u1eb1m d\u01b0\u1edbi \u0111\u01b0\u1eddng cong ROC m\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a n\u00f3 n\u1eb1m trong kho\u1ea3ng t\u1eeb [0, 1]. M\u1ed9t m\u00f4 h\u00ecnh c\u00e0ng c\u00f3 s\u1ee9c m\u1ea1nh ph\u00e2n lo\u1ea1i t\u1ed1t khi AUC c\u00e0ng g\u1ea7n 1 v\u00e0 tr\u00e1i l\u1ea1i. Tr\u01b0\u1eddng h\u1ee3p AUC = 0.5 k\u1ebft qu\u1ea3 m\u00f4 h\u00ecnh b\u1eb1ng v\u1edbi vi\u1ec7c d\u1ef1 b\u00e1o ng\u1eabu nhi\u00ean. AUC < 0.5 \u0111\u1ea3o ng\u01b0\u1ee3c k\u1ebft qu\u1ea3 c\u1ee7a m\u00f4 h\u00ecnh b\u1ea1n s\u1ebd thu \u0111\u01b0\u1ee3c m\u1ed9t m\u00f4 h\u00ecnh m\u1ea1nh h\u01a1n.\n\n\u0110\u00e2y l\u00e0 m\u1ed9t b\u00e0i to\u00e1n thu\u1ed9c l\u0129nh v\u1ef1c credit risk \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nhi\u1ec1u trong c\u00e1c t\u1ed5 ch\u1ee9c t\u00e0i ch\u00ednh, ng\u00e2n h\u00e0ng. Ch\u00ednh v\u00ec vai tr\u00f2 v\u00e0 m\u1ee9c \u0111\u1ed9 quan tr\u1ecdng c\u1ee7a b\u00e0i to\u00e1n n\u00ean Home Credit thu h\u00fat \u0111\u01b0\u1ee3c tr\u00ean 7000 \u0111\u1ed9i tham d\u1ef1. D\u1eef li\u1ec7u c\u1ee7a b\u00e0i to\u00e1n thu\u1ed9c d\u1ea1ng c\u00f3 c\u1ea5u tr\u00fac (SQL) g\u1ed3m nhi\u1ec1u b\u1ea3ng li\u00ean h\u1ec7 v\u1edbi nhau b\u1edfi c\u00e1c primary key v\u00e0 foriegn key theo s\u01a1 \u0111\u1ed3 b\u00ean d\u01b0\u1edbi:\n\n![image](https:\/\/storage.googleapis.com\/kaggle-media\/competitions\/home-credit\/home_credit.png)\n\nC\u00e1c b\u1ea3ng d\u1eef li\u1ec7u bao qu\u00e1t c\u00e1c kh\u00eda c\u1ea1nh c\u1ee7a m\u1ed9t h\u1ed3 s\u01a1 t\u00edn d\u1ee5ng nh\u01b0:\n\n* Th\u00f4ng tin h\u1ed3 s\u01a1 kh\u00e1ch h\u00e0ng hi\u1ec7n t\u1ea1i: M\u1ed7i m\u1ed9t h\u1ed3 s\u01a1 \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh b\u1eb1ng m\u1ed9t kh\u00f3a SK_ID_CURR. Trong th\u00f4ng tin h\u1ed3 s\u01a1 ch\u00fang ta s\u1ebd bi\u1ebft \u0111\u01b0\u1ee3c thu nh\u1eadp, s\u1ed1 l\u01b0\u1ee3ng ng\u01b0\u1eddi ph\u1ee5 thu\u1ed9c, ngh\u1ec1 nghi\u1ec7p, tr\u00ecnh \u0111\u1ed9 gi\u00e1o d\u1ee5c, ng\u00e0y sinh, c\u00f3 s\u1edf h\u1eefu xe hay kh\u00f4ng,.... v\u00e0 r\u1ea5t nhi\u1ec1u c\u00e1c th\u00f4ng tin kh\u00e1c. C\u00e1c th\u00f4ng tin n\u00e0y c\u00f3 th\u1ec3 chia th\u00e0nh nh\u00f3m nh\u00e2n kh\u1ea9u h\u1ecdc (demographic) li\u00ean quan \u0111\u1ebfn c\u00e1 nh\u00e2n vay v\u00e0 th\u00f4ng tin t\u00edn d\u1ee5ng li\u00ean quan \u0111\u1ebfn t\u00ecnh tr\u1ea1ng t\u00edn d\u1ee5ng c\u1ee7a ng\u01b0\u1eddi vay. C\u00e1c b\u1ea3ng application_train.csv (s\u1eed d\u1ee5ng \u0111\u1ec3 hu\u1ea5n luy\u1ec7n) v\u00e0 b\u1ea3ng application_test.csv (s\u1eed d\u1ee5ng \u0111\u1ec3 test). V\u1ec1 m\u1eb7t c\u1ea5u tr\u00fac c\u00e1c tr\u01b0\u1eddng trong b\u1ea3ng application_train.csv v\u00e0 application_test.csv l\u00e0 gi\u1ed1ng nhau ngo\u1ea1i tr\u1eeb bi\u1ebfn m\u1ee5c ti\u00eau TARGET \u0111\u01b0\u1ee3c gi\u1ea5u \u1edf application_test.csv \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 k\u1ebft qu\u1ea3 m\u00f4 h\u00ecnh sau c\u00f9ng.\n\n* Th\u00f4ng tin giao d\u1ecbch: C\u00e1c l\u1ecbch s\u1eed giao d\u1ecbch v\u00e0 h\u00e0nh vi mua s\u1eafm qua th\u1ebb t\u00edn d\u1ee5ng c\u1ee7a ng\u01b0\u1eddi ti\u00eau d\u00f9ng t\u1ea1i home credit. B\u1ea3ng POSH_CASH_balance.csv\n\n* Th\u00f4ng tin tr\u1ea3 n\u1ee3: L\u1ecbch s\u1eed tr\u1ea3 n\u1ee3 c\u1ee7a kh\u00e1ch h\u00e0ng trong qu\u00e1 kh\u1ee9 n\u1ebfu h\u1ecd \u0111\u00e3 c\u00f3 c\u00e1c kho\u1ea3n vay tr\u01b0\u1edbc \u0111\u00f3 t\u1ea1i home credit. B\u1ea3ng installments_payment.csv\n\n* Th\u00f4ng tin h\u1ed3 s\u01a1 c\u00e1c kho\u1ea3n vay tr\u01b0\u1edbc \u0111\u00e2y t\u1ea1i home credit. B\u1ea3ng previous_application.csv\n\n* Th\u00f4ng tin c\u00e1c kho\u1ea3n vay t\u1ea1i t\u1ed5 ch\u1ee9c t\u00e0i ch\u00ednh kh\u00e1c \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef t\u1ea1i c\u1ee5c t\u00edn d\u1ee5ng. B\u1ea3ng bureau_balance.csv v\u00e0 bureau.csv.\n\n# 2. Ti\u1ec1n x\u1eed l\u00fd d\u1eef li\u1ec7u\n\nDo d\u1eef li\u1ec7u home credit \u0111\u01b0\u1ee3c chia th\u00e0nh nhi\u1ec1u kh\u00eda c\u1ea1nh d\u1eef li\u1ec7u nh\u1ecf v\u00e0 qu\u1ea3n l\u00fd t\u1ea1i m\u1ed7i b\u1ea3ng ri\u00eang bi\u1ec7t n\u00ean ta c\u1ea7n th\u1ed1ng k\u00ea c\u00e1c th\u00f4ng tin c\u1ee7a d\u1eef li\u1ec7u theo key l\u00e0 ID h\u1ed3 s\u01a1 v\u00e0 join c\u00e1c th\u00f4ng tin thu \u0111\u01b0\u1ee3c t\u1eeb m\u1ed7i b\u1ea3ng theo key \u0111\u1ec3 thu \u0111\u01b0\u1ee3c b\u1ea3ng t\u1ed5ng h\u1ee3p l\u00e0m input cho m\u00f4 h\u00ecnh. T\u1ea1i b\u01b0\u1edbc n\u00e0y ch\u00fang ta c\u1ea7n c\u00e1c k\u0129 n\u0103ng v\u1ec1 data manipulation tr\u00ean pandas. C\u1ee5 th\u1ec3 b\u1ea1n \u0111\u1ecdc c\u00f3 th\u1ec3 tham kh\u1ea3o th\u00eam h\u01b0\u1edbng d\u1eabn x\u1eed l\u00fd d\u1eef li\u1ec7u v\u1edbi [pandas](https:\/\/www.kaggle.com\/phamdinhkhanh\/gi-i-thi-u-pandas).\n\nM\u1ed9t \u0111i\u1ec3m c\u1ea7n l\u01b0u \u00fd \u0111\u00f3 l\u00e0 th\u00f4ng tin v\u1ec1 c\u00e1c h\u1ed3 s\u01a1 t\u00edn d\u1ee5ng th\u01b0\u1eddng kh\u00f4ng \u0111\u1ea7y \u0111\u1ee7. Do \u0111\u00f3 ch\u00fang ta c\u1ea7n ki\u1ec3m tra t\u1ef7 l\u1ec7 c\u00e1c quan s\u00e1t b\u1ecb missing \u1edf m\u1ed7i tr\u01b0\u1eddng. Vi\u1ec7c ki\u1ec3m tra t\u1ef7 l\u1ec7 missing gi\u00fap \u0111\u00e1nh gi\u00e1 m\u1ee9c \u0111\u1ed9 \u0111\u1ea7y \u0111\u1ee7 v\u1ec1 m\u1eb7t th\u00f4ng tin m\u00e0 m\u1ed9t tr\u01b0\u1eddng d\u1eef li\u1ec7u cung c\u1ea5p. Khi t\u1ef7 l\u1ec7 missing qu\u00e1 l\u1edbn, tr\u01b0\u1eddng d\u1eef li\u1ec7u th\u01b0\u1eddng kh\u00f4ng \u0111\u00e1ng tin c\u1eady trong ph\u00e2n lo\u1ea1i m\u00f4 h\u00ecnh v\u00e0 ch\u00fang ta c\u1ea7n ph\u1ea3i lo\u1ea1i nh\u1eefng bi\u1ebfn n\u00e0y kh\u1ecfi m\u00f4 h\u00ecnh.\n\n## 2.1. Kh\u1ea3o s\u00e1t d\u1eef li\u1ec7u\n\nB\u00ean d\u01b0\u1edbi ta s\u1ebd ki\u1ec3m tra s\u1ed1 tr\u01b0\u1eddng v\u00e0 k\u00edch th\u01b0\u1edbc m\u1eabu c\u1ee7a c\u00e1c t\u1eadp d\u1eef li\u1ec7u train v\u00e0 test.","3b2f92c2":"S\u1ed1 l\u01b0\u1ee3ng c\u00e1c bi\u1ebfn \u0111\u00e3 t\u0103ng l\u00ean do bi\u1ebfn \u0111\u1ed5i one-hot coding, tuy nhi\u00ean c\u00f3 s\u1ef1 ch\u00eanh l\u1ec7ch gi\u1eefa t\u1eadp train v\u00e0 test. Ki\u1ec3m tra c\u00e1c bi\u1ebfn \u1edf app_train kh\u00f4ng c\u00f3 trong app_test.","2c6d08f1":"Ki\u1ec3m tra k\u00edch th\u01b0\u1edbc d\u1eef li\u1ec7u sau bi\u1ebfn \u0111\u1ed5i.","ee6072f6":"## 2.3. X\u1eed l\u00fd outlier\n\nTrong m\u1ed9t b\u1ed9 d\u1eef li\u1ec7u th\u01b0\u1eddng c\u00f3 nh\u1eefng quan s\u00e1t b\u1ea5t th\u01b0\u1eddng. Nguy\u00ean nh\u00e2n c\u00f3 th\u1ec3 \u0111\u1ebfn t\u1eeb d\u1eef li\u1ec7u b\u1ecb sai \u0111\u1ecbnh d\u1ea1ng, qu\u00e1 tr\u00ecnh nh\u1eadp li\u1ec7u sai, quan s\u00e1t c\u00f3 t\u00ednh ch\u1ea5t \u0111\u1eb7c bi\u1ec7t,.... Vi\u1ec7c tra so\u00e1t c\u00e1c d\u1eef li\u1ec7u b\u1ea5t th\u01b0\u1eddng c\u00f3 th\u1ec3 gi\u00fap kh\u00e1m ph\u00e1 ra m\u1ed9t s\u1ed1 t\u00ecnh ch\u1ea5t c\u1ee7a d\u1eef li\u1ec7u v\u00e0 \u0111\u1ed3ng th\u1eddi hi\u1ec7u ch\u1ec9nh d\u1eef li\u1ec7u trong tr\u01b0\u1eddng h\u1ee3p nh\u1eadp li\u1ec7u sai. Ki\u1ebfm tra d\u1eef li\u1ec7u b\u1ea5t th\u01b0\u1eddng c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1eb1ng c\u00e1c th\u1ed1ng k\u00ea m\u00f4 t\u1ea3.","ec0fd832":"Gi\u00e1 tr\u1ecb cao nh\u1ea5t c\u1ee7a thu nh\u1eadp l\u00e0 kho\u1ea3ng 117 tri\u1ec7u USD trong khi trung b\u00ecnh thu nh\u1eadp ch\u1ec9 l\u00e0 168 ngh\u00ecn USD. Ch\u00fang ta s\u1ebd ki\u1ec3m tra ph\u00e2n ph\u1ed1i c\u1ee7a bi\u1ebfn TARGET theo bi\u1ebfn AMT_INCOME_TOTAL \u1ee9ng v\u1edbi c\u00e1c tr\u01b0\u1eddng h\u1ee3p Repaid v\u00e0 No repaid.","48fdd859":"Sau khi \u0111\u00e3 nh\u00f3m c\u00e1c features trong m\u1ed9t bi\u1ebfn ph\u00e2n lo\u1ea1i th\u00e0nh c\u00e1c features t\u1ed5ng h\u1ee3p ch\u00fang ta c\u1ea7n c\u1eadp nh\u1eadt l\u1ea1i c\u00e1c tr\u01b0\u1eddng c\u1ee7a b\u1ea3ng d\u1eef li\u1ec7u theo c\u00e1c features m\u1edbi.","d7349f44":"Th\u1ed1ng k\u00ea s\u1ed1 l\u01b0\u1ee3ng c\u00e1c class trong m\u1ed7i nh\u00f3m \u0111\u1ed1i v\u1edbi d\u1eef li\u1ec7u d\u1ea1ng object.","8346cae6":"ROC curve (Receiver Operating Characteristic) l\u00e0 m\u1ed9t \u0111\u01b0\u1eddng cong th\u1ec3 hi\u1ec7n m\u1ed1i li\u00ean h\u1ec7 gi\u1eefa t\u1ef7 l\u1ec7 m\u1eafc sai l\u1ea7m lo\u1ea1i I (false positive rate) v\u00e0 t\u1ef7 l\u1ec7 d\u1ef1 b\u00e1o \u0111\u00fang positive (true positive rate). \n\nTrong th\u1ed1ng k\u00ea, ch\u00fang ta chia c\u00e1c sai l\u1ea7m c\u1ee7a gi\u1ea3 thuy\u1ebft th\u00e0nh 2 lo\u1ea1i: sai l\u1ea7m lo\u1ea1i I v\u00e0 sai l\u1ea7m lo\u1ea1i II. Khi th\u1ef1c hi\u1ec7n m\u1ed9t m\u00f4 h\u00ecnh ph\u00e2n lo\u1ea1i n\u1ee3 m\u1ee5c ti\u00eau c\u1ee7a ch\u00fang ta l\u00e0 t\u00ecm ra nh\u1eefng h\u1ed3 s\u01a1 n\u1ee3 x\u1ea5u. M\u1ed9t k\u1ebft lu\u1eadn t\u1eeb m\u00f4 h\u00ecnh c\u00f3 th\u1ec3 r\u01a1i v\u00e0o 2 tr\u1ea1ng th\u00e1i sai l\u1ea7m: nh\u1eadn \u0111\u1ecbnh m\u1ed9t h\u1ed3 s\u01a1 x\u1ea5u l\u00e0 t\u1ed1t - lo\u1ea1i I, ho\u1eb7c tr\u00e1i l\u1ea1i, coi m\u1ed9t h\u1ed3 s\u01a1 t\u1ed1t l\u00e0 x\u1ea5u - lo\u1ea1i II (gi\u1ebft nh\u1ea7m c\u00f2n h\u01a1n b\u1ecf s\u00f3t). \n\nT\u00e1c h\u1ea1i c\u1ee7a sai l\u1ea7m lo\u1ea1i I s\u1ebd l\u1edbn h\u01a1n sai l\u1ea7m lo\u1ea1i II b\u1edfi \u1ea3nh h\u01b0\u1edfng do h\u1ed3 s\u01a1 x\u1ea5u g\u00e2y l\u00e0 l\u1edbn h\u01a1n nhi\u1ec1u so v\u1edbi vi\u1ec7c b\u1ea1n ki\u1ebfm \u0111\u01b0\u1ee3c m\u1ed9t h\u1ed3 s\u01a1 t\u1ed1t. \u0110\u00f3 c\u0169ng l\u00e0 l\u00fd do T\u00e0o Th\u00e1o th\u01b0\u1eddng hay \u0111a nghi b\u1edfi \u00f4ng bi\u1ebft \u0111\u01b0\u1ee3c m\u1ee9c \u0111\u1ed9 t\u00e1c h\u1ea1i c\u1ee7a 2 lo\u1ea1i sai l\u1ea7m n\u00e0y l\u00e0 kh\u00e1c nhau (m\u1eb7c d\u00f9 \u00f4ng c\u0169ng ch\u1eb3ng c\u00f3 m\u1ed9t ch\u1ee9ng ch\u1ec9 th\u1ed1ng k\u00ea n\u00e0o).\n\nN\u1ebfu ch\u00fang ta ch\u1ea5p nh\u1eadn m\u1ed9t t\u1ef7 d\u1ef1 b\u00e1o \u0111\u00fang h\u1ed3 s\u01a1 t\u1ed1t cao h\u01a1n th\u00ec ch\u00fang ta s\u1ebd ph\u1ea3i h\u1ea1 th\u1ea5p ng\u01b0\u1ee1ng threshold x\u00e1c \u0111\u1ecbnh lo\u1ea1i h\u1ed3 s\u01a1 (m\u1eb7c \u0111\u1ecbnh l\u00e0 0.5). \u0110i\u1ec1u n\u00e0y d\u1eabn \u0111\u1ebfn c\u00e1c h\u1ed3 s\u01a1 x\u1ea5u c\u00f3 kh\u1ea3 n\u0103ng b\u1ecb nh\u1eadn \u0111\u1ecbnh l\u00e0 h\u1ed3 s\u01a1 t\u1ed1t cao h\u01a1n. \u0110i\u1ec1u n\u00e0y cho th\u1ea5y lu\u00f4n c\u00f3 s\u1ef1 \u0111\u00e1nh \u0111\u1ed5i gi\u1eefa t\u1ef7 l\u1ec7 true positive rate v\u00e0 false positive rate. \n\nM\u1ed9t m\u00f4 h\u00ecnh ph\u00e2n lo\u1ea1i t\u1ed1t l\u00e0 m\u00f4 h\u00ecnh m\u00e0 \u1edf c\u00e1c threshold ta ph\u00e2n lo\u1ea1i \u0111\u01b0\u1ee3c nhi\u1ec1u nh\u1ea5t c\u00e1c h\u1ed3 s\u01a1 t\u1ed1t nh\u01b0ng ch\u1ec9 ph\u1ea3i ch\u1ea5p nh\u1eadn m\u1ed9t l\u01b0\u1ee3ng r\u1ea5t nh\u1ecf c\u00e1c h\u1ed3 s\u01a1 x\u1ea5u. C\u00e1c m\u00f4 h\u00ecnh nh\u01b0 v\u1eady \u0111\u1ec1u c\u00f3 chung m\u1ed9t t\u00ednh ch\u1ea5t, \u0111\u00f3 l\u00e0 \u0111\u01b0\u1eddng cong ROC l\u1ed3i l\u00ean ph\u00eda tr\u00ean so v\u1edbi tr\u1ee5c ho\u00e0nh. Nh\u01b0 v\u1eady c\u00e1c b\u1ea1n \u0111\u00e3 hi\u1ec3u \u0111\u01b0\u1ee3c \u00fd ngh\u0129a c\u1ee7a \u0111\u01b0\u1eddng cong ROC r\u1ed3i ch\u1ee9? Tr\u00ean th\u1ef1c ti\u1ec5n ROC l\u00e0 m\u1ed9t bi\u1ec3u \u0111\u1ed3 tr\u1ef1c quan \u0111\u00e1nh gi\u00e1 ph\u1ea9m ch\u1ea5t c\u1ee7a m\u00f4 h\u00ecnh. ROC c\u00e0ng l\u1ed3i m\u00f4 h\u00ecnh c\u00e0ng ph\u00e2n lo\u1ea1i t\u1ed1t v\u00e0 tr\u00e1i l\u1ea1i. M\u1ee9c \u0111\u1ed9 l\u1ed3i c\u1ee7a \u0111\u01b0\u1eddng cong ROC \u0111\u01b0\u1ee3c \u0111o b\u1eb1ng ph\u1ea7n di\u1ec7n t\u00edch n\u1eb1m d\u01b0\u1edbi \u0111\u01b0\u1eddng cong ROC v\u00e0 tr\u1ee5c ho\u00e0nh hay c\u00f2n g\u1ecdi l\u00e0 ch\u1ec9 s\u1ed1 AUC (Area under curve).\n\nTrong t\u00edn d\u1ee5ng sau khi \u0111\u00e3 t\u00ecm \u0111\u01b0\u1ee3c m\u00f4 h\u00ecnh s\u1edf h\u1eefu \u0111\u01b0\u1eddng cong ROC t\u1ed1t nh\u1ea5t, ng\u00e2n h\u00e0ng s\u1ebd x\u00e2y d\u1ef1ng m\u1ed9t h\u00e0m m\u1ea5t m\u00e1t d\u1ef1a tr\u00ean ph\u01b0\u01a1ng tr\u00ecnh \u01b0\u1edbc l\u01b0\u1ee3ng t\u1ed5n th\u1ea5t:\n$$EL = PD*LGD$$\nTrong \u0111\u00f3 EL - Expected Loss, PD - Probability Default, LGD - Loss given default.\n\n\u0110\u1ec3 ch\u1ecdn ra m\u1ed9t threshold t\u1ed1i \u01b0u mang l\u1ea1i t\u1ed5n th\u1ea5t v\u1ec1 m\u1eb7t l\u1ee3i \u00edch cho ng\u00e2n h\u00e0ng l\u00e0 nh\u1ecf nh\u1ea5t. V\u1ec1 EL l\u00e0 g\u00ec? PD, LGD l\u00e0 g\u00ec? M\u00ecnh s\u1ebd kh\u00f4ng gi\u1ea3i th\u00edch th\u00eam \u1edf b\u00e0i vi\u1ebft n\u00e0y. C\u00e1c b\u1ea1n mu\u1ed1n \u0111i s\u00e2u v\u00e0o ng\u00e0nh Credit Risk c\u00f3 th\u1ec3 t\u00ecm th\u1ea5y trong r\u1ea5t nhi\u1ec1u c\u00e1c t\u00e0i li\u1ec7u v\u00e0 kh\u00f3a h\u1ecdc v\u1ec1 m\u1ea3ng \u0111\u1ec1 t\u00e0i n\u00e0y.\n\nB\u00ean d\u01b0\u1edbi ta s\u1ebd x\u00e2y d\u1ef1ng m\u1ed9t \u0111\u01b0\u1eddng cong ROC.","02f212fd":"Th\u1ed1ng k\u00ea s\u1ed1 l\u01b0\u1ee3ng kh\u00f4ng tr\u1ea3 n\u1ee3 theo c\u00e1c kho\u1ea3ng tu\u1ed5i.","f14d9ab6":"Th\u1ed1ng k\u00ea t\u1ef7 l\u1ec7 Repaid\/Not Repaid theo c\u00e1c bi\u1ebfn d\u1ef1 b\u00e1o d\u1ea1ng object.","94b63708":"So v\u1edbi tr\u01b0\u1edbc khi th\u1ef1c hi\u1ec7n feature engineering \u0111\u01b0\u1eddng cong ROC sau khi th\u1ef1c hi\u1ec7n feature engineering l\u1ed3i h\u01a1n. \u0110i\u1ec1u \u0111\u00f3 cho th\u1ea5y s\u1ee9c m\u1ea1nh ph\u00e2n lo\u1ea1i c\u1ee7a m\u00f4 h\u00ecnh t\u1ed1t h\u01a1n sau feature engineering.","07a1e07c":"## 3.2. Logistic regression\n\nM\u1eb7c d\u00f9 t\u00ean m\u00f4 h\u00ecnh l\u00e0 logistic regression nh\u01b0ng logistic kh\u00f4ng ph\u1ea3i l\u00e0 m\u00f4 h\u00ecnh h\u1ed3i qui m\u00e0 tr\u00e1i l\u1ea1i, l\u00e0 m\u00f4 h\u00ecnh thu\u1ed9c l\u1edbp ph\u00e2n lo\u1ea1i. Ngo\u00e0i ra logistic kh\u00f4ng ph\u1ea3i l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p m\u1ea1nh. \u0110\u00e2y l\u00e0 l\u1edbp m\u00f4 h\u00ecnh c\u00f3 \u0111\u01b0\u1eddng bi\u00ean ph\u00e2n lo\u1ea1i tuy\u1ebfn t\u00ednh (linear seperable) n\u00ean kh\u1ea3 n\u0103ng ph\u00e2n lo\u1ea1i d\u1eef li\u1ec7u trong tr\u01b0\u1eddng h\u1ee3p bi\u00ean c\u1ee7a c\u00e1c nh\u00f3m ch\u1ed3ng l\u1ea5n s\u1ebd y\u1ebfu. Tuy nhi\u00ean \u0111\u00e2y l\u00e0 ph\u01b0\u01a1ng ph\u00e1p \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ph\u1ed5 bi\u1ebfn nh\u1ea5t trong t\u00ednh to\u00e1n scorecard. M\u1ed9t trong nh\u1eefng nguy\u00ean nh\u00e2n gi\u00fap logistic \u0111\u01b0\u1ee3c \u01b0a chu\u1ed9ng trong scorecard \u0111\u00f3 l\u00e0:\n\n* Gi\u00e1 tr\u1ecb c\u1ee7a logistic n\u1eb1m gi\u1edbi h\u1ea1n trong kho\u1ea3ng [0, 1] v\u00e0 ph\u00f9 h\u1ee3p v\u1edbi mi\u1ec1n gi\u00e1 tr\u1ecb m\u00e0 m\u1ed9t x\u00e1c xu\u1ea5t r\u01a1i v\u00e0o.\n* \u0110\u1ea1o h\u00e0m c\u1ee7a h\u00e0m sigmoid r\u1ea5t \u0111\u1eb9p m\u1eaft..\n* H\u00e0m m\u1ea5t m\u00e1t l\u00e0 m\u1ed9t h\u00e0m l\u1ed3i.\n* C\u00f3 th\u1ec3 gi\u1ea3i th\u00edch \u0111\u01b0\u1ee3c t\u00e1c \u0111\u1ed9ng c\u1ee7a c\u00e1c bi\u1ebfn gi\u1ea3i th\u00edch l\u00ean bi\u1ebfn m\u1ee5c ti\u00eau d\u1ef1a v\u00e0o h\u1ec7 s\u1ed1 \u01b0\u1edbc l\u01b0\u1ee3ng. \u0110i\u1ec1u m\u00e0 tr\u01b0\u1eddng ph\u00e1i th\u1ed1ng k\u00ea r\u1ea5t coi tr\u1ecdng.\n\nCh\u00ednh v\u00ec th\u1ebf, khi l\u00e0m quen v\u1edbi Machine Learning, h\u1ed3i qui logistic s\u1ebd l\u00e0 m\u1ed9t trong nh\u1eefng l\u1edbp b\u00e0i to\u00e1n \u0111\u01b0\u1ee3c ti\u1ebfp c\u1eadn \u0111\u1ea7u ti\u00ean sau h\u1ed3i qui tuy\u1ebfn t\u00ednh. B\u00ean d\u01b0\u1edbi l\u00e0 m\u00f4 h\u00ecnh h\u1ed3i qui logistic \u00e1p d\u1ee5ng cho b\u00e0i to\u00e1n n\u00e0y.","e9641b13":"Bi\u1ec3u di\u1ec5n c\u1ea3 2 \u0111\u01b0\u1eddng ROC c\u1ee7a h\u1ed3i qui logistic v\u00e0 random forest tr\u00ean c\u00f9ng m\u1ed9t \u0111\u1ed3 th\u1ecb.","1ab43fb2":"V\u1ebd bi\u1ec3u \u0111\u1ed3 t\u1ef7 l\u1ec7 Repaid\/Not Repaid theo c\u00e1c bi\u1ebfn d\u1ef1 b\u00e1o d\u1ea1ng object.","5e885b6d":"Bi\u1ec3u \u0111\u1ed3 t\u1ef7 l\u1ec7 tr\u1ea3 n\u1ee3 c\u00e1c h\u1ee3p \u0111\u1ed3ng theo t\u1eebng nh\u00f3m tu\u1ed5i.","25247213":"\u0110\u1ec3 \u0111\u00e1nh gi\u00e1 li\u1ec7u r\u1eb1ng sau khi th\u1ef1c hi\u1ec7n features engineering c\u00f3 gi\u00fap c\u1ea3i thi\u1ec7n k\u1ebft qu\u1ea3 hay kh\u00f4ng ch\u00fang ta th\u1ef1c hi\u1ec7n h\u1ed3i qui logistic theo nh\u1eefng features m\u1edbi.","bf2d1191":"M\u1eabu c\u00f3 hi\u1ec7n t\u01b0\u1ee3ng m\u1ea5t c\u00e2n b\u1eb1ng khi nh\u00f3m thi\u1ec3u ch\u1ec9 chi\u1ebfm 8.07% v\u00e0 nh\u00f3m \u0111a s\u1ed1 chi\u1ebfm t\u1edbi 91.93%. M\u1eabu m\u1ea5t c\u00e2n b\u1eb1ng c\u00f3 th\u1ec3 d\u1eabn t\u1edbi m\u1ed9t s\u1ed1 t\u00e1c h\u1ea1i \u0111\u1ed1i v\u1edbi m\u00f4 h\u00ecnh nh\u01b0:\n\n1. K\u1ebft qu\u1ea3 d\u1ef1 b\u00e1o c\u1ee7a m\u00f4 h\u00ecnh ch\u1ec9 thi\u00ean v\u1ec1 m\u1ed9t class. Th\u1eadm ch\u00ed trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p m\u00f4 h\u00ecnh d\u1ef1 b\u00e1o ch\u1ec9 \u0111\u01b0a ra m\u1ed9t class duy nh\u1ea5t l\u00e0 class \u0111a s\u1ed1.\n2. D\u1ec5 d\u00e0ng ng\u1ed9 nh\u1eadn m\u00f4 h\u00ecnh t\u1ed1t do Accuracy c\u1ee7a m\u00f4 h\u00ecnh \u0111\u1ed1i v\u1edbi m\u1eabu m\u1ea5t c\u00e2n b\u1eb1ng th\u01b0\u1eddng r\u1ea5t cao. Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y ta c\u1ea7n s\u1eed d\u1ee5ng \u0111\u1ebfn c\u00e1c ch\u1ec9 s\u1ed1 thay th\u1ebf nh\u01b0 precision, recall, F1-Score, Kappa, ROC Curve. V\u1ec1 n\u1ed9i dung v\u00e0 \u00fd ngh\u0129a c\u1ee7a c\u00e1c ch\u1ec9 s\u1ed1 n\u00e0y c\u00e1c b\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o t\u1ea1i [\u0111\u00e1nh gi\u00e1 h\u1ec7 th\u1ed1ng ph\u00e2n l\u1edbp](https:\/\/machinelearningcoban.com\/2017\/08\/31\/evaluation\/).\n\nKhi g\u1eb7p hi\u1ec7n t\u01b0\u1ee3ng m\u1ea5t c\u00e2n b\u1eb1ng m\u1eabu ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng nhi\u1ec1u ph\u01b0\u01a1ng ph\u00e1p kh\u00e1c nhau \u0111\u1ec3 bi\u1ebfn \u0111\u1ed5i m\u1eabu v\u1ec1 c\u00e2n b\u1eb1ng. M\u1ed9t trong nh\u1eefng ph\u01b0\u01a1ng ph\u00e1p \u0111\u00f3 l\u00e0:\n\n1.\tThu th\u1eadp th\u00eam nhi\u1ec1u d\u1eef li\u1ec7u cho m\u1eabu thi\u1ec3u s\u1ed1 n\u1ebfu vi\u1ec7c thu th\u1eadp th\u00eam d\u1eef li\u1ec7u l\u00e0 kh\u1ea3 thi tr\u00ean th\u1ef1c t\u1ebf.\n2.\tS\u1eed d\u1ee5ng c\u00e1c ph\u01b0\u01a1ng ph\u00e1p t\u00e1i ch\u1ecdn m\u1eabu c\u00f3 l\u1eb7p l\u1ea1i (resampling) nh\u1eb1m gia t\u0103ng s\u1ed1 l\u01b0\u1ee3ng m\u1eabu thi\u1ec3u s\u1ed1.\n3.\tS\u1eed d\u1ee5ng k\u0129 thu\u1eadt t\u1ea1o m\u1eabu t\u1ed5ng h\u1ee3p cho m\u1eabu thi\u1ec3u (Synthetic Minority Over-sampling Technique - SMOTE). Thay v\u00ec l\u1ea5y c\u00e1c quan s\u00e1t l\u1eadp l\u1ea1i, thu\u1eadt to\u00e1n s\u1ebd t\u1ea1o ra c\u00e1c quan s\u00e1t t\u1ed5ng h\u1ee3p d\u1ef1a tr\u00ean hai ho\u1eb7c nhi\u1ec1u quan s\u00e1t m\u1eabu. C\u00e1c m\u1eabu \u0111\u01b0\u1ee3c l\u1ef1a ch\u1ecdn c\u00f3 s\u1ef1 t\u01b0\u01a1ng \u0111\u01b0\u01a1ng nhau d\u1ef1a tr\u00ean th\u01b0\u1edbc \u0111o kho\u1ea3ng c\u00e1ch. C\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a quan s\u00e1t t\u1ed5ng h\u1ee3p sau \u0111\u00f3 s\u1ebd \u0111\u01b0\u1ee3c t\u1ea1o ra b\u1eb1ng c\u00e1ch th\u00eam m\u1ed9t \u0111\u1ea1i l\u01b0\u1ee3ng ng\u1eabu nhi\u00ean ch\u00eanh l\u1ec7ch so v\u1edbi c\u00e1c \u0111i\u1ec3m l\u00e2n c\u1eadn.\n4.\tTh\u00eam c\u00e1c h\u1ec7 s\u1ed1 ph\u1ea1t v\u00e0o m\u00f4 h\u00ecnh \u0111\u1ec3 gia t\u0103ng h\u00e0m m\u1ea5t m\u00e1t nhi\u1ec1u h\u01a1n n\u1ebfu d\u1ef1 b\u00e1o sai c\u00e1c m\u1eabu thi\u1ec3u. \n\nB\u00ean d\u01b0\u1edbi ta s\u1ebd th\u1ed1ng k\u00ea d\u1eef li\u1ec7u missing v\u00e0 c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u numeric, categorical.","53e3be8b":"## 3.6. Neural network","087566f4":"Ta nh\u1eadn th\u1ea5y bi\u1ebfn thu nh\u1eadp c\u00f3 d\u1ea5u hi\u1ec7u b\u1ea5t th\u01b0\u1eddng d\u1eef li\u1ec7u khi h\u1ea7u h\u1ebft c\u00e1c kho\u1ea3ng ng\u0169 ph\u00e2n v\u1ecb (quintile) c\u1ee7a bi\u1ebfn \u0111\u1ec1u th\u1ea5p quan g\u1ed1c 0 ngo\u1ea1i tr\u1eeb m\u1ed9t v\u00e0i tr\u01b0\u1eddng h\u1ee3p cao \u0111\u1eb7c bi\u1ec7t. \u0110i\u1ec1u n\u00e0y cho th\u1ea5y c\u00f3 s\u1ef1 ch\u00eanh l\u1ec7ch trong m\u1ee9c thu nh\u1eadp c\u1ee7a nh\u1eefng ng\u01b0\u1eddi \u0111i vay.","7112a09b":"## 2.4. X\u1eed l\u00fd d\u1eef li\u1ec7u missing\n\nX\u1eed l\u00fd d\u1eef li\u1ec7u missing l\u00e0 m\u1ed9t trong nh\u1eefng m\u1ea3ng r\u1ea5t quan tr\u1ecdng c\u1ee7a ti\u1ec1n x\u1eed l\u00fd d\u1eef li\u1ec7u (pre-processing data). C\u00e1c ph\u01b0\u01a1ng ph\u00e1p x\u1eed l\u00fd d\u1eef li\u1ec7u missing c\u0169ng \u0111a d\u1ea1ng, t\u1eeb \u0111\u01a1n gi\u1ea3n \u0111\u1ebfn ph\u1ee9c t\u1ea1p. Nh\u1eefng ph\u01b0\u01a1ng ph\u00e1p th\u00f4ng th\u01b0\u1eddng nh\u1ea5t \u0111\u00f3 l\u00e0 thay th\u1ebf c\u00e1c \u0111i\u1ec3m d\u1eef li\u1ec7u b\u1ecb missing b\u1eb1ng c\u00e1c gi\u00e1 tr\u1ecb \u0111\u1ea1i di\u1ec7n ch\u1eb3ng h\u1ea1n nh\u01b0 median, mean, ho\u1eb7c gi\u00e1 tr\u1ecb c\u00f3 t\u1ea7n xu\u1ea5t xu\u1ea5t hi\u1ec7n l\u1edbn nh\u1ea5t (mode). M\u1ed9t s\u1ed1 ph\u01b0\u01a1ng ph\u00e1p ph\u1ee9c t\u1ea1p h\u01a1n s\u1ebd d\u1ef1a tr\u00ean kho\u1ea3ng c\u00e1ch c\u1ee7a c\u00e1c \u0111i\u1ec3m d\u1eef li\u1ec7u \u0111\u1ec3 thay c\u00e1c d\u1eef li\u1ec7u missing b\u1eb1ng gi\u00e1 tr\u1ecb c\u1ee7a quan s\u00e1t g\u1ea7n nh\u1ea5t v\u1edbi n\u00f3 ho\u1eb7c th\u1ef1c hi\u1ec7n voting d\u1eef li\u1ec7u trong m\u1ed9t t\u1eadp h\u1ee3p g\u1ea7n nh\u1ea5t b\u1eb1ng trung b\u00ecnh c\u00f3 tr\u1ecdng s\u1ed1 ho\u1eb7c kh\u00f4ng c\u00f3 tr\u1ecdng s\u1ed1 c\u1ee7a c\u00e1c \u0111i\u1ec3m n\u00e0y. \nTrong ph\u00e2n t\u00edch n\u00e0y t\u00f4i s\u1ebd \u00e1p d\u1ee5ng MinMaxScaler \u0111\u1ec3 chu\u1ea9n h\u00f3a bi\u1ebfn d\u1ef1 b\u00e1o v\u00e0 s\u1eed d\u1ee5ng mean \u0111\u1ec3 x\u1eed l\u00fd d\u1eef li\u1ec7u missing.","820289a4":"Ta nh\u1eadn th\u1ea5y \u0111\u01b0\u1eddng ROC c\u1ee7a Random Forest l\u1ed3i h\u01a1n so v\u1edbi Logistic. \u0110i\u1ec1u \u0111\u00f3 cho th\u1ea5y s\u1ee9c m\u1ea1nh ph\u00e2n lo\u1ea1i c\u1ee7a Random Forest l\u00e0 t\u1ed1t h\u01a1n Logistic.\n\nBi\u1ec3u \u0111\u1ed3 precision v\u00e0 recall curve","241b473b":"## 2.2. Nh\u00f3m c\u00e1c \u0111\u1eb7c tr\u01b0ng theo t\u1ef7 l\u1ec7 Repaid\/Not Repaid\n\u0110\u1ec3 gi\u1ea3m thi\u1ec3u s\u1ed1 l\u01b0\u1ee3ng \u0111\u1eb7c tr\u01b0ng (features) ta c\u00f3 th\u1ec3 nh\u00f3m nh\u1eefng bi\u1ebfn c\u00f3 t\u1ef7 l\u1ec7 Repaid\/Not Repaid g\u1ea7n b\u1eb1ng nhau v\u00e0o m\u1ed9t nh\u00f3m b\u1edfi nh\u1eefng nh\u00f3m n\u00e0y c\u00f3 \u0111\u1eb7c t\u00ednh g\u1ea7n gi\u1ed1ng nhau trong ph\u00e2n lo\u1ea1i h\u1ee3p \u0111\u1ed3ng.","948a1aad":"M\u1ee9c \u0111\u1ed9 t\u01b0\u01a1ng quan c\u1ee7a c\u00e1c bi\u1ebfn s\u1ebd \u0111\u01b0\u1ee3c x\u1ebfp h\u1ea1ng m\u1ed9t c\u00e1ch t\u01b0\u01a1ng \u0111\u1ed1i d\u1ef1a tr\u00ean gi\u00e1 tr\u1ecb tuy\u1ec7t \u0111\u1ed1i c\u1ee7a ch\u00fang. C\u00e1c kho\u1ea3ng \u0111\u00e1nh gi\u00e1 nh\u01b0 sau:\n\n* 0-0.19: R\u1ea5t y\u1ebfu.\n* 0.2-0.39: Y\u1ebfu.\n* 0.4-0.59: Trung b\u00ecnh.\n* 0.6-0.79: Cao.\n* 0.8-1: R\u1ea5t cao.\n\nD\u1ef1a tr\u00ean b\u1ea3ng h\u1ec7 s\u1ed1 t\u01b0\u01a1ng quan ch\u00fang ta c\u00f3 th\u1ec3 t\u00ecm ra nh\u1eefng bi\u1ebfn c\u00f3 m\u1ed1i li\u00ean h\u1ec7 l\u1edbn t\u1edbi bi\u1ebfn TARGET.","95ce747a":"\u0110\u01b0\u1eddng ROC curve kh\u00f4ng l\u1ed3i l\u00ean ph\u00eda tr\u00ean so v\u1edbi tr\u1ee5c ho\u00e0nh cho th\u1ea5y s\u1ee9c m\u1ea1nh ph\u00e2n lo\u1ea1i c\u1ee7a m\u00f4 h\u00ecnh t\u01b0\u01a1ng \u0111\u1ed1i y\u1ebfu. T\u1ef7 l\u1ec7 precision v\u00e0 recall theo c\u00e1c ng\u01b0\u1ee1ng threshold c\u0169ng kh\u00f4ng ph\u1ea3i l\u00e0 c\u00e1c \u0111\u01b0\u1eddng cong l\u1ed3i d\u1eabn \u0111\u1ebfn khi thay \u0111\u1ed5i threshold c\u00f3 th\u1ec3 l\u00e0m t\u0103ng chi ph\u00ed \u0111\u00e1nh \u0111\u1ed5i gi\u1eefa t\u1ef7 l\u1ec7 precision v\u00e0 recall \u0111\u00e1ng k\u1ec3. \u1ede m\u1ed7i m\u1ee9c threshold kh\u00f4ng \u0111\u1ea1t \u0111\u01b0\u1ee3c \u0111\u1ed3ng th\u1eddi t\u1ef7 l\u1ec7 cao \u1edf precision v\u00e0 recall. Thay v\u00e0o \u0111\u00f3 ta s\u1ebd ph\u1ea3i \u0111\u00e1nh \u0111\u1ed5i gi\u1eefa precision cao ho\u1eb7c recall cao. \u0110\u00e2y kh\u00f4ng ph\u1ea3i l\u00e0 m\u1ed9t m\u00f4 h\u00ecnh \u0111\u1ee7 t\u1ed1t \u0111\u1ec3 \u00e1p d\u1ee5ng v\u00e0o th\u1ef1c ti\u1ec5n.","a824ad11":"S\u1eed d\u1ee5ng ph\u01b0\u01a1ng ph\u00e1p 3 sigma \u0111\u1ec3 \u0111i\u1ec1u ch\u1ec9nh l\u1ea1i c\u00e1c gi\u00e1 tr\u1ecb n\u1eb1m ngo\u00e0i mi\u1ec1n $[\\mu - 3\\sigma, \\mu + 3\\sigma]$ v\u1ec1 trong mi\u1ec1n gi\u00e1 tr\u1ecb \u0111\u00f3. \u0110\u1ed1i v\u1edbi gi\u00e1 tr\u1ecb l\u1edbn h\u01a1n $\\mu+3\\sigma$ s\u1ebd \u0111\u01b0\u1ee3c g\u00e1n b\u1eb1ng $\\mu+3\\sigma$ v\u00e0 t\u01b0\u01a1ng t\u1ef1 v\u1edbi gi\u00e1 tr\u1ecb nh\u1ecf h\u01a1n $\\mu - 3\\sigma$. Ph\u01b0\u01a1ng ph\u00e1p n\u00e0y gi\u00fap \u0111i\u1ec1u ch\u1ec9nh c\u00e1c outlier v\u1ec1 trong kho\u1ea3ng bi\u1ebfn thi\u00ean cho ph\u00e9p v\u00e0 l\u00e0m gi\u1ea3m \u1ea3nh h\u01b0\u1edfng ch\u1ec7ch g\u00e2y ra b\u1edfi ch\u00fang.","f3fc52ca":"V\u1ebd bi\u1ec3u \u0111\u1ed3 \u0111\u01b0\u1eddng ROC curve"}}