{"cell_type":{"a69ad49c":"code","54274ba6":"code","af71862f":"code","e80996c3":"code","6825aa8e":"code","6e0ea362":"code","3a939340":"code","faaddff9":"code","dd9a7707":"code","d6032e8b":"code","350eabd6":"code","5f7f4c35":"code","a0c4b21c":"code","07c6f3ff":"code","31692bba":"code","37adc19d":"code","53d87319":"code","3ea02b97":"code","25a61256":"code","78b412ce":"code","39f5d63c":"code","1cca8765":"code","648e3437":"code","5e1a3402":"code","dc3353c3":"markdown","a95a5cc6":"markdown","fb0f0f96":"markdown","5017fef1":"markdown","4a5cb1e6":"markdown","1d9207d3":"markdown","50bb0adc":"markdown","6ae83d50":"markdown","496b362b":"markdown","0ddfe0d7":"markdown","340483c1":"markdown","5877c21f":"markdown","01fd1044":"markdown"},"source":{"a69ad49c":"# Import the required libraries:\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.impute import KNNImputer, SimpleImputer \nfrom sklearn.preprocessing import OrdinalEncoder, MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom catboost import CatBoostRegressor","54274ba6":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","af71862f":"train = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv', index_col='Id')\ntest = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv', index_col=0)","e80996c3":"train.info()","6825aa8e":"test.info()","6e0ea362":"train_useful = train.drop(['Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature'], axis=1)\ntest_useful = test.drop(['Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature'], axis=1)","3a939340":"y = train_useful['SalePrice']\ntrain_useful = train_useful.drop(['SalePrice'], axis=1)","faaddff9":"cat_features = [cat for cat in train_useful.columns if train_useful[cat].dtype == 'object']\nnum_features = [num for num in train_useful.columns if train_useful[num].dtype == 'int64' or train_useful[num].dtype == 'float64']\ncat_features","dd9a7707":"test_useful[num_features]","d6032e8b":"num_imputer = KNNImputer()\ntrain_useful[num_features] = num_imputer.fit_transform(train_useful[num_features])\ntest_useful[num_features] = num_imputer.transform(test_useful[num_features])","350eabd6":"test_useful.info()","5f7f4c35":"cat_imputer = SimpleImputer(strategy='constant', fill_value='Unknown')\n\ntrain_useful[cat_features] = cat_imputer.fit_transform(train_useful[cat_features])\ntest_useful[cat_features] = cat_imputer.transform(test_useful[cat_features])","a0c4b21c":"test_useful.info()","07c6f3ff":"tricky_cols = []\n\nfor col in cat_features:\n    if set(train_useful[col].value_counts().index) != set(test_useful[col].value_counts().index):\n        tricky_cols.append(col)\n\ncat_features = [feature for feature in cat_features if feature not in tricky_cols]\n\nprint(cat_features, tricky_cols)","31692bba":"train_useful = train_useful.drop(tricky_cols, axis=1)\ntest_useful = test_useful.drop(tricky_cols, axis=1)","37adc19d":"cat_encoder = OrdinalEncoder()\n\ntrain_useful[cat_features] = cat_encoder.fit_transform(train_useful[cat_features])\ntest_useful[cat_features] = cat_encoder.transform(test_useful[cat_features])","53d87319":"train_useful.head()","3ea02b97":"num_scaler = MinMaxScaler()\n\ntrain_useful[num_features] = num_scaler.fit_transform(train_useful[num_features])\ntest_useful[num_features] = num_scaler.transform(test_useful[num_features])","25a61256":"test_useful.head()","78b412ce":"X = train_useful\nX_test = test_useful","39f5d63c":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state=1)","1cca8765":"model = CatBoostRegressor(random_state=1)\nmodel.fit(X_train, y_train)\npreds = model.predict(X_val)","648e3437":"score = mean_absolute_error(preds, y_val)\nscore","5e1a3402":"test_pred = model.predict(X_test)\n\n\nsubmission = pd.DataFrame({'Id': X_test.index,\n                      'SalePrice': test_pred})\n\nsubmission.to_csv('submission.csv', index=False)","dc3353c3":"Using ordinal encoding for categorical features:","a95a5cc6":"Split the train into training and validation:","fb0f0f96":"Filling in missing values with median or mean is contrary to the logic of the data, so we fill in missing values in numerical features using KNN algorithm:","5017fef1":"Now we separate the target feature:","4a5cb1e6":"And using scaler to bring numerical features to a single range:","1d9207d3":"And separate categorical features from numerical features:","50bb0adc":"Let's see if there are missing values in both datasets:","6ae83d50":"So, the missing values are filled, but there is one problem: the occurrences of the values of some categorical features do not match in the training and test datasets. These features will not participate in training and testing the model, we will find and remove them:","496b362b":"Yes, there are a lot of missing values. First, we discard the features in which most or half of the values are missing:","0ddfe0d7":"Loading the training and test datasets:","340483c1":"Well, error decreased compared to exercises notebooks :)\n\nNow the final test and submission:","5877c21f":"And finally train the model without choosing the optimal hyperparameters:","01fd1044":"And now we fill in the missing values in the categorical features with a constant value 'Unknown':"}}