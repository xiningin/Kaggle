{"cell_type":{"eb5b3d86":"code","24d8e814":"code","9b63db84":"code","f9019c11":"code","bbf74613":"code","b39428af":"code","9dd722fa":"code","6f1e91aa":"code","b7dd0014":"code","388aa9e3":"code","c841eeae":"code","d968711b":"code","7f7a1f69":"code","bdaea680":"code","dc19fe18":"code","77f4d8a9":"code","f0b4f23c":"code","e1ff229a":"code","708f5c31":"code","a7d6b593":"code","9114ac4f":"code","dcc6f527":"code","460d62a4":"code","b26fde8f":"code","2dfa529a":"code","4b3ffb0c":"code","502b7f7b":"code","ae9a52ee":"code","eaf7f122":"code","c8b47cf0":"code","ccf64b4f":"code","369fdc92":"code","0043cc04":"code","9e6cb1a0":"code","b1ec9daf":"code","a4ba396b":"code","eb8b75b7":"code","0141f500":"code","8a714881":"code","24b9fffc":"code","1321b649":"code","e8ba7bee":"code","23fe8ceb":"code","fae94441":"code","94ec644d":"code","4f51b520":"code","01db682c":"code","9eddd434":"markdown","e2f6891d":"markdown","cce0002c":"markdown","3fbcb4fc":"markdown","1d19f6c0":"markdown","205e662d":"markdown","f3a54016":"markdown","bcaf7f7c":"markdown","7e922a8f":"markdown","a9ebbb52":"markdown","5d2a9557":"markdown","1eae9996":"markdown","bb9a9ecd":"markdown"},"source":{"eb5b3d86":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport pandas_profiling as pp","24d8e814":"from pathlib import Path \npath = Path('\/kaggle\/input\/store-sales-time-series-forecasting\/')","9b63db84":"!pip install kats","f9019c11":"df_train = pd.read_csv(path \/ 'train.csv', parse_dates=['date'], infer_datetime_format=True)\ndf_train.shape","bbf74613":"#Remove data close to earthquake , keep fresher data with a year at leat \n#df_train = df_train[df_train['date'] >= pd.to_datetime(\"2016-06-01\")]\ndf_train.shape","b39428af":"df_train_multi_var = df_train.pivot(index=['date'], columns=['store_nbr', 'family'], values=['sales']).reset_index()\n","9dd722fa":"def build_col_name_dict(df):\n    dict_cols = {}\n    for i, col in enumerate(df.columns):\n        if i > 0:       \n            dict_cols[i] =  {'store': col[1] , 'family': col[2]}\n    return dict_cols \n    \n        \ndict_cols = build_col_name_dict(df_train_multi_var)\n\n\ndf_train_multi_var.columns = ['time'] + list(dict_cols.keys())","6f1e91aa":"df_train_multi_var","b7dd0014":"df_test = pd.read_csv(path \/ 'test.csv', parse_dates=['date'], infer_datetime_format=True)\ndf_test['date'].value_counts()","388aa9e3":"prediction_steps = df_test['date'].nunique()","c841eeae":"from kats.consts import TimeSeriesData\nfrom kats.models.var import VARModel, VARParams\n\nmulti_ts = TimeSeriesData(df_train_multi_var)\nparams = VARParams()\nm = VARModel(multi_ts, params)\nm.fit()","d968711b":"predictions_var = m.predict(steps=16)","7f7a1f69":"list_predictions_df = []\nfor k, v in predictions_var.items(): \n    store, family = dict_cols[k]['store'], dict_cols[k]['family']\n    \n    df = v.to_dataframe()[['time', 'fcst']].rename(columns={\"fcst\": 'prediction_var'})\n    df['store_nbr'] = store\n    df['family'] = family\n    list_predictions_df.append(df)\n\npredictions_var = pd.concat(list_predictions_df)","bdaea680":"import plotly.graph_objects as go \nimport plotly.express as px\nlist_colors = px.colors.qualitative.Plotly\ndef plot_train_prediction(df_train, df_predictions, store=3, n_families=10, date_begin=\"2017-07-15\", pred_time_col='time' , pred_col='prediction_var'):\n    df_train_viz = df_train[(df_train['date'] > pd.to_datetime(\"2017-07-15\"))&(df_train['store_nbr']==store)]\n    fig = go.Figure()\n\n    for i, family in enumerate(df_train_viz['family'].unique()[:10]):\n        train = df_train_viz[df_train_viz['family']==family]\n        pred = df_predictions[(df_predictions['family']==family)&(df_predictions['store_nbr']==store)]\n        fig.add_trace(go.Scatter(x =train[\"date\"], y=train[\"sales\"], mode='lines', name=f'{family}_train', line=dict(color=list_colors[i])))\n        fig.add_trace(go.Scatter(x =pred[pred_time_col], y=pred[pred_col], mode='lines', name=f'{family}_pred',  line=dict(color=list_colors[i])))\n\n    fig.show()\n    \nplot_train_prediction(df_train, predictions_var)","dc19fe18":"predictions_var = predictions_var.rename(columns={'time':'date'})\npredictions_var = pd.merge(predictions_var, df_test[['id', 'date', 'family', 'store_nbr']], on=['date', 'family', 'store_nbr'])","77f4d8a9":"stores = pd.read_csv(path \/ 'stores.csv')\nstores = stores.rename(columns={\"type\": \"store_type\", 'cluster': 'store_cluster'})\ndf_train = pd.merge(df_train, stores, on='store_nbr', how='left')\ndf_train.shape","f0b4f23c":"holidays = pd.read_csv(path \/ 'holidays_events.csv', parse_dates=['date'], infer_datetime_format=True)\n#Keep only not transferrred holidays\nholidays = holidays.loc[holidays['transferred'] == False]\n\nholidays_nat = holidays[holidays['locale']=='National'].drop_duplicates(subset='date')\nholidays_reg = holidays[holidays['locale']=='Regional'].drop_duplicates(subset='date')\nholidays_loc = holidays[holidays['locale']=='Local'].drop_duplicates(subset='date')\n\ndf_train = pd.merge(df_train, holidays_nat[['date','description']], on='date', how='left').rename(columns={'description': 'holiday_nat'})\ndf_train = pd.merge(df_train, holidays_reg[['date', 'locale_name', 'description']], left_on=['date', 'state'], right_on=['date', 'locale_name'], how='left').rename(columns={'description': 'holiday_reg'}).drop(columns=['locale_name'])\ndf_train = pd.merge(df_train, holidays_loc[['date', 'locale_name', 'description']], left_on=['date', 'city'], right_on=['date', 'locale_name'], how='left').rename(columns={'description': 'holiday_loc'}).drop(columns=['locale_name'])\n\ndf_train[[\"holiday_nat\", \"holiday_reg\", \"holiday_loc\"]] = df_train[[\"holiday_nat\", \"holiday_reg\", \"holiday_loc\"]].fillna(\"No\")","e1ff229a":"oil = pd.read_csv(path\/ 'oil.csv', parse_dates=['date'], infer_datetime_format=True)","708f5c31":"# Uncomment this to run in sample mode\noil = oil[oil['date'] >= pd.to_datetime(\"2016-06-01\")]","a7d6b593":"from scipy.stats import skewnorm\nearthquake = pd.DataFrame()\nearthquake[\"date\"] = pd.date_range(\"2016-04-17\",\"2016-05-16\")\nearthquake['earthquake_effect'] =  [2*skewnorm.pdf(i\/20, 0.5) for i in range(len(earthquake))]\n\n\ndf_train = pd.merge(df_train, earthquake, on='date', how='left')\ndf_train['earthquake_effect'].fillna(0, inplace=True)\ndf_train.shape","9114ac4f":"df_train","dcc6f527":"from sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.impute import KNNImputer\n\ndef get_lagged_values(df, col, lag=15):\n    cols = ['date', 'store_nbr', 'family'] + [col]\n    df_to_lag = df[cols].copy()\n    df_to_lag['date'] = df_to_lag['date'] + pd.Timedelta(days=lag)\n    df = pd.merge(df, df_to_lag, on=['date', 'store_nbr', 'family'], suffixes= ('', f'_lag_{lag}'))\n    return df \n\n\ndef feature_engineering(features, df, cat_features,  train_test='train', encoder=None, imputer=None, ):\n    \n    features = pd.merge(df, features, on='date', how='left')\n\n    features['dayofweek'] = features['date'].dt.dayofweek\n    features['dayofmonth'] = features['date'].dt.day\n    features['dayofyear'] = features['date'].dt.dayofyear\n    if train_test == 'train':\n        encoder = OrdinalEncoder()\n        encoder.fit(features[cat_features])\n        features = get_lagged_values(features, 'sales', 15)\n        \n    features[cat_features] = encoder.transform(features[cat_features])\n    if train_test == 'train':\n        print(\"Fitting KNN Imputer\")\n        imputer = KNNImputer(n_neighbors=3)\n        imputer.fit(features.sample(10000).drop(columns=['date', 'id', 'sales']))\n    print('Fitting done')\n    features[[col for col in features.columns if col not in ['date', \n                                                             'id', \n                                                             'sales']]] = imputer.transform(features[[col for col in features.columns if col not in ['date', \n                                                                                                                                                     'id', \n                                                                                                                                                     'sales']]] )\n    return features, encoder, imputer\n\n","460d62a4":"cat_features = [\"store_nbr\",\"family\", \"holiday_nat\", \"holiday_reg\", \"holiday_loc\", \"city\", \"state\", \"store_type\"]\n\nfeature_train, encoder, imputer  = feature_engineering(oil, df_train, cat_features)","b26fde8f":"def get_distance_from_paydays(date):\n    end_of_month = date.daysinmonth\n    distance_to_1st = 0 if date.day >=15 else 15 - date.day\n    distance_to15th = 0 if date.day < 15 else end_of_month - date.day\n    return distance_to_1st + distance_to15th\n\nfeature_train['days_from_payday'] =feature_train['date'].apply(get_distance_from_paydays)","2dfa529a":"feature_train.loc[feature_train['date'] > pd.to_datetime(\"2017-06-01\"), [\"date\", \"days_from_payday\"]].set_index('date').plot()","4b3ffb0c":"target = feature_train['sales']","502b7f7b":"from sklearn.model_selection import TimeSeriesSplit\ntscv = TimeSeriesSplit(8)\n\nfrom optuna.integration import lightgbm as lgb\nX = np.array( feature_train.drop(columns=['date', 'id', 'sales']))    \ny = np.array( target ).flatten()\ndtrain = lgb.Dataset(X, label=y)\ntuner = lgb.LightGBMTunerCV({\"metric\":'rmse', \"verbose\":0, \"early_stopping_rounds\": 50}, dtrain, folds=tscv, time_budget=300, verbosity=0, return_cvbooster=True)\ntuner.run()","ae9a52ee":"lag_for_test = df_train.loc[df_train['date'] >= pd.to_datetime(\"2017-08-16\") - pd.Timedelta(days=16), ['date', 'sales', 'store_nbr', 'family']]\nlag_for_test['date'] = lag_for_test['date']  +  pd.Timedelta(days=16)\ndf_test = pd.merge(df_test, stores, on='store_nbr', how='left')\n\ndf_test = pd.merge(df_test, lag_for_test, on = ['date', 'store_nbr', 'family']).rename(columns={\"sales\": \"sales_lag_15\"})\ndf_test = pd.merge(df_test, holidays_nat[['date','description']], on='date', how='left').rename(columns={'description': 'holiday_nat'})\ndf_test = pd.merge(df_test, holidays_reg[['date', 'locale_name', 'description']], left_on=['date', 'state'], right_on=['date', 'locale_name'], how='left').rename(columns={'description': 'holiday_reg'}).drop(columns=['locale_name'])\ndf_test = pd.merge(df_test, holidays_loc[['date', 'locale_name', 'description']], left_on=['date', 'city'], right_on=['date', 'locale_name'], how='left').rename(columns={'description': 'holiday_loc'}).drop(columns=['locale_name'])\n\ndf_test[[\"holiday_nat\", \"holiday_reg\", \"holiday_loc\"]] = df_test[[\"holiday_nat\", \"holiday_reg\", \"holiday_loc\"]].fillna(\"No\")\ndf_test['earthquake_effect'] = 0\nfeatures_pred, _, _  = feature_engineering(oil, df_test, cat_features, train_test='test', encoder=encoder, imputer=imputer)","eaf7f122":"df_train.columns","c8b47cf0":"df_test.columns","ccf64b4f":"features_pred['days_from_payday'] = features_pred['date'].apply(get_distance_from_paydays)","369fdc92":"best_params = tuner.best_params\nbest_params.pop('early_stopping_rounds')","0043cc04":"from lightgbm import LGBMRegressor\nlgbr =LGBMRegressor(**best_params)\nlgbr.fit(X, y)\npredictions_lgbm = lgbr.predict(features_pred.drop(columns=['date', 'id']))","9e6cb1a0":"df_test['prediction_lgbm'] = predictions_lgbm","b1ec9daf":"df_test","a4ba396b":"df_test['date']","eb8b75b7":"plot_train_prediction(df_train, df_test, pred_time_col='date', pred_col='prediction_lgbm')","0141f500":"from kats.consts import TimeSeriesData\nfrom itertools import product\nfrom tqdm import tqdm\nfrom kats.models.prophet import ProphetModel, ProphetParams\n\n# create a model param instance\n","8a714881":"\npredictions_list = []\ncounter_max = 100000 # Set to lower value for testing \ncounter = 0 \nfor cat in product(df_train['store_nbr'].unique(), df_train['family'].unique()):\n    counter += 1 \n    \n    if counter < counter_max:\n        subdf = df_train.loc[(df_train['store_nbr']==cat[0])&(df_train['family']==cat[1])]\n        prophet_holidays = pd.DataFrame()\n        prophet_holidays['ds'] = subdf['date']\n        holiday_mask = (subdf['holiday_nat']!='No')| (subdf['holiday_reg']!='No')|(subdf['holiday_loc']!='No')\n        prophet_holidays = prophet_holidays[holiday_mask] \n        prophet_holidays['holiday'] = 'holiday'\n        train_ts = TimeSeriesData(df=subdf[['sales', 'date']], time_col_name='date')\n        # create a prophet model instance\n        params = ProphetParams(seasonality_mode='multiplicative', holidays=prophet_holidays, floor=0)\n\n        m = ProphetModel(train_ts, params)\n        m.fit()\n        \n        prediction_df =  m.predict(steps=prediction_steps)\n        prediction_df = pd.merge(prediction_df,  df_test.loc[(df_test['store_nbr']==cat[0])&(df_test['family']==cat[1]),[\"id\", \"date\"]], left_on=\"time\", right_on=\"date\").drop(columns=[\"time\"])\n        prediction_df[\"store\"] = cat[0]\n        prediction_df['family'] = cat[1]\n        predictions_list.append(prediction_df)\n        print(f\"pred done for store {cat[0]} and family {cat[1]}, COUNTER = {counter}\")","24b9fffc":"df_train","1321b649":"df_train.pivot(index='date', columns=['store_nbr', 'family'])","e8ba7bee":"predictions_prophet = pd.concat(predictions_list)\npredictions_prophet","23fe8ceb":"df_test = pd.merge(df_test, predictions_prophet[['fcst', 'id']].rename(columns={'fcst': \"prediction_prophet\"}), on=\"id\")\ndf_test = pd.merge(df_test, predictions_var[['id', 'prediction_var']])","fae94441":"plot_train_prediction(df_train, df_test, pred_time_col='date', pred_col='prediction_prophet')","94ec644d":"df_test.to_csv('predictions.csv',index=False)","4f51b520":"# Blend models \ndf_test['sales'] = df_test['prediction_prophet'] * 0.8 + predictions_var['prediction_var'] * 0.2","01db682c":"submission = df_test[['id', \"sales\"]]\nsubmission.loc[submission['sales']<0, \"sales\"] = 0.0\n#submission['sales'] = submission['sales'].round() # we expect a integer number of sales \nsubmission.reset_index(drop=True).to_csv(\"submission.csv\", index=False)","9eddd434":"## First TS Model : [Kats VAR](https:\/\/facebookresearch.github.io\/Kats\/api\/kats.models.var.html#kats.models.var.VARParams) \n\n\"VAR model is a multivariate extension of the univariate autoregressive (AR) model. It captures the linear interdependencies between multiple variables using a system of equations. Each variable depends not only on its own lagged values but also on the lagged values of other variables.\"","e2f6891d":"### Earthquake effect ","cce0002c":"## Feature Enginerring \n\n* day of week \n* day of month \n* day of year \n* holidays \n* encoding of categories (holidays, store_nb, family)\n* lag of sales (15 days to have real lags for prediction)\n* imputing missing values with KNNImputer","3fbcb4fc":"We need to predict for **each Store and each Family for 15 days ahead**\n","1d19f6c0":"### Holidays","205e662d":"## Initialization","f3a54016":"### Plot predictions on 1 store ","bcaf7f7c":"### Stores\n","7e922a8f":"For some reasons this model is very bad => dont use it for submission","a9ebbb52":"## [Prophet with KATs ](https:\/\/facebookresearch.github.io\/Kats\/api\/kats.models.prophet.html\/)(cannot use external regressor yet) \n","5d2a9557":"## Machine Learning Model\n\n* [LightGBM tuned with Optuna](https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/generated\/optuna.integration.lightgbm.LightGBMTunerCV.html) \n* Using TimeSeriesSplit \n* Retrain on full data with best params ","1eae9996":"### Oil","bb9a9ecd":"# Look what the KATS dragged in ! \n\nI wonder how this album would sell in Ecuadorian stores, it sure has the perfect cover :\n\n![Perfect album cover](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBYWFRgWFRUZGRgZGhgYGhwcGhweGhohIRwaHBwYHB4cIS4lHB4rHxoYJzgmKy8xNTU1HSQ7QDs0Py40NTEBDAwMEA8QHxISHjQrJCs0MTQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0ND80PzQ0NDQ0NDE0P\/\/AABEIANcA6gMBIgACEQEDEQH\/xAAbAAACAgMBAAAAAAAAAAAAAAAFBgMEAAIHAf\/EAE0QAAIBAgMDBgcLCQcEAwAAAAECEQADBBIhBTFBBiJRYXGREzKBobHB0QcjJEJSYnKSstLwFBYzNFOTosLhVGNzgoPi8RUXQ6NkdOP\/xAAZAQADAQEBAAAAAAAAAAAAAAACAwQBAAX\/xAAkEQADAAICAgMBAQADAAAAAAAAAQIDESExEkEEMlEiExRCYf\/aAAwDAQACEQMRAD8ARSwqW0hbxEZjwCqW9AqrcGh1roPJHXB2ex\/tvSdjm9CguBvHdYu\/u39lSLs+\/wDsLn7tvWK6KFrYLWbB8jnQ2ZiP2D+VTUq7HxJ\/8L+Yek10ILWwWuO8jn42Jif2J+sn3q3XYWJ\/ZH66fep+Ar0CuO8hEXYGJ\/Zfxp96pF2BifkD94ntp4C1tFcZ5MSU5PYj5CfvBW45O4j5KfX\/AKU6AV4xABJ0A1PV112jvNiZc2O6eO9pZ3S5E9nNrwbO\/v7P1z92iWHsflN13eQiiBwPUPST21V2jhbYZUs5nbWdcw6gIGppihexFZ67S4N7fJ64QDnSOEEkeipfzbf9ovc1HNlYVktKjbxJPVJJjz1big0Nm21yLP5sv+1X6p9tbDk03G6PqH71MT2wd4B7QDUF2yyc62SY3oTKnqWdVPZp1VqRrtoEpya6bn8H+6t\/zdH7Q\/V\/rRrDXg6hl3HzdI7alIrdaO82wEOT44ue4VIuw0AjM3cKMxXkVx3kwO2wUOud\/wCH2Vh2Bb+U\/ev3aMV4SOmuO8mB\/wA3rPz\/AKw9QqNOS2HHxX7M59VG8w6RWAg7jNDUy+0arpdMDfmzhvkN9dvbrSjtrDKl90QGFIAncJUHjv310ikDlCwGJfdJK8CY5q91T55SlaRT8eqdNNggJO7y8AB5d9ec3qrcsSdPPrPkFZlPX3r7alLAXcTSug8jl+B2ux\/tvSRctaU98kB8Et\/5\/tvXonmMK3mKqxHBSe4UqNyrcEghBBIkkxIMETO+mzEeI30W9FcqdQ15i3ihjzZEtB1gcNw17ayjpSbHS1t245AUKTpoBu0nieurN3abgAhwZMaJ0bwNd\/bFDtl3bZXTKCdDJGvbV+9cC7nGvCRrU7y1sd\/nP4Q3tt3VaJBHTlHd\/wAVA3KO71ab5UdfV1VTvvJIgg7xrI8\/tqLEsSBIg8SDEwT1a\/joolbZrxyvQStbfvtxWPoitrm37g3GTrwEdU6aUBS4NJc9ETxq5bYKYaSToOvXcI40XlQLiSwm38UToUjsg\/jdUz7VuujK7g5jEBSNBvnt07j1VFbTnhADOucrqdJJ3dh7dwnSq+KsGNRlWTM7+peuqIaS3RHk3T8ZXfslTGEpAf3sEzGik\/G3eNGno7C+DtMhRBcyF1LkqikBQGOrEz8U9VCcVgs9tMgzJkQTEiQOepjc2bMfLNECrZA0HnqEU8FQRvO6WP8AN001Vsn8NPS7Ll3anjslxyVCDKVUBQ0jPvOY807wNTQx9pXOfFx1yMVLl+bI8bKOMab+kaVUS4BjLyL4pw694Nkg9ub7Rqa5hxetFUOoLq4GpVvCO2YgawwI19lHjlfh2VVL0+zdNquyZ5dsxZUAuFCxBCiRlgSxjf3VJfv3Qki42ZQQGzGCwGY794k6TwiarYa4iW8wYZLYyZp0nezderHytp4tQbE2itxbyl1BFxHUMyrzSroQCxgxCTROVyB\/TM5T7VuWX97cpmLsQIieb0jril65ymxM6X3\/AIfZWnKPH+FuZlMqsweBJMsw7fUKDqpJgUuq1wUY5egseUWK\/tD\/AMPsrU7fxJ\/879\/sFVzgWAneeNVSOml7Q5y0Ek2viW0\/Kbnkcj11Ff2niOOIvfvH9TVWsuARO6tb9zM0xHRXejCQ7Rvcb90\/6j\/erq3Ia4WwiFiSZaSSSTziNSa4\/Fdb9z4\/A07X+21czhkNIPKMfCbk\/N3\/AEF6NTT+aQuVVuMS56QnQPijifVU3yPqVfG+wIzc3jE9grXT5teluPR1a95rPCdXnNQl2zW7up15J\/qtv\/U+29JVwaGm7k9jEt4S0XYjMzqsKzEnPcaAEBO5WPkr0zy6Dl4c1vot6K5c2FdrrzuJgSYAkmN\/DWK6bbxSOjFM0AMOcjoZjocAnfSTfVZO+ZB04+Nx8tLyV4oZhnybKSbPZUgEgklhGsQN3l1762w+LLc2WkbiY17NPNRe2haG7OzjPqFUUwoDEgVP5fpUp\/CVHO47vRW930cakS3W1yzpNZvQfiDgilpnXs\/HVXjuUKnMJQowkSNDI0O\/WKrXnlyE0gan0zUF64DcCLqDE+seY06U+yamuja6XzlkJBOukjyeavPy52EgAncZkn01Pi1KoBxQz1wTp59KhGEducAVnXNuB76NNPsBy54Rph9pFDJBUggysggjcd+pFNQxVt1RzmQugaVAKmSZ5hjLqDuMdVK+Jwhjnxm6t1F8OCLNoHeFde529opuPlmxCqlsjvY22mIVEBd7jW1ZiMqgSAOMnQ7tO2ljHYks7ldBmY+c0VQTj7X00Pdr6qBDEqQDGp1qmK1tb0S5olXxyRs\/f161qbnRpW1y7NRUFVzwwUiQZm3AmmHZezlZJUyTv9kcKpbOwdyNMqArnLNwUbj09PfTFyZg59PjAGN0xPoM0i642U4YW+SmcC66QGHn7jvoDjrBUnQjUkSO8V0O6UBgkA0D25hVKEzEaz66CaextwmhLNYteMa1mqCM9aute58QcGsTGZ9+\/wAdq5GTXWvc6IOEECBnfjPxmrGcNMUicrGjEnhKoeHRETT5SNytHwj\/ACJ\/NxqX5H1KfjfYAsOP47zXvhes\/wAVbNMzp0dffqfNWsfOPe3tqMvNXGlMWys3gMIEIDm9cyMwLKhy4gsSoIzygYASNSDwgr7jSmDZozYXD2oU+EuumZhOTL4W5mUAjn8yAZ0LT1H0keVXQcwOIdvDJcKs1tsmZQVDAojglSTlIDwRJ3cJpUuCDIGms9IPZ0dVMuyVyC\/ahfe7hGZQRmzIjy8kkuM0EzrAoQ1uRmA1iD1gaeWk\/I40O+O9NkbvpA6PwO+ssW9TNRvAJXpgjy61YtkDWpdlyJ0SodqNltsRvisfHIDGYVNatLeQwaNJmMS7GEZ1b3xEjK\/OmHJJhQV1nQkAdFHNkbJLOHYRCBRp0ayes1OmDFtxmUEjQEjhRnC4gHTdTne1pE6xae2DNpYKDmHRFKWJuMjlnzNwmTNdA2gvNpRxlqZroemFc7WwUm0STvMdZmmW4\/vNoj54+yaTcVbyt1GmHZVzNhuPMuka8AUB\/lqzDKdokq3KK9s\/DUPQrt9W07eqllNw7BTKmmIdvk4e83\/rceulujtapoV5eXJk028l9hoyC7cGYseYp8UaxmI4nTSlbDYdndUQSzEAe3sFdLsYRktKiDVMsE8Yj061NlrSH4Y29ssvsdGE3NezTfvE9BrezYS2mS0iqvUOPSek9dR2MS7yjjKQJ7R0ir9i3pSG2+Cvx1yKG3gE5zrmHSN6+ygWIxrskJmKb5fq4A8QKfdqYckMVUEkGJEw0c1wOkaUj4ZXQXEuAR40a6TIJ52o8tOhLQi9t6BOMtBYAMk6k1Vra42u+eArUinIlfZ7Gm7orq3uZ\/qn+o\/pmuVATXVPcy\/VW6rj+o+uuZgZx21LiXFtrYR2YjKove+ZZg3GTwZCoOlmA3CZMUvcr1P5QCDHMXp+U\/430cubOui47IAFdwxIxDqW0Akqts8BESaD8sk9+T\/DHD5zdHtFT\/I+pR8bixcXjrHGenyxqa1ydR7v6VKokaajiT7f6mtMrfIHm9lQl564EUwbOGbAosBi1xlVSmfM2dyBqQFiC2adAppeY6U5ckj8GTtf7bV6SPMom2IhW2yMoV1Zg6qmQBioJIMnOpmQ+8g6wQQAFm+SW1gLOh3\/APBpyfcew0kG4DmjUgkHyR0UnPykMw9skukNpxEEHyCh+OuM0qpy9J6On1VC+NOeSIMx3no9XV3+Yh1cRmgsCAenX1bqUo0+SlXtaBlq0xdWyubM6uPjQ0Nqdw3gdcU7bHRgmbUSSVG8qu4AnidJ8tBNj7FiAbjFQZCycoPExumnKxZCrAplUmtICZqXuiK9YF1esUCxCG24QSTvkcKL37rpOSJPTu66itWwTnOpJ50+rz0tMakzW5flYNAMZxqziXa4+RGgDViPigb\/ACxVSwc4IjQRRJaCqdIBbQtzRjZKquHcAy2ZHboE51A7dCfKKobSt5TFb4Nytm+fmWm+rcRfQ5qzBWqTPPzz\/LMb9Jf\/APq3NSdNSq6\/WoBdtokc\/O2shAwUdAzMAWPYI66L4JWuflOXU\/k8b\/720Se5Wodhtku5gf04nf5DTc1LyYnFFOVoIcncOxllbKWkTHxQJIEagE74+TTbsTaJJFt9\/CaGpsV0RSjSyjXhPE+ui1m3nVSTDAggwJBGv9Kiukz1sKmY00FXtKYJ9NWEIqm12sN2k70Y5J7rUn8qgMhOum7ro9icYAN9KW3sUHUgGm40\/LYvJpSLIGlYa9y1vA8349VVnnmi11P3Mf1Z\/wDEb7KVy8LXTvcwPwe5\/in7FusZw6Um8sF99UxPMiTuHObf3040ncs7Y8IjHXmEAcN++ps6\/go+P9xfNzcWEjgBx9Q89ZN38Kfu1KggST5T7f6mpM3Ue7+lQbX4XtA9zpTnyS\/Vk7X+21JrtTlyR\/Vk+k\/22r0zzKDLbj2H0VzdLsXXUmJY5TO4yYB7RIrpDbj2GuW49CXYjfmPpmR3msqdo3G9M9xkscuUjWTHHr7Imgty86ErvBMx0cZ6jPGi64nOMrtDjc3SOg1FicIrzmPO4lfZ66yXrhh0t8o12bykZCA4kdI3+XrpvwG3ldQVYGkddkpI58dda3bK2yBbLZu3f3aGsqJroOclL7co6JexgYVQxF1jzVOVdczcR2DjSzZ2k6Dn69m8dvSeyrlraysJEns4Up42nsonLIVRQR4HDqRn8d2GvXPk4eqrxwqWUyjU8SemqGC21bUaEA0K2xt3Mcqak1qmmzqtd7KW0rme7lHZRE4f3m8B+xf+Eq\/8tU9lYX4zCSeNHrdoFHUDxrd0fwNTFWqSQip3DYscnh73iSTErZWeiXY\/y1vaxYRlJPEGNPLurfYJixd0WXuWkGYSBKXWnqiN9Xb2ybVq3NwF2IDAht8yIHTu7+w0++xeGmo0hm2VjUdQQanu2BvFI1nFvbYMPjDNlGgA4ebWjmH5QgwG0qWofoqmgudKiuvAqk+0kOuYUF2ptyNE1NZMNs2rUrbPNt4o\/KEdE6ml97hO6e+o7t5mJLGSa1UVXM6RBeTyZ7W6oSJHDfWoFbhKIUeKK6V7l\/6C7\/in7FuucBa6N7l\/6K8P7z+S3WM5DsaU+VyjPaJ+S26OkU2kUq8r5zW4E6P6V\/G+ps\/0ZRg+6F9h1+nN5ePorzJ1nze2tgJMHndQ1A7eHfU3g2+R568\/R6DYJcU48kT8GT6T\/bakwtTlyP8A1ZfpP9o16h5r6DhFc828iYa4ouu0uC4ypmUDNqDJB39VdEpc5T8n7eJZXdnBRSoylQNTOsqaJAym3wJD4vCsf0hHajemDWt67aYQl9ADvzZwT28w6VYxHJq0p8Z\/rL92oP8AoNrpf6w+7W+KKf8Aj5HyVlw6zpfsQf70j7SCprVk\/FeyT1XkLd8iKxtiWvn\/AFh7KgbY9v53f\/SmziddCcirH2W7uCuvoVWNDzblsnvDVK+zb+UKlpwo3Aa+XmzNDW2VbHA99RX9lrHNUnsk0T+K0t7J\/wDkLegkmy7k5WsvB\/u2HpUVQbCsjkFHAEwSrD0iq+HwuJH6NMQPorc9QohhsLtH4oxI7XdfMzCk+OvY1W\/wKYDGJEMQIo3gbgLrHHTvBHroHZwO1jue4PpXFPpJohZ2VtQQTeQRrzsrbv8ATPppbxLe9jf9346aB\/JvELbw7l4ym6EZSYZ4tkhFPCSRJ4DNWXrwum2ogzmVQohAIAOQcAAB2AKN8zT2VfuLYLriEtI1xhDJJL5VYkEW2jmx0bqnGKxT81doW26hddfJGQU6p37FY8viugmdlM+oRj2KaoYjYWIMkW3UTAlQJ6yWioLuyMY4E3Q4O74SCD2Zm1qp+bWJn9EGO\/R7ZP25oZxpdsKs1NdE52Bf4lF7blsfz1qOTdw77uHHbcJ+yrVaw+CxKDXDXT9EBvszW7XLw34XEDttv92qpxYtc0S1kyN9Fe3yZ+VibY+ilxvSq1ZtcmbfHEsfo2R\/M9a\/l7iJsXB2qR6RWy7eUb0IPWwHqrqjGumMx7r7FpOTOH4vePkRfU1W7XJ\/DfJuHtuAfZUUPXlCvBP4\/wDbUi8ooP6L+P8A20vUlanEMuD5JYQjW0T2u59LUf2Zsu1YBFpAgYyY4ndPbAFKGG5XlQPeJ\/1P9lPOGuZ0V4jMqtHRIBil1onpLfBIaWOV2ht7\/j6AST4nkHlpnNLvKxT73AHx95PzOA31Nn+jGYfuhbXrEdW8+UbhW+fqbzVsdB7TlHtrPCt0D6jV5qZ6IAd4FOnIs\/BVJ+U\/2zSQ+7fTvyJ\/VE+lc+21eseZQfpM2jyzQMyeDeQSDBEecinKuSY\/DZrrkb8xkVRgiabVCbqp5kINtlXOlt9\/ygPUaMYXCBlkqewGe8mKoYDBKg1Az9G\/LI006aM2RA58kcNQKLL4TxI+MuZrls1GBtgwV859tWk2dagQi69IFVruJQaDTz1PgcUCpPkHkE+ypXb9MY5ddly3hba6BBI6t3VpxqyiAa5RFUVvgKANSZ80yatJcJGu6P8Aigdtnf5pejZmVjuga+iTPVWqEEaTrx39nrrZAApI6IH47qporA6EGZJ7Rw\/HTS2MlLQRUHtivMa+W07dCMe4E1Yw+ongw\/pVLlA2XC3j\/dv9k0yVyhVvhnLcHazYMqRouJtnhMNauL6UAopYwy2wqonPeIzc5hPx9RA36aa1T5N3B4HEZtQvgXjphmGvRvimDZrGPCOwAJYmDq0QI0G4SRofRTMtaekLwztbZZtoEljuRQB09Z7SZ16IoF+VM9whc08e8aDo1q9exRdQo1k6wNWPAdk6VawuGS3GoLtvjU9J10gfiBSE9dlL\/ESJzdIiOaBuHCT5Bp5KmXaIJyqTG7Qx5++oLtpn0OhPROg6O06d1WbeCRVGb\/mlthaJGxbKJDN2An21VbG3viuxPRn82tWBZHBRVS5hrhJ0G\/h0df8AStmmY5X4aXMVd1LMvYVRvSprFuqPHW2xPDwSTHSYSrIt5QMwDEbtK2OFRt6uDEzEz3eijVsW5RC1pDut2QNPiR9lgfNTNyexbvKMykIAAFUgARoOcSTpS42GA0D\/AGwe4ijXJZILgxuB09Y4caZNNvWxdSktjHQHlRuTol\/QKPGgHKvxbf0m9Aocy3DMw\/dC0Vndp17z3mt4PT5z7K1Lfjf5hXuU9f8ADXno9EXW3U78ix8FT6T\/AGzSOuop55Gfqyj5z\/aNeq0eY3wHhXPLaK148SGk9u8DqroKXAZAIMaGCDB3wY3GKRrSBGd+MkDo6zXeTnlHSk3yXVypqd5J13yeMVXvYomfwfx5qrG9mI6Tu\/oB66o4nGgkqh0HHp66xt0OSSNsRiiDIqfZuPOZATOYsszuPQfJUeB2fmBd9w3Dp7eqg9vmMrFjJuag65SGET1wZ8lCkmFtrTHvDWjoeOWKKOABA7O3oFUsG+gkVP4TUE79T+PJQIJ8m1ydEHDefTWwthFr3A2yQWbj6K2xS5oSeOvZB9prnPszfovYCMvVrQzlgcuCv\/QYd4I9dE8GkA9v9KD8vXjA3OvIO90HoJp0LlInt62c05OHTEKdR4AvHWly2w801dXEsUOYwnNAEZRzeA6t0eWpNi4ODcAEl7N5BI0Mpm9KihLO7GCdIEaaDqAG4U3Nj8XpgYL8lwX8NtElSLehnUxJiDoI3Ds66K4fH5VzNodInfPZvFU8HgHYCHMdulGcJswiJAbt081R05LJmjXZ90tuLtvJOUAd86eWKMWrXEmT1k\/8VF4Mx0DgNwqtiXKyTuiZ9QpT5fAzTXYRAM6mq2P2kltYOp4KN5PChiY0srS4RVHOfj0hVHEx1Vtyd2eb1zwrK3g0PveeMzni59XDWjmPbF1XpFu1cueMwAnqEj5utWPyqdCWkdcdfDfRy\/hhB0pe2ja6BJG46g949dZ70wlPG0bXNo8IbKQd2p7+minJW5mdzlgQOmTqd5O80oWNsOJV1AI8nm3Uy8jrpa7czEk5V7I5xEd9NmdUIt\/yHcRfvNcdLTW1CKjHOjsXLZjlBV1yCF3w2\/dpqK5Q4sPYsXQDlcK4HUyBgDHbW22fA\/lMXrdttbQzPbDHIRezc7KdAwTsnrqvtNicHhGZcpK2yyqpEE2hKhQOaAeHCKPIk50xWJtUmA7sqQCYkTA9g7DXmT5vmFSBJO6APlHXyhTJ7xW+Xrb6i1J4r0XKmLVptKZMAyDALnN0Dwp1t5elvHz8zwcTObTdxilbDtvmnHYd9UwYZr\/gPfHh5QSdSE54IMxPTpV\/4QMMcnhFs\/oMmY5PAxlywPHy83PMzGlIO1cZz2TMFytrPsAJPmp85MXVewri6tx3VHuEeD5rlELIciiCD8qTXMMfbJxF4DQnwjLv+KrMYjpylfLWqU3yYqaI7+0oBVCxY73O\/rgdmnZWuALOwAn2UMA4008msGTz2BESBr427WOEbuvWsrUoPHuq0MeHXmgdVWsPybtswuXBuMxO\/t6RRHZrWyissEkA1DjsUWOUHSp+uStvfCKG1dohWOXRRpXmyNrLdbI3jcDwI3TWm08KRbkCYIMajMOKkjUTu0oXgEt277BGJR1zKTqVEdPlI\/y0cztA09dD0rjRRx081aIAxnp\/E1Ss3pGvQDNXcMdSeFboU+AgmgFLPugv8DYdLp9pT6qYHfmntilP3QrkYZR0ug8zH+Wmx9kKpfyD9kj31I45l70YeuqeCwYcxEHf01a2bpctn5yekUR\/JfBtmjmzHppvzq5T\/wDAfiR4pouYHZ+Ubo9FXntgbq1tYuRA1HDXUVVx20FtiTBPR7a8vTbPQ3rst27AY17jtnKV3TFBsNtpgwVhz28VFHOI6eodtHtlbQ8IDKleGvHs6aLxaMdJ9CthNgBrjG7JVWlR8UyAZPTG7yU7YRAFAAAA0iq2Is5TI3Vth8REA8a3b3yD4pLgt3dxoDjV1o5cfz+btoVibcmaymHAp7awXx1Go8YdIo3yDuBnfdmCAHrEtDecjyVmIQQQare5+uW\/cXgFMfWOn46abjrfAnPOuUNOPvBbjrd8N4N7aZPB+GiVZy6g2dVcynRI03A1Bj8M5wtkOWVlCZ5MtOQghjxad56as4+Fuv4S1cuW3toqhEZwCrOzKyrqsyhzHTTUiKEcocStjAWzcnTwawpDGYPNzTBgAiZ4UeRNy0ifG9Umykjoh4Hzn0VJ\/wBRHyPRSDiuVDH9GgUbgTzj7Ae+h3\/W8R+2app+Pl12ip5oX6FQYNNezL+TAyrsjh28HkgszSYQIQc8jNzY4TwmlEnzU7cl0dsMAlwofCMcwRWMdEOI47+qrSShh2VeuMrG4sQxCEqEZlgEMyZmynfoY3DmiYrlxcnGsGaAXe0J3DOHUeTM5OtdK2RhnRrxdi5d1YOQqlgLdtdQmggqR5K5XjrgTFMzRlW\/mbSdAwJEcRE6UU9gM2w98XEWyVCAKoACklmDyzSTzTlLSYgxEbqYtn3wl0W3AVCoyndw9sd9UNn7NMXSACQ9wKR8kNw6jBPlq9dtpiEBVslxNw9Rpdvyei3BGp37Lb4J0bMjcZjgaI4Qln1ERQ7ZONYrkuaOmh6xwYdVETiAutK1yMCd22GEUFvbBl8yNHVOndWXNoHpqSztOjTAcvRu1tgUQTlQanixHT1e2iWHugELQ5MXm1OgHnqxhEMlz1Afjurt7YNLSCrNIHbNKXujN7zaHz\/Qlz201YfefxFKPujuMtpR0uf4QPXTI+2xL\/DXDpGU9BU90Uw3HRi6N0kdn49VALI5o7B6KIbSTnFl36Zhx3bx+OJ6K35T8kmUOFLRAl7IxU7uDSO7dUGLxORXuxLahJ7podtLFFTDJPEMOHUQdxqtsvGI7i3eLBZ5uuh+afx1VOp9mOv+oT2Fs0OwcO7XGEv8gEg6zxMMQI0FOK4bKBHAVrs8IFhYA6qvZga6nsyZcs8s3hl53ChQQu5YEwNAPi75J7d1XMThwYMmAZ36eXpqli8eqLkI4SY49A8sGgf4Olb6PcZtBUjM2pMCAT6KktXQwoPcU5GdxDHRFjcOqr2zLLBAW3xxoKQxypRFjzAqLkYkYhz8pSfPXu2XAU1Y5JpDg8SppmPhk+XmWFOUuDe4CiurZrbKto3DbJbU5xGlyARzW00oF7pIB2fbKp4MC5bheaMnNuDLCEqI3aGKK8pQQ4IySyWwJZ1uLkuZ2ZPB2nIBBALaRpvoXy8AOzEyhAuayVCNnSDmjKxALCDMkazVJEjkWU17kqQCtstd5BKQwxp75HN8GH0m9NIjbqd+Rh+DD6b+muOoaEauPbatOty45HMd3CneMykE9hiPIa66hrm+0cPnw94glmS8z5Z3ac4xxBU8N2QmjlbAZc5L7RVlysYM61f2ls5M+dDBO+ONIS3yMrLzWAgwAARwaAN\/AnjROxtxxzWE9mv\/ADSql74KYyrpjOp3SZI0njXrMTQS1tdDxg1dt49CN4oGmPVJlpkNS2cKCdTFVGx6gbxVK\/tSWypJJ6K5Js2qSQ02VtJ4zz+OGtWkxyHQA8QJjy0pbODTNzNw5sGddR5Ovso7bkxpHVGvdRvgS+Q6l\/hxjd0dFJfL95NkHoc\/Yppw6lZJ3mlLl4CbtsdFsnvb\/bRT2A+Ajh15q9i+gVaxROZSCQciCfINOsbzRTZ+y+YhPFE+yKr7UC22ltwWIiSd+nUNfOK3NzI+sk1pIBbUvAwrKplRJiNYn2DvpbW8raZI8unZ1UYx7lgzERDf8+eaDZcp6eNKlaQp\/oX2ft5kgPJHT8YdR6fxvpmwu1A4lWkUibQwwyZxuI7taqYLEujSHyyIk7vL1TXOFXKC\/wBtPVI6smPkQaGYqyWfON8RBEiRuNL2z9tnxbkK3TwPsoja28g8Y+v0UlxSY6ckrlBvB4FnbPcaYiBEDuohiLgURQK1yjtxo3mNQ38a10whgcTx8lZ4v2dVeT3sr4y\/4W4EXUAyx9VMuw1i4Ow0LwmFVBC0V2R+kXy+itlp0kgbX8vYWxNi74XwltkHvYQhwx3OWkZT10r8u7BTZuRiCQ6SRoNWY6Tw1p1JpU90ZZwL9T2z\/GB66pIV2cfVa3ivQtexQjdBjaNnI7rGk6dh1Hmpu5Hfq4+m\/poLyosao4G\/mn0j191GeSB+DD6T+mjXIuhlQ1zrDWbue8ArKr89G0gOhlD5ZZf82tdBU1Nbail6Aa2jmeJ2Nce0uSyyurEspK87MqhsvzZWdTpr21BheT2IbKj22RQWIYBSRIG85pIGUacNY1NdcR6kzUW9mdHHU5PYpjzrJB+VmUg8YPO84qZOTWJBHvJPYyx5yD5q68DQhtrXVNwNhwBaTOxF0HTK7AAZNSckdU0LCVNdCNh+TlzXPacdpQ+QZW9NF8NyfULBR5mQYGYdIkDcdNJNHMRypsgE22S6RauXWCuObkyc1iAYnOfq1d2RtUX88GycmUe9XjdGubxiUXLu03zrXaC82AF2e40W2w0AkjXQADcOgCreGwjrqUaeymeayaHSO\/0YD8E8aIZ7DVe\/yXTEkPda4rAZIUqBEkzzlJnnHuplmvZokgXTZpZshVVRuUKo8gAHooHt7Ztx3lFB049O8cO2j817NczFWns5+vJjEksXCkkdJ6dOGnCosRyPvnxQu6NSR\/LXRgawGh0g\/NnO\/wA0sSUykJMji27j8XThQ9+QmKJ+J1SzfcrqoqlicQ\/hBbthAchdmfMQBmCgBViSSdTIjTfNakY6bOeJyExXHJ9ZvuVMOQ2JjQ2x2s33KcNocoFsOiXGtKQqNcBeGIZ8g8GGgtEOx03ADjVnD4i8b722NvKiW3JCtLB2urAloBHg9+szXaM8mJH5iYn5dseVvu1dwXJLEp8dPIW9a0+zXs1jlPs1XS6FlNi3gNSvnq7gNnOjhmjSjFYTS1jlPaDeamtMw0se6F+ov9K39taZiaW+XwnA3e22f40owJ7OQ1lYK9oNjjoO1sNntOOIGYdq6+ojy0O2FtuzatBLjENmY6KSNT1VlZTJ6AoJDlZhf2h+o3sqZeVeG+W31GrKyiFlm3yuwvym+qal\/O\/CjeX+p\/WsrK4LSIm5dYMb3f6h9tUb3LPAN4SWunwqBG5nxQGGmuhhjWVlaC0jTHcssBcADm8QEdBCxzXChh43zFqTD8vMGs8\/EvMeOS8RO7M2m\/h1V5WVxhIfdGwnybv1F+9Wh90nCj\/x3j\/lT1vWVlcdo8HulYb9le7k+9Xn\/czDfsr3cn36ysrjjB7peH4Wbv8AB96vP+5dj9hd709tZWVhqMHumWf2F36yV4fdMtcMPcPa6D1GsrK47SNf+51v+y3P3i\/dqtivdCsOQWwbEicrC7lYTEgMqggGBI6hWVlcdpGtn3RbKhlTBaN4w8L43NC6yhnmgCtrPukIDK4KDlVJ8NrlWcq629wzHvNZWVxzNz7qJ\/sn\/u\/\/ADrT\/ul\/8QfvT9yvayuOPV91BuGGX94fuV6fdLf+yr+9P3KysrGcaj3TH\/syfvG+5VTa\/LhsTZez+TqocAZg5MQQdxUdFZWVzNFNRUmU1lZQaQaP\/9k=)\n\nAnyway, the point of the pun in the title is that we are gonna be trying to use **one of the newest TimeSeries libraries** : [Kats from Facebook](https:\/\/facebookresearch.github.io\/Kats\/)\n\nKats has many functionnalities such as *anomaly detection*, *forecast*, or *automatic time series feature extraction* (hello [tsfresh](https:\/\/tsfresh.readthedocs.io\/en\/latest\/), there's a new kid on the block)\n\nIt may serve as a multi purpose tool box wrapping a lot of classical (ARIMA, SARIMA) as well as SOTA methods (Prophet, LSTM) for Time series modelling, especially *forecasting*\n\nIn this notebook we use **Kats** to fit\/predict one Prophet model per store\/category and then ensemble the results with a more classic [LightGBM model tuned with Optuna](https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/generated\/optuna.integration.lightgbm.LightGBMTuner.html)\n\n"}}