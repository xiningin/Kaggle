{"cell_type":{"1e03bd54":"code","b61113cd":"code","21fdc531":"code","444bad4f":"code","e5cc641b":"code","677279be":"code","fc8f261c":"code","3f0834a5":"code","6965daa2":"code","e9911780":"code","46583b90":"code","f2aaac25":"code","9f07dd60":"code","9622daa5":"code","313c3484":"code","d6e16989":"code","131e1160":"code","26a71818":"markdown","5f6f9876":"markdown","21219764":"markdown","6cea96c5":"markdown","d02f27fa":"markdown","44381f90":"markdown","7acf4c4c":"markdown","3265a27b":"markdown","e74c59da":"markdown","b0492cfd":"markdown","a0931816":"markdown","672c37a1":"markdown","c6ed7d17":"markdown","1eaafdeb":"markdown","ab8ea5f4":"markdown","5aec43e6":"markdown"},"source":{"1e03bd54":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom datetime import date\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b61113cd":"filename = '\/kaggle\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-09-14.csv'\ndf = pd.read_csv(filename)\ndf.head()","21fdc531":"df.Timestamp = pd.to_datetime(df.Timestamp, unit='s')","444bad4f":"df.index = df.Timestamp\ndf.head()","e5cc641b":"df.isnull().sum().Open \/ df.shape[0] * 100","677279be":"df_day = df.resample('D').mean()\ndf_day[df_day.isnull().any(axis=1)]","fc8f261c":"df_day = df.resample('D').mean()\n\nfor i, r in df_day.iterrows():\n    if r.isnull().sum() > 0:\n        print(i)\n        print(r)\n        print()\n\nprint()\nprint('Data at 2015-01-05')\nprint(df_day.loc['2015-01-05'])\n\nprint()\nprint('Data at 2015-01-09')\nprint(df_day.loc['2015-01-09'])","3f0834a5":"missing_replacement = df['2015-01-05': '2015-01-09'].mean(numeric_only=True)\ndf_day.loc['2015-01-06'] = missing_replacement\ndf_day.loc['2015-01-07'] = missing_replacement\ndf_day.loc['2015-01-08'] = missing_replacement\n\n# Any missing value?\ndf_day.isnull().sum()","6965daa2":"df_halving1 = df_day.loc['2011-12-31':'2012-11-28']\ndf_halving2 = df_day.loc['2012-11-28':'2016-09-09']\ndf_halving3 = df_day.loc['2016-09-09':'2020-05-11']\ndf_test = df_day.loc['2020-05-11':]","e9911780":"print(\n    df_day.shape,\n    df_halving1.index.values.shape, \n    df_halving2.index.values.shape, \n    df_halving3.index.values.shape,\n    df_test.index.values.shape,\n)\n","46583b90":"reg_halving1 = LinearRegression()\nX = df_halving1.index.values.reshape(-1, 1)\ny = df_halving1.Weighted_Price.values.reshape(-1, 1)\nreg_halving1.fit(X, y)\n\nplt.figure(figsize=(22, 10))\nplt.figure(figsize=(22, 10))\nplt.title('Bitcoin Prices Prediction Halving #1')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.plot(X, y, label='Actual Price')\nx_halving_float1 = [X[0].astype('float'), X[-1].astype('float')]\nx_halving_date1 = [X[0], X[-1]]\npredict_halving1 = reg_halving1.predict(x_halving_float1)\nplt.plot(x_halving_date1, predict_halving1, 'red', label='Predicted Price')\nplt.legend()\nplt.show()\nprint(reg_halving1.coef_, reg_halving1.intercept_)\nprint(predict_halving1[0], predict_halving1[1])","f2aaac25":"reg_halving2 = LinearRegression()\nX = df_halving2.index.values.reshape(-1, 1)\ny = df_halving2.Weighted_Price.values.reshape(-1, 1)\nreg_halving2.fit(X, y)\n\nplt.figure(figsize=(22, 10))\nplt.figure(figsize=(22, 10))\nplt.title('Bitcoin Prices Prediction Halving #2')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.plot(X, y, label='Actual Price')\nx_halving_float2 = [X[0].astype('float'), X[-1].astype('float')]\nx_halving_date2 = [X[0], X[-1]]\npredict_halving2 = reg_halving2.predict(x_halving_float2)\nplt.plot(x_halving_date2, predict_halving2, 'green', label='Predicted Price')\nplt.legend()\nplt.show()\nprint(reg_halving2.coef_, reg_halving2.intercept_)\nprint(predict_halving2[0], predict_halving2[1])","9f07dd60":"reg_halving3 = LinearRegression()\nX = df_halving3.index.values.reshape(-1, 1)\ny = df_halving3.Weighted_Price.values.reshape(-1, 1)\nreg_halving3.fit(X, y)\n\nplt.figure(figsize=(22, 10))\nplt.title('Bitcoin Prices Prediction Halving #3')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.plot(X, y, label='Actual Price')\nx_halving_float3 = [X[0].astype('float'), X[-1].astype('float')]\nx_halving_date3 = [X[0], X[-1]]\npredict_halving3 = reg_halving3.predict(x_halving_float3)\nplt.plot(x_halving_date3, predict_halving3, 'blue', label='Predicted Price')\nplt.legend()\nplt.show()\nprint([X[0].astype('float'), X[-1].astype('float')])\nprint(reg_halving3.coef_, reg_halving3.intercept_)\nprint(predict_halving3[0], predict_halving3[1])","9622daa5":"x = np.array([1, 2, 3]).reshape(-1, 1)\nX = np.hstack([x, x**2, x**3, x**4])\ny = coef = np.array([\n    reg_halving1.coef_[0][0], \n    reg_halving2.coef_[0][0], \n    reg_halving3.coef_[0][0]\n])\nreg = LinearRegression()\nreg.fit(X, y)\nx_pred = np.r_[X, [[4, 16, 64, 256]]]\ny_pred = reg.predict(x_pred)\nplt.plot(np.arange(1, 5), y_pred, 'red', label='Predicted COEF')\nplt.scatter(x, y, label='Actual COEF')\nplt.legend()\nplt.show()\ncoef_halving_4 = y_pred[-1]\nprint(coef_halving_4)","313c3484":"x = np.array([1, 2, 3]).reshape(-1, 1)\nX = np.hstack([x, x**2, x**3, x**4])\ny = np.array([predict_halving1[0], predict_halving2[0], predict_halving3[0]])\nreg = LinearRegression()\nreg.fit(X, y)\nx_pred = np.r_[X, [[4, 16, 64, 256]]]\ny_pred = reg.predict(x_pred)\nplt.plot(np.arange(1, 5), y_pred, 'red', label='Predicted Price')\nplt.scatter(x, y, label='Actual Price')\nplt.legend()\nplt.show()\npredict_start_halving4 = y_pred[-1]\nprint(predict_start_halving4)","d6e16989":"X = df_test.index.values.reshape(-1, 1)\ny = df_test.Weighted_Price.values.reshape(-1, 1)\nplt.figure(figsize=(22, 10))\nplt.title('Bitcoin Prices Prediction Halving #4')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.plot(X, y, label='Actual Price')\n\nreg_halving4 = LinearRegression()\nreg_halving4.coef_ = np.array([coef_halving_4])\nintercept_halving_4 = predict_start_halving4 - coef_halving_4 * X[0].astype('float')\nreg_halving4.intercept_ = np.array([intercept_halving_4])\n\nprint(reg_halving4.coef_)\nprint(reg_halving4.intercept_)\n\npredict_halving4 = reg_halving4.predict(X.astype(float)).reshape(-1, 1)\nplt.plot(X, predict_halving4, 'orange', label='Predicted Price Halving #4')\nplt.legend()\nplt.show()\n\nx_halving_date4 = np.array(X)\n\nmean_squared_error(y, predict_halving4, squared=False), mean_squared_error(y, predict_halving4, squared=True), r2_score(y, predict_halving4)","131e1160":"X = df_day.index.values.reshape(-1, 1)\ny = df_day.Weighted_Price.values.reshape(-1, 1)\nplt.figure(figsize=(22, 10))\nplt.title('Bitcoin Prices Prediction')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.plot(X, y, label='Actual Price')\n\nplt.plot(x_halving_date1, predict_halving1, 'red', label='Predicted Price Halving #1')\nplt.plot(x_halving_date2, predict_halving2, 'green', label='Predicted Price Halving #2')\nplt.plot(x_halving_date3, predict_halving3, 'blue', label='Predicted Price Halving #3')\nplt.plot(x_halving_date4, predict_halving4, 'orange', label='Predicted Price Halving #4')\n\nplt.plot([date(2020, 5, 10), date(2020, 5, 10)], [0, 20000], 'black')\n\nplt.legend()\nplt.show()","26a71818":"## Plot all together ##","5f6f9876":"## Set Timestamp as an index of the dataframe ##","21219764":"## The 3rd Bitcoin halving ##","6cea96c5":"## The 2nd Bitcoin halving ##","d02f27fa":"## Making LR pricing model for the 4th Bitcoin halving ##","44381f90":"## Find the 4th Bitcoin halving's starting price ##","7acf4c4c":"Shape of each dataframe","3265a27b":"## Convert timestamp to Datetime ##","e74c59da":"## The 1st Bitcoin halving ##","b0492cfd":"## Make a dataset of each Bitcoin halving ##","a0931816":"## Find the 4th Bitcoin halving's COEF ##","672c37a1":"## Replace missing value with average values between them ##","c6ed7d17":"## Find missing % ##","1eaafdeb":"# BTC price prediction with Liear Regression based on BTC Halving #\nBy Tanut Apiwong.","ab8ea5f4":"## MAE: 1063.4555647475888 ##\n## RMSE: 1130937.7381926132 ##\n## R2: -0.07537844862939291 ##","5aec43e6":"## Resample to daily period and find missing values ##"}}