{"cell_type":{"4751a2f0":"code","988ee1e8":"code","dd1bde3b":"code","b8d185af":"code","fad1b710":"code","4349886d":"code","ccbc3ff7":"code","6a771198":"code","02a1c829":"code","c74375b5":"code","89cb900d":"code","1be20aef":"code","de1b0b25":"code","3a988e2d":"code","f1ebf10b":"code","96a9b8fa":"code","12165896":"code","fdd725f9":"code","4825283e":"code","e74cb19d":"code","3bd7f18d":"code","5a1f70f5":"code","684e708b":"code","f6a546e8":"code","cf6a0872":"code","e83186e7":"code","61597a26":"code","88131f11":"code","90ddd29e":"code","aa8bea27":"code","483fd4bf":"code","2a0be640":"code","65657932":"markdown","ca373d4b":"markdown","c74a8b75":"markdown","beec4a22":"markdown"},"source":{"4751a2f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n# print(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\nimport gc\ngc.collect()","988ee1e8":"# !pip install fastai==1.0.61\n# !pip install torch==1.4.0\n# !pip install torchvision==0.5.0\n# !pip install pretrainedmodels","dd1bde3b":"import torch\nprint(torch.__version__)\nprint(torch.version.cuda)\nprint(torch.cuda.is_available())\nprint(torch.cuda.device_count())","b8d185af":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\nimport fastai\n\nfrom fastai import *\nfrom fastai.vision import *\n\n# from torchvision.models import *\n# import pretrainedmodels\n\n# from utils import *\nimport sys\n\nfrom fastai.callbacks.hooks import *\n\nfrom fastai.callbacks.tracker import EarlyStoppingCallback\nfrom fastai.callbacks.tracker import SaveModelCallback","fad1b710":"path = Path(\"\/home\/jupyter\/dataset\/10k\/\")","4349886d":"train = pd.read_csv('\/home\/jupyter\/dataset\/train.csv')\ntrain['label']=train['class']\ntrain.head()","ccbc3ff7":"# import numpy as np\n# mini_train = train[train['class']<100]\n# mini_train","6a771198":"test = pd.read_csv('\/home\/jupyter\/dataset\/test.csv')\ntest.head()","02a1c829":"# train_data = ImageDataLoaders.from_df(train, path, folder='train', valid_col='class')","c74375b5":"src_test = ImageList.from_df(df=test, path=path, folder='test')\nsrc_test","89cb900d":"src = (ImageList.from_df(df=train, path=path, folder='train')\n        .split_by_rand_pct(0.2, seed=42)\n        .label_from_df()\n        .add_test(src_test)\n      )","1be20aef":"tfms = get_transforms(max_rotate= 10.,max_zoom=1., max_lighting=0.20, do_flip=False,\n                      max_warp=0., xtra_tfms=[flip_lr(), brightness(change=(0.3, 0.60), p=0.7), contrast(scale=(0.5, 2), p=0.7),\n                                              crop_pad(size=600, padding_mode='border', row_pct=0.,col_pct=0.),\n                                              rand_zoom(scale=(1.,1.5)), rand_crop(),\n                                              perspective_warp(magnitude=(-0.1,0.1)),\n                                              symmetric_warp(magnitude=(-0.1,0.1)) ])\n\n# src = (ImageList.from_folder(path)\n#         .split_by_rand_pct(0.2, seed=42)\n#         .label_from_folder())","de1b0b25":"data = (src.transform(tfms, resize_method=ResizeMethod.CROP, padding_mode='border', size=244)\n        .databunch(bs=384, num_workers=4)\n        .normalize(imagenet_stats))\n","3a988e2d":"learn = cnn_learner(data, models.resnet50, metrics=accuracy, model_dir=\"\/home\/jupyter\/models\/\" ).mixup()\n\nif torch.cuda.device_count() > 1:\n    # Use all GPUs\n    learn.model = nn.DataParallel(learn.model)","f1ebf10b":"# learn.fit_one_cycle(2, max_lr=slice(lr), wd=(1e-6, 1e-4, 1e-2), pct_start=0.5)\nlearn.fit_one_cycle(10)\n\n# learn.save('resnet50_stage1')","96a9b8fa":"# learn.load('resnet50_stage1')","12165896":"learn.unfreeze()\nlearn.lr_find()\nlearn.recorder.plot(suggestion=True)","fdd725f9":"learn.fit_one_cycle(4)\nlearn.save('resnet50_stage2')","4825283e":"learn.lr_find()\nlearn.recorder.plot(suggestion=True)\n","e74cb19d":"learn.fit_one_cycle(4, max_lr=slice(1e-5,1e-4), pct_start=0.5)\n\nlearn.save('resnet50_stage3')","3bd7f18d":"learn.export('\/home\/jupyter\/models\/export.pkl')","5a1f70f5":"learn.load('2311\/resnet50_stage3')","684e708b":"interp = ClassificationInterpretation.from_learner(learn)\n\nlosses,idxs = interp.top_losses()\n\nlen(data.valid_ds)==len(losses)==len(idxs)","f6a546e8":"# interp.plot_top_losses(9, figsize=(15,11))","cf6a0872":"# interp.plot_confusion_matrix(figsize=(12,12), dpi=60)","e83186e7":"# interp.most_confused(min_val=2)","61597a26":"# learn.save('final_model')","88131f11":"# learn.model","90ddd29e":"# preds, y = learn.get_preds(DatasetType.Test)\n\npreds, y, losses = learn.get_preds(ds_type=DatasetType.Test, with_loss=True)\ny = torch.argmax(preds, dim=1)\ny.shape","aa8bea27":"test['class'] = y\ntest","483fd4bf":"test.to_csv('dataset\/submission.csv', index=False)","2a0be640":"!kaggle competitions submit -c products-10k -f dataset\/submission.csv -m \"resnet50\"","65657932":"# Results of the model","ca373d4b":"# Loading Libraries","c74a8b75":"# Progressive Image Resizing","beec4a22":"# Quick Preparation of Data"}}