{"cell_type":{"5a84edde":"code","e8da315f":"code","43c78245":"code","2fe7aadc":"code","55c0bcbd":"code","f27ba9fb":"code","879a4cb1":"code","80375c70":"code","96ca4440":"code","4dfc694f":"code","0df4c13d":"code","36747819":"code","62865ff8":"code","1af6d5c0":"code","c394dad8":"markdown"},"source":{"5a84edde":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n\nfrom plotly.offline import init_notebook_mode, plot, iplot\nimport plotly as py\ninit_notebook_mode(connected=True) \nimport plotly.graph_objs as go # plotly graphical object\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e8da315f":"url = \"https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/gapminderDataFiveYear.csv\"\ndata = pd.read_csv(url)","43c78245":"data","2fe7aadc":"data.country.value_counts()","55c0bcbd":"data.year.value_counts()","f27ba9fb":"data.info()","879a4cb1":"data.continent.unique()","80375c70":"data.columns","96ca4440":"data['pop'].describe()","4dfc694f":"data[\"color\"]=\"\"\ndata.color[data.continent=='Asia']='yellow'\ndata.color[data.continent=='Europe']='green'\ndata.color[data.continent=='Africa']='black'\ndata.color[data.continent=='Oceania']='blue'\ndata.color[data.continent=='Americas']='red'\n\ndata[\"pop_normal\"]=[i\/(data[\"pop\"].max()) for i in data[\"pop\"]]\n\ndata1957=data[data.year==1952]\n\nyears=[i for i in data.year.unique()]\n\nfig=go.Figure(\n    data=[\n        go.Scatter(\n            x=list(data1957.lifeExp),\n            y=list(data1957.gdpPercap),\n            hoverinfo='text',\n            text=data1957.country,\n            mode='markers',\n            marker=dict(\n                size=data1957.pop_normal*200,\n                sizemin=5,\n                color=data1957.color,\n            )\n        )\n    ],\n    layout=go.Layout(\n        title='1957 gdpPercap vs lifeExp',\n        hovermode='closest',\n        xaxis=dict(range=[data.lifeExp.min()*0.9, data.lifeExp.max()*1.1], autorange=False, zeroline=False,\n                  title='Life Expectancy'),\n        yaxis=dict(type='log',\n                  title='GDP per Capita'),\n        updatemenus=[dict(\n            type='buttons',\n            buttons=[dict(\n                label='Play',\n                method='animate',\n                args=[None]\n            )]\n        )]\n    ),\n    frames=[\n        go.Frame(data=[go.Scatter(\n            x=data[data.year==year].lifeExp,\n            y=data[data.year==year].gdpPercap,\n            hoverinfo='text',\n            text=data[data.year==year].country,\n            mode='markers',\n            marker=dict(\n                size=data[data.year==year].pop_normal*200,\n                sizemin=5,\n                color=data[data.year==year].color,\n            )\n        )])\n        for year in years\n    ]\n)\n\nfig.show()","0df4c13d":"url = \"https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/gapminderDataFiveYear.csv\"\ndataset = pd.read_csv(url)\n\nyears = [\"1952\", \"1962\", \"1967\", \"1972\", \"1977\", \"1982\", \"1987\", \"1992\", \"1997\", \"2002\",\n         \"2007\"]\n\n# make list of continents\ncontinents = []\nfor continent in dataset[\"continent\"]:\n    if continent not in continents:\n        continents.append(continent)\n# make figure\nfig_dict = {\n    \"data\": [],\n    \"layout\": {},\n    \"frames\": []\n}\n\n# fill in most of layout\nfig_dict[\"layout\"][\"xaxis\"] = {\"range\": [30, 85], \"title\": \"Life Expectancy\"}\nfig_dict[\"layout\"][\"yaxis\"] = {\"title\": \"GDP per Capita\", \"type\": \"log\"}\nfig_dict[\"layout\"][\"hovermode\"] = \"closest\"\nfig_dict[\"layout\"][\"updatemenus\"] = [\n    {\n        \"buttons\": [\n            {\n                \"args\": [None, {\"frame\": {\"duration\": 500, \"redraw\": False},  #time between consecutive frames\n                                \"fromcurrent\": True, \"transition\": {\"duration\": 4300,   #??\n                                                                    \"easing\": \"quadratic-in-out\"}}],\n                \"label\": \"Play\",\n                \"method\": \"animate\"\n            },\n            {\n                \"args\": [[None], {\"frame\": {\"duration\": 0, \"redraw\": False},\n                                  \"mode\": \"immediate\",\n                                  \"transition\": {\"duration\": 0}}],\n                \"label\": \"Pause\",\n                \"method\": \"animate\"\n            }\n        ],\n        \"direction\": \"left\",    #the buttons will appear in left-to-right order \n        \"pad\": {\"r\": 10, \"t\": 87},   #Sets the padding around the buttons or dropdown menu. right, left, top, bottom\n        \"showactive\": False,   #Highlights active dropdown item or active button if True. Default True.\n        \"type\": \"buttons\",\n        \"x\": 0.1,   #Type: number between or equal to -2 and 3,  Default: -0.05,  Sets the x position (in normalized coordinates) of the update menu.\n        \"xanchor\": \"right\",  #one of ( \"auto\" | \"left\" | \"center\" | \"right\" )  Default \"right\".\n        \"y\": 0,    #Type: number between or equal to -2 and 3,  Default: 1,   Sets the y position (in normalized coordinates) of the update menu.\n        \"yanchor\": \"top\"   #one of ( \"auto\" | \"top\" | \"middle\" | \"bottom\" )  Default \"top\".\n    }\n]\n\nsliders_dict = {\n    \"active\": 0,   #Determines which button (by index starting from 0) is considered active. Default 0.\n    \"yanchor\": \"top\",   #one of ( \"auto\" | \"top\" | \"middle\" | \"bottom\" )  Default \"top\".\n    \"xanchor\": \"left\",   #one of ( \"auto\" | \"left\" | \"center\" | \"right\" )  Default \"left\".\n    \"currentvalue\": {\n        \"font\": {\"size\": 20},\n        \"prefix\": \"Year:\",\n        \"visible\": True,\n        \"xanchor\": \"right\"   #one of ( \"left\" | \"center\" | \"right\" )  Default \"left\".\n    },\n    \"transition\": {\"duration\": 300, \"easing\": \"cubic-in-out\"},   #Duration of the slider transition. Default 150. \/ Default \"cubic-in-out\".\n    \"pad\": {\"b\": 10, \"t\": 50},   #Default values: 't':20, 'r':0, 'b':0, 'l':0 \n    \"len\": 0.9,    #the slider's length is this length minus the padding on both ends.  Default 1.\n    \"x\": 0.1,   #number between or equal to -2 and 3. Sets the x position (in normalized coordinates) of the slider. Default 0.\n    \"y\": 0,    #number between or equal to -2 and 3. Sets the y position (in normalized coordinates) of the slider. Default 0.\n    \"steps\": [\n        {\"args\": [\n            [year],\n            {\"frame\": {\"duration\": 300, \"redraw\": False},\n             \"mode\": \"immediate\",\n             \"transition\": {\"duration\": 300}}\n        ],\n        \"label\": year,\n        \"method\": \"animate\"}\n        for year in years\n    ]\n}\nfig_dict[\"layout\"][\"sliders\"] = [sliders_dict]\n\n# make data\n# 5 traces are appended into figure[\"data\"]. One trace for each continent in year 1952. \n# Bunun yarari trace'lere isim vererek hangi rengin hangi kitaya ait oldugunu gosterebilmek.\nyear = 1952\nfor continent in continents:\n    dataset_by_year = dataset[dataset[\"year\"] == year]\n    dataset_by_year_and_cont = dataset_by_year[\n        dataset_by_year[\"continent\"] == continent]\n\n    #trace\n    data_dict = {\n        \"x\": list(dataset_by_year_and_cont[\"lifeExp\"]),\n        \"y\": list(dataset_by_year_and_cont[\"gdpPercap\"]),\n        \"mode\": \"markers\",\n        \"text\": list(dataset_by_year_and_cont[\"country\"]),\n        \"marker\": {\n            \"sizemode\": \"area\",  # one of ( \"diameter\" | \"area\" ) Default \"diameter\". Has an effect only if `marker.size` is set to a numerical array. \n            \"sizeref\": 200000,   # Sets the scale factor used to determine the rendered size of marker points. Use when `marker.size` is set to a numerical array.\n            \"size\": list(dataset_by_year_and_cont[\"pop\"])\n        },\n        \"name\": continent\n    }\n    fig_dict[\"data\"].append(data_dict)\n\n# make frames\nfor year in years:\n    frame = {\"data\": [], \"name\": str(year)}\n    for continent in continents:\n        dataset_by_year = dataset[dataset[\"year\"] == int(year)]\n        dataset_by_year_and_cont = dataset_by_year[\n            dataset_by_year[\"continent\"] == continent]\n\n        data_dict = {\n            \"x\": list(dataset_by_year_and_cont[\"lifeExp\"]),\n            \"y\": list(dataset_by_year_and_cont[\"gdpPercap\"]),\n            \"mode\": \"markers\",\n            \"text\": list(dataset_by_year_and_cont[\"country\"]),\n            \"marker\": {\n                \"sizemode\": \"area\",\n                \"sizeref\": 200000,\n                \"size\": list(dataset_by_year_and_cont[\"pop\"])\n            },\n            \"name\": continent\n        }\n        frame[\"data\"].append(data_dict)\n\n    fig_dict[\"frames\"].append(frame)\n\n\nfig = go.Figure(fig_dict)\n\nfig.show()","36747819":"data.columns","62865ff8":"data.info()","1af6d5c0":"years=[i for i in data.year.unique()]\ncontinents=[i for i in data.continent.unique()]\n\n\nstart_data=[\n    go.Scatter(\n        x=list(data[(data.year==1952) & (data.continent==continent)][\"lifeExp\"]),\n        y=list(data[(data.year==1952) & (data.continent==continent)][\"gdpPercap\"]),\n        text=list(data[(data.year==1952) & (data.continent==continent)][\"country\"]),\n        mode='markers',\n        marker=dict(\n            size=list(data[(data.year==1952) & (data.continent==continent)][\"pop\"]),\n            sizeref=200000,\n            sizemode='area'\n        ),\n        name=continent\n    )\n    for continent in continents\n]\n\n\nlayout=go.Layout(\n    title='Life Expectancy vs GDP per Capita',\n    xaxis=dict(range=[data[\"lifeExp\"].min(), data[\"lifeExp\"].max()*1.05], title='Life Expectancy'),\n    yaxis=dict(type='log', title='GDP per Capita'),\n    hovermode='closest',\n    updatemenus=[\n        dict(\n            type='buttons',\n            buttons=[\n                dict(\n                    args=[None, dict(frame=dict(duration=500, redraw=False), \n                                     fromcurrent=True,\n                                     transition=dict(duration=300, easing='quadratic-in-out'))],\n                    label='Play',\n                    method='animate'\n                ),\n                dict(\n                    args=[[None], dict(frame=dict(duration=0, redraw=False),\n                                      mode='immediate',\n                                      transition=dict(duration=300))],\n                    label='Pause',\n                    method='animate'\n                )\n            ],\n            visible=True,\n            showactive=False,\n            direction='left',\n            x=0.1,\n            xanchor='right',\n            y=0,\n            yanchor='top',\n            pad=dict(t=80, r=10)\n        )\n    ],\n    sliders=[dict(       \n        steps=[\n            dict(\n                args=[[year], dict(frame=dict(duration=300, redraw=False),\n                              mode='immediate',\n                              transition=dict(duration=300))],\n                method='animate',\n                label=str(year)\n            ) \n            for year in years\n        ],\n        len=0.9,\n        x=0.1,\n        pad=dict(t=50, b=10),\n        xanchor='left',\n        y=0,\n        yanchor='top',\n        transition=dict(duration=300, easing='cubic-in-out'),\n        currentvalue=dict(font=dict(size=20), prefix='Year:', visible=True, xanchor='right'),\n    )]\n)\n\n\nframes=[\n    go.Frame(\n        name=str(year),\n        data=[go.Scatter(\n            x=list(data[(data.year==year) & (data.continent==continent)][\"lifeExp\"]),\n            y=list(data[(data.year==year) & (data.continent==continent)][\"gdpPercap\"]),\n            text=list(data[(data.year==year) & (data.continent==continent)][\"country\"]),\n            mode='markers',\n            marker=dict(\n                size=list(data[(data.year==year) & (data.continent==continent)][\"pop\"]),\n                sizeref=200000,\n                sizemode='area'\n            ),\n            name=continent\n        ) for continent in continents]\n    )\n    for year in years\n]\n\n\nfig=go.Figure(data=start_data, layout=layout, frames=frames)\nfig.show()\n","c394dad8":"# Plotly's Code"}}