{"cell_type":{"e63e7cdd":"code","73803d11":"code","1d6f2238":"code","13bf7656":"code","cf816e0f":"code","3c8610dc":"code","f14fcaee":"code","5271ae5c":"code","dfd29009":"markdown","6fbc2544":"markdown"},"source":{"e63e7cdd":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt # display figures inline in Jupyter notebook\nimport seaborn as sns # data visualization\n\n# Load data and create dataframe for nationwide raw data\nfilename = \"..\/input\/us-counties-covid-19-dataset\/us-counties.csv\"\nraw = pd.read_csv(filename)\n\n# Load data and create dataframe for nationwide population lookup data\nfilename_lookups = \"..\/input\/covid19-us-county-jhu-data-demographics\/us_county.csv\"\nlookups = pd.read_csv(filename_lookups)\nlookups_thin = lookups[['fips','population']]\n\n# CONCAT county-state (simplify lookups)\nraw['place'] = raw.county + \"-\" + raw.state\n\n# Add POPs to Raw data\nraw = raw.merge(lookups_thin, left_index=True, left_on='fips', right_on='fips',right_index=False, how='inner')\n\n# Cleanup datetime and set as index\nraw['date'] = pd.to_datetime(raw['date'])\nraw = raw.set_index('date')\n\n#Split dataset into a dictionary of dataframes\ndict_of_dfs = {\n    place: group_df \n    for place, group_df in raw.groupby('place') \n}\nlist_of_dfs = [\n    group_df \n    for _, group_df in raw.groupby('place')\n]\n\n# Pull date range as new comparison base dataframe (rather than first row being first reported case, it's now the first nationwide reported case) \nidx = raw.index\nidxu = idx.unique()\ndaterange = pd.DataFrame(idxu).set_index('date')","73803d11":"###Get inputs###\nState = 'Colorado'\nCounty = 'Denver'\nPlace1 = County+\"-\"+State\n\nState = 'Virginia'\nCounty = 'Fairfax'\nPlace2 = County+\"-\"+State\n\n#Generate DFs\nPlace1DF = dict_of_dfs[Place1]\nPlace1DF = Place1DF.drop(columns=['county', 'state','fips','place'])\n\nPlace2DF = dict_of_dfs[Place2]\nPlace2DF = Place2DF.drop(columns=['county', 'state','fips','place'])\n\n##Show Diffs Place1\ncum_columns = ['cases', 'deaths']\n\nPlace1DF_new = Place1DF.merge(\n    Place1DF[cum_columns].diff(),\n    left_index=True, right_index=True, suffixes=['', '_new']\n).fillna({'{}_new'.format(cum_column): Place1DF[cum_column] for cum_column in cum_columns})\nPlace1DF_new.loc[Place1DF_new.deaths_new < 0, \"deaths_new\"] = 0\n\n##Show Diffs Place2\ncum_columns = ['cases', 'deaths']\n\nPlace2DF_new = Place2DF.merge(\n    Place2DF[cum_columns].diff(),\n    left_index=True, right_index=True, suffixes=['', '_new']\n).fillna({'{}_new'.format(cum_column): Place2DF[cum_column] for cum_column in cum_columns})\nPlace2DF_new.loc[Place1DF_new.deaths_new < 0, \"deaths_new\"] = 0\n\nPlace1DF_neww = Place1DF.drop(columns=['cases', 'deaths'])\nPlace2DF_neww = Place2DF.drop(columns=['cases', 'deaths'])\n\n##percapita calcs\nPlace1DF_new['ncpmp'] = Place1DF_new['cases_new']\/Place1DF_new['population']*1000000\nPlace2DF_new['ncpmp'] = Place2DF_new['cases_new']\/Place2DF_new['population']*1000000\n\n##round percapita\nPlace1DF_new['ncpmp'] = Place1DF_new['ncpmp'].round()\nPlace2DF_new['ncpmp'] = Place2DF_new['ncpmp'].round()","1d6f2238":"#Merge Datasets into comparison dataset and change to rolling 7 day averages instead of raw counts\nMashup = daterange.merge(Place1DF_new, left_index=True, right_index=True, how='outer').merge(Place2DF_new, left_index=True, right_index=True, how='outer')\nMashup_thin = Mashup.drop(columns=['cases_new_x','cases_new_y','deaths_new_x','deaths_new_y','population_x','population_y','cases_x','cases_y','deaths_x','deaths_y'])\nMashup = Mashup.drop(columns=['population_x','population_y'])\nMashup_thin = Mashup_thin.rolling(7).mean().round(1)","13bf7656":"##Grab data for plots\nrecent14 = Mashup_thin.iloc[-14:]\n\n##Generate Stats\nSnapshot = Mashup_thin.iloc[-14:-13]\nToday = Mashup_thin.tail(1)\n\nstats = Snapshot.append(Today)\n\npc = stats.pct_change()\npc = pc.reset_index()\ndelta = Today['ncpmp_y']\/Today['ncpmp_x']\ndelta = delta.round(4).reset_index()","cf816e0f":"x_growth = pc.at[1,'ncpmp_x'].round(4)\ny_growth = pc.at[1,'ncpmp_y'].round(4)\nrelative = delta.at[0,0]\n\nprint(\"x_growth:\")\nprint(x_growth)\nprint()\nprint(\"y_growth:\")\nprint(y_growth)\nprint()\nprint(\"relative NCPMP:\")\nprint(relative)","3c8610dc":"# NCPMP PLOTTING\nNCPMP = Mashup_thin\nsns.lineplot(data = NCPMP)","f14fcaee":"# NCPMP 14day PLOTTING\nsns.lineplot(data = recent14)","5271ae5c":"## Extract Denver from raw (by Place)\n#Denver_raw1 = raw[raw['place'] == \"Denver-Colorado\"]\n#Denver_raw1.head()\n#Denver_raw2 = raw[(raw['county'] == 'Denver') & (raw['state'] == 'Colorado')]\n#Denver_raw2.head()\n\n#NCPMP_dates = NCPMP.index.strftime('%b')\n\nMashup.to_csv('Mashup.csv')","dfd29009":"Need to create inputs for State and County for Place1 and Place2","6fbc2544":"This is the graveyard\/appendix:"}}