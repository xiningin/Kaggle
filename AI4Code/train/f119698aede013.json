{"cell_type":{"02151480":"code","60e0a3ca":"code","bae1eb66":"code","63b256f4":"code","8b8907a7":"code","bc0daf0f":"code","73071bf5":"code","30a5e6d0":"code","3d5baa41":"code","d2070029":"code","0b4515a9":"code","fddec6b5":"code","81b35e05":"markdown","02391a2a":"markdown"},"source":{"02151480":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import KFold,train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom catboost import CatBoostClassifier\nimport optuna","60e0a3ca":"train = pd.read_csv(r'..\/input\/tabular-playground-series-oct-2021\/train.csv')\ntest = pd.read_csv(r'..\/input\/tabular-playground-series-oct-2021\/test.csv')\nsample_submission = pd.read_csv(r'..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')","bae1eb66":"print(f'train set have {train.shape[0]} rows and {train.shape[1]} columns.')\nprint(f'test set have {test.shape[0]} rows and {test.shape[1]} columns.') \nprint(f'sample_submission set have {sample_submission.shape[0]} rows and {sample_submission.shape[1]} columns.') ","63b256f4":"train.head()","8b8907a7":"train.drop('id',axis=1,inplace=True)\ntest.drop('id',axis=1,inplace=True)","bc0daf0f":"y = train['target']\ntrain.drop('target',axis=1,inplace=True)","73071bf5":"num_features = ['f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10', \n                'f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17', 'f18', 'f19', 'f20', \n                'f21', 'f23', 'f24', 'f25', 'f26', 'f27', 'f28', 'f29', 'f30', \n                'f31', 'f32', 'f33', 'f34', 'f35', 'f36', 'f37', 'f38', 'f39', 'f40', \n                'f41', 'f42', 'f44', 'f45', 'f46', 'f47', 'f48', 'f49', 'f50', \n                'f51', 'f52', 'f53', 'f54', 'f55', 'f56', 'f57', 'f58', 'f59', 'f60', \n                'f61', 'f62', 'f63', 'f64', 'f65', 'f66', 'f67', 'f68', 'f69', 'f70', \n                'f71', 'f72', 'f73', 'f74', 'f75', 'f76', 'f77', 'f78', 'f79', 'f80', \n                'f81', 'f82', 'f83', 'f84', 'f85', 'f86', 'f87', 'f88', 'f89', 'f90', \n                'f91', 'f92', 'f93', 'f94', 'f95', 'f96', 'f97', 'f98', 'f99', 'f100', \n                'f101', 'f102', 'f103', 'f104', 'f105', 'f106', 'f107', 'f108', 'f109', 'f110', \n                'f111', 'f112', 'f113', 'f114', 'f115', 'f116', 'f117', 'f118', 'f119', 'f120', \n                'f121', 'f122', 'f123', 'f124', 'f125', 'f126', 'f127', 'f128', 'f129', 'f130', \n                'f131', 'f132', 'f133', 'f134', 'f135', 'f136', 'f137', 'f138', 'f139', 'f140', \n                'f141', 'f142', 'f143', 'f144', 'f145', 'f146', 'f147', 'f148', 'f149', 'f150', \n                'f151', 'f152', 'f153', 'f154', 'f155', 'f156', 'f157', 'f158', 'f159', 'f160',\n                'f161', 'f162', 'f163', 'f164', 'f165', 'f166', 'f167', 'f168', 'f169', 'f170', \n                'f171', 'f172', 'f173', 'f174', 'f175', 'f176', 'f177', 'f178', 'f179', 'f180', \n                'f181', 'f182', 'f183', 'f184', 'f185', 'f186', 'f187', 'f188', 'f189', 'f190', \n                'f191', 'f192', 'f193', 'f194', 'f195', 'f196', 'f197', 'f198', 'f199', 'f200', \n                'f201', 'f202', 'f203', 'f204', 'f205', 'f206', 'f207', 'f208', 'f209', 'f210', \n                'f211', 'f212', 'f213', 'f214', 'f215', 'f216', 'f217', 'f218', 'f219', 'f220', \n                'f221', 'f222', 'f223', 'f224', 'f225', 'f226', 'f227', 'f228', 'f229', 'f230', \n                'f231', 'f232', 'f233', 'f234', 'f235', 'f236', 'f237', 'f238', 'f239', 'f240', 'f241']\n\ncat_features = ['f22','f43','f242', 'f243', 'f244', 'f245', 'f246', 'f247', 'f248', 'f249', 'f250', \n                'f251', 'f252', 'f253', 'f254', 'f255', 'f256', 'f257', 'f258', 'f259', 'f260', \n                'f261', 'f262', 'f263', 'f264', 'f265', 'f266', 'f267', 'f268', 'f269', 'f270', \n                'f271', 'f272', 'f273', 'f274', 'f275', 'f276', 'f277', 'f278', 'f279', \n                'f280', 'f281', 'f282', 'f283', 'f284']","30a5e6d0":"def fit_cat(trial, x_train, y_train, x_test, y_test):\n    params = {'iterations':trial.suggest_int(\"iterations\", 1000, 100000),\n              'od_wait':trial.suggest_int('od_wait', 500, 5000),\n              'task_type':\"GPU\",\n              'learning_rate' : trial.suggest_uniform('learning_rate', 0.02 , 0.06),\n              'reg_lambda': trial.suggest_loguniform('reg_lambda', 0.30 , 0.33),\n              'subsample': trial.suggest_uniform('subsample',0.8,1.0),\n              'random_strength': trial.suggest_uniform('random_strength',10,50),\n              'depth': trial.suggest_int('depth',1,15),\n              'min_data_in_leaf': trial.suggest_int('min_data_in_leaf',1,50),\n              'leaf_estimation_iterations': trial.suggest_int('leaf_estimation_iterations',1,15),\n              'bootstrap_type':'Poisson'\n               }\n    \n    \n    model = CatBoostClassifier(**params)\n    model.fit(x_train, y_train,eval_set=[(x_test,y_test)], early_stopping_rounds=150, verbose=False)\n    \n    y_train_pred = model.predict_proba(x_train)[:,1]\n    \n    y_test_pred = model.predict_proba(x_test)[:,1]\n    y_train_pred = np.clip(y_train_pred, 0.1, None)\n    y_test_pred = np.clip(y_test_pred, 0.1, None)\n    \n    log = {\n        \"train roc_auc\": roc_auc_score(y_train, y_train_pred),\n        \"valid roc_auc\": roc_auc_score(y_test, y_test_pred)\n    }\n    \n    return model, log","3d5baa41":"def objective(trial):\n    roc_auc = 0\n    x_train, x_test, y_train, y_test = train_test_split(train, y, test_size=0.20)\n    model, log = fit_cat(trial, x_train, y_train, x_test, y_test)\n    roc_auc += log['valid roc_auc']\n        \n    return roc_auc","d2070029":"cat_params = {'iterations': 2866,\n 'od_wait': 3385,\n 'learning_rate': 0.04280810491488757,\n 'reg_lambda': 0.32139709692279206,\n 'subsample': 0.8442605943226449,\n 'random_strength': 22.468752639603235,\n 'depth': 4,\n 'min_data_in_leaf': 31,\n 'leaf_estimation_iterations': 15,\n 'task_type':\"GPU\",\n 'bootstrap_type':'Poisson'}","0b4515a9":"folds = KFold(n_splits = 5, random_state = 2021, shuffle = True)\n\npredictions = np.zeros(len(test))\n\nfor fold, (trn_idx, val_idx) in enumerate(folds.split(train)):\n    print(f\"Fold: {fold}\")\n    X_train, X_test = train.iloc[trn_idx], train.iloc[val_idx]\n    y_train, y_test = y.iloc[trn_idx], y.iloc[val_idx]\n\n    model = CatBoostClassifier(**cat_params)\n   \n    model.fit(X_train, y_train,\n              eval_set=[(X_test, y_test)],\n                early_stopping_rounds=400,\n                verbose=False)\n    pred = model.predict_proba(X_test)[:,1]\n    roc = roc_auc_score(y_test, pred)\n    print(f\" roc_auc_score: {roc}\")\n    print(\"-\"*50)\n    \n    predictions += model.predict_proba(test)[:,1] \/ folds.n_splits ","fddec6b5":"sample_submission['target'] = predictions\nsample_submission.to_csv(f'submission.csv',index = False)","81b35e05":"#### Catboost:","02391a2a":"#### Optuna:"}}