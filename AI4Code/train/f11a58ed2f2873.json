{"cell_type":{"dcc1a4a1":"code","96701639":"code","66a1d127":"code","a71deba9":"code","198566b0":"code","f749fcdd":"code","63376b60":"code","f6def78a":"code","5e6caf49":"code","c08e2dc3":"code","23821896":"code","3148d675":"markdown","893a9ae7":"markdown","43df6015":"markdown","ee583118":"markdown","dd3c5a59":"markdown"},"source":{"dcc1a4a1":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import cross_val_score, train_test_split","96701639":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","66a1d127":"INPUT_PATH = '\/kaggle\/input\/home-data-for-ml-course\/'\n\nvalid = pd.read_csv(os.path.join(INPUT_PATH, 'test.csv'),  sep=',', index_col='Id')\ntrain = pd.read_csv(os.path.join(INPUT_PATH, 'train.csv'), sep=',', index_col='Id')","a71deba9":"X_train = train.drop(['SalePrice'], axis=1)\nX_valid = valid\ny_train = train.SalePrice","198566b0":"def print_scores(scores):\n    print('scores: min {}, mean {}, max {}'.format(scores.min(), scores.mean(), scores.max()))\n    \ndef get_scores(model, X, y, cv=5):    \n    scores = -1 * cross_val_score(model, X, y, cv=cv, scoring='neg_mean_absolute_error')\n    print_scores(scores)\n    return scores","f749fcdd":"model_rfr = RandomForestRegressor(n_estimators=100, random_state=0)","63376b60":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder, OrdinalEncoder\n\n# Preprocessing for numerical data\nnumerical_cols = [col for col in X_train.columns if X_train[col].dtype in ['int64', 'float64']]\nnumerical_transformer = SimpleImputer(strategy='constant')\n\n# Preprocessing for categorical data\ncategorical_cols = [col for col in X_train.columns if X_train[col].dtype == 'object']\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('encoder', OrdinalEncoder())\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","f6def78a":"make_df_from_nparr = lambda df, arr: pd.DataFrame(arr, index=df.index, columns=df.columns)\n\nX_train_pp = make_df_from_nparr(X_train, preprocessor.fit_transform(X_train))\nX_valid_pp = make_df_from_nparr(X_valid, preprocessor.transform(X_valid))","5e6caf49":"_ = get_scores(model_rfr, X_train_pp, y_train)","c08e2dc3":"_X_train, _X_test, _y_train, _y_test = train_test_split(X_train_pp, y_train, \n                                                    train_size=0.8, test_size=0.2,\n                                                    random_state=0)\nmodel_rfr.fit(_X_train, _y_train)\nprint('MAE:', mean_absolute_error(_y_test, model_rfr.predict(_X_test)))\n\npreds_valid = model_rfr.predict(X_valid_pp)","23821896":"# Save test predictions to file\noutput = pd.DataFrame({'Id': X_valid.index,\n                       'SalePrice': preds_valid})\noutput.to_csv('submission.csv', index=False)","3148d675":"Let's split train data to X and y","893a9ae7":"scores: min 16420.636849315066, mean 17581.771534246574, max 18896.579999999998","43df6015":"# Load the data set","ee583118":"Let's do pre-process (imputing & categorical feature encoding)","dd3c5a59":"https:\/\/www.kaggle.com\/c\/home-data-for-ml-course"}}