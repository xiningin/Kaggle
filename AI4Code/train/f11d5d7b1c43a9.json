{"cell_type":{"5dc6dbcc":"code","d06c3c51":"code","bbbf4073":"code","55752378":"code","0f34d705":"code","bb06dfad":"code","e62ed5b5":"code","16d4848a":"code","c4b4c510":"code","7aa051bf":"code","1e8eb6a6":"code","aff40bb8":"code","b071a3df":"code","49fd2354":"code","bf948d86":"code","e36c0809":"markdown","04825bd2":"markdown","ea2ce0a5":"markdown","20811fc6":"markdown","5f4a2328":"markdown","dcef49b1":"markdown","a0a39377":"markdown","6d2c9c29":"markdown"},"source":{"5dc6dbcc":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.datasets import fetch_covtype\nfrom sklearn.metrics import jaccard_score\n\nfrom sklearn.metrics import pairwise_distances\nfrom scipy.spatial.distance import jaccard\n\nfrom sklearn.cluster import AgglomerativeClustering\n\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nfrom matplotlib import pyplot as plt","d06c3c51":"x0 = np.random.choice([0, 1], size=(100000,100), p=[4.\/5, 1.\/5])\nx1 = np.random.choice([0, 1], size=(100000,100), p=[1.\/3, 2.\/3])\nx2 = np.random.choice([0, 1], size=(100000,100), p=[1.\/2, 1.\/2])","bbbf4073":"colnames = ['x_'+str(i) for i in range(0,100)]\n\nX = pd.DataFrame(data = np.stack([x0,x1,x2]).reshape(300000,100))\nX.columns = colnames\n\nX_sample = X.sample(1000)\n\ntarget = np.ones(100).astype(int)","55752378":"target","0f34d705":"x = [[1,1,1],[1,0,1],[0,0,0]]\nprint(x)","bb06dfad":"jaccard_score(x[0],x[1])","e62ed5b5":"jaccard(x[0],x[1])","16d4848a":"pairwise_distances(x, metric = jaccard)","c4b4c510":"%%time\nD = pairwise_distances(X_sample, metric = jaccard)\nD.shape","7aa051bf":"%%time\nclustering = AgglomerativeClustering(n_clusters=3).fit(D)\n\nlinked = linkage(D, 'average')\n\nlabelList = clustering.labels_\n\nplt.figure(figsize=(10, 7))\n\ndendrogram(linked,\n           p=15,\n           orientation='right',\n           labels=labelList,\n           distance_sort='descending',\n           show_leaf_counts=True,\n           truncate_mode='lastp')\n\nplt.title('Dendrogram for 1000 Samples (Truncated)')\nplt.savefig('Dendrogram.png')\nplt.show()","1e8eb6a6":"target","aff40bb8":"target.shape","b071a3df":"%%time\nfrom functools import partial\nimport multiprocessing as mp\n\npartial_jaccard = partial(jaccard_score, target)\n\nwith mp.Pool() as pool:\n    results = pool.map(partial_jaccard, [row for row in X.values])","49fd2354":"sim_df = pd.DataFrame(data = {'Jaccards Similarity Score': pd.Series(results).value_counts().index,\n                     'Count': pd.Series(results).value_counts().values})","bf948d86":"plt.scatter(x = sim_df['Jaccards Similarity Score'], y = sim_df['Count'])\nplt.title('Sample Count & Similarity to Target Observation')\nplt.ylabel('Sample Count')\nplt.xlabel('Jaccard Similarity Score')\nplt.savefig('Similarity_Count.png')\nplt.show()","e36c0809":"# Hierarchical Clustering\n\n+ Distance Matrix\n+ Dendrogram","04825bd2":"# Comparison","ea2ce0a5":"# Data & Preprocessing","20811fc6":"# References\n\n+ https:\/\/en.wikipedia.org\/wiki\/Jaccard_index\n+ https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.jaccard_score.html\n+ https:\/\/docs.python.org\/3\/library\/multiprocessing.html","5f4a2328":"# Jaccard's Metric Introduction\n\n+ Author: Casey Whorton\n+ Last Edited: 1\/21\/2021\n\nThis notebook introduces the Jaccard measure of similarity using a sample dataset. What's interesting about this measure is it provides a way to measure similarity (distance) between samples that only contain binary data (0 or 1). We use multiprocessing and a partial function to get the calculations done in a bearable amount of time (~ 1 minute).\n\n**Definition**\n\nJaccard's Similarity Score := $\\frac{X \\cap Y}{X \\cup Y} = \\frac{X \\cap Y}{X + Y - X \\cap Y}$\n\nSo, when comparing to sets (which can be an array, a series, or even a vector of binary values) the numerator is the count of elements shared between the sets and the denominator is the count of elements from both sets. In our case, the denominator is the size of the either set, so we can also say that this similarity score is the number of shared elements divided by the number of elements that could be shared.","dcef49b1":"## Simple Example","a0a39377":"## Results","6d2c9c29":"Dendrogram"}}