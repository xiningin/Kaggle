{"cell_type":{"6c6b5aab":"code","f2e85e74":"code","444da997":"code","62197000":"code","b4e7c0d5":"code","79c8040e":"code","e017ea32":"code","c9fa1d57":"code","996c7379":"code","64de5c43":"code","ff8fe958":"code","4fbbf397":"code","f31d0b5e":"code","902ec163":"code","8a8e333a":"markdown","c256d099":"markdown","1a861454":"markdown"},"source":{"6c6b5aab":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nimport numpy as np\nfrom sklearn import tree\nfrom sklearn.model_selection import GridSearchCV\n\n%matplotlib inline\n\ndf_train = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")\ndf_train.head()","f2e85e74":"survived_train = df_train.Survived\ndata = pd.concat([df_train.drop(['Survived'], axis=1), df_test])\ndata.info()","444da997":"data.Name.tail()","62197000":"## Extracting a new feature\ndata['Title'] = data.Name.apply(lambda x: re.search(' ([A-Z][a-z]+)\\.', x).group(1))\nsns.countplot(x='Title', data=data);\nplt.xticks(rotation=45);","b4e7c0d5":"data['Title'] = data['Title'].replace({'Mlle':'Miss', 'Mme':'Mrs', 'Ms':'Miss'})\ndata['Title'] = data['Title'].replace(['Don', 'Dona', 'Rev', 'Dr','Major', 'Lady', 'Sir',\n                                       'Col', 'Capt', 'Countess','Jonkheer'],'Special')\nsns.countplot(x='Title', data=data);\nplt.xticks(rotation=45);","79c8040e":"data['Has_Cabin'] = ~data.Cabin.isnull()","e017ea32":"data.drop(['Cabin', 'Name', 'PassengerId', 'Ticket'], axis=1, inplace=True)\ndata.head()","c9fa1d57":"## Handling missing values\n# data.info()\n\n# Impute missing values for Age, Fare, Embarked\ndata['Age'] = data.Age.fillna(data.Age.median())\ndata['Fare'] = data.Fare.fillna(data.Fare.median())\ndata['Embarked'] = data['Embarked'].fillna('S')\ndata.info()","996c7379":"# Binning numerical columns\n\ndata['CatAge'] = pd.qcut(data.Age, q=4, labels=False)\ndata['CatFare'] = pd.qcut(data.Fare, q=4, labels=False)\ndata = data.drop(['Age', 'Fare'], axis=1)","64de5c43":"# Create column of number of Family members onboard\ndata['Fam_Size'] = data.Parch + data.SibSp\ndata = data.drop(['SibSp','Parch'], axis=1)\ndata.head()","ff8fe958":"# Transform into binary variables\ndata_dum = pd.get_dummies(data, drop_first=True)","4fbbf397":"data_train = data_dum.iloc[:891]\ndata_test = data_dum.iloc[891:]\n\n# Transform into arrays for sklearn\nX = data_train.values\ntest = data_test.values\ny = survived_train.values","f31d0b5e":"param_grid = {\n    'max_depth' : np.arange(1, 9)\n}\n\nclf = tree.DecisionTreeClassifier()\nclf_cv = GridSearchCV(clf, param_grid=param_grid)\nclf_cv.fit(X, y)\n\nprint(\"Tuned Decision Tree Parameters : {}\".format(clf_cv.best_params_))\nprint(\"Best score is {}\".format(clf_cv.best_score_))","902ec163":"Y_pred = clf_cv.predict(test)\ndf_test['Survived'] = Y_pred\ndf_test[['PassengerId', 'Survived']].to_csv('predictions.csv', index=False)","8a8e333a":"<style>\n.output_png {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n}\n<\/style>","c256d099":"## Data Cleaning","1a861454":"## Building a predictive model with the new dataset"}}