{"cell_type":{"6e5d4130":"code","639c0e95":"code","93300597":"code","57323b50":"code","01af5118":"code","6f33f284":"code","3241aed1":"code","e042d0a0":"code","277dd8b7":"code","eb92e54f":"code","f9c3c46d":"code","0c13fe53":"code","04da6665":"code","57291c13":"code","93278b22":"code","614adec7":"code","149e05eb":"code","e744c87b":"code","1ad97460":"code","c9147c96":"code","20f8f936":"code","5ff4fd20":"code","10be173e":"code","c65c420d":"code","ba1d18a6":"code","62a502da":"code","68c1b07c":"code","1cb38bf0":"code","ef869901":"code","d37374c3":"code","2f588d0c":"code","95207fef":"code","d9cf9446":"code","0768d9d8":"code","2f73233d":"markdown","287fc39b":"markdown","e624fbaa":"markdown","84d174db":"markdown"},"source":{"6e5d4130":"import pandas as pd\nimport numpy as np\n\ninputPath = \"..\/input\/lish-moa\/\"\n\ntrain_X = pd.read_csv(inputPath + \"train_features.csv\")\ntest_X = pd.read_csv(inputPath + \"test_features.csv\")\ntrain_y = pd.read_csv(inputPath + \"train_targets_scored.csv\")","639c0e95":"train_X.head()","93300597":"train_y.head()","57323b50":"test_X.head()","01af5118":"test_X_id = test_X['sig_id']","6f33f284":"indexes = train_X.cp_type != 'ctl_vehicle'","3241aed1":"train_X = train_X.loc[indexes]","e042d0a0":"train_y = train_y.loc[indexes]","277dd8b7":"import matplotlib.pyplot as plt\nimport seaborn as sns","eb92e54f":"plt.plot(train_X['g-0'], '.')","f9c3c46d":"sns.distplot(train_X['g-0']);","0c13fe53":"sns.distplot(train_X['c-0'])","04da6665":"train_X[train_X['c-0'] == -10]","57291c13":"train_X_ = train_X.drop(['sig_id', 'cp_type'], axis = 1)\ntest_X_ = test_X.drop(['sig_id', 'cp_type'], axis = 1)","93278b22":"train_y_ = train_y.drop(['sig_id'], axis = 1)","614adec7":"def lEncoder(value):\n    if str(value) == 'D1': return 0\n    return 1    ","149e05eb":"train_X_['cp_dose'] = train_X_['cp_dose'].map(lEncoder)\ntest_X_['cp_dose'] = test_X_['cp_dose'].map(lEncoder)","e744c87b":"train_X_['cp_time'] = train_X_['cp_time'].map({24:-1, 48:0, 72:1})\ntest_X_['cp_time'] = test_X_['cp_time'].map({24:-1, 48:0, 72:1})","1ad97460":"train_X_.head()","c9147c96":"def encoder(value):\n    ''' As per discussion forum'''\n    if value >= 2:\n        return 2\n    elif value <= -2:\n        return -2\n    return value","20f8f936":"for col in train_X_.columns:\n    if col != 'cp_time' or col != 'cp_dose':\n        train_X_[col] = train_X_[col].map(encoder)\n        test_X_[col] = train_X_[col].map(encoder)","5ff4fd20":"train_y_.head()","10be173e":"X, y = train_X_, train_y_","c65c420d":"train_y.isnull().any().sum()","ba1d18a6":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import log_loss\nfrom imblearn.combine import SMOTETomek\nfrom sklearn.linear_model import LogisticRegression","62a502da":"y.iloc[:, 1].value_counts()","68c1b07c":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.25, random_state = 40)","1cb38bf0":"X_train.shape","ef869901":"from tensorflow import keras\n\nmodelPred = keras.Sequential()\n\nmodelPred.add(keras.layers.Dense(128, input_shape = (874, )))\nmodelPred.add(keras.layers.BatchNormalization())\nmodelPred.add(keras.layers.Dense(512, activation = 'relu'))\nmodelPred.add(keras.layers.BatchNormalization())\nmodelPred.add(keras.layers.Dense(1024, activation = 'relu'))\nmodelPred.add(keras.layers.Dropout(0.5))\nmodelPred.add(keras.layers.Dense(512, activation = 'relu'))\nmodelPred.add(keras.layers.BatchNormalization())\nmodelPred.add(keras.layers.Dense(206, activation = 'sigmoid'))\n\nmodelPred.summary()\n\noptim = keras.optimizers.Adam(learning_rate=1e-3)\nmodelPred.compile(optimizer = optim, loss = keras.losses.CategoricalCrossentropy())","d37374c3":"weights = {0:20000, 1:20}\n\nhistory = modelPred.fit(\n    X_train,\n    y_train,\n    batch_size = 32,\n    epochs = 5,\n    class_weight = weights\n    #validation_data=(X_val, y_val)\n)\n'''\nhistory = modelPred.fit(\n    X_train,\n    y_train,\n    batch_size = 64,\n    epochs = 2,\n    class_weight = weights,\n    validation_data=(X_val, y_val)\n)''';","2f588d0c":"y_predictions = modelPred.predict(test_X_)\n\ny_predictions.shape\n\ntest_X_id.values.shape\n\nfinal = np.hstack([test_X_id.values.reshape(-1, 1), y_predictions])","95207fef":"modelPred.fit?","d9cf9446":"final.shape","0768d9d8":"final.shape\n\ntest_X.columns.shape\n\nsubmission = pd.DataFrame(final, columns = train_y.columns)\n\nsubmission.head()\n\nsubmission.to_csv('submission.csv', index = False)","2f73233d":"# Preparation","287fc39b":"# Preprocessing","e624fbaa":"# Starter for MOA competition","84d174db":"# Modelling"}}