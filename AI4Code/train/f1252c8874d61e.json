{"cell_type":{"78e41634":"code","d9234f45":"code","ebc4fc59":"code","9bed131d":"code","05ec1c1f":"code","aaee6893":"code","93e4c728":"markdown","cc1048b1":"markdown","13fc6334":"markdown","f8f62580":"markdown","57e280d0":"markdown"},"source":{"78e41634":"import re","d9234f45":"files = ['employees.xml', 'calculator.jar', 'nfsmw.exe', 'bkgrnd001.jpg', 'sales_report.ppt']\n\npattern = \"^.+\\.(xml|jar|exe)$\"\n\nresult = []\n\nfor file in files:\n    match = re.search(pattern, file)\n    if match !=None:\n        result.append(file)\n\n# print result - result should only contain the items that match the pattern\nprint(result)","ebc4fc59":"addresses = ['466, 5th block, Koramangala, Bangalore', '4th BLOCK, KORAMANGALA - 560034', '999, St. Marks Road, Bangalore']\n\npattern = \"^[\\w\\d\\s,-]*koramangala[\\w\\d\\s,-]*$\"\n\nresult = []\n\nfor address in addresses:\n    match = re.search(pattern, address, re.I)\n    if match !=None:\n        result.append(address)\n\n# print result - result should only contain the items that match the pattern\nprint(result)","9bed131d":"numbers = ['2', '2.3', '4.56', '.61', '4.567', '75.8792', 'abc']\n\npattern = \"^[0-9]*(\\.[0-9]{,2})?$\"\n\nresult = []\n\nfor number in numbers:\n    match = re.search(pattern, number)\n    if match != None:\n        result.append(number)\n\n# print result - result should only contain the items that match the pattern\nprint(result)","05ec1c1f":"phones = ['apple_iphone_6', 'samsung_note_4', 'google_pixel_2', 'apple_6', 'iphone_6', 'google_pixel_']\n\npattern = \"^.*_.*_\\d$\"\n\nresult = []\n\nfor phone in phones:\n    match = re.search(pattern, phone)\n    if match !=None:\n        result.append(phone)\n\n# print result - result should only contain the items that match the pattern\nprint(result)","aaee6893":"emails = ['random.guy123@gmail.com', 'mr_x_in_bombay@gov.in', '1@ued.org',\n          '@gmail.com', 'abc!@yahoo.in', 'sam_12@gov.us', 'neeraj@']\n\npattern = \"^[a-z_.0-9]{4,20}@[a-z]{3,15}\\.(com|in|org)$\"\n\nresult = []\n\nfor email in emails:\n    match = re.search(pattern, email, re.I)\n    if match !=None:\n        result.append(email)\n\n# print result - result should only contain the items that match the pattern\nprint(result)","93e4c728":"### Q5. \nWrite a regular expression that can be used to match the emails present in a database. \n\nThe pattern of a valid email address is defined as follows:\nThe '@' character can be preceded either by alphanumeric characters, period characters or underscore characters. The length of the part that precedes the '@' character should be between 4 to 20 characters.\n\nThe '@' character should be followed by a domain name (e.g. gmail.com). The domain name has three parts - a prefix (e.g. 'gmail'), the period character and a suffix (e.g. 'com'). The prefix can have a length between 3 to 15 characters followed by a period character followed by either of these suffixes - 'com', 'in' or 'org'.\n\n\nEmails that should match:\n* random.guy123@gmail.com\n* mr_x_in_bombay@gov.in\n\nEmails that shouldn\u2019t match:\n* 1@ued.org\n* @gmail.com\n* abc!@yahoo.in\n* sam_12@gov.us\n* neeraj@","cc1048b1":"### Q3. \nWrite a regular expression that matches either integer numbers or floats upto 2 decimal places.\n\nStrings that should match: \n* 2\n* 2.3\n* 4.56\n* .61\n\nStrings that shoudln't match:\n* 4.567\n* 75.8792\n* abc\n","13fc6334":"### Q4. \nWrite a regular expression to match the model names of smartphones which follow the following pattern: \n\nmobile company name followed by underscore followed by model name followed by underscore followed by model number\n\nStrings that should match:\n* apple_iphone_6\n* samsung_note_4\n* google_pixel_2\n\nStrings that shouldn\u2019t match:\n* apple_6\n* iphone_6\n* google\\_pixel\\_\n","f8f62580":"### Q1.\nWrite a regular expression to match all the files that have either .exe, .xml or .jar extensions. A valid file name can contain any alphabet, digit and underscore followed by the extension.","57e280d0":"### Q2\nWrite a regular expression to match all the addresses that have Koramangala embedded in them.\n\nStrings that should match:\n* 466, 5th block, Koramangala, Bangalore\n* 4th BLOCK, KORAMANGALA - 560034\n\nStrings that shouldn't match:\n* 999, St. Marks Road, Bangalore\n"}}