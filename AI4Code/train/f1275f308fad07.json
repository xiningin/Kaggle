{"cell_type":{"46e1e7a1":"code","1fd24e7b":"code","fa72b711":"code","ae987970":"code","d1a1f39c":"code","5dc1559f":"code","05f34a00":"code","1b7f35a5":"code","263cdcc6":"code","8b4ca450":"code","b79ea258":"code","00a40c34":"code","43daa638":"code","82f254f3":"code","9625e0c0":"code","0949d024":"code","1f9290f0":"code","4356f74d":"code","c9b26928":"code","6631df3e":"code","64f5a220":"code","33b36d59":"code","8856b7b1":"code","4cb0702f":"code","4540f23f":"code","59011c92":"code","5c640721":"code","3bf56d92":"code","eecb6ffb":"code","134e6c81":"code","7b081d4f":"code","0ba75dde":"code","430a6320":"markdown","9154c509":"markdown","52030e99":"markdown","1bdd2da1":"markdown","2ba6c79c":"markdown","8d8d1fb4":"markdown","b7f0820d":"markdown","baadb8cf":"markdown","791bab23":"markdown","11736d16":"markdown","6eac58f3":"markdown","666fd692":"markdown","1f84874a":"markdown","8270a745":"markdown","d2d116da":"markdown","4538af36":"markdown","0fb22665":"markdown","0c183d9a":"markdown","b48e9315":"markdown","065223ea":"markdown","1057a301":"markdown","a00cd373":"markdown"},"source":{"46e1e7a1":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Plotly libraries\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objs as go\n#import chart_studio.plotly as py\n\nimport cufflinks as cf\nfrom plotly.offline import iplot, init_notebook_mode, plot\ncf.go_offline()\n\nimport warnings\nwarnings.filterwarnings('ignore')","1fd24e7b":"consumer_data= pd.read_csv('..\/input\/consumercomplaintsdata\/Consumer_Complaints.csv')","fa72b711":"consumer_data.head(2)","ae987970":"consumer_data.columns = consumer_data.columns.str.title()","d1a1f39c":"mode_value= consumer_data['Consumer Disputed?'].mode()\nmode_value ='No'","5dc1559f":"consumer_data['Consumer Disputed?'].fillna(mode_value, inplace=True)","05f34a00":"consumer_data['Consumer Disputed?'].isnull().fillna(mode_value,inplace =True)","1b7f35a5":"consumer_data.isnull().mean().round(4)*100","263cdcc6":"# getting the sum of null values and ordering.\ntotal = consumer_data.isnull().sum().sort_values(ascending = False)  \n\n#getting the percent and order of null.\npercent = (consumer_data.isnull().sum()\/consumer_data.isnull().count()*100).sort_values(ascending =False)\n\n# Concatenating the total and percent\ndf = pd.concat([total , percent],axis =1,keys=['Total' ,'Percent'])\n\n# Returning values of nulls different of 0\n(df[~(df['Total'] == 0)])","8b4ca450":"consumer_data[['Issue','Date Received','Product','Sub-Issue','Consumer Complaint Narrative','Company',\n               'Company Public Response','Consumer Consent Provided?',\n               'Company Response To Consumer','Submitted Via']].describe().transpose()","b79ea258":"sns.set(style='white')\nconsumer_data['Issue'].str.strip(\"'\").value_counts()[0:15].iplot(kind='bar',title='Top 15 issues',fontsize=14,color='orange')","00a40c34":"consumer_data['Sub-Issue'].str.strip(\"'\").value_counts()[0:15].iplot(kind ='bar',\n                                                                     title='Top 15 Sub Issues',fontsize=14,color='#9370DB')","43daa638":"consumer_data['Company'].str.strip(\"'\").value_counts()[0:15].iplot(kind='bar',\n                                                          title='Top 15 Company',fontsize=14,color='purple')","82f254f3":"from datetime import datetime","9625e0c0":"consumer_data['Date'] =pd.to_datetime(consumer_data['Date Received'])\n\n#Extracting Year.\nconsumer_data['Year'] =consumer_data['Date'].dt.year\n\n#Extracting Month.\nconsumer_data['Month'] =consumer_data['Date'].dt.month_name()\n\n#Extracting Weekdays\n\nconsumer_data['Week_Days'] = consumer_data['Date'].dt.day_name()\n","0949d024":"consumer_data.head()","1f9290f0":"consumer_data['Week_Days'].value_counts().iplot(kind ='barh',title ='Number of Complaints per Weekday')","4356f74d":"pd.crosstab(consumer_data['Year'],consumer_data['Month']).iplot(kind='bar',barmode='stack',\n                                                        title='Number of Complaints per Month')","c9b26928":"grouped = consumer_data.groupby(['Company Response To Consumer']).size()\npie_chart = go.Pie(labels=grouped.index,values=grouped,\n                  title='Company Response to the Customer')\niplot([pie_chart])","6631df3e":"states = consumer_data['State'].value_counts()\n\nscl = [\n    [0.0, 'rgb(242,240,247)'],\n    [0.2, 'rgb(218,218,235)'],\n    [0.4, 'rgb(188,189,220)'],\n    [0.6, 'rgb(158,154,200)'],\n    [0.8, 'rgb(117,107,177)'],\n    [1.0, 'rgb(84,39,143)']\n]\n\ndata = [go.Choropleth(\n    colorscale = scl,\n    autocolorscale = False,\n    locations = states.index,\n    z = states.values,\n    locationmode = 'USA-states',\n    text = states.index,\n    marker = go.choropleth.Marker(\n        line = go.choropleth.marker.Line(\n            color = 'rgb(254,254,254)',\n            width = 2\n        )),\n    colorbar = go.choropleth.ColorBar(\n        title = \"Complaints\")\n)]\n\nlayout = go.Layout(\n    title = go.layout.Title(\n        text = 'Complaints by State'\n    ),\n    geo = go.layout.Geo(\n        scope = 'usa',\n        projection = go.layout.geo.Projection(type = 'albers usa'),\n        showlakes = True,\n        lakecolor = 'rgb(100,149,237)'),\n)\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","64f5a220":"pd.crosstab(consumer_data['Timely Response?'],consumer_data['Submitted Via']).iplot(kind='bar',\n                                                                                    title='Company Response to the Customer')","33b36d59":"pd.crosstab(consumer_data['Timely Response?'], consumer_data['Consumer Disputed?']).iplot(kind='bar',\n                                                                    title ='Timely Response vs Consumer Disputed' )","8856b7b1":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\nlabelencoder = LabelEncoder()\nonehotencoder =OneHotEncoder()","4cb0702f":"# Label Encoding the Consumer Disputed? column\nconsumer_data['Consumer_encode']= labelencoder.fit_transform(consumer_data['Consumer Disputed?'])","4540f23f":"enc = OneHotEncoder(handle_unknown='ignore')\nconsumer_data1 = pd.DataFrame(enc.fit_transform(consumer_data[['Product']]).toarray())\ndf = consumer_data.join(consumer_data1)","59011c92":"x = df.iloc[:,24:41].values\ny = df['Consumer_encode'].values","5c640721":"from sklearn.model_selection import train_test_split\nx_train , x_test , y_train , y_test = train_test_split(x,y, test_size =0.25, random_state =10)","3bf56d92":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train =sc.fit_transform(x_train)\nx_test = sc.fit_transform(x_test)","eecb6ffb":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators=10,criterion='entropy', random_state =10)\nclassifier.fit(x_train,y_train)","134e6c81":"y_pred = classifier.predict(x_test)","7b081d4f":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test,y_pred)\nprint(cm)","0ba75dde":"from sklearn.metrics import accuracy_score\nprint('Accuracy Score:',accuracy_score(y_test,y_pred))","430a6320":"**Predicting the Test set results**","9154c509":"### Random Forest on Consumer Complaints Dataset","52030e99":"The Goal is to analyze and build prediction model to predict which consumer is more likely to dispute the resolution of a complaint.Make predictions for the \"Consumer disputed\" column.","1bdd2da1":"Random forests or random decision forests are an ensemble learning method for classification, regression and other tasks that operate by constructing a multitude of decision trees at training time and outputting the class that is the mode of the classes (classification) or mean prediction (regression) of the individual","2ba6c79c":"### Consumers that disputed the company response and those that did not?","8d8d1fb4":"### What is the most common response received from companies?","b7f0820d":"**Splitting Independent features from Dependent ones**","baadb8cf":"**Splitting the dataset into the Training set and Test set**","791bab23":"### Consumer Complaints Analysis, Visualization & Prediction","11736d16":"**Importing the library to Label Encode and One-Hot Encode our categorical column**","6eac58f3":"In this section, we extract the date features from the Date Received field.","666fd692":"### What are the top 15 issues and sub issues?","1f84874a":"### In which month did most complaints occur and on which day of the week are most complaints received?","8270a745":"#### Summary Statistics","d2d116da":"**Feature Scaling**","4538af36":"**Thank You !!!**","0fb22665":"**Fitting Random Forest Classification to the Training set**","0c183d9a":"**Making the Confusion Matrix**","b48e9315":"**Importing packages**","065223ea":"### Which state received the largest number of complaints?","1057a301":"**Model Accuracy Score**","a00cd373":"### What was the most common medium via which complaints were submitted?"}}