{"cell_type":{"ce973c83":"code","3d582c42":"code","da5b75c4":"code","7b9ec831":"code","8dadbf9c":"code","8bc702db":"code","3e0da4d5":"code","20f47d11":"code","38b07f60":"code","c23a54a9":"code","5c743065":"code","459d14a4":"code","0266ecfc":"code","55243f77":"code","5ab2449a":"code","294e6b9b":"code","0c19e8f3":"code","6c8d15a5":"code","17c8e0a8":"code","ae518c00":"code","822d8e5c":"code","2b75b942":"code","401dd674":"code","8950cdc6":"code","c317cc51":"code","dce40e94":"code","2bb84188":"code","ed4fdd69":"code","c5f087d1":"code","16e43413":"code","33421dc7":"code","78d8da8c":"code","e85eac8b":"code","650dca08":"code","bcca4843":"code","70ded026":"code","9512169e":"code","40078f02":"code","40f44e75":"code","08504ae6":"code","01afc1a0":"code","895b3288":"code","4a31cd8e":"code","03f4c231":"code","46a6f45c":"code","f32013d1":"code","61d0276a":"code","b3fa5522":"code","25b17c32":"code","9efed64e":"code","be21b482":"code","b0a0767f":"markdown","383a2aa4":"markdown","2e1e9129":"markdown","d1cac2b5":"markdown","645cd2fe":"markdown","c0fa5494":"markdown","632b535d":"markdown","308cef97":"markdown","a9637401":"markdown","9a687109":"markdown","4a5ebb27":"markdown","cf33f9dc":"markdown","8a193313":"markdown"},"source":{"ce973c83":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3d582c42":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n","da5b75c4":"train_data = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","7b9ec831":"train_data","8dadbf9c":"test_data = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","8bc702db":"train_data.shape","3e0da4d5":"X = train_data.drop(['label'],axis=1)","20f47d11":"X","38b07f60":"y = train_data['label']","c23a54a9":"y","5c743065":"y.value_counts()","459d14a4":"import seaborn as sns","0266ecfc":"sns.countplot(y)","55243f77":"X = X\/255.0\ntrain_data = train_data\/255.0","5ab2449a":"from tensorflow.keras import utils","294e6b9b":"y = utils.to_categorical(y,10) #data,number of classes","0c19e8f3":"y #now we have catagorical form of y","6c8d15a5":"X = X.values.reshape(-1,28,28,1)\ntest_data = test_data.values.reshape(-1,28,28,1)","17c8e0a8":"print(\"X Shape:\",X.shape,\"\\n test Shape:\",test_data.shape)","ae518c00":"from sklearn.model_selection import train_test_split","822d8e5c":"X_train, X_val, Y_train, Y_val = train_test_split(X, y, test_size = 0.1, random_state=2)\n","2b75b942":"X_train.shape","401dd674":"input_shape = X.shape[1:]","8950cdc6":"Y_train.shape","c317cc51":"input_shape","dce40e94":"from tensorflow.keras.models import Sequential #Keras is an api that sits on top of tensorflow. Moreover tensorflow is google's plateform to built as deep learning model!\nfrom tensorflow.keras.layers import Conv2D,MaxPooling2D,AveragePooling2D,Dense,Flatten,Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import TensorBoard","2bb84188":"cnn_model = Sequential()\n\n\ncnn_model.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\ncnn_model.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\ncnn_model.add(MaxPooling2D(pool_size=(2,2)))\ncnn_model.add(Dropout(0.25))\n\ncnn_model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\ncnn_model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\ncnn_model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\ncnn_model.add(Dropout(0.25))\n\ncnn_model.add(Flatten())\ncnn_model.add(Dense(256, activation = \"relu\"))\ncnn_model.add(Dropout(0.5))\ncnn_model.add(Dense(10, activation = \"softmax\"))","ed4fdd69":"from tensorflow.keras.optimizers import RMSprop","c5f087d1":"rms = RMSprop","16e43413":"cnn_model.compile(loss= 'categorical_crossentropy',optimizer =rms(lr=0.001),metrics= ['accuracy'])","33421dc7":"from tensorflow.keras.preprocessing.image import ImageDataGenerator","78d8da8c":"\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","e85eac8b":"epochs = 15\nbatch_size = 86","650dca08":"\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau","bcca4843":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\n","70ded026":"# Fit the model\nhistory = cnn_model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 1, steps_per_epoch=X_train.shape[0] \/\/ batch_size,callbacks=[learning_rate_reduction]\n                            )\n\n                              ","9512169e":"history.history.keys()","40078f02":"import matplotlib.pyplot as plt","40f44e75":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss Progress during Training')\nplt.ylabel('Training and validation loss')\nplt.xlabel('Number of epochs')\nplt.legend(['Training Loss','Validation Loss'])","08504ae6":"from sklearn.metrics import confusion_matrix","01afc1a0":"predicted_classes = cnn_model.predict_classes(X_val)","895b3288":"Y_true = np.argmax(Y_val,axis = 1) ","4a31cd8e":"cm = confusion_matrix(Y_true,predicted_classes)","03f4c231":"plt.figure(figsize=(7,7))\nsns.heatmap(cm,annot=True)","46a6f45c":"result = cnn_model.predict_classes(test_data)","f32013d1":"result","61d0276a":"submission = pd.DataFrame()","b3fa5522":"submission['ImageId'] = pd.Series(range(1,28001))","25b17c32":"submission['Label'] = result","9efed64e":"submission","be21b482":"submission.to_csv('Save2',index=False)","b0a0767f":"Normalisation","383a2aa4":"In order to avoid overfitting problem, we need to expand artificially our handwritten digit dataset. We can make your existing dataset even larger. The idea is to alter the training data with small transformations to reproduce the variations occuring when someone is writing a digit.","2e1e9129":"**Train Validation Split**","d1cac2b5":"Balanced Data!","645cd2fe":"This is the matrix where rows represent the image number and columns represent the pixel values(total of 784 pixels) that range from 0 to 255 .Value 0 represent a purely black pixel while value 255 represent a purely white pixel.","c0fa5494":"Lets predict on test dataset","632b535d":"**Model Evaluation**","308cef97":"Our model is performing really well!","a9637401":"**Reshape**","9a687109":"The last layer had activation equal to softmax function as we need to genrate binary outputs and not continous.","4a5ebb27":"**CNN Model**","cf33f9dc":"1. **MNIST data has 28 by 28 pixels 72000 images. The training data has 42000 images.**","8a193313":"**Lets do some data augmentation**"}}