{"cell_type":{"895e7d44":"code","c017ab7b":"code","66b248e1":"code","c4a1179d":"code","58af18e9":"code","d4efc883":"code","2fa14d1e":"code","aad8dac1":"code","a631ae11":"code","b7ef1ed3":"code","93c07763":"code","7a83a800":"code","a89ef87a":"code","8591707e":"code","bf0d2dc7":"code","6fe9931d":"code","24f89171":"code","56b2789b":"code","5b49e3e4":"code","2ed4812f":"code","db20f9e8":"code","48eca4f7":"markdown","e4dc2e2c":"markdown","af678a37":"markdown","8b217afb":"markdown"},"source":{"895e7d44":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#\uc6b0\ub9ac\uac00 \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \uc785\ub825\nimport numpy as np    #numpy = \uc218\uc801 \uc5f0\uc0b0 # linear algebra \nimport pandas as pd    #pandas = \ub370\uc774\ud130\uc804\ucc98\ub9ac \ud398\ud0a4\uc9c0 # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#\ub370\uc774\ud130 \uacbd\ub85c\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c017ab7b":"#\uadf8\ub798\ud504 \ud65c\uc6a9\ud558\uae30 \uc704\ud574 import\n\nimport matplotlib.pyplot as plt    #\ub370\uc774\ud130 \uc2dc\uac01\ud654\nimport seaborn as sns   #\uadf8\ub798\ud504 \uc2dc\uac01\ud654\nimport missingno as msno    #\uacb0\uce21\uce58 \uc2dc\uac01\ud654","66b248e1":"#\ub370\uc774\ud130 \ubd88\ub7ec\uc624\uc790\n\n#pd = \ud310\ub2e4\uc2a4\ndf = pd.read_csv('\/kaggle\/input\/london-bike-sharing-dataset\/london_merged.csv', parse_dates = ['timestamp'])    #\uacbd\ub85c\ub97c \uc801\uc5b4\uc8fc\uc5b4 \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\ndf.head()    #df \uc758 \uc0c1\uc704 5\uac1c\ub97c \ubcf4\uc5ec\uc918","c4a1179d":"#\ub370\uc774\ud130 \uad6c\uc870 \nprint('\ub370\uc774\ud130\uc758 \uad6c\uc870:', df.shape)    \n#\ud589\uc774 17000\uac1c \uc5f4\uc774 10\uac1c\uac00 \uc788\ub294 \ub370\uc774\ud130\n \n#\ub370\uc774\ud130 \ud0c0\uc785\nprint('\ub370\uc774\ud130 \ud0c0\uc785:', df.dtypes)\n\n#\ub370\uc774\ud130 \uceec\ub7fc\nprint('\ub370\uc774\ud130 \uceec\ub7fc:', df.columns)","58af18e9":"#\ub370\uc774\ud130 \uacb0\uce21\uce58(\ubbf8\uc2f1\ub370\uc774\ud130\uac00 \uc788\ub294\uc9c0 \ubcf4\uc790)\n#\ucc98\uc74c\uc5d4 \uac01 \ubcc0\uc218\ubcc4 \uacb0\uce21\uce58\ub294 0\uc774 \ub098\uc624\uac8c \ub428 --> \uacb0\uce21\uce58\uac00 \uc5c6\ub2e4\ub77c\ub294 \uac83\uc744 \ub73b\ud568\ndf.isna().sum()","d4efc883":"#\ub370\uc774\ud130 \uc2dc\uac01\ud654\n#import missingno sns \ub97c \ud65c\uc6a9\ud574\uc11c \uacb0\uce21\uce58\uac00 \uc5bc\ub9c8\ub098 \uc788\ub294\uc9c0 \uc2dd\uac01\ud654\nmsno.matrix(df)\nplt.show()\n#\uacb0\uce21\uce58\uac00 \uc788\uc73c\uba74 \ud770\uc0c9 \uc5c6\uc73c\uba74 \uac80\uc740\uc0c9","2fa14d1e":"#\uba38\uc2e0\ub7ec\ub2dd \ub525\ub7ec\ub2dd\uc744 \uc774\uc6a9\ud78c \uc2dc\uac04\ub300\ubcc4 \uc790\uc804\uac70 \uc218\uc694 \uc608\uce21\n#\ubaa8\ub378\uc774 \ud559\uc2b5\ud560\uc218\uc788\ub3c4\ub85d \ub9ce\uc740 \ub370\uc774\ud130\ub97c \ucd94\ucd9c\ud558\ub294\uac83\ub3c4 \ub370\uc774\ud130 \uc804\ucc98\ub9ac\n#\ucef4\ud4e8\ud130\uac00 \ud559\uc2b5\uc744 \ub354 \uc798\ud560 \uc218\uc788\ub3c4\ub85d --> \ubcc0\uc218\ub97c \ub354 \ub9ce\uc774 \uc0dd\uc131\n#\ub144, \uc6d0, \uc77c \ub4f1 \uc2dc\uac04\uc5d0 \ub300\ud55c \ubcc0\uc218\ub4e4\uc744 \uac1c\ubcc4\uc801\uc73c\ub85c \ucd94\ucd9c\ud574\uc11c \ucd94\uac00\uc801\uc778 \ubcc0\uc218 \uc0dd\uc131\ndf['year'] = df['timestamp'].dt.year    #\ud0c0\uc784\uc2a4\ud0ec\ud504 \uc5f4\uc5d0\uc11c year\ub97c \ucd94\ucd9c\ud574\uc11c df\uc5d0 year\ub77c\ub294 \ub144\ub3c4\ub97c \ub123\uaca0\ub2e4.\ndf['month'] = df['timestamp'].dt.month\ndf['dayofweek'] = df['timestamp'].dt.dayofweek\ndf['hour'] = df['timestamp'].dt.hour\ndf.head()     #df \uc758 \uc0c1\uc704 5\uac1c\ub97c \ubcf4\uc5ec\uc918","aad8dac1":"#\ud0d0\uc0c9\uc801 \uc804\ucc98\ub9ac\ndf['year'].value_counts()     #df year\uc758 \ub370\uc774\ud130 \uad6c\uc131\uc744 \ubcf4\uc790\n#2016 \ub370\uc774\ud130\uac00 8699\uac1c \uad6c\ub098~ 2017\ub144 \ub370\uc774\ud130\ub294 \ube44\uad50\uc801 \uc801\uad6c\ub098~","a631ae11":"#\uadf8\ub798\ud504\ub97c \ud1b5\ud55c \ud0d0\uc0c9\uc801 \ubd84\uc11d\n#\uc55e\uc5d0\uc11c \ubd88\ub7ec\uc628 import seaborn as sns \uc2dc\ubcf8\uc774\ub77c\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud1b5\ud574\uc11c \uadf8\ub798\ud504\ub97c \uadf8\ub824\ubcf4\uc790\n\n#\ub144\ub3c4\ubcc4 \uc790\uc804\uac70\uc774\uc6a9\uac1d\uc744 \ubc15\uc2a4\ud50c\ub86f\uc73c\ub85c \ub098\ud0c0\ub0b4 \ubcf4\uc790\na, b = plt.subplots(1,1, figsize =(10,5))    #a\uc640 b\ub97c \ub9cc\ub4e4\uace0 \nsns.boxplot(df['year'], df['cnt'])    #\ubc15\uc2a4\ud50c\ub86f\uc73c\ub85c \uadf8\ub9ac\uae30 --> \uac00\ub85c\ucd95\uc740 year \/ \uc138\ub85c\ucd95\uc740 \uc790\uc804\uac70 \uc774\uc6a9\uac1d\n\n#\uc0c9\uc788\ub294 \uacf3\uc5d0 \uc120\uc774 \uc911\uc704\uac12, \ub9e8\uc704 \uc120\uc774 \ub9e5\uc2a4\uac12, \ub9e8 \uc544\ub798\uc120\uc774 \ubbfc\uac12 \n#\ub9e5\uc2a4\uac12\uc744 \ubc97\uc5b4\ub09c\uac83\uc744 \uc774\uc0c1\uce58\ub77c\uace0 \ud568\n#\ub144\ub3c4\uc5d0 \ub530\ub77c\uc11c \uc870\uae08\uc529 \ub2e4\ub974\uace0 17\ub144\uc5d0 \ub4e4\uc5b4\uc11c\ub294 \uc774\uc6a9\uac1d\ub4e4\uc774 \uc801\uc5b4\uc9c0\ub294\uac78 \ubcfc\uc218\uc788\uc74c\n#\ub370\uc774\ud130 \ud2b9\uc131\ub9c8\ub2e4 \ub2e4\ub978 \ud2b9\uc131\uc744 \ub098\ud0c0\ub0b4\ub294\uac83\ub4e4\uc774 \ubaa8\ud615\ud559\uc2b5\ud560\ub54c \uc88b\uc74c","b7ef1ed3":"#\uc6d4\ubcc4 \uc790\uc804\uac70\uc774\uc6a9\uac1d\uc744 \ubc15\uc2a4\ud50c\ub86f\uc73c\ub85c \ub098\ud0c0\ub0b4 \ubcf4\uc790\na, b = plt.subplots(1,1, figsize =(10,5))    #a\uc640 b\ub97c \ub9cc\ub4e4\uace0 \nsns.boxplot(df['month'], df['cnt'])    #\ubc15\uc2a4\ud50c\ub86f\uc73c\ub85c \uadf8\ub9ac\uae30 --> \uac00\ub85c\ucd95\uc740 month \/ \uc138\ub85c\ucd95\uc740 \uc790\uc804\uac70 \uc774\uc6a9\uac1d\n\n#7, 8\uc6d4\uc5d0 \ub192\uace0 \uaca8\uc6b8\uc5d4 \ub0ae\uc544\uc9c0\ub294\uac83\uc744 \ubcfc \uc218 \uc788\uc74c","93c07763":"#\uc77c\ubcc4 \uc790\uc804\uac70\uc774\uc6a9\uac1d\uc744 \ubc15\uc2a4\ud50c\ub86f\uc73c\ub85c \ub098\ud0c0\ub0b4 \ubcf4\uc790\na, b = plt.subplots(1,1, figsize =(10,5))    #a\uc640 b\ub97c \ub9cc\ub4e4\uace0 \nsns.boxplot(df['dayofweek'], df['cnt'])    #\ubc15\uc2a4\ud50c\ub86f\uc73c\ub85c \uadf8\ub9ac\uae30 --> \uac00\ub85c\ucd95\uc740 dayofweek \/ \uc138\ub85c\ucd95\uc740 \uc790\uc804\uac70 \uc774\uc6a9\uac1d\n\n#\ud1a0, \uc77c\uc5d0 \ub0ae\uc544\uc9c0\ub294\uac83\uc744 \ubcfc \uc218 \uc788\uc74c","7a83a800":"#\uc2dc\uac04\ubcc4 \uc790\uc804\uac70\uc774\uc6a9\uac1d\uc744 \ubc15\uc2a4\ud50c\ub86f\uc73c\ub85c \ub098\ud0c0\ub0b4 \ubcf4\uc790\na, b = plt.subplots(1,1, figsize =(10,5))    #a\uc640 b\ub97c \ub9cc\ub4e4\uace0 \nsns.boxplot(df['hour'], df['cnt'])    #\ubc15\uc2a4\ud50c\ub86f\uc73c\ub85c \uadf8\ub9ac\uae30 --> \uac00\ub85c\ucd95\uc740 hour \/ \uc138\ub85c\ucd95\uc740 \uc790\uc804\uac70 \uc774\uc6a9\uac1d\n\n#\ucd9c\ud1f4\uadfc \uc2dc\uac04\uc5d0 \ub192\uc544\uc9c0\ub294\uc744 \ubcfc \uc218 \uc788\uc74c","a89ef87a":"#\uadf8\ub798\ud504\ub97c \ud1b5\ud574\uc11c \ubcc0\uc218\uc640 \uc720\ucd94\ud558\ub824\uace0 \ud558\ub294 \uc790\uc804\uac70 \uc774\uc6a9\uac1d\uad00\uc5d0 \uc0c1\uad00\uad00\uacc4\ub97c \ud0d0\uc0c9\uc801 \ubd84\uc11d \uc2dc\uac01\ud654\ub85c \ud558\uc600\ub2e4.\n#\ud558\ub098\ud558\ub098 \uc785\ub825\ud574\ub3c4 \ub418\uc9c0\ub9cc \ub2e8\ucd95\ud0a4\ub97c \ub9cc\ub4e4\ub4ef\uc774 \ubcc0\uc218\ub77c\ub294\uac78 \uc9c0\uc815\ud574\ub3c4 \ub428\n\n#\uadf8\ub798\ud504 \ud568\uc218 \ub9cc\ub4e4\uae30\ndef plot_bar(data, feature):    #\ub370\uc774\ud130\ub791 \ud53c\uccd0\ub97c \ub123\ub294 \ud568\uc218 #\uc704\uc5d0\ub294 \ubc15\uc2a4\ud50c\ub86f\uc73c\ub85c \uadf8\ub838\uc9c0\ub9cc \uc774\ubc88\uc5d4 \ubc14 \ubaa8\uc591\uc73c\ub85c\n        fig = plt.figure(figsize=(12,3))\n        sns.barplot(x=feature, y='cnt', data=data, palette='Set3', orient='v')\n","8591707e":"#\ud568\uc218\ub97c \ub370\uc774\ud130\uc640 \ubcc0\uc218\ub9cc \ub123\uc73c\uba74 \uc790\ub3d9\uc73c\ub85c \ub098\uc624\uac8c\ub054\nplot_bar(df,'hour')","bf0d2dc7":"plot_bar(df, 'dayofweek')","6fe9931d":"plot_bar(df, 'year')","24f89171":"plot_bar(df, 'month')","56b2789b":"#\uadf8\ub798\ud504\ub97c \ud1b5\ud574\uc11c \uadf8\ub798\ud504\ub97c \ud0d0\uc0c9\ud574 \ubd24\uace0\n#\uc544\uc6c3\ub77c\uc774\uc5b4\ub97c \uc81c\uac70\ud558\uace0 \uce74\ud14c\uace0\ub9ac\ud615\ubcc0\uc218\ub85c \ubc14\uafd4\uc8fc\uace0\n#\ud6c8\ub828\uc6a9\uc774\ub791 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \ubd84\ub9ac\ud558\ub294 \uc804\ucc98\ub9ac \uc791\uc5c5 \uc9c4\ud589\ud574\ubcf4\uc790","5b49e3e4":"#\uc544\uc6c3\ub77c\uc774\uc5b4 \uc81c\uac70 --> \uc544\uc6c3\ub77c\uc774\uc5b4\ub780? \uc774\uc0c1\uce58 --> \ubaa8\ub4e0 \ub370\uc774\ud130\uc5d4 \uc7a1\uc74c\uc774\ub780\uac8c \uc788\uc74c --> \ubaa8\ud615 \ub9cc\ub4e4\uae30 \uc804\uc5d0 \uc544\uc6c3\ub77c\uc774\uc5b4 \uc81c\uac70 \ud544\uc218\n#\uc544\uc6c3\ub77c\uc774\uc5b4 \uc81c\uac70 \ubcc0\uc218 \uc0dd\uc131\ndef is_outlier(s):\n    lower_limit = s.mean() - (s.std()*3)    #s\uc758 \ud3c9\uade0 \uadf8\ub9ac\uace0 s\uc758 std \ud45c\uc900\ud3b8\ucc28\uc758 3\ubc30\ub9cc\ud07c\uc744 \ube80 \uac12\uc744 = lower_limit\n    upper_limit = s.mean() + (s.std()*3)    #s\uc758 \ud3c9\uade0\uc5d0 s\uc758 std \ud45c\uc900\ud3b8\ucc28\uc758 3\ubc30\ub9cc\ud07c\uc744 \ub354\ud55c\ub9cc\ud07c = upper_limit\n    return ~s.between(lower_limit, upper_limit)    #lower \uc640 upper\uc640 \uc0ac\uc774\uac12\ub97c \ub3cc\ub824\uc918\n\n#\uc544\uc6c3\ub77c\uc774\uc5b4 \uc81c\uac70\ubc95\uc740 \uc5ec\ub7ec\uac00\uc9c0\uc784\n#\uc2dc\uadf8\ub9c8 \uc81c\uac70, \uc544\uc774\ud050\uc54c, \ub514\ube44\uc2a4\uce94\n#\uac00\uc7a5 \uc190\uc27d\uac8c \ud560\uc218\uc788\ub294 \ubc29\ubc95\uc740 \ubc15\uc2a4\ud50c\ub7ab\uc744 \uc774\uc6a9\ud55c \uc544\uc774\ud050\uc54c\uacfc \uc2dc\uadf8\ub9c8 \uc81c\uac70\n#\uc774 \uac15\uc758\uc5d0\uc11c\ub294 \uc2dc\uadf8\ub9c8 \ubc29\ubc95\uc744 \uc0ac\uc6a9!\n\n#\uc2dc\uadf8\ub9c8 \uc774\uc0c1\uce58 \uc81c\uac70 -->\uc591 \uadf9\ub2e8\uc5d0 \uc788\ub294 \uac12\uc744 \uc774\uc0c1\uce58\ub85c \ubcf4\uace0 \uc81c\uac70\ub97c \ud55c\ub2e4  \n#\uc544\uc774\ud050\uc54c \uc774\uc0c1\uce58 \uc81c\uac70 -->\ubc15\uc2a4\ud50c\ub78f\uc5d0\uc11c \ubc97\uc5b4\ub09c \uc0c1\ud55c\uac12 \ud558\ud55c\uac12\uc744 \ub2e4 \uc774\uc0c1\uce58\ub85c \ud310\ub2e8\ud558\uace0 \uc81c\uac70\ud568","2ed4812f":"#\ud568\uc218 \uc801\uc6a9\ud558\uae30\ndf_out = df[~df.groupby('hour')['cnt'].apply(is_outlier)]    #\uad6c\ub8f9\ubc14\uc774 --> \uc774\uc0c1\uce58\ub97c \uc77c\uad04\uc801\uc73c\ub85c \uc81c\uac70\ud558\uc9c0 \uc54a\uace0 \uc2dc\uac04\ubcc4\ub85c \uc790\uc804\uac70 \uc774\uc6a9\uac1d\uc744 \uac10\uc548\ud574\uc11c \uc81c\uac70\ud568\n\n#\ud568\uc218 \ube44\uad50\ud558\uae30\nprint('\uc774\uc0c1\uce58 \uc81c\uac70 \uc804:',df.shape)    #shpe\ud568\uc218 = \ub370\uc774\ud130\uc758 \uad6c\uc870\ub97c \ubcf4\ub294 \ud568\uc218 --> \ud589\uc5f4\uc744 \ubd04\nprint('\uc774\uc0c1\uce58 \uc81c\uac70 \ud6c4:', df_out.shape)    ","db20f9e8":"!pip install keras_bert","48eca4f7":"# \ub370\uc774\ud130 \uc804\ucc98\ub9ac","e4dc2e2c":"# \uadf8\ub798\ud504\ub97c \ud1b5\ud55c \uae30\ucd08 \ub370\uc774\ud130 \ubd84\uc11d","af678a37":"# **\ub370\uc774\ud130 \uc804\ucc98\ub9ac\ud558\uae30**","8b217afb":"# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30"}}