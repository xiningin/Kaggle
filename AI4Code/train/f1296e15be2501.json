{"cell_type":{"3e5cda6e":"code","dfa0e301":"code","d998c3b1":"code","d2f3930f":"code","4c9a3858":"code","9b2a6057":"code","409b6123":"code","a896f776":"code","84b70f21":"code","2c5c7666":"code","798a0141":"code","7aa81956":"code","689ef084":"code","d802a646":"code","2d130205":"code","81d839a5":"code","51da3fbd":"code","6af84acf":"markdown","61d2b35a":"markdown","adc95a19":"markdown","df9049fc":"markdown","8bb338f0":"markdown"},"source":{"3e5cda6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dfa0e301":"df = pd.read_csv(\"..\/input\/body-fat-prediction-dataset\/bodyfat.csv\")\n\ndf.head()","d998c3b1":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as XGB","d2f3930f":"data = df.copy()\ndata['Weight'] = data['Weight'] * 0.45\ndata['Height'] = data['Height'] * 2.54 \nfeatures = list(data.columns)\nsns.pairplot(data)","4c9a3858":"correlation = df[features].corr(method='spearman')\nplt.figure(figsize=(15,10))\nsns.heatmap(correlation, annot=True, vmin=-1, vmax=1)\nplt.show()\n","9b2a6057":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","409b6123":"X = data\ny = df['BodyFat']","a896f776":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\nlogs = []\nregr = LinearRegression()\nregr.fit(X_train, y_train)\ny_pred = regr.predict(X_test)\nscore = regr.score(X_test, y_test)\nrmse = mean_squared_error(y_test, y_pred, squared=False)\nprint(f\"Score --> {score}\")\nprint(f\"RMSE --> {rmse}\")\n\nlog = {\"name\": \"linear_regression\", \"score\": score, \"rmse\": rmse}\nlogs.append(log)","84b70f21":"ss= StandardScaler()\nscaled_train= ss.fit_transform(X_train)\nscaled_test = ss.fit_transform(X_test)\nfrom sklearn.neighbors import KNeighborsRegressor\nknn= KNeighborsRegressor()\nknn.fit(scaled_train,y_train)\nprint(knn.score(scaled_test,y_test))\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()\nrf.fit(scaled_train, y_train)\nprint(rf.score(scaled_test,y_test))\nfrom sklearn.tree import DecisionTreeRegressor\ndtc = DecisionTreeRegressor()\ndtc.fit(scaled_train,y_train)\nprint(dtc.score(scaled_test, y_test))","2c5c7666":"from lightgbm import LGBMRegressor\nlgbmr= LGBMRegressor()\nevals = [(scaled_test, y_test)]\nlgbmr.fit(scaled_train, y_train)\nlgbmr.score(scaled_test,y_test)\nfrom lightgbm import LGBMRegressor\nlgbmr= LGBMRegressor()\nevals = [(scaled_test, y_test)]\nlgbmr.fit(scaled_train, y_train,early_stopping_rounds=100, eval_metric='logloss', verbose=True, eval_set=evals)\n","798a0141":"preds = lgbmr.predict(scaled_test)\npreds","7aa81956":"from sklearn.model_selection import cross_validate\ncross_val = cross_validate(estimator=lgbmr,\n                          X=X,y=y)\n\nprint(\"avg fit time {}, std :{}\".format(cross_val['fit_time'].mean(), cross_val['fit_time'].std()))\nprint(\"avg score_time {}, std :{}\".format(cross_val['score_time'].mean(), cross_val['score_time'].std()))\nprint(\"avg test_score {}, std :{}\".format(cross_val['test_score'].mean(), cross_val['test_score'].std()))\n\nfrom lightgbm import plot_importance, plot_metric, plot_tree\nimport graphviz\nplot_metric(lgbmr);\nplot_importance(lgbmr,figsize=(12,10));\n","689ef084":"lasso_regr = Lasso(alpha=0.5)\nlasso_regr.fit(X_train, y_train)\ncv_score = cross_val_score(lasso_regr, X_train, y_train, cv=10)\nprint(f\"CV Score --> {np.mean(cv_score)}\")\ny_pred = lasso_regr.predict(X_test)\nprint(f\"Score --> {lasso_regr.score(X_test, y_test)}\")\nrmse = mean_squared_error(y_test, y_pred, squared=False)\nprint(f\"RMSE --> {rmse}\")\n\nlog = {\"name\": \"lasso\", \"score\": np.mean(cv_score), \"rmse\": rmse}\nlogs.append(log)","d802a646":"ridge_regr = Ridge(alpha=0.5)\nridge_regr.fit(X_train, y_train)\ncv_score = cross_val_score(ridge_regr, X_train, y_train, cv=10)\nprint(f\"CV Score --> {np.mean(cv_score)}\")\ny_pred = ridge_regr.predict(X_test)\nprint(f\"Score --> {ridge_regr.score(X_test, y_test)}\")\nrmse = mean_squared_error(y_test, y_pred, squared=False)\nprint(f\"RMSE --> {rmse}\")\n\nlog = {\"name\": \"ridge\", \"score\": np.mean(cv_score), \"rmse\": rmse}\nlogs.append(log)","2d130205":"xgb_regr = XGB.XGBRegressor(learning_rate = 0.01, n_estimators=1000)\nxgb_regr.fit(X_train, y_train)\ncv_score = cross_val_score(xgb_regr, X_train, y_train, cv=10)\nprint(f\"CV Score --> {np.mean(cv_score)}\")\ny_pred = regr.predict(X_test)\nprint(f\"Score --> {xgb_regr.score(X_test, y_test)}\")\nrmse = mean_squared_error(y_test, y_pred, squared=False)\nprint(f\"RMSE --> {rmse}\")\n\nlog = {\"name\": \"XGBoost\", \"score\": np.mean(cv_score), \"rmse\": rmse}\nlogs.append(log)","81d839a5":"logs","51da3fbd":"x = []\ny = []\nz = []\nfor log in logs:\n    x.append(log['name'])\n    y.append(log['score'])\n    z.append(log['rmse'])\n    \n# sns.barplot(x,y)\n# sns.barplot(x,z)\n\nplt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.barplot(x,y)\nplt.title(\"Models and their accuracy\")\n\nplt.subplot(2,2,2)\nsns.barplot(x,z)\nplt.title(\"Models and their rmse\")\n\nplt.show()","6af84acf":"**Importing Necessary Libraries**","61d2b35a":"> **********lasso ridge xgboost **","adc95a19":"The percentage of body fat for an individual can be estimated once body density has been determined. Folks (e.g. Siri (1956)) assume that the body consists\nof two components - lean body tissue and fat tissue. Letting:\n\nD = Body Density (gm\/cm^3)\nA = proportion of lean body tissue\nB = proportion of fat tissue (A+B=1)\na = density of lean body tissue (gm\/cm^3)\nb = density of fat tissue (gm\/cm^3)\nwe have:\n\nD = 1\/[(A\/a) + (B\/b)]\n\nsolving for B we find:\n\nB = (1\/D)*[ab\/(a-b)] - [b\/(a-b)].\n\nUsing the estimates a=1.10 gm\/cm^3 and b=0.90 gm\/cm^3 (see Katch and McArdle (1977), p. 111 or Wilmore (1976), p. 123) we come up with \"Siri's equation\":\n\nPercentage of Body Fat (i.e. 100*B) = 495\/D - 450.\n\nVolume, and hence body density, can be accurately measured a variety of ways. The technique of underwater weighing \"computes body volume as the difference between body weight measured in air and weight measured during water submersion. In other words, body volume is equal to the loss of weight in\nwater with the appropriate temperature correction for the water's density\" (Katch and McArdle (1977), p. 113). Using this technique,\n\nBody Density = WA\/[(WA-WW)\/c.f. - LV]\n\nwhere:\n\nWA = Weight in air (kg)\nWW = Weight in water (kg)\nc.f. = Water correction factor (=1 at 39.2 deg F as one-gram of water occupies exactly one cm^3 at this temperature, =.997 at 76-78 deg F)\nLV = Residual Lung Volume (liters).\n\nHere we predict the body fat with accuracy level 97%","df9049fc":"**KNEIGHBORS,RANDOM FOREST,DECISION TREE**","8bb338f0":"**import dataset**"}}