{"cell_type":{"e5a517a0":"code","26a654fd":"code","cfb0d5ed":"code","6347e99e":"code","7fa4f5de":"code","475aa4bc":"code","eaf2791b":"code","21abf35a":"code","2a2c0c1b":"markdown","ac6c88e5":"markdown","71602ad8":"markdown","1fea13f5":"markdown","b51b50f1":"markdown","b5b22868":"markdown"},"source":{"e5a517a0":"_ = !pip install fuggle scikit-learn==0.24.2","26a654fd":"from fuggle import setup\nsetup()","cfb0d5ed":"import warnings \nwarnings.simplefilter(\"ignore\")","6347e99e":"_ = !pip install greykite","7fa4f5de":"import numpy as np\nimport pandas as pd\nimport datetime\n\nfrom typing import Dict, Any, Tuple\nfrom copy import deepcopy\n\n# greykite configs\nfrom greykite.algo.changepoint.adalasso.changepoint_detector import ChangepointDetector\nfrom greykite.algo.forecast.silverkite.constants.silverkite_holiday import SilverkiteHoliday\nfrom greykite.algo.forecast.silverkite.constants.silverkite_seasonality import SilverkiteSeasonalityEnum\nfrom greykite.algo.forecast.silverkite.forecast_simple_silverkite_helper import cols_interact\nfrom greykite.common import constants as cst\nfrom greykite.common.features.timeseries_features import build_time_features_df\nfrom greykite.common.features.timeseries_features import convert_date_to_continuous_time\nfrom greykite.framework.benchmark.data_loader_ts import DataLoaderTS\nfrom greykite.framework.templates.autogen.forecast_config import EvaluationPeriodParam\nfrom greykite.framework.templates.autogen.forecast_config import ForecastConfig\nfrom greykite.framework.templates.autogen.forecast_config import MetadataParam\nfrom greykite.framework.templates.autogen.forecast_config import ModelComponentsParam\nfrom greykite.framework.templates.forecaster import Forecaster\nfrom greykite.framework.templates.model_templates import ModelTemplateEnum\nfrom greykite.framework.utils.result_summary import summarize_grid_search_results","475aa4bc":"def objective(**gkparams) -> Tuple[float, Dict[str, Any]]:\n    dl = DataLoaderTS()\n    ts = dl.load_peyton_manning_ts()\n    df_full = ts.make_future_dataframe(periods=365)\n    df_features = build_time_features_df(\n     dt=df_full[\"ts\"],\n     conti_year_origin=convert_date_to_continuous_time(df_full[\"ts\"][0])\n    )\n    is_football_season = (df_features[\"woy\"] <= 6) | (df_features[\"woy\"] >= 36)\n    df_full[\"is_football_season\"] = is_football_season.astype(int).tolist()\n    df_full.reset_index(drop=True, inplace=True)\n    \n    anomaly_df = pd.DataFrame({\n        # start and end date are inclusive\n        # each row is an anomaly interval\n        cst.START_DATE_COL: [\"2010-06-05\", \"2012-03-01\"],  # inclusive\n        cst.END_DATE_COL: [\"2010-06-20\", \"2012-03-20\"],  # inclusive\n        cst.ADJUSTMENT_DELTA_COL: [np.nan, np.nan],  # mask as NA\n    })\n\n    # Creates anomaly_info dictionary.\n    # This will be fed into the template.\n    anomaly_info = {\n        \"value_col\": \"y\",\n        \"anomaly_df\": anomaly_df,\n        \"adjustment_delta_col\": cst.ADJUSTMENT_DELTA_COL,\n    }\n\n    # Specifies dataset information\n    metadata = MetadataParam(\n        time_col=\"ts\",  # name of the time column\n        value_col=\"y\",  # name of the value column\n        freq=\"D\",  # \"H\" for hourly, \"D\" for daily, \"W\" for weekly, etc.\n        anomaly_info=anomaly_info,  # this is the anomaly information we defined above,\n        train_end_date=datetime.datetime(2016, 1, 20)\n    )\n\n    # Defines the cross-validation config\n    evaluation_period = EvaluationPeriodParam(\n        test_horizon=365,             # leaves 365 days as testing data\n        cv_horizon=365,               # each cv test size is 365 days (same as forecast horizon)\n        cv_max_splits=3,              # 3 folds cv\n        cv_min_train_periods=365 * 4  # uses at least 4 years for training because we have 8 years data\n    )\n\n    model_components = ModelComponentsParam(**gkparams)\n    \n    try:\n    \n        forecaster = Forecaster()\n        # Runs the forecast\n        run = forecaster.run_forecast_config(\n         df=df_full,\n         config=ForecastConfig(\n             model_template=ModelTemplateEnum.SILVERKITE.name,\n             model_components_param=model_components,\n             forecast_horizon=365,  # forecasts 365 steps ahead\n             coverage=0.95,  # 95% prediction intervals\n             metadata_param=metadata,\n             evaluation_period_param=evaluation_period\n         )\n        )\n\n        result = summarize_grid_search_results(\n            grid_search=run.grid_search,\n            column_order = [\"mean_test\"]\n        ).to_dict(\"records\")[0]\n\n        return result[\"mean_test_MAPE\"], result\n    except:\n        return 10000, {}","eaf2791b":"from tune import Space, Grid, Rand, RandInt, Choice, TransitionChoice, FuncParam\n\nweekly_seasonality = RandInt(0,8)\nyearly_seasonality = RandInt(0,50)\n\nspace = Space(\n    seasonality = {\n        \"yearly_seasonality\": yearly_seasonality,\n        \"quarterly_seasonality\": RandInt(0,10),\n        \"monthly_seasonality\": RandInt(0,10),\n        \"weekly_seasonality\": weekly_seasonality,\n    },\n    changepoints = {\n        \"changepoints_dict\": dict(\n            method=\"auto\",\n            yearly_seasonality_order=yearly_seasonality,\n            regularization_strength=Rand(0.6,0.8),\n            resample_freq=TransitionChoice(*[f\"{x}D\" for x in range(1,32)]),\n            potential_changepoint_n=RandInt(10,200),\n            no_changepoint_distance_from_end=TransitionChoice(*[f\"{x}D\" for x in range(91,365)])\n        )\n    },\n    events = {\n        \"holidays_to_model_separately\": SilverkiteHoliday.ALL_HOLIDAYS_IN_COUNTRIES,\n        \"holiday_lookup_countries\": [\"UnitedStates\"],\n        \"holiday_pre_num_days\": Grid(0,1,2,3,4,5),\n        \"holiday_post_num_days\": Grid(0,1,2,3,4,5),\n        \"daily_event_df_dict\": {\n            \"superbowl\": pd.DataFrame({\n                \"date\": [\"2008-02-03\", \"2009-02-01\", \"2010-02-07\", \"2011-02-06\",\n                      \"2012-02-05\", \"2013-02-03\", \"2014-02-02\", \"2015-02-01\", \"2016-02-07\"],\n            \"event_name\": [\"event\"] * 9\n        })\n     }\n    },\n    custom = {\n        \"fit_algorithm_dict\": Grid(\n            {\"fit_algorithm\": \"ridge\"},\n            {\"fit_algorithm\": \"linear\", \"fit_algorithm_params\": dict(missing=\"drop\")}\n        ),\n        \"extra_pred_cols\": FuncParam(cols_interact,\n            static_col=\"is_football_season\",\n            fs_name=SilverkiteSeasonalityEnum.WEEKLY_SEASONALITY.value.name,\n            fs_order=weekly_seasonality,\n            fs_seas_name=SilverkiteSeasonalityEnum.WEEKLY_SEASONALITY.value.seas_names\n        )\n    },\n    regressors = {\n        \"regressor_cols\": [\"is_football_season\"]\n    },\n    uncertainty={\n        \"uncertainty_dict\": \"auto\",\n    },\n)","21abf35a":"%%time\n%matplotlib inline\nfrom tune import small_improvement, n_updates, no_update_period\nfrom tune import suggest_for_noniterative_objective\nfrom tune_optuna import OptunaLocalOptimizer\n\nresult = suggest_for_noniterative_objective(\n    objective,\n    space,\n    monitor='ts',\n    execution_engine=\"dask\",\n    execution_engine_conf={\"callback\":True},\n    stopper=(n_updates(5) & small_improvement(0.001,1)) | no_update_period(\"4min\"),\n    local_optimizer = OptunaLocalOptimizer(max_iter=20),\n    top_n=5,\n)","2a2c0c1b":"### Install Tune","ac6c88e5":"### Define a hybrid search space ","71602ad8":"### Define Objective Function ","1fea13f5":"### Install GreyKite","b51b50f1":"### Inport basic libraries","b5b22868":"# Tune Demo: 01. General ML Objective Tuning (using GreyKite as an Example)\n\nIn this notebook, we will demostrate the hyperparameter tuning on a general machine learning objective function on a Hybrid Search Space (Random + Grid + Bayesian). In particular, we will use the Fugue-[Tune](https:\/\/github.com\/fugue-project\/tune) library to tune the hyperparameters of a forcesting model.\n\nIf you are not familar with how to defind a Search Space in Tune, here is a nice and short [tutorial](https:\/\/www.kaggle.com\/goodwanghan\/tune-tutorials-01-seach-space\/notebook)."}}