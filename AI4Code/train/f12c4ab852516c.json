{"cell_type":{"432da2fe":"code","2fc44a2b":"code","7e29550b":"code","f33113f2":"code","79520f11":"code","567ce310":"code","60783366":"code","d7089dc7":"code","3e0420d8":"code","af83282c":"code","352a1260":"code","fe38bea9":"code","b2e886ac":"code","5f0bdf9b":"code","0500549a":"code","25bf525f":"code","b667b37f":"code","08a21626":"code","67a10cd5":"code","304c9c3c":"code","e61aa54c":"code","d7d98b25":"code","09026ea1":"code","8086dc66":"code","a837e5da":"code","e2215c6f":"code","0f06e5a5":"code","47ad522d":"code","7dfd458d":"code","644d9979":"code","6f3f0737":"code","420d7122":"code","b9491df1":"code","e0631aa2":"code","223579f0":"code","1d4ed95e":"code","94b7890e":"code","5f0e060b":"code","bd98414b":"code","b7655fc0":"code","1c259c9e":"code","9615eefa":"code","0538b7b0":"code","1bb0c18c":"code","37362a36":"code","3feb980e":"code","3058f8ec":"code","14d5b176":"code","3e1d78b2":"code","fe93557f":"code","102e602b":"markdown","35ff6c52":"markdown","f021020e":"markdown","4c9fbbd7":"markdown","c24ab5a1":"markdown","7729eec0":"markdown","8cc54b40":"markdown","91c21ebd":"markdown","87d18d46":"markdown","99316f3b":"markdown","59702e26":"markdown","c65cad86":"markdown","7e432b44":"markdown","f6b83b4b":"markdown","959eb39a":"markdown","b7450f19":"markdown","9c7bd506":"markdown","143a912f":"markdown","121dac30":"markdown","4f21da64":"markdown","2a46289d":"markdown","62d60cb8":"markdown","18f571cf":"markdown","165eb1e5":"markdown","360fae06":"markdown","2f1877cf":"markdown","42b113fa":"markdown","235c1f78":"markdown","5fb03309":"markdown","daee4fdc":"markdown","5c877038":"markdown","769dcad3":"markdown","22edd570":"markdown","7a299381":"markdown","988ac8a4":"markdown","b3f45e6c":"markdown","d4f5115a":"markdown","1cfb46fb":"markdown","1aac7db1":"markdown","98bdceed":"markdown","b7e950eb":"markdown","d880690c":"markdown","0d10e0be":"markdown","b4fcf8a3":"markdown","c8ac4c7a":"markdown","f307a79d":"markdown","05e6b5b7":"markdown","1b41c9dc":"markdown","ad280b2e":"markdown","1ab45897":"markdown","53e29d53":"markdown","0ab9ead5":"markdown","5cad61e6":"markdown","1256653e":"markdown","df0bd51a":"markdown"},"source":{"432da2fe":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.cluster import KMeans,DBSCAN","2fc44a2b":"def ImageStyle(Axes): \n    \"\"\"\n    Parameters\n    ----------\n    Axes : Matplotlib axes object\n        Applies a general style to the matplotlib object\n\n    Returns\n    -------\n    None.\n    \"\"\"    \n    Axes.spines['top'].set_visible(False)\n    Axes.spines['bottom'].set_visible(False)\n    Axes.spines['left'].set_visible(False)\n    Axes.spines['right'].set_visible(False)\n    Axes.set_xticks([])\n    Axes.set_yticks([])\n\ndef PlotStyle(Axes): \n    \"\"\"\n    Applies a general style to a plot \n    Parameters\n    ----------\n    Axes : Matplotlib axes object\n        Applies a general style to the matplotlib object\n\n    Returns\n    -------\n    None.\n    \"\"\"    \n    Axes.spines['top'].set_visible(False)\n    Axes.spines['bottom'].set_visible(True)\n    Axes.spines['left'].set_visible(True)\n    Axes.spines['right'].set_visible(False)\n    Axes.xaxis.set_tick_params(labelsize=13)\n    Axes.yaxis.set_tick_params(labelsize=13)\n\ndef GetGridShape(TotalNumberOfElements):\n    \"\"\"\n    Parameters\n    ----------\n     TotalNumberOfElements : int\n        Total number of elements in the plot.\n\n    Returns\n    -------\n    nrows : int\n        number of rows in the plot.\n    ncolumns : int\n        number of columns in the plot.\n\n    \"\"\"\n    numberOfUnique=TotalNumberOfElements\n    squaredUnique=int(np.sqrt(numberOfUnique))\n    \n    if squaredUnique*squaredUnique==numberOfUnique:\n        nrows,ncolumns=squaredUnique,squaredUnique\n    elif squaredUnique*(squaredUnique+1)<numberOfUnique:\n        nrows,ncolumns=squaredUnique+1,squaredUnique+1\n    else:\n        nrows,ncolumns=squaredUnique,squaredUnique+1\n    \n    return nrows,ncolumns\n","7e29550b":"def GetSampleLoc(Sample,boundaries):\n    cLoc=0\n    for k in range(len(boundaries)-1):\n        if Sample>=boundaries[k] and Sample<boundaries[k+1]:\n            cLoc=k\n            break\n        \n    return cLoc\n\ndef GetEqualizedIndex(Data,bins=100,maxCount=100):\n  \n    cMin,cMax=np.min(Data),np.max(Data)\n    boundaries=np.linspace(cMin,cMax,num=bins+1)\n  \n    SamplesCount=np.zeros(bins)\n    indexContainer = []\n  \n    index=[k for k in range(len(Data))]\n    np.random.shuffle(index)\n  \n    for val in index:\n        dataPoint = Data.iloc[val]\n        cLoc=GetSampleLoc(dataPoint,boundaries)\n      \n        if SamplesCount[cLoc]<=maxCount:\n            indexContainer.append(val)\n            SamplesCount[cLoc]=SamplesCount[cLoc]+1\n      \n    return indexContainer","f33113f2":"Data = pd.read_csv(r'..\/input\/covid19-metadata\/SARSCov2Metadata.csv')\nKmersData = pd.read_csv(r'..\/input\/covid19-sequence-kmer-frequencies\/KmerData.csv')\nData.fillna(0,inplace=True)","79520f11":"KmersData['id'] = [val[0:-2] for val in KmersData['id']]\nKmersData = KmersData.set_index('id')\n\ngeoUnique = np.array([str(val) for val in set(Data['SimplifiedGEO'])])\ngeoToval = dict([(val,sal) for val,sal in zip(geoUnique,np.linspace(0,1,num=geoUnique.size)) ])\n\nData['geo_encoding'] = [geoToval[str(val)] for val in Data['SimplifiedGEO']]\n\ndef GetSimplifiedStrain(pangoLineage):\n    \n    if pangoLineage[0]=='A' or pangoLineage[0]=='B':\n        return pangoLineage\n    else:\n        return 'Non'\n\ndef GetBinaryStrain(pangoLineage):\n    \n    if pangoLineage[0]=='A' or pangoLineage[0]=='B':\n        return pangoLineage[0]\n    else:\n        return 'Non'\n\nuniquePango = [str(val) for val in set(Data['Pangolin'])]\nuniqueSimplified = set([GetSimplifiedStrain(val) for val in uniquePango])\n\nNpango = len(uniquePango)\nNsimplifiedPango = len(uniqueSimplified)\n\npangoToval = dict([(val,sal) for val,sal in zip(uniquePango,np.linspace(0,1,num=Npango)) ])\nsimpToVal = dict([(val,sal) for val,sal in zip(uniqueSimplified,np.linspace(0,1,num=NsimplifiedPango)) ])\n\nData['pango_encoding'] = [pangoToval[str(val)] for val in Data['Pangolin']]\nData['simpPango_encoding'] = [simpToVal[GetSimplifiedStrain(str(val))] for val in Data['Pangolin']]\n\nbinaryToval = dict([('A',0),('B',0.5),('Non',1)])\n\nData['pango_binary'] = [GetBinaryStrain(str(val)) for val in Data['Pangolin']]\nData['binary_encoding'] = [binaryToval[str(val)] for val in Data['pango_binary']]\n","567ce310":"plt.figure(figsize=(16,8))\nplt.scatter(Data['PCA_A'],Data['PCA_B'],c='blue',alpha=0.05,label='Katya')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.xlabel('Principal Component A')\nplt.ylabel('Principal Component B')\nPlotStyle(plt.gca()) ","60783366":"plt.figure(figsize=(16,8))\nplt.scatter(Data['VAE_A'],Data['VAE_B'],c='blue',alpha=0.05,label='Nina')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.xlabel('Latent Dimension A')\nplt.ylabel('Latent Dimension B')\nPlotStyle(plt.gca()) ","d7089dc7":"plt.figure(figsize=(16,8))\nplt.scatter(Data['ConvVAE_A'],Data['ConvVAE_B'],c='blue',alpha=0.05,label='Masha')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.xlabel('Latent Dimension A')\nplt.ylabel('Latent Dimension B')\nPlotStyle(plt.gca()) ","3e0420d8":"plt.figure(figsize=(16,8))\nplt.scatter(Data['PCA_A'],Data['PCA_B'],c=Data['geo_encoding'],alpha=0.05,cmap='viridis',label='Geographical encoding')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Katya',loc='right')\nplt.xlabel('Principal Component A')\nplt.ylabel('Principal Component B')\nPlotStyle(plt.gca()) ","af83282c":"plt.figure(figsize=(16,8))\nplt.scatter(Data['VAE_A'],Data['VAE_B'],c=Data['geo_encoding'],alpha=0.05,cmap='viridis',label='Geographical encoding')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Nina',loc='right')\nplt.xlabel('Latent Dimension A')\nplt.ylabel('Latent Dimension B')\nPlotStyle(plt.gca()) \n","352a1260":"plt.figure(figsize=(16,8))\nplt.scatter(Data['ConvVAE_A'],Data['ConvVAE_B'],c=Data['geo_encoding'],alpha=0.05,cmap='viridis',label='Geographical encoding')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Masha',loc='right')\nplt.xlabel('Latent Dimension A')\nplt.ylabel('Latent Dimension B')\nPlotStyle(plt.gca()) ","fe38bea9":"plt.figure(figsize=(16,8))\nplt.scatter(Data['PCA_A'],Data['PCA_B'],c=Data['week'],alpha=0.05,cmap='viridis',label='Time encoding')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Katya',loc='right')\nplt.xlabel('Principal Component A')\nplt.ylabel('Principal Component B')\nPlotStyle(plt.gca()) ","b2e886ac":"plt.figure(figsize=(16,8))\nplt.scatter(Data['VAE_A'],Data['VAE_B'],c=Data['week'],alpha=0.05,cmap='viridis',label='Time encoding')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Nina',loc='right')\nplt.xlabel('Latent Dimension A')\nplt.ylabel('Latent Dimension B')\nPlotStyle(plt.gca()) ","5f0bdf9b":"plt.figure(figsize=(16,8))\nplt.scatter(Data['ConvVAE_A'],Data['ConvVAE_B'],c=Data['week'],alpha=0.05,cmap='viridis',label='Time encoding')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Masha',loc='right')\nplt.xlabel('Latent Dimension A')\nplt.ylabel('Latent Dimension B')\nPlotStyle(plt.gca()) ","0500549a":"PCAkmeans = KMeans(n_clusters=2, random_state=0).fit(Data[['PCA_A','PCA_B']])\nData['PCA_Labels'] = PCAkmeans.labels_\n\nlocalColors = ['blue','red']\n\nplt.figure(figsize=(14,10))\ngs = plt.GridSpec(4,4)\n\nax1 = plt.subplot(gs[0:2,0:4])\nfor k in range(2):\n    ax1.scatter(Data[Data['PCA_Labels']==k]['PCA_A'],Data[Data['PCA_Labels']==k]['PCA_B'],c=localColors[k],alpha=0.05)\n\nax1.set_title('Katya',loc='right')\nax1.set_xlabel('Principal Component A')\nax1.set_ylabel('Principal Component B')\n\nax3 = plt.subplot(gs[2:4,0])\nax3.hist(Data[Data['PCA_Labels']==0]['month'],bins=10,color='red')\nax3.set_xlabel('Normalized Time (Month)')\n\nax4 = plt.subplot(gs[2:4,1])\nax4.hist(Data[Data['PCA_Labels']==1]['month'],bins=10,color='blue')\nax4.set_xlabel('Normalized Time (Month)')\n\nax5 = plt.subplot(gs[2:4,2])\nax5.hist(Data[Data['PCA_Labels']==0]['week'],bins=20,color='red')\nax5.set_xlabel('Normalized Time (week)')\n\nax6 = plt.subplot(gs[2:4,3])\nax6.hist(Data[Data['PCA_Labels']==1]['week'],bins=20,color='blue')\nax6.set_xlabel('Normalized Time (week)')\n\n[PlotStyle(val) for val in [ax1,ax3,ax4,ax5,ax6]]\nplt.tight_layout()","25bf525f":"VAEkmeans =  DBSCAN(eps=0.045, min_samples=200,algorithm='ball_tree').fit(Data[['VAE_A','VAE_B']])\nData['VAE_Labels'] = VAEkmeans.labels_\n\nclustersLabels,counts = np.unique(VAEkmeans.labels_,return_counts=True)\nclabels = []\n\nfor val,sal in zip(clustersLabels,counts):\n    if sal>1000 and val!=-1:\n        clabels.append(val)\n\nlocalColors = [plt.cm.seismic_r(val) for val in np.linspace(0,1,num=len(clabels))]\n\nplt.figure(figsize=(14,10))\ngs = plt.GridSpec(4,4)\n\nax1 = plt.subplot(gs[0:2,0:4])\n\nfor k in clabels:\n    ax1.scatter(Data[Data['VAE_Labels']==k]['VAE_A'],Data[Data['VAE_Labels']==k]['VAE_B'],c=localColors[k],alpha=0.0125)\n\nax1.scatter(Data[Data['VAE_Labels']==-1]['VAE_A'],Data[Data['VAE_Labels']==-1]['VAE_B'],c='black',alpha=0.0125)\nax1.set_title('Nina',loc='right')\nax1.set_xlabel('Latent Dimension A')\nax1.set_ylabel('Latent Dimension B')\n\nax2 = plt.subplot(gs[2,0])\nax2.hist(Data[Data['VAE_Labels']==clabels[0]]['month'],bins=20,color=localColors[0])\nax2.set_xlabel('Normalized Time (Month)')\n\nax3 = plt.subplot(gs[2,1])\nax3.hist(Data[Data['VAE_Labels']==clabels[1]]['month'],bins=20,color=localColors[1])\nax3.set_xlabel('Normalized Time (Month)')\n\nax4 = plt.subplot(gs[2,2])\nax4.hist(Data[Data['VAE_Labels']==clabels[2]]['month'],bins=20,color=localColors[2])\nax4.set_xlabel('Normalized Time (Month)')\n\nax9 = plt.subplot(gs[2,3])\nax9.hist(Data[Data['VAE_Labels']==clabels[3]]['month'],bins=20,color=localColors[3])\nax9.set_xlabel('Normalized Time (Month)')\n\nax5 = plt.subplot(gs[3,0])\nax5.hist(Data[Data['VAE_Labels']==clabels[0]]['week'],bins=20,color=localColors[0])\nax5.set_xlabel('Normalized Time (week)')\n\nax6 = plt.subplot(gs[3,1])\nax6.hist(Data[Data['VAE_Labels']==clabels[1]]['week'],bins=20,color=localColors[1])\nax6.set_xlabel('Normalized Time (week)')\n\nax7 = plt.subplot(gs[3,2])\nax7.hist(Data[Data['VAE_Labels']==clabels[2]]['week'],bins=20,color=localColors[2])\nax7.set_xlabel('Normalized Time (week)')\n\nax8 = plt.subplot(gs[3,3])\nax8.hist(Data[Data['VAE_Labels']==clabels[3]]['week'],bins=20,color=localColors[3])\nax8.set_xlabel('Normalized Time (week)')\n\n[PlotStyle(val) for val in [ax2,ax1,ax3,ax4,ax5,ax6,ax7,ax8,ax9]]\nplt.tight_layout()","b667b37f":"fig,axes=plt.subplots(4,4,figsize=(15,15),sharex=True,sharey=True)\nfor k in range(4):\n    for j in range(4):    \n        axes[k,j].hist(KmersData['A'].loc[Data[Data['VAE_Labels']==k]['id']],color='red',bins=100,density=True,label='Cluster = '+str(k))\n        axes[k,j].hist(KmersData['A'].loc[Data[Data['VAE_Labels']==j]['id']],color='red',bins=100,alpha=0.5,density=True,label='Cluster = '+str(j))\n        axes[k,j].set_xlim([0.05,0.15])\n        axes[k,j].legend(loc=1)\n        PlotStyle(axes[k,j])\nfig.suptitle('Adenine shift',x=0.9,y=0.9)","08a21626":"fig,axes=plt.subplots(4,4,figsize=(15,15),sharex=True,sharey=True)\nfor k in range(4):\n    for j in range(4):    \n        axes[k,j].hist(KmersData['C'].loc[Data[Data['VAE_Labels']==k]['id']],color='blue',bins=100,density=True,label='Cluster = '+str(k))\n        axes[k,j].hist(KmersData['C'].loc[Data[Data['VAE_Labels']==j]['id']],color='blue',bins=100,alpha=0.5,density=True,label='Cluster = '+str(j))\n        axes[k,j].set_xlim([0.2,0.35])\n        axes[k,j].legend(loc=1)\n        PlotStyle(axes[k,j])\nfig.suptitle('Cytosine shift',x=0.9,y=0.9)","67a10cd5":"fig,axes=plt.subplots(4,4,figsize=(15,15),sharex=True,sharey=True)\nfor k in range(4):\n    for j in range(4):    \n        axes[k,j].hist(KmersData['G'].loc[Data[Data['VAE_Labels']==k]['id']],color='green',bins=100,density=True,label='Cluster = '+str(k))\n        axes[k,j].hist(KmersData['G'].loc[Data[Data['VAE_Labels']==j]['id']],color='green',bins=100,alpha=0.5,density=True,label='Cluster = '+str(j))\n        axes[k,j].set_xlim([0.75,0.85])\n        axes[k,j].legend(loc=1)\n        PlotStyle(axes[k,j])\nfig.suptitle('Guanine shift',x=0.9,y=0.9)","304c9c3c":"fig,axes=plt.subplots(4,4,figsize=(15,15),sharex=True,sharey=True)\nfor k in range(4):\n    for j in range(4):    \n        axes[k,j].hist(KmersData['T'].loc[Data[Data['VAE_Labels']==k]['id']],color='black',bins=100,density=True,label='Cluster = '+str(k))\n        axes[k,j].hist(KmersData['T'].loc[Data[Data['VAE_Labels']==j]['id']],color='black',bins=100,alpha=0.5,density=True,label='Cluster = '+str(j))\n        axes[k,j].set_xlim([0.7,0.8])\n        axes[k,j].legend(loc=1)\n        PlotStyle(axes[k,j])\nfig.suptitle('Thymine\/Uracil shift',x=0.9,y=0.9)","e61aa54c":"ConvVAEkmeans =  DBSCAN(eps=0.020,min_samples=15,algorithm='ball_tree',metric='euclidean',n_jobs=-2).fit(Data[['ConvVAE_A','ConvVAE_B']])\nclustersLabels,counts = np.unique(ConvVAEkmeans.labels_,return_counts=True)\nclabels = []\n\nfor val,sal in zip(clustersLabels,counts):\n    if sal>1000 and val!=-1:\n        clabels.append(val)\n\nlocalColors = [plt.cm.seismic(val) for val in np.linspace(0,1,num=len(clabels))]\nData['ConvVAE_Labels'] = [val if val in clabels else -1 for val in ConvVAEkmeans.labels_]\n\nplt.figure(figsize=(18,10))\n\ngs = plt.GridSpec(2,11)\nax0 = plt.subplot(gs[0,:])\n\nfor k,col in zip(clabels,localColors):\n    ax0.scatter(Data[Data['ConvVAE_Labels']==k]['ConvVAE_A'],Data[Data['ConvVAE_Labels']==k]['ConvVAE_B'],c=col,alpha=0.0125)\n\nax0.scatter(Data[Data['ConvVAE_Labels']==-1]['ConvVAE_A'],Data[Data['ConvVAE_Labels']==-1]['ConvVAE_B'],c='black',alpha=0.0125)\nax0.set_title('Masha',loc='right')\nPlotStyle(ax0)\n\nk=0\nfor clust,colr in zip(clabels,localColors):\n    \n    axes = plt.subplot(gs[1,k])\n    axes.hist(Data[Data['ConvVAE_Labels']==clust]['week'],bins=50,color='blue')\n    PlotStyle(axes)\n    k=k+1\n    \nplt.tight_layout()","d7d98b25":"nrows,ncolumns = GetGridShape(11)\nsubPlotIndexs=[(j,k) for j in range(nrows) for k in range(ncolumns)]","09026ea1":"fig,axes=plt.subplots(nrows,ncolumns,figsize=(15,12),sharex=True)\nfor k,kal in enumerate(clabels):\n    \n    clusterData = Data[Data['ConvVAE_Labels']==kal]\n    low = clusterData[clusterData['week']<0.5]['id']\n    high = clusterData[clusterData['week']>0.5]['id']\n    axes[subPlotIndexs[k]].hist(KmersData['A'].loc[high],color='red',bins=100,density=True,label='Cluster = '+str(kal))\n    axes[subPlotIndexs[k]].hist(KmersData['A'].loc[low],color='red',bins=100,alpha=0.5,density=True,label='Cluster = '+str(kal))\n    axes[subPlotIndexs[k]].set_xlim([0.05,0.15])\n    axes[subPlotIndexs[k]].set_xlabel('Nucleotide content')\n    axes[subPlotIndexs[k]].set_title('Cluster = ' + str(kal))\n    PlotStyle(axes[subPlotIndexs[k]])\nPlotStyle(axes[subPlotIndexs[-1]])\nfig.suptitle('Adenine shift',x=0.9,y=0.9)","8086dc66":"fig,axes=plt.subplots(nrows,ncolumns,figsize=(15,12),sharex=True)\nfor k,kal in enumerate(clabels):\n    \n    clusterData = Data[Data['ConvVAE_Labels']==kal]\n    low = clusterData[clusterData['week']<0.5]['id']\n    high = clusterData[clusterData['week']>0.5]['id']\n    axes[subPlotIndexs[k]].hist(KmersData['C'].loc[high],color='blue',bins=100,density=True,label='Cluster = '+str(kal))\n    axes[subPlotIndexs[k]].hist(KmersData['C'].loc[low],color='blue',bins=100,alpha=0.5,density=True,label='Cluster = '+str(kal))\n    axes[subPlotIndexs[k]].set_xlim([0.2,0.35])\n    axes[subPlotIndexs[k]].set_xlabel('Nucleotide content')\n    axes[subPlotIndexs[k]].set_title('Cluster = ' + str(kal))\n    PlotStyle(axes[subPlotIndexs[k]])\nPlotStyle(axes[subPlotIndexs[-1]])\nfig.suptitle('Cytosine shift',x=0.9,y=0.9)","a837e5da":"fig,axes=plt.subplots(nrows,ncolumns,figsize=(15,12),sharex=True)\nfor k,kal in enumerate(clabels):\n    \n    clusterData = Data[Data['ConvVAE_Labels']==kal]\n    low = clusterData[clusterData['week']<0.5]['id']\n    high = clusterData[clusterData['week']>0.5]['id']\n    axes[subPlotIndexs[k]].hist(KmersData['G'].loc[high],color='green',bins=100,density=True,label='Cluster = '+str(kal))\n    axes[subPlotIndexs[k]].hist(KmersData['G'].loc[low],color='green',bins=100,alpha=0.5,density=True,label='Cluster = '+str(kal))\n    axes[subPlotIndexs[k]].set_xlim([0.75,0.85])\n    axes[subPlotIndexs[k]].set_xlabel('Nucleotide content')\n    axes[subPlotIndexs[k]].set_title('Cluster = ' + str(kal))\n    PlotStyle(axes[subPlotIndexs[k]])\nPlotStyle(axes[subPlotIndexs[-1]])\nfig.suptitle('Guanine shift',x=0.9,y=0.9)","e2215c6f":"fig,axes=plt.subplots(nrows,ncolumns,figsize=(15,12),sharex=True)\nfor k,kal in enumerate(clabels):\n    \n    clusterData = Data[Data['ConvVAE_Labels']==kal]\n    low = clusterData[clusterData['week']<0.5]['id']\n    high = clusterData[clusterData['week']>0.5]['id']\n    axes[subPlotIndexs[k]].hist(KmersData['T'].loc[high],color='black',bins=100,density=True,label='Cluster = '+str(kal))\n    axes[subPlotIndexs[k]].hist(KmersData['T'].loc[low],color='black',bins=100,alpha=0.5,density=True,label='Cluster = '+str(kal))\n    axes[subPlotIndexs[k]].set_xlim([0.7,0.8])\n    axes[subPlotIndexs[k]].set_xlabel('Nucleotide content')\n    axes[subPlotIndexs[k]].set_title('Cluster = ' + str(kal))\n    PlotStyle(axes[subPlotIndexs[k]])\nPlotStyle(axes[subPlotIndexs[-1]])\nfig.suptitle('Thymine\/Uracil shift',x=0.91,y=0.9)","0f06e5a5":"filled_markers = ('o', 'v', '^', '<', '>', '8', 's', 'p', '*', 'h', 'H', 'D', 'd', 'P', 'X')\nmaxAlt = Data[Data['SimplifiedGEO']=='USA']['geo_alt'].max()\nminAlt = Data[Data['SimplifiedGEO']=='USA']['geo_alt'].min()\nboundaries = np.linspace(minAlt,maxAlt,num=12)\ncolorCoding = np.linspace(0,1,num=11)\n\ndef GetElevationCoding(elevation):\n    clr = 0\n    for k in range(len(boundaries)-1):\n        if elevation>boundaries[k] and elevation<boundaries[k+1]:\n            clr = colorCoding[k]\n            break\n        \n    return clr ","47ad522d":"plt.figure(figsize=(15,10))   \nfor k,kal in enumerate(clabels):\n    \n    clusterData = Data[Data['ConvVAE_Labels']==kal]\n    clusterData = clusterData[clusterData['week']<0.5]\n    usData = clusterData[clusterData['SimplifiedGEO']=='USA']\n    elevCoding = [GetElevationCoding(val) for val in usData['geo_alt']]\n    plt.scatter(usData['geo_long'],usData['geo_lat'],marker=filled_markers[k],c=elevCoding)\n\nplt.ylim([24,50])\nplt.xlim([-130,-65])\nplt.title('Geographical Encoding (First Half of the Year)',loc='right')\nImageStyle(plt.gca()) ","7dfd458d":"plt.figure(figsize=(15,10))   \nfor k,kal in enumerate(clabels):\n    \n    clusterData = Data[Data['ConvVAE_Labels']==kal]\n    clusterData = clusterData[clusterData['week']>0.5]\n    usData = clusterData[clusterData['SimplifiedGEO']=='USA']\n    elevCoding = [GetElevationCoding(val) for val in usData['geo_alt']]\n    plt.scatter(usData['geo_long'],usData['geo_lat'],marker=filled_markers[k],c=elevCoding)\n\nplt.ylim([24,50])\nplt.xlim([-130,-65])\nplt.title('Geographical Encoding (Second Half of the Year)',loc='right')\nImageStyle(plt.gca()) ","644d9979":"plt.figure(figsize=(16,8))\nplt.scatter(Data['PCA_A'],Data['PCA_B'],c=Data['simpPango_encoding'],alpha=0.05,cmap='viridis',label='Variant Encoding ')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Katya',loc='right')\nPlotStyle(plt.gca()) ","6f3f0737":"plt.figure(figsize=(16,8))\nplt.scatter(Data['VAE_A'],Data['VAE_B'],c=Data['simpPango_encoding'],alpha=0.05,cmap='viridis',label='Variant Encoding ')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Nina',loc='right')\nPlotStyle(plt.gca()) ","420d7122":"plt.figure(figsize=(16,8))\nplt.scatter(Data['ConvVAE_A'],Data['ConvVAE_B'],c=Data['simpPango_encoding'],alpha=0.05,cmap='viridis',label='Variant Encoding ')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Masha',loc='right')\nPlotStyle(plt.gca()) ","b9491df1":"plt.figure(figsize=(16,8))\nplt.scatter(Data['PCA_A'],Data['PCA_B'],c=Data['binary_encoding'],alpha=0.05,cmap='viridis',label='Variant Encoding ')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Katya',loc='right')\nPlotStyle(plt.gca()) ","e0631aa2":"plt.figure(figsize=(16,8))\nplt.scatter(Data['VAE_A'],Data['VAE_B'],c=Data['binary_encoding'],alpha=0.05,cmap='viridis',label='Variant Encoding ')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Nina',loc='right')\nPlotStyle(plt.gca()) ","223579f0":"plt.figure(figsize=(16,8))\nplt.scatter(Data['ConvVAE_A'],Data['ConvVAE_B'],c=Data['binary_encoding'],alpha=0.15,cmap='viridis',label='Variant Encoding ')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Masha',loc='right')\nPlotStyle(plt.gca()) ","1d4ed95e":"plt.figure(figsize=(12,7))\nplt.hist(Data['outbreaktime'],bins=75,density=True)\nplt.xlabel('Time')\nPlotStyle(plt.gca())","94b7890e":"plt.figure(figsize=(12,7))\nplt.hist(Data['week'],bins=50,density=True)\nplt.xlabel('Week of the year')\nPlotStyle(plt.gca())","5f0e060b":"plt.figure(figsize=(12,7))\nplt.hist(Data['geo_lat'],bins=50,density=True)\nplt.xlabel('Latitude')\nPlotStyle(plt.gca())","bd98414b":"plt.figure(figsize=(12,7))\nplt.hist(Data['geo_long'],bins=50,density=True)\nplt.xlabel('Longitude')\nPlotStyle(plt.gca())","b7655fc0":"plt.figure(figsize=(12,7))\nplt.hist(Data['geo_alt'],bins=50,density=True)\nplt.xlabel('Altitude')\nPlotStyle(plt.gca())","1c259c9e":"reSamplingIndex = GetEqualizedIndex(Data['outbreaktime'],bins=1000,maxCount=100)","9615eefa":"plt.figure(figsize=(12,7))\nplt.hist(Data['outbreaktime'].iloc[reSamplingIndex],bins=1000)\nplt.xlabel('Time')\nPlotStyle(plt.gca())","0538b7b0":"plt.figure(figsize=(16,8))\nplt.scatter(Data['PCA_A'].iloc[reSamplingIndex],Data['PCA_B'].iloc[reSamplingIndex],c=Data['week'].iloc[reSamplingIndex],alpha=0.15,cmap='viridis',label='Time encoding')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Katya',loc='right')\nPlotStyle(plt.gca())","1bb0c18c":"plt.figure(figsize=(16,8))\nplt.scatter(Data['VAE_A'].iloc[reSamplingIndex],Data['VAE_B'].iloc[reSamplingIndex],c=Data['week'].iloc[reSamplingIndex],alpha=0.15,cmap='viridis',label='Time encoding')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Nina',loc='right')\nPlotStyle(plt.gca()) ","37362a36":"plt.figure(figsize=(16,8))\nplt.scatter(Data['ConvVAE_A'].iloc[reSamplingIndex],Data['ConvVAE_B'].iloc[reSamplingIndex],c=Data['week'].iloc[reSamplingIndex],alpha=0.15,cmap='viridis',label='Time encoding')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Masha',loc='right')\nPlotStyle(plt.gca()) ","3feb980e":"plt.figure(figsize=(16,8))\nplt.scatter(Data['PCA_A'].iloc[reSamplingIndex],Data['PCA_B'].iloc[reSamplingIndex],c=Data['binary_encoding'].iloc[reSamplingIndex],alpha=0.05,cmap='viridis',label='Variant Encoding ')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Katya',loc='right')\nPlotStyle(plt.gca()) ","3058f8ec":"plt.figure(figsize=(16,8))\nplt.scatter(Data['VAE_A'].iloc[reSamplingIndex],Data['VAE_B'].iloc[reSamplingIndex],c=Data['binary_encoding'].iloc[reSamplingIndex],alpha=0.05,cmap='viridis',label='Variant Encoding ')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Nina',loc='right')\nPlotStyle(plt.gca()) ","14d5b176":"plt.figure(figsize=(16,8))\nplt.scatter(Data['ConvVAE_A'].iloc[reSamplingIndex],Data['ConvVAE_B'].iloc[reSamplingIndex],c=Data['binary_encoding'].iloc[reSamplingIndex],alpha=0.15,cmap='viridis',label='Variant Encoding ')\nplt.legend(loc=1,frameon=False,fontsize='13')\nplt.title('Masha',loc='right')\nPlotStyle(plt.gca()) ","3e1d78b2":"fig,axes=plt.subplots(nrows,ncolumns,figsize=(15,12),sharex=True)\nfor k,kal in enumerate(clabels):\n    \n    clusterData = Data.iloc[reSamplingIndex]\n    clusterData = Data[Data['ConvVAE_Labels']==kal]\n    low = clusterData[clusterData['week']<0.5]['id']\n    high = clusterData[clusterData['week']>0.5]['id']\n    axes[subPlotIndexs[k]].hist(KmersData['C'].loc[high],color='blue',bins=100,density=True,label='Cluster = '+str(kal))\n    axes[subPlotIndexs[k]].hist(KmersData['C'].loc[low],color='blue',bins=100,alpha=0.5,density=True,label='Cluster = '+str(kal))\n    axes[subPlotIndexs[k]].set_xlim([0.2,0.35])\n    axes[subPlotIndexs[k]].set_xlabel('Nucleotide content')\n    axes[subPlotIndexs[k]].set_title('Cluster = ' + str(kal))\n    PlotStyle(axes[subPlotIndexs[k]])\nPlotStyle(axes[subPlotIndexs[-1]])\nfig.suptitle('Cytosine shift',x=0.9,y=0.9)","fe93557f":"fig,axes=plt.subplots(nrows,ncolumns,figsize=(15,12),sharex=True)\nfor k,kal in enumerate(clabels):\n    \n    clusterData = Data.iloc[reSamplingIndex]\n    clusterData = Data[Data['ConvVAE_Labels']==kal]\n    low = clusterData[clusterData['week']<0.5]['id']\n    high = clusterData[clusterData['week']>0.5]['id']\n    axes[subPlotIndexs[k]].hist(KmersData['T'].loc[high],color='black',bins=100,density=True,label='Cluster = '+str(kal))\n    axes[subPlotIndexs[k]].hist(KmersData['T'].loc[low],color='black',bins=100,alpha=0.5,density=True,label='Cluster = '+str(kal))\n    axes[subPlotIndexs[k]].set_xlim([0.7,0.8])\n    axes[subPlotIndexs[k]].set_xlabel('Nucleotide content')\n    axes[subPlotIndexs[k]].set_title('Cluster = ' + str(kal))\n    PlotStyle(axes[subPlotIndexs[k]])\nPlotStyle(axes[subPlotIndexs[-1]])\nfig.suptitle('Thymine\/Uracil shift',x=0.91,y=0.9)","102e602b":"## Nucleotide shift ","35ff6c52":"### PCA variant encoding","f021020e":"### PCA Time encoding","4c9fbbd7":"## SARS-Cov-2 Sequence Clustering","c24ab5a1":"### MLP variational autoencoder Geographical Encoding.","7729eec0":"## Data Arrangement and Feature engineering","8cc54b40":"### Functions","91c21ebd":"### Deep Convolutional variational autoencoder Clustering","87d18d46":"## Resampling ","99316f3b":"### Deep Convolutional variational autoencoder ","59702e26":"### Deep Convolutional variational autoencoder Guanine shift","c65cad86":"## Time Encodig ","7e432b44":"### MLP variational autoencoder Thymine\/Uracil Shift","f6b83b4b":"### Deep Convolutional variational autoencoder Cytosine shift","959eb39a":"## Variant Encoding ","b7450f19":"### MLP variational autoencoder Cytosine Shift","9c7bd506":"# Binary Variant encoding \n\nVariants are encoded into three categories, A lineage B lineage and non lineage. ","143a912f":"## SARS-Cov-2 Geographical Encoding \nEqual colors represent the same country","121dac30":"### PCA Clustering","4f21da64":"### MLP variational autoencoder Clustering ","2a46289d":"### MLP variational autoencoder Variant encoding","62d60cb8":"### MLP variational autoencoder Variant encoding","18f571cf":"### PCA Geographical Encoding. ","165eb1e5":"# Data Biases ","360fae06":"### MLP variational autoencoder ","2f1877cf":"### Deep Convolutional variational autoencoder Thymine\/Uracil shift","42b113fa":"### Deep Convolutional variational autoencoder variant encoding","235c1f78":"### MLP variational autoencoder Variant encoding","5fb03309":"### Geographical sampling biases","daee4fdc":"### Deep Convolutional variational autoencoder variant encoding","5c877038":"### MLP variational autoencoder Time encoding","769dcad3":"### PCA","22edd570":"### MLP variational autoencoder Adenine Shift","7a299381":"Further details at https:\/\/tavoglc.medium.com\/sars-cov-2-classification-with-variational-autoencoders-4842696a43c","988ac8a4":"### Deep Convolutional variational autoencoder Thymine\/Uracil shift","b3f45e6c":"### PCA Time Encoding.","d4f5115a":"## Data","1cfb46fb":"### Deep Convolutional variational autoencoder Geographical Encoding","1aac7db1":"### Deep Convolutional variational autoencoder variant encoding","98bdceed":"### PCA variant encoding","b7e950eb":"### Deep Convolutional variational autoencoder variant encoding","d880690c":"### Deep Convolutional variational autoencoder Cytosine shift","0d10e0be":"Further details at https:\/\/tavoglc.medium.com\/sars-cov-2-classification-with-variational-autoencoders-4842696a43c","b4fcf8a3":"## SARS-Cov-2 Time Encoding\n\nTime is encoded by the week, thus 52 different colors are present in the visualization. Similar colors represent sequences collected in similar or closer time periods. ","c8ac4c7a":"## SARS-Cov-2 Dimensionality Reduction ","f307a79d":"### Time sampling biases","05e6b5b7":"## Code","1b41c9dc":"### MLP variational autoencoder Guanine Shift","ad280b2e":"### Deep Convolutional variational autoencoder Adenine Shift","1ab45897":"### MLP variational autoencoder Time Encoding.","53e29d53":"### Packages","0ab9ead5":"### PCA variant encoding","5cad61e6":"### Deep Convolutional variational autoencoder Time Encoding","1256653e":"### Deep Convolutional variational autoencoder Geographical Encoding ","df0bd51a":"## Variant Encoding "}}