{"cell_type":{"01f239f2":"code","9f178b4d":"code","7636ba26":"code","7050b2d5":"code","f1d9881d":"code","56e8c844":"code","91fa3678":"code","c84d3522":"code","f5c673f0":"code","c4831b4d":"code","9614567c":"code","d2eff727":"markdown","d4c84e0f":"markdown","170ee49a":"markdown","66a4b5e5":"markdown","e3507c10":"markdown","c86e3371":"markdown","09c2d1a9":"markdown","95c626df":"markdown"},"source":{"01f239f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9f178b4d":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier","7636ba26":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n","7050b2d5":"clf = DecisionTreeClassifier()","f1d9881d":"xtrain = train.iloc[0:42000,1:]\ntrain_label = train.iloc[0:42000,0]","56e8c844":"clf.fit(xtrain, train_label)","91fa3678":"xtest = test.iloc[0:28000,:]","c84d3522":"p = clf.predict(xtest)","f5c673f0":"X_train = (train.iloc[:,1:]).astype('float32') # all pixel values\ny_train = train.iloc[:,0].astype('int32') # only labels i.e targets digits\nX_test = test.astype('float32')","c4831b4d":"X_train = X_train.values.reshape(X_train.shape[0], 28, 28)\nj=0\nfor i in range(30000, 30003):\n    plt.subplot(330 + (j+1))\n    j+=1\n    plt.imshow(X_train[i], cmap=plt.get_cmap('gray'))\n    plt.title(y_train[i]);","9614567c":"X_test = X_test.values.reshape(X_test.shape[0], 28, 28)\nj=0\nfor i in range(1004, 1007):\n    plt.subplot(330 + (j+1))\n    j+=1\n    plt.imshow(X_test[i], cmap=plt.get_cmap('gray'))\n    plt.title(p[i]);","d2eff727":"Import trainig and test sets","d4c84e0f":"Training Data","170ee49a":"Training Data Visualization","66a4b5e5":"Test Data","e3507c10":"Prediction Function","c86e3371":"Input libraries","09c2d1a9":"Test Data Visualization","95c626df":"Decision Tree Classifier activation"}}