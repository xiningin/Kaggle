{"cell_type":{"195c9dca":"code","b7874210":"code","0e03a340":"code","94021943":"code","60c76dc5":"code","f8ba9cc4":"code","48d4879e":"code","391c182d":"code","a1f7c2a4":"code","18c25e17":"code","b418bb0e":"code","fb268e60":"markdown"},"source":{"195c9dca":"import pandas as pd\nimport datetime","b7874210":"#gets Deltas\ndef Marty(string,output,Name_separator):\n    df= Name_separator[string]\n    df['delta'] = (df['Data']-df['Data'].shift()).fillna(pd.Timedelta(seconds=0))\n    df.drop(df.iloc[::2].index, inplace=True)\n    df['delta'].sum()\n    \n    output.at[string,'Delta'] = df['delta'].sum()\n    \n    return output.fillna(pd.Timedelta(seconds=0))","0e03a340":"#sets up datafreames\ndef plutonium(Day,Dataframe,Day_separator):\n    Name_separator = dict(tuple(Day_separator[Day].groupby(Dataframe['Nome'])))\n    \n    output= Dataframe['Nome'].drop_duplicates()\n    output = output.reset_index()\n    output.drop(columns='index',inplace=True)\n    output['Delta'] = pd.Timedelta('nat')\n    output.set_index('Nome', inplace=True)\n    \n    docs_phone_book = []\n    docs_phone_book.extend(output.index.tolist())\n    \n    for Nome in docs_phone_book:\n        \n        if Nome in Name_separator.keys():\n            Marty(Nome,output,Name_separator)\n            \n    return output","94021943":"#gets date input\ndef get_input(N_dias):\n    print('forne\u00e7a %d datas no formato YYYY-MM-DD separadas por espa\u00e7os...' % (N_dias))\n    \n    datas = str(input())\n    \n    date_list = [str(x) for x in datas.split()]\n    \n    return date_list","60c76dc5":"#gets date data\ndef get_days_data(df, Day_separator, N_dias):\n    days_data=[]\n    days= get_input(N_dias) \n    \n    for i in range(N_dias):\n        day = days[i]\n        day_data = plutonium(day,df,Day_separator).fillna(pd.Timedelta(seconds=0))\n        days_data.append(day_data)\n        \n    final_data = pd.concat(days_data, axis=1, keys=days)\n    final_data = pd.concat([final_data,final_data.sum(axis=1)],axis=1)\n    \n    return final_data","f8ba9cc4":"#reads database and cleans up the data\ndf= pd.read_excel('TimeMachine.xlsx',sheet_name='Log')\n\ndf.drop('ID',axis=1,inplace=True)\ndf = df[df.Nome != 'Daniel S']\ndf['Data'] = df['hora'].apply(lambda hora: hora.strftime(\"%D  %H:%M\"))\ndf['Data'] = pd.to_datetime(df['Data'])\ndf.drop('hora',axis=1,inplace=True)\ndf.drop_duplicates(inplace=True)","48d4879e":"#stores data in a dict\nDay_separator= dict(tuple(df.groupby(df['Data'].apply(lambda Data: Data.strftime('%Y-%m-%d')))))","391c182d":"#gets N of days the user wants\ntracker = 0\nwhile tracker ==0:\n    N_dias = int(input('Digite o N\u00famero de dias que voc\u00ea deseja acessar: '))\n    if N_dias in range(100):\n        tracker = 1\ntracker = 0","a1f7c2a4":"#gets data\nfinal_data = get_days_data(df,Day_separator,N_dias)","18c25e17":"#test\nfinal_data","b418bb0e":"#export data\nfinal_data.to_excel('Fire_Trail.xlsx',sheet_name='1985') ","fb268e60":"I integrated Qr codes with google forms and it's funcionality to generate autofilled responses and integrated it with Excel to generate the employee log dataset. After the data was colected I made this script to calculate how many hours my employees spend working each day\/week or any time period desired that is larger than 1 day."}}