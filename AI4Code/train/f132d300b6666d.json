{"cell_type":{"51cb1240":"code","763776f2":"code","791174b6":"code","1e602189":"code","b7cdbc92":"code","a2b715cc":"code","9de67ace":"code","cb40cf8d":"code","61242f91":"code","fd55b767":"code","9f51241a":"code","064262b2":"code","3d198c18":"code","43aadc2c":"code","a9a1db02":"code","3e885527":"code","1394caec":"code","35685ccc":"code","b3dedd0a":"code","284286e0":"code","d8a15db2":"code","6776467d":"code","2aec2751":"code","43bbfa7b":"code","69bf0c2d":"code","12260f36":"code","59d5782d":"code","4c491592":"code","ca468ecb":"code","f7b80f99":"code","c4587dca":"code","2152d9d3":"code","59857368":"code","0acfa743":"code","0de24763":"code","385f4456":"markdown","052a4675":"markdown","fa3df734":"markdown","5f013559":"markdown","11126084":"markdown","e77275a3":"markdown","f6e32129":"markdown","5cace0e4":"markdown","2095536b":"markdown","cfca504c":"markdown","73ae59db":"markdown","4084cbb6":"markdown","665ed77d":"markdown","c528d576":"markdown","401bced1":"markdown"},"source":{"51cb1240":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')\nwarnings.warn('ignore')","763776f2":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nprint(train.shape)\nprint(test.shape)\n\ndata = pd.concat([train, test], axis=0)\nprint(data.shape)","791174b6":"data.info()","1e602189":"data.describe()","b7cdbc92":"# \u7279\u5f81\u503c\u53d6\u503c\u6570\u91cf\uff0c\u5c11\u7684\u53ef\u4ee5\u53ef\u89c6\u5316\u5206\u6790\ndata.apply(lambda x: x.value_counts().shape[0])","a2b715cc":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.style.use('bmh')\n\nf, [ax1,ax2,ax3] = plt.subplots(1,3, figsize=(20,5))\nsns.countplot(data=train, x='Embarked',hue='Survived', ax=ax1)\nsns.countplot(data=train, x='Pclass', hue='Survived', ax=ax2)\nsns.countplot(data=train, x='Sex', hue='Survived', ax=ax3)\nf.suptitle('feature_values VS Suivived_values')\n\nf, [ax1, ax2] = plt.subplots(1,2, figsize=(20,5))\nsns.countplot(data=train, x='Parch', hue='Survived', ax=ax1)\nsns.countplot(data=train, x='SibSp', hue='Survived', ax=ax2)","9de67ace":"grid = sns.FacetGrid(train, col='Pclass', hue='Sex',size=4)\ngrid.map(sns.countplot, 'Embarked')","cb40cf8d":"grid = sns.FacetGrid(train, row='Sex',col='Pclass', hue='Survived', palette='seismic',height=4)\ngrid.map(sns.countplot, 'Embarked', alpha=0.8)\ngrid.add_legend()","61242f91":"f, ax = plt.subplots(figsize=(10,5))\nsns.kdeplot(train.loc[train['Survived']==0, 'Age'], shade=True, label='not survived')\nsns.kdeplot(train.loc[train['Survived']==1, 'Age'], shade=True, label='survived')\nplt.title('Age_feature_distribution')\nplt.xlabel('Age')\nplt.ylabel('Frequency')","fd55b767":"# \u7bb1\u7ebf\u56fe\u7279\u5f81\u5206\u6790\nf, [ax1, ax2] = plt.subplots(1,2, figsize=(20,6))\nsns.boxplot(data=train, x='Pclass', y='Age', ax=ax1)\nsns.swarmplot(data=train, x='Pclass', y='Age',ax=ax1)\nsns.kdeplot(train.loc[train['Pclass']==1, 'Age'], shade=True, label='Pcalss=1', ax=ax2)\nsns.kdeplot(train.loc[train['Pclass']==2, 'Age'], shade=True, label='Pclass=2', ax=ax2)\nsns.kdeplot(train.loc[train['Pclass']==3, 'Age'], shade=True, label='Pcalss=3',ax=ax2)\nax1.set_title('Box_distribution Age_feature for Plass_feature')\nax2.set_title('Kde_distribution Age_feature for Plass_feature')","9f51241a":"grid = sns.FacetGrid(data=train, row='Sex', col='Pclass', hue='Survived')\ngrid.map(plt.scatter, 'PassengerId', 'Age')\ngrid.add_legend()","064262b2":"grid = sns.FacetGrid(data=train, row='Sex', col='SibSp', hue='Survived')\ngrid.map(plt.scatter, 'PassengerId', 'Age')\ngrid.add_legend()","3d198c18":"grid = sns.FacetGrid(data=train, row='Sex', col='Parch', hue='Survived')\ngrid.map(plt.scatter, 'PassengerId', 'Age')\ngrid.add_legend()","43aadc2c":"f, ax = plt.subplots(figsize=(10,5))\nsns.kdeplot(train.loc[train['Survived']==0, 'Fare'], shade=True, label='not survived')\nsns.kdeplot(train.loc[train['Survived']==1, 'Fare'], shade=True, label='survived')\nplt.title('Fare_feature_distribution')\nplt.xlabel('Fare')\nplt.ylabel('Frequency')\nplt.show()","a9a1db02":"f, [ax1,ax2] = plt.subplots(1, 2, figsize=(26,10))\nsns.boxplot(data=train, x='Pclass', y='Fare', ax=ax1)\nsns.swarmplot(data=train, x='Pclass', y='Fare', ax=ax1)\nax1.set_title('Box_distribution Fare_feature for Plass_feature')\n\nsns.kdeplot(train.loc[train['Pclass']==1, 'Fare'], shade=True, label='Pclass=1', ax=ax2)\nsns.kdeplot(train.loc[train['Pclass']==2, 'Fare'], shade=True, label='Pclass=2', ax=ax2)\nsns.kdeplot(train.loc[train['Pclass']==3, 'Fare'], shade=True, label='Pclass=3', ax=ax2)\nax2.set_title('Kde_distribution Fare_feature for Plass_feature')               ","3e885527":"grid = sns.FacetGrid(data=train, row='Sex', col='Pclass', hue='Survived')\ngrid.map(plt.scatter, 'Age', 'Fare')\ngrid.add_legend()","1394caec":"sns.pairplot(train, hue='Survived')","35685ccc":"data[data['Fare'].isnull()]","b3dedd0a":"fare_fillna = data[(data['Age']>60) & (data['Pclass']==3) & (data['Sex']=='male')]['Fare'].mean()\ndata['Fare'].fillna(fare_fillna, inplace=True)","284286e0":"data[data['Embarked'].isnull()]","d8a15db2":"data['Embarked'].fillna('C', inplace=True)","6776467d":"data['CabinCate'] = pd.Categorical(data['Cabin'].fillna('0').apply(lambda x: x[0])).codes","2aec2751":"sns.countplot(data=data, x='CabinCate', hue='Survived')","43bbfa7b":"data.isnull().sum()","69bf0c2d":"data['FamilySize'] = data['SibSp']+data['Parch']+1\ndata['FamilySize'] = pd.cut(data['FamilySize'], bins=[0,1,4,20], labels=[0,1,2])","12260f36":"import re\ndata['Title'] = data['Name'].apply(lambda x : re.search('(\\w+)\\.', x).group(1))\ndata['Title'] = data['Title'].apply(lambda x : [x, 'Mrse'][x not in ['Mr', 'Miss', 'Mrs', 'Master']])","59d5782d":"data = pd.concat([data, pd.get_dummies(data[['Embarked', 'Title','Sex']])], axis=1)","4c491592":"from sklearn.ensemble import ExtraTreesRegressor\ncolumns = ['Fare', 'Parch', 'Pclass', 'SibSp', 'CabinCate', 'FamilySize', 'Embarked_C', 'Embarked_Q', 'Embarked_S',\n           'Title_Master', 'Title_Miss', 'Title_Mr', 'Title_Mrs', 'Title_Mrse', 'Sex_female', 'Sex_male']\nX_train = data[columns][data['Age'].notnull()]\ny_train = data['Age'][data['Age'].notnull()]\nX_test = data[columns][data['Age'].isnull()]\nextra = ExtraTreesRegressor(n_estimators=200, random_state=0)\n\nextra.fit(X_train, y_train)\ndata['Age'][data['Age'].isnull()] = extra.predict(X_test)\n\nX_test['Age'] = extra.predict(X_test)\nsns.swarmplot(data=X_test, x='Pclass', y='Age')","ca468ecb":"data = data.drop(['Cabin', 'Embarked','Name','PassengerId','Sex', 'Survived', 'Ticket','Title'], axis=1)","f7b80f99":"from sklearn.feature_selection import SelectKBest, f_classif, chi2\ntarget = train['Survived']\ntrain_feature = data[:len(train)]\ntest_feature = data[len(train):]\nfeat_list = data.columns.tolist()\n\nselector = SelectKBest(f_classif, k=len(feat_list))\nselector.fit(train_feature, target)\nscores = -np.log10(selector.pvalues_,)\nindices = np.argsort(scores)[::-1]\n\nprint('Features importance:')\nfor i in range(len(scores)):\n    print('{:.2f}==>{}'.format(scores[indices[i]], feat_list[indices[i]]))","c4587dca":"plt.figure(figsize=(25,25))\nsns.heatmap(data.corr(), annot=True, cmap=plt.cm.RdBu)","2152d9d3":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import f1_score\n\nX_train, X_test, y_train, y_test = train_test_split(train_feature, target, test_size=0.2, random_state=2)\nparams = {'n_estimators':[120,200,300,500,800,1200]}\nclf = GridSearchCV(RandomForestClassifier(random_state=2), params, cv=6, scoring='roc_auc')\nclf.fit(X_train, y_train)\n\nprint('\u8bad\u7ec3\u96c6\u5f97\u5206\uff1a', clf.score(X_train, y_train))\nprint('\u6d4b\u8bd5\u96c6\u5f97\u5206\uff1a', clf.score(X_test, y_test))\nprint('\u6700\u4f73\u53c2\u6570\uff1a', clf.best_params_)\n\nfeature_importances = clf.best_estimator_.feature_importances_\nimportance_df = pd.DataFrame(feature_importances, X_train.columns, columns=['importance score'])\nimportance_df.sort_values('importance score', ascending=False, inplace=True)\nimportance_df.plot.barh()\n\nresult_df = pd.concat([test['PassengerId'], pd.Series(clf.predict(test_feature), name='Survived')], axis=1)\nresult_df.set_index('PassengerId')\nresult_df.to_csv('result_df.csv', index=False)","59857368":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import f1_score\n\ntrain_data = train_feature.drop(['Sex_male', 'Sex_female'], axis=1)\ntest_data = test_feature.drop(['Sex_male', 'Sex_female'], axis=1)\nX_train, X_test, y_train, y_test = train_test_split(train_data, target, test_size=0.2, random_state=2)\nparams = {'n_estimators':[120,200,300,500,800,1200]}\nclf = GridSearchCV(RandomForestClassifier(random_state=2), params, cv=6, scoring='roc_auc')\nclf.fit(X_train, y_train)\n\nprint('\u8bad\u7ec3\u96c6\u5f97\u5206\uff1a', clf.score(X_train, y_train))\nprint('\u6d4b\u8bd5\u96c6\u5f97\u5206\uff1a', clf.score(X_test, y_test))\nprint('\u6700\u4f73\u53c2\u6570\uff1a', clf.best_params_)\n\nfeature_importances = clf.best_estimator_.feature_importances_\nimportance_df = pd.DataFrame(feature_importances, X_train.columns, columns=['importance score'])\nimportance_df.sort_values('importance score', ascending=False, inplace=True)\nimportance_df.plot.barh()\n\nresult_df = pd.concat([test['PassengerId'], pd.Series(clf.predict(test_data), name='Survived')], axis=1)\nresult_df.set_index('PassengerId')\nresult_df.to_csv('result_df.csv', index=False)","0acfa743":"feat_list = importance_df[importance_df['importance score'] > 0.02].index.tolist()\ntrain_df = train_data[feat_list]\ntest_df = test_data[feat_list]\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import f1_score\n\nX_train, X_test, y_train, y_test = train_test_split(train_df, target, test_size=0.2, random_state=2)\nparams = {'n_estimators':[120,200,300,500,800,1200]}\nclf = GridSearchCV(RandomForestClassifier(random_state=2), params, cv=6, scoring='roc_auc')\nclf.fit(X_train, y_train)\n\nprint('\u8bad\u7ec3\u96c6\u5f97\u5206\uff1a', clf.score(X_train, y_train))\nprint('\u6d4b\u8bd5\u96c6\u5f97\u5206\uff1a', clf.score(X_test, y_test))\nprint('\u6700\u4f73\u53c2\u6570\uff1a', clf.best_params_)\n\nfeature_importances = clf.best_estimator_.feature_importances_\nimportance_df = pd.DataFrame(feature_importances, X_train.columns, columns=['importance score'])\nimportance_df.sort_values('importance score', ascending=False, inplace=True)\nimportance_df.plot.barh()\n\nresult_df = pd.concat([test['PassengerId'], pd.Series(clf.predict(test_df), name='Survived')], axis=1)\nresult_df.set_index('PassengerId')\nresult_df.to_csv('result_df.csv', index=False)","0de24763":"feat_list = importance_df[importance_df['importance score'] > 0.05].index.tolist()\ntrain_df = train_data[feat_list]\ntest_df = test_data[feat_list]\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import f1_score\n\nX_train, X_test, y_train, y_test = train_test_split(train_df, target, test_size=0.2, random_state=2)\nparams = {'n_estimators':[120,200,300,500,800,1200], 'max_depth':[3,5,9,11]}\nclf = GridSearchCV(RandomForestClassifier(random_state=2), params, cv=6, scoring='roc_auc')\nclf.fit(X_train, y_train)\n\nprint('\u8bad\u7ec3\u96c6\u5f97\u5206\uff1a', clf.score(X_train, y_train))\nprint('\u6d4b\u8bd5\u96c6\u5f97\u5206\uff1a', clf.score(X_test, y_test))\nprint('\u6700\u4f73\u53c2\u6570\uff1a', clf.best_params_)\n\nfeature_importances = clf.best_estimator_.feature_importances_\nimportance_df = pd.DataFrame(feature_importances, X_train.columns, columns=['importance score'])\nimportance_df.sort_values('importance score', ascending=False, inplace=True)\nimportance_df.plot.barh()\n\nresult_df = pd.concat([test['PassengerId'], pd.Series(clf.predict(test_df), name='Survived')], axis=1)\nresult_df.set_index('PassengerId')\nresult_df.to_csv('result_df.csv', index=False)","385f4456":"## 3.2\u5b9a\u91cf\u5206\u6790","052a4675":"- Survived\u548cnot Survived\u7279\u5f81\u5206\u5e03\u7684\u4e3b\u8981\u533a\u522b\u57280--15\u5de6\u53f3\u3002\u5c0f\u4e8e15\uff08\u5b69\u5b50\uff09\u83b7\u6551\u7387\u975e\u5e38\u9ad8\u3002","fa3df734":"## 3.1\u5b9a\u7c7b\u5206\u6790","5f013559":"- \u7537\u6027Pclass1\u751f\u8fd8\u7387\u8fd8\u633a\u9ad8\uff0cPclass2\u548cPclass3\u4f4e\u5f88\u591a\uff0cPclass2\u5e74\u9f84\u5c0f\u7684\u51e0\u4e4e\u5168\u90e8\u751f\u8fd8\u3002\n- \u5973\u6027Pclass1\u548cPclass2\u751f\u8fd8\u7387\u5f88\u9ad8\u3002","11126084":"## 4\u3001\u6570\u636e\u5904\u7406","e77275a3":"- \u4e0d\u540cPclass\u5e74\u9f84\u5206\u5e03\u4e5f\u4e0d\u540c\uff0c\u4e09\u4e2a\u5206\u5e03\u4e2d\u4f4d\u6570Pclass1>pclass2>pclass3\u3002pclass1\u62e5\u6709\u4e00\u5b9a\u8d22\u5bcc\u548c\u5730\u4f4d\u7684\u4eba\uff0c\u5e74\u9f84\u6bd4\u8f83\u5927\u3002Pclass3\u5e74\u9f8420--30.","f6e32129":"- Embarked\uff1a\u6e2f\u53e3\u4e3aS\u7684\u4eba\u6700\u591a\uff0c\u4f46\u662f\u83b7\u6551\u7387\u6700\u4f4e\uff0cC\u83b7\u6551\u7387\u6700\u9ad8\n- Pclass\uff1a\u8239\u7968\u7b49\u7ea7\u4e3a3\u7684\u4eba\u6570\u6700\u591a\uff0c\u4f46\u662f\u83b7\u6551\u7387\u975e\u5e38\u4f4e\uff0c\u4f18\u5148\u6551\u63f4\u793e\u4f1a\u4ef7\u503c\u9ad8\u7684\u4eba\n- Sex\uff1a\u7537\u6027\u4eba\u6570\u8fdc\u591a\u4e8e\u5973\u6027\uff0c\u800c\u5973\u6027\u83b7\u6551\u7387\u8fdc\u9ad8\u4e8e\u7537\u6027\uff0c\u6551\u63f4\u5973\u58eb\u4f18\u5148\n- Parch\u548cSibSp\uff1a\u4e3a0\u7684\u6700\u591a\uff0c\u83b7\u6551\u7387\u6700\u4f4e\uff0c1\u6700\u9ad8\uff0c\u8d85\u8fc750%","5cace0e4":"## 5\u3001\u7279\u5f81\u5de5\u7a0b","2095536b":"- Plass=1,2\uff0cQ\u6e2f\u53e3\u4eba\u6570\u51e0\u4e4e\u4e3a0\uff0c Plass=3\uff0cQ\u6e2f\u53e3\u4eba\u6570\u751a\u81f3\u5927\u4e8eC\u6e2f\u53e3\u3002\u793e\u4f1a\u7b49\u7ea7\u4e0e\u6e2f\u53e3\u6709\u5173\u8054\uff0cS\u548cC\u9ad8\u7ea7\u6e2f\u53e3\uff0cQ\u666e\u901a\u6e2f\u53e3\u3002\n- Pclass=2\uff0c\u7537\u6027\u548c\u5973\u6027\u5728S\u548cC\u6e2f\u53e3\u6570\u91cf\u5206\u5e03\u5448\u76f8\u53cd\u8d8b\u52bf\u3002","cfca504c":"# 3\u3001\u53ef\u89c6\u5316\u63a2\u7d22\u6570\u636e\u96c6","73ae59db":"# 2\u3001\u52a0\u8f7d\u67e5\u770b\u6570\u636e\u96c6","4084cbb6":"## 1\u3001\u6570\u636e\u4ecb\u7ecd\uff1a\n### train.csv\uff1a\u8bad\u7ec3\u96c6\uff0c\u8bb0\u5f55\u4e86\u6cf0\u5766\u5c3c\u514b\u53f7\u4e0a\u6210\u5458\u7684\u4fe1\u606f\u3002\u5305\u62ec\u4ee5\u4e0b\u53d8\u91cf\uff1a\n- PassengerId\uff1a\u4e58\u5ba2ID\n- Survived\uff1a\u662f\u5426\u83b7\u6551\uff0c0=No\uff0c1=Yes\n- Pclass\uff1a\u8239\u7968\u7b49\u7ea7,1=1st,2=2nnd,3=3rd\n- Name\uff1a\u4e58\u5ba2\u59d3\u540d\n- Sex\uff1a\u4e58\u5ba2\u6027\u522b\n- Age\uff1a\u4e58\u5ba2\u5e74\u9f84\n- SibSp\uff1a\u8239\u4e0a\u662f\u5426\u6709\u5144\u5f1f\u59d0\u59b9\u6216\u914d\u5076\n- Parch\uff1a\u8239\u4e0a\u662f\u5426\u6709\u7236\u6bcd\u6216\u5b69\u5b50\n- Ticket\uff1a\u8239\u7968\u7f16\u53f7\n- Fare\uff1a\u8239\u7968\u7968\u4ef7\n- Cabin\uff1a\u5ba2\u8231\u7f16\u53f7\n- Embarked\uff1a\u51fa\u53d1\u6e2f\u53e3,\n\n### test.csv\uff1a\u6d4b\u8bd5\u96c6\uff0c\u4e0d\u5305\u542b\u2018Survived\u2019\u53d8\u91cf\u3002","665ed77d":"## 6\u3001\u5efa\u6a21","c528d576":"# \u6cf0\u5766\u5c3c\u514b\u83b7\u6551\u9884\u6d4b","401bced1":"###### \u5f02\u5e38\u503c\u521d\u59cb\u89c2\u5bdf\n- Fare\uff1amean=33\uff0cmedian=14\uff0c\u5206\u5e03\u4e25\u91cd\u53f3\u504f\uff0cmax=512\uff0c\u53ef\u80fd\u662f\u5f02\u5e38\u503c"}}