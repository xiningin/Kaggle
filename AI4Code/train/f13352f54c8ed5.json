{"cell_type":{"e9e6468a":"code","f4f8ce71":"code","33c8d5b5":"code","f96fbcd2":"code","3c2af1ba":"code","413a1629":"code","64feed3c":"code","41c8316b":"code","463078d5":"code","6c65d75f":"code","2befd50a":"code","0ca5e2b3":"code","09f2ab1f":"code","0a9e99cc":"code","00161933":"code","70c8f1b5":"code","aeb9131c":"code","ca122673":"code","36e9998e":"code","665f8f04":"code","c95bc515":"code","73525229":"code","b47db55d":"code","34547c12":"code","6d7839a4":"code","d4fa002c":"code","f4165c5d":"code","69cc8583":"code","2fb29a42":"code","52e4755d":"code","b00d68b5":"code","82c6280b":"code","bda19849":"code","b26caf53":"code","1324c124":"code","70c90132":"code","9caa8ca9":"code","f513a179":"code","c4118e2d":"code","f3a92cef":"code","5d7328b1":"code","551e9281":"code","d2e1c129":"code","efb3a550":"code","3fd68db8":"code","37e6684a":"code","43ba0785":"code","67c8eb33":"code","c50e1f76":"code","1fbb410f":"code","97d2168b":"code","b554805a":"code","76d22d5e":"code","609bae2c":"code","0bd7ab43":"code","346b8e1b":"code","480a9e82":"code","9aac3690":"code","822cf6c6":"code","4b676fe1":"code","a1aeaf1e":"code","1e51087b":"markdown","817f77eb":"markdown","01d546f3":"markdown","ffa659cd":"markdown","7b6d06f6":"markdown","961e162c":"markdown","3da4ef07":"markdown","d1d94b8e":"markdown","0b2b31d6":"markdown","0d253f6f":"markdown","4251ef47":"markdown","5891fba8":"markdown","3b061bd7":"markdown","56c32812":"markdown","d6fa6674":"markdown","feef277c":"markdown"},"source":{"e9e6468a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f4f8ce71":"data=pd.read_csv('..\/input\/titanic\/train.csv')\ndata","33c8d5b5":"data.info()","f96fbcd2":"data['SibSp'].value_counts()","3c2af1ba":"data['Fare'].describe()","413a1629":"ax=data['Age'].hist(bins=20,density=True,stacked=True,alpha=0.6)\ndata['Age'].plot(kind='density')\nax.set(xlabel='Age')\nplt.show()","64feed3c":"data['Age'].fillna(data['Age'].median(),inplace=True)","41c8316b":"data.drop('Cabin',axis=1,inplace=True)","463078d5":"data['Embarked'].value_counts()","6c65d75f":"data['Embarked'].fillna('S',inplace=True)","2befd50a":"data.drop(['PassengerId','Name','Ticket'],axis=1,inplace=True)","0ca5e2b3":"data['Pclass']=data['Pclass'].astype(str)","09f2ab1f":"data['Accompanied']=0","0a9e99cc":"for i in range(data.shape[0]):\n    if (data.loc[i,'SibSp']+data.loc[i,'Parch'])>0:\n        data.loc[i,'Accompanied']=1","00161933":"data['Accompanied']=data['Accompanied'].astype(str)","70c8f1b5":"data","aeb9131c":"data.drop(['SibSp','Parch'],axis=1,inplace=True)","ca122673":"data=pd.get_dummies(data)","36e9998e":"data","665f8f04":"data.drop(['Pclass_1','Sex_female','Embarked_C','Accompanied_0'],axis=1,inplace=True)","c95bc515":"data","73525229":"X=data[['Age','Fare','Pclass_2','Pclass_3','Sex_male','Embarked_Q','Embarked_S','Accompanied_1']]\ny=data['Survived']","b47db55d":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.feature_selection import RFECV","34547c12":"rfecv = RFECV(estimator=LogisticRegression(), step=1, cv=10, scoring='accuracy')\nrfecv.fit(X, y)\nprint(\"Optimal number of features: %d\" % rfecv.n_features_)\nprint('Selected features: %s' % list(X.columns[rfecv.support_]))","6d7839a4":"data.drop('Fare',axis=1,inplace=True)","d4fa002c":"X.drop('Fare',axis=1,inplace=True)","f4165c5d":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score \nfrom sklearn.metrics import confusion_matrix, precision_recall_curve, roc_curve, auc, log_loss\nlogreg = LogisticRegression()","69cc8583":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score \nfrom sklearn.metrics import confusion_matrix, precision_recall_curve, roc_curve, auc, log_loss\nlogreg = LogisticRegression()\nscores_accuracy = cross_val_score(logreg, X, y, cv=10, scoring='accuracy')\nscores_log_loss = cross_val_score(logreg, X, y, cv=10, scoring='neg_log_loss')\nscores_auc = cross_val_score(logreg, X, y, cv=10, scoring='roc_auc')\nprint('K-fold cross-validation results:')\nprint(logreg.__class__.__name__+\" average accuracy is %2.3f\" % scores_accuracy.mean())\nprint(logreg.__class__.__name__+\" average log_loss is %2.3f\" % -scores_log_loss.mean())\nprint(logreg.__class__.__name__+\" average auc is %2.3f\" % scores_auc.mean())","2fb29a42":"from sklearn.model_selection import GridSearchCV\nparam_grid = {'C': np.arange(1e-05, 3, 0.1)}\nscoring = {'Accuracy': 'accuracy', 'AUC': 'roc_auc', 'Log_loss': 'neg_log_loss'}\n\ngs = GridSearchCV(LogisticRegression(), return_train_score=True,\n                  param_grid=param_grid,  cv=10, refit='Accuracy')","52e4755d":"gs.fit(X, y)","b00d68b5":"results = gs.cv_results_","82c6280b":"gs.best_estimator_","bda19849":"gs.best_params_","b26caf53":"gs.best_score_","1324c124":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.pipeline import Pipeline\nss=StandardScaler()\nX=ss.fit_transform(X)","70c90132":"log_reg=LogisticRegression(C=0.10001)","9caa8ca9":"log_reg.fit(X,y)","f513a179":"test_data=pd.read_csv('..\/input\/titanic\/test.csv')\ntest_data","c4118e2d":"test_data['Age'].fillna(data['Age'].median(),inplace=True)","f3a92cef":"test_data.drop('Cabin',axis=1,inplace=True)","5d7328b1":"test_data['Embarked'].value_counts()","551e9281":"test_data['Embarked'].fillna('S',inplace=True)","d2e1c129":"test_data.drop(['PassengerId','Name','Ticket'],axis=1,inplace=True)","efb3a550":"test_data['Pclass']=test_data['Pclass'].astype(str)","3fd68db8":"test_data['Accompanied']=0","37e6684a":"for i in range(test_data.shape[0]):\n    if (test_data.loc[i,'SibSp']+test_data.loc[i,'Parch'])>0:\n        test_data.loc[i,'Accompanied']=1","43ba0785":"test_data['Accompanied']=test_data['Accompanied'].astype(str)","67c8eb33":"test_data","c50e1f76":"test_data.drop(['SibSp','Parch'],axis=1,inplace=True)","1fbb410f":"test_data=pd.get_dummies(test_data)","97d2168b":"test_data.drop(['Pclass_1','Sex_female','Embarked_C','Accompanied_0'],axis=1,inplace=True)","b554805a":"test_data","76d22d5e":"test_data.drop('Fare',axis=1,inplace=True)","609bae2c":"X_test=ss.fit_transform(test_data)","0bd7ab43":"X_test","346b8e1b":"y_test_predict=log_reg.predict(X_test)","480a9e82":"submission=pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission","9aac3690":"submission['Survived']=y_test_predict","822cf6c6":"submission.set_index('PassengerId',inplace=True)","4b676fe1":"submission","a1aeaf1e":"submission.to_csv(\".\/submission.csv\")","1e51087b":"### \u7279\u5f81\u9009\u62e9\uff0c\u7ed3\u679c\u5c06Fare\u7279\u5f81\u5220\u53bb","817f77eb":"### \u8d85\u53c2\u6570\u641c\u7d22","01d546f3":"### Cabin\u7279\u5f81\u4e0e\u7ed3\u679c\u5173\u7cfb\u65e0\u6cd5\u8868\u793a\uff0c\u5220\u53bb\u6b64\u7279\u5f81","ffa659cd":"### Embarked\u7528\u4f17\u6570\u586b\u5145","7b6d06f6":"### \u4e3a\u9632\u6b62\u591a\u91cd\u5171\u7ebf\u6027\uff0c\u4ece\u6bcf\u4e2a\u7c7b\u522b\u4e2d\u5220\u53bb\u4e00\u4e2a\u7279\u5f81","961e162c":"### \u627e\u5230\u542b\u6709\u7f3a\u5931\u503c\u7684\u7279\u5f81","3da4ef07":"### \u5224\u65adLogisticRegression\u7ed3\u679c","d1d94b8e":"### \u6dfb\u52a0Accompanied\u7279\u5f81\uff0c\u82e5\u6709\u4eba\u966a\u540c\u8bb0\u4e3a1\uff0c\u5426\u5219\u8bb0\u4e3a0","0b2b31d6":"### \u8bfb\u5165\u6570\u636e","0d253f6f":"### \u5bf9\u81ea\u53d8\u91cf\u6807\u51c6\u5316","4251ef47":"### \u5bf9\u6d4b\u8bd5\u96c6\u6807\u51c6\u5316","5891fba8":"### \u5c06\u4e0a\u8ff0LogisticRegression\u6a21\u578b\u7528\u6765\u9884\u6d4b","3b061bd7":"### \u5bf9\u6d4b\u8bd5\u96c6\u91cd\u590d\u5982\u4e0a\u9884\u5904\u7406\u64cd\u4f5c","56c32812":"### \u7528\u4e2d\u4f4d\u6570\u586b\u5145Age\u7279\u5f81\u7684\u7f3a\u5931\u503c","d6fa6674":"### \u72ec\u70ed\u7f16\u7801","feef277c":"### PassengerId\uff0cName\uff0cTicket\u5747\u5220\u53bb"}}