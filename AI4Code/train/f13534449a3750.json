{"cell_type":{"72f0a2ad":"code","4aaabd64":"code","5baec851":"code","fa3dc5aa":"code","da7a4d21":"code","398c8147":"code","e7e6e0bc":"code","471468c8":"code","36a25da5":"code","af3e2b33":"code","e40bc5c5":"code","05d5d858":"code","ed96af92":"code","70e595df":"code","16311a09":"code","34301d84":"code","33d961d0":"code","ab1a2590":"code","9e09dc20":"code","a9fe8b64":"code","10321042":"code","b7b5fe12":"code","9913af7e":"code","d9c12954":"code","9d3db55a":"code","b4ffb8b1":"code","7ebec186":"code","20e88503":"code","01ebd736":"code","726885e0":"markdown","7048fb5a":"markdown","8abc9d9b":"markdown","f8b24d05":"markdown","320576af":"markdown","ac7f49c0":"markdown","c4368207":"markdown","8b60aa6c":"markdown","79ed15fe":"markdown","93b31344":"markdown","b0adcc21":"markdown","93bed3b7":"markdown","e7612b7a":"markdown","cddf38bc":"markdown","ef93b78e":"markdown","17c7e98c":"markdown","3a0c9384":"markdown","8d3dd9a7":"markdown","0f0a7e73":"markdown","7732c900":"markdown","96b9f27e":"markdown","f18dcd1b":"markdown","ca2c44d4":"markdown","1e024588":"markdown","d63d92ee":"markdown","3b73ab2e":"markdown","cf9c3eca":"markdown"},"source":{"72f0a2ad":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt\n\n\nimport os #to load the data\nimport random\nimport PIL #manage images \n\nfrom skimage.io import imread, imshow, concatenate_images\nfrom skimage import io, transform\nfrom skimage.measure import label, regionprops","4aaabd64":"#apply a particluar mask over the image \ndef apply_mask(image, mask):\n    for x, y in mask:\n        image[x, y, [0, 1]] = 255\n    return image","5baec851":"def rle_to_pixels(rle_code):\n    '''\n    Transforms a RLE code string into a list of pixels of a (768, 768) canvas\n    '''\n    # Divide the rle in a list of pairs of ints rapresenring the (start,lenght)\n    rle_code = [int(i) for i in rle_code.split()] \n    \n    pixels = [\n        #Find the 2d coordinate for the canva using the mod function (%) and the integer division function(\/\/)\n        (pixel_position % 768, pixel_position \/\/ 768) \n        # I select the start pixel and the lenght of the line\n                 for start, length in list(zip(rle_code[0:-1:2], rle_code[1::2])) \n        # I screen all the pixel positions rapresenting (start,end)\n                 for pixel_position in range(start, start + length)] \n    return pixels","fa3dc5aa":"train = os.listdir(\"..\/input\/airbus-ship-detection\/train_v2\")\ntest = os.listdir(\"..\/input\/airbus-ship-detection\/test_v2\")\nsub= pd.read_csv(\"..\/input\/airbus-ship-detection\/sample_submission_v2.csv\", index_col=0).dropna()\n\n# Set paths\ndata_root = '..\/input\/airbus-ship-detection\/'\npath_train = os.path.join(data_root,'train_v2')\npath_test = os.path.join(data_root,'test_v2')\n\nprint(f\"Train files: {len(train)}. ---> {train[:3]}\")\nprint(f\"Test files :  {len(test)}. ---> {test[:3]}\")\n\n#PIL.Image.open(\"..\/input\/airbus-ship-detection\/train_v2\/000c34352.jpg\")\nprint(\"The dimension of the images is: \"+str(PIL.Image.open(\"..\/input\/airbus-ship-detection\/train_v2\/000c34352.jpg\").size))","da7a4d21":"# Plot some images from the train set \nw = 9\nh = 3\n\n# we resize the format of the images with a 200x200 shape\n# this function uses the open, resize and array functions to manage data visualizations\nload_img = lambda filename: np.array(PIL.Image.open(f\"..\/input\/airbus-ship-detection\/train_v2\/{filename}\").resize((200, 200)))\n\n_, axes_list = plt.subplots(h, w, figsize=(2*w, 2*h)) # define a grid of (w, h)\n\nfor axes in axes_list:\n    for ax in axes:\n        ax.axis('off')\n        img = np.random.choice(train) # take a random train filename\n        ax.imshow(load_img(img)) # load and show\n        ax.set_title(img)\n        ","398c8147":"df = pd.read_csv(\"..\/input\/airbus-ship-detection\/train_ship_segmentations_v2.csv\", index_col=0).dropna()\ndisplay(df.head())\n\nprint('Example of a encoding run-lenght format: \\n')\ndf['EncodedPixels']['000155de5.jpg']","e7e6e0bc":"# Read CSV as dataframe\ndf_count = pd.read_csv(os.path.join('..\/input\/airbus-ship-detection\/train_ship_segmentations_v2.csv'))\nprint('Total number of images (original): %d' % df_count['ImageId'].value_counts().shape[0])\n\n# Create a dataframe with unique images id as indexes and number of ships and image sizes as new columns\ndf_count = df_count[~df_count['ImageId'].isin(['6384c3e78.jpg'])] # remove corrupted file \nunique_img_ids = df_count.groupby('ImageId').size().reset_index(name='counts')\nprint('Total number of images (after removing corrupted images): %d' % df_count['ImageId'].value_counts().shape[0])","471468c8":"# Count number of ships per image\ndf_wships = df_count.dropna()\ndf_wships = df_wships.groupby('ImageId').size().reset_index(name='counts')\ndf_woships = df_count[df_count['EncodedPixels'].isna()]\n\nprint('Number of images with ships :     %d \\nNumber of images without ships : %d\\n  \\nProportion: %0.1f\\n ' \\\n      % (df_wships.shape[0], df_woships.shape[0], df_wships.shape[0] \/ df_woships.shape[0]))\n\n\nprint('Ration with ships:     ' +str(round((df_wships.shape[0]\/len(train)),2)))\nprint('Ration without ships:  ' +str(round((df_woships.shape[0]\/len(train)),2)))\n\n#make plots\n\nplt.figure(figsize=(15, 6))\n\nplt.subplot(1,2,1)\nplt.bar(['With ships','Without ships'], [len(df_wships),len(df_woships)], color = ['lightblue','pink'])\nplt.ylabel('Number of images')\nplt.title('Unbalanced Trainig Data')\nplt.grid()\n\nplt.subplot(1,2,2)\nplt.bar(['With ships','Without ships'], [len(df_wships)\/len(train),len(df_woships)\/len(train)], \n        color = ['lightblue','pink'])\nplt.ylabel('Number of images')\nplt.title('Unbalanced Trainig Data (Normalized)')\nplt.grid()","36a25da5":"# Plot histogram\nhist = df_wships.hist(bins=np.arange(df_wships['counts'].max())+0.5)\nplt.xticks(range(15))\nplt.title(\"Histogram of ships count\")\nplt.xlabel(\"Number of ships\")\nplt.ylabel(\"Number of images\")\nplt.show(hist)","af3e2b33":"from tabulate import tabulate\n\ncounts = df_wships['counts'].value_counts(sort=False)\nresults = [(i, counts[i]) for i in range(1,16)]\nprint(tabulate(results, headers=['number of ships','number of images'], tablefmt='presto'))","e40bc5c5":"def show_pixels_distribution(df):\n    \"\"\"\n    Prints the amount of ship and no-ship pixels in the df\n    \"\"\"\n    # Total images in the df\n    n_images = df['ImageId'].nunique() \n    \n    # Total pixels in the df\n    total_pixels = n_images * 768 * 768 \n\n    # Keep only rows with RLE boxes, transform them into list of pixels, sum the lengths of those lists\n    ship_pixels = df['EncodedPixels'].dropna().apply(rle_to_pixels).str.len().sum() \n\n    ratio = ship_pixels \/ total_pixels\n    print(f\"Ship: {round(ratio, 3)} ({ship_pixels})\")\n    print(f\"No ship: {round(1 - ratio, 3)} ({total_pixels - ship_pixels})\")\n    ","05d5d858":"# df = pd.read_csv(\"..\/input\/airbus-ship-detection\/train_ship_segmentations_v2.csv\")\n# show_pixels_distribution(df)\n","ed96af92":"# show_pixels_distribution(df.dropna())","70e595df":"# Plot some masks\nw = 8\nh = 2\n\n_, axes_list = plt.subplots(h, w, figsize=(2*w, 2*h))\nplt.subplots_adjust(wspace=0.4)\nax.set(xlim=(0, 768), ylim=(0, 768))\nfor axes in axes_list:\n    for ax in axes:\n        ax.axis('auto')\n        canvas = np.zeros((768, 768))\n        pixels = rle_to_pixels(np.random.choice(df['EncodedPixels']))\n        canvas[tuple(zip(*pixels))] = 1\n        ax.imshow(canvas);","16311a09":"#In some images there are more that one ship so the df has more than one row, we merge this data into one rle code\ndf = df.groupby(\"ImageId\")[['EncodedPixels']].agg(lambda rle_codes: ' '.join(rle_codes)).reset_index()\nload_img = lambda filename: np.array(PIL.Image.open(f\"..\/input\/airbus-ship-detection\/train_v2\/{filename}\"))","34301d84":"# Plot some images with maks\nw = 8\nh = 3\n\n_, axes_list = plt.subplots(h, w, figsize=(2*w, 2*h))\n\nfor axes in axes_list:\n    for ax in axes:\n        ax.axis('off')\n        row_index = np.random.randint(len(df)) # take a random row from the df\n        ax.imshow(apply_mask(load_img(df.loc[row_index, 'ImageId']), rle_to_pixels(df.loc[row_index, 'EncodedPixels'])))\n        ax.set_title(df.loc[row_index, 'ImageId'])","33d961d0":"masks = pd.read_csv(os.path.join('..\/input\/airbus-ship-detection\/train_ship_segmentations_v2.csv'))\nmasks = masks[~masks['ImageId'].isin(['6384c3e78.jpg'])] # remove corrupted file \n\nprint(masks.shape[0], 'masks found')\nprint(masks['ImageId'].value_counts().shape[0], 'unique images found')","ab1a2590":"# To an empty image correspond just one mask\nn_rem = 107443 # = 149999 - 42.556\nmasks = masks.drop(masks[masks.EncodedPixels.isnull()].sample(n_rem,random_state=42).index)","9e09dc20":"from sklearn.model_selection import train_test_split\nunique_img_ids = masks.groupby('ImageId').size().reset_index(name='counts')\ntrain_ids, valid_ids = train_test_split(unique_img_ids, \n                 test_size = 0.05, \n                 stratify = unique_img_ids['counts'],\n                 random_state=42\n                )\ntrain_df = pd.merge(masks, train_ids)\nvalid_df = pd.merge(masks, valid_ids)","a9fe8b64":"train_df['counts'] = train_df.apply(lambda c_row: c_row['counts'] if \n                                    isinstance(c_row['EncodedPixels'], str) else\n                                    0, 1)\nvalid_df['counts'] = valid_df.apply(lambda c_row: c_row['counts'] if \n                                    isinstance(c_row['EncodedPixels'], str) else\n                                    0, 1)","10321042":"print(train_df.ImageId.nunique(), 'unique images in train set')\nprint(valid_df.ImageId.nunique(),' unique images in test set')\n","b7b5fe12":"# Plot histogram\n\nhist = train_df.hist(bins=np.arange(train_df['counts'].max())-0.5)\nplt.xticks(range(15))\nplt.title(\"Histogram of ships count in training set\")\nplt.xlabel(\"Number of ships\")\nplt.ylabel(\"Number of images\")\nplt.show(hist)\n\n\nhist = valid_df.hist(bins=np.arange(valid_df['counts'].max())-0.5)\nplt.xticks(range(15))\nplt.title(\"Histogram of ships count in validation set\")\nplt.xlabel(\"Number of ships\")\nplt.ylabel(\"Number of images\")\nplt.show(hist)","9913af7e":"#save the dataset into .csv files\ntrain_df.to_csv('train_df.csv',index=False)\nvalid_df.to_csv('valid_df.csv',index=False)","d9c12954":"masks = pd.read_csv(os.path.join('..\/input\/airbus-ship-detection\/train_ship_segmentations_v2.csv'))\nmasks = masks[~masks['ImageId'].isin(['6384c3e78.jpg'])] # remove corrupted file \nmasks_ship = masks.drop(masks[masks.EncodedPixels.isnull()].index) # remove all the images without ships\n","9d3db55a":"from sklearn.model_selection import train_test_split\nunique_img_ids = masks_ship.groupby('ImageId').size().reset_index(name='counts')\ntrain_ids_ship, valid_ids_ship = train_test_split(unique_img_ids, \n                 test_size = 0.05, \n                 stratify = unique_img_ids['counts'],\n                 random_state=42\n                )\ntrain_df_ship = pd.merge(masks_ship, train_ids_ship)\nvalid_df_ship = pd.merge(masks_ship, valid_ids_ship)","b4ffb8b1":"train_df_ship['counts'] = train_df_ship.apply(lambda c_row: c_row['counts'] if \n                                            isinstance(c_row['EncodedPixels'], str) else\n                                            0, 1)\nvalid_df_ship['counts'] = valid_df_ship.apply(lambda c_row: c_row['counts'] if\n                                            isinstance(c_row['EncodedPixels'], str) else\n                                            0, 1)","7ebec186":"print(train_df_ship.ImageId.nunique(), 'unique images in train set')\nprint(valid_df_ship.ImageId.nunique(),' unique images in test set')\n","20e88503":"# Plot histogram\n\nhist = train_df_ship.hist(bins=np.arange(train_df_ship['counts'].max())+0.5)\nplt.xticks(range(15))\nplt.title(\"Histogram of ships count in training set\")\nplt.xlabel(\"Number of ships\")\nplt.ylabel(\"Number of images\")\nplt.show(hist)\n\n\nhist = valid_df_ship.hist(bins=np.arange(valid_df_ship['counts'].max())+0.5)\nplt.xticks(range(15))\nplt.title(\"Histogram of ships count in validation set\")\nplt.xlabel(\"Number of ships\")\nplt.ylabel(\"Number of images\")\nplt.show(hist)","01ebd736":"#save the dataset into .csv files\ntrain_df_ship.to_csv('train_df_ship.csv',index=False)\nvalid_df_ship.to_csv('valid_df_ship.csv',index=False)","726885e0":"## Data Sampling\n<a id=\"subsection-three-2\"><\/a>\n\nIt is possible to notive the unblancing of the dataset regarding the presence or not pf ships in the images. In particular in the trainig set we have arounf 22% of the images with ships while the others 78% without. As we will se later we want to select only the images with ships to manage the detection task, so it is a good idea to classify before the images according to the presence of ships and then proceeed with the detection. \n\nTo have a better performance in the classification it could be better to manipulate a little bit the images in such a way to have a better differentiation among the images and a better balancing between the high and low presence classes. In this section we will explore this kind of arguments.","7048fb5a":"### Loading the Datasets","8abc9d9b":"**Split into training and validation groups**\n\nWe stratify by the number of boats appearing so we keep the proportion of occurrences before the split.","f8b24d05":"### Run-length encoding \n\nThe encoded string looks like this: start, length, start, length, ... , where each pair of (start, length) draws a line of length pixeles starting from position start. The start position, in turn, is not a (x, y) coordinate but an index of the 1-d array resulting of flattening the 2-d image into a rows-after-row 1-d sequence of pixels. Knowing the shape of the images we can just unfold this 1-d representating into a 2-dimensions mask using \/\/ and %.\n\nWe load this .cvs file and write some useful functions to better use the econding.","320576af":"Are available two different datasets, one will be used for the training section. It is composed by 192556 different images in a .jpg format and a size of 768x768. The other dataset will be used for the test section and it is composed by 15606 images with the same characteristics. ","ac7f49c0":"<a id=\"subsection-one-2\"><\/a>\n## Functions","c4368207":"Recall that each image corresponds to a number of masks equal to the number of ships contained in the image.","8b60aa6c":"# Table of contents","79ed15fe":"The Challenge of detecting the ships in the images can be thought as a classification problem for pixels, where, for each image, we need to classify 768 \u00d7 768 pixels in one of two classes: ship and no-ship. At pixel level the problem of imbalance data is more accentuated than the case of considering the whole image. To find the proportion between ship and no-ship at pixel level we need to consider the total number of pixel and the pixel where the ships are. The total number of pixel is 768\u00d7768\u00d7n_imgs while the number of 'ship pixels' is the sum of the all the pair positions of the  strings encoded in 'EncodedPixels'. Finally the total amount of 'no ship pixels' is just: total pixels - 'ship pixels'. We tried to do that but, while counting the numbers of ship pixels, we exceeded the ammount of memory provide by Kaggle. Therefore we decided to report the results of other notebooks and discuss the results.\n","93b31344":"<a id=\"subsection-one-\"><\/a>\n\n## Statistics about data","b0adcc21":"Intro\n[Segmentation in Image Processing](#introduction)\n\n1.[Loading libraries and functions](#section-one)\n - [Libraries](#subsection-one-1)\n - [Functions](#subsection-two-1)\n \n2.[Exploratory Data Analysis (EDA)](#section-two)\n - [Statistics about data](#subsection-one-2)\n - [Images Visualizations](#subsection-two-2)\n - [Data Sampling](#subsection-three-2) \n","93bed3b7":"The class imbalance is reduced, but it is still very high: 5\u2030. So in the images with ships only 0.5% of the pixels are ships while 99.5% are no-ships. This condition of extreme class imbalance of the dataset is a problem and so we had to take this into account when deciding which strategy was best for solving the ship detection task.","e7612b7a":"**Split into training and validation groups**\n","cddf38bc":"<a id=\"section-two\"><\/a>\n# Exploratory Data Analysis","ef93b78e":"**Results** (considering only the images with ships):\n\n\nShip: 0.005 (127777104)\n\n\nNo ship: 0.995 (24972773040)","17c7e98c":"#  \ud83d\udea2 Ship Detection: Image Visualizations and EDA\n\n<img src= \"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcR-Yxy_PxDspM7V39A-jp2dBv29geaV4OiDxg&usqp=CAU\" alt =\"Ships\" style='width: 400px;'>\n\nThe goal of this challange is to detect and mask ships from satellite images. There are both trainig and test data available with masks on the ships encoded with a run-lenght encoding style, as we will se later. The main difficult is due to the fact that the dataset is very big and unbalanced in a sense of presence of ships in the images. Furthermore the images are from satellities and the ships rapresent only a small section over the total if we consider the pixels. We will follow a summary as follow:","3a0c9384":"To obtain the first dataset (50% Ship + 50% No Ship) we need to undersample the empty images. The number of images with ships are 42.556 so we need to remove 107443 (=149999 - 42.556) images from the no ship class.","8d3dd9a7":"**Create different datasets**\n\nOne way to proceed can be to make the dataset used for the trainig in the classification task more balanced, in this case we can use all the images with ships and balance the dataset with part of the non-ship images. We will create two different dataset as follow:\n\n* 50% Ship + 50% No Ship ---> Total of 85.112 Images\n* 100% Ship + 0% No Ship ---> Total of 42.556  Images\n\nWe will train the classifier and test the performace for different trainig sets. ","0f0a7e73":"To obtain the second dataset (100% Ship + 0% No Ship) we need to remove all the images without ships from the original dataset.","7732c900":"**Results** (considering the whole dataset):\n\nShip:    0.001 (127777104) \n\nNo ship: 0.999 (113446373040)","96b9f27e":"<a id=\"section-one\"><\/a>\n## Loading libraries and functions\n\nIn this section we will load the libraries and the function that will be used in the notebook.","f18dcd1b":"As we can see from the results,  only 1\u2030 of the pixels are *ships*, while 99.9% of the pixels are *no-ships*. This imply that the dataset is very unbalanced at pixel level. Below we have reported the results considering only the images with the ships, to understand if the problem persists.","ca2c44d4":"## Images Visualizations\n<a id=\"subsection-two-2\"><\/a>\n\nIn this section we will investigate better the dataset, in particular the images and the masks that will be used in the training part. \nFirstly we plot only the maks, while in after we merge the images with the mask obtaining the real satellite image with the presenceof the ship detected. ","1e024588":"<a id=\"introduction\"><\/a>\n## Segmentation in Image Processing\n\nIn image processing and computer vision image segmentation is a very important and useful task. It consists in partitioning the image into multiple segments, or sets of pixels that belong to a patrticular class. In particular the task is to assing a particular label to every pixel in the image based on some shared characteristics, the results produces a mask, a set of segments that cover the entire or part of the image. The applications of this kind of machine learning task are huge for example in the medical imaging of face recogniction.\n\nThere are two main segmentation approches:\n* **Semantic Segmentation**: all pixels belonging to a particular class are considered together as one mask.\n* **Instance Segmentation**: the pixels are divided into different objects, even if belong to the same class.\n\nIn our case the problem is a Instance Segmentation one, in particular we have to match every ship in the images and find the pixels belonging to that particular class. \n\n\n\n\n","d63d92ee":"We will continue the challange in another notebook to have a better reading and organization. In this first notebook we faced the problem and analyze the data avalibale. In particulat we detected an high unbalanced classification problem (pixel level). We shown the masks and the images and the distributions of images with and without ships. In the next notebooks we will explore the classification of images into two classes, one with ship and another without ships. ","3b73ab2e":"In this section we will report the function we used for different purpose, this will help us in the computation and in the readness of the notebook.\n\n","cf9c3eca":"<a id=\"subsection-one-1\"><\/a>\n## Libraries\nImporting all the libraries used in the notebook "}}