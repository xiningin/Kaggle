{"cell_type":{"54d3e8c4":"code","f49403a2":"code","cffd96ec":"code","3ef0dbca":"code","00ff2d69":"code","3cffe557":"code","276a3034":"code","0713209b":"code","e1f5e1cf":"code","2403152f":"code","6f9cf1f2":"code","91696967":"code","eb7b9768":"code","35f0401a":"markdown","51513d62":"markdown"},"source":{"54d3e8c4":"!pip install spacy","f49403a2":"import numpy as np\nimport pandas as pd\nimport spacy\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics.pairwise import cosine_distances\nfrom tqdm.notebook import tqdm\n\nimport spacy.cli\nspacy.cli.download(\"en_core_web_md\")\nimport en_core_web_md\nnlp = en_core_web_md.load()","cffd96ec":"# load the data\ndata_df = pd.read_csv(\"\/kaggle\/input\/jobposts\/data job posts.csv\")\ndata_df.head()","3ef0dbca":"# check the missing values\ndata_df.isna().sum()","00ff2d69":"# drop the rows without descriptions or titles\ndata_df = data_df.dropna(subset=['Title', 'JobDescription'])\ndata_df = data_df.drop(\"jobpost\", axis=1)","3cffe557":"# let's get the job title and describtion\ntitles = data_df['Title'].values\ndescribtions = data_df['JobDescription'].values","276a3034":"# let's build the vectors for the describtion\ndescribtion_vectors = np.zeros((len(describtions), 300))\nfor i, desc in enumerate(tqdm(nlp.pipe(describtions), total=len(describtions))):\n    vector = np.zeros(300,)\n    valid_tokens = 0\n    for token in desc:\n        if not token.is_stop and not token.is_punct and token.has_vector:\n            vector += token.vector\n            valid_tokens += 1\n    vector = vector\/valid_tokens if valid_tokens > 1 else vector \n    describtion_vectors[i, :] = vector\nprint(\"all jobs were vectorized !\")","0713209b":"# export the vectors and the new data frame (if you need to)\nnp.save(\"jobs_vectors.npy\", describtion_vectors)\ndata_df.to_csv(\"cleaned_data.csv\", index=False)","e1f5e1cf":"# now let's build a KNN model\nknn = KNeighborsClassifier(weights='distance', metric=lambda v1, v2: cosine_distances([v1], [v2])[0])\nknn.fit(describtion_vectors, titles)","2403152f":"def sent2vect(text):\n    vector = np.zeros(300,)\n    valid_tokens = 0\n    for token in nlp(text):\n        if not token.is_stop and not token.is_punct and token.has_vector:\n            vector += token.vector\n            valid_tokens += 1\n    vector = vector\/valid_tokens if valid_tokens > 1 else vector\n    return vector","6f9cf1f2":"# let's test it !\nnew_job_desc = \"Machine learning engineer\"\n\nvector = sent2vect(new_job_desc)\nknn.predict(vector.reshape(1, -1))","91696967":"# let's try to build it ourself\ndef get_top_similar(job_desc, k=5):\n    vector = sent2vect(job_desc)\n    # get similarity scores\n    distances = cosine_distances([vector], describtion_vectors)\n    most_similar = np.argsort(distances).flatten()[:k]\n    return data_df.iloc[most_similar].to_dict(orient='records')","eb7b9768":"new_job_desc = \"fashion designer\"\n\nget_top_similar(new_job_desc)","35f0401a":"Now we can get a retrieve the top 5 jobs that are semantically similar to our query !","51513d62":"# Get most semantically similar job\n\nIn this notebook we search for jobs that are semantically similar and retrieve the most similar jobs, more of a job recommender based on data from [kaggle](https:\/\/www.kaggle.com\/madhab\/jobposts)"}}