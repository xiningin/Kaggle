{"cell_type":{"c0121e10":"code","e0de6a66":"code","e8fd6724":"code","fe56392c":"code","865d4a3a":"code","d2f1f98a":"code","d00cb30e":"code","6af1f047":"code","ba3733ba":"code","46413687":"code","bf443615":"code","09af35a0":"markdown","f11af30e":"markdown","ef717c56":"markdown","e6a21934":"markdown","244d0e46":"markdown","4ef55659":"markdown","103e132a":"markdown","f5b27d51":"markdown","4d84b5fd":"markdown","b67b57e9":"markdown"},"source":{"c0121e10":"!pip install https:\/\/github.com\/YBiryukov\/kaggle-environments\/archive\/master.zip\n","e0de6a66":"import imp\nfrom kaggle_environments import evaluate, make, utils\nfrom IPython.display import HTML, display\n\n\ndef arena_champion(leaderboard):\n    \"\"\" get the Arena Champion and, if the one is found, render Champion vs Champion game \"\"\"\n    # reveal the Arena Champion\n    if leaderboard[0][\"points\"] == leaderboard[1][\"points\"]:\n        display(HTML('<h1 style=\"text-align: center !important;\">There is no distinct champion today<\/h1>'))\n    else:\n        html = f'<h1 style=\"color: DarkGoldenRod !important; text-align: center !important;\">{leaderboard[0][\"name\"]} is the Champion of the Arena!!!<\/h1>'\n        display(HTML(html))\n        # render champion vs champion game\n        env = make(\"asteroids\", configuration={\"episodeSteps\": 1000}, debug=True)\n        env.run([leaderboard[0][\"function\"], leaderboard[0][\"function\"]])\n        # width=630, height=530 to explicitly see the borders of canvas\n        env.render(mode=\"ipython\", width=630, height=530)  \n    \ndef enter_the_arena(the_agent):\n    \"\"\" send the agent to the arena to fight against all other agents \"\"\"\n    global html\n    # table headers\n    html += \"<tr><th>Agent<\/th><th>Points<\/th><th>Points<\/th><th>Agent<\/th><\/tr>\"\n    \n    for agent in agents:\n        if the_agent[\"name\"] != agent[\"name\"]:\n            results, points = fight(the_agent[\"function\"], agent[\"function\"], the_agent[\"name\"], agent[\"name\"])\n            agent[\"points\"] += -points\n            the_agent[\"points\"] += points\n            the_agent[\"fights\"].append({\n                \"opponent\": agent[\"name\"],\n                \"results\": results\n            })\n\ndef fight(agent_1, agent_2, agent_1_name, agent_2_name):\n    \"\"\" a fight between two agents, returns list of results and points for agent_1 \"\"\"\n    global html\n    \n    results = evaluate(\n                    \"asteroids\",\n                    [agent_1, agent_2],\n                    num_episodes=ROUNDS_AMOUNT \/\/ 2,\n                    configuration={\"episodeSteps\": 1000, \"agentExec\": \"LOCAL\"}\n              )\n    # switch ship's numbers of agents\n    reversed_results = evaluate(\n                            \"asteroids\",\n                            [agent_2, agent_1],\n                            num_episodes=ROUNDS_AMOUNT \/\/ 2,\n                            configuration={\"episodeSteps\": 1000, \"agentExec\": \"LOCAL\"}\n                       )\n    # adapt reversed_results for results\n    for reversed_result in reversed_results:\n        reversed_result.reverse()\n    # add reversed_results to results\n    results.extend(reversed_results)\n\n    # calculate results\n    agent_1_won = 0\n    agent_2_won = 0\n    tie = 0\n    for result in results:\n        agent_1_score = result[0]\n        agent_2_score = result[1]\n        if agent_1_score > agent_2_score:\n            agent_1_won += 1\n        elif agent_1_score < agent_2_score:\n            agent_2_won += 1\n        else:\n            tie += 1\n\n    # table data\n    html += f'<tr><td>{agent_1_name}<\/td><td>{agent_1_won}<\/td><td>{agent_2_won}<\/td><td>{agent_2_name}<\/td><\/tr>'\n    \n    # evaluate points\n    if agent_1_won > agent_2_won:\n        return results, 1\n    elif agent_2_won > agent_1_won:\n        return results, -1\n    else:\n        return results, 0\n\ndef get_leaderboard(agents):\n    \"\"\" form, print and return the leaderboard \"\"\"\n    global html\n    \n    leaderboard = sorted(agents, key=lambda a: a[\"points\"], reverse=True)\n    \n    # table headers\n    html += \"<tr><th>Place<\/th><th>Won - Lost<\/th><th>Agent<\/th><\/tr>\"\n    for i in range(len(leaderboard)):\n        # table data\n        html += f'<tr><td>{i + 1}<\/td><td>{leaderboard[i][\"points\"]}<\/td><td>{leaderboard[i][\"name\"]}<\/td><\/tr>'\n    return leaderboard\n\ndef show_details(fights_results):\n    \"\"\" print result of each round of the fight \"\"\"\n    print(\"Results of all fights:\")\n    for fight in fights_results:\n        print(f'\\nOpponent: \\33[33m{fight[\"opponent\"]}\\33[0m')\n        for result in fight[\"results\"]:\n            print(result)\n\n\n# total amount of rounds in each fight, always even number\nROUNDS_AMOUNT = 10\n\n# style for HTML tables\ntable_style = \"\"\"\n<style>\n    th, tr, td {\n        text-align: center !important;\n        font-size: 20px !important;\n        border: 1px solid #ddd !important;\n    }\n<\/style>\n\"\"\"\n","e8fd6724":"agents = []\nagent_index = 0\n\n# avoiding_and_firing_bot\nname = \"avoiding_and_firing_bot\"\npath = \"..\/input\/asteroids-bots-for-the-arena\/avoiding_and_firing_bot.asteroids\"\nagents.append({\n        \"name\": name,\n        # name of agent's entry point function: my_agent\n        \"function\": imp.load_compiled(name, path).my_agent\n    })\n\n# my_best_agent\nname = \"my_best_agent\"\npath = \"..\/input\/asteroids-bots-for-the-arena\/my_best_agent.asteroids\"\nagents.append({\n        \"name\": name,\n        # name of agent's entry point function: my_agent\n        \"function\": imp.load_compiled(name, path).my_agent\n    })\n\n# avoiding_bot\nname = \"avoiding_bot\"\npath = \"..\/input\/asteroids-bots-for-the-arena\/avoiding_bot.asteroids\"\nagents.append({\n        \"name\": name,\n        # name of agent's entry point function: my_agent\n        \"function\": imp.load_compiled(name, path).my_agent\n    })\n\nfor agent in agents:\n    agent[\"points\"] = 0\n    agent[\"fights\"] = []\n","fe56392c":"html = f'{table_style}<table>'\n\n# FIGHT!!!\nenter_the_arena(agents[agent_index])\nagent_index += 1\n\nhtml += \"<\/table>\"\ndisplay(HTML(html))\n    ","865d4a3a":"# show the boring stuff\nshow_details(agents[agent_index - 1][\"fights\"])\n","d2f1f98a":"html = f'{table_style}<table>'\n\n# FIGHT!!!\nenter_the_arena(agents[agent_index])\nagent_index += 1\n\nhtml += \"<\/table>\"\ndisplay(HTML(html))\n    ","d00cb30e":"# show the boring stuff\nshow_details(agents[agent_index - 1][\"fights\"])\n","6af1f047":"html = f'{table_style}<table>'\n\n# FIGHT!!!\nenter_the_arena(agents[agent_index])\nagent_index += 1\n\nhtml += \"<\/table>\"\ndisplay(HTML(html))\n","ba3733ba":"# show the boring stuff\nshow_details(agents[agent_index - 1][\"fights\"])\n","46413687":"html = f'{table_style}<table>'\n\n# form, print and return the leaderboard\nleaderboard = get_leaderboard(agents)\n\nhtml += \"<\/table>\"\ndisplay(HTML(html))\n","bf443615":"# reveal Arena Champion and render Champion vs Champion game\narena_champion(leaderboard)\n\n# to change speed of the rendering,\n# click on the canvas and then press one of the numbers on the keyboard,\n# (numbers that are above character buttons, not numbers that are on the right side of the keyboard)\n# recommended speed: 7","09af35a0":"# Today's Champion of the Arena","f11af30e":"# avoiding_and_firing_bot","ef717c56":"# Preparing the Arena","e6a21934":"# avoiding_bot","244d0e46":"# This is the Arena for Agents of the Asteroids Game\n* Code on GitHub: [asteroids](https:\/\/github.com\/YBiryukov\/kaggle-environments\/tree\/master\/kaggle_environments\/envs\/asteroids)\n* Starter notebook: [Asteroids: Starter Notebook](https:\/\/www.kaggle.com\/yegorbiryukov\/asteroids-starter-notebook)\n* Dataset with bots: [Asteroids: Bots](https:\/\/www.kaggle.com\/yegorbiryukov\/asteroids-bots)\n* Discussion topic: [Game of Asteroids](https:\/\/www.kaggle.com\/general\/201817)","4ef55659":"# my_best_agent","103e132a":"# How to send your agents to this Arena\n* using [Asteroids: Starter Notebook](https:\/\/www.kaggle.com\/yegorbiryukov\/asteroids-starter-notebook) compile `YOUR_AGENT.py` as `YOUR_AGENT.asteroids`\n* download `YOUR_AGENT.asteroids` file\n* create public dataset for your Arena agents, [example](https:\/\/www.kaggle.com\/yegorbiryukov\/asteroids-bots-for-the-arena)\n* upload `YOUR_AGENT.asteroids` to your public dataset\n* write a link to that dataset in Asteroids: Arena comments, along with the name of your agent's entry point function (`my_agent` is preferable), and I will send agents from that dataset to the Arena\n\nOr just fork this notebook and go build your own Arena, with blackjack and... bots ;)","f5b27d51":"# Leaderboard","4d84b5fd":"# Please welcome the Agents:","b67b57e9":"# <span style=\"color: Maroon; text-align: center; display: block;\">WELCOME TO THE ARENA<p id=\"tournamentDate\" style=\"color: Black; text-align: center;\">tournament of 2020-12-12<\/p><\/span>"}}