{"cell_type":{"28703306":"code","a2ea9b85":"code","c134d832":"code","a824a7eb":"code","1d51bcc0":"code","6341d3ac":"code","d921f9d1":"code","26f0a5ac":"code","1f8dec01":"code","c74f62d1":"code","8bb67551":"code","82a3de58":"code","2edc2555":"code","1d371f05":"code","79c14ed2":"code","88c4b5a6":"code","b585239d":"code","6e6b65bb":"markdown","620039ab":"markdown","712c004d":"markdown","f1b9152f":"markdown","3aef13f6":"markdown","8e9fa1fc":"markdown","f3bbb0c4":"markdown","e61ef2c4":"markdown"},"source":{"28703306":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler , StandardScaler, RobustScaler\nimport seaborn as sns\nsns.set(color_codes = True)\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a2ea9b85":"df = pd.read_csv('..\/input\/clothessizeprediction\/final_test.csv')\ndf.head() # Visualize first 5 rows of data","c134d832":"df.describe()","a824a7eb":"pd.isna(df).sum()","1d51bcc0":"df['age'].fillna(df['age'].mean(), inplace=True)\ndf['height'].fillna(df['height'].mean(), inplace=True)","6341d3ac":"pd.isna(df).sum()","d921f9d1":"sns.countplot(df['size'])\nplt.show()","26f0a5ac":"from sklearn.preprocessing import LabelEncoder\nLBE = LabelEncoder()\ndf['size_class'] = LBE.fit_transform(df['size'])","1f8dec01":"df.head()","c74f62d1":"sns.countplot(df['size_class'])\nplt.show()","8bb67551":"# Create target variable\nY = df['size_class']\nY.head()","82a3de58":"X = df.iloc[:,:3]","2edc2555":"standard = MinMaxScaler()\nstd_x = standard.fit_transform(X)","1d371f05":"X_train, X_test, y_train, y_test = train_test_split(std_x,Y,test_size=0.20,random_state = 40)\nprint('Shape of Training Xs:{}'.format(X_train.shape))\nprint('Shape of Test Xs:{}'.format(X_test.shape))","79c14ed2":"learner = LogisticRegression(max_iter=10000); #initializing Logistic Regression model\n\nlearner.fit(X_train,y_train); #training the Logistic Regression model\ny_predicted = learner.predict(X_test)\nscore=learner.score(X_test,y_test);#testing the Logistic Regression model","88c4b5a6":"print(score)\nprint(y_predicted)","b585239d":"df_new = pd.DataFrame({\"true_score\":y_test,\"predicted_score\":y_predicted})\ndf_new","6e6b65bb":"## 8. Predict outcome","620039ab":"## 3. Finding null values","712c004d":"## 7. Build Logistic Regression model","f1b9152f":"## 2. Load Data","3aef13f6":"## 5. Preprocessing of Data","8e9fa1fc":"## 6. Split Data in Training & Testing samples","f3bbb0c4":"## 4. Visualize Data","e61ef2c4":"## 1. Load Libraries"}}