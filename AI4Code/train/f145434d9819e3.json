{"cell_type":{"c9f0bbc7":"code","cd97a3c7":"code","38c174dc":"code","e33d856c":"code","f93a744e":"code","ae4e8798":"code","d9852e95":"code","38be89fe":"code","a7d0af80":"code","a1f6ca83":"code","7603a1c4":"code","d247a058":"code","99988904":"code","a0fcb1ed":"code","7d6b9d63":"code","19cc11c8":"code","e3591936":"code","70594ded":"code","3cfa59d1":"code","016bf039":"code","a3ea3b37":"code","4dac46e0":"code","8aae35c0":"code","f05bfbcc":"code","9c83c670":"code","5355590d":"code","ef45cdb8":"code","b0879dd3":"code","18b3fe5b":"code","3b2f6843":"code","9b7409b6":"code","7dff9588":"code","f074e215":"code","f7faa163":"code","e52f3437":"code","b772e662":"code","f31c67ec":"markdown","409c3aab":"markdown","a2779c25":"markdown","cfe406be":"markdown","726ffe2b":"markdown","55b10900":"markdown","66542e24":"markdown","fbf65de8":"markdown","55efe23f":"markdown","7437098b":"markdown","ce00ef28":"markdown","d8c5c060":"markdown","54079fff":"markdown","ea3faab1":"markdown","50bdab9e":"markdown","75ae4e1e":"markdown","4b84780c":"markdown","2c8d986c":"markdown","451f3e99":"markdown","f6254334":"markdown","a3e81658":"markdown","2ac60905":"markdown","e81444af":"markdown","76a0af07":"markdown","d2c2cb3d":"markdown","05db43c7":"markdown","b5788997":"markdown","509711db":"markdown","54132201":"markdown"},"source":{"c9f0bbc7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cd97a3c7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report,mean_squared_error\nimport plotly.figure_factory as ff\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\n","38c174dc":"df=pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf.head()","e33d856c":"df.isnull().sum()","f93a744e":"sns.heatmap(df.isnull())","ae4e8798":"df.info()","d9852e95":"df.describe()","38be89fe":"for i in df.columns:\n    if df[i].nunique() < 3:\n        print(i)","a7d0af80":"fig=ff.create_distplot([df['age'].values],['age'])\nfig.update_layout(title_text='Age Distribution plot')\nfig.show()","a1f6ca83":"fig=ff.create_distplot([df['serum_sodium'].values],['serum_sodium'])\nfig.update_layout(title_text='serum_sodium Distribution plot')\nfig.show()\n","7603a1c4":"fig = px.histogram(df, x=\"time\", color=\"DEATH_EVENT\", marginal=\"box\", hover_data=df.columns)\nfig.show()","d247a058":"surv = df[df[\"DEATH_EVENT\"]==0][\"age\"]\nnot_surv = df[df[\"DEATH_EVENT\"]==1][\"age\"]\nhist_data = [surv,not_surv]\ngroup_labels = ['Survived', 'Not Survived']\nfig = ff.create_distplot(hist_data, group_labels, bin_size=0.5)\nfig.update_layout(title_text=\"Analysis in Age on Survival Status\")\nfig.show()","99988904":"fig=px.violin(df,x='diabetes',y='age',color='DEATH_EVENT',points='all',box=True)\nfig.update_layout(title_text='Analysis in Age and Diabetes on Survival Status')\nfig.show()","a0fcb1ed":"fig=px.violin(df,x='sex',y='age',color='DEATH_EVENT',points='all',box=True)\nfig.update_layout(title_text='Analysis in Age and Gender on Survival Status')\nfig.show()","7d6b9d63":"fig=px.violin(df,x='smoking',y='age',color='DEATH_EVENT',points='all',box=True)\nfig.update_layout(title_text='Analysis in Age and smoking on Survival Status')\nfig.show()","19cc11c8":"fig=px.histogram(df,x='creatinine_phosphokinase',color='DEATH_EVENT',marginal='box')\nfig.update_layout(title_text='Analysis of creatinine_phosphokinase wrt Death Event')\nfig.show()","e3591936":"fig=px.histogram(df,x='ejection_fraction',color='DEATH_EVENT',marginal='box')\nfig.update_layout(title_text='Analysis of ejection_fraction wrt Death Event')\nfig.show()","70594ded":"fig=px.histogram(df,x='platelets',color='DEATH_EVENT',marginal='box')\nfig.update_layout(title_text='Analysis of platelets wrt Death Event')\nfig.show()","3cfa59d1":"fig = px.histogram(df, x=\"serum_creatinine\", color=\"DEATH_EVENT\", marginal=\"box\", hover_data=df.columns)\nfig.show()","016bf039":"fig = px.histogram(df, x=\"serum_sodium\", color=\"DEATH_EVENT\", marginal=\"box\",hover_data=df.columns)\nfig.show()","a3ea3b37":"male = df[df[\"sex\"]==1]\nfemale = df[df[\"sex\"]==0]\n\n\nlabels = ['Male - Survived','Male - Not Survived', \"Female -  Survived\", \"Female - Not Survived\"]\nvalues = [len(male[df[\"DEATH_EVENT\"]==0]),len(male[df[\"DEATH_EVENT\"]==1]),\n          len(female[df[\"DEATH_EVENT\"]==0]),len(female[df[\"DEATH_EVENT\"]==1])]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(title_text=\"Analysis on Survival - Gender\")\nfig.show()","4dac46e0":"diabetes = df[df[\"diabetes\"]==1][\"age\"]\nnot_diabetes = df[df[\"diabetes\"]==0][\"age\"]\nhist_data = [diabetes,not_diabetes]\ngroup_labels = ['Diabetes', 'Not having Diabetes']\nfig = ff.create_distplot(hist_data, group_labels, bin_size=0.5)\nfig.update_layout(title_text=\"Analysis in Age on Diabetes Status\")\nfig.show()","8aae35c0":"labels = ['No Diabetes','Diabetes']\ndiabetes_yes = df[df['diabetes']==1]\ndiabetes_no = df[df['diabetes']==0]\nvalues = [len(diabetes_no), len(diabetes_yes)]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(\n    title_text=\"Analysis on Diabetes\")\nfig.show()","f05bfbcc":"yes_diabetes=df[df['diabetes']==1]\nno_diabetes=df[df['diabetes']==0]\n\ndia_deaths=yes_diabetes[df['DEATH_EVENT']==1]\ndia_live=yes_diabetes[df['DEATH_EVENT']==0]\nno_dia_deaths=no_diabetes[df['DEATH_EVENT']==1]\nno_dia_live=no_diabetes[df['DEATH_EVENT']==0]\nlabels=['died having diabetes','survived having diabetes','died not having diabetes','survived not having diabetes']\nvalues=[len(dia_deaths),len(dia_live),len(no_dia_deaths),len(no_dia_live)]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(title_text='testing')\nfig.show()","9c83c670":"plt.figure(figsize=(10,7))\nsns.heatmap(df.corr(),annot=True)","5355590d":"X=X=df.drop('DEATH_EVENT',axis=1)\ny=df['DEATH_EVENT']\nprint(X.shape)\nprint(y.shape)","ef45cdb8":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)","b0879dd3":"print(len(X_train))\nprint(len(y_train))","18b3fe5b":"model=LogisticRegression()\nmodel.fit(X_train,y_train)\ny_pred=model.predict(X_test)\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"testing Score:\\n\",model.score(X_test,y_test)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\nprint(model.get_params())","3b2f6843":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nparams={\n    'penalty':['l1','l2','elasticnet,none'],\n    'C':[0.1,1,5,10,100],\n    'solver':['neton-cg','lbfgs','liblinear','sag','saga'],\n    'max_iter':[50,100,1000,2000,5000]\n}\nmodel1=GridSearchCV(model,param_grid=params,cv=5,n_jobs=-1)\nmodel1.fit(X_train,y_train)\nprint(model1.best_estimator_)\nprint(model1.best_params_)\ny_pred=model1.predict(X_test)\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",model.score(X_train,y_train)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\n","9b7409b6":"model=SVC()\nmodel.fit(X_train,y_train)\ny_pred=model.predict(X_test)\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"testing Score:\\n\",model.score(X_test,y_test)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\nprint(model.get_params())","7dff9588":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\ndtree.fit(X_train,y_train)\ny_pred=dtree.predict(X_test)\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"testing Score:\\n\",dtree.score(X_test,y_test)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\n","f074e215":"model=RandomForestClassifier()\nmodel.fit(X_train,y_train)\ny_pred=dtree.predict(X_test)\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",model.score(X_train,y_train)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\nprint(model.get_params())\nprint('accuracy score',accuracy_score(y_test,y_pred)*100)","f7faa163":"model=GradientBoostingClassifier()\nmodel.fit(X_train,y_train)\ny_pred=model.predict(X_test)\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",model.score(X_train,y_train)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\nprint(model.get_params())\nprint('accuracy score',accuracy_score(y_test,y_pred)*100)","e52f3437":"model1=XGBClassifier()\nmodel1.fit(X_train,y_train)\ny_pred=model1.predict(X_test)\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",model1.score(X_train,y_train)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\nprint(model1.get_params())\nprint('accuracy score',accuracy_score(y_test,y_pred)*100)","b772e662":"from sklearn.ensemble import ExtraTreesClassifier\nabc = ExtraTreesClassifier()\nabc.fit(X_train,y_train)\ny_pred=model1.predict(X_test)\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",abc.score(X_train,y_train)*100)\nprint(\"Mean Squared Error:\\n\",mean_squared_error(y_test,y_pred))\nprint(abc.get_params())\nprint('accuracy score',accuracy_score(y_test,y_pred)*100)","f31c67ec":"**Detailed plots for calculating survived and death counts**","409c3aab":"# **If you like the notebook please do UPVOTE!!!!!**","a2779c25":"> **Gradient boosting**","cfe406be":"# **Models**","726ffe2b":"> **Normal serum_sodium ranges between 135-143**","55b10900":"> There are no categorical values we have only numeric values","66542e24":"> let's plot Age and somking with death event(we will understand wether person who used to smoke has more death occur","fbf65de8":"> Male survival percent - 44.1%\n\n> Male death percent - 20.7%\n\n> Female survival percent - 23.7%\n\n> Female death percent - 11.4%","55efe23f":"> **Random Forest Classifier**","7437098b":"**Death is mostly due to**\n\n**Gender**\n\n**Diabetes**\n\n**Smoking**\n\n> let's plot all of the these important features with Age column and correlate to Death event","ce00ef28":"> **Logistic Regression**","d8c5c060":"# **IF YOU LIKE THIS NOTEBOOK PLEASE DO UPVOTE!!!**\n# *feel free to suggest what else i can do to make it better*","54079fff":"> **Decision Tree**","ea3faab1":"> lets calculate how many people has diabetes has correlation to death event","50bdab9e":"> **Let's do EDA**","75ae4e1e":"**now let's plot other columns wrt to death event**","4b84780c":"**Logistic Regression -- 80%**\n\n**SVC -- 58%**\n\n**Decision Tree -- 63%**\n\n**Random Forest Classifier -- 63%**\n\n**Gradient Boosting -- 75%**\n\n**XGBoost -- 73%**\n\n**Extra tree Classifier -- 73%**","2c8d986c":"**anaemia**\n\n**diabetes**\n\n**high_blood_pressure**\n\n**sex**\n\n**smoking**\n\n**DEATH_EVENT**\n**are the columns who have 1 and 0 value in it**","451f3e99":"> **we are comparing time with death event Blue represents person died and red represents person survived**","f6254334":"> Maximum people died due to Heart failure at the age of 60 and 70\n\n> Minimum people survied are at the age of 50 and 60","a3e81658":"**FIRST WE WILL CHECK IS THERE ANY NULL VALUES**","2ac60905":"**Let's check how many columns has only 2 unique values**","e81444af":"> let's separate the dependent and independent columns","76a0af07":"> 58.2% people don't have diabetes \n\n> 41.8% people have diabetes ","d2c2cb3d":"> **SVC**","05db43c7":"> **XGB classifier**","b5788997":"**As we can see the maximum number people are between 50-70 age criteria**","509711db":"**Through visualization we can see there are no null values in our dataset**","54132201":"> **Extra tree classifier**"}}