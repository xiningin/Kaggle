{"cell_type":{"a41dbe36":"code","dafdde35":"code","79d3f925":"code","4270dabb":"code","a6afa6e8":"code","36cfb126":"code","720793e9":"code","055f4e10":"code","9f789593":"code","88fac6f6":"code","37b7caba":"code","fc02a463":"code","c525c0b1":"code","77c6961a":"code","a3f5d6a2":"code","37867903":"code","6ccdd778":"code","facc58c1":"code","8592ac0f":"markdown","f7f589c0":"markdown"},"source":{"a41dbe36":"import pandas as pd\nfrom pandas import Series, DataFrame\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","dafdde35":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nallData = pd.concat([train, test], ignore_index=True)\n# dataNum = train.shape[0]\n# featureNum = train.shape[1]\ntrain.info()","79d3f925":"# Sex\nsns.countplot('Sex', hue='Survived', data=train)\nplt.show()","4270dabb":"# Pclass\nsns.barplot(x='Pclass', y=\"Survived\", data=train)\nplt.show()\n# Pclass & Age\nsns.violinplot(\"Pclass\", \"Age\", hue=\"Survived\", data=train, split=True)\nplt.show()","a6afa6e8":"# FamilySize = SibSp + Parch + 1\n# FamilyLabel 0 1 2\nallData['FamilySize'] = allData['SibSp'] + allData['Parch'] + 1\nsns.barplot(x='FamilySize', y='Survived', data=allData)\nplt.show()","36cfb126":"# Embarked\nsns.countplot('Embarked', hue='Survived', data=train)\nplt.show()","720793e9":"# Age\nsns.stripplot(x=\"Survived\", y=\"Age\", data=train, jitter=True)\nplt.show()\nfacet = sns.FacetGrid(train, hue=\"Survived\",aspect=2)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlabel('Age') \nplt.ylabel('density') \nplt.show()\n# Age & Sex\nsns.swarmplot(x='Age', y=\"Sex\", data=train, hue='Survived')\nplt.show()","055f4e10":"# Fare\nsns.stripplot(x=\"Survived\", y=\"Fare\", data=train, jitter=True)\nplt.show()","9f789593":"# Name\n# allData['Title'] = allData['Name'].str.extract('([A-Za-z]+)\\.', expand=False) # str.extract\u4e0d\u77e5\u9053\u5728\u5e72\u561b\nallData['Title'] = allData['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip())\n# pd.crosstab(allData['Title'], allData['Sex'])\nTitleClassification = {'Officer':['Capt', 'Col', 'Major', 'Dr', 'Rev'],\n                       'Royalty':['Don', 'Sir', 'the Countess', 'Dona', 'Lady'],\n                       'Mrs':['Mme', 'Ms', 'Mrs'],\n                       'Miss':['Mlle', 'Miss'],\n                       'Mr':['Mr'],\n                       'Master':['Master','Jonkheer']}\nTitleMap = {}\nfor title in TitleClassification.keys():\n    TitleMap.update(dict.fromkeys(TitleClassification[title], title))\n    '''\n    # cnt = 0\n    for name in TitleClassification[title]:\n        cnt += allData.groupby(['Title']).size()[name]\n    # print (title,':',cnt)\n    '''\nallData['Title'] = allData['Title'].map(TitleMap)\nsns.barplot(x=\"Title\", y=\"Survived\", data=allData)\nplt.show()","88fac6f6":"TicketCnt = allData.groupby(['Ticket']).size()\nallData['SameTicketNum'] = allData['Ticket'].apply(lambda x:TicketCnt[x])\nsns.barplot(x='SameTicketNum', y='Survived', data=allData)\nplt.show()\n# allData['SameTicketNum']","37b7caba":"# Sex\nallData = allData.join(pd.get_dummies(allData['Sex'], prefix=\"Sex\"))\n# Pclass\nallData = allData.join(pd.get_dummies(allData['Pclass'], prefix=\"Pclass\"))\n# Embarked\nallData[allData['Embarked'].isnull()] # \u67e5\u770b\u7f3a\u5931\u503c\nallData.groupby(by=['Pclass','Embarked']).Fare.mean() # Pclass=1, Embark=C, \u4e2d\u4f4d\u6570=76\nallData['Embarked'] = allData['Embarked'].fillna('C')\nallData = allData.join(pd.get_dummies(allData['Embarked'], prefix=\"Embarked\"))","fc02a463":"# Age\nallData['Child'] = allData['Age'].apply(lambda x:1 if x <= 10 else 0) # \u513f\u7ae5\u6807\u7b7e\nallData['Age'] = (allData['Age']-allData['Age'].mean())\/allData['Age'].std() # \u6807\u51c6\u5316\nallData['Age'].fillna(value=0, inplace=True) # \u586b\u5145\u7f3a\u5931\u503c\n# Fare\nallData[allData['Survived'].notnull()]['Fare'] = allData[allData['Survived'].notnull()]['Fare'].apply(lambda x:300.0 if x>500 else x)\nallData['Fare'] = allData['Fare'].apply(lambda x:(x-allData['Fare'].mean())\/allData['Fare'].std())","c525c0b1":"# FamilySize\ndef FamilyLabel(s):\n    if (s == 4):\n        return 4\n    elif (s == 2 or s == 3):\n        return 3\n    elif (s == 1 or s == 7):\n        return 2\n    elif (s == 5 or s == 6):\n        return 1\n    elif (s < 1 or s > 7):\n        return 0\nallData['FamilyLabel'] = allData['FamilySize'].apply(FamilyLabel)\nallData = allData.join(pd.get_dummies(allData['FamilyLabel'], prefix=\"Fam\"))\n\n# Name\nTitleLabelMap = {'Mr':1.0,\n                 'Mrs':5.0,\n                 'Miss':4.5,\n                 'Master':2.5,\n                 'Royalty':3.5,\n                 'Officer':2.0}\ndef TitleLabel(s):\n    return TitleLabelMap[s]\n# allData['TitleLabel'] = allData['Title'].apply(TitleLabel)\nallData = allData.join(pd.get_dummies(allData['Title'], prefix=\"Title\"))\n\n# Ticket\ndef TicketLabel(s):\n    if (s == 3 or s == 4):\n        return 3\n    elif (s == 2 or s == 8):\n        return 2\n    elif (s == 1 or s == 5 or s == 6 or s ==7):\n        return 1\n    elif (s < 1 or s > 8):\n        return 0\nallData['TicketLabel'] = allData['SameTicketNum'].apply(TicketLabel)\nallData = allData.join(pd.get_dummies(allData['TicketLabel'], prefix=\"TicNum\"))","77c6961a":"# \u6e05\u9664\u65e0\u7528\u7279\u5f81\nallData.drop(['Cabin', 'PassengerId', 'Ticket', 'Name', 'Title', 'Sex', 'SibSp', 'Parch', 'FamilySize', 'Embarked', 'Pclass', 'Title', 'FamilyLabel', 'SameTicketNum', 'TicketLabel'], axis=1, inplace=True)\n\n# \u91cd\u65b0\u5206\u5272\u6570\u636e\u96c6\ntrain_data = allData[allData['Survived'].notnull()]\ntest_data  = allData[allData['Survived'].isnull()]\ntest_data = test_data.reset_index(drop=True)\n\nxTrain = train_data.drop(['Survived'], axis=1)\nyTrain = train_data['Survived']\nxTest  = test_data.drop( ['Survived'], axis=1)\n\nxTest['Fare'] = xTest['Fare'].fillna(30)\n\n# allData.columns.to_list()","a3f5d6a2":"# \u7279\u5f81\u95f4\u76f8\u5173\u6027\u5206\u6790\nCorrelation = pd.DataFrame(allData[allData.columns.to_list()])\ncolormap = plt.cm.viridis\nplt.figure(figsize=(24,22))\nsns.heatmap(Correlation.astype(float).corr(), linewidths=0.1, vmax=1.0, cmap=colormap, linecolor='white', annot=True)\nplt.show()","37867903":"from sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.feature_selection import SelectKBest","6ccdd778":"rfc = RandomForestClassifier(n_estimators=70, max_depth=6, random_state=10, max_features='sqrt')\nrfc.fit(xTrain, yTrain)\npredictions = rfc.predict(xTest)\n\noutput = pd.DataFrame({'PassengerId':test['PassengerId'], 'Survived':predictions.astype('int64')})\noutput.to_csv('my_submission.csv', index=False)","facc58c1":"'''\npipe = Pipeline([('select', SelectKBest(k=10)),\n                 ('classify', RandomForestClassifier(random_state = 10, max_features = 'sqrt'))])\nparam_test = {'classify__n_estimators':list(range(20,100,5)),\n              'classify__max_depth'   :list(range(3,10,1))}\ngsearch = GridSearchCV(estimator=pipe, param_grid=param_test, scoring='roc_auc', cv=10)\ngsearch.fit(xTrain, yTrain)\nprint (gsearch.best_params_, gsearch.best_score_)\n'''","8592ac0f":"# Features\nVariable | Definition | Key\n:-:|:-:|:-:\nsurvival | Survival | 0 = No, 1 = Yes\npclass | Ticket class(\u5ba2\u8231\u7b49\u7ea7) | 1 = 1st, 2 = 2nd, 3 = 3rd\nsex | Sex\nAge | Age in years\nsibsp | # of siblings \/ spouses aboard the Titanic(\u65c1\u7cfb\u4eb2\u5c5e)\nparch | # of parents \/ children aboard the Titanic(\u76f4\u7cfb\u4eb2\u5c5e)\nticket | Ticket number\nfare | Passenger fare\ncabin | Cabin number(\u5ba2\u8231\u7f16\u53f7)\nembarked | Port of Embarkation(\u4e0a\u8239\u7684\u6e2f\u53e3\u7f16\u53f7) | C = Cherbourg, Q = Queenstown, S = Southampton","f7f589c0":"# \u6570\u636e\u6e05\u6d17\n- Sex & Pclass & Embarked --> Ont-Hot\n- Age & Fare --> Standardize\n- FamilySize & Name & Ticket --> ints --> One-Hot"}}