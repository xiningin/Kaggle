{"cell_type":{"0705265d":"code","e9d220ec":"code","b12c6e85":"code","d38df1e1":"code","9bfa5ae8":"code","83d2f5fd":"code","13775354":"code","5c379fdc":"code","6688cb98":"code","c8e3dc76":"code","ef42062d":"code","2f4f336c":"code","24989d68":"code","5ac44fd1":"code","4e2455d1":"code","35ccbc00":"code","61dcbc82":"code","257ff4be":"code","84d52837":"code","063f4d34":"markdown","b3fd4325":"markdown","62bbe07e":"markdown","8747d96e":"markdown","e097debd":"markdown","ace9538b":"markdown","738bb97c":"markdown","5f63e669":"markdown","b35be3d3":"markdown"},"source":{"0705265d":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQqFDgSMuSpz3Oz7nDCc8k5vSUhRFMhoHEcUhP9DTuaU7P2WF4k&usqp=CAU',width=400,height=400)","e9d220ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n#plt.style.use('fivethirtyeight')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b12c6e85":"df = pd.read_excel('\/kaggle\/input\/pmpl-south-asia-2020-pubg\/PMPL South Asia.xlsx')\ndf.head()","d38df1e1":"plt.style.use('fivethirtyeight')\ndf.plot(subplots=True, figsize=(10, 10), sharex=False, sharey=False)\nplt.show()","9bfa5ae8":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Teams)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set2', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","83d2f5fd":"sns.countplot(df['Placement'],linewidth=3,palette=\"Set2\",edgecolor='black')\nplt.show()","13775354":"from category_encoders import OneHotEncoder\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler\n\ncols_selected = ['Teams']\nohe = OneHotEncoder(cols=cols_selected, use_cat_names=True)\ndf_t = ohe.fit_transform(df[cols_selected+['Placement']])\n\n#scaler = MaxAbsScaler()\nX = df_t.iloc[:,:-1]\ny = df_t.iloc[:, -1].fillna(df_t.iloc[:, -1].mean()) \/ df_t.iloc[:, -1].max()\n\nmdl = Ridge(alpha=0.1)\nmdl.fit(X,y)\n\npd.Series(mdl.coef_, index=X.columns).sort_values().head(10).plot.barh()","5c379fdc":"df['Total'].hist(figsize=(10,5), bins=20)","6688cb98":"sns.countplot(x=\"Total\",data=df,palette=\"GnBu_d\",edgecolor=\"black\")\nplt.xticks(rotation=45)\nplt.yticks(rotation=45)\n# changing the font size\nsns.set(font_scale=1)","c8e3dc76":"ax = df['Match Played'].value_counts().plot.barh(figsize=(14, 6))\nax.set_title('Match Played Distribution', size=18)\nax.set_ylabel('Match Played', size=14)\nax.set_xlabel('Total', size=14)","ef42062d":"from scipy.stats import norm, skew #for some statistics\nimport seaborn as sb\nfrom scipy import stats #qqplot\n#Lets check the ditribution of the target variable (Placement?)\nfrom matplotlib import rcParams\n# figure size in inches\nrcParams['figure.figsize'] = 4,2\n\nsb.distplot(df['Placement'], fit=norm)\n\n#Get the QQ-plot\nfig = plt.figure()\nres = stats.probplot(df['Placement'], plot=plt)\nplt.show()","2f4f336c":"from statsmodels.tsa.statespace.sarimax import SARIMAX\n#The data is highly skewed, but since we'll be applying ARIMA, it's fine.\ndf['Placement'].skew()","24989d68":"#Just in case if there needs to be some transformation, it can be done by either taking log values or using box cox.\n\n## In case you need to normalize data, use Box Cox. Pick the one that looks MOST like a normal distribution.\nfor i in [1,2,3,4,5,6,7,8]:\n    plt.hist(df['Placement']**(1\/i), bins= 40, normed=False)\nplt.title(\"Box Cox transformation: 1\/{}\". format(str(i)))\nplt.show()","5ac44fd1":"#Match Playe by order.\ndf['Match Played'].value_counts().sort_values(ascending = False)","4e2455d1":"df.groupby('Match Played').sum().sort_values('Placement', ascending = False)","35ccbc00":"print (len(df['Kills'].value_counts()))\n\nrcParams['figure.figsize'] = 50,14\nsb.countplot(df['Kills'].sort_values(ascending = True))\n\n#There's a lot of kills? on beginning of Kills?","61dcbc82":"#Lets check the orders by warehouse.\n\n#Checking with Boxplots\nfrom matplotlib import rcParams\n# figure size in inches\nrcParams['figure.figsize'] = 16,4\nf, axes = plt.subplots(1, 2)\n#Regular Data\nfig3 = sb.boxplot( df['Match Played'],df['Placement'], ax = axes[0])\n#Data with Log Transformation\nfig4 = sb.boxplot( df['Match Played'], np.log1p(df['Placement']),ax = axes[1])\n\ndel fig3, fig4","257ff4be":"#Lets check the Orders by Product Category.\nrcParams['figure.figsize'] = 50,12\n#Taking subset of data temporarily for in memory compute.\ndf_temp = df.sample(n=1000).reset_index()\nfig5 = sb.boxplot( df_temp['Kills'].sort_values(),np.log1p(df_temp['Placement']))\ndel df_temp, fig5","84d52837":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQE7yx-KglVbC9ZKWX138nxkqSGpc71cQ6tBfo5Rjgwx3ogzm_P&usqp=CAU',width=400,height=400)","063f4d34":"The n below was equal to 20000, however I wrote n=1000 to avoid Error: \"Cannot take a larger sample than population when 'replace=False'\"","b3fd4325":"Bivariate Analysis - Warehouse, Product Category with target variable.","62bbe07e":"phuketnews.easybranches.com","8747d96e":"I've no idea about what I did above or even how to fix it. If anybody knows I'd appreciate to tell me, therefore I could learn it.  ","e097debd":"PUBG Mobile South Asia Pro League is a PUBG Mobile professional league for the South Asia region. The league features top tier teams from India & the rest of South Asia. The Split will culminate at the PUBG Mobile World Championship 2020. https:\/\/liquipedia.net\/pubg\/PUBG_Mobile_Pro_League\/Spring\/2020\/South_Asia\/Regular_Season","ace9538b":"![](https:\/\/media3.giphy.com\/media\/jt2oYVtrxebtDATgsT\/200.webp?cid=ecf05e4701660c5f7c8b46f49dcd9af5b485246a44fba80f&rid=200.w)","738bb97c":"#Codes from Sanjoy Biswas  https:\/\/www.kaggle.com\/imsanjoykb\/forecast-order-demand-and-visualization","5f63e669":"Kaggle Notebook Runner: Mar\u00edlia Prata   @mpwolke","b35be3d3":"republicworld.com - WINNER WINNER CHICKEN DINNER is a phrase exclaimed to celebrate a victory, especially in gambling. It is also the phrase you will see if you win (you won't) a round of the video game PlayerUnknown's Battlegrounds. https:\/\/www.dictionary.com\/e\/slang\/winner-winner-chicken-dinner\/"}}