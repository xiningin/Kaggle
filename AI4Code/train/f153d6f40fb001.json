{"cell_type":{"d010741b":"code","e4e86805":"code","4b5986ac":"code","ca2a1a51":"code","def1c754":"code","a3735f72":"code","032e201f":"code","ed1ce12d":"code","593dd2c9":"code","db7f4ca2":"code","ef203eba":"code","7ac3a045":"code","cb56b410":"code","37e345a3":"code","13bb9e5f":"code","9fc02d72":"code","105c825d":"code","ccf94c2d":"code","add3f43c":"code","f7ee4180":"code","3fc56430":"code","e40a45ce":"code","4eb4d3fd":"code","f70df8b7":"code","5b515df7":"code","b1e82fd8":"code","bda39261":"code","862808d5":"code","b8b70408":"code","3814db1c":"code","98120ac2":"code","bc81b0eb":"code","32c1db12":"code","129f489a":"code","acdee1d4":"code","fdb08394":"code","41efeca2":"code","ead35095":"code","9d60ac90":"code","7f2dd7ba":"code","aecd3a3b":"code","df0b7876":"markdown","c6a83190":"markdown","fda65239":"markdown","ae3d8054":"markdown","2048412b":"markdown","a8f188ae":"markdown","66d20721":"markdown","5846f6a9":"markdown","98a32f31":"markdown","e501d3f5":"markdown"},"source":{"d010741b":"import numpy as np, pandas as pd,matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold\nimport gc\nimport cv2","e4e86805":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4b5986ac":"# Load the train Data_set\n#..\/input\/digit-recognizer\/test.csv\ndigit_train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","ca2a1a51":"#Showing the shape of both data Set\ndigit_train.shape","def1c754":"digit_train.head()","a3735f72":"# Info of the digit_train data Set\ndigit_train.info()","032e201f":"#Select a digit to show in gray\nimg = digit_train.iloc[1,1:]\nimg= img.values.reshape(28,28)\nplt.imshow(img,cmap = 'gray')","ed1ce12d":"#show in gray color\nimg1 = digit_train.iloc[2,1:]\nimg1 = img1.values.reshape(28,28)\nplt.imshow(img1)","593dd2c9":"# Summarise the counts of 'label' to see how many labels of each digit are present\n#digit_train.label.astype('category').value_counts()\ndigit_train.label.value_counts()","db7f4ca2":"# Spliting the data set in to X and y\nX = digit_train.iloc[:,1:]\ny = digit_train.iloc[:,0]","ef203eba":"from sklearn.preprocessing import scale\nX = scale(X)","7ac3a045":"X_train, X_test, y_train,y_test = train_test_split(X,y, train_size  = 0.10, random_state = 42)\nX_train.shape, X_test.shape, y_train.shape,y_test.shape","cb56b410":"### Linear SVM\nfrom sklearn import metrics\nfrom sklearn import svm \nmodel_linear = svm.SVC(kernel = 'linear')\nmodel_linear.fit(X_train,y_train)","37e345a3":"# predict the X_test with the Linear Model ans also show the confusion_matrix\ny_linear_pred = model_linear.predict(X_test)\nmetrics.confusion_matrix(y_test, y_linear_pred)","13bb9e5f":"#Show the predicted image label\ny_linear_pred[:10]","9fc02d72":"#Measure the accuracyS\nmetrics.accuracy_score(y_test, y_linear_pred)","105c825d":"# class-wise accuracy\nclass_wise = metrics.classification_report(y_test, y_linear_pred)\nprint(class_wise)","ccf94c2d":"# run gc.collect() (garbage collect) to free up memory\ngc.collect()","add3f43c":"model_nonlinear = svm.SVC(kernel = 'rbf')\nmodel_nonlinear.fit(X_train,y_train)\ny_nonlinear_pred = model_nonlinear.predict(X_test)","f7ee4180":"#Show the predicted image label \ny_nonlinear_pred[0:10]","3fc56430":"#Measure the Accuracy Matrix\nmetrics.accuracy_score(y_test, y_nonlinear_pred)","e40a45ce":"#Show the comfusion Matrix \nmetrics.confusion_matrix(y_test, y_nonlinear_pred)","4eb4d3fd":"# class-wise accuracy\nclass_wise = metrics.classification_report(y_test, y_nonlinear_pred)\nprint(class_wise)","f70df8b7":"# conduct (grid search) cross-validation to find the optimal values \n# of cost C and the choice of kernel\n\nfrom sklearn.model_selection import GridSearchCV\n\nparameters = {'C':[1, 10, 50, 100], \n             'gamma': [1e-1,1e-2,1e-3, 1e-4]}\n\n# instantiate a model \nsvc_grid_search = svm.SVC(kernel=\"rbf\")\n\n# create a classifier to perform grid search\nmodel_cv = GridSearchCV(svc_grid_search, param_grid=parameters, scoring='accuracy',return_train_score=True)\n\n# fit\nmodel_cv.fit(X_train, y_train)","5b515df7":"# cv results\ncv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results","b1e82fd8":"# printing the optimal accuracy score and hyperparameters\nbest_score = model_cv.best_score_\nbest_hyperparams = model_cv.best_params_\n\nprint(\"The best test score is {0} corresponding to hyperparameters {1}\".format(best_score, best_hyperparams))","bda39261":"# converting C to numeric type for plotting on x-axis\ncv_results['param_C'] = cv_results['param_C'].astype('int')\n\n# # plotting\nplt.figure(figsize=(16,6))\n\n# subplot 1\/3\nplt.subplot(131)\ngamma_01 = cv_results[cv_results['param_gamma']==0.01]\n\nplt.plot(gamma_01[\"param_C\"], gamma_01[\"mean_test_score\"])\nplt.plot(gamma_01[\"param_C\"], gamma_01[\"mean_train_score\"])\nplt.xlabel('C')\nplt.ylabel('Accuracy')\nplt.title(\"Gamma=0.01\")\nplt.ylim([0.60, 1])\nplt.legend(['test accuracy', 'train accuracy'], loc='lower right')\nplt.xscale('log')\n\n# subplot 2\/3\nplt.subplot(132)\ngamma_001 = cv_results[cv_results['param_gamma']==0.001]\n\nplt.plot(gamma_001[\"param_C\"], gamma_001[\"mean_test_score\"])\nplt.plot(gamma_001[\"param_C\"], gamma_001[\"mean_train_score\"])\nplt.xlabel('C')\nplt.ylabel('Accuracy')\nplt.title(\"Gamma=0.001\")\nplt.ylim([0.60, 1])\nplt.legend(['test accuracy', 'train accuracy'], loc='lower right')\nplt.xscale('log')\n\n# subplot 3\/3\nplt.subplot(133)\ngamma_0001 = cv_results[cv_results['param_gamma']==0.0001]\n\nplt.plot(gamma_0001[\"param_C\"], gamma_0001[\"mean_test_score\"])\nplt.plot(gamma_0001[\"param_C\"], gamma_0001[\"mean_train_score\"])\nplt.xlabel('C')\nplt.ylabel('Accuracy')\nplt.title(\"Gamma=0.0001\")\nplt.ylim([0.60, 1])\nplt.legend(['test accuracy', 'train accuracy'], loc='lower right')\nplt.xscale('log')\n\nplt.show()","862808d5":"svm_final = SVC(kernel = 'rbf',C= 10, gamma = 0.001)\n\n# fit the model\nsvm_final.fit(X_train, y_train)","b8b70408":"# Predict on the Spited data Set of train.csv, that is X_test \ny_final_pred = svm_final.predict(X_test)","3814db1c":"#Measure the Accuracy of the Model\nmetrics.accuracy_score(y_test, y_final_pred)","98120ac2":"#Measure the Confusion Metrix\nmetrics.confusion_matrix(y_test, y_final_pred)","bc81b0eb":"# class-wise accuracy\nclass_wise = metrics.classification_report(y_test, y_final_pred)\nprint(class_wise)","32c1db12":"# Load the test data_Set\nX1_test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","129f489a":"X1_test.columns","acdee1d4":"X1_test.shape","fdb08394":"X1_test.info()","41efeca2":"# Show the image from test\nimg1 = X1_test.iloc[0,0:]\nimg1 = img1.values.reshape(28,28)\nplt.imshow(img1, cmap='gray')","ead35095":"img1 = X1_test.iloc[10,0:]\nimg1 = img1.values.reshape(28,28)\nplt.imshow(img1)","9d60ac90":"from sklearn.preprocessing import scale\nX1_test = scale(X1_test)","7f2dd7ba":"#prediction on the data_set (X1_test) \ntest_pred = pd.DataFrame(svm_final.predict(X1_test))\n#test_pred = pd.DataFrame(test_pred.idxmax(axis = 1))\ntest_pred.index.name = 'ImageId'\ntest_pred = test_pred.rename(columns = {0: 'Label'}).reset_index()\ntest_pred['ImageId'] = test_pred['ImageId'] + 1\n\ntest_pred.head()","aecd3a3b":"test_pred.to_csv('.\/sample_submission.csv', index = False)","df0b7876":"### Final Model\nLet's now build the final model with chosen hyperparameters.","c6a83190":"### Prediction on the test.csv","fda65239":"### # Rescaling the features","ae3d8054":"### Model Building\n#### Linear SVM Model","2048412b":"### Split the Train data set and show the shape of each data_set","a8f188ae":"### Grid Search Cross-Validation","66d20721":"### Non-Linear SVM\n#### Let's now try a non-linear model with the RBF kernel.","5846f6a9":"### Data Preparation for Model Building","98a32f31":"### Predicted Image label save in sample_submission.csv","e501d3f5":"### Scale the data_set"}}