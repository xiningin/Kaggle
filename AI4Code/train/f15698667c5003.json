{"cell_type":{"2d5ca3fe":"code","1bd6061b":"code","e9cee7eb":"code","804777f6":"code","f3685586":"code","22f5a2cc":"code","7a2ff504":"code","7a054d39":"code","2131e54c":"code","074ea8fc":"code","c75dde36":"code","023dd710":"code","d57460ac":"code","04564c3d":"code","4d0ed9bf":"code","ee8d1453":"code","c11e100d":"code","7ca60d4a":"code","52a56216":"code","d38b4aa6":"code","3fb13c95":"code","5fff7f5c":"code","5df35e26":"code","bf67c60d":"code","571672cf":"code","4631b289":"code","133b5b93":"code","82a18250":"code","4e55f52a":"code","70fbed1b":"code","ad4daa98":"code","64bfc4b0":"code","506333d3":"code","5bad5f2f":"code","db650f0d":"code","33717cf9":"code","95a139b0":"code","f5e0c945":"code","aed3d6a1":"code","23a11b5c":"markdown","9e4a95e1":"markdown","8861bda9":"markdown","eeec8010":"markdown","a15ddb11":"markdown","46ec3f1f":"markdown","b66570c8":"markdown","b6480d24":"markdown","42a2ba94":"markdown","d1940e5e":"markdown","906b3d7a":"markdown","6accdc66":"markdown","8d13caa8":"markdown","969643e6":"markdown","93c4fb01":"markdown","0928328c":"markdown","f609a60d":"markdown","6ef53e3e":"markdown","23cbbc2e":"markdown","ade8ffa1":"markdown","1b2342d3":"markdown","a35a0807":"markdown","050771ad":"markdown","760aaca2":"markdown","08698aeb":"markdown","8d491c2c":"markdown","266bf405":"markdown","20f8e644":"markdown","f4cd61f4":"markdown","e25b9530":"markdown","f4680e51":"markdown","0bc49671":"markdown","08c5c52e":"markdown","fc151dbc":"markdown","bb2e838d":"markdown","9214c08f":"markdown","83b44c21":"markdown","ba49c2ef":"markdown","70ed4c30":"markdown","e29245d5":"markdown","b2e36954":"markdown","27696da1":"markdown","d5f1f2be":"markdown"},"source":{"2d5ca3fe":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt ","1bd6061b":"matches_df = pd.read_csv(\"\/kaggle\/input\/ipl\/matches.csv\")\nscore_df = pd.read_csv(\"\/kaggle\/input\/ipl\/deliveries.csv\")","e9cee7eb":"matches_df.head()","804777f6":"score_df.head()","f3685586":"print(matches_df.info())\nprint(score_df.info())","22f5a2cc":"matches_df[\"umpire3\"].isnull().sum()","7a2ff504":"matches_df[\"umpire3\"].tail(10)","7a054d39":"matches_df.describe()","2131e54c":"# Matches we have got in the dataset \nmatches_df['id'].max()","074ea8fc":"# Seasons we have got in the dataset\nmatches_df['season'].unique()","c75dde36":"matches_df.iloc[matches_df['win_by_runs'].idxmax()]","023dd710":"matches_df.iloc[matches_df['win_by_runs'].idxmax()]['winner']","d57460ac":"matches_df.iloc[matches_df['win_by_wickets'].idxmax()]['winner']","04564c3d":"matches_df.iloc[matches_df[matches_df['win_by_runs'].ge(1)].win_by_runs.idxmin()]['winner']","4d0ed9bf":"matches_df.iloc[matches_df[matches_df['win_by_wickets'].ge(1)].win_by_wickets.idxmin()]","ee8d1453":"matches_df.iloc[matches_df[matches_df['win_by_wickets'].ge(1)].win_by_wickets.idxmin()]['winner']","c11e100d":"plt.figure(figsize=(12,6))\nsns.countplot(x='season', data=matches_df)\nplt.show()","7ca60d4a":"plt.figure(figsize=(12,6))\ndata = matches_df.winner.value_counts()\nsns.barplot(y = data.index, x = data, orient='h')\nplt.show()","52a56216":"top_players = matches_df.player_of_match.value_counts()[:10]\n#sns.barplot(x=\"day\", y=\"total_bill\", data=df)\nfig, ax = plt.subplots(figsize=(15,8))\nax.set_ylim([0,20])\nax.set_ylabel(\"Count\")\nax.set_title(\"Top player of the match Winners\")\ntop_players.plot.bar()\nsns.barplot(x = top_players.index, y = top_players, orient='v', palette=\"Blues\");\nplt.show()","d38b4aa6":"plt.figure(figsize=(12,6))\nsns.countplot(x='venue', data=matches_df)\nplt.xticks(rotation='vertical')\nplt.show()","3fb13c95":"temp_df = pd.melt(matches_df, id_vars=['id','season'], value_vars=['team1', 'team2'])\n\nplt.figure(figsize=(12,6))\nsns.countplot(x='value', data=temp_df)\nplt.xticks(rotation='vertical')\nplt.show()","5fff7f5c":"plt.figure(figsize=(12,6))\nsns.countplot(x='winner', data=matches_df)\nplt.xticks(rotation=90)\nplt.show()","5df35e26":"temp_df = matches_df.drop_duplicates(subset=['season'], keep='last')[['season', 'winner']].reset_index(drop=True)\ntemp_df","bf67c60d":"temp_series = matches_df.toss_decision.value_counts()\nlabels = (np.array(temp_series.index))\nsizes = (np.array((temp_series \/ temp_series.sum())*100))\ncolors = ['gold', 'lightskyblue']\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title(\"Toss decision percentage\")\nplt.show()\n          ","571672cf":"plt.figure(figsize=(12,6))\nsns.countplot(x='season', hue='toss_decision', data=matches_df)\nplt.xticks(rotation='vertical')\nplt.show()","4631b289":"# Since there is a very strong trend towards batting second let us see the win percentage of teams batting second.\nnum_of_wins = (matches_df.win_by_wickets>0).sum()\nnum_of_loss = (matches_df.win_by_wickets==0).sum()\nlabels = [\"Wins\", \"Loss\"]\ntotal = float(num_of_wins + num_of_loss)\nsizes = [(num_of_wins\/total)*100, (num_of_loss\/total)*100]\ncolors = ['gold', 'lightskyblue']\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title(\"Win percentage batting second\")\nplt.show()","133b5b93":"# create a function for labeling #\ndef autolabel(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax.text(rect.get_x() + rect.get_width()\/2., 1.02*height,\n                '%d' % int(height),\n                ha='center', va='bottom')","82a18250":"temp_series = matches_df.player_of_match.value_counts()[:10]\nlabels = np.array(temp_series.index)\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_series), width=width)\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top player of the match awardees\")\nautolabel(rects)\nplt.show()","4e55f52a":"temp_df = pd.melt(matches_df, id_vars=['id'], value_vars=['umpire1', 'umpire2'])\n\ntemp_series = temp_df.value.value_counts()[:10]\nlabels = np.array(temp_series.index)\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_series), width=width,)\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top Umpires\")\nautolabel(rects)\nplt.show()","70fbed1b":"score_df.head()","ad4daa98":"temp_df = score_df.groupby('batsman')['batsman_runs'].agg('sum').reset_index().sort_values(by='batsman_runs', ascending=False).reset_index(drop=True)\ntemp_df = temp_df.iloc[:10,:]\n\nlabels = np.array(temp_df['batsman'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_df['batsman_runs']), width=width, color='blue')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top run scorers in IPL\")\nax.set_xlabel('Batsmane Name')\nautolabel(rects)\nplt.show()","64bfc4b0":"# Now let us see the players with more number of boundaries in IPL.\ntemp_df = score_df.groupby('batsman')['batsman_runs'].agg(lambda x: (x==4).sum()).reset_index().sort_values(by='batsman_runs', ascending=False).reset_index(drop=True)\ntemp_df = temp_df.iloc[:10,:]\n\nlabels = np.array(temp_df['batsman'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_df['batsman_runs']), width=width, color='lightskyblue')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Batsman with most number of boundaries.!\",fontsize = 10)\nautolabel(rects)\nplt.show()","506333d3":"# Now let us check the number of 6's\ntemp_df = score_df.groupby('batsman')['batsman_runs'].agg(lambda x: (x==6).sum()).reset_index().sort_values(by='batsman_runs', ascending=False).reset_index(drop=True)\ntemp_df = temp_df.iloc[:10,:]\n\nlabels = np.array(temp_df['batsman'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_df['batsman_runs']), width=width, color='m')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation=90)\nax.set_ylabel(\"Count\")\nax.set_title(\"Batsman with most number of sixes.!\")\nax.set_xlabel('Batsmane Name')\nautolabel(rects)\nplt.show()","5bad5f2f":"# Now let us see the batsman who has played the most number of dot balls.\ntemp_df = score_df.groupby('batsman')['batsman_runs'].agg(lambda x: (x==0).sum()).reset_index().sort_values(by='batsman_runs', ascending=False).reset_index(drop=True)\ntemp_df = temp_df.iloc[:10,:]\n\nlabels = np.array(temp_df['batsman'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_df['batsman_runs']), width=width, color='c')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Batsman with most number of dot balls.!\")\nax.set_xlabel('Batsmane Name')\nautolabel(rects)\nplt.show()","db650f0d":"# Let us check the percentage distribution now.\ndef balls_faced(x):\n    return len(x)\n\ndef dot_balls(x):\n    return (x==0).sum()\n\ntemp_df = score_df.groupby('batsman')['batsman_runs'].agg([balls_faced, dot_balls]).reset_index()\ntemp_df = temp_df.loc[temp_df.balls_faced>200,:]\ntemp_df['percentage_of_dot_balls'] = (temp_df['dot_balls'] \/ temp_df['balls_faced'])*100.\ntemp_df = temp_df.sort_values(by='percentage_of_dot_balls', ascending=False).reset_index(drop=True)\ntemp_df = temp_df.iloc[:10,:]\n\nfig, ax1 = plt.subplots(figsize=(15,8))\nax2 = ax1.twinx()\nlabels = np.array(temp_df['batsman'])\nind = np.arange(len(labels))\nwidth = 0.9\nrects = ax1.bar(ind, np.array(temp_df['dot_balls']), width=width, color='brown')\nax1.set_xticks(ind+((width)\/2.))\nax1.set_xticklabels(labels, rotation='vertical')\nax1.set_ylabel(\"Count of dot balls\", color='brown')\nax1.set_title(\"Batsman with highest percentage of dot balls (balls faced > 200)\")\nax2.plot(ind+0.45, np.array(temp_df['percentage_of_dot_balls']), color='b', marker='o')\nax2.set_ylabel(\"Percentage of dot balls\", color='b')\nax2.set_ylim([0,100])\nax2.grid(b=False)\nplt.show()","33717cf9":"temp_df = score_df.groupby('bowler')['ball'].agg('count').reset_index().sort_values(by='ball', ascending=False).reset_index(drop=True)\ntemp_df = temp_df.iloc[:10,:]\n\nlabels = np.array(temp_df['bowler'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_df['ball']), width=width, color='cyan')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top Bowlers - Number of balls bowled in IPL\")\nax.set_xlabel('Bowler Names')\nautolabel(rects)\nplt.show()","95a139b0":"temp_df = score_df.groupby('bowler')['total_runs'].agg(lambda x: (x==0).sum()).reset_index().sort_values(by='total_runs', ascending=False).reset_index(drop=True)\ntemp_df = temp_df.iloc[:10,:]\n\nlabels = np.array(temp_df['bowler'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_df['total_runs']), width=width, color='lightskyblue')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top Bowlers - Number of dot balls bowled in IPL\")\nax.set_xlabel('Bowler Names')\nautolabel(rects)\nplt.show()","f5e0c945":"# Now let us see the bowlers who has bowled more number of extras in IPL.\ntemp_df = score_df.groupby('bowler')['extra_runs'].agg(lambda x: (x>0).sum()).reset_index().sort_values(by='extra_runs', ascending=False).reset_index(drop=True)\ntemp_df = temp_df.iloc[:10,:]\n\nlabels = np.array(temp_df['bowler'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_df['extra_runs']), width=width, color='magenta')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Bowlers with more extras in IPL\")\nax.set_xlabel('Bowler Names')\nautolabel(rects)\nplt.show()","aed3d6a1":"# Now let us see most common dismissal types in IPL.\nplt.figure(figsize=(12,6))\nsns.countplot(x='dismissal_kind', data=score_df)\nplt.xticks(rotation='vertical')\nplt.show()","23a11b5c":"# Score Data Set","9e4a95e1":"> **Gambhir** is way ahead of others - almost 60 boundaries more than **Kohli**.! Nice to **Sachin** in the top 10 list :)","8861bda9":">**Malinga** tops the chart with 221 extra runs followed by **Pravin Kumar.**","eeec8010":"### <font color='darkblue'>Objective:: <\/font>\n\u25cf Perform \u2018Exploratory Data Analysis\u2019 on dataset \u2018Indian Premier League\u2019\n\n\u25cf As a sports analysts, find out the most successful teams, players and factors contributing win or loss of a team.\n\n\u25cf Suggest teams or players a company should endorse for its products.\n\n\u25cf Dataset:https:\/\/bit.ly\/34SRn3b","a15ddb11":"**Top players of the match:**","46ec3f1f":"**Number of wins per team:**","b66570c8":"# DATA INFORMATION","b6480d24":"**Number of matches in each venue:**","42a2ba94":"> **CH Gayle** is the top player of the match awardee in all the seasons of IPL.","d1940e5e":"> **\"Mumbai Indians\"** lead the pack with most number of matches played followed by **\"Royal Challengers Bangalore\"**. There are also teams with very few matches like *'Rising Pune Supergiants'*, *'Gujarat Lions'* as they are new teams that came in only last season.","906b3d7a":"## Season Which had most number of matches","6accdc66":"**Please Upvote if this was Helpful**","8d13caa8":"## Top Player of the match winners","969643e6":"> Almost 55% of the toss decisions are made to field first. Now let us see how this decision varied over time.","93c4fb01":"# Perform Exploratory Data Analysis on 'Indian Premiere League'","0928328c":"## Observation : ","f609a60d":"**Toss decision:**\n\nLet us see the toss decisions taken so far.","6ef53e3e":"> **MI** again leads the pack followed by CSK.","23cbbc2e":"> **Virat Kohli** is leading the chart followed closely by Raina. Gayle is the top scorer among foreign players.","ade8ffa1":"> **Dharmasena seems** to be the most sought after umpire for IPL matches followed by Ravi. Others are fairly close to each other.","1b2342d3":"> In **2013**, we have the most number of matches","a35a0807":"> **CH Gayle** is the most Successful player in all match winners","050771ad":"**Champions each season:**\n\nNow let us see the champions in each season.","760aaca2":"> So percentage of times teams batting second has won is **53.2**. Now let us split this by year and see the distribution.\n\n","08698aeb":"### <center><font color='darkblue'>Thank You For Having A Look At This Notebook <\/font><\/center>","8d491c2c":">**Caught** is the most common dismissal type in IPL followed by Bowled. There are very few instances of hit wicket as well. **'Obstructing the field'** is one of the dismissal type as well in IPL.!","266bf405":"**Team won by minimum runs**","20f8e644":"> 1. **Mumbai Indians** is the team which won by maximum and minimum **runs**\n> 2. **Kolkata Knight Riders** is the team which won by maximum and minimum **wickets** ","f4cd61f4":"> Batsman with more than 300 balls faced in taken and the ones with higher percentage of dot balls are seen. It is interesting to see Ganguly with more than 1000 balls and nearly half of them are dot balls. It is surprising to see names like **Jayasuriya** and **Gibbs** in there.!","e25b9530":"## Bowler Analysis\n\nNow let us see the bowlers who has bowled most number of balls in IPL.","f4680e51":"**Team won by Maximum Wickets**","0bc49671":"## Batsman analysis:\n\nLet us start our analysis with batsman. Let us first see the ones with most number of IPL runs under their belt.","08c5c52e":">**Harbhajan Singh** is the the bowler with most number of balls bowled in IPL matches. Now let us see the bowler with more number of dot balls.","fc151dbc":">**Pravin Kumar** is the one with more number of dot balls followed by **Steyn and Malinga**","bb2e838d":"## Top Umpires:","9214c08f":"> It seems during the initial years, teams wanted to bat first. Voila.! Look at the **2016 season**, most of the toss decisions are to field first.","83b44c21":"**Team won by Maximum Runs**\n","ba49c2ef":">It is interesting to see that the same names repeat again here as well. I think since these guys have played more number of balls, they have more dot balls as well.","70ed4c30":"> There are quite a few venues present in the data with **\"M Chinnaswamy Stadium\"** being the one with most number of matches followed by **\"Eden Gardens\"** ","e29245d5":"**Team won by Minimum Wickets**","b2e36954":"**Number of matches played by each team:**","27696da1":"> **Mumbai Indians** are the winners in most of the matches","d5f1f2be":">There you see the big man. **Gayle**, the unassailable leader in the number of sixes.\n\n>**Raina** is third in both number of 4's and 6's"}}