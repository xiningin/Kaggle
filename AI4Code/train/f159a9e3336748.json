{"cell_type":{"5432a08c":"code","a4752104":"code","887f5339":"code","5f62e7c6":"code","ce224199":"code","6a7080a3":"code","1f8efdc7":"code","a6316cff":"code","9e0f2bbe":"code","9c68d129":"code","4410a350":"code","21f20ce0":"code","6bda6d14":"code","dcee26bb":"code","5c753cd2":"code","97e4481a":"code","e82eb52c":"code","a95fba3c":"code","866930a1":"code","6428607e":"code","647c5b62":"code","27c4efa5":"code","c08cbc20":"code","ae20248a":"code","b09649ef":"code","e4a1d24b":"code","c4e908cc":"code","2b54386e":"code","3fa8eb87":"code","0c9fe5e5":"code","b8dc2dcf":"code","3e786efd":"code","e1f99543":"code","50159b7a":"code","ffb98d4e":"code","4e378c09":"code","b7cd0cd3":"code","64a19533":"code","6eb4e638":"code","b6e03b71":"code","5ca33471":"code","c0feb20c":"code","45ee0d0b":"code","00e9511c":"code","de011f0b":"code","0f79abce":"markdown","dbd61eb0":"markdown","d0781f9f":"markdown","3b8e5d80":"markdown","6d78ef42":"markdown","ee44b15f":"markdown","ba35b43c":"markdown","327227d4":"markdown","9c9b9a67":"markdown","51032b96":"markdown","74819131":"markdown","1c3eba5f":"markdown"},"source":{"5432a08c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib\nmatplotlib.rcParams['figure.figsize'] = (14, 6)\nfrom matplotlib.pyplot import figure\nimport seaborn as sns\nsns.set()\nfrom IPython.display import display\nimport warnings\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","a4752104":"train_df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","887f5339":"display(train_df.head())\ndisplay(test_df.head())","5f62e7c6":"display(train_df.shape)\ndisplay(test_df.shape)","ce224199":"display(train_df.describe())\ndisplay(test_df.describe())","6a7080a3":"#Summary statistics for categorical values\n\ndisplay(train_df.describe(include= ['O']))\ndisplay(test_df.describe(include= ['O']))","1f8efdc7":"#Looking at the null values in train dataframe\n\ndisplay(train_df.isna().sum())","a6316cff":"#Looking at the null values in test dataframe\n\ndisplay(test_df.isna().sum())","9e0f2bbe":"combined_df = [train_df, test_df]\n\nfor i in combined_df:\n    i['LotFrontage'][i['LotConfig']== 'Inside'] = i['LotFrontage'][i['LotConfig']== 'Inside'].fillna(i['LotFrontage'][i['LotConfig']== 'Inside'].median())\n    i['LotFrontage'][i['LotConfig']== 'Corner'] = i['LotFrontage'][i['LotConfig']== 'Corner'].fillna(i['LotFrontage'][i['LotConfig']== 'Corner'].median())\n    i['LotFrontage'][i['LotConfig']== 'FR2'] = i['LotFrontage'][i['LotConfig']== 'FR2'].fillna(i['LotFrontage'][i['LotConfig']== 'FR2'].median())\n    i['LotFrontage'][i['LotConfig']== 'CulDSac'] = i['LotFrontage'][i['LotConfig']== 'CulDSac'].fillna(i['LotFrontage'][i['LotConfig']== 'CulDSac'].median())\n    i['LotFrontage'][i['LotConfig']== 'FR3'] = i['LotFrontage'][i['LotConfig']== 'FR3'].fillna(i['LotFrontage'][i['LotConfig']== 'FR3'].median())\n","9c68d129":"for i in combined_df:\n    i['Alley'].replace(np.nan, 'NA', inplace= True)\n    i['BsmtQual'].replace(np.nan, 'NA', inplace= True)\n    i['BsmtCond'].replace(np.nan, 'NA', inplace= True)\n    i['BsmtExposure'].replace(np.nan, 'NA', inplace= True)\n    i['BsmtFinType1'].replace(np.nan, 'NA', inplace= True)\n    i['BsmtFinType2'].replace(np.nan, 'NA', inplace= True)\n    i['FireplaceQu'].replace(np.nan, 'NA', inplace= True)\n    i['GarageType'].replace(np.nan, 'NA', inplace= True)\n    i['GarageYrBlt'].replace(np.nan, 'NA', inplace= True)\n    i['GarageFinish'].replace(np.nan, 'NA', inplace= True)\n    i['GarageQual'].replace(np.nan, 'NA', inplace= True)\n    i['GarageCond'].replace(np.nan, 'NA', inplace= True)\n    i['PoolQC'].replace(np.nan, 'NA', inplace= True)\n    i['Fence'].replace(np.nan, 'NA', inplace= True)\n    i['MiscFeature'].replace(np.nan, 'NA', inplace= True)\n    i['MSZoning'].replace(np.nan, 'NA', inplace= True)\n    i['MasVnrType'].replace(np.nan, 'NA', inplace= True)\n    i['Utilities'].fillna(i['Utilities'].mode()[0], inplace= True)\n    i['Exterior1st'].fillna(i['Exterior1st'].mode()[0], inplace= True)\n    i['Exterior2nd'].fillna(i['Exterior2nd'].mode()[0], inplace= True)\n    i['KitchenQual'].fillna(i['KitchenQual'].mode()[0], inplace= True)\n    i['Functional'].fillna(i['Functional'].mode()[0], inplace= True)\n    i['SaleType'].fillna(i['SaleType'].mode()[0], inplace= True)","4410a350":"for i in combined_df:\n    i['MasVnrArea'].fillna(i['MasVnrArea'].median(), inplace= True)\n    i['BsmtFinSF1'].fillna(i['BsmtFinSF1'].median(), inplace= True)\n    i['BsmtFinSF2'].fillna(i['BsmtFinSF2'].median(), inplace= True)\n    i['BsmtUnfSF'].fillna(i['BsmtUnfSF'].median(), inplace= True)\n    i['TotalBsmtSF'].fillna(i['TotalBsmtSF'].median(), inplace= True)\n    i['BsmtFullBath'].fillna(i['BsmtFullBath'].mode()[0], inplace= True)\n    i['BsmtHalfBath'].fillna(i['BsmtHalfBath'].mode()[0], inplace= True)\n    i['GarageCars'].fillna(i['GarageCars'].mode()[0], inplace= True)\n    i['GarageArea'].fillna(i['GarageArea'].median(), inplace= True) ","21f20ce0":"for i in combined_df:\n    i['YrSold'] = i['YrSold'].astype('object')\n    i['MoSold'] = i['MoSold'].astype('object')\n    i['MSSubClass'] = i['MSSubClass'].astype('object')\n    i['OverallQual'] = i['OverallQual'].astype('object')\n    i['OverallCond'] = i['OverallCond'].astype('object')\n    i['YearBuilt'] = i['YearBuilt'].astype('object')\n    i['YearRemodAdd'] = i['YearRemodAdd'].astype('object')\n    i['BedroomAbvGr'] = i['BedroomAbvGr'].astype('object')\n    i['KitchenAbvGrr'] = i['KitchenAbvGr'].astype('object')\n    i['TotRmsAbvGrd'] = i['TotRmsAbvGrd'].astype('object')\n    i['KitchenAbvGr'] = i['KitchenAbvGr'].astype('object')\n    i['Fireplaces'] = i['Fireplaces'].astype('object')\n    i['GarageCars'] = i['GarageCars'].astype('object')\n    i['MiscVal'] = i['MiscVal'].astype('object')\ndisplay(i.isna().sum())","6bda6d14":"# Classifying categorical variables with SalePrice\n\ntrain_objects = train_df.select_dtypes(include= 'object')\ntrain_objects['SalePrice'] = train_df.loc[:,('SalePrice')]\ntrain_objects.head()","dcee26bb":"# Comparing SalePrice with MSZoning, LotShape and LandContour variables\n\ng = sns.PairGrid(train_df, y_vars= 'SalePrice',\n                 x_vars=['MSZoning', 'LotShape', 'LandContour'],\n                 height= 5, aspect= 1.2)\n\ng.map(sns.stripplot, cmap= 'mediumseagreen')\n\nf = sns.PairGrid(train_df, y_vars= 'SalePrice',\n                 x_vars=['MSZoning', 'LotShape', 'LandContour'],\n                 height= 5, aspect= 1.2)\nf.map(sns.boxplot, palette= 'Greens_r')","5c753cd2":"# Comparing SalePrice with Street and Alley variables\n\ng = sns.PairGrid(train_df, y_vars= 'SalePrice',\n                 x_vars=['Street', 'Alley'],\n                 height= 5, aspect= 1.2)\n\ng.map(sns.stripplot, cmap= 'mediumseagreen')\n\nf = sns.PairGrid(train_df, y_vars= 'SalePrice',\n                 x_vars=['Street', 'Alley'],\n                 height= 5, aspect= 1.2)\nf.map(sns.boxplot, palette= 'Greens_r')","97e4481a":"# Comparing SalePrice with building variables\n\ng = sns.PairGrid(train_df, y_vars= 'SalePrice',\n                 x_vars=['BldgType', 'HouseStyle', 'Utilities'],\n                 height= 5, aspect= 1.2)\n\ng.map(sns.stripplot, cmap= 'mediumseagreen')\n\nf = sns.PairGrid(train_df, y_vars= 'SalePrice',\n                 x_vars=['BldgType', 'HouseStyle', 'Utilities'],\n                 height= 5, aspect= 1.2)\nf.map(sns.boxplot, palette= 'Greens_r')","e82eb52c":"# Comparing SalePrice with roof variables\n\ng = sns.PairGrid(train_df, y_vars= 'SalePrice',\n                 x_vars=['RoofStyle', 'RoofMatl', 'MasVnrType'],\n                 height= 5, aspect= 1.2)\n\ng.map(sns.stripplot, cmap= 'mediumseagreen')\n\nf = sns.PairGrid(train_df, y_vars= 'SalePrice',\n                 x_vars=['RoofStyle', 'RoofMatl', 'MasVnrType'],\n                 height= 5, aspect= 1.2)\nf.map(sns.boxplot, palette= 'Greens_r')","a95fba3c":"# Comparing SalePrice with basement variables\n\ng = sns.PairGrid(train_df, y_vars= 'SalePrice',\n                 x_vars=['BsmtQual', 'BsmtCond', 'BsmtExposure'],\n                 height= 5, aspect= 1.2)\n\ng.map(sns.stripplot, cmap= 'mediumseagreen')\n\nf = sns.PairGrid(train_df, y_vars= 'SalePrice',\n                 x_vars=['BsmtQual', 'BsmtCond', 'BsmtExposure'],\n                 height= 5, aspect= 1.2)\nf.map(sns.boxplot, palette= 'Greens_r')","866930a1":"# Comparing SalePrice with garage variables\n\ng = sns.PairGrid(train_df, y_vars= 'SalePrice',\n                 x_vars=['GarageQual', 'GarageCond', 'PavedDrive'],\n                 height= 5, aspect= 1.2)\n\ng.map(sns.stripplot, cmap= 'mediumseagreen')\n\nf = sns.PairGrid(train_df, y_vars= 'SalePrice',\n                 x_vars=['GarageQual', 'GarageCond', 'PavedDrive'],\n                 height= 5, aspect= 1.2)\nf.map(sns.boxplot, palette= 'Greens_r')","6428607e":"# Comparing SalePrice with year and month variables\n\ng = sns.PairGrid(train_df, y_vars= 'SalePrice',\n                 x_vars=['YrSold', 'MoSold'],\n                 height= 5, aspect= 1.2)\n\ng.map(sns.stripplot, cmap= 'mediumseagreen')\n\nf = sns.PairGrid(train_df, y_vars= 'SalePrice',\n                 x_vars=['YrSold', 'MoSold'],\n                 height= 5, aspect= 1.2)\nf.map(sns.boxplot, palette= 'Greens_r')","647c5b62":"# Looking at SalePrice distribution\n\nsns.displot(train_df['SalePrice'], kind= 'ecdf', color= 'mediumseagreen', height= 6, aspect= 2)\nplt.show()","27c4efa5":"# Comparing SalePrice with lot size variables\n\nsns.jointplot(data= train_df, x= 'LotFrontage', y= 'SalePrice', hue= 'LotShape', palette= 'ocean_r')\nsns.jointplot(data= train_df, x= 'LotArea', y= 'SalePrice', hue= 'LotShape', palette= 'ocean_r')\nplt.show()","c08cbc20":"# Comparing SalePrice with year and overall condition variables\n\nsns.jointplot(data= train_df, x= 'YearBuilt', y= 'SalePrice', hue= 'OverallCond', palette= 'ocean_r')\nsns.jointplot(data= train_df, x= 'YearRemodAdd', y= 'SalePrice', hue= 'OverallCond', palette= 'ocean_r')\nplt.show()","ae20248a":"# Comparing SalePrice with basement variables\n\nsns.jointplot(data= train_df, x= 'TotalBsmtSF', y= 'SalePrice', hue= 'BsmtFinType1', palette= 'ocean_r')\nplt.show()","b09649ef":"# Adding first floor and second floor area to get total area of two floors and comparing the same with sale price\nfor i in combined_df:\n    i['floor_area'] = i['1stFlrSF'] + i['2ndFlrSF']\nsns.jointplot(data= train_df, x= 'floor_area', y= 'SalePrice', kind= 'reg', color= '#2d5986')\nplt.show()","e4a1d24b":"# Feature engineering variables to get the total square feet of the house and total number of bathrooms\n\nfor i in combined_df:\n    i['Total_Sqft'] = i['GrLivArea'] + i['TotalBsmtSF'] \n    i['Total_Bathrooms'] = i['FullBath'] + i['HalfBath'] * 0.5 + i['BsmtFullBath'] + i['BsmtHalfBath'] * 0.5\n","c4e908cc":"# Dropping columns that were used to feature engineer columns\n\nfor i in combined_df:\n    i.drop(['GrLivArea','TotalBsmtSF'], axis= 1, inplace= True )\n    i.drop(['FullBath', 'HalfBath','BsmtFullBath', 'BsmtHalfBath'], axis= 1, inplace= True )\n    i.drop(['1stFlrSF', '2ndFlrSF'], axis= 1, inplace= True )\n","2b54386e":"# Label encoding categorical values using sklearn's LabelEncoder\n\nfrom sklearn.preprocessing import LabelEncoder\n\nY_categorical_selection = train_objects['SalePrice'].values\nX_categorical_selection = train_objects.drop('SalePrice', axis= 1)\nle = LabelEncoder()\nobjList = X_categorical_selection.columns\nfor i in objList:\n    X_categorical_selection[i] = le.fit_transform(X_categorical_selection[i].astype(str))\n\n","3fa8eb87":"# Classifying only numerical data from train_df\n\ntrain_numeric = train_df.select_dtypes(exclude= 'object')","0c9fe5e5":"# Displaying the distribution of numerical data in train_df\n\nX_numeric = train_numeric.drop(['SalePrice', 'Id'], axis= 1)\nY_numeric = train_numeric.loc[:, ['SalePrice']]\nX_columns = X_numeric.columns\n\nf = pd.melt(X_numeric, value_vars= X_columns)\ng = sns.FacetGrid(f, col= 'variable',  col_wrap=3, sharex=False, sharey=False)\ng = g.map(sns.distplot, 'value')","b8dc2dcf":"# Normalising numerical data\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX_numeric[X_numeric.columns] = scaler.fit_transform(X_numeric[X_numeric.columns])\nY_numeric[Y_numeric.columns] = scaler.fit_transform(Y_numeric[Y_numeric.columns])\nX_numeric.head()","3e786efd":"# Feature selecting categorical data using ANOVA test\n\nfrom sklearn.feature_selection import f_regression, SelectKBest\nfs = SelectKBest(score_func= f_regression, k= 5)\nfs_fit = fs.fit(X_categorical_selection, Y_categorical_selection)","e1f99543":"# Displaying the top 10 categorical data to feature select\n\nfeature_cols = pd.DataFrame(objList)\npvalues = pd.DataFrame(np.round(fs_fit.pvalues_, 4))\nf_scores = pd.DataFrame(fs_fit.scores_)\nanova_test = pd.concat([feature_cols, pvalues, f_scores], axis= 1)\nanova_test.columns = ['columns', 'P-Value', 'F-Score']\ntop_columns_anova = anova_test.nlargest(10, columns=  'F-Score')\nsns.barplot(x= 'columns', y= 'F-Score', data= top_columns_anova, palette= 'ocean_r')","50159b7a":"# Splitting the data into train and test to fit a lasso regression model to feature select numerical data\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X_numeric, Y_numeric, test_size= 0.2, random_state= 2)","ffb98d4e":"# Using GridSearchCV to find the best alpha value for a lasso regression model \nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import Lasso\nparam_grid = {'alpha': np.arange(0.01, 1, 0.01)}\nlasso = Lasso()\ngrid = GridSearchCV(estimator= lasso, param_grid= param_grid, scoring= 'neg_mean_absolute_error', cv= 10)\ngrid.fit(X_train, Y_train)\ndisplay(grid.best_params_)\ndisplay(grid.best_estimator_.coef_)\n\n# Displaying lasso coefficient values to feature select the best numerical values\n\nfig = figure(figsize= (25, 5))\nplt.plot(range(len(X_numeric.columns)), grid.best_estimator_.coef_, color= 'green')\nplt.xticks(range(len(X_numeric.columns)), X_columns)\nplt.show()","4e378c09":"# Displaying the correlation of features with a heatmap to cross check lasso regression coefficients results\n\ncorr = train_df.corr()\nplt.figure(figsize= (25, 15))\nsns.heatmap(corr, cmap= 'ocean_r', annot= True)\nplt.show()","b7cd0cd3":"# Feature selecting variables based on ANOVA test and lasso regression results for train_df\ntrain_categorical_features = X_categorical_selection.loc[:, ['GarageCars', 'ExterQual', 'BsmtQual', 'KitchenQual', 'YearBuilt', \n'OverallQual', 'YearRemodAdd', 'Fireplaces', 'GarageFinish', 'GarageType']]  \ntrain_numerical_features = X_numeric.loc[:, ['Total_Sqft', 'Total_Bathrooms', 'GarageArea', \n'MasVnrArea', 'WoodDeckSF', 'ScreenPorch', 'LotArea', 'floor_area']]\ntrain_numerical_target = Y_numeric.loc[:, ['SalePrice']]\n\ntrain_model = pd.concat([train_categorical_features, train_numerical_features, train_numerical_target], axis= 1)\ntrain_model.head()","64a19533":"# Feature selecting variables based on ANOVA test and lasso regression results for train_df\n\ntest_categorical_features = test_df.loc[:, ['GarageCars', 'ExterQual', 'BsmtQual', 'KitchenQual', 'YearBuilt', \n'OverallQual', 'YearRemodAdd', 'Fireplaces', 'GarageFinish', 'GarageType']] \ntest_numerical_features = test_df.loc[:, ['Total_Sqft', 'Total_Bathrooms', 'GarageArea', \n'MasVnrArea', 'WoodDeckSF', 'ScreenPorch', 'LotArea', 'floor_area']]  ","6eb4e638":"# Label encoding test_df categorical data\n\ntest_categorical_features_columns = test_categorical_features.columns\nfor i in test_categorical_features_columns:\n    test_categorical_features[i] = le.fit_transform(test_categorical_features[i].astype(str))","b6e03b71":"# Normalising numeircal test data\n\ntest_numerical_features[test_numerical_features.columns] = scaler.fit_transform(test_numerical_features[test_numerical_features.columns])\ntest_numerical_features.head()","5ca33471":"# Concatenating test_df's labelled categorical and nomalised numerical data\n\ntest_model = pd.concat([test_categorical_features, test_numerical_features], axis= 1)","c0feb20c":"# Splitting the data into feature and target variables\n\nX = train_model.drop('SalePrice', axis= 1)\nY = train_df['SalePrice'].values","45ee0d0b":"# Fitting a gradient boosting regressor model using gridsearchcv for hyperparameter tuning\n\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error \nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size= 0.3, random_state= 2)\nparam_grid = {'n_estimators': [100, 200, 300, 400, 500], 'max_depth': [3, 4, 5, 6, 7], \n              'max_features': [0.1, 0.2, 0.3, 0.4, 0.5]}\ngbt = GradientBoostingRegressor()\ngrid = GridSearchCV(estimator= gbt, param_grid= param_grid, scoring= 'neg_mean_squared_error', cv= 10)","00e9511c":"# Fitting the data and getting the best score and params\n\ngrid.fit(X_train, Y_train)\npred = grid.predict(test_model)\ndisplay(grid.best_params_)","de011f0b":"# Storing the results in 'sub' csv\nsub = pd.DataFrame({\n        'ID': test_df['Id'] ,\n        'SalePrice': pred})\nsub.to_csv('sub.csv', index= False)","0f79abce":"## V. Feature engineering","dbd61eb0":"## I. Exploring the data - ","d0781f9f":"## III. Exploratory data analysis for categorical data ","3b8e5d80":"## VII. Feature selection","6d78ef42":"### Replacing null values for numerical values\n","ee44b15f":"## VI. Label encoding and normalisation","ba35b43c":"## Import necessary libraries and read the data -","327227d4":"# House price prediction (Advanced Regression)\n## The general outline of the notebook is as follows - \n1) Exploring the data <br>\n2) Replacing null values\n<br>\n3) Exploratory data analysis for categorical data <br>\n4) Exploratory data analysis for numerical data <br>\n5) Feature engineering <br>\n6) Label encoding and normalisation <br>\n7) Feature selection <br>\n8) Modelling \n","9c9b9a67":"## III. Exploratory data analysis for numerical data ","51032b96":"### Replacing null values for categorical values","74819131":"## VII. Modelling","1c3eba5f":"## II. Replacing null values"}}