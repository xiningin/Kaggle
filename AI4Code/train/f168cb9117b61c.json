{"cell_type":{"7492857a":"code","6353bb9e":"code","711bf701":"code","fea93d62":"code","b2ce5539":"code","a260d95d":"code","78f5546e":"code","b94ec3e6":"code","e5298381":"code","3a45a3fc":"code","2af196b2":"code","06def3dd":"code","65ccc947":"code","20a8f1e3":"code","69727bdc":"code","569f71b7":"code","532cb2c8":"code","d31b15da":"code","90f0de84":"code","f64322a6":"markdown","d2459818":"markdown","00613fc4":"markdown","e1b7ae66":"markdown","c5889b9b":"markdown","87a374e7":"markdown","f6bfe928":"markdown","ca23cf89":"markdown","ee569d47":"markdown","3f51c28a":"markdown","6972eab0":"markdown","34aefe96":"markdown","b92bf498":"markdown","7463f88e":"markdown","df4c771b":"markdown","942fa675":"markdown","848dad4f":"markdown","5de3f12b":"markdown"},"source":{"7492857a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6353bb9e":"data = pd.read_csv(\"..\/input\/data.csv\")","711bf701":"data.head()","fea93d62":"data.drop([\"Unnamed: 32\",\"id\"],axis=1,inplace = True)","b2ce5539":"data.head()","a260d95d":"data.diagnosis = [1 if each == \"M\" else 0 for each in data.diagnosis]","78f5546e":"print(data.info())","b94ec3e6":"data.head()","e5298381":"y_raw = data.diagnosis.values \n","3a45a3fc":"# We should make inplace \"false\" otherwise Python will consider as an error. \nx_raw = data.drop([\"diagnosis\"] , axis=1 ,inplace = False) \n","2af196b2":"x_normalized = (x_raw - np.min(x_raw)\/np.max(x_raw) - np.min(x_raw)).values","06def3dd":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x_normalized,y_raw,test_size = 0.2 , random_state=42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n","65ccc947":"def weights_and_bias(dimension):\n    w = np.full((dimension,1), 0.01)\n    b = 0.0\n    return w,b\n\ndef sigmoid(z):\n    y_head = 1 \/ (1 + np.exp(-z))\n    return y_head\n","20a8f1e3":"def forward_backward_propagation(w,b,x_train,y_train):\n    # **forward propagation**\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -(1-y_train)*np.log(1-y_head) - y_train*np.log(y_head)\n    cost = (np.sum(loss)) \/ x_train.shape[1]\n    # ***********************\n    \n    # **backward propagation**\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]      \n    gradients = {\"derivative_weight\" : derivative_weight , \"derivative_bias\" : derivative_bias}\n    # ***********************\n    \n    return cost,gradients","69727bdc":"def update(w,b,x_train,y_train,learning_rate,num_of_iterations):\n    cost_list = []\n    cost_list_print = []\n    index = []\n    \n    for i in range (num_of_iterations):\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        w = w - learning_rate*gradients[\"derivative_weight\"]\n        b = b - learning_rate*gradients[\"derivative_bias\"]\n        if (i%10 == 0):\n            cost_list_print.append(cost)\n            index.append(i)\n            print(\"Cost after {} iteration : {}\".format(i,cost)) \n        \n    \n    parameters = {\"weight\" : w , \"bias\" : b}\n    plt.plot(index,cost_list_print)\n    plt.xticks(index,rotation = 'vertical')\n    plt.xlabel(\"Number of iterations\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    \n    return parameters,gradients,cost_list\n        ","569f71b7":"def predict(w,b,x_test):\n    #In this case we will consider x_test as an input for forward propagation.\n    \n    z = sigmoid(np.dot(w.T,x_test) + b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    \n    for i in range (z.shape[1]):\n        if (z[0,i] <= 0.5):\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n    return Y_prediction        \n        \n        \n    ","532cb2c8":"def logistic_regression(x_train,x_test,y_train,y_test,learning_rate,num_of_iterations):\n    #We will define a dimension.\n    dimension = x_train.shape[0]\n    w,b = weights_and_bias(dimension)\n    parameters,gradients,cost_list = update(w,b,x_train,y_train,learning_rate,num_of_iterations)\n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    print(\"Test accuracy is {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))","d31b15da":"    logistic_regression(x_train,x_test,y_train,y_test,learning_rate = 3,num_of_iterations = 600)","90f0de84":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nprint(\"Test accuracy is {}\".format(lr.score(x_test.T,y_test.T)))\n","f64322a6":"And now we finally prepared our data to perform logistic regression . We can dive into implementing part.","d2459818":"**And now time to make our prediction we are almost at the end and then we'll just call our functions and finishing the logistic regression part.**","00613fc4":"**Now we will use sklearn library to see the difference between our code and library.**","e1b7ae66":"**Special thanks for @dataiteam for further detail you can visit his page.**","c5889b9b":"# Conclusion","87a374e7":"**As we returned cost and gradients before now we can move on to the updating parameters part.\nWe'll update weights and bias depends on the cost function.**","f6bfe928":"# Sci-kit Learn","ca23cf89":"# Defining Forward And Backward Propagation Function","ee569d47":"Therefore we are using logistic regression it has to include binary output like '0' or '1' . In this part we'll simply convert \"Malign\" into \"1\" and \"Benign\" into \"0\"","3f51c28a":" We have 2 features that we don't need it such as 'id' and 'Unnamed:32'.We'll just drop it and prepare our dataset .","6972eab0":"**After sklearn library we found 97.36% accuracy instead of 89.47% . On the other case we were searching learning rate and number of iterations by manually trying but sci-kit learn gives us an advantage that it's search and handle everything by itself.**","34aefe96":"*We Transposed the x and y matrixes because our features for instance in x matrix are the columns but we need it as rows that's why we convert it.\nFor y matrix it's actually not so important cause we are considering it as an array so it's not really differs when we transposing it*","b92bf498":"# Preliminary\nIn this kernel i aimed to implement logistic regression into a cancer dataset.First of i'll try to make it by myself and then i'll compare the accuracy with sklearn library.","7463f88e":"# Implementing Logistic Regression","df4c771b":"# Train , test split\n\n*  As we have our inputs and output we need to split those dataframes as train and test frames. Common usage is 80% train and 20% test.\n\n* We'll simply use sci-kit learn library.\n","942fa675":"# A quick review to our dataset to see what's included.","848dad4f":"# Initializing Parameters And Defining The Activation Function\n* We will consider weights and bias as a parameter.Also we need a probabilistic value as an output.Hereby we will use sigmoid function as our activation function.","5de3f12b":"# Logistic Regression Function"}}