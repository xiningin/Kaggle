{"cell_type":{"bc84a045":"code","117b2719":"code","89af6ef3":"code","643cda3b":"code","f838cfe9":"code","78508d40":"code","2634c871":"code","f4fe4f54":"code","12b238fc":"code","fe051c94":"code","a5a17c19":"code","a44dfe96":"code","4e11be89":"code","08182641":"code","539e7f98":"code","1636b77e":"code","74f2123b":"code","b43e0253":"code","1188d750":"code","95a7a0d0":"code","5897c395":"code","718af14d":"code","6032de9e":"code","b6759576":"code","37098abc":"code","a73ea54b":"code","d1ca64d7":"code","709a5a62":"code","40fc14dd":"code","ebf7c478":"code","2d0a6fc8":"code","bfebe43e":"code","dbc39441":"code","81a69754":"code","13e874a5":"code","ad34c466":"code","49eb2f9c":"code","694be37f":"code","95b456ad":"code","818de3fc":"code","0c13caee":"code","1f7c601a":"code","946c4646":"code","6ca3d80e":"code","0db58fbc":"code","c1bc312f":"code","ddc19717":"code","962dbbec":"code","40b68e3c":"code","0e36653d":"code","20fcb7fa":"code","32295cab":"code","d988c26f":"code","761d49b4":"code","d8ca75b8":"code","03644784":"code","c3024e99":"code","79b8aa1a":"code","8b3b2041":"code","fe824c16":"code","852a17b6":"code","2fff0629":"markdown","d2c502d6":"markdown","1f80cea8":"markdown","fd3f08f5":"markdown","7c333d3a":"markdown","198b61ca":"markdown","8ffaf4f0":"markdown","c6373026":"markdown","e3a86fa7":"markdown","30fc217b":"markdown","d0ab6323":"markdown","0bd1365f":"markdown","01d26820":"markdown","23903ce6":"markdown","e064f7d9":"markdown","e24d7d18":"markdown","08367324":"markdown","6394d1df":"markdown","3fa7e026":"markdown","53ccc528":"markdown","ee47e75c":"markdown","a7fa39d8":"markdown","018a7aff":"markdown","5b540b80":"markdown","2cbdbd85":"markdown","2a527210":"markdown"},"source":{"bc84a045":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","117b2719":"# Importing the library\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import SimpleImputer\nfrom collections import defaultdict\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.model_selection import ShuffleSplit\n\n# see the all columns of the dataset\npd.set_option('display.max_columns', None)\n","89af6ef3":"# read the dataframe\ndf = pd.read_csv('\/kaggle\/input\/loan-sanction-amount\/train.csv')\n\n\n# displyed the head of the dataset\ndf.head()","643cda3b":"# information about the dataet\ndf.info()","f838cfe9":"# Checking the data types\ndf.dtypes","78508d40":"# Rename the columns\ndf.rename({'Income (USD)':'Income', 'Income Stability':'income_stability','Type of Employment':'type_of_employment',\n          'Loan Amount Request (USD)':'loan_amount_request','Current Loan Expenses (USD)':'current_loan_expenses',\n          'No. of Defaults':'no_of_defaults','Property ID':'property_id','Property Type':'property_type',\n          'Property Price':'property_price','Loan Sanction Amount (USD)':'loan_sanction_amount',\n          'Expense Type 1':'expense_type_1','Expense Type 2':'expense_type_2','Has Active Credit Card':'has_active_credit_card',\n          'Property Location':'property_location','Property Age':'property_age','Credit Score':'credit_score'}, axis=1, inplace= True)","2634c871":"# Statistics of the features Numerical features\ndf.describe()","f4fe4f54":"# shape of dataset\ndf.shape","12b238fc":"# Checking the missing value or Nan\ndf.isnull().sum()","fe051c94":"# extracting the fatures having nan values\nfeature_with_nan = [ feature for feature in df.columns if df[feature].isnull().sum()>1]\n\n# checking the how much percantage is nan values\nfor feature in feature_with_nan:\n    print(feature, np.round(df[feature].isnull().mean(),4), '% missing Values')","a5a17c19":"# Fill the Loan Sanction amount with median values\ndf['loan_sanction_amount'].fillna(df.loan_sanction_amount.median(), inplace = True)","a44dfe96":"for feature in feature_with_nan:\n    data = df.copy()\n    \n    # Let's make a variable that indicates 1 if the observation was  missing value \n    data[feature] = np.where(data[feature].isnull(),1,0)\n    \n    #Let's calculate the mean SalePrice where the information is missing\n    fig = plt.figure(figsize=(10,5))\n    data.groupby(feature)['loan_sanction_amount'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('Loan Sanction Amount')\n    plt.legend(['1 for Missing Value','0 for not a missing values'])\n    plt.show()","4e11be89":"print(\"Customer ID {}\".format(len(df['Customer ID'])))","08182641":"# Droped the ID and Name columns bcause it is not contribution for model building\ndf.drop(['Customer ID','Name'],axis=1, inplace = True)","539e7f98":"# Extracting the categorical features\nfeature_with_cat = [feature for feature in df.columns if df[feature].dtypes == 'O']\nprint('List of Categorical Featuers:')\nfeature_with_cat","1636b77e":"sns.countplot(x = 'income_stability',data = df)\nplt.show()","74f2123b":"sns.countplot(x = 'Gender', data = df)\nplt.show()","b43e0253":"fig =plt.figure(figsize=(15,5))\nsns.countplot(x = 'Profession', data = df)\nplt.show()","1188d750":"fig = plt.figure(figsize=(20,5))\nsns.countplot(x = 'type_of_employment', data = df)\nplt.show()","95a7a0d0":"sns.countplot(x = 'Location', data = df)\nplt.show()","5897c395":"sns.countplot(x = 'expense_type_1', data = df)\nplt.show()","718af14d":"sns.countplot(x = 'expense_type_2', data = df)\nplt.show()","6032de9e":"sns.countplot(x = 'has_active_credit_card', data =df)\nplt.show()","b6759576":"sns.countplot(x = 'property_location', data=df)\nplt.show()","37098abc":"# replace the nan value with mode of the featuers\ndef replace_cat_feature(dataset, feature_nan):\n    data = dataset.copy()\n    for feature in feature_nan:\n        data[feature] = data[feature].fillna(data[feature].mode()[0])\n    return data\n\ndf = replace_cat_feature(df, feature_with_cat)","a73ea54b":"# checking the nan value in categorical features \ndf[feature_with_cat].isnull().sum()","d1ca64d7":"## Extracting the numerical features\nfeature_num = [feature for feature in df.columns if df[feature].dtypes != 'O']\n\n# disply the numerical features\nfeature_num","709a5a62":"# Checking how many feature has nan or missing values\nfeature_num_nan = [feature for feature in df.columns if df[feature].isnull().sum() > 1]\nprint('List of numerical features having nan or missing value')\nfeature_num_nan","40fc14dd":"#extracting the disceret feature \ndiscreet_feature = [feature for feature in feature_num if len(df[feature].unique()) < 25]\nprint('Discreet feature ')\ndiscreet_feature","ebf7c478":"# analysis of numerical feature with bar graph\ndf.head()","2d0a6fc8":"# Lets find the relationship between the discreet feature and dependent feature\n\nfor feature in discreet_feature:\n    data= df.copy()\n    \n    data.groupby(feature)['loan_sanction_amount'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('Loan Sanction Amount')\n    plt.title(feature)\n    plt.show()","bfebe43e":"#replacing the discreet feature with the mode value\n\ndf=replace_cat_feature(df, discreet_feature)","dbc39441":"# replacing the numerical_continous value to median\n\nfor feature in feature_num_nan:\n    df[feature] = df[feature].fillna(df[feature].median())","81a69754":"# Distribution plot of continous plot\nsns.displot(data = df, x = 'current_loan_expenses', kde = True, bins=100)\nplt.show()","13e874a5":"# Distribution plot of continous plot\nsns.displot(data = df, x = 'credit_score', kde = True, bins=100)\nplt.show()","ad34c466":"# Distribution plot of continous plot\nsns.displot(data = df, x = 'loan_amount_request', kde = True, bins=100)\nplt.show()","49eb2f9c":"# Distribution plot of continous plot\nsns.displot(data = df, x = 'property_price', kde = True, bins=100)\nplt.show()\n","694be37f":"# Distribution plot of continous plot\nsns.displot(data = df, x = 'property_id', kde = True, bins=100)\nplt.show()","95b456ad":"# Initialize the LabelEncoder object\nd = defaultdict(LabelEncoder) \n\n# Encoding the variable\ndf[feature_with_cat] = df[feature_with_cat].apply(lambda x: d[x.name].fit_transform(x))\nd","818de3fc":"# display the head of the data after label encoding\ndf.head()","0c13caee":"# box plot for analysis the dataset\nfor feature in df.columns:\n    df.boxplot(column = feature, fontsize=15, figsize=(5,5))\n    plt.title(feature)\n    plt.show()","1f7c601a":"# feature has outlier\nlabels = ['loan_sanction_amount','property_price','Dependents','current_loan_expenses','loan_amount_request']","946c4646":"# outlier detection and remover \ndef remove_outliers(df,labels):\n    for label in labels:\n        q1 = df[label].quantile(.25)\n        q3 = df[label].quantile(0.75)\n        iqr = q3 - q1\n        upper_bound = q3 + 1.5 * iqr\n        lower_bound = q1 - 1.5 * iqr\n        print('{} upper bound {}:, {} lower bound{}'.format(label, upper_bound, label, lower_bound))\n        df = df.loc[(df[label]> lower_bound) & (df[label] < upper_bound)]\n    return df","6ca3d80e":"df = remove_outliers(df, labels)","0db58fbc":"## box plot for analysis the dataset has outliers or not\nfor feature in df.columns:\n    df.boxplot(column = feature, fontsize=15, figsize=(5,5))\n    plt.title(feature)\n    plt.show()","c1bc312f":"# seperating the dependent and independent features\ny = df['loan_sanction_amount'].values\nx = df.iloc[:,:-1].values","ddc19717":"# normalize the dependent and independent features\nscaler_x = StandardScaler()\nscaler_y = StandardScaler()\nx = scaler_x.fit_transform(x)\ny = scaler_y.fit_transform(y.reshape(-1,1))","962dbbec":"# seprating the train and test\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=.2, random_state = 0)","40b68e3c":"# Train the model and check the r2_score\nxgb = XGBRegressor()\nxgb.fit(x_train, y_train)\ny_pred = xgb.predict(x_test)\nr2_score(y_test, y_pred)","0e36653d":"# print the rmse \nprint('RMSE of xgb regressor {}'.format(np.sqrt(mean_squared_error(y_test, y_pred))))","20fcb7fa":"# Train the model and check the r2_score\nrfr = RandomForestRegressor()\nrfr.fit(x_train, y_train.reshape(-1,1))\ny_pred = rfr.predict(x_test)\nr2_score(y_test, y_pred)","32295cab":"# print the rmse \nprint('RMSE of xgb regressor {}'.format(np.sqrt(mean_squared_error(y_test, y_pred))))","d988c26f":"# set the hyperparameter\nrandom_grid = {'bootstrap': [True, False],\n               'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110,120, None],\n               'max_features': ['auto', 'sqrt','log2'],\n               'min_samples_leaf': [1, 2, 4, 5, 6,7,8,9,10],\n               'min_samples_split': [2, 5, 10,15,20,25],\n               'n_estimators': [130, 180, 230,250,300,400],\n               'warm_start':[True, False]\n              }\n","761d49b4":"# Tunning the RandomForestRegressor\nrf = RandomForestRegressor()\n\n# Random search of parameters, using 5 fold cross validation, \n# search across 100 different combinations, and use all available cores\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 5, verbose=2, random_state=42, n_jobs = -1)\n\n# Fit the random search model\nrf_random.fit(x_train, y_train)","d8ca75b8":"# Showing the best estimator for the RandomForestRegressor\nrf_random.best_estimator_","03644784":"# showing the best parameter for the RandomForestRegressor \nrf_random.best_params_","c3024e99":"# Best score of the best parameter\nrf_random.best_score_","79b8aa1a":"rff = RandomForestRegressor(n_estimators= 230,min_samples_split= 5,min_samples_leaf= 4,max_features='auto',\n                            max_depth= 10,bootstrap= True, warm_start=True)\nrff.fit(x_train, y_train)\ny_pred = rff.predict(x_test)\nr2_score(y_test, y_pred)","8b3b2041":"# print the rmse\nprint('Rmse of the model {}'.format(np.sqrt(mean_squared_error(y_test, y_pred))))","fe824c16":"#Define a function to plot learning curve.\ndef learning_curves(estimator, title, features, target, train_sizes, cv, n_jobs=-1):\n    plt.figure(figsize = (12,8))\n    train_sizes, train_scores, validation_scores = learning_curve(estimator, features, target, train_sizes = train_sizes, cv = cv, scoring = 'neg_mean_squared_error',  n_jobs=n_jobs)\n    train_scores_mean = -train_scores.mean(axis = 1)\n    validation_scores_mean = -validation_scores.mean(axis = 1)\n    \n    plt.grid()\n    \n    plt.plot(train_sizes, train_scores_mean,'o-', color=\"r\", label = 'Training error')\n    plt.plot(train_sizes, validation_scores_mean,'o-', color=\"g\", label = 'Validation error')\n\n    plt.ylabel('MSE', fontsize = 14)\n    plt.xlabel('Training set size', fontsize = 14)\n    \n    title = 'Learning curves for a ' + title + ' model'\n    plt.title(title, fontsize = 18, loc='left')\n    \n    plt.legend(loc=\"best\")\n    \n    return plt","852a17b6":"# score curves, each time with 20% data randomly selected as a validation set.\ncv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=4)\n\n# Plot learning curve for the RF Regressor\ntitle = \"RandomForestRegressor\"\n\n# Call learning curve with all dataset i.e. traininig and test combined because CV will take of data split.\nlearning_curves(rff, title, x_train,y_train, train_sizes=np.linspace(.1, 1.0, 5), cv=cv, n_jobs=-1)","2fff0629":"### 1. XGBRegressor","d2c502d6":"### Handling the Missing values","1f80cea8":"all the three class has approximetly same number of records so don't need to do anything","fd3f08f5":"We can easly see the low income_stability has is a outliers so we will deal in featues engineering","7c333d3a":"we can easly lots of outliers category","198b61ca":"### Categorical Variables","8ffaf4f0":"### Numerical Features","c6373026":"There are 10 dependent features has nan values so we need to find the relationship between the dependent and independent features.","e3a86fa7":"#### Imputing the categorical features","30fc217b":"given current loan is little bit right skewed so we need to normalize the current loan expenses","d0ab6323":"## Exploratory Data Analysis\n","0bd1365f":"Here with the relation between the missing values and the dependent variable is clearly visible. So we need the replace these nan values with something meaningful which we will do in the feature Engineering section\n\nFrom the above dataset some of the feature like id is not required","01d26820":"We can easly see that loan_amount_request, current_loan_expenses, dependents, property_price and loan_sanction_amount has lots of outler. So we need to remove these outliers.","23903ce6":"some customers has very large credit score so we can easly say that it is outlier so we need to remove the outlier.we would deal in feature engineering.","e064f7d9":"## Model Selection\n","e24d7d18":"### outlier detection","08367324":"## Normalize the features","6394d1df":"Working profession are higher but the student, businessman etc approximetly zero","3fa7e026":"There are 30k records","53ccc528":"## Hyperparameter Tunning","ee47e75c":"## Feature Engineering","a7fa39d8":"### 2. RandomForestRegressor","018a7aff":"property_price feture is right skewed. we would deal in feature engineering","5b540b80":"Approxmitely the same number of male and female customers so don't worry about this featuers","2cbdbd85":"loan amount request feture is right skewed. we would deal in feature engineering","2a527210":"**Features Details**\n* Cutomer ID: Represents a unique identification number of a coustomer\n* Name: Represents the name of a customer\n* Gener: Represents the gender of a customer\n* Age: Represents the age of a customer\n* Income: Represents the income of a customer\n* Income Stability: Represents whether a customer has a stable source of income\n* Profession: Repersents the profession of a customer\n* Type of Employment: Represents the type of employment of a customer\n* Location: Represents the current location that a customer resides\n* Loan Amount Request: Represents the loan amount requested by a customer\n* Current Loan Expenses: If a customer has any current active loans, then this represents the amount that a customer spends on these loand (monthly)\n* Expense Type 1: Represents a type of expense that a customer spends on (monthly)\n* Expense Type 2: Represents a type of expense that a customer spends on (monthly)\n* Dependents: Represents whether a customer has any dependencies ( spouse, parents, siblings, children etc)\n* Credit Score: Represents the credit score of a customer\n* No. of Defaults: Represents the number of time a customer has defaulted\n* Has Active Credit Card: Represents if a customer has any active credit cards or not\n* Property ID: Represents an identification number of a property\n* Property Type: Represents the type of property\n* Property Location: Represents the location of a property\n* Co-Applicant: Represents whether a customer has co-applicants\n* Property Price: Represents the selling price of a property\n\n**Label Details**\n* Loan Sanction Amount: Represents the loan sanctioned amount for a customers in USD"}}