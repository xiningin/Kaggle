{"cell_type":{"b32819a2":"code","d7b9104d":"code","5d2f4bf9":"code","f81da85d":"code","a0a7b3f0":"code","41f6694d":"code","570e1b27":"code","75b62dea":"code","0df53084":"code","2de02599":"code","c9c2274b":"code","b82dfabf":"code","c39fd8dd":"code","4c7426e8":"code","f8687d6d":"code","766e5410":"code","30b6378c":"code","0ab81eb7":"code","dc1fbf7c":"markdown","8d41bc28":"markdown","50d8fce7":"markdown"},"source":{"b32819a2":"import pandas as pd \nimport numpy as np \nimport seaborn as sns \nimport matplotlib.pyplot as plt \n%matplotlib inline","d7b9104d":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import classification_report,confusion_matrix","5d2f4bf9":"#loading data \nreviews = pd.read_csv('..\/input\/restaurant-reviews\/Restaurant_Reviews.tsv', sep='\\t')","f81da85d":"reviews.head(1)","a0a7b3f0":"#create 'text length' col to see if we can find valuable insights\nreviews['text length'] = reviews['Review'].apply(len)","41f6694d":"g = sns.FacetGrid(data=reviews,col='Liked')\ng.map(plt.hist,'text length') #text length seems similar between liked and disliked ","570e1b27":"sns.boxplot(x='Liked',y='text length',data=reviews)","75b62dea":"#create X and y objects for model\nX = reviews['Review']\ny = reviews['Liked']","0df53084":"#CV\ncv = CountVectorizer()\n\nX = cv.fit_transform(X)","2de02599":"#split data \nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.3,random_state=101)","c9c2274b":"#training model using MultinomialNB \nnb = MultinomialNB() #creating instance \n\nnb.fit(X_train,y_train) #fitting model","b82dfabf":"#create predicitions object\npred = nb.predict(X_test)","c39fd8dd":"#check classification report and confusion matrix \nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","4c7426e8":"#create pipeline\npipeline = Pipeline([\n    ('bow', CountVectorizer()),  # strings to token integer counts\n    ('tfidf', TfidfTransformer()),  # integer counts to weighted TF-IDF scores\n    ('classifier', MultinomialNB()),  # train on TF-IDF vectors w\/ Naive Bayes classifier\n])","f8687d6d":"#re-split data for pipeline\nX = reviews['Review']\ny = reviews['Liked']\nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.3,random_state=101)","766e5410":"#fitting pipeline to training data \npipeline.fit(X_train,y_train)","30b6378c":"#using pipeline to predict\npredictions = pipeline.predict(X_test)","0ab81eb7":"#printing confusion matrix and classification report\nprint(confusion_matrix(y_test,predictions))\nprint('\\n')\nprint(classification_report(y_test,predictions))","dc1fbf7c":"## TF-IDF","8d41bc28":"## NLP","50d8fce7":"## TF-IDF was more accurate by one percent "}}