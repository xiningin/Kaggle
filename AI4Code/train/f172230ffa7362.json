{"cell_type":{"92a66d53":"code","180e88af":"code","7fd6cad1":"code","dcf86d69":"code","1cbbb57f":"code","a23c22fa":"code","a07cf00c":"code","0aded75c":"markdown"},"source":{"92a66d53":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","180e88af":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_train.head()","7fd6cad1":"df_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf_test.head()","dcf86d69":"women = df_train.loc[df_train.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\nprint(\"Percentage of women who survived:\", rate_women)","1cbbb57f":"men = df_train.loc[df_train.Sex == 'male']['Survived']\nrate_men = sum(men)\/len(men)\nprint(\"Percentage of men who Survived: \", rate_men)","a23c22fa":"df_train.columns","a07cf00c":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\ny = df_train[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\",\"Parch\"]\nX = pd.get_dummies(df_train[features])\nX_test = pd.get_dummies(df_test[features])\n\n# X_train, X_test,y_train,y_test = train_test_split(X,y, test_size=0.2, random_state=0)\n\nrf = RandomForestClassifier(n_estimators = 200, max_depth= 20, random_state= 1)\nrf.fit(X, y)\ny_pred = rf.predict(X_test)\n\n# # Model Accuracy, how often is the classifier correct?\n# print(\"Accuracy:\",metrics.accuracy_score(y_pred, y_test))\n\noutput = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': y_pred})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n","0aded75c":"## Exploring a pattern"}}