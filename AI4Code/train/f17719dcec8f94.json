{"cell_type":{"3c9f7c12":"code","b2d3ba0c":"code","91a4291c":"code","e412c6f9":"code","238b6387":"code","27e8e94f":"code","9cefedfb":"code","98fd2c66":"code","8559fc63":"code","ab076a55":"code","35ee4800":"code","5e77d5ad":"code","b1ad9006":"code","0730fcdf":"code","4b34daf4":"code","83ce8c8e":"code","d0cfe46b":"code","ff212ecc":"code","491ae39a":"code","262c90f9":"code","13d9f4ef":"code","289a86c9":"code","06f5ed1c":"code","d03bce8e":"code","5344e75a":"code","3d28da77":"code","2c1d9ba4":"code","f9901c2e":"code","a53b7d41":"code","a64eaf71":"code","32a3dd46":"code","87caa7c2":"code","3596c874":"code","a1fbe574":"code","5c897abb":"code","d2a99fb5":"code","6c4fb0ff":"code","b3561994":"code","5303c202":"code","70193b75":"code","b7e4b5d6":"code","c91592aa":"code","ac65ff3e":"markdown","8ca15214":"markdown"},"source":{"3c9f7c12":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2d3ba0c":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","91a4291c":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","e412c6f9":"train","238b6387":"test","27e8e94f":"train.describe()","9cefedfb":"train.info()","98fd2c66":"# comparing survival rate across Age, SibSp, Parch, and Fare \npd.pivot_table(train, index = 'Survived', values = ['Age','SibSp','Parch','Fare'])","8559fc63":"train.isnull().sum()","ab076a55":"test.isnull().sum()","35ee4800":"We see that variable Cabin in train and test file has lot of missing values, hence its better to drop the column.","5e77d5ad":"train.drop(['Cabin'], axis = 1, inplace = True)","b1ad9006":"train.head()","0730fcdf":"# also dropping from test data\ntest.drop(['Cabin'], axis = 1, inplace = True)","4b34daf4":"test.head()","83ce8c8e":"train['Age'].describe()","d0cfe46b":"test['Age'].describe()","ff212ecc":"train['Age'].fillna(train['Age'].mean(), inplace = True)\ntest['Age'].fillna(test['Age'].mean(), inplace = True)","491ae39a":"test.isnull().sum()","262c90f9":"train['Embarked'].unique()","13d9f4ef":"Lets encode catagorical variables","289a86c9":"train['Embarked'] = train['Embarked'].map({'S':1 , 'C': 2, 'Q': 3})","06f5ed1c":"test['Embarked'] = test['Embarked'].map({'S':1 , 'C': 2, 'Q': 3})","d03bce8e":"train.head()","5344e75a":"test.head()","3d28da77":"train['Sex'] = train['Sex'].map({'male': 1, 'female': 0})","2c1d9ba4":"test['Sex'] = test['Sex'].map({'male': 1, 'female': 0})","f9901c2e":"y = train['Survived']\nX = train.drop(['Name','Ticket','Survived','Embarked'], axis =1)","a53b7d41":"X","a64eaf71":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC","32a3dd46":"# creating param\nmodel_param = { \n    'DecisionTreeClassifier':{\n        'model':DecisionTreeClassifier(),\n        'param':{\n            'criterion':['gini', 'entropy']\n        }\n    },\n    'KNeighborsClassifier':{\n        'model':KNeighborsClassifier(),\n        'param':{\n            'n_neighbors':[5,10,15,20,25]\n        }\n    },\n    'SVC':{\n        'model':SVC(),\n        'param':{\n            'kernel':['rbf','linear','sigmoid'],\n            'C':[0.1,1,10,100]\n        }\n    }\n}","87caa7c2":"scores =[]\nfor model_name, mp in model_param.items():\n    model_selection = GridSearchCV(estimator=mp['model'],param_grid=mp['param'],cv=5,return_train_score=False)\n    model_selection.fit(X,y)\n    scores.append({\n        'model': model_name,\n        'best_score': model_selection.best_score_,\n        'best_params' :model_selection.best_params_\n    })","3596c874":"model_score = pd.DataFrame(scores,columns= ['model','best_score','best_params'])\nmodel_score","a1fbe574":"We see that SVC model has given 79% accuracy, lets test data using the same","5c897abb":"test.head()","d2a99fb5":"model_svc = SVC( C = 10, kernel = 'linear')\nmodel_svc.fit(X,y)","6c4fb0ff":"test['Fare'].fillna(test['Fare'].mean(), inplace = True)","b3561994":"test.isnull().sum()","5303c202":"test1 = test.drop(['Name', 'Embarked', 'Ticket'], axis =1)","70193b75":"y_predicted = model_svc.predict(test1)","b7e4b5d6":"submission = pd.DataFrame({\n    \"PassengerId\": test['PassengerId'],\"Survived\" :y_predicted\n})","c91592aa":"submission.to_csv('titanic_submission.csv', index = False)","ac65ff3e":"Lets impute the missing values with the mean in both the data sets\n","8ca15214":"Also Age column has missing values both in train and test data"}}