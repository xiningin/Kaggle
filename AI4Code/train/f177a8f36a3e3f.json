{"cell_type":{"3ff10309":"code","f0b2f005":"code","d327091e":"code","249e7f66":"code","858416ea":"code","a0eae96d":"code","a0d9dd19":"code","ea6b0a0f":"code","3a6d6051":"code","95085ad0":"code","35854a9b":"code","41b75d4d":"code","afc9aee1":"code","d6d53570":"code","f5826929":"code","cacd82d4":"code","be883637":"code","9bc3af44":"code","429930d7":"code","6ecf90d6":"code","bdc1fca3":"code","0060d96a":"code","d607b12c":"code","da22563f":"code","0c417337":"code","e70a6f4e":"code","1c0e669e":"code","e28f9b8c":"code","11f92bef":"code","f562d665":"code","680f2783":"code","a2f42ec3":"code","cbd96088":"code","7e7fec10":"code","12fdf08f":"code","67d7f602":"code","252ef1e2":"code","d19d8c2c":"code","33445ce7":"code","dd8e84ea":"code","0af0bb9d":"markdown","bd834a7f":"markdown","8f56c000":"markdown","f8ffdadc":"markdown","298d4088":"markdown","fab3fb02":"markdown","b24d3c95":"markdown","08eeb0bf":"markdown","b6442816":"markdown"},"source":{"3ff10309":"#\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8(pywt\u306f\u30a6\u30a7\u30fc\u30d6\u30ec\u30c3\u30c8\u89e3\u6790\u7528\u3067\u3059)\nimport numpy as np\nimport pandas as pd\nimport librosa \nimport librosa.display\nimport matplotlib.pyplot as plt\nimport IPython.display as ipd\nimport os\nimport pywt\nfrom tqdm.notebook import tqdm\nfrom tqdm._tqdm_notebook import tqdm_notebook\ntqdm_notebook.pandas(desc=\"Processing:\")\nimport soundfile as sf\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.svm import OneClassSVM\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nimport scipy.stats\n#\u30c7\u30fc\u30bf\u30d1\u30b9\u306e\u6307\u5b9a\u3092\u3057\u307e\u3059\nINPUT_DIR = '\/kaggle\/input\/hah-data-science-challenge'","f0b2f005":"def meta_define():\n    \"\"\"\n    input : none\n    output : Corrected metadata\n    \"\"\"\n    import pandas as pd\n    import os \n    os.chdir(\"\/kaggle\/input\/hah-data-science-challenge\/\")\n    df_train = pd.read_csv(\"train.csv\", index_col=False)\n    df_test = pd.read_csv(\"test.csv\", index_col=False)\n    \n    ##################################################\n    #\u4ee5\u4e0b\u8f9e\u66f8\u3084\u5909\u6570\u306e\u5b9a\u7fa9\n    #\u5404\u30c7\u30fc\u30bf\u4fee\u6b63\u7528\u306e\u8f9e\u66f8\n    bolt_dict = {\n        '\u5927':\"big\",\n        '\u5c0f':\"small\"\n    }\n\n    plate_dict = {\n        '\u5927':\"big\",\n        '\u5c0f':\"small\"\n    }\n\n    record_dict = {\n        'PC\u5185\u81d3':\"pc_built_in\",\n        'PC\u5185\u8535':\"pc_built_in\",\n        'USB1':\"usb1\", \n        'USB2':\"usb2\", \n        'USB3':\"usb3\", \n        'USB4':\"usb4\", \n        '\u30b9\u30de\u30db':\"smart_phone\",\n        '\u30b9\u30de\u30db\u306e\u30dc\u30a4\u30b9\u30ec\u30b3\u30fc\u30c0':\"smart_phone\",\n        '\u5185\u8535\u30de\u30a4\u30af':\"pc_built_in\",\n        }\n\n    distance_dict = {\n        '10cm': 0.1, \n        '10\u339d': 0.1, \n        '1M': 1.0, \n        '20cm': 0.2, \n        '20\u339d': 0.2, \n        '2M': 2.0, \n        '2m': 2.0, \n        '30cm': 0.3, \n        '30cn': 0.3, \n        '30\u339d': 0.3, \n        '3m': 3.0, \n        '40cm': 0.4, \n        '40\u339d': 0.4, \n        '50cm': 0.5, \n        '50\u339d': 0.5, \n        '5cm': 0.05,\n        '8cm': 0.08, \n        '\uff11\uff2d': 1.0   \n    }\n\n    cvt_dict = {\n        \"\u306d\u3058\" : bolt_dict, \n        '\u30d7\u30ec\u30fc\u30c8' : plate_dict, \n        '\u9332\u97f3\u65b9\u6cd5' : record_dict, \n        '\u30de\u30a4\u30af\u8ddd\u96e2' : distance_dict\n    }\n    \n    #df_train\u65e5\u672c\u8a9e\u30ab\u30e9\u30e0\u540d : ['ID', '\u306d\u3058', '\u30d7\u30ec\u30fc\u30c8', '\u9332\u97f3\u65b9\u6cd5', '\u30de\u30a4\u30af\u8ddd\u96e2', '\u30d5\u30a1\u30a4\u30eb', 'Target']\n    col_train = ['id', 'bolt', 'plate', 'record', 'mic_dist', 'file', 'target']\n    #df_test\u65e5\u672c\u8a9e\u30ab\u30e9\u30e0\u540d : ['ID', '\u306d\u3058', '\u30d7\u30ec\u30fc\u30c8', '\u9332\u97f3\u65b9\u6cd5', '\u30de\u30a4\u30af\u8ddd\u96e2', '\u30d5\u30a1\u30a4\u30eb', 'Target']\n    col_test = ['id', 'bolt', 'plate', 'record', 'mic_dist', 'file']\n    \n    tgt_col = [\"\u306d\u3058\", '\u30d7\u30ec\u30fc\u30c8', '\u9332\u97f3\u65b9\u6cd5', '\u30de\u30a4\u30af\u8ddd\u96e2']\n    ##################################################\n    \n    for col in tgt_col:#Target\u306f\u5909\u63db\u5bfe\u8c61\u5916\n        df_train[col] = df_train[col].map(cvt_dict[col])\n        df_test[col] = df_test[col].map(cvt_dict[col])\n        \n    df_train.columns = col_train\n    df_test.columns = col_test\n    \n    return df_train, df_test","d327091e":"#read data\ndf_train, df_test = meta_define()","249e7f66":"#display data top 5\ndf_train.head()","858416ea":"#display data under 5\ndf_train[df_train[\"target\"]==0.0]","a0eae96d":"#define function for displaying wave\ndef display_wav(file_name):\n    wav, sr = librosa.load(file_name, sr=None)\n    plt.figure()\n    plt.figure(figsize=(15, 5))\n    librosa.display.waveplot(wav, sr)\n    plt.show()","a0d9dd19":"#plot normal sound train2.wav\ndisplay_wav(\"train\/train\/train2.wav\")\nipd.Audio(\"train\/train\/train2.wav\")","ea6b0a0f":"display_wav(\"train\/train\/train31.wav\")\nipd.Audio(\"train\/train\/train31.wav\")","3a6d6051":"display_wav(\"train\/train\/train46.wav\")\nipd.Audio(\"train\/train\/train46.wav\")","95085ad0":"df_train[df_train[\"target\"]==1.0]","35854a9b":"display_wav(\"train\/train\/train482.wav\")\nipd.Audio(\"train\/train\/train482.wav\")","41b75d4d":"display_wav(\"train\/train\/train785.wav\")\nipd.Audio(\"train\/train\/train785.wav\")","afc9aee1":"wav, sr = librosa.load(\"train\/train\/train785.wav\", sr=None)\nwav","d6d53570":"widths = np.arange(1, 31)\ncwtmatr, freqs = pywt.cwt(wav, widths, 'cmor1.5-1.0')\nabs_result = np.abs(cwtmatr)\npower_spec = librosa.amplitude_to_db(abs_result, ref=np.max)\n\nplt.figure(figsize=(25,5))\nlibrosa.display.specshow(power_spec, y_axis='log', x_axis='time', sr = sr)\nplt.title('Power Spectrogram')\nplt.colorbar(format='%+2.0f dB')\n\nplt.tight_layout()\nplt.show()","f5826929":"bins = 84\nhop_length = 512\nfmin = 32.7\ncqt = librosa.cqt(wav,sr, hop_length=hop_length, fmin=fmin, n_bins=bins)\nD = librosa.amplitude_to_db(cqt, ref=np.max) #\u5b9aQ\u5909\u63db\nfrq = librosa.cqt_frequencies(n_bins=bins,fmin=fmin) #\u5468\u6ce2\u6570\u8ef8\nt = librosa.frames_to_time(np.arange(D.shape[1] + 1), sr, hop_length=hop_length) #\u6642\u9593\u8ef8\nplt.pcolormesh(t, frq, 10 * np.log(np.abs(cqt)), cmap='jet')\nplt.colorbar()\nplt.show()\nplt.close()","cacd82d4":"stft_result = librosa.stft(wav)\nabs_result = np.abs(stft_result)\npower_spec = librosa.amplitude_to_db(abs_result, ref=np.max)\n\nplt.figure(figsize=(25,5))\nlibrosa.display.specshow(power_spec, y_axis='log', x_axis='time', sr = sr)\nplt.title('Power Spectrogram')\nplt.colorbar(format='%+2.0f dB')\n\nplt.tight_layout()\nplt.show()","be883637":"wav, sr = librosa.load(\"train\/train\/train482.wav\", sr=None)\nwav = (wav-wav.min())\/(wav.max()-wav.min())\nwav","9bc3af44":"widths = np.arange(1, 31)\ncwtmatr, freqs = pywt.cwt(wav, widths, 'cmor1.5-1.0')\nabs_result = np.abs(cwtmatr)\npower_spec = librosa.amplitude_to_db(abs_result, ref=np.max)\n\nplt.figure(figsize=(25,5))\nlibrosa.display.specshow(power_spec, y_axis='log', x_axis='time', sr = sr)\nplt.title('Power Spectrogram')\nplt.colorbar(format='%+2.0f dB')\n\nplt.tight_layout()\nplt.show()","429930d7":"bins = 84\nhop_length = 512\nfmin = 32.7\ncqt = librosa.cqt(wav,sr, hop_length=hop_length, fmin=fmin, n_bins=bins)\nD = librosa.amplitude_to_db(cqt, ref=np.max) #\u5b9aQ\u5909\u63db\nfrq = librosa.cqt_frequencies(n_bins=bins,fmin=fmin) #\u5468\u6ce2\u6570\u8ef8\nt = librosa.frames_to_time(np.arange(D.shape[1] + 1), sr, hop_length=hop_length) #\u6642\u9593\u8ef8\nplt.pcolormesh(t, frq, 10 * np.log(np.abs(cqt)), cmap='jet')\nplt.colorbar()\nplt.show()\nplt.close()","6ecf90d6":"stft_result = librosa.stft(wav)\nabs_result = np.abs(stft_result)\npower_spec = librosa.amplitude_to_db(abs_result, ref=np.max)\n\nplt.figure(figsize=(25,5))\nlibrosa.display.specshow(power_spec, y_axis='log', x_axis='time', sr = sr)\nplt.title('Power Spectrogram')\nplt.colorbar(format='%+2.0f dB')\n\nplt.tight_layout()\nplt.show()","bdc1fca3":"wav, sr = librosa.load(\"train\/train\/train2.wav\", sr=None)\nwav = (wav-wav.min())\/(wav.max()-wav.min())\nwav","0060d96a":"widths = np.arange(1, 31)\ncwtmatr, freqs = pywt.cwt(wav, widths, 'cmor1.5-1.0')\nabs_result = np.abs(cwtmatr)\npower_spec = librosa.amplitude_to_db(abs_result, ref=np.max)\n\nplt.figure(figsize=(25,5))\nlibrosa.display.specshow(power_spec, y_axis='log', x_axis='time', sr = sr)\nplt.title('Power Spectrogram')\nplt.colorbar(format='%+2.0f dB')\n\nplt.tight_layout()\nplt.show()","d607b12c":"bins = 84\nhop_length = 512\nfmin = 32.7\ncqt = librosa.cqt(wav,sr, hop_length=hop_length, fmin=fmin, n_bins=bins)\nD = librosa.amplitude_to_db(cqt, ref=np.max) #\u5b9aQ\u5909\u63db\nfrq = librosa.cqt_frequencies(n_bins=bins,fmin=fmin) #\u5468\u6ce2\u6570\u8ef8\nt = librosa.frames_to_time(np.arange(D.shape[1] + 1), sr, hop_length=hop_length) #\u6642\u9593\u8ef8\nplt.pcolormesh(t, frq, 10 * np.log(np.abs(cqt)), cmap='jet')\nplt.colorbar()\nplt.show()\nplt.close()","da22563f":"wav, sr = librosa.load(\"train\/train\/train31.wav\", sr=None)\nwav = (wav-wav.min())\/(wav.max()-wav.min())\nwav","0c417337":"widths = np.arange(1, 31)\ncwtmatr, freqs = pywt.cwt(wav, widths, 'cmor1.5-1.0')\nabs_result = np.abs(cwtmatr)\npower_spec = librosa.amplitude_to_db(abs_result, ref=np.max)\n\nplt.figure(figsize=(25,5))\nlibrosa.display.specshow(power_spec, y_axis='log', x_axis='time', sr = sr)\nplt.title('Power Spectrogram')\nplt.colorbar(format='%+2.0f dB')\n\nplt.tight_layout()\nplt.show()","e70a6f4e":"bins = 84\nhop_length = 512\nfmin = 32.7\ncqt = librosa.cqt(wav,sr, hop_length=hop_length, fmin=fmin, n_bins=bins)\nD = librosa.amplitude_to_db(cqt, ref=np.max) #\u5b9aQ\u5909\u63db\nfrq = librosa.cqt_frequencies(n_bins=bins,fmin=fmin) #\u5468\u6ce2\u6570\u8ef8\nt = librosa.frames_to_time(np.arange(D.shape[1] + 1), sr, hop_length=hop_length) #\u6642\u9593\u8ef8\nplt.pcolormesh(t, frq, 10 * np.log(np.abs(cqt)), cmap='jet')\nplt.colorbar()\nplt.show()\nplt.close()","1c0e669e":"# meta_data\u306b\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u8ffd\u52a0\ndf_train['filepath'] = INPUT_DIR + '\/train\/train\/' + df_train['file']\ndf_test['filepath'] = INPUT_DIR + '\/test\/test\/' + df_test['file']\n\n# train\u3068test\u3092\u3072\u3068\u3064\u306b\ndf = pd.concat([df_train, df_test]).reset_index(drop=True)\n# \u4e00\u6253\u97f31\u30ec\u30b3\u30fc\u30c9\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\nresults = []\nfilelist = df['filepath'].to_list()\n\nfor i in tqdm(range(len(df))):\n    filepath = df.loc[i, 'filepath']\n    y, sr = librosa.load(filepath)\n    onset_envelope = librosa.onset.onset_strength(y, sr)\n    onset_times = librosa.onset.onset_detect(y=y, sr=sr, onset_envelope=onset_envelope, units='time')\n    \n    for j, onset_time in enumerate(onset_times):\n        tmp = pd.DataFrame([df.loc[i]])\n        tmp['split_id'] = j\n        tmp['onset_time'] = onset_time\n        tmp['play_time'] = y.size \/ sr\n        results.append(tmp)\ndf_split = pd.concat(results)","e28f9b8c":"# onset_detect\u3067\u691c\u51fa\u3055\u308c\u305f\u6642\u9593\u3092\u5143\u306b\u5207\u308a\u51fa\u3059\u6642\u9593\u3092\u8a2d\u5b9a\n# onset_detect\u306f\u3001\u59cb\u70b9\u304c\u82e5\u5e72\u9045\u308c\u3066\u3044\u308b\u306e\u3067\u30de\u30a4\u30ca\u30b9\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u4ed8\u4e0e\n# \u30aa\u30d5\u30bb\u30c3\u30c8\u639b\u3051\u305f\u59cb\u70b9\u304b\u3089\u56fa\u5b9a\u6642\u9593\u5206\u3092\u8db3\u3057\u305f\u5024\u3092\u7d42\u70b9\u3068\u3059\u308b\n\nst_offset = 0.05 # \u59cb\u70b9\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\nduration = 0.2 # \u5207\u308a\u51fa\u3059\u6642\u9593\ndf_split['st_time'] = df_split['onset_time'] - st_offset\ndf_split['ed_time'] = df_split['st_time'] + duration\ndf_split['duration'] = duration\n\n# \u7d42\u70b9\u3067\u56fa\u5b9a\u6642\u9593\u306b\u6e80\u305f\u306a\u3044\u5834\u5408\u306f\u9664\u5916\ndf_split = df_split[df_split['ed_time'] <= df_split['play_time']].reset_index(drop=True)","11f92bef":"# \u5207\u308a\u51fa\u3057\u305f\u6253\u97f3\u3054\u3068\u306esignal\u306e\u6700\u5927\u5024\u3092\u30e1\u30bf\u30c7\u30fc\u30bf\u306b\u8ffd\u52a0\u3059\u308b\nfor i in tqdm(range(len(df_split))):\n    filepath = df_split.loc[i, 'filepath']\n    st_time = df_split.loc[i, 'st_time']\n    duration = df_split.loc[i, 'duration']\n    \n    # load\u3059\u308b\u3068\u304d\u306boffset\u3067\u59cb\u70b9\u3001duration\u3067\u671f\u9593\u3092\u6307\u5b9a\u3059\u308b\n    y, sr = librosa.load(filepath, offset=st_time, duration=duration)\n    df_split.loc[i, 'signal_max'] = max(abs(y))","f562d665":"df = df_split.copy()","680f2783":"# \u97f3\u306e\u5927\u304d\u3055\u304c\u4e00\u5b9a\u4ee5\u4e0b\u306e\u30c7\u30fc\u30bf\u306f\u7121\u97f3\u3068\u3057\u3066\u3001\u5bfe\u8c61\u304b\u3089\u9664\u5916\nth = 0.5\ndf = df[df['signal_max']>0.5].reset_index(drop=True)","a2f42ec3":"df_labeled = df[df.target.isnull()==False]","cbd96088":"# librosa\u3067.wav\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u7279\u5fb4\u62bd\u51fa\u3057\u307e\u3059\u3002\nn_features = 84\n\nfeatures = np.zeros((len(df), n_features))\nfor i in tqdm(range(len(df))):\n    filepath = df.loc[i, 'filepath']\n    st_time = df.loc[i, 'st_time']\n    duration = df.loc[i, 'duration']\n    \n    y, sr = librosa.load(filepath, offset=st_time, duration=duration)\n    y = (y-y.min())\/(y.max()-y.min()) # \u30b5\u30f3\u30d7\u30eb\u3054\u3068\u306e\u6b63\u898f\u5316\n    widths = np.arange(1, 85)\n    cwtmatr, freqs = pywt.cwt(y, widths, 'cmor1.5-1.0')\n    abs_result = np.abs(cwtmatr)\n    power_spec = librosa.amplitude_to_db(abs_result, ref=np.max)\n    ceps = power_spec.mean(axis=1)\n    \n    # \u8907\u6570\u306e\u30ed\u30fc\u30ea\u30f3\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6\u3067\u305d\u308c\u305e\u308c20\u6b21\u5143\u306eMFCC\u3092\u5f97\u3089\u308c\u308b\u306e\u3067\u3001\u305d\u306e\u5e73\u5747\u3092\u3068\u308b\u3002\n    features[i] = ceps","7e7fec10":"def outlier_scoring(train_data, pred_data, n_neighbors,leaf_size,metric):\n    # \u6559\u5e2b\u306a\u3057\u7570\u5e38\u691c\u77e5\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3067\u7570\u5e38\u30b9\u30b3\u30a2\u3092\u4ed8\u4e0e\u3057\u307e\u3059\n    model = LocalOutlierFactor(novelty=True, n_neighbors=n_neighbors,leaf_size=leaf_size,metric=metric) # \u3053\u3053\u3067\u306fk-\u8fd1\u508d\u6cd5\u306e\u6d41\u308c\u3092\u304f\u3080LocalOutlierFactor\u3092\u7528\u3044\u307e\u3059\n    model.fit(train_data) # \u6b63\u5e38\u30c7\u30fc\u30bf\u306e\u307f\u3092\u7528\u3044\u3066\u5b66\u7fd2\u3057\u307e\u3059\n    pred = model.score_samples(pred_data) \n    # \u5024\u304c\u5c0f\u3055\u3044\u307b\u3069\u7570\u5e38\u5ea6\u304c\u9ad8\u3044\u306e\u3067\u3001\u7b26\u53f7\u3092\u3072\u3063\u304f\u308a\u8fd4\u3057\u30660\u304b\u30891\u306b\u304a\u3055\u3081\u308b\n    scaler = MinMaxScaler()\n    pred = scaler.fit_transform(-pred.reshape(-1,1))\n    return pred","12fdf08f":"norm_idx = list(df[df['target']==0].index)\nanorm_idx = list(df[df['target']==1].index)\n\ntr_idx = norm_idx[:int(len(norm_idx)\/2)]\nval_idx = norm_idx[int(len(norm_idx)\/2):] + anorm_idx","67d7f602":"tr = features[tr_idx]\nval = features[val_idx]","252ef1e2":"# LOF\u306en_neighbors\u3092\u632f\u3063\u3066cv\u30b9\u30b3\u30a2\u78ba\u8a8d\nfor param in [5,10,15,20,25,30]:\n    df_valid = df.copy()\n    for leaf_size in [5,10,15,20,25,30]:\n        for met in [\"braycurtis\", \"canberra\", \"chebyshev\", \"correlation\", \"dice\", \"hamming\", \"jaccard\", \"kulsinski\", \"minkowski\", \"rogerstanimoto\", \"russellrao\", \"sokalmichener\", \"sokalsneath\", \"sqeuclidean\", \"yule\"]:\n            df_valid.loc[val_idx, 'pred'] = outlier_scoring(tr, val, param,leaf_size,met)\n            df_valid = df_valid.dropna(subset=['target', 'pred'])\n            score = roc_auc_score(df_valid['target'], df_valid['pred'])\n            print(f'n_neighbors={param},leafsize={leaf_size},metric={met} | roc_auc_socre={score}')","d19d8c2c":"tr_idx = norm_idx\npred_idx = list(df[df['file'].str.contains('test')].index)\ntr = features[tr_idx]\npred = features[pred_idx]\ndf_pred = df.copy()\ndf_pred.loc[pred_idx, 'target'] = outlier_scoring(tr, pred,n_neighbors=25,leaf_size=20,metric=\"braycurtis\" )\ndf_pred = df_pred[df_pred['file'].str.contains('test')]\n# 1\u6253\u97f3\u3054\u3068\u306e\u7d50\u679c\u306e\u5e73\u5747\u53d6\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u5358\u4f4d\u306e\u4e88\u6e2c\u5024\u3092\u7b97\u51fa\u3059\u308b\nmean_pred = df_pred.groupby('id')['target'].mean().reset_index()","33445ce7":"# sample_sub\u306b\u7d50\u679c\u3092merge\nsub = pd.read_csv('sample_submission.csv', usecols=['ID']).rename(columns={\"ID\":\"id\"})\nsub = sub.merge(mean_pred, on='id', how='left')\nsub=sub.rename(columns={\"id\":\"ID\",\"target\":\"Target\"})\n# \u3059\u3079\u3066\u7121\u97f3\u3060\u3063\u305f\u5834\u5408\u3001\u4e88\u6e2c\u5024\u304c\u306a\u3044\u306e\u3067\u5e73\u5747\u5024\u3067\u57cb\u3081\u308b\nsub = sub.fillna(sub['Target'].mean())\nsub = sub.set_index('ID')\nsub.to_csv('\/kaggle\/working\/submission.csv')\nsub","dd8e84ea":"# librosa\u3067.wav\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u7279\u5fb4\u62bd\u51fa\u3057\u307e\u3059\u3002\nn_features = 20\n\nfeatures = np.zeros((len(df), n_features))\nfor i in tqdm(range(len(df))):\n    filepath = df.loc[i, 'filepath']\n    st_time = df.loc[i, 'st_time']\n    duration = df.loc[i, 'duration']\n    \n    y, sr = librosa.load(filepath, offset=st_time, duration=duration)\n    #\u5916\u308c\u5024\u3092\u8003\u616e\u3057\u3066\n    y=scipy.stats.zscore(y)\n    widths = np.arange(1, 85)\n    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=20)\n    ceps = mfcc.mean(axis=1)\n    \n    # \u8907\u6570\u306e\u30ed\u30fc\u30ea\u30f3\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6\u3067\u305d\u308c\u305e\u308c20\u6b21\u5143\u306eMFCC\u3092\u5f97\u3089\u308c\u308b\u306e\u3067\u3001\u305d\u306e\u5e73\u5747\u3092\u3068\u308b\u3002\n    features[i] = ceps","0af0bb9d":"<span style=\"font-size:200%;\"> **\u97f3\u306e\u53ef\u8996\u5316\uff08\u7570\u5e38\u3042\u308a\uff09**<\/span><br>\ntrain\u30c7\u30fc\u30bf\u304b\u3089\u7570\u5e38\u306a\u3057\u306e\u30c7\u30fc\u30bf\u3092\u898b\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002","bd834a7f":"\u3053\u306e\u3088\u3046\u306b\u6e1b\u8870\u72b6\u6cc1\u306a\u3069\u306e\u7279\u5fb4\u3092\u62bd\u51fa\u3059\u308b\u3053\u3068\u3067\u7cbe\u5ea6\u304c\u4e0a\u304c\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u305f\u4e0a\u3067\u4eca\u56de\u306flocaloutfilter\u3092\u7528\u3044\u305f\u6559\u5e2b\u306a\u3057\u7570\u5e38\u691c\u77e5\u3092\u7528\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059<br>\n\u53c2\u8003\u306b\u3057\u305fnotebook<br>\nhttps:\/\/www.kaggle.com\/nejumi\/simple-unsupervised-baseline<br>\nhttps:\/\/www.kaggle.com\/t88take\/hah-exp005-simple-baseline<br>","8f56c000":"\u30c8\u30f3\u30cd\u30eb\u306a\u3069\u306e\u8868\u5c64\u306e\u30b3\u30f3\u30af\u30ea\u30fc\u30c8\u5f37\u5ea6\u3092\u8abf\u3079\u308b\u305f\u3081\u306b\u6253\u97f3\u691c\u67fb\u304c\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002<br>\n\u4e00\u822c\u306b\u306f\u691c\u67fb\u54e1\u304c\u30cf\u30f3\u30de\u30fc\u3067\u30b3\u30f3\u30af\u30ea\u30fc\u30c8\u8868\u9762\u3092\u305f\u305f\u304d\u3001\u6e05\u97f3\uff08\u30ad\u30f3\u30ad\u30f3\u3068\u3044\u3046\u97f3\uff09\u304b\u6fc1\u97f3\uff08\u30dc\u30b3\u30dc\u30b3\u3068\u3044\u3046\u97f3\uff09\u3067\u826f\u3057\u60aa\u3057\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002<br>\n\u30a6\u30a7\u30fc\u30d6\u30ec\u30c3\u30c8\u5909\u63db\u306b\u3088\u308b\u30aa\u30af\u30bf\u30fc\u30d6\u5206\u6790\u3067\u3001\u304a\u304a\u307e\u304b\u306a\u5468\u6ce2\u6570\u5206\u5e03\u3084\u3001\u5404\u5468\u6ce2\u6570\u3067\u306e\u6e1b\u8870\u72b6\u6cc1\u3001\u63fa\u3089\u304e\u306e\u3042\u308b\u7121\u3057\u3067\u5224\u5b9a\u3059\u308b\u306e\u304c\u6709\u52b9\u3060\u3068\u601d\u3048\u307e\u3059\u3002<br>\n> [http:\/\/ensoftware.net\/analysis\/daon.html](http:\/\/)<<br> \n","f8ffdadc":"\u4eca\u56de\u306f\u6253\u97f3\u691c\u67fb\u3067\u5f97\u3089\u308c\u305f\u97f3\u58f0\u30c7\u30fc\u30bf\u3092\u57fa\u306b\u53ef\u8996\u5316\u3068\u30e2\u30c7\u30eb\u69cb\u7bc9\u3092\u4f5c\u308a\u307e\u3059\u3002","298d4088":"### **\u6253\u97f3\u691c\u67fb\u3068\u306f**","fab3fb02":"#### **\u53cd\u7701\u70b9**<br>\n\u671f\u5f85\u3057\u3066\u3044\u305f\u3082\u306e\u3088\u308a\u3042\u307e\u308a\u7cbe\u5ea6\u306f\u5909\u308f\u3089\u306a\u304b\u3063\u305f\u3088\u3046\u3067\u3059\u2026<br>\n\u539f\u56e0\u3068\u3057\u3066\u306f\u97f3\u58f0\u89e3\u6790\u306b\u5bfe\u3059\u308b\u77e5\u8b58\u4e0d\u8db3\u3084\u7d4c\u9a13\u4e0d\u8db3\u306a\u3069\u8272\u3093\u306a\u539f\u56e0\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u97f3\u58f0\u89e3\u6790\u306f\u5927\u5b66\u9662\u3067\u306f\u5b66\u3076\u6a5f\u4f1a\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u306e\u3067\u3001\u4eca\u56de\u306e\u30b3\u30f3\u30da\u3092\u901a\u3057\u3066\u6539\u3081\u3066\u307e\u305f\u52c9\u5f37\u3057\u3066\u304a\u304d\u305f\u3044\u3068\u8003\u3048\u3066\u304a\u308a\u307e\u3059\u3002\u6b8b\u308a1\u9031\u9593\u5f31\u3067\u3059\u304c\u3001\u5f15\u304d\u7d9a\u304d\u6539\u5584\u3092\u5c3d\u304f\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002","b24d3c95":"### **\u30e2\u30c7\u30eb\u69cb\u7bc9\u30fb\u5b66\u7fd2\u30fb\u8a55\u4fa1**","08eeb0bf":"### \u76ee\u7684","b6442816":"<span style=\"font-size:200%;\"> **\u97f3\u306e\u53ef\u8996\u5316(\u7570\u5e38\u306a\u3057)**<\/span><br>"}}