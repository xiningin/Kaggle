{"cell_type":{"ad116de2":"code","8b31f578":"code","29f2e38f":"code","a74f61f7":"code","04c4a935":"code","15952caa":"code","e81be703":"code","b2e61981":"code","87c1bcfe":"code","a53699c1":"code","a44d6a26":"code","f9c29704":"code","1003002f":"code","b963841d":"code","6028afec":"code","ecd064a4":"code","240cbe62":"code","20130306":"code","86f278cf":"code","bd1f72d1":"code","afc19669":"code","00d3ffec":"code","0214dc87":"code","03f5703f":"code","91ae7b26":"code","d8f4003a":"code","2e6f12f3":"code","d9a1bddb":"code","29589db3":"code","6ce99e92":"code","f1504b57":"code","cd3a291f":"code","98fa4abb":"code","6a5bd52d":"code","d40e2931":"code","c8653602":"code","4e04cd9f":"code","fa7bac84":"code","108d0bcb":"code","32d05bc7":"code","7cfa1b8a":"code","3c7adcf2":"code","74672597":"code","84ab9ac9":"code","56c85314":"code","027d52b9":"code","72b83e67":"code","b4306280":"code","b5a9f4e9":"code","f1026695":"code","05fcef44":"code","4f612317":"code","b7a5e917":"code","8433e423":"code","febc9383":"code","02df5c94":"code","b36c71bd":"code","42f86fa2":"code","9eae1c4d":"code","320b1893":"code","dca11a10":"code","35fb7011":"code","aa3ddde9":"code","d1daa85d":"code","ca03c2fd":"code","c9835184":"code","0e4c24c8":"code","eceb0e1a":"code","a2689961":"code","1d96e24e":"code","2934138a":"code","5c3729d8":"code","09f4f505":"code","3015abab":"code","347495d5":"code","1347abc2":"code","f76e4727":"code","cdee3c7c":"code","28ba4c8f":"code","c4b52515":"code","498beb9f":"code","f1588b06":"code","1e6195d1":"code","8e9c9694":"code","22cef3fe":"code","cd4678bf":"code","5dd63370":"code","95d79f6f":"code","6af5faaa":"code","65dd8835":"code","1b59f1ee":"code","5c31aa89":"code","4856a270":"code","4ee0c3e6":"code","c02c507e":"code","4331106d":"code","c58a2a4f":"code","66ca787c":"code","2e63d40d":"code","e929e56c":"code","c2f72e9f":"code","d4efaaa0":"code","9991e111":"code","5d2ced0c":"code","a530df27":"code","0c6d6cf5":"code","967f2d11":"code","e8ab973c":"code","d6d3e5fd":"code","2bae7542":"code","29b2f7e7":"code","145fae69":"code","24f77cb9":"code","b53a12b0":"code","df695224":"code","c02266b1":"markdown","c79883e4":"markdown","f9e830ff":"markdown","3fef16f1":"markdown"},"source":{"ad116de2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b31f578":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib  as plt\nfrom scipy.stats import pearsonr\nfrom scipy.stats import spearmanr\nfrom scipy.stats import kendalltau\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")","29f2e38f":"cars = pd.read_csv('\/kaggle\/input\/car-price-prediction\/CarPrice_Assignment.csv')\ncars.head()","a74f61f7":"# here we check missing values and columns datatypes.\ncars.info()","04c4a935":"cars.describe()","15952caa":"# 0   car_ID            205 non-null    int64  ------> this is carID remove this column \n# 1   symboling         205 non-null    int64  \n# 2   CarName           205 non-null    object   Non Numerical -> Replace the missing data with the Mode of the column\n# 3   fueltype          205 non-null    object   Non Numerical -> Replace the missing data with the Mode of the column\n# 4   aspiration        205 non-null    object   Non Numerical -> Replace the missing data with the Mode of the column\n# 5   doornumber        205 non-null    object   Non Numerical -> Replace the missing data with the Mode of the column\n# 6   carbody           205 non-null    object   Non Numerical -> Replace the missing data with the Mode of the column\n# 7   drivewheel        205 non-null    object   Non Numerical -> Replace the missing data with the Mode of the column\n# 8   enginelocation    205 non-null    object   Non Numerical -> Replace the missing data with the Mode of the column\n# 9   wheelbase         205 non-null    float64  Discrete -> Replace the missing data with the Median Value of the column\n# 10  carlength         205 non-null    float64  Discrete -> Replace the missing data with the Median Value of the column\n# 11  carwidth          205 non-null    float64  Discrete -> Replace the missing data with the Median Value of the column\n# 12  carheight         205 non-null    float64  Discrete -> Replace the missing data with the Median Value of the column\n# 13  curbweight        205 non-null    int64    Continous --> Replace the missing data with the Mean value of the column\n# 14  enginetype        205 non-null    object   Non Numerical -> Replace the missing data with the Mode of the column\n# 15  cylindernumber    205 non-null    object   Non Numerical -> Replace the missing data with the Mode of the column\n# 16  enginesize        205 non-null    int64    Continous --> Replace the missing data with the Mean value of the column\n# 17  fuelsystem        205 non-null    object   Non Numerical -> Replace the missing data with the Mode of the column\n# 18  boreratio         205 non-null    float64  Discrete -> Replace the missing data with the Median Value of the column\n# 19  stroke            205 non-null    float64  Discrete -> Replace the missing data with the Median Value of the column\n# 20  compressionratio  205 non-null    float64  Discrete -> Replace the missing data with the Median Value of the column\n# 21  horsepower        205 non-null    int64    Continous --> Replace the missing data with the Mean value of the column\n# 22  peakrpm           205 non-null    int64    Continous --> Replace the missing data with the Mean value of the column\n# 23  citympg           205 non-null    int64    Continous --> Replace the missing data with the Mean value of the column\n# 24  highwaympg        205 non-null    int64    Continous --> Replace the missing data with the Mean value of the column\n# 25  price             205 non-null    float64  Target value or label.","e81be703":"sns.boxplot(cars.symboling)","b2e61981":"sns.boxplot(cars.wheelbase)","87c1bcfe":"def outliersfreecolumn(col):\n    data =  np.short(col)\n    Q1,Q3 = np.percentile(data,[25,75])\n    print(Q1,Q3)\n    IQR =Q3-Q1\n    print(IQR)\n    lowerRange = Q1-(1.5 * IQR)\n    upperRange = Q3+(1.5 * IQR)\n    print(lowerRange, upperRange)\n    \n    return lowerRange, upperRange","a53699c1":"lowerRange, upperRange = outliersfreecolumn(cars.wheelbase)","a44d6a26":"cars[(cars.wheelbase < lowerRange) | (cars.wheelbase > upperRange)]","f9c29704":"outlierslist = list(cars[(cars.wheelbase < lowerRange) | (cars.wheelbase > upperRange)].wheelbase)\noutlierslist","1003002f":"cars.wheelbase.median()","b963841d":"cars.wheelbase.replace(outlierslist,97.0,inplace=True)","6028afec":"cars[(cars.wheelbase < lowerRange) | (cars.wheelbase > upperRange)]","ecd064a4":"sns.boxplot(cars.carlength)","240cbe62":"lowerRange, upperRange = outliersfreecolumn(cars.carlength)","20130306":"cars[(cars.carlength < lowerRange) | (cars.carlength > upperRange)]","86f278cf":"sns.boxplot(cars.carwidth)","bd1f72d1":"lowerRange, upperRange = outliersfreecolumn(cars.carwidth)","afc19669":"cars[(cars.carwidth < lowerRange) | (cars.carwidth > upperRange)]","00d3ffec":"outlierslist = list(cars[(cars.carwidth < lowerRange) | (cars.carwidth > upperRange)].carwidth)\noutlierslist","0214dc87":"cars.carwidth.median()","03f5703f":"cars.carwidth.replace(outlierslist,65.5,inplace=True)","91ae7b26":"cars[(cars.carwidth < lowerRange) | (cars.carwidth > upperRange)]","d8f4003a":"sns.boxplot(cars.carheight)","2e6f12f3":"sns.boxplot(cars.curbweight)","d9a1bddb":"sns.boxplot(cars.enginesize)","29589db3":"lowerRange, upperRange = outliersfreecolumn(cars.enginesize)","6ce99e92":"cars[(cars.enginesize < lowerRange) | (cars.enginesize > upperRange)]","f1504b57":"outlierslist = list(cars[(cars.enginesize < lowerRange) | (cars.enginesize > upperRange)].enginesize)\noutlierslist","cd3a291f":"cars.enginesize.mean()","98fa4abb":"cars.enginesize.replace(outlierslist,127,inplace=True)","6a5bd52d":"cars[(cars.enginesize < lowerRange) | (cars.enginesize > upperRange)]","d40e2931":"sns.boxplot(cars.boreratio)","c8653602":"sns.boxplot(cars.stroke)","4e04cd9f":"lowerRange, upperRange = outliersfreecolumn(cars.stroke)","fa7bac84":"cars[(cars.stroke < 2.5) | (cars.stroke > 3.8)]","108d0bcb":"outlierslist = list(cars[(cars.stroke < 2.5) | (cars.stroke > 3.8)].stroke)\noutlierslist","32d05bc7":"cars.stroke.median()","7cfa1b8a":"cars.stroke.replace(outlierslist,3.29,inplace=True)","3c7adcf2":"cars[(cars.stroke < 2.5) | (cars.stroke > 3.8)]","74672597":"sns.boxplot(cars.compressionratio)","84ab9ac9":"lowerRange, upperRange = outliersfreecolumn(cars.compressionratio)","56c85314":"cars[(cars.compressionratio < lowerRange) | (cars.compressionratio > upperRange)]","027d52b9":"outlierslist = list(cars[(cars.compressionratio < lowerRange) | (cars.compressionratio > upperRange)].compressionratio)\noutlierslist","72b83e67":"cars.compressionratio.median()","b4306280":"cars.compressionratio.replace(outlierslist,9.0,inplace=True)","b5a9f4e9":"cars[(cars.compressionratio < lowerRange) | (cars.compressionratio > upperRange)]","f1026695":"sns.boxplot(cars.horsepower)","05fcef44":"lowerRange, upperRange = outliersfreecolumn(cars.horsepower)","4f612317":"cars[(cars.horsepower < lowerRange) | (cars.horsepower > upperRange)]","b7a5e917":"outlierslist = list(cars[(cars.horsepower < lowerRange) | (cars.horsepower > upperRange)].horsepower)\noutlierslist","8433e423":"cars.horsepower.mean()","febc9383":"cars.horsepower.replace(outlierslist,104,inplace=True)","02df5c94":"cars[(cars.horsepower < lowerRange) | (cars.horsepower > upperRange)]","b36c71bd":"sns.boxplot(cars.peakrpm)","42f86fa2":"lowerRange, upperRange = outliersfreecolumn(cars.peakrpm)","9eae1c4d":"cars[(cars.peakrpm < lowerRange) | (cars.peakrpm > upperRange)]","320b1893":"outlierslist = list(cars[(cars.peakrpm < lowerRange) | (cars.peakrpm > upperRange)].peakrpm)\noutlierslist","dca11a10":"cars.peakrpm.mean()","35fb7011":"cars.peakrpm.replace(outlierslist,5125,inplace=True)","aa3ddde9":"cars[(cars.peakrpm < lowerRange) | (cars.peakrpm > upperRange)]","d1daa85d":"sns.boxplot(cars.citympg)","ca03c2fd":"lowerRange, upperRange = outliersfreecolumn(cars.citympg)","c9835184":"cars[(cars.citympg < lowerRange) | (cars.citympg > upperRange)]","0e4c24c8":"outlierslist = list(cars[(cars.citympg < lowerRange) | (cars.citympg > upperRange)].citympg)\noutlierslist","eceb0e1a":"cars.citympg.mean()","a2689961":"cars.citympg.replace(outlierslist,25,inplace=True)","1d96e24e":"cars[(cars.citympg < lowerRange) | (cars.citympg > upperRange)]","2934138a":"sns.boxplot(cars.highwaympg)","5c3729d8":"lowerRange, upperRange = outliersfreecolumn(cars.highwaympg)","09f4f505":"cars[(cars.highwaympg < lowerRange) | (cars.highwaympg > upperRange)]","3015abab":"outlierslist = list(cars[(cars.highwaympg < lowerRange) | (cars.highwaympg > upperRange)].highwaympg)\noutlierslist","347495d5":"cars.highwaympg.mean()","1347abc2":"cars.highwaympg.replace(outlierslist,30,inplace=True)","f76e4727":"cars[(cars.highwaympg < lowerRange) | (cars.highwaympg > upperRange)]","cdee3c7c":"cars.columns","28ba4c8f":"cars.symboling.value_counts()","c4b52515":"cars.fueltype.value_counts()","498beb9f":"cars.fueltype.replace(['gas','diesel'],[0,1],inplace=True)","f1588b06":"cars.aspiration.value_counts()","1e6195d1":"cars.aspiration.replace(['std','turbo'],[0,1],inplace=True)","8e9c9694":"cars.aspiration.value_counts()","22cef3fe":"cars.doornumber.value_counts()","cd4678bf":"cars.doornumber.replace(['four','two'],[0,1],inplace=True)","5dd63370":"cars.doornumber.value_counts()","95d79f6f":"cars.carbody.value_counts()","6af5faaa":"cars.drivewheel.value_counts()","65dd8835":"cars.enginelocation.value_counts()","1b59f1ee":"cars.enginelocation.replace(['front','rear'],[0,1],inplace=True)","5c31aa89":"cars.enginelocation.value_counts()","4856a270":"cars.enginetype.value_counts()","4ee0c3e6":"cars.cylindernumber.value_counts()","c02c507e":"cars.fuelsystem.value_counts()","4331106d":"carsadddummies = pd.get_dummies(data=cars,columns=['fuelsystem','cylindernumber','enginetype','drivewheel','carbody','symboling'])","c58a2a4f":"carsadddummies","66ca787c":"newcarsdata = carsadddummies.drop(['car_ID', 'CarName'], axis=1)\nnewcarsdata.head()","2e63d40d":"newcarsdata.insert(0, 'price', newcarsdata.pop('price'))\nnewcarsdata.head()","e929e56c":"newcarsdata.columns","c2f72e9f":"# 1. Pearsons Correlation Coeff\n\ncorr, pvalue = pearsonr(newcarsdata['symboling_3'],newcarsdata['price'])\nif pvalue <= 0.5:\n    print(\"Alternate Hypothesis Passed. carbody_hatchback and price have Linear Relationship\")\nelse:\n    print(\"Null Hypothesis Passed. carbody_hatchback and price doesnot have Linear Relationship\")","d4efaaa0":"# 2. Spearmans Rank test\nfrom scipy.stats import spearmanr\ncorr, pvalue = spearmanr(newcarsdata['symboling_3'], newcarsdata['price'])\n\nif pvalue <= 0.5:\n    print(\"Alternate Hypothesis Passed. carbody_hatchback and price have Linear Relationship\")\nelse:\n    print(\"Null Hypothesis Passed. carbody_hatchback and price doesnot have Linear Relationship\")","9991e111":"# 3. Kendall's Rank test\nfrom scipy.stats import kendalltau\ncorr, pvalue = kendalltau(newcarsdata['symboling_3'], newcarsdata['price'])\n \nif pvalue <= 0.5:\n    print(\"Alternate Hypothesis Passed. carbody_hatchback and price have Linear Relationship\")\nelse:\n    print(\"Null Hypothesis Passed. carbody_hatchback and price doesnot have Linear Relationship\")","5d2ced0c":"# newcarsdata['fueltype'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['aspiration'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['doornumber'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['enginelocation'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['wheelbase'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['carlength'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['carwidth'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['carheight'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['curbweight'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['enginesize'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['boreratio'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['stroke'], newcarsdata['price'] have Linear Relationship (1X)\n# newcarsdata['compressionratio'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['horsepower'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['peakrpm'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['citympg'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['highwaympg'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['fuelsystem_1bbl'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['fuelsystem_2bbl'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['fuelsystem_4bbl'], newcarsdata['price'] have Linear Relationship--[no select]\n# newcarsdata['fuelsystem_idi'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['fuelsystem_mfi'], newcarsdata['price'] have Linear Relationship--[no select]\n# newcarsdata['fuelsystem_mpfi'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['fuelsystem_spdi'], newcarsdata['price'] have Linear Relationship--[no select]\n# newcarsdata['fuelsystem_spfi'], newcarsdata['price'] have Linear Relationship--[no select]\n# newcarsdata['cylindernumber_eight'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['cylindernumber_five'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['cylindernumber_four'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['cylindernumber_six'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['cylindernumber_three'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['cylindernumber_twelve'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['cylindernumber_two'], newcarsdata['price'] have Linear Relationship (1X)\n# newcarsdata['enginetype_dohc'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['enginetype_dohcv '], newcarsdata['price'] have Linear Relationship\n# newcarsdata['enginetype_l'], newcarsdata['price'] have Linear Relationship (1X)\n# newcarsdata['enginetype_ohc'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['enginetype_ohcf'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['enginetype_ohcv'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['enginetype_rotor'], newcarsdata['price'] have Linear Relationship (1X)\n# newcarsdata['drivewheel_4wd'], newcarsdata['price'] have Linear Relationship--[no select]\n# newcarsdata['drivewheel_fwd'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['drivewheel_rwd'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['carbody_convertible'], newcarsdata['price'] have Linear Relationship\n# newcarsdata['carbody_hardtop '], newcarsdata['price'] have Linear Relationship\n# newcarsdata['carbody_hatchback '], newcarsdata['price'] have Linear Relationship\n# newcarsdata['carbody_sedan '], newcarsdata['price'] have Linear Relationship\n# newcarsdata['carbody_wagon'], newcarsdata['price'] have Linear Relationship--[no select]\n# newcarsdata['symboling_-2'], newcarsdata['price'] have Linear Relationship (1X)\n# newcarsdata['symboling_-1 '], newcarsdata['price'] have Linear Relationship\n# newcarsdata['symboling_0 '], newcarsdata['price'] have Linear Relationship\n# newcarsdata['symboling_1 '], newcarsdata['price'] have Linear Relationship\n# newcarsdata['symboling_2 '], newcarsdata['price'] have Linear Relationship\n# newcarsdata['symboling_3 '], newcarsdata['price'] have Linear Relationship\n","a530df27":"new2data =  newcarsdata.drop(['fuelsystem_4bbl', 'fuelsystem_mfi','fuelsystem_spdi','fuelsystem_spfi','drivewheel_4wd','carbody_wagon'], axis=1)\nnew2data.head(3)","0c6d6cf5":"new3data =  new2data.drop(['stroke','cylindernumber_two','enginetype_l','enginetype_rotor','symboling_-2'], axis=1)\nnew3data.head(3)","967f2d11":"features =  new3data.iloc[:,1:].values\nlabel = new3data.iloc[:,:1].values","e8ab973c":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfor i in range(1,210):\n    X_train,X_test,y_train,y_test = train_test_split(features,label,test_size=0.2,random_state=i)\n    modelLine = LinearRegression()\n    modelLine.fit(X_train,y_train)\n    \n    training = modelLine.score(X_train,y_train)\n    testing = modelLine.score(X_test,y_test)\n    \n    if testing > training:\n        print(\"testing score: {} train score: {} seed {}\".format(testing,training,i)) ","d6d3e5fd":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(features,label,test_size=0.2,random_state=194)\nmodelLine = LinearRegression()\nmodelLine.fit(X_train,y_train)\n    \ntraining = modelLine.score(X_train,y_train)\ntesting = modelLine.score(X_test,y_test)\nprint(\"testing score: {} train score: {} \".format(testing,training))","2bae7542":"y_pred = modelLine.predict(X_test)","29b2f7e7":"from sklearn.metrics import r2_score\nr2 = r2_score(y_test, y_pred)\nprint('r2 score for perfect model is', r2)","145fae69":"y_preddata =  pd.DataFrame(list(zip(y_pred,y_test)),columns=['y_pred','y_test'])","24f77cb9":"y_pred","b53a12b0":"y_preddata","df695224":"y_preddata.to_csv('Final_predict_test_compare.csv')","c02266b1":"## Model building","c79883e4":"## Exploratory Data Analysis (EDA)","f9e830ff":"## Data preprocessing","3fef16f1":"**Which variables are significant in predicting the price of a car**"}}