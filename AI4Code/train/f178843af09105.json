{"cell_type":{"232fcd31":"code","ece1f569":"code","5f68713f":"code","370fff68":"code","182dbc18":"code","9662ee51":"code","4cae0068":"code","630f1c4b":"code","48852b33":"code","a3788500":"code","0ea8f573":"code","7c460d4f":"code","89223622":"code","638dcceb":"markdown","4896c24a":"markdown","e617ee7c":"markdown","36629bc0":"markdown","324bea45":"markdown","f2f4e081":"markdown","bfe59fa1":"markdown","29c3e0b7":"markdown","c419f356":"markdown","7127c2cd":"markdown","ff70f3c9":"markdown","6754cd4f":"markdown","40dfaaf8":"markdown","8ec0a1ef":"markdown"},"source":{"232fcd31":"\"\"\"import pandas as pd\nimport numpy as np\n\n#function that returns the closest receiver to a defensive player at a given point in time, plus that distance\ndef coords(x, y, receivers):\n    #single point x,y coords for current defensive player\n    a = np.array([x, y]).astype(float)\n    #vector of coordinates for receivers\n    receivers = pd.DataFrame(receivers).rename(columns={0:'displayName', 1: 'x', 2: 'y'})\n    b = np.array(receivers[['x', 'y']])\n    distances = np.linalg.norm(b-a, axis=1)\n    return [receivers.loc[np.where(distances == np.min(distances))[0][0], 'displayName'], min(distances)]\n\n#function that returns all receivers on the field plus their x, y coordinates at a given frameId during a play \ndef listcompr(db, val, a, b):\n        return [l[[10, 1, 2]] for l in db if l[a] == val if l[b] in ['receiver']]\n    \ndb = pd.read_csv('plays.csv')\npositions = pd.read_csv('positions.csv')\n\nfor i in range(1, 18):\n    \n    data = pd.read_csv('week' + str(i) + '.csv')\n    \n    #posGen is a column added which just simplified all offensive players as a 'receiver' category and cleaned up defensive positions\n    for pos in positions['desc'].unique():\n        selection = data['position'].isin(np.array(positions[positions['desc'] == pos]['pos']))\n        data.loc[selection, 'posGen'] = pos\n        \n    football = data['displayName'].isin(['Football'])\n    data.loc[football, 'posGen'] = 'football'\n    \n    #create 'val' column which is a unique Id for each frame of each play\n    data['val'] = data['gameId'].astype(str) + data['playId'].astype(str) + data['frameId'].astype(str) \n    valCol = data.columns.get_loc('val')\n    posCol = data.columns.get_loc('posGen')\n    n = np.array(data)\n    allFrames = pd.DataFrame(data['val'].unique()).rename(columns={0:'val'})\n    \n    #return list of receivers on field with their respective coordinates at each unique frameId\n    f = allFrames.apply(lambda row: listcompr(n, row['val'], valCol, posCol), axis=1)   \n    allFrames['receivers'] = f\n    \n    data = pd.merge(data, allFrames, on=['val'])\n    dbs = data['posGen'].isin(['db', 'lb'])\n    distances = data.loc[dbs].apply(lambda row: coords(row['x'], row['y'], row['receivers']), axis=1)   \n    \n    data.loc[dbs, ['closestReceiver', 'distToReceiver']] = pd.DataFrame(distances).apply(lambda x: [x[0][0], x[0][1]], axis=1, result_type='expand').rename(columns={0:'closestReceiver', 1: 'distToReceiver'})\n\n    defData = data.loc[data['posGen'].isin(['lb', 'db']), ['gameId', 'playId', 'frameId', 'nflId', 'displayName', 'position', 'closestReceiver', 'distToReceiver']].reset_index(drop=True)\n    defData.to_csv('Defensive Data Week ' + str(i) + '.csv')\n    print(i)\"\"\"","ece1f569":"\"\"\"import pandas as pd\nimport numpy as np\n\ngames = pd.read_csv('games.csv')\nplays = pd.read_csv('plays.csv').merge(games[['gameId', 'week']], how='left', on='gameId')\nplayers = pd.read_csv('players.csv')\npositions = pd.read_csv('positions.csv')\nallDistances = pd.read_csv('defensiveData.csv').merge(games[['gameId', 'week']], how='left', on='gameId')\n\n#returns the frameId at which the pass arrived on the play (if that event occurred)\ndef passArrived(db, gameId, playId):\n    try:\n        frame = db.loc[(db['gameId'] == gameId) & (db['playId'] == playId) & (db['event'] == 'pass_arrived')]['frameId'].reset_index(drop=True)[0]\n        return frame\n    except (KeyError, IndexError):\n        return db.loc[(db['gameId'] == gameId) & (db['playId'] == playId)]['frameId'].max()\n\n#returns the number of defensive players at each position playing in man or zone coverage (according to definition of man vs zone coverage established previously)\ndef man(db, gameId, playId):\n    cb = db[(db['gameId'] == gameId) & (db['playId'] == playId) & (db['position'] == 'CB')]['man']\n    cbMan = cb.sum()\n    cbZone = len(cb) - cbMan\n    ss = db[(db['gameId'] == gameId) & (db['playId'] == playId) & (db['position'] == 'SS')]['man']\n    ssMan = ss.sum()\n    ssZone = len(ss) - ssMan\n    fs = db[(db['gameId'] == gameId) & (db['playId'] == playId) & (db['position'] == 'FS')]['man']\n    fsMan = fs.sum()\n    fsZone = len(fs) - fsMan\n    lb = db[(db['gameId'] == gameId) & (db['playId'] == playId) & (db['position'] == 'LB')]['man']\n    lbMan = lb.sum()\n    lbZone = len(lb) - lbMan\n    return pd.Series([cbMan, cbZone, ssMan, ssZone, fsMan, fsZone, lbMan, lbZone])\n\n#returns the defending team on the play\ndef homeTeam(db, gameId, posTeam):\n    if db[db['gameId'] == gameId].reset_index(drop=True)['homeTeamAbbr'][0] == posTeam:\n        return db[db['gameId'] == gameId].reset_index(drop=True)['visitorTeamAbbr'][0]\n    else:\n        return db[db['gameId'] == gameId].reset_index(drop=True)['homeTeamAbbr'][0]\n\n#three definitions for position groups. \ndef define(row):\n    cats = []\n    for pos in ['cb', 'ss', 'fs', 'lb']:\n        #there are more players from the position selected playing in zone coverage\n        if row[pos + 'Zone'] > row[pos + 'Man']: \n            cat = 0\n        #there are more players from the position selected playing in man coverage\n        elif row[pos + 'Man'] > row[pos + 'Zone']:\n            cat = 1\n        #there is an equal number of players from the position selected in man and zone coverage\n        else:\n            cat = 2\n        cats.append(cat)\n    return pd.Series(cats)\n\n#this returns an array for each defender that brings in the initial distance away from his opponent, the average distance between him and his opponent for the length of the play\n#as well as the final and max distance between him and his opponent on the play (up until the pass arrives)\ndef initDist(db, gameId, playId, player, man):\n    if man == 1:\n        init = db.loc[(db['gameId'] == gameId) & (db['playId'] == playId) & (db['nflId'] == player) & (db['frameId'] == 1), 'distToReceiver'].reset_index(drop=True)[0]\n        avg = db.loc[(db['gameId'] == gameId) & (db['playId'] == playId) & (db['nflId'] == player), 'distToReceiver'].mean()\n        final = float(db.loc[(db['gameId'] == gameId) & (db['playId'] == playId) & (db['nflId'] == player), 'distToReceiver'].reset_index(drop=True).iloc[-1])\n        maxDist = db.loc[(db['gameId'] == gameId) & (db['playId'] == playId) & (db['nflId'] == player), 'distToReceiver'].max()\n        return pd.Series([init, avg, final, maxDist])\n    else:\n        return pd.Series([np.nan]*4)\n\n#for any given play, this counts the number of relavent defensive events that happen on a play. Eg tackle or interception\ndef defenceMoves(db, gameId, playId, defMoves):\n    moves = []\n    for move in defMoves:\n        moves.append(db.loc[(db['gameId'] == gameId) & (db['playId'] == playId) & (db['displayName'] == 'Football') & (db['event'] == move), 'event'].count())\n    return pd.Series(moves)\n\n#function to get the coordinates of the Football at any given relevant event, and calculate the closest offensive or defensive player to the ball\ndef closest(db, gameId, playId, move, role, row):\n    if row[move] > 0:\n        #determine at which frameId a specific event occurred\n        frame = db.loc[(db['gameId'] == gameId) & (db['playId'] == playId) & (db['displayName'] == 'Football') & (db['event'] == move), 'frameId'].reset_index(drop=True)[0]\n        #coordinates of the football at the time of the event\n        a = np.array(db.loc[(db['gameId'] == gameId) & (db['playId'] == playId) & (db['displayName'] == 'Football') & (db['frameId'] == frame)].reset_index(drop=True)[['x', 'y']]).astype(float)\n        #vector of coordinates for players on the field\n        players = db.loc[(db['gameId'] == gameId) & (db['playId'] == playId) & (db['role'] == role) & (db['frameId'] == frame)].reset_index(drop=True)[['nflId', 'displayName', 'x', 'y']]\n        if len(players) == 0:\n            players = db.loc[(db['gameId'] == gameId) & (db['playId'] == playId) & (db['role'] == role) & (db['event'] == move)].reset_index(drop=True)[['nflId', 'displayName', 'x', 'y']]\n        b = np.array(players[['x', 'y']]).astype(float)\n        #distances between all players and the football to return the minimum\n        distanceCalc = np.linalg.norm(b-a, axis=1)\n        return pd.Series([players.loc[np.where(distanceCalc == np.min(distanceCalc))[0][0], 'nflId'], min(distanceCalc)])\n    else:\n        return pd.Series([np.nan, np.nan])\n    \n#function to return the closest defender to a given receiver\ndef closestDef(db, gameId, playId, rec, data, row):\n    if row['pass_arrived'] > 0:\n        try:\n            return pd.Series(np.array(db.loc[(db['gameId'] == gameId) & (db['playId'] == playId) & (db['event'] == 'pass_arrived') & (db['receiverId'] == rec)][['nflId', 'distToReceiver']].sort_values('distToReceiver', ascending=True).reset_inde$\n        except IndexError:\n            a = np.array(data.loc[(data['gameId'] == gameId) & (data['playId'] == playId) & (data['nflId'] == rec) & (data['event'] == 'pass_arrived')].reset_index(drop=True).iloc[0][['x', 'y']]).astype(float)\n            #vector of coordinates for defenders\n            defence = data.loc[(data['gameId'] == gameId) & (data['playId'] == playId) & (data['role'] == 'def') & (data['event'] == 'pass_arrived')].reset_index(drop=True)[['nflId', 'displayName', 'x', 'y']]\n            b = np.array(defence[['x', 'y']]).astype(float)\n            distanceCalc = np.linalg.norm(b-a, axis=1)\n            return pd.Series([defence.loc[np.where(distanceCalc == np.min(distanceCalc))[0][0], 'nflId'], min(distanceCalc)])\n    else:\n        return pd.Series([np.nan, np.nan])\n                                      \n#function that looks up the target receiver and the closest player to this receiver when the pass arrived. It then determines whether this defender\n#was in a man coverage and if he marking up on the same opponent at the beginning of the play. If these conditions are satisfied the function returns a 1, else 0                                      \ndef isMan(db, gameId, playId, rec, dMan, row):\n    if row['pass_arrived'] > 0:\n        try:\n            defPlayer = db.loc[(db['gameId'] == gameId) & (db['playId'] == playId) & (db['frameId'] == 1) & (db['receiverId'] == rec) & (db['man'] == 1)]['nflId'].reset_index(drop=True)[0]\n            if defPlayer == dMan:\n                return 1\n            else:\n                return 0\n        except (KeyError, IndexError):\n            return 0\n    else:\n        return 0\n                                      \nfor i in range(1, 18):\n    data = pd.read_csv('week' + str(i) + '.csv')\n    #need to drop duplicates\n    data = data.drop_duplicates().reset_index(drop=True)\n    #distances is the dataframe that we produced in the previous code above of the information regarding the closest receiver to a defender and the distance between them at each frameId\n    distances = allDistances[allDistances['week'] == i].reset_index(drop=True)    \n    distances = distances.drop_duplicates().reset_index(drop=True)\n    distances = distances.merge(data[['gameId', 'playId', 'frameId', 'event']].drop_duplicates().reset_index(drop=True), how='left', on=['gameId', 'playId', 'frameId'])\n                                      \n    # filter for pre pass_arrived data\n    current = plays[plays['week'] == i].reset_index(drop=True)\n    current['passArrivedFrame'] = pd.Series(current.apply(lambda x: passArrived(data, x['gameId'], x['playId']), axis=1))\n    \n    #the below dataframe filters out events after the pass arrives \n    dist = distances.merge(current[['gameId', 'playId', 'passArrivedFrame']], how='left', on=['gameId', 'playId'])\n    dist = dist[dist['frameId'] <= dist['passArrivedFrame']].reset_index(drop=True)\n    df = dist.groupby(['gameId', 'playId', 'nflId', 'position',  'closestReceiver']).size().reset_index().rename(columns={0:'count'})\n    frames = dist.groupby(['gameId', 'playId'])['frameId'].max().reset_index().rename(columns={'frameId':'frames'})\n    df = df.merge(frames, how='left', on=['gameId', 'playId'])\n    \n    #several methods to determine whether a player is in man or zone coverage\n    df['manPercentage'] = df['count'] \/ df['frames']\n    df['man'] = [1 if x > 0.975 else 0 for x in df['manPercentage']]\n                                      \n    # change all LB to be LB\n    df['position'] = df['position'].replace(['MLB', 'OLB', 'ILB'], 'LB')\n                                      \n    #based on the fact that there are more FS than SS registered, we will changed S and DB to be SS for now\n    df['position'] = df['position'].replace(['DB', 'S'], 'SS')\n                                      \n    #this creates a dataframe which lists each defensive player for each play and whether they were in a man or zone coverage                                  \n    defenders = df.sort_values(['gameId', 'playId', 'man'], ascending=[True, True, False]).drop_duplicates(subset=['gameId', 'playId', 'nflId', 'position'], keep='first').reset_index(drop=True)\n    \n    #return the number of players in each position playing in a certain type of coverage\n    current[['cbMan', 'cbZone', 'ssMan', 'ssZone', 'fsMan', 'fsZone', 'lbMan', 'lbZone']] = current.apply(lambda x: man(defenders, x['gameId'], x['playId']), axis=1)\n    \n    #insert defending team\n    current['defTeam'] = current.apply(lambda x: homeTeam(games, x['gameId'], x['possessionTeam']), axis=1)\n    \n    #count of players by position\n    current[['cb', 'ss', 'fs', 'lb']] = current.apply(define, axis=1)\n                                      \n    #drop plays that don't have defender info\n    current['defenderCount']  = current.loc[:, 'cbMan':'lbZone'].sum(1)\n    current = current[current['defenderCount'] > 0].reset_index(drop=True)\n                                      \n    #get initial, average, final and max distance between defenders and they marked opponent during each play\n    defenders[['init', 'avg', 'final', 'maxDist']] = defenders.apply(lambda x: initDist(dist, x['gameId'], x['playId'], x['nflId'], x['man']), axis=1)\n    \n    #next get list of events that we are interested in to see which defensive player was responsible\n    defMoves = ['pass_outcome_incomplete', 'first_contact', 'qb_sack', 'pass_outcome_interception', 'tackle', 'pass_outcome_caught', 'pass_tipped', 'qb_strip_sack', 'fumble', 'out_of_bounds', 'pass_outcome_touchdown']\n    current[defMoves] = current.apply(lambda x: defenceMoves(data, x['gameId'], x['playId'], defMoves), axis=1)\n                                      \n    #now we want to go through the columns, and if there is a 1 in the column, we will get the closest defender from the football at the timeframe in which the specific event happens\n    data = data.merge(positions[['position', 'role']], on='position', how='left')\n    for move in defMoves:\n        current[move + '_id'] = np.nan\n        current[move + '_dist'] = np.nan\n        d = current[current[move] > 0].apply(lambda x: closest(data, x['gameId'], x['playId'], move, 'def', x), axis=1)\n        loc = current[move] > 0\n        current.loc[loc, [move + '_id', move + '_dist']] = d.rename(columns={0:move + '_id', 1:move + '_dist'})\n\n    #for pass incomplete and pass caught, based on the closest defender we can look up their respective opponent in the distances data at the same event frameId\n    #we then calculate the distance between the football and the offensive player. filter cases where the football is within 2 - 3 yards of the receiver (to take out errant throws)\n    # we can then see how the probability of a complete play changes with distance between the defender and receiver. CNN model, random forest, k nearest neighbours all possibilities\n    #for a player in man coverage, measure the percentage of which he allows receptions, then also measure the average YAC when he is the man marking his opponent\n    feature = ['pass_arrived']\n    current['pass_arrived'] = current.apply(lambda x: defenceMoves(data, x['gameId'], x['playId'], feature), axis=1)\n                                      \n    #get closest receiver at the time of the pass_arrived event\n    current[['target_id', 'target_dist']] = current.apply(lambda x: closest(data, x['gameId'], x['playId'], 'pass_arrived', 'off', x), axis=1)\n    current = current.merge(players[['nflId', 'displayName']].rename(columns={'nflId':'target_id'}), how='left', on='target_id').rename(columns={'displayName':'targetName'})\n                                      \n    #then lookup in distances the closest defender to this player. \n    check = data[['gameId', 'playId', 'nflId', 'displayName']].drop_duplicates().reset_index(drop=True).rename(columns={'nflId':'receiverId', 'displayName':'closestReceiver'})\n    distances = distances.merge(check, on=['gameId', 'playId', 'closestReceiver'], how='left')\n    distances = distances.merge(defenders[['gameId', 'playId', 'displayName', 'man']], on=['gameId', 'playId', 'displayName'], how='left')\n    current[['coverage_id', 'distToReceiver']] = current.apply(lambda x: closestDef(distances, x['gameId'], x['playId'], x['target_id'], data, x), axis=1)\n    \n    #we would also want to check who was marking this receiver in the first frame, and whether it is a man coverage or not. If man, it would be a negative outcome for the defender \n    current['man'] = current.apply(lambda x: isMan(distances, x['gameId'], x['playId'], x['target_id'], x['coverage_id'], x), axis=1)\n    #if the receiver isn't found it is likely that the player isn't in a tight man coverage\n    #note that the distance between receiver and defender will not be very effective for lbs covering the hb as they may be closer to a tight end but that may not be their man\n    \n    #define the play was successful is the epa of the play was greater than 0\n    current['success'] = (current['epa'] > 0).astype(int)\n    \n    #now we have our relevant dataframes ready\n    current.to_csv('playsSummaryWeek' + str(i) + '.csv')\n    defPlayers.to_csv('defPlayersWeek' + str(i) + '.csv')\n    distances.to_csv('distancesWeek' + str(i) + '.csv')\n    defenders.to_csv('defendersWeek' + str(i) + '.csv')\n\"\"\"","5f68713f":"import pandas as pd\nplayers = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/players.csv')\ncurrent = pd.read_csv('\/kaggle\/input\/mydata\/current.csv')\ndefenders = pd.read_csv('\/kaggle\/input\/mydata\/defenders.csv')\n\ncoverage = current[(current['cb'] != 2) & (current['ss'] != 2) & (current['lb'] != 2)].groupby(['cb', 'ss', 'lb'])['epa'].mean().reset_index().sort_values(['epa'], ascending=True).reset_index(drop=True)\ncoverage['success'] = current[(current['cb'] != 2) & (current['ss'] != 2) & (current['lb'] != 2)].groupby(['cb', 'ss', 'lb'])[['epa', 'success']].mean().reset_index().sort_values(['epa'], ascending=True).reset_index(drop=True)['success']\n\ncoverage = coverage.replace(to_replace=0, value=\"zone\") \ncoverage = coverage.replace(to_replace=1, value=\"man\") \n\ncoverage.style \\\n  .format('{:.2f}', subset=['epa', 'success']) \\\n  .bar(align='mid', color=['#90EE90', '#FCC0CB'], subset=['epa', 'success']) \\\n  .set_caption('Defensive performance by coverage (Man\/Zone)') \\\n  .set_properties(padding=\"15px\", border='2px solid white', width='50px', subset=['cb', 'ss', 'lb']) \\\n  .set_properties(padding=\"15px\", border='2px solid white', width='200px', subset=['epa', 'success'])","370fff68":"summary = pd.DataFrame()\nfor pos in ['cb', 'ss', 'fs', 'lb']:\n    d = pd.Series(current.groupby([pos])['epa'].mean().reset_index(drop=True))\n    summary[pos] = d\n    \nsummary.style \\\n  .format('{:.2f}') \\\n  .background_gradient(cmap='winter_r') \\\n  .set_properties(padding=\"15px\", border='2px solid white', width='100px')","182dbc18":"cb = current.groupby(['offenseFormation', 'cb'])['epa'].mean().unstack().reset_index().iloc[:, :3].rename(columns={0:'cbZone', 1:'cbMan'})\nlb = current.groupby(['offenseFormation', 'lb'])['epa'].mean().unstack().reset_index().iloc[:, :3].rename(columns={0:'lbZone', 1:'lbMan'})\nss = current.groupby(['offenseFormation', 'ss'])['epa'].mean().unstack().reset_index().iloc[:, :3].rename(columns={0:'ssZone', 1:'ssMan'})\nallDef = cb.merge(lb, on='offenseFormation',  how='left').merge(ss, on='offenseFormation',  how='left').transpose().reset_index()\n\nheadings = allDef.iloc[0].reset_index(drop=True)\nallDef.columns = headings\nallDef = allDef.iloc[1:].reset_index(drop=True)\n\nallDef.style \\\n  .format('{:.2f}', subset=['EMPTY', 'I_FORM', 'JUMBO', 'PISTOL', 'SHOTGUN', 'SINGLEBACK', 'WILDCAT']) \\\n  .background_gradient(cmap='winter_r', subset=['EMPTY', 'I_FORM', 'JUMBO', 'PISTOL', 'SHOTGUN', 'SINGLEBACK', 'WILDCAT'])\\\n  .set_caption('Breakdown of defensive performance by offensive formation and man vs zone coverage') \\\n  .set_properties(padding=\"15px\", border='2px solid white', width='20px', subset=['offenseFormation']) \\\n  .set_properties(padding=\"15px\", border='2px solid white', width='150px', subset=['EMPTY', 'I_FORM', 'JUMBO', 'PISTOL', 'SHOTGUN', 'SINGLEBACK', 'WILDCAT'])","9662ee51":"playerCoverage = defenders[(defenders['man'] == 1) & (defenders['position'].isin(['FS', 'SS', 'CB']))].groupby(['displayName', 'position'])[['avg', 'final']].mean().reset_index().dropna()\nplayerCoverage['count'] = defenders[(defenders['man'] == 1) & (defenders['position'].isin(['FS', 'SS', 'CB']))].groupby(['displayName', 'position'])['avg'].count().reset_index().dropna()['avg']\nplayerCoverage = playerCoverage.sort_values('final', ascending=True).reset_index(drop=True)\n\nplayerCoverage[playerCoverage['count'] > 10].drop(['count'], axis=1).head(10).style.format({\"avg\": \"{:.2f}\", \n                          \"final\": \"{:.2f}\"})\\\n                 .hide_index()\\\n                 .bar(align='mid', subset=[\"avg\",], color='lightgreen')\\\n                 .bar(align='mid', subset=[\"final\"], color='lightblue') \\\n                 .set_properties(padding=\"15px\", border='2px solid white', width='150px', subset=['displayName', 'position', 'avg', 'final'])","4cae0068":"players['position'] = players['position'].replace(['MLB', 'OLB', 'ILB'], 'LB')\nplayers['position'] = players['position'].replace(['DB', 'S'], 'SS')\n\nmanStats = current[(current['man'] == 1) & (current['target_dist'] < 2.5)].groupby('coverage_id')[['distToReceiver', 'epa', 'success']].mean().reset_index()\nmanCompletion = current[current['man'] == 1].groupby(['coverage_id', 'passResult']).size().unstack(fill_value=0).reset_index()\nmanCompletion['completion (%)'] = manCompletion['C'] \/ (manCompletion['C'] + manCompletion['I'] + manCompletion['IN'])\nmanCompletion ['count'] = (manCompletion['C'] + manCompletion['I'] + manCompletion['IN'])\nmanStats = manStats.merge(manCompletion[['coverage_id', 'completion (%)', 'count']], on='coverage_id', how='left')\n\n#coverage stats looks at the average dist a defender is from their opposite man when they were playing in man coverage, as well as the average offensive epa plus the percentage of successful offensive plays\nmanStats  = manStats.merge(players[['nflId', 'displayName']].rename(columns={'nflId':'coverage_id'}), how='left', on='coverage_id')\nmanRankings = manStats[manStats['count'] > 10].sort_values('completion (%)', ascending=True).reset_index(drop=True).rename(columns={'coverage_id':'nflId'}).merge(players[['nflId', 'position']], on='nflId', how='left')\n\na = manRankings[manRankings['position'] == 'CB'][['displayName', 'distToReceiver', 'epa', 'success', 'completion (%)']].head(10).style.format({\"distToReceiver\": \"{:.2f}\", \n                                   \"epa\": \"{:.2f}\", \"success\": \"{:.2f}\", \"completion (%)\": \"{:.2f}\"})\\\n                 .hide_index()\\\n                 .set_caption('Best CBs in man coverage') \\\n                 .background_gradient(cmap='Purples', subset=['distToReceiver']) \\\n                 .background_gradient(cmap='Reds', subset=['epa']) \\\n                 .background_gradient(cmap='winter_r', subset=['completion (%)']) \\\n                 .bar(align='mid', subset=[\"success\"], color='orange') \\\n                 .set_properties(padding=\"15px\", border='2px solid white', width='200px', subset=['displayName','distToReceiver', 'epa', 'success', 'completion (%)'])\n\nb = manRankings[manRankings['position'] == 'SS'][['displayName', 'distToReceiver', 'epa', 'success', 'completion (%)']].head(10).style.format({\"distToReceiver\": \"{:.2f}\", \n                                   \"epa\": \"{:.2f}\", \"success\": \"{:.2f}\", \"completion (%)\": \"{:.2f}\"})\\\n                 .hide_index()\\\n                 .set_caption('Best SSs in man coverage') \\\n                 .background_gradient(cmap='Purples', subset=['distToReceiver']) \\\n                 .background_gradient(cmap='Reds', subset=['epa']) \\\n                 .background_gradient(cmap='winter_r', subset=['completion (%)']) \\\n                 .bar(align='mid', subset=[\"success\"], color='orange') \\\n                 .set_properties(padding=\"15px\", border='2px solid white', width='200px', subset=['displayName','distToReceiver', 'epa', 'success', 'completion (%)'])\n\nc = manRankings[manRankings['position'] == 'LB'][['displayName', 'distToReceiver', 'epa', 'success', 'completion (%)']].head(10).style.format({\"distToReceiver\": \"{:.2f}\", \n                                   \"epa\": \"{:.2f}\", \"success\": \"{:.2f}\", \"completion (%)\": \"{:.2f}\"})\\\n                 .hide_index()\\\n                 .set_caption('Best LBs in man coverage') \\\n                 .background_gradient(cmap='Purples', subset=['distToReceiver']) \\\n                 .background_gradient(cmap='Reds', subset=['epa']) \\\n                 .background_gradient(cmap='winter_r', subset=['completion (%)']) \\\n                 .bar(align='mid', subset=[\"success\"], color='orange') \\\n                 .set_properties(padding=\"15px\", border='2px solid white', width='200px', subset=['displayName','distToReceiver', 'epa', 'success', 'completion (%)'])\n\ndisplay(a)\ndisplay(b)\ndisplay(c)","630f1c4b":"zoneStats = current[(current['man'] == 0) & (current['target_dist'] < 2.5)].groupby('coverage_id')[['distToReceiver', 'epa', 'success']].mean().reset_index()\nzoneCompletion = current[current['man'] == 0].groupby(['coverage_id', 'passResult']).size().unstack(fill_value=0).reset_index()\nzoneCompletion['completion (%)'] = zoneCompletion['C'] \/ (zoneCompletion['C'] + zoneCompletion['I'] + zoneCompletion['IN'])\nzoneCompletion['count'] = (zoneCompletion['C'] + zoneCompletion['I'] + zoneCompletion['IN'])\nzoneStats = zoneStats.merge(zoneCompletion[['coverage_id', 'completion (%)', 'count']], on='coverage_id', how='left')\n\n#coverage stats looks at the average dist a defender is from their opposite man when they were playing in man coverage, as well as the average offensive epa plus the percentage of successful offensive plays\nzoneStats  = zoneStats.merge(players[['nflId', 'displayName']].rename(columns={'nflId':'coverage_id'}), how='left', on='coverage_id')\nzoneRankings = zoneStats[zoneStats['count'] > 10].sort_values('completion (%)', ascending=True).reset_index(drop=True).rename(columns={'coverage_id':'nflId'}).merge(players[['nflId', 'position']], on='nflId', how='left')\n\na = zoneRankings[zoneRankings['position'] == 'CB'][['displayName', 'distToReceiver', 'epa', 'success', 'completion (%)']].head(10).style.format({\"distToReceiver\": \"{:.2f}\", \n                                   \"epa\": \"{:.2f}\", \"success\": \"{:.2f}\", \"completion (%)\": \"{:.2f}\"})\\\n                 .hide_index()\\\n                 .set_caption('Best CBs in zone coverage') \\\n                 .background_gradient(cmap='Purples', subset=['distToReceiver']) \\\n                 .background_gradient(cmap='Reds', subset=['epa']) \\\n                 .background_gradient(cmap='winter_r', subset=['completion (%)']) \\\n                 .bar(align='mid', subset=[\"success\"], color='orange') \\\n                 .set_properties(padding=\"15px\", border='2px solid white', width='200px', subset=['displayName','distToReceiver', 'epa', 'success', 'completion (%)'])\n\n\nb = zoneRankings[zoneRankings['position'] == 'SS'][['displayName', 'distToReceiver', 'epa', 'success', 'completion (%)']].head(10).style.format({\"distToReceiver\": \"{:.2f}\", \n                                   \"epa\": \"{:.2f}\", \"success\": \"{:.2f}\", \"completion (%)\": \"{:.2f}\"})\\\n                 .hide_index()\\\n                 .set_caption('Best SSs in zone coverage') \\\n                 .background_gradient(cmap='Purples', subset=['distToReceiver']) \\\n                 .background_gradient(cmap='Reds', subset=['epa']) \\\n                 .background_gradient(cmap='winter_r', subset=['completion (%)']) \\\n                 .bar(align='mid', subset=[\"success\"], color='orange') \\\n                 .set_properties(padding=\"15px\", border='2px solid white', width='200px', subset=['displayName','distToReceiver', 'epa', 'success', 'completion (%)'])\n\nc = zoneRankings[zoneRankings['position'] == 'FS'][['displayName', 'distToReceiver', 'epa', 'success', 'completion (%)']].head(10).style.format({\"distToReceiver\": \"{:.2f}\", \n                                   \"epa\": \"{:.2f}\", \"success\": \"{:.2f}\", \"completion (%)\": \"{:.2f}\"})\\\n                 .hide_index()\\\n                 .set_caption('Best FSs in zone coverage') \\\n                 .background_gradient(cmap='Purples', subset=['distToReceiver']) \\\n                 .background_gradient(cmap='Reds', subset=['epa']) \\\n                 .background_gradient(cmap='winter_r', subset=['completion (%)']) \\\n                 .bar(align='mid', subset=[\"success\"], color='orange') \\\n                 .set_properties(padding=\"15px\", border='2px solid white', width='200px', subset=['displayName','distToReceiver', 'epa', 'success', 'completion (%)'])\n\nd = zoneRankings[zoneRankings['position'] == 'LB'][['displayName', 'distToReceiver', 'epa', 'success', 'completion (%)']].head(10).style.format({\"distToReceiver\": \"{:.2f}\", \n                                   \"epa\": \"{:.2f}\", \"success\": \"{:.2f}\", \"completion (%)\": \"{:.2f}\"})\\\n                 .hide_index()\\\n                 .set_caption('Best LBs in zone coverage') \\\n                 .background_gradient(cmap='Purples', subset=['distToReceiver']) \\\n                 .background_gradient(cmap='Reds', subset=['epa']) \\\n                 .background_gradient(cmap='winter_r', subset=['completion (%)']) \\\n                 .bar(align='mid', subset=[\"success\"], color='orange') \\\n                 .set_properties(padding=\"15px\", border='2px solid white', width='200px', subset=['displayName','distToReceiver', 'epa', 'success', 'completion (%)'])\n\ndisplay(a)\ndisplay(b)\ndisplay(c)\ndisplay(d)","48852b33":"manStats = current[(current['man'] == 1) & (current['target_dist'] < 2.5) & (current['distToReceiver'] < 2.5)].groupby('coverage_id')[['distToReceiver', 'epa', 'success']].mean().reset_index()\nmanCompletion = current[current['man'] == 1].groupby(['coverage_id', 'passResult']).size().unstack(fill_value=0).reset_index()\nmanCompletion['completion (%)'] = manCompletion['C'] \/ (manCompletion['C'] + manCompletion['I'] + manCompletion['IN'])\nmanCompletion ['count'] = (manCompletion['C'] + manCompletion['I'] + manCompletion['IN'])\nmanStats = manStats.merge(manCompletion[['coverage_id', 'completion (%)', 'count']], on='coverage_id', how='left')\n\n#coverage stats looks at the average dist a defender is from their opposite man when they were playing in man coverage, as well as the average offensive epa plus the percentage of successful offensive plays\nmanStats  = manStats.merge(players[['nflId', 'displayName']].rename(columns={'nflId':'coverage_id'}), how='left', on='coverage_id')\nmanRankings = manStats[manStats['count'] > 10].sort_values('completion (%)', ascending=True).reset_index(drop=True).rename(columns={'coverage_id':'nflId'}).merge(players[['nflId', 'position']], on='nflId', how='left')\n\na = manRankings[['displayName', 'distToReceiver', 'epa', 'success', 'completion (%)']].head(10).style.format({\"distToReceiver\": \"{:.2f}\", \n                                   \"epa\": \"{:.2f}\", \"success\": \"{:.2f}\", \"completion (%)\": \"{:.2f}\"})\\\n                 .hide_index()\\\n                 .set_caption('Best defenders in man coverage in the contest') \\\n                 .background_gradient(cmap='Purples', subset=['distToReceiver']) \\\n                 .background_gradient(cmap='Reds', subset=['epa']) \\\n                 .background_gradient(cmap='winter_r', subset=['completion (%)']) \\\n                 .bar(align='mid', subset=[\"success\"], color='orange') \\\n                 .set_properties(padding=\"15px\", border='2px solid white', width='200px', subset=['displayName','distToReceiver', 'epa', 'success', 'completion (%)'])\n\ndisplay(a)","a3788500":"zoneStats = current[(current['man'] == 0) & (current['target_dist'] < 2.5) & (current['distToReceiver'] < 2.5)].groupby('coverage_id')[['distToReceiver', 'epa', 'success']].mean().reset_index()\nzoneCompletion = current[current['man'] == 0].groupby(['coverage_id', 'passResult']).size().unstack(fill_value=0).reset_index()\nzoneCompletion['completion (%)'] = zoneCompletion['C'] \/ (zoneCompletion['C'] + zoneCompletion['I'] + zoneCompletion['IN'])\nzoneCompletion['count'] = (zoneCompletion['C'] + zoneCompletion['I'] + zoneCompletion['IN'])\nzoneStats = zoneStats.merge(zoneCompletion[['coverage_id', 'completion (%)', 'count']], on='coverage_id', how='left')\n\n#coverage stats looks at the average dist a defender is from their opposite man when they were playing in man coverage, as well as the average offensive epa plus the percentage of successful offensive plays\nzoneStats  = zoneStats.merge(players[['nflId', 'displayName']].rename(columns={'nflId':'coverage_id'}), how='left', on='coverage_id')\nzoneRankings = zoneStats[zoneStats['count'] > 10].sort_values('completion (%)', ascending=True).reset_index(drop=True).rename(columns={'coverage_id':'nflId'}).merge(players[['nflId', 'position']], on='nflId', how='left')\n\na = zoneRankings[['displayName', 'position', 'distToReceiver', 'epa', 'success', 'completion (%)']].head(10).style.format({\"distToReceiver\": \"{:.2f}\", \n                                   \"epa\": \"{:.2f}\", \"success\": \"{:.2f}\", \"completion (%)\": \"{:.2f}\"})\\\n                 .hide_index()\\\n                 .set_caption('Best defenders in zone coverage in the contest') \\\n                 .background_gradient(cmap='Purples', subset=['distToReceiver']) \\\n                 .background_gradient(cmap='Reds', subset=['epa']) \\\n                 .background_gradient(cmap='winter_r', subset=['completion (%)']) \\\n                 .bar(align='mid', subset=[\"success\"], color='orange') \\\n                 .set_properties(padding=\"15px\", border='2px solid white', width='200px', subset=['displayName', 'position', 'distToReceiver', 'epa', 'success', 'completion (%)'])\n\n\ndisplay(a)\n","0ea8f573":"import matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.graph_objs as go\n\ndef catchProb(x):\n    a = current[(current['target_dist'] < 2.5) & (current['distToReceiver'] < x)]['passResult'].value_counts().reset_index()\n    return a.loc[a['index'] == 'C', 'passResult'].reset_index(drop=True)[0] \/ a['passResult'].sum()\n\nx_func = np.linspace(0.25, 5, 50)\ny_func = [catchProb(x) for x in x_func]\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=x_func, y=y_func, name='nfl Average',\n                    mode='lines', line=dict(width=4)))\n\nfig.update_layout(title='Effect of defensive pressure on pass outcome',\n                   xaxis_title='Distance from receiver (yards)',\n                   yaxis_title='Prob of completion (%)',\n                  width=800, height=600)\n\nfig.show()","7c460d4f":"current = current.merge(players[['nflId', 'displayName']].rename(columns={'nflId':'coverage_id', 'displayName':'coverageName'}), on='coverage_id', how='left')\n\ndef catchProb(x, cov):\n    a = current[(current['target_dist'] < 2.5) & (current['distToReceiver'] < x) & (current['man'] == cov)]['passResult'].value_counts().reset_index()\n    return a.loc[a['index'] == 'C', 'passResult'].reset_index(drop=True)[0] \/ a['passResult'].sum()\n\ndef catchProbInd(x, i, cov):\n    if cov == 1:\n        nflId = manRankings.loc[i, 'nflId']\n    else:\n        nflId = zoneRankings.loc[i, 'nflId']\n    a = current[(current['target_dist'] < 2.5) & (current['distToReceiver'] < x) & (current['coverage_id'] == nflId) & (current['man'] == cov)]['passResult'].value_counts().reset_index()\n    try:\n        return a.loc[a['index'] == 'C', 'passResult'].reset_index(drop=True)[0] \/ a['passResult'].sum()\n    except KeyError:\n        return 0\n\n\nx_func = np.linspace(0.5, 2.5, 10)\n# numpy will do the right thing and evaluate found_fit for all elements\ny_func = [catchProb(x, 1) for x in x_func]\n\n#fig, ax = plt.subplots(figsize=(12, 9))\nfig = go.Figure()\nfor i in range(10):\n    fig.add_trace(go.Scatter(x=x_func, y=[catchProbInd(x, i, 1) for x in x_func], name=manRankings.loc[i, 'displayName'],\n                    mode='lines'))\n\nfig.add_trace(go.Scatter(x=x_func, y=y_func, name='nfl Average',\n                    mode='lines', line=dict(color='black', width=4, dash='dash')))\n\nfig.update_layout(title='Effect of defensive pressure on pass outcome (man coverage)',\n                   xaxis_title='Distance from receiver (yards)',\n                   yaxis_title='Prob of completion (%)',\n                   width=1200, height=700)\n\nfig.show()\n","89223622":"x_func = np.linspace(0.25, 3.5, 10)\ny_func = [catchProb(x, 0) for x in x_func]\n\nfig = go.Figure()\nfor i in range(10):\n    fig.add_trace(go.Scatter(x=x_func, y=[catchProbInd(x, i, 0) for x in x_func], name=zoneRankings.loc[i, 'displayName'],\n                    mode='lines'))\n\nfig.add_trace(go.Scatter(x=x_func, y=y_func, name='nfl Average',\n                    mode='lines', line=dict(color='black', width=4, dash='dash')))\n\nfig.update_layout(title='Effect of defensive pressure on pass outcome (zone coverage)',\n                   xaxis_title='Distance from receiver (yards)',\n                   yaxis_title='Prob of completion (%)',\n                 width=1200, height=700)\n\nfig.show()\n","638dcceb":"# Who's the best in contested situations? Our top 10 (Zone coverage)\n","4896c24a":"# CBs should play more zone coverage\n\nTo get a better indication of how the defense performs by man or zone coverage, we can isolate one position at a time. The table below shows the average offensive epa per play when each of the positions are playing in zone (0), man (1) or split (1) coverage. (Split would be where for example 1 CB plays in man and 1 in zone coverage). From the results we can see that the defense performed better (i.e. forced a lower average offensive epa per play) when CBs, SS, and FSs played in zone coverage, which is especially significant for the CB position. This might be useful for defensive playcallers as the CB position is the most likely to operate in a man coverage. The differences between the defensive performance for different LB defensive schemes are minimal, but there is a slight advantage when they play in man coverage.","e617ee7c":"# How does distance between defender and receiver affect probability of success on a play?\n\nWe all know that the further away a defensive player is from a receiver attempting to catch a pass from their QB, the more likely they will be to successfully haul it in. However, now armed with the tracking data for all plays of the 2018 season, we are able to demonstrate this relationship between distance and probability of a catch. The effect is rather as expected! Graph shown below. ","36629bc0":"# Positional breakdown: Top 10 man coverage defenders at each position\n\nAs mentioned above, the above rankings took into account routes run on all plays, regardless of whether the ball was actually thrown to the receiver that the defender was marking up against. In the summary tables below, we account for this, and return a measure that determines the ability of a player to break up a pass when playing in man coverage. The results for the top 10 man coverage defenders at each position are displayed below, with plenty of familiar names, but some that may not be as expected. \n\nThe summary tables bring in the average distance between the defender and their opponent when they are playing in man coverage and their opponent is targeted, as well as the average epa per such play, the percentage of successful plays that occurred (where success = 1 when epa > 0), and the percentage of completed passes when the specific defender is in coverage. The tables are sorted by the completion percentage, whereby a lower completion rate is a better defensive outcome. \n\nThe data is filtered for cases where the football is within 2.5 yards of the targeted receiver to avoid including cases where the QB throws an errant pass and we are incorrectly assigning that as a successful defensive play made by a specific defender who was within the area. ","324bea45":"# The Results: Do defenses perform better in zone or man coverage?\n\n","f2f4e081":"# Positional breakdown: Top 10 zone coverage defenders at each position\n\nSimilarly as above, we can determine from the data who are the best defenders in zone coverages. These defenders may be considered as better readers of the game, whereby they can react better to the offensive play unfolding to make a play. Definitions are the same as described above for the man coverage analysis. ","bfe59fa1":"# How do our best individual defenders match up against the NFL average?\n\nThe below graphs demonstrate how our best individual defenders stack up against the NFL average when it comes to breaking up passing at certain distances from the targeted receiver. Again as expected, for the most part our top defenders are below the NFL average line at all distances. ","29c3e0b7":"# Introduction\n\nThe purpose of this analysis was to try to determine when a defence applies man or zone defences based on player tracking data, and then analysing the effectiveness of these defensive strategies against various offensive formations. A deeper dive was then done to break it down to the individual player level, to see which defenders play the tightest coverage, and how defenders stack up generally when they are operating in zone or man defence. \n","c419f356":"# Who's the best in contested situations? Our top 10 (Man coverage)\n\nWe now wanted to filter the dataset again to see who were the best at breaking up the pass when they are within contestable distance of the receiver attempting to make a catch. Prior to this, we were including the data even if the receiver made a wide open catch without pressure and were then tackled (or not) by the closest defender. This will give us an idea of who is the best in a contested football situation. The summary below displays the top 10 defenders based on the above criteria across all positions.","7127c2cd":"# Who is the best defensive back in tight man coverage?\n\nFrom the information we produced from the code run above, we can now start to play around at the individual level in order to determine who are the best individual defensive players using the tracking data that we have available to us. Below is a summary of the top 10 defensive backs by final distance between themselves and their marked opponent (when in a man coverage assignment) at the time the pass arrives at its intended target. NOTE that this covers all throws, not specifically when the ball is thrown to the man they are marking, so this may affect the numbers if for example a defender drifts off his man when the ball is in flight prior to arriving if they notice that it is not going to their marked opponent. We will account for this in the next section.","ff70f3c9":"# Should defenses change their defensive play calls based on the offensive formation?\n\nWe see experienced QBs making audibles all the team based on what they see in the defensive set up in from of them, but how often does the defensive coordinator let their players change things up after seeing what kind of formation the offense sets up in? Obviously at times there would not be enough time to call defensive audibles just before the ball is snapped, but maybe there would be ways to implement some changes based on the offensive formation if the observed results could be seen to occur season in season out - in this case one year of data may not be enough to justify any overhauls to the defensive playcalling system. But nevertheless! The results below show the average offensive epa per play by offensive formation and defensive scheme. This reinforces what we saw previously that in mainly common pass formations (e.g. SHOTGUN), a zone coverage scheme fairs considerably better. ","6754cd4f":"Below is a breakdown of defensive performance based on various classifications of defensive schemes. We breakdown whether the defence is in man or zone coverage by position. The different combinations are then sorted by the average offensive epa achieved against those defensive setups from lowest to highest. The success column is the average success rate of an offensive play against each defensive setup, where a play is successful if the epa > 0. The two most successful defensive schemes both occur with CBs in zone coverage, with the most successful having the SSs and LBs in man coverage. ","40dfaaf8":"# Man vs Zone Coverage\n\nHow can we tell from the data when a defender is in man or zone coverage? Whilst there are many possible different defensive play calls which do not fit neatly in the category of strictly all man or all zone, this analysis attempted to approach this question by looking at the individual defensive players and measure the distance between them and the closest receiver to them (presumed to be the opponent they are marking up against) at each event from the beginning of the play snap up until the point when the pass arrives. If their marked opponent (the receiver) did not change throughout the whole play up until the pass arrived, it was assumed therefore that this defensive player was in a man coverage. \n\nThe Free Safety position was left out of this however and assumed to be playing in some type of zone coverage at the back. Players categorised were therefore CBs, LBs and SSs. The code used to run this is included below (the code has been commented out to reduce runtime. Final results will be explored further on in the notebook).\n\nThis code returns a summary of all defensive players on the field at each time frame, listing the closest receiver to them and the distance between them at that point in time. ","8ec0a1ef":"The code below determines for each play, for each defender, whether they were in man or zone coverage based on the definition established above. Based off this we establish various categories of defensive plays based on the combination of man and zone coverage implemented by the defenders playing in various positions. \n\nWe then run a variety of calculations to determine how well a defenders marks his opponent in a man coverage scheme by measuring the distance between the defender and the receiver at various points in the play up until the pass arrives. The information from these calcs will be used later to determine who are the best defenders in man or zone coverage. "}}