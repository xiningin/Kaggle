{"cell_type":{"c7ec4334":"code","505b6316":"code","404dff20":"code","842aec15":"code","bcd3bd4d":"code","c9d91123":"code","b552d12d":"code","7f36a20d":"code","2af72e0e":"code","5de97408":"code","28a023c4":"code","87179ac6":"code","bfbc83f1":"code","6ae79295":"code","8f0a7044":"code","21c5a8f1":"code","51a00102":"code","f5503f97":"code","ea3e1fbf":"code","5fd71530":"code","10fe3276":"code","4d82d802":"code","2aa2b620":"code","82c48c15":"code","d817f4d2":"code","070b53c4":"code","48177b00":"code","1d295afe":"code","6672603c":"code","17d420b2":"code","840a06d9":"code","9fd2b8f0":"code","50e639c4":"code","2fd3f8da":"code","a37e825b":"code","23fe94ed":"code","ba3faf43":"code","37f926af":"code","e39c48e9":"code","6ef048c9":"code","92265389":"code","0b6ed080":"code","35a7ea4b":"markdown","71794074":"markdown","588aa809":"markdown"},"source":{"c7ec4334":"import os\n\nDATA_DIR = '..\/input\/pokemon-images-dataset\/pokemon_jpg'\nprint(os.listdir(DATA_DIR))","505b6316":"print(os.listdir(DATA_DIR+'\/pokemon_jpg')[:10])","404dff20":"from torch.utils.data import DataLoader\nfrom torchvision.datasets import ImageFolder\nimport torchvision.transforms as T\n","842aec15":"image_size = 64\nbatch_size = 128\nstats = (0.5, 0.5, 0.5), (0.5, 0.5, 0.5)","bcd3bd4d":"train_ds = ImageFolder(DATA_DIR, transform=T.Compose([T.Resize(image_size),\n                                            T.CenterCrop(image_size),\n                                            T.ToTensor(),\n                                            T.Normalize(*stats)]))\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=3, pin_memory=True)","c9d91123":"import torch\nfrom torchvision.utils import make_grid\nimport matplotlib.pyplot as plt\n%matplotlib inline","b552d12d":"def denorm(img_tensors):\n    return img_tensors * stats[1][0] + stats[0][0]","7f36a20d":"def show_images(images,nmax=64):\n  fig, ax = plt.subplots(figsize=(8,8))\n  ax.set_xticks([]); ax.set_xticks([])\n  ax.imshow(make_grid(denorm(images.detach()[:nmax]), nrow=8).permute(1,2,0))\n\ndef show_batch(dl, nmax=64):\n  for images, _ in dl:\n    show_images(images, nmax)\n    break","2af72e0e":"show_batch(train_dl)","5de97408":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","28a023c4":"device = get_default_device()\ndevice","87179ac6":"train_dl = DeviceDataLoader(train_dl, device)","bfbc83f1":"import torch.nn as nn","6ae79295":"discriminator = nn.Sequential(\n    # in: 3 x 64 x 64\n\n    nn.Conv2d(3, 64, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(64),\n    nn.LeakyReLU(0.2, inplace=True),\n    # out: 64 x 32 x 32\n\n    nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(128),\n    nn.LeakyReLU(0.2, inplace=True),\n    # out: 128 x 16 x 16\n\n    nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(256),\n    nn.LeakyReLU(0.2, inplace=True),\n    # out: 256 x 8 x 8\n\n    nn.Conv2d(256, 512, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(512),\n    nn.LeakyReLU(0.2, inplace=True),\n    # out: 512 x 4 x 4\n\n    nn.Conv2d(512, 1, kernel_size=4, stride=1, padding=0, bias=False),\n    # out: 1 x 1 x 1\n\n    nn.Flatten(),\n    nn.Sigmoid())","8f0a7044":"discriminator = to_device(discriminator, device)","21c5a8f1":"latent_size = 128","51a00102":"generator = nn.Sequential(\n    # in: latent_size x 1 x 1\n\n    nn.ConvTranspose2d(latent_size, 512, kernel_size=4, stride=1, padding=0, bias=False),\n    nn.BatchNorm2d(512),\n    nn.ReLU(True),\n    # out: 512 x 4 x 4\n\n    nn.ConvTranspose2d(512, 256, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(256),\n    nn.ReLU(True),\n    # out: 256 x 8 x 8\n\n    nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(128),\n    nn.ReLU(True),\n    # out: 128 x 16 x 16\n\n    nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(64),\n    nn.ReLU(True),\n    # out: 64 x 32 x 32\n\n    nn.ConvTranspose2d(64, 3, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.Tanh()\n    # out: 3 x 64 x 64\n)","f5503f97":"xb = torch.randn(batch_size, latent_size, 1, 1) # random latent tensors\nfake_images = generator(xb)\nprint(fake_images.shape)\nshow_images(fake_images)","ea3e1fbf":"generator = to_device(generator, device)","5fd71530":"def train_discriminator(real_images, opt_d):\n    # Clear discriminator gradients\n    opt_d.zero_grad()\n\n    # Pass real images through discriminator\n    real_preds = discriminator(real_images)\n    real_targets = torch.ones(real_images.size(0), 1, device=device)\n    real_loss = F.binary_cross_entropy(real_preds, real_targets)\n    real_score = torch.mean(real_preds).item()\n    \n    # Generate fake images\n    latent = torch.randn(batch_size, latent_size, 1, 1, device=device)\n    fake_images = generator(latent)\n\n    # Pass fake images through discriminator\n    fake_targets = torch.zeros(fake_images.size(0), 1, device=device)\n    fake_preds = discriminator(fake_images)\n    fake_loss = F.binary_cross_entropy(fake_preds, fake_targets)\n    fake_score = torch.mean(fake_preds).item()\n\n    # Update discriminator weights\n    loss = real_loss + fake_loss\n    loss.backward()\n    opt_d.step()\n    return loss.item(), real_score, fake_score","10fe3276":"def train_generator(opt_g):\n    # Clear generator gradients\n    opt_g.zero_grad()\n    \n    # Generate fake images\n    latent = torch.randn(batch_size, latent_size, 1, 1, device=device)\n    fake_images = generator(latent)\n    \n    # Try to fool the discriminator\n    preds = discriminator(fake_images)\n    targets = torch.ones(batch_size, 1, device=device)\n    loss = F.binary_cross_entropy(preds, targets)\n    \n    # Update generator weights\n    loss.backward()\n    opt_g.step()\n    \n    return loss.item()","4d82d802":"from torchvision.utils import save_image","2aa2b620":"sample_dir = 'generated'\nos.makedirs(sample_dir, exist_ok=True)","82c48c15":"def save_samples(index, latent_tensors, show=True):\n    fake_images = generator(latent_tensors)\n    fake_fname = 'generated-images-{0:0=4d}.png'.format(index)\n    save_image(denorm(fake_images), os.path.join(sample_dir, fake_fname), nrow=8)\n    print('Saving', fake_fname)\n    if show:\n        fig, ax = plt.subplots(figsize=(8, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(fake_images.cpu().detach(), nrow=8).permute(1, 2, 0))","d817f4d2":"fixed_latent = torch.randn(64, latent_size, 1, 1, device=device)","070b53c4":"from tqdm.notebook import tqdm\nimport torch.nn.functional as F","48177b00":"def fit(epochs, lr, start_idx=1):\n    torch.cuda.empty_cache()\n    \n    # Losses & scores\n    losses_g = []\n    losses_d = []\n    real_scores = []\n    fake_scores = []\n    \n    # Create optimizers\n    opt_d = torch.optim.Adam(discriminator.parameters(), lr=lr, betas=(0.5, 0.999))\n    opt_g = torch.optim.Adam(generator.parameters(), lr=lr, betas=(0.5, 0.999))\n    \n    for epoch in range(epochs):\n        for real_images, _ in tqdm(train_dl):\n            # Train discriminator\n            loss_d, real_score, fake_score = train_discriminator(real_images, opt_d)\n            # Train generator\n            loss_g = train_generator(opt_g)\n            \n        # Record losses & scores\n        losses_g.append(loss_g)\n        losses_d.append(loss_d)\n        real_scores.append(real_score)\n        fake_scores.append(fake_score)\n        \n        # Log losses & scores (last batch)\n        print(\"Epoch [{}\/{}], loss_g: {:.4f}, loss_d: {:.4f}, real_score: {:.4f}, fake_score: {:.4f}\".format(\n            epoch+1, epochs, loss_g, loss_d, real_score, fake_score))\n    \n        # Save generated images\n        save_samples(epoch+start_idx, fixed_latent, show=False)\n    \n    return losses_g, losses_d, real_scores, fake_scores","1d295afe":"lr = 0.0002\nepochs = 1000","6672603c":"history = fit(epochs, lr)","17d420b2":"losses_g, losses_d, real_scores, fake_scores = history","840a06d9":"# Save the model checkpoints \ntorch.save(generator.state_dict(), 'G.pth')\ntorch.save(discriminator.state_dict(), 'D.pth')","9fd2b8f0":"from IPython.display import Image","50e639c4":"Image('.\/generated\/generated-images-0001.png')","2fd3f8da":"Image('.\/generated\/generated-images-0020.png')","a37e825b":"Image('.\/generated\/generated-images-0100.png')","23fe94ed":"Image('.\/generated\/generated-images-0200.png')","ba3faf43":"Image('.\/generated\/generated-images-0300.png')","37f926af":"Image('.\/generated\/generated-images-0400.png')","e39c48e9":"Image('.\/generated\/generated-images-0500.png')","6ef048c9":"# import cv2\n# import os\n\n# vid_fname = 'gans_training.avi'\n\n# files = [os.path.join(sample_dir, f) for f in os.listdir(sample_dir) if 'generated' in f]\n# files.sort()\n\n# out = cv2.VideoWriter(vid_fname,cv2.VideoWriter_fourcc(*'MP4V'), 1, (530,530))\n# [out.write(cv2.imread(fname)) for fname in files]\n# out.release()","92265389":"plt.plot(real_scores, '-')\nplt.plot(fake_scores, '-')\nplt.xlabel('epoch')\nplt.ylabel('score')\nplt.legend(['Real', 'Fake'])\nplt.title('Scores');","0b6ed080":"plt.plot(losses_d, '-')\nplt.plot(losses_g, '-')\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend(['Discriminator', 'Generator'])\nplt.title('Losses');","35a7ea4b":"## Download Dataset","71794074":"## Dataset Selection\n\nI use `Pokemon Images Dataset` from Kaggle for this project.\n\nDatasets Link: [Pokemon Images Dataset](https:\/\/www.kaggle.com\/kvpratama\/pokemon-images-dataset)\n\n","588aa809":"## Understand and describe the modeling objective\n\n\n\n*   This is a image dataset. This dataset contains 819 files.\n*   I want to use Generative modeling in this dataset.\n\n"}}