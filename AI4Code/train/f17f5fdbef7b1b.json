{"cell_type":{"ee43b3ff":"code","862c92ce":"code","c8e78f1f":"code","bc97ed86":"code","54108dc2":"code","a5b33549":"code","361a6f23":"code","17a789ff":"code","7571fc86":"code","5ad2c0e6":"code","2bb61195":"code","9e547d2a":"code","2bc6df37":"code","6e486092":"code","37c0ab21":"code","d8dae5c7":"code","614fbe18":"code","094be60d":"code","4a659a20":"code","51bec089":"code","b9f95dba":"code","106e5b6c":"code","416d73eb":"code","ca7dd74c":"code","b353e0b8":"code","34447c99":"code","e9aae7c8":"markdown","9e4dad08":"markdown","875062e1":"markdown","b53e0b25":"markdown","ac049381":"markdown","bea82a80":"markdown","aa962cc5":"markdown","bd271d33":"markdown","2a6718b7":"markdown","6d9256de":"markdown","32994ba6":"markdown","1fad5cc7":"markdown","e130627a":"markdown","62a44833":"markdown","51a4af53":"markdown","c60d305a":"markdown","4a06c15e":"markdown","7fc23e5c":"markdown","50b833be":"markdown","59122cd6":"markdown","5826292a":"markdown","b3f6ec1b":"markdown"},"source":{"ee43b3ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","862c92ce":"import seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score, accuracy_score, confusion_matrix\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom warnings import filterwarnings\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfilterwarnings(\"ignore\")\n\n\ndata =pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")\ndata = data.drop(\"id\",axis=1)","c8e78f1f":"data.shape # Our data has 5110 rows and 11 columns.","bc97ed86":"data.columns #Below are our features","54108dc2":"data.head() # The first 5 lines of our data","a5b33549":"data.describe().T ","361a6f23":"data.isnull().sum() #Let's check if we have null data.\n","17a789ff":"data.bmi.mean() #bmi variable is mean\n","7571fc86":"data[\"bmi\"]=data[\"bmi\"].fillna(data[\"bmi\"].mean()) \n\n#We called the fillna method to fill in the null data. We assigned the mean value of bmi into it.\n","5ad2c0e6":"data.isnull().sum()\n#successful","2bb61195":"corr_matrix=data.corr()\nsns.clustermap(corr_matrix,annot=True,fmt =\".2f\")\nplt.show()\n\n#Correlation of properties.","9e547d2a":"sns.pairplot(data)","2bc6df37":"fig, axs = plt.subplots(2, 3, figsize=(12, 12))\n\nsns.violinplot(x=data[\"stroke\"], y=data[\"age\"], ax=axs[0, 0])\nsns.violinplot(x=data[\"stroke\"], y=data[\"avg_glucose_level\"], ax=axs[0, 1])\nsns.violinplot(x=data[\"stroke\"], y=data[\"bmi\"], ax=axs[0, 2])\nsns.violinplot(x=data[\"stroke\"], y=data[\"heart_disease\"], ax=axs[1, 0])\n\nsns.violinplot(x=data[\"stroke\"], y=data[\"hypertension\"], ax=axs[1, 1])\nsns.violinplot(x=data[\"stroke\"], y=data[\"ever_married\"], ax=axs[1, 2])\n\n\n","6e486092":"fig, axs = plt.subplots(3, 3, figsize=(12, 12))\nsns.histplot(data=data[\"bmi\"], kde=True, color=\"skyblue\", ax=axs[0, 0])\nsns.histplot(data=data[\"avg_glucose_level\"], kde=True, color=\"olive\", ax=axs[0, 1])\nsns.histplot(data=data[\"age\"], kde=True, color=\"gold\", ax=axs[0, 2])\nsns.countplot(x = data[\"stroke\"], ax=axs[1, 0])\n\nsns.countplot(x = data[\"hypertension\"], ax=axs[1, 1])\nsns.countplot(x = data[\"heart_disease\"], ax=axs[1, 2])\nsns.countplot(x = data[\"ever_married\"], ax=axs[2, 0])\nsns.countplot(x = data[\"gender\"], ax=axs[2, 1])\nsns.countplot(x = data[\"Residence_type\"], ax=axs[2, 2])\n\nplt.show()","37c0ab21":"def pie_plot(datam):\n    num_1=0\n    num_0 =0\n    for i in datam:\n        if i==0:\n            num_0+=1\n        else :\n            num_1+=1\n            \n    return num_0,num_1\n ","d8dae5c7":"num_0,num_1=pie_plot(data.stroke)\nnames='1','0',\nvalues=[num_1,num_0]\n \nplt.pie(values, labels=names, labeldistance=1.15,radius=1.8);\nplt.show();\n\nprint(num_1)\nprint(num_0)","614fbe18":"num_0,num_1=pie_plot(data.hypertension)\nnames='1','0',\nvalues=[num_1,num_0]\n \nplt.pie(values, labels=names, labeldistance=1.15,radius=1.8);\nplt.show();\n\nprint(num_1)\nprint(num_0)","094be60d":"num_0,num_1=pie_plot(data.heart_disease)\nnames='1','0',\nvalues=[num_1,num_0]\n \nplt.pie(values, labels=names, labeldistance=1.15,radius=1.8);\nplt.show();\n\nprint(num_1)\nprint(num_0)","4a659a20":"plt.figure(figsize=(10,8))\n\nsns.distplot(data[data.stroke != 0][\"age\"], color=\"blue\")\nsns.distplot(data[data.stroke == 0][\"age\"], color=\"green\")\n\n\nplt.title(\"Stroke vs No Strock   \", fontsize=15)\nplt.xlim([10,100])\nplt.show()","51bec089":"from sklearn.preprocessing import LabelEncoder \nlbe=LabelEncoder()\ndata[\"hypertension\"]=lbe.fit_transform(data[\"hypertension\"])\ndata[\"heart_disease\"]=lbe.fit_transform(data[\"heart_disease\"])\ndata[\"ever_married\"]=lbe.fit_transform(data[\"ever_married\"])\ndata[\"work_type\"]=lbe.fit_transform(data[\"work_type\"])\ndata[\"Residence_type\"]=lbe.fit_transform(data[\"Residence_type\"])\ndata[\"smoking_status\"]=lbe.fit_transform(data[\"smoking_status\"])\n\n\n\n\ndata=pd.get_dummies(data)\nprint(data)","b9f95dba":"y = data[\"stroke\"]\nx=data.drop([\"stroke\"],axis=1)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)\n\n\n\nprint(\"x train: \",x_train.shape)\nprint(\"x test: \",x_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)","106e5b6c":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","416d73eb":"\nfrom sklearn.svm import SVC\n\nmodel = SVC().fit(x_train, y_train)\n\ny_pred = model.predict(x_test)\nac = accuracy_score(y_test,y_pred)\ncon = confusion_matrix(y_test, y_pred)\naccuracies = []\naccuracies.append(ac)\nprint(\"SVC model accuary\",ac)\nprint(con)\n\n\n","ca7dd74c":"from sklearn.ensemble import RandomForestClassifier\n\nmodel =RandomForestClassifier().fit(x_train,y_train)\ny_pred =model.predict(x_test)\nac = accuracy_score(y_test,y_pred)\ncon = confusion_matrix(y_test, y_pred)\naccuracies = []\naccuracies.append(ac)\nprint(\"RandomForestClassifier model accuary\",ac)\nprint(con)","b353e0b8":"plt.figure(figsize=(14,5))\ncm = confusion_matrix(y_test,y_pred)\nconf_matrix = pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\");","34447c99":"print(\"The Accuracy Score of RandomForestClassifier is: {:.3f}%\".format(accuracy_score(y_test, y_pred)*100))","e9aae7c8":"# 4-)One Hot Encoding","9e4dad08":"# Assign Value To Blank Data\n","875062e1":"**Hypertension Pie Charts**","b53e0b25":"# 1-)Importing Libraries \n","ac049381":"# 6-)Standardize\n","bea82a80":"* We applied one hot encoding to the categorical data.","aa962cc5":"* There are 201 null data in our bmi variable. Let's fill them with mean.","bd271d33":"# 2-) Data Review","2a6718b7":"# 3-)Exploratory Data Analysis\n","6d9256de":"**Pie Charts**","32994ba6":"![images.jfif](attachment:images.jfif)","1fad5cc7":"It separates our data.","e130627a":"# 7-)Build Model And Accurcy Value\n","62a44833":"# 5-)Split Data","51a4af53":"Stroke : A stroke is a medical condition in which poor blood flow to the brain causes cell death.","c60d305a":"> This dataset is used to predict whether a patient is likely to get stroke based on the input parameters like gender, age, various diseases, and smoking status. ","4a06c15e":"   # Stroke Prediction ","7fc23e5c":"**Stroke Pie Charts**","50b833be":"TABLE OF CONTENTS\n\n1-)Importing Libraries \n\n2-)Data Review\n\n3-)Exploratory Data Analysis\n\n4-)One Hot Encoding\n\n5-)Split Data\n\n7-)Standardize\n\n8-)Build Model And Accurcy Value","59122cd6":"* Detailed review of our data","5826292a":"*  In this section, we will examine our data.","b3f6ec1b":"**Heart_disease Pie Charts**"}}