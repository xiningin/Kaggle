{"cell_type":{"bf038106":"code","58ab79b0":"code","9cfdbb16":"code","3d0310fc":"code","cb852b7e":"code","f024ac4b":"code","600a670b":"code","e39a26ca":"code","688ddb62":"code","9d1a145e":"code","57afc5ae":"code","618823fb":"code","a8b9f882":"code","e18fde80":"code","74708559":"code","a1f7f170":"code","1ab34b00":"code","7468742f":"code","22ddacee":"code","38d12346":"code","9b44e8a5":"code","37107908":"code","0af5bbd7":"code","15809dc7":"code","796e36f6":"code","a58644fa":"code","f172e4c9":"code","b0010ba6":"code","3f14b2f5":"code","e0abb5c8":"code","29c7d799":"code","50a11df2":"code","0b8a7aca":"code","f9980cd5":"code","a06ff7a6":"code","29fd1952":"code","8e19d8f2":"code","ae8080ca":"code","e8a85ebb":"code","e49fec8a":"code","e023b5ee":"code","48a13c82":"code","221a930e":"code","1bb6b545":"code","6dd617e8":"code","8875457f":"code","07ce1e47":"code","29c32a3b":"code","126c19fa":"code","3e8cd9c8":"code","c79744d7":"markdown","6034853a":"markdown","6b8cfe13":"markdown","d113a0c6":"markdown","203f0990":"markdown","b9e73144":"markdown","05a1c0d5":"markdown","43061dac":"markdown","293fbd28":"markdown","7797a159":"markdown","9c2f73fd":"markdown","862cfdb1":"markdown","205bb5fc":"markdown","e88bc704":"markdown","903ea321":"markdown","4165d6a3":"markdown","eb2e3471":"markdown","fc277a80":"markdown","8405b058":"markdown","76dafde6":"markdown","9f99392f":"markdown","f164df63":"markdown","a276fb65":"markdown","22534475":"markdown","8317f804":"markdown","0c157b27":"markdown","f7c49097":"markdown","e9e4a494":"markdown","5fd8b333":"markdown","6429b9f2":"markdown","653b381f":"markdown"},"source":{"bf038106":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58ab79b0":"trainDF = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntestDF = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntestPassengerID = testDF[\"PassengerId\"]","9cfdbb16":"trainDF.columns","3d0310fc":"trainDF.head()","cb852b7e":"trainDF.describe() # statistical data","f024ac4b":"trainDF.info()","600a670b":"def barPlot(variable):\n    \"\"\"\n    Args: variable\n    Output: bar plot and value count \n    \"\"\"\n    var = trainDF[variable] # get the attribute\n    varValueCount = var.value_counts() # get the value count o the attribute\n    \n    plt.figure(figsize=(9,3))\n    plt.bar(varValueCount.index, varValueCount)\n    plt.xticks(varValueCount.index, varValueCount.index.values) # label ticks on the axis xticks(ticks, [labels], **kwargs)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n{}\".format(variable, varValueCount))","e39a26ca":"trainDF[\"Sex\"].value_counts()","688ddb62":"\ncategory1 = [\"Survived\", \"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Embarked\"]\n\nfor c in category1:\n    barPlot(c)","9d1a145e":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(trainDF[c].value_counts()))","57afc5ae":"def plotHist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(trainDF[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with histogram\".format(variable))\n    plt.show()\n    ","618823fb":"numericVars = [\"PassengerId\", \"Age\", \"Fare\"]\nfor n in numericVars:\n    plotHist(n)","a8b9f882":"a = trainDF[\"SibSp\"]>7\ntrainDF[a]","e18fde80":"# Pclass - Survived\ntrainDF[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\", ascending=False)\n# group by Pclass and show means of groups and sort them","74708559":"# Sex - Survived\ntrainDF[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\", ascending=False)\n# group by Sex and show means of groups and sort them","a1f7f170":"# SibSp - Survived\ntrainDF[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\", ascending=False)\n# group by SibSp and show means of groups and sort them","1ab34b00":"# Parch - Survived\ntrainDF[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\", ascending=False)\n# group by Parch and show means of groups and sort them","7468742f":"# Survived Age\ntrainDF[[\"Age\", \"Survived\"]].groupby([\"Survived\"], as_index = False).mean().sort_values(by=\"Survived\", ascending=False)\n# group by Survived and show means of groups and sort them","22ddacee":"def detectOutliers(df, features):\n    outlierIndices = []\n    \n    for c in features:\n        # Q1\n        Q1 = np.percentile(df[c], 25)\n        \n        # Q3\n        Q3 = np.percentile(df[c], 75)\n        \n        # IQR\n        IQR = Q3 - Q1\n        \n        # Outlier step\n        outlierStep = IQR * 1.5\n        \n        # detect outliers and indices of them\n        outlierListCol = df[(df[c] < (Q1 - outlierStep)) | (df[c] > (Q3 + outlierStep))].index\n#         print(outlierListCol)\n        \n        # store indices\n        outlierIndices.extend(outlierListCol)\n#         print(outlierIndices)\n    \n    outlierIndices = Counter(outlierIndices)\n#     print(outlierIndices)\n    \n    multipleOutliers = list(i for i, v in outlierIndices.items() if v > 2)\n    \n    return multipleOutliers","38d12346":"# lista = []\n# x = trainDF[((trainDF[\"Age\"] < 2) | (trainDF[\"Age\"] > 70))].index\n# lista.extend(x)\n# lista\n# a = [\"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"b\"]\n\n# Counter(a)","9b44e8a5":"trainDF.loc[detectOutliers(trainDF, [\"SibSp\"])]","37107908":"trainDF.loc[detectOutliers(trainDF, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","0af5bbd7":"trainDF = trainDF.drop(detectOutliers(trainDF, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"]), axis=0).reset_index(drop = True) \n# drop = True means we frop old index column","15809dc7":"trainDFLen = len(trainDF)\ntrainDF = pd.concat([trainDF, testDF], axis=0).reset_index(drop=True)","796e36f6":"trainDF.head()","a58644fa":"# trainDF.isnull().any()\ntrainDF.columns[trainDF.isnull().any()]","f172e4c9":"trainDF.isnull().sum()","b0010ba6":"trainDF[trainDF[\"Embarked\"].isnull()]","3f14b2f5":"trainDF.boxplot(column=\"Fare\", by=\"Embarked\")\nplt.show()\n# boxplota bak\u0131ld\u0131\u011f\u0131nda embarked\u0131 C olan yolcular\u0131n medyan fare de\u011ferleri 80 i\u00e7in daha uygun. (80 embarked \u0131 NaN olan de\u011ferlerin fare lar\u0131)","e0abb5c8":"trainDF[\"Embarked\"] = trainDF[\"Embarked\"].fillna(\"C\")\ntrainDF[trainDF[\"Embarked\"].isnull()]","29c7d799":"trainDF[trainDF[\"Fare\"].isnull()]","50a11df2":"trainDF[(trainDF[\"Pclass\"] == 3) & (trainDF[\"SibSp\"] == 0) & (trainDF[\"Parch\"] == 0)][\"Fare\"].mean()","0b8a7aca":"trainDF[\"Fare\"] = trainDF[\"Fare\"].fillna(trainDF[(trainDF[\"Pclass\"] == 3) & (trainDF[\"SibSp\"] == 0) & (trainDF[\"Parch\"] == 0)][\"Fare\"].mean())","f9980cd5":"trainDF[trainDF[\"Fare\"].isnull()]","a06ff7a6":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(trainDF[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","29fd1952":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = trainDF, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","8e19d8f2":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = trainDF, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","ae8080ca":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = trainDF, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","e8a85ebb":"g = sns.FacetGrid(trainDF, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","e49fec8a":"g = sns.FacetGrid(trainDF, col = \"Survived\", row = \"Pclass\", size = 3)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","e023b5ee":"g = sns.FacetGrid(trainDF, row = \"Embarked\", size = 3)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","48a13c82":"g = sns.FacetGrid(trainDF, row = \"Embarked\", col = \"Survived\", size = 3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","221a930e":"trainDF[trainDF.Age.isnull()]","1bb6b545":"sns.factorplot(x = \"Sex\", y = \"Age\", data = trainDF, kind = \"box\")\nplt.show()","6dd617e8":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = trainDF, kind = \"box\")\nplt.show()","8875457f":"sns.factorplot(x = \"Parch\", y = \"Age\", data = trainDF, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = trainDF, kind = \"box\")\nplt.show()","07ce1e47":"# trainDF[\"Sex\"] = [1 if i == \"male\" else 0 for i in trainDF[\"Sex\"]]","29c32a3b":"sns.heatmap(trainDF[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","126c19fa":"index_nan_age = list(trainDF[\"Age\"][trainDF[\"Age\"].isnull()].index)\nfor i in index_nan_age: # \u00d6rne\u011fin ilk NaN de\u011ferli indexi ald\u0131k, daha sonra a\u015fa\u011f\u0131daki \u00f6zellikleri onunnla ayn\u0131 olan t\u00fcm di\u011fer indexlerin Age de\u011ferlerini tutup medyan\u0131n\u0131 ald\u0131k.\n    age_pred = trainDF[\"Age\"][((trainDF[\"SibSp\"] == trainDF.iloc[i][\"SibSp\"]) &(trainDF[\"Parch\"] == trainDF.iloc[i][\"Parch\"])& (trainDF[\"Pclass\"] == trainDF.iloc[i][\"Pclass\"]))].median()\n    age_med = trainDF[\"Age\"].median()\n    if not np.isnan(age_pred):\n        trainDF[\"Age\"].iloc[i] = age_pred\n    else:\n        trainDF[\"Age\"].iloc[i] = age_med","3e8cd9c8":"trainDF[trainDF[\"Age\"].isnull()]","c79744d7":"<a id=\"2.1.1\"><\/a>\n### Categorical Variable Analysis","6034853a":"Fare has a little correlation of 0.26 with Survived.","6b8cfe13":"# Introduction\n\nCopied from for learning: https:\/\/www.kaggle.com\/kanncaa1\/dataiteam-titanic-eda\n\nTable of Contents:\n\n1. [Reading Data](#1)\n1. [Variable Description](#2)\n    1. [Univariate Variable Analysis](#2.1)\n        * [Categorical Variable Analysis](#2.1.1)\n        * [Numerical Variable Analysis](#2.1.2)\n1. [Basic Data Analysis](#3)\n1. [Outlier Detection](#4)\n1. [Missing Values](#5)\n    1. [Find Missing Values](#5.1)\n    1. [Fill Missing Values](#5.2)\n1. [Visualisation](#6)\n    1. [Correlation Between Sibsp - Parch - Age - Fare - Survived](#6.1)\n    1. [SibSp - Survived](#6.2)\n    1. [Parch - Survived](#6.3)\n    1. [Pclass - Survived](#6.4)\n    1. [Age - Survived](#6.5)\n    1. [Pclass - Age - Survived](#6.6)\n    1. [Embarked - Sex - Pclass - Survived](#6.7)\n    1. [Embarked - Sex - Fare - Survived](#6.8)\n    1. [Filling Missing Age Values](#6.9)","d113a0c6":"<a id = \"6.3\"><\/a><br>\n## Parch - Survived","203f0990":"<a id = \"6.8\"><\/a><br>\n## Embarked - Sex - Fare - Survived","b9e73144":"* age <= 10 has a high survival rate,\n* oldest passengers (80) survived,\n* large number of 20 years old did not survive,\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distribution for missing value of age","05a1c0d5":"* Having a lot of SibSp causes less chance to survive.\n* If sibsp == 0 or 1 or 2, passenger has more chance to survive\n* We can consider a new feature describing these categories.","43061dac":"* float64(2): Fare, Age\n* int64(5): PassengerId, Survived, Pclass, SibSp, Parch \n* object(5): Name, Sex, Ticket, Cabin, Embarked","293fbd28":"<a id = \"6.6\"><\/a><br>\n## Pclass - Age - Survived","7797a159":"<a id = \"6\"><\/a><br>\n# Visualization\n","9c2f73fd":"<a id = \"6.4\"><\/a><br>\n## Pclass - Survived","862cfdb1":"<a id = \"6.98\"><\/a><br>\n## Filling Missing Age Values","205bb5fc":"* Female passengers have much better survival rate than males.\n* males have better survival rate in pclass 3 in C.\n* embarked and sex will be used in training.","e88bc704":"Sex is not informative for age prediction, age distribution seems to be the same for each gender.","903ea321":"<a id=\"2.1\"><\/a>\n## Univariate Variable Analysis\n* Categorical Variables: Survived, Pclass, Name, Sex, SibSp, Parch, Ticket, Cabin, Embarked\n* Numerical Variables: PassengerId, Age, Fare","4165d6a3":"<a id=\"2.1.2\"><\/a>\n### Numerical Variable Analysis","eb2e3471":"* Sibsp and parch can be used for new feature extraction with th = 3\n* small familes have more chance to survive.\n* there is a std in survival of passenger with parch = 3","fc277a80":"<a id=\"1\"><\/a>\n# Reading Data\n","8405b058":"<a id = \"6.1\"><\/a><br>\n## Correlation Between Sibsp - Parch - Age - Fare - Survived","76dafde6":"<a id = \"6.2\"><\/a><br>\n## SibSp - Survived","9f99392f":"1st class passengers are older than 2nd, and 2nd is older than 3rd class. ","f164df63":"* Passsengers who pay higher fare have better survival. Fare can be used as categorical for training.","a276fb65":"<a id = \"6.5\"><\/a><br>\n## Age - Survived","22534475":"<a id=\"5.1\"><\/a>\n## Find Missing Values","8317f804":"<a id=\"5\"><\/a>\n# Missing Values\n* Find Missing Values\n* Fill Missing Values","0c157b27":"Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","f7c49097":"<a id=\"3\"><\/a>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - SUrvived","e9e4a494":"<a id=\"2\"><\/a>\n# Variable Description\n1. PassengerId: ID number of the passenger. \n1. Survived: Survived(1) or died(0). \n1. Pclass: Class of the passenger.\n1. Name: Name of the passenger. \n1. Sex: Gender of the passenger. \n1. Age: Age of passenger. \n1. SibSp: Number of siblings and spouses of the passenger.\n1. Parch: Number of parents or children of the passenger. \n1. Ticket: Ticket number of the passenger. \n1. Fare: Ticket fee. \n1. Cabin: Cabin category of the passenger. \n1. Embarked: The port where passenger embarked. (C = Cherbourg, S = Southampton, Q = Queenstown)","5fd8b333":"<a id=\"4\"><\/a>\n# Outlier Detection","6429b9f2":"<a id = \"6.7\"><\/a><br>\n## Embarked - Sex - Pclass - Survived","653b381f":"<a id=\"5.2\"><\/a>\n## Fill Missing Values\n* Embarked as 2 missing value\n* Fare has 1 missing value"}}