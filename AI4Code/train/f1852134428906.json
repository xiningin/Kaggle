{"cell_type":{"3843fbc2":"code","49aecd47":"code","bf97bc5c":"code","ed0cf335":"code","3ae92458":"code","64125e27":"code","f054b7c6":"code","b6e99d81":"markdown","0809cd69":"markdown","20722f8f":"markdown","975de6dd":"markdown","3899a418":"markdown","ee9eb96e":"markdown","42dda70f":"markdown"},"source":{"3843fbc2":"import pandas as pd\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.impute import SimpleImputer\nimport numpy as np\nfrom sklearn.svm import SVC\nimport matplotlib.pyplot as plt","49aecd47":"df = pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")","bf97bc5c":"from pandas import set_option\nset_option('display.width', 100)\nset_option('precision', 2)\n\n\n\ndf['diagnosis'].value_counts().plot(kind = 'pie', explode = [0, 0.1], figsize = (6, 6), autopct = '%1.1f%%', shadow = True)\nplt.ylabel(\"B vs M\")\nplt.legend([\"M\", \"B\"])\nplt.show()\n\nfig = plt.figure()\nax = fig.add_subplot(111)\ndf['diagnosis'].value_counts().plot(kind='bar', color = '#1f77b4', alpha=0.5, grid=True)\nplt.ylabel('counts')\nplt.title('Benign vs Malignant counts')\nplt.xticks(rotation='horizontal')\nax.xaxis.grid(which=\"major\")\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nfor p in ax.patches:\n    ax.annotate(np.round(p.get_height(),decimals=2), (p.get_x()+p.get_width()\/2., p.get_height()), ha='center', va='center')","ed0cf335":"x =df.drop([\"id\",\"diagnosis\"],axis=1)\nIM = SimpleImputer(missing_values = np.nan,strategy= 'mean')\nIM = IM.fit(x)\nx = IM.transform(x)\n\ny=df[\"diagnosis\"]\ny = pd.get_dummies(df[\"diagnosis\"],drop_first=True)\ny = y.values.ravel()","3ae92458":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)","64125e27":"knn = KNeighborsClassifier(n_neighbors = 2)\nknn=knn.fit(x_train, y_train)\nknn_pred=knn.predict(x_test)\nprint (accuracy_score(y_test,knn_pred))\nprint ('Report : ')\nprint ( classification_report(y_test,knn_pred))","f054b7c6":"svc=SVC()\nsvc=svc.fit(x_train, y_train)\nsvc_pred = svc.predict(x_test)\nprint (accuracy_score(y_test,svc_pred))\nprint ('Report : ')\nprint ( classification_report(y_test,svc_pred))","b6e99d81":"**7. SVM Classifier**","0809cd69":"**4. Declare feature vector and target variable**","20722f8f":"**2. Import data**","975de6dd":"**1. Import necessary libraries**","3899a418":"**3. Visualizing the data**","ee9eb96e":"**6. K-Nearest Neighbors Classifier**","42dda70f":"**5. Split the data into training and test set**"}}