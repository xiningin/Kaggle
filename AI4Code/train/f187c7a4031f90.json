{"cell_type":{"0cabe423":"code","65258a65":"code","7623522f":"code","fff1631e":"code","6c914b2d":"code","7fdb7f47":"code","ea3f6083":"code","54b8c3d8":"code","85043d6b":"code","77556224":"code","914d8390":"code","bca85ddc":"code","bc093de5":"code","4a3baad8":"code","c1376554":"code","d652e63a":"code","bc73e92e":"markdown","4b246c2c":"markdown","e1bb575a":"markdown","6f232adf":"markdown","1ab2df65":"markdown","9bdb781a":"markdown","96ab738c":"markdown"},"source":{"0cabe423":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\n","65258a65":"sns.set(style='darkgrid')","7623522f":"train = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/train.csv')\ntest = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/test.csv')\nsample = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/sample_submission.csv')","fff1631e":"test.head()","6c914b2d":"train['sex'].fillna('unknown', inplace=True)\ntest['sex'].fillna('unknown', inplace=True)\n\ntrain['age_approx'].fillna(train['age_approx'].mode().values[0], inplace=True)\ntest['age_approx'].fillna(test['age_approx'].mode().values[0], inplace=True)\n\ntrain['anatom_site_general_challenge'].fillna('unknown', inplace=True)\ntest['anatom_site_general_challenge'].fillna('unknown', inplace=True)\n","7fdb7f47":"from sklearn.preprocessing import LabelEncoder\nenc = LabelEncoder()\n\ntrain['sex_enc'] = enc.fit_transform(train.sex.astype('str'))\ntest['sex_enc'] = enc.transform(test.sex.astype('str'))\n\ntrain['age_enc'] = enc.fit_transform(train.age_approx.astype('str'))\ntest['age_enc'] = enc.transform(test.age_approx.astype('str'))\n\ntrain['anatom_enc'] = enc.fit_transform(train.anatom_site_general_challenge.astype('str'))\ntest['anatom_enc'] = enc.transform(test.anatom_site_general_challenge.astype('str'))\n","ea3f6083":"train.head(5)","54b8c3d8":"train['age_enc'] = train['age_enc'] \/ np.mean(train['age_enc'])\ntest['age_enc'] = test['age_enc'] \/ np.mean(test['age_enc'])\n\ntrain['anatom_enc'] = train['anatom_enc'] \/ np.mean(train['anatom_enc'])\ntest['anatom_enc'] = test['anatom_enc'] \/ np.mean(test['anatom_enc'])\n\ntrain.head()","85043d6b":"from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom sklearn.metrics import roc_auc_score\n","77556224":"train.columns","914d8390":"features = [\n            'sex_enc',\n            'age_enc',\n            'anatom_enc'\n]","bca85ddc":"X = train[features]\ny = train['target']\n\nx_test = test[features]","bc093de5":"model = XGBRegressor(base_score=0.5, booster=None, colsample_bylevel=1,\n                    importance_type='gain', interaction_constraints=None,\n                     min_child_weight=1, missing=None, monotone_constraints=None,\n                     n_estimators=700, n_jobs=-1, nthread=-1, num_parallel_tree=1\n                    )\n\nkfold = StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\ncv_results = cross_val_score(model, X, y, cv=kfold, scoring='roc_auc', verbose=3)\ncv_results.mean()","4a3baad8":"xgb =XGBRegressor(base_score=0.5, booster=None, colsample_bylevel=1,\n                    importance_type='gain', interaction_constraints=None,\n                     min_child_weight=1, missing=None, monotone_constraints=None,\n                     n_estimators=700, n_jobs=-1, nthread=-1, num_parallel_tree=1\n                    )\nxgb.fit(X, y)\npred = xgb.predict(x_test)","c1376554":"sub = pd.DataFrame({'image_name':test.image_name.values,\n                    'target':pred})\nsub.to_csv('submission.csv',index = False)","d652e63a":"sub.head()","bc73e92e":"Filling unknown values with relevant data","4b246c2c":"## This notebook aims at some of basic preprocessing steps of tabular data available with this competition.","e1bb575a":"Label Encoding categorical values","6f232adf":"## Building our XGBoost Regression model","1ab2df65":"Selecting only relevant feature columns from tabular data","9bdb781a":"# If you like my work, do upvote :)","96ab738c":"### Mean Normalization"}}