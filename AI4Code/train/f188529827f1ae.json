{"cell_type":{"54e214ac":"code","1f2d4795":"code","483d6a2a":"code","f4782917":"code","c08f390d":"code","ecfe548e":"code","d4726ad9":"code","0b84813f":"code","5b219a0f":"code","a3970253":"code","f90fb47f":"code","3c5fd5c5":"code","5672a77e":"code","04888b7c":"code","4222b454":"code","adf06b3a":"code","2184e9cd":"code","550328ee":"code","a187d4c0":"code","5918ce9f":"code","ec6d358b":"markdown"},"source":{"54e214ac":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/bike-sharing-demand\/train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='count')#, id_name='Id')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","1f2d4795":"import sklearn\nprint(sklearn.__all__)","483d6a2a":"import sklearn.linear_model\nprint(sklearn.linear_model.__all__)","f4782917":"import sklearn.tree\nprint(sklearn.tree.__all__)","c08f390d":"from sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor","ecfe548e":"X_train.head()","d4726ad9":"X_train.info()\n\n# X_train = X_train.select_dtypes(exclude=['object'])\n# X_test = X_test.select_dtypes(exclude=['object'])\n# target = y_train['SalePrice']","0b84813f":"X_trian = X_train.drop('datetime',axis=1)\nX_test = X_test.drop('datetime',axis=1)","5b219a0f":"X_train.head()\n","a3970253":"X_test.head()","f90fb47f":"#\uc22b\uc790\uac00 \ud070 \uac83\ub4e4\uc740 \uc815\uaddc\ud654\uc2dc\ud0a4\uc790\nX_train = X_train[['temp','humidity','windspeed','casual']]","3c5fd5c5":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.fit_transform(X_test)\nprint(X_train)\nprint(X_test)","5672a77e":"from sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split, GridSearchCV , RandomizedSearchCV\n\nX_tr, X_ts, y_tr, y_ts = train_test_split(X_train,y_train['count'],test_size = 0.15, random_state = 42)","04888b7c":"from sklearn.metrics import accuracy_score, mean_squared_error\n\nlr = LinearRegression()\nlr.fit(X_tr,y_tr)\ny_pred = lr.predict(X_ts)\nprint(lr.score(X_tr,y_tr))\nprint(round(np.sqrt(mean_squared_error(y_ts,y_pred)),3))\n# print('accuracy score:', (accuracy_score(y_ts, y_pred))) # \ubd84\ub958\ub54c\ub098 \uc368\ub77c !","4222b454":"from sklearn.metrics import accuracy_score, mean_squared_error\nrf = RandomForestRegressor()\nrf.fit(X_tr,y_tr)\ny_pred = rf.predict(X_ts)\nprint(rf.score(X_tr,y_tr))\nprint(round(np.sqrt(mean_squared_error(y_ts,y_pred)),3))\n# print('accuracy score:', (accuracy_score(y_ts, y_pred))) # \ubd84\ub958\ub54c\ub098 \uc368\ub77c !","adf06b3a":"from sklearn.metrics import accuracy_score, mean_squared_error\ndt = DecisionTreeRegressor()\ndt.fit(X_tr,y_tr)\ny_pred = dt.predict(X_ts)\nprint(dt.score(X_tr,y_tr))\nprint(round(np.sqrt(mean_squared_error(y_ts,y_pred)),3))\n# print('accuracy score:', (accuracy_score(y_ts, y_pred))) # \ubd84\ub958\ub54c\ub098 \uc368\ub77c !","2184e9cd":"from sklearn.metrics import accuracy_score, mean_squared_error\nxgb =  XGBRegressor()\nxgb.fit(X_tr,y_tr)\ny_pred = xgb.predict(X_ts)\nprint(dt.score(X_tr,y_tr))\nprint(round(np.sqrt(mean_squared_error(y_ts,y_pred)),3))\n# print('accuracy score:', (accuracy_score(y_ts, y_pred))) # \ubd84\ub958\ub54c\ub098 \uc368\ub77c !","550328ee":"xgb.fit(X_trian, y_train['count'])\nfinal_pred = xgb.predict(X_test)\nxgb_mse = mean_squared_error(y_test['count'], final_pred)\nnp.sqrt(xgb_mse)","a187d4c0":"sub = pd.DataFrame({'id' : y_test['id'], 'count' : final_pred})\nsub.to_csv('003000812.csv',index=False)","5918ce9f":"pd.read_csv('003000812.csv')","ec6d358b":"X_train.shape, X_test.shape, y_train.shape, y_test.shape"}}