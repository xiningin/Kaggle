{"cell_type":{"02b561b5":"code","1cedafbd":"code","be573e25":"code","f36226f7":"code","99c39a30":"code","cab6d5fe":"code","281f740e":"code","d5526431":"code","ff189b00":"code","85b1f971":"code","42e613b9":"code","4b1d5fa2":"code","cd5444a7":"code","0cfd4b27":"code","7abbd577":"code","0eb90963":"code","83695876":"code","9e31fe93":"code","e044924b":"code","e0165fa5":"code","fff9bea5":"code","4b6e32cf":"code","0ceb3f5f":"code","6cf0152c":"code","dc82b368":"code","0d5352e1":"code","02ef394b":"code","bc8fd188":"code","dec699a7":"code","bba53dc6":"code","adcb97cf":"code","9a1e2c72":"code","be7273a8":"code","ac2ffbb2":"markdown","b35689e3":"markdown","643d937f":"markdown","cb0c5bbb":"markdown"},"source":{"02b561b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1cedafbd":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import randint, uniform \n","be573e25":"pd.options.display.max_rows = 120\npd.options.display.max_columns = 120","f36226f7":"df = pd.read_excel('\/kaggle\/input\/covid19\/dataset.xlsx')\ndf.head()","99c39a30":"df.shape","cab6d5fe":"new_cols = ['Patient_ID','Patient_age_quantile','SARS_Cov_2_exam_result','Patient addmited to regular ward',\n 'Patient addmited to semi-intensive unit','Patient addmited to intensive care unit','Hematocrit','Hemoglobin','Platelets',\n 'Mean platelet volume ','Red blood Cells','Lymphocytes','Mean corpuscular hemoglobin concentration','Leukocytes',\n 'Basophils','Mean corpuscular hemoglobin','Eosinophils','Mean corpuscular volume','Monocytes','Red blood cell distribution width',\n 'Serum Glucose','Respiratory Syncytial Virus','Influenza A','Influenza B','Parainfluenza 1','CoronavirusNL63','Rhinovirus_Enterovirus',\n 'Mycoplasma pneumoniae','Coronavirus HKU1','Parainfluenza 3','Chlamydophila pneumoniae','Adenovirus','Parainfluenza 4','Coronavirus229E',\n 'CoronavirusOC43','Inf A H1N1 2009','Bordetella pertussis','Metapneumovirus','Parainfluenza 2','Neutrophils','Urea',\n 'Proteina C reativa mg\/dL','Creatinine','Potassium','Sodium','Influenza B, rapid test','Influenza A, rapid test','Alanine transaminase',\n 'Aspartate transaminase','Gamma-glutamyltransferase','Total Bilirubin','Direct Bilirubin','Indirect Bilirubin',\n 'Alkaline phosphatase','Ionized calcium','Strepto A','Magnesium','pCO2 (venous blood gas analysis)','Hb saturation (venous blood gas analysis)',\n 'Base excess (venous blood gas analysis)','pO2_venous blood gas analysis_','Fio2 (venous blood gas analysis)',\n 'Total CO2_venous blood gas analysis','pH_venous blood gas analysis','HCO3 (venous blood gas analysis)',\n 'Rods','Segmented','Promyelocytes','Metamyelocytes','Myelocytes','Myeloblasts','Urine - Esterase','Urine - Aspect',\n 'Urine - pH','Urine - Hemoglobin','Urine - Bile pigments','Urine - Ketone Bodies','Urine - Nitrite','Urine - Density',\n 'Urine - Urobilinogen','Urine - Protein','Urine - Sugar','Urine - Leukocytes','Urine - Crystals','Urine - Red blood cells',\n 'Urine - Hyaline cylinders','Urine - Granular cylinders','Urine - Yeasts','Urine - Color','Partial thromboplastin time',\n 'Relationship (Patient\/Normal)','International normalized ratio (INR)','Lactic Dehydrogenase','Prothrombin time (PT), Activity',\n 'Vitamin B12','Creatine phosphokinase','Ferritin','Arterial Lactic Acid','Lipase dosage','D-Dimer', 'Albumin',\n 'Hb saturation (arterial blood gases)','pCO2 (arterial blood gas analysis)','Base excess (arterial blood gas analysis)',\n 'pH (arterial blood gas analysis)','Total CO2 (arterial blood gas analysis)','HCO3 (arterial blood gas analysis)',\n 'pO2 (arterial blood gas analysis)','Arteiral Fio2','Phosphor','ctO2 (arterial blood gas analysis)']","281f740e":"df.columns = new_cols","d5526431":"df.columns = df.columns.str.replace(\" \", \"_\")\ndf.columns = df.columns.str.replace(\"(\", \"_\")\ndf.columns = df.columns.str.replace(\")\", \"_\")\ndf.columns = df.columns.str.replace(\"-\", \"\")\ndf.columns = df.columns.str.replace(\"__\", \"_\")","ff189b00":"df.head()","85b1f971":"df.dtypes","42e613b9":"object_columns = df.select_dtypes('object').columns","4b1d5fa2":"for col in object_columns:\n    print(col, df[col].unique())","cd5444a7":"df = df.replace(\"negative\", 0).replace(\"positive\", 1)\ndf = df.replace(\"not_detected\", 0).replace(\"detected\", 1)","0cfd4b27":"object_columns = df.select_dtypes('object').columns\nfor col in object_columns:\n    print(col, df[col].unique())","7abbd577":"df.corr()","0eb90963":"plt.figure(figsize=(20, 10))\nmatrix = np.triu(df.corr())\nsns.heatmap(df.corr(), mask=matrix)\n# SARS-Cov-2 exam result","83695876":"df_notnull = df.dropna(subset=['SARS_Cov_2_exam_result']).drop(columns=['Patient_ID'])\ndf_notnull.head()","9e31fe93":"df_notnull.SARS_Cov_2_exam_result.value_counts()","e044924b":"from sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.metrics import log_loss, roc_auc_score, roc_curve, auc, precision_recall_curve, confusion_matrix, plot_confusion_matrix\nfrom sklearn.inspection import plot_partial_dependence\nfrom lightgbm import LGBMClassifier, plot_metric, plot_tree, create_tree_digraph\nfrom sklearn.feature_selection import RFECV, SelectFromModel\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import LabelEncoder, FunctionTransformer\nfrom tqdm import tqdm","e0165fa5":"def plot_roc_curve(y_true, y_pred):\n    fpr, tpr, threshold = roc_curve(y_true, y_pred)\n    roc_auc = auc(fpr, tpr)\n    fig, ax = plt.subplots(figsize=(10,7))\n    ax.set_title('Receiver Operating Characteristic')\n    ax.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\n    ax.legend(loc = 'lower right')\n    ax.plot([0, 1], [0, 1],'r--')\n    ax.set_xlim([0, 1])\n    ax.set_ylim([0, 1])\n    ax.set_ylabel('True Positive Rate')\n    ax.set_xlabel('False Positive Rate')\n    return ax\n\ndef plot_precision_recall(precisions, recalls, thresholds):\n    fig, ax = plt.subplots(figsize=(12,8))\n    ax.plot(thresholds, precisions[:-1], \"r--\", label=\"Precisions\")\n    ax.plot(thresholds, recalls[:-1], \"#424242\", label=\"Recalls\")\n    ax.set_title(\"Precision and Recall \\n Tradeoff\", fontsize=18)\n    ax.set_ylabel(\"Level of Precision and Recall\", fontsize=16)\n    ax.set_xlabel(\"Thresholds\", fontsize=16)\n    ax.legend(loc=\"best\", fontsize=14)\n    ax.set_xlim([0, 1])\n    ax.set_ylim([0, 1])\n    return ax\n\n\ndef plot_confusion_matrix_2(y_test, y_pred):\n    cm = confusion_matrix(y_test, y_pred)\n    df = pd.DataFrame(cm.T)\n    ax = sns.heatmap(df, annot=True)\n    ax.set_xlabel(\"Predicted label\")\n    ax.set_ylabel(\"True label\")\n    return ax","fff9bea5":"object_columns = df_notnull.select_dtypes('object').columns","4b6e32cf":"df_notnull[object_columns]=df[object_columns].astype('category')","0ceb3f5f":"X = df_notnull.drop(columns='SARS_Cov_2_exam_result')\ny = df_notnull.SARS_Cov_2_exam_result","6cf0152c":"\ncols = ['V{}'.format(i) for i in range(len(X.columns))]\n  ","dc82b368":"X.columns = cols","0d5352e1":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","02ef394b":"param_test ={'num_leaves': randint(6, 50), \n             'min_child_samples': randint(100, 500), \n             'min_child_weight': [1e-5, 1e-3, 1e-2, 1e-1, 1, 1e1, 1e2, 1e3, 1e4],\n             'subsample': uniform(loc=0.2, scale=0.8), \n             'colsample_bytree': uniform(loc=0.4, scale=0.6),\n             'reg_alpha': [0, 1e-1, 1, 2, 5, 7, 10, 50, 100],\n             'reg_lambda': [0, 1e-1, 1, 5, 10, 20, 50, 100]}","bc8fd188":"\nclf = LGBMClassifier(random_state=42,  min_data=1, silent=True, is_unbalance=True)\nmodel = RandomizedSearchCV(\n    estimator=clf,\n    param_distributions=param_test, \n    n_iter=100,\n    scoring='roc_auc',\n    cv=5,\n    refit=True,\n    random_state=42,\n    verbose=True)","dec699a7":"answer = model.fit(X_train, y_train)\ny_pred_proba = model.predict_proba(X_test)[:, 1]","bba53dc6":"\nplot_roc_curve(y_test, y_pred_proba)\n","adcb97cf":"roc_auc_score(y_test, y_pred_proba)","9a1e2c72":"precisions, recalls, thresholds = precision_recall_curve(y_test, y_pred_proba)\nplot_precision_recall(precisions, recalls, thresholds)","be7273a8":"threshold = 0.528\n# i tried a lot of values, this is the best balance until now\ny_pred = y_pred_proba > threshold\n\nr = confusion_matrix(y_test, y_pred)\ns = [\n        [r[0][0]\/y_test.value_counts()[0], r[0][1]\/y_test.value_counts()[0]], \n        [r[1][0]\/y_test.value_counts()[1], r[1][1]\/y_test.value_counts()[1]]\n    ]\nsns.heatmap(s, annot=True,cmap=plt.cm.Blues)","ac2ffbb2":"## Rename *object* variables ","b35689e3":"### First model","643d937f":"## Rename Columns","cb0c5bbb":"## Let's take all cases first"}}