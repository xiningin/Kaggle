{"cell_type":{"febc9e50":"code","394542c7":"code","2a5a7fd3":"code","e8ee4883":"code","efa2feb5":"code","15730646":"code","d980bb78":"code","9abfbdd6":"code","7b442d8e":"code","b63df55a":"code","bd24a81f":"code","0b233e05":"code","b20bafa1":"code","2b8b3852":"code","1cd77229":"code","d7db0219":"code","409bc689":"code","dbe6d6cd":"code","a4ab8ef0":"code","b7d75090":"code","bb9c9ad1":"code","a48eb7d4":"code","439d7d08":"code","b005e3c7":"code","188d7932":"code","f3549467":"code","d99015a9":"code","1d93a6a8":"code","2b316921":"code","41b1ac1f":"code","28b38964":"code","be0ad6d0":"code","bc6f8404":"code","75aed56a":"code","2173ee05":"code","bad3db7a":"code","e6017759":"code","95022ce4":"code","27b76f71":"code","a7f8779f":"code","b1444331":"code","3712fd37":"code","112d90bf":"code","97c01154":"code","5cfcc361":"code","a6f330be":"code","b9728edd":"code","2294709d":"code","eb7fd5fc":"code","3d9ff0b4":"code","7b5c5871":"code","130e8bf5":"code","6a1c811e":"code","14512c9d":"code","6a74be47":"code","71651520":"code","74bb6d8e":"code","beb42b4e":"code","531f810d":"code","8563ba4d":"code","389defd5":"code","0ca59c76":"code","4fcf1257":"code","81436895":"code","46eab197":"code","12571dfa":"code","bc05b231":"code","ffd2d7d2":"code","bffd22fd":"code","25d7fb3c":"code","9b8b75fa":"code","13e67595":"code","4ac75ac1":"code","c731d22f":"markdown","a12e32dc":"markdown","cae20280":"markdown"},"source":{"febc9e50":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","394542c7":"df = pd.read_csv('..\/input\/craigslist-carstrucks-data\/vehicles.csv')\ndf.head(2)","2a5a7fd3":"df.columns","e8ee4883":"df.info()","efa2feb5":"df = df.drop(columns=['url',\n                      'region_url', \n                      'image_url', \n                      'lat', \n                      'long',\n                      'vin',\n                      'description',\n                      'id',\n                      'paint_color'])","15730646":"df.shape","d980bb78":"df.isnull().sum(axis=1)","9abfbdd6":"df.head(2)","7b442d8e":"\ndfmissing = df.isnull().sum().to_frame()\ndfmissing.columns = ['null']\ndfmissing['numberrow'] = df.count()\ndfmissing['pct'] = dfmissing['null']\/len(df)\ndfmissing","b63df55a":"#all country is null\ndf = df.drop(columns = ['county'],axis = 1)","bd24a81f":"#9 missing per row hapus\ndf = df[df.isnull().sum(axis=1) < 9]\ndf.shape","0b233e05":"df.describe().T\n","b20bafa1":"dfmissing = df.isnull().sum().to_frame()\ndfmissing.columns = ['null']\ndfmissing['numberrow'] = df.count()\ndfmissing['pct'] = dfmissing['null']\/len(df)\ndfmissing","2b8b3852":"#remove harga 0\ndf = df[df.price != 0]\ndf.shape","1cd77229":"#cek tahun\nplt.figure(figsize=(15,9))\nax = sns.countplot(x='year',data=df);\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\",fontsize=10);\n","d7db0219":"#ambil dari 1995\ndf = df[df.year > 1995]\ndf.shape","409bc689":"#cek tahun\nplt.figure(figsize=(15,9))\nax = sns.countplot(x='year',data=df);\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\",fontsize=10);\n","dbe6d6cd":"df.odometer.max(), df.odometer.min()","a4ab8ef0":"sns.kdeplot(data=df.odometer)","b7d75090":"df = df[~(df.odometer > 300000)]\ndf.shape","bb9c9ad1":"sns.kdeplot(data=df.odometer)","a48eb7d4":"#hapus <20\ndf = df[~(df.odometer < 20)]\ndf.shape","439d7d08":"sns.kdeplot(data=df.odometer)","b005e3c7":"df.head(2)","188d7932":"dfmissing = df.isnull().sum().to_frame()\ndfmissing.columns = ['null']\ndfmissing['numberrow'] = df.count()\ndfmissing['pct'] = dfmissing['null']\/len(df)\ndfmissing","f3549467":"df.describe().T\n","d99015a9":"df.price.max()","1d93a6a8":"sns.kdeplot(data=df.price)","2b316921":"sdf = df[~(df.price > 50000)]\nsdf.shape","41b1ac1f":"sns.kdeplot(data=sdf.price)","28b38964":"df =sdf","be0ad6d0":"df.head()","bc6f8404":"dfmissing = df.isnull().sum().to_frame()\ndfmissing.columns = ['null']\ndfmissing['numberrow'] = df.count()\ndfmissing['pct'] = dfmissing['null']\/len(df)\ndfmissing","75aed56a":"df = df.drop(columns = ['size'],axis = 1)","2173ee05":"dfmissing = df.isnull().sum().to_frame()\ndfmissing.columns = ['null']\ndfmissing['numberrow'] = df.count()\ndfmissing['pct'] = dfmissing['null']\/len(df)\ndfmissing","bad3db7a":"df.manufacturer.value_counts()","e6017759":"## feature selection \ndflearn = df[['price','year','cylinders','fuel','odometer','title_status','transmission','condition']]\ndflearn","95022ce4":"dfmissing = dflearn.isnull().sum().to_frame()\ndfmissing.columns = ['null']\ndfmissing['numberrow'] = dflearn.count()\ndfmissing['pct'] = dfmissing['null']\/len(dflearn)\ndfmissing","27b76f71":"print(dflearn.condition.value_counts())","a7f8779f":"dflearn['condition'].fillna(\"unknown\",inplace = True)","b1444331":"dfmissing = dflearn.isnull().sum().to_frame()\ndfmissing.columns = ['null']\ndfmissing['numberrow'] = dflearn.count()\ndfmissing['pct'] = dfmissing['null']\/len(dflearn)\ndfmissing","3712fd37":"dflearn = dflearn.dropna()","112d90bf":"dflearn.condition.value_counts()","97c01154":"#map categorical string to int\ncondition_ = {'excellent' :0, \n         'good'      :1, \n         'like new'  :2, \n         'fair'      :3,\n         'new'       :4,\n         'salvage'   :5,\n         'unknown'   :6}\ncylinders_ = {'4 cylinders' :4, \n         '6 cylinders'      :6, \n         '8 cylinders'      :8, \n         '5 cylinders'      :5,\n         '10 cylinders'     :10,\n         '3 cylinders'      :3,\n         '12 cylinders'     :12,\n         'other'             :0}\nstatus_ = {'clean'      :1, \n         'rebuilt'      :2, \n         'salvage'      :3, \n         'lien'         :4,\n         'missing'      :5,\n         'parts only'   :6}\n\ntransmission_ = {'automatic'  :1, \n                 'manual'     :2, \n                 'other'      :3}\nfuel_ = {'gas' :1, \n         'diesel'      :2, \n         'hybrid'      :3,\n         'electric'    :4,\n         'other'       :5}","5cfcc361":"dflearn['condition'] = dflearn['condition'].map(condition_)\ndflearn['title_status'] = dflearn['title_status'].map(status_)\ndflearn['fuel'] = dflearn['fuel'].map(fuel_)\ndflearn['transmission'] = dflearn['transmission'].map(transmission_)\ndflearn['cylinders'] = dflearn['cylinders'].map(cylinders_)","a6f330be":"dflearn.head()","b9728edd":"#dflearn = dflearn.drop([\"index\"],axis =1)\ndflearn.reset_index(inplace = True)","2294709d":"dflearn = dflearn.drop(\"index\",axis = 1)","eb7fd5fc":"dflearn","3d9ff0b4":"corr = dflearn.corr()\ncorr.style.background_gradient(cmap='coolwarm')","7b5c5871":"from sklearn import linear_model\nfrom sklearn.linear_model import Ridge\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import Ridge\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error,r2_score","130e8bf5":"y = dflearn[['price']]\nX = dflearn.drop(columns=['price'])\nXtrain, Xtest, ytrain, ytest = train_test_split(X,y, test_size=0.25,random_state = 42)","6a1c811e":"regr= linear_model.LinearRegression()\nrr  = Ridge(alpha=2)\nrfr = RandomForestRegressor(max_depth=2, random_state=3,n_estimators = 1000)\n#svr = SVR(epsilon=0.2)\ngbr = GradientBoostingRegressor(random_state=0)\nxgb = XGBRegressor(random_state=0)\nmlp = MLPRegressor()\ndtr = DecisionTreeRegressor()","14512c9d":"regr.fit(Xtrain, ytrain)\nrr.fit(Xtrain, ytrain)\nrfr.fit(Xtrain, ytrain)\n#svr.fit(Xtrain, ytrain)\nxgb.fit(Xtrain, ytrain)\nmlp.fit(Xtrain, ytrain)\ndtr.fit(Xtrain, ytrain)","6a74be47":"gbr.fit(Xtrain, ytrain)","71651520":"ypred0 = regr.predict(Xtest)\nypred1 = rr.predict(Xtest)\nypred2 = rfr.predict(Xtest)\n#ypred3 = svr.predict(Xtest)\nypred4 = xgb.predict(Xtest)\nypred5 = gbr.predict(Xtest)\nypred6 = mlp.predict(Xtest)\nypred7 = dtr.predict(Xtest)","74bb6d8e":"rmse0 = mean_squared_error(ytest, ypred0)\nrmse1 = mean_squared_error(ytest, ypred1)\nrmse2 = mean_squared_error(ytest, ypred2)\n#rmse3 = mean_squared_error(ytest, ypred3)\nrmse4 = mean_squared_error(ytest, ypred4)\nrmse5 = mean_squared_error(ytest, ypred5)\nrmse6 = mean_squared_error(ytest, ypred6)\nrmse7 = mean_squared_error(ytest, ypred7)\nrmse0 ,rmse1, rmse2,rmse4, rmse5,rmse6,rmse7\n","beb42b4e":"r20 = r2_score(ytest, ypred0)\nr21 = r2_score(ytest, ypred1)\nr22 = r2_score(ytest, ypred2)\n#r23 = r2_score(ytest, ypred3)\nr24 = r2_score(ytest, ypred4)\nr25 = r2_score(ytest, ypred5)\nr26 = r2_score(ytest, ypred6)\nr27 = r2_score(ytest, ypred7)\n\nr20 ,r21 ,r22 ,r24,r25,r26,r27\n","531f810d":"#Stacking Regressi\ny = dflearn[['price']]\nX = dflearn.drop(columns=['price'])\nXtrain, Xtest, ytrain, ytest = train_test_split(X,y, test_size=0.25,random_state = 42)\nXtrain, xval, ytrain, yval = train_test_split(Xtrain,ytrain, test_size=0.25,random_state = 42)","8563ba4d":"regr.fit(Xtrain, ytrain)\nrr.fit(Xtrain, ytrain)\nrfr.fit(Xtrain, ytrain)\n#svr.fit(Xtrain, ytrain)\ngbr.fit(Xtrain, ytrain)\nxgb.fit(Xtrain, ytrain)\nmlp.fit(Xtrain, ytrain)\ndtr.fit(Xtrain, ytrain)","389defd5":"ypred0val = regr.predict(xval)\nypred1val = rr.predict(xval)\nypred2val = rfr.predict(xval)\n#ypred3val = svr.predict(xval)\nypred4val = gbr.predict(xval)\nypred5val = xgb.predict(xval)\nypred6val = mlp.predict(xval)\nypred7val = dtr.predict(xval)\n","0ca59c76":"ypred0test = regr.predict(Xtest)\nypred1test = rr.predict(Xtest)\nypred2test = rfr.predict(Xtest)\n#ypred3test = svr.predict(Xtest)\nypred4test = gbr.predict(Xtest)\nypred5test = xgb.predict(Xtest)\nypred6test = mlp.predict(Xtest)\nypred7test = dtr.predict(Xtest)","4fcf1257":"dfresult_val = pd.DataFrame(data=ypred0val,columns = ['linear'])\ndfresult_val['ridge'] = ypred1val\ndfresult_val['ftr']=ypred2val\n#dfresult_val['svr'] = ypred3val\ndfresult_val['gb']  = ypred4val\ndfresult_val['xgb'] = ypred5val\ndfresult_val['mlp'] = ypred6val\ndfresult_val['dtr'] = ypred7val\ndfresult_val['target'] = yval.values\ndfresult_val.head()","81436895":"dfresult_test = pd.DataFrame(data=ypred0test,columns = ['linear'])\ndfresult_test['ridge'] = ypred1test\ndfresult_test['ftr'] =ypred2test\n#dfresult_test['svr'] = ypred3test\ndfresult_test['gb']  = ypred4test\ndfresult_test['xgb'] = ypred5test\ndfresult_test['mlp'] = ypred6test\ndfresult_test['dtr'] = ypred7test\ndfresult_test['target'] = ytest.values\ndfresult_test.head()","46eab197":"ytrain_st =dfresult_val['target']\nXtrain_st =dfresult_val.drop(columns=['target'])\n\nytest_st = dfresult_test['target']\nXtest_st = dfresult_test.drop(columns=['target'])\n","12571dfa":"regr.fit(Xtrain_st, ytrain_st)\nypred_st0 = regr.predict(Xtest_st)\nprint(r2_score(ytest, ypred_st0))\nprint(mean_squared_error(ytest, ypred_st0))","bc05b231":"rr.fit(Xtrain_st, ytrain_st)\nypred_st1 = rr.predict(Xtest_st)\nprint(r2_score(ytest, ypred_st1))\nprint(mean_squared_error(ytest, ypred_st1))","ffd2d7d2":"rfr.fit(Xtrain_st, ytrain_st)\nypred_st2 = rfr.predict(Xtest_st)\nprint(r2_score(ytest, ypred_st2))\nprint(mean_squared_error(ytest, ypred_st2))","bffd22fd":"#svr.fit(Xtrain_st, ytrain_st)\n#ypred_st3 = svr.predict(Xtest_st)\n#print(r2_score(ytest, ypred_st3))\n#print(mean_squared_error(ytest, ypred_st3))","25d7fb3c":"gbr.fit(Xtrain_st, ytrain_st)\nypred_st4 = gbr.predict(Xtest_st)\nprint(r2_score(ytest, ypred_st4))\nprint(mean_squared_error(ytest, ypred_st4))","9b8b75fa":"xgb.fit(Xtrain_st, ytrain_st)\nypred_st5 = xgb.predict(Xtest_st)\nprint(r2_score(ytest, ypred_st5))\nprint(mean_squared_error(ytest, ypred_st5))","13e67595":"mlp.fit(Xtrain_st, ytrain_st)\nypred_st6 = mlp.predict(Xtest_st)\nprint(r2_score(ytest, ypred_st6))\nprint(mean_squared_error(ytest, ypred_st6))","4ac75ac1":"dtr.fit(Xtrain_st, ytrain_st)\nypred_st7 = dtr.predict(Xtest_st)\nprint(r2_score(ytest, ypred_st7))\nprint(mean_squared_error(ytest, ypred_st7))","c731d22f":"# modeling","a12e32dc":"train test split","cae20280":"==================================================="}}