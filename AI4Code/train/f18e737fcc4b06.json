{"cell_type":{"0e5bf142":"code","8c00f33f":"code","a7016f19":"code","f87a9f7e":"code","3d09a470":"code","8490d3f7":"code","37cb5dcd":"code","f21252db":"code","30fc2722":"code","1ea54470":"code","1ffe609e":"code","a3617a5a":"code","479e5db8":"code","30b3226b":"code","7381b837":"code","50559c44":"code","9011b817":"code","a6b3be1e":"code","578084fb":"code","4b523b6e":"code","990d2b7d":"code","2cc99398":"code","1faba44e":"code","b5893eda":"code","0f24e3a3":"code","a83d3331":"code","affdf492":"markdown","c6285802":"markdown","93250c18":"markdown","e52b62dc":"markdown","8cb708a2":"markdown","f8c1f16b":"markdown","a9bb5328":"markdown","4d2dc615":"markdown","61a4ceda":"markdown","ae40d627":"markdown"},"source":{"0e5bf142":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom collections import Counter\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8c00f33f":"train_datas = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_datas = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\n","a7016f19":"train_datas.columns","f87a9f7e":"train_datas.head()","3d09a470":"train_datas.describe()","8490d3f7":"test_datas.head()","37cb5dcd":"test_datas.describe()","f21252db":"train_datas.info()","30fc2722":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_datas[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n    ","1ea54470":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","1ffe609e":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_datas[c].value_counts()))","a3617a5a":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_datas[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","479e5db8":"numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","30b3226b":"# Plcass vs Survived\ntrain_datas[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","7381b837":"# Sex vs Survived\ntrain_datas[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","50559c44":"# SibSp vs Survived\ntrain_datas[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","9011b817":"# SibSp vs Survived\ntrain_datas[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","a6b3be1e":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","578084fb":"train_datas.loc[detect_outliers(train_datas,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","4b523b6e":"# drop outliers\ntrain_datas = train_datas.drop(detect_outliers(train_datas,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","990d2b7d":"train_datas[train_datas[\"Embarked\"].isnull()]","2cc99398":"train_datas.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","1faba44e":"train_datas[\"Embarked\"] = train_datas[\"Embarked\"].fillna(\"C\")\ntrain_datas[train_datas[\"Embarked\"].isnull()]","b5893eda":"train_datas[train_datas[\"Fare\"].isnull()]","0f24e3a3":"train_datas[\"Fare\"] = train_datas[\"Fare\"].fillna(np.mean(train_datas[train_datas[\"Pclass\"] == 3][\"Fare\"]))","a83d3331":"train_datas[train_datas[\"Fare\"].isnull()]","affdf492":"## Outlier Detection","c6285802":"## Catorical Variable","93250c18":"## Numeric Variable","e52b62dc":"# Variable Description","8cb708a2":"# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","f8c1f16b":"* float64 : Age, Fare\n* object : Cabin, embarked, ticket, name and sex\n\n* int64 : Pclass, sibsp, parch, passengerId and survived\n","a9bb5328":"# Introduction\n\nThe sinking of Titanic is one of the terrible accident in the sea story. We will compare statistics datas about Ticanic crew and passengers\n\n<font color = \"blue\">\nContent :\n    \n    1.Load Datas","4d2dc615":"1. PassengerId\n2. Survived\n3. Pclass \n4. Name\n5. Sex\n6. Age\n7. SibSp\n8. Parch\n9. Ticket\n10. Fare\n11. Cabin\n12. Embarked","61a4ceda":"# Load Datas","ae40d627":"\n# Missing Value\u00b6\n* Find Missing Value\n* Fill Missing Value"}}