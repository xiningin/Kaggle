{"cell_type":{"e86f51ba":"code","97447351":"code","66a0123a":"code","5a1528d1":"code","091e5361":"code","ba72fc63":"code","f217a60a":"code","4f294c27":"code","e0e692b8":"code","f888a29c":"code","3128e128":"code","32c3bdfa":"code","16d2d6ea":"code","9988a8bf":"markdown","4829b462":"markdown","5f135b50":"markdown","6c81d6c4":"markdown","3cf2b9c6":"markdown"},"source":{"e86f51ba":"import numpy as np \nimport pandas as pd\nimport os\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler","97447351":"train = pd.read_csv('..\/input\/learn-together\/train.csv')\ntest = pd.read_csv('..\/input\/learn-together\/test.csv')","66a0123a":"train.head()","5a1528d1":"# check for missing values\nprint(train.isna().sum())","091e5361":"y_train_copy = train['Cover_Type']\nx_train_copy = train.drop(['Id', 'Cover_Type'], axis=1)\nx_test = test.drop(['Id'], axis=1)\n\nprint(x_train_copy.shape)","ba72fc63":"# create train and validation set\nx_train, x_val, y_train, y_val = train_test_split(x_train_copy, y_train_copy, train_size=0.8)","f217a60a":"print(x_train.shape)\nprint(x_val.shape)","4f294c27":"np.random.seed(42)","e0e692b8":"from sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(n_estimators=500)","f888a29c":"clf = clf.fit(x_train, y_train)","3128e128":"y_preds = clf.predict(x_val)\nprint(accuracy_score(y_val, y_preds))","32c3bdfa":"predictions = clf.predict(x_test)","16d2d6ea":"submission_df = pd.DataFrame({'ID': test['Id'],\n                       'Cover_Type': predictions})\nsubmission_df.to_csv('submission.csv', index=False)","9988a8bf":"## Prepare Train and Test Data","4829b462":"## Random Forest Classifier","5f135b50":"## Load Data","6c81d6c4":"## Submission","3cf2b9c6":"## Analyze the Data"}}