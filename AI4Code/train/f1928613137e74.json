{"cell_type":{"46623e77":"code","ccfba358":"code","9f5566cc":"code","dd715e0a":"code","b31dbbcb":"code","a39f747a":"code","ba0239a7":"code","7ee74ca0":"code","76193c8b":"code","d514f093":"code","ee78e6f3":"code","19be140e":"code","ba8b58c7":"code","674a095f":"code","de71f667":"code","faa1cb68":"code","369ff91a":"code","ade6956d":"code","38fd7ce9":"code","5b895862":"code","e568203d":"code","f4c3a420":"code","474b5c39":"code","2044caf7":"code","a5c192d0":"code","9181ef99":"code","e973cd00":"code","1a951318":"code","51434fd4":"code","ed6d0dc5":"code","95845751":"code","d16b66ef":"code","6876a36c":"code","e12e1a0f":"code","7ef9de03":"code","a5ffb5e4":"code","0dee0468":"code","68ab45b9":"code","b5b36c98":"code","f1f697ca":"code","c9cb17aa":"code","5670c908":"code","6619626d":"code","7c2bc6e5":"code","8f3e2ef9":"code","59a6d3e8":"code","1d36b482":"code","71142676":"code","98326c54":"code","6195cf2b":"code","b97e2aad":"code","21340f52":"code","b74757f7":"code","5c08106e":"code","453bbd16":"markdown","a052e666":"markdown","ca2a5e3b":"markdown","52f5f6ec":"markdown","39dcdf6c":"markdown","d772628c":"markdown","eff0d4f1":"markdown","59a1adff":"markdown","a5378ea0":"markdown","cee63374":"markdown","8e7ca85a":"markdown","a5cc47f7":"markdown","c1f032ec":"markdown","f184d2f8":"markdown","4bf7e2eb":"markdown","ba845f87":"markdown","6feb00d7":"markdown","16db103e":"markdown","9cedcca1":"markdown","ec613e62":"markdown","7f9f2a5e":"markdown","c75eaa91":"markdown","a06cfe1b":"markdown","90fd2468":"markdown","d6e0841f":"markdown","aae8c83f":"markdown","22b4b610":"markdown","27f14805":"markdown"},"source":{"46623e77":"import numpy as np\r\nimport pandas as pd\r\nfrom matplotlib import pyplot as plt\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\nimport seaborn as sns\r\nsns.set_theme()\r\nfrom sklearn.model_selection import cross_val_score\r\nfrom sklearn.metrics import accuracy_score\r\nfrom sklearn.preprocessing import MinMaxScaler\r\nimport warnings\r\nfrom sklearn.impute import SimpleImputer","ccfba358":"df = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/train_data.csv\", sep=r'\\s*,\\s*',  engine='python')\r","9f5566cc":"df_TESTE = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/test_data.csv\", sep=r'\\s*,\\s*', engine='python')","dd715e0a":"df.head()","b31dbbcb":"print(\"No dataframe existem cerca de {} caracteres especiais, \u00e9 necess\u00e1rio retir\u00e1-los antes a modelagem\".format(df.isin(['?']).sum().sum()))","a39f747a":"#Tratando os caracteres especiais: \r\n\r\ndf.replace(to_replace='?',value= np.nan,inplace=True)\r\n\r\nprint(\"Ap\u00f3s o tratamento existem cerca de {} caracteres especiais\".format(df.isin(['?']).sum().sum()))","ba0239a7":"df.isna().sum()","7ee74ca0":"imputer = SimpleImputer(strategy='most_frequent')\r\n\r\ndf[['workclass', 'occupation']]= pd.DataFrame(imputer.fit_transform(df[['workclass', 'occupation']]))","76193c8b":"# Quais s\u00e3o os tipos das colunas do dataframe\r\n\r\ndf.info()","d514f093":"# Fazendo as estat\u00edsticas descritivas dos dados\r\n\r\ndf.describe()","ee78e6f3":"df.head()","19be140e":"df_TESTE.replace(to_replace='?',value= np.nan,inplace=True)","ba8b58c7":"print(\"O dataset possui {} valores vazios que representa cerca de {} % dos dados\".format(df_TESTE.isna().sum().sum(), (df_TESTE.isna().sum().sum()\/(df_TESTE.shape[0]*df_TESTE.shape[1]))*100))","674a095f":"df_TESTE[['workclass','occupation']] = pd.DataFrame(imputer.fit_transform(df_TESTE[['workclass', 'occupation']]))","de71f667":"df_TESTE.head()","faa1cb68":"#Criando um dataframe para explora\u00e7\u00e3o\r\n\r\ndf_explore = df.copy(deep=True)\r\n\r\ndf_explore=df.drop(columns=[\"income\"])\r\n\r\ndf_explore[\"Target\"] = [0 if s ==\"<=50K\" else 1 for s in df.income ]\r\n\r\ndf_explore.head()","369ff91a":"plt.figure(figsize=(25,5))\r\nplt.subplot(1,1,1)\r\nsns.distplot(df.age)\r\nwarnings.filterwarnings('ignore')\r\n","ade6956d":"# Realizando o agrupamento da idade, considerando os quartis para constru\u00e7\u00e3o dos grupos\r\n\r\nbins= [17, 28, 37, 47, 90]\r\nlabel= [\"17 a 27 anos\", \" 28 a 37 anos\", \"37 a 48 anos\", \"48 ou mais\"] \r\ndf_explore['age_categorized'] = pd.cut(df_explore.age, bins=bins, labels= label)","38fd7ce9":"plt.figure(figsize=(15,5))\r\nplt.subplot(1,2,1)\r\nsns.barplot(x=df_explore.age_categorized, y=df_explore.Target)\r\nplt.xlabel(\"Faixa Et\u00e1ria\")\r\nplt.subplot(1,2,2)\r\nsns.countplot(x=df_explore.age_categorized, hue=df_explore.Target)\r\nplt.xlabel(\"Faixa Et\u00e1ria\")\r\nplt.show()","5b895862":"#Criando uma tabela que mostra as porcentagens de pessoas que ganham <=50k e >50k considerando cada faixa et\u00e1ria. \r\nround(pd.crosstab(df_explore.age_categorized, df_explore.Target, margins=True, margins_name='Total', normalize='columns')*100, 3)","e568203d":"plt.figure(figsize=(15,10))\r\nplt.subplot(2,1,1)\r\nsns.barplot(x=df_explore.race, y=df_explore.Target)\r\nplt.xlabel(\"Ra\u00e7a\")\r\nplt.subplot(2,1,2)\r\nsns.countplot(x=df_explore.race, hue=df_explore.Target)\r\nplt.xlabel(\"Ra\u00e7a\")\r\nplt.show()","f4c3a420":"pd.crosstab(df_explore.race, df_explore.Target, margins=True, margins_name=\"Total\", normalize='columns' )*100","474b5c39":"plt.figure(figsize=(15,10))\r\nplt.subplot(2,1,1)\r\nsns.barplot(x=df_explore.workclass, y=df_explore.Target)\r\nplt.subplot(2,1,2)\r\nsns.countplot(x=df_explore.workclass, hue=df_explore.Target)\r\nplt.show()","2044caf7":"plt.figure(figsize=(20,10))\r\nplt.subplot(2,1,1)\r\nsns.countplot(x=df_explore.education, hue=df_explore.Target)\r\nplt.subplot(2,1,2)\r\nsns.barplot(x=df_explore.education, y=df_explore.Target)\r\nplt.show()","a5c192d0":"#Criando uma tabela que mostra as porcentagens de pessoas que ganham <=50k e >50k considerando Education.\r\nround(pd.crosstab(df_explore.education, df_explore.Target, margins=True, margins_name='Total', normalize='columns')*100,3).sort_values(by='Total', ascending=False)","9181ef99":"plt.figure(figsize=(20,10))\r\nplt.subplot(2,1,1)\r\nsns.countplot(x=df_explore[\"marital.status\"], hue=df_explore.Target)\r\nplt.subplot(2,1,2)\r\nsns.barplot(x=df_explore[\"marital.status\"], y=df_explore.Target)\r\nplt.show()","e973cd00":"#Criando uma tabela que mostra as porcentagens de pessoas que ganham <=50k e >50k considerando Marital status. \r\nround(pd.crosstab(df_explore[\"marital.status\"], df_explore.Target, margins=True, margins_name=\"Total\", normalize='columns'),3)","1a951318":"plt.figure(figsize=(22,10))\r\nplt.subplot(2,1,1)\r\nsns.countplot(x=df_explore.occupation, hue=df_explore.Target)\r\nplt.subplot(2,1,2)\r\nsns.barplot(x=df_explore.occupation, y=df_explore.Target, estimator=np.mean)\r\nplt.show()","51434fd4":"#Criando uma tabela que mostra as porcentagens de pessoas que ganham <=50k e >50k considerando cada occupation. \r\nround(pd.crosstab(df_explore.occupation, df_explore.Target, margins=True, margins_name=\"Total\", normalize='columns')*100,3).sort_values(by='Total', ascending=False)","ed6d0dc5":"plt.figure(figsize=(20,10))\r\nplt.subplot(2,1,1)\r\nsns.countplot(x=df_explore.relationship, hue=df_explore.Target)\r\nplt.subplot(2,1,2)\r\nsns.barplot(x=df_explore.relationship, y=df_explore.Target)\r\nplt.show()","95845751":"#Criando uma tabela que mostra as porcentagens de pessoas que ganham <=50k e >50k considerando cada tipo de relationship. \r\nround(pd.crosstab(df_explore.relationship, df_explore.Target, margins=True, margins_name='Total', normalize='columns')*100,3).sort_values(by='Total', ascending=False)","d16b66ef":"plt.figure(figsize=(20,10))\r\nplt.subplot(2,1,1)\r\nsns.countplot(x=df_explore.sex, hue=df_explore.Target)\r\nplt.subplot(2,1,2)\r\nsns.barplot(x=df_explore.sex, y=df_explore.Target)\r\nplt.show()","6876a36c":"#Criando uma tabela que mostra as porcentagens de pessoas que ganham <=50k e >50k considerando o sexo. \r\nround(pd.crosstab(df_explore.sex, df_explore.Target, margins=True, margins_name='Total', normalize='columns')*100,3)","e12e1a0f":"plt.figure(figsize=(10,15))\r\nplt.subplot(2,1,1)\r\nsns.barplot(df_explore.Target,df_explore['native.country'])\r\n","7ef9de03":"#Criando uma tabela que mostra as porcentagens de pessoas que ganham <=50k e >50k considerando cada pa\u00eds. \r\nround(pd.crosstab(df_explore[\"native.country\"], df_explore.Target, margins=True, margins_name='Total', normalize='columns')*100,3).sort_values(by='Total',\r\nascending = False)","a5ffb5e4":"var_num = ['education.num','capital.gain', 'capital.loss', 'hours.per.week']\r\n\r\nplt.figure(figsize=(25,15))\r\n\r\ni = 0\r\nfor feature in var_num:\r\n    i=i+1\r\n    plt.subplot(3,2,i)\r\n    sns.distplot(df_explore[feature])\r\n    plt.xlabel(feature)\r\n    warnings.filterwarnings('ignore')\r\nplt.show()\r\n\r\n","0dee0468":"plt.figure(figsize=(15,5))\r\nsns.heatmap(df_explore[['education.num','capital.gain', 'capital.loss', 'hours.per.week', 'age']].corr(), vmin=-1, vmax=1, annot=True)","68ab45b9":"#Utilizando o m\u00e9todo dummies para as vari\u00e1veis categ\u00f3ricas\r\n\r\nX_1 =pd.get_dummies(df.drop(columns=['Id', 'fnlwgt', \"income\", 'native.country', 'education.num']))\r\nY_1 = df.income\r\n\r\nX_1.shape","b5b36c98":"N=20\r\nmodel = KNeighborsClassifier(n_neighbors=N, metric='euclidean')\r\nmodel.fit(X_1,Y_1)","f1f697ca":"accuracy_score(model.predict(X_1), Y_1)","c9cb17aa":"media_knn_1 = cross_val_score(model, X_1, Y_1, cv=10)","5670c908":"print(\"O score obtido pelo KNN foi de {} para um k = {} e aplicando cross-validation\".format(media_knn_1.mean(), N))","6619626d":"scaler = MinMaxScaler()","7c2bc6e5":"var_num = ['capital.gain', 'capital.loss', 'hours.per.week', 'age']\r\n\r\nx_2 = scaler.fit_transform(X = [df[\"capital.gain\"], df[\"capital.loss\"], df[\"hours.per.week\"], df[\"age\"]] )\r\n\r\ndf_scaled = pd.DataFrame(x_2.transpose(), columns=var_num)","8f3e2ef9":"X_2 =pd.get_dummies(df.drop(columns=[ 'Id', 'fnlwgt', \"income\", 'native.country', 'education.num',  'capital.gain', 'capital.loss', 'hours.per.week', 'age']))\r\n\r\nX_2.reset_index(inplace=True)\r\n\r\nX_2.drop(columns=['index'], inplace=True)\r\n\r\nX_2[['capital.gain', 'capital.loss', 'hours.per.week', 'age']] = df_scaled[['capital.gain', 'capital.loss', 'hours.per.week', 'age']] \r\n\r\nY_2 = df.income\r\n\r\n# x_treino_2, x_teste_2, y_treino_2, y_teste_2 = train_test_split(X_2,Y_2,random_state=0, test_size=.2)","59a6d3e8":"N=30\r\nmodel_2 = KNeighborsClassifier(n_neighbors=N, metric='euclidean')\r\nmodel_2.fit(X_2,Y_2)","1d36b482":"accuracy_score(model_2.predict(X_2), Y_2)","71142676":"media_knn_2 = cross_val_score(model_2, X_2, Y_2, cv=10)","98326c54":"print(\"O score obtido pelo KNN foi de {} para um k = {} e aplicando cross-validation\".format(media_knn_2.mean(), N))","6195cf2b":"X_TESTE = pd.get_dummies(df_TESTE.drop(columns=['Id','fnlwgt', 'native.country', 'education.num']))\r\n\r\n","b97e2aad":"X_TESTE.shape, X_1.shape","21340f52":"\r\npredicted = pd.DataFrame(model.predict(X_TESTE), df_TESTE['Id'], columns=['income'])","b74757f7":"predicted.head()","5c08106e":"predicted.to_csv('Submission.csv', index=True, index_label='Id')","453bbd16":"## Workclass","a052e666":"Do gr\u00e1fico e da tabela percebe-se que o dataset \u00e9 composto majoritariamente por brancos, evidenciando assim uma desigualdade entre ra\u00e7as no quesito sal\u00e1rio. Al\u00e9m disso, pessoas pertencentes as categorias \"Black\", \"Asia-Pac-Islander\" e \"White\" possuem mais chances de terem renda maior que 50 mil. ","ca2a5e3b":"## Native country \r\n","52f5f6ec":"Do gr\u00e1fico e da tabela percebe-se a tend\u00eancia de que quanto maior a faixa et\u00e1ria, mais pessoas possuem renda maior que 50 mil  \r\n","39dcdf6c":"Dos gr\u00e1ficos infere-se que as pessoas das categorias \"Federal-gov\", \"Self-emp-inc\" e \"Self-emp-not-inc\" possuem mais chances de terem uma renda maior que 50 mil.","d772628c":"Da tabela e dos gr\u00e1ficos infere-se que as pessoas das categorias \"Married-civ-spouse\" possui mais chances de terem uma renda maior que 50 mil. Do gr\u00e1fico evidenciamos que a categoria \"Married-AF-spouse\" tamb\u00e9m tem chances altas, no entanto esse categoria possui poucos dados o que faz com que o erro padr\u00e3o seja alto e n\u00e3o represente a popula\u00e7\u00e3o.","eff0d4f1":"# Importando os dados\r\n","59a1adff":"Da tabela e dos gr\u00e1ficos infere-se que as pessoas das categorias \"Prof-school\", \"Doctorate\", \"Masters\" e \"Bachelors\" possuem mais chances de terem uma renda maior que 50 mil.","a5378ea0":"## Race","cee63374":"## 2) Teste - Normalizando as vari\u00e1veis num\u00e9ricas e considerando K = 30","8e7ca85a":"Do gr\u00e1fico e da tabela percebemos a quantidade superior de indiv\u00edduos americanos, representando cerca de aproximadamente 91%. O segundo pa\u00eds mais populoso representa 2%. Por conta disso, essa vari\u00e1vel n\u00e3o \u00e9 significante para o modelo.","a5cc47f7":"Da tabela e dos gr\u00e1ficos infere-se que as pessoas das categorias \"Exec-Managerial\" e \"Prof-specialty\" possuem mais chances de terem uma renda maior que 50 mil. No caso da categoria \"Armed-Froces\" possuimos poucos dados implicando num erro padr\u00e3o maior e, portanto, n\u00e3o representa bem a popula\u00e7\u00e3o.","c1f032ec":"# An\u00e1lise Explorat\u00f3ria da base de TREINO, considerando <=50k como 0 e >50k como 1","f184d2f8":"## TESTE","4bf7e2eb":"## Occupation","ba845f87":"Dos gr\u00e1ficos infere-se que h\u00e1 uma desigualdade de g\u00eanero com rela\u00e7\u00e3o ao sal\u00e1rio, ou seja, existem mais homens que ganham mais de 50k do que mulheres.","6feb00d7":"## Relationship","16db103e":"# Como o teste 1) apresentou um score maior usaremos ele para o DataFrame de teste","9cedcca1":"# Implementando o modelo","ec613e62":"## 1) Sem normalizar as vari\u00e1veis num\u00e9ricas e considerando k=20","7f9f2a5e":"## Marital status","c75eaa91":"## Education","a06cfe1b":"# An\u00e1lise inicial do DataFrame","90fd2468":"## Vari\u00e1veis Num\u00e9ricas","d6e0841f":"## Age","aae8c83f":"# Importando as bibliotecas","22b4b610":"## Sex","27f14805":"## TREINO"}}