{"cell_type":{"0f644d17":"code","f08e0cce":"code","2e776946":"code","d2e2067d":"code","db645f43":"code","6da125e8":"code","57a9d331":"code","8b287ccc":"code","001ae029":"code","4d6ca154":"code","cc6a5256":"code","b2ad4db8":"code","5ba52313":"markdown","95abef22":"markdown","e17c037f":"markdown","d1749acf":"markdown","97912bbf":"markdown","8c29b3d9":"markdown","df5386cd":"markdown","b7bf28c6":"markdown","6eacb22e":"markdown","67f3da42":"markdown","83b22a6a":"markdown","9887bb1a":"markdown"},"source":{"0f644d17":"citytracker = {'Atlanta': 486290, 'Boston': 685094, 'Chicago': 2749360, 'Denver': 619968, 'Seattle': 724725}\nprint('There are',citytracker['Chicago'],'residents in Chicago') # Printing the value of current population of Chicago","f08e0cce":"citytracker['Seattle'] = citytracker['Seattle'] + 17500 # Incrementing the Seattle population \nprint('Number of residents in Seattle =',citytracker['Seattle']) #Printing the final value","2e776946":"citytracker['Los Angeles'] = 45000 #Adding new key value to dictionary\nprint(citytracker.keys()) #Printing new set of keys\nprint('Value associated with key \\'Los Angeles\\' =',citytracker['Los Angeles']) #Printing value associated with LA","d2e2067d":"X = citytracker['Denver'] #Retrieving Denver population\nnew_string = 'Denver:' + str(X) #Creating string Denver:X\nprint('The new string is \u2013', new_string) #Printing new string","db645f43":"for city in citytracker.keys(): #Looping the keys and storing them in city\n    print(city) # Printing each city","6da125e8":"for city in citytracker.keys(): #Looping the keys and storing them in city\n    print(city,':', citytracker[city]) # Printing each city with number residents","57a9d331":"citylist = [] # Creating an empty list to store all cities\nfor city in citytracker.keys(): \n    citylist.append(city) \n\n# Looking for New York in city list\nif 'New York' in citylist:\n    print('New York:', citytracker['New York']) \nelse:\n    print('Sorry, that is not in the City Tracker') \n\n# Looking for Atlanta in city list\nif 'Atlanta' in citylist:\n    print('Atlanta:', citytracker['Atlanta']) \n\n# Printing the required text the searched cities yielded false \nelse:\n    print('Sorry, that is not in the City Tracker') \n\n    ","8b287ccc":"potentialcities = ['Cleveland','Phoenix','Nashville','Philadelphia','Milwaukee']\n\nprint('Existing cities:', citytracker.keys()) #Printing the existing cities\nprint('Potential cities:', potentialcities) #Printing the potential cities\n\nfor city in citytracker.keys(): #Looping the existing dictionary\n    if city in potentialcities: #Checking if potential city is in the existing dictionary\n        print(city, ':', citytracker[city])\n    else:\n        print(0) #Printing 0 if potential city isn't in the existing dictionary\n                ","001ae029":"print(\"Printing comma separated key:value\")\nfor city in citytracker.keys(): #Looping the keys and storing them in city\n    print(f\"{city},{citytracker[city]}\") # Printing comma separated key-value pairs","4d6ca154":"import os\n\n### This will print out the list of files in your \/working directory to confirm you wrote the file.\n### You can also examine the right sidebar to see your file.\n\nfor dirname, _, filenames in os.walk('\/kaggle\/working'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\nimport csv #importing csv to create an csv outfile\n\nwith open('popreport.csv', 'w') as csvfile: #opening csv in write mode\n    filewriter = csv.writer(csvfile, delimiter=',',\n                            quotechar='|', quoting=csv.QUOTE_MINIMAL) #handle to create a comma-separated writer\n    filewriter.writerow(['city','pop'])#header to row describe each column, labeled as \"city\" and \"pop\"\n    for city in citytracker.keys():\n        filewriter.writerow([city,citytracker[city]]) #storing all the city and residents value in the csv file\n\n","cc6a5256":"pip install opencage","b2ad4db8":"import urllib.error, urllib.parse, urllib.request, json, datetime\n\n# This code retrieves your key from your Kaggle Secret Keys file\nfrom kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"coordinates\") #replace \"openCageKey\" with the key name you created!\nsecret_value_1 = user_secrets.get_secret(\"weather\") #replace \"openweathermap\" with the key name you created!\n\nfrom opencage.geocoder import OpenCageGeocode\n\ngeocoder = OpenCageGeocode(secret_value_0)\nnewdict = {} #Creating a new dictionary\nprint(\"------Printing longitude and latitude values for cites in city tracker-------- \")\nfor key, val in citytracker.items(): #Cities from the names in the citytracker dictionary\n    query = key\n    results = geocoder.geocode(query)\n    lat = str(results[0]['geometry']['lat'])\n    lng = str(results[0]['geometry']['lng'])\n    print (f\"{query} is located at:\")\n    print (f\"Lat: {lat}, Lon: {lng}\")\n    newdict[key] = [val,[lat,lng]] #Storing population, longitude and lattitude data \n\n\n\ndef safeGet(url): #Error handling\n    try:\n        return urllib.request.urlopen(url)\n    except urllib2.error.URLError as e:\n        if hasattr(e,\"code\"):\n            print(\"The server couldn't fulfill the request.\")\n            print(\"Error code: \", e.code)\n        elif hasattr(e,'reason'):\n            print(\"We failed to reach a server\")\n            print(\"Reason: \", e.reason)\n        return None\n\n    \ndef getForecast(city=\"Seattle\"):#Defaulting the function to 'Seattle'if no city value is passed\n    key = secret_value_1\n    if city == \"Los Angeles\": #hardcoding LA as the URL was breaking due to the space between Los and Angeles\n        url = \"https:\/\/api.openweathermap.org\/data\/2.5\/weather?q=Los%20Angeles&appid=\"+key\n        print(url)\n    else:\n        url = \"https:\/\/api.openweathermap.org\/data\/2.5\/weather?q=\"+city+\"&appid=\"+key\n        #printing json url\n        print(url)\n    return safeGet(url)\n\nprint(\"------Printing weather in cites in city tracker-------- \")\nfor city in citytracker.keys(): \n    data = json.load(getForecast(city)) #Passing the cities from the citytracker dictionary to get forecast function\n    #print(data)\n    weather = data['weather'][0]['description']\n    temperature = (data['main']['temp'] - 273.15) * 9\/5 + 32\n    humidity = data['main']['humidity']\n    wind = data['wind']['speed']\n    current_time = datetime.datetime.now() #Printing the current time\n    print(f\"The current weather in {city} is: {data['weather'][0]['description']}\") #Printing the current weather\n    print(f\"The current temperature in {city} is: {temperature}\") #Printing the current temperature\n    print(f\"The current humidity in {city} is: {data['main']['humidity']}\") #Printing the current humidity\n    print(f\"The current wind speed in {city} is: {data['wind']['speed']}\") #Printing the current wind speed\n    print(\"Retrieved at: %s\" %current_time)\n   \n    newdict[city].append([weather,temperature,humidity,wind]) #Storing weather details in new dictionary\n\nprint(\"-----------New Dictionary-------------\")\nprint(newdict) #Checking out the new dictionary with additional info\n                    \n\nwith open('newdict.json', 'w') as outfile: #Saving the json data to an outfile\n    json.dump(newdict,outfile)\n    \n\n\nprint(\"DONE!!\")\n    ","5ba52313":"### Step 5: Iterating over keys in a dictionary.  \n\nWrite code that prints each city (key), one line at a time, using a for loop.","95abef22":"### Step 9: Printing comma separated data from a dictionary.\n\nYou may have worked with comma separated values before: they are basically spreadsheets or tables represented as plain text files, with each row represented on a new line and each cell divided by a comma. Print out the keys and values of the dictionary stored in `citytracker`. The keys and values you print should be separated only by commas (there should be no spaces). Print each `key:value` pair on a different line. *Hint: this is almost identical to Step 6*","e17c037f":"## A4: Manipulating Data\nThis assignment is focused on working with dictionaries and manipulating data. Follow the instructions for each step below. After each step, insert your Code Cell with your solution if necessary (in some steps there will be some code provided for you).The assignment is in two parts (A and B). Part A focuses on data manipulation and using dictionaries. Part B focuses on retrieving data to update the dictionary.\n\n### Submission\nWhen you have finished, submit this homework by sharing your Kaggle notebook. Click Commit in the upper right of your Kaggle notebook screen. Click on Open Version to view it. Make sure to set Sharing permissions to public. Then copy the URL for that version. To submit on Canvas, click Submit Assignment and paste the link into the URL submission field.","d1749acf":"### Step 10: Saving a dictionary to a CSV file\nWrite key and value pairs from `citytracker` out to a file named 'popreport.csv'. *Hint: the procedure is very close to that of Step 9.* You should also include a header to row describe each column, labeling them as \"city\" and \"pop\", and subsequent lines should contain the data. (Here is an example to refer to: https:\/\/pythonspot.com\/save-a-dictionary-to-a-file)","97912bbf":"# PART B\nIn this part, you will practice useing API keys to access geographic location and weather information for cities in the `citytracker` dictionary. You need to get the geolocation and weather for each item and store it in the same (or a new) dictionary. You then print out the data and format it to be pretty (whatever that means to you) and finally, write it out as a json file with a timestamp.\n\n**You will need to enable Internet connections in the sidebar to the right of your notebook. If you get a `Connection error` in the Console, it is because your notebook can't access the internet.**\n\nYou will access two different APIs to get this information:\n1. OpenCage (https:\/\/opencagedata.com\/api) which is a reverse-geocoding API (you provide them a location and they give your it's geo-coordinates in Lat and Lon)\n2. Openweathermap API (https:\/\/openweathermap.org\/api)\n\nNote: You can get LAT and LON from Openweathermap, but for this assignment, you should get them from OpenCage.\n\n### Step 1: Accessing APIs to retrieve data\nFirst, you will need to request an API Secret Key from OpenCage (https:\/\/opencagedata.com\/api) and add it to your Kaggle notebook in the Add-ons menu item. Once you have the Secret Key, you attach it to this notebook (click the checkbox) so you can make the API call. Make sure the **Label** for your key in your Kaggle Secrets file is what you use in your code below.\n\nYou will also an API Secret Key from OpenWeatherMapAPI (https:\/\/openweathermap.org\/api). Attach it to this notebook and use it in the code. Make sure you have created different labels for each key and use them in the code below. You can see how to make calls to the API here: https:\/\/openweathermap.org\/current\n\nFinally, make sure to install the `opencage` module in this notebook. Use the console at the bottom of the window and type `pip install opencage`. You should receive a confirmation message if it installs successfully.\n\nThen try running the code cells below to see the output. Once the code sucessfully works for Seattle (which has been provided for you below), try typing in different cities instead to see the results to make sure it is working.\n\n### Step 2: Retreiving values for each city in your dictionary\nIn the code cell below, add some code to try to get information for all of the cities in your `citytracker` dictionary. You can print the information out to make sure it is working. Store the results of `getForecast` for each city in your dictionary.\n\n### Step 3: Writing the datafile\nSave the results of your work as a JSON formatted output file in your Kaggle output folder and Commit your notebook. Make sure to make it public and submit the resulting URL in Canvas. (Hint: use the json `dumps()` method)\n","8c29b3d9":"### Step 4: Concatenating strings and integers. \n\nWrite code that creates a string that says 'Denver: X', where X is the number of residents extracted from the `citytracker` dictionary.  Print the string. Hint: you will need to use the + string concatenation operator in conjunction with str() or another string formatting instruction.","df5386cd":"### Step 3: Adding an entry to a dictionary. \n\nOur list of cities just got bigger. (What could go wrong?) Write code to insert a new key, 'Los Angeles' into the dictionary, with a value of 45000. Verify that it worked by printing out the value associated with the key 'Los Angeles'","b7bf28c6":"### Step 6: iterating over keys to access values in a dictionary. \n\nWrite code that prints each city (key), followed by a colon and the number of residents (e.g., Seattle : 724725), one line at a time using a for loop.","6eacb22e":"### Step 7: Testing membership in a dictionary.\n\nWrite code to test whether 'New York' is in the `citytracker` dictionary.  If the test yields `true`, print `New York: <x>`, where `<x>` is the current population. If the test yields false, it should print \"Sorry, that is not in the Coty Tracker. Do the same thing for the key 'Atlanta'.","67f3da42":"### Step 8: Default values\n\nWe have a list of potential cities (in the list potentialcities) and we want to check whether the city exists within the City Tracker. If it is, we want to print `city: #`, where city is the city name and # is the population. If the city is not in the dictionary, it should print zero. Add to the code below to do this. *Hint: you can use default values here to make this take less code!*\n","83b22a6a":"# PART A\n### Step 1: Accessing values at a specified key in a dictionary.\n\nWe have created a list of cities to keep track of what current populations are and potentially identify which cities are growing fastest, what the weather is like there, etc. Add code to print the number of residents in Chiago the our `citytracker` list. (the value associated with key 'Chicago' in the dictionary dinocount). Hint: this is just one simple line of code. Add the code below.","9887bb1a":"### Step 2: Incrementing the value of a dictionary at a key.\n\nWrite code to increment the number of residents in Seattle by 17,500 (that happened in one month in Summer 2018!). In other words, add 17,500 to the existing value of cities at key 'Seattle').  Then, print out the number of residents in the Seattle."}}