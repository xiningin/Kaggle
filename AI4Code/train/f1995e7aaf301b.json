{"cell_type":{"d2c1431c":"code","7e4d75ad":"code","afdcf9cb":"code","8155b597":"code","03379609":"code","4738eb66":"code","c8811c76":"code","d9a98184":"code","c32f4fd9":"code","c0b3693b":"code","2ce9f425":"code","bad80c53":"code","22a2b1a9":"code","75caa159":"code","67c8ac61":"code","4df0ef39":"code","ecb4ca4c":"code","d5e8ac6d":"code","44bcaafc":"code","3de557c3":"code","152be378":"code","e45483b7":"code","ea497511":"code","cc083743":"code","09ee668c":"code","8b0b18f8":"code","e80207dd":"code","eba37c68":"code","7585e63a":"code","b5f24990":"code","bc5e62d6":"code","39d8b5c9":"code","4732784d":"code","5f5dd93c":"code","2c11bb8b":"code","0364451b":"code","71275217":"code","48bb9717":"code","bccd9692":"code","05ce686e":"code","ddf7f7fa":"code","78d83ca1":"code","b469dc07":"code","d3aef8cd":"code","097dd3e6":"code","f3a61b0c":"code","0f157c4c":"code","e2f51565":"code","dfe5f696":"code","09b9c85a":"code","56a0d514":"code","2e3e2d0f":"code","b9144dbf":"code","1737a03e":"code","74263539":"markdown","7e249230":"markdown","c2d3fc1a":"markdown","890ab70b":"markdown","16bf151c":"markdown","409ae51c":"markdown","d1f23321":"markdown","bf09d8e7":"markdown","00189beb":"markdown","8528892c":"markdown","abc417c0":"markdown","fe80d7b7":"markdown"},"source":{"d2c1431c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e4d75ad":"# Import Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium\nfrom folium.features import DivIcon\n\n# Ignore the warnings\nimport warnings\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', None)","afdcf9cb":"# Store the path in variables\nairlines_path = \"..\/input\/flight-delays\/airlines.csv\"\nairport_path = \"..\/input\/flight-delays\/airports.csv\"\nflights_path = \"..\/input\/flight-delays\/flights.csv\"\n\n# Load the data\nairlines_data = pd.read_csv(airlines_path)\nairport_data = pd.read_csv(airport_path)\nflights_data = pd.read_csv(flights_path)","8155b597":"airlines_data.head()","03379609":"airport_data.head()","4738eb66":"# Check the countries in the Airport data\ncountries = airport_data['COUNTRY'].value_counts().index\nprint(\"The airport data has total of {} countries\".format(len(countries)))","c8811c76":"# WE HAVE ONLY ONE COUNTRY's DATA i.e USA\nairport_data['COUNTRY'].value_counts().index","d9a98184":"airport_data.isnull().sum()","c32f4fd9":"# Drop the null values\nairport_data.dropna(axis=0, inplace=True)","c0b3693b":"# Create a list of tuples of latitude and longitude and a list to store the IATA code\nlat_lon_pairs = []\nairport_code = []\nfor i in range(airport_data.shape[0]):\n    \n    # Adding lat lon pairs\n    lat_i = airport_data['LATITUDE'].iloc[i]\n    lon_i = airport_data['LONGITUDE'].iloc[i]\n    lat_lon_pair = (lat_i, lon_i)\n    lat_lon_pairs.append(lat_lon_pair)\n    \n    # Addinf IATA Code\n    iata_i = airport_data['IATA_CODE'].iloc[i]\n    airport_code.append(iata_i)","2ce9f425":"# Plotting the airport locations on map\n\n# 1. Create Map of USA\n\nusa_lat = 32.41132\nusa_lon = 99.6819\n\nusa_map = folium.Map(location=(usa_lat, usa_lon), width=1000, height=500)\n\n# 2. Plot the map with IATA code\nhtml = '<div style=\"color:red;font-size: 8pt\">airport_code<\/div>'\nfor loc, air_code in zip(lat_lon_pairs, airport_code):\n    folium.Marker(loc, icon=DivIcon(\n                       icon_size=(30,30),\n                       icon_anchor=(0,0),\n                       html=html.replace('airport_code', air_code),\n                        )).add_to(usa_map)\n    \n# 3. Plot the Map with marker\nfor loc, air_code in zip(lat_lon_pairs, airport_code):\n    folium.Marker(loc).add_to(usa_map)\n    \nusa_map","bad80c53":"# Plot the Flight data\nflights_data.head()","22a2b1a9":"# print the percentage null values in columns\ndef get_null_data(data):\n    \n    '''Function prints the % of nulls in null columns.'''\n    \n    total_rows = data.shape[0]\n    print(\"==== TOTAL NUMBER OF ROWS : {} ====\".format(total_rows))\n    print()\n    for col in data.columns:\n        null_values = data[col].isnull().sum()\n        if null_values > 0:\n            perc_null_val = float(null_values)*100\/total_rows\n            print(\"{} column has {:.2f}% null values\".format(col, perc_null_val))\n            \n\n# Call the function\nget_null_data(flights_data)","75caa159":"# columns to drop : Drop the columns with > 80% null values\ncols_to_drop = ['CANCELLATION_REASON', 'AIR_SYSTEM_DELAY', 'SECURITY_DELAY', 'AIRLINE_DELAY', 'LATE_AIRCRAFT_DELAY', 'WEATHER_DELAY']\nflights_data.drop(cols_to_drop, axis=1, inplace=True)","67c8ac61":"# Drop the rest of the null rows\n\n'''\nSince, rest of the null values are very lest ~2%, it is better to drop these rows. \nBut still to be sure, we can check the information loss.\n'''\n\nrows_after_dropping_null = flights_data.dropna(axis=0).shape[0]\nrows_before_dropping_null = flights_data.shape[0]\n\nperc_info_loss = (rows_before_dropping_null - rows_after_dropping_null)*100\/rows_before_dropping_null\nprint(\"Percentage information loss after dropping null values is {:.3f}%\".format(perc_info_loss))\n","4df0ef39":"flights_data.dropna(axis=0, inplace=True)","ecb4ca4c":"# Check null values again\nget_null_data(flights_data)","d5e8ac6d":"flights_data.head()","44bcaafc":"flights_data['YEAR'].value_counts()","3de557c3":"# plot the monthly data\nplt.style.use('seaborn')\nlabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nflights_data.groupby('MONTH').count()['FLIGHT_NUMBER'].plot()\nplt.xlabel(\"Months\")\nplt.xticks(labels=labels, ticks=np.arange(1,13,1))\nplt.ylabel(\"Flight Count\")\nplt.title(\"Monthly Flight Count for the year 2015\")\nplt.show()","152be378":"# plot the month distribution on a pie chart\nplt.pie(x=flights_data.groupby('MONTH').count()['FLIGHT_NUMBER'], autopct='%1.1f%%', labels=labels)\nplt.title(\"Monthly Flights Distribution for the year 2015\")\nplt.show()","e45483b7":"# Plot the daily flight data for the year 2015\nflights_data.groupby('DAY').count()['AIRLINE'].plot(figsize=(12,8))\nplt.xlabel(\"Number of Days of a Month\")\nplt.xticks(np.arange(1, 32, 1))\nplt.ylabel(\"Flight Count\")\nplt.title(\"Daily Flight count for the year 2015\")\nplt.show()","ea497511":"# plot the distribution of flights across DAY_OF_WEEK\nsns.countplot(data=flights_data, x='DAY_OF_WEEK')\nplt.show()","cc083743":"# plot the distribution of flights across DAY_OF_WEEK for each Month\nday_labels = ['Mon',' Tue', 'Wed', 'Thur', 'Fri', 'Sat', 'Sun', '']\nplt.figure(figsize=(15,8))\nsns.countplot(data=flights_data, x='DAY_OF_WEEK', hue='MONTH')\nplt.xticks(labels=day_labels, ticks=np.arange(0,8,1))\nplt.show()","09ee668c":"# Merge flights_data with airlines_data\nflights_data = pd.merge(left = flights_data, right = airlines_data, left_on='AIRLINE', right_on='IATA_CODE').rename(columns={'AIRLINE_y' : 'AIRLINE'})","8b0b18f8":"flights_data.drop('AIRLINE_x', axis=1, inplace=True)","e80207dd":"flights_data.head()","eba37c68":"# Plot the AIRLINE count distribution\nflights_data['AIRLINE'].value_counts().sort_values().plot(kind='barh')\nplt.ylabel(\"Airline\")\nplt.xlabel(\"Airline Count\")\nplt.title(\"Airline Count\")\nplt.show()","7585e63a":"airlines_labels = list(flights_data['AIRLINE'].value_counts().index)\nplt.figure(figsize=(15,8))\nplt.pie(flights_data['AIRLINE'].value_counts(), autopct = '%1.1f%%', labels = airlines_labels, explode = (0,0,0,0,0,0,0,0,0,0.05,0.1,0.2,0.3,0.3))\nplt.title(\"Airline Count\")\nplt.show()","b5f24990":"# Print the most flying airline with the total number of fligths in the year 2015\nmost_flying_airline = flights_data['AIRLINE'].value_counts().index[0]\nmax_flights = flights_data['AIRLINE'].value_counts().iloc[0]\n\nprint(\"The airlines with most number of flights in the year 2015 is {}\".format(most_flying_airline))\nprint(\"Maximum flights in the year 2015 are {:,}\".format(max_flights))","bc5e62d6":"# Plot the ORIGIN AIRPORT count\nflights_data.head()","39d8b5c9":"# Plot top 10 'ORIGIN AIRPORTS' on the basis of count\nflights_data['ORIGIN_AIRPORT'].value_counts().sort_values().iloc[-10:].plot(kind='barh')\nplt.xlabel(\"Airport Count\")\nplt.ylabel(\"Airports\")\nplt.title(\"Origin Airport Count\")\nplt.show()","4732784d":"# Top 10 ORIGIN AIRPORTS on the basis of count\ntop_10_origin_airports = flights_data['ORIGIN_AIRPORT'].value_counts().sort_values().iloc[-10:].index","5f5dd93c":"# Find lat longs of top 10 origin airports\ntop_10_origin_airports_lat_lon = []\nfor airport in top_10_origin_airports:\n    \n    lat = airport_data[airport_data['IATA_CODE'] == airport]['LATITUDE']\n    lon = airport_data[airport_data['IATA_CODE'] == airport]['LONGITUDE']\n    \n    lat_lon = (lat, lon)\n    top_10_origin_airports_lat_lon.append(lat_lon)","2c11bb8b":"# Plotting the top 10 ORIGIN AIRPORTS on Map\n\n# 1. Create Map of USA\n\nusa_lat = 32.41132\nusa_lon = 99.6819\n\nusa_map = folium.Map(location=(usa_lat, usa_lon), width=800, height=500)\n\n# 2. Plot the map with IATA code\nhtml = '<div style=\"color:red;font-size: 8pt\">airport_code<\/div>'\nfor loc, air_code in zip(top_10_origin_airports_lat_lon, top_10_origin_airports):\n    folium.Marker(loc, icon=DivIcon(\n                       icon_size=(30,30),\n                       icon_anchor=(0,0),\n                       html=html.replace('airport_code', air_code),\n                        )).add_to(usa_map)\n    \n# 3. Plot the Map with marker\nfor loc, air_code in zip(top_10_origin_airports_lat_lon, top_10_origin_airports):\n    folium.Marker(loc).add_to(usa_map)\n    \nusa_map","0364451b":"flights_data.head()","71275217":"# Plot top 10 'DESTINATION AIRPORTS' on the basis of count\nflights_data['DESTINATION_AIRPORT'].value_counts().sort_values().iloc[-10:].plot(kind='barh')\nplt.xlabel(\"Airport Count\")\nplt.ylabel(\"Airports\")\nplt.title(\"Destination Airport Count\")\nplt.show()","48bb9717":"# Top 10 DESTINATION AIRPORTS on the basis of count\ntop_10_destination_airports = flights_data['DESTINATION_AIRPORT'].value_counts().sort_values().iloc[-10:].index","bccd9692":"# Find lat longs of top 10 origin airports\ntop_10_destination_airports_lat_lon = []\nfor airport in top_10_destination_airports:\n    \n    lat = airport_data[airport_data['IATA_CODE'] == airport]['LATITUDE']\n    lon = airport_data[airport_data['IATA_CODE'] == airport]['LONGITUDE']\n    \n    lat_lon = (lat, lon)\n    top_10_destination_airports_lat_lon.append(lat_lon)","05ce686e":"# Plotting the top 10 DESTINATION AIRPORTS on Map\n\n# 1. Create Map of USA\n\nusa_lat = 32.41132\nusa_lon = 99.6819\n\nusa_map = folium.Map(location=(usa_lat, usa_lon), width=800, height=500)\n\n# 2. Plot the map with IATA code\nhtml = '<div style=\"color:red;font-size: 8pt\">airport_code<\/div>'\nfor loc, air_code in zip(top_10_destination_airports_lat_lon, top_10_destination_airports):\n    folium.Marker(loc, icon=DivIcon(\n                       icon_size=(30,30),\n                       icon_anchor=(0,0),\n                       html=html.replace('airport_code', air_code),\n                        )).add_to(usa_map)\n    \n# 3. Plot the Map with marker\nfor loc, air_code in zip(top_10_destination_airports_lat_lon, top_10_destination_airports):\n    folium.Marker(loc).add_to(usa_map)\n    \nusa_map","ddf7f7fa":"flights_data['DEPARTURE_TIME'].hist(bins=25)\nplt.xlabel(\"Departure Time\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Departure Time Frequency Distribution\")\nplt.show()","78d83ca1":"flights_data.head()","b469dc07":"# Plot DEPARTURE_TIME across airlines\ndep_data = flights_data.groupby('AIRLINE').mean()['DEPARTURE_TIME'].sort_values()\n\nplt.barh(y = dep_data.index, width = dep_data.values)\nplt.xlabel(\"Average Departure Time\")\nplt.ylabel(\"Airlines\")\nplt.title(\"Average Departure Time across Airlines\")\nplt.show()","d3aef8cd":"sns.boxplot(x = dep_data.index, y = dep_data.values)\nplt.xlabel(\"Airlines\")\nplt.ylabel(\"Average Departure Time\")\nplt.xticks(rotation=-90)\nplt.title(\"Average Departure Time across Airlines\")\nplt.show()","097dd3e6":"# Plot the DEPARTURE_DELAY distribution\nplt.hist(flights_data['DEPARTURE_DELAY'], bins=50)\nplt.xlabel(\"Departure Delay\")\nplt.title(\"Departure Delay Distribution\")\nplt.show()","f3a61b0c":"# Plot DEPARTURE_DELAY across months\nflights_data.groupby('MONTH').mean()['DEPARTURE_DELAY'].sort_values().plot(kind='barh')\nplt.show()","0f157c4c":"# Plot DEPARTURE_DELAY time across airlines\ndep_data = flights_data.groupby('AIRLINE').mean()['DEPARTURE_DELAY'].sort_values()\n\nplt.barh(y = dep_data.index, width = dep_data.values)\nplt.xlabel(\"Average Departure Delay Time\")\nplt.ylabel(\"Airlines\")\nplt.title(\"Average Departure Delay Time across Airlines\")\nplt.show()","e2f51565":"# ARRIVAL_TIME Distribution\nplt.hist(flights_data['ARRIVAL_TIME'], bins=25)\nplt.xlabel(\"Flight Arrival Time\")\nplt.title(\"Flight Arrival Time Distribution\")\nplt.show()","dfe5f696":"# Plot ARRIVAL_DELAY time across airlines\ndep_data = flights_data.groupby('AIRLINE').mean()['ARRIVAL_DELAY'].sort_values()\n\nplt.barh(y = dep_data.index, width = dep_data.values)\nplt.xlabel(\"Average Arrival Delay Time\")\nplt.ylabel(\"Airlines\")\nplt.title(\"Average Arrival Delay Time across Airlines\")\nplt.show()","09b9c85a":"# Plot DEPARTURE_DELAY time across airlines\ndep_data = flights_data.groupby('AIRLINE').mean()['ARRIVAL_TIME'].sort_values()\n\nplt.barh(y = dep_data.index, width = dep_data.values)\nplt.xlabel(\"Average Arrival Time\")\nplt.ylabel(\"Airlines\")\nplt.title(\"Average Arrival Time across Airlines\")\nplt.show()","56a0d514":"# Plot ARRIVAL_DELAY across months\nflights_data.groupby('MONTH').mean()['ARRIVAL_DELAY'].sort_values().plot(kind='bar')\nplt.yticks(np.arange(-5,11,1))\nplt.xticks(rotation=0)\nplt.show()","2e3e2d0f":"flights_data['DIVERTED'].value_counts()","b9144dbf":"flights_data['CANCELLED'].value_counts()","1737a03e":"# plot the correlation matrix\ncorr_matrix = flights_data.corr()\nplt.figure(figsize=(15,8))\nsns.heatmap(corr_matrix, annot=True, cbar=False)\nplt.title(\"Pearson Correlation Matrix of Variables\")\nplt.show()","74263539":"**No flight has been diverted or cancelled in the year 2015**","7e249230":"* **Number of flights are less on 31st because not every month has 31 days.**\n* **Data for all other days is fairly constant.**","c2d3fc1a":"**No output, that implies no null values.**","890ab70b":"**Fairly equal distribution across all days of the week.**","16bf151c":"**Month of June has the maximum average deparuter delay time.**","409ae51c":"**Months of September and October have an average of arrival time in negative. That means flights on an average used to arrive before the scheduled time in these 2 months**","d1f23321":"**Our hypothesis was correct, not much information loss after dropping the null values.**","bf09d8e7":"**Top 10 Origin Airports by count and top 10 Destination Airport by count are the same.**","00189beb":"**Equal representation of all the days of the week across every month.**","8528892c":"* Spirit Airlines has the maximum average departure delay time.\n* Hawaiian Airlines Inc has the minimum average departure delay time.","abc417c0":"**Data of only 1 year i.e 2015**","fe80d7b7":"**Southwest Airlines Co. has made the most number of flights in the year 2015**"}}