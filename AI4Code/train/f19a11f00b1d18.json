{"cell_type":{"5a2bedb2":"code","5e6c91ed":"code","7dab5113":"code","e159de0c":"code","9e26c20f":"code","885f281b":"code","4c1823c7":"code","a1fb44f0":"code","cbcf3496":"code","ffdb6236":"code","32dc1acc":"code","428aa1f8":"code","aeb1ce35":"code","44be97f6":"code","b4bee7b4":"code","d5afed9c":"code","5aee2d0b":"code","7f9698a0":"code","9cd47eef":"code","14a4fedb":"markdown","6b9e23fa":"markdown","3b41f7c0":"markdown","8d8928e0":"markdown","f25b42d0":"markdown","205d519b":"markdown"},"source":{"5a2bedb2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e6c91ed":"import pandas as pd\nimport numpy as np\nimport matplotlib.image as mpimg\n\n%matplotlib inline\n\nnp.random.seed(2)","7dab5113":"from sklearn.model_selection import train_test_split\nimport itertools\n\nimport keras.utils.np_utils as ku\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import SGD\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","e159de0c":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","9e26c20f":"label = 'label'\n\nY_train = train[label]\nX_train = train.drop(labels=[label], axis=1)","885f281b":"Y_train.value_counts()","4c1823c7":"X_train \/= 255\ntest \/= 255","a1fb44f0":"X_train = X_train.values.reshape(X_train.shape[0], 28, 28, 1)\ntest = test.values.reshape(test.shape[0], 28, 28, 1)","cbcf3496":"Y_train = ku.to_categorical(Y_train, num_classes=10)","ffdb6236":"Y_train[:5]","32dc1acc":"# Splitting Data\nX_train, X_test, Y_train, Y_test = train_test_split(X_train, Y_train, test_size=0.1, random_state=2)","428aa1f8":"\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', input_shape=(28, 28, 1)))\nmodel.add(MaxPool2D((2, 2)))\nmodel.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform'))\nmodel.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform'))\nmodel.add(MaxPool2D((2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(100, activation='relu', kernel_initializer='he_uniform'))\nmodel.add(Dense(10, activation='softmax'))\n","aeb1ce35":"# Optimizer\nopt = SGD(lr=0.01, momentum=0.9)\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])","44be97f6":"lr = ReduceLROnPlateau(monitor='val_acc', patience=3, verbose=1, factor=0.5, min_lr=0.00001)","b4bee7b4":"data_gen = ImageDataGenerator(featurewise_center=False,\n                             samplewise_center=False,\n                             featurewise_std_normalization=False,\n                             samplewise_std_normalization=False,\n                             zca_whitening=False,\n                             rotation_range=10,\n                             zoom_range=0.1,\n                             width_shift_range=0.1,\n                             height_shift_range=0.1,\n                             horizontal_flip=False,\n                             vertical_flip=False)\n\ndata_gen.fit(X_train)","d5afed9c":"history = model.fit_generator(data_gen.flow(X_train, Y_train, batch_size=256),\n                             epochs=70, validation_data=(X_test, Y_test),\n                             verbose=2, callbacks=[lr])","5aee2d0b":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"Validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","7f9698a0":"result = model.predict(test)\nresult = np.argmax(result, axis=1)\n\nresult = pd.Series(result, name='Label')","9cd47eef":"submit = pd.concat([pd.Series(range(1,28001), name='ImageId'), result], axis=1)\n\nsubmit.to_csv('result2.csv', index=False)","14a4fedb":"**Encoding to one hot vectors**","6b9e23fa":"**ReShape**","3b41f7c0":"**Normalization**","8d8928e0":"Model","f25b42d0":"**Train Model**","205d519b":"**Loading Data**"}}