{"cell_type":{"181e72dc":"code","380eb57a":"code","fd542ea4":"code","1e29f345":"code","9e5ad67c":"code","4f9c2d1c":"code","df646a86":"code","474822a2":"code","f3eb810e":"code","ef0014b9":"code","a63978c3":"code","c6afa357":"code","cc069f2c":"code","ae316977":"code","6091402b":"code","cbe175f6":"code","d37f4c22":"code","900d7d94":"code","7f60f35f":"code","3df1e466":"code","3ac7aa56":"code","dbc1f6bd":"code","fda3a635":"markdown","6945ec71":"markdown","48877d50":"markdown","d4e7278d":"markdown","fdbcdf02":"markdown","f0605c53":"markdown","ac1456ca":"markdown","a4d9e078":"markdown"},"source":{"181e72dc":"import numpy as np \nimport pandas as pd \nfrom matplotlib import pyplot\nimport math\nfrom keras import callbacks\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import RobustScaler\nfrom tensorflow.keras.utils import plot_model","380eb57a":"train = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/test.csv\")\nid = test['id']\ntrain = train.drop(columns=['id'])\ntest = test.drop(columns=['id'])\ntrain.head()","fd542ea4":"def check(df):\n    categorical_data = []\n    numerical_data = []\n    for i in df.columns:\n        if df[i].value_counts().count() > 10:\n            numerical_data.append(i)\n        else:\n            categorical_data.append(i)\n    return([numerical_data,categorical_data])","1e29f345":"t = check(train)\nprint(\"Numerical columns: \",t[0])\nprint(\"Categorical columns: \",t[1])","9e5ad67c":"train['pressure'] = np.where(train['pressure'] < 0, np.nan, train['pressure'])\ntrain = train.dropna()\ntrain.isnull().sum()","4f9c2d1c":"x_train = train.iloc[:,0:6]\ny_train = train.iloc[:,6]","df646a86":"x_train['time_step'] = pd.cut(x=x_train['time_step'], bins=[-0.99, 0.5, 1, 1.5, 2, 2.5, 3], labels=[0,1,2,3,4,5])\nx_train['time_step'] = x_train['time_step'].astype('int64')\nx_train.head()","474822a2":"test['time_step'] = pd.cut(x=test['time_step'], bins=[-0.99, 0.5, 1, 1.5, 2, 2.5, 3], labels=[0,1,2,3,4,5])\ntest['time_step'] = test['time_step'].astype('int64')\ntest.head()","f3eb810e":"def create_new_feat(df):\n    df['cross']= df['u_in'] * df['u_out']\n    df['cross2']= df['time_step'] * df['u_out']\n    df['area'] = df['time_step'] * df['u_in']\n    df['area'] = df.groupby('breath_id')['area'].cumsum()\n    df['time_step_cumsum'] = df.groupby(['breath_id'])['time_step'].cumsum()\n    df['u_in_cumsum'] = (df['u_in']).groupby(df['breath_id']).cumsum()\n    #print(\"Step-1...Completed\")\n    \n    df['u_in_lag1'] = df.groupby('breath_id')['u_in'].shift(1)\n    df['u_out_lag1'] = df.groupby('breath_id')['u_out'].shift(1)\n    df['u_in_lag_back1'] = df.groupby('breath_id')['u_in'].shift(-1)\n    df['u_out_lag_back1'] = df.groupby('breath_id')['u_out'].shift(-1)\n    df['u_in_lag2'] = df.groupby('breath_id')['u_in'].shift(2)\n    df['u_out_lag2'] = df.groupby('breath_id')['u_out'].shift(2)\n    df['u_in_lag_back2'] = df.groupby('breath_id')['u_in'].shift(-2)\n    df['u_out_lag_back2'] = df.groupby('breath_id')['u_out'].shift(-2)\n    df['u_in_lag3'] = df.groupby('breath_id')['u_in'].shift(3)\n    df['u_out_lag3'] = df.groupby('breath_id')['u_out'].shift(3)\n    df['u_in_lag_back3'] = df.groupby('breath_id')['u_in'].shift(-3)\n    df['u_out_lag_back3'] = df.groupby('breath_id')['u_out'].shift(-3)\n    df['u_in_lag4'] = df.groupby('breath_id')['u_in'].shift(4)\n    df['u_out_lag4'] = df.groupby('breath_id')['u_out'].shift(4)\n    df['u_in_lag_back4'] = df.groupby('breath_id')['u_in'].shift(-4)\n    df['u_out_lag_back4'] = df.groupby('breath_id')['u_out'].shift(-4)\n    df = df.fillna(0)\n    #print(\"Step-2...Completed\")\n    \n    df['breath_id__u_in__max'] = df.groupby(['breath_id'])['u_in'].transform('max')\n    df['breath_id__u_in__mean'] = df.groupby(['breath_id'])['u_in'].transform('mean')\n    df['breath_id__u_in__diffmax'] = df.groupby(['breath_id'])['u_in'].transform('max') - df['u_in']\n    df['breath_id__u_in__diffmean'] = df.groupby(['breath_id'])['u_in'].transform('mean') - df['u_in']\n    #print(\"Step-3...Completed\")\n    \n    df['u_in_diff1'] = df['u_in'] - df['u_in_lag1']\n    df['u_out_diff1'] = df['u_out'] - df['u_out_lag1']\n    df['u_in_diff2'] = df['u_in'] - df['u_in_lag2']\n    df['u_out_diff2'] = df['u_out'] - df['u_out_lag2']\n    df['u_in_diff3'] = df['u_in'] - df['u_in_lag3']\n    df['u_out_diff3'] = df['u_out'] - df['u_out_lag3']\n    df['u_in_diff4'] = df['u_in'] - df['u_in_lag4']\n    df['u_out_diff4'] = df['u_out'] - df['u_out_lag4']\n    #print(\"Step-4...Completed\")\n    \n    df['one'] = 1\n    df['count'] = (df['one']).groupby(df['breath_id']).cumsum()\n    df['u_in_cummean'] =df['u_in_cumsum'] \/df['count']\n    \n    df['breath_id_lag']=df['breath_id'].shift(1).fillna(0)\n    df['breath_id_lag2']=df['breath_id'].shift(2).fillna(0)\n    df['breath_id_lagsame']=np.select([df['breath_id_lag']==df['breath_id']],[1],0)\n    df['breath_id_lag2same']=np.select([df['breath_id_lag2']==df['breath_id']],[1],0)\n    df['breath_id__u_in_lag'] = df['u_in'].shift(1).fillna(0)\n    df['breath_id__u_in_lag'] = df['breath_id__u_in_lag'] * df['breath_id_lagsame']\n    df['breath_id__u_in_lag2'] = df['u_in'].shift(2).fillna(0)\n    df['breath_id__u_in_lag2'] = df['breath_id__u_in_lag2'] * df['breath_id_lag2same']\n    #print(\"Step-5...Completed\")\n    \n    df['time_step_diff'] = df.groupby('breath_id')['time_step'].diff().fillna(0)\n    df['ewm_u_in_mean'] = (df\\\n                           .groupby('breath_id')['u_in']\\\n                           .ewm(halflife=9)\\\n                           .mean()\\\n                           .reset_index(level=0,drop=True))\n    df[[\"15_in_sum\",\"15_in_min\",\"15_in_max\",\"15_in_mean\"]] = (df\\\n                                                              .groupby('breath_id')['u_in']\\\n                                                              .rolling(window=15,min_periods=1)\\\n                                                              .agg({\"15_in_sum\":\"sum\",\n                                                                    \"15_in_min\":\"min\",\n                                                                    \"15_in_max\":\"max\",\n                                                                    \"15_in_mean\":\"mean\"})\\\n                                                               .reset_index(level=0,drop=True))\n    #print(\"Step-6...Completed\")\n    \n    df['u_in_lagback_diff1'] = df['u_in'] - df['u_in_lag_back1']\n    df['u_out_lagback_diff1'] = df['u_out'] - df['u_out_lag_back1']\n    df['u_in_lagback_diff2'] = df['u_in'] - df['u_in_lag_back2']\n    df['u_out_lagback_diff2'] = df['u_out'] - df['u_out_lag_back2']\n    #print(\"Step-7...Completed\")\n    \n    df['R'] = df['R'].astype(str)\n    df['C'] = df['C'].astype(str)\n    df['R__C'] = df[\"R\"].astype(str) + '__' + df[\"C\"].astype(str)\n    df = pd.get_dummies(df)\n    #print(\"Step-8...Completed\")\n    \n    return df","ef0014b9":"x_train = create_new_feat(x_train)\n#x_train = x_train.fillna(x_train.min())\n\ntest = create_new_feat(test)\n#test = test.fillna(test.min())","a63978c3":"t = check(x_train)\nprint(\"Numerical columns: \",t[0])\nprint(\"\\nCategorical columns: \",t[1])","c6afa357":"x_train = x_train.drop(['breath_id','one','count','breath_id_lag','breath_id_lag2','breath_id_lagsame','breath_id_lag2same'],axis=1)\n\ntest = test.drop(['breath_id','one','count','breath_id_lag','breath_id_lag2','breath_id_lagsame','breath_id_lag2same'],axis=1)\n\nprint(f\"Train: {x_train.shape} \\nTest: {test.shape}\")","cc069f2c":"scaler1 = RobustScaler()\nscaler2 = RobustScaler()\nscaler3 = RobustScaler()\n\nx_train = scaler1.fit_transform(x_train)\ntest = scaler3.fit_transform(test)\ny_train = scaler2.fit_transform(y_train.values.reshape(-1,1))","ae316977":"x_train = x_train.reshape(-1,1,64)\ntest = test.reshape(-1,1,64)\ny_train = y_train.reshape(-1,1,1)","6091402b":"model = Sequential()\nmodel.add(LSTM(150,input_shape=(1,64),return_sequences=True))\nmodel.add(LSTM(100,return_sequences=True,input_shape=(1,64)))\nmodel.add(LSTM(64,return_sequences=True))\nmodel.add(Dense(16,activation='selu'))\nmodel.add(Dense(1))\nmodel.summary()\n\nmodel.compile(loss='mae',optimizer='adam')","cbe175f6":"#epoch=300\nearlystopping = callbacks.EarlyStopping(monitor =\"val_loss\",mode =\"min\",patience = 3,restore_best_weights = True)\nmodel.fit(x_train,y_train,epochs = 50,batch_size = 512,callbacks =[earlystopping])","d37f4c22":"y_test = model.predict(test)","900d7d94":"test_y = scaler2.inverse_transform(y_test.reshape(-1,1))\ny_test.shape","7f60f35f":"y_train.shape","3df1e466":"plot_model(\n    model, \n    to_file='Model.png', \n    show_shapes=True,\n    show_layer_names=True\n)","3ac7aa56":"prediction = pd.concat([id,pd.DataFrame(test_y)],axis=1)\nprediction.columns=['id','pressure']\nprediction.to_csv(\"Keras_Ann.csv\",index=False)","dbc1f6bd":"prediction.head()","fda3a635":"### Normalize the Data using Min Max Scalar","6945ec71":"### Adding Extra Features","48877d50":"### Removing Pressure Feature's Outliers","d4e7278d":"### Create and fit the LSTM network","fdbcdf02":"### Checking for Features Datatype","f0605c53":"### Importing Data","ac1456ca":"### Importing Libraries","a4d9e078":"### Editing Time Step"}}