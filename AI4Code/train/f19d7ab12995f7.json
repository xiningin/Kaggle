{"cell_type":{"1e42c214":"code","9887afab":"code","47f64c2d":"code","e54d0542":"code","31d85ab5":"code","ae2f8df3":"code","79af9cfd":"code","49c35220":"code","88741685":"code","e20dc8d9":"code","61d20bb3":"code","09fc9976":"code","1fdd564d":"code","54a69d40":"code","d37cb3fc":"code","5ae7b7d3":"code","0d9156bf":"code","58b38f06":"code","18dff9d6":"code","a359e754":"code","d9b33640":"markdown","cc887f26":"markdown","4eeb57fd":"markdown","63dc1bed":"markdown","9943ec47":"markdown","7cfc61dc":"markdown","ab420b16":"markdown","d5222bca":"markdown"},"source":{"1e42c214":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom skimage.io import imsave\nfrom skimage.transform import resize\nimport csv\nfrom glob import glob\n\nimport os\n\n# import multiprocessing as mp\n# mp.set_start_method('forkserver')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input\/segmentation\/'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\ndt_y = {'se': None, 'he': None}\n\ndt_x = glob(\"\/\".join([\"\", \"kaggle\", \"input\", \"segmentation\", \n                     \"original\", \"*jpg\"]))\ndt_y['se'] = glob(\"\/\".join([\"\", \"kaggle\", \"input\", \"segmentation\",\n                     \"gt\", \"*\", \"*SE.tif\"]))\ndt_y['he'] = glob(\"\/\".join([\"\", \"kaggle\", \"input\", \"segmentation\",\n                     \"gt\", \"*\", \"*HE.tif\"]))\ndt_y['ex'] = glob(\"\/\".join([\"\", \"kaggle\", \"input\", \"segmentation\",\n                     \"gt\", \"*\", \"*EX.tif\"]))\ndt_y['od'] = glob(\"\/\".join([\"\", \"kaggle\", \"input\", \"segmentation\",\n                     \"gt\", \"*\", \"*OD.tif\"]))\n# Any results you write to the current directory are saved as output.","9887afab":"dt_y['od'].sort()\ndt_x.sort()","47f64c2d":"from skimage.io import imread\nimport matplotlib.pyplot as plt\n\nf, axes = plt.subplots(1, 2, sharey=True)\nidx = 26\nim = [imread(dt_x[idx]), imread(dt_y['od'][idx])]\nfor i, a in enumerate(axes):\n    a.imshow(im[i])\n    \nprint(im[1].ndim)","e54d0542":"from keras.models import Model\nfrom keras.layers import Input, Conv2D, MaxPooling2D\nfrom keras.layers.convolutional import UpSampling2D\nfrom keras.layers.merge import concatenate\nfrom keras.optimizers import Adam\nfrom keras.callbacks import ModelCheckpoint, ProgbarLogger, CSVLogger # ReduceLROnPlateau\nfrom keras import backend as K\nfrom keras import initializers\nimport math\n\n# if TENSORFLOW -> use channels_last\n# if THEANO -> use channels_first\nK.set_image_data_format('channels_last')  # TF dimension ordering in this code\nAXIS = -1 # -1 for 'channels_last' and 0 for 'channels_first'\n\nCLASSES_NO = 2 # including bckgnd\nIMAGE_ROWS = 512 #1024 #1020\nIMAGE_COLS = 512 #1024 #1020\nRESULT_ROWS = 512 #1024 #836\nRESULT_COLS = 512 #1024 #836\nEPOCHS_NO = 100\nFEAT_MAP_NO = np.array([8, 16, 32, 64, 128])\nW_SEED = list(range(40)) # None\n\nBATCH_SIZE = 5\nTRAIN_SAMPLES = (CLASSES_NO-1)*75\nVAL_SAMPLES = (CLASSES_NO-1)*6\nTRAIN_STEPS = math.ceil(TRAIN_SAMPLES \/ BATCH_SIZE)\n\nBCKGND_W = 1.\/(CLASSES_NO-1)","31d85ab5":"def dice_coef(y_true, y_pred, smooth=1):\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = K.sum(y_true_f * y_pred_f)\n    return (2. * intersection + smooth) \/ (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n\ndef dice_coef_loss(y_true, y_pred):\n    return 1-dice_coef(y_true, y_pred)\n\ndef jaccard_distance(y_true, y_pred, smooth=100):\n    intersection = K.sum(K.abs(y_true * y_pred), axis=-1)\n    sum_ = K.sum(K.abs(y_true) + K.abs(y_pred), axis=-1)\n    jac = (intersection + smooth) \/ (sum_ - intersection + smooth)\n    return (1 - jac) * smooth","ae2f8df3":"def normalizeImage(img):\n    img = np.array([img])\n    img = img_as_float(img)\n    img = img.astype('float32')\n    mean = np.mean(img)  # mean for data centering\n    std = np.std(img)  # std for data normalization\n    img -= mean\n    img \/= std\n    return img\n\n# -----------------------------------------------------------------------------\ndef normalizeMask(mask):\n    mask = np.array([mask])\n    mask = img_as_float(mask)\n    mask = mask.astype('float32')\n    return mask\n\n# -----------------------------------------------------------------------------\ndef calculateWeights(obj_mask, bckgnd_msk):\n    sum_all = np.sum(obj_mask + bckgnd_msk, dtype=np.float32) + 1  \n    sum_obj = np.sum(obj_mask, dtype=np.float32)\n    sum_bck = np.sum(bckgnd_msk, dtype=np.float32)\n    # make sure there is at least some contribution and not 0s\n    if sum_obj < 100:   \n        sum_obj = 100\n    if sum_bck < 100:\n        sum_bck = 100\n    return np.float32(obj_mask)*np.float32(sum_bck)\/np.float32(sum_all) + np.float32(bckgnd_msk)*np.float32(sum_obj)\/np.float32(sum_all)","79af9cfd":"from skimage.util import invert, img_as_float\nfrom sklearn.utils import shuffle\n\nimg = None\nimg_mask = None\nimg_mask_bg = None\nimg_weights = None\nimg_weights_binary = None\n\ndef data_fetch(): \n    global img\n    global img_mask\n        \n    fx = lambda x: imread(x, as_gray=True)\n    img = map(fx, dt_x)\n    img_mask = map(fx, dt_y['od'])\n    \n    fx = lambda x: np.array(x[:, 250:3750], dtype=np.float32)\n    img = map(fx, img)\n    img_mask = map(fx, img_mask)\n    \n    fx = lambda x: resize(x, (512, 512))\n    img = map(fx, img)\n    img_mask = map(fx, img_mask)\n    \n    fx = lambda x: normalizeImage(x)\n    fy = lambda y: normalizeMask(y)\n    img = list(map(fx, img))\n    img_mask = list(map(fy, img_mask))","49c35220":"data_fetch()","88741685":"tr_in = lambda img: np.array(img)[:, 0, :, :, np.newaxis]\n\nimg_tr = tr_in(img)\nimg_mask_tr = tr_in(img_mask)","e20dc8d9":"img_tr.shape","61d20bb3":"tr_i = 0\n\ndef train_datagen():\n    global tr_i\n    while True:\n        tr_i+1\n        tr_i = (tr_i+1) % 81\n        yield (img_tr[tr_i:tr_i+1], img_mask_tr[tr_i:tr_i+1])","09fc9976":"def unet_6(feature_maps, last_layer):\n    inputs = Input((IMAGE_ROWS, IMAGE_COLS, 1), name='input')\n    conv1 = Conv2D(feature_maps[0], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[0]), name='conv1_1')(inputs)\n    conv1 = Conv2D(feature_maps[0], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[1]), name='conv1_2')(conv1)\n    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)\n\n    conv2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[2]), name='conv2_1')(pool1)\n    conv2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[3]), name='conv2_2')(conv2)\n    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)\n\n    conv3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[4]), name='conv3_1')(pool2)\n    conv3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[5]), name='conv3_2')(conv3)\n    pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)\n\n    conv4 = Conv2D(feature_maps[3], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[6]), name='conv4_1')(pool3)\n    conv4 = Conv2D(feature_maps[3], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[7]), name='conv4_2')(conv4)\n    pool4 = MaxPooling2D(pool_size=(2, 2))(conv4)\n    \n    conv5 = Conv2D(feature_maps[4], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[8]), name='conv5_1')(pool4)\n    conv5 = Conv2D(feature_maps[4], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[9]), name='conv5_2')(conv5)\n    pool5 = MaxPooling2D(pool_size=(2, 2))(conv5)\n\n    conv6 = Conv2D(feature_maps[5], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[10]), name='conv6_1')(pool5)\n    conv6 = Conv2D(feature_maps[5], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[11]), name='conv6_2')(conv6)\n    pool6 = MaxPooling2D(pool_size=(2, 2))(conv6)\n\n\n    conv7 = Conv2D(feature_maps[6], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[12]), name='convDeep_1')(pool6)\n    conv7 = Conv2D(feature_maps[6], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[13]), name='convDeep_2')(conv7)\n\n\n    up_6 = UpSampling2D(size=(2, 2), name='upconv6_0')(conv7)\n    up_6 = Conv2D(feature_maps[5], (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[14]), name='upconv_6_1')(up_6)\n    conv_6 = Conv2D(feature_maps[5], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[15]), name='conv_6_1')(concatenate([conv6, up_6], axis=AXIS))\n    conv_6 = Conv2D(feature_maps[5], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[16]), name='conv_6_2')(conv_6)\n\n    up_5 = UpSampling2D(size=(2, 2), name='upconv5_0')(conv_6)\n    up_5 = Conv2D(feature_maps[4], (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[17]), name='upconv_5_1')(up_5)\n    conv_5 = Conv2D(feature_maps[4], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[18]), name='conv_5_1')(concatenate([conv5, up_5], axis=AXIS))\n    conv_5 = Conv2D(feature_maps[4], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[19]), name='conv_5_2')(conv_5)\n\n    up_4 = UpSampling2D(size=(2, 2), name='upconv4_0')(conv_5)\n    up_4 = Conv2D(feature_maps[3], (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[20]), name='upconv_4_1')(up_4)\n    conv_4 = Conv2D(feature_maps[3], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[21]), name='conv_4_1')(concatenate([conv4, up_4], axis=AXIS))\n    conv_4 = Conv2D(feature_maps[3], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[22]), name='conv_4_2')(conv_4)\n\n    up_3 = UpSampling2D(size=(2, 2), name='upconv3_0')(conv_4)\n    up_3 = Conv2D(feature_maps[2], (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[23]), name='upconv_3_1')(up_3)\n    conv_3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[24]), name='conv_3_1')(concatenate([conv3, up_3], axis=AXIS))\n    conv_3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[25]), name='conv_3_2')(conv_3)\n\n    up_2 = UpSampling2D(size=(2, 2), name='upconv2_0')(conv_3)\n    up_2 = Conv2D(feature_maps[1], (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[26]), name='upconv_2_1')(up_2)\n    conv_2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[27]), name='conv_2_1')(concatenate([conv2, up_2], axis=AXIS))\n    conv_2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[28]), name='conv_2_2')(conv_2)\n\n    up_1 = UpSampling2D(size=(2, 2), name='upconv1_0')(conv_2)\n    up_1 = Conv2D(last_layer, (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[29]), name='upconv_1_1')(up_1)\n    conv_1 = Conv2D(last_layer, (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[30]), name='conv_1_1')(concatenate([conv1, up_1], axis=AXIS))\n    conv_1 = Conv2D(last_layer, (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[31]), name='conv_1_2')(conv_1)\n\n    convOUT = Conv2D(1, (1, 1), activation='sigmoid', kernel_initializer=initializers.he_normal(W_SEED[32]), name='convOUT')(conv_1)\n\n    model = Model(inputs=[inputs], outputs=[convOUT])\n    model.compile(optimizer=Adam(lr=1e-5), loss=dice_coef_loss, metrics=[dice_coef, jaccard_distance])\n    return model\n\n#------------------------------------------------------------------------------\ndef unet_5(feature_maps, last_layer):\n    inputs = Input((IMAGE_ROWS, IMAGE_COLS, 1), name='input')\n    conv1 = Conv2D(feature_maps[0], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[0]), name='conv1_1')(inputs)\n    conv1 = Conv2D(feature_maps[0], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[1]), name='conv1_2')(conv1)\n    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)\n\n    conv2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[2]), name='conv2_1')(pool1)\n    conv2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[3]), name='conv2_2')(conv2)\n    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)\n\n    conv3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[4]), name='conv3_1')(pool2)\n    conv3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[5]), name='conv3_2')(conv3)\n    pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)\n\n    conv4 = Conv2D(feature_maps[3], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[6]), name='conv4_1')(pool3)\n    conv4 = Conv2D(feature_maps[3], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[7]), name='conv4_2')(conv4)\n    pool4 = MaxPooling2D(pool_size=(2, 2))(conv4)\n    \n    conv5 = Conv2D(feature_maps[4], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[7]), name='conv5_1')(pool4)\n    conv5 = Conv2D(feature_maps[4], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[8]), name='conv5_2')(conv5)\n    pool5 = MaxPooling2D(pool_size=(2, 2))(conv5)\n\n\n    conv6 = Conv2D(feature_maps[5], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[9]), name='convDeep_1')(pool5)\n    conv6 = Conv2D(feature_maps[5], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[10]), name='convDeep_2')(conv6)\n\n\n    up_5 = UpSampling2D(size=(2, 2), name='upconv5_0')(conv6)\n    up_5 = Conv2D(feature_maps[4], (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[11]), name='upconv_5_1')(up_5)\n    conv_5 = Conv2D(feature_maps[4], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[12]), name='conv_5_1')(concatenate([conv5, up_5], axis=AXIS))\n    conv_5 = Conv2D(feature_maps[4], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[13]), name='conv_5_2')(conv_5)\n\n    up_4 = UpSampling2D(size=(2, 2), name='upconv4_0')(conv_5)\n    up_4 = Conv2D(feature_maps[3], (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[14]), name='upconv_4_1')(up_4)\n    conv_4 = Conv2D(feature_maps[3], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[15]), name='conv_4_1')(concatenate([conv4, up_4], axis=AXIS))\n    conv_4 = Conv2D(feature_maps[3], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[16]), name='conv_4_2')(conv_4)\n\n    up_3 = UpSampling2D(size=(2, 2), name='upconv3_0')(conv_4)\n    up_3 = Conv2D(feature_maps[2], (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[17]), name='upconv_3_1')(up_3)\n    conv_3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[18]), name='conv_3_1')(concatenate([conv3, up_3], axis=AXIS))\n    conv_3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[19]), name='conv_3_2')(conv_3)\n\n    up_2 = UpSampling2D(size=(2, 2), name='upconv2_0')(conv_3)\n    up_2 = Conv2D(feature_maps[1], (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[20]), name='upconv_2_1')(up_2)\n    conv_2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[21]), name='conv_2_1')(concatenate([conv2, up_2], axis=AXIS))\n    conv_2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[22]), name='conv_2_2')(conv_2)\n\n    up_1 = UpSampling2D(size=(2, 2), name='upconv1_0')(conv_2)\n    up_1 = Conv2D(last_layer, (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[23]), name='upconv_1_1')(up_1)\n    conv_1 = Conv2D(last_layer, (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[24]), name='conv_1_1')(concatenate([conv1, up_1], axis=AXIS))\n    conv_1 = Conv2D(last_layer, (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[25]), name='conv_1_2')(conv_1)\n\n    convOUT = Conv2D(1, (1, 1), activation='sigmoid', kernel_initializer=initializers.he_normal(W_SEED[26]), name='convOUT')(conv_1)\n\n    model = Model(inputs=[inputs], outputs=[convOUT])\n    model.compile(optimizer=Adam(lr=1e-5), loss=dice_coef_loss, metrics=[dice_coef, jaccard_distance])\n    return model\n\n#------------------------------------------------------------------------------\ndef unet_4(feature_maps, last_layer):\n    inputs = Input((IMAGE_ROWS, IMAGE_COLS, 1), name='input')\n    conv1 = Conv2D(feature_maps[0], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[0]), name='conv1_1')(inputs)\n    conv1 = Conv2D(feature_maps[0], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[1]), name='conv1_2')(conv1)\n    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)\n\n    conv2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[2]), name='conv2_1')(pool1)\n    conv2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[3]), name='conv2_2')(conv2)\n    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)\n\n    conv3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[4]), name='conv3_1')(pool2)\n    conv3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[5]), name='conv3_2')(conv3)\n    pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)\n\n    conv4 = Conv2D(feature_maps[3], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[6]), name='conv4_1')(pool3)\n    conv4 = Conv2D(feature_maps[3], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[7]), name='conv4_2')(conv4)\n    pool4 = MaxPooling2D(pool_size=(2, 2))(conv4)\n    \n\n    conv5 = Conv2D(feature_maps[4], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[8]), name='convDeep_1')(pool4)\n    conv5 = Conv2D(feature_maps[4], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[9]), name='convDeep_2')(conv5)\n\n\n    up_4 = UpSampling2D(size=(2, 2), name='upconv4_0')(conv5)\n    up_4 = Conv2D(feature_maps[3], (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[16]), name='upconv_4_1')(up_4)\n    conv_4 = Conv2D(feature_maps[3], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[17]), name='conv_4_1')(concatenate([conv4, up_4], axis=AXIS))\n    conv_4 = Conv2D(feature_maps[3], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[18]), name='conv_4_2')(conv_4)\n\n    up_3 = UpSampling2D(size=(2, 2), name='upconv3_0')(conv_4)\n    up_3 = Conv2D(feature_maps[2], (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[19]), name='upconv_3_1')(up_3)\n    conv_3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[20]), name='conv_3_1')(concatenate([conv3, up_3], axis=AXIS))\n    conv_3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[21]), name='conv_3_2')(conv_3)\n\n    up_2 = UpSampling2D(size=(2, 2), name='upconv2_0')(conv_3)\n    up_2 = Conv2D(feature_maps[1], (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[22]), name='upconv_2_1')(up_2)\n    conv_2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[23]), name='conv_2_1')(concatenate([conv2, up_2], axis=AXIS))\n    conv_2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[24]), name='conv_2_2')(conv_2)\n\n    up_1 = UpSampling2D(size=(2, 2), name='upconv1_0')(conv_2)\n    up_1 = Conv2D(last_layer, (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[25]), name='upconv_1_1')(up_1)\n    conv_1 = Conv2D(last_layer, (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[26]), name='conv_1_1')(concatenate([conv1, up_1], axis=AXIS))\n    conv_1 = Conv2D(last_layer, (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[27]), name='conv_1_2')(conv_1)\n\n    convOUT = Conv2D(1, (1, 1), activation='sigmoid', kernel_initializer=initializers.he_normal(W_SEED[28]), name='convOUT')(conv_1)\n\n    model = Model(inputs=[inputs], outputs=[convOUT])\n    model.compile(optimizer=Adam(lr=1e-5), loss=dice_coef_loss, metrics=[dice_coef, jaccard_distance])    \n    return model\n\n#------------------------------------------------------------------------------\ndef unet_3(feature_maps, last_layer):\n    inputs = Input((IMAGE_ROWS, IMAGE_COLS, 1), name='input')\n    conv1 = Conv2D(feature_maps[0], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[0]), name='conv1_1')(inputs)\n    conv1 = Conv2D(feature_maps[0], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[1]), name='conv1_2')(conv1)\n    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)\n\n    conv2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[2]), name='conv2_1')(pool1)\n    conv2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[3]), name='conv2_2')(conv2)\n    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)\n\n    conv3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[4]), name='conv3_1')(pool2)\n    conv3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[5]), name='conv3_2')(conv3)\n    pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)\n  \n\n    conv4 = Conv2D(feature_maps[3], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[8]), name='convDeep_1')(pool3)\n    conv4 = Conv2D(feature_maps[3], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[9]), name='convDeep_2')(conv4)\n\n\n    up_3 = UpSampling2D(size=(2, 2), name='upconv3_0')(conv4)\n    up_3 = Conv2D(feature_maps[2], (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[19]), name='upconv_3_1')(up_3)\n    conv_3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[20]), name='conv_3_1')(concatenate([conv3, up_3], axis=AXIS))\n    conv_3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[21]), name='conv_3_2')(conv_3)\n\n    up_2 = UpSampling2D(size=(2, 2), name='upconv2_0')(conv_3)\n    up_2 = Conv2D(feature_maps[1], (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[22]), name='upconv_2_1')(up_2)\n    conv_2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[23]), name='conv_2_1')(concatenate([conv2, up_2], axis=AXIS))\n    conv_2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[24]), name='conv_2_2')(conv_2)\n\n    up_1 = UpSampling2D(size=(2, 2), name='upconv1_0')(conv_2)\n    up_1 = Conv2D(last_layer, (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[27]), name='upconv_1_1')(up_1)\n    conv_1 = Conv2D(last_layer, (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[25]), name='conv_1_1')(concatenate([conv1, up_1], axis=AXIS))\n    conv_1 = Conv2D(last_layer, (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[26]), name='conv_1_2')(conv_1)\n\n    convOUT = Conv2D(1, (1, 1), activation='sigmoid', kernel_initializer=initializers.he_normal(W_SEED[27]), name='convOUT')(conv_1)\n\n    model = Model(inputs=[inputs], outputs=[convOUT])\n    model.compile(optimizer=Adam(lr=1e-5), loss=dice_coef_loss, metrics=[dice_coef, jaccard_distance])\n    return model\n\n#------------------------------------------------------------------------------\ndef unet_2(feature_maps, last_layer):\n    inputs = Input((IMAGE_ROWS, IMAGE_COLS, 1), name='input')\n    conv1 = Conv2D(feature_maps[0], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[0]), name='conv1_1')(inputs)\n    conv1 = Conv2D(feature_maps[0], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[1]), name='conv1_2')(conv1)\n    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)\n\n    conv2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[2]), name='conv2_1')(pool1)\n    conv2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[3]), name='conv2_2')(conv2)\n    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)\n  \n\n    conv3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[8]), name='convDeep_1')(pool2)\n    conv3 = Conv2D(feature_maps[2], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[9]), name='convDeep_2')(conv3)\n\n\n    up_2 = UpSampling2D(size=(2, 2), name='upconv2_0')(conv3)\n    up_2 = Conv2D(feature_maps[1], (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[18]), name='upconv_2_1')(up_2)\n    conv_2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[17]), name='conv_2_1')(concatenate([conv2, up_2], axis=AXIS))\n    conv_2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[16]), name='conv_2_2')(conv_2)\n\n    up_1 = UpSampling2D(size=(2, 2), name='upconv1_0')(conv_2)\n    up_1 = Conv2D(last_layer, (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[19]), name='upconv_1_1')(up_1)\n    conv_1 = Conv2D(last_layer, (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[20]), name='conv_1_1')(concatenate([conv1, up_1], axis=AXIS))\n    conv_1 = Conv2D(last_layer, (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[21]), name='conv_1_2')(conv_1)\n\n    convOUT = Conv2D(1, (1, 1), activation='sigmoid', kernel_initializer=initializers.he_normal(W_SEED[27]), name='convOUT')(conv_1)\n\n    model = Model(inputs=[inputs], outputs=[convOUT])\n    model.compile(optimizer=Adam(lr=1e-5), loss=dice_coef_loss, metrics=[dice_coef, jaccard_distance])\n    return model\n\ndef unet_1(feature_maps, last_layer):\n    inputs = Input((IMAGE_ROWS, IMAGE_COLS, 1), name='input')\n    conv1 = Conv2D(feature_maps[0], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[0]), name='conv1_1')(inputs)\n    conv1 = Conv2D(feature_maps[0], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[1]), name='conv1_2')(conv1)\n    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)\n  \n\n    conv2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[8]), name='convDeep_1')(pool1)\n    conv2 = Conv2D(feature_maps[1], (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[9]), name='convDeep_2')(conv2)\n\n\n    up_1 = UpSampling2D(size=(2, 2), name='upconv1_0')(conv2)\n    up_1 = Conv2D(last_layer, (2, 2), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[19]), name='upconv_1_1')(up_1)\n    conv_1 = Conv2D(last_layer, (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[20]), name='conv_1_1')(concatenate([conv1, up_1], axis=AXIS))\n    conv_1 = Conv2D(last_layer, (3, 3), activation='selu', padding='same', kernel_initializer=initializers.he_normal(W_SEED[21]), name='conv_1_2')(conv_1)\n\n    convOUT = Conv2D(1, (1, 1), activation='sigmoid', kernel_initializer=initializers.he_normal(W_SEED[22]), name='convOUT')(conv_1)\n\n    model = Model(inputs=[inputs], outputs=[convOUT])\n    model.compile(optimizer=Adam(lr=1e-5), loss=dice_coef_loss, metrics=[dice_coef, jaccard_distance])\n    return model\n\n","1fdd564d":"def train_cnn(feature_maps, last_layer, depth, model_name):\n    print(f\"Training model {model_name}\")\n    \n    model = None\n    if depth == 1:\n        model = unet_1(feature_maps, last_layer)\n    elif depth == 2:\n        model = unet_2(feature_maps, last_layer)\n    elif depth == 3:\n        model = unet_3(feature_maps, last_layer)\n    elif depth == 4:\n        model = unet_4(feature_maps, last_layer)\n    elif depth == 5:\n        model = unet_5(feature_maps, last_layer)\n    elif depth == 6:\n        model = unet_6(feature_maps, last_layer)\n        \n#     model.summary()\n    model_dir = 'model_' + model_name\n    if not os.path.exists(model_dir):\n        os.mkdir(model_dir)\n        \n    model_checkpoint = ModelCheckpoint(model_dir+'\/weights.h5')\n    csv_logger = CSVLogger(model_dir+'\/log.csv', append=True)\n    \n    print('-'*30)\n    print('Fitting model ' + model_name + '...')\n    print('-'*30)\n    \n    model.fit_generator(generator=train_datagen(), steps_per_epoch=50,\n                        epochs=EPOCHS_NO, initial_epoch=0, \n                        max_queue_size = 50, \n                        callbacks=[model_checkpoint, csv_logger], use_multiprocessing=True, workers=0)","54a69d40":"print('Initial data fetching')\nprint('-'*30)\n# data_fetch()\n\nif __name__ == '__main__':\n    base_depth_multiplier_last = [[8,5,2,24], [16,5,2,40], [64,4,2,64]] # [[64,4,2,64]] #[[8,5,2,24],[8,6,2,20],[16,5,2,40],[64,4,2,64]]\n    repetition = ['a']\n\n    for bdml in base_depth_multiplier_last:\n        b = bdml[0]\n        d = bdml[1]\n        m = bdml[2]\n        l = bdml[3]\n        b_str = 'b' + str(b) + '_'\n        d_str = 'd' + str(d) + '_'\n        m_str = 'm' + str(m).replace('.','') + '_'\n        l_str = 'l' + str(l) + '_'\n\n        feature_maps = np.zeros(d+1)\n        feature_maps[0] = b\n        for i in range(1,d+1):\n            feature_maps[i] = feature_maps[i-1] * m\n        print(feature_maps)\n\n        for r in repetition:\n            train_cnn(feature_maps.astype(int), l, d, b_str + d_str + m_str + l_str + r)","d37cb3fc":"def test_cnn(b, d, m, l, c: chr):\n    MODEL_PATH = f'\/kaggle\/working\/model_b{b}_d{d}_m{m}_l{l}_{c}\/'\n    print(MODEL_PATH)\n\n    feature_maps = np.zeros(d+1)\n    feature_maps[0] = b\n    for i in range(1,d+1):\n        feature_maps[i] = feature_maps[i-1] * m\n    fm = feature_maps.astype(int)\n\n    print('-'*30)\n    print(f'Loading saved model (model_b{b}_d{d}_m{m}_l{l}_{c})...')\n    model = None\n    if d == 6:\n        model = unet_6(fm, l)\n    elif d == 5:\n        model = unet_5(fm, l)\n    elif d == 4:\n        model = unet_4(fm, l)\n    elif d == 3:\n        model = unet_3(fm, l)\n    elif d == 2:\n        model = unet_2(fm, l)\n    elif d == 1:\n        model = unet_1(fm, l)\n    model.load_weights(MODEL_PATH + 'weights.h5')\n    \n    pred = model.predict(img_tr[60:,:,:,:])\n    loss, dc, j = model.evaluate(img_tr[60:,:,:,:], img_mask_tr[60:,:,:,:])\n    print(f'Loss: {loss}, Dice Coef: {dc}, Jaccard Distance: {j}')\n    \n    for i, k in enumerate(pred):\n        imsave(f'{MODEL_PATH}{60+i}.png', k)\n\n    return pred","5ae7b7d3":"model_1m_pred = test_cnn(8, 5, 2, 24, 'a')\n# model_1m_pred_b = test_cnn(8, 5, 2, 24, 'b')\n# model_1m_pred_c = test_cnn(8, 5, 2, 24, 'c')\nmodel_7m_pred = test_cnn(16, 5, 2, 40, 'a')\n# model_7m_pred_b = test_cnn(16, 5, 2, 40, 'b')\n# model_7m_pred_c = test_cnn(16, 5, 2, 40, 'c')\nmodel_31m_pred = test_cnn(64, 4, 2, 64, 'a')\n# model_31m_pred_b = test_cnn(64, 4, 2, 64, 'b')\n# model_31m_pred_c = test_cnn(64, 4, 2, 64, 'c')","0d9156bf":"def visualize(idx: int):\n    f, (ax0, ax1, ax2, ax3, ax4) = plt.subplots(1, 5, figsize=(25, 5))\n    ax0.imshow(img_tr[60+idx, :, :, 0])\n    ax1.imshow(img_mask_tr[60+idx, :, :, 0])\n    ax2.imshow(model_1m_pred[idx, :, :, 0])\n    ax3.imshow(model_7m_pred[idx, :, :, 0])\n    ax4.imshow(model_31m_pred[idx, :, :, 0])\n\n    ax0.set_title(f'Image {60+idx}')\n    ax1.set_title(f'OD Segmentation Ground Truth')\n    ax2.set_title(f'Model w\/ 1M trainable weight prediction')\n    ax3.set_title(f'Model w\/ 7M trainable weight prediction')    \n    ax4.set_title(f'Model w\/ 31M trainable weight prediction')","58b38f06":"visualize(10)","18dff9d6":"visualize(11)","a359e754":"visualize(12)","d9b33640":"## Sort Data","cc887f26":"## Test","4eeb57fd":"## Normalize","63dc1bed":"## Metrics","9943ec47":"## Train","7cfc61dc":"## Generate Data","ab420b16":"## Model UNet","d5222bca":"## Visualize"}}