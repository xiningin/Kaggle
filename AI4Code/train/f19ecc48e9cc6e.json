{"cell_type":{"c1b6921f":"code","4a400319":"code","5977b9a2":"code","c4ab3c26":"code","8a3e1cb2":"code","acc6f82c":"code","4ad7dce0":"code","c71adfd1":"code","5b218a4c":"code","2234c66a":"code","25feedac":"code","4f77f80f":"code","d5e713e4":"markdown","72605092":"markdown","593f2398":"markdown","48c7bdfd":"markdown","61aeceb0":"markdown"},"source":{"c1b6921f":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import log_loss, accuracy_score, confusion_matrix\nfrom  sklearn.metrics import accuracy_score, precision_recall_fscore_support, confusion_matrix # \u56de\u5e30\u554f\u984c\u306b\u304a\u3051\u308b\u6027\u80fd\u8a55\u4fa1\u306b\u95a2\u3059\u308b\u95a2\u6570\nimport seaborn as sns","4a400319":"df_cloudfound = pd.read_csv(\"..\/input\/kickstarter-projects\/ks-projects-201801.csv\")\ndf_cloudfound['state'] = df_cloudfound['state'] == \"successful\"\n\n# \u30c7\u30fc\u30bf\u8868\u793a\ndisplay(df_cloudfound.head(10))\ndf_cloudfound.describe()","5977b9a2":"# \u6563\u5e03\u56f3\u884c\u5217\u3092\u66f8\u3044\u3066\u307f\u308b\ndf_cloudfound_sct = pd.read_csv(\"..\/input\/kickstarter-projects\/ks-projects-201801.csv\")\npd.plotting.scatter_matrix(df_cloudfound_sct, figsize=(10,10))","c4ab3c26":"plt.show()# \u76f8\u95a2\u4fc2\u6570\u3092\u78ba\u8a8d\ndf_cloudfound.corr()","8a3e1cb2":"# \u76f8\u95a2\u4fc2\u6570\u3092\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u306b\u3057\u3066\u53ef\u8996\u5316\nsns.heatmap(df_cloudfound.corr())\nplt.show()","acc6f82c":"# category\u3054\u3068\u306estate\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u78ba\u8a8d\n# \u30c7\u30fc\u30bf\u5185\u306ecategory\u3092\u62bd\u51fa\u3057category\u306b\u683c\u7d0d\ncategory=df_cloudfound_sct.groupby('category')\n# state\u3092\u76f8\u5bfe\u7684\u306a\u983b\u5ea6\u306b\u5909\u63db\ncategory=category['state'].value_counts(normalize=True).unstack() \n# successful\u306e\u964d\u9806\u30bd\u30fc\u30c8\ncategory=category.sort_values(by=['successful'],ascending=False)\n# \u7e26\u68d2\u30b0\u30e9\u30d5\uff08\u7a4d\u307f\u4e0a\u3052\uff09\u3067\u30b0\u30e9\u30d5\u4f5c\u6210\ncategory[['successful','failed','canceled','live','suspended','undefined']].plot(kind='bar',stacked=True,figsize=(20,20))","4ad7dce0":"# country\u3054\u3068\u306estate\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u78ba\u8a8d\ncountry=df_cloudfound_sct.groupby('country')\ncountry=country['state'].value_counts(normalize=True).unstack()\ncountry=country.sort_values(by=['successful'],ascending=False)\nax=country[['successful','failed','canceled','live','suspended','undefined']].plot(kind='bar',stacked=True,figsize=(20,20))","c71adfd1":"# currency\u6bce\u306estate\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u78ba\u8a8d\ncurrency = df_cloudfound_sct.groupby('currency')\ncurrency = currency['state'].value_counts(normalize=True).unstack()\ncurrency = currency.sort_values(by=['successful'],ascending=False)\nax = currency[['successful','failed','canceled','live','suspended','undefined']].plot(kind='bar',stacked=True,figsize=(20,20))","5b218a4c":"df_cloudfound = pd.read_csv(\"..\/input\/kickstarter-projects\/ks-projects-201801.csv\")[['state', 'main_category', 'currency', 'country', 'goal']]\ndf_cloudfound['state'] = df_cloudfound['state'] == \"successful\"#bool\u578b\u306b\u5909\u63db\ndf_cloudfound['state'] = df_cloudfound['state'] * 1 #bool\u578b\u30920,1\u306b\u5909\u63db\n#'goal'\u30920\uff5e1\u306e\u7bc4\u56f2\u306b\u6b63\u898f\u5316\ndf0 = df_cloudfound['goal']  \ndf_cloudfound['goal'] = (df0 - df0.min()) \/ (df0.max() - df0.min())\n#'main_category'\u306a\u3069\u30e9\u30d9\u30eb\u30c7\u30fc\u30bf\u30920,1\u306e\u30c0\u30df\u30fc\u5909\u6570\u3067\u7f6e\u304d\u63db\u3048&\u5148\u982d\u884c\u524a\u9664\ndf_cloudfound = pd.get_dummies(df_cloudfound, drop_first=True) \n\n\n# \u30c7\u30fc\u30bf\u8868\u793a\ndisplay(df_cloudfound.head())","2234c66a":"y = df_cloudfound[\"state\"].values\nX = df_cloudfound.drop('state', axis=1).values\n\n\nclf = SGDClassifier(loss='log', penalty='none', max_iter=10000, fit_intercept=True, random_state=1234, tol=1e-3)\nclf.fit(X, y)\n\n# \u91cd\u307f\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a\n# w0 = clf.intercept_[0]\n# w1 = clf.coef_[0, 0]\n# w2 = clf.coef_[0, 1]\n# w3 = clf.coef_[0, 2]\n# w4 = clf.coef_[0, 3]\n# w5 = clf.coef_[0, 4]\n\n\n# print('w0 = {:.3f}, w1 = {:.3f}, w2 = {:.3f}, w3 = {:.3f}, w4 = {:.3f}, w5 = {:.3f}'.format(w0, w1, w2, w3, w4, w5))\nprint('\u56de\u5e30\u4fc2\u6570')\nprint(clf.coef_)","25feedac":"# \u30e9\u30d9\u30eb\u3092\u4e88\u6e2c\ny_pred = clf.predict(X)\n\n# \u6b63\u7b54\u7387\u3092\u8a08\u7b97\naccuracy =  accuracy_score(y, y_pred)\nprint('\u6b63\u7b54\u7387\uff08Accuracy\uff09 = {:.3f}%'.format(100 * accuracy))\n\n# Precision, Recall, F1-score\u3092\u8a08\u7b97\nprecision, recall, f1_score, _ = precision_recall_fscore_support(y, y_pred)\n\n# \u30ab\u30c6\u30b4\u30ea\u300c2000\u4e07\u4ee5\u4e0a\u300d\u306b\u95a2\u3059\u308bPrecision, Recall, F1-score\u3092\u8868\u793a\nprint('\u9069\u5408\u7387\uff08Precision\uff09 = {:.3f}%'.format(100 * precision[0]))\nprint('\u518d\u73fe\u7387\uff08Recall\uff09 = {:.3f}%'.format(100 * recall[0]))\nprint('F1\u5024\uff08F1-score\uff09 = {:.3f}%'.format(100 * f1_score[0]))","4f77f80f":"# \u4e88\u6e2c\u5024\u3068\u6b63\u89e3\u306e\u30af\u30ed\u30b9\u96c6\u8a08\nconf_mat = pd.DataFrame(confusion_matrix(y, y_pred), \n                        index=['\u6b63\u89e3 = Failed', '\u6b63\u89e3 = Successful'], \n                        columns=['\u4e88\u6e2c = Failed', '\u4e88\u6e2c = Successful'])\nconf_mat","d5e713e4":"# \uff11\uff0e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","72605092":"\u8aac\u660e\u5909\u6570\u5019\u88dc \ncategory or main_category \u2192\u3000\u4e21\u8005\u306e\u76f8\u95a2\u6027\u304c\u5f37\u3059\u304e\u308b\u306e\u3067\uff11\u3064\u3067\u3088\u3055\u305d\u3046\u3002\u3068\u308a\u3042\u3048\u305a\u6570\u304c\u5c11\u306a\u3044main_category\ncurrency \u2192\u3000\u3007\ngoal\u3000or usd_goal_real\u3000\u2192\u3000\u4e21\u8005\u306e\u76f8\u95a2\u6027\u304c\u5f37\u3059\u304e\u308b\u306e\u3067\uff11\u3064\u3067\u3088\u3055\u305d\u3046\u3002\u3068\u308a\u3042\u3048\u305agoal\ndeadline \u2192\u3000\u00d7:\u7de0\u65e5\u5358\u72ec\u3067\u7d50\u679c\u304c\u5909\u308f\u308b\u306a\u3089\u3001\u4e8b\u524d\u306e\u4e88\u6e2c\u3067\u306f\u610f\u5473\u306a\u3057\u3002\nlaunched \u2192\u3000\u00d7:\u958b\u59cb\u65e5\u5358\u72ec\u3067\u7d50\u679c\u304c\u5909\u308f\u308b\u306a\u3089\u3001\u4e8b\u524d\u306e\u4e88\u6e2c\u3067\u306f\u610f\u5473\u306a\u3057\u3002\ncountry\u3000\u2192\u3000\u3007\n","593f2398":"# 2.Scikit-learn\u3092\u7528\u3044\u305f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30","48c7bdfd":"\u8aac\u660e\u5909\u6570\u5019\u88dc \ncategory or main_category\ncurrency\ngoal\u3000or usd_goal_real\ndeadline\nlaunched\ncountry\n\nbackers,pledged\u95a2\u9023\u306f\u4e8b\u524d\u306e\u4e88\u6e2c\u306e\u305f\u3081\u5019\u88dc\u5916","61aeceb0":"# \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u305f\u30af\u30e9\u30a6\u30c9\u30d5\u30a1\u30f3\u30c7\u30a3\u30f3\u30b0\u306e\u6210\u529f\u4e88\u6e2c\n\uff08ks-projects-201801.csv\uff09"}}