{"cell_type":{"96d716d9":"code","afeaca93":"code","218aa394":"code","0f8cd922":"code","b4735cfe":"code","56c8419b":"code","805cb14d":"code","023152a8":"code","fd940097":"code","53d975cd":"code","bdc0df6d":"code","e5c11de0":"code","a49223cd":"code","d8528d01":"code","701a4b63":"code","0bcbadcc":"code","ef9255d0":"code","b7625456":"code","a987cd1b":"code","c7824644":"code","787c8d97":"code","c1bce572":"code","aae7e3ee":"code","92794d7d":"code","ccfe5be2":"code","8530d385":"markdown","cba32c8e":"markdown","5775df8c":"markdown","225a478d":"markdown","36b24f10":"markdown","ec6a3ac3":"markdown","6fea3d51":"markdown","58951a51":"markdown","db372232":"markdown","ac9046c9":"markdown","3870b642":"markdown","d01ba9a7":"markdown","8148a6ae":"markdown","6525b0fc":"markdown","6ccb7234":"markdown","8af1a96b":"markdown","a2d347cf":"markdown","47432c2e":"markdown"},"source":{"96d716d9":"import tensorflow as tf\nimport pandas as pd\nimport os\nimport numpy as np\nfrom xml.dom import minidom\nimport cv2\nimport matplotlib.pyplot as plt\nimport glob\nfrom sklearn.model_selection import train_test_split\nfrom skimage import io","afeaca93":"obj = minidom.parse('..\/input\/image-localization-dataset\/training_images\/cucumber_1.xml')\nwidth = obj.getElementsByTagName('width')\nint(width[0].firstChild.nodeValue)","218aa394":"img = cv2.imread('..\/input\/image-localization-dataset\/training_images\/cucumber_1.jpg',cv2.COLOR_BGR2RGB)\nplt.imshow(img)","0f8cd922":"def get_value(obj,name) :\n    a = int(obj.getElementsByTagName(name)[0].firstChild.nodeValue)\n    return a","b4735cfe":"xmin = get_value(obj,'xmin')\nymin = get_value(obj,'ymin')\nxmax = get_value(obj,'xmax')\nymax = get_value(obj,'ymax')\nwidth = get_value(obj,'width')\nheight = get_value(obj,'height')","56c8419b":"bnd_img = cv2.rectangle(img,(xmin,ymin),(xmax,ymax),(255,0,0),2)\nplt.imshow(bnd_img)","805cb14d":"def load_img(path) :\n    X = []\n    for i in sorted(glob.glob(path)) :\n        img = cv2.imread(i,cv2.COLOR_BGR2RGB)\n        X.append(img)\n    return np.asarray(X)","023152a8":"def load_xml(path) :\n    y = []\n    for i in sorted(glob.glob(path)) :\n        c = 0\n        obj = minidom.parse(i)\n        folder = obj.getElementsByTagName('folder')[0].firstChild.nodeValue\n        width = get_value(obj,'width')\n        height = get_value(obj,'height')\n        xmin = get_value(obj,'xmin')\n        ymin = get_value(obj,'ymin')\n        xmax = get_value(obj,'xmax')\n        ymax = get_value(obj,'ymax')\n        if \"cucumber\" in folder : \n            c = 1\n        elif \"eggplant\" in folder :\n            c = 2\n        elif \"mushroom\" in folder :\n            c = 3\n        y.append([c,xmin,ymin,xmax,ymax])\n    return np.asarray(y)","fd940097":"X = load_img('..\/input\/image-localization-dataset\/training_images\/*.jpg')\nX.shape","53d975cd":"Y = load_xml('..\/input\/image-localization-dataset\/training_images\/*.xml')\nY.shape","bdc0df6d":"X_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.2)\nX_train.shape,y_train.shape,X_test.shape,y_test.shape","e5c11de0":"y1_train = y_train[:,0:1]\ny1_test = y_test[:,0:1]\ny2_train = y_train[:,1:]\ny2_test = y_test[:,1:]\ny1_train.shape,y1_test.shape,y2_train.shape,y2_test.shape","a49223cd":"y1_train = tf.keras.utils.to_categorical(y1_train)\ny1_test = tf.keras.utils.to_categorical(y1_test)","d8528d01":"inp = tf.keras.layers.Input(shape=(227,227,3))\nres = tf.keras.applications.ResNet152V2(include_top=False,weights=\"imagenet\") (inp)\nflatten = tf.keras.layers.Flatten() (res)\nd1 = tf.keras.layers.Dense(128,activation='relu') (flatten)\nd2 = tf.keras.layers.Dense(128,activation='relu') (d1)\nout1 = tf.keras.layers.Dense(4,activation='softmax') (d2)\nd3 = tf.keras.layers.Dense(256,activation='relu') (d2)\nd4 = tf.keras.layers.Dense(256,activation='relu') (d3)\nout2 = tf.keras.layers.Dense(4) (d4)\n\nmodel = tf.keras.models.Model(inputs=inp,outputs=[out1,out2])\nmodel.summary()","701a4b63":"tf.keras.utils.plot_model(model)","0bcbadcc":"model.compile(optimizer='adam',loss=['categorical_crossentropy','huber'])","ef9255d0":"model.fit(X_train,[y1_train,y2_train],epochs=100)","b7625456":"model.evaluate(X_test,[y1_test,y2_test])","a987cd1b":"pred_img = cv2.imread('..\/input\/image-localization-dataset\/training_images\/mushroom_13.jpg')\nc,bnd = model.predict(np.asarray([pred_img]))","c7824644":"bnd = np.round(bnd)\nbnd = bnd.astype('int64')\nbnd","787c8d97":"c = np.round(c)","c1bce572":"def predict(img_path,model,url=False) :\n    if url :\n        pred_img = io.imread(img_path)\n    else :\n        pred_img = cv2.imread(img_path)\n    pred_img = cv2.resize(pred_img,(227,227))\n    c,bnd = model.predict(np.asarray([pred_img]))\n    c = np.round(c)\n    bnd = np.round(bnd)\n    bnd = bnd.astype('int64')\n    img = cv2.rectangle(pred_img,(bnd[0][0],bnd[0][1]),(bnd[0][2],bnd[0][3]),(255,0,0),1)\n    fruit = ''\n    if c[0][1] == 1 :\n        fruit = 'Cucumber'\n    elif c[0][2] == 1 :\n        fruit = 'Egg Plant'\n    elif c[0][3] == 1 :\n        fruit = 'Mushroom'\n    img = cv2.putText(img,fruit,(bnd[0][0],bnd[0][1]-3),cv2.FONT_HERSHEY_SIMPLEX,0.3,(0,255,0),1,255)\n    plt.imshow(img)","aae7e3ee":"predict('https:\/\/cvhockey.com\/wp-content\/uploads\/2019\/04\/46d2cdd49161a3a2eec8f198818677b5.jpg',model,True)","92794d7d":"predict('https:\/\/i5.walmartimages.ca\/images\/Enlarge\/094\/566\/6000200094566.jpg',model,True)","ccfe5be2":"predict('https:\/\/www.first-nature.com\/fungi\/images\/lyophyllaceae\/calocybe-gambosa4.jpg',model,True)","8530d385":"**Helper function used in Prediction**","cba32c8e":"**Loading Features and Targets**","5775df8c":"**Helper functions to load features (X) and targets (Y) as Numpy Arrays**","225a478d":"**Example : Plotting Images using Matplotlib**","36b24f10":"**Import the required Modules**","ec6a3ac3":"**Fitting the model to Training Set**","6fea3d51":"**Creating a custom model which uses ResNet using Functional API**","58951a51":"**Separating the Target Variables (One for Fruit Prediction and Other for Bounding Box Prediction)**","db372232":"**Example : Using Minidom to work with XML files**","ac9046c9":"**Example : Getting the required from XML**","3870b642":"**Compilation of the Model**","d01ba9a7":"**Predicting a Random Photo**","8148a6ae":"# **Image Localization using Tensorflow**","6525b0fc":"**Evaluating the Test Set**","6ccb7234":"**Spiltting the data into Train and Test Sets**","8af1a96b":"**Plotting the model**","a2d347cf":"**Example : Drawing Bounding Box around the object using OpenCV**","47432c2e":"**Various Predictions of Online Images**"}}