{"cell_type":{"9e8e40a6":"code","5d8955b6":"code","21364fc3":"code","a94922fd":"code","9854a659":"code","2908378b":"code","47cb7eab":"code","d683c41b":"code","6fccb8c2":"code","18fc144f":"code","5edfa6b4":"code","bf1e1cd3":"code","b33694c8":"code","dcd7c0f1":"code","315f450f":"code","8c064d99":"code","cabc0f78":"code","07402c05":"code","6dae3c00":"code","926b1529":"code","d2368abc":"code","28625f72":"code","9bd7e3fd":"code","75099928":"code","76fc533a":"code","b954c136":"code","54356d72":"code","caeea58a":"markdown","3fea3829":"markdown","6d63a7fe":"markdown","c568e16e":"markdown","64572768":"markdown"},"source":{"9e8e40a6":"!pip install dnspython -q","5d8955b6":"!pip install demoji -q\nimport demoji\ndemoji.download_codes()\n","21364fc3":"from sklearn.feature_extraction.text import CountVectorizer\nimport pandas as pd\nimport numpy as np\nimport pymongo\nimport re\nimport string\n","a94922fd":"import matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\n\ndef myWordCloud(data,title):\n  wordcloud = WordCloud(width = 1000, height = 600, \n                background_color ='white', \n                stopwords = stopwords, \n                min_font_size = 10).generate(' '.join(data)) \n  \n  # plot the WordCloud image                        \n  plt.figure(figsize = (8, 8), facecolor = None) \n  plt.imshow(wordcloud) \n  plt.axis(\"off\") \n  plt.tight_layout(pad = 0) \n  plt.title(title)\n  plt.show()","9854a659":"def mongoConecta(url, database, collection):\n    #print(pymongo.version)\n    mongo_url = url\n    cliente = pymongo.MongoClient(mongo_url)\n    DB = cliente[database]\n    DC = DB[collection]\n    return DC, cliente","2908378b":"# Mongo Connecet\nfrom setup_mongo import MDB # file with dataconnect ==> url=\"YOUR URL MONGODB\", database='YOUR DATABASE', collection='YOUR COLLECTION'\nurlMDB, databaseMDB, collectionMDB = MDB()\ndc, c = mongoConecta(url=urlMDB,  database=databaseMDB, collection=collectionMDB)","47cb7eab":"def cleaningText(txtOriginal, show=False):\n  txt = txtOriginal\n  txt = txt.lower() # lowercase\n  txt = re.sub('@','',txt) # remove @ \n  txt = re.sub('\\[.*\\]','',txt) # remove contents between brackets\n  txt = re.sub('<.*?>+','',txt) # remove contents between less and more signs\n  txt = re.sub('https?:\/\/\\S+|www\\.\\S+', '', txt) # remove URLs\n  txt = re.sub('https', '', txt) # remove URLs\n  txt = re.sub(re.escape(string.punctuation), '', txt) # remove punctuation\n  txt = re.sub(r'[^a-zA-Z ]+', '', txt) # remove numbers\n  txt = re.sub('\\n', '', txt) # remove line break\n  txt = str(txt).strip()\n  if show:\n    print('ORIGINAL: ', txtOriginal)\n    print('   TEXT CLEANNED: ', txt)\n  return txt\n\ndef minText(txtOriginal, size=4):\n  txt = ''\n  for t in txtOriginal.split(' '):\n    if len(t)>=size:\n      txt += f'{t} '\n  return txt","d683c41b":"# mongo filtered\nfilterA = 'covid'\nfilterB = '02\/05'  # month\/day\nfiltro = {'text': {\"$regex\": filterA}, \"data\": filterB, 'location': {'$ne': 'null'}}\ndataset2 = dc.find(filtro)","6fccb8c2":"df2 = pd.DataFrame(dataset2)\ndf2.shape","18fc144f":"df2.info()","5edfa6b4":"df2[['data', 'hora', 'location']].describe()","bf1e1cd3":"df2.isna().sum()","b33694c8":"df2[['data', 'hora', 'location', 'language']].head()","dcd7c0f1":"df2[['data', 'hora', 'location', 'language']].tail()","315f450f":"def extractEmoji(e):  \n  try:\n    xyz = demoji.findall(e)\n    for em in xyz:\n      ems.append(em)\n  except:\n    pass","8c064d99":"# count emojis\nems = [] \nfor x in df2.text.values:\n  extractEmoji(x)","cabc0f78":"dfEmoji = pd.DataFrame()\ndfEmoji['emoji'] = ems\ndfEmoji['cont'] = 1","07402c05":"topEmojis = dfEmoji.groupby('emoji').count().sort_values(by='cont', ascending=False)\ntopEmojis[:10]","6dae3c00":"import plotly.express as px\nimport pandas as pd\n\nlimite = 10\n\nd = {\"emoji\": topEmojis.index[:limite].tolist(),\n     \"value\": topEmojis.values.flatten()[:limite].tolist(),\n      }\n\npx.scatter(pd.DataFrame(d), x=\"emoji\", y=\"value\", size='value', color='emoji', \n           template='plotly_white', title=f\"Top {limite} Emojis\")","926b1529":"df2['text2'] = df2.text.apply(lambda x: cleaningText(x))\ndf2.text2 = df2.text2.apply(lambda x: minText(x))\n","d2368abc":"#count words\ncv = CountVectorizer()\nmatriz = cv.fit_transform(df2.text2)\ncontaPalavra = pd.DataFrame(cv.get_feature_names(), columns={'Word'})\ncontaPalavra['Counter'] = matriz.sum(axis=0).tolist()[0]\ncontaPalavra = contaPalavra.sort_values('Counter', ascending=False).reset_index(drop=True)\ncontaPalavra[:10] # top 10","28625f72":"myWordCloud(contaPalavra.Word, f'Top words about COVID - @italocosta_ twitter timeline - {filterB}')","9bd7e3fd":"import plotly.express as px\n\n!pip install vaderSentiment -q\nimport vaderSentiment\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\nreadSentiment = SentimentIntensityAnalyzer()\n\ndef getSentimentVader(phrase):\n  s = readSentiment.polarity_scores(phrase)\n  if s['compound'] <= -0.05:\n    sentiment = 0\n  elif s['compound'] >= 0.05:\n    sentiment = 1\n  else:\n    sentiment = 2\n  return sentiment, s","75099928":"df2['sentiment'] = df2.text2.apply(lambda x: getSentimentVader(x)[0])\ndfS = df2[['sentiment','text2']].groupby('sentiment').count()","76fc533a":"colors=['orange', 'Darkblue', 'Darkred']\nsentiments = ['Negative', 'Positive', 'Neutral']\npx.pie(names=sentiments, values=dfS.text2.values, title='Sentiment Analysis - Tweets - by Vader', \n       color_discrete_sequence=px.colors.sequential.Sunset, width=600)","b954c136":"import textblob\nfrom textblob import TextBlob\n\ndef getSentimentTB(txt=''):\n    txt = TextBlob(txt)\n    txt = txt.sentiment.polarity\n    if txt <= -0.05:\n      sentiment = 0\n    elif txt >= 0.05:\n      sentiment = 1\n    else:\n      sentiment = 2\n    return sentiment\n\ndf2['sentimentTB'] = df2.text2.apply(lambda x: getSentimentTB(x))\ndfS = df2[['sentimentTB','text2']].groupby('sentimentTB').count()","54356d72":"px.pie(names=sentiments, values=dfS.text2.values, title='Sentiment Analysis - Tweets - by TextBlob', \n       color_discrete_sequence=px.colors.sequential.Sunset, width=600)","caeea58a":"# Dashboard Top Emojis","3fea3829":"# Exploratory Data Analytics","6d63a7fe":"# Sentiment Analysis","c568e16e":"# Dashboard Top Words","64572768":"**Tweets abour COVID 19 - my timeline**"}}