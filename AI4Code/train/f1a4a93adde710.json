{"cell_type":{"81f79a45":"code","3af5c031":"code","72d1f76f":"code","aa2499e2":"code","e19bdc37":"code","ca1037b1":"code","6672b1a9":"code","5b0e928d":"code","d239c310":"code","b3b79d57":"code","b76dee37":"code","c2d466a5":"code","c9e0567e":"code","6607f088":"code","28f4f1b1":"code","5f0f110c":"code","ee0939c8":"code","d007a69e":"code","957a61c7":"code","25b39358":"code","b619380f":"code","46231f93":"code","8c8ce6d5":"code","ee576db0":"code","308dbea6":"code","b095c435":"code","74c10959":"code","d44ca1ab":"code","ef7b34e9":"code","9ac9f629":"code","24505c35":"code","fff18f3e":"code","89fb696d":"code","1d67c0a0":"code","bdebe6dc":"code","cc3ea872":"code","66c81a74":"code","0b06569f":"code","9d565226":"code","2d9e56e3":"code","8dce0451":"code","76bbbc14":"code","92d60c66":"code","a8dbb1d6":"code","3b677807":"code","c611aad6":"code","eb88e90b":"code","84b5089e":"code","9df668e6":"code","d2a18ea6":"code","09a3be4b":"code","cbcc3e21":"code","1b0786ce":"code","3f82baa7":"code","0a672a61":"code","70915e02":"code","8220774e":"code","fc5dc1e9":"markdown","3d35bd16":"markdown","6ae29516":"markdown","49ab41fe":"markdown","dd8c870e":"markdown","c7640dea":"markdown","c59bddca":"markdown","f9f24038":"markdown","29db0431":"markdown","064c186e":"markdown","671abf1a":"markdown","91c47531":"markdown","da788e37":"markdown","24080f25":"markdown","f563dc56":"markdown","358c9134":"markdown","6b88c441":"markdown"},"source":{"81f79a45":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#scikit-learn\nfrom sklearn import tree\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3af5c031":"df1 = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf2 = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","72d1f76f":"#\u30c7\u30fc\u30bf\u306e\u5927\u304d\u3055\ndef data_size(df):\n    display(str(df.shape))\n    \nprint('train data')\ndata_size(df1)\nprint('test data')\ndata_size(df2)","aa2499e2":"#\u5909\u6570\u306e\u78ba\u8a8d\ndef keys_data(df):\n    display(df.keys())\n    \nprint('train data')\nkeys_data(df1)\nprint('test data')\nkeys_data(df2)","e19bdc37":"#\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\ndef all_data(df):\n    display(df.head().append(df.tail()))\n    \nprint('train data')\nall_data(df1)\nprint('test data')\nall_data(df2)","ca1037b1":"train_x = df1.drop('SalePrice', axis=1)\ntrain_y = df1['SalePrice']\n#train data\u3068test data\u3092\u7d50\u5408\nall_data = pd.concat([train_x,df2],axis=0,sort=True)","6672b1a9":"#\u305d\u308c\u305e\u308c\u306e\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\nprint('train_x: '+str(train_x.shape)) #\u8aac\u660e\u5909\u6570\u306e\u30b5\u30a4\u30ba\nprint('train_y: '+str(train_y.shape)) #\u76ee\u7684\u5909\u6570\u306e\u30b5\u30a4\u30ba\nprint('all_data: '+str(all_data.shape)) #train data\u3068test data\u306e\u8aac\u660e\u5909\u6570\u306e\u30b5\u30a4\u30ba\u306e\u5408\u8a08","5b0e928d":"#\u6b20\u640d\u5024\u306e\u78ba\u8a8d\nnan_data = all_data.isnull().sum()[all_data.isnull().sum()>0].sort_values(ascending=False)\nnan_data","d239c310":"#\u6b20\u640d\u5024\u306e\u6570\u306e\u30b0\u30e9\u30d5\u5316\nplt.figure(figsize=(20,15))\nplt.xticks(rotation='90')\nsns.barplot(x=nan_data.index, y=nan_data)","b3b79d57":"#\u76f8\u95a2\u4fc2\u6570\u306e\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\ncorrmat = df1.corr()\ncorr = corrmat.nlargest(10, 'SalePrice')['SalePrice'].index\ncc = np.corrcoef(df1[corr].values.T)\nfig, ax = plt.subplots(figsize=(15,15))\nsns.set(font_scale=2.2)\nsns.heatmap(cc, cbar=True, annot=True, fmt='2f', annot_kws={'size': 10}, yticklabels=corr.values, xticklabels=corr.values)\nplt.show()\nfig.savefig('figure4.png')","b76dee37":"#\u8aac\u660e\u5909\u6570\u306e\u5019\u88dc\u3068\u306a\u308b\uff16\u3064\u306e\u30c7\u30fc\u30bf\u78ba\u8a8d\n#train data\nID = df1['Id']\nOverallQual = df1['OverallQual']\nGrLivArea = df1['GrLivArea']\nGarageCars = df1['GarageCars']\nTotalBsmtSF = df1['TotalBsmtSF']\nFullBath = df1['FullBath']\nYearBuilt = df1['YearBuilt']\n#test data\nID_2 = df2['Id']\nOverallQual_2 = df2['OverallQual']\nGrLivArea_2 = df2['GrLivArea']\nGarageCars_2 = df2['GarageCars']\nTotalBsmtSF_2 = df2['TotalBsmtSF']\nFullBath_2 = df2['FullBath']\nYearBuilt_2 = df2['YearBuilt']","c2d466a5":"#train data\ndf3 = pd.concat([ID, OverallQual, GrLivArea, GarageCars, TotalBsmtSF, FullBath, YearBuilt], axis=1)\ndf3","c9e0567e":"df4 = pd.concat([ID_2, OverallQual_2, GrLivArea_2, GarageCars_2, TotalBsmtSF_2, FullBath_2, YearBuilt_2], axis=1)\ndf4","6607f088":"#\u6b20\u640d\u5024\u306e\u78ba\u8a8d\ndef nan_data(df):\n    display(df.isnull().sum())\n\nprint('train data')\nnan_data(df3)\nprint('test data')\nnan_data(df4)","28f4f1b1":"#GarageCars\u306e\u6b20\u640d\u5024\u306b0\u3092\u4ee3\u5165\ndf2['GarageCars'] = df2['GarageCars'].fillna(0)\n#TotalBsmtSF\u306e\u6b20\u640d\u5024\u306b0\u3092\u4ee3\u5165\ndf2['TotalBsmtSF'] = df2['TotalBsmtSF'].fillna(0)","5f0f110c":"#\u6b20\u640d\u5024\u306e\u78ba\u8a8d\nGarageCars_2 = df2['GarageCars']\nTotalBsmtSF_2 = df2['TotalBsmtSF']\ndf4 = pd.concat([ID_2, OverallQual_2, GrLivArea_2, GarageCars_2, TotalBsmtSF_2, FullBath_2, YearBuilt_2], axis=1)\ndf4.isnull().sum()","ee0939c8":"#SalePrice\u306e\u7d71\u8a08\u91cf\ndf1['SalePrice'].describe()","d007a69e":"#\u8aac\u660e\u5909\u6570\u306e\u7d71\u8a08\u91cf\ndef data_des(df):\n    display(df.describe())\n    \nprint('train data')\ndata_des(df3)\nprint('test data')\ndata_des(df4)","957a61c7":"sns.distplot(df1['SalePrice'])","25b39358":"#\u6b6a\u5ea6\u3001\u5c16\u5ea6\nprint(\"\u6b6a\u5ea6: %f\" % df1['SalePrice'].skew())\nprint(\"\u5c16\u5ea6: %f\" % df1['SalePrice'].kurt())","b619380f":"#\u6b63\u898f\u5206\u5e03\u306b\u8fd1\u3065\u3051\u308b\nsns.distplot(np.log(df1['SalePrice']))","46231f93":"fig, ax = plt.subplots(figsize=(15,15))\nx=df1['OverallQual'].values\ny=df1['SalePrice'].values\nplt.scatter(x, y)\nplt.xlabel('OverallQual', fontsize=15)\nplt.ylabel('SalePrice', fontsize=15)\nplt.title('OverallQual', fontsize=15)\nplt.show()","8c8ce6d5":"#\u5916\u308c\u5024\u304cOverallQual=10,SalePrice<200000\u3068\u3059\u308b\u3002\ndf1 = df1.drop(df1[(df1['OverallQual'] == 10) & (df1['SalePrice'] < 200000)].index)\nfig, ax = plt.subplots(figsize=(15,15))\nx=df1['OverallQual'].values\ny=df1['SalePrice'].values\nplt.scatter(x, y)\nplt.xlabel('OverallQual', fontsize=15)\nplt.ylabel('SalePrice', fontsize=15)\nplt.title('OverallQual', fontsize=15)\nplt.show()","ee576db0":"plt.figure(figsize=(20, 10))\nplt.xticks(rotation='90')\nsns.boxplot(x='GrLivArea',y='SalePrice',data=df1)","308dbea6":"#\u5916\u308c\u5024\u3092GrLivArea>4000\u3068\u3059\u308b\u3002\ndf1 = df1.drop(df1[(df1['GrLivArea']>4000)].index)\nplt.figure(figsize=(20, 10))\nplt.xticks(rotation='90')\nsns.boxplot(x='GrLivArea',y='SalePrice',data=df1)","b095c435":"fig, ax = plt.subplots(figsize=(15,15))\nx=df1['GarageCars'].values\ny=df1['SalePrice'].values\nplt.scatter(x, y)\nplt.xlabel('GarageCars', fontsize=15)\nplt.ylabel('SalePrice', fontsize=15)\nplt.title('GarageCars', fontsize=15)\nplt.show()","74c10959":"#\u7bb1\u3072\u3052\u56f3\nfig, ax = plt.subplots(figsize=(15,15))\nax.boxplot([df1['TotalBsmtSF'], df2['TotalBsmtSF']], labels=['train data', 'test data'])\nax.set_title('TotalBsmtSF')\nax.set_ylabel('Data')\nplt.show()","d44ca1ab":"#\u6563\u5e03\u56f3\nfig, ax = plt.subplots(figsize=(15,15))\nx=df1['TotalBsmtSF'].values\ny=df1['SalePrice'].values\nplt.scatter(x, y)\nplt.xlabel('TotalBsmtSF', fontsize=15)\nplt.ylabel('SalePrice', fontsize=15)\nplt.title('TotalBsmtSF', fontsize=15)\nplt.show()","ef7b34e9":"df1 = df1.drop(df1[(df1['TotalBsmtSF'] > 3000) & (df1['SalePrice'] < 300000)].index)\nfig, ax = plt.subplots(figsize=(15,15))\nx=df1['TotalBsmtSF'].values\ny=df1['SalePrice'].values\nplt.scatter(x, y)\nplt.xlabel('TotalBsmtSF', fontsize=15)\nplt.ylabel('SalePrice', fontsize=15)\nplt.title('TotalBsmtSF', fontsize=15)\nplt.show()","9ac9f629":"fig, ax = plt.subplots(figsize=(15,15))\nx=df1['FullBath'].values\ny=df1['SalePrice'].values\nplt.scatter(x, y)\nplt.xlabel('FullBath', fontsize=15)\nplt.ylabel('SalePrice', fontsize=15)\nplt.title('FullBath', fontsize=15)\nplt.show()","24505c35":"#\u5916\u308c\u5024\u3092FullBath=0,SalePrice>300000\u3068\u3059\u308b\u3002\ndf1 = df1.drop(df1[(df1['FullBath'] == 0) & (df1['SalePrice'] > 300000)].index)\nfig, ax = plt.subplots(figsize=(15,15))\nx=df1['FullBath'].values\ny=df1['SalePrice'].values\nplt.scatter(x, y)\nplt.xlabel('FullBath', fontsize=15)\nplt.ylabel('SalePrice', fontsize=15)\nplt.title('FullBath', fontsize=15)\nplt.show()","fff18f3e":"plt.figure(figsize=(20, 10))\nplt.xticks(rotation='90')\nsns.boxplot(x='YearBuilt',y='SalePrice',data=df1)","89fb696d":"#\u5916\u308c\u5024\u3092YearBuilt<2000,SalePrice>600000\u3068\u3059\u308b\u3002\ndf1 = df1.drop(df1[(df1['YearBuilt']<2000) & (df1['SalePrice']>600000)].index)\nplt.figure(figsize=(20, 10))\nplt.xticks(rotation='90')\nsns.boxplot(x='YearBuilt',y='SalePrice',data=df1)","1d67c0a0":"#train data\nID = df1['Id']\nOverallQual = df1['OverallQual']\nGrLivArea = df1['GrLivArea']\nGarageCars = df1['GarageCars']\nTotalBsmtSF = df1['TotalBsmtSF']\nFullBath = df1['FullBath']\nYearBuilt = df1['YearBuilt']\ndf3 = pd.concat([ID, OverallQual, GrLivArea, GarageCars, TotalBsmtSF, FullBath, YearBuilt], axis=1)\n#test data\nID_2 = df2['Id']\nOverallQual_2 = df2['OverallQual']\nGrLivArea_2 = df2['GrLivArea']\nGarageCars_2 = df2['GarageCars']\nTotalBsmtSF_2 = df2['TotalBsmtSF']\nFullBath_2 = df2['FullBath']\nYearBuilt_2 = df2['YearBuilt']\ndf4 = pd.concat([ID_2, OverallQual_2, GrLivArea_2, GarageCars_2, TotalBsmtSF_2, FullBath_2, YearBuilt_2], axis=1)","bdebe6dc":"#train data, test data, \u76ee\u7684\u5909\u6570\u306e3\u3064\u306b\u5206\u3051\u308b\ntrain_data = df3.values\ntest_data = df4.values\ntarget = df1['SalePrice'].values","cc3ea872":"#\u6c7a\u5b9a\u6728\u7cfb\u306e\u30e2\u30c7\u30eb\u3092\u5229\u7528\ntree_1 = tree.DecisionTreeClassifier()\ntree_1 = tree_1.fit(train_data, target)","66c81a74":"#test data\u306e\u8aac\u660e\u5909\u6570\u3092\u5229\u7528\u3057\u3066\u4e88\u6e2c\nprediction_1 = tree_1.predict(test_data)\n#\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u78ba\u8a8d\nprediction_1.shape","0b06569f":"#\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\nprint(prediction_1)","9d565226":"ID_0 = np.array(df2['Id']).astype(int)\nsolution = pd.DataFrame(prediction_1, ID_0, columns = ['SalePrice'])","2d9e56e3":"solution.to_csv('tree1.csv', index_label = ['Id'])","8dce0451":"#\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\nprint(solution)","76bbbc14":"#train data\u3068\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u6bd4\u8f03\nsns.distplot(df1['SalePrice'])\nplt.show()\nsns.distplot(solution)\nplt.show()","92d60c66":"train_X = df3.drop(['Id'], axis=1)\ntrain_y = df1['SalePrice']\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()","a8dbb1d6":"#feature importance\u3067\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u3092\u78ba\u8a8d\ntree_1 = tree.DecisionTreeClassifier(random_state=0)\ntree_1 = tree_1.fit(train_X, train_y)\nrank = np.argsort(-tree_1.feature_importances_)\nfig, ax = plt.subplots(figsize=(15,15))\nsns.barplot(x=tree_1.feature_importances_[rank], y=train_X.columns.values[rank], orient='h')\nplt.title('Feature Importance')\nplt.tight_layout()\nplt.show()","3b677807":"#\u4e88\u6e2c\u7d50\u679c\u7b97\u51fa\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nX = df3.drop(['Id'], axis=1)\nY = df1['SalePrice']\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state=60)\n\ntree_1 = DecisionTreeRegressor(max_depth=6, random_state=60)\ntree_1 = tree_1.fit(X_train, Y_train)\n\nprint('train:', tree_1.score(X_train, Y_train))\nprint('test:', tree_1.score(X_test, Y_test))","c611aad6":"#train data\nID = df1['Id']\nOverallQual = df1['OverallQual']\nGrLivArea = df1['GrLivArea']\nTotalBsmtSF = df1['TotalBsmtSF']\nYearBuilt = df1['YearBuilt']\nGarageCars = df1['GarageCars']\ndf5 = pd.concat([ID, OverallQual, GrLivArea, TotalBsmtSF, YearBuilt, GarageCars], axis=1)\n#test data\nID_2 = df2['Id']\nOverallQual_2 = df2['OverallQual']\nGrLivArea_2 = df2['GrLivArea']\nTotalBsmtSF_2 = df2['TotalBsmtSF']\nYearBuilt_2 = df2['YearBuilt']\nGarageCars_2 = df2['GarageCars']\ndf6 = pd.concat([ID_2, OverallQual_2, GrLivArea_2, TotalBsmtSF_2, YearBuilt_2, GarageCars_2], axis=1)","eb88e90b":"#train data, test data, \u76ee\u7684\u5909\u6570\u306e3\u3064\u306b\u5206\u3051\u308b\ntrain_data = df5.values\ntest_data = df6.values\ntarget = df1['SalePrice'].values","84b5089e":"#\u6c7a\u5b9a\u6728\u7cfb\u306e\u30e2\u30c7\u30eb\u3092\u5229\u7528\ntree_2 = tree.DecisionTreeClassifier()\ntree_2 = tree_1.fit(train_data, target)","9df668e6":"#test data\u306e\u8aac\u660e\u5909\u6570\u3092\u5229\u7528\u3057\u3066\u4e88\u6e2c\nprediction_2 = tree_2.predict(test_data)\n#\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u78ba\u8a8d\nprediction_2.shape","d2a18ea6":"#\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\nprint(prediction_2)","09a3be4b":"ID_1 = np.array(df2['Id']).astype(int)\nsolution_1 = pd.DataFrame(prediction_2, ID_1, columns = ['SalePrice'])","cbcc3e21":"solution_1.to_csv('tree2.csv', index_label = ['Id'])","1b0786ce":"#\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\nprint(solution_1)","3f82baa7":"#train data\u3068\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u6bd4\u8f03\nsns.distplot(df1['SalePrice'])\nplt.show()\nsns.distplot(solution_1)\nplt.show()","0a672a61":"train_x = df5\ntrain_y = df1['SalePrice']\nrf = RandomForestRegressor()","70915e02":"#feature importance\u3067\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u3092\u78ba\u8a8d\ntree_2 = tree.DecisionTreeClassifier(random_state=0)\ntree_2 = tree_2.fit(train_x, train_y)\nrank = np.argsort(-tree_2.feature_importances_)\nfig, ax = plt.subplots(figsize=(15,15))\nsns.barplot(x=tree_2.feature_importances_[rank], y=train_x.columns.values[rank], orient='h')\nplt.title('Feature Importance')\nplt.tight_layout()\nplt.show()","8220774e":"#\u4e88\u6e2c\u7d50\u679c\u7b97\u51fa\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nx = df5\ny = df1['SalePrice']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, random_state=60)\n\ntree_2 = DecisionTreeRegressor(max_depth=6, random_state=60)\ntree_2 = tree_2.fit(x_train, y_train)\n\nprint('train:', tree_2.score(x_train, y_train))\nprint('test:', tree_2.score(x_test, y_test))","fc5dc1e9":"* TotalBsmtSF","3d35bd16":"# \u524d\u51e6\u7406","6ae29516":"# \u53ef\u8996\u5316","49ab41fe":"* YearBuilt","dd8c870e":"* OverallQual","c7640dea":"* GrLivArea","c59bddca":"* FullBath","f9f24038":"* SalePrice","29db0431":"* \u8aac\u660e\u5909\u6570\u306e\u9078\u629e","064c186e":"* \u8aac\u660e\u5909\u6570\u3092\"OverallQual, GrLivArea, GarageCars, TotalBsmtSF, FullBath, YearBuilt\"\u306e6\u3064\u3068\u3057\u3066\u884c\u3046\u3002","671abf1a":"\u6b20\u640d\u5024\u306e\u4e2d\u306b\u306f\u305d\u306e\u5bb6\u306b\u5b58\u5728\u3057\u306a\u3044\u3053\u3068\u304b\u3089\u6b20\u640d\u5024\u3068\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u304c\u3042\u308b\u3002","91c47531":"\u6b20\u640d\u5024\u304c\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d","da788e37":"# \u30e2\u30c7\u30eb\u69cb\u7bc9","24080f25":"# FullBath\u306e\u91cd\u8981\u5ea6\u304c\u4f4e\u3044\u306e\u3067\u8aac\u660e\u5909\u6570\u304b\u3089\u5916\u3057\u3066\u8003\u3048\u308b\u3002","f563dc56":"* GarageCars","358c9134":"test data\u306b\u6b20\u640d\u5024\u304c\u5b58\u5728\u3002\n\n* GarageCars\u306f\u30ac\u30ec\u30fc\u30b8\u306b\u5165\u308b\u8eca\u306e\u53f0\u6570\u306a\u306e\u3067\u6b20\u640d\u5024\u3068\u306a\u3063\u3066\u3044\u308b\u5bb6\u306f\u30ac\u30ec\u30fc\u30b8\u304c\u306a\u3044\u306e\u30670\u3092\u4ee3\u5165\u3002\n* TotalBsmtSF\u306f\u5730\u4e0b\u90e8\u5c4b\u306e\u9762\u7a4d\u306e\u5408\u8a08\u306a\u306e\u3067\u540c\u3058\u304f\u6b20\u640d\u5024\u306b0\u3092\u4ee3\u5165\u3002","6b88c441":"\u8aac\u660e\u5909\u6570\u3092\"SalePrice\"\u3068\u76f8\u95a2\u306e\u5f37\u3044\"OverallQual, GrLivArea, GarageCars, TotalBsmtSF, FullBath, YearBuilt\"\u306e6\u3064\u306b\u3057\u307c\u308a\u305d\u3053\u304b\u3089\u9078\u629e\u3059\u308b\u3002\"GaregeArea,1stFlrSF,TotRmsAbvGrd\"\u306e\uff13\u3064\u306b\u3064\u3044\u3066\u306f\u591a\u91cd\u5171\u7dda\u6027\u306e\u554f\u984c\u304c\u8d77\u3053\u3089\u306a\u3044\u3088\u3046\u306b\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u8003\u3048\u306a\u3044\u3053\u3068\u3068\u3059\u308b\u3002"}}