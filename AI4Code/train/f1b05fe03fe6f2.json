{"cell_type":{"40ec9134":"code","2569d6f9":"code","b4e8c370":"code","05316ab8":"code","7be2c656":"code","d43e0db1":"code","0262bf95":"code","6a817b4e":"code","21be2751":"code","047ddd06":"code","32622795":"code","c1a06795":"code","551d68c8":"code","e5d22f53":"code","87fe8ac2":"code","ed5093e8":"code","893ce1df":"code","ba05d31e":"code","28064ed0":"code","f4cbd6ba":"code","5c526b27":"code","bca2040b":"code","6cb13bf5":"code","ad759cf1":"code","ac37e544":"code","8c9dcb4f":"code","78117f0a":"code","16fc5435":"code","a001def9":"code","7a493cbe":"markdown","45c36b68":"markdown","59ff8a46":"markdown","5bc57bdd":"markdown","9e199d33":"markdown","7b87d1af":"markdown","1997ffa8":"markdown"},"source":{"40ec9134":"!pip install pyspark","2569d6f9":"from pyspark.sql.functions import *\nfrom pyspark.sql import SparkSession\nspark = SparkSession \\\n.builder \\\n.appName(\"Python Spark create RDD example\") \\\n.config(\"spark.some.config.option\", \"some-value\") \\\n.getOrCreate()","b4e8c370":"df = spark.read.format('com.databricks.spark.csv').\\\noptions(header='true', \\\ninferschema='true').\\\nload(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\",header=True)","05316ab8":"df.printSchema()","7be2c656":"df.show(5)","d43e0db1":"Province = df.select('Province\/State').fillna('Unknown')","0262bf95":"df = df.fillna({'Province\/State':'Unknown'})","6a817b4e":"df.show(5)","21be2751":"df = df.withColumn('Country\/Region', regexp_replace('Country\/Region', 'Mainland China', 'China'))","047ddd06":"df.show(5)","32622795":"df = df.withColumn(\"Active_case\", df['Confirmed'] - df['Deaths'] - df['Recovered'])","c1a06795":"df.show(5)","551d68c8":"max_date =  df.select(max(\"ObservationDate\")).first()\ngroup = df.groupBy(\"ObservationDate\")\ngroup_data = group.agg({'Confirmed':'sum', 'Deaths':'sum', 'Recovered':'sum', 'Active_case':'sum'}).sort(col(\"ObservationDate\"))\ngroup_data.show()","e5d22f53":"group_data=group_data.toPandas()\nimport matplotlib.pyplot as plt\nObservationDate = group_data['ObservationDate']\nRecovered = group_data['sum(Recovered)']\nDeaths = group_data['sum(Deaths)']\nConfirmed = group_data['sum(Confirmed)']\nActive_case = group_data['sum(Active_case)']\nplt.figure(figsize=(20,10))\nl1, = plt.plot(ObservationDate, Recovered, color='g')\nl2, = plt.plot(ObservationDate, Deaths, color='r')\nl3, = plt.plot(ObservationDate, Confirmed, color='b')\nl4, = plt.plot(ObservationDate, Active_case, color='orange')\npatches = [l1,l2,l3,l4]\nlabels = ['Recovered', 'Deaths', 'Confirmed', 'Active_case']\nplt.legend(patches, labels, loc=\"best\")\nplt.xlabel('Date')\nplt.ylabel('Number of cases')\nplt.title('increace in cases')\nplt.xticks(rotation=90)\nplt.show()","87fe8ac2":"from pyspark.sql import functions as F\nmx_date=df.select(F.max(\"ObservationDate\")).collect()[0][0]\nData_world = df.filter(F.col(\"ObservationDate\")==mx_date)\\\n.groupBy(\"ObservationDate\")\\\n.agg({'Confirmed':'sum', 'Deaths':'sum', 'Recovered':'sum', 'Active_case':'sum'})\nData_world=Data_world.toPandas()","ed5093e8":"Data_world.head()","893ce1df":"import plotly.express as px\nlabels = [\"Active cases\",\"Recovered\",\"Deaths\"]\nvalues = Data_world.loc[0, [\"sum(Active_case)\",\"sum(Recovered)\",\"sum(Deaths)\"]]\nfig = px.pie(Data_world, values=values, names=labels, color_discrete_sequence=['blue','green','red'])\nfig.update_layout(\n    title='Total cases : '+str(Data_world[\"sum(Confirmed)\"][0]),\n)\nfig.show()","ba05d31e":"Data_world_byCountry = df.filter(F.col(\"ObservationDate\")==mx_date)\\\n.groupBy(\"Country\/Region\")\\\n.agg({'Confirmed':'sum','Deaths':'sum','Recovered':'sum','Active_case':'sum'}).sort(col(\"sum(Confirmed)\").desc())","28064ed0":"Data_world_byCountry=Data_world_byCountry.toPandas()\nData_world_byCountry.head()","f4cbd6ba":"import plotly.graph_objects as go\nfig = go.Figure(data=[go.Bar(\n            x=Data_world_byCountry['Country\/Region'][0:10], y=Data_world_byCountry['sum(Confirmed)'][0:10],\n            text=Data_world_byCountry['sum(Confirmed)'][0:10].apply(str),\n            textposition='auto')])\nfig.update_layout(\n    title='Most 10 infected Countries',\n    xaxis_title=\"Countries\",\n    yaxis_title=\"Confirmed Cases\",\n)\nfig.show()\nfig = go.Figure(data=[go.Scatter(\n    x=Data_world_byCountry['Country\/Region'][0:10],\n    y=Data_world_byCountry['sum(Confirmed)'][0:10],\n    mode='markers',\n    marker=dict(\n        color=[145, 140, 135, 130, 125, 120,115,110,105,100],\n        size=[100, 90, 70, 60, 60, 60,50,50,40,35],\n        showscale=True\n        )\n)])\nfig.update_layout(\n    title='Most 10 infected Countries',\n    xaxis_title=\"Countries\",\n    yaxis_title=\"Confirmed Cases\",\n)\nfig.show()","5c526b27":"import plotly.graph_objects as go\nfig = go.Figure(data=[go.Bar(\n            x=Data_world_byCountry['Country\/Region'][0:10], y=Data_world_byCountry['sum(Deaths)'][0:10],\n            text=Data_world_byCountry['sum(Deaths)'][0:10].apply(str),\n            textposition='auto')])\nfig.update_layout(\n    title='Most 10 infected Countries',\n    xaxis_title=\"Countries\",\n    yaxis_title=\"Death Cases\",\n)\nfig.show()\nfig = go.Figure(data=[go.Scatter(\n    x=Data_world_byCountry['Country\/Region'][0:10],\n    y=Data_world_byCountry['sum(Deaths)'][0:10],\n    mode='markers',\n    marker=dict(\n        color=[145, 140, 135, 130, 125, 120,115,110,105,100],\n        size=[100, 90, 70, 60, 60, 60,50,50,40,35],\n        showscale=True\n        )\n)])\nfig.update_layout(\n    title='Most 10 infected Countries',\n    xaxis_title=\"Countries\",\n    yaxis_title=\"Death Cases\",\n)\nfig.show()","bca2040b":"import plotly.graph_objects as go\nfig = go.Figure(data=[go.Bar(\n            x=Data_world_byCountry['Country\/Region'][0:10], y=Data_world_byCountry['sum(Recovered)'][0:10],\n            text=Data_world_byCountry['sum(Recovered)'][0:10].apply(str),\n            textposition='auto')])\nfig.update_layout(\n    title='Most 10 infected Countries',\n    xaxis_title=\"Countries\",\n    yaxis_title=\"Recovered Cases\",\n)\nfig.show()\nfig = go.Figure(data=[go.Scatter(\n    x=Data_world_byCountry['Country\/Region'][0:10],\n    y=Data_world_byCountry['sum(Recovered)'][0:10],\n    mode='markers',\n    marker=dict(\n        color=[145, 140, 135, 130, 125, 120,115,110,105,100],\n        size=[100, 90, 70, 60, 60, 60,50,50,40,35],\n        showscale=True\n        )\n)])\nfig.update_layout(\n    title='Most 10 infected Countries',\n    xaxis_title=\"Countries\",\n    yaxis_title=\"Recovered Cases\",\n)\nfig.show()","6cb13bf5":"import plotly.graph_objects as go\nfig = go.Figure(data=[go.Bar(\n            x=Data_world_byCountry['Country\/Region'][0:10], y=Data_world_byCountry['sum(Active_case)'][0:10],\n            text=Data_world_byCountry['sum(Active_case)'][0:10].apply(str),\n            textposition='auto')])\nfig.update_layout(\n    title='Most 10 infected Countries',\n    xaxis_title=\"Countries\",\n    yaxis_title=\"Active Cases\",\n)\nfig.show()\nfig = go.Figure(data=[go.Scatter(\n    x=Data_world_byCountry['Country\/Region'][0:10],\n    y=Data_world_byCountry['sum(Active_case)'][0:10],\n    mode='markers',\n    marker=dict(\n        color=[145, 140, 135, 130, 125, 120,115,110,105,100],\n        size=[100, 90, 70, 60, 60, 60,50,50,40,35],\n        showscale=True\n        )\n)])\nfig.update_layout(\n    title='Most 10 infected Countries',\n    xaxis_title=\"Countries\",\n    yaxis_title=\"Active_case Cases\",\n)\nfig.show()","ad759cf1":"Pakistan_Data = df.filter(F.col(\"Country\/Region\")=='Pakistan')","ac37e544":"max_date =  df.select(max(\"ObservationDate\")).first()\ngroupP = Pakistan_Data.groupBy(\"ObservationDate\")\ngroup_dataP = groupP.agg({'Confirmed':'sum', 'Deaths':'sum', 'Recovered':'sum', 'Active_case':'sum'}).sort(col(\"ObservationDate\"))\ngroup_dataP.show(1000)","8c9dcb4f":"Pakistan_Data.show()","78117f0a":"group_dataP=group_dataP.toPandas()\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=group_dataP['ObservationDate'], y=group_dataP['sum(Confirmed)'],\n                    mode='lines',\n                    name='Confirmed cases'))\n\nfig.add_trace(go.Scatter(x=group_dataP['ObservationDate'], y=group_dataP['sum(Active_case)'],\n                    mode='lines',\n                    name='Active cases',line=dict( dash='dot')))\nfig.add_trace(go.Scatter(x=group_dataP['ObservationDate'], y=group_dataP['sum(Deaths)'],name='Deaths',\n                                   marker_color='black',mode='lines',line=dict( dash='dot') ))\nfig.add_trace(go.Scatter(x=group_dataP['ObservationDate'], y=group_dataP['sum(Recovered)'],\n                    mode='lines',\n                    name='Recovered cases',marker_color='green'))\nfig.show()","16fc5435":"Data_Pakistan_Last = df.filter(F.col(\"Country\/Region\")=='Pakistan').filter(F.col(\"ObservationDate\")==mx_date)\\\n.groupBy(\"ObservationDate\")\\\n.agg({'Confirmed':'sum', 'Deaths':'sum', 'Recovered':'sum', 'Active_case':'sum'})","a001def9":"Data_Pakistan_Last=Data_Pakistan_Last.toPandas()\nimport plotly.express as px\nlabels = [\"Active cases\",\"Recovered\",\"Deaths\"]\nvalues = Data_Pakistan_Last.loc[0, [\"sum(Active_case)\",\"sum(Recovered)\",\"sum(Deaths)\"]]\nfig = px.pie(Data_Pakistan_Last, values=values, names=labels, color_discrete_sequence=['blue','green','red'])\nfig.update_layout(\n    title='Total cases : '+str(Data_Pakistan_Last[\"sum(Confirmed)\"][0]),\n)\nfig.show()","7a493cbe":"### Line Chart of increase in 'Recovered', 'Deaths', 'Confirmed', 'Active_case'","45c36b68":"### Showing world wide Latest Data","59ff8a46":"### Creating chronological order DataFrame of sum(Recovered), sum(Deaths), sum(Confirmed) and sum(Active_case) ","5bc57bdd":"### Creating New Column in DF \"Active_cases\"","9e199d33":"### sum(Recovered) sum(Deaths) sum(Confirmed) sum(Active_case) in each country","7b87d1af":"# **Please give an UPVOTE if you like pyspark work notebook**","1997ffa8":"### Replacing \"Mainland China\" with \"China\" "}}