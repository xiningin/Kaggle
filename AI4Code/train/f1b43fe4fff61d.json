{"cell_type":{"ee2c741f":"code","092ff7f2":"code","6bd98d4d":"code","c3c89e32":"code","e47aec0a":"code","f5f76bb4":"code","68fe2c0e":"code","c5bff455":"code","30324b25":"code","898851ce":"code","c6bb082b":"code","56a6fc26":"code","0bf39471":"code","a2a0c918":"code","aa96fa74":"code","2a34115d":"code","5e84f17a":"code","9df9f8b9":"code","51886568":"code","649ac49c":"code","1bc917da":"code","f5d3d945":"code","febd7731":"code","979ac4cf":"code","79535e13":"code","61d48100":"code","d31a78e1":"code","baf8fe4c":"code","65808de4":"code","a35457f8":"code","68f9af7e":"code","d8655ed8":"code","89e039c8":"code","22bc87ca":"code","d4749c0b":"code","b0af7fd6":"code","32c79544":"code","23e3402e":"code","1efe0c6a":"code","b83cd232":"code","6d560f8b":"code","9882de0f":"code","8034d79c":"code","bb68cac7":"code","8fc586c0":"code","8a9530fa":"code","6e726364":"code","fad711d6":"code","400f623a":"code","256d8948":"code","16745c01":"code","7fcb82bb":"code","0d519842":"code","81992faa":"code","2b841a06":"code","40352570":"code","da7d379a":"code","aa5a8b4b":"code","60c4bc1a":"code","35d08677":"code","34c15657":"code","36020836":"code","ed825e1a":"code","e607d713":"code","1e8e8a86":"code","c60b6080":"code","9eb98f11":"code","0da2d24b":"code","bc7c38ca":"code","4d4980b4":"code","06317b17":"code","c257817d":"code","c74d06bb":"code","0199a493":"code","7e36bcc8":"code","022dc792":"code","ee1db5fc":"code","be7d8d8e":"code","ab5c55a7":"code","088eae36":"code","5bfdbc48":"code","e327f064":"code","8d0aa257":"code","8c9ee522":"code","9dd3d1a2":"code","bc1b75cb":"code","6678493e":"code","2227d368":"code","5442b5c1":"code","ac3d5e6b":"code","34c99d65":"code","bae6ec12":"code","eb3d8d2e":"code","d71477e0":"code","aa8b0f3c":"code","23d4f4c0":"code","bab5db2f":"code","f4fb3b4e":"code","ac1eabc6":"code","bb9c95e0":"code","21d2bef1":"code","02d54be1":"code","a07ec5ab":"code","75402e91":"code","e61f4f0e":"code","f39ae71e":"code","792ae54a":"code","a28c7aa1":"code","af9a27a2":"code","7311e1e5":"code","66f527ef":"code","664e9d1a":"code","790254f0":"code","a9cb6dcd":"code","3cc97eb5":"code","682eec4a":"code","0e1fd69c":"code","a83f52b2":"code","1461569b":"code","9ba2c85f":"code","abe0a17f":"code","e289b951":"code","b10e50fb":"code","f60413c8":"code","340cbe40":"code","9c73ccef":"code","8f1ff4e9":"code","f560202c":"code","1c41dce0":"code","b73fb059":"code","3e748d10":"code","55e92759":"code","88db7ee3":"code","7a66b61a":"code","88010478":"code","45b77d97":"code","dc81afe6":"code","e3c4e37b":"code","be12a78d":"code","8b9f4020":"code","33dd50be":"code","4aa3e39a":"code","1950ba71":"code","aa751fa9":"code","bfe3fdb7":"code","e1729ea1":"code","154551a8":"code","0b076074":"code","57be8a31":"code","7fc55189":"code","4664b0b5":"code","cf59478b":"code","2844245e":"code","1538a38a":"code","c62cd81f":"code","97bfec27":"code","7e120380":"code","bd9337fd":"code","86b57273":"code","d8e9ad9e":"code","b393abd1":"code","867caded":"code","3d0750b0":"code","9dc3bfe6":"code","9c7f9ace":"code","a24372c8":"code","b334d900":"code","890f32c6":"markdown","63e81215":"markdown","c52baa64":"markdown","34d6d14e":"markdown","0085a24e":"markdown","af9a652d":"markdown","db942053":"markdown","6dae4f73":"markdown","32a4f04b":"markdown","173d4ebf":"markdown","0302b4a7":"markdown","5ec0e636":"markdown","7b237614":"markdown","43ff84af":"markdown","2628974c":"markdown","58b0a546":"markdown","9b232d29":"markdown","a4bf5eb8":"markdown","cab940e1":"markdown","b218cb32":"markdown","a485e68f":"markdown","06a66a60":"markdown","c8ab1971":"markdown","622512c0":"markdown","92d6b0f9":"markdown","d90cb0b6":"markdown","7f7bf376":"markdown","155491f3":"markdown","2a43939d":"markdown","7fb383a1":"markdown","4625bd68":"markdown","464c9bd2":"markdown","3712fc35":"markdown","61485aec":"markdown","cdd5ebe6":"markdown","ecd0be67":"markdown","e99789ea":"markdown","2a8e7682":"markdown","ccac20a2":"markdown","04fc83da":"markdown","7ccc58ea":"markdown","e53ec420":"markdown","a2350a0f":"markdown","34e8149f":"markdown","211fc727":"markdown","bed331b3":"markdown","c0594e10":"markdown","74bbf03f":"markdown","b489c0cb":"markdown","734d8566":"markdown","50511ba8":"markdown","2423f58c":"markdown","063a1aec":"markdown","2cf43fab":"markdown","6000c81a":"markdown","fd4b90d1":"markdown","ba8213c4":"markdown","40547118":"markdown","16242f40":"markdown","45bbf30c":"markdown","52380cfe":"markdown","daacd3f3":"markdown","4825b4e9":"markdown","8370fa4a":"markdown","f4ee06dc":"markdown","b4c794d0":"markdown","c7dc451a":"markdown","856d082f":"markdown","635e15b2":"markdown","a4ade858":"markdown","18d9094d":"markdown","3b670368":"markdown","ecf19f53":"markdown","10bb96c2":"markdown","8c78fab8":"markdown","a9c056c2":"markdown","04fa46c5":"markdown","8e565066":"markdown","d2d8e57f":"markdown","5876a083":"markdown","4c5f2d58":"markdown","54f70674":"markdown","42d74770":"markdown","be699820":"markdown","1073055c":"markdown","178e2d68":"markdown","39050605":"markdown","e79b6f7b":"markdown","ef267950":"markdown","02f60c1d":"markdown","da4dc552":"markdown","199de19d":"markdown","7cc314ff":"markdown","21516c58":"markdown","0e4747bb":"markdown","ff63a97f":"markdown","d5f75bfb":"markdown","2b00bbb3":"markdown","9b4d23db":"markdown","42373d53":"markdown","97503a29":"markdown","d5b5fba5":"markdown","e114745f":"markdown","e6629b09":"markdown","61e2078d":"markdown","3cc34b3a":"markdown","79e4763c":"markdown","5108695c":"markdown","36eb144c":"markdown","e7b5ffd3":"markdown","2a615520":"markdown"},"source":{"ee2c741f":"import numpy as np\nimport pandas as pd\nimport os\nimport datetime\nimport scipy\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n\nimport sklearn\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import KFold\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler\nfrom sklearn.ensemble import StackingRegressor\nfrom sklearn.linear_model import Ridge, Lasso, ElasticNet\n\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\n\nfrom scipy import stats\nfrom scipy.special import boxcox1p\nfrom scipy.stats import skew\nfrom sklearn.metrics import r2_score, mean_squared_log_error\nfrom sklearn.model_selection import cross_val_score\n\n\nfrom sklearn.kernel_ridge import KernelRidge\n","092ff7f2":"from scipy import stats\nfrom scipy.special import boxcox1p\nfrom scipy.stats import skew\nfrom sklearn.metrics import r2_score, mean_squared_log_error\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import KFold\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.kernel_ridge import KernelRidge\n","6bd98d4d":"plt.style.use('seaborn')\nplt.rcParams['figure.figsize'] = [15, 5]\nplt.rcParams['axes.labelsize'] = 15\nplt.rcParams['axes.titlesize'] = 20\n\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 200)","c3c89e32":"def plot_count(data, x, hue, ax):\n    count = data.groupby([hue])[x].value_counts(normalize=True).mul(100).\\\n                    rename(\"count (%)\").reset_index()\n    \n    sns.barplot(x=x, y=\"count (%)\", hue=hue, data=count, ax=ax)","e47aec0a":"def plot_dist(data, plot_normal=False,**kwargs):\n    data = data.dropna()\n    \n    kwargs[\"kde_kws\"]= {\"shade\":True }\n    kwargs[\"rug\"] = True\n    kwargs[\"hist\"] = False\n    \n\n    ax = sns.distplot(data,**kwargs)\n    \n    if plot_normal:\n        mu, sigma = stats.norm.fit(data)\n        x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n        y = stats.norm.pdf(x, mu, sigma)\n        \n        ax.plot(x, y, color=\"black\",label=\"Normal\")\n    _ = ax.legend()\n    return ax","f5f76bb4":"df_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\ndf_all = pd.concat((df_train,df_test),ignore_index=True)","68fe2c0e":"#can be useful to for hueing train and test set\ntrain_len = len(df_train)\ndf_all[\"Set\"] = [\"Train\"]*train_len + [\"Test\"]*(len(df_all) - train_len)","c5bff455":"print(\"Train set size -> \",df_train.shape)\nprint(\"Test set size -> \",df_test.shape)","30324b25":"df_all.head(5)","898851ce":"px.histogram(df_all, x=\"SalePrice\", marginal=\"rug\")","c6bb082b":"print(\"Skewness of target: \",skew(df_all[\"SalePrice\"].dropna()))","56a6fc26":"df_all[\"SalePrice_log\"] = df_all[\"SalePrice\"].apply(np.log1p)","0bf39471":"print(\"Skewness of log(target): \",skew(df_all[\"SalePrice_log\"].dropna()))","a2a0c918":"nan_count = df_all.isnull().sum() \nnan_count = nan_count[nan_count>0].sort_values(ascending=False)\nnan_count","aa96fa74":"#These column's missing values signifies 'None'\nnan_is_none_cols = [\"PoolQC\", \"MiscFeature\", \"Alley\", \"Fence\", \"GarageQual\", \\\n        \"GarageCond\", \"GarageType\",\"BsmtCond\",\"BsmtExposure\",\"BsmtQual\",\\\n        \"BsmtFinType2\",\"BsmtFinType1\",\"MasVnrType\",\"FireplaceQu\",\"GarageFinish\"]\n\nfor c in nan_is_none_cols:\n    df_all[c] = df_all[c].fillna(\"None\")","2a34115d":"df_all.loc[df_all[\"MasVnrArea\"].isnull(),[\"MasVnrArea\",\"MasVnrType\"]].head()","5e84f17a":"df_all.loc[df_all[\"MasVnrArea\"].isnull(),\"MasVnrArea\"] = 0","9df9f8b9":"df_all.corr()[\"LotFrontage\"].abs().sort_values(ascending=False).head()","51886568":"px.scatter(df_all,y=\"LotFrontage\",x=\"LotArea\")","649ac49c":"data = df_all.drop([\"SalePrice\",\"Set\"], axis=1)\nfor c in data.select_dtypes(exclude=[\"float\",\"int\"]):\n    data[c] = data[c].factorize()[0]","1bc917da":"data.corr().abs()[\"LotFrontage\"].sort_values(ascending=False).head(10)","f5d3d945":"model = Ridge()\ndata=data.dropna()\nx_ = data.drop(\"LotFrontage\",axis=1)\ny_ = data[\"LotFrontage\"]\nmodel.fit(x_, y_)\ndata[\"interpolated_LotFrontage\"] = model.predict(x_)\ndata.corr().abs()[\"LotFrontage\"].sort_values(ascending=False).head()","febd7731":"#Option1\ndf_all[\"LotFrontage\"] = df_all.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))\n#Option2\n#Use Ridge regression","979ac4cf":"nan_count[nan_count<5].index.tolist()","79535e13":"df_all.loc[df_all[\"TotalBsmtSF\"].isnull(),[\"BsmtCond\",\"BsmtUnfSF\",\"BsmtFinSF1\",\"BsmtFinSF2\",\"BsmtHalfBath\",\"BsmtFullBath\",\"Set\"]]","61d48100":"df_all.loc[df_all[\"TotalBsmtSF\"].isnull(),[\"BsmtUnfSF\",\"BsmtFinSF1\",\"BsmtFinSF2\",\"BsmtHalfBath\",\"BsmtFullBath\"]] = 0\ndf_all[\"TotalBsmtSF\"] = df_all[\"TotalBsmtSF\"].fillna(0)","d31a78e1":"df_all[\"Functional\"].value_counts()","baf8fe4c":"#Filling with mod\ndf_all[\"Functional\"] = df_all[\"Functional\"].fillna(df_all[\"Functional\"].mode()[0])","65808de4":"df_all.loc[df_all[\"MSZoning\"].isnull(),:]","a35457f8":"df_all[\"MSZoning\"].value_counts()","68f9af7e":"df_all[\"MSZoning\"] = df_all[\"MSZoning\"].fillna(df_all[\"MSZoning\"].mode()[0])","d8655ed8":"df_all.loc[df_all[\"Utilities\"].isnull(),:]","89e039c8":"df_all[\"Utilities\"].value_counts()","22bc87ca":"df_all[\"Utilities\"] = df_all[\"Utilities\"].fillna(df_all[\"Utilities\"].mode()[0])","d4749c0b":"df_all.loc[df_all[\"BsmtHalfBath\"].isnull(),[\"BsmtFullBath\",\"BsmtCond\",\"BsmtQual\",\"Set\"]]","b0af7fd6":"df_all[\"BsmtHalfBath\"] = df_all[\"BsmtHalfBath\"].fillna(0)\ndf_all[\"BsmtFullBath\"] = df_all[\"BsmtFullBath\"].fillna(0)","32c79544":"df_all.loc[df_all[\"GarageArea\"].isnull(),[\"GarageArea\",\"GarageCars\",\"GarageType\",\"GarageFinish\",\"Set\",\"GarageYrBlt\",\"GarageQual\",\"GarageCond\"]]","23e3402e":"df_all.loc[df_all[\"GarageArea\"].isnull(),\"GarageType\"] = \"None\"\ndf_all.loc[df_all[\"GarageArea\"].isnull(),[\"GarageArea\",\"GarageCars\",\"GarageYrBlt\"]] = 0\ndf_all[\"GarageYrBlt\"] = df_all[\"GarageYrBlt\"].fillna(0)","1efe0c6a":"df_all.loc[df_all[\"Exterior1st\"].isnull(),[\"Exterior1st\",\"YearBuilt\",\"OverallQual\",\"RoofStyle\",\"Set\"]]","b83cd232":"df_all[\"Exterior1st\"].value_counts() \/ len(df_all)","6d560f8b":"df_all[\"Exterior2nd\"].value_counts() \/ len(df_all)","9882de0f":"gb = df_all.groupby(by=[\"YearBuilt\",\"Exterior1st\"]).size().reset_index().rename(columns={0:\"count\"})\npx.bar(gb, y=\"count\", x=\"YearBuilt\", color='Exterior1st')","8034d79c":"gb = df_all.groupby(by=[\"YearBuilt\",\"Exterior2nd\"]).size().reset_index().rename(columns={0:\"count\"})\npx.bar(gb, y=\"count\", x=\"YearBuilt\", color='Exterior2nd')","bb68cac7":"df_all[\"Exterior1st\"] = df_all[\"Exterior1st\"].fillna(df_all[\"Exterior1st\"].mode()[0])\ndf_all[\"Exterior2nd\"] = df_all[\"Exterior2nd\"].fillna(df_all[\"Exterior2nd\"].mode()[0])","8fc586c0":"df_all.loc[df_all[\"KitchenQual\"].isnull(),[\"KitchenAbvGr\",\"Set\",\"YearBuilt\",\"OverallQual\"]]","8a9530fa":"df_all[\"KitchenQual\"].value_counts()","6e726364":"px.box(df_all,y=\"KitchenQual\",x=\"YearBuilt\",color=\"OverallQual\")","fad711d6":"df_all[\"KitchenQual\"] = df_all[\"KitchenQual\"].fillna(\"Gd\")","400f623a":"df_all[\"SaleType\"] = df_all[\"SaleType\"].fillna(df_all[\"SaleType\"].mode()[0])","256d8948":"df_all.loc[df_all[\"Electrical\"].isnull(),[\"Set\",\"YearBuilt\"]]","16745c01":"gb = df_all.groupby(by=[\"YearBuilt\",\"Electrical\"]).size().reset_index().rename(columns={0:\"count\"})\npx.bar(gb, y=\"count\", x=\"YearBuilt\", color='Electrical')","7fcb82bb":"df_all[\"Electrical\"] = df_all[\"Electrical\"].fillna(\"SBrkr\")","0d519842":"df_all[\"Electrical\"].value_counts()","81992faa":"nan_count = (df_all.isnull().sum())\nnan_count[nan_count>0].sort_values(ascending=False)","2b841a06":"#Creating 'has' features\ncol_cond = {\n    \"hasPool\": \"PoolQC\",\n    \"hasMiscFeature\": \"MiscFeature\",\n    \"hasAlley\": \"Alley\",\n    \"hasFence\": \"Fence\",\n    \"hasGarage\" : \"GarageQual\",\n    \"hasBasement\" : \"BsmtCond\",\n    \"hasVeneer\" : \"MasVnrType\"\n}\n\nfor col in col_cond:\n    df_all[col] = 1\n    df_all.loc[df_all[col_cond[col]]==\"None\",col] = 0\n    \n    \ndf_all[\"has2ndFloor\"] = 1\ndf_all.loc[df_all[\"2ndFlrSF\"]==0,\"has2ndFloor\"] = 0\n\n#Mergin condition1 and condition2\ndf_all[\"hasCondition\"]= 1\ndf_all.loc[(df_all[\"Condition1\"]==\"Norm\")&(df_all[\"Condition2\"]==\"Norm\"),\"hasCondition\"] =0\n\ndf_all[\"wasRemodeled\"] = 0\ndf_all.loc[df_all[\"YearRemodAdd\"]>df_all[\"YearBuilt\"],\"wasRemodeled\"] = 1\n\n#Age of house and garage when it was bought\ndf_all[\"houseAge\"] = df_all[\"YrSold\"] - df_all[\"YearBuilt\"]\ndf_all[\"garageAge\"] = df_all[\"YrSold\"] - df_all[\"GarageYrBlt\"]\ndf_all[\"garageAge\"] = df_all[\"garageAge\"].apply(lambda age: 0 if age>1000 else age)\n\n\n#has a low quality finish\ndf_all[\"hasLowQualFinish\"] = 0\ndf_all.loc[df_all[\"LowQualFinSF\"]>0,\"hasLowQualFinish\"] = 1\n\n#Total nb of bathrooms\ndf_all[\"totalFullBath\"] = df_all[\"BsmtFullBath\"] + df_all[\"FullBath\"]\ndf_all[\"totalHalfBath\"] = df_all[\"BsmtHalfBath\"] + df_all[\"HalfBath\"]\ndf_all[\"totalBath\"] = df_all[\"totalHalfBath\"] + df_all[\"totalFullBath\"]\n\n#Nb rooms including bathrooms\ndf_all[\"TotRmsAbvGrd+baths\"] = df_all[\"TotRmsAbvGrd\"] + df_all[\"FullBath\"] + df_all[\"HalfBath\"]\n\n#Total SF basement + above\ndf_all[\"totalHouseSF\"] = df_all['1stFlrSF'] + df_all['2ndFlrSF'] + df_all[\"TotalBsmtSF\"]\n\n#hasDeck        \ndf_all[\"hasDeck\"] = 0\ndf_all.loc[df_all[\"WoodDeckSF\"]>0,\"hasDeck\"] = 1\n\n#hasOpenPorch\ndf_all[\"hasOpenPorch\"] = 0\ndf_all.loc[df_all[\"OpenPorchSF\"]>0,\"hasOpenPorch\"] = 1\n\n#EnclosedPorch: Enclosed porch area in square feet\ndf_all[\"hasEnclosedPorch\"] = 0\ndf_all.loc[df_all[\"EnclosedPorch\"]>0,\"hasEnclosedPorch\"] = 1\n\n#3SsnPorch: Three season porch area in square feet\ndf_all[\"has3SsnPorch\"] = 0\ndf_all.loc[df_all[\"3SsnPorch\"]>0,\"has3SsnPorch\"] = 1\n\n#ScreenPorch\ndf_all[\"hasScreenPorch\"] = 0\ndf_all.loc[df_all[\"ScreenPorch\"]>0,\"hasScreenPorch\"] = 1\n\n#total nb Deck and porches\ndf_all[\"DeckPorchCount\"] = df_all[\"hasDeck\"] + df_all[\"hasOpenPorch\"] + \\\n         df_all[\"hasEnclosedPorch\"] + df_all[\"has3SsnPorch\"] + df_all[\"hasScreenPorch\"]\n\n#total Deck+porchesSF\ndf_all[\"totalDeckPorchSF\"] = df_all[\"WoodDeckSF\"] + df_all[\"OpenPorchSF\"] +\\\n                    df_all[\"EnclosedPorch\"] + df_all[\"3SsnPorch\"] + df_all[\"ScreenPorch\"]\n\n#Land size apart from house\ndf_all[\"landSF\"] = df_all[\"LotArea\"] - df_all[\"1stFlrSF\"]\n\n#SF price\ndf_all[\"SalePriceSF\"] =  df_all[\"SalePrice\"] \/ (df_all[\"landSF\"] + df_all[\"totalHouseSF\"])\n\n#Lot shape regularity\ndf_all[\"hasRegularShape\"]= 0\ndf_all.loc[df_all[\"LotShape\"]==\"Reg\",\"hasRegularShape\"] = 1\n\n#Creating Generation feature by binning YearBuilt\ndf_all[\"Generation\"] = pd.cut(df_all[\"YearBuilt\"],bins=[0,1949,1985,2010], right=True,\\\n       labels=[0,1,2])\n\n#These features attempt to describe the configuration of the house.\ndf_all[\"Bsmt>GrLivArea\"] = 0\ndf_all.loc[df_all[\"TotalBsmtSF\"]>df_all[\"GrLivArea\"], \"Bsmt>GrLivArea\" ] = 1\n\ndf_all[\"Bsmt>1stFlrSF\"] = 0\ndf_all.loc[df_all[\"TotalBsmtSF\"]>df_all[\"1stFlrSF\"], \"Bsmt>1stFlrSF\" ] = 1\n\ndf_all[\"1stFlrSF>2ndFlrSF\"] = 0\ndf_all.loc[df_all[\"1stFlrSF\"]>df_all[\"2ndFlrSF\"], \"1stFlrSF>2ndFlrSF\" ] = 1","40352570":"px.histogram(df_all, x=\"MSSubClass\", color=\"Set\",\\\n             marginal=\"rug\", barmode=\"overlay\")","da7d379a":"print(df_all[\"MSSubClass\"].value_counts())\npx.box(df_all,y=\"SalePrice\", x=\"MSSubClass\",points=\"all\")","aa5a8b4b":"print(df_all[\"MSZoning\"].value_counts())\npx.box(df_all,y=\"SalePrice\",x=\"MSZoning\",points=\"all\")","60c4bc1a":"px.histogram(df_all, x=\"LotFrontage\", color=\"Set\", marginal=\"rug\", barmode=\"overlay\")","35d08677":"px.scatter(df_all,x=\"LotFrontage\",y=\"SalePrice\")","34c15657":"data = df_all.loc[:,[\"LotFrontage\",\"LotArea\",\"1stFlrSF\",\"totalHouseSF\"]]\nsns.pairplot(data, kind=\"reg\",diag_kind=\"kde\")\nprint(data.corr())","36020836":"outlier_lotfrontage = df_all.loc[df_all[\"LotFrontage\"]>300].index.tolist()\ndf_all.iloc[outlier_lotfrontage]","ed825e1a":"px.histogram(df_all, x=\"LotArea\", color=\"Set\",\\\n             marginal=\"rug\", barmode=\"overlay\")","e607d713":"px.scatter(df_all, x=\"LotArea\",y=\"SalePrice\")","1e8e8a86":"outlier_lotarea = df_all.loc[df_all[\"LotArea\"]>100000].index.tolist()\ndf_all.iloc[outlier_lotarea]","c60b6080":"px.box(df_all.drop(outlier_lotarea), y=\"LotArea\", x=\"Neighborhood\")","9eb98f11":"df_all[\"Street\"].value_counts()","0da2d24b":"df_all[\"Alley\"].value_counts()","bc7c38ca":"df_all[\"LotShape\"].value_counts()","4d4980b4":"px.box(df_all,x=\"LotShape\",y=\"SalePrice\",points=\"all\")","06317b17":"px.histogram(df_all, x=\"LandContour\", color=\"Set\", barmode=\"overlay\")","c257817d":"px.box(df_all,x=\"LandContour\",y=\"SalePrice\",points=\"all\")","c74d06bb":"px.histogram(df_all, x=\"LandSlope\", color=\"Set\",barmode=\"overlay\")","0199a493":"px.histogram(df_all, x=\"LandSlope\", color=\"Set\",barmode=\"overlay\")","7e36bcc8":"px.histogram(df_all, x=\"Neighborhood\", color=\"Set\",barmode=\"overlay\")","022dc792":"px.box(df_all,x=\"Neighborhood\",y=\"SalePrice\")","ee1db5fc":"px.box(df_all,x=\"Neighborhood\",y=\"YearBuilt\")","be7d8d8e":"df_all[\"Condition1\"].value_counts() \/ len(df_all)","ab5c55a7":"df_all[\"Condition2\"].value_counts() \/ len(df_all)","088eae36":"df_all[\"BldgType\"].value_counts()","5bfdbc48":"px.box(df_all,x=\"BldgType\",y=\"SalePrice\",points=\"all\")","e327f064":"df_all[\"HouseStyle\"].value_counts()","8d0aa257":"px.box(df_all,x=\"HouseStyle\",y=\"SalePrice\",points=\"all\")","8c9ee522":"px.histogram(df_all, x=\"OverallQual\", color=\"Set\",barmode=\"overlay\")","9dd3d1a2":"print(\"Square feet saleprice std withing OverallQual categories:\")\ndf_all.groupby(\"OverallQual\")[\"SalePriceSF\"].std()","bc1b75cb":"px.box(df_all, x=\"OverallQual\", y=\"SalePriceSF\",points=\"all\")","6678493e":"outlier_overallqual = df_all.loc[(df_all[\"OverallQual\"]==10)&\\\n                                (df_all[\"SalePriceSF\"]<10),:].index.tolist()\ndf_all.iloc[outlier_overallqual]","2227d368":"gb = df_all.groupby(by=[\"YearBuilt\",\"OverallQual\"]).size().reset_index().rename(columns={0:\"count\"})\npx.bar(gb, y=\"count\", x=\"YearBuilt\", color='OverallQual',\\\n      color_continuous_scale='RdBu')","5442b5c1":"print(df_all.loc[:,[\"OverallQual\",\"OverallCond\"]].corr())\nsns.swarmplot(data=df_all, x=\"OverallQual\",y=\"OverallCond\")","ac3d5e6b":"px.histogram(df_all, x=\"OverallCond\", color=\"Set\",barmode=\"overlay\")","34c99d65":"df_all.loc[:,[\"YearBuilt\",\"OverallCond\",\"OverallQual\"]].corr()[\"OverallCond\"]","bae6ec12":"gb = df_all.groupby(by=[\"YearBuilt\",\"OverallCond\"]).size().reset_index().rename(columns={0:\"count\"})\npx.bar(gb, y=\"count\", x=\"YearBuilt\", color='OverallCond',\\\n      color_continuous_scale='RdBu')","eb3d8d2e":"px.histogram(df_all, x=\"YearBuilt\", color=\"Set\",barmode=\"overlay\")","d71477e0":"px.scatter(df_all,x=\"YearBuilt\",y=\"SalePrice\")","aa8b0f3c":"px.histogram(df_all, x=\"YearRemodAdd\", color=\"Set\",barmode=\"overlay\")","23d4f4c0":"gb = df_all.groupby(by=[\"YearBuilt\",\"wasRemodeled\"]).size().reset_index().rename(columns={0:\"count\"})\npx.bar(gb, y=\"count\", x=\"YearBuilt\", color='wasRemodeled',\\\n      color_continuous_scale='GnBu')","bab5db2f":"px.scatter(df_all, x=\"YearBuilt\",y=\"SalePriceSF\",\\\n           color=\"wasRemodeled\",color_continuous_scale='GnBu')","f4fb3b4e":"df_all[\"RoofStyle\"].value_counts() ","ac1eabc6":"px.box(df_all, x=\"RoofStyle\", y=\"SalePrice\",\\\n       color=\"Generation\",points=\"all\")","bb9c95e0":"df_all[\"RoofMatl\"].value_counts() ","21d2bef1":"df_all[\"RoofMatl\"] = df_all[\"RoofMatl\"].\\\n                    replace([\"WdShake\",\"WdShngl\",\"Membran\",\"ClyTile\",\"Roll\",\"Metal\"],\\\n                    [\"Other\",\"Other\",\"Other\",\"Other\",\"Other\",\"Other\"])","02d54be1":"px.box(df_all, x=\"RoofMatl\", y=\"SalePrice\",\\\n       color=\"RoofStyle\")","a07ec5ab":"px.histogram(df_all, x=\"Exterior1st\",\\\n             color=\"Set\",barmode=\"overlay\", marginal=\"rug\")","75402e91":"px.histogram(df_all, x=\"Exterior2nd\",\\\n             color=\"Set\",barmode=\"overlay\", marginal=\"rug\")","e61f4f0e":"def built_interactions(feat1, feat2):\n    interactions = feat1 + \"_\" + feat2\n    couples_seen = []\n    filtered_interactions = []\n    for couple in interactions.values.tolist():\n        val1, val2 = couple.split(\"_\")\n        inverted_couple = val2 + \"_\" + val1\n        saw_couple = couple in couples_seen\n        saw_inverted_couple = inverted_couple in couples_seen\n        \n        #New couple\n        if not (saw_couple or saw_inverted_couple):\n            couples_seen.append(couple)\n            filtered_interactions.append(couple)\n        #Already saw couple or it's inverted version\n        else:\n            if saw_couple:\n                filtered_interactions.append(couple)\n            elif saw_inverted_couple:\n                filtered_interactions.append(inverted_couple)\n    \n    return filtered_interactions\n\nexterior_couples = built_interactions(df_all[\"Exterior1st\"], df_all[\"Exterior2nd\"])\ndf_all[\"Ext1_Ext2\"] = exterior_couples","f39ae71e":"couples_to_keep = ['VinylSd_VinylSd','MetalSd_MetalSd','HdBoard_HdBoard', 'Wd Sdng_Wd Sdng', 'Plywood_Plywood', 'CemntBd_CmentBd',\n 'HdBoard_Plywood', 'BrkFace_BrkFace', 'WdShing_Wd Shng', 'AsbShng_AsbShng', 'Stucco_Stucco', 'BrkFace_Wd Sdng', 'Wd Sdng_Plywood',\n 'Wd Sdng_Wd Shng', 'Plywood_Brk Cmn', 'Wd Sdng_HdBoard', 'WdShing_Plywood', 'VinylSd_Wd Shng', 'BrkFace_Plywood','Wd Sdng_MetalSd', 'HdBoard_ImStucc']\ndf_all[\"Ext1_Ext2\"] = df_all[\"Ext1_Ext2\"].apply(lambda couple: couple if couple in couples_to_keep else \"other\")","792ae54a":"df_all[\"Ext1_Ext2\"].value_counts()","a28c7aa1":"px.box(df_all,x=\"Ext1_Ext2\",y=\"SalePrice\",\\\n       points=\"all\", \\\n       category_orders={\"Ext1_Ext2\":df_all[\"Ext1_Ext2\"].value_counts().index.tolist()})","af9a27a2":"fig, ax = plt.subplots(1,1)\n\nsns.pointplot(data=df_all, x=\"Exterior1st\", y=\"SalePrice\", ax=ax)\nsns.pointplot(data=df_all, x=\"Exterior2nd\", y=\"SalePrice\", color=\"green\")","7311e1e5":"px.histogram(df_all, x=\"MasVnrType\",\\\n             color=\"Set\",barmode=\"overlay\", marginal=\"rug\")","66f527ef":"px.box(df_all, x=\"MasVnrType\", y=\"SalePrice\", points=\"all\")","664e9d1a":"px.box(df_all, x=\"MasVnrType\", y=\"MasVnrArea\", points=\"all\", hover_data=[\"Id\",\"Set\",\"YearBuilt\"])","790254f0":"gb = df_all.groupby(by=[\"YearBuilt\",\"MasVnrType\"]).size().reset_index().rename(columns={0:\"count\"})\npx.bar(gb, y=\"count\", x=\"YearBuilt\", color='MasVnrType',\\\n      color_continuous_scale='RdBu')","a9cb6dcd":"#For the MasVnrType=None with a MasVnrArea >0, replace by YearBuilt mode that isnt None.\nmasVnrType_dict = df_all.loc[df_all[\"MasVnrType\"]!=\"None\",[\"YearBuilt\",\"MasVnrType\",\"MasVnrArea\"]].\\\n            groupby(\"YearBuilt\").agg(pd.Series.mode)[\"MasVnrType\"].to_dict()\n\nmask = (df_all[\"MasVnrType\"]==\"None\")&(df_all[\"MasVnrArea\"]>0)\ndf_all.loc[mask, \"MasVnrType\"] = df_all.loc[mask,\"YearBuilt\"].map(masVnrType_dict)\n\n#Replace MasVnrType with None if MasVnrArea is 0\ndf_all.loc[df_all[\"MasVnrArea\"]==0,\"MasVnrType\"] = \"None\"","3cc97eb5":"px.histogram(df_all, x=\"ExterQual\",\\\n             color=\"Set\",barmode=\"overlay\", marginal=\"rug\")","682eec4a":"px.box(df_all, x=\"ExterQual\", y=\"SalePrice\", points=\"all\")","0e1fd69c":"px.box(df_all, x=\"ExterCond\", y=\"SalePrice\", points=\"all\")","a83f52b2":"gb = df_all.groupby(by=[\"YearBuilt\",\"ExterQual\"]).size().reset_index().rename(columns={0:\"count\"})\npx.bar(gb, y=\"count\", x=\"YearBuilt\", color='ExterQual',\\\n      color_continuous_scale='RdBu')","1461569b":"gb = df_all.groupby(by=[\"YearBuilt\",\"ExterCond\"]).size().reset_index().rename(columns={0:\"count\"})\npx.bar(gb, y=\"count\", x=\"YearBuilt\", color='ExterCond',\\\n      color_continuous_scale='RdBu')","9ba2c85f":"px.histogram(df_all, x=\"Foundation\",\\\n             color=\"Set\",barmode=\"overlay\", marginal=\"rug\")","abe0a17f":"px.box(df_all, x=\"Foundation\", y=\"SalePrice\", points=\"all\")","e289b951":"gb = df_all.groupby(by=[\"YearBuilt\",\"Foundation\"]).size().reset_index().rename(columns={0:\"count\"})\npx.bar(gb, y=\"count\", x=\"YearBuilt\", color='Foundation',\\\n      color_continuous_scale='RdBu')","b10e50fb":"px.histogram(df_all, x=\"BsmtQual\",\\\n             color=\"Set\",barmode=\"overlay\", marginal=\"rug\")","f60413c8":"bsmt_cols = [\"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinSF1\",\\\n             \"BsmtFinType2\",\"BsmtFinSF2\",\"BsmtUnfSF\",\"TotalBsmtSF\",\"BsmtFullBath\",\"BsmtHalfBath\",\"Set\",\"Id\"]\ndf_all.iloc[[2217,2218]][bsmt_cols]","340cbe40":"df_all.loc[df_all[\"Id\"].isin([2218,2219]),\"BsmtQual\"] = df_all[\"BsmtQual\"].mode()[0]","9c73ccef":"df_all[\"BsmtUnfSF_ratio\"] = df_all[\"BsmtUnfSF\"] \/ df_all[\"TotalBsmtSF\"]\ndf_all[\"BsmtUnfSF_ratio\"] = df_all[\"BsmtUnfSF_ratio\"].fillna(0)","8f1ff4e9":"px.histogram(df_all,x=\"BsmtUnfSF_ratio\",marginal=\"rug\",color=\"Set\",barmode=\"overlay\")","f560202c":"gb = df_all.groupby(by=[\"YearBuilt\",\"BsmtQual\"]).size().reset_index().rename(columns={0:\"count\"})\npx.bar(gb, y=\"count\", x=\"YearBuilt\", color='BsmtQual',\\\n      color_continuous_scale='RdBu')","1c41dce0":"px.histogram(df_all,x=\"Heating\",marginal=\"rug\",color=\"Set\",barmode=\"overlay\")","b73fb059":"df_all[\"Heating\"].value_counts()","3e748d10":"px.box(df_all, x=\"Heating\" ,y=\"SalePrice\", points=\"all\",color=\"HeatingQC\")","55e92759":"gb = df_all.groupby(by=[\"YearBuilt\",\"HeatingQC\"]).size().reset_index().rename(columns={0:\"count\"})\npx.bar(gb, y=\"count\", x=\"YearBuilt\", color='HeatingQC',\\\n      color_continuous_scale='RdBu')","88db7ee3":"px.histogram(df_all,x=\"CentralAir\",marginal=\"rug\",color=\"Set\",barmode=\"overlay\")","7a66b61a":"gb = df_all.groupby(by=[\"YearBuilt\",\"CentralAir\"]).size().reset_index().rename(columns={0:\"count\"})\npx.bar(gb, y=\"count\", x=\"YearBuilt\", color='CentralAir',\\\n      color_continuous_scale='RdBu')","88010478":"px.histogram(df_all,x=\"Electrical\",marginal=\"rug\",color=\"Set\",barmode=\"overlay\")","45b77d97":"data = df_all.loc[:,[\"1stFlrSF\", \"2ndFlrSF\", \"LowQualFinSF\", \"GrLivArea\",\"TotalBsmtSF\", \"SalePrice\"]]\nprint(data.corr())\nsns.pairplot(data, kind=\"reg\")","dc81afe6":"garage_cols = [\"GarageType\",\"GarageYrBlt\",\"GarageFinish\",\"GarageCars\",\"GarageArea\",\"GarageQual\",\"GarageCond\",\"Id\"]\ndf_all.iloc[2126][garage_cols]","e3c4e37b":"#replace by mode (garageType=Detchd)\ndf_all.loc[df_all[\"Id\"]==2127, \"GarageFinish\"] = \"Unf\"\ndf_all.loc[df_all[\"Id\"]==2127, \"GarageCond\"] = \"TA\"\ndf_all.loc[df_all[\"Id\"]==2127, \"GarageQual\"] = \"TA\"\ndf_all.loc[df_all[\"Id\"]==2127, \"GarageYrBlt\"] = 1910 #same as year built\n","be12a78d":"index = df_all[\"GarageYrBlt\"].argmax()\nprint(\"Newest garage year built:\",df_all[\"GarageYrBlt\"].iloc[index])\ndf_all[\"GarageYrBlt\"].iloc[index] = df_all[\"YearBuilt\"].iloc[index] ","8b9f4020":"df_all[\"PoolQC\"].value_counts()","33dd50be":"df_all.loc[df_all[\"PoolQC\"]==\"None\", \"PoolArea\"].value_counts()","4aa3e39a":"px.box(df_all, x=\"PoolQC\",y=\"SalePrice\", points=\"all\")","1950ba71":"cont_cols = [\"LotArea\",\"1stFlrSF\", \"2ndFlrSF\", 'LowQualFinSF', 'GrLivArea',\\\n        'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch',\\\n        'PoolArea', 'MiscVal','houseAge',\"totalDeckPorchSF\", \"landSF\"]\nfor col in cont_cols:\n    if col in df_all:\n        df_all[col] = df_all[col].apply(float)","aa751fa9":"cat_cols = [\"YearBuilt\",\"YearRemodAdd\",'MoSold', 'YrSold']\nfor col in cat_cols:\n    df_all[col] = df_all[col].apply(str)","bfe3fdb7":"ordinal_encoder = {\n    \n    \"LotShape\": {\"Reg\":0, \"IR1\":1, \"IR2\":2, \"IR3\":3},\n    \"Alley\": {\"None\":0, \"Grvl\":1, \"Pave\":2},\n    \"Utilities\": {\"ELO\":0, \"NoSeWa\":1, \"NoSewr\":2, \"AllPub\":3},\n    \"LandSlope\": {\"Gtl\":0, \"Mod\":1, \"Sev\":2},\n    \"ExterQual\": {\"Ex\":5, \"Gd\":4, \"TA\":3, \"Fa\":2, \"Po\":1, \"None\":0},\n    \"ExterCond\": {\"Ex\":5, \"Gd\":4, \"TA\":3, \"Fa\":2, \"Po\":1, \"None\":0},\n    \"BsmtQual\": {\"Ex\":5, \"Gd\":4, \"TA\":3, \"Fa\":2, \"Po\":1, \"None\":0},\n    \"BsmtCond\": {\"Ex\":5, \"Gd\":4, \"TA\":3, \"Fa\":2, \"Po\":1, \"None\":0},\n    \"BsmtExposure\": {\"Gd\":3, \"Av\":2, \"Mn\":1, \"No\":0, \"None\":0},# no basement and no exposure treated equally\n    \"BsmtFinType1\": {\"GLQ\":6,\"ALQ\":5,\"BLQ\":4,\"Rec\":3,\"LwQ\":2,\"Unf\":1,\"None\":0},\n    \"BsmtFinType2\": {\"GLQ\":6,\"ALQ\":5,\"BLQ\":4,\"Rec\":3,\"LwQ\":2,\"Unf\":1,\"None\":0},\n    \"HeatingQC\": {\"Ex\":5, \"Gd\":4, \"TA\":3, \"Fa\":2, \"Po\":1, \"None\":0},\n    \"KitchenQual\": {\"Ex\":5, \"Gd\":4, \"TA\":3, \"Fa\":2, \"Po\":1, \"None\":0},\n    \"Functional\": {\"Typ\":6,\"Min1\":5,\"Min2\":4,\"Mod\":3,\"Maj1\":2,\"Maj2\":1,\"Sev\":0},\n    \"FireplaceQu\": {\"Ex\":5, \"Gd\":4, \"TA\":3, \"Fa\":2, \"Po\":1, \"None\":0},\n    \"GarageFinish\": {\"Fin\":3,\"RFn\":2,\"Unf\":1,\"None\":0},\n    \"GarageQual\": {\"Ex\":5, \"Gd\":4, \"TA\":3, \"Fa\":2, \"Po\":1, \"None\":0},\n    \"GarageCond\": {\"Ex\":5, \"Gd\":4, \"TA\":3, \"Fa\":2, \"Po\":1, \"None\":0},\n    \"PavedDrive\": {\"Y\":2,\"P\":1,\"N\":0},\n    \"PoolQC\": {\"Ex\":5, \"Gd\":4, \"TA\":3, \"Fa\":2, \"Po\":1, \"None\":0},\n    \"Fence\": {\"GdPrv\":4,\"MnPrv\":3,\"GdWo\":2,\"MnWw\":1,\"None\":0}\n    \n}\n\nfor col in ordinal_encoder:\n    df_all[col] = df_all[col].map(ordinal_encoder[col])","e1729ea1":"for type_ in [\"int\",\"object\",\"category\",\"float\"]:\n    print(\"-->\",type_)\n    print(df_all.select_dtypes(type_).columns.tolist())\n    print(\"---------\")","154551a8":"skewed_vals = df_all.select_dtypes([\"float\",\"int\"]).drop([\"SalePrice\",\"Id\",\"SalePrice_log\"],axis=1)\\\n    .apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nskewed_vals","0b076074":"skewed_feats = skewed_vals[np.abs(skewed_vals>0.5)].index #normal distrib -> skewness=0``\nlen(skewed_feats)","57be8a31":"#lam=0.17 was found by minimizing sum of skewness of float features\nfor feat in skewed_feats:\n    df_all[feat] = boxcox1p(df_all[feat], 0.17).dropna()","7fc55189":"no_onehot = [\"Set\"]\n\ndf_onehot = df_all.drop(no_onehot,axis=1)\n\ndf_all_onehot = pd.get_dummies(df_onehot,\\\n                               columns=df_onehot.select_dtypes([\"object\",\"category\"]).columns.tolist())\n\nprint(\"onehot df shape: \",df_all_onehot.shape)\n","4664b0b5":"def rmse(pred,truth):\n    pred = np.squeeze(pred)\n    truth = np.squeeze(truth)\n    return round(np.sqrt(np.mean(np.square(pred-truth))),4)","cf59478b":"def cv_rmse(model,X,y):\n    cv_score = cross_val_score(model, X, y, cv=5, scoring=\"neg_mean_squared_error\")\n    cv_score = np.sqrt(cv_score*(-1))\n    mean = cv_score.mean()\n    std = cv_score.std()\n    return cv_score, round(mean,4), round(std,4)","2844245e":"df_all_onehot.shape ","1538a38a":"df_corr = df_all_onehot.corr()[\"SalePrice_log\"].apply(np.abs).sort_values(ascending=False)\ndf_corr.head(20)","c62cd81f":"corr_feats = df_corr.index.tolist()[1:31]\nprint(df_corr[1:31])\nnb_cols = 2\nnb_rows = int(np.ceil(len(corr_feats)\/nb_cols))\nfig,ax = plt.subplots(nb_rows, nb_cols, figsize=(20,50))\nfor i,feat in enumerate(corr_feats):\n    row = int(i\/nb_cols)\n    col = i%2\n    sns.regplot(data=df_all_onehot, x=feat, y=\"SalePrice_log\", ax=ax[row,col] ,marker=\"+\")","97bfec27":"outlier_GrLivArea = df_all_onehot.loc[(df_all_onehot[\"GrLivArea\"]>18)&(df_all_onehot[\"SalePrice\"]<300000),:].index.tolist()\noutlier_totalHouseSF = df_all_onehot.loc[(df_all_onehot[\"totalHouseSF\"]>20)&(df_all_onehot[\"SalePrice\"]<200000),:].index.tolist()\noutlier_1stFlrSF = df_all_onehot.loc[(df_all_onehot[\"1stFlrSF\"]>18)&(df_all_onehot[\"SalePrice\"]<200000),:].index.tolist()\noutlier_TotalBsmtSF = df_all_onehot.loc[(df_all_onehot[\"TotalBsmtSF\"]>18)&(df_all_onehot[\"SalePrice\"]<200000),:].index.tolist()","7e120380":"outliers = outlier_1stFlrSF +\\\n    outlier_GrLivArea +\\\n    outlier_totalHouseSF +\\\n    outlier_TotalBsmtSF +\\\n    outlier_lotarea +\\\n    outlier_lotfrontage +\\\n    outlier_overallqual                      ","bd9337fd":"df = df_all_onehot.loc[df_all_onehot[\"SalePrice\"].notnull(),:]\\\n                .drop([\"SalePrice\", \"SalePriceSF\", \"Id\"], axis=1)\ndf_removed_outliers = df.drop(outliers)","86b57273":"X = df_removed_outliers.drop([\"SalePrice_log\"], axis=1)\ny = df_removed_outliers[\"SalePrice_log\"]","d8e9ad9e":"ridge = make_pipeline(RobustScaler(), Ridge(alpha=0.0005))\ncv_rmse(ridge, X, y)","b393abd1":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\ncv_rmse(lasso, X, y)","867caded":"elastic = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\ncv_rmse(elastic, X, y)","3d0750b0":"catboost = CatBoostRegressor(logging_level=\"Silent\")\ncv_rmse(catboost, X, y)","9dc3bfe6":"krr = make_pipeline(RobustScaler(), KernelRidge(alpha=0.6, kernel=\"polynomial\", degree=2, coef0=2.5))\ncv_rmse(krr, X, y)","9c7f9ace":"stack = StackingRegressor(estimators=[(\"elastic\",elastic), (\"KRR\",krr), (\"Catboost\",catboost)],\\\n                          final_estimator=Ridge(), cv=5)\ncv_rmse(stack, X, y)","a24372c8":"X_test = df_all_onehot.loc[df_all_onehot[\"SalePrice\"].isnull(),:]\\\n                .drop([\"SalePrice_log\", \"SalePriceSF\", \"Id\", \"SalePrice\"], axis=1)\n\nstack.fit(X, y)\npreds = stack.predict(X_test)\n\nmy_submission = pd.DataFrame({'Id': df_test.Id, 'SalePrice': np.expm1(preds)})","b334d900":"my_submission.to_csv('elastic_krr_catboost_Stacked.csv', index=False)","890f32c6":"This is consistent with the previous plots, that modern houses are of better building material","63e81215":"All instances with missing MasVnrArea also have `MasVnrType`set to None, implying they don't have Masonry Veneer. We can set the corresponding to 0","c52baa64":"### Modeling","34d6d14e":"### RoofStyle, RoofMatl","0085a24e":"#### KitchenQual","af9a652d":"### YearBuilt","db942053":"The type of foundation is a distinct indicator of the time period when the house was built","6dae4f73":"Quality of house doesnt have much relationship with the present condition of the house","32a4f04b":"log-transforming will help bring things closer to normal, in our case the competitiong is looking at the RMSLE score, which somewhat contraints us to work with log(target)","173d4ebf":"No basement, so obviously their basement has no bathrooms","0302b4a7":"### OverallQual","5ec0e636":"Older houses are in greater condition, maybe this features refers to how the house has aged. Hence new houses havent had the chance to age so their condition is 'normal' or 5\/10.","7b237614":"BsmtQual should only be None if there is no basement, this is a mistake, let's correct this","43ff84af":"GarageQual and GarageCond are None, so probably this instance has no garage even though GarageType is not NaN. Let's correct this","2628974c":"### MasVnrType","58b0a546":"Vast majority of top quality(>7) houses were built after 1990","9b232d29":"#### Utilities","a4bf5eb8":"### ExterQual, ExterCond","cab940e1":"Interesting, ALL houses built before 1950 were remodeled. But one wouldnt expect to see recent houses (>2000) to be remodeled","b218cb32":"`LotArea`is the most correlated feature to LotFrontage, let's see it's scatter plot","a485e68f":"### Dealing with outliers found in EDA","06a66a60":"An interesting way to find outliers is to plot most correlated features with target:","c8ab1971":"A real estate term that attempts to describe the width of a lot, therefore all values must be non-zero positive","622512c0":"### MSZoning","92d6b0f9":"* Extreme value in training set! Let's see their index in the training set to deal with them once we finished EDA","d90cb0b6":"Basement quality (height is very important) in the final sale price","7f7bf376":"#### Exterior1st, Exterior2nd","155491f3":"#### Casting to object what will be considered as categorical features","2a43939d":"# House prices","7fb383a1":"### CatBoost","4625bd68":"#### MSZoning","464c9bd2":"A handful of houses between 1965 and 1995 have quite a high SalePrice per SF, and most of them were never remodeled. The fact that they were not remodeled could be an indication of good quality. But this is inconsistent with the their value of `OverallQual`(arround 6-7)","3712fc35":"#### BsmtHalfBath, BsmtFullBath","61485aec":"## Setting proper feature types, label \/one-hot encoding","cdd5ebe6":"### BsmtFullBath, BsmtHalfBath, FullBath, HalfBath, BedroomAbvGr\n### Kitchen\n\n","ecd0be67":"By plotting OverallQual cs SalePriceSF (proxy of price of square feet), we notice 2 very low SalePriceSF in the category OverallQual=10","e99789ea":"**Scheme**: We shall plot every feature with target, and - if necessary - with other interesting features to see how they are linked together. We shall also check they train\/test distributions are the same","2a8e7682":"We notice an increasing polynomial trend of the saleprice over the years!","ccac20a2":"### Heating","04fc83da":"### Features with under 5 missing values","7ccc58ea":"### ElasticNet","e53ec420":"### 1stFlrSF, 2ndFlrSF, LowQualFinSF, GrLivArea","a2350a0f":"Let's see if we can interpolate missing LotFrontage with other features (excluding target, label encoding categorical features)","34e8149f":"If we choose between the 2 most likely `KitchenQual`, that is Gd and TA, since this instance is a house built in 1917 with overallQual=5, The KitchenQual is most likely Gd","211fc727":"### LotArea","bed331b3":"#### GarageArea, GarageCars","c0594e10":"### Feature correlation","74bbf03f":"Once again, with no other insight, fill with most likely exterior","b489c0cb":"Let's correct the instances where MasVnrArea is 0 yet has a VnrType and None VnrTypes with a MasVnrArea>0","734d8566":"- We notice that GrLivArea = 1stFlrSF + 2ndFlrSF + LowQualFinSF\n- We also see a good correlation between LowQualSF (when>0) and TotalBsmtSF\n- Some have a bigger basement than GrLivArea ! ","50511ba8":"### Conclusion from doing this notebook:\n        - Onehot encoding categorical variables that are not ordinal helps\n        - Label encode ordinal features (= categorical features where an order can be defined)\n        - Hyperparameter tuning can make a big difference .... takes time on my local machine:(\n        - Unskewing data does help","2423f58c":"Rapha\u00ebl Hepi\u00e8gne, 06\/2020","063a1aec":"### Neighborhood","2cf43fab":"#### Missing Basement in test set","6000c81a":"## Data cleaning","fd4b90d1":"### Stacking","ba8213c4":"### BldgType","40547118":"### Looking at the Target: SalePrice","16242f40":"### OverallCond","45bbf30c":"### LotConfig","52380cfe":"#### Making sure no more missing values","daacd3f3":"### Ridge","4825b4e9":"### Pool","8370fa4a":"#### Casting to float int values to identify continuous features","f4ee06dc":"### BoxCox transform on skewed features","b4c794d0":"Since MSZoning, like most categorical features in the dataset are heavily imbalanced, it's statistically safer to fill with mod (unless one knows better)","c7dc451a":"Let's built an interaction feature for the couples (Exterior1, Exterior2)","856d082f":"GarageQual and GarageCond were missing, and were filled with 'None' because docs say that NA means no garage. But in this case, the garage has a size>0 and a Type, which probably means the GarageQual and Cond were the missing values. Let's correct this.","635e15b2":"### HouseStyle","a4ade858":"### LotFrontage","18d9094d":"### CentralAir","3b670368":"### Street, Alley","ecf19f53":"There is obviously no basement for this sample in the test set. fillna with 0","10bb96c2":"### Inspecting types","8c78fab8":"### LandContour","a9c056c2":"### Foundation","04fa46c5":"#### Label encoding ordinal features, Onehot encoding the rest","8e565066":"Houses built around 1940 had mainly `MetalSd`, `VinylSd` or `Wd Sdng`. Unless more insight is gained through EDA, fill with mod","d2d8e57f":"### Basement","5876a083":"## EDA - Visualizing the data","4c5f2d58":"### Missing values","54f70674":"### Lasso","42d74770":"Like us all, inspirations were drawn from other notebooks:\n * [https:\/\/www.kaggle.com\/serigne\/stacked-regressions-top-4-on-leaderboard](http:\/\/): took hyperparameters :) and helped me understand stacking\n * https:\/\/www.kaggle.com\/darkside92\/detailed-examination-for-house-price-top-10 interesting Missing value handling\n * https:\/\/www.kaggle.com\/humananalog\/xgboost-lasso For feature engineering","be699820":"#### Onehot encoding categorical features","1073055c":"#### MasVnrArea","178e2d68":"### MSSubClass - The type of dwelling","39050605":"In the test set, a garage was built in the future","e79b6f7b":"### Exterior1st, Exterior2nd","ef267950":"### Garage","02f60c1d":"#### Functional","da4dc552":"#### LotFrontage","199de19d":"## Import data","7cc314ff":"In 2006 all houses had `SBrkr`(Standard Circuit Breakers & Romex), so we will fill missing val with this","21516c58":"Let's see if we can interpolate LotFrontage with all other features (except target)","0e4747bb":"#### Electrical","ff63a97f":"Even very old houses have AC, this was probably added later in time as AC wasnt about a centuary ago","d5f75bfb":"We cannot simply drop them if they are in test set","2b00bbb3":"#### SaleType","9b4d23db":"### KernelRidge","42373d53":"### Features where we KNOW that missing value means 'None","97503a29":"### LotShape","d5b5fba5":"Out of 2900+ only 10 have a Pool. It will therefore be quite hard to evaluate the contribution of this feature on the target. I'm not sure I want to keep this feature","e114745f":"This garage was built in the future...","e6629b09":"- We get 0.73 correlation with LotFrontage by interporlating with ridge, not bad\n- **Note**: Other notebooks suggests using mean\/median value of Lotfrontage grouped by Neighborhood","61e2078d":"### LandSlope","3cc34b3a":"From the above plots, the sale price depends on the neighborhood. One of the reasons for this is that some neighborhoods are accumulate more recent houses","79e4763c":"### Electrical","5108695c":"### Submission","36eb144c":"### YearRemodAdd","e7b5ffd3":"As said previously, it's a real-estate measure of the width of the house","2a615520":"### Condition1, Condition2"}}