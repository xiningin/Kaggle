{"cell_type":{"84425eed":"code","7895a19e":"code","5354cef9":"code","c51de59f":"code","17c23cb7":"code","aebc9d1b":"code","bec2f282":"code","ef954f1c":"code","bc138e3e":"code","73c36149":"code","e06062b7":"code","2b035b3b":"code","aa988a10":"code","0a1b0351":"code","0a395084":"code","846e4a42":"code","11402d82":"code","fe9c3011":"code","a005b1b7":"code","681162ac":"code","125c638c":"code","3eb16cca":"code","bd0e5ceb":"code","75567ed1":"code","7e3abc18":"code","5ad224a0":"code","a3358eca":"code","39428c0c":"code","daae0a38":"code","393eed9c":"markdown","72f2490c":"markdown","6d263f83":"markdown","bdd78a59":"markdown","83fb8c8f":"markdown","ba7b74db":"markdown","a78d2a25":"markdown","e835acb2":"markdown","3ff75ae0":"markdown"},"source":{"84425eed":"# Inport basic libraries.\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno","7895a19e":"# Read the csv and check the contents.\ntrain = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest  = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nsample_submission = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")","5354cef9":"# Show all rows or columns.\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 100)","c51de59f":"train.sample(10)","17c23cb7":"train.info()","aebc9d1b":"test.head(10)","bec2f282":"test.info()","ef954f1c":"sample_submission.head(10)","bc138e3e":"# Integrate the data.\ndf = pd.concat([train, test], ignore_index = True)","73c36149":"# Show in details\ndf.info()","e06062b7":"# Show missing numbers.\ndisplay(msno.matrix(df))\nplt.show()","2b035b3b":"# Show details in aloocations.\ndf.describe()","aa988a10":"# Bar graph of label\nplt.subplots(1, 2, figsize=(14,5))\nplt.subplot(1,2,1)\nplt.title(\"Bar of label\")\nsns.countplot(x='label', data=df)\n\n# Pi graph of label\nplt.subplot(1,2,2)\nplt.title(\"Pie of Survived\")\nlabel = df['label'].value_counts()\nlabel = label.index\nplt.pie(df['label'].value_counts(),\n       labels=label, counterclock=False, startangle=90,\n       autopct='%1.1f%%', pctdistance=0.7)\nplt.show()","0a1b0351":"# Show the images\nimage = df.values\nplt.figure(figsize=(12,10))\nx, y = 10, 4\nfor i in range(40): # Show 40 images\n    plt.subplot(y, x, i+1)\n    plt.imshow(image[i,1:].reshape((28,28)),cmap=plt.cm.gray_r)\nplt.show()","0a395084":"# Split df into train and test\ntrain = df[df['label'].notnull()]\ntest  = df[df['label'].isnull()]","846e4a42":"# Get features columns\ncolumns = list(train.columns)\ncolumns.remove(\"label\")\n\n# Split for varification\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train.loc[:,columns], train[\"label\"], test_size=0.3,  random_state=0)","11402d82":"# Standardization\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","fe9c3011":"# Reshape to match the Keras's expectations.\nX_train = X_train.reshape(X_train.shape[0], 28, 28,1)\nX_test = X_test.reshape(X_test.shape[0], 28, 28,1)","a005b1b7":"# Change into One Hot Encoding\nimport keras\nfrom keras.utils.np_utils import to_categorical\n\ny_train= to_categorical(y_train,10)\ny_test= to_categorical(y_test,10)","681162ac":"# Modeling\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n# Make a model\nmodel = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\n\n\n# Compile the model\nmodel.compile(optimizer=\"adam\",\n              loss=\"categorical_crossentropy\",\n              metrics=['accuracy'])\n \n# Fit the model\nmodel.fit(X_train, y_train,\n           epochs=3,\n          batch_size = 80\n         )","125c638c":"# Evaluate the model\nloss, accuracy = model.evaluate(X_test, y_test)\nprint(accuracy)\nprint(loss)","3eb16cca":"# Split df into train and test\ntrain = df[df['label'].notnull()]\ntest  = df[df['label'].isnull()]","bd0e5ceb":"X_train = train.iloc[:, 1:]\ny_train = train.iloc[:, 0]\nX_test = test.iloc[:, 1:] ","75567ed1":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","7e3abc18":"# Reshape to match the Keras's expectations.\nX_train = X_train.reshape(X_train.shape[0], 28, 28,1)\nX_test = X_test.reshape(X_test.shape[0], 28, 28,1)","5ad224a0":"# Change into One Hot Encoding\nimport keras\nfrom keras.utils.np_utils import to_categorical\n\ny_train= to_categorical(y_train,10)","a3358eca":"# Make a model\nmodel = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\n\n\n# Compile the model\nmodel.compile(optimizer=\"adam\",\n              loss=\"categorical_crossentropy\",\n              metrics=['accuracy'])\n \n# Fit the model\nmodel.fit(X_train, y_train,\n           epochs=3,\n          batch_size = 80\n         )","39428c0c":"# Predict the target\npredictions = model.predict(X_test)\npredictions = np.argmax(predictions,axis=1)","daae0a38":"submissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\nsubmissions.to_csv(\"DR_submission.csv\", index=False, header=True)\nprint(\"Submission data has been made!!\")","393eed9c":"# Digit Recognizer - Computer Vision\n\n* Introduction\n* Analysis\n* Preprocessing\n* Learning\n* Verification\n* Submission","72f2490c":"# Submission","6d263f83":"Nothing special","bdd78a59":"# Learning","83fb8c8f":"# Preprocessing\n","ba7b74db":"# Varification","a78d2a25":"# Introduction\n### Goal\nThe goal of this competition is to correctly identify digits from a dataset of tens of thousands of handwritten images.\n\n### Evaluation\nThis competition is evaluated on the categorization accuracy of your predictions (the percentage of images you get correct).\n\n### Submission Format\nImageId,Label  \n1,0  \n2,0  \n3,0  \netc.  ","e835acb2":"Train Data has 42,000 rows and 785 columns.  \nTest Data has 28,000 rows and 784 columns.  \nAccording to sample_submision, the goal is to predict the \"Lable\" for each \"ImageID\".","3ff75ae0":"# Analysis"}}