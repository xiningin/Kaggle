{"cell_type":{"d0ac27f9":"code","3acc0278":"code","a547cdbb":"code","1903b97c":"code","56db9f3a":"code","d97d6f72":"code","bcbdef4b":"code","13a94e67":"code","53002e37":"markdown","305bdc0f":"markdown","a094467b":"markdown","1335c950":"markdown","3931f7f3":"markdown","3550039b":"markdown","66ff5352":"markdown","af287108":"markdown","a88cb408":"markdown"},"source":{"d0ac27f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3acc0278":"data = pd.read_csv(\"..\/input\/pyramid-scheme-profit-or-loss\/pyramid_scheme.csv\")\ndata.head()","a547cdbb":"data.drop([\"Unnamed: 0\",\"cost_price\",\"sales_commission\"] , axis = 1, inplace = True) #axis = 1 for column, axis = 0 for row deleting !!!\ndata.head()\n","1903b97c":"data.profit = [1 if money>0 else 0 for money in data.profit]\n\nsns.countplot(x=\"profit\", data=data) #to visualize #of profits and losses in barchart by usign seaborn lib.\ndata.loc[:,'profit'].value_counts()","56db9f3a":"y = data.profit.values\nx_data = data.drop([\"profit\"],axis = 1)\n","d97d6f72":"x = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values\nx.head()","bcbdef4b":"from sklearn.model_selection import train_test_split\n\nx_train , x_test , y_train, y_test = train_test_split(x , y , test_size = 0.2 , random_state = 42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\nx_train.head()","13a94e67":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()\nlr.fit(x_train.T , y_train.T)\nprint(\"test accuracy {}\".format(lr.score(x_test.T,y_test.T)))","53002e37":"So far so good, now we can split our data to train and test.\n* We will train some portion of features then control whether it is correct or not by comparing with tests.\n* test_size is selected for what percentages of x data would separated as test.\n* random_state = 42 , because function will select same index","305bdc0f":"# Introduction","a094467b":"As it is seen in the output we have 4 parameters (cost_price,profit_markup,_depth_of_tree,sales_commission) and one output as called profit.\n* But if we take a look to cost_price and sales_commision, they are constant in each row. So we should ignore them.\n* Otherwise they could mislead our normalization in next steps.\n* We do not need Unnamed: 0 column, since it is basicly ID and it is already founded in np array. So we can delete that column by using drop() function.\n* Drop function's inputs are respectively ;\n    1. [\"name of column\/row\"] ,\n    2. axis = 1 (for dropping column) or 0 (for dropping row) ,\n    3. inplace = True (writes over data) or False (drop it for once)","1335c950":"# Logistic Regression","3931f7f3":"Before starting to train and test, we need to normalize our features.\n* Normalizing means fitting features between 0 and 1.\n* Since, some of the features could be misleading. Might be too high and predominate others or exact opposite.\n* It is a basic algebra formula, (x - xmin)\/(xmax-xmin).","3550039b":"In this Kernel, we will do only Logistic Regression for whether job has profit or not.\n* Thus, we need to convert profit column to binary, to detect profit(1) or loss(0).","66ff5352":"130 out of 500 pyramid scheme businesses just succeed to make a profit.\n* Every requirements are prepared for regression. Let's name them.","af287108":"Firstly we will import our data.","a88cb408":"Finally, we can apply Logistic Regression Model."}}