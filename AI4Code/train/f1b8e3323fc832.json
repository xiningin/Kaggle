{"cell_type":{"4bfe4661":"code","8f2b86b3":"code","57ddb456":"code","7c12464e":"code","5cd1131c":"code","12d9ca7a":"code","3ffaf7e7":"code","ca23fcc4":"code","d3a9c800":"code","81d6c687":"code","6d287483":"code","8c98adcc":"code","e35c339d":"code","f05d9ab7":"code","05cede71":"code","41ea7763":"code","b22ef6bb":"code","32295e6e":"code","246e5fff":"code","14fc16e1":"code","82008cce":"code","9ba30600":"code","f5f3e461":"code","76e9f3ac":"code","1455187c":"code","86d6c0dc":"code","8df2a4a7":"code","740af8c0":"code","86854685":"code","fa7e5f99":"code","eed504da":"code","9f441453":"code","cac88f84":"code","d380a7fe":"code","a53c8287":"code","bd242003":"code","f7858844":"code","ce1208cf":"code","4a3b2b6a":"code","45da1ad1":"code","c08bd680":"markdown","37047988":"markdown","4c4f2a29":"markdown","e2187745":"markdown","0aaf1374":"markdown","024663f8":"markdown","8d0e007b":"markdown","8cc05b81":"markdown","5f2d8223":"markdown","00e626d2":"markdown","2d9ccd01":"markdown","e62f5920":"markdown","9c13ec53":"markdown","ae72e1f0":"markdown","291c9baf":"markdown","56e46ab2":"markdown","c80f31c0":"markdown","fc6b3b17":"markdown","c127d095":"markdown","6d0eda4a":"markdown","579ef958":"markdown","def89275":"markdown","386a71f5":"markdown","b8420895":"markdown","a89bcc70":"markdown","2dfc2b33":"markdown","0482a761":"markdown","dfb26408":"markdown","7075002a":"markdown","7906955b":"markdown","b6b5617f":"markdown","08355862":"markdown","9c0a421e":"markdown","f9b78622":"markdown","dd9ffc16":"markdown","0e126633":"markdown","8ed3b836":"markdown","d2553ec7":"markdown","c1704ab5":"markdown","9e759538":"markdown","b7003491":"markdown","9332e756":"markdown","193272ea":"markdown"},"source":{"4bfe4661":"import numpy as np\nimport pandas as pd\npd.set_option(\"display.precision\", 4)","8f2b86b3":"df = pd._____('..\/input\/ml-training-vlib\/telecom_churn.csv')\ndf._____()","57ddb456":"# Utiliser shape\nprint(df._____)","7c12464e":"# Utiliser columns\nprint(df._____)","5cd1131c":"# .info()\nprint(df._____())","12d9ca7a":"df['Churn'] = df['_____'].astype('_____')","3ffaf7e7":"df._____()","ca23fcc4":"df.describe(_____=['object', 'bool'])","d3a9c800":"df['Churn']._____()","81d6c687":"df['Churn'].value_counts(normalize=_____)","6d287483":"df.sort_values(by='_____', ascending=_____).head()","8c98adcc":"df.sort_values(by=['churn', 'total day charge'],\n        ascending=[True, False]).head()","e35c339d":"df['Churn']._____()","f05d9ab7":"df[df['Churn'] == _____]._____()","05cede71":"df[df['Churn'] == 1]['_____'].mean()","41ea7763":"df[(df['Churn'] == _____) & (df['_____'] == 'no')]['total intl minutes'].max()","b22ef6bb":"df.loc[0:5, '_____':'_____']","32295e6e":"df.iloc[0:5, _____:_____]","246e5fff":"df[_____:]","14fc16e1":"df.apply(_____._____) ","82008cce":"df[df['state'].apply(lambda state: state[0] == 'W')].head()","9ba30600":"df[df['state'].apply(lambda state: _____ == '_____')].head()","f5f3e461":"d = {'_____' : _____, '_____' : _____}\ndf['international plan'] = df['international plan'].map(d)\ndf.head()","76e9f3ac":"df = df._____({'Voice mail plan': d})\ndf.head()","1455187c":"columns_to_show = ['total day minutes', 'total eve minutes', \n                   'total night minutes']\n\ndf.groupby(['Churn'])[columns_to_show].describe(percentiles=[])","86d6c0dc":"columns_to_show = ['total day minutes', 'total eve minutes', \n                   'total night minutes']\n\ndf.groupby(['Churn'])[columns_to_show].agg([np._____, _____._____, _____._____, \n                                            _____._____])","8df2a4a7":"pd.crosstab(df['Churn'], df['international plan'])","740af8c0":"pd.crosstab(df['_____'], df['_____'], normalize=True)","86854685":"df.pivot_table(['total day calls', 'total eve calls', 'total night calls'],\n               ['area code'], aggfunc='mean')","fa7e5f99":"df.pivot_table(['_____', '_____', '_____'],\n               ['_____'], aggfunc='_____')","eed504da":"total_calls = df['total day calls'] + df['total eve calls'] + \\\n              df['total night calls'] + df['total intl calls']\n\ndf.insert(loc=len(df.columns), column='total calls', value=total_calls) \n\n# loc parameter is the number of columns after which to insert the Series object\n# we set it to len(df.columns) to paste it at the very end of the dataframe\n\ndf.head()","9f441453":"df['_____'] = df['total day charge'] + df['_____'] + \\\n                     df['_____'] + df['_____']\ndf.head()","cac88f84":"# get rid of just created columns\ndf.drop(['_____', '_____'], axis=1, inplace=True) ","d380a7fe":"df.drop([_____, _____]).head() ","a53c8287":"# some imports to set up plotting \nimport matplotlib.pyplot as plt\n# pip install seaborn \nimport seaborn as sns\n# Graphics in retina format are more sharp and legible\n%config InlineBackend.figure_format = 'retina'","bd242003":"sns.countplot(x='_____', hue='Churn', data=df);","f7858844":"sns.countplot(x='_____', hue='_____', data=df);","ce1208cf":"df['_____'] = (df['customer service calls'] > 3).astype('_____')","4a3b2b6a":"sns.countplot(x='_____', hue='_____', data=df);","45da1ad1":"pd.crosstab(df['_____'] & df['international plan'] , df['Churn'])","c08bd680":"Pour supprimer des colonnes ou des lignes, utilisez la m\u00e9thode \"drop\", en passant les index requis et le param\u00e8tre \"axe\" (1 si vous supprimez des colonnes, et rien ou 0 si vous supprimez des lignes). L'argument \"inplace\" indique s'il faut changer le DataFrame original. Avec `inplace=False`, la m\u00e9thode `drop` ne change pas le DataFrame existant et renvoie un nouveau DataFrame avec des lignes ou des colonnes supprim\u00e9es. Avec `inplace=True`, elle modifie le DataFrame.\n\n- Supprimer 'total charge' & 'total calls'","37047988":"\n### Tableaux de synth\u00e8se\n\nSupposons que nous voulions voir comment les observations de notre \u00e9chantillon sont r\u00e9parties dans le contexte de deux variables - \"Churn\" et \"international plan\". Pour ce faire, nous pouvons construire un **tableau de contingence** en utilisant la m\u00e9thode des tableaux crois\u00e9s :\n","4c4f2a29":"Nous pouvons \u00e9galement trier par plusieurs colonnes :","e2187745":"## 2. Visualisation de donn\u00e9es avec seaborn\n","0aaf1374":"Affichons quelques informations sur notre dataset.\n- df.shape permet d'afficher la taille du DataFrame\n- df.columns permet d'afficher le nom des colonnes du DataFrame\n- df.info() permet d'avoir des informations sur le typage de donn\u00e9es","024663f8":"Pour les caract\u00e9ristiques cat\u00e9gorielles (type `objet`) et bool\u00e9ennes (type `bool`), nous pouvons utiliser la m\u00e9thode `value_counts`. Regardons la distribution de `Churn` :","8d0e007b":"\n### Application de fonctions aux cellules, colonnes et lignes\n\n**Pour appliquer des fonctions \u00e0 chaque colonne, utilisez `apply()`:**\n- Appliquer la fonction max de numpy","8cc05b81":"- Faire la m\u00eame chose avec la variable 'voice mail plan'","5f2d8223":"Faisons la m\u00eame chose, mais l\u00e9g\u00e8rement diff\u00e9remment en passant une liste de fonctions \u00e0 `agg()` :\n- Utiliser les fonction de numpy mean, std, min et max pour faire cela","00e626d2":"- Idem avec la variable 'customer service calls'","2d9ccd01":"Ajoutons maintenant une caract\u00e9ristique binaire \u00e0 notre DataFrame - \"Appels au service client\u00e8le > 3\". \n- Cr\u00e9er cette variable dans 'many_service_calls' associer le typage 'int'","e62f5920":"- Supprimer la ligne avec l'index 1 et celle avec l'index 2","9c13ec53":"On peut constater que la plupart des utilisateurs sont fid\u00e8les et n'utilisent pas de services suppl\u00e9mentaires (Plan international \/ Voice mail).\n\nCela ressemble \u00e0 des **tableaux crois\u00e9s dynamiques** pour ceux qui sont familiers avec Excel. Et, bien s\u00fbr, les tableaux crois\u00e9s dynamiques sont impl\u00e9ment\u00e9s dans Pandas : la m\u00e9thode `pivot_table` prend les param\u00e8tres suivants :\n\n* `valeurs` - une liste de variables pour lesquelles on peut calculer des statistiques,\n* `index` - une liste de variables pour regrouper les donn\u00e9es par,\n* \"Aggfunc\" - les statistiques que nous devons calculer pour les groupes, par exemple la somme, la moyenne, le maximum, le minimum ou autre chose.\n\nExaminons le nombre moyen d'appels de jour, de soir et de nuit par indicatif r\u00e9gional :","ae72e1f0":"### Indexation et r\u00e9cup\u00e9ration des donn\u00e9es\n\nUne DataFrame peut \u00eatre index\u00e9e de diff\u00e9rentes mani\u00e8res. \n\nPour obtenir une seule colonne, vous pouvez utiliser une construction `DataFrame['Nom']`. Utilisons ceci pour r\u00e9pondre \u00e0 une question sur cette seule colonne : \n- Quelle est la proportion d'utilisateurs qui ont churn\u00e9s dans notre dataframe ? Appliquer la moyenne","291c9baf":"- Afficher les colonnes de state \u00e0 area code avec l'indexation par nom","56e46ab2":"Nous d\u00e9montrerons les principales m\u00e9thodes en action en analysant un [ensemble de donn\u00e9es] sur le taux de d\u00e9sabonnement des clients des op\u00e9rateurs de t\u00e9l\u00e9communications. Lisons les donn\u00e9es (en utilisant `read_csv`), et regardons les 5 premi\u00e8res lignes en utilisant la m\u00e9thode `head` :","c80f31c0":"La m\u00eame chose peut \u00eatre faite avec la m\u00e9thode du \"replace\" :","fc6b3b17":"La m\u00e9thode \"describe\" montre les caract\u00e9ristiques statistiques de base de chaque caract\u00e9ristique num\u00e9rique (types \"int64\" et \"float64\") : nombre de valeurs non manquantes, moyenne, \u00e9cart-type, plage, m\u00e9diane, quartiles 0,25 et 0,75. Cela peut vous permettre de voir si il y a des valeurs aberrantes (Ex: Age n\u00e9gatif, Age sup\u00e9rieur \u00e0 120 ans etc...)","c127d095":"La m\u00e9thode `map` peut \u00eatre utilis\u00e9e pour **remplacer des valeurs dans une colonne** en passant un dictionnaire de la forme `{old_value : new_value}` comme argument.\n- Remplacer 'no' par False et 'yes' par True","6d0eda4a":"- Mod\u00e8le naif: Nous allons \u00e9tudier les r\u00e9sultat d'un mod\u00e8le qui assigne 1 lorsque l'on a 'many_service_call' et 'international plan' a 1 et zero sinon. Nous pouvons voir cela comme un mod\u00e8le pr\u00e9dictif naif ou basique","579ef958":"Afin de voir les statistiques sur les caract\u00e9ristiques non num\u00e9riques, il faut indiquer explicitement les types de donn\u00e9es qui nous int\u00e9ressent dans le param\u00e8tre \"include\".","def89275":"Combien de temps (en moyenne) les utilisateurs qui ont churn\u00e9s passent-ils au t\u00e9l\u00e9phone pendant la journ\u00e9e?","386a71f5":"Les DataFrames peuvent \u00eatre index\u00e9es par le nom de la colonne ou le nom de la ligne (index) ou par le num\u00e9ro de s\u00e9rie d'une ligne. La m\u00e9thode `loc` est utilis\u00e9e pour **l'indexation par nom**, tandis que `iloc()` est utilis\u00e9 pour **l'indexation par num\u00e9ro**.\n\nDans le premier cas ci-dessous, nous avons *\"donnez-nous les valeurs des lignes avec un indice de 0 \u00e0 5 (inclus) et des colonnes \u00c9tat \u00e0 l'indicatif r\u00e9gional (inclus) \"*. Dans le second cas, nous disons *\"donnez-nous les valeurs des cinq premi\u00e8res lignes des trois premi\u00e8res colonnes \"*.","b8420895":"- Afficher les colonnes de state \u00e0 area code avec l'indexation par num\u00e9ro","a89bcc70":"\n### Aggr\u00e9gations\n\nEn g\u00e9n\u00e9ral, le regroupement des donn\u00e9es dans Pandas fonctionne comme suit :\n","2dfc2b33":"- Afficher la r\u00e9partition de Churn selon si oui ou non les clients ont un abonnement avec l'option international","0482a761":"\n1. Premi\u00e8rement, la m\u00e9thode `groupby` divise les `grouping_columns` par leurs valeurs. Elles deviennent un nouvel index dans le cadre de donn\u00e9es r\u00e9sultant.\n2. Ensuite, les colonnes d'int\u00e9r\u00eat sont s\u00e9lectionn\u00e9es (`colonnes_\u00e0_montrer`). Si les `colonnes_\u00e0_montrer` ne sont pas incluses, toutes les clauses non groupby seront incluses.\n3. Enfin, une ou plusieurs fonctions sont appliqu\u00e9es aux groupes obtenus par les colonnes s\u00e9lectionn\u00e9es.\n\nVoici un exemple o\u00f9 nous regroupons les donn\u00e9es en fonction des valeurs de la variable `Churn` et affichons les statistiques de trois colonnes dans chaque groupe :","dfb26408":"- Faire la m\u00eame chose avec la variable 'Churn'","7075002a":"## 1. Principales m\u00e9thodes de Pandas\nIl existe des dizaines de tutoriels sympas sur Pandas et la visualisation de donn\u00e9es. A travers ce notebook nous r\u00e9aliserons une analyse de donn\u00e9es avec les m\u00e9thodes les plus utilis\u00e9es. Elles pourront vous servir pour les futurs exercices mais aussi vos futurs analyses.\n\n**[Pandas](http:\/\/pandas.pydata.org)** est une biblioth\u00e8que Python qui fournit des m\u00e9thodes pour l'analyse de donn\u00e9es. Les sp\u00e9cialistes des donn\u00e9es travaillent souvent avec des donn\u00e9es stock\u00e9es dans des formats de table comme `.csv`, `.tsv` ou `.xlsx`. Pandas rend tr\u00e8s pratique pour le chargement, le traitement et l'analyse de ces donn\u00e9es tabulaires \u00e0 l'aide de requ\u00eates de type SQL. En conjonction avec `Matplotlib` et `Seaborn`, `Pandas` offre un large \u00e9ventail de possibilit\u00e9s d'analyse visuelle des donn\u00e9es tabulaires.\n\nLes principales structures de donn\u00e9es de `Pandas` sont impl\u00e9ment\u00e9es avec les classes **Series** et **DataFrame**. La premi\u00e8re est un tableau index\u00e9 unidimensionnel de certains types de donn\u00e9es fixes. La seconde est une structure de donn\u00e9es bidimensionnelle - un tableau - o\u00f9 chaque colonne contient des donn\u00e9es du m\u00eame type. Vous pouvez le voir comme un dictionnaire d'instances de \"S\u00e9ries\". Les `DataFrames` sont parfaits pour repr\u00e9senter des donn\u00e9es r\u00e9elles : les lignes correspondent \u00e0 des instances (exemples, observations, etc.), et les colonnes correspondent aux caract\u00e9ristiques de ces instances.","7906955b":"# <center> Analyse Exploratoire de donne\u00e9s avec Pandas\n\n<img align=\"center\" src=\"https:\/\/habrastorage.org\/files\/10c\/15f\/f3d\/10c15ff3dcb14abdbabdac53fed6d825.jpg\"  width=50% \/>\n\n## Article outline\n1. [Principales m\u00e9thodes de Pandas](#1.-Principales m\u00e9thodes de Pandas)\n2. [First attempt at predicting telecom churn](#2.-First-attempt-at-predicting-telecom-churn)\n3. [Demo assignment](#3.-Demo-assignment)\n4. [Useful resources](#4-Useful-resources)","b6b5617f":"Si nous avons besoin de la premi\u00e8re ou de la derni\u00e8re ligne de notre DataFrame, nous pouvons utiliser la construction `df[:1]` ou `df[-1 :]`\n- Afficher la derni\u00e8re ligne du DataFrame","08355862":"14,5 % est en fait assez mauvais pour une entreprise ; un tel taux d'attrition peut conduire l'entreprise \u00e0 la faillite.\n\n**L'indexation bool\u00e9enne** avec une colonne est \u00e9galement tr\u00e8s pratique. La syntaxe est `df[P(df['Nom'])]`, o\u00f9 `P` est une condition logique qui est v\u00e9rifi\u00e9e pour chaque \u00e9l\u00e9ment de la colonne `Nom'. Le r\u00e9sultat d'une telle indexation est le DataFrame compos\u00e9 uniquement de lignes qui satisfont \u00e0 la condition \"P\" de la colonne \"Name\". \n\nUtilisons-le pour r\u00e9pondre \u00e0 la question :\n\n**Quelles sont les valeurs moyennes des caract\u00e9ristiques num\u00e9riques pour les utilisateurs qui ont churn\u00e9s ?**","9c0a421e":"- La part des clients fid\u00e8les dans l'\u00e9chantillon est de 85,5 %. Le mod\u00e8le le plus na\u00eff qui pr\u00e9dit toujours un \"client fid\u00e8le\" sur de telles donn\u00e9es aura 85,5% de pr\u00e9cision. Autrement dit, la proportion de r\u00e9ponses correctes des mod\u00e8les suivants ne devrait pas \u00eatre inf\u00e9rieure \u00e0 ce chiffre, et sera, esp\u00e9rons-le, nettement sup\u00e9rieure\n\n- A l'aide d'une pr\u00e9vision simple qui peut \u00eatre exprim\u00e9e par la formule suivante : \"Plan international = Vrai & appels au service client\u00e8le > 3 => Churn = 1, sinon Churn = 0\", on peut s'attendre \u00e0 un taux de supposition de 85,8%, ce qui est juste au-dessus de 85,5%. Ensuite, nous parlerons des arbres de d\u00e9cision et nous verrons comment trouver de telles r\u00e8gles **automatiquement** en nous basant uniquement sur les donn\u00e9es d'entr\u00e9e ;\n\n- Nous avons obtenu ces deux lignes de base sans appliquer l'apprentissage machine, et elles serviront de point de d\u00e9part pour nos mod\u00e8les ult\u00e9rieurs. S'il s'av\u00e8re qu'avec un effort \u00e9norme, nous augmentons la part de r\u00e9ponses correctes de 0,5 % en soi, alors il est possible que nous fassions quelque chose de mal, et il suffit de se limiter \u00e0 un mod\u00e8le simple avec deux conditions ;\n\n- Avant d'entra\u00eener des mod\u00e8les complexes, il est recommand\u00e9 de manipuler un peu les donn\u00e9es, de faire quelques trac\u00e9s et de v\u00e9rifier les hypoth\u00e8ses simples. En outre, dans les applications commerciales de l'apprentissage machine, on commence g\u00e9n\u00e9ralement par des solutions simples, puis on exp\u00e9rimente des solutions plus complexes.","f9b78622":"Bool, Int64, Float64 et Object sont les types de donn\u00e9es de nos donn\u00e9es. Nous voyons qu'une caract\u00e9ristique est bool\u00e9enne (`bool`), 3 caract\u00e9ristiques sont de type `object`, et 16 caract\u00e9ristiques sont num\u00e9riques. Avec cette m\u00eame m\u00e9thode, nous pouvons facilement voir s'il y a des valeurs manquantes. Ici, il n'y en a pas car chaque colonne contient 3333 observations, le m\u00eame nombre de lignes que nous avons vu auparavant avec \"shape\".\n\n![](https:\/\/www.spcdn.org\/images\/churn-rate.jpg)\n\nNous pouvons **changer le type de colonne** avec la m\u00e9thode `astype`. Appliquons cette m\u00e9thode \u00e0 la fonction \"Churn\" pour la convertir en \"int64\" :","dd9ffc16":"2850 utilisateurs sur 3333 sont *fid\u00e8les* ; leur valeur de \"Churn\" est \"0\". Pour calculer les fractions, passez `normalize=True` \u00e0 la fonction `value_counts`. Il est possible d'avoir le pourcentage directement avec value_counts.","0e126633":"La m\u00e9thode \"apply\" peut \u00e9galement \u00eatre utilis\u00e9e pour appliquer une fonction \u00e0 chaque ligne. Pour ce faire, il faut sp\u00e9cifier \"axis=1\". Les fonctions lambda sont tr\u00e8s pratiques dans de tels sc\u00e9narios. Par exemple, si nous devons s\u00e9lectionner tous les \u00e9tats commen\u00e7ant par W, nous pouvons le faire comme ceci :","8ed3b836":"- Afficher la r\u00e9partition du Churn selon cette nouvelle variable","d2553ec7":"\n```python\ndf.groupby(by=grouping_columns)[columns_to_show].function()\n```","c1704ab5":"- Afficher les 5 premi\u00e8res lignes avec les \u00e9l\u00e9ments de state terminant par 'V'","9e759538":"\n### DataFrame transformations\n\nComme beaucoup d'autres choses dans Pandas, l'ajout de colonnes \u00e0 un DataFrame est r\u00e9alisable de plusieurs fa\u00e7ons.\n\nPar exemple, si nous voulons calculer le nombre total d'appels pour tous les utilisateurs, cr\u00e9ons la s\u00e9rie `total_calls` et collons la dans le DataFrame :","b7003491":"Il est possible d'ajouter une colonne plus facilement sans cr\u00e9er une instance de Series interm\u00e9diaire :\n- Stocker directement la somme des valeurs dans 'total charge'","9332e756":"\n### Trier sa donn\u00e9e\n\nUne DataFrame peut \u00eatre tri\u00e9e par la valeur d'une des variables (c'est-\u00e0-dire des colonnes). Par exemple, nous pouvons trier par *Total des frais de jour* (utilisez \"ascendant=False\" pour trier par ordre d\u00e9croissant) :\n","193272ea":"\n**Quelle est la dur\u00e9e maximale des appels internationaux chez les utilisateurs fid\u00e8les (`Churn == 0`) qui n'ont pas de forfait international?**\n\n"}}