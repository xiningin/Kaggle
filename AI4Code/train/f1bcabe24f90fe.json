{"cell_type":{"606e835c":"code","d2ec4ab7":"code","4e7f64ce":"code","9b0ff82d":"code","37aa2525":"code","ffa21052":"code","7d91f018":"code","0fb60a90":"code","ba43d654":"code","0490569a":"code","4deecbe3":"code","accd3310":"code","4bfadab6":"code","49c413e4":"code","24ae9203":"code","a89fb794":"code","359a8420":"code","4c56528a":"code","1cb4a983":"code","7bd180b8":"code","61a85311":"code","c4ce6ef3":"code","dc22ec77":"code","4997ed0c":"code","2db77b37":"code","ea81ec53":"code","36fe4d6a":"code","24cc8405":"code","fdeb69ff":"code","475bda91":"code","ba9833c9":"code","715da028":"code","4f211ce9":"code","2a686c74":"code","30eaf87a":"code","66409285":"code","34cde3ac":"code","d39acf2a":"code","28e8ffb6":"code","e2f07947":"code","62692edd":"code","246bb085":"code","0945fa5b":"code","6a38e656":"code","6a82e2c0":"code","30692000":"code","46f283bc":"code","0fb30dc7":"code","8c29c57d":"code","0e35cf81":"code","3b129735":"code","74d0ea17":"code","639afc2c":"code","aa2f12ca":"code","86bfb538":"code","26e4d3ef":"code","b0c503aa":"code","85cc9d90":"code","b6a3794b":"code","b88f79f0":"code","fd1db74e":"code","d44332e8":"code","c232e8cc":"code","2bddc44f":"code","28627561":"code","04718f46":"code","25a4da7b":"code","80db22df":"code","d29f9c53":"code","03cf53ce":"code","693b966c":"code","1df01561":"code","cbbeb018":"code","7455568e":"code","40b8cd78":"code","f8d08d6d":"code","5f7bf28e":"code","2f030f2b":"code","d945c08e":"code","e24cfe48":"code","c90d6c71":"code","18f11ac8":"code","ee7e80e0":"code","fce49f0e":"code","2c30e3bc":"code","592d0e13":"code","ee46d92c":"code","873744ab":"code","0d8989ea":"code","644ab068":"code","fcc888be":"code","3cb36e35":"code","d339d8aa":"code","f1e822b5":"code","812e51cb":"code","789d103d":"code","cd7c293a":"code","d9df9496":"code","2e0b6321":"code","817b2068":"code","9ece046b":"code","f406b010":"code","92f4be2c":"code","7b48d845":"code","1c8c3f83":"code","e1e5ce20":"code","21f0ea75":"code","51c25864":"code","a88601f5":"code","fd68c6a0":"code","d5c402c0":"code","a4fabd26":"code","42509f97":"code","41bcd2df":"code","ba49b2bd":"code","748b31e9":"code","e99f920e":"code","4bf3cc77":"code","996c1c95":"code","f6a2169d":"code","fe32313a":"code","b4b6512b":"code","fe697903":"code","fdc84ed6":"code","f56f1b50":"code","cd04ea21":"code","2d93c511":"code","7be958b5":"code","8b86d9ca":"code","1e18f32e":"code","cd9e3244":"code","a245df72":"code","c56d9801":"code","fc45f4c8":"code","1551ce0b":"code","0210044a":"code","56918629":"code","f67292e3":"code","d816d6e2":"code","51d702b9":"code","59f84595":"code","40513563":"code","10acc295":"code","ca39d8a5":"code","505319ef":"code","5c7292c9":"code","4cae9a02":"code","0939e844":"code","69a90343":"code","9e0f4c94":"code","1e29885f":"code","f4c10ef3":"code","f8c65204":"code","84f3dc55":"code","5659ed0b":"code","6f34792a":"code","8ff2e1fc":"code","0e08ecd6":"code","dc83e264":"code","006cf98b":"code","0f133ba4":"code","3e284b09":"code","3edc8999":"code","8ac8abb1":"code","c9997030":"code","2dd731a7":"code","0b7ad022":"code","5ad693c9":"code","5f6d37f8":"code","1a274d57":"code","0a4f445a":"code","df27e082":"code","15b7ad6f":"code","0bd1d0a9":"code","4a0ec23e":"code","9547bb22":"code","be91e48a":"code","2ce3b587":"code","4fef6426":"code","ad13cb76":"code","736d5750":"code","b3917b6f":"code","f894ed43":"code","665e200e":"code","4a9eb2b3":"code","31f7dd03":"code","6e5f61c5":"code","8014b839":"code","f71377e6":"code","9e077231":"code","4c4af1f9":"code","b6332426":"code","df044ba7":"code","9aa65ca7":"code","a592bb25":"code","acae3fbd":"code","48175b0a":"code","a9e94f1a":"code","4e7bf9cc":"code","68f20986":"code","96ab3680":"code","16f4e0e9":"code","8ae7c2c3":"code","5c612613":"code","3ac204c4":"code","f6e445fe":"code","c1ddc451":"code","8c3eee49":"code","e538fe7b":"code","8b626e0c":"markdown","ac374eae":"markdown","fcb7a2c7":"markdown","e332db57":"markdown","e9e72f64":"markdown","65d6412b":"markdown","85ee1b15":"markdown","1d9d3c6b":"markdown","ad596b6a":"markdown","c4d0b109":"markdown","ebf119fb":"markdown","0aff7164":"markdown","07863acf":"markdown","5a2e0c69":"markdown","c1db9b6a":"markdown","467ad2eb":"markdown","9ba5828b":"markdown","23b491ff":"markdown","97e073aa":"markdown","4d01eacb":"markdown","95b9a580":"markdown","b1ff1197":"markdown","6500c14d":"markdown","ed2252f8":"markdown","d6e2f4d6":"markdown","b7b222f4":"markdown","84fcd1c4":"markdown","802c1b3f":"markdown","cfc05069":"markdown","9496e3d8":"markdown","28892dec":"markdown","f2b88311":"markdown","8fa571fb":"markdown","67fd8f16":"markdown","04251474":"markdown","cb065e92":"markdown","ed64aceb":"markdown","65a1bbfd":"markdown"},"source":{"606e835c":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport pandas.util.testing as tm\nimport requests\n%matplotlib inline\nimport datetime as dt\nimport seaborn as sns\nimport numpy as np\nfrom matplotlib import rc\nimport os\nplt.rcParams.update({'figure.max_open_warning': 0})\nfrom sklearn.metrics import r2_score, median_absolute_error, mean_absolute_error\nfrom sklearn.metrics import median_absolute_error, mean_squared_error, mean_squared_log_error\n","d2ec4ab7":"def mean_absolute_percentage_error(y_true, y_pred): \n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","4e7f64ce":"#bitquery api \n#https:\/\/bitquery.io\/","9b0ff82d":"total_in_pools =2654014452\nvisor_total = total_in_pools*.05\nvisor_total","37aa2525":"usdc_eth = pd.read_csv(\"..\/input\/weth-usdc\/WETH_USDC.csv\")\n#if you want to see the csv just run below:\n#usdc_eth.head()","ffa21052":"#if you need to delete a column example\n#del usdc_eth['Unnamed: 0']","7d91f018":"#calculating 7 day twap and delta is for it to be hourly\nclose_price = usdc_eth[\"close_price\"].astype(dtype=float)\ndelta = int(7*24)\nusdc_eth[\"twap_7d\"] = (close_price.cumsum() - close_price.shift(delta).cumsum())\/(delta)","0fb60a90":"total_usdc_eth = usdc_eth['quoteAmount'].sum()","ba43d654":"#converting dates to datetime and then making that the index below\nusdc_eth['time'] = pd.to_datetime(usdc_eth['timeInterval.minute'], format = '%Y-%m-%d')","0490569a":"usdc_eth.index = usdc_eth[\"time\"]","4deecbe3":"#set the time period because this is when visor started on coingecko \nusdc_eth = usdc_eth.loc['2021-03-15':'2021-04-25']","accd3310":"#rename columns for example or if you just want to see the columns do usdc_eth.columns\nusdc_eth.columns ","4bfadab6":"usdc_total = usdc_eth['total_fees_estimate_(USDC)'].sum()","49c413e4":"usdc_eth['fees_eth']=usdc_eth['total_fees_estimate_(USDC)']*0.00036108464909277","24ae9203":"usdc_eth[\"visor_fees\"] = usdc_eth['fees_eth']*.05\nvisor_fees_usdc_eth = usdc_eth['visor_fees'].sum()","a89fb794":"usdc_eth.head()","359a8420":"#graphing basic up\/down patterns, overall trends, and anomalies \n#blue is hourly data and the orange is daily \ny = usdc_eth['close_price']\nfig, ax = plt.subplots(figsize=(20, 6))\nax.plot(y,marker='.', linestyle='-', linewidth=0.5, label='Hourly')\n#change the d to M if you want to see monthly for example \nax.plot(y.resample('d').mean(),marker='o', markersize=8, linestyle='-', label='Daily Mean Resample')\nax.set_ylabel('Close Price')\nax.set_xlabel('Time')\nplt.title('USDC ETH Price',fontsize=20)\nax.legend();","4c56528a":"def moving_average(series, n):\n    return np.average(series[-n:])\n#change 24 if you want to see a different amount of time \nmoving_average(usdc_eth['close_price'], 24)\n# prediction for the last observed day (past 24 hours)","1cb4a983":"def moving_average(series, n):\n    return np.average(series[-n:])\n\nmoving_average(usdc_eth['close_price'], 3)\n# prediction for the last observed day (past 3 hours)","7bd180b8":"#nothing needs to be changed here it is just the definition of plotting the moving average \n#and seeing upper and lower bounds \ndef plotMovingAverage(series, window, plot_intervals=False, scale=1.96, plot_anomalies=False):\n    rolling_mean = series.rolling(window=window).mean()\n\n    plt.figure(figsize=(15,5))\n    plt.title(\"Moving average\\n window size = {}\".format(window))\n    plt.plot(rolling_mean, \"g\", label=\"Rolling mean trend\")\n\n    if plot_intervals:\n        mae = mean_absolute_error(series[window:], rolling_mean[window:])\n        deviation = np.std(series[window:] - rolling_mean[window:])\n        lower_bound = rolling_mean - (mae + scale * deviation)\n        upper_bound = rolling_mean + (mae + scale * deviation)\n        plt.plot(upper_bound, \"r--\", label=\"Upper Bound \/ Lower Bound\")\n        plt.plot(lower_bound, \"r--\")\n        \n        if plot_anomalies:\n            anomalies = pd.DataFrame(index=series.index, columns=series.columns)\n            anomalies[series<lower_bond] = series[series<lower_bond]\n            anomalies[series>upper_bond] = series[series>upper_bond]\n            plt.plot(anomalies, \"ro\", markersize=10)\n        \n    plt.plot(series[window:], label=\"Actual values\")\n    plt.legend(loc=\"upper left\")\n    plt.grid(True)","61a85311":"#just change the number depending how many hours you want to be plotted \nplotMovingAverage(usdc_eth['close_price'],2, plot_intervals=True) \nplt.title('USDC ETH Moving Average Past 1 Hour',fontsize=15)\n#smooth the previous 1 hour","c4ce6ef3":"#just change the number depending how many hours you want to be plotted \nplotMovingAverage(usdc_eth['close_price'],8, plot_intervals=True) \nplt.title('USDC ETH Moving Average Past 8 Hours',fontsize=15)\n#smooth the previous 8 hours","dc22ec77":"#just change the number depending how many hours you want to be plotted \nplotMovingAverage(usdc_eth['close_price'],2, plot_intervals=True) \nplt.title('USDC ETH Moving Average Past 1 Hours',fontsize=15)\n#smooth the previous 1 hours","4997ed0c":"#see the last hour set window =2 \n#see the last 2 hours set =3 etc \nwindow=2\n#dont change this scale \nscale=1.96\nrolling_mean = usdc_eth['close_price'].rolling(window).mean()\nmae = mean_absolute_error(usdc_eth.close_price[window:], rolling_mean[window:])\ndeviation = np.std(usdc_eth.close_price[window:] - rolling_mean[window:])\nlower_bound = rolling_mean - (mae + scale * deviation)\n#lower_bound.shape\n#depending on if you want to see the most recent datapoint this is showing the most recent lower bound price in the past hour\n#i got that by uncommenting lower_bound.shape and finding out that it was length of 1006 so calling 1005 is the most recent datapoint\n#remove the box like this lower_bound and run that to see all data points for lower bound ","2db77b37":"lower_bound[1005]","ea81ec53":"lower_bound[1000]","36fe4d6a":"deviation","24cc8405":"#mean absolute error (very tiny number)\nmae","fdeb69ff":"upper_bound = rolling_mean + (mae + scale * deviation)\n#change like you change the lower_bound if you want to see other datapoints or whole thing\nupper_bound[1005]","475bda91":"upper_bound[1000]","ba9833c9":"#to see total of column called visor_fees\n#visor_usdc_eth_fees = usdc_eth['visor_fees'].sum()\n#visor_usdc_eth_fees","715da028":"usdc_usdt = pd.read_csv('..\/input\/usdc-usdt\/USDT_USDC.csv')","4f211ce9":"del usdc_usdt['Unnamed: 0']","2a686c74":"usdc_usdt.columns = ['timeInterval.minute', 'baseCurrency.symbol', 'baseCurrency.address',\n       'baseAmount', 'quoteCurrency.symbol', 'quoteCurrency.address',\n       'quoteAmount', 'trades', 'quotePrice', 'maximum_price', 'minimum_price',\n       'open_price', 'close_price', 'total_fees_estimate_(USDC)',\n       'Cumulative_fees_estimate_USDC', 'twap_7d']","30eaf87a":"usdc_usdt['total_fees'] = usdc_usdt['total_fees_estimate_(USDC)']*0.0003643","66409285":"#converting dates to datetime and then making that the index below\nusdc_usdt['time'] = pd.to_datetime(usdc_usdt['timeInterval.minute'], format = '%Y-%m-%d')\nusdc_usdt.index = usdc_usdt[\"time\"]\n#set the time period because this is when visor started on coingecko \nusdc_usdt = usdc_usdt.loc['2021-03-15':'2021-04-25']","34cde3ac":"#graphing basic up\/down patterns, overall trends, and anomalies \n#blue is hourly data and the orange is daily \ny = usdc_usdt['close_price']\nfig, ax = plt.subplots(figsize=(20, 6))\nax.plot(y,marker='.', linestyle='-', linewidth=0.5, label='Hourly')\n#change the d to M if you want to see monthly for example \nax.plot(y.resample('d').mean(),marker='o', markersize=8, linestyle='-', label='Daily Mean Resample')\nax.set_ylabel('Close Price')\nax.set_xlabel('Time')\nplt.title('USDC USDT Price',fontsize=20)\nax.legend();","d39acf2a":"moving_average(usdc_usdt['close_price'], 24)\n# prediction for the last observed day (past 24 hours)","28e8ffb6":"#see the last hour set window =2 \n#see the last 2 hours set =3 etc \nwindow=2\n#dont change this scale \nscale=1.96\nrolling_mean = usdc_usdt['close_price'].rolling(window).mean()\nmae = mean_absolute_error(usdc_usdt.close_price[window:], rolling_mean[window:])\ndeviation = np.std(usdc_usdt.close_price[window:] - rolling_mean[window:])\nlower_bound = rolling_mean - (mae + scale * deviation)\n#lower_bound.shape\n#depending on if you want to see the most recent datapoint this is showing the most recent lower bound price in the past hour\n#i got that by uncommenting lower_bound.shape and finding out that it was length of 1006 so calling 1005 is the most recent datapoint\n#remove the box like this lower_bound and run that to see all data points for lower bound ","e2f07947":"lower_bound[1007]","62692edd":"upper_bound = rolling_mean + (mae + scale * deviation)\n#change like you change the lower_bound if you want to see other datapoints or whole thing\nupper_bound[1007]","246bb085":"usdc_usdt['visor_fees']=usdc_usdt['total_fees']*.05","0945fa5b":"usdc_usdt_visor_fees = usdc_usdt['visor_fees'].sum()","6a38e656":"usdc_usdt_visor_fees","6a82e2c0":"plotMovingAverage(usdc_usdt['close_price'],8, plot_intervals=True) \nplt.title('USDC USDT Moving Average Past 8 Hours',fontsize=15)","30692000":"plotMovingAverage(usdc_usdt['close_price'],2, plot_intervals=True) \nplt.title('USDC USDT Moving Average Past 1 Hours',fontsize=15)","46f283bc":"rai_eth = pd.read_csv(\"..\/input\/rai-eth\/WETH_RAI.csv\")","0fb30dc7":"del rai_eth['Unnamed: 0']","8c29c57d":"rai_eth.columns = ['timeInterval.minute', 'baseCurrency.symbol',\n       'baseCurrency.address', 'baseAmount', 'quoteCurrency.symbol',\n       'quoteCurrency.address', 'quoteAmount', 'trades', 'quotePrice',\n       'maximum_price', 'minimum_price', 'open_price', 'close_price',\n       'total_fees_estimate_(RAI)', 'Cum_fees_estimate_RAI', 'twap_7d']","0e35cf81":"rai_eth['fees_estimate_eth']=rai_eth['total_fees_estimate_(RAI)']*0.00108492","3b129735":"rai_eth['time'] = pd.to_datetime(rai_eth['timeInterval.minute'], format = '%Y-%m-%d')\nrai_eth.index =rai_eth[\"time\"]\nrai_eth= rai_eth.loc['2021-03-15':'2021-04-25']","74d0ea17":"#graphing basic up\/down patterns, overall trends, and anomalies \n#blue is hourly data and the orange is daily \ny = rai_eth['close_price']\nfig, ax = plt.subplots(figsize=(20, 6))\nax.plot(y,marker='.', linestyle='-', linewidth=0.5, label='Hourly')\n#change the d to M if you want to see monthly for example \nax.plot(y.resample('d').mean(),marker='o', markersize=8, linestyle='-', label='Daily Mean Resample')\nax.set_ylabel('Close Price')\nax.set_xlabel('Time')\nplt.title('RAI ETH Price',fontsize=20)\nax.legend();","639afc2c":"#see the last hour set window =2 \n#see the last 2 hours set =3 etc \nwindow=2\n#dont change this scale \nscale=1.96\nrolling_mean = rai_eth['close_price'].rolling(window).mean()\nmae = mean_absolute_error(rai_eth.close_price[window:], rolling_mean[window:])\ndeviation = np.std(rai_eth.close_price[window:] - rolling_mean[window:])\nlower_bound = rolling_mean - (mae + scale * deviation)\n#lower_bound.shape\n#depending on if you want to see the most recent datapoint this is showing the most recent lower bound price in the past hour\n#i got that by uncommenting lower_bound.shape and finding out that it was length of 1006 so calling 1005 is the most recent datapoint\n#remove the box like this lower_bound and run that to see all data points for lower bound ","aa2f12ca":"lower_bound[926]","86bfb538":"upper_bound = rolling_mean + (mae + scale * deviation)\n#change like you change the lower_bound if you want to see other datapoints or whole thing\nupper_bound[926]","26e4d3ef":"rai_eth['visor_fees'] = rai_eth['fees_estimate_eth'] *.05","b0c503aa":"visor_rai_eth_fees = rai_eth.visor_fees.sum()\nvisor_rai_eth_fees","85cc9d90":"plotMovingAverage(rai_eth['close_price'],8, plot_intervals=True) \nplt.title('RAI ETH Moving Average Past 8 Hours',fontsize=15)","b6a3794b":"moving_average(rai_eth['close_price'], 8)","b88f79f0":"plotMovingAverage(rai_eth['close_price'],2, plot_intervals=True) \nplt.title('RAI ETH Moving Average Past 1 Hours',fontsize=15)","fd1db74e":"mir_ust = pd.read_csv(\"..\/input\/mir-ust\/MIR_UST.csv\")","d44332e8":"mir_ust.head()","c232e8cc":"mir_ust['time'] = pd.to_datetime(mir_ust['timeInterval.minute'], format = '%Y-%m-%d')\nmir_ust.index =mir_ust[\"time\"]\nmir_ust= mir_ust.loc['2021-03-15':'2021-04-25']","2bddc44f":"del mir_ust['Unnamed: 0']","28627561":"#see the last hour set window =2 \n#see the last 2 hours set =3 etc \nwindow=2\n#dont change this scale \nscale=1.96\nrolling_mean = mir_ust['close_price'].rolling(window).mean()\nmae = mean_absolute_error(mir_ust.close_price[window:], rolling_mean[window:])\ndeviation = np.std(mir_ust.close_price[window:] - rolling_mean[window:])\nlower_bound = rolling_mean - (mae + scale * deviation)\n#lower_bound.shape\n#depending on if you want to see the most recent datapoint this is showing the most recent lower bound price in the past hour\n#i got that by uncommenting lower_bound.shape and finding out that it was length of 1006 so calling 1005 is the most recent datapoint\n#remove the box like this lower_bound and run that to see all data points for lower bound ","04718f46":"#previous hour lower bound \nlower_bound[854]","25a4da7b":"#previous hour upper bound \nupper_bound = rolling_mean + (mae + scale * deviation)\n#change like you change the lower_bound if you want to see other datapoints or whole thing\nupper_bound[854]","80db22df":"mir_ust.columns = ['timeInterval.minute', 'baseCurrency.symbol',\n       'baseCurrency.address', 'baseAmount', 'quoteCurrency.symbol',\n       'quoteCurrency.address', 'quoteAmount', 'trades', 'quotePrice',\n       'maximum_price', 'minimum_price', 'open_price', 'close_price',\n       'total_fees_estimate_(UST)', 'Cum_fees_estimate_UST', 'twap_7d',\n       'time']","d29f9c53":"mir_ust['fees_eth'] = mir_ust['total_fees_estimate_(UST)']*0.00036352\nmir_ust['visor_fees_eth'] = mir_ust['fees_eth']*.05","03cf53ce":"visor_mir_ust_eth_fees = mir_ust['visor_fees_eth'].sum()\nvisor_mir_ust_eth_fees","693b966c":"moving_average(mir_ust['close_price'], 8)","1df01561":"plotMovingAverage(mir_ust['close_price'],8, plot_intervals=True) \nplt.title('MIR UST Moving Average Past 8 Hours',fontsize=15)","cbbeb018":"plotMovingAverage(mir_ust['close_price'],2, plot_intervals=True) \nplt.title('MIR UST Moving Average Past 1 Hours',fontsize=15)","7455568e":"tribe_fei = pd.read_csv(\"..\/input\/tribe-fei\/TRIBE_FEI.csv\")\ntribe_fei['time'] = pd.to_datetime(tribe_fei['timeInterval.minute'], format = '%Y-%m-%d')\ntribe_fei.index =tribe_fei[\"time\"]\ntribe_fei= tribe_fei.loc['2021-03-15':'2021-04-25']","40b8cd78":"tribe_fei.head()","f8d08d6d":"del tribe_fei['Unnamed: 0']","5f7bf28e":"tribe_fei.columns=['timeInterval.minute', 'baseCurrency.symbol', 'baseCurrency.address',\n       'baseAmount', 'quoteCurrency.symbol', 'quoteCurrency.address',\n       'quoteAmount', 'trades', 'quotePrice', 'maximum_price', 'minimum_price',\n       'open_price', 'close_price', 'total_fees_estimate_(FEI)',\n       'Cum_fees_estimate_FEI', 'twap_7d', 'time']","2f030f2b":"#see the last hour set window =2 \n#see the last 2 hours set =3 etc \nwindow=2\n#dont change this scale \nscale=1.96\nrolling_mean = tribe_fei['close_price'].rolling(window).mean()\nmae = mean_absolute_error(tribe_fei.close_price[window:], rolling_mean[window:])\ndeviation = np.std(tribe_fei.close_price[window:] - rolling_mean[window:])\nlower_bound = rolling_mean - (mae + scale * deviation)\n#lower_bound.shape\n#depending on if you want to see the most recent datapoint this is showing the most recent lower bound price in the past hour\n#i got that by uncommenting lower_bound.shape and finding out that it was length of 1006 so calling 1005 is the most recent datapoint\n#remove the box like this lower_bound and run that to see all data points for lower bound ","d945c08e":"lower_bound[517]","e24cfe48":"#previous hour upper bound \nupper_bound = rolling_mean + (mae + scale * deviation)\n#change like you change the lower_bound if you want to see other datapoints or whole thing\nupper_bound[517]","c90d6c71":"tribe_fei[\"fees_eth\"]=tribe_fei['total_fees_estimate_(FEI)']*0.00034478","18f11ac8":"tribe_fei['visor_fees']=tribe_fei['fees_eth']*.05","ee7e80e0":"visor_fees_tribe_fei = tribe_fei.fees_eth.sum()\nvisor_fees_tribe_fei","fce49f0e":"plotMovingAverage(tribe_fei['close_price'],8, plot_intervals=True) \nplt.title('TRIBE FEI Moving Average Past 8 Hours',fontsize=15)","2c30e3bc":"plotMovingAverage(tribe_fei['close_price'],2, plot_intervals=True) \nplt.title('TRIBE FEI Moving Average Past 1 Hours',fontsize=15)","592d0e13":"uni_eth = pd.read_csv(\"..\/input\/uni-weth\/UNI_WETH.csv\")","ee46d92c":"uni_eth[\"time\"] = pd.to_datetime(uni_eth['timeInterval.minute'], format = '%Y-%m-%d')","873744ab":"uni_eth.head()","0d8989ea":"uni_eth.index =uni_eth[\"time\"]","644ab068":"uni_eth['fees_eth']=uni_eth['total_fees_estimate_(WETH)']","fcc888be":"#see the last hour set window =2 \n#see the last 2 hours set =3 etc \nwindow=2\n#dont change this scale \nscale=1.96\nrolling_mean = uni_eth['close_price'].rolling(window).mean()\nmae = mean_absolute_error(uni_eth.close_price[window:], rolling_mean[window:])\ndeviation = np.std(uni_eth.close_price[window:] - rolling_mean[window:])\nlower_bound = rolling_mean - (mae + scale * deviation)\n#lower_bound.shape\n#depending on if you want to see the most recent datapoint this is showing the most recent lower bound price in the past hour\n#i got that by uncommenting lower_bound.shape and finding out that it was length of 1006 so calling 1005 is the most recent datapoint\n#remove the box like this lower_bound and run that to see all data points for lower bound \nlower_bound[1343]\n#change like you change the lower_bound if you want to see other datapoints or whole thing","3cb36e35":"#upper bound for the previous hour \nupper_bound = rolling_mean + (mae + scale * deviation)\nupper_bound[1343]","d339d8aa":"uni_eth['visor_fees']=uni_eth['total_fees_estimate_(WETH)']*.05","f1e822b5":"visor_uni_eth_fees = uni_eth['visor_fees'].sum()\nvisor_uni_eth_fees","812e51cb":"del uni_eth['Unnamed: 0']","789d103d":"uni_eth.columns = ['timeInterval.minute', 'baseCurrency.symbol', 'baseCurrency.address',\n       'baseAmount', 'quoteCurrency.symbol', 'quoteCurrency.address',\n       'quoteAmount', 'trades', 'quotePrice', 'maximum_price', 'minimum_price',\n       'open_price', 'close_price', 'total_fees_estimate_(WETH)',\n       'Cum_fees_estimate_WETH', 'twap_7d', 'time', 'fees_eth', 'visor_fees']","cd7c293a":"uni_eth.head()","d9df9496":"plotMovingAverage(uni_eth['close_price'],8, plot_intervals=True) \nplt.title('UNI ETH Moving Average Past 8 Hours',fontsize=15)","2e0b6321":"plotMovingAverage(uni_eth['close_price'],2, plot_intervals=True) \nplt.title('UNI ETH Moving Average Past 1 Hours',fontsize=15)","817b2068":"dai_eth=pd.read_csv(\"..\/input\/weth-dai\/WETH_DAI.csv\")\ndai_eth['time'] = pd.to_datetime(dai_eth['timeInterval.minute'], format = '%Y-%m-%d')\ndai_eth.index =dai_eth[\"time\"]\ndai_eth= dai_eth.loc['2021-03-15':'2021-04-25']","9ece046b":"del dai_eth['Unnamed: 0']","f406b010":"dai_eth.columns = ['timeInterval.minute', 'baseCurrency.symbol', 'baseCurrency.address',\n       'baseAmount', 'quoteCurrency.symbol', 'quoteCurrency.address',\n       'quoteAmount', 'trades', 'quotePrice', 'maximum_price', 'minimum_price',\n       'open_price', 'close_price', 'total_fees_estimate',\n       'Cumulative_fees_estimate_DAI', 'twap_7d', 'time']","92f4be2c":"#see the last hour set window =2 \n#see the last 2 hours set =3 etc \nwindow=2\n#dont change this scale \nscale=1.96\nrolling_mean = dai_eth['close_price'].rolling(window).mean()\nmae = mean_absolute_error(dai_eth.close_price[window:], rolling_mean[window:])\ndeviation = np.std(dai_eth.close_price[window:] - rolling_mean[window:])\nlower_bound = rolling_mean - (mae + scale * deviation)\nlower_bound.shape\n#depending on if you want to see the most recent datapoint this is showing the most recent lower bound price in the past hour\n#i got that by uncommenting lower_bound.shape and finding out that it was length of 1006 so calling 1005 is the most recent datapoint\n#remove the box like this lower_bound and run that to see all data points for lower bound \n#change like you change the lower_bound if you want to see other datapoints or whole thing","7b48d845":"lower_bound[1007]","1c8c3f83":"#upper bound for the previous hour \nupper_bound = rolling_mean + (mae + scale * deviation)\nupper_bound[1007]","e1e5ce20":"dai_eth['fees_eth']=dai_eth['total_fees_estimate']*0.00036332","21f0ea75":"dai_eth['visor_fees']=dai_eth['fees_eth']*.05","51c25864":"dai_eth_visor_fees = dai_eth['visor_fees'].sum()\ndai_eth_visor_fees","a88601f5":"plotMovingAverage(dai_eth['close_price'],8, plot_intervals=True) \nplt.title('DAI ETH Moving Average Past 8 Hours',fontsize=15)","fd68c6a0":"plotMovingAverage(dai_eth['close_price'],2, plot_intervals=True) \nplt.title('DAI ETH Moving Average Past 1 Hours',fontsize=15)","d5c402c0":"frax_usdc=pd.read_csv('..\/input\/frax-usdc\/USDC_FRAX.csv')","a4fabd26":"del frax_usdc['Unnamed: 0']","42509f97":"frax_usdc.head()","41bcd2df":"frax_usdc['time'] = pd.to_datetime(frax_usdc['timeInterval.minute'], format = '%Y-%m-%d')\nfrax_usdc.index =frax_usdc[\"time\"]\nfrax_usdc= frax_usdc.loc['2021-03-15':'2021-04-25']","ba49b2bd":"frax_usdc.columns = ['timeInterval.minute', 'baseCurrency.symbol', 'baseCurrency.address',\n       'baseAmount', 'quoteCurrency.symbol', 'quoteCurrency.address',\n       'quoteAmount', 'trades', 'quotePrice', 'maximum_price', 'minimum_price',\n       'open_price', 'close_price', 'total_fees_estimate_(FRAX)',\n       'Cumulative_fees_estimate_FRAX', 'twap_7d', 'time']","748b31e9":"frax_usdc['fees_eth']=frax_usdc['total_fees_estimate_(FRAX)']*0.0003657","e99f920e":"frax_usdc['visor_fees']=frax_usdc['fees_eth']*.05","4bf3cc77":"frax_usdc_visor_fees = frax_usdc['visor_fees'].sum()","996c1c95":"frax_usdc_visor_fees","f6a2169d":"frax_usdc.head()","fe32313a":"plotMovingAverage(frax_usdc['close_price'],8, plot_intervals=True) \nplt.title('FRAX USDC Moving Average Past 8 Hours',fontsize=15)","b4b6512b":"plotMovingAverage(frax_usdc['close_price'],2, plot_intervals=True) \nplt.title('FRAX USDC Moving Average Past 1 Hours',fontsize=15)","fe697903":"fei_eth=pd.read_csv(\"..\/input\/weth-fei\/WETH_FEI.csv\")\nfei_eth['time'] = pd.to_datetime(fei_eth['timeInterval.minute'], format = '%Y-%m-%d')\nfei_eth.index =fei_eth[\"time\"]\nfei_eth= fei_eth.loc['2021-03-15':'2021-04-25']","fdc84ed6":"del fei_eth['Unnamed: 0']","f56f1b50":"fei_eth.columns =['timeInterval.minute', 'baseCurrency.symbol', 'baseCurrency.address',\n       'baseAmount', 'quoteCurrency.symbol', 'quoteCurrency.address',\n       'quoteAmount', 'trades', 'quotePrice', 'maximum_price', 'minimum_price',\n       'open_price', 'close_price', 'total_fees_estimate_(FEI)',\n       'Cum_fees_estimate_FEI', 'twap_7d', 'time']","cd04ea21":"fei_eth['fees_eth']=fei_eth['total_fees_estimate_(FEI)']*0.00034478","2d93c511":"fei_eth.head()","7be958b5":"fei_eth['visor_fees']=fei_eth['fees_eth']*.05","8b86d9ca":"visor_fei_eth_fees = fei_eth.visor_fees.sum()\nvisor_fei_eth_fees","1e18f32e":"plotMovingAverage(fei_eth['close_price'],8, plot_intervals=True) \nplt.title('FEI ETH Moving Average Past 8 Hours',fontsize=15)","cd9e3244":"plotMovingAverage(fei_eth['close_price'],2, plot_intervals=True) \nplt.title('FEI ETH Moving Average Past 1 Hours',fontsize=15)","a245df72":"lusd_eth=pd.read_csv(\"..\/input\/weth-lusdcsv\/WETH_LUSD.csv\")\nlusd_eth['time'] = pd.to_datetime(lusd_eth['timeInterval.minute'], format = '%Y-%m-%d')","c56d9801":"lusd_eth.index =lusd_eth[\"time\"]","fc45f4c8":"lusd_eth= lusd_eth.loc['2021-03-15':'2021-04-25']","1551ce0b":"del lusd_eth['Unnamed: 0']","0210044a":"lusd_eth.columns =['timeInterval.minute', 'baseCurrency.symbol', 'baseCurrency.address',\n       'baseAmount', 'quoteCurrency.symbol', 'quoteCurrency.address',\n       'quoteAmount', 'trades', 'quotePrice', 'maximum_price', 'minimum_price',\n       'open_price', 'close_price', 'total_fees_estimate_(LUSD)',\n       'Cumulative_fees_estimate_LUSD', 'twap_7d', 'time']","56918629":"lusd_eth['fees_eth']=lusd_eth['total_fees_estimate_(LUSD)']*0.0003653","f67292e3":"lusd_eth['visor_fees']=lusd_eth.fees_eth*.05","d816d6e2":"lusd_eth.head()\n","51d702b9":"visor_lusd_eth_fees = lusd_eth['visor_fees'].sum()\nvisor_lusd_eth_fees","59f84595":"plotMovingAverage(lusd_eth['close_price'],8, plot_intervals=True) \nplt.title('LUSD ETH Moving Average Past 8 Hours',fontsize=15)","40513563":"plotMovingAverage(lusd_eth['close_price'],2, plot_intervals=True) \nplt.title('LUSD ETH Moving Average Past 1 Hours',fontsize=15)","10acc295":"eth_usdt = pd.read_csv(\"..\/input\/weth-usdt\/WETH_USDT.csv\")\neth_usdt['time'] = pd.to_datetime(eth_usdt['timeInterval.minute'], format = '%Y-%m-%d')\neth_usdt.index =eth_usdt[\"time\"]\neth_usdt= eth_usdt.loc['2021-03-15':'2021-04-25']","ca39d8a5":"eth_usdt.columns = ['timeInterval.minute', 'baseCurrency.symbol', 'baseCurrency.address',\n       'baseAmount', 'quoteCurrency.symbol', 'quoteCurrency.address',\n       'quoteAmount', 'trades', 'quotePrice', 'maximum_price', 'minimum_price',\n       'open_price', 'close_price', 'total_fees_estimate_(USDT)',\n       'Cumulative_fees_estimate_USDT', 'twap_7d', 'time', 'visor_fees']","505319ef":"eth_usdt['fees_eth']=eth_usdt['total_fees_estimate_(USDT)']*0.0003640","5c7292c9":"eth_usdt['visor_fees']=eth_usdt['fees_eth']*.05","4cae9a02":"visor_eth_usdt_fees = eth_usdt['visor_fees'].sum()\nvisor_eth_usdt_fees","0939e844":"eth_usdt.head()","69a90343":"plotMovingAverage(eth_usdt['close_price'],8, plot_intervals=True) \nplt.title('ETH USDT Moving Average Past 8 Hours',fontsize=15)","9e0f4c94":"plotMovingAverage(eth_usdt['close_price'],2, plot_intervals=True) \nplt.title('ETH USDT Moving Average Past 1 Hours',fontsize=15)","1e29885f":"wbtc_eth = pd.read_csv(\"..\/input\/weth-wbtc\/WETH_WBTC.csv\")\nwbtc_eth['time'] = pd.to_datetime(wbtc_eth['timeInterval.minute'], format = '%Y-%m-%d')\nwbtc_eth.index =wbtc_eth[\"time\"]\nwbtc_eth= wbtc_eth.loc['2021-03-15':'2021-04-25']","f4c10ef3":"del wbtc_eth['Unnamed: 0']","f8c65204":"wbtc_eth.columns = ['timeInterval.minute', 'baseCurrency.symbol', 'baseCurrency.address',\n       'baseAmount', 'quoteCurrency.symbol', 'quoteCurrency.address',\n       'quoteAmount', 'trades', 'quotePrice', 'maximum_price', 'minimum_price',\n       'open_price', 'close_price', 'total_fees_estimate_(WBTC)',\n       'Cum_fees_estimate_WBTC', 'twap_7d', 'time']","84f3dc55":"wbtc_eth.head()","5659ed0b":"wbtc_eth['fees_eth'] = wbtc_eth['total_fees_estimate_(WBTC)']*20.7950872","6f34792a":"wbtc_eth['visor_fees'] = wbtc_eth['fees_eth']*.05\nvisor_wbtc_eth_fees = wbtc_eth['visor_fees'].sum()\nvisor_wbtc_eth_fees","8ff2e1fc":"plotMovingAverage(wbtc_eth['close_price'],8, plot_intervals=True) \nplt.title('WBTC ETH Moving Average Past 8 Hours',fontsize=15)","0e08ecd6":"plotMovingAverage(wbtc_eth['close_price'],2, plot_intervals=True) \nplt.title('WBTC ETH Moving Average Past 1 Hours',fontsize=15)","dc83e264":"wise_eth = pd.read_csv('..\/input\/wise-weth\/WISE_WETH.csv')\nwise_eth['time'] = pd.to_datetime(wise_eth['timeInterval.minute'], format = '%Y-%m-%d')\nwise_eth.index =wise_eth[\"time\"]\nwise_eth= wise_eth.loc['2021-03-15':'2021-04-25']","006cf98b":"del wise_eth['Unnamed: 0']","0f133ba4":"wise_eth.columns = ['timeInterval.minute', 'baseCurrency.symbol', 'baseCurrency.address',\n       'baseAmount', 'quoteCurrency.symbol', 'quoteCurrency.address',\n       'quoteAmount', 'trades', 'quotePrice', 'maximum_price', 'minimum_price',\n       'open_price', 'close_price', 'total_fees_estimate_(ETH)',\n       'Cum_fees_estimate_ETH', 'twap_7d', 'time']","3e284b09":"wise_eth.head()","3edc8999":"wise_eth['fees']=wise_eth['total_fees_estimate_(ETH)']*2.1364819","8ac8abb1":"wise_eth['visor_fees']=wise_eth['fees']*.05","c9997030":"wise_eth['visor_fees'].sum()","2dd731a7":"visor_wise_eth_fees = wise_eth['visor_fees'].sum()\nvisor_wise_eth_fees","0b7ad022":"plotMovingAverage(wise_eth['close_price'],8, plot_intervals=True) \nplt.title('WISE ETH Moving Average Past 8 Hours',fontsize=15)","5ad693c9":"plotMovingAverage(wise_eth['close_price'],2, plot_intervals=True) \nplt.title('WISE ETH Moving Average Past 1 Hours',fontsize=15)","5f6d37f8":"usdt_hkmt = pd.read_csv(\"..\/input\/usdt-hkmt\/USDT_HKMT.csv\")","1a274d57":"del usdt_hkmt['Unnamed: 0']","0a4f445a":"usdt_hkmt.columns=['timeInterval.minute', 'baseCurrency.symbol', 'baseCurrency.address',\n       'baseAmount', 'quoteCurrency.symbol', 'quoteCurrency.address',\n       'quoteAmount', 'trades', 'quotePrice', 'maximum_price', 'minimum_price',\n       'open_price', 'close_price', 'total_fees_estimate_(HKMT)',\n       'Cumulative_fees_estimate_HKMT', 'twap_7d']","df27e082":"usdt_hkmt['time'] = pd.to_datetime(usdt_hkmt['timeInterval.minute'], format = '%Y-%m-%d')\nusdt_hkmt.index =usdt_hkmt[\"time\"]\nusdt_hkmt= usdt_hkmt.loc['2021-03-15':'2021-04-25']","15b7ad6f":"usdt_hkmt['fees_eth']=usdt_hkmt['total_fees_estimate_(HKMT)']*0.0000465","0bd1d0a9":"usdt_hkmt['visor_fees']=usdt_hkmt['fees_eth']*.05","4a0ec23e":"usdt_hkmt_visor_fees = usdt_hkmt['visor_fees'].sum()","9547bb22":"usdt_hkmt_visor_fees","be91e48a":"plotMovingAverage(usdt_hkmt['close_price'],2, plot_intervals=True) \nplt.title('USDT HKMT Moving Average Past 1 Hours',fontsize=15)","2ce3b587":"plotMovingAverage(usdt_hkmt['close_price'],3, plot_intervals=True) \nplt.title('USDT HKMT Moving Average Past 2 Hours',fontsize=15)","4fef6426":"eth_link= pd.read_csv(\"..\/input\/eth-link\/WETH_LINK.csv\")","ad13cb76":"del eth_link['Unnamed: 0']","736d5750":"eth_link.columns=['timeInterval.minute', 'baseCurrency.symbol', 'baseCurrency.address',\n       'baseAmount', 'quoteCurrency.symbol', 'quoteCurrency.address',\n       'quoteAmount', 'trades', 'quotePrice', 'maximum_price', 'minimum_price',\n       'open_price', 'close_price', 'total_fees_estimate_(LINK)',\n       'Cumulative_fees_estimate_LINK', 'twap_7d']","b3917b6f":"eth_link['fees'] = eth_link['total_fees_estimate_(LINK)']*0.0137346","f894ed43":"eth_link_visor_fees = eth_link['fees'].sum()","665e200e":"plotMovingAverage(eth_link['close_price'],8, plot_intervals=True) \nplt.title('ETH LINK Moving Average Past 8 Hours',fontsize=15)","4a9eb2b3":"plotMovingAverage(eth_link['close_price'],2, plot_intervals=True) \nplt.title('ETH LINK Moving Average Past 1 Hours',fontsize=15)","31f7dd03":"\nvisor_prices = pd.read_csv(\"..\/input\/visor-data\/visor_prices.csv\")","6e5f61c5":"visor_prices['dt'] = pd.to_datetime(visor_prices['time'], format = '%Y-%m-%d')\nvisor_prices.index =visor_prices[\"dt\"]\nvisor_prices= visor_prices.loc['2021-03-15':'2021-04-25']","8014b839":"del visor_prices['visor_marketcap']","f71377e6":"visor_prices.head()","9e077231":"visor_total = visor_mir_ust_eth_fees+visor_rai_eth_fees+visor_fees_usdc_eth+visor_fees_tribe_fei+visor_uni_eth_fees+dai_eth_visor_fees+visor_fei_eth_fees+visor_lusd_eth_fees+visor_eth_usdt_fees+visor_wbtc_eth_fees+visor_wise_eth_fees+frax_usdc_visor_fees+usdc_usdt_visor_fees+usdt_hkmt_visor_fees+eth_link_visor_fees","4c4af1f9":"visor_total=visor_total *(.1)","b6332426":"ETH_to_VISR = visor_total*855.6147910\nETH_to_VISR","df044ba7":"VISR_to_USD = ETH_to_VISR*3.2388137\nVISR_to_USD","9aa65ca7":"VISR_to_USD\/5000000","a592bb25":"new= pd.read_csv('..\/input\/visornew\/visornew.csv')","acae3fbd":"new.head()\nnew['timedt'] = pd.to_datetime(new['dt'], format = '%Y-%m-%d')","48175b0a":"new.head()","a9e94f1a":"plt.figure(figsize=(20,5))\nplt.title('New Visor Price',fontsize=20)\nplt.xticks(rotation=45)\nsns.lineplot(x='timedt',y='visor_price', data=new, color='deepskyblue')\n#lines for buys ","4e7bf9cc":"visor_prices = pd.read_csv(\"..\/input\/visor-data\/visor_prices.csv\")","68f20986":"visor_prices['dt'] = pd.to_datetime(visor_prices['time'], format = '%Y-%m-%d')\nvisor_prices.index =visor_prices[\"dt\"]\nvisor_prices= visor_prices.loc['2021-03-15':'2021-04-25']","96ab3680":"del visor_prices['visor_marketcap']","16f4e0e9":"visor_prices.columns = ['time', 'visor_price', 'visor_total_volume', 'dt']","8ae7c2c3":"visor_prices['time_dt'] = pd.to_datetime(visor_prices['time'], format = '%Y-%m-%d')","5c612613":"visor_prices.head()","3ac204c4":"visor_7d = visor_prices.rolling(7, center=True).mean()\nvisor_7d.head(10)","f6e445fe":"visor_weekly_mean = visor_prices.resample('W').mean()\nvisor_weekly_mean.tail(3)","c1ddc451":"start, end = '2021-03', '2021-04'","8c3eee49":"fig, ax = plt.subplots(figsize=(20,5))\nax.plot(visor_prices.loc[start:end, 'visor_price'],\nmarker='.', linestyle='-', linewidth=0.5, label='daily')\nax.plot(visor_weekly_mean.loc[start:end, 'visor_price'],\nmarker='o', markersize=8, linestyle='-', label='Weekly Mean Resample')\nax.plot(visor_7d.loc[start:end, 'visor_price'],\nmarker='.', linestyle='-', label='7-d Rolling Mean')\nplt.title('Visor Price 7 day rolling',fontsize=20)\nax.set_ylabel('Visor Prices')\nax.legend()\n","e538fe7b":"plt.figure(figsize=(20,5))\nplt.title('Visor Price no changes',fontsize=20)\nax = visor_prices.loc['2021-03-15':'2021-04-25', 'visor_price'].plot( linestyle='-', markerfacecolor='y',color='r',markersize=7)\nax.set_ylabel('Visor Prices')","8b626e0c":"### TRIBE-FEI","ac374eae":"**Previous 1 Hours**","fcb7a2c7":"### Getting Uniswap Pool Data ","e332db57":"### Current amount in top Uniswap pools based on 7 day volume","e9e72f64":"**Upper Bound of Previous Hour**","65d6412b":"Bitquery to CSV\n\nTo add a new csv file\n\n1. name_of_dataframe = pd.read_csv(\"name_of_file.csv\")\n2. name_of_dataframe.shape to see how big it is \n3. name of dataframe.summary \n4. name_of_dataframe.head() to check it out \n5. add new columns by doing like name_of_dataframe['new_column'] = set to equation or multiply to columns etc.\n6. if you want to remove a column just do del name_of_dataframe['new_column']  and new_column column will be deleted","85ee1b15":"### 15 Top Uniswap Pairs - upper and lower bounds charted w\/ moving average (custom window function)","1d9d3c6b":"### ETH-USDT","ad596b6a":"### 7 day rolling ","c4d0b109":"### RAI-ETH","ebf119fb":"### FEI-ETH","0aff7164":"### USDC-ETH","07863acf":"**Lower Bound of Previous Hour**","5a2e0c69":"**Previous 8 Hours**","c1db9b6a":"**Upper Bound of Previous 5 Hours**","467ad2eb":"**Previous 1 Hours**","9ba5828b":"\n## Calculating total Visor fees","23b491ff":"### MIR-UST","97e073aa":"### USDC-USDT","4d01eacb":"**Previous 8 Hours**","95b9a580":"### FRAX-USDC","b1ff1197":"### WBTC-ETH","6500c14d":"**Previous 8 Hours**","ed2252f8":"### DAI-ETH","d6e2f4d6":"## ETH-LINK","b7b222f4":"## Calculating optimal VISR buys (post-local maximum \/ pre-trend reversal strategy)","84fcd1c4":"# Visor Finance Capital Momentum Gradient","802c1b3f":"**the graph call**\n{\n pair(id: \"0xb4e16d0168e52d35cacd2c6185b44281ec28c9dc\"){\n     token0 {\n       id\n       symbol\n       name\n       derivedETH\n     }\n     token1 {\n       id\n       symbol\n       name\n       derivedETH\n     }\n     reserve0\n     reserve1\n     reserveUSD\n     trackedReserveETH\n     token0Price\n     token1Price\n     volumeUSD\n     txCount\n }\n}","cfc05069":"### WISE-ETH","9496e3d8":"### LUSD-ETH","28892dec":"### UNI-ETH","f2b88311":"### Ethereum to Visor","8fa571fb":"**Previous 8 Hours**","67fd8f16":"**Previous 1 Hours**","04251474":"### Fees in ETH ","cb065e92":"### USDT-HKMT","ed64aceb":"**Previous 8 Hours**","65a1bbfd":"**Lower Bound of Previous 5 Hours**"}}