{"cell_type":{"0e5462d4":"code","fbb27668":"code","75e887a9":"code","207529a8":"code","29ca15a3":"code","dfa1e0ba":"code","dfe3f6ee":"code","c4a804dd":"code","b05e53d8":"code","31bedfc3":"code","b68136b3":"code","50062ce6":"code","67823d84":"code","aa7e8aec":"code","6f1c1448":"code","16abc440":"code","5e1893e9":"code","f49d366a":"markdown","16af9aab":"markdown","c96c6891":"markdown","e30a4183":"markdown","e0783c04":"markdown","989c4d25":"markdown","b114df4b":"markdown","622bdf14":"markdown","e4dd439a":"markdown","f35c51c5":"markdown","7da34fcb":"markdown","bcb11145":"markdown","6a920af5":"markdown","ee03d04d":"markdown"},"source":{"0e5462d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fbb27668":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","75e887a9":"df_covid = pd.read_csv(\"\/kaggle\/input\/latest-covid19-india-statewise-data\/Latest Covid-19 India Status.csv\")\ndf_covid.head()","207529a8":"df_covid.info()","29ca15a3":"df_covid.columns","dfa1e0ba":"df_covid.index","dfe3f6ee":"df_covid[\"State\/UTs\"].nunique()","c4a804dd":"high_cases = df_covid.sort_values(by='Total Cases',ascending=False).head(10)\nxpos = np.arange(len(high_cases[\"State\/UTs\"]))\nfig = plt.subplots(figsize=(15,6))\nplt.xticks(xpos,high_cases[\"State\/UTs\"])\nplt.bar(high_cases[\"State\/UTs\"],high_cases[\"Total Cases\"],color = 'red',width=0.5)\nplt.xlabel(\"Name of the State\")\nplt.ylabel(\"Total Cases\")\nplt.title(\"Top 10 states by Total cases\")\nplt.show()","b05e53d8":"least_cases = df_covid.sort_values(by='Total Cases',ascending=True).head()\nypos = np.arange(len(least_cases[\"State\/UTs\"]))\nfig = plt.subplots(figsize=(20,6))\nplt.xlabel(\"Name of the state\")\nplt.ylabel(\"Total Cases\")\nplt.title(\"Top 5 states having least cases\")\nplt.xticks(ypos,least_cases[\"State\/UTs\"])\nplt.bar(least_cases[\"State\/UTs\"],least_cases[\"Total Cases\"],color = 'orange',width=0.5)\nplt.show()","31bedfc3":"high_deaths = df_covid.sort_values(by = \"Deaths\",ascending = False).head(10)\nstate_names = np.arange(len(high_deaths[\"State\/UTs\"]))\nplt.figure(figsize=(15,8))\nplt.scatter(x = high_deaths[\"State\/UTs\"],y=high_deaths[\"Deaths\"],c='black')\nplt.plot(high_deaths[\"State\/UTs\"],high_deaths[\"Deaths\"],c='r')\nplt.xlabel(\"Name of State\")\nplt.ylabel(\"Deaths\")\nplt.title(\"Top 10 states with highest No. of Deaths\")\nplt.grid()\nplt.show()","b68136b3":"high_death_ratio = df_covid.sort_values(by='Death Ratio (%)',ascending=False).head(10)\nstates = np.arange(len(high_death_ratio[\"State\/UTs\"]))\nsns.relplot(high_death_ratio[\"Total Cases\"],high_death_ratio[\"Death Ratio (%)\"],\n            hue=high_death_ratio[\"State\/UTs\"])\nplt.show()","50062ce6":"sns.relplot(x=\"Total Cases\",y=\"Active\",kind=\"line\",data=df_covid,color = 'red')\nplt.grid()","67823d84":"sns.relplot(x='Total Cases',y='Deaths',kind='line',data=df_covid,color='black')\nplt.grid()","aa7e8aec":"sns.relplot(x='Total Cases',y='Discharged',color='green',kind='line',data=df_covid)\nplt.grid()","6f1c1448":"df_covid.corr()","16abc440":"sns.heatmap(df_covid.corr())","5e1893e9":"correlation = df_covid.corr()\nsorted_correlation = correlation.loc[\"Total Cases\":\"Deaths\",\"Total Cases\":\"Deaths\"]\nsns.heatmap(sorted_correlation)","f49d366a":"# Removing Duplicates if any","16af9aab":"# Correlation","c96c6891":"# Importing Libraries","e30a4183":"# Total cases vs Discharged","e0783c04":"# Top 5 States with least total cases","989c4d25":"# Top 10 States with highest total cases","b114df4b":"# Total cases vs Deaths","622bdf14":"# Top 10 states having highest death ratio","e4dd439a":"#### Since, no. of rows are equal to no. of unique elements there are no duplicates in 'State\/UTs' column","f35c51c5":"# Finding missing values if any","7da34fcb":"# Correlation between Total Cases & (Active, Deaths, Discharged)","bcb11145":"# Total Cases vs Active Cases","6a920af5":"# Importing Dataset ","ee03d04d":"# Top 10 states having highest number of deaths"}}