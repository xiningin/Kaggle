{"cell_type":{"c25f9e36":"code","e7d0157c":"code","3d4c00a1":"code","446bac58":"code","a7b7c243":"code","721b9fec":"code","bed82de9":"code","9744d8ae":"code","2097b1fe":"code","5a3c4430":"code","e87c0a52":"code","68dc30af":"code","a302cdfc":"code","a8494d9a":"code","3ea5e40d":"code","31e5e0e3":"code","e9d822a8":"code","5a5b8e10":"code","41c78c71":"code","eee06469":"code","d1ffc3a8":"code","661e20db":"code","3036e86b":"code","72deb978":"code","87a3e871":"code","3e2c58a7":"code","26149400":"code","807f4cb8":"code","41d3a5d1":"code","2fcc8254":"code","83d5857c":"code","25674cc2":"code","25242dc6":"code","d6ba8580":"code","8ff1c184":"code","96178821":"code","86e947a0":"code","c117eb90":"code","15f49e3b":"code","cb9b8edb":"code","bdca8144":"code","09fc309b":"code","5b6d7e22":"code","2b35ee90":"code","2a7f0e1f":"code","7c85af16":"code","584808ef":"code","93dbd5eb":"code","f30a69ac":"code","765578d8":"code","9fcbc340":"code","4e4198b4":"code","522314ca":"code","7f4575be":"code","cf7b0590":"code","1281da53":"code","5ee44473":"code","2731961d":"code","4c0b8f12":"code","e5a0fc82":"code","4f72ba6a":"code","4cd22440":"code","60c2fdc5":"code","6dd8ebb1":"code","b8a3bcac":"code","0a09498b":"markdown","900757cb":"markdown","7090daeb":"markdown","47442646":"markdown","42158219":"markdown","41267edb":"markdown","6940dae9":"markdown","fccf4ad5":"markdown","15a8e42c":"markdown","8b7e5607":"markdown","cc956d60":"markdown","a32e3b35":"markdown","3a01867b":"markdown","8e610b8a":"markdown","193e614c":"markdown","6e5a4ac0":"markdown","799a81a6":"markdown","28473550":"markdown","eef7bb0a":"markdown"},"source":{"c25f9e36":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\npd.set_option('max_columns', 10, 'max_rows', 10)","e7d0157c":"tr_train = pd.read_csv('..\/input\/X_train.csv', encoding='cp949')\ntr_test = pd.read_csv('..\/input\/X_test.csv', encoding='cp949')\ntr = pd.concat([tr_train, tr_test])\ntr['real_amt']= tr.tot_amt \/ tr.inst_mon\ntr['sdate'] = tr.sales_date.str[:10]\ntr['dist_rate'] = (tr['dis_amt']\/tr['tot_amt'])*100","3d4c00a1":"tr.loc[456697,\"sales_time\"] = 1530","446bac58":"tr[\"time\"] = tr['sdate'].astype(str).str.cat(tr[\"sales_time\"].astype(str), sep =\" \") ","a7b7c243":"tr[\"time\"] = pd.to_datetime(tr.time, format='%Y-%m-%d %H%M')","721b9fec":"features = []","bed82de9":"#\ud3c9\uade0\ud560\uc778\uc728\nf = tr.groupby('custid')['dist_rate'].agg([('dis_rate', 'mean')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","9744d8ae":"#\ud3c9\uade0\uc2dc\uac04\nf = tr.groupby(['custid'])['sales_time'].agg([('sales_time', 'mean')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","2097b1fe":"#\ub0a8\uc131\ud30c\ud2b8\ndf = tr.groupby(['custid','part_nm'])['tot_amt'].agg([('tot_amt_part', 'sum')]).reset_index()\ndf['part_nm'] = np.where(df.part_nm.str.contains('\ub0a8\uc131'), '\ub0a8\uc131', '\ube44\ub0a8\uc131')\ndf = df.pivot_table(values='tot_amt_part', index=df.custid, columns='part_nm', aggfunc='first',fill_value=0).reset_index()\ndf['\ub0a8\uc131part'] = (df['\ub0a8\uc131'] \/ (df['\ub0a8\uc131'] + df['\ube44\ub0a8\uc131'])) * 100\ndf = df.fillna(0)\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","5a3c4430":"#\ud654\uc7a5\ud488\uad6c\ub9e4\ube44\uc728\ndf = tr.groupby(['custid','corner_nm'])['tot_amt'].agg([('tot_amt_corner', 'sum')]).reset_index()\ndf['corner_nm'] = np.where(df.corner_nm.str.contains('\ud654\uc7a5\ud488'), '\ud654\uc7a5\ud488', '\ube44\ud654\uc7a5\ud488')\ndf = df.pivot_table(values='tot_amt_corner', index=df.custid, columns='corner_nm', aggfunc='first',fill_value=0).reset_index()\ndf['\ud654\uc7a5\ud488\ube44\uc728'] = (df['\ud654\uc7a5\ud488'] \/ (df['\ud654\uc7a5\ud488'] + df['\ube44\ud654\uc7a5\ud488'])) * 100\ndf = df.fillna(0)\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","e87c0a52":"#\uc1fc\ud551\uc2dc\uac04\ndf = tr.groupby(['sdate','custid'])['time'].agg([('time', ['min','max'])]).reset_index()\ndf['shopping_time'] = (df['time']['max'] - df['time']['min']).dt.total_seconds()\ndf.drop(['sdate','time'], axis=1, inplace=True,level=0)\ndf = df.groupby(['custid'])['shopping_time'].agg([('shopping_time_mean','mean')]).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","68dc30af":"#\ud560\ubd80\ub300\ube44\ud3c9\uade0\uc2e4\uad6c\ub9e4\nf = tr.groupby('custid')['real_amt'].agg([('real_amt', 'mean')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","a302cdfc":"#\ud3c9\uade0\uad6c\ub9e4\uc0c1\ud488\uc885\ub958\ndf =tr.groupby(['custid','goodcd'])['tot_amt'].agg([('good_count', 'count')]).reset_index()\nf = df.groupby(['custid'])['good_count'].agg([('good_count_mean', 'mean')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","a8494d9a":"#\uc9c0\uc5ed\ndf = tr.groupby(['custid','str_nm'])['tot_amt'].agg([('tot_amt_str', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_str', index=df.custid, columns='str_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","3ea5e40d":"#\ud300\ubcc4\ndf = tr.groupby(['custid','team_nm'])['tot_amt'].agg([('tot_amt_team', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_team', index=df.custid, columns='team_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","31e5e0e3":"#\ucd1d\uad6c\ub9e4\uc218\uc785\uc0c1\ud488\ndf = tr.groupby(['custid'])['import_flg'].agg([('import_flg_sum', 'sum')]).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","e9d822a8":"#\uc6d4\ubcc4\ucd1d\uad6c\ub9e4\uc218\uc785\uc0c1\ud488\ndf = tr.groupby(['custid'])['import_flg'].agg([('inst_mon_sum', 'sum')]).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","5a5b8e10":"#\ud30c\ud2b8\ndf = tr.groupby(['custid','part_nm'])['tot_amt'].agg([('tot_amt_part', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_part', index=df.custid, columns='part_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","41c78c71":"#\ucf54\ub108\ndf = tr.groupby(['custid','corner_nm'])['tot_amt'].agg([('tot_amt_corner', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_corner', index=df.custid, columns='corner_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","eee06469":"#pc\ndf = tr.groupby(['custid','pc_nm'])['tot_amt'].agg([('tot_amt_pc', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_pc', index=df.custid, columns='pc_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","d1ffc3a8":"#\ube0c\ub79c\ub4dc\ndf = tr.groupby(['custid','brd_nm'])['tot_amt'].agg([('tot_amt_brd', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_brd', index=df.custid, columns='brd_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","661e20db":"#\uad6c\ub9e4\uc790\ndf = tr.groupby(['custid','buyer_nm'])['tot_amt'].agg([('tot_amt_buyer', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_buyer', index=df.custid, columns='buyer_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","3036e86b":"#\uad6c\ub9e4\uc2dc\uac04\nfrom datetime import timedelta as dt\ntest = tr.groupby(['custid'])['sales_date'].agg([('sales_date', 'max')]).reset_index()\ntest['days'] = (pd.to_datetime('2002-01-01') - pd.to_datetime(test.sales_date)).dt.days\ntest.drop(['sales_date'], axis=1, inplace=True)\nfeatures.append(test)\n#display(test.isnull().sum().sum())\n#display(test.shape)","72deb978":"#\uc77c\ud3c9\uade0\uad6c\ub9e4\uc561\ntest2 = tr.groupby(['sales_date','custid'])['tot_amt'].agg([('day_amt', 'sum')]).reset_index()\ntest2 = test2.groupby(['custid'])['day_amt'].agg([('\uc77c\ud3c9\uade0\uad6c\ub9e4\uc561', 'mean')]).reset_index()\nfeatures.append(test2)\n#display(test2.isnull().sum().sum())\n#display(test2.shape)","87a3e871":"#\uc77c\ud3c9\uade0\uad6c\ub9e4\uac74\ndf = tr.groupby(['sales_date','custid'])['custid'].agg([('day_visit', 'count')]).reset_index()\nf = df.groupby(['custid'])['day_visit'].agg([('\uc77c\ud3c9\uade0\uad6c\ub9e4\uac74', 'mean')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","3e2c58a7":"#\ucd1d\uad6c\ub9e4\uc561\nf = tr.groupby('custid')['tot_amt'].agg([('\ucd1d\uad6c\ub9e4\uc561', 'sum')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","26149400":"f = tr.groupby('custid')['tot_amt'].agg([('\uad6c\ub9e4\uac74\uc218', 'size')]).reset_index()\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","807f4cb8":"f = tr.groupby('custid')['tot_amt'].agg([('\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9', 'mean')]).reset_index()\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","41d3a5d1":"f = tr.groupby('custid')['inst_mon'].agg([('\ud3c9\uade0\ud560\ubd80\uac1c\uc6d4\uc218', 'mean')]).reset_index()\nf.iloc[:,1] = f.iloc[:,1].apply(round, args=(1,))\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","2fcc8254":"n = tr.corner_nm.nunique()\nf = tr.groupby('custid')['brd_nm'].agg([('\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131', lambda x: len(x.unique()) \/ n)]).reset_index()\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","83d5857c":"tr['sdate'] = tr.sales_date.str[:10]\nf = tr.groupby(by = 'custid')['sdate'].agg([('\ub0b4\uc810\uc77c\uc218','nunique')]).reset_index()\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","25674cc2":"x = tr[tr['import_flg'] == 1].groupby('custid').size() \/ tr.groupby('custid').size()\nf = x.reset_index().rename(columns={0: '\uc218\uc785\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'}).fillna(0)\nf.iloc[:,1] = (f.iloc[:,1]*100).apply(round, args=(1,))\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","25242dc6":"#def weekday(x):\n#    w = x.dayofweek \n#    if w < 4:\n#        return 1 # \uc8fc\uc911\n#    else:\n#        return 0 # \uc8fc\ub9d0\n#f = tr.groupby(by = 'custid')['sdate'].agg([('\uc694\uc77c\uad6c\ub9e4\ud328\ud134', lambda x : pd.to_datetime(x).apply(weekday).value_counts().index[0])]).reset_index()\n#features.append(f); f","d6ba8580":"def fw(x):\n    k = x.dayofweek\n    if k <= 4 :\n        return('\uc8fc\uc911_\ubc29\ubb38')\n    else :\n        return('\uc8fc\ub9d0_\ubc29\ubb38')    \n    \ndf = tr.copy()\ndf = df.drop_duplicates(['custid','sales_date'])\n\ndf['week'] = pd.to_datetime(df.sales_date).apply(fw)\ndf = pd.pivot_table(df, index='custid', columns='week', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\ndf['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'] = ((df.iloc[:,1] \/ (df.iloc[:,1]+df.iloc[:,2]))*100).apply(round, args=(1,))\nf = df.copy().iloc[:,[0,-1]]\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","8ff1c184":"def f1(x):\n    k = x.month\n    if 3 <= k <= 5 :\n        return('\ubd04-\uad6c\ub9e4\uac74\uc218')\n    elif 6 <= k <= 8 :\n        return('\uc5ec\ub984-\uad6c\ub9e4\uac74\uc218')\n    elif 9 <= k <= 11 :    \n        return('\uac00\uc744-\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('\uaca8\uc6b8-\uad6c\ub9e4\uac74\uc218')    \n    \ntr['season'] = pd.to_datetime(tr.sales_date).apply(f1)\nf = pd.pivot_table(tr, index='custid', columns='season', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","96178821":"def f2(x):\n    if 9 <= x <= 12 :\n        return('\uc544\uce68_\uad6c\ub9e4\uac74\uc218')\n    elif 13 <= x <= 17 :\n        return('\uc810\uc2ec_\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('\uc800\ub141_\uad6c\ub9e4\uac74\uc218')  # datatime \ud544\ub4dc\uac00 \uc2dc\uac04 \ud615\uc2dd\uc5d0 \ub9de\uc9c0 \uc54a\uc740 \uac12\uc744 \uac16\ub294 \uacbd\uc6b0 \uc800\ub141\uc2dc\uac04\uc73c\ub85c \ucc98\ub9ac\n\ntr['timeslot'] = tr.sales_date.str.split(' |:', expand=True).iloc[:,1].astype(int).apply(f2)\nf = pd.pivot_table(tr, index='custid', columns='timeslot', values='tot_amt', \n                   aggfunc=np.size).reset_index()\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","86e947a0":"f = tr.groupby('custid')['corner_nm'].agg([('\uc8fc\uad6c\ub9e4\ucf54\ub108', lambda x: x.value_counts().index[0])]).reset_index()\nf = pd.get_dummies(f, columns=['\uc8fc\uad6c\ub9e4\ucf54\ub108'])  # This method performs One-hot-encoding\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","c117eb90":"X_train = pd.DataFrame({'custid': tr_train.custid.unique()})\nfor f in features :\n    X_train = pd.merge(X_train, f, how='left',on='custid')\ndisplay(X_train.shape)\n\nX_test = pd.DataFrame({'custid': tr_test.custid.unique()})\nfor f in features :\n    X_test = pd.merge(X_test, f, how='left',on='custid')\ndisplay(X_test.shape)\n\n#y_train = pd.read_csv('..\/input\/y_train.csv').gender\n#X_train['gender'] = y_train\ndisplay(X_train.isnull().sum().sum())\ndisplay(X_test.isnull().sum().sum())","15f49e3b":"X_train['\ud3c9\uade0\ub0b4\uc810\uad6c\ub9e4\uc561'] = X_train['\ucd1d\uad6c\ub9e4\uc561']\/X_train['\ub0b4\uc810\uc77c\uc218']\nX_train['\uc8fc\uc911\ubc29\ubb38\ube44\uc728'] = (100 - X_train['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'])\nX_train['\uad6d\ub0b4\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'] = (100 - X_train['\uc218\uc785\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'])\nX_train['\ud560\ubd80\uad6c\ub9e4\uac00\uaca9'] = X_train['\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9'] \/ X_train['\ud3c9\uade0\ud560\ubd80\uac1c\uc6d4\uc218']\nX_train['\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131'] = X_train['\ucd1d\uad6c\ub9e4\uc561'] \/ X_train['\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131']\nX_train['\uc8fc\ub9d0\ubc29\ubb38\uc218'] = (X_train['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'] * X_train['\ub0b4\uc810\uc77c\uc218']) \/ 100\nX_train['\uc8fc\ub9d0\ubc29\ubb38\uc218'] = X_train['\uc8fc\ub9d0\ubc29\ubb38\uc218'].astype('int64')\nX_train['\uc8fc\uc911\ubc29\ubb38\uc218'] = X_train['\ub0b4\uc810\uc77c\uc218'] - X_train['\uc8fc\ub9d0\ubc29\ubb38\uc218']\nX_train['\uc8fc\uc911\ubc29\ubb38\uc218'] = X_train['\uc8fc\uc911\ubc29\ubb38\uc218'].astype('int64')\nX_train['\ub0b4\uc810\ub2f9\ud3b8\uade0\uad6c\ub9e4\uac74\uc218'] = X_train['\uad6c\ub9e4\uac74\uc218']\/X_train['\ub0b4\uc810\uc77c\uc218']\nX_train['\uc8fc\uc911\uad6c\ub9e4\uc561'] = X_train['\ucd1d\uad6c\ub9e4\uc561']*(X_train['\uc8fc\uc911\ubc29\ubb38\ube44\uc728']\/100)\nX_train['\uc8fc\ub9d0\uad6c\ub9e4\uc561'] = X_train['\ucd1d\uad6c\ub9e4\uc561'] - X_train['\uc8fc\uc911\uad6c\ub9e4\uc561']","cb9b8edb":"X_test['\ud3c9\uade0\ub0b4\uc810\uad6c\ub9e4\uc561'] = X_test['\ucd1d\uad6c\ub9e4\uc561']\/X_test['\ub0b4\uc810\uc77c\uc218']\nX_test['\uc8fc\uc911\ubc29\ubb38\ube44\uc728'] = (100 - X_test['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'])\nX_test['\uad6d\ub0b4\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'] = (100 - X_test['\uc218\uc785\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'])\nX_test['\ud560\ubd80\uad6c\ub9e4\uac00\uaca9'] = X_test['\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9'] \/ X_test['\ud3c9\uade0\ud560\ubd80\uac1c\uc6d4\uc218']\nX_test['\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131'] = X_test['\ucd1d\uad6c\ub9e4\uc561'] \/ X_test['\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131']\nX_test['\uc8fc\ub9d0\ubc29\ubb38\uc218'] = (X_test['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'] * X_test['\ub0b4\uc810\uc77c\uc218']) \/ 100\nX_test['\uc8fc\ub9d0\ubc29\ubb38\uc218'] = X_test['\uc8fc\ub9d0\ubc29\ubb38\uc218'].astype('int64')\nX_test['\uc8fc\uc911\ubc29\ubb38\uc218'] = X_test['\ub0b4\uc810\uc77c\uc218'] - X_test['\uc8fc\ub9d0\ubc29\ubb38\uc218']\nX_test['\uc8fc\uc911\ubc29\ubb38\uc218'] = X_test['\uc8fc\uc911\ubc29\ubb38\uc218'].astype('int64')\nX_test['\ub0b4\uc810\ub2f9\ud3b8\uade0\uad6c\ub9e4\uac74\uc218'] = X_test['\uad6c\ub9e4\uac74\uc218']\/X_test['\ub0b4\uc810\uc77c\uc218']\nX_test['\uc8fc\uc911\uad6c\ub9e4\uc561'] = X_test['\ucd1d\uad6c\ub9e4\uc561']*(X_test['\uc8fc\uc911\ubc29\ubb38\ube44\uc728']\/100)\nX_test['\uc8fc\ub9d0\uad6c\ub9e4\uc561'] = X_test['\ucd1d\uad6c\ub9e4\uc561'] - X_test['\uc8fc\uc911\uad6c\ub9e4\uc561']","bdca8144":"IDtest = X_test.custid;\nX_train.drop(['custid'], axis=1, inplace=True)\nX_test.drop(['custid'], axis=1, inplace=True)\ny_train = pd.read_csv('..\/input\/y_train.csv').gender","09fc309b":"X_train.clip(lower=0,inplace=True)","5b6d7e22":"X_train[X_train.\ucd1d\uad6c\ub9e4\uc561<0]","2b35ee90":"X_train.columns = np.arange(0,len(X_train.columns))\nX_test.columns = np.arange(0,len(X_train.columns))\nmax_features = X_train.shape[1]","2a7f0e1f":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve\nfrom sklearn.ensemble import GradientBoostingClassifier\nkfold = StratifiedKFold(n_splits=2)\nparameters = {'loss' : \"deviance\",\n              'max_depth': 8,\n              'min_samples_leaf': 100,\n              'max_features': 0.3 \n              } \nGBC = GradientBoostingClassifier(**parameters, random_state=123)\n#score = cross_val_score(GBC, X_train, y_train, cv=5, scoring='roc_auc')","7c85af16":"#print('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","584808ef":"pred_gbc = GBC.fit(X_train, y_train).predict_proba(X_test)[:,1]","93dbd5eb":"from xgboost import XGBClassifier\n#parameters = {'max_depth': 7, 'n_estimators': 200}\n#clf = RandomForestClassifier(**parameters, random_state=0)\n#kfold = StratifiedKFold(n_splits=10)\n#parameters = {'xgb__max_depth': 4, 'xgb__subsample': 0.7}\n#clf = XGBClassifier(random_state=77, n_jobs=-1)\n#clf = LogisticRegression()\n#param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000] }\n#clf = GridSearchCV(clf,param_grid = params, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n#clf.fit(X_train,y_train)\n#clf = clf.best_estimator_\n#LR.best_score_\n#kfold = StratifiedKFold(n_splits=10)\n#parameters = {'xgb__max_depth': 3, 'xgb__subsample': 0.7}\n#clf = XGBClassifier(random_state=0, n_jobs=-1)\n'''\nparams = {\n        'min_child_weight': [1, 5, 10],\n        'gamma': [0.5, 1, 1.5, 2, 5],\n        'subsample': [0.6, 0.8, 1.0],\n        'colsample_bytree': [0.6, 0.8, 1.0],\n        'max_depth': [3, 4, 5]\n        }\n#clf = LogisticRegression()\n#param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000] }\nclf = GridSearchCV(clf,param_grid = params, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\nclf.fit(X_train,y_train)\nclf = clf.best_estimator_\n'''\nparameters = {'xgb__max_depth': 4, 'xgb__subsample': 0.7,'gamma': 2}\nclf = XGBClassifier(**parameters, random_state=123, n_jobs=-1)\n'''\nclf = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\n'''\n#clf = LogisticRegression()\n#param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000] }\n#clf = GridSearchCV(clf,param_grid = param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\nclf.fit(X_train,y_train)\n#clf = clf.best_estimator_\n#LR.best_score_\n#score = cross_val_score(clf, X_train, y_train, cv=5, scoring='roc_auc')\n#print('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","f30a69ac":"from sklearn.ensemble import VotingClassifier\nvotingC = VotingClassifier(estimators=[('clf', clf), ('gbc', GBC)], voting='soft', n_jobs=-1)\n\nvotingC = votingC.fit(X_train, y_train)","765578d8":"#score = cross_val_score(votingC, X_train, y_train, cv=5, scoring='roc_auc')\n#print('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","9fcbc340":"pred = votingC.fit(X_train, y_train).predict_proba(X_test)[:,1]","4e4198b4":"df = tr.groupby(['custid'])['sales_time'].agg([('sales_time', 'mean')]).reset_index()","522314ca":"def f4(x):\n    if x <= 978 :\n        return('st_cat01')\n    elif 979 <= x <= 1464 :\n        return('st_cat02')\n    elif 1465 <= x <= 1564 :\n        return('st_cat03')\n    elif 1565 <= x <= 1658 :\n        return('st_cat04')\n    else :\n        return('st_cat05')  # datatime \ud544\ub4dc\uac00 \uc2dc\uac04 \ud615\uc2dd\uc5d0 \ub9de\uc9c0 \uc54a\uc740 \uac12\uc744 \uac16\ub294 \uacbd\uc6b0 \uc800\ub141\uc2dc\uac04\uc73c\ub85c \ucc98\ub9ac\ndf['sale_ct'] = df.sales_time.apply(f4)\ndf.drop(['sales_time'], axis=1, inplace=True)\ndf = pd.get_dummies(df, columns=['sale_ct'])","7f4575be":"train_1 = df.query('custid not in @IDtest').drop(columns=['custid'])\ntest_1 = df.query('custid in @IDtest').drop(columns=['custid'])","cf7b0590":"df = tr.groupby(['custid'])['dist_rate'].agg([('dist_amt', 'mean')]).reset_index()","1281da53":"def f3(x):\n    if x <= 0 :\n        return('cat01')\n    elif 1 <= x <= 1.83 :\n        return('cat02')\n    elif 1.84 <= x <= 2.83 :\n        return('cat03')\n    elif 2.84 <= x <= 3.92 :\n        return('cat04')\n    else :\n        return('cat05')  # datatime \ud544\ub4dc\uac00 \uc2dc\uac04 \ud615\uc2dd\uc5d0 \ub9de\uc9c0 \uc54a\uc740 \uac12\uc744 \uac16\ub294 \uacbd\uc6b0 \uc800\ub141\uc2dc\uac04\uc73c\ub85c \ucc98\ub9ac\ndf['dist'] = df.dist_amt.apply(f3)\ndf.drop(['dist_amt'], axis=1, inplace=True)\ndf = pd.get_dummies(df, columns=['dist'])","5ee44473":"train_2 = df.query('custid not in @IDtest').drop(columns=['custid'])\ntest_2 = df.query('custid in @IDtest').drop(columns=['custid'])","2731961d":"def f2(x):\n    k = x.hour\n    if 9 <= k <= 12 :\n        return('\uc544\uce68_\uad6c\ub9e4\uac74\uc218')\n    elif 13 <= k <= 17 :\n        return('\uc810\uc2ec_\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('\uc800\ub141_\uad6c\ub9e4\uac74\uc218')  # datatime \ud544\ub4dc\uac00 \uc2dc\uac04 \ud615\uc2dd\uc5d0 \ub9de\uc9c0 \uc54a\uc740 \uac12\uc744 \uac16\ub294 \uacbd\uc6b0 \uc800\ub141\uc2dc\uac04\uc73c\ub85c \ucc98\ub9ac\n\ntr['timeslot'] = tr.time.apply(f2)","4c0b8f12":"def f1(x):\n    k = x.month\n    if 3 <= k <= 5 :\n        return('\ubd04-\uad6c\ub9e4\uac74\uc218')\n    elif 6 <= k <= 8 :\n        return('\uc5ec\ub984-\uad6c\ub9e4\uac74\uc218')\n    elif 9 <= k <= 11 :    \n        return('\uac00\uc744-\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('\uaca8\uc6b8-\uad6c\ub9e4\uac74\uc218')    \n    \ntr['season'] = tr.time.apply(f1)","e5a0fc82":"def fw(x):\n    k = x.dayofweek\n    if k <= 4 :\n        return('\uc8fc\uc911_\ubc29\ubb38')\n    else :\n        return('\uc8fc\ub9d0_\ubc29\ubb38')    \n    \ntr['week'] = tr.time.apply(fw)","4f72ba6a":"tr['sales_hour'] = tr['sales_time']\/\/100;\ntr['sales_wkday'] = pd.to_datetime(tr.sales_date).dt.weekday\n\ndef makeBOW(col):\n    \n    f = lambda x: np.where(len(x) >=1, 1, 0)\n\n    train = pd.pivot_table(tr, index='custid', columns=col, values='tot_amt',\n                             aggfunc=f, fill_value=0).reset_index(). \\\n                             query('custid not in @IDtest').drop(columns=['custid'])\n    test = pd.pivot_table(tr, index='custid', columns=col, values='tot_amt',\n                             aggfunc=f, fill_value=0).reset_index(). \\\n                             query('custid in @IDtest').drop(columns=['custid'])\n    return train, test\ntrain1, test1 = makeBOW('brd_nm')\ntrain2, test2 = makeBOW('corner_nm')\ntrain3, test3 = makeBOW('sales_hour')\ntrain4, test4 = makeBOW('sales_wkday')\ntrain5, test5 = makeBOW('timeslot')\ntrain6, test6 = makeBOW('week')\ntrain7, test7 = makeBOW('season')\n#train6, test6 = makeBOW('dis_rate_ca')\nX_train = pd.concat([train1, train2, train3,train4,train5,train6,train7,train_1,train_2], axis=1).values\nX_test = pd.concat([test1, test2, test3,test4,test5,test6,test7,test_1,test_2], axis=1).values\nmax_features = X_train.shape[1]","4cd22440":"from keras import models\nfrom keras import layers\nfrom keras.optimizers import RMSprop\nfrom keras import regularizers\nfrom keras.callbacks import EarlyStopping\n\nmodel3 = models.Sequential()\nmodel3.add(layers.Dense(1, input_shape=(max_features,), kernel_regularizer=regularizers.l2(0.01)))\nmodel3.add(layers.Activation('sigmoid'))\n\nmodel3.summary()\n\nmodel3.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])\nhistory = model3.fit(X_train, y_train, epochs=100, batch_size=64, \n                    validation_split=0.2, callbacks=[EarlyStopping(patience=5)])","60c2fdc5":"pred_nn = model3.predict(X_test)[:,0]","6dd8ebb1":"ensembled_prediction = (0.5*pred)+(0.5*pred_nn)","b8a3bcac":"fname = 'submissions.csv'\nsubmissions = pd.concat([IDtest, pd.Series(ensembled_prediction, name=\"gender\")] ,axis=1)\nsubmissions.to_csv(fname, index=False)","0a09498b":"## End","900757cb":"**[\ud30c\uc0dd\ubcc0\uc218 9]** \uacc4\uc808\ubcc4 \uad6c\ub9e4\uac74\uc218: `Spring`(3~5)\/`Summer`(6~8)\/`Fall`(9-11)\/`Winter`(12~2)","7090daeb":"**[\ud30c\uc0dd\ubcc0\uc218 10]** \uc2dc\uac04\ub300\ubcc4 \uad6c\ub9e4\uac74\uc218: `Morning`(09~12)\/`Afternoon`\/(13~17)\/`Evening`(18-20)","47442646":"# MBA(Management & Business Analytics) Competition\n## starter code","42158219":"**[\ud30c\uc0dd\ubcc0\uc218 3]** \ud3c9\uade0 \uad6c\ub9e4\uac00\uaca9","41267edb":"<br><br>\n*\uc544\ub798 \ucf54\ub4dc\ub97c \uc218\ud589\ud558\uba74 \uc0dd\uc131\ud55c \ubaa8\ub4e0 \ud30c\uc0dd\ubcc0\uc218\uac00 \ubcd1\ud569\ub418\uace0 \ud559\uc2b5\uc6a9\uacfc \ud3c9\uac00\uc6a9\uc73c\ub85c \ub098\ub258\uc5b4\uc9c4\ub2e4.*","6940dae9":"**[\ud30c\uc0dd\ubcc0\uc218 11]** \uc8fc\uad6c\ub9e4 \ucf54\ub108: 26\uac1c \ucf54\ub108 \uc911 \uac00\uc7a5 \ub9ce\uc774 \uad6c\ub9e4\ud55c \uacf3","fccf4ad5":"## Step 1) Make features ## \n- \uc0c1\ud488\ud310\ub9e4 \ub370\uc774\ud130\ub85c\ubd80\ud130 \uc801\uc808\ud55c \ud30c\uc0dd\ubcc0\uc218(feature)\ub97c \ub9cc\ub4e0 \ud6c4 \ud559\uc2b5\uc6a9(`X_train`)\uacfc \ud3c9\uac00\uc6a9(`X_test`)\uc73c\ub85c \ub098\ub204\uc5b4 \uc800\uc7a5\ud55c\ub2e4.\n- scikit-learn\uc5d0\uc11c\ub294 categorical feature\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 One-hot-encoding\uc744 \ud1b5\ud574 numeric feature\ub85c \ubcc0\uacbd\ud574\uc57c \ud55c\ub2e4.","15a8e42c":"**[\ud30c\uc0dd\ubcc0\uc218 2]** \uad6c\ub9e4\uac74\uc218","8b7e5607":"\n## Step 2) Evaluate performance ##\n- Step 1)\uc5d0\uc11c \uc0dd\uc131\ud55c `X_train`\uacfc `X_test`\ub97c \uc774\uc6a9\ud558\uc5ec \uc544\ub798 \ucf54\ub4dc\ub97c \uc2e4\ud589\ud55c \ud6c4 \ubaa8\ud615\uc131\ub2a5\uc744 \ud655\uc778\ud55c\ub2e4.\n  - [5-fold cross validation](http:\/\/scikit-learn.org\/stable\/modules\/cross_validation.html)\uc744 \uc218\ud589\ud55c \ud6c4 \ubaa8\ud615\uc131\ub2a5\uc758 \ud3c9\uade0 \uac12\uacfc \ud45c\uc900\ud3b8\ucc28 \ub4f1\uc744 \ucd9c\ub825\ud55c\ub2e4.\n  - \ubaa8\ud615\uc131\ub2a5\uc740 [ROC-AUC](http:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_roc.html#sphx-glr-auto-examples-model-selection-plot-roc-py)\ub85c \uce21\uc815\ud558\uba70, \uac12\uc774 \ub192\uc744\uc218\ub85d \uc131\ub2a5\uc774 \uc88b\uc740 \ubaa8\ub378\uc774\ub2e4. (*0 <= ROC-AUC <=1*)\n- \uc2e4\ud589 \ud6c4 \uc0dd\uc131\ub418\ub294 `submissions.csv`\ub97c Kaggle\uc5d0 \uc81c\ucd9c\ud558\uc5ec \"public leaderboard\"\uc5d0\uc11c \ubcf8\uc778\uc758 Score(ROC-AUC)\uc640 \ub4f1\uc218\ub97c \ud655\uc778\ud55c\ub2e4. ","cc956d60":" **[\ud30c\uc0dd\ubcc0\uc218 4]** \ud3c9\uade0 \ud560\ubd80\uac1c\uc6d4\uc218","a32e3b35":"*\ud30c\uc0dd\ubcc0\uc218\ub97c \ub9cc\ub4e4\uae30 \uc704\ud55c \ud559\uc2b5\uc6a9\uacfc \uc81c\ucd9c\uc6a9 \uc0c1\ud488\ud310\ub9e4 \ub370\uc774\ud130\ub97c \uc77d\uace0 \ud558\ub098\ub85c \ud569\uce5c\ub2e4.*","3a01867b":"**[\ud30c\uc0dd\ubcc0\uc218 5]** \uad6c\ub9e4\uc0c1\ud488 \ub2e4\uc591\uc131: `\uad6c\ub9e4\ud55c \uc11c\ub85c\ub2e4\ub978 \ube0c\ub79c\ub4dc \uc218` \/ `1906`","8e610b8a":"**[\ud30c\uc0dd\ubcc0\uc218 6]** \ub0b4\uc810\uc77c\uc218","193e614c":"<font color='green'>\n### Categorical Features","6e5a4ac0":"<font color='green'>\n### Numeric Features","799a81a6":"*\ud30c\uc0dd\ubcc0\uc218\ub97c \uc800\uc7a5\ud560 \ube48 \ub9ac\uc2a4\ud2b8\ub97c \ub9cc\ub4e0\ub2e4.*","28473550":"**[\ud30c\uc0dd\ubcc0\uc218 7]** \uc218\uc785\uc0c1\ud488 \uad6c\ub9e4\ube44\uc728: `\uc218\uc785\uc0c1\ud488 \uad6c\ub9e4\uac74\uc218` \/ `\ucd1d \uad6c\ub9e4\uac74\uc218`","eef7bb0a":"![](http:\/\/) **[\ud30c\uc0dd\ubcc0\uc218 8]** \uc694\uc77c \uad6c\ub9e4\ud328\ud134 with `\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728`"}}