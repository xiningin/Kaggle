{"cell_type":{"893c825f":"code","74956133":"code","6fc2e286":"code","afa5d616":"code","7d510f3f":"code","7e279ae2":"code","ec360228":"code","6d43bf3e":"code","a7f3d188":"code","b19349a5":"code","a50d1a71":"code","1cccaffd":"code","a99d36e4":"code","65dafa61":"code","5f0c6f4c":"code","6f557de7":"code","2616174a":"code","1e17f250":"code","18b05f01":"code","766d029e":"code","d855dc66":"code","68761c11":"code","0c65db1e":"code","9a9412e1":"code","f56e5f7f":"code","23d7113b":"code","f54c7f17":"code","f2a9fb81":"code","f49ce343":"code","51655d56":"code","4dc9a47d":"code","3f62c0e9":"code","f32758b8":"markdown"},"source":{"893c825f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","74956133":"!pip install pyspark\n!pip install findspark","6fc2e286":"import findspark\nfindspark.init","afa5d616":"from pyspark.sql import SparkSession # required to created a dataframe\nspark=SparkSession.builder.appName(\"Basics\").getOrCreate() \n\nimport pyspark.sql.functions","7d510f3f":"df = spark.read.csv(\"\/kaggle\/input\/latest-covid19-india-statewise-data\/Latest Covid-19 India Status.csv\", \n                    inferSchema=True,\n                   header=True)","7e279ae2":"from pyspark.sql import functions as F","ec360228":"renamed_df = df.select([F.col(col).alias(col.replace(' ', '_'))for col in df.columns])","6d43bf3e":"renamed_df.show()","a7f3d188":"renamed_df = renamed_df.withColumnRenamed('Active_Ratio_(%)', 'Active_Ratio')\nrenamed_df = renamed_df.withColumnRenamed('Discharge_Ratio_(%)', 'Discharged_Ratio')\nrenamed_df = renamed_df.withColumnRenamed('Death_Ratio_(%)', 'Death_Ratio')\nrenamed_df = renamed_df.withColumnRenamed('State\/UTs', 'State_UTs')","b19349a5":"renamed_df.createOrReplaceTempView('Data')","a50d1a71":"spark.sql('Select * from Data').show()","1cccaffd":"spark.sql('select count(State_UTs) from Data').show()","a99d36e4":"spark.sql('select * from Data order by Active desc limit 5').show()","65dafa61":"spark.sql('select * from Data order by Death_Ratio desc limit 5').show()","5f0c6f4c":"spark.sql('select sum(Total_Cases), sum(Active) from Data').show()","6f557de7":"spark.sql('select * from Data order by Active asc limit 5').show()","2616174a":"import pandas as pd","1e17f250":"pd_df = renamed_df.toPandas()\npd_df.head()","18b05f01":"pd_df.describe()","766d029e":"pd_df.corr()","d855dc66":"# Make 4 histograms: 'Total_Cases', 'Active', 'Deaths', 'Discharge'\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=2, cols=2, subplot_titles=['Total_Cases', 'Active', 'Deaths', 'Discharged'])\n\ntotal_cases = go.Histogram(x=pd_df['Total_Cases'], nbinsx=20, name='Total Cases')\nactive = go.Histogram(x=pd_df['Active'], nbinsx=20, name='Active')\ndeaths = go.Histogram(x=pd_df['Deaths'], nbinsx=20, name='Deaths')\ndischarged = go.Histogram(x=pd_df['Discharged'], nbinsx=20, name='Discharged')\n\nfig.add_traces(total_cases, 1, 1)\nfig.add_traces(active, 1, 2)\nfig.add_traces(deaths, 2, 1)\nfig.add_traces(discharged, 2, 2)\n\nfig.update_layout(showlegend=False)\nfig.show()","68761c11":"fig = make_subplots(rows=2, cols=2, subplot_titles=['Total_Cases', 'Active', 'Deaths', 'Discharged'])\n\ntotal_cases = go.Box(x=pd_df['Total_Cases'],  name='Total Cases', text= pd_df['State_UTs'])\nactive = go.Box(x=pd_df['Active'],  name='Active', text= pd_df['State_UTs'])\ndeaths = go.Box(x=pd_df['Deaths'], name='Deaths', text= pd_df['State_UTs'])\ndischarged = go.Box(x=pd_df['Discharged'], name='Discharged', text= pd_df['State_UTs'])\n\nfig.add_traces(total_cases, 1, 1)\nfig.add_traces(active, 1, 2)\nfig.add_traces(deaths, 2, 1)\nfig.add_traces(discharged, 2, 2)\n\nfig.update_layout(showlegend=False)\nfig.show()","0c65db1e":"fig = make_subplots(rows=2, cols=2, subplot_titles=['Total_Cases', 'Active', 'Deaths', 'Discharged'])\n\ntotal_cases = go.Bar(y=pd_df['Total_Cases'],  name='Total Cases', hovertext= pd_df['State_UTs'])\nactive = go.Bar(y=pd_df['Active'],  name='Active', hovertext= pd_df['State_UTs'])\ndeaths = go.Bar(y=pd_df['Deaths'], name='Deaths', hovertext= pd_df['State_UTs'])\ndischarged = go.Bar(y=pd_df['Discharged'], name='Discharged', hovertext= pd_df['State_UTs'])\n\nfig.add_traces(total_cases, 1, 1)\nfig.add_traces(active, 1, 2)\nfig.add_traces(deaths, 2, 1)\nfig.add_traces(discharged, 2, 2)\n\nfig.update_layout(showlegend=False)\nfig.show()","9a9412e1":"fig = go.Figure([go.Bar(y=pd_df['Total_Cases'],  name='Total Cases', hovertext= pd_df['State_UTs'], x=pd_df['State_UTs']),\n                go.Bar(y=pd_df['Discharged'], name='Discharged', hovertext= pd_df['State_UTs'], x=pd_df['State_UTs'])])\n\nfig.update_layout(barmode='group')\nfig.update_layout(title='Total & Discharged Cases')\nfig.show()","f56e5f7f":"fig = make_subplots(rows=2, cols=2, \n                    subplot_titles=['Total_Cases', 'Active', 'Deaths', 'Discharged'],\n                    specs=[\n                            [{'type':'domain'}, {'type':'domain'}],\n                            [{'type':'domain'},{'type':'domain'}]\n                          ])\n\n\ntotal_cases = go.Pie(values=pd_df['Total_Cases'],  name='Total Cases', labels=pd_df['State_UTs'])\nactive = go.Pie(values=pd_df['Active'],  name='Active', labels=pd_df['State_UTs'])\ndeaths = go.Pie(values=pd_df['Deaths'], name='Deaths', labels=pd_df['State_UTs'])\ndischarged = go.Pie(values=pd_df['Discharged'], name='Discharged', labels=pd_df['State_UTs'])\n\nfig.add_traces(total_cases, 1, 1)\nfig.add_traces(active, 1, 2)\nfig.add_traces(deaths, 2, 1)\nfig.add_traces(discharged, 2, 2)\n\nfig.update_traces(hoverinfo='percent+label')\nfig.update_layout(showlegend=False)\n\nfig.update_traces(textposition='inside')\n\nfig = go.Figure(fig)\nfig.show()","23d7113b":"fig = go.Figure([go.Scatter(x=pd_df['Total_Cases'], y=pd_df['Deaths'], mode='markers')])\nfig.update_layout(title='Deaths vs Total Cases', xaxis_title='Total Cases', yaxis_title='Deaths')\nfig.show()","f54c7f17":"x = pd_df['Total_Cases'].to_numpy()\ny = pd_df['Deaths'].to_numpy()\n\nx.shape, y.shape","f2a9fb81":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(x.reshape((len(x), 1)), y)\n(model.intercept_, model.coef_[0])","f49ce343":"model.score(x.reshape((len(x), 1)), y)","51655d56":"0.904746**2","4dc9a47d":"predictions = model.predict(x.reshape((len(x), 1)))\npredictions.shape","3f62c0e9":"fig = go.Figure([go.Scatter(x=pd_df['Total_Cases'], mode='markers',y=pd_df['Deaths'], name='Actual Deaths'),\n                 go.Scatter(x=pd_df['Total_Cases'], y=predictions, name='Predicted Deaths')\n               ])\nfig.update_layout(title='Deaths vs Total Cases', xaxis_title='Total Cases', yaxis_title='Deaths')\nfig.show()","f32758b8":"# Thanks to Greg Hogg for this great [tutorial](https:\/\/www.youtube.com\/watch?v=v1cKMCSS3PY&ab_channel=GregHogg). "}}