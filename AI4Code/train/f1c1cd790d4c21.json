{"cell_type":{"e180a56a":"code","fbeb0c5a":"code","e2a522f9":"code","9581861f":"code","b5defc6a":"code","18d30acd":"code","7f1c965e":"code","40511f6b":"code","6b4acf92":"code","5f4627bc":"code","96248f98":"code","1c37e9a6":"code","03866d72":"code","488f501b":"code","9d643cd9":"code","574bf3fb":"code","c278fddf":"code","dd6e55fe":"code","67471ee6":"code","743e95d2":"code","26f3241c":"code","eea2d286":"code","88bccd48":"code","0793f995":"code","beee7bc5":"code","36456115":"code","4868ddd6":"code","0116a257":"code","39601e1f":"code","d104ad5b":"code","526f6afe":"code","817df57b":"code","7cae589c":"code","047948eb":"code","7ef16238":"code","0a596cfe":"code","7e1bb131":"code","b4e99071":"code","d8f9df85":"code","f12952ab":"code","1b8d71f3":"code","8bfb4bc1":"code","f1168966":"code","888ca591":"code","72c4e327":"markdown","89ceb9b7":"markdown","2472d712":"markdown","f5c418b3":"markdown","b9334ef6":"markdown","b3203550":"markdown","359d961c":"markdown","1c23ced4":"markdown","3ec418e8":"markdown","3dd3a938":"markdown","fc45c72d":"markdown","f4aed93c":"markdown","061c689d":"markdown","38774d43":"markdown","9ae9449c":"markdown","96984472":"markdown","58339405":"markdown","d48786ee":"markdown","070623e2":"markdown","9c68ea8a":"markdown","e7d791bd":"markdown"},"source":{"e180a56a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        break\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fbeb0c5a":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf \nimport keras \nfrom keras.layers import Conv2D\nfrom keras.models import Sequential\nfrom keras.layers import MaxPool2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.models import Model\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nimport cv2\nimport re\nimport random\nrandom.seed(0)\nnp.random.seed(0)","e2a522f9":"wheat = plt.imread(\"\/kaggle\/input\/agriculture-crop-images\/kag2\/wheat\/wheat0004a.jpeg\")\njute = plt.imread(\"\/kaggle\/input\/agriculture-crop-images\/kag2\/jute\/jute005a.jpeg\")\ncane = plt.imread(\"\/kaggle\/input\/agriculture-crop-images\/kag2\/sugarcane\/sugarcane0010arot.jpeg\")\nrice = plt.imread(\"\/kaggle\/input\/agriculture-crop-images\/kag2\/rice\/rice032ahs.jpeg\")\nmaize = plt.imread(\"\/kaggle\/input\/agriculture-crop-images\/kag2\/maize\/maize003a.jpeg\")\nplt.figure(figsize=(20,3))\nplt.subplot(1,5,1)\nplt.imshow(jute)\nplt.title(\"jute\")\nplt.subplot(1,5,2)\nplt.imshow(maize)\nplt.title(\"maize\")\nplt.subplot(1,5,3)\nplt.imshow(rice)\nplt.title(\"rice\")\nplt.subplot(1,5,4)\nplt.imshow(cane)\nplt.title(\"sugarcane\")\nplt.subplot(1,5,5)\nplt.imshow(wheat)\nplt.title(\"wheat\")","9581861f":"jutepath = \"..\/input\/agriculture-crop-images\/kag2\/jute\"\nmaizepath = \"..\/input\/agriculture-crop-images\/kag2\/maize\"\nricepath = \"..\/input\/agriculture-crop-images\/kag2\/rice\"\nsugarcanepath = \"..\/input\/agriculture-crop-images\/kag2\/sugarcane\"\nwheatpath = \"..\/input\/agriculture-crop-images\/kag2\/wheat\"\n\njutefilename = os.listdir(jutepath)\nmaizefilename = os.listdir(maizepath)\nricefilename = os.listdir(ricepath)\nsugarcanefilename = os.listdir(sugarcanepath)\nwheatfilename = os.listdir(wheatpath)\n\nX= []","b5defc6a":"for fname in jutefilename:\n    X.append([os.path.join(jutepath,fname),0])\nfor fname in maizefilename:\n    X.append([os.path.join(maizepath,fname),1])\nfor fname in ricefilename:\n    X.append([os.path.join(ricepath,fname),2])\nfor fname in sugarcanefilename:\n    X.append([os.path.join(sugarcanepath,fname),3]) \nfor fname in wheatfilename:\n    X.append([os.path.join(wheatpath,fname),4])  \nX = pd.DataFrame(X,columns = ['path','labels'])    ","18d30acd":"X.head()","7f1c965e":"\nohencoder = OneHotEncoder(handle_unknown='ignore',sparse=False)\nohlabel = pd.DataFrame(ohencoder.fit_transform(X[['labels']]),dtype = 'float64',columns = ['label0','label1','label2','label3','label4'])\nlabel_X = X.copy()\nX = pd.concat([X,ohlabel],axis = 1)\nnew_X = X.drop(['labels'],axis = 1)","40511f6b":"train,test = train_test_split(new_X,test_size=0.2,random_state=32,shuffle = True)","6b4acf92":"X_train = train['path'].values\ny_train = train.drop(['path'],axis=1).values\nX_test = test['path'].values\ny_test = test.drop(['path'],axis=1).values","5f4627bc":"def deep_pipeline(data):\n    flat = []\n    for i in data:\n        img = plt.imread(i)\n        img = img\/255.\n        flat.append(img)\n    flat =  np.array(flat)    \n    flat = flat.reshape(-1,224,224,3)       \n    return flat\n    ","96248f98":"dx_train = deep_pipeline(X_train)\ndx_test = deep_pipeline(X_test)","1c37e9a6":"keras.backend.clear_session()\nvgg = keras.applications.VGG19(input_shape=(224,224,3),include_top=False,weights = 'imagenet',pooling='avg')\nvgg.trainable = False\nvggmodel = keras.Sequential([vgg\n                         ,Dense(1000,activation='tanh'),Dense(1000,activation='tanh'),Dense(1000,activation='tanh'),Dense(5,activation='softmax')])\n\nvggmodel.compile(optimizer = 'adam',loss = 'categorical_crossentropy',metrics=['accuracy'])\nvggmodel.summary()","03866d72":"hist = vggmodel.fit(dx_train,y_train,epochs=50,validation_split=0.3,batch_size=16)","488f501b":"plt.figure(figsize=(10,7))\nplt.subplot(1,2,1)\nplt.plot(hist.history['accuracy'],label='accuracy')\nplt.plot(hist.history['loss'],label='loss')\nplt.legend()\nplt.title(\"training set\")\nplt.grid()\nplt.subplot(1,2,2)\nplt.plot(hist.history['val_accuracy'],label='val_accuracy')\nplt.plot(hist.history['val_loss'],label='val_loss')\nplt.legend()\nplt.title(\"validation set\")\nplt.grid()\nplt.ylim((0,4))","9d643cd9":"score = vggmodel.evaluate(dx_test,y_test)\nprint(\"accuracy: \", score[1])","574bf3fb":"pred = vggmodel.predict(dx_test)\nprediction = np.argmax(pred,axis=1)\ntrue = np.argmax(y_test,axis=1)\nbest_prob = [pred[num,:][i] for num,i in enumerate(prediction)]","c278fddf":"plt.figure(figsize = (9,8))\nclass_label = ['jute','maize','rice','sugarcane','wheat']\nfig = sns.heatmap(confusion_matrix(true,prediction),cmap= \"coolwarm\",annot=True,vmin=0,cbar = False,\n            center = True,xticklabels=class_label,yticklabels=class_label)\nfig.set_xlabel(\"Prediction\",fontsize=30)\nfig.xaxis.set_label_position('top')\nfig.set_ylabel(\"True\",fontsize=30)\nfig.xaxis.tick_top()","dd6e55fe":"def deepmodelpipeline(imagepath,model = vggmodel,label=[-1]):\n    pdict = {0:\"jute\",1:\"maize\",2:\"rice\",3:\"sugarcane\",4:\"wheat\"}\n    pred_x = deep_pipeline([imagepath])\n    prediction = model.predict(pred_x)\n    pred = np.argmax(prediction[0])\n    plt.imshow(plt.imread(imagepath))\n    if (label[0]!=-1):\n        plt.title(\"prediction : {0} % {1:.2f} \\ntrue        : {2}\".format(pdict[pred],prediction[0,pred]*100,pdict[np.argmax(label)]))\n    else:\n        plt.title(\"prediction : {0}, % {1:.2f}\".format(pdict[pred],prediction[0,pred]*100))","67471ee6":"deepmodelpipeline('\/kaggle\/input\/agriculture-crop-images\/kag2\/rice\/rice024ahs.jpeg')","743e95d2":"deepmodelpipeline('..\/input\/agriculture-crop-images\/kag2\/wheat\/wheat0004a.jpeg')","26f3241c":"deepmodelpipeline(\"..\/input\/agriculture-crop-images\/kag2\/maize\/maize008ahf.jpeg\")","eea2d286":"deepmodelpipeline(\"..\/input\/agriculture-crop-images\/kag2\/jute\/jute005a.jpeg\")","88bccd48":"plt.figure(figsize=(20,20))\nfor num,path in enumerate(X_test[0:20]):\n    plt.subplot(4,5,num+1)\n    deepmodelpipeline(path,vggmodel,y_test[num])","0793f995":"plt.figure(figsize=(20,20))\nfor num,path in enumerate(X_test[20:40]):\n    plt.subplot(4,5,num+1)\n    deepmodelpipeline(path,vggmodel,y_test[num+20])","beee7bc5":"plt.figure(figsize=(20,20))\nfor num,path in enumerate(X_test[40:60]):\n    plt.subplot(4,5,num+1)\n    deepmodelpipeline(path,vggmodel,y_test[num+40])","36456115":"plt.figure(figsize=(20,20))\nfor num,path in enumerate(X_test[100:120]):\n    plt.subplot(4,5,num+1)\n    deepmodelpipeline(path,vggmodel,y_test[num+100])","4868ddd6":"plt.figure(figsize=(20,20))\nfor num,path in enumerate(X_test[140:160]):\n    plt.subplot(4,5,num+1)\n    deepmodelpipeline(path,vggmodel,y_test[num+140])","0116a257":"vggmodel.save_weights(\"vggmodelweight.h5\")","39601e1f":"def resize_image(image_array):\n    return cv2.resize(image_array,(224,224))\ndef rescale_image(image_array):\n    return image_array*1.\/255\ndef read_image(image_path):\n    return plt.imread(image_path)\ndef plot_image(image_array):\n    try:\n        plt.imshow(image_array)\n    except:\n        plt.imshow(image_array[0])\ndef preprocess_image(image_path,reshape = True):\n    image = read_image(image_path)\n    image = resize_image(image)\n    image = rescale_image(image)\n    if(reshape ==  True):\n        image = image.reshape(-1,image.shape[0],image.shape[1],image.shape[2])    \n    return image\ndef preprocess_imageslist(image_list):\n    imagelist = np.array([preprocess_image(img,reshape=False) for img in image_list])\n    return imagelist\ndef predict_and_plot(image,model):\n    pred_dict = {0:\"jute\",1:\"maize\",2:\"rice\",3:\"sugarcane\",4:\"wheat\"}\n    plt.imshow(image[0])\n    prediction = model.predict(image) \n    pred = pred_dict[np.argmax(prediction)]\n    plt.title(pred)\n%matplotlib inline\ndef predict_and_plot5(imagelist,model):\n    pred_dict = {0:\"jute\",1:\"maize\",2:\"rice\",3:\"sugarcane\",4:\"wheat\"}\n    plt.figure(figsize=(20,10))\n    for num,image in enumerate(imagelist):\n        plt.subplot(1,5,num+1)\n        plt.imshow(image)\n        prediction = model.predict(image.reshape(-1,224,224,3)) \n        pred = pred_dict[np.argmax(prediction)]\n        plt.title(pred)\ndef predict_and_plot51(imagelist,model):\n    pred_dict = {0:\"jute\",1:\"maize\",2:\"rice\",3:\"sugarcane\",4:\"wheat\"}\n    plt.figure(figsize=(100,10))\n    for i in range(0,55,5):\n        predict_and_plot5(imagelist[i:i+5],vggmodel)\ndef predict_and_plot30(imagelist,model):\n    plt.figure(figsize=(40,10))\n    for i in range(0,len(imagelist),5):\n        predict_and_plot5(imagelist[i:i+5],vggmodel)","d104ad5b":"testdata = pd.read_csv('..\/input\/testssss\/testdata.csv')","526f6afe":"imagepath = testdata['testpath'].values\ntrue_label = testdata['croplabel'].values\ntestdata.head()","817df57b":"process_image = preprocess_imageslist(imagepath)","7cae589c":"predict_and_plot51(process_image,model=vggmodel)","047948eb":"test_prediction = np.argmax(vggmodel.predict(process_image),axis=1)","7ef16238":"accuracy_score(true_label,test_prediction)","0a596cfe":"plt.figure(figsize = (9,8))\nclass_label = ['jute','maize','rice','sugarcane','wheat']\nfig = sns.heatmap(confusion_matrix(true_label,test_prediction),cmap= \"coolwarm\",annot=True,vmin=0,cbar = False,\n            center = True,xticklabels=class_label,yticklabels=class_label)\nfig.set_xlabel(\"Prediction\",fontsize=30)\nfig.xaxis.set_label_position('top')\nfig.set_ylabel(\"True\",fontsize=30)\nfig.xaxis.tick_top()","7e1bb131":"classify = true_label==test_prediction\nwrong_classify = [num for num,p in enumerate(classify) if p==False]\ncorrect_classify = [num for num,p in enumerate(classify) if p==True]","b4e99071":"correct_class_image = process_image[correct_classify]\nwrong_class_image = process_image[wrong_classify]","d8f9df85":"predict_and_plot30(wrong_class_image,vggmodel)","f12952ab":"predict_and_plot30(correct_class_image,vggmodel)","1b8d71f3":"labels = test_prediction.reshape(-1,1)\nimagepath = imagepath.reshape(-1,1)\ndf = pd.DataFrame(np.append(imagepath,labels,axis=1),columns=['pathname','label'])\ndf.head()","8bfb4bc1":"df.to_csv('submission.csv')","f1168966":"get_image_path = \"..\/input\/testssss\/test_crop_image\/jute-field.jpg\"","888ca591":"image1 = preprocess_image(get_image_path)\npredict_and_plot(image1,model = vggmodel)","72c4e327":"# <font color = \"red\"> If you like this kernel. Then appreciate me with an upvote<\/font>","89ceb9b7":"# Test set accuracy","2472d712":"# EVALUATING MODEL ON TESTSSSS DATASET IMAGES","f5c418b3":"# Converting to training and testing data","b9334ef6":"# Prediction on test images","b3203550":"# Creating dataframe to submit testssss data prediction","359d961c":"# Plotting some images","1c23ced4":"# Saving Model","3ec418e8":"# Loading modules","3dd3a938":"# Enter your path of your image You want to predict\n","fc45c72d":"# Confusion matrix","f4aed93c":"# <font color = \"red\"> If you like this kernel. Then appreciate me with an upvote<\/font>","061c689d":"# Pipelining","38774d43":"# Wrong classified Images","9ae9449c":"# Model training","96984472":"# Prediction on sample images","58339405":"## Loading necessary preprocessing functions","d48786ee":"**first upload image through add data**","070623e2":"# Correct Classified Images","9c68ea8a":"# <font color = \"red\"> If you like this kernel. Then appreciate me with an upvote<\/font>","e7d791bd":"# PRETRAINED VGG MODEL IS USED IN THIS KERNEL GOT ACCURACY OVER 90% - 95%"}}