{"cell_type":{"2e3d1d47":"code","0204fc40":"code","2a78e7ee":"code","58b0fa98":"code","6cdc0b93":"code","45fbb84d":"code","409ba7ce":"code","220ec3b8":"code","337ff046":"code","749efc97":"code","a14b22ed":"code","ff67a06c":"code","77714c97":"markdown","a8975fc7":"markdown","7b070afb":"markdown","7ba5413d":"markdown","35a372ee":"markdown","4ffe20f7":"markdown","80d22c89":"markdown"},"source":{"2e3d1d47":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import style\n\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0204fc40":"df = pd.read_csv('\/kaggle\/input\/onion-prices-india-2015\/daily_retail_price_Onion-upto_apr_2015.csv')","2a78e7ee":"df['Date'] = pd.to_datetime(df.Date)","58b0fa98":"df.head()","6cdc0b93":"print(df['Centre_Name'].unique())","45fbb84d":"df_mum = df.loc[df.Centre_Name == 'MUMBAI']","409ba7ce":"# Lets check if there are missing values. The data is from Government Of India so I hope data is fine.\ndf_mum.isnull().sum()","220ec3b8":"style.use('seaborn')\nfig = plt.figure(figsize=(20, 10))\nplt.scatter(x= df.loc[df.Centre_Name=='DELHI'].Date, y = df.loc[df.Centre_Name=='DELHI'].Price)\nplt.gcf().autofmt_xdate()\nplt.show()","337ff046":"style.use('fivethirtyeight')\nfig = plt.figure(figsize=(20, 10))\nplt.scatter(x= df.loc[df.Centre_Name=='MUMBAI'].Date, y = df.loc[df.Centre_Name=='MUMBAI'].Price)\nplt.gcf().autofmt_xdate()\nplt.show()","749efc97":"df_2012 = df.loc[df.Date.dt.year > 2011]\ndf_Mumbai = df_2012[df_2012.Centre_Name == 'MUMBAI']","a14b22ed":"df_Delhi = df_2012[df_2012.Centre_Name == 'DELHI']","ff67a06c":"style.use('seaborn-bright')\nfig = plt.figure(figsize=(20, 10))\nplt.plot_date(x= df_Mumbai.Date, y = df_Mumbai.Price, label = 'Mumbai')\nplt.plot_date(x = df_Delhi.Date, y = df_Delhi.Price, label = 'Delhi')\nplt.gcf().autofmt_xdate()\nplt.legend(loc='upper left')\nplt.show()","77714c97":"I am interested in checking Mumbai's prices.","a8975fc7":"pd.to_datetime(df.Date) helps to work with dates and times.","7b070afb":"I was really curious about onion prices in India. I will use this as an oppurtunity to learn some basic EDA.","7ba5413d":"Lets see what all cities do we have.","35a372ee":"It looks like Delhi had higher prices as compared to Mumbai. Let's zoom in after 2012\n","4ffe20f7":"Lets check the data after 2012.","80d22c89":"Another way to do the same thing."}}