{"cell_type":{"5afeaf95":"code","b984b95e":"code","c927a870":"code","3998b291":"code","868f4c39":"code","c15074be":"code","14d55f8d":"code","5d1ae65f":"code","4946a2e2":"code","7f09f871":"code","563f67b9":"code","d9f45dd0":"code","78b8c366":"code","586050f9":"code","9e10be4b":"code","a9d77d5c":"code","0c5b395e":"code","12cad773":"code","0c4e5b72":"code","02b43dce":"code","21be11cc":"code","0eba7191":"code","85112bfe":"code","5b747ada":"code","1d772ea5":"code","66337f41":"code","ae9a9bed":"code","6d343d53":"code","fce78f3a":"code","c376599c":"code","3ac65788":"code","454ef85a":"code","5943a503":"code","3d71a373":"code","90db18c3":"code","9ccdf662":"code","c77733a7":"code","f6b43070":"code","3582b73a":"code","517c8d45":"code","5862922b":"code","5c22ca2f":"code","d2b61f78":"code","c02b655e":"code","09dd9523":"code","8128af8b":"code","31c8b71b":"code","630883c8":"code","72ae5d72":"code","3f96e5a5":"code","ad0370d6":"code","4fe33fa0":"markdown","d2c964be":"markdown","aea5981f":"markdown","5b087100":"markdown","9b3c67c9":"markdown","29228925":"markdown","fb5eda8a":"markdown","3fed66f1":"markdown","59f0438c":"markdown","b20443fa":"markdown","a7bb9b5d":"markdown","c402c1fb":"markdown","4178fc9d":"markdown","a99e31a9":"markdown","33f7e815":"markdown","cdf7d53c":"markdown","f09ea784":"markdown","a7769e1b":"markdown","bb99e651":"markdown","3778ea22":"markdown"},"source":{"5afeaf95":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b984b95e":"from plotly import __version__\nimport cufflinks as cf\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\ncf.go_offline()","c927a870":"df = pd.read_csv('..\/input\/data-police-shootings\/fatal-police-shootings-data.csv')","3998b291":"df.head()","868f4c39":"df.info()","c15074be":"#find out null values\ndf.isnull()","14d55f8d":"#heatmap creation will tell exactly what coulmns are missing values the most.\nsns.heatmap(df.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')","5d1ae65f":"df['armed'].unique()","4946a2e2":"df.drop('armed', inplace=True, axis=1)","7f09f871":"sns.heatmap(df.isnull())","563f67b9":"df['flee'].unique()","d9f45dd0":"df[df['flee'].isnull()].count()","78b8c366":"df['flee'].fillna('Other', inplace=True)","586050f9":"df['flee'].unique()","9e10be4b":"sns.heatmap(df.isnull())","a9d77d5c":"df[df['age'].isnull()].count()","0c5b395e":"df['age'].groupby(df['race']).mean()","12cad773":"def impude_age (cols):\n    age = cols[0]\n    race = cols[1]\n    if pd.isnull(age):\n        if race == 'A':\n            return 37\n        elif race == 'B':\n            return 32\n        elif race == 'H':\n            return 34\n        elif race == 'N':\n            return 31\n        elif race == 'O':\n            return 33\n        else:\n            return 40\n    else:\n        return age\n        ","0c4e5b72":"df['age']=df[['age','race']].apply(impude_age, axis=1)","02b43dce":"sns.heatmap(df.isnull())","21be11cc":"df['race'].fillna('Unknown', inplace=True)","0eba7191":"sns.heatmap(df.isnull())","85112bfe":"df.dropna(inplace=True)","5b747ada":"sns.heatmap(df.isnull())","1d772ea5":"df","66337f41":"df['age'].iplot(kind='histogram', color='red', opacity = 0.6, histfunc = 'sum', bins = 100)","ae9a9bed":"ty = sns.countplot(x='race', data = df, hue= 'gender', palette = 'Set2', alpha = 0.6)\nfig=plt.gcf()\nfig.set_size_inches(13,5)\nsns.despine(left=True)\nty.set_title('Cases based on race and Gender')\nty.set_ylabel('Number of Cases')","6d343d53":"new = pd.get_dummies(df['manner_of_death'])\ndf = pd.concat([df, new], axis = 1)","fce78f3a":"df","c376599c":"state_wise = df['manner_of_death'].groupby(df['state']).count().sort_values(ascending = False)[0:10]","3ac65788":"state_wise = pd.DataFrame(state_wise)\nds = state_wise.reset_index()","454ef85a":"by_states = sns.barplot(x='state', y='manner_of_death', data = ds, palette = 'magma')\nfig=plt.gcf()\nfig.set_size_inches(13,10)\nsns.despine(left=True)\nby_states.set_title('Cases based on States')\nby_states.set_ylabel('Number of Cases')","5943a503":"city_wise = df['manner_of_death'].groupby(df['city']).count().sort_values(ascending = False)[0:10]","3d71a373":"cw = city_wise.reset_index()","90db18c3":"by_city = sns.barplot(x='city', y='manner_of_death', data = cw, palette = 'coolwarm_r')\nfig=plt.gcf()\nfig.set_size_inches(13,10)\nsns.despine(left=True)\nby_city.set_title('Cases based on States')\nby_city.set_ylabel('Number of Cases')\n","9ccdf662":"age_25 = df[(df['age']<25) & (df['shot'] == 1)]\nage_25 = age_25.groupby('state').count()['shot'].sort_values(ascending=False)[0:10].reset_index()","c77733a7":"age_35 = df[(df['age']>25) & (df['shot'] == 1) & (df['age']< 35)]\nage_35 = age_35.groupby('state').count()['shot'].sort_values(ascending=False)[0:10].reset_index()\n","f6b43070":"age_45 = df[(df['age']>35) & (df['shot'] == 1) & (df['age']< 45)]\nage_45 = age_45.groupby('state').count()['shot'].sort_values(ascending=False)[0:10].reset_index()\n","3582b73a":"age_55 = df[(df['age']>45) & (df['shot'] == 1) & (df['age']< 55)]\nage_55 = age_55.groupby('state').count()['shot'].sort_values(ascending=False)[0:10].reset_index()\n","517c8d45":"age_65 = df[(df['age']>55) & (df['shot'] == 1) & (df['age']< 65)]\nage_65 = age_65.groupby('state').count()['shot'].sort_values(ascending=False)[0:10].reset_index()\n","5862922b":"age_75 = df[(df['age']>65) & (df['shot'] == 1) & (df['age']< 75)]\nage_75 = age_75.groupby('state').count()['shot'].sort_values(ascending=False)[0:10].reset_index()\n","5c22ca2f":"age_85 = df[(df['age']>75) & (df['shot'] == 1) & (df['age']< 85)]\nage_85 = age_85.groupby('state').count()['shot'].sort_values(ascending=False)[0:10].reset_index()\n","d2b61f78":"age_95 = df[(df['age']>85) & (df['shot'] == 1) & (df['age']< 95)]\nage_95 = age_95.groupby('state').count()['shot'].sort_values(ascending=False)[0:10].reset_index()\n","c02b655e":"sns.scatterplot(x='state', y='shot', data=age_25, s = 80, label= 'Below 25')\nsns.scatterplot(x='state', y='shot', data=age_35 , s = 80,label= '25-35' )\nsns.scatterplot(x='state', y='shot', data=age_45, s = 80,label= '35-45')\nsns.scatterplot(x='state', y='shot', data=age_55,s = 80,label= '45-55')\nsns.scatterplot(x='state', y='shot', data=age_65, s = 80,label= '55-65')\nsns.scatterplot(x='state', y='shot', data=age_75 ,s = 80,label= '65-75')\nsns.scatterplot(x='state', y='shot', data=age_85, s = 80,label= '75-85')\nty = sns.scatterplot(x='state', y='shot', data=age_95, s = 80, label= '85-95')\nfig=plt.gcf()\nfig.set_size_inches(13,5)\nsns.despine(left=True)\nty.set_title('Number of people Shot in top States by Age group')\nty.set_ylabel('Number of Shoots')\nty.set_xlabel('States')","09dd9523":"age_25 = df[(df['age']<25) & (df['shot'] == 0)]\nage_25 = age_25.groupby('state').count()['shot'].sort_values(ascending=False)[0:10].reset_index()\n\nage_35 = df[(df['age']>25) & (df['shot'] == 0) & (df['age']< 35)]\nage_35 = age_65.groupby('state').count()['shot'].sort_values(ascending=False)[0:10].reset_index()\n\nage_45 = df[(df['age']>35) & (df['shot'] == 0) & (df['age']< 45)]\nage_45 = age_65.groupby('state').count()['shot'].sort_values(ascending=False)[0:10].reset_index()\n\nage_55 = df[(df['age']>45) & (df['shot'] == 0) & (df['age']< 55)]\nage_55 = age_65.groupby('state').count()['shot'].sort_values(ascending=False)[0:10].reset_index()\n\nage_65 = df[(df['age']>55) & (df['shot'] == 0) & (df['age']< 65)]\nage_65 = age_65.groupby('state').count()['shot'].sort_values(ascending=False)[0:10].reset_index()\n\nage_75 = df[(df['age']>65) & (df['shot'] == 0) & (df['age']< 75)]\nage_75 = age_65.groupby('state').count()['shot'].sort_values(ascending=False)[0:10].reset_index()\n\nage_85 = df[(df['age']>75) & (df['shot'] == 0) & (df['age']< 85)]\nage_85 = age_65.groupby('state').count()['shot'].sort_values(ascending=False)[0:10].reset_index()\n\nage_95 = df[(df['age']>85) & (df['shot'] == 0) & (df['age']< 95)]\nage_95 = age_65.groupby('state').count()['shot'].sort_values(ascending=False)[0:10].reset_index()\n","8128af8b":"sns.scatterplot(x='state', y='shot', data=age_25, s = 80, label= 'Below 25')\nsns.scatterplot(x='state', y='shot', data=age_35 , s = 80,label= '25-35' )\nsns.scatterplot(x='state', y='shot', data=age_45, s = 80,label= '35-45')\nsns.scatterplot(x='state', y='shot', data=age_55,s = 80,label= '45-55')\nsns.scatterplot(x='state', y='shot', data=age_65, s = 80,label= '55-65')\nsns.scatterplot(x='state', y='shot', data=age_75 ,s = 80,label= '65-75')\nsns.scatterplot(x='state', y='shot', data=age_85, s = 80,label= '75-85')\nty = sns.scatterplot(x='state', y='shot', data=age_95, s = 80, label= '85-95')\nfig=plt.gcf()\nfig.set_size_inches(13,5)\nsns.despine(left=True)\nty.set_title('Number of people Shot and Tasered in top States by Age group')\nty.set_ylabel('Number of Shoots')\nty.set_xlabel('States')","31c8b71b":"female_crimes = df[df['gender']=='F']\nf_c = female_crimes['gender'].groupby(df['race']).count().sort_values(ascending=False)\nf_c = pd.DataFrame(f_c)\nf_c = f_c.reset_index()\nty= sns.barplot(x= 'race', y= 'gender', data=f_c, alpha=0.5)\nfig=plt.gcf()\nfig.set_size_inches(13,5)\nsns.despine(left=True)\nty.set_title('Female Crime according to Race')\nty.set_ylabel('Number of Cases')\n","630883c8":"female_crimes = df['gender'] == 'F'\nf_c_1 = df[female_crimes]['gender'].groupby(df['state']).count().sort_values(ascending=False)[0:10]\nf_c_1 = pd.DataFrame(f_c_1)\nf_c_1 = f_c_1.reset_index()\nty_1 = sns.barplot(x= 'state', y= 'gender', data=f_c_1, alpha=0.5, palette= 'coolwarm_r')\n\nfig=plt.gcf()\nfig.set_size_inches(13,5)\nsns.despine(left=True)\nty_1.set_title('Female Crime according to States')\nty_1.set_ylabel('Number of Cases')\n","72ae5d72":"female_crimes_2 = df['gender'] == 'F'\nf_c_2 = df[female_crimes]['gender'].groupby(df['city']).count().sort_values(ascending=False)[0:10]\nf_c_2 = pd.DataFrame(f_c_2)\nf_c_2 = f_c_2.reset_index()\nty_2 = sns.barplot(x= 'city', y= 'gender', data=f_c_2, alpha=0.5, palette= 'magma_r')\n\nfig=plt.gcf()\nfig.set_size_inches(13,5)\nsns.despine(left=True)\nty_2.set_title('Female Crime according to Cities')\nty_2.set_ylabel('Number of Cases')\n","3f96e5a5":"illness_by_race = df[df['signs_of_mental_illness'] == True].groupby(df['race']).count()['signs_of_mental_illness'].sort_values(ascending=False)\nillness_by_race = pd.DataFrame(illness_by_race)\nillness_by_race = illness_by_race.reset_index()\nty_2 = sns.barplot(x= 'race', y= 'signs_of_mental_illness', data=illness_by_race, alpha=0.8, palette= 'Spectral')\n\nfig=plt.gcf()\nfig.set_size_inches(13,5)\nsns.despine(left=True)\nty_2.set_title('Mental Illness Shooting cases by Race (Total Reported = 1215)')\nty_2.set_ylabel('Number of Cases')\nty_2.set_xlabel('Race')\n","ad0370d6":"df[df['signs_of_mental_illness'] == True].count()","4fe33fa0":"# > Visuals! Data Analysis******","d2c964be":"# IMPORTING RELEVANT LIBRARIES","aea5981f":"# 4. Bar plot for top 10 Cities known for Shooting","5b087100":"# 8. Top States for Female Crime","9b3c67c9":"# 4. race","29228925":"# 9. Top Cities with Female Crimes","fb5eda8a":"# READING AND CLEANING THE DATA****","3fed66f1":"# Just incase perform one dropna to remove missing rows if any left ","59f0438c":"# armed, age, race, flee. these four column requires most of the attention","b20443fa":"# 6. Top States by Age group and Shooting for Shot and Tasered","a7bb9b5d":"# 3. age","c402c1fb":"# 1. armed","4178fc9d":"Adding new column for manner_of_death to make it numeric for further analysis. ****","a99e31a9":"# 2. Cases by Race and Gender","33f7e815":"# 3. Bar plot for top 10 States known for Shooting","cdf7d53c":"# 5. Top 10 States by Age Group for Shooting","f09ea784":"# 2. Flee","a7769e1b":"# 10. Illness by Race Shooting Cases","bb99e651":"# 1. ****Cases By Age ","3778ea22":"# 7. Female crimes by race"}}