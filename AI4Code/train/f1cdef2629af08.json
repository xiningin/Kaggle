{"cell_type":{"abf15806":"code","c290b0c8":"code","19f62efc":"code","1b5fd486":"code","c5ad9fdb":"code","6e8003ee":"code","11cef281":"code","717852ea":"code","7217d00e":"code","637893dd":"code","2baef227":"code","4f4997dc":"code","6d7fcc18":"code","22a93f47":"code","2fc1330e":"code","fdedca00":"code","b2527951":"code","45b8aa5f":"code","7f97a858":"code","c56b08eb":"code","1338ac18":"code","0f1a020b":"code","f0e50dc3":"code","c6283ac4":"code","247d453f":"code","5ef49e1b":"code","4255bf13":"code","edba60c2":"code","649dedb4":"code","5441da46":"code","58fd10c1":"code","7508af51":"code","b28c145a":"code","e212344d":"code","e8765e8f":"code","3432f3f3":"code","c64416be":"code","a3c8f881":"code","81b03bcc":"markdown","5b2b63d6":"markdown","be8c5fda":"markdown","058482a6":"markdown","1359cd97":"markdown","3a84522a":"markdown","79e2bee5":"markdown","ab331b02":"markdown","eb8ddea9":"markdown","d31c6291":"markdown","c84ca152":"markdown","84f67bb3":"markdown","08fcbbaa":"markdown","609904ce":"markdown","a8d4684c":"markdown","896c7f41":"markdown","388c1956":"markdown","8c6ac723":"markdown","e4de0a9e":"markdown","ab9ca0eb":"markdown","7daa4b74":"markdown","5ad02506":"markdown","856c72b6":"markdown","13587a30":"markdown","186a4641":"markdown","52562b9b":"markdown","9bcdbe6f":"markdown","b748c16f":"markdown","6f5ea96c":"markdown","599fb596":"markdown","9f59798a":"markdown","93fe8960":"markdown","cf3c1cc7":"markdown","595fa28a":"markdown","df483d7b":"markdown","f178ec01":"markdown","c1529ccf":"markdown","fa772de6":"markdown","b72521bf":"markdown","2cb029a2":"markdown","7c752d87":"markdown","a42c1b2d":"markdown","dfa7eb05":"markdown","8fe25f60":"markdown","e32122ef":"markdown","1f8a8415":"markdown","fa3b684e":"markdown","3310002d":"markdown","2faa4a36":"markdown","592e8213":"markdown","6c613412":"markdown","8ffac898":"markdown","da03c8bf":"markdown","cd55f2fb":"markdown","bafe48f6":"markdown","e69cb3e1":"markdown","691ea264":"markdown","6c318d26":"markdown"},"source":{"abf15806":"#Author: OUADGHIRI HASSANI Mohammed Youssef\n#Dataset: Airbnb Beijing\n\n#Data manipulation\nimport pandas as pd\nimport numpy as np\n\n#plotting\nimport matplotlib as mpl\nimport matplotlib.font_manager as mfm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#maps\nimport folium\nfrom folium.plugins import FastMarkerCluster as fmc\nimport geopandas as gpd\nfrom branca.colormap import LinearColormap\n\n#statistics\nimport scipy.stats as stats\n\n#text mining\nimport nltk\nimport string\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud, ImageColorGenerator\nimport jieba \n\n#Image mining\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\n\n\nimport warnings\n\nwarnings.simplefilter(\"ignore\")","c290b0c8":"sns.set(palette = 'Pastel1',style='darkgrid') #sns will revert to original style if there are more than 9 colors needed\n\n#For displaying Chinese characters in plots\nfp='..\/input\/stheitifont\/STHeiti.ttf'\nfont = mfm.FontProperties(fname=fp)","19f62efc":"df=pd.read_csv(\"..\/input\/beijing-airbnb-dataclean\/Beijing Airbnb Data(clean)\/listings.csv\")\ndf_detail=pd.read_csv(\"..\/input\/beijing-airbnb-dataclean\/Beijing Airbnb Data(clean)\/listings_detail.csv\")","1b5fd486":"df.head(5)","c5ad9fdb":"#Inspecting the amount of data\nlen(df)","6e8003ee":"df_detail=df_detail[['id','cancellation_policy','review_scores_rating','instant_bookable','accommodates', 'picture_url']]\ndf=df.join(df_detail.set_index('id'),how='left', on = 'id',lsuffix=\"_1\",rsuffix='_2')\ndf[['price','number_of_reviews']].describe()","11cef281":"df.isnull().sum()","717852ea":"#Cleaning\ndf.fillna({'reviews_per_month':0}, inplace=True)\ndf.fillna({'review_scores_rating':0}, inplace=True) #We fill the ratings with 0 for now, we apply modifications before the rating analysis\ndf.fillna({'bedrooms':0}, inplace=True)\ndf.fillna({'beds':0}, inplace=True)\ndf.fillna({'accommodates':1}, inplace=True)\n\n\ndf.drop(columns='neighbourhood_group',inplace=True)#neighborhood_group for irrelevance\ndf.drop(columns='calculated_host_listings_count',inplace=True)#calculated_host_listings_count for redundancy\ndf.drop(columns='host_name',inplace=True)#for privacy and unimportance, we use host_id instead\ndf.drop(columns='last_review',inplace=True) #the attribute with null values is 'last_review', we will just drop it\n\n\ndf=df.loc[df['availability_365']!=0] # non available places\ndf=df.loc[df['price']!=0] #places with no price set","7217d00e":"f=plt.figure(figsize=(15,5))\nax1=f.add_subplot(1,1,1)\nsns.distplot(df['price'],hist=False,kde_kws=dict(linewidth=3))\na= ax1.set_title('Distribution of prices')","637893dd":"#dynamic Beijing map\ndf_map= folium.Map(location=(40,116.4850))\n\n#houses per neighborhood\nclusters = list(zip(df['latitude'].tolist(), df['longitude'].tolist()))\nfmc(data=clusters).add_to(df_map)\n\n#Neighbourhood names on the map will be written in chinese as it's a chinese city\ndf_map","2baef227":"#We group our df by the host_id feature\ndf_host=df.groupby(df['host_id']).count().reset_index()\ndf_host.sort_values(by=('name'),ascending=False,inplace=True)\ndf_host=df_host.head(10)\n\nplt.subplots(figsize=(20,8))\ng=sns.barplot(x=df_host['host_id'],y=df_host['name'])\ng.set(xlabel='host id', ylabel='Number of listings')\n\na=g.set_title('hosts with most listings')","4f4997dc":"f=sns.countplot(df['room_type'])\nf.set(xlabel='room type', ylabel='Number of listings')\na=f.set_title('Numbers of every type of accomodation')","6d7fcc18":"df['neighbourhood'].unique()","22a93f47":"#replace characters with pinyin \/\/ or opposite\ndf['neighbourhood']=df['neighbourhood'].str.replace('\u4e1c\u57ce\u533a','\u4e1c\u57ce\u533a \/ Dongcheng')\ndf['neighbourhood']=df['neighbourhood'].str.replace('\u897f\u57ce\u533a','\u897f\u57ce\u533a \/ Xicheng')\ndf['neighbourhood']=df['neighbourhood'].str.replace('\u660c\u5e73\u533a','\u660c\u5e73\u533a \/ Changping')\ndf['neighbourhood']=df['neighbourhood'].str.replace('\u623f\u5c71\u533a','\u623f\u5c71\u533a \/ Fangshan')\ndf['neighbourhood']=df['neighbourhood'].str.replace('\u6d77\u6dc0\u533a','\u6d77\u6dc0\u533a \/ Haidian')\ndf['neighbourhood']=df['neighbourhood'].str.replace('\u77f3\u666f\u5c71\u533a','\u77f3\u666f\u5c71\u533a \/ shijingshan')","2fc1330e":"f, ax=plt.subplots(figsize=(14,16))\nimg=plt.imread('..\/input\/mapimage\/Bei1.png') #uploaded image, screenshot taken from map\nax.imshow(img, zorder=0, extent=( 115, 118,39, 41))\nax=plt.gca()\ng=sns.scatterplot(y=df['latitude'],x=df['longitude'], hue=df['neighbourhood'])\na=g.set(xlabel='', ylabel='', yticklabels='',xticklabels='', title='Distribution of listings in different neighbourhoods')\na=plt.legend(prop=font)","fdedca00":"df_nbh = df[df['price'] < df['price'].quantile(0.85)] #taking the 85% quantile of data\n\nplt.subplots(figsize=(20,5))\ng=sns.distplot(df_nbh['price'],hist=False,kde_kws=dict(linewidth=3))\na=g.set_title('Prices distribution')\nprint(\"Skewness: %f\" % df_nbh['price'].skew())\nprint(\"Kurtosis: %f\" % df_nbh['price'].kurt())","b2527951":"#neighbourhood information\ndf_nbh1=df_nbh.groupby(df_nbh['neighbourhood'])\ndf_nbh1['price'].describe()","45b8aa5f":"f=plt.figure(figsize=(20,18))\nax1=f.add_subplot(2,1,1)\nax1=sns.violinplot(x=df_nbh['neighbourhood'],y=df_nbh['price'])\nax1.set(xlabel=' ', ylabel='Price')\nax1.set_title('Violin plot of the distibution of price by neighbourhood')\nax1.set_xticklabels(ax1.get_xticklabels(), rotation=45,fontproperties=font)\n\nax2=f.add_subplot(2,1,2)\nax2=sns.boxplot(x=df_nbh['neighbourhood'],y=df_nbh['price'])\nax2.set_title('Box plot of the distibution of price by neighbourhood')\nax2.set_xticklabels(ax2.get_xticklabels(), rotation=45,fontproperties=font)\na=ax2.set(xlabel='neighbourhood', ylabel='Price')","7f97a858":"#We only take the extreme examples to show difference\ndf_nbh1=df_nbh.loc[(df_nbh['neighbourhood']=='\u671d\u9633\u533a \/ Chaoyang')|(df_nbh['neighbourhood']=='\u6000\u67d4\u533a \/ Huairou')|(df_nbh['neighbourhood']=='\u5ef6\u5e86\u53bf \/ Yanqing')\n            |(df_nbh['neighbourhood']=='\u5927\u5174\u533a \/ Daxing')|(df_nbh['neighbourhood']=='\u901a\u5dde\u533a \/ Tongzhou')]\nf=plt.figure(figsize=(20,18))\nax1=f.add_subplot(2,1,1)\nax1=sns.boxplot(x=df_nbh1['neighbourhood'],y=df_nbh['price'],hue=df_nbh['room_type'])\na=ax1.set_title('The room type price ditribution in the 3 type of neighbourhoods')\na=plt.xticks(fontproperties=font)\n","c56b08eb":"df_nbh1 = df_nbh.groupby('neighbourhood')['price'].mean().sort_values(ascending=True)\nneighb = gpd.read_file(\"..\/input\/beijing-airbnb-dataclean\/Beijing Airbnb Data(clean)\/neighbourhoods.geojson\")\ndf_nbh1 = pd.DataFrame([df_nbh1])\ndf_nbh1 = df_nbh1.transpose()\n\n#as we did before, we have to correct the names of neighbourhoods for the newly added geojson file data\nneighb['neighbourhood']=neighb['neighbourhood'].str.replace('\u4e1c\u57ce\u533a','\u4e1c\u57ce\u533a \/ Dongcheng')\nneighb['neighbourhood']=neighb['neighbourhood'].str.replace('\u897f\u57ce\u533a','\u897f\u57ce\u533a \/ Xicheng')\nneighb['neighbourhood']=neighb['neighbourhood'].str.replace('\u660c\u5e73\u533a','\u660c\u5e73\u533a \/ Changping')\nneighb['neighbourhood']=neighb['neighbourhood'].str.replace('\u623f\u5c71\u533a','\u623f\u5c71\u533a \/ Fangshan')\nneighb['neighbourhood']=neighb['neighbourhood'].str.replace('\u6d77\u6dc0\u533a','\u6d77\u6dc0\u533a \/ Haidian')\nneighb['neighbourhood']=neighb['neighbourhood'].str.replace('\u77f3\u666f\u5c71\u533a','\u77f3\u666f\u5c71\u533a \/ shijingshan')\n\nneighbo = pd.merge(neighb, df_nbh1, on='neighbourhood', how='left')\nneighbo.rename(columns={'price': 'average price'}, inplace=True)\nmap_dict = neighbo.set_index('neighbourhood')['average price'].to_dict()\ncolor_scale = LinearColormap(['white','red'], vmin = min(map_dict.values()), vmax = max(map_dict.values()))\n\ndef get_color(feature):\n    value = map_dict.get(feature['properties']['neighbourhood'])\n    return color_scale(value)\n\ndf_nbhmap= folium.Map(location=(40,116.4850),zoom_start=9,zoom_control=False)\nfolium.GeoJson(data=neighbo,name='Beijing',tooltip=folium.features.GeoJsonTooltip(fields=['neighbourhood', 'average price'],labels=True,sticky=False),\n               style_function= lambda feature: {\n                  'fillColor': get_color(feature),'color': 'black','fillOpacity':0.6},\n               highlight_function=lambda feature: {'weight':3, 'fillColor': get_color(feature), 'fillOpacity': 0.8}\n              ).add_to(df_nbhmap)\ndf_nbhmap\n","1338ac18":"df_nbh['number_of_reviews'].describe()","0f1a020b":"plt.figure(figsize=(16,8))\nf=sns.scatterplot(y=df_nbh['reviews_per_month'],x=df_nbh['number_of_reviews'])\na=f.set_title('review per month relation with number of reviews')\n","f0e50dc3":"df_nbh=df_nbh.drop(columns='reviews_per_month')","c6283ac4":"df_nbh2 = df_nbh.groupby('neighbourhood')['number_of_reviews'].mean().sort_values(ascending=True).T\nneighbo = pd.merge(neighb, df_nbh2, on='neighbourhood', how='left')\nneighbo.rename(columns={'number_of_reviews': 'Customers'}, inplace=True)\nmap_dict = neighbo.set_index('neighbourhood')['Customers'].to_dict()\ncolor_scale = LinearColormap(['white','blue'], vmin = min(map_dict.values()), vmax = max(map_dict.values()))\n\n\ndf_nbh2map= folium.Map(location=(40,116.4850),zoom_control=False)\nfolium.GeoJson(data=neighbo,\n               name='Beijing',\n               tooltip=folium.features.GeoJsonTooltip(fields=['neighbourhood', 'Customers'],labels=True,sticky=False),\n               style_function= lambda feature: {'fillColor': get_color(feature),'color': 'black','fillOpacity':0.5},\n               highlight_function=lambda feature: {'weight':3, 'fillColor': get_color(feature), 'fillOpacity': 0.8}).add_to(df_nbh2map)\n\n\ndf_nbh2map","247d453f":"#We filled non rated listing with 0, so we take them off to not influence the analysis\ndf_rev=df.loc[df['number_of_reviews']>=1]\ndf_rev['review_scores_rating']=((df_rev['review_scores_rating']\/10)+0.5).astype(int) #format used in the app\ndf_rev=df_rev.drop(columns='reviews_per_month')\ndf_rev[\"review_scores_rating\"].describe()","5ef49e1b":"plt.subplots(figsize=(20,8))\nf=sns.countplot(df_rev[\"review_scores_rating\"])\na=f.set(xlabel='Review score', ylabel='Number of listings',title='Review scores')\n","4255bf13":"#price - review, we use the df_nbh(p<=2000) instead of df for visibility\ndf_price=df_rev.loc[df['price']<=2000]\n\n\nf=plt.figure(figsize=(16,8))\nax1=f.add_subplot(1,2,1)\nsns.scatterplot(y=df_price['price'],x=df_price['number_of_reviews'])\nax1.set_title('Scatter plot of price by number of reviews')\n\n\nax2=f.add_subplot(1,2,2)\nsns.boxplot(y=df_price['price'],x=df_price['review_scores_rating'])\na=ax2.set_title('Box plot of price by rating')","edba60c2":"f=plt.figure(figsize=(16,8))\nax1=f.add_subplot(1,2,1)\nax1=sns.violinplot(x=df_nbh['room_type'],y=df_nbh['price'])\nax1.set(xlabel='room type', ylabel='Price')\nax1.set_title('Violinplot price by room type')\n\n\nax2=f.add_subplot(1,2,2)\nax2=sns.boxplot(x=df_nbh['room_type'],y=df_nbh['price'])\nax2.set(xlabel='room type', ylabel='Price')\na=ax2.set_title('Boxplot price by room type')","649dedb4":"f=plt.figure(figsize=(16,8))\ndf_nbh11=df_nbh.loc[df_nbh['number_of_reviews']<100]\n\n\nax1=f.add_subplot(1,2,1)\nax1=sns.violinplot(x=df_nbh11['room_type'],y=df_nbh11['number_of_reviews'])\nax1.set(xlabel='room type', ylabel='Number of reviews')\nax1.set_title('Violinplot reviews by room type')\n\n\nax2=f.add_subplot(1,2,2)\nax2=sns.boxplot(x=df_nbh11['room_type'],y=df_nbh11['number_of_reviews'])\nax2.set(xlabel='room type', ylabel='number of reviews')\na=ax2.set_title('Boxplot reviews by room type')","5441da46":"f=plt.figure(figsize=(16,5))\nax1=sns.countplot(df_rev['room_type'], hue= df_rev['review_scores_rating'])\nax1.set(xlabel='room type', ylabel='Number of reviews')\na=ax1.set_title('Rating scores by room type')","58fd10c1":"f,ax1=plt.subplots(figsize=(13,16))\nax1.imshow(img, zorder=0, extent=( 115, 118,39, 41))\nax1=sns.scatterplot(x=df_rev['longitude'],y=df_rev['latitude'], hue=df_rev['room_type'])\na=ax1.set(xlabel='', ylabel='', yticklabels='',xticklabels='', title='Distribution of listings by room type')","7508af51":"f=plt.figure(figsize=(16,8))\n\nax1=f.add_subplot(1,2,1)\nax1=sns.violinplot(x=df_nbh['cancellation_policy'],y=df_nbh['price'],hue=df_nbh['instant_bookable'],split=True)\nax1.set(xlabel='room type', ylabel='Price')\nax1.set_title('Cancellation policy, instant bookable with price')\n\n\nax2=f.add_subplot(1,2,2)\nax2=sns.violinplot(x=df_rev['cancellation_policy'],y=df_rev['number_of_reviews'],hue=df_rev['instant_bookable'],split=True)\nax2.set(xlabel='room type', ylabel='Number of reviews')\na=ax2.set_title('Cancellation policy, instant bookable with reviews ')","b28c145a":"df_text=df_nbh.reset_index(drop=True)\ndf_text['name'].head()","e212344d":"# Cutting Chinese sentences to words using the Jieba library\nfor i in range (0,len(df_text)):\n    seg_list = jieba.cut(df_text['name'][i])\n    df_text['name'][i] = \" \".join(seg_list)\n    \n    \n    \n#extending the stopwords list according to our data\nmore=[' ',\"'s\",\"''\",\"``\",'--','\u2018\u2019','~','\uff0c','\u3002','\uff5e','\u201c','\u201d','1','2','3'] \nstop= set(stopwords.words('english')+list(string.punctuation)+more) \n\n\n# Normalizing the text, and tokenizing the words\nwords=list()\nfor i in range(0,len(df_text)):\n    for w in word_tokenize(df_text['name'][i]):\n        if w.lower() not in stop:\n            words.append(w.lower())\n            ","e8765e8f":"# Plotting the most used words\nx=pd.DataFrame(pd.Series(nltk.FreqDist(words)))\nx.reset_index(inplace=True)\nx.sort_values(by=(0),ascending=False, inplace= True)\n\n\nf,ax=plt.subplots(figsize=(20,8))\nf=sns.barplot(x['index'][:20],x[0][:20],palette='tab20')\nax.set(title='Barplot of the most used words',xlabel='Words')\na=plt.xticks(fontproperties=font)","3432f3f3":"mask = np.array(Image.open(\"..\/input\/logoimage\/airbnb.png\"))\n\nwordcloud = WordCloud(background_color = 'white',width=2000, height=900, max_words = 500, font_path=fp,mask=mask).generate(' '.join(df_text['name']))\nf,ax=plt.subplots(figsize = (200, 120) ) \n\nimage_colors = ImageColorGenerator(mask)\n\n# plt.imshow(wordcloud) \nplt.imshow(wordcloud.recolor(color_func=image_colors))\na=plt.axis('off')\n\nwordcloud.to_file(\"airbnb.png\")\n","c64416be":"#We look at the most successful listings\nsuccess=df.loc[df['number_of_reviews']>80] \n\nimg=[]\ncounter=0\nfor i in range (len(success)):\n    try:\n        response = requests.get(success['picture_url'][i])\n        img.append( Image.open(BytesIO(response.content)))\n    except :\n        counter+=1\n\n#counting the number of unsuccessful requests\nprint(\"From %d there are %d valid and %d faulty images\" %(len(success),len(img),counter))","a3c8f881":"#showing some examples of successful requests\nsns.set(style='white') \n\nfig=plt.figure(figsize=(20, 16))\n\nfor i in range(1, 10):    \n    fig.add_subplot(3,3,i)\n    plt.imshow(img[i])\n    a=plt.title(i)\n    a=plt.axis('off')\n","81b03bcc":"There are 10 times more Private rooms than Shared rooms and 20 times more Entire homes.\nPeople would rather offer the whole house and it's believed that customers also prefer entire homes in first place and private rooms secondly.","5b2b63d6":"Naturally we can notice the density is higher in the city center.","be8c5fda":"<br><br>\nAfter understanding the data we are working with, we can clearly see that in order to perform any ML or DL task, we will need much more cleaning and pre-processing, according to what kind of information we want to extract. <br>","058482a6":"##### Some hosts have more than a listing, let's take a look to the people with most listings","1359cd97":"# Introduction","3a84522a":"##### Notice that some neighbourhoods are written differently than others, we will need to standardize the names in the format \"characters\/pinyin\"","79e2bee5":"# Text mining","ab331b02":"Dark grid for visibility and font change to display Chinese characters","eb8ddea9":"#### Most used words","d31c6291":"#### Another interactive map as we did before for price and transpose it on number of reviews to see where the guests are more frequent","c84ca152":"##### Checking the missing values.","84f67bb3":"##### Cleaning and treating the missing values. We want to keep the most important attributes, maybe drop the less important or where the majority of entrances are missing.\n##### We also want to do some transformation to get rid of redundant data.","08fcbbaa":"The instant bookable instances are slightly more expensive than the others. <br>\nThe cancellation policy does not really change the prices or customers.","609904ce":"The price distribution does not follow a standard distribution as the the data has to go through transformation.","a8d4684c":"##### Using Folium library which is a leaflet based library, we transpose our geographic data into an interactive map to further see the the houses clusters.","896c7f41":"The distribution of the prices is logical, all kind of cheap accomodations can be found, but on average the prices are not the same.","388c1956":"##### Chaoyang is the city center with the highest density and it represents the average in Beijing\n##### Huairou and Yanqing are touristic expensive neighbourhoods\n##### Tongzhou and Daxing are cheap neighbourhoods","8c6ac723":"Most ratings are 8 or above, we can conclude that either the ratings are biased, only satisfied customers rate the houses, or the hosts are generally doing a very good job with the houses.","e4de0a9e":"#### How do people appreciate the listings?","ab9ca0eb":"This kernel is a part of bigger project including:<br>\n* <b>Airbnb Beijing data exploration and analysis <\/b>\n* Price prediction, to build a new listing assistant\n* NLP sentiment analysis to analize the best words to use for a higher success rate\n","7daa4b74":"Nothing concrete","5ad02506":"In this kernel, we analize the listings data, we are trying to extract the most information available. <br>Pre-processing for Machine learning is not included.","856c72b6":"We can easily see that there is no obvious correlation or relation between the features, although we can notice that there are more expensive listings having high rating scores.","13587a30":" Obvious correlation = data redundancy","186a4641":"We notice many repeated images, an image analysis to delete repetitive listings (with different names and data) might be useful.","52562b9b":"![airbnb.png](https:\/\/i.postimg.cc\/9fwYrdzG\/amir.png)","9bcdbe6f":"# Reviews(number\/rating) attribute analysis\n#### Number of reviews is an important attribute as it can be considered as a succefullness index because the number of reviews is proportional to the number of guests \n","b748c16f":"There are a bunch of hosts with 50 listings, there is one host with 100 listings and one with over 250 listings which can be curious for legal investigations or duplicate checking.\nThere are some real estate agencies using Airbnb as a platform, explaining a high amount of listings owned by the same host.","6f5ea96c":"______________________________________________________","599fb596":"# Advanced features: Cancellation policy, Instant bookable, min_nights ","9f59798a":"Not really","93fe8960":"#### Is there a relationship between reviews and prices?","cf3c1cc7":"#### For the rating analysis, we first take off the non rated listings","595fa28a":"Naturally, the number of reviews are slightly different, ranked following the number of each room type.","df483d7b":"\n##### Adding some aesthetics to the plate.\n##### This interactive map represents different neighbourhoods' prices, the darkest the color is, the more expensive the average price is.\n##### The map also has an interactive function showing the name and the average price by simply hovering the mouse on the neighbourhood\n##### This Folium map uses geojson data to get different neighbourhoods and branca.colormap for the comprehensive colors","f178ec01":"# Room type analysis","c1529ccf":"### Adding some feature into the analysis : room type","fa772de6":"#### Is reviews per month important?","b72521bf":"#### Does the room type influence the rating score?","2cb029a2":"#### Room type\/Price relation","7c752d87":"# Neighbourhood attribute analysis","a42c1b2d":"Private and shared rooms in some neighbourhoods are more expensive than entire home in other neighbourhoods","dfa7eb05":"##### For better visualizations we model the previous numbers in a violin and box plots ","8fe25f60":"#### The relation between cancellation policy, instant bookable with price and reviews","e32122ef":"This Wordcloud is built in the end of this kernel.","1f8a8415":"##### Taking a look at the geographic distribution of the listings in a map, to better understand the neighbourhoods map.\nThe use of a static map instead of a Floium mao here is for simpler and faster execution.","fa3b684e":"##### Checking the neighbourhoods","3310002d":"We take some features from the detailed dataset. <br>\nPrice and number of reviews are the most important features, the number of reviews is logically correlated with the number of customers or guests, it can be used as a success metric for listings.","2faa4a36":"# Images analysis","592e8213":"#### Let's now see the geographic distribution of diiferent room types","6c613412":"#### A beautiful Wordcloud","8ffac898":"Most links are broken or do not work, less than 10% images are accessible.","da03c8bf":"# Getting familiar with the data\n\n","cd55f2fb":"We get a DataFrame of more than 25k rows.","bafe48f6":"##### Room types","e69cb3e1":"##### For a more precise Price\/Neighbourhood analysis, price outliers will be taken out  ","691ea264":"#### Room type\/Price relation","6c318d26":"As expected, people would rather take a house in the city center, the further we get from the city center, the less customers"}}