{"cell_type":{"1b7f754f":"code","41d23509":"code","16b04e93":"code","5b0c99e0":"code","48c73dbe":"code","b3fdd1ec":"code","6e20f85b":"code","b6ccef12":"code","52e7cc58":"code","1f5f3415":"code","8eb8d18e":"code","9d0751f9":"code","9ea107c8":"code","49de8c3b":"code","04173eca":"code","65711721":"code","066b3b6c":"code","d89f940d":"code","4309de61":"code","2ca8759e":"code","44f85d11":"code","ce05e792":"code","41f56920":"code","0e80f1d5":"code","a4efcd84":"code","a4d0660f":"code","43c97eb2":"code","36f5a475":"code","50fd6680":"code","7b10a6d9":"code","49e77ba7":"code","1be7b7bc":"code","1fcec86f":"code","a12570c0":"markdown","88ec12ad":"markdown","1ffdd761":"markdown","06190435":"markdown","6ff33fe3":"markdown","5a940a60":"markdown","b9cb2aef":"markdown","9f2f1bdb":"markdown","9bc1070a":"markdown","56eefaa4":"markdown","813ae7b2":"markdown","d2bd4745":"markdown","d3196b80":"markdown","0ea4c2b3":"markdown","d5fb9b56":"markdown","a0230b83":"markdown","b1117a43":"markdown","f8a33f8f":"markdown"},"source":{"1b7f754f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","41d23509":"import string\nimport re\nfrom numpy import array, argmax, random, take\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Embedding, RepeatVector\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import load_model\nfrom keras import optimizers\nimport matplotlib.pyplot as plt\n%matplotlib inline\npd.set_option('display.max_colwidth', 200)","16b04e93":"# function to read raw text file\ndef read_text(filename):\n        # open the file\n        file = open(filename, mode='rt', encoding='utf-8')\n        \n        # read all text\n        text = file.read()\n        file.close()\n        return text","5b0c99e0":"# split a text into sentences\ndef to_lines(text):\n    sents = text.strip().split('\\n')\n    sents = [i.split('\\t') for i in sents]\n    return sents","48c73dbe":"data = read_text(\"..\/input\/bilingual-sentence-pairs\/por.txt\")\npor_eng = to_lines(data)\npor_eng = array(por_eng)","b3fdd1ec":"data1 = read_text(\"..\/input\/bilingual-sentence-pairs\/spa.txt\")\nspa_eng = to_lines(data1)\nspa_eng = array(spa_eng)","6e20f85b":"por_eng = por_eng[:50000,:]","b6ccef12":"spa_eng = spa_eng[:50000,:]","52e7cc58":"# Remove punctuation\npor_eng[:,0] = [s.translate(str.maketrans('', '', string.punctuation)) for s in por_eng[:,0]]\npor_eng[:,1] = [s.translate(str.maketrans('', '', string.punctuation)) for s in por_eng[:,1]]\n\npor_eng","1f5f3415":"# Remove punctuation\nspa_eng[:,0] = [s.translate(str.maketrans('', '', string.punctuation)) for s in spa_eng[:,0]]\nspa_eng[:,1] = [s.translate(str.maketrans('', '', string.punctuation)) for s in spa_eng[:,1]]\n\nspa_eng","8eb8d18e":"# convert text to lowercase\nfor i in range(len(por_eng)):\n    por_eng[i,0] = por_eng[i,0].lower()\n    por_eng[i,1] = por_eng[i,1].lower()","9d0751f9":"# convert text to lowercase\nfor i in range(len(spa_eng)):\n    spa_eng[i,0] = spa_eng[i,0].lower()\n    spa_eng[i,1] = spa_eng[i,1].lower()","9ea107c8":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","49de8c3b":"# empty lists\neng_l = []\npor_l = []\n\n# populate the lists with sentence lengths\nfor i in por_eng[:,0]:\n      eng_l.append(len(i.split()))\n\nfor i in por_eng[:,1]:\n      por_l.append(len(i.split()))\n\nlength_df = pd.DataFrame({'eng':eng_l, 'por':por_l})\n\nlength_df.hist(bins = 30)\nplt.show();","04173eca":"# empty lists\neng_l = []\nspa_l = []\n\n# populate the lists with sentence lengths\nfor i in spa_eng[:,0]:\n      eng_l.append(len(i.split()))\n\nfor i in spa_eng[:,1]:\n      spa_l.append(len(i.split()))\n\nlength_df = pd.DataFrame({'eng':eng_l, 'spa':spa_l})\n\nlength_df.hist(bins = 30, color='r')\nplt.show();","65711721":"# function to build a tokenizer\ndef tokenization(lines):\n    tokenizer = Tokenizer()\n    tokenizer.fit_on_texts(lines)\n    return tokenizer","066b3b6c":"# prepare english tokenizer\neng_tokenizer = tokenization(por_eng[:, 0])\neng_vocab_size = len(eng_tokenizer.word_index) + 1\n\neng_length = 8\nprint('English Vocabulary Size: %d' % eng_vocab_size)","d89f940d":"# prepare Portughese tokenizer\npor_tokenizer = tokenization(por_eng[:, 1])\npor_vocab_size = len(por_tokenizer.word_index) + 1\n\npor_length = 8\nprint('Portughese Vocabulary Size: %d' % por_vocab_size)","4309de61":"# prepare Spanish tokenizer\nspa_tokenizer = tokenization(spa_eng[:, 1])\nspa_vocab_size = len(spa_tokenizer.word_index) + 1\n\npor_length = 8\nprint('Spanish Vocabulary Size: %d' % spa_vocab_size)","2ca8759e":"# encode and pad sequences\ndef encode_sequences(tokenizer, length, lines):\n    seq = tokenizer.texts_to_sequences(lines)\n    # pad sequences with 0 values\n    seq = pad_sequences(seq, maxlen=length, padding='post')\n    return seq","44f85d11":"from sklearn.model_selection import train_test_split\n\n# split data into train and test set\ntrain, test = train_test_split(por_eng, test_size=0.2, random_state = 12)","ce05e792":"# prepare training data\ntrainX = encode_sequences(por_tokenizer, por_length, train[:, 1])\ntrainY = encode_sequences(eng_tokenizer, eng_length, train[:, 0])\n\n# prepare validation data\ntestX = encode_sequences(por_tokenizer, por_length, test[:, 1])\ntestY = encode_sequences(eng_tokenizer, eng_length, test[:, 0])","41f56920":"# build NMT model\ndef define_model(in_vocab,out_vocab, in_timesteps,out_timesteps,units):\n    model = Sequential()\n    model.add(Embedding(in_vocab, units, input_length=in_timesteps, mask_zero=True))\n    model.add(LSTM(units))\n    model.add(RepeatVector(out_timesteps))\n    model.add(LSTM(units, return_sequences=True))\n    model.add(Dense(out_vocab, activation='softmax'))\n    return model","0e80f1d5":"# model compilation\nmodel = define_model(por_vocab_size, eng_vocab_size, por_length, eng_length, 512)","a4efcd84":"rms = optimizers.RMSprop(lr=0.001)\nmodel.compile(optimizer=rms, loss='sparse_categorical_crossentropy')","a4d0660f":"filename = 'model.h1.24_jan_19'\ncheckpoint = ModelCheckpoint(filename, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\n\n# train model\nhistory = model.fit(trainX, trainY.reshape(trainY.shape[0], trainY.shape[1], 1),\n                    epochs=30, batch_size=512, validation_split = 0.2,callbacks=[checkpoint], \n                    verbose=1)","43c97eb2":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.legend(['train','validation'])\nplt.show()","36f5a475":"model = load_model('model.h1.24_jan_19')\npreds = model.predict_classes(testX.reshape((testX.shape[0],testX.shape[1])));","50fd6680":"def get_word(n, tokenizer):\n    for word, index in tokenizer.word_index.items():\n        if index == n:\n            return word\n    return None","7b10a6d9":"preds_text = []\nfor i in preds:\n    temp = []\n    for j in range(len(i)):\n        t = get_word(i[j], eng_tokenizer)\n        if j > 0:\n            if (t == get_word(i[j-1], eng_tokenizer)) or (t == None):\n                temp.append('')\n            else:\n                temp.append(t)\n        else:\n            if(t == None):\n                temp.append('')\n            else:\n                temp.append(t) \n\n    preds_text.append(' '.join(temp))","49e77ba7":"pred_df = pd.DataFrame({'actual' : test[:,0], 'predicted' : preds_text})","1be7b7bc":"# print 15 rows randomly\npred_df.head(15)","1fcec86f":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Thank you Harsh Jain @harshjain123 for the script.' )","a12570c0":"#Model Building","88ec12ad":"#Donald Duck and his followers.\n\n![](https:\/\/media0.giphy.com\/media\/vIJaz7nMJhTUc\/giphy.webp?cid=ecf05e47m97th9qjz8i22yp7t0egffcixjlxwkl1dz4ovaej&rid=giphy.webp&ct=g)https:\/\/giphy.com\/search\/three-caballeros-duck","1ffdd761":"![](https:\/\/i.pinimg.com\/originals\/71\/d9\/5b\/71d95bce468875f171b38b41aa85a05e.jpg)pinterest.com","06190435":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSa_kfAiu3YarxCooKtfoCna_aB8Arj7pTBAQ&usqp=CAU)cartoonresearch.com","6ff33fe3":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQaJZ0jBFoU_IpTsl1RlN8nMHC9jt2B1pk_Cg&usqp=CAU)syfynut.wordpress.com","5a940a60":"#The Three Caballeros\n\n\"The Three Caballeros is a 1944 American live-action animated musical package film produced by Walt Disney and released by RKO Radio Pictures. The film is plotted as a series of self-contained segments, strung together by the device of Donald Duck opening birthday gifts from his Latin American friends. Several Latin American stars of the period appear.\"\n\n\"The film was produced as part of the studio's goodwill message for Latin America. The film stars Donald Duck, who in the course of the film is joined by old brazilian friend Jos\u00e9 Carioca , the parrot from Saludos Amigos, who represents Brazil, and later becomes friends with a pistol-packing rooster named Panchito Pistoles, who represents Mexico.\"\n\nhttps:\/\/en.wikipedia.org\/wiki\/The_Three_Caballeros","b9cb2aef":"#Sharing Prediction\n\n![](https:\/\/media3.giphy.com\/media\/b9QBHfcNpvqDK\/200.webp?cid=ecf05e47m97th9qjz8i22yp7t0egffcixjlxwkl1dz4ovaej&rid=200.webp&ct=g)https:\/\/giphy.com\/search\/three-caballeros-duck","9f2f1bdb":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRZ8FFMJ5t_LNg4OL3zvWKPKDol-jajf8_X6Q&usqp=CAU)animationscreecaps.com","9bc1070a":"![](https:\/\/i.pinimg.com\/564x\/12\/84\/01\/1284019a6468f5fb282a30900bdcc05c.jpg)pinterest.com","56eefaa4":"![](https:\/\/media.tenor.com\/images\/9cf7e09aa38c6a8375c18a48f2023b1a\/tenor.gif)https:\/\/tenor.com\/search\/donald-duck-gifs","813ae7b2":"![](https:\/\/i.pinimg.com\/originals\/8a\/19\/26\/8a19262f38075404551d6b095cf25804.jpg)br.portughese","d2bd4745":"#Code by Harsh Jain https:\/\/www.kaggle.com\/harshjain123\/machine-translation-seq2seq-lstms","d3196b80":"#Tokenizing \"Fuck\"\n\n![](https:\/\/64.media.tumblr.com\/f93e4287e52b4d750a33617afa768468\/tumblr_pb80oxswy51wn1is1o1_500.png)multiversalmisfit.tumblr.com","0ea4c2b3":"#What is filename = 'model.h1.24_jan_19'? I have No clue.","d5fb9b56":"#That snippet below takes a long of time.","a0230b83":"#The Three Caballeros Epochs \n\n![](https:\/\/ih1.redbubble.net\/image.668738746.1366\/st,small,507x507-pad,600x600,f8f8f8.u12.jpg)redbubble.com","b1117a43":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQQ80lmPRqnOyxku2J-cfUEZloT8WQrw18QKQ&usqp=CAU)imgur.com","f8a33f8f":"<iframe width=\"956\" height=\"538\" src=\"https:\/\/www.youtube.com\/embed\/gRoEpy4ntP8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>\n\nImagination to Animation: The Three Caballeros https:\/\/www.youtube.com\/watch?v=gRoEpy4ntP8\n\n#Even with Machine Learning I can't understand what Donald Duck is saying, except \"The Show Must Go On\"."}}