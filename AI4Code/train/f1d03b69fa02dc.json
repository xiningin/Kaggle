{"cell_type":{"5b9a2abe":"code","3817de13":"code","9d553437":"code","e7a200c9":"code","4c0ffc4b":"code","8058f64d":"code","6ddb0d4a":"code","2eafb887":"code","e5cd3b40":"code","ea8d5d1d":"code","2c13477c":"code","9209ac02":"code","ced26d75":"code","e967fecd":"code","693b5ac1":"code","987e46d8":"code","f3f28625":"code","1f0bce31":"code","85688428":"code","7114697a":"code","27a006b8":"code","cdd59506":"code","5eb8a9fb":"code","934c1313":"code","df9d60c8":"code","fcdd2e4a":"code","f8fbecc6":"code","ece56c70":"markdown","f83b0944":"markdown","8c8655c2":"markdown","8990b10e":"markdown","3e1bf386":"markdown","f94a5548":"markdown","46e2e384":"markdown","c83e8b35":"markdown","af27dbaf":"markdown","2b62fb8e":"markdown"},"source":{"5b9a2abe":"import numpy as np \nimport pandas as pd \nimport math, random\n\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import LabelEncoder\n\npd.set_option('display.max_columns', 100)\n\nfrom lightgbm import LGBMRegressor\n\nSEED = 47","3817de13":"PATH = '..\/input\/tabular-playground-series-jan-2021\/'\n\ndf_train = pd.read_csv(PATH + '\/train.csv')\ndf_test = pd.read_csv(PATH + '\/test.csv')\ndf_sub = pd.read_csv(PATH + '\/sample_submission.csv')","9d553437":"target = df_train['target']\nfeatures = df_train.drop('target', axis=1)","e7a200c9":"features.head()","4c0ffc4b":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\nimport featuretools as ft","8058f64d":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c - EntitySet\n\nes = ft.EntitySet(id = 'data')\nes.entity_from_dataframe(entity_id = 'january', \n                         dataframe = features, \n                         index='id')\n                         #make_index = True, index = 'index') # \u042d\u0442\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441, \u043f\u0440\u0438 \u0435\u0433\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0438\u0438\n\n# \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfeature_matrix, feature_defs = ft.dfs(entityset = es,                                          # \u041a\u0430\u043a\u043e\u0439 EntiteSet \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\n                                      target_entity = 'january',                               # \u041a\u0430\u043a\u043e\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\n                                      trans_primitives = ['add_numeric', 'multiply_numeric'],  # \u041a\u0430\u043a\u0438\u0435 \u0444\u0438\u0447\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c\n                                      verbose=1)                                               # \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f","6ddb0d4a":"# \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0439\u0444\u0440\u0435\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nfeature_matrix.head()","2eafb887":"# \u041f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0438 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432\n\nimport optuna\nfrom optuna.visualization import plot_optimization_history, plot_param_importances","e5cd3b40":"# \u0412 \u0443\u0447\u0435\u0431\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0438\u0437 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441 \u0446\u0435\u043b\u044c\u044e \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430. \n# \u0414\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u0431\u043e\u0440\u0430, \u0440\u0430\u0441\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\n\ndef objective(trial, data=features, target=target):\n    \n    X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.2, random_state=42)\n    \n    params = {\n        'metric': 'rmse', \n        'random_state': SEED,\n        'n_estimators': 10000,\n        'reg_alpha': trial.suggest_loguniform('reg_alpha', 1e-3, 10.0),\n        'reg_lambda': trial.suggest_loguniform('reg_lambda', 1e-3, 10.0),\n        #'colsample_bytree': trial.suggest_categorical('colsample_bytree', [0.3,0.35,0.4,0.45,0.5,0.6,0.7,0.75,0.8,0.85]),\n        'subsample': trial.suggest_categorical('subsample', [0.6,0.65,0.7,0.75,0.8,0.85]),\n        'learning_rate': trial.suggest_categorical('learning_rate', \n                                                   [0.005,0.006,0.008,0.01,0.015,0.02,0.03]),\n        #'max_depth': trial.suggest_categorical('max_depth', [-1,10,20]),\n        'num_leaves' : trial.suggest_int('num_leaves', 1, 300),\n        #'min_child_samples': trial.suggest_int('min_child_samples', 1, 300),\n        #'cat_smooth' : trial.suggest_int('min_data_per_groups', 1, 100)\n    }\n    \n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0438 \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u043e\u043c \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n    model = LGBMRegressor(**params)      \n    model.fit(X_train, y_train, eval_set=[(X_test,y_test)], early_stopping_rounds=300, verbose=False)\n    preds = model.predict(X_test)\n    \n    #\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u043c\u0435\u0442\u0440\u0438\u043a\u0443 RMSE\n    rmse = mean_squared_error(y_test, preds, squared=False)\n    \n    return rmse","ea8d5d1d":"%%time\n# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\nstudy = optuna.create_study(direction='minimize')  # \u041c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0443\nstudy.optimize(objective, n_trials=5)              # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 = 5\n\n# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)\nprint('Best score:', study.best_trial.value)","2c13477c":"# \u0418\u0441\u0442\u043e\u0440\u0438\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\nplot_optimization_history(study)","9209ac02":"# \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043f\u0440\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0435\nplot_param_importances(study)","ced26d75":"# \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nstudy.best_params","e967fecd":"optuna_params = study.best_params\n\noptuna_params['metric'] = 'rmse'\noptuna_params['random_state'] = SEED\noptuna_params['n_estimators'] = 10000","693b5ac1":"# \u0412\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0441\u0435\u0442 \u0438\u0437 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=SEED)\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0438 \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u043c\u0438 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438\nmodel_optuna = LGBMRegressor(**optuna_params)\nmodel_optuna.fit(X_train, y_train, eval_set=[(X_test, y_test)], early_stopping_rounds=300, verbose=300)","987e46d8":"# C\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0438 \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u0441\u0430\u0431\u043c\u0438\u0442\u0430\n\npred_optuna = model_optuna.predict(df_test)\n\ndf_sub['target'] = pred_optuna\ndf_sub.to_csv('submission_optuna.csv', index=False)","f3f28625":"df_sub.head()","1f0bce31":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0440\u0443\u0447\u043d\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u043e\u0439 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n\nmodel_default = LGBMRegressor(n_estimators=10000,\n                      max_depth=-1, \n                      reg_alpha=2,\n                      reg_lambda=1.5,\n                      num_leaves=37,\n                      metric='rmse',\n                      random_state=SEED)\n\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u043e\u043c \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\nmodel_default.fit(X_train, y_train, eval_set=[(X_test, y_test)], early_stopping_rounds=300, verbose=300)","85688428":"# C\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0438 \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u0441\u0430\u0431\u043c\u0438\u0442\u0430\n\npred_default = model_default.predict(df_test)\n\ndf_sub['target'] = pred_default\ndf_sub.to_csv('submission_default.csv', index=False)","7114697a":"df_sub.head()","27a006b8":"# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438\n\nimport h2o\nprint(h2o.__version__)\n\nfrom h2o.automl import H2OAutoML\n\nh2o.init(max_mem_size='16G')","cdd59506":"%%time\ntrain = h2o.import_file(\"..\/input\/tabular-playground-series-jan-2021\/train.csv\")\ntest = h2o.import_file(\"..\/input\/tabular-playground-series-jan-2021\/test.csv\")","5eb8a9fb":"x = test.columns[1:]\ny = 'target'","934c1313":"# \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0442\u0440\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u044f\u0445\naml = H2OAutoML(max_models=2, \n                seed=SEED, \n                max_runtime_secs=31000)\n\naml.train(x=x, y=y, training_frame=train)","df9d60c8":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043b\u0443\u0447\u0448\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n\nlb = aml.leaderboard\nlb.head(rows=lb.nrows)","fcdd2e4a":"# \u0418\u0437\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c - \u043b\u0438\u0434\u0435\u0440\u0430\n\naml.leader","f8fbecc6":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u0430\u0431\u043c\u0438\u0442\n\npreds = aml.predict(test)\n\ndf_sub['target'] = preds.as_data_frame().values.flatten()\ndf_sub.to_csv('submission_automl.csv', index=False)","ece56c70":"## Optuna","f83b0944":"\u041c\u044b \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c \u0441\u0438\u043b\u044c\u043d\u0443\u044e \u043c\u0443\u043b\u044c\u0442\u0438\u043a\u043e\u043b\u043b\u0435\u043d\u0438\u0430\u0440\u043d\u043e\u0441\u0442\u044c. \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0443\u0447\u0435\u0431\u043d\u043e\u0433\u043e \u0438 \u0434\u043b\u044f \u0437\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u0430 \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c.","8c8655c2":"## \u0414\u043e\u0431\u0440\u044b\u0439 \u0434\u0435\u043d\u044c, \u0434\u043e\u0440\u043e\u0433\u0438\u0435 \u0434\u0440\u0443\u0437\u044c\u044f!\n\n\u041a\u043e\u0434 \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u044c\u0438 \u043f\u043e\u0440\u0442\u0430\u043b\u0430 [NTA](https:\\\\newtechaudit.ru).   \n\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0443\u0442\u0438\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0432 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438.  \n\n\u041c\u044b \u043e\u0431\u0443\u0447\u0438\u043c \u0442\u0440\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 - LGBM \u0441 \u0440\u0443\u0447\u043d\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u043e\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0431\u0443\u0441\u0442 \u0441 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c optuna \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 h2o.automl. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0430\u0431\u043e\u0442\u044b featuretools \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u043d\u0436\u0438\u043d\u0438\u0440\u0438\u043d\u0433\u0430 \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447.","8990b10e":"**\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043c\u044b \u0441\u0440\u0430\u0432\u043d\u0438\u043c \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0440\u0430\u0431\u043e\u0442\u0443 automl.**\n\n\n\u041e\u0431\u0443\u0447\u0438\u043c LGBM \u0441 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0440\u0443\u0447\u043d\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u043e\u0439 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0430 \u0441\u044b\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412 \u043a\u043e\u043d\u0446\u0435 \u0441\u0440\u0430\u0432\u043d\u0438\u043c \u044d\u0442\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u044b AutoML. \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u0430 \u0431\u0435\u0437 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0438 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u0435\u043c\u043f\u043b\u043e\u0432. ","3e1bf386":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0434\u0430\u043d\u043d\u044b\u0445","f94a5548":"## Featuretools","46e2e384":"\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0434\u0430\u043d\u043d\u044b\u0435","c83e8b35":"\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u0441\u0430\u0431\u043c\u0438\u0442\u0430. \u0412 \u043d\u043e\u0432\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0442\u0430\u043a\u0438\u0435, \u043a\u0430\u043a random_state, \u0438\u0441\u0445\u043e\u0434\u043d\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432.","af27dbaf":"## AutoML","2b62fb8e":"\u041e\u0447\u0435\u0440\u0435\u0434\u044c AutoML"}}