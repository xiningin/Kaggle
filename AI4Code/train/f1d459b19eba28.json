{"cell_type":{"7d61f038":"code","8ca02e40":"code","b50a7a34":"code","cd1cb38e":"code","88018d57":"code","9cffaee4":"code","6ef2fa7d":"code","604ed58b":"code","31b01824":"code","ff1763d9":"code","93ec2012":"code","96b31256":"code","564dda12":"code","8665b496":"code","6ccd5499":"code","32bebe97":"code","b741044b":"code","33cbfcc5":"code","eb639ba5":"code","88324808":"code","c38c6c36":"code","555c3ff5":"code","f27b5b51":"code","50a0c3af":"code","1b26a7b0":"code","ea6bcbac":"code","ab729b36":"code","4cd77574":"code","daf02ab6":"code","01351af7":"code","7e68b8aa":"code","a89e6cfb":"code","097e11e5":"code","a92a16f1":"code","b794e4fc":"code","3baa24de":"code","fbdfa167":"code","62701e58":"code","9309a123":"code","cf5e7476":"code","20a387bc":"code","5ddea70b":"code","aa481fd8":"code","dadf57d6":"code","c4f3175f":"code","a719211c":"code","7058643a":"code","ef0e3edd":"code","b7a95b91":"code","5a81326c":"code","9cbeaf0c":"code","24833e92":"code","50c7527a":"code","eeaea246":"code","f837ba5f":"code","818fc91a":"markdown","fefd3d29":"markdown","b7dfc8ce":"markdown","f1662664":"markdown","bb3dd66d":"markdown","385ce57f":"markdown","1a29f65d":"markdown","1182cd47":"markdown","88d49ccb":"markdown","be1e0d52":"markdown","6afdfd4d":"markdown","987fba1e":"markdown","823d1780":"markdown","409b8d8d":"markdown","c1c83ce1":"markdown"},"source":{"7d61f038":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8ca02e40":"import pandas as pd","b50a7a34":"AAPL = pd.read_csv('..\/input\/aaplcsv\/AAPL.csv')","cd1cb38e":"type(AAPL)","88018d57":"AAPL.shape\n","9cffaee4":"AAPL.columns","6ef2fa7d":"AAPL.index\n","604ed58b":"type(AAPL.index)","31b01824":"AAPL.iloc[:5,:]","ff1763d9":"AAPL.iloc[5,:]","93ec2012":"AAPL.iloc[:5,:]","96b31256":"AAPL.iloc[-5:,:]","564dda12":"AAPL.loc[5,:]","8665b496":"AAPL.head(6)","6ccd5499":"AAPL.tail(3)","32bebe97":"AAPL.info()","b741044b":"import numpy as np\n","33cbfcc5":"AAPL.iloc[::3, -1] = np.nan","eb639ba5":"AAPL.head(10)","88324808":"AAPL.info()","c38c6c36":"low = AAPL['Low']\ntype(low)","555c3ff5":"low.head()","f27b5b51":"lows = low.values\ntype(lows)","50a0c3af":"print(lows)","1b26a7b0":"import pandas as pd\nimport numpy as np\ndf = pd.read_csv('..\/input\/world-population\/world_population.csv')\ndf.shape\ndf.info()","ea6bcbac":"# Create array of DataFrame values: np_vals\nnp_vals = df.values\n\n# Create new array of base 10 logarithm values: np_vals_log10\nnp_vals_log10 = np.log10(np_vals)\n\n# Create array of new DataFrame by passing df to np.log10(): df_log10\ndf_log10 = np.log10(df)\n\n# Print original and new data containers\n[print(x, 'has type', type(eval(x))) for x in ['np_vals', 'np_vals_log10', 'df', 'df_log10']]","ab729b36":"import pandas as pd\ndata = {'weekday':['Sun','Sun','Mon','Mon'],\n        'city':['Austin','Dallas','Austin','Dallas'],\n           'visitors':[139, 237,326,456],\n           'signups':[7, 12, 3, 5]}\n","4cd77574":"users = pd.DataFrame(data)\nprint(users)","daf02ab6":"import pandas as pd\n\ncity = ['Austin','Dallas','Austin','Dallas']\nsignups = [7, 12, 3, 5]\nvisitors = [139, 237,326,456]\nweekdays = ['Sun','Sun','Mon','Mon']\nlist_labels = ['cities','signups','visitors','weekdays']\nlist_cols = [city, signups, visitors, weekdays]\nzipped = list(zip(list_labels, list_cols))\nprint(zipped)","01351af7":"data = dict(zipped)\nusers2 = pd.DataFrame(data)\nprint(users2)","7e68b8aa":"users2['fees'] = 0 #broadcast to entire columns\nprint(users2)","a89e6cfb":"#broadcasting with a dict\nimport pandas as pd\nheight = [ 59.0, 65.2, 62.9, 65.4, 63.7, 65.7,64.1 ]\ndata = {'height': height, 'sex': 'M'}\nresults = pd.DataFrame(data)\nprint(results)","097e11e5":"results.columns = ['height (in)','sex']\nresults.index = ['A','B','C','D','E','F','G']\nprint(results)","a92a16f1":"import pandas as pd\nlist_keys = ['Country','Total']\nlist_values = [['United States','Soviet Union','United Kingdom'], [1118,473,273]]","b794e4fc":"list_keys\n","3baa24de":"list_values","fbdfa167":"zipped = list(zip(list_keys,list_values))","62701e58":"zipped","9309a123":"type(zipped)","cf5e7476":"data = dict(zipped)","20a387bc":"data","5ddea70b":"type(data)","aa481fd8":"df = pd.DataFrame(data)\nprint(df)","dadf57d6":"df.columns\n","c4f3175f":"df.index\n","a719211c":"import pandas as pd\ncities = ['Manheim',\n 'Preston park',\n 'Biglerville',\n 'Indiana',\n 'Curwensville',\n 'Crown',\n 'Harveys lake',\n 'Mineral springs',\n 'Cassville',\n 'Hannastown',\n 'Saltsburg',\n 'Tunkhannock',\n 'Pittsburgh',\n 'Lemasters',\n 'Great bend']\nprint(cities)","7058643a":"# Make a string with the value 'PA': state\nstate = 'PA'\n\n# Construct a dictionary: data\ndata = {'state':state, 'city':cities}\n\n# Construct a DataFrame from dictionary data: df\ndf = pd.DataFrame(data)\n\n# Print the DataFrame\nprint(df)","ef0e3edd":"type(data)","b7a95b91":"import matplotlib.pyplot as plt\nplt.plot([1, 2, 3, 4])\nplt.ylabel('some numbers')\nplt.show()","5a81326c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('..\/input\/autompg-dataset\/auto-mpg.csv')\ndf.shape\n\ndf.info()","9cbeaf0c":"sizes = np.array([51.12044694,  56.78387977,  49.15557238,  49.06977358,\n        49.52823321,  78.4595872 ,  78.93021696,  77.41479205,\n        81.52541106,  61.71459825,  52.85646225,  54.23007578,\n        58.89427963,  39.65137852,  23.42587473,  33.41639502,\n        32.03903011,  27.8650165 ,  18.88972581,  14.0196956 ,\n        29.72619722,  24.58549713,  23.48516821,  20.77938954,\n        29.19459189,  88.67676838,  79.72987328,  79.94866084,\n        93.23005042,  18.88972581,  21.34122243,  20.6679223 ,\n        28.88670381,  49.24144612,  46.14174741,  45.39631334,\n        45.01218186,  73.76057586,  82.96880195,  71.84547684,\n        69.85320595, 102.22421043,  93.78252358, 110.        ,\n        36.52889673,  24.14234281,  44.84805372,  41.02504618,\n        20.51976563,  18.765772  ,  17.9095202 ,  17.75442285,\n        13.08832041,  10.83266174,  14.00441945,  15.91328975,\n        21.60597587,  18.8188451 ,  21.15311208,  24.14234281,\n        20.63083317,  76.05635059,  80.05816704,  71.18975117,\n        70.98330444,  56.13992036,  89.36985382,  84.38736544,\n        82.6716892 ,  81.4149056 ,  22.60363518,  63.06844313,\n        69.92143863,  76.76982089,  69.2066568 ,  35.81711267,\n        26.25184749,  36.94940537,  19.95069229,  23.88237331,\n        21.79608472,  26.1474042 ,  19.49759118,  18.36136808,\n        69.98970461,  56.13992036,  66.21810474,  68.02351436,\n        59.39644014, 102.10046481,  82.96880195,  79.25686195,\n        74.74521151,  93.34830013, 102.05923292,  60.7883734 ,\n        40.55589449,  44.7388015 ,  36.11079464,  37.9986264 ,\n        35.11233175,  15.83199594, 103.96451839, 100.21241654,\n        90.18186347,  84.27493641,  32.38645967,  21.62494928,\n        24.00218436,  23.56434276,  18.78345471,  22.21725537,\n        25.44271071,  21.36007926,  69.37650986,  76.19877818,\n        14.51292942,  19.38962134,  27.75740889,  34.24717407,\n        48.10262495,  29.459795  ,  32.80584831,  55.89556844,\n        40.06360581,  35.03982309,  46.33599903,  15.83199594,\n        25.01226779,  14.03498009,  26.90404245,  59.52231336,\n        54.92349014,  54.35035315,  71.39649768,  91.93424995,\n        82.70879915,  89.56285636,  75.45251972,  20.50128352,\n        16.04379287,  22.02531454,  11.32159874,  16.70430249,\n        18.80114574,  18.50153068,  21.00322336,  25.79385418,\n        23.80266582,  16.65430211,  44.35746794,  49.815853  ,\n        49.04119063,  41.52318884,  90.72524338,  82.07906251,\n        84.23747672,  90.29816462,  63.55551901,  63.23059357,\n        57.92740995,  59.64831981,  38.45278922,  43.19643409,\n        41.81296121,  19.62393488,  28.99647648,  35.35456858,\n        27.97283229,  30.39744886,  20.57526193,  26.96758278,\n        37.07354237,  15.62160631,  42.92863291,  30.21771564,\n        36.40567571,  36.11079464,  29.70395123,  13.41514444,\n        25.27829944,  20.51976563,  27.54281821,  21.17188565,\n        20.18836167,  73.97101962,  73.09614831,  65.35749368,\n        73.97101962,  43.51889468,  46.80945169,  37.77255674,\n        39.6256851 ,  17.24230306,  19.49759118,  15.62160631,\n        13.41514444,  55.49963323,  53.18333207,  55.31736854,\n        42.44868923,  13.86730874,  16.48817545,  19.33574884,\n        27.3931002 ,  41.31307817,  64.63368105,  44.52069676,\n        35.74387954,  60.75655952,  79.87569835,  68.46177648,\n        62.35745431,  58.70651902,  17.41217694,  19.33574884,\n        13.86730874,  22.02531454,  15.75091031,  62.68013142,\n        68.63071356,  71.36201911,  76.80558184,  51.58836621,\n        48.84134317,  54.86301837,  51.73502816,  74.14661842,\n        72.22648148,  77.88228247,  78.24284811,  15.67003285,\n        31.25845963,  21.36007926,  31.60164234,  17.51450098,\n        17.92679488,  16.40542438,  19.96892459,  32.99310928,\n        28.14577056,  30.80379718,  16.40542438,  13.48998471,\n        16.40542438,  17.84050478,  13.48998471,  47.1451025 ,\n        58.08281541,  53.06435374,  52.02897659,  41.44433489,\n        36.60292926,  30.80379718,  48.98404972,  42.90189859,\n        47.56635225,  39.24128299,  54.56115914,  48.41447259,\n        48.84134317,  49.41341845,  42.76835191,  69.30854366,\n        19.33574884,  27.28640858,  22.02531454,  20.70504474,\n        26.33555201,  31.37264569,  33.93740821,  24.08222494,\n        33.34566004,  41.05118927,  32.52595611,  48.41447259,\n        16.48817545,  18.97851406,  43.84255439,  37.22278157,\n        34.77459916,  44.38465193,  47.00510227,  61.39441929,\n        57.77221268,  65.12675249,  61.07507305,  79.14790534,\n        68.42801405,  54.10993164,  64.63368105,  15.42864956,\n        16.24054679,  15.26876826,  29.68171358,  51.88189829,\n        63.32798377,  42.36896092,  48.6988448 ,  20.15170555,\n        19.24612787,  16.98905358,  18.88972581,  29.68171358,\n        28.03762169,  30.35246559,  27.20120517,  19.13885751,\n        16.12562794,  18.71277385,  16.9722369 ,  29.85984799,\n        34.29495526,  37.54716158,  47.59450219,  19.93246832,\n        30.60028577,  26.90404245,  24.66650366,  21.36007926,\n        18.5366546 ,  32.64243213,  18.5366546 ,  18.09999962,\n        22.70075058,  36.23351603,  43.97776651,  14.24983724,\n        19.15671509,  14.17291518,  35.25757392,  24.38356372,\n        26.02234705,  21.83420642,  25.81458463,  28.90864169,\n        28.58044785,  30.91715052,  23.6833544 ,  12.82391671,\n        14.63757021,  12.89709155,  17.75442285,  16.24054679,\n        17.49742615,  16.40542438,  20.42743834,  17.41217694,\n        23.58415722,  19.96892459,  20.33531923,  22.99334585,\n        28.47146626,  28.90864169,  43.43816712,  41.57579979,\n        35.01567018,  35.74387954,  48.5565546 ,  57.77221268,\n        38.98605581,  49.98882458,  28.25412762,  29.01845599,\n        23.88237331,  27.60710798,  26.54539622,  31.14448175,\n        34.17556473,  16.3228815 ,  17.0732619 ,  16.15842026,\n        18.80114574,  18.80114574,  19.42557798,  20.2434083 ,\n        20.98452475,  16.07650192,  16.07650192,  16.57113469,\n        36.11079464,  37.84783835,  27.82194848,  33.46359332,\n        29.5706502 ,  23.38638738,  36.23351603,  32.40968826,\n        18.88972581,  21.92965639,  28.68963762,  30.80379718])","24833e92":"np.info(sizes)\ntype(sizes)\nprint(sizes)","50c7527a":"import pandas as pd\ndf = pd.read_csv('..\/input\/autompg-dataset\/auto-mpg.csv')\n\ndf.info","eeaea246":"import matplotlib.pyplot as plt\n# Generate a scatter plot\nplt.plot(kind='scatter', x='mpg', y='horsepower', s='cylinders')\n\n# Add the title\nplt.title('Fuel efficiency vs Horse-power')\n\n# Add the x-axis label\nplt.xlabel('Horse-power')\n\n# Add the y-axis label\nplt.ylabel('Fuel efficiency (mpg)')\n\n# Display the plot\nplt.show()","f837ba5f":"# Make a list of the column names to be plotted: cols\ncols = ['weight','mpg','cylinders']\n\n# Generate the box plots\ndf[cols].plot(kind='box',subplots=True)\n\n# Display the plot\nplt.show()","818fc91a":"Broadcasting by assigning a scalar value to column slice broadcasts value to each row.\nThe slice consists of every 3r row starting from zero in the last column","fefd3d29":"Notice the Series extracted has it own head method and inherit its name attribute from the DataFrame Column","b7dfc8ce":"Slicing","f1662664":"Indexes and Columns","bb3dd66d":"Head() default is 5","385ce57f":"DataFrames from Dictionaries (2)","1a29f65d":"Your job is to use these lists to construct a list of tuples, use the list of tuples to construct a dictionary, and then use that dictionary to construct a DataFrame. In doing so, you'll make use of the list(), zip(), dict() and pd.DataFrame() functions. Pandas has already been imported as pd.\n\nNote: The zip() function in Python 3 and above returns a special zip object, which is essentially a generator. To convert this zip object into a list, you'll need to use list(). You can learn more about the zip() function as well as generators in Python Data Science Toolbox (Part 2).","1182cd47":"NumPy and pandas working together\nPandas depends upon and interoperates with NumPy, the Python library for fast numeric array computations. For example, you can use the DataFrame attribute .values to represent a DataFrame df as a NumPy array. You can also pass pandas data structures to NumPy methods. In this exercise, we have imported pandas as pd and loaded world population data every 10 years since 1960 into the DataFrame df. This dataset was derived from the one used in the previous exercise.\n\nYour job is to extract the values and store them in an array using the attribute .values. You'll then use those values as input into the NumPy np.log10() method to compute the base 10 logarithm of the population values. Finally, you will pass the entire pandas DataFrame into the same NumPy np.log10() method and compare the results.****","88d49ccb":"let's see the changes","be1e0d52":"slice label with .loc","6afdfd4d":"DataFrames from Dictionaries (1)","987fba1e":"Series The columns of DataFrame are themselves a specialized Pandas structured called a series.\nExtracting a single column from DataFrame returns a series.","823d1780":"A Pandas Series then is a 1D labelled Numpy array, and a DataFrame is 2D labelled array whose columns are Series","409b8d8d":"Building DataFrames with broadcasting\nYou can implicitly use 'broadcasting', a feature of NumPy, when creating pandas DataFrames. In this exercise, you're going to create a DataFrame of cities in Pennsylvania that contains the city name in one column and the state name in the second. We have imported the names of 15 cities as the list cities.\n\nYour job is to construct a DataFrame from the list of cities and the string 'PA'.","c1c83ce1":"To extract the numerical values from a Series, use the values attributes"}}