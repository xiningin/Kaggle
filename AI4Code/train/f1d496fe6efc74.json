{"cell_type":{"053bb90d":"code","5e97c852":"code","0594e45c":"code","4e832b04":"code","48e856c2":"code","e13ad6da":"code","f008c0f2":"code","cbd98d0d":"code","46631f16":"code","592f0f99":"code","240082d4":"code","e5acdf71":"code","a17650d8":"code","0bb1f26b":"code","076fa2e1":"code","e9c408b0":"code","51b0b1c0":"code","957dbf15":"code","40a0d5b6":"code","000b6268":"code","21f61af2":"code","f1b8d762":"code","3497f6e9":"code","1e1916bb":"code","80556aff":"code","5e919217":"code","96002873":"code","2caac6a5":"code","459dc9c5":"code","4ea0bc18":"code","178354db":"code","db23b926":"code","3f61e3ee":"code","ba7d4687":"code","b8ead596":"code","0ab8f540":"code","bb39464c":"code","ef28615e":"code","6840ac3c":"code","bff7914f":"code","0d942040":"code","c7dc40ff":"code","5652f7cb":"code","32350598":"code","c417b0aa":"code","4bd87be0":"code","cd13fca8":"code","e91b5919":"code","35cffa2b":"code","570ce57c":"code","8c2cd6c7":"code","a0e44574":"code","afc70ec7":"code","d992779a":"code","232a87fa":"code","7e8551cd":"code","5a63f933":"code","5b233e15":"code","c0b6d830":"code","ac58b662":"code","5ec894e4":"code","ec404190":"markdown","c599a3d4":"markdown","057309e1":"markdown","03d2b0ef":"markdown","2e1aa77b":"markdown","17f3af59":"markdown","d46c3bd7":"markdown","55b6e73b":"markdown","ac85e844":"markdown","61f55b90":"markdown","bdffe350":"markdown","768456a2":"markdown","cfd54407":"markdown"},"source":{"053bb90d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e97c852":"percentage_people_below_poverty_level=pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\npercentage_over_25complete_highschool=pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv', encoding=\"windows-1252\")\nmedian_household_income2015=pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv', encoding=\"windows-1252\")\npolice_killingsUs=pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/MedianHouseholdIncome2015.csv', encoding=\"windows-1252\")\nshare_race_bycity=pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv', encoding=\"windows-1252\")\nkill = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv', encoding=\"windows-1252\")\n\n","0594e45c":"percentage_people_below_poverty_level.head()","4e832b04":"percentage_people_below_poverty_level.info()","48e856c2":"percentage_people_below_poverty_level.poverty_rate.value_counts()","e13ad6da":"percentage_people_below_poverty_level['Geographic Area'].unique()","f008c0f2":"len(percentage_people_below_poverty_level['Geographic Area'].unique())","cbd98d0d":"#poverty rate of each state\n\npercentage_people_below_poverty_level.poverty_rate.replace(['-'],0.0,inplace = True)\npercentage_people_below_poverty_level.poverty_rate=percentage_people_below_poverty_level.poverty_rate.astype(float)\n\narea_list=list(percentage_people_below_poverty_level['Geographic Area'].unique())\narea_poverty_ratio=[]\n\nfor i in area_list:\n    x=percentage_people_below_poverty_level[percentage_people_below_poverty_level['Geographic Area']==i]\n    #area_poverty_rate=sum(x.poverty_rate)\/len(x)\n    area_poverty_ratio.append(sum(x.poverty_rate)\/len(x))\n\ndata=pd.DataFrame({'area_list':area_list,'area_poverty_ratio':area_poverty_ratio})\nnew_index=(data['area_poverty_ratio'].sort_values(ascending=False)).index.values\n\nsorted_data=data.reindex(new_index)\n\n \n\n#visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_poverty_ratio'])\nplt.xticks(rotation=45)\nplt.xlabel('States')\nplt.ylabel('Poverty Rate')\nplt.title('Poverty Rate Given States')","46631f16":"#percentage_people_below_poverty_level.info()","592f0f99":"kill.head()\n","240082d4":"kill.name.value_counts()","e5acdf71":"#len(kill.name.unique())\nlen(kill.name.value_counts())","a17650d8":"separate=kill.name[kill.name!='TK TK'].str.split()\nprint(separate)","0bb1f26b":"a,b=zip(*separate)\n#print(a)\nprint(b)\n#name_list=a+b\n#print(name_list)","076fa2e1":"#most common 15 name and surname of killed people\nseparate=kill.name[kill.name!='TK TK'].str.split()\na,b=zip(*separate)\nname_list=a+b\n#k,l=zip(*name_list)\n#print(k)\nname_count=Counter(name_list)\n#print(name_count)-> counter as list\n#print(len(name_list))-> direct number\nmost_common_names=name_count.most_common(15)\nx,y = zip(*most_common_names)\nx,y=list(x),list(y)\n#print (x)\n#print (y)\n#\nplt.figure(figsize=(15,10))\nax=sns.barplot(x=x,y=y,palette=sns.cubehelix_palette(len(x)))\nplt.xlabel('Name or Surname of killed people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 name or surname killed people')","e9c408b0":"percentage_over_25complete_highschool.head()","51b0b1c0":"percentage_over_25complete_highschool.info()","957dbf15":"percentage_over_25complete_highschool.percent_completed_hs.value_counts()","40a0d5b6":"percentage_over_25complete_highschool.percent_completed_hs.replace(['-'],0.0,inplace=True)\npercentage_over_25complete_highschool.percent_completed_hs=percentage_over_25complete_highschool.percent_completed_hs.astype(float)\n\narea_list=list(percentage_over_25complete_highschool['Geographic Area'].unique())\narea_highschool=[]\n\nfor i in area_list:\n    x=percentage_over_25complete_highschool[percentage_over_25complete_highschool['Geographic Area']==i]\n    area_highschool.append(sum(x.percent_completed_hs)\/len(x))\n    \n\n    \n#sorting\ndata=pd.DataFrame({'area_list':area_list,'area_highschool_ratio':area_highschool})\nnew_index=(data['area_highschool_ratio'].sort_values(ascending=True).index.values)\nsorted_data2=data.reindex(new_index)\n\n#visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2['area_list'],y=sorted_data2['area_highschool_ratio'])\nplt.xticks(rotation=90)\nplt.xlabel('States')\nplt.ylabel('Hish School Graduate Rate')\nplt.title('Percentage of Given States Population Above 25 that has graduated high school')","000b6268":"share_race_bycity.head()","21f61af2":"share_race_bycity.info()","f1b8d762":"share_race_bycity.replace(['-'],0.0,inplace = True)\nshare_race_bycity.replace(['(X)'],0.0,inplace = True)\nshare_race_bycity.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']] = share_race_bycity.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']].astype(float)\narea_list=list(share_race_bycity['Geographic area'].unique())\n\n\n\nshare_white=[]\nshare_black=[]\nshare_native_american=[]\nshare_asian=[]\nshare_hispanic=[]\n\nfor i in area_list:\n    x=share_race_bycity[share_race_bycity['Geographic area']==i]\n    share_white.append(sum(x.share_white) \/ len(x))\n    share_black.append(sum(x.share_black) \/ len(x))\n    share_native_american.append(sum(x.share_native_american) \/ len(x))\n    share_asian.append(sum(x.share_asian) \/ len(x))\n    share_hispanic.append(sum(x.share_hispanic) \/ len(x))\n    \n    \n#visualization\nf,ax=plt.subplots(figsize=(9,15))\nsns.barplot(x=share_white,y=area_list,color='green',alpha=0.5,label='White')\nsns.barplot(x=share_black,y=area_list,color='blue',alpha=0.5,label='Black')\nsns.barplot(x=share_native_american,y=area_list,color='cyan',alpha=0.5,label='American')\nsns.barplot(x=share_asian,y=area_list,color='yellow',alpha=0.5,label='Asian')\nsns.barplot(x=share_hispanic,y=area_list,color='red',alpha=0.5,label='Hispanic')\n\nax.legend(loc='lower right',frameon = True) \nax.set(xlabel='Percentage of Races', ylabel='States', title=\"Percentage of State's Population According to Race\")\n\n\n","3497f6e9":"sorted_data.head()","1e1916bb":"#normalization example\nx=[1,2,3,4,5]\ny1=[1,2,3,4,5]\ny2=[100,101,102,103,104]\nimport matplotlib.pyplot as plt\nplt.plot(x,y1)\nplt.plot(x,y2)\nplt.show()\n\n","80556aff":"# high school graduation rate vs Poverty rate of each state\n\nsorted_data['area_poverty_ratio']=sorted_data['area_poverty_ratio']\/max(sorted_data['area_poverty_ratio'])\nsorted_data2['area_highschool_ratio']=sorted_data2['area_highschool_ratio']\/max(sorted_data2['area_highschool_ratio'])#-> for normalization\n\ndata=pd.concat([sorted_data,sorted_data2['area_highschool_ratio']],axis=1) #->columnlarla birl\u015fetirdik\ndata.sort_values('area_poverty_ratio', inplace=True)\n\n#visualize\nf,ax1=plt.subplots(figsize=(20,10))\nsns.pointplot(x='area_list',y='area_poverty_ratio',data=data,color='lime', alpha=0.5)\nsns.pointplot(x='area_list',y='area_highschool_ratio',data=data,color='red',alpha=0.8)\nplt.text(40,0.6,'high school graduate ratio',color='red',fontsize = 17,style = 'italic')\nplt.text(40,0.55,'poverty ratio',color='lime',fontsize = 18,style = 'italic')\nplt.xlabel('States',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('High School Graduate  VS  Poverty Rate',fontsize = 20,color='blue')\nplt.grid()\n\n","5e919217":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# joint kernel density\n# pearsonr= if it is 1, there is positive correlation and if it is, -1 there is negative correlation.\n# If it is zero, there is no correlation between variables\n# Show the joint distribution using kernel density estimation \n\ng=sns.jointplot(data.area_poverty_ratio,data.area_highschool_ratio, kind=\"kde\", size=5, ratio=3, color='r')\nplt.savefig('graph.png')\nplt.show()","96002873":"# you can change parameters of joint plot\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# Different usage of parameters but same plot with previous one\ng = sns.jointplot(\"area_poverty_ratio\", \"area_highschool_ratio\", data=data,size=5, ratio=3, color=\"r\")\ng=sns.jointplot(data.area_poverty_ratio,data.area_highschool_ratio, data=data, size=5, color='r',ratio=3)\nplt.savefig('graph.png')\nplt.show()","2caac6a5":"data.head()","459dc9c5":"kill.race.head(15)","4ea0bc18":"kill.race.value_counts()","178354db":"kill.race.dropna(inplace=True)\nlabels=kill.race.value_counts().index\nprint(labels)\ncolors=['grey','blue','red','yellow','green','brown']\nexplode=[0,0,0,0,0,0]\n#sizes=kill.race.value_counts()\nsizes=kill.race.value_counts().values\nprint(sizes)\n\n#visual\nplt.figure(figsize=(7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Killed People According to Races', color='blue', fontsize=15)\n","db23b926":"data.head()","3f61e3ee":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# lmplot \n# Show the results of a linear regression within each dataset\nsns.lmplot(x=\"area_poverty_ratio\", y=\"area_highschool_ratio\", data=data)\nplt.show()","ba7d4687":"data.head()","b8ead596":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# cubehelix plot\nsns.kdeplot(data.area_poverty_ratio, data.area_highschool_ratio, shade=True, cut=1)\nplt.show()","0ab8f540":"data.head()","bb39464c":"# Show each distribution with both violins and points\n# Use cubehelix to get a custom sequential palette\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=data, palette=pal, inner=\"points\")\nplt.show()","ef28615e":"data.corr()","6840ac3c":"#correlation map\n# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\nf,ax = plt.subplots(figsize=(5, 5))\nsns.heatmap(data.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","bff7914f":"kill.head()","0d942040":"kill.manner_of_death.unique()","c7dc40ff":"# manner of death(olum sekli) : ates edilerek, ates edilerek ve sok tabancasiyla\n# gender cinsiyet\n# age: yas\n# Plot the orbital period with horizontal boxes\nsns.boxplot(x=\"gender\", y=\"age\", hue=\"manner_of_death\", data=kill, palette=\"PRGn\")\nplt.show()","5652f7cb":"kill.head()","32350598":"# swarm plot\n# manner of death(olum sekli) : ates edilerek, ates edilerek ve sok tabancasiyla\n# gender cinsiyet\n# age: yas\nsns.swarmplot(x=\"gender\", y=\"age\",hue=\"manner_of_death\", data=kill)\nplt.show()","c417b0aa":"data.head()","4bd87be0":"data.head()","cd13fca8":"# pair plot\nsns.pairplot(data)\nplt.show()","e91b5919":"kill.gender.value_counts()","35cffa2b":"kill.gender.value_counts().values","570ce57c":"kill.head()","8c2cd6c7":"# kill properties\n# Manner of death\nsns.countplot(kill.gender)\n#sns.countplot(kill.manner_of_death)\nplt.title(\"gender\",color = 'blue',fontsize=15)","a0e44574":"# kill weapon\narmed = kill.armed.value_counts()\nprint(armed)\nplt.figure(figsize=(10,7))\nsns.barplot(x=armed[:7].index,y=armed[:7].values)\nplt.ylabel('Number of Weapon')\nplt.xlabel('Weapon Types')\nplt.title('Kill weapon',color = 'blue',fontsize=15)","afc70ec7":"# age of killed people\nabove25 =['above25' if i >= 25 else 'below25' for i in kill.age]\ndf = pd.DataFrame({'age':above25})\nsns.countplot(x=df.age)\nplt.ylabel('Number of Killed People')\nplt.title('Age of killed people',color = 'blue',fontsize=15)","d992779a":"# Race of killed people\nsns.countplot(data=kill, x='race')\nplt.title('Race of killed people',color = 'blue',fontsize=15)","232a87fa":"# Most dangerous cities\ncity = kill.city.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=city[:12].index,y=city[:12].values)\nplt.xticks(rotation=45)\nplt.title('Most dangerous cities',color = 'blue',fontsize=15)","7e8551cd":"# most dangerous states\nstate = kill.state.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=state[:20].index,y=state[:20].values)\nplt.title('Most dangerous state',color = 'blue',fontsize=15)","5a63f933":"# Having mental ilness or not for killed people\nsns.countplot(kill.signs_of_mental_illness)\nplt.xlabel('Mental illness')\nplt.ylabel('Number of Mental illness')\nplt.title('Having mental illness or not',color = 'blue', fontsize = 15)","5b233e15":"# Threat types\nsns.countplot(kill.threat_level)\nplt.xlabel('Threat Types')\nplt.title('Threat types',color = 'blue', fontsize = 15)","c0b6d830":"# Flee types\nsns.countplot(kill.flee)\nplt.xlabel('Flee Types')\nplt.title('Flee types',color = 'blue', fontsize = 15)","ac58b662":"# Having body cameras or not for police\nsns.countplot(kill.body_camera)\nplt.xlabel('Having Body Cameras')\nplt.title('Having body cameras or not on Police',color = 'blue',fontsize = 15)","5ec894e4":"# Kill numbers from states in kill data\nsta = kill.state.value_counts().index[:10]\nsns.barplot(x=sta,y = kill.state.value_counts().values[:10])\nplt.title('Kill Numbers from States',color = 'blue',fontsize=15)","ec404190":"# Pie Chart","c599a3d4":"# Count Plot","057309e1":"# Violin Plot","03d2b0ef":"# Point Plot","2e1aa77b":"# Box Plot","17f3af59":"Hi, I try to learn python and its libraries. This notbook is to study. I may have made mistakes.\n\nThanks DATAI for 'Seaborn Tutorial for Beginners'.","d46c3bd7":"# Bar Plot","55b6e73b":"# Joint Plot","ac85e844":"# Lm Plot","61f55b90":"# Kde Plot","bdffe350":"# Swarm Plot","768456a2":"# Pair Plot","cfd54407":"# Heat Map"}}