{"cell_type":{"91306537":"code","589388cd":"code","dc8fd734":"code","995408fa":"code","56a7967c":"code","48ce7925":"code","5fd0532a":"code","09132dea":"code","e8c2b347":"code","b4cfe9b9":"code","16bc6571":"code","ef881762":"code","5204d188":"code","64fe4400":"markdown","2ceac57c":"markdown","14424fa2":"markdown","16cce738":"markdown","245ec614":"markdown","78eda870":"markdown","9a655e83":"markdown","beb84ac1":"markdown","929dfb69":"markdown","3d54c2e2":"markdown","5ce4b955":"markdown","0451c5f9":"markdown","0762c536":"markdown","5ef774f3":"markdown","9146e149":"markdown","6bf5d209":"markdown","10bbd664":"markdown","8deb137f":"markdown","d9d1fcf5":"markdown","da5f7615":"markdown","baeb3c7b":"markdown","b11d7e53":"markdown","0694a9d5":"markdown","d1692614":"markdown","4f8632c1":"markdown"},"source":{"91306537":"!pip install grpcio==1.24.3\n!pip install tensorflow==2.2.0","589388cd":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport pylab as pl\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.patches as mpatches\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (10, 6)","dc8fd734":"if not tf.__version__ == '2.2.0':\n    print(tf.__version__)\n    raise ValueError('please upgrade to TensorFlow 2.2.0, or restart your Kernel (Kernel->Restart & Clear Output)')","995408fa":"X = np.arange(0.0, 5.0, 0.1)\nX","56a7967c":"##You can adjust the slope and intercept to verify the changes in the graph\na = 1\nb = 0\n\nY= a * X + b \n\nplt.plot(X, Y) \nplt.ylabel('Dependent Variable')\nplt.xlabel('Indepdendent Variable')\nplt.show()","48ce7925":"!wget -O FuelConsumption.csv https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/ML0101ENv3\/labs\/FuelConsumptionCo2.csv","5fd0532a":"df = pd.read_csv(\"FuelConsumption.csv\")\n\n# take a look at the dataset\ndf.head()","09132dea":"train_x = np.asanyarray(df[['ENGINESIZE']])\ntrain_y = np.asanyarray(df[['CO2EMISSIONS']])","e8c2b347":"a = tf.Variable(20.0)\nb = tf.Variable(30.2)\n\n\ndef h(x):\n   y = a*x + b\n   return y","b4cfe9b9":"def loss_object(y,train_y) :\n    return tf.reduce_mean(tf.square(y - train_y))\n    # Below is a predefined method offered by TensorFlow to calculate loss function\n    #loss_object = tf.keras.losses.MeanSquaredLogarithmicError()","16bc6571":"learning_rate = 0.01\ntrain_data = []\nloss_values =[]\n# steps of looping through all your data to update the parameters\ntraining_epochs = 200\n\n# train model\nfor epoch in range(training_epochs):\n    with tf.GradientTape() as tape:\n        y_predicted = h(train_x)\n        loss_value = loss_object(train_y,y_predicted)\n        loss_values.append(loss_value)\n\n        # get gradients\n        gradients = tape.gradient(loss_value, [b,a])\n        \n        # compute and adjust weights\n        b.assign_sub(gradients[0]*learning_rate)\n        a.assign_sub(gradients[1]*learning_rate)\n        if epoch % 5 == 0:\n            train_data.append([a.numpy(), b.numpy()])\n\n\n","ef881762":"plt.plot(loss_values, 'ro')","5204d188":"cr, cg, cb = (1.0, 1.0, 0.0)\nfor f in train_data:\n    cb += 1.0 \/ len(train_data)\n    cg -= 1.0 \/ len(train_data)\n    if cb > 1.0: cb = 1.0\n    if cg < 0.0: cg = 0.0\n    [a, b] = f\n    f_y = np.vectorize(lambda x: a*x + b)(train_x)\n    line = plt.plot(train_x, f_y)\n    plt.setp(line, color=(cr,cg,cb))\n\nplt.plot(train_x, train_y, 'ro')\ngreen_line = mpatches.Patch(color='red', label='Data Points')\n\nplt.legend(handles=[green_line])\n\nplt.show()","64fe4400":"<a id=\"ref2\"><\/a>\n\n<h1>Linear Regression with TensorFlow<\/h1>\nA simple example of a linear function can help us understand the basic mechanism behind TensorFlow.\n\nFor the first part we will use a sample dataset, and then we'll use TensorFlow to adjust and get the right parameters. We download a dataset that is related to fuel consumption and Carbon dioxide emission of cars. \n","2ceac57c":"<hr>\n","14424fa2":"<hr>\n\nCopyright \u00a9 2018 [Cognitive Class](https:\/\/cocl.us\/DX0108EN_CC). This notebook and its source code are released under the terms of the [MIT License](https:\/\/bigdatauniversity.com\/mit-license?cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-DL0120EN-SkillsNetwork-20629446&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-DL0120EN-SkillsNetwork-20629446&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-DL0120EN-SkillsNetwork-20629446&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-DL0120EN-SkillsNetwork-20629446&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-DL0120EN-SkillsNetwork-20629446&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-DL0120EN-SkillsNetwork-20629446&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ).\n","16cce738":"First, we initialize the variables <b>a<\/b> and <b>b<\/b>, with any random guess, and then we define the linear function:\n","245ec614":"IMPORTANT! => Please restart the kernel by clicking on \"Kernel\"->\"Restart and Clear Outout\" and wait until all output disapears. Then your changes are beeing picked up\n","78eda870":"Now we are ready to start training and run the graph. We use GradientTape to calculate gradients:\n","9a655e83":"<h2>LINEAR REGRESSION WITH TENSORFLOW<\/h2>\n\n<h3>Objective for this Notebook<h3>    \n<h5> 1. What is Linear Regression<\/h5>\n<h5> 2. Linear Regression with TensorFlow. <\/h5>\n","beb84ac1":"Let's define the independent variable:\n","929dfb69":"<h2>Understanding the Data<\/h2>\n\n<h3><code>FuelConsumption.csv<\/code>:<\/h3>\nWe have downloaded a fuel consumption dataset, <b><code>FuelConsumption.csv<\/code><\/b>, which contains model-specific fuel consumption ratings and estimated carbon dioxide emissions for new light-duty vehicles for retail sale in Canada. <a href=\"http:\/\/open.canada.ca\/data\/en\/dataset\/98f1a129-f628-4ce4-b24d-6f16bf24dd64\">Dataset source<\/a>\n\n-   **MODELYEAR** e.g. 2014\n-   **MAKE** e.g. Acura\n-   **MODEL** e.g. ILX\n-   **VEHICLE CLASS** e.g. SUV\n-   **ENGINE SIZE** e.g. 4.7\n-   **CYLINDERS** e.g 6\n-   **TRANSMISSION** e.g. A6\n-   **FUEL CONSUMPTION in CITY(L\/100 km)** e.g. 9.9\n-   **FUEL CONSUMPTION in HWY (L\/100 km)** e.g. 8.9\n-   **FUEL CONSUMPTION COMB (L\/100 km)** e.g. 9.2\n-   **CO2 EMISSIONS (g\/km)** e.g. 182   --> low --> 0\n","3d54c2e2":"<a id=\"ref1\"><\/a>\n\n<h1>Linear Regression<\/h1>\n\nDefining a linear regression in simple terms, is the approximation of a linear model used to describe the relationship between two or more variables. In a simple linear regression there are two variables, the dependent variable, which can be seen as the \"state\" or \"final goal\" that we study and try to predict, and the independent variables, also known as explanatory variables, which can be seen as the \"causes\" of the \"states\". \n\nWhen more than one independent variable is present the process is called multiple linear regression. <br>\nWhen multiple dependent variables are predicted the process is known as multivariate linear regression.\n\nThe equation of a simple linear model is\n\n$$Y = a X + b $$\n\nWhere Y is the dependent variable and X is the independent variable, and <b>a<\/b> and <b>b<\/b> being the parameters we adjust. <b>a<\/b> is known as \"slope\" or \"gradient\" and <b>b<\/b> is the \"intercept\". You can interpret this equation as Y being a function of X, or Y being dependent on X.\n\nIf you plot the model, you will see it is a line, and by adjusting the \"slope\" parameter you will change the angle between the line and the independent variable axis, and the \"intercept parameter\" will affect where it crosses the dependent variable's axis.\n","5ce4b955":"Lets say we want to use linear regression to predict Co2Emission of cars based on their engine size. So, lets define X and Y value for the linear regression, that is, train_x and train_y:\n","0451c5f9":"Lets plot the loss values to see how it has changed during the training:\n","0762c536":"They are also used to describe properties of different materials:\n","5ef774f3":"Now, we are going to define a loss function for our regression, so we can train our model to better fit our data. In a linear regression, we minimize the squared error of the difference between the predicted values(obtained from the equation) and the target values (the data that we have). In other words we want to minimize the square of the predicted values minus the target value. So we define the equation to be minimized as loss.\n\nTo find value of our loss, we use <b>tf.reduce_mean()<\/b>. This function finds the mean of a multidimensional tensor, and the result can have a different dimension.\n","9146e149":"Kindly upvote if you find this helpful.Thnak You.\nFollow me @ https:\/\/www.kaggle.com\/devendrabhattal","6bf5d209":"$$Force = Deformation \\\\times Stiffness$$\n\n$$Heat Transfered = Temperature Difference \\\\times Thermal Conductivity$$\n\n$$Electrical Tension (Voltage) = Electrical Current \\\\times Resistance$$\n\n$$Mass =  Volume \\\\times Density$$\n","10bbd664":"<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n<font size=\"3\"><strong>In this notebook we will overview the implementation of Linear Regression with TensorFlow<\/strong><\/font>\n<br>\n<br>\n<h2>Table of Contents<\/h2>\n<ol>\n <li><a href=\"#ref1\">Linear Regression<\/a><\/li>\n <li><a href=\"#ref2\">Linear Regression with TensorFlow<\/a><\/li>\n<\/ol>\n<\/div>\n<br>\n<br>\n<p><\/p>\n<hr>\n","8deb137f":"Lets visualize how the coefficient and intercept of line has changed to fit the data:\n","d9d1fcf5":"**Restart kernel for latest version of TensorFlow to be activated**\n","da5f7615":"* * *\n","baeb3c7b":"We begin by installing TensorFlow version 2.2.0 and its required prerequistes.\n","b11d7e53":"When we perform an experiment and gather the data, or if we already have a dataset and we want to perform a linear regression, what we will do is adjust a simple linear model to the dataset, we adjust the \"slope\" and \"intercept\" parameters to the data the best way possible, because the closer the model comes to describing each ocurrence, the better it will be at representing them.\n\nSo how is this \"regression\" performed?\n","0694a9d5":"OK... but how can we see this concept of linear relations with a more meaningful point of view?\n\nSimple linear relations were used to try to describe and quantify many observable physical phenomena, the easiest to understand are speed and distance traveled:\n","d1692614":"Next, let's first import the required packages:\n","4f8632c1":"$$Distance Traveled = Speed \\\\times Time + Initial Distance$$\n\n$$Speed = Acceleration \\\\times Time + Initial Speed$$\n"}}