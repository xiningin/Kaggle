{"cell_type":{"5f0a8bbe":"code","080db40e":"code","298cf4f1":"code","eb6a54ca":"code","68a1579d":"code","39b35146":"code","6d6889d9":"code","6d6f517a":"code","324d5921":"code","9b6a4cc9":"code","e2b7bb16":"code","53b089f2":"code","ee7127e0":"code","1294c0ce":"code","881f7c85":"code","38b586df":"code","c7473f7b":"code","fbf85b7c":"code","882c3cc2":"code","be850c42":"code","ca891eca":"code","873965ba":"code","74795837":"code","bc317de3":"code","e2faa1f0":"code","93b59ec6":"code","4d9e98a4":"code","3c34767f":"code","1eeb544d":"code","c8408129":"code","bcb5335f":"code","0803d17b":"code","22878c6e":"code","7c2fd219":"code","0dffb799":"code","8430f8b5":"code","80eb41a5":"code","f436e412":"code","a910f40c":"code","9c4554a1":"code","61578634":"code","07888d08":"code","b96c3b91":"code","e3966711":"code","941f40d8":"code","38ffca46":"code","6a7c5c2e":"code","8b31589c":"markdown","b039ff52":"markdown","d669edc4":"markdown","eaa0f87c":"markdown","28e2072a":"markdown","f9183043":"markdown","439f8ffb":"markdown","5035db7a":"markdown","3512ad17":"markdown","3ca147d3":"markdown"},"source":{"5f0a8bbe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","080db40e":"wine_df = pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')","298cf4f1":"print(wine_df.head(10))\nprint(wine_df.isnull().sum())\nprint(wine_df.describe())","eb6a54ca":"plt.bar(wine_df['quality'] , wine_df['pH'])\nplt.ylabel('pH Values')\nplt.xlabel('Quality of the Wine')\nplt.show()","68a1579d":"sns.boxplot(x='quality' , y='pH' , data=wine_df)\nplt.title('pH VS Quality')\nplt.show()","39b35146":"plt.figure(figsize=(10,8))\nsns.barplot(x='quality' , y='alcohol' , data=wine_df)\nplt.xlabel('Quality',fontsize=12)\nplt.ylabel('Alcohol',fontsize=12)","6d6889d9":"plt.figure(figsize=(10,8))\nsns.barplot(x='quality' , y='volatile acidity' , data=wine_df)\nplt.xlabel('Quality',fontsize=12)\nplt.ylabel('Volatile Acidity',fontsize=12)","6d6f517a":"plt.figure(figsize=(10,8))\nsns.barplot(x='quality' , y='citric acid' , data=wine_df)\nplt.xlabel('Quality',fontsize=12)\nplt.ylabel('Citric Acid',fontsize=12)","324d5921":"wine_df['quality'].unique()","9b6a4cc9":"# First Convert The Quality of the wine into Two Categories as good or bad\nbins = (3,6.5,8)\nlabels = ['bad','good']\nwine_df['quality'] = pd.cut(wine_df['quality'] , bins=bins , labels=labels)","e2b7bb16":"wine_df['quality']","53b089f2":"# Now Converting the Categorical Features into Numbers Using Label Encoder\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\n## Sorry But Here The Label Encoder Was Not Working And Due To this I had to use the Pandas Get_dummies Function","ee7127e0":"wine_df['quality_encoded'] = pd.get_dummies(wine_df['quality'] , drop_first=True)","1294c0ce":"wine_df.head(10)","881f7c85":"wine_df['quality_encoded'].value_counts()","38b586df":"X = wine_df.drop(['quality' , 'quality_encoded'] , axis='columns')\ny = wine_df['quality_encoded'].values","c7473f7b":"# Splitting the data into train_test_split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.15)","fbf85b7c":"from sklearn.preprocessing import StandardScaler\nscale = StandardScaler()","882c3cc2":"X_train = scale.fit_transform(X_train)\nX_test = scale.transform(X_test)","be850c42":"from sklearn.linear_model import LogisticRegression\nregressor = LogisticRegression(solver='liblinear')","ca891eca":"regressor.fit(X_train,y_train)","873965ba":"y_pred = regressor.predict(X_test)","74795837":"from sklearn.metrics import confusion_matrix,accuracy_score","bc317de3":"cm = confusion_matrix(y_test,y_pred)\ncm\nprint(accuracy_score(y_test,y_pred))","e2faa1f0":"# Using Heatmap To plot The confusion matrix\nsns.heatmap(cm,annot=True,cmap='coolwarm')\nplt.xlabel('Truth Value')\nplt.ylabel('Predicted Value')","93b59ec6":"from sklearn.svm import SVC","4d9e98a4":"svc = SVC(C=1,gamma=0.9)","3c34767f":"svc.fit(X_train,y_train)","1eeb544d":"y_pred_svc = svc.predict(X_test)","c8408129":"cm_svc = confusion_matrix(y_test,y_pred_svc)\nprint(cm_svc)\nprint(accuracy_score(y_test,y_pred_svc))","bcb5335f":"'''\n'Accent', 'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r', \n'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r', 'Greens', 'Greens_r', 'Greys', 'Greys_r', \n'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 'Pastel1', 'Pastel1_r',\n'Pastel2', 'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r', 'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', \n'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', 'RdGy', 'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', \n'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', 'Set1', 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral', 'Spectral_r',\n'Wistia', 'Wistia_r', 'YlGn', 'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', 'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r',\n'autumn', 'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', 'cividis', 'cividis_r', 'cool', 'cool_r',\n'coolwarm', 'coolwarm_r', 'copper', 'copper_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r', 'gist_earth', 'gist_earth_r', 'gist_gray',\n'gist_gray_r', 'gist_heat', 'gist_heat_r', 'gist_ncar', 'gist_ncar_r', 'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', \n'gist_yarg_r', 'gnuplot', 'gnuplot2', 'gnuplot2_r', 'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', 'hsv', 'hsv_r', 'icefire', 'icefire_r', 'inferno',\n'inferno_r', 'jet', 'jet_r', 'magma', 'magma_r', 'mako', 'mako_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocean_r', 'pink', 'pink_r', 'plasma',\n'plasma_r', 'prism', 'prism_r', 'rainbow', 'rainbow_r', 'rocket', 'rocket_r', 'seismic', 'seismic_r', 'spring', 'spring_r', 'summer', 'summer_r', 'tab10',\n'tab10_r', 'tab20', 'tab20_r', 'tab20b', 'tab20b_r', 'tab20c', 'tab20c_r', 'terrain', 'terrain_r',\n'twilight', 'twilight_r', 'twilight_shifted', 'twilight_shifted_r', 'viridis', 'viridis_r', 'vlag', 'vlag_r', 'winter', 'winter_r'\n'''","0803d17b":"# Using Heatmap To plot The confusion matrix\nsns.heatmap(cm,annot=True,cmap='autumn')\nplt.xlabel('Truth Value')\nplt.ylabel('Predicted Value')","22878c6e":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators=200)","7c2fd219":"classifier.fit(X_train,y_train)","0dffb799":"y_pred_rf = classifier.predict(X_test)","8430f8b5":"cm_rf = confusion_matrix(y_test,y_pred_rf)\nprint(cm_rf)\nprint(accuracy_score(y_test,y_pred_rf))","80eb41a5":"# Using Heatmap To plot The confusion matrix\nsns.heatmap(cm_rf,annot=True,cmap='ocean_r')\nplt.xlabel('Truth Value')\nplt.ylabel('Predicted Value')","f436e412":"from sklearn.model_selection import GridSearchCV\nparameters = {'kernel' : ('linear' , 'rbf') , 'C' : [1,10,15,20] , 'gamma' : [0.3,1.0,0,85,0.6,0.9]}\nclf = GridSearchCV(svc , param_grid=parameters , cv=10)","a910f40c":"clf.fit(X_train,y_train)","9c4554a1":"y_pred_gscv = clf.predict(X_test)","61578634":"clf.best_params_","07888d08":"# Applying it to the SVC Algorithm we get....\nsvc = SVC(C=10,kernel='rbf',gamma=1.0)\nsvc.fit(X_train,y_train)","b96c3b91":"y_new_scv_pred = svc.predict(X_test)","e3966711":"cm_new_svc = confusion_matrix(y_test,y_new_scv_pred)\nprint(cm_new_svc)\nprint(accuracy_score(y_test,y_new_scv_pred))","941f40d8":"from sklearn.model_selection import cross_val_score\nvalidation = cross_val_score(classifier,X_train,y_train,cv=10)","38ffca46":"print(np.argmax(validation))\n# So at position 8 we got the maximum accuracy of the model\nprint(validation[8])","6a7c5c2e":"# Using Heatmap To plot The confusion matrix\nsns.heatmap(cm_rf,annot=True,cmap='ocean_r')\nplt.xlabel('Truth Value')\nplt.ylabel('Predicted Value')","8b31589c":"# Applying now cross-validation to random forest classifier","b039ff52":"## Applying Feature Scaling To The X_train And X_test Dataset","d669edc4":"## 1. Applying first Logistic Regression","eaa0f87c":"## 3.Using Random Forest Classifier","28e2072a":"## Doing Some Data Exploration\n### 1. Plotting the Graph using Seaborn And Matplotlib","f9183043":"## Now We Will perform Training And testing of our Model Using the Various Algorithms","439f8ffb":"## 2. Applying SVM","5035db7a":"## Plotting the ph value of the wine with the Quality of the Wine","3512ad17":"#### In the above graph we can Clearly see that at quality=6 there are many outliers and and average pH value is 3.3 and now we have to classify that those wine quality that are having quality>6.5 to be classified as 'GOOD' and rest all as 'BAD'","3ca147d3":"# Using Grid Search CV For finding the best parameters for SVM"}}