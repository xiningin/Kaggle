{"cell_type":{"0438553d":"code","6326b3da":"code","728147fb":"code","fe3e9840":"code","334b0eed":"code","24ab4740":"code","a32b38bd":"code","bd7381c8":"code","5f9e7f62":"code","f5e8a331":"code","0043b3fd":"code","7fcfc965":"code","6d5d9c30":"code","e82ce96b":"code","66033840":"code","b8331231":"code","6de8f5b5":"code","d380626d":"code","90a8a1d8":"code","13da9f17":"code","c4f9441a":"code","08ed530c":"code","023b25c7":"code","b8e45daf":"code","f5590a4f":"code","087ba08c":"code","c9e7d69c":"code","94881ed9":"code","ed9db3db":"code","5dc34c9a":"code","e9ddfed8":"code","a5322e60":"code","047af9f8":"code","99e90f3b":"code","72769c58":"code","ada84a20":"code","141c9971":"code","3621978b":"code","1bd155ce":"code","4842ebcf":"code","dc36cf12":"code","a8936459":"code","8f0d7e88":"code","2d4db240":"code","54daf9c2":"code","91b31f4c":"code","6e588300":"code","bddd039b":"code","3c12c4d0":"code","8b2450aa":"code","854225a7":"code","9ad8eb60":"code","184228a1":"code","c41e3d16":"markdown","2c5a9b3c":"markdown","822cfee2":"markdown","78e30f8b":"markdown","acefc4a9":"markdown","3e5d9de9":"markdown","ddb41302":"markdown"},"source":{"0438553d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/gagandeep16\/car-sales\/Car_sales.csv'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6326b3da":"df=pd.read_csv(\"\/kaggle\/input\/car-sales\/Car_sales.csv\")\ndf.head()","728147fb":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pandas.plotting import scatter_matrix\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","fe3e9840":"raw_df = df","334b0eed":"raw_df.info()","24ab4740":"raw_df.describe()","a32b38bd":"# Setting the default style and font sizes Chart\nsns.set_style('darkgrid')\nplt.rcParams['font.size'] = 14\nplt.rcParams['figure.figsize'] = (10, 6)\nplt.rcParams['figure.facecolor'] = '#00000000'","bd7381c8":"raw_df.Power_perf_factor.describe()","5f9e7f62":"fig = px.scatter(raw_df,\n                 x='Power_perf_factor',\n                 y='Price_in_thousands',\n                 color='Model',\n                 hover_data=['Price_in_thousands'],\n                 title='Price vs. Model')\nfig.update_traces(marker_size=5)\nfig.show()","f5e8a331":"fig = px.histogram(raw_df,\n                   x='Power_perf_factor',\n                   marginal='box',\n                   title='Distribution of Power Perform Factor')\nfig.update_layout(bargap=0.1)\nfig.show()","0043b3fd":"fig = px.histogram(raw_df,\n                   x='__year_resale_value',\n                   marginal='box',\n                   title='Distribution of Year Resale Value')\nfig.update_layout(bargap=0.1)\nfig.show()","7fcfc965":"fig = px.histogram(raw_df,\n                   x='Sales_in_thousands',\n                   marginal='box',\n                   title='Distribution of Year Resale Value')\nfig.update_layout(bargap=0.1)\nfig.show()","6d5d9c30":"fig = px.histogram(raw_df,\n                   x='Price_in_thousands',\n                   marginal='box',\n                   title='Distribution of Year Resale Value')\nfig.update_layout(bargap=0.1)\nfig.show()","e82ce96b":"fig = px.scatter(raw_df,\n                 x='__year_resale_value',\n                 y='Price_in_thousands',\n                 title='Year resale Value vs. Price in Thousands')\nfig.update_traces(marker_size=5)\nfig.show()","66033840":"fig = px.scatter(raw_df,\n                 x='Power_perf_factor',\n                 y='Price_in_thousands',\n                 title='Power perf Factor vs. Price in Thousands')\nfig.update_traces(marker_size=5)\nfig.show()","b8331231":"fig = px.scatter(raw_df,\n                 x='Sales_in_thousands',\n                 y='Price_in_thousands',\n                 title='Sales_in_thousands vs. Price in Thousands')\nfig.update_traces(marker_size=5)\nfig.show()","6de8f5b5":"plt.figure(figsize=(10,10))\nscatter_matrix(raw_df,figsize=(25,25))\nplt.show()","d380626d":"raw_df.Price_in_thousands.corr(raw_df.__year_resale_value)","90a8a1d8":"raw_df.Price_in_thousands.corr(raw_df.Power_perf_factor)","13da9f17":"correlation = raw_df.corr()\nplt.figure(figsize=(15,15))\nplt.title('Correlation Matrix')\nsns.heatmap(correlation, vmax=1, square=True,annot=True,cmap='cubehelix')","c4f9441a":"raw_df.info()","08ed530c":"to_drop = ['Manufacturer', 'Sales_in_thousands', '__year_resale_value',\n       'Vehicle_type', 'Model', 'Engine_size', 'Horsepower',\n       'Wheelbase', 'Width', 'Length', 'Curb_weight', 'Fuel_capacity',\n       'Fuel_efficiency', 'Latest_Launch']\n\nraw_df.drop(to_drop, inplace=True, axis=1)","023b25c7":"clean_df = raw_df","b8e45daf":"clean_df","f5590a4f":"super_clean_df = clean_df.dropna(axis=0)\nsuper_clean_df.describe(include=\"all\")","087ba08c":"plt.title('Price in thousands vs. Power perf factor')\nsns.scatterplot(data=super_clean_df, x='Price_in_thousands', y='Power_perf_factor', alpha=0.7, s=15)","c9e7d69c":"def estimate_Price_in_thousands(Power_perf_factor, w, b):\n  return w * Power_perf_factor + b","94881ed9":"w = 2\nb = 10","ed9db3db":"Power_perform_factor = super_clean_df.Power_perf_factor\nestimated_Price_in_thousands = estimate_Price_in_thousands(Power_perform_factor, w, b)","5dc34c9a":"plt.plot(Power_perform_factor, estimated_Price_in_thousands, 'r-o');\nplt.xlabel('Power perf factor')\nplt.ylabel('Estimated Price in thousands');","e9ddfed8":"target = super_clean_df.Price_in_thousands\n\nplt.plot(Power_perform_factor, estimated_Price_in_thousands, 'r', alpha=0.9);\nplt.scatter(Power_perform_factor, target, s=8,alpha=0.8);\nplt.xlabel('Power perform factor');\nplt.ylabel('Price in thousands')\nplt.legend(['Estimate', 'Actual']);","a5322e60":"def try_parameters(w, b):\n  Power_perform_factor = super_clean_df.Power_perf_factor\n  target = super_clean_df.Price_in_thousands\n\n  estimated_Price_in_thousands = estimate_Price_in_thousands(Power_perform_factor, w, b)\n\n  plt.plot(Power_perform_factor, estimated_Price_in_thousands, 'r', alpha=0.9);\n  plt.scatter(Power_perform_factor, target, s=8,alpha=0.8);\n  plt.xlabel('Power perform factor');\n  plt.ylabel('Price in thousands')\n  plt.legend(['Estimate', 'Actual']);","047af9f8":"try_parameters(0.1, 2)","99e90f3b":"try_parameters(0.3, 10)","72769c58":"def rmse(targets, predictions):\n  return np.sqrt(np.mean(np.square(targets - predictions)))","ada84a20":"w = 0.3\nb = 10","141c9971":"try_parameters(w, b)","3621978b":"targets = super_clean_df['Price_in_thousands']\npredicted = estimate_Price_in_thousands(super_clean_df.Power_perf_factor, w, b)","1bd155ce":"rmse(targets, predicted)","4842ebcf":"def try_parameters(w, b):\n  Power_perform_factor = super_clean_df.Power_perf_factor\n  target = super_clean_df.Price_in_thousands\n  predictions = estimate_Price_in_thousands(Power_perform_factor, w, b)\n\n  plt.plot(Power_perform_factor, predictions, 'r', alpha=0.9);\n  plt.scatter(Power_perform_factor, target, s=8,alpha=0.8);\n  plt.xlabel('Age');\n  plt.ylabel('Charges')\n  plt.legend(['Prediction', 'Actual']);\n\n  loss = rmse(target, predictions)\n  print(\"RMSE Loss: \", loss)","dc36cf12":"try_parameters(0.3, 7)","a8936459":"model = LinearRegression()","8f0d7e88":"inputs = super_clean_df[['Power_perf_factor']]\ntargets = super_clean_df.Price_in_thousands\nprint('inputs.shape :', inputs.shape)\nprint('targets.shape :', targets.shape)","2d4db240":"model.fit(inputs, targets)","54daf9c2":"model.predict(np.array([[23],\n                        [37],\n                        [61]]))","91b31f4c":"predictions = model.predict(inputs)","6e588300":"predictions","bddd039b":"prediction = predictions","3c12c4d0":"prediction.sort()\nprint(\"Largest element is:\", prediction[-1])","8b2450aa":"rmse(targets, predictions)","854225a7":"# w\nmodel.coef_","9ad8eb60":"# b\nmodel.intercept_","184228a1":"try_parameters(model.coef_, model.intercept_)","c41e3d16":"**Optimizer**","2c5a9b3c":"**Correlation**","822cfee2":"**Exploratory analysis and Visualization**","78e30f8b":"**Using Linear regression with single feature**","acefc4a9":"**Cleaning Data**","3e5d9de9":"**Loss\/Cost Function**","ddb41302":"**All Scatter Plot**"}}