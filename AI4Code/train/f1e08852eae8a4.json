{"cell_type":{"47e41bd0":"code","e786a164":"code","75376e82":"code","7b9406a8":"code","12244355":"code","f91ccacd":"code","8bf0b9b1":"code","20be6b39":"code","188ef8f8":"code","59bb19d5":"code","e66fbc77":"code","9c631dcf":"code","173797a8":"code","39b52bd0":"code","eb415b1d":"code","5811f072":"code","d4cfa38a":"code","fe683f72":"code","e17b23d2":"code","8a6df49a":"code","9185cbe4":"code","b7e8f4cc":"code","4565018e":"code","ee6490c5":"code","5b194963":"code","e722d843":"code","bbcce8db":"code","9338bb84":"code","fe3282a9":"code","88bf96ed":"code","c05eb72d":"code","d5c3640e":"code","6c2f22cb":"code","2d0bab4a":"code","b0589465":"code","a7edf9df":"code","fb393d96":"code","009ebccc":"code","98cf18b5":"code","eac5b57a":"code","c2170d90":"code","f59adb27":"code","9894f6cf":"code","5fa730d9":"code","693c3d20":"code","835180d3":"code","9b8351de":"markdown","21854c3b":"markdown","c8945717":"markdown","5d82597b":"markdown","5f3a5614":"markdown","3ce5ad68":"markdown","0ac1fd4e":"markdown","f3853dea":"markdown","93d2202b":"markdown","29ef3247":"markdown","ea5b48bc":"markdown","2693d152":"markdown","80f5c408":"markdown","131fbd38":"markdown","7dea556d":"markdown","4bf30747":"markdown","195cf9ca":"markdown","4781233f":"markdown","ff205d3d":"markdown","eb0d1e66":"markdown","120f8cf3":"markdown","b33ba218":"markdown","d5dc8fe8":"markdown","d1c19e19":"markdown","8446452c":"markdown","b83b00ae":"markdown","29b6931d":"markdown","0ef0fd47":"markdown","f55ab25b":"markdown","1cf830dc":"markdown","9c4046f3":"markdown","eeaf4b33":"markdown","b1337f0d":"markdown","6154793d":"markdown","9ed95ec3":"markdown","d72b2e30":"markdown","83be5f73":"markdown","9115d0a7":"markdown","1c6c4674":"markdown","ee8ed9a6":"markdown","86059605":"markdown"},"source":{"47e41bd0":"## twosum function - 'checked' repository is list\n\ndef twosum(nums, target):\n    \n    checked = []\n    \n    for num in nums:\n        if target-num in checked:\n            return (nums.index(num),checked.index(target-num))\n        else:\n            checked.append(num)\n    \n    ","e786a164":"## twosum function - 'checked' repository is dictionary\n\ndef twosum(nums, target):\n    \n    checked = {}\n    \n    for i,num in enumerate(nums):\n        if target-num in checked:\n            return (i,checked[target-num])\n        else:\n            checked.update({num:i})\n\n# Note: enumerate function is nice but would actually be quicker to use a counter to track the indices (i in the code above)","75376e82":"# Test Case\nnums, target = [3,4,6,90], 96\n\n# Run Test\ntwosum(nums, target)","7b9406a8":"# Function (using recursion)\n\ndef factorial(num):\n    if num == 1:\n        return 1\n    else:\n        return num*factorial(num-1)","12244355":"# Test\nfactorial(8)","f91ccacd":"# Function\n\ndef squares_dict(n):\n    d = {}\n    for i in range(1,n+1):\n        d[i]=i**2\n    return d","8bf0b9b1":"# Test\n\nsquares_dict(8)","20be6b39":"class Circle:\n    def __init__(self,radius,color='blue'):\n        self.radius = radius\n        self.color = color\n    \n    def area(self):\n        a = self.radius**2\n        #print('The area of the circle {}, which has a radius of {}, is {}. Incidentally, the circle is {}.'.format(self,self.radius,a,self.color))\n        return a","188ef8f8":"# Create objects c1 & c2 from Circle class\n\nc1 = Circle(5)\nc2 = Circle(12,'red')","59bb19d5":"# Use outputs from using area function on 'Circle' class objects\n\nc1.area()*c2.area()","e66fbc77":"# Define function\n\ndef case_count(string):\n    u=0\n    l=0\n    for letter in string:\n        if ord(letter) in range(65,91):\n            u+=1\n        elif ord(letter) in range(97,123):\n            l+=1\n    return 'UPPER CASE {} LOWER CASE {}'.format(u,l)\n        \n# Note: ord() function converts character to its corresponding ascii decimal number\n# the two ranges cover the upper case and lower case english alphabet","9c631dcf":"# Test\ncase_count('Hello world!')","173797a8":"# Function (without recursion)\n\ndef fibonacci(num):\n    fib = {0:0,1:1}\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        for num in range(2,num+1):\n            fib[num]=fib[num-1]+fib[num-2]\n        return fib[num]","39b52bd0":"# Test\nprint([fibonacci(i) for i in range(20)])","eb415b1d":"# Function - using recursion!\n\ndef fib_rec(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 1\n    else:\n        return fib_rec(num-1) + fib_rec(num-2)\n    ","5811f072":"# Test\nprint([fib_rec(i) for i in range(20)])","d4cfa38a":"# Function - outputs list object\n\nimport sympy\n\ndef prime_factors(num):\n    '''Takes positive integer and returns its prime factors'''\n    pfs=[]\n    n=num\n\n    for i in sympy.primerange(0,num\/2):\n        while n%i==0:\n            pfs.append(i)\n            n=n\/i\n            \n    return pfs\n            \n        ","fe683f72":"# Function - outputs generator object\n\nimport sympy\n\ndef prime_factors_gen(num):\n    '''Create a generator object that generates prime factors of a positive integer'''\n    n=num\n    for i in sympy.primerange(0,num\/2):\n        while n%i==0:\n            yield i\n            n=n\/i\n            ","e17b23d2":"# Test\n\nlist(prime_factors_gen(6439))","8a6df49a":"## Function - note use of reduce() and Counter() functions\n\nfrom functools import reduce\nfrom collections import Counter\n\n\ndef HCF(x,y):\n    '''Calculate Highest Common Factor for two positive integers\n    Counter() function used to get intersection of two lists including duplicates\n    reduce() function used to multiply all elements of a list together'''\n    \n    x_pfs = prime_factors(x)\n    y_pfs = prime_factors(y)\n    intersection = list((Counter(x_pfs) & Counter(y_pfs)).elements())\n    HCF = reduce(lambda i,j : i*j, intersection)\n    return HCF\n    \n    ","9185cbe4":"# Test:\nHCF(6439,3149)","b7e8f4cc":"# Function from Programiz.com to find HCF Using the Euclidian algorithm\n# I didn't write this (ref above) but I found the recursive nature of the while loop interesting\n\ndef compute_hcf(x, y):\n    while(y):\n        x, y = y, x % y\n    return x\n\nhcf = compute_hcf(300, 400)\nprint(\"The HCF is\", hcf)","4565018e":"# Filter for multiples of 2\n\ntest_list = [i for i in range(20)]    \nfiltered_2 = list(filter(lambda x : x%2==0, test_list))\nfiltered_2","ee6490c5":"# Filter for prime numbers\n\nimport sympy\ntest_list = [i for i in range(50)]    \nfiltered_primes = list(filter(lambda x : x in sympy.primerange(0,max(test_list)), test_list))\nfiltered_primes","5b194963":"# Print out square numbers of specified list\n\ntest_list = [i for i in range(20)]\nsquares = list(map(lambda x : x**2, test_list))\nprint(squares)","e722d843":"class Vehicle():\n    def __init__(self, name, max_speed, mileage, capacity=50, colour='white'):\n        self.name = name\n        self.max_speed = max_speed\n        self.mileage = mileage\n        self.capacity = capacity\n        self.colour = colour\n        \n    def fare(self):\n        return self.capacity * 100\n    \n    def seating_capacity(self, capacity):\n        return f\"The seating capacity of a {self.name} is {capacity} passengers\"","bbcce8db":"car = Vehicle('Mini Metro',150,90000)\n\nprint('A {} {} has been created from the Vehicle class'\n       ' with a max speed of {}mph and a mileage of {}'\n       .format(car.colour, car.name, car.max_speed, car.mileage)\n     )","9338bb84":"class Bus(Vehicle):\n    \n    def seating_capacity(self, capacity=50):\n        return super().seating_capacity(capacity=50)\n    \n    def fare(self):\n        return self.capacity * 100 * 1.1\n    ","fe3282a9":"bus = Bus('621 Kitt Green Circular', 55, 20000)\n\nprint('Bus name:{}, Top Speed:{}, Mileage:{}.'\n     .format(bus.name,bus.max_speed,bus.mileage),\n      '\\n',bus.seating_capacity(),\n      '\\nThe total fare revenue for a full bus is: \u00a3{}'\n      .format(round(bus.fare()))\n     )","88bf96ed":"type(bus)","c05eb72d":"print(isinstance(bus, Vehicle))","d5c3640e":"# Function\n\ndef PascalsTri(n):\n    if n == 1:\n        return [1]\n    else:\n        t = [0,1,0]\n        t2 = []\n        while len(t)-2<n:\n            for j in range(len(t)-1):\n                t2.append(t[j]+t[j+1])\n            t=[0]+t2+[0]\n            t2=[]\n        return(t[1:-1])\n        ","6c2f22cb":"# Test\n\nfor num in range(1,10):\n    print(PascalsTri(num))","2d0bab4a":"# Function\n\ndef Bab_sqrt(num,dp=2):\n    \n    import random\n    guess = random.randint(1,num)\n    \n    while guess - (guess + num\/guess)\/2 != 0:\n        guess = (guess + num\/guess)\/2\n       \n    return round(guess,dp)","b0589465":"# Test\n\nBab_sqrt(89)","a7edf9df":"class Cards():\n    def __init__(self, suit, value):\n        self.suit = suit\n        self.value = value\n    \nsuits = ['Spades', 'Clubs', 'Hearts', 'Diamonds']\nvalues = range(1,14)\n\ndeck = [Cards(suit,value) for suit in suits for value in values]","fb393d96":"print(deck[0].value,deck[0].suit)","009ebccc":"import random\n\nrandom.shuffle(deck)\n\nfor i in range(7):\n    print(deck[i].value,deck[i].suit)\n","98cf18b5":"def FCD_hand(deck):\n    \n    # Shuffle the Deck:\n    \n    random.shuffle(deck)\n    \n    \n    # Deal the Hand:\n    \n    print('Your Hand:')\n    for i in range(5):\n        print(deck[i].value,deck[i].suit)\n        \n    hand = [(deck[i].value,deck[i].suit) for i in range(5)]\n    \n    values = [i[0] for i in hand]\n    suits = [i[1] for i in hand]\n    \n    \n    # Score the Hand:\n    \n    if len(set(suits)) == 1 and len(set(values).intersection({1,10,11,12,13})) == 5:\n        return 'Royal Flush'\n    \n    elif len(set(suits)) == 1 and sorted(values) == list(range(min(values), max(values)+1)):\n        return 'Straight Flush'\n    \n    elif {values.count(i) for i in set(values)} == {1,4}:\n        return 'Four of a Kind'\n    \n    elif {values.count(i) for i in set(values)} == {2,3}:\n        return 'Full House'\n    \n    elif len(set(suits)) == 1:\n        return 'Flush'\n    \n    elif sorted(values) == list(range(min(values), max(values)+1)) or len(set(values).intersection({1,10,11,12,13})) == 5:\n        return 'Straight'\n    \n    elif {values.count(i) for i in set(values)} == {1,3}:\n        return 'Three of a Kind'\n    \n    elif {[values.count(i) for i in set(values)].count(i) for i in {values.count(i) for i in set(values)}} == {1,2}:\n        return 'Two Pair'\n    \n    elif {values.count(i) for i in set(values)} == {1,2}:\n        return 'One Pair'\n    \n    else:\n        return 'High Card: {}'.format(max(values))\n    ","eac5b57a":"FCD_hand(deck)","c2170d90":"# Function - Using Recursion (elegant but not the quickest way to calculate!!)\n\ndef Recamans(num):\n\n    if num == 0:\n        return 0\n    \n    else:\n        if (Recamans(num-1)-num >= 0) and (Recamans(num-1)-num not in [Recamans(i) for i in range(num)]):\n            return Recamans(num-1)-num\n        else:\n            return Recamans(num-1)+num","f59adb27":"seq = []\nfor i in range(5):\n    seq.append(Recamans(i))\nprint(seq)","9894f6cf":"# Function without using % (using recursion)\n\nimport time\ndef div_3(num):\n    start_time=time.time()\n    if num <10:\n        return (True,'{} ns'.format((time.time()-start_time)\/10**-9)) if (num==3 or num==6 or num==9) else (False,'{} seconds'.format((time.time()-start_time)\/10**-9))\n    else:\n        y=0\n        for i in str(num):\n            y+=int(i)\n        return div_3(y)\n    \n# Test:   \nprint(div_3((10**100000+2)))\n\n\n# Function using %:\n\ndef div_3_pf(num):\n    start_time=time.time()\n    return (num%3==0,'{} ns'.format((time.time()-start_time)\/10**-9))\n\n# Test:\nprint(div_3_pf(10**100000+2))","5fa730d9":"def Caeser_Cipher(text):\n    '''Text Cipher Function'''\n    encoded = ''\n    for i in text:\n        encoded+=chr(ord(i)+3)\n    return encoded\n\ndef Decoder(text):\n    '''Decoder function to return original message'''\n    decoded = ''\n    for i in text:\n        decoded+=chr(ord(i)-3)\n    return decoded","693c3d20":"Caeser_Cipher(\"Hi, I'm Ed Winchester\")","835180d3":"Decoder('Kl\/#L*p#Hg#Zlqfkhvwhu')","9b8351de":"[Back to Contents](#contents)","21854c3b":"[Back to Contents](#contents)","c8945717":"# Pascal's Triangle<a id=\"sec12\"><\/a>\nFunction to print out first n rows of pascal's triangle","5d82597b":"# Contents<a id=\"contents\"><\/a>\n0. [References](#sec0)\n1. [Twosum](#sec1)\n2. [Factorial](#sec2)\n3. [Squares Dictionary](#sec3)\n4. [Circle Class](#sec4)\n5. [Case Count](#sec5)\n6. [Fibonacci](#sec6)\n7. [Find Prime Factors](#sec7)\n8. [Find Highest Common Factor](#sec8)\n9. [Filter a list using lambda + filter()](#sec9)\n10. [Alter a list using lambda + map()](#sec10)\n11. [Create 'Vehicle' Class](#sec11)\n12. [Pascal's Triangle ](#sec12) \n13. [Babylonian Method for Square Roots](#sec13) \n14. [Create a deck of cards](#sec14)  \n    14.1 [Shuffle the Deck](#sec14.1)  \n    14.2 [Draw and Score 5-Card Poker Hand](#sec14.2)  \n15. [Recam\u00e1n's sequence](#sec15)\n16. [Divisible by three? (With bonus challenges!)](#sec16)","5f3a5614":"[Back to Contents](#contents)","3ce5ad68":"# References\nSources for Challenges:  \nhttps:\/\/github.com\/zhiwehu\/Python-programming-exercises  \nhttps:\/\/pynative.com\/python-exercises-with-solutions\/  \nhttps:\/\/www.w3resource.com\/python-exercises\/python-functions-exercises.php  \nhttp:\/\/oeis.org\/wiki\/Welcome\nhttps:\/\/www.practicepython.org\/\nhttps:\/\/realpython.com\/python-practice-problems\/","0ac1fd4e":"# Fibonacci<a id=\"sec6\"><\/a>\nThe Fibonacci Sequence is computed based on the following formula:  \n\nf(n)=0 if n=0  \nf(n)=1 if n=1  \nf(n)=f(n-1)+f(n-2) if n>1  \n\nPlease write a program to compute the value of f(n) with a given n input by console.\n\n**Extra: do one function with and one without using recursion!**","f3853dea":"[Back to Contents](#contents)","93d2202b":"# Draw and Score 5-Card Poker Hand <a id=\"sec14.2\"><\/a>","29ef3247":"[Back to Contents](#contents)","ea5b48bc":"# Divisible by three? (Without using %!)<a id=\"sec16\"><\/a>\n\n1) Write a function to determine if a number can be divided by 3 without remainder\n2) Don't use the in built Python modulus operator: %\n3) Time the calulation and try to be quicker than the Python modulus operator!","2693d152":"[Back to Contents](#contents)","80f5c408":"# Case Count<a id=\"sec5\"><\/a>\n\nQuestion:\nWrite a program that accepts a sentence and calculate the number of upper case letters and lower case letters.\nSuppose the following input is supplied to the program:\nHello world!\nThen, the output should be:\nUPPER CASE 1\nLOWER CASE 9","131fbd38":"# Factorial function<a id=\"sec2\"><\/a>\n\n\nWrite a program which can compute the factorial of a given numbers.\nThe results should be printed in a comma-separated sequence on a single line.\nSuppose the following input is supplied to the program:\n8\nThen, the output should be:\n40320","7dea556d":"[Back to Contents](#contents)","4bf30747":"# Python Program to Find Highest Common Factor (HCF)<a id=\"sec8\"><\/a>","195cf9ca":"# Caeser Cipher<a id=\"sec17\"><\/a>\nThe next question is a two-parter. You\u2019ll code up a function to compute a Caesar cipher on text input. For this problem, you\u2019re free to use any part of the Python standard library to do the transform.\n\n(could also do a simple Caeser cipher code breaker)\n\nhttps:\/\/realpython.com\/python-practice-problems\/\nhttps:\/\/realpython.com\/python-encodings-guide\/","4781233f":"# Recam\u00e1n's sequence <a id=\"sec15\"><\/a>\n(or Recaman's sequence): a(0) = 0; for n > 0, a(n) = a(n-1) - n if non-negative and not already in the sequence, otherwise a(n) = a(n-1) + n.\n\nhttp:\/\/oeis.org\/A005132","ff205d3d":"[Back to Contents](#contents)","eb0d1e66":"[Back to Contents](#contents)","120f8cf3":"# Vehicle class creation<a id=\"sec11\"><\/a>\n\nDirectly from : https:\/\/pynative.com\/python-object-oriented-programming-oop-exercise\/\n\n**Steps:**\n1. Create a Vehicle class with max_speed and mileage instance attributes  \n2.  Create child class Bus that will inherit all of the variables and methods of the Vehicle class  \n3. Create a Bus class that inherits from the Vehicle class. Give the capacity argument of Bus.seating_capacity() a default value of 50   \n4.  Define property that should have the same value for every class instance  (all vehicles should be white)  \n5. Determine which class a given Bus object belongs to (Check type of a object)  \n6. Determine if bus is also an instance of the Vehicle class","b33ba218":"[Back to Contents](#contents)","d5dc8fe8":"# Squares Dictionary<a id=\"sec3\"><\/a>\n\nQuestion:\nWith a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nSuppose the following input is supplied to the program:\n8\nThen, the output should be:\n{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}","d1c19e19":"![](https:\/\/www.probytes.net\/wp-content\/uploads\/2018\/01\/20.png)","8446452c":"[Back to Contents](#contents)","b83b00ae":"[Back to Contents](#contents)","29b6931d":"# Create a deck of cards<a id=\"sec14\"><\/a>","0ef0fd47":"# Babylonian Method for Square Roots<a id=\"sec13\"><\/a>\nWrite algorithm for calculating square roots of a given integer using the Babylonian or Hero's Method (don't know the method? - look it up!)","f55ab25b":"[Back to Contents](#contents)","1cf830dc":"[Back to Contents](#contents)","9c4046f3":"# Twosum<a id=\"sec1\"><\/a>\nFind indices of two numbers in a list that sum to a target number","eeaf4b33":"# Filter a list using lambda + filter() <a id=\"sec9\"><\/a>","b1337f0d":"[Back to Contents](#contents)","6154793d":"# BEGINNER PYTHON CHALLENGES\n\nI'm learning Python and so obviously scouring the internet for canonical problems and challenges to cut my teeth on.\n\nI thought maybe some other beginners might like to have a look at some of the problems I've found and my attempted solutions, so recording them all in one notebook!\n\nSolutions are my own pitiful attempts (I try not to cheat!), so not always the best way to go about the problems! \n\nPlease suggest better solutions in the comments with explanations and I'll add them with reference to your profile! Spread the knowledge!\n","9ed95ec3":"[Back to Contents](#contents)","d72b2e30":"# Circle Class<a id=\"sec4\"><\/a>\n\nQuestion:\nDefine a class named Circle which can be constructed by a radius. The Circle class has a method which can compute the area.\n\nExtra: Add an extra property to the class with a default value","83be5f73":"# Alter a list using lambda + map() <a id=\"sec10\"><\/a>","9115d0a7":"# Shuffle the Deck<a id=\"sec14.1\"><\/a>","1c6c4674":"# Find Prime Factors<a id=\"sec7\"><\/a>\nBonus Challenge: Create one function that outputs a list and one that outputs a generator object (generators are memory efficient!)","ee8ed9a6":"https:\/\/stackoverflow.com\/questions\/41970795\/what-is-the-best-way-to-create-a-deck-of-cards","86059605":"https:\/\/www.programiz.com\/python-programming\/examples\/hcf\n\nhttps:\/\/www.sparknotes.com\/math\/prealgebra\/wholenumbers\/section4\/"}}