{"cell_type":{"cbfdc34d":"code","91af291f":"code","8969f548":"code","6f4f6d90":"code","e4947288":"code","35915ef0":"code","9537d5e7":"code","4e6ea139":"code","3cbbc3d7":"markdown","a97d876d":"markdown","4283ac75":"markdown","edea6c3a":"markdown","77b36ee7":"markdown"},"source":{"cbfdc34d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        \n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","91af291f":"dataset = pd.read_csv(\"\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","8969f548":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n","6f4f6d90":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","e4947288":"# Initializing the ANN\nann = tf.keras.models.Sequential()\n\n# Adding the input layer and the first hidden layer\nann.add(tf.keras.layers.Dense(units=6, activation='relu'))\n\n# Adding the second hidden layer\nann.add(tf.keras.layers.Dense(units=6, activation='relu'))\n\n# Adding the output layer\nann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))\n\n# Part 3 - Training the ANN\n\n# Compiling the ANN\nann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\n# Training the ANN on the Training set\nann.fit(X_train, y_train, batch_size = 30, epochs = 100)","35915ef0":"print(ann.predict(sc.transform([[63, 1,3,145,233,1,0,150,0,2.3,0,0,1]])) > 0.5)\n#Prediction Comes as True which is correct","9537d5e7":"y_pred = ann.predict(X_test)\ny_pred = (y_pred > 0.5)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","4e6ea139":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","3cbbc3d7":"# Checking Single Prediction","a97d876d":"# Splitting the dataset into the Training set and Test set","4283ac75":"# Part 2 - Building the ANN","edea6c3a":"# Test Set Results","77b36ee7":"# Confusion Matrix"}}