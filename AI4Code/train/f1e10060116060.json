{"cell_type":{"9685f771":"code","08c021c6":"code","bd04dd11":"code","12b5e97d":"code","ce6e27ce":"code","a921e485":"code","a89e439d":"code","46d2102a":"code","51fd7e5e":"code","3b615e96":"code","64987ad7":"code","d0853026":"code","ad1a81fa":"code","db5038d3":"code","3933dff3":"code","6642354b":"code","b3ff6c92":"code","b5a1e034":"code","9158ad9a":"code","aee56cd4":"code","71c0451e":"markdown","d42d8fe7":"markdown","3bff488f":"markdown","e5711b7e":"markdown","110bbafe":"markdown","3508de71":"markdown","cc78656b":"markdown","624c1510":"markdown","dc885fb0":"markdown","ddfc0e0d":"markdown","a68b5499":"markdown"},"source":{"9685f771":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.tree import export_graphviz\nimport graphviz","08c021c6":"def draw_box_plot(df):\n    f = df.boxplot(patch_artist=True, return_type='dict')\n    for box in f['boxes']:\n        box.set(color='#7570b3',linewidth=2)\n        box.set(facecolor='#a2cffe' )\n    for whisker in f['whiskers']:\n        whisker.set(color='#01386a', linewidth=2)\n    for cap in f['caps']:\n        cap.set(color='#720058', linewidth=2)\n    for median in f['medians']:\n        median.set(color='DarkBlue', linewidth=2)\n    for flier in f['fliers']:\n        flier.set(marker='o', color='y', alpha=0.5)\n    plt.show()","bd04dd11":"def draw_percent_bar(df,my_color,width = 0.4, set_xtick = False):\n    data = df.values\n    bottom = np.zeros(data[0].shape)\n    if set_xtick:\n        plt.xticks(df.columns)\n    for i in range(len(data)):\n        plt.bar(x = df.columns, height = data[i], bottom = bottom, label = df.index[i], color = my_color[i], width = width)\n        bottom += data[i]\n    plt.legend(loc='upper right')\n    plt.show()","12b5e97d":"file = pd.read_csv('..\/input\/hr-comma-sep\/HR_comma_sep.csv')\ndf = pd.DataFrame(file)\ndf","ce6e27ce":"df.dtypes","a921e485":"left = df[df['left']==1]\nstay = df[df['left']==0]","a89e439d":"sat_lev_left = left['satisfaction_level'].to_frame()\nsat_lev_stay = stay['satisfaction_level'].to_frame()\nsat_lev = pd.concat([sat_lev_stay, sat_lev_left], axis = 1)\nsat_lev.columns = ['0', '1']\ndraw_box_plot(sat_lev)","46d2102a":"eva_left = left['last_evaluation'].to_frame()\neva_stay = stay['last_evaluation'].to_frame()\neva = pd.concat([eva_stay, eva_left], axis = 1)\neva.columns = ['0', '1']\ndraw_box_plot(eva)","51fd7e5e":"avg_hour_left = left['average_montly_hours'].to_frame()\navg_hour_stay = stay['average_montly_hours'].to_frame()\navg_hour = pd.concat([avg_hour_stay, avg_hour_left], axis = 1)\ndraw_box_plot(avg_hour)","3b615e96":"time_spend_left = left['time_spend_company'].to_frame()\ntime_spend_stay = stay['time_spend_company'].to_frame()\ntime_spend = pd.concat([time_spend_stay, time_spend_left], axis = 1)\ndraw_box_plot(time_spend)","64987ad7":"num_pro_left = left.number_project.value_counts().sort_index(ascending = True)\nnum_pro_stay = stay.number_project.value_counts().sort_index(ascending = True)\ntmp_array = np.zeros([7, 1])\nfor i in num_pro_left.keys():\n    tmp_array[i-1] += num_pro_left[i]\nnum_pro_left = pd.DataFrame(tmp_array, index = list(range(1, 8)))\ntmp_array = np.zeros([7, 1])\nfor i in num_pro_stay.keys():\n    tmp_array[i-1] += num_pro_stay[i]\nnum_pro_stay = pd.DataFrame(tmp_array, index = list(range(1, 8)))","d0853026":"num_pro_sum = num_pro_stay + num_pro_left\ntmp_left = num_pro_left.drop(num_pro_sum[num_pro_sum[0]==0].index)\ntmp_stay = num_pro_stay.drop(num_pro_sum[num_pro_sum[0]==0].index)\nnum_pro_sum = num_pro_sum.drop(num_pro_sum[num_pro_sum[0]==0].index)\nnum_pro_rate_left = tmp_left \/ num_pro_sum\nnum_pro_rate_stay = tmp_stay \/ num_pro_sum\nnum_pro_rate = pd.concat([num_pro_rate_stay, num_pro_rate_left], axis = 1)\nnum_pro_rate.columns = ['stay', 'left']\ndraw_percent_bar(num_pro_rate.T, ['#8ab8fe', '#f29e8e'])","ad1a81fa":"promote_left = pd.DataFrame(left.promotion_last_5years.value_counts()).sort_index(ascending = True)\npromote_stay = pd.DataFrame(stay.promotion_last_5years.value_counts()).sort_index(ascending = True)\npromote_rate_stay = promote_stay \/ (promote_left + promote_stay)\npromote_rate_left = promote_left \/ (promote_left + promote_stay)\npromote_rate = pd.concat([promote_rate_stay, promote_rate_left], axis = 1)\npromote_rate.columns = ['stay', 'left']\ndraw_percent_bar(promote_rate.T, ['#8ab8fe', '#f29e8e'], width = 0.5, set_xtick = True)","db5038d3":"salary_left = pd.DataFrame(left.salary.value_counts()).sort_index(ascending = True)\nsalary_stay = pd.DataFrame(stay.salary.value_counts()).sort_index(ascending = True)\nsalary_rate_left = salary_left \/ (salary_left + salary_stay)\nsalary_rate_stay = salary_stay \/ (salary_left + salary_stay)\nsalary_rate = pd.concat([salary_rate_stay, salary_rate_left], axis = 1)\nsalary_rate.columns = ['stay', 'left']\ndraw_percent_bar(salary_rate.T, ['#8ab8fe', '#f29e8e', '#18d17b'], width = 0.4)","3933dff3":"ss=StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)\nmy_tree = DecisionTreeRegressor(random_state = 42, splitter='random', max_depth=10)","6642354b":"y = df['left'].to_frame()\nX = df.drop(['left'], axis = 1)\nsale_map = {label:idx for idx,label in enumerate(set(X['sales']))}\nX['sales'] = X['sales'].map(sale_map)\nsalary_map = {label:idx for idx, label in enumerate(set(X['salary']))}\nX['salary'] = X['salary'].map(salary_map)","b3ff6c92":"[train_index, test_index] = list(ss.split(X, y))[0]","b5a1e034":"X_train = X.loc[train_index]\nX_test = X.loc[test_index]\ny_train = y.loc[train_index]\ny_test = y.loc[test_index]","9158ad9a":"my_tree.fit(X_train.values, y_train)\nprint(\"Accuracy on training set:{:.5f}\".format(my_tree.score(X_train,y_train)))\nprint(\"Accuracy on test set:{:.5f}\".format(my_tree.score(X_test,y_test)))","aee56cd4":"export_graphviz(my_tree, out_file='tree.dot', class_names=[\"stay\", \"left\"], \n                feature_names=X.columns, impurity=False, filled=True)\nwith open(\"tree.dot\") as f:\n    dot_graph = f.read()\n\ngraphviz.Source(dot_graph)","71c0451e":"### \u4e94\u5e74\u5185\u662f\u5426\u5347\u804c \u767e\u5206\u6bd4\u5806\u79ef\u6761\u5f62\u56fe","d42d8fe7":"### \u9879\u76ee\u6570\u4e0e\u662f\u5426\u79bb\u804c\u767e\u5206\u6bd4\u5806\u79ef\u6761\u5f62\u56fe","3bff488f":"### \u7ee9\u6548\u8bc4\u4f30\u4e0e\u662f\u5426\u79bb\u804c\u7684\u7bb1\u7ebf\u56fe\n","e5711b7e":"### \u5e73\u5747\u5de5\u4f5c\u65f6\u957f\u4e0e\u662f\u5426\u79bb\u804c\u7bb1\u7ebf\u56fe","110bbafe":"## \u63cf\u8ff0\u6027\u5206\u6790","3508de71":"## \u4e00\u4e9b\u51fd\u6570\u51c6\u5907","cc78656b":"### \u79bb\u804c\u5458\u5de5\u5bf9\u516c\u53f8\u7684\u6ee1\u610f\u5ea6\u4e0e\u662f\u5426\u79bb\u804c\u7684\u7bb1\u7ebf\u56fe","624c1510":"## \u5bfc\u5165\u6570\u636e","dc885fb0":"### \u85aa\u8d44\u4e0e\u662f\u5426\u79bb\u804c\u767e\u5206\u6bd4\u6761\u5f62\u56fe","ddfc0e0d":"## \u51b3\u7b56\u6811\u5efa\u6a21","a68b5499":"### \u5de5\u4f5c\u5e74\u9650\u4e0e\u662f\u5426\u79bb\u804c\u7bb1\u7ebf\u56fe"}}