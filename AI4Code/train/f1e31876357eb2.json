{"cell_type":{"c79a62b1":"code","497b6ef9":"code","9363ff15":"code","32724f0a":"code","2e647d5a":"code","8bdb81ce":"code","506609cf":"code","f3f908df":"code","418b0401":"code","141ae664":"code","0e918c33":"code","43245e30":"code","5bfc71a5":"code","cc57a497":"code","8c336a80":"code","9a576391":"code","29e4577f":"code","be955a0d":"code","d15a6cbc":"code","96f7a272":"code","65ee8230":"code","a4648a0f":"code","67c128dc":"code","b7d1154c":"code","347034fd":"code","67d68232":"code","0f215059":"code","69a3a0b9":"code","4b73ba7c":"code","b68ca83a":"code","2b4813d9":"code","f09c6977":"code","05331568":"code","4ddf47d9":"code","d09b03df":"markdown","d6d93bb4":"markdown","693eba66":"markdown"},"source":{"c79a62b1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import model_selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import RobustScaler\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom sklearn.decomposition import PCA,KernelPCA\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom keras import Sequential\nfrom keras import layers\nfrom keras import backend as K\nfrom keras.layers.core import Dense\nfrom keras import regularizers\nfrom keras.layers import Dropout\nfrom keras.constraints import max_norm\nimport tensorflow as tf\nimport keras\nfrom lightgbm import LGBMClassifier\n\n\n# Data processing, metrics and modeling\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, StratifiedKFold,KFold\n\nfrom datetime import datetime\nfrom sklearn.metrics import precision_score, recall_score, confusion_matrix, accuracy_score, roc_auc_score, f1_score, roc_curve, auc,precision_recall_curve\nfrom sklearn import metrics\nfrom sklearn import preprocessing","497b6ef9":"train = pd.read_csv(\"..\/input\/india-ml-hiring-hackathon-2019\/train.csv\")\ntest = pd.read_csv(\"..\/input\/india-ml-hiring-hackathon-2019\/test.csv\")\nsub = pd.read_csv(\"..\/input\/india-ml-hiring-hackathon-2019\/sample_submission.csv\")","9363ff15":"# I have used pandans profiling for EDA , based on that we removed number_of_borrowers \ntrain = train.drop(['loan_id','number_of_borrowers'],axis=1)\ntest = test.drop(['loan_id','number_of_borrowers'],axis=1)","32724f0a":"target = train['m13']\ntrain=train.drop('m13',axis=1)","2e647d5a":"# Lets try something\n\ntrain.head()","8bdb81ce":"#train['LTV_by_DTI'] = train['loan_to_value'] \/ train['debt_to_income_ratio']\n#test['LTV_by_DTI'] = test['loan_to_value'] \/ test['debt_to_income_ratio']","506609cf":"train = pd.get_dummies(train)\ntest = pd.get_dummies(test)","f3f908df":"# Align train and test\n\ntrain_labels = target\n\n# Align the training and testing data, keep only columns present in both dataframes\ntrain_df, test_df = train.align(test, join = 'inner', axis = 1)\n\n# Add the target back in\ntrain_df['m13'] = train_labels\n\nprint('Training Features shape: ', train_df.shape)\nprint('Testing Features shape: ', test_df.shape)","418b0401":"from imblearn.under_sampling import TomekLinks","141ae664":"tl = TomekLinks()","0e918c33":"train_df = train_df.reindex(\n    np.random.permutation(train_df.index))","43245e30":"y = train_df['m13']\nX = train_df.drop('m13',axis=1)","5bfc71a5":"from imblearn.over_sampling import SVMSMOTE","cc57a497":"sm = SVMSMOTE(random_state=42)","8c336a80":"X_res, y_res = sm.fit_resample(X, y)","9a576391":"X_res, y_res = tl.fit_resample(X_res, y_res)","29e4577f":"X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.2, random_state=10,stratify=y_res)","be955a0d":"from sklearn.metrics import f1_score\n\ndef lgb_f1_score(y_hat, data):\n    y_true = data.get_label()\n    y_hat = np.round(y_hat) # scikits f1 doesn't like probabilities\n    return 'f1', f1_score(y_true, y_hat), True","d15a6cbc":"def run_lgb(X_train, X_test, y_train, y_test, test_df):\n    params = {\n        \"objective\" : \"binary\",\n       \"n_estimators\":10000,\n       \"reg_alpha\" : 2.0,\n       \"reg_lambda\":2.1,\n       \"n_jobs\":-1,\n       \"colsample_bytree\":.8,\n       \"min_child_weight\":0.8,\n       \"subsample\":0.8715623,\n       \"min_data_in_leaf\":20,\n       \"nthread\":4,\n       \"metric\" : \"f1\",\n       \"num_leaves\" : 100,\n       \"learning_rate\" : 0.01,\n       \"verbosity\" : -1,\n       \"seed\": 120,\n       \"max_bin\":60,\n       'max_depth':15,\n       'min_gain_to_split':.0222415,\n       'scale_pos_weight':1\n    }\n    \n    lgtrain = lgb.Dataset(X_train, label=y_train)\n    lgval = lgb.Dataset(X_test, label=y_test)\n    evals_result = {}\n    model = lgb.train(params, lgtrain, 10000, \n                      valid_sets=[lgtrain, lgval], \n                      early_stopping_rounds=100, \n                      verbose_eval=100, \n                      evals_result=evals_result,feval=lgb_f1_score)\n    \n    pred_test_y = model.predict(test_df, num_iteration=model.best_iteration)\n    return pred_test_y, model, evals_result","96f7a272":"pred_test, model, evals_result = run_lgb(X_train, X_test, y_train, y_test, test_df)\nprint(\"LightGBM Training Completed...\")","65ee8230":"sub['m13'] = pred_test","a4648a0f":"sub['m13'] = sub['m13'].apply(lambda x : 1 if (x>=0.40) else 0)","67c128dc":"sub['m13'].sum()","b7d1154c":"sub.to_csv('subm.csv',index=False)","347034fd":"from IPython.display import HTML \nimport pandas as pd \nimport numpy as np \nimport base64 ","67d68232":"def create_download_link(df, title = \"Download CSV file\", filename = \"subm.csv\"):\n    csv = df.to_csv(index=False)\n    b64 = base64.b64encode(csv.encode()) \n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>' \n    html = html.format(payload=payload,title=title,filename=filename) \n    return HTML(html)","0f215059":"create_download_link(sub)","69a3a0b9":"!pip install catboost","4b73ba7c":"import catboost\n\nclass ModelOptimizer:\n    best_score = None\n    opt = None\n    \n    def __init__(self, model, X_train, y_train, categorical_columns_indices=None, n_fold=3, seed=1994, early_stopping_rounds=30, is_stratified=True, is_shuffle=True):\n        self.model = model\n        self.X_train = X_train\n        self.y_train = y_train\n        self.categorical_columns_indices = categorical_columns_indices\n        self.n_fold = n_fold\n        self.seed = seed\n        self.early_stopping_rounds = early_stopping_rounds\n        self.is_stratified = is_stratified\n        self.is_shuffle = is_shuffle\n        \n        \n    def update_model(self, **kwargs):\n        for k, v in kwargs.items():\n            setattr(self.model, k, v)\n            \n    def evaluate_model(self):\n        pass\n    \n    def optimize(self, param_space, max_evals=10, n_random_starts=2):\n        start_time = time.time()\n        \n        @use_named_args(param_space)\n        def _minimize(**params):\n            self.model.set_params(**params)\n            return self.evaluate_model()\n        \n        opt = gp_minimize(_minimize, param_space, n_calls=max_evals, n_random_starts=n_random_starts, random_state=2405, n_jobs=-1)\n        best_values = opt.x\n        optimal_values = dict(zip([param.name for param in param_space], best_values))\n        best_score = opt.fun\n        self.best_score = best_score\n        self.opt = opt\n        \n        print('optimal_parameters: {}\\noptimal score: {}\\noptimization time: {}'.format(optimal_values, best_score, time.time() - start_time))\n        print('updating model with optimal values')\n        self.update_model(**optimal_values)\n        plot_convergence(opt)\n        return optimal_values\n    \nclass CatboostOptimizer(ModelOptimizer):\n    def evaluate_model(self):\n        validation_scores = catboost.cv(\n        catboost.Pool(self.X_train, \n                      self.y_train, \n                      cat_features=self.categorical_columns_indices),\n        self.model.get_params(), \n        nfold=self.n_fold,\n        stratified=self.is_stratified,\n        seed=self.seed,\n        early_stopping_rounds=self.early_stopping_rounds,\n        shuffle=self.is_shuffle,\n        verbose=100,\n        plot=False)\n        self.scores = validation_scores\n        test_scores = validation_scores.iloc[:, 2]\n        best_metric = test_scores.max()\n        return 1 - best_metric","b68ca83a":"!pip install scikit-optimize","2b4813d9":"from skopt import gp_minimize\nfrom skopt.space import Real, Integer\nfrom skopt.utils import use_named_args\nfrom skopt.plots import plot_convergence\nimport time","f09c6977":"import matplotlib.pyplot as plt\n%matplotlib inline\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import accuracy_score,confusion_matrix,roc_auc_score\nm=CatBoostClassifier(n_estimators=3000,random_state=1994,eval_metric='AUC',max_depth=12,learning_rate=0.029,od_wait=50\n                     ,l2_leaf_reg=5,bagging_temperature=0.85,random_strength=100,\n                     use_best_model=True)\nm.fit(X_train,y_train,eval_set=[(X_train,y_train),(X_test, y_test)], early_stopping_rounds=100,verbose=100)","05331568":"test_pred = m.predict(test_df)","4ddf47d9":"test_pred.sum()","d09b03df":"## Catbooster","d6d93bb4":"# Analytics Vidya India ML Hiring Hackathon 2019\n\n<h2 id=\"problem-statement\">Problem Statement<\/h2>\n<div class=\"page\" title=\"Page 1\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<h2 id=\"loan-delinquency-prediction\">Loan Delinquency Prediction<\/h2>\nLoan default prediction is one of the most critical and crucial problem faced by financial institutions and organizations as it has a noteworthy effect on the profitability of these institutions. In recent years, there is a tremendous increase in the volume of non &ndash; performing loans which results in a jeopardizing effect on the growth of these institutions.&nbsp;\n<p>Therefore, to maintain a healthy portfolio, the banks put stringent monitoring and evaluation measures in place to ensure timely repayment of loans by borrowers. Despite these measures, a major proportion of loans become delinquent. Delinquency occurs when a borrower misses a payment against his\/her loan.<\/p>\n<p>Given the information like mortgage details, borrowers related details and payment details, our objective is to identify the delinquency status of loans for the next month given the delinquency status for the previous 12 months (in number of months)<\/p>\n<h2 id=\"data-description\">Data Description<\/h2>\n<\/div>\n<\/div>\n* * <\/div>\n<\/div>\n<h3 id=\"trainzip\">train.zip<\/h3>\n<p>train.zip contains train.csv.&nbsp;<strong>train.csv<\/strong>&nbsp;contains the training data with details on loan as described in the last section<\/p>\n<h3 id=\"data-dictionary\">Data Dictionary<\/h3>\n<table dir=\"ltr\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\"><colgroup><col width=\"100\" \/><col width=\"368\" \/><\/colgroup>\n<tbody>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Variable&quot;}\"><strong>Variable<\/strong><\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Description&quot;}\"><strong>Description<\/strong><\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;loan_id&quot;}\">loan_id<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Unique loan ID&quot;}\">Unique loan ID<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;source&quot;}\">source<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Loan origination channel&quot;}\">Loan origination channel<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;financial_institution&quot;}\">financial_institution<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Name of the bank&quot;}\">Name of the bank<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;interest_rate&quot;}\">interest_rate<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Loan interest rate&quot;}\">Loan interest rate<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;unpaid_principal_bal&quot;}\">unpaid_principal_bal<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Loan unpaid principal balance&quot;}\">Loan unpaid principal balance<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;loan_term&quot;}\">loan_term<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Loan term (in days)&quot;}\">Loan term (in days)<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;origination_date&quot;}\">origination_date<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Loan origination date&quot;}\">Loan origination date (YYYY-MM-DD)<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;first_payment_date&quot;}\">first_payment_date<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;First instalment payment date&quot;}\">First instalment payment date<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;loan_to_value&quot;}\">loan_to_value<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Loan to value ratio&quot;}\">Loan to value ratio<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;number_of_borrowers&quot;}\">number_of_borrowers<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Number of borrowers&quot;}\">Number of borrowers<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;debt_to_income_ratio&quot;}\">debt_to_income_ratio<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Debt-to-income ratio&quot;}\">Debt-to-income ratio<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;borrower_credit_score&quot;}\">borrower_credit_score<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Borrower credit score&quot;}\">Borrower credit score<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;loan_purpose&quot;}\">loan_purpose<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Loan purpose&quot;}\">Loan purpose<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;insurance_percent&quot;}\">insurance_percent<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Mortgage insurance percent&quot;}\">Loan Amount percent covered by insurance<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;co-borrower_credit_score&quot;}\">co-borrower_credit_score<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Co-borrower credit score&quot;}\">Co-borrower credit score<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;insurance_type&quot;}\">insurance_type<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Mortgage insurance type&quot;}\">0 - Premium paid by borrower, 1 - Premium paid by Lender<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;m1 to m12&quot;}\">m1 to m12<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;Month-wise loan performance (deliquency in months)&quot;}\">Month-wise loan performance (deliquency in months)<\/td>\n<\/tr>\n<tr>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;m13&quot;}\">m13<\/td>\n<td data-sheets-value=\"{&quot;1&quot;:2,&quot;2&quot;:&quot;target, loan deliquency status (0 = non deliquent, 1 = deliquent)&quot;}\">target, loan deliquency status (0 = non deliquent, 1 = deliquent)<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"testzip\"><br \/>test.zip<\/h3>\n<p>test.zip contains test.csv which has details of all loans for which the participants are to submit the delinquency status - 0\/1 (not probability)<\/p>\n<h3 id=\"sample_submissionzip\">sample_submission.zip<\/h3>\n<p>sample_submission.zip contains the submission format for the predictions against the test set. A single csv needs to be submitted as a solution.<\/p>\n<div class=\"page\" title=\"Page 1\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<h2 id=\"evaluation-metric\">Evaluation Metric<\/h2>\nSubmissions are evaluated on F1-Score between the predicted class and the observed target.<\/div>\n<div class=\"column\">&nbsp;<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"page\" title=\"Page 2\">\n<h2 id=\"public-and-private-split\">Public and Private Split<\/h2>\nTest data is further randomly divided into Public (40%) and Private (60%) data.\n<ul>\n<li>Your initial responses will be checked and scored on the Public data.<\/li>\n<li>The final rankings would be based on your private score which will be published once the competition is over.<\/li>\n<\/ul>\n<h2 id=\"hackathon-rules\">Hackathon Rules<\/h2>\n<ol>\n<li>Setting the final submission is mandatory. Without a final submission, the submission corresponding to best public score will be taken as final submission<\/li>\n<li>Use of external datasets is not allowed<\/li>\n<li>Use of loan_id variable as an input to the model is not allowed<\/li>\n<li>You can only make 15 submissions per day<\/li>\n<li>Code file is mandatory while setting&nbsp;final submission. For GUI based tools, please upload a zip file of snapshots of steps taken by you, else upload code file.<\/li>\n<li>The code file uploaded should be pertaining to your final submission.<\/li>\n<li>No submission will be accepted after the contest deadline<\/li>\n<\/ol>\n<\/div>\n<p>&nbsp;<\/p>\n\n# LB Score 0.34\n","693eba66":"## F1 score of this solution was 0.34 and had 50th Rank on LB"}}