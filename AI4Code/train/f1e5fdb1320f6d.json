{"cell_type":{"6fc5b443":"code","02921760":"code","0fd133b8":"code","9e6543f5":"code","7c5f5c78":"code","2c9f9834":"code","b100d8fc":"code","23d22b2c":"code","fe8727fd":"code","7e3c6407":"code","896ee765":"code","d97ebfcc":"code","c308ba77":"code","0862a372":"code","988b3a3d":"code","19a040a1":"code","d149a17c":"markdown","319b06d0":"markdown","d885d54b":"markdown","0015af2d":"markdown","2ee5f261":"markdown","71ad57f5":"markdown","ffa28b32":"markdown","a21ca9d4":"markdown","4106d936":"markdown","484501ce":"markdown","45a6cc7a":"markdown","7766862e":"markdown","7bafec21":"markdown","e2c769ac":"markdown"},"source":{"6fc5b443":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","02921760":"# Ex: Shipping cost data w\/ distance & duration as x\nY = [230,70,150,170,230,220,100,140,200,190] #cost($)\nx1 = [1050,236,417,620,837,709,412,646,738,613] #distance(mile)\nx2 = [7,3,2,4,6,5,3,3,4,3] #duration(hour)","0fd133b8":"df = pd.DataFrame({'Y':Y,'x1':x1,'x2':x2})\ndf","9e6543f5":"x = df.drop(['Y'],axis=1)\ny = df['Y']","7c5f5c78":"matrix_a = []\nfor i in range(len(x.columns)+1):\n    line = []\n    if i == 0:\n        for j in range(len(x.columns)+1):\n            if j == 0:\n                line.append(len(x))\n            else:\n                line.append(sum(x.iloc[:,j-1]))\n    else:\n        for j in range(len(x.columns)+1):\n            if j == 0:\n                line.append(sum(x.iloc[:,i-1]))\n            elif j == i:\n                square = sum(x.iloc[:,i-1]**2)\n                line.append(square)\n            else:\n                multiply = sum(x.iloc[:,i-1]*x.iloc[:,j-1])\n                line.append(multiply)\n    matrix_a.append(line)\nmatrix_a","2c9f9834":"matrix_h = []\nfor i in range(len(x.columns)+1):\n    if i == 0:\n        matrix_h.append(sum(y))\n    else:\n        matrix_h.append(sum(y*x.iloc[:,i-1]))\nmatrix_h","b100d8fc":"matrix = []\nfor i in range(len(x.columns)+1):\n    array = np.array(matrix_a)\n    array[:,i] = matrix_h\n    matrix.append(array)\nmatrix","23d22b2c":"matrix_det = []\nfor i in range(len(x.columns)+2):\n    if i == 0:\n        array = np.array(matrix_a)\n        det_a = np.linalg.det(array)\n        matrix_det.append(det_a)\n    else:\n        array = matrix[i-1]\n        det_a = np.linalg.det(array)\n        matrix_det.append(det_a)\nmatrix_det","fe8727fd":"coefficient = []\nfor i in range(len(matrix_det)):\n    if i == 0:\n        continue\n    else:\n        result = matrix_det[i]\/matrix_det[0]\n        coefficient.append(result)\n\na = coefficient[0]\nb = []\nfor i in range(1,len(coefficient)):\n    b.append(coefficient[i])    \na #constant\/intercept","7e3c6407":"b #coefficient\/slope","896ee765":"y_hat = []\nfor i in range(len(x)):\n    slope_var = []\n    for j in range(len(x.columns)):\n        multiply = x.iloc[i][j]*b[j]\n        slope_var.append(multiply)\n    result = a + sum(slope_var)\n    y_hat.append(result)\ny_hat","d97ebfcc":"sst,sse = [],[]\nfor i in range(len(y)):\n    mean_min = (y.tolist()[i]-sum(y)\/len(y))**2\n    sst.append(mean_min)\nfor i in range(len(y)):\n    hat_min = (y.tolist()[i]-y_hat[i])**2\n    sse.append(hat_min)\nr_square = 1-(sum(sse)\/sum(sst))\nr_square","c308ba77":"multiple_r = r_square**(1\/2)\nmultiple_r","0862a372":"x1 = [927,496,715,789,537,428,920,997,613,728] #distance(mile)\nx2 = [6,4,5,6,6,2,5,8,7,3] #duration(hour)","988b3a3d":"x = pd.DataFrame({'x1':x1,'x2':x2})\nx","19a040a1":"prediction = []\nfor i in range(len(x)):\n    slope_var = []\n    for j in range(len(x.columns)):\n        multiply = x.iloc[i][j]*b[j]\n        slope_var.append(multiply)\n    result = a + sum(slope_var)\n    prediction.append(result)    \nprediction","d149a17c":"### **Predict The Value of The Dependent Variable from The Given Test Data Using The Previous Train Data Regression Model**","319b06d0":"### **Calculate and Find The Determination Coefficient from Actual Dependent Value and Prediction Value**","d885d54b":"### **Separate Between The Independent Variable (x) and The Dependent Variable (y)**","0015af2d":"### **Calculate and Find The Correlation Coefficient Value from Determination Coefficient Value**","2ee5f261":"### **Replace Each Column on Matrix A by Matrix H Sequently**","71ad57f5":"### **Create Determinant of Matrix A and Each of Subtituded Array of Matrix A**","ffa28b32":"## **LINEAR REGRESSOR**\n#### Numerical statistic prediction using linear regression by determinant matrix method with intercept, slope, correlation coefficient, and determination coefficient calculations\n##### Install library package here https:\/\/pypi.org\/project\/linearregressor\/","a21ca9d4":"### **Import Module Package**","4106d936":"### **Create Test Data from Another Value of Independent Variable**","484501ce":"### **Create Variable Data Frame**","45a6cc7a":"### **Calculate and Find The Intercept and Slope Value of The Data Frame**","7766862e":"### **Create Matrix H of The Known Both Dependent and Independent Variables**","7bafec21":"### **Create Matrix A of The Known Independent Variables**","e2c769ac":"### **Predict The Dependent Variable Prediction Value**"}}