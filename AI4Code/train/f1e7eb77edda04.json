{"cell_type":{"3a55509a":"code","cd60ee9c":"code","54d6bc45":"code","e3350b25":"code","765f5ea2":"code","096a604c":"code","c4ddee46":"code","5ec8f021":"code","7be785df":"code","485e01fa":"code","3de231af":"code","cafedc9a":"code","d7147379":"code","9e8c87d3":"code","8c9e1de2":"code","fc0d2eb3":"code","45a559c1":"code","22074271":"code","73d76646":"code","3d3cffe9":"code","28edb945":"markdown","d1c7bae5":"markdown","a4123268":"markdown","ac41c50b":"markdown","35c6b6ff":"markdown"},"source":{"3a55509a":"import numpy as np\nimport pandas as pd\nfrom PIL import Image","cd60ee9c":"df = pd.read_csv('..\/input\/gtsrb-german-traffic-sign\/Train.csv')\ndf_test = pd.read_csv('..\/input\/gtsrb-german-traffic-sign\/Test.csv')","54d6bc45":"df.head()","e3350b25":"#Contains Path to each image directory\n#Class id is the target variable","765f5ea2":"df.info()","096a604c":"df.isnull().sum()","c4ddee46":"#Path is type of object , need to convert it to string for accessing images through it.","5ec8f021":"df_test.head()","7be785df":"df_test.isnull().sum()","485e01fa":"meta = pd.read_csv('..\/input\/gtsrb-german-traffic-sign\/Meta.csv')","3de231af":"meta.head()","cafedc9a":"import keras \nfrom matplotlib import pyplot as plt\nfrom keras.applications import Xception","d7147379":"model = keras.models.Sequential([\n    Xception(include_top=False, weights=None, input_shape=(299, 299, 3), pooling='avg'),\n    keras.layers.Dense(43),\n    keras.layers.Softmax()]\n    )\nmodel.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","9e8c87d3":"# model = Sequential()\n# model.add(Xception(include_top=False, weights=None, input_shape=(299, 299, 3), pooling='avg'))\n# model.add(Dense(43))\n# model.add(Softmax())\n# model.compile(\n#     loss='categorical_crossentropy',\n#     optimizer='adam',\n#     metrics=['accuracy']\n# )\nmodel.summary()","8c9e1de2":"df['ClassId'] = df['ClassId'].astype(str)\ndf_test['ClassId'] = df_test['ClassId'].astype(str)\nfor i in range(0, len(df['ClassId'])):\n    if len(df['ClassId'][i]) == 1:\n        df['ClassId'][i] = '0' + df['ClassId'][i]\nfor i in range(0, len(df_test['ClassId'])):\n    if len(df_test['ClassId'][i]) == 1:\n        df_test['ClassId'][i] = '0' + df['ClassId'][i]\n\nprint(df['ClassId'][20], df['Path'][20])\nimg = Image.open('..\/input\/gtsrb-german-traffic-sign\/' + df['Path'][20])\nplt.imshow(img)","fc0d2eb3":"gen_train = keras.preprocessing.image.ImageDataGenerator(rescale=1.\/255,shear_range=0.2)\ngen_test = keras.preprocessing.image.ImageDataGenerator(rescale=1.\/255)\ngenerator_train = gen_train.flow_from_dataframe(dataframe=df,\n                                                directory='..\/input\/gtsrb-german-traffic-sign\/',\n                                                target_size=(299, 299),\n                                                x_col='Path',\n                                                y_col='ClassId',\n                                                batch_size=32,\n                                                class_mode='categorical'\n                                                )","45a559c1":"generator_test = gen_test.flow_from_dataframe(dataframe=df_test,\n                                            directory='..\/input\/gtsrb-german-traffic-sign\/',\n                                            x_col='Path',\n                                            y_col='ClassId',\n                                            target_size=(299, 299),\n                                            batch_size=16,\n                                            class_mode='categorical'\n                                            )","22074271":"history = model.fit(generator_train, epochs=2, verbose=1)","73d76646":"model.evaluate(generator_test, verbose=1)","3d3cffe9":"batch = 2\nplt.figure(figsize=(64, 64))\nplt.tight_layout()\nfor i in range(0, 16):\n    plt.subplot(16, 2, 2 * i + 1), plt.axis('off')\n    plt.imshow(generator_test[batch][0][i])\n    pre = model.predict_classes(generator_test[batch][0])\n    img = Image.open('..\/input\/gtsrb-german-traffic-sign\/Meta\/' + str(pre[i]) + '.png')\n    plt.subplot(16, 2, 2 * i + 2), plt.axis('off')\n    plt.imshow(img)","28edb945":"## Preparing data for model training","d1c7bae5":"# Task 3 Traffic Sign Classification \/ Recognition System","a4123268":"## Building model","ac41c50b":"## Loading files","35c6b6ff":"## Training model"}}