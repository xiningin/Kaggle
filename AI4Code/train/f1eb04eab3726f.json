{"cell_type":{"02b59135":"code","808b27f4":"code","0edd9456":"code","423cdf93":"code","b9f83cda":"code","d445bbc1":"code","84760da5":"code","70af3d93":"code","b90f63bc":"code","448b0ce7":"code","d61e10cd":"code","a8c980da":"code","f2e87c01":"code","e2325aab":"code","b142f5bd":"code","8e98d7df":"code","81693607":"code","baf86ad4":"code","8d1342f0":"code","fd82d870":"markdown","f3ff89bf":"markdown","a9af3c08":"markdown","4d7ca9c6":"markdown"},"source":{"02b59135":"import tensorflow as tf\nimport pandas as pd\nimport numpy as np\nfrom tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras.layers import Input, Conv2D, Dense, Flatten, BatchNormalization, Dropout\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sbn\n%matplotlib inline","808b27f4":"X = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\nX_test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nX.shape, X_test.shape","0edd9456":"X_train = X.drop(['label'],1)\nY_train = X['label']\nX_train.shape","423cdf93":"K = len(set(Y_train))      ###### Number Of Labels\nprint(K)\nsbn.countplot(Y_train)","b9f83cda":"#  Reshaping Data\nX_train = np.asarray(X_train)\nX_test = np.asarray(X_test)\nX_train.shape, X_test.shape","d445bbc1":"# Normalizing and Reshaping Data\nX_train = X_train.astype('float32')\nX_test = X_test.astype('float32')\nX_train = X_train\/255\nX_test = X_test\/255\nX_train = X_train.reshape(-1, 28, 28, 1)\nX_test = X_test.reshape(-1,28 ,28, 1)\nX_train.shape, X_test.shape\n","84760da5":"# one hot encoding y data\nY_train= tf.keras.utils.to_categorical(Y_train, 10)\nY_train.shape","70af3d93":"# Spliting X_train Set into training set and validation test\nx_train, val_x, y_train, val_y = train_test_split(X_train, Y_train, test_size=0.20)","b90f63bc":"datagen = ImageDataGenerator(zoom_range = 0.1,\n                            height_shift_range = 0.1,\n                            width_shift_range = 0.1,\n                            rotation_range = 15)","448b0ce7":"es = EarlyStopping(monitor='loss', patience=12)\nfilepath=\"\/kaggle\/working\/bestmodel.h5\"\nmd = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')","d61e10cd":"# Important Variables\nepochs = 30\nnum_classes = 10\nbatch_size = 128\ninput_shape = (28, 28, 1)\nadam = tf.keras.optimizers.Adam(0.001)","a8c980da":"i = Input(shape=input_shape)\nx = Conv2D(32, (3, 3), strides=2, activation='relu')(i)\nx = Conv2D(64, (3, 3), strides=2, activation='relu')(x)\n#x = Conv2D(32, (3, 3), strides=2, activation='relu')(x)\nx = Flatten()(x)\nx = Dropout(0.2)(x)\nx = Dense(1024, activation='relu')(x)\nx = Dropout(0.2)(x)\nx = Dense(K, activation='softmax')(x)\n\nmodel = Model(i, x)\nmodel.summary()","f2e87c01":"# Compiling Model\nmodel.compile(optimizer=adam,\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])","e2325aab":"# Fit Model\nHistory = model.fit_generator(datagen.flow(x_train, y_train, batch_size=batch_size),\n          epochs = epochs,\n          validation_data = (val_x, val_y),\n          callbacks = [es,md],\n          shuffle = True\n        )","b142f5bd":"# Plot loss per iteration\nimport matplotlib.pyplot as plt\nplt.plot(History.history['loss'], label='loss')\nplt.plot(History.history['val_loss'], label='val_loss')\nplt.legend()","8e98d7df":"# Plot accuracy per iteration\nplt.plot(History.history['accuracy'], label='acc')\nplt.plot(History.history['val_accuracy'], label='val_acc')\nplt.legend()","81693607":"## Loading Model and Making Prediction\n\n\nmodel1 = load_model(\"\/kaggle\/working\/bestmodel.h5\")\nmodel1.summary()","baf86ad4":"pred = model1.predict(X_test)\npred_class = np.argmax(pred,axis=1)\n\n\n\n","8d1342f0":"submissions=pd.DataFrame({\"ImageId\": list(range(1,len(pred_class)+1)),\n                         \"Label\": pred_class})\nsubmissions.to_csv(\"submissions.csv\", index=False, header=True)\nsubmissions\n","fd82d870":"## **4. Building Model with Basic Functional API**","f3ff89bf":"## **1. Importing Libraries**","a9af3c08":"## **3. Data Agumentation and Some Traps**","4d7ca9c6":"## **2. Loading & Processing data**"}}