{"cell_type":{"a3db68fc":"code","d64ce19c":"code","1a90d72e":"code","2177f345":"code","94a46718":"code","4e1948c1":"code","6f08830d":"code","5b65e1c8":"code","81ed7db3":"code","c03a6f7f":"code","98c99424":"code","bf7e122a":"code","08b1c72e":"code","cc3b4664":"code","16d68f4d":"markdown","047f5c6f":"markdown","d3f41b99":"markdown","c68e5910":"markdown","5778e743":"markdown","2686a833":"markdown","69b3fc90":"markdown","35247d58":"markdown","87b238e5":"markdown","add04a9e":"markdown","cbf740c6":"markdown","c52785b3":"markdown"},"source":{"a3db68fc":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-bright')\nfrom sklearn.neighbors import NearestNeighbors\nfrom fuzzywuzzy import process\n%matplotlib inline ","d64ce19c":"ratings_data = pd.read_csv(\"..\/input\/the-movies-dataset\/ratings_small.csv\")\nratings_data = ratings_data.drop('timestamp', axis = 1)\nratings_data.head()","1a90d72e":"movie_names = pd.read_csv(\"..\/input\/the-movies-dataset\/movies_metadata.csv\")\nmovie_names = movie_names[['title', 'genres']]\nmovie_names.head()","2177f345":"movie_names.info()","94a46718":"# movie_data = ratings_data.merge(movie_names, on='movieId')\nmovie_data = pd.concat([ratings_data, movie_names], axis=1)\nmovie_data.head()","4e1948c1":"trend = pd.DataFrame(movie_data.groupby('title')['rating'].mean())\ntrend['total number of ratings'] = pd.DataFrame(movie_data.groupby('title')['rating'].count()) \n\ntrend.head()","6f08830d":"#plot rounded-up ratings with number of movies\nplt.figure(figsize =(10, 4))\nax=plt.barh(trend['rating'].round(),trend['total number of ratings'],color='b')\nplt.show()","5b65e1c8":"# Calculate mean rating of all movies and check the popular high rating movies\nmovie_data.groupby('title')['rating'].mean().sort_values(ascending=False).head(10)","81ed7db3":"movies_users = ratings_data.pivot(index=['userId'], columns=['movieId'], values='rating').fillna(0)\nmovies_users","c03a6f7f":"from scipy.sparse import csr_matrix\nmat_movies_users=csr_matrix(movies_users.values)\nmat_movies_users","98c99424":"# Cosine Similarity\nmodel_knn= NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=20, n_jobs=-1)","bf7e122a":"model_knn.fit(mat_movies_users)","08b1c72e":"def Recommender(movie_name, data, model, n_recommendations):\n    model.fit(data)\n    movie_index = process.extractOne(movie_name, movie_names['title'])[2]\n    print('Movie Selected: ',movie_names['title'][movie_index], ', Index: ', movie_index)\n    print('Searching for recommendations.....')\n    distances, indices = model.kneighbors(data[movie_index], n_neighbors=n_recommendations)\n    recc_movie_indices = sorted(list(zip(indices.squeeze().tolist(),distances.squeeze().tolist())),key=lambda x: x[1])[:0:-1]\n    recommend_frame = []\n    for val in recc_movie_indices:\n#         print(movie_names['title'][val[0]])\n        recommend_frame.append({'Title':movie_names['title'][val[0]],'Distance':val[1]})\n    \n    df = pd.DataFrame(recommend_frame, index = range(1,n_recommendations))\n     \n    return df","cc3b4664":"n_recommendations = 20\nRecommender('Jumanji', mat_movies_users, model_knn, n_recommendations)","16d68f4d":"![](https:\/\/editor.analyticsvidhya.com\/uploads\/88506recommendation%20system.png)","047f5c6f":"![](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/_images\/reshaping_pivot.png)","d3f41b99":"**What are the different filtration strategies?**","c68e5910":"The above recommendation system uses item to item collaborative approach. This system is the simpleset implementation of recommendation system and need a lot of tuning.Also the system's first recommendations will always be the popular movies which are voted by nore people so a change can also be made there.","5778e743":"**What is a Recommendation System?**\n\nSimply put a Recommendation System is a filtration program whose prime goal is to predict the \u201crating\u201d or \u201cpreference\u201d of a user towards a domain-specific item or item. In our case, this domain-specific item is a movie, therefore the main focus of our recommendation system is to filter and predict only those movies which a user would prefer given some data about the user him or herself.","2686a833":"Our final_dataset has dimensions of 671 \u00d7 9066 where most of the values are sparse. We are using only a small dataset but for the original large dataset of movie lens which has more than 100000 features, our system may run out of computational resources when that is feed to the model. To reduce the sparsity we use the csr_matrix function from the scipy library.","69b3fc90":"**Summary**","35247d58":"**Pivoting**","87b238e5":"**Removing sparsity**","add04a9e":"**Collaborative Filtering**\n\nThis filtration strategy is based on the combination of the user\u2019s behavior and comparing and contrasting that with other users\u2019 behavior in the database. The history of all users plays an important role in this algorithm. The main difference between content-based filtering and collaborative filtering that in the latter, the interaction of all users with the items influences the recommendation algorithm while for content-based filtering only the concerned user\u2019s data is taken into account.\nThere are multiple ways to implement collaborative filtering but the main concept to be grasped is that in collaborative filtering multiple user\u2019s data influences the outcome of the recommendation. and doesn\u2019t depend on only one user\u2019s data for modeling.","cbf740c6":"**Let\u2019s start coding up our own Movie recommendation system**","c52785b3":"Pivot Table : A pivot table is a table of statistics that summarizes the data of a more extensive table. This summary might include sums, averages, or other statistics, which the pivot table groups together in a meaningful way. Pivot tables are a technique in data processing."}}