{"cell_type":{"593e5e47":"code","b22f31ea":"code","158e37f7":"code","252676e0":"code","e858d27f":"code","a130c536":"code","17f8cc7d":"code","1f330b5e":"code","f9e609bb":"code","37b0e967":"code","90eabbd4":"code","0063886a":"code","2f39a3c9":"code","90235bbc":"code","8b9c962d":"code","7ab32d66":"code","170eb8d9":"code","81cef2ab":"code","a9452a63":"code","a8d9e2c8":"code","f12368ff":"code","31b6e2ee":"code","3401c462":"markdown","4840aeee":"markdown"},"source":{"593e5e47":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import tree\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b22f31ea":"data = pd.read_csv('..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\nprint('\u0412\u0445\u0456\u0434\u043d\u0456 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438 -  fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, alcohol')\nprint('\u0412\u0438\u0445\u0456\u0434\u043d\u0456 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438 - quality')\ndata.head()","158e37f7":"if True in pd.isnull(data):\n    print('Null values in data, alert!!!')\nelse: print('\u041d\u0435\u043f\u043e\u0432\u043d\u0438\u0445 \u0437\u0440\u0430\u0437\u043a\u0456\u0432 \u0434\u0430\u043d\u0438\u0445 \u043d\u0435\u043c\u0430\u0454')\ndata.describe()","252676e0":"print('\u0412\u0441\u0456 \u0437\u0430\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0456 \u043c\u0456\u0436 \u0434\u0430\u043d\u0438\u043c\u0438 \u043c\u043e\u0436\u0435\u043c\u043e \u0431\u0430\u0447\u0438\u0442\u0438 \u043d\u0430 \u0433\u0440\u0430\u0444\u0456\u043a\u0430\u0445')\nprint('\u0422\u0430\u043a \u044f\u043a \u043c\u0430\u0454\u043c\u043e \u0432\u0441\u044c\u043e\u0433\u043e 6 \u043e\u0446i\u043d\u043e\u043a, \u0442\u043e \u043c\u0430\u0454\u043c\u043e \u0441\u043f\u0440\u0430\u0432\u0443 i\u0437 \u0437\u0430\u0434\u0430\u0447\u0435\u044e \u043a\u043b\u0430\u0441\u0438\u0444i\u043a\u0430\u0446i\u0457')\nsns.pairplot(data=data, hue='quality')","e858d27f":"data = data[data['total sulfur dioxide']<data['total sulfur dioxide'].quantile(0.99)]\ndata = data[data['citric acid']<data['citric acid'].quantile(0.99)]\ndata = data[data['alcohol']<data['alcohol'].quantile(0.99)]","a130c536":"Y = data['quality']\nX = data.drop('quality', axis=1)\ndel(data)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=228)","17f8cc7d":"print(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","1f330b5e":"dtc1 = DecisionTreeClassifier().fit(X_train, Y_train)\nprint(classification_report(Y_test, dtc1.predict(X_test)))","f9e609bb":"plot_tree(dtc1, filled=True)\nplt.show()","37b0e967":"dtc2 = DecisionTreeClassifier(criterion='entropy', max_features=None).fit(X_train, Y_train)\nprint(classification_report(Y_test, dtc2.predict(X_test)))\nprint('Depth: ', dtc2.get_depth())\nprint('Number of leaves: ', dtc2.get_n_leaves())","90eabbd4":"rfc1 = RandomForestClassifier(n_estimators=150, random_state=0).fit(X_train, Y_train)\nprint(classification_report(Y_test, rfc1.predict(X_test)))","0063886a":"rfc2 = RandomForestClassifier(n_estimators=150,criterion='entropy').fit(X_train, Y_train)\nprint(classification_report(Y_test, rfc2.predict(X_test)))","2f39a3c9":"from sklearn.decomposition import PCA\nX_PCA = PCA(n_components = 2).fit_transform(X)\nPCA_data = pd.DataFrame(data = X_PCA_pl, columns = ['PC1', 'PC2'])\nPCA_data['quality'] = Y","90235bbc":"sns.pairplot(PCA_data, hue='quality')","8b9c962d":"from sklearn.cluster import KMeans\ndata_clstr = PCA_data.drop('quality', axis=1)","7ab32d66":"kmeans = KMeans(n_clusters=4, random_state=0).fit(X)\ndata_clstr['quality'] = kmeans.labels_","170eb8d9":"sns.pairplot(data_clstr, hue='quality')","81cef2ab":"mlp1 = MLPClassifier(random_state=1, hidden_layer_sizes = 200, max_iter=500, activation='relu').fit(X_train, Y_train)\nprint('\u041ai\u043b\u044c\u043ai\u0441\u0442\u044c \u0448\u0430\u0440i\u0432: ', mlp1.n_layers_)\nprint('\u0422\u043e\u0447\u043di\u0441\u0442\u044c: ', mlp1.score(X_test, Y_test))\nprint('\u0412\u0441\u044f i\u043d\u0444\u043e\u0440\u043c\u0430\u0446i\u044f \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444i\u043a\u0430\u0446i: \\n', classification_report(Y_test, mlp1.predict(X_test)))","a9452a63":"mlp2 = MLPClassifier(random_state=1, hidden_layer_sizes = 200, max_iter=500, activation='logistic').fit(X_train, Y_train)\nprint('\u041ai\u043b\u044c\u043ai\u0441\u0442\u044c \u0448\u0430\u0440i\u0432: ', mlp2.n_layers_)\nprint('\u0422\u043e\u0447\u043di\u0441\u0442\u044c: ', mlp2.score(X_test, Y_test))\nprint('\u0412\u0441\u044f i\u043d\u0444\u043e\u0440\u043c\u0430\u0446i\u044f \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444i\u043a\u0430\u0446i: \\n', classification_report(Y_test, mlp2.predict(X_test)))","a8d9e2c8":"mlp3 = MLPClassifier(random_state=1, hidden_layer_sizes = (1000, 1000), max_iter=500, activation='logistic').fit(X_train, Y_train)\nprint('\u041ai\u043b\u044c\u043ai\u0441\u0442\u044c \u0448\u0430\u0440i\u0432: ', mlp3.n_layers_)\nprint('\u0422\u043e\u0447\u043di\u0441\u0442\u044c: ', mlp3.score(X_test, Y_test))\nprint('\u0412\u0441\u044f i\u043d\u0444\u043e\u0440\u043c\u0430\u0446i\u044f \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444i\u043a\u0430\u0446i: \\n', classification_report(Y_test, mlp3.predict(X_test)))","f12368ff":"mlp4 = MLPClassifier(random_state=1, hidden_layer_sizes = (500, 400, 200, 100, 50), max_iter=500, activation='logistic').fit(X_train, Y_train)\nprint('\u041ai\u043b\u044c\u043ai\u0441\u0442\u044c \u0448\u0430\u0440i\u0432: ', mlp4.n_layers_)\nprint('\u0422\u043e\u0447\u043di\u0441\u0442\u044c: ', mlp4.score(X_test, Y_test))\nprint('\u0412\u0441\u044f i\u043d\u0444\u043e\u0440\u043c\u0430\u0446i\u044f \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444i\u043a\u0430\u0446i: \\n', classification_report(Y_test, mlp4.predict(X_test)))","31b6e2ee":"mlp5 = MLPClassifier(random_state=1, hidden_layer_sizes = (500, 400, 300, 200, 100, 50, 20), max_iter=500, activation='relu').fit(X_train, Y_train)\nprint('\u041ai\u043b\u044c\u043ai\u0441\u0442\u044c \u0448\u0430\u0440i\u0432: ', mlp5.n_layers_)\nprint('\u0422\u043e\u0447\u043di\u0441\u0442\u044c: ', mlp5.score(X_test, Y_test))\nprint('\u0412\u0441\u044f i\u043d\u0444\u043e\u0440\u043c\u0430\u0446i\u044f \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444i\u043a\u0430\u0446i: \\n', classification_report(Y_test, mlp5.predict(X_test)))","3401c462":"# 5 Lab","4840aeee":"# 3 Lab"}}