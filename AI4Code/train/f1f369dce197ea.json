{"cell_type":{"b76f50f8":"code","d50a8c5b":"code","bf070a2f":"code","47b08dbb":"code","32bb460c":"code","f6802fb9":"code","9992d96f":"code","dafe8391":"code","306c050b":"code","60b2643d":"code","bbf93100":"code","f235c7ae":"code","f443ac80":"code","97fadbef":"code","2b7801bb":"code","58c369d1":"code","c289fc70":"code","ed1769cf":"code","b2183a40":"code","db35c775":"code","8427cf60":"code","82fb6323":"code","cc87704b":"code","10397cea":"code","280caae0":"code","f306c717":"code","0d323942":"code","e433ac1b":"code","f465fe3c":"code","d2994767":"code","f2d329bc":"code","31c48ab8":"code","5166557e":"code","a8d8b536":"code","326b4b73":"code","40d760bb":"code","008f0804":"code","8e1a3f59":"code","25d54de8":"code","228627b4":"code","6bda8f6e":"code","bad5bb54":"code","2e67fbf6":"code","48b8acb8":"code","10599555":"code","d0db546d":"code","69a4d6c6":"code","93c6ac7a":"code","575a284f":"code","ca9265b7":"code","48a6ef2a":"code","78933bac":"code","7a86d8b3":"code","f34ee712":"code","14e1ea40":"code","29de2140":"code","688d5bb8":"code","380f481d":"code","58bdd3f7":"code","e809e7d4":"code","d922a7b7":"code","770c1d88":"code","a00fc411":"code","75bdd260":"code","43dab3ed":"code","71aca7c2":"code","a6b482b3":"code","93393f2e":"code","360f6a7f":"code","55af98b7":"code","ad66428f":"code","15c1ad50":"code","d9f23441":"code","9c252e12":"code","2cbba002":"markdown","376dd4c6":"markdown","757df68f":"markdown","f1c5e7c5":"markdown","c3b49482":"markdown","63697615":"markdown","4f728e3a":"markdown"},"source":{"b76f50f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d50a8c5b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","bf070a2f":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","47b08dbb":"test.head()","32bb460c":"train.head()","f6802fb9":"train.describe()","9992d96f":"train.info()","dafe8391":"train.columns","306c050b":"features = ['LotFrontage', 'LotArea', 'MasVnrArea','SalePrice']\nsample_train = train[features]","60b2643d":"sample_train=sample_train.fillna(sample_train.median())\n","bbf93100":"sns.heatmap(sample_train.corr(),annot=True)","f235c7ae":"sample_train.isna().sum()","f443ac80":"sample_test = test[['LotFrontage', 'LotArea', 'MasVnrArea']]","97fadbef":"sample_test = sample_test.fillna(sample_train.median())","2b7801bb":"sns.pairplot(sample_train)","58c369d1":"sns.distplot(sample_train[\"SalePrice\"])","c289fc70":"sns.distplot(np.log(sample_train[\"SalePrice\"]))","ed1769cf":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()","b2183a40":"X_train = sample_train[['LotFrontage', 'LotArea', 'MasVnrArea']]\ny_train = sample_train[[\"SalePrice\"]]\nX_test = sample_test","db35c775":"lr.fit(X_train,y_train)","8427cf60":"lr.intercept_","82fb6323":"lr.coef_","cc87704b":"cdf = pd.DataFrame(lr.coef_.reshape(-1,1),np.array(X_train.columns.tolist()),columns=[\"Coeff\"])","10397cea":"cdf","280caae0":"prediction = lr.predict(X_test)","f306c717":"prediction","0d323942":"prediction.reshape(-1,1)","e433ac1b":"my_submission = pd.DataFrame({'Id': test.Id.values, 'SalePrice': prediction.flatten()})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission.csv', index=False)","f465fe3c":"df = pd.read_csv(\".\/submission.csv\")","d2994767":"y_train = np.log(sample_train[[\"SalePrice\"]])","f2d329bc":"lr.fit(X_train,y_train)","31c48ab8":"cdf = pd.DataFrame(lr.coef_.reshape(-1,1),np.array(X_train.columns.tolist()),columns=[\"Coeff\"])","5166557e":"cdf","a8d8b536":"prediction = lr.predict(X_test)","326b4b73":"prediction","40d760bb":"predictions = np.exp(prediction)","008f0804":"my_submission = pd.DataFrame({'Id': test.Id.values, 'SalePrice': predictions.flatten()})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission2.csv', index=False)","8e1a3f59":"train_predict = lr.predict(X_train)","25d54de8":"plt.scatter(y_train,train_predict)","228627b4":"sns.displot(y_train-train_predict)","6bda8f6e":"from sklearn import metrics","bad5bb54":"metrics.mean_squared_log_error(y_train,train_predict)","2e67fbf6":"metrics.r2_score(y_train,train_predict)","48b8acb8":"metrics.mean_squared_error(y_train,train_predict)","10599555":"import statsmodels.api as sm\nX2 = sm.add_constant(X_train)\nest = sm.OLS(y_train, X2)\nest2 = est.fit()\nprint(est2.summary())","d0db546d":"#Lasso Regression\n\n\nfrom sklearn.linear_model import Lasso\n#Initializing the Lasso Regressor with Normalization Factor as True\nlasso_reg = Lasso(normalize=True)\n#Fitting the Training data to the Lasso regressor\nlasso_reg.fit(X_train,y_train)\n#Predicting for X_test\ny_pred_lass =lasso_reg.predict(X_test)\n#Printing the Score with RMLSE\n#print(\"\\n\\nLasso SCORE : \", score(y_pred_lass, actual_cost))\ny_pred_lass","69a4d6c6":"predictions = np.exp(y_pred_lass)","93c6ac7a":"my_submission = pd.DataFrame({'Id': test.Id.values, 'SalePrice': predictions.flatten()})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission3.csv', index=False)","575a284f":"#Lasso Regression\n\n\nfrom sklearn.linear_model import Ridge\n#Initializing the Lasso Regressor with Normalization Factor as True\nridge_reg = Ridge(normalize=True)\n#Fitting the Training data to the Lasso regressor\nridge_reg.fit(X_train,y_train)\n#Predicting for X_test\ny_pred_lass =ridge_reg.predict(X_test)\n#Printing the Score with RMLSE\n#print(\"\\n\\nLasso SCORE : \", score(y_pred_lass, actual_cost))\ny_pred_lass","ca9265b7":"predictions = np.exp(y_pred_lass)","48a6ef2a":"my_submission = pd.DataFrame({'Id': test.Id.values, 'SalePrice': predictions.flatten()})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission4.csv', index=False)","78933bac":"from sklearn.linear_model import Ridge\n#Initializing the Lasso Regressor with Normalization Factor as True\nridge_reg = Ridge(normalize=True,alpha=0.1)\n#Fitting the Training data to the Lasso regressor\nridge_reg.fit(X_train,y_train)\n#Predicting for X_test\ny_pred_lass =ridge_reg.predict(X_test)\n#Printing the Score with RMLSE\n#print(\"\\n\\nLasso SCORE : \", score(y_pred_lass, actual_cost))\ny_pred_lass","7a86d8b3":"predictions = np.exp(y_pred_lass)","f34ee712":"my_submission = pd.DataFrame({'Id': test.Id.values, 'SalePrice': predictions.flatten()})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission5.csv', index=False)","14e1ea40":"from sklearn.linear_model import Lasso\n#Initializing the Lasso Regressor with Normalization Factor as True\nlasso_reg = Lasso(normalize=True,alpha=0.1)\n#Fitting the Training data to the Lasso regressor\nlasso_reg.fit(X_train,y_train)\n#Predicting for X_test\ny_pred_lass =lasso_reg.predict(X_test)\n#Printing the Score with RMLSE\n#print(\"\\n\\nLasso SCORE : \", score(y_pred_lass, actual_cost))\ny_pred_lass","29de2140":"predictions = np.exp(y_pred_lass)","688d5bb8":"my_submission = pd.DataFrame({'Id': test.Id.values, 'SalePrice': predictions.flatten()})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission6.csv', index=False)","380f481d":"from sklearn.svm import SVR\nsvr_rbf = SVR(kernel='rbf', C=100, gamma=0.1, epsilon=.1)\nsvr_lin = SVR(kernel='linear', C=100, gamma='auto')\nsvr_poly = SVR(kernel='poly', C=100, gamma='auto', degree=3, epsilon=.1,\n               coef0=1)","58bdd3f7":"from sklearn.neighbors import KNeighborsRegressor","e809e7d4":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0,1))\n\nx_train_scaled = scaler.fit_transform(X_train)\nx_train = pd.DataFrame(x_train_scaled)\n\nx_test_scaled = scaler.fit_transform(X_test)\nx_test = pd.DataFrame(x_test_scaled)","d922a7b7":"from sklearn.metrics import mean_squared_error \nfrom math import sqrt\nfrom sklearn import neighbors","770c1d88":"rmse_val = [] #to store rmse values for different k\nfor K in range(20):\n    K = K+1\n    model = neighbors.KNeighborsRegressor(n_neighbors = K)\n\n    model.fit(x_train, y_train)  #fit the model\n    pred=model.predict(x_test) #make prediction on test set\n    pred_train = model.predict(x_train)\n    error = sqrt(mean_squared_error(y_train,pred_train)) #calculate rmse\n    rmse_val.append(error) #store rmse values\n    print('RMSE value for k= ' , K , 'is:', error)","a00fc411":"from sklearn.model_selection import GridSearchCV\nparams = {'n_neighbors':[2,3,4,5,6,7,8,9]}\n\nknn = neighbors.KNeighborsRegressor()\n\nmodel = GridSearchCV(knn, params, cv=5)\nmodel.fit(x_train,y_train)\nmodel.best_params_","75bdd260":"\nmodel = neighbors.KNeighborsRegressor(n_neighbors = 9)\nmodel.fit(x_train, y_train)  #fit the model\npred=model.predict(x_test)","43dab3ed":"my_submission = pd.DataFrame({'Id': test.Id.values, 'SalePrice': np.exp(pred).flatten()})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission7.csv', index=False)","71aca7c2":"from sklearn.svm import SVR\nregressor = SVR(kernel = 'rbf')\nregressor.fit(x_train, y_train)","a6b482b3":"regressor.dual_coef_","93393f2e":"regressor.support_vectors_","360f6a7f":"regressor.support_vectors_.shape","55af98b7":"prediction = regressor.predict(x_test)","ad66428f":"predictions = np.exp(prediction)","15c1ad50":"my_submission = pd.DataFrame({'Id': test.Id.values, 'SalePrice': predictions.flatten()})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission8.csv', index=False)","d9f23441":"from sklearn.svm import SVR\nregressor = SVR(kernel = 'linear')\nregressor.fit(x_train, y_train)","9c252e12":"prediction = regressor.predict(x_test)\npredictions = np.exp(prediction)\nmy_submission = pd.DataFrame({'Id': test.Id.values, 'SalePrice': predictions.flatten()})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission9.csv', index=False)","2cbba002":"This method wants data in dataframe structure and not in series.","376dd4c6":"only taken continous variable to apply linear regression.","757df68f":"rank 3902 score 0.35463 ","f1c5e7c5":"# predict log sales instead of sales","c3b49482":"MSE is more popular than others as it punishes larger errors.\nRMSE is even more popular because it is in the same unit of target.","63697615":"rank 3903 score 0.35557","4f728e3a":"Not normally distributed . Means model is not a currect choice to predict outcome."}}