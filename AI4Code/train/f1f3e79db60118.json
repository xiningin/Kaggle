{"cell_type":{"36b59078":"code","fb5b0219":"code","4cfe129e":"code","c191fb34":"code","762621b5":"code","e44e2119":"code","fecbe415":"code","6f3e907b":"code","867fa5d3":"code","0eacc019":"code","4e6f22a0":"code","cbdbaf9d":"code","09da00bc":"code","e8b8f712":"code","5e83ef93":"code","2cefdd26":"code","3cafbd75":"code","e2537ae5":"code","0e1f4e3c":"code","d7affa90":"code","b4b330f7":"code","16537ac3":"code","4fb00194":"code","81b1e6b3":"code","496a37e2":"code","c6f4cfb3":"code","05064f12":"code","8802db1a":"code","6c59bfa3":"code","dc9be9ea":"code","b7df3a2f":"code","f9a7af70":"code","c8192adb":"code","8bc7da10":"code","1863e6a0":"code","50710b72":"code","137ab216":"code","35c1b5d4":"code","c1358c9c":"code","02b4910f":"code","0d9f6731":"code","5b8c3df5":"code","20c9731b":"code","b0054e5c":"code","50426a21":"code","c26dede4":"code","d994d3dc":"markdown","61745988":"markdown","8367929e":"markdown","9ed7620d":"markdown","d7536f34":"markdown","cf9e98d1":"markdown","f3d08d00":"markdown","13f3de7f":"markdown","5510e079":"markdown","f1959ed1":"markdown","06d36e97":"markdown","1d70d0bf":"markdown","35ab1334":"markdown","1ce16774":"markdown","7d5aedbc":"markdown","632b64d3":"markdown","f727b357":"markdown","826742dd":"markdown","afd955ea":"markdown","054d0529":"markdown","551ad014":"markdown","eaa9663a":"markdown","d9c22776":"markdown","893a0b64":"markdown","62d13b73":"markdown","effae920":"markdown","304b7032":"markdown","adb4cb39":"markdown","b80b0a1d":"markdown","242a4e88":"markdown","1ba5f5b7":"markdown","57e12e6d":"markdown","fa560485":"markdown","8ca306f6":"markdown","45cb8683":"markdown","a178c21d":"markdown","4cbb762a":"markdown","d71bbc6f":"markdown","b7cb16c4":"markdown","e16aa8a6":"markdown","78949532":"markdown","d086131c":"markdown","87d83fba":"markdown","a4775e90":"markdown","39bbe796":"markdown","1fb8c35d":"markdown","b17721cf":"markdown","09fdada1":"markdown","02927ce0":"markdown"},"source":{"36b59078":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fb5b0219":"import seaborn as sns\nimport matplotlib.pyplot as plt","4cfe129e":"#We will use a ready dataset.\ntips = sns.load_dataset(\"tips\")\ntips.head()","c191fb34":"sns.set_style(\"darkgrid\")\nsns.displot(tips[\"total_bill\"],kde=True,bins=40)","762621b5":"tips[\"total_bill\"].describe()","e44e2119":"print(f\"The %68 of the data lies between {tips['total_bill'].mean()-tips['total_bill'].std()} and {tips['total_bill'].std()+tips['total_bill'].mean()}\")\nprint(f\"The %95 of the data lies between {tips['total_bill'].mean()-2*tips['total_bill'].std()} and {2*tips['total_bill'].std()+tips['total_bill'].mean()}\")","fecbe415":"plt.figure(figsize = (15,8))\nsns.histplot(tips[\"total_bill\"],kde=True,bins=40,color=\"red\")","6f3e907b":"plt.figure(figsize = (15,8))\nsns.histplot(tips[\"total_bill\"],kde=True,bins=40,color=\"red\",stat=\"percent\")","867fa5d3":"plt.figure(figsize = (15,8))\nsns.histplot(data=tips, x=\"total_bill\",y=\"tip\",hue=\"sex\")","0eacc019":"plt.figure(figsize = (15,8))\nsns.histplot(tips[\"total_bill\"],kde=True,bins=40,color=\"red\",cumulative=True)","4e6f22a0":"plt.figure(figsize = (15,8))\nsns.ecdfplot(tips[\"total_bill\"],color=\"red\")","cbdbaf9d":"plt.figure(figsize = (15,8))\nsns.ecdfplot(tips[\"total_bill\"],color=\"green\",complementary=True)","09da00bc":"plt.figure(figsize = (15,10))\nsns.jointplot(data=tips, x=\"total_bill\", y=\"tip\",color=\"red\",hue=\"sex\")","e8b8f712":"plt.figure(figsize = (15,10))\nsns.jointplot(data=tips, x=\"total_bill\", y=\"tip\",color=\"red\",hue=\"sex\",kind=\"kde\")","5e83ef93":"plt.figure(figsize = (15,10))\nsns.jointplot(data=tips, x=\"total_bill\", y=\"tip\",color=\"red\",kind=\"reg\")\n#This makes a regression line in addition to showing the scatter distribution of two variables.","2cefdd26":"plt.figure(figsize = (15,10))\nsns.jointplot(data=tips, x=\"total_bill\", y=\"tip\",color=\"red\",kind=\"hex\")\n#The darked hexs shows the denser distribution of the data.","3cafbd75":"plt.figure(figsize = (15,10))\nsns.pairplot(tips,palette=\"tab10\")","e2537ae5":"plt.figure(figsize = (15,10))\nsns.pairplot(tips,hue=\"sex\")","0e1f4e3c":"sns.pairplot(tips,\n                 markers=\"+\",\n                 kind='reg',\n                 diag_kind=\"auto\",\n                 plot_kws={'line_kws':{'color':'#aec6cf'},\n                           'scatter_kws': {'alpha': 0.5,\n                                           'color': '#82ad32'}},\n               \n                 diag_kws= {'color': '#82ad32'})\n","d7affa90":"sns.pairplot(tips,\n                 markers=\"+\",\n                 kind='reg',\n                 diag_kind=\"kde\",\n                 plot_kws={'line_kws':{'color':'#aec6cf'},\n                           'scatter_kws': {'alpha': 0.5,\n                                           'color': '#82ad32'}},\n               corner=True,\n                 diag_kws= {'color': '#82ad32'})","b4b330f7":"sns.pairplot(tips,\n                 markers=\"+\",\n                 hue=\"time\",\n                 kind='reg',\n                 diag_kind=\"kde\",\n                 plot_kws={'line_kws':{'color':'#aec6cf'},\n                           'scatter_kws': {'alpha': 0.5,\n                                           'color': '#82ad32'}},\n               corner=True,\n                 diag_kws= {'color': '#82ad32'})","16537ac3":"plt.figure(figsize = (15,10))\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\",hue=\"time\",palette=\"coolwarm\",s=tips[\"total_bill\"]\/tips[\"tip\"]*10)","4fb00194":"plt.figure(figsize = (15,10))\nsns.relplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"day\", col=\"time\")","81b1e6b3":"plt.figure(figsize = (15,10))\nplt.imshow(plt.imread(\"..\/input\/boxplot\/1_2c21SkzJMf3frPXPAR_gZA.png\"))","496a37e2":"plt.figure(figsize = (15,10))\nsns.barplot(data=tips, x=\"sex\", y=\"total_bill\",palette=\"coolwarm\")\n#This show by default according to the mean of each category","c6f4cfb3":"plt.figure(figsize = (15,10))\nsns.barplot(data=tips, x=\"sex\", y=\"total_bill\",estimator=np.std,palette=\"plasma\")\n#This show by default according to the standard deviation of each category","05064f12":"plt.figure(figsize = (15,10))\nsns.countplot(data=tips, x=\"time\",hue=\"day\",palette=\"twilight\")","8802db1a":"plt.figure(figsize = (15,10))\nplt.imshow(plt.imread(\"..\/input\/boxplot\/1_2c21SkzJMf3frPXPAR_gZA.png\"))","6c59bfa3":"plt.figure(figsize = (15,10))\nsns.boxplot(data=tips, x=\"day\",y=\"tip\",palette=\"inferno\")","dc9be9ea":"plt.figure(figsize = (15,10))\nsns.boxplot(data=tips, x=\"day\",y=\"tip\",palette=\"inferno\",hue=\"smoker\")\n#We can use hue parameter by adding a new dimension of another catogorical variable.","b7df3a2f":"plt.figure(figsize = (15,10))\nsns.heatmap(tips.corr(),annot=True,cmap=\"coolwarm\",linewidths=1, linecolor=\"white\")","f9a7af70":"df= sns.load_dataset(\"flights\")\ndf.head()","c8192adb":"df.pivot_table(index=\"month\",columns=\"year\",values=\"passengers\")","8bc7da10":"plt.figure(figsize = (15,10))\nsns.heatmap(df.pivot_table(index=\"month\",columns=\"year\",values=\"passengers\"), cmap=\"coolwarm\",linewidths=1, linecolor=\"white\")","1863e6a0":"plt.figure(figsize = (15,10))\nsns.clustermap(tips.corr(), cmap=\"coolwarm\")","50710b72":"plt.figure(figsize = (15,10))\nsns.clustermap(df.pivot_table(index=\"month\",columns=\"year\",values=\"passengers\"), cmap=\"coolwarm\",linewidths=1, linecolor=\"white\")","137ab216":"df=sns.load_dataset(\"iris\")\ndf.head()","35c1b5d4":"sns.pairplot(df,hue=\"species\")","c1358c9c":"sns.PairGrid(df) # This returns an empty grid of all numerical variables of the dataset.","02b4910f":"grid = sns.PairGrid(df) # 1. Step\ngrid.map(sns.scatterplot) # 2. Step","0d9f6731":"# 3. Step, we can customize what kind of plot we will use for diagonal, upper and lower bounds\ng = sns.PairGrid(df)\ng.map_diag(sns.histplot,color=\"green\")\ng.map_upper(sns.scatterplot,color=\"purple\")\ng.map_lower(sns.kdeplot,color=\"red\")","5b8c3df5":"plt.figure(figsize = (15,10))\nsns.regplot(data=tips, x=\"total_bill\",y=\"tip\",marker=\"+\",color=\"green\")","20c9731b":"plt.figure(figsize = (15,10))\nsns.residplot(data=tips, x=\"total_bill\",y=\"tip\",color=\"purple\")","b0054e5c":"plt.figure(figsize = (15,10))\nsns.lmplot(x=\"total_bill\", y=\"tip\", row=\"sex\", col=\"time\",data=tips,palette=\"spring\")","50426a21":"plt.figure(figsize = (15,10))\nsns.lmplot(x='total_bill',y='tip',data=tips,col='day',hue='sex',palette='coolwarm')","c26dede4":"plt.figure(figsize = (15,10))\nsns.lmplot(x='total_bill',y='tip',data=tips,col='day',hue='time',palette='rainbow')","d994d3dc":"<font color=\"blue\">\nWe can get rid of repetitive plots by  assigning corner parameter as True which is defined False by default.","61745988":"## 7. REGRESSION PLOTS","8367929e":"## 8. APPENDICES","9ed7620d":"seaborn.lmplot(*, x=None, y=None, data=None, hue=None, col=None, row=None, palette=None, col_wrap=None, height=5, aspect=1, markers='o', sharex=None, sharey=None, hue_order=None, col_order=None, row_order=None, legend=True, legend_out=None, x_estimator=None, x_bins=None, x_ci='ci', scatter=True, fit_reg=True, ci=95, n_boot=1000, units=None, seed=None, order=1, logistic=False, lowess=False, robust=False, logx=False, x_partial=None, y_partial=None, truncate=True, x_jitter=None, y_jitter=None, scatter_kws=None, line_kws=None, facet_kws=None, size=None)","d7536f34":"<font color=\"red\">\n4.3. Boxplot:","cf9e98d1":"<font color=\"blue\">\nIn this plot, we can relationship visually between two variables.\nThis plot provides a convenient interface to the JointGrid class, with several canned plot kinds by changing kind paramaeter{ \u201cscatter\u201d | \u201ckde\u201d | \u201chist\u201d | \u201chex\u201d | \u201creg\u201d | \u201cresid\u201d }. It is defined as scatter by default.\n    \n    seaborn.jointplot(*, x=None, y=None, data=None, kind='scatter', color=None, height=6, ratio=5, space=0.2,                 dropna=False, xlim=None, ylim=None, marginal_ticks=False, joint_kws=None, marginal_kws=None, hue=None, palette=None,       hue_order=None, hue_norm=None, **kwargs)","f3d08d00":"<font color=\"green\">\n\nPalette List of Seaborn is Below:\n[\u2018Accent\u2019, \u2018Accent_r\u2019, \u2018Blues\u2019, \u2018Blues_r\u2019, \u2018BrBG\u2019, \u2018BrBG_r\u2019, \u2018BuGn\u2019, \u2018BuGn_r\u2019, \u2018BuPu\u2019, \u2018BuPu_r\u2019, \n \u2018CMRmap\u2019, \u2018CMRmap_r\u2019, \u2018Dark2\u2019, \u2018Dark2_r\u2019, \u2018GnBu\u2019, \u2018GnBu_r\u2019, \u2018Greens\u2019, \u2018Greens_r\u2019, \u2018Greys\u2019, \u2018Greys_r\u2019, \u2018OrRd\u2019, \n \u2018OrRd_r\u2019, \u2018Oranges\u2019, \u2018Oranges_r\u2019, \u2018PRGn\u2019, \u2018PRGn_r\u2019, \u2018Paired\u2019, \u2018Paired_r\u2019, \u2018Pastel1\u2019, \n \u2018Pastel1_r\u2019, \u2018Pastel2\u2019, \u2018Pastel2_r\u2019, \u2018PiYG\u2019, \u2018PiYG_r\u2019, \u2018PuBu\u2019, \u2018PuBuGn\u2019, \u2018PuBuGn_r\u2019, \n \u2018PuBu_r\u2019, \u2018PuOr\u2019, \u2018PuOr_r\u2019, \u2018PuRd\u2019, \u2018PuRd_r\u2019, \u2018Purples\u2019, \u2018Purples_r\u2019, \u2018RdBu\u2019, \u2018RdBu_r\u2019, \n \u2018RdGy\u2019, \u2018RdGy_r\u2019, \u2018RdPu\u2019, \u2018RdPu_r\u2019, \u2018RdYlBu\u2019, \u2018RdYlBu_r\u2019, \u2018RdYlGn\u2019, \u2018RdYlGn_r\u2019, \u2018Reds\u2019, \n \u2018Reds_r\u2019, \u2018Set1\u2019, \u2018Set1_r\u2019, \u2018Set2\u2019, \u2018Set2_r\u2019, \u2018Set3\u2019, \u2018Set3_r\u2019, \u2018Spectral\u2019, \u2018Spectral_r\u2019, \n \u2018Wistia\u2019, \u2018Wistia_r\u2019, \u2018YlGn\u2019, \u2018YlGnBu\u2019, \u2018YlGnBu_r\u2019, \u2018YlGn_r\u2019, \u2018YlOrBr\u2019, \u2018YlOrBr_r\u2019, \u2018YlOrRd\u2019, \n \u2018YlOrRd_r\u2019, \u2018afmhot\u2019, \u2018afmhot_r\u2019, \u2018autumn\u2019, \u2018autumn_r\u2019, \u2018binary\u2019, \u2018binary_r\u2019, \u2018bone\u2019, \n \u2018bone_r\u2019, \u2018brg\u2019, \u2018brg_r\u2019, \u2018bwr\u2019, \u2018bwr_r\u2019, \u2018cividis\u2019, \u2018cividis_r\u2019, \u2018cool\u2019, \u2018cool_r\u2019, \u2018coolwarm\u2019, \u2018coolwarm_r\u2019, \u2018copper\u2019, \u2018copper_r\u2019,\n \u2018cubehelix\u2019, \u2018cubehelix_r\u2019, \u2018flag\u2019, \u2018flag_r\u2019, \u2018gist_earth\u2019, \u2018gist_earth_r\u2019, \u2018gist_gray\u2019, \u2018gist_gray_r\u2019, \u2018gist_heat\u2019, \u2018gist_heat_r\u2019, \u2018gist_ncar\u2019, \u2018gist_ncar_r\u2019,\n \u2018gist_rainbow\u2019, \u2018gist_rainbow_r\u2019, \u2018gist_stern\u2019, \u2018gist_stern_r\u2019, \u2018gist_yarg\u2019, \n \u2018gist_yarg_r\u2019, \u2018gnuplot\u2019, \u2018gnuplot2\u2019, \u2018gnuplot2_r\u2019, \u2018gnuplot_r\u2019, \u2018gray\u2019, \u2018gray_r\u2019,\n \u2018hot\u2019, \u2018hot_r\u2019, \u2018hsv\u2019, \u2018hsv_r\u2019, \u2018icefire\u2019, \u2018icefire_r\u2019, \u2018inferno\u2019, \n \u2018inferno_r\u2019, \u2018magma\u2019, \u2018magma_r\u2019, \u2018mako\u2019, \u2018mako_r\u2019, \n \u2018nipy_spectral\u2019, \u2018nipy_spectral_r\u2019, \u2018ocean\u2019, \u2018ocean_r\u2019, \u2018pink\u2019, \u2018pink_r\u2019,\n \u2018plasma\u2019, \u2018plasma_r\u2019, \u2018prism\u2019, \u2018prism_r\u2019, \u2018rainbow\u2019, \u2018rainbow_r\u2019,\n \u2018rocket\u2019, \u2018rocket_r\u2019, \u2018seismic\u2019, \u2018seismic_r\u2019, \u2018spring\u2019, \u2018spring_r\u2019,\n \u2018summer\u2019, \u2018summer_r\u2019, \u2018tab10\u2019, \u2018tab10_r\u2019, \u2018tab20\u2019, \u2018tab20_r\u2019, \u2018tab20b\u2019,\n \u2018tab20b_r\u2019, \u2018tab20c\u2019, \u2018tab20c_r\u2019, \u2018terrain\u2019, \u2018terrain_r\u2019, \u2018twilight\u2019,\n \u2018twilight_r\u2019, \u2018twilight_shifted\u2019, \u2018twilight_shifted_r\u2019, \u2018viridis\u2019, \u2018viridis_r\u2019, \u2018vlag\u2019, \u2018vlag_r\u2019, \u2018winter\u2019, \u2018winter_r\u2019]","13f3de7f":"<font color=\"blue\">\n1. The first step is to assign the into a variable\n    \n2. The second step is to map plot types by using this variable.\n    \n3.  variable.map_diag(plt.hist)\nvariable.map_upper(plt.scatter)\nvariable.map_lower(sns.kdeplot)","5510e079":"<font color=\"blue\">\nThis plot is almost the same as bar plot, but this shows the number occurances of each category in a categorical variable.\n    \n    seaborn.countplot(*, x=None, y=None, hue=None, data=None, order=None, hue_order=None, orient=None, color=None,             palette=None, saturation=0.75, dodge=True, ax=None, **kwargs)","f1959ed1":"<font color=\"blue\">\nIt is by default described by \"count\"\nAggregate statistic to compute in each bin.\n\n    count: show the number of observations in each bin\n\n    frequency: show the number of observations divided by the bin width\n\n    probability: or proportion: normalize such that bar heights sum to 1\n\n    percent: normalize such that bar heights sum to 100\n\n    density: normalize such that the total area of the histogram equals 1","06d36e97":"<font color=\"red\">\n4.1. Barplot:","1d70d0bf":"<font color=\"blue\">\nThis plots shows yhe relationship between x and y can be shown for different subsets of the data. For example in the plot below,the relationship between two continous variables are shown with respect to different subset of a categorical variable,i.e., time.","35ab1334":"<font color=\"red\">\n7.2. Residplot:","1ce16774":"<font color=\"red\">\n5.2. Clustermap:","7d5aedbc":"<font color=\"blue\">\nThe plot above shows that total bill is distributed between 10 and 30. describe() method below also shows that the border for %25 is 13 while %75 is 24","632b64d3":"<font color=\"blue\">\nPlots rectangular data as a color-encoded matrix\n    \n    seaborn.heatmap(data, *, vmin=None, vmax=None, cmap=None, center=None, robust=False, annot=None, fmt='.2g',             annot_kws=None, linewidths=0, linecolor='white', cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels='auto',     yticklabels='auto', mask=None, ax=None, **kwargs)","f727b357":"<font color=\"blue\">\nThis function takes one of the variables as categorical in x axis and the continuous as y axis and shows the some aggreage function of categorical data with respect to their corresponding continuous variable.\n    \n    seaborn.barplot(*, x=None, y=None, hue=None, data=None, order=None, hue_order=None, estimator=<function>, ci=95,           n_boot=1000, units=None, seed=None, orient=None, color=None, palette=None, saturation=0.75, errcolor='.26',           errwidth=None,     capsize=None, dodge=True, ax=None, **kwargs)","826742dd":"## 1. Distribution Plots:","afd955ea":"<font color=\"red\">\n2.2. Pairplot:","054d0529":"<font color=\"blue\">\nWe can also get the inverse cumulative distribution of a single variable by changing complementary as True, it is by default defined as False","551ad014":"<font color=\"blue\">\nThis is the clustered version of the heatmap. This plot tries to cluster columns based on their similarity.\n    \n    seaborn.clustermap(data, *, pivot_kws=None, method='average', metric='euclidean', z_score=None, standard_scale=None, figsize=(10, 10), cbar_kws=None, row_cluster=True, col_cluster=True, row_linkage=None, col_linkage=None, row_colors=None, col_colors=None, mask=None, dendrogram_ratio=0.2, colors_ratio=0.03, cbar_pos=(0.02, 0.8, 0.05, 0.18), tree_kws=None, **kwargs)\n","eaa9663a":"<font color=\"red\">\n6.1. PairGrid:","d9c22776":"<font color=\"blue\">\nsns.displot() allows us to show univariate set of observations which means that it shows the distribution of one variable.\n    \n    seaborn.displot(data=None, *, x=None, y=None, hue=None, row=None, col=None, weights=None, kind='hist', rug=False,         rug_kws=None, log_scale=None, legend=True, palette=None, hue_order=None, hue_norm=None, color=None, col_wrap=None,         row_order=None, col_order=None, height=5, aspect=1, facet_kws=None, **kwargs)\n","893a0b64":"<font color=\"blue\">\nshows the cumulative distribution of a single variable\n    \n    seaborn.ecdfplot(data=None, *, x=None, y=None, hue=None, weights=None, stat='proportion', complementary=False,             palette=None, hue_order=None, hue_norm=None, log_scale=None, legend=True, ax=None, **kwargs)","62d13b73":"## 6. GRIDS:","effae920":"<font color=\"blue\">\nDraw a box plot of a continouous variable as y axis based on the categories of the categorical variable as x axis.\n    \n    \n    seaborn.boxplot(*, x=None, y=None, hue=None, data=None, order=None, hue_order=None, orient=None, color=None,         palette=None, saturation=0.75, width=0.8, dodge=True, fliersize=5, linewidth=None, whis=1.5, ax=None, **kwargs)\n","304b7032":"<font color=\"red\">\n1.2. Histplot:","adb4cb39":"<font color=\"red\">\n1.3. Ecdfplot:","b80b0a1d":"<font color=\"blue\">\nWe can also get the cumulative distribution of a single variable","242a4e88":"<font color=\"red\">\n2.3. Scatterplot:","1ba5f5b7":"<font color=\"red\">\n7.1. Regplot:","57e12e6d":"<font color=\"red\">\n1.1. Distplot:","fa560485":"<font color=\"red\">\n2.4. Relplot:","8ca306f6":"## 5. MATRIX PLOTS","45cb8683":"<font color=\"red\">\n5.1. Heatmap:","a178c21d":"<font color=\"blue\">\nDraw a scatter plot between two variables.\n    \n    seaborn.scatterplot(*, x=None, y=None, hue=None, style=None, size=None, data=None, palette=None, hue_order=None,           hue_norm=None, sizes=None, size_order=None, size_norm=None, markers=True, style_order=None, x_bins=None, y_bins=None,     units=None, estimator=None, ci=95, n_boot=1000, alpha=None, x_jitter=None, y_jitter=None, legend='auto', ax=None,        **kwargs)","4cbb762a":"<font color=\"blue\">\nWe can use hue parameter which refers to a categorical variable in the data, s\u00e5 can vizualize three variables at the same time.","d71bbc6f":"<font color=\"blue\">\nIt shows a subset of variables or plot different numerical variables on the rows and columns.\n    \n    seaborn.pairplot(data, *, hue=None, hue_order=None, palette=None, vars=None, x_vars=None, y_vars=None, kind='scatter',     diag_kind='auto', markers=None, height=2.5, aspect=1, corner=False, dropna=False, plot_kws=None, diag_kws=None,           grid_kws=None, size=None)","b7cb16c4":"<font color=\"blue\">\nPlot the residuals of a linear regression.\n\n       seaborn.residplot(*, x=None, y=None, data=None, lowess=False, x_partial=None, y_partial=None, order=1, robust=False, dropna=True, label=None, color=None, scatter_kws=None, line_kws=None, ax=None)","e16aa8a6":"<font color=\"blue\">\nWe can also get the mutual distribution of two columns","78949532":"<font color=\"red\">\n5.2. Clustermap:\nAs we can see in the plot above, some months and years that are similar are clustered","d086131c":"<font color=\"red\">\n2.1. Jointplot:","87d83fba":"<font color=\"blue\">\nPlots data and a linear regression model fit.\n    \n    seaborn.regplot(*, x=None, y=None, data=None, x_estimator=None, x_bins=None, x_ci='ci', scatter=True, fit_reg=True, ci=95, n_boot=1000, units=None, seed=None, order=1, logistic=False, lowess=False, robust=False, logx=False, x_partial=None, y_partial=None, truncate=True, dropna=True, x_jitter=None, y_jitter=None, label=None, color=None, marker='o', scatter_kws=None, line_kws=None, ax=None)","a4775e90":"<font color=\"red\">\n7.2. lmplot:","39bbe796":"<font color=\"blue\">\n    A histogram is a classic visualization tool that represents the distribution of one or more variables by counting the number of observations that fall within disrete bins.\n\nThis function can normalize the statistic computed within each bin to estimate frequency, density or probability mass, and it can add a smooth curve obtained using a kernel density estimate, similar to kdeplot().\n    \n    seaborn.histplot(data=None, *, x=None, y=None, hue=None, weights=None, stat='count', bins='auto', binwidth=None,           binrange=None, discrete=None, cumulative=False, common_bins=True, common_norm=True, multiple='layer', element='bars',     fill=True, shrink=1, kde=False, kde_kws=None, line_kws=None, thresh=0, pthresh=None, pmax=None, cbar=False,               cbar_ax=None, cbar_kws=None, palette=None, hue_order=None, hue_norm=None, color=None, log_scale=None, legend=True,         ax=None, **kwargs)","1fb8c35d":"## 3. CATEGORICAL PLOTS","b17721cf":"## 2. Relational Plots:","09fdada1":"<font color=\"red\">\n4.2. Countplot:","02927ce0":"<font color=\"blue\">\nThe difference between sns.pairplot() and sns.pairgrid() is that pairplot return an automatic version of plots between variables while pairgrid give more customized version of plots."}}