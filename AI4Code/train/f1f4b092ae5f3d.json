{"cell_type":{"c3b24b16":"code","f697bd78":"code","559aaa43":"code","9f9d30c9":"code","0e46302d":"code","9184b30d":"code","4d935b48":"code","bcec7e8f":"code","f88cab42":"code","08e99c0f":"code","e1d8e36e":"code","3509e5a2":"code","87a597cb":"code","ab529633":"code","88d11084":"code","2f50cf38":"code","63e8d74f":"code","7e663bab":"code","3748bb6d":"code","743242f8":"code","9aedac19":"code","0e1b280f":"code","f3ebb59e":"code","ed8dad86":"code","f5857669":"code","0a0b206c":"code","d4bd5b39":"code","e6422c45":"code","ec45cfee":"code","6481fa28":"code","a48a6257":"code","07cc943f":"code","dc216057":"code","36ad9a43":"code","07aa9d30":"code","a71d4861":"code","743dd262":"code","07ee4a09":"code","da0748b9":"code","284c9e67":"code","74e0bb0a":"markdown","121d0f04":"markdown","54e757fb":"markdown","a1ef68ad":"markdown","1283bc59":"markdown"},"source":{"c3b24b16":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","f697bd78":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","559aaa43":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","9f9d30c9":"train.info()","0e46302d":"test.info()","9184b30d":"all = pd.concat([train, test], sort = False)\nall.info()","4d935b48":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","bcec7e8f":"all.info()","f88cab42":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","08e99c0f":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","e1d8e36e":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","3509e5a2":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","87a597cb":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","ab529633":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","88d11084":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","2f50cf38":"all.info()","63e8d74f":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","7e663bab":"all.info()","3748bb6d":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","743242f8":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","9aedac19":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","0e1b280f":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","f3ebb59e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","ed8dad86":"from sklearn.ensemble import RandomForestClassifier","f5857669":"RF_Model = RandomForestClassifier()","0a0b206c":"#from sklearn.model_selection import GridSearchCV","d4bd5b39":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","e6422c45":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","ec45cfee":"#RF_grid_model = RF_grid.fit(X_train, y_train)","6481fa28":"#RF_grid_model.best_estimator_","a48a6257":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","07cc943f":"RF_Model.fit(X_train, y_train)","dc216057":"predictions = RF_Model.predict(X_test)\npredictions","36ad9a43":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","07aa9d30":"all_test.head()","a71d4861":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","743dd262":"t_pred = RF_Model.predict(TestForPred).astype(int)","07ee4a09":"PassengerId = all_test['PassengerId']","da0748b9":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","284c9e67":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","74e0bb0a":"### Build Random Forest","121d0f04":"****Check Accuracy","54e757fb":"****Final Predictions","a1ef68ad":"****Train\/Test Split","1283bc59":"****Extra Features:"}}