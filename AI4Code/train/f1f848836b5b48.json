{"cell_type":{"c47bb5f3":"code","e1011ea6":"code","3777b55f":"code","fdbf8d33":"code","c1c9f6a8":"code","a7b2d511":"code","9b8f9efe":"code","e5651249":"code","a68e70c8":"code","2276e8e5":"code","045decb8":"code","87ac7631":"code","cd9c4f2f":"code","f1143dea":"code","d62a1ad2":"markdown","8613ccae":"markdown","4e0aa49f":"markdown"},"source":{"c47bb5f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e1011ea6":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","3777b55f":"missing_data = train_data.isnull()\nmissing_data.head(5)","fdbf8d33":"avg_mean = train_data[\"Age\"].astype('float').mean(axis=0)","c1c9f6a8":"train_data[\"Age\"].replace(np.nan, avg_mean, inplace=True)","a7b2d511":"train_data.drop(\"Cabin\", axis = 1, inplace=True)","9b8f9efe":"train_data.drop(\"Name\", axis = 1, inplace=True)","e5651249":"train_data[\"Embarked\"].replace(np.nan, 'S', inplace=True)","a68e70c8":"train_data[\"Age\"] = train_data[\"Age\"].astype(\"int\")","2276e8e5":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","045decb8":"avg_mean = test_data[\"Age\"].astype('float').mean(axis=0)\ntest_data[\"Age\"].replace(np.nan, avg_mean, inplace=True)\ntest_data[\"Age\"].astype(\"int\")\nFavg_mean = test_data[\"Fare\"].astype('float').mean(axis=0)\ntest_data[\"Fare\"].replace(np.nan, Favg_mean, inplace=True)","87ac7631":"parameters = {\n    \"n_estimators\":[5,10,50,100,250],\n    \"max_depth\":[2,4,8,16,32,None]\n    \n}","cd9c4f2f":"from sklearn.ensemble import RandomForestClassifier\nlm =RandomForestClassifier(n_estimators=250, max_depth=8, random_state=1)\ny = train_data[\"Survived\"]\nfeatures = [\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\",\"Fare\",\"Embarked\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\nlm.fit(X, train_data['Survived'])","f1143dea":"predictions = lm.predict(X_test)\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","d62a1ad2":"# **Data Wrangling**","8613ccae":"[](http:\/\/)","4e0aa49f":"# Using random forest classifier"}}