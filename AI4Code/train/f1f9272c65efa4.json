{"cell_type":{"f622cb12":"code","f0455bbe":"code","33c1b3dc":"code","43bce7b8":"code","dd6ad38b":"code","c68a9dc6":"code","fb4ab6c1":"code","1df2d0c1":"code","21a2cea1":"code","8956b3e2":"code","ad137235":"code","385135dd":"code","7c0f5df8":"code","1fb5e7f0":"code","391bb895":"code","033d615f":"code","47590b7b":"code","661a8c08":"code","b3f5c078":"code","515ce1d9":"code","fc815961":"code","181c81b7":"code","56ce50bd":"code","f34a5eab":"code","289c4c2f":"code","294ad344":"code","69762581":"code","ae11c9c2":"code","f1b77ce5":"code","1145bde3":"code","da55779d":"code","9f7d9cb6":"code","e153d48f":"code","6187e6ad":"code","924cd2d3":"code","1fa6353d":"code","474ce38b":"code","a7c944e9":"code","40ccd343":"code","c60e5948":"code","bdbd4e59":"markdown","4e885df5":"markdown","01adc7bc":"markdown","0e44eb25":"markdown"},"source":{"f622cb12":"import warnings\nwarnings.filterwarnings('ignore')","f0455bbe":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","33c1b3dc":"ds = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv', delimiter=',')","43bce7b8":"ds.head(3)","dd6ad38b":"ds.drop(['id'], axis=1, inplace=True)","c68a9dc6":"ds.stroke[ds.gender == 'Other']","fb4ab6c1":"ds.drop([3116], inplace=True)","1df2d0c1":"ds.columns","21a2cea1":"columns_numeric = ['age', 'avg_glucose_level', 'bmi']\ncolumns_categorical = ['gender', 'hypertension', 'heart_disease', 'ever_married', \n                       'work_type', 'Residence_type', 'smoking_status']\ncolumns_dummis = ['gender', 'ever_married', 'work_type', 'Residence_type', 'smoking_status']\ncolumns_target = ['stroke']","8956b3e2":"def replace_nan(data, to_replace, replacement_data):\n    \n    data_def = data.copy(deep=True)\n    \n    index_zero = list(data_def[to_replace][data_def[replacement_data] == 0].index)\n    index_one = list(data_def[to_replace][data_def[replacement_data] == 1].index)\n    \n    for i in range(2):\n        minimum = data_def[to_replace][data_def[replacement_data] == i].quantile(0.25)\n        maximum = data_def[to_replace][data_def[replacement_data] == i].quantile(0.75)\n        \n        minimum -= (maximum - minimum) * 0.5\n        maximum += (maximum - minimum) * 0.5\n    \n        count = data_def[to_replace][data_def[replacement_data] == i].isnull().sum()\n        \n        data_for_nan = np.random.choice(range(int(minimum), int(maximum)), count)\n    \n        if i == 0:\n            index_null = data_def[to_replace][index_zero][data_def[to_replace].isnull()].index\n        else:\n            index_null = data_def[to_replace][index_one][data_def[to_replace].isnull()].index\n        \n        data_def[to_replace][index_null] = data_for_nan\n        \n    return data_def","ad137235":"ds = replace_nan(ds, 'bmi', 'stroke')","385135dd":"ds.info()","7c0f5df8":"ds = pd.get_dummies(ds, columns=columns_dummis, prefix_sep='_', drop_first=True)","1fb5e7f0":"ds.head(3)","391bb895":"from sklearn.model_selection import train_test_split","033d615f":"ds_train, ds_test = train_test_split(ds, test_size=0.3, random_state=42, stratify=ds.stroke)","47590b7b":"ds_train.stroke.value_counts(normalize=True), ds_test.stroke.value_counts(normalize=True)","661a8c08":"ds_train.shape[0] + ds_test.shape[0], ds.shape","b3f5c078":"add_rows = int(ds_train.stroke.value_counts()[0] * .8 - ds_train.stroke.value_counts()[1])\nadd_rows","515ce1d9":"int(add_rows \/ ds_train.stroke.value_counts()[1]), ds_train.stroke.value_counts()","fc815961":"index_train_one = ds_train.stroke[ds_train.stroke == 1].index\nds_train_one = ds_train.loc[index_train_one]","181c81b7":"for i in range(14):\n    ds_train = ds_train.append(ds_train_one)\n    #y_train = pd.concat([y_train, y_train[y_train == 1]])","56ce50bd":"ds_train.stroke.value_counts(normalize=True)","f34a5eab":"from sklearn.utils import shuffle","289c4c2f":"ds_train = shuffle(ds_train)","294ad344":"from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score, roc_auc_score, roc_curve\nfrom sklearn.metrics import confusion_matrix","69762581":"def print_metrics(actual, predict):\n    print('Accuracy: {:.3f}'.format(accuracy_score(actual, predict)))\n    print('Precision: {:.3f}'.format(precision_score(actual, predict)))\n    print('Recall: {:.3f}'.format(recall_score(actual, predict)))\n    print('F1 score: {:.3f}'.format(f1_score(actual, predict)))","ae11c9c2":"def plot_roc_auc(actual, predict):\n    \n    fpr, tpr, threshold = roc_curve(actual, predict)\n    plt.plot(fpr, tpr, color='b')\n    #plt.plot()\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.plot([0.0, 1.0], [0.0, 1.0], color='r')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC AUC = {:.3f}'.format(roc_auc_score(actual, predict)))","f1b77ce5":"from sklearn.ensemble import VotingClassifier, RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier","1145bde3":"np.random.seed(160)\nmodel_tree = DecisionTreeClassifier(criterion='gini', splitter='best', max_depth=6, min_samples_leaf=1, \n                                    max_features=4, random_state=160)\n\nnp.random.seed(151)\nmodel_RF = RandomForestClassifier(n_estimators=1000, criterion='entropy', max_leaf_nodes=3, \n                                  max_features='auto', bootstrap=False, random_state=151, n_jobs=-1)\nnp.random.seed(33)\nmodel_svc = SVC(kernel='rbf', C=0.4, gamma=0.01, probability=True, random_state=33)\nmodel_LR = LogisticRegression(penalty='l2', C=1.0, random_state=33, n_jobs=-1)\n\nmodel_voting = VotingClassifier(estimators=[('tree', model_tree), ('RF', model_RF), ('SVC', model_svc), ('LR', model_LR)], \n                                voting='hard', weights=[0.8, 0.8, 1.0, 0.8], n_jobs=-1)","da55779d":"%%time\nmodel_tree.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)\nmodel_RF.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)\nmodel_svc.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)\nmodel_LR.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)\nmodel_voting.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)","9f7d9cb6":"for model, label in zip([model_tree, model_RF, model_svc, model_LR, model_voting], \n                        ['tree', 'RF', 'SVC', 'LR', 'Voting']):\n    print('-'*5, label, '-'*5)\n    print_metrics(ds_train.stroke, model.predict(ds_train.drop(['stroke'], axis=1)))\n    print()","e153d48f":"model_voting = VotingClassifier(estimators=[('tree', model_tree), ('RF', model_RF), ('SVC', model_svc), \n                                            ('LR', model_LR)], \n                                voting='hard', weights=[0.8, 0.8, 1.0, 0.8], n_jobs=-1)","6187e6ad":"model_voting.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)","924cd2d3":"y_pred = model_voting.predict(ds_train.drop(['stroke'], axis=1))","1fa6353d":"print_metrics(ds_train.stroke, y_pred)","474ce38b":"sns.heatmap(confusion_matrix(ds_train.stroke, y_pred), cmap='Blues', annot=True, fmt='');","a7c944e9":"y_pred_test = model_voting.predict(ds_test.drop(['stroke'], axis=1))","40ccd343":"print_metrics(ds_test.stroke, y_pred_test)","c60e5948":"sns.heatmap(confusion_matrix(ds_test.stroke, y_pred_test), cmap='Blues', annot=True, fmt='');","bdbd4e59":"### -------------- Voting ------------------------","4e885df5":"### --------------- metrics ------------------------","01adc7bc":"#### **TRAIN**","0e44eb25":"#### **TEST**"}}