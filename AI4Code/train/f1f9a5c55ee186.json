{"cell_type":{"51bf20d8":"code","8630ad17":"code","6136713d":"code","6f97d457":"code","df9aa7fb":"code","45b434c8":"code","ee2bca08":"code","daf2b888":"code","5bf42f53":"code","9ef5b589":"code","2e55a3f1":"code","bb659d70":"code","5bb0dc16":"code","f58de858":"code","2d1a1f5b":"code","447f09de":"code","edaa595d":"code","c163a233":"code","c4fff796":"code","dbdacbfb":"code","1f2d6c03":"code","32989de7":"code","1866a9cc":"code","b52c277a":"code","d80ad407":"code","68ee61a7":"code","090c0303":"code","88d58c4f":"code","c377a0d3":"code","e2a1c63d":"code","bfa2dd13":"code","7d163deb":"code","a50b9df0":"code","8fc353bc":"code","beff24df":"markdown","43aa316d":"markdown","6c702e37":"markdown","01f486b6":"markdown","01efec4c":"markdown","93cd2fe5":"markdown","62920d51":"markdown","10ad27f9":"markdown","1b20a9f4":"markdown","fd6a433d":"markdown","595d16dd":"markdown","4b1f6108":"markdown"},"source":{"51bf20d8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport plotly.express as px\nfrom pandas_profiling import ProfileReport\nfrom plotly.offline import iplot\n!pip install joypy\nimport joypy\nfrom sklearn.cluster import KMeans\n\nplt.rcParams['figure.figsize'] = 8, 5\nplt.style.use(\"fivethirtyeight\")\n\ndata = pd.read_csv('..\/input\/iris\/Iris.csv')","8630ad17":"data.head()","6136713d":"data.drop('Id', axis=1).describe()","6f97d457":"ax = sns.boxplot(data=data, x=\"Species\", y=\"SepalLengthCm\")\nplt.title('Box Plot')\nplt.show()","df9aa7fb":"sns.violinplot(data=data, x=\"Species\", y=\"SepalLengthCm\", size=8)\nplt.title('Violin Plot')\nplt.show()","45b434c8":"sns.FacetGrid(data, hue=\"Species\", height=6,).map(sns.kdeplot, \"SepalLengthCm\",shade=True).add_legend()\nplt.title('KDE Plot')\nplt.show()","ee2bca08":"sns.stripplot(data=data, x=\"Species\", y=\"SepalLengthCm\")\nplt.title('Strip Plot')\nplt.show()","daf2b888":"ax = sns.boxplot(data=data, x=\"Species\", y=\"SepalWidthCm\")\nplt.title('Box Plot')\nplt.show()","5bf42f53":"ax = sns.violinplot(data=data, x=\"Species\", y=\"SepalWidthCm\")\nplt.title('Violin Plot')\nplt.show()","9ef5b589":"ax = sns.stripplot(data=data, x=\"Species\", y=\"SepalWidthCm\")\nplt.title('Strip Plot')\nplt.show()","2e55a3f1":"sns.FacetGrid(data, hue=\"Species\", height=6,).map(sns.kdeplot, \"SepalWidthCm\",shade=True).add_legend()\nplt.title('KDE Plot')\nplt.show()","bb659d70":"ax = sns.boxplot(data=data, x=\"Species\", y=\"PetalLengthCm\")\nplt.title('Box Plot')\nplt.show()","5bb0dc16":"ax = sns.violinplot(data=data, x=\"Species\", y=\"PetalLengthCm\")\nplt.title('Violin Plot')\nplt.show()","f58de858":"ax = sns.stripplot(data=data, x=\"Species\", y=\"PetalLengthCm\")\nplt.title('Strip Plot')\nplt.show()","2d1a1f5b":"sns.FacetGrid(data, hue=\"Species\", height=6,).map(sns.kdeplot, \"PetalLengthCm\",shade=True).add_legend()\nplt.title('KDE Plot')\nplt.show()","447f09de":"ax = sns.boxplot(data=data, x=\"Species\", y=\"PetalWidthCm\")\nplt.title('Box Plot')\nplt.show()","edaa595d":"ax = sns.violinplot(data=data, x=\"Species\", y=\"PetalWidthCm\")\nplt.title('Violin Plot')\nplt.show()","c163a233":"ax = sns.stripplot(data=data, x=\"Species\", y=\"PetalWidthCm\")\nplt.title('Strip Plot')\nplt.show()","c4fff796":"sns.FacetGrid(data, hue=\"Species\", height=6,).map(sns.kdeplot, \"PetalWidthCm\",shade=True).add_legend()\nplt.title('KDE Plot')\nplt.show()","dbdacbfb":"sns.pairplot(data=data.drop('Id',axis=1), hue=\"Species\", height=3, diag_kind=\"hist\")\nplt.show()","1f2d6c03":"from sklearn.model_selection import train_test_split\ntrain, test = train_test_split(data, test_size = 0.3)\n\ntrain_X = train[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']]\ntrain_y = train['Species']\ntest_X = test[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']]\ntest_y = test['Species']","32989de7":"from sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.metrics import roc_curve,accuracy_score,plot_confusion_matrix","1866a9cc":"model = LogisticRegression()\nmodel.fit(train_X,train_y)\nprediction=model.predict(test_X)\nprint('The accuracy of the Logistic Regression is', accuracy_score(prediction,test_y))","b52c277a":"plot_confusion_matrix(model, test_X, test_y)\nplt.title('LR Confusion Matrix')\nplt.show()","d80ad407":"model = LogisticRegression()\nmodel.fit(train_X, train_y)\ny_pred_prob = model.predict_proba(test_X)[:,1]\nfpr, tpr, thresholds = roc_curve(test_y, y_pred_prob, pos_label='Iris-versicolor')\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='Logistic Regression')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Logistic Regression ROC Curve')\nplt.show()","68ee61a7":"model = SVC(C=0.1, kernel='poly')\nmodel.fit(train_X,train_y)\nprediction = model.predict(test_X)\nprint('The accuracy of the SVC is', accuracy_score(prediction,test_y))","090c0303":"plot_confusion_matrix(model, test_X, test_y)\nplt.title('SVC Confusion Matrix')\nplt.show()","88d58c4f":"model = SVC(C=0.1, kernel='poly', probability=True)\nmodel.fit(train_X, train_y)\ny_pred_prob = model.predict_proba(test_X)[:,1]\nfpr, tpr, thresholds = roc_curve(test_y, y_pred_prob, pos_label='Iris-versicolor')\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='SVC')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('SVC ROC Curve')\nplt.show()","c377a0d3":"model = KNeighborsClassifier(n_neighbors=2)\nmodel.fit(train_X,train_y)\nprediction = model.predict(test_X)\nprint('The accuracy of the KNeighbors Classifier is', accuracy_score(prediction,test_y))","e2a1c63d":"plot_confusion_matrix(model, test_X, test_y)\nplt.title('KNN Confusion Matrix')\nplt.show()","bfa2dd13":"model = KNeighborsClassifier(n_neighbors=2)\nmodel.fit(train_X, train_y)\ny_pred_prob = model.predict_proba(test_X)[:,1]\nfpr, tpr, thresholds = roc_curve(test_y, y_pred_prob, pos_label='Iris-versicolor')\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='KNN')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('KNN ROC Curve')\nplt.show()","7d163deb":"model = DecisionTreeClassifier(max_depth=5, random_state=13)\nmodel.fit(train_X,train_y)\nprediction = model.predict(test_X)\nprint('The accuracy of the SVC is', accuracy_score(prediction,test_y))","a50b9df0":"plot_confusion_matrix(model, test_X, test_y)\nplt.title('Decision Tree Confusion Matrix')\nplt.show()","8fc353bc":"model = DecisionTreeClassifier(max_depth=5, random_state=13)\nmodel.fit(train_X, train_y)\ny_pred_prob = model.predict_proba(test_X)[:,1]\nfpr, tpr, thresholds = roc_curve(test_y, y_pred_prob, pos_label='Iris-virginica')\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='DT')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Decision Tree ROC Curve')\nplt.show()","beff24df":"# Sepal Width","43aa316d":"# SVC","6c702e37":"# Pairplot","01f486b6":"# Splitting the data","01efec4c":"# Decision Tree","93cd2fe5":"# KNN","62920d51":"# Description of Data","10ad27f9":"# Logistic Regression","1b20a9f4":"# Petal Width","fd6a433d":"# Sepal Length","595d16dd":"# Petal Length","4b1f6108":"This notebook contains all the visualizations for this <a href=\"https:\/\/github.com\/pratik-276\/End-to-End-Machine-Learning-Projects\/tree\/master\/IRIS%20Flower%20Classification%20Project\">ML project<\/a>."}}