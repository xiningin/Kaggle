{"cell_type":{"9a59cce7":"code","506d0139":"code","67f4c71e":"code","0bb30c4e":"code","f87913af":"code","766cf508":"code","6713c47a":"code","403109d2":"code","c76691f1":"code","efae2a7c":"code","4d2618d0":"code","6c7ca923":"code","79059d25":"code","b210e6ba":"code","c9e505bd":"code","93f51f3d":"code","54b5f4f5":"code","729e8d91":"code","6a807a8b":"code","c84a0c44":"code","499f6c73":"code","f04feedf":"code","21652198":"code","7022259a":"code","0bc40f34":"code","ac48d247":"code","161de3d8":"code","9c1810c5":"code","5671c5a2":"code","14663aad":"code","01f6ef27":"code","bcdc55b6":"code","53f86459":"code","82efc96d":"code","88084afc":"markdown"},"source":{"9a59cce7":"# display an image\nfrom IPython.display import Image\nImage(url='https:\/\/miro.medium.com\/max\/844\/1*MyKDLRda6yHGR_8kgVvckg.png') # Thanks manan-bedi2908 ","506d0139":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npd.set_option('display.max_columns' , None)","67f4c71e":"data = pd.read_csv('\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv')\ndata","0bb30c4e":"data.shape","f87913af":"data.dtypes.value_counts()","766cf508":"data.isnull().sum()","6713c47a":"df = data.drop(['RowNumber' , 'CustomerId' , 'Surname'] , axis=1)","403109d2":"# target \ndf.Exited.value_counts(normalize=True)","c76691f1":"# continuous and categorical variables\n\nvar_continuous = df.drop(['Exited' , 'Geography' , 'Gender' , 'HasCrCard' , 'IsActiveMember'] , axis = 1 )\nvar_categ = df[['Geography' , 'Gender' , 'HasCrCard' , 'IsActiveMember']]","efae2a7c":"var_continuous","4d2618d0":"var_categ","6c7ca923":"# Distributions continuous variables\nfor col in var_continuous:\n    plt.figure()\n    sns.distplot(df[col])","79059d25":"#viz categorical variables\nfor col in var_categ:\n    plt.figure()\n    df[col].value_counts().plot.pie()","b210e6ba":"# Dist target\/variables\n\nno_churn = df[df['Exited']==0]\nchurn = df[df['Exited'] == 1]","c9e505bd":"for col in var_continuous:\n    plt.figure()\n    sns.distplot(no_churn[col] , label = \"negative\")\n    sns.distplot(churn[col] , label = \"positive\")\n    plt.legend()","93f51f3d":"# Target \/ Age\nplt.figure(figsize=(20,10))\nsns.countplot(x='Age' , hue ='Exited' , data = df)","54b5f4f5":"# Target \/ categorical variables\npd.crosstab(df['Exited'] , df.Geography)","729e8d91":"for col in var_categ:\n    plt.figure()\n    sns.heatmap(pd.crosstab(df['Exited'] , df[col]) , annot=True)","6a807a8b":"# Preprocessing - Encoding\n\ndf = pd.get_dummies(df , drop_first=True)","c84a0c44":"plt.figure(figsize=(15,15))\nsns.pairplot(df)","499f6c73":"df","f04feedf":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr() , annot=True)","21652198":"# Target and features \nX = df.drop(['Exited'] ,  axis=1)\ny = df['Exited']\n","7022259a":"X","0bc40f34":"y","ac48d247":"# train - test - split\n\n\nfrom sklearn.model_selection import train_test_split\nX_train , X_test , y_train , y_test = train_test_split(X,y , test_size=0.2 , random_state = 5)","161de3d8":"# Standardizing the Dataset\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","9c1810c5":"X_train","5671c5a2":"# Features importance\nfrom sklearn.ensemble import ExtraTreesClassifier\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)","14663aad":"print(model.feature_importances_)","01f6ef27":"feat_importance = pd.Series(model.feature_importances_ , index=X.columns)\nfeat_importance.nlargest(5).plot(kind='barh') # \nplt.show()","bcdc55b6":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\nrf.fit(X_train,y_train)","53f86459":"y_pred = rf.predict(X_test)","82efc96d":"from sklearn.metrics import accuracy_score, confusion_matrix , f1_score , classification_report\ncm = confusion_matrix(y_test,y_pred)\n#f1 = f1_score(y_test , y_pred)\nprint(cm)\nprint(accuracy_score(y_test,y_pred))\nprint(classification_report(y_test,y_pred)) #1\n#print(f1)","88084afc":"### Random Forest Classifier"}}