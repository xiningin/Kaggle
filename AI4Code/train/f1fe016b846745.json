{"cell_type":{"e86b33bf":"code","5de35073":"code","8369b036":"code","68a0c684":"code","b42f1899":"code","ad17cc48":"code","8629cc7f":"code","2d8a66ee":"code","5c38132c":"code","5abf957c":"code","b1072e6f":"code","eceb2359":"code","a2f376d8":"markdown","aebae746":"markdown","6e8d7b64":"markdown","9d73a85b":"markdown","23305227":"markdown","176e9f04":"markdown","493cf4e0":"markdown","3d1a2db5":"markdown","55048e4a":"markdown","48e4f84c":"markdown","6d9136e0":"markdown","570df431":"markdown","5ff9d58e":"markdown","348625f8":"markdown","f33aecdd":"markdown","6cf36cdc":"markdown","6bdc22a5":"markdown","d4565a26":"markdown","90779795":"markdown","5331b16f":"markdown","589811a0":"markdown","f7c09992":"markdown","9f5a898f":"markdown","2865c73f":"markdown","af5d68be":"markdown"},"source":{"e86b33bf":"# Installing the matplotlib package\n\n!pip install matplotlib","5de35073":"# Import the matplotlib package \n\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","8369b036":"# Check all methods in plt library \n\ndir(plt)","68a0c684":"# Plot \n\nList_var = [1,2,3,4,10]\n\nplt.plot(List_var)","b42f1899":"# 'go' stands for green dots\n\nX_vals = [1,2,3,4,5]\n\nY_vals = [1,2,3,4,10]\n\nplt.plot(X_vals,\n         Y_vals, \n         'go')\n\nplt.show()","ad17cc48":"# Create a fully Complete Plot with Title , Legend and Names of Axis .\n\nX_vals = [1,2,3,4,5]\n\nY_vals = [1,2,3,4,10]\n\nplt.plot(X_vals,\n         Y_vals, \n         'go',\n         label='GreenDots')\n\nplt.title('A Simple Scatterplot')\n\nplt.xlabel('X Data ')\nplt.ylabel('Y Data')\n\nplt.legend(loc='best')  # legend text comes from the plot's label parameter.\n\nplt.show()","8629cc7f":"# Increase \/ change the default Plot Canvas Size \n\nplt.figure(figsize=(12,7)) # 12 is width, 7 is height\n\nX_vals = [1,2,3,4,5]\n\nY_vals = [1,2,3,4,10]\n\nplt.plot(X_vals,\n         Y_vals, \n         'go',\n         label='GreenDots')\n\nplt.title('A Simple Scatterplot')\n\nplt.xlabel('X Data ')\nplt.ylabel('Y Data')\n\nplt.legend(loc='best')  # legend text comes from the plot's label parameter.\n\nplt.show()","2d8a66ee":"# Create Figure and Subplots\nfig, (ax1, ax2) = plt.subplots(1,2,                   # 1 row & 2 colums \n                               figsize=(12,5),        # 12 width and 5 as height\n                               sharey=True,           # Y axis is to be common for subplots\n                               dpi=120)               # Dots per inch - Resolution \n\n# Plot\nax1.plot([1,2,3,4,5], [1,2,3,4,10], 'go')  # greendots\nax2.plot([1,2,3,4,5], [2,3,4,5,11], 'b*')  # bluestart\n\n# Title, X and Y labels, X and Y Lim\nax1.set_title('Scatterplot Greendots') \nax2.set_title('Scatterplot Bluestars')\n\nax1.set_xlabel('X');  ax2.set_xlabel('X')  # x label\nax1.set_ylabel('Y');  ax2.set_ylabel('Y')  # y label\n\nax1.set_xlim(0, 6) ;  ax2.set_xlim(0, 6)   # x axis limits\nax1.set_ylim(0, 12);  ax2.set_ylim(0, 12)  # y axis limits\n\n\nplt.tight_layout()\nplt.show()","5c38132c":"# Draw a Scatter plot \n\nimport numpy as np\n\nX_Data = np.linspace(0, 1., 100)\n\n# Scatterplot\nplt.scatter(X_Data, X_Data + np.random.randn(len(X_Data)))\n\nplt.title(\"Scatter Plot\")\n","5abf957c":"# Draw Bar Plot\n\n# Input Arrays\nn = np.array([0,1,2,3,4,5])\n\n# Bar Chart\nplt.bar(n, n**2, \n        align=\"center\", \n        width=0.5, \n        alpha=0.5)\n\nplt.title(\"Bar Chart\")\n","b1072e6f":"# Draw a Box plot \n\nX_Data = np.linspace(0, 1., 100)\n\n# Box Plot\nplt.boxplot(np.random.randn(len(X_Data)))\n\nplt.title(\"Box Plot\")","eceb2359":"# Draw a Histogram plot \n\nX_Data = np.linspace(0, 1., 100)\n\n# Box Plot\nplt.hist(np.random.randn(len(X_Data)))\n\nplt.title(\"Histogram\")","a2f376d8":"#### Install Matplotlib package","aebae746":"In the previous code , we had set lots of Plot attributes using individual set_XXX() methods. \n\n    Ex : ax1.set_title() , ax1.set_xlabel ....etc \n\n\nAlternately, to save keystrokes, we can set multiple things in one go using the ax.set().\n\n    ax1.set(title='Scatterplot Greendots', xlabel='X', ylabel='Y', xlim=(0,6), ylim=(0,12))\n    ax2.set(title='Scatterplot Bluestars', xlabel='X', ylabel='Y', xlim=(0,6), ylim=(0,12))","6e8d7b64":"### Matplotlib\n\nMatplotlib is the basis for static plotting in Python. Many other visualization tools are built on top of it, such as seaborn and Pandas DataFrames plot method. It is versatile meaning it is able to plot anything, but non-basic plots can be very verbose and complex to implement. On the other hand, basic plots such as histograms and scatter plots are very easy to do. If your goal is to make simple and quick basic plots, there is no big drawback. However, for more complex such as pair plots and heat maps, it is interesting to use some higher-level tools.\nThe matplotlib\u2019s website contains a very complete documentation, some tutorials and a huge variety of examples, which makes its use a lot easier.","9d73a85b":"**Matplotlib** is the most popular plotting\/visualization library in python. Using matplotlib, we can create pretty much any type of plot\/visualization.\n\n\n**Why Data Visualization is important**\n\nData visualization is important in analytics as it helps in making better business decisions. Since visual data is interpreted more easily than any other form of data, it improves our decision-making power. This becomes more significant in the case of Big Data where the volume and variety of data is extremely large and co-relating information is not always easy.","23305227":"LEt's take a step back and understand what did we do in the previous lines of code where we increased the Plot size.\n\nWell, every plot that matplotlib makes is drawn on something called 'figure'. \n\nWe can think of the figure object as a 'canvas' that holds all the subplots and other plot elements inside it.\n\nAnd a figure\/canvas can have one or more subplots inside it .\n\nEach subplot within a same figure are called axes, arranged in rows and columns. \n\nEvery figure has atleast one axes. (Don\u2019t confuse this axes with X and Y axis, they are different.)","176e9f04":"### Plotting a Scatter Plot \n\nUtilizing what we learnt earlier , lets buld a Scatter Plot .","493cf4e0":"Did you notice the line matplotlib.lines.Line2D in code output?\n\nThat\u2019s because Matplotlib returns the plot object itself besides drawing the plot.\n\nAlso , notice that the default Plot behaviour is 'Line Plot'","3d1a2db5":"#### Let\u2019s try to understand figure and axes in little more detail.\n\nSuppose, we want to draw our two sets of data points (green rounds and blue stars) in two separate plots side-by-side . How would we do that?\n\nWe can do that by creating two separate subplots, aka, axes using plt.subplots(1, 2). This creates and returns two objects:\n\n    * the figure  ( which is the complete canvas )\n    * the axes (subplots) inside the figure\n\n\nPreviously, we called plt.plot() to draw the points. Since there was only one axes (subplot) by default, it drew the points on that axes(subplot) itself.\n\nBut now, since we want the points to be drawn on 2 different subplots (axes), we have to call the plot function in the respective axes (ax1 and ax2 , as shown in below code) instead of plt.\n\nNotice in below code, we call ax1.plot() and ax2.plot() instead of calling plt.plot() twice.","55048e4a":"Now , lets learn how to overcome the default plotting of Line Plot and draw a Scatter Plot instead.\n\nlet\u2019s understand a bit more about what arguments plt.plot() expects. \n\nThe plt.plot accepts 3 basic arguments in the following order: (x, y, format).\n\nWhere - \n\n      x : The values for X axis \n      y : The values for Y axis \n      format : format is a short hand combination of {color}{marker}{line type}\n      \nFor example, the format 'go-' has 3 characters standing for: \u2018green colored dots with solid line\u2019. By omitting the line part (\u2018-\u2018) in the end, you will be left with only green dots (\u2018go\u2019), which makes it draw a scatterplot.\n\nFew commonly used short hand format examples are:\n* 'r*--' : \u2018red stars with dashed lines\u2019\n* 'ks.' : \u2018black squares with dotted line\u2019 (\u2018k\u2019 stands for black)\n* 'bD-.' : \u2018blue diamonds with dash-dot line\u2019.\n\n\nNote - For a complete list of colors, markers and linestyles, check out the help(plt.plot) command.","48e4f84c":"The plot created above is very 'Skeletal' with no information about name of the axis ,name of the plot ..etc .\n\nLets overcome this shortcoming by adding Title , name of the axis , Legend etc.","6d9136e0":"#### Let's draw a Box Plot ","570df431":"#### Import Matplotlib Package \n\nImporting process is the step using which , we load the functions from the package we will be needing in our program onto our Python instance ( into RAM ) and thus , becoming available for us to invoke the loaded functions.","5ff9d58e":"#### Now , lets draw a Histogram ","348625f8":"#### Lets , now decipher the above code and its output.\n\nWe just gave a list of random set of numbers to plt.plot() and it drew a line chart automatically.\n\nIt assumed the values of the X-axis to start from zero going up to as many items in the data.\n\nAnd values of Y-axis are taken as per the inputs provided .","f33aecdd":"### Objective of this Kernel :\nThis kernel endeavors to explain the Matplotlib working with examples for any one who is new to Matplotlib Package in Python.","6cf36cdc":"If you are new to numpy ,,,\n\nThen Numpy stands for Numerical Python and provides lots of functionalities related to N Dimensional Array .\n\nLets also understand some methods we had used in above code -\n\nnp.linspace(0, 1., 100) : Returns an array of 100 numbers spaced evenly between 0 & 1 . \n\nlen(X_Data) : returns number of elements in X_Data Array\n\nnp.random.randn(len()) : creates an array of 1 dimension in this case and fills it with random values as per standard normal distribution. \n\n\n\n","6bdc22a5":"## Python - Matplotlib for beginners \n\n\nPriyaranjan Mohanty","d4565a26":"Now , that we have understood the basic concepts of plotting , lets look at how we can create various types of plot .\n\n\n####  Scatter Plot ","90779795":"Before , we can use Matplotlib library and its corresponding features , we have to\n       \n         a) Install Matplotlib Package  &\n         b) IMport the package into our Python instance \n         \n         \nNote : Matplotlib is not a 'Built-in Module' shipped with core Python and hence to use it , we need to install the package .","5331b16f":"What if the size of the 'Plot Canvas' is too small for you and you want to increase the Plot Canvas size.\n\nThe easy way to do it is by setting the figsize inside plt.figure() method.","589811a0":"Now , its time to CREATE PLOTs ....\n\nLet\u2019s see what plt.plot() creates if we provide an arbitrary sequence of numbers as input .","f7c09992":"We can check all the methods available with in the matplotlib.pyplot library by employing one of the below methods ..\n\n         a) type plt. and then press <tab> , a drop down with all applicable methods will be shown\n         b) run the command dir(plt)\n ","9f5a898f":"You would also notice that we have imported the matplotlib.pyplot library with an alias of 'plt' .\n\nIn the rest of the script , we will be invoking functions from this library using the alias 'plt' as reference.\n","2865c73f":"#### Next , lets draw a Bar Plot","af5d68be":"#### Explanation of above lines of code\n\nmatplotlib.pyplot is usually imported as plt. It is the core object that contains the methods to create all sorts of charts and features in a plot.\n\nThe %matplotlib inline is a jupyter notebook specific command that let\u2019s you see the plots in the notbook itself."}}