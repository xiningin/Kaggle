{"cell_type":{"a17c73f6":"code","d2bef47e":"code","be6f2fc0":"code","aeba6c71":"code","25e99df1":"code","5c89db67":"code","57a6486c":"code","140446aa":"code","d2efcd05":"code","b0406346":"code","379ee4c3":"code","eb0bd6b0":"code","2208dfa0":"code","f1ccd5d6":"code","ec43b134":"code","de8de803":"code","3f5e77e5":"code","f3b235aa":"code","1572f048":"code","e86d9632":"code","56839224":"code","f6e2de59":"code","1ccc742e":"code","3c858cbf":"code","aeb15753":"code","639d4a4e":"code","08ae62b3":"code","9dd735a4":"code","7570ba06":"code","78e533fc":"code","e3ea4d96":"code","36b0900f":"code","0ce1822b":"code","7a3ff434":"code","39335a1f":"code","118ef2ec":"code","d59ba06f":"code","d0b4ad97":"code","90d45338":"code","9eba74b1":"code","447bec58":"code","6d34e1ab":"code","413620df":"code","26b86da9":"code","f6cc5e31":"code","d65a76d3":"code","4d1cc16d":"code","76218129":"code","a9d160ec":"code","bdd247cd":"code","87e15c5d":"code","9e135721":"code","b4138172":"code","46fc2007":"code","7ecef878":"code","f6a26d39":"code","3f19c835":"code","0cc2a360":"code","1d0b4232":"code","ce01e4b0":"code","b74f584c":"code","01b52b90":"code","154cfa8b":"code","e9f432b7":"markdown","1425ee52":"markdown","de9b1b2a":"markdown","6bea17bd":"markdown","44aa247e":"markdown","739f6c86":"markdown","593410d3":"markdown","90158099":"markdown","c7613cc8":"markdown","d679a2ed":"markdown","bb54b10e":"markdown","2944e1e1":"markdown","feffb77d":"markdown","fecb5af5":"markdown","ac2852e6":"markdown","bd0dc93e":"markdown","85266600":"markdown","174b5d53":"markdown","b34468f6":"markdown","dd7e1eea":"markdown","42ef1a16":"markdown","b932dc45":"markdown","28a418a8":"markdown","637363f1":"markdown","67501881":"markdown","3614f646":"markdown","53dcb35e":"markdown","466e88c9":"markdown","5fee122c":"markdown","64cfec0a":"markdown","282e3df0":"markdown","2909c483":"markdown","ac79eb38":"markdown","d7e867d8":"markdown","a204555c":"markdown","e5976235":"markdown","d386fb29":"markdown","af3bb155":"markdown","f1d2ead7":"markdown","6c28f0c7":"markdown","12f65444":"markdown","43523871":"markdown","5db9e79a":"markdown","19b9bb49":"markdown","11124cf2":"markdown","09ccb29d":"markdown","a77fbc91":"markdown","6cffdbdc":"markdown","2c8909ee":"markdown","9598c973":"markdown","1f8965ab":"markdown","726e8cf2":"markdown","a2c87de7":"markdown","1cb88ffc":"markdown","f867d2b2":"markdown","bcb4e9c9":"markdown","ee7eaaa3":"markdown","69ccb4ab":"markdown","f6edfac7":"markdown","b57b8045":"markdown","9a098e12":"markdown","494bb4f6":"markdown","4b36d81f":"markdown","242c170b":"markdown","8f5f1610":"markdown","7d009c4e":"markdown","004323ee":"markdown","682d84a0":"markdown","3ff482e8":"markdown","5512aa03":"markdown","e167d2b5":"markdown","3b9ae980":"markdown","f3d3c505":"markdown","94eaf7f1":"markdown","7c38b41e":"markdown","90eba08e":"markdown","d940b5d7":"markdown","ae34e859":"markdown","7b6fedd0":"markdown","6d09c384":"markdown","033efaf4":"markdown","b485f890":"markdown","6d7e3948":"markdown","628a8bea":"markdown","92159fb2":"markdown","f22491bd":"markdown","ded5c60d":"markdown","234e93b5":"markdown","8626cc62":"markdown","8c70c7f1":"markdown","7e340f24":"markdown","9e890b41":"markdown","d9acb742":"markdown","6decdceb":"markdown","794c23fe":"markdown","7eec5fc2":"markdown","5bef1c61":"markdown","fb590c66":"markdown","90ae1818":"markdown","5eac846a":"markdown","7f15358e":"markdown","38175caf":"markdown","bd74e68a":"markdown","0240c81f":"markdown","b75fd77f":"markdown","4a59c238":"markdown","9e63b361":"markdown"},"source":{"a17c73f6":"# data analysis\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\n\n# visualisation\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d2bef47e":"# load train.csv to pandas data frame, using 'PassengerId' as the index\nmaster_df = pd.read_csv('..\/input\/titanic\/train.csv' , index_col='PassengerId')\n\n# Create a working copy of the data frame for manipulation. The master will serve as the baseline.\nworking_df = master_df.copy()\n\n# Preview the data\nworking_df.head()","be6f2fc0":"# print shape of the dataset\nprint(\"There are {} rows and {} columns in the dataset.\".format(master_df.shape[0] , master_df.shape[1]))","aeba6c71":"# print basic summary of the dataset\nprint(master_df.info())","25e99df1":"# get count of missing values\nmaster_df.isnull().sum()","5c89db67":"# print statistical distrution of float and integer data types\nmaster_df.describe()","57a6486c":"# print statistical distrution of object types\nmaster_df.describe(include=['O'])","140446aa":"# create a new feature to extract title names from the Name column\nworking_df['Title'] = working_df.Name.apply(lambda name: name.split(',')[1].split('.')[0].strip())\n\n# get unique titles\nunique_titles = working_df['Title'].unique()\nprint(\"Unique Titles:\", len(unique_titles))\nprint(unique_titles)","d2efcd05":"# normalize titles into dictionary\ntitle_dictionary = {\n    \"Capt\":       \"Officer\",\n    \"Col\":        \"Officer\",\n    \"Major\":      \"Officer\",\n    \"Jonkheer\":   \"Royalty\",\n    \"Don\":        \"Royalty\",\n    \"Sir\" :       \"Royalty\",\n    \"Dr\":         \"Officer\",\n    \"Rev\":        \"Officer\",\n    \"the Countess\":\"Royalty\",\n    \"Dona\":       \"Royalty\",\n    \"Mme\":        \"Mrs\",\n    \"Mlle\":       \"Miss\",\n    \"Ms\":         \"Mrs\",\n    \"Mr\" :        \"Mr\",\n    \"Mrs\" :       \"Mrs\",\n    \"Miss\" :      \"Miss\",\n    \"Master\" :    \"Master\",\n    \"Lady\" :      \"Royalty\"\n}\n\n# map normalized title to Title feature vector\nworking_df.Title = working_df.Title.map(title_dictionary)\n\n# print value counts\nprint(working_df.Title.value_counts())\n# to do transform titles to ordinal values","b0406346":"working_df = working_df.drop(columns='Name')","379ee4c3":"# create a new feature to calculate number of relatives\nworking_df['Relatives'] = working_df['SibSp'] + working_df['Parch']\n\n# print value counts\nprint(working_df.Relatives.value_counts())","eb0bd6b0":"# create new feature to show if passenger was alone or with family\nworking_df['Alone'] = 0\nworking_df.loc[working_df['Relatives'] == 0, 'Alone'] = 1\n\n# print value counts\nprint(working_df.Alone.value_counts())","2208dfa0":"# convert sex to numeric values\nworking_df['Sex'] = working_df['Sex'].map({\"male\": 0, \"female\": 1})\n\n# print value counts\nprint(working_df.Sex.value_counts())","f1ccd5d6":"# first find all unique tickets\nunique_tickets = pd.concat(i for _, i in working_df.groupby(\"Ticket\") if len(i) == 1).index\n\n# create new feature\nworking_df['UniqueTicket'] = 0\nworking_df.loc[unique_tickets, 'UniqueTicket'] = 1\n\n# print value counts\nprint(working_df.UniqueTicket.value_counts())","ec43b134":"# drop ticket column\nworking_df = working_df.drop(columns='Ticket')","de8de803":"# print null value count\nprint(\"Null values:\", working_df['Survived'].isnull().sum())\n\n# print list of unique values to check for anything unusual\nprint(\"Unique values:\", working_df['Survived'].unique())","3f5e77e5":"# print null value count\nprint(\"Null values:\", working_df['Pclass'].isnull().sum())\n\n# print list of unique values to check for anything unusual\nprint(\"Unique values:\", working_df['Pclass'].unique())","f3b235aa":"# print null value count\nprint(\"Null values:\", working_df['Sex'].isnull().sum())\n\n# print list of unique values to check for anything unusual\nprint(\"Unique values:\", working_df['Sex'].unique())","1572f048":"# print null value count\nprint(\"Null values:\", working_df['SibSp'].isnull().sum())\n\n# print list of unique values to check for anything unusual\nprint(\"Unique values:\", working_df['SibSp'].unique())","e86d9632":"# print null value count\nprint(\"Null values:\", working_df['Parch'].isnull().sum())\n\n# print list of unique values to check for anything unusual\nprint(\"Unique values:\", working_df['Parch'].unique())","56839224":"# print null value count\nprint(\"Null values:\", working_df['Relatives'].isnull().sum())\n\n# print list of unique values to check for anything unusual\nprint(\"Unique values:\", working_df['Relatives'].unique())","f6e2de59":"# print null value count\nprint(\"Null values:\", working_df['Alone'].isnull().sum())\n\n# print list of unique values to check for anything unusual\nprint(\"Unique values:\", working_df['Alone'].unique())","1ccc742e":"# print null value count\nprint(\"Null values:\", working_df['UniqueTicket'].isnull().sum())\n\n# print list of unique values to check for anything unusual\nprint(\"Unique values:\", working_df['UniqueTicket'].unique())","3c858cbf":"# print null value count\nprint(\"Null values:\", working_df['Age'].isnull().sum())\n\n# calculate zscore for each value\nzscore = (working_df.Age - working_df.Age.mean()) \/ working_df.Age.std(ddof=0)\n\n# calculate outliers using zscore\noutliers = working_df.loc[abs(zscore) > 3]\n\n# print outliers\nprint(\"Outlier count:\", len(outliers))\n    ","aeb15753":"# extract age column from data fxrame\nage = working_df['Age']\n\n# correlate with other numerical columns\ncorr = working_df.drop(columns='Age').corrwith(age)\n\n# display as bar graph\nax = corr.plot.bar(rot=0)","639d4a4e":"age_pivot = pd.pivot_table(working_df, index=['Title'], values=['Age'], aggfunc=np.mean)\nage_pivot.plot(kind='bar')","08ae62b3":"age_pivot = pd.pivot_table(working_df, index=['Embarked'], values=['Age'], aggfunc=np.mean)\nage_pivot.plot(kind='bar')","9dd735a4":"# pre-requisites - as title and class hugely impacts the age of passenegers, they' both will be used, and the feature\n# with high score will be consiered or maybe both values\n\n# we first need to map Title to numerical values to allow the algorithm to run\nworking_df['TitleMapped'] = working_df['Title'].map({'Mr':0, 'Mrs':1, 'Miss':2, 'Master':3, 'Royalty':4, 'Officer':5})\n\n# getting all data with known age values to train our model\ndata = working_df.loc[working_df['Age'].notna()]\n\n# creating X = features (Title and Class) and Y = response variable (Age)\nX = data[['TitleMapped' , 'Pclass']]\ny = data['Age']\n\n\n# extracting dataframe of missing ages we want to impute\nmissing_ages = working_df['Age'][working_df['Age'].isna()]\n\n# imputing age using regression imputation\nfrom sklearn.linear_model import LinearRegression\nregression_classifier = LinearRegression()\n\n# splitting our data for training and testing - Sklearn builtin methods can also be used\nX_train = X.head(537)  # contains p-class and title for known ages\ny_train = y.head(537)  # contains the actual age for known ages\nX_test = X.tail(177)   # contains p-class and title for missing ages to predict missing ages\n\nmodel = regression_classifier.fit(X_train,y_train) # data fitted to model to train\n\n# predict missing ages\nage_result = model.predict(X_test)\n\n# age_result contains the imputed values and can be imputed by:\nworking_df.loc[ working_df['Age'].isnull(), 'Age'] = age_result\n\n# check all age values have been filled\nprint(\"Null values:\", working_df['Age'].isnull().sum())\n\n# drop TitleMapped as it is no longer required\nworking_df = working_df.drop(columns=\"TitleMapped\")","7570ba06":"# calculate zscore for each value\nzscore = (working_df.Age - working_df.Age.mean()) \/ working_df.Age.std(ddof=0)\n\n# calculate outliers using zscore\noutliers = working_df[abs(zscore) > 3]\n\n# print outliers\nprint(\"Outlier count:\", len(outliers))\nprint(\"Outliers:\")\noutliers","78e533fc":"# print null value count\nprint(\"Null values:\", working_df.Fare.isnull().sum())\n\nzscore = (working_df.Fare - working_df.Fare.mean()) \/ working_df.Fare.std(ddof=0)\n\n# calculate outliers using zscore\noutliers = working_df.loc[abs(zscore) > 3]\n\n# print outlier count\nprint(\"Outlier count:\", len(outliers))","e3ea4d96":"print(\"Outliers:\")\noutliers","36b0900f":"# group and count outlier values\noutliers.Fare.value_counts()","0ce1822b":"# print null value count\nprint(\"Null values:\", working_df.Cabin.isnull().sum())\n\n# print list of unique values to check for anything unusual\nprint(\"Unique count:\", working_df.Cabin.nunique())","7a3ff434":"working_df = working_df.drop(columns='Cabin')","39335a1f":"# print null value count\nprint(\"Null values:\", working_df.Embarked.isnull().sum())\n\n# print list of unique values to check for anything unusual\nprint(\"Unique values:\", working_df.Embarked.dropna().unique())","118ef2ec":"# print embarked value counts\nprint(working_df.Embarked.value_counts())","d59ba06f":"# fill emabrked na with 'S'\nworking_df.Embarked = working_df.Embarked.fillna('S')\n\n# confirm there are no more nulls\nprint(\"Null values:\", working_df.Embarked.isnull().sum())\nprint(working_df.Embarked.value_counts())","d0b4ad97":"# print null value count\nprint(\"Null values:\", working_df.Title.isnull().sum())\n\n# print list of unique values to check for anything unusual\nprint(\"Unique values:\", working_df.Title.unique())","90d45338":"# snapshot cleaned dataframe before selecting features\nclean_df = working_df.copy()\n\n# extract survived column from data frame\nsurvived = working_df['Survived']\n\n# correlate with other columns\ncorr = working_df.drop(columns='Survived').corrwith(survived)\n\n# display as bar graph\nax = corr.plot.bar(rot=0)","9eba74b1":"working_df = working_df.drop(columns=['SibSp', 'Parch', 'Relatives'])","447bec58":"pivot = pd.pivot_table(working_df, index=['Embarked'], values=['Survived'], aggfunc=np.mean)\npivot.plot(kind=\"bar\")","6d34e1ab":"pivot = pd.pivot_table(working_df, index=['Title'], values=['Survived'], aggfunc=np.mean)\npivot.plot(kind=\"bar\")","413620df":"# Visualise survival of each passenger class\nsns.set_style('whitegrid')\nsns.barplot(x='Pclass' , y='Survived' , data=working_df)\nplt.show()","26b86da9":"# Visualise distribution of males and females for each class\nax = sns.barplot(x='Pclass' , y='Sex' , data=working_df)\nax.set(ylabel='Percentage of Females')\nplt.show()","f6cc5e31":"# Calculating the value counts for our attributes\nmale_total = working_df[working_df['Sex']==0].shape[0]\nfemale_total = working_df[working_df['Sex']==1].shape[0]\nprint('Total male in our dataset:', male_total)\nprint('Total female in our dataset:', female_total)\n\n# Calculating value counts for male and female who survived\nmale_surv = working_df.loc[ (working_df['Sex'] == 0) & (working_df['Survived']==1)].shape[0]\nfemale_surv = working_df.loc[ (working_df['Sex'] == 1) & (working_df['Survived']==1)].shape[0]\nprint('\\nTotal male survived: {} ({}%)'.format(male_surv, round((male_surv \/ male_total)*100)))\nprint('Total female survived: {} ({}%)'.format(female_surv, round((female_surv \/ female_total)*100)))","d65a76d3":"# Visualizing male and female survivors\nsns.set_style('whitegrid')\nax = sns.barplot(x='Sex' , y='Survived' , data=working_df)\nax.set(xticklabels=[\"Male\", \"Female\"])\nplt.show()","4d1cc16d":"# Calculate average age of those who survived and those who died\npd.pivot_table(working_df, index=['Survived'], values=['Age'], aggfunc=np.mean)","76218129":"# create AgeGroup feature\nworking_df[\"AgeGroup\"] = 0\nworking_df.loc[ working_df['Age'] <= 10, 'AgeGroup'] = 10\nworking_df.loc[(working_df['Age'] > 10) & (working_df['Age'] <= 20), 'AgeGroup'] = 20\nworking_df.loc[(working_df['Age'] > 20) & (working_df['Age'] <= 30), 'AgeGroup'] = 30\nworking_df.loc[(working_df['Age'] > 30) & (working_df['Age'] <= 40), 'AgeGroup'] = 40\nworking_df.loc[(working_df['Age'] > 40) & (working_df['Age'] <= 50), 'AgeGroup'] = 50\nworking_df.loc[(working_df['Age'] > 50) & (working_df['Age'] <= 60), 'AgeGroup'] = 60\nworking_df.loc[(working_df['Age'] > 60) & (working_df['Age'] <= 70), 'AgeGroup'] = 70\nworking_df.loc[ working_df['Age'] > 70, 'AgeGroup'] = 80\n\n# confirm no abnormal values for AgeGroup\nworking_df.AgeGroup.value_counts()","a9d160ec":"# visualise AgeGroup vs Survived\nsns.barplot(x='AgeGroup' , y='Survived' , data=working_df)","bdd247cd":"# create IsChild feature\nworking_df[\"IsChild\"] = 0\nworking_df.loc[ working_df['Age'] <= 15, 'IsChild'] = 1\n\n# visualise IsChild vs Survived\nsns.barplot(x='IsChild' , y='Survived' , data=working_df)","87e15c5d":"working_df = working_df.drop(columns='AgeGroup')","9e135721":"# Plot Fare vs Survived\nsns.lineplot(x=\"Fare\", y=\"Survived\", data=working_df[working_df.UniqueTicket == 1])","b4138172":"# Plot Fare vs Pclass\nsns.barplot(x=\"Pclass\", y=\"Fare\", data=working_df[working_df.UniqueTicket == 1])","46fc2007":"# print percentage of alone passengers who have a unique ticket\nalone_total = working_df.loc[ working_df['Alone'] == 1 ].shape[0]\nalone_unique = working_df.loc[ (working_df['Alone'] == 1) & (working_df['UniqueTicket']==1) ].shape[0]\nprint(\"Percentage of Alone passengers who have unique tickets: {}%\\n\".format(round((alone_unique \/ alone_total)*100, 2)))\n\n# Correlate Alone and UniqueTicket through visualisation\nsns.barplot(x='Alone' , y='UniqueTicket' , data=working_df)","7ecef878":"# print correlation of Alone and Survived\nprint(\"Alone correlation:\", round(working_df.Alone.corr(working_df.Survived), 2))\n\n# print correlation of UniqueTicket and Survived\nprint(\"UniqueTicket correlation:\", round(working_df.UniqueTicket.corr(working_df.Survived), 2))","f6a26d39":"working_df = working_df.drop(columns=\"Alone\")","3f19c835":"# Visualise UniqueTicket vs Sex \/ Pclass\nax = sns.countplot(x=\"Sex\", hue=\"Pclass\", data=working_df[working_df.UniqueTicket == 1])\nax.set(xticklabels=[\"Male\", \"Female\"])\nplt.show()","0cc2a360":"# Visualise Embarked vs Sex\nsns.catplot(x=\"Embarked\", y=\"Sex\", kind=\"bar\", data=working_df, ci=None)","1d0b4232":"# Visualise Embarked vs Pclass\nsns.countplot(x=\"Embarked\", hue=\"Pclass\", data=working_df)","ce01e4b0":"# Visualizing survivors by title\nsns.set_style('whitegrid')\nsns.barplot(x='Title' , y='Survived' , data=working_df,ci=None)\nplt.show()\n","b74f584c":"#visualizing Title and Passenger class \n# A quick sanity check confirms prior observations\n# Passenger class is a strong indicator of survival (i.e. First & Second passengers had a significantly higher rate of survival to Third class passengers)\n# Gender is a strong indicator of survival (i.e. Female titles had a significantly higher rate of survival to Male titles)\nsns.catplot(\n    x=\"Title\", y=\"Survived\", hue=\"Pclass\", kind=\"bar\",\n    data=working_df, \n    ci=None,\n    height=8.27, aspect=11.7\/8.27\n)","01b52b90":"# Passengers with female titles ('Ms' or 'Miss') had a significantly higher rate of survival than male titles (Mr, Master)\n# All female royals & all females officers survived\n# Strengthens the case Gender is a strong indicator of survival\ng = sns.catplot(x=\"Title\", y=\"Survived\", hue=\"Sex\", kind=\"bar\", \n                data=working_df,\n                ci=None,legend=False, height=8.27, aspect=11.7\/8.27)\nplt.legend(labels=['Male', 'Female'])\nplt.show(g)","154cfa8b":"#Interestingly, first class Mr's, Royals and Officers had a comparably low rate of survival\n# This subset weakens PClass as an indicator of survival, though strengthens the claim of gender\nsubset = working_df.loc[\n    ( \n        (working_df['Title']=='Mr') | (working_df['Title']=='Officer') | (working_df['Title']=='Royalty')) &\n        (working_df['Pclass']==1) &\n        (working_df['Sex']==0)\n]\nsubset.shape[0]\ng = sns.catplot(x=\"Title\", y=\"Survived\", kind=\"bar\", \n                data=subset,\n                ci=None,legend=False, height=8.27, aspect=11.7\/8.27)\nplt.show(g)\n#In this sense, this subset presents a counter-example to our previous observations around Passenger class, but strengthens the case for gender as strong indicators\ng = sns.catplot(x=\"Title\", y=\"Survived\", hue=\"Sex\", kind=\"bar\", \n                data=working_df.loc[\n                (working_df['Pclass']==1)\n                ],\n                ci=None,legend=False, height=8.27, aspect=11.7\/8.27)\nplt.legend(labels=['Male', 'Female'])\nplt.show(g)","e9f432b7":"## 3.5 Summary <a class=\"anchor\" id=\"3_5\"><\/a>\nAfter feature engineering, our feature set has expanded to:\n- Discrete - Survived, Pclass, Sex, Sibsp, Parch, Relatives, Alone, UniqueTicket\n- Continuous - Age, Fare\n- Ordinal - Cabin, Embarked, Title","1425ee52":"As the average age of survivors is lower than the average age of those who died, we can assume younger passengers were prioritised over older passengers.\nWe can explore this further by creating age clusters.","de9b1b2a":"# First class passengers by title","6bea17bd":"Females accounted for less than 50% of passengers from Cherbourg. Sex does not account for the bias.  \nWe will check Pclass next.","44aa247e":"### 4.2.2 Fare  <a class=\"anchor\" id=\"4_2_2\"><\/a>","739f6c86":"Statistical distrubiton of numerical features:","593410d3":"## 3.3 Sex <a class=\"anchor\" id=\"3_3\"><\/a>\nSex contains two possible values male and female. We can more easily work with this information by coverting it to numeric data where 0 = male and 1 = female.","90158099":"As expected, first class passengers paid more, followed by second, then third.  \nThe correlation seen between Fare and Survived is likely a derivative of Pclass.","c7613cc8":"***What impact does sex have on survival?***","d679a2ed":"# Passenger class & Title","bb54b10e":"### 4.1.5 Parents \/ Children (Parch) <a class=\"anchor\" id=\"4_1_5\"><\/a>","2944e1e1":"We will impute our missing ages using Linear Regression imputation, we will be keeping very simple for now, but more complexities can be added to further improve the imputation","feffb77d":"# 5. Feature Selection <a class=\"anchor\" id=\"5\"><\/a>\nThe primary goal of our analysis is to indentify which impacts had the greatest impact on a passengers chance of survivial. Features will be selected based on this criteria.","fecb5af5":"# SIT307 T1 2021\n# Assignment 2 - Data Mining Project\n***Group 5*** - Rhys McMillan (218335964), Brenton Fleming (217603898), Neb Miletic (218489118), Sean Pain (218137385), Oliver Bennett (218143462), Muhammad Sibtain (219345654), Asim Arshad (219337467)  \n  \n***Data*** - Titanic: Machine Learning From Disaster (https:\/\/www.kaggle.com\/c\/titanic\/data)","ac2852e6":"### 4.3.1 Cabin  <a class=\"anchor\" id=\"4_3_1\"><\/a>","bd0dc93e":"### 4.1.4 Siblings \/ Souse (SibSp) <a class=\"anchor\" id=\"4_1_4\"><\/a>","85266600":"Ticket can be be dropped in favour of UniqueTicket.","174b5d53":"***Is Embarked actually a survival indicator?***  \nWe saw during feature selection that passengers who embarked in Cherbourg had a higher survival rate than those who embarked at Queenstown or Southampton.  \nIt doesn't seem logical that a persons port of embarkation would be a factor considered when prioritising survival during a time of crisis. We should cross reference embarked with other strong survival indicators to account for the Cherbourg bias.","b34468f6":"## 1.1 Import Relevant Libraries <a class=\"anchor\" id=\"1_1\"><\/a>","dd7e1eea":"## 2.2 Properties <a class=\"anchor\" id=\"2_2\"><\/a>\nExamine the basic shape and properties of the dataset.","42ef1a16":"Cherbourg has a much higher ratio of 1st class passengers to 3rd class passengers. This suggests that the higher survival rate of Cherbourg is infact just a coincidental indicator of Pclass. Embarked can therefore be discounted as a survival indicator.","b932dc45":"***What is the relationship between Fare and Survived?***","28a418a8":"### 4.1.2 Passenger Class (Pclass) <a class=\"anchor\" id=\"4_1_2\"><\/a>","637363f1":"Females were almost 4 times more likely than males to surive the sinking of the titanic.  \n**Observation 2:** Females were prioritised over males for survival.","67501881":"## 4.2 Continuous Data <a class=\"anchor\" id=\"4_2\"><\/a>\nData cleaning requirements for continuous data can be determined by:\n- Check for any missing values.\n- Identify any outliers using zscore (threshold = +- 3).","3614f646":"There are only seven outliers for age.  \nAll outliers are valid ages for a person and not erronous values. They can be retained in the dataset.  ","53dcb35e":"SibSp has no unusual or missing values. No data cleaning required.","466e88c9":"Spearman \/ Pearson correlation is not possible for categorical features.  \nCorrelation and selection of categorical features will be done by pivotting and visualising features against 'Survived'.","5fee122c":"Title has no unusual or missing values. No data cleaning required.","64cfec0a":"**Observation 3:** Children were much more likely to have survived than adults.  \nThis is a much more convincing indicator than our AgeGroup, so we will drop AgeGroup in favour of IsChild.","282e3df0":"Only 3 features contain null values - Age, Cabin, and Embarked.\n- Cabin null values consitute a significant portion of the data (687 of 891). Any imputation would likely introduce signficant bias. Consider dropping this feature.\n- Embarked null values only constitue a very minor portion of the data (2 of 891). Imputation of this feature will have minimal impact on correlation. Any simple imputation method will suffice.\n","2909c483":"Categorical features can be checked by pivotting against age.  \nPivot Title vs Mean Age:","ac79eb38":"## 3.2 Relatives <a class=\"anchor\" id=\"3_2\"><\/a>\nSibSp (number of siblings or spouse) and Parch (number of parents or children) both relate to the number of relatives on board along with the passenger. These values can be combined as a single 'Relatives' feature.","d7e867d8":"We will first impute the missing values, then validate and handle outliers.","a204555c":"**Observation 1:** Survival of first class passengers was prioritised, followed by second class, then third.  \nTo confirm, we should investigate if there are any other relationships between Pclass and strong survival idicators which could account for the bias.","e5976235":"### 4.3.2 Embarked <a class=\"anchor\" id=\"4_3_2\"><\/a>","d386fb29":"Pivot Embarked vs Mean Age:","af3bb155":"## 5.1 Numerical Features <a class=\"anchor\" id=\"5_1\"><\/a>\nCorrelate all numerical features against survival.","f1d2ead7":"There are multiple instances of the most extreme outliers. All outliers are also from first class, which would expect to have higher ticket costs. We do not believe these are erronous values and will be retained in the dataset.","6c28f0c7":"86% of passengers travelling alone had a UniqueTicket. We can conclude that both features are represententing essentially the same group of passengers. To reduce the number of dimensions in our dataset we can drop either Alone or UniqueTicket.\nWe will drop whichever has the lower correlation with survived:","12f65444":"## 6.8 Title <a class=\"anchor\" id=\"6_8\"><\/a>","43523871":"### 4.1.7 Alone  <a class=\"anchor\" id=\"4_1_7\"><\/a>","5db9e79a":"What impact does Title have on Survived?","19b9bb49":"Finally we will take a closer look at the selected features to identify any interesting relationships or trends.","11124cf2":"***What is the distribution of males and females for each class?***","09ccb29d":"## 6.7 Embarked <a class=\"anchor\" id=\"6_7\"><\/a>","a77fbc91":"## 4.1 Discrete Data <a class=\"anchor\" id=\"4_1\"><\/a>\nData cleaning requirements for discrete data can be determined by:\n- Check for any missing values.\n- Inspect unique values to determine if any do not make sense.","6cffdbdc":"Embarked shows an uneven distrubiton of survival rate across the different values. This suggests there is some correlation between Embarked and Survived.","2c8909ee":"## 2.4 Null Values <a class=\"anchor\" id=\"2_4\"><\/a>","9598c973":"Parch has no unusual or missing values. No data cleaning required.","1f8965ab":"We will drop Alone in favour of UniqueTicket.","726e8cf2":"The distribution of males and females between each class does not account for the bias in Pclass survival. **Observation 1** still holds true.","a2c87de7":"## 2.3 Features <a class=\"anchor\" id=\"2_3\"><\/a>\nThe dataset contains 3 data types - float64, int64 and object. We will initially assume float64 represents continuous data, int64 represents discrete data and object represents categorical data. The data frame data type does not different between nominal and ordinal data. Manual inspection determined all categorical data to be nominal. Our feature set can therefore be classified as:\n\n - Discrete - Survived, Pclass, Sibsp, Parch\n - Continuous - Age, Fare\n - Ordinal - Name, Sex, Ticket, Cabin, Embarked","1cb88ffc":"Embarked contains 2 missing values and no unusual values. ","f867d2b2":"# Titles & Gender","bcb4e9c9":"### 5.2.1 Embarked  <a class=\"anchor\" id=\"5_2_1\"><\/a>\nPivot and visualise embarked vs survival.","ee7eaaa3":"From this graph we can see a general trend that younger people had a higher survival rate than older people, but there are spikes in the middle which prevent us using this as a definitive rule.  \nWe can identify there is a high survival rate of those in the 0 to 10 category, decreasing towards the 10 to 20 category.  \nWe will split between the two and categories those 15 and below as children.","69ccb4ab":"## 6.2 Sex <a class=\"anchor\" id=\"6_2\"><\/a>","f6edfac7":"***Are Alone and UniqueTicket representing the same group of passengers?***  \nFrom our earlier correlation we know both Alone and UniqueTicket showed similar correlation with survived.  \nBased on our assumption that a UniqueTicket allowed only one passenger to board, while a duplicate ticket allowed multiple passengers to board, it would stand to reason that most solo travellers would have a unique ticket.","b57b8045":"Title shows an uneven distribution of survival rates across the different titles, especially for Mr and Officer. Females, children and royalty appear to have the highest chance of survival. This suggests there is some correlation between Title and Survived.","9a098e12":"## 6.6 UniqueTicket <a class=\"anchor\" id=\"6_6\"><\/a>","494bb4f6":"We must first identify features which have a strong correlation with age to use as the basis of our imputation.  \nStart by correlating all numerical features against age:","4b36d81f":"Pclass, Sex, Age, Fare, Alone and UniqueTicket demonstrate low to moderate correlation with survival and require further investigation.  \nSibsp, Parch and Relatives demonstrate minimal to no correlation and will be dropped.","242c170b":"#### 4.3.1.1 Impute Missing Embarked Values  <a class=\"anchor\" id=\"4_3_3_1\"><\/a>\nAs only 2 of 891 values are missing, we can simply fill these with the most common embarked value.","8f5f1610":"### 5.2.2 Title  <a class=\"anchor\" id=\"5_2_2\"><\/a>","7d009c4e":"Statistical distribution of categorical features:","004323ee":"#### 4.2.1.1 Validate Fare Outliers  <a class=\"anchor\" id=\"4_2_1_1\"><\/a>\nIdentify and validate outliers.","682d84a0":"The name feature no longer holds any relevance and can be dropped from the dataset.","3ff482e8":"Sex has no unusual or missing values. No data cleaning required.","5512aa03":"As a large number of passengers were travelling alone (537 of 891) we can also represent this as a seperate 'Alone' feature.","e167d2b5":"# 2. Data Overview <a class=\"anchor\" id=\"2\"><\/a>\nWe begin our analysis by taking a cursory look at the structure and properties of our data set. This will give some context to the data and help guide our exploration.\n## 2.1 Data Dictionary <a class=\"anchor\" id=\"2_1\"><\/a>\nThe following data dictionary was provided alongside the dataset:\n<table>\n    <tr>\n        <th>Variable<\/th>\n        <th>Definition<\/th>\n        <th>Key<\/th>\n    <\/tr>\n    <tr>\n        <td>pclass<\/td>\n        <td>Ticket class<\/td>\n        <td>1 = 1st, 2 = 2nd, 3 = 3rd<\/td>\n    <\/tr>\n    <tr>\n        <td>sex<\/td>\n        <td>Sex<\/td>\n        <td><\/td>\n    <\/tr>\n    <tr>\n        <td>Age<\/td>\n        <td>Age in years<\/td>\n        <td><\/td>\n    <\/tr>\n    <tr>\n        <td>sibsp<\/td>\n        <td># of siblings \/ spouses aboard the Titanic<\/td>\n        <td><\/td>\n    <\/tr>\n    <tr>\n        <td>parch<\/td>\n        <td># of parents \/ children aboard the Titanic<\/td>\n        <td><\/td>\n    <\/tr>\n    <tr>\n        <td>ticket<\/td>\n        <td>Ticket number<\/td>\n        <td><\/td>\n    <\/tr>\n    <tr>\n        <td>fare<\/td>\n        <td>Passenger fare<\/td>\n        <td><\/td>\n    <\/tr>\n    <tr>\n        <td>cabin<\/td>\n        <td>Cabin number<\/td>\n        <td><\/td>\n    <\/tr>\n    <tr>\n        <td>embarked<\/td>\n        <td>Port of Embarkation<\/td>\n        <td>C = Cherbourg, Q = Queenstown, S = Southampton<\/td>\n    <\/tr>\n<\/table>","3b9ae980":"## 2.5 Statistical Distribution <a class=\"anchor\" id=\"2_5\"><\/a>","f3d3c505":"# 6. Exploratory Data Analysis (EDA) <a class=\"anchor\" id=\"6\"><\/a>","94eaf7f1":"## 6.4 Fare <a class=\"anchor\" id=\"6_4\"><\/a>","7c38b41e":"### 4.1.1 Survived <a class=\"anchor\" id=\"4_1_1\"><\/a>","90eba08e":"## 1.2 Load Data from File <a class=\"anchor\" id=\"1_2\"><\/a>\nThe source data (https:\/\/www.kaggle.com\/c\/titanic\/data) contains two datasets - train.csv and test.csv.  \nTrain.csv is intended for model training and contains the entire feature set.  \nTest.csv is intended for testing a trained model and does not contain the outcome ('Survived').\n\nFor our analysis, we will be using train.csv only.","d940b5d7":"### 4.1.8 UniqueTicket  <a class=\"anchor\" id=\"4_1_8\"><\/a>","ae34e859":"## 6.1 Passenger Class (PClass) <a class=\"anchor\" id=\"6_1\"><\/a>","7b6fedd0":"## 6.3 Age <a class=\"anchor\" id=\"6_2\"><\/a>","6d09c384":"Pclass has no unusual or missing values. No data cleaning required.","033efaf4":"Alone has no unusual or missing values. No data cleaning required.","b485f890":"***What type of passengers were travelling with a unique ticket?***","6d7e3948":"Survived has no unusual or missing values. No data cleaning required.","628a8bea":"Relatives has no unusual or missing values. No data cleaning required.","92159fb2":"## 5.2 Categorical Features <a class=\"anchor\" id=\"5_2\"><\/a>","f22491bd":"### 4.2.1 Age  <a class=\"anchor\" id=\"4_2_1\"><\/a>","ded5c60d":"Cabin is missing a significant portion of data. No meaningful correlation will be possible from this feature and it will be dropped from the data set.","234e93b5":"# 1. Preparation <a class=\"anchor\" id=\"1\"><\/a>","8626cc62":"## 3.4 UniqueTicket <a class=\"anchor\" id=\"3_4\"><\/a>\nTicket contains 681 unique values. As is, strong correlation with any other feature will be highely unlikely. We will add a new feature 'UniqueTicket' to specify if a ticket number is unique in the dataset or a duplicate. The assumption is that a duplicate ticket number permitted more than 1 person to board.","8c70c7f1":"***What impact does Passenger Class have on survival***","7e340f24":"# 3. Feature Engineering <a class=\"anchor\" id=\"3\"><\/a>","9e890b41":"### 4.1.6 Relatives  <a class=\"anchor\" id=\"4_1_6\"><\/a>","d9acb742":"## 4.3 Nominal Data  <a class=\"anchor\" id=\"4_3\"><\/a>\nData cleaning requirements for discrete data can be determined by:\n- Check for any missing values.\n- Inspect unique values to determine if any do not make sense.","6decdceb":"***What impact did age have on survival?***","794c23fe":"Most common value is 'S'. Fill missing embarked values with 'S'.","7eec5fc2":"### 4.3.3 Title  <a class=\"anchor\" id=\"4_3_3\"><\/a>","5bef1c61":"UniqueTicket has no unusual or missing values. No data cleaning required.","fb590c66":"Plotting Fare vs Survived does not reveal any direct relationships between the two variables.  \nIs Fare just a rough indicator of Pclass?","90ae1818":"A passenger travelling with a unique ticket was most likely to be a third class male.","5eac846a":"## 3.1 Title <a class=\"anchor\" id=\"3_1\"><\/a>\nAll name values are unique in the data, as such no correlation is possible using this feature. As the name feature currently contains both the name and title of the passenger, we can extract title from this feature.","7f15358e":"### 4.1.3 Sex <a class=\"anchor\" id=\"4_1_3\"><\/a>","38175caf":"#### 4.2.1.1 Impute Missing Age Values  <a class=\"anchor\" id=\"4_2_1_1\"><\/a>","bd74e68a":"## 6.5 Alone <a class=\"anchor\" id=\"6_5\"><\/a>","0240c81f":"We can further refine this list by grouping similar titles.","b75fd77f":"## Table of Contents\n\n* [1. Preparation](#1)\n    * [1.1 Import Relevant Libraries](#1_1)\n    * [1.2 Load Data from File](#1_2)\n* [2. Data Overview](#2)\n    * [2.1 Data Dictionary](#2_1)\n    * [2.2 Properties](#2_2)\n    * [2.3 Features](#2_3)\n    * [2.4 Null Values](#2_4)\n    * [2.5 Statistical Distribution](#2_5)\n* [3. Feature Engineering](#3)\n    * [3.1 Title](#3_1)\n    * [3.2 Relatives](#3_2)\n    * [3.3 Sex](#3_3)\n    * [3.4 UniqueTicket](#3_4)\n    * [3.5 Summary](#3_5)\n* [4. Data Cleaning](#4)\n    * [4.1 Discrete Data](#4_1)\n        * [4.1.1 Survived](#4_1_1)\n        * [4.1.2 Passenger Class (Pclass)](#4_1_2)\n        * [4.1.3 Sex](#4_1_3)\n        * [4.1.4 Siblings \/ Spouse (SibSp)](#4_1_4)\n        * [4.1.5 Parents \/ Children (Parch)](#4_1_5)\n        * [4.1.6 Relatives](#4_1_6)\n        * [4.1.7 Alone](#4_1_7)\n        * [4.1.8 UniqueTicket](#4_1_8)\n    * [4.2 Continuous Data](#4_2)\n        * [4.2.1 Age](#4_2_1)\n        * [4.2.2 Fare](#4_2_2)\n    * [4.3 Nominal Data](#4_3)\n        * [4.3.1 Cabin](#4_3_1)\n        * [4.3.2 Embarked](#4_3_2)\n        * [4.3.3 Title](#4_3_3)\n* [5. Feature Selection](#5)\n    * [5.1 Numerical Features](#5_1)\n    * [5.2 Categorical Features](#5_2)\n        * [5.2.1 Embarked](#5_2_1)\n        * [5.2.2 Title](#5_2_2)\n* [6. Exploratory Data Analysis (EDA)](#6)\n    * [6.1 Passenger Class (PClass)](#6_1)\n    * [6.2 Sex](#6_2)\n    * [6.3 Age](#6_3)\n    * [6.4 Fare](#6_4)\n    * [6.5 Alone](#6_5)\n    * [6.6 UniqueTicket](#6_6)\n    * [6.7 Embarked](#6_7)\n    * [6.8 Title](#6_8)","4a59c238":"# 4. Data Cleaning <a class=\"anchor\" id=\"4\"><\/a>\nIndividually inspect each feature to determine unusual or missing values. Clean and impute values as required.","9e63b361":"#### 4.2.1.2 Validate Age Outliers  <a class=\"anchor\" id=\"4_2_1_2\"><\/a>\nIdentify and validate outliers."}}