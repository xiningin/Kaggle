{"cell_type":{"3849deed":"code","19e42016":"code","4f8ff9a3":"code","8d92bc4a":"code","2685028c":"code","dfe96131":"code","4f0cd677":"code","44a015cd":"code","34b8d325":"code","e66d5406":"code","b3e05b4c":"code","878547f1":"code","32c9f135":"code","0625f3a9":"code","0d1de130":"code","bfff64f4":"code","6d7d53a9":"code","ad3c0da6":"code","f580dfd4":"code","9594caaf":"code","9c67b661":"code","358f5f86":"code","c71c79cf":"code","7fc06966":"code","0dfbcff6":"code","733a70d2":"code","d01e8340":"code","830f4870":"code","748c970b":"code","f7946107":"code","cf9546a0":"code","7c51ae96":"code","0cf0ce49":"code","ef92058a":"code","b4ab6806":"code","7e7f0e6b":"code","1c9df068":"code","23d0eee9":"code","d9be818b":"code","e1fa811d":"code","89a90957":"code","8181fe80":"code","6745eef9":"code","75dc2288":"code","dd4e5ebe":"code","14a70e03":"code","7f356cab":"code","78f7fc7f":"code","915f9d32":"code","db1ef33b":"code","4c09f62e":"code","a665a5fa":"code","46210a69":"code","5302a9f0":"code","a56b5de2":"code","9d8a0721":"code","ebcc3bcd":"code","0e2ae2b8":"code","e36b9807":"code","71e1af56":"code","21b50166":"code","1e4cd466":"code","eda9c3f8":"code","966c3d3d":"code","ca7b8542":"code","69cbd2ea":"code","250675ba":"code","cb922d5d":"code","f9f0a25c":"code","b3cc2747":"code","8568e09e":"code","18ef7219":"code","01057d5e":"code","052a5e75":"code","e845c5bc":"code","485c408f":"code","9f5553bc":"code","810305da":"code","847a6b6d":"code","ca14efcb":"code","93505222":"code","bdc5de5a":"code","183b439d":"code","189ebbfd":"code","4c118b29":"code","0dd9b9ea":"code","3259f5d0":"code","4d149aba":"code","a4539dc6":"code","27db91ec":"markdown","45ea9e36":"markdown","96822ed5":"markdown","26bf65c5":"markdown","cb3b527a":"markdown","eb349f94":"markdown","b27de25e":"markdown","88bf9de5":"markdown","b0a17425":"markdown","4cdbfe67":"markdown","af5bc17c":"markdown","6af13784":"markdown","3cfb1e5c":"markdown","68557107":"markdown","807e6d27":"markdown","5d43010c":"markdown","1f9de34e":"markdown","779c4de8":"markdown","5ab1cab2":"markdown","d9c6a505":"markdown","2b61c8f3":"markdown","0702983a":"markdown","24db6a94":"markdown","a9f20d83":"markdown","22704b67":"markdown","984363e2":"markdown","516650ba":"markdown","0dae80e1":"markdown","0256ef1c":"markdown","ac67dda5":"markdown","a32edbd8":"markdown","8d1c132f":"markdown","9c26b99a":"markdown","e3827d3e":"markdown","02fcffd0":"markdown","5ccf80b3":"markdown","8e056e8c":"markdown","31e67476":"markdown","736e7213":"markdown","b60f84a2":"markdown"},"source":{"3849deed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","19e42016":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","4f8ff9a3":"train_df.columns","8d92bc4a":"train_df.head()","2685028c":"train_df.describe()","dfe96131":"train_df.info()","4f0cd677":"def bar_plot(variable):\n    \"\"\"\n     input: variable example : Sex\n     output: bar plot & value count\n     \n    \"\"\"\n    #get feature\n    var = train_df[variable]\n    #count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n","44a015cd":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","34b8d325":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","e66d5406":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","b3e05b4c":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","878547f1":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","32c9f135":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","0625f3a9":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","0d1de130":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","bfff64f4":"def detect_outliers(df,features):\n    outlier_indeces = []\n    \n    for c in features:\n        #1st quartile\n        Q1 = np.percentile(df[c],25)\n        \n        #3rd quartile\n        Q3 = np.percentile(df[c],75)\n        \n        #IQR\n        IQR = Q3-Q1\n        \n        #Outlier Step\n        outlier_step = IQR * 1.5\n        \n        #detect outlier and their indeces \n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        \n        #store indeces \n        outlier_indeces.extend(outlier_list_col)\n        \n    outlier_indeces = Counter(outlier_indeces)\n    multiple_outliers = list(i for i, v in outlier_indeces.items() if v >2)\n        \n    return multiple_outliers\n        ","6d7d53a9":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","ad3c0da6":"# drop outliers \ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\"]),axis = 0).reset_index(drop = True)","f580dfd4":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df], axis = 0).reset_index(drop = True)","9594caaf":"train_df.columns[train_df.isnull().any()]","9c67b661":"train_df.isnull().sum()","358f5f86":"train_df[train_df[\"Embarked\"].isnull()]","c71c79cf":"train_df.boxplot(column = \"Fare\", by = \"Embarked\")\nplt.show()","7fc06966":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","0dfbcff6":"train_df[train_df[\"Embarked\"].isnull()]","733a70d2":"train_df[train_df[\"Fare\"].isnull()]","d01e8340":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3 ][\"Fare\"]))","830f4870":"train_df[train_df[\"Fare\"].isnull()]","748c970b":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","f7946107":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","cf9546a0":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","7c51ae96":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","0cf0ce49":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","ef92058a":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","b4ab6806":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","7e7f0e6b":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","1c9df068":"train_df[train_df[\"Age\"].isnull()]","23d0eee9":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","d9be818b":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\nplt.show()","e1fa811d":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","89a90957":"#train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","8181fe80":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","6745eef9":"train_df[\"Age\"][train_df[\"Age\"].isnull()].index","75dc2288":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    print(age_pred)\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","dd4e5ebe":"train_df[train_df[\"Age\"].isnull()]","14a70e03":"train_df[\"Name\"].head(10)","7f356cab":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","78f7fc7f":"train_df[\"Title\"].head(10)","915f9d32":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","db1ef33b":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","4c09f62e":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","a665a5fa":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","46210a69":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","5302a9f0":"train_df.head()","a56b5de2":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","9d8a0721":"train_df.head()","ebcc3bcd":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","0e2ae2b8":"train_df.head()","e36b9807":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","71e1af56":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","21b50166":"train_df.head(10)","1e4cd466":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","eda9c3f8":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","966c3d3d":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()","ca7b8542":"train_df[\"Embarked\"].head()","69cbd2ea":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","250675ba":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","cb922d5d":"train_df[\"Ticket\"].head(20)","f9f0a25c":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","b3cc2747":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","8568e09e":"train_df[\"Ticket\"].head(20)","18ef7219":"train_df.head()","01057d5e":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","052a5e75":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","e845c5bc":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","485c408f":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","9f5553bc":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","810305da":"train_df.columns","847a6b6d":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","ca14efcb":"train_df_len","93505222":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","bdc5de5a":"test.head()","183b439d":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","189ebbfd":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","4c118b29":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","0dd9b9ea":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","3259f5d0":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","4d149aba":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","a4539dc6":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","27db91ec":"<a id = \"10\"><\/a>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","45ea9e36":"<a id = \"6\" ><\/a>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived \n* SibSp - Survived\n* Parch - Survived","96822ed5":"<a id = \"18\"><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived","26bf65c5":"<a id = \"1\" ><\/a>\n# Load and Check Data","cb3b527a":"<a id = \"12\"><\/a><br>\n## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","eb349f94":"<a id = \"22\"><\/a><br>\n## Name -- Title","b27de25e":"<a id = \"29\"><\/a><br>\n# Modeling","88bf9de5":"<a id = \"30\"><\/a><br>\n## Train - Test Split","b0a17425":"# Introduction\nThe sinking of Titanic is on of the most notorious shipwrecks in the history.In 1912, during her voyage, the Titanic sank colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color = 'green'>\nContent:\n    \n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis ](#3)\n        * [Categorical Variable Analysis ](#4)\n        * [Numerical Variable Analysis ](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Deteciton](#7)    \n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)    \n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32) \n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","4cdbfe67":"<a id = \"24\"><\/a><br>\n## Embarked","af5bc17c":"<a id = \"31\"><\/a><br>\n## Simple Logistic Regression","6af13784":"<a id = \"19\"><\/a><br>\n## Embarked -- Sex -- Fare -- Survived","3cfb1e5c":"<a id = \"25\"><\/a><br>\n## Ticket","68557107":" <a id = \"3\" ><\/a>\n # Univariate Variable Analysis\n* Categorical Variable : Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable : Fare, Age and PassengerId","807e6d27":"<a id = \"8\"><\/a>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","5d43010c":"<a id = \"28\"><\/a><br>\n## Drop Passenger ID and Cabin ","1f9de34e":"<a id = \"9\"><\/a>\n## Find Missing Value","779c4de8":" * float64(2) : Fare and Age\n * int64(5) : PassengerId, Survived, Pclass, SibSp and Parch\n * object(5) : Name, Sex, Ticket, Cabin and Embarked","5ab1cab2":"**Age is not correlated with sex but it is correlated with parch, sibsp and pclass.**","d9c6a505":"1st class passengers are older than 2nd, and 2nd is older than 3rd class. ","2b61c8f3":"<a id = \"4\" ><\/a>\n## Categorical Variable","0702983a":"<a id = \"11\"><\/a><br>\n# Visualization","24db6a94":"<a id = \"16\"><\/a><br>\n## Age -- Survived","a9f20d83":"<a id = \"27\"><\/a><br>\n## Sex","22704b67":"<a id = \"26\"><\/a><br>\n## Pclass","984363e2":"<a id = \"5\" ><\/a>\n## Numerical Variable","516650ba":"<a id = \"34\"><\/a><br>\n## Prediction and Submission","0dae80e1":"<a id = \"33\"><\/a><br>\n## Ensemble Modeling","0256ef1c":"<a id = \"23\"><\/a><br>\n## Family Size","ac67dda5":"<a id = \"20\"><\/a><br>\n## Fill Missing: Age Feature","a32edbd8":"<a id = \"2\"><\/a>\n# Variable Description \n1. PassengerId : unique id number to each passenger\n1. Survived : passenger survive(1) or died(0)\n1. Pclass : passenger class\n1. Name : name\n1. Sex : gender of passenger\n1. Age : age of passenger\n1. SibSp :number of sibling\/spouses\n1. Parch : number of parents\/childern\n1. Ticket : ticket number\n1. Fare : amount of money spent on ticket\n1. Cabin :cabin category\n1. Embarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton) ","8d1c132f":"Sex is not informative for age prediction, age distribution seems to be same.","9c26b99a":"<a id = \"7\" ><\/a>\n# Outlier Deteciton","e3827d3e":"<a id = \"17\"><\/a><br>\n## Pclass -- Survived -- Age","02fcffd0":"<a id = \"21\"><\/a><br>\n# Feature Engineering","5ccf80b3":"<a id = \"13\"><\/a><br>\n## SibSp -- Survived","8e056e8c":"**Small familes have more chance to survive than large families.**","31e67476":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\nWe will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","736e7213":"<a id = \"15\"><\/a><br>\n## Pclass -- Survived","b60f84a2":"<a id = \"14\"><\/a><br>\n## Parch -- Survived"}}