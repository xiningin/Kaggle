{"cell_type":{"9eb203e9":"code","14f47201":"code","44b513e7":"code","d0c06f96":"code","87167531":"code","61df93c3":"code","a00b5366":"code","834518f7":"code","c64db8f6":"code","1ed8f4fb":"code","a86a94ce":"code","f85004ec":"code","34b644af":"code","f8c6da94":"code","644450a1":"code","793bcff8":"code","fc8385d0":"code","850f8c2f":"code","a3bb2977":"code","18164160":"code","5897d4c4":"code","12f2e90d":"code","dd97c77b":"code","d2614285":"code","15cb12ff":"code","cd243bc8":"markdown","fdefc35a":"markdown","2588cb0e":"markdown","4437d47e":"markdown"},"source":{"9eb203e9":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mplimg\nfrom matplotlib.pyplot import imshow\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\nimport tensorflow as tf\n\nfrom keras import layers\nfrom keras.preprocessing import image\nfrom keras.applications.imagenet_utils import preprocess_input\nfrom keras.layers import Input, Dense, Activation, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import AveragePooling2D, MaxPooling2D, Dropout\nfrom keras.models import Model\n\nimport keras.backend as K\nfrom keras.models import Sequential\n\nimport warnings\nwarnings.simplefilter(\"ignore\", category=DeprecationWarning)","14f47201":"SEED = 42\nnp.random.seed(SEED)\ntf.set_random_seed(SEED)","44b513e7":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntrain_df.head()","d0c06f96":"def prepareImages(data, m, dataset):\n    print(\"Preparing images\")\n    X_train = np.zeros((m, 100, 100, 3))\n    count = 0\n    \n    for fig in data['Image']:\n        #load images into images of size 100x100x3\n        img = image.load_img(\"..\/input\/\"+dataset+\"\/\"+fig, target_size=(100, 100, 3))\n        x = image.img_to_array(img)\n        x = preprocess_input(x)\n\n        X_train[count] = x\n        if (count%500 == 0):\n            print(\"Processing image: \", count+1, \", \", fig)\n        count += 1\n    \n    return X_train","87167531":"def prepare_labels(y):\n    values = np.array(y)\n    label_encoder = LabelEncoder()\n    integer_encoded = label_encoder.fit_transform(values)\n    # print(integer_encoded)\n\n    onehot_encoder = OneHotEncoder(sparse=False)\n    integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)\n    onehot_encoded = onehot_encoder.fit_transform(integer_encoded)\n    # print(onehot_encoded)\n\n    y = onehot_encoded\n    # print(y.shape)\n    return y, label_encoder","61df93c3":"X = prepareImages(train_df, train_df.shape[0], \"train\")\nX \/= 255","a00b5366":"y, label_encoder = prepare_labels(train_df['Id'])","834518f7":"train_df[\"Id\"].value_counts()","c64db8f6":"from keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(\n    rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    rotation_range=90,\n    featurewise_center=True,\n    width_shift_range=0.2,\n    height_shift_range=0.2)\n\ntrain_datagen.fit(X)","1ed8f4fb":"BATCH_SIZE = 32\nEPOCHS = 40","a86a94ce":"from keras.applications import MobileNet\nfrom keras.applications.mobilenet import preprocess_input\nfrom keras.optimizers import Adam\nfrom keras.metrics import categorical_accuracy, top_k_categorical_accuracy, categorical_crossentropy\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint","f85004ec":"train_datagen = ImageDataGenerator(\n        rescale=1.\/255,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True)\n\ntrain_datagen.fit(X)","34b644af":"def valid_generator(batch_size, data, target):\n    while True:\n        for kk in range(0, data.shape[0], batch_size):\n            start = kk\n            end = min(start + batch_size, data.shape[0])\n            x = data[start:end]\n            y = target[start:end]\n            yield x, y","f8c6da94":"val_set_number = np.random.choice(X.shape[0], 2000)\nvalid_datagen = valid_generator(BATCH_SIZE, X[val_set_number], y[val_set_number])","644450a1":"def top_5_accuracy(y_true, y_pred):\n    return top_k_categorical_accuracy(y_true, y_pred, k=5)","793bcff8":"best_save_model_file = '..\/working\/mymodel.h5'","fc8385d0":"callbacks = [EarlyStopping(monitor='val_loss',\n                           patience=20,\n                           verbose=1,\n                           min_delta=0.00001,\n                           mode='min'),\n             ReduceLROnPlateau(monitor='val_loss',\n                               factor=0.1,\n                               patience=2,\n                               verbose=1,\n                               min_delta=0.0001,\n                               mode='min'),\n             ModelCheckpoint(monitor='val_loss',save_weights_only=True,\n                             filepath=best_save_model_file,\n                             save_best_only=True,\n                             mode='min') ,\n             ]","850f8c2f":"model = MobileNet(input_shape=(100, 100, 3), alpha=1., weights=None, classes=5005)\nmodel.compile(optimizer=Adam(lr=0.002), loss='categorical_crossentropy',\n              metrics=[categorical_crossentropy, categorical_accuracy, top_5_accuracy])\nprint(model.summary())","a3bb2977":"history = model.fit_generator(train_datagen.flow(X, y, batch_size=BATCH_SIZE), validation_data=valid_datagen, validation_steps=X.shape[0] \/\/ BATCH_SIZE,\n                   steps_per_epoch = X.shape[0] \/\/ BATCH_SIZE,\n                   epochs=EPOCHS, verbose=1, callbacks=callbacks)","18164160":"plt.plot(history.history['categorical_accuracy'])\nplt.title('Model categorical accuracy')\nplt.ylabel('categorical accuracy')\nplt.xlabel('Epoch')\nplt.show()","5897d4c4":"test = os.listdir(\"..\/input\/test\/\")\nprint(len(test))\ncol = ['Image']\ntest_df = pd.DataFrame(test, columns=col)\ntest_df['Id'] = ''","12f2e90d":"X = prepareImages(test_df, test_df.shape[0], \"test\")\nX \/= 255","dd97c77b":"predictions = model.predict(np.array(X), verbose=1)","d2614285":"for i, pred in enumerate(predictions):\n    test_df.loc[i, 'Id'] = ' '.join(label_encoder.inverse_transform(pred.argsort()[-5:][::-1]))","15cb12ff":"test_df.head(10)\ntest_df.to_csv('submission.csv', index=False)","cd243bc8":"## As you can see, classes are 5005 but data contain 25361 images.\n- Data augmentation is needed!\n- We can do data augmentation with keras easily","fdefc35a":"# Model development","2588cb0e":"# Submission","4437d47e":"# Reference\n- https:\/\/www.kaggle.com\/anezka\/cnn-with-keras-for-humpback-whale-id\n- https:\/\/www.kaggle.com\/pestipeti\/keras-cnn-starter\n- https:\/\/www.kaggle.com\/satian\/keras-mobilenet-starter\n- https:\/\/www.kaggle.com\/gimunu\/data-augmentation-with-keras-into-cnn\n- https:\/\/keras.io\/preprocessing\/image\/"}}