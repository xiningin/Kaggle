{"cell_type":{"415092d2":"code","de157374":"code","778f0103":"code","dadd0549":"code","61edcc88":"code","b9ab007d":"code","f92ed389":"code","a6827262":"code","976520e1":"code","1788fa41":"code","e53fcb4a":"code","d7a05757":"code","b456bde0":"code","6a14b335":"code","e8b56bef":"code","0f60d101":"code","4ff48489":"markdown"},"source":{"415092d2":"from IPython.display import Image, display\nimport numpy as np\nimport os\nfrom os.path import join\nfrom PIL import ImageFile\nimport pandas as pd\nfrom matplotlib import cm\nimport seaborn as sns\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, GlobalAveragePooling2D\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, roc_auc_score, classification_report, confusion_matrix\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.covariance import EllipticEnvelope\nfrom sklearn import svm\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.isotonic import IsotonicRegression\nimport re\nfrom tqdm import tqdm\nimport pickle\nimport tensorflow as tf\nfrom tensorflow.keras.applications import *\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras import*\nfrom tensorflow.keras.models import *\nimport tensorflow as tf ","de157374":"df = pd.read_csv('..\/input\/aiijcs-russian-traffic-sign-dataset\/AIJ_2GIS_en\/AIJ_2gis\/AIJ_2gis\/train.csv')\nroot_dir = '..\/input\/aaaaaaaaaa\/img\/img'\nclass_names = df['label'].unique()\ndf['filename'] = df['filename'].replace({'train_images\/': ''}, regex=True)","778f0103":"x = []\ny = []\nz = []\nX_train_paths = []\ny_train = []\nX_val_paths = []\ny_val = []\n\nfor label in tqdm(class_names):\n  img_names = df[df['label'] == label]['filename'].tolist()\n  count = 0\n  while count < 5:\n    x.append(img_names[count])\n    y.append(\"sign\")\n    X_val_paths.append(img_names[count])\n    y_val.append(1)\n    z.append(\"val\")\n    img_names.pop(0)\n    count+=1\n  for img_name in img_names:\n    x.append(img_name)\n    y.append(\"sign\")\n    X_train_paths.append(img_name)\n    y_train.append(1)\n    z.append(\"train\")\n\nunknown_class = df[df['label'] == 'unknown']['filename'].tolist()\nfor i in tqdm(range(len(unknown_class))):\n  x.append(unknown_class[i])\n  y.append(\"unknown\")\n  X_val_paths.append(unknown_class[i])\n  y_val.append(0)\n  z.append(\"val\")","dadd0549":"df = pd.DataFrame({\"filename\": x, \"label\": y, \"\": z})\ndf.tail(7)","61edcc88":"del X_train\ndel X_val","b9ab007d":"image_size = 32\n\ndef read_and_prep_images(img_paths, img_height=image_size, img_width=image_size):\n    imgs = [load_img(os.path.join(root_dir,img_path), target_size=(img_height, img_width)) for img_path in tqdm(img_paths)]\n    img_array = np.array([img_to_array(img) for img in imgs])\n    #output = img_array\n    output = tf.keras.applications.vgg16.preprocess_input(img_array)\n    return(output)\n\nX_train = read_and_prep_images(X_train_paths)\nX_val = read_and_prep_images(X_val_paths)","f92ed389":"from tensorflow.keras.applications.vgg16 import VGG16\nimage_size = 32\nresnet_model = VGG16(input_shape=(image_size, image_size, 3), weights=\"imagenet\", include_top=False, pooling='avg')\n","a6827262":"ss = StandardScaler()\nss.fit(X_train)\nX_train = ss.transform(X_train)\nX_val = ss.transform(X_val)\n\n# Take PCA to reduce feature space dimensionality\npca = PCA(n_components=512, whiten=True)\npca = pca.fit(X_train)\nprint('Explained variance percentage = %0.2f' % sum(pca.explained_variance_ratio_))\nX_train = pca.transform(X_train)\nX_val = pca.transform(X_val)","976520e1":"from sklearn.ensemble import IsolationForest\nfrom sklearn.svm import OneClassSVM\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.covariance import EllipticEnvelope\nfrom sklearn.neighbors import LocalOutlierFactor\n\noc_svm_clf = svm.OneClassSVM(gamma=0.1, kernel='rbf', nu = 0.01)  \nif_clf = IsolationForest(contamination=0.1, max_features=1.0, max_samples=1.0, n_estimators=40)  \nee = EllipticEnvelope(contamination=0.1)\nlof = LocalOutlierFactor()\n\noc_svm_clf.fit(X_train)\nif_clf.fit(X_train)\nee_clf.fit(X_train)\nlof_clf.fit(X_train)\n\noc_svm_preds = oc_svm_clf.predict(X_val)\nif_preds = if_clf.predict(X_val)\nee_preds = ee_clf.predict(X_val)\nlof_preds = lof_clf.predict(X_val)","1788fa41":"test_df = pd.DataFrame({\"filename\": X_val_paths, \"label\": y_val})\ntest_df.tail()","e53fcb4a":"svm_if_results = pd.DataFrame({\n  'filename': X_val_paths,\n  'oc_svm_preds': [0 if x == -1 else 1 for x in oc_svm_preds],\n  'if_preds': [0 if x == -1 else 1 for x in if_preds],\n  'ee_preds': [0 if x == -1 else 1 for x in ee_preds],\n  'lof_preds': [0 if x == -1 else 1 for x in lof_preds]\n})\n\nsvm_if_results = svm_if_results.merge(test_df)\nsvm_if_results.tail()","d7a05757":"print('roc auc score: if_preds')\nif_preds = svm_if_results['if_preds']\nactual = svm_if_results['label']\nprint(roc_auc_score(actual, if_preds))\nprint(classification_report(actual, if_preds))\nsns.heatmap(confusion_matrix(actual, if_preds), annot=True , fmt='2.0f')\nplt.show()","b456bde0":"print('roc auc score: oc_svm_preds')\noc_svm_preds=svm_if_results['oc_svm_preds']\nactual=svm_if_results['label']\nprint(roc_auc_score(actual, oc_svm_preds))\nprint(classification_report(actual, oc_svm_preds))\nsns.heatmap(confusion_matrix(actual, oc_svm_preds),annot=True,fmt='2.0f')\nplt.show()","6a14b335":"# define outlier detection model\nfrom sklearn.svm import OneClassSVM\nfrom sklearn.metrics import roc_auc_score\noc_svm_clf = OneClassSVM(gamma=0.1, kernel='rbf', nu = 0.01)\n\noc_svm_clf.fit(X_train)\n\nyhat = oc_svm_clf.predict(X_val)\n\ny_pred = [0 if x == -1 else 1 for x in yhat]\nroc_score = roc_auc_score(y_val, y_pred)\nprint('ROC Auc Score: %.3f' % roc_score)","e8b56bef":"from sklearn.ensemble import IsolationForest\nfrom sklearn.metrics import roc_auc_score\nif_clf = IsolationForest(contamination=0.1, max_features=1.0, max_samples=1.0, n_estimators=40)  \n\nif_clf.fit(X_train)\n\nyhat = if_clf.predict(X_val)\n# calculate score\ny_pred = [0 if x == -1 else 1 for x in yhat]\nroc_score = roc_auc_score(y_val, y_pred)\nprint('ROC Auc Score: %.3f' % roc_score)","0f60d101":"from sklearn.covariance import EllipticEnvelope\nee_clf = EllipticEnvelope(contamination=0.1)\n\nee_clf.fit(X_train)\nee_preds = ee_clf.predict(X_val)\ny_pred = [0 if x == -1 else 1 for x in ee_preds]\nroc_score = roc_auc_score(y_val, y_pred)\nprint('ROC Auc Score: %.3f' % roc_score)","4ff48489":"C\u00f3 3 c\u00e1ch ch\u00ednh \u0111\u1ec3 \u0111i\u1ec1u ch\u1ec9nh acc c\u1ee7a one class\n* \u0110\u1ed5i model extract feature\n* \u0110\u1ed5i n_components trong pca\n* \u0110\u1ed5i c\u00e1c hyperparameter trong c\u00e1c model one class"}}