{"cell_type":{"02cadaa1":"code","7bedede6":"code","6bf3d4bf":"code","142d3847":"code","cd327f6b":"code","b9142bbd":"code","c20550ed":"code","85822e0e":"code","2243534e":"code","99fb6bc1":"code","779485a4":"code","2c65ea66":"code","c6d6c808":"code","5ba5b0e4":"code","beabc00c":"code","6c77f435":"code","8bdade15":"code","8f6593af":"markdown","8d076e41":"markdown","ba1bed4e":"markdown","cc1cd7d7":"markdown","9204a4bb":"markdown","f8b2bab8":"markdown","77b07151":"markdown","97e57868":"markdown","2fe92565":"markdown","1c392592":"markdown","4063cf43":"markdown"},"source":{"02cadaa1":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport os\nimport re\n\nfrom IPython import display \nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OrdinalEncoder,OneHotEncoder,MinMaxScaler\nfrom sklearn.metrics import accuracy_score","7bedede6":"pd.set_option('display.float_format',lambda x:\"%.2f\" % x)\npd.set_option('display.max_columns',100)\npd.set_option('display.max_rows',5000)","6bf3d4bf":"from src import *","142d3847":"df_trn = pd.read_csv(\".\/datasets\/train.csv\")","cd327f6b":"print(df_trn.shape)\ndf_trn.head(2)","b9142bbd":"df = df_trn\ntarget_col = 'Rating'\nindex_col = 'PhoneId' \n                                                    #### @Stage-I ######\nprint('Initial data Volume',df.shape)  \n\n# Set the index column\ndf.set_index(index_col,inplace=True)\n\n# separate target column & feature matrix\ny = df[target_col]\nX_trn = df.drop(target_col,axis=1)\n\n# Separate numeric & cat features\ncat_cols = df.select_dtypes(exclude=['int32','int64','float32','float64']).columns.tolist()\nnum_cols = df.select_dtypes(include=['int32','int64','float32','float64']).columns.tolist()\n\n\n                                            ####  @Stage-II  #####\n# Make non numeric features lowercase \nX_trn = X_trn.apply(lambda x: x.str.lower() if x.dtype not in ['int32','int64','float32','float64'] else x)\n\n# Appropriately code NaNs\nX_trn.replace(['none','nan'],np.nan ,inplace=True)\n\n# Search & replace with digits for some string features\nX_trn['Screen Size']            = X_trn['Screen Size'].apply(lambda x: ScreenSize(x))\nX_trn['Expandable Memory']      = X_trn['Expandable Memory'].apply(lambda x: ExpandableMemory(x))\nX_trn['User Available Storage'] = X_trn['User Available Storage'].apply(lambda x: ExpandableMemory(x))\nX_trn['Internal Memory']        = X_trn['Internal Memory'].apply(lambda x: InternalMemory(x))          \nX_trn['Display Type']           = X_trn['Display Type'].apply(lambda x: DisplayType(x))\nX_trn['Pixel Density']          = X_trn['Pixel Density'].apply(lambda x: PixelDensity(x))   \nX_trn['Processor']              = X_trn['Processor'].apply(lambda x: Processor(x))   \nX_trn['RAM']                    = X_trn['RAM'].apply(lambda x: Ram(x))\nX_trn['TalkTime']               = X_trn['TalkTime'].apply(lambda x: TalkTime(x)) \nX_trn['Standby time']           = X_trn['Standby time'].apply(lambda x: TalkTime(x)) \nX_trn['SIM1 Size']              = X_trn['SIM Size'].apply(lambda x: SIM1Size(x))\nX_trn['SIM2 Size']              = X_trn['SIM Size'].apply(lambda x: SIM2Size(x))\ncols = ['Height','Weight','Width','Capacity','Architecture','Thickness','Screen to Body Ratio (calculated)']\nfor c in cols:\n    X_trn[c] = X_trn[c].str.extract('(\\d+\\.\\d+|\\d+)').astype(float) ## pattern to extract any float\/ int digit\n\nX_trn.drop(['SIM Size'],axis=1,inplace=True)\ndropped_cols = ['SIM Size']\n\n# Split & replace with string lengths for some string features ###\ncols= [\"Colours\",\"Camera Features\",\"Sensor\",\"Other Sensors\",'Shooting Modes']\nfor c in cols:\n    X_trn[c] = X_trn[c].astype(str).str.split(\",\").apply(len)\n\n\n# Split and take 1st text from some string columns\nX_trn['Operating System'] = X_trn['Operating System'].str.split(' ').str.get(0)\nX_trn['Graphics']         = X_trn['Graphics'].str.split(' |-|,').str.get(0)\nX_trn['Chipset']          = X_trn['Chipset'].str.split(' ').str.get(0)\n\n# Customized processing  for some features  \nX_trn['Bluetooth']= X_trn['Bluetooth'].str.extract('(^v\\d+)?')\ncols = ['Autofocus','FM Radio','Optical Image Stabilisation']\nfor c in cols:\n    X_trn[c]= X_trn[c].apply(lambda x: 'yes' if x not in ['no',np.nan] else x)\n\n\ncat_cols = X_trn.select_dtypes(exclude=['int32','int64','float32','float64']).columns.tolist()\nfor c in cat_cols:\n    tab = X_trn[c].value_counts(normalize=True)\n    merge_cats = list(tab.index[tab.values < 0.05])\n    X_trn[c] = X_trn[c].map(lambda x: \"others\" if x in merge_cats else x)\n\n                                            ####  @Stage:-III ####\n\n# Drop single valued features\ntab = X_trn.nunique(axis=0,dropna=True)\nlow_var_cols = list(tab.index[tab.values==1])\nX_trn.drop(low_var_cols,axis=1,inplace=True)\nprint(\"Following %d columns are dropped: \\n\" % len(low_var_cols),low_var_cols,'\\r\\nReason: Single Valued \\r\\n')  \ndropped_cols.extend(low_var_cols)\n\n\n### \n# Drop no-importance features(hard coded)\nno_importance_cols =['Network','Image Resolution','Screen Resolution','GPS','Wi-Fi','Launch Date','Model','SAR Value','Resolution',\n                     'Quick Charging','SIM 1','SIM 2','Screen Protection','USB Connectivity','Video Recording']\nX_trn.drop(no_importance_cols,axis=1,inplace=True,errors='ignore')\nprint(\"Following %d columns are dropped: \\n\" % len(no_importance_cols),\n      no_importance_cols,'\\r\\nReason: * No Importance*\\r\\n')  \ndropped_cols.extend(no_importance_cols)\n\n## drop features having >70% records missing\ntab = 100*(X_trn.isna().sum(axis=0).sort_values(ascending=False)\/X_trn.shape[0])\nhigh_miss_cols = list(tab.index[tab.values > 70])\nX_trn.drop(high_miss_cols,axis=1,inplace=True)\nprint(\"Following %d columns are dropped: \\n\" % len(high_miss_cols),\n      high_miss_cols,'\\r\\nReason: * Over 70% Missing values*') \ndropped_cols.extend(high_miss_cols)\n\n### Drop the records having >= 90 % of features missing\ntab = 100*(X_trn.isna().sum(axis=1).sort_values(ascending=False)\/X_trn.shape[1])\nhigh_miss_rows = list(tab.index[tab.values > 70])\nX_trn.drop(high_miss_rows,axis=0,inplace=True)      \nprint(\"%d rows are dropped: \\n\" % len(high_miss_rows),'\\r\\nReason: * Over 70% Missing(NULL) features*')  \ny = y[y.index.isin(X_trn.index)]\nprint('Final df shape',X_trn.shape)","c20550ed":"cat_cols = X_trn.select_dtypes(include=object).columns.tolist()\n(pd.DataFrame(\n    X_trn[cat_cols]\n    .melt(var_name='column', value_name='value')\n    .value_counts())\n.rename(columns={0: 'counts'})\n.sort_values(by=['column', 'counts']))","85822e0e":"X_trn_reshaped = reshape_x(X_trn,encode_type='onehot')\ny_bin = y.apply(lambda x : 0 if x <= np.median(y) else 1) ## Convert Response into Binary\nprint(\"Response Rate:\\n\",pd.DataFrame(y_bin.value_counts(normalize=True)))","2243534e":"y_hat, errors,b_hat= train_mp_neuron(x_train=X_trn_reshaped,y_train=y_bin)\nprint(\"Min Error:\",min(errors),\"\\t\",\"b_hat:\",np.argmin(errors))\nplt.plot(errors)","99fb6bc1":"accuracy_score(y_true=y_bin,y_pred=y_hat)","779485a4":"## Read test data\ndf_tst = pd.read_csv(\".\/datasets\/test.csv\")\n# Set the index column\nX_tst = df_tst.set_index(index_col)\n                                            ####  @Stage-II  #####\n# Make non numeric features lowercase \nX_tst = X_tst.apply(lambda x: x.str.lower() if x.dtype not in ['int32','int64','float32','float64'] else x)\n\n# Appropriately code NaNs\nX_tst.replace(['none','nan'],np.nan ,inplace=True)\n\n# Search & replace with digits for some string features\nX_tst['Screen Size']            = X_tst['Screen Size'].apply(lambda x: ScreenSize(x))\nX_tst['Expandable Memory']      = X_tst['Expandable Memory'].apply(lambda x: ExpandableMemory(x))\nX_tst['User Available Storage'] = X_tst['User Available Storage'].apply(lambda x: ExpandableMemory(x))\nX_tst['Internal Memory']        = X_tst['Internal Memory'].apply(lambda x: InternalMemory(x))          \nX_tst['Display Type']           = X_tst['Display Type'].apply(lambda x: DisplayType(x))\nX_tst['Pixel Density']          = X_tst['Pixel Density'].apply(lambda x: PixelDensity(x))   \nX_tst['Processor']              = X_tst['Processor'].apply(lambda x: Processor(x))   \nX_tst['RAM']                    = X_tst['RAM'].apply(lambda x: Ram(x))\nX_tst['TalkTime']               = X_tst['TalkTime'].apply(lambda x: TalkTime(x)) \nX_tst['Standby time']           = X_tst['Standby time'].apply(lambda x: TalkTime(x)) \nX_tst['SIM1 Size']              = X_tst['SIM Size'].apply(lambda x: SIM1Size(x))\nX_tst['SIM2 Size']              = X_tst['SIM Size'].apply(lambda x: SIM2Size(x))\ncols = ['Height','Weight','Width','Capacity','Architecture','Thickness','Screen to Body Ratio (calculated)']\nfor c in cols:\n    X_tst[c] = X_tst[c].str.extract('(\\d+\\.\\d+|\\d+)').astype(float) ## pattern to extract any float\/ int digit\n\n# Split & replace with string lengths for some string features ###\ncols= [\"Colours\",\"Camera Features\",\"Sensor\",\"Other Sensors\",'Shooting Modes']\nfor c in cols:\n    X_tst[c] = X_tst[c].astype(str).str.split(\",\").apply(len)\n\n\n# Split and take 1st text from some string columns\nX_tst['Operating System'] = X_tst['Operating System'].str.split(' ').str.get(0)\nX_tst['Graphics']         = X_tst['Graphics'].str.split(' |-|,').str.get(0)\nX_tst['Chipset']          = X_tst['Chipset'].str.split(' ').str.get(0)\n\n# Customized processing  for some features  \nX_tst['Bluetooth']= X_tst['Bluetooth'].str.extract('(^v\\d+)?')\ncols = ['Autofocus','FM Radio','Optical Image Stabilisation']\nfor c in cols:\n    X_tst[c]= X_tst[c].apply(lambda x: 'yes' if x not in ['no',np.nan] else x)\n\n\ncat_cols = X_tst.select_dtypes(exclude=['int32','int64','float32','float64']).columns.tolist()\nfor c in cat_cols:\n    tab = X_tst[c].value_counts(normalize=True)\n    merge_cats = list(tab.index[tab.values < 0.05])\n    X_tst[c] = X_tst[c].map(lambda x: \"others\" if x in merge_cats else x)\n\n                                            ####  @Stage:-III ####\n\nX_tst.drop(dropped_cols,axis=1,inplace=True)\n# Estimate the target based on trained paramters\n\nX_tst_reshaped = reshape_x(X_tst,encode_type='onehot')\ny_hat = list()\nfor i in range(X_tst_reshaped.shape[0]):\n    if(np.sum(X_tst_reshaped.iloc[i,])>= b_hat):\n        y_hat.append(1)\n    else:\n        y_hat.append(0)","2c65ea66":"class MPNeuron:\n    \n    def __init__(self):\n        self.b = None\n    \n    def model(self,x):\n        return(sum(x) >= self.b)\n    \n    def predict(self,X):\n        y_hat = []\n        for x in X:\n            result = self.model(x)\n            y_hat.append(result)\n        return(np.array(y_hat))\n\n    def fit(self,X,y):\n        accuracy = {}\n        \n        for b in range(X.shape[1]+1):\n            self.b = b \n            y_hat = self.predict(X)\n            accuracy[b] = accuracy_score(y_hat,y)\n            \n        best_b = max(accuracy,key= accuracy.get)\n        self.b = best_b\n        print(\"Optimal value of b is\", best_b)\n        print(\"Highest Accuracy\", accuracy[best_b])","c6d6c808":"mpneuron = MPNeuron()","5ba5b0e4":"mpneuron.fit(X= np.array(X_trn_reshaped),y=y_bin)","beabc00c":"y_hat = mpneuron.predict(X_tst_reshaped)","6c77f435":"submission = pd.DataFrame({'PhoneId':df_tst['PhoneId'], 'Class':y_hat})\nsubmission = submission[['PhoneId', 'Class']]\nprint(submission.shape)\nsubmission.head()","8bdade15":"#submission.to_csv(\".\/datasets\/MP_Neuron_submission.csv\",index=False)","8f6593af":"##  Summarize","8d076e41":"# Training Stage\n\n## Read data","ba1bed4e":"## MP Nueron\n- data : mobile data cleaned\n- task : classification\n    - target : Binary\n    - features: Binary\n- Model : \n    - $ \\hat y = 1$ if $\\sum X >= b$ else $\\hat y  =0$\n    - Geom Interp : A stragight line with controlable slope and intercept\n- Learning Algo : \n    - params : b in [0, max(no of features] \n    - technique : Brute force\n- Evaluation :\n    - accuracy","cc1cd7d7":"## Submission ","9204a4bb":"## Data Processing","f8b2bab8":"## Test Data","77b07151":"## Import UD functions","97e57868":"## Encode-Reshape train data","2fe92565":"## Solution- I\n### Using User Defined function","1c392592":"# Setup \n## Install Packages","4063cf43":"## Solution -II\n### Using Class\n"}}