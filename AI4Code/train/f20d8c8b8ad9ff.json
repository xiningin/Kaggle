{"cell_type":{"7ec334ca":"code","0523e904":"code","32658c21":"code","8196ed8c":"code","98a9bccb":"code","e6e72b04":"code","114e33bf":"code","d5040915":"code","86cb9dfd":"code","10f108c5":"code","01163d11":"code","f2443573":"code","f65a9d5f":"code","d7e97e62":"markdown"},"source":{"7ec334ca":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import MLPClassifier ","0523e904":"data = pd.read_csv(\"..\/input\/csgo-round-winner-classification\/csgo_round_snapshots.csv\")\npd.set_option('display.max_columns', None)","32658c21":"data","8196ed8c":"# Winners in different maps\n\nplt.figure(figsize=(10,8))\nax = sns.countplot(x=\"map\", hue=\"round_winner\", data=data)\nax.set(title='Round winners for various maps')\nplt.show()","98a9bccb":"# Plot for total wins per team\n\nplt.figure(figsize=(10,8))\nax = sns.barplot(x=data['round_winner'].unique(), y=data['round_winner'].value_counts())\nax.set(title='Total number of wins per side', xlabel='Side', ylabel='Wins')\nplt.show()","e6e72b04":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Dropping single valued columns\n    \n    for column in data.columns:\n        if len(data[column].unique())==1:\n            df = df.drop([column], axis=1)\n    \n    # Encoding binary columns\n    \n    df[\"bomb_planted\"] = df[\"bomb_planted\"].astype(np.int16)\n    df[\"round_winner\"] = df[\"round_winner\"].replace({\"T\":0, \"CT\":1})\n    \n    # Encoding the map column using Label Encoder\n    \n    encoder = LabelEncoder()\n    df[\"map\"] = encoder.fit_transform(df[\"map\"]) \n    \n    # Splitting the data\n    \n    y = df[\"round_winner\"]\n    X = df.drop(\"round_winner\", axis=1)\n    \n    # Scaling the data\n    \n    scaler = RobustScaler()\n    X = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)\n    \n    # Train-test split\n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, train_size=0.8, random_state=42)\n        \n    return X_train, X_test, y_train, y_test","114e33bf":"X_train, X_test, y_train, y_test = preprocess_inputs(data) ","d5040915":"# Training the data\n\nmodel = MLPClassifier()\nmodel.fit(X_train, y_train)","86cb9dfd":"print(f\"Neural network model accuracy:{model.score(X_test, y_test)*100}\") ","10f108c5":"y_preds = model.predict(X_test)","01163d11":"# Checking the number of correct predictions\n\nnp.sum((y_preds==y_test))","f2443573":"# Total number of values in test data\n\ny_test.shape","f65a9d5f":"# Checking accuracy manually\n\nnp.sum((y_preds==y_test))\/y_test.shape","d7e97e62":"# Exploratory Data Analysis"}}