{"cell_type":{"d288c6b4":"code","164c0a43":"code","a443f995":"code","fb2c90be":"code","9d876f4a":"code","c4be1b4b":"code","bc6affaa":"code","885d21e1":"code","581e50c0":"code","7c07fad7":"code","7f2da2a3":"code","a22b2f4c":"code","a12c104b":"code","364fb645":"code","251f1f49":"code","d79135c2":"code","efcf9ef5":"code","f7482ee3":"code","1f460f71":"code","d96bf856":"code","43c0f1ea":"code","69a7dc8d":"code","7a93d658":"code","98b5388f":"code","f95c1769":"code","c834ec59":"code","442fbc15":"code","c0eaede3":"code","522099f8":"code","92699810":"code","76716b46":"code","3804988f":"code","f0cac05e":"code","9f2fdc03":"code","b65178f1":"code","f221b0cf":"code","e33bf2fd":"code","b569d825":"code","cb8f078b":"code","45aa9cf3":"code","7ce80c60":"code","b09fd540":"code","57d559b0":"code","f3e7f6b3":"markdown","48f4eead":"markdown","ea03230d":"markdown","7f0dbd06":"markdown","f491e609":"markdown","447090cf":"markdown","822a07f3":"markdown","427c2a29":"markdown","fc9d42b4":"markdown","eb0a8b47":"markdown","742c1abf":"markdown","7b042a37":"markdown","a628dc77":"markdown","fcd4e269":"markdown","52cf5cc8":"markdown","27196d9a":"markdown","4fd8bc73":"markdown","821a73c5":"markdown","850e8e6f":"markdown","69f5a266":"markdown","034b7377":"markdown","b70281ab":"markdown","85448012":"markdown","8e15835f":"markdown","eb01bbc8":"markdown","58226cf4":"markdown","eba3920c":"markdown","6878800e":"markdown","da78a486":"markdown","bcfdfbb8":"markdown","ad6925e1":"markdown"},"source":{"d288c6b4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.formula.api as smf\nimport statsmodels.api as sm\n\n%matplotlib inline","164c0a43":"df_train_raw = pd.read_csv('..\/input\/titanic\/train.csv', index_col='PassengerId')\ndf_train_raw.head()","a443f995":"df_train_raw.shape","fb2c90be":"df_test_raw = pd.read_csv('..\/input\/titanic\/test.csv', index_col='PassengerId')\ndf_test_raw.head()","9d876f4a":"df_test_raw.shape","c4be1b4b":"united_raw = df_train_raw.append(df_test_raw)","bc6affaa":"united_raw.info()","885d21e1":"# columns with NaN, amount of them\ncolumns = united_raw.isnull().any().values\ncol_nan = united_raw.isnull().sum().loc[columns]\ncol_nan","581e50c0":"# number not survived and survived\nsurvived = df_train_raw.Survived.value_counts()\nsurvived","7c07fad7":"# plotting survived series\nindex = survived.index.astype(str)\nxaxis = ['not survived (0)', 'survived (1)']\n\nplt.figure(figsize=(8,6))\nplt.bar(xaxis, survived.values)\nplt.ylabel('number of people')","7f2da2a3":"# counting number of people in each class in train dataset\npclass = df_train_raw.Pclass.value_counts().sort_index()\npclass","a22b2f4c":"# class labels\nclasses = ['1st class', '2nd class', '3rd class']\n\nfig, ax = plt.subplots(figsize=(12,6))\n# plotting number of people per class\nrects = ax.bar(pclass.index, pclass.values)\n\n# setting ticks and labels\nax.tick_params(axis='both', labelsize=14)\nax.set_ylabel('number of people', fontsize=18)\n\nax.set_xticks(pclass.index)\nax.set_xticklabels(classes)\n\nax.bar_label(rects, fontsize=14)","a12c104b":"# contingency table 'Pclass' 'Survived'  \nsrvcl_crtb = pd.crosstab(df_train_raw['Pclass'], \n                          df_train_raw['Survived'])\n\nsrvcl_crtb","364fb645":"#plotting srv_pcl\n\n# values for x axis\nx = np.arange(len(pclass.index))\nwidth = 0.35\n\nfig, ax = plt.subplots(figsize=(12,6))\n\n# placing bar pairs by each side of ticks\nax.bar(x-width\/2, srvcl_crtb[0].values, width, label='not survived')\nax.bar(x+width\/2, srvcl_crtb[1].values, width, label='survived')\n\nax.legend()\nax.set_xticks(x)\nax.set_xticklabels(classes, fontsize=15)","251f1f49":"srvcl_pcnt = srvcl_crtb[1]\/pclass * 100\nsrvcl_pcnt","d79135c2":"pcnt = range(0, 101, 10)\n\nfig, ax = plt.subplots(figsize=(12,6))\n# plotting number of people per class\nrects = ax.bar(srvcl_pcnt.index, srvcl_pcnt.values)\n\n# setting ticks and labels\nax.tick_params(axis='both', labelsize=14)\nax.set_yticks(pcnt)\nax.set_ylabel('percent of people', fontsize=18)\n\nax.set_xticks(srvcl_pcnt.index)\nax.set_xticklabels(classes)\n\nax.bar_label(rects, fontsize=14)","efcf9ef5":"# number of male, female in train dataset\ndf_train_raw.Sex.value_counts()","f7482ee3":"# contingency table 'Sex' 'Survived'  \nsrvcl_crtb = pd.crosstab(df_train_raw['Sex'], \n                          df_train_raw['Survived'])\n\nsrvcl_crtb","1f460f71":"# plotting srv_sex\n\n# x axis values\nx = np.array([0, 1])\nwidth = 0.35\n\nfig, ax = plt.subplots(figsize=(12,6))\n\n# placing bars pairs by each side of ticks\nax.bar(x-width\/2, srvcl_crtb[0].values, width, label='not survived')\nax.bar(x+width\/2, srvcl_crtb[1].values, width, label='survived')\n\nax.legend()\nax.set_xticks(x)\nax.set_xticklabels(['female', 'male'], fontsize=15)","d96bf856":"# srv_groups - not survived, survived\nsrv_groups = df_train_raw.groupby('Survived')\n\nf, ax = plt.subplots(1, 2, figsize=(16,6))\n\n# cdfs of age not survived, survived \nsns.ecdfplot(ax = ax[0], data = (srv_groups.get_group(0).Age), label='not survived')\nsns.ecdfplot(ax = ax[0], data = (srv_groups.get_group(1).Age), label='survived')\n\n# density of age not survived, survived\nsns.kdeplot(ax = ax[1], data = (srv_groups.get_group(0).Age), label='not survived')\nsns.kdeplot(ax = ax[1], data = (srv_groups.get_group(1).Age), label='survived')\n\nplt.legend()","43c0f1ea":"# adding 'Sex_binary' column to united\nunited = united_raw.copy()\nunited['Sex_binary'] = (united_raw.Sex == 'male').astype(int)\n\n# picking from united only rows that presents in train dataset\ndf_train = united.loc[df_train_raw.index]\n\ncorr = df_train.corr()","69a7dc8d":"plt.subplots(figsize=(9,7))\n\nsns.heatmap(data=corr)","7a93d658":"titles = 'Mr\\.|Miss\\.|Mrs\\.|Master\\.'\nexp = '(' + titles + ')'\n\n# extracting titles\ntitles = united.Name.str.extract(exp)\ntitles = titles.astype('category')\ntitles = titles[0].rename('Titles')\n\nunited = united.join(titles)","98b5388f":"united.Titles.value_counts(dropna=False)","f95c1769":"united.head()","c834ec59":"# filling NaN 'Fare'\nmean = united.Fare.mean()\nunited.Fare = united.Fare.fillna(mean)","442fbc15":"# filling NaN 'Embarked'\n\nvalues = united.Embarked.dropna().values\nnum_nan = united.Embarked.isnull().sum()\n\n# picking randomly values to fill NaN with\nval_for_fill = np.random.choice(values, num_nan)\n\nunited.loc[united.Embarked.isnull(), 'Embarked'] = val_for_fill","c0eaede3":"columns = united.isnull().any().values\ncol_nan = united.isnull().sum().loc[columns]\ncol_nan","522099f8":"formula = 'Age ~ Sex + C(Pclass) + C(Titles) + SibSp + C(Embarked)'\n\nmodule = smf.ols(formula, united)\n\n# fitting module\nresults = module.fit()\nresults.summary()","92699810":"# choosing NaN in 'Age'\nage_null = united[united.Age.isnull()]\n# predicting\nage_filler = results.predict(age_null)\n# filling NaN with predictions\nunited.loc[age_filler.index, 'Age'] = age_filler","76716b46":"# loading module\nformula = 'Age ~ Sex + C(Pclass) + SibSp + C(Embarked)'\nmodule = smf.ols(formula, united)\n# fitting module\nresults = module.fit()\n\nage_null = united[united.Age.isnull()]\nage_filler = results.predict(age_null)\n\nunited.loc[age_filler.index, 'Age'] = age_filler","3804988f":"# rounding off age predictions\nunited.loc[:,'Age'] = united.Age.round(1)","f0cac05e":"# slicing modified train dataset from united\ndf_train = united.loc[df_train.index]\n\nformula = 'Survived ~ Sex + C(Pclass) + SibSp + Age + C(Titles)'\nmodule = smf.ols(formula, df_train)\nresults = module.fit()\nresults.summary()","9f2fdc03":"# slicing modified test dataset from united\ndf_test = united.loc[df_test_raw.index]\n\n# predict\npred = results.predict(df_test)\npred.name = 'Survived'","b65178f1":"# Nan predictions\npred.isnull().sum()","f221b0cf":"# slicing NaN\npred_invld = df_test[(pred.isnull())]\n\n# loading module\nformula = 'Survived ~ Sex + C(Pclass) + SibSp + Age'\nmodule = smf.ols(formula, df_train)\nresults = module.fit()\n\npred_2mdl = results.predict(pred_invld)\n\n# adding predictions from second module to 'pred'\npred.loc[pred_2mdl.index] = pred_2mdl","e33bf2fd":"# Nan predictions\npred.isnull().sum()","b569d825":"# predictions out of range\npred[(pred < 0) | (pred > 1)]","cb8f078b":"survived","45aa9cf3":"left = [1502, 722] - survived\nleft","7ce80c60":"left[1]\/left[0]","b09fd540":"# converting predictions\npred_binary = pd.cut(pred, [-1, 0.6, 2], True, [0, 1])\npred_binary","57d559b0":"# saving predictions\npred_binary.to_csv('.\/pred.csv')","f3e7f6b3":"Let's answer next questions:\n - How many passengers and crewmembers were on titanic?\n \n2224 passengers and crew members from which 1502 died, 722 survived.\n - Do train and test file have entries for each who were present on board?\n\nAs we saw above we posses data about 1309 passengers from <b>train.scv<\/b> and <b>test.scv<\/b> datasets which is slightly more than half out of the population and 891 from <b>train.csv<\/b> only which is about 1\/3.\n - In what propotion number of survived and not survived in <b>train.csv<b> file?","48f4eead":"Titanic shipwreck is subject of exploration in the notebook. More specific search of patterns, connections between people who survived and not, afterwards using the information to create models that would be able to predict what people survived and what not.\n\nThe tasks described above are put before participants of the Titanic competition on kaggle.\n\nTo find out more refer to: https:\/\/www.kaggle.com\/c\/titanic\/overview","ea03230d":"A problem - the module does not manag with all NaN, so for left invalid values I use a similar one but without exogenous variable 'Title'.  ","7f0dbd06":"While I was reading about 3rd class passengers, I learned fascinating detail: passengers were accommodated in accordance with their classes from top to bottom on the ship. So lets look at 'Pclass' from different angles.   ","f491e609":"# Factors affecting survival on Titanic ","447090cf":"For creating modules I will use statsmodels library","822a07f3":"### Creating module to predict variable 'Survived'","427c2a29":"I know that correlation between 'Survived' and 'Age' is small, even though I reject variant filling NaN with means of 'Sex' or 'Titles' categories and choose create a module to predict Age. Why? I'm curious.\n\nI don't know if it's acceptable, but I use train and test datasets to create module to increase the number of observations. \n\nVariable 'Age' continuous so choosing ordinary least squares, resulting module yields large R-squared, at least in my experience, which covers 42% of variance in 'Age'.","fc9d42b4":"Reading <b>train.csv<\/b> and <b>test.csv<\/b> file","eb0a8b47":"Accuracy score: 0.77990\n\nPlace: 3600 out of 50000","742c1abf":"Now it is left to convert decimal probabilities in range from 0 to 1 to outcomes 0 and 1. In addition, we have some predictions out of the range, a drawback of using OLS instead of ligistic, but it is not a big problem. I will simply convert them to nearest outcomes.  ","7b042a37":"As it is known Pearson correlation sutes best continuous variables, nevertheless it can be acceptable to use it for categorical variables, so I use it, but before additionally add 'Sex_binary' to united dataframe which is binary representation of the categories. \n\nResulting heatmap points at squares with next coordinates:\n- Survived - Pclass, Sex_binary, Fare\n- Parch - SibSp ","a628dc77":"Similar situation as with Age, left some NaN, filling them with identical module except it does not have 'Titles'.","fcd4e269":"Estimated threshold equals to 0.6.","52cf5cc8":"For purposes of filling NaN, adding new features both datasets will be united","27196d9a":"There are 11 variables in our united dataset, in proper format as we can see below, however columns \"Sex\", \"Embarked\" can be converted to <b>Categorical data type<\/b>. \n\nWhat about validity? Most variables have 1309 valid out of 1309 values. The data as it was mentioned in the description of competition well preprocessed, but not all complete, for example 'Cabin'. First what I thought that most of NaN values can indicate that the correspondent passengers didn't have cabins but were housed in open-spaced dometries.\nBut this is incorrect. Even third class passengers were accommodated in cabins in accordance with this resource (https:\/\/titanic.fandom.com\/wiki\/Third_Class_cabins). There is as well column 'Embarked' with 2, 'Fare' with 1 and 'Age' with 263 NaN.","4fd8bc73":"Importing libraries","821a73c5":"The study is based on data provided by creators of the competition and stored in <b>train.csv<\/b>, which contains data about passengers and crew members. There's another file <b>test.csv<\/b> as well about people abroad for testing modules. The difference between datasets that <b>train.csv<\/b> has variable 'Survived' and <b>test.csv<\/b> not, so the variable will be generated by created modules.","850e8e6f":"Let's extract titles from names. The thought came to me when I was searching for way to fill 'Age'. There must be difference in age between Miss and Missus, also what about differences between other titles? ","69f5a266":"### Numerical Analysis and Visualization","034b7377":"One more moment, optimal threshold for converting probabilities in range from 0 to 1 can be calculated by dividing number of survived by not survived after subtracting from the category totals variable 'Survived' in train dataset.","b70281ab":"### Filling NaN","85448012":"First class passengers survived more than second class passengers and second class more than third class, as I expected. This can be explained by next factors: \n- Accommodation of classes at different levels of the ship\n- The fact that there were not enough lifeboats for everyone\n- Ship flooding started from lowest level where third class was housed\n\nApparently first class had a shorter way to the lifeboats, at the same time third class longer and harder way to the deck. ","8e15835f":"Then predicting 'Survived' in test dataset","eb01bbc8":"Even though 'Survived' is categorical I choose ordinary least squares over logistic module, because it yields larger R-squared. Variable with most predictive power is 'Titles'. It covers significantly more variance in 'Survived' than others.","58226cf4":"We will look also at 'Age' and 'Sex'","eba3920c":"### Correlation","6878800e":"'Embarked' and 'Fare' as they have 2 and 1 invalid values will be filled simply. For 'Fare' I will use mean and for 'Embarked' randomly pick two values from the column. ","da78a486":"### New feature ","bcfdfbb8":"### Entry","ad6925e1":"Then predicting 'Age' for NaN in united."}}