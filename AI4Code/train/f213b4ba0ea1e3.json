{"cell_type":{"3d2297a6":"code","85b5a599":"code","5d58d27a":"code","e50ffe23":"code","c1754f87":"code","6755dc5f":"code","2c086b33":"code","aa4c4f3c":"code","8da5a080":"code","b6706036":"code","2a881890":"code","e389c83c":"code","d4a13cb4":"code","f2e50de7":"code","874db40a":"code","b2c58f31":"code","d5de68e5":"markdown","d4220783":"markdown","cabec0a3":"markdown","fe5d4334":"markdown","45cda87e":"markdown","8960598a":"markdown","a43199ab":"markdown","f362da4c":"markdown","82cde4c0":"markdown","7f5cac60":"markdown","cc313316":"markdown","59dc1e22":"markdown","f3113532":"markdown","0888f929":"markdown","b6cfd0af":"markdown"},"source":{"3d2297a6":"import sys\nimport numpy as np\nprint(\"This cheatsheet was run on python {pv} and numpy version {nv}\".format(pv=sys.version,nv=np.__version__))","85b5a599":"#converting a simple list into numpy array - Ex - {1,2,3,4,5}\nsimple_list = [9,5,2,7,45]\nnumpy_arr = np.array(simple_list)\n","5d58d27a":"#1. Numpy array\nprint(\"1.  Numpy list : \",numpy_arr)\n\n#2. Datatype of numpy array\nprint(\"2.  Datatype of numpy array : \",type(numpy_arr))\n\n#3 Datatype of element in a numpy arr\nprint(\"3.  Datatype of elements in array : \",numpy_arr.dtype)\n\n#4 Create a numpy array of floating values\nprint(\"4a. Numpy array of floating elements : \",np.array([1.1,2.2,3.5,6.7],dtype=float))\nprint(\"4b. Datatype of elements : \",np.array([1.1,2.2,3.5,6.7],dtype=float).dtype)\n\n# Create a 2d numpy array\nprint(\"5.  2D numpy array : \\n\",np.array([[1,2],[3,4]]))","e50ffe23":"#1. Generate an array of zeros\nprint(\"1a. 1D Array of zeros : \",np.zeros(10)) #scaler input for 1d array\nprint(\"1b. 3x4 2D Array of zeros : \\n\",np.zeros((3,4))) #tuple input for nd array\n\n#2. Generate an array of ones\nprint(\"2a. 1D Array of ones : \",np.ones(10,dtype=int))\nprint(\"2b. 3x4 2D Array of ones : \\n\",np.ones((3,4)))\n\n\n#3. Generate a 1d array of uniformly incremented integers starting from x till y with step z(increment value for each element)\n# z(step is optional if not specified,default value as 1)\nprint(\"3.  Array of integers starting from 1 till 12 with step 2\",np.arange(1,12,2)) \n\n#4. Generate a 1d array of evenly spaced numbers over a specified interval\nprint(\"4.  Array of 4 evenly space numbers between 1 and 9\",np.linspace(1,9,4)) # x,y,z : z number of values are generated between x and y \n\n#5. Generate an identity matrix\nprint(\"5.  4x4 Identity matrix \\n\",np.eye(4,dtype=int))\n\n#6. Generate a 3x4 matrix with all elements as 7\nprint(\"6.  3x4 matrix of 7s\\n\",np.full((3,4),7))\n\n#7. Generate a random 1d array of integers where each elements should be between 1 to 10\n# input to method (x,y,z) z number of elements are created with each randomly generated integer lying between x and y\nprint(\"7.  Array of 10 random integers ranging from 1-10\",np.random.randint(1,10,10))\n\n#8. Generate a uniformly distributed 2x4 matrix\nprint(\"8.  3x4 uniformly distributed random matrix\\n\",np.random.rand(3,4))\n","c1754f87":"#1. Shape of the array\nsimple_arr = np.array([1,2,3,4,5])\ntwo_d_array = np.array([[1,2],[3,4]])\nprint(\"1a. 1D array shape : \",simple_arr.shape)\nprint(\"1b. 2D array shape : \",two_d_array.shape)\n\n#2. length of the array\nprint(\"2.  Length of an array : \",len(simple_arr))\n\n#3. Number of dimension an array has\nprint(\"3.  Number of dimensions in an array : \",two_d_array.ndim)\n\n#4. Number elements in the array\nprint(\"4.  Number of elements in an array : \",two_d_array.size)\n\n#5. Datatype of elements in an array\nprint(\"5.  Datatype of the elements in an array : \",simple_arr.dtype.name)\n\n#6 Convert the datatype of elements in an array\nnew_arr = simple_arr.astype(str)\nprint(\"6b. Converted array : \",new_arr)\nprint(\"6b. Converted array's element datatype : \",new_arr.dtype.name)","6755dc5f":"#index numpy array starts from 0\nnumpy_arr = np.array([10,20,30,40,50,60,70,80,90])\nprint(\"1. Array : \",numpy_arr)\n\n#Access and print the element at 2th index in numpy array numpy_arr\nprint(\"2. Element at 0th index : \",numpy_arr[0])\n\n\n#3. Access and print the 2nd element from last. Note : Numpy has reverse\/negative index on every array \n#      that helps in traversing in resever direction or access elements from last to first.\nprint(\"3. \",numpy_arr[-2])\n","2c086b33":"\n#The basic slice syntax is i:j:k where i is the starting index, j is the stopping index, and k is the step\n\n#1. Printing all the element from 0th index till 5th index(not included)\nprint(\"1. \",numpy_arr[0:5:1])\n\n#2. Another way of printing above \nprint(\"2. \",numpy_arr[:5])\n\n#3. Print all elements from 2th index till the last index(including)\nprint(\"3. \",numpy_arr[2:])\n\n#4. Print all elements form 0th index till the last skipping one element\nprint(\"4. \",numpy_arr[::2])\n\n#5. Print all elements but last 2 elements\nprint(\"5. \",numpy_arr[:-2])\n\n#6. Print only last 2 elements\nprint(\"6. \",numpy_arr[-2:])\n","aa4c4f3c":"numpy_arr = np.array([[5,7,13,4],[41,2,23,67],[3,34,9,8],[11,56,0,16]])\nnumpy_arr","8da5a080":"#1. pick the element at index 2,1. 2D array takes index as [n,m] or [n][m] where n is the row index and m the column index\nprint(\"1a. Element at 2,1 : \",numpy_arr[2][1])\nprint(\"1b. Element at 2,1 : \",numpy_arr[2,1])\n\n#2. Fetch the first row of the matrix\nprint(\"2. First row : \",numpy_arr[0])\n\n","b6706036":"\n#3. Fetch the 2nd column of the matrix\nprint(\"3. First Column : \",numpy_arr[:,1]) # slice before comma denotes we want all the element from row, \n                                        #1 after comma denotes column position as 1\n    \n#4. Fetch all column but first\nprint(\"4. \\n\",numpy_arr[:,1:])","2a881890":"numpy_arr[:3,1]","e389c83c":"numpy_arr = np.array([1,2,3,4,5])\nprint(\"1.  Base array : \",numpy_arr)\n\n#2. Adding new element 6 to the array and remove the element at 2nd index\nnumpy_arr = np.append(numpy_arr,6)\nprint(\"2a. Appending 6 to numpy_arr : \",numpy_arr)\nprint(\"2b. Deleting element at index 2 : \",np.delete(numpy_arr,2))\n\n#3. Adding a new element at a particular position\nprint(\"3.  Inserting 22 at index 1 : \",np.insert(numpy_arr,1,22))\n\n#4. Creating a 2d array\ntwo_d_array = [[1,2,3],\n              [4,5,6],\n              [7,8,9]]\ntwo_d_np_array = np.array(two_d_array)\nprint(\"4.  2D array \\n\",two_d_np_array)\n\n#5. Add a row [-1,-2,-3] and remove the 0th row from the 2d array two_d_np_array\ntwo_d_np_array = np.vstack((two_d_np_array,[-1,-2,-3]))\nprint(\"5a. Adding a new new row : \\n\",two_d_np_array)\n\ntwo_d_np_array = np.delete(two_d_np_array,0,axis=0)\nprint(\"5b. Deleting a row : \\n\",two_d_np_array)\n\n#6. Add a clumn [10,20,30] to two_d_np_array\ntwo_d_np_array = np.column_stack((two_d_np_array,[10,20,30]))\nprint(\"6. Adding a new column : \\n\",two_d_np_array)\n\n#7. Append 2 2d matrix column wise\na = [[1,2,3],[4,5,6],[7,8,9]]\nb = [[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]]\nprint(\"7. Appending 2 2D numpy arrays : \\n\",np.append(a,b,axis=0))\n\n\n#8. convert a 2d matrix to a flat 1dmatrix\/array\na = np.array([[1,2,3],[4,5,6],[7,8,9]])\nprint(\"8. flattening an nD array to 1d array : \",a.flatten())\n\n#9. Reshape a 4x2 matrix to 2x4 matrix\na = np.array([[1,2],[3,4],[5,6],[7,8]])\nprint(\"9a. original shape\",a.shape)\nprint(\"9b. New shape \",a.reshape((2,4)).shape)\nprint(\"9c. value \\n\",a.reshape((2,4)))\n\n#10. Transpose a matrix\nprint(\"10. Transpose : \\n\",np.transpose(a))\n\n\n#11. Split an matrix horizontally\nprint(\"11. Horizontal split : \\n\",np.hsplit(a,1))\n\n#12. Split an matrix vertically\nprint(\"12. Vertical split : \\n\",np.vsplit(a,1))","d4a13cb4":"#1. Add all the elements of an numpy array with 2, Note, Numpy allows scaler operation on each elements\nnumpy_arr = np.array([4,12,64,8,12,128])\nprint(\"1a. Original array : \",numpy_arr)\nprint(\"1b. Adding 2 to all elements of the array : \",numpy_arr+2)\n\n#2. Divide all the elements of array by 4\nprint(\"2. Divding all elements with 4 : \",numpy_arr\/4)\n\n#3. Perform above action using lamba\ndiv_custom = lambda x: x\/4\nprint(\"3. Apply a lamda func to all elements : \",div_custom(numpy_arr))\n\n#4. add each elements of one array with corresponsing elements of another\na = np.array([1,2,3])\nb = np.array([4,16,64])\nprint(\"4. Adding 2 arrays(element wise) : \",np.add(a,b))\n\n#5. Substract each elements of one array from corresponsing elements of another\nprint(\"5. Substracting one array from another (Element wise) : \",np.subtract(b,a))\n\n#6. Divide each elements of one array by corresponsing elements of another\nprint(\"6. Divide one array with another(Element wise) : \",np.divide(b,a))\n\n#7. Multiply each elements of one array by corresponsing elements of another\nprint(\"7. Muliply one array with another(Element wise) : \",np.multiply(b,a))\n\n#8. Square root of each element in an array\nprint(\"8a. Square root of each element :\",np.sqrt(b))\nprint(\"8b. Generic way of square root : \",b**.5)\n\n#9. Check if elements of one array is greater than corresponsing elements in another array\nprint(\"9. Element wise comparision : \",b>a)","f2e50de7":"a = np.array([10,2,13,44,9,6])\n\n#1. Getting max element in the array\nprint(\"1. Element with highest numerical value : \",a.max())\n\n#2. Getting position of max element in the array\nprint(\"2. Position of highest number : \",a.argmax())\n\n#3. Getting max element in the array\nprint(\"3. Index with least numerical value : \",a.min())\n\n#4. Getting position of max element in the array\nprint(\"4. Index of least number : \",a.argmin())\n\n#5. Print the mean of all elements in the array\nprint(\"5. Mean of all the element : \",a.mean())\n\n#6. Print the variance of all elements in the array\nprint(\"6. Variance of all the element : \",a.var())\n\n#7. Print the size of the array\nprint(\"7. Size of the array : \",a.size)\n\n#8. Sum of all the elements\nprint(\"8. Sum of all elements : \",a.sum())","874db40a":"numpy_arr = np.array([12,33,2,56,4,32,7])\nprint(numpy_arr)\n#1. Create a new array with by fetching all elements in numpy_arr that are greater than 10\n\nprint(\"1. condition on each element of array : \",numpy_arr>10)\n\nnew_arr = numpy_arr[numpy_arr>10]\nprint(\"1. Passing the above boolean array to array itself fetches all elements that corresponds to True : \",new_arr)","b2c58f31":"numpy_arr = np.arange(6)\nprint(\"1. Original Array : \\n\",numpy_arr)\n\n#2. shallow copy\narr_view = numpy_arr.view()\nprint(\"2. Shallow copy : \\n\",arr_view)\n\n\n#3. copy\/Deep copy\narr_copy = numpy_arr.copy()\nprint(\"3. Deep copy : \\n\",arr_copy)","d5de68e5":"<h3 style=\"color:red\"> Autogenerate arrays from out of box methods <\/h3>","d4220783":"<img src=\"https:\/\/i.imgur.com\/URXpleu.png\" width=\"600px\">","cabec0a3":"**The slice in 2D works same way as 1D array slice before comma is for row and after is for column**","fe5d4334":"<h3 style=\"color:red\"> Indexing and slicing : 1D Array<\/h3>","45cda87e":"<h3 style=\"color:red\"> Mathematical Operations <\/h3>","8960598a":"<img src=\"https:\/\/i.imgur.com\/y5rR19w.png\" width=\"300px\">","a43199ab":"<h3 style=\"color:red\"> Copying an array <\/h3>","f362da4c":"<h3 style=\"color:red\"> Indexing and slicing : 2D Array<\/h3>","82cde4c0":"<h1 style=\"text-align: center;color:green\"><u>Numpy kickstart<\/u><\/h1>\n<h3 style=\"text-align: center\">A package developed to make the life of data scientists a little eaiser. It provides many basic and advanced mathematical\/scientific operations on arrays(sorting, manuapulation, transformation, statistical operations just to name a few). At the end of day as data scientist or statistician we have to play with numbers in form of list\/tables. Most of the other advanced packages related to arrays\/tables like Pandas are built on top of numpy. This Kaggle kernel is a pratical doc to introduce you to the world of Numpy or even if you already are aware of numpy and are a little rusty, this is help you get up to speed. Happy coding and please provide your view if you would like to see any changes to this doc.<\/h3>","7f5cac60":"<h3 style=\"color:red\"> Aggregate Functions <\/h3>","cc313316":"<h3 style=\"color:red\"> Getting information about the array <\/h3>","59dc1e22":"**Access the highlighted section of 2D array using slice**\n<img src=\"https:\/\/i.imgur.com\/cfmGgFn.png\" width=\"300px\">","f3113532":"<h3 style=\"color:red\"> Filtering elements from an array <\/h3>","0888f929":"<h3 style=\"color:red\"> Manupulation : Editing an array or elements in an array <\/h3>","b6cfd0af":"<h3 style=\"color:red\"> Creating Numpy array from python list<\/h3>"}}