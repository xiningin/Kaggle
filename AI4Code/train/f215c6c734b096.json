{"cell_type":{"08d47089":"code","51da0c00":"code","9650a4cb":"code","42707ab6":"code","a54da941":"code","654dc7ef":"code","99fd7c0f":"code","0b130b13":"code","9ebc5618":"code","461056aa":"code","5105a7b2":"code","f51ee1d5":"code","f9322a28":"code","1b8d95b7":"code","dfe11542":"code","af985df9":"code","38b7c5aa":"code","ccf763e1":"code","ee801056":"code","8f40f20c":"code","eeac3061":"code","4ef9ae81":"code","57dfa14e":"code","e22165b4":"code","cc8747eb":"code","1ba6fb39":"code","ec75cce2":"code","09b61891":"code","b2d63898":"code","a87fe91a":"code","dd9e04f2":"code","5af40835":"code","3e470d1f":"code","8f5f57e9":"code","7c1a78fc":"code","55454ac5":"code","5ce4efb6":"code","dad58511":"code","deced3d3":"code","a1c0e470":"code","015929ef":"code","5f2069c3":"code","0ce66f6d":"code","d692c318":"code","7eeb543a":"code","53ca9f19":"code","691af0a2":"markdown","658e9266":"markdown","fe29a88d":"markdown","97c566b6":"markdown","16ec501c":"markdown","c82cf76a":"markdown","d84f5319":"markdown","57443dff":"markdown","5e4d2662":"markdown","7e0ac155":"markdown","53040382":"markdown","1316530b":"markdown","f1148e11":"markdown","6b4ee293":"markdown","36e3d4bd":"markdown","04b22f42":"markdown","86d3ff2d":"markdown","be68db1b":"markdown","7fb188c7":"markdown","3d8290af":"markdown","3d14c54d":"markdown","22e1bdaf":"markdown","11061c80":"markdown","30b60828":"markdown","f40dc1fc":"markdown","b76d34ed":"markdown","124d0f43":"markdown","a7e34175":"markdown","e2cd82f1":"markdown","e4e5bdc9":"markdown","4b6e757f":"markdown","0b720766":"markdown","773d3816":"markdown"},"source":{"08d47089":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats # we will need norm function to fit the seaborn.distplot\n\n# models\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.linear_model import LassoCV\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\n\n# supplementary\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\n\nfrom scipy.special import boxcox1p\n\nimport os\npd.set_option('display.max_columns', None)\ndf = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n","51da0c00":"sns.distplot(df.SalePrice, fit=stats.norm, color='indigo');","9650a4cb":"# taking the logarithmic SalePrice\nlogSP = np.log(df.SalePrice)\nlogdf = df.drop(['SalePrice'], axis=1)\nlogdf['LogSalePrice']=logSP\n\n# creating a correlation matrix\ncorrmat = df.corr() ** 2\nplt.figure(figsize=(15,12))\nsns.set(font_scale=0.75)\nsns.heatmap(corrmat, vmax=.75, square = True, cmap=\"RdYlGn\");","42707ab6":"corrmat = df.corr()**2\ncorrmat_log = logdf.corr()**2\n\nk=10\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncols_log = corrmat_log.nlargest(k,'LogSalePrice')['LogSalePrice'].index\ncm = np.corrcoef(df[cols].values.T)**2\ncm_log = np.corrcoef(logdf[cols_log].values.T)**2\nsns.set(font_scale=1.25)\n\nplt.figure(figsize=(23,7))\nplt.subplot(121)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f',\n                annot_kws={'size':10}, yticklabels=cols.values,\n                xticklabels=cols.values, cmap='viridis', vmax=0.7)\nplt.subplot(122)\nhm_log = sns.heatmap(cm_log, cbar=True, annot=True, square=True, fmt='.2f',\n                annot_kws={'size':10}, yticklabels=cols_log.values,\n                xticklabels=cols_log.values, cmap='viridis',vmax=0.7)\nplt.show()","a54da941":"# select numerical features\nnum_feat = df.select_dtypes(include='number')\nnum_feat.describe()","654dc7ef":"yr_features = ['YearBuilt','YearRemodAdd', 'GarageYrBlt']\nplt.figure(figsize=(18,30))\nfor i, feature in enumerate(yr_features):\n    plt.subplot(3,1,i+1)\n    sns.boxplot(x=feature,y='SalePrice', data=df)\n    plt.xticks(rotation=90)\n    plt.xticks(fontsize=8)","99fd7c0f":"date_sale = ['MoSold', 'YrSold']\nplt.figure(figsize=(12,10))\nfor i, feature in enumerate(date_sale):\n    plt.subplot(2,2,2*i+1)\n    sns.boxplot(x=feature,y='SalePrice', data=df)\n    plt.subplot(2,2,2*(i+1))\n    sns.countplot(x=feature, data=df)","0b130b13":"baths = ['BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath']\nplt.figure(figsize=(12,18))\nfor i, feature in enumerate(baths):\n    plt.subplot(4,2,2*i+1)\n    sns.boxplot(x=feature,y='SalePrice', data=df)\n    plt.subplot(4,2,2*(i+1))\n    sns.countplot(x=feature, data=df)","9ebc5618":"temp = df[['BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','SalePrice']]\ntemp['NumOfBaths'] = temp['BsmtFullBath']+temp['BsmtHalfBath']+temp['FullBath']+temp['HalfBath']\nplt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(x='NumOfBaths',y='SalePrice', data=temp);\nplt.subplot(122)\nsns.countplot(x='NumOfBaths', data=temp);","461056aa":"rooms_n_garage = ['BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars']\nplt.figure(figsize=(12,23))\nfor i, feature in enumerate(rooms_n_garage):\n    plt.subplot(5,2,2*i+1)\n    sns.boxplot(x=feature,y='SalePrice', data=df)\n    plt.subplot(5,2,2*(i+1))\n    sns.countplot(x=feature, data=df)","5105a7b2":"features = ['MSSubClass', 'OverallQual', 'OverallCond']\nplt.figure(figsize=(12,14))\nfor i, feature in enumerate(features):\n    plt.subplot(3,2,2*i+1)\n    sns.boxplot(x=feature,y='SalePrice', data=df)\n    plt.subplot(3,2,2*(i+1))\n    sns.countplot(x=feature, data=df)","f51ee1d5":"df.loc[df.BsmtFinSF2 > 0, 'HasBsmt2'] = 'Yes'\ndf.loc[df.BsmtFinSF2 ==0, 'HasBsmt2'] = 'No'\ndf = df.drop('BsmtFinSF2', axis=1)","f9322a28":"df.loc[df.LowQualFinSF > 0, 'LowQualFin'] = 'Yes'\ndf.loc[df.LowQualFinSF ==0, 'LowQualFin'] = 'No'\ndf = df.drop('LowQualFin', axis=1)","1b8d95b7":"bsmt_area = ['BsmtFinSF1', 'BsmtUnfSF', 'TotalBsmtSF']\nplt.figure(figsize=(25,18))\nfor i, feature in enumerate(bsmt_area):\n    plt.subplot(3,3,3*i+1)\n    plt.scatter(df[feature], df['SalePrice'], c='brown', alpha=0.5)\n    plt.subplot(3,3,3*i+2)\n    sns.distplot(df[feature], color='brown')\n    plt.subplot(3,3,3*i+3)\n    stats.probplot(df[feature], plot=plt);","dfe11542":"areas = ['1stFlrSF', '2ndFlrSF', 'GrLivArea', 'GarageArea']\nplt.figure(figsize=(25,24))\nfor i, feature in enumerate(areas):\n    plt.subplot(4,3,3*i+1)\n    plt.scatter(df[feature], df['SalePrice'], c='orange',alpha=0.5)\n    plt.subplot(4,3,3*i+2)\n    sns.distplot(df[feature], color='orange')\n    plt.subplot(4,3,3*i+3)\n    stats.probplot(df[feature], plot=plt);","af985df9":"lot_areas = ['LotArea', 'LotFrontage']\nplt.figure(figsize=(25,10))\nfor i, feature in enumerate(lot_areas):\n    plt.subplot(2,3,3*i+1)\n    plt.scatter(df[feature], df['SalePrice'], c='darkgreen', alpha=0.5)\n    plt.subplot(2,3,3*i+2)\n    sns.distplot(df[feature], color='darkgreen')\n    plt.subplot(2,3,3*i+3)\n    stats.probplot(df[feature], plot=plt);","38b7c5aa":"# Box-Cox transformation\nGrLivArea_tr = boxcox1p(df.GrLivArea, stats.boxcox_normmax(df.GrLivArea +1))\n\nplt.figure(figsize=(25,12))\n\n# before box-cox transformation\nplt.subplot(231)\nplt.scatter(df.GrLivArea, df.SalePrice);\nplt.subplot(232)\nsns.distplot(df.GrLivArea);\nplt.subplot(233)\nstats.probplot(df.GrLivArea, plot=plt);\n\n# after box-cox transformation\nplt.subplot(234)\nplt.scatter(GrLivArea_tr, df.SalePrice);\nplt.subplot(235)\nsns.distplot(GrLivArea_tr);\nplt.subplot(236)\nstats.probplot(GrLivArea_tr, plot=plt);","ccf763e1":"cat_feat = df.select_dtypes(include=['O'])\ncat_feat.describe()","ee801056":"for i, feature in enumerate(cat_feat.columns):\n    cat_df = df[['SalePrice', feature]].groupby(feature).mean().round(2)\n    count_df = df[['SalePrice',feature]].groupby(feature).count().rename(columns={'SalePrice':'Count'})\n    cat_df = cat_df.join(count_df).sort_values(by='SalePrice', ascending=False)\n    print(cat_df)\n    print('-'*40)","8f40f20c":"cat_msz = df[['SalePrice','MSZoning']].groupby('MSZoning').mean().round(2)\ncount_df = df[['SalePrice','MSZoning']].groupby('MSZoning').count().rename(columns={'SalePrice':'Count'})\ncat_msz = cat_msz.join(count_df).sort_values(by='SalePrice', ascending=False)\n\nplt.figure(figsize=(22,8))\nplt.subplot(131)\nbbox=[0.2, 0.2, 0.6, 0.6]\nmpl_table = plt.table(cellText = np.round(cat_msz.values,2), rowLabels = cat_msz.index, colLabels=cat_msz.columns,\n                     bbox=bbox)\nplt.axis('off')\nmpl_table.auto_set_font_size(False)\nmpl_table.set_fontsize(12)\nplt.subplot(132)\nplt.xticks(rotation=90)\nsns.countplot(df.MSZoning);\nplt.subplot(133)\nplt.xticks(rotation=90)\nsns.boxplot(x='MSZoning', y='SalePrice', data=df);","eeac3061":"cat_lshp = df[['SalePrice','LotShape']].groupby('LotShape').mean().round(2)\ncount_df = df[['SalePrice','LotShape']].groupby('LotShape').count().rename(columns={'SalePrice':'Count'})\ncat_lshp = cat_lshp.join(count_df).sort_values(by='SalePrice', ascending=False)\n\nplt.figure(figsize=(22,8))\nplt.subplot(131)\nbbox=[0.2, 0.2, 0.6, 0.6]\nmpl_table = plt.table(cellText = np.round(cat_lshp.values,2), rowLabels = cat_lshp.index, colLabels=cat_lshp.columns,\n                     bbox=bbox)\nplt.axis('off')\nmpl_table.auto_set_font_size(False)\nmpl_table.set_fontsize(12)\nplt.subplot(132)\nplt.xticks(rotation=90)\nsns.countplot(df.LotShape);\nplt.subplot(133)\nplt.xticks(rotation=90)\nsns.boxplot(x='LotShape', y='SalePrice', data=df);","4ef9ae81":"cat_lctr = df[['SalePrice','LandContour']].groupby('LandContour').mean().round(2)\ncount_df = df[['SalePrice','LandContour']].groupby('LandContour').count().rename(columns={'SalePrice':'Count'})\ncat_lctr = cat_lctr.join(count_df).sort_values(by='SalePrice', ascending=False)\n\nplt.figure(figsize=(22,8))\nplt.subplot(131)\nbbox=[0.2, 0.2, 0.6, 0.6]\nmpl_table = plt.table(cellText = np.round(cat_lctr.values,2), rowLabels = cat_lctr.index, colLabels=cat_lctr.columns,\n                     bbox=bbox)\nplt.axis('off')\nmpl_table.auto_set_font_size(False)\nmpl_table.set_fontsize(12)\nplt.subplot(132)\nplt.xticks(rotation=90)\nsns.countplot(df.LandContour);\nplt.subplot(133)\nplt.xticks(rotation=90)\nsns.boxplot(x='LandContour', y='SalePrice', data=df);","57dfa14e":"cat_hstl = df[['SalePrice','HouseStyle']].groupby('HouseStyle').mean().round(2)\ncount_df = df[['SalePrice','HouseStyle']].groupby('HouseStyle').count().rename(columns={'SalePrice':'Count'})\ncat_hstl = cat_hstl.join(count_df).sort_values(by='SalePrice', ascending=False)\n\nplt.figure(figsize=(22,8))\nplt.subplot(131)\nbbox=[0.2, 0.2, 0.6, 0.6]\nmpl_table = plt.table(cellText = np.round(cat_hstl.values,2), rowLabels = cat_hstl.index, colLabels=cat_hstl.columns,\n                     bbox=bbox)\nplt.axis('off')\nmpl_table.auto_set_font_size(False)\nmpl_table.set_fontsize(12)\nplt.subplot(132)\nplt.xticks(rotation=90)\nsns.countplot(df.HouseStyle);\nplt.subplot(133)\nplt.xticks(rotation=90)\nsns.boxplot(x='HouseStyle', y='SalePrice', data=df);","e22165b4":"cat_nbh = df[['SalePrice','Neighborhood']].groupby('Neighborhood').mean().round(2)\ncount_df = df[['SalePrice','Neighborhood']].groupby('Neighborhood').count().rename(columns={'SalePrice':'Count'})\ncat_nbh = cat_nbh.join(count_df).sort_values(by='SalePrice', ascending=False)\n\nplt.figure(figsize=(22,7))\nplt.subplot(131)\nbbox=[0, 0, 1, 1]\nmpl_table = plt.table(cellText = np.round(cat_nbh.values,2), rowLabels = cat_nbh.index, colLabels=cat_nbh.columns,\n                     bbox=bbox)\nplt.axis('off')\nmpl_table.auto_set_font_size(False)\nmpl_table.set_fontsize(12)\nplt.subplot(132)\nplt.xticks(rotation=90)\nsns.countplot(df.Neighborhood);\nplt.subplot(133)\nplt.xticks(rotation=90)\nsns.boxplot(x='Neighborhood', y='SalePrice', data=df);","cc8747eb":"cat_ex1 = df[['SalePrice','Exterior1st']].groupby('Exterior1st').mean().round(2)\ncount_df = df[['SalePrice','Exterior1st']].groupby('Exterior1st').count().rename(columns={'SalePrice':'Count'})\ncat_ex1 = cat_ex1.join(count_df).sort_values(by='SalePrice', ascending=False)\n\ncat_ex2 = df[['SalePrice','Exterior2nd']].groupby('Exterior2nd').mean().round(2)\ncount_df = df[['SalePrice','Exterior2nd']].groupby('Exterior2nd').count().rename(columns={'SalePrice':'Count'})\ncat_ex2 = cat_ex2.join(count_df).sort_values(by='SalePrice', ascending=False)\n\nplt.figure(figsize=(22,16))\nplt.subplot(231)\nbbox=[0, 0, 1, 1]\nmpl_table = plt.table(cellText = np.round(cat_ex1.values,2), rowLabels = cat_ex1.index, colLabels=cat_ex1.columns,\n                     bbox=bbox)\nplt.axis('off')\nmpl_table.auto_set_font_size(False)\nmpl_table.set_fontsize(12)\nplt.subplot(232)\nplt.xticks(rotation=90)\nsns.countplot(df.Exterior1st);\nplt.subplot(233)\nplt.xticks(rotation=90)\nsns.boxplot(x='Exterior1st', y='SalePrice', data=df);\n\nplt.subplot(234)\nbbox=[0, 0, 1, 1]\nmpl_table = plt.table(cellText = np.round(cat_ex2.values,2), rowLabels = cat_ex2.index, colLabels=cat_ex2.columns,\n                     bbox=bbox)\nplt.axis('off')\nmpl_table.auto_set_font_size(False)\nmpl_table.set_fontsize(12)\nplt.subplot(235)\nplt.xticks(rotation=90)\nsns.countplot(df.Exterior2nd);\nplt.subplot(236)\nplt.xticks(rotation=90)\nsns.boxplot(x='Exterior2nd', y='SalePrice', data=df);","1ba6fb39":"cat_mvs = df[['SalePrice','MasVnrType']].groupby('MasVnrType').mean().round(2)\ncount_df = df[['SalePrice','MasVnrType']].groupby('MasVnrType').count().rename(columns={'SalePrice':'Count'})\ncat_mvs = cat_mvs.join(count_df).sort_values(by='SalePrice', ascending=False)\n\nplt.figure(figsize=(22,8))\nplt.subplot(131)\nbbox=[0.2, 0.2, 0.6, 0.6]\nmpl_table = plt.table(cellText = np.round(cat_mvs.values,2), rowLabels = cat_mvs.index, colLabels=cat_mvs.columns,\n                     bbox=bbox)\nplt.axis('off')\nmpl_table.auto_set_font_size(False)\nmpl_table.set_fontsize(12)\nplt.subplot(132)\nplt.xticks(rotation=90)\nsns.countplot(df.MasVnrType);\nplt.subplot(133)\nplt.xticks(rotation=90)\nsns.boxplot(x='MasVnrType', y='SalePrice', data=df);","ec75cce2":"missing_data = df.isnull().sum().sort_values(ascending=False)\nmissing_data.head(20)","09b61891":"all_data = pd.concat((df.loc[:,'MSSubClass':'SaleCondition'], test_df.loc[:,'MSSubClass':'SaleCondition']))","b2d63898":"all_data.loc[all_data.TotalBsmtSF > 0, 'HasBsmt'] = 'Yes'\nall_data.loc[all_data.TotalBsmtSF == 0, 'HasBsmt'] = 'No'","a87fe91a":"all_data.loc[all_data.GarageArea > 0, 'HasGarage'] = 'Yes'\nall_data.loc[all_data.GarageArea ==0, 'HasGarage'] = 'No'","dd9e04f2":"all_data.loc[all_data.Fireplaces > 0, 'HasFireplace'] = 'Yes'\nall_data.loc[all_data.Fireplaces ==0, 'HasFireplace'] = 'No'","5af40835":"all_data.loc[all_data.PoolArea > 0, 'HasPool'] = 'Yes'\nall_data.loc[all_data.PoolArea ==0, 'HasPool'] = 'No'","3e470d1f":"all_data.loc[all_data['2ndFlrSF'] > 0, 'Has2ndFlr'] = 'Yes'\nall_data.loc[all_data['2ndFlrSF'] ==0, 'Has2ndFlr'] = 'No'","8f5f57e9":"all_data['NumOfBaths'] = all_data['BsmtFullBath']+all_data['BsmtHalfBath']+all_data['FullBath']+all_data['HalfBath']","7c1a78fc":"categorical_features = ['MSSubClass', 'MoSold', 'YrSold', 'OverallQual', 'OverallCond','BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars',\n                       'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'NumOfBaths', 'HasBsmt','HasGarage','HasFireplace','HasPool','Has2ndFlr']\nfor feature in categorical_features:\n    all_data[feature] = all_data[feature].astype('category')","55454ac5":"df['SalePrice'] = np.log1p(df['SalePrice'])\n\nnumeric_feats = all_data.dtypes[(all_data.dtypes == 'int') | (all_data.dtypes=='float') ].index\n\nskewed_feats = all_data[numeric_feats].dropna().skew()\nskewed_feats = skewed_feats[skewed_feats>0.75].index\n\nall_data[skewed_feats] = np.log1p(all_data[skewed_feats])","5ce4efb6":"all_data = pd.get_dummies(all_data)\nall_data = all_data.fillna(all_data.mean()) ","dad58511":"X_train = all_data[:df.shape[0]]\nX_test = all_data[df.shape[0]:]\ny = df.SalePrice","deced3d3":"def cv_rmse(model, X=X_train):\n    rmse = np.sqrt(-cross_val_score(model, X, y, scoring='neg_mean_squared_error', cv=5))\n    return rmse","a1c0e470":"model_lasso = LassoCV(alphas=[1, 0.1, 0.001, 0.0005]).fit(X_train,y)","015929ef":"rmse_cv(model_lasso).mean()","5f2069c3":"coef = pd.Series(model_lasso.coef_, index = X_train.columns)","0ce66f6d":"print(\"\u041b\u0430\u0441\u0441\u043e \u0432\u044b\u0431\u0440\u0430\u043b \" + str(sum(coef !=0)) + \" \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438 \u0443\u0434\u0430\u043b\u0438\u043b \" + str(sum(coef ==0)) + \" \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\")","d692c318":"imp_coef = pd.concat([coef.sort_values().head(10), coef.sort_values().tail(10)])\nplt.figure(figsize=(8,10))\nimp_coef.plot(kind='barh');","7eeb543a":"# xgboost = XGBRegressor(learning_rate=0.01,n_estimators=3460,\n#                                     max_depth=3, min_child_weight=0,\n#                                     gamma=0, subsample=0.7,\n#                                     colsample_bytree=0.7,\n#                                     objective='reg:squarederror', nthread=-1,\n#                                     scale_pos_weight=1, seed=27,\n#                                     reg_alpha=0.00006)","53ca9f19":"# score = cv_rmse(xgboost)\n# print(\"XGBoost: {:.4f} ({:.4f})\".format(score.mean(),score.std()))","691af0a2":"Oh, first of all we see, that several features are most certainly categorical but they are not described as such. Their connection with target variable might not be linear. These features are:\n**MSSubClass**, **OverallQual**, **OverallCond**, **YearBuilt**, **YearRemodAdd**, **BsmtFullBath**, **BsmtHalfBath**, **FullBath**, **HalfBath**, **BedroomAbvGr**, **KitchenAbvGr**, **TotRmsAbvGrd**, **Fireplaces**, **GarageYrBlt**, **GarageCars**, **MoSold**, **YrSold**.","658e9266":"## Get a close look at categorical features <a id=\"categorical\"><\/a> [[up](#toc)]\n\nWe can definitely see that some categories of different variables have a huge impact on the **SalePrice**:","fe29a88d":"### Overall class, quality and condition","97c566b6":"## Feature engineering [[up](#toc)] <a id=\"feature_engineering\"><\/a>\n\nIt seems that we have to make several categorical featues, that will tell us, whether a dwelling has:\n\n* basement\n* garage\n* fireplace (or fireplaces)\n* pool\n* second floor","16ec501c":"We can see that it almost does not matter what month or year the house was sold in comparison with house building year, it's remodelling date or garage building date.\n\n### Basement\n\nLet's see how different rooms influence the target variable","c82cf76a":"### Exteriors\nMaterials of the house might also have big influence on the SalePrice:","d84f5319":"### Lot Areas","57443dff":"### Misc room features and garage","5e4d2662":"## Get a look at the target variable [[up](#toc)]\nOur target variable is the sale price of the house - SalePrice. Let's see if it is normally distributed. If it is not it would be interesting to see, how it and its logarithm are correlated with other numeric variables.","7e0ac155":"### Basement areas","53040382":"## Introduction <a id=\"toc\"><\/a>\n\nFirst of all, this task is a **regression problem** - we want to predict numeric variable **SalePrice** depending on a number of other features, some of them are also numeric, some of them are categorical. \n\nWe're not really that interested in looking at the table of data itself right now. What we want to know is what features are categorical, what features are numerical and what features are good predictors of the target variable. In order to make good quality EDA and therefore good quality machine learning job we have to make a plan of analysis:\n\n1. Take a look at the target variable\n1. [Take a close look at numerical features](#numerical)\n2. [Take a close look at categorical features](#categorical)\n3. [Deal with missing data and outliers](#missing)\n4. [Create new features](#feature_engineering)\n5. Build a model","1316530b":"### Style of dwelling - <span style=\"color:brown\">HouseStyle<\/span>","f1148e11":"### Floor areas and garage area","6b4ee293":"### Masonry veneer type - <span style=\"color:brown\">MasVnrType<\/span>","36e3d4bd":"It definitely needs to be restructured. First to categorical feature and then one-hot encoded.","04b22f42":"Next, let's convert to catrgorical features those that are now mistakingly numerical, the mose obvious example may be **MSSubClass**","86d3ff2d":"### Month and Year of Sale","be68db1b":"So it is not normally distributed. Let's make a dataframe with logarithmic SalePrice and find the correlations between our target variable and other numeric variables.","7fb188c7":"## Take a close look at numerical features <a id=\"numerical\"><\/a> [[up](#toc)]","3d8290af":"We can see, that 40% of the houses are sold in just 5 neighborhoods: North Ames, College Creek, Old Town, Edwards and Somerset. However, most expensive houses are in Northridge, Northridge Heights and Stone Brook. That's very enlightning.","3d14c54d":"# House Prices EDA and Prediction \n\n*This is my training notebook for data exploration and testing techniques. It is still in progress. However I try to become stronger, so every comment and every advice are welcome.*","22e1bdaf":"### Neighborhood\n\nNeighborhood is a variable that presumably should greatly impact the **SalePrice**. Some neighborhoods may be considered attractive and some may not. Let's take a closer look:","11061c80":"### Flatness of the property - <span style=\"color:brown\">LandContour<\/span>","30b60828":"### General shape of property - <span style=\"color:brown\">LotShape<\/span>","f40dc1fc":"Let's take a look at the distribution of above ground living area, **GrLivArea**.","b76d34ed":"Let's see how areas are distributed with SalePrice:\n\n**<span style=\"color:brown\">BsmtFinSF2', 'LowQualFinSF' are problem features. There are too many bins to make categorical plots, but too few instances in most bins except for the biggest one to make distplots.<\/span>** I plan to cut them into few bins later.\n\nI'll just turn each of them into categorical features with 'Yes\/No' values:","124d0f43":"## Building a model\n\nThis is where I heavily rely on the wonderful notebook [Relularized Linear Models](https:\/\/www.kaggle.com\/apapiu\/regularized-linear-models) by [Alexandru Papiu](https:\/\/www.kaggle.com\/apapiu)","a7e34175":"### General zoning classification of the sale - <span style=\"color:brown\">MSZoning<\/span>","e2cd82f1":"It is evident that although there is some relation between these variables and **SalePrice**, it is not striking. Let's exercise a little bit of feature engineering and see what happens if we count all the bathrooms in a dwelling?","e4e5bdc9":"### Years of house and garage building and remodelling\n\n'GarageYrBlt' is a float, let's change that to int. <span style=\"color:brown\">Faced a difficulty with conversion. `pandas.Series.astype()` is not working as I wish and refuses to convert `NaN`. `numpy.ndarray.astype()` while converting returns nonsense instead of `NaN` values. <\/span> Proceed, return later.","4b6e757f":"## Dealing with missing data and outliers [[up](#toc)] <a id=\"missing\"><\/a>","0b720766":"Now, what can we see here? First, we can see some correlations and potential collinearities: \n* GarageCars and GarageArea, \n* TotalBsmtSF and 1stFlrSF, \n* GarageYrBlt and YearBuilt,\n* TotRmsAbvGrd and GrLivArea\n\nAlso we can see some correlations between our target variable and OverallQual,GrLivArea and several others.\n\nWhat I want to understand now is wether correlations between variables and 'SalePrice' are different than between the same variables and logarithm of 'SalePrice'","773d3816":"We can that there is much more evident relationship between total number of bathrooms and 'SalePrice'. Let's get rid of all those other variables."}}