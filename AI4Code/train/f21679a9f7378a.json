{"cell_type":{"625238c9":"code","6e72c524":"code","591ac20b":"code","40da8e3a":"code","50052f6f":"code","74ffe9d3":"code","34b3841f":"code","fdb30899":"code","8534e388":"code","18b22bee":"code","8677bcd1":"code","e31225ca":"code","768b522e":"code","0ee1f85a":"code","71b9847b":"code","c801c767":"code","5f0246d1":"code","e21a7a00":"code","bc273eb7":"code","d4426511":"code","c2620ddd":"markdown","a4b0ced6":"markdown","f1c5a044":"markdown","d4a731d8":"markdown","c41e49ee":"markdown","ceaba723":"markdown","eaf78bb8":"markdown","11764b62":"markdown","c0c382ea":"markdown","7a54916f":"markdown","a11f451e":"markdown","7b37f031":"markdown","1ae3c7a9":"markdown","720cb78a":"markdown","73286f1f":"markdown","29af2afa":"markdown","5701c2a3":"markdown","02eeac83":"markdown","478b8d03":"markdown","9cfce280":"markdown","8dfe7366":"markdown","7479d072":"markdown"},"source":{"625238c9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport folium\nfrom datetime import datetime, timedelta,date\nimport plotly.express as px\n\nimport warnings\n\nfrom statsmodels.tsa.arima_model import ARIMA\n\n\nwarnings.filterwarnings('ignore')\n%matplotlib inline \n","6e72c524":"#Importing  Datasets \n\ndf_age = pd.read_csv(\"..\/input\/covid19-in-india\/AgeGroupDetails.csv\",index_col = 0)\ndf_india = pd.read_csv(\"..\/input\/covid19-in-india\/covid_19_india.csv\",index_col= 0)\ndf_tests = pd.read_csv(\"..\/input\/covid19-in-india\/StatewiseTestingDetails.csv\")\ndf_hosp = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv',index_col=0)\ndf_pop = pd.read_csv('..\/input\/covid19-in-india\/population_india_census2011.csv',index_col= 0)\ndf_labs = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingLabs.csv')","591ac20b":"#Dropping redundant data \n\ndf_india.drop(df_india[df_india['State\/UnionTerritory'] == 'Telangana***'].index,inplace = True)\ndf_india.drop(df_india[df_india['State\/UnionTerritory'] == 'Telengana***'].index,inplace = True)\ndf_india.drop(df_india[df_india['State\/UnionTerritory'] == 'Telengana'].index,inplace = True)\n\ndf_india.drop(df_india[df_india['State\/UnionTerritory'] == 'Unassigned'].index,inplace = True)","40da8e3a":"#Some preprocessing \n\ndf_india['Date'] = pd.to_datetime(df_india['Date'],dayfirst=True)\ndf_india['Date'] = df_india['Date'].dt.strftime('%m\/%d\/%Y')\n\n#Dropping Negative column as we already have 'TotalSamples' and 'Positive'\n\ndf_tests.drop('Negative',axis =1 ,inplace = True)\ndf_pop.set_index('State \/ Union Territory',inplace = True)\n\n","50052f6f":"#Filling in Missing Data\n\n#For missing 'Positive' cases of COVID, the previous known value is filled in.\ndf_tests['Positive'].fillna(method='ffill',inplace = True)\n\n#For missing 'Sub-District Hospitals' values, assumed 0 hospitals are present in state.\ndf_hosp.fillna(0,inplace = True)\n\n","74ffe9d3":"#making a database of cases of every state for the last day of reporting \n\nstate_report = df_india.groupby(by = 'State\/UnionTerritory').max().reset_index()\n\nstate_report['Active'] = (state_report['Confirmed'] - (state_report['Cured'] + state_report['Deaths']))\nstate_report['Deaths per 100 Cases'] = round(((state_report['Deaths']\/state_report['Confirmed'])*100),2)\n\nstate_report.drop(columns = ['Time' , 'ConfirmedIndianNational' , 'ConfirmedForeignNational'],inplace = True)\n\nstate_report.style.background_gradient(cmap = 'Greens',subset= ['Cured'])\\\n                    .background_gradient(cmap = 'Reds',subset= ['Deaths'])\\\n                    .background_gradient(cmap = 'Blues',subset= ['Confirmed'])\\\n                    .background_gradient(cmap = 'Greys',subset= ['Active'])\\\n                    .background_gradient(cmap = 'Reds',subset =\n                                         ['Deaths per 100 Cases']).format('{:.2f}', subset = ['Deaths per 100 Cases'])\n","34b3841f":"\n#State latitudes and longitudes found using geopy\n\nLocation_dict = {'Andaman and Nicobar Islands': (10.2188344, 92.5771329),\n 'Andhra Pradesh': (15.9240905, 80.1863809),\n 'Arunachal Pradesh': (27.6891712, 96.4597226),\n 'Assam': (26.4073841, 93.2551303),\n 'Bihar': (25.6440845, 85.906508),\n 'Chandigarh': (30.7334421, 76.7797143),\n 'Chhattisgarh': (21.6637359, 81.8406351),\n 'Daman & Diu': (20.42000485, 72.86376290300566),\n 'Delhi': (28.6517178, 77.2219388),\n 'Goa': (15.3004543, 74.0855134),\n 'Gujarat': (22.41540825, 72.03149703699282),\n 'Haryana': (29.0, 76.0),\n 'Himachal Pradesh': (31.81676015, 77.34932051968858),\n 'Jammu and Kashmir': (33.5574473, 75.06152),\n 'Jharkhand': (23.4559809, 85.2557301),\n 'Karnataka': (14.5203896, 75.7223521),\n 'Kerala': (10.3528744, 76.5120396),\n 'Ladakh': (33.9456407, 77.6568576),\n 'Madhya Pradesh': (23.9699282, 79.39486954625225),\n 'Maharashtra': (19.531932, 76.0554568),\n 'Manipur': (24.7208818, 93.9229386),\n 'Meghalaya': (25.5379432, 91.2999102),\n 'Mizoram': (23.2146169, 92.8687612),\n 'Nagaland': (26.1630556, 94.5884911),\n 'Odisha': (20.5431241, 84.6897321),\n 'Puducherry': (11.9340568, 79.8306447),\n 'Punjab': (30.9293211, 75.5004841),\n 'Rajasthan': (26.8105777, 73.7684549),\n 'Sikkim': (27.601029, 88.45413638680145),\n 'Tamil Nadu': (10.9094334, 78.3665347),\n 'Telangana': (17.8495919, 79.1151663),\n 'Telengana': (17.329125, 78.5822228),\n 'Tripura': (23.7750823, 91.7025091),\n 'Uttar Pradesh': (27.1303344, 80.859666),\n 'Uttarakhand': (30.091993549999998, 79.32176659343018),\n 'West Bengal': (22.9964948, 87.6855882)}","fdb30899":"map_states = state_report.drop(index=[5,8,9,36],errors = 'ignore')\nmap_states.reset_index(inplace = True,drop = True)\n\nindia_map = folium.Map(location=[21, 78], zoom_start=5, tiles = 'cartodbpositron',min_zoom = 5, max_zoom = 7,control_scale=True)\n\n\nfor i in range(0,len(map_states)):\n    state = map_states['State\/UnionTerritory'][i]\n    cases = map_states['Confirmed'][i]  \n    deaths = map_states['Deaths'][i]\n    cured = map_states['Cured'][i]\n    \n    location = Location_dict[state]\n    \n    folium.Circle([location[0],location[1]],radius = float(cases * 0.8),color = '#10B4AB',fill_color = 'cyan',\n                  fill = True, \n                  tooltip = \"<h5 style = 'text-align:center;font-weight:bold'>\"+state+\"<\/h5>\"\\\n                  + \"<div style = 'text-align:center;'>\" + \"<b>\"+'Confirmed : '+\"<\/b>\"+ str(cases)+\"<\/div>\"\\\n                  + \"<div style = 'text-align:center;'>\" + \"<b>\"+'Recovered : '+\"<\/b>\"+ str(cured)+\"<\/div>\"\\\n                  + \"<div style = 'text-align:center;'>\" + \"<b>\"+'Deaths : '+\"<\/b>\"+ str(deaths)+\"<\/div>\").add_to(india_map)\n    \nindia_map.save('indiamap.html')\nindia_map","8534e388":"state_report['per cent Confirmed'] = (state_report['Confirmed']*100\/state_report.sum()['Confirmed'])\npie = state_report.drop(index = state_report.index[state_report['State\/UnionTerritory'] == 'Cases being reassigned to states'])\n\nplt.figure(figsize = (20,20))\n\nfig1 = px.pie(data_frame=pie,values = 'Confirmed',\n        hover_name='State\/UnionTerritory',\n        labels = {'State\/UnionTerritory':'State ','Confirmed':'Confirmed Cases '},\n        hole = 0.65, color = 'Confirmed',\n        template = 'ggplot2',\n        color_discrete_sequence=  px.colors.sequential.Mint_r,\n        title = \"State-wise Distribution of Confirmed Covid Cases (as of \"+ str(state_report['Date'].max())+\")\")\n        \n\nfig1.update_traces(textposition='inside', textinfo='percent')\n\n#X------------------------------------------------------------------------------------------------------------------------------------------------X\n\ntemp = state_report.sort_values(by = 'Confirmed',ascending= False)[0:20]\ntemp.reset_index(inplace = True,drop = True)\n\ntemp.sort_values(by = 'Confirmed',ascending = False)\n\nplt.figure(figsize= (20,15))\nfig2 = px.bar(data_frame=temp, x = temp['State\/UnionTerritory'], y=temp['Confirmed'],\n            color_continuous_scale= px.colors.sequential.Mint, color = 'Confirmed',\n            text='Confirmed',template = 'plotly_white',\n            labels = {'State\/UnionTerritory':'State','Confirmed':'Confirmed Cases '},\n            hover_name = 'State\/UnionTerritory',\n            hover_data = {'Confirmed':True,'State\/UnionTerritory':False}, )\n\nfig2.update_layout(title = {\n    'text' : 'Top 20 States by Confirmed Cases',\n    'y':0.95,\n    'x':0.5,\n    'xanchor': 'center',\n    'yanchor': 'top'},\n    xaxis_title = '')\n\nfig2.update_traces(texttemplate = '%{text:.2s}',textposition = 'outside',textfont_size =13)\n\nfig1.show()\nfig2.show()","18b22bee":"temp = state_report.sort_values(by = 'Confirmed',ascending= False)[0:20]\ntemp.reset_index(inplace = True,drop = True)\n\ntemp['Percentage'] =round((temp['Cured']\/temp['Confirmed'])*100,2)\nplt.figure(figsize = (12,8),dpi = 150)\n\nfig1 = px.bar(data_frame=temp, x = temp['State\/UnionTerritory'], y=temp['Confirmed'],\n            color_continuous_scale= px.colors.sequential.Blues, color = temp['Percentage'],\n            text= temp['Percentage'],template = 'ggplot2',\n            labels = {'State\/UnionTerritory':'State','Confirmed':'Confirmed Cases ','Percentage':'Percentage Cured '},\n            hover_data = {'Confirmed':True,'Percentage':True,'State\/UnionTerritory':False}, \n            hover_name = 'State\/UnionTerritory')\n\nfig1.update_traces(textposition = 'outside',texttemplate = '%{text:.3s}',textfont_size =13)\nfig1.update_layout(title = {\n    'text':' Percentage of Cured to Confirmed Cases',\n    'x':0.5,\n})\nfig1.show()","8677bcd1":"state_deaths = state_report.sort_values(by=\"Deaths\",ascending = False)[0:20]\n\nplt.figure(figsize = (12,8),dpi = 150)\n\nfig1 = px.bar(x = state_deaths['State\/UnionTerritory'],y = state_deaths['Deaths'],orientation='v',\n       labels = {'x':'Deaths','y':'State or Union Territory','State\/UnionTerritory':'State','Deaths per 100 Cases':'Deaths per 100 Cases '},\n       color = state_deaths['Deaths per 100 Cases'], color_continuous_scale = px.colors.sequential.Reds,\n       hover_name = 'State\/UnionTerritory', hover_data = {'Deaths':True,'Deaths per 100 Cases':True,'State\/UnionTerritory':False}, \n       data_frame = state_deaths,template = 'ggplot2', text = state_deaths['Deaths per 100 Cases'],\n       title = \"India's Deadliest States with Deaths per 100 Cases\")\n\nfig1.update_layout(title = {'x':0.5})\nfig1.update_traces(textposition = 'outside')\nfig1.show()","e31225ca":"#Converting dtype of columns in df_hosp to integer\n\ndef changetoint(column):\n    for i,v in enumerate(column):\n        n = ''\n        n = n.join([x for x in v if x.isdigit()])\n        \n        return int(n)\n\ndf_hosp['NumPrimaryHealthCenters_HMIS'] = df_hosp['NumPrimaryHealthCenters_HMIS'].apply(changetoint)\n\ndf_hosp.drop(index = df_hosp.index[df_hosp['State\/UT'] == 'All India'],inplace = True)","768b522e":"#Taking a look at lab data.\nsunburst_data = df_labs[['type','state']]\npx.sunburst(sunburst_data,path = ['type','state'],color = 'type',\n            \n           color_discrete_sequence = px.colors.qualitative.Pastel2,height = 750,width = 750,template = 'ggplot2',title='Available Research Facilities in State based on Lab Type')","0ee1f85a":"# looking at the state medical facilities\n\ntop_community_hosp = df_hosp.nlargest(10,'NumCommunityHealthCenters_HMIS')\ntop_primary_hosp = df_hosp.nlargest(10,'NumPrimaryHealthCenters_HMIS')\ntop_rural_hosp = df_hosp.nlargest(10,'NumRuralHospitals_NHP18')\ntotal_hosp =  df_hosp.nlargest(10,'TotalPublicHealthFacilities_HMIS')\n\nplt.figure(figsize = (20,10),dpi = 200)\nplt.style.use(u'ggplot')\n\nplt.subplot(2,2,1)\n\nsns.barplot(y = top_community_hosp['State\/UT'], x = top_community_hosp['NumCommunityHealthCenters_HMIS'],data= df_hosp,\n            orient = 'h' , color = '#58A25D')\nplt.xlabel('')\nplt.ylabel(\"\")\nplt.title('Number of Community Health Centres',fontsize = 17)\nplt.tick_params(labelsize = 13)\n\n\nplt.subplot(2,2,2)\n\nsns.barplot(y = top_rural_hosp['State\/UT'], x = top_rural_hosp['NumRuralHospitals_NHP18'],data= df_hosp,\n            orient = 'h' , color = '#8ABC7C')\nplt.xlabel('')\nplt.ylabel(\"\")\nplt.title('Number of Rural Health Facilities',fontsize = 17)\nplt.tick_params(labelsize = 13)\n\n\nplt.subplot(2,2,3)\n\nsns.barplot(y = top_primary_hosp['State\/UT'], x = top_primary_hosp['NumPrimaryHealthCenters_HMIS'],data= df_hosp,\n            orient = 'h' , color = '#00AAAA')\nplt.xlabel('')\nplt.ylabel(\"\")\nplt.title('Number of Primary Health Centres',fontsize = 17)\nplt.tick_params(labelsize = 13)\n\n\nplt.subplot(2,2,4)\n\nsns.barplot(y = total_hosp['State\/UT'], x = total_hosp['TotalPublicHealthFacilities_HMIS'],data= df_hosp,\n            orient = 'h' , color = '#008B8B')\n\nplt.xlabel('')\nplt.ylabel(\"\")\nplt.title('Total Public Health Facilities',fontsize = 17)\nplt.tick_params(labelsize = 13)\n\nplt.suptitle('State-wise Distribution of Health Facilites',fontsize = 25,x = 0.65)\nplt.tight_layout(rect=[0, 0.05, 1.2, 0.95])\n","71b9847b":"\nlatest_tests = df_tests.groupby('State').max().sort_values('TotalSamples',ascending = False)[0:20]\nlatest_tests['Ratio'] = round((latest_tests['Positive']\/latest_tests['TotalSamples'])*1000,2)\n\nfig = px.bar(data_frame = latest_tests,\n             y  = latest_tests['TotalSamples'],x =  latest_tests['TotalSamples'].index,template = 'ggplot2',text = latest_tests['Ratio'],\n             color = latest_tests['Ratio'],color_continuous_scale= px.colors.sequential.Redor,\n             labels = {'TotalSamples':'Number of COVID Tests Done',\"Ratio\":'Positive Cases for every 1000 tests'},\n             hover_name = latest_tests['TotalSamples'].index\n             )\n\nfig.update_layout(title = {\n    'text': 'COVID Tests Done vs Positive Cases for Every 1000 tests'\n})\nfig.update_traces(textposition = 'outside',textfont_size = 13)","c801c767":"\n\ndf_india['Date'] = pd.to_datetime(df_india['Date'])\nrecent_dates = df_india[df_india[\"Date\"] > pd.to_datetime('03\/10\/20')]\n\ncurrent_date = str(recent_dates['Date'].max())\nrecent_dates['Date'] = recent_dates['Date'].dt.strftime('%Y-%m-%d')\n\nfig = px.bar(recent_dates,x ='State\/UnionTerritory',y = 'Confirmed',animation_frame = 'Date',\n             template = 'ggplot2',title = 'Confirmed Cases',\n             color = 'Confirmed',labels = {'State\/UnionTerritory':''})\n\nfig.update_layout(xaxis={'categoryorder':'total descending'})","5f0246d1":"df_india['Date'] = pd.to_datetime(df_india['Date'])\n\nlatest = df_india[df_india[\"Date\"] > pd.to_datetime('2020-04-01')]\n\nlatest2 = latest.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured',\"Date\"].max().reset_index()\n\nlatest2['Active'] = latest2['Confirmed'] - (latest2['Deaths'] - latest2['Cured'])\n\nstate_list = list(latest2.sort_values('Active',ascending = False)['State\/UnionTerritory'])[0:15]\n\nstates_confirmed = {}\nstates_deaths = {}\nstates_recovered = {}\nstates_active = {}\nstates_dates = {}\n\n","e21a7a00":"fig = plt.figure(figsize=(25,20),dpi = 250)\n\nimport matplotlib.dates as mdates\n\ndef movingaverage(values,N):\n    cumulativesum = [0]\n    movingav = []\n    \n    for i,x in enumerate(values,1):\n        cumulativesum.append(cumulativesum[i-1] + x)\n        \n        if i >= N:\n            movingav.append((cumulativesum[i] - cumulativesum[i-N]) \/ N)\n        else:\n            movingav.append(0)\n    return movingav\n\n\ndef movingaverage2(values,N):\n    cumulativesum = [0]\n    movingav = []\n    \n    for i,x in enumerate(values,0):\n        \n        if i >= N:\n            movingav.append((values[i] - values[i-N]) \/ N)\n        else:\n            movingav.append(0)\n    return movingav\n\n\ndef percentchange(values):\n    \n    pctchange = []\n    \n    for i in range(0,len(values)):\n        pastsum = 0\n        \n        for j in range(i):\n            pastsum = pastsum + values[j]\n        \n        pctchange.append(int((values[i]\/pastsum)*100))\n        \n    return pctchange\n\naxno = 1\nsns.set_style('darkgrid')\n\nfor state in state_list:\n    df1 = latest[latest['State\/UnionTerritory'] == state].reset_index(drop = True)\n\n    new_cases = [0]\n\n    state_dates = latest[latest['State\/UnionTerritory'] == state]['Date']\n    \n    for i in range (1,len(df1)):\n        cases_delta = (df1['Confirmed'][i] - df1['Confirmed'][i-1])\n        new_cases.append(cases_delta)\n\n    df1['New Cases'] = new_cases\n    \n    \n    ax = fig.add_subplot(5,3,axno)\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))\n    \n    ax.bar(state_dates.values,df1['New Cases'], label = 'Day wise confirmed cases',color = 'darkcyan')\n    plt.title(state,fontsize = 20)\n    \n    moving_aves = movingaverage(df1['New Cases'],10)\n    \n    moving_aves2 = movingaverage2(df1['Confirmed'],10)\n    \n    ax.plot(state_dates.values,moving_aves2,color='red',lw = 2.5,label = 'Moving Average')\n    plt.xlim(date(2020,4, 1),df1['Date'].max())\n    \n    handles, labels = ax.get_legend_handles_labels()\n    fig.legend(handles, labels, loc='upper left',)\n    axno = axno + 1\n\nplt.suptitle('Confirmed Cases with a 10 day moving average',fontsize = 30,y=1.0)\nplt.tight_layout(pad = 4.0)\nplt.savefig(\"State\")","bc273eb7":"df1 = latest[latest['State\/UnionTerritory'] == 'Kerala'].reset_index(drop = True)\nfig = plt.figure(figsize=(10,3),dpi = 100)\n\nnew_cases = [0]\n\nstate_dates = latest[latest['State\/UnionTerritory'] == 'Kerala']['Date']\n    \nfor i in range (1,len(df1)):\n    cases_delta = (df1['Confirmed'][i] - df1['Confirmed'][i-1])\n    new_cases.append(cases_delta)\n\ndf1['New Cases'] = new_cases\n\nax = fig.add_subplot(111)\nax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))\n    \nax.bar(state_dates.values,df1['New Cases'], label = 'Day wise confirmed cases',color = 'darkcyan')\n\nplt.title('Kerala',fontsize = 20)\n\nmoving_aves = movingaverage(df1['New Cases'],10)\n\nax.plot(state_dates.values,moving_aves,color='red',lw = 2.5,label = 'Moving Average')\n\nax.text(date(2020,5, 14), 28, \"*\",fontsize = 20)\nax.text(date(2020,5,17), 31, \"*\",fontsize = 20)\nax.text(date(2020,6, 5), 120, \"*\",fontsize = 20)\n\n\n\nhandles, labels = ax.get_legend_handles_labels()\n\nfig.legend(handles, labels, loc='upper left',)","d4426511":"#prediction using ARIMA \nfrom datetime import datetime,timedelta\nwarnings.filterwarnings('ignore')\n\nfig = plt.figure(figsize=(25,20),dpi = 250)\nsubplotno = 1\n\nfor state in state_list:\n    \n     \n    state_df = latest[latest['State\/UnionTerritory'] == state]\n    y = state_df['Confirmed']\n    \n    arima = ARIMA(y, order=(5, 1, 0))\n    arima = arima.fit(trend='c', full_output=True, disp=True)\n    forecast = arima.forecast(steps= 33)\n    pred = list(forecast[0])\n\n    start_date = state_df['Date'].max()\n\n    prediction_dates = [pd.to_datetime(start_date)]\n\n    for i in range(32):\n        \n        tempdate = start_date + timedelta(days=1)\n        prediction_dates.append(tempdate)\n        start_date = tempdate\n    \n    ax = fig.add_subplot(5,3,subplotno)\n    \n    plt.title(state + ' : ' + str(int(round(pred[-1],0))) + ' Cases' , fontsize = 16)\n\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))\n    plt.xticks(fontsize = 8)\n    \n    sns.lineplot(y= pred,x= prediction_dates,linestyle ='dashed',label = 'Predicted',color = 'red')\n    sns.lineplot(y=state_df['Confirmed'] , x = state_df['Date'] ,color = 'darkcyan',label = 'Actual')\n    plt.legend()\n    \n\n    plt.ylabel('')\n    plt.xlabel('')\n\n    subplotno +=1\n\nplt.suptitle('State-wise Predicted Number of Cases by '+str(prediction_dates[-1].date()) ,fontsize = 23)\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\nplt.savefig('Statepred - ARIMA')","c2620ddd":"At first glance, the main virus hotspots seem to be the most populous states of the country. But it does not follow that general trend, with Delhi having the 3rd highest confirmed cases but a comparatively lower population. Let's do some analysis. ","a4b0ced6":"\nI hope this notebook was informative. \nIf you liked this notebook, do upvote. Any comments are welcome. ","f1c5a044":" # A Harsh Truth","d4a731d8":"It's alarming to see that those 3 states contribute almost **60%** of the entire country's cases. \n\nGujarat,Uttar Pradesh and Telangana also have an average of 30,000 cases. Let's see how these patients have recovered.","c41e49ee":"Kerala was well equipped to deal with the pandemic having dealt with the NIPAH outbreak in 2019. The state government declared a state of medical emergency,very early, on 30 January 2020. \n\nEarly Preparation was key. Because of the available infrastructure and readiness of the medical facilities to deal with a crisis of this scale, it has managed to keep its daily infections at a fraction of its neighboring states'.\n\nComparing with neighboring states,however, Kerala has done only 275823 tests (7\/8\/2020) which is quite low.\n\n **Timeline of Government actions in the last 4 months:**\n\n1* Revised testing begins for medical staff,expatriat travellers and Migrant workers. (Sentinel Surveillance act - 14\/5\/2020)\n\n2* Start of the Break The Chain hygiene awareness movement.(17\/05\/2020)\n\n3* 100,000 tests done.(05\/06\/2020)","ceaba723":"# Time-Series Breakdown","eaf78bb8":"# State Report Overlook","11764b62":"Tamil Nadu doesn't rank that high when comparing Total Public Health Facilities. Its low mortality rate can be attributed to faster detection of the virus in patients. Despite having a lot of Public and Rural health facilities, Karnataka is still contending to cure patients.","c0c382ea":"# Libraries Used:","7a54916f":"# Map Visualization","a11f451e":"Delhi has done extremely well with curing 90% of its cases. Maharashtra and Tamil Nadu have also done well considering their enormous volume of cases.","7b37f031":"# Data Analysis","1ae3c7a9":"We can deduce that the worst-struck states of India are the ones with densely packed urban areas, like Mumbai in Maharashtra, Chennai in Tamil Nadu and New Delhi. Let's see how the total national confirmed cases are distributed.","720cb78a":"![image.png](attachment:image.png)\nsource: MINT India","73286f1f":"It's frightening to see what may come to be. But with many states reinstating lockdown and stricter policing of curfew ,it is quite possible to flatten the curve in the next few months.  \n\nRemember to stay in and stay safe. Our fight with COVID starts and ends with the people. Please do your part, wear a mask and help those around you however you can.","29af2afa":"![image.png](attachment:image.png)","5701c2a3":"India is putting up a brave fight against the COVID, starting with its early lockdown in March and strict curfews. However, it still has not been able to flatten its daily cases like Singapore, New Zealand and Russia did despite starting their lockdown days after India did.\n\nThe objective of this notebook is to provide a state-wise breakdown of the virus\u2019 spread to glean a few insights on how to better combat the crisis. ","02eeac83":"Maharashtra,Delhi,Telangana need to increase their testing as >10% of their tests are positive. Our prime weapon against COVID is detection, contact tracing and breaking the chain. \n\nAndhra Pradesh has done well to have a high test rate despite a limited count of health care institutions in state.","478b8d03":"# Predicting State-wise Confirmed Cases Using ARIMA","9cfce280":"This graphs out the daily cases from April 1 to today's date. It's noticeable that many states have a very steep growth of cases.\n\nSome insights can be gained by analysing the state that responded the best to the crisis - Kerala. It would be beneficial to see the cases trend and what Kerala's government has done to curb the spread of the virus in its state.\n","8dfe7366":"1. Numpy for linear algebra.\n2. Pandas for data processing .\n3. Matplotlib and Seaborn for data visualization.\n4. Plotly for interactive graphs.\n5. Folium for interactive leaflet map.\n6. ARIMA for time-series data prediction.\n7. Geopy for location coordinates to be used by folium","7479d072":"Gujarat comes in as the deadliest state with 5 people dead for every 100 infected, followed by Maharashtra, Madhya Pradesh and West Bengal. Tamil Nadu has quite a low ratio considering its large number of infected. Could it be because it has better medical facilities?"}}