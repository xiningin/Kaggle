{"cell_type":{"e041e1f4":"code","ea00c3c2":"code","f32a71a5":"code","90793e56":"code","45aaa7cd":"code","12b32fac":"code","dd8542b9":"code","ce138981":"code","e55fc554":"code","2ac1fc7a":"code","011d71af":"code","db0a3e07":"code","68ef56cd":"code","17c3f024":"code","de744c11":"code","45d58fb6":"code","61af9fb2":"code","2333ec1d":"code","5b842a98":"code","da23cb40":"code","12e0eae6":"code","f36ad0bb":"code","33709c60":"code","14f5f466":"code","feeacbaf":"code","d26cdf19":"code","277711ca":"code","2e2f16e4":"code","f8fa607f":"code","24ef60e6":"code","31c8ed1c":"code","515c1bc8":"code","709b6733":"code","3537ffc8":"code","ef4c5ebd":"code","b21e59ea":"code","c52e4371":"code","a10683fa":"code","6d79d548":"code","e51ad2d3":"code","92157c22":"code","d0c87db1":"code","7bb4d935":"code","f756ee0f":"code","b49cf911":"code","1377c2ce":"code","20ea601a":"code","1cb50884":"code","beed1af2":"code","8a8b71cc":"code","b843a02a":"markdown","488f9c56":"markdown","fa9ecb04":"markdown","bd0e4c50":"markdown","f06481fd":"markdown","7a2b4ec1":"markdown","ae9b6107":"markdown","1523c2ae":"markdown","fe539373":"markdown","c1191696":"markdown"},"source":{"e041e1f4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ea00c3c2":"df = pd.read_csv('..\/input\/titanic\/train.csv')\ndf.head()","f32a71a5":"# View Summary Table\ndf.describe()","90793e56":"df.dtypes","45aaa7cd":"# Check Missing values\ndf.isnull().sum()","12b32fac":"fig = plt.gcf()\nfig.set_size_inches(13, 9)\nsns.countplot(x=\"Survived\", hue=\"Sex\", data=df, palette=\"rocket\")","dd8542b9":"fig = plt.gcf()\nfig.set_size_inches(13, 9)\nsns.countplot(x=\"Survived\", hue=\"Pclass\", data=df, palette=\"rocket\")","ce138981":"fig = plt.gcf()\nfig.set_size_inches(30, 13)\nsns.countplot(x=\"Age\", hue=\"Survived\", data=df, palette=\"deep\")","e55fc554":"fig = plt.gcf()\nfig.set_size_inches(9, 13)\nsns.countplot(x=\"Embarked\", hue=\"Survived\", data=df, palette=\"deep\")","2ac1fc7a":"df.head() # Just to remind us with the data","011d71af":"# Fill the 2 Missing values in Embarked column with 'S' since it's the most common value\nvalues = {'Embarked': 'S', 'Cabin': 'U0'}\ndf.fillna(value=values, inplace=True)\ndf['Deck'] = df['Cabin'].str.extract(pat = '([A-Z])') # Extract Passenger Deck from the Cabin column into a new feature\ndf.head()","db0a3e07":"# Now Let's convert the categorical values in Deck column into numeric\nfrom sklearn.preprocessing import OrdinalEncoder\nenc = OrdinalEncoder()\nenc.fit(df[['Deck']])\ndf[['Deck']] = enc.fit_transform(df[['Deck']])\ndf.head()","68ef56cd":"# Again Let's convert the categorical values in Embarked column into numeric\nenc = OrdinalEncoder()\nenc.fit(df[['Embarked']])\ndf[['Embarked']] = enc.fit_transform(df[['Embarked']])\ndf.head()","17c3f024":"# Apply Ordinal Encoding to Sex column\nencoding = {'Sex':{'male': 1, 'female':0}}\ndf.replace(encoding, inplace=True)","de744c11":"values = {'Age': df['Age'].mean()}\ndf.fillna(value=values, inplace=True)","45d58fb6":"df['Fare'] = df['Fare'].astype(int)","61af9fb2":"# Extract Title from Name Column\ndf['Title'] = df['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ndf['Title'] = df['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ndf['Title'] = df['Title'].replace('Mme', 'Mrs')\ndf['Title'] = df['Title'].replace('Mlle', 'Miss')\ndf['Title'] = df['Title'].replace('Ms', 'Miss')","2333ec1d":"enc = OrdinalEncoder()\nenc.fit(df[['Title']])\ndf[['Title']] = enc.fit_transform(df[['Title']])\ndf.head()","5b842a98":"bins = [0, 10, 18, 30, 40, 50, 60, 70, 120]\nlabels = ['0-10', '10-18', '18-29', '30-39', '40-49', '50-59', '60-69', '70+']\ndf['Agebin'] = pd.cut(df.Age, bins, labels = labels,include_lowest = True)\ndf.head()","da23cb40":"encoding = {\"Agebin\": {'0-10': 0, '10-18': 1, '18-29': 2, '30-39': 3, '40-49': 4, '50-59': 5, '60-69': 6, '70+': 7}}\n\n# Apply Ordinal Encoding on preferred_foot column\ndf.replace(encoding, inplace=True)","12e0eae6":"# Creating new feature for ranking Age and Passenger Class\ndf['Age_Class'] = df['Age'] * df['Pclass']\ndf['Fair_Deck'] = df['Fare'] * df['Deck']\ndf['Pclass_Deck'] = df['Pclass'] * df['Deck']","f36ad0bb":"columns = ['Survived', 'Pclass', 'Sex','SibSp', 'Parch', 'Fare', 'Embarked', 'Deck']\nx_test = df[df['Age'].isnull()]\nx_test = x_test[columns]\n\nx_train = df[df['Age'].notnull()]\nx = x_train\ny_train = x_train['Age'].values\nx_train = x_train[columns]","33709c60":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)\npred = model.predict(x_test)\npred[pred < 0] = 1 # Replace negative number with 1\npred","14f5f466":"x_test['Age'] = pred.astype(int)\ntitanic_df = pd.concat([x, x_test])\ntitanic_df","feeacbaf":"titanic_df.isnull().sum()","d26cdf19":"df.head()","277711ca":"y_train = df['Survived'].values\nX_train = df.drop(['Survived', 'Name', 'Ticket', 'PassengerId', 'Cabin'], axis=1)","2e2f16e4":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nmodel_GB = GradientBoostingClassifier()\n\nparameters = {\n        'learning_rate': [0.001, 0.002, 0.01, 0.02, 0.1, 0.2],\n        'n_estimators':[100],\n        'min_samples_split': [5,10, 20],\n        'min_samples_leaf': [5, 10, 20],\n        'max_depth': [5, 10, 15, 20]\n}\n\n# Using GridSearch for tuning the HyperParameters\ngrid_GB = GridSearchCV(model_GB, parameters, cv=20)\ngrid_GB.fit(X_train, y_train)\nprint('Best Score: ', grid_GB.best_score_, '\\nBest Parameters: ', grid_GB.best_params_)","f8fa607f":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import SGDClassifier\n\nRF = RandomForestClassifier(n_estimators=200)\nRF.fit(X_train, y_train)","24ef60e6":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nDT = DecisionTreeClassifier()\nparameters = {\n        'max_depth': [5, 10, 15, 20],\n        'min_samples_split': [5,10, 15, 20],\n        'min_samples_leaf': [5, 10, 15, 20]\n}\n\ngrid_DT = GridSearchCV(DT, parameters, cv=20)\ngrid_DT.fit(X_train, y_train)\nprint('Best Score: ', grid_DT.best_score_, '\\nBest Parameters: ', grid_DT.best_params_)","31c8ed1c":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nknn = KNeighborsClassifier()\nparameters = {\n        'n_neighbors': [3, 4, 5, 6, 7, 8, 9, 10]\n}\n\ngrid_knn = GridSearchCV(knn, parameters, cv=20)\ngrid_knn.fit(X_train, y_train)\nprint('Best Score: ', grid_knn.best_score_, '\\nBest Parameters: ', grid_knn.best_params_)","515c1bc8":"test_df = pd.read_csv('..\/input\/titanic\/test.csv')\ntest_df","709b6733":"values = {'Embarked': 'S', 'Cabin': 'U0'}\ntest_df.fillna(value=values, inplace=True)\ntest_df['Deck'] = test_df['Cabin'].str.extract(pat = '([A-Z])') # Extract Passenger Deck from the Cabin column into a new feature\ntest_df.head()","3537ffc8":"enc = OrdinalEncoder()\nenc.fit(test_df[['Deck']])\ntest_df[['Deck']] = enc.fit_transform(test_df[['Deck']])\ntest_df.head()","ef4c5ebd":"enc = OrdinalEncoder()\nenc.fit(test_df[['Embarked']])\ntest_df[['Embarked']] = enc.fit_transform(test_df[['Embarked']])\ntest_df.head()","b21e59ea":"encoding = {'Sex':{'male': 1, 'female':0}}\ntest_df.replace(encoding, inplace=True)\nvalues = {'Age': test_df['Age'].mean()}\ntest_df.fillna(value=values, inplace=True)\ntest_df['Fare'] = test_df['Fare'].fillna(0)\ntest_df['Fare'] = test_df['Fare'].astype(int)","c52e4371":"test_df['Title'] = test_df['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntest_df['Title'] = test_df['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ntest_df['Title'] = test_df['Title'].replace('Mme', 'Mrs')\ntest_df['Title'] = test_df['Title'].replace('Mlle', 'Miss')\ntest_df['Title'] = test_df['Title'].replace('Ms', 'Miss')\n\nenc = OrdinalEncoder()\nenc.fit(test_df[['Title']])\ntest_df[['Title']] = enc.fit_transform(test_df[['Title']])\ntest_df.head()","a10683fa":"bins = [0, 10, 18, 30, 40, 50, 60, 70, 120]\nlabels = ['0-10', '10-18', '18-29', '30-39', '40-49', '50-59', '60-69', '70+']\ntest_df['Agebin'] = pd.cut(test_df.Age, bins, labels = labels,include_lowest = True)\n\nencoding = {\"Agebin\": {'0-10': 0, '10-18': 1, '18-29': 2, '30-39': 3, '40-49': 4, '50-59': 5, '60-69': 6, '70+': 7}}\n\n# Apply Ordinal Encoding on preferred_foot column\ntest_df.replace(encoding, inplace=True)","6d79d548":"# Creating new feature for ranking Age and Passenger Class\ntest_df['Age_Class'] = test_df['Age'] * test_df['Pclass']\ntest_df['Fair_Deck'] = test_df['Fare'] * test_df['Deck']\ntest_df['Pclass_Deck'] = test_df['Pclass'] * test_df['Deck']","e51ad2d3":"dff = test_df.copy()\nX_test = test_df.drop(['Name', 'Ticket', 'PassengerId', 'Cabin'], axis=1)","92157c22":"OHE = pd.get_dummies(test_df.Embarked)\ntest_df = pd.concat([test_df,OHE], axis=1)\ndel test_df['Embarked']\n\n# Apply Ordinal Encoding to Sex column\nencoding = {'Sex':{'male': 1, 'female':0}}\ntest_df.replace(encoding, inplace=True)\n\ndff = test_df.copy()\ntest_df","d0c87db1":"columns = ['Pclass', 'Sex','SibSp', 'Parch', 'Fare', 'Cabin', 'S', 'C', 'Q']\nx_test = test_df[test_df['Age'].isnull()]\nx_test = x_test[columns]\n\nx_train = test_df[test_df['Age'].notnull()]\nx = x_train\ny_train = x_train['Age'].values\nx_train = x_train[columns]\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)\npred = model.predict(x_test)\npred[pred < 0] = 1 # Replace negative number with 1\npred","7bb4d935":"x_test['Age'] = pred.astype(int)\nfinal_df = pd.concat([x, x_test])\nfinal_df","f756ee0f":"# Using Gradient Boosting Classifier\npred = grid_GB.predict(X_test)\npred","b49cf911":"# Using Random Forest Classifier\npred = RF.predict(X_test)\npred","1377c2ce":"# Using Decision Tree Classifier\npred = grid_DT.predict(X_test)\npred","20ea601a":"# Using Random Forest Classifier\npred = grid_knn.predict(X_test)\npred","1cb50884":"dff['Survived'] = pred.astype(int)\ndff.head()","beed1af2":"final_df = dff[['PassengerId', 'Survived']]\nfinal_df.head()","8a8b71cc":"final_df.to_csv('sixth_submission.csv',index=False)","b843a02a":"# 4. Creating Model","488f9c56":"# 5. Work on the Test Data","fa9ecb04":"### Passenger Class Analysis","bd0e4c50":"### Port of Embarkation Analysis","f06481fd":"# 1. Import & Exploring Data","7a2b4ec1":"### Age Analysis","ae9b6107":"# 3. Data Preparation and Cleaning","1523c2ae":"# 2. Data Analysis","fe539373":"#### We can see now that Age has no missing values","c1191696":"### Sex Analysis"}}