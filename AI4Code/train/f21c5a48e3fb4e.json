{"cell_type":{"880059cf":"code","d78221d3":"code","2ff314c3":"code","fb098b73":"code","f233aa7a":"code","6b8930ad":"code","91e886f9":"code","94ef918d":"code","1ea72847":"code","1dcd51de":"code","acdfc73a":"code","781e118d":"code","4a089892":"code","7e08715d":"code","fc8f8af2":"code","bbede2c9":"code","66b63c60":"code","aa339cc6":"code","be25b934":"code","657307b4":"code","d383503f":"code","29902ef9":"markdown"},"source":{"880059cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d78221d3":"data = pd.read_csv(\"..\/input\/metal_bands_2017.csv\",encoding = \"ISO-8859-1\")","2ff314c3":"data.head(10) #1-10 columns\n#we can see whats mostly data about, also number of columns","fb098b73":"data.shape #(number of rows,number of rows' values)","f233aa7a":"data.info() #we have 8 null value in origin","6b8930ad":"print(data.origin.value_counts()) #frequency of origin\n#for example 1139 bands have origin in USA","91e886f9":"data.describe() #also split and formed columns contain number but they are object","94ef918d":"avrg_fan = sum(data.fans)\/len(data.fans)\ndata[\"new_title\"]=[True if i > avrg_fan else False for i in data.fans]\ndata.new_title           #i made this for making boxplot of fan number","1ea72847":"data.boxplot(column=\"fans\", by=\"new_title\")\n#so here it is, 5000 metal bands have fans more than average to the dataset","1dcd51de":"#tidying data with melt()\n#melt provides us seeing dataset more \"tidy\" or easy\ndata10 = data.head(10) #taking top 10 of data\ndata10","acdfc73a":"melteddata = pd.melt(frame=data10,id_vars=\"band_name\",value_vars=[\"fans\"])\nmelteddata","781e118d":"melteddata.pivot(index = 'band_name', columns = 'variable',values='value')\n#reverse of melt()","4a089892":"#concatenating data\ndata1 = data.tail(3) #last 3\ndata2 = data.head(3) #top 3","7e08715d":"concted_data = pd.concat([data1,data2],axis=0,ignore_index=True)\nconcted_data                           #vertical |","fc8f8af2":"data3 = data['fans'].head()    \ndata4 = data['band_name'].head()\nconcted_data2 = pd.concat([data3,data4],axis =1) #horizontal -\nconcted_data2","bbede2c9":"#data types and converting them \nprint(data.origin.dtype, \"\\n\", data.fans.dtype) ","66b63c60":"data[\"origin\"] = data[\"origin\"].astype(\"category\")    #origin converted to category from object\ndata[\"fans\"] = data[\"fans\"].astype(\"float64\")         #fans converted to float from integer\nprint(data.origin.dtype, \"\\n\", data.fans.dtype)     ","aa339cc6":"## missing data\ndata.info()\n#there are 8 null values","be25b934":"data[\"origin\"].dropna(inplace = True) #droped the NaNs , now i'll check with assert if it worked ","657307b4":"assert data[\"origin\"].notnull().all() #turns nothing, so it is true","d383503f":"#another way\ndata[\"fans\"].fillna('empty',inplace = True)\nassert data[\"fans\"].notnull().all()          #there are no null in fans already","29902ef9":"**That's it! Thank you for checking out!**"}}