{"cell_type":{"1794f68d":"code","9dea4b91":"code","ccfd96a3":"code","3f57ec0a":"code","34efcb47":"code","2365f6bf":"code","d31086a7":"code","daca5715":"code","fe10ddc3":"code","c3527e04":"code","94c5bb4d":"code","348ba4c8":"code","3f6a1a4d":"code","79ff3f4e":"code","96ca0fba":"code","8ef6c4c4":"code","9bd13bfa":"code","ceb9ec1f":"code","6e7693a8":"code","ffb9f094":"code","b9ffa4f7":"code","4eb8d154":"code","6fa91615":"code","12995a5b":"code","6873768c":"code","332fea44":"code","2812e29f":"code","918e568a":"code","b707f461":"code","2b0d17ab":"code","d22f0fee":"code","d5b62de4":"code","2d9b761b":"code","71f42c53":"code","8392863d":"code","304c2f8b":"code","e31803f9":"code","ec95d26b":"code","85b24171":"code","45e64d3c":"code","39a8ea47":"code","2b2d4ded":"code","1aa80143":"code","e912ed62":"code","524ff7f8":"code","44cafeb4":"code","905672ff":"code","137c6ca7":"code","493517b7":"code","dc168ef9":"code","13bfb04a":"code","3bc2c8e5":"code","be715757":"code","00c51987":"code","1a802a91":"code","086add8f":"code","8d4ee187":"code","ae20943b":"code","4a6c56d7":"code","118361fd":"code","51d164eb":"code","d11079d2":"code","e9371881":"code","deb398dc":"code","8faa14fd":"code","775a9930":"code","fc04228c":"code","eb8ef0e8":"code","27f21235":"code","2e6793d0":"code","7316943d":"code","03ef87dd":"code","55386778":"code","a1eb761b":"code","6538ccb4":"code","e21ec82b":"code","dc0a5de5":"code","1e6d2b33":"code","b2adf22b":"code","295eb24c":"code","f432b24f":"code","8d60a5db":"code","7177a107":"code","8fe40a40":"code","65ede087":"code","d731d605":"code","c8c821c0":"code","59a82d42":"code","1c7d3d66":"code","804ec34b":"code","51faf82a":"code","98c550bf":"code","414af340":"markdown","28c74258":"markdown","3fe4a8fe":"markdown","36fadc15":"markdown","24e75d3d":"markdown","f67eb3ab":"markdown","493bef01":"markdown","c30a1282":"markdown","bcbc11d1":"markdown","08a3fa99":"markdown","307dad80":"markdown","845a296d":"markdown","a318f612":"markdown","437bbc0b":"markdown","c8e359fe":"markdown","ebbfb00f":"markdown","f268d742":"markdown","c2e39316":"markdown","82807ca9":"markdown","f0e2b30f":"markdown","41796518":"markdown","af20f96d":"markdown","0ac19eee":"markdown","5d703dc0":"markdown","52e1f5ee":"markdown","7e2fe238":"markdown","583dec72":"markdown","b2f01099":"markdown","a78362f5":"markdown","0d3f1068":"markdown","34726360":"markdown","fabe2da9":"markdown","5fc53555":"markdown","adf2b300":"markdown","962418da":"markdown","4433a361":"markdown"},"source":{"1794f68d":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9dea4b91":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","ccfd96a3":"df_scan = pd.read_csv('\/kaggle\/input\/lending-club-20072020q1\/Loan_status_2007-2020Q3.gzip', nrows=10000, low_memory=False)\ndf_scan.head()","3f57ec0a":"df_scan.shape","34efcb47":"df_scan.info()","2365f6bf":"df_scan.loan_status.value_counts()","d31086a7":"df_scan['Charged_Off'] = df_scan.loan_status.map({'Fully Paid':0,'Charged Off':1})\ndf_scan[['loan_status', 'Charged_Off']].head(10)","daca5715":"df_scan.corr()['Charged_Off'].sort_values(ascending=False).dropna()","fe10ddc3":"selected_features=['loan_amnt','term','int_rate','installment','grade','sub_grade','emp_title','emp_length','home_ownership',\n                   'annual_inc','verification_status','issue_d','purpose','title','dti','earliest_cr_line','inq_last_6mths',\n                   'open_acc','pub_rec','revol_bal','revol_util','total_acc','initial_list_status','application_type','mort_acc',\n                   'last_pymnt_amnt',\n                    'pub_rec_bankruptcies','addr_state','fico_range_low','fico_range_high','loan_status']","c3527e04":"len(selected_features)","94c5bb4d":"df = pd.read_csv('\/kaggle\/input\/lending-club-20072020q1\/Loan_status_2007-2020Q3.gzip',usecols=selected_features, low_memory=False)\ndf.head()","348ba4c8":"df.loan_status.value_counts()","3f6a1a4d":"df.describe().T","79ff3f4e":"plt.figure(figsize=(12,6))\ndf.loan_status.value_counts().plot.bar()\nplt.title('Loan Status Value Distribution')","96ca0fba":"df = df.loc[df['loan_status'].isin(['Fully Paid', 'Charged Off'])]\ndf.shape","8ef6c4c4":"print(df.loan_status.value_counts())","9bd13bfa":"ax = sns.countplot(data = df, x = 'loan_status')\ntotal = len(df)\nfor p in ax.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax.annotate(percentage, (x, y), ha='center', va='center')\n\nplt.title('Loan Status Distribution')\nplt.show()","ceb9ec1f":"df['Charged_off'] = df.loan_status.map({'Fully Paid': 0, 'Charged Off': 1})\ndf[['loan_status', 'Charged_off']].head(10)","6e7693a8":"df.drop('loan_status', axis=1, inplace=True)","ffb9f094":"plt.figure(figsize=(10, 7))\nsns.distplot(df.loan_amnt, kde=False, bins=50)\nplt.title('Loan amount distribution')","b9ffa4f7":"plt.figure(figsize=(12,9))\ndf_corr = df.corr()\nsns.heatmap(df_corr, annot=True, cmap='viridis')\nplt.title('Feature Correlation')","4eb8d154":"sns.scatterplot(data = df, x = 'installment', y = 'loan_amnt')\nplt.title('installment \/ loan_amnt corr')","6fa91615":"df.drop(['installment',\n        'total_acc',\n        'pub_rec'],\n        axis=1,\n       inplace=True)","12995a5b":"df.shape","6873768c":"sns.boxplot(data = df, x = 'Charged_off', y = 'loan_amnt')\nplt.title('Boxplot Charged Off \/ Loan Amount')","332fea44":"df.grade.unique()","2812e29f":"plt.figure(figsize=(12,4))\nsubgrade_order = sorted(df['sub_grade'].unique())\nsns.countplot(x='sub_grade',data=df,order = subgrade_order,palette='coolwarm')\nplt.title('Subgrade Distribution');","918e568a":"plt.figure(figsize=(12,4))\nsubgrade_order = sorted(df['sub_grade'].unique())\nsns.countplot(x='sub_grade',data=df,order = subgrade_order,palette='coolwarm', hue='Charged_off' )\nplt.title('Subgrade Distribution by Charged_Off');","b707f461":"df.drop('grade', axis=1, inplace=True)","2b0d17ab":"df.isnull().sum()\/len(df)*100","d22f0fee":"df.shape","d5b62de4":"df.emp_title.value_counts()","2d9b761b":"df.emp_title.value_counts().count()","71f42c53":"df.drop('emp_title', axis=1, inplace=True)","8392863d":"sorted(df.emp_length.dropna().unique())","304c2f8b":"length_order = ['< 1 year', '1 year',\n '2 years',\n '3 years',\n '4 years',\n '5 years',\n '6 years',\n '7 years',\n '8 years',\n '9 years',\n '10+ years']","e31803f9":"plt.figure(figsize=(10,6))\nsns.countplot(data = df, x = 'emp_length', order=length_order)\nplt.title('employee length Distribution')","ec95d26b":"plt.figure(figsize=(10,6))\nsns.countplot(data = df, x = 'emp_length', hue='Charged_off', order=length_order)\nplt.title('employee length by Loan status')","85b24171":"temp1 = df[df.Charged_off == 0].groupby('emp_length').Charged_off.count()\ntemp2 = df[df.Charged_off == 1].groupby('emp_length').Charged_off.count()","45e64d3c":"(temp1\/temp2).plot(kind='bar')\nplt.title('Emp.Length Fully Paid\/Charged Off Ratio')","39a8ea47":"df.drop('emp_length', axis=1, inplace=True)","2b2d4ded":"round(df.isnull().sum()\/len(df),2)","1aa80143":"df.dropna(inplace=True)","e912ed62":"print(\"Missing values: \",df.isnull().sum().sum())","524ff7f8":"df.columns","44cafeb4":"df.title.value_counts()","905672ff":"df.purpose.value_counts()","137c6ca7":"plt.figure(figsize=(10,6))\nsns.countplot(data = df, x = 'purpose', hue='Charged_off')\nplt.xticks(rotation=90)\nplt.legend(loc=5, title='Charged Off')\nplt.title('Loan purpose distribution')","493517b7":"df.drop('title', axis=1, inplace=True)","dc168ef9":"df.shape","13bfb04a":"df.dtypes","3bc2c8e5":"df.head()","be715757":"df.term = df.term.apply(lambda term: int(term[:3]))","00c51987":"df.term.head()","1a802a91":"df.earliest_cr_line","086add8f":"df.earliest_cr_line = df.earliest_cr_line.apply(lambda date: int(date[-4:]))\ndf.issue_d = df.issue_d.apply(lambda date: int(date[-4:]))","8d4ee187":"df[['earliest_cr_line', 'issue_d']].head()","ae20943b":"df.int_rate = df.int_rate.apply(lambda rate: float(rate[:-1]))\ndf.revol_util = df.revol_util.apply(lambda rate: float(rate[:-1]))","4a6c56d7":"df[['int_rate', 'revol_util']].head()","118361fd":"plt.figure(figsize=(18,8))\nsns.countplot(data = df, x = 'addr_state', hue='Charged_off')\nplt.title('Loan by State')","51d164eb":"state_co = df[df['Charged_off']==1].groupby(\"addr_state\").count()['Charged_off']\nstate_fp = df[df['Charged_off']==0].groupby(\"addr_state\").count()['Charged_off']\nplt.figure(figsize=(16,8))\n(state_fp\/state_co).plot(kind='bar')\nplt.title('States by Fully Paid \/ Charged Off');","d11079d2":"df.drop('addr_state', axis=1, inplace=True)","e9371881":"df['fico_range'] = (df.fico_range_high+df.fico_range_low)\/2\ndf.drop(['fico_range_low','fico_range_high'], axis=1, inplace=True)","deb398dc":"df.select_dtypes('object').columns","8faa14fd":"df.home_ownership.replace(['NONE', 'ANY'], 'OTHER', inplace=True)","775a9930":"sns.countplot(data = df, x = 'home_ownership', hue = 'Charged_off')\nplt.title('Home Ownership by Loan Status')","fc04228c":"df.select_dtypes(exclude=[\"category\", \"object\"])","eb8ef0e8":"target = df.Charged_off.astype('int')\nfeatures = df.drop('Charged_off', axis=1)\nfeatures.head(10)","27f21235":"numeric_features = features.select_dtypes(exclude=['object', 'category'])\nnumeric_features.head()","2e6793d0":"numeric_features.columns","7316943d":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nscaled = sc.fit_transform(numeric_features)\nprint(scaled)","03ef87dd":"scaled_features = pd.DataFrame(scaled, columns=['loan_amnt', 'term', 'int_rate', 'annual_inc', 'issue_d', 'dti',\n       'earliest_cr_line', 'inq_last_6mths', 'open_acc', 'revol_bal',\n       'revol_util', 'last_pymnt_amnt', 'mort_acc', 'pub_rec_bankruptcies',\n       'fico_range'], index=df.index)\nscaled_features.head()","55386778":"scaled_features.isnull().sum()","a1eb761b":"scaled_features.shape","6538ccb4":"object_features = df.select_dtypes(['object', 'category'])\none_hot_features=pd.get_dummies(object_features, drop_first=True)\none_hot_features.head()","e21ec82b":"one_hot_features.shape","dc0a5de5":"one_hot_features.isnull().sum().sum()","1e6d2b33":"model_df = scaled_features.merge(one_hot_features, on=scaled_features.index)\nmodel_df.head()","b2adf22b":"df.issue_d.value_counts().plot(kind='bar', color = 'salmon')\nplt.title('Loans distribution by Year')","295eb24c":"df_sample = df.loc[df.issue_d.isin([2020,2019,2018,2017])]\ndf_sample.shape","f432b24f":"df_sample.columns","8d60a5db":"print(df_sample.Charged_off.value_counts(),'\\n')\nprint(df_sample.Charged_off.value_counts(normalize=True))","7177a107":"df_sample.head()","8fe40a40":"model_features = df_sample.drop('Charged_off', axis=1)\nmodel_target = df_sample.Charged_off","65ede087":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(model_features, model_target, test_size=0.2, random_state=42)\nprint(\"X_train shape: Obs- {} \/ col- {}\".format(X_train.shape[0], X_train.shape[1]))\nprint(\"X_test shape: Obs- {} \/ col- {}\".format(X_test.shape[0], X_test.shape[1]))\nprint(\"y_train shape: Obs- {} \/ col- {}\".format(y_train.shape[0], 0))\nprint(\"y_test shape: Obs- {} \/ col- {}\".format(y_test.shape[0], 0))","d731d605":"model_numeric_features = X_train.select_dtypes(exclude=['object', 'category']).columns\nmodel_categorical_features = X_train.select_dtypes(['object', 'category']).columns","c8c821c0":"from sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.linear_model import LogisticRegression\n\nnumeric_transformer = Pipeline(\n    steps=[\n        ('scaler', StandardScaler())\n    ]\n)\n\ncategorical_transformer = Pipeline(\n    steps=[\n        ('one_hot', OneHotEncoder(handle_unknown='ignore'))\n    ]\n)\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('numeric', numeric_transformer, model_numeric_features),\n        ('categorical', categorical_transformer, model_categorical_features)\n    ]\n)\n\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('classifier', LogisticRegression(solver='liblinear'))])\n\nclf.fit(X_train, y_train)\nclf_preds = clf.predict(X_test)","59a82d42":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, clf_preds))","1c7d3d66":"from sklearn.ensemble import RandomForestClassifier\n\nclf_random = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('classifier', RandomForestClassifier(max_depth = 15,             \n                                  max_features = 10, \n                                  min_samples_split = 8, \n                                  n_estimators = 100))])\nclf_random.fit(X_train, y_train)\nrandom_preds = clf_random.predict(X_test)","804ec34b":"print(classification_report(y_test, random_preds))","51faf82a":"import xgboost as xgb\n\nclf_xgb = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('classifier', xgb.XGBClassifier())])\nclf_xgb.fit(X_train, y_train)\nxgb_preds = clf_xgb.predict(X_test)","98c550bf":"print(classification_report(y_test, xgb_preds))","414af340":"### Creating Model and Pipeline","28c74258":"### One Hot Encoding\nChanging categorical values into numeric using Pandas ***get_dummies*** function.","3fe4a8fe":"Check the **correlation** between `Charged_Off` and other features.","36fadc15":"`emp_title` has a lot of uniques values, so this need time to clean, so i'm going to drop that for this exercise.","24e75d3d":"Combining `none` and `any` categories in **home_ownership** feature with `other`.","f67eb3ab":"# Lending Club EDA & Logistic Regression\n","493bef01":"#### Creating a new column as target, labeling as 0 and 1 as Charged Off","c30a1282":"There are only two cases, that's why portion is high. Other States are more or less similar. We can drop that feature.","bcbc11d1":"### Data Cleaning","08a3fa99":"Very low percentage of missing values, so we can drop some.","307dad80":"Creating a ***scanning df*** for examining dataset, before working on it, reading first 10 K rows.","845a296d":"Creating a **heatmap** to see the correlation between features.","a318f612":"Separate `Charged_off` that is going to be our target or dependent variable. I don't going to scale this target.","437bbc0b":"Creating a new columns `Charged_off` with values ***0*** or ***1*** depending of the columns `loan_status`.","c8e359fe":"### Exaploratory Data Analysis","ebbfb00f":"`Title` and `Purpose` have a similar information, but i think purpose is more useful. Drop ***title***","f268d742":"#### Data Preporcessing","c2e39316":"Feature Engineering, Creating ***Fico Range***, using Fico range high and low.","82807ca9":"We have features that are **strong correlated**, so we need to remove one of each one because the model can be affected by this strong correlations.\n- loan_amnt and installment have a correlation, im going to keep loan_amnt.\n- Similarly between Total acc and open acc, total acc will be dropped.\n- Between pub rec and pub rec bankruptcies, pub rec will be dropped.\n- Fico Range High and Low fully correlated, will create a *new feature* instead of both","f0e2b30f":"Some features that should be numerics are actually `objects` because they have unnecessary text inside like *months* or *%*. We need to change this features.\n- **term:** remove `months`.\n- **int_rate:** remove *%*.\n- **revol_util:** remove *%*.\n- **earliest_cr_line**: Extract the year.\n- **issue_d**: Extract the year.","41796518":"### Feature Scaling using Standard Scaler\n\nThis part including Standard Scaler and One Hot Encoding are just to demostrate how to perform Feature Engineering before the creation of the model, but in this exercise i'm going to use ***pipelines*** to show how you can use pipelines to perfomr feature engineering more easily.","af20f96d":"Now the number of missing values is very low, we can drop the existing missing values.","0ac19eee":"**Down Sampling for model testing, Selecting most recent 4 years**","5d703dc0":"`Subgrade` provide more valuble information. Drop ***`grade`***.","52e1f5ee":"## Models\n\n### Logistic Regression","7e2fe238":"### Random Forest","583dec72":"### XGBOOST Classifier","b2f01099":"Distribution of `Charged_Off` in **df_sample**.","a78362f5":"Selecting Fully Paid and Charged Off Rows. \nFor this example we are going to predict only 2 outputs, `Fully Paid` and `Charged Off`","0d3f1068":"Now is time to drop `loan_status` columns.","34726360":"Extract only the year from **`earliest_cr_line`**.","fabe2da9":"**Final Result**. All numeric features scalled and categorical features converted to numbers.","5fc53555":"#### Reading Whole Dataset with Selected Features","adf2b300":"#### Feature selection\n\nBelow features selected according to:\n- Domain search.\n- Correlation Check.\n- Relation with target value.","962418da":"The ratio throw the years is very similar, so we can **drop** this feature.","4433a361":"For some reason i cant install **openpyxl**, a library that allow me to open Excel files. For that, here is a picture with the features that im going to use.\n\n![image.png](attachment:a49eeefb-e3ca-4ef4-b108-6bdeca4a2897.png)"}}