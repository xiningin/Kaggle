{"cell_type":{"7900a693":"code","75e3e2ec":"code","f8f4cf0c":"code","0b8de6c2":"code","56ce63ea":"code","fa7c53ea":"code","e60f0e12":"code","d8b96b85":"code","f2552edf":"code","9d6dda98":"code","0a576373":"code","b6a4f53d":"code","60ce7223":"code","96d07716":"code","000cd3d8":"code","e445ac35":"code","7cec6aea":"code","b7461840":"code","15ffc886":"code","d290b100":"code","e0d849f5":"code","2a49a6a9":"code","529a181c":"code","9931e561":"code","5b2499b7":"markdown","0101a1af":"markdown","8e7b1bb4":"markdown","7fd47b4d":"markdown","0c90096f":"markdown"},"source":{"7900a693":"#Iris Dataset\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.datasets import load_iris","75e3e2ec":"#loading the data\ndf = load_iris()\ndf","f8f4cf0c":"#feature names \/independent variable\ndf.feature_names","0b8de6c2":"#target names \/dependent variable\ndf.target_names","56ce63ea":"#loading the dependent variable into dataframe\niris_df = pd.DataFrame(df.data,columns=df.feature_names)\niris_df.head()","fa7c53ea":"#adding the target variable in our dataframe\niris_df['target'] = df.target\niris_df","e60f0e12":"#understanding the data\niris_df.info()","d8b96b85":"iris_df['flower_name'] =iris_df.target.apply(lambda x: df.target_names[x])\niris_df.tail()","f2552edf":"#setosa flower dataset\niris_df[iris_df.target==0].head()","9d6dda98":"#versicolor flower dataset\niris_df[iris_df.target==1].head()","0a576373":"#virginica flower dataset\niris_df[iris_df.target==2].head()","b6a4f53d":"iris_df[55:145]","60ce7223":"df0 = iris_df[:50] #setosa dataset\ndf1 = iris_df[50:100] # versicolor dataset\ndf2 = iris_df[100:] # virginica dataset","96d07716":"plt.xlabel('Sepal Length')\nplt.ylabel('Sepal Width')\nplt.scatter(df0['sepal length (cm)'], df0['sepal width (cm)'],color=\"green\",marker='+')\nplt.scatter(df1['sepal length (cm)'], df1['sepal width (cm)'],color=\"blue\",marker='.')\n#plt.scatter(df2['sepal length (cm)'], df2['sepal width (cm)'],color=\"red\",marker='*')","000cd3d8":"plt.xlabel('Petal Length')\nplt.ylabel('Petal Width')\n#plt.scatter(df0['petal length (cm)'], df0['petal width (cm)'],color=\"green\",marker='+')\nplt.scatter(df1['petal length (cm)'], df1['petal width (cm)'],color=\"blue\",marker='.')\nplt.scatter(df2['petal length (cm)'], df2['petal width (cm)'],color=\"red\",marker='*')","e445ac35":"from sklearn.model_selection import train_test_split\nX = iris_df.drop(['target','flower_name'], axis='columns')\ny = iris_df.target\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state = 10)","7cec6aea":"# support vector machine\nfrom sklearn.svm import SVC\nmodel = SVC(gamma='auto')\nmodel.fit(X_train, y_train)","b7461840":"model.score(X_test,y_test)","15ffc886":"#Random forest model\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc.fit(X_train, y_train)","d290b100":"rfc.score(X_test,y_test)","e0d849f5":"#decision tree classifier\nfrom sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier(criterion='gini',max_depth = 1000)\ndtc.fit(X_train, y_train)","2a49a6a9":"dtc.score(X_test,y_test)","529a181c":"#Xgboost \nfrom xgboost import XGBClassifier\nxgb = XGBClassifier()\nxgb.fit(X_train,y_train)","9931e561":"xgb.score(X_test,y_test)","5b2499b7":"## in case of DecisionTreeClassifier and SVM we need to do some hyperparameter tuning to achieve the score of 1.0","0101a1af":"### here we have four dependent variable & one int variable & the data has not missing values as we can see its not null ","8e7b1bb4":"### Trying diff models","7fd47b4d":"## RandomForest and XGBClassifier models give accurate result without hyperparameter tuning","0c90096f":"## From the above model development we can see that the algos predict the data very precisely."}}