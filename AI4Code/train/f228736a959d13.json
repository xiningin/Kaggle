{"cell_type":{"2daf77fe":"code","09baf817":"code","6a3252ab":"code","3ec66977":"code","371ab05c":"code","48c5e616":"code","a9907234":"code","3d0b34ea":"code","514bac8b":"code","b032c968":"code","d5e84431":"code","dc65ac52":"code","a9d8a3f0":"code","9c6cba2e":"code","1fe8a93c":"code","78aceee1":"code","9c968e93":"code","f5000335":"code","d35c86cd":"code","6a241591":"code","2e0dfa3d":"code","796503be":"code","ceaafd94":"code","c7d38f8a":"code","40ecc08c":"markdown","eb9f0c88":"markdown","0b9bb16e":"markdown"},"source":{"2daf77fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","09baf817":"df = pd.read_csv('..\/input\/yeast-molecular-genetics\/gene_data_GO.csv', encoding='utf8')\ndf.head()","6a3252ab":"#Code from Gabriel Preda\n#plt.style.use('dark_background')\ndef plot_count(feature, title, df, size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='bone')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()","3ec66977":"plot_count(\"go_BioProc\", \"Gene Ontology, Biological Processes\", df,4)","371ab05c":"plot_count(\"go_CellComp\", \"Gene Ontology, Cellular Compartment\", df,4)","48c5e616":"plot_count(\"go_MolFunc\", \"Gene Ontology, Molecular Function\", df,4)","a9907234":"#Codes by Pooja Jain https:\/\/www.kaggle.com\/jainpooja\/av-guided-hackathon-predict-youtube-likes\/notebook\n\ntext_cols = ['go_BioProc', 'go_CellComp', 'go_MolFunc']\n\nfrom wordcloud import WordCloud, STOPWORDS\n\nwc = WordCloud(stopwords = set(list(STOPWORDS) + ['|']),colormap='Oranges', background_color=\"Green\", random_state = 42)\nfig, axes = plt.subplots(2, 2, figsize=(20, 12))\naxes = [ax for axes_row in axes for ax in axes_row]\n\nfor i, c in enumerate(text_cols):\n  op = wc.generate(str(df[c]))\n  _ = axes[i].imshow(op)\n  _ = axes[i].set_title(c.upper(), fontsize=24)\n  _ = axes[i].axis('off')\n\n_ = fig.delaxes(axes[3])","3d0b34ea":"fig = px.bar(df, x= \"description\", y= \"go_MolFunc\", color_discrete_sequence=['crimson'], title=\"Molecular function of Proteins\")\nfig.show()","514bac8b":"#Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\ncolor = plt.cm.RdGy(np.linspace(0,1,20))\ndf[\"go_MolFunc\"].value_counts().sort_values(ascending=False).head(8).plot.pie(y=\"description\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"Gene Ontology, Molecular Function\")\nplt.axis(\"off\")\nplt.show()","b032c968":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nlowerdf = df.groupby('proteinname').size()\/df['go_CellComp'].count()*100\nlabels = lowerdf.index\nvalues = lowerdf.values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values,marker_colors = px.colors.sequential.speed, hole=.6)])\nfig.show()","d5e84431":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.go_BioProc)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set2', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","dc65ac52":"import shap\nimport lightgbm as lgb\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\nimport random","a9d8a3f0":"SEED = 99\nrandom.seed(SEED)\nnp.random.seed(SEED)","9c6cba2e":"dfmodel = df.copy()\n\n# read the \"object\" columns and use labelEncoder to transform to numeric\nfor col in dfmodel.columns[dfmodel.dtypes == 'object']:\n    le = LabelEncoder()\n    dfmodel[col] = dfmodel[col].astype(str)\n    le.fit(dfmodel[col])\n    dfmodel[col] = le.transform(dfmodel[col])","1fe8a93c":"#change columns names to alphanumeric\ndfmodel.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in dfmodel.columns]","78aceee1":"X = dfmodel.drop(['proteinname','go_MolFunc'], axis = 1)\ny = dfmodel['proteinname']","9c968e93":"lgb_params = {\n                    'objective':'binary',\n                    'metric':'auc',\n                    'n_jobs':-1,\n                    'learning_rate':0.005,\n                    'num_leaves': 20,\n                    'max_depth':-1,\n                    'subsample':0.9,\n                    'n_estimators':2500,\n                    'seed': SEED,\n                    'early_stopping_rounds':100, \n                }","f5000335":"## choose the number of folds, and create a variable to store the ao store the auc values and the iteration values.\nK = 5\nfolds = KFold(K, shuffle = True, random_state = SEED)\nbest_scorecv= 0\nbest_iteration=0\n\n# Separate data in folds, create train and validation dataframes, train the model and cauculate the mean AUC.\nfor fold , (train_index,test_index) in enumerate(folds.split(X, y)):\n    print('Fold:',fold+1)\n          \n    X_traincv, X_testcv = X.iloc[train_index], X.iloc[test_index]\n    y_traincv, y_testcv = y.iloc[train_index], y.iloc[test_index]\n    \n    train_data = lgb.Dataset(X_traincv, y_traincv)\n    val_data   = lgb.Dataset(X_testcv, y_testcv)\n    \n    LGBM = lgb.train(lgb_params, train_data, valid_sets=[train_data,val_data], verbose_eval=250)\n    best_scorecv += LGBM.best_score['valid_1']['auc']\n    best_iteration += LGBM.best_iteration\n\nbest_scorecv \/= K\nbest_iteration \/= K\nprint('\\n Mean AUC score:', best_scorecv)\nprint('\\n Mean best iteration:', best_iteration)","d35c86cd":"lgb_params = {\n                    'objective':'binary',\n                    'metric':'auc',\n                    'n_jobs':-1,\n                    'learning_rate':0.05,\n                    'num_leaves': 20,\n                    'max_depth':-1,\n                    'subsample':0.9,\n                    'n_estimators':round(best_iteration),\n                    'seed': SEED,\n                    'early_stopping_rounds':None, \n                }\n\ntrain_data_final = lgb.Dataset(X, y)\nLGBM = lgb.train(lgb_params, train_data)","6a241591":"print(LGBM)","2e0dfa3d":"# telling wich model to use\nexplainer = shap.TreeExplainer(LGBM)\n# Calculating the Shap values of X features\nshap_values = explainer.shap_values(X)","796503be":"shap.summary_plot(shap_values[1], X, plot_type=\"bar\")","ceaafd94":"shap.summary_plot(shap_values[1], X)","c7d38f8a":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Mar\u00edlia Prata, @mpwolke Was here' )","40ecc08c":"The Saccharomyces Genome Database (SGD, https:\/\/www.yeastgenome.org) is the community resource for the budding yeast Saccharomyces cerevisiae. The SGD project provides encyclopedic information about the yeast genome and its genes, proteins, and other encoded features.\n\nExperimental results on the functions and interactions of yeast genes, as reported in the peer-reviewed literature, are extracted by high-quality manual curation and integrated within a well-developed database.\n\nThis complex collection of information is integrated with a variety of bioinformatic tools to facilitate experimental design and analysis and allow productive discovery of new biological details. \nhttps:\/\/sites.google.com\/view\/yeastgenome-help\/about","eb9f0c88":"#Codes from rossinEndrew https:\/\/www.kaggle.com\/endrewrossin\/fast-initial-lightgbm-model-to-detect-exam-result\/comments","0b9bb16e":"![](https:\/\/i.ytimg.com\/vi\/xomrsz9CHxI\/maxresdefault.jpg)youtube.com"}}