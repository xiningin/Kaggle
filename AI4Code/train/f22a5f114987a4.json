{"cell_type":{"4fb95d98":"code","e1472267":"code","3f89af3b":"code","621fbe1b":"code","a8927998":"code","a4df99d0":"code","62ca64fa":"code","1e78b4e1":"code","ccbf6946":"code","f99b2734":"code","dc8383ce":"code","0ff242c0":"code","baeaed94":"code","cdc089fd":"code","550ac8b5":"code","a5dd4cef":"code","ba256406":"code","636add91":"code","d33af073":"code","377b967e":"code","c4b8769c":"code","cb34914e":"code","82f3e573":"markdown","7c3c5901":"markdown","bcda3965":"markdown","f5d3bc31":"markdown","8056a76f":"markdown","f2374d55":"markdown","6c4c367e":"markdown","740397d3":"markdown","8898c452":"markdown","d7c8cd4b":"markdown","0cc136eb":"markdown","b6cb9a92":"markdown","d91ac359":"markdown","19a612a1":"markdown","de46c504":"markdown","d57ab63a":"markdown","5e927689":"markdown","f5323e5e":"markdown","48e86dab":"markdown","22dc873a":"markdown","93002bf4":"markdown"},"source":{"4fb95d98":"# Importing all the essential libraries for our data analysis with SQLite\nimport sqlite3\nimport pandas as pd","e1472267":"conn = sqlite3.connect('..\/input\/database.sqlite')","3f89af3b":"#There are four connected tables: 1)Station info, 2)Status with timestamps, 3)Trips & 4)Weather\n#Let's see all the columns and first 10 rows of the Station table\npd.read_sql('''\n    SELECT *\n    FROM station\n    LIMIT 10;\n''', con=conn)","621fbe1b":"pd.read_sql('''\n    SELECT city, \n    SUM(dock_count) AS total_capacity, \n    COUNT(name) AS station_count, \n    ROUND(SUM(dock_count)\/COUNT(name), 2) AS average_capacity_per_station\n    FROM station\n    GROUP BY city\n    ORDER BY station_count DESC;\n''', con=conn, index_col='city')","a8927998":"pd.read_sql('''\n    SELECT city,\n           CASE\n           -- m\/d\/yyyy\n           WHEN (length(installation_date) = 8 AND substr(installation_date,2,1) = '\/') \n           THEN substr(installation_date,5,4)||'-0'||substr(installation_date,1,1)||'-0'||substr(installation_date,3,1)\n           -- m\/dd\/yyyy\n           WHEN (length(installation_date) = 9 AND substr(installation_date,2,1) = '\/') \n           THEN substr(installation_date,6,4)||'-0'||substr(installation_date,1,1)||'-'||substr(installation_date,3,2)\n           -- mm\/d\/yyyy\n           WHEN (length(installation_date) = 9 AND substr(installation_date,3,1) = '\/') \n           THEN substr(installation_date,6,4)||'-0'||substr(installation_date,1,2)||'-'||substr(installation_date,4,1)\n           -- mm\/dd\/yyyy\n           WHEN (length(installation_date) = 10 AND substr(installation_date,3,1) = '\/') \n           THEN substr(installation_date,7,4)||'-'||substr(installation_date,1,2)||'-'||substr(installation_date,4,2)\n           ELSE installation_date\n           END AS installed_date, \n           SUM(dock_count) AS total_dock_ct,\n           COUNT(name) AS station_count\n    FROM station\n    GROUP BY 1,2\n    ORDER BY 2,1;\n''', con=conn)","a4df99d0":"'''SELECT city, \n       CAST(SUBSTR(installation_date, LENGTH(installation_date)-3) || '-' ||  \n       SUBSTR(installation_date, 0, INSTR(installation_date,'\/')) || '-' ||\n       REPLACE((SUBSTR(installation_date, INSTR(installation_date,'\/') + 1, 2)), '\/', '') AS DATE) AS installed_date\n       SUM(dock_count) as station_count,\nFROM station\nGROUP BY 1,2\nORDER BY 2,1;'''","62ca64fa":"pd.read_sql('''\n    WITH t1 AS (SELECT city,\n                       CASE\n                       -- m\/d\/yyyy\n                       WHEN (length(installation_date) = 8 AND substr(installation_date,2,1) = '\/') \n                       THEN substr(installation_date,5,4)||'-0'||substr(installation_date,1,1)||'-0'||substr(installation_date,3,1)\n                       -- m\/dd\/yyyy\n                       WHEN (length(installation_date) = 9 AND substr(installation_date,2,1) = '\/') \n                       THEN substr(installation_date,6,4)||'-0'||substr(installation_date,1,1)||'-'||substr(installation_date,3,2)\n                       -- mm\/d\/yyyy\n                       WHEN (length(installation_date) = 9 AND substr(installation_date,3,1) = '\/') \n                       THEN substr(installation_date,6,4)||'-0'||substr(installation_date,1,2)||'-'||substr(installation_date,4,1)\n                       -- mm\/dd\/yyyy\n                       WHEN (length(installation_date) = 10 AND substr(installation_date,3,1) = '\/') \n                       THEN substr(installation_date,7,4)||'-'||substr(installation_date,1,2)||'-'||substr(installation_date,4,2)\n                       ELSE installation_date\n                       END AS installed_date, \n                       SUM(dock_count) AS total_dock_ct,\n                       COUNT(name) AS station_count\n                FROM station\n                GROUP BY 1,2\n                ORDER BY 2,1)\n    SELECT CASE \n        WHEN month = '2013-08-01'\n        THEN 'AUG13'\n        WHEN month > '2013-08-01'\n        THEN 'after_AUG13'\n        ELSE 'before_AUG13'\n        END AS installation_month,\n        SUM(total_dock_ct) AS dock_ct,\n        SUM(station_count) AS station_ct\n    FROM (SELECT DATE(installed_date, 'start of month') as month,\n                 total_dock_ct, \n                 station_count\n         FROM t1\n         ) AS innerquery\n    GROUP BY 1;\n''', con=conn, index_col='installation_month')","1e78b4e1":"#Let's see all the columns and first 10 rows of the Status table which updated its status every minute\npd.read_sql('''\n     SELECT * \n     FROM status\n     LIMIT 10;\n''', con=conn)","ccbf6946":"pd.read_sql('''\n     SELECT ROUND(AVG(status.bikes_available),2) AS avg_available_bikes, \n            ROUND(AVG(status.docks_available),2) AS free_dock_count,\n            station.dock_count AS max_dock_capacity,\n            station.name\n     FROM status\n     INNER JOIN station\n     ON status.station_id = station.id\n     GROUP BY name\n     ORDER BY 1, 2 DESC\n     LIMIT 10;\n''', con=conn)","f99b2734":"pd.read_sql('''\n    SELECT ROUND(AVG(status.bikes_available),2) AS avg_available_bikes, \n           ROUND(AVG(status.docks_available),2) AS free_dock_count,\n           COUNT(*) AS num_occurrences,\n           DATE(SUBSTR(time, 1,4) || '-' || SUBSTR(time, 6,2) || '-' || \n                SUBSTR(time, 9,2) ||  SUBSTR(time, 11,9), 'start of month') AS month \n    FROM status\n    INNER JOIN station\n    ON status.station_id = station.id\n    WHERE station.name = '2nd at Folsom'\n    GROUP BY station.name, month\n    ORDER BY 2 DESC;\n''', con=conn)","dc8383ce":"pd.read_sql('''\n    SELECT *\n    FROM trip\n    LIMIT 10\n''', con=conn)","0ff242c0":"pd.read_sql('''\n    SELECT duration\/60\/60 AS duration_hr, COUNT(*) AS frequency\n    FROM trip\n    GROUP BY duration_hr\n    ORDER BY duration_hr DESC \n    LIMIT 15;\n''', con=conn)","baeaed94":"pd.read_sql('''\n    SELECT duration\/60\/60 AS duration_hr, COUNT(*) AS frequency\n    FROM trip\n    WHERE duration_hr <= 15\n    GROUP BY duration_hr\n    ORDER BY duration_hr DESC;\n''', con=conn)","cdc089fd":"pd.read_sql('''\n    SELECT COUNT(*) AS num_count,\n           trip.start_station_name\n    FROM trip\n    INNER JOIN station\n    ON station.id = start_station_id\n    WHERE station.city = 'San Francisco'\n    GROUP BY 2\n    ORDER BY 1 DESC\n    LIMIT 5;\n''', con=conn)","550ac8b5":"pd.read_sql('''\n    SELECT COUNT(*) AS num_count, \n           trip.end_station_name\n    FROM trip\n    INNER JOIN station\n    ON station.id = start_station_id\n    WHERE station.city = 'San Francisco'\n    GROUP BY 2\n    ORDER BY 1 DESC\n    LIMIT 5;\n''', con=conn)","a5dd4cef":"pd.read_sql('''\n    SELECT COUNT(*) AS num_count,\n           ROUND(AVG(duration\/60), 2) AS avg_duration_mins,\n           trip.start_station_name,\n           trip.end_station_name\n    FROM trip\n    INNER JOIN station\n    ON station.id = start_station_id\n    WHERE station.city = 'San Francisco' AND duration\/60\/60 <= 15\n    GROUP BY 3, 4\n    ORDER BY 1 DESC\n    LIMIT 15;\n''', con=conn)","ba256406":"pd.read_sql('''\n    SELECT AVG(avg_duration_mins) AS avg_duration_for_most_pop\n    FROM (SELECT COUNT(*) AS num_count,\n                 ROUND(AVG(duration\/60), 2) AS avg_duration_mins,\n                 trip.start_station_name,\n                 trip.end_station_name\n          FROM trip\n          INNER JOIN station\n          ON station.id = start_station_id\n          WHERE station.city = 'San Francisco' AND duration\/60\/60 <= 15\n          GROUP BY 3, 4\n          HAVING COUNT(*) > 2000\n          ORDER BY 1 DESC) AS most_popular_trips\n''', con=conn)","636add91":"pd.read_sql('''\n    SELECT COUNT(*) AS num_count,\n           ROUND(AVG(duration\/60), 2) AS avg_duration_mins,\n           trip.start_station_name,\n           trip.end_station_name\n    FROM trip\n    INNER JOIN station\n    ON station.id = start_station_id\n    WHERE city='San Francisco' AND duration\/60\/60 <= 15\n    GROUP BY 3, 4\n    HAVING COUNT(*) > 50\n    ORDER BY 2 DESC\n    LIMIT 15;\n''', con=conn)","d33af073":"pd.read_sql('''\n    SELECT subscription_type,\n           COUNT(*) AS sub_type_ct\n    FROM trip\n    GROUP BY 1;\n''', con=conn)","377b967e":"pd.read_sql('''\n    WITH t1 AS (SELECT DATE(CASE\n                -- m\/d\/yyyy\n               WHEN ((INSTR(start_date, ' ')-1) = 8 AND substr(start_date,2,1) = '\/') \n               THEN substr(start_date,5,4)||'-0'||substr(start_date,1,1)||'-0'||substr(start_date,3,1)\n               -- m\/dd\/yyyy\n               WHEN ((INSTR(start_date, ' ')-1) = 9 AND substr(start_date,2,1) = '\/') \n               THEN substr(start_date,6,4)||'-0'||substr(start_date,1,1)||'-'||substr(start_date,3,2)\n               -- mm\/d\/yyyy\n               WHEN ((INSTR(start_date, ' ')-1) = 9 AND substr(start_date,3,1) = '\/') \n               THEN substr(start_date,6,4)||'-0'||substr(start_date,1,2)||'-'||substr(start_date,4,1)\n               -- mm\/dd\/yyyy\n               WHEN ((INSTR(start_date, ' ')-1) = 10 AND substr(start_date,3,1) = '\/') \n               THEN substr(start_date,7,4)||'-'||substr(start_date,1,2)||'-'||substr(start_date,4,2)\n               ELSE start_date\n               END) AS trip_date,\n               subscription_type, \n               (duration \/ 60) AS duration_min\n        FROM trip\n        INNER JOIN station\n        ON station.id = start_station_id\n        WHERE city='San Francisco' AND duration\/60\/60 <= 15)\n    SELECT CASE \n           WHEN (trip_date IN (DATE(trip_date, 'weekday 6'), DATE(trip_date, 'weekday 0')))\n           THEN 'weekends'\n           ELSE 'weekdays'\n           END AS weekday,\n           subscription_type,\n           ROUND(AVG(duration_min), 2) AS avg_dur_min\n           \n    FROM t1\n    GROUP BY 1,2;\n''', con=conn)","c4b8769c":"pd.read_sql('''\n    WITH t1 AS (SELECT DATE(CASE\n                -- m\/d\/yyyy\n               WHEN ((INSTR(start_date, ' ')-1) = 8 AND substr(start_date,2,1) = '\/') \n               THEN substr(start_date,5,4)||'-0'||substr(start_date,1,1)||'-0'||substr(start_date,3,1)\n               -- m\/dd\/yyyy\n               WHEN ((INSTR(start_date, ' ')-1) = 9 AND substr(start_date,2,1) = '\/') \n               THEN substr(start_date,6,4)||'-0'||substr(start_date,1,1)||'-'||substr(start_date,3,2)\n               -- mm\/d\/yyyy\n               WHEN ((INSTR(start_date, ' ')-1) = 9 AND substr(start_date,3,1) = '\/') \n               THEN substr(start_date,6,4)||'-0'||substr(start_date,1,2)||'-'||substr(start_date,4,1)\n               -- mm\/dd\/yyyy\n               WHEN ((INSTR(start_date, ' ')-1) = 10 AND substr(start_date,3,1) = '\/') \n               THEN substr(start_date,7,4)||'-'||substr(start_date,1,2)||'-'||substr(start_date,4,2)\n               ELSE start_date\n               END) AS trip_date,\n               subscription_type, \n               (duration \/ 60) AS duration_min\n        FROM trip\n        INNER JOIN station\n        ON station.id = start_station_id\n        WHERE city='San Francisco' AND duration\/60\/60 <= 15)\n    SELECT CASE \n           WHEN trip_date = (DATE(trip_date, 'weekday 1'))\n           THEN '1 - Monday'\n           WHEN trip_date = (DATE(trip_date, 'weekday 2'))\n           THEN '2 - Tuesday'\n           WHEN trip_date = (DATE(trip_date, 'weekday 3'))\n           THEN '3 - Wednesday'\n           WHEN trip_date = (DATE(trip_date, 'weekday 4'))\n           THEN '4 - Thursday'\n           WHEN trip_date = (DATE(trip_date, 'weekday 5'))\n           THEN '5 - Friday'\n           WHEN trip_date = (DATE(trip_date, 'weekday 6'))\n           THEN '6 - Saturday'\n           ELSE '7 - Sunday'\n           END AS weekday,\n           subscription_type,\n           ROUND(AVG(duration_min), 2) AS avg_dur_min\n           \n    FROM t1\n    GROUP BY 1,2\n    ORDER BY 2,1;\n''', con=conn)","cb34914e":"pd.read_sql('''\n    SELECT COUNT(*) AS num_count,\n           ROUND(AVG(duration\/60), 2) AS avg_duration_mins,\n           trip.start_station_name,\n           trip.end_station_name\n    FROM trip\n    INNER JOIN station\n    ON station.id = start_station_id\n    WHERE station.city = 'San Francisco' AND duration\/60\/60 <= 15 AND subscription_type = 'Customer'\n    GROUP BY 3, 4\n    ORDER BY 1 DESC\n    LIMIT 15;\n''', con=conn)","82f3e573":"### For weekdays and weekends (and also per each day of the week), what is the average duration per subscriber type?","7c3c5901":"### Most of them are round-trips (meaning, they were pickup and dropped off at the same location and on average they are somewhere between 1,5-2,5 hours\n### Who rides more often, customer or subscriber?","bcda3965":"### Okay, overwhelming majority of the rides duration were less than an hour. Now back to our original question -  which stations are the busiest pickup and dropoff locations in SF? ","f5d3bc31":"### Wow, customers on average tend to ride 4-5 times longer than subscribers!!! Now let's ask the same question but only for customers - does the popular routes in SF changes? And of course, we are expecting to see longer durations for each popular route","8056a76f":"### The duration ranges from 4 to 20 minutes for the most popular routes in SF\n### For the trips which occurred above 2,000 times (in 2 years priod) in SF, what is the average duration in minutes?","f2374d55":"### Quite suprisingly, the 2nd and Folsom St. seems to be the busiest (Mabe b\/c there is a bus station terminal nearby). Let's explore more and maybe this table is not revealing the full picture\n### But if the 2nd and Folsom St. is the busiest; then what month (on average) had the least available bikes and does the resulted query seems bias for any particular month?  ","6c4c367e":"### Per city and date, what is the dock and station count?","740397d3":"### Above 90 percent of all installments occurred on AUG13","8898c452":"### From above query's result, it seems like most installations occurred on August (of 2013). Let's find exact number for AUG13 installments and the rest ","d7c8cd4b":"### It changes quite a bit - both the popular locations and average duration time","0cc136eb":"### With many other RDBMS based on Structured Query Languages (such as MySQL, or PostgreSQL), we would have avoided such a lengthy \"ifelse\" statements b\/c their data type support streches well beyond the five primitive data types (which SQLite offers)\n* **For example in PostgreSQL, we could easily change the 'string' object into 'date' by writing  <<CAST(date_column AS DATE)>> or check below for our specific case**","b6cb9a92":"### Unlike the 2nd&Folsom, Now those two results make sence\n### For the remaining queries, we will not include the rows which has longer than 15 hour-duration\n### What are the most popular bicycle routes in SF and what are the average duration time in minutes? ","d91ac359":"### AUG13 - it has the most but it only has 3,200 rows for that month compared to above 40,000 for any other month and year. Therefore, April of 14 is the busiest month.\n### Let's check out the trips table and see whether our definition for being the 'busiest' based on available bikes and free docks hold up or falls apart ","19a612a1":"### For each given station, on average how many bikes were available vs docks? And which station had the least bicycles and most docks available on average (or was the busiest station)?","de46c504":"### The answer is no and probably, those outliers need to be dropped. If the day-long ride is 15 hours or less, then how often riders were within that timeframe?","d57ab63a":"## There is no better tool for analyzing relational databases than SQL. This tool has been around for quite a while and its not going anywhere anytime soon; because it is fast, reliable, elegant and easy to read even for non-programmers. Therefore, I am forcing myself out of my comfort (pandas) zone and tryng to better undestand the SQLite by fully engaging with it. In this short tutorial, I will ask and answer questions about the bicycle sharing dataset by writing queries and comments. If you are someone who is good with SQL, please comment on my queries with your advice(s) on improving it. Hope you will find it worthy of your time! ","5e927689":"### For each given location\/city, how many docks were installed, how many stations are there and what is the average capacity of each station?","f5323e5e":"### What are the popular long-trip routes which occurred at least 50 times (in the last 2 years)?","48e86dab":"## *It was quite easy to use SQLite with python but definately, missing the datetime object is the big minus. Maybe bigquery can solve the shortcomings of SQLite. In any case, bigquery is going to be my next challenge (with larger dataset and more in depth analysis). I hope reading my kernel was worthy of your time and attention. If you have any questions, suggestions or even disagreements, please feel free to comment it below. If you liked it, please upvote it. Thanks!*","22dc873a":"### Is there anything fishy about the duration column?  What are the maximum duration rides and are they common?","93002bf4":"# Data Analysis with SQLite"}}