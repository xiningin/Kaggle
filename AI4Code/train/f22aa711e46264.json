{"cell_type":{"0467f39b":"code","8f0451e4":"code","6b325f0a":"code","19594456":"code","a74fbd51":"code","bdcd879f":"code","d9ad3158":"code","78930732":"code","31e6e3a9":"code","5a44b095":"code","90cdff1e":"code","1eb635ea":"code","ca5ca459":"code","4eb680db":"code","19086f21":"code","4cc23906":"code","35460aef":"code","4db7acfd":"code","ef5c6c8e":"code","69d54d3f":"code","9c7ffae1":"code","cbc243c5":"code","81cf23e0":"code","397183b3":"code","76f1331a":"code","a7513468":"code","564df4ef":"code","4e133c7a":"code","85996b3e":"code","068d6ddd":"code","fca62c6d":"code","4411d104":"code","21497fc3":"code","c7380075":"code","e04d84b6":"code","f5d491db":"code","e80a3d06":"code","86ecd12a":"code","baee2e6e":"code","895a3df6":"code","d622bcf5":"code","d3be96d3":"code","3f5f5ce5":"code","d5f5427a":"code","584eee0b":"code","af47475f":"code","820ea3fd":"code","789d05db":"code","fbf2bffb":"code","38bf2b92":"code","99c8f679":"code","e44bba47":"code","3321db06":"code","a3603523":"code","c2db47c1":"code","45513a4b":"code","809a142e":"code","ec267cca":"code","b1a865a1":"code","15890de2":"markdown","2a806637":"markdown","54bd00ed":"markdown","1e03cfd9":"markdown","985f030e":"markdown","716d52d3":"markdown"},"source":{"0467f39b":"# Import packages\nimport numpy as np\nimport pandas as pd \n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nimport sklearn.metrics as metrics\nimport math\nimport seaborn as sns\nfrom scipy import stats\nfrom scipy.stats import norm, skew","8f0451e4":"sample_submission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\n\n","6b325f0a":"train.head()","19594456":"train.drop('Id', axis= 1, inplace= False)\n","a74fbd51":"\ntest.drop('Id', axis= 1, inplace= False)","bdcd879f":"train.shape","d9ad3158":"train.info()","78930732":"train.describe(include='all')","31e6e3a9":"test.head()","5a44b095":"test.shape","90cdff1e":"train1= train\ntest1= test ","1eb635ea":"\ndf = pd.concat([train1, test1], axis=0,sort=False)\n","ca5ca459":"df.shape","4eb680db":"df.describe(include='all')","19086f21":"df.isnull().sum()","4cc23906":"df[\"PoolQC\"] = df[\"PoolQC\"].fillna(\"None\")\n\ndf[\"MiscFeature\"] = df[\"MiscFeature\"].fillna(\"None\")\n\ndf[\"Alley\"] = df[\"Alley\"].fillna(\"None\")\n\ndf['Fence'] = df['Fence'].fillna('None')\n\ndf['PoolQC'] = df['PoolQC'].fillna('None')\n\ndf['GarageCond'] = df['GarageCond'].fillna('None')\n\ndf['GarageQual'] = df['GarageQual'].fillna('None')\n\ndf['GarageFinish'] = df['GarageFinish'].fillna('None')\n\ndf['GarageType'] = df['GarageType'].fillna('None')\n\ndf['FireplaceQu'] = df['FireplaceQu'].fillna('None')\n\ndf['BsmtFinType2'] = df['BsmtFinType2'].fillna('None')\n\ndf['BsmtFinType1'] = df['BsmtFinType1'].fillna('None')\n\ndf['BsmtExposure'] = df['BsmtExposure'].fillna('None')\n\ndf['BsmtCond'] = df['BsmtCond'].fillna('None')\n\ndf['BsmtQual'] = df['BsmtQual'].fillna('None')","35460aef":"df.isnull().sum()","4db7acfd":"df_missing = (df.isnull().sum() \/ len(df)) * 100\ndf_missing = df_missing.drop(df_missing[df_missing == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :df_missing})\nmissing_data.head(30)","ef5c6c8e":"df = df.fillna(df.median())\ndf_missing = (df.isnull().sum() \/ len(df)) * 100\ndf_missing = df_missing.drop(df_missing[df_missing == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :df_missing})\nmissing_data.head(30)","69d54d3f":"df = df.fillna(df.median())","9c7ffae1":"df = df.fillna(df.median())\ndf_missing = (df.isnull().sum() \/ len(df)) * 100\ndf_missing = df_missing.drop(df_missing[df_missing == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :df_missing})\nmissing_data.head(30)","cbc243c5":"df = df.apply(lambda x:x.fillna(x.value_counts().index[0]))","81cf23e0":"df = df.fillna(df.median())\ndf_missing = (df.isnull().sum() \/ len(df)) * 100\ndf_missing = df_missing.drop(df_missing[df_missing == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :df_missing})\nmissing_data.head(30)","397183b3":"object_columns_df = df.select_dtypes(include=['object'])\nnumerical_columns_df =df.select_dtypes(exclude=['object'])","76f1331a":"object_columns_df.dtypes","a7513468":"object_columns_df.columns","564df4ef":"numerical_columns_df.dtypes","4e133c7a":"corrmat = train.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(corrmat, vmax=0.9, square=True)","85996b3e":"df= pd.get_dummies(df, columns= ['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual',\n       'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature',\n       'SaleType', 'SaleCondition'])","068d6ddd":"df.shape","fca62c6d":"object_columns_df['Street'].value_counts().plot(kind='bar',figsize=[10,3])\nobject_columns_df['Street'].value_counts() ","4411d104":"object_columns_df['Condition2'].value_counts().plot(kind='bar',figsize=[10,3])\nobject_columns_df['Condition2'].value_counts() \n","21497fc3":"object_columns_df['RoofMatl'].value_counts().plot(kind='bar',figsize=[10,3])\nobject_columns_df['RoofMatl'].value_counts() ","c7380075":"object_columns_df['Heating'].value_counts().plot(kind='bar',figsize=[10,3])\nobject_columns_df['Heating'].value_counts() #======> Drop feature one Type\n","e04d84b6":"object_columns_df = object_columns_df.drop(['Heating','RoofMatl','Condition2','Street','Utilities'],axis=1)\n","f5d491db":"numerical_columns_df['Age_House']= (numerical_columns_df['YrSold']-numerical_columns_df['YearBuilt'])\nnumerical_columns_df['Age_House'].describe()\n","e80a3d06":"Negatif = numerical_columns_df[numerical_columns_df['Age_House'] < 0]\nNegatif\n","86ecd12a":"numerical_columns_df.loc[numerical_columns_df['YrSold'] < numerical_columns_df['YearBuilt'],'YrSold' ] = 2009\nnumerical_columns_df['Age_House']= (numerical_columns_df['YrSold']-numerical_columns_df['YearBuilt'])\nnumerical_columns_df['Age_House'].describe()\n","baee2e6e":"numerical_columns_df['TotalBsmtBath'] = numerical_columns_df['BsmtFullBath'] + numerical_columns_df['BsmtFullBath']*0.5\nnumerical_columns_df['TotalBath'] = numerical_columns_df['FullBath'] + numerical_columns_df['HalfBath']*0.5 \nnumerical_columns_df['TotalSA']=numerical_columns_df['TotalBsmtSF'] + numerical_columns_df['1stFlrSF'] + numerical_columns_df['2ndFlrSF']\n","895a3df6":"numerical_columns_df.head()","d622bcf5":"bin_map  = {'TA':2,'Gd':3, 'Fa':1,'Ex':4,'Po':1,'None':0,'Y':1,'N':0,'Reg':3,'IR1':2,'IR2':1,'IR3':0,\"None\" : 0,\n            \"No\" : 2, \"Mn\" : 2, \"Av\": 3,\"Gd\" : 4,\"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3,\"BLQ\" : 4, \"ALQ\" : 5, \"GLQ\" : 6\n            }\nobject_columns_df['ExterQual'] = object_columns_df['ExterQual'].map(bin_map)\nobject_columns_df['ExterCond'] = object_columns_df['ExterCond'].map(bin_map)\nobject_columns_df['BsmtCond'] = object_columns_df['BsmtCond'].map(bin_map)\nobject_columns_df['BsmtQual'] = object_columns_df['BsmtQual'].map(bin_map)\nobject_columns_df['HeatingQC'] = object_columns_df['HeatingQC'].map(bin_map)\nobject_columns_df['KitchenQual'] = object_columns_df['KitchenQual'].map(bin_map)\nobject_columns_df['FireplaceQu'] = object_columns_df['FireplaceQu'].map(bin_map)\nobject_columns_df['GarageQual'] = object_columns_df['GarageQual'].map(bin_map)\nobject_columns_df['GarageCond'] = object_columns_df['GarageCond'].map(bin_map)\nobject_columns_df['CentralAir'] = object_columns_df['CentralAir'].map(bin_map)\nobject_columns_df['LotShape'] = object_columns_df['LotShape'].map(bin_map)\nobject_columns_df['BsmtExposure'] = object_columns_df['BsmtExposure'].map(bin_map)\nobject_columns_df['BsmtFinType1'] = object_columns_df['BsmtFinType1'].map(bin_map)\nobject_columns_df['BsmtFinType2'] = object_columns_df['BsmtFinType2'].map(bin_map)\n\nPavedDrive =   {\"N\" : 0, \"P\" : 1, \"Y\" : 2}\nobject_columns_df['PavedDrive'] = object_columns_df['PavedDrive'].map(PavedDrive)\n\n","d3be96d3":"#Select categorical features\nrest_object_columns = object_columns_df.select_dtypes(include=['object'])\n#Using One hot encoder\nobject_columns_df = pd.get_dummies(object_columns_df, columns=rest_object_columns.columns) \n","3f5f5ce5":"object_columns_df.head()","d5f5427a":"df_final = pd.concat([object_columns_df, numerical_columns_df], axis=1,sort=False)\ndf_final.head()","584eee0b":"df_final.shape","af47475f":"df_final.columns","820ea3fd":"df_train = df_final.iloc[:1460,:]\n\ndf_test = df_final.iloc[1460:,:]\n\nprint(\"Shape of new dataframes - {} , {}\".format(df_train.shape, df_test.shape)) \n","789d05db":"target= df_train['SalePrice']\ndf_train = df_train.drop(['SalePrice'],axis=1)","fbf2bffb":"df_train.shape","38bf2b92":"df_test = df_test.drop(['SalePrice'],axis=1)\ndf_test.head()","99c8f679":"df_test.shape","e44bba47":"x_train,x_test,y_train,y_test = train_test_split(df_train,target,test_size=0.2,random_state=0)","3321db06":"\nxgb =XGBRegressor( booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=0.6, gamma=0,\n             importance_type='gain', learning_rate=0.01, max_delta_step=0,\n             max_depth=4, min_child_weight=1.5, n_estimators=2400,\n             n_jobs=1, nthread=None, objective='reg:linear',\n             reg_alpha=0.6, reg_lambda=0.6, scale_pos_weight=1, \n             silent=None, subsample=0.8, verbosity=1)\n\n\nlgbm = LGBMRegressor(objective='regression', \n                                       num_leaves=4,\n                                       learning_rate=0.01, \n                                       n_estimators=12000, \n                                       max_bin=200, \n                                       bagging_fraction=0.75,\n                                       bagging_freq=5, \n                                       bagging_seed=7,\n                                       feature_fraction=0.4, \n                                       )\n","a3603523":"#Fitting\nxgb.fit(x_train, y_train)\nlgbm.fit(x_train, y_train,eval_metric='rmse')\n","c2db47c1":"predict1 = xgb.predict(x_test)\npredict = lgbm.predict(x_test)\n","45513a4b":"print('Root Mean Square Error test = ' + str(math.sqrt(metrics.mean_squared_error(y_test, predict1))))\nprint('Root Mean Square Error test = ' + str(math.sqrt(metrics.mean_squared_error(y_test, predict))))\n","809a142e":"xgb.fit(df_train, target)\nlgbm.fit(df_train, target,eval_metric='rmse')\n","ec267cca":"predict4 = lgbm.predict(df_test)\npredict3 = xgb.predict(df_test)\npredict_y = ( predict3*0.575 + predict4 * 0.425)\n","b1a865a1":"submission = pd.DataFrame({\n        \"Id\": test[\"Id\"],\n        \"SalePrice\": predict_y\n    })\nsubmission.to_csv('submission.csv', index=False)\n\nprint ('Submission completed')\n","15890de2":"\n* <font color='gris'> Fitting With all the dataset <font>","2a806637":"House Prices: Data cleaning, visualization and modeling ","54bd00ed":"* <font color='gris'>  Getting information about train dataset <\/font>","1e03cfd9":"<font color='gris'>  Importing **train** and **test** datasets <\/font>","985f030e":"#  <font color='blue'> Modeling  <\/font>","716d52d3":"#  <font color='blue'> Data preprocessing <\/font>"}}