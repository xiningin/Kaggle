{"cell_type":{"a39a9f61":"code","ca3140f1":"code","4ecca4a9":"code","a5d4384a":"code","4a210f35":"code","58630c23":"code","3259c020":"code","ed730cde":"code","6d48d995":"code","d2db47f4":"code","0b2a218d":"markdown","8764fb26":"markdown","b9741fba":"markdown","ed4dcdac":"markdown","cb02a629":"markdown"},"source":{"a39a9f61":"import math # to import the math library which has most of the necessary math functions and operations","ca3140f1":"def wcb(x1,y1,x2,y2):\n    dx = x2 - x1 # to calculate the differences of X coordinates\n    dy = y2 - y1 # to calculate the differences of Y coordinates\n    \n    if dy == 0:\n        if dx > 0:\n            r = 90 # the angle is 90 degrees when coordinates of y (y1 & y2) are equal and dx>0 (the difference of the x coordinates)  \n        elif dx < 0:\n            r = 270 # the angle is 270 degrees when coordinates of y (y1 & y2) are equal and dx<0 (the difference of the x coordinates)\n  \n\n    if dx == 0:\n        if dy > 0:\n            r = 180 # the angle is 180 degrees when coordinates of x (x1 & x2) are equal and dy>0 (the difference of the y coordinates)\n        elif dy < 0:\n            r = 360 # the angle is 360 degrees when coordinates of x (x1 & x2) are equal and dy<0 (the difference of the y coordinates)\n            \n\n    else:\n    \n        r = math.degrees(math.atan(dy\/dx))# this is the equation to determine\/find the angle (math.atan = inverse tangent)\n\n\n        if dx<0 and dy>0:\n            r = r + 360 # 360 is added to the angle when dy is +ve and dx is -ve\n        elif dx<0 and dy<0:\n            r = r + 180 # 180 is added to the angle when both dy and dx are -ve\n        elif dx>0 and dy<0:\n            r = r + 180 # 180 is added to the angle when dy is -ve and dx is +ve                            # these are used in the code to determine which quadrant the angle is in\n        elif dx>0 and dy>0:\n            r = r + 0 # 0 is added when to the angle when both dy and dx are +ve\n        elif dx==0 and dy==0:\n            r = None # \"None\" will be printed out when both dy and dx equals zero\n    \n    \n        print(r)\n        r = r + 180 # this is to calculate the back bearing\n        if r > 360:\n            r = r - 360 # 360 will be deducted from the angle when it exceeds 360 degrees\n    \n    return r # to return the value of r\n","4ecca4a9":"print(wcb(6,1,5,6))\n# 1st test for dx<0 dy>0","a5d4384a":"print(wcb(5,5,1,1))\n# 2nd test for dx<0 dy<0","4a210f35":"print(wcb(1,5,5,1)) \n# 3rd test for dx>0 dy<0","58630c23":"print(wcb(1,1,5,5))\n# 4th test for dx>0 dy>0","3259c020":"print(wcb(1,1,5,1)) \n# 5th test for dy=0 dx>0","ed730cde":"print(wcb(5,1,1,1)) \n# 6th test for dy=0 dx<0","6d48d995":"print(wcb(5,5,5,11)) \n# 7th test for dy>0 dx=0","d2db47f4":"print(wcb(5,11,5,5)) \n# 8th test for dy<0 dx=0","0b2a218d":"In conclusion, this piece of code has been tested eight times and works fine.","8764fb26":"## I don't think it does work fine for all inputs. You actually return the back bearing not the bearing and only print the bearing.\n## Some inputs only print (or return) hard to tell - one output - (see 7th and 8th test).\n## The 8th test is a bearing of 180 but only 360 is printed\n## It is fine to add extras but need to complete the core task first correctly.\n## You SHOULD test against expected outputs and should include a summary table\n\n![image.png](attachment:bfc8a6cc-a2b7-4a5b-9e4a-9ecc046c9d80.png)\n\n## You don't really provide a convincing \"data story\" that clearly demonstrates that your code works for all inputs.","b9741fba":"## better to explain the function in text etc. and keep code comments brief\n\n<font size='+2' color='ff0000'>\n \n* We would customarily also include a function description as below\n\n<font size='+1' color='ffffff'>\n<code>\n    def bearing(x1, y1, x2, y2):\n        \"\"\"\n        Summary: calculates whole circle bearings between 0 ansd 360 degrees\n        ------------------\n        arguments:\n        x1: x value of the from coordinate\n        y1: y value of the y coordinate\n        x2: x value to the to coordinate\n        y2: y value of the to coordinate\n        ------------------\n        returns:\n        bearing in decimal degrees\n        ------------------\n        notes:\n        coordinates with matching x and y returns a bearing of 0\n        \"\"\"\n\n        #code here\n    <\/code>","ed4dcdac":"## You could explain what this is and where it is used and give us some context","cb02a629":"![Screenshot (2).png](attachment:ae84e769-0ee0-457e-8bc1-494aea6c4b2c.png)\n\nThis coursework is about writing a piece of code in python which outputs the correct whole circle bearing for any two sets of coordinates on the cartesian plane. It is then required to test this piece of code as evidence that the code works."}}