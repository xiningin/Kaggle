{"cell_type":{"f5aef840":"code","c8c66c46":"code","542feef8":"code","63595ab3":"code","69b6c4b4":"code","7992d22d":"code","eb451075":"code","69ff9916":"code","6e01d16c":"code","982eaa91":"code","2875b57b":"code","7ca4e608":"code","4cd75205":"code","dbd5b8e7":"code","32d787ab":"code","afb71088":"code","f7c61235":"code","22247a01":"code","cffecfdd":"code","659be28a":"code","c5e6b8d6":"code","1f348a23":"code","9391f0f6":"markdown","0755ff81":"markdown","6239d44c":"markdown","e0cb1f78":"markdown","712b6b39":"markdown","51426b5b":"markdown","e74254a5":"markdown","e3bcbeb4":"markdown","86e93cec":"markdown","c2964304":"markdown","d6ab9372":"markdown","4763776e":"markdown","4c77ce05":"markdown","6dfe1d7a":"markdown","6a8adf48":"markdown","42a299ae":"markdown","38e3eb27":"markdown","5fc5a4d1":"markdown","c4f9582f":"markdown","26ebbe57":"markdown","128d67a2":"markdown","22706bc6":"markdown","1ffb30c8":"markdown","2d0c4116":"markdown","1da883d5":"markdown","0002a72a":"markdown","08181e10":"markdown","0451526c":"markdown","7b43d495":"markdown","4578f396":"markdown","a11709ba":"markdown","e166f68c":"markdown","0a2e310d":"markdown"},"source":{"f5aef840":"#The library \"re\" supports regular expression\nimport re\n\nfrom IPython.display import Image\nimport os","c8c66c46":"sampletext_to_search = '''abcdefghijklmnopqurtuvwxyz\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n1234567890\n123abc\n\nHello HelloHello\n\nMetaCharacters (Need to be escaped):\n. ^ $ * + ? { } [ ] \\ | ( )\n\nutexas.edu\n \n821-545-4271 \n823.559.1938\n\ndaniel-mitchell@utexas.edu\n\nMr. Johnson\nMr Smith\nMs Davis\nMrs. Robinson\nMr. T '''","542feef8":"re.split('\\n',sampletext_to_search)","63595ab3":"#2.use \"finditer\" function to search the matching character just like the  pattern created in previous step.\nmatching_results = pattern_literal.finditer(sampletext_to_search)\n\n#3.print the results\nfor char in matching_results:\n    print(char)\n","69b6c4b4":"# cross verify the result by searching the index and see the results \nprint(sampletext_to_search[68:71])","7992d22d":"#create a pattern to find dot(.) character\npattern_specialchar = re.compile(r'.')\n\nmatching_results = pattern_specialchar.finditer(sampletext_to_search)\n\n#print the results\nfor char in matching_results:\n    print(char)\n","eb451075":"pattern_specialchar = re.compile(r'\\.')\n\nmatching_results = pattern_specialchar.finditer(sampletext_to_search)\n\n#print the results\nfor char in matching_results:\n    print(char)","69ff9916":"#lets find any number character.\n\n#set the pattern\npattern_anynum = re.compile(r'\\d')","6e01d16c":"#pass the entire text to pattern to find matching result\nmatching_results = pattern_anynum.finditer(sampletext_to_search)\n\n#print the results\nfor num in matching_results:\n    print(num)","982eaa91":"pattern_anyNumChar = re.compile(r'\\d\\w')\nmatching_results =  pattern_anyNumChar.finditer(sampletext_to_search)\n\n#print the results\nfor char in matching_results:\n    print(char)","2875b57b":"\n\n# Search_text: Hello HelloHello\npattern_wordboundry = re.compile(r'Hello\\b')\nmatching_results =  pattern_wordboundry.finditer(sampletext_to_search)\n\n#print the results\nfor char in matching_results:\n    print(char)","7ca4e608":"# Search_text: Hello HelloHello\npattern_wordboundry = re.compile(r'\\bHello\\b')\n\nmatching_results = pattern_wordboundry.finditer(sampletext_to_search)\n\n#print the results\nfor char in matching_results:\n    print(char)\n\n\n\n\n","4cd75205":"pattern_charset = re.compile(r'[13]')\n\nmatching_results = pattern_charset.finditer(sampletext_to_search)\n\nfor char in matching_results:\n    print(char)","dbd5b8e7":"pattern_charset = re.compile(r'[34]\\w')\n\nmatching_results = pattern_charset.finditer(sampletext_to_search)\n\nfor char in matching_results:\n    print(char)","32d787ab":"pattern_charset = re.compile(r'[a-z][a-z]')\n\nmatching_results = pattern_charset.finditer(sampletext_to_search)\n\nfor char in matching_results:\n    print(char)","afb71088":"pattern_charset = re.compile(r'[^a-z][^a-z]')\n\nmatching_results = pattern_charset.finditer(sampletext_to_search)\n\nfor char in matching_results:\n    print(char)","f7c61235":"pattern_charsetgrp = re.compile(r'(bcd|efg|ijkl)')\n\nmatching_results = pattern_charsetgrp.finditer(sampletext_to_search)\n\nfor char in matching_results:\n    print(char)","22247a01":"pattern_charsergrp = re.compile(r'([A-Z]|io)[a-z]')\n\nmatching_results = pattern_charsetgrp.finditer(sampletext_to_search)\n\nfor char in matching_results:\n    print(char)\n                                \n\n                                \n                                ","cffecfdd":"pattern_quantify = re.compile(r'Mr\\.?\\s[A-Z]')\n\nmatching_results = pattern_quantify.finditer(sampletext_to_search)\n\nfor char in matching_results:\n    print(char)","659be28a":"pattern_quantify = re.compile(r'M(s|rs)')\n\nmatching_results = pattern_quantify.finditer(sampletext_to_search)\n\nfor char in matching_results:\n    print(char)\n\n                              ","c5e6b8d6":"pattern_quantify = re.compile(r'\\d{3}[.-]\\d{4}')\n\nmatching_results = pattern_quantify.finditer(sampletext_to_search)\n\nfor char in matching_results:\n    print(char)","1f348a23":"pattern_email = re.compile(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+')\n\nmatching_results = pattern_email.finditer(sampletext_to_search)\n\nfor char in matching_results:\n    print(char)","9391f0f6":"* Note:\n    *     Regular expression will search Only [Non Overlapping character](http:\/\/pages.cs.wisc.edu\/~fischer\/cs536.f12\/lectures\/Lecture13.pdf)","0755ff81":"#Signature: re.compile(pattern, flags=0)\n#text need to search is 'abc'\n#here \"r\" is to consider only raw character\n\n#1.set the pattern\npattern_literal = re.compile(r'abc')","6239d44c":"# Need of Regex\n\n![Regex_Use.png](attachment:Regex_Use.png)","e0cb1f78":"* Split function will split the sentence into list of words","712b6b39":"* To find email address","51426b5b":"# Word boundary\n    * A word boundary is a position that is either preceded by a word character and not followed by one, or followed by a word character and not preceded by one","e74254a5":"*  Below pattern will search any  NOT lower case character followed by NOT lower case character using","e3bcbeb4":"# Any Number followed by Any Character","86e93cec":"# Searching literals","c2964304":"Character Groups used to find any sequence of character instead of individual character.","d6ab9372":"To find just the dot(.) character we need to escape like below","4763776e":"* Regular expressions is a concept used to search for patterns in string text.\n\n* This is a univerisal concept for any programming language. \n\n* The goal of regular expressions is to be able to search for a specific type of text inside of a string. If we have a form on our webpage where we ask for email addresses, can we check whether the inputted string actually follows the form of an email? some letters or numbers or special characters, then an @ sign then some more letters numbers or special characters then a . then a few more letters\n\nRef: [Introduction to Regex](https:\/\/scotch.io\/tutorials\/an-introduction-to-regex-in-python)","4c77ce05":"# Searching special characters\n*     Lets do the same for special characters","6dfe1d7a":"# List of Special Character\n* .(dot)       - Any Character Except New Line\n\n* \\d      - Digit (0-9)\n\n* \\D      - Not a Digit (0-9)\n\n* \\w      - Word Character (a-z, A-Z, 0-9, _)\n\n* \\W      - Not a Word Character\n\n* \\s      - Whitespace (space, tab, newline)\n\n* \\S      - Not Whitespace (space, tab, newline)\n\n\n* \\b      - Word Boundary\n\n* \\B      - Not a Word Boundary\n\n* ^       - Beginning of a String\n\n* $       - End of a String\n\n* []      - Matches Characters in brackets\n\n* [^ ]    - Matches Characters NOT in brackets\n\n* |       - Either Or\n\n* ( )     - Group\n\n\n**Quantifiers:**\n\n*  *- 0 or More\n\n+  +- 1 or More\n\n* ? - 0 or One\n\n* {3} - Exact Number\n\n* {3,4} - Range of Numbers (Minimum, Maximum)","6a8adf48":"* below pattern will search and return any 3 or 4 followed by word character","42a299ae":"* Lets search for phone number below","38e3eb27":"# Character groups","5fc5a4d1":"# Split Function","c4f9582f":"\n* Note: \n    * Above result notice the \"span\" where its tells the index location of the matching result.\n    * Regilar Expressions are Case Sensitive and Order Sensitive  ","26ebbe57":"# Regular Expressions","128d67a2":"* Character set will search any characher inside the pattern which is mentioned in square bracket.\n* Below pattern will look for any character 1 or 3.\n","22706bc6":"* first will create a pattern using complie function","1ffb30c8":"* apply word boundry on right side of the \"Hello\" word","2d0c4116":"# Character sets   ","1da883d5":"![](https:\/\/images.unsplash.com\/photo-1517694712202-14dd9538aa97?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=750&q=80)","0002a72a":"# Search the matching character","08181e10":"now trying to find the matching pattern\/character using \"finditer\" method which is sits inside the pattern object","0451526c":"* now apply word boundry on right side and Left side of the \"Hello\" word","7b43d495":"* now will search any lower case character followed by lower case character using below pattern","4578f396":"* Note:\n    * Results having dot character and other character as well , but why ?\n    * Because dot(.) is a special character where dot(.) will do - any character after new line . so its returning all character after new line here.    ","a11709ba":"* below is the sample text which is used here.","e166f68c":"Combination of Character Group and Character Set","0a2e310d":"# Quantifiers\n\nQuantifiers:\n1. *       - 0 or More\n\n1. +       - 1 or More\n\n1. ?       - 0 or One\n\n1. {3}     - Exact Number\n \n1. {3,4}   - Range of Numbers (Minimum, Maximum)\n"}}