{"cell_type":{"489b9809":"code","d9fcafe9":"code","f4ae4433":"code","6ab8d0b2":"code","11ba6cbf":"code","168efccf":"code","e77cbf32":"code","88108b22":"code","5a9b7ddb":"code","b078a6d0":"code","4334bd81":"code","82b16d50":"code","d9e7b3c5":"code","1895bf40":"code","f71e5d80":"code","ad6b8973":"code","58dfd12a":"code","01754a7b":"code","41a7bf38":"code","fa258334":"code","453e5659":"code","7cbd616f":"code","0fc0ad00":"code","e83df122":"code","e4060c2a":"markdown","e5e2d9e1":"markdown","cf6320ef":"markdown","30055339":"markdown","a4bb61d9":"markdown","e96e551f":"markdown","f03426a5":"markdown","f4ef7192":"markdown","c9a93ffe":"markdown"},"source":{"489b9809":"pip install catboost","d9fcafe9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport itertools   \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom catboost import CatBoostRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import StandardScaler\n%matplotlib inline\n","f4ae4433":"df=pd.read_csv('..\/input\/insurance\/insurance.csv')","6ab8d0b2":"df.head()","11ba6cbf":"df.info()","168efccf":"df.describe()","e77cbf32":"df.isnull().sum()","88108b22":"print(\"The unique values of categorical variables are\")\nprint(df['sex'].value_counts())\nprint()\nprint(df['children'].value_counts())\nprint()\nprint(df['region'].value_counts())\nprint()\nprint(df['smoker'].value_counts())","5a9b7ddb":"sns.pairplot(df)","b078a6d0":"df.corr()","4334bd81":"sns.heatmap(data=df.corr(), cmap='coolwarm')","82b16d50":"sns.displot(df.loc[:,:\"region\"])","d9e7b3c5":"# Box plot for Categorical columns\nplt.figure(figsize=(20,20))\nplt.subplot(4,2,1)\nsns.boxplot(x=\"region\",y=\"charges\",data=df)\nplt.subplot(4,2,2)\nsns.boxplot(x=\"smoker\",y=\"charges\",data=df)\nplt.subplot(4,2,3)\nsns.boxplot(x=\"sex\",y=\"charges\",data=df)\nplt.subplot(4,2,4)\nsns.boxplot(x=\"children\",y=\"charges\",data=df)\n","1895bf40":"#reducing the outliers\ndf[[\"charges\"]]= np.log10(df[[\"charges\"]])\n","f71e5d80":"#checking outliers\nplt.figure(figsize=(20,20))\nplt.subplot(4,2,1)\nsns.boxplot(x=\"region\",y=\"charges\",data=df)\nplt.subplot(4,2,2)\nsns.boxplot(x=\"smoker\",y=\"charges\",data=df)\nplt.subplot(4,2,3)\nsns.boxplot(x=\"sex\",y=\"charges\",data=df)\nplt.subplot(4,2,4)\nsns.boxplot(x=\"children\",y=\"charges\",data=df)","ad6b8973":"#function that will change  bmi to a category\ndef weightCondition(bmi):\n  if bmi<18.5:\n    return \"Underweight\"\n  elif (bmi>= 18.5)&(bmi< 24.986):\n    return \"Normal\"\n  elif (bmi >= 25) & (bmi < 29.926):\n    return \"Overweight\"\n  else:\n    return \"Obese\"\n","58dfd12a":"#adding weight condition to the dataFrame\ndf[\"weight_Condition\"]=[weightCondition(val) for val in df[\"bmi\"] ]\ndf.head(5)","01754a7b":"#List of categorical variables\ncategorical = [\"sex\",\"children\",\"smoker\",\"region\",\"weight_Condition\"]\n#Converting data types to categorical datatypes\ndf[categorical] = df[categorical].apply(lambda x: x.astype(\"category\"), axis = 0)\n#Creating dummy variables on the dataFrame\ndf = pd.get_dummies(data = df, columns = categorical, drop_first =True)\ndf.head()","41a7bf38":"#extracting X and y for the model \nX = df.drop('charges', axis =1)\ny=df[[\"charges\"]]\n# split the data to train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)\nX_train.head()","fa258334":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","453e5659":"#Instatiating model\nlr= LinearRegression()\n#Fitting\nlr.fit(X_train,y_train)\n# Predicting \npredictions=lr.predict(X_test)\n#original predictions values\noriginal_predictions=(10**predictions)\nprint(\"original value of charges predictions: \", original_predictions)","7cbd616f":"# Evaluate  accuracy on the test set\nprint('Mean squared error: %.2f'\n      % mean_squared_error(y_test, predictions))\n\nprint('Coefficient of determination: %.2f'\n      % (r2_score(y_test, predictions)*100)+'%')","0fc0ad00":"#Instatiating model\ncb = CatBoostRegressor(random_state=42)\n#Fitting\ncb.fit(X_train,y_train,use_best_model=True,eval_set=(X_test,y_test),early_stopping_rounds=30)\n# Predicting \ncb_pred = cb.predict(X_test)","e83df122":"# Evaluate  accuracy on the test set\nprint('Mean squared error: %.2f'\n      % mean_squared_error(y_test,cb_pred))\n\nprint('Coefficient of determination: %.2f'\n      % (r2_score(y_test,cb_pred)*100)+'%')","e4060c2a":"# Importing dataset","e5e2d9e1":"Label Encoding","cf6320ef":"# Exploratory Data Analysis","30055339":"# Importing Libraries","a4bb61d9":"# Linear Regression","e96e551f":"# Inspecting data","f03426a5":"Scaling","f4ef7192":"\n# Data Preprocessing\n","c9a93ffe":"# CatBoost Regression"}}