{"cell_type":{"0fe28991":"code","98ee5283":"code","5c0e1d36":"code","a7af1298":"code","b0e61e8c":"code","6b5eb88e":"code","9e9a5320":"markdown","97c03ee1":"markdown"},"source":{"0fe28991":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt","98ee5283":"path = \"kaggle\/input\/\"\nsignalData = pd.read_csv(path+\"bjet_train.csv\") # signal has mc_flavour = 5\nbackgroundData = pd.concat([pd.read_csv(path+\"cjet_train.csv\"), \n                            pd.read_csv(path+\"ljet_train.csv\")]) # background has mc_flavour != 5\n\nsignalData['nTrkRatio'] = signalData['nTrk']\/signalData['nTrkJet']\nbackgroundData['nTrkRatio'] = backgroundData['nTrk']\/backgroundData['nTrkJet']\nsignalData['mRatio'] = signalData['mCor']\/signalData['m']\nbackgroundData['mRatio'] = backgroundData['mCor']\/backgroundData['m']\nsignalData['mCorSig'] = signalData['mCor']\/signalData['mCorErr']\nbackgroundData['mCorSig'] = backgroundData['mCor']\/backgroundData['mCorErr']","5c0e1d36":"# Try fdChi2 as log10, others as linear\ntoLogCol = ['fdChi2', 'PT', 'nTrk', 'nTrkJet']\nlinCol = ['ETA', 'drSvrJet', 'fdrMin', \n          'm', 'mCor', 'mCorErr', 'pt', 'ptSvrJet',\n          'tau', 'ipChi2Sum'] # Note skip Id as that is not helpful\n\nlogCol = []\nfor l in toLogCol:\n    logCol.append('log_'+l)\n    signalData['log_'+l] = np.log10(signalData[l])\n    backgroundData['log_'+l] = np.log10(backgroundData[l])\n\n    \nX = np.concatenate([signalData[logCol+linCol].values,\n                         backgroundData[logCol+linCol].values])\ny = np.concatenate([(signalData[\"mc_flavour\"]==5).values.astype(np.int),\n                         (backgroundData[\"mc_flavour\"]==5).values.astype(np.int)])\n\np = np.random.permutation(len(X))\nX = X[p]\ny = y[p]","a7af1298":"from sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nimport sklearn.preprocessing\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.01)\n\n\nqt = sklearn.preprocessing.QuantileTransformer(n_quantiles=10)\nX_train = qt.fit_transform(X_train)\nX_test = qt.transform(X_test)","b0e61e8c":"import sklearn.ensemble\n\n# Parameters were found using random search\nbest_params = {'n_estimators': 800, 'min_samples_split': 5, 'min_samples_leaf': 1, 'max_features': 'auto', 'max_depth': 89, 'bootstrap': True}\nclf = sklearn.ensemble.RandomForestClassifier(**best_params, n_jobs=-1, class_weight='balanced')\n\nclf.fit(X_train, y_train)\npred = clf.predict(X_test)\nprint(accuracy_score(y_test, pred))","6b5eb88e":"testData = pd.read_csv(path+\"competitionData.csv\")\n\ntestData['nTrkRatio'] = testData['nTrk']\/testData['nTrkJet']\ntestData['mRatio'] = testData['mCor']\/testData['m']\ntestData['mCorSig'] = testData['mCor']\/testData['mCorErr']\n## Transform data\n\nlogCol = []\nfor l in toLogCol:\n    logCol.append('log_'+l)\n    testData['log_'+l] = np.log10(testData[l])\nx_comp = testData[logCol+linCol].values\n\nx_comp = qt.transform(x_comp)\n\npredMCFloat = clf.predict(x_comp)\npredMC = (predMCFloat>0.5).astype(np.int)\ntestData[\"Prediction1\"] = predMC\n\n# solution to submit\ndisplay(testData[[\"Id\",\"Prediction1\"]]) # display 5 rows\n# write to a csv file for submission\ntestData.to_csv(\"submit.csv.gz\",index=False,columns=[\"Id\",\"Prediction1\"],compression=\"gzip\") # Output a compressed csv file for submission: see \/kaggle\/working to the right","9e9a5320":"## Do some input processing and put data into a numpy array for use in Keras","97c03ee1":"# Now load data for the competition"}}