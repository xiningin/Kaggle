{"cell_type":{"7c2ad508":"code","8db58947":"code","49ef0420":"code","24370698":"code","dc720feb":"code","050f1c1c":"code","039ebab6":"code","f0ddb722":"code","d2ef1fee":"code","323ccf90":"code","377b77d3":"code","3d20f170":"code","a2422c09":"code","b14ff66a":"code","7ac572e3":"code","ec82fabd":"code","68974906":"code","c5d129dc":"code","f4ceed0a":"code","6e575225":"code","df3f9293":"code","fbffd116":"code","1af73b6f":"code","8f763835":"code","2d46a1ee":"code","e6169f5a":"code","289cbafd":"code","3add4dbf":"code","1b656e7c":"code","b47233d6":"code","1f347208":"code","90473ca5":"code","73eb852b":"code","ec4c694a":"code","b3fb6668":"code","46749f3f":"code","6ee3b6be":"code","9ed9a5a5":"code","a0d8f038":"code","42e516bd":"code","b49d645b":"code","7034650a":"code","7e0a05ed":"code","f1358253":"code","69794eb9":"code","ab7eb946":"code","640d583d":"code","04abf15b":"code","c1d91856":"code","08923479":"code","725c9db1":"code","f0cfdf72":"code","f8098e52":"code","5e3e508c":"code","5d07ce7b":"code","ef01a345":"code","3c797611":"code","4c0d301a":"markdown","a119ce32":"markdown","27f8de6d":"markdown","4f374330":"markdown","671174e2":"markdown","44ea410f":"markdown","bbc63ff1":"markdown","8356d96e":"markdown","802d209f":"markdown","6eb705ac":"markdown","e1ed8ba6":"markdown","a895889b":"markdown","c9d1a536":"markdown"},"source":{"7c2ad508":"import pandas as pd\nimport numpy\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n","8db58947":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest  = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain.head()","49ef0420":"test.head()","24370698":"train.describe(include='all')","dc720feb":"train.dtypes","050f1c1c":"train.isnull().sum().to_frame()","039ebab6":"# display(train.isnull().sum())\n# train[\"Embarked\"].value_counts()\ntrain[\"Age\"].replace(numpy.nan,train[\"Age\"].mean(),inplace=True)\ntrain[\"Embarked\"].replace(numpy.nan,\"S\",inplace=True) # As S is most occuring so nan is replaced by \"S\"\n# train.isnull().sum()","f0ddb722":"plt.figure(figsize = (28,7))\nsns.countplot(train[\"Age\"])","d2ef1fee":"display(train[\"Survived\"].value_counts().to_frame())\nsns.countplot(train[\"Survived\"])","323ccf90":"display(train[\"Pclass\"].value_counts().to_frame())\nsns.countplot(train[\"Pclass\"])","377b77d3":"display(train[\"Sex\"].value_counts().to_frame())\nsns.countplot(train[\"Sex\"])","3d20f170":"display(train[\"SibSp\"].value_counts().to_frame())\nsns.countplot(train[\"SibSp\"])\npx.pie(train,\"SibSp\")","a2422c09":"display(train[\"Parch\"].value_counts().to_frame())\n# sns.countplot(train[\"Parch\"])\npx.pie(train,\"Parch\")","b14ff66a":"display(train[\"Embarked\"].value_counts().to_frame())\nsns.countplot(train[\"Embarked\"])","7ac572e3":"bins = numpy.linspace(train[\"Age\"].min() , train[\"Age\"].max(),  4)\nNames = [\"Young\", \"Middle-Age\",\"Elderly\"]\ntrain[\"BinnedAge\"] = pd.cut(train[\"Age\"], bins,labels = Names, include_lowest=True)\n# train.head()\n\ndisplay(train[\"BinnedAge\"].value_counts().to_frame())\npx.pie(train,\"BinnedAge\")","ec82fabd":"train.loc[pd.isnull(train[\"Cabin\"]), \"Had Cabin\"] = \"No\"\ntrain[\"Had Cabin\"].replace(numpy.nan, \"Yes\", inplace=True)","68974906":"display(train[\"Had Cabin\"].value_counts().to_frame())\nsns.countplot(train[\"Had Cabin\"])","c5d129dc":"binsFare=numpy.linspace(min(train[\"Fare\"]), max(train[\"Fare\"]), 4)\nNameFares = [\"Low Fare\", \"Moderate\", \"Expensive\"]\ntrain[\"BinnedFare\"] = pd.cut(train[\"Fare\"], binsFare,labels = NameFares, include_lowest=True)\n\ndisplay(train[\"BinnedFare\"].value_counts().to_frame())\nsns.countplot(train[\"BinnedFare\"])","f4ceed0a":"p1 = px.violin(train, \"Survived\",\"Age\", color=\"Sex\", box=True, points=\"all\", hover_data=train.columns)\np2 = px.violin(train, \"Sex\",\"Age\", color=\"Survived\", box=True, points=\"all\", hover_data=train.columns)\np1.show()\np2.show()","6e575225":"plt.figure(figsize = (24,8))\nplt.plot(train[[\"Age\",\"Survived\"]].groupby([\"Age\"]).mean())","df3f9293":"display(train[[\"Sex\",\"Survived\"]].groupby([\"Sex\"]).mean())\npx.bar(train,\"Sex\",\"Survived\")","fbffd116":"display(train[[\"BinnedAge\",\"Survived\"]].groupby([\"BinnedAge\"]).mean()   ,   train[[\"BinnedAge\",\"Sex\",\"Survived\"]].groupby([\"BinnedAge\",\"Sex\"]).mean())\npx.bar(train,\"BinnedAge\", \"Survived\", color = \"Sex\",barmode=\"group\")","1af73b6f":"display(train[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"]).mean()   ,   train[[\"Pclass\",\"Sex\",\"Survived\"]].groupby([\"Pclass\",\"Sex\"]).mean())\npx.bar(train,\"Pclass\",\"Survived\",color=\"Sex\")","8f763835":"display(train[[\"Embarked\",\"Survived\"]].groupby([\"Embarked\"]).mean()   ,   train[[\"Embarked\",\"Sex\",\"Survived\"]].groupby([\"Embarked\",\"Sex\"]).mean())\npx.bar(train,\"Embarked\",\"Survived\",color=\"Sex\",barmode=\"group\")","2d46a1ee":"display(train[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"]).mean()   ,   train[[\"SibSp\",\"Sex\",\"Survived\"]].groupby([\"SibSp\",\"Sex\"]).mean())\npx.bar(train,\"SibSp\",\"Survived\",color = \"Sex\",barmode=\"group\")","e6169f5a":"display(train[[\"Parch\",\"Survived\"]].groupby([\"Parch\"]).mean()  ,  train[[\"Parch\",\"Sex\",\"Survived\"]].groupby([\"Parch\",\"Sex\"]).mean())\npx.bar(train,\"Parch\",\"Survived\",color=\"Sex\",barmode=\"group\")","289cbafd":"display(train[[\"Had Cabin\",\"Survived\"]].groupby([\"Had Cabin\"]).mean()  ,  train[[\"Had Cabin\",\"Sex\",\"Survived\"]].groupby([\"Had Cabin\",\"Sex\"]).mean())\npx.bar(train,\"Had Cabin\",\"Survived\",color=\"Sex\",barmode=\"group\")","3add4dbf":"display(train[[\"BinnedFare\",\"Survived\"]].groupby([\"BinnedFare\"]).mean()  ,  train[[\"BinnedFare\",\"Sex\",\"Survived\"]].groupby([\"BinnedFare\",\"Sex\"]).mean())\npx.bar(train, \"BinnedFare\",\"Survived\",color=\"Sex\",barmode=\"group\")","1b656e7c":"px.box(train,\"Embarked\",\"Fare\")","b47233d6":"px.box(train,\"Survived\",\"Age\",color=\"Sex\")","1f347208":"plt.figure(figsize = (20,9))\nsns.boxplot(\"SibSp\",\"Age\",data=train)","90473ca5":"plt.figure(figsize = (14,9))\nsns.boxplot(\"Embarked\",\"Parch\",data=train)","73eb852b":"px.box(train,\"Survived\",\"Fare\")","ec4c694a":"testg = train[[\"Sex\",\"Embarked\",\"Pclass\",\"Survived\"]]\nGroup = testg.groupby([\"Sex\",\"Embarked\",\"Pclass\"],as_index=False).mean()\nGroup","b3fb6668":"train.head()","46749f3f":"train.loc[train[\"Sex\"] == \"male\" , \"01Sex\"] = 0\ntrain.loc[train[\"Sex\"] == \"female\" , \"01Sex\"] = 1\n\ntrain.loc[train[\"Embarked\"] == \"S\" , \"123Embarked\"] = 1\ntrain.loc[train[\"Embarked\"] == \"C\" , \"123Embarked\"] = 2\ntrain.loc[train[\"Embarked\"] == \"Q\" , \"123Embarked\"] = 3\n\ntrain.loc[train[\"Had Cabin\"] == \"Yes\" , \"01 Had Cabin\"] = 1\ntrain.loc[train[\"Had Cabin\"] == \"No\" , \"01 Had Cabin\"] = 0\n\n\ntrain.loc[train[\"BinnedFare\"] == \"Low Fare\" , \"123BinnedFare\"] = 1\ntrain.loc[train[\"BinnedFare\"] == \"Moderate\" , \"123BinnedFare\"] = 2\ntrain.loc[train[\"BinnedFare\"] == \"Expensive\" , \"123BinnedFare\"] = 3\n\n# \ntrain.head()","6ee3b6be":"plt.figure(figsize = (14,10))\ntestg = pd.DataFrame(train[[\"01Sex\",\"123Embarked\",\"Pclass\",\"Survived\"]])\nsns.heatmap(testg.corr(),annot=True)","9ed9a5a5":"train.loc[train[\"BinnedAge\"] == \"Young\" , \"123BinnedAge\"] = 1\ntrain.loc[train[\"BinnedAge\"] == \"Middle-Age\" , \"123BinnedAge\"] = 2\ntrain.loc[train[\"BinnedAge\"] == \"Elderly\" , \"123BinnedAge\"] = 3\ntrain.head()","a0d8f038":"display(train.corr())\nplt.figure(figsize = (24,12))\nsns.heatmap(train.corr(),annot=True)","42e516bd":"from sklearn.linear_model import LinearRegression \nfrom sklearn.pipeline import Pipeline \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\ntrain.head()","b49d645b":"x = train[[\"Pclass\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"01Sex\",\"123Embarked\",\"123BinnedAge\", \"01 Had Cabin\",\"123BinnedFare\"]]\ny = train[\"Survived\"]\nx.describe()\n\nTrainX, TestX, TrainY, TestY = train_test_split(x,y,test_size=0.10,random_state=0)","7034650a":"lr = LinearRegression()\nlr.fit(TrainX,TrainY)\n# lr.fit(x,y)\nprint(\"Rsquared Score for Linear Regression Model = \", lr.score(TestX,TestY))","7e0a05ed":"RsqTest = []\norder = numpy.arange(1,7,1)\n\nfor n in order:\n    pr = PolynomialFeatures(degree = n )\n    Scale = StandardScaler()\n    TrainXTrans = pr.fit_transform(TrainX) \n    TestXTrans = pr.fit_transform(TestX)\n    \n    \n    lr.fit(TrainXTrans,TrainY)\n    RsqTest.append(lr.score(TestXTrans,TestY))\n        \ndisplay(RsqTest)","f1358253":"input = [[\"Scale\",StandardScaler()],[\"Poly\",PolynomialFeatures(degree=3)],[\"lr\",LinearRegression()]]\nPipe = Pipeline(input)\n\n# Pipe.fit(TrainX,TrainY)\nPipe.fit(x,y)\n\nPipe.score(TestX,TestY)","69794eb9":"RidgeModel = Ridge(alpha=0.000000001)\nRidgeModel.fit(TrainX,TrainY)\n# RidgeModel.fit(x,y)\n\nRidgeModel.score(TestX,TestY)","ab7eb946":"\n\nRsqTrain2 = []\nRsqTest2 = []\n\nALFA = [0.000000001,0.00001,0.0001,0.001,0.01,0.1,1,10,100,1000,10000,100000,1000000,10000000]\n\nfor m in ALFA:\n    RidgeModel1 = Ridge(alpha=m)\n    \n#     RidgeModel1.fit(TrainX,TrainY)\n    RidgeModel1.fit(x,y)\n    \n    RsqTest2.append(RidgeModel1.score(TestX,TestY))\n    RsqTrain2.append(RidgeModel1.score(TrainX,TrainY))\n\ndisplay(RsqTest2) \n# display(RsqTrain2)\n# plt.plot(RsqTest2)\n\n","640d583d":"from sklearn.model_selection import GridSearchCV\nparameters = ({\"alpha\" : [0.000000001,0.00001,0.0001,0.001,0.01,0.1,1,10,100,1000,10000,100000,1000000,10000000]})\nRR = Ridge()\nGrid = GridSearchCV(RR,parameters,cv=11)\nGrid.fit(TestX,TestY)\n# Grid.fit(x,y)\nGrid.best_estimator_\nScr = Grid.cv_results_\nScr[\"mean_test_score\"]","04abf15b":"test.head()\ntest.isnull().sum()\ntest[\"Fare\"].replace(numpy.nan,test[\"Fare\"].mean(),inplace=True)\ntest[\"Age\"].replace(numpy.nan,test[\"Age\"].mean(),inplace=True)\ntest.isnull().sum()","c1d91856":"test.loc[test[\"Sex\"] == \"male\" , \"01Sex\"] = 0\ntest.loc[test[\"Sex\"] == \"female\" , \"01Sex\"] = 1\n\ntest.loc[test[\"Embarked\"] == \"S\" , \"123Embarked\"] = 1\ntest.loc[test[\"Embarked\"] == \"C\" , \"123Embarked\"] = 2\ntest.loc[test[\"Embarked\"] == \"Q\" , \"123Embarked\"] = 3\n\nbinsTEST = numpy.linspace(test[\"Age\"].min() , test[\"Age\"].max(),  4)\nNamesTEST = [\"Young\", \"Middle-Age\",\"Elderly\"]\ntest[\"BinnedAge\"] = pd.cut(test[\"Age\"], binsTEST,labels = NamesTEST, include_lowest=True)\n\ntest.loc[test[\"BinnedAge\"] == \"Young\" , \"123BinnedAge\"] = 1\ntest.loc[test[\"BinnedAge\"] == \"Middle-Age\" , \"123BinnedAge\"] = 2\ntest.loc[test[\"BinnedAge\"] == \"Elderly\" , \"123BinnedAge\"] = 3\n\ntest.loc[pd.isnull(test[\"Cabin\"]), \"Had Cabin\"] = \"No\"\ntest[\"Had Cabin\"].replace(numpy.nan, \"Yes\", inplace=True)\n\ntest.loc[test[\"Had Cabin\"] == \"Yes\" , \"01 Had Cabin\"] = 1\ntest.loc[test[\"Had Cabin\"] == \"No\" , \"01 Had Cabin\"] = 0\n\nbinsFare=numpy.linspace(min(test[\"Fare\"]), max(test[\"Fare\"]), 4)\nNameFares = [\"Low Fare\", \"Moderate\", \"Expensive\"]\ntest[\"BinnedFare\"] = pd.cut(test[\"Fare\"], binsFare,labels = NameFares, include_lowest=True)\ntest.loc[test[\"BinnedFare\"] == \"Low Fare\" , \"123BinnedFare\"] = 1\ntest.loc[test[\"BinnedFare\"] == \"Moderate\" , \"123BinnedFare\"] = 2\ntest.loc[test[\"BinnedFare\"] == \"Expensive\" , \"123BinnedFare\"] = 3\n\ntest.head()","08923479":"TestFeatures = test[[\"Pclass\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"01Sex\",\"123Embarked\",\"123BinnedAge\", \"01 Had Cabin\",\"123BinnedFare\"]]","725c9db1":"input = [[\"Scale\",StandardScaler()],[\"Poly\",PolynomialFeatures(degree=3)],[\"lr\",LinearRegression()]]\nPipe = Pipeline(input)\nPipe.fit(x,y)","f0cfdf72":"Y = numpy.array(Pipe.predict(TestFeatures))\n# Y = Y.reshape(418,1)\n# Finaldf = test[\"PassengerId\"].to_frame()\n\ndata = {\"PassengerId\":test[\"PassengerId\"], \"Surv\":Y}\ndf = pd.DataFrame(data)\n# data\ndf","f8098e52":"df[\"Surv\"].describe().to_frame()","5e3e508c":"df.loc[df[\"Surv\"] < 0.50, \"Survived\"] = 0\ndf.loc[df[\"Surv\"] >=0.50, \"Survived\"] = 1\n\ndf[\"Survived\"] = df[\"Survived\"].astype(\"int64\")\ndf.head(11)","5d07ce7b":"df.drop(\"Surv\",axis=1,inplace = True)","ef01a345":"df","3c797611":"df.to_csv(\".\/Titanic-Final.csv\", index = False)","4c0d301a":"# Variable Description\n    *     PassengerId: unique id number for passanger\n    *     Survived: passenger survived or not\n    *     Pclass: passenger class\n    *     Name: name\n    *     Sex: gender of passenger\n    *     Age: age of passenger\n    *     SibSp: number of siblings\/spouses\n    *     Parch: number of parents\/children\n    *     Ticket: ticket number\n    *     Fare: amount of money for ticket\n    *     Cabin: cabin category\n    *     Embarked: port where passenger boarded Titanic (C = Cherbourg, Q = Queenstown, S = Southampton)\n","a119ce32":"Making Test data Consistent to train Data","27f8de6d":"**Handling NaN Values**","4f374330":"* C = Cherbourg\n* Q = Queenstown\n* S = Southampton","671174e2":"* 0 : Died\n* 1 : Survived","44ea410f":"Now Cheching for Outliers","bbc63ff1":"# Exploratory Data Analysis","8356d96e":"**Converting Catg. to num For:**\n\n* Sex,\n* Embarked and\n* Had cabin","802d209f":"# Basic Analysis and Visulazations","6eb705ac":"Handling Missing Values","e1ed8ba6":"1. 1. Creating new column named \"had cabin\" Tells id a person had a cabin","a895889b":"# Modelling","c9d1a536":"**Unique Values : **"}}