{"cell_type":{"eaa9709a":"code","c0132c6d":"code","80e5754c":"code","9f92725a":"code","00c1845f":"code","7edb1bc4":"code","16309675":"code","406e69c8":"code","675b2585":"code","cdb76074":"code","0a55735a":"code","0855efe8":"code","932db1c5":"code","22184e7f":"code","95fbf70b":"code","b949b024":"markdown","1d4ba9da":"markdown","c63d6bdb":"markdown","1791888b":"markdown","e1bb125c":"markdown","3ceb59e6":"markdown","25af1d5f":"markdown","bfe8ac1f":"markdown","175e56a8":"markdown","5348292a":"markdown","c2de8f8f":"markdown"},"source":{"eaa9709a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nfrom iso3166 import countries\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0132c6d":"medals_path = '\/kaggle\/input\/tokyo-2020-paralympics\/medals.csv'\nmedals_total_path = '\/kaggle\/input\/tokyo-2020-paralympics\/medals_total.csv'\nathletes_path = '\/kaggle\/input\/tokyo-2020-paralympics\/athletes.csv'\ncoaches_path = '\/kaggle\/input\/tokyo-2020-paralympics\/coaches.csv'\nofficials_path = '\/kaggle\/input\/tokyo-2020-paralympics\/technical_officials.csv'","80e5754c":"df_athletes = pd.read_csv(athletes_path)\nprint(df_athletes.shape)\ndf_athletes.head(10)","9f92725a":"df_coaches = pd.read_csv(coaches_path)\nprint(df_coaches.shape)\ndf_coaches.head(10)","00c1845f":"df_officials = pd.read_csv(officials_path)\nprint(df_officials.shape)\ndf_officials.head(10)","7edb1bc4":"country_short_name_map = {\n    \"People's Republic of China\":'China',\n    'United States of America':'USA',\n    'Czech Republic':'Czechia',\n    'Islamic Republic of Iran':'Iran',\n    'Republic of Korea': 'South Korea',\n    'Hong Kong, China':'Hong Kong',\n    'United Arab Emirates': 'UAE',\n    'Chinese Taipei':'Taiwan'}","16309675":"df_medals_total = pd.read_csv(medals_total_path)\nprint(df_medals_total.shape)\ndf_medals_total = df_medals_total.rename(columns={'Gold Medal':'Gold', 'Silver Medal':'Silver', 'Bronze Medal':'Bronze'})\ndf_medals_total['Country'] = df_medals_total['Country'].replace(country_short_name_map)\ndf_medals_total.drop(['Country Code'], axis=1, inplace=True)\ndf_medals_total.head(10)","406e69c8":"df_medals = pd.read_csv(medals_path)\nprint(df_medals.shape)\ndf_medals.head(10)","675b2585":"athlete_country_map = dict(zip(df_medals['athlete_name'], df_medals['country']))\n# print(athlete_country_map['BATE Stephen'])\nathlete_dis_map = dict(zip(df_medals['athlete_name'], df_medals['discipline']))\n# print(athlete_dis_map['BATE Stephen'])\nathlete_dis_code_map = dict(zip(df_medals['athlete_name'], df_medals['discipline_code']))\n# print(athlete_dis_code_map['BATE Stephen'])\n\ncountry_iso_map = {\n    'Great Britain':'United Kingdom of Great Britain and Northern Ireland',\n    \"People's Republic of China\":'China',\n    'Venezuela':'Venezuela, Bolivarian Republic of',\n    'Czech Republic':'Czechia',\n    'Islamic Republic of Iran':'Iran, Islamic Republic of',\n    'Republic of Korea': 'Korea, Republic of',\n    'Hong Kong, China':'Hong Kong',\n    'Vietnam': 'Viet Nam',\n    'Chinese Taipei':'Taiwan, Province of China'}","cdb76074":"df_medals_athlete = df_medals.pivot_table('medal_code', 'athlete_name', 'medal_type', 'count').fillna(0).astype(int)\ndf_medals_athlete = df_medals_athlete[['Gold Medal', 'Silver Medal', 'Bronze Medal']]\n\ndf_medals_athlete['Total'] = df_medals_athlete.sum(axis=1)\ndf_medals_athlete['G+S'] = df_medals_athlete['Gold Medal']+ df_medals_athlete['Silver Medal']\ndf_medals_athlete['B+S'] = df_medals_athlete['Bronze Medal']+ df_medals_athlete['Silver Medal']\n\ndf_medals_athlete = df_medals_athlete.reset_index().sort_values(['Total', 'Gold Medal', 'Silver Medal', 'Bronze Medal'], \n                                                                 ascending=[False, False, False, False])\ndf_medals_athlete = df_medals_athlete.rename(columns={'athlete_name':'Athlete Name', \n                                                      'Gold Medal':'Gold', 'Silver Medal':'Silver', 'Bronze Medal':'Bronze'})\ndf_medals_athlete['Country'] = df_medals_athlete['Athlete Name'].replace(athlete_country_map)\ndf_medals_athlete['Country ISO'] = df_medals_athlete['Country'].replace(country_iso_map)\\\n                                            .apply(lambda x: countries.get(x).alpha2.lower() if x!='RPC' else '_olympic')\ndf_medals_athlete['Country'] = df_medals_athlete['Country'].replace(country_short_name_map)\ndf_medals_athlete['Discipline'] = df_medals_athlete['Athlete Name'].replace(athlete_dis_map)\ndf_medals_athlete['Discipline Code'] = df_medals_athlete['Athlete Name'].replace(athlete_dis_code_map)\n\ndf_medals_ath = df_medals_athlete[df_medals_athlete['Total']>4].reset_index(drop=True).copy()","0a55735a":"!git clone https:\/\/github.com\/linuxmint\/flags.git\n!git clone https:\/\/github.com\/PetroIvaniuk\/olympic-pictograms.git","0855efe8":"def put_text_h(ax, patch, text, offset, fontsize=10):\n    text_len = len(str(text))\n    offset_text = 0.05 if text_len==1 else 0.1 if text_len==2 else 0.15\n    return ax.text(patch.get_width()-offset-offset_text, \n                   patch.get_y()+patch.get_height()\/2,\n                   text, va=\"center\", fontsize=fontsize)\n\ndef convert_column(column):\n    return column.to_list()[::-1]\n\ndef get_medal_athlete_list(df):\n    athlete_name = convert_column(df['Athlete Name'])\n    country_iso = convert_column(df['Country ISO'])\n    dis_code = convert_column(df['Discipline Code'])\n    medals_total = convert_column(df['Total'])\n    medals_b = convert_column(df['Bronze'])\n    medals_bs = convert_column(df['B+S'])\n    output_list = list(zip(athlete_name, country_iso, dis_code, medals_total, medals_b, medals_bs))\n    return output_list\n\ndef plot_medalists(input_list, path_medal, path_flag, path_dis, flag=True):\n\n    value_list = [i[3] for i in input_list]\n    label_list = [i[0] for i in input_list]\n    fig_width  = max(value_list)\n    fig_height = len(value_list)\/2\n\n    fig = plt.figure(figsize=(fig_width, fig_height), dpi=100)\n    ax = fig.add_subplot()\n    bar_height = 0.8\n    bar_color = '#FFFFFF'\n    ax.barh(y=label_list, width=value_list, height=bar_height, color=bar_color)\n        \n    img_medals = [ '{}{}.png'.format(path_medal, m) for m in  ['G', 'S', 'B'] ]\n    img_g, img_s, img_b = plt.imread(img_medals[0]), plt.imread(img_medals[1]), plt.imread(img_medals[2])\n        \n    for i, (label, label_country, label_dis, value_t, value_b, value_bs) in enumerate(input_list):\n        if flag:        \n            img_ulr = \"{}{}.png\".format(path_flag, label_country)\n            value_shift = 0.1\n        else:\n            img_ulr = \"{}{}.png\".format(path_dis, label_dis)\n            value_shift = 0.2\n        img = plt.imread(img_ulr)\n        extent_values = [value_t+value_shift, value_t+(1-value_shift), i-bar_height\/2, i+bar_height\/2]\n        plt.imshow(img, extent=extent_values, aspect='auto', zorder=1)\n        \n        for j in range(value_t):\n            extent_values_medals = [value_t-j-0.9, value_t-j-0.1, i-bar_height\/2, i+bar_height\/2]\n            if j<value_b:\n                plt.imshow(img_b, extent=extent_values_medals, aspect='auto', zorder=1)\n            elif value_b<=j<value_bs:\n                plt.imshow(img_s, extent=extent_values_medals, aspect='auto', zorder=1)\n            else:\n                plt.imshow(img_g, extent=extent_values_medals, aspect='auto', zorder=1)\n\n    # set ylabel lenght up to 20 characters\n    plt.draw()\n    ylabels_updated = []\n    for ylabel in ax.get_yticklabels():\n        yl_text = ylabel.get_text()\n        ylabels_updated.append(yl_text if len(yl_text)<20 else yl_text[:20]+'\\n'+yl_text[20:])\n    ax.set_yticks(ax.get_yticks())\n    ax.set_yticklabels(ylabels_updated)\n    \n    ax.tick_params(labelbottom=False)   \n    ax.xaxis.set_ticks_position('none')\n    ax.yaxis.set_ticks_position('none') \n    ax.spines[['top', 'bottom', 'right']].set_visible(False)\n    plt.xlim(0, max(value_list) + 1)\n    plt.ylim(-0.5, len(value_list) - 0.5)\n    if fig_width>3:\n        plt.tight_layout()\n    plt.show()\n    \ndef plot_medalists_b(input_list, path_medal, path_flag):\n    \n    value_list = [i[3] for i in input_list]\n    label_list = [i[0] for i in input_list]\n    value_gs = [i[3]-i[-2] for i in input_list]\n    value_g = [i[3]-i[-1] for i in input_list]\n    \n    height_fig = len(value_list)\/2\n    fig = plt.figure(figsize=(8, height_fig), dpi=100)\n    ax = fig.add_subplot()\n    bar_height = 0.8\n    ax.barh(y=label_list, width=value_list, height=bar_height, color='#CD7F32')\n    ax.barh(y=label_list, width=value_gs, height=bar_height, color='#C0C0C0')\n    ax.barh(y=label_list, width=value_g, height=bar_height, color='#FFD700')\n\n    for i, (label, label_country, _, value, _, _) in enumerate(medal_athlete_list): \n        img_ulr = \"{}{}.png\".format(path_flag, label_country)\n        img = plt.imread(img_ulr)\n        extent_values = [value+0.1, value+0.9, i-bar_height\/2, i+bar_height\/2]\n        plt.imshow(img, extent=extent_values, aspect='auto', zorder=1)\n\n    ax.xaxis.set_ticks_position('top')\n    ax.yaxis.set_ticks_position('none') \n    ax.spines[['bottom', 'right']].set_visible(False)\n    ax.grid(which='major', axis='x', linestyle='-',)\n\n    plt.xlim(0, max(value_list) * 1.125)\n    plt.ylim(-0.55, len(value_list) - 0.55)\n    plt.tight_layout()\n    plt.show()\n    \ndef plot_medals(df):\n    label_list = convert_column(df['Country'])\n    value_list = df.shape[0]*[4.5]\n    \n    v1_list = convert_column(df['Gold'])\n    v2_list = convert_column(df['Silver'])\n    v3_list = convert_column(df['Bronze'])\n    v4_list = convert_column(df['Total'])\n\n    fig = plt.figure(figsize=(4, len(label_list)\/4), dpi=100)\n    ax = fig.add_subplot()\n    bar_height = 1\n    color = ['#FFFFFF' if i%2==0 else '#FAFAFA' for i in range(df.shape[0])]\n    \n    ax.barh(y=label_list, width=value_list, height=bar_height, color=color)\n    for patch, v1, v2, v3, v4 in zip(ax.patches, v1_list, v2_list, v3_list, v4_list):\n        put_text_h(ax, patch, v1, 3.5)\n        put_text_h(ax, patch, v2, 2.5)\n        put_text_h(ax, patch, v3, 1.5)\n        put_text_h(ax, patch, v4, 0.5)\n    \n    ax.xaxis.set_ticks_position('top')\n    ax.xaxis.set_ticks_position('none')\n    ax.yaxis.set_ticks_position('none') \n    ax.spines[['top', 'bottom', 'left', 'right']].set_visible(False)\n\n    plt.xticks([1, 2, 3, 4], ['Gold', 'Silver', 'Bronze', 'Total'])\n    plt.ylim(-0.5, len(value_list) - 0.5)\n    plt.xlim(0.5, 4.5)\n    plt.show()","932db1c5":"medal_athlete_list = get_medal_athlete_list(df_medals_ath)\nplot_medalists(medal_athlete_list, 'olympic-pictograms\/medals\/', 'flags\/usr\/share\/iso-flag-png\/', \n               'olympic-pictograms\/2020-tokyo\/paralympic\/', flag=True)","22184e7f":"medal_athlete_list = get_medal_athlete_list(df_medals_ath)\nplot_medalists_b(medal_athlete_list, 'olympic-pictograms\/medals\/', 'flags\/usr\/share\/iso-flag-png\/')","95fbf70b":"plot_medals(df_medals_total)","b949b024":"## How is data look like?","1d4ba9da":"## ","c63d6bdb":"## Visualization","1791888b":"## Top Medalists, Version 2","e1bb125c":"### Medals total","3ceb59e6":"### Coaches","25af1d5f":"## Top Medalists, Version 1","bfe8ac1f":"### Medalists","175e56a8":"## Paralympic Medals ","5348292a":"### Technical Officials","c2de8f8f":"### Athletes"}}