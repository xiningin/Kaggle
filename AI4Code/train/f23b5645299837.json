{"cell_type":{"cf335814":"code","810cbf4f":"code","5e515e44":"code","219e2e02":"code","4ada40aa":"code","b734fb53":"code","7ed6330a":"code","a0d0f5b5":"code","ed6f280f":"code","e262fd96":"code","9c608ae2":"code","5c56ca04":"code","e104cf56":"code","63f871a2":"code","0ce27532":"code","b1527749":"code","f42eb8f5":"code","dec4619e":"code","a8a8815e":"code","80f5b287":"code","cdf9e1be":"code","571b8244":"code","cab21207":"code","d6709eb6":"code","c13afcec":"code","3360f912":"code","3c95380f":"code","5ecf06f5":"code","9a43a87f":"code","d1dbc29d":"code","5dccaff9":"code","8fd1e248":"code","7e7d9473":"code","7f507b7c":"code","ea13822e":"code","770fc214":"code","4c3e925b":"code","f85d1978":"code","35f0c450":"code","c4de3abf":"code","5c7a371d":"code","e35dcb0c":"code","75255dfa":"code","b7723c45":"code","e67f8119":"code","731013f1":"code","298172a6":"code","cea39f7a":"code","d21151ce":"code","b90345a0":"code","9149b0bc":"code","79ad4189":"code","4e54cbc9":"code","3ebb8f55":"code","0bd41a3e":"code","379c3cd5":"code","c7d6334c":"code","fd1648b8":"code","d6a89e10":"code","80d537a9":"code","6741fdf1":"code","17a3db5e":"code","6901ec7f":"code","1d66342b":"code","0606d506":"code","35361906":"code","0abcb555":"code","6475eb4e":"code","24796bcc":"code","489e4dba":"code","2a17360e":"code","cfe4200b":"code","5a4e8aa5":"code","2799ef53":"code","65bbcc10":"code","50ab4eb1":"code","7a0f349a":"code","db167626":"code","2686e93e":"code","30c9e6ff":"code","ba671c67":"code","febdcfd2":"code","b26c498e":"code","345c60cd":"code","f5e78d54":"code","78646925":"code","b2c26db9":"code","4154f99d":"code","5184c09b":"code","e039a50c":"code","fb75a95d":"code","aaa991e1":"code","fd0f98c2":"code","e0473a2c":"code","e6e75d1a":"code","1a7dc4fe":"code","a7aa67cb":"code","da0fcf5c":"code","7bdad2d8":"code","6a78a713":"code","4a7d0ae2":"code","9bcadbe8":"code","e56e35ea":"code","bd61caa4":"code","e2a452f2":"code","9d533c08":"code","1be35b61":"code","7b901517":"code","67cdc5cc":"code","e644b815":"code","515a5e27":"code","a7054930":"code","b6e1397c":"markdown","84b8e44a":"markdown","f80957fb":"markdown","977ba743":"markdown","2cbbf971":"markdown","b8136880":"markdown","982c2a28":"markdown","35313200":"markdown","e4fe2fd8":"markdown","aea5bc2d":"markdown","f5e3223a":"markdown","2adf993e":"markdown","3ebd6b4b":"markdown","0c032814":"markdown","624a9783":"markdown","4eb2fc0c":"markdown","ad5c5bce":"markdown","32a816b4":"markdown","37afeda8":"markdown","c15d9dcb":"markdown","a004c122":"markdown","dc2db6d0":"markdown","7d545c2f":"markdown","67bd15bc":"markdown","1ea1e2db":"markdown","d0e573fa":"markdown","176cc296":"markdown","bb495cab":"markdown","f76f00ed":"markdown","99e00268":"markdown","e36ee41e":"markdown","d54278ad":"markdown","d0367e65":"markdown","74f64896":"markdown","40e2ee29":"markdown","6ae21d36":"markdown","5b3e79f1":"markdown","827345e0":"markdown","a9f26bdd":"markdown","a3cbc3bd":"markdown","cce63319":"markdown","64acd419":"markdown","f88438ae":"markdown","67e35e4f":"markdown","64c74be9":"markdown","2dbc5fe5":"markdown","034e87b0":"markdown","c47d1505":"markdown","041698a5":"markdown","39d1ec79":"markdown","16fe9c81":"markdown","71035ed8":"markdown","e6b820f8":"markdown","9e40c399":"markdown","0e818b43":"markdown","0a8718e1":"markdown","4c4a7380":"markdown","b312b4a1":"markdown","1a59759e":"markdown","9432ca1b":"markdown","75e88f8d":"markdown","53b1ab2c":"markdown"},"source":{"cf335814":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","810cbf4f":"dataf = pd.read_csv(\"..\/input\/lending-club\/accepted_2007_to_2018q4.csv\/accepted_2007_to_2018Q4.csv\")","5e515e44":"dataf.columns","219e2e02":"df = dataf[['loan_amnt','term','int_rate','installment','grade','sub_grade','emp_title','emp_length',\n                        'home_ownership','annual_inc','verification_status','issue_d','loan_status','purpose',\n                        'title','dti','earliest_cr_line','open_acc','pub_rec','revol_bal','revol_util',\n                        'total_acc','initial_list_status','application_type','mort_acc','pub_rec_bankruptcies']]","4ada40aa":"df.info()","b734fb53":"df['loan_status'].unique()","7ed6330a":"df = df[(df['loan_status'] == 'Fully Paid') | (df['loan_status'] == 'Charged Off')]","a0d0f5b5":"df['loan_status'].unique()","ed6f280f":"df.shape","e262fd96":"df.info()","9c608ae2":"sns.countplot(x='loan_status',data=df)","5c56ca04":"plt.figure(figsize=(12,4))\nsns.distplot(df['loan_amnt'],kde=False,bins=40)\nplt.xlim(0,45000)","e104cf56":"df.corr()","63f871a2":"plt.figure(figsize=(15,9))\nsns.heatmap(df.corr(),annot=True,cmap='viridis')\nplt.ylim(10, 0)","0ce27532":"sns.scatterplot(x='installment',y='loan_amnt',data=df,)","b1527749":"sns.boxplot(x='loan_status',y='loan_amnt',data=df)","f42eb8f5":"df.groupby('loan_status')['loan_amnt'].describe()","dec4619e":"sorted(df['grade'].unique())","a8a8815e":"sorted(df['sub_grade'].unique())","80f5b287":"sns.countplot(x='grade',data=df,hue='loan_status')","cdf9e1be":"plt.figure(figsize=(12,4))\nsubgrade_order = sorted(df['sub_grade'].unique())\nsns.countplot(x='sub_grade',data=df,order = subgrade_order,palette='coolwarm')","571b8244":"plt.figure(figsize=(12,4))\nsubgrade_order = sorted(df['sub_grade'].unique())\nsns.countplot(x='sub_grade',data=df,order = subgrade_order,palette='coolwarm' ,hue='loan_status')","cab21207":"f_and_g = df[(df['grade']=='G') | (df['grade']=='F')]\n\nplt.figure(figsize=(12,4))\nsubgrade_order = sorted(f_and_g['sub_grade'].unique())\nsns.countplot(x='sub_grade',data=f_and_g,order = subgrade_order,hue='loan_status')","d6709eb6":"df['loan_status'].unique()","c13afcec":"df['loan_repaid'] = df['loan_status'].map({'Fully Paid':1,'Charged Off':0})","3360f912":"df[['loan_repaid','loan_status']]","3c95380f":"df.corr()['loan_repaid'].sort_values().drop('loan_repaid').plot(kind='bar')","5ecf06f5":"df = df.drop('loan_status',axis=1)","9a43a87f":"df.info()","d1dbc29d":"df.head()","5dccaff9":"len(df)","8fd1e248":"df.isnull().sum()","7e7d9473":"100* df.isnull().sum()\/len(df)","7f507b7c":"df['emp_title'].nunique()","ea13822e":"df['emp_title'].value_counts()","770fc214":"df = df.drop('emp_title',axis=1)","4c3e925b":"sorted(df['emp_length'].dropna().unique())","f85d1978":"emp_length_order = [ '< 1 year',\n                      '1 year',\n                     '2 years',\n                     '3 years',\n                     '4 years',\n                     '5 years',\n                     '6 years',\n                     '7 years',\n                     '8 years',\n                     '9 years',\n                     '10+ years']","35f0c450":"plt.figure(figsize=(12,4))\n\nsns.countplot(x='emp_length',data=df,order=emp_length_order)","c4de3abf":"plt.figure(figsize=(12,4))\nsns.countplot(x='emp_length',data=df,order=emp_length_order,hue='loan_repaid')","5c7a371d":"emp_co = df[df['loan_repaid']==0].groupby(\"emp_length\").count()['loan_repaid']","e35dcb0c":"emp_fp = df[df['loan_repaid']==1].groupby(\"emp_length\").count()['loan_repaid']","75255dfa":"emp_len = emp_co\/emp_fp","b7723c45":"emp_len","e67f8119":"emp_len.plot(kind='bar')","731013f1":"df = df.drop('emp_length',axis=1)","298172a6":"df.isnull().sum()","cea39f7a":"df['purpose'].head(10)","d21151ce":"df['title'].head(10)","b90345a0":"df = df.drop('title',axis=1)","9149b0bc":"df['mort_acc'].value_counts()","79ad4189":"print(\"Correlation with the mort_acc column\")\ndf.corr()['mort_acc'].sort_values()","4e54cbc9":"print(\"Mean of mort_acc column per total_acc\")\ndf.groupby('total_acc').mean()['mort_acc']","3ebb8f55":"total_acc_avg = df.groupby('total_acc').mean()['mort_acc']","0bd41a3e":"total_acc_avg[2.0]","379c3cd5":"def fill_mort_acc(total_acc,mort_acc):\n    '''\n    Accepts the total_acc and mort_acc values for the row.\n    Checks if the mort_acc is NaN , if so, it returns the avg mort_acc value\n    for the corresponding total_acc value for that row.\n    \n    total_acc_avg here should be a Series or dictionary containing the mapping of the\n    groupby averages of mort_acc per total_acc values.\n    '''\n    if np.isnan(mort_acc):\n        return total_acc_avg[total_acc]\n    else:\n        return mort_acc","c7d6334c":"df['mort_acc'] = df.apply(lambda x: fill_mort_acc(x['total_acc'], x['mort_acc']), axis=1)","fd1648b8":"df.isnull().sum()","d6a89e10":"df = df.dropna()","80d537a9":"df.isnull().sum()","6741fdf1":"df.select_dtypes(['object']).columns","17a3db5e":"df['term'].value_counts()","6901ec7f":"df['term'] = df['term'].apply(lambda term: int(term[:3]))","1d66342b":"df['term']","0606d506":"df = df.drop('grade', axis = 1)","35361906":"subgrade_dummies = pd.get_dummies(df['sub_grade'],drop_first=True)","0abcb555":"df = pd.concat([df.drop('sub_grade',axis=1),subgrade_dummies],axis=1)","6475eb4e":"df.columns","24796bcc":"df.select_dtypes(['object']).columns","489e4dba":"dummies = pd.get_dummies(df[['verification_status', 'application_type','initial_list_status','purpose']],drop_first = True)","2a17360e":"df = df.drop(['verification_status', 'application_type','initial_list_status','purpose'],axis=1)","cfe4200b":"df = pd.concat([df,dummies],axis=1)","5a4e8aa5":"df.select_dtypes(['object']).columns","2799ef53":"df['home_ownership'].value_counts()","65bbcc10":"df['home_ownership'] = df['home_ownership'].replace(['NONE','ANY'],'OTHER')","50ab4eb1":"df['home_ownership'].value_counts()","7a0f349a":"dummies = pd.get_dummies(df['home_ownership'],drop_first=True)","db167626":"dummies.head(2)","2686e93e":"df = df.drop(['home_ownership'],axis=1)","30c9e6ff":"df = pd.concat([df,dummies],axis=1)","ba671c67":"df.head(2)","febdcfd2":"df.select_dtypes(['object']).count()","b26c498e":"df = df.drop(['issue_d'],axis=1)","345c60cd":"df['earliest_cr_line']","f5e78d54":"df['earliest_cr_year'] = df['earliest_cr_line'].apply(lambda date: int(date[-4:]))","78646925":"df['earliest_cr_year']","b2c26db9":"df = df.drop(['earliest_cr_line'],axis=1)","4154f99d":"df.columns","5184c09b":"df.select_dtypes(['object']).count()","e039a50c":"from sklearn.model_selection import train_test_split","fb75a95d":"X = df.drop('loan_repaid',axis=1).values\ny = df['loan_repaid'].values","aaa991e1":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=101)","fd0f98c2":"from sklearn.preprocessing import MinMaxScaler","e0473a2c":"scaler = MinMaxScaler()","e6e75d1a":"X_train = scaler.fit_transform(X_train)","1a7dc4fe":"X_test = scaler.transform(X_test)","a7aa67cb":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation,Dropout\nfrom tensorflow.keras.constraints import max_norm\nfrom tensorflow.keras.callbacks import EarlyStopping","da0fcf5c":"early_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=25)","7bdad2d8":"X_train.shape","6a78a713":"model = Sequential()\n\n# input layer\nmodel.add(Dense(68,  activation='relu'))\nmodel.add(Dropout(0.2))\n\n# hidden layer\nmodel.add(Dense(34, activation='relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(17, activation='relu'))\nmodel.add(Dropout(0.2))\n\n# output layer\nmodel.add(Dense(units=1,activation='sigmoid'))\n\n# Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam')","4a7d0ae2":"model.fit(x=X_train, \n          y=y_train, \n          epochs=100,\n          batch_size=256,\n          validation_data=(X_test, y_test),verbose=1,\n          callbacks=[early_stop] \n          )","9bcadbe8":"from tensorflow.keras.models import load_model","e56e35ea":"model.save('data_project_model_v1.h5') ","bd61caa4":"losses = pd.DataFrame(model.history.history)","e2a452f2":"losses[['loss','val_loss']].plot()","9d533c08":"from sklearn.metrics import classification_report,confusion_matrix","1be35b61":"predictions = model.predict_classes(X_test)","7b901517":"print(classification_report(y_test,predictions))","67cdc5cc":"confusion_matrix(y_test,predictions)","e644b815":"import random\nrandom.seed(101)\nrandom_ind = random.randint(0,len(df))\n\nnew_customer = df.drop('loan_repaid',axis=1).iloc[random_ind]\nnew_customer","515a5e27":"model.predict_classes(new_customer.values.reshape(1,68))","a7054930":"df.iloc[random_ind]['loan_repaid']","b6e1397c":"Lets go for a visualization to understand the correlation little better. ","84b8e44a":"**Find out what the mort_acc feature represents**","f80957fb":"## Train Test Split","977ba743":"### verification_status, application_type,initial_list_status,purpose \n**Convert these columns: ['verification_status', 'application_type','initial_list_status','purpose'] into dummy variables and concatenate them with the original dataframe. Remember to set drop_first=True and to drop the original columns.**","2cbbf971":"**Create a histogram of the loan_amnt column.**","b8136880":"**It looks like F and G subgrades don't get paid back that often. Isloate those and recreate the countplot just for those subgrades.**","982c2a28":"### home_ownership\n**Review the value_counts for the home_ownership column.**","35313200":"**revol_util and the pub_rec_bankruptcies have missing data points, but they account for less than 0.5% of the total data. Go ahead and remove the rows that are missing those values in those columns with dropna().**","e4fe2fd8":"# Lending Club loan data Analysis - Deep Learning Neural Network\n\n## The Data\n\nWe will be using a subset of the LendingClub DataSet obtained from Kaggle: https:\/\/www.kaggle.com\/wordsforthewise\/lending-club\n\nLendingClub is a US peer-to-peer lending company, headquartered in San Francisco, California.[3] It was the first peer-to-peer lender to register its offerings as securities with the Securities and Exchange Commission (SEC), and to offer loan trading on a secondary market. LendingClub is the world's largest peer-to-peer lending platform.\n\n### Our Goal\n\nGiven historical data on loans given out with information on whether or not the borrower defaulted (charge-off), can we build a model thatcan predict wether or nor a borrower will pay back their loan? This way in the future when we get a new potential customer we can assess whether or not they are likely to pay back the loan. Keep in mind classification metrics when evaluating the performance of your model!\n\nThe \"loan_status\" column contains our label.\n\n### Data Overview","aea5bc2d":"**So our model predict the correct result.**","f5e3223a":"# Creating the Model\n\n**Run the cell below to import the necessary Keras functions.**","2adf993e":"## Normalizing the Data\n\n**Use a MinMaxScaler to normalize the feature data X_train and X_test. Recall we don't want data leakge from the test set so we only fit on the X_train data.**","3ebd6b4b":"**Create a count plot of the emp_length feature column. Challenge: Sort the order of the values.**","0c032814":"**Convert this Series to be in term of percentage of the total DataFrame**","624a9783":"**Looks like the total_acc feature correlates with the mort_acc , this makes sense! Let's try this fillna() approach. We will group the dataframe by the total_acc and calculate the mean value for the mort_acc per total_acc entry. To get the result below:**","4eb2fc0c":"**Create a new column called 'load_repaid' which will contain a 1 if the loan status was \"Fully Paid\" and a 0 if it was \"Charged Off\".**","ad5c5bce":"----\n-----\nThere are many LendingClub data sets on Kaggle. Here is the information on this particular data set:\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th><\/th>\n      <th>LoanStatNew<\/th>\n      <th>Description<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <th>0<\/th>\n      <td>loan_amnt<\/td>\n      <td>The listed amount of the loan applied for by the borrower. If at some point in time, the credit department reduces the loan amount, then it will be reflected in this value.<\/td>\n    <\/tr>\n    <tr>\n      <th>1<\/th>\n      <td>term<\/td>\n      <td>The number of payments on the loan. Values are in months and can be either 36 or 60.<\/td>\n    <\/tr>\n    <tr>\n      <th>2<\/th>\n      <td>int_rate<\/td>\n      <td>Interest Rate on the loan<\/td>\n    <\/tr>\n    <tr>\n      <th>3<\/th>\n      <td>installment<\/td>\n      <td>The monthly payment owed by the borrower if the loan originates.<\/td>\n    <\/tr>\n    <tr>\n      <th>4<\/th>\n      <td>grade<\/td>\n      <td>LC assigned loan grade<\/td>\n    <\/tr>\n    <tr>\n      <th>5<\/th>\n      <td>sub_grade<\/td>\n      <td>LC assigned loan subgrade<\/td>\n    <\/tr>\n    <tr>\n      <th>6<\/th>\n      <td>emp_title<\/td>\n      <td>The job title supplied by the Borrower when applying for the loan.*<\/td>\n    <\/tr>\n    <tr>\n      <th>7<\/th>\n      <td>emp_length<\/td>\n      <td>Employment length in years. Possible values are between 0 and 10 where 0 means less than one year and 10 means ten or more years.<\/td>\n    <\/tr>\n    <tr>\n      <th>8<\/th>\n      <td>home_ownership<\/td>\n      <td>The home ownership status provided by the borrower during registration\u00a0or obtained from the credit report.\u00a0Our values are: RENT, OWN, MORTGAGE, OTHER<\/td>\n    <\/tr>\n    <tr>\n      <th>9<\/th>\n      <td>annual_inc<\/td>\n      <td>The self-reported annual income provided by the borrower during registration.<\/td>\n    <\/tr>\n    <tr>\n      <th>10<\/th>\n      <td>verification_status<\/td>\n      <td>Indicates if income was verified by LC, not verified, or if the income source was verified<\/td>\n    <\/tr>\n    <tr>\n      <th>11<\/th>\n      <td>issue_d<\/td>\n      <td>The month which the loan was funded<\/td>\n    <\/tr>\n    <tr>\n      <th>12<\/th>\n      <td>loan_status<\/td>\n      <td>Current status of the loan<\/td>\n    <\/tr>\n    <tr>\n      <th>13<\/th>\n      <td>purpose<\/td>\n      <td>A category provided by the borrower for the loan request.<\/td>\n    <\/tr>\n    <tr>\n      <th>14<\/th>\n      <td>title<\/td>\n      <td>The loan title provided by the borrower<\/td>\n    <\/tr>\n    <tr>\n      <th>15<\/th>\n      <td>zip_code<\/td>\n      <td>The first 3 numbers of the zip code provided by the borrower in the loan application.<\/td>\n    <\/tr>\n    <tr>\n      <th>16<\/th>\n      <td>addr_state<\/td>\n      <td>The state provided by the borrower in the loan application<\/td>\n    <\/tr>\n    <tr>\n      <th>17<\/th>\n      <td>dti<\/td>\n      <td>A ratio calculated using the borrower\u2019s total monthly debt payments on the total debt obligations, excluding mortgage and the requested LC loan, divided by the borrower\u2019s self-reported monthly income.<\/td>\n    <\/tr>\n    <tr>\n      <th>18<\/th>\n      <td>earliest_cr_line<\/td>\n      <td>The month the borrower's earliest reported credit line was opened<\/td>\n    <\/tr>\n    <tr>\n      <th>19<\/th>\n      <td>open_acc<\/td>\n      <td>The number of open credit lines in the borrower's credit file.<\/td>\n    <\/tr>\n    <tr>\n      <th>20<\/th>\n      <td>pub_rec<\/td>\n      <td>Number of derogatory public records<\/td>\n    <\/tr>\n    <tr>\n      <th>21<\/th>\n      <td>revol_bal<\/td>\n      <td>Total credit revolving balance<\/td>\n    <\/tr>\n    <tr>\n      <th>22<\/th>\n      <td>revol_util<\/td>\n      <td>Revolving line utilization rate, or the amount of credit the borrower is using relative to all available revolving credit.<\/td>\n    <\/tr>\n    <tr>\n      <th>23<\/th>\n      <td>total_acc<\/td>\n      <td>The total number of credit lines currently in the borrower's credit file<\/td>\n    <\/tr>\n    <tr>\n      <th>24<\/th>\n      <td>initial_list_status<\/td>\n      <td>The initial listing status of the loan. Possible values are \u2013 W, F<\/td>\n    <\/tr>\n    <tr>\n      <th>25<\/th>\n      <td>application_type<\/td>\n      <td>Indicates whether the loan is an individual application or a joint application with two co-borrowers<\/td>\n    <\/tr>\n    <tr>\n      <th>26<\/th>\n      <td>mort_acc<\/td>\n      <td>Number of mortgage accounts.<\/td>\n    <\/tr>\n    <tr>\n      <th>27<\/th>\n      <td>pub_rec_bankruptcies<\/td>\n      <td>Number of public record bankruptcies<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n\n---\n----","32a816b4":"**Fit the model to the training data for at least 25 epochs. Also add in the validation data for later plotting. Added in a batch_size of 256.**","37afeda8":"**There are many ways we could deal with this missing data. We could attempt to build a simple model to fill it in, such as a linear model, we could just fill it in based on the mean of the other columns, or you could even bin the columns into categories and then set NaN as its own category. There is no 100% correct approach! Let's review the other columsn to see which most highly correlates to mort_acc**","c15d9dcb":"**Since we will be attempting to predict loan_status, create a countplot as shown below.**","a004c122":"## Categorical Variables and Dummy Variables\n\n**We're done working with the missing data! Now we just need to deal with the string values due to the categorical columns.**\n\n**TASK: List all the columns that are currently non-numeric. [Helpful Link](https:\/\/stackoverflow.com\/questions\/22470690\/get-list-of-pandas-dataframe-columns-based-on-data-type)**\n\n[Another very useful method call](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.select_dtypes.html)","dc2db6d0":"**Convert these to dummy variables, but replace NONE and ANY with OTHER, so that we end up with just 4 categories, MORTGAGE, RENT, OWN, OTHER. Then concatenate them with the original dataframe. Remember to set drop_first=True and to drop the original columns.**","7d545c2f":"You should have noticed almost perfect correlation with the \"installment\" feature. Explore this feature further. Print out their descriptions and perform a scatterplot between them. Does this relationship make sense to you? Do you think there is duplicate information here?","67bd15bc":"### term feature\n\n**TASK: Convert the term feature into either a 36 or 60 integer numeric data type using .apply() or .map().**","1ea1e2db":"**Convert the subgrade into dummy variables. Then concatenate these new columns to the original dataframe. Remember to drop the original subgrade column and to add drop_first=True to your get_dummies call.**","d0e573fa":"**The title column is simply a string subcategory\/description of the purpose column. Go ahead and drop the title column.**","176cc296":"**Charge off rates are extremely similar across all employment lengths. Go ahead and drop the emp_length column.**","bb495cab":"**Visualize this using a heatmap. Depending on your version of matplotlib, you may need to manually adjust the heatmap.**","f76f00ed":"1, so this person will fully paid the loan according to our model.","99e00268":"**Create a Series that displays the total count of missing values per column.**","e36ee41e":"**Build a sequential model to will be trained on the data. You have unlimited options here, but here is what the solution uses: a model that goes 78 --> 39 --> 19--> 9--> 1 output neuron. Added Dropout layer, and Early Stopping**","d54278ad":"**Let's fill in the missing mort_acc values based on their total_acc value. If the mort_acc is missing, then we will fill in that missing value with the mean value corresponding to its total_acc value from the Series we created above. This involves using an .apply() method with two columns. Check out the link below for more info, or review the solutions video\/notebook.**","d0367e65":"**Calculate the summary statistics for the loan amount, grouped by the loan_status.**","74f64896":"# Section 1: Exploratory Data Analysis\n\n**OVERALL GOAL: Get an understanding for which variables are important, view summary statistics, and visualize the data**\n\n\n----","40e2ee29":"### grade feature\n\n**We already know grade is part of sub_grade, so just drop the grade feature.**","6ae21d36":"# Missing Data\n\n**Let's explore this missing data columns. We use a variety of factors to decide whether or not they would be useful, to see if we should keep, discard, or fill in the missing data.**","5b3e79f1":"**Perform a train\/test split with test_size=0.2 and a random_state of 101.**","827345e0":"Let's now go through all the string features to see what we should do with them.","a9f26bdd":"**Create predictions from the X_test set and display a classification report and confusion matrix for the X_test set.**","a3cbc3bd":"**Realistically there are too many unique job titles to try to convert this to a dummy variable feature. Let's remove that emp_title column.**","cce63319":"**Let's explore the Grade and SubGrade columns that LendingClub attributes to the loans. What are the unique possible grades and subgrades?**","64acd419":"### earliest_cr_line\n**This appears to be a historical time stamp feature. Extract the year from this feature using a .apply function, then convert it to a numeric feature. Set this new data to a feature column called 'earliest_cr_year'.Then drop the earliest_cr_line feature.**","f88438ae":"# Section 3: Evaluating Model Performance.\n\n**Plot out the validation loss versus the training loss.**","67e35e4f":"**Display a count plot per subgrade. You may need to resize for this plot and reorder the x axis. Feel free to edit the color palette. Explore both all loans made per subgrade as well being separated based on the loan_status**","64c74be9":"**Plot out the countplot with a hue separating Fully Paid vs Charged Off**","2dbc5fe5":"**Let's explore correlation between the continuous feature variables. Calculate the correlation between all continuous numeric variables using .corr() method.**","034e87b0":"**Given the customer below, would you offer this person a loan?**","c47d1505":"# Environment setup and Data import","041698a5":"**Review the title column vs the purpose column. Is this repeated information?**","39d1ec79":"So the dataset is already unbalanced. Most of the loans are fullu paid. So lets design the model to predict a new person applying for a loan will gonna paid the loan or charged off.","16fe9c81":"**What is the length of the dataframe?**","71035ed8":"**Revisit the DataFrame to see what feature columns still have missing data.**","e6b820f8":"**Set X and y variables to the .values of the features and label.**","9e40c399":"### issue_d \n\n**This would be data leakage, we wouldn't know beforehand whether or not a loan would be issued when using our model, so in theory we wouldn't have an issue_date, drop this feature.**","0e818b43":"---\n---\n# Section 2: Data PreProcessing\n\n**Section Goals: Remove or fill any missing data. Remove unnecessary or repetitive features. Convert categorical string features to dummy variables.**","0a8718e1":"**How many unique employment job titles are there?**","4c4a7380":"**Now check, did this person actually end up paying back their loan?**","b312b4a1":"**Import train_test_split from sklearn.**","1a59759e":"**Create a countplot per grade. Set the hue to the loan_status label.**","9432ca1b":"**Save the model.**","75e88f8d":"**This still doesn't really inform us if there is a strong relationship between employment length and being charged off, what we want is the percentage of charge offs per category. Essentially informing us what percent of people per employment category didn't pay back their loan. There are a multitude of ways to create this Series. Once you've created it, see if visualize it with a bar plot. This may be tricky, refer to solutions if you get stuck on creating this Series.**","53b1ab2c":"**Create a bar plot showing the correlation of the numeric features to the new loan_repaid column. [Helpful Link](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.plot.bar.html)**"}}