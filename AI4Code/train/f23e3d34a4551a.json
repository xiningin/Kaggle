{"cell_type":{"41a449f4":"code","f1b91a05":"code","5d18f646":"code","c972bac1":"code","45c4ec3c":"code","dfed64ab":"code","c5cb1ff2":"markdown"},"source":{"41a449f4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f1b91a05":"class ImbalancedClassesNumpy:\n    def __init__(self,y):\n        #y has to be binary vectors\n        num_negative = y[y == 0].shape\n        num_positive = y[y == 1].shape\n        self.alpha = num_negative \/ (num_negative + num_positive)\n        self.gamma = 2\n    def _return_pt(self,target,pred):\n        return np.add(np.multiply(np.subtract(1, target) , np.subtract(1 , pred)) ,np.multiply( target , pred))\n    \n    def class_imbalanced_loss(self,target,pred,alpha = None):\n        if alpha is None:\n            alpha = self.alpha\n        pt = self._return_pt(target,pred)\n        return - alpha * np.sum(np.log(pt))\n    \n    def forcal_loss(self,target,pred,alpha = None):\n        if alpha is None:\n            alpha = self.alpha\n        pt = self._return_pt(target,pred)\n        return - alpha * np.sum(np.multiply(np.subtract(1 , pt) ** gamma,np.log(pt)))\n    ","5d18f646":"import torch","c972bac1":"ten_a = torch.zeros([2,3],dtype=torch.int32)\nten_b = torch.tensor([[1,0,3],[2,0,1]],dtype=torch.int32)\ntorch.masked_select(ten_b,torch.eq(ten_a,ten_b)).shape[0]\n","45c4ec3c":"torch.zeros(ten_a.size())","dfed64ab":"class ImbalancedClassPytorch:\n    def __init__(self,y):\n        num_negative = torch.masked_select(y,torch.eq(y,torch.zeros(y.size(),dtype = torch.uint8))).shape[0]\n        #num_negative = y[y == 0].shape\n        num_positive = torch.masked_select(y,torch.eq(y,torch.ones(y.size(),dtype = torch.uint8))).shape[0]\n        self.alpha = num_negative \/ (num_negative + num_positive)\n    def _return_pt(self,target,pred):\n        pt = torch.add(torch.mul(torch.sub(1, target) , torch.sub(1 , pred)) ,torch.mul( target , pred))\n        return pt\n    def class_imbalanced_loss(self,target,pred,alpha = None):\n        if alpha is None:\n            alpha = self.alpha\n        pt = self._return_pt(target,pred)\n        return - alpha * torch.sum(torch.mul(torch.sub(1 , pt),torch.log(pt)))\n    def focal_loss(self,target,pred,alpha = None,gamma = 2):\n        if alpha is None:\n            alpha = self.alpha\n        pt = self._return_pt(target,pred)\n        return - alpha * torch.sum(torch.mul(torch.sub(1 , pt).pow(gamma),torch.log(pt)))","c5cb1ff2":"## Abstract\nI implemented customized loss functions (focal loss and class imbalance loss)  to handle class imbalanced situations inspired by https:\/\/arxiv.org\/abs\/1708.02002.\n\nRight now I only have numpy\/Pytorch implementation, but I will add Keras\/Tensorflow implementation later."}}