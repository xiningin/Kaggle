{"cell_type":{"adcbca14":"code","b2f4a738":"code","b5713c23":"code","60f4f8af":"code","8d585407":"code","4a3a76f5":"code","46ca11e6":"code","9a180611":"code","fba46db6":"code","8c032d93":"code","87251275":"code","bf38cb3f":"code","977f87ce":"code","5662a8d9":"code","16df99ca":"code","99089149":"code","1b25c292":"code","f2dc42b0":"code","e378e09b":"code","92cb564e":"code","b592337b":"code","aa2d04a1":"code","8ee04b98":"code","5487e565":"code","14e9aadb":"code","9f32fc1c":"code","b36017ac":"code","4bc0ef54":"code","71cde41b":"code","a9e42ee2":"code","83895e0c":"code","076d7d84":"code","d50bc085":"code","6e413e2e":"code","e3101380":"code","ad47deaa":"code","cdc255cd":"code","00c46b3d":"code","9a3382e8":"code","9d52a0fd":"code","d87cde5d":"code","61076148":"code","b8bfcd17":"code","970736b0":"code","59194e3f":"code","f192477c":"code","d1057c8c":"code","e2871704":"code","23d77402":"code","6f0e7560":"code","ee48f141":"code","aef53268":"code","a075c25b":"code","0ab4e51a":"code","3f0120e9":"code","e2a104ea":"code","aef9636a":"code","503b9042":"code","9a421acf":"code","a9cc4414":"code","4d158edc":"code","d252f686":"code","09caecec":"code","22776ce3":"code","21e100bb":"code","d13b8f3e":"code","4289bfc0":"code","aa5b7916":"code","60a77ec9":"code","01b64b85":"code","ce6eeb6d":"code","3295197e":"code","adf74d5f":"code","8cf00109":"code","d9d1586e":"code","415b2631":"code","85110fbb":"code","6c464f2b":"code","38fba978":"code","b8713af0":"code","5a997309":"markdown","82876e47":"markdown","ca3104c4":"markdown","87a2e0a0":"markdown","09b4981a":"markdown","d755ce92":"markdown","79072730":"markdown","21314570":"markdown","2c98a875":"markdown","cdb164d2":"markdown","92bffc70":"markdown","f76f7c95":"markdown","68e10fff":"markdown","374858a2":"markdown","ef346dc3":"markdown"},"source":{"adcbca14":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2f4a738":"train= pd.read_csv(\"..\/input\/titanic\/train.csv\")","b5713c23":"test= pd.read_csv(\"..\/input\/titanic\/test.csv\")\ngender= pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","60f4f8af":"train.head()","8d585407":"test.head()","4a3a76f5":"gender.head()","46ca11e6":"train.info()","9a180611":"test.info()","fba46db6":"train.describe()","8c032d93":"train.isnull().sum().sort_values()","87251275":"train= train.drop(columns=['Cabin'])","bf38cb3f":"feature= ['Age', 'Embarked']\ntrain[feature]= train[feature].fillna(train[feature].mode().iloc[0])","977f87ce":"train.isnull().sum()","5662a8d9":"train= train.drop(columns=['Name', 'Ticket'])","16df99ca":"train.head()","99089149":"train['Sex']= train[\"Sex\"].astype('category').cat.codes","1b25c292":"train['Embarked']=train['Embarked'].astype('category').cat.codes","f2dc42b0":"train['Fare']= train['Fare'].round(0).astype(int)","e378e09b":"train=train.astype('int64')","92cb564e":"train.dtypes","b592337b":"train.Survived.describe()","aa2d04a1":"import matplotlib.pyplot as plt\n%matplotlib inline\nfrom pandas.plotting import scatter_matrix","8ee04b98":"train.hist(figsize=(12,12))\nplt.show()","5487e565":"train.Survived.value_counts().plot(kind='bar', figsize=(8,8))\nplt.xlable('Survived')\nplt.ylable('count')\nplt.show()","14e9aadb":"train.Sex.value_counts().plot( kind= 'bar', figsize=(5,5))\nplt.xlable('Sex')\nplt.ylable('count')\nplt.show()","9f32fc1c":"import seaborn as sns\nimport statistics","b36017ac":"sns.catplot(x='Pclass',data= train,kind='count',hue='Survived',col='Sex')","4bc0ef54":"sns.ecdfplot(x='Age', data= train,hue='Survived')\nplt.show()","71cde41b":"co_relation=train.corr()","a9e42ee2":"co_relation['Survived'].sort_values()","83895e0c":"import sklearn\nimport sklearn.metrics as sm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import GridSearchCV","076d7d84":"from sklearn import svm\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score","d50bc085":"from sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC","6e413e2e":"y= train['Survived']\nx= train.drop(columns=['Survived','PassengerId','Fare','Age'])","e3101380":"y.shape","ad47deaa":"x_train, x_test, y_train, y_test= train_test_split(x,y,test_size=0.1,random_state=62)","cdc255cd":"y_train.shape","00c46b3d":"x_train.shape\n","9a3382e8":"y_test.shape","9d52a0fd":"x_test.shape","d87cde5d":"print(len(x_train))\nprint(len(y_train))\nprint(len(x_test))\nprint(len(y_test))","61076148":"logit= LogisticRegression()\nlogit.fit(x_train,y_train)\npredict_1=logit.predict(x_test)\n","b8bfcd17":"train_accuracy= round(logit.score(x_train,y_train)*100)\ntest_accuracy= round(accuracy_score(predict_1,y_test)*100)","970736b0":"print(\"Logistic Regression Train Accuracy Score : {}%\".format(train_accuracy))\nprint(\"Logistic Regression Test Accuracy Score : {}%\".format(test_accuracy))","59194e3f":"print(classification_report(predict_1, y_test))","f192477c":"dt=DecisionTreeClassifier()\ndt.fit(x_train, y_train)\npredict_2=dt.predict(x_test)","d1057c8c":"train_accuracy= round(dt.score(x_train,y_train)*100)\ntest_accuracy= round(accuracy_score(predict_2,y_test)*100)","e2871704":"print(\"Decision Tree Train Accuracy Score :{}%\".format(train_accuracy))\nprint(\"Decision Tree Test Accuracy Score :{}%\".format(test_accuracy))","23d77402":"print(classification_report(predict_2,y_test))","6f0e7560":"nb=MultinomialNB()\nnb.fit(x_train,y_train)\nprdict_3=nb.predict(x_test)","ee48f141":"train_accuracy= round(nb.score(x_train,y_train)*100)\ntest_accuracy= round(accuracy_score(prdict_3,y_test)*100)","aef53268":"print(\"NB Train Accuracy Score :{}%\".format(train_accuracy))\nprint(\"NB test Accuracy Score :{}%\".format(test_accuracy))","a075c25b":"print(classification_report(prdict_3,y_test))","0ab4e51a":"rfc= RandomForestClassifier()\nrfc.fit(x_train,y_train)\nprdict_= rfc.predict(x_test)","3f0120e9":"train_accuracy= round(rfc.score(x_train,y_train)*100)\ntest_accuracy= round(accuracy_score(prdict_,y_test)*100)","e2a104ea":"print(\"Random Forest Train Accuracy Score :{}%\".format(train_accuracy))\nprint(\"Random Forest Test Accuracy Score :{}%\".format(test_accuracy))","aef9636a":"print(classification_report(prdict_,y_test))","503b9042":"sgd= SGDClassifier()\nsgd.fit(x_train, y_train)\npredict_4=sgd.predict(x_test)","9a421acf":"train_accuracy=round(sgd.score(x_train,y_train)*100)\ntest_accuracy= round(accuracy_score(predict_4,y_test)*100)\n","a9cc4414":"print(\"SVM Train Accuracy Score :{}%\".format(train_accuracy))\nprint(\"SVM Test Accuracy Score :{}%\".format(test_accuracy))\nprint(classification_report(predict_4,y_test))","4d158edc":"knn= KNeighborsClassifier(n_neighbors=5,metric='euclidean')\nknn.fit(x_train,y_train)\npredict_5= knn.predict(x_test)","d252f686":"tain_accuracy= round(knn.score(x_train,y_train)*100)\ntest_accuracy=round(accuracy_score(predict_5,y_test)*100)\n","09caecec":"print(\"KNN Train Accuracy Score :{}%\".format(train_accuracy))\nprint(\"KNN Test Accuracy Score :{}%\".format(test_accuracy))","22776ce3":"print(classification_report(predict_5,y_test))","21e100bb":"svc=SVC(probability=True)\nsvc.fit(x_train,y_train)\npredict_6=svc.predict(x_test)","d13b8f3e":"train_accuracy= round(svc.score(x_train,y_train)*100)\ntest_accuracy=round(accuracy_score(predict_6,y_test)*100)","4289bfc0":"print(\"SVC Train Accuracy Score:{}%\".format(train_accuracy))\nprint(\"SVS test Accuracy Score:{}%\".format(test_accuracy))\nprint(classification_report(predict_6,y_test))","aa5b7916":"test.head()","60a77ec9":"test.info()","01b64b85":"test= test.drop(columns=['Age','Name','Cabin','Fare','Ticket'])","ce6eeb6d":"test['Sex']=test.Sex.astype('category').cat.codes\ntest['Embarked']=test.Embarked.astype('category').cat.codes","3295197e":"test.head()","adf74d5f":"test.dtypes","8cf00109":"test.isnull().sum()","d9d1586e":"test=test.astype('int64')","415b2631":"test_id= test['PassengerId']\ntest_x=test.drop(columns='PassengerId')","85110fbb":"test_y_predict=rfc.predict(test_x)","6c464f2b":"final_result=pd.DataFrame(list(zip(test_id,test_y_predict)),columns=['PassengerId','Survived'])","38fba978":"final_result.head(50)","b8713af0":"final_result.to_csv('final_result.csv',index=False)","5a997309":"Dropping all irrelevant columns","82876e47":"Dropping irrelevant features","ca3104c4":"EDA","87a2e0a0":"Missing value treatment","09b4981a":"importing libraries for visualization","d755ce92":"splitting train dataset into training and testing datasets in order to train the model.","79072730":"separating features and lables","21314570":"Among all the models SVC has given best accuracy score for test data. Lets' apply it on our new datset.","2c98a875":"Training the dataset to get best model","cdb164d2":"Start with basic EDA of the available dataests.","92bffc70":"cabin feature in this dataset has more than 50%  missing data. Also this will not help in our model taining. Therefore, We must drop this feature.","f76f7c95":"The above visualization clearly shows that male in every category has higher chances of survival.","68e10fff":"Coversion of categorical variables into numerical variabls","374858a2":"Let's apply the best model on Test Dataset ","ef346dc3":"Convert all numerical variables into integer type"}}