{"cell_type":{"a165d82f":"code","d3842b8f":"code","e6fc77d2":"code","5682d82b":"code","495ae6df":"code","720123e7":"code","6f34f275":"code","f16152c6":"code","62cbff62":"code","00260089":"code","51803448":"code","aaa0b347":"code","1a98c596":"code","9dd9ee64":"code","0ff3fd3f":"code","58938685":"code","c069d795":"code","6dabd6c4":"code","8d1025c0":"code","b8b745e6":"code","b3328580":"code","68702ef2":"code","e0aab8e6":"markdown","d1b82d69":"markdown","ffa0f55e":"markdown"},"source":{"a165d82f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score, roc_auc_score, roc_curve, adjusted_rand_score\nfrom pandas_profiling import ProfileReport\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.impute import KNNImputer\nimport imageio\nfrom PIL import Image\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\npd.set_option('display.max_columns', 50)\npd.set_option('display.max_rows', 100)","d3842b8f":"music_df = pd.read_csv(\"..\/input\/prediction-of-music-genre\/music_genre.csv\").drop(columns=['instance_id', 'obtained_date', 'artist_name', 'track_name', 'key']) # drop useless columns\n# select a subset of the dataset for simplicity\nmusic_df = music_df[music_df['music_genre'].isin(['Anime', 'Classical', 'Hip-Hop', 'Jazz'])]","e6fc77d2":"report = ProfileReport(music_df)\nreport","5682d82b":"# Drop outliers\ndrop_index = music_df[(music_df['duration_ms']==-1) | (music_df['tempo']=='?')].index\nmusic_df.drop(index = drop_index, inplace=True)","495ae6df":"# Label encoding for music_genre\nle = LabelEncoder()\nmusic_df['music_genre'] = le.fit_transform(music_df['music_genre'])\nmusic_df['mode'] = le.fit_transform(music_df['mode'])\nmusic_df['tempo'] = np.round(music_df['tempo'].astype(float), 3)\nX = music_df.drop(columns=['music_genre'])","720123e7":"# Standardize all columns except for target\nstd = StandardScaler()\nstd_X = pd.DataFrame(std.fit_transform(X), \n                      index = X.index, \n                      columns = X.columns)","6f34f275":"std_X","f16152c6":"# Question 1\nscore_ls = []\nfor i in range(10):\n    kmeans = KMeans(n_clusters = 4, init='random', random_state=i, n_init=1)\n    music_df['pred'] = kmeans.fit_predict(std_X)\n    print(\"Number of iterations: \", kmeans.n_iter_)\n    score_ls.append(round(adjusted_rand_score(music_df['pred'], music_df['music_genre']), 4))\n#music_df['pred'].value_counts()","62cbff62":"# Plot adjuested rand index score\nplt.plot(pd.Series(score_ls))\nplt.title(\"Adjust rand index score with different random initilizations in Kmeans\")\nplt.xlabel('run time')\nplt.ylabel('adjusted rand index')","00260089":"# Question 2\n# try k from 2 to 10\nk_scores = []\nscores = []\nmse = []\nk_mse = []\nfor k in range(2, 10):\n    for i in range(10):\n        kmeans = KMeans(n_clusters = k, init='random', random_state=i)\n        music_df['pred'] = kmeans.fit_predict(std_X)\n        scores.append(round(adjusted_rand_score(music_df['music_genre'], music_df['pred']), 4))\n        mse.append(round(kmeans.inertia_))\n    k_scores.append(np.mean(scores))\n    k_mse.append(np.mean(mse))","51803448":"# Plot adjuested rand index score\nscore_df = pd.DataFrame({'k_score':k_scores, 'k':range(2,10)})\nplt.plot(score_df['k'], score_df['k_score'])\nplt.title(\"Adjust rand index score with different k in Kmeans\")\nplt.xlabel('k')\nplt.ylabel('adjusted rand index')","aaa0b347":"# Plot mean square error\nmse_df = pd.DataFrame({'mse':k_mse, 'k':range(2,10)})\nplt.plot(mse_df['k'], mse_df['mse'])\nplt.title(\"Mean Square Error with different k in Kmeans\")\nplt.xlabel('k')\nplt.ylabel('mse')","1a98c596":"# Question 3\n# Gaussian mixture model\ngaussian_scores = []\nscores = []\nfor k in range(2, 10):\n    for i in range(10):\n        gm = GaussianMixture(n_components=k, init_params='kmeans', tol=1e-4, max_iter=300, random_state=0)\n        music_df['pred'] = gm.fit_predict(std_X)\n        scores.append(adjusted_rand_score(music_df['music_genre'], music_df['pred']))\n    gaussian_scores.append(np.mean(scores))","9dd9ee64":"# Plot adjuested rand index score\nscore_df['gmm_score'] = gaussian_scores\nplt.plot(score_df['k'], score_df['gmm_score'], label='gmm')\nplt.plot(score_df['k'], score_df['k_score'], label='kmeans')\nplt.title(\"Adjust rand index score with different k\")\nplt.xlabel('k')\nplt.ylabel('adjusted rand index')\nplt.legend()","0ff3fd3f":"# Question 4\n# Use PCA to reduce dimension to 2 so that it can be shown in a graph.","58938685":"pca = PCA(n_components=2)\npca_X = pd.DataFrame(data=pca.fit_transform(std_X), columns=['pc1', 'pc2'])\nprint('Total variance explained: ', round(pca.explained_variance_ratio_.sum(), 4))\npca_X['true'] = music_df['music_genre'].values","c069d795":"# Scatter plots\nfig, axs = plt.subplots(5, 3, figsize=(15,25))\n\nfig.suptitle(\"Scatter plots with different k\")\npca_X['true'] = music_df['music_genre'].values\n\nscores_df = pd.DataFrame(columns=['k', 'kmeans', 'gm'])\nfor k in range(2, 7):\n    kmeans = KMeans(n_clusters = k, init='random')\n    pca_X['kmeans_pred'] = kmeans.fit_predict(pca_X[['pc1', 'pc2']])\n    gm = GaussianMixture(n_components = k)\n    pca_X['gaussian_pred'] = gm.fit_predict(pca_X[['pc1', 'pc2']])\n    \n    kmeans_score = adjusted_rand_score(pca_X['kmeans_pred'], pca_X['true'])\n    gm_score = adjusted_rand_score(pca_X['gaussian_pred'], pca_X['true'])\n    scores_df.loc[k-2] = [k, kmeans_score, gm_score]\n    \n    kmeans_centroids = kmeans.cluster_centers_\n    gmm_centroids = np.array([[pca_X.loc[pca_X['gaussian_pred']==z, 'pc1'].mean(), \n                               pca_X.loc[pca_X['gaussian_pred']==z, 'pc2'].mean()] for z in range(k)])\n    true_centroids = np.array([[pca_X.loc[pca_X['true']==z, 'pc1'].mean(), \n                               pca_X.loc[pca_X['true']==z, 'pc2'].mean()] for z in range(4)])\n    music_genre = ['Anime', 'Classical', 'Hip-Hop', 'Jazz']\n    for i in range(k):\n        axs[k-2, 0].scatter(pca_X.loc[pca_X['kmeans_pred']==i, 'pc1'], pca_X.loc[pca_X['kmeans_pred']==i, 'pc2'], s = 0.2)\n        axs[k-2, 0].scatter(kmeans_centroids[:, 0], kmeans_centroids[:, 1], marker=\"^\", color='black')\n        axs[k-2, 0].set_title(\"K-means\")\n        axs[k-2, 1].scatter(pca_X.loc[pca_X['gaussian_pred']==i, 'pc1'], pca_X.loc[pca_X['gaussian_pred']==i, 'pc2'], s = 0.2)\n        axs[k-2, 1].scatter(gmm_centroids[:, 0], gmm_centroids[:, 1], marker=\"^\", color='black')\n        axs[k-2, 1].set_title(\"Gaussian Mixture Model\")\n    for j in range(4):\n        axs[k-2, 2].scatter(pca_X.loc[pca_X['true']==j, 'pc1'], pca_X.loc[pca_X['true']==j, 'pc2'], s = 0.2, label = music_genre[j])\n        axs[k-2, 2].scatter(true_centroids[:, 0], true_centroids[:, 1], marker=\"^\", color='black')\n        axs[k-2, 2].set_title(\"Actual\")\n    axs[k-2, 2].legend(markerscale=10, loc='upper right')\nplt.show()","6dabd6c4":"scores_df","8d1025c0":"plt.figure(figsize=(8,5))\nplt.plot(scores_df['k'], scores_df['kmeans'], label='kmeans')\nplt.plot(scores_df['k'], scores_df['gm'], label='gmm')\nplt.title(\"Adjust rand index score with different k on two algorithms\")\nplt.xlabel('k')\nplt.ylabel('adjusted rand index')\nplt.legend()","b8b745e6":"max_iter_ls = [i+1 for i in range(10)]\nfor max_iter in max_iter_ls:\n    kmeans = KMeans(n_clusters = 4, max_iter=max_iter, random_state=0, \n                    init = np.array([[-3, 0], [-1, 0], [1, 0], [3, 0]]))\n    pca_X['kmeans_pred'] = kmeans.fit_predict(pca_X[['pc1', 'pc2']])\n    kmeans_centroids = kmeans.cluster_centers_\n    color = ['g', 'r', 'royalblue', 'darkorange']\n    for i in range(4):\n        plt.scatter(pca_X.loc[pca_X['kmeans_pred']==i, 'pc1'], pca_X.loc[pca_X['kmeans_pred']==i, 'pc2'], s = 0.2, color = color[i])\n    plt.scatter(kmeans_centroids[:, 0], kmeans_centroids[:, 1], marker=\"^\", color='black')\n    plt.title(f\"iteration_{max_iter}\")\n    plt.savefig(f'.\/iter{max_iter}.jpg')\n    plt.show()","b3328580":"image_path = [f'iter{i+1}.jpg' for i in range(10)]\ngif_images = []\nfor path in image_path:\n    gif_images.append(imageio.imread(path))\nimageio.mimsave(\"kmeans.gif\", gif_images,fps=2)\nim = Image.open('kmeans.gif')\nim","68702ef2":"max_iter_ls = [i+1 for i in range(10)]\nfor max_iter in max_iter_ls:\n    gm = GaussianMixture(n_components = 4)\n    pca_X['gaussian_pred'] = gm.fit_predict(pca_X[['pc1', 'pc2']])\n    gmm_centroids = np.array([[pca_X.loc[pca_X['gaussian_pred']==z, 'pc1'].mean(), \n                               pca_X.loc[pca_X['gaussian_pred']==z, 'pc2'].mean()] for z in range(k)])\n    color = ['g', 'r', 'royalblue', 'darkorange']\n    for i in range(4):\n        plt.scatter(pca_X.loc[pca_X['gaussian_pred']==i, 'pc1'], pca_X.loc[pca_X['gaussian_pred']==i, 'pc2'], s = 0.2, color = color[i])\n    plt.scatter(gmm_centroids[:, 0], gmm_centroids[:, 1], marker=\"^\", color='black')\n    plt.title(f\"gm_iteration_{max_iter}\")\n    plt.savefig(f'.\/gm_iter{max_iter}.jpg')\n    plt.show()","e0aab8e6":"# EDA and preprocess","d1b82d69":"# K Means","ffa0f55e":"This is not a solution to the prediction problem. Instead, it is a clustering project to see the genre differences.\nTo simplify the problem, I only chose 4 subcategories from the genre so that the comparison is more obvious.\nThe four genres are 'Anime', 'Classical', 'Hip-Hop', 'Jazz'."}}