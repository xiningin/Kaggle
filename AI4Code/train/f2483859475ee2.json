{"cell_type":{"8eaa78af":"code","bd91627b":"code","f18f0f99":"code","e82d88a5":"code","18ea51a3":"code","1003f801":"code","c1bafab1":"code","07ed7dc3":"code","cd4b9514":"code","8f035d36":"code","8ea96f29":"code","a58fca1e":"code","c86d2e20":"code","2285c917":"code","9915fde1":"code","b7dddf46":"code","31673dbf":"code","61f402ee":"code","cea93279":"code","c87cc5da":"code","88043e36":"code","4dfefddd":"code","60701223":"code","386ad3dc":"code","3a036c05":"code","aa6b7888":"code","593ba461":"code","27b3219d":"code","98a72942":"code","986bed4c":"code","201e558b":"code","1fa2ddad":"code","fc3b63a4":"markdown","58e1fc84":"markdown","25f08dd2":"markdown","aa632ac2":"markdown","38dbf7e7":"markdown","4c3677e8":"markdown","96d68c5f":"markdown","0578fdfa":"markdown","12a8b39b":"markdown","9e181ad9":"markdown","85a24b6d":"markdown","d0b5f962":"markdown"},"source":{"8eaa78af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","bd91627b":"data = pd.read_csv('..\/input\/football.csv')","f18f0f99":"# there is space in some of the column names e.g. Secondary Skill\n# and this causes us problems in reaching to that column using DataFrames\n# for example the 'data.Secondary Skill' syntax will gives us errors\n# to solve this problem:\n#data.columns = [each.split()[0]+'_'+each.split()[1] if (len(each.split())>1) else each for each in data.columns]\n\n# lets see the difference by running the following code\ndata.columns","e82d88a5":"def tuble_ex(t):\n    ''' return a list starting from 1 and until t'''\n    liste = []\n    i=0\n    while i<t:\n        i+=1\n        liste.append(i)\n        \n    return liste\n\nmy_list = tuble_ex(5)\n\na, b, c, d = tuble_ex(4)\nprint(a,b,c,d)","18ea51a3":"# global or local variable\nx = 3  # global\ndef f():\n    x = 5  # local\n    return x \n\nprint(x)\nprint(f())\nx = f()\nprint(x)\n\ny = 6\ndef f():\n    z = 2**y\n    return z\n\nprint(y)\nprint(f())","1003f801":"# to see the builtin functions:\nimport builtins\ndir(builtins)","c1bafab1":"# Nested functions\ndef circumference(x,y):\n    '''find circumference of a rectengule'''\n    def add(x,y):\n        z = x+y\n        return z\n    \n    return 2*add(x,y)\n\ncircum = circumference (6,7) ","07ed7dc3":"# 1. Default Argument\n\n# Here y is a default argument\ndef power(x,y=2):\n    z = x**y\n    return z\n\npower(3) # here y is taken as 2 \n\npower(3,4) # here we force y to be equalt to 4","cd4b9514":"# 2. Flexible Arguments\n#   2.1. *args\n#   It can be one argument or more \n\ndef sum_numbers(m,*args):\n    i=0\n    while i<len(args):\n        m += args[i]\n        i+=1\n    return m\n\nsum_numbers (3,4,5)\nsum_numbers (1,2,3,4,5,6,7,8,9,10)","8f035d36":"# 2.2 **kwargs\n# **kwargs is a dictionary\ndef dictionary (**kwargs):\n    for key,value in kwargs.items():\n        print(key+': ', end=' ')\n        print(value)\n        \ndictionary (country='greece',\n             capital='athens',\n             population=123456789)","8ea96f29":"# Examples\ncube = lambda x: x**3\ncube(4)\n\narea_of_rect = lambda a,b: a*b\narea_of_rect(5,4)","a58fca1e":"# map function: takes a function and a list as an input\n# applies a function to all of the items in this list\n\nmy_list = [1, 2, 3]\nmy_map = map(lambda x:x**2, my_list)\nprint(list(my_map))","c86d2e20":"name = 'mechmetkasap'\nit = iter(name) # makes the name iterable\n\nprint(next(it)) # will print the first element of name\nprint(next(it)) # will print the second element of name\nprint(next(it)) # and so on\nprint(*it)      # will print the remaining part of the name","2285c917":"# ZIP\n# it zips lists\nlist1 = [1,2,3,4]\nlist2 = [0,-2,4,6]\nzipped = zip(list1,list2)\nzip_list = list(zipped)\nprint(zip_list)\n\n# UNZIP\n# Note: It returns tuple insted of list\nunzipped = zip(*zip_list)\nunlist1, unlist2 = list(unzipped)\nprint(unlist1)\nprint(unlist2) \n\nprint(type(unlist1))  # tuple\nprint(type(unlist2))  # tuple\n\n# to make them again list we can use list() function","9915fde1":"# LIST COMPREHENSIONS\n# lets use our data now to classify skills of a player (for CR7 in our case)\n# make another column for this data\n# if a skill level is higher than 90: 'very high'\n# if a skill level is between 90 and 80: 'high'\n# if a skill level is between 80 and 60: 'medium'\n# if a skill level is below 60: 'low'\n\ndata ['Skill_Levels_Ronaldo'] = ['very high' if level > 90 \n     else 'high' if 90 > level > 80 else 'medium' \n     if 80 > level > 60 else 'low'\n     for level in data.Christiano_Ronaldo]\n\ndata.loc[:,['Christiano_Ronaldo', 'Skill_Levels_Ronaldo']]","b7dddf46":"# it will tell us how many rows and columns we have\ndata.shape","31673dbf":"# to get information about our data\ndata.info()","61f402ee":"# value count\ndata ['Primary Skill'].value_counts() # will not count nan objects\ndata ['Primary Skill'].value_counts(dropna = True) # will not count nan objects\ndata ['Primary Skill'].value_counts(dropna = False) # WILL count nan objects","cea93279":"# To learn basic statistical values\n\ndata.describe()","c87cc5da":"data.boxplot(column = ['Christiano Ronaldo', 'Lionel Messi', 'Neymar'])\n\nplt.title('Visual Exploratory Analysis of Three Player')\nplt.ylabel('Level')","88043e36":"# 1) melt function\n\nnew_data = data.loc[4:6, :] # rows 4,5,6 of our data\n\nmelted_new_data = pd.melt(frame = new_data, id_vars = 'Primary Skill', value_vars=['Christiano Ronaldo', 'Lionel Messi'])","4dfefddd":"# 2) Pivoting data: Reverse of melting\n\n# melted_new_data # to see our data table in order to write .pivot\n\nmelted_new_data.pivot(index = 'Primary Skill', columns = 'variable', values = 'value')\n","60701223":"# concatenating as rows\ndata1 = data.loc[13:16, :] # rows 1,2,3,4\ndata2 = data.loc[7:10, :] # rows 7,8,9,10\n\n# index numbers are written directly\nconcat_data12 = pd.concat([data1,data2], axis=0)\n# index numbers are starting from 1\nconcat_data12_index = pd.concat([data1,data2], axis=0, ignore_index=True)","386ad3dc":"# concatenating as columns\ndata3 = data [data ['Christiano Ronaldo'] > 90]\n#data33 = data3 ['Christiano Ronaldo]\ndata33 = data3.loc[:24, ['Christiano Ronaldo']]\n\ndata4 = data [data ['Lionel Messi'] > 90]\ndata44 = data4.loc[:26, ['Lionel Messi']]\n\nconcat_data3344 = pd.concat([data33,data44], axis=1, ignore_index=True)","3a036c05":"# to see data types of our data\ndata.dtypes\n\n# convert data type of Primary Skill from object to category\ndata ['Primary Skill'] = data ['Primary Skill'].astype('category')\n\n# convert data type of Primary Skill from object to category\ndata ['Neymar'] = data ['Neymar'].astype('float')","aa6b7888":"# lets check new data types\ndata.dtypes","593ba461":"# now lets check do we have non null values\n# normally there are no null entries, however we have put a null object into\n# the 'Primary Skill' in order to work with this data \ndata.info()","27b3219d":"# to see also NaN objects, we set dropna=False\ndata ['Primary Skill'].value_counts(dropna=False)\n\n# to see only non null objects we set dropna=True\ndata ['Primary Skill'].value_counts(dropna=True)","98a72942":"# to delete null objects:\ndata_copy = data.copy()\ndata_copy ['Primary Skill'].dropna(inplace=True)","986bed4c":"# to check whether data is changed. If it is, it will return True\ndata_copy ['Primary Skill'].notnull().all()\n\n# to check whether data is changed we will use assert function. If it returns\n# nothing it means there is no error\nassert data_copy ['Primary Skill'].notnull().all()","201e558b":"data_copy ['Primary Skill'].fillna('empty', inplace=True)\n\ndata_copy ['Primary Skill'].notnull().all()","1fa2ddad":"# to check data types of feaures\ndata ['Christiano Ronaldo'].dtypes == np.int64","fc3b63a4":"**To see the shape of ou data:**","58e1fc84":"**LAMBDA FUNCTION\n**Easier way to write a function","25f08dd2":"**BOX PLOT**","aa632ac2":"**CONCATENATING DATA**","38dbf7e7":"**TIDY DATA**","4c3677e8":"**EXPLORATORY DATA ANALYSIS**","96d68c5f":"**DEFAULT AND FLEXIBLE ARGUMENTS\n**\nThese concepts will be explained using examples ","0578fdfa":"NESTED FUNCTIONS","12a8b39b":"**ZIP AND UNZIP **","9e181ad9":"**ANONYMOUS FUNCTION**","85a24b6d":"**LIST COMPREHENSIONS**","d0b5f962":"**ITERATORS**"}}