{"cell_type":{"f56151d2":"code","6bd97b06":"code","e789b3e0":"code","736e6895":"code","1ee68ec0":"markdown","bb7fdb70":"markdown","01726e27":"markdown"},"source":{"f56151d2":"import ipywidgets as widgets\nfrom sympy import binomial as combos\nfrom IPython.display import display, HTML","6bd97b06":"# Ignore this cell (unless you intend to create your own notebooks with messy display output)\n\n# At first all this code was integrated into land_probability() function. It was fewer\n# lines of code but harder to read. This HTML and iPython Notebook messiness is not\n# important to calculating probability. By pulling out the messy display code, it is\n# easier to focus on and understand the probability aspects of land_probability().\n\n# This can be re-used in other iPython\/Jupyter Notebooks, simplifing HTML output for interact()\n\ndef title_HTML(title):\n    return '<h3>' + title + '<\/h3>'\n\ndef intro_HTML(*args):\n    lands, cards, drawn_cards, mulligans_so_far = args\n    slider_inputs = {'lands: ': lands,\n                     'cards: ': cards,\n                     'number of cards drawn: ': drawn_cards,\n                     'mulligans so far: ': mulligans_so_far}\n    s = ''\n    for key in slider_inputs:\n        s += '<br>' + key + str(slider_inputs[key])\n    return s\n\ndef start_HTML_table(headers):\n    s = '<br><table>\\n<tr>'\n    for header in headers:\n        s += '<th>' + header + '<\/th>'\n    s += '<\/tr>'\n    return s\n\ndef row_of_HTML_table(x_int, scipy_float):\n    '''\n    Args:\n      x_int: integer\n      scipy_float: float (scipy or regular)\n    '''\n    return '<tr><td>{0:.>6}<\/td><td>{1:.2%}<\/td><\/tr>'.format(x_int, float(scipy_float))\n    # must coerce scipy float type into regular float type for format to work right\n    \ndef finish_HTML_table(s, min_land, max_land, drawn_cards, mulligans_so_far,\n                      below_land_prob, above_land_prob, target_land_prob, out_of_range):\n    cumulative_p = 1\n    for p in out_of_range[:-1]:\n        cumulative_p *= p\n    s += '<\/table><br>'\n    s += '{0:.1%} chance of between {1} and {2} lands in this {3} card draw.<br>'.format(float(target_land_prob), min_land, max_land, drawn_cards)\n    s += '{0:.1%} chance that number of lands will be outside this range.<br><br>'.format(float(1 - target_land_prob))\n    s += '{0:.2%} chance that number of lands will be too low after {1} mulligan(s).<br>'.format(float(below_land_prob * cumulative_p), mulligans_so_far)\n    s += '{0:.2%} chance that number of lands will be too high after {1} mulligan(s).<br><br>'.format(float(above_land_prob * cumulative_p), mulligans_so_far)\n    return s","e789b3e0":"def land_probability(lands, cards, drawn_cards,\n                     min_land, max_land, mulligans=0):\n    out_of_range = []\n    nonlands = cards - lands\n    text = title_HTML(\"Probabilities for Lands Drawn:\")\n    for mulligans_so_far in range(mulligans+1):\n        text += intro_HTML(lands, cards, drawn_cards - mulligans_so_far, mulligans_so_far)\n        text += start_HTML_table(['Lands', 'Probability'])\n        target_land_prob, below_land_prob, above_land_prob = 0, 0, 0\n        for drawn_lands in range(0, drawn_cards + 1 - mulligans_so_far):\n            p = (combos(nonlands, drawn_cards - drawn_lands - mulligans_so_far)\n                 * combos(lands, drawn_lands)\n                 \/ float(combos(cards, drawn_cards - mulligans_so_far)))\n            if drawn_lands < min_land:\n                below_land_prob += p\n            elif drawn_lands > max_land:\n                above_land_prob += p\n            else:\n                target_land_prob +=p\n            text += row_of_HTML_table(drawn_lands, p)\n        out_of_range.append(below_land_prob + above_land_prob)\n        text = finish_HTML_table(text, min_land, max_land, drawn_cards - mulligans_so_far, mulligans_so_far,\n                                 below_land_prob, above_land_prob, target_land_prob, out_of_range)\n    display(HTML(text))","736e6895":"i = widgets.interact(land_probability,\n             lands = widgets.IntSlider(min = 1, max = 50, step = 1, value = 24), \n             cards = widgets.IntSlider(min = 1, max = 200, step = 1, value = 60), \n             drawn_cards = widgets.IntSlider(min = 0, max = 20, step = 1, value = 7),\n             min_land = widgets.IntSlider(min = 0, max = 3, step = 1, value = 2),\n             max_land = widgets.IntSlider(min = 3, max = 7, step = 1, value = 5),\n             mulligans = widgets.IntSlider(min = 0, max = 3, step = 1, value = 2)\n             )","1ee68ec0":"This is a land probability calculator for Magic the Gathering. You can specify with an interactive slider the number of lands and nonlands in the deck, and you'll get a clearly explained output showing you the probability after not just the first draw, but also after each mulligan. So far as I know, the only way to get the interactive slider is by running this notebook (static view doesn't get the slider).\n\nIf you want to skip the probability explanations, then simply scroll to the bottom and see how probabilities vary as you adjust land counts and deck size with the sliders.\n\nThis was a fun way to help me recall probability theory (DeGroot and Schervish, chapter 1), practice probability calculation in Python, learn how to use iPython Notebook interactively, and at the same have a helpful Magic: The Gathering tool.\n\nJoe Golton\n\nOriginally done in Dec 2014 as iPython notebook\n\nAdapted to Jupyter\/Kaggle April 2019 (not difficult, made some minor explanation corrections)","bb7fdb70":"Magic the Gathering intro packs recommend the following defaults for land construction:\n\n* 60 card deck\n* 24 lands in the deck\n\nIf you follow the recommended defaults, you can see that there is better than an 85% chance of starting with at least 2 lands when drawing your initial 7 card hand.\n\nIt can be useful to think of land tappable creatures as lands for the purposes of this calculation. For example, if you have 20 lands and 4 Mystic Elves, that is essentially equivalent to 24 lands (well, not really, because there are many more ways to lose a Mystic Elf than a land . . . but it's still useful to think of your starting hand this way as you're not likely to lose a Mystic Elf on turn 1).\n\nYou may want to consider mulligans in your calculation. Move the mulligan slider to \"1\" and you'll see the probabilities for the subsequent 6 card draw, as well as the chances of getting below or above your desired range of lands to start with. Move it to \"2\" and you'll see it go down to a 5 card draw (2nd mulligan).\n\nI assume for this analysis that mulligans automatically occur when below minimum required land or above maximum required land, but not otherwise. Therefore, the probability, p, of having too little land after 1 or 2 draws (2nd draw only if 1st draw outside of target range) is:\n\np = p1(below) * (p0(below) + p0(above))\n\nwhere\n\n* p0 represents probability in a 7 card draw (zero mulligans)\n* p1 represents probability in a 6 card draw (1 mulligan)\n* p0(below) represents probability that the number of cards drawn is below the required minimum","01726e27":"In mathematical notation, the probability of exactly 2 land cards appearing in a 7 card draw from a 60 card deck with 20 lands is:\n\n$$\\frac{\\binom{40}{5}\\binom{20}{2}}{60 \\choose 7} = \\frac{\\frac{40!}{5!35!}\\frac{20!}{2!18!}}{\\frac{60!}{7!53!}} = .3237$$\n\nThe denominator in all probability calculation represents the sample space (out of how many possibilities . . .).  In this case, it is the number of subsets of 7 cards possible out of 60 cards. This is exactly the definition of a combination. Plugging into the combination formula, using 60 choose 7.\n\n$${60 \\choose 7} = \\frac{60!}{7!53!}$$\n\nThe first part of the numerator represents the number of nonland combinations possible. There are 5 nonlands in this hand, drawn from 40 nonlands. So the number of subsets of 5 cards possible out of 40 cards is:\n\n$${40 \\choose 5} = \\frac{40!}{5!35!}$$\n\nSimilarly, the second part of the numerator is the number of land combinations possible when 2 lands are drawn from 20 lands:\n\n$${20 \\choose 2} = \\frac{20!}{2!18!}$$\n\nThese two parts of the numerator are multiplied, because each single combination of nonlands can be combined with all the combinations of lands. The general form of this is the \"multiplication rule\" which states:\n\n> When all the outcomes in each part of an experiment can occur regardless of which outcomes have occured in the other parts, then the parts are multipled together.\n     \n"}}