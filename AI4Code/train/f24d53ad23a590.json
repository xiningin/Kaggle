{"cell_type":{"a4e32040":"code","9e856c4d":"code","7d2c038a":"code","8b4eb8bc":"code","2ec61992":"code","6214f916":"code","c3a13680":"code","de7bc5f2":"code","661fef93":"code","b59e48b0":"code","ad55a5d4":"code","b69caf16":"code","3b33db71":"code","0a9666a4":"code","ef204b7c":"code","3c13468e":"code","36fc5bcc":"code","a7f8bba5":"code","5def3b25":"code","080d5ccf":"code","7e26b353":"code","00d23893":"code","a4b90462":"code","3c3660e1":"code","b38baf1d":"code","21118004":"code","7aecbb0c":"markdown","78b7a98a":"markdown"},"source":{"a4e32040":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e856c4d":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","7d2c038a":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","8b4eb8bc":"train_data.isnull().sum()\n","2ec61992":"test_data.isnull().sum()","6214f916":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","c3a13680":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","de7bc5f2":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        elif Pclass == 2: \n            return 29\n        else: \n            return 24\n    else: \n        return Age ","661fef93":"train_data['Age'] = train_data[['Age', 'Pclass']].apply(impute_age, axis=1)","b59e48b0":"train_data.isnull().sum()","ad55a5d4":"test_data['Age'] = test_data[['Age', 'Pclass']].apply(impute_age, axis=1)","b69caf16":"train_data.drop('Cabin', axis=1, inplace=True)\ntest_data.drop('Cabin', axis=1, inplace=True)","3b33db71":"train_data.dropna(inplace = True)\ntest_data.dropna(inplace= True)","0a9666a4":"cols = [\"Pclass\", \"Sex\",  \"SibSp\", \"Parch\",\"Embarked\" ]\ndum_values = pd.get_dummies(train_data[cols], drop_first=True)\ndum_values.head()","ef204b7c":"\nAge_fare = train_data[[\"Age\",\"Fare\"]]","3c13468e":"dum_values[[\"Age\",\"Fare\"]] = Age_fare[[\"Age\",\"Fare\"]].values","36fc5bcc":"dum_values[\"Survived\"] = train_data[\"Survived\"].values","a7f8bba5":"y = dum_values[\"Survived\"]\n\nfeatures = dum_values.drop('Survived', axis=1)\nX = features\n","5def3b25":"test_cols = [\"Pclass\", \"Sex\",  \"SibSp\", \"Parch\",\"Embarked\" ]\ndum_test = pd.get_dummies(test_data[cols], drop_first=True)\ndum_test.head()\n","080d5ccf":"test_Age_fare = test_data[[\"Age\",\"Fare\"]]\ndum_test[[\"Age\",\"Fare\"]] = test_Age_fare[[\"Age\",\"Fare\"]].values","7e26b353":"X_train.head()","00d23893":"X_train.dtypes","a4b90462":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=101)","3c3660e1":"from sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\npredict_test = model.predict(dum_test)\n","b38baf1d":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n\nprint(classification_report(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))","21118004":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predict_test})\noutput.to_csv('submission4.csv', index=False)\nprint(\"Your submission was successfully saved!\")","7aecbb0c":"# Contribution","78b7a98a":"Imputation of the Age column"}}