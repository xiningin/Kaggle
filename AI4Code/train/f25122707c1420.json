{"cell_type":{"1fb76abd":"code","8272172b":"code","9d0ca7f6":"code","6aaeb9fd":"code","eb524efe":"code","94baca8a":"code","c68bbccf":"code","bdd07c58":"code","56951acd":"code","789ac75e":"code","a761a1ad":"code","e900d3f0":"code","ff5b2a2f":"code","e9927f2c":"code","67efe77f":"code","2d0d3a78":"code","e05e32e8":"code","94067a17":"code","6e564c94":"code","25246e24":"code","42c88d48":"code","36f3d808":"code","bf947e85":"code","f81c9f90":"code","8b3e7373":"code","363fbb61":"code","82bbc027":"code","20496680":"code","c7c45e2c":"code","599ac5fe":"code","4edb0240":"code","1be9da8f":"code","5565840e":"markdown","5105a8a2":"markdown","be86b205":"markdown","611405ec":"markdown","d8e14061":"markdown","cee6c645":"markdown","f6f9df4a":"markdown","99660cc4":"markdown","c5e6bdbb":"markdown"},"source":{"1fb76abd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# preprocessing\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, StratifiedKFold\nimport pandas_profiling as pp\n\n# models\nfrom sklearn.linear_model import LinearRegression, SGDRegressor, RidgeCV\nfrom sklearn.svm import SVR, LinearSVR\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, ExtraTreesRegressor \nfrom sklearn.ensemble import BaggingRegressor, AdaBoostRegressor, VotingRegressor \nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nimport sklearn.model_selection\nfrom sklearn.model_selection import cross_val_predict as cvp\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport sklearn\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.decomposition import PCA as PCA\nfrom sklearn.metrics import silhouette_samples\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# model tuning\nfrom hyperopt import STATUS_OK, Trials, fmin, hp, tpe, space_eval\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","8272172b":"valid_part = 0.3","9d0ca7f6":"train0 = pd.read_csv('\/kaggle\/input\/phosphate-prediction-in-river-water\/train.csv')","6aaeb9fd":"train0.head(10)","eb524efe":"train0.info()","94baca8a":"pp.ProfileReport(train0)","c68bbccf":"train0.describe(percentiles = [.1, .9])","bdd07c58":"train0 = train0[((train0 ['target'] < 0.92) & (train0['1'] < 0.92) & (train0['2'] < 0.92))]\ntrain0.info()","56951acd":"train0.head(3)","789ac75e":"g = sns.PairGrid(train0[['1', '2', '3', '4']])\ng.map_diag(sns.kdeplot)\ng.map_offdiag(sns.kdeplot, n_levels=10);","a761a1ad":"g = sns.PairGrid(train0[['1', '2', '3', '4']], palette=\"GnBu_d\")\ng.map(plt.scatter, s=50, edgecolor=\"white\")\ng.add_legend();","e900d3f0":"g = sns.PairGrid(train0[['1', '2', '3', '4']])\ng.map_diag(plt.hist)\ng.map_offdiag(plt.scatter)\ng.add_legend();","ff5b2a2f":"g = sns.PairGrid(train0[['1', '2', '3', '4']])\ng = g.map_diag(plt.hist, histtype=\"step\", linewidth=3)\ng = g.map_offdiag(plt.scatter)\ng = g.add_legend()","e9927f2c":"target_name = 'target' ","67efe77f":"# For boosting model\ntrain0b = train0\ntrain_target0b = train0b[target_name]\ntrain0b = train0b.drop([target_name], axis=1)\n# Synthesis valid as test for selection models\ntrainb, testb, targetb, target_testb = train_test_split(train0b, train_target0b, test_size=valid_part, random_state=0)","2d0d3a78":"train_target0 = train0[target_name]\ntrain0 = train0.drop([target_name], axis=1)","e05e32e8":"#For models from Sklearn\nscaler = StandardScaler()\ntrain0 = pd.DataFrame(scaler.fit_transform(train0), columns = train0.columns)","94067a17":"train0.head(3)","6e564c94":"len(train0)","25246e24":"# Synthesis valid as test for selection models\ntrain, test1, target, target_test = train_test_split(train0, train_target0, test_size=valid_part, random_state=0)","42c88d48":"train.head(3)","36f3d808":"test1.head(3)","bf947e85":"train.info()","f81c9f90":"test1.info()","8b3e7373":"acc_train_r2 = []\nacc_test_r2 = []\nacc_train_d = []\nacc_test_d = []\nacc_train_rmse = []\nacc_test_rmse = []","363fbb61":"def acc_d(y_meas, y_pred):\n    # Relative error between predicted y_pred and measured y_meas values\n    return mean_absolute_error(y_meas, y_pred)*len(y_meas)\/sum(abs(y_meas))\n\ndef acc_rmse(y_meas, y_pred):\n    # RMSE between predicted y_pred and measured y_meas values\n    return (mean_squared_error(y_meas, y_pred))**0.5","82bbc027":"def acc_boosting_model(num,model,train,test,num_iteration=0):\n    # Calculation of accuracy of boosting model by different metrics\n    \n    global acc_train_r2, acc_test_r2, acc_train_d, acc_test_d, acc_train_rmse, acc_test_rmse\n    \n    if num_iteration > 0:\n        ytrain = model.predict(train, num_iteration = num_iteration)  \n        ytest = model.predict(test, num_iteration = num_iteration)\n    else:\n        ytrain = model.predict(train)  \n        ytest = model.predict(test)\n\n    print('target = ', targetb[:5].values)\n    print('ytrain = ', ytrain[:5])\n\n    acc_train_r2_num = round(r2_score(targetb, ytrain) * 100, 2)\n    print('acc(r2_score) for train =', acc_train_r2_num)   \n    acc_train_r2.insert(num, acc_train_r2_num)\n\n    acc_train_d_num = round(acc_d(targetb, ytrain) * 100, 2)\n    print('acc(relative error) for train =', acc_train_d_num)   \n    acc_train_d.insert(num, acc_train_d_num)\n\n    acc_train_rmse_num = round(acc_rmse(targetb, ytrain) * 100, 2)\n    print('acc(rmse) for train =', acc_train_rmse_num)   \n    acc_train_rmse.insert(num, acc_train_rmse_num)\n\n    print('target_test =', target_testb[:5].values)\n    print('ytest =', ytest[:5])\n    \n    acc_test_r2_num = round(r2_score(target_testb, ytest) * 100, 2)\n    print('acc(r2_score) for test =', acc_test_r2_num)\n    acc_test_r2.insert(num, acc_test_r2_num)\n    \n    acc_test_d_num = round(acc_d(target_testb, ytest) * 100, 2)\n    print('acc(relative error) for test =', acc_test_d_num)\n    acc_test_d.insert(num, acc_test_d_num)\n    \n    acc_test_rmse_num = round(acc_rmse(target_testb, ytest) * 100, 2)\n    print('acc(rmse) for test =', acc_test_rmse_num)\n    acc_test_rmse.insert(num, acc_test_rmse_num)","20496680":"def acc_model(num,model,train,test):\n    # Calculation of accuracy of model \u0430\u043a\u0449\u044c Sklearn by different metrics   \n  \n    global acc_train_r2, acc_test_r2, acc_train_d, acc_test_d, acc_train_rmse, acc_test_rmse\n    \n    ytrain = model.predict(train)  \n    ytest = model.predict(test)\n\n    print('target = ', target[:5].values)\n    print('ytrain = ', ytrain[:5])\n\n    acc_train_r2_num = round(r2_score(target, ytrain) * 100, 2)\n    print('acc(r2_score) for train =', acc_train_r2_num)   \n    acc_train_r2.insert(num, acc_train_r2_num)\n\n    acc_train_d_num = round(acc_d(target, ytrain) * 100, 2)\n    print('acc(relative error) for train =', acc_train_d_num)   \n    acc_train_d.insert(num, acc_train_d_num)\n\n    acc_train_rmse_num = round(acc_rmse(target, ytrain) * 100, 2)\n    print('acc(rmse) for train =', acc_train_rmse_num)   \n    acc_train_rmse.insert(num, acc_train_rmse_num)\n\n    print('target_test =', target_test[:5].values)\n    print('ytest =', ytest[:5])\n    \n    acc_test_r2_num = round(r2_score(target_test, ytest) * 100, 2)\n    print('acc(r2_score) for test =', acc_test_r2_num)\n    acc_test_r2.insert(num, acc_test_r2_num)\n    \n    acc_test_d_num = round(acc_d(target_test, ytest) * 100, 2)\n    print('acc(relative error) for test =', acc_test_d_num)\n    acc_test_d.insert(num, acc_test_d_num)\n    \n    acc_test_rmse_num = round(acc_rmse(target_test, ytest) * 100, 2)\n    print('acc(rmse) for test =', acc_test_rmse_num)\n    acc_test_rmse.insert(num, acc_test_rmse_num)","c7c45e2c":"xgb_clf = xgb.XGBRegressor({'objective': 'reg:squarederror'}) \nparameters = {'n_estimators': [60, 70, 80, 90, 95, 100, 105, 110, 120, 130, 140], \n              'learning_rate': [0.005, 0.01, 0.05, 0.075, 0.1],\n              'max_depth': [3, 5, 7, 9],\n              'reg_lambda': [0.1, 0.3, 0.5]}\nxgb_reg = GridSearchCV(estimator=xgb_clf, param_grid=parameters, cv=5, n_jobs=-1).fit(trainb, targetb)\nprint(\"Best score: %0.3f\" % xgb_reg.best_score_)\nprint(\"Best parameters set:\", xgb_reg.best_params_)\nacc_boosting_model(7,xgb_reg,trainb,testb)","599ac5fe":"#%% split training set to validation set\nXtrain, Xval, Ztrain, Zval = train_test_split(trainb, targetb, test_size=0.2, random_state=0)\ntrain_set = lgb.Dataset(Xtrain, Ztrain, silent=False)\nvalid_set = lgb.Dataset(Xval, Zval, silent=False)","4edb0240":"params = {\n        'boosting_type':'gbdt',\n        'objective': 'regression',\n        'num_leaves': 31,\n        'learning_rate': 0.01,\n        'max_depth': -1,\n        'subsample': 0.8,\n        'bagging_fraction' : 1,\n        'max_bin' : 5000 ,\n        'bagging_freq': 20,\n        'colsample_bytree': 0.6,\n        'metric': 'rmse',\n        'min_split_gain': 0.5,\n        'min_child_weight': 1,\n        'min_child_samples': 10,\n        'scale_pos_weight':1,\n        'zero_as_missing': False,\n        'seed':0,        \n    }\nmodelL = lgb.train(params, train_set = train_set, num_boost_round=10000,\n                   early_stopping_rounds=2000,verbose_eval=500, valid_sets=valid_set)","1be9da8f":"acc_boosting_model(8,modelL,trainb,testb,modelL.best_iteration)","5565840e":"Thanks for helping in this work to Vitalii Mokin (@vbmokin) and his kernels:\n* https:\/\/www.kaggle.com\/vbmokin\/bod-prediction-in-river-15-regression-models\n* https:\/\/www.kaggle.com\/vbmokin\/code-starter-phosphate-prediction-in-river\n","5105a8a2":"## 4. Preparing to modeling <a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","be86b205":"## 1. Import libraries <a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","611405ec":"## 3. EDA <a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","d8e14061":"## Data clustering","cee6c645":"This code is based on my kernel \"[FE & EDA with Pandas Profiling](https:\/\/www.kaggle.com\/vbmokin\/fe-eda-with-pandas-profiling)\"","f6f9df4a":"### LGBM <a class=\"anchor\" id=\"5.9\"><\/a>\n","99660cc4":"###  XGB<a class=\"anchor\" id=\"5.8\"><\/a>","c5e6bdbb":"## 2. Download datasets <a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)"}}