{"cell_type":{"5494de6f":"code","c9e89bd9":"code","c15f1094":"code","02efc660":"code","138960c2":"code","3a836fc0":"code","9ef1a98a":"code","cbffa164":"code","2656411b":"code","3ab61139":"code","46bb08e8":"code","02ec403f":"code","af30e650":"code","4bef1082":"code","7d5d97a5":"code","ee01bd58":"markdown","f80cbcf7":"markdown","2163a526":"markdown","181ca3b0":"markdown","12a9dd95":"markdown","c202089f":"markdown","bbe5b360":"markdown","74899aec":"markdown","0964cc45":"markdown","e8505891":"markdown","1377bfe8":"markdown"},"source":{"5494de6f":"!nvidia-smi","c9e89bd9":"import tensorflow as tf\nfrom tensorflow import keras\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport os","c15f1094":"image_size = 224\ntarget_size = (image_size, image_size)\ninput_shape = (image_size, image_size, 3)\n\nbatch_size = 32\nepochs = 25","02efc660":"base_dir = \"..\/input\/new-plant-diseases-dataset\/new plant diseases dataset(augmented)\/New Plant Diseases Dataset(Augmented)\"\ntrain_dir = os.path.join(base_dir,\"train\")\ntest_dir = os.path.join(base_dir,\"valid\")","138960c2":"train_datagen = keras.preprocessing.image.ImageDataGenerator(rescale = 1\/255.0,\n                                                             shear_range = 0.2,\n                                                             zoom_range = 0.2,\n                                                             width_shift_range = 0.2,\n                                                             height_shift_range = 0.2,\n                                                             fill_mode=\"nearest\")\n\ntest_datagen = keras.preprocessing.image.ImageDataGenerator(rescale = 1\/255.0)","3a836fc0":"train_data = train_datagen.flow_from_directory(train_dir,\n                                               target_size = (image_size, image_size),\n                                               batch_size = batch_size,\n                                               class_mode = \"categorical\")\n\ntest_data = test_datagen.flow_from_directory(test_dir,\n                                             target_size = (image_size, image_size),\n                                             batch_size = batch_size,\n                                             class_mode = \"categorical\")","9ef1a98a":"categories = list(train_data.class_indices.keys())\nprint(train_data.class_indices)","cbffa164":"import json\nwith open('class_indices.json','w') as f:\n  json.dump(train_data.class_indices, f)\n\nfrom IPython.display import FileLink\nFileLink(r'class_indices.json')","2656411b":"base_model = tf.keras.applications.MobileNet(weights = \"imagenet\",\n                                             include_top = False,\n                                             input_shape = input_shape)\n\nbase_model.trainable = False","3ab61139":"inputs = keras.Input(shape = input_shape)\n\nx = base_model(inputs, training = False)\nx = tf.keras.layers.GlobalAveragePooling2D()(x)\nx = tf.keras.layers.Dropout(0.2)(x)\nx = tf.keras.layers.Dense(len(categories), \n                          activation=\"softmax\")(x)\n\nmodel = keras.Model(inputs = inputs, \n                    outputs = x, \n                    name=\"LeafDisease_MobileNet\")","46bb08e8":"optimizer = tf.keras.optimizers.Adam()\n\nmodel.compile(optimizer = optimizer,\n              loss = tf.keras.losses.CategoricalCrossentropy(from_logits = True),\n              metrics=[keras.metrics.CategoricalAccuracy(), \n                       'accuracy'])","02ec403f":"history = model.fit(train_data,\n                    validation_data=test_data,\n                    epochs=epochs,\n                    steps_per_epoch=150,\n                    validation_steps=100)","af30e650":"loss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(loss))\n\nfig = plt.figure(figsize=(10,6))\nplt.plot(epochs,loss,c=\"red\",label=\"Training\")\nplt.plot(epochs,val_loss,c=\"blue\",label=\"Validation\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()","4bef1082":"acc = history.history['categorical_accuracy']\nval_acc = history.history['val_categorical_accuracy']\n\nepochs = range(len(acc))\n\nfig = plt.figure(figsize=(10,6))\nplt.plot(epochs,acc,c=\"red\",label=\"Training\")\nplt.plot(epochs,val_acc,c=\"blue\",label=\"Validation\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend()","7d5d97a5":"model.save('plant_disease')","ee01bd58":"## Training\n\nWe first get the base MobileNet model without including the top layers since we want to use it for 38 classes and us the pre-trained weights for ImageNet.","f80cbcf7":"## Create a classes index file\n\nWe also want to know which class corresponds to which species and disease so we also create a `json` file which shows corresponding labels and class indices.","2163a526":"We make the following augmentations to the images:\n\n- `width_shift` and `height_shift` are ranges (as a fraction of total width or height) within which to randomly translate pictures vertically or horizontally\n- `rescale` is a value by which we will multiply the data before any other processing. Our original images consist in RGB coefficients in the 0-255, but such values would be too high for our models to process (given a typical learning rate), so we target values between 0 and 1 instead by scaling with a 1\/255. factor.\n- `shear_range` is for randomly applying shearing transformations\n- `zoom_range` is for randomly zooming inside pictures\n- `fill_mode` is the strategy used for filling in newly created pixels, which can appear after a rotation or a width\/height shift.","181ca3b0":"We now create a small upstream model on top of the MobileNet using the functional API","12a9dd95":"# Identify Plant Diseases\n\nWe use the PlantVillage dataset [1] by Hughes et al. consists of about 87,000 healthy and unhealthy leaf images divided into 38 categories by species and disease. Here we provide a subset of our experiments on working with this data. We also end up transfer learning from MobileNet and use the weights from pre-training on ImageNet.\n\n* ![PlantVillage Dataset Samples](https:\/\/i.imgur.com\/Zcxdrlc.png)\nFigure 1. PlantVillage Dataset Samples\n\n## Classes\n\nThe following 38 classes are availaible in the dataset\n\n- `Apple___Apple_scab` \n- `Apple___Black_rot` \n- `Apple___Cedar_apple_rust` \n- `Apple___healthy` \n- `Blueberry___healthy` \n- `Cherry_(including_sour)___Powdery_mildew` \n- `Cherry_(including_sour)___healthy` \n- `Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot` \n- `Corn_(maize)___Common_rust_` \n- `Corn_(maize)___Northern_Leaf_Blight` \n- `Corn_(maize)___healthy', 'Grape___Black_rot` \n- `Grape___Leaf_blight_(Isariopsis_Leaf_Spot)` \n- `Grape___healthy` \n- `Orange___Haunglongbing_(Citrus_greening)` \n- `Peach___Bacterial_spot` \n- `Peach___healthy` \n- `Pepper,_bell___Bacterial_spot` \n- `Pepper,_bell___healthy` \n- `Potato___Early_blight` \n- `Potato___Late_blight` \n- `Potato___healthy` \n- `Raspberry___healthy` \n- `Soybean___healthy` \n- `Squash___Powdery_mildew` \n- `Strawberry___Leaf_scorch` \n- `Strawberry___healthy` \n- `Tomato___Bacterial_spot` \n- `Tomato___Late_blight` \n- `Tomato___Leaf_Mold` \n- `Tomato___Septoria_leaf_spot` \n- `Tomato___Spider_mites Two-spotted_spider_mite` \n- `Tomato___Target_Spot` \n- `Tomato___Tomato_Yellow_Leaf_Curl_Virus` \n- `Tomato___Tomato_mosaic_virus` \n- `Tomato___healthy`\n\n## References\n\n[1] Hughes, David P., and Marcel Salathe. \u201cAn Open Access Repository of Images on Plant Health to Enable the Development of Mobile Disease Diagnostics.\u201d ArXiv:1511.08060 [Cs], Apr. 2016. arXiv.org, http:\/\/arxiv.org\/abs\/1511.08060.\n\n[2] Howard, Andrew G., et al. \u201cMobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications.\u201d ArXiv:1704.04861 [Cs], Apr. 2017. arXiv.org, http:\/\/arxiv.org\/abs\/1704.04861.\n","c202089f":"In our multiple experiments we found out Adam optimizer to work really well with it's default learning rate, $\\beta_1$, $\\beta_2$ and $\\epsilon$ values","bbe5b360":"Let's prepare our data. We will use `.flow_from_directory()` to generate batches of image data (and their labels) directly from our images in their respective folders.","74899aec":"## Setup","0964cc45":"## Review the training process","e8505891":"## Save the model\n\nWe finally save the model in the standard TensorFlow 2 SavedModel format.","1377bfe8":"## Get data\n\nIn order to make the most of our few training examples, we will \"augment\" them via a number of random transformations, so that our model would never see twice the exact same picture. This helps prevent overfitting and helps the model generalize better.\n\nIn TensorFlow this can be done via the `tf.keras.preprocessing.image.ImageDataGenerator` class. This class allows you to:\n\n- configure random transformations and normalization operations to be done on your image data during training\n- instantiate generators of augmented image batches (and their labels) via `.flow(data, labels)` or `.flow_from_directory(directory)`. These generators can then be used with the `tf.keras` model methods that accept data generators as inputs, `fit`, `evaluate` and `predict`."}}