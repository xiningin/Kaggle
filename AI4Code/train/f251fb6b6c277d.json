{"cell_type":{"5f8d7938":"code","7bfbe311":"code","ebc14a9f":"code","8714540f":"code","5e5e716e":"code","76c75dd9":"code","b8740ebb":"code","06986e25":"code","7d754894":"code","0008237e":"code","af999972":"code","8ae52754":"code","d0065593":"code","2c7dcd6b":"code","d8fb8f1a":"markdown","8fa5d353":"markdown","51d503b9":"markdown"},"source":{"5f8d7938":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7bfbe311":"df = pd.read_excel('\/kaggle\/input\/medicine-recommendation\/Medicine_description.xlsx')\ndf.head()","ebc14a9f":"df.shape","8714540f":"df1 = pd.read_excel('\/kaggle\/input\/medicine-recommendation\/Company_Name.xlsx')\ndf1.head()","5e5e716e":"fig = go.Figure(data=[go.Bar(\n            x=df1['NSE_Symbol'][0:10], y=df1['Rating'][0:10],\n            text=df1['Rating'][0:10],\n            textposition='auto',\n            marker_color='black'\n\n        )])\nfig.update_layout(\n    title='Pharmaceutical Industries Rating',\n    xaxis_title=\"NSE Symbol\",\n    yaxis_title=\"Rating\",\n)\nfig.show()","76c75dd9":"tfidf = TfidfVectorizer(stop_words='english')\ntfidf_matrix = tfidf.fit_transform(df['Drug_Name'])\nprint(tfidf_matrix.shape)","b8740ebb":"cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","06986e25":"indices = pd.Series(df.index, index=df['Reason']).drop_duplicates()\nprint(indices)","7d754894":"idx = indices['Wound']\nprint(idx)","0008237e":"idx = indices['Viral']\nprint(idx)","af999972":"#def get_recommendations(title, cosine_sim=cosine_sim):\n #   idx = indices[title]\n  #  sim_scores = list(enumerate(cosine_sim[idx]))\n   # sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    #sim_scores = sim_scores[1:11]\n    #movie_indices = [i[0] for i in sim_scores]\n\n   # return data['title'].iloc[movie_indices]","8ae52754":"def get_recommendations(Reason, cosine_sim=cosine_sim):\n    idx = indices[Reason]\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, df.any(), reverse=True)\n    sim_scores = sim_scores[1:11]\n    drug_indices = [i[0] for i in sim_scores]\n\n    return df['Reason'].iloc[drug_indices]","d0065593":"get_recommendations('Viral')\n","2c7dcd6b":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient. Mar\u00edlia Prata, @mpwolke was Here.' )","d8fb8f1a":"#Reasons are generic (Acne, Wound,Viral, Allergies) I should use a.any() or a.all(). I removed the key #lambda to df.any().  Obviously, didn't work. ","8fa5d353":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcS9IRysku9XjMl5Ig3BPayIq_cngHEL9XEZ6g&usqp=CAU)medium.com","51d503b9":"#Codes by Dexter https:\/\/www.kaggle.com\/soul9862\/the-movies-recommend-analysis-cosine-similarity"}}