{"cell_type":{"8637b241":"code","854e6c1d":"code","9b5fe152":"code","9c315bb5":"code","744f0151":"code","c378bdb3":"code","840d01ac":"code","5b0507c9":"code","11238e25":"code","b708a756":"code","8d863316":"code","24d5eeba":"code","7912bc7c":"code","a4e2f8a9":"code","7507dc37":"code","7f9cc3ec":"code","36329d85":"code","92451352":"code","5cac4e51":"code","23b33c1c":"markdown","24356e27":"markdown","71b6fbc3":"markdown","7f1ba01c":"markdown","111cc014":"markdown","cd79ce7a":"markdown","e8b0595f":"markdown","7d11ea9a":"markdown","5b0f41c3":"markdown","8e991d81":"markdown","967f4558":"markdown"},"source":{"8637b241":"!ls -lha kaggle.json\n\n\n!pip uninstall -y kaggle\n!pip install --upgrade pip\n!pip install kaggle==1.5.6","854e6c1d":"\n!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\/\n! chmod 600 ~\/.kaggle\/kaggle.json\n!kaggle -v","9b5fe152":"!kaggle competitions download -c 2020soil\n!unzip 2020soil.zip","9c315bb5":"import pandas as pd\nimport numpy as np\n\nimport torch\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\n\nfrom sklearn import preprocessing\n","744f0151":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\n\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","c378bdb3":"learning_rate = 1e-4\ntraining_epoches = 100\nbatch_size = 50\nScaler = preprocessing.StandardScaler()","840d01ac":"train = pd.read_csv('2020AI_soil_train.csv', header=None, skiprows=1,usecols=range(1,9))\n\ntrain","5b0507c9":"\ntest = pd.read_csv('2020_soil_test.csv', header = None, skiprows=1, usecols=range(1,8))\n\ntest","11238e25":"x_train = train.loc[:,1:7]\ny_train = train.loc[:,8:8]\n\nx_train = np.array(x_train)\ny_train = np.array(y_train)\n\nx_train = torch.FloatTensor(x_train)\ny_train = torch.FloatTensor(y_train)","b708a756":"\ntrain_dataset = torch.utils.data.TensorDataset(x_train, y_train)\n\ndata_loader = torch.utils.data.DataLoader(dataset = train_dataset,\n                                          batch_size = batch_size,\n                                          shuffle = True,\n                                          drop_last=True)","8d863316":"linear1 = torch.nn.Linear(7,64, bias = True) # feature\nlinear2 = torch.nn.Linear(64,64, bias = True)\nlinear3 = torch.nn.Linear(64,32, bias = True)\nlinear4 = torch.nn.Linear(32,32, bias = True)\nlinear5 = torch.nn.Linear(32,32, bias = True)\nlinear6 = torch.nn.Linear(32,32, bias = True)\nlinear7 = torch.nn.Linear(32,16, bias = True)\nlinear8 = torch.nn.Linear(16,16, bias = True)\nlinear9 = torch.nn.Linear(16,8, bias = True)\nlinear10 = torch.nn.Linear(8,8, bias = True)\nlinear11 = torch.nn.Linear(8,4, bias = True)\nlinear12 = torch.nn.Linear(4,1, bias = True)","24d5eeba":"torch.nn.init.xavier_uniform_(linear1.weight)\ntorch.nn.init.xavier_uniform_(linear2.weight)\ntorch.nn.init.xavier_uniform_(linear3.weight)\ntorch.nn.init.xavier_uniform_(linear4.weight)\ntorch.nn.init.xavier_uniform_(linear5.weight)\ntorch.nn.init.xavier_uniform_(linear6.weight)\ntorch.nn.init.xavier_uniform_(linear7.weight)\ntorch.nn.init.xavier_uniform_(linear8.weight)\ntorch.nn.init.xavier_uniform_(linear9.weight)\ntorch.nn.init.xavier_uniform_(linear10.weight)\ntorch.nn.init.xavier_uniform_(linear11.weight)\ntorch.nn.init.xavier_uniform_(linear12.weight)\n\n\n","7912bc7c":"model = torch.nn.Sequential(linear1,\n                            linear2,\n                            linear3,\n                            linear4,\n                            linear5,\n                            linear6,\n                            linear7,\n                            linear8,\n                            linear9,\n                            linear10,\n                            linear11,\n                            linear12\n                            ).to(device)","a4e2f8a9":"loss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n","7507dc37":"total_batch = len(data_loader)\n\nfor epoch in range(training_epoches):\n  avg_cost = 0\n\n  for X, Y in data_loader:\n\n    X = X.to(device)\n    Y = Y.to(device)\n\n    optimizer.zero_grad()\n    hypothesis = model(X)\n    cost = loss(hypothesis, Y)\n    cost.backward()\n    optimizer.step()\n\n    avg_cost += cost \/ total_batch\n  \n  print('Epoch:','%04d' % (epoch+1), 'cost=', '{:.9f}'.format(avg_cost))\nprint('Learning finshed')","7f9cc3ec":"\nwith torch.no_grad():\n  x_test = test.loc[:,1:7]\n  x_test = np.array(x_test)\n\n  x_test = torch.from_numpy(x_test).float().to(device)\n\n  prediction = model(x_test)","36329d85":"\n\ncorrect_prediction = prediction.cpu().numpy().reshape(-1,1)\n\nsubmit = pd.read_csv('soil_submission.csv')\nsubmit","92451352":"\nfor i in range(len(correct_prediction)):\n  submit['Expected'][i] = correct_prediction[i].item()\n\nsubmit","5cac4e51":"submit.to_csv('Defenbase.csv', mode='w', index = False)\n!kaggle competitions submit -c 2020soil -f Defenbase -m \"\ubc29\uc5b4\uc58d\"","23b33c1c":"\uc608\uce21\ud558\uace0 \uc81c\ucd9c \uc591\uc2dd \ubd88\ub7ec\uc11c \ub123\uae30","24356e27":"\ubaa8\ub4c8 \uc784\ud3ec\ud2b8","71b6fbc3":"gpu\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ucf54\ub4dc","7f1ba01c":"\ud30c\ub77c\ubbf8\ud130 \uac12 \uc124\uc815\ud558\uae30","111cc014":"\ud310\ub2e4\uc2a4\ub85c train\ub370\uc774\ud130 , test \ub370\uc774\ud130 \uac00\uc838\uc624\uae30","cd79ce7a":"\ub370\uc774\ud130 \ub2e4\uc6b4\ubc1b\uace0 \uc54c\uc9d1 \ud480\uae30","e8b0595f":"\uce90\uae00\uc5d0 \uc81c\ucd9c\ud558\uae30 ","7d11ea9a":"nn\uc744 \uc0c8\ub85c \uc124\uacc4 \nlayer\uc758 \uc218\uc640 \uc740\ub2c9 \ub808\uc774\uc5b4\uc758 \uac12 \uc870\uc808\n\n\ubc29\uc5b4: \n1. 10\uac1c\uc758 layer----> 12\uac1c\uc758 layer\ub85c \ubc14\uafe8\uc2b5\ub2c8\ub2e4.\n2. \uacf5\uaca9 \ubc1b\uc740 \ucf54\ub4dc :  7->32->16->8-> 1 \n   \uc81c\uac00 \uc0c8\ub85c \uc124\uacc4\ud55c nn :  7->64->32->16->8->4->1","5b0f41c3":"\ubaa8\ub378 \ucd08\uae30\ud654\uc640 layer \uc124\uacc4\ud558\uae30","8e991d81":"\ud559\uc2b5\ud558\uae30","967f4558":"nn\uc744 \uc0c8\ub85c \uc124\uacc4 \nlayer\uc758 \uc218\uc640 \uc740\ub2c9 \ub808\uc774\uc5b4\uc758 \uac12 \uc870\uc808\n\n\ubc29\uc5b4: \n1. 10\uac1c\uc758 layer----> 12\uac1c\uc758 layer\ub85c \ubc14\uafe8\uc2b5\ub2c8\ub2e4.\n2. \uacf5\uaca9 \ubc1b\uc740 \ucf54\ub4dc :  7->32->16->8-> 1 \n   \uc81c\uac00 \uc0c8\ub85c \uc124\uacc4\ud55c nn :  7->64->32->16->8->4->1"}}