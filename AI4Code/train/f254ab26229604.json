{"cell_type":{"3936b558":"code","3e460f8c":"code","eef21199":"code","581c8301":"code","4a7541f8":"code","9fc80a86":"code","07989320":"code","fd8ae9a0":"code","bf60c362":"code","c25cee4c":"code","09c1f0c7":"code","ba77aeef":"code","2d0b9ff6":"code","764b8eb5":"code","8562d2ea":"code","3ed137b5":"code","3ab100b0":"code","8477541b":"code","b25950ca":"code","32332470":"code","4fbd3786":"code","0e43b97d":"code","18a6dee8":"code","8f89b20d":"code","214ab12e":"code","bea81b63":"code","56fb22bd":"code","02ad6870":"code","5fefadf9":"code","47e07795":"code","350e5a11":"code","50d20ed6":"code","6532ff19":"code","287c6d3e":"code","f6e8367a":"code","35a66a80":"code","6420af04":"code","cc0f1b3b":"code","0fafb933":"code","3d108383":"code","2be7e1df":"code","f23c800d":"code","12e28f50":"code","42bbaeb8":"code","605be956":"code","30561572":"code","6c035d5c":"code","d51289aa":"code","e4900330":"code","ec0295c3":"code","d9824511":"code","e6c1cacd":"code","4c276e69":"markdown","f8574cff":"markdown","0f71f6a5":"markdown","eedcd2fa":"markdown","8fe8553e":"markdown","40d8073d":"markdown","d974b2dd":"markdown","e57c1ed8":"markdown","f83f86ea":"markdown","91150ab4":"markdown","03f89672":"markdown","c871458d":"markdown","b1f1ef56":"markdown","ee0f33b8":"markdown","0527af4b":"markdown","5eab2a9a":"markdown","cddf2d91":"markdown","d438aa1f":"markdown","aba4f596":"markdown","fa70912c":"markdown","abe14bfd":"markdown","5ea727b6":"markdown","28d78a4f":"markdown","f672253a":"markdown","15c85f04":"markdown","44b37861":"markdown"},"source":{"3936b558":"from numpy.random import seed\nseed(9)\nimport tensorflow\ntensorflow.random.set_seed(9)\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3e460f8c":"games_season = pd.read_csv('\/kaggle\/input\/basket-ball-dataset\/games_season.csv')\nprint(games_season.info())\ngames_season.head()","eef21199":"games_tourney = pd.read_csv('\/kaggle\/input\/basket-ball-dataset\/games_tourney.csv')\nprint(games_tourney.info())\ngames_tourney.head()","581c8301":"games_season_enriched = pd.read_csv('\/kaggle\/input\/basket-ball-dataset\/games_season_enriched.csv')\nprint(games_season_enriched.columns)\ngames_tourney.shape","4a7541f8":"games_tourney.describe()","9fc80a86":"print(games_tourney.season.unique())","07989320":"print(games_tourney.won.unique())\nprint(games_tourney.home.unique())","fd8ae9a0":"print(len(games_tourney.team_1.unique()))\nprint(len(games_tourney.team_2.unique()))","bf60c362":"import matplotlib.pyplot as plt \nimport seaborn as sns\n\nsns.displot(x='seed_diff',data=games_tourney)\nplt.show()","c25cee4c":"sns.displot(x='score_diff', data=games_tourney)\nplt.show()","09c1f0c7":"sns.lineplot(x='seed_diff', y= 'score_diff', data=games_tourney)\nplt.show()","ba77aeef":"sns.barplot(x='home', y= 'won', data=games_season)\nplt.show()","2d0b9ff6":"# Input\/dense\/output layers\nfrom keras.layers import Input, Dense\ninput_tensor = Input(shape=(1,), name='my_input_data_tensor')\noutput_tensor = Dense(1, name='my_output_layer')(input_tensor)\n\n# Build the model\nfrom keras.models import Model\nmodel = Model(input_tensor, output_tensor)\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_absolute_error')\nmodel.summary()","764b8eb5":"from keras.utils import plot_model\nplot_model(model, to_file = 'model.png')\nimg = plt.imread('model.png')\nplt.imshow(img)\nplt.show()","8562d2ea":"games_tourney.groupby('season').team_1.count()","3ed137b5":"games_tourney_train = games_tourney.iloc[:3430,]\ngames_tourney_test = games_tourney.iloc[3430:,]","3ab100b0":"# Now fit the model\nmodel.fit(games_tourney_train['seed_diff'], games_tourney_train['score_diff'],\n          epochs=1,\n          batch_size=128,\n          validation_split=.1,\n          verbose=True)","8477541b":"# let us evaluate the model performance\n\n# X variable from the test data\nX_test = games_tourney_test['seed_diff']\n\n# y variable from the test data\ny_test = games_tourney_test['score_diff']\n\n# Evaluate the model on the test data and make predictions\nprint(model.evaluate(X_test, y_test, verbose=False))\npreds = model.predict(X_test,verbose=False)\npreds[:10]","b25950ca":"# how many teams played in all seasons?\nprint(games_season['team_1'].max())\nprint(games_season['team_1'].min())","32332470":"from keras.layers import Embedding\n\n# Count the unique number of teams\nn_teams = np.unique(games_season['team_1']).shape[0]\n\n# Create an embedding layer\nteam_lookup = Embedding(input_dim=n_teams,\n                        output_dim=1,\n                        input_length=1,\n                        name='Team-Strength')","4fbd3786":"from keras.layers import Flatten\n\n# Create an input layer for the team ID\nteamid_in = Input(shape=(1,))\n\n# Lookup the input in the team strength embedding layer\nstrength_lookup = team_lookup(teamid_in)\n\n# Flatten the output\nstrength_lookup_flat = Flatten()(strength_lookup)\n\n# Combine the operations into a single, re-usable model\nteam_strength_model = Model(teamid_in, strength_lookup_flat, name='Team-Strength-Model')","0e43b97d":"# Input layer for team 1\nteam_in_1 = Input(shape=(1,), name= 'Team-1-In')\n\n# Separate input layer for team 2\nteam_in_2 = Input(shape=(1,), name= 'Team-2-In')\n\n# Lookup team 1 in the team strength model\nteam_1_strength = team_strength_model(team_in_1)\n\n# Lookup team 2 in the team strength model\nteam_2_strength = team_strength_model(team_in_2)","18a6dee8":"# Import the Subtract layer from keras\nfrom keras.layers import Subtract\n\n# Create a subtract layer using the inputs from the previous exercise\nscore_diff = Subtract()([team_1_strength, team_2_strength])\nscore_diff","8f89b20d":"# Subtraction layer from previous exercise\nscore_diff = Subtract()([team_1_strength, team_2_strength])\n\n# Create the model\nmodel = Model([team_in_1, team_in_2], score_diff)\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_absolute_error')\nmodel.summary()","214ab12e":"plot_model(model, to_file = 'model.png')\nimg = plt.imread('model.png')\nplt.imshow(img)\nplt.show()","bea81b63":"# Get the team_1 column from the regular season data\ninput_1 = games_season['team_1']\n\n# Get the team_2 column from the regular season data\ninput_2 = games_season['team_2']\n\n# Fit the model to input 1 and 2, using score diff as a target\nmodel.fit([input_1,input_2],\n          games_season['score_diff'],\n          epochs=1,\n          batch_size=2048,\n          validation_split=.1,\n          verbose=True)","56fb22bd":"# Get team_1 from the tournament data\ninput_1 = games_tourney['team_1']\n\n# Get team_2 from the tournament data\ninput_2 = games_tourney['team_2']\n\n# Evaluate the model using these inputs and make predictions\nprint(model.evaluate([input_1, input_2], games_tourney['score_diff'], verbose=False))\npreds = model.predict([input_1, input_2], verbose=False)\npreds[:10]","02ad6870":"from keras.layers import Concatenate\n# Create an Input for each team\nteam_in_1 = Input(shape=(1,), name='Team-1-In')\nteam_in_2 = Input(shape=(1,), name='Team-2-In')\n\n# Create an input for home vs away\nhome_in = Input(shape=(1,), name='Home-In')\n\n# Lookup the team inputs in the team strength model\nteam_1_strength = team_strength_model(team_in_1)\nteam_2_strength = team_strength_model(team_in_2)\n\n# Combine the team strengths with the home input using a Concatenate layer, then add a Dense layer\nout = Concatenate()([team_1_strength, team_2_strength, home_in])\nout = Dense(1)(out)","5fefadf9":"# Make a Model\nmodel = Model([team_in_1, team_in_2, home_in], out)\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_absolute_error')\nmodel.summary()","47e07795":"plot_model(model, to_file = 'model.png')\nimg = plt.imread('model.png')\nplt.imshow(img)\nplt.show()","350e5a11":"# Fit the model to the games_season dataset\nmodel.fit([games_season['team_1'], games_season['team_2'], games_season['home']],\n          games_season['score_diff'],\n          epochs=1,\n          verbose=True,\n          validation_split=.1,\n          batch_size=2048)\n\n# Evaluate the model on the games_tourney dataset\nprint(model.evaluate([games_tourney['team_1'], games_tourney['team_2'], games_tourney['home']], games_tourney['score_diff'], verbose=False))","50d20ed6":"# Predict\ngames_tourney['pred'] = model.predict([games_tourney['team_1'],games_tourney['team_2'], games_tourney['home']])\ngames_tourney.head()","6532ff19":"# Create an input layer with 3 columns\ninput_tensor = Input(shape=(3,))\n\n# Pass it to a Dense layer with 1 unit\noutput_tensor = Dense(1)(input_tensor)\n\n# Create a model\nmodel = Model(input_tensor, output_tensor)\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_absolute_error')\nmodel.summary()","287c6d3e":"games_tourney_train = games_tourney[games_tourney['season'] < 2010]\ngames_tourney_test = games_tourney[games_tourney['season'] >= 2010]\nprint(games_tourney_train.shape)\ngames_tourney_test.shape","f6e8367a":"# Fit the model\nmodel.fit(games_tourney_train[['home', 'seed_diff', 'pred']],\n          games_tourney_train['score_diff'],\n          epochs=1,\n          verbose=True)","35a66a80":"# Evaluate the model on the games_tourney_test dataset\nprint(model.evaluate(games_tourney_test[['home', 'seed_diff', 'pred']],\n               games_tourney_test['score_diff'], verbose=False))","6420af04":"preds = model.predict(games_tourney_test[['home', 'seed_diff', 'pred']])\npreds[:10]","cc0f1b3b":"# Define the input\ninput_tensor = Input(shape=(2,))\n\n# Define the output\noutput_tensor = Dense(2)(input_tensor)\n\n# Create a model\nmodel = Model(input_tensor, output_tensor)\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_absolute_error')","0fafb933":"games_tourney_train = games_tourney[games_tourney['season'] < 2012]\ngames_tourney_test = games_tourney[games_tourney['season'] >= 2012]","3d108383":"games_tourney_train = games_tourney[games_tourney['season'] < 2012]\ngames_tourney_test = games_tourney[games_tourney['season'] >= 2012]","2be7e1df":"# Fit the model\nmodel.fit(games_tourney_train[['seed_diff', 'pred']],\n  games_tourney_train[['score_1', 'score_2']],\n  verbose=False,epochs=1000,batch_size=64)","f23c800d":"print(model.evaluate(games_tourney_test[['seed_diff', 'pred']], games_tourney_test[['score_1', 'score_2']], verbose=False))","12e28f50":"pred_scores = model.predict(games_tourney_test[['seed_diff', 'pred']], verbose=False)\npred_scores = pd.DataFrame(pred_scores, columns = ['score_1', 'score_2'])\npred_scores.head(10)","42bbaeb8":"(pred_scores['score_1']-pred_scores['score_2']).mean()","605be956":"print(games_tourney_train[['seed_diff', 'pred']].mean())","30561572":"# Create an input layer with 2 columns\ninput_tensor = Input(shape=(2,))\n\n# Create the first output\noutput_tensor_1 = Dense(1, activation='linear', use_bias=False)(input_tensor)\n\n# Create the second output (use the first output as input here)\noutput_tensor_2 = Dense(1, activation='sigmoid', use_bias=False)(output_tensor_1)\n\n# Create a model with 2 outputs\nmodel = Model(input_tensor, [output_tensor_1, output_tensor_2])","6c035d5c":"# Import the Adam optimizer\nfrom keras.optimizers import Adam\n\n# Compile the model with 2 losses and the Adam optimzer with a higher learning rate\nmodel.compile(loss=['mean_absolute_error', 'binary_crossentropy'], optimizer=Adam(lr=.01))\n\n# Fit the model to the tournament training data, with 2 inputs and 2 outputs\nmodel.fit(games_tourney_train[['seed_diff', 'pred']],\n          [games_tourney_train[['score_diff']], games_tourney_train[['won']]],\n          epochs=10,\n          verbose=True,\n          batch_size=16384)","d51289aa":"# Print the model weights\nprint(model.get_weights())","e4900330":"# Import the sigmoid function from scipy\nfrom scipy.special import expit as sigmoid\n\n# Weight from the model\nweight = 0.30\n\n# Print the approximate win probability predicted close game\nprint(sigmoid(1 * weight))\n\n# Print the approximate win probability predicted blowout game\nprint(sigmoid(10 * weight))","ec0295c3":"# Evaluate the model on new data\nprint(model.evaluate(games_tourney_test[['seed_diff', 'pred']],\n               [games_tourney_test[['score_diff']], games_tourney_test[['won']]], verbose=False))","d9824511":"# make predictions\nfinal_predictions = model.predict(games_tourney_test[['seed_diff', 'pred']], verbose=False)\nprint(len(final_predictions))\nprint(final_predictions[0][:10],'\\n','\\n', final_predictions[1][:10])","e6c1cacd":"print(\"------ End of Notebook ------\")","4c276e69":"From the graphs we can infer that the small datasets indicate that the score and seed difefrences are near normally distributed. We see seed difference is positively correlated to score difference (which detremines who wins), so also whether the ground is home turf or not. he data is clean integer data ready for predictions and can be straight forward adopted for model building.","f8574cff":"Make the final predictions.","0f71f6a5":"As we know home is a factor influencing who wins the game, in effect predicting score difference, let us add that to our model.","eedcd2fa":"The first list the predicted score differences between the two teams and the second list is the predicted probability that the first tea is the winner.","8fe8553e":"We can evaluate the model for the error and also see our predictions for score_1 and score_2","40d8073d":"Let us have a look at the weights for this model. ","d974b2dd":"Now we define team strength look up model for team_1 and team_2.","e57c1ed8":"This preliminary model predicts the score difference between the teams with an avearge deviation of 11.61","f83f86ea":"Let us split the games_tourney data into - before season 2010 as training set, and the ones from season 2010 onwards as test set. Then we fit, evaluate & predict our model on these datsets.","91150ab4":"Let us visualize our model.","03f89672":"Now let us predict the score difference and add the predictions to the tournament dataset.","c871458d":"To build the model, we again use games_tourney.csv data to create train and test sets.","b1f1ef56":"57% is a situation where either team can win and 95% is a situation where team_1 wins.","ee0f33b8":"This note book is about predicting the score difference between two teams in a basket ball game, their scores and winner in a single model.\n\nThe task at hand is clearly both classification and regression in one model.\n\nAs the names imply, the dataset games_season.csv provides data on the season games and games_tourney.csv provides data on the tournaments. Tournaments are played at the end of seasons, so it will be apt to build and train our prediction models on season data initially and evaluate the model preeictive performance on the tournament data. \n\nWe will predict score differences and add the same to games_tourney.csv to create a file similar to games_season_enriched.csv file.\n\nIn the process, we will progressively build and improvise various models.","0527af4b":"The last weight of the model converts the predicted score difference to a predicted win probability. If we multiply the predicted score difference by the last weight of the model and then apply the sigmoid function, we get the win probability of the game.","5eab2a9a":"We will use only the games_tourney.csv and games_season.csv as games_season_enriched.csv is same as games_tourney.csv but with a predicted column, which we will create as an output of this exercise.","cddf2d91":"Now we will create a different type of 2-output model. We will predict the score difference, instead of both team's scores and predict the probability that team 1 won the game. This is both regression and classification predictions using one model with inputs being seed difference and predicted score difference.\n\nIn this model, we will turn off the bias for each layer as the inputs have means of very close to zero. So your model shouldn't need the bias term to fit the data well.","d438aa1f":"Let us split the dataset into train & test sets with train set upto season 2011 (3430 observations) and use remaining as test set.","aba4f596":"Now, let us develop a model to predict score difference by developing team strengths given two teams in the games_season.csv, rather than using the seed difference column given in the games_tourney.csv dataset. First we start with building team strength look up model using a team look up embed layer. The model will learn the strength scores, and the difference can be viewed to predict who wins the game and to predict the score difference.","fa70912c":"The first number is the sum of both the loss functions, and  the next 2 numbers are the loss functions defined in the model, 'mean_absolute_error' and 'binary_crossentropy'.","abe14bfd":"Now, we will build our next model with 3 inputs, 'seed_diff', 'home', and 'pred'.","5ea727b6":"We can consider a close game as with 1 point difference and blowout game is with a 10 point difference. Let us find out probabilities for such games.","28d78a4f":"With this the mean absolute error for the predicted score diffrence is smaller than the earlier 2 input model, which was about 11.68","f672253a":"Let us construct our first, basic deep learning model with one input and one output to predict score_diff, given seed_diff. For this purpose we use the games_tourney.csv dataset as games_season.csv does not have seed difference feature.","15c85f04":"Now, finally we evaluate our model performance on test data.","44b37861":"Now we use the games_tourney data to build a model that makes two predictions: the scores of both teams in a given game. This is ultiple target regression problem un like all those so far, which were single regression target problems."}}