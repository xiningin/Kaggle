{"cell_type":{"5bd23a47":"code","831e3094":"code","7d0735ae":"code","75d28486":"code","b9fa12b7":"code","9a96025a":"code","23184f30":"code","bf12921a":"code","72be6b6b":"code","94c4820b":"code","04b61b16":"code","f19ca6cf":"code","669d22a6":"code","8afde911":"code","458080c6":"code","743398e6":"code","75060043":"code","dcc27cb0":"markdown","47b1ae92":"markdown","d077ebe8":"markdown"},"source":{"5bd23a47":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2 as cv\n\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\nfrom keras.layers import Conv2D, Dropout, MaxPooling2D, Dense, Flatten, LeakyReLU, Softmax\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam","831e3094":"dir_path = '..\/input\/license-plate-digits-classification-dataset\/CNN letter Dataset'\ndigits = sorted(os.listdir(dir_path))\nNUM_CLASSES = len(digits)\nprint(digits)\nprint('Number of classes (letters and digits): ', NUM_CLASSES)","7d0735ae":"digits_counter = {}\nNUM_IMAGES = 0\n\nfor digit in digits:\n    path = os.path.join(dir_path, digit)\n    digits_counter[digit] = len(os.listdir(path))\n    NUM_IMAGES += len(os.listdir(path))\n\nprint(digits_counter)\nprint('Number of all images: ', NUM_IMAGES)","75d28486":"from matplotlib.image import imread\nrows, columns = 7, 5\n\nk = 0\nfig, axes = plt.subplots(rows, columns, figsize=(30, 30))\nfor row in range(rows):\n    for column in range(columns):\n        rand_num = np.random.randint(0, digits_counter[digits[k]])\n        class_path = dir_path + '\/' + str(digits[k])\n        image_path = class_path + '\/' + str(os.listdir(class_path)[rand_num])\n        ax = axes[row, column]\n        ax.set_title(digits[k], loc='center', fontsize=16)\n        ax.imshow(imread(image_path), cmap='gray')\n        k += 1\nplt.show()","b9fa12b7":"data = []\nlabels = []\nMAX_NUM = None   # maximum number of digits images per class\nIMG_WIDTH, IMG_HEIGHT = 32, 40\n\n# images of digits '6' in folder with '2'\nincorrect_img = [\n    'aug20121_0.jpg',\n    'aug20122_1.jpg',\n    'aug20123_2.jpg',\n    'aug20124_3.jpg',\n    'aug20125_4.jpg',\n    'aug20126_5.jpg',\n    'aug20127_6.jpg',\n    'aug20128_7.jpg',\n    'aug20129_8.jpg',\n    'aug20130_9.jpg'\n]\n\nfor digit in digits:\n    path = os.path.join(dir_path, digit)\n    label = digits.index(digit)\n    for img in os.listdir(path):\n        if img in incorrect_img:\n            continue\n        img_path = os.path.join(path, img)\n        img_array = cv.imread(img_path)\n        resized = cv.resize(img_array, (IMG_WIDTH, IMG_HEIGHT), interpolation = cv.INTER_AREA)\n        gray = cv.cvtColor(resized, cv.COLOR_RGB2GRAY)        \n        data.append(gray)\n        labels.append(label)\n        if MAX_NUM is not None:\n            if labels.count(label) == MAX_NUM:\n                break\n\ndata = np.array(data, dtype='float32')\nlabels = np.array(labels, dtype='int8')","9a96025a":"print(data.shape)","23184f30":"data = data \/ 255.0\ndata = data.reshape(*data.shape, 1)\nlabels = to_categorical(labels, num_classes=NUM_CLASSES)","bf12921a":"X_train, X_test, y_train, y_test = train_test_split(data, labels, shuffle=True, test_size=.3)\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, shuffle=True, test_size=.3)\n\nprint(\"Training dataset shape: \", X_train.shape, y_train.shape)\nprint(\"Validation dataset shape: \", X_val.shape, y_val.shape)\nprint(\"Testing dataset shape: \", X_test.shape, y_test.shape)","72be6b6b":"alpha_leaky = 0.1\n\nmodel = Sequential()\nmodel.add(Conv2D(filters=96, kernel_size=(5, 5), activation=LeakyReLU(alpha=alpha_leaky), padding='same', input_shape=(X_train.shape[1:])))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.5))\nmodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation=LeakyReLU(alpha=alpha_leaky), padding='same'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.5))\nmodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation=LeakyReLU(alpha=alpha_leaky), padding='same'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.5))\nmodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation=LeakyReLU(alpha=alpha_leaky), padding='same'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation=LeakyReLU(alpha=alpha_leaky)))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(64, activation=LeakyReLU(alpha=alpha_leaky)))\nmodel.add(Dense(NUM_CLASSES, activation=Softmax()))\nmodel.summary()","94c4820b":"model.compile(optimizer=Adam(learning_rate=0.001),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])","04b61b16":"history = model.fit(X_train, y_train,\n                    epochs=100, batch_size=256,\n                    validation_data=(X_val, y_val))","f19ca6cf":"START_EPOCH = 4\nepochs = range(START_EPOCH, len(history.history['accuracy']) + 1)\nSTEP_TICKS = int(epochs[-1]\/12)\n\nfig, axes = plt.subplots(1, 2, figsize=(16, 6))\naxes[0].plot(epochs, history.history['accuracy'][START_EPOCH-1:], 'g', label='Training set accuracy')\naxes[0].plot(epochs, history.history['val_accuracy'][START_EPOCH-1:], 'b', label='Validation set accuracy')\naxes[0].hlines(1.0, epochs[0], epochs[-1], color='r', linestyle='dashed')\naxes[0].set_title('Training and validation accuracy')\naxes[0].set_xticks(range(START_EPOCH, len(history.history['accuracy']) + 1)[::STEP_TICKS])\naxes[0].set_xlabel('Number of epochs')\naxes[0].set_ylabel('Accuracy')\naxes[0].legend()\n\naxes[1].plot(epochs, history.history['loss'][START_EPOCH-1:], 'g', label='Training set loss')\naxes[1].plot(epochs, history.history['val_loss'][START_EPOCH-1:], 'b', label='Validation set loss')\naxes[1].hlines(0.0, epochs[0], epochs[-1], color='r', linestyle='dashed')\naxes[1].set_title('Training and validation loss')\naxes[1].set_xticks(range(START_EPOCH, len(history.history['accuracy']) + 1)[::STEP_TICKS])\naxes[1].set_xlabel('Number of epochs')\naxes[1].set_ylabel('Loss')\naxes[1].legend()\n\nplt.show()","669d22a6":"loss, acc = model.evaluate(X_test, y_test)\nprint(\"\\nAccuracy on testing dataset: %.2f\" % (acc * 100))","8afde911":"y_pred = np.argmax(model.predict(X_test), axis=-1)","458080c6":"bad_predictions = []\ni = 0\nfor pred in y_pred:\n    if pred != np.argmax(y_test[i]):\n        bad_predictions.append(i)\n    i += 1\nprint('Number of bad predictions: ', len(bad_predictions))","743398e6":"for i in range(len(bad_predictions)):\n    index = bad_predictions[i]\n    print(f\"True: {digits[np.argmax(y_test[index])]}, Predicted: {digits[y_pred[index]]}\")\n    plt.imshow(X_test[index], cmap='gray')\n    plt.show()","75060043":"model.save('.\/model')","dcc27cb0":"## Model creation","47b1ae92":"## Data preparation","d077ebe8":"## Loading data into numpy arrays"}}