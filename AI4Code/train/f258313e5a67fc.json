{"cell_type":{"56a016fc":"code","2120f2fb":"code","cc89cc1c":"code","2a35def1":"code","c8070163":"code","2c19a9b4":"code","c1a23964":"code","a3508d35":"code","8cd7f004":"code","445145ba":"code","270d7b83":"code","bfcb0fee":"code","d7eb5870":"code","6983ed64":"code","90ecd3a1":"code","423ffadd":"code","af42c7a0":"code","01d61e3a":"code","4a119655":"code","8e6a00ef":"code","1a985aa9":"code","57d0e5af":"markdown","331fab50":"markdown","22157e16":"markdown","e7d3fafe":"markdown","1da047fb":"markdown","aecc729d":"markdown","727d26aa":"markdown","cddf2c4a":"markdown","4605eef7":"markdown","95a14637":"markdown","9bb6bbf7":"markdown"},"source":{"56a016fc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nstyle.use('ggplot')\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\nfrom scipy.stats import norm\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, SGDRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor, BaggingRegressor, AdaBoostRegressor\nfrom sklearn import ensemble\nfrom lightgbm import LGBMRegressor\nfrom xgboost.sklearn import XGBRegressor\nfrom plotnine import *\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ntheme = theme_xkcd() + theme(figure_size=(10,6))","2120f2fb":"df = pd.read_csv('\/kaggle\/input\/california-housing-prices-data-extra-features\/California_Houses.csv')\ndf_original = df.copy()","cc89cc1c":"df.info()","2a35def1":"df.describe()","c8070163":"dict = {}\nfor col in list(df.columns):\n    dict[col] = df[col].value_counts().shape[0]\n\npd.DataFrame(dict,index=[\"unique count\"]).T","2c19a9b4":"cont_col = ['Median_Income', 'Median_Age', 'Tot_Rooms', 'Tot_Bedrooms', 'Population', 'Households', 'Distance_to_coast', \n            'Distance_to_LA', 'Distance_to_SanDiego', 'Distance_to_SanJose', 'Distance_to_SanFrancisco']\nloc_col = ['Latitude', 'Longitude']\ndist_col = ['Distance_to_coast', 'Distance_to_LA', 'Distance_to_SanDiego', 'Distance_to_SanJose', 'Distance_to_SanFrancisco']\ntarget = 'Median_House_Value'","c1a23964":"def remove_outlier(df, col_name):\n    q1 = df[col_name].quantile(0.25)\n    q3 = df[col_name].quantile(0.75)\n    iqr = q3-q1 #Interquartile range\n    outlier = []\n    for i in df[col_name]:\n        if i<(q1 - 1.5 * iqr) or i>(q3 + 1.5 * iqr):\n            outlier.append(i)\n    outlier = pd.DataFrame(outlier,columns=['outlier'])\n    print('There is {}% Outlier removed in {} according to IQR rule'.format(round((outlier.shape[0]\/df.shape[0])*100,2),col_name))\n    fence_low  = q1-1.5*iqr\n    fence_high = q3+1.5*iqr\n    df = df[(df[col_name] > fence_low) & (df[col_name] < fence_high)]\n    return df\n\ndef corrmatrix(df,target_col,num=len(df)):\n    corrmatrix = df.corr()\n    plt.figure(figsize = (20,10))\n    columnss = corrmatrix.nlargest(num, target_col)[target_col].index\n    cm = np.corrcoef(df[columnss].values.T)\n    sns.set(font_scale = 1)\n    hm = sns.heatmap(cm, cbar = True, annot = True, square = True, cmap = \"RdPu\" ,  fmt = \".2f\", annot_kws = {\"size\": 10},\n                     yticklabels = columnss.values, xticklabels = columnss.values)\n    plt.show()\n    \ndef visualize_target(df, feature):\n    print('Feature: {}, Skewness: {}, Kurtosis: {}'.format(feature,round(df[feature].skew(),5),round(df[feature].kurt(),5)))\n    \n    fig = plt.figure(constrained_layout=True, figsize=(12,6))\n    grid = gridspec.GridSpec(ncols=5, nrows=5, figure=fig)\n\n    ax1 = fig.add_subplot(grid[0:2, :4])\n    ax1.set_title('Histogram')\n    sns.distplot(df.loc[:,feature], norm_hist=True,fit=norm, ax = ax1,color='indianred')\n\n    ax2 = fig.add_subplot(grid[2:, :4])\n    ax2.set_title('QQ_plot')\n    stats.probplot(df.loc[:,feature], plot = ax2)\n\n    ax3 = fig.add_subplot(grid[:, 4])\n    ax3.set_title('Box Plot')\n    sns.boxplot(y=df.loc[:,feature], orient='v', ax = ax3,color='indianred')","a3508d35":"visualize_target(df,target)","8cd7f004":"df = remove_outlier(df,target)","445145ba":"visualize_target(df,target)","270d7b83":"df[\"Median_House_Value\"] = np.log(df[\"Median_House_Value\"])","bfcb0fee":"visualize_target(df,target)","d7eb5870":"plt.figure(figsize=(20, 12))\nfor i, column in enumerate(cont_col, 1):\n    plt.subplot(3, 4, i)\n    sns.distplot(x=df[column],color='indianred')\n    plt.legend()\n    plt.xlabel(column)","6983ed64":" corrmatrix(df,target)","90ecd3a1":"(\nggplot(data = df_original) +\n    geom_point(mapping=aes(x='Longitude',y='Latitude',size='Population',color='Median_House_Value'),alpha=0.4) +\n    labs(title='Chicago Median House Price') +\n    theme\n)","423ffadd":"x = df.drop(['Median_House_Value','Longitude','Latitude'],axis=1)\nscaler = StandardScaler()\nscaler.fit(x)\nx_scaled = scaler.transform(x)\ny = df['Median_House_Value']\n\nx_train, x_test, y_train, y_test = train_test_split(x_scaled,y,test_size=0.2,random_state=0)\nprint(f'Train input: {x_train.shape}')\nprint(f'Train target: {y_train.shape}')\nprint(f'Test input: {x_test.shape}')\nprint(f'Test target: {y_test.shape}')","af42c7a0":"r2 = []\nmodel = []\nRMSE = []\nregressor = [LinearRegression(),RandomForestRegressor(),KNeighborsRegressor(),ensemble.GradientBoostingRegressor(),LGBMRegressor(),XGBRegressor()]\nfor obj in regressor:\n    model_name = type(obj).__name__\n    obj.fit(x_train,y_train)\n    predict=obj.predict(x_test)\n    r2.append(r2_score(y_test,predict))\n    model.append(model_name)\n    RMSE.append(mean_squared_error(y_test, predict, squared=False))\nmodels = pd.DataFrame({'Model':model, 'r2':r2, 'RMSE':RMSE})\nprint(models)","01d61e3a":"models = models.set_index('Model')\nplt.figure(figsize=(20,5))\nmodels['RMSE'].sort_values().plot(kind='barh', color='r', align='center')\nplt.title('RMSE for models')","4a119655":"reg = XGBRegressor()\nreg.fit(x_train,y_train)\nmodel_name = type(reg).__name__\n\nfor name, importance in zip(x, reg.feature_importances_):\n    print(name, \"=\", round(importance,3))","8e6a00ef":"features = x\nimportances = reg.feature_importances_\nindices = np.argsort(importances)\n\nplt.figure(figsize=(20,5))\nplt.title('Feature Importances of {}'.format(model_name))\nplt.barh(range(len(indices)), importances[indices], color='r', align='center')\nplt.yticks(range(len(indices)),features.columns[indices])\nplt.xlabel('Relative Importance')\nplt.show()","1a985aa9":"y_test = np.exp(y_test)\ny_pred = np.exp(reg.predict(x_test))\n\nmodel_name = type(reg).__name__\nplt.subplots(figsize=(8,8))\nplt.scatter(y_pred,y_test,s=4, color='indianred')\nplt.plot(y_test, y_test,color='cornflowerblue', linewidth=3)\nplt.title('{}: Predictions vs Observed Values'.format(model_name))\nprint(\"Accuracy score for {} is {:.2f}, RMSE is {:.2f}\".format(model_name,r2_score(y_test, y_pred),mean_squared_error(y_test, y_pred, squared=False)))","57d0e5af":"### Anomaly Detection and Removal","331fab50":"# Exploratory Data Analysis","22157e16":"### Correlation matrix","e7d3fafe":"# House price corresponding to location","1da047fb":"### Apply np.log() to target","aecc729d":"### Check distribution of continuous variables","727d26aa":"# Import modules and data","cddf2c4a":"### Median house value prediction","4605eef7":"# Machine learning","95a14637":"### Feature importance","9bb6bbf7":"### Fitting models"}}