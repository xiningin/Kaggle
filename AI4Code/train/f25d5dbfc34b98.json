{"cell_type":{"c1ac53a5":"code","d7a91585":"code","77d8ac64":"code","191a19fe":"code","e5d972e5":"code","bd12cbd2":"code","1987dea8":"code","6b36bf33":"code","3ce35615":"code","b7ccef8c":"code","512d538a":"code","d2ec7a72":"code","05c5291f":"code","73689527":"code","ac3861e0":"code","57921ec2":"code","e6017fa8":"code","e9ad1d24":"code","8fec4bcd":"markdown","c58987c8":"markdown","138df09a":"markdown","accdf70d":"markdown","6cbe662f":"markdown","c98ce20c":"markdown","a840f0f9":"markdown","3750cc2e":"markdown","63e96431":"markdown"},"source":{"c1ac53a5":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.metrics import accuracy_score\nfrom tqdm import tqdm\nfrom catboost import CatBoostClassifier, Pool","d7a91585":"train_data = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-dec-2021\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-dec-2021\/test.csv\")","77d8ac64":"print(train_data.shape)\nprint(test_data.shape)\n\ntrain_data.head()","191a19fe":"df = train_data[['Id', 'Cover_Type']].groupby(['Cover_Type']).count().rename(columns={\"Id\": \"Count\"})\ndef style_negative(v, props=''):\n    return props if v < 2 else None\ndf.style.applymap(style_negative, props='color:white;background-color:darkred')","e5d972e5":"train_data = train_data[train_data['Cover_Type']!=5]","bd12cbd2":"X = train_data.drop(columns=['Id', 'Cover_Type'])\ny = train_data[['Cover_Type']]\n\nX_test = test_data.drop(columns=['Id'])","1987dea8":"new_names = {\n    \"Horizontal_Distance_To_Hydrology\": \"x_dist_hydrlgy\",\n    \"Vertical_Distance_To_Hydrology\": \"y_dist_hydrlgy\",\n    \"Horizontal_Distance_To_Roadways\": \"x_dist_rdwys\",\n    \"Horizontal_Distance_To_Fire_Points\": \"x_dist_firepts\"\n}\n\nX.rename(new_names, axis=1, inplace=True)\nX_test.rename(new_names, axis=1, inplace=True)\n\nX[\"Aspect\"][X[\"Aspect\"] < 0] += 360\nX[\"Aspect\"][X[\"Aspect\"] > 359] -= 360\n\nX_test[\"Aspect\"][X_test[\"Aspect\"] < 0] += 360\nX_test[\"Aspect\"][X_test[\"Aspect\"] > 359] -= 360\n\n# Manhhattan distance to Hydrology\nX[\"mnhttn_dist_hydrlgy\"] = np.abs(X[\"x_dist_hydrlgy\"]) + np.abs(X[\"y_dist_hydrlgy\"])\nX_test[\"mnhttn_dist_hydrlgy\"] = np.abs(X_test[\"x_dist_hydrlgy\"]) + np.abs(X_test[\"y_dist_hydrlgy\"])\n\n# Euclidean distance to Hydrology\nX[\"ecldn_dist_hydrlgy\"] = (X[\"x_dist_hydrlgy\"]**2 + X[\"y_dist_hydrlgy\"]**2)**0.5\nX_test[\"ecldn_dist_hydrlgy\"] = (X_test[\"x_dist_hydrlgy\"]**2 + X_test[\"y_dist_hydrlgy\"]**2)**0.5\n\nsoil_features = [x for x in X.columns if x.startswith(\"Soil_Type\")]\nX[\"soil_type_count\"] = X[soil_features].sum(axis=1)\nX_test[\"soil_type_count\"] = X_test[soil_features].sum(axis=1)\n\nwilderness_features = [x for x in X.columns if x.startswith(\"Wilderness_Area\")]\nX[\"wilderness_area_count\"] = X[wilderness_features].sum(axis=1)\nX_test[\"wilderness_area_count\"] = X_test[wilderness_features].sum(axis=1)\n\nX.loc[X[\"Hillshade_9am\"] < 0, \"Hillshade_9am\"] = 0\nX_test.loc[X_test[\"Hillshade_9am\"] < 0, \"Hillshade_9am\"] = 0\n\nX.loc[X[\"Hillshade_Noon\"] < 0, \"Hillshade_Noon\"] = 0\nX_test.loc[X_test[\"Hillshade_Noon\"] < 0, \"Hillshade_Noon\"] = 0\n\nX.loc[X[\"Hillshade_3pm\"] < 0, \"Hillshade_3pm\"] = 0\nX_test.loc[X_test[\"Hillshade_3pm\"] < 0, \"Hillshade_3pm\"] = 0\n\nX.loc[X[\"Hillshade_9am\"] > 255, \"Hillshade_9am\"] = 255\nX_test.loc[X_test[\"Hillshade_9am\"] > 255, \"Hillshade_9am\"] = 255\n\nX.loc[X[\"Hillshade_Noon\"] > 255, \"Hillshade_Noon\"] = 255\nX_test.loc[X_test[\"Hillshade_Noon\"] > 255, \"Hillshade_Noon\"] = 255\n\nX.loc[X[\"Hillshade_3pm\"] > 255, \"Hillshade_3pm\"] = 255\nX_test.loc[X_test[\"Hillshade_3pm\"] > 255, \"Hillshade_3pm\"] = 255\n\nfrom sklearn.preprocessing import RobustScaler\n\ncols = [\n    \"Elevation\",\n    \"Aspect\",\n    \"mnhttn_dist_hydrlgy\",\n    \"ecldn_dist_hydrlgy\",\n    \"soil_type_count\",\n    \"wilderness_area_count\",\n    \"Slope\",\n    \"x_dist_hydrlgy\",\n    \"y_dist_hydrlgy\",\n    \"x_dist_rdwys\",\n    \"Hillshade_9am\",\n    \"Hillshade_Noon\",\n    \"Hillshade_3pm\",\n    \"x_dist_firepts\",\n    \"soil_type_count\",\n    \"wilderness_area_count\"\n]\n\nscaler = RobustScaler()\nX[cols] = scaler.fit_transform(X[cols])\nX_test[cols] = scaler.transform(X_test[cols])","6b36bf33":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2\n\n    for col in df.columns:\n        col_type = df[col].dtypes\n\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n\n    if verbose:\n        print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n \n    return df\n\nX = reduce_mem_usage(X)\nX_test = reduce_mem_usage(X_test)","3ce35615":"# Set up folds\nK = 5\nkf = KFold(n_splits = K, random_state = 42, shuffle = True)","b7ccef8c":"for train_idx, val_idx in kf.split(X):\n    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n    y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n    break","512d538a":"import optuna\n\ndef optimize_hp(trial):\n    cb_params = {\n        'iterations': 1000,\n        'learning_rate': trial.suggest_loguniform('learning_rate', 0.1, 1.0),\n        'l2_leaf_reg': trial.suggest_loguniform('l2_leaf_reg', 1, 100),\n        'bagging_temperature': trial.suggest_loguniform('bagging_temperature', 0.1, 20.0),\n        'random_strength': trial.suggest_float('random_strength', 1.0, 2.0),\n        'depth': trial.suggest_int('depth', 1, 10),\n        'min_data_in_leaf': trial.suggest_int('min_data_in_leaf', 1, 300),\n        \"use_best_model\": True,\n        \"task_type\": \"GPU\",\n        'random_seed': 42\n    }\n    \n    model = CatBoostClassifier(**cb_params)\n    model.fit(X_train, y_train, eval_set=(X_val, y_val), verbose=False)\n    y_pred = model.predict(X_val)\n    return accuracy_score(y_val, y_pred)","d2ec7a72":"# study = optuna.create_study(direction=\"maximize\")\n# study.optimize(optimize_hp, n_trials=10)\n# print('Trials:', len(study.trials))\n# print('Best parameters:', study.best_trial.params)\n# print('Best score:', study.best_value)","05c5291f":"cb_params = {\n    'learning_rate': 0.3277295792305584,\n    'l2_leaf_reg': 3.1572972266001518,\n    'bagging_temperature': 0.6799604234141348,\n    'random_strength': 1.99590400593318,\n    'depth': 6,\n    'min_data_in_leaf': 93,\n    'iterations': 10000,\n    'use_best_model': True,\n    'task_type': 'GPU',\n    'random_seed': 42\n}\nmodel = CatBoostClassifier(**cb_params)","73689527":"CV = []\ny_test_proba = 0\nfor i, (train_idx, val_idx) in tqdm(enumerate(kf.split(X)), total=K):\n    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n    y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n    fit_model = model.fit(X_train, y_train,\n                          eval_set=Pool(X_val, y_val),\n                          verbose=False,\n                          use_best_model=True)\n    \n    # Get CV Score\n    y_pred = fit_model.predict(X_val)\n    accuracy = accuracy_score(y_val, y_pred)\n    CV.append(accuracy)\n    \n    # Inference on test data\n    y_test_proba += fit_model.predict_proba(X_test)\n    \nprint(f'CV Score: {CV}')","ac3861e0":"answer = np.argmax(np.insert(y_test_proba\/5, 4, 0, axis=1), axis=1) + 1","57921ec2":"submission = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-dec-2021\/sample_submission.csv\")","e6017fa8":"submission.loc[:, 'Cover_Type'] = answer\nsubmission.head(10)","e9ad1d24":"submission.to_csv(\"submission.csv\", index=False)","8fec4bcd":"<center><h1 style = \"font-size:20px;font-family: Copperplate\">IMPORT THE LIBRARIES<\/h1><\/center>","c58987c8":"<center><h1 style = \"font-size:20px;font-family: Copperplate\">CatBoost with KFold<\/h1><\/center>","138df09a":"Just Drop Cover_Type 5.","accdf70d":"<center><h1 style = \"font-size:20px;font-family: Copperplate\">Data Loading & Preprocessing<\/h1><\/center>","6cbe662f":"<center><h1 style = \"font-size:20px;font-family: Copperplate\">Train and Inference<\/h1><\/center>","c98ce20c":"<center><h1 style = \"font-size:20px;font-family: Copperplate\">Feature Engineering<\/h1><\/center>","a840f0f9":"<center><h1 style = \"font-size:20px;font-family: Copperplate\">Submit<\/h1><\/center>","3750cc2e":"Please refer to [TPS Dec '21 | TensorFlow NN + Feature Engineering](https:\/\/www.kaggle.com\/gulshanmishra\/tps-dec-21-tensorflow-nn-feature-engineering).\nAmazing feature engineering skill.","63e96431":"<center><h1 style = \"font-size:20px;font-family: Copperplate\">Hyperparameter Optimization with Optuna<\/h1><\/center>"}}