{"cell_type":{"073a9c13":"code","47ac177c":"code","19c21a7a":"code","4b98615b":"code","13e5fd48":"code","f8ea25e9":"code","2cb06967":"code","ec3fb0ad":"code","14a73a70":"code","1ca4af7c":"code","43b1ea03":"code","72c1bb9c":"markdown","c927b1ee":"markdown","d42a3b27":"markdown","f485a67b":"markdown","0d9cb462":"markdown","c17bc99a":"markdown","4f8e75d8":"markdown","7489c7a7":"markdown","34b43495":"markdown","a04a43fd":"markdown","d67ab438":"markdown"},"source":{"073a9c13":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport seaborn as sns","47ac177c":"df = pd.read_csv('..\/input\/league-of-legends-diamond-ranked-games-10-min\/high_diamond_ranked_10min.csv')\ndf.head()","19c21a7a":"df.info()","4b98615b":"cols = ['gameId', 'blueEliteMonsters',  'blueAvgLevel',\n        'blueTotalMinionsKilled',  'blueCSPerMin',\n       'blueGoldPerMin', 'redFirstBlood', 'blueDeaths', 'redDeaths', 'redEliteMonsters', 'redTotalGold', 'redAvgLevel', 'redTotalExperience',\n       'redTotalMinionsKilled',  'redGoldDiff',\n       'redExperienceDiff', 'redCSPerMin', 'redGoldPerMin']\n\ndf_new = df.copy()\ndf_new = df_new.drop(cols, axis = 1)\n\ndf_new.head()","13e5fd48":"y = df_new['blueWins']\nX = sm.add_constant(df_new.loc[:, 'blueWardsPlaced' :])\n\nmodel = sm.Logit(y, X).fit()\nresults = model.summary()\nresults","f8ea25e9":"from sklearn.model_selection import train_test_split \n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=100)","2cb06967":"def minAIC(X,y):\n    variables = X.columns\n    model = sm.Logit(y,X[variables]).fit()\n    while True:\n        print(\"Old AIC = \", model.aic)\n        maxp = np.max(model.pvalues)\n        newvariables = variables[model.pvalues < maxp]\n        newmodel = sm.Logit(y,X[newvariables]).fit()\n        print(\"New AIC = \", newmodel.aic)\n        if newmodel.aic < model.aic:\n            model = newmodel\n            variables = newvariables\n        else:\n            break\n    return model,variables\n\nnew_model, logit_variables = minAIC(X_train, y_train)\nnew_model = sm.Logit(y_train, X_train[logit_variables]).fit()\nresults = new_model.summary()\nresults","ec3fb0ad":"colu = ['blueDragons',\n                  'blueGoldDiff', 'blueExperienceDiff', 'redDragons']\ndata = X_test.loc[:, colu  ]\ndata.head()","14a73a70":"answers = new_model.predict(data)\nanswers","1ca4af7c":"from sklearn.metrics import confusion_matrix, roc_curve\n\nFPR, TPR, thresh = roc_curve(y_test, answers)\nplt.scatter(FPR,TPR)\nplt.xlabel(\"FPR\")\nplt.ylabel(\"TPR\")\nplt.show()","43b1ea03":"from sklearn.metrics import accuracy_score\n\nanswers_2 =[]\nfor x in answers:\n  if x >=0.50:\n    answers_2.append(1)\n  else:\n    answers_2.append(0)\n    \nacc_knn = accuracy_score(answers_2, y_test)\nprint(\"accuracy score = \" ,acc_knn)\n","72c1bb9c":"In this situation false-positives and false negatives are not too different. One is not considered worse than the other. Unlike in medical applications where a false-negative would be much worse than a false-positive. So, lets just take a threshold value of 0.5 and calculate the accuracy score.","c927b1ee":"**Validation**","d42a3b27":"**Using Akaike Information Criterion to Determine Best Logistic Regression Model**","f485a67b":"BlueEliteMonsters and RedEliteMonsters are not necessary since dragons and hearalds are accounted for seperately.\nJungleminions is taken to account for ganks and since jungle is a unique role","0d9cb462":"**Creating a Basic Model**","c17bc99a":"It looks like the model it chooses depends on only four variables - blueDragons, blueGoldDiff, blueExperienceDiff, and RedDragons. In order to verify that this model works, we can use the test data. NOTE that depending on the random state used in the beginning that the model formed here can be slightly different. ","4f8e75d8":"**Splitting the data for Cross-Validation**","7489c7a7":"**Removing Redundant Columns**","34b43495":"**Drawing the ROC Curve**","a04a43fd":"**The End**","d67ab438":"**Importing The Data**"}}