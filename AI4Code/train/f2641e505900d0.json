{"cell_type":{"6cc5b2f2":"code","0b8126a1":"code","99d9738d":"code","c9fbcf66":"code","c4799c76":"code","59d46395":"code","fad5c0cd":"code","7f27999d":"code","0b85e5a6":"code","712344ee":"code","899a4981":"code","547267ef":"code","4fed5f56":"code","b3163c71":"markdown","2aedc78b":"markdown","2679394c":"markdown","ce75f7d0":"markdown","7832e36a":"markdown"},"source":{"6cc5b2f2":"!pip install transformers==3.0.2\n# Hugging Face new library for datasets (https:\/\/huggingface.co\/nlp\/)\n!pip install nlp","0b8126a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport nlp # Hugginface extra datasets\nfrom nlp import load_dataset\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nnp.random.seed(1234) \n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","99d9738d":"mnli = load_dataset(path='glue', name='mnli') # loading more data from the Huggin face dataset\nsnli   =  load_dataset(\"snli\") # loading more data from the Huggin face dataset\nxnli = load_dataset('xnli') # more data from the huggin face dataset","c9fbcf66":"for i in range(len(xnli['test']['premise']) + len(xnli['validation']['premise'])):\n    \n    if i < len(xnli['test']['premise']):\n        \n        if i == 0:\n            \n            xnli_df = pd.concat([pd.Series(xnli['test']['premise'][i]), pd.Series(xnli['test']['hypothesis'][i]['translation'], index =\\\n                                                         xnli['test']['hypothesis'][i]['language'])],axis =1)\n            \n        else:\n            \n            xnli_df = pd.concat([xnli_df,\\\n                                pd.concat([pd.Series(xnli['test']['premise'][i]), pd.Series(xnli['test']['hypothesis'][i]['translation'], index =\\\n                                                         xnli['test']['hypothesis'][i]['language'])],axis =1)])\n    else:\n        \n        xnli_df = pd.concat([xnli_df,\\\n                            pd.concat([pd.Series(xnli['validation']['premise'][i-len(xnli[\"test\"][\"premise\"])]), pd.Series(xnli['validation']['hypothesis'][i-len(xnli[\"test\"][\"premise\"]) ]['translation'], index =\\\n                                                         xnli['validation']['hypothesis'][i- len(xnli[\"test\"][\"premise\"]) ]['language'])],axis =1)])\n\n\nxnli_df.to_csv('xnli_org.csv')\n        \n            \n            \n        \n        \n","c4799c76":"# Loading Data\n\n#import random\n\n#random.seed(123) # setting random \n\n#train_df = pd.read_csv('..\/input\/contradictory-my-dear-watson-augmented-dataset\/only english original train.csv')\n#print('Traning Data, the size of the dataset is: {} \\n'.format(train_df.shape))\n#display(train_df.head())\n#test_df = pd.read_csv('..\/input\/contradictory-my-dear-watson-augmented-dataset\/TTA1 dear watson.csv')\n#print('Test Data, the size of the dataset is: {} \\n'.format(test_df.shape))\n#display(test_df.head(10))\n#print(train_df.shape)\n\n#original_train_df = pd.read_csv('..\/input\/contradictory-my-dear-watson\/train.csv')","59d46395":"#import seaborn as sns\n#import matplotlib.pyplot as plt\n\n#fig = plt.figure(figsize = (15,5))\n\n#plt.subplot(1,2,1)\n#plt.title('Traning data language distribution')\n#sns.countplot(data = train_df, x = 'lang_abv', order = train_df['lang_abv'].value_counts().index)\n\n#plt.subplot(1,2,2)\n#plt.title('Test data laguage distribution')\n#sns.countplot(data = test_df, x = 'lang_abv', order = test_df['lang_abv'].value_counts().index)","fad5c0cd":"def extract(dataframe, lang_abv):\n    '''\n    this functions takes a dataframe and returns a dataframe with the sentences only in the language selected\n    '''\n    specific_df = dataframe[dataframe['lang_abv'] == lang_abv]\n    return specific_df\n\ndef trans_frame(dataframe, language):\n    \"\"\"\n    translate a single language dataframe to a specific language\n    \n    \"\"\"\n    trans_data = []\n    for i in range(dataframe.shape[0]):\n        translator = Translator()\n        \n        trans_data.append([dataframe.iloc[i]['id'], translator.translate(dataframe.iloc[i]['premise'], dest = language).text \\\n                           , translator.translate(dataframe.iloc[i]['hypothesis'], dest = language).text,\\\n                           language, dataframe.iloc[i]['label']])\n    \n    return pd.DataFrame(trans_data, columns = list(dataframe.columns))\n        \n    \n\ndef round_trans(dataframe, language_list, number):\n\n    '''\n    this function takes a dataframe with several languages and augments it translating several data entries to other\n    languages\n    '''\n    \n    storage_list = [extract(dataframe, lang) for lang in language_list]\n    \n    for lang1 in language_list:\n    \n        except_list = [x for x in language_list if x != lang1]\n    \n        for lang2 in except_list:\n           storage_list[language_list.index(lang2)] =  pd.concat([storage_list[language_list.index(lang2)],trans_frame(extract(dataframe, lang1).iloc[:number], lang2)])\n    \n    return storage_list    ","7f27999d":"#aug_list = round_trans(train_df, languages, 90)\n\n#train_df = aug_list[0]\n\n#for df in aug_list[1:]:\n    \n#   train_df = pd.concat([train_df, df])\n    \n#train_df.to_csv('augmentedata.csv', index = False)","0b85e5a6":"#train_df = pd.read_csv('.\/augmentedata.csv')","712344ee":"#import json\n#with open('..\/input\/englishengen-synonyms-json-thesaurus\/eng_synonyms.json') as json_file:  \n#    synonyms_dict = json.load(json_file)","899a4981":"def syn_sentence(sentence, dictio):\n    \n    '''\n    \n    Function takes a sentence and substitues 4 random words from the sentece\n    takes a sentence and a dictionary\n    \n    \n    '''\n    \n    word_list = sentence.split()\n    \n    randomlist = random.sample(range(len(word_list)), 4)\n    \n    for ele in randomlist:\n        \n        syn = dictio.get(word_list[ele], [])\n        \n        if syn != []:\n            \n            word_list[ele] = syn[0]\n            \n    return ' '.join(str(i) for i in word_list)\n\n\ndef syn_df(df, dictio):\n    \n    '''\n    \n    this function will use the thesaurus augmentation technique to \n    make the english part of the dataset into a version with synonyms \n    \n    \n    '''\n    \n    columns = df.columns\n    \n    df = np.array(df).tolist()\n    \n    \n    for i in range(len(df)):\n        \n        \n        premise = df[i][0]\n        hypothesis = df[i][1]\n        \n        if len(premise.split()) > 5 and len(hypothesis.split()) > 5:\n        \n            premise_syn = syn_sentence(premise, dictio)\n            hypothesis_syn = syn_sentence(hypothesis, dictio)\n        \n            if premise != premise_syn or hypothesis != hypothesis_syn:\n                \n                df.append([premise_syn, hypothesis_syn, df[i][2], df[i][3]])\n            \n    return pd.DataFrame(df, columns = columns)    \n\n","547267ef":"\ndef back_trans(df, aug_number, lang_list, random_seed, trans_rounds):\n    \n    \"\"\"\n    this function is used for backtranslation data aungmentation, the arguments are the dataframe,\n    the number of extra datapoints that want to be generated, list of languages (except english) \n    that can be used for augmentation, random seed, how many back transaltion rounds are desired\n    (keep in mind that english will always be the last language)\n    \"\"\"\n    \n    random.seed(random_seed)\n    \n    \n    for i in range(aug_number):\n        \n        random_datapoint = df.iloc[random.sample(range(df.shape[0]), k = 1)]\n    \n        l_round = random.choices(lang_list, k = trans_rounds)\n        \n        l_round.append('en')\n        \n        for lan in l_round:\n    \n            translator = Translator()\n        \n            random_datapoint.iloc[0,0] = translator.translate(random_datapoint.iloc[0,0], dest = lan).text\n            \n            random_datapoint.iloc[0,1] = translator.translate(random_datapoint.iloc[0,1], dest = lan).text\n            \n        if i == 0:\n\n            trans_df = random_datapoint\n\n        else:\n\n            trans_df = pd.concat([trans_df, random_datapoint])\n            \n    return trans_df\n\ndef TTA(df, lang_list, random_seed, trans_rounds):\n    \n    \"\"\"\n    Does TTA on a test dataset can take a multilingual dataset and the result will be only in english\n    \n    \"\"\"\n    \n    random.seed(random_seed)\n    \n    \n    for i in range(df.shape[0]):\n        \n        datapoint = df.iloc[i]\n        \n        l_round = random.choices(lang_list, k = trans_rounds)\n        \n        l_round.append('en')\n        \n        for lan in l_round:\n            \n            translator = Translator()\n        \n            datapoint[1] = translator.translate(datapoint[1], dest = lan).text\n            \n            datapoint[2] = translator.translate(datapoint[2], dest = lan).text\n            \n        if i == 0:\n\n            trans_df = pd.DataFrame(datapoint).T\n\n        else:\n\n            trans_df = pd.concat([trans_df, pd.DataFrame(datapoint).T])\n            \n    return trans_df","4fed5f56":"#english_syn = syn_df(train_df[train_df['lang_abv'] == 'en'], synonyms_dict)\n\n#train_df = train_df[train_df['lang_abv'] != 'en']\n\n#train_df = pd.concat([train_df, english_syn])\n    \n#test_df4.to_csv('TTA4 dear watson.csv', index = False)\n\n","b3163c71":"Example translation:","2aedc78b":"On the first attemp, text will be translated on a round robin fashion","2679394c":"This notebook has several useful functions for translation, data augmentation by back transalation, and also TTA data augmentation for model's performance accuracy, the datasets that it has generated are on a dataset here on Kaggle https:\/\/www.kaggle.com\/tpothjuan\/contradictory-my-dear-watson-augmented-dataset","ce75f7d0":"Thesaurus will be applied for further data augmentation for the English Language","7832e36a":"Back Translation Strategy"}}