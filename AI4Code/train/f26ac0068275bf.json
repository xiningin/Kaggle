{"cell_type":{"7d9a9e99":"code","57f203ec":"code","cd28e12c":"code","632d1648":"code","add5d117":"code","a30f020c":"code","c1056fcc":"code","4005f95e":"code","01d28e6b":"code","6ed3a028":"code","11476bed":"code","9cf36776":"code","07477334":"code","84cd283a":"code","c832b375":"code","9f167691":"code","65d1d782":"code","606f2189":"markdown","9150f275":"markdown","944f4728":"markdown","fb5b46c8":"markdown","23a287ac":"markdown","e7c439a1":"markdown"},"source":{"7d9a9e99":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom numpy.fft import *\nimport pyarrow.parquet as pq\nimport matplotlib.pyplot as plt\n\nsns.set_style(\"whitegrid\")","57f203ec":"signals = pq.read_table('..\/input\/train.parquet', columns=[str(i) for i in range(999)]).to_pandas()","cd28e12c":"signals = np.array(signals).T.reshape((999\/\/3, 3, 800000))","632d1648":"plt.figure(figsize=(15, 10))\nplt.plot(signals[0, 0, :], label='Phase 0')\nplt.plot(signals[0, 1, :], label='Phase 1')\nplt.plot(signals[0, 2, :], label='Phase 2')\nplt.legend()\nplt.show()","add5d117":"train_df = pd.read_csv('..\/input\/metadata_train.csv')\ntrain_df.head()","a30f020c":"target = train_df['target'][::3]","c1056fcc":"plt.figure(figsize=(15, 10))\nsns.countplot(target)\nplt.show()","4005f95e":"def sample(signal, kernel_size):\n    sampled = np.zeros((signal.shape[0], signal.shape[1], signal.shape[2]\/\/kernel_size))\n    for i in range(signal.shape[2]\/\/kernel_size):\n        begin = kernel_size * i\n        end = min(kernel_size * (i + 1), signal.shape[2])\n        sampled[:, :, i] = np.mean(signal[:, :, begin:end], axis=2)\n    return sampled","01d28e6b":"sampled = sample(signals, 100)","6ed3a028":"plt.figure(figsize=(15, 10))\nplt.plot(sampled[0, 0, :], label='Phase 0')\nplt.plot(sampled[0, 1, :], label='Phase 1')\nplt.plot(sampled[0, 2, :], label='Phase 2')\nplt.legend()\nplt.show()","11476bed":"def filter_signal(signal, threshold=1e8):\n    fourier = rfft(signal)\n    frequencies = rfftfreq(signal.size, d=20e-3\/signal.size)\n    fourier[frequencies > threshold] = 0\n    return irfft(fourier)","9cf36776":"filtered = filter_signal(signals[0, 0, :], threshold=1e3)","07477334":"plt.figure(figsize=(15, 10))\nplt.plot(signals[0, 0, :], label='Raw')\nplt.plot(filtered, label='Filtered')\nplt.legend()\nplt.title(\"FFT Denoising with threshold = 1e3\", size=15)\nplt.show()","84cd283a":"filtered = filter_signal(signals[0, 0, :], threshold=1e5)","c832b375":"plt.figure(figsize=(15, 10))\nplt.plot(signals[0, 0, :], label='Raw')\nplt.plot(filtered, label='Filtered')\nplt.legend()\nplt.title(\"FFT Denoising with threshold = 1e5\", size=15)\nplt.show()","9f167691":"filtered = filter_signal(signals[0, 0, :], threshold=1e7)","65d1d782":"plt.figure(figsize=(15, 10))\nplt.plot(signals[0, 0, :], label='Raw')\nplt.plot(filtered, label='Filtered')\nplt.legend()\nplt.title(\"FFT Denoising with threshold = 1e7\", size=15)\nplt.show()","606f2189":"### Signals","9150f275":"## 2 - Smoothing by mean\nK neighbour ile signal g\u00fcr\u00fclt\u00fcs\u00fcn\u00fc azaltmak hedeflenmi\u015ftir","944f4728":"# Fast Fourier Transform & Denoising\n","fb5b46c8":"### Testing some thresholds","23a287ac":"### Target","e7c439a1":"## 1 - Loading Data"}}