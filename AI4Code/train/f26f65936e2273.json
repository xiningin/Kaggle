{"cell_type":{"b2a8cfe4":"code","45ba9d07":"code","14628a85":"code","6681c010":"code","f69b2e50":"code","5cfdc774":"code","d95e4883":"code","3fdd85c7":"code","6ba57e91":"code","b0f8dd63":"code","84ee7bab":"code","e0374580":"code","f167cb31":"code","cf17f32f":"code","8ba26fa4":"markdown","33defc09":"markdown","6e23cc58":"markdown","6fa86118":"markdown"},"source":{"b2a8cfe4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45ba9d07":"# importing the required libraries\n\n# import numpy as np\n# import pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation\nfrom tensorflow.keras.utils import to_categorical","14628a85":"# loading the datasets\n\ntrain = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n\nprint(train.shape, test.shape)","6681c010":"train.head()","f69b2e50":"# abstraction of features and label from the dataset\n\nX, y = train.drop('label', axis=1), train.label\nprint(X.shape, y.shape)","5cfdc774":"y.head()","d95e4883":"# analysis of the photos\n\nv = np.array(X).reshape(-1, 28, 28, 1) \/ 255\n\nfig, ax = plt.subplots(1, 5, figsize=(15,8))\nfor i in range(5):\n    ax[i].imshow(v[i], cmap='binary')","3fdd85c7":"X = np.array(X)\nX = X \/ 255.0\n\nX = X.reshape((-1, 784))\nX.shape","6ba57e91":"test = np.array(test)\ntest = test \/ 255.0\n\ntest = test.reshape((-1, 784))\ntest.shape","b0f8dd63":"# applying supervised machine learning\n\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=784))\nmodel.add(Activation('relu'))\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dense(10))\nmodel.add(Activation('softmax'))","84ee7bab":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(X, to_categorical(y), epochs=10, batch_size=32, shuffle=False)","e0374580":"pred = np.argmax(model.predict(test), axis=-1)\npred","f167cb31":"df = pd.DataFrame(pred)\ndf['ImageId'] = df.index + 1\ndf.rename(columns={0: 'Label'}, inplace=True)\ndf = df[['ImageId', 'Label']]","cf17f32f":"df","8ba26fa4":"# Data preprocessing","33defc09":"# ML Model","6e23cc58":"# Loading the dataset","6fa86118":"# Prediction of test set"}}