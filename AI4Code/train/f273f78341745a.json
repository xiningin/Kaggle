{"cell_type":{"cb34d62d":"code","68fd2cda":"code","fff51212":"code","c46bb90f":"code","e8864342":"code","bd049f7e":"code","526f185d":"code","6be111fc":"code","d9f19220":"code","e0c47767":"code","6e960806":"code","cd326025":"code","ded8e4d9":"code","e923770b":"code","a280eb5d":"code","b2412167":"code","a2c2610d":"code","1e29d0da":"code","cabccfc3":"code","8c12f30a":"code","acebec65":"code","9433df92":"code","a1936be7":"code","4ec82957":"code","3eacbfe0":"code","a8ab2ff3":"code","1dfac51c":"markdown","b25202a4":"markdown","e7ee2696":"markdown","e9fd3540":"markdown","a6e3c4f2":"markdown","56231587":"markdown","46d737c6":"markdown","6b56d32e":"markdown","398f4c6e":"markdown"},"source":{"cb34d62d":"import numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nnp.random.seed(0)\nsns.set_theme()\n\nfrom xgboost import XGBRegressor\n\nfrom sklearn.model_selection import train_test_split,learning_curve","68fd2cda":"TRAIN_PATH  = \"..\/input\/medical-insurance-dataset\/Train_Data.csv\"\nTEST_PATH = \"..\/input\/medical-insurance-dataset\/Test_Data.csv\"\nSUBMISSION_PATH = \"submission.csv\"\n\nTARGET = \"charges\"\nTREE_METHOD = 'gpu_hist'\nSEED = 2021\nN_ESTIMATORS = 200\nMODEL_LR = 0.1\nMODE_N_JOBS = -1","fff51212":"train = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)","c46bb90f":"train.head()","e8864342":"train.shape","bd049f7e":"train.info()","526f185d":"train.describe().T","6be111fc":"sns.histplot(data=train, y=\"age\")","d9f19220":"sns.histplot(data=train, y=\"bmi\")","e0c47767":"sns.histplot(data=train, y=\"children\")","6e960806":"sns.histplot(data=train, y=\"charges\")","cd326025":"x = 'age'\ny = 'charges'\nkind = 'scatter'\nsns.jointplot(x=train[x], y=train[y], kind = kind)","ded8e4d9":"x = 'bmi'\ny = 'charges'\nkind = 'scatter'\nsns.jointplot(x=train[x], y=train[y], kind = kind)","e923770b":"x = 'children'\ny = 'charges'\nkind = 'scatter'\nsns.jointplot(x=train[x], y=train[y], kind = kind)","a280eb5d":"train.corr()","b2412167":"train.corr()[\"charges\"]","a2c2610d":"sns.heatmap(train.corr(),annot=True)","1e29d0da":"\n#1.find null data and fill new data \ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n#2.one hot encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","cabccfc3":"y = train[TARGET]\nX = train.drop([TARGET],axis=1)\nX_test = test","8c12f30a":"# split train set and test set \nX_train, X_val, y_train, y_val = \\\n    train_test_split(X, y, \n                     test_size=0.20,\n                     random_state=1)","acebec65":"model = XGBRegressor(tree_method=TREE_METHOD,\n                     random_state = SEED,\n                     n_estimators = N_ESTIMATORS,\n                    learning_rate = MODEL_LR,\n                     n_jobs =MODE_N_JOBS) \nmodel.fit(X_train, y_train)","9433df92":"pred_test = model.predict(X_test)","a1936be7":"sub = pd.DataFrame()\nsub[TARGET] = pred_test\n\nsub.to_csv(SUBMISSION_PATH,index=False)\nsub.head()","4ec82957":"#learning curve \ntrain_sizes, train_scores, val_scores =\\\n                learning_curve(estimator=model,\n                               X=X_train,\n                               y=y_train,\n                               train_sizes=np.linspace(0.1, 1.0, 10), # 10% ~ 100%\n                               cv=10,\n                               n_jobs=1)","3eacbfe0":"#get mean and std \ntrain_mean = np.mean(train_scores, axis=1)\ntrain_std = np.std(train_scores, axis=1)\nval_mean = np.mean(val_scores, axis=1)\nval_std = np.std(val_scores, axis=1)","a8ab2ff3":"#draw train mean score\nplt.plot(train_sizes, train_mean,\n         color='blue', marker='o',\n         markersize=5, label='Training accuracy')\n\n# draw train mean score + std ~ tarin mean score - std \nplt.fill_between(train_sizes,\n                 train_mean + train_std,\n                 train_mean - train_std,\n                 alpha=0.15, color='blue')\n\n#draw test mean score\nplt.plot(train_sizes, val_mean,\n         color='green', linestyle='--',\n         marker='s', markersize=5,\n         label='Validation accuracy')\n\n# draw test mean score + std ~ test mean score - std \nplt.fill_between(train_sizes,\n                 val_mean + val_std,\n                 val_mean - val_std,\n                 alpha=0.15, color='green')\n\n# grid + xlabel + ylabel + legend position \nplt.grid()\nplt.xlabel('Number of training examples')\nplt.ylabel('Accuracy')\nplt.legend(loc='lower right')\nplt.ylim([0.8, 1.03])\nplt.tight_layout()\nplt.show()","1dfac51c":"# predict test data target using trained model","b25202a4":"# split data ","e7ee2696":"# global variables","e9fd3540":"# eda ","a6e3c4f2":"# preprocess","56231587":"# build model","46d737c6":"# load data ","6b56d32e":"'age' has best relation value with 'charges'","398f4c6e":"# evaluate model"}}