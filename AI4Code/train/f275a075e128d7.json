{"cell_type":{"0a28f0f2":"code","2548fe39":"code","7886f770":"code","5142be14":"code","f07421cc":"code","46fb4391":"code","408ca1c1":"code","7d6d9b21":"code","c62d351f":"code","4595133a":"code","98e62f48":"code","9c2aa2be":"code","92082635":"code","a1fa63cb":"code","c6af5a5b":"code","9a789a06":"markdown","a712ebe9":"markdown","0fc56c5b":"markdown","adca595d":"markdown","04d16e93":"markdown","75b78e8d":"markdown","8c932811":"markdown","a74282c7":"markdown","e5e6c45c":"markdown","fdfe4edf":"markdown"},"source":{"0a28f0f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #for data visualizing processes\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\ndata = pd.read_csv(\"..\/input\/data.csv\") # you can add data with using pandas library easily\n\n# Any results you write to the current directory are saved as output.","2548fe39":"data.info()","7886f770":"data.head(5)","5142be14":"data.columns","f07421cc":"data.corr()","46fb4391":"data.texture_se.plot(kind='line', color='green', label='texture_se', linewidth=2, alpha=0.5, grid=False, linestyle='-')","408ca1c1":"data.texture_se.plot(kind='line', color='green', label='texture_se', linewidth=2, alpha=0.5, grid=False, linestyle='-')\ndata.smoothness_se.plot(kind='line', color='red', label='smoothness_se', linewidth=2, alpha=0.5, grid=False, linestyle=':')\nplt.xlabel('x')              # label = name of label\nplt.ylabel('y')\nplt.title('Line Plot with Texture and Smoothness')            # title = title of plot\nplt.show()","7d6d9b21":"data.perimeter_mean.plot(kind='hist', bins=10, figsize=(10,10))","c62d351f":"data.plot(kind='Scatter', x='area_mean', y='symmetry_worst', alpha=0.7, color='blue', grid=True)","4595133a":"plt.scatter(data.area_mean, data.symmetry_worst)","98e62f48":"dictionary = {'type': 'malignant', 'area': 'breast'}\nprint(dictionary)\nprint(\"\\n\")\nprint(dictionary.keys()) #prints keys\nprint(dictionary.values()) #prints values\n\ndictionary['type'] = 'benign' #update dictionary\nprint(\"\\n\")\nprint(dictionary.keys())\nprint(dictionary.values())\n\ndel dictionary['area'] #deletes area's key & value\nprint(\"\\n\")\nprint(dictionary.keys())\nprint(dictionary.values())","9c2aa2be":"malignant = data['diagnosis'] =='M'\ndata[malignant]\n\n\n","92082635":"data[(data['diagnosis']=='B') & (data['radius_mean']>15)]\n","a1fa63cb":"i = 0\nwhile i != 5 :\n    print(data['id'][i]) #print id's for first 5 rows\n    i +=1 ","c6af5a5b":"dictionary = {'type': 'malignant', 'area': 'breast', 'tumor_radius': '14'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)","9a789a06":"There are some operators that we use to perform mathematical comparison and filtering operations on our data.\n\nNow, we will mention about these operators.","a712ebe9":"After we have reached our data information, we may also want to access information visually on the whole data. \n\nWe can easily visualize (plot) our data with **Matplotlib** library in Python.\n\nThe **Matplotlib**  library contains various graphic styles such as Line, Histogram, Scatter etc. For this reason, we can choose graphic styles that will be suitable for efficiency.\n\nLet's try some plot drawings. ","0fc56c5b":"There are a few other commands that can be used to get detailed information about the data. \nFor example; you can reach first 5 rows in data with this command: ","adca595d":"**In this tutorial, we aim to perform basic data manipulation with the Breast Cancer Wisconsin (Diagnostic) Data Set provided by UCI.**\n\nFirstly, we need to import our data and necessary libraries for our study. ","04d16e93":"Furthermore, you can see all columns with using this command:","75b78e8d":"When you import our data, we want to check information about  data. It is possible to do this with a single command as follows:","8c932811":"Generally, our data will not be small enough to reach each of them manually.\n\nFor this reason;  We use loop structures to reach the data faster.\n\nYou can examine several loop examples in below.","a74282c7":"As you can see above, we can make the same plot drawing with different commands and variables.\n\nThere is some variables for plot customizations.\n- kind determines the plot type.\n- alpha determines the opacity of the points.\n- color determines the color of the points.\n- label determines the flag of the points.\n- grid determines creates squares on plot.\n- figsize determines plot size.\n\n\n","e5e6c45c":"After learning how to visualize the data, now we learn how to reach the desired data specifically.\n\n**Dictionary** data type contains key and value pairs for every entry. We use the Dictionary because it works faster than the list structure.\n\nLet's look at Dictionary syntax and processes.","fdfe4edf":"Also, we may want to find out about the dependency of our predictions by seeing the correlation between the columns of our data.\n\nThe correlation between 2 columns is determined as;\n- If there is a correlation value which is close to 1, it is directly proportional,\n- If there is a correlation value which is close to -1, it is inversely proportional,\n- If there is a correlation value which is equal to 0, there is no relationship between two features.\n\nFor example; we can say that, the relationship between raduis_mean and perimeter_mean is directly proportional."}}