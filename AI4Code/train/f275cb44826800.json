{"cell_type":{"45d26999":"code","6bcd5d69":"code","999997ba":"code","817d5aa3":"code","4954fd12":"code","1b86f628":"code","7de96294":"code","663305fd":"code","dc3e537e":"code","f0a6c265":"code","c6650578":"code","f4b9b743":"code","0108c818":"code","80b5caa2":"code","2fba88d2":"code","f2a06c5e":"code","3ec17a33":"code","0b9a2528":"code","e4eccf32":"code","4d5cf4df":"code","3130a230":"code","65fee80f":"code","69d81dc4":"code","4c94388b":"code","2f03604b":"code","ef148212":"code","f84758b5":"code","c6152d0f":"code","cdc943cd":"code","c2d83616":"code","ce6ccfbe":"code","71d698bc":"code","3d8132bf":"code","67da8713":"code","d35c6ab9":"code","04e8cfa8":"code","c4488f70":"code","ce9997ed":"markdown","9b8ad890":"markdown","d22e3147":"markdown","4f396a20":"markdown","018cbbce":"markdown","5c9797af":"markdown","5c039429":"markdown","5651908a":"markdown","8b2cbab9":"markdown","25f9596f":"markdown","15adbd07":"markdown","29da5bca":"markdown","927f2fa2":"markdown","aea4d2da":"markdown","195f2229":"markdown","5e2b7754":"markdown","fc5c1f38":"markdown","032cccd1":"markdown","3b6241c4":"markdown","556004ff":"markdown","c64091f0":"markdown","5a9eef7d":"markdown","a2d3b613":"markdown","18e99d70":"markdown","e2f4a765":"markdown","ef79041c":"markdown","c66f9d74":"markdown","aa35a80b":"markdown","8c6acc2c":"markdown","8e568199":"markdown","18b95a43":"markdown","fbe27914":"markdown","2d04a653":"markdown","abe40ed6":"markdown","4443100a":"markdown"},"source":{"45d26999":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import style\nimport tensorflow as tf\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n","6bcd5d69":"style.use('seaborn-darkgrid')\n\n# Load the cities data\nfilepath = '..\/input\/corona-virus-brazil\/brazil_covid19_cities.csv'\nfilepath1 = '..\/input\/corona-virus-brazil\/brazil_covid19.csv'\nfilepath3 = '..\/input\/corona-virus-brazil\/brazil_covid19_macro.csv'\nfilepath4 = '..\/input\/brazilian-cities\/BRAZIL_CITIES.csv'\n\ncovid_cities = pd.read_csv(filepath, index_col='date')\ncovid_cities.index = pd.to_datetime(covid_cities.index)\ncovid_states = pd.read_csv(filepath1, index_col='date')\ncovid_states.index = pd.to_datetime(covid_states.index)\ncovid_country = pd.read_csv(filepath3, index_col='date')\ncovid_country.index = pd.to_datetime(covid_country.index)\ncities_data = pd.read_csv(filepath4, sep=\";\", decimal=\",\")\n","999997ba":"covid_cities.head()\n","817d5aa3":"print('Dates range from '+str(covid_cities.index.min())+' to '+str(covid_cities.index.max()))","4954fd12":"cities_data.columns","1b86f628":"useful_cities_columns = ['CITY','GDP', 'GDP_CAPITA', 'COMP_Q', 'IDHM', 'IDHM_Renda', 'ESTIMATED_POP', 'CAPITAL']\ncities_data = cities_data[useful_cities_columns]\n","7de96294":"def datavisualization_cases(city):\n    plt.figure(figsize=(8,4))\n    plt.plot(covid_cities.cases[covid_cities.name == city], label=str(city))\n    plt.legend()\n    plt.title('Cases in '+city)\n    plt.show()\n    \ndatavisualization_cases('Curitiba')\ndatavisualization_cases('Rio de Janeiro')\ndatavisualization_cases('Porto Alegre')\ndatavisualization_cases('S\u00e3o Paulo')\ndatavisualization_cases('Manaus')\ndatavisualization_cases('Salvador')\ndatavisualization_cases('Goi\u00e2nia')","663305fd":"def datavisualization_deaths(city):\n    plt.figure(figsize=(8,4))\n    plt.plot(covid_cities.deaths[covid_cities.name == city],'r' ,label=str(city))\n    plt.legend()\n    plt.title('Deaths in '+city)\n    plt.show()\n    \ndatavisualization_deaths('Curitiba')\ndatavisualization_deaths('Rio de Janeiro')\ndatavisualization_deaths('Porto Alegre')\ndatavisualization_deaths('S\u00e3o Paulo')\ndatavisualization_deaths('Manaus')\ndatavisualization_deaths('Salvador')\ndatavisualization_deaths('Goi\u00e2nia')\n","dc3e537e":"def datavisualization_casesbyday(city):\n    plt.figure(figsize=(8,4))\n    covid_cities['cases_by_day'] = (covid_cities.cases[covid_cities.name == city]-covid_cities.cases[covid_cities.name == city].shift(1))\n    plt.plot(covid_cities.cases_by_day[covid_cities.name == city],'g' ,label=str(city))\n    plt.legend()\n    plt.title('Variations on cases by day in '+city)\n    plt.show()\n    \ndatavisualization_casesbyday('Curitiba')\ndatavisualization_casesbyday('Rio de Janeiro')\ndatavisualization_casesbyday('Porto Alegre')\ndatavisualization_casesbyday('S\u00e3o Paulo')\ndatavisualization_casesbyday('Manaus')\ndatavisualization_casesbyday('Salvador')\ndatavisualization_casesbyday('Goi\u00e2nia')","f0a6c265":"def datavisualization_deathsbyday(city):\n    plt.figure(figsize=(8,4))\n    covid_cities['deaths_by_day'] = (covid_cities.deaths[covid_cities.name == city]-covid_cities.deaths[covid_cities.name == city].shift(1))\n    plt.plot(covid_cities.deaths_by_day[covid_cities.name == city], 'y' ,label=str(city))\n    plt.legend()\n    plt.title('Variations on deaths by day in '+city)\n    plt.show()\n    \ndatavisualization_deathsbyday('Curitiba')\ndatavisualization_deathsbyday('Rio de Janeiro')\ndatavisualization_deathsbyday('Porto Alegre')\ndatavisualization_deathsbyday('S\u00e3o Paulo')\ndatavisualization_deathsbyday('Manaus')\ndatavisualization_deathsbyday('Salvador')\ndatavisualization_deathsbyday('Goi\u00e2nia')","c6650578":"def datavisualization_mortrate(city):\n    plt.figure(figsize=(8,4))\n    covid_cities['mortality_rate'] = (covid_cities.deaths[covid_cities.name == city]\/covid_cities.cases[covid_cities.name == city])\n    plt.plot(covid_cities.mortality_rate[covid_cities.name == city], 'brown' ,label=str(city))\n    plt.plot(covid_country.deaths\/covid_country.cases, label='Mortality in Brazil')\n    plt.legend()\n    plt.title('Mortality rate in Brazil X '+city)\n    plt.show()\n    \ndatavisualization_mortrate('Curitiba')\ndatavisualization_mortrate('Rio de Janeiro')\ndatavisualization_mortrate('Porto Alegre')\ndatavisualization_mortrate('S\u00e3o Paulo')\ndatavisualization_mortrate('Manaus')\ndatavisualization_mortrate('Salvador')\ndatavisualization_mortrate('Goi\u00e2nia')","f4b9b743":"covid_cities['mortality'] = covid_cities.deaths\/covid_cities.cases\nprint('Maximum mortality is '+str(covid_cities[(covid_cities.index == covid_cities.index.max())].mortality.max()))\nprint('Minimum mortality is '+str(covid_cities[(covid_cities.index == covid_cities.index.max())].mortality.min()))\n","0108c818":"regions = covid_states.groupby([covid_states.index,'region']).sum()\nregions.reset_index(inplace=True)\nregions['mortality'] = regions.deaths\/regions.cases\nregions_list = ['Centro-Oeste', 'Nordeste', 'Norte', 'Sul', 'Sudeste']\ndef region_mortality_plotter(lists):\n    plt.figure(figsize=(15,8))\n    for region in lists:\n        plt.plot(regions[regions.region == region].date,regions[regions.region == region].mortality, label=region)\n    plt.legend()    \n    plt.title('Mortality rates in brazilian regions')\n    plt.show()\n    \nregion_mortality_plotter(regions_list)","80b5caa2":"\nmy_capitals = ['Curitiba', 'Rio De Janeiro', 'Porto Alegre', 'S\u00e3o Paulo', 'Manaus', 'Salvador', 'Goi\u00e2nia', 'Recife']\ndef cases_by_1000(cities):\n    plt.figure(figsize=(15,8))\n    for city in cities:\n        plt.plot(covid_cities[covid_cities.name == city].cases*1000\/cities_data[cities_data.CITY == city].ESTIMATED_POP.iloc[0], label=city)\n    plt.legend()\n    plt.title('Cases by 1000')\n    plt.show()\ndef deaths_by_1000(cities):\n    plt.figure(figsize=(15,8))\n    for city in cities:\n        plt.plot(covid_cities[covid_cities.name == city].deaths*1000\/cities_data[cities_data.CITY == city].ESTIMATED_POP.iloc[0], label=city)\n    plt.legend()\n    plt.title('Deaths by 1000')\n    plt.show()\n\ncases_by_1000(my_capitals)\ndeaths_by_1000(my_capitals)\n","2fba88d2":"data_to_scatter = pd.DataFrame()\ndata_to_scatter = covid_cities.sort_values(by=['name', 'date'])[['name', 'cases', 'deaths', 'mortality']].reset_index()\ndata_to_scatter = data_to_scatter.loc[data_to_scatter.groupby('name').date.idxmax(),:].drop(columns=['date']).reset_index().drop(columns=['index'])\ncities_data.rename(columns={'CITY': 'name'}, inplace=True)\ncities_data = cities_data.sort_values(by='name')\ndata_to_scatter = pd.merge(data_to_scatter, cities_data, on=['name'])\nprint(data_to_scatter.columns)\n","f2a06c5e":"print(str(cities_data[cities_data.COMP_Q<=8].name.count()) + ' cities have less than 8 medical instalations.')\nprint(str(cities_data[cities_data.ESTIMATED_POP<=50000].name.count()) + ' cities have less than 50,000 population.')\nprint(str(cities_data[cities_data.COMP_Q == cities_data.COMP_Q.max()].name.iloc[0]) +' has '+ str(cities_data.COMP_Q.max())+' medical facilities')\nprint(str(cities_data[cities_data.COMP_Q == cities_data.COMP_Q.min()].name.iloc[10]) +' has '+ str(cities_data.COMP_Q.min())+' medical facilities')","3ec17a33":"plt.figure(figsize=(15,8))\nsns.distplot(data_to_scatter['COMP_Q'])\nplt.title('Distribuition of medical facilities in brazilian cities')\n\nplt.figure(figsize=(15,8))\nsns.distplot(data_to_scatter['ESTIMATED_POP'])\nplt.title('Distribuition of estimated population in brazilian cities')","0b9a2528":"gdp_capita_deaths = data_to_scatter[['name', 'GDP_CAPITA', 'deaths']]\ngdp_capita_deaths.set_index('name', inplace=True)\ngdp_capita_deaths = gdp_capita_deaths.astype(float)\nplt.figure(figsize=(15,8))\nplt.scatter(gdp_capita_deaths['GDP_CAPITA'], gdp_capita_deaths['deaths'], s=6)\nplt.xlim([0,20000])\nplt.ylim([0,5000])\nplt.xlabel('GDP per Capita')\nplt.ylabel('Deaths')\nplt.title('Deaths X GDP per Capita')\nplt.show()","e4eccf32":"plt.figure(figsize=(15,8))\nsns.regplot(x=data_to_scatter['ESTIMATED_POP'].astype(float), y=data_to_scatter['cases'].astype(float), scatter_kws={'s':10})\nplt.show()","4d5cf4df":"plt.figure(figsize=(15,8))\ncorr = data_to_scatter.drop(columns=['name', 'CAPITAL']).astype(float).corr()\nsns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns, annot=True)\nplt.title('Correlation Matrix')\nplt.show()","3130a230":"plt.figure(figsize=(15,8))\nsns.scatterplot(x=data_to_scatter['COMP_Q'].astype(float)\/data_to_scatter['ESTIMATED_POP'].astype(float), y=data_to_scatter['deaths'].astype(float)*1000\/data_to_scatter['ESTIMATED_POP'].astype(float))\nsns.scatterplot(x=data_to_scatter['COMP_Q'], y=data_to_scatter['deaths'])\nplt.title(' Number of Companies: Human health and social services\/Population X Deaths')\n\nplt.show()","65fee80f":"# Scatter only bigger cities (>100000)\nplt.figure(figsize=(15,8))\nplt.title('Deaths by 1000 X Medical Facilities in cities with more than 100,000 population')\nsns.regplot(x=data_to_scatter[data_to_scatter.ESTIMATED_POP.astype(float) > 100000].COMP_Q, y=data_to_scatter[data_to_scatter.ESTIMATED_POP.astype(float) > 100000].deaths\/data_to_scatter[data_to_scatter.ESTIMATED_POP.astype(float) > 100000].ESTIMATED_POP)\nplt.show()\n\n\n# Scatter only bigger cities(>500000)\nplt.figure(figsize=(15,8))\nplt.title('Deaths by 1000 X Medical Facilities in cities with more than 500,000 population')\nsns.regplot(x=data_to_scatter[data_to_scatter.ESTIMATED_POP.astype(float) > 500000].COMP_Q, y=data_to_scatter[data_to_scatter.ESTIMATED_POP.astype(float) > 500000].deaths*1000\/data_to_scatter[data_to_scatter.ESTIMATED_POP.astype(float) > 500000].ESTIMATED_POP)\nplt.show()","69d81dc4":"capitals_dataframe = pd.DataFrame()\ncapitals = (cities_data[cities_data.CAPITAL == 1].name)\ncapitals = (capitals).tolist()\ncapitals = ['Aracaju', 'Belo Horizonte', 'Bel\u00e9m', 'Boa Vista', 'Bras\u00edlia', 'Campo Grande', 'Cuiab\u00e1', 'Curitiba', 'Florian\u00f3polis', 'Fortaleza', 'Goi\u00e2nia', 'Jo\u00e3o Pessoa', 'Macap\u00e1', 'Macei\u00f3', 'Manaus', 'Natal', 'Palmas', 'Porto Alegre', 'Porto Velho', 'Recife', 'Rio Branco', 'Rio De Janeiro', 'Salvador', 'S\u00e3o Lu\u00eds', 'S\u00e3o Paulo', 'Teresina', 'Vit\u00f3ria']\ncapitals_dataframe = covid_cities[(covid_cities.name.isin(capitals))][['name', 'cases', 'deaths', 'state']].sort_values(by=['name','date'])\n(capitals_dataframe)\nfor name in capitals:\n    last_capitals_dataframe = (capitals_dataframe[capitals_dataframe.index == max(capitals_dataframe.index)])[['name','deaths', 'cases']]\n\nlast_capitals_dataframe['cases_to_pie'] = last_capitals_dataframe['cases']*100\/last_capitals_dataframe['cases'].sum()\nlast_capitals_dataframe = (last_capitals_dataframe.sort_values(by=['deaths','name'])[7:])\nlast_capitals_dataframe.sort_values(by='cases_to_pie', inplace=True)\nplt.figure(figsize=(20,12))\nplt.pie(last_capitals_dataframe.cases_to_pie, labels=last_capitals_dataframe.name, shadow=True)\nplt.show()","4c94388b":"last_capitals_dataframe['mortality_rate'] = last_capitals_dataframe['deaths']\/last_capitals_dataframe['cases']\nx = (cities_data[cities_data.name.isin(capitals)][['name','GDP_CAPITA', 'CAPITAL', 'COMP_Q', ]])\nx = x[x.CAPITAL == 1].sort_values(by='name')\nlast_capitals_dataframe = pd.merge(x, last_capitals_dataframe.sort_values(by='name'), on=['name'])\nplt.figure(figsize=(15,8))\nsns.scatterplot(x=last_capitals_dataframe.GDP_CAPITA, y=last_capitals_dataframe.mortality_rate)\nplt.figure(figsize=(15,8))\nsns.scatterplot(x=last_capitals_dataframe.COMP_Q, y=last_capitals_dataframe.mortality_rate)\n\nplt.show()\n\n","2f03604b":"# Deadly Holidays\nholiday_path = '..\/input\/feriados-e-dias-da-semana-brasil\/feriados.csv'\nholidays = pd.read_csv(holiday_path, index_col='Data')\npd.to_datetime(holidays.index)\nholidays = (holidays[holidays.index > '2020-03-01'])\nholidays.drop(columns=['Feriado', 'Dia da Semana'], inplace=True)\nholidays = ((holidays[holidays.index < '2021-04-06']))\nholidays = (holidays.index.tolist())\ncapitals_dataframe.reset_index(inplace=True)\ncapitals_dataframe['is_holiday'] = 0\ncapitals_dataframe.loc[capitals_dataframe['date'].isin(holidays), 'is_holiday'] = 1\ncovid_cities.reset_index(inplace=True)\ncovid_cities['is_holiday'] = 0\ncovid_cities.loc[covid_cities['date'].isin(holidays), 'is_holiday'] = 1\n\ndef all_cities_holiday_plotter_cases(city):\n    plt.figure(figsize=(8,5))\n    plt.plot(covid_cities[covid_cities.name == city].date, covid_cities[covid_cities.name == city].cases, 'b', label='Cases in '+str(city))\n    plt.scatter(covid_cities[(covid_cities.is_holiday == 1) & (covid_cities.name == city)].date, covid_cities[(covid_cities.name == city) & (covid_cities.is_holiday == 1)].cases, marker='o', color='r', label='Holiday')\n    plt.legend()\n    plt.title(str(city))\n    plt.show()\ndef all_cities_holiday_plotter_deaths(city):\n    plt.figure(figsize=(8,5))\n    plt.plot(covid_cities[covid_cities.name == city].date, covid_cities[covid_cities.name == city].deaths, 'g', label='Deaths in ' +str(city))\n    plt.scatter(covid_cities[(covid_cities.is_holiday == 1) & (covid_cities.name == city)].date, covid_cities[(covid_cities.name == city) & (covid_cities.is_holiday == 1)].deaths, marker='o', color='r', label='Holiday')\n    plt.legend()\n    plt.title(str(city))\n    plt.show()\n","ef148212":"all_cities_holiday_plotter_cases('Curitiba')\nall_cities_holiday_plotter_cases('Rio de Janeiro')\nall_cities_holiday_plotter_cases('Porto Alegre')\nall_cities_holiday_plotter_cases('S\u00e3o Paulo')\nall_cities_holiday_plotter_cases('Manaus')\nall_cities_holiday_plotter_cases('Salvador')\nall_cities_holiday_plotter_cases('Goi\u00e2nia')","f84758b5":"all_cities_holiday_plotter_deaths('Curitiba')\nall_cities_holiday_plotter_deaths('Rio de Janeiro')\nall_cities_holiday_plotter_deaths('Porto Alegre')\nall_cities_holiday_plotter_deaths('S\u00e3o Paulo')\nall_cities_holiday_plotter_deaths('Manaus')\nall_cities_holiday_plotter_deaths('Salvador')\nall_cities_holiday_plotter_deaths('Goi\u00e2nia')","c6152d0f":"all_cities_holiday_plotter_cases('Imbituba')\nall_cities_holiday_plotter_deaths('Imbituba')","cdc943cd":"####### Load single dense layer model!\njson_file = open('..\/input\/modeljson\/model.json', 'r')\nloaded_model_json = json_file.read()\njson_file.close()\nloaded_model = tf.keras.models.model_from_json(loaded_model_json)\n\n# load weights into new model\nloaded_model.load_weights(\"..\/input\/modelh5\/model.h5\")\nx_cases = np.genfromtxt('..\/input\/x-cases\/x_cases.csv', delimiter=',')\ny_cases = np.genfromtxt('..\/input\/x-cases\/y_cases.csv', delimiter=',')\ntime_frame = 364\nall_cities = (covid_cities[covid_cities.date == '2020-09-10'].sort_values(by='name').name).tolist()\nprint(\"Loaded model from disk\")","c2d83616":"\ndef prediction_plotter(city_name):\n    prediction = loaded_model.predict(x_cases[time_frame*all_cities.index(city_name):time_frame*(1+all_cities.index(city_name))])\n    reality = y_cases[time_frame*all_cities.index(city_name):time_frame*(1+all_cities.index(city_name))]\n    plt.figure(figsize=(15,8))\n    plt.plot(prediction, label='Prediction')\n    plt.plot(reality, label='Reality')\n    plt.legend()\n    plt.title(city_name)\n    plt.show()\n    print(mean_squared_error(reality, prediction))\n\nprediction_plotter('Curitiba')\nprediction_plotter('Rio de Janeiro')\nprediction_plotter('Porto Alegre')\nprediction_plotter('S\u00e3o Paulo')\nprediction_plotter('Manaus')\nprediction_plotter('Salvador')\nprediction_plotter('Goi\u00e2nia')\n\n","ce6ccfbe":"def reality_plotter(city_name, level):\n    prediction = []\n    to_plot = []\n    for i in range(level):\n        prediction.append(x_cases[time_frame*all_cities.index(city_name)+i])\n        to_plot.append(loaded_model.predict(prediction[i].reshape(1,7)))\n    for i in range(level, time_frame):\n        prediction.append(np.append((prediction[i-1][1:7]), loaded_model.predict(prediction[i-1].reshape(1,7))))\n        to_plot.append(prediction[i][6])\n    plt.figure(figsize=(15,8))\n    plt.plot(to_plot, label='Prediction')\n    plt.plot(y_cases[time_frame*all_cities.index(city_name):time_frame*all_cities.index(city_name)+time_frame], label='Reality')\n    plt.legend()\n    plt.title('Forecasting x Reality - '+str(city_name))\n    plt.show()\n\nreality_plotter('Curitiba', 100)\nreality_plotter('Rio de Janeiro', 100)\nreality_plotter('Porto Alegre', 100)\nreality_plotter('S\u00e3o Paulo', 100)\nreality_plotter('Manaus', 100)\nreality_plotter('Salvador', 100)\nreality_plotter('Goi\u00e2nia', 100)","71d698bc":"reality_plotter('Curitiba', 200)\nreality_plotter('Rio de Janeiro', 200)\nreality_plotter('Porto Alegre', 200)\nreality_plotter('S\u00e3o Paulo', 200)\nreality_plotter('Manaus', 200)\nreality_plotter('Salvador', 200)\nreality_plotter('Goi\u00e2nia', 200)","3d8132bf":"reality_plotter('Curitiba', 300)\nreality_plotter('Rio de Janeiro', 300)\nreality_plotter('Porto Alegre', 300)\nreality_plotter('S\u00e3o Paulo', 300)\nreality_plotter('Manaus', 300)\nreality_plotter('Salvador', 300)\nreality_plotter('Goi\u00e2nia', 300)","67da8713":"####### Load complex dense layer model!\njson_file = open('..\/input\/model-02\/model7.json', 'r')\nloaded_model_json2 = json_file.read()\njson_file.close()\nloaded_model2 = tf.keras.models.model_from_json(loaded_model_json2)\n\n# load weights into new model\nloaded_model2.load_weights(\"..\/input\/model-02\/model7.h5\")\nx_cases_holiday = np.genfromtxt('..\/input\/x-cases-holidays\/x_cases_holidays.csv', delimiter=',')\n\nprint(\"Loaded model from disk\")","d35c6ab9":"\ndef prediction_plotter(city_name):\n    prediction = loaded_model2.predict(x_cases_holiday[time_frame*all_cities.index(city_name):time_frame*(1+all_cities.index(city_name))])\n    reality = y_cases[time_frame*all_cities.index(city_name):time_frame*(1+all_cities.index(city_name))]\n    plt.figure(figsize=(15,8))\n    plt.plot(prediction, label='Prediction')\n    plt.plot(reality, label='Reality')\n    plt.legend()\n    plt.title(city_name+' Naive prediction')\n    plt.show()\n    print(mean_squared_error(reality, prediction))\n\nprediction_plotter('Curitiba')\nprediction_plotter('Rio de Janeiro')\nprediction_plotter('Porto Alegre')\nprediction_plotter('S\u00e3o Paulo')\nprediction_plotter('Manaus')\nprediction_plotter('Salvador')\nprediction_plotter('Goi\u00e2nia')","04e8cfa8":"#### FIX IT TO 8\ndef reality_plotter_8(city_name, level):\n    prediction = []\n    to_plot = []\n    for i in range(level):\n        prediction.append(x_cases_holiday[time_frame*all_cities.index(city_name)+i])\n        to_plot.append(loaded_model2.predict(prediction[i].reshape(1, 8)))\n\n    for i in range(level, time_frame):\n        prediction.append(np.append(x_cases_holiday[(time_frame*all_cities.index(city_name))+i][0], np.append((prediction[i-1][2:8]), loaded_model2.predict(prediction[i-1].reshape(1, 8)))))\n        to_plot.append(prediction[i][7])\n    reality = y_cases[time_frame*all_cities.index(city_name):time_frame*all_cities.index(city_name)+time_frame]\n    print(mean_squared_error(reality, to_plot))\n    plt.figure(figsize=(15,8))\n    plt.plot(to_plot, label='Prediction')\n    plt.plot(reality, label='Reality')\n    plt.legend()\n    plt.title('Forecasting x Reality - '+str(city_name))\n    plt.show()\n\nreality_plotter_8('Curitiba', 100)\nreality_plotter_8('Rio de Janeiro', 100)\nreality_plotter_8('Porto Alegre', 100)\nreality_plotter_8('S\u00e3o Paulo', 100)\nreality_plotter_8('Manaus', 100)\nreality_plotter_8('Salvador', 100)\nreality_plotter_8('Goi\u00e2nia', 100)","c4488f70":"reality_plotter_8('Curitiba', 300)\nreality_plotter_8('Rio de Janeiro', 300)\nreality_plotter_8('Porto Alegre', 300)\nreality_plotter_8('S\u00e3o Paulo', 300)\nreality_plotter_8('Manaus', 300)\nreality_plotter_8('Salvador', 300)\nreality_plotter_8('Goi\u00e2nia', 300)","ce9997ed":"After some exhausting lineplot analysis, we should now get started with scattering to see if there is any inferable correlation or causation between the variables\n. ","9b8ad890":"Plot the separate raw evolution of cases for the sample.\n\n","d22e3147":"# Manaus\n\nThe soar of Manaus deaths by 1000, from 2021-01 to 2021-03, is certainly due to a collapse in the city's hospitals. A combination of rising cases and an unprecedent shortage on basic health inputs overcharged the system.\n\nAs in the picture bellow, the community had to assume the responsability of carriage and supply of oxygen to the hospitals. \n\n\n<img src=\"https:\/\/ichef.bbci.co.uk\/news\/800\/cpsprodpb\/1803E\/production\/_116666389_1be0925a-cf77-4afd-8475-5968340cd1f9.jpg\">\n\n","4f396a20":"# Raves over graves\n# \nThe main topic that catched eyes in social medias was the massive amount of illegal parties that took place during the pandemics. \n\n\nGoing in a completely different direction from the public efforts to contain the disease, some people decided that having fun was more worthier than stopping the spread of COVID-19. \n\nMany instagram and twitter accounts surged with the goal to expose those illegal gatherings and to raise concern for the authorities.\n\n<img src=\"https:\/\/i.em.com.br\/tBw_y42duTCPjueuS5X650Zhd2Q=\/790x\/smart\/imgsapp.em.com.br\/app\/noticia_127983242361\/2020\/11\/09\/1202754\/20201109121431759395a.jpg\">\n\n\n\nUnfortunetly there is no available informations on illegal parties, so we can't use it directly as an variable to explain deaths nor cases.\n\nA good substitute for the exact number of parties might be the holidays: a period where gathering intensifies.\n\nThe next section aims to visualize the holidays along the cases\/deaths curve and, maybe, see some relation.\n","018cbbce":"Altought those capitals are not the greatest pick to represent the reality of brazilians munincipalities, which are many and heterogeneous, we can still extract some explicative trends from them. The graphs are clearly showing the two more agressive phases of the pandemics in Brazil, the \"waves\".\n\nTo assume another perspective we may want to look at the daily cases and deaths, and not only to an absolute value.","5c9797af":"# Remember: if something is too good to be true, then it probably is! \n# \nJokes aside, this prediction is way too accurate, but it fits well as an example for some naive assumptions. \n\nThe DNN is being fed with real world data from the last 7 days and it should give us the value for the next day. \n\nThat is, we're not generating our own inputs to refeed the DNN and measure how it performs (yet), we're plotting predictions (good ones) that are based entirely in real data.\n\n\n","5c039429":"Let's start by fetching some of the libraries used in this project.\n1. Pandas\n2. Numpy\n3. Matplotlib \n4. Seaborn\n5. Tensorflow\n6. Sklearn\n\n","5651908a":"# Cities EDA for COVID-19 in Brazil and Neural Networks prediction\n<img src=\"https:\/\/static.toiimg.com\/photo\/77502958.cms\">\n\n\nBrazil has reached a Dantesque point of the pandemics. We face a maximum level of ICU beds ocupation and a possible shortage of hospital inputs in the upcoming days. Death records are being beaten in a daily basis and vaccination is going way too slow to stop the spread of the virus.\n\nThe current phase of the pandemic can be described as anthropophagic, while deaths and cases are soaring, multiple illegal parties are taking place. In addition to that, unrealistic and non-scientific measures are being adopted by the Federal Government to fight the virus.\n\nThis notebook aims for an Explanatory Data Analisys (EDA) for COVID-19 cities data and further predictions using the powerful Neural Networks tool.\n\nI got a lot of inspirations from previous notebooks posted, such as: (Panorama do COVID-19 no Brasil - Ello\u00e1 B. Guedes). Thank you a lot for sharing your works! ","8b2cbab9":"I don't know if it works to insert a boolean value transformed to 0\/1 in a DNN. But it seems to bring a little greater accuracy if compared to the first model.\n\n\n\n\n\n\nAn interesting feature for further studies is how the \"flag\" color influences the virus progression rate. The flag is a measure of the intensity of public enforcement to different levels of quarentine.\n\n\n<img src=\"https:\/\/media.gazetadopovo.com.br\/2020\/06\/09182006\/protocolo-960x540.png\">","25f9596f":"There is no great insight from the graph above. In Brazil, cities with greater GDP per Capita tend to have higher populations, and that may be the cause for the positive correlation seen.\n\nNotice some obvious results below:","15adbd07":"Mortality has almost 0 correlation with all of the parameters. That somehow \"kills\" the attempt of using social and economics inputs as explanatory variables.\n\nCOMP_Q has a really strong relation with cases and deaths (0.93 and 0.94).\n\nHow the Number of Companies: Human health and social services\/Population influences the deaths?","29da5bca":"Unconclusive results\n","927f2fa2":"Now check a correlation matrix for the choosen parameters:","aea4d2da":" The accuracy raised for most of the cities. \n\n\n**What if we set the days parameter to 300?**","195f2229":"Although the heatmap already pointed to a low correlation between mortality and economic variables, lets scatter those to see how it behaves. ","5e2b7754":"Now we won't feed the neural network with complete information. Let's see how it deals with new predictions build from previous predictions made by the DNN itself.\n\nFor this, I've built a function that take as argument an arbitrary number, that is, the real world data on those days in order to construct the model over it.\n\n**For the first example i'll feed the DNN with 100 days of real world data**\n","fc5c1f38":"Plot the separate raw evolution of cases for a sample of capitals that will be used throughout  the entire analysis.\n","032cccd1":"How are those cities mortality rates behaving  when compared to the nation? Which is the highest mortality rate, and which is the lowest?","3b6241c4":"Poor results in general. \n \n**Notice how it reacts by raising the number of real world days to 200**","556004ff":"Deaths are growing along with the number of medical facilities in cities. At first sight that seems nonsense, but if we look closer we can infere that if some COVID19 patient lives in a city that lack the disease treatment infrastructure, he will be moved to somewhere that can provide him his needs.\n\n\nIn case he dies in a bigger \"sattelite\" city, his death will be counted as belonging to that place he was transfered for, in search for treatment.\n\nCheck a more especific analysis below, targeting only bigger cities.","c64091f0":"* Set an matplotlib charming style.\n* Load and assign variables to datasets. \n","5a9eef7d":"Let's take a look at covid in cities data.\n","a2d3b613":"Check some \"naive\" forecasting with the new model:","18e99d70":"There is an interesting variable at the cities dataset, the \"COMP_Q\" is the \"Number of Companies: Human health and social services\".\n\nBefore the trial to credit some causation relation to this feature, it's important to notice an aspect of cities in Brazil: most of them are extremely small.\n\nCheck out:","e2f4a765":"Praia do Rosa is a beautiful spot to spend vacations, the beach get plenty of visitors during holidays. \n\nCovid wasn't a significant \"detail\" when peolpe decided whether to go there during quarentine.\n\nThe beach became a focus for illegal parties, Imbituba munincipality regulators were strongly criticized for the lack of enforcement.\n\n\n<img src=\"https:\/\/ichef.bbci.co.uk\/news\/800\/cpsprodpb\/17A27\/production\/_115870869_7a0674c1-8b78-413d-8750-e05f9232ea78.jpg\">\n\n\n\nThe tourists go as they come, and they can find, easily, COVID treatment in their own cities, in their own medical facilities if needed. \n\nFor the locals the situation is harsher. Surely the city of Imbituba doesn't have any structural resources to face a mass demand for ICU beds or respirators.\n","ef79041c":"The last graph shows us a significant increase, in almost every state, with the ability to deal with the virus. The \"learning curve\" may derive from a better procedure establishment on how to treat the disease in the hospitals.\n\nWe can also see that the richest region in Brazil ownes the highest rates of mortality, troughout the whole time of the pandemics.\n\n\n\n","c66f9d74":"Now we shall let the DNN walk by it's own legs.","aa35a80b":"# **How are the cases by 1000 in the sample capitals?**","8c6acc2c":"# Neural Network Predictions \n\nThe first prediction will be made using a sequential model containing a single dense layer with 1 neuron.\n\nThis DNN was trained on data from every city in Brazil. The data was sliced into 7 days windows (time sequenced) and it tries to predict the next day number of cases or deaths.\n\nLet's look at the outcome.\n","8e568199":"We should now check if there are any significant differences between mortality rates in brazilian regions. If there are, the possibility of explanatory socioeconomics parameters show up. ","18b95a43":"# Implementing a more complex Deep Neural Network \n\nThe DNN to be used now has more layers than the previous one. With one interesting additional feature, the 5-10 days that come after a **holiday** will receive a \"1\", all others get a \"0\".     \n\nThis addition will try to figure out some relation between the occurance of holidays (more intensive gathering) and the cases increase in the subsequent days. ","fbe27914":"I want to point out the fact that data gathering might variate among cities: definitely Curitiba uses some alternative method to register their cases.\n\n\nThose are plots based on the difference between the \"current\" day number of cases and the previous day number of cases, that explains the presence of some non positive numbers.\n\n\nBesides that, we notice again the wave feature of this pandemic until now.\n\nNow check the deaths by day variation. ","2d04a653":"Now we should check the demographic information related to cities and select some useful columns.  ","abe40ed6":"Now let's take a look in the distribution of deaths among the brazilian capitals","4443100a":"With 300 days of input we manage to achive more accurate results in general.\n\nNotice that in most cases the DNN overestimates the number of cases. That is due to the intensification on the lockdown policies within the cities: the progression rate of the disease has slowed down.\n\n"}}