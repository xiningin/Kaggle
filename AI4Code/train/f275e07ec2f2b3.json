{"cell_type":{"af84426a":"code","e25c318b":"code","eb0aec44":"code","d46e41ac":"code","981d308f":"code","42c1f873":"code","00f80d4a":"code","8a254340":"code","dd5c2305":"code","84478abb":"code","9c2f4512":"code","42f140ee":"code","9e84d310":"code","fff81be6":"code","90f764a0":"code","c2641ccc":"code","4c373ef6":"code","01ccc52d":"code","263af306":"code","aaecec06":"code","ab4cb12a":"code","1d21783a":"code","3017690d":"code","f6c4ddd8":"code","abed26be":"code","52be8341":"code","c0d3b371":"code","a2b1d536":"code","1a9c4bc0":"code","799257a8":"code","4a67ab10":"code","54b043e7":"code","df206a99":"code","63905109":"code","7fae88f7":"code","b75a8b7b":"code","f023c583":"code","3fafc91b":"code","ac731659":"code","3a6d7366":"code","c83d6e0b":"code","880a9585":"code","3bbcae85":"markdown","94fac4a6":"markdown","367c6195":"markdown","2ac3628e":"markdown","79df10cd":"markdown","972709ea":"markdown","f8b33764":"markdown","67045b30":"markdown","17d7c12a":"markdown","7a648744":"markdown","81921843":"markdown","1df44ed6":"markdown","b818b3cb":"markdown","3b88f459":"markdown","040b0f21":"markdown","ca4d66a0":"markdown","2e4e6712":"markdown","5a64cf31":"markdown","c63714ac":"markdown","c691f479":"markdown","2d62cfb7":"markdown","3de39dd8":"markdown","d2c47c32":"markdown","885856d3":"markdown"},"source":{"af84426a":"# CPU libraries\nimport os\nimport json\nimport glob # \u30d1\u30bf\u30fc\u30f3\u306b\u4e00\u81f4\u3059\u308b\u3059\u3079\u3066\u306e\u30d1\u30b9\u540d\u3092\u898b\u3064\u3051\u308b\nimport cv2  # OpenCV(\u753b\u50cf\u306e\u8aad\u307f\u66f8\u304d\u30fb\u30ea\u30b5\u30a4\u30ba\u30fb\u53cd\u8ee2\u306a\u3069\u306e\u52a0\u5de5)\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns # \u30c7\u30fc\u30bf\u53ef\u8996\u5316(\u4e2d\u3067matplotlib\u3092\u4f7f\u3063\u3066\u308b)\nimport matplotlib     # \u30c7\u30fc\u30bf\u53ef\u8996\u5316\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\n\nfrom PIL import Image, ImageOps # \u753b\u50cf\u51e6\u7406(\u53c2\u8003\uff1ahttps:\/\/note.nkmk.me\/python-pillow-basic\/)\nfrom skimage import io          # \u753b\u50cf\u51e6\u7406(\u53c2\u8003\uff1ahttps:\/\/qiita.com\/supersaiakujin\/items\/fc54116df9ca6958a68d)\nfrom skimage.color import rgba2rgb, rgb2xyz\nfrom tqdm import tqdm           # \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\nfrom dataclasses import dataclass  # __init__() \u306e\u3088\u3046\u306a\u7279\u6b8a\u306a\u30af\u30e9\u30b9\u3092\u751f\u6210\nfrom math import floor, ceil\n\nmycolors = [\"#797D62\", \"#9B9B7A\", \"#D9AE94\", \"#FFCB69\", \"#D08C60\", \"#997B66\"]","e25c318b":"def show_values_on_bars(axs, h_v=\"v\", space=0.4):\n    '''seaborn\u306e\u68d2\u30b0\u30e9\u30d5\u306e\u6700\u5f8c\u306b\u5024\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\u3002\n    axs: \u30d7\u30ed\u30c3\u30c8\u306e\u8ef8\n    h_v: \u30d0\u30fc\u30d7\u30ed\u30c3\u30c8\u304c\u5782\u76f4\uff0f\u6c34\u5e73\u304b\u3069\u3046\u304b'''\n    \n    def _show_on_single_plot(ax):\n        if h_v == \"v\":  # \u5782\u76f4\u306e\u5834\u5408\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() \/ 2\n                _y = p.get_y() + p.get_height()\n                value = int(p.get_height())\n                ax.text(_x, _y, format(value, ','), ha=\"center\") \n        elif h_v == \"h\": # \u6c34\u5e73\u306e\u5834\u5408\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() + float(space)\n                _y = p.get_y() + p.get_height()\n                value = int(p.get_width())\n                ax.text(_x, _y, format(value, ','), ha=\"left\")\n\n    if isinstance(axs, np.ndarray):\n        for idx, ax in np.ndenumerate(axs):\n            _show_on_single_plot(ax)\n    else:\n        _show_on_single_plot(axs)","eb0aec44":"import wandb\nos.environ[\"WANDB_SILENT\"] = \"true\"\n\nfrom kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\npersonal_key_for_api = user_secrets.get_secret(\"wandb-key\")","d46e41ac":"# wandb\u306b\u30ed\u30b0\u30a4\u30f3\n! wandb login $personal_key_for_api","981d308f":"# \u65b0\u898f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u521d\u671f\u5316\n### project - overajj\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u540d\u524d\uff08GitHub\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u540d\u524d\u3068\u540c\u3058)\n### name\/experiment - run\u306e\u540d\u524d\uff081\u3064\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u8907\u6570\u306erun\u3092\u4f7f\u7528)\nrun = wandb.init(project=\"indoor-location-kaggle\", name=\"data-understanding\")","42c1f873":"# \u30d5\u30a1\u30a4\u30eb\u6570\u3092\u78ba\u8a8d\ntrain_paths = glob.glob('..\/input\/indoor-location-navigation\/train\/*\/*\/*')\ntest_paths = glob.glob('..\/input\/indoor-location-navigation\/test\/*')\nsites = glob.glob('..\/input\/indoor-location-navigation\/metadata\/*')\n\nprint(\"No. Files in Train: {:,}\".format(len(train_paths)), \"\\n\" +\n      \"No. Files in Test: {:,}\".format(len(test_paths)), \"\\n\" +\n      \"Total Sites (metadata): {:,}\".format(len(sites)))","00f80d4a":"# \u5b9f\u9a13\u7684\u306bW&B\u306e\"data-understanding\"\u306b\u30ed\u30b0\u3092\u6b8b\u3059\u3002W&B\u306e\u30b5\u30a4\u30c8\u53c2\u7167\n# \u53c2\u8003\uff1ahttps:\/\/wandb.ai\/honda\/indoor-location-kaggle\/runs\/36e88gwf?workspace=user-honda\nwandb.log({'No. Files in Train': len(train_paths), \n           'No. Files in Test:' : len(test_paths),\n           'Total Sites (metadata)' : len(sites)})","8a254340":"# 1\u30d5\u30a1\u30a4\u30eb\u3092\u306e\u305e\u3044\u3066\u307f\u308b\nbase = '..\/input\/indoor-location-navigation'\npath = f'{base}\/train\/5cd56b5ae2acfd2d33b58549\/5F\/5d06134c4a19c000086c4324.txt'\n\nwith open(path) as p:\n    lines = p.readlines()\n\nprint(\"No. Lines in 1 example: {:,}\". format(len(lines)), \"\\n\" +\n      \"Example (5 lines): \", lines[0:5])","dd5c2305":"!cp -r ..\/input\/indoor-locationnavigation-2021\/indoor-location-competition-20-master\/indoor-location-competition-20-master\/* .\/","84478abb":"# \u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30ab\u30b9\u30bf\u30e0\u95a2\u6570\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom io_f import read_data_file\n\n# 1\u3064\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u30d5\u30a1\u30a4\u30eb\u3067\u8aad\u3080\nsample_file = read_data_file(path)\n\n# \u5404\u5909\u6570\u306e\u60c5\u5831\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059:\nprint(\"~~~ Example ~~~\")\n# acce:TYPE_ACCELEROMETER:\u52a0\u901f\u5ea6\u8a08\n# acacce_uncalice: TYPE_ACCELEROMETER_UNCALIBRATED:\u52a0\u901f\u5ea6\u8a08(\u88dc\u6b63\u524d\uff1f)\n# ahrs:TYPE_ROTATION_VECTOR\uff1a\u56de\u8ee2\u30d9\u30af\u30c8\u30eb\n# gyro:TYPE_GYROSCOPE\uff1a\u30b8\u30e3\u30a4\u30ed\u30b9\u30b3\u30fc\u30d7(\u7269\u4f53\u306e\u89d2\u5ea6\uff08\u59ff\u52e2\uff09\u3084\u89d2\u901f\u5ea6\u3042\u308b\u3044\u306f\u89d2\u52a0\u901f\u5ea6\u3092\u691c\u51fa\u3059\u308b\u8a08\u6e2c\u5668\u306a\u3044\u3057\u88c5\u7f6e)\n# ibeacn:TYPE_BEACON\uff1a\u30d3\u30fc\u30b3\u30f3(Bluetooth low energy\u306e\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u901a\u4fe1\u3092\u5229\u7528\u3057\u305fiOS\u306e\u8fd1\u63a5\u901a\u77e5\u6a5f\u80fd)\n# magn:TYPE_MAGNETIC_FIELD\uff1a\u78c1\u529b\u8a08\n# magn_uncali:TYPE_MAGNETIC_FIELD_UNCALIBRATED\uff1a\u78c1\u529b\u8a08\uff08\u88dc\u6b63\u524d\uff1f\uff09\n# waypoint:TYPE_WAYPOINT\uff1a\u6b69\u3044\u305f\u5834\u6240\n# wifi:TYPE_WIFI\uff1a wifi\nprint(\"acce: {}\".format(sample_file.acce.shape), \"\\n\" +\n      \"acacce_uncalice: {}\".format(sample_file.acce_uncali.shape), \"\\n\" +\n      \"ahrs: {}\".format(sample_file.ahrs.shape), \"\\n\" +\n      \"gyro: {}\".format(sample_file.gyro.shape), \"\\n\" +\n      \"gyro_uncali: {}\".format(sample_file.gyro_uncali.shape), \"\\n\" +\n      \"ibeacon: {}\".format(sample_file.ibeacon.shape), \"\\n\" +\n      \"magn: {}\".format(sample_file.magn.shape), \"\\n\" +\n      \"magn_uncali: {}\".format(sample_file.magn_uncali.shape), \"\\n\" +\n      \"waypoint: {}\".format(sample_file.waypoint.shape), \"\\n\" +\n      \"wifi: {}\".format(sample_file.wifi.shape))","9c2f4512":"def show_site_png(site):\n    '''\u3053\u306e\u6a5f\u80fd\u306f\u3001\u30e1\u30bf\u30c7\u30fc\u30bf\u306b\u542b\u307e\u308c\u308b.png\u753b\u50cf\u3092\u53ef\u8996\u5316\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002\n    sites: 1\u3064\u306e\u30b5\u30a4\u30c8\uff08\u307e\u305f\u306f\u5efa\u7269\uff09\u306b\u5bfe\u5fdc\u3059\u308b\u30b3\u30fc\u30c9'''\n    \n    base = '..\/input\/indoor-location-navigation'\n    site_path = f\"{base}\/metadata\/{site}\/*\/floor_image.png\"\n    floor_paths = glob.glob(site_path)\n    n = len(floor_paths)\n\n    # \u30ab\u30b9\u30bf\u30e0\u306e\u884c\u3068\u5217\u306e\u6570\u3092\u4f5c\u6210 1\u884c\u306b\u3064\u304d3\u3064\u307e\u3067\u8868\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n    ncols = [ceil(n \/ 3) if n > 4 else 4][0]\n    nrows = [ceil(n \/ ncols) if n > 4 else 1][0]\n\n    plt.figure(figsize=(16, 10))\n    plt.suptitle(f\"Site no. '{site}'\", fontsize=18)\n\n    # \u5404\u968e\u306e\u30d7\u30ed\u30c3\u30c8\u30a4\u30e1\u30fc\u30b8\n    for k, floor in enumerate(floor_paths):\n        plt.subplot(nrows, ncols, k+1)\n\n        image = Image.open(floor)\n        image = ImageOps.expand(image, border=15, fill=mycolors[5])\n\n        plt.imshow(image)\n        plt.axis(\"off\")\n        title = floor.split(\"\/\")[5]\n        plt.title(title, fontsize=15)\n        \n        # W&B\u306e\"data-understanding\"\u306b \u5b9f\u9a13\u7684\u306b\u30ed\u30b0\u51fa\u529b\u3059\u308b\n        wandb.log({\"Site Floors Example\": plt})","42f140ee":"# 1\u3064\u306e\u4f8b\u3092\u898b\u3066\u307f\u3088\u3046\n# site = '5cd56b64e2acfd2d33b59246'\nshow_site_png(site='5cd56b64e2acfd2d33b592b3')","9e84d310":"all_floors = glob.glob(\"..\/input\/indoor-location-navigation\/metadata\/*\/*\")\nfloor_no = []\n\n# \u30d5\u30ed\u30a2\u756a\u53f7\u306e\u307f\u3092\u62bd\u51fa\nfor floor in all_floors:\n    no = floor.split(\"\/\")[5]\n    floor_no.append(no)\n    \nfloor_no = pd.DataFrame(floor_no, columns=[\"No\"])\nfloor_no = floor_no[\"No\"].value_counts().reset_index()\nfloor_no = floor_no.sort_values(\"No\", ascending=False)\n\n# ~~~~\n# \u30d5\u30ed\u30a2\u3054\u3068\u306b\u6570\u3092\u8868\u793a\n# ~~~~\nplt.figure(figsize=(16, 12))\nax = sns.barplot(data=floor_no, x=\"No\", y=\"index\", palette=\"Greens_r\",\n                 saturation=0.4)\nshow_values_on_bars(ax, h_v=\"h\", space=0.4)\nax.set_title(\"Frequency of Floors\", size = 26, color = mycolors[0], weight='bold')\nax.set_xlabel(\"\")\nax.set_ylabel(\"Floor No.\", size = 18, color = mycolors[0], weight='bold')\nplt.xticks([])\nplt.yticks(fontsize=11)\nsns.despine(left=True, bottom=True);","fff81be6":"# W&B\u306e\"data-understanding\"\u306b\u5b9f\u9a13\u7684\u306b\u30ed\u30b0\u51fa\u529b\u3059\u308b\u3002\n### \u73fe\u5728\u3001seaborn\u306e\u30c0\u30a4\u30ec\u30af\u30c8\u30ed\u30b0\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n### \u30ab\u30b9\u30bf\u30e0\u68d2\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\ndata = [[index, no] for (index, no) in zip(floor_no[\"index\"], floor_no[\"No\"])]\ntable = wandb.Table(data=data, columns=[\"index\", \"no\"])\nwandb.log({\"Frequency of Floors\" : wandb.plot.bar(table, \"index\", \"no\", title=\"Frequency of Floors\")})","90f764a0":"# GitHub functions\nfrom visualize_f import visualize_trajectory, visualize_heatmap\n\npath = f'{base}\/train\/5cd56b5ae2acfd2d33b58549\/5F\/5d06134c4a19c000086c4324.txt'\n\n# \u30b5\u30f3\u30d7\u30eb\u306e\u8aad\u307f\u8fbc\u307f\nexample = read_data_file(path)\n\n# ~~~~~~~~~\n\n# \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3068x,y\u5ea7\u6a19\u306e\u5024\u3092\u8fd4\u3059\ntrajectory = example.waypoint\n# \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u524a\u9664\uff08\u5fc5\u8981\u306a\u306e\u306f\u5ea7\u6a19\u306e\u307f)\ntrajectory = trajectory[:, 1:3]\n\n# \u4f8b\u984c\u306b\u6cbf\u3063\u305ffloor_plan\u3092\u7528\u610f\u3059\u308b\n# ..\/input\/indoor-location-navigation\/metadata\/5a0546857ecc773753327266\/B1\/xxxxx.xxx \u3068\u3044\u3046\u3088\u3046\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\nsite = path.split(\"\/\")[4]\nfloorNo = path.split(\"\/\")[5]\nfloor_plan_filename = f'{base}\/metadata\/{site}\/{floorNo}\/floor_image.png'\n\n# width_meter & height_meter\u3092\u6e96\u5099\u3059\u308b\n### (taken from the .json file)\njson_plan_filename = f'{base}\/metadata\/{site}\/{floorNo}\/floor_info.json'\nwith open(json_plan_filename) as json_file:\n    json_data = json.load(json_file)\n    \n# {\"map_info\": {\"height\": 204.53342955266643, \"width\": 270.34143433711995}} \u3053\u3093\u306a\u30c7\u30fc\u30bf\nwidth_meter = json_data[\"map_info\"][\"width\"]\nheight_meter = json_data[\"map_info\"][\"height\"]\n\n# Title\ntitle = \"Example of Waypoint\"\n\n# ~~~~~~~~~\n\n# Finally, let's plot\nvisualize_trajectory(trajectory = trajectory,\n                     floor_plan_filename = floor_plan_filename,\n                     width_meter = width_meter,\n                     height_meter = height_meter,\n                     title = title,\n                     g_size=755,\n                     point_color='#76C1A0',\n                     start_color='#007B51',\n                     end_color='#9B0000')","c2641ccc":"# GitHub functions\nfrom main import calibrate_magnetic_wifi_ibeacon_to_position\nfrom main import extract_magnetic_strength\n\n# \u78c1\u529b\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b\u3002\nmwi_datas = calibrate_magnetic_wifi_ibeacon_to_position([path])\nmagnetic_strength = extract_magnetic_strength(mwi_datas)\n\nheat_positions = np.array(list(magnetic_strength.keys()))\nheat_values = np.array(list(magnetic_strength.values()))\n\n# \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u306e\u53ef\u8996\u5316\nvisualize_heatmap(heat_positions, \n                  heat_values, \n                  floor_plan_filename,\n                  width_meter, \n                  height_meter, \n                  colorbar_title='mu tesla', \n                  title='Magnetic Strength',\n                  g_size=755,\n                  colorscale='temps')","4c373ef6":"# GitHub Libraries\nfrom main import extract_wifi_rssi, extract_wifi_count\n\n# Get WiFi data\nwifi_rssi = extract_wifi_rssi(mwi_datas)\nprint(f'This floor has {len(wifi_rssi.keys())} wifi aps (access points).')\n\nwifi_counts = extract_wifi_count(mwi_datas)\nheat_positions = np.array(list(wifi_counts.keys()))\nheat_values = np.array(list(wifi_counts.values()))\n# \u7121\u7ddaLAN\u304c\u691c\u51fa\u3055\u308c\u306a\u3044\u4f4d\u7f6e\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\nmask = heat_values != 0\nheat_positions = heat_positions[mask]\nheat_values = heat_values[mask]\n\n# The heatmap\nvisualize_heatmap(heat_positions, \n                  heat_values, \n                  floor_plan_filename, \n                  width_meter, \n                  height_meter, \n                  colorbar_title='count', \n                  title=f'WiFi Count',\n                  g_size=755,\n                  colorscale='temps')","01ccc52d":"# The GitHub function\nfrom main import extract_ibeacon_rssi\n\n# Getting the iBeacon data\nibeacon_rssi = extract_ibeacon_rssi(mwi_datas)\nprint(f'This floor has {len(ibeacon_rssi.keys())} ibeacons.')\nibeacon_ummids = list(ibeacon_rssi.keys())\ntarget_ibeacon = ibeacon_ummids[0]\nheat_positions = np.array(list(ibeacon_rssi[target_ibeacon].keys()))\nheat_values = np.array(list(ibeacon_rssi[target_ibeacon].values()))[:, 0]\n\n# The heatmap\nvisualize_heatmap(heat_positions, \n                  heat_values, \n                  floor_plan_filename, \n                  width_meter, \n                  height_meter, \n                  colorbar_title='dBm', \n                  title='iBeacon RSSE',\n                  g_size=755,\n                  colorscale='temps')","263af306":"# ~ END of EXPERIMENT ~\nwandb.finish()\n# ~~~~~~~~~~~~~~~~~~~~~","aaecec06":"from numpy import sqrt, power\nfrom numpy import abs as absolute","ab4cb12a":"def mean_position_error(x_pred, y_pred, f_pred, x_true, y_true, f_true, p=15):\n    '''Mean Position Error\u3092\u8a55\u4fa1\u3059\u308b\u30ab\u30b9\u30bf\u30e0\u95a2\u6570\u3002\n    x: waypoint\u306e\u4f4d\u7f6e\u306ex\u5ea7\u6a19; dtype list()\n    y: waypoint\u306e\u4f4d\u7f6e\u306ey\u5ea7\u6a19; dtype list()\n    f: \u6b63\u78ba\u306a\u968e\u6570\u307e\u305f\u306f\u5efa\u7269; dtype list()\n    p: \u30d5\u30ed\u30a2\u30da\u30ca\u30eb\u30c6\u30a3'''\n    \n    N = len(x_true)\n    #1\n    formula = sqrt( power(x_pred - x_true, 2) + power(y_pred - y_true, 2) )\n    #2\n    formula = formula + p * absolute(f_pred - f_true)\n    #3\n    formula = formula.sum() \/ N\n    \n    return formula","1d21783a":"!pip install cupy-cuda102\n!pip install cupy","3017690d":"!pip freeze","f6c4ddd8":"!pip install cupy --no-cache-dir -vvvv","abed26be":"from cupy import sqrt as sqrt_g\nfrom cupy import power as power_g\nfrom cupy import abs as abs_g","52be8341":"def mean_position_error_gpu(x_pred, y_pred, f_pred, x_true, y_true, f_true, p=15):\n    '''Same, but Faster ;)\n    \u3053\u3053\u3067RAPIDS\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u5f8c\u306bXGBoost\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002'''\n    \n    N = len(x_true)\n    formula = sqrt_g( power_g(x_pred - x_true, 2) + power_g(y_pred - y_true, 2) )\n    formula = formula + p * abs_g(f_pred - f_true)\n    formula = formula.sum() \/ N\n    return formula","c0d3b371":"def make_submission(predictions, sample_subm, name=\"base.csv\"):\n    '''\u4e88\u6e2c\u5024\u306e\u30ea\u30b9\u30c8\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u5f62\u5f0f\u3067\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002'''\n    final_submission = pd.concat(predictions).reset_index(drop=True)\n    final_submission.index = sample_subm.index\n    final_submission.to_csv(name)\n    print(\"Submission ready.\")","a2b1d536":"# Import Libraries\nimport lightgbm as lgb\n\n# ~~~~\n# Data\n# ~~~~\nbase_dir = \"..\/input\/indoor-navigation-and-location-wifi-features\/wifi_features\"\ntrain_dir = \"\/train\/*_train.csv\"\ntest_dir = \"\/test\/*_test.csv\"\n\n\n# Paths for train & test files\ntrain_paths = sorted(glob.glob(base_dir + train_dir))\ntest_paths = sorted(glob.glob(base_dir + test_dir))\nsample_subm = pd.read_csv('..\/input\/indoor-location-navigation\/sample_submission.csv',\n                          index_col=0)\n\nprint(\"Len Train Files: {}\".format(len(train_paths)), \"\\n\" +\n      \"Len Test Files: {}\".format(len(test_paths)))","1a9c4bc0":"# \u65b0\u3057\u3044\u5b9f\u9a13\u306e\u521d\u671f\u5316 (LGBM)\nrun = wandb.init(project=\"indoor-location-kaggle\", name=\"lgbm_train\")\n\nwandb.log({'Len Train Files' : len(train_paths),\n           'Len Test Files' : len(test_paths)})","799257a8":"def train_lgbm(train_perc=0.75, version=1):\n    '''\n    Training loop\n    '''\n\n    f = open(f\"lgbm_logs_{version}.txt\", \"w+\")\n    lgbm_predictions = []\n    \n    k = 1\n    for train_path, test_path in zip(train_paths, test_paths):\n\n\n        # --- Read in data ---\n        # index_col=\u6307\u5b9a\u3057\u305f\u5217\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3057\u3066\u5229\u7528\n        # frac=\u62bd\u51fa\u3059\u308b\u884c\u30fb\u5217\u306e\u5272\u5408\u3092\u6307\u5b9a\u3067\u304d\u308b\u30021\u3060\u3068100%\u3002\n        train_df = pd.read_csv(train_path, index_col=0)\n        train_df = train_df.sample(frac=1, random_state=10)\n\n        # \u6700\u5f8c\u306e\u5217\u3092\u6d88\u3059 (which is \"site_path_timestamp\")\n        test_df = pd.read_csv(test_path, index_col=0).iloc[:, :-1]\n\n        # \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306e\u30b5\u30f3\u30d7\u30eb\u30a2\u30a6\u30c8\n        ### 3\u3064\u306e\u30e2\u30c7\u30eb\u3059\u3079\u3066\u306b\u540c\u3058\u60c5\u5831\u3092\u9078\u629e\u3059\u308b\u3088\u3046\u306b\u6ce8\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n        ### 1 for x, 1 for y and 1 for floor\n\n        train_size = int(len(train_df) * train_perc)\n\n\n        # --- Data Validation ---\n        # Train features + targets(75\uff05\u3092\u7df4\u7fd2\u7528)\n        X_train = train_df.iloc[:train_size, :-4]\n        y_train_x = train_df.iloc[:train_size, -4]\n        y_train_y = train_df.iloc[:train_size, -3]\n        y_train_f = train_df.iloc[:train_size, -2]\n\n        # Valid features + targets\uff08\uff12\uff15\uff05\u3092\u30c6\u30b9\u30c8\u7528\uff09\n        X_valid = train_df.iloc[train_size:, :-4]\n        y_valid_x = train_df.iloc[train_size:, -4]\n        y_valid_y = train_df.iloc[train_size:, -3]\n        y_valid_f = train_df.iloc[train_size:, -2]\n\n\n        # --- Model Training ---\n        # n_estimators=\u30c4\u30ea\u30fc\uff08\u6728\uff09\u306e\u6570\u3001num_leaves=\u6700\u5927\u30c4\u30ea\u30fc\u30ea\u30fc\u30d5\u6570\n        lgbm_x = lgb.LGBMRegressor(n_estimators=150, num_leaves=127)\n        lgbm_x.fit(X_train, y_train_x)\n\n        lgbm_y = lgb.LGBMRegressor(n_estimators=150, num_leaves=127)\n        lgbm_y.fit(X_train, y_train_y)\n\n        lgbm_f = lgb.LGBMClassifier(n_estimators=150, num_leaves=127)\n        lgbm_f.fit(X_train, y_train_f)\n\n\n        # --- \u30e2\u30c7\u30eb\u691c\u8a3c \u4e88\u6e2c ---\n        preds_x = lgbm_x.predict(X_valid)\n        preds_y = lgbm_y.predict(X_valid)\n        preds_f = lgbm_f.predict(X_valid).astype(int)\n        \n        mpe = mean_position_error(preds_x, preds_y, preds_f,\n                                  y_valid_x, y_valid_y, y_valid_f)\n        print(\"{} | MPE: {}\".format(k, mpe))\n        # Save logs\n        with open(f\"lgbm_logs_{version}.txt\", 'a+') as f:\n            print(\"{} | MPE: {}\".format(k, mpe), file=f)\n        k+=1\n        \n        # Log MPE of this experiment\n        wandb.log({'MPE' : mpe}, step=k)\n\n\n        # --- \u30e2\u30c7\u30eb\u30c6\u30b9\u30c8\u306e\u4e88\u6e2c ---\n        test_preds_x = lgbm_x.predict(test_df)\n        test_preds_y = lgbm_y.predict(test_df)\n        test_preds_f = lgbm_f.predict(test_df).astype(int)\n\n        all_test_preds = pd.DataFrame({'floor' : test_preds_f,\n                                       'x' : test_preds_x, \n                                       'y' : test_preds_y})\n        lgbm_predictions.append(all_test_preds)\n    \n    \n    return lgbm_predictions","4a67ab10":"# \u72ec\u81ea\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u884c\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nlgbm_predictions = train_lgbm(train_perc = 0.75, version=1)\n\n# Logs from my training:\nprint(open('..\/input\/indoor-locationnavigation-2021\/lgbm_logs_1.txt', \"r\").read())","54b043e7":"# \u72ec\u81ea\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u884c\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nmake_submission(lgbm_predictions, sample_subm, name=\"lgbm_base.csv\")\n\n# My submission:\nlgbm_predictions = pd.read_csv(\"..\/input\/indoor-locationnavigation-2021\/lgbm_base.csv\")\nlgbm_predictions.to_csv(\"lgbm_base.csv\", index=False)","df206a99":"# ~ END of EXPERIMENT ~\nwandb.finish()\n# ~~~~~~~~~~~~~~~~~~~~~","63905109":"# Libraries\nimport cudf\nimport cupy\nimport cuml\nimport xgboost\n\n# Adjust floor function\n### Multiclass XGBoost\u306f\u3001[0, n]\u306e\u9593\u306e\u30e9\u30d9\u30eb\u3057\u304b\u53d6\u3089\u306a\u3044\u306e\u3067\n### \u3057\u304b\u3057\u3001\u30de\u30a4\u30ca\u30b9\u306e\u30d5\u30ed\u30a2\u5024\u3092\u6301\u3063\u3066\u3044\u307e\u3059\ndef adjust_floor(df, col_name):\n    '''Adjusts the floor to be >= 0.\n    Also returns the number fo classes (also used to complete classification).'''\n    num_classes = df[col_name].nunique()\n    smallest = df[col_name].unique().min()\n    df[col_name] = df[col_name] - smallest\n    \n    return df[col_name], num_classes, smallest","7fae88f7":"# Initialize new experiment (XGB)\nrun = wandb.init(project=\"indoor-location-kaggle\", name=\"xgb_train\")\n\nwandb.log({'Len Train Files' : len(train_paths),\n           'Len Test Files' : len(test_paths)})","b75a8b7b":"def train_xgb(train_perc=0.75, version=1):\n    '''\n    Training loop\n    '''\n\n    f = open(f\"xgb_logs_{version}.txt\", \"w+\")\n    xgb_predictions = []\n    \n    k = 1\n    for train_path, test_path in zip(train_paths, test_paths):\n\n\n        # --- Read in data ---\n        train_df = cudf.read_csv(train_path, index_col=0)\n        train_df = train_df.sample(frac=1, random_state=10)\n        train_df[\"f\"], num_classes, smallest = adjust_floor(train_df, 'f')\n\n        # Erase last column (which is \"site_path_timestamp\")\n        test_df = cudf.read_csv(test_path, index_col=0).iloc[:, :-1]\n\n        # Sample out training and validation data\n        ### we need to be careful to choose same information for ALL 3 models\n        ### 1 for x, 1 for y and 1 for floor\n\n        train_size = int(len(train_df) * train_perc)\n\n\n        # --- Data Validation ---\n        # Train features + targets\n        X_train = train_df.iloc[:train_size, :-4]\n        y_train_x = train_df.iloc[:train_size, -4]\n        y_train_y = train_df.iloc[:train_size, -3]\n        y_train_f = train_df.iloc[:train_size, -2]\n\n        # Valid features + targets\n        X_valid = train_df.iloc[train_size:, :-4]\n        y_valid_x = cupy.asanyarray(train_df.iloc[train_size:, -4])\n        y_valid_y = cupy.asanyarray(train_df.iloc[train_size:, -3])\n        y_valid_f = cupy.asanyarray(train_df.iloc[train_size:, -2])\n        \n        \n        # --- Parameters ---\n        # max_depth=\u6c7a\u5b9a\u6728\u306e\u6df1\u3055\u306e\u6700\u5927\u5024  max_leaves=\u8449\u306e\u6700\u5927\u5024\u3000tree_method=\u6728\u69cb\u9020\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0  grow_policy=\u30c4\u30ea\u30fc\u306b\u65b0\u3057\u3044\u30ce\u30fc\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u65b9\u6cd5\n        regr_params = {'max_depth' : 4, 'max_leaves' : 2**4, \n                       'tree_method' : 'gpu_hist', 'objective' : 'reg:squarederror',\n                       'grow_policy' : 'lossguide', 'colsample_bynode': 0.8}\n        classif_params = {'max_depth' : 4, 'max_leaves' : 2**4,\n                          'tree_method' : 'gpu_hist', 'objective' : 'multi:softmax',\n                          'num_class' : num_classes, 'grow_policy' : 'lossguide',\n                          'colsample_bynode': 0.8, 'verbosity' : 0}\n\n\n        # --- Model Training ---\n        trainMatrix_x = xgboost.DMatrix(data=X_train, label=y_train_x)\n        xgboost_x = xgboost.train(params=regr_params, dtrain=trainMatrix_x)\n\n        trainMatrix_y = xgboost.DMatrix(data=X_train, label=y_train_y)\n        xgboost_y = xgboost.train(params=regr_params, dtrain=trainMatrix_y)\n\n        trainMatrix_f = xgboost.DMatrix(data=X_train, label=y_train_f)\n        xgboost_f = xgboost.train(params=classif_params, dtrain=trainMatrix_f)\n\n\n        # --- Model Validation Predictions ---\n        preds_x = cupy.asanyarray(xgboost_x.predict(xgboost.DMatrix(X_valid)))\n        preds_y = cupy.asanyarray(xgboost_y.predict(xgboost.DMatrix(X_valid)))\n        preds_f = cupy.asanyarray(xgboost_f.predict(xgboost.DMatrix(X_valid)).astype(int))\n\n        mpe = mean_position_error_gpu(preds_x, preds_y, preds_f,\n                                      y_valid_x, y_valid_y, y_valid_f)\n        print(\"{} | MPE: {}\".format(k, mpe))\n        # Save logs\n        with open(f\"xgb_logs_{version}.txt\", 'a+') as f:\n            print(\"{} | MPE: {}\".format(k, mpe), file=f)\n        k+=1\n        # Log MPE of this experiment\n        wandb.log({'MPE' : mpe}, step=k)\n\n\n        # --- Model Test Predictions ---\n        test_preds_x = xgboost_x.predict(xgboost.DMatrix(test_df))\n        test_preds_y = xgboost_y.predict(xgboost.DMatrix(test_df))\n        test_preds_f = xgboost_f.predict(xgboost.DMatrix(test_df)).astype(int) + smallest\n\n        all_test_preds = pd.DataFrame({'floor' : test_preds_f,\n                                       'x' : test_preds_x, \n                                       'y' : test_preds_y})\n        xgb_predictions.append(all_test_preds)\n    \n    \n    return xgb_predictions","f023c583":"# \u72ec\u81ea\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u884c\u3092\u30b3\u30e1\u30f3\u30c8\u3092\u5916\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n# xgb_predictions = train_xgb(train_perc=0.75, version=1)\n\n# Logs from my training:\nprint(open('..\/input\/indoor-locationnavigation-2021\/xgb_logs_1.txt', \"r\").read())","3fafc91b":"# \u4e0b\u306e\u884c\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u5916\u3057\u3066\u3001\u81ea\u5206\u3067\u6295\u7a3f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n# make_submission(xgb_predictions, sample_subm, name=\"xgb_base.csv\")\n\n# My submission:\nxgb_predictions = pd.read_csv(\"..\/input\/indoor-locationnavigation-2021\/xgb_base.csv\")\nxgb_predictions.to_csv(\"xgb_base.csv\", index=False)","ac731659":"# ~ END of EXPERIMENT ~\nwandb.finish()\n# ~~~~~~~~~~~~~~~~~~~~~","3a6d7366":"# Submissions\n### we can save the predictions in W&B\nrun = wandb.init(project='indoor-location-kaggle', name='submissions')\nartifact = wandb.Artifact(name='submissions', \n                          type='dataset')\n\nartifact.add_file(\"..\/input\/indoor-locationnavigation-2021\/lgbm_base.csv\")\nartifact.add_file(\"..\/input\/indoor-locationnavigation-2021\/xgb_base.csv\")\n\nwandb.log_artifact(artifact)\nwandb.finish()","c83d6e0b":"# Logs\n### we can save the predictions in W&B\nrun = wandb.init(project='indoor-location-kaggle', name='training_logs')\nartifact = wandb.Artifact(name='training_logs', \n                          type='dataset')\n\nartifact.add_file(\"..\/input\/indoor-locationnavigation-2021\/lgbm_logs_1.txt\")\nartifact.add_file(\"..\/input\/indoor-locationnavigation-2021\/xgb_logs_1.txt\")\n\nwandb.log_artifact(artifact)\nwandb.finish()","880a9585":"# Read in data\nlgb_preds = pd.read_csv(\"..\/input\/indoor-locationnavigation-2021\/lgbm_base.csv\")\nxgb_preds = pd.read_csv(\"..\/input\/indoor-locationnavigation-2021\/xgb_base.csv\")\n\nsample_submission = pd.read_csv(\"..\/input\/indoor-location-navigation\/sample_submission.csv\")\n\n# Sample Submission\nsample_submission[\"x\"] = lgb_preds[\"x\"] * 0.9 + xgb_preds[\"x\"] * 0.1\nsample_submission[\"y\"] = lgb_preds[\"y\"] * 0.9 + xgb_preds[\"y\"] * 0.1\n\nsample_submission.to_csv(\"blend1.csv\", index=False)","3bbcae85":"## \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\n\n> \u2757**Note**: \u63d0\u793a\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306f`.txt`\u5f62\u5f0f\u3067\u3001\u591a\u304f\u306e\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u305f\u3063\u305f1\u3064\u306e`.txt`\u30d5\u30a1\u30a4\u30eb\uff08\u3064\u307e\u308a1\u3064\u306e\u30d1\u30b9\uff09\u306b\u3001126k\u884c\u4ee5\u4e0a\u306e\u60c5\u5831\u304c\u3042\u308a\u307e\u3057\u305f\u30021\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u3054\u3068\u306b\u60c5\u5831\u306f\u7570\u306a\u308b\u306e\u3067\u3001\u3059\u3079\u3066\u3092\u69cb\u9020\u5316\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u9762\u5012\u306a\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002","94fac4a6":"## II. XGBoost - Faster with RAPIDS\n\n> \ud83d\udccc**Note**: \u4eca\u56de\u306f\u3001GPU\u4e0a\u306e**RAPIDS**\u30e9\u30a4\u30d6\u30e9\u30ea\u3068XGBoost\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u3082\u306e\u3092\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u306e\u4e00\u3064\u3068\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u306e\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u306b\u3064\u3044\u3066\u306e\u8a73\u7d30\u306f[\u3053\u3061\u3089](https:\/\/rapids.ai\/)\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002","367c6195":"### RAPIDS function\n- RAPIDS\uff1a\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u305f\u3081\u306e\u69d8\u3005\u306a\u51e6\u7406\u3092\u4e00\u8cab\u3057\u3066GPU\u3067\u884c\u3046\u305f\u3081\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3059\u3002\n- \u53c2\u8003\uff1ahttps:\/\/qiita.com\/shin_ishiguro\/items\/8f39aac45acc8363a42e","2ac3628e":"# 2. Kaggle\u3067\u306eGitHub repo\u306e\u4f7f\u3044\u65b9?\ud83d\udd17\n\n> \ud83d\udccc**Goal**: \u3053\u306e\u30b3\u30f3\u30da\u306b\u306f\u3001[GitHub repo](https:\/\/github.com\/location-competition\/indoor-location-competition-20)\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002io_f`\u30d5\u30a1\u30a4\u30eb\u306e`read_data_file`\u95a2\u6570\u3092\u4f7f\u3063\u3066\u60c5\u5831\u3092\u8aad\u307f\u8fbc\u3081\u3070\u3044\u3044\u306e\u3067\u3059\uff08\u3053\u3061\u3089\u5074\u3067\u306e\u8ffd\u52a0\u306e\u82e6\u52b4\u306f\u3042\u308a\u307e\u305b\u3093\uff0b\u30b3\u30d4\u30fc\u30da\u30fc\u30b9\u30c8\u3067\u30b3\u30fc\u30c9\u304c\u4e71\u96d1\u306b\u306a\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u305b\u3093 :)\uff09\n\n#### *\ud83d\ude4f\ud83c\udffb\u3053\u306e\u7d20\u6674\u3089\u3057\u3044\u30c8\u30ea\u30c3\u30af\u3092\u6559\u3048\u3066\u304f\u308c\u305f[Laura](https:\/\/www.kaggle.com\/allunia)\u306b\u611f\u8b1d\u3057\u307e\u3059\u3002\ud83d\ude4f\ud83c\udffb*\n\n**Steps**:\n* \ud83e\uddb6\ud83c\udffb - \u3053\u306e\u30ea\u30f3\u30af\u304b\u3089repo\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b(https:\/\/github.com\/location-competition\/indoor-location-competition-20)\n* \ud83e\uddb6\ud83c\udffb - \u30d1\u30c3\u30b1\u30fc\u30b8\u3092Kaggle\u74b0\u5883\u306b\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002 (`!cp -r path\/* .\/`)\n* \ud83e\uddb6\ud83c\udffb - import\u3057\u3066\u597d\u304d\u306a\u3088\u3046\u306b\u4f7f\u3046","79df10cd":"<img src=\"https:\/\/i.imgur.com\/cUQXtS7.png\">\n\n# Specs on how I prepped & trained \u2328\ufe0f\ud83c\udfa8\n### (on my local machine)\n* Z8 G4 Workstation \ud83d\udda5\n* 2 CPUs & 96GB Memory \ud83d\udcbe\n* NVIDIA Quadro RTX 8000 \ud83c\udfae\n* RAPIDS version 0.17 \ud83c\udfc3\ud83c\udffe\u200d\u2640\ufe0f","972709ea":"> We're all set!\n\n# 2. Data Understanding\n\n* `train` - *site*\u3068*floor*\u3067\u69cb\u6210\u3055\u308c\u305f\u5b66\u7fd2\u7528\u30d1\u30b9\u30d5\u30a1\u30a4\u30eb\u3002\u5404\u30d1\u30b9\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u30011\u3064\u306e\u30d5\u30ed\u30a2\u306e1\u3064\u306e\u30d1\u30b9\u306e\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u308b\u3002\n* `test` - \u30c6\u30b9\u30c8\u7528\u306e\u30d1\u30b9\u30d5\u30a1\u30a4\u30eb\u3067\u3001*site*\u3068*floor*\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5404\u30d1\u30b9\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u30011\u3064\u306e\u30d5\u30ed\u30a2\u306e1\u3064\u306e\u30d1\u30b9\u306e\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u304c\u3001**waypoint (x, y)\u30c7\u30fc\u30bf**\u306f\u542b\u307e\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n* `metadata` - \u30d5\u30ed\u30a2\u30e1\u30bf\u30c7\u30fc\u30bf\u30d5\u30a9\u30eb\u30c0\uff08\u30b5\u30a4\u30c8\u3068\u30d5\u30ed\u30a2\u3054\u3068\u306b\u6574\u7406\u3055\u308c\u3066\u304a\u308a\u3001\u30d5\u30ed\u30a2\u3054\u3068\u306b\u4ee5\u4e0b\u3092\u542b\u3080:\n    * `floor_image.png`\n    * `floor_info.json`\n    * `geojson_map.json`\n    \n<img src=\"https:\/\/i.imgur.com\/EE98923.png\" width=500>\n\n> \ud83d\udccc**Goal**: \u3053\u306e\u30b3\u30f3\u30da\u306e\u8ab2\u984c\u306f\u3001\u4e0e\u3048\u3089\u308c\u305fsite-path\u30d5\u30a1\u30a4\u30eb\u306b\u5bfe\u3057\u3066\u3001`sample_submission.csv`\u30d5\u30a1\u30a4\u30eb\u3067\u4e0e\u3048\u3089\u308c\u305f**timestamp**\u3067\u3001**predict the floor**\u3068**waypoint locations**\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\n> \u2757**Note on data quality**\u2757: \u5b66\u7fd2\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u306b\u306f\u3001\u6700\u5f8c\u306e\u6539\u884c\u6587\u5b57\u304c\u306a\u3044\u884c\u304c\u3042\u308a\u3001\u6b21\u306e\u884c\u306b\u9032\u3093\u3067\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u554f\u984c\u3092\u3069\u306e\u3088\u3046\u306b\u51e6\u7406\u3059\u308b\u304b\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u6b21\u7b2c\u3067\u3059\u3002\u3053\u306e\u554f\u984c\u306f\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u306f\u898b\u3089\u308c\u307e\u305b\u3093\u3002","f8b33764":"## WiFi \ud83d\udcf6\n\n> \ud83d\udccc**WiFi Access Points**: \u6577\u5730\u5185\u306e\u30d5\u30ed\u30a2\u306b\u306f\u3001WiFi\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u304c\u975e\u5e38\u306b\u591a\u304f\u5b58\u5728\u3057\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u30a8\u30ea\u30a2\u306b\u3088\u3063\u3066\u4fe1\u53f7\u3084\u305d\u306e\u5f37\u3055\u304c\u5927\u304d\u304f\u7570\u306a\u308a\u307e\u3059\u3002\n> \u2757**Note**: \u4e0b\u306e\u4f8b\u3067\u306f\u3001\u30eb\u30fc\u30c8\u4e0a\u306b\u3053\u306e\u3088\u3046\u306a\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u304c\u305f\u304f\u3055\u3093\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002","67045b30":"## IBeacon (Bluetooth) \ud83d\udd35\ud83e\uddb7\n\n> \ud83d\udccc**IBeacon**: \u30d3\u30fc\u30b3\u30f3\u306f\u3001\u30e2\u30d0\u30a4\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u9023\u52d5\u3057\u3066\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u30d3\u30fc\u30b3\u30f3\u304b\u3089\u4e00\u5b9a\u306e\u8ddd\u96e2\u306b\u8fd1\u3065\u3044\u305f\u3068\u304d\u306b\u30d7\u30c3\u30b7\u30e5\u901a\u77e5\u3092\u884c\u3046\u306a\u3069\u3001\u30eb\u30fc\u30eb\u306b\u57fa\u3065\u3044\u3066\u7279\u5b9a\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3084\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8d77\u3053\u3057\u307e\u3059\u3002\n\n> \u2757**Note**: \u4e0b\u306e\u4f8b\u306e\u7d4c\u8def\u306b\u306f\u591a\u304f\u306e\u30d3\u30fc\u30b3\u30f3\u304c\u8a2d\u7f6e\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001iBeacon\u304c\u5168\u304f\u8a2d\u7f6e\u3055\u308c\u3066\u3044\u306a\u3044\u90e8\u5206\u3082\u591a\u304f\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u90e8\u5206\u306e\u7cbe\u5ea6\u306f\u4f4e\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\n#### \ud83d\udcd0dBm (decibel milliwatts) - \u7d76\u5bfe\u7684\u306a\u30d1\u30ef\u30fc\u306e\u6307\u6a19\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u3001\u6570\u5024\u304c0\u306b\u8fd1\u3044\u307b\u3069\u3001\u4fe1\u53f7\u5f37\u5ea6\u304c\u512a\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u610f\u5473\u3059\u308b\ud83d\udcd0","17d7c12a":"### Training","7a648744":"## I. Light GBM\n- \u6c7a\u5b9a\u6728\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u57fa\u3065\u3044\u305f\u52fe\u914d\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\uff08Gradient Boosting\uff09\u306e\u6a5f\u68b0\u5b66\u7fd2\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n- \u53c2\u8003\uff1ahttps:\/\/www.codexa.net\/lightgbm-beginner\/","81921843":"## \u3044\u304f\u3064\u306e\u30d5\u30ed\u30a2\u304c\u3042\u308b? \ud83d\udee9\n\n> \u2757**Note**: \u3053\u306e\u5909\u6570\u306f\u3001\u4e88\u6e2c\u304c\u5fc5\u8981\u306a\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u306e1\u3064\u3067\u3042\u308b\u305f\u3081\u3001\u975e\u5e38\u306b\u91cd\u8981\u3067\u3059\u3002","1df44ed6":"## \u78c1\u529b\u306e\u5f37\u3055 \ud83e\uddf2\n\n> \ud83d\udccc**Magnetic Strength**: \u5efa\u7269\u5185\u306e\u3069\u306e\u5730\u70b9\u3082\u3001**\u56fa\u6709\u306e\u78c1\u529b**\u3092\u53d7\u3051\u3066\u3044\u307e\u3059\u3002\u5e8a\u3084\u58c1\u3001\u3042\u308b\u3044\u306f\u90e8\u5c4b\u306e\u5468\u56f2\u306b\u3042\u308b\u7269\u4f53\u306f\u30013\u6b21\u5143\u7a7a\u9593\u3068**\u78c1\u6c17\u306e\u5927\u304d\u3055**\u306e4\u6b21\u5143\u5730\u56f3\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u3053\u306e\u7a7a\u9593\u5185\u306e\u4efb\u610f\u306e\u70b9\u306b\u304a\u3051\u308b\u78c1\u6c17\u306e\u5927\u304d\u3055\u306f\u3001\u305d\u306e\u70b9\u306b\u304a\u3051\u308bx\u3001y\u3001z\u306e\u78c1\u6c17\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u53d6\u308b\u3053\u3068\u3067\u6e2c\u5b9a\u3067\u304d\u308b\u3002\n\n> \u2757**Note**: \u643a\u5e2f\u96fb\u8a71\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u79fb\u52d5\u3059\u308b\u3068\uff08\u643a\u5e2f\u96fb\u8a71\u304c\u56de\u8ee2\u3059\u308b\u3068\uff09\u3001\u78c1\u754c\u306e\u5909\u52d5\u3092\u691c\u51fa\u3057\u307e\u3059\u3002\u4e0b\u306e\u4f8b\u3067\u306f\u3001waypoint\u306e\u6700\u521d\u306e\u65b9\u3067\u306f\u78c1\u5834\u304c\u5f37\u304f\u3001\u5e8a\u306e\u5de6\u5074\u3067\u306f\u78c1\u5834\u304c\u5f31\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n#### \ud83d\udcd0mu tesla (1\u00d7104 G) - \u78c1\u6c17\u8a98\u5c0e\u306e\u6d3e\u751f\u5358\u4f4d\ud83d\udcd0","b818b3cb":"\u3088\u3057\u3001\u4eca\u304b\u3089\u697d\u3057\u3082\u3046\uff01\n\n## Sites\ud83c\udfe2\n\n> **site**\u306f\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u3066\u304a\u308a\u3001\u30c7\u30fc\u30bf\u304c\u62bd\u51fa\u3055\u308c\u305f**\u5efa\u7269**\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002","3b88f459":"> W&B\u306e\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u3067\u306f\u3053\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u307e\u3059:\n<img src=\"https:\/\/i.imgur.com\/IpxLc7t.png\" width=700>\n\n## Waypoint\n\n> \u2757**Note**: \u3053\u306e\u5909\u6570\u306f\u975e\u5e38\u306b\u91cd\u8981\u3067\u3001\u6211\u3005\u304c\u4e88\u6e2c\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3082\u3046\u4e00\u3064\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u3067\u3059\u3002\n\n> \ud83d\udccc**Waypoint**: \u4e0b\u306e\u56f3\u306f\u30011\u4eba\u306e\u4eba\u9593\u304c1\u3064\u306e\u30b5\u30a4\u30c8\u306e5\u968e\u3092\u901a\u904e\u3059\u308b\u969b\u306e*\u7d4c\u8def*\u3001\u3064\u307e\u308a\u8ecc\u8de1\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u304b\u306a\u308a\u6b69\u3044\u3066\u5f80\u5fa9\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u306e\u8ecc\u8de1\u306e**\u958b\u59cb\u70b9**\u3068**\u7d42\u4e86\u70b9**\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","040b0f21":"# 3. Understanding the Competition Metric\n\n> \ud83d\udccc**Note**: \u591a\u304f\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306f\u3001\u540c\u3058 `comp_metric` \u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066 *Evaluation metric* \u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u304c\uff08\u4ee5\u4e0b\u306e\u3088\u3046\u306b\uff09\u3001\u3053\u306e\u5909\u6570\u3068\u305d\u306e\u610f\u5473\u3092\u7406\u89e3\u3059\u308b\u306e\u306b\u5c11\u3057\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3057\u305f\u3002\u305d\u306e\u305f\u3081\u3001\uff08\u79c1\u306e\u3088\u3046\u306b\uff09\u30b3\u30f3\u30da\u306e\u8aac\u660e\u66f8\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u60c5\u5831\u3092\u65e9\u3005\u306b\u8aad\u307f\u98db\u3070\u3057\u3066\u3057\u307e\u3063\u305f\u4eba\u306e\u305f\u3081\u306b\u3001\u5c11\u3057\u3060\u3051\u60c5\u5831\u3092\u5171\u6709\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n`def comp_metric(xhat, yhat, fhat, x, y, f):\n    intermediate = np.sqrt(np.power(xhat-x, 2) + np.power(yhat-y, 2)) + 15 * np.abs(fhat-f)\n    return intermediate.sum()\/xhat.shape[0]`\n    \n### \u8aac\u660e\n\n\u4e0a\u8a18\u306e\u5f0f\u306f\u3001\u4ee5\u4e0b\u306e\u6570\u5b66\u95a2\u6570\u306ePython\u7248\u306b\u904e\u304e\u307e\u305b\u3093\uff08\u7af6\u6280\u4f1a\u3067\u63d0\u4f9b\u3055\u308c\u305f\u3082\u306e\u3067\u3059\uff09:\n<img src=\"https:\/\/i.imgur.com\/1Z0s7Cc.png\" width=500>","ca4d66a0":"<img src=\"https:\/\/i.imgur.com\/oiG2jZl.png\">\n<center><h1>\ud83e\uddedIndoor Location and Navigation\ud83e\udded<\/h1><\/center>\n\n# 1. Introduction\n> \ud83d\udccc**Goal**: \u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30bb\u30f3\u30b5\u30fc\u306b\u3088\u308b\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\ud83d\udcf1\u306e\u5ba4\u5185\u4f4d\u7f6e\u306e\u4e88\u6e2c\ud83c\udfaf.\n\n> \u307e\u305f\u3001\u4eca\u56de\u306e\u30b3\u30f3\u30da\u3067\u5229\u7528\u3067\u304d\u308b**GitHub Repository**\u3092\u4f7f\u3063\u3066\u3001\u30ab\u30b9\u30bf\u30e0\u95a2\u6570\u3092**\u30ce\u30fc\u30c8\u306b\u30b3\u30d4\u30fc\u30da\u30fc\u30b9\u30c8\u305b\u305a\u306b**\u547c\u3073\u51fa\u3059\u65b9\u6cd5\u3082\u5b66\u3073\u307e\u3059\u3002\n\n### Libraries\ud83d\udcda","2e4e6712":"### Submission","5a64cf31":"# \u30e2\u30c7\u30eb\u306e\u7d44\u307f\u5408\u308f\u305b","c63714ac":"# 4. Baseline Model\n\n> \ud83d\udccc**Note**: \u524d\u51e6\u7406\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306f[Devin Anzelmo](https:\/\/www.kaggle.com\/devinanzelmo)\u306b\u3088\u308b[this dataset](https:\/\/www.kaggle.com\/devinanzelmo\/indoor-navigation-and-location-wifi-features)\u304b\u3089\u306e\u3082\u306e\u3067\u3059\u3002","c691f479":"> \u2757**Attention**: *5\u756a\u76ee*\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u306f\u3001\u5927\u304d\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\uff08\u5e73\u57474\u500b\u304b\u308918\u500b\u306b\u5897\u3048\u307e\u3057\u305f\uff09\u3002\u3053\u306e\u30b1\u30fc\u30b9\u306f\u3001\u30e2\u30c7\u30eb\u304c\u30a2\u30f3\u30c0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3057\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b\u306e\u3067\u3001\u8003\u616e\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u300210\u756a\u76ee\u300113\u756a\u76ee\u300121\u756a\u76ee\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3082\u540c\u69d8\u306b\u5927\u304d\u306aMPE\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n### Submission LGBM","2d62cfb7":"### Training","3de39dd8":"### W&B\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n* \u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u4f5c\u6210 https:\/\/wandb.ai (it's free)\n* menu -> Add-ons -> Secrets -> Add a new Secret -> label=wandb-key value=wandb API key\n* Install `wandb`\n* \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u300c\u30d1\u30fc\u30bd\u30ca\u30eb\u30fb\u30ad\u30fc\u300d\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 ( \u79c1\u306e\u5834\u5408\u306f\u6a5f\u5bc6\u306a\u306e\u3067\u3001\u79d8\u5bc6\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002 :) )","d2c47c32":"> Schema of the \"Training loop\":\n<img src=\"https:\/\/i.imgur.com\/UQmdRcz.png\" width=750>\n\n#### Code Below","885856d3":"# 5. Save W&B Submissions and Logs\n\n> We can save the predictions and logs to W&B."}}