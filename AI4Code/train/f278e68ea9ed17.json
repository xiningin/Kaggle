{"cell_type":{"ac2d0423":"code","e7d5c026":"code","4e586e69":"code","492e05cb":"code","97521562":"code","de20c08e":"code","c3dd83d8":"code","ceee1506":"code","3f9b6eb7":"code","7f7c56d6":"code","5842d24f":"code","ccf62464":"code","15dc89ad":"markdown","385119f0":"markdown","b05eb036":"markdown","dc3f8c89":"markdown","8a61a5ec":"markdown","da28e5c4":"markdown","f0245895":"markdown","70bdfaa5":"markdown","c3a648b3":"markdown"},"source":{"ac2d0423":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom random import randrange\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","e7d5c026":"diabetes_df = pd.read_csv(\"..\/input\/diabetes.csv\")\ndiabetes_df.head()","4e586e69":"print(\"How many null values in the dataset?:\",diabetes_df.isnull().any().sum())","492e05cb":"#Just take the values, ignoring the labels and index\ndiabetes_df = diabetes_df.values\ndiabetes_df","97521562":"X = diabetes_df[:,0:8] #Predictors\ny = diabetes_df[:,8] #Target\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3)\n\nlogistic_model = LogisticRegression(fit_intercept=True,C=1e15)\nlogistic_model.fit(X_train,y_train)\npredicted = logistic_model.predict(X_test)\n\nprint(\"Confusion Matrix\")\nmatrix = confusion_matrix(y_test,predicted)\nprint(matrix)\n\nprint(\"\\nClassification Report\")\nreport = classification_report(y_test,predicted)\nprint(report)\n\nlr_accuracy = accuracy_score(y_test, predicted)\nprint('Logistic Regression Accuracy of Scikit Model: {:.2f}%'.format(lr_accuracy*100))","de20c08e":"#find the mininum and maximum value of each column\ndef dataset_minmax(dataset):\n    minmax = list()\n    \n    for i in range(len(dataset[0])):\n        col_values = [row[i] for row in dataset]\n        \n        value_min = min(col_values)\n        value_max = max(col_values)\n\n        minmax.append([value_min, value_max])\n    \n    return minmax\n\n#rescale the value of each column to be within 0 and 1\ndef normalize_dataset(dataset, minmax):\n    for row in dataset:\n        for i in range(len(row)):\n            row[i]= (row[i]-minmax[i][0]) \/ (minmax[i][1]-minmax[i][0])","c3dd83d8":"#Predicts an output value for a row given a set of coefficients.\n\ndef predict(row, coefficients):\n    z = coefficients[0]\n    for i in range(len(row)-1):\n        z += coefficients[i + 1] * row[i]\n    return 1.0 \/ (1.0 + np.exp(-z))","ceee1506":"# Estimate logistic regression coefficients using stochastic gradient descent\n\ndef get_coefficients(train, l_rate, n_steps):\n    coef = [0.0 for i in range(len(train[0]))]\n    \n    for step in range(n_steps): #steps times\n        sum_error = 0\n\n        for row in train: #all rows\n        \n            z = predict(row, coef)\n            \n            error = row[-1] - z #z - row[-1]\n            \n            coef[0] = coef[0] + l_rate * error * z * (1.0 - z) #b0\n            \n            for i in range(len(row)-1): #each coefficient (b1,b2,b3....)\n                coef[i+1] = coef[i+1]+l_rate*error*z*(1.0-z)*row[i]\n                \n    return coef","3f9b6eb7":"def evaluate_model(test,coef):\n    \n    predictions = []\n    for r in test:\n        z = round(predict(r,coef))    \n        predictions.append(z)\n        \n    return(predictions)","7f7c56d6":"def logistic_regression(train,test,l_rate,n_steps):    \n    \n    #get the coefficients from the training set\n    coef = get_coefficients(train,l_rate,n_steps)\n    \n    #use these to validate against the test set\n    predictions = evaluate_model(test,coef)\n    \n    return(predictions)","5842d24f":"# Calculate accuracy percentage\ndef accuracy_metric(actual, predicted):\n    correct = 0\n    for i in range(len(actual)):\n        if actual[i] == predicted[i]:\n            correct += 1\n    return correct \/ float(len(actual))","ccf62464":"minmax =dataset_minmax(diabetes_df)\nnormalize_dataset(diabetes_df, minmax)\n\nl_rate = 0.3\nn_steps = 100\nn_folds = 3\n\ntrain_set, test_set = train_test_split(diabetes_df, test_size=0.3)\n\nactual = test_set[:,8]\ntest_set = test_set[:,0:8]\n\npredicted = logistic_regression(train_set, test_set,l_rate,n_steps)\n\nprint(\"Confusion Matrix\")\nmatrix = confusion_matrix(actual,predicted)\nprint(matrix)\n\nprint(\"\\nClassification Report\")\nreport = classification_report(actual,predicted)\nprint(report)\n\nscores = accuracy_metric(actual, predicted)\nprint('Logistic Regression Accuracy Of Our Model: {:.2f}%'.format(scores*100))\n","15dc89ad":"**This a clean dataset without any missing values. Hence without doing any preprocessing, we can build our Logistic Regression Model**","385119f0":"**Logistic Regression from Scratch**","b05eb036":"**Setting up the data**","dc3f8c89":"**Making Predictions**","8a61a5ec":"Calculate the accuracy of our model","da28e5c4":"**Sklearn Logistic Regression**","f0245895":"**Our Own Logistic Model**","70bdfaa5":"**Logistic Regression - **\n\n**Input values (X) are combined linearly using weights or coefficient values to predict an output value (y).\n**\n\n**The output value being modeled is a binary value (0 or 1) rather than a numeric value.**\n\n**Linear Regression Equation:**\n\ny = \u03b20 + \u03b21X1 + \u03b22X2 \u2026. + \u03b2nXn\n\nWhere, \n\n**y** *stands for the dependent variable that needs to be predicted.*\n\n**\u03b20** *is the Y-intercept, which is basically the point on the line which touches the y-axis.*\n\n**\u03b21** *is the slope of the line (the slope can be negative or positive depending on the relationship between the dependent variable and the independent variable.)*\n\n**X** *here represents the independent variable that is used to predict our resultant dependent value.*\n\n**Sigmoid function:**\n\nz =1 \/ 1 + e-y\n\n**Apply sigmoid function on the linear regression equation.**\n\n**Logistic Regression equation:  **\n\nz = 1 \/ 1 + e-(\u03b20 + \u03b21X1 + \u03b22X2 \u2026. + \u03b2nXn)\n\n\u03b20 = \u03b20 + learning_rate (y - z)  z  (1 - z)\n\n\u03b2i = \u03b2i + learning_rate (y - z)  z  (1 - z)  X","c3a648b3":"**Estimating the coefficients \/ weights**\n\n**Learning Rate(l_rate): *The amount each coefficient is corrected each time it is updated.*\n**\n\n**n_steps: *The number of times to run through the training data while updating the coefficients.***"}}