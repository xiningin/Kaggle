{"cell_type":{"4a406006":"code","404f8a1f":"code","0a81a8b9":"code","dd1cacc6":"code","48925afa":"code","f378cf42":"code","e393bbed":"code","0cd5558a":"code","ef81cc11":"code","5d9cacd6":"code","b76fabc3":"code","c000500c":"markdown","743ee209":"markdown","e1db03c1":"markdown","b43539f6":"markdown","a3aab4c7":"markdown","6afb4d1c":"markdown","d575db73":"markdown","79b9c842":"markdown"},"source":{"4a406006":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","404f8a1f":"dt = ['2020-1-'+str(i) for i in range(1,32)] +\\\n        ['2020-2-'+str(i) for i in range(1,29)] +\\\n        ['2020-3-'+str(i) for i in range(1,32)] +\\\n        ['2020-4-'+str(i) for i in range(1,31)] +\\\n        ['2020-5-'+str(i) for i in range(1,32)] +\\\n        ['2020-6-'+str(i) for i in range(1,31)] +\\\n        ['2020-7-'+str(i) for i in range(1,32)] +\\\n        ['2020-8-'+str(i) for i in range(1,32)] +\\\n        ['2020-9-'+str(i) for i in range(1,31)] +\\\n        ['2020-10-'+str(i) for i in range(1,32)] +\\\n        ['2020-11-'+str(i) for i in range(1,31)] +\\\n        ['2020-12-'+str(i) for i in range(1,32)]\n\ndt = pd.to_datetime(dt)\ndt","0a81a8b9":"value = [sum([np.sin(j*i) for j in [0.02, 0.1 ,0.3]])\n             for i in range(31+28+31+30+31+30+31+31+30+31+30+31)]","dd1cacc6":"df = pd.DataFrame({'value':value, 'value_noise': value*np.random.rand(len(value))*2})\ndf","48925afa":"plt.figure(figsize=(25,10))\nplt.xticks(fontsize=24)\nplt.yticks(fontsize=24)\nplt.plot(df['value'])","f378cf42":"plt.figure(figsize=(25,10))\nplt.xticks(fontsize=24)\nplt.yticks(fontsize=24)\nplt.plot(df['value_noise'])","e393bbed":"def fourier_transform(df, features, clean_rate=0.95, plot=False, plot_only_data=False, keep_high_frequency=True):\n    \n    df = df.copy()\n    \n    if not isinstance(features,(list,pd.core.series.Series,np.ndarray)):\n        features = [features]\n    \n    for feature in features:\n        fft = np.fft.fft(df[feature])\n        psd = fft * np.conj(fft)\n\n        threshold = np.percentile(psd, clean_rate*100).real\n\n        if keep_high_frequency:\n            psd_filter = psd > threshold\n        else:\n            psd_filter = psd < threshold\n\n        fft_clean = psd_filter * fft\n\n        clean_data = np.fft.ifft(fft_clean)\n\n        if plot:\n            plt.figure(figsize=(25,10))\n            plt.plot(df[feature])\n            plt.xticks(fontsize=24)\n            plt.yticks(fontsize=24)\n            plt.title(f'Realdata of {feature}', fontsize=25)\n            plt.show()\n            \n            if not plot_only_data:\n                plt.figure(figsize=(25,10))\n                plt.plot(np.abs(fft))\n                plt.xticks(fontsize=24)\n                plt.yticks(fontsize=24)\n                plt.title(f'Fourier transformed of {feature}', fontsize=25)\n                plt.show()\n\n                plt.figure(figsize=(25,10))\n                plt.plot(np.abs(fft_clean))\n                plt.xticks(fontsize=24)\n                plt.yticks(fontsize=24)\n                plt.title(f'Fourier transformed cleaned of {feature}', fontsize=25)\n                plt.show()\n\n            plt.figure(figsize=(25,10))\n            plt.plot(clean_data.real)\n            plt.xticks(fontsize=24)\n            plt.yticks(fontsize=24)\n            plt.title(f'Inverse fourier transformed cleaned of {feature}', fontsize=25)\n            plt.show()\n\n        df[f'{feature}_fft_cleaned'] = clean_data.real\n    \n    return df","0cd5558a":"df_denoised = fourier_transform(df, 'value_noise', clean_rate=0.98, plot=True)","ef81cc11":"df_denoised","5d9cacd6":"df_denoised.corr()","b76fabc3":"plt.figure(figsize=(25,10))\nplt.xticks(fontsize=24)\nplt.yticks(fontsize=24)\nplt.plot(df_denoised['value'])\nplt.plot(df_denoised['value_noise'])\nplt.title('Before Denoise', fontsize=40)\nplt.legend(['value', 'value_noise'], fontsize=24)\nplt.show()\n\nplt.figure(figsize=(25,10))\nplt.xticks(fontsize=24)\nplt.yticks(fontsize=24)\nplt.plot(df_denoised['value'])\nplt.plot(df_denoised['value_noise_fft_cleaned'])\nplt.title('After Denoised', fontsize=40)\nplt.legend(['value', 'value_noise_fft_cleaned'], fontsize=24)\nplt.show()\n\n","c000500c":"# Fourier Transform","743ee209":"# Add some noise","e1db03c1":"# Apply Function","b43539f6":"https:\/\/www.kaggle.com\/pollakrit\/fourier-transform","a3aab4c7":"# Generate Data","6afb4d1c":"# Evaluation","d575db73":"# Kaggle Link","79b9c842":"# Library"}}