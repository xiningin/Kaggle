{"cell_type":{"c4a8e8b8":"code","3e545e4c":"code","40e5c5c6":"code","ddc32945":"code","7429fb8f":"code","eaaaf62a":"code","18c749ad":"code","a1834bf8":"code","eb686ac3":"code","046e85fa":"code","9893e921":"code","dc0a889a":"code","d4332fe3":"code","471b6ff9":"code","ba68a922":"markdown","028f6b31":"markdown"},"source":{"c4a8e8b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3e545e4c":"df = pd.read_csv('..\/input\/diamonds.csv')","40e5c5c6":"#mostra o come\u00e7o do DataFrame\ndf.head()","ddc32945":"#mostra o fim do DataFrame\ndf.tail()","7429fb8f":"#Resume estat\u00edsticas do DataFrame\ndf.describe()","eaaaf62a":"#Gerando uma nova coluna com o uso da fun\u00e7\u00e3o apply\ndf[\"x*y*z\"] = df.apply(lambda row: row[\"x\"] * row[\"y\"] * row[\"z\"], axis=1)\ndf.head()","18c749ad":"#Filtrando o DataFrame usando uma condi\u00e7\u00e3o\ndf[df[\"cut\"] > \"Ideal\"].describe()\n# df[\"cut\"].value_counts()","a1834bf8":"#Selecionando colunas do DF\nX = df[[\"carat\",\"cut\", \"color\", \"depth\", \"x*y*z\", \"table\"]]\nX.head()","eb686ac3":"y = df[[\"price\"]]\ny.head()","046e85fa":"X = pd.get_dummies(data=X)\nX.head()","9893e921":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\nmodel = LinearRegression().fit(X_train, y_train)","dc0a889a":"#(1 - u\/v), where u is the residual sum of squares ((y_true - y_pred) ** 2).sum() and v is the total sum of squares ((y_true - y_true.mean()) ** 2).sum().\nmodel.score(X_test, y_test)","d4332fe3":"model.predict([[1.8, 0.60, 34.0, 50.0, 0, 0, 0, 1, 0, 1,0,0,0,0,0,0]])","471b6ff9":"model.coef_","ba68a922":"**INTRODU\u00c7\u00c3O  AO PANDAS**","028f6b31":"#Converte valores categ\u00f3ricos em indicadores bin\u00e1rios\nX = pd.get_dummies(data=X)\nX.head()"}}