{"cell_type":{"74b467ab":"code","baf022df":"code","09a7af6a":"code","d4537fe1":"code","f9803635":"code","8f9c0ef5":"code","448125b1":"code","b1de40b9":"code","5b12dad9":"code","3afcc7d2":"markdown","7efcd8c6":"markdown","62049e03":"markdown","5dfb3e87":"markdown","0f98ce1d":"markdown","8fc73862":"markdown"},"source":{"74b467ab":"%matplotlib inline\nimport os\nimport gc\nimport re\nimport sqlite3\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport numpy as np\nimport pandas as pd\nimport scipy\nimport random\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.decomposition import TruncatedSVD #can efficiently work with sparce matrices\nfrom sklearn.decomposition import PCA #can only work with arrays\n\nfrom nltk.corpus import stopwords\nfrom nltk.stem import SnowballStemmer","baf022df":"clean_data = pd.read_csv(\"..\/input\/clean-amazon-fine-food-review\/clean_AmazonFFR.csv\")","09a7af6a":"clean_data.dropna(axis=0, how='any',inplace=True)\nclean_data.reset_index(drop=True,inplace=True)\nclean_data['review_type'].value_counts(normalize = True)","d4537fe1":"positive = clean_data[clean_data['review_type'] =='positive'][:20000:10].reset_index(drop=True)\nnegative = clean_data[clean_data['review_type'] =='negative'][:20000:10].reset_index(drop=True)\n\nsample_data = pd.concat([positive, negative], axis=0)\nprint(f\"{positive.shape} : {negative.shape} {sample_data.shape}\")\ngc.collect()","f9803635":"def plotReview(features, classes, transformer, title):\n    \n    transformed_x = transformer.fit_transform(features)\n    classes = np.array(classes)\n    if classes.ndim == 1:\n        classes = classes.reshape(-1, 1)\n    \n    data = np.hstack([transformed_x, classes])\n    data = pd.DataFrame(data, columns = ['dim1', 'dim2', 'review_type'])\n    sns.FacetGrid(data, hue='review_type', size=4).map(plt.scatter, 'dim1', 'dim2').add_legend()\n    plt.title(title)\n    plt.show()","8f9c0ef5":"transformers = {\n    'pca':PCA(n_components=2),\n    'sparse_pca':TruncatedSVD(n_components=2, random_state=123)\n}","448125b1":"count_vec = CountVectorizer(ngram_range=(1,1))\nbow = count_vec.fit_transform(sample_data['Text'].values)\nf\"{type(bow)}, unique words:{bow.shape[1]}\"","b1de40b9":"plotReview(bow.toarray(), sample_data['review_type'],transformers['pca'], 'PCA - BOW')\nplotReview(bow, sample_data['review_type'],transformers['sparse_pca'], 'Sparse_PCA - BOW')","5b12dad9":"tfidf_vec = TfidfVectorizer()\ntfidf_features = tfidf_vec.fit_transform(sample_data['Text'].values)\n\nplotReview(tfidf_features.toarray(), sample_data['review_type'],transformers['pca'], 'PCA - TF_IDF')\nplotReview(tfidf_features, sample_data['review_type'],transformers['sparse_pca'], 'Sparse_PCA - TF_IDF')","3afcc7d2":"# Quick Note\n\n**look into the previous versions for creation of clean-amazon-fine-food-review data**","7efcd8c6":"# TO-DO\n1. Applying different text->vector techniques like Avg. word2vec , Weighted Tfidf-Word2vec\n2. Use TSNE for Dimentionality reduction","62049e03":"positive classes form 84% of the data","5dfb3e87":"# Bag of Words","0f98ce1d":"# Visualization of Reviews","8fc73862":"# TF-IDF"}}