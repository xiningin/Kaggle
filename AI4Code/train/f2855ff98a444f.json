{"cell_type":{"e90c51c4":"code","153e9b62":"code","82ccd146":"code","f02fbed3":"code","f3f5fda9":"code","e5fa0a40":"code","8ddfd1b9":"code","4fc57a2c":"code","b539e190":"code","25e82c53":"code","f1695648":"markdown","5c9360bb":"markdown","d9c57737":"markdown","a4c74c4e":"markdown","37207fba":"markdown","e64b8b0c":"markdown","064f3fc3":"markdown","ce9e1502":"markdown","1491cc2a":"markdown","3c3252ce":"markdown","99c6eda3":"markdown","e97c51b1":"markdown"},"source":{"e90c51c4":"import os\nimport gc\ngc.enable()\nimport math\nimport json\nimport time\nimport random\nimport multiprocessing\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm, trange\nfrom sklearn import model_selection\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.nn import Parameter\nimport torch.optim as optim\nfrom torch.utils.data import (\n    Dataset, DataLoader,\n    SequentialSampler, RandomSampler\n)\nfrom torch.utils.data.distributed import DistributedSampler\n\ntry:\n    from apex import amp\n    APEX_INSTALLED = True\nexcept ImportError:\n    APEX_INSTALLED = False\n\nimport transformers\nfrom transformers import (\n    WEIGHTS_NAME,\n    AdamW,\n    AutoConfig,\n    AutoModel,\n    AutoTokenizer,\n    get_cosine_schedule_with_warmup,\n    get_linear_schedule_with_warmup,\n    logging,\n    MODEL_FOR_QUESTION_ANSWERING_MAPPING,\n)\nlogging.set_verbosity_warning()\nlogging.set_verbosity_error()\n\ndef fix_all_seeds(seed):\n    np.random.seed(seed)\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n\ndef optimal_num_of_loader_workers():\n    num_cpus = multiprocessing.cpu_count()\n    num_gpus = torch.cuda.device_count()\n    optimal_value = min(num_cpus, num_gpus*4) if num_gpus else num_cpus - 1\n    return optimal_value\n\nprint(f\"Apex AMP Installed :: {APEX_INSTALLED}\")\nMODEL_CONFIG_CLASSES = list(MODEL_FOR_QUESTION_ANSWERING_MAPPING.keys())\nMODEL_TYPES = tuple(conf.model_type for conf in MODEL_CONFIG_CLASSES)","153e9b62":"class Config:\n    # model\n    model_type = 'xlm_roberta'\n    model_name_or_path = \"..\/input\/xlm-roberta-squad2\/deepset\/xlm-roberta-large-squad2\/\"\n    config_name = \"..\/input\/xlm-roberta-squad2\/deepset\/xlm-roberta-large-squad2\/\"\n    fp16 = True if APEX_INSTALLED else False\n    fp16_opt_level = \"O1\"\n    gradient_accumulation_steps = 2\n    layer_start=12\n\n    # tokenizer\n    tokenizer_name = \"..\/input\/xlm-roberta-squad2\/deepset\/xlm-roberta-large-squad2\/\"\n    max_seq_length = 384\n    doc_stride = 128\n\n    # train\n    epochs = 1\n    train_batch_size = 4\n    eval_batch_size = 8\n\n    # optimizer\n    optimizer_type = 'AdamW'\n    learning_rate = 1.5e-5\n    weight_decay = 1e-2\n    epsilon = 1e-8\n    max_grad_norm = 1.0\n\n    # scheduler\n    decay_name = 'linear-warmup'\n    warmup_ratio = 0.1\n\n    # logging\n    logging_steps = 10\n\n    # evaluate\n    output_dir = 'output'\n    seed = 2021","82ccd146":"class DatasetRetriever(Dataset):\n    def __init__(self, features, mode='train'):\n        super(DatasetRetriever, self).__init__()\n        self.features = features\n        self.mode = mode\n        \n    def __len__(self):\n        return len(self.features)\n    \n    def __getitem__(self, item):   \n        feature = self.features[item]\n        if self.mode == 'train':\n            return {\n                'input_ids':torch.tensor(feature['input_ids'], dtype=torch.long),\n                'attention_mask':torch.tensor(feature['attention_mask'], dtype=torch.long),\n                'offset_mapping':torch.tensor(feature['offset_mapping'], dtype=torch.long),\n                'start_position':torch.tensor(feature['start_position'], dtype=torch.long),\n                'end_position':torch.tensor(feature['end_position'], dtype=torch.long)\n            }\n        else:\n            return {\n                'input_ids':torch.tensor(feature['input_ids'], dtype=torch.long),\n                'attention_mask':torch.tensor(feature['attention_mask'], dtype=torch.long),\n                'offset_mapping':feature['offset_mapping'],\n                'sequence_ids':feature['sequence_ids'],\n                'id':feature['example_id'],\n                'context': feature['context'],\n                'question': feature['question']\n            }","f02fbed3":"class WeightedLayerPooling(nn.Module):\n    def __init__(self, num_hidden_layers, layer_start: int = 4, layer_weights=None):\n        super(WeightedLayerPooling, self).__init__()\n        self.layer_start = layer_start\n        self.num_hidden_layers = num_hidden_layers\n        self.layer_weights = layer_weights if layer_weights is not None \\\n            else nn.Parameter(\n            torch.tensor([1] * (num_hidden_layers + 1 - layer_start), dtype=torch.float)\n        )\n\n    def forward(self, all_hidden_states):\n        all_layer_embedding = all_hidden_states[self.layer_start:, :, :, :]\n        weight_factor = self.layer_weights.unsqueeze(-1).unsqueeze(-1).unsqueeze(-1).expand(all_layer_embedding.size())\n        weighted_average = (weight_factor * all_layer_embedding).sum(dim=0) \/ self.layer_weights.sum()\n        return weighted_average\n\n\nclass Model(nn.Module):\n    def __init__(self, modelname_or_path, config, layer_start, layer_weights=None):\n        super(Model, self).__init__()\n        self.config = config\n        config.update({\n            \"hidden_dropout_prob\": 0.0,\n            \"layer_norm_eps\": 1e-7,\n            \"output_hidden_states\": True\n            \n        })\n        self.xlm_roberta = AutoModel.from_pretrained(modelname_or_path, config=config)\n        self.layer_start = layer_start\n        self.pooling = WeightedLayerPooling(config.num_hidden_layers,\n                                            layer_start=layer_start,\n                                            layer_weights=None)\n        self.layer_norm = nn.LayerNorm(config.hidden_size)\n        self.dropout = torch.nn.Dropout(0.3)\n        self.qa_output = torch.nn.Linear(config.hidden_size, 2)\n        torch.nn.init.normal_(self.qa_output.weight, std=0.02)\n\n    def forward(self, input_ids, attention_mask=None):\n        outputs = self.xlm_roberta(input_ids, attention_mask=attention_mask)\n        all_hidden_states = torch.stack(outputs.hidden_states)\n        weighted_pooling_embeddings = self.layer_norm(self.pooling(all_hidden_states))\n        #weighted_pooling_embeddings = weighted_pooling_embeddings[:, 0]\n\n        norm_embeddings = self.dropout(weighted_pooling_embeddings)\n        logits = self.qa_output(norm_embeddings)\n        start_logits, end_logits = logits.split(1, dim=-1)\n\n        start_logits = start_logits.squeeze(-1)\n        end_logits = end_logits.squeeze(-1)\n\n        return start_logits, end_logits","f3f5fda9":"def make_model(args):\n    config = AutoConfig.from_pretrained(args.config_name)\n    tokenizer = AutoTokenizer.from_pretrained(args.tokenizer_name)\n    model = Model(args.model_name_or_path,layer_start=12, config=config)\n    return config, tokenizer, model","e5fa0a40":"def prepare_test_features(args, example, tokenizer):\n    example[\"question\"] = example[\"question\"].lstrip()\n    \n    tokenized_example = tokenizer(\n        example[\"question\"],\n        example[\"context\"],\n        truncation=\"only_second\",\n        max_length=args.max_seq_length,\n        stride=args.doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    features = []\n    for i in range(len(tokenized_example[\"input_ids\"])):\n        feature = {}\n        feature[\"example_id\"] = example['id']\n        feature['context'] = example['context']\n        feature['question'] = example['question']\n        feature['input_ids'] = tokenized_example['input_ids'][i]\n        feature['attention_mask'] = tokenized_example['attention_mask'][i]\n        feature['offset_mapping'] = tokenized_example['offset_mapping'][i]\n        feature['sequence_ids'] = [0 if i is None else i for i in tokenized_example.sequence_ids(i)]\n        features.append(feature)\n    return features","8ddfd1b9":"import collections\n\ndef postprocess_qa_predictions(examples, features, raw_predictions, n_best_size = 20, max_answer_length = 30):\n    all_start_logits, all_end_logits = raw_predictions\n    \n    example_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\n    features_per_example = collections.defaultdict(list)\n    for i, feature in enumerate(features):\n        features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)\n\n    predictions = collections.OrderedDict()\n\n    print(f\"Post-processing {len(examples)} example predictions split into {len(features)} features.\")\n\n    for example_index, example in examples.iterrows():\n        feature_indices = features_per_example[example_index]\n\n        min_null_score = None\n        valid_answers = []\n        \n        context = example[\"context\"]\n        for feature_index in feature_indices:\n            start_logits = all_start_logits[feature_index]\n            end_logits = all_end_logits[feature_index]\n\n            sequence_ids = features[feature_index][\"sequence_ids\"]\n            context_index = 1\n\n            features[feature_index][\"offset_mapping\"] = [\n                (o if sequence_ids[k] == context_index else None)\n                for k, o in enumerate(features[feature_index][\"offset_mapping\"])\n            ]\n            offset_mapping = features[feature_index][\"offset_mapping\"]\n            cls_index = features[feature_index][\"input_ids\"].index(tokenizer.cls_token_id)\n            feature_null_score = start_logits[cls_index] + end_logits[cls_index]\n            if min_null_score is None or min_null_score < feature_null_score:\n                min_null_score = feature_null_score\n\n            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            for start_index in start_indexes:\n                for end_index in end_indexes:\n                    if (\n                        start_index >= len(offset_mapping)\n                        or end_index >= len(offset_mapping)\n                        or offset_mapping[start_index] is None\n                        or offset_mapping[end_index] is None\n                    ):\n                        continue\n                    # Don't consider answers with a length that is either < 0 or > max_answer_length.\n                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n                        continue\n\n                    start_char = offset_mapping[start_index][0]\n                    end_char = offset_mapping[end_index][1]\n                    valid_answers.append(\n                        {\n                            \"score\": start_logits[start_index] + end_logits[end_index],\n                            \"text\": context[start_char: end_char]\n                        }\n                    )\n        \n        if len(valid_answers) > 0:\n            best_answer = sorted(valid_answers, key=lambda x: x[\"score\"], reverse=True)[0]\n        else:\n            best_answer = {\"text\": \"\", \"score\": 0.0}\n        \n        predictions[example[\"id\"]] = best_answer[\"text\"]\n        \n        \n    return predictions","4fc57a2c":"test = pd.read_csv('..\/input\/chaii-hindi-and-tamil-question-answering\/test.csv')\n#base_model_path = '..\/input\/chaii-xlmroberta-large-v6\/output\/'\nbase_model_path='..\/input\/5fold-xlmroberta-weightedlayerpooling\/'\n\ntokenizer = AutoTokenizer.from_pretrained(Config().tokenizer_name)\n\ntest_features = []\nfor i, row in test.iterrows():\n    test_features += prepare_test_features(Config(), row, tokenizer)\n\nargs = Config()\ntest_dataset = DatasetRetriever(test_features, mode='test')\ntest_dataloader = DataLoader(\n    test_dataset,\n    batch_size=args.eval_batch_size, \n    sampler=SequentialSampler(test_dataset),\n    num_workers=optimal_num_of_loader_workers(),\n    pin_memory=True, \n    drop_last=False\n)","b539e190":"def get_predictions(checkpoint_path):\n    config, tokenizer, model = make_model(Config())\n    model.cuda();\n    model.load_state_dict(\n        torch.load(base_model_path + checkpoint_path)\n    );\n    \n    start_logits = []\n    end_logits = []\n    for batch in test_dataloader:\n        with torch.no_grad():\n            outputs_start, outputs_end = model(batch['input_ids'].cuda(), batch['attention_mask'].cuda())\n            start_logits.append(outputs_start.cpu().numpy().tolist())\n            end_logits.append(outputs_end.cpu().numpy().tolist())\n            del outputs_start, outputs_end\n    del model, tokenizer, config\n    gc.collect()\n    return np.vstack(start_logits), np.vstack(end_logits)","25e82c53":"#start_logits1, end_logits1 = get_predictions('output\/checkpoint-fold-0-epoch-0\/pytorch_model.bin')\n#start_logits2, end_logits2 = get_predictions('output\/checkpoint-fold-1-epoch-0\/pytorch_model.bin')\n#start_logits3, end_logits3 = get_predictions('output\/checkpoint-fold-2-epoch-0\/pytorch_model.bin')\n#start_logits4, end_logits4 = get_predictions('output\/checkpoint-fold-3-epoch-0\/pytorch_model.bin')\nstart_logits5, end_logits5 = get_predictions('output\/checkpoint-fold-4-epoch-0\/pytorch_model.bin')\n\n#start_logits = (start_logits1 + start_logits2 + start_logits3 + start_logits4 + start_logits5) \/ 5\n#end_logits = (end_logits1 + end_logits2 + end_logits3 + end_logits4 + end_logits5) \/ 5\nstart_logits=start_logits5\nend_logits=end_logits5\n\npredictions = postprocess_qa_predictions(test, test_features, (start_logits, end_logits))\n\ntest['PredictionString'] = test['id'].map(predictions)\ntest[['id', 'PredictionString']].to_csv('submission.csv', index=False)\n\nprint(test[['id', 'PredictionString']])","f1695648":"### Ensemble 5-Folds","5c9360bb":"### Configuration","d9c57737":"### Covert Examples to Features (Preprocess)","a4c74c4e":"<h2>5-Fold XLMRoberta with weightedlayerpooling<\/h2>\n    \n<h3><span style=\"color:#444\">Introduction<\/span><\/h3>\n\nThe kernel is to submit my score. due to the first time to join the competition kaggle, i do not know the rules of submitting,so i write this notebook to get my score,and i upload my output into the dataset. i fine tune the 5 fold xlm-roberta with the weightedlayerpooing.\n\nmy code is [www.kaggle.com\/jianluezhang\/5fold-xlmroberta-weightedlayerpooling](http:\/\/)","37207fba":"### Import Dependencies","e64b8b0c":"### Utilities","064f3fc3":"### Data Factory","ce9e1502":"### Model","1491cc2a":"### Thenaks and please do upvote!","3c3252ce":"### Intialize Inference","99c6eda3":"### Postprocess QA Predictions","e97c51b1":"### Dataset Retriever"}}