{"cell_type":{"eb4a36a2":"code","98f6ed85":"code","eb42f221":"code","8cdf1f22":"code","0ef5b26c":"code","1ba70e10":"code","b77a84b4":"code","df23fccc":"code","827b802c":"code","df0fe9c5":"code","5546d3a3":"code","7fc43dd9":"code","3e555820":"code","24574046":"code","4a22307c":"code","610d1085":"code","ce46176c":"code","0a1d4374":"code","d98a4901":"code","7c978ee5":"code","facc8bfd":"code","aeb80833":"code","7f25ec1f":"code","10d9903d":"code","4ddcf7c2":"code","38e638c1":"code","20dbaadc":"code","52d4a4b3":"code","a4421815":"code","91f63ac9":"code","d253517d":"code","fcbed717":"code","8ba472b5":"markdown","a8912d4a":"markdown","34a0f401":"markdown","ba092de1":"markdown","a1e90104":"markdown","3e25da3f":"markdown","d0bba1eb":"markdown","4735a5dd":"markdown","393860e4":"markdown","78605777":"markdown","8d119992":"markdown","efe410b5":"markdown","b9a1ddc5":"markdown","d26b7f66":"markdown","40bb6859":"markdown","cd8f9684":"markdown","2741a2d8":"markdown","b2d27a6f":"markdown","574c3a30":"markdown","88de11c0":"markdown","5f593b40":"markdown","3a045c62":"markdown","2db33513":"markdown","ec3b2b12":"markdown","dc101491":"markdown","3cab4898":"markdown","4653abb6":"markdown","54eee291":"markdown","a9f305f2":"markdown"},"source":{"eb4a36a2":"import numpy as np # library to handle data in a vectorized manner\n\nimport pandas as pd # library for data analsysis\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n!pip install BeautifulSoup4\nfrom bs4 import BeautifulSoup\nimport requests\n\nimport json # library to handle JSON files\n\n!pip install geopy \nfrom geopy.geocoders import Nominatim # convert an address into latitude and longitude values\n\nimport requests # library to handle requests\nfrom pandas.io.json import json_normalize # tranform JSON file into a pandas dataframe\n\n# Matplotlib and associated plotting modules\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\n\n# import k-means from clustering stage\n#!pip install -U scikit-learn scipy matplotlib\nfrom sklearn.cluster import KMeans\n\n#!conda install -c conda-forge folium=0.5.0 --yes # uncomment this line if you haven't completed the Foursquare API lab\nimport folium # map rendering library\n\nprint('\\nAll libraries imported successfully..!')","98f6ed85":"df = pd.read_csv('..\/input\/wardwise-data-of-aurangabad-mh-india\/Aurangabad Ward-Wise Data.csv')\ndf.head()","eb42f221":"# get the coordinates of Aurangabad\naddress = 'Aurangabad, India'\n\ngeolocator = Nominatim(user_agent=\"my-application\")\nlocation = geolocator.geocode(address)\nlatitude = location.latitude\nlongitude = location.longitude\nprint('The geograpical coordinate of Aurangabad, India {}, {}.'.format(latitude, longitude))","8cdf1f22":"# create map of Aurangabad using latitude and longitude values\nmap_abd = folium.Map(location=[latitude, longitude], zoom_start=12)\n\n# add markers to map\nfor lat, lng, neighborhood in zip(df['Latitude'], df['Longitude'], df['Neighborhood']):\n    label = '{}'.format(neighborhood)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        color='blue',\n        fill=True,\n        fill_color='#3186cc',\n        fill_opacity=0.7).add_to(map_abd)  \n    \nmap_abd","0ef5b26c":"# define Foursquare Credentials and Version\nCLIENT_ID = 'AANKWDPSR3JCT4TJY4OF5FNGFEDA5FMD4EURTDQUZHWUYKCS' # your Foursquare ID\nCLIENT_SECRET = 'GM4FQDLRXMC4GMSG025IDFQNY1MCVUHW3ADL0CZOTDNNK4S2' # your Foursquare Secret\nVERSION = '20180605' # Foursquare API version\n\nprint('Your credentails:')\nprint('CLIENT_ID: ' + CLIENT_ID)\nprint('CLIENT_SECRET:' + CLIENT_SECRET)","1ba70e10":"radius = 5000\nLIMIT = 100\n\nvenues = []\n\nfor lat, long, neighborhood in zip(df['Latitude'], df['Longitude'], df['Neighborhood']):\n    \n    # create the API request URL\n    url = \"https:\/\/api.foursquare.com\/v2\/venues\/explore?client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}\".format(\n        CLIENT_ID,\n        CLIENT_SECRET,\n        VERSION,\n        lat,\n        long,\n        radius, \n        LIMIT)\n    \n    # make the GET request\n    results = requests.get(url).json()[\"response\"]['groups'][0]['items']\n    \n    # return only relevant information for each nearby venue\n    for venue in results:\n        venues.append((\n            neighborhood,\n            lat, \n            long, \n            venue['venue']['name'], \n            venue['venue']['location']['lat'], \n            venue['venue']['location']['lng'],  \n            venue['venue']['categories'][0]['name']))","b77a84b4":"# convert the venues list into a new DataFrame\nvenues_df = pd.DataFrame(venues)\n\n# define the column names\nvenues_df.columns = ['Neighborhood', 'Latitude', 'Longitude', 'VenueName', 'VenueLatitude', 'VenueLongitude', 'VenueCategory']\n\nprint(venues_df.shape)\nvenues_df.head()","df23fccc":"venues_df.groupby([\"Neighborhood\"]).count().head()","827b802c":"print('There are {} uniques categories.'.format(len(venues_df['VenueCategory'].unique())))","df0fe9c5":"# print out the list of categories\nvenues_df['VenueCategory'].unique()","5546d3a3":"col=[\"Category\"]\ncategory_df = pd.DataFrame(data = venues_df['VenueCategory'].unique(),columns=col)\ncategory_df.head()","7fc43dd9":"# one hot encoding\nabd_onehot = pd.get_dummies(venues_df[['VenueCategory']], prefix=\"\", prefix_sep=\"\")\n\n# add neighborhood column back to dataframe\nabd_onehot['Neighborhoods'] = venues_df['Neighborhood'] \n\n# move neighborhood column to the first column\nfixed_columns = [abd_onehot.columns[-1]] + list(abd_onehot.columns[:-1])\nabd_onehot = abd_onehot[fixed_columns]\n\nprint(abd_onehot.shape)\nabd_onehot.head()","3e555820":"abd_grouped = abd_onehot.groupby([\"Neighborhoods\"]).mean().reset_index()\n\nprint(abd_grouped.shape)\nabd_grouped.head()","24574046":"len(abd_grouped[abd_grouped[\"Restaurant\"] > 0])","4a22307c":"abd_restaurant = abd_grouped[[\"Neighborhoods\",\"Restaurant\"]]\nabd_restaurant.head()","610d1085":"# set number of clusters\nkclusters = 5\n\nabd_clustering = abd_restaurant.drop([\"Neighborhoods\"], 1)\n\n# run k-means clustering\nkmeans = KMeans(n_clusters=kclusters, random_state=0).fit(abd_clustering)\n\n# check cluster labels generated for each row in the dataframe\nkmeans.labels_[0:10] ","ce46176c":"# create a new dataframe that includes the cluster as well as the top 10 venues for each neighborhood.\nabd_merged = abd_restaurant.copy()\n\n# add clustering labels\nabd_merged[\"Cluster Labels\"] = kmeans.labels_\n\nabd_merged.rename(columns={\"Neighborhoods\": \"Neighborhood\"}, inplace=True)\nabd_merged.head()","0a1d4374":"abd_merged = abd_merged.join(df.set_index(\"Neighborhood\"), on=\"Neighborhood\")\n\nprint(abd_merged.shape)\nabd_merged.head() ","d98a4901":"print(abd_merged.shape)\nabd_merged.sort_values([\"Cluster Labels\"], inplace=True)\nabd_merged.head()","7c978ee5":"# create map\nmap_clusters = folium.Map(location=[latitude, longitude], zoom_start=11)\n\n# set color scheme for the clusters\nx = np.arange(kclusters)\nys = [i+x+(i*x)**2 for i in range(kclusters)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# add markers to the map\nmarkers_colors = []\nfor lat, lon, poi, cluster in zip(abd_merged['Latitude'], abd_merged['Longitude'], abd_merged['Neighborhood'], abd_merged['Cluster Labels']):\n    label = folium.Popup(str(poi) + ' - Cluster ' + str(cluster), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        color=rainbow[cluster-1],\n        fill=True,\n        fill_color=rainbow[cluster-1],\n        fill_opacity=0.7).add_to(map_clusters)\n       \nmap_clusters","facc8bfd":"cluster0 = abd_merged.loc[abd_merged['Cluster Labels'] == 0].copy()\nprint('Number of Neighbourhoods:',cluster0.shape[0])\ncluster0.head()","aeb80833":"cluster1 = abd_merged.loc[abd_merged['Cluster Labels'] == 1].copy()\nprint('Number of Neighbourhoods:',cluster1.shape[0])\ncluster1.head()","7f25ec1f":"cluster2 = abd_merged.loc[abd_merged['Cluster Labels'] == 2].copy()\nprint('Number of Neighbourhoods:',cluster2.shape[0])\ncluster2.head()","10d9903d":"cluster3 = abd_merged.loc[abd_merged['Cluster Labels'] == 3].copy()\nprint('Number of Neighbourhoods:',cluster3.shape[0])\ncluster3.head()","4ddcf7c2":"cluster4 = abd_merged.loc[abd_merged['Cluster Labels'] == 4].copy()\nprint('Number of Neighbourhoods:',cluster4.shape[0])\ncluster4.head()","38e638c1":"clusts = [cluster0,cluster1,cluster2,cluster3,cluster4]\nmean_res = []\ni=0\nfor c in clusts:\n    mean_res.append([i,np.round(c['Restaurant'].mean(),4)])\n    i=i+1\nmean_res\ncol = ['Cluster','Mean Result']\nres_mean_df = pd.DataFrame(data=mean_res,columns=col).set_index('Cluster')\nres_mean_df","20dbaadc":"df_result = abd_merged.loc[abd_merged['Cluster Labels'] == 4].copy().reset_index(drop=True)\ndf_result.head()","52d4a4b3":"df_result2 = df_result.sort_values(['Restaurant','Avg. Price'],ascending=[0,1])\ndf_final = df_result2","a4421815":"df_final.shape","91f63ac9":"df_final.head()","d253517d":"# create map\nmap_result = folium.Map(location=[latitude, longitude], zoom_start=12.5)\n\n# add markers to the map\nfor lat, lon, poi, ward in zip(df_final['Latitude'], df_final['Longitude'], df_final['Neighborhood'], df_final['Ward']):\n    label = folium.Popup(str(poi) +' '+ str(ward), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        #color=blue,\n        fill=True,\n        #fill_color=yellow,\n        fill_opacity=0.7).add_to(map_result)\n       \nmap_result","fcbed717":"df_final_10 = df_final.head(10)\n\n# create map\nmap_result = folium.Map(location=[latitude, longitude], zoom_start=12.5)\n\n# add markers to the map\nfor lat, lon, poi, ward in zip(df_final_10['Latitude'], df_final_10['Longitude'], df_final_10['Neighborhood'], df_final_10['Ward']):\n    label = folium.Popup(str(poi) +' '+ str(ward), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        #color=blue,\n        fill=True,\n        #fill_color=yellow,\n        fill_opacity=0.7).add_to(map_result)\n       \nmap_result","8ba472b5":"*The data required for this project was not readily available over the internet and is present in fragments. Data was collected from various sites then it was consolidated using a spreadsheet tool (Google Sheets) and data cleaning, data wrangling was performed using a python notebook.*\n \n\n*Here's **[link]** to the python notebook, repository also has all the acquired datasets*\n\n[link]: https:\/\/github.com\/ChinmayGaikwad12\/Coursera_Capstone\/blob\/master\/Capstone%20DB%20.ipynb\n**Let's load and explore the dataset of Aurangabad's Neighbourhoods**","a8912d4a":"**Sort the results by `Cluster Labels`**","34a0f401":"# Opening a New Restaurant in the Historic City of Aurangabad, India\n- Build a dataframe of neighborhoods in Aurangabad, by gathering the data from Government sites, Private real-estate sites\n- Get the geographical coordinates of the neighborhoods\n- Obtain the venue data for the neighborhoods from Foursquare API\n- Explore and cluster the neighborhoods\n- Select the best cluster to open a new restaurant","ba092de1":"`Cluster 0`","a1e90104":"`Cluster 1`","3e25da3f":"**Convert the obatained results into pandas `Dataframe`**","d0bba1eb":"`Cluster 3`","4735a5dd":"`Cluster 2`","393860e4":"**Now, let's get the top `100 venues` that are within a radius of `5 km`**","78605777":"`Cluster 4`","8d119992":"**Get Geographical co-ordinates of Aurangabad City**","efe410b5":"**Let's set `Client ID` and `Client Secret`**","b9a1ddc5":"**Let's check how many venues were returned for each `Neighorhood` (*Showing first 5 results*)**","d26b7f66":"**Let's encode the results**","40bb6859":"**Print out dataframe of the categories (*Showing first 5 results*)**","cd8f9684":"### **Let's examine the clusters**","2741a2d8":"### Let's visualize the cluster that is most suitable to open a new restaurant in the city","b2d27a6f":"**Next, let's group rows by neighborhood and by taking the mean of the frequency of occurrence of each category**","574c3a30":"**Let's create a new DataFrame for `Restaurant` data only**","88de11c0":"**Let's merge `abd_grouped` data with Aurangabad Ward-Wise data to add latitude\/longitude for each neighborhood**","5f593b40":"**Let's find out how many unique `Categories` can be curated from all the returned venues**","3a045c62":"**First, Let's import libraries for processing datasets**","2db33513":"### **Clustering Neighborhoods**\n\n**Run `k-means` to cluster the neighborhoods in `Aurangabad` into 5 clusters.**","ec3b2b12":"### Out of all places in the cluster, let's see top 10 prospect places to open a new reataurant","dc101491":"### **Conclusion:**","3cab4898":"### **Finally, let's visualize the resulting clusters on the map**","4653abb6":"# Thank You !","54eee291":"Most of the restaurants are concentrated in the central area of **Aurangabad** city, with the **highest number in `cluster 2`** , **moderate number in  `cluster 0` , `cluster 3`** and  **`cluster 4`**. On the other hand, **`cluster 1` has very low number to totally no** restaurants in the neighborhoods. \n\nThis represents a great opportunity and high potential areas to open a new Restaurant as there is  moderate competition from existing restaurants. Meanwhile, restaurants in **`cluster 2`** are likely suffering from intense competition due to oversupply and high concentration of restaurants. From another perspective, this also shows that the oversupply of restaurants mostly happened in the central area of the city, with the suburb area still have very few Restaurants. \n\nTherefore, this project recommends to capitalize on these findings to open a new restaurant in neighborhoods in **`cluster 4`** with moderate competition. New franchise with unique service propositions can stand out from the competition can also open new restaurants in neighborhoods in **`cluster 4`** with moderate competition. \n\nLastly, new comers to this industry are advised to avoid neighborhoods in **`cluster 2`** which already have high concentration of restaurants and suffering from intense competition.","a9f305f2":"**Now, Let's visualize each `Neighbourhood` on the map using `Folium`**"}}