{"cell_type":{"99cc4f22":"code","46dce284":"code","d77b632e":"code","7613d773":"code","1d3c7f20":"code","298c56b8":"code","916e4015":"code","91469c70":"code","f7006ab8":"code","9ac2b417":"code","22fe3986":"code","88ff2c32":"code","f643b931":"code","5cad3872":"code","c04db535":"code","58cad261":"code","5183ef0f":"code","7d435e2a":"code","12d75f18":"code","a76ea650":"code","646171b5":"code","f42121b0":"code","c75c2e2d":"code","b3d71060":"code","dcfcbb78":"code","03741a13":"code","5af79edb":"code","81ffe61f":"code","1284490f":"code","bbcc1ed9":"code","1049bb9c":"code","2fcd23b0":"code","a43776a0":"code","49ef4362":"code","01ed6f20":"code","4cbf7fc2":"code","e6237cbb":"code","108a7b00":"code","747f34e3":"code","747b8c31":"code","799dae34":"code","9665670f":"code","d6cd8535":"code","698ab26a":"code","198b58ff":"code","d6bb605b":"code","ae4a2f65":"code","dbea9195":"code","03832a6e":"code","d49b77e8":"code","313c5d07":"code","db880d19":"code","bfb64519":"code","3e6a162f":"code","ab6c21f4":"code","1c50a4d7":"code","6d3ecee5":"code","d9db8e5a":"code","8d864835":"code","8414b1af":"code","4c159170":"code","a4ee67ce":"code","6f73541e":"code","21812993":"code","2cb7ad92":"code","00035f8f":"code","89e3f8be":"code","c44a0b46":"code","41399d2d":"code","2ccf7848":"code","132187ab":"code","e9a0a249":"code","b49c9f3c":"markdown","b2b43d5d":"markdown","f49c7806":"markdown","6805301c":"markdown","93258d29":"markdown","75e84e06":"markdown","e7f7d479":"markdown","3d8b3125":"markdown","f465d548":"markdown","bfa1d230":"markdown","bb28eaf2":"markdown","b382180a":"markdown","2a421e9f":"markdown","62e78187":"markdown"},"source":{"99cc4f22":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.style as stl\nstl.available","46dce284":"stl.use(\"seaborn\")","d77b632e":"data = pd.read_csv(\"..\/input\/housesalesprediction\/kc_house_data.csv\")","7613d773":"data.shape","1d3c7f20":"data.info()","298c56b8":"data.head()","916e4015":"data.isna().sum()","91469c70":"data.drop([\"id\", \"date\"], axis=1, inplace=True)","f7006ab8":"n = data.shape[1]","9ac2b417":"categoricals = [\"bedrooms\",\"bathrooms\",\"floors\",\"waterfront\",\"view\"]","22fe3986":"fig, axes = plt.subplots(nrows=n, ncols=1, figsize=(20, n*12))\n\nfor i in range(n):\n    col = data.columns[i]\n    if col in categoricals:\n        sns.countplot(x=col, data=data,color=\"cornflowerblue\", ax=axes[i])\n    else:\n        sns.histplot(x=col, data=data,color=\"cornflowerblue\", ax=axes[i])\nplt.show()","88ff2c32":"data.drop([\"zipcode\",\"yr_renovated\"], axis=1, inplace=True)","f643b931":"data.shape","5cad3872":"x = data.drop(\"price\", axis=1, inplace=False)\ny = data[\"price\"]","c04db535":"from sklearn.model_selection import train_test_split","58cad261":"xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.1)","5183ef0f":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nss.fit(xtrain)\nxtrain = ss.transform(xtrain)\nxtest = ss.transform(xtest)","7d435e2a":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor","12d75f18":"linreg = LinearRegression()","a76ea650":"linreg.fit(xtrain, ytrain)","646171b5":"ypred_train = linreg.predict(xtrain)\nypred_test = linreg.predict(xtest)","f42121b0":"from sklearn.metrics import r2_score, max_error\nfrom sklearn.metrics import mean_absolute_error as mae","c75c2e2d":"print(\"Training MAE:\\n\")\nprint(mae(ytrain, ypred_train))\n\nprint(\"\\n\\nTesting MAE:\\n\")\nprint(mae(ytest, ypred_test))","b3d71060":"print(\"Training Maximum Error:\\n\")\nprint(max_error(ytrain, ypred_train))\n\nprint(\"\\n\\nTesting Maximum Error:\\n\")\nprint(max_error(ytest, ypred_test))","dcfcbb78":"print(\"Training R2_Score:\\n\")\nprint(r2_score(ytrain, ypred_train))\n\nprint(\"\\n\\nTesting R2_Score:\\n\")\nprint(r2_score(ytest, ypred_test))","03741a13":"tree = DecisionTreeRegressor()","5af79edb":"tree.fit(xtrain, ytrain)","81ffe61f":"ypred_train = tree.predict(xtrain)\nypred_test = tree.predict(xtest)","1284490f":"print(\"Training MAE:\\n\")\nprint(mae(ytrain, ypred_train))\n\nprint(\"\\n\\nTesting MAE:\\n\")\nprint(mae(ytest, ypred_test))","bbcc1ed9":"print(\"Training Maximum Error:\\n\")\nprint(max_error(ytrain, ypred_train))\nprint(\"\\n\\nTesting Maximum Error:\\n\")\nprint(max_error(ytest, ypred_test))","1049bb9c":"print(\"Training R2_Score:\\n\")\nprint(r2_score(ytrain, ypred_train))\n\nprint(\"\\n\\nTesting R2_Score:\\n\")\nprint(r2_score(ytest, ypred_test))","2fcd23b0":"mydata = pd.read_csv(\"..\/input\/predicting-pulsar-starintermediate\/pulsar_data_train.csv\")","a43776a0":"mydata.shape","49ef4362":"mydata.info()","01ed6f20":"mydata.head()","4cbf7fc2":"target = mydata[\"target_class\"]\nfeatures = mydata.drop(\"target_class\", axis=1)","e6237cbb":"plt.figure(figsize=(20,7))\nsns.countplot(x=\"target_class\", data=mydata, palette=\"cool\")\nplt.show()","108a7b00":"list(features.columns)","747f34e3":"fig, axes = plt.subplots(nrows=8, ncols=1, figsize=(20,100))\nfor i in range(len(features.columns)):\n    col = features.columns[i]\n    sns.histplot(x=mydata[col], hue=target, palette=\"cool\", kde=True, ax=axes[i])\nplt.show()","747b8c31":"missing_perc = 100 * mydata.isna().sum() \/ mydata.shape[0]\nmissing_perc","799dae34":"plt.figure(figsize=(20,7))\nplt.bar(missing_perc.index, missing_perc, color=\"mediumspringgreen\")\nplt.xticks(missing_perc.index, rotation=\"vertical\")\nplt.title(\"Percentages of missing values\", fontsize=25)\nplt.show()","9665670f":"mydata = mydata.fillna(mydata.median())","d6cd8535":"mydata.isna().sum()","698ab26a":"features = mydata.drop('target_class', axis=1)","198b58ff":"from sklearn.model_selection import train_test_split","d6bb605b":"xtrain, xtest, ytrain, ytest = train_test_split(features, target, test_size=0.1)","ae4a2f65":"print(xtrain.shape)\nprint(xtest.shape)","dbea9195":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()","03832a6e":"ss.fit(xtrain)\nxtrain_array = ss.transform(xtrain)\nxtest_array = ss.transform(xtest)","d49b77e8":"xtrain = pd.DataFrame(xtrain_array, columns = xtrain.columns)\nxtest = pd.DataFrame(xtest_array, columns=xtest.columns)","313c5d07":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier","db880d19":"logreg = LogisticRegression(solver='liblinear')\ntree = DecisionTreeClassifier()","bfb64519":"logreg.fit(xtrain, ytrain)\ntree.fit(xtrain, ytrain)","3e6a162f":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report","ab6c21f4":"logreg_ypred_train = logreg.predict(xtrain)\nlogreg_ypred_test = logreg.predict(xtest)\n\ntree_ypred_train = tree.predict(xtrain)\ntree_ypred_test = tree.predict(xtest)","1c50a4d7":"train_con_mat_logreg = confusion_matrix(ytrain, logreg_ypred_train)\ntest_con_mat_logreg = confusion_matrix(ytest, logreg_ypred_test)\n\ntrain_con_mat_tree = confusion_matrix(ytrain, tree_ypred_train)\ntest_con_mat_tree = confusion_matrix(ytest, tree_ypred_test)","6d3ecee5":"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(20,17))\nmatrices = [train_con_mat_logreg, test_con_mat_logreg, train_con_mat_tree, test_con_mat_tree]\ntitles = [\"Logreg Training\", \"Logreg Testing\", \"Tree Training\", \"Tree Testinig\"]\nfor index in range(4):\n    i, j = index\/\/2, index%2\n    sns.heatmap(matrices[index], annot=True, fmt=\"g\", annot_kws={\"fontsize\":25}, cmap=\"Blues\", ax=axes[i,j])\n    axes[i,j].set_xlabel('Predicted labels', fontsize=20)\n    axes[i,j].set_ylabel('True labels', fontsize=20)\n    axes[i,j].set_title(titles[index], fontsize=25)\nplt.show()","d9db8e5a":"print(\"Logreg Training Results:\\n\")\nprint(classification_report(ytrain, logreg_ypred_train))\nprint(\"\\nLogreg Testing Results:\\n\")\nprint(classification_report(ytest, logreg_ypred_test))","8d864835":"print(\"\\n\\nTree Training Results:\\n\")\nprint(classification_report(ytrain, tree_ypred_train))\nprint(\"\\nTree Testing Results\\n\")\nprint(classification_report(ytest, tree_ypred_test))","8414b1af":"ledata = pd.read_csv(\"..\/input\/heart-disease-health-indicators-dataset\/heart_disease_health_indicators_BRFSS2015.csv\")","4c159170":"ledata.head()","a4ee67ce":"ledata.info()","6f73541e":"ledata.isna().sum()","21812993":"stl.use(\"fivethirtyeight\")","2cb7ad92":"fig, axes = plt.subplots(nrows=ledata.shape[1], ncols=1, figsize=(20,13*ledata.shape[1]))\nfor i in range(len(ledata.columns)):\n    col = ledata.columns[i]\n    sns.countplot(x=col, data=ledata, hue=\"HeartDiseaseorAttack\", palette=\"seismic\", ax=axes[i])\nplt.show()","00035f8f":"from sklearn.preprocessing import RobustScaler\nrs = RobustScaler()\nledata_array = rs.fit_transform(ledata)\nledata = pd.DataFrame(ledata_array, columns=ledata.columns)","89e3f8be":"features = ledata.drop(\"HeartDiseaseorAttack\", axis=1)\ntarget = ledata[\"HeartDiseaseorAttack\"]","c44a0b46":"xtrain, xtest, ytrain, ytest = train_test_split(features, target, test_size=0.1)","41399d2d":"tree = DecisionTreeClassifier()","2ccf7848":"tree.fit(xtrain, ytrain)\n\nypred_train = tree.predict(xtrain)\nypred_test = tree.predict(xtest)","132187ab":"print(\"Training Results\\n\")\nprint(classification_report(ytrain, ypred_train))","e9a0a249":"print('Testing Results\\n')\nprint(classification_report(ytest, ypred_test))","b49c9f3c":"# Regression\n### Example: House Prices","b2b43d5d":"### Modelling","f49c7806":"### Regression Metrics:\n**Mean Absolute Error (MAE)**  \n![](https:\/\/i.imgur.com\/19LNbyQ.jpg)  \n\n\n**Maximum Error**  \n$\\text{Max Error}(y, \\hat{y}) = max(| y_i - \\hat{y}_i |)$  \n\n\n**R2 Score**  \n![](https:\/\/miro.medium.com\/max\/1200\/1*_HbrAW-tMRBli6ASD5Bttw.png)  ","6805301c":"**MAE is basically the average error that your model makes**  ","93258d29":"# Supervised Learning Evaluation Tutorial","75e84e06":"### Example2: Heart Disease\/Attack","e7f7d479":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/0\/0e\/Traintest.svg\/700px-Traintest.svg.png)\n![](https:\/\/miro.medium.com\/max\/1400\/1*9hPX9pAO3jqLrzt0IE3JzA.png)  \n![](https:\/\/miro.medium.com\/max\/544\/1*Y-yJiR0FzMgchPA-Fm5c1Q.jpeg)  \n![](https:\/\/media.geeksforgeeks.org\/wp-content\/cdn-uploads\/20190523171258\/overfitting_2.png)  \n![](https:\/\/www.researchgate.net\/publication\/339680577\/figure\/fig2\/AS:865364518924290@1583330387982\/llustration-of-the-underfitting-overfitting-issue-on-a-simple-regression-case-Data.png) \n![](https:\/\/miro.medium.com\/max\/2000\/1*MgmJ6_TuqTWIzmsL6boMng.png)\n![](https:\/\/bradleyboehmke.github.io\/HOML\/07-decision-trees_files\/figure-html\/pruned-tree-1.png)","3d8b3125":"### Confusion Matrix  \n![](https:\/\/miro.medium.com\/max\/1000\/1*fxiTNIgOyvAombPJx5KGeA.png)","f465d548":"#### Accuracy:\n![](https:\/\/www.mydatamodels.com\/wp-content\/uploads\/2020\/10\/2.-Accuracy-formula-machine-learning-algorithms.png)\n#### Precision & Recall:\n![](https:\/\/miro.medium.com\/max\/888\/1*7J08ekAwupLBegeUI8muHA.png)  \n#### F1 Score:\n![](https:\/\/datascience103579984.files.wordpress.com\/2019\/04\/capture3-24.png)  \n  \n  \n![](https:\/\/miro.medium.com\/max\/1400\/1*5_ZAlFhlCk8llhnYWD5PXw.png)","bfa1d230":"# Classification\n### Example 1: Pulsar Detection","bb28eaf2":"This is a tutorial I presented as an instructor in the Google Developer Student Club at Enet'Com, Tunisia.  \nIt's not commented as the code (and the whole notebook) was already explained in the live workshop.  ","b382180a":"This section deals with processing & exploratory analysis. Feel free to skip to the metrics section.","2a421e9f":"### Modelling","62e78187":"## More on Overfitting & Underfitting (Variance & Bias)"}}