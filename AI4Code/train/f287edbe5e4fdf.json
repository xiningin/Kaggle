{"cell_type":{"e88236cc":"code","485c9786":"code","afa411ea":"code","9c8f6ae1":"code","c9f2b087":"code","72a307ba":"code","a9cc04e4":"code","0cead006":"code","7566eba4":"code","63d9bdf6":"code","ed753f9f":"code","e3c4543c":"code","8f02bf56":"code","1bd6acb6":"code","53443946":"code","f30a9531":"code","9d178fbe":"code","bccb27d7":"code","2ce94bd3":"code","a58cf746":"code","fa1e1d3a":"code","20434859":"code","9cb68b9f":"markdown","e0ed607f":"markdown","3a153364":"markdown","426c5912":"markdown","3395983f":"markdown","37a1f8b9":"markdown"},"source":{"e88236cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nplt.style.use('seaborn-whitegrid')\nsns.set_style('whitegrid')","485c9786":"missing_values=['n\/a','na','--']\nnetflix=pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv', na_values=missing_values)\nnetflix.head()","afa411ea":"def data_inv(df):\n    print('Netflix Movies and Shows: ', df.shape[0])\n    print('Database Variables: ', df.shape[1])\n    print('-' * 30)\n    print('Dataset Columns: \\n')\n    print(df.columns)\n    print('-' * 30)\n    print('Datatype of Each Column: \\n')\n    print(df.dtypes)\n    print('-' * 30)\n    print('Missing Rows in Each Column: \\n')\n    c=df.isnull().sum()\n    print(c[c > 0])\ndata_inv(netflix)","9c8f6ae1":"netflix = netflix.drop('show_id', axis=1)\nnetflix.shape[1]","c9f2b087":"print('There are', netflix[netflix.duplicated(['title', 'country', 'type', 'release_year'])].shape[0], 'rows that are duplicates.')","72a307ba":"netflix = netflix.drop_duplicates(['title', 'country', 'type', 'release_year'])\nnetflix.shape[0]","a9cc04e4":"netflix = netflix.reset_index()\nnetflix.head()","0cead006":"netflix['rating'] = netflix['rating'].fillna(netflix['rating'].mode()[0])\nnetflix['rating'].value_counts()","7566eba4":"netflix['date_added'] = netflix['date_added'].fillna('January 1, {}'.format(str(netflix['release_year'].mode()[0])))\nnetflix['date_added'].isnull().sum()","63d9bdf6":"netflix['date_added'] = pd.to_datetime(netflix['date_added'])\nnetflix.dtypes","ed753f9f":"# Using a line graph, do we have enough data per year?\nnetflix.date_added.dt.year.dropna().astype(int).value_counts().sort_index().plot()\nplt.show()","e3c4543c":"# removing rows from 2020 since there is only 18 days of data available\nnetflix.drop(netflix[netflix.date_added.dt.year == 2020].index, inplace=True)\nnetflix.shape[0]","8f02bf56":"# line graph without 2020 information\nnetflix.date_added.dt.year.dropna().astype(int).value_counts().sort_index().plot()\nplt.show()","1bd6acb6":"netflix.type.value_counts()","53443946":"movie_cnt = len(netflix[netflix.type == 'Movie'])\ntv_cnt = len(netflix[netflix.type == 'TV Show'])\nprint('Percentage of Movies: {:.1f}%'.format((movie_cnt \/ len(netflix.type)) * 100))\nprint('Percentage of TV Shows: {:.1f}%'.format((tv_cnt \/ len(netflix.type)) * 100))","f30a9531":"netflix.type.value_counts().plot(kind='pie', autopct='%1.f%%', startangle=90)\nplt.show()","9d178fbe":"# How many titles are added each year?\npd.crosstab(netflix.date_added.dt.year, netflix.type).plot(kind = 'bar')\nplt.xlabel('Year Added to Netflix')\nplt.ylabel('Number of Titles')\nplt.title('Titles Added per Year')\nplt.show()","bccb27d7":"# 'UR' (Unrated) rating is equivalent to 'NR' (Not Rated)\nnetflix['rating'] = netflix['rating'].replace(to_replace = 'UR', value = 'NR')","2ce94bd3":"netflix['rating'].value_counts().plot(kind='bar')\nplt.title('Titles by Rating')\nplt.xlabel('Rating')\nplt.ylabel('Count')\nplt.show()","a58cf746":"# Counts by Rating for each Type\nplt.figure(figsize = (10, 8))\nsns.countplot(x = 'rating', hue = 'type', data = netflix)\nplt.title('Counts by Rating for Each Type')\nplt.show()","fa1e1d3a":"# Counts by Country\nnetflix['country'].value_counts().sort_values(ascending=False).head()","20434859":"top_five_countries = netflix[\n    (netflix.country == 'United States') | \n    (netflix.country == 'India') | \n    (netflix.country == 'United Kingdom') | \n    (netflix.country == 'Japan') | \n    (netflix.country == 'Canada')]\nplt.figure(figsize = (10,8))\nsns.countplot(x = 'country', hue = 'type', data = top_five_countries)\nplt.title('Count by Top 5 Countries for Each Type')\nplt.show()","9cb68b9f":"## Thank you!","e0ed607f":"## Data Investigation","3a153364":"**We will not assume there is a sharp decline of titles in 2020 as there is only 18 days worth of information available from 2020 in the dataset.**","426c5912":"### What content do we have?","3395983f":"## Data Cleaning\n- Drop the 'show_id' column\n- Drop duplicated listings\n- Replace the 10 missing rows in 'rating' with mode\n- Replace the missing rows in 'date_added' with 'January 1, {release_year}\n- Convert the 'date_added' column from object type to datetime","37a1f8b9":"## Exploratory Analysis"}}