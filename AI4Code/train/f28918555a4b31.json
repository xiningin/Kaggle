{"cell_type":{"ddeba9c4":"code","39e5e3fa":"code","75d1a0c0":"code","628066af":"code","632f61de":"code","fa820dc3":"code","2ea43870":"code","428404c5":"code","7df899b0":"code","af057e03":"code","62797d8c":"code","717116b2":"code","622c9c11":"code","67021156":"code","8505a57f":"code","f0789a65":"code","474c0da3":"code","1017bcaa":"code","b0c66dc2":"code","0f8d0305":"code","ac364392":"code","7542b472":"code","ad825d35":"code","f8d37423":"code","f08bf987":"code","bee6bf0e":"code","b71ebfd1":"code","1713075b":"code","d4760fff":"code","7aff31a8":"code","a1b0642c":"code","5398c291":"code","ba126677":"code","7102e588":"code","49195785":"code","78afde14":"code","c74a52bb":"code","c2b4b799":"code","ef969a03":"code","0abe94c7":"code","f03e8ce4":"code","ccc958f2":"code","aff698e6":"code","d98c2744":"code","60ef4b9e":"code","84e50daf":"code","fa873343":"code","685b8096":"code","84ecfa4e":"code","fc9d0a5a":"code","949dc18e":"code","87ef3eca":"code","c7d91d2b":"code","9f5ca23f":"code","bad505d0":"code","1ea4998a":"code","687d22bb":"code","9c4b7112":"code","09a03b81":"code","021262c6":"code","a7174058":"code","d222a3fc":"code","f99284ca":"code","e307b84b":"code","9451f7b8":"code","eeeb18c2":"code","711a17ce":"code","0a3a9dda":"code","6cbd27e3":"code","6d49bf7d":"code","44d4acbc":"code","aaba470a":"code","58cb9c24":"code","c1a6af71":"code","3dc84635":"code","dc15a9ae":"code","b02523d5":"code","2eeb8f95":"code","77937046":"code","04de1581":"code","9ccb7ac0":"code","908ebb83":"code","f2971f81":"code","d7384150":"code","60ac699b":"code","1a32bdcc":"code","606eab4a":"code","e30d189f":"code","82d8eb9d":"code","51a5e297":"code","aa7971f6":"code","d37fb1db":"code","480f57be":"code","a7b65060":"code","d372110c":"code","55afbeb4":"code","cc7838cc":"code","c41dd154":"code","71459b41":"code","686e407a":"code","1d6fe76d":"code","6d0e9a7e":"markdown","c024e8bc":"markdown","8660f79f":"markdown","6bb54e5b":"markdown","1ecd26ba":"markdown","df596887":"markdown","108e559b":"markdown","fea9bf08":"markdown","56441584":"markdown","c2d4cfa8":"markdown","231a1ded":"markdown","10b8fdb5":"markdown","4d7873a6":"markdown","8bce881a":"markdown","4a99264b":"markdown","65e018d2":"markdown","2588564a":"markdown","3a2075ed":"markdown","6d177031":"markdown","b160aa0b":"markdown","1f63cec5":"markdown","1ff30d58":"markdown"},"source":{"ddeba9c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","39e5e3fa":"data= pd.read_csv(\"..\/input\/usa-housing\/USA_Housing.csv\")\ndf= data.copy()\ndf.head()","75d1a0c0":"df.info()","628066af":"df.describe().T","632f61de":"df.isnull().values.any()","fa820dc3":"df.drop(\"Address\", axis=1, inplace= True)\ndf.head()","2ea43870":"df.corr()","428404c5":"from sklearn.linear_model import LinearRegression","7df899b0":"x = df[[\"Avg. Area Income\"]]\ny = df[\"Price\"]","af057e03":"from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict","62797d8c":"x_train, x_test, y_train, y_test = train_test_split(x, \n                                                    y, \n                                                    test_size = 0.20, \n                                                    random_state= 28)","717116b2":"reg = LinearRegression()\nmodel = reg.fit(x_train, y_train)\nmodel.intercept_ , model.coef_","622c9c11":"from sklearn.metrics import mean_squared_error, r2_score","67021156":"mse= mean_squared_error(y_test,model.predict(x_test))\nrmse= np.sqrt(mse)\nprint(\"MSE: {}\\nRMSE: {}\".format(mse,rmse))","8505a57f":"from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict","f0789a65":"df.head()","474c0da3":"x= df.drop(\"Price\", axis=1)\ny= df[\"Price\"]","1017bcaa":"x_train, x_test, y_train, y_test = train_test_split(x, \n                                                    y, \n                                                    test_size = 0.20, \n                                                    random_state= 22)","b0c66dc2":"x_train.shape , x_test.shape , y_train.shape , y_test.shape","0f8d0305":"lm = LinearRegression()\nmodel = lm.fit(x_train, y_train)","ac364392":"print(\"Sabit De\u011fer: {} \\nKatsay\u0131lar: {}\".format(model.intercept_, model.coef_))","7542b472":"rmse = np.sqrt(mean_squared_error(y_test, model.predict(x_test)))\nprint(\"Test seti RMSE: {}\".format(rmse))","ad825d35":"df.head()","f8d37423":"x.head()","f08bf987":"y.head()","bee6bf0e":"x_train.shape , x_test.shape , y_train.shape , y_test.shape","b71ebfd1":"model","1713075b":"cross_val_score(model, x_train, y_train, cv = 10, scoring = \"r2\")","d4760fff":"t_rmse=np.sqrt(-cross_val_score(model, \n                x_train, \n                y_train, \n                cv = 10, \n                scoring = \"neg_mean_squared_error\")).mean()\nprint(\"Tune Edilmi\u015f E\u011fitim seti RMSE: {}\".format(t_rmse))","7aff31a8":"t_rmse= np.sqrt(-cross_val_score(model, \n                x_test, \n                y_test, \n                cv = 10, \n                scoring = \"neg_mean_squared_error\")).mean()\nprint(\"Tune Edilmi\u015f Test seti RMSE: {}\".format(t_rmse))","a1b0642c":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale \npca = PCA()","5398c291":"x_reduced_train = pca.fit_transform(scale(x_train)) ","ba126677":"np.cumsum(np.round(pca.explained_variance_ratio_, decimals = 4)*100)","7102e588":"lm = LinearRegression()","49195785":"pcr_model = lm.fit(x_reduced_train, y_train)","78afde14":"print(\"Sabit De\u011fer: {}\\nKatsay\u0131lar: {}\".format(pcr_model.intercept_, pcr_model.coef_))","c74a52bb":"y_pred = pcr_model.predict(x_reduced_train)","c2b4b799":"np.sqrt(mean_squared_error(y_train, y_pred))","ef969a03":"r2_score(y_train, y_pred)","0abe94c7":"pca2 = PCA()\nx_reduced_test = pca2.fit_transform(scale(x_test))\ny_pred = pcr_model.predict(x_reduced_test)","f03e8ce4":"np.sqrt(mean_squared_error(y_test, y_pred))","ccc958f2":"from sklearn import model_selection\ncv_10 = model_selection.KFold(n_splits = 10,\n                             shuffle = True,\n                             random_state = 42)","aff698e6":"lm = LinearRegression()\nRMSE = []","d98c2744":"for i in np.arange(1, x_reduced_train.shape[1] + 1):\n    \n    score = np.sqrt(-1*model_selection.cross_val_score(lm, \n                                                       x_reduced_train[:,:i], \n                                                       y_train.ravel(), \n                                                       cv=cv_10, \n                                                       scoring='neg_mean_squared_error').mean())\n    RMSE.append(score)\n    \nRMSE","60ef4b9e":"from sklearn.cross_decomposition import PLSRegression, PLSSVD","84e50daf":"pls_model = PLSRegression().fit(x_train, y_train)","fa873343":"pls_model.coef_","685b8096":"y_pred = pls_model.predict(x_train)","84ecfa4e":"np.sqrt(mean_squared_error(y_train, y_pred))","fc9d0a5a":"r2_score(y_train, y_pred)","949dc18e":"y_pred = pls_model.predict(x_test)","87ef3eca":"np.sqrt(mean_squared_error(y_test, y_pred))","c7d91d2b":"import matplotlib.pyplot as plt","9f5ca23f":"#CV\ncv_10 = model_selection.KFold(n_splits=10, shuffle=True, random_state=1)","bad505d0":"#Hata hesaplamak i\u00e7in d\u00f6ng\u00fc\nRMSE = []\n\nfor i in np.arange(1, x_train.shape[1] + 1):\n    pls = PLSRegression(n_components=i)\n    score = np.sqrt(-1*cross_val_score(pls, x_train, y_train, cv=cv_10, scoring='neg_mean_squared_error').mean())\n    RMSE.append(score)","1ea4998a":"plt.plot(np.arange(1, x_train.shape[1] + 1), np.array(RMSE), '-v', c = \"r\")\nplt.xlabel('Bile\u015fen Say\u0131s\u0131')\nplt.ylabel('RMSE')\nplt.title('Salary');","687d22bb":"pls_model = PLSRegression(n_components = 5).fit(x_train, y_train)","9c4b7112":"y_pred = pls_model.predict(x_test)","09a03b81":"np.sqrt(mean_squared_error(y_test, y_pred))","021262c6":"from sklearn.linear_model import Ridge","a7174058":"lambda_  = np.random.rand()\nridgeModel= Ridge(alpha= lambda_).fit(x_train,y_train)\nlambda_","d222a3fc":"ridgeModel.coef_","f99284ca":"lambdalar = 10**np.linspace(10,-2,10)*0.5 ","e307b84b":"ridge_model = Ridge()\nkatsayilar = []\n\nfor i in lambdalar:\n    ridge_model.set_params(alpha = i)\n    ridge_model.fit(x_train, y_train) \n    katsayilar.append(ridge_model.coef_) \n    \n\n    \nax = plt.gca()\nax.plot(lambdalar, katsayilar) \nax.set_xscale('log') \n\nplt.xlabel('Lambda(Alpha) De\u011ferleri')\nplt.ylabel('Katsay\u0131lar\/A\u011f\u0131rl\u0131klar')\nplt.title('D\u00fczenlile\u015ftirmenin Bir Fonksiyonu Olarak Ridge Katsay\u0131lar\u0131');","9451f7b8":"y_pred= ridgeModel.predict(x_train)","eeeb18c2":"np.sqrt(mean_squared_error(y_train,y_pred))","711a17ce":"y_pred= ridgeModel.predict(x_test)","0a3a9dda":"np.sqrt(mean_squared_error(y_test,y_pred))","6cbd27e3":"lambdalar","6d49bf7d":"from sklearn.linear_model import RidgeCV\nridge_cv = RidgeCV(alphas = lambdalar, \n                   scoring = \"neg_mean_squared_error\",\n                   normalize = True)","44d4acbc":"ridge_cv.fit(x_train,y_train);","aaba470a":"ridge_cv.alpha_","58cb9c24":"ridge_tuned = Ridge(alpha = ridge_cv.alpha_, \n                   normalize = True).fit(x_train,y_train)","c1a6af71":"ridge_tuned.coef_","3dc84635":"np.sqrt(mean_squared_error(y_train,ridge_tuned.predict(x_train)))","dc15a9ae":"np.sqrt(mean_squared_error(y_test,ridge_tuned.predict(x_test)))","b02523d5":"from sklearn.linear_model import Lasso","2eeb8f95":"lasso_model= Lasso().fit(x_train,y_train)","77937046":"y_pred= lasso_model.predict(x_test)","04de1581":"np.sqrt(mean_squared_error(y_test,y_pred))","9ccb7ac0":"from sklearn.linear_model import LassoCV","908ebb83":"lasso_cv_model = LassoCV(alphas = None, \n                         cv = 10, \n                         max_iter = 1000, \n                         normalize = True)","f2971f81":"lasso_cv_model.fit(x_train,y_train)","d7384150":"lasso_cv_model.alpha_","60ac699b":"lasso_tuned= Lasso(alpha= lasso_cv_model.alpha_)","1a32bdcc":"lasso_tuned.fit(x_train,y_train)","606eab4a":"y_pred= lasso_tuned.predict(x_test)","e30d189f":"np.sqrt(mean_squared_error(y_test,y_pred))","82d8eb9d":"from sklearn.linear_model import ElasticNet","51a5e297":"enet_model= ElasticNet().fit(x_train,y_train)","aa7971f6":"enet_model.coef_","d37fb1db":"enet_model.intercept_","480f57be":"y_pred= enet_model.predict(x_test)","a7b65060":"np.sqrt(mean_squared_error(y_test,y_pred))","d372110c":"from sklearn.linear_model import ElasticNetCV","55afbeb4":"enet_cv_model= ElasticNetCV(cv= 10, random_state= 42 ).fit(x_train,y_train)","cc7838cc":"enet_cv_model.alpha_","c41dd154":"enet_tuned= ElasticNet(alpha= enet_cv_model.alpha_).fit(x_train,y_train)","71459b41":"y_pred= enet_tuned.predict(x_test)","686e407a":"np.sqrt(mean_squared_error(y_test,y_pred))","1d6fe76d":"r2_score(y_test,y_pred)","6d0e9a7e":"Elde edilen sabit de\u011fer ve katsay\u0131lar\u0131 kullanarak tahmin fonksiyonunu olu\u015fturuyorum\n\nPrice= -225334.13 + 21.23*Avg. Area Income","c024e8bc":"E\u011fitim seti \u00fczerinde indirgeme i\u015flemi ger\u00e7ekle\u015ftiriyorum","8660f79f":"# PLS Regresyon","6bb54e5b":"minimum hata i\u00e7in t\u00fcm de\u011fi\u015fkenleri almam\u0131z gerekiyor.","1ecd26ba":"## Model Tuning","df596887":"# Ridge Regresyon","108e559b":"## Model Tuning","fea9bf08":"## Model Tuning","56441584":"## Model Tuning","c2d4cfa8":"# \u00c7oklu Do\u011frusal Regresyon","231a1ded":"# ElasticNet Regresyon","10b8fdb5":"# Basit Do\u011frusal Regresyon","4d7873a6":"Korelasyonu y\u00fcksek olan de\u011fi\u015fkeni kullanarak basit do\u011frusal regresyon modeli olu\u015fturuyorum","8bce881a":"Modele giri\u015f ve \u00e7\u0131k\u0131\u015f olarak verilecek verileri e\u011fitim ve test seti olarak ay\u0131r\u0131yorum","4a99264b":"## Model Tuning","65e018d2":"Sonu\u00e7lar\u0131n G\u00f6rselle\u015ftirilmesi","2588564a":"## Model Tuning","3a2075ed":"# Lasso Regresyon","6d177031":"# PCR Regresyon","b160aa0b":"Price de\u011fi\u015fkeni ile aralar\u0131ndaki korelasyona bakarak en y\u00fcksek korelasyona sahip de\u011fi\u015fkeni se\u00e7iyorum","1f63cec5":"Model performans\u0131n\u0131 de\u011ferlendirmek i\u00e7in hatay\u0131 hesapl\u0131yorum","1ff30d58":"Adres bilgisi gereksiz oldu\u011funu d\u00fc\u015f\u00fcnd\u00fc\u011f\u00fcm i\u00e7in siliyorum"}}