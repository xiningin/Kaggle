{"cell_type":{"dd1aa4f9":"code","c620836e":"code","57dbb065":"code","87507d97":"code","88cd1024":"code","3225cf45":"code","8c2181cb":"code","73d2fa23":"code","e721b22a":"code","3bbf5566":"code","59b8055a":"code","a4624237":"code","695cb3cf":"code","d09072ca":"code","9080620b":"code","3bab405d":"code","007e617a":"markdown","a7b928c0":"markdown","2697a8b4":"markdown","37e18012":"markdown","a32393be":"markdown","e535b474":"markdown","56b08f09":"markdown","acfbb5c1":"markdown","d26a2896":"markdown","d7dc5de8":"markdown","f413f59a":"markdown","8a754624":"markdown","7a2a2ddb":"markdown"},"source":{"dd1aa4f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tensorflow.keras.utils import plot_model, to_categorical\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nimport matplotlib.pyplot as plt\nimport os\nimport random\nimport cv2\nfrom tensorflow.keras import callbacks\nfrom tensorflow.keras.callbacks import TensorBoard, ModelCheckpoint\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c620836e":"data_dir = \"..\/input\/doom-crossing\"\nsub_dir = os.listdir(data_dir)\nsub_dir","57dbb065":"categories = ['animal_crossing', 'doom']\n\nfor category in categories:\n    path = os.path.join(data_dir, category)\n    for img in os.listdir(path):\n        img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n        plt.imshow(img_array)\n        plt.show()\n        break\n    break","87507d97":"print(img_array)","88cd1024":"img_array.shape","3225cf45":"IMG_SIZE = 80\nnew_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))\nplt.imshow(new_array)\nplt.show()","8c2181cb":"training_data = []\n\ndef create_training_data():\n    for category in categories:\n        path = os.path.join(data_dir, category)\n        category_count = categories.index(category)\n        for img in os.listdir(path):\n            try:\n                img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n                new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))\n                training_data.append([new_array, category_count])\n            except Exception as e:\n                pass\n        \ncreate_training_data()       ","73d2fa23":"print(len(training_data))","e721b22a":"random.shuffle(training_data)","3bbf5566":"x = []\ny = []\n\nfor features, label in training_data:\n    x.append(features)\n    y.append(label)","59b8055a":"fix, axes = plt.subplots(nrows=10, ncols=5, figsize=(12,18))\naxes = axes.flatten()\nfor i,ax in zip(range(50), axes):\n    ax.imshow(x[i])\n    ax.set_title(categories[y[i]])\n    ax.axis(\"off\")\n    \nplt.show()","a4624237":"x = np.array(x).reshape(-1, IMG_SIZE, IMG_SIZE, 1)\ny = to_categorical(y)\nx.shape, y.shape","695cb3cf":"model = models.Sequential()\nmodel.add(layers.Flatten(input_shape=(80,80,1)))\nmodel.add(layers.Dense(3200, activation='relu'))\nmodel.add(layers.Dense(1600, activation='relu'))\nmodel.add(layers.Dense(800, activation='relu'))\nmodel.add(layers.Dense(400, activation='relu'))\nmodel.add(layers.Dense(200, activation='relu'))\nmodel.add(layers.Dense(100, activation='relu'))\nmodel.add(layers.Dense(50, activation='relu'))\nmodel.add(layers.Dense(2,activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","d09072ca":"NAME = \"Animal-vs-Doom-Crossing\"\ncheckpoint_path = \"train_ckpt\/cp.ckpt\"\ncheckpoint = ModelCheckpoint(filepath=checkpoint_path, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')\ntensorboard = TensorBoard(log_dir=\"logs\/{}\".format(NAME))\ncallbacks_list = ([checkpoint], [tensorboard])\nmodel.fit(x, y, epochs=50, batch_size=110, shuffle=True, validation_split=0.33, callbacks=callbacks_list, verbose=1)","9080620b":"model.summary()","3bab405d":"plot_model(model, show_shapes=True, show_layer_names=True)","007e617a":"# Reshaping the image to size 50*50","a7b928c0":"# Plotting the image","2697a8b4":"* Creating a Sequential model.\n* Adding Flatten and Dense Layer in the model\n* Adding an output layer and using the activation function = sigmoid\n* Compiling the model. Keeping the cost function = binary_crossentropy and optimizer = adam","37e18012":"# Shuffling the training data so that both doom and animal data be not be in sequence which will impact the model.","a32393be":"# Separating features and label in the training dataset","e535b474":"* Using ModelCheckPoint callback to save the model after every epoch.\n* Using TensorBoard callback to visualize the model.\n* Training the model using 33 percent data as the validation data and the call back functions","56b08f09":"# Summarizing the model","acfbb5c1":"# Creating the model. Compiling and Training the model.","d26a2896":"# Preparing the training dataset by appending the images from the animal and doom directory","d7dc5de8":"# Defining the directory path and listing the sub directories inside it.","f413f59a":"# Converting the features into numpy array and one hot encoding the label","8a754624":"# Plotting the model","7a2a2ddb":"# Plotting random 50 images"}}