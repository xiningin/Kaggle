{"cell_type":{"fc8ec831":"code","a64fe9ff":"code","3153b7e9":"code","3875d5ed":"code","e09899d5":"code","dd031048":"code","2cbe34b8":"code","01eb3f3b":"code","05903326":"code","c6401607":"code","3aa35e52":"code","5c42f7ce":"code","4ec3ec17":"code","f4d5e85b":"code","6217bc2a":"code","18939ae1":"code","5f5a0a16":"code","b3afeac3":"code","4a539161":"code","93b64f9b":"code","d634935c":"code","366b7da1":"code","978ebaac":"code","72a409b2":"code","8985ca6a":"code","401d4d53":"code","1caf51c2":"code","0fc61fce":"code","7a8f9c61":"code","8b380ed3":"code","4ca0fc4f":"code","657766e1":"code","dc2029d1":"code","68308548":"code","1e400ab7":"code","f45b8ab4":"code","546b9316":"code","363b14e3":"code","8650c2f1":"markdown","a03c1ed2":"markdown","0a09d040":"markdown","1f69e105":"markdown","7f630bf0":"markdown","dfcca602":"markdown","b2a54c01":"markdown","743bfde8":"markdown"},"source":{"fc8ec831":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a64fe9ff":"happiness = pd.read_csv(\"\/kaggle\/input\/World_Happiness_2015.csv\")\nworld = pd.read_csv(\"\/kaggle\/input\/World_dev.csv\")","3153b7e9":"happiness.head()","3875d5ed":"world.head()","e09899d5":"world.info()","dd031048":"happiness.info()","2cbe34b8":"merged = pd.merge(happiness, world, how = \"left\",left_on =\"Country\", right_on = \"ShortName\")\nmerged.head()","01eb3f3b":"pd.options.display.max_columns  = None\nmerged.head()","05903326":"merged.columns","c6401607":"merged[\"SpecialNotes\"].head(10)","3aa35e52":"# in sprcialNotes Column we can get national accounts.\nmerged[\"SpecialNotes\"].loc[4][-27:-10]","5c42f7ce":"pattern= R\"[Nn]ational accounts\"\nNational_account = merged[\"SpecialNotes\"].str.contains(pattern, na =False )","4ec3ec17":"National_account.head(20)","f4d5e85b":"merged[National_account]['SpecialNotes'].head()","6217bc2a":"merged[National_account]['SpecialNotes'].tail()","18939ae1":"# in sprcialNotes Column we can get years(1000-2050) of whole columns\nyear_pat = r\"[1-2][0-9][0-9][0-9]\"","5f5a0a16":"years = merged[\"SpecialNotes\"].str.contains(year_pat,na = False)\nyears.head(10)","b3afeac3":"year_pat = r\"([1-2][0-9][0-9][0-9])\"\na = merged[\"SpecialNotes\"].str.extractall(year_pat)\na.rename({0:\"Years\"}, axis = 1, inplace = True)","4a539161":"a.head(10)","93b64f9b":"a.tail(10)","d634935c":"merged.columns","366b7da1":"merged.rename({'SourceOfMostRecentIncomeAndExpenditureData':\"IESurvey\"}, axis = 1, inplace = True)","978ebaac":"merged[\"IESurvey\"]","72a409b2":"pattern = r'(?P<First_Year>[1-2][0-9]{3})\/?(?P<Second_Year>[0-9]{2})?'","8985ca6a":"df = merged[\"IESurvey\"].str.extract(pattern)\ndf","401d4d53":"merged[\"IESurvey\"].str.extract(pattern).info()","1caf51c2":"twos = df[\"First_Year\"].str[:2]\ntwos.head()","0fc61fce":"# df[\"Second_Year\"] = twos + df[\"Second_Year\"]\n# df[\"Second_Year\"]","7a8f9c61":"df[\"Second_Year\"] = twos.str.cat(df[\"Second_Year\"])","8b380ed3":"df","4ca0fc4f":"merged.columns","657766e1":"merged['IncomeGroup'].head(20)","dc2029d1":"merged['IncomeGroup'].unique()","68308548":"dic = {'High income: OECD':\"HIGH OECD\", 'Upper middle income':\"UPPER MIDDLE\", \n 'High income: nonOECD': \"HIGH NONOECD\",\n       np.nan:np.nan, 'Lower middle income':\"LOWER MIDDLE\", 'Low income':\"LOW\"}\ndic","1e400ab7":" merged['IncomeGroup'] = merged['IncomeGroup'].map(dic)","f45b8ab4":"merged['IncomeGroup'].unique()","546b9316":"IG = merged.pivot_table(index = 'IncomeGroup', values = 'Happiness Score')\nIG","363b14e3":"IG.plot.bar()","8650c2f1":"In IncomeGroup column I can changing  points","a03c1ed2":"## Remove the Elipces in merged  ","0a09d040":"# Working on string with basic Regular Expression\n  In This Notebook I'll working on string type dataset using World_dev.csv with basoc Regular Expression in panas","1f69e105":"# Visualaiztion ","7f630bf0":"### In this columns we can sprate year in IESurvey \nCreat a pattern of year","dfcca602":"### **In First  year column sprate the 20 and shift into second year column**","b2a54c01":"# Merging two data set one is World_Happiness_2015.csv & World_dev.csv\n","743bfde8":"# Regular Expression"}}