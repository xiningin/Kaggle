{"cell_type":{"6d4efaf9":"code","6831d6a1":"code","6468b19e":"code","53ea867b":"code","5a24af90":"code","6b2bd08c":"code","cc7244e7":"code","609bf643":"code","dc837445":"code","c20dbe8c":"code","0ffbd30c":"code","80b92226":"code","535ac674":"code","f933252b":"code","1bc44bc7":"code","3ae620fe":"code","0de37a80":"code","a89715db":"code","c233feed":"code","984c2d03":"code","5feff119":"code","b1eaafca":"code","fbf7ab71":"code","4b752cfc":"code","0b63f399":"code","ddfa49d7":"code","256bda50":"code","479db99a":"code","8f4ada84":"code","f2f20d5b":"code","53fe9f41":"code","deefa2aa":"code","d9b5d97d":"code","e14beb87":"code","7dfb05ea":"code","fc1f2a88":"code","91fdcdef":"code","768cd75b":"code","1b7be606":"code","71fa116a":"code","922681af":"code","0b0a0bd7":"code","20fba2c5":"code","d7f49bd7":"code","6043fc14":"code","4c304b49":"code","ed129df2":"code","1c739e29":"code","08bd02dd":"code","95de0f6c":"code","25e12b25":"code","9cb0ba2d":"code","a2e85392":"code","64810a02":"code","6275d702":"code","84b87fb9":"code","80c4f8de":"code","960c6e6e":"code","b488143c":"code","50ea9425":"code","40048433":"code","cd071384":"code","68b7fabb":"code","d8e431ea":"code","d385d75d":"code","501b00f7":"code","3d0d682e":"markdown","0fc416f7":"markdown","0651081f":"markdown","275bd941":"markdown","cac42923":"markdown","82833c81":"markdown","99c0017c":"markdown","846a0aee":"markdown","bd71f00d":"markdown","ad91a31c":"markdown","aaf2b679":"markdown","594fd569":"markdown","645c7459":"markdown","69fd5d1f":"markdown","6a38b558":"markdown","e8b13bcd":"markdown","9c930de9":"markdown","7fd52e61":"markdown","15871aea":"markdown","b91a7326":"markdown","c8fb8f2f":"markdown","36103482":"markdown","fecbb0e0":"markdown","ff0c07e2":"markdown","54cd8573":"markdown","3dfb38f7":"markdown","5dfaf14b":"markdown","c0892adf":"markdown","d154408b":"markdown","b502b060":"markdown","e19255e2":"markdown"},"source":{"6d4efaf9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6831d6a1":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport xgboost as xgb, lightgbm as lgbm, catboost as catb\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split, ShuffleSplit, cross_val_score, learning_curve\nfrom sklearn.model_selection import KFold, GridSearchCV, RandomizedSearchCV\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler\nfrom sklearn.metrics import (roc_auc_score, roc_curve, auc, confusion_matrix, \n                             accuracy_score, classification_report, plot_confusion_matrix, \n                             plot_precision_recall_curve, precision_recall_curve, recall_score, \n                             plot_roc_curve, precision_score, f1_score)\n","6468b19e":"import warnings\nwarnings.simplefilter('ignore')","53ea867b":"SAMPLE_SUBMISSION = '..\/input\/gb-credit-default\/sample_submission.csv'\nTRAIN = '..\/input\/gb-credit-default\/train.csv'\nTEST = '..\/input\/gb-credit-default\/test.csv'","5a24af90":"# \u0422\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train = pd.read_csv(TRAIN)\ndf_test = pd.read_csv(TEST)\nsubmit = pd.read_csv(SAMPLE_SUBMISSION)\ndf_train.head()","6b2bd08c":"df_train.describe()","cc7244e7":"df_train.info()","609bf643":"# \u041e\u0431\u0437\u043e\u0440 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfor cat_colname in df_train.select_dtypes(include='category').columns:\n    print(str(cat_colname) + '\\n\\n' + str(df_train[cat_colname].value_counts()) + '\\n' + '*' * 100 + '\\n')","dc837445":"# \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_test.head(10)","c20dbe8c":"df_test.info()","0ffbd30c":"df_test.shape","80b92226":"# df_test['Bankruptcies'].value_counts()","535ac674":"# df_test.loc[(df_test['Bankruptcies'] == 5)]","f933252b":"df_train['Credit Default'].value_counts()","1bc44bc7":"df_train['Credit Default'].astype(int).plot.hist();","3ae620fe":"len(df_test) - df_test.count()","0de37a80":"len(df_train) - df_train.count()","a89715db":"def fill_data(df):\n    NUM_FEATURE_NAMES = ['Annual Income', 'Tax Liens', 'Number of Open Accounts', 'Years of Credit History', 'Maximum Open Credit',\n                     'Number of Credit Problems', 'Months since last delinquent', 'Current Loan Amount',\n                     'Current Credit Balance', 'Monthly Debt', 'Credit Score']\n\n    CAT_FEATURE_NAMES = ['Home Ownership', 'Years in current job', 'Purpose', 'Term', 'Bankruptcies']\n    \n    # \u0412\u0432\u043e\u0434 \u043d\u043e\u0432\u043e\u0439 \u0444\u0438\u0447\u0438 Annual_Income_outlier = 0 \u043f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u0443 \u0438 \u0434\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0435\u0435 \u0435\u0441\u043b\u0438 Annual Income \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 99999999, \u0442\u043e\u0433\u0434\u0430 Annual_Income_outlier = 1\n    df['Annual_Income_outlier'] = 0\n    df.loc[(df['Annual Income'].isna()) | (df['Annual Income'] >= 99999999), 'Annual_Income_outlier'] = 1\n    \n    # \u0412\u0432\u043e\u0434 \u043d\u043e\u0432\u043e\u0439 \u0444\u0438\u0447\u0438 Years_in_current_job_outlier = 0 \u043f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u0443 \u0438 \u0434\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0435\u0435 \u0435\u0441\u043b\u0438 Years in current job \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e  - \u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 1\n    df['Years_in_current_job_outlier'] = 0\n    df.loc[(df['Years in current job'].isna()), 'Years_in_current_job_outlier'] = 1\n    \n    # \u0412\u0432\u043e\u0434 \u043d\u043e\u0432\u043e\u0439 \u0444\u0438\u0447\u0438 Months_since_last_delinquent_outlier = 0 \u043f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u0443 \u0438 \u0434\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0435\u0435 \u0435\u0441\u043b\u0438 Months since last delinquent \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e  - \u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 1\n    # \u0410 \u0442\u0430\u043a\u0436\u0435 \u0435\u0441\u043b\u0438 Months since last delinquent \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e  - \u0442\u043e Months since last delinquent = 0\n    df['Months_since_last_delinquent_outlier'] = 0\n    df.loc[(df['Months since last delinquent'].isna()), 'Months_since_last_delinquent_outlier'] = 1\n    df.loc[(df['Months since last delinquent'].isna()), 'Months since last delinquent'] = 0\n    \n    # \u0412\u0432\u043e\u0434 \u043d\u043e\u0432\u043e\u0439 \u0444\u0438\u0447\u0438 Bankruptcies_outlier = 0 \u043f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u0443 \u0438 \u0434\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0435\u0435 \u0435\u0441\u043b\u0438 Bankruptcies \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e  - \u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 1\n    df['Bankruptcies_outlier'] = 0\n    df.loc[(df['Bankruptcies'].isna()), 'Bankruptcies_outlier'] = 1\n    \n    # \u0412\u0432\u043e\u0434 \u043d\u043e\u0432\u043e\u0439 \u0444\u0438\u0447\u0438 Credit Score_outlier = 0 \u043f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u0443 \u0438 \u0434\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0435\u0435 \u0435\u0441\u043b\u0438 Credit Score \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e  - \u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 1\n    df['Credit Score_outlier'] = 0\n    df.loc[(df['Credit Score'].isna()), 'Credit Score_outlier'] = 1\n    \n    conc_df = pd.concat([df_train, df_train], axis=0)\n    \n    for i in CAT_FEATURE_NAMES:\n        column_mode = conc_df[i].mode()[0]\n        df[i] = df[i].fillna(column_mode)\n    \n    for i in NUM_FEATURE_NAMES:\n        column_median = conc_df[i].median()\n        df[i] = df[i].fillna(column_median)\n    \n    return df","c233feed":"fill_data(df_train)\nfill_data(df_test)\nlen(df_train) - df_test.count()","984c2d03":"def prep_outlier(df, col, threshold):\n    df.loc[df[col] > threshold, col] = np.nan\n    return df","5feff119":"def fix_outlier(df):\n    df = prep_outlier(df, 'Annual Income', threshold=8000000)\n    df = prep_outlier(df, 'Tax Liens', threshold=7)\n    df = prep_outlier(df, 'Number of Open Accounts', threshold=40)\n    df = prep_outlier(df, 'Years of Credit History', threshold=50)\n    df = prep_outlier(df, 'Maximum Open Credit', threshold=50000000)\n    df = prep_outlier(df, 'Number of Credit Problems', threshold=5)\n    df = prep_outlier(df, 'Months since last delinquent', threshold=48)\n    df = prep_outlier(df, 'Current Loan Amount', threshold= 40000000)\n    df = prep_outlier(df, 'Current Credit Balance', threshold=400000)\n    df = prep_outlier(df, 'Monthly Debt', threshold=80000)\n    df = prep_outlier(df, 'Credit Score', threshold=1000)\n    \n    return df","b1eaafca":"df_train[['Annual Income','Tax Liens','Number of Open Accounts','Years of Credit History',\n          'Maximum Open Credit','Number of Credit Problems','Months since last delinquent',\n          'Current Loan Amount', 'Current Credit Balance',\n         'Monthly Debt', 'Credit Score']].hist(bins=50, figsize=(22,17))\nplt.show()","fbf7ab71":"def netto_income(df):\n    df['Netto_income'] = df['Annual Income'] * (1 - df['Tax Liens'] \/ (df['Tax Liens'] + 100))\n    \n    return df\n\ndef total_credit_amount(df):\n    df['Total_credit_amount'] = df['Current Credit Balance'] + df['Current Loan Amount']\n    \n    return df\ndef no_delinquent(df):\n\n    df['No_delinquent'] = 0\n    df.loc[(df['Months since last delinquent'] == 0), 'No_delinquent'] = 1\n    df['No_delinquent'] = df['No_delinquent'].astype('category')\n    return df\ndef new_features(df):\n    df = netto_income(df)\n    df = total_credit_amount(df)\n    df = no_delinquent(df)\n    return df","4b752cfc":"new_features(df_train)\ndf_train.info()","0b63f399":"new_features(df_test)\ndf_test.info()","ddfa49d7":"# \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u0434\u043b\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 CatBoost\ntrain_df_catb = df_train.copy()\ntest_df_catb = df_test.copy()","256bda50":"df_train = pd.get_dummies(df_train)\ndf_test = pd.get_dummies(df_test)","479db99a":"# \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u043c\u0451\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0442\u043a \u043a\u0430\u043a \u043d\u0435 \u0432\u0441\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0438\u043c\u0435\u043d\u0430\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u044b > < + ...\ndf_train.rename(columns={'Years in current job_10+ years': 'Years in current job_more_then_10 years', 'Years in current job_< 1 year': 'Years in current job_less_then_1 year'}, inplace=True)\ndf_test.rename(columns={'Years in current job_10+ years': 'Years in current job_more_then_10 years', 'Years in current job_< 1 year': 'Years in current job_less_then_1 year'}, inplace=True)\ndf_train.info()","8f4ada84":"df_train['Purpose_renewable energy'].value_counts()","f2f20d5b":"try:\n    df_test['Purpose_renewable energy'].value_counts()\nexcept KeyError:\n    print(\"\u041d\u0435\u0442 \u0444\u0438\u0447\u0438 'Purpose_renewable energy'\")","53fe9f41":"# \u0422\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0430 \u043e\u0434\u043d\u0443 dummies \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 - Purpose_renewable energy, \u0435\u044e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u043d\u0435\u0431\u0440\u0435\u0447\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438 \u0442\u043e\u043b\u044c\u043a\u043e 2 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0440\u0430\u0432\u043d\u044b\u0435 1\ndf_train.drop(columns='Purpose_renewable energy', axis=1, inplace=True)","deefa2aa":"df_train.info()","d9b5d97d":"TARGET_NAME = 'Credit Default'\nNUM_FEATURE_NAMES = ['Annual Income', 'Tax Liens', 'Number of Open Accounts', 'Years of Credit History', 'Maximum Open Credit',\n                     'Number of Credit Problems', 'Months since last delinquent', 'Current Loan Amount',\n                     'Current Credit Balance', 'Monthly Debt', 'Credit Score', 'Netto_income', 'Total_credit_amount']\nCAT_FEATURE_NAMES = ['Home Ownership', 'Years in current job', 'Purpose', 'Term', 'Bankruptcies', 'No_delinquent']\n\nBASE_FEATURE_NAMES = df_train.columns.drop(TARGET_NAME, CAT_FEATURE_NAMES).tolist()\nCAT_MODEL_FEATURE_NAMES = train_df_catb.columns.drop(TARGET_NAME).tolist()","e14beb87":"df_train[TARGET_NAME].value_counts()","7dfb05ea":"plt.figure(figsize=(8, 5))\n\nsns.countplot(x=TARGET_NAME, data=df_train)\n\nplt.title('Target variable distribution')\nplt.show()","fc1f2a88":"corr_with_target = df_train[BASE_FEATURE_NAMES + [TARGET_NAME]].corr().iloc[:-1, -1].sort_values(ascending=False)\nplt.figure(figsize=(10, 8))\nsns.barplot(x=corr_with_target.values, y=corr_with_target.index)\nplt.title('Correlation with target variable')\nplt.show()","91fdcdef":"plt.figure(figsize = (25,20))\n\nsns.set(font_scale=1.4)\nsns.heatmap(df_train[NUM_FEATURE_NAMES].corr().round(3), annot=True, linewidths=.5, cmap='GnBu')\n\nplt.title('Correlation matrix')\nplt.show()","768cd75b":"def get_classification_report(y_train_true, y_train_pred, y_test_true, y_test_pred):\n    print('TRAIN\\n\\n' + classification_report(y_train_true, y_train_pred))\n    print('TEST\\n\\n' + classification_report(y_test_true, y_test_pred))\n    print('CONFUSION MATRIX\\n')\n    print(pd.crosstab(y_test_true, y_test_pred))\n    \ndef balance_df_by_target(df, target_name):\n\n    target_counts = df[target_name].value_counts()\n\n    major_class_name = target_counts.argmax()\n    minor_class_name = target_counts.argmin()\n\n    disbalance_coeff = int(target_counts[major_class_name] \/ target_counts[minor_class_name]) - 1\n\n    for i in range(disbalance_coeff):\n        sample = df[df[target_name] == minor_class_name].sample(target_counts[minor_class_name])\n        df = df.append(sample, ignore_index=True)\n\n    return df.sample(frac=1) ","1b7be606":"scaler = StandardScaler()\n\ndf_norm = df_train.copy()\ndf_norm[NUM_FEATURE_NAMES] = scaler.fit_transform(df_norm[NUM_FEATURE_NAMES])\n\ndf_train = df_norm.copy()","71fa116a":"X = df_train[BASE_FEATURE_NAMES]\ny = df_train[TARGET_NAME]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, test_size=0.30, random_state=21)","922681af":"df_for_balancing = pd.concat([X_train, y_train], axis=1)\ndf_balanced = balance_df_by_target(df_for_balancing, TARGET_NAME)\n    \ndf_balanced[TARGET_NAME].value_counts()","0b0a0bd7":"X_train = df_balanced.drop(columns=TARGET_NAME)\ny_train = df_balanced[TARGET_NAME]","20fba2c5":"train = pd.concat([X_train, y_train], axis=1)\ntest = pd.concat([X_test, y_test], axis=1)","d7f49bd7":"model_lr = LogisticRegression()\nmodel_lr.fit(X_train, y_train)\n\ny_train_pred = model_lr.predict(X_train)\ny_test_pred = model_lr.predict(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","6043fc14":"model_knn = KNeighborsClassifier()\nmodel_knn.fit(X_train, y_train)\n\ny_train_pred = model_knn.predict(X_train)\ny_test_pred = model_knn.predict(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","4c304b49":"model_xgb = xgb.XGBClassifier(n_estimators=150, max_depth=2, l2_leaf_reg=10,\n                                      silent=True, random_state=21)\nmodel_xgb.fit(X_train, y_train)\n\ny_train_pred = model_xgb.predict(X_train)\ny_test_pred = model_xgb.predict(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","ed129df2":"model_lgbm = lgbm.LGBMClassifier(n_estimators=250, max_depth=3, l2_leaf_reg=10,\n                                      silent=True, random_state=21)\nmodel_lgbm.fit(X_train, y_train)\n\ny_train_pred = model_lgbm.predict(X_train)\ny_test_pred = model_lgbm.predict(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","1c739e29":"X = train_df_catb[CAT_MODEL_FEATURE_NAMES]\ny = train_df_catb[TARGET_NAME]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, test_size=0.30, random_state=21)\n\ndf_for_balancing = pd.concat([X_train, y_train], axis=1)\ndf_balanced = balance_df_by_target(df_for_balancing, TARGET_NAME)\n    \ndf_balanced[TARGET_NAME].value_counts()\n\nX_train = df_balanced.drop(columns=TARGET_NAME)\ny_train = df_balanced[TARGET_NAME]","08bd02dd":"X_train = X_train.astype({'Bankruptcies': 'int64'})\nX_train = X_train.astype({'Bankruptcies': 'category'})\nX_test = X_test.astype({'Bankruptcies': 'int64'})\nX_test = X_test.astype({'Bankruptcies': 'category'})\ntest_df_catb = test_df_catb.astype({'Bankruptcies': 'int64'})\ntest_df_catb = test_df_catb.astype({'Bankruptcies': 'category'})","95de0f6c":"model_catb = catb.CatBoostClassifier(n_estimators=1600, max_depth=4, l2_leaf_reg=10,\n                                      silent=True, random_state=21)\nmodel_catb.fit(X_train, y_train, cat_features=CAT_FEATURE_NAMES)\n\ny_train_pred = model_catb.predict(X_train)\ny_test_pred = model_catb.predict(X_test)\ny_test_pred_probs = model_catb.predict_proba(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","25e12b25":"params = {'n_estimators':[800, 900, 1000, 1100, 1200, 1300, 1500, 1600],\n         'max_depth':[2, 3, 4]}","9cb0ba2d":"cv = KFold(n_splits=3, random_state=21, shuffle=True)","a2e85392":"%%time\n\nrs = RandomizedSearchCV(model_catb, params, scoring='f1', cv=cv, n_jobs=-1)\nrs.fit(X_train, y_train, cat_features=CAT_FEATURE_NAMES)","64810a02":"rs.best_params_\n# {'n_estimators': 1600, 'max_depth': 4}","6275d702":"rs.best_score_\n# 0.6801351563682272","84b87fb9":"def show_learning_curve_plot(estimator, X, y, cv=3, n_jobs=-1, train_sizes=np.linspace(.1, 1.0, 5)):\n\n    train_sizes, train_scores, test_scores = learning_curve(estimator, X, y, \n                                                            cv=cv, \n                                                            scoring='f1',\n                                                            train_sizes=train_sizes, \n                                                            n_jobs=n_jobs)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n\n    plt.figure(figsize=(15,8))\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n             label=\"Cross-validation score\")\n\n    plt.title(f\"Learning curves ({type(estimator).__name__})\")\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")     \n    plt.legend(loc=\"best\")\n    plt.grid()\n    plt.show()","80c4f8de":"final_model = catb.CatBoostClassifier(n_estimators=1200, max_depth=4,\n                                      class_weights=[1, 3.5],\n                                      silent=True, random_state=21)\nshow_learning_curve_plot(model_catb, X_train, y_train)","960c6e6e":"def show_proba_calibration_plots(y_predicted_probs, y_true_labels):\n    preds_with_true_labels = np.array(list(zip(y_predicted_probs, y_true_labels)))\n\n    thresholds = []\n    precisions = []\n    recalls = []\n    f1_scores = []\n\n    for threshold in np.linspace(0.1, 0.9, 9):\n        thresholds.append(threshold)\n        precisions.append(precision_score(y_true_labels, list(map(int, y_predicted_probs > threshold))))\n        recalls.append(recall_score(y_true_labels, list(map(int, y_predicted_probs > threshold))))\n        f1_scores.append(f1_score(y_true_labels, list(map(int, y_predicted_probs > threshold))))\n\n    scores_table = pd.DataFrame({'f1':f1_scores,\n                                 'precision':precisions,\n                                 'recall':recalls,\n                                 'probability':thresholds}).sort_values('f1', ascending=False).round(3)\n  \n    figure = plt.figure(figsize = (15, 5))\n\n    plt1 = figure.add_subplot(121)\n    plt1.plot(thresholds, precisions, label='Precision', linewidth=4)\n    plt1.plot(thresholds, recalls, label='Recall', linewidth=4)\n    plt1.plot(thresholds, f1_scores, label='F1', linewidth=4)\n    plt1.set_ylabel('Scores')\n    plt1.set_xlabel('Probability threshold')\n    plt1.set_title('Probabilities threshold calibration')\n    plt1.legend(bbox_to_anchor=(0.25, 0.25))   \n    plt1.table(cellText = scores_table.values,\n               colLabels = scores_table.columns, \n               colLoc = 'center', cellLoc = 'center', loc = 'bottom', bbox = [0, -1.3, 1, 1])\n\n    plt2 = figure.add_subplot(122)\n    plt2.hist(preds_with_true_labels[preds_with_true_labels[:, 1] == 0][:, 0], \n              label='Another class', color='royalblue', alpha=1)\n    plt2.hist(preds_with_true_labels[preds_with_true_labels[:, 1] == 1][:, 0], \n              label='Main class', color='darkcyan', alpha=0.8)\n    plt2.set_ylabel('Number of examples')\n    plt2.set_xlabel('Probabilities')\n    plt2.set_title('Probability histogram')\n    plt2.legend(bbox_to_anchor=(1, 1))\n\n    plt.show()\n","b488143c":"show_proba_calibration_plots(y_test_pred_probs[:, 1], y_test)","50ea9425":"def show_feature_importances(feature_names, feature_importances, get_top=None):\n    feature_importances = pd.DataFrame({'feature': feature_names, 'importance': feature_importances})\n    feature_importances = feature_importances.sort_values('importance', ascending=False)\n       \n    plt.figure(figsize = (20, len(feature_importances) * 0.355))\n    \n    sns.barplot(feature_importances['importance'], feature_importances['feature'])\n    \n    plt.xlabel('Importance')\n    plt.title('Importance of features')\n    plt.show()\n    \n    if get_top is not None:\n        return feature_importances['feature'][:get_top].tolist()","40048433":"important_features_top = show_feature_importances(X_train.columns, model_catb.feature_importances_, get_top=15)\nimportant_features_top","cd071384":"CAT_FEATURE_NAMES_FINAL = ['Home Ownership', 'Years in current job', 'Purpose', 'Term'] # \u0423\u0431\u0440\u0430\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 \u043d\u0438\u0437\u043a\u0438\u043c \u0432\u0435\u0441\u043e\u043c","68b7fabb":"model_catb = catb.CatBoostClassifier(n_estimators=1500, max_depth=4, l2_leaf_reg=10,\n                                      silent=True, random_state=21)\nmodel_catb.fit(X_train[important_features_top], y_train, cat_features=CAT_FEATURE_NAMES_FINAL)\n\ny_train_pred = model_catb.predict(X_train[important_features_top])\nTHRESHOLD = 0.48 # \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0440\u043e\u0433\u0430 \u043e\u0442\u043d\u0435\u0441\u0435\u043d\u0438\u044f \u043a \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c\u0443 \u043a\u043b\u0430\u0441\u0441\u0443\ny_test_pred = np.where(model_catb.predict_proba(X_test[important_features_top])[:,1] > THRESHOLD, 1, 0)\ny_test_pred_probs = model_catb.predict_proba(X_test[important_features_top])\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","d8e431ea":"y_train_pred = model_catb.predict(X_train[important_features_top])\nTHRESHOLD = 0.47 # \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0440\u043e\u0433\u0430 \u043e\u0442\u043d\u0435\u0441\u0435\u043d\u0438\u044f \u043a \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c\u0443 \u043a\u043b\u0430\u0441\u0441\u0443\ny_test_pred = np.where(model_catb.predict_proba(X_test[important_features_top])[:,1] > THRESHOLD, 1, 0)\ny_test_pred_probs = model_catb.predict_proba(X_test[important_features_top])\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","d385d75d":"THRESHOLD = 0.47\ny_test_df_pred = np.where(model_catb.predict_proba(test_df_catb[important_features_top])[:,1] > THRESHOLD, 1, 0)\npreds_final = pd.DataFrame()\npreds_final = pd.DataFrame({'Id': np.arange(0,y_test_df_pred.shape[0]), 'Credit Default': y_test_df_pred})\npreds_final.head(10)\n\nsubmit['Credit Default'] = preds_final['Credit Default']\nsubmit.to_csv('submit.csv', index=False)","501b00f7":"preds_final","3d0d682e":"**\u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439**","0fc416f7":"**\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c**","0651081f":"**\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441 \u0431\u0430\u0437\u043e\u0432\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438**","275bd941":"**\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445**","cac42923":"**\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 dummies \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445**","82833c81":"**\u041e\u0431\u0437\u043e\u0440 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f**","99c0017c":"**\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432**","846a0aee":"**\u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u0433\u0440\u0443\u043f\u043f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","bd71f00d":"**\u041f\u043e\u0434\u0431\u043e\u0440 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u043a\u0440\u0438\u0432\u0430\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f**","ad91a31c":"**\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435**","aaf2b679":"**\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0430 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439**","594fd569":"**\u0412\u044b\u0431\u043e\u0440 \u043f\u043e\u0440\u043e\u0433\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430**","645c7459":"**\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0433\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439. \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434\u044b.**","69fd5d1f":"**\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432**","6a38b558":"**\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439**","e8b13bcd":"\u041d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 0 \u043f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442 \u043d\u0430\u0434 1.","9c930de9":"**\u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test**","7fd52e61":"**\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0442\u0447\u0451\u0442\u0430 \u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0438**","15871aea":"**\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445**","b91a7326":"*LightGBM*","c8fb8f2f":"**\u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432**","36103482":"**k \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439**","fecbb0e0":"**\u041f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438**\n\nIn this competition your task will be to predict the Credit Default in test.csv. You will be given two datasets: train.csv (contains all features and Credit Default) and test.csv (only features).\n\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u044d\u0442\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 - \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0444\u0430\u043a\u0442 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 test.csv. \u0412\u0430\u043c \u0431\u0443\u0434\u0443\u0442 \u0434\u0430\u043d\u044b \u0434\u0432\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: train.csv (\u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0444\u0430\u043a\u0442 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432) \u0438 test.csv (\u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438).\n\nData fields\n\n*     Home Ownership - \u0434\u043e\u043c\u043e\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435\n*     Annual Income - \u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0445\u043e\u0434\n*     Years in current job - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b\n*     Tax Liens - \u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0435 \u043e\u0431\u0440\u0435\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n*     Number of Open Accounts - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\n*     Years of Credit History - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438\n*     Maximum Open Credit - \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442 (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u0431\u044b\u043b\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443)\n*     Number of Credit Problems - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u043c\n*     Months since last delinquent - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n*     Bankruptcies - \u0431\u0430\u043d\u043a\u0440\u043e\u0442\u0441\u0442\u0432\u0430\n*     Purpose - \u0446\u0435\u043b\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n*     Term - \u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n*     Current Loan Amount - \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 (\u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0435\u0449\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u0432\u044b\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0443)\n*     Current Credit Balance - \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 (\u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u0435\u0442 \u0442\u0440\u0430\u0442\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442 \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430)\n*     Monthly Debt - \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u0434\u043e\u043b\u0433\n*     Credit Score - \u0431\u0430\u043b\u043b\u044b \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\n*     Credit Default - \u0444\u0430\u043a\u0442 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 (0 - \u043f\u043e\u0433\u0430\u0448\u0435\u043d \u0432\u043e\u0432\u0440\u0435\u043c\u044f, 1 - \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0430)\n","ff0c07e2":"*XGBoost*","54cd8573":"**\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f**","3dfb38f7":"**\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","5dfaf14b":"**\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432**","c0892adf":"**\u041f\u043e\u0434\u0431\u043e\u0440 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u043a\u0440\u0438\u0432\u0430\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f**","d154408b":"**\u0411\u0443\u0441\u0442\u0438\u043d\u0433\u043e\u0432\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b**","b502b060":"**\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","e19255e2":"*CatBoost*"}}