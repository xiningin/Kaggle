{"cell_type":{"b89ec901":"code","51809267":"code","d91013ea":"code","ce1993e0":"code","3dce5266":"code","7008ab67":"code","15d666c1":"code","c9d3a593":"code","5f3336a9":"code","5f60a581":"code","de6c324a":"code","cf54c5b9":"code","c1e6a776":"code","fd5c7a48":"code","9c3a16fb":"code","556fe1c2":"code","ac54c269":"code","3cf08122":"code","383dbcb7":"code","b85d9f3a":"code","dae3ebad":"code","54b81728":"code","e45900aa":"code","5cb5aeb6":"code","c47e6066":"code","ac33fe8a":"code","7c3cc6ff":"code","4a82d7c2":"code","8de2bff4":"code","01b870a9":"code","5796948e":"code","7ef346f0":"code","dbcf1180":"code","307704fa":"code","ec96284d":"code","c67c660f":"code","0adf55f8":"code","5b621ca1":"code","7155d579":"code","e19c4b04":"code","4e48b553":"code","39279735":"code","63cd02f5":"code","ef5bead7":"code","353dd8c0":"code","07491380":"code","640322ef":"code","0d647905":"code","a02a40d6":"markdown","74e311f4":"markdown"},"source":{"b89ec901":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","51809267":"#importing the train data set and checking\ntrain=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain.head()","d91013ea":"\n#to see the rows and columns\ntrain.shape","ce1993e0":"#to see the info \ntrain.info()","3dce5266":"train = train.drop('Cabin', axis=1)","7008ab67":"#to see the \ntrain.describe()","15d666c1":"train.isnull().sum()","c9d3a593":"#cleaning the null values out of the selection for classification\ntrain=train[train['Age'].notnull()]\ntrain=train[train['Embarked'].notnull()]","5f3336a9":"#Checking the null values in the train data set\ntrain.isnull().sum()","5f60a581":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n#Visualising the count of surviving passengers based\n\ndef plotcountgraph(var):\n    \n    sns.set(font_scale=1.25)\n    plt.figure(figsize=(10, 5))\n    ax = sns.countplot(x=var, hue='Survived', data=train,  palette=\"viridis\")\n    plt.setp(ax.get_xticklabels(), rotation=0)","de6c324a":"var=['Sex','Pclass','Embarked','SibSp','Parch']\nfor i in var:\n    plotcountgraph(i)","cf54c5b9":"#Finding the correlation between the numeric variables\nplt.figure(figsize = (20,10))\nsns.heatmap(train.corr(),annot = True)\nplt.show()","c1e6a776":"#removing Parch because of low correlation with survived (target variable)\ntrain = train.drop('Parch', axis=1)\n\n#removing ticket and Parch as it is not required for further analysis\ntrain = train.drop('Ticket', axis=1)\ntrain = train.drop('Name', axis=1)","fd5c7a48":"#importing the test data set and checking\ntest=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest.head()","9c3a16fb":"#converting  the categorical variables to numeric as required for model building\n\ndummy_values = pd.get_dummies(train[['Sex','Embarked']], drop_first=True)\n\n# Adding the results to the master dataframe\ntrain = pd.concat([train, dummy_values], axis=1)\n\ndummy_values = pd.get_dummies(test[['Sex','Embarked']], drop_first=True)\n\n# Concatenating the results to the master dataframe\ntest = pd.concat([test, dummy_values], axis=1)\n","556fe1c2":"#since the dummies are already present\ntrain=train.drop(['Sex','Embarked'],1)\ntest=test.drop(['Sex','Embarked'],1)\n","ac54c269":"train.head()","3cf08122":"#dropping the target variable for training the model\nx_train=train.drop('Survived', axis=1)\n","383dbcb7":"#dataset for the target variable for training the model\ny_train=train['Survived']","b85d9f3a":"#Creating the test data set x_test \nx_test=test\n","dae3ebad":"#    Number of females survived is more when compared to male\n#    Lower the Pclass higher is the rate of survival\n#    Survival rate of people embarked from Southampton is higher \n#    Survival rate of people having no siblings is higher\n#    Survival rate of people having no parents \/ children aboard the Titanic is higher","54b81728":"#Running the model using GLM technique\nimport statsmodels.api as sm\nlogm1 = sm.GLM(y_train,(sm.add_constant(x_train)), family = sm.families.Binomial())\nlogm1.fit().summary()","e45900aa":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()","5cb5aeb6":"from sklearn.feature_selection import RFE\nrfe = RFE(logreg,6)             # running RFE with 13 variables as output\nrfe = rfe.fit(x_train, y_train)","c47e6066":"rfe.support_","ac33fe8a":"list(zip(x_train.columns, rfe.support_, rfe.ranking_))","7c3cc6ff":"col = x_train.columns[rfe.support_]\nx_train.columns[~rfe.support_]","4a82d7c2":"x_train_sm = sm.add_constant(x_train[col])\nlogm2 = sm.GLM(y_train,x_train_sm, family = sm.families.Binomial())\nresult = logm2.fit()\n\nresult.summary()","8de2bff4":"# Getting the predicted values on the train set\ny_train_pred = result.predict(x_train_sm)\ny_train_pred[:10]","01b870a9":"y_train_pred = y_train_pred.values.reshape(-1)\ny_train_pred[:10]","5796948e":"y_train_pred_final = pd.DataFrame({'Survived':y_train.values, 'Survived_probability':y_train_pred})\ny_train_pred_final['PassengerId'] = y_train.index\ny_train_pred_final.head()","7ef346f0":"y_train_pred_final['predicted'] = y_train_pred_final.Survived_prob.map(lambda x: 1 if x > 0.54 else 0)\ny_train_pred_final","dbcf1180":"from sklearn import metrics\n# Confusion matrix \n\nconfusion = metrics.confusion_matrix(y_train_pred_final.Survived, y_train_pred_final.predicted )\nprint(confusion)","307704fa":"# Let's check the overall accuracy.\nprint(metrics.accuracy_score(y_train_pred_final.Survived, y_train_pred_final.predicted))","ec96284d":"x_test = x_test[col]\nx_test.head()","c67c660f":"x_test_sm = sm.add_constant(x_test)","0adf55f8":"#predictions on the test set\ny_test_pred = res.predict(x_test_sm)","5b621ca1":"y_test_pred[:10]","7155d579":"#Converting y_pred to a dataframe which is an array\ny_pred_1 = pd.DataFrame(y_test_pred)\ny_pred_1.head()","e19c4b04":"# Removing index for both dataframes to append them side by side \ny_pred_1.reset_index(drop=True, inplace=True)\n\n#y_test_df.reset_index(drop=True, inplace=True)","4e48b553":"# creating a final \ny_pred_final = pd.concat([ y_pred_1],axis=1)","39279735":"y_pred_final.head()","63cd02f5":"# Re-arranging the columns \ny_pred_final= y_pred_final.rename(columns={ 0 : 'Survived_Prob'})","ef5bead7":"y_pred_final.head()","353dd8c0":"y_pred_final['Survived'] = y_pred_final.Survived_Prob.map(lambda x: 1 if x > 0.54 else 0)","07491380":"y_pred_final.head()","640322ef":"#creating the submission.csv for the submission \n\noutput = pd.DataFrame({'PassengerId': test.PassengerId , 'Survived': y_pred_final.Survived})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","0d647905":"output = pd.DataFrame({'PassengerId': test.PassengerId , 'Survived': y_pred_final.Survived_Prob})\noutput.to_csv('submission_Probability.csv', index=False)","a02a40d6":"Creating new column 'predicted' with 1 if Survived_Prob > 0.5 else 0","74e311f4":"Assessing the model with StatsModels"}}