{"cell_type":{"e4fe50bb":"code","e87bc652":"code","35646906":"code","c8850c16":"code","f6763e02":"code","47d0512c":"code","ced57d66":"code","6cb0d039":"code","eec662f8":"code","b08fc815":"code","01a38c90":"code","b3f205b0":"code","a80126c9":"code","4e43e6d1":"code","1d4f803c":"markdown","577733b7":"markdown","a6676b06":"markdown"},"source":{"e4fe50bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e87bc652":"import datetime as dt\ndt_string = dt.datetime.now(dt.timezone.utc).strftime(\"%d\/%m\/%Y %H:%M:%S %z\")\nprint(f\"Kernel last updated: {dt_string}\")","35646906":"cases = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ncases.head()","c8850c16":"# create dayly cases data by country\ngrp = cases.groupby(['ObservationDate', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].sum()\ngrp = grp.reset_index()\ngrp.head()","f6763e02":"grp.rename(columns={'ObservationDate':'Date', 'Country\/Region':'Country'}, inplace=True)\ngrp['Date'] = pd.to_datetime(grp['Date'], format='%m\/%d\/%Y')\n\ngrp['Confirmed'] = grp['Confirmed'].astype(np.int64)\ngrp['Deaths'] = grp['Deaths'].astype(np.int64)\ngrp['Recovered'] = grp['Recovered'].astype(np.int64)\n\ngrp['Active'] = grp['Confirmed'] - grp['Recovered'] - grp['Deaths']\ngrp.head()","47d0512c":"# pick up Japanese data\ndf_japan = grp[grp['Country'] == 'Japan']\ndf_japan.reset_index(inplace=True, drop=True)\ndf_japan.head()","ced57d66":"# plot Confirmed in Japan\nfig, ax = plt.subplots(figsize=(15, 8))\nplt.plot(df_japan['Date'], df_japan['Confirmed'])\nax.grid(which='major', axis='y', linestyle='-')\nax.grid(which='major', axis='x', linestyle='-')\nax.set_xlabel(\"Date\")\nax.set_ylabel(\"Confirmed\")\nax.set_title(\"Confirmed COVID-19 cases in Japan\")\nplt.show()","6cb0d039":"# get data of since confirmed count was over 100\ndf_japan = df_japan[df_japan['Confirmed']>=100]\ndf_japan.reset_index(inplace=True, drop=True)\ndf_japan.head()","eec662f8":"# plot number of Confirmed in Japan\nfig, ax = plt.subplots(figsize=(15, 8))\nplt.plot(df_japan.index, df_japan['Confirmed'], label=f'Confirmed ({df_japan[\"Confirmed\"].max()})')\n\nax.set_yscale('log')  # axis y 'log' scale\nax.grid(which='major', axis='y', linestyle='-')\nax.grid(which='major', axis='x', linestyle='-')\n\nax.set_xlabel(\"Number of days since confirmed count was over 100\")\nax.set_ylabel(\"Confirmed\")\nax.set_title(\"Confirmed COVID-19 cases in Japan\")\n\nplt.legend(loc='best')\nplt.show()","b08fc815":"# get data of last date (sorted by 'Confirmed')\ndf_lastDate = grp[grp['Date']==grp['Date'].max()].sort_values('Confirmed', ascending=False)\ndf_lastDate.head(10)","01a38c90":"# TOP10 countries\ntop10Countries = df_lastDate['Country'][:10].values\ntop10Countries","b3f205b0":"# Plor chart (since confirmed count was over 100)\ndef PlotCountryChart(country, color=None, lineStyle=None):\n    df_country = grp[grp['Country'] == country]\n    df_country = df_country[df_country['Confirmed']>=100]\n    df_country.reset_index(inplace=True, drop=True)\n    plt.plot(df_country.index, df_country['Confirmed'], \n             color=color, linestyle=lineStyle, \n             label=f'{country} ({df_country[\"Confirmed\"].max()})')\n","a80126c9":"# japan declares state of emergency\ndf_jpn = grp[grp['Country'] == 'Japan'].reset_index(drop=True)\ndf_jpn = df_jpn[df_jpn['Confirmed']>=100]\ndf_jpn.reset_index(inplace=True, drop=True)\n\ndf_jpn['Point'] = 0\ndf_jpn.loc[df_jpn['Date']=='2020-04-07', 'Point'] = df_jpn.loc[df_jpn['Date']=='2020-04-07']['Confirmed']  # date of declares state of emergency\ndf_jpn.loc[df_jpn['Date']=='2020-04-21', 'Point'] = df_jpn.loc[df_jpn['Date']=='2020-04-21']['Confirmed']  # after 2 weeks\ndf_jpn.tail()","4e43e6d1":"# draw \u2019Confirmed\u2019 count in top10 countries and Japan \nfig, ax = plt.subplots(figsize=(20, 10))\nfor country in top10Countries:\n    PlotCountryChart(country)\n\n# add japan data\ncountry = 'Japan'\nPlotCountryChart('Japan', 'r', '--')\n\nplt.plot(df_jpn.index, df_jpn['Point'], \n         color='pink', linestyle=':', \n         label='japan declares state of emergency and after 2weeks')\n\n\n# draw line of cases double every n days\nplt.plot([0, 140], [100, 100 * 2**(140\/15)], 'b:')\nplt.plot([0, 140], [100, 100 * 2**(140\/10)], 'b:')\nplt.plot([0, 115], [100, 100 * 2**(115\/7)], 'g:')\nplt.plot([0, 83], [100, 100 * 2**(83\/5)], 'y:')\nplt.plot([0, 50], [100, 100 * 2**(50\/3)], 'r:')\nplt.plot([0, 33], [100, 100 * 2**(33\/2)], 'r:')\n\nfig.text(0.8, 0.55, 'cases double every 15 days', size = 10, color = \"b\")\nfig.text(0.8, 0.75, 'cases double every 10 days', size = 10, color = \"b\")\nfig.text(0.7, 0.85, 'cases double every 7 days', size = 10, color = \"g\")\nfig.text(0.5, 0.85, 'cases double every 5 days', size = 10, color = \"y\")\nfig.text(0.35, 0.85, 'cases double every 3 days', size = 10, color = \"r\")\nfig.text(0.25, 0.85, 'cases double every 2 days', size = 10, color = \"r\")\n\n\nax.set_yscale('log')  # axis y 'log' scale\nax.grid(which='major', axis='y', linestyle='-')\nax.grid(which='major', axis='x', linestyle='-')\n\nax.set_xlabel(\"Number of days since confirmed count over 100\")\nax.set_ylabel(\"Confirmed\")\nax.set_title(\"Confirmed COVID-19 cases in top10 countries and Japan\")\n\nplt.legend(loc='best')\nplt.show()","1d4f803c":"## Check data using Japanese data","577733b7":"## Read 'covid_19_data.csv'","a6676b06":"## Draw TOP10 Chart"}}