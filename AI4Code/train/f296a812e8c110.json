{"cell_type":{"915c330e":"code","b8f2e05c":"code","40735861":"code","fe1cbc28":"code","38a7b671":"code","61abac20":"code","7c9af1f6":"code","c85c5148":"code","b4f46dbf":"code","1b6b0f61":"code","89433219":"code","20d1388f":"code","fdf849f7":"code","2342223c":"code","f8952eb6":"code","79ca8e74":"code","360adad8":"code","705b9543":"code","7d85a9fb":"code","d34c65fe":"code","d2a4ddd1":"code","86d7fa82":"code","d8066d04":"code","3dff00d7":"code","36cecdbf":"code","dc675894":"code","ed8c3370":"code","7171f3a4":"code","fc032e14":"code","463b6c68":"code","a601ff20":"code","bb0ad269":"markdown","5e81d340":"markdown","611d4c8d":"markdown","8cc6ed25":"markdown","0b3c2fbf":"markdown","98fe33ca":"markdown","4c9c52b6":"markdown","1faee5cc":"markdown","fbd303a2":"markdown","bc9baa2f":"markdown","05c73dcb":"markdown","6157ba0c":"markdown","84d8e667":"markdown","0bbbfbcb":"markdown","24ccbaff":"markdown"},"source":{"915c330e":"link=\"\/kaggle\/input\/car-or-truck\/\"","b8f2e05c":"# for data processing\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport numpy as np\nimport pandas as pd\nimport os\n\n\n# for data pipeline --------------------\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import*\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import*\nfrom skimage import data, color\nfrom skimage.transform import rescale, resize, downscale_local_mean\n\n#deep learning libraries\n\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential\n\nfrom tensorflow.keras.layers import Dense,Conv2D,MaxPool2D,Flatten,Dropout,BatchNormalization,GlobalAveragePooling2D\nfrom tensorflow.keras.optimizers import Adam\nprint('version of tensorflow',tf.__version__)\n\n# for confusion matrix plotting\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import multilabel_confusion_matrix,confusion_matrix","40735861":"os.listdir(link+'train\/')","fe1cbc28":"os.listdir(link+'valid\/')","38a7b671":"for x in [link+'train\/',link+'valid\/']:\n  for l in ['Truck\/','Car\/']:\n    for ll in os.listdir(x+l):\n      link=x+l+ll\n      img=mpimg.imread(link)\n      plt.title(l[:-1])\n      plt.imshow(img)\n      plt.show()\n      break\n    ","61abac20":"x='\/kaggle\/input\/car-or-truck\/train\/'\narr=[]\ndf=[]\nfor l in ['Truck\/','Car\/']:\n  for ll in os.listdir(x+l):\n    link=x+l+ll\n    img=mpimg.imread(link)\n    if l== 'Truck\/':\n      arr.append(int(1))\n    else :\n      arr.append(int(0))\n    img=resize(img,(64,64),anti_aliasing=True)  # resizes the images in 64x64 shape\n    img=img.reshape(4096*3)    # flattens the image to append in the array\n    df.append(img)\ndf=pd.DataFrame(df)\narr=pd.DataFrame({'label':arr})     \n\ndf=pd.concat([arr,df],axis=1)      # creates the final dataframe\ndf.head()","7c9af1f6":"train=df","c85c5148":"x='\/kaggle\/input\/car-or-truck\/valid\/'\narr=[]\ndf=[]\nfor l in ['Truck\/','Car\/']:\n  for ll in os.listdir(x+l):\n    link=x+l+ll\n    img=mpimg.imread(link)\n    if l== 'Truck\/':\n      arr.append(int(1))\n    else :\n      arr.append(int(0))\n    img=resize(img,(64,64),anti_aliasing=True)\n    img=img.reshape(4096*3)\n    df.append(img)\ndf=pd.DataFrame(df)\narr=pd.DataFrame({'label':arr})\n\ndf=pd.concat([arr,df],axis=1)\ndf.head()","b4f46dbf":"test=df","1b6b0f61":"train.shape","89433219":"test.shape","20d1388f":"X_train=train.drop('label',1)\ny_train=train['label']","fdf849f7":"X_test=test.drop('label',1)\ny_test=test['label']\n\nX_test,X_val,y_test,y_val=train_test_split(X_test,y_test,random_state=0,test_size=0.5,stratify=y_test)    \n\n# splits the dataframe into test and validation for checking overfitting\/ underfitting nature of model\n\nX_test.shape,X_val.shape,y_test.shape,y_val.shape","2342223c":"y_train.value_counts()","f8952eb6":"y_val.value_counts()","79ca8e74":"y_test.value_counts()","360adad8":"X_train=X_train.to_numpy()\nX_val=X_val.to_numpy()\nX_test=X_test.to_numpy()\ny_train=y_train.to_numpy()\ny_val=y_val.to_numpy()\ny_test=y_test.to_numpy()","705b9543":"X_train=X_train.reshape(5117,64,64,3)\nX_val=X_val.reshape(2526,64,64,3)\nX_test=X_test.reshape(2525,64,64,3)   # changing them into 4d to feed into the model.\ny_train=y_train.reshape(5117,1)\ny_val=y_val.reshape(2526,1)\ny_test=y_test.reshape(2525,1)","7d85a9fb":"model=Sequential()\nmodel.add(Conv2D(32,(3,3),activation='relu',input_shape=X_train[0].shape))\nmodel.add(Conv2D(32,(3,3),activation='relu'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64,(3,3),activation='relu'))\nmodel.add(Conv2D(64,(3,3),activation='relu'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1,activation='sigmoid'))","d34c65fe":"model.summary()","d2a4ddd1":"model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","86d7fa82":"hist=model.fit(X_train,y_train,batch_size=20,epochs=10,verbose=1,validation_data=(X_val,y_val))","d8066d04":"plt.title('Model Accuracy')\nplt.plot(hist.history['accuracy'],label='train')\nplt.plot(hist.history['val_accuracy'],label='validation')\nplt.legend()\nplt.show()\nplt.title('Model Loss')\nplt.plot(hist.history['loss'],label='train')\nplt.plot(hist.history['val_loss'],label='validation')\nplt.legend()\nplt.show()","3dff00d7":"pred=model.predict(X_test)","36cecdbf":"for i in pred:\n  print(i)\n  print(type(i))\n  break","dc675894":"y_pred=[]\nfor i in pred:\n  if i>=0.5:\n    y_pred.append(int(1))\n  else:\n    y_pred.append(int(0))","ed8c3370":"print('test data accuracy : ',accuracy_score(y_test,y_pred))","7171f3a4":"decoder=['Car','Truck']","fc032e14":"for i in range(10):\n  plt.title('predicted class : '+decoder[y_pred[i*200]])\n  plt.imshow(X_test[i*200].reshape(64,64,3))\n  plt.show()","463b6c68":"train_mat=confusion_matrix(y_test,y_pred)\nplot_confusion_matrix(train_mat,figsize=(3,3),colorbar=True)","a601ff20":"x=0\ny=0\nfor i in range(len(y_pred)):\n  if y_pred[i]==1 and y_test[i]==0 and x==0:\n    plt.title('was CAR , predicted TRUCK')\n    plt.imshow(X_test[i].reshape(64,64,3))\n    plt.show()\n    x+=1\n  elif y_pred[i]==0 and y_test[i]==1 and y==0:\n    plt.title('was TRUCK , predicted CAR')\n    plt.imshow(X_test[i].reshape(64,64,3))\n    plt.show()\n    y+=1\n  elif x>0 and y>0:\n    break\n  ","bb0ad269":"# Primary data visualization:\n---","5e81d340":"Dataframe Generator :\n---","611d4c8d":"Model Fitting :\n---\n\n1. Batch size : 20\n2. Epoch : 10\n3. Optimizer : Adam\n4. Loss function : BCE-Loss\n5. Metrics : Accuracy\n7. Validation set taken : YES","8cc6ed25":"# Final visualizations :\n---\n1. checking the accuracy and the loss curve to find model's preformance.","0b3c2fbf":"As the final output is a probablity so we need to categorize it.","98fe33ca":"# Trainable data processing :\n---","4c9c52b6":"Checking the wrong predicted ones and their quality.","1faee5cc":"# Confusion Matrix :\n---","fbd303a2":"# Libraries : \n---\nAs this is a deep learning binary classification task we need some data rocessing libraries , and the deep learning framworks and the confusion matrix plotter libraries.","bc9baa2f":"## HURRAH !\n---\nWe've completed the binary classification task with a very good accuracy.\n\nYou can visit my other works at [github](https:\/\/github.com\/sagnik1511) or in [kaggle](https:\/\/kaggle.com\/sahnik1511).\n\nDo **UPVOTE** in kaggle and **STAR** in github my projects to keep me going :)","05c73dcb":"### Checking with the prediction with the actual pictures.","6157ba0c":"we can see the car and trucks are quite same in all the dataframes and this can help us gather better model performance.","84d8e667":"# Model Generation and Compiling :\n---","0bbbfbcb":"we can see that the model is well tuned , the wrong predicted images are tougher to predict . So we can say the model works optimally.","24ccbaff":"Model looks well tuned so we can move further."}}