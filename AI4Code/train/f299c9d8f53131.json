{"cell_type":{"8bd0fea6":"code","cbcdda70":"code","e94a9efa":"code","58df776d":"code","5df4b69b":"code","2e813a0c":"code","13883634":"code","ea30584c":"code","84616732":"code","70d51493":"markdown","0645310f":"markdown","156c539b":"markdown","b6e0eade":"markdown","998286eb":"markdown","402bc5c3":"markdown","fd9ed8e0":"markdown","e7b64dd4":"markdown","dc6ff1cd":"markdown"},"source":{"8bd0fea6":"import numpy as np\nimport pandas as pd\nfrom tqdm import tqdm","cbcdda70":"train_dtypes_dict = {\n    \"row_id\": \"int64\",\n    #\"timestamp\": \"int64\",\n    \"user_id\": \"int32\",\n    \"content_id\": \"int16\",\n    \"content_type_id\": \"int8\",\n    #\"task_container_id\": \"int16\",\n    #\"user_answer\": \"int8\",\n    \"answered_correctly\": \"int8\",\n    #\"prior_question_elapsed_time\": \"float32\", \n    #\"prior_question_had_explanation\": \"boolean\"\n}\n\ntrain_data = pd.read_csv(\"..\/input\/riiid-test-answer-prediction\/train.csv\",\n                         nrows=10**5,\n                         usecols = train_dtypes_dict.keys(),\n                         dtype=train_dtypes_dict,\n                         #index_col = 0,\n                        )\ntrain_data = train_data[train_data.content_type_id == 0]","e94a9efa":"question_dtype = {\n    'question_id':'int16',\n    'tags':'object'\n}\nquestions_data = pd.read_csv('..\/input\/riiid-test-answer-prediction\/questions.csv',\n                             usecols = question_dtype.keys(), \n                             dtype = question_dtype)","58df776d":"print(questions_data.loc[questions_data.tags.isnull()])\nquestions_data.tags.fillna('92',inplace=True)","5df4b69b":"tags_set = set()\nprint(len(questions_data))\nfor i in range(len(questions_data)):\n    tags_set = tags_set.union(questions_data.tags[i].split())\nprint(tags_set)\nprint(len(tags_set))","2e813a0c":"def gen_vec(row):\n    row['vec'] = np.zeros(188)\n    index_list = row.tags.split()\n    for index_ in index_list:\n        row.vec[int(index_)] = 1.0\n    return row\n\nquestions_data = questions_data.apply(gen_vec, axis='columns')\nquestions_data.head()","13883634":"def cal_vec(train_row,ele_dict,num_dict,q_data=questions_data):\n    num_dict[train_row.user_id] += q_data.vec[train_row.content_id]\n    ele_dict[train_row.user_id] += q_data.vec[train_row.content_id] * train_row.answered_correctly\n    \nuser_ele_dict = dict()\nuser_num_dict = dict()\nques_ele_vec = np.zeros(188)\nques_num_vec = np.zeros(188)\n\nfor index, row in tqdm(train_data.iterrows()):\n    ques_ele_vec += questions_data.vec[row.content_id] * row.answered_correctly\n    ques_num_vec += questions_data.vec[row.content_id]\n    if row.user_id in user_ele_dict.keys():\n        cal_vec(row,user_ele_dict,user_num_dict)\n    else:\n        user_ele_dict[row.user_id] = np.zeros(188)\n        user_num_dict[row.user_id] = np.zeros(188)\n        cal_vec(row,user_ele_dict,user_num_dict)","ea30584c":"import pickle\nwith open('..\/input\/pretrained-for-riiid\/user_ele_dict.pkl', 'rb') as f:\n    user_ele_dict = pickle.load(f)\n\nwith open('..\/input\/pretrained-for-riiid\/user_num_dict.pkl', 'rb') as f:\n    user_num_dict = pickle.load(f)\n\nwith open('..\/input\/pretrained-for-riiid\/ques_ele_vec.pkl', 'rb') as f:\n    ques_ele_vec = pickle.load(f)\n\nwith open('..\/input\/pretrained-for-riiid\/ques_num_vec.pkl', 'rb') as f:\n    ques_num_vec = pickle.load(f)  ","84616732":"print(user_ele_dict[115])#user_id=115\nprint(user_num_dict[115])\nprint(ques_ele_vec)\nprint(ques_num_vec)","70d51493":"There are 188 tags. Creating a 188-dimension vector to represent a question.","0645310f":"Loading train.csv","156c539b":"In this notebook, I will generate four objects to represent each user's performance on different tags, and all-user's performance on different tags.","b6e0eade":"There is a question without a tag. Fill a tag if you want.","998286eb":"How many questions? How many tags?","402bc5c3":"Check them out.","fd9ed8e0":"We can get one user's performance on different tags. And all-user's performance on different tags.\nSo I create four objects below:\n1. user_ele_dict is a dictionary. Its items are users with their sums of correctly answered counts on tags.\n2. user_num_dict is a dictionary. Its items are users with their sums of answered counts on tags.\n3. ques_ele_vec is a vector. It is sums of all-user's correctly answered counts on tags.\n4. ques_num_vec is a vector. It is sums of all-user's answered counts on tags.","e7b64dd4":"The process over the whole train.csv will take hours. So I upload my result in \"pretrained-for-riiid\" folder in case you want to use.","dc6ff1cd":"Loading questions.csv"}}