{"cell_type":{"4d1a823f":"code","7415d56e":"code","35062534":"code","e64f6398":"code","f3825678":"code","8e1c4797":"code","78fdac52":"code","9e39a2af":"code","927fe770":"code","752655d4":"code","beb0f306":"code","2fb89316":"code","234b88c3":"code","d6149506":"code","4f51346c":"code","12fb0ed6":"code","ad5d198d":"code","fbf9e1b4":"code","6bab95ed":"code","733fd756":"code","ea79822a":"code","a46fd1eb":"code","593da3a3":"code","38a198c7":"code","5112661e":"code","72402bfb":"code","f9f4e65f":"code","65070844":"code","512aa549":"code","5d117970":"code","223d502d":"code","b368874b":"code","d8f76f41":"code","ff8bf3c8":"code","0a9c0c98":"code","34b7883e":"code","cf5b2eac":"code","2d798778":"code","922a9c2c":"code","941adf3f":"code","e2a636fb":"code","8ce3ebeb":"code","2fe3fa6f":"code","9aafec54":"code","1c19fdfc":"code","eaec7b69":"code","38055f09":"code","131ab5af":"code","6275398a":"code","c7e44621":"code","32d35bf0":"code","d9081242":"code","f2be59f4":"code","b9b37b9f":"code","c80f5713":"code","597efb9a":"markdown","51ff1cc4":"markdown","b8e91eca":"markdown","fd39563a":"markdown","45062375":"markdown","62238c03":"markdown","639cffe4":"markdown","d7670376":"markdown","f696495e":"markdown","d21293ee":"markdown","ddbe3b99":"markdown","e5798d2a":"markdown","23b795ab":"markdown","578afc4b":"markdown","25d4f8eb":"markdown","5dd35e3d":"markdown","24050918":"markdown","04de42de":"markdown","08cec3c2":"markdown","b7c64aab":"markdown","50c799fa":"markdown","b5d9cde3":"markdown","767731ce":"markdown","880ff98a":"markdown","6910db6d":"markdown","2571ace5":"markdown","77500f41":"markdown","23348e55":"markdown","30593ac2":"markdown","5c594513":"markdown","b4742efa":"markdown","cb256456":"markdown","bbf0bc2f":"markdown","8fa5d246":"markdown","a3d73234":"markdown","d7140a7e":"markdown","1c073d27":"markdown","39bd538e":"markdown","71bb222d":"markdown","4c2a90a5":"markdown","7ec9326f":"markdown","ca685655":"markdown","6f9402f3":"markdown","03db61c3":"markdown","601ef5e4":"markdown","ef7dd49e":"markdown"},"source":{"4d1a823f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7415d56e":"import pandas as pd # th\u01b0 vi\u1ec7n l\u00e0m vi\u1ec7c v\u1edbi b\u1ea3ng\nimport numpy as np # th\u01b0 vi\u1ec7n t\u00ednh to\u00e1n tr\u00ean ma tr\u1eadn s\u1ed1 \nfrom collections import defaultdict # dictionary c\u00f3 gi\u00e1 tr\u1ecb default\nfrom collections import Counter # h\u00e0m \u0111\u1ebfm t\u1ea1o th\u00e0nh dictionary\nimport matplotlib.pyplot as plt # th\u01b0 vi\u1ec7n v\u1ebd bi\u1ec3u \u0111\u1ed3 matplotlib\nplt.style.use('ggplot') # ch\u1ec9nh theme cho bi\u1ec3u \u0111\u1ed3\nimport seaborn as sns # th\u01b0 vi\u1ec7n v\u1ebd bi\u1ec3u \u0111\u1ed3, \u0111\u1eb9p h\u01a1n matplotlib","35062534":"figsize = (15, 7)","e64f6398":"df = pd.read_csv('\/kaggle\/input\/pokemon-dataset-with-team-combat\/pokemon.csv').drop('#', axis=1)\ndf.head()","f3825678":"df['Total'] = df['HP'] + df['Attack'] + df['Defense'] + df['Sp. Atk'] + df['Sp. Def'] + df['Speed']","8e1c4797":"df.info()","78fdac52":"df = df[~df.Name.isna()]","9e39a2af":"df['Type 2'].fillna('', inplace=True)","927fe770":"df.info()","752655d4":"df[df['Name'].str.contains('Mega')]","beb0f306":"df['Name'] = df['Name'].str.replace('.*(?=Mega)', '')","2fb89316":"df[df['Name'].str.contains('Mega')]","234b88c3":"df.describe()","d6149506":"fig, ax = plt.subplots(figsize=figsize)\nsns.boxplot(data=df.iloc[:, 3:-1].melt(), x='variable', y='value')\nplt.tight_layout()\nplt.show()","4f51346c":"fig, ax = plt.subplots(figsize=figsize)\nsns.boxplot(data=df.iloc[:, 3:].melt(id_vars='Legendary'), x='variable', y='value', hue='Legendary')\nplt.tight_layout()\nplt.show()","12fb0ed6":"def plot(data, x, is_hist=True, **kwargs):\n    plt.figure(figsize=figsize)\n    if is_hist:\n        sns.histplot(data=data, x=x, **kwargs)\n        plt.axvline(data[x].mean(), ls='-.', c='blue', lw=4, label='mean')\n        plt.axvline(data[x].median(), ls='-.', c='red', lw=4, label='median')\n    else:\n        sns.boxplot(data=data, x=x, **kwargs)\n    plt.legend(loc='best')\n    plt.tight_layout()\n    plt.show()","ad5d198d":"plot(df, 'HP', color='purple')","fbf9e1b4":"plot(df, 'Attack')","6bab95ed":"data = df.groupby('Type 1')['Name'].count().reset_index().sort_values(by='Name').reset_index(drop=True)\ndisplay(data.T)\n\nfig, ax = plt.subplots(figsize=figsize)\ng = sns.barplot(data=data, x='Type 1', y='Name', ax=ax)\nfor p in g.patches:\n    ax.annotate(\n        format(p.get_height(), '.0f'),\n        (p.get_x() + p.get_width() \/ 2, p.get_height()),\n        fontsize=12, va='bottom', ha='center', fontweight='bold'\n    )\nplt.tight_layout()\nplt.show()","733fd756":"data = df.groupby('Type 2')['Name'].count().reset_index().sort_values(by='Name').reset_index(drop=True)\ndisplay(data.T)\nfig, ax = plt.subplots(figsize=figsize)\ng = sns.barplot(data=data, x='Type 2', y='Name', ax=ax)\nfor p in g.patches:\n    ax.annotate(\n        format(p.get_height(), '.0f'),\n        (p.get_x() + p.get_width() \/ 2, p.get_height()),\n        fontsize=12, va='bottom', ha='center', fontweight='bold'\n    )\nplt.tight_layout()\nplt.show()","ea79822a":"pie_shape = (15, 6)","a46fd1eb":"fig, ax = plt.subplots(1, 2, figsize=pie_shape)\ndf['Type 1'].value_counts().plot(kind='pie', autopct='%.2f%%', fontsize=13, shadow=True, ax=ax[0])\ndf['Type 2'].value_counts().plot(kind='pie', autopct='%.2f%%', fontsize=13, shadow=True, ax=ax[1])\nplt.tight_layout()\nplt.show()","593da3a3":"plt.figure(figsize=pie_shape)\ndf['Generation'].value_counts().plot(kind='pie', autopct='%.2f%%', fontsize=15, shadow=True, explode=[0.1, 0, 0, 0, 0, 0])\nplt.tight_layout()\nplt.show()","38a198c7":"plt.figure(figsize=figsize)\nsns.scatterplot(data=df, x='Attack', y='Defense')\nplt.tight_layout()\nplt.show()","5112661e":"plt.figure(figsize=figsize)\nsns.regplot(data=df, x='Attack', y='Defense')\nplt.tight_layout()\nplt.show()","72402bfb":"x = df['Attack']\ny = df['Defense']\nx.corr(y)","f9f4e65f":"df.corr()","65070844":"plt.figure(figsize=(10, 8))\nsns.heatmap(data=df.corr(), annot=True, fmt='.2f', vmin=-1, vmax=1)\nplt.tight_layout()\nplt.show()","512aa549":"data = df['Generation'].value_counts().reset_index().rename(columns={'Generation': 'count', 'index': 'Generation'})\ndata.sort_values(by='Generation', inplace=True)\ndata","5d117970":"plt.figure(figsize=figsize)\nsns.lineplot(data=data, x='Generation', y='count', lw=3)\nsns.scatterplot(data=data, x='Generation', y='count', s=300, color='orange')\nplt.show()","223d502d":"from IPython.display import HTML\nHTML('<iframe width=\"1000\" height=\"500\" src=\"https:\/\/www.youtube.com\/embed\/HY9D42M_0d8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>')","b368874b":"corr_dict = defaultdict(dict)\nfor t1 in set(df['Type 1'].unique()):\n    for t2 in set(df['Type 2'].unique()):\n        corr_dict[t1][t2] = df[(df['Type 1'] == t1) & (df['Type 2'] == t2)]['Name'].count()\ndata = pd.DataFrame(corr_dict)\n\nmask = np.zeros_like(data)\nmask[data == 0] = True","d8f76f41":"data","ff8bf3c8":"plt.figure(figsize=(12, 8))\nsns.heatmap(data=data, annot=True, fmt='d', mask=mask, cmap='Purples', cbar=False)\nplt.xlabel('Type 1', fontsize=12)\nplt.ylabel('Type 2', fontsize=12)\nplt.grid(True)\nplt.tight_layout()\nplt.show()","0a9c0c98":"hist_figsize = (15, 2)\nbinwidth = 5\nf, ax = plt.subplots(1, 3, sharey=False, figsize=hist_figsize)\nsns.histplot(data=df['HP'], ax=ax[0], binwidth=binwidth)\nsns.histplot(data=df['Attack'], ax=ax[1], binwidth=binwidth)\nsns.histplot(data=df['Defense'], ax=ax[2], binwidth=binwidth)\nfor i in range(3):\n    ax[i].grid(False)\nf.tight_layout()\n    \nf, ax = plt.subplots(1, 3, sharey=False, figsize=hist_figsize)\nsns.histplot(data=df['Sp. Atk'], ax=ax[0], binwidth=binwidth)\nsns.histplot(data=df['Sp. Def'], ax=ax[1], binwidth=binwidth)\nsns.histplot(data=df['Speed'], ax=ax[2], binwidth=binwidth)\nfor i in range(3):\n    ax[i].grid(False)\nf.tight_layout()\n    \nf, ax = plt.subplots(figsize=hist_figsize)\nsns.histplot(data=df['Total'], ax=ax, binwidth=binwidth)\nax.grid(False)\nf.tight_layout()\nplt.show()","34b7883e":"hist_figsize = (15, 2)\nbinwidth = 5\n\nf, ax = plt.subplots(1, 3, sharey=False, figsize=hist_figsize)\nsns.kdeplot(df['HP'], ax=ax[0], fill=True)\nsns.kdeplot(data=df['Attack'], ax=ax[1], fill=True)\nsns.kdeplot(data=df['Defense'], ax=ax[2], fill=True)\nf.tight_layout()\nfor i in range(3):\n    ax[i].grid(False)\n    \nf, ax = plt.subplots(1, 3, sharey=False, figsize=hist_figsize)\nsns.kdeplot(data=df['Sp. Atk'], ax=ax[0], fill=True)\nsns.kdeplot(data=df['Sp. Def'], ax=ax[1], fill=True)\nsns.kdeplot(data=df['Speed'], ax=ax[2], fill=True)\nf.tight_layout()\n\nfor i in range(3):\n    ax[i].grid(False)\nf, ax = plt.subplots(figsize=hist_figsize)\nsns.kdeplot(data=df['Total'], ax=ax, fill=True)\nax.grid(False)\nf.tight_layout()\n\nplt.show()","cf5b2eac":"hist_figsize = (15, 2)\nbinwidth = 5\nf, ax = plt.subplots(1, 3, sharey=True, figsize=hist_figsize)\nsns.boxplot(data=df, ax=ax[0], x='HP')\nsns.boxplot(data=df, ax=ax[1], x='Attack')\nsns.boxplot(data=df, ax=ax[2], x='Defense')\nf.tight_layout()\n\nf, ax = plt.subplots(1, 3, sharey=True, figsize=hist_figsize)\nsns.boxplot(data=df, ax=ax[0], x='Sp. Atk')\nsns.boxplot(data=df, ax=ax[1], x='Sp. Def')\nsns.boxplot(data=df, ax=ax[2], x='Speed')\nf.tight_layout()\n\nf, ax = plt.subplots(figsize=hist_figsize)\nsns.boxplot(data=df, ax=ax, x='Total')\nf.tight_layout()\n\nplt.show()","2d798778":"boxplot_figsize = (20, 6)\nfig, ax = plt.subplots(1, 2, figsize=boxplot_figsize, sharey=True)\nsns.boxplot(data=df.melt(id_vars=['Type 1'], value_vars=['HP']), y='Type 1', x='value', ax=ax[0])\nsns.boxplot(data=df.melt(id_vars=['Type 1'], value_vars=['Attack']), y='Type 1', x='value', ax=ax[1])\n\nfig, ax = plt.subplots(1, 2, figsize=boxplot_figsize, sharey=True)\nsns.boxplot(data=df.melt(id_vars=['Type 1'], value_vars=['Defense']), y='Type 1', x='value', ax=ax[0])\nsns.boxplot(data=df.melt(id_vars=['Type 1'], value_vars=['Sp. Atk']), y='Type 1', x='value', ax=ax[1])\nfig.tight_layout()\n\nfig, ax = plt.subplots(1, 2, figsize=boxplot_figsize, sharey=True)\nsns.boxplot(data=df.melt(id_vars=['Type 1'], value_vars=['Sp. Def']), y='Type 1', x='value', ax=ax[0])\nsns.boxplot(data=df.melt(id_vars=['Type 1'], value_vars=['Speed']), y='Type 1', x='value', ax=ax[1])\nfig.tight_layout()\n\nfig, ax = plt.subplots(figsize=boxplot_figsize)\nsns.boxplot(data=df.melt(id_vars=['Type 1'], value_vars=['Total']), y='Type 1', x='value', ax=ax)\nfig.tight_layout()\n\nplt.show()","922a9c2c":"def plot_bar(df, name, title):\n    data = df.sort_values(by=name, ascending=False).head(10)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    g = sns.barplot(data=data, y='Name', x=name)\n    for p in g.patches:\n        ax.annotate(\n            format(p.get_width(), '.0f'),\n            (p.get_height() + p.get_width(), p.get_y()),\n            ha='left', va='top'\n        )\n    plt.title(title)\n    plt.show()\n    return list(data['Name'].values)","941adf3f":"top_of_tops = []","e2a636fb":"top_of_tops += plot_bar(df, name='Total', title='Top 10 Pokemon with the highest total stats')","8ce3ebeb":"top_of_tops += plot_bar(df, name='HP', title='Top 10 Pokemon with the highest health')","2fe3fa6f":"top_of_tops += plot_bar(df, name='Attack', title='Top 10 Pokemon with the highest base attack power')","9aafec54":"top_of_tops += plot_bar(df, name='Defense', title='Top 10 Pokemon with the highest basic defense')","1c19fdfc":"top_of_tops += plot_bar(df, name='Sp. Atk', title='Top 10 Pokemon with the highest special attack power')","eaec7b69":"top_of_tops += plot_bar(df, name='Sp. Def', title='Top 10 Pokemon with the highest special defense')","38055f09":"top_of_tops += plot_bar(df, name='Speed', title='Top 10 Pokemon with the highest speed')","131ab5af":"top_of_top_df = pd.DataFrame(Counter(top_of_tops).items(), columns=['Name', 'Count']).sort_values(by='Count', ascending=False)\ntop_of_top_df.head(10)","6275398a":"plot_bar(top_of_top_df.head(10), name='Count', title='Pokemon at the top of the top 10 charts')","c7e44621":"def plot_radar(name, fig, axis=111):\n    index = df[df['Name'] == name].index[0]\n    labels=np.array(['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed'])\n    stats=df.loc[index, labels].values\n\n    angles=np.linspace(0, 2*np.pi, len(labels), endpoint=False)\n    # close the plot\n    stats=np.concatenate((stats,[stats[0]]))\n    angles=np.concatenate((angles,[angles[0]]))\n    labels = np.concatenate((labels, [labels[0]]))\n    \n    ax = fig.add_subplot(axis, polar=True)\n    ax.plot(angles, stats, 'o-', linewidth=2)\n    ax.fill(angles, stats, alpha=0.25)\n    ax.set_thetagrids(angles * 180\/np.pi, labels, fontsize=12, fontweight='bold')\n    ax.set_title(name)\n    ax.grid(True)\n    \n    return fig","32d35bf0":"fig = plt.figure(figsize=(16, 6))\nfig = plot_radar('Mega Mewtwo Y', fig, axis=121)\nfig = plot_radar('Mega Mewtwo X', fig, axis=122)\nfig.tight_layout()\nplt.show()","d9081242":"def plot_series_radar(names):\n    labels=np.array(['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed'])\n    angles=np.linspace(0, 2*np.pi, len(labels), endpoint=False)\n    angles=np.concatenate((angles,[angles[0]]))\n    labels = np.concatenate((labels, [labels[0]]))\n\n    indexes = []\n    stats = []\n    for name in names:\n        indexes.append(df[df['Name'] == name].index[0])\n        stats.append(list(df.loc[indexes[-1], labels].values))\n\n    stats = [stat + stat[0] for stat in stats]\n\n    fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(12, 12), subplot_kw=dict(polar=True))\n\n    for stat, name in zip(stats, names):\n        ax.plot(angles, stat, 'o-', linewidth=2, label=name)\n        ax.fill(angles, stat, alpha=0.25)\n\n    ax.set_thetagrids(angles * 180\/np.pi, labels, fontsize=12, fontweight='bold')\n    # ax.set_title(name)\n    ax.grid(True)\n    plt.legend(loc='center')\n    ax.set_title('Radar chart of %s' % (', '.join(names)))\n    plt.show()","f2be59f4":"bulbasaur_names = ['Bulbasaur', 'Ivysaur', 'Venusaur', 'Mega Venusaur']\nplot_series_radar(bulbasaur_names)","b9b37b9f":"charmander_names = ['Charmander', 'Charmeleon', 'Charizard', 'Mega Charizard X', 'Mega Charizard Y']\nplot_series_radar(charmander_names)","c80f5713":"squirtle_names = ['Squirtle', 'Wartortle', 'Blastoise', 'Mega Blastoise']\nplot_series_radar(squirtle_names)","597efb9a":"#### Question:\n- Number of pokemon of generation?","51ff1cc4":"### Fix: Use bar chart or reduce the number of properties.","b8e91eca":"# Bar chart and Histogram\n\n#### Question:\n- Why histogram instead of barchart?\n\n![bar vs hist](https:\/\/raw.githubusercontent.com\/tuanio\/pbl_ds_2021\/main\/week%203\/assets\/hist_vs_bar.png)","fd39563a":"#### Remove the Pokemon that no name","45062375":"# Boxplot\n![boxplot](https:\/\/raw.githubusercontent.com\/tuanio\/pbl_ds_2021\/main\/week%203\/assets\/boxplot.png)","62238c03":"![corr_gif](https:\/\/raw.githubusercontent.com\/tuanio\/pbl_ds_2021\/main\/week%203\/assets\/pearson.gif)\n\n### $Correlation \\in [-1, 1]$","639cffe4":"And the professor allowed the boy to choose one of the 3 pokemon below, respectively Bulbasaur, Charmander, Squirtle","d7670376":"#### Question:\n- Are all outliers `Legendary` pokemon?","f696495e":"#### Fill `Type 2` with empty character","d21293ee":"Satoshi is wondering about one of these 3 Pokemon, looking for advice from you, a professional data scientist. With the knowledge of data exploration so far, if it were you, which Pokemon would you choose from the 3 Pokemon above so that Satoshi could firmly step on the way to becoming a professional Pokemon Trainer.","ddbe3b99":"# Centroid values\n### Mode, Median and Mean\n\n![mmm](https:\/\/raw.githubusercontent.com\/tuanio\/pbl_ds_2021\/main\/week%203\/assets\/mmm.png)","e5798d2a":"# Basic info of dataset","23b795ab":"#### Question:\n- How to see the number of Pokemon with 1 or 2 types like?","578afc4b":"#### Question:\n- What is the ratio of the systems in Pokemon?","25d4f8eb":"# Heatmap","5dd35e3d":"![satoshi_pikachu](https:\/\/raw.githubusercontent.com\/tuanio\/pbl_ds_2021\/main\/week%203\/assets\/satoshi_pikachu.png)","24050918":"# Bulbasaur\n\n![saur](https:\/\/raw.githubusercontent.com\/tuanio\/pbl_ds_2021\/main\/week%203\/assets\/evolution_saur.png)","04de42de":"# Import data","08cec3c2":"#### Question:\n- What is the number of each type of pokemon?","b7c64aab":"# Scatter\n\n![scatter](https:\/\/raw.githubusercontent.com\/tuanio\/pbl_ds_2021\/main\/week%203\/assets\/scatter.gif)","50c799fa":"## With the last and final analysis, Satoshi chose...","b5d9cde3":"#### I created the `Total` columns is the sum of the rest stats of pokemon","767731ce":"## Use the right pie chart","880ff98a":"### Observe the boxplot of the attributes of the Pokemon","6910db6d":"# Add the necessary libraries","2571ace5":"# Correlation - correlation between two features","77500f41":"#### Question:\n- How many Pokemon per generation?","23348e55":"![corr](https:\/\/raw.githubusercontent.com\/tuanio\/pbl_ds_2021\/main\/week%203\/assets\/corr.png)","30593ac2":"# Barchart Race","5c594513":"![3start](https:\/\/raw.githubusercontent.com\/tuanio\/pbl_ds_2021\/main\/week%203\/assets\/3start.jpg)","b4742efa":"#### Question:\n- How `HP` distribution?","cb256456":"- Distribution of `Attack`","bbf0bc2f":"# Charmander\n\n![chamander](https:\/\/raw.githubusercontent.com\/tuanio\/pbl_ds_2021\/main\/week%203\/assets\/chamander.jpg)","8fa5d246":"# Pie chart\n\n![pie](https:\/\/raw.githubusercontent.com\/tuanio\/pbl_ds_2021\/main\/week%203\/assets\/pie.jpg)","a3d73234":"### We have the story:\n\nYou are assigned a task to help the boy Satoshi, a 10-year-old boy, on his way to becoming a professional Pokemon trainer.\n\n![satoshi](https:\/\/raw.githubusercontent.com\/tuanio\/pbl_ds_2021\/main\/week%203\/assets\/satoshi.png)","d7140a7e":"# Histogram\n\n![histogram](https:\/\/raw.githubusercontent.com\/tuanio\/pbl_ds_2021\/main\/week%203\/assets\/hist.jpg)","1c073d27":"# Explore Data Analysis","39bd538e":"## $\\rightarrow$ Improper use of pie chart.","71bb222d":"# Top 10 Pokemon of stats\n### Total, HP, Attack, Defense, Sp. Atk, Sp. Def, Speed","4c2a90a5":"# Squirtle\n![squirtle](https:\/\/raw.githubusercontent.com\/tuanio\/pbl_ds_2021\/main\/week%203\/assets\/squirtle.jpg)","7ec9326f":"![corr](https:\/\/raw.githubusercontent.com\/tuanio\/pbl_ds_2021\/main\/week%203\/assets\/corr_dir.png)","ca685655":"# Lineplot","6f9402f3":"**$\\rightarrow$ Few attributes**","03db61c3":"#### Question:\n- Does `Attack` and `Defense` has correlation?","601ef5e4":"### Using pie chart inappropriately","ef7dd49e":"# Bar chart"}}