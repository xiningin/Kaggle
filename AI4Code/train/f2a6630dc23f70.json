{"cell_type":{"9b791b58":"code","c63a7d28":"code","db58f3b3":"code","20de0e4d":"code","09f63f30":"code","27e5bcb6":"code","f980cb6d":"code","f1c04a04":"code","cb1960f6":"code","25e1f31b":"code","d31cb442":"code","02e4babe":"code","e353c410":"code","8d604ad0":"code","77406569":"code","5d9d6897":"code","76a4d142":"code","377e3de3":"code","44dbc71b":"markdown","e383f083":"markdown","907c2d79":"markdown","f5192403":"markdown","c93d582e":"markdown","eb174e24":"markdown","7ad6f5fb":"markdown","0c706205":"markdown","11679c9c":"markdown","a5fc3c0f":"markdown","1afec1ac":"markdown","1c529ac4":"markdown","6d6e925b":"markdown","fc68162e":"markdown","83916ff6":"markdown","cd529f63":"markdown","6ba93cef":"markdown","9a325cef":"markdown","d5739e5a":"markdown","21a98eea":"markdown","37036032":"markdown","26561062":"markdown","1ec8b797":"markdown","581d5d82":"markdown","bc23d0d4":"markdown","7f011df0":"markdown","b2938651":"markdown","f246a3f6":"markdown"},"source":{"9b791b58":"#Import Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nimport seaborn as sns\nfrom scipy import stats\nimport seaborn as sn\nimport statsmodels.api as sm\nfrom sklearn.metrics import precision_recall_fscore_support\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom sklearn.metrics import confusion_matrix","c63a7d28":"#Import os\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","db58f3b3":"#Read dataset\ndf = pd.read_csv('..\/input\/football-manager-data\/dataset.csv', sep = ',')","20de0e4d":"#Test Data are readed properly\ndf.tail(10)","09f63f30":"def missing_values_table(df):\n        mis_val = df.isnull().sum()\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        mis_val_table_ren_columns = mis_val_table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        mis_val_table_ren_columns = mis_val_table_ren_columns[\n            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n        print (\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n\"      \n            \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n              \" columns that have missing values.\")\n        return mis_val_table_ren_columns","27e5bcb6":"#Get column types\ndf.info()\n\n#Get statistics (avg,median,percentiles) for all columns of dataset\nstats = df.describe()\n\nprint(stats)","f980cb6d":"#Count missing values\nmissing_values_table(df)","f1c04a04":"bins= [14,20,26,32,38,44,50,56]\nplt.hist(df['Age'].values, bins=bins, edgecolor=\"k\")\nplt.xticks(bins)\nplt.show()","cb1960f6":"#Slice dataframe for specific columns in order to inspect correlations (seperate dfs for Attack, Mental)\n\n#Attack\ncorr_df_attack = df.loc[:, ['Age', 'Height','Dribbling', 'Finishing','Crossing','Heading','Technique','Composure','IntCaps','IntGoals']]\n\n#Mental\ncorr_df_mental = df.loc[:, ['Age', 'Height','Aggression', 'Anticipation','Bravery','Concentration','Ambition','Loyalty','Professional','Sportsmanship','Temperament','Controversy','Adaptability','Dirtiness','IntCaps','IntGoals']]\n\n#Inspect corr matrix attack\ncorrMatrix_attack = corr_df_attack.corr()\nfig, ax = plt.subplots(figsize=(15,15)) \nax = sn.heatmap(corrMatrix_attack, annot=True)\nplt.show()","25e1f31b":"#Inspect corr matrix mental\ncorrMatrix_mental = corr_df_mental.corr()\nfig, ax = plt.subplots(figsize=(15,15)) \nax = sn.heatmap(corrMatrix_mental, annot=True)\nplt.show()","d31cb442":"#Inspect players with >0 IntCaps\n\ninternational = df.loc[df['IntCaps'] > 0]\n\n#From 159.541 players, 9636 have made >0 international appearances\n\n#Inspect the corralations but only for international players \n\n#Attack\ncorr_df_attack_int = international.loc[:, ['Age', 'Height','Dribbling', 'Finishing','Crossing','Heading','Technique','Composure','IntCaps','IntGoals']]\ncorr_df_mental_int = international.loc[:, ['Age', 'Height','Aggression', 'Anticipation','Bravery','Concentration','Ambition','Loyalty','Professional','Sportsmanship','Temperament','Controversy','Adaptability','Dirtiness','IntCaps','IntGoals']]\n\n#Inspect corr matrix attack\ncorrMatrix_attack_int = corr_df_attack_int.corr()\nfig, ax = plt.subplots(figsize=(15,15)) \nax = sn.heatmap(corrMatrix_attack_int, annot=True)\nplt.show()\n","02e4babe":"#Inspect corr matrix mental\ncorrMatrix_mental_int = corr_df_mental_int.corr()\nfig, ax = plt.subplots(figsize=(15,15)) \nax = sn.heatmap(corrMatrix_mental_int, annot=True)\nplt.show()","e353c410":"#Pair Scatterplots for IntCaps and Controversy-Adaptability-Dirtiness\ng = sns.pairplot(data= df.query('IntCaps > 0'),\n                  y_vars=['IntCaps'],\n                  x_vars=['Controversy','Adaptability','Dirtiness'],\n                kind=\"reg\")","8d604ad0":"#Create categorical variable for IntCaps\n\n#Inspect IntCaps distribution only for those who hade made a single or more appearances\ninternational['IntCaps'].describe()\n\ndef caps_categorical(row):\n   if  (row['IntCaps'] <= 7):\n       return 0\n   else:\n       return 1\n   \ninternational['IntCaps_categorical'] = international.apply (lambda row: caps_categorical(row), axis=1)\ninternational['IntCaps_categorical'].value_counts()","77406569":"# Perform Feature Selection from a pool of variables\nX = international.iloc[:, 22:73]\ny = international['IntCaps_categorical']\n\ncols = list(X.columns)\npmax = 1\nwhile (len(cols)>0):\n    p= []\n    X_1 = X[cols]\n    X_1 = sm.add_constant(X_1)\n    model = sm.OLS(y,X_1).fit()\n    p = pd.Series(model.pvalues.values[1:],index = cols)      \n    pmax = max(p)\n    feature_with_p_max = p.idxmax()\n    if(pmax>0.05):\n        cols.remove(feature_with_p_max)\n    else:\n        break\nselected_features_BE = cols\nprint(selected_features_BE)","5d9d6897":"# Create Logistic Regression Model \n\n# Slice Dataset\nX = international[['ImportantMatches', 'Adaptability', 'Ambition', 'Loyalty', 'Pressure', 'Sportsmanship', 'Temperament', 'Controversy']]\ny = international[['IntCaps_categorical']]\ny['IntCaps_categorical'].value_counts()\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n#Inspect y_test counts\ny_test['IntCaps_categorical'].value_counts()\n\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# Fitting Logistic Regression to the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state=0)\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\ncm = confusion_matrix(y_test, y_pred)\n#ylabel = True\n#xlabel = Predicted\n\nprint(cm)\n\n#Extract metrics\nprecision_recall_fscore_support(y_test, y_pred, average='macro')\n#precision, recall, fscore, support\n","76a4d142":"# Create Artificial Neural Network Model \nX = international[['ImportantMatches', 'Adaptability', 'Ambition', 'Loyalty', 'Pressure', 'Sportsmanship', 'Temperament', 'Controversy']]\ny = international['IntCaps_categorical']\n\n# Encoding categorical data\nlabelencoder_y = LabelEncoder()\ny = labelencoder_y.fit_transform(y)\n\n#Make the ANN\n\n# Initialising the ANN\nclassifier = Sequential()\n\n# Adding the input layer and the first hidden layer\nclassifier.add(Dense(6, activation = 'relu', input_dim = 8))\n\n# Adding the second hidden layer\nclassifier.add(Dense(6, activation = 'relu'))\n\n# Adding the output layer\nclassifier.add(Dense(1, activation = 'sigmoid'))\n\n# Compiling the ANN\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\n# Fitting the ANN to the Training set\nclassifier.fit(X_train, y_train, batch_size = 1, epochs = 20)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\ny_pred = (y_pred > 0.5)\n\n# Making the Confusion Matrix\ncm = confusion_matrix(y_test, y_pred)\n\nprint(cm)\n\n#Extract metrics\nprecision_recall_fscore_support(y_test, y_pred, average='macro')\n#precision, recall, fscore, support\n","377e3de3":"#Create Random Forest Model\nX = international[['ImportantMatches', 'Adaptability', 'Ambition', 'Loyalty', 'Pressure', 'Sportsmanship', 'Temperament', 'Controversy']]\ny = international['IntCaps_categorical']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# Fitting Random Forest Classification to the Training set\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', max_depth = 3, random_state = 0)\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\ncm = confusion_matrix(y_test, y_pred)\n\nprint(cm)\n\n#Extract metrics\nprecision_recall_fscore_support(y_test, y_pred, average='macro')\n#precision, recall, fscore, support\n","44dbc71b":"### The ANN is trained for 20 epochs with the stohastic gradient descent method. It consists of 2 hidden layers with 6 neurons. The model's accuracy is approximately 60%. Errors are normally distributed and they do not occur for a specific category. Model predicts better players with less than 7 caps. The prediction is again better than a naive model but of course the model's accuracy is still too low.","e383f083":"### Test Data are readed properly","907c2d79":"## Overall, the tested models give approximately the same results. This was an approach to predict a player's international appearances. Of course, don't forget that players are increasing their attributes as they play for the international teams. ","f5192403":"### Import OS","c93d582e":"### Get column types, count nans, get stats ","eb174e24":"### Create custom function to read missing values per column","7ad6f5fb":"## Create Artificial Neural Network Model ","0c706205":"#### Most players are between 20 and 26 years old","11679c9c":"#### We get the plots to inspect the behaviour of the data points between Controversy, Adaptability, Dirtiness with International appearances.","a5fc3c0f":"#### For players with at least 1 internation cap we get the same correlation matrix for previous compared attributes and we notice that for a (random) selected pool of attributes composure is the most highly correlated attribute with IntCaps. ","1afec1ac":"#### Many correlations here are obvious i.e IntCaps, IntGoals etc. Some noteworthy correlations here are Age~Composure and in general combinations that are not predictable. All correlations for attackers main attributes are predictable.","1c529ac4":"### There's an accuracy of almost 60%. Errors are normally distributed and they do not occur for a specific category. Players with more than 7 international appearances are 1197. The prediction is better than a naive model but of course the model's accuracy is still too low.","6d6e925b":"# Visualize attributes correlation and predict international appearances of a player as a classification problem. ","fc68162e":"#### From the total pool of attributes (GK attributes are excluded) a backward elimination is performed in order to find the most important predictor variables","83916ff6":"### Create categorical variable for IntCaps","cd529f63":"#### For players with at least 1 internation cap we get the same mental attributes correlation matrix for previous compared attributes and we notice that for a (random) selected pool of attributes Anticipation is the most highly correlated attribute with IntCaps. Also, for international players bravery is more correlated with Concentration. ","6ba93cef":"#### Mental correlations are more interesting in an insights point of view. We observe that Age is medium correlated with Anticipation & Concentration but maybe its obvious due to a player's experience. These are attrbute that increase with time. ","9a325cef":"# Predic IntCaps_categorical based on attributes (Classfication problem)\n","d5739e5a":"### Create correlation matrix for numeric variables****\n","21a98eea":"## Create Logistic Regression Model ","37036032":"### Pair Scatterplots for IntCaps and Controversy-Adaptability-Dirtiness","26561062":"## Create Random Forest Model","1ec8b797":"#### The Random forest model is consisted of 10 trees, the quality of split is measured by the information gained(entropy) and the the maximum depth of the tree is 3. The model's accuracy ranges at 60%. Errors still normally distributed. The prediction is again better than a naive model. ","581d5d82":"### Inspect players with >0 IntCaps (Correlation matrices)","bc23d0d4":"### Import Libraries","7f011df0":"### Read Dataset","b2938651":"#### We create a new binary categorical variable which classifies the number of International Appearances based on the median value. We do this in order to implement classification algorithms trying to predict a player's number of international caps based on some of his attributes","f246a3f6":"### Create a barchat based on Age bins (6-year bins)"}}