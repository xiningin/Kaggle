{"cell_type":{"6cf8580b":"code","c39da193":"code","2e86b088":"code","822ee124":"code","c53611e1":"code","33def435":"code","e996a9ee":"code","3320b33b":"code","81f06e34":"code","be5fc0ee":"code","4be419f0":"code","2e87de5e":"code","d78d7b59":"code","67d671a1":"code","53ee613b":"code","94e29ffd":"markdown","d2c32e9c":"markdown","e4a543da":"markdown","54207c5c":"markdown","59db78db":"markdown","c16f1c6e":"markdown","c4f88894":"markdown","fdc6322f":"markdown","afc6acb6":"markdown","34cfde32":"markdown","436a0282":"markdown","7090c792":"markdown","e8872b18":"markdown","5212922f":"markdown","3649f1d1":"markdown","59b31ebd":"markdown"},"source":{"6cf8580b":"from fastai import *\nfrom fastai.vision import *\nDATAPATH = Path('\/kaggle\/input\/Kannada-MNIST\/')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c39da193":"def get_data_labels(csv,label):\n    fileraw = pd.read_csv(csv)\n    labels = fileraw[label].to_numpy()\n    data = fileraw.drop([label],axis=1).to_numpy(dtype=np.float32).reshape((fileraw.shape[0],28,28))\n    data = np.expand_dims(data, axis=1)\n    return data, labels","2e86b088":"train_data, train_labels = get_data_labels(DATAPATH\/'train.csv','label')\ntest_data, test_labels = get_data_labels(DATAPATH\/'test.csv','id')\nother_data, other_labels = get_data_labels(DATAPATH\/'Dig-MNIST.csv','label')\ntrain_data.shape, train_labels.shape, test_data.shape, test_labels.shape, other_data.shape, other_labels.shape","822ee124":"plt.title(f'Training Label: {train_labels[2]}')\nplt.imshow(train_data[2,0],cmap='gray');","c53611e1":"np.random.seed(42)\nran_10_pct_idx = (np.random.random_sample(train_labels.shape)) < .1\n\ntrain_90_labels = train_labels[np.invert(ran_10_pct_idx)]\ntrain_90_data = train_data[np.invert(ran_10_pct_idx)]\n\nvalid_10_labels = train_labels[ran_10_pct_idx]\nvalid_10_data = train_data[ran_10_pct_idx]","33def435":"class ArrayDataset(Dataset):\n    \"Dataset for numpy arrays based on fastai example: \"\n    def __init__(self, x, y):\n        self.x, self.y = x, y\n        self.c = len(np.unique(y))\n    \n    def __len__(self):\n        return len(self.x)\n    \n    def __getitem__(self, i):\n        return self.x[i], self.y[i]","e996a9ee":"train_ds = ArrayDataset(train_90_data,train_90_labels)\nvalid_ds = ArrayDataset(valid_10_data,valid_10_labels)\nother_ds = ArrayDataset(other_data, other_labels)\ntest_ds = ArrayDataset(test_data, test_labels)","3320b33b":"bs = 128\ndatabunch = DataBunch.create(train_ds, valid_ds, test_ds=test_ds, bs=bs)","81f06e34":"def conv2(ni,nf,stride=2,ks=3): return conv_layer(ni,nf,stride=stride,ks=ks)","be5fc0ee":"smallConvolutional = nn.Sequential(\n    conv2(1,8,ks=5),\n    conv2(8,16),\n    conv2(16,32),\n    conv2(32, 16),\n    conv2(16, 10),\n    Flatten()\n)","4be419f0":"learn = Learner(databunch, smallConvolutional, loss_func = nn.CrossEntropyLoss(), metrics=[accuracy] )","2e87de5e":"learn.fit_one_cycle(8)","d78d7b59":"preds, ids = learn.get_preds(DatasetType.Test)\ny = torch.argmax(preds, dim=1)","67d671a1":"submission = pd.DataFrame({ 'id': ids,'label': y })","53ee613b":"submission.to_csv(path_or_buf =\"submission.csv\", index=False)","94e29ffd":"This 'learner' in Fastai holds the data, model, loss function, and metric of interest.","d2c32e9c":"The 28x28 images are tiny, so I did not want to use a large pretrained model, like ResNet. This is a fully convolutional network created in a blend of in pytorchand Fastai. The 'conv_layer' is a Fastai function that returns a convolutional layer, batchnorm, and RELU. ","e4a543da":"Finally, I can create a Databunch, which contains, my training, validation and test sets, along with the batch size.","54207c5c":"# Simple model: fully convolutional network","59db78db":"Now, we can get the predictions for the test set. ","c16f1c6e":"Each of the datasets is processed to obtain the data and label\/id. ","c4f88894":"To ensure the the data read in properly, I display one. Seems ok.","fdc6322f":"# Creating a Fastai Databunch","afc6acb6":"This uses a [one cycle policy](https:\/\/docs.fast.ai\/callbacks.one_cycle.html) for training. Eight cycles a an arbitrary number; the accuracy on the validation set typically reaches ~99.2%.","34cfde32":"# Test data set","436a0282":"The image data is currently in numpy arrays. Fastai does not have a built in dataset to handle images in this format, so I created a bare-bones Torch Dataset class. [Code from here](https:\/\/docs.fast.ai\/basic_data.html)","7090c792":"Here is my first bare-bones attempt at the MNIST Kannada challenge. This 1st commit notebook contains a fully convolutional network implemented with Fastai\/Pytorch. ","e8872b18":"# Simple Fastai\/Pytorch Example","5212922f":"# Data processing","3649f1d1":"I want to use Fastai's code for training the model. First, however, I created a validation dataset from 10% of the training data.","59b31ebd":"The data given to us is in a .csv format. The first column contains the image label\/id, and the rest of the columns contain the image pixel values in grayscale. To process the csv into something we can train a network with, I \n- read the csv into a pandas dataframe\n- extract the label\/id\n- remove the label\/id column and reshape the image data into a 28x28 square\n- give the resulting array an extra dimension to indicate the images are in grayscale"}}