{"cell_type":{"e34b127b":"code","58caa771":"code","df7d686d":"code","7d952871":"code","9da1feb7":"code","bd7d3a06":"code","337ee085":"code","99993ef6":"code","38eb033f":"code","018c0125":"code","ab5dd8df":"code","07e7d4b0":"code","7df4d17a":"code","5982e70e":"code","5f148800":"code","1703e548":"code","282d6049":"code","54027e62":"code","0123cbd8":"markdown","5a829f3f":"markdown","c7acf252":"markdown"},"source":{"e34b127b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","58caa771":"from __future__ import absolute_import, division, print_function, unicode_literals\n\n\nimport tensorflow as tf\nfrom tensorflow import keras # tf.keras is a high-level API to build and train models in TensorFlow\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nprint(tf.__version__) #verify tensorFlow version\n","df7d686d":"from keras.utils import to_categorical\nimport numpy as np\nfrom sklearn.model_selection import train_test_split","7d952871":"# Get the Fashion MNIST data \nimport pandas as pd\nfashion_mnist_test = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_test.csv\")\nfashion_mnist_train = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_train.csv\")","9da1feb7":"print(fashion_mnist_test.shape, fashion_mnist_train.shape)","bd7d3a06":"#store the label names \nclass_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","337ee085":"img_rows, img_cols = 28, 28\ninput_shape = (img_rows, img_cols, 1)\n\nX = np.array(fashion_mnist_train.iloc[:, 1:])\ny = to_categorical(np.array(fashion_mnist_train.iloc[:, 0]))","99993ef6":"#split the validation data to optimize classifier during training\n##source:https:\/\/www.kaggle.com\/bugraokcu\/cnn-with-keras\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=13)","38eb033f":"#repeat for the test dataset\nX_test = np.array(fashion_mnist_test.iloc[:, 1:])\ny_test = to_categorical(np.array(fashion_mnist_test.iloc[:, 0]))","018c0125":"X_train = X_train.reshape(X_train.shape[0], img_rows, img_cols, 1)\nX_test = X_test.reshape(X_test.shape[0], img_rows, img_cols, 1)\nX_val = X_val.reshape(X_val.shape[0], img_rows, img_cols, 1)\n\nX_train = X_train.astype('float32')\nX_test = X_test.astype('float32')\nX_val = X_val.astype('float32')\nX_train \/= 255\nX_test \/= 255\nX_val \/= 255","ab5dd8df":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\n\nbatch_size = 256\nnum_classes = 10\nepochs = 50\n\n#input image dimensions\nimg_rows, img_cols = 28, 28\n\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 kernel_initializer='he_normal',\n                 input_shape=input_shape))\n#hidden layers\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(Dropout(0.4))\n##Flatten layer\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\n\n#output layer\nmodel.add(Dropout(0.3))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adam(),\n              metrics=['accuracy'])","07e7d4b0":"model.summary()","7df4d17a":"#train\n##this takes some time to run...\nhistory = model.fit(X_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1,\n          validation_data=(X_val, y_val))\nscore = model.evaluate(X_test, y_test, verbose=0)","5982e70e":"print('Test loss:', score[0])\nprint('Test accuracy:', score[1])","5f148800":"#predictions\npredicted_classes = model.predict_classes(X_test)\n\n#get indices from the testset for plotting\ny_true = fashion_mnist_test.iloc[:, 0]\ncorrect = np.nonzero(predicted_classes==y_true)[0]\nincorrect = np.nonzero(predicted_classes!=y_true)[0]\n","1703e548":"#classification report\nfrom sklearn.metrics import classification_report\ntarget_names = [\"Class {}\".format(i) for i in range(num_classes)]\nprint(classification_report(y_true, predicted_classes, target_names=target_names))","282d6049":"#plot a subset of correctly predicted classes\nfor i, correct in enumerate(correct[:9]):\n    plt.subplot(3,3,i+1)\n    plt.imshow(X_test[correct].reshape(28,28), cmap='gray', interpolation='none')\n    plt.title(\"Predicted {}, Class {}\".format(predicted_classes[correct], y_true[correct]))\n    plt.tight_layout()","54027e62":"#a subset of incorrectly predicted classes\nfor i, incorrect in enumerate(incorrect[0:9]):\n    plt.subplot(3,3,i+1)\n    plt.imshow(X_test[incorrect].reshape(28,28), cmap='gray', interpolation='none')\n    plt.title(\"Predicted {}, Class {}\".format(predicted_classes[incorrect], y_true[incorrect]))\n    plt.tight_layout()","0123cbd8":"### **TensorFlow** ###     \nUsing the open-source tutorial and fashion MNIST dataset ( 70,000 grayscale images, 10 categories).      \n\nSources:   \n(http:\/\/https:\/\/www.tensorflow.org\/tutorials\/keras\/classification)","5a829f3f":"In this dataset, the images are 28x28 NumPy arrays, with pixel values from 0 to 255. The labels are an array from 0 to 9.    \nEach image is mapped to a category (0-9), and their name is not included in the dataset. \n","c7acf252":"**This notebook is for practice. Most of the code came from other tutorials."}}