{"cell_type":{"9b41525d":"code","6473a0bf":"code","f2cd8392":"code","78b6644c":"code","89585d24":"code","01e2cd83":"code","9a24754c":"code","e0a95eeb":"code","81f61fcd":"code","afdc66e0":"code","1c188268":"code","9302e6eb":"code","cdbafb65":"code","f935755e":"code","99cec082":"code","0f5efb4a":"code","05e60bc9":"code","0d841d47":"code","dad0ad17":"code","6ea3e30f":"code","c329559c":"code","246dee8d":"code","4db506dc":"code","5241fb88":"code","84790990":"code","958a9fd2":"code","a8ceab0b":"code","5e247e76":"code","83424d9e":"code","66be1652":"code","2bb024a7":"code","4eff43a2":"code","314e54ae":"code","38c1effb":"code","b578db73":"code","7f4c4292":"code","f4b1e8d9":"code","965b9fe8":"code","bb988544":"code","0348e4fd":"markdown","3084c5f9":"markdown","be886400":"markdown","2cca95c6":"markdown","1a7fae4e":"markdown","a4a303be":"markdown","8db81d51":"markdown","519f1885":"markdown","ae7e78d9":"markdown","0970ed96":"markdown","1ffa3c8f":"markdown","5ab4531e":"markdown","6dda276c":"markdown","9fcef010":"markdown","9e71991c":"markdown","92fdcd27":"markdown","2e6044bf":"markdown","615f44cd":"markdown","ac929972":"markdown","1fc0d3b1":"markdown","2dd56e30":"markdown","cb3b6893":"markdown","1fa48723":"markdown","fbb90143":"markdown","8e6c4d7d":"markdown"},"source":{"9b41525d":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport datetime as dt\nimport warnings\nfrom wordcloud import WordCloud","6473a0bf":"dataframe = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\n\ndataframe.head()","f2cd8392":"dataframe.drop(columns = 'show_id', inplace = True)\n\ndataframe.head(0)","78b6644c":"dataframe['duration'] = dataframe['duration'].apply(lambda x: x.split(' ')[0])\n\ndataframe['duration'] = pd.to_numeric(dataframe['duration'])\n\ndataframe.head()","89585d24":"dataframe.dropna(subset = ['rating', 'date_added'], inplace = True)","01e2cd83":"\"\"\"\n# Create new dataframe\n\ndataframe_content = dataframe.groupby('country').count().sort_values('type', ascending = False)\n\ndataframe_content.reset_index(inplace = True)\n\n# PLOT\n\nsns.set_style('whitegrid')\nf, ax = plt.subplots(figsize=(11,7))\nx_content = dataframe_content[['country', 'type']].head(10)['type']\ny_content = dataframe_content[['country', 'type']].head(10)['country']\nsns.barplot(dataframe_content.index, dataframe_content.values, palette=\"RdBu\")\nplt.gca().invert_yaxis()\nplt.title('Amount of Content', fontsize=16)\nplt.show()\n\n\"\"\"\n","9a24754c":"# Create Dataframe\ncontent_type = dataframe.groupby('type').count()\ncontent_type.reset_index(inplace=True)\ncontent_type = content_type[['type', 'title']]\ncontent_type.columns = ['type', 'count']\n\n# PLOT\nfig2, ax2 = plt.subplots(figsize=(25, 6))\ncolors = ['steelblue', 'lightsalmon']\nax2.pie(x=content_type['count'], startangle=90, explode=(0, 0.03), colors=colors, autopct='%1.1f%%', textprops={'fontsize': 12})\nax2.legend(labels=content_type['type'], loc='upper left')\n\nplt.show()","e0a95eeb":"dataframe_country = dataframe[~dataframe['country'].isna()]\n\ncountries = ['United States', 'India', 'United Kingdom', 'Japan']\n\n# Country Dataframes\n\ndef country_type(country):\n    dataframe_country_type = dataframe_country[dataframe_country['country'] == country]\n    dataframe_country_type = dataframe_country_type.groupby('type').count()\n    dataframe_country_type.reset_index(inplace = True)\n    dataframe_country_type = dataframe_country_type[['type', 'title']]\n    dataframe_country_type.columns = ['type', 'count']\n    return dataframe_country_type\n\nusa_type = country_type('United States')\nindia_type = country_type('India')\nuk_type = country_type('United Kingdom')\njapan_type = country_type('Japan')","81f61fcd":"# PLOT\n\nfig3, ax3 = plt.subplots(figsize=(11, 7))\ncolor1 = 'steelblue'\ncolor2 = 'lightsalmon'\n\nax3.bar(x='USA', height=usa_type.iloc[0][1], color=color1)\nax3.bar(x='USA', height=usa_type.iloc[1][1], bottom=usa_type.iloc[0][1], color=color2)\nax3.bar(x='India', height=india_type.iloc[0][1], color=color1)\nax3.bar(x='India', height=india_type.iloc[1][1], bottom=india_type.iloc[0][1], color=color2)\nax3.bar(x='UK', height=uk_type.iloc[0][1], color=color1)\nax3.bar(x='UK', height=uk_type.iloc[1][1], bottom=uk_type.iloc[0][1], color=color2)\nax3.bar(x='Japan', height=japan_type.iloc[0][1], color=color1)\nax3.bar(x='Japan', height=japan_type.iloc[1][1], bottom=japan_type.iloc[0][1], color=color2)\n\nax3.legend(labels=usa_type['type'], loc='upper right', prop={'size': 15})\nax3.set_title('Content Type by Country', fontsize=15)\n\nplt.show()","afdc66e0":"dataframe['rating'].value_counts()","1c188268":"# Create Dataframe\n\nrating_type = dataframe['rating'].value_counts().reset_index()\n\n# Define x and y\nx_rating_type = rating_type['index']\ny_rating_type = rating_type['rating']\n\n# PLOT\nfig4, ax4 = plt.subplots(figsize=(11,7))\nax4.tick_params(axis = 'x', rotation = 45)\nax4.bar(x = x_rating_type, height = y_rating_type, color = 'steelblue')\nax4.set_title('Rating Types (worldwide)', fontsize = 17)\n\n\n# Annotation of Values\n## {:.0f} Format float with no decimal places\n\nfor a,b in zip(x_rating_type, y_rating_type): \n    plt.annotate('{:.0f}%'.format(round(int(b)\/y_rating_type.sum()*100,0)),\n                 xy=(a,b), xytext=(-10,4), textcoords='offset points')\n\n\"\"\"\n(round(int(b)\/y_rating_type.sum()*100,0))\n(int(b)\/y_rating_type.sum()*100,0)\ny_rating_type.sum()*100\n\"\"\"\n\nplt.show()\n","9302e6eb":"# Create dataframe\n\nusa = dataframe[dataframe['country'] == 'United States'] \nuk = dataframe[dataframe['country'] == 'United Kingdom'] \njapan = dataframe[dataframe['country'] == 'Japan'] \nindia = dataframe[dataframe['country'] == 'India']\n\nrating_type_usa = usa['rating'].value_counts().reset_index()\nrating_type_uk = uk['rating'].value_counts().reset_index()\nrating_type_japan = japan['rating'].value_counts().reset_index()\nrating_type_india = india['rating'].value_counts().reset_index()\n\n\n# Align the dataframes\n\nfor x in rating_type['index']:\n    if not rating_type_usa['index'].str.match(x).any():\n        rating_type_usa = rating_type_usa.append({'index': x, 'rating': 0}, ignore_index = True)\n\nfor x in rating_type['index']:\n    if not rating_type_uk['index'].str.match(x).any():\n        rating_type_uk = rating_type_uk.append({'index': x, 'rating': 0}, ignore_index = True)\n        \nfor x in rating_type['index']:\n    if not rating_type_japan['index'].str.match(x).any():\n        rating_type_japan = rating_type_japan.append({'index': x, 'rating': 0}, ignore_index = True)\n        \nfor x in rating_type['index']:\n    if not rating_type_india['index'].str.match(x).any():\n        rating_type_india = rating_type_india.append({'index': x, 'rating': 0}, ignore_index = True)\n","cdbafb65":"# PLOT \n\nfig5, ax5 = plt.subplots(figsize=(12,7))\nax5.tick_params(axis='x', rotation=45)\n\n# Define y\ny_rating_type_usa = rating_type_usa['rating']\/rating_type_usa['rating'].sum()\ny_rating_type_india = rating_type_india['rating']\/rating_type_india['rating'].sum()\ny_rating_type_uk = rating_type_uk['rating']\/rating_type_uk['rating'].sum()\ny_rating_type_japan = rating_type_japan['rating']\/rating_type_japan['rating'].sum()\n\n## PLOT\nax5.plot(x_rating_type, y_rating_type_usa, 'o-', color='steelblue', label='USA')\nax5.plot(x_rating_type, y_rating_type_india, 'o-', color='lightsalmon', label='India')\nax5.plot(x_rating_type, y_rating_type_uk, 'o-', color='olivedrab', label='UK')\nax5.plot(x_rating_type, y_rating_type_japan, 'o-', color='indianred', label='Japan')\n\n# Label\nax5.set_title('Rating Type Comparison', fontsize=15)\nax5.set_ylabel('Ratio', fontsize=15)\nax5.legend(loc='upper right', prop={'size': 15})\n\nplt.show()","f935755e":"dataframe.head(1)","99cec082":"# Format 'date_added'\n\ndataframe['date_added'] = dataframe['date_added'].str.replace(',', '')\ndataframe['date_added'] = dataframe['date_added'].str.strip()\n\n# Create dataframe\n\ndataframe['year'] = dataframe['date_added'].str.split('\/').str[2]\ndataframe_without_2020 = dataframe[~(dataframe['year'] == '2020')]\ndataframe_added = dataframe_without_2020.groupby('year').agg('count')\ndataframe_added.reset_index(inplace = True)\ndataframe_added = dataframe_added[['year', 'type']]\n\n\n","0f5efb4a":"# PLOT\n\nfig6, ax6 = plt.subplots(figsize=(11,7))\nax6.bar(dataframe_added['year'], dataframe_added['type'], color='steelblue')\nax6.set_title('Content Added Over the Years', fontsize = 15)\n\n# Annotate values\n\nfor a,b in zip(dataframe_added['year'], dataframe_added['type']):\n    plt.annotate(str(b), xy = (a,b), xytext = (-11,4), textcoords = 'offset points')\n\n\nplt.show()","05e60bc9":"dataframe_without_2020.columns","0d841d47":"dataframe_without_2020.head()","dad0ad17":"# Create dataframe\n\ndataframe2 = dataframe_without_2020[dataframe_without_2020['type'] == 'Movie']\ndataframe3 = dataframe_without_2020[dataframe_without_2020['type'] == 'TV Show']\n\nx2 = dataframe2.groupby('year').agg('count')\nx2.reset_index(inplace = True)\n\nx3 = dataframe3.groupby('year').agg('count')\nx3.reset_index(inplace = True)","6ea3e30f":"x2.head(5)","c329559c":"x3.head()","246dee8d":"\"\"\"\n# PLOT\n\nfig7, ax7 = plt.subplots(figsize = (11,7))\nax7.plot(x2['year'], x2['type'], 'o-', color = 'steelblue') # Movie\nax7.plot(x3['year'], x3['type'], 'o-', color = 'salmon') # TV Show\n\n# Max values\n\ny_max_movies = max(x2['type'])\ny_max_tv = max(x3['type'])\nx_max_movies = x2.iloc[x2['type'].idxmax]['year']\nx_max_tv = x3.iloc[x3['type'].idxmax]['year']\n\n# Annotate max values\n\nplt.annotate(str(y_max_movies), xy = (x_max_movies, y_max_movies), xytext = (0,5), textcoords = 'offset points')\nplt.annotate(str(y_max_tv), xy = (x_max_tv, y_max_tv), xytext = (0,5), textcoords = 'offset points')\n\n# Label\n\nplt.yticks(np.arange(0, y_max_movies, step = 200))\nax7.legend(labels = ['Movies', 'TV Shows'], loc = 'lower right', prop = {'size' : 13})\nax7.set_title('Movies & TV Shows Added Over the Years', fontsize = 15)\n\nplt.show()\n\"\"\"","4db506dc":"dataframe.head()","5241fb88":"# Sort by 'release_year', and extend sortingg to 'type', 'title', and 'release_year'\ndataframe_oldest_movies = dataframe.sort_values('release_year')[['type', 'title', 'release_year']]\n\n# Mark as 'Movie'\ndataframe_oldest_movies[dataframe_oldest_movies['type'] == 'Movie']\n\n# Columns 'title' and 'release_year'\ndataframe_oldest_movies = dataframe_oldest_movies[['title', 'release_year']]\n\ndataframe_oldest_movies.head()","84790990":"# Sort by 'release_year', and extend sortingg to 'type', 'title', and 'release_year'\ndataframe_oldest_shows = dataframe.sort_values('release_year')[['type', 'title', 'release_year']]\n\n# Mark as 'TV Show'\ndataframe_oldest_shows[dataframe_oldest_shows['type'] == 'TV Show']\n\n# Columns 'title' and 'release_year'\ndataframe_oldest_shows = dataframe_oldest_shows[['title', 'release_year']]\n\ndataframe_oldest_shows.head(5)","958a9fd2":"dataframe.head(1)","a8ceab0b":"dataframe.director","5e247e76":"# Create dataframe\n\ndataframe_director = dataframe[~dataframe['director'].isna()]\n\n# Countries (all)\n\ndataframe_director_all = dataframe_director.groupby('director').count().sort_values('type', ascending = False)\ndataframe_director_all.reset_index(inplace = True)\ndataframe_director_all = dataframe_director_all[['director', 'type']].head(10)\ndataframe_director_all = dataframe_director_all.sort_values('type')\n\n# Countries\n\ndef country_director(country):\n    dataframe_country_director = dataframe_director[dataframe_director['country'] == country]\n    dataframe_country_director = dataframe_country_director.groupby('director').count().sort_values('type', ascending = False)\n    dataframe_country_director.reset_index(inplace = True)\n    dataframe_country_director = dataframe_country_director[['director','type']].head(10)\n    dataframe_country_director = dataframe_country_director.sort_values('type')\n\n    return dataframe_country_director\n    \ndataframe_director_usa = country_director('United States')\ndataframe_director_japan = country_director('Japan')\ndataframe_director_uk = country_director('United Kingdom')\ndataframe_director_india = country_director('India')","83424d9e":"# PLOT\n\nfig8, ax8 = plt.subplots(2, 3, figsize=(17,12))\nax8[0, 0].barh(dataframe_director_all['director'], dataframe_director_all['type'], color = 'steelblue')\nax8[0, 0].set_title('Top 10 Directors Worldwide', fontsize = 15)\n\nax8[0, 1].barh(dataframe_director_usa['director'], dataframe_director_usa['type'], color = 'steelblue')\nax8[0, 1].set_title('Top 10 Directors USA', fontsize = 15)\n\nax8[0, 2].barh(dataframe_director_india['director'], dataframe_director_india['type'], color = 'steelblue')\nax8[0, 2].set_title('Top 10 Directors India', fontsize = 15)\n\nax8[1, 0].barh(dataframe_director_uk['director'], dataframe_director_uk['type'], color = 'steelblue')\nax8[1, 0].set_title('Top 10 Directors UK', fontsize = 15)\n\nax8[1, 1].barh(dataframe_director_japan['director'], dataframe_director_japan['type'], color = 'steelblue')\nax8[1, 1].set_title('Top 10 Directors Japan', fontsize = 15)\n\nax8[1, 2].axis('off')\n\nfig8.tight_layout(pad = 2)","66be1652":"dataframe.columns","2bb024a7":"print('Are there any missing values? : ', dataframe.cast.isnull().values.any())","4eff43a2":"dataframe.cast","314e54ae":"# FORMAT\n\ndataframe_cast = dataframe[~dataframe['cast'].isna()]\ncast = ', '.join(str(v) for v in dataframe_cast['cast'])\ncast = cast.split(', ')\ncast_list = []\n\nfor x in cast:\n    cast_list.append((x.strip(), cast.count(x)))\ncast_list = sorted(cast_list, key = lambda x : x[1], reverse = True)\ncast_list = list(dict.fromkeys(cast_list))\n\n# Create Dataframe\n\ndataframe_cast_all = pd.DataFrame(cast_list, columns = ('actor','count'))\ndataframe_cast_all = dataframe_cast_all.head()\ndataframe_cast_all.sort_values('count', inplace = True)\n\n## Countries\n\"\"\"\ndef country_cast(country):\n    dataframe_country_cast = dataframe_cast[dataframe_cast['country'] == country]\n    dataframe_country_cast = ', '.join(str(v) for v in dataframe_country_cast['cast'])\n    dataframe_country_cast = dataframe_country_cast.split(', ')\n    \n    cast_list1 = []\n    \n    for x in dataframe_country_cast:\n        cast_list1.append((x.strip(), dataframe_country_cast(x)))\n    \n    cast_list1 = sorted(cast_list1, key = lambda x : x[1], reverse = True)\n    cast_list1 = list(dict.fromkeys(cast_list1))\n    cast_list1 = pd.DataFrame(cast_list1, columns = ('actor','count'))\n    cast_list1 = cast_list1.head(10)\n    cast_list1.sort_values('count', inplace = True)\n    \n    return cast_list1\n\"\"\"\ndef country_cast(country):\n    dataframe_country_cast = dataframe_cast[dataframe_cast['country'] == country]\n    dataframe_country_cast = ', '.join(str(v) for v in dataframe_country_cast['cast'])\n    dataframe_country_cast = dataframe_country_cast.split(', ')\n    cast_list1 = []\n    for x in dataframe_country_cast:\n        cast_list1.append((x.strip(), dataframe_country_cast.count(x)))\n    cast_list1 = sorted(cast_list1, key=lambda x: x[1], reverse=True)\n    cast_list1 = list(dict.fromkeys(cast_list1))\n    cast_list1 = pd.DataFrame(cast_list1, columns=('actor', 'count'))\n    cast_list1 = cast_list1.head(10)\n    cast_list1.sort_values('count', inplace=True)\n    return cast_list1\n\ndataframe_cast_usa = country_cast('United States')\ndataframe_cast_japan = country_cast('Japan')\ndataframe_cast_uk = country_cast('United Kingdom')\ndataframe_cast_india = country_cast('India')","38c1effb":"# PLOT\nfig15, ax15 = plt.subplots(2, 3, figsize=(17,12))\nax15[0, 0].barh(dataframe_cast_all['actor'], dataframe_cast_all['count'], color='steelblue')\nax15[0, 0].set_title('Top 10 Actors Worldwide', fontsize=15)\n\nax15[0, 1].barh(dataframe_cast_usa['actor'], dataframe_cast_usa['count'], color='steelblue')\nax15[0, 1].set_title('Top 10 Actors USA', fontsize=15)\n\nax15[0, 2].barh(dataframe_cast_india['actor'], dataframe_cast_india['count'], color='steelblue')\nax15[0, 2].set_title('Top 10 Actors India', fontsize=15)\n\nax15[1, 0].barh(dataframe_cast_uk['actor'], dataframe_cast_uk['count'], color='steelblue')\nax15[1, 0].set_title('Top 10 Actors UK', fontsize=15)\n\nax15[1, 1].barh(dataframe_cast_japan['actor'], dataframe_cast_japan['count'], color='steelblue')\nax15[1, 1].set_title('Top 10 Actors Japan', fontsize=15)\n\nax15[1, 2].axis('off')\n\nfig15.tight_layout(pad=2)","b578db73":"dataframe.head(3)","7f4c4292":"# Create Dataframe\n\ndataframe_movies = dataframe[dataframe['type'] == 'Movie']\n\ndataframe_movies.head()","f4b1e8d9":"# Countries\n\ndata_country_duration_all = dataframe_movies.groupby('duration').count()\ndata_country_duration_all.reset_index(inplace = True)\ndata_country_duration_all = data_country_duration_all[['duration','type']]\ndata_country_duration_all.columns = ['duration', 'count']\ndata_country_duration_all.sort_values('duration', inplace = True)\ndata_country_duration_all['rel'] = data_country_duration_all['count'] \/ data_country_duration_all['count'].sum()\ndata_country_duration_all['durcount'] = data_country_duration_all['duration'] * data_country_duration_all['count']\n\naverage_all_movies = data_country_duration_all['durcount'].sum() \/ data_country_duration_all['count'].sum()\n\n\ndef country_duration(country):\n    dataframe_country_duration = dataframe[(dataframe['country'] == country) & (dataframe['type'] == 'Movie')]\n    dataframe_country_duration = dataframe_country_duration.groupby('duration').count()\n    dataframe_country_duration.reset_index(inplace = True)\n    dataframe_country_duration = dataframe_country_duration[['duration','type']]\n    dataframe_country_duration.columns = ['duration','count']\n    dataframe_country_duration.sort_values('duration', inplace = True)\n    dataframe_country_duration['rel'] = dataframe_country_duration['count'] \/ dataframe_country_duration['count'].sum()\n    dataframe_country_duration['durcount']=dataframe_country_duration['duration'] * dataframe_country_duration['count']\n    return dataframe_country_duration\n\n\n# PLOT\n\nfig9, ax9 = plt.subplots(figsize = (20,3))\nax9.plot(data_country_duration_all['duration'], data_country_duration_all['rel'], color = 'steelblue')\nplt.axvline(x = average_all_movies, color = 'lightsalmon', linestyle = '--')\n\n## Labels\n\nax9.set_title('Length of Movies in All Countries', fontsize = 15)\nax9.set_ylabel('Relative Distribution', fontsize = 15)\nax9.set_xlabel('Minutes', fontsize = 15)\nax9.legend(labels = ['duration','average duration'], loc = 'upper right', prop = {'size':15})\n\n\nfor x in range(4):\n    for y in range(1):\n        dataframe_count = country_duration(countries[x])\n        fig10, ax10 = plt.subplots(figsize = (20,3))\n        ### Plot\n        ax10.plot(dataframe_count['duration'], dataframe_count['rel'], color = 'steelblue')\n        ax10.set_title('Movie Lengths in ' + countries[x], fontsize = 15)\n        ax10.set_ylabel('Relative Distribution', fontsize=15)\n        ax10.set_xlabel('Minutes', fontsize = 15)\n        \n        average_movies = dataframe_count['durcount'].sum() \/ dataframe_count['count'].sum()\n        plt.axvline(x = average_movies, color='lightsalmon', linestyle='--')\n        ax10.legend(labels = ['duration','average duration'],loc = 'upper right', prop = {'size': 15})\n        plt.show()","965b9fe8":"data_country_duration_all","bb988544":"print('Average', average_all_movies)","0348e4fd":"- Nearly twice as many movies than TV shows on Netflix (worldwide).","3084c5f9":"## Most Used WORDS for Titles","be886400":"- Netflix began to add a lot more movies than TV shows after 2016.\n- Movies > TV shows : Nearly twice as many movies each year.","2cca95c6":"## Content(s) Added Over the Years","1a7fae4e":"## Content Types","a4a303be":"## Directors with the Most Content","8db81d51":"- The amount of content spiked in 2016, and more specifically, at least 400 movies and\/or TV shows are added in the proceeding years.\n- 2017 marked the largest growth for media.","519f1885":"### Movies and TV Shows Added Over the Years","ae7e78d9":"## Average Movie Length","0970ed96":"## Rating Type","1ffa3c8f":"### Import Modules and Load File","5ab4531e":"#### Oldest TV Shows","6dda276c":"# NETFLIX Exploratory Data Analysis (as of 2019)","9fcef010":"## Countries with Most Content ","9e71991c":"## Objective\n- Answer the following questions:\n    - Countries with Most Content\n    - Content Types\n    - Rating Types\n    - Content Added Over the Years\n    - Directors with Most Content\n    - Actors with Mostt Content\n    - Average Movie Length\n    - Average Number of Season(s) per TV Show\n    - Top 15 Genres\n    - Most Used WORDS for Titles","92fdcd27":"- Based on the analysis, more than 75% of the content are not suitable for younger viewers and children under the age of 13.\n    - 33% TV-MA : This program is specifically designed to be viewed by adults and therefore may be unsuitable for children under 17)\n    - 27% TV-14 : This program contains some material that many parents would find unsuitable for children under 14 years of age.\n    - 11% TV-PG: This program contains material that parents may find unsuitable for younger children.\n    - 8% R: Viewers under 17 require a accompanying parent or adult guardian.","2e6044bf":"## Actors with the Most Content","615f44cd":"# Average Number of Season(s) per TV Show","ac929972":"- U.S. has largest volume of content.\n- Most of India's contents are movies.\n- UK: (Movie : TV shows)\n- Japan: (TV Shows > Movies)","1fc0d3b1":"## Data\n- https:\/\/www.kaggle.com\/nammmx\/netflix-content-exploratory-data-analysis\n- Dataset consists of shows and movies available on Netflix as of 2019.\n- Collected from Flixable (third-party Netflix search engine)","2dd56e30":"### Clean Data","cb3b6893":"- India rated highest for adult-rated content, while the U.S. has a more balanced spread of rating types that may be more suitable for younger viewers.","1fa48723":"#### Oldest Movies","fbb90143":"## Top 15 Genres","8e6c4d7d":"#### Rate Type Comparison"}}