{"cell_type":{"e530be9f":"code","b1385491":"code","cf9e5af7":"code","05cfe92e":"code","177c8bf1":"code","c4bbc694":"code","c9c0a330":"code","4e98c345":"code","a930cd39":"code","5a2ce522":"code","82f0eb9e":"code","c494a854":"code","4863e5a0":"code","c4de4c91":"code","32fcad4b":"code","cdf89406":"code","295b7a6c":"code","54953c82":"code","bccadf80":"code","6a1088b5":"code","5a265c5a":"code","9e7bc728":"code","b6e2be54":"code","7c30c255":"code","6f36e820":"code","fa40661c":"code","d926d07f":"code","028bff85":"code","cf5fe6d3":"markdown","67273f0b":"markdown","d7d6db33":"markdown","c4ad3a04":"markdown"},"source":{"e530be9f":"%matplotlib inline\nimport pandas as pd\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\npd.set_option('display.max_columns', 99)\npd.set_option('display.max_rows', 99)\nimport os\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom tqdm import tqdm\nimport datetime as dt","b1385491":"import matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [16, 10]\nplt.rcParams['font.size'] = 14\nimport seaborn as sns\nsns.set_palette(sns.color_palette('tab20', 20))\n\nimport plotly.express as px\nimport plotly.graph_objects as go","cf9e5af7":"COMP = '..\/input\/covid19-global-forecasting-week-4'\nDATEFORMAT = '%Y-%m-%d'\n\n\ndef get_comp_data(COMP):\n    train = pd.read_csv(f'{COMP}\/train.csv')\n    test = pd.read_csv(f'{COMP}\/test.csv')\n    submission = pd.read_csv(f'{COMP}\/submission.csv')\n    print(train.shape, test.shape, submission.shape)\n    train['Country_Region'] = train['Country_Region'].str.replace(',', '')\n    test['Country_Region'] = test['Country_Region'].str.replace(',', '')\n\n    train['Location'] = train['Country_Region'] + '-' + train['Province_State'].fillna('')\n\n    test['Location'] = test['Country_Region'] + '-' + test['Province_State'].fillna('')\n\n    train['LogConfirmed'] = to_log(train.ConfirmedCases)\n    train['LogFatalities'] = to_log(train.Fatalities)\n    train = train.drop(columns=['Province_State'])\n    test = test.drop(columns=['Province_State'])\n\n    country_codes = pd.read_csv('..\/input\/covid19-metadata\/country_codes.csv', keep_default_na=False)\n    train = train.merge(country_codes, on='Country_Region', how='left')\n    test = test.merge(country_codes, on='Country_Region', how='left')\n\n    train['DateTime'] = pd.to_datetime(train['Date'])\n    test['DateTime'] = pd.to_datetime(test['Date'])\n    \n    return train, test, submission\n\n\ndef process_each_location(df):\n    dfs = []\n    for loc, df in tqdm(df.groupby('Location')):\n        df = df.sort_values(by='Date')\n        df['Fatalities'] = df['Fatalities'].cummax()\n        df['ConfirmedCases'] = df['ConfirmedCases'].cummax()\n        df['LogFatalities'] = df['LogFatalities'].cummax()\n        df['LogConfirmed'] = df['LogConfirmed'].cummax()\n        df['LogConfirmedNextDay'] = df['LogConfirmed'].shift(-1)\n        df['ConfirmedNextDay'] = df['ConfirmedCases'].shift(-1)\n        df['DateNextDay'] = df['Date'].shift(-1)\n        df['LogFatalitiesNextDay'] = df['LogFatalities'].shift(-1)\n        df['FatalitiesNextDay'] = df['Fatalities'].shift(-1)\n        df['LogConfirmedDelta'] = df['LogConfirmedNextDay'] - df['LogConfirmed']\n        df['ConfirmedDelta'] = df['ConfirmedNextDay'] - df['ConfirmedCases']\n        df['LogFatalitiesDelta'] = df['LogFatalitiesNextDay'] - df['LogFatalities']\n        df['FatalitiesDelta'] = df['FatalitiesNextDay'] - df['Fatalities']\n        dfs.append(df)\n    return pd.concat(dfs)\n\n\ndef add_days(d, k):\n    return dt.datetime.strptime(d, DATEFORMAT) + dt.timedelta(days=k)\n\n\ndef to_log(x):\n    return np.log(x + 1)\n\n\ndef to_exp(x):\n    return np.exp(x) - 1\n","05cfe92e":"start = dt.datetime.now()\ntrain, test, submission = get_comp_data(COMP)\ntrain.shape, test.shape, submission.shape\ntrain.head(2)\ntest.head(2)","177c8bf1":"train[train.geo_region.isna()].Country_Region.unique()\ntrain = train.fillna('#N\/A')\ntest = test.fillna('#N\/A')\n\ntrain[train.duplicated(['Date', 'Location'])]\ntrain.count()","c4bbc694":"train.describe()\ntrain.nunique()\ntrain.dtypes\ntrain.count()\n\nTRAIN_START = train.Date.min()\nTEST_START = test.Date.min()\nTRAIN_END = train.Date.max()\nTEST_END = test.Date.max()\nTRAIN_START, TRAIN_END, TEST_START, TEST_END","c9c0a330":"train = train.sort_values(by='Date')\ncountries_latest_state = train[train['Date'] == TRAIN_END].groupby([\n    'Country_Region', 'continent', 'geo_region', 'country_iso_code_3']).sum()[[\n    'ConfirmedCases', 'Fatalities']].reset_index()\ncountries_latest_state['Log10Confirmed'] = np.log10(countries_latest_state.ConfirmedCases + 1)\ncountries_latest_state['Log10Fatalities'] = np.log10(countries_latest_state.Fatalities + 1)\ncountries_latest_state = countries_latest_state.sort_values(by='Fatalities', ascending=False)\ncountries_latest_state.to_csv('countries_latest_state.csv', index=False)\n\ncountries_latest_state.shape\ncountries_latest_state.head()","4e98c345":"fig = go.Figure(data=go.Choropleth(\n    locations = countries_latest_state['country_iso_code_3'],\n    z = countries_latest_state['Log10Confirmed'],\n    text = countries_latest_state['Country_Region'],\n    colorscale = 'viridis_r',\n    autocolorscale=False,\n    reversescale=False,\n    marker_line_color='darkgray',\n    marker_line_width=0.5,\n    colorbar_tickprefix = '10^',\n    colorbar_title = 'Confirmed cases <br>(log10 scale)',\n))\n\n_ = fig.update_layout(\n    title_text=f'COVID-19 Global Cases [Updated: {TRAIN_END}]',\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    )\n)\n\nfig.show()","a930cd39":"fig = go.Figure(data=go.Choropleth(\n    locations = countries_latest_state['country_iso_code_3'],\n    z = countries_latest_state['Log10Fatalities'],\n    text = countries_latest_state['Country_Region'],\n    colorscale = 'viridis_r',\n    autocolorscale=False,\n    reversescale=False,\n    marker_line_color='darkgray',\n    marker_line_width=0.5,\n    colorbar_tickprefix = '10^',\n    colorbar_title = 'Deaths <br>(log10 scale)',\n))\n\n_ = fig.update_layout(\n    title_text=f'COVID-19 Global Deaths [Updated: {TRAIN_END}]',\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    )\n)\n\nfig.show()","5a2ce522":"countries_latest_state['DeathConfirmedRatio'] = (countries_latest_state.Fatalities + 1) \/ (countries_latest_state.ConfirmedCases + 1)\ncountries_latest_state['DeathConfirmedRatio'] = countries_latest_state['DeathConfirmedRatio'].clip(0, 0.15) \nfig = px.scatter(countries_latest_state,\n                 x='ConfirmedCases',\n                 y='Fatalities',\n                 color='DeathConfirmedRatio',\n                 size='Log10Fatalities',\n                 size_max=20,\n                 hover_name='Country_Region',\n                 color_continuous_scale='viridis_r'\n)\n_ = fig.update_layout(\n    title_text=f'COVID-19 Deaths vs Confirmed Cases by Country [Updated: {TRAIN_END}]',\n    xaxis_type=\"log\",\n    yaxis_type=\"log\",\n    width = 1600,\n    height = 900,\n)\nfig.show()","82f0eb9e":"# The source dataset is not necessary cumulative we will force it\nlatest_loc = train[train['Date'] == TRAIN_END][['Location', 'ConfirmedCases', 'Fatalities']]\nmax_loc = train.groupby(['Location'])[['ConfirmedCases', 'Fatalities']].max().reset_index()\ncheck = pd.merge(latest_loc, max_loc, on='Location')\nnp.mean(check.ConfirmedCases_x == check.ConfirmedCases_y)\nnp.mean(check.Fatalities_x == check.Fatalities_y)\ncheck[check.Fatalities_x != check.Fatalities_y]\ncheck[check.ConfirmedCases_x != check.ConfirmedCases_y]","c494a854":"train_clean = process_each_location(train)\n\ntrain_clean.shape\ntrain_clean.tail()","4863e5a0":"regional_progress = train_clean.groupby(['DateTime', 'continent']).sum()[['ConfirmedCases', 'Fatalities']].reset_index()\nregional_progress['Log10Confirmed'] = np.log10(regional_progress.ConfirmedCases + 1)\nregional_progress['Log10Fatalities'] = np.log10(regional_progress.Fatalities + 1)\nregional_progress = regional_progress[regional_progress.continent != '#N\/A']\nregional_progress = regional_progress.sort_values(by=['continent', 'DateTime'])\n\nregional_progress['ConfirmedCasesDiff'] = regional_progress.groupby('continent').ConfirmedCases.diff().rolling(3).mean()\nregional_progress['FatalitiesDiff'] = regional_progress.groupby('continent').Fatalities.diff().rolling(3).mean()","c4de4c91":"fig = px.area(regional_progress, x=\"DateTime\", y=\"ConfirmedCases\", color=\"continent\")\n_ = fig.update_layout(\n    title_text=f'COVID-19 Cumulative Confirmed Cases by Continent [Updated: {TRAIN_END}]',\n    width=1600,\n    height=900\n)\nfig.show()\nfig2 = px.line(regional_progress, x='DateTime', y='ConfirmedCases', color='continent')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Cases by Continent [Updated: {TRAIN_END}]'\n)\nfig2.show()\n\nfig3 = px.line(regional_progress, x='DateTime', y='ConfirmedCasesDiff', color='continent')\n_ = fig3.update_layout(\n    title_text=f'COVID-19 Daily New Confirmed Cases by Continent [Updated: {TRAIN_END}]'\n)\nfig3.show()\n\n","32fcad4b":"fig = px.area(regional_progress, x=\"DateTime\", y=\"Fatalities\", color=\"continent\")\n_ = fig.update_layout(\n    title_text=f'COVID-19 Cumulative Confirmed Deaths by Continent [Updated: {TRAIN_END}]'\n)\nfig.show()\nfig2 = px.line(regional_progress, x='DateTime', y='Fatalities', color='continent')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Deaths by Continent [Updated: {TRAIN_END}]'\n)\nfig2.show()\nfig3 = px.line(regional_progress, x='DateTime', y='FatalitiesDiff', color='continent')\n_ = fig3.update_layout(\n    title_text=f'COVID-19 Daily New Fatalities by Continent [Updated: {TRAIN_END}]'\n)\nfig3.show()","cdf89406":"china = train_clean[train_clean.Location.str.startswith('China')]\ntop10_locations = china.groupby('Location')[['ConfirmedCases']].max().sort_values(\n    by='ConfirmedCases', ascending=False).reset_index().Location.values[:10]\nfig2 = px.line(china[china.Location.isin(top10_locations)], x='DateTime', y='ConfirmedCases', color='Location')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Cases in China [Updated: {TRAIN_END}]'\n)\nfig2.show()","295b7a6c":"europe = train_clean[train_clean.continent == 'Europe']\ntop10_locations = europe.groupby('Location')[['ConfirmedCases']].max().sort_values(\n    by='ConfirmedCases', ascending=False).reset_index().Location.values[:10]\nfig2 = px.line(europe[europe.Location.isin(top10_locations)], x='DateTime', y='ConfirmedCases', color='Location')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Cases in Europe [Updated: {TRAIN_END}]'\n)\nfig2.show()","54953c82":"us = train_clean[train_clean.Country_Region == 'US']\ntop10_locations = us.groupby('Location')[['ConfirmedCases']].max().sort_values(\n    by='ConfirmedCases', ascending=False).reset_index().Location.values[:10]\nfig2 = px.line(us[us.Location.isin(top10_locations)], x='DateTime', y='ConfirmedCases', color='Location')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Cases in the USA [Updated: {TRAIN_END}]'\n)\nfig2.show()","bccadf80":"africa = train_clean[train_clean.continent == 'Africa']\ntop10_locations = africa.groupby('Location')[['ConfirmedCases']].max().sort_values(\n    by='ConfirmedCases', ascending=False).reset_index().Location.values[:10]\nfig2 = px.line(africa[africa.Location.isin(top10_locations)], x='DateTime', y='ConfirmedCases', color='Location')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Cases in Africa [Updated: {TRAIN_END}]'\n)\nfig2.show()","6a1088b5":"country_progress = train_clean.groupby(['Date', 'DateTime', 'Country_Region']).sum()[[\n    'ConfirmedCases', 'Fatalities', 'ConfirmedDelta', 'FatalitiesDelta']].reset_index()\ntop10_countries = country_progress.groupby('Country_Region')[['Fatalities']].max().sort_values(\n    by='Fatalities', ascending=False).reset_index().Country_Region.values[:10]\n\nfig2 = px.line(country_progress[country_progress.Country_Region.isin(top10_countries)],\n               x='DateTime', y='ConfirmedCases', color='Country_Region')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Cases by Country [Updated: {TRAIN_END}]'\n)\nfig2.show()\nfig3 = px.line(country_progress[country_progress.Country_Region.isin(top10_countries)],\n               x='DateTime', y='Fatalities', color='Country_Region')\n_ = fig3.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Deaths by Country [Updated: {TRAIN_END}]'\n)\nfig3.show()","5a265c5a":"countries_0301 = country_progress[country_progress.Date == '2020-03-01'][[\n    'Country_Region', 'ConfirmedCases', 'Fatalities']]\ncountries_0331 = country_progress[country_progress.Date == '2020-03-31'][[\n    'Country_Region', 'ConfirmedCases', 'Fatalities']]\ncountries_in_march = pd.merge(countries_0301, countries_0331, on='Country_Region', suffixes=['_0301', '_0331'])\ncountries_in_march['IncreaseInMarch'] = countries_in_march.ConfirmedCases_0331 \/ (countries_in_march.ConfirmedCases_0301 + 1)\ncountries_in_march = countries_in_march[countries_in_march.ConfirmedCases_0331 > 200].sort_values(\n    by='IncreaseInMarch', ascending=False)\ncountries_in_march.tail(15)","9e7bc728":"selected_countries = [\n    'Italy', 'Vietnam', 'Bahrain', 'Singapore', 'Taiwan*', 'Japan', 'Kuwait', 'Korea, South', 'China']\nfig2 = px.line(country_progress[country_progress.Country_Region.isin(selected_countries)],\n               x='DateTime', y='ConfirmedCases', color='Country_Region')\n_ = fig2.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Confirmed Cases by Country [Updated: {TRAIN_END}]'\n)\nfig2.show()\nfig3 = px.line(country_progress[country_progress.Country_Region.isin(selected_countries)],\n               x='DateTime', y='Fatalities', color='Country_Region')\n_ = fig3.update_layout(\n    yaxis_type=\"log\",\n    title_text=f'COVID-19 Cumulative Deaths by Country [Updated: {TRAIN_END}]'\n)\nfig3.show()","b6e2be54":"train_clean['Geo#Country#Contintent'] = train_clean.Location + '#' + train_clean.Country_Region + '#' + train_clean.continent\nlatest = train_clean[train_clean.Date == TRAIN_END][[\n    'Geo#Country#Contintent', 'ConfirmedCases', 'Fatalities', 'LogConfirmed', 'LogFatalities']]\ndaily_confirmed_deltas = train_clean[train_clean.Date >= '2020-03-17'].pivot(\n    'Geo#Country#Contintent', 'Date', 'LogConfirmedDelta').round(3).reset_index()\ndaily_confirmed_deltas = latest.merge(daily_confirmed_deltas, on='Geo#Country#Contintent')\ndaily_confirmed_deltas.shape\ndaily_confirmed_deltas.head()\ndaily_confirmed_deltas.to_csv('daily_confirmed_deltas.csv', index=False)","7c30c255":"deltas = train_clean[np.logical_and(\n        train_clean.LogConfirmed > 2,\n        ~train_clean.Location.str.startswith('China')\n)].dropna().sort_values(by='LogConfirmedDelta', ascending=False)\n\ndeltas['start'] = deltas['LogConfirmed'].round(0)\nconfirmed_deltas = pd.concat([\n    deltas.groupby('start')[['LogConfirmedDelta']].mean(),\n    deltas.groupby('start')[['LogConfirmedDelta']].std(),\n    deltas.groupby('start')[['LogConfirmedDelta']].count()\n], axis=1)\n\ndeltas.mean()\n\nconfirmed_deltas.columns = ['avg', 'std', 'cnt']\nconfirmed_deltas\nconfirmed_deltas.to_csv('confirmed_deltas.csv')","6f36e820":"fig = px.box(deltas,  x=\"start\", y=\"LogConfirmedDelta\", range_y=[0, 0.35])\nfig.show()","fa40661c":"fig = px.box(deltas[deltas.Date >= '2020-03-01'],  x=\"DateTime\", y=\"LogConfirmedDelta\", range_y=[0, 0.6])\nfig.update_layout(\n    width = 1600,\n    height = 800,\n)\nfig.show()","d926d07f":"deltas = train_clean[np.logical_and(\n        train_clean.LogConfirmed > 0,\n        ~train_clean.Location.str.startswith('China')\n)].dropna().sort_values(by='LogConfirmedDelta', ascending=False)\ndeltas = deltas[deltas['Date'] >= '2020-03-12']\n\nconfirmed_deltas = pd.concat([\n    deltas.groupby('Location')[['LogConfirmedDelta']].mean(),\n    deltas.groupby('Location')[['LogConfirmedDelta']].std(),\n    deltas.groupby('Location')[['LogConfirmedDelta']].count(),\n    deltas.groupby('Location')[['LogConfirmed']].max()\n], axis=1)\nconfirmed_deltas.columns = ['avg', 'std', 'cnt', 'max']\n\nconfirmed_deltas.sort_values(by='avg').head(10)\nconfirmed_deltas.sort_values(by='avg').tail(10)\nconfirmed_deltas.to_csv('confirmed_deltas.csv')","028bff85":"end = dt.datetime.now()\nprint('Finished', end, (end - start).seconds, 's')","cf5fe6d3":"# Countries","67273f0b":"# Continents","d7d6db33":"# Outbreak during March","c4ad3a04":"# Worldwide"}}