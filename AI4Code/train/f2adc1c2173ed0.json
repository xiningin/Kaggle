{"cell_type":{"322110cb":"code","7f43b20d":"code","e3b4dbef":"code","e24ff2fe":"code","24e999ac":"code","2245a7ab":"code","ae3eb5ca":"code","c55ea650":"code","8c360824":"code","727688c7":"code","75bdce04":"code","50e87b50":"code","bf05d8f8":"code","6020a87f":"code","1dd0668d":"code","58dac5a8":"code","13d0c2ad":"code","65becc3d":"code","af3039e3":"code","bf5c6ed8":"code","ed408c0d":"code","8eb460c5":"code","52b5688d":"code","000985f6":"code","f4b5be78":"code","ab47b723":"code","88cd3558":"code","cec5e1a9":"markdown","635efb29":"markdown","e054d76f":"markdown","3665b317":"markdown","87021d54":"markdown","14e50621":"markdown","66c4deed":"markdown","e9cc0ce1":"markdown"},"source":{"322110cb":"#import library\nimport pandas as pd\nimport numpy as np\nimport os\nimport datetime\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nsns.set()","7f43b20d":"#import dataset\nrawData = pd.read_csv(\"..\/input\/songdetails\/songs.csv\",encoding = \"ISO-8859-1\")\nrawData.head()","e3b4dbef":"#how many songs in dataset\nlist_of_songs = list(set(list(rawData['songtitle'])))\nprint('The total of songs are ' + str(len(list_of_songs)) + ':')\nlist_of_songs = pd.DataFrame(list_of_songs)\nlist_of_songs.rename(columns={list_of_songs.columns[0]:'List_of_songs'})","e24ff2fe":"#how many artists in dataset\nlist_of_artist = sorted(list(set(list(rawData['artistname']))))\nprint('The total of artists are ' + str(len(list_of_artist)) + ':')\nlist_of_artist = pd.DataFrame(list_of_artist)\nlist_of_artist.rename(columns={list_of_artist.columns[0]:'List_of_artist'})","24e999ac":"#how many artists have top 10 award\ntop10_artist = sorted(list(set(list(rawData[rawData['Top10']== 1]['artistname']))))\nprint('The number of artists have top10 song are ' + str(len(top10_artist)) + ' : ') \ntop10_artist = pd.DataFrame(top10_artist)\ntop10_artist.rename(columns={top10_artist.columns[0]:'Top10_artist'})","2245a7ab":"#Artist information extraction\ndef artistInfo(x):\n    if x in list(set(rawData['artistname'])):\n        print('For', x)\n        print('Total songs: '+ str(len(rawData[rawData['artistname']==x]['songtitle'])))\n        print(list(rawData[rawData['artistname']==x]['songtitle']))\n        print('Total frequency of top10 songs: '+ str(rawData[rawData['artistname']==x]['Top10'].sum()))\n        print('List of top10 songs:')\n        print(list(rawData[(rawData['artistname']==x) & (rawData['Top10']==1)]['songtitle']))\n    else:\n        print('There is no data for',x)","ae3eb5ca":"artistInfo('Ca Hoi Hoang')","c55ea650":"artistInfo('Sean Kingston')","8c360824":"#Visualize annual frequency of top10 songs based \n\n#1 - Create Table of top10 artist name\ntop10 = rawData[rawData['Top10']==1]\ntop10 = top10.reset_index(drop = True)\npicked_col = {'year': 'first','Top10': 'sum'}\ntable = top10.groupby(top10['year']).aggregate(picked_col)\ntable = table.reset_index(drop = True)\ntable","727688c7":"#2 - Visualize \nbar_chart2 = sns.barplot(x=table['year'], y=table['Top10'], color=(1, 0.5, 0.0, 0.0))\nplt.xlabel('Years')\nplt.ylabel('Frequency')\nbar_chart2.set_xticklabels(bar_chart2.get_xticklabels(), rotation=45)","75bdce04":"#Evaluate the correlation between top10 songs and elements that create a song through 3 periods\nPeriod1 = rawData[rawData['year']<=1991]\nPeriod2 = rawData[(rawData['year']>=1992)&(rawData['year']<=2000)]\nPeriod3 = rawData[(rawData['year']>=2001)&(rawData['year']<=2010)]","50e87b50":"Period1.corr()['Top10'][['timesignature_confidence','key_confidence','tempo_confidence','loudness','energy','pitch']]","bf05d8f8":"Period2.corr()['Top10'][['timesignature_confidence','key_confidence','tempo_confidence','loudness','energy','pitch']]","6020a87f":"Period3.corr()['Top10'][['timesignature_confidence','key_confidence','tempo_confidence','loudness','energy','pitch']]","1dd0668d":"#Use Boxplot to detect outliers in loudness, energy and pitch\n##For loudness\nfirst_qrt1 = np.quantile(rawData['loudness'],0.25)\nthird_qrt1 = np.quantile(rawData['loudness'],0.75)\nlower_whisker1 = first_qrt1 - (third_qrt1 -first_qrt1 )*1.5\nupper_whisker1 = third_qrt1 + (third_qrt1 -first_qrt1 )*1.5\nloudness_outliers = rawData[(rawData['loudness'] < lower_whisker1) | (rawData['loudness'] > upper_whisker1)] \nloudness_outliers = loudness_outliers.reset_index(drop = True)\nloudness_outliers[['year','loudness','Top10']]","58dac5a8":"print(len(rawData[(rawData['loudness'] < lower_whisker1)]))\nprint(len(rawData[(rawData['loudness'] > upper_whisker1)]))","13d0c2ad":"##For energy\nfirst_qrt2 = np.quantile(rawData['energy'],0.25)\nthird_qrt2 = np.quantile(rawData['energy'],0.75)\nlower_whisker2 = first_qrt2 - (third_qrt2 -first_qrt2 )*1.5\nupper_whisker2 = third_qrt2 + (third_qrt2 -first_qrt2 )*1.5\nenergy_outliers = rawData[(rawData['energy'] < lower_whisker2) | (rawData['energy'] > upper_whisker2)] \nenergy_outliers = energy_outliers.reset_index(drop = True)\nenergy_outliers[['year','energy','Top10']]","65becc3d":"##For pitch\nfirst_qrt3 = np.quantile(rawData['pitch'],0.25)\nthird_qrt3 = np.quantile(rawData['pitch'],0.75)\nlower_whisker3 = first_qrt3 - (third_qrt3 -first_qrt3 )*1.5\nupper_whisker3 = third_qrt3 + (third_qrt3 -first_qrt3 )*1.5\npitch_outliers = rawData[(rawData['pitch'] < lower_whisker3) | (rawData['pitch'] > upper_whisker3)] \npitch_outliers = pitch_outliers.reset_index(drop = True)\npitch_outliers[['year','pitch','Top10']]","af3039e3":"print(len(rawData[(rawData['pitch'] < lower_whisker3)]))\nprint(len(rawData[(rawData['pitch'] > upper_whisker3)]))","bf5c6ed8":"x = rawData.iloc[:,5:-2]\ny = rawData[\"Top10\"]               ","ed408c0d":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\n\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=42)","8eb460c5":"lreg = LogisticRegression(penalty='l2').fit(x_train,y_train)\nprint(\"b0 = \",lreg.intercept_)  \nprint(\"Coefs = \",lreg.coef_)       ","52b5688d":"y_pred = lreg.predict(x_test) \nlog_score = accuracy_score(y_test, y_pred)\nprint(\"Logistic_reg_SCORE = \",log_score) ","000985f6":"confusion_matrix(y_test, y_pred)\nprint(classification_report(y_test, y_pred))","f4b5be78":"logit_roc_auc = roc_auc_score(y_test, lreg.predict(x_test))\nfpr, tpr, thresholds = roc_curve(y_test, lreg.predict_proba(x_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='AUC (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive ')\nplt.ylabel('True Positive ')\nplt.title('ROC')\nplt.show()","ab47b723":"from catboost import CatBoostClassifier\ncatboost = CatBoostClassifier(eval_metric='AUC')\ncatboost.fit(x_train,y_train)","88cd3558":"accuracy_score(y_test, catboost.predict(x_test))","cec5e1a9":"Comment: \n#1- Looking at all 3 periods, 'timesignature_confidence','key_confidence' & 'tempo_confidence' are generally positive \n    => This means that higher confidence leads to a higher predicted probability of a Top 10 hit. (Recommendation for producers)\n#2- The difference between period1 & period2-3 is that in 1990 and 1991, audience much prefered the genres having heavier instrumentation tending to be louder or loud noise\n    However, moving to next periods, listeners were likely to listen to something more tender not noisy ('loudness' decreases significantly).\n    => This tendency will affect the way music is produced\n#3 - Meanwhile, they did love genres which are energetic (energy: (1) -0.195216 < (2) -0.149558 < (3) -0.094323) => It can boost audience's emotion like 'Airplanes', 'Magic'\n    => By writing a song with positive energy can pave the way for becoming a hit or on top10 billboard","635efb29":"The data distribution skewed to the right\n=> This distribution confirms that the tendency of decreasing the loudness in making music of artists","e054d76f":"Catboost","3665b317":"Prediction Model","87021d54":"Logistics Model","14e50621":"The data distribution is normal\n=> This distribution shows that musicmaker still remains the energy within standard criteria  ","66c4deed":"The data distribution skewed to the left\n=> This distribution confirms that the tendency of increasing the pitch in making music of artists beside producing stable genres","e9cc0ce1":"Comment: \n 1990 and 1991 are the 2 years having the highest frequency of top10 songs\n => 1990 and 1991 can be considered the most successful time during given period \n The other years only produced output as half as the first years did  "}}