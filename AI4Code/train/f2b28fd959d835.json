{"cell_type":{"37318ce6":"code","7f33350c":"code","fc6f16ae":"code","1ee5eb17":"code","71de7c85":"code","ad1fa5e6":"code","dbed0f18":"code","640d933f":"code","21632ebb":"code","c6c5ce68":"code","2d9ffd1a":"code","3701b5d8":"code","11cab4c5":"code","b42f6925":"code","d39d0dd6":"code","60b5c96e":"code","783a1571":"code","43b974bc":"code","03441ce1":"code","bad9bee7":"code","446ac90c":"code","0546b8b3":"code","44f7f832":"code","77640490":"code","ee8c961a":"code","69611d7a":"code","58687da3":"code","f232acbc":"code","f4e7bcf1":"code","9c05ab09":"markdown","75ee206b":"markdown","f0ca497e":"markdown","b6109c39":"markdown","7e1af251":"markdown","be947094":"markdown","1fef0aa1":"markdown","bf7434c2":"markdown","6de37a1a":"markdown","4b85cbd1":"markdown","16cee17f":"markdown","cf0335f6":"markdown","4b7e7609":"markdown","7ad19a4c":"markdown","335efc53":"markdown","68e768b9":"markdown","14aa3a3e":"markdown","a9803246":"markdown","9e7c535f":"markdown","18761921":"markdown","8d24e704":"markdown","d7669afa":"markdown"},"source":{"37318ce6":"# importar pacotes necess\u00e1rios\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\n#import matplotlib.pyplot as plt\nimport pickle","7f33350c":"# instalar pacotes especiais\n!pip install pmdarima","fc6f16ae":"# definir par\u00e2metros extras\n%matplotlib inline\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 15, 6","1ee5eb17":"# definir frequ\u00eancia a ser considerada no modelo\nfrequencia = '2W' # 7D 15D 2W 3W M\nperiodos_ano = 24\n\n# definir data inicial de corte\ndata_inicio_amostra = '2013-01'","71de7c85":"# calcular per\u00edodos que cabem em um ano\n#intervalo_ano = pd.date_range(start='2018-01-01', end='2019-01-01', freq=frequencia)\n#periodos_ano = len(intervalo_ano)\nprint('Frequ\u00eancia:', frequencia)\nprint('Per\u00edodos em um ano:', periodos_ano)\nprint('Data de in\u00edcio da amostra:', data_inicio_amostra)","ad1fa5e6":"#prefixo_arquivos = ''\nprefixo_arquivos = '..\/input\/serpro-weather\/'","dbed0f18":"# carregar arquivo de dados de treino\ntrain_data = pd.read_csv(prefixo_arquivos + 'weather-train.csv', index_col='date', parse_dates=['date'])\ntrain_data.info()\ntrain_data.head()","640d933f":"# carregar arquivo de dados de teste\ntest_data = pd.read_csv(prefixo_arquivos + 'weather-test.csv', index_col='date', parse_dates=['date'])\ntest_data.info()\ntest_data.head()","21632ebb":"# remover valores nulos\ndata = train_data.dropna()\n\n# reduzir a quantidade de dados para a frequ\u00eancia\ndata = data.resample(frequencia).mean()\n\n# filtrar per\u00edodo desejado\ndata = data[data_inicio_amostra:]\n#data = data['2013-01':]\n#data = data['2013-01':'2015-12']\n\n# converter temperatura para Kelvin\n#data['temperature'] += 273.15\n\ndata.head()","c6c5ce68":"data.info()","2d9ffd1a":"data.describe()","3701b5d8":"# criar s\u00e9rie temporal a partir do dataframe\nts = data['temperature']\nts = ts.asfreq(frequencia)\nts.head()","11cab4c5":"# plotar a s\u00e9rie temporal\nplt.plot(ts)\nplt.title('Temperatura ao longo dos anos (em graus Celsius)', fontsize=20)\nplt.show()","b42f6925":"from statsmodels.tsa.stattools import adfuller\n\ndef test_stationarity(timeseries, window):\n    \n    # Determing rolling statistics\n    rolmean = timeseries.rolling(window).mean()\n    rolstd = timeseries.rolling(window).std()\n\n    # Plot rolling statistics\n    orig = plt.plot(timeseries, color='blue', label='Original')\n    mean = plt.plot(rolmean, color='red', label='Rolling Mean')\n    std = plt.plot(rolstd, color='black', label='Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation', fontsize=20)\n    plt.show(block=False)\n    \n    # Perform Dickey-Fuller test\n    print('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries)\n    dfoutput = pd.Series(dftest[0:4], index=[\n        'Test Statistic', 'p-value', '#Lags Used', 'Number of Observations Used'])\n    for key, value in dftest[4].items():\n        dfoutput['Critical Value (%s)' % key] = value\n    print(dfoutput)","d39d0dd6":"# avaliar se a s\u00e9rie \u00e9 estacion\u00e1ria\ntest_stationarity(ts, periodos_ano)","60b5c96e":"# Plot\nfig, axes = plt.subplots(2, 1, figsize=(14,8), dpi=100, sharex=True)\n\n# Usual Differencing\naxes[0].plot(ts, label='Original Series')\naxes[0].plot(ts.diff(1), label='Usual Differencing')\naxes[0].set_title('Usual Differencing')\naxes[0].legend(loc='upper left', fontsize=10)\n\n# Seasonal 1st\naxes[1].plot(ts, label='Original Series')\naxes[1].plot(ts.diff(periodos_ano), label='Seasonal Differencing', color='green')\naxes[1].set_title('Seasonal Differencing')\nplt.legend(loc='upper left', fontsize=10)\nplt.suptitle('Temperaturas', fontsize=16)\nplt.show()","783a1571":"from statsmodels.tsa.seasonal import seasonal_decompose\n\nts_log = ts\ndecomposition = seasonal_decompose(ts_log, freq=periodos_ano)\n\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid\n\nplt.subplot(411)\nplt.plot(ts_log, label='Original')\nplt.legend(loc='best')\nplt.subplot(412)\nplt.plot(trend, label='Tend\u00eancia')\nplt.legend(loc='best')\nplt.subplot(413)\nplt.plot(seasonal,label='Sazonalidade')\nplt.legend(loc='best')\nplt.subplot(414)\nplt.plot(residual, label='Res\u00edduos')\nplt.legend(loc='best')\nplt.tight_layout()","43b974bc":"from pmdarima.arima.utils import ndiffs\n\ndft = pd.DataFrame({\n    'Teste': [\n        'ADF (Augmented Dickey-Fuller)',\n        'KPSS (Kwiatkowski\u2013Phillips\u2013Schmidt\u2013Shin)',\n        'PP (Phillips\u2013Perron)'\n    ],\n    'Valor estimado para o termo \"d\"': [\n        ndiffs(ts, test='adf'),\n        ndiffs(ts, test='kpss'),\n        ndiffs(ts, test='pp')\n    ]\n})\ndft.set_index('Teste', inplace=True)\ndft","03441ce1":"from pmdarima.arima.utils import nsdiffs\n\ndft = pd.DataFrame({\n    'Teste': [\n        'OCSB (Osborn-Chui-Smith-Birchenhall)',\n        'CH (Canova-Hansen)'\n    ],\n    'Valor estimado para o termo \"D\"': [\n        nsdiffs(ts, periodos_ano, test='ocsb'),\n        nsdiffs(ts, periodos_ano, test='ch')\n    ]\n})\ndft.set_index('Teste', inplace=True)\ndft","bad9bee7":"from pmdarima import auto_arima\n\nsmodel = auto_arima(ts, start_p=1, start_q=1,\n                         test='adf',\n                         max_p=3, max_q=3, m=periodos_ano,\n                         start_P=0, seasonal=True,\n                         d=None, D=1, trace=True,\n                         error_action='ignore',  \n                         suppress_warnings=True, \n                         stepwise=True)\n\nsmodel.summary()","446ac90c":"# realizar a previs\u00e3o\nfitted, confint = smodel.predict(n_periods=periodos_ano, return_conf_int=True)\nindex_of_fc = pd.date_range(data.index[-1], periods=periodos_ano, freq=frequencia)\n\n# criar s\u00e9ries para plotagem\nfitted_series = pd.Series(fitted, index=index_of_fc)\nlower_series = pd.Series(confint[:, 0], index=index_of_fc)\nupper_series = pd.Series(confint[:, 1], index=index_of_fc)\n\n# plotar gr\u00e1fico\nplt.plot(ts)\nplt.plot(fitted_series, color='darkgreen')\nplt.fill_between(lower_series.index, \n                 lower_series, \n                 upper_series, \n                 color='k', alpha=.15)\nplt.title(\"Previs\u00e3o de temperaturas com SARIMA\", fontsize=20)\nplt.show()","0546b8b3":"# obter intervalo de datas para a previs\u00e3o\nprimeira_data = ts.index[-1] + 1\nultima_data = pd.Timestamp(test_data.index[-1], freq='M') + 2\nprint('Intervalo de datas: %s => %s' % (primeira_data, ultima_data))\ndatas_previsao = pd.date_range(start=primeira_data, end=ultima_data, freq=frequencia)\ndatas_previsao","44f7f832":"# gerar novos valores a partir do modelo\nperiodos_previsao = len(datas_previsao)\nvalores_previstos = smodel.predict(n_periods=periodos_previsao)","77640490":"# construir dataframe com previs\u00e3o\ndf = pd.DataFrame({\n    'date': datas_previsao,\n    'temperature': valores_previstos\n})\ndf.set_index('date', inplace=True)\ndf.info()\ndf.head()","ee8c961a":"# inserir na primeira posi\u00e7\u00e3o os \u00faltimos valores de treino\ndf = (data.iloc[-2:]).append(df)\ndf.info()","69611d7a":"# obter intervalo de datas necess\u00e1rio\ndata_inicio = test_data.index[0]\ndata_final = test_data.index[-1]\nprint('Intervalo necess\u00e1rio:', data_inicio, '=>', data_final)","58687da3":"# interpolar dados para obter valores di\u00e1rios\npred_data = df.resample('D').interpolate(method='cubic')\n\n# restringir ao intervalo de datas esperado\npred_data = pred_data[data_inicio:data_final]\n\n# converter temperaturas novamente para graus Celsius\n#pred_data['temperature'] -= 273.15\n\n# exibir informa\u00e7\u00f5es do dataframe\npred_data.info()\npred_data.head()","f232acbc":"# criar diret\u00f3rio de submiss\u00f5es\n!dd=\"submissions\/\"; if [ ! -d $dd ]; then mkdir $dd; fi","f4e7bcf1":"# gravar arquivo CSV com os resultados\n#nome_arquivo = 'submissions\/weather-submission-arima-' + \\\nnome_arquivo = 'weather-submission-arima-' + \\\n    frequencia + 'x' + str(periodos_ano) + '-' + data_inicio_amostra + '.csv'\npred_data.to_csv(nome_arquivo)\nprint('Arquivo gravado com sucesso:', nome_arquivo)","9c05ab09":"https:\/\/www.alkaline-ml.com\/pmdarima\/modules\/generated\/pmdarima.arima.ndiffs.html","75ee206b":"## Modelagem preditiva","f0ca497e":"data.iloc[-2:]","b6109c39":"## Importa\u00e7\u00e3o dos pacotes","7e1af251":"### Preditor autom\u00e1tico ARIMA\n- https:\/\/www.alkaline-ml.com\/pmdarima\/modules\/generated\/pmdarima.arima.auto_arima.html","be947094":"## Gera\u00e7\u00e3o do arquivo de resultados","1fef0aa1":"https:\/\/www.alkaline-ml.com\/pmdarima\/modules\/generated\/pmdarima.arima.nsdiffs.html","bf7434c2":"### Decomposi\u00e7\u00e3o das componentes da s\u00e9rie","6de37a1a":"### Testes para estimar par\u00e2metros do ARIMA","4b85cbd1":"from statsmodels.tsa.stattools import adfuller\nresult = adfuller(ts.values)\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])","16cee17f":"## An\u00e1lise da s\u00e9rie temporal","cf0335f6":"### Previs\u00e3o de valores futuros com os dados de teste","4b7e7609":"### Analisar componente de sazonalidade","7ad19a4c":"### Avalia\u00e7\u00e3o do resultado em previs\u00f5es futuras","335efc53":"## Refer\u00eancias\n\n### pmdarima: ARIMA estimators for Python\n- https:\/\/www.alkaline-ml.com\/pmdarima\/\n\n### ARIMA Model \u2013 Complete Guide to Time Series Forecasting in Python\n- https:\/\/www.machinelearningplus.com\/time-series\/arima-model-time-series-forecasting-python\/\n\n### How to Create an ARIMA Model for Time Series Forecasting in Python\n- https:\/\/machinelearningmastery.com\/arima-for-time-series-forecasting-with-python\/\n\n### Time Series Forecasting - ARIMA models - Towards Data Science\n- https:\/\/towardsdatascience.com\/time-series-forecasting-arima-models-7f221e9eee06\n\n### Complete guide to Time Series Forecasting (with Codes in Python)\n- https:\/\/www.analyticsvidhya.com\/blog\/2016\/02\/time-series-forecasting-codes-python\/","68e768b9":"## Analisar estacionariedade","14aa3a3e":"# instalar pacotes especiais\n!pip install pmdarima","a9803246":"## Defini\u00e7\u00e3o de par\u00e2metros","9e7c535f":"# persistir em arquivo Pickle o modelo preditivo\nnome_arquivo = 'weather-model-' + frequencia + '.pickle'\npickle.dump(smodel, open(nome_arquivo, 'wb'))\nprint('Arquivo gravado com sucesso:', nome_arquivo)","18761921":"## Transforma\u00e7\u00f5es nos dados","8d24e704":"## Carga dos dados","d7669afa":"# SERPRO - Weather\n\n_Previs\u00e3o de temperaturas m\u00e9dias com base em dados hist\u00f3ricos_\n\nhttps:\/\/www.kaggle.com\/c\/serpro-weather\/"}}