{"cell_type":{"eeebfdca":"code","27671c04":"code","46203817":"code","2cba71cd":"code","8bba5cfd":"code","c11e5b84":"code","88a34bf5":"code","47fd661b":"code","3182c57e":"code","9de864c2":"code","b35a5c76":"code","5488fec2":"code","22cb272e":"markdown","5c651efe":"markdown"},"source":{"eeebfdca":"### Import Statements\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport geopandas\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n","27671c04":"proc_data = pd.read_csv(\"..\/input\/procurement-notices.csv\")","46203817":"proc_data.head()","2cba71cd":"proc_data['deadline_date'] = pd.to_datetime(proc_data['Deadline Date'], format='%Y-%m-%d')\ncurrent_calls = proc_data.loc[proc_data['deadline_date'] > pd.datetime.today()]\ncurrent_calls.head()","8bba5cfd":"calls_by_country = current_calls.groupby('Country Name').size().reset_index(name='count')\ncalls_by_country['name'] = calls_by_country['Country Name']\ncalls_by_country.head()","c11e5b84":"### read in geopandas dataset for worldmap\nworld = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\nworld.head()","88a34bf5":"merged_calls = world.merge(calls_by_country,on='name',how='outer')\nmerged_calls['count'] = merged_calls['count'].fillna(value=0)\nmerged_calls.head()","47fd661b":"merged_calls.plot(column='count',figsize=(15,20),cmap='YlOrRd',edgecolor='black')","3182c57e":"## distribution by deadline_date\n\ndue_dates = current_calls.groupby('deadline_date').size().reset_index(name='count')\ndue_dates.head()                                          ","9de864c2":"due_dates.plot(kind='line',x='deadline_date',y='count',figsize=(10,5))","b35a5c76":"### Distribution by due dates\n### Using due_dates dataframe from earlier cells\ndata = [go.Scatter(x=due_dates['deadline_date'],y=due_dates['count'])]\n\nlayout = dict(title=\"Amount of Calls out by Deadline\",\n              xaxis=dict(title='Date',ticklen=5,zeroline=False))\n                \n\nfig = dict(data=data, layout=layout)\niplot(fig)","5488fec2":"### Distribution by country\n### using merged_calls dataframe instead of calls_by_country so that I can render the entire map\n### using the geopandas world dataset\ndata = [ dict(\n        type = 'choropleth',\n        locations = merged_calls['name'],\n        z = merged_calls['count'],\n        text = merged_calls['name'],\n        locationmode = 'country names',\n)]\n          \n\nlayout = dict(\n    title = 'Number of Bids Tendered by Country',\n    geo = dict(\n        showframe = False,\n        showcoastlines = False,\n        projection = dict(\n            type = 'mercator'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","22cb272e":"### Python version of Dasboarding with Notebooks, Day 1 and 2","5c651efe":"### Day 2 : Interactive plots using plotly"}}