{"cell_type":{"9acdaaa4":"code","443aca68":"code","47c3f57a":"code","d0fe6bfb":"code","a334fc0d":"code","5aebf5c1":"code","ecfe92a8":"code","2c7aa2f2":"code","3db4d35e":"code","c9130a23":"code","9587a70f":"code","d6b569eb":"markdown","cc5d47b6":"markdown","ed9cefdd":"markdown"},"source":{"9acdaaa4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import scale\nfrom sklearn import svm\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import GridSearchCV # Para hacer validaci\u00f3n cruzada\nfrom sklearn.preprocessing import LabelEncoder # Change values of labels to 0 and 1\nimport seaborn as sns   ","443aca68":"table = pd.read_csv('..\/input\/genre-dataset\/genre_dataset.txt')\ntable = table[(table.genre.str.contains(\"jazz and blues\"))|\n        (table.genre.str.contains(\"soul and reggae\"))]\n\nfor i in range (4,len(table.columns)):\n    col = table.iloc[:,[i]].values\n    table.iloc[:,[i]] = scale(col)","47c3f57a":"table.head()","d0fe6bfb":"# Jazz es 0 en tanto Reggae es 1\nle = LabelEncoder()\ntable['genre'] = le.fit_transform(table[['genre']])\ntable.head()","a334fc0d":"# Divide in training, test and validation sets\nX_train ,X_test = train_test_split(table,test_size=0.2)\n\nx_train = X_train.iloc[:,4:].values\ny_train = X_train.iloc[:,0]\nx_test = X_test.iloc[:,4:].values\ny_test = X_test.iloc[:,0]","5aebf5c1":"cls = svm.SVC(kernel='poly')","ecfe92a8":"# Ajuste del grado del polinomio\nsmallgrid = {'degree': [1,2,3,4,5,6,7,8,9,10], 'C': [2]}\ngrid1 = GridSearchCV(cls,smallgrid)\ngrid1.fit(x_train,y_train)\n\n# Graficar los resultados\ngrid_result1 = pd.DataFrame(grid1.cv_results_)\nplt = grid_result1.plot(x ='param_degree', y='mean_test_score')\nplt = plt.set_ylabel(\"Precisi\u00f3n\")","2c7aa2f2":"# Ajuste de los par\u00e1metros del modelo en conjunto\nparam_grid = {'C': [0.1,1, 10, 100],'degree': [2,3,4,5]}\ngrid = GridSearchCV(cls,param_grid)\ngrid.fit(x_train,y_train)\n\npvt = pd.pivot_table(pd.DataFrame(grid.cv_results_),\n    values='mean_test_score', index='param_degree', columns='param_C')\nsns.heatmap(pvt, annot=True)","3db4d35e":"# Ajuste del grado del polinomio\nsmallgrid2 = {'C': [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20],'degree': [3]}\ngrid2 = GridSearchCV(cls,smallgrid2)\ngrid2.fit(x_train,y_train)\n\n# Graficar los resultados\ngrid_result2 = pd.DataFrame(grid2.cv_results_)\nplt = grid_result2.plot(x ='param_C', y='mean_test_score')\nplt = plt.set_ylabel(\"Precisi\u00f3n\")","c9130a23":"# Ajuste del grado del polinomio\nsmallgrid3 = {'gamma': [0.001, 0.01, 0.1], 'C': [2],'degree': [3]}\ngrid3 = GridSearchCV(cls,smallgrid3)\ngrid3.fit(x_train,y_train)\n\n# Graficar los resultados\ngrid_result3 = pd.DataFrame(grid3.cv_results_)\nplt3 = grid_result3.plot(x ='param_gamma', y='mean_test_score')","9587a70f":"cls_final = svm.SVC(kernel='poly', C=2, degree=3, gamma=0.01)\n# Entrenamiento\ncls_final.fit(x_train,y_train)\n# Test con datos de prueba\npred =  cls_final.predict(x_test)\nprint('accuracy:', metrics.accuracy_score(y_test,y_pred=pred))\nprint (metrics.classification_report(y_test,y_pred=pred))","d6b569eb":"Se considera entonces que los hiperpar\u00e1metros \u00f3ptimos son gamma=0.01 y C=2 para un polinomio de grado 3. Se emplea ahora el set de prueba para calcular la precisi\u00f3n.","cc5d47b6":"Se hace una rejilla para analizar el cambio de la precisi\u00f3n variando los hiperpar\u00e1metros del modelo polinomial. En primer lugar se var\u00eda \u00fanicamente del grado del polinomio, posteriormente se analizan todos los par\u00e1metros en conjunto.","ed9cefdd":"Posteriormente, se dividen en test de entrenamiento, prueba y validaci\u00f3n"}}