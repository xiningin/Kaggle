{"cell_type":{"91280f60":"code","4a4da371":"code","d0c1b4f1":"code","cc130d1e":"code","3d9a4ef3":"code","b6a5fd8b":"code","a0d32f95":"code","0c9a8052":"code","5967243b":"code","f22c9b21":"code","2d623257":"code","56fd0abf":"code","39302d4b":"code","9258e7e7":"code","e4a16244":"code","7500ca0a":"code","7ff5f6b5":"code","b816b776":"code","c87e5429":"code","3c32b05e":"code","3455b232":"code","b6bc0c8c":"code","1eaac665":"code","5f28efff":"code","99d81bae":"code","1bf1cc68":"code","ef0e1a9c":"code","bf35ff45":"code","c31987f7":"code","6e0a0283":"code","4096b8c7":"code","61e5518f":"code","c6f828b0":"code","b526d7e8":"code","8a3a3e71":"code","5c7f6be7":"code","bfabdccf":"code","76e983d5":"code","9cf25f84":"code","857e3199":"code","f522614a":"code","7fc37218":"code","0f670eac":"code","a1205c1f":"code","ae9ea3f2":"code","13d81b42":"code","e804724b":"code","17d2a4e7":"code","57223c50":"code","cbcb30a3":"code","9a51d2b7":"code","e07240f3":"code","6da8fb11":"code","90d116d6":"code","230df57d":"code","b6ea2586":"code","17d46900":"code","99a5bbbc":"code","4b31506f":"code","62d2f94f":"code","797a5870":"code","6aa79f60":"code","87092c76":"code","24ba4426":"code","a3c5d0f5":"code","f0d26bc2":"code","9c00da50":"code","df106b82":"code","a30e02c6":"code","48808fe6":"code","0605f6e1":"code","8ba51dcf":"code","21b2b1ca":"code","b57add0c":"code","a6baa856":"code","b3a2ed50":"code","97f70907":"code","a13a1e0b":"code","33cbf6da":"code","cd11b293":"code","9061cd03":"code","8b37c7c2":"code","1fbefaee":"code","a3c329a3":"code","945979fa":"code","57544d5d":"code","cf4d19bc":"code","f4d249a7":"markdown","01e4d55d":"markdown","42f03eec":"markdown","f0bf7e3f":"markdown","4f94e314":"markdown","14746ad1":"markdown","c6595947":"markdown","97743339":"markdown","b572f307":"markdown","77b8de20":"markdown","ad1c9598":"markdown","0246d49d":"markdown","f5eb1ff8":"markdown","e5e9fa12":"markdown","4085a01d":"markdown","ffd1d2df":"markdown"},"source":{"91280f60":"#import some popular libraries we will use in this project \nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","4a4da371":"#reading the DataFile\ndata = pd.read_csv(\"..\/input\/body-performance-data\/bodyPerformance.csv\", sep = \",\" , encoding=\"utf-8\")","d0c1b4f1":"#Displaying The Data\ndata","cc130d1e":"#checking the null values in the dataset\ndata.isnull().sum()","3d9a4ef3":"#Return all distinct value in each column\ndata.nunique()","b6a5fd8b":"#return some information about each column as DataType and Number of Entries\ndata.info()","a0d32f95":"# change all float DataTypes to int ones \n\ndata['age']=data.age.astype(int)\ndata['height_cm']=data.height_cm.astype(int)\ndata['weight_kg']=data.weight_kg.astype(int)\ndata['body fat_%']=data['body fat_%'].astype(int)\ndata['diastolic']=data.diastolic.astype(int)\ndata['systolic']=data.systolic.astype(int)\ndata['gripForce']=data.gripForce.astype(int)","0c9a8052":"#Histogram of all data's feature Distribution\ndata.hist(bins=100 , figsize=(14,16))\nplt.show()","5967243b":"#Height Distribution\nsns.histplot(data = data,x = 'height_cm')","f22c9b21":"#Weight Distribution\nsns.histplot(data = data,x = 'weight_kg',kde=True)","2d623257":"#Gender Distribution\nround(data['gender'].value_counts()\/data.shape[0]*100,2).plot.pie(autopct = '%1.1f%%')","56fd0abf":"#Class Distribution w.r.t gender\nsns.countplot(x = data['gender'], data = data, hue = data['class'])","39302d4b":"#Classes Distribution\nround(data['class'].value_counts()\/data.shape[0]*100,2).plot.pie(autopct = '%1.1f%%')","9258e7e7":"#Age Distribution\nsns.histplot(data = data,x = 'age')","e4a16244":"data['gender'].value_counts()","7500ca0a":"data['class'].value_counts()","7ff5f6b5":"data.replace(\"M\", 0 , inplace = True)\ndata.replace(\"F\", 1 , inplace = True)","b816b776":"data.replace(\"A\", 0 , inplace = True)\ndata.replace(\"B\", 1 , inplace = True)\ndata.replace(\"C\", 2 , inplace = True)\ndata.replace(\"D\", 3 , inplace = True)","c87e5429":"data","3c32b05e":"plt.figure(figsize=(12,8))\nsns.heatmap( data.corr(), annot = True)","3455b232":"plt.figure(figsize=(15,10))\ndata.boxplot(vert=0)","b6bc0c8c":"data.columns","1eaac665":"#Replacing some names of columns to be easily used in the way we implement it to remove outliers \ndata.columns = data.columns.str.replace('sit and bend forward_cm', 'sit_and_bend_forward_cm')","5f28efff":"data.columns = data.columns.str.replace('sit-ups_counts', 'sit_ups_counts')\ndata.columns = data.columns.str.replace('broad jump_cm', 'broad_jump_cm')\ndata.columns = data.columns.str.replace('body fat_%', 'body_fat_per')\ndata","99d81bae":"plt.figure(figsize=(15,10))\ndata.boxplot(vert=0)","1bf1cc68":"data.columns","ef0e1a9c":"min_thresold, max_thresold = data.broad_jump_cm.quantile([0.005, 1])\nmin_thresold, max_thresold","bf35ff45":"data2 = data[(data.broad_jump_cm<max_thresold) & (data.broad_jump_cm>min_thresold)]\ndata2.shape","c31987f7":"min_thresold, max_thresold = data2.sit_and_bend_forward_cm.quantile([0.050, 0.996])\nmin_thresold, max_thresold","6e0a0283":"data3 = data2[(data2.sit_and_bend_forward_cm<max_thresold) & (data2.sit_and_bend_forward_cm>min_thresold)]\ndata3.shape","4096b8c7":"min_thresold, max_thresold = data3.systolic.quantile([0.001, 0.998])\nmin_thresold, max_thresold","61e5518f":"data4 = data3[(data3.systolic<max_thresold) & (data3.systolic>min_thresold)]\ndata4.shape","c6f828b0":"min_thresold, max_thresold = data4.diastolic.quantile([0.003, 0.999])\nmin_thresold, max_thresold","b526d7e8":"data5 = data4[(data4.diastolic<max_thresold) & (data4.diastolic>min_thresold)]\ndata5.shape","8a3a3e71":"min_thresold, max_thresold = data5.body_fat_per.quantile([0.001, 0.99])\nmin_thresold, max_thresold","5c7f6be7":"data6 = data5[(data5.body_fat_per<max_thresold) & (data5.body_fat_per>min_thresold)]\ndata6.shape","bfabdccf":"min_thresold, max_thresold = data6.weight_kg.quantile([0.001, 0.99])\nmin_thresold, max_thresold","76e983d5":"data7 = data6[(data6.weight_kg<max_thresold) & (data6.weight_kg>min_thresold)]\ndata7.shape","9cf25f84":"min_thresold, max_thresold = data7.height_cm.quantile([0.001, 0.9999])\nmin_thresold, max_thresold","857e3199":"data8 = data7[(data7.height_cm<max_thresold) & (data7.height_cm>min_thresold)]\ndata8.shape","f522614a":"plt.figure(figsize=(15,10))\ndata8.boxplot(vert=0)","7fc37218":"sns.pairplot(data8, hue=\"class\")","0f670eac":"X = data8.drop(\"class\" , axis = 1).values\ny = data8['class'].values","a1205c1f":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.25 , random_state=42)","ae9ea3f2":"from sklearn.preprocessing import StandardScaler\nscale = StandardScaler ()\nX_train = scale.fit_transform(X_train)\nX_test = scale.fit_transform(X_test)","13d81b42":"from sklearn.neighbors import KNeighborsClassifier","e804724b":"kclf = KNeighborsClassifier(n_neighbors=6 )","17d2a4e7":"kclf.fit(X_train, y_train)","57223c50":"kclf_score_train = kclf.score(X_train,y_train)","cbcb30a3":"kclf_score_test = kclf.score(X_test,y_test)","9a51d2b7":"from sklearn.metrics import classification_report, confusion_matrix","e07240f3":"y_predict = kclf.fit(X_train, y_train).predict(X_test)","6da8fb11":"target_names = ['Class A', 'Class B', 'Class C', 'Class D']","90d116d6":"print(classification_report(y_test, y_predict, target_names = target_names))","230df57d":"cm = pd.DataFrame(confusion_matrix(y_test, y_predict))\nsns.heatmap(cm, annot=True,cmap=\"mako_r\")","b6ea2586":"from sklearn.linear_model import LogisticRegression","17d46900":"lr = LogisticRegression()","99a5bbbc":"lr.fit(X_train,y_train)","4b31506f":"lr_score_train = lr.score(X_train,y_train)","62d2f94f":"lr_score_test = lr.score(X_test,y_test)","797a5870":"from sklearn.metrics import classification_report, confusion_matrix","6aa79f60":"y_predict = lr.fit(X_train, y_train).predict(X_test)","87092c76":"target_names = ['Class A', 'Class B', 'Class C', 'Class D']","24ba4426":"print(classification_report(y_test, y_predict, target_names = target_names))","a3c5d0f5":"cm = pd.DataFrame(confusion_matrix(y_test, y_predict))\nsns.heatmap(cm, annot=True,cmap=\"mako_r\")","f0d26bc2":"from sklearn.ensemble import RandomForestClassifier","9c00da50":"rf = RandomForestClassifier()","df106b82":"rf.fit(X_train,y_train)","a30e02c6":"rf_score_train = rf.score(X_train,y_train)","48808fe6":"rf_score_test = rf.score(X_test,y_test)","0605f6e1":"from sklearn.metrics import classification_report, confusion_matrix","8ba51dcf":"y_predict = rf.fit(X_train, y_train).predict(X_test)","21b2b1ca":"target_names = ['Class A', 'Class B', 'Class C', 'Class D']","b57add0c":"print(classification_report(y_test, y_predict, target_names = target_names))","a6baa856":"cm = pd.DataFrame(confusion_matrix(y_test, y_predict))\nsns.heatmap(cm, annot=True,cmap=\"mako_r\")","b3a2ed50":"predictors_group = ('Logistic Regression','Random Forest','KNN')\nx_pos = np.arange(len(predictors_group))\naccuracies = [lr_score_train, rf_score_train, kclf_score_train]\n    \nplt.bar(x_pos, accuracies, align='center', color='#26428b')\nplt.xticks(x_pos, predictors_group, rotation='vertical')\nplt.ylabel('Accuracy (%)')\nplt.title(' Accuracies')\nplt.show()","97f70907":"predictors_group = ('Logistic Regression','Random Forest','KNN')\nx_pos = np.arange(len(predictors_group))\naccuracies = [lr_score_test, rf_score_test, kclf_score_test]\n    \nplt.bar(x_pos, accuracies, align='center', color='#26428b')\nplt.xticks(x_pos, predictors_group, rotation='vertical')\nplt.ylabel('Accuracy (%)',)\nplt.title(' Accuracies')\nplt.show()","a13a1e0b":"data","33cbf6da":"data.describe()","cd11b293":"def gym_subscription(row):\n    if 10 <= row['sit_and_bend_forward_cm'] <= 14 or 0 <= row['sit-ups counts'] <= 30 or 0 <= row['broad_jump_cm'] <= 162:\n        return 'gym subscription with 30% discount (first month)'\n    elif 14 < row['sit_and_bend_forward_cm'] <= 17 or 30 < row['sit-ups counts'] <= 41 or 162 < row['broad_jump_cm'] <= 193:\n        return 'gym subscription with 20% discount (first month)'\n    elif 17 < row['sit_and_bend_forward_cm'] <= 213 or 41 < row['sit-ups counts'] <= 80 or 193 < row['broad_jump_cm'] <= 303:\n        return 'gym subscription with 10% discount (first month)'\n    else:\n        return 'other'","9061cd03":"def weight_offer(row):\n    normal_weight = row['height_cm'] - 100\n    if row['weight_kg'] > normal_weight - 10 or row['weight_kg'] > normal_weight + 10 and row['body_fat_per'] > 25:\n        return \"track your weight offer\"\n    else:\n        return 'normal'","8b37c7c2":"def blood_Pressure_offer(row):\n    if row['diastolic'] < 65 or row['systolic'] > 135:\n        return \"blood pressure tracking offer\"\n    else:\n        return 'normal'","1fbefaee":"data['gym_subscription'] = data.apply(gym_subscription , axis = 1)\ndata['weight_offer'] = data.apply(weight_offer , axis = 1)\ndata['blood_Pressure_offer'] = data.apply(blood_Pressure_offer , axis = 1)","a3c329a3":"data","945979fa":"round(data['gym_subscription'].value_counts()\/data.shape[0]*100,2).plot.pie(autopct = '%1.1f%%')","57544d5d":"round(data['weight_offer'].value_counts()\/data.shape[0]*100,2).plot.pie(autopct = '%1.1f%%')","cf4d19bc":"round(data['blood_Pressure_offer'].value_counts()\/data.shape[0]*100,2).plot.pie(autopct = '%1.1f%%')","f4d249a7":"### Logistic Regression Model ","01e4d55d":"### KNN Model ","42f03eec":"#### Thank u \n##### Best Regerds, Ahmed  and Sohila","f0bf7e3f":"## explaining data","4f94e314":"> there is no null values in this data","14746ad1":"## Detecting outliers ","c6595947":"## Model","97743339":"## Business Solutions","b572f307":"> we found that the percantage of male is higher than female percantage (the number of males is double the number of females)","77b8de20":"### Conclusions from crr matrix:\n    1. there is high relation between the Height and BroadJump this indicates that More Height is strongly related to higher BroadJump.\n    2. there is high relation between the Height and GripForce this indicates that More Height is strongly related to more GripForce.\n    3. there is high relation between the Height and Weight this indicates that More Height is strongly related to more Weight.\n    4. there is high relation between the Weight and GripForce this indicates that More Weight is strongly related to more GripForce.\n    5. there is relation between Systolic and Diastolic.\n    6. there is high relation between the GripForce and BroadJump this indicates that More GripForce is strongly related to higher BroadJump.\n    7. there is high relation between the Sit-ups counts and BroadJump this indicates that More Sit-ups counts is strongly related to higher BroadJump.","ad1c9598":"### Random Forest Model ","0246d49d":"### Correlation Matrix for the data","f5eb1ff8":"### Label Encoding to (gender, class) columns","e5e9fa12":"> from this graph we found that the most exist in the interval 50 : 80","4085a01d":"> from this graph we found that the most exist in the interval 165 cm : 175 cm","ffd1d2df":"> the 4 classes are equally distributed in this data"}}