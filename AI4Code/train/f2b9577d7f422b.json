{"cell_type":{"e0e0198e":"code","05b127c4":"code","b3dfbb6d":"code","2f14733e":"code","e54bde2e":"code","7a934c8d":"code","d2bb72d9":"code","8e59f409":"code","ca0c6c58":"code","2c4d9e32":"code","875bd789":"code","b65a319b":"code","a97c03fd":"code","d459eba8":"code","2deea8d5":"code","18c13b35":"code","1aa7ca4a":"code","7f2a2c42":"code","435c3c7c":"code","0897b564":"code","76e3ec6c":"code","0ba41cc8":"code","d6216dec":"markdown","bddfa9d4":"markdown","de97db5a":"markdown","fdf50096":"markdown","1ea40b13":"markdown","7a5c5b43":"markdown","1c617d8e":"markdown","8f3fa1eb":"markdown","3208035b":"markdown","1a8d5366":"markdown","4ba95f7a":"markdown","1df250a4":"markdown","eca7d69f":"markdown","57971bf2":"markdown"},"source":{"e0e0198e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","05b127c4":"import numpy as np # linear algebra\nimport pandas as pd\ndf = pd.read_csv('..\/input\/top-10-highest-grossing-films-19752018\/blockbusters.csv')\ndf.head()","b3dfbb6d":"df['Main_Genre'].value_counts()","2f14733e":"#df.info()\n#df.shape\npd.set_option('display.max_rows',437)","e54bde2e":"filt=df['imdb_rating']>8.0\ndf.loc[filt,['title','Main_Genre','imdb_rating','year']]","7a934c8d":"df.sort_values(by=['worldwide_gross'],ascending=[False])","d2bb72d9":"grp_year=df.groupby(['year'])\ngrp_year['Main_Genre'].value_counts()","8e59f409":"grp_year['Main_Genre'].value_counts().loc[2018]","ca0c6c58":"for i, row in df.iterrows(): #Iterate through each row of dataframe\n    gross = df.worldwide_gross[i]\n    gross = gross.replace('$','') #Trims $ from the values\n    gross = gross.replace(',','') #Trims , from the values.\n    df.worldwide_gross[i] = gross","2c4d9e32":"for i, row in df.iterrows():\n    gross = df.worldwide_gross[i]\n    gross = float(gross)\n    gross = gross\/1000000\n    df.worldwide_gross[i] = int(gross)\n","875bd789":"df.head()","b65a319b":"grp_year['worldwide_gross'].sum()","a97c03fd":"no_of_movies = df['year'].value_counts()\nno_of_movies","d459eba8":"#no of romantic movies in a year\nno_of_walt_stdio = grp_year['studio'].apply(lambda x : x.str.contains('Walt Disney Pictures').sum())\nno_of_walt_stdio","2deea8d5":"yearwise_walt_studio_release = pd.concat([no_of_movies, no_of_walt_stdio],axis='columns')\nyearwise_walt_studio_release","18c13b35":"yearwise_walt_studio_release['%ofWaltReleases'] = (yearwise_walt_studio_release['studio']\/yearwise_walt_studio_release['year'])*100\nyearwise_walt_studio_release","1aa7ca4a":"\nplt.figure(figsize=(15,5))\nplt.scatter(x=df['Main_Genre'],y=df['imdb_rating'],s=50,c='green',marker='o',edgecolor='black',linewidth=1)\nplt.title(\"IMDB Rating V\/S Genres of Movies\")\nplt.xlabel(\"IMDB Rating\")\nplt.ylabel(\"Genres of Movies\")\nplt.xticks(rotation=45)","7f2a2c42":"plt.figure(figsize=(15,5))\nplt.title(\"imdb_rating v\/s length\")\nplt.xlabel(\"IMDB Rating\")\nplt.ylabel(\"Length of Movie\")\nplt.scatter(x=df['imdb_rating'],y=df['length'],s=100,c='blue',linewidth=1,edgecolor='black')","435c3c7c":"from plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\n\n\ntrace = go.Box(\n    x=df.rating,\n    y=df.imdb_rating,\n    marker=dict(color='blue')\n    )\n\ndata=[trace]\n\nlayout = go.Layout(\ntitle='Maturity Rating v\/s IMDb Ratings of Highest Grossing Films',\n    xaxis = dict(title = 'Maturity Rating', gridwidth = 2),\n    yaxis = dict(title = 'IMDb Rating', gridwidth = 2),\n    hovermode = 'closest',\n    paper_bgcolor='rgb(200, 200, 200)',\n    plot_bgcolor='rgb(200, 200, 200)'\n)\n\n\nfigure=go.Figure(data=data,layout=layout)\ninit_notebook_mode(connected=True)\n\niplot(figure)\n","0897b564":"from collections import Counter\nimport csv\n\nplt.style.use(\"fivethirtyeight\")\n\nwith open('..\/input\/top-10-highest-grossing-films-19752018\/blockbusters.csv') as csv_file:\n    csv_reader = csv.DictReader(csv_file)\n    \n    movie_counter=Counter()\n    \n    for row in csv_reader:\n        movie_counter.update(row['Main_Genre'].split(';'))\n        \n#print(movie_counter)\n\n\nmovie_category=[]\npopularity=[] \n\nfor item in movie_counter:\n    movie_category.append(item)\n    popularity.append(movie_counter[item])\n    \nprint(movie_category)\nprint(popularity)\n    \nplt.figure(figsize=(15,10))\nplt.barh(movie_category,popularity)\nplt.xlabel(\"Count of movies\")\nplt.ylabel(\"Movie Category\")\nplt.title(\"Count of movies as Per GENERE till date\")\n\nplt.show()","76e3ec6c":"bins = list(df['year'].unique())\nbins.sort(reverse=False)\n#print(type(bins))\n#print(bins)\nmovies_in_a_year=list(df['year'])\n#print(movies_in_a_year)\n\nplt.figure(figsize=(12,10))\nplt.hist(movies_in_a_year,bins=bins,edgecolor='black',rwidth=0.8)\n\nplt.xlabel('Year')\nplt.ylabel('No Of Movies')\nplt.show()\n\n","0ba41cc8":"from collections import Counter\nimport csv\n\nplt.style.use(\"fivethirtyeight\")\n\nwith open('..\/input\/top-10-highest-grossing-films-19752018\/blockbusters.csv') as csv_file:\n    csv_reader = csv.DictReader(csv_file)\n    \n    studio_count=Counter()\n    \n    for row in csv_reader:\n        studio_count.update(row['studio'].split(';'))\n\n\n#print(studio_count)\nslices =[]\nlabels =[]\n\nfor item in studio_count:\n    labels.append(item)\n    slices.append(studio_count[item])\n        \n#print(slices)\n#print(labels)\n\nplt.figure(figsize=(20,20))\nplt.title(\"Pie Chart of movies under various studios\")\nplt.pie(slices,labels=labels,autopct='%1.1f%%',wedgeprops={'edgecolor':'black'})\nplt.show()","d6216dec":"IMDB Rating V\/S Length","bddfa9d4":"Get the total info and shape of total no of rows and columns","de97db5a":"Calculate the total no of movies in various categories","fdf50096":"sort the movies based on highest collections","1ea40b13":"Group the movies based on year and calculate the segregation across various generes for particular year.","7a5c5b43":"Actual Rating V\/S IMDB Rating","1c617d8e":"% of Films made by various studios since 1975","8f3fa1eb":"Find the total count of movies across various years and check the percentage of Walt Disney Studio movies released in a year.","3208035b":"List of movies having the IMDB more than 8","1a8d5366":"Find the total grossing across years for film industry","4ba95f7a":"Count of movies as Per GENERE till date","1df250a4":"Group the movies based on year and calculate the segregation across various generes","eca7d69f":"No of movies released in an year","57971bf2":" IMDB Rating V\/S Genres of Movies"}}