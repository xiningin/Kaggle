{"cell_type":{"8dcd44fc":"code","8bfd46e9":"code","02749850":"code","958416f2":"code","4aaa2daa":"code","1f290d46":"code","4e4f8a99":"code","f4614d0f":"code","54e292eb":"code","dc1dfbd9":"code","1d7e3ebf":"code","c1950da8":"code","c4ca07bb":"code","bda7c17d":"code","0b414a48":"code","6cdb782a":"markdown","b338a068":"markdown","07012fc5":"markdown","3f9c50af":"markdown","21565d5e":"markdown","a020d46f":"markdown","23b49c8f":"markdown"},"source":{"8dcd44fc":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom nltk.tokenize import RegexpTokenizer\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.corpus import stopwords\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import BernoulliNB, MultinomialNB, GaussianNB","8bfd46e9":"df = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ndf.head()","02749850":"# let's look at what are the unique values are there for the keyword and location columns\n\ndf['keyword'].unique()","958416f2":"df['location'].unique()","4aaa2daa":"df = df.drop(['id', 'keyword', 'location'], axis = 1)\n\ndf","1f290d46":"# We will seperating the text feature and the target, \n# and then splitting both into train and validation sets\n\nX = df['text']\ny = df['target']\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.25)\n\nX_train.head()","4e4f8a99":"# Initialize all the preprocessing objects\n\ntokenizer = RegexpTokenizer(r\"\\w+\") # only select alphanumeric characters\nen_stop = set(stopwords.words('english')) # get all the English language stopwords\nps = PorterStemmer() # to extract stem out of any given word","f4614d0f":"def getStemmedTweet(tweet):\n    \"\"\"\n        This function takes the tweet string and then performs the preprocessing steps on it\n        to return the cleaned tweet which will be more effective in predictions later made by the \n        classifier.\n    \"\"\"\n    tweet = tweet.lower()\n    \n    tokens = tokenizer.tokenize(tweet)\n    new_tokens = [token for token in tokens if token not in en_stop]\n    stemmed_tokens = [ps.stem(token) for token in new_tokens]\n    \n    cleaned_review = ' '.join(stemmed_tokens)\n    \n    return cleaned_review","54e292eb":"# Let's check out the results of the function \nrand_num = 34\nprint(\"Review ===> \", X_train[rand_num])\nprint(\"Preprocessed Review ===>\", getStemmedTweet(X_train[rand_num]))","dc1dfbd9":"# Apply the preprocessing pipeline function on the whole dataset\nX_cleaned = X_train.apply(getStemmedTweet)\nXval_cleaned = X_val.apply(getStemmedTweet)","1d7e3ebf":"## First of all though, we'll need to convert our data into a count vector to be able \n## to work with the Multinomial Naive Bayes model\n\ncv = CountVectorizer()\n\nX_vec = cv.fit_transform(X_cleaned).toarray()\nXval_vec = cv.transform(Xval_cleaned).toarray()\n\nprint(X_vec.shape)\nprint(Xval_vec.shape)","c1950da8":"# Train the classifier\n\nmnb = MultinomialNB()\nmnb.fit(X_vec, y_train)","c4ca07bb":"## Test the accuracy of our classifier on the validation set\n\nmnb.score(Xval_vec, y_val)","bda7c17d":"# get the test dataset\ntest = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\n\n# get the main 'text' column\ntest_ids = test['id']\ntest = test['text']\n\n# apply the preprocessing pipeline\ntest = test.apply(getStemmedTweet)\n\n# creating the count vectors from the dataset\ntest_vec = cv.transform(test).toarray()\n\npredictions = mnb.predict(test_vec)","0b414a48":"predictions = pd.Series(predictions)\nids = pd.Series(test_ids)\n\npred_df = pd.concat([ids, predictions], keys = ['id', 'target'], axis = 1)\n\npred_df.to_csv('submission.csv',index = False)","6cdb782a":"## PREDICTION TIME!","b338a068":"## The NLP Pipeline","07012fc5":"## Define the classifier","3f9c50af":"Since, the keywords can be found in the tweet itself and location isn't really important for our text classification model, we will be removing these two columns along with the id.","21565d5e":"As we can see, the preprocessed review is much more shorter, and conveys the same meaning as the original tweet.","a020d46f":"## Get to know the data","23b49c8f":"## Import libraries"}}