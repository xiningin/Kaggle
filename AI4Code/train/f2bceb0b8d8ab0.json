{"cell_type":{"d932ebc0":"code","ce1f50cf":"code","f804bbef":"code","a122353f":"code","9c955189":"code","d62b626a":"code","737f8b32":"code","dbaa3565":"code","67fb4279":"code","71d8d508":"code","a7cdd155":"code","67d5f785":"code","a36da30f":"code","f42279d9":"code","abd10f46":"code","4a52e469":"code","3854f73e":"code","e7bf4973":"code","d3529477":"code","48f049b8":"code","c5b9d3de":"code","94ea9be6":"code","0fad8f5f":"code","59b3d986":"code","fa55a66a":"code","c2848a7c":"code","a0e5bef7":"code","df821ecc":"code","92312784":"code","c528425f":"code","321cb816":"code","587e368c":"code","6c77de3f":"code","0995f73e":"code","10e7f09c":"code","39463e3e":"code","54924c79":"code","883ae65c":"code","7fb88602":"code","47eb64cf":"code","183786ce":"code","c1da00d1":"code","e5a807a0":"code","fbaa0f7d":"code","461dddf1":"markdown"},"source":{"d932ebc0":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split","ce1f50cf":"train = pd.read_json(\"..\/input\/stanford-covid-vaccine\/train.json\",lines=True)\ntest = pd.read_json(\"..\/input\/stanford-covid-vaccine\/test.json\",lines=True)\nss = pd.read_csv(\"..\/input\/stanford-covid-vaccine\/sample_submission.csv\")\n\ntrain = train.set_index('index')\ntest = test.set_index('index')","f804bbef":"# read npy data file\nbpps_dir = '..\/input\/stanford-covid-vaccine\/bpps\/'\nbpps_list = os.listdir(bpps_dir)\nbpps_npy = np.load(f'..\/input\/stanford-covid-vaccine\/bpps\/{bpps_list[25]}')\nprint('Count of npy files: ', len(bpps_list))\nprint('Size of image: ', bpps_npy.shape)","a122353f":"targets = ['reactivity','deg_Mg_pH10','deg_Mg_50C','deg_pH10','deg_50C']","9c955189":"train = train[['id']+targets ]","d62b626a":"train['reactivity'] = train['reactivity'].apply(lambda x: np.mean(x))\ntrain['deg_Mg_pH10'] = train['deg_Mg_pH10'].apply(lambda x: np.mean(x))\ntrain['deg_Mg_50C'] = train['deg_Mg_50C'].apply(lambda x: np.mean(x))\ntrain['deg_pH10'] = train['deg_pH10'].apply(lambda x: np.mean(x))\ntrain['deg_50C'] = train['deg_50C'].apply(lambda x: np.mean(x))","737f8b32":"train","dbaa3565":"train_data_ids = train['id'].values","67fb4279":"train_img = []\nfor ID in train_data_ids:\n    img_path = os.path.join(bpps_dir,ID+'.npy')\n    img = np.load(img_path)\n    train_img.append(img)\n","71d8d508":"y = train[targets].values","a7cdd155":"train_img = np.array(train_img).reshape(-1, 107, 107, 1)","67d5f785":"y.shape","a36da30f":"train_img.shape","f42279d9":"input_shape = (107, 107, 1)","abd10f46":"from sklearn.preprocessing import StandardScaler\n# load data\n# create scaler\nscaler = StandardScaler()\n# fit scaler on data\n# scaler.fit(data)\nfrom sklearn.preprocessing import MinMaxScaler\n# create scaler\nscalerM = MinMaxScaler()\n# fit scaler on data\n# scaler.fit(data)\n# apply transform\n# standardized = scaler.transform(data)","4a52e469":"X_train, X_val, y_train, y_val = train_test_split(train_img, y, test_size=0.2, random_state=32)","3854f73e":"X_train.max()","e7bf4973":"y_train.max()","d3529477":"# X_train = scalerM.transform(X_train)\n# y_train = scalerM.transform(y_train)","48f049b8":"import tensorflow as tf\nimport tensorflow.keras.layers as L\n\nfrom tensorflow.keras.layers import Dense, Input, Dropout,Flatten, Conv2D\nfrom tensorflow.keras.layers import BatchNormalization, Activation, MaxPooling2D, ZeroPadding2D, Convolution2D\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom tensorflow.keras.utils import plot_model\nimport tensorflow as tf","c5b9d3de":"from tensorflow.keras import backend as K\ndef root_mean_squared_error(y_true, y_pred):\n        return K.sqrt(K.mean(K.square(y_pred - y_true))) \n","94ea9be6":"# Initialising the CNN\nmodel = Sequential()\n\n# 1 - Convolution\nmodel.add(Conv2D(32,(2,2), padding='same', input_shape=input_shape))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.5))\n\n# model.add(ZeroPadding2D((1,1)))\n# model.add(MaxPooling2D((2,2), strides=(2,2)))\n\n# model.add(MaxPooling2D((2,2), strides=(2,2)))\n\n\n# Flattening\nmodel.add(Flatten())\n\n# Fully connected layer\nmodel.add(Dense(16))\nmodel.add(BatchNormalization())\nmodel.add(Activation('elu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(5, activation='elu'))\n\nopt = Adam(lr=0.005)\nmodel.compile(optimizer=\"adam\", loss=\"mean_squared_error\", metrics=['accuracy'])\nmodel.summary()","0fad8f5f":"reduce_lr = ReduceLROnPlateau(monitor='val_acc', factor=0.1,\n                              patience=2, min_lr=0.00001, mode='auto')\ncallbacks = [reduce_lr]\nhistory = model.fit(\n\n    x=X_train,\n    y=y_train,\n    epochs=40,\n    validation_data = (X_val,y_val),\n    callbacks=callbacks\n)","59b3d986":"plt.figure(figsize=(15,7))\nax1 = plt.subplot(1,2,1)\nax1.plot(history.history['loss'], color='b', label='Training Loss') \nax1.plot(history.history['val_loss'], color='r', label = 'Validation Loss',axes=ax1)\nlegend = ax1.legend(loc='best', shadow=True)\nax2 = plt.subplot(1,2,2)\nax2.plot(history.history['accuracy'], color='b', label='Training Accuracy') \nax2.plot(history.history['val_accuracy'], color='r', label = 'Validation Accuracy')\nlegend = ax2.legend(loc='best', shadow=True)","fa55a66a":"test\n","c2848a7c":"test_public = test[test.seq_length == 107]\ntest_private = test[test.seq_length == 130]\n","a0e5bef7":"test_public_ids = test_public['id'].values\ntest_private_ids = test_private['id'].values\n","df821ecc":"test_public_img = []\nfor ID in test_public_ids:\n    img_path = os.path.join(bpps_dir,ID+'.npy')\n    img = np.load(img_path)\n    test_public_img.append(img)\n\ntest_private_img = []\nfor ID in test_private_ids:\n    img_path = os.path.join(bpps_dir,ID+'.npy')\n    img = np.load(img_path)\n    test_private_img.append(img)\n","92312784":"test_public_img = np.array(test_public_img).reshape(-1, 107, 107, 1)\ntest_private_img = np.array(test_private_img).reshape(-1, 130, 130, 1)\n","c528425f":"pred_public = model.predict(test_public_img)","321cb816":"len(test_private_img)\n","587e368c":"pred_public = np.repeat(pred_public,repeats=107,axis=0)\n","6c77de3f":"pred_private = np.repeat(np.array([0,0,0,0,0]),repeats=130*3005,axis=0).reshape(-1,5)\n","0995f73e":"prediction = np.concatenate((pred_public,pred_private),axis=0)\n","10e7f09c":"sub = pd.DataFrame(prediction)","39463e3e":"seqpos = ss.id_seqpos.values\n","54924c79":"sub['id_seqpos'] = seqpos\n","883ae65c":"sub = sub.rename(columns={0: \"reactivity\", 1: \"deg_Mg_pH10\",2: \"deg_Mg_50C\", 3: \"deg_pH10\", 4: \"deg_50C\"})","7fb88602":"sub.to_csv(\"submission.csv\",index=False)\n","47eb64cf":"# from tensorflow.keras.applications import inception_v3, resnet50\n# model = resnet50.ResNet50(weights='imagenet', include_top=False)","183786ce":"# for layer in model.layers:\n#     layer.trainable = False","c1da00d1":"# x = model.output\n# x = L.GlobalAveragePooling2D()(x)\n# x = L.Dense(128, activation='relu')(x) \n# predictions = L.Dense(5, activation='linear')(x)\n# model = Model(model.input, predictions)","e5a807a0":"# model.compile(\n#         optimizer='adam',\n#         loss = 'mean_squared_error',\n#         metrics=['accuracy'],\n#     )","fbaa0f7d":"\n# model.summary()","461dddf1":"credit goes to Manvendra Singh for the notebook: I changed few hyperparameters of CNN model to further improve, however, as said in the discussion, it seems to be overfitted"}}