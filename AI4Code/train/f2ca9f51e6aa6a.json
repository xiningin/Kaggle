{"cell_type":{"17f263c5":"code","6690b02f":"code","0514490b":"code","a8bff796":"code","5ac50bf7":"code","a8a854bf":"code","3aa37ce0":"code","4c6ccd02":"code","2f07bbc7":"code","0f345e98":"code","0f42e6c6":"code","f8efcd62":"code","425878d7":"code","974ea0c1":"code","40cd2b0c":"code","873ab3c5":"code","d44de3eb":"code","54befc97":"code","126e7311":"code","0678a50a":"code","3a850d8c":"code","26b877be":"code","1bb67030":"code","9b010a88":"code","299c58a6":"code","1a3645de":"code","2561fa70":"code","2461f3cf":"code","c691c9ad":"code","9b519765":"code","88f2ff64":"code","c78a0644":"code","d3facba5":"code","e624ded6":"code","b1a0b3e6":"code","8b4c588f":"code","9d1dfc07":"code","eee7f72b":"code","e1ed8a70":"code","48324344":"markdown","e85ad64a":"markdown","5d1e1de9":"markdown","437ca035":"markdown","a02820ed":"markdown","8fef002e":"markdown","e72534e9":"markdown","0b776595":"markdown","e772f026":"markdown","ff0af7d9":"markdown","f4b8ea0b":"markdown","8e647faf":"markdown","597a5a64":"markdown","27c6bf6a":"markdown","4b2bcad0":"markdown","962e9778":"markdown","24f34323":"markdown"},"source":{"17f263c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.pandas.set_option('display.max_columns',None)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6690b02f":"df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","0514490b":"df.head()","a8bff796":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest=train_test_split(df,df['SalePrice'],test_size=0.1,random_state=0)","5ac50bf7":"print(xtrain.shape)\nprint(xtest.shape)","a8a854bf":"catfeanan=[fea for fea in df.columns if df[fea].isnull().sum()>1 and df[fea].dtypes=='O']\nprint(catfeanan)","3aa37ce0":"def replace_cat_fea(df,catfeanan):\n    dat=df.copy()\n    dat[catfeanan]=dat[catfeanan].fillna('Missing')\n    return dat\n\ndf=replace_cat_fea(df,catfeanan)\ndf[catfeanan].isnull().sum()","4c6ccd02":"df.head()","2f07bbc7":"numfeanan=[fea for fea in df.columns if df[fea].isnull().sum()>1 and df[fea].dtypes!='O']\nprint(numfeanan)","0f345e98":"for fea in numfeanan:\n    med_val=df[fea].median()\n    \n    df[fea+'nan']=np.where(df[fea].isnull(),1,0)\n    df[fea].fillna(med_val,inplace=True)\n    \n    \ndf[numfeanan].isnull().sum()","0f42e6c6":"df.head()","f8efcd62":"for fea in ['YearBuilt','YearRemodAdd','GarageYrBlt']:\n    df[fea]=df['YrSold']-df[fea]","425878d7":"df[['YearBuilt','YearRemodAdd','GarageYrBlt']].head()","974ea0c1":"num_fea=['LotFrontage','LotArea','1stFlrSF','GrLivArea','SalePrice']\nfor fea in num_fea:\n    df[fea]=np.log(df[fea])\n    plt.hist(df[fea])\n    plt.show()","40cd2b0c":"catfea=[fea for fea in df.columns if df[fea].dtypes=='O']\ncatfea","873ab3c5":"for fea in catfea:\n    temp=df.groupby(fea)['SalePrice'].count()\/len(df)\n    dftemp=temp[temp>0.01].index\n    df[fea]=np.where(df[fea].isin(dftemp),df[fea],'RareValue')","d44de3eb":"df.head(50)","54befc97":"for feature in catfea:\n    labels_ordered=df.groupby([feature])['SalePrice'].mean().sort_values().index\n    labels_ordered={k:i for i,k in enumerate(labels_ordered,0)}\n    df[feature]=df[feature].map(labels_ordered)","126e7311":"df.head()","0678a50a":"from sklearn.preprocessing import MinMaxScaler","3a850d8c":"feascale=[fea for fea in df.columns if fea not in ['Id','SalePrice']]\nscale=MinMaxScaler()\nscale.fit(df[feascale])","26b877be":"dat=pd.concat([df[['Id','SalePrice']].reset_index(drop=True),pd.DataFrame(scale.transform(df[feascale]),columns=feascale)],axis=1)","1bb67030":"dat.head()","9b010a88":"dat.to_csv('traindat.csv',index=False)","299c58a6":"from sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel","1a3645de":"df=pd.read_csv('traindat.csv')","2561fa70":"df.head()","2461f3cf":"ytrain=df[['SalePrice']]","c691c9ad":"xtrain=df.drop(['Id','SalePrice'],axis=1)","9b519765":"fea_model=SelectFromModel(Lasso(alpha=0.005,random_state=0))\nfea_model.fit(xtrain,ytrain)","88f2ff64":"fea_model.get_support()","c78a0644":"sel_fea=xtrain.columns[(fea_model.get_support())]\nprint('Total No of Feature',xtrain.shape[1])\nprint('NO of selected feature',len(sel_fea))","d3facba5":"print(sel_fea)","e624ded6":"xtrain=xtrain[sel_fea]","b1a0b3e6":"xtrain.head()","8b4c588f":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest=train_test_split(xtrain,ytrain,test_size=0.2)","9d1dfc07":"from sklearn.linear_model import LinearRegression","eee7f72b":"reg=LinearRegression()\nmod=reg.fit(xtrain,ytrain)","e1ed8a70":"mod.score(xtest,ytest)","48324344":"**Lasso: Penalizes the features with higher weights.**\n**SelectModel: It chooses the features of good weights**","e85ad64a":"# Feature Scaling****\nApply the scaling so that all features will be in the same range","5d1e1de9":"**True indicates the important features and False shows the feature of less importance**","437ca035":"# Temporal variable****\nDate-time variable","a02820ed":"# Converting categorical to numerical variables****","8fef002e":"# Converting into a dataframe****","e72534e9":"**Thus we have zero missing values in all categorical variables**","0b776595":"# Gaussian Distribution****\nfor skewed values","e772f026":"**Replace median values for numerical missing values**","ff0af7d9":"# Missing values for numerical variables****","f4b8ea0b":"**Replace NaN values**","8e647faf":"**Now all the above features are not in skewed form which is of gaussian distribution**","597a5a64":"# Feature Selection****","27c6bf6a":"# **Train Test Split**","4b2bcad0":"# **Missing Values**\nhandle the nan values in categorical features","962e9778":"# **Feature Engineering**\n* Missing values\n* Temporal variables\n* Categorical variables\n* Standardize the values of variables to the same range","24f34323":"# Handling Rare Categorical Features****\nRemoving categorical features with less than 1% of the total observation"}}