{"cell_type":{"c4c2d3cc":"code","5855e0ba":"code","d74996f1":"code","7ecbea61":"code","fb83e12d":"code","53bf3947":"code","a0161c85":"code","6db1f9c6":"code","833fd1f2":"code","5eef161d":"code","33ea1184":"code","2d74b61d":"markdown","bb8f0ee8":"markdown","9682cfd3":"markdown","0ba5270d":"markdown","87ecdfbb":"markdown","8b980954":"markdown","a126d86d":"markdown","b4a15f09":"markdown","28b7a9a5":"markdown"},"source":{"c4c2d3cc":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn import decomposition\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier  # FOR K=13 ,IT HAS ACCURACY AROUND 72.7488902980\nfrom sklearn import metrics","5855e0ba":"df = pd.read_csv(\"..\/input\/CSV_datasetsix_vowel_dataset_with_class.csv\")","d74996f1":"df.head()","7ecbea61":"pix=[]\nfor i in range(784):\n    pix.append('pixel'+str(i))\nfeatures=pix\nX = df.loc[:, features].values\ny = df.loc[:,'class'].values\n\nX_train, X_test, y_train, y_test = train_test_split(\n X, y, test_size = 0.25, random_state = 100)\ny_train=y_train.ravel()\ny_test=y_test.ravel()","fb83e12d":"# try K=1 through K=40 and record testing accuracy\nk_range = range(1, 41)\n\n# We can create Python dictionary using [] or dict()\nscores = []\n\n# We use a loop through the range 1 to 26\n# We append the scores in the dictionary\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(X_train, y_train)\n    y_pred = knn.predict(X_test)\n    scores.append(metrics.accuracy_score(y_test, y_pred))\nscores=[i*100 for i in scores]\nprint(scores)","53bf3947":"plt.figure(figsize=(12, 6))  \nplt.plot(scores, color='blue', linestyle='dashed', marker='o',  \n         markerfacecolor='#ff6347', markersize=10)\nplt.title('Accuracy scores for K-values(1-40)')  \nplt.xlabel('K Value')\nplt.xticks=[i for i in range(1, 26)]\nplt.ylabel('Accuracy')\nplt.show()","a0161c85":"error = []\n# Calculating error for K values between 1 and 40\nfor i in range(1, 40):  \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    pred_i = knn.predict(X_test)\n    error.append(np.mean(pred_i != y_test))","6db1f9c6":"error=[i*100 for i in error]","833fd1f2":"error","5eef161d":"plt.figure(figsize=(12, 6))  \nplt.plot(range(1, 40), error, color='lightsalmon', linestyle='dashed', marker='o',  \n         markerfacecolor='mediumblue', markersize=10);\nplt.title('Error Rate for K Values(1-40)')  \nplt.xlabel('K Value') ;\nplt.ylabel('Mean Error') ;","33ea1184":"knn = KNeighborsClassifier(n_neighbors = 1)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nprint('Accuracy: ',metrics.accuracy_score(y_test, y_pred)* 100)","2d74b61d":"# KNN Classifier on Telugu six vowel dataset","bb8f0ee8":"## For K=1,  Accuracy = 81.66666666666667","9682cfd3":"## 2. Selecting K-value Based on Error","0ba5270d":"## Loading Dataset","87ecdfbb":"## Importing Liibraries","8b980954":"## Dividing Dataset into 'train' & 'test'","a126d86d":"## <font color='springgreen'>Accuracy of the model is: <\/font><font color='DeepSkyBlue'>81.66666666666667<\/font>","b4a15f09":"## Implementing K-Nearset Neighbour Classifier\n","28b7a9a5":"## 1. Selecting K-value Based on Accuracy"}}