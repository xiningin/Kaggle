{"cell_type":{"aedd2bc1":"code","11632b03":"code","afae05d3":"code","4707c18d":"code","a2e8b353":"code","e92099b1":"code","04dfbed0":"code","b0057c6b":"code","9f59fc69":"code","ff192a9f":"code","d9354643":"code","179f2d65":"code","c396b99e":"code","f8ea0aa2":"code","77088a3a":"code","94995258":"code","bc297895":"code","5e4f76a2":"code","cbf8e70a":"code","090504f9":"code","b16b729e":"code","09d381ff":"code","c9461016":"code","a00c2073":"code","a0c3cde3":"code","4fd531aa":"code","601924d7":"code","af84624a":"code","a6a113cc":"code","9d09fb6a":"code","93e34f8b":"code","30a564ba":"code","67f12ea4":"code","0be1bd03":"code","47941897":"markdown","3130a568":"markdown","25122e78":"markdown","b503f0cb":"markdown","7864134b":"markdown","3c62026f":"markdown","d392a5df":"markdown","c24c5560":"markdown"},"source":{"aedd2bc1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","11632b03":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split","afae05d3":"#importing our dataset\ntrain_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\n\n#creating a copy of data set for visualization\ndata=train_data\n","4707c18d":"sub","a2e8b353":"train_data.head()","e92099b1":"test_data.head()","04dfbed0":"data","b0057c6b":"# USING MATPLOTLIB PACKAGE\n\nplt.scatter(x=data['Age'],y=data['Fare'],color='red')\nplt.xlabel('Age of Passengers')\nplt.ylabel('fare of ticket')\n","9f59fc69":"plt.plot(data['Survived'],data['Pclass'],color='cyan')\nplt.xlabel('Survived')\nplt.ylabel('Pclass')","ff192a9f":"\n#using seaborn functions as matplot can be used only on numerical data \n\nsns.catplot(x='Pclass',y='Age',hue='Survived',kind='violin',split=True,data=train_data)","d9354643":"sns.jointplot(x='Pclass',y='Fare',data=train_data)","179f2d65":"#CLASSIFYING DATA ACCORDINGLY\nsns.relplot(x='Age',y='Fare',hue='Survived',style='Parch',size='Pclass',data=train_data)\nplt.figure(figsize=(30,15))\n#TRY TO UNDERSTAND THE FIGURE CLOSELY FOR BETTER UNDERSTANDING","c396b99e":"#TO FIND THR TREND\nsns.lmplot(x='Pclass',y='Age',hue='Survived',data=train_data)\n","f8ea0aa2":"train_data.dropna(axis=0, subset=['Survived'], inplace=True)\ny= train_data.Survived\ntrain_data.drop(['Survived'], axis=1, inplace=True)","77088a3a":"train_data","94995258":"train_data.isnull().nunique()","bc297895":"df = pd.concat([train_data,test_data])","5e4f76a2":"df","cbf8e70a":"df.isnull().sum()","090504f9":"from sklearn.impute import SimpleImputer \n#now we will be imputing our data\nimputer = SimpleImputer(strategy='most_frequent')","b16b729e":"df_imputed = pd.DataFrame(imputer.fit_transform(df))\ndf_imputed.columns = df.columns","09d381ff":"df = pd.get_dummies(df_imputed)","c9461016":"df","a00c2073":"train = df.iloc[:891,]\ntest =df.iloc[891:,]","a0c3cde3":"from sklearn.model_selection import train_test_split","4fd531aa":"X_train,X_valid,y_train,y_valid =train_test_split(train,y,train_size=.80,random_state=1)","601924d7":"from sklearn.linear_model import LinearRegression\nlr =LinearRegression()\nlr.fit(X_train,y_train)\naccuracy_lr = lr.score(X_valid,y_valid)","af84624a":"accuracy_lr","a6a113cc":"from sklearn.ensemble import RandomForestClassifier\nmodel =  RandomForestClassifier(n_estimators=100, random_state=1)\nmodel.fit(X_train, y_train)\nacc = model.score(X_valid,y_valid)","9d09fb6a":"acc","93e34f8b":"from sklearn.svm import SVC\nmodels=SVC()\nmodels.fit(X_train,y_train)\nacu= models.score(X_valid,y_valid)\nacu","30a564ba":"pred = model.predict(test)","67f12ea4":"pred","0be1bd03":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived':sub.Survived})\noutput.to_csv('submission.csv', index=False)","47941897":"# First WE WILL VISUALIZE OUR DATA SET","3130a568":"# **Now we will be processing our data and forming a model for it**","25122e78":"Testing if data imported corectly","b503f0cb":"Refining our NAN values with simple imputer","7864134b":"Joining both the train and test data sets","3c62026f":"Therefore we will use RandomForetClassifier","d392a5df":"**WE HAVE MATPLOTLIB AND SEABORN PACKAGE FOR VISUALIZATION**\n","c24c5560":"Predicting our model on test data"}}