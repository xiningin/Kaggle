{"cell_type":{"b2991d24":"code","3b110f53":"code","abdd5130":"code","ec549c7f":"code","afe89b70":"code","5cc6d193":"code","a8d3ebd6":"code","1890695b":"code","c48cfbb4":"code","8e77ca18":"code","e97dbb92":"code","64587265":"code","2396a6b4":"code","22144aee":"code","015b7711":"code","fbbf7129":"code","ceb025b2":"code","8d867632":"code","f8f0a0bd":"code","253a3d0e":"code","f1fa5628":"code","59c9724a":"code","c5a8621d":"code","a1f3a826":"code","13a190ee":"code","e0d6f1f5":"code","0b7d26e3":"code","821f17eb":"markdown","ee51d393":"markdown","dc3f479a":"markdown","04d88902":"markdown","6998cab9":"markdown","2d0e8c28":"markdown","526ea82c":"markdown","eded25c5":"markdown","2b4e5259":"markdown","b9ab4d37":"markdown","2d03c7ca":"markdown","9ceca083":"markdown","e6b0c7d1":"markdown","8f804233":"markdown","3702f034":"markdown","9a30d01a":"markdown","c7fa111b":"markdown","082fe76b":"markdown","c6ffcaa9":"markdown","5c0ca02e":"markdown","34f26c29":"markdown","fd726caf":"markdown","7357f301":"markdown","4e157356":"markdown","b3c9f54b":"markdown","47a7c33d":"markdown","cccff131":"markdown","ab474fa4":"markdown","e9e1d284":"markdown","4d626b4f":"markdown","0b6e68ff":"markdown","170b6bbf":"markdown","61c55b4b":"markdown","c8fe32a5":"markdown","7b4a45ef":"markdown","d223e9aa":"markdown","99c3c483":"markdown"},"source":{"b2991d24":"!pip install joblib","3b110f53":"from joblib import Memory","abdd5130":"import numpy as np\nfrom time import sleep ","ec549c7f":"import warnings\nwarnings.filterwarnings('ignore')","afe89b70":"pwd = \"\/kaggle\/working\/\"\ncache_dir = pwd + 'cache_dir'\nmem = Memory(cache_dir)","5cc6d193":"!ls -ld $pwd*\/","a8d3ebd6":"input1 = np.vander(np.arange(10**4)).astype(np.float)\ninput2 = np.vander(np.random.uniform(low=0,high=10**5, size=5000))\nprint(\"Shape of input1: \",input1.shape)\nprint(\"Shape of input2: \",input2.shape)","1890695b":"def func(x):\n    print(\"Example of Computationally intensive function!\")\n    print(\"The result is not cached for this particular input\")\n    sleep(4.0)\n    return np.square(x)","c48cfbb4":"func_mem = mem.cache(func, verbose=0)","8e77ca18":"!du -sh $cache_dir","e97dbb92":"%%time\ninput1_result = func_mem(input1)","64587265":"%%time\ninput1_cache_result = func_mem(input1)","2396a6b4":"%%time\ninput2_result = func_mem(input2)","22144aee":"%%time\ninput2_cache_result = func_mem(input2)","015b7711":"!du -sh $cache_dir","fbbf7129":"@mem.cache(verbose=0)\ndef func_as_decorator(x):\n    print(\"Example of Computationally intensive function!\")\n    print(\"The result is not cached for this particular input\")\n    sleep(4.0)\n    return np.square(x)","ceb025b2":"%%time\ninput1_decorator_result = func_as_decorator(input1)","8d867632":"%%time\ninput1_decorator_result = func_as_decorator(input1)","f8f0a0bd":"cache_dir2 = pwd + 'cache_dir2'\nmemory2 = Memory(cache_dir2, mmap_mode='c')","253a3d0e":"@memory2.cache(verbose=0)\ndef func_memmap(x):\n    print(\"Example of Computationally intensive function!\")\n    print(\"The result is not cached for this particular input\")\n    sleep(4.0)\n    return np.square(x)","f1fa5628":"%%time\ninput1_memmap = func_memmap(x=input1)","59c9724a":"%%time\ninput1_memmap = func_memmap(x=input1)","c5a8621d":"# Disk utilization before clearning function cache\n!du -sh $cache_dir","a1f3a826":"func_mem.clear()\nfunc_as_decorator.clear()","13a190ee":"# Disk utilization after clearning function cache\n!du -sh $cache_dir","e0d6f1f5":"mem.clear()","0b7d26e3":"!du -sh $cache_dir","821f17eb":"#### Pass it to Memory.cache function","ee51d393":"#### Check the time difference in execution. When we fetch the results of <i>func_mem<\/i> with same parameters i.e. input1, we use the <span style=\"color:red\">cached results instead of doing the computations again<\/span>. \n\n<i><u>Note<\/u>: The Memory.cache only caches the result returned by func_mem. Print statement result is not printed.<\/i>\n\n#### Memory class uses fast cryptographic hashing of the input arguments to check if they have been computed","dc3f479a":"### Import other modules","04d88902":"### Ignore any warnings raised by Jupyter notebook","6998cab9":"## Clearning cache","2d0e8c28":"#### Let's checkout some caching results","526ea82c":"#### Before we begin, let's check the cache directory size","eded25c5":"#### *We see that there is change in size*","2b4e5259":"#### Define function","b9ab4d37":"# <i>On demand recomputing (disk-caching)<\/i> using [Joblib](https:\/\/joblib.readthedocs.io\/en\/latest\/index.html)","2d03c7ca":"### Clear function's cache","9ceca083":"## Congratulations on completing disk-caching using Joblib","e6b0c7d1":"#### Notice the time difference in execution","8f804233":"# Next - Learn how to parallelize `for loops` using [Joblib](https:\/\/joblib.readthedocs.io\/en\/latest\/index.html) in the most easiest way: https:\/\/www.kaggle.com\/karanpathak\/parallelize-loops-using-joblib","3702f034":"### Let's create our cache directory","9a30d01a":"#### Notice the time difference in execution for the above code execution for input2","c7fa111b":"<br>","082fe76b":"### Erase complete cache directory","c6ffcaa9":"<br>","5c0ca02e":"#### The result for input2 hasn't been cached","34f26c29":"## Looking forward for your feedback in the comments section below\n### If you liked this kernel please hit the Upvote button.","fd726caf":"### Define some large inputs","7357f301":"### Install Joblib package","4e157356":"#### Let's again check the cache directory size.","b3c9f54b":"## There are two ways to pass a function to Memory.cache","47a7c33d":"### Method 1: Passing a function to Memory.cache","cccff131":"#### Directory with name '\/kaggle\/working\/cache_dir\/' has been created","ab474fa4":"### Method 2: Memory.cache as a decorator","e9e1d284":"<br>","4d626b4f":"#### Let's check if the cache directory has been cleared","0b6e68ff":"<br>","170b6bbf":"### Memmapping speeds up cache looking when reloading large numpy arrays","61c55b4b":"## Using Memmapping (memory mapping) if working with numpy","c8fe32a5":"<br>","7b4a45ef":"#### Notice above the disk utilization of \"*\/kaggle\/working\/cache_dir*\" before and after clearing function cache","d223e9aa":"[Check the time difference in execution when using memory map vs non memory map](#Notice-the-time-difference-in-execution)","99c3c483":"### Import the Memory class"}}