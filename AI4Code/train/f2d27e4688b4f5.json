{"cell_type":{"ae3a10b2":"code","c78aa5c5":"code","aadb26e4":"code","bd4ba052":"code","bad38dda":"code","102b7c0f":"code","82207e5a":"code","84dba7ef":"code","07d3e09d":"code","a0f55852":"code","632014d7":"code","c1e03ec5":"code","ef3851bf":"code","0b21e7f1":"code","5a6a4dd6":"code","31c1d141":"code","b2588e2d":"code","b1de3dcb":"code","94b42978":"code","bff5d014":"code","b1ce0f69":"code","cf9ed02b":"code","c38db4b9":"code","f6fd5dce":"code","dcd12c89":"code","43dcf73b":"code","c2d11aed":"code","a0b3c774":"code","73231fc6":"code","e0145455":"markdown","d889ffe2":"markdown","cf1586cf":"markdown","96de9d56":"markdown","0bd0c641":"markdown","dffcf848":"markdown","c8d341cd":"markdown"},"source":{"ae3a10b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c78aa5c5":"import numpy as np\nimport pandas as pd \nimport seaborn as sns \nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix","aadb26e4":"data = pd.read_csv('..\/input\/environmental-sensor-data-132k\/iot_telemetry_data.csv')\ndata.head(15)","bd4ba052":"data['device'].unique()","bad38dda":"labelencoder = LabelEncoder()\ndevices = labelencoder.fit_transform(data['device'])\nlights = labelencoder.fit_transform(data['light'])\ndevices","102b7c0f":"onehotencoder = OneHotEncoder()","82207e5a":"data['device'] = devices\ndata['light'] = lights","84dba7ef":"data.drop(['ts','motion'],axis=1,inplace=True)","07d3e09d":"data.info()","a0f55852":"plt.figure(figsize=(20,15))\nsns.barplot( 'co','humidity', data= data)","632014d7":"sns.countplot('temp',data=data)","c1e03ec5":"fig, ax =plt.subplots(1,2,figsize=(24, 6))\nsns.barplot('lpg','smoke',ax=ax[0],data=data.sort_values(by='lpg',ascending=False).head(10)).set_title('Ratio of LPG and Smoke')\nsns.barplot('smoke','temp',ax=ax[1],data=data.sort_values(by='smoke',ascending=False).head(10)).set_title('Ratio of temprature and smaoke')","ef3851bf":"activities=['co','humidity','lpg','smoke','temp']\nslice=[3,7,8,6,2]\ncolor=['r', 'g', 'm', 'b','c']\nplt.pie(slice, labels=activities, colors=color, startangle=90,shadow=True, \n       explode=(0.2,0,0,0,0),autopct='%1.2f%%')\nplt.legend(bbox_to_anchor =(0.85, 1.20), ncol = 2)\nplt.show()","0b21e7f1":"fig = plt.figure()\nax = fig.gca(projection='3d')\nax.plot_trisurf(data['temp'], data['co'], data['smoke'], cmap = plt.cm.twilight_shifted)\nplt.title('Relation between Carbon di oxide levels, Smoke and Temperature.')\nplt.xlabel('co')\nplt.ylabel('smoke')\nplt.show()","5a6a4dd6":"data.head(12)","31c1d141":"logi = LogisticRegression()","b2588e2d":"X = data.drop(['light'],axis=1)\ny = data[['light']].values","b1de3dcb":"X","94b42978":"y","bff5d014":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.20,random_state=14)","b1ce0f69":"X_train","cf9ed02b":"X_test","c38db4b9":"y_train","f6fd5dce":"y_test","dcd12c89":"Rudy=logi.fit(X_train,y_train) ","43dcf73b":"predict=logi.predict(X_test)","c2d11aed":"predict","a0b3c774":"score = accuracy_score(y_test, predict)\n\nscore","73231fc6":"cm = confusion_matrix(y_test, predict)\nsns.heatmap(cm, annot=True, cmap=\"winter\" ,fmt='g')\nplt.tight_layout()\nplt.title('Confusion matrix')\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","e0145455":"# 5) Data Visualization using Seaborn","d889ffe2":"# 7) Spliting data into input and label\/output\/target","cf1586cf":"# This is Environmental Sensor Telemetry Data Dataset in which we are predicting the wheather there is a person or not of the Online using Logistic Regression\n\n# 1) Importing Libraries","96de9d56":"# 3) Preprocessing of Training data","0bd0c641":"# 6) Model Defining using Logistic Regression","dffcf848":"# 2) Loading of dataset into Pandas DataFrame","c8d341cd":"# 8) Final Prediction of Model"}}