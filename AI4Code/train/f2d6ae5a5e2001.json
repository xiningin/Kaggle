{"cell_type":{"f813d422":"code","26ab58db":"code","9b0d22f0":"code","33d46853":"code","f12a4dd3":"code","24d49628":"code","f4b1f54b":"code","6e48d284":"code","f807fbcb":"code","2f4c4e42":"code","af59f146":"code","3b5235dd":"code","ba50a96b":"code","92d42a18":"markdown"},"source":{"f813d422":"import numpy as np \nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model  import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold","26ab58db":"PATH = '\/kaggle\/input\/company-acceptance-prediction\/'","9b0d22f0":"train = pd.read_pickle(PATH+'train_df.pkl')\ntest = pd.read_pickle(PATH+'test_df.pkl')\ntrain","33d46853":"kf = StratifiedKFold(n_splits=5, random_state = 42, shuffle=True)\n\ntrain_indices = []\ntest_indices = []\n\nfor train_index, test_index in kf.split(train, train['target']):\n    train_indices.append(train_index)\n    test_indices.append(test_index)\n\ntrain_indices = np.array(train_indices)\ntest_indices = np.array(test_indices)","f12a4dd3":"train['text_str'] =  train['text'].apply(lambda x: '[TEXTEND]'.join(x))\ntest['text_str'] =  test['text'].apply(lambda x: '[TEXTEND]'.join(x))\n\ntrain['keywords_str'] = train['keywords'].apply(lambda x: ' '.join(x))\ntest['keywords_str'] = test['keywords'].apply(lambda x: ' '.join(x))\n\ntrain.drop(columns = ['id','html','text','keywords'], inplace = True)\ntest.drop(columns = ['id','html','text','keywords'], inplace = True)","24d49628":"SEP = \"[SEP]\"\n\ntrain_df = pd.DataFrame()\ntrain_df[\"target\"] = train[\"target\"]\ntrain_df[\"text\"] = (\n    #train[\"text_str\"]\n    #+ SEP\n    + train[\"keywords_str\"]\n    + SEP\n    + train[\"accepted_function\"]\n    + SEP\n    + train[\"rejected_function\"]\n    + SEP\n    + train[\"accepted_product\"]\n    + SEP\n    + train[\"rejected_product\"]\n    + SEP\n)\n\ntest_df = pd.DataFrame()\ntest_df[\"text\"] = (\n    #test[\"text_str\"]\n    #+ SEP\n    + test[\"keywords_str\"]\n    + SEP\n    + test[\"accepted_function\"]\n    + SEP\n    + test[\"rejected_function\"]\n    + SEP\n    + test[\"accepted_product\"]\n    + SEP\n    + test[\"rejected_product\"]\n    + SEP\n)","f4b1f54b":"def target_metric(y_true,y_pred):\n    weights = np.ones(y_true.shape[0])\n    weights[y_true==2] = 2\n    return weights @ (y_true == y_pred).astype(\"int\") \/ weights.sum()","6e48d284":"word_vectorizer = TfidfVectorizer(\n    analyzer='word',\n    stop_words='english',\n    ngram_range=(1, 2),\n    lowercase=True,\n    min_df=5,\n    max_features=100000)","f807fbcb":"print('Start validation: ')\nlog_reg = LogisticRegression(solver='liblinear', random_state=42)\nword_vectorizer = TfidfVectorizer(\n    analyzer='word',\n    stop_words='english',\n    lowercase=True,\n    min_df=5,\n    max_features=100000)\n\nmodel = Pipeline([('vectorizer', word_vectorizer),  ('log_reg', log_reg)])\n\n\nmetrics = []\nresults = []\n\nn_fold = 0\nfor train_idx, test_idx in zip(train_indices, test_indices):\n    n_fold+=1\n    print(\"Fold: \"+str(n_fold))\n    model.fit(train_df['text'].iloc[train_idx], train_df['target'].iloc[train_idx])\n    y_pred = model.predict(train_df['text'].iloc[test_idx])\n    \n    y_true = train_df['target'].iloc[test_idx]\n    metrics.append(target_metric(y_true, y_pred))\n    results.append(model.predict_proba(test_df['text']))\n    print(\"Accuracy over fold: \"+str(metrics[-1]))\n    \nprint('\\nAvarage Accuracy.: '+str(np.mean(metrics)))","2f4c4e42":"results = np.array(results)\nresults.shape","af59f146":"prediction = pd.Series(results.sum(axis = 0).argmax(-1))\nprediction.value_counts()","3b5235dd":"submission = pd.read_csv(PATH+'sample_submission.csv')","ba50a96b":"submission['target'] = prediction\nsubmission.to_csv('tfidf_baseline.csv', index = False)","92d42a18":"Here you can remove coments to add text of site."}}