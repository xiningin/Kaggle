{"cell_type":{"de29206f":"code","d66ce890":"code","474ff274":"code","20e92743":"code","7513a68a":"code","cd7721ed":"code","342c43c5":"code","47fbefff":"code","a45322fd":"code","b9ce0bf1":"code","1c80eccd":"code","17c3f6de":"code","2f2dcb10":"code","fcc7a2eb":"code","0e7de4f2":"code","e4b3d229":"code","91b79646":"code","2774a466":"code","49cce72c":"code","4ff7a97a":"code","51b1f41e":"code","e4f2f422":"code","a72b8edc":"code","a1664cba":"code","54e93365":"code","c96ee994":"code","09d8a43a":"code","0fd2dcc1":"code","7d31e704":"code","2e7c5452":"code","6326b724":"code","8f4cd426":"code","d592066c":"code","81986be1":"code","7a78ecc6":"code","c7de774d":"code","5ab590aa":"code","a6c81ddf":"markdown","44eadc1b":"markdown","d14426b1":"markdown","04c0cf99":"markdown","b8fbeb86":"markdown","a2a0b08c":"markdown","1c34e286":"markdown","f623fbb3":"markdown","450ff2aa":"markdown","02201dcd":"markdown","8079ea9f":"markdown","4ca632c5":"markdown","14385e01":"markdown"},"source":{"de29206f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d66ce890":"df = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndf.head()","474ff274":"df.info()","20e92743":"df.isnull().sum()","7513a68a":"df[df.duplicated()]","cd7721ed":"df.drop_duplicates(keep='first',inplace=True)","342c43c5":"df[df.duplicated()]","47fbefff":"df.describe()","a45322fd":"df.corr()","b9ce0bf1":"import matplotlib.pyplot as plt","1c80eccd":"import seaborn as sns","17c3f6de":"df['sex'].value_counts()","2f2dcb10":"sns.countplot(data=df,x='sex')\nplt.show()","fcc7a2eb":"sns.countplot(data=df,x='cp')\nplt.show()","0e7de4f2":"p = sns.countplot(data=df, x=\"fbs\")\nplt.show()","e4b3d229":"p = sns.countplot(data=df, x=\"restecg\")\nplt.show()","91b79646":"plt.figure(figsize=(10,10))\nsns.displot(df.age, color=\"red\", label=\"Age\", kde= True)\nplt.legend()","2774a466":"plt.figure(figsize=(10,10))\nsns.distplot(df[df['output'] == 0][\"age\"], color='green',kde=True,) \nsns.distplot(df[df['output'] == 1][\"age\"], color='red',kde=True)\nplt.title('Attack vs Age')\nplt.show()","49cce72c":"df.head()","4ff7a97a":"x = df.drop('output',axis=1)","51b1f41e":"x.head()","e4f2f422":"y = df['output']","a72b8edc":"y.head()","a1664cba":"from sklearn.model_selection import train_test_split\ntrain_data, test_data, train_target, test_target = train_test_split(x, y, test_size= 0.2, random_state= 0)","54e93365":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ntrain_data = scaler.fit_transform(train_data)\ntest_data = scaler.transform(test_data)","c96ee994":"train_data","09d8a43a":"test_data","0fd2dcc1":"from sklearn.linear_model import LogisticRegression","7d31e704":"model = LogisticRegression()\nmodel.fit(train_data, train_target)","2e7c5452":"pred = model.predict(test_data)\nfrom sklearn.metrics import accuracy_score\nacc = accuracy_score(test_target,pred)","6326b724":"acc","8f4cd426":"from sklearn import svm\nclf = svm.SVC()\nclf.fit(train_data,train_target)","d592066c":"cpred = clf.predict(test_data)\nacc2 = accuracy_score(test_target,cpred)\nacc2","81986be1":"from sklearn.ensemble import RandomForestClassifier\nrc = RandomForestClassifier(max_depth=2, random_state=0)\nrc.fit(train_data,train_target)\npredrc = rc.predict(test_data)\nacc3 = accuracy_score(test_target,predrc)\nacc3","7a78ecc6":"threshold=0.5\nfrom sklearn.metrics import confusion_matrix\ny_pred = (clf.predict(test_data)>=threshold).astype(int)\ncms = confusion_matrix(test_target,y_pred)\nprint(cms)","c7de774d":"from sklearn.metrics import roc_curve\ny_preds = clf.predict(test_data).ravel()\n\nfpr, tpr, thresholds = roc_curve(test_target, y_preds)\nplt.figure(1)\nplt.plot([0, 1], [0, 1], 'y--')\nplt.plot(fpr, tpr, marker='.')\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.show()","5ab590aa":"from sklearn.metrics import auc\nauc_value = auc(fpr, tpr)\nprint(\"Area under curve, AUC = \", auc_value)","a6c81ddf":"Highest age group density is 55 to 60","44eadc1b":" Heart Attack vs Age","d14426b1":"# Model","04c0cf99":"ECG for type 0 and 1 is almost equal\nbut for type 2 is negligible in comparision to type 0 and 1.","b8fbeb86":"# Support Vector Machine","a2a0b08c":"People having gender 1 is more than twice of gender 0","1c34e286":"# Random Forest","f623fbb3":"FBS with value 0 is higher than 1","450ff2aa":"# Preprocessing","02201dcd":"# Logistic Regression","8079ea9f":" Support Vector Machine is Best with 93 Accurracy","4ca632c5":"People having chest pain of type 0 is the highest and 50% of total people in dataset - Typical Angina\n\npeople having chest pain of type 3 is the lowest - Asymptomatic","14385e01":"# Data Visualization"}}