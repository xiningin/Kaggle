{"cell_type":{"cfea45c8":"code","3dac3089":"code","cad56143":"code","cb2ad1f7":"code","145289ba":"code","64060f11":"code","10ccb05a":"code","b7e4b8b2":"code","57990540":"code","ca7dbc37":"code","3f2dfc2f":"code","13a58e76":"code","980ea11a":"code","47e8c951":"markdown","f6e83596":"markdown","e13660ec":"markdown","72f9cec6":"markdown"},"source":{"cfea45c8":"import numpy as np\nimport pandas as pd\nimport os\n# apply ignore\nimport warnings\nwarnings.filterwarnings('ignore')","3dac3089":"# show size of train and test data\ntrain_images = os.listdir('..\/input\/understanding_cloud_organization\/train_images')\nprint(len(train_images))\ntest_images = os.listdir('..\/input\/understanding_cloud_organization\/test_images')\nprint(len(test_images))","cad56143":"train_data = pd.read_csv('..\/input\/understanding_cloud_organization\/train.csv')\n\n# Split Image_Label into ImageId and Label\nsplit = train_data['Image_Label'].str.split('_', n = 1, expand = True)\ntrain_data['id'] = split[0]\ntrain_data['label'] = split[1]\n\n# Select columns \nselected_features = [cname for cname in train_data.columns if cname not in ['Image_Label']]\n\ntrain_data.head()","cb2ad1f7":"# count unique labels \ntrain_data['label'].value_counts()","145289ba":"# Dropping old Image_Label columns \ndf = train_data[['id', 'label']]\n","64060f11":"from tensorflow.python.keras.applications import ResNet50\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense","10ccb05a":"num_classes = 4\n# imagenet easy to debug\nmy_new_model = Sequential()\n# resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\nmy_new_model.add(ResNet50(include_top=False, pooling='avg', weights='imagenet'))\nmy_new_model.add(Dense(num_classes, activation='softmax'))\n\n# Say not to train first layer (ResNet) model. It is already trained\nmy_new_model.layers[0].trainable = False","b7e4b8b2":"my_new_model.compile(optimizer='sgd', \n                     loss='categorical_crossentropy', \n                     metrics=['accuracy'])","57990540":"my_new_model.summary()","ca7dbc37":"from sklearn.model_selection import train_test_split\n# for proto modelling, lets grab only part of the data\n\n# Break off validation set from training data\ntrain_df, valid_df, _, _ = train_test_split(df, df.label, train_size=0.1, \n                                                      test_size=0.1,random_state=2)","3f2dfc2f":"from tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nimage_size = 224\ndata_generator = ImageDataGenerator(preprocess_input, validation_split=0.20)\ntrain_data_dir = '..\/input\/understanding_cloud_organization\/train_images'\n\ntrain_generator = data_generator.flow_from_dataframe(\n                                        dataframe=train_df,\n                                        directory=train_data_dir,\n                                        x_col=\"id\",\n                                        y_col=\"label\",\n                                        target_size=(image_size, image_size),\n                                        batch_size=1000,\n                                        class_mode='categorical',\n                                        subset='training')\n\nvalidation_generator = data_generator.flow_from_dataframe(\n                                        dataframe=valid_df,\n                                        directory=train_data_dir,\n                                        x_col=\"id\",\n                                        y_col=\"label\",\n                                        target_size=(image_size, image_size),\n                                        batch_size=32,\n                                        class_mode='categorical',\n                                        subset='validation')","13a58e76":"# fit_stats below saves some statistics describing how model fitting went\n# the key role of the following line is how it changes my_new_model by fitting to data\nfit_stats = my_new_model.fit_generator(train_generator,\n                                       steps_per_epoch=2,\n                                       validation_data=validation_generator,\n                                       validation_steps=1)","980ea11a":"# path to file for predictions\n#test_data_path = '..\/input\/test.csv'\n\n# read test data\n#test_data = pd.read_csv(test_data_path)\n\n# create test_X which comes from test_data but includes only the columns used for prediction.\n# The list of columns is stored in a variable called features\n#test_X = test_data[forest_features]\n\n# make predictions used to submit. \n#test_preds = np.round(forest_model.predict(test_X)).astype(int)\n\n# The lines below shows how to save predictions in competition format\n\n#output = pd.DataFrame({'id': test_data.Id,\n#                       'label': test_preds})\n#output.to_csv('submission.csv', index=False)","47e8c951":"Compile the Model","f6e83596":"**Fit Model**","e13660ec":"** Make Predictions **<br>\nRead the file of \"test\" data. And apply model to make predictions","72f9cec6":"Specify Model"}}