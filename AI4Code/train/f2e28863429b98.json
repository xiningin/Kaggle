{"cell_type":{"db5046b5":"code","abb9573d":"code","c1047c9f":"code","13b12b50":"code","bc16040e":"code","11183c6f":"code","b6db11b3":"code","7ee97a16":"code","ae029597":"code","137a0106":"code","886bb464":"code","dc7193cd":"code","c144c2b9":"code","4c2ab487":"code","27529637":"code","993c49ac":"code","a70c298e":"code","028cfdcd":"code","86880e7d":"code","41cf3914":"code","9619efb7":"code","b373e011":"code","6a86f778":"code","7870db2b":"code","4f875131":"code","f64d3381":"code","d57d5652":"code","ecfd6454":"code","f8245529":"code","cc912a49":"code","eb718af2":"code","2030da7b":"code","a49d5daf":"markdown","924876fd":"markdown","f2ef98c9":"markdown"},"source":{"db5046b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","abb9573d":"train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")","c1047c9f":"train_data.columns","13b12b50":"test_data.columns","bc16040e":"train_data.head()","11183c6f":"test_data.head()","b6db11b3":"train_data.isnull().sum()","7ee97a16":"test_data.isnull().sum()","ae029597":"train_data.drop(columns = [\"Name\" ,\"Ticket\" , \"Cabin\"], inplace=True)","137a0106":"test_data.drop(columns = [\"Name\" ,\"Ticket\" , \"Cabin\"], inplace=True)\n","886bb464":"age_mean = train_data.Age.mean()\ntrain_data.Age.fillna(age_mean , inplace= True)\ntest_data.Age.fillna(age_mean , inplace = True)","dc7193cd":"train_data.isnull().sum()","c144c2b9":"train_data.Embarked.dtype","4c2ab487":"train_data.Embarked.unique()","27529637":"most_value_Embarked = train_data.Embarked.mode()\nmost_value_Embarked[0]","993c49ac":"train_data.Embarked.fillna(most_value_Embarked[0] , inplace = True)\ntest_data.Embarked.fillna(most_value_Embarked[0] , inplace = True)","a70c298e":"train_data.isnull().sum()","028cfdcd":"test_data.isnull().sum()","86880e7d":"Fare_mean = train_data.Fare.mean()\ntest_data.Fare.fillna(Fare_mean , inplace = True)\ntest_data.isnull().sum()","41cf3914":"train_data.Sex.replace(\"male\" , 0 , inplace =True)\ntrain_data.Sex.replace(\"female\" , 1 , inplace =True)\ntrain_data.Embarked.replace(\"C\" , 0 , inplace =True)\ntrain_data.Embarked.replace(\"S\" , 1 , inplace =True)\ntrain_data.Embarked.replace(\"Q\" , 2 , inplace =True)","9619efb7":"train_data.head()","b373e011":"test_data.Sex.replace(\"male\" , 0 , inplace =True)\ntest_data.Sex.replace(\"female\" , 1 , inplace =True)\ntest_data.Embarked.replace(\"C\" , 0 , inplace =True)\ntest_data.Embarked.replace(\"S\" , 1 , inplace =True)\ntest_data.Embarked.replace(\"Q\" , 2 , inplace =True)","6a86f778":"test_data.head()","7870db2b":"X = train_data.drop(columns = [\"Survived\"])\ny = train_data[\"Survived\"]","4f875131":"from sklearn.model_selection import train_test_split\ntrain_X, val_X, train_y, val_y = train_test_split(X, y)","f64d3381":"\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score,f1_score\ndef get_acc(max_leaf_nodes, train_X , val_X , train_y , val_y):\n    model = DecisionTreeClassifier(max_leaf_nodes=max_leaf_nodes , random_state = 1)\n    model.fit(train_X,train_y)\n    preds_val = model.predict(val_X)\n    accurecy = accuracy_score(y_pred=preds_val , y_true=val_y)\n    f1 = f1_score(y_true=val_y, y_pred=preds_val, average='micro')\n    return f1\n","d57d5652":"para = list(range(2, 15 , 1))\nresults= {}\nfor i in para:\n    acc = get_acc(i , train_X , val_X , train_y , val_y)\n    results[acc] = i\nmax_acc = max(results.keys())\nbest_max_nodes = results[max_acc] \nbest_max_nodes","ecfd6454":"model = DecisionTreeClassifier(max_leaf_nodes=8 , random_state = 1)\nmodel.fit(train_X,train_y)\npreds_val = model.predict(test_data)","f8245529":"preds_val.shape","cc912a49":"test_data.shape","eb718af2":"test_data.PassengerId","2030da7b":"test_out = pd.DataFrame({\n    'PassengerId': test_data.PassengerId, \n    'Survived': preds_val\n})\ntest_out.to_csv('submission.csv', index=False)","a49d5daf":"## preprocessing\nDelete columns that do not have a positive effect on creating the model\nDealing with missing values","924876fd":"## Data & Exploration","f2ef98c9":"# ML Model\nExperimenting With Different Models\n"}}