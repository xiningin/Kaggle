{"cell_type":{"e9101eb0":"code","4b6f3e25":"code","34100f72":"code","1d70f021":"code","e52be62a":"code","8a8efc6f":"markdown","70b4f0d2":"markdown","4f96879c":"markdown","c21e767d":"markdown","dde189ac":"markdown"},"source":{"e9101eb0":"import gc\nimport numpy as np\nimport pandas as pd\nimport multiprocessing\n\nfrom tpot import TPOTClassifier\nfrom tpot.builtins import StackingEstimator\nfrom tpot.export_utils import set_param_recursive","4b6f3e25":"# Load data\ntpot_data = pd.read_parquet('..\/input\/janestreet-parquet\/train.parquet') # Using .parquet for faster read speed\ntpot_data = tpot_data.query('date > 85').reset_index(drop = True) # drop before date 85\ntpot_data.fillna(tpot_data.mean(),inplace=True) # Use mean to fill NaN. maybe -9999 will be better?\ntpot_data = tpot_data.query('weight > 0').reset_index(drop = True) # drop weight==0\n\n\ntpot_data.insert(0, 'class', (tpot_data['resp'] > 0).astype('int')) # set resp>0 as class label\n\nfeatures = [c for c in tpot_data.columns if 'feature' in c]\n\nX = tpot_data.loc[:, features].values\ny = tpot_data['class']","34100f72":"import numpy as np\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection._split import _BaseKFold, indexable, _num_samples\nfrom sklearn.utils.validation import _deprecate_positional_args\n\n# modified code for group gaps; source\n# https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\nclass PurgedGroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Allows for a gap in groups to avoid potentially leaking info from\n    train into test if the model has windowed or lag features.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_group_size : int, default=Inf\n        Maximum group size for a single training set.\n    group_gap : int, default=None\n        Gap between train and test\n    max_test_group_size : int, default=Inf\n        We discard this number of groups from the end of each train split\n    \"\"\"\n\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_group_size=np.inf,\n                 max_test_group_size=np.inf,\n                 group_gap=None,\n                 verbose=False\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_group_size = max_train_group_size\n        self.group_gap = group_gap\n        self.max_test_group_size = max_test_group_size\n        self.verbose = verbose\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        group_gap = self.group_gap\n        max_test_group_size = self.max_test_group_size\n        max_train_group_size = self.max_train_group_size\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n\n        group_test_size = min(n_groups \/\/ n_folds, max_test_group_size)\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n\n            group_st = max(0, group_test_start - group_gap - max_train_group_size)\n            for train_group_idx in unique_groups[group_st:(group_test_start - group_gap)]:\n                train_array_tmp = group_dict[train_group_idx]\n                \n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n\n            train_end = train_array.size\n \n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n\n            test_array  = test_array[group_gap:]\n            \n            \n            if self.verbose > 0:\n                    pass\n                    \n            yield [int(i) for i in train_array], [int(i) for i in test_array]","1d70f021":"FOLDS = 5\ngkf = PurgedGroupTimeSeriesSplit(n_splits = FOLDS, group_gap=20)\nsplits = list(gkf.split(y, groups=tpot_data['date'].values))\n# multiprocessing.set_start_method('forkserver') # This is used to avoid crash by n_jos > 1","e52be62a":"for fold, (train_indices, test_indices) in enumerate(splits):\n    \n    X_train, X_test = X[train_indices], X[test_indices]\n    y_train, y_test = y[train_indices], y[test_indices]\n    print(f'size: {len(X_train)}')\n    # Using TPOTclassifer \n    pipeline_optimizer = TPOTClassifier(generations=5, population_size=20, \n                          verbosity=2, \n                          cv=3,\n                          max_time_mins=15,\n                          scoring='roc_auc',\n                          random_state=42,\n                          subsample=0.5, \n                          n_jobs=1,\n                          warm_start=True,\n                          early_stop=8,\n                          config_dict='TPOT cuML')\n    pipeline_optimizer.fit(X_train, y_train)\n\n    print(f'Fold{fold+1}, auc: {pipeline_optimizer.score(X_test, y_test)}')\n    \n    pipeline_optimizer.export(f'tpot_fold{fold+1}_janestreet_pipeline.py') # export the pipeline\n    \n    # clear memory\n    del X_train, y_train\n    del X_test, y_test\n    gc.collect()","8a8efc6f":"# Load Data","70b4f0d2":"# Using TPOT with PurgedGroupTimeSeriesSplit\n\nPurgedGroupTimeSeriesSplit to split data. This can avoid data in one group to be splitted into train and test. click the `code` to see in detail.","4f96879c":"Using `config_dict='TPOT cuML'` to load the [classifier_cuml.py](https:\/\/github.com\/EpistasisLab\/tpot\/blob\/master\/tpot\/config\/classifier_cuml.py), which uses RAPIDS cuML and DMLC\/XGBoost classifiers as estimators alongside.","c21e767d":"# Janestreet using TPOT\n\nThis is a notebook using AutoML library `TPOT` to find a good classification pipeline or pipelines.\n\nI am a beginner in data science, and this notebook is just for exploring. \n\nSince anonymous features are hard to do Feature Engineering, some people are trying to decrypt them or find the inner relationship of data and others are trying to use NN models to find the feature by model itself, so i decided to use `TPOT` to find the pipeline. Here are some useful doc:\n\n- [TPOT Doc](http:\/\/epistasislab.github.io\/tpot\/)\n\n- [Sklearn Doc](https:\/\/scikit-learn.org\/stable\/modules\/classes.html#api-reference)\n\n\nNote: This notebook will run for **more than 40 mins** on GPU based notebook with current settings. ","dde189ac":"# Import"}}