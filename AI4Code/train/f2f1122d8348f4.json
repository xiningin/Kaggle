{"cell_type":{"8fffc353":"code","2d59c275":"code","b09f0a4a":"code","ed01f9c7":"code","a3ea2442":"code","7d74221e":"code","7725a92d":"code","7101d0c4":"code","164451cd":"code","e966296a":"code","e1ff8eab":"code","e8474703":"code","d0437059":"code","f4375929":"code","27b2dab1":"code","397a81e3":"code","e5a28d89":"code","95048adf":"code","1b9c1e1d":"code","1e60b64c":"code","ef5a9fd1":"code","730727c3":"code","d27ecb1d":"code","b8757704":"code","39e72eef":"code","c9701ca4":"code","fe61db12":"code","48bdd949":"code","2c8e2566":"code","14aa704a":"code","8015ed0e":"code","0f8f7221":"code","79cc216d":"code","dff95c23":"code","00f54763":"code","b89d1f6d":"code","449a9a72":"code","c64a318e":"code","69fe3faf":"code","7b345169":"code","0ad64c47":"code","3d1c36e2":"code","fc3f6fcf":"code","2bef2c8f":"code","2f4a9e0f":"code","9c70c943":"code","7d12eb38":"code","edbd9df9":"code","08851ccc":"markdown","ec260eb0":"markdown","e21d47e0":"markdown","24cd324b":"markdown","eb5941e7":"markdown","95e04ce2":"markdown","243d93be":"markdown","630a0548":"markdown","98a9a986":"markdown"},"source":{"8fffc353":"# This Notebook Contains Logistic Regression model which is my Highest solution for Competition\n# You can see my other versions for more 4 model based prediction","2d59c275":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn import metrics","b09f0a4a":"trainds = pd.read_csv(\"\/kaggle\/input\/predict-the-churn-for-customer-dataset\/Train File.csv\")\ntestds = pd.read_csv(\"\/kaggle\/input\/predict-the-churn-for-customer-dataset\/Test File.csv\")\n\ntrainds.head(3)","ed01f9c7":"testds.head(3)","a3ea2442":"print('Train Dataset Infomarion')\nprint (\"Rows     : \" ,trainds.shape[0])\nprint (\"Columns  : \" ,trainds.shape[1])\nprint (\"\\nFeatures : \\n\" ,trainds.columns.tolist())\nprint (\"\\nMissing values :  \", trainds.isnull().sum().values.sum())\nprint (\"\\nUnique values :  \\n\",trainds.nunique())","7d74221e":"plt.subplots(figsize=(10, 6))\nplt.title('Cooralation Matrix', size=30)\nsns.heatmap(trainds.corr(),annot=True,linewidths=0.5)","7725a92d":"trainds.loc[trainds['TotalCharges'].isnull()] #NUll values Present","7101d0c4":"trainds['TotalCharges'] = trainds['TotalCharges'].fillna(trainds['TotalCharges'].median()) #\n#trainds = trainds[trainds[\"TotalCharges\"].notnull()]","164451cd":"CustomerIDS = testds['customerID']\ntrainds.drop('customerID', axis=1,inplace =True)\ntestds.drop('customerID', axis=1,inplace =True)","e966296a":"trainds.columns","e1ff8eab":"testds.describe()","e8474703":"testds['TotalCharges'] = testds['TotalCharges'].fillna(testds['TotalCharges'].median())","d0437059":"trainds[\"InternetService\"]=trainds[\"InternetService\"].astype('str')\ntestds[\"InternetService\"]=testds[\"InternetService\"].astype('str')","f4375929":"trainds[\"TotalCharges\"] = trainds[\"TotalCharges\"].astype(float)\ntrainds[\"MonthlyCharges\"] = trainds[\"MonthlyCharges\"].astype(float)\n\ntestds[\"TotalCharges\"] = testds[\"TotalCharges\"].astype(float)\ntestds[\"MonthlyCharges\"] = testds[\"MonthlyCharges\"].astype(float)","27b2dab1":"replace_cols = [ 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection','TechSupport','StreamingTV', 'StreamingMovies']\nfor i in replace_cols : \n    trainds[i]  = trainds[i].replace({'No internet service' : 'No'})\n    testds[i]  = testds[i].replace({'No internet service' : 'No'})","397a81e3":"replace_cols = ['MultipleLines']\nfor i in replace_cols : \n    trainds[i]  = trainds[i].replace({'No phone service' : 'No'})\n    testds[i]  = testds[i].replace({'No phone service' : 'No'})","e5a28d89":"def customercountplot(x):\n    z = \"Customer Count wrt \"+ x\n    plt.title(z,size=20)\n    sns.countplot(trainds[x])","95048adf":"def churnratio():\n    import plotly.offline as py\n    import plotly.graph_objs as go\n    val = trainds[\"Churn\"].value_counts().values.tolist()\n\n    trace = go.Pie(labels = [\"Not Churned\",\"Churned\"] ,\n                   values = val ,\n                   marker = dict(colors =  [ 'royalblue' ,'lime']), hole = .5)\n    layout = go.Layout(dict(title = \"Train Dataset Customers\"))\n    data = [trace]\n    fig = go.Figure(data = data,layout = layout)\n    py.iplot(fig)","1b9c1e1d":"def churnrate():\n    features = ['PhoneService','MultipleLines','InternetService',\n                'TechSupport','StreamingTV','StreamingMovies','Contract']\n    for i, item in enumerate(features):\n        if i < 3:\n            fig1 = pd.crosstab(trainds[item],trainds.Churn,margins=True)\n            fig1.drop('All',inplace=True)\n            fig1.drop('All',axis=1, inplace=True)\n            fig1.plot.bar()\n            z= 'Customer Churned wrt ' + item\n            plt.title(z,size=20)\n        elif i >=3 and i < 6:\n            fig1 = pd.crosstab(trainds[item],trainds.Churn,margins=True)\n            fig1.drop('All',inplace=True)\n            fig1.drop('All',axis=1, inplace=True)\n            fig1.plot.bar()\n            z= 'Customer Churned wrt ' + item\n            plt.title(z,size=20)\n        elif i < 9:\n            fig1 = pd.crosstab(trainds[item],trainds.Churn,margins=True)\n            fig1.drop('All',inplace=True)\n            fig1.drop('All',axis=1, inplace=True)\n            fig1.plot.bar()\n            z= 'Customer Churned wrt ' + item\n            plt.title(z,size=20)","1e60b64c":"churnratio()","ef5a9fd1":"customercountplot('Churn')","730727c3":"customercountplot('gender')","d27ecb1d":"customercountplot('Contract')","b8757704":"customercountplot('Partner')","39e72eef":"customercountplot('PhoneService')","c9701ca4":"customercountplot('MultipleLines')","fe61db12":"customercountplot('StreamingTV')","48bdd949":"tempdf = trainds.copy()\nbins=[0,12,24,48,60,100]\ntempdf['tenure_group']=pd.cut(tempdf['tenure'],bins,labels=['0-12','12-24','24-48','48-60','>60'])\nplt.title('Customer Count wrt to tenure',size=20)\nsns.countplot(tempdf['tenure_group'])","2c8e2566":"plt.title(\"Distribution Plot For Montly Charges\",size=20)\nsns.distplot(trainds['MonthlyCharges'],hist_kws={'edgecolor':'black','alpha':.5})","14aa704a":"plt.title(\"Distribution Plot For TotalCharges\",size=20)\nsns.distplot(trainds['TotalCharges'],hist_kws={'edgecolor':'black','alpha':.5})","8015ed0e":"churnrate()","0f8f7221":"train = trainds.copy()\ntest = testds.copy()\ntrain","79cc216d":"train.columns","dff95c23":"train = pd.get_dummies(train, columns=['gender', 'SeniorCitizen', 'Partner', 'Dependents',\n                                       'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity',\n                                       'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n                                       'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod'])","00f54763":"test = pd.get_dummies(test, columns=['gender', 'SeniorCitizen', 'Partner', 'Dependents',\n                                       'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity',\n                                       'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n                                       'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod'])","b89d1f6d":"train.head(3)","449a9a72":"train[\"Churn\"] = train[\"Churn\"].replace({'Yes':1,'No':0})","c64a318e":"# For writing solution to file\ndef writetofile(solution,filename):\n    with open(filename,'w') as file:\n        file.write('customerID,Churn\\n')\n        for (a, b) in zip(CustomerIDS, solution):\n            c=\"\"\n            if b==0:\n                c=\"No\"\n            else:\n                c='Yes'\n            file.write(str(a)+','+str(c)+'\\n')","69fe3faf":"X = train.drop('Churn', axis=1)\ny = train['Churn']","7b345169":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix,accuracy_score,classification_report\nfrom sklearn.metrics import f1_score","0ad64c47":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=42)","3d1c36e2":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)","fc3f6fcf":"y_pred=logreg.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\nprint(\"Precision:\",metrics.precision_score(y_test, y_pred))\nprint(\"Recall:\",metrics.recall_score(y_test, y_pred))","2bef2c8f":"sol2=logreg.predict(test)\nsol2","2f4a9e0f":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\nprint(\"Precision:\",metrics.precision_score(y_test, y_pred))\nprint(\"Recall:\",metrics.recall_score(y_test, y_pred))","9c70c943":"import collections, numpy\ncollections.Counter(sol2)","7d12eb38":"pds = pd.DataFrame(columns=['CustomerID','Churn'])\npds['CustomerID'] = CustomerIDS\npds['Churn']=sol2\npds","edbd9df9":"#writetofile(Prediction ,'filename you want to save')\nwritetofile(sol2,'Prediction-Solution')","08851ccc":"# Building model","ec260eb0":"## Logistic Regression Model","e21d47e0":"#### Data Exploration code:","24cd324b":"## Writing Predicted Data to Solution.csv","eb5941e7":"## Data PreProcessing","95e04ce2":"## Customer Churn Prediction","243d93be":"#### Data Manipulation","630a0548":"## Data Exploration","98a9a986":"##### The Best accuracy Model was Logistic Regression Model .\n##### You can see other Models I Tried in other Versions."}}