{"cell_type":{"2d18bed6":"code","0f20e159":"code","be734a43":"code","2fec998e":"code","e21a5e2b":"code","34349c3c":"code","cb5976cc":"code","258cdee1":"code","a3821aa8":"code","8080d88c":"code","67847657":"code","c4b8e58c":"code","e9135308":"code","04bfa390":"code","5c727231":"code","7949e3bf":"code","3bad284e":"code","91b94e6b":"code","b6385f25":"code","611d2386":"code","008be4dc":"code","ec681de3":"code","b9f01a16":"code","6c54a36a":"code","2231edb4":"code","c08d4389":"markdown","73077977":"markdown","d32b42b5":"markdown","5397b88f":"markdown","7964787a":"markdown"},"source":{"2d18bed6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f20e159":"df = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')","be734a43":"df.info()","2fec998e":"df.head()","e21a5e2b":"import seaborn as sns\nimport matplotlib.pyplot as plt","34349c3c":"sns.countplot(x='diagnosis',data=df)","cb5976cc":"df.columns","258cdee1":"df.drop(columns=['Unnamed: 32', 'id'], inplace = True)","a3821aa8":"df.columns","8080d88c":"res = {'B':0, 'M':1}\ndf['diagnosis'] = df['diagnosis'].map(res)","67847657":"df.columns","c4b8e58c":"cor_target = abs(df.corr()['diagnosis'])\nset_features = cor_target[cor_target > 0.5]\ndf = df[set_features.index]\ndf.head()","e9135308":"df.info()","04bfa390":"df.corr()['diagnosis'][1:].sort_values().plot(kind='bar')","5c727231":"X = df.drop('diagnosis',axis=1).values\ny = df['diagnosis'].values","7949e3bf":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.20,random_state=101)\nX_train, X_val, y_train, y_val = train_test_split(X_train,y_train,test_size=0.25,random_state=101)","3bad284e":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_val = scaler.transform(X_val)\nX_test = scaler.transform(X_test)","91b94e6b":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation,Dropout\nfrom tensorflow.keras.constraints import max_norm\nfrom tensorflow.keras.callbacks import EarlyStopping","b6385f25":"early_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=10)","611d2386":"model = Sequential()\n\n\n# input layer\nmodel.add(Dense(128,  activation='relu'))\nmodel.add(Dropout(0.5))\n\n# hidden layer\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.5))\n\n# hidden layer\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dropout(0.5))\n\n\n# output layer\nmodel.add(Dense(units=1,activation='sigmoid'))\n\n# Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","008be4dc":"history = model.fit(x=X_train, \n          y=y_train, \n          epochs=200,\n          batch_size = 16,\n          validation_data=(X_val, y_val), verbose =1,\n          callbacks=[early_stop]\n          )","ec681de3":"plt.figure(1, figsize = (15,8)) \nplt.subplot(221)  \nplt.plot(history.history['accuracy'])  \nplt.plot(history.history['val_accuracy'])  \nplt.title('model accuracy')  \nplt.ylabel('accuracy')  \nplt.xlabel('epoch')  \nplt.legend(['train', 'valid']) \n    \nplt.subplot(222)  \nplt.plot(history.history['loss'])  \nplt.plot(history.history['val_loss'])  \nplt.title('model loss')  \nplt.ylabel('loss')  \nplt.xlabel('epoch')  \nplt.legend(['train', 'valid']) \n\nplt.show()","b9f01a16":"from sklearn.metrics import classification_report,confusion_matrix\npredictions = (model.predict(X_test) > 0.5).astype(\"int32\")","6c54a36a":"print(classification_report(predictions, y_test))","2231edb4":"#confusion_matrix(y_test,predictions)\ncm = confusion_matrix(predictions, y_test)\nsns.heatmap(cm, annot=True, cmap='Blues_r')\n","c08d4389":"#### Dataset seems to be balanced. No special handling required for sampling","73077977":"#### Map the diagnosis code to integer. Benign :0, Malignant:1","d32b42b5":"#### There are 2 columns that are of no value : \"id\" and \"Unnamed: 32\". Drop them","5397b88f":"#### Choose the features that have 0.5 or more correlation to the result","7964787a":"#### Split the data Train:validation:test = 60:20:20 ratio"}}