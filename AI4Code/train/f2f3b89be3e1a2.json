{"cell_type":{"94d497b8":"code","6b0eaa74":"code","9c5b7a54":"code","04a14635":"code","f8ff5bf1":"code","6eb77d6a":"code","d2a7de95":"code","00cc3e82":"code","bfd01246":"code","84a77642":"code","b456753b":"code","ad9fa7ae":"code","f3aadd5b":"code","e1de8bf7":"code","a95c5e8a":"code","a14eaefc":"code","4664aa45":"code","456d7519":"markdown","64b5d331":"markdown","253a03ea":"markdown","23db33c3":"markdown","df54037e":"markdown","cd5a0037":"markdown","7c07390b":"markdown","2e60bba5":"markdown","f339c94d":"markdown","00eed0a7":"markdown","399df23e":"markdown","d8503341":"markdown","c36e8e36":"markdown","3184f6a9":"markdown"},"source":{"94d497b8":"# Import the libraries for data manipulation and visualisation\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pathlib\nimport os\n\n# Import the libraries to create a neural network\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten, MaxPool2D\nfrom tensorflow.keras.activations import relu, softmax\nfrom tensorflow.keras.losses import CategoricalCrossentropy\nfrom tensorflow.keras.optimizers import Adam, RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.utils import to_categorical\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nimport itertools\n\n\nsns.set(style='white', context='notebook', palette='deep')","6b0eaa74":"# Load the data\n\ntrain_csv = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\n\ntest_csv = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","9c5b7a54":"# Show the head of the train_csv file ( first 5 rows)\n\ntrain_csv.head()","04a14635":"# Split the training data into X (input) & Y (output) data.\n\nx_train = train_csv.drop(labels = ['label'], axis=1)\n\ny_train = train_csv['label']","f8ff5bf1":"# Count the data and check if it equaly seperated\n\ng = sns.countplot(y_train)\n\n\n# It is importent to set the style (see import libararies) of seaborn otherwite there will be no number on the X and Y axis.\ny_train.value_counts()","6eb77d6a":"# Check for null values\n\nprint('x_train data')\nx_train.isnull().any().describe()","d2a7de95":"print('test data')\ntest_csv.isnull().any().describe()","00cc3e82":"x_train = x_train \/ 255.0\n\ntest_csv = test_csv \/ 255.0","bfd01246":"x_train = x_train.values.reshape(-1, 28, 28, 1)\n\ntest_csv = test_csv.values.reshape(-1, 28, 28, 1)","84a77642":"y_train = to_categorical(y_train, num_classes = 10)","b456753b":"x_train, x_val, y_train, y_val = train_test_split(x_train,y_train, test_size = 0.2, random_state=42)","ad9fa7ae":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","f3aadd5b":"optimizer = Adam(learning_rate = 0.001)\n\nmodel.compile(optimizer = optimizer, loss= 'categorical_crossentropy', metrics= ['accuracy'])","e1de8bf7":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(x_train)","a95c5e8a":"history = model.fit_generator(datagen.flow(x_train,y_train, batch_size=86),\n                              epochs = 5, validation_data = (x_val,y_val),\n                              verbose = 2, steps_per_epoch= 100\n                              )","a14eaefc":"fig, ax = plt.subplots(2, 1)\n\nax[0].plot(history.history['accuracy'], color = 'r', label = 'train_accuracy')\nax[0].plot(history.history['val_accuracy'], color = 'b', label = 'val_accuracy')\nlegend = ax[0].legend(loc='best', shadow=True)\n\n\nax[1].plot(history.history['loss'], color = 'r', label = 'train_loss')\nax[1].plot(history.history['val_loss'], color = 'b', label = 'val_loss')\nlegend = ax[1].legend(loc='best', shadow=True)\n","4664aa45":"# Look at confusion matrix \n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(x_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) \n    \n    ","456d7519":"# Load the data with Pandas","64b5d331":" # Split training and validation","253a03ea":"# Fit the model","23db33c3":"# Create a confusion matrix","df54037e":"# Plot the loss and accucary in a graph","cd5a0037":"# Create the ImageDataGenerator","7c07390b":"# Import the libraries","2e60bba5":"# Create the training dataset","f339c94d":"# Label encoding","00eed0a7":"# Compile the model","399df23e":"# Reshape the data","d8503341":"# Display the data and check for null values","c36e8e36":"# Create the model","3184f6a9":"# Normalize the data "}}