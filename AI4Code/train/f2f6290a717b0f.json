{"cell_type":{"0842af27":"code","95fcb15d":"code","ab14571e":"code","88a90da1":"code","fdba4c27":"code","e38aea57":"code","0e2555fe":"code","c36d5b5c":"code","8982028b":"code","bd8c3b92":"code","4a8154dd":"code","8aa32348":"code","df6b80ef":"code","8e41d634":"code","0968c26c":"code","b6b45b5b":"code","a77dcec7":"code","ff1bc8b7":"code","6eab3e83":"code","0213e083":"code","0ed634b6":"code","7659b3df":"code","146b13d7":"code","9beaab65":"code","4623b927":"code","7dafd6b7":"code","ff9a4db7":"code","7ddfce35":"code","92fd8512":"code","423875ba":"code","81765877":"code","49d3dba7":"code","6c631d76":"code","1a98a02b":"code","844dc944":"code","44e6493e":"code","6db7c989":"code","c6ecd6f0":"code","84c00cff":"code","66260978":"code","6dc0d0cb":"code","746c41a4":"code","04f12830":"code","a54e3fbf":"code","6b287386":"code","de8e96c1":"code","b5608a23":"code","8235f174":"code","e6426c82":"code","83eed4b5":"code","d898c8dc":"code","b206089a":"code","64d91a7d":"code","a68fa4b4":"code","ea8faf5d":"code","56a1ace7":"code","38179e67":"code","a4c07771":"code","2ed97a5b":"code","87ea82c1":"code","b7db6e93":"code","f32efd80":"code","25c4ccbb":"code","8756c041":"code","26940acc":"code","2c3abbf0":"code","1bedc97d":"code","c30320e4":"code","e1b3e70f":"code","5b29f182":"code","b4788c70":"code","16b654d1":"code","2a6f1381":"code","2956ea61":"code","6ba7ca54":"code","0a0fdeda":"code","540750fc":"code","df572961":"code","c9230c8b":"code","d5db45c4":"code","fe5406b6":"code","a823eff5":"code","cc0e5002":"code","140e728f":"code","e11fe2b7":"code","d5a055bf":"code","4eeceadb":"code","78845873":"code","3a4f1cce":"code","f774893a":"code","1946986f":"code","f0144d34":"code","c3127511":"code","cb0000cf":"code","21637454":"code","7dddab0e":"code","e5f83155":"code","43fb1b2a":"code","26e90dd9":"code","2599dff4":"code","43c75a9e":"code","eafb26fd":"code","c6a3b48f":"code","a0ac75bd":"code","48f46373":"code","182d175f":"code","20823670":"code","8a7cd889":"code","a0503460":"code","13b82ad4":"code","e49859de":"code","9d89efc3":"code","47e290df":"code","154d8836":"code","901902a8":"code","d30fdaa2":"code","dabc0c76":"code","b8616ac1":"code","ba7d987b":"code","b11b58a7":"code","714461cd":"code","a6041271":"code","ef92b19f":"code","93f43d23":"code","a6e03c09":"code","78440b4e":"code","8e71f77a":"code","5803f1af":"code","570b094e":"code","66cfba51":"code","ccf97045":"code","ebcef087":"code","722360b9":"code","759c3100":"code","42970020":"code","a9477cdb":"code","634424e3":"code","11436de8":"code","944637b3":"code","fb77a206":"code","e18bd020":"markdown","5d80eeec":"markdown","1912c8b2":"markdown","cba4c50f":"markdown","d8640bde":"markdown","aae05fe7":"markdown","71a537e3":"markdown","9bca1902":"markdown","658e38c6":"markdown","ba7a8b2f":"markdown","b4563620":"markdown","4d6d094c":"markdown","c8f31cab":"markdown","fbbc88d9":"markdown","91177411":"markdown"},"source":{"0842af27":"import numpy as np  \nimport pandas as pd  \n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold,GroupKFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import VotingRegressor\n\nfrom catboost import CatBoostRegressor\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nimport torch.utils.data as data\n\nimport gc","95fcb15d":"#\u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c random seed \u0434\u043b\u044f \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432\nrandom_seed = 42","ab14571e":"#\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u043d\u0430 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\ndef missing_values_table(df):\n        # \u0412\u0441\u0435\u0433\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u043f\u043e\u0437\u0438\u0446\u0438\u0439\n        mis_val = df.isnull().sum()\n        \n        # \u041f\u0440\u043e\u0446\u0435\u043d\u0442 \u043f\u0443\u0441\u0442\u044b\u0445 \u043f\u043e\u0437\u0438\u0446\u0438\u0439\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        \n        # \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        \n        # \u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\n        mis_val_table_ren_columns = mis_val_table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        \n        # \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e % \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n        mis_val_table_ren_columns = mis_val_table_ren_columns[\n            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n        \n        # \u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u0442\u0435\u043a\u0441\u0442\u0430\n        print (\"\u0412 \u0438\u0437\u0443\u0447\u0430\u0435\u043c\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \" + str(df.shape[1]) + \" \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432.\\n\"      \n            \"\u0412\u0441\u0435\u0433\u043e \" + str(mis_val_table_ren_columns.shape[0]) +\n              \" \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\")\n        \n        # \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438\n        return mis_val_table_ren_columns","88a90da1":"#\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u043d\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\ndef unique_data(df, col):\n    unique_d = pd.DataFrame(columns=['Parameter', 'unique'])\n    for i in range(len(col)):\n        unique_d.loc[i] = [col[i], df[col[i]].nunique(dropna = True)]\n    return unique_d","fdba4c27":"#\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435 \u0431\u0443\u0434\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e,\u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432\ndef cumulated_res(data, model,description, sub):\n    l = len(data)\n    data.loc[l]= [model, description, sub]\n    return data\n#\u0414\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432\ndf_cum = pd.DataFrame(columns=['\u041c\u043e\u0434\u0435\u043b\u044c', '\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435', 'Submission'])","e38aea57":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\ndef statistic(df, col):\n    median = df[col].median()\n    IQR = df[col].quantile(0.75) - df[col].quantile(0.25)\n    perc25 = df[col].quantile(0.25)\n    perc75 = df[col].quantile(0.75)\n    l=perc25 - 1.5*IQR \n    r=perc75 + 1.5*IQR\n    print(\"\u0414\u043b\u044f {0} IQR: {1}, \".format(col,IQR),\"\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{0}, {1}].\".format(l, r))\n    print('\u0412\u0441\u0435\u0433\u043e {} \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432'.format(df[df[col] > r][col].count()+df[df[col] < l][col].count()))","0e2555fe":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u044f\u0449\u0438\u043a\u0430 \u0441 \u0443\u0441\u0430\u043c\u0438\ndef graph_num(df, col, size = 6):\n    fig, (g1, g2) = plt.subplots(1, 2, figsize = (2*size,size))\n    fig.suptitle('Histogram and boxplot for {0} '.format(col), fontsize=20)\n    g1.hist(df[col], bins = 20, histtype = 'bar', align = 'mid', rwidth = 0.8, color = 'blue') # \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430\n    g2.boxplot(df[col], vert = False)  # \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n    plt.figtext(0.5, 0, col, fontsize = 16)\n    plt.show","c36d5b5c":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u0440\u044f\u0434\u0430, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u043e \u0432\u044b\u0431\u043e\u0440\u0443\ndef graph_ts(df,param, value):\n    df_ts = df.loc[df['breath_id'] == value]\n    sns.histplot(df_ts[param], kde=True)","8982028b":"#\u0412\u044b\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b\ntrain = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\n\nprint(train.shape, test.shape)","bd8c3b92":"submission = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')","4a8154dd":"train.head()","8aa32348":"train.info()","df6b80ef":"test.head()","8e41d634":"test.info()","0968c26c":"#\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\ncolumns_tr = list(train.columns)\ncolumns_te = list(test.columns)\nprint(\"train\", columns_tr)\nprint(\"test\", columns_te)","b6b45b5b":"# \u041f\u043e\u0438\u0441\u043a \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\nmissing_values_table(train)","a77dcec7":"# \u041f\u043e\u0438\u0441\u043a \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\nmissing_values_table(test)","ff1bc8b7":"#\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u043b\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0441\u0435\u0440\u0438\u0438 \u0432\u0434\u043e\u0445\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\u0445\ntrain_breath_id = [x for x in (np.unique(train['breath_id']))]\ntest_breath_id = [x for x in (np.unique(test['breath_id']))]\nset(test_breath_id).intersection(train_breath_id)","6eab3e83":"# \u041f\u043e\u0438\u0441\u043a \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\nunique_data(train, columns_tr)","0213e083":"# \u041f\u043e\u0438\u0441\u043a \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\nunique_data(test, columns_te)","0ed634b6":"train['id'].nunique()\/train['breath_id'].nunique()","7659b3df":"test['id'].nunique()\/test['breath_id'].nunique()","146b13d7":"train.groupby(\"breath_id\")[\"time_step\"].count()","9beaab65":"test.groupby(\"breath_id\")[\"time_step\"].count()","4623b927":"for c in columns_tr:\n    statistic(train, c)","7dafd6b7":"for c in columns_tr:\n    graph_num(train, c)","ff9a4db7":"for c in columns_te:\n    statistic(test, c)","7ddfce35":"for c in columns_te:\n    graph_num(test, c)","92fd8512":"for i in ['R','C','u_out']:\n    print(i)\n    print(train[i].value_counts())","423875ba":"sns.heatmap(train.corr(), vmin = -1, vmax = +1, annot = True, cmap = 'coolwarm')","81765877":"graph_ts(train,'pressure', 18)","49d3dba7":"graph_ts(train, 'u_in',45008)","6c631d76":"graph_ts(train,'R', 45094)","1a98a02b":"graph_ts(train, 'C', 18)","844dc944":"graph_ts(train,'u_out', 2)","44e6493e":"breath_id_1 = train[train['breath_id'] == 1]\nbreath_id_1.head()","6db7c989":"fig, ax1 = plt.subplots(figsize = (6, 4))\nax2 = ax1.twinx()\nax1.plot(breath_id_1['time_step'], breath_id_1['pressure'], 'm-', label='pressure')\nax1.plot(breath_id_1['time_step'], breath_id_1['u_in'], 'g-', label='u_in')\nax2.plot(breath_id_1['time_step'], breath_id_1['u_out'], 'b-', label='u_out')\n\nax1.set_xlabel('Timestep')\n\nR = breath_id_1['R'][0]\nC = breath_id_1['C'][0]\nax1.set_title(f'breath_id:{1}, R:{R}, C:{C}')\n\nax1.legend(loc=(1.1, 0.8))\nax2.legend(loc=(1.1, 0.7))\nplt.show()","c6ecd6f0":"sns.lineplot(x = 'id',y='pressure',data=breath_id_1[breath_id_1['u_out']==0],color='green',label='inhale pressure');\nsns.lineplot(x = 'id',y='pressure',data=breath_id_1[breath_id_1['u_out']==1],color='orange',label='exhale pressure');\nsns.lineplot(x = 'id',y='u_in',data=breath_id_1,color='blue',label='valve pressure')\nplt.title(f\"Variation of Pressure and Input valve position during breath Id 1\");\nplt.show()","84c00cff":"del breath_id_1\ndel columns_tr\ndel columns_te\ndel train_breath_id\ndel test_breath_id\n\ngc.collect()","66260978":"X_n=train.drop(['pressure','id'], axis=1)\ny_n=train['pressure']\nid_test = test['id']\nX_n_t = test.drop(['id'], axis=1)","6dc0d0cb":"X_n_train, X_n_test, y_n_train, y_n_test = train_test_split(X_n,y_n, test_size=0.2, random_state=random_seed)","746c41a4":"catboost=CatBoostRegressor()\ngrid={'depth': [6,8,10],\n      'learning_rate' : [0.01, 0.05, 0.1],\n      'iterations'    : [30, 50, 100]}","04f12830":"grid_catboost=GridSearchCV(estimator=catboost, param_grid = grid, cv = 2, n_jobs=-1)","a54e3fbf":"grid_catboost.fit(X_n_train,y_n_train)","6b287386":"preds_cb = grid_catboost.predict(X_n_t)","de8e96c1":"preds_cb","b5608a23":"sub_cb = submission\nsub_cb['pressure'] = preds_cb\nsub_cb.to_csv('submission_cb.csv', index=False)","8235f174":"cumulated_res(df_cum, 'CatBoost', '\u0431\u0435\u0437 EDA', '4.2000')","e6426c82":"del preds_cb\ndel X_n\ndel X_n_train\ndel X_n_test\ndel y_n\ndel y_n_train\ndel y_n_test\ndel X_n_t\ndel id_test\ngc.collect()","83eed4b5":"#\"\u041d\u0430\u0438\u0432\u043d\u044b\u0435\" \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b\ndf_tr_naiv = train\ndf_te_naiv = test\ntype(df_tr_naiv)","d898c8dc":"df_tr_naiv['R'] = df_tr_naiv['R'].astype(str)\ndf_tr_naiv['C'] = df_tr_naiv['C'].astype(str)\ndf_te_naiv['R'] = df_te_naiv['R'].astype(str)\ndf_te_naiv['C'] = df_te_naiv['C'].astype(str)\ndf_tr_naiv = pd.get_dummies(df_tr_naiv)\ndf_te_naiv = pd.get_dummies(df_te_naiv)\ndf_tr_naiv.info()","b206089a":"df_te_naiv.info()","64d91a7d":"y_naiv = df_tr_naiv['pressure']\nid_test = df_te_naiv['id']","a68fa4b4":"X_naiv = df_tr_naiv\nX_naiv.drop(['id', 'pressure', 'breath_id'], axis=1, inplace=True)\nX_s_naiv = df_te_naiv\nX_s_naiv.drop(['id', 'breath_id'], axis=1, inplace=True)","ea8faf5d":"X_naiv.head()","56a1ace7":"X_naiv.info()","38179e67":"X_s_naiv.info()","a4c07771":"del df_tr_naiv\ndel df_te_naiv\ndel id_test\n\ngc.collect()","2ed97a5b":"#\u041e\u0431\u043e\u0437\u043d\u0430\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u0438\ndtr = DecisionTreeRegressor(random_state=random_seed)\nabr = AdaBoostRegressor(random_state=random_seed)\nbr = BaggingRegressor(random_state=random_seed)\nensemble =  VotingRegressor([('br', br), ('abr', abr), ('dtr', dtr)])","87ea82c1":"test_preds_dtr = []\ntest_preds_abr = []\ntest_preds_br = []\ntest_preds_ens = []","b7db6e93":"kf = KFold(n_splits=5, shuffle=True, random_state=random_seed)","f32efd80":"print('DecisionTreeRegressor')\nfor fold, (train_idx, test_idx) in enumerate(kf.split(X_naiv, y_naiv)):\n    \n    print('fold->',fold+1)\n    X_naiv_train, X_Naivtest = X_naiv.loc[train_idx], X_naiv.loc[test_idx]\n    y_naiv_train, y_naiv_test = y_naiv.loc[train_idx], y_naiv.loc[test_idx]\n    dtr.fit(X_naiv_train, y_naiv_train)\n    test_preds_dtr.append(dtr.predict(X_s_naiv))","25c4ccbb":"sub_dtr = submission\nsub_dtr['pressure'] = sum(test_preds_dtr)\/5\nsub_dtr.to_csv('submission_dtr.csv', index=False)","8756c041":"cumulated_res(df_cum, 'DecisionTreeRegressor', '\u043d\u0430\u0438\u0432\u043d\u044b\u0439 feature engineering', '4.1192')","26940acc":"del test_preds_dtr\ngc.collect()","2c3abbf0":"print('AdaBoostRegressor')\nfor fold, (train_idx, test_idx) in enumerate(kf.split(X_naiv, y_naiv)):\n    \n    print('fold->',fold+1)\n    X_naiv_train, X_Naivtest = X_naiv.loc[train_idx], X_naiv.loc[test_idx]\n    y_naiv_train, y_naiv_test = y_naiv.loc[train_idx], y_naiv.loc[test_idx]\n    abr.fit(X_naiv_train, y_naiv_train)\n    test_preds_abr.append(abr.predict(X_s_naiv))","1bedc97d":"sub_abr = submission\nsub_abr['pressure'] = sum(test_preds_abr)\/5\nsub_abr.to_csv('submission_abr.csv', index=False)","c30320e4":"cumulated_res(df_cum, 'AdaBoostRegressor', '\u043d\u0430\u0438\u0432\u043d\u044b\u0439 feature engineering', '6.9884')","e1b3e70f":"del test_preds_abr\ngc.collect()","5b29f182":"print('BaggingRegressor')\nfor fold, (train_idx, test_idx) in enumerate(kf.split(X_naiv, y_naiv)):\n    print('fold->',fold+1)\n    X_naiv_train, X_Naivtest = X_naiv.loc[train_idx], X_naiv.loc[test_idx]\n    y_naiv_train, y_naiv_test = y_naiv.loc[train_idx], y_naiv.loc[test_idx]\n    br.fit(X_naiv_train, y_naiv_train)\n    test_preds_br.append(br.predict(X_s_naiv))","b4788c70":"sub_br = submission\nsub_br['pressure'] = sum(test_preds_br)\/5\nsub_br.to_csv('submission_br.csv', index=False)","16b654d1":"cumulated_res(df_cum, 'BaggingRegressor', '\u043d\u0430\u0438\u0432\u043d\u044b\u0439 feature engineering', '3.7660')","2a6f1381":"del test_preds_br\ngc.collect()","2956ea61":"print('VotingRegressor')\nfor fold, (train_idx, test_idx) in enumerate(kf.split(X_naiv, y_naiv)):\n    print('fold->',fold+1)\n    X_naiv_train, X_Naivtest = X_naiv.loc[train_idx], X_naiv.loc[test_idx]\n    y_naiv_train, y_naiv_test = y_naiv.loc[train_idx], y_naiv.loc[test_idx]\n    ensemble.fit(X_naiv_train, y_naiv_train)\n    test_preds_ens.append(ensemble.predict(X_s_naiv))","6ba7ca54":"del X_naiv\ndel y_naiv\ndel X_s_naiv\n\ngc.collect()","0a0fdeda":"sub_ens = submission\nsub_ens['pressure'] = sum(test_preds_ens)\/5\nsub_ens.to_csv('submission_ens.csv', index = False)","540750fc":"cumulated_res(df_cum, 'VotingRegressor', '\u043d\u0430\u0438\u0432\u043d\u044b\u0439 feature engineering', '4.5196')","df572961":"del test_preds_ens\ngc.collect()","c9230c8b":"sub_blend = submission\nsub_blend['pressure'] = (sub_dtr['pressure'],+sub_abr['pressure']+ sub_br['pressure']+sub_ens['pressure']+ sub_cb['pressure'])\/5\nsub_blend.to_csv('submission_blend.csv', index=False)","d5db45c4":"del sub_cb\ndel sub_dtr\ndel sub_abr\ndel sub_br\ndel sub_ens\ndel sub_blend\n\ngc.collect()","fe5406b6":"df_tr = train\ndf_te = test","a823eff5":"del train\ndel test\n\ngc.collect()","cc0e5002":"#\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u043c \u043a\u043b\u0430\u043f\u0430\u043d\u0435 last_value_u_in\nidxmax_time_step = df_tr.groupby('breath_id')['time_step'].idxmax()\nlast_value_u_in = df_tr.loc[idxmax_time_step, ['breath_id','u_in']]\nlast_value_u_in.columns = ['breath_id','last_value_u_in']\n\ndf_tr = df_tr.merge(last_value_u_in, on='breath_id')\n \nidxmax_time_step = df_te.groupby('breath_id')['time_step'].idxmax()\nlast_value_u_in = df_te.loc[idxmax_time_step, ['breath_id','u_in']]\nlast_value_u_in.columns = ['breath_id','last_value_u_in']\n\ndf_te = df_te.merge(last_value_u_in, on='breath_id')\ndf_te.head()","140e728f":"df_tr.head()","e11fe2b7":"del idxmax_time_step\ndel last_value_u_in\ngc.collect()","d5a055bf":"#\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u043a\u043b\u0430\u043f\u0430\u043d\u0435 mean value u_in\nmean_u_in = df_tr.groupby('breath_id')['u_in'].mean().to_frame()\nmean_u_in.columns = ['mean_value_u_in']\ndf_tr = df_tr.merge(mean_u_in,on='breath_id')\n\nmean_u_in = df_te.groupby('breath_id')['u_in'].mean().to_frame()\nmean_u_in.columns = ['mean_value_u_in']\ndf_te = df_te.merge(mean_u_in,on='breath_id')\ndf_te.head()","4eeceadb":"#\u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043d\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u043a\u043b\u0430\u043f\u0430\u043d\u0435 diff of value_u_in\ndf_tr['diff_u_in'] = df_tr.groupby('breath_id')['u_in'].diff()\ndf_tr = df_tr.fillna(0)\ndf_tr.head()\n\ndf_te['diff_u_in'] = df_te.groupby('breath_id')['u_in'].diff()\ndf_te = df_te.fillna(0)","78845873":"df_te.head()","3a4f1cce":"#\u0421\u0443\u043c\u043c\u0430 \u043d\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u043a\u043b\u0430\u043f\u0430\u043d\u0435 \u043d\u0430\u043a\u043e\u043f\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0438\u0442\u043e\u0433\u043e\u043c\ndf_tr['u_in_cumsum'] = (df_tr['u_in']).groupby(df_tr['breath_id']).cumsum()\ndf_te['u_in_cumsum'] = (df_te['u_in']).groupby(df_te['breath_id']).cumsum()","f774893a":"#\u0421\u0443\u043c\u043c\u0430 \u043d\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u043a\u043b\u0430\u043f\u0430\u043d\u0435 \u043e\u0431\u044b\u0447\u043d\u0430\u044f\nsum_u_in = df_tr.groupby('breath_id')['u_in'].sum().to_frame()\nsum_u_in.columns = ['sum_value_u_in']\ndf_tr = df_tr.merge(sum_u_in,on='breath_id')\n\nsum_u_in = df_te.groupby('breath_id')['u_in'].sum().to_frame()\nsum_u_in.columns = ['sum_value_u_in']\ndf_te = df_te.merge(sum_u_in,on='breath_id')","1946986f":"del sum_u_in\ngc.collect()","f0144d34":"#\u041e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043d\u0430\u043a\u043e\u043f\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u044b \u043a \u043e\u0431\u044b\u0447\u043d\u043e\u0439 \u043d\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u043a\u043b\u0430\u043f\u0430\u043d\u0435\ndf_tr[\"u_in_cumsum_rate\"] = df_tr[\"u_in_cumsum\"] \/ df_tr[\"sum_value_u_in\"]\ndf_te[\"u_in_cumsum_rate\"] = df_te[\"u_in_cumsum\"] \/ df_te[\"sum_value_u_in\"]","c3127511":"#\u0415\u0441\u043b\u0438 \u0443 \u0432\u0434\u043e\u0445\u0430 \u043d\u0443\u043b\u0435\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u043a\u043b\u0430\u043f\u0430\u043d\u0435\ndf_tr[df_tr[\"sum_value_u_in\"] == 0]\n","cb0000cf":"df_te[df_te[\"sum_value_u_in\"] == 0]","21637454":"df_tr = df_tr.fillna(0)\ndf_te = df_te.fillna(0)","7dddab0e":"# \u0414\u0430\u043d\u043d\u044b\u0435 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u043f\u0430\u043d\u0430 \u043f\u0440\u0438 \u0441\u0434\u0432\u0438\u0433\u0435 \u043d\u0430 \u043e\u0434\u0438\u043d \u0448\u0430\u0433\ndf_tr['lag_u_in'] = df_tr.groupby('breath_id')['u_in'].shift(1)\ndf_tr = df_tr.fillna(0)","e5f83155":"df_te['lag_u_in'] = df_te.groupby('breath_id')['u_in'].shift(1)\ndf_te = df_te.fillna(0)","43fb1b2a":"# \u0414\u0430\u043d\u043d\u044b\u0435 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u043f\u0430\u043d\u0430 \u043f\u0440\u0438 \u0441\u0434\u0432\u0438\u0433\u0435 \u043d\u0430 \u0434\u0432\u0430 \u0448\u0430\u0433\u0430\ndf_tr['lag_2_u_in'] = df_tr.groupby('breath_id')['u_in'].shift(2)\ndf_tr = df_tr.fillna(0)","26e90dd9":"df_te['lag_2_u_in'] = df_te.groupby('breath_id')['u_in'].shift(2)\ndf_te = df_te.fillna(0)","2599dff4":"# \u0414\u0430\u043d\u043d\u044b\u0435 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u043f\u0430\u043d\u0430 \u043f\u0440\u0438 \u0441\u0434\u0432\u0438\u0433\u0435 \u043d\u0430 \u043c\u0438\u043d\u0443\u0441 \u043e\u0434\u0438\u043d \u0448\u0430\u0433\ndf_tr['lag_-1_u_in'] = df_tr.groupby('breath_id')['u_in'].shift(-1)\ndf_tr = df_tr.fillna(0)\ndf_te['lag_-1_u_in'] = df_te.groupby('breath_id')['u_in'].shift(-1)\ndf_te = df_te.fillna(0)","43c75a9e":"# \u0414\u0430\u043d\u043d\u044b\u0435 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u043f\u0430\u043d\u0430 \u043f\u0440\u0438 \u0441\u0434\u0432\u0438\u0433\u0435 \u043d\u0430 \u043c\u0438\u043d\u0443\u0441 \u0434\u0432\u0430 \u0448\u0430\u0433\u0430\ndf_tr['lag_-2_u_in'] = df_tr.groupby('breath_id')['u_in'].shift(-2)\ndf_tr = df_tr.fillna(0)\ndf_te['lag_-2_u_in'] = df_te.groupby('breath_id')['u_in'].shift(-2)\ndf_te = df_te.fillna(0)","eafb26fd":"# \u0414\u0430\u043d\u043d\u044b\u0435 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u043f\u0430\u043d\u0430 \u043f\u0440\u0438 \u0441\u0434\u0432\u0438\u0433\u0435 \u043d\u0430 \u043c\u0438\u043d\u0443\u0441 \u0442\u0440\u0438 \u0448\u0430\u0433\u0430\ndf_tr['lag_-3_u_in'] = df_tr.groupby('breath_id')['u_in'].shift(-3)\ndf_tr = df_tr.fillna(0)\ndf_te['lag_-3_u_in'] = df_te.groupby('breath_id')['u_in'].shift(-3)\ndf_te = df_te.fillna(0)","c6a3b48f":"# \u0414\u0430\u043d\u043d\u044b\u0435 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u043f\u0430\u043d\u0430 \u043f\u0440\u0438 \u0441\u0434\u0432\u0438\u0433\u0435 \u043d\u0430 \u0442\u0440\u0438 \u0448\u0430\u0433\u0430\ndf_tr['lag_3_u_in'] = df_tr.groupby('breath_id')['u_in'].shift(3)\ndf_tr = df_tr.fillna(0)\ndf_te['lag_3_u_in'] = df_te.groupby('breath_id')['u_in'].shift(3)\ndf_te = df_te.fillna(0)","a0ac75bd":"# \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043f\u043e \u0432\u0434\u043e\u0445\u0443\ndf_tr[\"max_u_in_breathid\"] = df_tr.groupby(\"breath_id\")[\"u_in\"].transform(\"max\")\ndf_te[\"max_u_in_breathid\"] = df_te.groupby(\"breath_id\")[\"u_in\"].transform(\"max\")","48f46373":"## \u041c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u043e \u0432\u0434\u043e\u0445\u0443\ndf_tr['breath_id__u_in__min'] = df_tr.groupby(['breath_id'])['u_in'].transform('min')\ndf_te['breath_id__u_in__min'] = df_te.groupby(['breath_id'])['u_in'].transform('min')","182d175f":"#\u041f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ndf_tr[\"R*C\"] = df_tr['R'] * df_tr['C']\ndf_te['R*C'] = df_te['R'] * df_te['C']","20823670":"df_tr['breath_id__u_in__diffmax'] = df_tr.groupby(['breath_id'])['u_in'].transform('max') - df_tr['u_in']\ndf_tr['breath_id__u_in__diffmean'] = df_tr.groupby(['breath_id'])['u_in'].transform('mean') - df_tr['u_in']\n\ndf_te['breath_id__u_in__diffmax'] = df_te.groupby(['breath_id'])['u_in'].transform('max') - df_te['u_in']\ndf_te['breath_id__u_in__diffmean'] = df_te.groupby(['breath_id'])['u_in'].transform('mean') - df_te['u_in']","8a7cd889":"df_tr['breath_id__u_in__diffmax'] = df_tr.groupby(['breath_id'])['u_in'].transform('max') - df_tr['u_in']\ndf_tr['breath_id__u_in__diffmean'] = df_tr.groupby(['breath_id'])['u_in'].transform('mean') - df_tr['u_in']\n\ndf_te['breath_id__u_in__diffmax'] = df_te.groupby(['breath_id'])['u_in'].transform('max') - df_te['u_in']\ndf_te['breath_id__u_in__diffmean'] = df_te.groupby(['breath_id'])['u_in'].transform('mean') - df_te['u_in']","a0503460":"df_tr['area'] = df_tr['time_step'] * df_tr['u_in']\ndf_tr['area'] = df_tr.groupby('breath_id')['area'].cumsum()\ndf_te['area'] = df_te['time_step'] * df_te['u_in']\ndf_te['area'] = df_te.groupby('breath_id')['area'].cumsum()","13b82ad4":"df_tr[\"train_test\"] = \"train\"\ndf_te[\"train_test\"] = \"test\"","e49859de":"train_test_all = pd.concat([df_tr,df_te],axis=0)","9d89efc3":"del df_tr\ndel df_te\ngc.collect()","47e290df":"train_test_all.head()","154d8836":"train_test_all['R_C'] = [f'{r}_{c}' for r, c in zip(train_test_all['R'], train_test_all['C'])]","901902a8":"train_test_all = pd.get_dummies(train_test_all,columns=[\"R_C\"])","d30fdaa2":"train_test_all.columns","dabc0c76":"train_test_all['time_diff']=train_test_all.time_step.diff().fillna(0)","b8616ac1":"df_tr = train_test_all[train_test_all[\"train_test\"] == \"train\"]\ndf_te = train_test_all[train_test_all[\"train_test\"] == \"test\"]","ba7d987b":"del train_test_all\ngc.collect()","b11b58a7":"LM = True\nu_out_zero_only = False ## if train from only u_out=0 data ","714461cd":"#train\nif(u_out_zero_only):\n    df_tr = df_tr[df_tr[\"u_out\"] == 0]\n    df_tr = df_tr.reset_index(drop=True)\nX_train = df_tr.drop([\"pressure\",\"breath_id\",\"train_test\"],axis=1)\ny_train = df_tr['pressure']\nX_test = df_te.drop([\"pressure\",\"breath_id\",\"train_test\"],axis=1)\n\nif(LM):\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    #print(scaler.mean_)\n\n    X_train_std = scaler.transform(X_train)\n\n\n    lr = LinearRegression().fit(X_train_std, y_train)\n    print(\"\u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0434\u0435\u0442\u0435\u0440\u043c\u0438\u043d\u0430\u0446\u0438\u0438 = \",lr.score(X_train_std, y_train))\n\n\n    #test\n    X_test_std = scaler.transform(X_test)\n    sub_lr=submission\n    sub_lr['pressure'] = lr.predict(X_test_std)\n    sub_lr.to_csv(\"submission_lm.csv\",index=False)","a6041271":"cumulated_res(df_cum, 'Linear Regression', 'feature engineering', '4.2873')","ef92b19f":"df_cum.to_csv('cum.csv', index=False)","93f43d23":"del df_tr\ndel df_te\ndel X_train\ndel y_train\ndel X_test\ndel X_train_std\ndel X_test_std\n\ngc.collect()","a6e03c09":"train= pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest= pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\ntest_ids= test['id'].to_numpy()","78440b4e":"# \u041e\u0431\u0435\u0440\u043d\u0451\u043c \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e\ndef preprocess(df):\n    dfr= pd.get_dummies(df['R'], prefix= \"R_\")\n    df= pd.concat([df, dfr], axis= 1)\n    dfc= pd.get_dummies(df['C'], prefix= \"C_\")\n    df= pd.concat([df, dfc], axis= 1)\n    df= df.drop(['R', 'C'], axis= 1)\n\n    df['u_in_cumsum']= df['u_in'].groupby(df['breath_id']).cumsum()\n    df['time_step_cumsum']= df['time_step'].groupby(df['breath_id']).cumsum()\n    \n    df['u_in_min']= df['u_in'].groupby(df['breath_id']).transform('min')\n    df['u_in_max']= df['u_in'].groupby(df['breath_id']).transform('max')\n    df['u_in_mean']= df['u_in'].groupby(df['breath_id']).transform('mean')\n   \n    df['u_in_lag2']= df['u_in'].groupby(df['breath_id']).shift(2)\n    df['u_in_lag1']= df['u_in'].groupby(df['breath_id']).shift(1)\n    df['u_in_lag-1']= df['u_in'].groupby(df['breath_id']).shift(-1)\n    df['u_in_lag-2']= df['u_in'].groupby(df['breath_id']).shift(-2)\n    df= df.fillna(0)\n\n    df['u_in_diff1']= df['u_in']- df['u_in_lag1']\n    df['u_in_diff2']= df['u_in']- df['u_in_lag2']\n    df['u_in_diff3']= df['u_in_max']- df['u_in']\n    df['u_in_diff4']= df['u_in_mean']- df['u_in']\n\n    df1= df[df['u_out'] == 0]\n    df['mean_inspiratory_uin']= df1['u_in'].groupby(df['breath_id']).transform('mean')\n\n    df2= df[df['u_out'] == 1]\n    df['mean_expiratory_uin']= df2['u_in'].groupby(df['breath_id']).transform('mean')\n    \n    df['u_in_diff5']= df['mean_inspiratory_uin']- df['u_in']\n    df['u_in_diff6']= df['mean_expiratory_uin']- df['u_in']\n    \n    df= df.fillna(0)\n    \n    df['delta_t']= df.groupby('breath_id')['time_step'].diff().fillna(0)\n    df['delta_uin']= df.groupby('breath_id')['u_in'].diff().fillna(0)\n    \n    df['area']= df['u_in']*df['delta_t']\n    df['area']= df.groupby('breath_id')['area'].cumsum()\n    df['slope']= (df['delta_uin']\/df['delta_t']).fillna(0)\n\n    return df","8e71f77a":"groups= train.breath_id.values.reshape(-1, 80)[:, 0]\ngroups.shape\n\ntrain= preprocess(train)\ntargets= train['pressure'].to_numpy().reshape(-1, 80)\ntrain.drop(['id','pressure', \"breath_id\"], axis= 1, inplace= True)\n\ntest= preprocess(test)\ntest.drop(['id', \"breath_id\"], axis= 1, inplace= True)\ny_test= np.zeros(test.shape[0]).reshape(-1, 80)","5803f1af":"RS = RobustScaler()\ntrain = RS.fit_transform(train)\ntest  = RS.transform(test)\n\nnum_features= train.shape[-1]\ntrain= train.reshape(-1, 80, num_features)\ntest= test.reshape(-1, 80, num_features)","570b094e":"class CustomDataset:\n    def __init__(self, data, target):\n        self.data= data\n        self.target= target\n        \n    def __len__(self):\n        return len(self.data)\n    \n    def __getitem__(self, idx):\n        current_sample= self.data[idx, :, :]\n        current_target= self.target[idx, :]\n        \n        return torch.tensor(current_sample, dtype= torch.float), torch.tensor(current_target, dtype= torch.float)","66cfba51":"class RNNModel(nn.Module):\n    def __init__(self, input_dim, output_dim):\n        super(RNNModel, self).__init__()\n        \n        hidden_dim= [400, 300, 200, 100]\n        self.bilstm1= nn.LSTM(input_dim, hidden_dim[0], batch_first= True, bidirectional= True)\n        self.norm1= nn.LayerNorm(hidden_dim[0]*2)\n        \n        self.bilstm2= nn.LSTM(hidden_dim[0]*2, hidden_dim[1], batch_first= True, bidirectional= True)\n        self.norm2= nn.LayerNorm(hidden_dim[1]*2)\n        \n        self.bilstm3= nn.LSTM(hidden_dim[1]*2, hidden_dim[2], batch_first= True, bidirectional= True)\n        self.norm3= nn.LayerNorm(hidden_dim[2]*2)\n        \n        self.bilstm4= nn.LSTM(hidden_dim[2]*2, hidden_dim[3], batch_first= True, bidirectional= True)\n        self.norm4= nn.LayerNorm(hidden_dim[3]*2)\n        \n        self.fc1= nn.Linear(hidden_dim[3]*2, 100)\n        self.fc2= nn.Linear(100, output_dim)\n\n        \n    def forward(self, X):\n        pred, _= self.bilstm1(X)\n        pred= self.norm1(pred)\n        \n        pred, _= self.bilstm2(pred)\n        pred= self.norm2(pred)\n        \n        pred, _= self.bilstm3(pred)\n        pred= self.norm3(pred)\n        \n        pred, _= self.bilstm4(pred)\n        pred= self.norm4(pred)\n        \n        pred= self.fc1(pred)\n        pred= F.selu(pred)\n        \n        pred= self.fc2(pred)\n        pred= pred.squeeze(dim= 2)\n        return pred","ccf97045":"def initialize_parameters(m):\n    if isinstance(m, nn.LSTM):\n        nn.init.orthogonal_(m.weight_ih_l0.data, gain= nn.init.calculate_gain('tanh'))\n        nn.init.orthogonal_(m.weight_hh_l0.data, gain= nn.init.calculate_gain('tanh'))\n        nn.init.orthogonal_(m.weight_ih_l0_reverse.data, gain= nn.init.calculate_gain('tanh'))\n        nn.init.orthogonal_(m.weight_hh_l0_reverse.data, gain= nn.init.calculate_gain('tanh'))\n        \n        nn.init.constant_(m.bias_ih_l0.data, 0)\n        nn.init.constant_(m.bias_hh_l0.data, 0)\n        nn.init.constant_(m.bias_ih_l0_reverse.data, 0)\n        nn.init.constant_(m.bias_hh_l0_reverse.data, 0)\n        \n    if isinstance(m, nn.Linear):\n        nn.init.xavier_normal_(m.weight.data)\n        nn.init.constant_(m.bias.data, 0)","ebcef087":"#\u041e\u043f\u0438\u0448\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\ndevice= \"cuda\" if torch.cuda.is_available() else 'cpu'\nINPUT_DIM= num_features\nOUTPUT_DIM= 1\nBATCH_SIZE= 1024","722360b9":"def train_model(dataloader, model, criterion, optimizer):\n    size= len(dataloader.dataset)\n    model.train()\n    batches= len(dataloader)\n    train_loss= 0\n    \n    for batch_idx, (X, y) in enumerate(dataloader):\n        X, y= X.to(device), y.to(device)\n\n        scores= model(X)\n        loss= criterion(scores, y)\n\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        \n        loss= loss.item()\n        train_loss += loss\n        \n    train_loss_avg= train_loss\/batches\n    print(f\"avg. train loss: {train_loss_avg}\")\n    return train_loss_avg","759c3100":"def val_model(dataloader, model, criterion):\n    \n    size= len(dataloader.dataset)\n    batches= len(dataloader)\n    model.eval()\n    test_loss= 0\n\n    with torch.no_grad():\n        for X, y in (dataloader):\n            X, y= X.to(device), y.to(device)\n      \n            scores= model(X)\n            test_loss += criterion(scores, y)\n\n    test_loss \/= batches\n    print(f\"avg test loss : {test_loss}\")\n    return test_loss","42970020":"def predict_model(dataloader, model):\n    model.eval()\n    y_pred= np.array([])\n    \n    with torch.no_grad():\n        for X , y in dataloader:\n            X, y= X.to(device), y.to(device)\n            \n            preds= model(X)\n            preds= preds.flatten().cpu().numpy()\n            \n            y_pred= np.concatenate((y_pred, preds))\n            \n    return y_pred","a9477cdb":"kfold= GroupKFold(n_splits= 5)\nEPOCHS= 150\ncv_scores= []\npredictions= np.zeros(test_ids.shape[0])\n\n\nfor fold, (train_idx, val_idx) in enumerate(kfold.split(train, targets, groups= groups)):\n    X_train, X_val= train[train_idx], train[val_idx]\n    y_train, y_val= targets[train_idx], targets[val_idx]\n    \n    train_dataset= CustomDataset(data= X_train, target= y_train)\n    val_dataset= CustomDataset(data= X_val, target= y_val)\n\n    train_loader= data.DataLoader(train_dataset, batch_size= BATCH_SIZE)\n    val_loader= data.DataLoader(val_dataset, batch_size= BATCH_SIZE)\n    \n    model= RNNModel(input_dim= INPUT_DIM, output_dim= OUTPUT_DIM).to(device)\n    model.apply(initialize_parameters)\n\n    criterion= nn.L1Loss()\n    criterion.to(device)\n\n    optimizer= optim.Adam(model.parameters(), lr= 0.001)\n    scheduler= optim.lr_scheduler.ReduceLROnPlateau(optimizer, factor= 0.5, patience= 10, verbose= True)\n    \n    best_valid_loss= float('inf')\n    \n    avg_train_losses= []\n    avg_val_losses= []\n    \n    for t in range(EPOCHS):\n        print(f\"Epoch: {t+1}\")\n        train_loss= train_model(train_loader, model, criterion, optimizer)\n        val_loss= val_model(val_loader, model, criterion)\n        \n        avg_train_losses.append(train_loss)\n        avg_val_losses.append(val_loss)\n        \n        if (val_loss< best_valid_loss):\n            best_valid_loss= val_loss\n            ofilename = 'ventilator%d.pth' % fold\n            torch.save(model.state_dict(),  ofilename)\n        \n        scheduler.step(val_loss)\n    \n    cv_scores.append(best_valid_loss)\n    \n    test_dataset= CustomDataset(data= test, target= y_test)\n    test_loader= data.DataLoader(test_dataset, batch_size= BATCH_SIZE)\n                       \n    model.load_state_dict(torch.load('ventilator%d.pth' % fold, map_location=device))\n    predictions += (predict_model(test_loader, model)\/5)","634424e3":"predictions","11436de8":"cv_scores","944637b3":"sub_nn= pd.DataFrame({'id': test_ids, 'pressure': predictions})\nsub_nn.to_csv('submission.csv',index = False)","fb77a206":"cumulated_res(df_cum, 'LSTM', 'feature engineering', '0.2288')","e18bd020":"\u041d\u0430\u0447\u043d\u0451\u043c \u0441\u043e\u0431\u0438\u0440\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438.\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0442\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043d\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445, \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u044f \u0438\u0445 \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0440\u044f\u0434\u044b, \u0437\u0430\u0442\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0432 \u043d\u043e\u0432\u044b\u0435, \u0437\u0430\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0440\u044f\u0434\u044b. \u0427\u0442\u043e \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u0442\u043e \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438, \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u0438, \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044c \u0438 \u043f\u043e\u0431\u043b\u0435\u043d\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.   \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0432\u044b\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0437\u0430\u043d\u043e\u0432\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b, \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 train \u0438 test.\n# 3. \u041c\u043e\u0434\u0435\u043b\u0438\n# 3.1 \u0420\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u043d\u0430 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445\n\u041d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c","5d80eeec":"\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043d\u0430\u043c \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e,  \u0447\u0442\u043e \u0441\u0435\u0440\u0438\u0438 \u0432\u0434\u043e\u0445\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440, \u0431\u0443\u0434\u0435\u043c \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432\u0434\u043e\u0445\u043e\u0432 \u0432 \u0440\u044f\u0434\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c  80.\n## 2.1 \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438","1912c8b2":"# 3.3 \u0420\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u043d\u0430 \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445\n\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438. \n\n\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f","cba4c50f":"\u0420\u0430\u0441\u0447\u0451\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u0438\u0434\u0442\u0438 \u043d\u0430 5 \u0444\u043e\u043b\u0434\u0430\u0445","d8640bde":"## 1.2 \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439","aae05fe7":"# 2. \u0418\u043c\u043f\u043e\u0440\u0442 \u0438 \u043e\u0431\u0437\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0432\u0438\u0434\u0435 \u0434\u0432\u0443\u0445 \u0432\u044b\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 Kaggle \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u0438 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0434\u043b\u044f \u0441\u0430\u0431\u043c\u0438\u0442\u043e\u0432. \u0418\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0447\u0442\u043e \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f:\n\n**id** - \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0434\u043e\u0445\u0430.   \n  **breath_id -** \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0435\u0440\u0438\u0438 \u0432\u0434\u043e\u0445\u043e\u0432. \u0418\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0432\u0438\u0434\u0435 \u043d\u0430\u0431\u043e\u0440\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0440\u044f\u0434\u043e\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u0438\u0437 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432\u0434\u043e\u0445\u043e\u0432.\n  **R** - \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043b\u0451\u0433\u043a\u0438\u0445, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043e\u0440\u0433\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0434\u044b\u0445\u0430\u043d\u0438\u044f (\u0432 cmH2O\/L\/S). \u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438 \u044d\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043f\u043e\u0442\u043e\u043a\u0435 \u0432\u043e\u0437\u0434\u0443\u0445\u0430  (\u043e\u0431\u044a\u0451\u043c \u0432\u043e\u0437\u0434\u0443\u0445\u0430 \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f). \u0418\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u043e \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c\u043a\u0430\u043a \u043f\u043e\u043f\u044b\u0442\u043a\u0443 \u043d\u0430\u0434\u0443\u0442\u044c \u0448\u0430\u0440\u0438\u043a \u0447\u0435\u0440\u0435\u0437 \u0441\u043e\u043b\u043e\u043c\u0438\u043d\u043a\u0443. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 R \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c, \u043c\u0435\u043d\u044f\u044f \u0434\u0438\u0430\u043c\u0435\u0442\u0440 \u0441\u043e\u043b\u043e\u043c\u0438\u043d\u043a\u0438. \u0427\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 R, \u0442\u0435\u043c \u0441\u043b\u043e\u0436\u043d\u0435\u0435 \u043d\u0430\u0434\u0443\u0432\u0430\u0442\u044c.   \n  **C** - \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043b\u0451\u0433\u043a\u0438\u0445, \u043e\u0442\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0439 \u0438\u0445 \"\u043f\u043e\u0434\u0430\u0442\u043b\u0438\u0432\u043e\u0441\u0442\u044c\"(\u0432 mL\/cmH2O). \u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438 \u044d\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043e\u0431\u044a\u0451\u043c\u0435 \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0434\u0430\u0432\u043b\u0435\u043d\u0438\u044f. \u0418\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u043e \u044d\u0442\u043e \u0442\u043e\u0442 \u0436\u0435 \u0441\u0430\u043c\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441 \u0448\u0430\u0440\u0438\u043a\u043e\u043c. \u0421 \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c, \u0438\u0437\u043c\u0435\u043d\u044f\u044f \u0442\u043e\u043b\u0449\u0438\u043d\u0443 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430 \u0448\u0430\u0440\u0438\u043a\u0430. \u0427\u0435\u043c \u0432\u044b\u0448\u0435 \u0421, \u0442\u0435\u043c \u0442\u043e\u043d\u044c\u0448\u0435 \u0441\u0442\u0435\u043d\u043a\u0430 \u0438 \u0442\u0435\u043c \u043b\u0435\u0433\u0447\u0435 \u043d\u0430\u0434\u0443\u0432\u0430\u0442\u044c \u0448\u0430\u0440\u0438\u043a.   \n  **time_step -** \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f  \n  **u_in -** \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0432\u0445\u043e\u0434\u0430 \u043d\u0430 \u043a\u043b\u0430\u043f\u0430\u043d\u0435 \u043e\u0442 0 (\u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0437\u0430\u043a\u0440\u044b\u0442, \u0432\u043e\u0437\u0434\u0443\u0445 \u043d\u0435 \u0432\u0434\u044b\u0445\u0430\u0435\u0442\u0441\u044f) \u0434\u043e 100.  \n  **u_out -** \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0432\u044b\u0445\u043e\u0434\u0430 \u043d\u0430 \u043a\u043b\u0430\u043f\u0430\u043d\u0435. 0 \u043a\u043b\u0430\u043f\u0430\u043d \u0437\u0430\u043a\u0440\u044b\u0442, \u043f\u0430\u0446\u0438\u0435\u043d\u0442 \u0432\u0434\u044b\u0445\u0430\u0435\u0442 \u0438\u043b\u0438 1 - \u043a\u043b\u0430\u043f\u0430\u043d \u043e\u0442\u043a\u0440\u044b\u0442, \u043f\u0430\u0446\u0438\u0435\u043d\u0442 \u0432\u044b\u0434\u044b\u0445\u0430\u0435\u0442.  \n  **pressure -** \u0434\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0437\u0434\u0443\u0445\u0430 \u0432 cmH2O - \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440.","71a537e3":"# 3.2 \u0420\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u043d\u0430 \"\u043d\u0430\u0438\u0432\u043d\u044b\u0445\" \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445\n\n\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435.","9bca1902":"\u041d\u0435 \u0441\u0430\u043c\u044b\u0435 \u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0438. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0434\u0440\u0443\u0433\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. ","658e38c6":"\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","ba7a8b2f":"# 3.4 \u041d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044c\n\n\u0420\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043d\u0430 \u0440\u044f\u0434\u044b \u043f\u043e \u0441\u0435\u0442\u0443 \u0432\u0434\u043e\u0445\u043e\u0432, \u0434\u0430\u044e\u0442 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0440\u043e\u0433\u043d\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0435\u0440\u0435\u0437 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044c. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u043e\u0434\u0430\u0432\u0430\u0442\u044c \u0431\u0443\u0434\u0435\u043c \u0441\u0435\u0442\u0430\u043c\u0438 \u043f\u043e 80 \u0448\u0430\u0433\u043e\u0432 (\u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0441\u0435\u0440\u0438\u044e \u0432\u0434\u043e\u0445\u043e\u0432).\n\u0423\u0447\u0438\u0442\u044b\u0432\u0430\u044f, \u0447\u0442\u043e \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0439 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043f\u0430\u043c\u044f\u0442\u0438 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b \u0443\u0434\u0430\u043b\u044f\u043b\u0438\u0441\u044c, \u0437\u0430\u043d\u043e\u0432\u043e \u0432\u044b\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0440\u0435\u0448\u0435\u0439\u043f\u0438\u043d\u0433. ","b4563620":"# \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u043e \u043a\u0443\u0440\u0441\u0443 Data Science\n![](https:\/\/gipermed.ru\/upload\/iblock\/e3d\/e3d6730be6efe6548610fc6d500c1e03.jpg)\n\n\u0420\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u043a \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044e **\"Google Brain - Ventilator Pressure Prediction\"**\n\n## \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u0421\u0443\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f  \u0432 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0433\u043e \u0434\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u043e\u043c \u0434\u043b\u044f \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0432\u0435\u043d\u0442\u0438\u043b\u044f\u0446\u0438\u0438 \u043b\u0451\u0433\u043a\u0438\u0445, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u043e\u0433\u043e \u043a \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0435\u043c\u0443\u0441\u044f \u0431\u0435\u0437 \u0441\u043e\u0437\u043d\u0430\u043d\u0438\u044f \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0443. \u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u0442\u0430\u043a\u043e\u0433\u043e \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u0430 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0434\u0435\u0448\u0435\u0432\u043b\u0435 \u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0435\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043b\u0438\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0438\u0441\u043f\u044b\u0442\u0430\u043d\u0438\u0439. \u0412 \u0438\u0442\u043e\u0433\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u043e\u0432, \u0431\u043e\u043b\u0435\u0435 \u0433\u0438\u0431\u043a\u043e \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u043a \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0443. \n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u0440\u0435\u0448\u0435\u043d\u0438\u044e \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0430\u0431\u043c\u0438\u0442\u043e\u0432 \u043d\u0430 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435. \n\n# 1. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a \u0440\u0430\u0431\u043e\u0442\u0435\n## 1.1 \u0418\u043c\u043f\u043e\u0440\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","4d6d094c":"## 2.1 \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u0437\u043e\u0440\n\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c pandas_profiling \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0438\u0437-\u0437\u0430 \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432. \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u043d\u0430\u043c\u0435\u0440\u0442\u0432\u043e \u0437\u0430\u0432\u0438\u0441\u0430\u043b\u0430. ","c8f31cab":"\u041c\u044b \u043d\u0435 \u0432\u0438\u0434\u0438\u043c \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f. \u0422\u0430\u043a\u0436\u0435 3 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435. \n\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438.","fbbc88d9":"\u0411\u043e\u043b\u0435\u0435 \u043c\u0435\u043d\u0435\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0432\u044b\u0445\u043e\u0434\u0430 \u043d\u0430 \u043a\u043b\u0430\u043f\u0430\u043d\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u0434\u043e\u0445\u0430. \n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u0434\u044b\u0445\u0430\u043d\u0438\u044f.","91177411":"\u0423\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u0440\u0430\u0437\u043c\u0435\u0440 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432, \u0431\u0443\u0434\u0435\u043c \u0441\u0440\u0430\u0437\u0443 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u043f\u0438\u0441\u043a\u0438 \u0438 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u043c\u044f\u0442\u044c. "}}