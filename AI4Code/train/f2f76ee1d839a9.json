{"cell_type":{"93a82597":"code","c7ff2a3f":"code","5ab51d50":"code","45593c95":"code","31d0b75c":"code","451529c9":"code","f39838c4":"code","4f5e733c":"code","82d19bff":"code","ce670111":"code","20b64476":"code","d0979a20":"code","c6eb60ca":"code","f38a2067":"code","5a682daa":"code","b70d7fd9":"code","69ac9653":"code","c7bfd03f":"markdown","3948b9de":"markdown","e1decc0a":"markdown"},"source":{"93a82597":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport imblearn \nfrom imblearn.over_sampling import SMOTE\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import StratifiedKFold,cross_val_score\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix,roc_curve,roc_auc_score\nfrom sklearn.linear_model import LogisticRegression,LogisticRegressionCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","c7ff2a3f":"df = pd.read_csv('creditcard.csv')\ndf.head()","5ab51d50":"df.shape","45593c95":"df.isna().sum()","31d0b75c":"df.info()","451529c9":"df['Class'].value_counts().plot.barh()\nplt.title(\"No of fraudulant transations and legal transation\")\ndf['Class'].value_counts() ","f39838c4":"x = df.drop(\"Class\",axis=1) #x will contain all columns of data except `class`\ny = df['Class']\nprint(x.shape,y.shape)","4f5e733c":"#split data into training and testing sets\nx_train,x_test,y_train,y_test = train_test_split(x,y,random_state=42,test_size=.25)","82d19bff":"smote = SMOTE(random_state=42)\nX,Y = smote.fit_resample(x_train,y_train)\n\nprint(\"After SMOTE\")\nY.value_counts().plot.bar()","ce670111":"x.shape,y.shape","20b64476":"plt.figure(figsize=(10,10))\nsns.heatmap(df.corr(),cmap='tab20_r',linewidths=5,annot=False)","d0979a20":"clf = LogisticRegression()\nclf.fit(X,Y)\ny_pred = clf.predict(x_test)\n\nacc_lr = accuracy_score(y_test,y_pred)\nconf = confusion_matrix(y_test,y_pred)\nclf_report = classification_report(y_test,y_pred)\n\nprint(f'Accuracy Score of Logistic Regression:{acc_lr}')\nprint(f\"Confusion Matrix : \\n{conf}\")\nprint(f\"Classification Report : \\n{clf_report}\")\n","c6eb60ca":"clf = LogisticRegressionCV(cv = 5)\nclf.fit(X,Y)\ny_pred = clf.predict(x_test)\n\nacc_lr = accuracy_score(y_test,y_pred)\nconf = confusion_matrix(y_test,y_pred)\nclf_report  = classification_report(y_test,y_pred)\n\nprint(f\"Accuracy Score Of logistic Regression:{acc_lr}\")\nprint(f\"confusion Matrix :\\n{conf}\")\nprint(f\"Classification Report :\\n{clf_report}\")\n","f38a2067":"clf = DecisionTreeClassifier()\nclf.fit(X,Y)\ny_pred = clf.predict(x_test)\n\nacc_lr = accuracy_score(y_test,y_pred)\nconf = confusion_matrix(y_test,y_pred)\nclf_report = classification_report(y_test,y_pred)\n\nprint(f\"Accuracy Score for Decision Tree :{acc_lr}\")\nprint(f\"confusion Matrix :\\n{conf}\")\nprint(f\"Classification Report :\\n{clf_report}\")","5a682daa":"from sklearn import tree","b70d7fd9":"tree.plot_tree(clf)","69ac9653":"random_clf = RandomForestClassifier()\nrandom_clf.fit(X, Y)\n\ny_pred_random_clf = random_clf.predict(x_test)\n\nacc_rd_clf = accuracy_score(y_test, y_pred_random_clf)\nconf = confusion_matrix(y_test, y_pred_random_clf)\nclf_report = classification_report(y_test, y_pred_random_clf)\n\nprint(f\"Accuracy Score of Random Forest is : {acc_rd_clf}\")\nprint(f\"Confusion Matrix : \\n{conf}\")\nprint(f\"Classification Report : \\n{clf_report}\")\n","c7bfd03f":"# Credit Fraud Detection","3948b9de":"# Importing necessary L","e1decc0a":"# Context\nIt is important that credit card companies are able to recognize fraudulent credit card transactions so that customers are not charged for items that they did not purchase.\n\n### Content\nThe datasets contains transactions made by credit cards in September 2013 by european cardholders. This dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.\n\nIt contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, we cannot provide the original features and more background information about the data. Features V1, V2, ... V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-senstive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.\n\n### Inspiration\nIdentify fraudulent credit card transactions.\n\nGiven the class imbalance ratio, we recommend measuring the accuracy using the Area Under the Precision-Recall Curve (AUPRC). Confusion matrix accuracy is not meaningful for unbalanced classification.\n\n### Acknowledgements\nThe dataset has been collected and analysed during a research collaboration of Worldline and the Machine Learning Group (http:\/\/mlg.ulb.ac.be) of ULB (Universit\u00e9 Libre de Bruxelles) on big data mining and fraud detection. More details on current and past projects on related topics are available on https:\/\/www.researchgate.net\/project\/Fraud-detection-5 and the page of the DefeatFraud project The link to download from dataset is :- https:\/\/www.kaggle.com\/mlg-ulb\/creditcardfraud"}}