{"cell_type":{"fead6831":"code","6bc5b515":"code","97b2817d":"code","80ad73e4":"code","1ee4b1e5":"code","14f3c015":"code","669c7135":"code","8814d50c":"code","33f3d097":"code","507015e9":"code","77fbb234":"code","91d8f305":"code","e3a8bab0":"code","5efd7644":"code","84842165":"code","8377084e":"code","bf144407":"code","a8b3acba":"code","b930d6fc":"code","ec6ac78b":"code","79ab14b2":"code","8c1eefb6":"code","4102aa6f":"code","0422ed9a":"code","39b23ba6":"code","48130d36":"code","3037dace":"code","ace5187f":"code","0691fdc7":"code","e8eed303":"code","e720b3a0":"code","60ec2613":"code","9df5a7bb":"code","f4178541":"code","241913aa":"code","3fb2206d":"code","ffd2b4d1":"code","9083e0c0":"code","76e23ad3":"code","5f11d8ea":"code","8771d967":"code","82419e34":"code","76b7b861":"code","85d639a1":"code","ef18ab7b":"code","1605cb9b":"code","a452f427":"code","43482e25":"code","315048dc":"code","16753489":"code","5b722344":"code","25acc665":"code","8ba7c28a":"code","8ec70bbd":"code","969120a9":"code","0bf26600":"code","0a830838":"code","e3116e2b":"markdown","04f0ed15":"markdown","fc2717d3":"markdown","65f0ec4a":"markdown","75b514b5":"markdown"},"source":{"fead6831":"!jupyter nbextension enable --py --sys-prefix ipyleaflet\nfrom mpl_toolkits.basemap import Basemap as mp\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder, Imputer, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nimport seaborn as sns\nimport numpy as np\nfrom sklearn.cluster import KMeans","6bc5b515":"data = pd.read_csv('..\/input\/crime.csv', encoding='ISO-8859-1')\ndata.head()","97b2817d":"data.info()","80ad73e4":"data['DAY_OF_WEEK'].unique().tolist()","1ee4b1e5":"#criando coluna dias da semana | transformando dados ordinais\ndays = { 'Monday' : 1, 'Tuesday' : 2, 'Wednesday' : 3, 'Thursday' : 4, 'Friday' : 5, 'Saturday' : 6, 'Sunday' : 7}\ndata['DAY_OF_WEEK'] = data['DAY_OF_WEEK'].map(days)","14f3c015":"data['DAY_X'] = np.sin((data['DAY_OF_WEEK'])*(2.*np.pi\/30))\ndata['DAY_Y'] = np.cos((data['DAY_OF_WEEK'])*(2.*np.pi\/30))","669c7135":"data['MONTH_X'] = np.sin((data['MONTH'])*(2.*np.pi\/12))\ndata['MONTH_Y'] = np.cos((data['MONTH'])*(2.*np.pi\/12))","8814d50c":"data['HOUR_X'] = np.sin((data['HOUR'])*(2.*np.pi\/24))\ndata['HOUR_y'] = np.cos((data['HOUR'])*(2.*np.pi\/24))\n","33f3d097":"plt.scatter(data['HOUR'], data['HOUR'], marker='.');","507015e9":"plt.scatter(data['HOUR_y'], data['HOUR_X'], marker='.')\nplt.axes().set_aspect('equal')","77fbb234":"data.columns","91d8f305":"#Reorganizando ordem das colunas\ncols = ['INCIDENT_NUMBER', 'DISTRICT', 'REPORTING_AREA', 'SHOOTING',\n       'OCCURRED_ON_DATE', 'YEAR', 'MONTH', 'DAY_OF_WEEK', 'HOUR',  'DAY_X', 'DAY_Y', 'MONTH_X',\n       'MONTH_Y', 'HOUR_X', 'HOUR_y','STREET', 'Lat', 'Long', 'Location', 'OFFENSE_CODE', 'OFFENSE_CODE_GROUP',\n       'OFFENSE_DESCRIPTION','UCR_PART']\ndata = data.reindex(columns=cols)","e3a8bab0":"#apagando por ser uma coluna quase toda nula\ndata.drop(['SHOOTING'], axis=1,inplace=True)\n#apagando por primeiro teste, de n\u00e3o necessitar da coluna STREET e LOCATION\n#data.drop(columns='STREET', inplace=True)\n#data.drop(columns='Location', inplace=True)\n#apagando coluna DAY_OF_WEEK, HOUR, MONTH, pois foi criado colunas ciclicas \ndata.drop(columns='DAY_OF_WEEK', inplace=True)\ndata.drop(columns='HOUR', inplace=True)\ndata.drop(columns='MONTH', inplace=True)\ndata.drop(columns='OCCURRED_ON_DATE', inplace=True)\n#apagando coluna INCIDENT_NUMBER por se tratar de um id e n\u00e3o influenciar\ndata.drop(columns='INCIDENT_NUMBER', inplace=True)","5efd7644":"data['OFFENSE_CODE_GROUP'].unique().tolist()","84842165":"data['OFFENSE_DESCRIPTION'].unique().tolist()","8377084e":"print(len(data['OFFENSE_DESCRIPTION'].unique().tolist()), len(data['OFFENSE_CODE'].unique().tolist()))\n","bf144407":"# Class 1 {Roubos, assaltos, armas, urgencias}\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Aggravated Assault')] = 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'HOME INVASION')] = 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Ballistics')] = 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Robbery')] = 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Larceny From Motor Vehicle')]= 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Larceny')]= 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Auto Theft')]= 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Residential Burglary')]= 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Fire Related Reports')] = 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Firearm Violations')] = 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Homicide')] = 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Other Burglary')] = 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Commercial Burglary')] = 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Firearm Discovery')] = 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Bomb Hoax')] = 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Explosives')] = 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Biological Threat')] = 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Manslaughter')] = 1\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Burglary - No Property Taken')] = 1\n\n\n\n# Class 2 {Vandalismo, Dire\u00e7\u00e3o perigosa, Viola\u00e7\u00f5es}\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Disorderly Conduct')] = 2\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Motor Vehicle Accident Response')] = 2\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Vandalism')] = 2\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Violations')] = 2\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Property Related Damage')] = 2\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Restraining Order Violations')] = 2\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Arson')] = 2\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'License Violation')] = 2\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Assembly or Gathering Violations')] = 2\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Criminal Harassment')] = 2\n\n\n\n\n# Class 3 {Discuss\u00f5es, Agress\u00f5es simples, Causa pequenas}\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] ==  'Verbal Disputes')] = 3\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Simple Assault')] = 3\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Drug Violation')] = 3\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Liquor Violation')] = 3\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Harassment')] = 3\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Landlord\/Tenant Disputes')] = 3\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Prisoner Related Incidents')] = 3\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Offenses Against Child \/ Family')] = 3\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Prostitution')] = 3\n\n\n\n\n\n# Class 4 {Investiga\u00e7\u00e3o, apreens\u00e3o..}\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] ==  'Investigate Person')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Fraud')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Investigate Property')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Confidence Games')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Missing Person Reported')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Embezzlement')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Missing Person Located')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Property Lost')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Recovered Stolen Property')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Auto Theft Recovery')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Property Found')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Warrant Arrests')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Gambling')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Counterfeiting')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Search Warrants')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'INVESTIGATE PERSON')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'HUMAN TRAFFICKING')] = 4\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'HUMAN TRAFFICKING - INVOLUNTARY SERVITUDE')] = 4\n\n\n\n\n\n# Class 5 {Outros}\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] ==  'Medical Assistance')] = 5\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Other')] = 5\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Towed')] = 5\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Aircraft')] = 5\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'License Plate Related Incidents')] = 5\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Operating Under the Influence')] = 5\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Police Service Incidents')] = 5\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Phone Call Complaints')] = 5\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Harbor Related Incidents')] = 5\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Evading Fare')] = 5\ndata['OFFENSE_CODE_GROUP'].loc[(data['OFFENSE_CODE_GROUP'] == 'Service')] = 5\n\n\n\n","a8b3acba":"encoder = LabelEncoder()\ndata['OFFENSE_DESCRIPTION'] = encoder.fit_transform(data['OFFENSE_DESCRIPTION'])\ndata['DISTRICT'] = encoder.fit_transform(data['DISTRICT'].astype(str))\ndata['REPORTING_AREA'] = encoder.fit_transform(data['REPORTING_AREA'].astype(str))\ndata['STREET'] = encoder.fit_transform(data['STREET'].astype(str))\ndata['Location'] = encoder.fit_transform(data['Location'])","b930d6fc":"data.info()","ec6ac78b":"data.columns","79ab14b2":"data.shape","8c1eefb6":"data['UCR_PART'].unique().tolist()","4102aa6f":"mp = {'Part One' : 1, 'Part Two' : 2, 'Part Three' : 3, 'Other' : 4}\ndata['UCR_PART'] = data['UCR_PART'].map(mp)","0422ed9a":"data.info()","39b23ba6":"data.isnull().sum()","48130d36":"data.dropna(inplace=True)","3037dace":"data.info()","ace5187f":"df = pd.read_csv('..\/input\/crime.csv', encoding='ISO-8859-1')\nplt.figure(figsize=(20,10))\ndf['OFFENSE_CODE_GROUP'].value_counts().plot.bar()\nplt.show()","0691fdc7":"plt.figure(figsize=(20,10))\ndf['UCR_PART'].value_counts().plot.bar()\nplt.show()","e8eed303":"plt.figure(figsize=(20,10))\ndf['YEAR'].value_counts().plot.bar()\nplt.show()","e720b3a0":"plt.figure(figsize=(20,10))\ndf['DAY_OF_WEEK'].value_counts().plot.bar()\nplt.show()","60ec2613":"plt.figure(figsize=(20,10))\ndf['HOUR'].value_counts().plot.bar()\nplt.show()","9df5a7bb":"plt.figure(figsize=(20,10))\ndf['DISTRICT'].value_counts().plot.bar()\nplt.show()","f4178541":"corr = data.corr(method ='pearson')\ncorr.style.background_gradient(cmap='RdYlGn', ).set_precision(2)","241913aa":"data.info()","3fb2206d":"std = StandardScaler()\nX = data.iloc[:, 0:13].values\ny = data['OFFENSE_CODE_GROUP'].values\nX = std.fit_transform(X)","ffd2b4d1":"X_train, X_test, Y_train, Y_test = train_test_split(X, y, random_state=42, test_size=0.20, stratify=y)","9083e0c0":"X_train.shape, X_test.shape, Y_train.shape, Y_test.shape","76e23ad3":"model_knn = KNeighborsClassifier(n_neighbors=5)\nmodel_knn.fit(X_train, Y_train)\npredict_knn = model_knn.predict(X_test)\nmodel_knn.score(X_train, Y_train)\n","5f11d8ea":"print('KNN - ',accuracy_score(predict_knn, Y_test))","8771d967":"model_random = RandomForestClassifier(criterion='gini',n_estimators=20,max_depth=15)\nmodel_random.fit(X_train, Y_train)\npredict_random = model_random.predict(X_test)\nmodel_random.score(X_train, Y_train)","82419e34":"print('Random Forest - ', accuracy_score(predict_random, Y_test))","76b7b861":"model_decision = DecisionTreeClassifier(criterion='gini', max_depth=10, random_state=42)\nmodel_decision.fit(X_train, Y_train)\npredict_decision = model_decision.predict(X_test)\nmodel_decision.score(X_train, Y_train)","85d639a1":"print('Decision Tree - ',accuracy_score(predict_decision, Y_test))","ef18ab7b":"std = StandardScaler()\nX1 = data.iloc[:, 0:13].values\ny1 = data['UCR_PART'].values\nX1 = std.fit_transform(X1)","1605cb9b":"X_train1, X_test1, Y_train1, Y_test1 = train_test_split(X1, y1, random_state=42, test_size=0.20, stratify=y1)","a452f427":"wcss = []\nfor i in range(1,15):\n    model = KMeans(n_clusters=i, random_state=0)\n    model.fit(X_train1)\n    wcss.append(model.inertia_)\nplt.plot(range(1,15), wcss)\nplt.xlabel('numero de cluster')\nplt.ylabel('wcss')","43482e25":"model_knn = KNeighborsClassifier(n_neighbors=5)\nmodel_knn.fit(X_train1, Y_train1)\npredict_knn1 = model_knn.predict(X_test1)\nmodel_knn.score(X_train1, Y_train1)","315048dc":"print('KNN - ',accuracy_score(predict_knn1, Y_test1))","16753489":"y=[]\nx=[]\nfor i in range (1,18):\n    rdc = RandomForestClassifier(max_depth=i)\n    rdc = rdc.fit(X_train1, Y_train1)\n    y_pred = rdc.predict(X_test1)\n    scores = accuracy_score(y_pred, Y_test1)\n    y.append(np.array(scores).mean())\n    x.append(i)    \nplt.plot(x, y)\nplt.show()\nprint('',y)","5b722344":"y=[]\nx=[]\nfor i in range (1,40):\n    rdc = RandomForestClassifier(n_estimators=i)\n    rdc = rdc.fit(X_train1, Y_train1)\n    y_pred = rdc.predict(X_test1)\n    scores = accuracy_score(y_pred, Y_test1)\n    y.append(np.array(scores).mean())\n    x.append(i)    \nplt.plot(x, y)\nplt.show()\nprint('',y)","25acc665":"model_random = RandomForestClassifier(criterion='gini',n_estimators=40,max_depth=15)\nmodel_random.fit(X_train1, Y_train1)\npredict_random1 = model_random.predict(X_test1)\nmodel_random.score(X_train1, Y_train1)","8ba7c28a":"print('Random Forest - ', accuracy_score(predict_random1, Y_test1))","8ec70bbd":"feature_importances = pd.DataFrame(model_random.feature_importances_,index = ['DISTRICT', 'REPORTING_AREA',\n        'YEAR', 'DAY_X', 'DAY_Y', 'MONTH_X','MONTH_Y', 'HOUR_X', 'HOUR_y','STREET', 'Lat', 'Long', 'Location'],\n        columns=['importance']).sort_values('importance',  ascending=False)\nfeature_importances","969120a9":"y=[]\nx=[]\nfor i in range (1,16):\n    clf = DecisionTreeClassifier(max_depth=i)\n    clf = clf.fit(X_train1, Y_train1)\n    y_pred = clf.predict(X_test1)\n    scores = accuracy_score(y_pred, Y_test1)\n    y.append(np.array(scores).mean())\n    x.append(i)    \nplt.plot(x, y)\nplt.show()\nprint('',y)","0bf26600":"model_decision = DecisionTreeClassifier(criterion='gini', max_depth=10, random_state=42)\nmodel_decision.fit(X_train1, Y_train1)\npredict_decision1 = model_decision.predict(X_test1)\nmodel_decision.score(X_train1, Y_train1)","0a830838":"print('Decision Tree - ',accuracy_score(predict_decision1, Y_test1))","e3116e2b":"### Decision Tree","04f0ed15":"### Random Forest","fc2717d3":"### KNN","65f0ec4a":"### Y = OFFENSE_CODE_GROUP","75b514b5":"## Y = UCR_PART"}}