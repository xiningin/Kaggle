{"cell_type":{"d9c68c5f":"code","21b54ddd":"code","752b9882":"code","8ca5ee6d":"code","ef3a1894":"code","dc3ff7ff":"code","15dd6cf9":"code","a652ce1c":"code","15d0fac7":"code","63231c1e":"code","0171dd58":"code","9a47f057":"code","07bf4fd2":"code","c7b21083":"code","b5ca0215":"code","494658db":"code","e2db68c8":"code","bb3a7793":"code","8cde47ad":"code","bfd0067e":"code","61cf2ac2":"code","2610acc5":"code","03099c8e":"code","78eaf485":"code","a571ae9a":"code","e37955d9":"code","e7aac0ae":"markdown","836069ee":"markdown","eb5f72d3":"markdown","a4b1d7be":"markdown","4d6db7a2":"markdown"},"source":{"d9c68c5f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","21b54ddd":"df = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')","752b9882":"df.head()","8ca5ee6d":"df.describe()","ef3a1894":"df.info()","dc3ff7ff":"df.shape","15dd6cf9":"df_label = df['claim']","a652ce1c":"df_label","15d0fac7":"df = df.drop(columns=['id', 'claim'], axis=1)","63231c1e":"df.isnull().sum()","0171dd58":"df_mean = df.mean()","9a47f057":"df = df.fillna(df_mean)","07bf4fd2":"df.isnull().sum()","c7b21083":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler","b5ca0215":"df.head()","494658db":"train_df, valid_df, train_label, valid_label = train_test_split(df, df_label, test_size = 0.2)","e2db68c8":"print(train_df.shape)\nprint(train_label.shape)\nprint(valid_df.shape)\nprint(valid_label.shape)","bb3a7793":"scaler = MinMaxScaler()\nscaler.fit(train_df)","8cde47ad":"train_df = scaler.transform(train_df)\ntest_df = scaler.transform(valid_df)","bfd0067e":"valid_df[valid_df < 0] = 0\nvalid_df[valid_df > 1] = 1","61cf2ac2":"import lightgbm as lgb","2610acc5":"params = {'objective':'binary',\n          'num_leaves': 100,\n          'n_estimators': 700,\n          'max_depth': 6,\n          'min_child_samples': 371,\n          'learning_rate': 0.10,\n          'min_data_in_leaf': 500,\n          'bagging_fraction': 0.8057106694835638,\n          'feature_fraction': 0.5688885590495344,\n         }\nmodel = lgb.LGBMClassifier(**params)\n\nlgtrain = lgb.Dataset(train_df, label=train_label)\nlgval = lgb.Dataset(test_df, label=valid_label)","03099c8e":"model = lgb.train(params, \n                  train_set = lgtrain,  \n                  valid_sets=[lgtrain, lgval], \n                  verbose_eval=100,\n                 )","78eaf485":"test_df = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')\nsubmission_df = test_df['id'].to_frame()\ntest_df_np = test_df.drop(columns=['id'], axis=0).fillna(df_mean)\n\ntest_df_np = scaler.transform(test_df_np)\ntest_df_np[test_df_np < 0] = 0\ntest_df_np[test_df_np > 1] = 1","a571ae9a":"submission_df['claim'] = model.predict(test_df_np)\nsubmission_df.to_csv(\"submission.csv\", index=False)\n\nsubmission_df","e37955d9":"submission_df.to_csv(\"submission.csv\", index=False)","e7aac0ae":"## **I have written this notebook out of my willingness to learn LGBM. @brendanartley's [notebook](https:\/\/www.kaggle.com\/brendanartley\/sep-21-tab-series-lgbm-optuna) helped me a lot in learning about LGBM and writing this notebook. All credits to him.**","836069ee":"## **Read the data**","eb5f72d3":"## **Check for null values**","a4b1d7be":"## **Training the model**","4d6db7a2":"## Scaling values"}}