{"cell_type":{"11e0bea6":"code","c5d911b5":"code","20d06efd":"code","e14f9f36":"code","7bd70d4a":"code","ce233e96":"code","ca54232f":"code","3b4bf935":"code","ca9d14df":"code","b5c4162a":"markdown","9171d522":"markdown","62a66a78":"markdown","da6d00a1":"markdown","0ddc2fe7":"markdown","aaaf4909":"markdown","6af2de13":"markdown"},"source":{"11e0bea6":"from matplotlib.ticker import MultipleLocator, FormatStrFormatter\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport os","c5d911b5":"data_dir = os.path.join(\"..\", \"input\")","20d06efd":"train_transaction = pd.read_csv(os.path.join(data_dir, \"train_transaction.csv\"), index_col=0)\ntrain_identity = pd.read_csv(os.path.join(data_dir, \"train_identity.csv\"), index_col=0)","e14f9f36":"test_transaction = pd.read_csv(os.path.join(data_dir, \"test_transaction.csv\"), index_col=0)\ntest_identity = pd.read_csv(os.path.join(data_dir, \"test_identity.csv\"), index_col=0)","7bd70d4a":"train = train_transaction.join(train_identity)\ntest = test_transaction.join(test_identity)","ce233e96":"sample = pd.read_csv(os.path.join(data_dir, \"sample_submission.csv\"))","ca54232f":"cols = [\"ProductCD\", \"P_emaildomain\", \"R_emaildomain\", \"DeviceType\", \"DeviceInfo\"]\ncols.extend([col for col in train.columns if col.startswith((\"card\", \"addr\", \"M\", \"id\"))])\ntrain[cols] = train[cols].astype(\"str\")\ntest[cols] = test[cols].astype(\"str\")","3b4bf935":"def plot_fts(fts, n_cols=3, m_cat=10):\n    n_fts = len(fts)\n    n_rows = -(-n_fts \/\/ n_cols) # ceiling division\n    to_del = (n_cols - (n_fts % n_cols)) % n_cols\n    fig, axes = plt.subplots(n_rows, n_cols, figsize=(14, 3 * n_rows))\n    plt.subplots_adjust(wspace=0.3, hspace=0.45)\n    axes = (axes if type(axes) is np.ndarray else np.array(axes)).ravel()\n    strp = lambda l: f\"{float(l):g}\" if l.replace(\".\", \"\").isdigit() else l[:7]\n    np_col = train.select_dtypes(np.number).columns\n    for i, ft in enumerate(fts):\n        ax1 = axes[i]\n        ax2 = ax1.twinx()\n        if ft in np_col:\n            cut, bins = pd.cut(train[ft], 10, retbins=True, right=False)\n            ax1.hist(train[ft], bins, color=\"#A8DBA8\", edgecolor=\"k\", log=True, zorder=2)\n            ax1.tick_params(\"x\", pad=2)\n            ax1.grid(zorder=0)\n            ctrs = (bins[:-1] + bins[1:]) \/ 2 \n            vals = train.groupby(cut)[\"isFraud\"].mean()\n            ax2.plot(ctrs, vals, marker=\"o\", c=\"#0B486B\", lw=2)\n        else:\n            cts = train[ft].value_counts().nlargest(m_cat)\n            ax1.bar(cts.index, cts.values, width=1, color=\"#a6cee3\", edgecolor=\"k\", log=True, zorder=2)\n            ax1.tick_params(\"x\", labelrotation=45, pad=0)\n            ax1.grid(zorder=0)\n            vals = train.groupby(ft)[\"isFraud\"].mean().loc[cts.index]\n            ax2.plot(vals, marker=\"o\", c=\"#0B486B\", lw=2)\n            ax2.set_xticklabels(list(map(strp, cts.index)))\n        ax1.minorticks_off()\n        ax2.minorticks_off()\n        ax1.set_ylim(1, 10**6)\n        ax1.set_title(ft, loc=\"right\")\n        ax2.yaxis.set_major_formatter(FormatStrFormatter(\"%.2f\"))\n    for i in range(to_del, 0, -1):\n        fig.delaxes(axes[-i])\n    plt.show()","ca9d14df":"plot_fts(train.drop(\"isFraud\", axis=1).columns)","b5c4162a":"## Read data","9171d522":"**If you find this kernel useful, I'd be very grateful if you upvoted it!**","62a66a78":"## Exploratory data analysis","da6d00a1":"## Categorize features","0ddc2fe7":"Below are histograms for each numerical feature and bar charts for each categorical one. In each plot, the dark blue line represents the proportion of fraudulent transactions in the bin\/ category. ","aaaf4909":"## Import packages","6af2de13":"# IEEE fraud: exploratory data analysis"}}