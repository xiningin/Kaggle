{"cell_type":{"e018b76a":"code","5c2541a8":"code","0352ed41":"code","cb8293b3":"code","b4f40d30":"code","112e0a69":"code","0977e80a":"code","ee185576":"code","daebb13a":"code","d00bdf03":"code","c8b8c90b":"code","1bad6b79":"code","8cda31e9":"code","f975f243":"code","effc33c1":"code","f53684ce":"code","08e00633":"code","c94b1e60":"code","299366f6":"code","1e03e6f9":"code","cba233b5":"code","a0a3c71a":"code","3d2f6f2e":"code","36654c1d":"markdown","3e128afc":"markdown","8fa88115":"markdown","eac9c435":"markdown","1a473ee7":"markdown","e79ddf7f":"markdown","459bbf99":"markdown","c4c44af3":"markdown","6eb94c21":"markdown","e4eec682":"markdown","21aa07bd":"markdown","954a3932":"markdown","6a14cb89":"markdown","6ed8a999":"markdown","59102067":"markdown","9685d4e9":"markdown","1e348803":"markdown"},"source":{"e018b76a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5c2541a8":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nsns.set_style(style='darkgrid')\n\n%matplotlib inline","0352ed41":"from sklearn.metrics import classification_report\n\ndef eval1(predic,ytest):\n  print(\"-----------------------------------------------------------------\")\n  print(\" hear_attack classification report : \\n \"+ classification_report(predic,ytest))\n  print(\"-----------------------------------------------------------------\")","cb8293b3":"def lrmod(x_train,y_train,x_test):\n  lr1=LogisticRegression()\n  lr1.fit(x_train,y_train)\n  pred=lr1.predict(x_test)\n  return (pred,lr1)","b4f40d30":"def svmod(x_train,y_train,x_test,p_grid):\n  svg=GridSearchCV(SVC(),param_grid=p_grid,verbose=3,n_jobs=-1,refit=True)\n  svg.fit(x_train,y_train)\n  pred=svg.predict(x_test)\n  return (pred,svg)","112e0a69":"def transformer1(x_train,x_test):\n  m1=MinMaxScaler()\n  x_train=m1.fit_transform(x_train)\n  x_test=m1.transform(x_test)\n  return x_train,x_test","0977e80a":"def transformer2(x_train,x_test):\n  m1=StandardScaler()\n  x_train=m1.fit_transform(x_train)\n  x_test=m1.transform(x_test)\n  return x_train,x_test","ee185576":"data=pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')","daebb13a":"data","d00bdf03":"data.info()","c8b8c90b":"data.describe(include='all')","1bad6b79":"data.isna().any()","8cda31e9":"plt.figure(figsize=(10,10))\nsns.heatmap(data.isna().transpose(),cmap='viridis',xticklabels=False,cbar=False)","f975f243":"cpdum=pd.get_dummies(data['cp'],drop_first=True)","effc33c1":"data=pd.concat([data,cpdum],axis=1)","f53684ce":"data.drop(['cp'],axis=1,inplace=True)","08e00633":"y=data['output'].values\nX=data.drop(['output'],axis=1).values","c94b1e60":"x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=42)","299366f6":"x_train,x_test=transformer1(x_train,x_test)","1e03e6f9":"pred1,lrob=lrmod(x_train,y_train,x_test)","cba233b5":"C=[0.5,1,10,50,100,500,1000]\nGa=np.linspace(0.001,1.001,num=30)\nkernel=['rbf','linear']\np=dict(C=C,gamma=Ga,kernel=kernel)\npred3,svob=svmod(x_train,y_train,x_test,p)","a0a3c71a":"eval1(pred1,y_test)","3d2f6f2e":"eval1(pred3,y_test)\n\nsvob.best_params_","36654c1d":"# GETTING DATA","3e128afc":"# PRE-MADE FUNCTIONS","8fa88115":"## LOGISTIC REGRESSION\n","eac9c435":"# MODEL RUN","1a473ee7":"# NULL CHECK","e79ddf7f":"# IMPORT LIBRARY","459bbf99":"# DATA PREPROCESS","c4c44af3":"# X,Y,SPLITTING","6eb94c21":"## DATA SCALERS","e4eec682":"## SVC","21aa07bd":"## SVC (GRID SEARCH)","954a3932":"## MODEL FUNCTIONS","6a14cb89":"## EVALUATORS","6ed8a999":"# DATA SCALING","59102067":"# DATA DESCRIPTION","9685d4e9":"## LOGISTIC REGRESSION","1e348803":"# EVALUATIONS"}}