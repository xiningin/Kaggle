{"cell_type":{"546f5dc8":"code","4820432f":"code","e9d1d683":"code","cb32281f":"code","61d6e2be":"code","e8658876":"code","235df941":"code","d1f82b1b":"code","5670b618":"code","ec577b36":"code","c5353484":"code","33001aca":"code","16628a37":"code","c1447cbf":"code","a6157d85":"code","2eea0d58":"code","ae27fbea":"code","719e7f42":"code","0de1677d":"code","854e2e8c":"code","d151203a":"code","9a2b0b2c":"code","80ccf2df":"code","c2b7563a":"code","dfd5db97":"code","32338aa6":"code","8d92c8bb":"code","35948540":"code","fd58172b":"code","0d0d7983":"code","533f1246":"code","c91230d1":"code","1d9c3d43":"code","902d4c82":"code","ecb0e60a":"code","92bbf235":"code","ae8a70db":"code","dfe74f0f":"code","46545d56":"code","88dd876b":"code","4b8b0176":"code","73d749d7":"code","639061d2":"code","0920f1bf":"code","fdd0fa4d":"code","1de06b6a":"code","88ecef2a":"code","b250216f":"code","137b0f31":"code","d5b19687":"code","8d5b75ae":"code","cc42191b":"code","c7465b50":"code","1da1f59a":"code","dee4d900":"code","25db7887":"code","386293e6":"code","401369e4":"code","ef5d419a":"markdown","c816bf62":"markdown","f6f42c2e":"markdown","c756ba61":"markdown","1f8e5af5":"markdown","d6bae6f1":"markdown","11412c2b":"markdown","7123dd01":"markdown","b05abca9":"markdown","affc2f42":"markdown","6aa10605":"markdown","2f52b6e0":"markdown","b9a0a57c":"markdown","09d500e4":"markdown","cbe8a420":"markdown","0445428d":"markdown","3b33e3a1":"markdown","993e58b3":"markdown","1f7a2e13":"markdown","24639dc1":"markdown","9992880f":"markdown","63623c29":"markdown","71dba3cb":"markdown","3a4865e9":"markdown","40de5274":"markdown","ab93cbab":"markdown","aea7a3fe":"markdown","5af674a7":"markdown","84ba4420":"markdown","4aa9e815":"markdown","fd734a09":"markdown","1c090ccb":"markdown","eff2befd":"markdown"},"source":{"546f5dc8":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\npd.options.mode.chained_assignment = None \n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","4820432f":"train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\", index_col=\"PassengerId\")\ntest_data = pd.read_csv(\"..\/input\/titanic\/test.csv\", index_col=\"PassengerId\")","e9d1d683":"print(train_data.info())\nprint(train_data.isna().sum())","cb32281f":"print(test_data.info())\nprint(test_data.isna().sum())","61d6e2be":"print(train_data[\"Pclass\"].unique())\ntrain_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","e8658876":"print(train_data[\"Name\"])","235df941":"train_data.Name[1].split()","d1f82b1b":"train_data = train_data.assign(fname = train_data.Name.str.split(\",\").str[0])\ntrain_data[\"title\"] = pd.Series([i.split(\",\")[1].split(\".\")[0].strip() for i in train_data.Name], index=train_data.index)","5670b618":"test_data = test_data.assign(fname = test_data.Name.str.split(\",\").str[0])\ntest_data[\"title\"] = pd.Series([i.split(\",\")[1].split(\".\")[0].strip() for i in test_data.Name], index=test_data.index)\ntrain_data.drop(\"Name\", axis=1, inplace=True)\ntest_data.drop(\"Name\", axis=1, inplace=True)","ec577b36":"print(test_data.fname.nunique())\nprint(test_data.title.nunique())","c5353484":"ts = sns.countplot(x=\"title\",data=train_data)\nts = plt.setp(ts.get_xticklabels(), rotation=90)\nprint(train_data[\"title\"].unique())\nprint(test_data[\"title\"].unique())\nother_titles = [title\n                for title in train_data[\"title\"]\n                if title not in [\"Mr\", \"Miss\", \"Mme\", \"Mlle\", \"Mrs\", \"Ms\"]]\nother_titles.append(\"Dona\")","33001aca":"train_data[\"title\"] = train_data['title'].replace(other_titles, 'Other')\ntrain_data[\"title\"] = train_data[\"title\"].map({\"Mr\":0, \"Miss\":1, \"Ms\" : 1 , \"Mme\":1, \"Mlle\":1, \"Mrs\":1, \"Master\":2, \"Other\":3})\ntest_data[\"title\"] = test_data['title'].replace(other_titles, 'Other')\ntest_data[\"title\"] = test_data[\"title\"].map({\"Mr\":0, \"Miss\":1, \"Ms\" : 1 , \"Mme\":1, \"Mlle\":1, \"Mrs\":1, \"Master\":2, \"Other\":3})","16628a37":"print(train_data.title)\nprint(test_data.title.isna().sum()) # No NaNs left","c1447cbf":"from sklearn.preprocessing import OneHotEncoder\noh = OneHotEncoder(handle_unknown=\"ignore\", sparse = False)\n\ntrain_data = train_data.join(pd.DataFrame(oh.fit_transform(train_data[[\"fname\", \"title\"]]), index = train_data.index))\ntest_data = test_data.join(pd.DataFrame(oh.transform(test_data[[\"fname\", \"title\"]]), index = test_data.index))\ntrain_data.drop(\"fname\", axis = 1, inplace = True)\ntest_data.drop(\"fname\", axis = 1, inplace = True)","a6157d85":"print(train_data[\"Sex\"].unique())\ntrain_data[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","2eea0d58":"interactions = train_data.assign(sex_class = train_data['Sex'] + \"_\" + train_data['Pclass'].astype(\"str\"))\ninteractions[['sex_class', 'Survived']].groupby(['sex_class'], as_index=False).mean().sort_values(by='Survived', ascending=False)","ae27fbea":"train_data = train_data.assign(sex_class = train_data['Sex'] + \"_\" + train_data['Pclass'].astype(\"str\"))\ntest_data = test_data.assign(sex_class = test_data['Sex'] + \"_\" + test_data['Pclass'].astype(\"str\"))","719e7f42":"train_data = train_data.join(pd.get_dummies(train_data['Pclass'], prefix=\"Pclass\"))\ntest_data = test_data.join(pd.get_dummies(test_data['Pclass'], prefix=\"Pclass\"))","0de1677d":"train_data[\"Sex\"] = train_data[\"Sex\"].map({\"female\":0, \"male\":1})\ntest_data[\"Sex\"] = test_data[\"Sex\"].map({\"female\":0, \"male\":1})","854e2e8c":"train_data[\"sex_class\"] = train_data[\"sex_class\"].map({\"female_1\":0, \"female_2\":1, \"female_3\":2, \"male_1\":4, \"male_2\":5, \"male_3\":6})\ntest_data[\"sex_class\"] = test_data[\"sex_class\"].map({\"female_1\":0, \"female_2\":1, \"female_3\":2, \"male_1\":4, \"male_2\":5, \"male_3\":6})","d151203a":"g = sns.FacetGrid(train_data, col='Survived')\ng = g.map(sns.distplot, \"Age\")","9a2b0b2c":"def find_similar_passengers(id, dataset):\n    subset = dataset[(dataset.title == dataset.title[id]) &\n                    (dataset.Pclass == dataset.Pclass[id])]\n\n    if subset[\"Age\"].mean() == \"NaN\":\n        subset = dataset[(dataset[\"sex_class\"] == dataset.iloc[id][\"sex_class\"])]\n\n    if subset[\"Age\"].mean() == \"NaN\":\n        subset = dataset[(dataset[\"sex\"] == dataset.iloc[id][\"sex\"])]\n\n    age = subset[\"Age\"].mean()\n    return age","80ccf2df":"no_ages = train_data[train_data[\"Age\"].isna()].index\nfor pid in no_ages:\n    train_data.Age[pid] = find_similar_passengers(pid, train_data)\n\nno_ages_test = test_data[test_data[\"Age\"].isna()].index\nfor pid2 in no_ages_test:\n    test_data.Age[pid2] = find_similar_passengers(pid2, test_data)","c2b7563a":"train_data[\"age_group\"] =  pd.cut(train_data[\"Age\"], bins=[0,5,65,100], labels=[0,1,2]).astype(\"int64\")\ntest_data[\"age_group\"] = pd.cut(test_data[\"Age\"], bins=[0,5,65,100], labels=[0,1,2]).astype(\"int64\")","dfd5db97":"train_data[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","32338aa6":"train_data[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","8d92c8bb":"train_data[\"fsize\"] = train_data[\"SibSp\"] + train_data[\"Parch\"] + 1\ntest_data[\"fsize\"] = test_data[\"SibSp\"] + test_data[\"Parch\"] + 1","35948540":"train_data[['fsize', 'Survived']].groupby(['fsize'], as_index=False).mean().sort_values(by='Survived', ascending=False)","fd58172b":"print(train_data.Ticket.nunique())\nprint(train_data.Ticket.tail())","0d0d7983":"train_data[\"ticket_prefix\"] = pd.Series([len(i.split()) > 1 for i in train_data.Ticket], index=train_data.index)","533f1246":"train_data[['ticket_prefix', 'Survived']].groupby(['ticket_prefix'], as_index=False).mean().sort_values(by='Survived', ascending=False)\n","c91230d1":"train_data.drop(\"ticket_prefix\", axis=1, inplace=True)\ntrain_data.drop(\"Ticket\", axis=1, inplace=True)\ntest_data.drop(\"Ticket\", axis=1, inplace=True)","1d9c3d43":"g = sns.FacetGrid(train_data, col='Survived')\ng = g.map(sns.distplot, \"Fare\")","902d4c82":"import numpy as np\ntrain_data[\"Fare\"] = train_data[\"Fare\"].map(lambda i: np.log(i) if i > 0 else 0)\ntest_data[\"Fare\"] = test_data[\"Fare\"].map(lambda i: np.log(i) if i > 0 else 0)\n\ng = sns.FacetGrid(train_data, col='Survived')\ng = g.map(sns.distplot, \"Fare\")","ecb0e60a":"train_data.drop(\"Cabin\", axis=1, inplace=True)\ntest_data.drop(\"Cabin\", axis=1, inplace=True)","92bbf235":"train_data[\"Embarked\"] = train_data[\"Embarked\"].fillna(\"S\")\ntrain_data[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","ae8a70db":"train_data[\"Embarked\"] = train_data[\"Embarked\"].fillna(\"S\")\nprint(train_data.Embarked.isna().sum())","dfe74f0f":"train_data = train_data.join(pd.get_dummies(train_data['Embarked'], prefix=\"Embarked_\"))\ntest_data = test_data.join(pd.get_dummies(test_data['Embarked'], prefix=\"Embarked_\"))\n#train_data[\"Embarked\"] = train_data[\"Embarked\"].map({\"S\":0, \"Q\":1, \"C\":2})\n#test_data[\"Embarked\"] = test_data[\"Embarked\"].map({\"S\":0, \"Q\":1, \"C\":2})","46545d56":"train_data.drop(\"Embarked\", axis=1, inplace=True)\ntest_data.drop(\"Embarked\", axis=1, inplace=True)","88dd876b":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\n\ntrain_y = train_data[\"Survived\"]\ntrain_data.drop(\"Survived\", axis=1, inplace=True)\n\nscoring_method = \"f1\"\n\ntrain_scaled = ss.fit_transform(train_data)\ntest_scaled = ss.transform(test_data)","4b8b0176":"print(train_data.isna().sum())\nprint(test_data.isna().sum())","73d749d7":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nimport numpy as np\nmodel = LogisticRegression(random_state=10, max_iter = 1000)\nlogit_params = {\n    \"C\": [1, 3, 10, 20, 30, 40],\n    \"solver\": [\"lbfgs\", \"liblinear\"]\n    \n}\nlogit_gs = GridSearchCV(model, logit_params, scoring=\"f1\", cv = 5, n_jobs=4)","639061d2":"logit_gs.fit(train_data, train_y)","0920f1bf":"print(logit_gs.best_params_)\nprint(logit_gs.best_score_)","fdd0fa4d":"from sklearn.ensemble import RandomForestClassifier\nrf_model = RandomForestClassifier()\n\nrf_params ={\n    'bootstrap': [True, False],\n    'max_depth': [10, None],\n    'max_features': ['auto', 'sqrt'],\n    'min_samples_leaf': [1, 2, 4],\n    'min_samples_split': [2, 5, 10],\n    'n_estimators': [5, 10, 15, 20, 25, 30]}\n\nrf_gs = GridSearchCV(rf_model, rf_params, scoring=scoring_method, cv=8, n_jobs=4)","1de06b6a":"rf_gs.fit(train_data, train_y)","88ecef2a":"print(rf_gs.best_params_)\nprint(rf_gs.best_score_)","b250216f":"from sklearn.svm import SVC\nsvc_model = SVC()\n\ntest_parameters = {\n    \"C\": [1, 3, 10, 30, 100],\n    \"kernel\": [\"linear\", \"poly\", \"rbf\" , \"sigmoid\"],\n}\nsvc_gs = GridSearchCV(svc_model, test_parameters, scoring=\"f1\", cv=5, n_jobs=4)","137b0f31":"svc_gs.fit(train_scaled, train_y)","d5b19687":"print(svc_gs.best_params_)\nprint(svc_gs.best_score_)","8d5b75ae":"from lightgbm import LGBMClassifier\nlgb_model = LGBMClassifier()\ntest_parameters = {\n    \"n_estimators\": [int(x) for x in np.linspace(5, 30, 6)],\n    \"reg_alpha\": [0, 0.75, 1, 1.25],\n    \"learning_rate\": [0.5, 0.4, 0.35, 0.3, 0.25, 0.2],\n    \"subsample\": [0.5, 0.75, 1]\n}\nlgb_gs = GridSearchCV(lgb_model, test_parameters, scoring=scoring_method, cv=8, n_jobs=4)","cc42191b":"lgb_gs.fit(train_data, train_y)","c7465b50":"print(lgb_gs.best_params_)\nprint(lgb_gs.best_score_)","1da1f59a":"from sklearn.ensemble import VotingClassifier\n\nensemble_model = VotingClassifier(estimators=[\n    (\"logit\", logit_gs.best_estimator_),\n    (\"rf\", rf_gs.best_estimator_),\n    (\"svc\", svc_gs.best_estimator_),\n    (\"lgb\", lgb_gs.best_estimator_),\n], voting = \"hard\")","dee4d900":"ensemble_model.fit(train_data, train_y)","25db7887":"ensemble_model.score(train_data, train_y)","386293e6":"preds = ensemble_model.predict(test_data)","401369e4":"output = pd.DataFrame({'PassengerId': test_data.index,\n                       'Survived': preds})\n\noutput.to_csv('submission.csv', index=False)","ef5d419a":"### 10) Embarked:\n\nNot much to do here, theres a few missing values which we can fill in.","c816bf62":"### 3) Sex:","f6f42c2e":"Now that the missing data is filled in, we can start to reorganise the Age column to make it easier for a model to \"see\" what we want it to, namely that children have a much higher survival rate and the elderly have a much lower. I think segmenting them into groups of <5, 5-65 and >65 might be a good first pass.\n\nAfter yet MORE goolging, pandas has a .cut function to replace a range of values with new labels.","c756ba61":"It certainly seems like this interaction feature adds something...\n\nAs I'm still new to this I don't yet know if the models will pick up this interaction without me\nexplicitly adding it as a feature. If I  DO include this column, it will be pretty highly associated with\nboth sex and class so again I'm not sure if that is something that can interfere with modeling.\n\nFor now, my ignorance will let me add it to the dataset and deal with any issues that arise later on.","1f8e5af5":"## Modelling\n\nI am going to try my hand at a few different models. Starting with the very simple (linear regression\/classifier) and gradually moving up in complexity.","d6bae6f1":"While the picture isn't super clear, you can see that survivors had more expensive fares and a wider spread of fare prices.\nThere is at least one outlier with a fare of >500 so dropping it.\n\nApart from that the data is pretty skewed. Take a log transformation to reduce the skew and to decrease the massive range in fares.","11412c2b":"First, there are some missing values that need to be dealt with.\nThere are (at least) three ways we can deal with this, each one being slightly more effort.\n\n1) We can just drop the rows with missing data. While this might be tempting, dropping a row with around 14 other entries just because of one missing value doesn't sound like the brightest idea.\n\n2) We can replace the missing data with the average age (whether it's median\/mode\/mean) of the data set. This would be a good first pass method and it would let us get the models up and running.\n\n3) We can replace the missing data with the average from similar passengers. For example, if we're missing the age of a 1st class passenger, who is female, who embarked from C etc. we could substitute in the age of other passengers who fit that description.","7123dd01":"In the training set we are missing 177 ages, 2 embarked and 687 cabins.\nIn the test set we're missing 86 ages, 1 fare and 327 cabins.\n\nWith a lot of missing cabins it might make sense to drop the column but we will keep it for now.\n\n## Visualising the Data\nI want to see how each of the variables is associated with survival. Lets go in order:\n\n### 1) Pclass:","b05abca9":"### 4) Age\n\nFirst thing's first, let's look at the distribution of age and see if there is any association with survival.","affc2f42":"This looks okay. Small families (4 or less) survived better than people who were alone or in bigger families, we can throw this in the model.\n\n### 7) Ticket:\n\nLet's take a look at what values tickets take on:","6aa10605":"There are a lot of uniques so  I think it makes sense to group them.\n\n#### Titles:\nFor now we will stick to headings that representing male, female, child and other.\nI'll then encode them as numerical.\nI will use the pandas dataframe replace and map functions for this:","2f52b6e0":"While I'm at it, I'll encode it and Sex as numeric using the map method.","b9a0a57c":"## Comparing models\n\nI do eventually want to include a short bit on comparing the models. From what I've read, these different models are probably placing different levels of importance on different features\/variables. I think the key to a good ensembler\/voter is to have models that have different predictions. Of course if all the models predict the same thing, there isn't much point in having them \"vote\". In the next iteration I will add models that pick out features differently (maybe some linear models, gradient based models and a neural network). I'll see how their predictions compare and pick a few good but slightly different models to ensemble.","09d500e4":"Both stories tell a similar story, that smaller families tended to survive more than larger families.","cbe8a420":"There are three classes (1, 2 and 3) representing first, second or third class tickets on the boat.\n\nIt seems like the passenger's class has a strong association with survival, with the higher class passengers having a higher survival rate.\nIt makes sense to include this in the model, likely without much change.\n\n### 2) Name:","0445428d":"They seem to be numbers, with some having letter prefixes. There are only 681 unique ones in the training dataset\nand with no missing values, it means that some tickets have multiple people on them.\nI'll do the same trick as with the family name and titles, use string split to separate prefixes.","3b33e3a1":"### 1) Logistic Regression:\n\nFirst I will split the dataframes up into the independant variables (usually denoted as the matrix X) and the dependant variable (the vector y). I'll do one last check to make sure I have no NAs. ","993e58b3":"### Ensembling\/Voting\nNow that I have a few models, I'm going to use a voting classifier to use the three above models to make an overall prediction. I'm leaving out the logistic regression for the time being as it the model was fitted with the scaled dataset.","1f7a2e13":"We have two labels for Sex, with females having a much higher survival rate.\nIt makes sense to include Sex in the model. It is possible that we could use sex to create a new feature by combining\nit with other features. For example, what about Sex and Pclass that we looked at earlier?\n\nAcross all males and females, females have a much higher survival rate. But what if wealthy males have a higher survival\nthan poor females? It might make sense to segment this out explicity.","24639dc1":"### 5 & 6) SibSp and Parch:\n\nAs these both relate to family size it's probably best to tackle them together.\n\nSibSp: The number of siblings or spouses aboard the titanic.\n\nParch: The number of parents\/children aboard the titanic.","9992880f":"### 2) Random Forest:\n\nNext I'm going to try to implement a random forest model.","63623c29":"### 3) SVM","71dba3cb":"I think we can drop the name columns now as we won't need it.\nWe'll also need to repeat the above for the test set.\n\n\n(Edit: I originally didn't have the index=train_data.index and all of my pd.Series list comprehensions were coming up\none value short. The joys of 0 indexing vs 1 indexing!)","3a4865e9":"### 8) Fare","40de5274":"I'm still pretty new to python so I'm not sure what the cannonical way of doing this is, but using\na string split seems like the way to go.\n\nAfter fiddling around with google, I think I want to use the .assign method for a pandas dataframe.\n\nIf I split by comma, the first and second entry will give the family name and title respectively.","ab93cbab":"Now to look at what we've made:","aea7a3fe":"## First step is to load up the data and describe the columns and check for differences.","5af674a7":"Something else that just stood out to me is that I'm not quite sure about how important encoding variables is.\nI've read some places that many models need everything to be encoded as numbers.\n\nThis seems straight forward but the more I think about it, the more confused I get.\nTake Pclass for example. This is encoded numerically and I'm pretty sure it most models would\nhappily take it and not throw out any errors. But if it's left as is, it would be treated the same as\nsomething like Age. While Pclass is ordinal, and having it encoded as 1, 2 and 3 doesn't seem too outrageous,\nI have an uneasy feeling about encoding something with discrete levels the same as a continguous variable (like Age).\n\nI don't know enough about machine learning to actually justify this feeling but just in case I will encode\nanything discrete using dummy variables\/one-hot encoding.\n","84ba4420":"I'm going to use a function from the model_selection module in sklearn. This lets me supply a grid of possible values for the parameters and it will test all possible combinations, storing the best result. As I don't want this \"best result\" to be overfitted, I'm going to set the cross-validate (cv) parameter to 8, so it will do 8-fold validation. ","4aa9e815":"### 9) Cabin:\n\nFrom earlier we saw that many cabin entries were missing. We could probably do something to impute the data but for now drop it.","fd734a09":"I can think of a few things we could do with the names.\n\nFirstly, we could match up surnames to group families together.\nI could imagine that whole families either survived or died together.\n\nSecondly, we can get the titles of the names. As well as there being common ones such as\nMr and Miss, it seems like there are rare\/unique ones such as Rev (reverend). If\nsomeone is important enough to have their own title they might have been more likely to survive.","1c090ccb":"## Preamble\nI'd appreciate any feedback you have to give. I'm still not sure on which models really need data to be setup numerically with a gaussian distribution or whether it's okay to have ordinal data encoded as integers, but here's my first attempt at a notebook. Enjoy! Upvote if possible!","eff2befd":"### 4) Light Gradient Boosting:"}}