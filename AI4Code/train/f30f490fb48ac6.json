{"cell_type":{"021e4855":"code","3281fc54":"code","05962f97":"code","ca11f8f3":"code","b957b275":"code","3f5c52ee":"code","ccd7a9a4":"code","8845f4d8":"code","7e302d69":"code","5b478f8e":"markdown","aae0c6b6":"markdown","9fc82e3b":"markdown","ea1b8736":"markdown","2a9480e9":"markdown","d2b06286":"markdown","d3da8f20":"markdown","0922515c":"markdown","86ba814b":"markdown","aa1f9380":"markdown","337ef205":"markdown"},"source":{"021e4855":"import numpy as np\nimport pandas as pd\nfrom bq_helper import BigQueryHelper\n\nbq_assistant = BigQueryHelper(active_project= \"bigquery-public-data\", dataset_name= \"noaa_gsod\")","3281fc54":"QUERY = \"\"\"\n        SELECT lat, lon\n        FROM `bigquery-public-data.noaa_gsod.stations`\n        \"\"\"\nbq_assistant.estimate_query_size(QUERY)","05962f97":"df = bq_assistant.query_to_pandas_safe(QUERY)\ndf.head()\n#df.to_csv('noa_gsod_stations.csv')","ca11f8f3":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\n\nfrom mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\n\nm = Basemap(projection='cyl',lat_0=0, lon_0=-100, resolution='l', area_thresh=1000.0)\nm.drawmapboundary(fill_color='aqua')\nm.fillcontinents(color='coral',lake_color='aqua')\nparallels = np.arange(-90.,90,30.)\nm.drawparallels(parallels,labels=[False,True,True,False])\nmeridians = np.arange(0.,350.,30.)\nm.drawmeridians(meridians,labels=[True,False,False,True])\nlon = df['lon'].tolist()\nlat = df['lat'].tolist()\nxpt,ypt = m(lon,lat)\nm.plot(xpt,ypt,'b+') \nplt.gcf().set_size_inches(18.5, 10.5)\nplt.show()","b957b275":"QUERY = \"\"\"\n        SELECT stn, avg_temp, lat,lon\n        FROM(\n            SELECT stn,AVG(data.temp) AS avg_temp\n            FROM `bigquery-public-data.noaa_gsod.gsod2017` AS data\n            GROUP BY stn\n        )temp_\n        INNER JOIN `bigquery-public-data.noaa_gsod.stations`AS stations\n        ON temp_.stn = stations.usaf\n        \n        \"\"\"\nbq_assistant.estimate_query_size(QUERY)","3f5c52ee":"import time\nt0 = time.time()\ndf = bq_assistant.query_to_pandas_safe(QUERY)\nprint(time.time()-t0)\nprint(df.head())\ndf['lat'].isnull().value_counts()","ccd7a9a4":"df = df.dropna(axis=0)\ndf.to_csv('noa_gsod_temp_2017.csv')\nprint('max_temp:%f'%df['avg_temp'].max())\nprint('min_temp:%f'%df['avg_temp'].min())","8845f4d8":"df_ = df.sample(5000)\nm = Basemap(projection='cyl',lat_0=0, lon_0=-100, resolution='l', area_thresh=1000.0)\nm.drawmapboundary()\nm.drawcoastlines()\nparallels = np.arange(-90.,90,30.)\nm.drawparallels(parallels,labels=[False,True,True,False])\nmeridians = np.arange(0.,350.,30.)\nm.drawmeridians(meridians,labels=[True,False,False,True])\nlon = df_['lon'].tolist()\nlat = df_['lat'].tolist()\ndf_['avg_temp'] = df_['avg_temp'].astype(int)\ntemp = df_['avg_temp'].tolist()\nxpt,ypt = m(lon,lat)\ncm = plt.cm.get_cmap('jet')\nm.scatter(xpt, ypt, c=temp, cmap=cm, vmin = -70, vmax=100, s = 10, alpha = 0.4) \nplt.gcf().set_size_inches(18.5, 10.5)\nplt.colorbar()\nplt.show()","7e302d69":"import time\nt0 = time.time()\nyear_test_list = range(2009, 2018)\nbq_assistant.max_wait_seconds = 3600\nfor year in year_test_list:\n    query = '''\n    SELECT stn, mo, avg_temp, avg_prcp, lat, lon\n        FROM(\n            SELECT stn, mo, AVG(data.temp) AS avg_temp, AVG(data.prcp) AS avg_prcp\n            FROM `bigquery-public-data.noaa_gsod.gsod{0}` AS data\n            GROUP BY stn, mo\n        )temp_\n        INNER JOIN `bigquery-public-data.noaa_gsod.stations`AS stations\n        ON temp_.stn = stations.usaf\n    '''.format(year)\n    print(bq_assistant.estimate_query_size(query))\n    qdata = bq_assistant.query_to_pandas_safe(query)\n   # print(bq_assistant.max_wait_seconds)\n    qdata.to_csv('noa_gsod_full_{0}.csv'.format(year))\n    \nprint(time.time()-t0)","5b478f8e":"**3. Plotting a dynamic picture of global temperature change**\n\nStay tuned","aae0c6b6":"**Querying data**","9fc82e3b":"**Input data**","ea1b8736":"**Visualization**\n\nHere I only scatter the points with different colors that represent different temperature. If I have free time I will use interpolation to handle it.","2a9480e9":"**Estimating how much memory the query need**","d2b06286":"# 2. Visualizing Global Averaged Temperature in 2017","d3da8f20":"### Sample temp and precip at monthly average for multiple years","0922515c":"**Querying Data**","86ba814b":"**Data cleaning**","aa1f9380":"# 1. Visualizing the locations of all the stations","337ef205":"**Projecting the stations into map\n**\n\n[Detail of Basemap](https:\/\/matplotlib.org\/basemap\/api\/basemap_api.html)"}}