{"cell_type":{"b3d4f579":"code","876656ae":"code","6af7f69b":"code","fdef53a2":"code","f74bf988":"code","38e2fdb8":"code","75c6c350":"code","13c55f30":"code","43c56f51":"code","51cccf4e":"code","a6404d8d":"code","8e3b3fe3":"code","fee03b3b":"code","54215796":"code","b40abbf0":"code","efe641dc":"code","eab245f4":"code","7c6a4bbd":"code","251a5f21":"code","38224d15":"code","703e4cfb":"code","448a6b08":"code","c0844f95":"code","530e3f23":"code","7b263e3e":"code","9e4d9933":"code","95c53392":"code","df14165c":"code","05a73b32":"code","9b2b3ffc":"code","4ee601ec":"code","0a19f6fe":"code","e18d4cfd":"code","8243cd34":"code","fe52b3be":"code","85bfc5f6":"code","4dde769c":"markdown","32446f38":"markdown","da3d7c73":"markdown","40889113":"markdown","2fbd945d":"markdown","5415300b":"markdown","d8c709e2":"markdown","d7a00dc6":"markdown","7d241283":"markdown","724fbb9c":"markdown","def3b869":"markdown","147ee5d9":"markdown","1aa23460":"markdown","95cf315d":"markdown","995402bc":"markdown","30a2416e":"markdown","95e433ad":"markdown"},"source":{"b3d4f579":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","876656ae":"df=pd.read_csv(r'\/kaggle\/input\/desafio-worcap-2020\/treino.csv')\ndf","6af7f69b":"df.head()","fdef53a2":"df.tail()","f74bf988":"df.describe()","38e2fdb8":"df.info()","75c6c350":"x=df.iloc[:,:-1].values\ny=df.iloc[:,-1].values","13c55f30":"x","43c56f51":"y","51cccf4e":"x.shape","a6404d8d":"y.shape","8e3b3fe3":"from sklearn.model_selection import train_test_split\nxT,xt,yT,yt=train_test_split(x,y,test_size=0.25,random_state=0)","fee03b3b":"xT.shape","54215796":"xt.shape","b40abbf0":"yT.shape","efe641dc":"yt.shape","eab245f4":"from sklearn.tree import DecisionTreeClassifier    # importing DecisionTreeClassifier\ndt = DecisionTreeClassifier()                    # Storing it in a Variable\ndt = dt.fit(xT,yT)                           # Fitting x & y into the variable\n","7c6a4bbd":"y_pred= dt.predict(xT)                # Predicting x and storing it in y_pred\ny_pred","251a5f21":"yT","38224d15":"from sklearn import metrics\nprint(\"Train Accuracy using DecisionTree:\",round(metrics.accuracy_score(yT,y_pred)*100,2),\"%\")","703e4cfb":"from sklearn.metrics import confusion_matrix\nconfusion = confusion_matrix(yT, y_pred)\nprint(confusion)","448a6b08":"yt_pred=dt.predict(xt)\nyt_pred","c0844f95":"yt","530e3f23":"from sklearn import metrics\nprint(\"Test Accuracy using DecisionTree:\",round(metrics.accuracy_score(yt,yt_pred)*100,2),\"%\")","7b263e3e":"from sklearn.metrics import confusion_matrix\nconfusion = confusion_matrix(yt, yt_pred)\nprint(confusion)","9e4d9933":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators = 10,n_jobs=2, random_state= 0)\nrfc.fit(x, y)","95c53392":"yR_pred=rfc.predict(xT)","df14165c":"yR_pred","05a73b32":"yT","9b2b3ffc":"from sklearn import metrics\nprint(\"Train Accuracy using RandomForest:\",round(metrics.accuracy_score(yT,yR_pred)*100,2),\"%\")","4ee601ec":"from sklearn.metrics import confusion_matrix\nconfusion = confusion_matrix(yT, yR_pred)\nprint(confusion)","0a19f6fe":"yr_pred=rfc.predict(xt)","e18d4cfd":"yr_pred","8243cd34":"yt","fe52b3be":"from sklearn import metrics\nprint(\"Test Accuracy using RandomForest:\",round(metrics.accuracy_score(yt,yr_pred)*100,2),\"%\")","85bfc5f6":"from sklearn.metrics import confusion_matrix\nconfusion = confusion_matrix(yt, yr_pred)\nprint(confusion)","4dde769c":"# Confusion Matrix for Test Data Predictions","32446f38":"# Predicting:\n# Using DecisionTree Classifier:","da3d7c73":"# Building the model:\n# 1) Slicing the Data:","40889113":"# Predicting Test Data","2fbd945d":"# Confusion Matrix for Train Data Predictions","5415300b":"# Train Accuracy","d8c709e2":"# Predicting Train Data","d7a00dc6":"# 2) Splitting the Data:","7d241283":"## As this is a MultiClass Classification, Predictions with Logistic Regression may not come accurate, so does KNN.\n## DecisionTree Classifier works best, so does RandomForest.","724fbb9c":"# Confusion Matrix for Test Data Predictions","def3b869":"# Train Accuracy","147ee5d9":"# Predicting Test Data","1aa23460":"# Predicting Train Data","95cf315d":"# Confusion Matrix for Train Data Predictions","995402bc":"# Test Accuracy:\n### As the test data is very small and random state is zero,we got less accuracy","30a2416e":"# Test Accuracy","95e433ad":"# Using RandomForest Classifier:"}}