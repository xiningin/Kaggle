{"cell_type":{"71ea0174":"code","671cc1c2":"code","91c0fdd9":"code","92ba2a13":"code","3bb596a2":"code","2a066088":"code","f7612964":"code","15df5ef2":"code","5b7c473e":"code","9cdb6b3b":"code","08b446dd":"code","86828527":"code","0db760b8":"code","fc179c0f":"code","f116e935":"code","677b0040":"code","5d23ddc4":"code","6e2151b2":"code","d24af3e9":"code","f8456853":"code","7acfae35":"code","1cb2a837":"code","e874df35":"code","9783414d":"code","e58c1b89":"code","a96a4a77":"code","01c2ff0a":"code","76c933b3":"code","165ddb7c":"code","23ccc890":"code","20d53c10":"code","112746a6":"code","0353e22c":"code","7293cb93":"code","8ab26aa6":"markdown","6c273151":"markdown","455eee61":"markdown","75b0d856":"markdown","3bcc51c6":"markdown","2d31ab30":"markdown","91e4a600":"markdown","a88e9dc6":"markdown","f1da7df9":"markdown","6da1b058":"markdown","cebcb7c1":"markdown","ecb22d25":"markdown","2cc5ca4a":"markdown","1c42d369":"markdown","a9324d0a":"markdown","8b1a48fa":"markdown","a4b11f55":"markdown","ab28bf22":"markdown","7ee2fb5d":"markdown","bbcd3dba":"markdown","9d1eaa3a":"markdown","3589ef98":"markdown","2b81cd8d":"markdown","20dd13ac":"markdown"},"source":{"71ea0174":"#O Ambiente utilizado \u00e9 Python 3 que vem com muitas bibliotecas de an\u00e1lise \u00fateis \n#instaladas\n\nimport numpy as np # para algebra linear\nimport pandas as pd # processamento de dados, arquivos CSV I\/O (expl: pd.read_csv)\nimport seaborn as sns  #biblioteca de visualiza\u00e7\u00e3o\nimport matplotlib.pyplot as plt  #biblioteca de visualiza\u00e7\u00e3o\nimport chart_studio.plotly as py #biblioteca de visualiza\u00e7\u00e3o\nfrom plotly.offline import init_notebook_mode, iplot # modo offline do plotly\ninit_notebook_mode(connected=True) \nimport plotly.graph_objs as go # objeto de gr\u00e1fico do plotly","671cc1c2":"# Os arquivos de dados de entrada est\u00e3o dispon\u00edveis no diret\u00f3rio \"\/home\/nelson\/Documents\/Script Python\/Time Series Prediction Tutorial with EDA\"\n# deveram colocar o caminho onde estar\u00e1 os arquivos CVS disponibilizados\nimport os\n# no c\u00f3digo abaixo como sa\u00edda ter\u00e3o os arquivos contidos na pasta\nprint(os.listdir(\"..\/input\/\"))\n                 ","91c0fdd9":"# importar bibliotecas de avisos\nimport warnings\n\n#ignorar filtros\nwarnings.filterwarnings(\"ignore\") # Se houver um aviso ap\u00f3s alguns c\u00f3digos, \n#isso nos evitar\u00e1 v\u00ea-los.\n\n# estilos de plots. o ggplot \u00e9 um dos estilos mais usados.\n# todos os resultados que voc\u00ea escreve no diretorio atual s\u00e3o salvos como sa\u00edda\nplt.style.use('ggplot') ","92ba2a13":"#datas de bombardeios\naerial = pd.read_csv(\"..\/input\/operations_dataset.csv\")\n\n# primeiros dados meteorol\u00f3gicos que incluem locais como pa\u00eds, latitude e longitude.\nweather_station_location = pd.read_csv(\"..\/input\/Weather_Station_Locations_dataset.csv\")\n# Dados clim\u00e1ticos secund\u00e1rios que incluem temperaturas m\u00ednimas, m\u00e1ximas e m\u00e9dias medidas\nweather = pd.read_csv(\"..\/input\/Summary_of_Weather_dataset.csv\")\n","3bb596a2":"# ignorar pa\u00edses que s\u00e3o NaN\naerial = aerial[pd.isna(aerial.Country)==False]\n\n# Ignorar se a longitude alvo for NaN\naerial = aerial[pd.isna(aerial['Target Longitude'])==False]\n\n# Ignorar se a longitude da decolagem for NaN\naerial = aerial[pd.isna(aerial['Takeoff Longitude'])==False]\n\n# Descartar recursos n\u00e3o utilizado\ndrop_list = ['Mission ID','Unit ID','Target ID','Altitude (Hundreds of Feet)','Airborne Aircraft',\n             'Attacking Aircraft', 'Bombing Aircraft', 'Aircraft Returned',\n             'Aircraft Failed', 'Aircraft Damaged', 'Aircraft Lost',\n             'High Explosives', 'High Explosives Type','Mission Type',\n             'High Explosives Weight (Pounds)', 'High Explosives Weight (Tons)',\n             'Incendiary Devices', 'Incendiary Devices Type',\n             'Incendiary Devices Weight (Pounds)',\n             'Incendiary Devices Weight (Tons)', 'Fragmentation Devices',\n             'Fragmentation Devices Type', 'Fragmentation Devices Weight (Pounds)',\n             'Fragmentation Devices Weight (Tons)', 'Total Weight (Pounds)',\n             'Total Weight (Tons)', 'Time Over Target', 'Bomb Damage Assessment','Source ID']\n\naerial.drop(drop_list, axis=1,inplace = True)\naerial = aerial[ aerial.iloc[:,8]!=\"4248\"] # ignora esta latitude de lan\u00e7amento \naerial = aerial[ aerial.iloc[:,9]!=1355]   # ignora esta longitude de lan\u00e7amento\n\naerial.info()","2a066088":"# Somente o que irei utilizar\nweather_station_location = weather_station_location.loc[:,[\"WBAN\",\"NAME\",\"STATE\/COUNTRY ID\",\"Latitude\",\"Longitude\"] ]\nweather_station_location.info()","f7612964":"# Somente o que iremos utililizar\nweather = weather.loc[:,[\"STA\",\"Date\",\"MeanTemp\"] ]\nweather.info()","15df5ef2":"# Pa\u00eds\nprint(aerial['Country'].value_counts())\nplt.figure(figsize=(22,10))\nsns.countplot(aerial['Country'])\nplt.show()","5b7c473e":"# Principais pa\u00edses-alvo\nprint(aerial['Target Country'].value_counts()[:10])\nplt.figure(figsize=(22,10))\nsns.countplot(aerial['Target Country'])\nplt.xticks(rotation=90)\nplt.show()","9cdb6b3b":"# As 10 melhores s\u00e9ries de aeronaves\ndata = aerial['Aircraft Series'].value_counts()\nprint(data[:10])\ndata = [go.Bar(\n            x=data[:10].index,\n            y=data[:10].values,\n            hoverinfo = 'text',\n            marker = dict(color = 'rgba(177, 14, 22, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n    )]\n\nlayout = dict(\n    title = 'Aircraft Series',\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","08b446dd":"aerial.head()","86828527":"#Ataques\naerial[\"color\"] = \"\"\naerial.color[aerial.Country == \"USA\"] = \"rgb(0,116,217)\"\naerial.color[aerial.Country == \"GREAT BRITAIN\"] = \"rgb(255,65,54)\"\naerial.color[aerial.Country == \"NEW ZEALAND\"] = \"rgb(133,20,75)\"\naerial.color[aerial.Country == \"SOUTH AFRICA\"] = \"rgb(255,133,27)\"\n\ndata = [dict(\n    type='scattergeo',\n    lon = aerial['Takeoff Longitude'],\n    lat = aerial['Takeoff Latitude'],\n    hoverinfo = 'text',\n    text = \"Country: \" + aerial.Country + \" Takeoff Location: \"+aerial[\"Takeoff Location\"]+\" Takeoff Base: \" + aerial['Takeoff Base'],\n    mode = 'markers',\n    marker=dict(\n        sizemode = 'area',\n        sizeref = 1,\n        size= 10 ,\n        line = dict(width=1,color = \"white\"),\n        color = aerial[\"color\"],\n        opacity = 0.7),\n)]\nlayout = dict(\n    title = 'Countries Take Off Bases ',\n    hovermode='closest',\n    geo = dict(showframe=False, showland=True, showcoastlines=True, showcountries=True,\n               countrywidth=1, projection=dict(type='mercator'),\n              landcolor = 'rgb(217, 217, 217)',\n              subunitwidth=1,\n              showlakes = True,\n              lakecolor = 'rgb(255, 255, 255)',\n              countrycolor=\"rgb(5, 5, 5)\")\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","0db760b8":"# Trajetos do Bombardeio\n# trajeto 1\nairports = [ dict(\n        type = 'scattergeo',\n        lon = aerial['Takeoff Longitude'],\n        lat = aerial['Takeoff Latitude'],\n        hoverinfo = 'text',\n        text = \"Country: \" + aerial.Country + \" Takeoff Location: \"+aerial[\"Takeoff Location\"]+\" Takeoff Base: \" + aerial['Takeoff Base'],\n        mode = 'markers',\n        marker = dict( \n            size=5, \n            color = aerial[\"color\"],\n            line = dict(\n                width=1,\n                color = \"white\"\n            )\n        ))]","fc179c0f":"#trajeto 2\ntargets = [ dict(\n        type = 'scattergeo',\n        lon = aerial['Target Longitude'],\n        lat = aerial['Target Latitude'],\n        hoverinfo = 'text',\n        text = \"Target Country: \"+aerial[\"Target Country\"]+\" Target City: \"+aerial[\"Target City\"],\n        mode = 'markers',\n        marker = dict( \n            size=1, \n            color = \"red\",\n            line = dict(\n                width=0.5,\n                color = \"red\"\n            )\n        ))]","f116e935":"# trajeto 3\nflight_paths = []\nfor i in range( len( aerial['Target Longitude'] ) ):\n    flight_paths.append(\n        dict(\n            type = 'scattergeo',\n            lon = [ aerial.iloc[i,9], aerial.iloc[i,16] ],\n            lat = [ aerial.iloc[i,8], aerial.iloc[i,15] ],\n            mode = 'lines',\n            line = dict(\n                width = 0.7,\n                color = 'black',\n            ),\n            opacity = 0.6,\n        )\n    )\n    \nlayout = dict(\n    title = 'Bombing Paths from Attacker Country to Target ',\n    hovermode='closest',\n    geo = dict(showframe=False, showland=True, showcoastlines=True, showcountries=True,\n               countrywidth=1, projection=dict(type='mercator'),\n              landcolor = 'rgb(217, 217, 217)',\n              subunitwidth=1,\n              showlakes = True,\n              lakecolor = 'rgb(255, 255, 255)',\n              countrycolor=\"rgb(5, 5, 5)\")\n)\n    \nfig = dict( data=flight_paths + airports+targets, layout=layout )\niplot( fig )","677b0040":"# Teatro de opera\u00e7\u00f5es\nprint(aerial['Theater of Operations'].value_counts())\nplt.figure(figsize=(22,10))\nsns.countplot(aerial['Theater of Operations'])\nplt.show()","5d23ddc4":"# Localiza\u00e7\u00f5es das esta\u00e7\u00f5es meteorol\u00f3gicas\ndata = [dict(\n    type='scattergeo',\n    lon = weather_station_location.Longitude,\n    lat = weather_station_location.Latitude,\n    hoverinfo = 'text',\n    text = \"Name: \" + weather_station_location.NAME + \" Country: \" + weather_station_location[\"STATE\/COUNTRY ID\"],\n    mode = 'markers',\n    marker=dict(\n        sizemode = 'area',\n        sizeref = 1,\n        size= 8 ,\n        line = dict(width=1,color = \"white\"),\n        color = \"blue\",\n        opacity = 0.7),\n)]\nlayout = dict(\n    title = 'Weather Station Locations ',\n    hovermode='closest',\n    geo = dict(showframe=False, showland=True, showcoastlines=True, showcountries=True,\n               countrywidth=1, projection=dict(type='mercator'),\n              landcolor = 'rgb(217, 217, 217)',\n              subunitwidth=1,\n              showlakes = True,\n              lakecolor = 'rgb(255, 255, 255)',\n              countrycolor=\"rgb(5, 5, 5)\")\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","6e2151b2":"weather_station_id = weather_station_location[weather_station_location.NAME == \"BINDUKURI\"].WBAN \nweather_bin = weather[weather.STA == 32907]\nweather_bin[\"Date\"] = pd.to_datetime(weather_bin[\"Date\"])\nplt.figure(figsize=(22,10))\nplt.plot(weather_bin.Date,weather_bin.MeanTemp)\nplt.title(\"Mean Temperature of Bindukuri Area\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Mean Temperature\")\nplt.show()","d24af3e9":"aerial = pd.read_csv(\"..\/input\/operations_dataset.csv\")\naerial[\"year\"] = [ each.split(\"\/\")[2] for each in aerial[\"Mission Date\"]]\naerial[\"month\"] = [ each.split(\"\/\")[0] for each in aerial[\"Mission Date\"]]\naerial = aerial[aerial[\"year\"]>=\"1943\"]\naerial = aerial[aerial[\"month\"]>=\"8\"]\n\naerial[\"Mission Date\"] = pd.to_datetime(aerial[\"Mission Date\"])\n\nattack = \"USA\"\ntarget = \"BURMA\"\ncity = \"KATHA\"\n\naerial_war = aerial[aerial.Country == attack]\naerial_war = aerial_war[aerial_war[\"Target Country\"] == target]\naerial_war = aerial_war[aerial_war[\"Target City\"] == city]","f8456853":"liste = []\naa = []\nfor each in aerial_war[\"Mission Date\"]:\n    dummy = weather_bin[weather_bin.Date == each]\n    liste.append(dummy[\"MeanTemp\"].values)\naerial_war[\"dene\"] = liste\nfor each in aerial_war.dene.values:\n    aa.append(each[0])\n\n# Create a trace\ntrace = go.Scatter(\n    x = weather_bin.Date,\n    mode = \"lines\",\n    y = weather_bin.MeanTemp,\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n    name = \"Mean Temperature\"\n)\ntrace1 = go.Scatter(\n    x = aerial_war[\"Mission Date\"],\n    mode = \"markers\",\n    y = aa,\n    marker = dict(color = 'rgba(16, 0, 200, 1)'),\n    name = \"Bombing temperature\"\n)\nlayout = dict(title = 'Mean Temperature --- Bombing Dates and Mean Temperature at this Date')\ndata = [trace,trace1]\n\nfig = dict(data = data, layout = layout)\niplot(fig)","7acfae35":"# Temperatura m\u00e9dia da \u00e1rea de Bindikuri\nplt.figure(figsize=(22,10))\nplt.plot(weather_bin.Date,weather_bin.MeanTemp)\nplt.title(\"Mean Temperature of Bindukuri Area\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Mean Temperature\")\nplt.show()\n\n# permite criar s\u00e9ries temporais a partir do tempo\ntimeSeries = weather_bin.loc[:, [\"Date\",\"MeanTemp\"]]\ntimeSeries.index = timeSeries.Date\nts = timeSeries.drop(\"Date\",axis=1)","1cb2a837":"# biblioteca adfuller\nfrom statsmodels.tsa.stattools import adfuller","e874df35":"# check_adfuller\ndef check_adfuller(ts):\n    # Dickey-Fuller test\n    result = adfuller(ts, autolag='AIC')\n    print('Test statistic: ' , result[0])\n    print('p-value: '  ,result[1])\n    print('Critical Values:' ,result[4])","9783414d":"# check_mean_std\ndef check_mean_std(ts):\n    #Rolling statistics\n    rolmean = ts.rolling(12).mean()\n    rolstd = ts.rolling(12).std()\n    plt.figure(figsize=(22,10))   \n    orig = plt.plot(ts, color='red',label='Original')\n    mean = plt.plot(rolmean, color='black', label='Rolling Mean')\n    std = plt.plot(rolstd, color='green', label = 'Rolling Std')\n    plt.xlabel(\"Date\")\n    plt.ylabel(\"Mean Temperature\")\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.legend()\n    plt.show()","e58c1b89":"# verifica\u00e7\u00e3o estacion\u00e1rio: m\u00e9dia, vari\u00e2ncia (std) e teste de adfuller\ncheck_mean_std(ts)\ncheck_adfuller(ts.MeanTemp)","a96a4a77":"# metodo da m\u00e9dia m\u00f3vel\nwindow_size = 6\nmoving_avg = ts.rolling(12).mean()\nplt.figure(figsize=(22,10))\nplt.plot(ts, color = \"red\",label = \"Original\")\nplt.plot(moving_avg, color='black', label = \"moving_avg_mean\")\nplt.title(\"Mean Temperature of Bindukuri Area\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Mean Temperature\")\nplt.legend()\nplt.show()","01c2ff0a":"ts_moving_avg_diff = ts - moving_avg\nts_moving_avg_diff.dropna(inplace=True) # 6 primeiros \u00e9 o valor nan devido ao tamanho da janela","76c933b3":"# verifica\u00e7\u00e3o do  estacion\u00e1rio: m\u00e9dia, vari\u00e2ncia (std) e teste mais adequado\ncheck_mean_std(ts_moving_avg_diff)\ncheck_adfuller(ts_moving_avg_diff.MeanTemp)","165ddb7c":"# m\u00e9todo de diferencia\u00e7\u00e3o\nts_diff = ts - ts.shift()\nplt.figure(figsize=(22,10))\nplt.plot(ts_diff)\nplt.title(\"Differencing method\") \nplt.xlabel(\"Date\")\nplt.ylabel(\"Differencing Mean Temperature\")\nplt.show()","23ccc890":"ts_diff.dropna(inplace=True) # devido \u00e0 mudan\u00e7a, existem valores nan\n# verifique estacion\u00e1rio: m\u00e9dia, vari\u00e2ncia (std) e teste de adfuller\ncheck_mean_std(ts_diff)\ncheck_adfuller(ts_diff.MeanTemp)","20d53c10":"# ACF e PACF \nfrom statsmodels.tsa.stattools import acf, pacf\nlag_acf = acf(ts_diff, nlags=20)\nlag_pacf = pacf(ts_diff, nlags=20, method='ols')","112746a6":"# ACF\nplt.figure(figsize=(22,10))\n\nplt.subplot(121) \nplt.plot(lag_acf)\nplt.axhline(y=0,linestyle='--',color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(ts_diff)),linestyle='--',color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(ts_diff)),linestyle='--',color='gray')\nplt.title('Autocorrelation Function')\n\n# PACF\nplt.subplot(122)\nplt.plot(lag_pacf)\nplt.axhline(y=0,linestyle='--',color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(ts_diff)),linestyle='--',color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(ts_diff)),linestyle='--',color='gray')\nplt.title('Partial Autocorrelation Function')\nplt.tight_layout()","0353e22c":"# Biblioteca ARIMA\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom pandas import datetime\n\n# fit model\nmodel = ARIMA(ts, order=(1,0,1)) # (ARMA) = (1,0,1)\nmodel_fit = model.fit(disp=0)\n\n# Preditivo (previs\u00e3o)\nstart_index = datetime(1944, 6, 25)\nend_index = datetime(1945, 5, 31)\nforecast = model_fit.predict(start=start_index, end=end_index)\n\n# visualiza\u00e7\u00e3o\nplt.figure(figsize=(22,10))\nplt.plot(weather_bin.Date,weather_bin.MeanTemp,label = \"original\")\nplt.plot(forecast,label = \"predicted\")\nplt.title(\"Time Series Forecast\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Mean Temperature\")\nplt.legend()\nplt.show()","7293cb93":"# prever todo o caminho\nfrom sklearn.metrics import mean_squared_error\n# fit model\nmodel2 = ARIMA(ts, order=(1,0,1)) # (ARMA) = (1,0,1)\nmodel_fit2 = model2.fit(disp=0)\nforecast2 = model_fit2.predict()\nerror = mean_squared_error(ts, forecast2)\nprint(\"error: \" ,error)\n# visualiza\u00e7\u00e3o\nplt.figure(figsize=(22,10))\nplt.plot(weather_bin.Date,weather_bin.MeanTemp,label = \"original\")\nplt.plot(forecast2,label = \"predicted\")\nplt.title(\"Time Series Forecast\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Mean Temperature\")\nplt.legend()\nplt.savefig('graph.png')\n\nplt.show()","8ab26aa6":"As localiza\u00e7\u00f5es das esta\u00e7\u00f5es meteorol\u00f3gicas est\u00e3o abaixo","6c273151":"Refer\u00eancias\n\n[Time Series Prediction](http:\/\/https:\/\/www.kaggle.com\/)\n\n[ARIMA](http:\/\/https:\/\/pt.wikipedia.org\/wiki\/ARIMA)","455eee61":"Carregar os dados.\nComo mencionei na introdu\u00e7\u00e3o, usei v\u00e1rias fontes de dados.\nOpera\u00e7\u00f5es de bombardeio a\u00e9reo na Segunda Guerra Mundial\nResumindo, esses dados incluem opera\u00e7\u00f5es de bombardeio. Por exemplo, os EUA que usam a bomba do aeroporto de Ponte Olivo na Alemanha (Berlim) com aeronaves A36 em 1945.\nCondi\u00e7\u00f5es clim\u00e1ticas na Segunda Guerra Mundial\nResumindo, condi\u00e7\u00f5es clim\u00e1ticas durante a segunda guerra mundial. Por exemplo, de acordo com a esta\u00e7\u00e3o meteorol\u00f3gica da cidade de George Town, a temperatura m\u00e9dia \u00e9 23,88 em 01\/07\/1942.\nEste conjunto de dados possui 2 subconjuntos. O primeiro inclui localiza\u00e7\u00f5es de esta\u00e7\u00f5es meteorol\u00f3gicas como pa\u00eds, latitude e longitude.\nO segundo inclui temperaturas m\u00ednimas, m\u00e1ximas e m\u00e9dias medidas de esta\u00e7\u00f5es meteorol\u00f3gicas","75b0d856":"Este artigo, tem como objetivo a explana\u00e7\u00e3o do uso do m\u00e9todo de previs\u00e3o de s\u00e9ries temporais, o ARIMA, bem como abordagem de t\u00e9cnicas de limpeza de dados e visualiza\u00e7\u00e3o utilizando o Pyplot.\n\n\nNeste kernel, usei fontes de dados multiplas que s\u00e3o opera\u00e7\u00f5es de bombardeio a\u00e9reo e condi\u00e7\u00f5es clim\u00e1ticas na Segunda Guerra Mundial. Ap\u00f3s esse ponto, usarei a sigla ww2 para a 2\u00aa Guerra Mundial. Come\u00e7aremos com a descri\u00e7\u00e3o e a limpeza dos dados, depois visualizaremos nossos dados para entender melhor. Esses processos podem ser chamados de AED (An\u00e1lise Explorat\u00f3ria de Dados). Depois disso, focaremos na previs\u00e3o de s\u00e9ries temporais para prever quando as opera\u00e7\u00f5es de bombardeio s\u00e3o realizadas. Para previs\u00e3o de s\u00e9ries temporais, usaremos o m\u00e9todo ARIMA, que ser\u00e1 um tutorial.","3bcc51c6":" - Crit\u00e9rios m\u00e9dios constantes: a m\u00e9dia parece constante, como voc\u00ea pode ver no gr\u00e1fico (linha preta) acima. (\u00e9 estacion\u00e1rio)\n - O segundo \u00e9 a varia\u00e7\u00e3o constante. Parece constante. (\u00e9 estacion\u00e1rio)\n - A estat\u00edstica do teste \u00e9 menor que os valores cr\u00edticos de 1%, portanto, podemos dizer com 99% de confian\u00e7a que se trata de uma s\u00e9rie estacion\u00e1ria. (\u00e9 estacion\u00e1rio)","2d31ab30":" - Nosso primeiro crit\u00e9rio para estacion\u00e1rio \u00e9 a m\u00e9dia constante. Portanto, falhamos porque a m\u00e9dia n\u00e3o \u00e9 constante, como voc\u00ea pode ver no gr\u00e1fico (linha preta) acima. (n\u00e3o estacion\u00e1rio)\n - O segundo \u00e9 a varia\u00e7\u00e3o constante. Parece constante. (sim estacion\u00e1rio)\n   O terceiro \u00e9 que, se a estat\u00edstica do teste for menor que o valor cr\u00edtico, podemos      dizer que a s\u00e9rie temporal \u00e9 estacion\u00e1ria. Vamos olhar:\n     - test statistic = -1.4 and critical values = {'1%': -3.439229783394421, '5%':            -2.86545894814762, '10%': -2.5688568756191392}. Test statistic is bigger than          the critical values. (no stationary)\n - Como resultado, temos certeza de que nossa s\u00e9rie temporal n\u00e3o \u00e9 estacion\u00e1ria.\n - Vamos deixar s\u00e9ries temporais estacion\u00e1rias na pr\u00f3xima parte.   ","91e4a600":"Tornar uma s\u00e9rie temporal estacion\u00e1ria?\n\n - Como mencionamos anteriormente, h\u00e1 duas raz\u00f5es por tr\u00e1s da n\u00e3o estacionariedade das s\u00e9ries temporais\n   - Tend\u00eancia: m\u00e9dia vari\u00e1vel ao longo do tempo. Precisamos de m\u00e9dia constante para s\u00e9ries estacion\u00e1rias.\n   - Sazonalidade: varia\u00e7\u00f5es em hor\u00e1rio espec\u00edfico. Precisamos de varia\u00e7\u00f5es constantes para s\u00e9ries estacion\u00e1rias.\n - Primeiro resolva o problema de tend\u00eancia (m\u00e9dia constante)\n   - O m\u00e9todo mais popular \u00e9 a m\u00e9dia m\u00f3vel.\n     - M\u00e9dia m\u00f3vel: temos janelas que levam a m\u00e9dia ao longo da amostra 'n' passada. 'n' \u00e9 o tamanho da janela.","a88e9dc6":"Entendendo o ARIMA\nEm estat\u00edstica e econometria, particularmente em an\u00e1lise de s\u00e9ries temporais, um modelo auto-regressivo integrado de m\u00e9dias m\u00f3veis (autoregressive integrated moving average ou ARIMA, na sigla em ingl\u00eas) \u00e9 uma generaliza\u00e7\u00e3o de um modelo auto-regressivo de m\u00e9dias m\u00f3veis (ARMA). Ambos os modelos s\u00e3o ajustados aos dados da s\u00e9rie temporal para entender melhor os dados ou para prever pontos futuros na s\u00e9rie. Modelos ARIMA s\u00e3o aplicados em alguns casos em que os dados mostram evid\u00eancias de n\u00e3o estacionariedade, em que um passo inicial de diferencia\u00e7\u00e3o (correspondente \u00e0 parte \"integrada\" do modelo) pode ser aplicado uma ou mais vezes para eliminar a n\u00e3o estacionariedade.\n\n A parte auto-regressiva (AR) do modelo ARIMA indica que a vari\u00e1vel evoluinte de interesse \u00e9 regressada em seus pr\u00f3prios valores defasados, isto \u00e9, anteriores. A parte de m\u00e9dia m\u00f3vel (MA) indica que o erro de regress\u00e3o \u00e9 na verdade uma combina\u00e7\u00e3o linear dos termos de erro, cujos valores ocorreram contemporaneamente e em v\u00e1rios momentos no passado. A parte integrada (I) indica que os valores de dados foram substitu\u00eddos com a diferen\u00e7a entre seus valores e os valores anteriores e este processo diferenciador pode ter sido realizado mais de uma vez. O prop\u00f3sito da cada uma destas caracter\u00edsticas \u00e9 fazer o modelo se ajustar aos dados da melhor forma poss\u00edvel.","f1da7df9":"Ok, agora vou visualizar os trajetos de bombardeio de que pa\u00eds a partir do qual decolam a bomba base e quais pa\u00edses e cidades.","6da1b058":" - Vamos prever e visualizar todo o caminho e encontrar o erro m\u00e9dio quadr\u00e1tico","cebcb7c1":" - Como voc\u00ea pode ver, temos medi\u00e7\u00f5es de temperatura de 1943 a 1945.\n - A temperatura oscila entre 12 e 32 graus.\n - A temperatura dos meses de inverno \u00e9 mais fria que a temperatura dos meses de ver\u00e3o.","ecb22d25":" - Linha verde \u00e9 a temperatura m\u00e9dia medida em Bindukuri.\n - Marcadores azuis s\u00e3o datas de bombardeio e temperatura de data de bombardeio.\n - Como pode ser visto no cen\u00e1rio, os EUA bombardeiam a altas temperaturas.\n   - A quest\u00e3o \u00e9 que podemos prever o tempo futuro e, de acordo com essa previs\u00e3o, podemos saber se o bombardeio ser\u00e1 realizado ou n\u00e3o.\n   - Para responder a essa pergunta, vamos come\u00e7ar pela previs\u00e3o de s\u00e9ries temporais.","2cc5ca4a":"- Crit\u00e9rios m\u00e9dios constantes: a m\u00e9dia parece constante, como voc\u00ea pode ver no gr\u00e1fico (linha preta) acima. (sim estacion\u00e1rio)\n - O segundo \u00e9 a varia\u00e7\u00e3o constante. Parece constante. (sim estacion\u00e1rio)\n - A estat\u00edstica do teste \u00e9 menor que os valores cr\u00edticos de 1%, portanto, podemos dizer com 99% de confian\u00e7a que se trata de uma s\u00e9rie estacion\u00e1ria. (sim estacion\u00e1rio)\n - Atingimos s\u00e9ries temporais estacion\u00e1rias. No entanto, vamos analisar mais um m\u00e9todo para evitar tend\u00eancia e sazonalidade.\n   - M\u00e9todo de diferencia\u00e7\u00e3o: \u00e9 um dos m\u00e9todos mais comuns. A id\u00e9ia \u00e9 que tenham diferen\u00e7a entre s\u00e9ries temporais e s\u00e9ries temporais alteradas.","1c42d369":"- Vamos concentrar a guerra nos EUA e na BURMA\n - Nesta guerra, os EUA bombardearam BURMA (cidade de KATHA) de 1942 a 1945.\n - A esta\u00e7\u00e3o meteorol\u00f3gica mais pr\u00f3xima a esta guerra \u00e9 BINDUKURI e possui registro de temperatura de 1943 a 1945.\n - Agora vamos visualizar essa situa\u00e7\u00e3o. Por\u00e9m, antes da visualiza\u00e7\u00e3o, precisamos criar objetos de data e data e hora.","a9324d0a":"Como voc\u00ea pode ver pelos caminhos dos bombardeios, a maior parte do ataque \u00e9 realizada no teatro de opera\u00e7\u00f5es do Mediterr\u00e2neo. \n Teatro de Opera\u00e7\u00f5es:\n - ETO: Teatro Europeu de Opera\u00e7\u00e3o\n - PTO: Teatro de Opera\u00e7\u00f5es do Pac\u00edfico\n - MTO: Teatro de Opera\u00e7\u00f5es Mediterr\u00e2neo\n - CBI: China-Burma-India Theater of Operations\n - EAST AFRICA: East Africa Theater of Operations","8b1a48fa":"Estacionariedade de uma s\u00e9rie temporal\n - Existem tr\u00eas crit\u00e9rios b\u00e1sicos para uma s\u00e9rie temporal compreender se \u00e9 uma s\u00e9rie estacion\u00e1ria ou n\u00e3o.\n   - As propriedades estat\u00edsticas das s\u00e9ries temporais, como m\u00e9dia e vari\u00e2ncia, devem permanecer constantes ao longo do tempo para chamar s\u00e9ries temporais como estacion\u00e1rias.\n     - m\u00e9dia constante\n     - varia\u00e7\u00e3o constante\n     - autocovari\u00e2ncia que n\u00e3o depende do tempo. autocovari\u00e2ncia \u00e9 covari\u00e2ncia entre s\u00e9ries temporais e s\u00e9ries temporais defasadas.\n - Permite visualizar e verificar a tend\u00eancia de sazonalidade de nossas s\u00e9ries temporais.","a4b11f55":"O que s\u00e3o s\u00e9ries temporais?\n - A s\u00e9rie temporal \u00e9 uma cole\u00e7\u00e3o de pontos de dados coletados em intervalos de tempo constantes.\n - Depende do tempo.\n - A maioria das s\u00e9ries temporais tem algum tipo de tend\u00eancia de sazonalidade. Por exemplo, se vendermos sorvete, provavelmente haver\u00e1 vendas mais altas no ver\u00e3o. Portanto, esta s\u00e9rie temporal apresenta tend\u00eancias de sazonalidade.\n - Outro exemplo, vamos pensar que cortamos uma vez todos os dias durante 1 ano. Como voc\u00ea acha, n\u00e3o haver\u00e1 um cen\u00e1rio como o n\u00famero seis que aparece principalmente na temporada de ver\u00e3o ou o n\u00famero cinco aparece principalmente em janeiro. Portanto, essa s\u00e9rie cronol\u00f3gica n\u00e3o apresenta tend\u00eancias de sazonalidade.","ab28bf22":"Descri\u00e7\u00e3o de dados\nExplico apenas os recursos de dados que usaremos neste kernel.\nBombardeio a\u00e9reo Descri\u00e7\u00e3o dos dados:\n - Data da Miss\u00e3o: Data da Miss\u00e3o\n - Teatro de Opera\u00e7\u00f5es: regi\u00e3o em que opera\u00e7\u00f5es militares ativas est\u00e3o em andamento; \"o ex\u00e9rcito estava em campo aguardando a\u00e7\u00e3o\"; Exemplo: \"ele serviu no Vietn\u00e3 por tr\u00eas anos\"\n - Pa\u00eds: Pa\u00eds que faz miss\u00e3o ou opera\u00e7\u00e3o como EUA\n - For\u00e7a A\u00e9rea: Nome ou ID da unidade da For\u00e7a A\u00e9rea como 5AF\n - S\u00e9rie de aeronaves: modelo ou tipo de aeronave como B24\n - Indicativo: Antes do ataque \u00e0 bomba, mensagem, c\u00f3digo, an\u00fancio ou sintonia transmitida por r\u00e1dio.\n - Base de decolagem: nome do aeroporto de decolagem como o Ponte Olivo Airfield\n - Local da decolagem: regi\u00e3o da decolagem Sic\u00edlia\n - Latitude de decolagem: latitude da regi\u00e3o de decolagem\n - Longitude de decolagem: Longitude da regi\u00e3o de decolagem\n - Pa\u00eds de destino: pa\u00eds de destino como a Alemanha\n - Segmentar cidade: segmente cidade como Berlim\n - Tipo de destino: tipo de destino como \u00e1rea da cidade\n - Ind\u00fastria-alvo: alvo industy como cidade ou urbano\n - Prioridade de destino: segmente como 1 (a maioria)\n - Latitude do alvo: latitude do alvo\n - Longitude alvo: Longitude alvo\n \nDescri\u00e7\u00e3o dos dados da condi\u00e7\u00e3o clim\u00e1tica:\n Localiza\u00e7\u00e3o da esta\u00e7\u00e3o meteorol\u00f3gica:\n  - WBAN: N\u00famero da esta\u00e7\u00e3o meteorol\u00f3gica\n  - NAME: nome da esta\u00e7\u00e3o meteorol\u00f3gica\n  - ID DO ESTADO \/ PA\u00cdS: acr\u00f4nimo de pa\u00edses\n  - Latitude: latitude da esta\u00e7\u00e3o meteorol\u00f3gica\n  - Longitude: Longitude da esta\u00e7\u00e3o meteorol\u00f3gica\n\nClima:\n - STA: n\u00famero da esta\u00e7\u00e3o meteorol\u00f3gica (WBAN)\n - Data: Data da medi\u00e7\u00e3o da temperatura\n - MeanTemp: temperatura m\u00e9dia\n \nLimpeza de Dados\n Os dados do bombardeio a\u00e9reo incluem muito valor de NaN. Em vez de us\u00e1-los, ignoro alguns valores de NaN. Ele n\u00e3o apenas remove a incerteza, mas tamb\u00e9m facilita o processo de visualiza\u00e7\u00e3o\n - Ignorar pa\u00edses que s\u00e3o NaN\n - Ignorar se a longitude alvo for NaN\n - Ignorar se a longitude da decolagem for NaN\n - Descartar recursos n\u00e3o utilizados\n \nOs dados da condi\u00e7\u00e3o clim\u00e1tica n\u00e3o precisam de limpeza. De acordo com a an\u00e1lise e visualiza\u00e7\u00e3o explorat\u00f3ria de dados, escolhi um determinado local para examinar mais profundamente. No entanto, vou colocar as vari\u00e1veis de dados no que uso apenas.","7ee2fb5d":"- Como voc\u00ea pode ver no gr\u00e1fico acima, nossas s\u00e9ries temporais apresentam varia\u00e7\u00f5es sazonais. No ver\u00e3o, a temperatura m\u00e9dia \u00e9 mais alta e no inverno a temperatura m\u00e9dia \u00e9 mais baixa a cada ano.\n - Agora vamos verificar estacion\u00e1rio de s\u00e9ries temporais. Podemos verificar a estacionariedade usando os seguintes m\u00e9todos:\n   - Plotting Rolling Statistics:: Temos uma janela, digamos que o tamanho da janela \u00e9 6 e, em seguida, encontramos a m\u00e9dia e a varia\u00e7\u00e3o do rolamento para verificar estacion\u00e1rio.\n   - Teste Dickey-Fuller: Os resultados do teste incluem uma estat\u00edstica de teste e alguns valores cr\u00edticos para os n\u00edveis de confian\u00e7a das diferen\u00e7as. Se a estat\u00edstica do teste for menor que o valor cr\u00edtico, podemos dizer que as s\u00e9ries temporais s\u00e3o estacion\u00e1rias.","bbcd3dba":"Visualiza\u00e7\u00e3o de dados\n Vou come\u00e7ar com no\u00e7\u00f5es b\u00e1sicas de visualiza\u00e7\u00e3o que compreendem dados\n - Quantos pa\u00edses quais ataques\n - Principais pa\u00edses-alvo\n - As 10 melhores s\u00e9ries de aeronaves\n - Localiza\u00e7\u00f5es base da decolagem (pa\u00edses de Ataque)\n - Locais de destino \n - Caminhos de bombardeio\n - Teatro de Opera\u00e7\u00f5es\n - Localiza\u00e7\u00f5es das esta\u00e7\u00f5es meteorol\u00f3gicas","9d1eaa3a":"Arenonave mais utilizada \u00e9 o A36 Agora vamos visualizar as bases dos pa\u00edses que atacam Na plot abaixo, a cor azul chama a aten\u00e7\u00e3o, s\u00e3o os EUA e a cor vermelha \u00e9 a Gr\u00e3-Bretanha","3589ef98":" - Duas linhas pontilhadas s\u00e3o os intervalos de confian\u00e7a. Usamos essas linhas para determinar os valores de 'p' e 'q'\n   - Escolhendo p: o valor do atraso no qual o gr\u00e1fico PACF cruza o intervalo de confian\u00e7a superior pela primeira vez. p = 1.\n   - Escolhendo q: o valor do atraso no qual o gr\u00e1fico ACF cruza o intervalo de confian\u00e7a superior pela primeira vez. q = 1.\n - Agora vamos usar (1,0,1) como par\u00e2metros dos modelos ARIMA e prever\n   - ARIMA: da biblioteca de estat\u00edsticas\n   - datetime: vamos us\u00e1-lo \u00edndices de in\u00edcio e de fim do m\u00e9todo de previs\u00e3o","2b81cd8d":"Previs\u00e3o de s\u00e9ries temporais com ARIMA\n - Vamos usar o m\u00e9todo mais utilizado ARIMA\n - ARIMA : AutoRegressive Integrated Moving Average - Explicarei em seguida\n - O caminho que seguiremos:\n   - O que \u00e9 s\u00e9rie temporal?\n   - Estacionariedade de uma s\u00e9rie temporal\n   - Tornar uma s\u00e9rie temporal estacion\u00e1ria?\n   - Previs\u00e3o de uma s\u00e9rie temporal","20dd13ac":"Previs\u00e3o de uma s\u00e9rie temporal\n - Aprendemos dois m\u00e9todos diferentes, que s\u00e3o m\u00e9todos m\u00f3veis de m\u00e9dia e diferencia\u00e7\u00e3o, para evitar problemas de tend\u00eancia e sazonalidade\n - Para previs\u00e3o (previs\u00e3o), usaremos as s\u00e9ries temporais ts_diff resultantes do m\u00e9todo de diferencia\u00e7\u00e3o. N\u00e3o h\u00e1 raz\u00e3o para eu apenas escolher.\n - O m\u00e9todo de previs\u00e3o tamb\u00e9m \u00e9 o ARIMA, que \u00e9 a m\u00e9dia m\u00f3vel integrada auto-regressiva.\n   - AR: Auto-regressivo (p): os termos de AR s\u00e3o apenas defasagens na vari\u00e1vel dependente. Por exemplo, digamos que p seja 3, usaremos x (t-1), x (t-2) e x (t-3) para prever x (t)\n   - I: Integrado (d): Esse \u00e9 o n\u00famero de diferen\u00e7as n\u00e3o sazonais. Por exemplo, no nosso caso, consideramos a diferen\u00e7a de primeira ordem. Ent\u00e3o passamos essa vari\u00e1vel e colocamos d = 0\n   - MA: M\u00e9dias M\u00f3veis (q): os termos MA s\u00e3o erros de previs\u00e3o atrasados \u200b\u200bna equa\u00e7\u00e3o de previs\u00e3o.\n - (p, d, q) s\u00e3o par\u00e2metros do modelo ARIMA.\n - Para escolher os par\u00e2metros p, d, q, usaremos dois gr\u00e1ficos diferentes.\n   - Fun\u00e7\u00e3o de autocorrela\u00e7\u00e3o (ACF): Medi\u00e7\u00e3o da correla\u00e7\u00e3o entre s\u00e9ries temporais e vers\u00e3o atrasada das s\u00e9ries temporais.\n   - Fun\u00e7\u00e3o de autocorrela\u00e7\u00e3o parcial (PACF): mede a correla\u00e7\u00e3o entre as s\u00e9ries temporais e a vers\u00e3o defasada das s\u00e9ries temporais, mas ap\u00f3s eliminar as varia\u00e7\u00f5es j\u00e1 explicadas pelas compara\u00e7\u00f5es intermedi\u00e1rias."}}