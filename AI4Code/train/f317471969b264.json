{"cell_type":{"7a73d58c":"code","c46b4758":"code","8a82705f":"code","30327dc1":"code","105068f7":"code","30f3bd5a":"code","dfa5d7f5":"code","e5abf512":"code","40f653f5":"code","489e2ac6":"code","c26df742":"code","30a50041":"code","caa97265":"code","a606f78e":"code","04a1d51a":"code","62b5775c":"code","952ef589":"code","ee797c8a":"code","b1d8fddd":"code","9c27e18f":"code","917ec0a0":"code","e634d54d":"code","5417e069":"code","f99b2247":"code","1cfc0c9c":"code","6d1ec722":"code","61f4c61e":"code","018fe07a":"code","81c22351":"code","d4aeb262":"code","299f41a5":"code","87f1e210":"code","8ad4a1e6":"code","fefa2f8e":"code","e7c4e07c":"markdown","c02602c0":"markdown","63c09d0c":"markdown","2cc32163":"markdown","3f060455":"markdown","727ee18e":"markdown","8f8f8812":"markdown","56776ee8":"markdown","6234f298":"markdown","97ded211":"markdown","9e0484b4":"markdown","a64cb431":"markdown"},"source":{"7a73d58c":"# importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nsns.set()\n%matplotlib inline","c46b4758":"#import dataset\nheart_df = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')       \nheart_df.head(10)","8a82705f":"# information about the dataset\nheart_df.info()     ","30327dc1":"#description about dataset\nheart_df.describe()","105068f7":"heart_df.shape","30f3bd5a":"heart_df.isnull().sum()","dfa5d7f5":"heart_df.notnull().sum()","e5abf512":"heart_df.dtypes","40f653f5":"#Plotting the distribution plot.\nplt.figure(figsize=(20,25))\nplotnumber=1\n\nfor column in heart_df:\n  if plotnumber<14:\n    ax=plt.subplot(4,4,plotnumber)\n    sns.distplot(heart_df[column])\n    plt.xlabel(column,fontsize=20)\n    plt.ylabel('Values',fontsize=20)\n  plotnumber+=1\nplt.show()","489e2ac6":"#Correlation matrix\n\nplt.figure(figsize = (16, 8))\n\ncorr = heart_df.corr()\nmask = np.triu(np.ones_like(corr, dtype = bool))\nsns.heatmap(corr, mask = mask, annot = True, fmt = '.2g', linewidths = 1)\nplt.show()","c26df742":"#checking the variance\nheart_df.var()","30a50041":"heart_df['trestbps']=np.log(heart_df['trestbps'])\nheart_df['chol']=np.log(heart_df['chol'])\nheart_df['thalach']=np.log(heart_df['thalach'])\n\nnp.var(heart_df[[\"trestbps\",'chol','thalach']])","caa97265":"heart_df.isnull().sum()","a606f78e":"x=heart_df.drop('target',axis=1)    \ny=heart_df['target']","04a1d51a":"#spliting the dataset\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=123)\n","62b5775c":"accuracies={}\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report\nlr = LogisticRegression(penalty='l2')\nlr.fit(x_train,y_train)\n\ny_pred = lr.predict(x_test)\n\nacc=accuracy_score(y_test,y_pred)\naccuracies['Logistic Regression']=acc*100\nprint(\"Accuracy score of the model is:\",accuracy_score(y_test,y_pred)*100,\"%\")\n\n","952ef589":"print(\"Confusion matrix of the model\",confusion_matrix(y_test,y_pred))\n\nprint(\"Classification Report\",classification_report(y_test,y_pred))","ee797c8a":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=8)\n\nknn.fit(x_train,y_train)\n\ny_pred1 = knn.predict(x_test)\n\nacc1=accuracy_score(y_test,y_pred)\naccuracies['KNeighborsClassifier']=acc1*100\n\naccuracy_score(y_train,knn.predict(x_train))\nprint(\"Accuracy score of the model is:\",accuracy_score(y_test,y_pred1)*100,\"%\")\n\n\n\n\n\n","b1d8fddd":"print(\"Confusion matrix of the model\",confusion_matrix(y_test,y_pred1))\n\nprint(\"Classification Report\",classification_report(y_test,y_pred1))\n","9c27e18f":"from sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(x_train, y_train)\n\ny_pred2 = svc.predict(x_test)\n\nacc2=accuracy_score(y_test,y_pred2)\naccuracies['SVC']=acc2*100\n\naccuracy_score(y_train,svc.predict(x_train))\n\nprint(\"Accuracy score of the model is:\",accuracy_score(y_test,y_pred2)*100,\"%\")\n\n\n\n\n\n","917ec0a0":"print(\"Confusion matrix of the model\",confusion_matrix(y_test,y_pred2))\n\nprint(\"Classification Report\",classification_report(y_test,y_pred2))","e634d54d":"from sklearn.tree import DecisionTreeClassifier\n\ndtc = DecisionTreeClassifier()\ndtc.fit(x_train, y_train)\n\ny_pred3 = dtc.predict(x_test)\nacc3=accuracy_score(y_test,y_pred)\naccuracies['DecisionTreeClassifier']=acc3*100\n\naccuracy_score(y_train,dtc.predict(x_train))\nprint(\"Accuracy score of the model is:\",accuracy_score(y_test,y_pred3)*100,\"%\")\n\n\n\n\n","5417e069":"print(\"Confusion matrix of the model\",confusion_matrix(y_test,y_pred3))\n\nprint(\"Classification Report\",classification_report(y_test,y_pred3))\n","f99b2247":"from sklearn.model_selection import GridSearchCV\n\ngrid_params = {\n    'criterion' : ['gini', 'entropy'],\n    'max_depth' : [3, 5, 7, 10],\n    'min_samples_split' : range(2, 10, 1),\n    'min_samples_leaf' : range(2, 10, 1)\n}\n\ngrid_search = GridSearchCV(dtc, grid_params, cv = 5, n_jobs = -1, verbose = 1)\ngrid_search.fit(x_train, y_train)","1cfc0c9c":"grid_search.best_score_","6d1ec722":"y_pred4 = dtc.predict(x_test)\nacc4=accuracy_score(y_test,y_pred4)\naccuracies['DecisionTreeClassifier']=acc4*100\nprint(\"Accuracy score of the model is:\",accuracy_score(y_test,y_pred4)*100,\"%\")\n\n","61f4c61e":"print(\"Confusion matrix of the model\",confusion_matrix(y_test,y_pred4))\n\nprint(\"Classification Report\",classification_report(y_test,y_pred4))","018fe07a":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier(criterion = 'gini', max_depth = 7, max_features = 'sqrt', min_samples_leaf = 2, min_samples_split = 4, n_estimators = 180)\nrfc.fit(x_train, y_train)\n\ny_pred5 = rfc.predict(x_test)\n\n\nacc5=accuracy_score(y_test,y_pred5)\naccuracies['RandomForestClassifier']=acc5*100\n\n\naccuracy_score(y_train,rfc.predict(x_train))\nprint(\"Accuracy score of the model is:\",accuracy_score(y_test,y_pred5)*100,\"%\")\n\n\n\n","81c22351":"print(\"Confusion matrix of the model\",confusion_matrix(y_test,y_pred5))\n\nprint(\"Classification Report\",classification_report(y_test,y_pred5))\n","d4aeb262":"from sklearn.ensemble import AdaBoostClassifier\n\nada = AdaBoostClassifier(base_estimator = dtc)\n\nparameters = {\n    'n_estimators' : [50, 70, 90, 120, 180, 200],\n    'learning_rate' : [0.001, 0.01, 0.1, 1, 10],\n    'algorithm' : ['SAMME', 'SAMME.R']\n}\n\ngrid_search = GridSearchCV(ada, parameters, n_jobs = -1, cv = 5, verbose = 1)\ngrid_search.fit(x_train, y_train)","299f41a5":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbc = GradientBoostingClassifier()\n\nparameters = {\n    'loss': ['deviance', 'exponential'],\n    'learning_rate': [0.001, 0.1, 1, 10],\n    'n_estimators': [100, 150, 180, 200]\n}\n\ngbc = GridSearchCV(gbc, parameters, cv = 5, n_jobs = -1, verbose = 1)\ngbc.fit(x_train, y_train)\n\ny_pred6 = gbc.predict(x_test)\n\nacc6=accuracy_score(y_test,y_pred6)\naccuracies['GradientBoosting']=acc5*100\nprint(\"Accuracy score of the model is:\",accuracy_score(y_test,y_pred6)*100,\"%\")\n\n","87f1e210":"print(\"Confusion matrix of the model\",confusion_matrix(y_test,y_pred6))\n\nprint(\"Classification Report\",classification_report(y_test,y_pred6))","8ad4a1e6":"from xgboost import XGBClassifier\n\nxgb = XGBClassifier(booster = 'gblinear', learning_rate = 1, max_depth = 6, n_estimators = 10)\nxgb.fit(x_train, y_train)\n\ny_pred7 = xgb.predict(x_test)\n\nacc7=accuracy_score(y_test,y_pred7)\naccuracies['XGBClassifier']=acc6*100\nprint(\"Accuracy score of the model is:\",accuracy_score(y_test,y_pred7)*100,\"%\")\n\nprint(\"Confusion matrix of the model\",confusion_matrix(y_test,y_pred7))\n\nprint(\"Classification Report\",classification_report(y_test,y_pred7))","fefa2f8e":"colors = [\"purple\", \"green\", \"orange\", \"magenta\",\"blue\",\"black\"]\n\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(16,8))\nplt.yticks(np.arange(0,1200,10))\nplt.ylabel(\"Accuracy %\")\nplt.xlabel(\"Algorithms\")\nsns.barplot(x=list(accuracies.keys()), y=list(accuracies.values()), palette=colors )\nplt.show()","e7c4e07c":"**2.KNearestNeighbors**","c02602c0":"Checking null values.","63c09d0c":"We can see ,there is a huge variance.So,we should normalise it.","2cc32163":" **Normalisation**","3f060455":"  <a id = '1.0'><\/a>\n<p style = \"font-size : 30px; color : #4e8d7c ; font-family : 'Comic Sans MS';  \"><strong>Data Description :-<\/strong><\/p>\n\n<ul>\n    <li style = \"color : #03506f; font-size : 18px; font-family : 'Comic Sans MS';\"><strong>age - age in years<\/strong><\/li>\n    <li style = \"color : #03506f; font-size : 18px; font-family : 'Comic Sans MS';\"><strong>sex - (1 = male; 0 = female)<\/strong><\/li>\n    <li style = \"color : #03506f; font-size : 18px; font-family : 'Comic Sans MS';\"><strong>cp - chest pain type<\/strong><\/li>\n    <li style = \"color : #03506f; font-size : 18px; font-family : 'Comic Sans MS';\"><strong>trestbps - resting blood pressure (in mm Hg on admission to the hospital)<\/strong><\/li>\n    <li style = \"color : #03506f; font-size : 18px; font-family : 'Comic Sans MS';\"><strong>chol - serum cholestoral in mg\/dl<\/strong><\/li>\n    <li style = \"color : #03506f; font-size : 18px; font-family : 'Comic Sans MS';\"><strong>fbs - (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)<\/strong><\/li>\n    <li style = \"color : #03506f; font-size : 18px; font-family : 'Comic Sans MS';\"><strong>restecg - resting electrocardiographic results<\/strong><\/li>\n    <li style = \"color : #03506f; font-size : 18px; font-family : 'Comic Sans MS';\"><strong>thalach - maximum heart rate achieved<\/strong><\/li>\n    <li style = \"color : #03506f; font-size : 18px; font-family : 'Comic Sans MS';\"><strong>exang - exercise induced angina (1 = yes; 0 = no)<\/strong><\/li>\n    <li style = \"color : #03506f; font-size : 18px; font-family : 'Comic Sans MS';\"><strong>oldpeak - ST depression induced by exercise relative to rest<\/strong><\/li>\n     <li style = \"color : #03506f; font-size : 18px; font-family : 'Comic Sans MS';\"><strong>slope - the slope of the peak exercise ST segment<\/strong><\/li>\n     <li style = \"color : #03506f; font-size : 18px; font-family : 'Comic Sans MS';\"><strong>ca - number of major vessels (0-3) colored by flourosopy<\/strong><\/li>\n     <li style = \"color : #03506f; font-size : 18px; font-family : 'Comic Sans MS';\"><strong>thal - 3 = normal; 6 = fixed defect; 7 = reversable defect<\/strong><\/li>\n     <li style = \"color : #03506f; font-size : 18px; font-family : 'Comic Sans MS';\"><strong>target - have disease or not (1=yes, 0=no)<\/strong><\/li>\n<\/ul>\n","727ee18e":"**Boosting**","8f8f8812":"<p style = \"font-size : 50px; color :#A52A2A ; font-family : 'Comic Sans MS'; text-align : center; background-color :#008B8B; border-radius: 5px 5px;\"><strong>Heart Disease Classification<\/strong><\/p>\n\n\n![image.png](attachment:7b0046f3-b2c4-44b3-ae6d-1ef722d9f5d3.png) \n\n\n","56776ee8":"**3.SVC**","6234f298":"**Exploratory Data Analysis(EDA)**","97ded211":"**5.RandomForestClassifier**","9e0484b4":"**4.DecisionTreeClassifier**","a64cb431":"**1.Logistic Regression**"}}