{"cell_type":{"15451060":"code","aaa199f4":"code","0197ae4f":"code","b451d69c":"code","8c50622b":"code","a08b082a":"markdown","11af9021":"markdown","a43745ac":"markdown","ae351a9d":"markdown","209d99f4":"markdown"},"source":{"15451060":"from matplotlib.pyplot import axes, cm, figure, imshow, savefig, subplots, suptitle, title\nfrom numpy             import log\nfrom pydicom           import dcmread\nfrom os                import sep, walk\nfrom os.path           import join, normpath\nfrom pandas            import DataFrame, read_csv\nfrom random            import choice, sample","aaa199f4":"class Hyperparameter:\n    N = 12              # Maximum records while testing       ","0197ae4f":"# Study\n#\n# This class represents the data from one MRI Study\n\nclass Study:\n    FLAIR = 0\n    T1w   = 1\n    T1wCE = 2\n    T2w   = 3\n    \n    series_id = { 'FLAIR' : FLAIR,\n                  'T1w'   : T1w,\n                  'T1wCE' : T1wCE,\n                  'T2w'   : T2w}\n           \n    def __init__(self,image_id):\n        self.image_id = image_id\n        self.series   = [[], [], [], []]\n     \n    # add\n    #\n    # Add one file to specified series\n    \n    def add(self,series_id,path):\n        self.series[series_id].append(path)\n    \n    # compress\n    #\n    # Remove files that consist of empty images from all series\n    #\n    # See https:\/\/www.kaggle.com\/c\/rsna-miccai-brain-tumor-radiogenomic-classification\/discussion\/252968\n    \n    def compress(self):\n        def non_empty(path):\n            return dcmread(path).pixel_array.sum()>0\n        \n        for i in range(len(self.series)):\n            self.series[i] = [path for path in self.series[i] if non_empty(path)]\n        \n        \n    def length(self):\n        return [len(series) for series in self.series]\n\n        \n# parse_path\n#\n# Determine whether a file is test or training\n\ndef parse_path(path):\n    train     = 0\n    test      = 0\n    image_id  = None\n    series_id = None\n    for folder in normpath(path).split(sep):\n        if folder in Study.series_id:\n            series_id = Study.series_id[folder]\n        train += folder=='train'\n        test  += folder=='test'\n        if folder.isnumeric() and image_id == None:\n            image_id = folder\n    return path,train>0,test>0,image_id,series_id\n\n# get_seq\n#\n# Extract sequence from file name, used to sort images\n\ndef get_seq(filename):\n    base  = filename.split('.') # base -- Image-13.dcm -> Image-13\n    parts = base[0].split('-')  # split into forst part + sequence\n    try:\n        return int(parts[-1])\n    except ValueError:\n        return filename\n    \ntrain_labels    = None # Targets for training\ntraining_agenda = {}   # Data that needs to be processed for training\ntesting_agenda  = {}   # Data that needs to be processed for testing\n\nfor dirname, _, filenames in walk('\/kaggle\/input'):\n    for filename in sorted(filenames,key=get_seq):\n        full_path = join(dirname, filename)\n        if filename == 'train_labels.csv':\n            train_labels = read_csv(full_path,dtype={'BraTS21ID':str})\n        path,train,test,image_id,series_id = parse_path(full_path)\n        if train:\n            if image_id not in training_agenda:\n                training_agenda[image_id]= Study(image_id)\n            training_agenda[image_id].add(series_id,path)\n        if test:\n            if image_id not in testing_agenda:\n                testing_agenda[image_id]= Study(image_id)\n            testing_agenda[image_id].add(series_id,path)\n  \n    ","b451d69c":"# plot_study\n#\n# Display all images in study\n\ndef plot_study(study, series_name='FLAIR',ncols = 8,threshold=10):\n    series_id = Study.series_id[series_name]\n    series    = study.series[series_id]\n    nrows     = (len(series) + ncols - 1)\/\/ncols\n    fig,axs   = subplots(nrows=nrows,ncols=ncols,figsize=(20,20*nrows\/ncols))\n    for i in range(nrows):\n        for j in range(ncols):\n            k = i * ncols + j\n            if k<len(series):\n                dcim = dcmread(series[k])\n            axs[i][j].imshow(dcim.pixel_array, cmap=cm.gray)\n            axs[i][j].axes.xaxis.set_visible(False)\n            axs[i][j].axes.yaxis.set_visible(False)\n            axs[i][j].axis('tight')\n\n    suptitle(f'Study {study.image_id}, series {series_name}')\n    fig.tight_layout()\n    fig.subplots_adjust(top=0.95) # https:\/\/stackoverflow.com\/questions\/39331143\/huge-space-between-title-and-plot-matplotlib\n    title(dcim.PatientID)\n    study_id = list(training_agenda.keys())[0]\n  \n# study.compress()\nstudy_id = list(training_agenda.keys())[0]\nstudy    = training_agenda[study_id]\n\nfor series_name in Study.series_id.keys():\n     plot_study(study, series_name=series_name)\n\n","8c50622b":"data        = [[image_id,0 if choice(range(287+307))<287 else 1] for image_id in testing_agenda.keys()]\nxsubmission = DataFrame(data,columns=['BraTS21ID','MGMT_value'])\nxsubmission.to_csv('submission.csv', index = False)","a08b082a":"## Plot stuff\n\n1. Verify that I can read and plot an image\n2. Establish criteria for identifying that in image is blank","11af9021":"## Save submission\n\nThis is just a stub to verify that I can write submission in the correct format. I'm going to assign MGMT values using the probability of 0 or 1 established from the training dataset. ","a43745ac":"## Build list of datasets to process\n\n### Data model\n\nThe training and test datasets each consist of a collection of _studies_ each for a single patient; a study is identified by a _label_ consisting of 5 digits.  Each study has a _label_, and the objective is to make a prediction for each label (or study)--[David Roberts](https:\/\/www.kaggle.com\/c\/rsna-miccai-brain-tumor-radiogenomic-classification\/discussion\/252972#1387906).\nEach study contains 4 series--[Reuben Schmidt](https:\/\/www.kaggle.com\/c\/rsna-miccai-brain-tumor-radiogenomic-classification\/discussion\/252972#1388006)\n\n- Fluid Attenuated Inversion Recovery (FLAIR)\n- T1-weighted pre-contrast (T1w)\n- T1-weighted post-contrast (T1wCE)\n- T2-weighted (T2w)\n\n>in T2 images water is bright, and in T1 images fat is bright. In FLAIR, cerebrospinal fluid is dark but the rest of the image looks like T2\n","ae351a9d":"# First Spike\n\nThis is a [spike solution](https:\/\/proxy.c2.com\/cgi\/wiki?SpikeSolution) to verify that I can achieve a few technical objectives.\n## Objectives\n\n**Description** | **Status** | **Remarks**\n----------------------------------|--------|--------------------------------------\nRead and plot data|OK|\nVerify that I can write a submission.csv|OK|See section 'Save Submission'\nUnderstand how all the images for one patient fit together|WIP|\nUnderstand whether there is a 1 to 1 correspondence between the 4 series for one study|OK|The lengths of the 4 series for study 00688 are 196, 214, 214, 376. After removing blank images they are 160, 140, 139, 279. So it looks as if there is _not_ a 1 to 1 correspondence.\nUnderstand metadata|Closed|[Show Patient Trajectories](https:\/\/www.kaggle.com\/weka511\/show-patient-trajectories)\n","209d99f4":"## Hyperparameters"}}