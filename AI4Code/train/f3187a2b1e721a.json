{"cell_type":{"95ad6ab3":"code","55503cd0":"code","4f827e49":"code","04a55194":"code","0e45748d":"code","b40bbf54":"code","f5aeb455":"code","8ae0f667":"code","6aaad50c":"code","79cd4065":"code","181ec4ed":"code","97b82596":"code","fa96b4c0":"code","9165f9f2":"code","bbb5088c":"code","877ab182":"code","96e9135b":"code","ab485baa":"code","fddb4692":"code","8fdfa1f3":"code","105e684e":"markdown","991d3d26":"markdown","a746327a":"markdown","5bd08ec9":"markdown","d0f536c0":"markdown","11d86883":"markdown","873fc589":"markdown","7ea22fb1":"markdown","f0ff7275":"markdown","5818b927":"markdown","6680c568":"markdown","284359e7":"markdown","aa97f5f6":"markdown","0270690f":"markdown","6ca9ed19":"markdown","2c739c90":"markdown"},"source":{"95ad6ab3":"# Data Manipulation and Linear Algebra\nimport pandas as pd\nimport numpy as np\n\n# Plots\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nimport matplotlib.pyplot as plt\n\n# Machine Learning\nfrom sklearn.model_selection import StratifiedShuffleSplit, cross_val_score, cross_val_predict\nfrom sklearn.metrics import accuracy_score, confusion_matrix, precision_recall_curve\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn import linear_model, neighbors, ensemble, tree\n\n#ignore warning messages \nimport warnings\nwarnings.filterwarnings('ignore')","55503cd0":"data = pd.read_csv(\"..\/input\/clothessizeprediction\/final_test.csv\")\ndata","4f827e49":"data.isnull().sum()","04a55194":"data[[\"size\"]].value_counts()","0e45748d":"plt.figure(figsize=(10, 6), dpi=80)\nsns.countplot(y=data[\"size\"])\nplt.show()","b40bbf54":"data[data[\"size\"] == \"XXL\"].isnull().sum()","f5aeb455":"data.dropna(inplace=True)\ndata.isnull().sum()","8ae0f667":"data.reset_index(drop=True, inplace=True)","6aaad50c":"fig, axes = plt.subplots(figsize=(20, 10), nrows=3, ncols=3)\n\ncolors = [\"#5bde54\",\"#de5454\", \"#db53d5\"]\n\n# Histograms\ncol_no = 0\nfor col in data.columns[:-1]:\n    sns.histplot(x=col, data=data, ax=axes[0, col_no], bins=20, color=colors[col_no])\n    sns.kdeplot(x=col, data=data, ax=axes[1, col_no], color=colors[col_no])\n    sns.boxplot(x=col, data=data, ax=axes[2, col_no], color=colors[col_no])\n    col_no += 1","79cd4065":"data[\"size\"].value_counts()","181ec4ed":"labels = list(data[\"size\"].value_counts().index)\n\nplt.figure(figsize=(6, 8), dpi=80)\nplt.pie(data[\"size\"].value_counts(), autopct='%.1f%%', labels=labels)\nplt.title(\"Distribution of Size\")\nplt.show()","97b82596":"plt.figure(figsize=(8, 6), dpi=80)\nsns.heatmap(data.corr(), annot=True)\nplt.show()","fa96b4c0":"scaler = StandardScaler()\n\ndata.iloc[:, :3] = scaler.fit_transform(data.iloc[:, :3])\ndata","9165f9f2":"split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\nfor train_index, test_index in split.split(data, data['size']):\n    train = data.loc[train_index]\n    test = data.loc[test_index]","bbb5088c":"train.shape, test.shape","877ab182":"X_train = train.drop(\"size\", axis=1)\ny_train = train[\"size\"]\n\nX_test = test.drop(\"size\", axis=1)\ny_test = test[\"size\"]","96e9135b":"MLA_compare = pd.DataFrame()\n\ndef MLA_testing(MLA, X_train, X_test):\n    row_index = 0\n    for classifier in MLA:\n        # Training The Model\n        classifier.fit(X_train, y_train)\n\n        # KFold Accuracies on Training Data\n        kfold_accuracy = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10, n_jobs=-1)\n        \n        # Prediction on Testing Data\n        y_pred = cross_val_predict(estimator = classifier, X = X_test, y = y_test, cv = 10, n_jobs=-1)\n        \n        # Accuracy for y_test and y_pred\n        classifier_accuracy_score = accuracy_score(y_test, y_pred)\n\n        # Saving Data in Dataframe\n        MLA_name = classifier.__class__.__name__\n        MLA_compare.loc[row_index, 'MLA Name'] = MLA_name\n        MLA_compare.loc[row_index, 'Accuracy Score'] = classifier_accuracy_score*100\n        MLA_compare.loc[row_index, 'K-Fold Accuracy'] = kfold_accuracy.mean()*100\n\n        print(MLA_name, \"Done\")\n        row_index+=1","ab485baa":"MLA = [\n    #Ensemble Methods\n    ensemble.AdaBoostClassifier(),\n    ensemble.RandomForestClassifier(n_jobs=-1),\n    \n    #GLM\n    linear_model.RidgeClassifierCV(),\n    linear_model.SGDClassifier(n_jobs=-1),\n\n    \n    #Nearest Neighbor\n    neighbors.KNeighborsClassifier(n_jobs=-1),\n    \n    #Trees    \n    tree.DecisionTreeClassifier(),\n    tree.ExtraTreeClassifier(),\n]\n\nMLA_testing(MLA=MLA, X_train=X_train, X_test=X_test)","fddb4692":"MLA_compare = MLA_compare.sort_values(by=\"Accuracy Score\", ascending=False).reset_index(drop=True)\nMLA_compare","8fdfa1f3":"xgb_clf = ensemble.RandomForestClassifier(n_jobs=-1)\n\n# Training the XGBClassifier\nxgb_clf.fit(X_train, y_train)\n\n# KFold Accuracy Score\nkfold_accuraies = cross_val_score(xgb_clf, X_train, y_train, cv=10, n_jobs=-1)\nprint(\"KFold Accuracies:\", kfold_accuraies)\nprint(\"Mean KFold Accuracy:\", kfold_accuraies.mean())\n\n# Predicting Size for Testing Data\ny_pred = cross_val_predict(xgb_clf, X_test, y_test, cv=10, n_jobs=-1)\nprint(y_pred)\n\n# Accuracy Score\nprint(\"Accuracy Score:\", accuracy_score(y_test, y_pred))\n\n# Confusion Matrix\nplt.figure(figsize=(12, 8), dpi=80)\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt=\"d\")\nplt.show()","105e684e":"# Preparing Data","991d3d26":"# Using RandomForestClassifier","a746327a":" - As You can observe from Box Plot there are a lot of outliers \n - Weight and Age of People is right skewed","5bd08ec9":"## Comparing Models","d0f536c0":"# Machine Learning - Multiple Model Testing","11d86883":"# Preprocessing","873fc589":"## Stratified Train Test Split\n### Evenly Spreading the Dependent Variable \"size\" in train and test set","7ea22fb1":"## Checking for null values for XXL size","f0ff7275":"## Checking for Null values","5818b927":"## Scaling Data","6680c568":"# Loading Data","284359e7":"## Dropping Records with Null Values\n#### Since we have a lot of data we can safely drop records with null values","aa97f5f6":"# Import Necessary Libraries","0270690f":"## Dataframe to store all the accuracy scores for Comparison and Analysis","6ca9ed19":"## Reseting the Index","2c739c90":"# EDA"}}