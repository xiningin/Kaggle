{"cell_type":{"076ecdaf":"code","0d9613f0":"code","65dcbc04":"code","d9a35540":"code","728b5719":"code","171a303d":"code","c4c030e2":"code","efd5c693":"code","175dbe86":"code","378e0d5c":"code","16e1f4db":"code","ecdd768f":"code","2db475d5":"code","eee3d0a3":"code","2ba44023":"code","8c6d84ba":"markdown","33adb3ca":"markdown","378ff45f":"markdown","78375082":"markdown"},"source":{"076ecdaf":"import numpy as np \nfrom sklearn.metrics import mean_squared_error\nimport pandas as pd  \n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d9613f0":"\ndf_train = pd.read_csv('..\/input\/neolen-house-price-prediction\/train.csv' , index_col = 'Id')\ndf_train = pd.DataFrame(df_train)\ny = df_train[['SalePrice']]\ndf_train.head(2)","65dcbc04":"fig , ax = plt.subplots(figsize=(10,10))\nsns.heatmap(df_train.corr(), ax =ax) ","d9a35540":"df_test = pd.read_csv('..\/input\/neolen-house-price-prediction\/test.csv', index_col = 'Id')\ndf_test = pd.DataFrame(df_test)\ndf_test.head(2)","728b5719":"#Now I want to know the percentage of the missing data in each coloumn\n\n\nnullvalues = df_train.isnull().sum().sort_values(ascending=False)\nper=100*(df_train.isnull().sum()\/len(df_train)).sort_values(ascending=False)\n\nmissingdata=pd.concat([nullvalues,per],axis=1,keys=[\"Null_No\",\"Percentage\"])\nmissingdata.head(10)  #remove columns with most null values","171a303d":"def predict(df):\n    \n    #drop these\n    df=df.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu','LotFrontage'],axis=1)\n    \n    #Split data to numerical\n    df_numeric = df.select_dtypes(exclude = ['object']) #numerical only\n    df_numeric = df_numeric.fillna(df_numeric.mean())\n    #Split data to catgrical\n    df_cat = df.select_dtypes(include = ['object']) #categorical only\n    \n    imputer = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\n    # start imputing\n    array = imputer.fit_transform(df_cat)\n    # convert to dataframe again\n    df_cat_impt = pd.DataFrame(array, columns=df_cat.columns)\n    \n    df_cat_impt.reset_index(drop=True, inplace=True)\n    df_numeric.reset_index(drop=True, inplace=True)\n    \n    for col in df_cat_impt.columns:\n        df_cat_impt[col] = LabelEncoder().fit_transform(df_cat_impt[col])  \n    \n        \n    df_total = pd.concat([df_cat_impt, df_numeric] , axis=1)\n    return df_total","c4c030e2":"ttrain = predict(df_train)\nttrain = ttrain.drop(['SalePrice'], axis = 1)\nttrain.head(3)\n","efd5c693":"ttrain.isnull().sum()","175dbe86":"ttest = predict(df_test)\nttest.head(3)","378e0d5c":"ttest.isnull().sum()","16e1f4db":"from sklearn.model_selection import train_test_split\nx_train, x_validation, y_train, y_validation = train_test_split(ttrain , y ,  train_size=0.6, test_size=0.4, random_state =20)\n\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)\n\nr_sq = model.score(x_train, y_train) #score train\nprint(r_sq*100, \"%\")\nprint('intercept:', model.intercept_)\n# print('slope:', model.coef_)\nprint('='*50)\n\n\nr_sq_val = model.score(x_validation, y_validation) #score validation\nprint(r_sq_val*100, \"%\")\n","ecdd768f":"y_predVAlidation = model.predict(x_validation)\ny_predVAlidation  = pd.DataFrame(y_predVAlidation , columns = [\"SalePrice\"])\n\n# y_predVAlidation.to_csv('submission.csv', index=False) \n\ny_predVAlidation  \n","2db475d5":"y_pred_test = pd.DataFrame(df_test.index)\ny_pred_test['SalePrice'] = model.predict(ttest)\n\n# y_pred_test  = pd.DataFrame(y_pred_test , columns = [\"SalePrice\"])\n\ny_pred_test.to_csv('submission.csv', index=False) \ny_pred_test","eee3d0a3":"def rmse(y_predVAlidation , y_validation):\n    return np.sqrt(mean_squared_error(y_validation, y_predVAlidation)) ","2ba44023":"RMSE = rmse(y_validation , y_predVAlidation)\nprint(\"Root mean squared error is\" ,RMSE)\n            ","8c6d84ba":"**TEST**","33adb3ca":"**TRAIN file***","378ff45f":"***VALIDATION***","78375082":"**TEST file**"}}