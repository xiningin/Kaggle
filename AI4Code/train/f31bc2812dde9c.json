{"cell_type":{"8c676997":"code","e7f51291":"code","b47a5388":"code","b996f59e":"code","51df67f0":"code","4fb2513a":"code","2042cd65":"code","dfc38f12":"code","a7a0d1bb":"code","7297807e":"code","d712f531":"code","9424919b":"code","512e6f12":"code","33dfed0e":"code","75a40b70":"code","898b43a2":"code","55fe9351":"code","c4ec5e61":"code","dda44013":"code","1c20aa79":"code","e5b53017":"code","1a342a13":"markdown","fe915b6e":"markdown","05a3948f":"markdown","efec9bef":"markdown"},"source":{"8c676997":"!pip install mlens","e7f51291":"import numpy as np\nimport pandas as pd\n\nimport os\n\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.pipeline import Pipeline\nfrom mlens.ensemble import SuperLearner\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom mlens.metrics import make_scorer\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b47a5388":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b996f59e":"# Read in the data \ntrain_path = '\/kaggle\/input\/learn-together\/train.csv'\ntest_path = '\/kaggle\/input\/learn-together\/test.csv'\n\nX = pd.read_csv(train_path, index_col=\"Id\")\nX_test = pd.read_csv(test_path, index_col=\"Id\")\n\nX[\"Euc_Dist_to_Hyd\"] = np.sqrt((X[\"Horizontal_Distance_To_Hydrology\"].pow(2)+X[\"Vertical_Distance_To_Hydrology\"].pow(2)))\nX_test[\"Euc_Dist_to_Hyd\"] = np.sqrt((X_test[\"Horizontal_Distance_To_Hydrology\"].pow(2)+X_test[\"Vertical_Distance_To_Hydrology\"].pow(2)))\n\nX_test.head()","51df67f0":"def plot_pretty_corr(df):\n    plt.figure(figsize=(12, 12))\n    corr = df.corr()\n    ax = sns.heatmap(corr,\n                    vmin=-1,\n                    vmax=1,\n                    center=0,\n                    cmap=sns.diverging_palette(20, 220, n=200),\n        square=True\n    )\n    ax.set_xticklabels(\n        ax.get_xticklabels(),\n        rotation=45,\n        horizontalalignment='right'\n    );","4fb2513a":"non_binary_cols = ['Elevation', 'Aspect', 'Slope',\n       'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology',\n       'Horizontal_Distance_To_Roadways', 'Hillshade_9am', 'Hillshade_Noon',\n       'Hillshade_3pm', 'Horizontal_Distance_To_Fire_Points','Cover_Type', 'Euc_Dist_to_Hyd']\nplot_pretty_corr(X[non_binary_cols])","2042cd65":"# There are no missing values in the training set, all categorical fields have already been transformed\n# We can go ahead and separate target from predictors\ny = X.Cover_Type\nX.drop(['Cover_Type', 'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology'], axis=1, inplace=True)\nX_test.drop(['Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology'], axis=1, inplace=True)\n\n# Break off validation set from training data\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2, random_state=0)","dfc38f12":"y.value_counts()","a7a0d1bb":"# def get_score(n_estimators):\n#     \"\"\"Return the average MAE over 3 CV folds of random forest model.\n#     \"\"\"\n#     my_pipeline = Pipeline(steps=[\n#     ('model', XGBClassifier(n_estimators=n_estimators, random_state=0, learning_rate=0.05))])\n#     scores = cross_val_score(my_pipeline, X, y,\n#                               cv=3,\n#                               scoring='accuracy')\n\n#     print(\"Average Accuracy:\", scores.mean())\n#     return scores.mean()","7297807e":"# n_estimators_param = list(range(200, 1000, 200))\n# scores = [get_score(n) for n in n_estimators_param]\n# results = dict(zip(n_estimators_param, scores))\n# print(results)","d712f531":"# XGBoost\n# parameters\n# n_estimators=1000\n# learning_rate=0.05\nmy_model = XGBClassifier(random_state=0, n_estimators=200, learning_rate=0.05)\nmy_model.fit(X_train, y_train)\npredictions = my_model.predict(X_valid)\naccuracy_score(y_valid, predictions)","9424919b":"# Train on entire dataset for submission\nmy_model = XGBClassifier(random_state=1, n_estimators=300, learning_rate=0.05)\nmy_model.fit(X, y)","512e6f12":"# Train on entire dataset for submission\nmy_model = XGBClassifier(random_state=1, n_estimators=300, learning_rate=0.05)\nmy_model.fit(X, y)","33dfed0e":"# Train on entire dataset for submission\nmy_model = XGBClassifier(random_state=1, n_estimators=300, learning_rate=0.05)\nmy_model.fit(X, y)","75a40b70":"# Save predictions to a csv for submission\npreds_test = my_model.predict(X_test)\noutput = pd.DataFrame({'Id': X_test.index,\n                       'Cover_Type': preds_test})\noutput.to_csv('submission.csv', index=False)","898b43a2":"def feature_importances(my_model, X, y, figsize=(18, 6)):\n    \n    importances = pd.DataFrame({'Features': X.columns, \n                                'Importances': my_model.feature_importances_})\n    \n    importances.sort_values(by=['Importances'], axis='index', ascending=False, inplace=True)\n\n    fig = plt.figure(figsize=figsize)\n    sns.barplot(x='Features', y='Importances', data=importances)\n    plt.xticks(rotation='vertical')\n    plt.show()\n    \nfeature_importances(my_model, X, y)","55fe9351":"seed = 2017\nnp.random.seed(seed)\n# --- Build ---\n# Passing a scoring function will create cv scores during fitting\n# the scorer should be a simple function accepting to vectors and returning a scalar\nensemble = SuperLearner(scorer=accuracy_score, random_state=seed, verbose=2)\n\n# Build the first layer\nensemble.add([RandomForestClassifier(random_state=seed), LogisticRegression(), GaussianNB(), KNeighborsClassifier()])\n\n# Build the second layer\nensemble.add([LogisticRegression(), SVC()])\n\n# Attach the final meta estimator\nensemble.add_meta(SVC())\n\n# --- Use ---\n\n# Fit ensemble\nensemble.fit(X_train, y_train)\n\n# Predict\npreds = ensemble.predict(X_valid)","c4ec5e61":"print(\"Fit data:\\n%r\" % ensemble.data)","dda44013":"accuracy_scorer = make_scorer(accuracy_score, greater_is_better=True)","1c20aa79":"# Fit ensemble\nensemble.fit(X, y)\n\n# Predict\npreds = ensemble.predict(X_test)\n\noutput = pd.DataFrame({'Id': X_test.index,\n                       'Cover_Type': preds})\noutput['Cover_Type'] = output['Cover_Type'].astype(int)\noutput.to_csv('submission.csv', index=False)","e5b53017":"print(output)","1a342a13":"# Import Packages","fe915b6e":"# Pipeline\n\n* Helper function to get accuracy using Cross Validation\n* Helper function to fit multiple different types of classifiers and compare their performance\n    * KNeighborsClassifier\n    * GaussianNB\n    * Random Forest\n    * Logistic Regression\n    * Bagging\n    * AdaBoostClassifier [x](https:\/\/github.com\/vsmolyakov\/experiments_with_python\/blob\/master\/chp01\/ensemble_methods.ipynb)\n* Stacked model","05a3948f":"# Introduction\n## Competition Description\nIn this notebook, we will predict what types of trees there are in an area based on various geographic features.\n\nThe datasets come from a study conducted in four wilderness areas within the beautiful Roosevelt National Forest of northern Colorado. These areas represent forests with very little human disturbances \u2013 the existing forest cover types there are more a result of ecological processes rather than forest management practices.\n\nThe data is in raw form and contains categorical data such as wilderness areas and soil type.\n\n## Acknowledgements:\n\nBache, K. & Lichman, M. (2013). UCI Machine Learning Repository. Irvine, CA: University of California, School of Information and Computer Science","efec9bef":"# File and Data Field Descriptions\n| File Name | Description |\n|--------------|-------------|\n| train.csv | the training set |\n| test.csv | the test set |\n| sample_submission.csv | a benchmark submission |\n\n\nThe study area includes four wilderness areas located in the Roosevelt National Forest of northern Colorado. Each observation is a 30m x 30m patch. The seven forest cover types are:\n\n| Integer Classification | Description |\n|--------------|-------------|\n| 1 | Spruce\/Fir |\n| 2 | Lodgepole Pine |\n| 3 | Ponderosa Pine |\n| 4 | Cottonwood\/Willow |\n| 5 | Aspen |\n| 6 | Douglas-fir |\n| 7 | Krummholz |\n\n\nThe data fields are:\n\n| Field Name | Description | Data Type |\n|--------------|-------------|-------------|\n| Elevation | Elevation in meters | Integer |\n| Aspect | Aspect in degrees azimuth | Integer |\n| Slope | Slope in degrees | Integer |\n| Horizontal_Distance_To_Hydrology | Horz Dist to nearest surface water features | Integer |\n| Vertical_Distance_To_Hydrology | Vert Dist to nearest surface water features | Integer |\n| Horizontal_Distance_To_Roadways | Horz Dist to nearest roadway | Integer |\n| Hillshade_9am | Hillshade index at 9am, summer solstice | Integer -> 0 to 255 index |\n| Hillshade_Noon | Hillshade index at noon, summer solstice | Integer -> 0 to 255 index |\n| Hillshade_3pm  | Hillshade index at 3pm, summer solstice | Integer -> 0 to 255 index |\n| Horizontal_Distance_To_Fire_Points  | Horz Dist to nearest wildfire ignition points | Integer |\n| Wilderness_Area  | Wilderness area designation | Categorical -> 4 binary columns |\n| Soil_Type  | Soil Type designation | Categorical -> 40 binary columns |\n| Cover_Type  | Forest Cover Type designation | Categorical |\n\n\nThe wilderness areas are:\n\n\n| Integer Classification | Description |\n|--------------|-------------|\n| 1 | Rawah Wilderness Area |\n| 2 | Neota Wilderness Area |\n| 3 | Comanche Peak Wilderness Area |\n| 4 | Cache la Poudre Wilderness Area |\n\n\nThe soil types are:\n\n\n| Integer Classification | Category Description |\n|--------------|-------------|\n| 1 | Cathedral family - Rock outcrop complex, extremely stony. |\n| 2 | Vanet - Ratake families complex, very stony. |\n| 3 | Haploborolis - Rock outcrop complex, rubbly. |\n| 4 | Ratake family - Rock outcrop complex, rubbly. |\n| 5 | Vanet family - Rock outcrop complex complex, rubbly. |\n| 6 | Vanet - Wetmore families - Rock outcrop complex, stony. |\n| 7 | Gothic family. |\n| 8 | Supervisor - Limber families complex. |\n| 9 | Troutville family - very stony. |\n| 10 | Bullwark - Catamount families - Rock outcrop complex, rubbly. |\n| 11 | Bullwark - Catamount families - Rock land complex, rubbly. |\n| 12 | Legault family - Rock land complex, stony. |\n| 13 | Catamount family - Rock land - Bullwark family complex, rubbly. |\n| 14 | Pachic Argiborolis - Aquolis complex. |\n| 15 | unspecified in the USFS Soil and ELU Survey. |\n| 16 | Cryaquolis - Cryoborolis complex. |\n| 17 | Gateview family - Cryaquolis complex. |\n| 18 | Rogert family - very stony. |\n| 19 | Typic Cryaquolis - Borohemists complex. |\n| 20 | Typic Cryaquepts - Typic Cryaquolls complex. |\n| 21 | Typic Cryaquolls - Leighcan family, till substratum complex. |\n| 22 | Leighcan family - till substratum, extremely bouldery. |\n| 23 | Leighcan family - till substratum - Typic Cryaquolls complex. |\n| 24 | Leighcan family - extremely stony. |\n| 25 | Leighcan family - warm, extremely stony. |\n| 26 | Granile -Catamount families complex, very stony. | \n| 27 | Leighcan family, warm Rock outcrop complex, extremely stony. |\n| 28 | Leighcan family - Rock outcrop complex, extremely stony. |\n| 29 | Como - Legault families - complex, extremely stony. |\n| 30 | Como family - Rock land - Legault family complex, extremely stony. |\n| 31 | Leighcan - Catamount families complex, extremely stony. |\n| 32 | Catamount family - Rock outcrop - Leighcan family complex, extremely stony. |\n| 33 | Leighcan - Catamount families - Rock outcrop complex, extremely stony. |\n| 34 | Cryorthents - Rock land complex, extremely stony. |\n| 35 | Cryumbrepts - Rock outcrop - Cryaquepts complex. |\n| 36 | Bross family - Rock land - Cryumbrepts complex, extremely stony. |\n| 37 | Rock outcrop- Cryumbrepts - Cryorthents complex, extremely stony. |\n| 38 | Leighcan - Moran families - Cryaquolls complex, extremely stony. |\n| 39 | Moran family - Cryorthents - Leighcan family complex, extremely stony. |\n| 40 | Moran family - Cryorthents - Rock land complex, extremely stony. |"}}