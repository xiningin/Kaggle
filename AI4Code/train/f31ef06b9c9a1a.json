{"cell_type":{"ad2d635b":"code","0c95dfa1":"code","cc928e5f":"code","b1220721":"code","4fb4d2e0":"code","02bf1b76":"code","ec9481cc":"code","80b18ae7":"code","522b6a65":"code","36a3e538":"markdown","f6b773ff":"markdown","c3d9b6b9":"markdown","d11b727a":"markdown","fb5fd25d":"markdown","056a8ac9":"markdown"},"source":{"ad2d635b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c95dfa1":"df = pd.read_csv(\"\/kaggle\/input\/flipkart-mobile-dataset\/Flipkart Mobile.csv\")\ndf.head()","cc928e5f":"df.info()","b1220721":"grouped_brand =  df.groupby(['brand'],as_index=False).model.count()\nfrom matplotlib.pyplot import figure\nfigure(figsize=(10, 8), dpi=80)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.bar(grouped_brand['brand'], grouped_brand['model'])","4fb4d2e0":"grouped_color =  df.groupby(['base_color'],as_index=False).model.count()\nfrom matplotlib.pyplot import figure\nfigure(figsize=(10, 8), dpi=80)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.bar(grouped_color['base_color'], grouped_color['model'])","02bf1b76":"grouped_processor =  df.groupby(['processor'],as_index=False).model.count()\nfrom matplotlib.pyplot import figure\nfigure(figsize=(10, 8), dpi=80)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.bar(grouped_processor['processor'], grouped_processor['model'])","ec9481cc":"grouped_screen =  df.groupby(['screen_size'],as_index=False).model.count()\nfrom matplotlib.pyplot import figure\nfigure(figsize=(10, 8), dpi=80)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.bar(grouped_screen['screen_size'], grouped_screen['model'])","80b18ae7":"import seaborn as sns\nfigure(figsize=(10, 8), dpi=80)\nsns.kdeplot(df['battery_capacity'])","522b6a65":"import seaborn as sns\nfigure(figsize=(10, 8), dpi=80)\nsns.histplot(df['ratings'])","36a3e538":"# Battery Capacity Density Plot","f6b773ff":"# Number of Mobiles based on the screen size","c3d9b6b9":"### Black and Blue dominating it easily.\n\n# Number of Mobiles based on the processor it uses","d11b727a":"# Ratings Histogram","fb5fd25d":"# Number of Mobiles in Each Brand","056a8ac9":"### Wow, didnt expect this. Number of realme mobiles greater than the number of samsung mobiles.\n\n# Number of Mobiles in Each Color"}}