{"cell_type":{"6e286755":"code","8ae0adce":"code","46e64e42":"code","7cc4f7b5":"code","43909ffd":"code","0af10c7d":"code","a99d8c63":"code","e1bfc951":"code","c68049db":"code","25cb979a":"code","c6092dec":"code","944c6fdb":"code","b178854d":"code","e5775fb7":"code","78341519":"code","030b9114":"code","a1ad9c30":"code","20496b48":"code","c8b376d3":"code","817891ca":"code","6c68786a":"code","f9741d77":"code","d520bcf8":"code","3d6de174":"code","a9413f4e":"code","c4a7bb8f":"code","2fbf07db":"code","8a2eb723":"code","bd16c59f":"code","dfb4759f":"code","f1e2788b":"code","48dd278f":"code","7c787c27":"code","84157ac7":"code","cdf95342":"code","b53e9733":"code","3b8fc273":"code","af04e175":"code","96fe7e36":"code","8586f5fc":"code","36e1aaec":"code","b7e9f17d":"code","6f5fb5b4":"code","4df16cb7":"code","7df44958":"code","6c131753":"code","ba21a220":"code","7214dd9c":"code","19254b23":"code","e3dc6591":"code","c177d904":"code","aa0df88c":"code","fb17619c":"code","69de61c4":"code","50d85f3e":"code","d18aa4a5":"code","e56f5f97":"code","0436d04d":"code","3f8bea54":"code","f717234a":"code","e0f785e0":"code","5a69a343":"code","5724108b":"code","b6eeecb2":"code","787d28c8":"code","0cc62d69":"code","4e3b37e9":"code","f828a62c":"code","9f76a2a0":"code","1c599c83":"code","e4ed76cc":"code","56ae905a":"code","648255fd":"markdown","18380679":"markdown","7e0a4180":"markdown","57f5e5e6":"markdown","8f5947f6":"markdown","837e42de":"markdown","24d3fbc6":"markdown","054a4174":"markdown","8bda4d5e":"markdown","bf9c02c8":"markdown","41813c82":"markdown","80cbcca4":"markdown","dd90d1ab":"markdown","8d42343f":"markdown","096ff5e1":"markdown","43eb8ef9":"markdown","34950eb4":"markdown","f02195b0":"markdown","bef56b5f":"markdown","a23a9bac":"markdown","ee568552":"markdown","e383c593":"markdown","ea4e6bfd":"markdown","e3bab853":"markdown","5874fae7":"markdown","78a26231":"markdown","058a626b":"markdown","9dbe8128":"markdown","47d4ddd7":"markdown","1f0c70bc":"markdown","39442d78":"markdown","a1acc00c":"markdown","7d65884d":"markdown","3eee98dc":"markdown","f0aeb1cd":"markdown","b8de4ffe":"markdown","e2043288":"markdown","0bd43c88":"markdown","5e7a93d4":"markdown","7bad9069":"markdown","2e40d375":"markdown","4b5cbb7f":"markdown","15d9872a":"markdown","fcdafcc3":"markdown"},"source":{"6e286755":"# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom IPython.display import Image\n\n# data analysis \/ manipulation\nimport numpy as np\nimport pandas as pd\nimport re\n\n# statistics\nfrom scipy import stats\n\n# machine learning\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.svm import LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score","8ae0adce":"test_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")","46e64e42":"combined_df = pd.concat([train_df, test_df])","7cc4f7b5":"train_df.head()","43909ffd":"train_df.describe(include = 'all')","0af10c7d":"train_df.isna().sum()","a99d8c63":"train_df.Name.unique().size","e1bfc951":"ax = sns.barplot(x = train_df.Sex.value_counts().index, y = train_df.Sex.value_counts().values)\nax.set(xlabel = 'Gender', ylabel = '# of Passengers per Gender', title = '# of Passengers per Gender')\nax.set_xticklabels(['Male','Female'])","c68049db":"ax = sns.barplot(x = train_df.Survived.value_counts().index, y = train_df.Survived.value_counts().values)\nax.set(xlabel = 'Survival', ylabel = '# of Passengers', title = 'Passenger Surviability from the Training Set')\nax.set_xticklabels(['Did Not Survive','Survived'])","25cb979a":"ax = sns.countplot(x = 'Survived', hue = 'Sex', data = train_df)\nax.set(xlabel = 'Survival', ylabel = '# of Passengers', title = 'Passenger Surviability from the Training Set')\nax.set_xticklabels(['Did Not Survive','Survived'])","c6092dec":"train_df['FamilySize'] = train_df['SibSp'] + train_df['Parch'] + 1 ","944c6fdb":"sns.countplot(train_df['FamilySize'])","b178854d":"ax = sns.distplot(train_df.Age)\nax.set(xlabel = 'Age', ylabel = '', title = 'Distribution of Passengers by Age')","e5775fb7":"ax = sns.distplot(train_df.Fare)\nax.set(xlabel = 'Fare (Shillings\/Pounds)', ylabel = 'Dist', title = 'Distribution of Passengers Fares')","78341519":"(train_df.Fare.max()\/91.1)*(91.1)","030b9114":"(train_df.Fare.max()\/91.1)*(126.06)","a1ad9c30":"adjusted = 708.94\/9.7\nadjusted","20496b48":"train_df['Fare_2020'] = train_df.Fare * adjusted","c8b376d3":"ax = sns.distplot(train_df.Fare_2020)\nax.set(xlabel = 'Fare (\u00a3)', ylabel = 'Dist', title = 'Distribution of Passengers Fare (2020 Prices)')","817891ca":"train_df.loc[train_df.Fare_2020.idxmax()]","6c68786a":"facet = sns.FacetGrid(train_df, hue = 'Survived', height = 10)\nfacet.map(sns.distplot, 'Age', bins = 20)\nfacet.set(xlim = (0, train_df['Age'].max()))\nfacet.add_legend()","f9741d77":"sns.violinplot(x = 'Pclass', y = 'Age', hue = 'Survived', data = train_df, split = True)","d520bcf8":"ax = sns.barplot(x = train_df.Embarked.value_counts().index, y = train_df.Embarked.value_counts().values)\nax.set(xlabel = 'Point of Embarkment', ylabel = '# of Passengers', title = '# of Passengers Embarked at Location Specified')\nax.set_xticklabels(['Southampton','Cherbourg','Queenstown'])","3d6de174":"fg = sns.FacetGrid(train_df, row = 'Embarked')\nfg.map(sns.pointplot, 'Pclass','Survived','Sex')\nfg.add_legend()","a9413f4e":"gender_age = train_df[['Age','Sex','Survived']]","c4a7bb8f":"gender_age.dropna(inplace = True)","2fbf07db":"gender_dummies = pd.get_dummies(gender_age['Sex'])\ngender_dummies","8a2eb723":"gender_age_dummies = gender_age.join(gender_dummies)\ngender_age_dummies","bd16c59f":"survival_gender = gender_age_dummies.groupby('Survived')[['female','male']].mean()\nsurvival_gender","dfb4759f":"sns.heatmap(survival_gender, annot = True, cmap = \"YlGnBu\")","f1e2788b":"combined_df['Titles'] = combined_df.Name.str.extract(' ([A-Za-z]+)\\.', expand = False)","48dd278f":"min_count = 10\ntitle_names = (combined_df['Titles'].value_counts() < min_count)","7c787c27":"\ncombined_df['Titles'].value_counts()","84157ac7":"combined_df['Titles'] = combined_df['Titles'].apply(lambda x: 'Other' if title_names.loc[x] == True else x)","cdf95342":"combined_df['Titles'].value_counts()","b53e9733":"sns.factorplot('Titles', 'Survived', data = combined_df)","3b8fc273":"# combined_df.drop(columns = 'PassengerId', inplace = True)","af04e175":"sns.heatmap(combined_df.corr(), annot = True)","96fe7e36":"combined_df['Age'] = combined_df.groupby('Pclass')['Age'].transform(lambda x: x.fillna(x.median()))","8586f5fc":"combined_df.isna().sum()","36e1aaec":"combined_df['Fare'].fillna(combined_df['Fare'].mode()[0], inplace = True)","b7e9f17d":"combined_df.isna().sum()","6f5fb5b4":"print(train_df.info())\nprint(\"----------------\")\nprint(test_df.info())","4df16cb7":"combined_df.head()","7df44958":"title_category = {'Mr':1, 'Miss':2, 'Mrs':3, 'Master':4, 'Other':5}\n\ncombined_df['Titles'] = combined_df['Titles'].map(title_category)\n\ncombined_df.head()","6c131753":"gender_category = {\"male\": 0, \"female\": 1}\n\ncombined_df['Sex'] = combined_df['Sex'].map(gender_category)\n\ncombined_df.head()","ba21a220":"embarkment_category = {\"S\": 0, \"C\": 1, \"Q\": 2}\n\ncombined_df['Embarked'] = combined_df['Embarked'].map(embarkment_category)\n\ncombined_df.head()","7214dd9c":"combined_df['Embarked'].fillna(method = 'bfill', inplace = True)","19254b23":"combined_df.isna().sum()","e3dc6591":"combined_df['FamilySize'] = combined_df['SibSp'] + combined_df['Parch'] + 1","c177d904":"combined_df = combined_df.drop(columns = ['SibSp','Parch','Ticket','Name','Cabin'])","aa0df88c":"combined_df['Fare'] = (combined_df['Fare'] - combined_df['Fare'].mean())\/(combined_df['Fare'].max() - combined_df['Fare'].min())","fb17619c":"combined_df['Age'] = (combined_df['Age'] - combined_df['Age'].mean())\/(combined_df['Age'].max() - combined_df['Age'].min())","69de61c4":"test = combined_df[combined_df['Survived'].isna()].drop(['Survived'], axis = 1)","50d85f3e":"test.head()","d18aa4a5":"train = combined_df[combined_df['Survived'].notna()]","e56f5f97":"train['Survived'] = train['Survived'].astype(np.int8)","0436d04d":"train.isna().sum()","3f8bea54":"test.shape","f717234a":"X_train, X_test, y_train, y_test = train_test_split(train.drop(['Survived', 'PassengerId'], axis = 1), train['Survived'], test_size = 0.22, random_state = 42)","e0f785e0":"X_train.shape, y_train.shape, X_test.shape","5a69a343":"logreg = LogisticRegression()\n\nlogreg.fit(X_train, y_train)","5724108b":"y_pred = logreg.predict(X_test)","b6eeecb2":"logistic_acc = round(accuracy_score(y_pred, y_test)*100, 2)\nprint(logistic_acc)","787d28c8":"correl = pd.DataFrame(combined_df.columns.delete(0))\ncorrel.columns = ['Features']\ncorrel[\"Coefficient Estimate\"] = pd.Series(logreg.coef_[0])\ncorrel = correl.sort_values(by = 'Coefficient Estimate', ascending = False)\ncorrel = correl.astype({'Features': str, 'Coefficient Estimate': float})\ng = sns.pointplot(x = correl.Features, y = correl['Coefficient Estimate'], join = False)\ng.set_xticklabels(labels = correl.Features, rotation = 45)","0cc62d69":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, y_train)\ny_pred = decision_tree.predict(X_test)\ndecision_tree_acc = round(decision_tree.score(X_train, y_train)* 100, 2)\ndecision_tree_acc","4e3b37e9":"random_forest = RandomForestClassifier()\n\nrandom_forest.fit(X_train, y_train)\n\ny_pred = random_forest.predict(X_test)\n\nrandom_forest_accuracy = round(random_forest.score(X_train, y_train)*100,2)\n\nprint(random_forest_accuracy)","f828a62c":"guassian = GaussianNB()\nguassian.fit(X_train, y_train)\ny_pred = guassian.predict(X_test)\nguassian_acc = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(guassian_acc)","9f76a2a0":"svc = SVC()\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_test)\nsvc_acc = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(svc_acc)","1c599c83":"linear_svc = LinearSVC()\nlinear_svc.fit(X_train, y_train)\ny_pred = linear_svc.predict(X_test)\nlinear_svc_acc = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(linear_svc_acc)","e4ed76cc":"knn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nknn_acc = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(knn_acc)","56ae905a":"submission = test['PassengerId']\nprediction = random_forest.predict(test.drop('PassengerId', axis = 1))\n\nsubmission_csv = pd.DataFrame({'PassengerId': submission, 'Survived': prediction})\nsubmission_csv.to_csv('submission.csv', index = False)","648255fd":"### Overall Correlations Between Columns","18380679":"Adjusting the fare has no effect upon the distribution as we'd expect, however it is interesting from a perspective how much a fare would cost in today's pricing.","7e0a4180":"This establishes the 2020 price index","57f5e5e6":"## Submission:","8f5947f6":"For the purposes of machine learning, I need to convert the elements of our dataset from strings into numerical values. For example, converting Gender from Male \/ Female to 0 or 1. This allows for the application of statistics on \"string\" based values.","837e42de":"To establish a scale we use two sets of indices. This establishes the 1998 price index","24d3fbc6":"I was also curious to understand who paid for the most expensive ticket.","054a4174":"Converting the Fare value from Pounds (1912 prices) to post decimalisation values. \n- Current price index for GBP as of 2020 = 126.06 \n- Index price for GBP as of 1998 = 91.1\n- Price index for GBP as of  1912 = 9.7","8bda4d5e":"There's a large number of different titles, however the most common were Mr, Miss, Mrs and Master. Interestingly a \"Jonkheer\" is a rank of nobility in the Netherlands.","bf9c02c8":"### Data Visualization","41813c82":"### Survival based on Point of Embarkation relative to Gender","80cbcca4":"The heatmap below illustrates the probability of survival based on gender. As you can see, generally, Female passengers had a higher rate of survival (0.68), whilst Male passengers had a higher rate of not surviving (0.85). ","dd90d1ab":"### Conclusions So Far: \n- There are a total of 891 passengers in our training dataset.\n- The majority of the data in the Cabin column is missing. This information will be hard to reverse engineer given the large number of unique values in the dataset.\n- Some (20%~) of the Age dataset is missing. This will be easier to fill in the blanks by using statistics based on the mode of the passengers age. ","8d42343f":"## Linear SVC","096ff5e1":"## Decision Tree","43eb8ef9":"## Thanks for reading! ","34950eb4":"## Support Vector Machines (SVC)","f02195b0":"- We can conclude that overall, you're more likely to survive if you're female embarking onto the Titanic in Southhampton and Queenstown. \n- Particularly if you're in class 1 and class 2. \n- Men embarking in Cherbourg had a uncommonly high rate of survival. ","bef56b5f":"## Random Forest","a23a9bac":"# Welcome to my Titanic Dataset Analysis\n\nBelow I will detail the steps I took to:\n- **Analyse** the data using Numpy and Pandas\n- **Visualize** the data using Matplotlib and Seaborn\n- **Machine Learning** to predict the survivability of the passengers on board the RMS Titanic using sklearn\n\nI hope you enjoy my analysis.  Upvotes, or in particular, constructive feedback, are greatly appreciated.","ee568552":"## K Nearest Neighbors","e383c593":"Here we Correlation Estimate for each feature from the Logistic Regression. ","ea4e6bfd":"## Guessian Naive Bayes","e3bab853":"Using logistic regression, we can measure the relationship between the a depedent variable and the independent variables by estimatic their probabilities. ","5874fae7":"- Without dataset now clean, we can proceed with the Machine Learning.","78a26231":"Based on the dataset, we can assign the columns to the following features, and work with them appropiately.\n\n- Numerical Features: Age, Fare, SibSp and Parch\n- Categorical Features: Survived, Sex, Embarked, Pclass\n- Alphanumeric Features: Ticket, Cabin","058a626b":"The general price level of the UK is 73 times as high as it was in 1912.","9dbe8128":"Here, we calculate the size of the families on board the ship. A familysize of 1 indicates that person did not have any Siblings or Children listed on the passenger manifest.","47d4ddd7":"## Logistic Regression","1f0c70bc":"- As we can see, and as I stipulated, Sex (Gender) has the greatest impact on the likelihood of your survival. This matches our earlier predictions indicating that if you're female, your likelihood of survival is greater than a male. \n- Conversely, as your Age increases, the likelihood of your survival also decreases, which matches our earlier predictions.\n- The higher your fare, and the higher your class, resulted in a higher chance of survival.\n- The point of your embarkation makes little difference to the overall likelihood of survial. ","39442d78":"Normalizing with MinMax both the Age and Fare columns will improve our analysis. ","a1acc00c":"# Machine Learning","7d65884d":"Here we add an additional column called Family Size which denotes the size of the family based on the SibSp and Parch columns. ","3eee98dc":"As expected, those with a Mr title, tend to have the lower likelihood of survivability, whilst Mrs \/ Miss and Master's are generally higher. The variability of the \"Other\" titles is likely due to the fact that they're 1) more uncommon, so the signifiance of their title in relation to their surviability isn't so well correlated, 2) some titles are gender specific, ie: Countess, so it's likely, based on our previous analysis, that this passenger was more likely to survive.","f0aeb1cd":"### Effect of \"Title\" on Survivability","b8de4ffe":"Based on the fact that there is a high correlation between the passenger class and the Age, we can attempt to fill our NaN values for the Age with respect to the Passenger Class median age. ","e2043288":"Here, I extracted all the titles from the \"Name\" column and assigned it to a brand new column entitled \"Titles\". \n\nIn order to group the titles together better, and to establish wherever the title of the person may have an effect of their surviability (this is in a sense linked to both gender and class). I denoted the minimum number of persons required to be a common class as 10, and all others were classified as \"Other\".","0bd43c88":"Finally we assigned the percentage difference in price index, between 1912 and 2020 to a variable, so that we can multiple the Fare index by this.","5e7a93d4":"Our dataset is split into TRAIN and TEST dataset. Lets compare them.","7bad9069":"Likewise, given that there are very few values missing for Fare and Embarked. For Fare we can achieve this by taking the mode value. For Embarked, We will impliment this later once we have converted the Embarked columns into scalar values. ","2e40d375":"### Survival Relative to Age","4b5cbb7f":"Here we plot a Facet Grid. This illustrates the likelihood of survival relative to age. As you can see there the difference between surviving and not surviving didn't really depend on age, unless you were between the ages of 0 - 15, indicating that the advice of \"Women and Children first\", was followed. ","15d9872a":"# Data Cleaning for ML","fcdafcc3":"### Survivability relative to Gender"}}