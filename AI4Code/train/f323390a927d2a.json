{"cell_type":{"917d419c":"code","f7b5d2b5":"code","4f5c1efc":"code","7db125a0":"code","f03710da":"code","644a5478":"code","1303ff02":"code","bead57f4":"code","8b0a884f":"code","997e8167":"code","de08107d":"code","30dd14bf":"code","24e444ce":"code","67147cb3":"code","56fb30dd":"code","009a12c3":"code","23e5a85d":"code","ab55eea7":"code","9348edc8":"code","2a581537":"code","cb343dca":"code","bd42692d":"code","839de912":"code","042096b7":"code","93c5a45c":"code","d56af794":"code","3e962448":"code","e1148295":"code","19d10ac0":"code","a8a69aa8":"code","a9ef4c69":"code","01e3e280":"markdown","e77758b8":"markdown","0e6a0226":"markdown","2581558b":"markdown"},"source":{"917d419c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7b5d2b5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix,f1_score, r2_score\n\nsns.set_style(style='darkgrid')","4f5c1efc":"df = pd.read_csv('..\/input\/social-network-ads\/Social_Network_Ads.csv')\ndf.head()","7db125a0":"df['Purchased'].value_counts()","f03710da":"df.drop('Gender',axis=1, inplace=True)\ndf.drop('User ID',axis=1, inplace=True)","644a5478":"df.head()","1303ff02":"sns.countplot(df['Purchased'])","bead57f4":"X= df.iloc[:,:-1].values\ny=df.iloc[:,-1].values","8b0a884f":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)","997e8167":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","de08107d":"lr = LogisticRegression()\nlr.fit(X_train,y_train)","30dd14bf":"y_pred = lr.predict(X_test)","24e444ce":"print(accuracy_score(y_test,y_pred))\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))","67147cb3":"print(lr.predict(sc.transform([[46,41000]])))","56fb30dd":"clf = SVC(kernel='linear', random_state=0)\nclf.fit(X_train,y_train)","009a12c3":"pred =clf.predict(X_test)","23e5a85d":"print('Accuracy:',accuracy_score(y_test,pred)*100)\nprint('F1 Score: ',f1_score(y_test,pred))\nprint('R2_Score: ',r2_score(y_test,pred))","ab55eea7":"X = df.iloc[:,:-1].values\ny = df.iloc[:,-1].values","9348edc8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","2a581537":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","cb343dca":"classifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)","bd42692d":"print(classifier.predict(sc.transform([[30,87000]])))","839de912":"y_pred = classifier.predict(X_test)","042096b7":"cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","93c5a45c":"X = df.iloc[:,:-1].values\ny= df.iloc[:,-1].values","d56af794":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)","3e962448":"sc = StandardScaler()\nX_train= sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","e1148295":"clf = KNeighborsClassifier(n_neighbors= 5, metric= 'minkowski', p=2)\nclf.fit(X_train,y_train)","19d10ac0":"print(clf.predict(sc.transform([[30,87000]])))","a8a69aa8":"y_pred = clf.predict(X_test)","a9ef4c69":"cm = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix:\\n',cm)\nprint('Accuracy: {:.2f}%'.format(accuracy_score(y_test, y_pred)*100))","01e3e280":"# KNN","e77758b8":"# SVM","0e6a0226":"# SVM (rbf)","2581558b":"# Logisitic Regression (Extra)"}}