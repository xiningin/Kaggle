{"cell_type":{"48b0fef8":"code","f62656c6":"code","4780fefc":"code","682b5dd9":"code","fb0e0160":"code","10b5dd42":"code","f0f89d16":"code","f68cfcd2":"code","f7b3f7e0":"code","461a5bb7":"code","4bfbc251":"code","a1b67dd6":"code","4712b186":"code","1f61e721":"code","d16b0502":"code","1a0a38ff":"code","8dd9c7f9":"code","1bfb1ecd":"code","dd4da418":"code","a799ed6c":"code","cfe9fdbd":"code","0bb45e47":"code","9b61d7bf":"code","1f1fdbb0":"code","5690c7fe":"code","392fd6f7":"code","f8a65d76":"code","180d0dca":"code","789e4dca":"code","6acf5703":"code","14850d1d":"code","8c6f7812":"code","d13c7602":"code","048bf764":"code","f69464ee":"code","42a388de":"code","e257182c":"code","103ba193":"code","89d23688":"markdown","1451b122":"markdown","a6a824ee":"markdown","912a5373":"markdown","4f037590":"markdown","81092637":"markdown","4cdeab66":"markdown","886d013d":"markdown","60a4f062":"markdown","949d4a56":"markdown","0c5f8b2d":"markdown","0e8934b7":"markdown","6eccbffb":"markdown","fc27d81d":"markdown","2390713d":"markdown","73c55c4b":"markdown","24803cdf":"markdown","6cd9f128":"markdown","7c58da0c":"markdown","3ba762fa":"markdown"},"source":{"48b0fef8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn')\nsns.set(font_scale=2.5)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f62656c6":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","4780fefc":"df_train.head()","682b5dd9":"df_test.head()\n# survived \ud655\uc778\ud574\uc57c \ud558\ubbc0\ub85c test \ud30c\uc77c\uc5d0\ub294 survival column \uc5c6\uc74c","fb0e0160":"df_train.describe()","10b5dd42":"df_test.describe()","f0f89d16":"for col in df_train.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(\n        col, 100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0]))\n    print(msg)","f68cfcd2":"for col in df_test.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(\n        col, 100 * (df_test[col].isnull().sum() \/ df_test[col].shape[0]))\n    print(msg)","f7b3f7e0":"import missingno as msno","461a5bb7":"msno.matrix(df=df_train.iloc[:, :], figsize=(8,8), color=(0.8, 0.5, 0.2))","4bfbc251":"msno.bar(df=df_train.iloc[:,:], figsize=(8,8), color=(0.8, 0.5, 0.2))","a1b67dd6":"msno.bar(df=df_test.iloc[:,:], figsize=(8,8), color=(0.8, 0.5, 0.2))","4712b186":"f, ax = plt.subplots(1, 2, figsize=(18,8))\n\ndf_train['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_title('pie plot - Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived', data=df_train, ax=ax[1])\nax[1].set_title('count plot - Survived')\n\nplt.show()","1f61e721":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).count()\n# pclass \ubcc4 \uc778\uc6d0\uc218","d16b0502":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).sum()\n\n# count\ud558\uba74 \uac01 class\uc5d0 \uba87 \uba85 \uc788\ub294 \uc9c0 \ubcfc \uc218 \uc788\uace0, sum\ud558\uba74 \uadf8 \uc911 \uc0dd\uc874\ud55c \uc0ac\ub78c\uc758 \ucd1d\ud569\uc744 \uc8fc\uac8c \ub428","1a0a38ff":"pd.crosstab(df_train['Pclass'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","8dd9c7f9":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar()","1bfb1ecd":"y_position = 1.02\nf, ax = plt.subplots(1, 2, figsize=(18, 8))\ndf_train['Pclass'].value_counts().plot.bar(color=['#CD7F32', '#FFDF00', '#D3D3D3'], ax=ax[0])\nax[0].set_title('Number of Passengers By Pclass', y=y_position)\nax[0].set_ylabel('Count')\nsns.countplot('Pclass', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Pclass: Survived vs Dead', y=y_position)\nplt.show()","dd4da418":"f, ax = plt.subplots(1, 2, figsize=(18,8))\ndf_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","a799ed6c":"df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","cfe9fdbd":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","0bb45e47":"sns.factorplot('Pclass', 'Survived', hue='Sex', data=df_train, size=6, aspect=1.5)","9b61d7bf":"sns.factorplot(x='Sex', y='Survived', col='Pclass', data=df_train, satureation=.5, size=9, aspect=1)","1f1fdbb0":"print('\uc81c\uc77c \ub098\uc774 \ub9ce\uc740 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].max()))\nprint('\uc81c\uc77c \ub098\uc774 \uc5b4\ub9b0 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].min()))\nprint('\ud0d1\uc2b9\uac1d \ud3c9\uade0\ub098\uc774 : {:.1f} Years'.format(df_train['Age'].mean()))","5690c7fe":"fig, ax = plt.subplots(1, 1, figsize=(9,5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax=ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax=ax)\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","392fd6f7":"# Age distribution within classes\nplt.figure(figsize=(8,6))\ndf_train['Age'][df_train['Pclass'] == 1].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 2].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 3].plot(kind='kde')\n\nplt.xlabel('Age')\nplt.ylabel('Age distribution within classes')\nplt.legend(['1st class', '2nd class', '3rd class'])","f8a65d76":"cummulate_survival_ratio = []\nfor i in range(1, 80):\n    cummulate_survival_ratio.append(df_train[df_train['Age'] < i]['Survived'].sum() \/ len(df_train[df_train['Age'] < i]['Survived']))\n    \nplt.figure(figsize=(7,7))\nplt.plot(cummulate_survival_ratio)\nplt.title('Survival rate change depending on range of Age', y=1.02)\nplt.ylabel('Survival rate')\nplt.xlabel('Range of Age(0~x)')\nplt.show()","180d0dca":"f, ax = plt.subplots(1, 2, figsize=(18,8))\n\nsns.violinplot('Pclass', 'Age', hue='Survived', data=df_train, scale='count', split=True, ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0, 110, 10))\n\nsns.violinplot('Sex', 'Age', hue='Survived', data=df_train, scale='count', split=True, ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0, 110, 10))\n\nplt.show()","789e4dca":"f, ax = plt.subplots(1, 1, figsize=(7, 7))\ndf_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax)","6acf5703":"f, ax = plt.subplots(2, 2, figsize=(20,25))\n\nsns.countplot('Embarked', data=df_train, ax=ax[0,0])\nax[0,0].set_title('No. Of Passenger Boarded')\n\nsns.countplot('Embarked', hue='Sex', data=df_train, ax=ax[0,1])\nax[0,1].set_title('Male-Female Split for Embarked')\n\nsns.countplot('Embarked', hue='Survived', data=df_train, ax=ax[1,0])\nax[1,0].set_title('Embarked vs  Survived')\n\nsns.countplot('Embarked', hue='Pclass', data=df_train, ax=ax[1,1])\nax[1,1].set_title('Embarked vs Pclass')","14850d1d":"df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1 # \uc790\uae30 \uc790\uc2e0","8c6f7812":"print('Maximum size of Family: ', df_train['FamilySize'].max())\nprint('Minimum size of Family: ', df_train['FamilySize'].min())","d13c7602":"f, ax = plt.subplots(1, 3, figsize=(40, 10))\n\nsns.countplot('FamilySize', data=df_train, ax=ax[0])\nax[0].set_title('(1) No. Of Passengers Boarded', y=1.02)\n\nsns.countplot('FamilySize', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('(2) Survived countplot depending on FamilySize', y=1.02)\n\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=True).mean().sort_values(by='Survived',\n                                                                                               ascending=False).plot.bar(ax=ax[2])\nax[2].set_title('(3) Survived rate depending on FamilySize', y=1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","048bf764":"fig, ax = plt.subplots(1, 1, figsize=(8,8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()),\n                ax=ax)\ng = g.legend(loc='best')","f69464ee":"# distribution\uc774 \ub9e4\uc6b0 \ube44\ub300\uce6d\uc774\uc5b4\uc11c \ubaa8\ub378\uc5d0 \ub123\uc73c\uba74 \ubaa8\ub378 \ud559\uc2b5\uc774 \uc5b4\ub824\uc6b8 \uc218 \uc788\uc74c.\n# outlier\uc758 \uc601\ud5a5\uc744 \uc904\uc774\uae30 \uc704\ud574 fare\uc5d0 log \ucde8\ud558\uae30\n\ndf_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean() # testset\uc5d0 \uc788\ub294 nan value \ud3c9\uade0\uac12\uc73c\ub85c \uce58\ud658\n\ndf_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)","42a388de":"fig, ax = plt.subplots(1, 1, figsize=(8,8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()),\n                ax=ax)\ng = g.legend(loc='best')","e257182c":"# \ud574\ub2f9 feature\ub294 NaN\uac00 \uc57d 80% \uc774\ubbc0\ub85c \ubaa8\ub378\uc5d0 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc74c\ndf_train.head()","103ba193":"# \uc774 feature\ub294 NaN\uac00 \uc5c6\uc74c. \uc77c\ub2e8 string data\uc774\ubbc0\ub85c \uc5b4\ub5a4 \uc791\uc5c5\uc744 \ud574\uc57c \ubaa8\ub378\uc5d0 \uc0ac\uc6a9 \uac00\ub2a5.\ndf_train['Ticket'].value_counts()","89d23688":"## [\ubb34\uc791\uc815 kaggle \ub530\ub77c\ud558\uae30] Titanic - Exploratory Data Analysis","1451b122":"### Exploratory Data Analysis","a6a824ee":"\uc774\uc720\ud55c\ub2d8\uc758 \uce90\uae00 \uc2a4\ud130\ub514 \ud544\uc0ac [\ud574\ub2f9 \ucc44\ub110](https:\/\/www.youtube.com\/channel\/UC--LgKcZVgffjsxudoXg5pQ)\uc744 \ucc38\uace0\ud558\uc600\uc2b5\ub2c8\ub2e4.","912a5373":"#### 5. Pclass, Sex, Age","4f037590":"#### 7. Family - SibSp + Parch","81092637":"* passengerId\n* Pclass (1, 2, 3\ub4f1\uae09)\n* Name\n* Sex\n* SibSp (\ud568\uaed8 \ud0d1\uc2b9\ud55c \ud615\uc81c, \ubc30\uc6b0\uc790 \uc218)\n* Parch (\ud568\uaed8 \ud0d1\uc2b9\ud55c \ubd80\ubaa8, \uc790\ub140\uc758 \uc218)\n* Ticket (\ud2f0\ucf13\ubc88\ud638)\n* Fare \n* Cabin (\uac1d\uc2e4 \ubc88\ud638)\n* Embarked (\ud0d1\uc2b9 \ud56d\uad6c : C, Q, S\ub85c \ub098\ub268)","4cdeab66":"#### 2. Sex","886d013d":"#### 6. Embarked","60a4f062":"train, test data \ubaa8\ub450 Age, Cabin, Embarked\uc5d0 null data \uc874\uc7ac \ud655\uc778","949d4a56":"#### 1. null data \ud655\uc778\ud558\uae30","0c5f8b2d":"#### 4. Age","0e8934b7":"**Process \uc815\ub9ac\ud558\uae30** <br>\n\n1. Dataset \ud655\uc778\n\n2. EDA\n\n3. featuring engineering: \ubaa8\ub378 \uc131\ub2a5 \ub192\uc774\uae30 \uc704\ud574 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1. one-hot encoding, class \ub098\ub204\uae30, \uad6c\uac04 \ub098\ub204\uae30, \ud14d\uc2a4\ud2b8 \ub370\uc774\ud130 \ucc98\ub9ac \ub4f1\n\n4. model \ub9cc\ub4e4\uae30: sklearn \uc774\uc6a9\ud558\uc5ec \ubaa8\ub378 \ub9cc\ub4e4\uae30. deeplearning \uc704\ud574 tensorflow, pytorch \ub4f1 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc74c.\n\n5. model \ud559\uc2b5 \ubc0f \uc608\uce21: trainset\uc744 \uc774\uc6a9\ud558\uc5ec \ubaa8\ub378 \ud3c9\uac00\ud558\uae30.\n\n6. model \ud3c9\uac00: \uc608\uce21 \uc131\ub2a5\uc774 \uc6d0\ud558\ub294 \uc218\uc900\uc778 \uc9c0 \ud3c9\uac00\ud558\uae30.","6eccbffb":"#### 10. Ticket","fc27d81d":"#### 9. Cabin","2390713d":"#### 2. target label \ud655\uc778\ud558\uae30","73c55c4b":"## Dataset \ud655\uc778\ud558\uae30","24803cdf":"**1. Dataset \ud655\uc778\ud558\uae30**\n\n1) null data check <br>\n2) target label check <br>\n\n\n**2. Exploratory Data Analysis**","6cd9f128":"#### 3. Both Sex and Pclass","7c58da0c":"#### 8. Fare","3ba762fa":"#### 1. Pclass"}}