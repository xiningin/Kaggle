{"cell_type":{"f6fe6bf0":"code","8c81b854":"code","00744328":"code","ccfc0049":"code","2d6bf21c":"code","513ed4cf":"code","b243b7ea":"code","20a44dcf":"code","37b60a73":"code","8b585b8f":"code","00730ad7":"code","e82e834c":"code","47ba450d":"code","75fa5f24":"code","acbcd5d6":"code","86696919":"code","325a28cd":"code","f5ac9b15":"code","46245eb3":"code","0d4d2dcc":"code","bea82328":"code","afc0c403":"code","e542402e":"code","3e703b07":"code","3f2b59aa":"code","c2e3f196":"code","8843692b":"code","707b2c2a":"code","0e0ead86":"code","b83d7881":"code","38c09fdf":"code","1f28b277":"code","3d7640f3":"code","ae534257":"code","52d1bff7":"code","f6f38f38":"code","b0ff383a":"code","fbfec2b7":"code","d8c1a6f4":"code","deea6567":"code","05821c63":"code","355a6a7b":"code","6f0f7ccf":"code","faffc68c":"code","ccfa71ed":"markdown","6bc99d55":"markdown","c68ebcfa":"markdown","0a73e46c":"markdown","0ded4cef":"markdown","8464e346":"markdown","da8ad3b5":"markdown","6e64c9cf":"markdown","f6fa7997":"markdown","77c3f976":"markdown","c500fcd7":"markdown","9213831c":"markdown","5eeec787":"markdown","4820b02d":"markdown","f4202456":"markdown","1b178d83":"markdown","b3a941e8":"markdown","62f5b1fc":"markdown","55951196":"markdown","4202760b":"markdown","b980b731":"markdown","f420915c":"markdown","62e40f94":"markdown","a225957a":"markdown","32c6f461":"markdown","7303d0a0":"markdown","87349413":"markdown","72f99faf":"markdown","f1d4391a":"markdown","e2c2048c":"markdown","913f766e":"markdown","206c40a0":"markdown"},"source":{"f6fe6bf0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8c81b854":"train_df = pd.read_csv('\/kaggle\/input\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/test.csv')\ntest_PassengerId = test_df['PassengerId']","00744328":"train_df.columns","ccfc0049":"train_df.head()","2d6bf21c":"train_df.describe()","513ed4cf":"train_df.info()","b243b7ea":"def bar_plot(variable):\n    \"\"\"\n    input : variable ex:\"sex\"\n    output : bar plot & value count \n     \"\"\"\n    # get feature\n    var = train_df[variable]\n    \n    #count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel('Frequency')\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","20a44dcf":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)\n    ","37b60a73":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","8b585b8f":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","00730ad7":"numericVar = [\"Fare\",\"Age\",\"Ticket\"]\nfor c in numericVar:\n    plot_hist(c)","e82e834c":"#Pclass vs Survived \ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","47ba450d":"#Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index=False).mean().sort_values(by=\"Survived\",ascending = False)","75fa5f24":"#Sibsp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","acbcd5d6":"#Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","86696919":"def detect_outliers(df,features):\n    outlier_indices=[]\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        \n        #3rd quartile\n        Q3 = np.percentile(df[c],75)\n        \n        #IQR\n        IQR = Q3 - Q1\n        \n        #Outlier Step\n        outlier_step = IQR * 1.5\n        \n        #detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        \n        #store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i , v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers\n        ","325a28cd":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","f5ac9b15":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)\n","46245eb3":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df],axis=0).reset_index(drop = True)","0d4d2dcc":"train_df.head()","bea82328":"train_df.columns[train_df.isnull().any()]","afc0c403":"train_df.isnull().sum()","e542402e":"train_df[train_df[\"Embarked\"].isnull()]","3e703b07":"train_df.boxplot(column = \"Fare\", by=\"Embarked\")\nplt.show()","3f2b59aa":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","c2e3f196":"train_df[train_df[\"Fare\"].isnull()]","8843692b":"train_df[\"Fare\"]  = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","707b2c2a":"train_df[train_df[\"Fare\"].isnull()]","0e0ead86":"list1 = [\"SibSp\",\"Parch\", \"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot=True,fmt=\".2f\")","b83d7881":"g = sns.factorplot(x=\"SibSp\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","38c09fdf":"g = sns.factorplot(x = \"Parch\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","1f28b277":"g = sns.factorplot(x=\"Pclass\",y=\"Survived\",data=train_df, kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","3d7640f3":"g = sns.FacetGrid(train_df,col=\"Survived\")\ng.map(sns.distplot,\"Age\",bins=25)\nplt.show()","ae534257":"g = sns.FacetGrid(train_df,col=\"Survived\",row=\"Pclass\",size= 2)\ng.map(plt.hist,\"Age\",bins=25)\ng.add_legend()\nplt.show()","52d1bff7":"g = sns.FacetGrid(train_df,row = \"Embarked\",size=2)\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","f6f38f38":"g = sns.FacetGrid(train_df,row = \"Embarked\", col = \"Survived\",size=2.3)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","b0ff383a":"train_df[train_df[\"Age\"].isnull()]","fbfec2b7":"sns.factorplot(x = \"Sex\", y= \"Age\", data = train_df, kind=\"box\")\nplt.show()","d8c1a6f4":"sns.factorplot(x = \"Sex\", y=\"Age\", hue =\"Pclass\", data = train_df, kind =\"box\")\nplt.show()","deea6567":"sns.factorplot(x = \"Parch\", y=\"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","05821c63":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","355a6a7b":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(),annot = True)\nplt.show()","6f0f7ccf":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"])& (train_df.iloc[i][\"Parch\"]== train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","faffc68c":"train_df[train_df[\"Age\"].isnull()]","ccfa71ed":"<a id = \"18\"><\/a>\n# Embarked - Sex - Pclass - Survived","6bc99d55":"<a id=\"16\"><\/a>\n\n# Age - Survived","c68ebcfa":"<a id='3'><\/a>\n# Univeriate Variable analysis\n* Categorical Veriable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Veriable: Fare, age and passengerId","0a73e46c":"<a id = \"11\"><\/a>\n# Visualization","0ded4cef":"* float64(2) : Fare and Age\n* int64(5) : PassengerId, Survived, Pclass, SipSp and Parch,\n* object(5) : Name, Sex, Ticket, Cabin and Embarked","8464e346":"* Age <= 10 has a high survival rate,\n* oldest passengers (80) survived,\n* large number of 20 years old did not survived,\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distribution for missing value for age","da8ad3b5":"<a id=\"14\"><\/a>\n# Parch - Survived","6e64c9cf":"* Sibsp and parch can be used for new feature extraction with th = 3\n* small familes have more chance to survive.\n* there is a std in survival of passenger with parch = 3","f6fa7997":"<a id=\"10\"><\/a>\n## Fill Missing Value\n* Embarked has 2 missing value \n* Fare has only 1","77c3f976":"<a id=\"7\"><\/a>\n# Outlier Detection","c500fcd7":"<a id = \"6\"><\/a>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","9213831c":"<a id='4'><\/a>\n# Categorical Veriable","5eeec787":"<a id = \"20\"><\/a>\n# Fill Missing: Age Feature","4820b02d":"<a id=\"19\"><\/a>\n# Embarked - Sex - Fare -Survived","f4202456":"<a id= \"2\"><\/a><br>\n# Veriable Description\n1. PassengerId : unique id number to each passenger\n1. Survived : passenger survive(1) or died(0)\n1. Pclass : passenger c\n1. Name : name\n1. Sex : gender of passenger\n1. Age : age of passenger \n1. SibSp : number of Siblings\/Spouses\n1. Parch : number of Parents\/Children\n1. Ticket : ticket number \n1. Fare : amount of money spent of ticket\n1. Cabin : cabin category\n1. Embarked : port where passenger embarked(C = Cherbourg, Q = Queenstown, S = Southampton)","1b178d83":"Fare feature seems to have correlation with survived feature(0.26).","b3a941e8":"<a id = \"17\"><\/a>\n# Pclass - Survived - Age","62f5b1fc":"<a id=\"15\"><\/a>\n# Pclass - Survived","55951196":" # Introduction\n The sikking of Titanic is one of the most notorious shipwrecks in the history. In 1992, during her voyage, the Titanic sank after colliding with an iceberg,killing 1502 out of 2224 passengers and crew.\n\n<font color='blue'>\nContant:\n\n1. [Load and Check Data](#1)\n2. [Veriable Description](#2)\n    * [Univeriate Variable Analysis](#3)\n        * [Categorical Veriable](#4)\n        * [Numerical Veriable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n    * [Corelation Between Sipsp -- Parch -- Age -- Fare -- survived](#12)\n    * [Sibsp - Survived](#13)\n    * [Parch - Survived](#14)\n    * [Pclass - Survived](#15)\n    * [Age - Survived](#16)\n    * [Pclass - Survived - Age](#17)\n    * [Embarked - Sex - Pclass - Survived](#18)\n    * [Embarked - Sex - Fare - Survived](#19)\n    * [Fill Missing : Age Feature](#20)","4202760b":"<a id='1'><\/a>\n## Load and Check Data","b980b731":"* Sex is not informative for age prediction, age distiribution seems to be same.","f420915c":"* Female passengers have much better survival rate than males.\n* Males have better survival rate im Pclass 3 in C.\n* Embarked and sex will be used in training.","62e40f94":"<a id = \"12\"><\/a>\n## Correlation Between Sipsp -- Parch -- Age -- Fare -- survived","a225957a":"<a id=\"9\"><\/a>\n## Find Missing Value","32c6f461":"* 1st class passengers are older than 2nd, and 2nd is older than 3rd class.","7303d0a0":"<a id='5'><\/a>\n# Numerical Veriable","87349413":"<a id=\"8\"><\/a>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","72f99faf":" <a id=\"13\"><\/a>\n # SibSp - Survived","f1d4391a":"* pessengers who pay higher fare have better survival Fare can be used as categorical for training.","e2c2048c":"* Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","913f766e":"* Having a lot of SibSp have less chance to survive.\n* if sibsp == 0 or 1 or 2 , passenger has more chance to survive.\n* we can consider a new feature desciribing these categories.","206c40a0":"* Pclass is important feature for model training."}}