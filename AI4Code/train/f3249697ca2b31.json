{"cell_type":{"91d52155":"code","51427779":"code","81fb3086":"code","25311e8f":"code","d934c7e0":"code","6ba1f7bb":"code","cc7b384b":"code","71e5d30a":"code","b87e5e1e":"code","c2e1fa12":"code","2fa79aee":"code","346952cf":"code","b6226348":"code","55fb99c6":"code","acaf0023":"code","08254daf":"code","f2cd9e01":"code","6051ee4b":"code","69bda567":"code","e3131234":"code","504ce15f":"code","c0a90933":"code","1ea94a08":"code","c920eff4":"code","3f37e012":"code","b7052052":"code","7e543131":"code","5f0218d5":"markdown"},"source":{"91d52155":"\nimport numpy as np\nimport random\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\ninit_notebook_mode(connected=True)  \nimport plotly.figure_factory as ff\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import  accuracy_score\n\n\nimport xgboost as xgb\nimport lightgbm as  lgb\nfrom xgboost.sklearn import XGBClassifier\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.preprocessing import StandardScaler, LabelBinarizer\n# auxiliary function\nfrom sklearn.preprocessing import LabelEncoder\ndef random_colors(number_of_colors):\n    color = [\"#\"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])\n                 for i in range(number_of_colors)]\n    return color\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","51427779":"data = \"..\/input\/iris\/Iris.csv\"\ndf = pd.read_csv(data)\n\ndf.head()","81fb3086":"g = sns.lmplot(x=\"SepalWidthCm\", y=\"SepalLengthCm\", hue=\"Species\", data=df)","25311e8f":"g = sns.lmplot(x=\"PetalWidthCm\", y=\"PetalLengthCm\", hue=\"Species\", data=df)","d934c7e0":"x = df[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']]\ny = df['Species']","6ba1f7bb":"encoder = LabelEncoder()\ny = encoder.fit_transform(y)","cc7b384b":"y","71e5d30a":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 101)","b87e5e1e":"lr_model = LogisticRegression()\nlr_model.fit(x_train,y_train)\nlr_predict = lr_model.predict(x_test)\n\nprint('Logistic Regression - ',accuracy_score(y_test, lr_predict))","c2e1fa12":"svm_model = SVC(kernel='rbf')\nsvm_model.fit(x_train,y_train)\nsvc_predict = svm_model.predict(x_test)\n\nprint('SVM - ',accuracy_score(y_test,svc_predict))","2fa79aee":"?svm_model","346952cf":"nb_model = GaussianNB()\nnb_model.fit(x_train,y_train)\nnb_predict = nb_model.predict(x_test)\n\nprint('Naive bayes - ',accuracy_score(y_test, nb_predict))","b6226348":"dt_model = DecisionTreeClassifier(max_leaf_nodes=3)\ndt_model.fit(x_train,y_train)\ndt_predict = dt_model.predict(x_test)\n\nprint('Decision Tree - ',accuracy_score(y_test, dt_predict))","55fb99c6":"rfc_model = RandomForestClassifier(max_depth=3)\nrfc_model.fit(x_train,y_train)\nrfc_predict = rfc_model.predict(x_test)\n\nprint('Random Forest - ',accuracy_score(y_test, rfc_predict))","acaf0023":"etc_model = ExtraTreesClassifier()\netc_model.fit(x_train,y_train)\netc_predict = etc_model.predict(x_test)\n\nprint('Extra Tree Classifier - ',accuracy_score(y_test,etc_predict))","08254daf":"knn_model = KNeighborsClassifier(n_neighbors=11)\nknn_model.fit(x_train,y_train)\nknn_predict = knn_model.predict(x_test)\n\nprint('knn - ',accuracy_score(y_test,knn_predict))","f2cd9e01":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense","6051ee4b":"from sklearn.preprocessing import StandardScaler, LabelBinarizer\nX = df[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']]\ny = df['Species']\n\nX = StandardScaler().fit_transform(X)\ny = LabelBinarizer().fit_transform(y)","69bda567":"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 101)","e3131234":"shallow_model = Sequential()\nshallow_model.add(Dense( 4, input_dim=4, activation = 'relu'))\nshallow_model.add(Dense( units = 10, activation= 'relu'))\nshallow_model.add(Dense( units = 3, activation= 'softmax'))\nshallow_model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])","504ce15f":"shallow_history = shallow_model.fit(x_train, y_train, epochs = 150, validation_data = (x_test, y_test))","c0a90933":"plt.plot(shallow_history.history['accuracy'])\nplt.plot(shallow_history.history['val_accuracy'])\nplt.title(\"Accuracy\")\nplt.legend(['train', 'test'])\nplt.show()","1ea94a08":"plt.plot(shallow_history.history['loss'])\nplt.plot(shallow_history.history['val_loss'])\nplt.plot('Loss')\nplt.legend(['Train','Test'])\nplt.show()","c920eff4":"deep_model = Sequential()\ndeep_model.add(Dense( 4, input_dim=4, activation = 'relu'))\ndeep_model.add(Dense( units = 10, activation= 'relu'))\ndeep_model.add(Dense( units = 10, activation= 'relu'))\ndeep_model.add(Dense( units = 10, activation= 'relu'))\ndeep_model.add(Dense( units = 10, activation= 'relu'))\ndeep_model.add(Dense( units = 10, activation= 'relu'))\ndeep_model.add(Dense( units = 10, activation= 'relu'))\ndeep_model.add(Dense( units = 10, activation= 'relu'))\ndeep_model.add(Dense( units = 10, activation= 'relu'))\ndeep_model.add(Dense( units = 3, activation= 'softmax'))\ndeep_model.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy'])","3f37e012":"deep_history = deep_model.fit(x_train, y_train, epochs = 150, validation_data = (x_test, y_test))","b7052052":"plt.plot(deep_history.history['accuracy'])\nplt.plot(deep_history.history['val_accuracy'])\nplt.title(\"Accuracy\")\nplt.legend(['train', 'test'])\nplt.show()","7e543131":"plt.plot(deep_history.history['loss'])\nplt.plot(deep_history.history['val_loss'])\nplt.plot('Loss')\nplt.legend(['Train','Test'])\nplt.show()","5f0218d5":"# Iris Predictor with Deep Learning | Web App\n\nI love how topics like Deep Learning and ML are combined with the Web. In this project, I made the \"Iris Predictor\" project as a web app out of the ordinary. The application logic is simple. The model, trained by applying deep learning, is stored in the folder. When the person enters the parameters and presses the button, he guesses which flower he looks like according to the model. And the result is the name and picture of the predicted flower.\n\n<img src=\"https:\/\/camo.githubusercontent.com\/8919672d8fd0f570064b44a7656a2d0d835c7935\/68747470733a2f2f6d65646961332e67697068792e636f6d2f6d656469612f67666d344a72797761664c4744636a6d37492f67697068792e676966\" \/>\n\nIt is not possible for me to write Flask codes here. I will only write the codes for the part I trained in deep learning. You can visit my Github repo to access all codes \ud83d\udcaa\n\n- Github Repo: [Github Repo](https:\/\/github.com\/Furkan-Gulsen\/iris_predictor_web_app)"}}