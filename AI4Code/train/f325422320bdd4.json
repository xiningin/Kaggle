{"cell_type":{"ea64c5f1":"code","1405fdd3":"code","37c1c7e6":"code","6f79b2ee":"code","24d25acf":"code","7ccf710a":"code","bda7d133":"code","d1706d47":"code","9050c2b3":"code","24e2e5a4":"code","be151490":"code","a633040f":"markdown"},"source":{"ea64c5f1":"import numpy as np\nimport pandas as pd\nimport datetime\nfrom catboost import CatBoostClassifier\nfrom time import time\nfrom collections import Counter\nfrom scipy import stats\nimport os","1405fdd3":"train = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train.csv', nrows=2000)","37c1c7e6":"# encode title\n# make a list with all the unique 'titles' from the train and test set\nlist_of_user_activities = list(set(train['title'].value_counts().index))\n# make a list with all the unique 'event_code' from the train and test set\nlist_of_event_code = list(set(train['event_code'].value_counts().index))\n# create a dictionary numerating the titles\nactivities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\nactivities_labels = dict(zip(np.arange(len(list_of_user_activities)), list_of_user_activities))\n\n# replace the text titles withing the number titles from the dict\ntrain['title'] = train['title'].map(activities_map)\n","6f79b2ee":"# this is the function that convert the raw data into processed features\ndef get_data(user_sample, test_set=False):\n    # itarates through each session of one instalation_id\n    print(\"=\"*80)\n    for i, (game_session_id, session) in enumerate(user_sample.groupby('game_session', sort=False)):\n        # i = game_session_id\n        # session is a DataFrame that contain only one game_session\n        print(i,\"\\n\",'type' in session, 'title' in session)\n        # get some sessions information\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]        \n        if int(i)>20:\n            break\n    return None","24d25acf":"# here the get_data function is applyed to each installation_id and added to the compile_data list\ncompiled_data = []\n# tqdm is the library that draws the status bar below\nfor i, (ins_id, user_sample) in enumerate(train.groupby('installation_id', sort=False)):\n    # user_sample is a DataFrame that contains only one installation_id\n    print(i,\"\\n\",ins_id,\"\\n\", user_sample.shape)\n    get_data(user_sample)\n    break","7ccf710a":"dateparse = lambda x: pd.datetime.strptime(x, '%Y-%m-%dT%H:%M:%S.%fZ')","bda7d133":"train = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train.csv', parse_dates=['timestamp']\n                         , date_parser=dateparse\n                         , infer_datetime_format=False  \n                         , dtype={'event_count':np.int16, 'event_code':np.int16, 'game_time':np.int32,\n                                  'event_data':object,\n                                  'game_session':'category',\n                                  'event_id':'category',\n                                  'installation_id':'category',\n                                  'title':'category',\n                                  'type':'category',      \n                                  'world':'category'                               \n                                 }, engine='c', nrows=2000)\n               ","d1706d47":"# here the get_data function is applyed to each installation_id and added to the compile_data list\ncompiled_data = []\n# tqdm is the library that draws the status bar below\nfor i, (ins_id, user_sample) in enumerate(train.groupby('installation_id', sort=False)):\n    # user_sample is a DataFrame that contains only one installation_id\n    print(i,\"\\n\",ins_id,\"\\n\", user_sample.shape)\n    get_data(user_sample)\n    break","9050c2b3":"# this is the function that convert the raw data into processed features\ndef get_data(user_sample, test_set=False):\n    # itarates through each session of one instalation_id\n    print(\"=\"*80)\n    for i, (game_session_id, session) in enumerate(user_sample.groupby('game_session', sort=False, observed=True)):\n        # i = game_session_id\n        # session is a DataFrame that contain only one game_session\n        print(i,\"\\n\",'type' in session, 'title' in session)\n        # get some sessions information\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]        \n        if int(i)>20:\n            break\n    return None\n\n# here the get_data function is applyed to each installation_id and added to the compile_data list\ncompiled_data = []\n# tqdm is the library that draws the status bar below\nfor i, (ins_id, user_sample) in enumerate(train.groupby('installation_id', sort=False, observed=True)):\n    # user_sample is a DataFrame that contains only one installation_id\n    print(i,\"\\n\",ins_id,\"\\n\", user_sample.shape)\n    get_data(user_sample)\n    break","24e2e5a4":"train = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train.csv', parse_dates=['timestamp']\n                         , date_parser=dateparse\n                         , infer_datetime_format=False  \n                         , dtype={'event_count':np.int16, 'event_code':np.int16, 'game_time':np.int32,\n                                  'event_data':object,\n                                  'game_session':'category',\n                                  'event_id':'category',\n                                  'installation_id':object,\n                                  'title':'category',\n                                  'type':'category',      \n                                  'world':'category'                               \n                                 }, engine='c', nrows=2000)\n               ","be151490":"# here the get_data function is applyed to each installation_id and added to the compile_data list\ncompiled_data = []\n# tqdm is the library that draws the status bar below\nfor i, (ins_id, user_sample) in enumerate(train.groupby('installation_id', sort=False)):\n    # user_sample is a DataFrame that contains only one installation_id\n    print(i,\"\\n\",ins_id,\"\\n\", user_sample.shape)\n    get_data(user_sample)\n    break","a633040f":"Now add `observed=True` prarameter."}}