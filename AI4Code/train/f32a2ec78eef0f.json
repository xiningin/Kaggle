{"cell_type":{"75fe0534":"code","59db4b26":"code","e7dd793c":"code","bf02d596":"code","9c557701":"code","475fc1c7":"code","7befc4c8":"code","af45952d":"code","49efcd9b":"code","774b4160":"code","c328d7f4":"code","846aa9ca":"code","e222915f":"code","8bea05e6":"code","a88e9093":"code","bf5a7a0a":"code","b59013d1":"code","8f6cb70e":"code","ec922df3":"code","0e467b13":"code","d8fb2ad4":"code","2b31b7a5":"code","127c0574":"code","c5591cdf":"code","64aec3bb":"code","2ecdf0b4":"code","3b3dd2d6":"code","03f05742":"code","7c5c946d":"code","d120d264":"code","8935d96b":"code","81022797":"code","8496f154":"code","1011b2fd":"code","4fb89f06":"code","ce338695":"code","36e5841b":"code","14c6b9da":"code","9a388476":"code","93cd66b6":"code","30383e75":"code","7297cc8f":"code","d6777b1b":"code","6e05d9cb":"code","fee6c7d6":"code","1eb2aec5":"code","e2766ffc":"code","6d969fa5":"code","8f5fab95":"code","b167f096":"code","53231df9":"code","4bc45ad9":"code","28bd68bd":"code","d3dac1af":"code","458fcdc9":"code","bccf4c15":"code","50157f3e":"code","c8e4cd7b":"code","aeb9d4dc":"code","651e045c":"code","22ed0ba3":"code","a645d0fe":"markdown","f706b624":"markdown","422c2de1":"markdown","206b166e":"markdown","e656fa27":"markdown","174db3c7":"markdown","4a7bed53":"markdown","46ca64d7":"markdown","6b846b85":"markdown","0d85dbd8":"markdown","1c159d88":"markdown","6bcbf246":"markdown","f61013bf":"markdown","b614b54b":"markdown","0a7539f1":"markdown","2bc8fe3a":"markdown","06466e4d":"markdown","c4c084d1":"markdown","a06ff3a6":"markdown","56980224":"markdown","96d88a0f":"markdown","77eebba4":"markdown","fd9cdb13":"markdown","b971edca":"markdown","4a00baa3":"markdown","ea4b1706":"markdown","e62bc889":"markdown","0a638590":"markdown","25003524":"markdown","59c69b61":"markdown","73923d1e":"markdown","d6dccb62":"markdown","596a75ba":"markdown","04b1b548":"markdown","5995a43a":"markdown","6625c6f2":"markdown","ad4d86e8":"markdown","4d875e55":"markdown","c8e9958f":"markdown","ae96326d":"markdown","247067ed":"markdown","76894509":"markdown","070980a4":"markdown","af71cc08":"markdown","543e8c5c":"markdown","b2ca413c":"markdown","3cdf115d":"markdown"},"source":{"75fe0534":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","59db4b26":"df_19= pd.read_csv('\/kaggle\/input\/flight-delay-prediction\/Jan_2019_ontime.csv')\ndf_20= pd.read_csv('\/kaggle\/input\/flight-delay-prediction\/Jan_2020_ontime.csv')","e7dd793c":"df_19 = df_19.dropna(subset=['DEP_TIME', 'ARR_TIME','ARR_DEL15'])\ndf_20 = df_20.dropna(subset=['DEP_TIME', 'ARR_TIME','ARR_DEL15'])","bf02d596":"df_19.head()","9c557701":"df_19.shape","475fc1c7":"df_20.shape","7befc4c8":"df_19 = df_19.dropna(subset=['DEP_TIME', 'ARR_TIME','ARR_DEL15'])\ndf_20 = df_20.dropna(subset=['DEP_TIME', 'ARR_TIME','ARR_DEL15'])","af45952d":"df_19_temp = df_19[['DAY_OF_MONTH','DAY_OF_WEEK','OP_CARRIER','TAIL_NUM','ORIGIN','DEST','DEP_TIME','DEP_DEL15','DEP_TIME_BLK','ARR_TIME','ARR_DEL15','CANCELLED','DIVERTED','DISTANCE']]","49efcd9b":"df_20_temp = df_20[['DAY_OF_MONTH','DAY_OF_WEEK','OP_CARRIER','TAIL_NUM','ORIGIN','DEST','DEP_TIME','DEP_DEL15','DEP_TIME_BLK','ARR_TIME','ARR_DEL15','CANCELLED','DIVERTED','DISTANCE']]","774b4160":"#2019\n\ndate = []\ndept_time =[]\narr_time = []\n\nfor i in df_19_temp['DAY_OF_MONTH']:\n# for i, value in enumerate(df_temp['DAY_OF_MONTH']):\n    if len(str(i)) ==1:\n        date.append('2019-01-0{0}'.format(i))\n    else:\n        date.append('2019-01-{0}'.format(i))\n        \ndf_19_temp['DATE'] =date\n\n\n\nfor i in df_19_temp['DEP_TIME']:\n    if len(str(i)) == 5:\n        dept_time.append(str(i)[0:3][:1] + ':' + str(i)[0:3][1:])\n    elif len(str(i)) == 6:\n        dept_time.append(str(i)[0:4][:2] + ':' + str(i)[0:4][2:])\n    else :\n        dept_time.append('a')\n\nfor i in df_19_temp['ARR_TIME']:\n    if len(str(i)) == 5:\n        arr_time.append(str(i)[0:3][:1] + ':' + str(i)[0:3][1:])\n    elif len(str(i)) == 6:\n        arr_time.append(str(i)[0:4][:2] + ':' + str(i)[0:4][2:])\n    else :\n        arr_time.append('a')\n\ndf_19_temp['DEP_TIME'] = dept_time\ndf_19_temp['ARR_TIME'] = arr_time\ndf_19_temp.drop( df_19_temp[ df_19_temp['DEP_TIME'] == 'a' ].index , inplace=True)\ndf_19_temp.drop( df_19_temp[ df_19_temp['ARR_TIME'] == 'a' ].index , inplace=True)\n\n\ndf_19_temp.DEP_TIME = df_19_temp.DEP_TIME.replace({\"24:00\": \"23:59\"})\ndf_19_temp.ARR_TIME = df_19_temp.ARR_TIME.replace({\"24:00\": \"23:59\"})\n\ndf_19_temp['DEP_TIME'] = df_19_temp['DATE'] + ' ' +df_19_temp['DEP_TIME']\ndf_19_temp['ARR_TIME'] = df_19_temp['DATE'] + ' ' +df_19_temp['ARR_TIME']\n\n\n\nimport datetime\n\ndf_19_temp['DEP_TIME'] = pd.to_datetime(df_19_temp['DEP_TIME'],format= '%Y-%m-%d %H:%M' )\ndf_19_temp['ARR_TIME'] = pd.to_datetime(df_19_temp['ARR_TIME'],format= '%Y-%m-%d %H:%M' )","c328d7f4":"#2020\n\ndate = []\ndept_time =[]\narr_time = []\n\nfor i in df_20_temp['DAY_OF_MONTH']:\n# for i, value in enumerate(df_temp['DAY_OF_MONTH']):\n    if len(str(i)) ==1:\n        date.append('2020-01-0{0}'.format(i))\n    else:\n        date.append('2020-01-{0}'.format(i))\n        \ndf_20_temp['DATE'] =date\n\n\n\nfor i in df_20_temp['DEP_TIME']:\n    if len(str(i)) == 5:\n        dept_time.append(str(i)[0:3][:1] + ':' + str(i)[0:3][1:])\n    elif len(str(i)) == 6:\n        dept_time.append(str(i)[0:4][:2] + ':' + str(i)[0:4][2:])\n    else :\n        dept_time.append('a')\n\nfor i in df_20_temp['ARR_TIME']:\n    if len(str(i)) == 5:\n        arr_time.append(str(i)[0:3][:1] + ':' + str(i)[0:3][1:])\n    elif len(str(i)) == 6:\n        arr_time.append(str(i)[0:4][:2] + ':' + str(i)[0:4][2:])\n    else :\n        arr_time.append('a')\n\ndf_20_temp['DEP_TIME'] = dept_time\ndf_20_temp['ARR_TIME'] = arr_time\ndf_20_temp.drop( df_20_temp[ df_20_temp['DEP_TIME'] == 'a' ].index , inplace=True)\ndf_20_temp.drop( df_20_temp[ df_20_temp['ARR_TIME'] == 'a' ].index , inplace=True)\n\n\ndf_20_temp.DEP_TIME = df_20_temp.DEP_TIME.replace({\"24:00\": \"23:59\"})\ndf_20_temp.ARR_TIME = df_20_temp.ARR_TIME.replace({\"24:00\": \"23:59\"})\n\ndf_20_temp['DEP_TIME'] = df_20_temp['DATE'] + ' ' +df_20_temp['DEP_TIME']\ndf_20_temp['ARR_TIME'] = df_20_temp['DATE'] + ' ' +df_20_temp['ARR_TIME']\n\n\n\nimport datetime\n\ndf_20_temp['DEP_TIME'] = pd.to_datetime(df_20_temp['DEP_TIME'],format= '%Y-%m-%d %H:%M' )\ndf_20_temp['ARR_TIME'] = pd.to_datetime(df_20_temp['ARR_TIME'],format= '%Y-%m-%d %H:%M' )","846aa9ca":"df_19_temp = df_19_temp.reset_index(drop=True)\ndf_20_temp = df_20_temp.reset_index(drop=True)","e222915f":"df_19_temp['LONG_FLIGHT'] = df_19_temp['ARR_TIME'] - df_19_temp['DEP_TIME']\ndf_20_temp['LONG_FLIGHT'] = df_20_temp['ARR_TIME'] - df_20_temp['DEP_TIME']\n\ndf_19_temp = df_19_temp.reset_index(drop=True)\ndf_20_temp = df_20_temp.reset_index(drop=True)","8bea05e6":"from datetime import timedelta\n\n#df_19_temp\nfor i,value in enumerate(df_19_temp['LONG_FLIGHT']):\n    if df_19_temp['LONG_FLIGHT'][i].days <0:\n        df_19_temp['LONG_FLIGHT'][i]= timedelta(days=0,seconds=df_19_temp['LONG_FLIGHT'][i].seconds).seconds\/60\n    else:\n        df_19_temp['LONG_FLIGHT'][i] = timedelta(days=0,seconds=df_19_temp['LONG_FLIGHT'][i].seconds).seconds\/60\n\n#df_20_temp\nfor i,value in enumerate(df_20_temp['LONG_FLIGHT']):\n    if df_20_temp['LONG_FLIGHT'][i].days <0:\n        df_20_temp['LONG_FLIGHT'][i]= timedelta(days=0,seconds=df_20_temp['LONG_FLIGHT'][i].seconds).seconds\/60\n    else:\n        df_20_temp['LONG_FLIGHT'][i] = timedelta(days=0,seconds=df_20_temp['LONG_FLIGHT'][i].seconds).seconds\/60","a88e9093":"df_20_temp.info()","bf5a7a0a":"df_19_temp['LONG_FLIGHT'] = df_19_temp['LONG_FLIGHT'].astype(float)\ndf_20_temp['LONG_FLIGHT'] = df_20_temp['LONG_FLIGHT'].astype(float)","b59013d1":"df_19_temp['SPEED']=round(df_19_temp['DISTANCE']\/(df_19_temp['LONG_FLIGHT']\/60))\ndf_20_temp['SPEED']=round(df_20_temp['DISTANCE']\/(df_20_temp['LONG_FLIGHT']\/60))","8f6cb70e":"df_19_temp[df_19_temp['SPEED']>=767.269].shape[0]\/df_19_temp.shape[0]*100\ndf_20_temp[df_20_temp['SPEED']>=767.269].shape[0]\/df_20_temp.shape[0]*100","ec922df3":"df_19_temp.drop( df_19_temp[df_19_temp['SPEED']>=767.269].index , inplace=True)\ndf_20_temp.drop( df_20_temp[df_20_temp['SPEED']>=767.269].index , inplace=True)","0e467b13":"df_20_temp.describe()","d8fb2ad4":"df_19_temp.drop(df_19_temp[(df_19_temp['SPEED']<20)].index , inplace=True)\ndf_20_temp.drop(df_20_temp[(df_20_temp['SPEED']<20)].index , inplace=True)","2b31b7a5":"df_20_temp.describe()","127c0574":"frames = [df_19_temp, df_20_temp]\ndf_flight = pd.concat(frames)","c5591cdf":"df_flight.info()","64aec3bb":"df_flight['DATE'] = pd.to_datetime(df_flight['DATE'],format= '%Y-%m-%d' )","2ecdf0b4":"df_flight['YEAR'] = df_flight.DATE.dt.year.values","3b3dd2d6":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# fig, (ax1, ax2, ax3) = plt.subplots(1,3,figsize=(20,8))\n\ng = sns.FacetGrid(df_flight, col='YEAR')\ng.map(sns.distplot, \"DISTANCE\", hist=False);\n# g.fig.set_size_inches(8,5)\ng.add_legend();\n\nh = sns.FacetGrid(df_flight, col='YEAR')\nh.map(sns.distplot, \"SPEED\", hist=False);\n# h.fig.set_size_inches(8,5)\nh.add_legend();\n\ni = sns.FacetGrid(df_flight, col='YEAR')\ni.map(sns.distplot, \"LONG_FLIGHT\", hist=False);\n# i.fig.set_size_inches(8,5)\ni.add_legend();","03f05742":"import matplotlib.pyplot as plt\n\nfig, (ax1, ax2, ax3) = plt.subplots(1,3,figsize=(20,8))\n\nsns.boxplot( y=df_flight[\"DISTANCE\"], x=df_flight['YEAR'], ax=ax1 )\nsns.boxplot( y=df_flight[\"SPEED\"], x=df_flight['YEAR'], ax=ax2 )\nsns.boxplot( y=df_flight[\"LONG_FLIGHT\"], x=df_flight['YEAR'], ax=ax3 )\n\nfig.tight_layout(pad=5.0)\nplt.show()","7c5c946d":"import plotly.graph_objects as go\n\nx =['2019', '2020']\ny=[df_flight.YEAR.value_counts()[2019],df_flight.YEAR.value_counts()[2020]]\n\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(\n            x=x, y=y,\n            text= y,\n            textposition='outside',\n        )])\n\nfig.update_traces(texttemplate='%{y:.2s}', textposition='outside')\n\nfig.show()","d120d264":"df_flight_dm = pd.crosstab(df_flight['DAY_OF_MONTH'], df_flight['YEAR']).unstack().reset_index().rename(columns={0: \"count\"})","8935d96b":"import plotly.graph_objects as go\n\nday = df_flight_dm.DAY_OF_MONTH.values\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=day,\n    y=df_flight_dm[df_flight_dm['YEAR']==2019]['count'].values,\n    name='Year 2019',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=day,\n    y=df_flight_dm[df_flight_dm['YEAR']==2020]['count'].values,\n    name='Year 2020',\n    marker_color='lightsalmon'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(title ='Comparasion Amount of Flight by Day in USA',\n                  barmode='group')\nfig.show()","81022797":"df_flight_dw = pd.crosstab(df_flight['DAY_OF_WEEK'], df_flight['YEAR']).unstack().reset_index().rename(columns={0: \"count\"})","8496f154":"import plotly.graph_objects as go\n\nday = ['Monday', 'Tuesday', 'Wednesday','Thursday','Friday','Saturday', 'Sunday']\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=day,\n    y=df_flight_dw[df_flight_dw['YEAR']==2019]['count'].values,\n    name='Flight 2019 in USA by Day',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=day,\n    y=df_flight_dw[df_flight_dw['YEAR']==2020]['count'].values,\n    name='Flight 2020 in USA by Day',\n    marker_color='lightsalmon'\n))\n\n\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(title ='Comparasion Amount of Flight by Day in USA',\n                  barmode='group')\nfig.show()","1011b2fd":"df_flight_orig = pd.crosstab(df_flight['ORIGIN'], df_flight['YEAR']).unstack().reset_index().rename(columns={0: \"count\"})\ndf_flight_dest = pd.crosstab(df_flight['DEST'], df_flight['YEAR']).unstack().reset_index().rename(columns={0: \"count\"})","4fb89f06":"a = df_flight_orig[df_flight_orig['YEAR']==2019].sort_values(by='count', ascending=False).head(30).reset_index(drop=True)\nb = df_flight_orig[(df_flight_orig['ORIGIN'].isin(df_flight_orig[df_flight_orig['YEAR']==2019].sort_values(by='count', ascending=False).head(30)['ORIGIN'].values)) &\n              (df_flight_orig['YEAR']==2020)]\n\nresult_orig = pd.merge(a, b, how='left', on=['ORIGIN'])[['ORIGIN','count_x','count_y']].rename(columns={\"count_x\": \"count_2019\", \"count_y\": \"count_2020\"})\nresult_orig['GROWTH'] = (result_orig.count_2020 - result_orig.count_2019)\/result_orig.count_2019*100","ce338695":"import plotly.graph_objects as go\n\n# day = df_flight_op.OP_CARRIER.values\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=result_orig.sort_values(by='count_2019', ascending=False)['ORIGIN'].values,\n    y=result_orig.sort_values(by='count_2019', ascending=False)['count_2019'].values,\n    name='Bussiest Airport in USA at 2019',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=result_orig.sort_values(by='count_2019', ascending=False)['ORIGIN'].values,\n    y=result_orig.sort_values(by='count_2019', ascending=False)['count_2020'].values,\n    name='Bussiest Airport in USA at 2020',\n    marker_color='lightsalmon'\n))\n\n\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group',\n                 title = 'Top 30 Bussiest Origin Airport in USA')\nfig.show()","36e5841b":"df_flight_op = pd.crosstab(df_flight['OP_CARRIER'], df_flight['YEAR']).unstack().reset_index().rename(columns={0: \"count\"})","14c6b9da":"import plotly.graph_objects as go\n\nday = df_flight_op.OP_CARRIER.values\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=day,\n    y=df_flight_op[df_flight_op['YEAR']==2019]['count'].values,\n    name='Flight Operator Carrier 2019 in USA',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=day,\n    y=df_flight_op[df_flight_op['YEAR']==2020]['count'].values,\n    name='Flight Operator Carrier 2020 in USA',\n    marker_color='lightsalmon'\n))\n\n\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group')\nfig.show()","9a388476":"a = df_flight_op[df_flight_op['YEAR']==2019].sort_values(by='count', ascending=False).reset_index(drop=True)\nb = df_flight_op[df_flight_op['YEAR']==2020].sort_values(by='count', ascending=False).reset_index(drop=True)\n\nresult_op = pd.merge(a, b, how='left', on=['OP_CARRIER'])[['OP_CARRIER','count_x','count_y']].rename(columns={\"count_x\": \"count_2019\", \"count_y\": \"count_2020\"})\nresult_op['GROWTH_OP'] = (result_op.count_2020 - result_op.count_2019)\/result_op.count_2019*100","93cd66b6":"import plotly.graph_objects as go\n\n# day = df_flight_op.OP_CARRIER.values\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=result_op.OP_CARRIER.values,\n    y=result_op.GROWTH_OP.values,\n#     name='Bussiest Airport in USA at 2019',\n    marker_color='indianred'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group',\n                 title = 'Growth of Flight Operator Carrier in USA 2020')\nfig.show()","30383e75":"df_flight['ROUTE'] =df_flight['ORIGIN']+'-'+df_flight['DEST']","7297cc8f":"df_flight_route = pd.crosstab(df_flight['ROUTE'], df_flight['YEAR']).unstack().reset_index().rename(columns={0: \"count\"})\ndf_flight_route = df_flight_route.sort_values(by='count', ascending=False).reset_index(drop=True)","d6777b1b":"a = df_flight_route[df_flight_route['YEAR']==2019].sort_values(by='count', ascending=False).reset_index(drop=True)\nb = df_flight_route[(df_flight_route['ROUTE'].isin(df_flight_route[df_flight_route['YEAR']==2019].sort_values(by='count', ascending=False)['ROUTE'].values)) &\n              (df_flight_route['YEAR']==2020)]\n\nresult_route = pd.merge(a, b, how='left', on=['ROUTE'])[['ROUTE','count_x','count_y']].rename(columns={\"count_x\": \"count_2019\", \"count_y\": \"count_2020\"})\nresult_route['GROWTH'] = (result_route.count_2020 - result_route.count_2019)\/result_route.count_2019*100","6e05d9cb":"fig = go.Figure()\nfig.add_trace(go.Bar(\n    x=result_route.sort_values(by='count_2020', ascending=False)['ROUTE'].head(30).values,\n    y=result_route.sort_values(by='count_2020', ascending=False)['count_2019'].head(30).values,\n    name='Bussiest Airport in USA at 2019',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=result_route.sort_values(by='count_2020', ascending=False)['ROUTE'].head(30).values,\n    y=result_route.sort_values(by='count_2020', ascending=False)['count_2020'].head(30).values,\n    name='Bussiest Airport in USA at 2020',\n    marker_color='lightsalmon'\n))\n\n\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group',\n                 title = 'Top 30 Bussiest Flight Route in USA')\nfig.show()","fee6c7d6":"fig = go.Figure()\nfig.add_trace(go.Bar(\n    x=result_route.sort_values(by='count_2020', ascending=False)['ROUTE'].head(30).values,\n    y=result_route.sort_values(by='count_2020', ascending=False)['GROWTH'].head(30).values,\n    marker_color='indianred'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group',\n                 title = 'Growth of 30 Bussiest Flight Route in USA')\nfig.show()","1eb2aec5":"import plotly.graph_objects as go\n\nlabels = ['New Route','Has Closed','Still Operated']\nvalues = [result_route[result_route['count_2019']==0].count().ROUTE\/result_route.shape[0]*100, \n          result_route[result_route['count_2020']==0].count().ROUTE\/result_route.shape[0]*100, \n          result_route[(result_route['count_2020']!=0) & (result_route['count_2019']!=0)].count().ROUTE\/result_route.shape[0]*100]\n\n# Use `hole` to create a donut-like pie chart\nfig_confirmed_case = go.Figure(data=[go.Pie(labels=labels, \n                             values=values,\n                             marker = dict(colors=['#DAA520','#F08080','#5F9EA0']),\n                             hole=.3,\n                             pull=[0, 0, 0.2])])\n\nfig_confirmed_case.update(layout_title_text='From {0} Flight Route in USA at January 2020'.format(result_route.ROUTE.shape[0]))\n\n\nfig_confirmed_case.show()","e2766ffc":"df_op_depdel_2019 = pd.crosstab(df_flight[df_flight['YEAR']==2019]['OP_CARRIER'], \n                    df_flight[df_flight['YEAR']==2019]['DEP_DEL15'],normalize='index').unstack().reset_index().rename(columns={0: \"RATE\"})\ndf_op_depdel_2020 = pd.crosstab(df_flight[df_flight['YEAR']==2020]['OP_CARRIER'], \n                df_flight[df_flight['YEAR']==2020]['DEP_DEL15'],normalize='index').unstack().reset_index().rename(columns={0: \"RATE\"})","6d969fa5":"df_op_depdel = pd.merge(df_op_depdel_2019, df_op_depdel_2020, how='left', on=['OP_CARRIER','DEP_DEL15'])[['DEP_DEL15','OP_CARRIER','RATE_x','RATE_y']].rename(columns={\"RATE_x\": \"RATE_2019\", \"RATE_y\": \"RATE_2020\"})\ndf_op_depdel['RATE_2019'] = df_op_depdel['RATE_2019'].round(3)*100\ndf_op_depdel['RATE_2020'] = df_op_depdel['RATE_2020'].round(3)*100\ndf_op_depdel['GROWTH'] = df_op_depdel['RATE_2020'] - df_op_depdel['RATE_2019']\ndf_op_depdel['DEP_DEL15'] = df_op_depdel['DEP_DEL15'].astype(int)\ndf_op_depdel.head()","8f5fab95":"fig = go.Figure()\nfig.add_trace(go.Bar(\n    x=df_op_depdel[df_op_depdel['DEP_DEL15']==0]['OP_CARRIER'].values,\n    y=df_op_depdel[df_op_depdel['DEP_DEL15']==0]['RATE_2019'].values,\n    name='Year 2019',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=df_op_depdel[df_op_depdel['DEP_DEL15']==0]['OP_CARRIER'].values,\n    y=df_op_depdel[df_op_depdel['DEP_DEL15']==0]['RATE_2020'].values,\n    name='Year 2020',\n    marker_color='lightsalmon'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group',\n                 title = 'Flight Operator Ontime Rate in USA')\nfig.show()","b167f096":"fig = go.Figure()\nfig.add_trace(go.Bar(\n    x=df_op_depdel[df_op_depdel['DEP_DEL15']==0].sort_values(by='GROWTH', ascending=False)['OP_CARRIER'].values,\n    y=df_op_depdel[df_op_depdel['DEP_DEL15']==0].sort_values(by='GROWTH', ascending=False)['GROWTH'].values,\n    marker_color='indianred'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group',\n                 title = 'Growth of Flight Operator Ontime Rate in USA')\nfig.show()","53231df9":"df_scat_op = pd.merge(df_op_depdel[df_op_depdel['DEP_DEL15']==0].sort_values(by='RATE_2020',ascending=False), \n         result_op, \n         how='left', \n         on=['OP_CARRIER'])[['DEP_DEL15','OP_CARRIER','RATE_2019','count_2019','RATE_2020','count_2020','GROWTH','GROWTH_OP']].rename(columns={'RATE_2019':'ONTIME_RATE_2019','RATE_2020':'ONTIME_RATE_2020'\n                                                                                                                                               ,\"count_2019\": \"TOTAL_FLIGHT_2019\",\"count_2020\": \"TOTAL_FLIGHT_2020\"\n                                                                                                                                               ,\"GROWTH\": \"ONTIME_RATE_GROWTH\",\"GROWTH_OP\": \"FLIGHT_GROWTH\"})\ndf_scat_op","4bc45ad9":"import plotly.express as px\nfig = px.scatter(df_scat_op, x=\"ONTIME_RATE_2020\", y=\"TOTAL_FLIGHT_2020\",text=\"OP_CARRIER\")\nfig.update_traces(textposition='top center')\nfig.show()","28bd68bd":"import plotly.express as px\nfig = px.scatter(df_scat_op, x=\"ONTIME_RATE_GROWTH\", y=\"FLIGHT_GROWTH\",text=\"OP_CARRIER\")\nfig.update_traces(textposition='top center')\nfig.show()","d3dac1af":"df_origin_depdel_2019 = pd.crosstab(df_flight[df_flight['YEAR']==2019]['ORIGIN'], \n                    df_flight[df_flight['YEAR']==2019]['DEP_DEL15'],normalize='index').unstack().reset_index().rename(columns={0: \"RATE\"})\ndf_origin_depdel_2020 = pd.crosstab(df_flight[df_flight['YEAR']==2020]['ORIGIN'], \n                df_flight[df_flight['YEAR']==2020]['DEP_DEL15'],normalize='index').unstack().reset_index().rename(columns={0: \"RATE\"})\n\ndf_origin_depdel = pd.merge(df_origin_depdel_2019, df_origin_depdel_2020, how='left', on=['ORIGIN','DEP_DEL15'])[['DEP_DEL15','ORIGIN','RATE_x','RATE_y']].rename(columns={\"RATE_x\": \"RATE_2019\", \"RATE_y\": \"RATE_2020\"})\ndf_origin_depdel['RATE_2019'] = df_origin_depdel['RATE_2019'].round(3)*100\ndf_origin_depdel['RATE_2020'] = df_origin_depdel['RATE_2020'].round(3)*100\ndf_origin_depdel['GROWTH'] = df_origin_depdel['RATE_2020'] - df_origin_depdel['RATE_2019']\ndf_origin_depdel['DEP_DEL15'] = df_origin_depdel['DEP_DEL15'].astype(int)\ndf_origin_depdel =df_origin_depdel[df_origin_depdel['DEP_DEL15']==0]\ndf_origin_depdel.head()","458fcdc9":"df_scat_origin = pd.merge(df_origin_depdel, \n                             result_orig, \n                             how='left', \n                             on=['ORIGIN'])[['DEP_DEL15'\n                                             ,'ORIGIN'\n                                             ,'RATE_2019'\n                                             ,'count_2019'\n                                             ,'RATE_2020'\n                                             ,'count_2020'\n                                             ,'GROWTH_x'\n                                             ,'GROWTH_y']].rename(columns={\"count_2019\": \"TOTAL_FLIGHT_2019\"\n                                                                           ,\"count_2020\": \"TOTAL_FLIGHT_2020\"\n                                                                           ,\"RATE_2019\" : \"ONTIME_RATE_2019\"\n                                                                           ,\"RATE_2020\" : \"ONTIME_RATE_2020\"\n                                                                           ,\"GROWTH_x\": \"ONTIME_RATE_GROWTH\"\n                                                                           ,\"GROWTH_y\": \"GROWTH_ORIGIN_AIRPORT\"})\ndf_scat_origin = df_scat_origin[df_scat_origin['TOTAL_FLIGHT_2020'].notnull()].sort_values(by='TOTAL_FLIGHT_2020', ascending=False).reset_index(drop=True)","bccf4c15":"fig = go.Figure()\n# fig.add_trace(go.Bar(\n#     x=df_scat_origin[df_scat_origin['DEP_DEL15']==0]['ORIGIN'].values,\n#     y=df_scat_origin[df_scat_origin['DEP_DEL15']==0]['ONTIME_RATE_2019'].values,\n#     name='Year 2019',\n#     marker_color='indianred'\n# ))\nfig.add_trace(go.Bar(\n    x=df_scat_origin[df_scat_origin['DEP_DEL15']==0]['ORIGIN'].values,\n    y=df_scat_origin[df_scat_origin['DEP_DEL15']==0]['ONTIME_RATE_2020'].values,\n    name='Year 2020',\n    marker_color='lightsalmon'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group',\n                 title = 'Airport Ontime Rate in USA')\nfig.show()","50157f3e":"df_scat_origin.head()","c8e4cd7b":"fig = go.Figure()\nfig.add_trace(go.Bar(\n    x=df_scat_origin[df_scat_origin['DEP_DEL15']==0].sort_values(by='ONTIME_RATE_GROWTH', ascending=False)['ORIGIN'].values,\n    y=df_scat_origin[df_scat_origin['DEP_DEL15']==0].sort_values(by='ONTIME_RATE_GROWTH', ascending=False)['ONTIME_RATE_GROWTH'].values,\n    marker_color='indianred'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group',\n                 title = 'Growth of Flight Operator Ontime Rate in USA')\nfig.show()","aeb9d4dc":"import plotly.express as px\nfig = px.scatter(df_scat_origin, x=\"ONTIME_RATE_2020\", y=\"TOTAL_FLIGHT_2020\",text=\"ORIGIN\")\nfig.update_traces(textposition='top center')\nfig.show()","651e045c":"If we cross total flight with ontime rate of origin airport, we can see s","22ed0ba3":"import plotly.express as px\nfig = px.scatter(df_scat_origin, x=\"ONTIME_RATE_GROWTH\", y=\"GROWTH_ORIGIN_AIRPORT\",text=\"ORIGIN\")\nfig.update_traces(textposition='top center')\nfig.show()","a645d0fe":"Almost all of 30 bussiest airport in USA have a positive growth of ontime rate in January 2020.","f706b624":"know your table's columns data type.","422c2de1":"We can see from above scatter plot that, SEA succesed grows their traffic in January 2020 compare to previous year but the other hand they are falling down in ontime rate factor.\nBOS has a great in both sector either in growth of passanger or growth of ontime rate.","206b166e":"Sometimes we got a lot of columns in our dataframe. So instead of getting confuse with our dataframe, we can make a new datframe that contains of selected columns.","e656fa27":"**Dist Plot**","174db3c7":"New features, \"LONG_FLIGHT\"","4a7bed53":"In 2020, all of flight operator in USA has good peformance in departure time punctuality rate that we can see from ontime rate > 80%. HA (Hawaiian Airlines) become the best of ontime departure flight operator while OH (Comair) must be happy to be happy to be the last. From 2019 departure time punctuality rate, most of flight operator have succeeded to push their ontime rate in 2020. Let's see how far they push from below graph.","46ca64d7":"Will be insteresting to look up to the growth of these operator in 2020. Below the chart.","6b846b85":"eliminate row that not make sense. such us, plane speed more than sounds speed.","0d85dbd8":"We can see that LAX-SFO or the other way became the hottest route with more or less 2,5K flight in a month. From this graph we also can see that BOS-DCA or the other way grow\nsignificantly. Below graph shows us how many percent these routes grow.","1c159d88":"B6 (JetBlue Airways) recorded a growth 0f 11% in ontime rate compare to previous year. On the other hand, AS (Alaska Airlines) is struggling to fix their performance in ontime rate on January 2020.","6bcbf246":"Box Plot","f61013bf":"I guess dataframe is ready to be analyze and visualize.","b614b54b":"### Univariate Visualization ","0a7539f1":"Why there is super slow speed? this one could be a noise of our dataframe. Let's filter it.","2bc8fe3a":"If we see aviation business by growth of new route, then it shows that this is good.","06466e4d":"Scatter plot from total flight and ontime rate of origin airport shows us that ATL even with high traffic of passangers still provide good ontime rate. While SEA and DFW has the lowest ontime rate compare to another 30 bussiest airport in January 2020.","c4c084d1":"know your dataframe size.","a06ff3a6":"Origin airport.","56980224":"### Departure Airport Time Punctuality","96d88a0f":"Let's move to flight operator feature. There are 17 operators whose operate their plane over USA skies.\nWN (Southwest Airlines) become the most largest number of flight in USA the other hand HA (Hawaiian Airlines)\nbecome the smallest.","77eebba4":"### Categorical vs Categorical","fd9cdb13":"# Data Analysis","b971edca":"Check Your data. Get deeper with your data.","4a00baa3":"Then we continue to visualize the comparasion pfamount of flight between year 2019 and 2020 by day.","ea4b1706":"F9 (Frontier) booked a significant growth in number of flights in 2020. EV (Atlantic Southeast Airlines) experienced negative growth in 2020 for 14%. The rest of it, vast majority of flight operator grow in 2020.","e62bc889":"All of 30 bussiest origin airport have ontime rate more than 80%.","0a638590":"Who was become the bussiest airport in January 2020?","25003524":"Looks more narrow right?\nNext, lets make some changes in our columns. Start with columns that contains of datetime (DAY_OF_MONTH,DAY_OF_WEEK, DEP_TIME, ARR_TIME)","59c69b61":"#### Quantitive Features","73923d1e":"Let's cross our categorical features to get new insight. I am gonna find whose flight operatot have the best ontime rate in 2020 by crossing DEP_DEL15 feature to ORIGIN.","d6dccb62":"New feature, SPEED.","596a75ba":"Let's cross our categorical features to get new insight. I am gonna find whose flight operatot have the best ontime rate in 2020 by crossing DEP_DEL15 feature to OP_CARRIER.","04b1b548":"Find missing value percentage in each column. if its greater than 40%, thak column is not feasible to explore. just drop it.","5995a43a":"From above we can see that *Unnamed: 21* column has 100% NA values. So just drop it.\nBut we still have something to do with columns that have missing values in its columns.\nIf the percentage of missing values in each columns still lower than 40% we can drop the missing value's rows.","6625c6f2":"Let start with year feature. We can see in this feature that in 2020 there are a growth in total of flight. ","ad4d86e8":"As we can see from previous graph BOS-DCA became the most grow airport in January 2020 in term of number of flights. While ORD-LGA became the route that got the most negative growth in January 2020 compare to other 30 bussiest route in USA.","4d875e55":"### Categorical Features","c8e9958f":"Open data, then store it into variable. let say df (dataframe)","ae96326d":"As we can see from scatter plot above, WN () and DL () with more than 60K flight in a month still provide good service in time punctuality with more than 88% of their flight fly on time. ","247067ed":"Almost all of flight operator gain positive growth in ontime rate in January 2020. F9 shows a great growth in both sect flight growth and ontime rate growth.","76894509":"Will be interesting if we combine origin airport with destination airport as new feature we call it 'Route'.","070980a4":"Almost all day in 2020 grow their total of flight, only Teusday has decreased number of flight compares to previous year. In this chart, we also know that weekdays be a bussiest day for USA sky.","af71cc08":"Flight Courrier Operator Time Punctuality","543e8c5c":"To analyze time of flight in this case, I need to make DEP_TIME and ARR_TIME in datetime format. I am gonna start to make new columns that contains date for each flight.","b2ca413c":"In aviation business is normal one flight operator add new route or vanish the old one. It is all about revenue.\nLet see how many percent new route and deleted route in January 2020.","3cdf115d":"# Data Preparation"}}