{"cell_type":{"24c035f4":"code","0f111ce6":"code","5fe71783":"code","980e0a86":"code","99abc3d7":"code","58e5a395":"code","515d2b6c":"code","53a562a9":"code","2ab619cb":"code","8cee9a62":"code","846e015b":"code","ed65f76c":"code","00268498":"code","281f3d0d":"code","a8556213":"code","bb542301":"code","d89a9084":"code","fe097c8f":"code","0358de9c":"code","acc7d361":"code","23896f88":"code","456cd48f":"code","cb1cb1cc":"code","3f30709a":"code","209aa98c":"code","27812350":"code","ab413c82":"code","9319d709":"markdown","2e055c60":"markdown","4565a65b":"markdown","00594f6a":"markdown","8bb1856b":"markdown","85682665":"markdown","91f01493":"markdown","099e166a":"markdown","49d01204":"markdown","2da80fed":"markdown","fb7d7625":"markdown","d7ad531e":"markdown","635f3807":"markdown","8be806aa":"markdown","2076d519":"markdown","748745ef":"markdown","85df5ed6":"markdown","44e900cc":"markdown","c708012a":"markdown"},"source":{"24c035f4":"import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.confusion_matrix.html\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import plot_confusion_matrix","0f111ce6":"input_data = \"..\/input\/forcedataset\/force-ai-well-logs\/train.csv\"","5fe71783":"TARGET_1 = \"FORCE_2020_LITHOFACIES_LITHOLOGY\"\nTARGET_2 = \"FORCE_2020_LITHOFACIES_CONFIDENCE\"\nWELL_NAME = 'WELL'","980e0a86":"#read csv data\ndf = pd.read_csv(input_data, sep=';')","99abc3d7":"wells = np.unique(df['WELL'].values)","58e5a395":"#number: rock types dictionary\nlithology_keys = {30000: 'Sandstone',\n                 65030: 'Sandstone\/Shale',\n                 65000: 'Shale',\n                 80000: 'Marl',\n                 74000: 'Dolomite',\n                 70000: 'Limestone',\n                 70032: 'Chalk',\n                 88000: 'Halite',\n                 86000: 'Anhydrite',\n                 99000: 'Tuff',\n                 90000: 'Coal',\n                 93000: 'Basement'}","515d2b6c":"unused_columns = ['RSHA', 'SGR', 'NPHI', 'BS', 'DTS', 'DCAL', 'RMIC', 'ROPA', 'RXO']\nunused_columns += [WELL_NAME, 'GROUP', 'FORMATION']\n# ADD two target columns into unused columns\nunused_columns += [TARGET_1, TARGET_2]","53a562a9":"all_columns = list(df.columns)\n\nuse_columns = [c for c in all_columns if c not in unused_columns]","2ab619cb":"for c in use_columns:\n    df[c].fillna(df[c].mean(), inplace=True)\n","8cee9a62":"train_wells = list(np.unique(df['WELL'].values))[:70]\n# Use this condition to find out which rows in the data is select for training\ntrain_mask = df[WELL_NAME].isin(train_wells)","846e015b":"X_train = df[train_mask][use_columns].values\ny_train = df[train_mask][TARGET_1].values\nprint(X_train.shape, y_train.shape)","ed65f76c":"X_valid = df[~train_mask][use_columns].values\ny_valid = df[~train_mask][TARGET_1].values\nprint(X_valid.shape, y_valid.shape)","00268498":"rf_clf = RandomForestClassifier(n_estimators=100)","281f3d0d":"rf_clf.fit(X_train, y_train)","a8556213":"rf_clf.fit(X_train, y_train)","bb542301":"predict_y = rf_clf.predict(X_valid)","d89a9084":"# plot confusion matrix\ndef draw_confusion_matrix(model, X_valid, y_valid):\n    fig, ax = plt.subplots(figsize=(6,6))\n    disp = plot_confusion_matrix(model, X_valid, y_valid, normalize = None, xticks_rotation = 'vertical', ax = ax)\n    disp.ax_.set_title(\"Plot Confusion Matrix Not Normalized\")\n    fig1, ax1 = plt.subplots(figsize=(6,6))\n    disp1 = plot_confusion_matrix(model, X_valid, y_valid, normalize = 'true', values_format = \".2f\", xticks_rotation = 'vertical', ax = ax1)\n    disp1.ax_.set_title(\"Plot Confusion Matrix Normalized\")\n    plt.show()","fe097c8f":"# accuracy calculation\ndef calculate_accuracy(y_true, y_pred):\n    cm = confusion_matrix(y_true = y_true, y_pred = y_pred)\n    tp = 0\n    for i in range(len(cm)):\n        tp += cm[i][i]\n    accuracy = 1.0 * tp \/ np.sum(cm)\n    return accuracy\n","0358de9c":"cm_rf = confusion_matrix(y_true = y_valid, y_pred = predict_y)\ncm_rf","acc7d361":"draw_confusion_matrix(rf_clf, X_valid, y_valid)","23896f88":"accuracy_RandomForest = calculate_accuracy(y_valid, predict_y)","456cd48f":"penalty_matrix = np.load(\"..\/input\/penalty-matrix\/penalty_matrix.npy\")","cb1cb1cc":"# Position of each type of rock in the penalty_matrix\npenalty_dict = {\"Sandstone\": 0,\n                \"Sandstone\/Shale\": 1,\n                \"Shale\": 2, \n                \"Marl\": 3,\n                \"Dolomite\": 4,\n                \"Limestone\": 5,\n                \"Chalk\": 6,\n                \"Halite\": 7,\n                \"Anhydrite\": 8,\n                \"Tuff\": 9,\n                \"Coal\": 10,\n                \"Basement\": 11}","3f30709a":"# Used for getting the right \"rock number\" from confusion matrix index\ncm_rock_idx = np.unique(df[TARGET_1].values)","209aa98c":"# penalty calculation according to FORCE metrics.\ndef calculate_penalty(cm = None, penalty_matrix = None, lithology_dict = None, penalty_dict = None, cm_rock_idx = None):\n    sum_penalty = 0\n    for i in range(len(cm)):\n        for j in range(len(cm)):\n            rock_i = lithology_dict[cm_rock_idx[i]]\n            rock_j = lithology_dict[cm_rock_idx[j]]\n            penalty_i = penalty_dict[rock_i]\n            penalty_j = penalty_dict[rock_j]\n            sum_penalty += cm[i][j] * penalty_matrix[penalty_i][penalty_j]\n    return -1.0 * sum_penalty \/ np.sum(cm)","27812350":"penalty_rf = calculate_penalty(cm_rf, penalty_matrix, lithology_keys, penalty_dict, cm_rock_idx)","ab413c82":"penalty_rf","9319d709":"###### confusion matrix","2e055c60":"#### Deal with na values","4565a65b":"###### calculate accuracy","00594f6a":"#### Train\/test split","8bb1856b":"# 2. Training","85682665":"#### Features\/Target split","91f01493":"We will use Random Forest for example:","099e166a":"### Load data and define important variables.","49d01204":"##### Features selection","2da80fed":"# 3. Interpreting Results","fb7d7625":"### Preprocess\n","d7ad531e":"# 1. Prepare data for training","635f3807":"#### Results evaluation","8be806aa":"##### Force Competition Metrics","2076d519":"For example: set null value to mean value.","748745ef":"# Framework for training and validating","85df5ed6":"#### Define helper functions:","44e900cc":"List of all Wells:","c708012a":"### Data Split"}}