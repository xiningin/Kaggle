{"cell_type":{"1ad8c4e5":"code","058a3402":"code","384bd710":"code","225c5b06":"code","02013536":"code","a9525a45":"code","0318cc25":"code","6294eb78":"code","8cbc8d76":"code","89d2dadb":"code","4cadc7c2":"code","a8f54899":"code","11dbd6d0":"code","693944ca":"code","cd1e4d24":"code","57661a98":"code","59e51226":"code","bacaf9fc":"code","827fc29f":"code","93ace23a":"code","f3b7251c":"code","5c69f531":"code","730d9bca":"code","9e4def61":"code","fedce3e1":"code","d16a4013":"code","3dc540b2":"code","a78dea13":"code","fff00a5f":"code","4e35b46a":"code","591a9944":"code","6f56038e":"code","5830f560":"code","a062a53f":"code","a8307fd0":"code","0b3fb696":"code","aa42cd8d":"code","1b924504":"code","65a9ca4c":"code","09b404e9":"code","2145fb1c":"markdown","d9967887":"markdown","12c068f1":"markdown","9af4cdb4":"markdown","ba7c087b":"markdown","8718bb38":"markdown","ae1ed38e":"markdown","15c3eaea":"markdown","cca6c26b":"markdown"},"source":{"1ad8c4e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","058a3402":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","384bd710":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")","225c5b06":"train.info()","02013536":"train.drop(columns=['Id'], inplace=True)","a9525a45":"import seaborn as sns\nplt.figure(figsize=(20,20))\ng = sns.heatmap(train.corr(), annot=True, cmap=\"RdYlGn\")","0318cc25":"train.isnull().sum().sort_values(ascending=False)[:30]","6294eb78":"has_too_much_null_columns = [\n    'PoolQC',\n    'MiscFeature',\n    'Alley',\n    'Fence'\n]\n\ntrain.drop(columns = has_too_much_null_columns, inplace=True)","8cbc8d76":"has_null_columns = [\n    'FireplaceQu',\n    'LotFrontage',\n    'GarageCond',\n    'GarageType',\n    'GarageYrBlt',\n    'GarageFinish',\n    'GarageQual',\n    'BsmtExposure',\n    'BsmtFinType2',\n    'BsmtFinType1',\n    'BsmtCond',\n    'BsmtQual',\n    'MasVnrArea',\n    'MasVnrType',\n    'Electrical'\n];\n\nfor col in has_null_columns:\n    if (train[col].dtype == np.object):\n        train[col].fillna(0, inplace=True)\n    else:\n        train[col].fillna(train[col].median(), inplace=True)","89d2dadb":"object_columns = list(train.select_dtypes(include=['object']).columns)","4cadc7c2":"train_encoded = pd.get_dummies(train.iloc[:, :-1], columns=object_columns)","a8f54899":"X = train_encoded.iloc[:, :-1]\ny = train.iloc[:, -1]","11dbd6d0":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2020)","693944ca":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\nlr.fit(X_train, y_train)\ny_preds_lr = lr.predict(X_test)","cd1e4d24":"from sklearn.metrics import r2_score\nr2_score(y_test, y_preds_lr)","57661a98":"def adj_r2(r2score, train):\n    return (1 - (1 - r2score) * ((train.shape[0] - 1) \/ (train.shape[0] - train.shape[1] - 1)))\n\nadj_r2(r2_score(y_test, y_preds_lr), X_train)","59e51226":"import statsmodels.api as sm\nregressor_OLS = sm.OLS(endog = y, exog = X).fit()\nregressor_OLS.summary()","bacaf9fc":"def comparing_preds_and_test(y_test, y_preds):\n    plt.scatter(y_test, y_preds)\n    plt.xlabel('y_test')                       \n    plt.ylabel('y_preds_lr')\n    plt.show()\n\ncomparing_preds_and_test(y_test, y_preds_lr)","827fc29f":"from sklearn.svm import SVR\n\nsvr = SVR()\nsvr.fit(X_train, y_train)\ny_preds_svr = svr.predict(X_test)","93ace23a":"r2_score(y_test, y_preds_svr), adj_r2(r2_score(y_test, y_preds_svr), X_train)","f3b7251c":"comparing_preds_and_test(y_test, y_preds_svr)","5c69f531":"from sklearn.ensemble import RandomForestRegressor\n\nrf = RandomForestRegressor(random_state=2020)\nrf.fit(X_train, y_train)\ny_preds_rf = rf.predict(X_test)","730d9bca":"r2_score(y_test, y_preds_rf), adj_r2(r2_score(y_test, y_preds_rf), X_train)","9e4def61":"comparing_preds_and_test(y_test, y_preds_rf)","fedce3e1":"from sklearn.tree import DecisionTreeRegressor\n\ndt = DecisionTreeRegressor(random_state=2020)\ndt.fit(X_train,y_train)\ny_preds_dt = dt.predict(X_test)","d16a4013":"r2_score(y_test, y_preds_dt), adj_r2(r2_score(y_test, y_preds_dt), X_train)","3dc540b2":"comparing_preds_and_test(y_test, y_preds_dt)","a78dea13":"from xgboost.sklearn import XGBRegressor\n\nxgb = XGBRegressor()\nxgb.fit(X_train, y_train)\ny_preds_xgb = xgb.predict(X_test)","fff00a5f":"r2_score(y_test, y_preds_xgb), adj_r2(r2_score(y_test, y_preds_xgb), X_train)","4e35b46a":"comparing_preds_and_test(y_test, y_preds_xgb)","591a9944":"test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","6f56038e":"test.head()","5830f560":"test.drop(columns=has_too_much_null_columns, inplace=True)","a062a53f":"test_has_null_columns = test.isnull().sum().sort_values(ascending=False)[:30]\ntest_has_null_columns","a8307fd0":"test_has_null_columns = [\n    'FireplaceQu',\n    'LotFrontage',\n    'GarageCond',\n    'GarageQual',\n    'GarageYrBlt',\n    'GarageFinish',\n    'GarageType',\n    'BsmtCond',\n    'BsmtQual',\n    'BsmtExposure',\n    'BsmtFinType1',\n    'BsmtFinType2',\n    'MasVnrType',\n    'MasVnrArea',\n    'MSZoning',\n    'BsmtHalfBath',\n    'Utilities',\n    'Functional',\n    'BsmtFullBath',\n    'BsmtUnfSF',\n    'SaleType',\n    'BsmtFinSF2',\n    'BsmtFinSF1',\n    'Exterior2nd',\n    'Exterior1st',\n    'TotalBsmtSF',\n    'GarageCars',\n    'KitchenQual',\n    'GarageArea'\n]\n\nfor col in test_has_null_columns:\n    if (test[col].dtype == np.object):\n        test[col].fillna(0, inplace=True)\n    else:\n        test[col].fillna(test[col].median(), inplace=True)","0b3fb696":"test_object_columns = list(test.select_dtypes(include=['object']).columns)\ntest_encoded = pd.get_dummies(test, columns=test_object_columns)\ntest_encoded","aa42cd8d":"for col in test_encoded.columns:\n    if (col not in X.columns):\n        test_encoded.drop(columns=[col], inplace=True)\n\nX.shape, test_encoded.shape","1b924504":"for col in X.columns:\n    if (col not in test_encoded.columns):\n        test_encoded[col] = 0\n        \nX.shape, test_encoded.shape","65a9ca4c":"y_preds_lr_res = lr.predict(test_encoded)\ny_preds_svr_res = svr.predict(test_encoded)\ny_preds_rf_res = rf.predict(test_encoded)\ny_preds_dt_res = dt.predict(test_encoded)","09b404e9":"i = 0\nrows_list = []\nfor pred in y_preds_lr_res:\n    row = {'Id': test[\"Id\"][i], 'SalePrice': pred}\n    i += 1\n    rows_list.append(row)\ndf = pd.DataFrame(rows_list) \ndf.to_csv(\"y_preds_lr_res.csv\", index=False)\n\ni = 0\nrows_list = []\nfor pred in y_preds_svr_res:\n    row = {'Id': test[\"Id\"][i], 'SalePrice': pred}\n    i += 1\n    rows_list.append(row)\ndf = pd.DataFrame(rows_list) \ndf.to_csv(\"y_preds_svr_res.csv\", index=False)\n\ni = 0\nrows_list = []\nfor pred in y_preds_rf_res:\n    row = {'Id': test[\"Id\"][i], 'SalePrice': pred}\n    i += 1\n    rows_list.append(row)\ndf = pd.DataFrame(rows_list) \ndf.to_csv(\"y_preds_rf_res.csv\", index=False)\n\ni = 0\nrows_list = []\nfor pred in y_preds_dt_res:\n    row = {'Id': test[\"Id\"][i], 'SalePrice': pred}\n    i += 1\n    rows_list.append(row)\ndf = pd.DataFrame(rows_list) \ndf.to_csv(\"y_preds_dt_res.csv\", index=False)","2145fb1c":"> Data preparation","d9967887":"> XGB","12c068f1":"> SVR","9af4cdb4":"> Data preprocessing","ba7c087b":"> Submitting results","8718bb38":"> Feature selection and data cleaning","ae1ed38e":"> Linear Regression","15c3eaea":"> Decision Tree","cca6c26b":"> Random Forest"}}