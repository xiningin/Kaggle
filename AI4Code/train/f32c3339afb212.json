{"cell_type":{"1911edc8":"code","02da65fe":"code","8527022d":"code","d921802b":"code","731c559b":"code","6e76510a":"code","7d654f4e":"code","cc026777":"code","aa4012db":"code","ea64ae58":"code","50bc5f99":"code","b0ae371c":"code","803ae3a8":"code","13b24f59":"code","3226e076":"code","8ffbeeca":"code","8e68a588":"code","d29141df":"code","b09a718c":"code","32fc25dc":"code","48f7f24c":"code","fea6b8b9":"code","84f95e13":"code","86a685d0":"markdown","f5b3aedb":"markdown","4d85dc2c":"markdown","929e8e0b":"markdown","7b273af4":"markdown","92e063ac":"markdown","d306b910":"markdown","7b19af13":"markdown","131f2ac3":"markdown","61e1da5a":"markdown","c727d1f8":"markdown","a3b10b7d":"markdown"},"source":{"1911edc8":"# importing the Packages\nimport pandas as pd\nimport numpy as np \nimport missingno as msno\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport pandas_profiling as pp\nimport plotly.express as px\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","02da65fe":"pip install xlrd","8527022d":"#Reading the dataset\ndata=pd.read_excel('\/kaggle\/input\/concrete-comprehensive-strength\/Concrete_Data.xls')\ndata.head()","d921802b":"# Change the names of the column headers\ncolumns={'Cement (component 1)(kg in a m^3 mixture)':'cement',\n        'Blast Furnace Slag (component 2)(kg in a m^3 mixture)':'blast_furnace_slag',\n        'Fly Ash (component 3)(kg in a m^3 mixture)':'fly_ash',\n        'Water  (component 4)(kg in a m^3 mixture)':'water',\n        'Superplasticizer (component 5)(kg in a m^3 mixture)':'superplasticizer',\n        'Coarse Aggregate  (component 6)(kg in a m^3 mixture)':'coarse_aggregate',\n        'Fine Aggregate (component 7)(kg in a m^3 mixture)':'fine_aggregate',\n        'Age (day)':'age','Concrete compressive strength(MPa, megapascals) ':'concrete_compressive_strength'}\ndata.rename(columns=columns,inplace=True)\ndata.head()","731c559b":"# Quick undersatning of the data\n# the shape of th data\nprint('The data consists of {columns} columns and {rows} rows'.format(columns=data.shape[1],rows=data.shape[0]))","6e76510a":"# Data Types\ndata.dtypes","7d654f4e":"# checking the missing values\nmsno.bar(data,color='blue')","cc026777":"# summary statstics with pandas_profiling \npp.ProfileReport(data)","aa4012db":"data.describe()","ea64ae58":"# feature engineering\n#pairplot\nsns.set_theme(style=\"ticks\")\nsns.pairplot(data,)\nplt.show()","50bc5f99":"# correlation between concrete_compressive_strength(label) and the rest (features)\ncorr=data.corr()\ncorr['concrete_compressive_strength']\ncorrelation_df=pd.Series(corr['concrete_compressive_strength']).to_frame()\ncorrelation_df.sort_values(by='concrete_compressive_strength',ascending=False)","b0ae371c":"# spliting the data to X(features) and y(label)\nX=data.drop('concrete_compressive_strength',axis=1)\ny=data['concrete_compressive_strength']","803ae3a8":"# creating a function to calculate cumulative distribution function\ndef cdf(data):\n    n=len(data)\n    x=np.sort(data)\n    y=np.arange(1,1+n)\/n\n    return x,y","13b24f59":"# calculating the cdf for y\nx_label,y_label=cdf(data['concrete_compressive_strength'])\nfig=px.scatter(x=x_label,y=y_label)\nfig.update_layout(title='CDF of concrete compressive strength ',xaxis_title='concrete compressive strength',yaxis_title='CDF',legend_title='Legend'\n                ,font_size=10 )\nfig.update_layout({'plot_bgcolor':'white'})\nfig.show()","3226e076":"# The correlation between the features\nX_corr=X.corr()\nmask=np.triu(np.ones_like(X_corr,dtype='bool'))\nsns.heatmap(X_corr,mask=mask,annot=True)","8ffbeeca":"# scaling the data\nfrom sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nX_scaled=scaler.fit_transform(X) ","8e68a588":"# spliting the data\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X_scaled,y,test_size=0.2,random_state=1111)","d29141df":"#modeling \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.svm import LinearSVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nimport xgboost as xgb\nfrom sklearn.ensemble import AdaBoostRegressor,BaggingRegressor,GradientBoostingRegressor,RandomForestRegressor\n","b09a718c":"linreg=LinearRegression()\nridge=Ridge()\nlasso=Lasso()\nsvr=LinearSVR()\nknn=KNeighborsRegressor()\ndt=DecisionTreeRegressor()\nxg_re=xgb.XGBRegressor(objective='reg:linear',n_estimators=10)\nad=AdaBoostRegressor(base_estimator=dt,n_estimators=400)\nbr=BaggingRegressor(base_estimator=dt,n_estimators=400)\ngbr=GradientBoostingRegressor(n_estimators=300,max_depth=1)\nrfr=RandomForestRegressor(n_estimators=400)\nmodels=[('Linear Regression',linreg),('Ridge Regression',ridge),('Lasso Regression',lasso),\n       ('Support Vector Machine',svr),('K Nearest Neighbours',knn),('Decision Tree',dt),('Extreme Gradient Boosting',xg_re),\n       ('Ada Boost',ad),('Bagging Regressor',br),('Gradient Boosting',gbr),('Random Forest',rfr)]","32fc25dc":"from sklearn.metrics import mean_squared_error\nmean={}\nfor model_name ,model in models:\n    model.fit(X_train,y_train)\n    y_pred=model.predict(X_test)\n    print('mean squered error for {} : {}'.format(model_name,mean_squared_error(y_test,y_pred)))\n    mean[model_name]=mean_squared_error(y_test,y_pred)","48f7f24c":"mean_df=pd.Series(mean).to_frame()\nmean_df=mean_df.rename(columns={0:'mean_squared_error'})\nmean_df.sort_values(by='mean_squared_error')","fea6b8b9":"# Random Forest\nrfr.fit(X_train,y_train)\ny_pred_rfr=rfr.predict(X_test)\nprint('Training score is {}'.format(rfr.score(X_train,y_train).round(2)))\nprint('test score is {}'.format(rfr.score(X_test,y_test).round(2)))\n","84f95e13":"# Bagging regressor\nbr.fit(X_train,y_train)\ny_pred_br=br.predict(X_test)\nprint('Training score is {}'.format(br.score(X_train,y_train).round(2)))\nprint('test score is {}'.format(br.score(X_test,y_test).round(2)))","86a685d0":"# Table of contents\n- [Importing Libraries And Packages](#lib)\n- [Reading the dataset](#data)\n- [Changing the names of the column headers](#change)\n- [Understanding the data](#under)\n- [Missing values](#miss)\n- [Summary statistics](#summary)\n- [Feature Engineering](#feature)\n- [Scaling the data](#scaling)\n- [Spliting the data](#spliting)\n- [Modeling](#model)\n- [Best models](#best)","f5b3aedb":"<a name='change' ><\/a>\n# Changing the names of the column headers","4d85dc2c":"<a name='under' ><\/a>\n# Understanding the data","929e8e0b":"<a name='lib'> <\/a>\n# Importing Libraries And Packages","7b273af4":"<a name='best' ><\/a>\n# Best models","92e063ac":"<a name='miss' ><\/a>\n# Missing Values","d306b910":"<a name='feature' ><\/a>\n# Feature Engineering","7b19af13":"<a name='scaling' ><\/a>\n# Scaling The Data","131f2ac3":"<a name='spliting' ><\/a>\n# Spliting The Data","61e1da5a":"<a name='summary' ><\/a>\n# Summary Statistics","c727d1f8":"<a name='model' ><\/a>\n# Modeling The Data","a3b10b7d":"<a name='data' ><\/a>\n# Reading The Dataset"}}