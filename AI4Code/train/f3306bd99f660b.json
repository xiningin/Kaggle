{"cell_type":{"6c5f1bbd":"code","78434904":"code","837b0366":"code","03fecfc4":"code","fc976edd":"code","4782d0a4":"code","3efb281e":"code","b19f6d98":"code","f10f3347":"code","2de88fab":"code","bd33bf73":"code","7167c47a":"code","b988ea4a":"code","132e04c3":"markdown","082cd5f8":"markdown","05222bff":"markdown","a9827531":"markdown","dd55df23":"markdown","720ef8d3":"markdown"},"source":{"6c5f1bbd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","78434904":"data = pd.read_csv(\"\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")","837b0366":"data.info()","03fecfc4":"data.head()","fc976edd":"A = data[data[\"class\"] == \"Abnormal\"]\nN = data[data[\"class\"] == \"Normal\"]","4782d0a4":"# scatter plot\nplt.figure(figsize = (10,8))\nplt.scatter(A.pelvic_incidence,A.sacral_slope,color=\"red\",label = \"Abnormal\",alpha=0.3)\nplt.scatter(N.pelvic_incidence,N.sacral_slope,color=\"green\",label = \"Normal\",alpha=0.3)\nplt.xlabel(\"pelvic_incidence\")\nplt.ylabel(\"sacral_slope\")\nplt.legend()\nplt.show()","3efb281e":"class_ = [1 if i=='Abnormal' else 0 for i in data.loc[:,'class']]","b19f6d98":"y = data[\"class\"].values\nx_data = data.drop([\"class\"],axis=1) ","f10f3347":"x = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data))","2de88fab":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3, random_state = 1)\n","bd33bf73":"#knn model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 5) # n_neigbotrs = choosen k number\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)","7167c47a":"print(\"{} nn score: {}\".format(5,knn.score(x_test,y_test))) # %95 oran\u0131nda","b988ea4a":"# find k value\ntrain_accuracy = []\ntest_accuracy = []\nfor each in range(1,30):\n    knn2 = KNeighborsClassifier(n_neighbors= each)\n    knn2.fit(x_train,y_train)\n    #train accuracy\n    train_accuracy.append(knn2.score(x_train, y_train))\n    # test accuracy\n    test_accuracy.append(knn2.score(x_test, y_test))\n\nplt.figure(figsize = (10,8))\nplt.plot(range(1,30),train_accuracy,color = \"blue\", label = \"Train Accuracy\")\nplt.plot(range(1,30), test_accuracy,color = \"red\", label = \"Test Accuracy\")\nplt.xlabel(\"K Values (number of neighbors)\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()\nprint(\"Best accuracy is {} with K = {}\".format(np.max(test_accuracy),1+test_accuracy.index(np.max(test_accuracy))))","132e04c3":"# INTRODUCTION\nSteps:\n1. Determine parameter K = number of nearest neighbours\n2. Calculate distance and determine nearest neighbors based on the K-th minimum\n3. Calculate each class between K-th minimum\n4. Determine the point whic is tested belong to which class\n\n    * [Load Data and Explanation](#1)\n    * [Normalization](#2)\n    * [Train Test Split](#3)\n    * [KNN Model](#4)","082cd5f8":"![](http:\/\/)<br id=\"1\" br\/>\n## Load Data and Explanation","05222bff":"* Based on two class(feature):\n    * Abnormal == 1\n    * Normal == 0","a9827531":"![](http:\/\/)<br id=\"4\" br\/>\n## KNN Model","dd55df23":"![](http:\/\/)<br id=\"3\" br\/>\n## Train Test Split","720ef8d3":"![](http:\/\/)<br id=\"2\" br\/>\n## Normalization"}}