{"cell_type":{"6539da83":"code","bf901334":"code","a768781c":"code","8f094ff5":"code","391dd188":"code","d774d7df":"code","6d4ad24b":"code","827ab836":"code","6dd36de1":"code","5af36910":"code","0fdb9f10":"markdown","b3661c3d":"markdown","5943877a":"markdown","e77c1e62":"markdown","f484906f":"markdown","2fea1826":"markdown","73f662cf":"markdown","e03c7d2a":"markdown","4cd07c44":"markdown","125cf073":"markdown","f759daca":"markdown","e87f77ae":"markdown","fa00c504":"markdown","a17342e6":"markdown"},"source":{"6539da83":"from graphviz import Digraph\n\nm = Digraph(\n    'tsp_graph', \n    graph_attr={\n        'fontname': 'sans'\n    }, \n    node_attr={\n        'shape': 'circle',\n        'fontname': 'sans'\n    },\n    edge_attr={\n        'fontname': 'sans',\n    },\n    engine='sfdp',\n    directory='images',\n    filename='tsp_graph',\n    format='png',\n)\n\nwith m.subgraph(name='cluster_1') as layer:\n    layer.attr(color='invis')\n    layer.node('123')\n    layer.node('231')\n    layer.node('321')\n\nwith m.subgraph(name='cluster_2') as layer:\n    layer.attr(color='invis')\n    layer.node('132')\n    layer.node('321')\n    layer.node('213')\n\nm.edge('123', '231', label='1')\nm.edge('231', '312', label='1')\nm.edge('312', '213', label='2')\nm.edge('213', '132', label='1')\nm.edge('132', '321', label='1')\n\nm.edge('312', '123', color='invis')\nm.edge('321', '213', color='invis')\n\nm.render()\nm","bf901334":"import functools\nimport itertools\nimport math\n\nfrom ortools.constraint_solver import routing_enums_pb2\nfrom ortools.constraint_solver import pywrapcp\n\n\n# Configure the problem\nN_STRINGS = 3\nLETTERS = [\n    '\ud83c\udf85',  # father christmas\n    '\ud83e\udd36',  # mother christmas\n    '\ud83e\udd8c',  # reindeer\n    '\ud83e\udddd',  # elf\n    '\ud83c\udf84',  # christmas tree\n    '\ud83c\udf81',  # gift\n    '\ud83c\udf80',  # ribbon\n]\nWILDCARD = '\ud83c\udf1f'  # star\nN = len(LETTERS)\nDEPOT = itertools.repeat('0', N)  # a starting dummy node\nINF = 999  # number to represent \"infinite distance\", could try sys.maxsize for hard constraint\n\n# Configure stopping conditions for the search\nN_SOLUTIONS = None\nN_MINUTES = 60","a768781c":"def make_nodes():\n    perms = list(itertools.permutations(LETTERS, N))\n    all_ = perms[:math.factorial(N-2)]  # permutations beginning with \ud83c\udf85\ud83e\udd36\n    some = perms[math.factorial(N-2):]  # everything else\n    return [DEPOT] + (all_ * N_STRINGS) + some\n\n\ndef create_data_model():\n    data = {}\n    data['locations'] = make_nodes()\n    data['num_vehicles'] = N_STRINGS\n    data['depot'] = 0\n    return data\n\n\ndata = create_data_model()\nmanager = pywrapcp.RoutingIndexManager(\n    len(data['locations']),\n    data['num_vehicles'],\n    data['depot'],\n)\nrouting = pywrapcp.RoutingModel(manager)","8f094ff5":"def distance(p, q):\n    if p == DEPOT or q == DEPOT: return 0\n    for n in range(N+1):  # never choose maximum distance nodes (the N+1 case)\n        if p[n:] == q[:N-n]:\n            return n\n    return INF  # max distance N becomes distance infinity\n\n\ndef distance_callback(from_index, to_index):\n    # Convert from the internal representation to an actual permutation\n    from_node = manager.IndexToNode(from_index)\n    from_perm = data['locations'][from_node]\n    to_node = manager.IndexToNode(to_index)\n    to_perm = data['locations'][to_node]\n    return distance(from_perm, to_perm)\n\n\ntransit_callback_index = routing.RegisterTransitCallback(distance_callback)\nrouting.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)","391dd188":"# Define a Length dimension that records the lengths of each schedule\ndimension_name = 'Length'\nrouting.AddDimension(\n    transit_callback_index,\n    0,  # slack is additional fixed cost at each node; not applicable here\n    10**16, # max length per route; set to some large-enough number\n    True,  # start with total length of 0\n    dimension_name)\nlength_dimension = routing.GetDimensionOrDie(dimension_name)\nlength_dimension.SetGlobalSpanCostCoefficient(100) # total cost += 100 * (max_length - min_length)\n\n# Set constraint that each vehicle must have all permutations beginning with \ud83c\udf85\ud83e\udd36\nn_all = math.factorial(N-2)\nfor vehicle in range(N_STRINGS):\n    for node in range(n_all):\n        routing.SetAllowedVehiclesForIndex(\n            [vehicle],\n            manager.NodeToIndex(1+vehicle*n_all+node),\n        )","d774d7df":"def remove_forbidden_edges(forbidden_fn):\n    n_removed = 0\n    n_nodes = len(data['locations'])\n\n    for from_index, to_index in itertools.product(range(n_nodes), range(n_nodes)):\n        from_node = manager.IndexToNode(from_index)\n        from_perm = data['locations'][from_node]\n        to_node = manager.IndexToNode(to_index)\n        to_perm = data['locations'][to_node]\n        \n        if routing.NextVar(from_index).Contains(to_index) and forbidden_fn(from_perm, to_perm):\n#             print(\"Removing edge\", from_index, from_perm, \" -> \", to_index, to_perm)\n            n_removed += 1\n            routing.NextVar(from_index).RemoveValue(to_index)\n    \n    print(\"Removed\", n_removed, \"edges.\")\n    \n\n# remove_forbidden_edges(\n#     lambda p, q: distance(p, q) >= N\n# )","6d4ad24b":"search_parameters = pywrapcp.DefaultRoutingSearchParameters()\n\nsearch_parameters.first_solution_strategy = \\\n    routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC\n\nsearch_parameters.local_search_metaheuristic = \\\n    routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH\n\n# Define stopping conditions\nif N_SOLUTIONS is not None:\n    search_parameters.solution_limit = N_SOLUTIONS\nif N_MINUTES is not None:\n    search_parameters.time_limit.seconds = N_MINUTES * 60\n    \nsearch_parameters.log_search = True","827ab836":"solution = routing.SolveWithParameters(search_parameters)","6dd36de1":"from collections import defaultdict\n\n\ndef get_routes(data, manager, routing, solution):\n    routes = defaultdict(list)\n    for vehicle_id in range(data['num_vehicles']):\n        index = routing.Start(vehicle_id)\n        while not routing.IsEnd(index):\n            idx_node = manager.IndexToNode(index)\n            if idx_node != data['depot']:\n                routes[vehicle_id].append(idx_node)\n            index = solution.Value(routing.NextVar(index))\n    return routes\n\n\ndef route_to_schedule(route, nodes):\n    def overlap(a, b):\n        return max(i for i in range(len(b)+1) if a.endswith(b[:i]))\n\n    def squeeze(ws):\n        return functools.reduce(lambda a, b: a + b[overlap(a, b):], ws)\n\n    return squeeze([\"\".join(nodes[i]) for i in route])\n\n\ndef get_schedules(routes):\n    words = [route_to_schedule(routes[vehicle_id], data['locations'])\n             for vehicle_id in range(data['num_vehicles'])]\n    return words","5af36910":"import pandas as pd\n\n\nif solution:\n    routes = get_routes(data, manager, routing, solution)\n    words = get_schedules(routes)\n\n    submission = pd.Series(words, name='schedule')\n    submission.to_csv('submission.csv', index=False)\n\n    display(submission)\n    display(submission.apply(len).rename(\"Lengths\"))","0fdb9f10":"We can now create the submission file `submission.csv`.","b3661c3d":"# The Minimal Superpermutation Problem #\n\nA **permutation** over a set of symbols is a particular arrangement of those symbols. For instance, there are six permutations of the symbols 1, 2, and 3: 123, 132, 213, 231, 312, 321. Notice that (allowing overlap) these permutations can be packed together very efficiently into longer strings. The permutations 123 and 231, for example, are both substrings of 1231, a string of length four. Extending this by one character to 12312, we can include a third permutation, 312. In fact, *every* permutation over 1, 2, 3 can be found within a string of length 9, the string 123121321.\n\nStrings that contain every permutation of some set of symbols are called **superpermutations**. The **minimal superpermutation problem** asks: how short can superpermutations actually be? Exact answers are known for $ n \\leq 5 $ symbols, but for $ n \\geq 6 $ researchers have resorted to discovering superpermutations through various search and optimization techniques.\n\nWe can see now that the elves' scheduling problem is a variation on this minimal superpermutation problem, with three strings instead of one and the addition of a \"wildcard\" symbol. A lot of work has been done on superpermutations already, which you might like to use for inspiration. Check out [Greg Egan's Superpermutation page](https:\/\/www.gregegan.net\/SCIENCE\/Superpermutations\/Superpermutations.html) for a great introduction to current methods.","5943877a":"Now that we've defined the problem, we can run the optimization routine to search for a minimal solution. We've set the optimizer to run for an hour, but you could also choose the number of solutions to iterate through.","e77c1e62":"And we also define how we're measuring the distance between nodes. We've included the full distance matrix as a CSV file in the dataset for this competition, but for this notebook we'll just use the distance function directly.\n\nModifying the distance function is one way to change the constraints on a problem or to modify the search space. First, to make a \"dummy\" of our depot node, we define its distance to every node to be 0.\n\nSecond, we reduce the search space by setting the maximum distance between nodes to infinity (or actually to some large number). This change means we would never consider going from node \ud83c\udf85\ud83e\udd36\ud83e\udd8c\ud83e\udddd\ud83c\udf84\ud83c\udf81\ud83c\udf80 to node \ud83e\udddd\ud83c\udf84\ud83c\udf81\ud83c\udf80\ud83c\udf85\ud83e\udd36\ud83e\udd8c, since these nodes are separated by the maximum distance of 7. Since most nodes are separated with maximum distance, this makes the search problem much easier but doesn't seem to exclude any potentially good solutions. You might find other changes that could reduce the search space further.","f484906f":"# Solving the Problem with OR-Tools #\n\nWe'll implement a solver for the movie-scheduling problem with the [Vehicle Routing](https:\/\/developers.google.com\/optimization\/routing\/vrp) module of OR-Tools.\n\nFirst we'll define our imports and set some configuration variables.","2fea1826":"The movie scheduling problem is similar, except we have multiple routes with a subset of nodes being visited by every salesman.\n\nKaggle has held TSP challenges in previous years. You might like to review the discussion or notebooks of these competitions for inspiration:\n- [Traveling Santa 2018 - Prime Paths](https:\/\/www.kaggle.com\/c\/traveling-santa-2018-prime-paths\/overview)\n- [Traveling Santa Problem](https:\/\/www.kaggle.com\/c\/traveling-santa-problem)","73f662cf":"Now we need to create the \"data model\" defining the nodes in the graph. The nodes in this case are the permutations themselves. To enforce the condition that permutations beginning with \ud83c\udf85\ud83e\udd36 must be in every schedule, we create a set of such nodes for each schedule (each string of the solution, that is). The `DEPOT` is a dummy node we include to remove the condition that every string has to begin with a certain permutation.","e03c7d2a":"# Welcome to the Santa 2021 - Movie Madness! #\n\nEach year Kaggle holds a Christmas-themed optimization challenge. This year, your challenge is to optimize the scheduling of seven movies.\n\nThis problem can be stated like this:\n\nFind a set of three strings containing every permutation of the seven symbols \ud83c\udf85, \ud83e\udd36, \ud83e\udd8c, \ud83e\udddd, \ud83c\udf84, \ud83c\udf81, and \ud83c\udf80 as substrings, subject to the following conditions:\n\n- Every permutation must be in at least one string.\n- Each permutation beginning with \ud83c\udf85\ud83e\udd36 must be in all three strings.\n- Each string may have up to two wildcards \ud83c\udf1f, which will match any symbol in a permutation. No string of length seven containing more than one wildcard will count as a permutation.\n- Your score is the length of the longest of the three strings, with lower scores better.\n\nSee this competition's [Evaluation](https:\/\/www.kaggle.com\/c\/santa-2021\/overview\/evaluation) page for more details.\n\nIn this notebook, we'll see how the elves' movie-scheduling problem can be formulated as a type of **minimal superpermutation problem** and also as a type of **traveling salesman** or **routing problem**. We'll implement this latter formulation in Google's open-source [OR-Tools](https:\/\/developers.google.com\/optimization) optimization library to create a submission.","4cd07c44":"There are a number of [routing options](https:\/\/developers.google.com\/optimization\/routing\/routing_options) available to modify the search strategy, a few of which we've set here. You can also define the [initial routes](https:\/\/developers.google.com\/optimization\/routing\/routing_tasks#setting-initial-routes-for-a-search) for a search -- useful if you've discovered some good starting solution through other means.","125cf073":"Now, if you imagine the permutations as nodes in a graph connected by these distances, the minimal superpermutation problem becomes the problem of finding the shortest route through this graph that connects every node, the Traveling Salesman Problem. Note, however, that our permutation distance function is *not* symmetric: `distance(123, 231) == 1`, but `distance(231, 123) == 2`. This makes the optimization problem somewhat harder than a traditional TSP.\n\nThis graph illustrates the route generating the superpermutation 123121321.","f759daca":"You could also try removing some of the edges of the permutation graph. The cell below illustrates how, though we won't actually remove any.","e87f77ae":"By default, the optimizer only considers the total length of all strings when searching for a solution. To enforce our objective of finding a minimal length for the longest string, we create an additional *dimension*.\n\nDimensions model quantities accumulated along a route. We add a dimension here to accumulate lengths for each route (that is, movie schedule) and set a cost proportional to the difference between the largest length and the smallest. Adding this cost will encourage the optimizer to make the largest length as short as possible.","fa00c504":"# The Traveling Salesman Formulation #\n\nBy defining the notion of a distance on permutations, we can view the superpermutation and movie scheduling problems as kinds of traveling salesman or [routing](https:\/\/developers.google.com\/optimization\/routing) problems.\n\nWe saw in the last section how we could add a single character to 123 to get a string also containing 231 (the string 1231). This tells us that the *distance* from 123 to 231 is 1 (one character). More generally, we define the **distance** from a permutation p to a permutation q by:\n\n$$ d(p, q) = \\text{number of characters you have to append to } p \\text{ to get a string also containing } q $$\n\nwhich in Python we could implement as:\n\n``` python\ndef distance(p, q):\n    N = len(p)\n    for n in range(N+1):\n        if p[n:] == q[:N-n]:\n            return n\n```\n\nThis function essentially measures the deficiency of overlap from the end of p to the beginning of q. We have, for example,\n\n``` python\ndistance(123, 123) == 0\ndistance(123, 231) == 1  # with 1231\ndistance(123, 321) == 2  # with 12321\ndistance(123, 132) == 3  # with 123132\n```","a17342e6":"## Create a Submission ##\n\nThere are a couple of steps we need to go through to create the final submitted schedules. First, we need to convert the OR-Tools representation of the solution to routes through the permutation graph. The `get_routes` function collects the optimal routes found into three lists of (integer) nodes, something like:\n\n``` python\n{\n    0: [1, 2, 10, 16, ...],\n    1: [1, 80, 2, 72, ...],\n    2: [3, 9, 21, 12, ...],\n}\n```\n\nSecond, we need to convert these lists into \"superpermutation\" format, a long string of symbols. The function `route_to_schedule` converts each integer index into the corresponding permutation node and then squeezes them all together, something like:\n\n``` python\n[50, 2, 9, ...]\n-> ['\ud83e\udddd\ud83c\udf84\ud83c\udf81\ud83c\udf80\ud83c\udf85\ud83e\udd36\ud83e\udd8c', '\ud83c\udf85\ud83e\udd36\ud83e\udd8c\ud83c\udf81\ud83c\udf80\ud83e\udddd\ud83c\udf84', '\ud83e\udd36\ud83e\udd8c\ud83c\udf81\ud83c\udf80\ud83e\udddd\ud83c\udf84\ud83c\udf85', ...]\n-> '\ud83e\udddd\ud83c\udf84\ud83c\udf81\ud83c\udf80\ud83c\udf85\ud83e\udd36\ud83e\udd8c\ud83c\udf81\ud83c\udf80\ud83e\udddd\ud83c\udf84\ud83c\udf85...'\n```"}}