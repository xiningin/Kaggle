{"cell_type":{"bb416509":"code","a938e5dc":"code","20cb5591":"code","b4535f6c":"code","11901b81":"code","730b6642":"code","0d782373":"code","77c9e339":"code","490c61b7":"code","349698d4":"code","0cea6fd9":"code","51c42085":"code","e3377a0d":"code","a4884a13":"code","296b6e54":"code","d1492c31":"code","cf96c008":"code","0b4f8eee":"code","a3556081":"code","009749c0":"code","576187fa":"code","c0f65312":"code","e55aec1c":"code","97c85d1e":"code","5696a6e4":"code","1c2d0188":"code","d6934b43":"code","0070d092":"code","95316b89":"code","b377d925":"code","01b35a96":"code","a8c9d301":"code","fd5c25ec":"code","e2e29352":"code","f0c4c207":"code","2a33dda3":"code","489e2158":"markdown","f591cda6":"markdown"},"source":{"bb416509":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a938e5dc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","20cb5591":"df = pd.read_csv(\"\/kaggle\/input\/income-classification\/income_evaluation.csv\")","b4535f6c":"df.head()","11901b81":"df.info()","730b6642":"df.describe()","0d782373":"df.isnull().sum()","77c9e339":"df[\" workclass\"].value_counts()","490c61b7":"df[\" education\"].value_counts()","349698d4":"df[\" marital-status\"].value_counts()","0cea6fd9":"df[\" race\"].value_counts()","51c42085":"df[\" sex\"].value_counts()","e3377a0d":"df[\" occupation\"].value_counts()","a4884a13":"df = pd.read_csv(\"\/kaggle\/input\/income-classification\/income_evaluation.csv\",na_values=\" ?\")","296b6e54":"df.isnull().sum()","d1492c31":"df = df.dropna(axis=0)\ndf.isnull().sum()","cf96c008":"plt.figure(figsize=(10,10))\nco_relation = df.corr()\nsns.heatmap(co_relation,annot=True)","0b4f8eee":"gender = pd.crosstab(index=df[' sex'],columns='count',normalize=True)\ngender","a3556081":"sal_status = pd.crosstab(index=df[' sex'],columns=df[' income'],margins=True,normalize='index')\nsal_status","009749c0":"plt.figure(figsize=(10,10))\nsal_status_plot = sns.countplot(df[' income'])","576187fa":"plt.figure(figsize=(10,10))\nsns.boxplot('age',' income',data=df)","c0f65312":"plt.figure(figsize=(10,10))\nsns.countplot(x=' income',hue=' workclass',data=df)","e55aec1c":"plt.figure(figsize=(10,10))\nsns.countplot(x=' income',hue=' education',data=df)","97c85d1e":"plt.figure(figsize=(10,10))\nsns.countplot(x=' income',hue=' marital-status',data=df)","5696a6e4":"plt.figure(figsize=(10,10))\nsns.countplot(x=' income',hue=' occupation',data=df)","1c2d0188":"plt.figure(figsize=(10,10))\nsns.countplot(x=' income',hue=' relationship',data=df)","d6934b43":"sns.pairplot(hue=' sex',data=df)","0070d092":"df.head()","95316b89":"df.columns","b377d925":"X = df.drop(' income',axis=1)\ny = df[' income']","01b35a96":"import category_encoders as ce\nfrom sklearn.compose import ColumnTransformer\n\ncategorical_features = [' workclass',' education',' marital-status',' occupation', ' relationship', ' race', ' sex',' native-country']\none_hot = ce.OneHotEncoder()\ntransformer = ColumnTransformer([('one_hot',one_hot,categorical_features)], remainder='passthrough')\ntransformed_X = transformer.fit_transform(X)\ntransformed_X","a8c9d301":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(transformed_X,y,test_size=0.2)\n\nmodel = RandomForestClassifier()\nmodel.fit(X_train,y_train)\nmodel.score(X_test,y_test)","fd5c25ec":"y_predict = model.predict(X_test)","e2e29352":"from sklearn.metrics import accuracy_score\n\naccuracy_score(y_test,y_predict)","f0c4c207":"from sklearn.metrics import confusion_matrix\nmatrix = confusion_matrix(y_test,y_predict)\nmatrix","2a33dda3":"sns.heatmap(matrix,annot=True)","489e2158":"Missing values Identified as \"?\" in workclass","f591cda6":"Missing values Identified as \"?\" in occupation"}}