{"cell_type":{"1418692d":"code","ed32f5a2":"code","235834d0":"code","7268fee6":"code","f20c2c32":"code","5754f015":"code","46b84345":"code","53d87c93":"code","9d1cf00a":"code","ecdee482":"code","38e484da":"code","6a7adc1a":"code","bea0997f":"code","91327bbd":"code","399a045d":"code","5e999cb5":"code","0aead053":"code","6cd894df":"code","a39d79c5":"code","16f428b6":"code","360f542c":"code","1a359cb5":"code","e2c01fb0":"code","99601bba":"code","8ba5a776":"code","5e9807c3":"code","8ddf53ed":"markdown"},"source":{"1418692d":"import pandas as pd\ndataset=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndataset.head()","ed32f5a2":"dataset.info()","235834d0":"dataset.nunique().sort_values(ascending=False)[:5]","7268fee6":"data = dataset.sample(frac=0.8, random_state=42)\ndata_unseen = dataset.drop(data.index)\ndata.reset_index(inplace=True, drop=True)\ndata_unseen.reset_index(inplace=True, drop=True)\nprint('Data for Modeling: ' + str(data.shape))","f20c2c32":"print('Unseen Data For Predictions: ' + str(data_unseen.shape))","5754f015":"!pip install pycaret","46b84345":"from pycaret.classification import *","53d87c93":"numeric_features=data.columns.tolist()\nnumeric_features.remove('label')\nnumeric_features[:5]","9d1cf00a":"data.label.value_counts()","ecdee482":"exp_clf101 = setup(data = data, target = 'label', session_id=42,\n                  normalize = True, \n                  transformation = True, \n                  log_experiment = True,\n                  handle_unknown_categorical = True, \n                  unknown_categorical_method = 'most_frequent',\n                  remove_multicollinearity = True, #rop one of the two features that are highly correlated with each other\n                  ignore_low_variance = True,#all categorical features with statistically insignificant variances are removed from the dataset.\n                  combine_rare_levels = True,# all levels in categorical features below the threshold defined in rare_level_threshold param are combined together as a single level\n                  numeric_imputation='median',\n                  categorical_imputation='mode',\n                   numeric_features=numeric_features)","38e484da":"lightgbm = create_model('lightgbm')","6a7adc1a":"print(lightgbm)","bea0997f":"tuned_lightgbm = tune_model(lightgbm,optimize = 'F1')","91327bbd":"plot_model(tuned_lightgbm, plot = 'auc')","399a045d":"plot_model(tuned_lightgbm, plot = 'pr')","5e999cb5":"plot_model(tuned_lightgbm, plot='feature')","0aead053":"plot_model(tuned_lightgbm, plot = 'confusion_matrix')","6cd894df":"evaluate_model(tuned_lightgbm)","a39d79c5":"predict_model(tuned_lightgbm)","16f428b6":"unseen_predictions = predict_model(tuned_lightgbm, data=data_unseen)\nunseen_predictions.head()","360f542c":"print(\"Confidence Score :   {}\".format(round(unseen_predictions.Score.mean(),2)))#Confidence Score","1a359cb5":"test=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest.head()","e2c01fb0":"sol = predict_model(tuned_lightgbm, data=test)\nsol.head()","99601bba":"final=pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nfinal.head()","8ba5a776":"final.Label=sol.Label\nfinal.head()","5e9807c3":"final.to_csv('final.csv', index=False)","8ddf53ed":"#### Time is constant, so using model which will take less time to execute"}}