{"cell_type":{"6c5b54a4":"code","6e7f95e4":"code","552a2dbf":"code","6d7fd52b":"code","2ab42d76":"code","f41778b8":"code","2f1c341f":"code","69e4b5dd":"code","5c7d99da":"code","15f93557":"code","845c2aca":"code","04901d05":"code","c5e1e252":"code","f3c852cd":"code","e3e0088c":"code","7f0e5f0f":"code","fb99452c":"code","3524ea46":"code","dc8f08d9":"code","a5420b59":"code","3c301714":"code","0f51ca73":"markdown","954df0fc":"markdown","f0b432d4":"markdown","a5f4ae30":"markdown","61b50d28":"markdown","237752c6":"markdown","8ac84ebf":"markdown","57036146":"markdown","a01dbf9f":"markdown","b69b7de9":"markdown","1e441855":"markdown","d450b782":"markdown","bc4c310d":"markdown","bd27dbe0":"markdown","6788ae3e":"markdown","9a2273d5":"markdown","32df2e1b":"markdown","2dce2584":"markdown","636c6f1b":"markdown","5319a354":"markdown","eb22634d":"markdown","e50dbd1d":"markdown","e4fe9ec8":"markdown","3e331820":"markdown","5ee30787":"markdown","df57cf9f":"markdown","b5d27194":"markdown","47e4bedb":"markdown"},"source":{"6c5b54a4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import fbeta_score, make_scorer, accuracy_score\n\n\n%matplotlib inline","6e7f95e4":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","552a2dbf":"train.info()","6d7fd52b":"print(\"train.shape:\",train.shape)\nprint(\"test.shape:\",test.shape)\ntrain.head()","2ab42d76":"id = test['PassengerId']","f41778b8":"train = train.loc[:,[\"Pclass\", \"Sex\", \"Age\",\"Fare\",\"Survived\"]]\ntest = test.loc[:,[\"Pclass\", \"Sex\", \"Age\",\"Fare\" ]]\n\ndisplay(train.head())\ndisplay(test.head())","2f1c341f":"train.isna().sum()","69e4b5dd":"test.isna().sum()","5c7d99da":"print(\"---train------------------\")\ndisplay(train.describe())\nprint(\"---test------------------\")\ndisplay(test.describe())","15f93557":"plt.hist(train[\"Age\"],bins=50)\nplt.show()","845c2aca":"train['Age']=train['Age'].fillna(29.67)\ntest['Age']=test['Age'].fillna(30.27)\ntest['Fare']=test['Fare'].fillna(35.63)","04901d05":"print(\"---train------------------\")\ndisplay(train.isna().sum())\nprint(\"---test------------------\")\ndisplay(test.isna().sum())\nprint(\"---first 5 rows of train------\")\ndisplay(train.head())","c5e1e252":"alldata = pd.concat([train, test],axis=0)\ndisplay(alldata.head())\ndisplay(alldata.shape)\n\nnew_alldata = pd.get_dummies(alldata, drop_first=True)\ndisplay(new_alldata.head())\ndisplay(\"new_alldata.shape:\",new_alldata.shape)\n\ntrain = new_alldata.iloc[:train.shape[0],:]\ntest = new_alldata.iloc[train.shape[0]:,:]\n\ndisplay(\"train.shape:\" ,train.shape)\ndisplay(\"test.shape:\" ,test.shape)","f3c852cd":"target_col = \"Survived\"\nfeature_cols = [col for col in train.columns if col not in target_col]","e3e0088c":"X_train = train[feature_cols]\ny_train = train[target_col]\nX_test = test[feature_cols]","7f0e5f0f":"from sklearn.model_selection import train_test_split\nX_tra, X_val, y_tra, y_val = train_test_split(X_train, y_train, test_size=0.3, random_state=42)","fb99452c":"from sklearn.tree import DecisionTreeClassifier\n\nDTC = DecisionTreeClassifier()\nDTC.fit(X_tra, y_tra)\ny_pred=DTC.predict(X_val)\nprint(len(y_pred))\ny_pred","3524ea46":"def show_evaluation_metrics(y_test, y_pred):\n    print(\"\\nAccuracy: %.2f\" % accuracy_score(y_test, y_pred))\n    print()\n#     print(\"Report:\")\n#     print(classification_report(y_test, y_pred))\n    print(\"Confusion matrix:\")\n    print(confusion_matrix(y_test, y_pred))\n    \n    \nshow_evaluation_metrics(y_val, y_pred)","dc8f08d9":"y_submission=DTC.predict(X_test)\nprint(len(y_submission))","a5420b59":"submission=pd.DataFrame({\"PassengerId\":id,\"Survived\":y_submission})\nsubmission['Survived']=submission['Survived'].replace(0.0,'0').replace(1.0,'1')\nsubmission","3c301714":"submission.to_csv('submission_decisiontree.csv', index=False)","0f51ca73":"![result3.JPG](attachment:9284094f-5fe1-4c7b-b052-210fc484b7f1.JPG)","954df0fc":"Let's fill in with values of mean in this time.","f0b432d4":"**Congratulations!!!!**<br>\n**After uploading the data, finally you can check the result and ranking on Leaderboard!!.**","a5f4ae30":"You can download the csv file \"submission_decisiontree.csv\" from the output folder.<br>\nSee the picture bewlow.","61b50d28":"## Step3. Data cleansing\nFor creating model you need to fill in missing values. To do so, let's find columns which has missing values.<br>\nYou can find these with typing \"train.isna().sum()\" Now you can see columns \"Age\" has 177 missing values (NaN).","237752c6":"Let's check the mean and median and histogram of the Age of train and decide how we should fill in missing values.<br>\nTo see the whole picture of the data, you can use \"train.describe()\"<br>\nAlso if you want to see the distribution, you can see it with \"plt.hist()\" as follows.","8ac84ebf":"To create model, we divide 70% of train data as training and the other 30% of train data to evaluate the accuracy of model.<br>\nTo do so, I use **train_test_split**. ","57036146":"## Step2. Select Features","a01dbf9f":"Test has 2 columns which have missing values \"Age\" and \"Fare\"","b69b7de9":"Since we have object feature (Sex has \"male\" and \"female\") and model can not handle object<br>\nI will convert these with using **One-Hot encoding**.\n","1e441855":"# This is a notebook for Kaggle beginner\nFor beginner, submitting data and confirm result itself is very difficult.<br>\n**The aim of this notebook is leading you to complete submitting data and see the result on leader board.**<br>\n\nIf you are beginner of Kaggle, I would recommend to shadow the code below and see the result on leader board by yourself.<br>\nIt is very big step and you can find why so many people are so passionate about it.","d450b782":"\"train.shape\" shows how many columns and rows train has. \"train.head()\" shows the first 5 rows.<br>\nYou can briefly understand the structure of train and test data with using train.head() and test.head()<br>\nIn this case, train has 891 rows and 12 columns.","bc4c310d":"Check if there is no missing values anymore.","bd27dbe0":"## Step4. Create model","6788ae3e":"Target_col is what you would like to predict(In this case,\"Survived\") and feature_cols are columns <br>\nwhich you would like to use for creating model. ","9a2273d5":"![result.JPG](attachment:2ee9f17e-dc09-44a7-bf2f-f7d8977b752e.JPG)","32df2e1b":"## Step6. Submission","2dce2584":"### If you find this notebook very useful, please upvote!!","636c6f1b":"Since I need PassengerId data later, I copy it.","5319a354":"DecisionTree is one of the most simple model. The goal of this Titanic competition is predicting if <br>\neach Passenger suvived (colum suvived=1) or dead(colum suvived=0)<br>\n\nYou can create DecisionTree model with using DTC.fit(X_tra, y_tra)<br>\nand predict with using DTC.predict(X_val)<br>\n\nThere are 268 prediction data and this is 30% of origina train data(268=891*0.3)","eb22634d":"Let's see the accuarcy of the model","e50dbd1d":"![result2.JPG](attachment:34d93a7d-2861-4028-9418-17534271f7ad.JPG)","e4fe9ec8":"## Analysis Flows to submit data to Kaggle!\n\nStep1. Load data, library and select features<br>\nStep2. Select Features<br>\nStep3. Data cleansing<br>\nStep4. Create Model<br>\nStep5. Prediction<br>\nStep6. Submission","3e331820":"![Upvote.png](attachment:bf96c74f-8e25-4db5-93b2-9508aa8b8e8e.png)","5ee30787":"The goal of this competition is to create a model that expects the column \"Survived\" to be 0 or 1.<br>\nYou can guess which column might affect the columns \"Survived\"<br>\nFor example, people who were staying 1st class(Pclass = 1) must survive more than people who were staying at 3rd class(Pclass = 3).<br>\nIn this time, let's choose \"Pclass\", \"Sex\", \"Age\",\"Fare\" to create very basic model ","df57cf9f":"## Step5. Prediction","b5d27194":"The purpose of this notebook is **to finish creating model and submit the data to Kaggle**,<br>\nnot aim high score, so let's choose some columns and create simple model.","47e4bedb":"## Step1. Load data and select features"}}