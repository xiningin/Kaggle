{"cell_type":{"f6ab24a8":"code","60cfee80":"code","5037e686":"code","80006947":"code","4c73d9b7":"code","ee810fbd":"code","d8d6ff34":"code","84345009":"code","fee0aa55":"code","8ea1e1df":"code","49c96b51":"code","dac9dfc2":"code","84bce0e8":"code","cf3bf4ae":"code","3fe5a6cf":"code","c684a971":"code","f5a24502":"code","2186e8dc":"code","0fd551de":"code","bbd6d732":"code","3134f4d3":"code","a578802b":"code","75d285d8":"code","6f933204":"code","b11548ef":"code","cfa9d6eb":"code","eea99b64":"code","952a2247":"code","e684392e":"code","7cbc57b5":"markdown","83cd250e":"markdown","9df8158b":"markdown","e29b4039":"markdown","63cf7a95":"markdown","256b0fc7":"markdown","60a8b83b":"markdown","2d2912d0":"markdown","228878eb":"markdown"},"source":{"f6ab24a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","60cfee80":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","5037e686":"datasetpath = '\/kaggle\/input\/bike-sharing-demand\/'\n\ndf = pd.read_csv(os.path.join(datasetpath, 'train.csv'))\n\nprint(\"The shape of the dataset is {}.\".format(df.shape))","80006947":"df.head()","4c73d9b7":"df.info()","ee810fbd":"df.describe()","d8d6ff34":"df.nunique()","84345009":"df[\"datetime\"] = pd.to_datetime(df.datetime)\ndf['year'] = df['datetime'].dt.year\ndf['month'] = df['datetime'].dt.month\ndf['day'] = df['datetime'].dt.day\ndf['hour'] = df['datetime'].dt.hour\ndf['DayName'] = df['datetime'].dt.day_name()\ndf.drop(columns='datetime', inplace=True)\ndf.head()","fee0aa55":"#there is an outlier in the humidity feature as there cant be a humidity of 0%\nhumidity_filter = df['humidity'] == 0\nprint(\"sum of rows where humidity equals zero:\", humidity_filter.sum())\ndf.drop(index = df.loc[humidity_filter].index, inplace=True)","8ea1e1df":"lst_objects = ['season', 'holiday', 'workingday', 'weather', 'DayName']","49c96b51":"fig, axes=plt.subplots(nrows=15, ncols=1, figsize=(10,80))\ncol=0 # to avoid columns of ID and y\nk=0\nfor i in range(16):\n    if df.columns[col] == 'count':\n        k = 1\n        pass\n    elif df.columns[col] in lst_objects:\n        #sns.histplot(data=df, x='y', hue=df.columns[col], ax=axes[i], kde=True)\n        sns.boxplot(data=df, x=df.columns[col], y='count', ax=axes[i-k])\n    elif df.columns[col] in ['year', 'month', 'day', 'hour']:\n        sns.boxplot(data=df, x=df.columns[col], y='count', ax=axes[i-k])\n    else:\n        sns.scatterplot(data=df, x=df.columns[col], y='count', ax=axes[i-k])\n    col+=1","dac9dfc2":"df['Morning'] = np.where((5 <= df.hour) & (df.hour <= 12), 1, 0)\ndf['Afternoon'] = np.where((12 < df.hour) & (df.hour <= 17), 1, 0)\ndf['Evening'] = np.where((17 < df.hour) & (df.hour <= 21), 1, 0)\ndf['Night'] = np.where((21 < df.hour) | (df.hour < 5 ), 1, 0)\ndf","84bce0e8":"encoded_col = pd.get_dummies(df['DayName'])\ndf = df.join(encoded_col).drop(columns='DayName')","cf3bf4ae":"corr = df.corr().abs()\ncorr_arr = corr.values\nplt.subplots(figsize=(20,20))\nsns.heatmap(corr_arr, xticklabels=corr.columns, yticklabels=corr.columns, annot=True, cmap=\"Blues\");","3fe5a6cf":"plt.subplots(figsize=(10,10))\nplt.subplot(221)\nsns.histplot(df, x='temp');\nplt.subplot(222)\nsns.histplot(df, x='atemp');\nplt.subplot(223)\nsns.histplot(df, x='humidity');\nplt.subplot(224)\nsns.histplot(df, x='windspeed');","c684a971":"df","f5a24502":"from sklearn.model_selection import train_test_split\n\ntrain_df, val_df = train_test_split(df, test_size=0.2, random_state=42)\n\nX_train = train_df.drop(columns=['casual','registered','count'])\ny_train = np.log(train_df['count']+1)\n\nX_val = val_df.drop(columns=['casual','registered','count'])\ny_val = np.log(val_df['count']+1)\n\n# all the data to use in cross validation (kfolds, or any other splits) \n# https:\/\/neptune.ai\/blog\/cross-validation-in-machine-learning-how-to-do-it-right\nX = df.drop(columns=['casual','registered','count'])\ny = np.log(df['count'] + 1)","2186e8dc":"from xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import BayesianRidge\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import StackingRegressor\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\n\nimport time\n\nmodels = [XGBRegressor(), RandomForestRegressor(), ExtraTreesRegressor(), AdaBoostRegressor(),BaggingRegressor(),\n          SVR(), KNeighborsRegressor(), LinearRegression(), BayesianRidge(), DecisionTreeRegressor()]\nmodel_names = ['XgboostReg','RandomForestReg','ExtraTressReg','AdaBoostReg','BaggingReg',\n               'SVR','KNeighborsReg', 'LinearReg', 'BayesianRidge', 'DescisionTreeReg']\nrmsle = []\ntime_lst =[]\nd={}\n\nkfold = KFold(n_splits=5, shuffle=True, random_state=42)\n\nfor model in range (len(models)):\n    clf = models[model]\n    \n    #using kfolds for cv of the model\n    print(\"Start fitting {}\".format(model_names[model]))\n    start = time.time()\n    \n    score = cross_val_score(clf, X, y, scoring=\"neg_root_mean_squared_error\", cv=kfold)\n    \n    elp_time = time.time() - start\n    time_lst.append(elp_time)\n    print(\"end fitting {} in {} sec\\n\".format(model_names[model], elp_time))\n    rmsle.append(abs(score.mean()))\n    \nd = {'Modelling Algorithms':model_names, 'RMSLE':rmsle, 'Time(s)':time_lst}\n\nrmsle_frame=pd.DataFrame(d)\nrmsle_frame.sort_values(by='RMSLE')","0fd551de":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold\nfrom xgboost import XGBRegressor\n\nmodel = XGBRegressor(tree_method = 'gpu_hist')\nn_estimators = list(range(50, 300, 50))\nmax_depth = [3,5,7,9]\n\nparam_grid = dict(n_estimators=n_estimators, max_depth=max_depth)\nprint(param_grid)\n\nkfold = KFold(n_splits=5, shuffle=True, random_state=42)\n\ngrid_search = GridSearchCV(model, param_grid, scoring=\"neg_root_mean_squared_error\",\n                           cv=kfold, n_jobs=-1, verbose=1, return_train_score=True)\n\ngrid_result = grid_search.fit(X, y)\n\nprint(\"Best: %f using %s\" % (abs(grid_result.best_score_),grid_result.best_params_))\n    \nresults = pd.DataFrame(grid_search.cv_results_)\n#results","bbd6d732":"print(\"reviewing test and train score.\")\nresults[results[\"params\"]==grid_result.best_params_].loc[:,[\"mean_test_score\",\"std_test_score\",\"mean_train_score\" ,\"std_train_score\"]].head()","3134f4d3":"datasetpath = '\/kaggle\/input\/bike-sharing-demand\/'\n\ndf_test = pd.read_csv(os.path.join(datasetpath, 'test.csv'))\n\nprint(\"The shape of the dataset is {}.\".format(df_test.shape))","a578802b":"df_test.head()","75d285d8":"df_test.isnull().sum()","6f933204":"#there is an outlier in the humidity feature as there cant be a humidity of 0%\nhumidity_filter = df_test['humidity'] == 0\nprint(\"sum of rows where humidity equals zero:\", humidity_filter.sum())","b11548ef":"def PreprocessingData(_df):\n    df = _df.copy()\n    \n    # extracting datetime relative information\n    df[\"datetime\"] = pd.to_datetime(df.datetime)\n    df['year'] = df['datetime'].dt.year\n    df['month'] = df['datetime'].dt.month\n    df['day'] = df['datetime'].dt.day\n    df['hour'] = df['datetime'].dt.hour\n    df['DayName'] = df['datetime'].dt.day_name()\n    \n    # extracting Parts of Day feature\n    df['Morning'] = np.where((5 <= df.hour) & (df.hour <= 12), 1, 0)\n    df['Afternoon'] = np.where((12 < df.hour) & (df.hour <= 17), 1, 0)\n    df['Evening'] = np.where((17 < df.hour) & (df.hour <= 21), 1, 0)\n    df['Night'] = np.where((21 < df.hour) | (df.hour < 5 ), 1, 0)\n    \n    #data enconding (one hot encoding) for DayName categroical feature\n    encoded_col = pd.get_dummies(df['DayName'])\n    df = df.join(encoded_col).drop(columns='DayName')\n    \n    return df","cfa9d6eb":"print(df_test.shape)\ndf_test = PreprocessingData(df_test)\nprint(df_test.shape)","eea99b64":"df_test","952a2247":"# Drop 'datatime' column from X_test\nX_test = df_test.drop(columns=['datetime'])\n\n# Predicting 'count' using grid_search for xgboost\ny_test_predicted = grid_search.predict(X_test)\n\n#to return the values of log(y+1) to y -> we perform the operation round(e^(log(y+1)) -1)\ndf_test['count'] = np.round(np.exp(y_test_predicted) - 1) \n\ndf_test.head()","e684392e":"df_test[['datetime', 'count']].to_csv('submission.csv', index=False)","7cbc57b5":"### Read train data set","83cd250e":"Check for if there is humidity(%) equal zero in the test data","9df8158b":"Remove outlier in humidity(%) equal zero. <br>\n[The concept of zero percent relative humidity \u2014 air completely devoid of water vapor \u2014 is intriguing, but given Earth\u2019s climate and weather conditions, it\u2019s an impossibility.](https:\/\/wgntv.com\/weather\/can-the-relative-humidity-ever-be-zero-percent\/)","e29b4039":"Check for nulls in test data","63cf7a95":"### Import Packages for Visualization","256b0fc7":"### Splitting data for training","60a8b83b":"Preprocessing Data","2d2912d0":"### Evaluting over test data","228878eb":"Add Parts of the Day as feature (Morning [5 am to 12 pm], Afternoon [12 pm to 5 pm], Evening [5 pm to 9 pm], Night [9 pm to 4 am]). <br>\n[source](https:\/\/www.learnersdictionary.com\/qa\/parts-of-the-day-early-morning-late-morning-etc)"}}