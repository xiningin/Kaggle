{"cell_type":{"d48d3cb8":"code","81b366da":"code","1a35d4ef":"code","153762ef":"code","12f8055e":"code","9c401bd5":"code","0708bca5":"code","7259f091":"code","d88d7e8a":"code","cb937393":"code","9b24f62c":"code","a09f5724":"code","96d79766":"code","83634bed":"code","9d346479":"code","648dafeb":"code","4b69c88c":"code","6a70a563":"code","2ac22690":"code","4fde2ade":"code","d53e9100":"code","a9f4467a":"code","ef0022b6":"code","1fa71525":"code","cb810c8e":"code","79994faa":"code","874ae0ed":"code","5d0228e2":"code","968ab00e":"code","beb5ef9f":"code","2eafbe3c":"code","0494a793":"code","f2a7252a":"code","13d0ad34":"code","59a68763":"code","04ae3881":"code","bd9a4931":"code","8847b188":"markdown","b753b861":"markdown","da62340c":"markdown","970ecb2c":"markdown","675a2c0d":"markdown","8cb32bcb":"markdown","1048579a":"markdown","ba37642e":"markdown","0e1f8fec":"markdown","b44621b6":"markdown","bce65d53":"markdown","093cea56":"markdown","ae3c1ef4":"markdown","90a260e8":"markdown","d0cc137d":"markdown","125a2b3a":"markdown","540f9970":"markdown","f67d7391":"markdown","43cd4878":"markdown","ed04dee5":"markdown","7fad03bd":"markdown","c0428fa7":"markdown","5c90f092":"markdown","375b5b65":"markdown","203f5e08":"markdown","0b1684b8":"markdown"},"source":{"d48d3cb8":"import numpy as np\nimport pandas as pd\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nBASE_PATH = '\/kaggle\/input\/kakr-4th-competition\/'\nimport os \nfor dirname, _, filenames in os.walk('BASE_PATH'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nsns.set_style(\"whitegrid\")","81b366da":"train_data = pd.read_csv('..\/input\/kakr-4th-competition\/train.csv')\nprint('Reading train data...')\nprint(train_data.shape)\nprint(train_data.info)\ntrain_data.head()","1a35d4ef":"test_data = pd.read_csv('..\/input\/kakr-4th-competition\/test.csv')\nprint('Reading test data...')\nprint(test_data.shape)\nprint(test_data.info)\ntest_data.head()","153762ef":"sample_sub = pd.read_csv('..\/input\/kakr-4th-competition\/sample_submission.csv')\nprint('Reading sample_submission data...')\nprint(sample_sub.shape)\nprint(sample_sub.info)\nsample_sub.head()","12f8055e":"train_data.describe()","9c401bd5":"test_data.describe()","0708bca5":"sample_sub.describe()","7259f091":"# plotly\n!pip install chart_studio\nimport plotly.express as px\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot","d88d7e8a":"import seaborn as sns\nsns.set(style=\"whitegrid\")\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# plotly\n!pip install chart_studio\nimport plotly.express as px\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\n\nimport cufflinks as cf\ncf.go_offline()\ncf.set_config_file(world_readable=True, theme='polar')\n\nimport lightgbm as lgb\n\nfrom time import time\nfrom tqdm import tqdm_notebook\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import f1_score\nwarnings.simplefilter('ignore')\nsns.set()\n%matplotlib inline","cb937393":"df_train = pd.read_csv(os.path.join(BASE_PATH, 'train.csv'))","9b24f62c":"df_train['income'].value_counts(normalize=True).iplot(kind='bar',\n                                                      linecolor='black',\n                                                      opacity=0.6,\n                                                      color='red',\n                                                      bargap=0.8,\n                                                      gridcolor='white',\n                                                      xTitle='Income',\n                                                      yTitle='Percentage',\n                                                      title='Distribution of the Target column in the training dataset')","a09f5724":"df_train['age'].iplot(kind='hist',\n                      bins=15,\n                      color='blue',\n                      xTitle='age',\n                      yTitle='Count',\n                      title='Distribution of Final weight')","96d79766":"sns.kdeplot(df_train.loc[df_train['income'] == '<=50K', 'age'], label='<=50K', shade=True)\nsns.kdeplot(df_train.loc[df_train['income'] == '>50K', 'age'], label='>50K', shade=True)\n\nplt.xlabel('Age')\nplt.ylabel('Density')","83634bed":"df_train['sex'].value_counts(normalize=True).iplot(kind='bar',\n                                                   linecolor='black',\n                                                   opacity=0.6,             \n                                                   color='black',\n                                                   bargap=0.8,\n                                                   gridcolor='white',\n                                                   xTitle='Gender',\n                                                   yTitle='Percentage',\n                                                   title='Distribution of the Gender column in the training set')","9d346479":"df_gender_target = df_train.groupby(['income', 'sex'])['id'].count().to_frame().reset_index()\ndf_gender_target.style.background_gradient(cmap='Reds')","648dafeb":"sns.catplot(x='income', y='id', hue='sex', data=df_gender_target, kind='bar')\nplt.ylabel('Count')\nplt.xlabel('Income')","4b69c88c":"df_train['education'].iplot(kind='hist',\n                      bins=15,\n                      color='blue',\n                      xTitle='education',\n                      yTitle='Count',\n                      title='Education Distribution')","6a70a563":"df_education_target = df_train.groupby(['income', 'education'])['id'].count().to_frame().reset_index()\ndf_education_target.style.background_gradient(cmap='Reds')","2ac22690":"sns.catplot(x='income', y='id', hue='education', data=df_education_target, kind='bar')\nplt.ylabel('Count')\nplt.xlabel('Income')","4fde2ade":"df_train['education_num'].iplot(kind='hist',\n                      bins=15,\n                      color='brown',\n                      xTitle='education_num',\n                      yTitle='Count',\n                      title='Education_num Distribution')","d53e9100":"df_education_num_target = df_train.groupby(['income', 'education_num'])['id'].count().to_frame().reset_index()\ndf_education_num_target.style.background_gradient(cmap='Reds')","a9f4467a":"sns.catplot(x='income', y='id', hue='education_num', data=df_education_num_target, kind='bar')\nplt.ylabel('Count')\nplt.xlabel('Income')","ef0022b6":"df_train['marital_status'].iplot(kind='hist',\n                      bins=15,\n                      color='pink',\n                      xTitle='marital_status',\n                      yTitle='Count',\n                      title='Marital_status Distribution')","1fa71525":"df_marital_status_target = df_train.groupby(['income', 'marital_status'])['id'].count().to_frame().reset_index()\ndf_marital_status_target.style.background_gradient(cmap='Reds')","cb810c8e":"sns.catplot(x='income', y='id', hue='marital_status', data=df_marital_status_target, kind='bar')\nplt.ylabel('Count')\nplt.xlabel('Income')","79994faa":"df_train['occupation'].iplot(kind='hist',\n                      bins=15,\n                      color='pink',\n                      xTitle='occupation',\n                      yTitle='Count',\n                      title='Occupation Distribution')","874ae0ed":"df_occupation_target = df_train.groupby(['income', 'occupation'])['id'].count().to_frame().reset_index()\ndf_occupation_target.style.background_gradient(cmap='Reds')","5d0228e2":"sns.catplot(x='income', y='id', hue='occupation', data=df_occupation_target, kind='bar')\nplt.ylabel('Count')\nplt.xlabel('Income')","968ab00e":"df_train['workclass'].iplot(kind='hist',\n                      bins=15,\n                      color='red',\n                      xTitle='education_num',\n                      yTitle='Count',\n                      title='Workclass Distribution')","beb5ef9f":"df_workclass_target = df_train.groupby(['income', 'workclass'])['id'].count().to_frame().reset_index()\ndf_workclass_target.style.background_gradient(cmap='Reds')","2eafbe3c":"sns.catplot(x='income', y='id', hue='workclass', data=df_workclass_target, kind='bar')\nplt.ylabel('Count')\nplt.xlabel('Income')","0494a793":"df_train['race'].iplot(kind='hist',\n                      bins=15,\n                      color='red',\n                      xTitle='education_num',\n                      yTitle='Count',\n                      title='Race Distribution')","f2a7252a":"df_race_target = df_train.groupby(['income', 'race'])['id'].count().to_frame().reset_index()\ndf_race_target.style.background_gradient(cmap='Reds')","13d0ad34":"sns.catplot(x='income', y='id', hue='race', data=df_race_target, kind='bar')\nplt.ylabel('Count')\nplt.xlabel('Income')","59a68763":"df_train['native_country'].iplot(kind='hist',\n                      bins=14,\n                      color='red',\n                      xTitle='education_num',\n                      yTitle='Count',\n                      title='Native Country Distribution')","04ae3881":"df_native_country_target = df_train.groupby(['income', 'native_country'])['id'].count().to_frame().reset_index()\ndf_native_country_target.style.background_gradient(cmap='Reds')","bd9a4931":"#sns.catplot(x='income', y='id', hue='native_country', data=df_native_country_target, kind='bar')\n#plt.ylabel('Count')\n#plt.xlabel('Income')","8847b188":"### 11. Occupation & Target","b753b861":"### 15. Race & Target","da62340c":"Data Description\uc744 \ud1b5\ud574 train\/test\uc758 14\uac1c columns\uacfc, train\uc5d0\uc11c \uc608\uce21\ud574\uc57c \ud558\ub294 target \uac12 feature\uae4c\uc9c0 1\uac1c\uac00 \uc788\ub2e4\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4. \n\n* id\n* age : \ub098\uc774\n* workclass : \uace0\uc6a9 \ud615\ud0dc\n* fnlwgt : \uc0ac\ub78c \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58 (final weight\uc758 \uc57d\uc790)\n* education : \uad50\uc721 \uc218\uc900\n* education_num : \uad50\uc721 \uc218\uc900 \uc218\uce58\n* marital_status: \uacb0\ud63c \uc0c1\ud0dc\n* occupation : \uc5c5\uc885\n* relationship : \uac00\uc871 \uad00\uacc4\n* race : \uc778\uc885\n* sex : \uc131\ubcc4\n* capital_gain : \uc591\ub3c4 \uc18c\ub4dd\n* capital_loss : \uc591\ub3c4 \uc190\uc2e4\n* hours_per_week : \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04\n* native_country : \uad6d\uc801\n* income : \uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12)\n    * 50K \ubbf8\ub9cc : 1\n    * 50K \uc774\uc0c1 : 0","970ecb2c":"### 9. Marital_status & Target","675a2c0d":"### 7. Education_num & Target","8cb32bcb":"### 4. Gender Distribution - \uc131\ubcc4","1048579a":"# \ucc38\uace0\n\n* PE Detection with Keras - Model Creation(https:\/\/www.kaggle.com\/seraphwedd18\/pe-detection-with-keras-model-creation)\n* [KaKr] \ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d(EDA) \uc124\uba85 + \uc608\uc2dc(https:\/\/www.kaggle.com\/subinium\/kakr-eda)\n* [KaKr] EDA with plotly + LGBM(https:\/\/www.kaggle.com\/nevret93\/kakr-eda-with-plotly-lgbm)\n* \uce90\ud558~ EDA + LightGBM + PyCaret(https:\/\/www.kaggle.com\/teddylee777\/eda-lightgbm-pycaret)","ba37642e":"### 17. Native Country & Target","0e1f8fec":"## plotly, seaborn \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud65c\uc6a9\ud55c \ub370\uc774\ud130 \uc2dc\uac01\ud654","b44621b6":"### 14. Race Distribution - \uc778\uc885","bce65d53":"### 2. Age Distribution - \ub098\uc774","093cea56":"### 12. Workclass Distribution","ae3c1ef4":"### 7. Education & Target","90a260e8":"### 16. Native Country Distribution","d0cc137d":"describe\uc744 \uc0ac\uc6a9\ud558\uba74 \uc218\uce58\ud615 \ub370\uc774\ud130\uc758 \ub2e4\uc74c \ud1b5\uacc4\uac12\uc744 \ucd94\ucd9c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n* count : \uac1c\uc218\n* mean : \ud3c9\uade0\n* std : \ud45c\uc900 \ud3b8\ucc28\n* min : \ucd5c\uc19f\uac12\n* 25% : \uc81c 1\uc0ac\ubd84\uc704\uac12\n* 50% : \uc911\uc559\uac12, \uc911\uc704\uac12\n* 75% : \uc81c 3\uc0ac\ubd84\uc704\uac12\n* max : \ucd5c\ub313\uac12\n\n\ubc94\uc8fc\ud615 \ub370\uc774\ud130\uc758 \uacbd\uc6b0 include='O'\ub97c \ucd94\uac00\ud558\uc5ec \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","125a2b3a":"### 6. Education Distribution - \uad50\uc721 \uc218\uc900","540f9970":"## CSV \ub370\uc774\ud130 \ub85c\ub4dc","f67d7391":"### 8. Education_num Distribution - \uad50\uc721 \uc218\uc900 \uc218\uce58","43cd4878":"### 13. Workclass & Target","ed04dee5":"### 8. Marital_status Distribution - \uacb0\ud63c \uc0c1\ud0dc","7fad03bd":"### 5. Gender & Target","c0428fa7":"## \ub77c\uc774\ube0c\ub7ec\ub9ac \ud638\ucd9c \ubc0f I\/O","5c90f092":"### 1. Target column","375b5b65":"### 10. Occupation Distribution - \uc5c5\uc885","203f5e08":"### 3. Age & Target","0b1684b8":"# [T-Academy X KaKr] \uc131\uc778 \uc778\uad6c\uc870\uc0ac \uc18c\ub4dd \uc608\uce21 \ub300\ud68c\n* \ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d(EDA)\n* pyTorch \uae30\ubc18\uc758 BaseLine \uad6c\uc131"}}