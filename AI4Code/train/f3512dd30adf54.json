{"cell_type":{"d119560f":"code","81b9e734":"code","fe85b7b4":"code","4d53ef12":"code","7743ca2b":"code","a0bbd46c":"code","11cc9d56":"code","3b6987cb":"code","03f838f3":"code","ecde3a4d":"code","2b560cce":"code","13d6c6e2":"code","ed243f60":"code","ec604e1d":"code","4d366df4":"code","2fa1051d":"code","874e2911":"code","5f885f31":"code","536faf79":"code","285ce726":"code","dc3c3310":"code","6f0c12b8":"code","d7235dca":"markdown","9518300c":"markdown","5851cf0e":"markdown","3dd5ec32":"markdown","7dd1437f":"markdown"},"source":{"d119560f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\nimport cv2\nimport skimage\nfrom skimage.transform import resize\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)","81b9e734":"batch_size = 64\nimageSize = 64\ntarget_dims = (imageSize, imageSize, 3)\nnum_classes = 29\ntrain_len = 87000\ntrain_dir = '\/kaggle\/input\/asl-alphabet\/asl_alphabet_train\/asl_alphabet_train\/'\ntest_dir = '\/kaggle\/input\/asl-alphabet\/asl_alphabet_test\/asl_alphabet_test\/'","fe85b7b4":"classes = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', \n           'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', \n           'W', 'X', 'Y', 'Z', 'nothing', 'space', 'del']","4d53ef12":"def data_generation(folder):\n    X = np.empty((train_len, imageSize, imageSize, 3), dtype=np.float32)\n    y = np.empty((train_len,), dtype=np.int)\n    i = 0\n    for folderName in os.listdir(folder):\n        if not folderName.startswith('.'):\n            for image_filename in os.listdir(folder + folderName):\n                img_file = cv2.imread(folder + folderName + '\/' + image_filename)\n                if img_file is not None:\n                    img_file = skimage.transform.resize(img_file, (imageSize, imageSize, 3))\n                    img_arr = np.asarray(img_file).reshape((-1, imageSize, imageSize, 3))\n                    \n                    X[i] = img_arr\n                    y[i] = classes.index(folderName)\n                    i += 1\n    return X,y\nX_train, y_train = data_generation(train_dir)","7743ca2b":"print(\"X_train shape : \", X_train.shape)\nprint(\"y_train shape : \", y_train.shape)\nprint(\"Image shape : \", X_train[0].shape)","a0bbd46c":"f, axs = plt.subplots(2,2,figsize=(8,8))\nfor i in range (0,9):\n    plt.subplot(3,3,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    img_nbr = np.random.randint(0,len(X_train))\n    plt.imshow(X_train[img_nbr])\n    plt.title(classes[y_train[img_nbr]])","11cc9d56":"# copies of the data\n\nX_data = X_train\ny_data = y_train","3b6987cb":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.3,stratify=y_data)","03f838f3":"# One-Hot-Encoding the categorical data\n\nfrom tensorflow.keras.utils import to_categorical\ny_cat_train = to_categorical(y_train,29)\ny_cat_test = to_categorical(y_test,29)","ecde3a4d":"# Checking the dimensions of all the variables\n\nprint(X_train.shape)\nprint(y_train.shape)\n\nprint(X_test.shape)\nprint(y_test.shape)\n\nprint(y_cat_train.shape)\nprint(y_cat_test.shape)","2b560cce":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Activation, Dense, Flatten","13d6c6e2":"model = Sequential([\n    Conv2D(32, (5, 5), input_shape=(64, 64, 3)),\n    Activation('relu'),\n    MaxPooling2D((2, 2)),\n    \n    Conv2D(64, (3, 3)),\n    Activation('relu'),\n    MaxPooling2D((2, 2)),\n    \n    tf.keras.layers.Dropout(rate=0.3),\n    \n    Conv2D(64, (3, 3)),\n    Activation('relu'),\n    MaxPooling2D((2, 2)),\n    \n    Flatten(),\n    Dense(128, activation='relu'),\n    Dense(29, activation='softmax')\n])\n\nmodel.summary()","ed243f60":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss',patience=2)","ec604e1d":"model.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)","4d366df4":"history = model.fit(\n    X_train, y_cat_train,\n    epochs=50,\n    batch_size=64,\n    verbose=2,\n    validation_data=(X_test, y_cat_test),\n    callbacks=[early_stop]\n)","2fa1051d":"history_df = pd.DataFrame(history.history)\nhistory_df.loc[0:, ['loss', 'val_loss']].plot()\nplt.show()","874e2911":"history_df.loc[0:, ['accuracy','val_accuracy']].plot()\nplt.show()","5f885f31":"# muliclass prediction\npredictions = np.argmax(model.predict(X_test), axis=-1)","536faf79":"predictions","285ce726":"f, axs = plt.subplots(2,2,figsize=(15,15))\nfor i in range (0,25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    img_nbr = np.random.randint(0,len(predictions))\n    plt.imshow(X_data[img_nbr])\n    plt.title(\"True={} ; Predicted={} \".format(classes[(y_test[img_nbr])], classes[(predictions[img_nbr])]))","dc3c3310":"from sklearn.metrics import confusion_matrix\nplt.figure(figsize=(8,8))\nsns.heatmap(confusion_matrix(y_test,predictions))\nplt.show()","6f0c12b8":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","d7235dca":"### Importing libraries","9518300c":"## Data processing","5851cf0e":"## Predictions","3dd5ec32":"## Model","7dd1437f":"## Generating train and test data"}}