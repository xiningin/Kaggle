{"cell_type":{"6eded0bf":"code","2ee368fa":"code","86bf8f18":"code","c7f7c566":"code","146e76c8":"code","6cd783f9":"code","eae29561":"code","70ccdd87":"code","a2a93e34":"code","2406b476":"code","3ca03faa":"code","f3da64f6":"code","943c1baa":"code","4af04c33":"markdown"},"source":{"6eded0bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2ee368fa":"#Load data\ntrainDf = pd.read_csv('..\/input\/train.csv')\ntestDf = pd.read_csv('..\/input\/test.csv')\n\n#Dropping features that don't seem to contribute to the survival chance\ntrainDf = trainDf.drop(['PassengerId', 'Ticket', 'Cabin'], axis=1)\ntestDf = testDf.drop(['Ticket', 'Cabin'], axis=1)\n\ncombine = [trainDf, testDf]\n","86bf8f18":"#Extract titles\nfor dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(', ([A-Za-z]+)\\.')\npd.crosstab(trainDf['Title'], trainDf['Sex'])","c7f7c566":"#Replace rare titles with string \"Rare\"\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Capt', 'Col', 'Don', 'Jonkheer', 'Lady',\n                                                'Major', 'Mlle', 'Mme', 'Ms', 'Rev', 'Sir',\n                                                'Dr'], 'Rare')\ntrainDf['Title'].unique()","146e76c8":"#Convert categorical titles to ordinal\ntitle_mapping = {\"Mr\": 1, 'Mrs': 2, 'Miss': 3, 'Master': 4, 'Rare': 5}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n    dataset['Title'] = dataset['Title'].astype('int64')\n\n#Drop 'Name' feature from the dataset\ntrainDf = trainDf.drop(['Name'], axis=1)\ntestDf = testDf.drop(['Name'], axis=1)    \ncombine = [trainDf, testDf]\n","6cd783f9":"#Convert Sex feature to numerical value 0\/1\nfor dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 0, 'male': 1})\n","eae29561":"guess_age = np.zeros([2, 3])\n#Replace missing value of age based on title and sex\n#2 possible values of Sex\nfor dataset in combine:\n    for i in range(0, 2):\n        #3 possible values of class\n        for j in range(0, 3):\n            guess_df = dataset.loc[(dataset['Sex'] == i) & \\\n                                  (dataset['Pclass'] == j+1), ['Age']].dropna()\n            guess_age[i, j] = guess_df.mean()\n            dataset.loc[(dataset['Sex'] == i) & \\\n                       (dataset['Pclass'] == j+1) &\\\n                       dataset['Age'].isnull(), ['Age']] = guess_age[i, j]\n    dataset['Age'] = dataset['Age'].astype('int64')","70ccdd87":"#Create age band\ntrainDf['Ageband'] = pd.cut(trainDf['Age'], 5)\ntrainDf[['Ageband', 'Survived']].groupby('Ageband').mean()\n\n#Replace Age with ordinals\nfor dataset in combine:\n    dataset.loc[dataset['Age'] < 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] >= 16) & (dataset['Age'] < 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] >= 32) & (dataset['Age'] < 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] >= 48) & (dataset['Age'] < 64), 'Age'] = 3\n    dataset.loc[(dataset['Age'] >= 64) & (dataset['Age'] < 80), 'Age'] = 4\n    dataset.loc[dataset['Age'] > 80, 'Age'] = 5\n","a2a93e34":"#Create fair band\ntrainDf['Fareband'] = pd.qcut(trainDf['Fare'], 4)\ntrainDf[['Fareband', 'Survived']].groupby('Fareband').mean()\n\n#Replace fare and embarked with ordinal\nfor dataset in combine:\n    dataset.loc[(dataset['Fare'] < 8), 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] >= 8) & (dataset['Fare'] < 14), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] >= 14) & (dataset['Fare'] < 31), 'Fare'] = 2\n    dataset.loc[(dataset['Fare'] >= 31) & (dataset['Fare'] < 513), 'Fare'] = 3\n    dataset.loc[(dataset['Embarked'] == 'S'), 'Embarked'] = 0\n    dataset.loc[(dataset['Embarked'] == 'C'), 'Embarked'] = 1\n    dataset.loc[(dataset['Embarked'] == 'Q'), 'Embarked'] = 2\n    dataset['Embarked'] = dataset['Embarked'].fillna(0)\n    dataset['Fare'] = dataset['Fare'].fillna(0)\ntrainDf = trainDf.drop(['Ageband', 'Fareband'], axis=1)","2406b476":"#Training data\nX_train = trainDf.drop('Survived', axis=1)\nY_train = trainDf['Survived']\nX_test = testDf.drop('PassengerId', axis=1)\nX_train.shape, Y_train.shape, X_test.shape\n\n","3ca03faa":"from sklearn.linear_model import LogisticRegression\n#Logistic Regression\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nacc = logreg.score(X_train, Y_train)","f3da64f6":"#Random forest\nfrom sklearn.ensemble import RandomForestClassifier\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nacc = random_forest.score(X_train, Y_train)\nprint(acc)","943c1baa":"Y_pred = random_forest.predict(X_test)\nsubmission = pd.DataFrame({\n            'PassengerId': testDf['PassengerId'],\n            'Survived': Y_pred\n            })\nsubmission.to_csv('submission.csv', index=False)","4af04c33":"To complete the missing values in the Age column, we can use the title extracted from the names. "}}