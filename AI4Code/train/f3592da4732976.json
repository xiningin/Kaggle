{"cell_type":{"004a2c29":"code","42e95cf8":"code","6559bf41":"code","f335acee":"code","3eb9a667":"code","656819c9":"code","5c4e24ac":"code","ef66c70e":"code","5c4bc83f":"code","9ce3fabc":"code","ca6f00c7":"code","4f539955":"code","2ca67e57":"code","ddfce34a":"markdown","68f568c3":"markdown","6c5e2eac":"markdown"},"source":{"004a2c29":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","42e95cf8":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as pplt\n","6559bf41":"#load the csv file\npokeman=pd.read_csv('..\/input\/pokeman\/pokemon.csv')","f335acee":"#let look at the first 10 rows with pandas head function\n\npokeman.head(10)","3eb9a667":"#let look at the number of rows and columns using pandas shape attribute\npokeman.shape","656819c9":"# 800 rows\n# 13 columns\npokeman.columns","5c4e24ac":"# Let create a bar chart for generation by using seaborn countplot function\nsns.countplot(data=pokeman, x='Generation');","ef66c70e":"#let fixed the color as it makes viewing of the plot a little had to read\nbar_color=sns.color_palette()[0]","5c4bc83f":"sns.countplot(data=pokeman, x='Generation', color=bar_color);","9ce3fabc":"# Now let sort the generation\npokemon_sort=pokeman['Generation'].value_counts().index","ca6f00c7":"sns.countplot(data=pokeman, x='Generation', order=pokemon_sort, color=bar_color);","4f539955":"# we can either rotate the the bar plot 90 with matplotlib xticks function or\n# change the x value to y in the countplot function\nsns.countplot(data=pokeman, y='Type 1', color=bar_color, order=pokeman['Type 1'].value_counts().index);","2ca67e57":"# we can see water has the most in type and flying the least","ddfce34a":"# now let take a look at pokemon type","68f568c3":"- it turns out the pokemon with the most generation was in 1, 5 and 3\n-  while 6 has the least","6c5e2eac":"# few points\n- Start the plot from zero\n- with ordered categorical sorting must not be done base on frequency"}}