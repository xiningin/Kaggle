{"cell_type":{"48dc1a9f":"code","115ec040":"code","4357a914":"code","7ec8cc5d":"code","04047750":"code","684ca5ca":"code","f2e4c6cb":"code","171cee7b":"code","52c7ad5f":"code","016a60ed":"code","8e543962":"code","fafaa1b7":"code","107d6a77":"code","762fffb9":"code","8936b570":"code","6a138fef":"code","1f7ab172":"code","7f9e2cf3":"code","832aa826":"code","c38e919f":"code","c15e68a2":"code","ecc28b9c":"code","c4188550":"code","2c0d8c91":"code","495733c6":"code","ba249728":"code","0bdc8079":"code","3ffab8b7":"markdown","ade92169":"markdown","b7e2f7ca":"markdown","69265ae2":"markdown","9da6994f":"markdown","0857bfd3":"markdown","2fdf2623":"markdown","1bd49e89":"markdown","be4d2d10":"markdown","b078ebf6":"markdown","9d77e620":"markdown","129464d5":"markdown","01e26a53":"markdown","12ed53b8":"markdown","8ceb5b53":"markdown","c2c66d6a":"markdown","a7c6e591":"markdown"},"source":{"48dc1a9f":"!pip install -U spacy","115ec040":"!python -m spacy download en_core_web_lg","4357a914":"!python -m spacy download en_core_web_sm","7ec8cc5d":"!pip install wordcloud","04047750":"import spacy\nnlp = spacy.load('en_core_web_sm')","684ca5ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f2e4c6cb":"nietzsche_file = '..\/input\/books-of-friedrich-nietzsche\/Thus Spoke Zarathustra.txt'\nwith open(nietzsche_file) as f: # The with keyword automatically closes the file when you are done\n    print (f.read(3000))","171cee7b":"import spacy\nnlp = spacy.load(\"en_core_web_sm\")\n\ndoc = nlp(\"The phrase: The rearing of the Superman, has very often been misunderstood.\")\nfor token in doc:\n    print(token.text, token.pos_, token.dep_)","52c7ad5f":"import spacy\nnlp = spacy.load('en_core_web_sm')\n\n# Create a nlp object\ndoc = nlp(\"the object of mankind should lie in its highest individuals\")","016a60ed":"nlp.pipe_names","8e543962":"nlp.disable_pipes('tagger', 'parser')","fafaa1b7":"nlp.pipe_names","107d6a77":"import spacy\n\nnlp = spacy.load('en_core_web_sm')\ndoc = nlp(\" has put in ban all that is beautiful, strong, proud, and powerful 1 * 1 ml ac\")\nfor token in doc:\n    print(token.text)","762fffb9":"nlp = spacy.load('en_core_web_sm')\n\n# Create an nlp object\ndoc = nlp(\"Also sprach Zarathustra: Ein Buch f\u00fcr Alle und Keinen\")\n \n# Iterate over the tokens\nfor token in doc:\n    # Print the token and its part-of-speech tag\n    print(token, token.tag_, token.pos_, spacy.explain(token.tag_))","8936b570":"from spacy import displacy\n\ndoc = nlp(\"Also sprach Zarathustra: Ein Buch f\u00fcr Alle und Keinen\")\ndisplacy.render(doc, style=\"dep\" , jupyter=True)","6a138fef":"nlp = spacy.load('en_core_web_sm')\n\n# Create an nlp object\ndoc = nlp(\"Also sprach Zarathustra: Ein Buch f\u00fcr Alle und Keinen\")\n \n# Iterate over the tokens\nfor token in doc:\n    # Print the token and its part-of-speech tag\n    print(token.text, \"-->\", token.dep_)","1f7ab172":"spacy.explain(\"nsubj\"), spacy.explain(\"ROOT\"), spacy.explain(\"aux\"),spacy.explain('nmod'), spacy.explain(\"advcl\"), spacy.explain(\"dobj\")","7f9e2cf3":"nlp = spacy.load('en_core_web_sm')\n\n# Create an nlp object\ndoc = nlp(\"Also sprach Zarathustra: Ein Buch f\u00fcr Alle und Keinen\")\n \n# Iterate over the tokens\nfor token in doc:\n    # Print the token and its part-of-speech tag\n    print(token.text, \"-->\", token.lemma_)","832aa826":"nlp = spacy.load('en_core_web_sm')\n\n# Create an nlp object\ndoc = nlp(\"Thus Spoke Zarathustra. Ideas of the author: the Order of Rank, the Will to Power, the Transvaluation of All Values.\")\n \nsentences = list(doc.sents)\nlen(sentences)","c38e919f":"for sentence in sentences:\n     print (sentence)","c15e68a2":"nlp = spacy.load(\"en_core_web_sm\")\ndoc = nlp(\"Also sprach Zarathustra: Ein Buch f\u00fcr Alle und Keinen\")\n#See the entity present\nprint(doc.ents)\nfor ent in doc.ents:\n    print(ent.text, ent.start_char, ent.end_char, ent.label_)","ecc28b9c":"from spacy import displacy\nnlp = spacy.load(\"en_core_web_sm\")\ndoc= nlp(u\"\"\" Even among the Greeks, it was the individuals that counted. \n\n\"The Greeks are interesting and extremely important be \ncause they reared such a vast number of great individuals. How \nwas this possible? The question is one which ought to be \nstudied. \n\n\"I am interested only in the relations of a people to the \nrearing of the individual man, and among the Greeks the \nconditions were unusually favorable for the development of \nthe individual; not by any means owing to the goodness of the \npeople, but because of the struggles of their evil instincts.\"\"\")\n\nentities=[(i, i.label_, i.label) for i in doc.ents]\nentities","c4188550":"displacy.render(doc, style = \"ent\",jupyter = True)","2c0d8c91":"nlp = spacy.load(\"en_core_web_lg\")\ntokens = nlp(\"overflowing with life and elevated to his zenith the Superman\")\n\nfor token in tokens:\n    print(token.text, token.has_vector, token.vector_norm, token.is_oov)","495733c6":"nlp = spacy.load(\"en_core_web_lg\")  # make sure to use larger model!\ntokens = nlp(\"Overpowering passion as the aim of our life, hope, and will\")\n\nfor token1 in tokens:\n    for token2 in tokens:\n        print(token1.text, token2.text, token1.similarity(token2))","ba249728":"from wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\n\nfrom wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\nnlp = spacy.load(\"en_core_web_lg\")  # make sure to use larger model!\ntokens = nlp(\"Never yet hath there been a Superman. Naked have I seen both of them, the greatest and the smallest man: All-too-similar are they still to each other. Verily even the greatest found I all-too-human!\")\n\nnewText =''\nfor word in tokens:\n if word.pos_ in ['ADJ', 'NOUN']:\n  newText = \" \".join((newText, word.text.lower()))\n\nwordcloud = WordCloud(stopwords=STOPWORDS).generate(newText)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","0bdc8079":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient. Mar\u00edlia Prata, @mpwolke was Here.' )","3ffab8b7":"Thus Spoke Zarathustra: A Book for All and None (German: Also sprach Zarathustra: Ein Buch f\u00fcr Alle und Keinen, also translated as Thus Spake Zarathustra) is a philosophical novel by German philosopher Friedrich Nietzsche, composed in four parts written and published between 1883 and 1885.\n\nMuch of the work deals with ideas such as the \"eternal recurrence of the same,\" the parable on the \"death of God\" and the \"prophecy\" of the \u00dcbermensch, which were first introduced in The Gay Science. Nietzsche himself considered Zarathustra to be his magnum opus.\nhttps:\/\/en.wikipedia.org\/wiki\/Thus_Spoke_Zarathustra","ade92169":"#Entity Detection","b7e2f7ca":"#Video: 2001: A Space Odyssey (1968) - Opening scene - Also sprach Zarathustra (HD)\nhttps:\/\/www.youtube.com\/watch?v=NAIgtu-pLDU\n\nAlso sprach Zarathustra, Op. 30, Thus Spoke Zarathustra or Thus Spake Zarathustra is a tone poem by Richard Strauss, composed in 1896 and inspired by Friedrich Nietzsche's philosophical 1883-1885 novel Thus Spoke Zarathustra. The composer conducted its first performance on 27 November 1896 in Frankfurt. A typical performance lasts half an hour.\n\nThe initial fanfare \u2013 titled \"Sunrise\" in the composer's programme notes. \u2013 became well known after its use in Stanley Kubrick's 1968 film 2001: A Space Odyssey.\nhttps:\/\/en.wikipedia.org\/wiki\/Also_sprach_Zarathustra","69265ae2":"#Create an NLP object","9da6994f":"#Tokenization","0857bfd3":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcR_3O86531xzkCKS7kw6NcToU7b13_2DIYDQQ&usqp=CAU)brooklinebooksmith-shop","2fdf2623":"#Codes by Rithesh Yadav   https:\/\/www.kaggle.com\/ritesh2000\/spacy-guide-all-in-one\/notebook","1bd49e89":"#WordCloud","be4d2d10":"#Part-Of-Speech (POS) Tagging","b078ebf6":"#Lemmatization","9d77e620":"<iframe width=\"727\" height=\"409\" src=\"https:\/\/www.youtube.com\/embed\/NAIgtu-pLDU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>","129464d5":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQKqjU8HOk5GFKsXoed4RA6mS8qB8EaLFp0iw&usqp=CAU)medium.com","01e26a53":"#Similarity","12ed53b8":"spaCy is an open-source software library for advanced natural language processing, written in the programming languages Python and Cython. The library is published under the MIT license and its main developers are Matthew Honnibal and Ines Montani, the founders of the software company Explosion.\nhttps:\/\/en.wikipedia.org\/wiki\/SpaCy","8ceb5b53":"#Dependency Parsing","c2c66d6a":"#Sentence Boundary Detection (SBD)","a7c6e591":"#Named Entity Recognition (NER)"}}