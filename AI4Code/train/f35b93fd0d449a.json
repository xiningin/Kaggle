{"cell_type":{"ad1bd4d9":"code","0859ab0c":"code","d5813e02":"code","bb6bcce6":"code","7f1f56e9":"code","586bfae1":"code","bb401c8f":"code","d020776a":"code","43dee18d":"code","9628e91c":"code","86e77ff9":"code","19fe3edb":"code","c1796468":"code","bbd44b0c":"code","17c5438e":"code","cc7d280a":"code","47fb00e7":"code","05a7a499":"code","1bfa63d9":"code","aebed474":"code","85b3f7cd":"code","6aff87eb":"code","ebe372d1":"code","716a7b43":"code","2ca90e72":"code","81a605f5":"code","9f7fa4d3":"code","48dd02e5":"code","6387e29d":"code","1af28b29":"code","541a6813":"code","05c6fbe7":"code","58222409":"code","ae3df4b3":"code","81b570bf":"code","673c5f88":"code","0ef3db1b":"code","8bc4a5b2":"code","0d7a8dd6":"code","1155be59":"code","4c8ad3e1":"code","88d00fe7":"code","7aeb31bc":"markdown","674fb7ad":"markdown","2f14210f":"markdown","807e8165":"markdown","2c32003b":"markdown","35e117a5":"markdown","54bcc5a0":"markdown","ec8aca74":"markdown","108b1b31":"markdown","1f4f0f4a":"markdown","9109a101":"markdown","2f70ec91":"markdown","c5725e2b":"markdown","530449d7":"markdown","95a2b136":"markdown","beb93f6e":"markdown","92e5d869":"markdown","a0115257":"markdown","f7eb3c0d":"markdown","9c33fab8":"markdown","cde01f09":"markdown","cb7ec186":"markdown","08adf1b4":"markdown"},"source":{"ad1bd4d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0859ab0c":"import warnings\nwarnings.filterwarnings('ignore')","d5813e02":"df = pd.read_csv('\/kaggle\/input\/daily-climate-time-series-data\/DailyDelhiClimateTrain.csv', index_col='date', parse_dates=True)\ndf.head()","bb6bcce6":"df.index.freq='D'","7f1f56e9":"df.info()","586bfae1":"df['meantemp'].plot(figsize=(15,5));","bb401c8f":"from statsmodels.tsa.seasonal import seasonal_decompose\nimport matplotlib.pyplot as plt","d020776a":"seasonal_decompose(df['meantemp']).plot();","43dee18d":"seasonal_decompose(df['meantemp']).observed.plot(figsize=(12,4));","9628e91c":"seasonal_decompose(df['meantemp']).resid.plot(figsize=(12,4));","86e77ff9":"seasonal_decompose(df['meantemp']).trend.plot(figsize=(12,4));","19fe3edb":"seasonal_decompose(df['meantemp']).seasonal.plot(figsize=(12,4));","c1796468":"from statsmodels.tsa.stattools import adfuller","bbd44b0c":"def test_adfuller(df):\n    result = adfuller(df)\n    labels = ['adf value', 'p-value', '# lags', '# observation']\n    out = pd.Series(result[:4], index=labels)\n    \n    for key,val in result[4].items():\n        out['critical '+key]=val\n    \n    print(out)\n    \n    if(result[1] <= 0.5):\n        print(\"Strong evidence against the null hypothesis\")\n        print(\"Reject the null hypothesis\")\n        print(\"Data has no unit root and is stationary\")\n    else:\n        print(\"Weak evidence against the null hypothesis\")\n        print(\"Fail to reject the null hypothesis\")\n        print(\"Data has a unit root and is non-stationary\")","17c5438e":"test_adfuller(df['meantemp'])","cc7d280a":"# !pip install pmdarima --> run at console\nfrom pmdarima import auto_arima","47fb00e7":"auto_arima(df['meantemp'], seasonal=False).summary()","05a7a499":"len(df)","1bfa63d9":"train = df[:-365]\ntest = df[-365:]","aebed474":"len(train)","85b3f7cd":"len(test)","6aff87eb":"from statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.arima_model import ARIMA, ARMA","ebe372d1":"model = ARIMA(train['meantemp'],order=(1,1,1))\nresults = model.fit()\nresults.summary()","716a7b43":"start=len(train)\nend=len(train)+len(test)-1\npredictions = results.predict(start=start, end=end, dynamic=False, typ='levels').rename('ARIMA(1,1,1) Predictions')","2ca90e72":"test['meantemp'].plot(legend=True,figsize=(12,6))\npredictions.plot(legend=True)","81a605f5":"resample_monthly_temp = df['meantemp'].resample('MS').mean()","9f7fa4d3":"resample_monthly_temp.plot(figsize=(12,6))","48dd02e5":"len(resample_monthly_temp)","6387e29d":"resample_monthly_temp.head()","1af28b29":"seasonal_decompose(resample_monthly_temp).plot();","541a6813":"test_adfuller(resample_monthly_temp)","05c6fbe7":"auto_arima(resample_monthly_temp,seasonal=True, m=12).summary()","58222409":"train = resample_monthly_temp[:-13]\ntest = resample_monthly_temp[-13:]","ae3df4b3":"test","81b570bf":"model = SARIMAX(train,order=(2,0,2), seasonal_order=(2,1,[],12), m=12)\nresults = model.fit()\nresults.summary()","673c5f88":"start=len(train)\nend=len(train)+len(test)-1\npredictions = results.predict(start=start, end=end).rename('SARIMAX(2, 0, 2)x(2, 1, [], 12) Predictions')","0ef3db1b":"test.plot(legend=True,figsize=(12,6))\npredictions.plot(legend=True)","8bc4a5b2":"from sklearn.metrics import mean_squared_error\n\nerror = mean_squared_error(test, predictions)\nprint('Mean Squared Error ',error)","0d7a8dd6":"from statsmodels.tools.eval_measures import rmse\n\nerror = rmse(test, predictions)\nprint('Root Mean Squared Error ',error)","1155be59":"model = SARIMAX(resample_monthly_temp,order=(2,0,2), seasonal_order=(2,1,0,12), m=12)\nresults = model.fit()\nfcast = results.predict(len(resample_monthly_temp)-1,len(resample_monthly_temp)+11,typ='levels').rename('SARIMA(2,0,2)(2,1,0,12) Forecast')","4c8ad3e1":"fcast","88d00fe7":"resample_monthly_temp.plot(legend=True,figsize=(12,6))\nfcast.plot(legend=True)","7aeb31bc":"# Importing the below '**warnings**' package in order to ignore some unimportant warnings","674fb7ad":"# Visulization of Monthly Temperature","2f14210f":"# Visualization of Test Data vs Predicted Data","807e8165":"# Resampling to Monthly Dataset as Monthly Climate Change gives more insights","2c32003b":"# Spliting train\/test data","35e117a5":"# Checking if the dataset have missing values","54bcc5a0":"# Visualization of 'meantemp' values for 2013 - 2017","ec8aca74":"# Importing dataset with date as Index with DateTimestamp","108b1b31":"# Augmented Dickey Fuller Test for Stationarity of Data","1f4f0f4a":"# Fit SARIMAX(2, 0, 2)x(2, 1, 0, 12) model","9109a101":"# Fit ARIMA(1, 1, 1) model","2f70ec91":"# Forecasted Values","c5725e2b":"# Splitting Train and Test Data","530449d7":"# Run pmdarima.auto_arima to obtain the recommended orders with least AIC","95a2b136":"# Prediction and Evaluation","beb93f6e":"# ETS Decomposition","92e5d869":"# Visualization of Forecast Data along with Historical Data","a0115257":"# Prediction for Test Data","f7eb3c0d":"# ETS Decompositon","9c33fab8":"# Training with the entire Dataset","cde01f09":"# Performing ADF test for stationarity of Data","cb7ec186":"# Run pmdarima.auto_arima to obtain the recommended orders with least AIC","08adf1b4":"# Setting the frequency as Daily 'D'"}}