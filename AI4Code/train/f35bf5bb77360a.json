{"cell_type":{"638ecf39":"code","b7405c31":"code","7a6d5cd2":"code","080555e5":"code","ab77d77a":"code","f5d761e9":"code","0243d2a7":"code","767f736f":"code","bf3334c7":"code","417daa56":"code","8f32b6d1":"code","ee12c781":"code","e4b083f2":"code","39b685b6":"code","e3cf3226":"code","37f28673":"code","17e3f792":"code","c7623189":"code","51ce5ade":"code","f213666c":"code","5bac3464":"code","0778724d":"code","a125099e":"code","a0543f98":"code","93c22e2d":"code","d5e2ca5c":"code","0aaa7392":"code","cc093edf":"code","e6033839":"code","9b72e974":"code","e1ddb7bf":"code","28f97ec2":"code","a3ce3cff":"code","8c298eb7":"code","9505444f":"code","8ffe13e9":"code","073afe08":"code","25629693":"markdown"},"source":{"638ecf39":"# import necessary libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# suppressing warnings\nimport warnings\nwarnings.filterwarnings('ignore')","b7405c31":"# Read the data\ntrain = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/train.csv\")\ntest  = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/test.csv\")\nsub = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/sample_submission.csv\")","7a6d5cd2":"# check dataset information\ntrain.info()","080555e5":"# check sample data\ntrain.head()","ab77d77a":"train.tail()","f5d761e9":"train['breath_id'].value_counts().sort_values()","0243d2a7":"test.head()","767f736f":"#Drop the id column from both train and test. Drop target variable 'pressure' from input dataframe\nX = train.drop(columns = ['pressure', 'id'], axis=1)","bf3334c7":"X.head()","417daa56":"test.drop(columns = 'id', inplace = True)","8f32b6d1":"test.head()","ee12c781":"# Select target\ny = pd.DataFrame(train['pressure'])\ny.head()\n","e4b083f2":"print(\"Train shape: \", train.shape, \"\\nTest shape: \", test.shape)","39b685b6":"# Checking if there are missing values in the datasets\ntrain.isna().sum().sum(), test.isna().sum().sum()","e3cf3226":"#Getting summary statistics\ntrain.describe().T","37f28673":"test.describe().T","17e3f792":"# Select categorical columns \ncategorical_cols = [cname for cname in X.columns if X[cname].dtype == \"object\"]\ncategorical_cols","c7623189":"# Select numerical columns\nnumerical_cols = [cname for cname in X.columns if X[cname].dtype in ['int64', 'float64']]\nnumerical_cols","51ce5ade":"#visualize output varaible\nplt.figure(figsize = (10,5))\nsns.distplot(a = y['pressure'], kde = False)","f213666c":"# Visualisation of all other numerical variables \nfor col in numerical_cols: \n    plt.figure(figsize = (10,5))\n    sns.distplot(a = X[col], kde = False) ","5bac3464":"#Pressure magnitude distributions with respect to expiratory valves [closed (0) & open(1)]\nplt.title(\"Pressure when Expiratory valve closed\");\nsns.kdeplot(train[train[\"u_out\"]==0][\"pressure\"]);\n","0778724d":"plt.title(\"Pressure when Expiratory valve opened\");\nsns.kdeplot(train[train[\"u_out\"]==1][\"pressure\"]);","a125099e":"sns.scatterplot(x='u_in',y='pressure',hue='u_out',data=train);","a0543f98":"# Checks if there is any variables with zero variance\nX.std() \n# Drops variables with 0 variance\n\nZero_std_cols = X.std()[X.std() == 0].index\n\nX = X.drop(Zero_std_cols, axis = 1) ","93c22e2d":"X.head()","d5e2ca5c":"print(\"Time-steps count for each breath in train set: \",train.groupby(\"breath_id\").size().value_counts().keys()[0])\nprint(\"Time-steps count for each breath in test set: \",test.groupby(\"breath_id\").size().value_counts().keys()[0])","0aaa7392":"# Select numerical columns\nupdated_numerical_cols = [cname for cname in X.columns if X[cname].dtype in ['int64', 'float64']]\nupdated_numerical_cols","cc093edf":"# creates a min max scaler for numerical columns\nfrom sklearn import preprocessing\ndata_scaler = preprocessing.MinMaxScaler(feature_range=(0,1)) \nX[updated_numerical_cols] = data_scaler.fit_transform(X[updated_numerical_cols])\ntest[updated_numerical_cols] = data_scaler.transform(test[updated_numerical_cols])","e6033839":"X.head()","9b72e974":"from sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n    \nmodel = XGBRegressor(n_estimators=1000, learning_rate=0.05, tree_method = 'gpu_hist')\nmodel.fit(X_train, y_train)   ","e1ddb7bf":"model.score(X_test, y_test)","28f97ec2":"preds = model.predict(test)","a3ce3cff":"pred_pressure = pd.DataFrame({'pressure': preds[:]})","8c298eb7":"pred_pressure","9505444f":"sub['pressure'] = pred_pressure['pressure']","8ffe13e9":"sub.head()","073afe08":" sub.to_csv(\"submission3.csv\", index=False)","25629693":"Columns\n\nid - globally-unique time step identifier across an entire file\n\nbreath_id - globally-unique time step for breaths\n\nR - lung attribute indicating how restricted the airway is (in cmH2O\/L\/S). Physically, this is the change in pressure per change in flow (air volume per time). Intuitively, one can imagine blowing up a balloon through a straw. We can change R by changing the diameter of the straw, with higher R being harder to blow.\n\nC - lung attribute indicating how compliant the lung is (in mL\/cmH2O). Physically, this is the change in volume per change in pressure. Intuitively, one can imagine the same balloon example. We can change C by changing the thickness of the balloon\u2019s latex, with higher C having thinner latex and easier to blow. time_step - the actual time stamp.\n\nu_in - the control input for the inspiratory solenoid valve. Ranges from 0 to 100.\n\nu_out - the control input for the exploratory solenoid valve. Either 0 or 1.\n\npressure - the airway pressure measured in the respiratory circuit, measured in cmH2O."}}