{"cell_type":{"c58e5296":"code","d1c0bc28":"code","9c3b9ef8":"code","c7e1309e":"code","ade78e1a":"code","baeaf273":"code","af6184a4":"code","2f902dd1":"code","9d7ef85b":"code","81a83047":"code","62e840fc":"code","df92d076":"code","ebb4e841":"code","074f6d89":"code","e4fe351f":"code","dcfe68c2":"code","3a328716":"code","c665133e":"code","cb470316":"code","c1cad624":"code","3a362b67":"code","d8e8df46":"code","7b493c6e":"code","a517d3d8":"code","eabbcb00":"code","384156ce":"code","1747f3a2":"code","46309664":"code","17b6863f":"code","a1a7c620":"code","b92594ca":"code","dc976f31":"code","b250f704":"code","f1a78efd":"code","238ec647":"code","fefad96b":"code","9582289b":"code","849e0625":"code","774cfa26":"code","7c760ac2":"code","8ed43a8c":"code","e9fd4833":"code","c8de2693":"code","dca2eee2":"code","95ed9e42":"code","baeb4f99":"code","e104b2a8":"code","09022652":"code","268af699":"code","f7b0b515":"code","b77652d3":"code","c0e96c3b":"code","8335a6df":"code","55ed86eb":"code","3a6e433a":"code","feb217c2":"code","cd166312":"markdown","6d638ce2":"markdown","f795fdc0":"markdown","04d3eecc":"markdown","55726a1a":"markdown","6ee73fe1":"markdown","6ec9ac08":"markdown","5817711a":"markdown","3b796fe8":"markdown","a473c2b0":"markdown","ae59239a":"markdown","547e40ce":"markdown","dd59012d":"markdown","acfb1a1e":"markdown","169c917b":"markdown","c235cf36":"markdown","394dc53c":"markdown","d2b70051":"markdown","3519b656":"markdown","2a973150":"markdown","78e254d9":"markdown","6fadc360":"markdown","809344d3":"markdown","15018d08":"markdown","9354c090":"markdown","7a360193":"markdown","f85d895a":"markdown","cb1a32db":"markdown","0224e3d0":"markdown","baef6109":"markdown","a3e9f2d5":"markdown","36df413b":"markdown","cdc334fa":"markdown","72c93254":"markdown","70b38fe1":"markdown","ae43382a":"markdown","9628237e":"markdown","79bee062":"markdown","62ff3c2d":"markdown","c9ab82e7":"markdown","f75cea41":"markdown","664602f9":"markdown","95ec21b2":"markdown","7ecbbf02":"markdown","c8e107b6":"markdown"},"source":{"c58e5296":"import numpy as np \nimport pandas as pd\n\n# plottinf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","d1c0bc28":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ngender = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","9c3b9ef8":"train.head()","c7e1309e":"gender.head()","ade78e1a":"train.columns","baeaf273":"gender.columns","af6184a4":"train.dtypes","2f902dd1":"gender.dtypes","9d7ef85b":"train.isna().sum()","81a83047":"test.isna().sum()","62e840fc":"gender.isna().sum()","df92d076":"train.info()\nprint('_'*40)\ntest.info()","ebb4e841":"gender.info()","074f6d89":"train.describe(include=['O'])","e4fe351f":"test.describe(include=['O'])","dcfe68c2":"gender.describe()","3a328716":"test = test.assign(Survived = gender['Survived']) ","c665133e":"columns = ['Name', 'Ticket', 'Cabin']\ntrain.drop(columns, axis=1, inplace=True)","cb470316":"test.drop(columns, axis=1, inplace=True)","c1cad624":"train.dropna(subset=['Embarked'], how='all', inplace=True)","3a362b67":"train['Age'] = train['Age'].fillna((train['Age'].mean()))","d8e8df46":"test['Age'] = test['Age'].fillna((train['Age'].mean()))\ntest['Fare'] = test['Fare'].fillna((train['Fare'].mean()))","7b493c6e":"PassengerId_train = train['PassengerId']","a517d3d8":"PassengerId_test = test['PassengerId']","eabbcb00":"train.drop('PassengerId', axis=1, inplace=True)","384156ce":"test.drop('PassengerId', axis=1, inplace=True)","1747f3a2":"train_Pclass_Survived = train[['Pclass', 'Survived']].groupby(['Pclass']) #use just Pclass and Survived and group by Pclass","46309664":"train_Pclass_Survived.mean().sort_values(by='Survived', ascending = False)","17b6863f":"train_Age_Survived = train[['Age', 'Survived']].groupby(['Age']) #use just Age and Survived and group by Pclass","a1a7c620":"train_Age_Survived.mean().sort_values(by='Age', ascending = False)","b92594ca":"train_Sex_Survived = train[['Sex', 'Survived']].groupby(['Sex']) #use just Sex and Survived and group by Pclass","dc976f31":"train_Sex_Survived.mean().sort_values(by='Sex', ascending = False)","b250f704":"h = sns.FacetGrid(train, col='Survived')\nh.map(plt.hist, 'Age')","f1a78efd":"grid = sns.FacetGrid(train, col='Survived', row='Pclass')\ngrid.map(plt.hist, 'Age', bins=20)\ngrid.add_legend()","238ec647":"train.info()","fefad96b":"train_oneHot = pd.get_dummies(train)","9582289b":"test_oneHot = pd.get_dummies(test)","849e0625":"test_oneHot.info()","774cfa26":"x_train = train_oneHot.drop(\"Survived\", axis=1)\ny_train = train_oneHot[\"Survived\"]","7c760ac2":"x_test = test_oneHot.drop(\"Survived\", axis=1)\ny_test = test_oneHot[\"Survived\"]","8ed43a8c":"logreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_test)\nscore_log = logreg.score(x_test, y_test)\nscore_log","e9fd4833":"svc = SVC()\nsvc.fit(x_train, y_train)\ny_pred = svc.predict(x_test)\nscore_svc = svc.score(x_test, y_test)\nscore_svc","c8de2693":"knn = KNeighborsClassifier(n_neighbors = 5)\nknn.fit(x_train, y_train)\ny_pred = knn.predict(x_test)\nscore_knn = knn.score(x_test, y_test)\nscore_knn","dca2eee2":"gNB = GaussianNB()\ngNB.fit(x_train, y_train)\ny_pred = gNB.predict(x_test)\nscore_gNB = gNB.score(x_test, y_test)\nscore_gNB","95ed9e42":"perceptron = Perceptron()\nperceptron.fit(x_train, y_train)\ny_pred = perceptron.predict(x_test)\nscore_perceptron = perceptron.score(x_train, y_train)\nscore_perceptron","baeb4f99":"linear_svc = LinearSVC()\nlinear_svc.fit(x_train, y_train)\ny_pred = linear_svc.predict(x_test)\nscore_linear_svc = linear_svc.score(x_test, y_test)\nscore_linear_svc","e104b2a8":"sgd = SGDClassifier()\nsgd.fit(x_train, y_train)\ny_pred = sgd.predict(x_test)\nscore_sgd = sgd.score(x_test, y_test)\nscore_sgd","09022652":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(x_train, y_train)\ny_pred = decision_tree.predict(x_test)\nscore_decision_tree = decision_tree.score(x_test, y_test)\nscore_decision_tree","268af699":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(x_train, y_train)\ny_pred = random_forest.predict(x_test)\nscore_random_forest = random_forest.score(x_test, y_test)\nscore_random_forest","f7b0b515":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [score_svc, score_knn, score_log, \n              score_random_forest, score_gNB, score_perceptron, \n              score_sgd, score_linear_svc, score_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","b77652d3":"logreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_test)\nscore_log = logreg.score(x_test, y_test)\nscore_log","c0e96c3b":"train = train.assign(PassengerId = PassengerId_train)\ntest = test.assign(PassengerId = PassengerId_test)","8335a6df":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": y_pred\n    })\n","55ed86eb":"submission.info()","3a6e433a":"submission.to_csv('submission.csv', index = False) ","feb217c2":"submission.info()","cd166312":"**Drop**:\n* PassengerId (do not contribute)\n* Name (do not contribute)\n* Ticket (high ratio of duplicates)\n* Cabin (high number of missing values)","6d638ce2":"## Dealing with missing values","f795fdc0":"Drop PassengerId ","04d3eecc":"**KNN**","55726a1a":"**Data type**\n* Categorical: Survived, Sex, and Embarked;\n* Ordinal: Pclass;\n* Continous: Age, Fare; \n* Discrete: SibSp, Parch.","6ee73fe1":"**Gaussian Naive Bayes**","6ec9ac08":"### Verify if there is any missing value in each column","5817711a":"* Passengers in the 3 class are less likely to have survived","3b796fe8":"Logistic Regression is provides the best model","a473c2b0":"Put back the PassengerId column","ae59239a":"First separete de features and the target:","547e40ce":"The oldest passengers have not survived. But this table is inconclusive about other middle ages.","dd59012d":"## Predictions","acfb1a1e":"Drop line without value in Embarked column in train","169c917b":"* PassagerId: the ID of each passager\n* Survived: if the passager survived","c235cf36":"**Some assumptions about the data**\n* Womem were more likely to have survived.\n* Children were more likely to have survived.\n* The upper-class passengers were more likely to have survived.","394dc53c":"**Random Forest**","d2b70051":"**Train dataset**\n* 177 passengers with NaN age\n* 687 passengers with NaN Cabin\n* 2 passengers with NaN Embarked","3519b656":"Dataset with the PassengerId","2a973150":"# Analyzing the data","78e254d9":"**Test dataset**\n* 86 passengers with NaN age\n* 327 passengers with NaN Cabin\n","6fadc360":"**Stochastic Gradient Descent**","809344d3":"Apply one hot encoded to get numerical values","15018d08":"**Summarize the results**","9354c090":"**Linear SVC**","7a360193":"Assign gender dataframe to test dataframe","f85d895a":"Logistic Regression:","cb1a32db":"**Decision Tree**","0224e3d0":"![](http:\/\/)","baef6109":"Use the predictive modelling algorithms:\n* Logistic Regression\n* KNN or k-Nearest Neighbors\n* Support Vector Machines\n* Naive Bayes classifier\n* Decision Tree\n* Random Forrest\n* Perceptron\n* Artificial neural network\n* RVM or Relevance Vector Machine","a3e9f2d5":"**Support Vector Machines**","36df413b":"![](http:\/\/)","cdc334fa":"Passengers at the first class are more likely to have survived","72c93254":"## Conclusion","70b38fe1":"Take off people without information about Embarked in train dataset","ae43382a":"Female are mor likely to have survived","9628237e":"* PassagerId: the ID of each passager\n* Survived: if the passager survived\n* Pclas: class of each passager\n* Name: name of each passager\n* Sex: sex os each passager\n* Age: age of each passager\n* SibSp: (number of siblings on board) \/ (number of spouse on board)\n* ParCh: (number of Parents on board) \/ (number of Children on board)\n* Ticket: number of the ticket\n* Fare: ticket price\n* Cabin: identification of the cabin\n* Embarked: if the passager embarked or not\n","79bee062":"# Setting the libraries","62ff3c2d":"**Perceptron**","c9ab82e7":"**gender dataset**\n* No missing value","f75cea41":"* People with age between 20 and 40 are more likely to have survived","664602f9":"### Verify correlation","95ec21b2":"# Setting the data","7ecbbf02":"Fill NaN values in Age column with avarege ","c8e107b6":"### Data type in each column"}}