{"cell_type":{"90e995cd":"code","c002b76c":"code","a2fad2fd":"code","1ff2a8a9":"code","a542f538":"code","a32cf066":"code","a51f4939":"code","4456ac5d":"code","3544933f":"code","5ef40e5f":"code","b0824cac":"code","613d6ba5":"code","e6d773ad":"code","02527ebc":"code","39b58f0e":"code","56f5b3f6":"code","e53fb05f":"code","1eb9d2c2":"code","84f5824f":"code","89a7ec54":"code","bda177d3":"code","ccecc19a":"code","ce25756d":"code","88671cdb":"code","d3a9fb1f":"code","a32277d3":"code","a7d3425b":"code","f4f1f1aa":"code","af3296ef":"code","2aeeb37c":"code","4f43ced9":"code","bc7b65e5":"code","001cc039":"code","6db4ca31":"code","44f14a49":"code","2f49d1b1":"code","477b7390":"code","d33616e6":"code","3669085f":"code","4ec4059d":"code","0ceea839":"code","3d84c3bf":"code","a6848b76":"code","29cb5e82":"code","34396c16":"code","e909a73a":"code","80ce5421":"code","1fed560f":"code","ac9e55ba":"code","944a0e84":"code","0a6bacb0":"code","fa933fbb":"code","bfddf00f":"code","040f0ae1":"code","3ef13f4c":"code","17c284fa":"code","4b66befe":"code","3481e377":"code","8526770b":"code","fdfdb201":"code","cc005802":"code","eb71d8e2":"code","72917f56":"code","370effb4":"code","4af36866":"code","5719787f":"code","e706dbbe":"code","1513dae8":"code","525c81a8":"code","a195e5e7":"code","f743c993":"code","9ed80f39":"code","da819209":"code","be7324c2":"code","72112771":"code","bfa7ff23":"code","e3d88c8f":"code","28b18d0c":"code","549cfd9b":"code","d1a2d71a":"code","a90ef877":"code","fb2c29c4":"code","56384d74":"code","dcb78676":"code","b90f8428":"code","7c9a2f2b":"code","9a2e756f":"code","019a0abc":"code","880299c0":"code","d7916281":"code","0581bb2b":"code","b45eb3c3":"code","ee43a0d0":"code","f150167e":"code","c1461ad9":"code","98aa9341":"code","70ec4eec":"markdown","ec62119d":"markdown","1ee9d795":"markdown","c02e06c8":"markdown","da2a34e0":"markdown","6ab4ad22":"markdown"},"source":{"90e995cd":"import numpy as np","c002b76c":"import pandas as pd","a2fad2fd":"import os","1ff2a8a9":"import seaborn as sns","a542f538":"import matplotlib as mpl","a32cf066":"%matplotlib inline","a51f4939":"import matplotlib.pyplot as plt\nfrom scipy import stats\nplt.rcParams['xtick.labelsize']=8\nplt.rcParams['ytick.labelsize']=8","4456ac5d":"import plotly","3544933f":"import plotly.plotly as py\nimport plotly.graph_objs as go","5ef40e5f":"from plotly import tools","b0824cac":"from plotly.offline import init_notebook_mode, iplot","613d6ba5":"from plotly.offline import plot","e6d773ad":"print(plotly.__version__)","02527ebc":"import calendar","39b58f0e":"plt.style.use(\"seaborn\")","56f5b3f6":"plt.style.use(\"seaborn\")","e53fb05f":"import heapq, string, os, random","1eb9d2c2":"from datetime import datetime","84f5824f":"from wordcloud import WordCloud, STOPWORDS","89a7ec54":"from PIL import Image","bda177d3":"import folium","ccecc19a":"from folium import plugins","ce25756d":"from IPython.display import HTML, display","88671cdb":"import collections ","d3a9fb1f":"from collections import Counter","a32277d3":"GV=pd.read_csv(\"..\/input\/gun-violence-data\/gun-violence-data_01-2013_03-2018.csv\")","a7d3425b":"GV.info() # total usage","f4f1f1aa":"\nGV.memory_usage() # usage by column","af3296ef":"GV.describe()","2aeeb37c":"GV.head(5)","4f43ced9":"#Number of Rows\nGV.shape[0]","bc7b65e5":"#Number of Columns\nGV.shape[1]","001cc039":"GV.index","6db4ca31":"GV.dtypes","44f14a49":"#Column Names\nGV.columns.values","2f49d1b1":"GV.columns","477b7390":"GV['state'].value_counts()","d33616e6":"#Arranging DateTime column into its component\nGV['date']=pd.to_datetime(GV['date'])\nGV.dtypes\n","3669085f":"GV['year'] = GV['date'].dt.year\nGV['month'] = GV['date'].dt.month\nGV['monthday'] = GV['date'].dt.day\nGV['weekday'] = GV['date'].dt.weekday\nGV.shape","4ec4059d":"GV['casualty']=GV['n_killed']+GV['n_injured']\n","0ceea839":"#Segregating data Gender wise\n\nGV[\"participant_gender\"] = GV[\"participant_gender\"].fillna(\"0::Unknown\")\n    \ndef gender(n) :                    \n    gender_rows = []               \n    gender_row = str(n).split(\"||\")    \n    for i in gender_row :              \n        g_row = str(i).split(\"::\")  \n        if len(g_row) > 1 :         \n            gender_rows.append(g_row[1])    \n\n    return gender_rows\n\ngender_series = GV.participant_gender.apply(gender)\nGV[\"total_participant\"] = gender_series.apply(lambda x: len(x))\nGV[\"male_participant\"] = gender_series.apply(lambda i: i.count(\"Male\"))\nGV[\"female_participant\"] = gender_series.apply(lambda i: i.count(\"Female\"))\nGV[\"unknown_participant\"] = gender_series.apply(lambda i: i.count(\"Unknown\"))","3d84c3bf":"GV_null=GV.isnull().sum()","a6848b76":"GV_dup=GV.duplicated().sum() # count of duplicates\nGV_dup","29cb5e82":"GV_na=GV.isna().sum()","34396c16":"GV_nan=pd.concat([GV_null,GV_na],axis=1)\nGV_nan\n","e909a73a":"#Remove data not required \nGV.drop([\n    \"incident_url\",\n    \"source_url\",\n    \"incident_url_fields_missing\",\n    \"sources\"\n], axis=1, inplace=True)\n","80ce5421":"#year with maximum incidents recorded \nGV.year.value_counts().tail(10).plot(kind = 'bar', figsize = (15,15))\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.legend('States')\nplt.title('Gun Violence Incidents by year')\nplt.ylabel('Number of incidents')\nplt.xlabel('Year')","1fed560f":"#Momth with  incidents recorded \nGV.month.value_counts().tail(10).plot(kind = 'bar', figsize = (15,15))\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.legend('States')\nplt.title('Gun Violence Incidents by year')\nplt.ylabel('Number of incidents')\nplt.xlabel('Month')","ac9e55ba":"#weekday with incidents recorded \nGV.weekday.value_counts().tail(10).plot(kind = 'bar', figsize = (15,15))\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.legend('States')\nplt.title('Gun Violence Incidents by year')\nplt.ylabel('Number of incidents')\nplt.xlabel('Day')","944a0e84":"#Total count Killed  Yearly due to Gun Violence\n\nGV_yearly=GV.groupby(GV[\"year\"]).apply(lambda x: pd.Series(dict(No_Killed=x.n_killed.sum())))\nGV_yearly_plot=sns.pointplot(x=GV_yearly.index, y=GV_yearly.No_Killed, data=GV_yearly,label=\"yearly_vs_killed\")\nGV_yearly","0a6bacb0":"#Total count Killed  Monthly due to Gun Violence\n\nGV_yearly=GV.groupby(GV[\"month\"]).apply(lambda x: pd.Series(dict(No_Killed=x.n_killed.sum())))\nGV_yearly_plot=sns.pointplot(x=GV_yearly.index, y=GV_yearly.No_Killed, data=GV_yearly,label=\"yearly_vs_killed\")\nGV_yearly","fa933fbb":"#Total count Injured  Yearly due to Gun Violence\n\nGV_yearly=GV.groupby(GV[\"year\"]).apply(lambda x: pd.Series(dict(No_Injured=x.n_injured.sum())))\nGV_yearly_plot=sns.pointplot(x=GV_yearly.index, y=GV_yearly.No_Injured, data=GV_yearly,label=\"yearly_vs_killed\")\nGV_yearly","bfddf00f":"#Total count Injured  Monthly due to Gun Violence\n\nGV_yearly=GV.groupby(GV[\"month\"]).apply(lambda x: pd.Series(dict(No_Injured=x.n_injured.sum())))\nGV_yearly_plot=sns.pointplot(x=GV_yearly.index, y=GV_yearly.No_Injured, data=GV_yearly,label=\"yearly_vs_killed\")\nGV_yearly","040f0ae1":"import plotly\nplotly.offline.init_notebook_mode() # run at the start of every ipython notebook\nGV_cas = GV.reset_index().groupby(by=['state']).agg({'casualty':'sum', 'year':'count'}).rename(columns={'year':'count'})\nGV_cas['state'] = GV_cas.index\n\ntrace1 = go.Bar(\n    x=GV_cas['state'],\n    y=GV_cas['count'],\n    name='Number of Incidents',\n)\ntrace2 = go.Bar(\n    x=GV_cas['state'],\n    y=GV_cas['casualty'],\n    name='Total casualty',\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='stack',\n    margin=dict(b=150),\n    legend=dict(dict(x=-.1, y=1.2)),\n        )\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","3ef13f4c":"#reference : https:\/\/github.com\/amueller\/word_cloud & https:\/\/github.com\/amueller\/word_cloud\/blob\/master\/examples\/masked.py\n\ngun_mask = np.array(Image.open('..\/input\/gungviol\/gun_PNG1387.png'))\nstopwords = set(STOPWORDS)\ntxt = \" \".join(GV['gun_type'].dropna())\nwc = WordCloud(mask=gun_mask, max_words=1200, stopwords=STOPWORDS, colormap='spring', background_color='Black').generate(txt)\nplt.figure(figsize=(16,18))\nplt.imshow(wc)\nplt.axis('off')\nplt.title('');\n","17c284fa":"#reference : https:\/\/github.com\/amueller\/word_cloud & https:\/\/github.com\/amueller\/word_cloud\/blob\/master\/examples\/masked.py\n\ngun_mask = np.array(Image.open(\"..\/input\/usawcimg\/USA-states (1).PNG\"))\nstopwords = set(STOPWORDS)\ntxt = \" \".join(GV['location_description'].dropna())\nwc = WordCloud(mask=gun_mask, max_words=1200, stopwords=STOPWORDS, colormap='spring', background_color='Black').generate(txt)\nplt.figure(figsize=(16,18))\nplt.imshow(wc)\nplt.axis('off')\nplt.title('');\n","4b66befe":"GV['state'].value_counts().plot.pie(figsize=(20, 20), autopct='%.2f')\n#Check for values to be displayed\nplt.title(\"State wise pie diagram\")\nplt.ylabel('Number of State')","3481e377":"#  4. Statewise show dates with maximum incidents?- \n\n#Pie Chart\nGV.state.value_counts().head().plot(kind = 'pie', figsize = (15,15))\nplt.legend(\"state\")\nplt.title('Statewise distribution of incidents')\nplt.xlabel('Number of incidents')\nplt.ylabel('States')","8526770b":"#State with minimum incidents recorded \nGV.state.value_counts().tail(10).plot(kind = 'bar', figsize = (15,15))\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.legend('States')\nplt.title('Safest States in USA')\nplt.ylabel('Number if incidents')\nplt.xlabel('States')","fdfdb201":"state_s=pd.read_csv(\"..\/input\/statesgv\/states_GV.csv\",index_col=0)\n","cc005802":"gun_killed = (GV[['state','n_killed']]\n              .join(state_s, on='state')\n              .groupby('Abbreviation')\n              .sum()['n_killed']\n             )","eb71d8e2":"layout = dict(\n        title = 'Safe State 2013-2018 ',\n        geo = dict(\n            scope='usa',\n            projection=dict( type='albers usa' ),\n            showlakes = True,\n            lakecolor = 'rgb(255, 255, 255)'),\n             )\ndata = [go.Choropleth(locationmode='USA-states',\n             locations=gun_killed.index.values,\n             text=gun_killed.index,\n             z=gun_killed.values)]\n\nfig = dict(data=data, layout=layout)\n\niplot(fig)","72917f56":"GV['guns'] = GV['n_guns_involved'].apply(lambda x : \"5+\" if x>=5 else str(x))\n\nGV1 = GV['guns'].value_counts().reset_index()\nGV1 = GV1[GV1['index'] != 'nan']\nGV1 = GV1[GV1['index'] != '1.0']\n\nlabels = list(GV1['index'])\nvalues = list(GV1['guns'])\n\ntrace1 = go.Pie(labels=labels, values=values, marker=dict(colors = ['#blueviolet', '#magenta', '#96D38C', '#cyan', '#lime', '#orangered', '#k', '#b', '#aquamarine']))\nlayout = dict(height=600, title='Number of Guns Used', legend=dict(orientation=\"h\"));\nfig = go.Figure(data=[trace1], layout=layout)\niplot(fig)\n","370effb4":"GV_analysis = GV.sort_values(['casualty'], ascending=[False])\nGV_analysis[['date', 'state', 'city_or_county', 'gun_type','n_killed', 'n_injured']].head(10)","4af36866":"Crimecount=GV['state'].value_counts().head(10)\nCrimecount","5719787f":"plt.pie(Crimecount,labels=Crimecount.index,shadow=True)\nplt.title(\"Top 10 High Crime Rate State\")\nplt.axis(\"equal\")","e706dbbe":"state_D=pd.read_csv(\"..\/input\/statessafe\/states_D.csv\",index_col=0)\n","1513dae8":"gun_killed = (GV[['state','n_killed']]\n              .join(state_D, on='state')\n              .groupby('Abbreviation')\n              .sum()['n_killed']\n             )","525c81a8":"layout = dict(\n        title = 'To 10 Dangerous State 2013-2018 ',\n        geo = dict(\n            scope='usa',\n            projection=dict( type='albers usa' ),\n            showlakes = True,\n            lakecolor = 'rgb(255, 255, 255)'),\n             )\ndata = [go.Choropleth(locationmode='USA-states',\n             locations=gun_killed.index.values,\n             text=gun_killed.index,\n             z=gun_killed.values)]\n\nfig = dict(data=data, layout=layout)\n\niplot(fig)","a195e5e7":"#Ref : https:\/\/plot.ly\/python\/horizontal-bar-charts\/\n\nTypes  = \"||\".join(GV['incident_characteristics'].dropna()).split(\"||\")\nincidents = Counter(Types).most_common(20)\ninci1 = [x[0] for x in incidents]\ninci2 = [x[1] for x in incidents]\ntrace1 = go.Scatter(\n    x=inci2[::-2],\n    y=inci1[::-2],\n    name='Incident Report',\n    marker=dict(color='rgba(50, 171, 96, 1.0)'),\n    )\ndata = [trace1]\nlayout = go.Layout(\n    barmode='overlay',\n    margin=dict(l=350),\n    width=900,\n    height=600,\n       title = 'Incident Report',\n)\n\nreport = go.Figure(data=data, layout=layout)\niplot(report)\n","f743c993":"GV.state.value_counts().sort_index().plot(kind = 'barh', figsize = (20,15))\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.legend('States')\nplt.title('Statewise distribution of incidents')\nplt.xlabel('Number of incidents')\nplt.ylabel('States')","9ed80f39":"#State Vs No of People Killed\n#no NAN in State and n_killed\nsns.boxplot('state','n_killed',data=GV)\nplt.xticks(fontsize=8, rotation=90)\nplt.yticks(fontsize=15)\n","da819209":"#Violin plot analysis of number of killed and injured year wise\nimpact_numbers = GV[[\"n_killed\",\"n_injured\"]].groupby(GV[\"year\"]).sum()\nprint(impact_numbers)\nimpact_numbers=sns.violinplot(data=impact_numbers,split=True,inner=\"quartile\")","be7324c2":"## Box Plot for n_killed or n_injured for Chicago data.\nsns.boxplot(\"n_killed\", \"n_injured\", data= GV)","72112771":"df1 = GV.sort_values(['casualty'], ascending=[False])\ndf1[['date', 'state', 'city_or_county', 'address', 'n_killed', 'n_injured']].head(10)","bfa7ff23":"#REf : https:\/\/pythonhow.com\/web-mapping-with-python-and-folium\/\n\n\nmap_GV=GV[GV['n_killed'] >= 3][['latitude', 'longitude', 'casualty', 'n_killed']].dropna()\nm1 = folium.Map([39.50, -98.35], tiles='CartoDB dark_matter', zoom_start=3.5)\n#m2 = folium.Map([39.50, -98.35], zoom_start=3.5, tiles='cartodbdark_matter')\nmarkers=[]\nfor i, row in map_GV.iterrows():\n    casualty = row['casualty']\n    if row['casualty'] > 100:\n        casualty = row['casualty']*0.1 \n    folium.CircleMarker([float(row['latitude']), float(row['longitude'])], radius=float(casualty), color='#blue', fill=True).add_to(m1)\nm1","e3d88c8f":"#Number of person killed vs incident\nsns.jointplot(\"incident_id\",\n             \"n_killed\",\n             GV,\n             kind=\"scatter\",\n             s=100, color=\"m\",edgecolor=\"blue\",linewidth=2)","28b18d0c":"#Swarm plot analysis of number of killed and number of guns involved\nimpact_numbers = GV[[\"n_killed\",\"n_guns_involved\"]].groupby(GV[\"year\"]).sum()\nprint(impact_numbers)\nimpact_numbers=sns.swarmplot(x=\"n_killed\",y=\"n_guns_involved\",data=impact_numbers)","549cfd9b":"#Factor plot analysis of number of killed and injured year wise\nimpact_numbers = GV[[\"n_injured\",\"n_guns_involved\"]].groupby(GV[\"year\"]).sum()\nprint(impact_numbers)\nimpact_numbers=sns.factorplot(data=impact_numbers,split=True,inner=\"quartile\")","d1a2d71a":"#Violin plot analysis of number of killed and injured year wise\nimpact_numbers = GV[[\"total_participant\"]].groupby(GV[\"year\"]).sum()\nprint(impact_numbers)\nimpact_numbers=sns.violinplot(data=impact_numbers,split=True)","a90ef877":"# Plot using Seaborn\nsns.lmplot(x='n_killed', y='n_injured', data=GV,\n           fit_reg=False, \n           hue='state')\n \n# Tweak using Matplotlib\nplt.ylim(0, None)\nplt.xlim(0, None)","fb2c29c4":"#Number of person injured vs incident\nsns.jointplot(\"incident_id\",\n             \"n_injured\",\n             GV,\n             kind=\"scatter\",\n             s=100, color=\"m\",edgecolor=\"red\",linewidth=2)","56384d74":"#Number of Male vs killed\n\nsns.jointplot(\"male_participant\",\n             \"n_killed\",\n             GV,\n             kind=\"scatter\",\n             s=100, color=\"m\",edgecolor=\"red\",linewidth=2)","dcb78676":"#Density plot for yearly incident \nyearly_casulaty = GV[[\"n_killed\", \"n_injured\"]].groupby(GV[\"year\"]).sum()\nd_plot=sns.kdeplot(yearly_casulaty['n_killed'],shade=True,color=\"b\")\nd_plot=sns.kdeplot(yearly_casulaty['n_injured'],shade=True,color=\"g\")\ndel(yearly_casulaty)","b90f8428":"yearly_actor = GV[[\"total_participant\",\"male_participant\", \"female_participant\"]].groupby(GV[\"year\"]).sum()\ndensity_plot=sns.kdeplot(yearly_actor['total_participant'],shade=True,color=\"r\")\ndensity_plot=sns.kdeplot(yearly_actor['male_participant'],shade=True,color=\"g\")\ndensity_plot=sns.kdeplot(yearly_actor['female_participant'],shade=True,color=\"k\")\ndel(yearly_actor)","7c9a2f2b":"sns.distplot(GV.year)","9a2e756f":"g = sns.FacetGrid(GV, col=\"year\", col_wrap=4, ylim=(0, 10))\ng.map(sns.pointplot, \"male_participant\", \"n_killed\", color=\".3\", ci=None);","019a0abc":"g = sns.FacetGrid(GV, col=\"year\", col_wrap=4, ylim=(0, 10))\ng.map(sns.pointplot, \"female_participant\", \"n_killed\", color=\".3\", ci=None);","880299c0":"g = sns.FacetGrid(GV, col=\"year\", col_wrap=4, ylim=(0, 10))\ng.map(sns.pointplot, \"unknown_participant\", \"n_killed\", color=\".3\", ci=None);","d7916281":"sns.boxplot([GV.month, GV.n_injured])","0581bb2b":"sns.boxplot([GV.month, GV.n_killed])","b45eb3c3":"g = sns.FacetGrid(GV, col=\"year\", aspect=.5)\ng.map(sns.barplot, \"n_injured\", \"weekday\")","ee43a0d0":"g = sns.FacetGrid(GV, col=\"year\", aspect=.5)\ng.map(sns.barplot, \"n_killed\", \"weekday\")","f150167e":"g = sns.FacetGrid(GV, col=\"year\")\ng.map(plt.hist, \"male_participant\");","c1461ad9":"sns.set(style=\"ticks\")\ng = sns.FacetGrid(GV, row=\"n_killed\", col=\"year\", margin_titles=True)\ng.map(sns.regplot, \"year\", \"n_guns_involved\", color=\".3\", fit_reg=False, x_jitter=.1);","98aa9341":"g = sns.FacetGrid(GV, hue=\"year\", palette=\"Set1\", size=5, hue_kws={\"marker\": [\"^\", \"v\",\"*\",\">\",\"<\",\"+\"]})\ng.map(plt.scatter, \"male_participant\", \"female_participant\", s=100, linewidth=.10, edgecolor=\"black\")\ng.add_legend();\n","70ec4eec":"# DATA Exploration","ec62119d":"# Conclusion\n\nMost Incidient - Year - 2017\nLeast Incident Year - 2013\nMost Incidient - Month- July\nLeast Incident Month-  November\nMost Incidient - Week day - Saturday\nLeast Incident Week day - Wednesday\n\nMost Killed- Year - 2017\nLeast Killed Year - 2013\nMost Killed- Month- January\nLeast Killed Month-  April\n\nMost injured Year - 2017\nLeast injured Year - 2013\nMost injured Month- January\nLeast injured Month-  Feburary\n\nTop Three Dangerous State\nllinois\nCalifornia\nFlorida\n\nTop Three Safe State\nHawaii\nVermont\nWyoming\n\nTop Three Location where violence happens\n\nAppartment\nPark\nHigh School\n\nNumber of Guns Used\n\n2 Guns - 59%\n5+ Guns - 18.2%\n3 Guns- 15.9%\n4 Guns - 6.87%\nTop Three Gun Types recorded\n\nUnknown\nHandgun\nAuto \/ Rifile\n\nTop Three Incidents\nShot -Dead (Murder, accidental & Sucide)\nShots fired (No Injuries)\nRoberry with Injury \/ death","1ee9d795":"# Data Cleansing\nCLeaning and removing unnecessary Data","c02e06c8":"# Data Administration\n\nMaking Data easier to Read and more organized","da2a34e0":"#","6ab4ad22":"# Gun Violence Data\n\nComprehensive record of over 260k US gun violence incidents from 2013-2018\n\nContent\n\nThis project aims to change that; we make a record of more than 260k gun violence incidents, with detailed information about each incident, available in CSV format. We hope that this will make it easier for data scientists and statisticians to study gun violence and make informed predictions about future trends.\nThe CSV file contains data for all recorded gun violence incidents in the US between January 2013 and March 2018, inclusive.\n\nColumns\n\nincident_id  ID of the crime report \ndate             Date of crime \nstate                State of crime \ncity_or_county City\/ County of crime \naddress Address of the location of the crime n_killed Number of people killed n_injured Number of people injured incident_url URL regarding the incident source_url Reference to the reporting source incident_url_fields_missing TRUE if the incident_url is present, FALSE otherwise congressional_district Congressional district id gun_stolen Status of guns involved in the crime (i.e. Unknown, Stolen, etc...) gun_type Typification of guns used in the crime incident_characteristics Characteristics of the incidence latitude Location of the incident location_description longitude Location of the incident n_guns_involved Number of guns involved in incident notes Additional information of the crime participant_age Age of participant(s) at the time of crime participant_age_group Age group of participant(s) at the time crime participant_gender Gender of participant(s) participant_name Name of participant(s) involved in crime participant_relationship Relationship of participant to other participant(s) participant_status Extent of harm done to the participant participant_type Type of participant sources state_house_district state_senate_district"}}