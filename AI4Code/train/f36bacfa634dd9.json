{"cell_type":{"034f13cf":"code","5df374a5":"code","7999b841":"code","5044d62d":"code","e3216f5c":"code","72aae9b3":"code","9e69cfef":"code","608ac44d":"code","ffe156b9":"code","aa36dbdd":"code","faba8ff5":"code","5aa76cca":"code","b61f623d":"code","1ee97202":"code","41570b6d":"code","8572e0ff":"code","be966cf3":"code","287ec232":"code","c41d6e54":"code","e7581b68":"code","d3c79e78":"code","a0ea83c1":"code","8963e79d":"code","d2e93c80":"code","54f0fee6":"markdown","cf9c78dc":"markdown","82859e3f":"markdown","997ab124":"markdown","25f35531":"markdown","818e2198":"markdown","8ce15d1d":"markdown","6dbe85f6":"markdown","027016a6":"markdown","21a45a1e":"markdown","da2c3360":"markdown","46cfe954":"markdown","a705bc23":"markdown","37258cbe":"markdown","70f81dfe":"markdown","e3a5bf4e":"markdown","201bccbc":"markdown","e5e67420":"markdown","3fd92a7c":"markdown","b9796578":"markdown","0d2fe228":"markdown","51f46ce6":"markdown","af888338":"markdown","cc246b64":"markdown","773a55d7":"markdown","422ef3f9":"markdown","692d884c":"markdown"},"source":{"034f13cf":"import tensorflow as tf\n\nprint(tf.__version__)","5df374a5":"\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport cv2\nfrom tqdm import tqdm\nimport urllib.request\n\nimport os\nimport zipfile\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import roc_auc_score\nfrom keras import backend as K\nfrom keras.preprocessing.image import ImageDataGenerator,load_img\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras.optimizers import Adam","7999b841":"urllib.request.urlretrieve(\"https:\/\/download.microsoft.com\/download\/3\/E\/1\/3E1C3F21-ECDB-4869-8368-6DEBA77B919F\/kagglecatsanddogs_3367a.zip\", \"cat_dog.zip\")\n#zip = ZipFile('cat_dog.zip')\n#zip.extractall()","5044d62d":"import zipfile\nzip_ref = zipfile.ZipFile('cat_dog.zip', 'r')\nzip_ref.extractall('..\/output\/')\nzip_ref.close()\n\nimport os\nos.listdir('..\/output\/PetImages')\n\nprint('total  dog images :', len(os.listdir('..\/output\/PetImages\/Dog') ))\nprint('total  cat images :', len(os.listdir('..\/output\/PetImages\/Cat') ))\n\nos.remove('..\/output\/PetImages\/Cat\/666.jpg')\nos.remove('..\/output\/PetImages\/Dog\/11702.jpg')","e3216f5c":"os.listdir('..\/output\/PetImages\/Dog')[1:10]","72aae9b3":"image = load_img('..\/output\/PetImages\/Dog\/4644.jpg')\nplt.imshow(image)","9e69cfef":"os.listdir('..\/output\/PetImages\/Cat')[1:10]","608ac44d":"image = load_img('..\/output\/PetImages\/Cat\/8962.jpg')\nplt.imshow(image)","ffe156b9":"img_width=150\nimg_height=150\nbatch_size=20\ninput_shape = (img_width, img_height, 3)","aa36dbdd":"# clean data\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# All images will be rescaled by 1.\/255.\ntrain_datagen = ImageDataGenerator(\n    rescale=1. \/ 255,\n    shear_range=0.3,\n    zoom_range=[0.6,1.0],\n    brightness_range=[0.6,1.0],\n    rotation_range=90,\n    horizontal_flip=True,\n    validation_split=0.2\n)\n\n#---------------------------------------------\n\ntrain_generator = train_datagen.flow_from_directory(\n    '..\/output\/PetImages',\n    target_size=(img_width, img_height),\n    batch_size=batch_size,\n    class_mode='categorical',\n    seed = 42,\n    subset='training'\n    \n)\n\n#---------------------------------------------\n\nvalid_generator = train_datagen.flow_from_directory(\n    '..\/output\/PetImages',\n    target_size=(img_width, img_height),\n    batch_size=batch_size,\n    #class_mode='binary',\n    class_mode='categorical',\n    seed = 42,\n    subset='validation'\n    \n)\n#X, y = next(train_generator)","faba8ff5":"plt.figure(figsize=(12, 12))\nfor i in range(0, 15):\n    plt.subplot(5, 3, i+1)\n    for X_batch, Y_batch in train_generator:\n        image = X_batch[0]\n        plt.imshow(image)\n        break\nplt.tight_layout()\nplt.show()","5aa76cca":"# Feel free to add more layers or neurons if you have enough computing power\nmodel = Sequential()\nmodel.add(Conv2D(128, (3, 3), input_shape=input_shape))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2), padding=\"same\"))\n\nmodel.add(Conv2D(128, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2), padding=\"same\"))\n\nmodel.add(Conv2D(128, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2), padding=\"same\"))\n\nmodel.add(Dropout(0.30))\n\nmodel.add(Flatten())\nmodel.add(Dense(128))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.30))\nmodel.add(Dense(2))\nmodel.add(Activation(\"softmax\"))","b61f623d":"optimizer = Adam(lr=0.0003)\n#model.compile(loss='binary_crossentropy',\nmodel.compile(loss='binary_crossentropy',\n              optimizer=optimizer,\n              metrics=['acc'])","1ee97202":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau,TensorBoard\n\nearlystop=EarlyStopping(monitor='val_loss', min_delta=0.0001, patience=5, verbose=0, mode='auto')\n\n#tensorboard_callback = TensorBoard(log_dir)\n\ncallbacks = [earlystop]","41570b6d":"import os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \nimport tensorflow as tf","8572e0ff":"history=model.fit_generator(\n    train_generator,\n    #steps_per_epoch=nb_train_samples \/\/ batch_size,\n    validation_data=valid_generator,\n    epochs=50\n    ,callbacks=callbacks\n  \n)","be966cf3":"\n#-----------------------------------------------------------\n# Retrieve a list of list results on training and test data\n# sets for each training epoch\n#-----------------------------------------------------------\nimport matplotlib.image  as mpimg\nimport matplotlib.pyplot as plt\nacc      = history.history[     'acc' ]\nval_acc  = history.history[ 'val_acc' ]\nloss     = history.history[    'loss' ]\nval_loss = history.history['val_loss' ]\n\nepochs   = range(len(acc)) # Get number of epochs\n\n#------------------------------------------------\n# Plot training and validation accuracy per epoch\n#------------------------------------------------\nplt.plot  ( epochs,     acc )\nplt.plot  ( epochs, val_acc )\nplt.title ('Training and validation accuracy')\nplt.figure()\n\n#------------------------------------------------\n# Plot training and validation loss per epoch\n#------------------------------------------------\n#plt.plot  ( epochs,     loss )\n#plt.plot  ( epochs, val_loss )\n#plt.title ('Training and validation loss'   )","287ec232":"!pip install -q pyyaml h5py","c41d6e54":"# save model\nfrom keras.models import load_model\nmodel.save('dog_cat_cnn_model.h5')","e7581b68":"from IPython.display import FileLink\nFileLink(r'dog_cat_cnn_model.h5')","d3c79e78":"import keras\nnew_model = keras.models.load_model('dog_cat_cnn_model.h5')","a0ea83c1":"val_loss, val_acc = model.evaluate(valid_generator)  # evaluate the out of sample data with model\n#print(val_loss)  # model's loss (error)\nprint(val_acc)  # model's accuracy","8963e79d":"urllib.request.urlretrieve('https:\/\/dcist.com\/wp-content\/uploads\/sites\/3\/2019\/04\/Gem2-768x689.jpg', \"image.jpg\")","d2e93c80":"import numpy as np\nimport pandas as pd\n#from keras_preprocessing import image\n#import PIL.Image as Image\nimport tensorflow as tf\n#import cv2\nimport PIL.Image as Image\nx = Image.open('image.jpg').resize((150, 150))\nx = np.array(x)\/255.0\nnew_model = tf.keras.models.load_model ('dog_cat_cnn_model.h5')\nresult = new_model.predict(x[np.newaxis, ...])\ndf = pd.DataFrame(data =result,columns=['cat','dog'])\ndf","54f0fee6":"# 5.trainning model","cf9c78dc":"# 2.download cat dog data","82859e3f":"# 7.save model and load model","997ab124":"# 4.define model","25f35531":"## Dog picture","818e2198":"### compile model with Adam optimizer ","8ce15d1d":"## show picture after augmentation","6dbe85f6":"### create CNN model","027016a6":"### unzip the file","21a45a1e":"## Cat picture","da2c3360":"### import all other pakcage","46cfe954":"\n<img src=\"https:\/\/dcist.com\/wp-content\/uploads\/sites\/3\/2019\/04\/Gem2-768x689.jpg\" width=\"400\">","a705bc23":"### import tensorflow package and check tensorflow version","37258cbe":"### download cat and dog picture from microsoft","70f81dfe":"\n<img src=\"https:\/\/www.pyimagesearch.com\/wp-content\/uploads\/2019\/07\/keras_data_augmentation_in_place.png\" width=\"600\">","e3a5bf4e":"<img src=\"https:\/\/pythonprogramming.net\/static\/images\/machine-learning\/convolution-new-featuremap.png\" width=\"600\">\n","201bccbc":"### make prediction on one image","e5e67420":"# 1.load package","3fd92a7c":"\n<img src=\"https:\/\/pythonprogramming.net\/static\/images\/machine-learning\/artificial-neural-network-model.png\" width=\"600\">","b9796578":"### set up callbacks with earlystop","0d2fe228":"### load the saved model","51f46ce6":"### make prediction on test data","af888338":"# 8 Reference\n\n* https:\/\/pythonprogramming.net\/convolutional-neural-network-deep-learning-python-tensorflow-keras\/\n* https:\/\/www.coursera.org\/specializations\/tensorflow-in-practice\n* https:\/\/www.udacity.com\/course\/intro-to-tensorflow-for-deep-learning--ud187\n* https:\/\/www.datacamp.com\/courses\/introduction-to-tensorflow-in-python","cc246b64":"### train model with 50 epochs","773a55d7":"### This is a notebook for Cat dog image classfication with tensorflow CNN model with data augmentation, drop out.\n\n### 1.load package - > 2.download data -> 3.data augmentation -> 4.define model -> 5.train model -> 6.model performance - > 7.save model","422ef3f9":"# 6.model result","692d884c":"# 3.load data with ImageDataGenerator"}}