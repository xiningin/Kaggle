{"cell_type":{"ca49f3d2":"code","0a17258e":"code","2735b99d":"code","e259d90e":"code","d3740601":"code","976d088d":"code","ee8f2b62":"code","07d535fd":"code","19a15042":"code","c0084af6":"code","b49b9e7f":"code","6bdeda9c":"code","530ef06d":"markdown","696c2aae":"markdown","901c1d89":"markdown","128ed4f8":"markdown","3dcd5af3":"markdown","59eb58e0":"markdown","9e7e12b2":"markdown"},"source":{"ca49f3d2":"import numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nprint(\"Version de TensorFlow \",tf.__version__)\nprint(\"Version de Numpy      \",np.__version__)\nx = !python -V\nprint(\"Version de Python     \",x)\n","0a17258e":"x = tf.placeholder(dtype=tf.float32,shape=[1,None])\ny = tf.placeholder(dtype=tf.float32,shape=[1,None])\nses = tf.Session()","2735b99d":"X = np.array([np.linspace(1,9,100)])\nY = X + np.random.randn(1,100)\n\nfeed_dic = {\n    x: X, \n    y : Y \n}\n\n#Suma\nsuma = tf.add(x,y)\nres = ses.run(suma,feed_dict=feed_dic)\nprint(\"La suma de los Tensores\",feed_dic[x],\" + \",feed_dic[y], \" = \" ,res)\n\n#Resta\nresta = tf.add(x,-y)\nres = ses.run(resta,feed_dict=feed_dic)\nprint(\"La resta de los Tensores\",feed_dic[x],\" + \",feed_dic[y], \" = \" ,res)","e259d90e":"mean = tf.reduce_mean(y)\nres = ses.run(mean,feed_dict=feed_dic)\nprint(\"Promedio de y = \",feed_dic[y],\" Es \",res)","d3740601":"plt.scatter(X,Y)\nplt.grid(True)\nprint(X)\nprint(Y)","976d088d":"w = tf.Variable(tf.zeros([1,1]),name=\"weights\")\nb = tf.Variable(tf.zeros([1]),name=\"biases\")","ee8f2b62":"y_pred = tf.add(tf.matmul(w,x),b,name=\"logit\")","07d535fd":"ses.run(tf.global_variables_initializer())\nres = ses.run(y_pred,feed_dict=feed_dic)\nprint(res)","19a15042":"cost = tf.losses.mean_squared_error(y,y_pred)\ntraining_step = tf.train.GradientDescentOptimizer(learning_rate=0.001).minimize(cost)","c0084af6":"cost_history = np.empty(shape=[1],dtype=float)\nfor epoch in range(20):\n    ses.run(training_step,feed_dict=feed_dic)\n    tem = ses.run(cost,feed_dict=feed_dic) \n    print(tem)\n    cost_history = np.append(cost_history,tem)","b49b9e7f":"plt.plot(range(len(cost_history)),cost_history)\nplt.axis([0,20,0,np.max(cost_history)])\nplt.title(\"Coste vs epoca\")\nplt.xlabel(\"Epoca\")\nplt.ylabel(\"Coste\")\nplt.show()","6bdeda9c":"pred_y = ses.run(y_pred, feed_dict=feed_dic)\nmse = tf.reduce_mean(tf.square(pred_y - feed_dic[y]))\nprint(\"MSE: %.4f\" % ses.run(mse)) \n\nfig, ax = plt.subplots()\nax.scatter(feed_dic[x],feed_dic[y])\nax.plot([feed_dic[x].min(), feed_dic[x].max()], [feed_dic[y].min(), feed_dic[y].max()], 'k--', lw=3)\nax.set_xlabel('Measured')\nax.set_ylabel('Predicted')\nplt.show()","530ef06d":"# Suma y resta de Tensores","696c2aae":"## Inicializaci\u00f3n de las variables (pesos y sesgos del modelo)","901c1d89":"## Definici\u00f3n de las entradas al modelo","128ed4f8":"## Entrenamiento","3dcd5af3":"# Media Aritm\u00e9tica","59eb58e0":"## Salida del modelo","9e7e12b2":"## Definicion de la funcion de coste y el proceso de optimizaci\u00f3n"}}