{"cell_type":{"3eba28de":"code","fa78c796":"code","90cfbaf3":"code","255b4052":"code","6e5f37b5":"code","6e11ed62":"code","6613a07f":"code","eb2e08a6":"code","567f3495":"code","48021761":"code","e06008e5":"code","e43b5349":"code","b9c08fa5":"code","ea9ed0c2":"code","4684d771":"code","bc8c78d3":"code","2776275d":"code","a784ff25":"code","58bde831":"code","b2bf595e":"code","f2d1a432":"code","6059416b":"code","1798cf1f":"code","08cc5100":"code","fa65a610":"code","2cc46e7e":"code","e13779a7":"code","42fe6069":"code","ba5e1807":"code","774edc3f":"code","10bb7dc4":"code","a5a0d8b0":"code","59adfbeb":"code","f24074c9":"code","990d453b":"code","37bbf403":"code","afc50717":"code","8838be9e":"code","f84c8728":"code","29c8b11a":"markdown","0cd793c4":"markdown","ce41a994":"markdown","8f3b44b0":"markdown","7f0ed352":"markdown","5e7c2ed7":"markdown","d955bcea":"markdown","916767df":"markdown","59f3e425":"markdown","d3673490":"markdown","ec4d15b8":"markdown","4e94cf09":"markdown","d6860dd2":"markdown","16d06784":"markdown","ce8e1034":"markdown","2d7360ae":"markdown","9e04603d":"markdown","615e18e4":"markdown"},"source":{"3eba28de":"import warnings\nwarnings.filterwarnings('ignore') ","fa78c796":"import pandas  as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n#plt.style.available","90cfbaf3":"#reading dataset\ndf = pd.read_csv('..\/input\/health-insurance-data\/data.csv')\ndf.head()","255b4052":"#checking description of numeric type\ndf.describe().style.background_gradient(cmap = 'copper')","6e5f37b5":"#checking description of object types\ndf.describe(include= 'object')","6e11ed62":"#rows and columns of dataset\ndf.shape","6613a07f":"#Checking for null values\ndf.isna().mean().round(4)*100","eb2e08a6":"plt.rcParams['figure.figsize'] = (15, 4)\nsns.boxplot(df['Annual_Premium'])\nplt.show()","567f3495":"# lets remove the outliers from the data\n\n#lets check the shape before removing outliers\nprint(\"Before Removing Outliers \", df.shape)\n\n# lets filter the records having more than 150000 annual premium\ndf = df[df['Annual_Premium'] < 150000]\n#df['Annual_Premium'].values[df['Annual_Premium'].values>150000]=150000\n\n#lets check the shape after removing outliers\nprint(\"After Removing Outliers \", df.shape)","48021761":"#analyzing target variable\n\nplt.rcParams['figure.figsize']=7,4\nax=sns.countplot(df['Response'], palette = 'ocean')\nfor p in ax.patches:\n        ax.annotate(f'{p.get_height()}', (p.get_x()+0.3, p.get_height()))\nplt.title('Distribution of Target Variable')\nplt.show()","e06008e5":"plt.rcParams['figure.figsize']=18,12\nplt.subplot(221)\nsns.distplot(df['Age'], color='red')\nplt.title('Distribution of Age')\n\nplt.subplot(222)\nsns.distplot(df['Region_Code'], color='black')\nplt.title('Distribution of Region')\n\nplt.subplot(223)\nsns.distplot(df['Policy_Sales_Channel'], color='blue')\nplt.title('Distribution of Agents')\n\nplt.subplot(224)\nsns.distplot(df['Vintage'], color='green')\nplt.title('Distribution of customer tenure')\nplt.show()\n","e43b5349":"plt.rcParams['figure.figsize']=10,5\nsns.distplot(df['Annual_Premium'], color='grey')\nplt.title('Distribution of annual premium')\nplt.show()","b9c08fa5":"#lets remove skewness from Annual Premium, as it can add bias to the data\n\n# lets apply log transformation to remove skewness\ndf['Annual_Premium'] = np.log1p(df['Annual_Premium'])\n\n# lets plot them and check whether the skewness is removed or not\nplt.rcParams['figure.figsize']=10,5\nsns.distplot(df['Annual_Premium'], color = 'black')\nplt.title('After Log Transformations')\nplt.show()","ea9ed0c2":"## Univariate Analysis on Categorical Columns\n\nplt.rcParams['figure.figsize'] = (18,8)\n\nplt.subplot(2, 3, 1)\nsns.countplot(df['Gender'], palette = 'cool')\n\nplt.subplot(2, 3, 2)\nsns.countplot(df['Driving_License'], palette = 'cool')\n\nplt.subplot(2, 3, 3)\nsns.countplot(df['Vehicle_Damage'], palette = 'cool')\n\nplt.subplot(2, 3, 4)\nsns.countplot(df['Vehicle_Age'], palette = 'cool')\n\nplt.subplot(2, 3, 6)\nsns.countplot(df['Previously_Insured'], palette = 'cool')\n\nplt.suptitle('Univariate Analysis on Categorical Columns')\nplt.show()","4684d771":"### Lets check the Impact of Annual premium on customer response\n\nplt.rcParams['figure.figsize'] = (20, 4)\nplt.subplot(131)\nsns.distplot(df[df['Response']==1]['Annual_Premium'], color='green')\n\nplt.subplot(132)\nsns.distplot(df[df['Response']==0]['Annual_Premium'], color='red')\n\nplt.subplot(133)\nsns.boxenplot(df['Response'], df['Annual_Premium'], palette = 'Wistia')\n\nplt.suptitle('Impact of Annual premium on customer interest')\nplt.show()","bc8c78d3":"print(\"Impact of Gender on Customer interest\")\nprint(pd.crosstab(df['Response'], df['Gender']))\nprint('\\n')\n\nprint(\"Impact of Previously_Insured on Customer interest\")\nprint(pd.crosstab(df['Response'], df['Previously_Insured']))\nprint('\\n')\n\nprint(\"Impact of Vehicle_Age on Customer interest\")\nprint(pd.crosstab(df['Response'], df['Vehicle_Age']))\nprint('\\n')\n\nprint(\"Impact of Vehicle_Damage on Customer interest\")\nprint(pd.crosstab(df['Response'], df['Vehicle_Damage']))\nprint('\\n')\n\nprint(\"Impact of Driving_License on Customer interest\")\nprint(pd.crosstab(df['Response'], df['Driving_License']))\nprint('\\n')","2776275d":"plt.rcParams['figure.figsize']=15,5\nsns.barplot(y=df['Vehicle_Age'], x=df['Annual_Premium'], hue=df['Driving_License'], palette='bright')\nplt.title('Annual premium needs to pay by customer')\nplt.show()","a784ff25":"plt.rcParams['figure.figsize']=15,4\nplt.subplot(121)\nsns.distplot(df[df['Response']==1]['Policy_Sales_Channel'], color='green')\n\nplt.subplot(122)\nsns.distplot(df[df['Response']==0]['Policy_Sales_Channel'], color='red')\n\nplt.show()","58bde831":"plt.rcParams['figure.figsize']=15,4\nplt.subplot(121)\nsns.distplot(df[df['Response']==1]['Region_Code'], color='green')\n\nplt.subplot(122)\nsns.distplot(df[df['Response']==0]['Region_Code'], color='red')\n\nplt.show()","b2bf595e":"plt.rcParams['figure.figsize']=15,4\nplt.subplot(121)\nsns.distplot(df[df['Response']==1]['Age'], color='green')\n\nplt.subplot(122)\nsns.distplot(df[df['Response']==0]['Age'], color='red')\n\nplt.show()","f2d1a432":"plt.rcParams['figure.figsize']=(15,10)\nplt.subplot(121)\nplt.pie(df[(df['Driving_License']==1)]['Response'].value_counts(),\n        labels=[f'Not Interested\\n{len(df[(df.Driving_License==1)&(df.Response==0)])}',\n                f'Interested\\n{len(df[(df.Driving_License==1)&(df.Response==1)])}'], autopct='%1.1f%%',\n       explode=[0,0.1], colors = ['grey','pink'])\nplt.title('Customers with Driving License')\n\nplt.subplot(122)\nplt.pie(df[(df['Driving_License']==0)]['Response'].value_counts(),\n        labels=[f'Not Interested\\n{len(df[(df.Driving_License==0)&(df.Response==0)])}',\n                f'Interested\\n{len(df[(df.Driving_License==0)&(df.Response==1)])}'], autopct='%1.1f%%',\n       explode=[0,0.1], colors = ['red','orange'])\nplt.title('Customers without Driving License')\nplt.show()","6059416b":"#from ipywidgets import interact_manual\n#@interact_manual\n#def viz(x=list(df.select_dtypes('number').columns)):\n#    plt.rcParams['figure.figsize']=15,4\n#    plt.subplot(121)\n#    sns.distplot(df[df['Response']==1][x], color='green')\n#    plt.subplot(122)\n#    sns.distplot(df[df['Response']==0][x], color='red')","1798cf1f":"#high cardinality\nprint(f'percentage of uniqueness of id column: {df.id.nunique()\/len(df)*100}')","08cc5100":"print(f'no. of unique values in \\'Driving_License\\': {df.Driving_License.nunique()}')\nprint(f'Unique values in \\'Driving_License\\': {df.Driving_License.unique()}')\nprint(f'% of uniqueness of 1 in \\'Driving_License\\': {round(df.Driving_License.value_counts()[1]\/len(df)*100,2)}')\nprint(f'% of uniqueness of 0 in \\'Driving_License\\': {round(df.Driving_License.value_counts()[0]\/len(df)*100,2)}')\n\nplt.rcParams['figure.figsize']=7,4\nax=sns.countplot(df['Driving_License'], palette='summer')\nfor p in ax.patches:\n        ax.annotate(f'{p.get_height()}', (p.get_x()+0.3, p.get_height()))\nplt.show()","fa65a610":"df.drop(['id','Driving_License'], axis=1, inplace=True)","2cc46e7e":"#lets encode the object columns\ndf['Gender'] = df['Gender'].replace(('Male','Female'),(1, 0))\ndf['Vehicle_Age'] = df['Vehicle_Age'].replace(('< 1 Year','1-2 Year','> 2 Years'),(0,1,2))\ndf['Vehicle_Damage'] = df['Vehicle_Damage'].replace(('Yes','No'),(1, 0))\n\n# lets check whether there is any object column left\ndf.select_dtypes('object').columns","e13779a7":"plt.rcParams['figure.figsize']=18,10\nsns.heatmap(df.corr(), annot=True)\nplt.show()","42fe6069":"#plt.rcParams['figure.figsize'] = (15, 4)\n#sns.pairplot(df,hue = 'Response', vars = ['Age','Region_Code','Annual_Premium',\n#                                          'Policy_Sales_Channel','Vintage'] )\n#plt.show()","ba5e1807":"# lets split the Target column from the Data\n\ny = df['Response']\nx = df.drop(['Response'], axis = 1)\n\n# lets check the shape of x and y\nprint(\"Shape of x :\", x.shape)\nprint(\"Shape of y :\", y.shape)","774edc3f":"from imblearn.combine import SMOTETomek\n\nx_resample, y_resample  = SMOTETomek().fit_resample(x, y)\n\n# lets print the shape of x and y after resampling it\nprint(x_resample.shape)\nprint(y_resample.shape)","10bb7dc4":"# lets also check the value counts of our target variable\n\nprint(\"Before Resampling :\")\nprint(y.value_counts())\n\nprint(\"After Resampling :\")\ny_resample = pd.DataFrame(y_resample)\nprint(y_resample.value_counts())","a5a0d8b0":"# lets split the test data from the training data\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)\n\n# lets print the shapes again \nprint(\"Shape of the x Train :\", x_train.shape)\nprint(\"Shape of the y Train :\", y_train.shape)\nprint(\"Shape of the x Test :\", x_test.shape)\nprint(\"Shape of the y Test :\", y_test.shape)","59adfbeb":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train_scl = sc.fit_transform(x_train)\nx_test_scl = sc.transform(x_test)","f24074c9":"from sklearn.neighbors import KNeighborsClassifier\n\nmodel =  KNeighborsClassifier()\nmodel.fit(x_train_scl, y_train)\n\ny_pred = model.predict(x_test_scl)\n\nprint(\"Training Accuracy :\", model.score(x_train_scl, y_train))\nprint(\"Testing Accuracy :\", model.score(x_test_scl, y_test))","990d453b":"# lets analyze the Performance using Confusion matrix\n\nfrom sklearn.metrics import confusion_matrix, classification_report\n\ncm = confusion_matrix(y_test, y_pred)\nplt.rcParams['figure.figsize'] = (3, 3)\nsns.heatmap(cm, annot = True, cmap = 'Wistia', fmt = '.8g')\nplt.show()\n\n# lets also use classification report for performance analysis\ncr = classification_report(y_test, y_pred)\nprint(cr)","37bbf403":"from xgboost import XGBClassifier\n\nmodel =  XGBClassifier()\nmodel.fit(x_train, y_train)\n\ny_pred = model.predict(x_test)\n\nprint(\"Training Accuracy :\", model.score(x_train, y_train))\nprint(\"Testing Accuracy :\", model.score(x_test, y_test))","afc50717":"# lets analyze the Performance using Confusion matrix\n\ncm = confusion_matrix(y_test, y_pred)\nplt.rcParams['figure.figsize'] = (3, 3)\nsns.heatmap(cm, annot = True, cmap = 'Wistia', fmt = '.8g')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show()\n\n# lets also use classification report for performance analysis\ncr = classification_report(y_test, y_pred)\nprint(cr)","8838be9e":"from sklearn.ensemble import RandomForestClassifier\n\nmodel =  RandomForestClassifier()\nmodel.fit(x_train, y_train)\n\ny_pred = model.predict(x_test)\n\nprint(\"Training Accuracy :\", model.score(x_train, y_train))\nprint(\"Testing Accuracy :\", model.score(x_test, y_test))","f84c8728":"# lets analyze the Performance using Confusion matrix\n\ncm = confusion_matrix(y_test, y_pred)\nplt.rcParams['figure.figsize'] = (3, 3)\nsns.heatmap(cm, annot = True, cmap = 'Wistia', fmt = '.8g')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show()\n\n# lets also use classification report for performance analysis\ncr = classification_report(y_test, y_pred)\nprint(cr)","29c8b11a":"* We don't have any null values in our dataset","0cd793c4":"* Region doesn't have any influence on customers interest on insurance","ce41a994":"* Customer with driving lisense are paying lesser annual premium than customer without driving lisense\n* For customers with DL, their average annual premium varies based on the vehicle age\n* For customers without DL, their average annual premium doesn't varies much based on the vehicle age.","8f3b44b0":"# Exploratory Data Analysis","7f0ed352":"* Customers at age 40 to 50 are showing more interest on insurance policy\n* Customers between 20 and 30 age are not much interested on insurance policy","5e7c2ed7":"# Importing libraries","d955bcea":"# Data Cleaning","916767df":"* Male showing more interest than female.\n* customers who already insured are not showing interest.\n* if the vehicle age is between 1-2 years are showing much intrest than other 2 categories.\n* customers with past vehicle damage experience are showing interest.\n* customer withour driving license are not showing interest.","59f3e425":"# Data Preparation","d3673490":"* Most of the customer age ranges from 20 to 30\n* Most of the records are from region 28\n* Most of the customers are approached by policy channels 152, 26, 124\n* On Vintage column distribution we can infer that customer's tenure is in uniform characteristics","ec4d15b8":"* More record are from 26, 124, and 156.\n* The ratio of customer showing interest is higher than not showing interest in policy channel 26.\n* The ratio of customer showing interest is very low than not showing interest in policy channel 156.","4e94cf09":"# Reading the dataset","d6860dd2":"# Applying XGBoost","16d06784":"* Annual premium doesn't have any influence on customer's interest ","ce8e1034":"#### Data Description:\n1. **id**-->\tUnique ID for the customer\n2. **Gender**-->\tGender of the customer\n3. **Age**-->\tAge of the customer\n4. **Driving_License**-->\t0 : Customer does not have DL, 1 : Customer already has DL\n5. **Region_Code**-->\tUnique code for the region of the customer\n6. **Previously_Insured**-->\t1 : Customer already has Vehicle Insurance, 0 : Customer doesn't have Vehicle Insurance\n7. **Vehicle_Age**-->\tAge of the Vehicle\n8. **Vehicle_Damage**-->\t1 : Customer got his\/her vehicle damaged in the past. 0 : Customer didn't get his\/her vehicle damaged in the past.\n9. **Annual_Premium**-->\tThe amount customer needs to pay as premium in the year\n10. **PolicySalesChannel**-->\tAnonymized Code for the channel of outreaching to the customer ie. Different Agents, Over Mail, Over Phone, In Person, etc.\n11. **Vintage**-->\tNumber of Days, Customer has been associated with the company\n12. **Response**-->\t1 : Customer is interested, 0 : Customer is not interested","2d7360ae":"Target variable is highly biased\n* 0's => 87.75%\n* 1's => 12.25%","9e04603d":"# Descriptive Statistics","615e18e4":"# Applying Random Forest"}}