{"cell_type":{"daa45399":"code","1734debe":"code","600cecbf":"code","341a7456":"code","b4ab3ae6":"code","7b9c8435":"code","d97677b7":"code","ce8ae985":"code","62bc5ce6":"code","0a29657f":"code","a647bac4":"code","a991dbd7":"code","4d3771ac":"code","22e4c7ab":"code","4c0f8138":"code","9da85d48":"code","a989f95f":"markdown","aa501d9b":"markdown","4a320a75":"markdown","501d8071":"markdown"},"source":{"daa45399":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1734debe":"import pandas as pd\nimport random\nimport string\nfrom nltk.corpus import stopwords\nimport re\nfrom stemming.porter2 import stem","600cecbf":"# Reading a small sample of the entire training file, to quickly execute the data cleaning steps. We would later read the full data set when we do the training\n# p = 0.01 # 1% of the data set\n# df = pd.read_csv('..\/input\/guess-my-price\/train.tsv',delimiter = '\\t',encoding = 'utf-8',skiprows = lambda i: i > 0 and random.random() > p)\ndf1 = pd.read_csv('..\/input\/guess-my-price\/train.tsv',delimiter = '\\t',encoding = 'utf-8')","341a7456":"df1.head(5)","b4ab3ae6":"# Dropping random:\ndf1 = df1.drop(columns = ['random'])","7b9c8435":"# Missing summary function creates a summary of the number of missing values in all the columns of a dataframe\ndef missing_summary(df):\n    columns = df.columns\n    missing_dict = {}\n    for cols in columns:\n        missing_dict[cols] = df[cols].isna().sum()\n    \n    summ_missing = pd.DataFrame(list(missing_dict.items()), columns=['column_name', '#missing_values'])\n    return summ_missing\n\nsumm_missing = missing_summary(df1)\nsumm_missing","d97677b7":"# Dropping the rows where item_description is misssing from the data frame\ndf1.dropna(subset = ['item_description'],inplace = True)\n\n# Imputing text \"missing\" in the category_name and brand_name column\ndf1.fillna(\"missing\", inplace = True)\n\nmissing_summary(df1)","ce8ae985":"# selecting 10% of the data so that the trial cleaning steps are faster\ndf_samp = df1.sample(frac = 0.1)","62bc5ce6":"# Selecting all the string columns from the sample data frame\ndf_samp_string = df_samp[['train_id','name','category_name','brand_name','item_description']]\ndf_samp_string.head(4)","0a29657f":"# Removing emojis from the text columns\n\ndef deEmojify(inputString):\n    return inputString.encode('ascii', 'ignore').decode('ascii')\n\ndf_samp_string['item_description_new'] = df_samp_string['item_description'].apply(deEmojify)\ndf_samp_string['category_name_new'] = df_samp_string['category_name'].apply(deEmojify)\n\ndf_samp_string.head(5)","a647bac4":"string.punctuation","a991dbd7":"# Writing a function to replace punctuation and special characters and converting the string to lower character\n\ndef remove_punctuation(text):\n    for punctuation in string.punctuation:\n        text = text.replace(punctuation,'')\n    return text\n\ncolumn =  df_samp_string.columns\n\nfor cols in column:\n    if df_samp_string[cols].dtype == 'object':\n        df_samp_string[cols] = df_samp_string[cols].apply(remove_punctuation).str.lower()\n        \n#Viewing the data frame        \ndf_samp_string.head(5)","4d3771ac":"# Removing stop words\nstop = stopwords.words('english')\ndf_samp_string['item_description_new'] = df_samp_string['item_description'].str.split().apply(lambda x: [item for item in x if item not in stop])\ndf_samp_string['category_name_new'] = df_samp_string['category_name'].str.split().apply(lambda x: [item for item in x if item not in stop])\n\n#Viewing the data frame        \ndf_samp_string.head(5)","22e4c7ab":"# Code to remove all digits from a list of string \n\ndef rem_num(list): \n\tpattern = '[0-9]'\n\tlist = [re.sub(pattern, '', i) for i in list] \n\treturn list\n\n# Driver code \ndf_samp_string['item_description_new'] = df_samp_string['item_description_new'].apply(rem_num)\ndf_samp_string['category_name_new'] = df_samp_string['category_name_new'].apply(rem_num)\n\n#Viewing the data frame        \ndf_samp_string.head(5)","4c0f8138":"# Code to stem words\ndf_samp_string['item_description_new'] = df_samp_string['item_description_new'].apply(lambda words: [stem(w) for w in words])\ndf_samp_string['category_name_new'] = df_samp_string['category_name_new'].apply(lambda words: [stem(w) for w in words])\n\n#Viewing the data frame        \ndf_samp_string.head(5)","9da85d48":"# Combine the entries in item_description_new and category_name_new into one string\ndf_samp_string['item_description_clean'] = df_samp_string['item_description_new'].str.join(\" \")\ndf_samp_string['category_name_clean'] = df_samp_string['category_name_new'].str.join(\" \")\n\n#Viewing the data frame\ndf_samp_string.head(5)","a989f95f":"* We have to fill the missing category_name, brand_name columns and delete the rows where item_description is missing","aa501d9b":"* We will be removing punctuation marks\/Special Characters from the text, followed by removing of stop words and numbers, followed by word stemming","4a320a75":"### Data Cleaning steps follow","501d8071":"### Missing Value Treatment"}}