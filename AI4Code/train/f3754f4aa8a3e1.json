{"cell_type":{"db68ef9d":"code","751dbbe6":"code","dca0f1c2":"code","e4173fe5":"code","4e09248d":"code","bacb7100":"code","445aa304":"code","b4afe843":"code","79fe7fdb":"code","22f4d872":"code","686b7f0e":"code","4c7d0e42":"code","57a48cab":"code","141f8b19":"code","b18b58b9":"code","be8e0c44":"code","2f9d71e2":"code","c4071855":"code","d8c02121":"code","739bd1d1":"code","4d0ca9a0":"code","95b75657":"code","4becf446":"code","1b100f3a":"code","fde2c991":"code","1e46c935":"markdown","36c54a5d":"markdown","1c0b52f5":"markdown","81c379d2":"markdown","2b1e8bf6":"markdown","cbae2f9e":"markdown","8faae598":"markdown","903a1c75":"markdown","55c07d83":"markdown","28697cfd":"markdown"},"source":{"db68ef9d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport os \nimport zipfile\nfrom tqdm import tqdm\nfrom glob import glob\nfrom shutil import copy, move","751dbbe6":"zipfile_dir = '..\/input\/dogs-vs-cats\/train.zip'\ntrain_dir = zipfile.ZipFile(zipfile_dir, 'r')\ntrain_dir.extractall()\n\nzipfile_dir = '..\/input\/dogs-vs-cats\/test1.zip'\ntest_dir = zipfile.ZipFile(zipfile_dir, 'r')\ntest_dir.extractall()","dca0f1c2":"TRAIN_DIR = '.\/train'\nTEST_DIR = '.\/test1'\n\ntrain_set = os.listdir(TRAIN_DIR)\ntest_set = os.listdir(TEST_DIR)\n\nprint('#train images: %s'%len(train_set))\nprint('#test images: %s'%len(test_set))\nprint(train_set[:5])\nprint(test_set[:5])","e4173fe5":"dog_train_dir = '.\/training\/dog'\ndog_val_dir = '.\/validation\/dog'\ncat_train_dir = '.\/training\/cat'\ncat_val_dir = '.\/validation\/cat'\n\nfile_dirs = [dog_train_dir, dog_val_dir, cat_train_dir, cat_val_dir]\n\nfor dir in file_dirs:\n    os.makedirs(dir,exist_ok = True)","4e09248d":"all_dogs = glob('.\/train\/dog*jpg')\nall_cats = glob('.\/train\/cat*jpg')\n\nprint(len(all_dogs))\nprint(len(all_cats))","bacb7100":"from sklearn.model_selection import train_test_split\n\ndogs_train, dogs_test = train_test_split(all_dogs, test_size=0.1, shuffle=True,random_state = 100)\ncats_train, cats_test = train_test_split(all_cats, test_size=0.1, shuffle=True,random_state = 100)","445aa304":"for name in tqdm(dogs_train):\n  copy(name , os.path.join(dog_train_dir , name.split('\/')[-1]))\nfor name in tqdm(cats_train):\n  copy(name , os.path.join(cat_train_dir , name.split('\/')[-1]))\n  \nfor name in tqdm(dogs_test):\n  copy(name , os.path.join(dog_val_dir , name.split('\/')[-1]))\nfor name in tqdm(cats_test):\n  copy(name , os.path.join(cat_val_dir , name.split('\/')[-1]))","b4afe843":"print(len(os.listdir(dog_train_dir)))\nprint(len(os.listdir(cat_train_dir)))\nprint(len(os.listdir(dog_val_dir)))\nprint(len(os.listdir(cat_val_dir)))","79fe7fdb":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nTRAINING_DIR = '.\/training'\ntrain_datagen = ImageDataGenerator(rescale=1 \/ 255)\ntrain_generator = train_datagen.flow_from_directory(\n    TRAINING_DIR,\n    batch_size=64,\n    class_mode='binary',\n    target_size=(150, 150)\n)\n\nVALIDATION_DIR = '.\/validation'\nvalidation_datagen = ImageDataGenerator(rescale=1\/255)\nvalidation_generator = validation_datagen.flow_from_directory(\n    VALIDATION_DIR,\n    batch_size = 64,\n    class_mode = 'binary',\n    target_size = (150, 150)\n)","22f4d872":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Dense, MaxPool2D, Flatten, Dropout\n\nmodel = Sequential()\nmodel.add(Conv2D(64, (3,3), strides=(1,1), padding='same', activation='relu',kernel_initializer='he_normal',input_shape=(150, 150, 3)))\nmodel.add(Conv2D(64, (3,3), strides=(1,1), padding='same', activation='relu',kernel_initializer='he_normal'))\nmodel.add(MaxPool2D((2,2)))\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(128, (3,3), strides=(1,1), padding='same', activation='relu',kernel_initializer='he_normal'))\nmodel.add(Conv2D(128, (3,3), strides=(1,1), padding='same', activation='relu',kernel_initializer='he_normal'))\nmodel.add(Conv2D(128, (3,3), strides=(1,1), padding='same', activation='relu',kernel_initializer='he_normal'))\nmodel.add(MaxPool2D((2,2)))\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(256, (3,3), strides=(1,1), padding='same', activation='relu',kernel_initializer='he_normal'))\nmodel.add(Dropout(0.4))\nmodel.add(Conv2D(256, (3,3), strides=(1,1), padding='same', activation='relu',kernel_initializer='he_normal'))\nmodel.add(Dropout(0.4))\nmodel.add(Conv2D(256, (3,3), strides=(1,1), padding='same', activation='relu',kernel_initializer='he_normal'))\nmodel.add(MaxPool2D((2,2)))\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(512, (3,3), strides=(1,1), padding='same', activation='relu',kernel_initializer='he_normal'))\nmodel.add(Dropout(0.4))\nmodel.add(Conv2D(512, (3,3), strides=(1,1), padding='same', activation='relu',kernel_initializer='he_normal'))\nmodel.add(Dropout(0.4))\nmodel.add(Conv2D(512, (3,3), strides=(1,1), padding='same', activation='relu',kernel_initializer='he_normal'))\nmodel.add(MaxPool2D((2,2)))\nmodel.add(Dropout(0.4))\n\nmodel.add(Flatten())\nmodel.add(Dense(units=1024, activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(units=1024, activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(units=1024, activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(units=1, activation='sigmoid'))","686b7f0e":"model.summary()","4c7d0e42":"check_point_path = '.\/best.h5'\nmodel_checkpoint = tf.keras.callbacks.ModelCheckpoint(\n    filepath = check_point_path,\n    monitor = 'val_accuracy',\n    save_weights_only=False,\n    save_best_only=True,\n    verbose=1\n)","57a48cab":"model.compile(optimizer = tf.keras.optimizers.Adam(0.0005,decay=1e-5),\n             loss = 'binary_crossentropy',\n             metrics = ['acc'])","141f8b19":"print('Num Params : ',model.count_params())\nmodel_history = model.fit(\n    train_generator,\n    epochs=50,\n    verbose=1,\n    callbacks = [model_checkpoint],\n    validation_data=validation_generator\n)","b18b58b9":"%matplotlib inline\n\nimport matplotlib.image  as mpimg\nimport matplotlib.pyplot as plt\n\n#-----------------------------------------------------------\n# Retrieve a list of list results on training and test data\n# sets for each training epoch\n#-----------------------------------------------------------\nacc=model_history.history['acc']\nval_acc=model_history.history['val_acc']\nloss=model_history.history['loss']\nval_loss=model_history.history['val_loss']\n\nepochs=range(len(acc)) # Get number of epochs\n\n#------------------------------------------------\n# Plot training and validation accuracy per epoch\n#------------------------------------------------\nplt.plot(epochs, acc, 'r')\nplt.plot(epochs, val_acc, 'b')\nplt.title('Training and validation accuracy')\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.legend([\"Training Accuracy\",\"Validation Accuracy\"])\nplt.show()\n\n#------------------------------------------------\n# Plot training and validation loss per epoch\n#------------------------------------------------\nplt.plot(epochs, loss, 'r')\nplt.plot(epochs, val_loss, 'b')\nplt.title('Training and validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.legend([\"Training Loss\",\"Validation Loss\"])\nplt.show()\n\n# Desired output. Charts with training and validation metrics. ","be8e0c44":"test_file = os.listdir(\".\/test1\")\ntest_df = pd.DataFrame({\n    'filename': test_file\n})\ntest_df","2f9d71e2":"TESTING_DIR = '.\/test1'\ntest_generator = train_datagen.flow_from_dataframe(\n    test_df,\n    directory = TESTING_DIR,\n    x_col='filename',\n    y_col=None,\n    batch_size=64,\n    target_size=(150, 150),\n    shuffle = False,\n    class_mode = None\n)","c4071855":"test_generator.reset()\ny_pred = model.predict(test_generator)","d8c02121":"train_generator.class_indices","739bd1d1":"y_pred_classification = np.where(y_pred > 0.5, 1, 0)\ny_pred_classification","4d0ca9a0":"test_generator.reset()\ntest_images = test_generator[0][:9]\n\nfig, ax = plt.subplots(3,3)\nfig.set_size_inches(10,10)\nfor i, img in enumerate(test_images):\n    ax[i\/\/3][i%3].imshow(img)\n    if y_pred_classification[i]==1:\n        label = 'Dog'\n    else:\n        label = 'Cat'\n    ax[i\/\/3][i%3].set_title(label)","95b75657":"model.layers","4becf446":"first_conv = model.layers[0]\noutput_layer1 = first_conv(test_images)[4]\n\nprint(output_layer1.shape)\nfig, ax = plt.subplots(3,3)\nfig.set_size_inches(10,10)\nfor i in range(9):\n  ax[i\/\/3][i%3].imshow(output_layer1[:,:,i])","1b100f3a":"submission = pd.read_csv('..\/input\/dogs-vs-cats\/sampleSubmission.csv')\nsubmission['label'] = y_pred_classification\nsubmission","fde2c991":"submission.to_csv('submission.csv',index='False')","1e46c935":"## Model Evaluation","36c54a5d":"Visualizing first 9 filters","1c0b52f5":"## Submition","81c379d2":"## Model Creation","2b1e8bf6":"Let's make labels","cbae2f9e":"## Data Preprocessing","8faae598":"Seeing some results","903a1c75":"Plotting Loss and Accuracy","55c07d83":"To see the class mapping of dogs and cats, we have to see class_indices from training dataset","28697cfd":"## Data Preparation"}}