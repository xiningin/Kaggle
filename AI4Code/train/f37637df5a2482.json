{"cell_type":{"29f76a08":"code","0e47570c":"code","08f2829f":"code","be3384da":"code","84d76131":"code","b3a12f01":"code","9bd1d4c6":"code","3bc7d2e7":"code","d01064f1":"code","7018c1cb":"code","1721b4d1":"code","9e29d404":"code","b0c15eb8":"code","f906e2b6":"code","21498de9":"code","bd0e6839":"code","5cf1805f":"code","ccee3a50":"code","b9ab03d6":"code","d4a49d32":"code","ae0b8fe6":"code","9ffafefd":"code","c7f337ed":"code","77061c27":"code","6dac9009":"markdown","b9eb2b81":"markdown","658eb848":"markdown","793951c2":"markdown","f8a049a5":"markdown","909189f5":"markdown","3903cdcf":"markdown","3928e150":"markdown","65306fa6":"markdown","32a3ee6c":"markdown","dc34c76b":"markdown","5e921f92":"markdown","04d8abca":"markdown","9cacabfd":"markdown","b1992291":"markdown","54afb7c6":"markdown","ff50927d":"markdown","526bcc93":"markdown"},"source":{"29f76a08":"#import the libraries....\nimport numpy as np # linear algebra....\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)....\nfrom matplotlib import pyplot as plt #Visualization of the data....\nimport seaborn as sns\nimport warnings #ignore the warning.....\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \npd.set_option(\"display.max_columns\",None)\npd.set_option(\"display.max_rows\",None)","0e47570c":"df = pd.read_csv(\"..\/input\/small-covid-dataset\/Covid_19 Data.csv\")\ndf.head(15).T","08f2829f":"df['State'].head(15).T","be3384da":"from sklearn.preprocessing import LabelEncoder\n\n# Creating an instance of labelencoder.....\nlabelencoder = LabelEncoder()\n\n# Assigning numercial values and storing it in another column called \"State_N\".....\ndf[\"State_N\"] = labelencoder.fit_transform(df[['State']])\n\n# Display the dataframe...... \ndf['State_N'].head(15).T","84d76131":"df.head(15).T","b3a12f01":"df = pd.read_csv(\"..\/input\/small-covid-dataset\/Covid_19 Data.csv\")","9bd1d4c6":"df[\"State\"] = df[\"State\"].astype('category')\ndf.dtypes","3bc7d2e7":"df[\"State\"]  = df[\"State\"].cat.codes\ndf.head(15)","d01064f1":"df = pd.read_csv(\"..\/input\/small-covid-dataset\/Covid_19 Data.csv\")","7018c1cb":"df.head(15).T","1721b4d1":"#Import library related to OneHotEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\n#Create the OneHotEncoder Object\nOhe = OneHotEncoder(sparse = False,handle_unknown = 'error',drop = 'first')\n\n\n#Perform OneHotEncoding to a column called  \"State\" using onehotencoder object fit and transform\n\nOhe_df = pd.DataFrame(Ohe.fit_transform(df[['State']]))\nOhe_df.head(15)","9e29d404":"#Merging OneHotEncoding Columns to Actual Dataframe....\ndf_merge = df.join(Ohe_df)\ndf_merge.head(15)","b0c15eb8":"#Creating an pandas dataframe for ordinal data\ndf = {'Customer_Rating':['Poor','Good','Very Good','Excellent']}\n\ndf_ordinal = pd.DataFrame(df)\n\n#Viewing created dataframe......\ndf_ordinal","f906e2b6":"#Creating dictionary for mapping the ordinal numberical value....\nCust_Rating_dict = {'Poor' : 1, 'Good' : 2, 'Very Good' : 3, 'Excellent' : 4}","21498de9":"#Assigning ordinal numerical value to all types of customer rating....\ndf_ordinal['Customer_Rating'] =df_ordinal['Customer_Rating'].map(Cust_Rating_dict)\ndf_ordinal","bd0e6839":"import category_encoders as ce\nimport pandas as pd\ndata=pd.DataFrame({'City':['Delhi','Mumbai','Hyderabad','Chennai','Bangalore','Delhi']}) \nencoder=ce.sum_coding.SumEncoder(cols='City',verbose=False)\n\n#Original Data\ndata","5cf1805f":"encoder.fit_transform(data)","ccee3a50":"import category_encoders as ce\nimport pandas as pd\n\n#Create the dataframe\ndata=pd.DataFrame({'Month':['January','April','March','April','Februay','June','July','June','September']})\nprint(data)\n\n#Create object for hash encoder\nencoder=ce.HashingEncoder(cols='Month',n_components=6)","b9ab03d6":"#Fit and Transform Data\nencoder.fit_transform(data)","d4a49d32":"#Import the libraries\nimport category_encoders as ce\nimport pandas as pd\n\n#Create the Dataframe\ndata=pd.DataFrame({'City':['Delhi','Mumbai','Hyderabad','Chennai','Bangalore','Delhi','Hyderabad','Mumbai','Agra']})\n\n#Create object for binary encoding\nencoder= ce.BinaryEncoder(cols=['City'],return_df=True)\n\n#Original Data\ndata","ae0b8fe6":"#Fit and Transform Data \ndata_encoded=encoder.fit_transform(data) \ndata_encoded","9ffafefd":"df = pd.read_csv(\"..\/input\/small-covid-dataset\/Covid_19 Data.csv\")","c7f337ed":"df_dummies = pd.get_dummies(df['State'], prefix = 'State', drop_first = True)\ndf_dummies.head(15)","77061c27":"df_new = pd.concat([df,df_dummies], axis=1)\ndf_new.head(15)","6dac9009":"# 4.Effect Encoding:-\n\nThis encoding technique is also known as Deviation Encoding or Sum Encoding. \nEffect encoding is almost similar to dummy encoding, with a little difference. \nIn dummy coding, we use 0 and 1 to represent the data but in effect encoding, we use three values i.e. 1,0, and -1.\n\nThe row containing only 0s in dummy encoding is encoded as -1 in effect encoding.\nIn the dummy encoding example, the city Bangalore at index 4  was encoded as 0000. Whereas in effect encoding it is represented by -1-1-1-1.","b9eb2b81":"# 6.Binary Encoding\n\nBinary encoding is a combination of Hash encoding and one-hot encoding. \nIn this encoding scheme, the categorical feature is first converted into numerical using an ordinal encoder. Then the numbers are transformed in the binary number. After that binary value is split into different columns.\n\nBinary encoding works really well when there are a high number of categories. For example the cities in a country where a company supplies its products.","658eb848":"# 7. Dummy variables:-\n\nUsing Pandas: with the help of get_dummies function.\n\nOne-hot encoding is such a common operation in analytics, pandas provide a function to get the corresponding new features representing the categorical variable.\n","793951c2":"**----Using Scikit-learn library----**\n\nAs one-hot encoding is also part of data preprocessing, hence we will take an help of preprocessing module from sklearn package and them import OneHotEncoder class as below:-","f8a049a5":"# 1.Label Encoding :-\n\nHere, we replace the categorical value with a numeric value between 0 and the number of classes minus 1.\n\nIf the categorical variable value contains 5 distinct classes, we use (0, 1, 2, 3, and 4).\n\n**Using Scikit-Learn library.....** \n\nAs Label Encoding in Python is part of data preprocessing, hence we will take an help of preprocessing module from sklearn package and them import LabelEncoder class as below:-\n","909189f5":"Since Hashing transforms the data in lesser dimensions, it may lead to loss of information. Another issue faced by hashing encoder is the collision. Since here, a large number of features are depicted into lesser dimensions, hence multiple values can be represented by the same hash value, this is known as a collision.\n\nMoreover, hashing encoders have been very successful in some Kaggle competitions. It is great to try if the dataset has high cardinality features.","3903cdcf":"# Conclusion:-\n\nAs per my analysis,**Hashing encoders have been very successful in some Kaggle competitions**. It is great to try if the dataset has high cardinality features.\n\nYou can select your favourite encoding techniques as per the requirement. My favourite encoding techniques is a one-hot encoding and Label encoding.\n\nWhat is your favourite encoding technique?\n\nShare it in the comment box ,also please vote up if you like.","3928e150":"Many machine learning algorithms cannot work with **categorical data** directly. Therefore, the main challenge faced by an analyst is to convert **text\/categorical data** into **numerical data** and still make an algorithm\/model to make sense out of it. \n\nHowever, there are many ways to convert categorical values into numerical values. Each approach has its trade-offs and impact on the feature set. \n\nSciKit-learn library (one of the most widely used Python library) is used to convert text or categorical data into numerical data which the model expects and perform better with.\n","65306fa6":"# 5.Hash Encoding:-\n\nBefore understanding Hash Encoding Lets understand hashing.\n\n**So what is Hashing?**\n\nHashing is the transformation of arbitrary size input in the form of a fixed-size value. \nWe use hashing algorithms to perform hashing operations i.e to generate the hash value of an input. Further, hashing is a one-way process, in other words, one can not generate original input from the hash representation.\n\nJust like one-hot encoding, the Hash encoder represents categorical features using the new dimensions. \n\nHere, the user can fix the number of dimensions after transformation using n_component argument.\n\nHere is what I mean \u2013 A feature with 5 categories can be represented using N new features similarly, a feature with 100 categories can also be transformed using N new features.","32a3ee6c":"# **Some Popular Encoding Approaches:-**\n\n> 1.Label Encoding.\n\n> 2.One Hot Encoding.\n\n> 3.Ordinal Encoding.\n\n> 4.Effect Encoding.\n\n> 5.Hash Encoding.\n\n> 6.Binary Encoding.\n\n> 7.Dummy Encoding.\n","dc34c76b":"# What's this notebook about?\n\nThis notebook shows the different techniques to deal with **Categorical data**.Whenever you are dealing with **Categorical data** ,you can refer to this notebook. I hope you find it useful.\n\n\n\n","5e921f92":"# 3.Ordinal Encoding:-\n\nAn Ordinal Encoder is used to encode categorical features into an ordinal numerical value (ordered set). This approach transforms categorical value to numerical value in ordered sets.\n\nThis encoding technique appears almost similar to Label Encoding. But, label encoding would not consider whether a variable is ordinal or not, but in the case of ordinal encoding, it will assign a sequence of numerical values as per the order of data.\n\nWith the help of Pandas, we will assign customer survey data to a variable called \u201cCustomer_Rating\u201d through a dictionary and then we can map each row for the variable as per the dictionary.","04d8abca":"**Approach-2:- Category Codes.** \n\nCodes are an array of integers which are the positions of the actual values in the categories array.\n\nThere is no setter, use the other categorical methods and the normal item setter to change values in the categorical.","9cacabfd":"# Explanation:-\n\nAny dataset might contain **text or categorical data**.\n \n\nSo what is **categorical data**?\n* It is a common type of non-numerical data that contains label values and not numbers.\n\n\nLet me give you an example:-\n* We have a column called - Colours which has three different categorical values like Red, Green, Blue.\n* Another example can be a Gender column that has two different categorical values like Male, Female.\n\n\nThere are several different types of categorical data:-\n\n* Binary: A variable that has only 2 values. \n\n>      True\/False.\n>      Yes\/No.\n\n\n* Ordinal(Specific ordered Groups): A variable that has some order associated with it.\n\n>       Low,Medium,High.\n>       Cold,Hot,Lava Hot.\n\n\n\n* Nominal(Unordered Groups): A variable that has no numerical importance.\n\n>       Colour - Red,Yellow,Blue,Green. \n>       City - Newyork,California,France.\n\n\n\n![](https:\/\/miro.medium.com\/max\/1400\/1*wYbTRM0dgnRzutwZq63xCg.png)\n\n","b1992291":"Binary encoding is a memory-efficient encoding scheme as it uses fewer features than one-hot encoding. Further, It reduces the curse of dimensionality for data with high cardinality.","54afb7c6":"In the above each classes\u2019 example for \u201cState\u201d column, the relationship looks as follows: 0 < 1 < 2 < 3 < 4 < 5 < So on. \n\nIt means that numeric values can be misjudged by algorithms as having some sort of order in them. This does not make much sense if the categories are, for example, States.\n\nThere is no such relation in the original data with the actual State names, but, by using numerical values as we did, a number-related connection between the encoded data might be made. ","ff50927d":"# 2.One-Hot Encoding:-\n\nTo overcome the Disadvantage of Label Encoding as it considers some hierarchy in the columns which can be misleading to nominal features present in the data.\n\nOne-hot encoding is processed in 2 steps:\n\n* Splitting of categories to different columns.\n* Put \u20180 for others and \u20181\u2019 as an indicator for the appropriate column.","526bcc93":"# Request to all kagglers.\n\nPlease vote up, if you like this notebook. Also, try to refer to all other notebooks already attached to my profile."}}