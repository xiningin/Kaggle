{"cell_type":{"975c1637":"code","67dba32e":"code","3a90d668":"code","c75dd3d8":"code","0a7610b2":"code","73338b3e":"code","41221f4e":"code","0bbd5cd5":"code","7ea96a47":"code","c344b3ff":"code","1fea19e0":"code","7a1481a5":"code","c63f7d95":"code","2f07e3fd":"code","e378b2e0":"code","fe63d535":"code","15926f32":"code","e53accd5":"code","12c2a4ab":"code","7408a40b":"code","4fdac89d":"code","e883ac13":"code","15cd3d11":"code","52bd1868":"code","653e2abe":"code","96b734b4":"code","e63d1444":"code","c41e1f89":"code","cb176bca":"code","54af1c2e":"code","f87d4f70":"code","b6ca626c":"code","7da1c51d":"code","d812ede5":"code","29c2d8a1":"code","e5cb5893":"code","add8b375":"code","90983b51":"code","cf7de189":"code","ca67d35f":"code","747486ff":"code","8c522b7f":"code","5f819d9f":"code","73ac99f7":"code","a5e7ccb0":"code","5c5fd248":"code","daa82313":"code","79861f5e":"code","39b52abe":"code","2963d116":"code","9d03a2cc":"code","6c377366":"code","509e78a1":"code","383db08e":"code","458b0362":"markdown","241529cd":"markdown","6dac54ac":"markdown","d4adc40e":"markdown","939fb77b":"markdown","5d9932cf":"markdown","7c4b3f70":"markdown","a92d279c":"markdown","e79d74e6":"markdown","0ddf281a":"markdown","5bf9e7ac":"markdown","ef09f9e3":"markdown","049964fa":"markdown","aa4dfb09":"markdown","e575d4dd":"markdown","48d3ebd9":"markdown","69795456":"markdown","8c9b8804":"markdown","b689a100":"markdown","8d021f31":"markdown","eb01246a":"markdown","1f7ed5e1":"markdown","68af0d5f":"markdown","282dda25":"markdown","a21e090b":"markdown","cd075eac":"markdown","2e585f02":"markdown","6974741c":"markdown","404aed07":"markdown","fe6e5b1d":"markdown","559b93d4":"markdown","68c2d5c9":"markdown","cecdc0a5":"markdown","fdcf133b":"markdown","daa86072":"markdown","d0ee6fd6":"markdown","f736b182":"markdown","e8cdf33f":"markdown","eeff6550":"markdown","b3a937b8":"markdown","320364fe":"markdown","c2e9554a":"markdown","6787553c":"markdown","9dbaf4be":"markdown","dc1fc9f6":"markdown"},"source":{"975c1637":"%autosave 1","67dba32e":"%config IPCompleter.greedy=True","3a90d668":"import pandas as pd\nimport numpy as np\nimport pylab as plt\n\n# Set the global default size of matplotlib figures\nplt.rc('figure', figsize=(10, 5))\n\n# Size of matplotlib figures that contain subplots\nfizsize_with_subplots = (10, 10)\n\n# Size of matplotlib histogram bins\nbin_size = 10 ","c75dd3d8":"import os\nprint(os.listdir(\"..\/input\/\"))","0a7610b2":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_train.head()","73338b3e":"df_train.tail()","41221f4e":"df_train.dtypes","0bbd5cd5":"df_train.info()","7ea96a47":"df_train.describe()","c344b3ff":"fig = plt.figure(figsize=fizsize_with_subplots)\n# Number of (row, column) to be used to plot all figure\nfig_dims = (3, 2)\n\n# 1. Plot Survival and Death counts\nplt.subplot2grid(fig_dims, (0,0))\ndf_train['Survived'].value_counts().plot(\n    kind='bar', \n    title='Survival And Death Counts'\n)\n\n# 2. Passanger class Counts\nplt.subplot2grid(fig_dims, (0,1))\ndf_train['Pclass'].value_counts().plot(\n    kind='bar', \n    title='Passanger class Counts'\n)\n\n# 3. Plot Sex counts\nplt.subplot2grid(fig_dims, (1,0))\ndf_train['Sex'].value_counts().plot(\n    kind='bar', \n    title='Sex Counts'\n)\n\n# 4. Plot Cabin counts\nplt.subplot2grid(fig_dims, (1,1))\ndf_train['Cabin'].hist()\nplt.title('Cabin Histogram')\n\n# 4. Ports of Embarkation Counts\nplt.subplot2grid(fig_dims, (2,0))\ndf_train['Embarked'].value_counts().plot(\n    kind='bar', \n    title='Ports of Embarkation Counts'\n)\n\n# 5. Age Counts\nplt.subplot2grid(fig_dims, (2,1))\ndf_train['Age'].hist()\nplt.title('Age Counts')\n\n# df_train['Cabin'].value_counts()","1fea19e0":"pclass_xt = pd.crosstab(df_train['Pclass'], df_train['Survived'])\npclass_xt","7a1481a5":"pclass_xt_pct = pclass_xt.div(pclass_xt.sum(1).astype(float), axis=0)\npclass_xt_pct.plot(\n    kind='bar', \n    stacked=True, \n    title='Survival Rate'\n)\nplt.xlabel('Passanger Class')\nplt.ylabel('Survival Rate')","c63f7d95":"sexes = sorted(df_train['Sex'].unique())\ngenders_mapping = dict(zip(sexes, range(0, len(sexes))))\ngenders_mapping","2f07e3fd":"df_train['Sex_Val'] = df_train['Sex'].map(genders_mapping).astype(int)\ndf_train.head()","e378b2e0":"sex_val_xt = pd.crosstab(df_train['Sex_Val'], df_train['Survived'])\nsex_val_xt","fe63d535":"sex_val_xt_pct = sex_val_xt.div(sex_val_xt.sum(1).astype(float), axis=0)\nsex_val_xt_pct.plot(\n    kind='bar', \n    stacked=True, \n    title='Survival Rate by Gender'\n)\nplt.xlabel('Sex Value')\nplt.ylabel('Survival Rate')","15926f32":"passenger_classes = sorted(df_train['Pclass'].unique())\n\nfor p_class in passenger_classes:\n    print('Male  : ', p_class, len(df_train[(df_train['Sex'] == 'male') & \n                             (df_train['Pclass'] == p_class)]))\n    print('Female: ', p_class, len(df_train[(df_train['Sex'] == 'female') & \n                             (df_train['Pclass'] == p_class)]))","e53accd5":"# Male survival rate by Pclass\nmale_df = df_train[df_train['Sex'] == 'male']\nmale_xt = pd.crosstab(male_df['Pclass'], male_df['Survived'])\nmale_xt_pct = male_xt.div(male_xt.sum(1).astype(float), axis=0)\nmale_xt_pct.plot(\n    kind='bar', \n    stacked=True, \n    title='Male survival rate by passenger class'\n)\n\n# Female survival rate by Pclass\nfemale_df = df_train[df_train['Sex'] == 'male']\nfemale_xt = pd.crosstab(female_df['Pclass'], female_df['Survived'])\nfemale_xt_pct = female_xt.div(female_xt.sum(1).astype(float), axis=0)\nfemale_xt_pct.plot(\n    kind='bar', \n    stacked=True, \n    title='Male survival rate by passenger class'\n)\n\n","12c2a4ab":"df_train[df_train['Embarked'].isnull()]","7408a40b":"# Type casting\n# df_train['Embarked'] = df_train.Embarked.astype(str)\n\ndf_train['Embarked'].value_counts()","4fdac89d":"df_train['Embarked'] = df_train['Embarked'].replace(np.nan, 'S')\ndf_train['Embarked'].value_counts()","e883ac13":"embarked_locs = sorted(df_train['Embarked'].unique())\nembarked_locs_mapping = dict(zip(\n    embarked_locs, \n    range(1, len(embarked_locs) + 1)\n))\nembarked_locs_mapping","15cd3d11":"df_train['Embarked_Val'] = df_train['Embarked'] \\\n                            .map(embarked_locs_mapping) \\\n                            .astype(int)\ndf_train.head()","52bd1868":"df_train['Embarked_Val'].hist(bins=len(embarked_locs), range=(1, 3))\nplt.title('Port of Embarkation Histogram')\nplt.xlabel('Port of Embarkation')\nplt.ylabel('Count')\nplt.show()","653e2abe":"embarked_locs_unique = sorted(df_train['Embarked_Val'].unique())\nembarked_locs_unique","96b734b4":"embarked_val_xt = pd.crosstab(df_train['Embarked_Val'], df_train['Survived'])\nembarked_val_xt_pct = embarked_val_xt.div(\n    embarked_val_xt.sum(1).astype(float), \n    axis=0\n)\nembarked_val_xt_pct.plot(\n    kind='bar', \n    stacked=True\n)\nplt.title('Survival Rate by Port of Embarkation')\nplt.xlabel('Port of Embarkation')\nplt.ylabel('Survival Rate')","e63d1444":"fig = plt.figure(figsize=fizsize_with_subplots)\n# fizsize_with_subplots\nrows, cols = 2, 3\ncol_names = ('Sex_Val', 'Pclass')\n\nfor port_idx in embarked_locs_mapping.values():\n    for col_idx in range(0, len(col_names)):\n        plt.subplot2grid((rows, cols), (col_idx, port_idx-1))\n        df_train[df_train['Embarked_Val'] == port_idx][col_names[col_idx]] \\\n            .value_counts().plot(kind='bar')","c41e1f89":"# df_train[df_train['Age'].isnull()][['Sex', 'Pclass', 'Age']].count()\ndf_train[df_train['Age'].isnull()]['Sex'].count()","cb176bca":"df_train['AgeFill'] = df_train['Age']\n\ndf_train['AgeFill'] = df_train['AgeFill'] \\\n    .groupby([df_train['Sex_Val'], df_train['Pclass']]) \\\n    .apply(lambda x: x.fillna(x.median()))\nlen(df_train[df_train['AgeFill'].isnull()])","54af1c2e":"fig, axes = plt.subplots(2, 1, figsize=fizsize_with_subplots)\n\n# Histogram of AgeFill segmented by `Survived`\ndf1 = df_train[df_train['Survived'] == 0]['Age']\ndf2 = df_train[df_train['Survived'] == 1]['Age']\nmax_age = max(df_train['AgeFill'])\naxes[0].hist(\n    [df1, df2], \n    bins=int(max_age\/bin_size), \n    range=(1, max_age), \n    stacked=True\n)\naxes[0].legend(('Died', 'Survived'), loc='best')\naxes[0].set_title('Survivors by Age Groups Histogram')\naxes[0].set_xlabel('Age')\naxes[0].set_ylabel('Count')\n\n# Scatter plot Survived and AgeFIll\naxes[1].scatter(df_train['Survived'], df_train['AgeFill'])\naxes[1].set_title('Survivors by Age Plot')\naxes[1].set_xlabel('Survived')\naxes[1].set_ylabel('Age')","f87d4f70":"for pclass in passenger_classes:\n    df_train.AgeFill[df_train.Pclass == pclass].plot(kind='kde')\n#     df_train[df_train['Pclass'] == pclass]['AgeFill'].plot(kind='kde')\nplt.title('Age density plot by Passenger class')\nplt.xlabel('Age')\nplt.legend(('1st Class', '2nd Class', '3rd Class'), loc='best')\n","b6ca626c":"fig = plt.figure(figsize=fizsize_with_subplots)\nfig_dims = (3, 1)\n\n# plot the AgeFill histgram for survivors\nplt.subplot2grid(fig_dims, (0, 0))\nsurvivor_df = df_train[df_train['Survived'] == 1]\nsurvivor_df['AgeFill'].hist(bins=int(max_age\/bin_size), range=(1, max_age))\nplt.xlabel('Age')\nplt.ylabel('NUmber of Survivors')","7da1c51d":"# plot the AgeFill histgram for female survivors\nplt.subplot2grid(fig_dims, (1, 0))\nsurvivor_df = df_train[(df_train['Survived'] == 1) & (df_train['Sex_Val'] == 0)]\nsurvivor_df['AgeFill'].hist(bins=int(max_age\/bin_size), range=(1, max_age))\nplt.xlabel('Age')\nplt.ylabel('#female survivors')\n\n# plot the AgeFill histgram for male survivors\nplt.subplot2grid(fig_dims, (2, 0))\nsurvivor_df = df_train[(df_train['Survived'] == 1) & (df_train['Sex_Val'] == 1)]\nsurvivor_df['AgeFill'].hist(bins=int(max_age\/bin_size), range=(1, max_age))\nplt.xlabel('Age')\nplt.ylabel('#male survivors')","d812ede5":"df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch']\n# df_train.head()\ndf_train['FamilySize'].value_counts()","29c2d8a1":"df_train['FamilySize'].hist()\nplt.xlabel('Family Size')\nplt.ylabel('Number of passenger')\nplt.title('Family Size Histogram')","e5cb5893":"family_sizes = sorted(df_train['FamilySize'].unique())\nfamily_size_max = max(family_sizes)\n\ndf1 = df_train[df_train['Survived'] == 1]['FamilySize']\ndf2 = df_train[df_train['Survived'] == 0]['FamilySize']\nplt.hist(\n    [df1, df2], \n    bins=family_size_max+1, \n    range=(0, family_size_max), \n    stacked=True\n)\nplt.legend(('Survived', 'Died'), loc='best')\nplt.title('Survivors by Family Size')\n","add8b375":"df_train.dtypes[df_train.dtypes.map(lambda x: x == 'object')]","90983b51":"df_train = df_train.drop(['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1)\ndf_train.dtypes","cf7de189":"df_train = df_train.drop(['Age', 'SibSp', 'Parch', 'PassengerId'], axis=1)\ndf_train.dtypes","ca67d35f":"df_train","747486ff":"train_data = df_train.values\ntrain_data","8c522b7f":"def clean_data(df, drop_passenger_id):\n    # Find the unique Sex values\n    sexes = sorted(df['Sex'].unique())\n    \n    # Gender mapping from a string to a number representation\n    genders_mapping = dict(zip(sexes, range(0, len(sexes) + 1)))\n    \n    # Transform Sex from a string to a number representation\n    df['Sex_Val'] = df['Sex'].map(genders_mapping).astype(int)\n    \n    # Replace np.nan with S, as the number of S is much more than others\n    if len(df[df['Embarked'].isnull()]) > 0:\n        df['Embarked'] = df['Embarked'].replace(np.nan, 'S')\n    \n    # Find the unique Embarked values\n    embarked_locs = sorted(df['Embarked'].unique())\n    \n    # Generate a mapping of Embarked from a string to a number representation  \n    embarked_locs_mapping = dict(zip(embarked_locs, range(1, len(embarked_locs) + 1)))\n    \n    df['Embarked_Val'] = df['Embarked'].map(\n        embarked_locs_mapping).astype(int)\n    \n#     # Transform Embarked from a string to dummy variables\n#     df = pd.concat([df, pd.get_dummies(df['Embarked'], prefix='Embarked_Val')], axis=1)\n    \n#     # Fill in missing values of Embarked\n#     # Since the vast majority of passengers embarked in 'S': 3, \n#     # we assign the missing values in Embarked to 'S':\n#     if len(df[df['Embarked'].isnull()] > 0):\n#         df.replace({'Embarked_Val': { \n#                     embarked_locs_mapping[nan] : embarked_locs_mapping['S'] \n#         }},inplace=True)\n    \n    # Fill in missing values of Fare with the average Fare\n    if len(df[df['Fare'].isnull()]) > 0:\n        avg_fare = df['Fare'].mean()\n        df['Fare'] = df['Fare'].replace(np.nan, avg_fare)\n    \n    # To keep Age in tact, make a copy of it called AgeFill \n    # that we will use to fill in the missing ages:\n    df['AgeFill'] = df['Age']\n    \n    # Determine the Age typical for each passenger class by Sex_Val.  \n    # We'll use the median instead of the mean because the Age \n    # histogram seems to be right skewed.\n    df['AgeFill'] = df['AgeFill'].groupby(\n        [df['Sex_Val'], df['Pclass']]\n    ).apply(lambda x: x.fillna(x.median()))\n    \n    # Define a new feature FamilySize that is the sum of \n    # Parch (number of parents or children on board) and \n    # SibSp (number of siblings or spouses):\n    df['FamilySize'] = df['SibSp'] + df['Parch']\n    \n    # Drop the columns we won't use:\n    df = df.drop(['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1)\n    \n    # Drop the Age column since we will be using the AgeFill column instead.\n    # Drop the SibSp and Parch columns since we will be using FamilySize.\n    df = df.drop(['Age', 'SibSp', 'Parch'], axis=1)\n    \n    # Drop the PassengerId column since it won't be used as a feature.\n    if drop_passenger_id:\n        df = df.drop(['PassengerId'], axis=1)\n    \n    return df\n","5f819d9f":"def prepare_data(df, drop_passenger_id=True):\n    \n    # Replace np.nan with S, as the number of S is much more than others\n    if len(df[df['Embarked'].isnull()]) > 0:\n        df['Embarked'] = df['Embarked'].replace(np.nan, 'S')\n    \n    # Fill in missing values of Fare with the average Fare\n    if len(df[df['Fare'].isnull()]) > 0:\n        avg_fare = df['Fare'].mean()\n        df['Fare'] = df['Fare'].replace(np.nan, avg_fare)\n    \n    # To keep Age in tact, make a copy of it called AgeFill \n    # that we will use to fill in the missing ages:\n    df['AgeFill'] = df['Age']\n    \n    # Determine the Age typical for each passenger class by Sex_Val.  \n    # We'll use the median instead of the mean because the Age \n    # histogram seems to be right skewed.\n    df['AgeFill'] = df['AgeFill'].groupby(\n        [df['Sex'], df['Pclass']]\n    ).apply(lambda x: x.fillna(x.median()))\n    \n    # Define a new feature FamilySize that is the sum of \n    # Parch (number of parents or children on board) and \n    # SibSp (number of siblings or spouses):\n    df['FamilySize'] = df['SibSp'] + df['Parch']\n    \n    \n    df = pd.concat([\n        df, \n        pd.get_dummies(df['Embarked'], prefix='Embarked'), \n        pd.get_dummies(df['Sex'], prefix='Sex'), \n        pd.get_dummies(df['Pclass'], prefix='Pclass')\n    ], axis=1)\n    \n    # Drop the columns we won't use:\n    df = df.drop(['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked', 'Pclass'], axis=1)\n    \n    # Drop the Age column since we will be using the AgeFill column instead.\n    # Drop the SibSp and Parch columns since we will be using FamilySize.\n    df = df.drop(['Age', 'SibSp', 'Parch'], axis=1)\n    \n    # Drop the PassengerId column since it won't be used as a feature.\n    if drop_passenger_id:\n        df = df.drop(['PassengerId'], axis=1)\n    \n    return df","73ac99f7":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=100)","a5e7ccb0":"# First column is \"Survived\", which is for target \n# and rest of the columns are for features\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_train = prepare_data(df_train)\nprint(df_train['AgeFill'].unique())\n\ntrain_data = df_train.values\n\ntrain_features = train_data[:, 1:]\ntrain_target = train_data[:, 0]\n\n# Fit the model to our training data\nclf = clf.fit(train_features, train_target)\n# score() returns the mean accuracy on the given test data and labels\nscore = clf.score(train_features, train_target)\n'Mean accuracy of the Random Forest Classifier: {}'.format(score)","5c5fd248":"df_test = pd.read_csv('..\/input\/titanic\/test.csv')\n# df_test['Embarked'].unique()","daa82313":"df_test = prepare_data(df_test, drop_passenger_id=False)\n# print('Train Data')\n# print('-'*75)\n# print(df_train.head())\n# print('='*75)\n# print('Test Data')\n# print('-'*75)\nprint(df_test.head())","79861f5e":"test_data = df_test.values\ntest_data","39b52abe":"# Get the test data features, skipping the first column 'PassengerId'\ntest_x = test_data[:, 1:]\n\n# Predict the Survival values for the test data\ntest_y = clf.predict(test_x)","2963d116":"df_test['Survived'] = test_y.astype(int)\ndf_test.head()","9d03a2cc":"df_test[['PassengerId', 'Survived']].to_csv('.\/output.csv', index=False)","6c377366":"from sklearn import metrics\nfrom sklearn.model_selection import train_test_split\n\n# Split 80-20 train vs test data\ntrain_data_x, test_data_x, train_data_y, test_data_y = train_test_split(\n    train_features, \n    train_target, \n    test_size=0.20, \n    random_state=0\n)\n\nprint(train_features.shape, train_target.shape)\nprint(train_data_x.shape, train_data_y.shape)\nprint(test_data_x.shape, test_data_y.shape)","509e78a1":"from sklearn.metrics import accuracy_score\n\nrandom_forest_clf = clf.fit(train_data_x, train_data_y)\npredict_y = random_forest_clf.predict(test_data_x)\n\naccuracy = accuracy_score(test_data_y, predict_y)\nprint('Accuracy = ', accuracy)","383db08e":"# from IPython.core.display import Image \n# Image(filename='.\/img\/confusion_matrix.png')","458b0362":"Reason for removing above column\n- Age: We've ussed `AgeFill` due to some missing value of Age\n- SibSp, Parch: we calculated `FamilySize` using the two\n- PassengerId: Doesn't bear any meaning, just like `Name`\n\n---\n\nConvert this dataframe to `numpy` array","241529cd":"# Random Forest: Predicting\n#### Read test data:","6dac54ac":"## Feature: Embarked\nThe Embarkment column might be an important feature, but it is missing some data points, which might be a paroblem for machine learning model","d4adc40e":"Now, we'll transform Sex from a `string` to a `number` representation in a  new column *Sex_Val*","939fb77b":"It is seen those that embarked in 'C': 1 has highest survival rate","5d9932cf":"As the majority of passengers embarked in 'S', we'll assign the missing values in Embarked to 'S':","7c4b3f70":"**Plot survival rate by sex and Pclass**","a92d279c":"**Now, plot AgeFill density by Pclass** ","e79d74e6":"## Feature: Sex\nNow, a mapping of sex from a `string` to a `number` will be generated","0ddf281a":"## Final Data Preparation for Machine Learning","5bf9e7ac":"#### Now, count number of males and females in each Pclass","ef09f9e3":"Now check that we do not have any more NaNs for Embarked_Val:","049964fa":"## Feature: Family Size","aa4dfb09":"For female and male servivors, it is seen that, most survivors were from the age of 20's and 30's.","e575d4dd":"Plot histogram for \"Embarked_Val\"","48d3ebd9":"From the above plot, it is seen that the majority of females survived, where the majority of males didn't","69795456":"Now, transform the embarked from string to number representation","8c9b8804":"Determine the age for each passenger by `Sex_Val` using median instead of mean.","b689a100":"Now, plot a histogram of `FamilySize` segmented by `Survived`","8d021f31":"Drop these object type columns:","eb01246a":"## Random Forest: Training","1f7ed5e1":"## Get Classification Report","68af0d5f":"We will aggreegate the steps of cleaning the data into one place and will put those inside a function so that we can clean the **testing data** the same way as **training data**. ","282dda25":"It is seen that most of the passenger travelled alone without any family member.\n\n---\n\nPlot a histogram of `FamilySize`.","a21e090b":"**Note:** In the above cell **Age, Cabin and Embarked** have missing values","cd075eac":"## Evaluating Model Accuracy","2e585f02":"Now, we plot to determine **gender** and **passenger** class makeup for each port","6974741c":"Generate a cross tab of **Sex_Val** and **Survived**","404aed07":"## Feature: Passenger Classes\nNow, generate across tab of Pclass and Survived: ","fe6e5b1d":"## Random Forest: Prepare for Kaggle Submission\nCreate a **DataFrame** by combining the index from test data with the output of prediction and then write the result to output **CSV** file","559b93d4":"This graph doesn't show anything clear","68c2d5c9":"Many machine learning algorithm don't work on `string` and they usuallr require data as `array or list`, not a DataFrame.\n\nShow object(string) type columns:","cecdc0a5":"It is seen that, most survivors are from the age of 20's to 30's\n\n---\n\nNow, draw `AgeFill` histogram for the `female survivors`","fdcf133b":"Plot a cross tab for **Embarked_Val** and **Survived**","daa86072":" \nPlot a normalized (i.e., in [0, 1]) cross tab of **Sex_Val** and **Survived**","d0ee6fd6":"Faamily size = No. of siblings & spouses + No. of parents & children","f736b182":"It is seen that **passanger class** seems to have a significant impact on whether a passanger servived. Higher class passanger have more chance to survive.\n\n### Decision:\nThe **higher is the passenger class**, the more the **survival rate** is.","e8cdf33f":"#### ** The codes bellow is taken from [THIS](https:\/\/nbviewer.jupyter.org\/github\/TarrySingh\/Machine-Learning-Tutorials\/blob\/master\/kaggle\/titanic.ipynb#Kaggle-Machine-Learning-Competition:-Predicting-Titanic-Survivors) tutorial.","eeff6550":"Higher class passengers are older than that of the lower class.\n\n---\n\nNow, draw `AgeFill` histogram for the survivors","b3a937b8":"## Data Cleaning Summary","320364fe":"## Missing value columns -> Age, Cabin, Embarked","c2e9554a":"**The elaboration of column name:**\n- Survived -> If a passenger survived or not\n- Pclass -> passenger class\n- SibSp -> Number of (siblings + spouses)\n- Parch -> Number of (parents + children)","6787553c":"Map `Embarked`from string to a number representation","9dbaf4be":"================== **End of Getting the Output** =======================","dc1fc9f6":"### Feature: Age"}}