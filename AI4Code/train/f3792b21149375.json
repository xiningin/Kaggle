{"cell_type":{"4637f0ae":"code","9a224558":"code","7f45b145":"code","d5a85440":"code","edea9c43":"code","67801ba4":"code","cd2fab99":"code","b9de8eca":"code","6ce2ba76":"code","7ddda090":"code","054e57ed":"code","281b5f75":"code","6f8d15cb":"code","cfc0104e":"code","de51b3ae":"code","6fbd64d4":"markdown","1f1cd900":"markdown","88190573":"markdown","5e3742d0":"markdown","445cf293":"markdown","225ba6fb":"markdown","dc56db98":"markdown","99d3d1f6":"markdown","75b2c288":"markdown"},"source":{"4637f0ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a224558":"import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","7f45b145":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\n\n","d5a85440":"df_train.head()\n","edea9c43":"df_train.corr()","67801ba4":"df_train['Survived'] = df_train['Survived'].astype(int)\ndf_train['Survived']\n","cd2fab99":"\ny = df_train['Survived'].astype('int')\nfeatures = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Cabin']\n\nX = pd.get_dummies(df_train[features])\nX_test = pd.get_dummies(df_test[features])\n\n\n\n","b9de8eca":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n\n","6ce2ba76":"from xgboost import XGBClassifier\n\nmodel = XGBClassifier(learning_rate = 0.05,\n                     n_estimators=300,\n                     max_depth = 4)\nmodel.fit(X_train, y_train)","7ddda090":"y_pred = model.predict(X_test).astype(int)\n\n","054e57ed":"from sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, predictions)\nprint('My model accuracy is: %.2f%%' % (accuracy *100.0))","281b5f75":"import matplotlib.pyplot as plt\nfrom xgboost import plot_importance\n\nplot_importance(model)\nplt.show()","6f8d15cb":"predictions = model.predict(df_test[features])","cfc0104e":"# make predictions for test data:\n\ny_pred = model.predict(X_test).astype(int)\npredictions = [round(value) for value in y_pred]\n\n#create a df of predictions of Test data:\npred_df_file = pd.DataFrame({'Survived': predictions}).astype(int)\n\n# combine the Passenger Id and their associated prediction:\nsubmission = pd.concat([df_test['PassengerId'], pred_df_file], axis ='columns')\n\n#output file for submission:\n\nsubmission = pd.DataFrame({\n    \"PassengerId\": df_test[\"PassengerId\"],\n    \"Survived\": y_pred })\nsubmission.to_csv('titanic.csv', index=False)","de51b3ae":"print(submission)","6fbd64d4":"- define our target - Survived, and convert categorical features values into dummies aka numerical for xgboost processing:","1f1cd900":"- Predictions with a round value:","88190573":"- Model evaluation of accuracy:","5e3742d0":"- define xgboost hyperparameters\n- training the model","445cf293":"- making a kaggle export:","225ba6fb":"# Less is more. Keep it simple\n\n- All of this analysis was done straight to the point to achieve the goal quickly and efficiently without the unneccasy 'candy wrapping' of hundred uncessary histograms, charts and comparisons to look 'smart'. Time is money. So here it is, clean and simple.","dc56db98":"- split the training data with train test split:","99d3d1f6":"### As i suspected, the most important feature in survival rate was the Fare. Obviously the VIP's had the priority boarding upon embarking and also upon emergency. From those VIP's first came the youngest ones, women and children in the family, hence the 'Age' being selected as the second most import feature in survival rate. Conclusion of the story - Money buys priority in life. ","75b2c288":"- Quick correlation observation to determine the most fit variables for our feature or 'predictor' set:"}}