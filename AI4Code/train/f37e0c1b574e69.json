{"cell_type":{"7eb20fde":"code","40296f25":"code","f59711fd":"code","dc0db5d5":"code","a38fb955":"code","9e6dbffc":"code","dd984776":"code","a8de30fb":"code","344c73bd":"code","8e49e5e2":"code","2c04bea3":"code","6bd36d3f":"code","1f327c67":"code","fe9d6558":"markdown","5843b791":"markdown","bf66981e":"markdown","ae02e478":"markdown","8a664b04":"markdown","5e5f6d22":"markdown","eb539fb1":"markdown"},"source":{"7eb20fde":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom sklearn.model_selection import KFold\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import cross_val_score\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import models","40296f25":"#from google.colab import drive\n\n#drive.mount('\/content\/gdrive')","f59711fd":"train_data = pd.read_csv(\"..\/input\/toy-cement-strength-data-set\/TrainData.csv\", header=None, delimiter= \" \") \n\ntrain_labels = pd.read_csv(\"..\/input\/toy-cement-strength-data-set\/TrainLabels.csv\", header=None, delimiter= \" \")\n\ntest_data = pd.read_csv(\"..\/input\/toy-cement-strength-data-set\/TestData.csv\", header=None, delimiter= \" \")\n\n","dc0db5d5":"train_data.shape  , train_labels.shape  , test_data.shape","a38fb955":"train_data.head()","9e6dbffc":"test_data.head()","dd984776":"# Using Skicit-learn to split data into training and testing sets\nfrom sklearn.model_selection import train_test_split\n\n# Split the data into training and testing sets\ntrain_features, test_features, train_labels, test_labels = train_test_split(train_data, train_labels, test_size = 0.25, random_state = 42)","a8de30fb":"train_features.shape  , train_labels.shape ,  test_features.shape  , test_labels.shape ","344c73bd":"train_label = train_labels.to_numpy()\n#train_features = train_features.to_numpy()","8e49e5e2":"# Import the model we are using\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Instantiate model with 1000 decision trees\nrf = RandomForestRegressor(n_estimators = 1000, random_state = 42)\n\n# Train the model on training data\nrf.fit(train_features, train_label.ravel());","2c04bea3":"# Use the forest's predict method on the test data\npredictions = rf.predict(test_features)\npredictions = predictions.reshape(206,1)\n\n# Calculate the absolute errors\nerrors = abs(predictions - test_labels)\n\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(errors), 3), 'degrees.')","6bd36d3f":"# Calculate mean absolute percentage error (MAPE)\nmape = 100 * (errors \/ test_labels)\n\n# Calculate and display accuracy\naccuracy = 100 - np.mean(mape)\nprint('Accuracy:', round(accuracy, 2), '%.')","1f327c67":"predicted_values = pd.DataFrame(predictions)\npredicted_values.columns = [\"predicted_labels using Random Forest\"]\n# Un comment last line to get predications in csv file (y)\n#predicted_values.to_csv(\"..\/input\/toy-cement-strength-data-set\/Random_Forest_testing_labels.csv\")","fe9d6558":"## Accuracy ","5843b791":"\n\n\n## Regressioin Problem","bf66981e":"### Loading data ","ae02e478":"### Looking dimensions of data","8a664b04":"### Normalizing Data set","5e5f6d22":"## Random Forest\n","eb539fb1":"### Saving predications from Random Forest"}}