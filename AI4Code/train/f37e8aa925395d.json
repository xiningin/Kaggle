{"cell_type":{"9551e3d3":"code","62b38587":"code","dd18b9be":"code","f9ac4e5e":"code","a2b56dc8":"code","a6657811":"code","fe999e17":"code","b219c99a":"code","ba4d0ca6":"code","70f83a0d":"code","0653334d":"code","82a7d6b8":"code","b6483012":"code","26c4c1e9":"code","99c4c82c":"code","6de8e688":"code","82df938d":"code","2c9c3e89":"code","1508239c":"code","79a3362b":"code","fc30adba":"code","df13a2fc":"code","5c489aaa":"code","73b01bb0":"code","73ed2871":"code","56272da1":"code","7386c63f":"code","ff0bfd9d":"code","2924fab1":"code","3a9f4c18":"code","448caa90":"code","b76ce1eb":"code","f64d5b18":"code","907ede40":"code","b6237ffa":"code","61216cdb":"code","9d0efa47":"code","552aa765":"code","b3e071f8":"code","7ce398c3":"code","e32c3767":"code","2860e89f":"code","49d19683":"code","9108f9a1":"code","cc25a649":"code","9d32701f":"code","5302015d":"markdown","3b48aa46":"markdown","1ea74dfa":"markdown","1c79d42b":"markdown"},"source":{"9551e3d3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport matplotlib.pyplot as plt\nimport seaborn as sns","62b38587":"df=pd.read_csv('\/kaggle\/input\/twitchdata\/twitchdata-update.csv') #importing our data","dd18b9be":"df.head() #checking the head of our data","f9ac4e5e":"df.isnull().sum() #checking for null values in ou data","a2b56dc8":"df.dtypes #checking the type of each column","a6657811":"df.describe().T","fe999e17":"plt.style.use('dark_background') #checking the stream times of top 50 streamers\nplt.figure(figsize = (20,7))\ndf['Stream time(minutes)'].head(50).plot.bar(color = 'orangered')\nplt.title('Comparing the different stream times (in minutes)')\nplt.xlabel('Streamers')\nplt.ylabel('Count')\nplt.show()","b219c99a":"plt.style.use('dark_background') #checking the followers gained by our Top 50 Streamers\nplt.figure(figsize = (20,7))\ndf['Followers gained'].head(50).plot.bar(color = 'orangered')\nplt.title('Comparing the followers gained by our Top 50 Streamers')\nplt.xlabel('Streamers')\nplt.ylabel('Count')\nplt.show() ","ba4d0ca6":"plt.style.use('dark_background') #checking the views gained by our Top 50 Streamers\nplt.figure(figsize = (20,7))\ndf['Views gained'].head(50).plot.bar(color = 'orangered')\nplt.title('Comparing the views gained by our Top 50 Streamers')\nplt.xlabel('Streamers')\nplt.ylabel('Count')\nplt.show()  ","70f83a0d":"plt.style.use('dark_background') #checking the Average nmber of viewers of our Top 50 Streamers\nplt.figure(figsize = (20,7))\ndf['Average viewers'].head(50).plot.bar(color = 'orangered')\nplt.title('Comparing the average viewers of our Top 50 Streamers')\nplt.xlabel('Streamers')\nplt.ylabel('Count')\nplt.show()  ","0653334d":"plt.style.use('dark_background') #checking the streamers that stream in a perticular language\nplt.figure(figsize = (20,7))\ndf['Language'].value_counts().head(20).plot.bar(color = 'orangered')\nplt.title('Languages that Streamers stream in')\nplt.xlabel('Languages')\nplt.ylabel('Count')\nplt.show()","82a7d6b8":"df.dtypes","b6483012":"sns.countplot(x='Partnered',data = df) #checking how many are twitch partnered","26c4c1e9":"df[df['Partnered'] == True][['Channel', 'Watch time(Minutes)', 'Stream time(minutes)', 'Followers']].head(10) #checking the top 10 streamers that are twitch partnered","99c4c82c":"sns.countplot(x='Mature',data = df) #checking how many streams are tagged as mature","6de8e688":"df[df['Mature'] == True][['Channel', 'Watch time(Minutes)', 'Stream time(minutes)', 'Followers']].head(10) #checking the top 10 streamers with mature streams","82df938d":"plt.figure(figsize=(12,8))\nsns.heatmap(df[['Channel', 'Watch time(Minutes)', 'Stream time(minutes)', 'Followers','Peak viewers','Average viewers','Followers gained','Views gained','Partnered','Mature','Language']].corr(), annot = True) #overall correlation between the various columns present in our data\nplt.title('Overall relation between columns of the Dataset', fontsize = 20)\nplt.show()","2c9c3e89":"def streamer(x): #method to check stats of an individual streamer\n    return df.loc[df['Channel']==x]","1508239c":"def lang(x): #method to check the details about a streamer that streams in a particular language\n        return df[df['Language'] == x][['Channel','Followers','Partnered','Mature']].head(10)","79a3362b":"streamer('Anomaly')","fc30adba":"lang('Spanish')","df13a2fc":"plt.figure(figsize=(12,8)) #comparing streaming time v\/s followers gained\nsns.lineplot(df['Stream time(minutes)'], df['Followers gained'], palette = \"Set1\")\nplt.title('Streaming time v\/s Followers gained', fontsize = 20)\nplt.show()","5c489aaa":"plt.figure(figsize=(12,8)) #comparing streaming time v\/s average viewers\nsns.lineplot(df['Stream time(minutes)'], df['Average viewers'], palette = \"Set1\")\nplt.title('Streaming time v\/s Average Viewers', fontsize = 20)\nplt.show()","73b01bb0":"df.head()","73ed2871":"def streamtime(x): #method to check the streamer that had the most streaming time in our data\n    return df.loc[df['Stream time(minutes)']==x]\ndef watchtime(x): #method to check the streamer that had the most watch time in our data\n    return df.loc[df['Watch time(Minutes)']==x]\ndef avgviewers(x): #method to check the streamer that had the most number of average viewers\n    return df.loc[df['Average viewers']==x]\ndef follow(x): #method to check the streamer that had the most followers in our data\n    return df.loc[df['Followers']==x] \ndef followgained(x): #method to check the streamer that had the most followers gained in our data\n    return df.loc[df['Followers gained']==x] \ndef viewgained(x): #method to check the streamer that had the most views gained in our data\n    return df.loc[df['Views gained']==x] ","56272da1":"streamtime(df['Stream time(minutes)'].max())","7386c63f":"watchtime(df['Watch time(Minutes)'].max())","ff0bfd9d":"avgviewers(df['Average viewers'].max())","2924fab1":"follow(df['Followers'].max())","3a9f4c18":"followgained(df['Followers gained'].max())","448caa90":"viewgained(df['Views gained'].max())","b76ce1eb":"plt.figure(figsize=(20,8)) #comparing streamers on basis of their number of followers\ntop = ('Tfue', 'summit1g','NICKMERCS')\ndf2 = df.loc[df['Channel'].isin(top)  & df['Followers'] ]\n\nax = sns.barplot(x=df2['Channel'], y=df2['Followers'], palette=\"Set1\");\nax.set_title(label='Channel comparison on basis of no.of Followers', fontsize=20);","f64d5b18":"from wordcloud import WordCloud\nplt.subplots(figsize=(12,8))\nwordcloud = WordCloud(\n                          background_color='Black',\n                          width=1920,\n                          height=1080\n                         ).generate(\" \".join(df.Language))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","907ede40":"from wordcloud import WordCloud\nplt.subplots(figsize=(12,8))\nwordcloud = WordCloud(\n                          background_color='Black',\n                          width=1920,\n                          height=1080\n                         ).generate(\" \".join(df.Channel))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","b6237ffa":"df1 = df.copy()","61216cdb":"df1.head()","9d0efa47":"df1.dtypes","552aa765":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","b3e071f8":"X = df1[['Watch time(Minutes)','Stream time(minutes)','Peak viewers','Average viewers','Followers','Views gained']]\ny = df1['Followers gained']","7ce398c3":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state = 101)","e32c3767":"scaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","2860e89f":"linear  = LinearRegression()\nlinear.fit(X_train,y_train)\npred = linear.predict(X_test)","49d19683":"from sklearn.metrics import r2_score, mean_squared_error\nprint('r2 score: '+str(r2_score(y_test, pred)))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(y_test, pred))))","9108f9a1":"df1.head()","cc25a649":"user_input = [[6196161750,215250,222720,27716,3246298,93036735]]        #['Watch time(Minutes)','Stream time(minutes)','Peak viewers','Average viewers','Followers','Views gained']\nuser_pred = linear.predict(user_input)\nprint(\"Follower Gained by the streamer are:-\",user_pred)","9d32701f":"#Visualising the results\nplt.figure(figsize=(12,8))\nsns.regplot(pred,y_test,scatter_kws={'color':'red','edgecolor':'blue','linewidth':'0.7'},line_kws={'color':'red','alpha':0.5})\nplt.xlabel('Followers Gained')\nplt.ylabel('Features')\nplt.title(\"Linear Prediction of Followers Gained by a Streamer\")\nplt.show()","5302015d":"# Data Preprocessing\n---","3b48aa46":"# Exploratory Data Analysis\n---","1ea74dfa":"# Importing Project Dependencies\n---","1c79d42b":"# Modeling\n---"}}