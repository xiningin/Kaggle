{"cell_type":{"865b489a":"code","afcc1e77":"code","68100d23":"code","f924417f":"code","df5f5511":"code","452ee489":"code","1c42aa08":"code","4713e67b":"code","299f8f3b":"code","16227321":"code","df75cf52":"code","1075619b":"code","830ef03c":"code","64250c89":"code","0201362d":"code","47b2f8f4":"code","774cec68":"code","db9c98e2":"code","ac8cc816":"code","f2822197":"code","2b15cca6":"code","31787508":"code","bd1a7bce":"code","2d4a7f92":"code","7d8ffb06":"code","b9c37d80":"code","cfce6676":"code","726bf1bf":"markdown"},"source":{"865b489a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","afcc1e77":"import pandas as pd \nimport numpy as np\nimport re\n\n# Import the string dictionary that we'll use to remove punctuation\nimport string\nimport nltk\nfrom nltk.corpus import stopwords\n\n# sklearn \nfrom sklearn import model_selection\n# CountVectorizer will help calculate word counts\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\n\n# File system manangement\nimport os","68100d23":"# Import datasets\ntrain = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/test.csv')\nsample = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv')","f924417f":"train.isnull().sum()","df5f5511":"test.isnull().sum()","452ee489":"train.dropna(axis = 0, how ='any',inplace=True) ;","1c42aa08":"# Positive tweet\nprint(\"Positive Tweet example :\",train[train['sentiment']=='positive']['text'].values[0])\n#negative_text\nprint(\"Negative Tweet example :\",train[train['sentiment']=='negative']['text'].values[0])\n#neutral_text\nprint(\"Neutral tweet example  :\",train[train['sentiment']=='neutral']['text'].values[0])","4713e67b":"train['sentiment'].value_counts()","299f8f3b":"train['sentiment'].value_counts(normalize=True)","16227321":"def clean_text(text):\n    '''Make text lowercase, remove text in square brackets,remove links,remove punctuation\n    and remove words containing numbers.'''\n    text = text.lower()\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    return text\n\n\ndef text_preprocessing(text):\n    \"\"\"\n    Cleaning and parsing the text.\n\n    \"\"\"\n    tokenizer = nltk.tokenize.RegexpTokenizer(r'\\w+')\n    nopunc = clean_text(text)\n    tokenized_text = tokenizer.tokenize(nopunc)\n    #remove_stopwords = [w for w in tokenized_text if w not in stopwords.words('english')]\n    combined_text = ' '.join(tokenized_text)\n    return combined_text","df75cf52":"train['text_clean'] = train['text'].apply(str).apply(lambda x: text_preprocessing(x))\ntest['text_clean'] = test['text'].apply(str).apply(lambda x: text_preprocessing(x))","1075619b":"train['text_len'] = train['text_clean'].astype(str).apply(len)\ntrain['text_word_count'] = train['text_clean'].apply(lambda x: len(str(x).split()))","830ef03c":"train.head(10)","64250c89":"train['text'] = train['text'].apply(lambda x: x.lower())\ntest['text'] = test['text'].apply(lambda x: x.lower())\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_val = train_test_split(\n    train, train_size = 0.80, random_state = 0)","0201362d":"pos_train = X_train[X_train['sentiment'] == 'positive']\nneutral_train = X_train[X_train['sentiment'] == 'neutral']\nneg_train = X_train[X_train['sentiment'] == 'negative']","47b2f8f4":"# Use CountVectorizer to get the word counts within each dataset\n\ncv = CountVectorizer(max_df=0.95, min_df=2,\n                                     max_features=10000,\n                                     stop_words='english')\n\nX_train_cv = cv.fit_transform(X_train['text'])\n\nX_pos = cv.transform(pos_train['text'])\nX_neutral = cv.transform(neutral_train['text'])\nX_neg = cv.transform(neg_train['text'])\n\npos_count_df = pd.DataFrame(X_pos.toarray(), columns=cv.get_feature_names())\nneutral_count_df = pd.DataFrame(X_neutral.toarray(), columns=cv.get_feature_names())\nneg_count_df = pd.DataFrame(X_neg.toarray(), columns=cv.get_feature_names())\n\n# Create dictionaries of the words within each sentiment group, where the values are the proportions of tweets that \n# contain those words\n\npos_words = {}\nneutral_words = {}\nneg_words = {}\n\nfor k in cv.get_feature_names():\n    pos = pos_count_df[k].sum()\n    neutral = neutral_count_df[k].sum()\n    neg = neg_count_df[k].sum()\n    \n    pos_words[k] = pos\/pos_train.shape[0]\n    neutral_words[k] = neutral\/neutral_train.shape[0]\n    neg_words[k] = neg\/neg_train.shape[0]\n    \n# We need to account for the fact that there will be a lot of words used in tweets of every sentiment.  \n# Therefore, we reassign the values in the dictionary by subtracting the proportion of tweets in the other \n# sentiments that use that word.\n\nneg_words_adj = {}\npos_words_adj = {}\nneutral_words_adj = {}\n\nfor key, value in neg_words.items():\n    neg_words_adj[key] = neg_words[key] - (neutral_words[key] + pos_words[key])\n    \nfor key, value in pos_words.items():\n    pos_words_adj[key] = pos_words[key] - (neutral_words[key] + neg_words[key])\n    \nfor key, value in neutral_words.items():\n    neutral_words_adj[key] = neutral_words[key] - (neg_words[key] + pos_words[key])","774cec68":"def calculate_selected_text(df_row, tol = 0):\n    \n    tweet = df_row['text']\n    sentiment = df_row['sentiment']\n    \n    if(sentiment == 'neutral'):\n        return tweet\n    \n    elif(sentiment == 'positive'):\n        dict_to_use = pos_words_adj # Calculate word weights using the pos_words dictionary\n    elif(sentiment == 'negative'):\n        dict_to_use = neg_words_adj # Calculate word weights using the neg_words dictionary\n        \n    words = tweet.split()\n    words_len = len(words)\n    subsets = [words[i:j+1] for i in range(words_len) for j in range(i,words_len)]\n    \n    score = 0\n    selection_str = '' # This will be our choice\n    lst = sorted(subsets, key = len) # Sort candidates by length\n    \n    \n    for i in range(len(subsets)):\n        \n        new_sum = 0 # Sum for the current substring\n        \n        # Calculate the sum of weights for each word in the substring\n        for p in range(len(lst[i])):\n            if(lst[i][p].translate(str.maketrans('','',string.punctuation)) in dict_to_use.keys()):\n                new_sum += dict_to_use[lst[i][p].translate(str.maketrans('','',string.punctuation))]\n            \n        # If the sum is greater than the score, update our current selection\n        if(new_sum > score + tol):\n            score = new_sum\n            selection_str = lst[i]\n            #tol = tol*5 # Increase the tolerance a bit each time we choose a selection\n\n    # If we didn't find good substrings, return the whole text\n    if(len(selection_str) == 0):\n        selection_str = words\n        \n    return ' '.join(selection_str)","db9c98e2":"pd.options.mode.chained_assignment = None","ac8cc816":"tol = 0.001\n\nX_val['predicted_selection'] = ''\n\nfor index, row in X_val.iterrows():\n    \n    selected_text = calculate_selected_text(row, tol)\n    \n    X_val.loc[X_val['textID'] == row['textID'], ['predicted_selection']] = selected_text","f2822197":"def jaccard(str1, str2): \n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","2b15cca6":"X_val['jaccard'] = X_val.apply(lambda x: jaccard(x['selected_text'], x['predicted_selection']), axis = 1)\n\nprint('The jaccard score for the validation set is:', np.mean(X_val['jaccard']))","31787508":"pos_tr = train[train['sentiment'] == 'positive']\nneutral_tr = train[train['sentiment'] == 'neutral']\nneg_tr = train[train['sentiment'] == 'negative']","bd1a7bce":"cv = CountVectorizer(max_df=0.95, min_df=2,\n                                     max_features=10000,\n                                     stop_words='english')\n\nfinal_cv = cv.fit_transform(train['text'])\n\nX_pos = cv.transform(pos_tr['text'])\nX_neutral = cv.transform(neutral_tr['text'])\nX_neg = cv.transform(neg_tr['text'])\n\npos_final_count_df = pd.DataFrame(X_pos.toarray(), columns=cv.get_feature_names())\nneutral_final_count_df = pd.DataFrame(X_neutral.toarray(), columns=cv.get_feature_names())\nneg_final_count_df = pd.DataFrame(X_neg.toarray(), columns=cv.get_feature_names())","2d4a7f92":"pos_words = {}\nneutral_words = {}\nneg_words = {}\n\nfor k in cv.get_feature_names():\n    pos = pos_final_count_df[k].sum()\n    neutral = neutral_final_count_df[k].sum()\n    neg = neg_final_count_df[k].sum()\n    \n    pos_words[k] = pos\/(pos_tr.shape[0])\n    neutral_words[k] = neutral\/(neutral_tr.shape[0])\n    neg_words[k] = neg\/(neg_tr.shape[0])","7d8ffb06":"neg_words_adj = {}\npos_words_adj = {}\nneutral_words_adj = {}\n\nfor key, value in neg_words.items():\n    neg_words_adj[key] = neg_words[key] - (neutral_words[key] + pos_words[key])\n    \nfor key, value in pos_words.items():\n    pos_words_adj[key] = pos_words[key] - (neutral_words[key] + neg_words[key])\n    \nfor key, value in neutral_words.items():\n    neutral_words_adj[key] = neutral_words[key] - (neg_words[key] + pos_words[key])","b9c37d80":"tol = 0.001\n\nfor index, row in test.iterrows():\n    \n    selected_text = calculate_selected_text(row, tol)\n    \n    sample.loc[sample['textID'] == row['textID'], ['selected_text']] = selected_text","cfce6676":"sample.to_csv('submission.csv', index = False)","726bf1bf":"Understanding the Evaluation Metric\n-\n-Jaccard Score is a measure of how similar\/dissimilar two sets are. The higher the score, the more similar the two strings. The idea is to find the number of common tokens and divide it by the total number of unique tokens"}}