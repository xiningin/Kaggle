{"cell_type":{"c80a11b4":"code","9532e6cd":"code","fba06d89":"code","6e49b176":"code","76490489":"code","3c49e6f5":"code","ce99cba4":"code","8eb24fd7":"code","af2d4351":"code","b9dce980":"code","ed105b51":"code","9c041ef4":"code","24b3c91f":"code","b6e18029":"code","af56ffa3":"code","241cf7ea":"code","c1044841":"code","31480074":"code","e854a786":"code","8bce16dc":"code","e09dbb1a":"code","ab2cd466":"code","fcf388e5":"code","1876eb51":"code","873580e6":"markdown"},"source":{"c80a11b4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9532e6cd":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.preprocessing import LabelBinarizer\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom wordcloud import WordCloud,STOPWORDS\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize,sent_tokenize\nfrom bs4 import BeautifulSoup\nimport re,string,unicodedata\nfrom nltk.tokenize.toktok import ToktokTokenizer\nfrom nltk.stem import LancasterStemmer,WordNetLemmatizer\nfrom sklearn.linear_model import LogisticRegression,SGDClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom string import punctuation\nfrom nltk import pos_tag\nfrom nltk.corpus import wordnet","fba06d89":"#importing the training data\ndf=pd.read_csv('..\/input\/amazon-fine-food-reviews\/Reviews.csv')\ndf.head()","6e49b176":"#Summary of the dataset\ndf.describe()","76490489":"def strip_html(text):\n    soup = BeautifulSoup(text, \"html.parser\")\n    return soup.get_text()\n\n#Removing the square brackets\ndef remove_between_square_brackets(text):\n    return re.sub('\\[[^]]*\\]', '', text)\n# Removing URL's\ndef remove_between_square_brackets(text):\n    return re.sub(r'http\\S+', '', text)\n#Removing the noisy text\ndef denoise_text(text):\n    text = strip_html(text)\n    text = remove_between_square_brackets(text)\n    return text\n#Apply function on review column\ndf['Text']=df['Text'].apply(denoise_text)","3c49e6f5":"plt.figure(figsize = (10,10))\ncorr = df.corr()\nsns.heatmap(corr , mask=np.zeros_like(corr, dtype=np.bool) , cmap=sns.diverging_palette(-100,0,as_cmap=True) , square = True)","ce99cba4":"del df['Id']\ndel df['Time']\ndel df['UserId']\ndel df['ProductId']\ndel df['HelpfulnessNumerator']\ndel df['HelpfulnessDenominator']","8eb24fd7":"df.head()","af2d4351":"df['Text'] = df['Text'] + ' ' + df['Summary'] + ' ' + df['ProfileName']\ndel df['Summary']\ndel df['ProfileName']\ndf.head()","b9dce980":"def score_sentiment(score):\n    # Replace scores of 1,2,3 with 0 (not good) and 4,5 with 1 (good)\n    if(score == 1 or score == 2 or score == 3):\n        return 0\n    else:\n        return 1\ndf.Score = df.Score.apply(score_sentiment)    ","ed105b51":"df.head()","9c041ef4":"df.isna().sum()","24b3c91f":"df.Text.fillna(\"\",inplace = True)","b6e18029":"stop = set(stopwords.words('english'))\npunctuation = list(string.punctuation)\nstop.update(punctuation)","af56ffa3":"stemmer = PorterStemmer()\ndef stem_text(text):\n    final_text = []\n    for i in text.split():\n        if i.strip().lower() not in stop:\n            word = stemmer.stem(i.strip())\n            final_text.append(word)\n    return \" \".join(final_text)","241cf7ea":"df.Text = df.Text.apply(stem_text)","c1044841":"plt.figure(figsize = (20,20)) # Text with bad\/average reviews\nwc = WordCloud(max_words = 3000 , width = 1600 , height = 800).generate(\" \".join(df[df.Score == 0].Text))\nplt.imshow(wc , interpolation = 'bilinear')","31480074":"plt.figure(figsize = (20,20)) # Text with good reviews\nwc = WordCloud(max_words = 3000 , width = 1600 , height = 800).generate(\" \".join(df[df.Score ==1].Text))\nplt.imshow(wc , interpolation = 'bilinear')","e854a786":"x_train,x_test,y_train,y_test = train_test_split(df.Text,df.Score,random_state = 0)","8bce16dc":"cv=CountVectorizer(min_df=0,max_df=1,ngram_range=(1,2))\n#transformed train reviews\ncv_train_reviews=cv.fit_transform(x_train)\n#transformed test reviews\ncv_test_reviews=cv.transform(x_test)\n\nprint('BOW_cv_train:',cv_train_reviews.shape)\nprint('BOW_cv_test:',cv_test_reviews.shape)","e09dbb1a":"lr=LogisticRegression(penalty='l2',max_iter=500,C=1,random_state=0)\n#Fitting the model for Bag of words\nlr_bow=lr.fit(cv_train_reviews,y_train)\nprint(lr_bow)","ab2cd466":"#Predicting the model for bag of words\nlr_bow_predict=lr.predict(cv_test_reviews)","fcf388e5":"#Accuracy score for bag of words\nlr_bow_score=accuracy_score(y_test,lr_bow_predict)\nprint(\"lr_bow_score :\",lr_bow_score)","1876eb51":"#Classification report for bag of words\nlr_bow_report=classification_report(y_test,lr_bow_predict,target_names=['0','1'])\nprint(lr_bow_report)","873580e6":"**Leaving the features with text data aside, we now find the correlation between other different features in the datset and their influence on score**"}}