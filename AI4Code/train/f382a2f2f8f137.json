{"cell_type":{"65e5dd67":"code","c73a8bb3":"code","3152d416":"code","99f55104":"code","d1a310c3":"code","f489a7e4":"code","25f5fb93":"code","be3ac5e6":"code","5d806f9e":"code","20881921":"code","e7b1822a":"code","e76021db":"code","ab1304d2":"code","c5851e7e":"code","f5aae1b4":"code","49d11547":"code","8542b923":"markdown","58060c85":"markdown","fc09ff37":"markdown"},"source":{"65e5dd67":"batch_size = 64\nepochs = 150","c73a8bb3":"%matplotlib inline  \nimport numpy as np\nimport pandas as pd\nfrom keras import optimizers, losses, activations, models\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping, LearningRateScheduler\nfrom keras import layers\nimport librosa\nimport numpy as np\nimport glob\nimport os\nimport pandas as pd\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom random import shuffle\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm\nimport h5py\naudio_dir = '..\/input\/freesound-audio-tagging\/'\nfeature_dir = '..\/input\/spectrogram-data-preparation\/'","3152d416":"train_labels = pd.read_csv(os.path.join(audio_dir, \"train.csv\"))\nprint(len(train_labels), 'training')\ntrain_labels.groupby(['label']).size().plot.bar()\ntrain_labels.sample(3)","99f55104":"from sklearn.preprocessing import LabelEncoder\nfull_train_ds_pointer = h5py.File(os.path.join(feature_dir, 'spectrograms.h5'))\nfor k in full_train_ds_pointer.keys():\n    print(k, full_train_ds_pointer[k].shape)\ninput_length = full_train_ds_pointer['spectrograms'].shape[1]\nN_MEL_COUNT = full_train_ds_pointer['spectrograms'].shape[2]\nlab_enc = LabelEncoder()\nall_labels = lab_enc.fit_transform(full_train_ds_pointer['label'].value)\nnclass = len(lab_enc.classes_)","d1a310c3":"fig, m_axs = plt.subplots(15, 8, figsize = (10, 30))\nfor c_class, c_axs in zip(np.random.permutation(range(nclass)), m_axs):\n    idxs = np.where(all_labels==c_class)[0]\n    c_axs[0].set_title(lab_enc.classes_[c_class].decode())\n    c_axs[0].set_xlabel('Time')\n    c_axs[1].set_ylabel('Frequency')\n    for c_idx, c_ax in zip(np.random.permutation(idxs), c_axs):\n        c_ax.axis('off')\n        c_ax.imshow(full_train_ds_pointer['spectrograms'][c_idx][:, :, 0].swapaxes(0, 1))","f489a7e4":"from sklearn.model_selection import train_test_split\ntrain_X, valid_X, train_y, valid_y = train_test_split(\n    full_train_ds_pointer['spectrograms'].value,\n    all_labels,\n    test_size = 0.2, \n    random_state = 2018)\nprint('Training', train_X.shape, train_y.shape)\nprint('Validation', valid_X.shape, valid_y.shape)","25f5fb93":"from keras import layers, metrics, applications\n# this is what the results are scored on, so we should keep this\ndef top_3_accuracy(x, y): \n    return metrics.sparse_top_k_categorical_accuracy(x,y,3)\ndef create_model():\n    model = applications.mobilenet.MobileNet(input_shape=train_X.shape[1:],\n                                    classes=nclass,\n                                    weights=None)\n    opt = optimizers.Adam(lr=4e-4)\n    \n    model.compile(optimizer=opt, \n                  loss=losses.sparse_categorical_crossentropy, \n                  metrics=[metrics.sparse_categorical_accuracy,\n                           top_3_accuracy])\n    model.summary()\n    return model\nmodel = create_model()","be3ac5e6":"from keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping\nweight_path=\"{}_weights.best.hdf5\".format('spectro_sound_model')\ncheckpoint = ModelCheckpoint(weight_path, monitor='val_loss', verbose=1, \n                             save_best_only=True, mode='min', save_weights_only = True)\nreduceLROnPlat = ReduceLROnPlateau(monitor='val_loss', \n                                   factor=0.8, patience=5, \n                                   verbose=1, mode='auto', \n                                   epsilon=0.0001, cooldown=5, \n                                   min_lr=0.0001)\nearly = EarlyStopping(monitor=\"val_loss\", \n                      mode=\"min\", \n                      patience=15) # probably needs to be more patient, but kaggle time is limited\ncallbacks_list = [checkpoint, early, reduceLROnPlat]","5d806f9e":"from IPython.display import clear_output\nfit_results = model.fit(train_X, train_y,\n          epochs=epochs,\n          batch_size=batch_size,\n          validation_data=(valid_X, valid_y), \n          callbacks=callbacks_list)\nclear_output()","20881921":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize = (20, 10))\nax1.plot(fit_results.history['loss'], label='Training')\nax1.plot(fit_results.history['val_loss'], label='Validation')\nax1.legend()\nax1.set_title('Loss')\nax2.plot(fit_results.history['sparse_categorical_accuracy'], label='Training')\nax2.plot(fit_results.history['val_sparse_categorical_accuracy'], label='Validation')\nax2.legend()\nax2.set_title('Top 1 Accuracy')\nax2.set_ylim(0, 1)\nax3.plot(fit_results.history['top_3_accuracy'], label='Training')\nax3.plot(fit_results.history['val_top_3_accuracy'], label='Validation')\nax3.legend()\nax3.set_title('Top 3 Accuracy')\nax3.set_ylim(0, 1);","e7b1822a":"model.load_weights(weight_path)\nfor k, v in zip(model.metrics_names, \n        model.evaluate(valid_X, valid_y)):\n    if k!='loss':\n        print('{:40s}:\\t{:2.1f}%'.format(k, 100*v))","e76021db":"model.save(\"spectro_baseline_cnn.h5\")","ab1304d2":"full_test_ds_pointer = h5py.File(os.path.join(feature_dir, 'test_spectrograms.h5'))\nfor k in full_test_ds_pointer.keys():\n    print(k, full_test_ds_pointer[k].shape)\ntest_files = [x.decode() for x in full_test_ds_pointer['fname'].value]\ntest_preds = model.predict(full_test_ds_pointer['spectrograms'].value, \n                           batch_size=batch_size, verbose=True)","c5851e7e":"top_3 = lab_enc.classes_[np.argsort(-test_preds, axis=1)[:, :3]] #https:\/\/www.kaggle.com\/inversion\/freesound-starter-kernel\npred_labels = [' '.join([cat.decode() for cat in row]) for row in top_3]\npred_labels[0:2]","f5aae1b4":"df = pd.DataFrame(test_files, columns=[\"fname\"])\ndf['label'] = pred_labels\ndf['fname'] = df.fname.apply(lambda x: x.split(\"\/\")[-1])\ndf.sample(3)","49d11547":"df.to_csv(\"baseline.csv\", index=False)","8542b923":"## Setup the Model","58060c85":"# Run Predictions on Test Data","fc09ff37":"# Show a few example spectrograms\nWe can see what sort of patterns the model should be looking for"}}