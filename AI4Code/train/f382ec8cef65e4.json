{"cell_type":{"6a06c6b2":"code","da2628a9":"code","1dce89bf":"code","8d0daa17":"code","135cb4ef":"code","5ad1de3e":"code","007019eb":"code","db5bc043":"code","ea7c4e1e":"code","b1a92c68":"code","2d5508d3":"code","40d5e01c":"code","ed136c48":"code","61a2c9d4":"code","b0a6d033":"code","de86507b":"code","c14f8db5":"code","80f72ae4":"code","498aca3b":"code","77e187a0":"code","e65da535":"code","58ccd12a":"code","30a1435b":"code","da59c524":"code","9d604522":"code","4d098b67":"code","b0131ef9":"code","6ba6c3fc":"code","3326742a":"code","193ba2a0":"code","b56160b3":"markdown","371f4a07":"markdown","d15a3db8":"markdown","5f60b2b3":"markdown","1a17bd96":"markdown","d91d1b13":"markdown","9cb1a106":"markdown","36ce39da":"markdown"},"source":{"6a06c6b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","da2628a9":"#reading data\ndata = pd.read_csv('..\/input\/heart.csv')","1dce89bf":"#recognizing features\ndata.head()","8d0daa17":"#info about features and target\ndata.info()\n\n#there is no NaN value or not needed feature in this dataset.","135cb4ef":"data.describe()\n\n#the values of features are needed to be normalized.","5ad1de3e":"#preperation of data:\n\n#y is target column\n#x_data is feature set without normalization\ny = data.target.values\nx_data = data.drop(['target'], axis = 1)","007019eb":"#normalization of feature set\nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values","db5bc043":"#train_test_split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.20, random_state = 42)","ea7c4e1e":"#logistic regression classification model with sklearn\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(random_state = 42, max_iter = 150)\nlr.fit(x_train, y_train)","b1a92c68":"#accuracy of the model\nlr.score(x_test, y_test)","2d5508d3":"#data scheme for confusion matrix\ny_pred = lr.predict(x_test)\ny_true = y_test","40d5e01c":"#confusion matrix model with sklearn\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true, y_pred)\ncm","ed136c48":"#KNN model with sklearn\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 18) #n_neighbors = K\nknn.fit(x_train, y_train)\n","61a2c9d4":"#accuracy of the model\nknn.score(x_test, y_test)","b0a6d033":"#KNN K-values evaluation results\n\nscore_list = []\nfor i in range(1,25):\n    knn2 = KNeighborsClassifier(n_neighbors=i)\n    knn2.fit(x_train, y_train)\n    score_list.append(knn2.score(x_test, y_test))\nplt.plot(range(1,25), score_list)\nplt.xlabel('k_values')\nplt.ylabel('accuracy')\nplt.show()\n\n#n_neighbors should be 18","de86507b":"#data scheme for confusion matrix\ny_pred = knn.predict(x_test)\ny_true = y_test\n#confusion matrix model with sklearn\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true, y_pred)\ncm","c14f8db5":"#SVM model with sklearn\nfrom sklearn.svm import SVC\nsvm = SVC(random_state = 1)\nsvm.fit(x_train, y_train)","80f72ae4":"#accuracy of the model\nsvm.score(x_test, y_test)","498aca3b":"#data scheme for confusion matrix\ny_pred = svm.predict(x_test)\ny_true = y_test\n#confusion matrix model with sklearn\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true, y_pred)\ncm","77e187a0":"#NAIVE BAYES model with sklearn\nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train, y_train)","e65da535":"#accuracy of the model\nnb.score(x_test, y_test)","58ccd12a":"#data scheme for confusion matrix\ny_pred = nb.predict(x_test)\ny_true = y_test\n#confusion matrix model with sklearn\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true, y_pred)\ncm","30a1435b":"#Decision Tree Classification model with sklearn\nfrom sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(x_train, y_train)","da59c524":"#accuracy of the model\ndt.score(x_test, y_test)","9d604522":"#data scheme for confusion matrix\ny_pred = dt.predict(x_test)\ny_true = y_test\n#confusion matrix model with sklearn\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true, y_pred)\ncm","4d098b67":"#Random Forest Classification model with sklearn\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 100, random_state = 1)\nrf.fit(x_train, y_train)","b0131ef9":"#accuracy of the model\nrf.score(x_test, y_test)","6ba6c3fc":"#data scheme for confusion matrix\ny_pred = rf.predict(x_test)\ny_true = y_test\n#confusion matrix model with sklearn\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true, y_pred)\ncm","3326742a":"L = [lr.score(x_test, y_test),knn.score(x_test, y_test),svm.score(x_test, y_test),nb.score(x_test, y_test),dt.score(x_test, y_test),rf.score(x_test, y_test)]\nprint('ACCURACY SCORES OF THE MODELS')\nprint('Linear Regression      : ',L[0].round(3))\nprint('KNN                    : ',L[1].round(3))\nprint('Support Vector Machine : ',L[2].round(3))\nprint('Naive Bayes            : ',L[3].round(3))\nprint('Decision Tree          : ',L[4].round(3))\nprint('Random Forest          : ',L[5].round(3))","193ba2a0":"# To sum up, \n# Confusion matrixes show there is no unbalanced situation.\n# Support Vector Machine and Naive Bayes Classification Algorithms give the best results.","b56160b3":"**RANDOM FOREST CLASSIFICATION**","371f4a07":"**DECISION TREE CLASSIFICATION**","d15a3db8":"**SUPPORT VECTOR MACHINE (SVM) CLASSIFICATION**","5f60b2b3":"**NAIVE BAYES CLASSIFICATION**","1a17bd96":"**CONCLUSION**","d91d1b13":"**I'm a new Data Science learner. Please comment me your feedbacks to help me improve myself. Thank you**\n","9cb1a106":"**LOGISTIC REGRESSION CLASSIFICATION**","36ce39da":"**K-NEAREST NEIGHBOUR (KNN) CLASSIFICATION**"}}