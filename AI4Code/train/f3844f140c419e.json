{"cell_type":{"ff0b6263":"code","47fbbd6d":"code","6f339780":"code","1b0a71d7":"code","35ca2976":"code","4efefe76":"code","52633dc5":"code","99f09e92":"code","117dc1da":"code","8c5a52d7":"code","4804eb27":"code","a572ca99":"code","ae9b22b4":"code","f816f1f7":"markdown","a9afdc42":"markdown","cdb5ac19":"markdown","af9cf839":"markdown","d7efd87b":"markdown","da6d7840":"markdown"},"source":{"ff0b6263":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","47fbbd6d":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","6f339780":"df = pd.read_csv('\/kaggle\/input\/various-expenses-and-the-profits-of-50-startups\/50_Startups.csv')\ndf.head()","1b0a71d7":"X = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values","35ca2976":"print(X)","4efefe76":"print(y)","52633dc5":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))","99f09e92":"print(X)","117dc1da":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","8c5a52d7":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","4804eb27":"y_pred = regressor.predict(X_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","a572ca99":"from sklearn.metrics import r2_score\nscore=r2_score(y_test,y_pred)","ae9b22b4":"print(score)","f816f1f7":"**IMPORTING THE LIBRARIES**","a9afdc42":"**SPLITTING DATASET INTO TRAIN AND TEST SET**","cdb5ac19":"**IMPORTING THE DATASET**","af9cf839":"**ENCODING CATEGORICAL DATA**","d7efd87b":"**TRAINING THE MODEL ON DATASET**","da6d7840":"**PREDICTING TEST SET RESULTS**"}}