{"cell_type":{"592a4bb0":"code","96a2c162":"code","918bc223":"code","0df30515":"code","80ecdf94":"code","0771c4bb":"code","4d612dc9":"code","3f797009":"code","181965a3":"code","35bb7178":"code","efc322fd":"code","df39241c":"code","ba981abe":"code","a552b513":"code","735cf028":"code","0925fab4":"code","16e9a66f":"code","bafafb0e":"code","1e353f9c":"code","d7d7f7be":"code","bb8654ff":"code","e3bf7c69":"code","f5644c6c":"code","6f4a0829":"code","bc21b8e5":"code","cf980930":"code","6e6da718":"code","4c14040c":"markdown","7935b2b4":"markdown","3fc55e9f":"markdown","b8436e67":"markdown","8d310f2a":"markdown","5d8be787":"markdown","0edf2196":"markdown","79a04d90":"markdown","120e4970":"markdown","83ed7087":"markdown","33d56c9a":"markdown","51074f40":"markdown","6f238942":"markdown","d6bfd907":"markdown","7d2452b3":"markdown","187c7f8f":"markdown","e06e4cec":"markdown"},"source":{"592a4bb0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n# if not os.path.exists(\"..\/input\/train.csv\"):\n#     os.symlink(\"..\/input\/30-days-of-ml\/train.csv\", \"..\/input\/train.csv\")  \n#     os.symlink(\"..\/input\/30-days-of-ml\/test.csv\", \"..\/input\/test.csv\") ","96a2c162":"!python -V","918bc223":"try:\n    import mymodule\nexcept ImportError as e:\n    pass  # module doesn't exist, deal with it.\n! pip install xlrd\n! pip install autoviz","0df30515":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\nX_full = pd.read_csv('..\/input\/30-days-of-ml\/train.csv', index_col='id')\nX_test_full = pd.read_csv('..\/input\/30-days-of-ml\/test.csv', index_col='id')","80ecdf94":"X_full.info()","0771c4bb":"X_test_full.info()","4d612dc9":"X_full.describe()","3f797009":"X_test_full.describe()","181965a3":"# Remove rows with missing target, separate target from predictors\n#X_full.dropna(axis=0, subset=['SalePrice'], inplace=True) # No missing targets\nX = X_full.copy()\ny = X_full.target\nX_full.drop(['target'], axis=1, inplace=True)\n\n# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)","35bb7178":"# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10 and \n                    X_train_full[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]","efc322fd":"print(categorical_cols)\nprint(numerical_cols)","df39241c":"# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()","ba981abe":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\nf, axes = plt.subplots(nrows=3, ncols=1, figsize=(12, 12))\n\nf.suptitle('Target', fontsize=16)\ng = sns.kdeplot(X['target'], shade=True, label=\"%.2f\"%(X['target'].skew()), ax=axes[0])\ng = g.legend(loc=\"best\")\nstats.probplot(X['target'], plot=axes[1])\nsns.boxplot(x='target', data=X, orient='h', ax=axes[2]);\n\nplt.tight_layout()\nplt.show()","a552b513":"num_rows, num_cols = 4,4\nf, axes = plt.subplots(nrows=num_rows, ncols=num_cols, figsize=(12, 12))\nf.suptitle('Distribution of Features', fontsize=16)\n\nfor index, column in enumerate(X[numerical_cols].columns):\n    i,j = (index \/\/ num_cols, index % num_cols)\n    g = sns.kdeplot(X[column], color=\"m\", shade=True, label=\"%.2f\"%(X[column].skew()), ax=axes[i,j])\n    g = g.legend(loc=\"best\")\n\nf.delaxes(axes[3, 2])\nf.delaxes(axes[3, 3])\nplt.tight_layout()\nplt.show()","735cf028":"corr = X[numerical_cols].corr().abs()\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n\nfig, ax = plt.subplots(figsize=(14, 14))\n\n# plot heatmap\nsns.heatmap(corr, mask=mask, annot=True, fmt=\".2f\", cmap='coolwarm',\n            cbar_kws={\"shrink\": .8}, vmin=0, vmax=1)\n# yticks\nplt.yticks(rotation=0)\nplt.show()","0925fab4":"num_rows, num_cols = 3,4\nf, axes = plt.subplots(nrows=num_rows, ncols=num_cols, figsize=(12, 12))\n#f.suptitle('Distribution of Features', fontsize=16)\n\nfor index, column in enumerate(X[categorical_cols].columns):\n    i,j = (index \/\/ num_cols, index % num_cols)\n    sns.histplot(x=column, data=X, ax=axes[i,j])\n\nf.delaxes(axes[2, 2])\nf.delaxes(axes[2, 3])\nplt.tight_layout()\nplt.show()","16e9a66f":"#!pip install pandas-profiling\nimport pandas_profiling\n#Generating PandasProfiling Report\nreport = pandas_profiling.ProfileReport(X)","bafafb0e":"report","1e353f9c":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()","d7d7f7be":"#Generating AutoViz Report\nfilename = \"\" # empty string (\"\") as filename since no file is being used for the data\nsep = \",\"\ndft = AV.AutoViz(\n    '',\n    sep=\",\",\n    depVar=\"\",\n    dfte=X,\n    header=0,\n    verbose=0,\n    lowess=False,\n    chart_format=\"svg\",\n    max_rows_analyzed=150000,\n    max_cols_analyzed=30,\n     )","bb8654ff":"X_train.head()","e3bf7c69":"X_valid.head()","f5644c6c":"X_test.head()","6f4a0829":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBRegressor\n\n\n# Preprocessing for numerical data\n#numerical_transformer = SimpleImputer(strategy='constant')\nnumerical_transformer = StandardScaler()\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Define model\n#model = RandomForestRegressor(n_estimators=100, random_state=0, verbose=1, n_jobs=-1) #Submission 1\nmodel = XGBRegressor(n_estimators=2000, learning_rate=0.05, n_jobs=-1, verbose=1)\n# #model = MLPRegressor(activation='identity', alpha=0.1, batch_size='auto', beta_1=0.9,\n#        beta_2=0.999, early_stopping=True, epsilon=1e-08,\n#        hidden_layer_sizes=(21, 21, 21), learning_rate='adaptive',\n#        learning_rate_init=0.001, max_iter=2000, momentum=0.9,\n#        nesterovs_momentum=True, power_t=0.5, random_state=42, shuffle=True,\n#        solver='adam', tol=0.0001, validation_fraction=0.1, verbose=False,\n#        warm_start=False)\n\n\n\n# Bundle preprocessing and modeling code in a pipeline\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('model', model)\n                     ])\n\n# Preprocessing of training data, fit model \nclf.fit(X_train, y_train)","bc21b8e5":"# Preprocessing of validation data, get predictions\npreds = clf.predict(X_valid)\n\nprint('MAE:', mean_absolute_error(y_valid, preds))","cf980930":"# Preprocessing of test data, fit model\npreds_test = clf.predict(X_test)","6e6da718":"output = pd.DataFrame({'id': X_test.index,\n                       'target': preds_test})\noutput.to_csv('submission.csv', index=False)","4c14040c":"### Numerical Variables","7935b2b4":"# EDA Libraries","3fc55e9f":"Understanding the dataset","b8436e67":"# Data Visualization","8d310f2a":"### Target","5d8be787":"#  AutoViz","0edf2196":"Test some EDA Libraries:\n- Pandas Profiling: in my opinion, this library maintains the code more organized.\n- AutoViz","79a04d90":"There is not null-values","120e4970":"# Pandas Profiling","83ed7087":"Prepare the dataset","33d56c9a":"Checking Null Values","51074f40":"## EDA","6f238942":"# Create a Preprocessing and ML Pipeline","d6bfd907":"### Categorical Variables","7d2452b3":"## Data and libraries","187c7f8f":"## Test Predictions","e06e4cec":"# 30 Days of ML\n\n---\nMy notebook for the 30 Days of ML - Code needs refactoring\n\n<p>Version 1: First submission with a simple pipeline to define a baseline: 0.73788 - Model: RandomForestRegressor (n_estimators=100, random_state=0, verbose=1, n_jobs=-1) <br>\nVersion 2: Second submission with a simple pipeline: 0.73788 - Model: XGBRegressor(n_estimators=1000, learning_rate=0.05, n_jobs=-1, verbose=1) <br>\nVersion 3: Include EDA \/ MAE_valid = 0.57427 <br>\nVersion 4: Bug Correction <br>\nVersion 5: Include StandardScaler <br>\nVersion 6: Improve EDA <br>"}}