{"cell_type":{"6fc9e8e5":"code","735216fd":"code","c1011060":"code","e148565e":"code","89d07045":"code","720b1421":"code","f82c6d0e":"code","bdb0c9cb":"code","883ba6ed":"code","633437d6":"code","c6df64af":"code","ba6ecc91":"code","6a59593a":"code","946aa1f8":"code","a0d442da":"code","457b0afd":"code","3778a1c7":"code","3683dde9":"markdown","68504340":"markdown","9a0ff864":"markdown","3936497d":"markdown","852186d2":"markdown","0e0bbc39":"markdown","2fc7a7bb":"markdown","a517029f":"markdown","fd99dea7":"markdown","df904676":"markdown","a944937d":"markdown"},"source":{"6fc9e8e5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","735216fd":"df=pd.read_csv('..\/input\/usa-housing\/USA_Housing.csv')","c1011060":"df.head()","e148565e":"df.shape","89d07045":"df.info()","720b1421":"sns.pairplot(df,diag_kind='kde')","f82c6d0e":"sns.distplot(df['Price'])","bdb0c9cb":"sns.heatmap(df.corr(),annot=True,cmap='Greens')","883ba6ed":"X=df[['Avg. Area Income','Avg. Area House Age','Avg. Area Number of Rooms','Avg. Area Number of Bedrooms','Area Population']]\ny=df['Price']","633437d6":"from sklearn.preprocessing import PolynomialFeatures\npolynomial_converter=PolynomialFeatures(degree=2,interaction_only=False)\npolynomial_features=polynomial_converter.fit(X)\npolynomial_features=polynomial_converter.transform(X)\npolynomial_features.shape","c6df64af":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(polynomial_features, y, test_size=0.3, random_state=101)\nX_train.shape","ba6ecc91":"from sklearn.linear_model import LinearRegression\nPolyModel=LinearRegression()\nPolyModel.fit(X_train,y_train)","6a59593a":"y_pred=PolyModel.predict(X_test)\npd.DataFrame({'y_test':y_test,'y_pred':y_pred,'Residuals':(y_test-y_pred)}).head()","946aa1f8":"from sklearn import metrics\nMAE_Poly=metrics.mean_absolute_error(y_test,y_pred)\nMSE_Poly=metrics.mean_squared_error(y_test,y_pred)\nRMSE_Poly=np.sqrt(MSE_Poly)","a0d442da":"pd.DataFrame([MAE_Poly,MSE_Poly,RMSE_Poly],index=['MAE_Poly','MSE_Poly','RMSE_Poly'],columns=['Metrics'])","457b0afd":"Train_RMSE_list=[]\nTest_RMSE_list=[]\nfor d in range(1,10):\n    from sklearn.preprocessing import PolynomialFeatures\n    polynomial_converter=PolynomialFeatures(degree=d,interaction_only=False)\n    polynomial_features=polynomial_converter.fit(X)\n    polynomial_features=polynomial_converter.transform(X)\n    # Split data to Train and Test\n    from sklearn.model_selection import train_test_split\n    X_train, X_test, y_train, y_test = train_test_split(polynomial_features, y, test_size=0.3, random_state=101)\n    # Train the Model\n    from sklearn.linear_model import LinearRegression\n    PolyModel=LinearRegression()\n    PolyModel.fit(X_train,y_train)\n    # Predict\n    y_train_pred=PolyModel.predict(X_train)\n    y_test_pred=PolyModel.predict(X_test)\n    # Evaluate the Model just by RMSE \n    from sklearn import metrics\n    # RMSE of Train\n    Train_RMSE=np.sqrt(metrics.mean_squared_error(y_train,y_train_pred))\n    # RMSE of Test\n    Test_RMSE=np.sqrt(metrics.mean_squared_error(y_test,y_test_pred))\n    # Make a list for RMSE\n    Train_RMSE_list.append(Train_RMSE)\n    Test_RMSE_list.append(Test_RMSE)  ","3778a1c7":"plt.plot(range(1,10),Train_RMSE_list,label='Train_RMSE')\nplt.plot(range(1,10),Test_RMSE_list,label='Test_RMSE')\nplt.xlabel('Polynomial Degree',fontsize=15)\nplt.ylabel('RME',fontsize=15)\nplt.legend()","3683dde9":"## Split Data to Train & Test","68504340":"## Train the Model","9a0ff864":"## Evaluate the Model","3936497d":"## Import important Libraries","852186d2":"## Preprocessing","0e0bbc39":"## Import Data Set","2fc7a7bb":"## Adjusting Model Parameters","a517029f":"## Predict Test Data","fd99dea7":"## Exploratory Data Analysis","df904676":"## Determine The Features and Label","a944937d":"## In conclusion , Linear Regression works better than Polynomial Regression in this data set"}}