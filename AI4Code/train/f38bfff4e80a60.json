{"cell_type":{"d5a885bd":"code","4ee46957":"code","d58d2b20":"code","2b6d733a":"code","4851d4ed":"code","1a366197":"code","973dedac":"code","cbaeae0b":"code","6490d3df":"code","58edcee5":"code","6dc320b1":"code","971a5511":"code","48c89957":"code","c703059b":"code","5b5c4a6a":"code","f6353d74":"code","0e129f2a":"code","8bdee300":"code","e4a6dcba":"code","f5d206f1":"code","02882517":"code","5564cffd":"code","26167976":"markdown","cd34735c":"markdown","4b28fffb":"markdown","5e3e4e61":"markdown","ce8f08f0":"markdown","af80f814":"markdown","308b08de":"markdown","321c2a0c":"markdown","edd4a5e4":"markdown","38bc10c5":"markdown","99de4878":"markdown","5cbad5c4":"markdown","537b91f1":"markdown","5db4041d":"markdown","ece92732":"markdown","d3823586":"markdown","142cdfa3":"markdown","af7c6774":"markdown"},"source":{"d5a885bd":"import pandas as pd\nimport numpy as np","4ee46957":"ls ..\/input","d58d2b20":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsample_submission = pd.read_csv('..\/input\/gender_submission.csv')","2b6d733a":"# train\u306bTitle\u5217\u3092\u4f5c\u6210\u3001Title\u5217\u306e\u5024\u306f\u656c\u79f0\ntrain['Title'] = train.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n# train\u306eTitle\u5217\u306e\u5024\u3054\u3068\u306b\u5e73\u5747\u5024\u3092\u7b97\u51fa\ntrain.groupby('Title').mean()['Age']","4851d4ed":"# \u5909\u63db\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3092\u4f5c\u6210\ndef title_to_num(title):\n    if title == 'Master':\n        return 1\n    elif title == 'Miss':\n        return 2\n    elif title == 'Mr':\n        return 3\n    elif title == 'Mrs':\n        return 4\n    else:\n        return 5\n\n# test\u306b\u3082title\u5217\u3092\u4f5c\u6210\ntest['Title'] = test.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\n# \u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3092\u7528\u3044\u3066\u5909\u63db\ntrain['Title_num'] = [title_to_num(i) for i in train['Title']]\ntest['Title_num'] = [title_to_num(i) for i in test['Title']]","1a366197":"# Sex\u3068Embarked\u306eOne-Hot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\ntrain = pd.get_dummies(train, columns=['Sex', 'Embarked'])\ntest = pd.get_dummies(test, columns=['Sex', 'Embarked'])","973dedac":"# \u4e0d\u8981\u306a\u5217\u306e\u524a\u9664\ntrain.drop(['PassengerId',  'Ticket','Title'], axis=1, inplace=True)\ntest.drop(['PassengerId','Ticket','Title'], axis=1, inplace=True)","cbaeae0b":"# train\u306e\u8868\u793a\ndisplay(train.head())","6490d3df":"# train\u3068test\u3092\u4e00\u7dd2\u306b\u6271\u3046\u305f\u3081\u306e\u5909\u6570data\u3092\u4f5c\u6210\u3059\u308b\u3002\ndata = pd.concat([train, test], sort=True)\ndata['Family_Size'] = data['Parch'] + data['SibSp'] + 1\n\ntrain['Family_Size'] = data['Family_Size'][:len(train)]\ntest['Family_Size'] = data['Family_Size'][len(train):]","58edcee5":"data['IsAlone'] = 0\ndata.loc[data['Family_Size'] == 1, 'IsAlone'] = 1\n\ntrain['IsAlone'] = data['IsAlone'][:len(train)]\ntest['IsAlone'] = data['IsAlone'][len(train):]","6dc320b1":"# \u4e57\u5ba2\u306e\u540d\u524d\u306e\u9577\u3055\ntrain['Name_length'] = train['Name'].apply(len)\ntest['Name_length'] = test['Name'].apply(len)\n\n# \u5ba2\u5ba4\u756a\u53f7\u30c7\u30fc\u30bf\u304c\u3042\u308b\u306a\u3089\uff11\u3092\u3001\u6b20\u640d\u5024\u306a\u30890\u3092\ntrain['Has_Cabin'] = train[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\ntest['Has_Cabin'] = test[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\n\ntrain.drop(['Name','Cabin'], axis=1, inplace=True)\ntest.drop(['Name','Cabin'], axis=1, inplace=True)","971a5511":"# \u6a19\u6e96\u504f\u5dee\u3092\u8003\u616e\u3057\u305f\u4e71\u6570\u3067\u7a74\u57cb\u3081\u3059\u308b\u3002\nage_avg = data['Age'].mean()\nage_std = data['Age'].std()\n\n# seed\u3067\u4e71\u6570\u3092\u56fa\u5b9a\u3059\u308b\u3002\nnp.random.seed(seed=777)\ndata['Age'].fillna(np.random.randint(age_avg - age_std, age_avg + age_std), inplace = True)\n\n# data\u3092\u7d50\u5408\u5143\u306etrain,test\u306b\u623b\u3059\ntrain['Age'] = data['Age'][:len(train)]\ntest['Age'] = data['Age'][len(train):]","48c89957":"import matplotlib.pyplot as plt\nimport seaborn as sns\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14,12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(train.astype(float).corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True)","c703059b":"X_train = train.drop(['Survived'], axis=1)  # X_train\u306ftrain\u306eSurvived\u5217\u4ee5\u5916\nY_train = train['Survived']  # Y_train\u306ftrain\u306eSurvived\u5217","5b5c4a6a":"import lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# X_train\u3068Y_train\u3092train\u3068valid\u306b\u5206\u5272\ntrain_x, valid_x, train_y, valid_y = train_test_split(X_train, Y_train, test_size=0.23, random_state=0)\n\n# LightGBM\u306e\u5206\u985e\u5668\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\ngbm = lgb.LGBMClassifier(objective='binary')\n\n# train\u3068valid\u3092\u6307\u5b9a\u3057\u5b66\u7fd2\ngbm.fit(train_x, train_y, eval_set = [(valid_x, valid_y)],\n            early_stopping_rounds=20,  # 20\u56de\u9023\u7d9a\u3067loss\u304c\u4e0b\u304c\u3089\u306a\u304b\u3063\u305f\u3089\u7d42\u4e86\n            verbose=10  # 10round\u6bce\u306b\u3001loss\u3092\u8868\u793a\n) ;\n\n# valid_x\u306b\u3064\u3044\u3066\u63a8\u8ad6 \u4e0a\u8a18\u306e\u30e2\u30c7\u30eb\u304cvalid\u30bb\u30c3\u30c8\u306b\u5bfe\u3057\u3066\u3069\u308c\u304f\u3089\u3044\u306e\u4e88\u6e2c\u6027\u80fd\u304c\u3042\u308b\u306e\u304b\u78ba\u8a8d\u3059\u308b\u3002\noof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\nprint('score', round(accuracy_score(valid_y, oof)*100, 2))","f6353d74":"from sklearn.model_selection import KFold\n\n# 3\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3092\u6307\u5b9a\u3057\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\nkf = KFold(n_splits=10)\n\n# \u30b9\u30b3\u30a2\u3068\u30e2\u30c7\u30eb\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nscore_list = []\nmodels = []","0e129f2a":"# \u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092gbm.get?params\u3068kernel\u3067\u5b9f\u884c\u3059\u308b\u3068\u3069\u306e\u3088\u3046\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\n# \u4f7f\u308f\u308c\u305f\u306e\u304b\u78ba\u8a8d\u3059\u308b\u3002\ngbm.get_params()","8bdee300":"# GridSearchCV\u3092import \nfrom sklearn.model_selection import GridSearchCV\n\ngbm = lgb.LGBMClassifier(object='binary')\n\n# \u8a66\u884c\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7f85\u5217\u3059\u308b \nparams = {\n    'max_depth':[2,3,4,5],\n    'reg_alpha':[0,1,10,100],\n    'reg_lambda':[0,1,10,100]\n}\n\ngrid_search = GridSearchCV(\n    gbm, # \u5206\u985e\u5668\u3092\u6e21\u3059\n    param_grid=params, # \u8a66\u884c\u3057\u3066\u307b\u3057\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3059\n    cv=10  # 3\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3067\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\n)\n\ngrid_search.fit(X_train, Y_train) # \u30c7\u30fc\u30bf\u3092\u6e21\u3059\n\nprint(grid_search.best_score_) # \u30d9\u30b9\u30c8\u30b9\u30b3\u30a2\u3092\u8868\u793a\nprint(grid_search.best_params_) # \u30d9\u30b9\u30c8\u30b9\u30b3\u30a2\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8868\u793a","e4a6dcba":"# \u30b9\u30b3\u30a2\u3068\u30e2\u30c7\u30eb\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nscore_list = []\ntest_pred = np.zeros((len(test), 10))\nfor fold_, (train_index, valid_index) in enumerate(kf.split(X_train, Y_train)):\n train_x = X_train.iloc[train_index]\n valid_x = X_train.iloc[valid_index]\n train_y = Y_train[train_index]\n valid_y = Y_train[valid_index]\n\n print(f'fold{fold_ + 1} start')\n gbm = lgb.LGBMClassifier(objective='binary', max_depth=5, reg_alpha=1,\n reg_lambda=0) # \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\n gbm.fit(train_x, train_y,\n eval_set = [(valid_x, valid_y)],\n early_stopping_rounds=20,\n verbose= -1)\n\n oof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\n score_list.append(round(accuracy_score(valid_y, oof)*100,2))\n test_pred[:, fold_] = gbm.predict(test, num_iteration=gbm.best_iteration_)\n print(f'fold{fold_ + 1} end\\n' )\n\nprint(score_list, '\u5e73\u5747score', np.mean(score_list))\npred = (np.mean(test_pred, axis=1) > 0.5).astype(int)\nsample_submission['Survived'] = pred\nsample_submission.to_csv('glid_search.csv', index=False)","f5d206f1":"gbm.feature_importances_","02882517":"pd.DataFrame({'\u7279\u5fb4': X_train.columns,\n 'importance':gbm.feature_importances_}).sort_values('importance',\n ascending=False)","5564cffd":"train.info()","26167976":"\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3092\u884c\u3044\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u3002","cd34735c":"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u30b5\u30d6\u30df\u30c3\u30c8","4b28fffb":"\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8abf\u6574\u3092\u884c\u3046\u3002","5e3e4e61":"\u3010\u30b9\u30c6\u30c3\u30d75\u3011LightGBM\u3092\u7528\u3044\u3066\u751f\u5b58\u4e88\u6e2c\u3092\u884c\u3046\u3002","ce8f08f0":"# \u5909\u63db\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3092\u4f5c\u6210\ndef age_to_num(age):\n    if age < 15:\n        return 0\n    elif age > 15 and age < 60:\n        return 1\n    else:\n        return 2\n\n# \u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3092\u7528\u3044\u3066\u5909\u63db\ntrain['Age_num'] = [title_to_num(i) for i in train['Age']]\ntest['Age_num'] = [title_to_num(i) for i in test['Age']]\n\n# \u5909\u63db\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3092\u4f5c\u6210\ndef age_to_num(age):\n    if age < 15:\n        return 0\n    elif age > 15 and age < 60:\n        return 1\n    else:\n        return 2\n\n# \u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3092\u7528\u3044\u3066\u5909\u63db\ntrain['Age_num'] = [title_to_num(i) for i in train['Age']]\ntest['Age_num'] = [title_to_num(i) for i in test['Age']]\n\n# \u7537\u6027\u304b\u3064IsAlone\u304b\u306410\u4ee3\u5f8c\u534a~30\u4ee3\u524d\u534a\u306e\u7279\u5fb4\u91cf\u3092\u751f\u6210\u3059\u308b\u3002\ndata['young'] = 0\n\nfor i in data['Age']:\n    if i > 15 and i < 35:\n        for n in data['Family_Size']:\n            if i == 1:\n                for m in data['Sex_male']:\n                    if m == 1:\n                        data['young'] = 1\n                    else:\n                        data['young'] = 0\n\ntrain['young'] = data['young'][:len(train)]\ntest['young'] = data['young'][len(train):]","af80f814":"Pandas\u306eget_dummies\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u308a\u3001Sex_famale\u3001Sex_male\u3001\nEmbarked_C\u3001Embarked_Q\u3001Embarked_S\u3068\u3044\u3046\u5217\u304c\u52a0\u308f\u308a\u3001\u8a72\u5f53\u3059\u308b\u5834\u5408\u306b\n\uff11\u3068\u306a\u308a\u3001\u975e\u8a72\u5f53\u306e\u5834\u5408\u306b\u306f\uff10\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\n![](http:\/\/)\u3053\u306e\u69d8\u306a\u3001\u5909\u63db\u624b\u6cd5\u3092One-Hot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3068\u3044\u3046\u3002","308b08de":"* \u6587\u5b57\u30c7\u30fc\u30bf\u3092\u6570\u5024\u306b\u7f6e\u304d\u63db\u3048\u308b\n* \u4e0d\u8981\u306a\u8981\u7d20\u306e\u524a\u9664","321c2a0c":"train.drop(['PassengerId', 'Name', 'Ticket','Title'], axis=1, inplace=True)\ntest.drop(['PassengerId', 'Name','Ticket','Title'], axis=1, inplace=True)","edd4a5e4":"Family_Size=1\u306e\u5834\u5408\u3001\u751f\u5b58\u7387\u304c\u4f4e\u3044\u3053\u3068\u304c\u5206\u304b\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u4e00\u4eba\u3067\u4e57\u8239\u3057\u305f\u4eba\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570IsAlone\u3092\u4f5c\u6210\u3059\u308b\u3002","38bc10c5":"\u3010\u30b9\u30c6\u30c3\u30d74\u3011\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3092\u884c\u3046\n1. \u4eee\u8aac\u3092\u5143\u306b\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b\u3002\n* \u5404\u656c\u79f0\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u5e74\u9f62\u5c64\u3092\u8abf\u3079\u308b\u305f\u3081\u3001\u5e74\u9f62\u306e\u5e73\u5747\u5024\u3092\u7b97\u51fa\u3059\u308b\u3002\n* \u656c\u79f0\u3092\u5143\u306bTitle\u3092\u4f5c\u6210\u3059\u308b\u3002","99de4878":"\u5bb6\u65cf\u306e\u4eba\u6570\u304b\u3089\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b\u3002","5cbad5c4":"3\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3067\u306e\u5b66\u7fd2\u30fb\u63a8\u8ad6\u3092\u884c\u3046\u3002","537b91f1":"\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u3092\u884c\u3046\u3002\n\nX_train\u3068Y_train\u3092scikit-learn\u306etrain_test_split\u3092\u7528\u3044\u3066\u300167% : 33%\u306e\u5272\u5408\u3067\ntrain\u30bb\u30c3\u30c8\u3068valid\u30bb\u30c3\u30c8\u306b\u5206\u5272\u3057\u3066\u5b66\u7fd2\u3057\u6027\u80fd\u306e\u8a55\u4fa1\u3092\u884c\u3046\u3002","5db4041d":"for fold_,(train_index, valid_index) in enumerate(kf.split(X_train, Y_train)):\n    train_x = X_train.iloc[train_index]\n    valid_x = X_train.iloc[valid_index]\n    train_y = Y_train[train_index]\n    valid_y = Y_train[valid_index]\n    \n    print(f'fold{fold_ + 1} start')\n    \n    gbm = lgb.LGBMClassifier(objective='binary')\n    gbm.fit(train_x, train_y, eval_set = [(valid_x, valid_y)],early_stopping_rounds=20, verbose= -1) # \u5b66\u7fd2\u306e\u72b6\u6cc1\u3092\u8868\u793a\u3057\u306a\u3044\n    \n    oof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_) \n    score_list.append(round(accuracy_score(valid_y, oof)*100,2))\n    models.append(gbm) # \u5b66\u7fd2\u304c\u7d42\u308f\u3063\u305f\u30e2\u30c7\u30eb\u3092\u30ea\u30b9\u30c8\u306b\u5165\u308c\u3066\u304a\u304f\n    print(f'fold{fold_ + 1} end\\n' ) \n    \nprint(score_list, '\u5e73\u5747score', np.mean(score_list))\n\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u3092\u683c\u7d0d\u3059\u308b\u3001418\u884c3\u5217\u306enumpy\u884c\u5217\u3092\u4f5c\u6210 \ntest_pred = np.zeros((len(test), 3))\nfor fold_, gbm in enumerate(models):\n pred_ = gbm.predict(test, num_iteration=gbm.best_iteration_) # test\u3092\u4e88\u6e2c\n test_pred[:, fold_] = pred_\npred = (np.mean(test_pred, axis=1) > 0.5).astype(int)\nsample_submission['Survived'] = pred\n\n\u4e0a\u8a18\u30d5\u30a1\u30a4\u30eb\u3092\u30b5\u30d6\u30df\u30c3\u30c8\u3059\u308b\u30680.76076\u3067\u3042\u308b\u3002\n\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\uff13\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3092\u884c\u306a\u3063\u305f\uff13\u3064\u306e\u30e2\u30c7\u30eb\u3067\uff11\u56de\u305a\u3064test\u30c7\u30fc\u30bf\n\u306e\u4e88\u6e2c\u30920\u30681\u3067\u884c\u306a\u3063\u3066\u3044\u307e\u3059 \u3002 1\n\u3053\u306e\uff13\u56de\u306e\u4e88\u6e2c\u306e\u5e73\u5747\u3092\u3068\u3063\u3066\u30010.5\u4ee5\u4e0a\u306e\u5834\u5408\uff082\u56de\u4ee5\u4e0a\uff11\u3068\u4e88\u6e2c\u3055\u308c\u305f\u5834\u5408\uff09\u306b\uff11\u3068\u51fa\u529b\u3057\u3066\u3044\u308b\u3002","ece92732":"cabin\u306e\u7279\u5fb4\u91cf\u3092\u751f\u6210","d3823586":"2. \u6b20\u640d\u5024\u3092\u57cb\u3081\u308b","142cdfa3":"test_pred = np.zeros((len(test), 10))\nfor fold_, gbm in enumerate(models):\n pred_ = gbm.predict(test, num_iteration=gbm.best_iteration_) # test\u3092\u4e88\u6e2c\n test_pred[:, fold_] = pred_\npred = (np.mean(test_pred, axis=1) > 0.5).astype(int)\nsample_submission['Survived'] = pred","af7c6774":"from random import random\n\ndef cabin_select():\n    if 0.335 > random():\n        return 'C'\n    elif 0.267 > random():\n        return 'B'\n    elif 0.153 > random():\n        return 'D'\n    elif 0.142 > random():\n        return 'E'\n    else:\n        return 'A'\n\ndef cabin_select_low():\n    if 0.464 > random():\n        return 'F'\n    elif 0.25 > random():\n        return 'E'\n    elif 14.3 > random():\n        return 'D'\n    else:\n        return 'G'\n\n#\u90e8\u5c4b\u756a\u53f7\u3092\u6574\u5f62\u3057\u3001\u30e9\u30f3\u30c0\u30e0\u306b\u88dc\u5b8c\ncabin = data['Cabin'].replace('[0-9]+', '', regex=True).replace(r'\\s+', r'', regex=True).replace(r'([\\w])[\\w]+', r'\\1', regex=True)\ndata['Cabin_replaced'] = cabin\ndata.loc[(data['Pclass'] == 1) & (data['Cabin_replaced'].isnull()), 'Cabin_replaced'] = cabin_select()\ndata.loc[((data['Pclass'] == 2) | (data['Pclass'] == 3)) & (data['Cabin_replaced'].isnull()), 'Cabin_replaced'] = cabin_select_low()\n\n#\u90e8\u5c4b\u756a\u53f7\u3092\u6570\u5024\u306b\u5909\u63db\ndata.loc[(data['Cabin_replaced'] == 'A'), 'Cabin_replaced'] = 0\ndata.loc[(data['Cabin_replaced'] == 'B'), 'Cabin_replaced'] = 1\ndata.loc[(data['Cabin_replaced'] == 'C'), 'Cabin_replaced'] = 2\ndata.loc[(data['Cabin_replaced'] == 'D'), 'Cabin_replaced'] = 3\ndata.loc[(data['Cabin_replaced'] == 'E'), 'Cabin_replaced'] = 4\ndata.loc[(data['Cabin_replaced'] == 'F'), 'Cabin_replaced'] = 5\ndata.loc[(data['Cabin_replaced'] == 'G'), 'Cabin_replaced'] = 6\ndata.loc[(data['Cabin_replaced'] == 'T'), 'Cabin_replaced'] = 7\n\ntrain['Cabin_replaced'] = data['Cabin_replaced'][:len(train)]\ntest['Cabin_replaced'] = data['Cabin_replaced'][len(train):]\ntrain.drop(['Cabin'], axis=1, inplace=True)\ntest.drop(['Cabin'], axis=1, inplace=True)\ndisplay(data.info())"}}