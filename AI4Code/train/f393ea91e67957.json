{"cell_type":{"dc7b07cb":"code","95483ae8":"code","bc59df6b":"code","61e4d00f":"code","36d0c175":"code","b8a4ad10":"code","bcba7b5c":"code","7887b9fe":"markdown"},"source":{"dc7b07cb":"import torch\nimport torch.nn.functional as F\nimport pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing,utils\nimport math\nimport random\n\ndevice='cuda' if torch.cuda.is_available() else 'cpu'\n\nif device=='cuda':\n  torch.cuda.manual_seed_all(111)\n\n\ntrain=pd.read_csv('..\/input\/fired-area-prediction\/forestfires_train.csv')\ntrain=utils.shuffle(train)\ntrain","95483ae8":"#Since 'FFMC' values are left skewed\nfor i in range(len(train)):\n  train['FFMC'][i] = (train['FFMC'][i])**3\n\ntrain['FFMC']","bc59df6b":"#strings -> numerical value\nencoder = preprocessing.LabelEncoder()\nencoder.fit(train['month'])\ntrain['month'] = encoder.transform(train['month'])\n\nxtrain=train.loc[:, [i for i in train.keys()[0:-1]]]\nytrain=train[train.keys()[-1]]\n\n#add interactive data\nxtrain['FFMC.DMC'] = xtrain['FFMC']*xtrain['DMC']\nxtrain['FFMC.DC'] = xtrain['FFMC']*xtrain['DC']\nxtrain['DMC.DC'] = xtrain['DMC']*xtrain['DC']\nxtrain['temp.RH'] = xtrain['RH']*xtrain['temp']\n\nxtrain.drop(['X','Y','day', 'FFMC','temp','RH', 'wind', 'rain'], axis=1, inplace=True)\n\nxtrain","61e4d00f":"xtrain=np.array(xtrain)\nytrain=np.array(ytrain).reshape(-1,1)\n\nprint(xtrain.shape)\nprint(ytrain.shape)\n\nscaler = preprocessing.MinMaxScaler()\nxtrain = scaler.fit_transform(xtrain)\n\nxtrain=torch.FloatTensor(xtrain).to(device)\nytrain=torch.FloatTensor(ytrain).to(device)\n\nfor i in range(len(ytrain)):\n  ytrain[i] = math.log(ytrain[i]+1)\n\nxtrain","36d0c175":"torch.manual_seed(111)\nrandom.seed(111)\n\nlin1 = torch.nn.Linear(8,6)\nlin2 = torch.nn.Linear(6,3)\nlin3 = torch.nn.Linear(3,1)\n\ntorch.nn.init.kaiming_uniform_(lin1.weight)\ntorch.nn.init.kaiming_uniform_(lin2.weight)\ntorch.nn.init.kaiming_uniform_(lin3.weight)\n\nrelu = torch.nn.ReLU()\ndropout = torch.nn.Dropout(p=0.25)\nmodel = torch.nn.Sequential(lin1,relu,dropout,\n                            lin2,relu,dropout,\n                            lin3).to(device)\n\nepochs = 15000\nlr = 1e-4\n\noptimizer=torch.optim.Adam(model.parameters(), lr=lr)\n\nfor epoch in range(epochs+1):\n  H = model(xtrain)\n  cost = F.mse_loss(H, ytrain).to(device)\n\n  optimizer.zero_grad()\n  cost.backward()\n  optimizer.step()\n\n  if epoch % 1000 == 0:\n    print('Epoch: %05d'%epoch,' Cost {:.5f}'.format(cost.item()))","b8a4ad10":"torch.nn.init.xavier_uniform_(lin3.weight)\ntest=pd.read_csv('..\/input\/fired-area-prediction\/forestfires_test.csv')\n\n#unseen label(labelencoder)\nfor i in range(len(test)):\n  for label in np.unique(test['month'][i]):\n    if label not in encoder.classes_:\n      encoder.classes_ = np.append(encoder.classes_, label)\n    \ntest['month'] = encoder.transform(test['month'])\n\nfor i in range(len(test)):\n  test['FFMC'][i] = test['FFMC'][i]**3\n\nxtest = test.loc[:, [i for i in test.keys()[0:]]]\n\n#add interactive data\nxtest['FFMC.DMC'] = xtest['FFMC']*xtest['DMC']\nxtest['FFMC.DC'] = xtest['FFMC']*xtest['DC']\nxtest['DMC.DC'] = xtest['DMC']*xtest['DC']\nxtest['temp.RH'] = xtest['RH']*xtest['temp']\n\nxtest.drop(['X','Y','day','FFMC','temp','RH', 'wind', 'rain'], axis=1, inplace=True)\n\nxtest","bcba7b5c":"xtest=np.array(xtest)\n\nxtest = scaler.transform(xtest) \n\nxtest=torch.FloatTensor(xtest).to(device)\n\nH=model(xtest)\n\nfor i in range(len(H)):\n  H[i]=torch.exp(H[i])-1\n\nresult = pd.read_csv('..\/input\/fired-area-prediction\/forestfires_submission.csv')\nfor i in range(len(result)):\n  result['prediction'][i] = H[i].item()\n\nresult.to_csv('defense.csv', header=True, index=False)\n\nresult","7887b9fe":"2020.06.19 \ub514\ud39c\uc2a4\n\n# \uc218\uc815\ud55c \ubd80\ubd84\n\n* \ub370\uc774\ud130 \uc804\ucc98\ub9ac\n\n    1) \uc65c\uace1\ub41c \uc815\ubcf4(FFMC)\ub97c \uc815\uaddc\ud654\n    \n    2) \uc11c\ub85c \uc5f0\uad00\uc131\uc774 \ub192\uc740 \uc815\ubcf4\ub4e4\uc744 \uc11e\uc5b4 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uace0 \ubaa8\ub378 \ud559\uc2b5\uc5d0 \uc774\uc6a9\n    \n    3) \uc608\uce21\uac12\uacfc \uc5f0\uad00\uc131\uc774 \uc801\uc740 \ub370\uc774\ud130 \uc0ad\uc81c\n    \n    4) \uc804\uc5d0\ub294 \uc774\uc6a9\ud558\uc9c0 \uc54a\uc558\ub358 \ubb38\uc790\uc5f4\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uc815\ubcf4(month)\ub97c \uc218\uce58\uc801 \uc815\ubcf4\ub85c \ubc14\uafb8\uc5b4 \uc774\uc6a9\n    \n    \n* \ucd08\uae30\ud654 \ud568\uc218 (xavier -> kaiming)\n* Dropout \ud655\ub960 (0.3 -> 0.25)\n* \ud788\ub4e0 \ub808\uc774\uc5b4\uc758 \uc218\ub97c \ub298\ub824 \ubaa8\ub378\uc758 \ubcf5\uc7a1\ub3c4\ub97c \ub192\uc784\n\n\nhttps:\/\/rstudio-pubs-static.s3.amazonaws.com\/419751_b251adb1ab8e40f7aeab8b5c4a739c4f.html\n\uc704 \ub17c\ubb38\uc744 \ucc38\uace0\ud588\uc2b5\ub2c8\ub2e4.\n\n\n\n\ubc1c\ud45c \ub9c1\ud06c\nhttps:\/\/youtu.be\/2GF1xq0ErlY"}}