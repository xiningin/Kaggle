{"cell_type":{"823f94ce":"code","22dc8a57":"code","b242b8bf":"code","9e68ebe7":"code","cd0c915b":"code","8255c2d3":"code","e044345a":"code","9f700b19":"code","2f8684bf":"code","5c3452e3":"code","cd0ebbf4":"code","a67e500c":"markdown"},"source":{"823f94ce":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport requests\nimport os\nimport tensorflow.keras.backend as K\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nimport tensorflow_addons as tfa\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import log_loss\nfrom tqdm.notebook import tqdm","22dc8a57":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\n\nss = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')\n\n# Check if we are using public test data or not. This saves time during the commit. \n\nrow = test_features.shape[0] > 3982\n\nif not row:\n    !cp ..\/input\/lish-moa\/sample_submission.csv .","b242b8bf":"def preprocess(df):\n    df.loc[:, 'cp_type'] = df.loc[:, 'cp_type'].map({'trt_cp': 0, 'ctl_vehicle': 1})\n    df.loc[:, 'cp_dose'] = df.loc[:, 'cp_dose'].map({'D1': 0, 'D2': 1})\n    del df['sig_id']\n    return df\n\ntrain = preprocess(train_features)\ntest = preprocess(test_features)\n\ndel train_targets['sig_id']","9e68ebe7":"def create_model(num_columns):\n    model = tf.keras.Sequential([\n    tf.keras.layers.Input(num_columns),\n    tf.keras.layers.BatchNormalization(),\n    tfa.layers.WeightNormalization(tf.keras.layers.Dense(3072, activation=\"relu\")),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.5),\n    tfa.layers.WeightNormalization(tf.keras.layers.Dense(3072, activation=\"relu\")),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.5),\n    tfa.layers.WeightNormalization(tf.keras.layers.Dense(206, activation=\"sigmoid\"))\n    ])\n    model.compile(optimizer=tfa.optimizers.Lookahead(tf.optimizers.Adam(lr=5e-4), sync_period=10),\n                  loss='binary_crossentropy'\n                  )\n    return model\n\ndef create_pseudo_model(num_columns):\n    model = tf.keras.Sequential([\n    tf.keras.layers.Input(num_columns),\n    tf.keras.layers.BatchNormalization(),\n    tfa.layers.WeightNormalization(tf.keras.layers.Dense(4096, activation=\"relu\")),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.5),\n    tfa.layers.WeightNormalization(tf.keras.layers.Dense(4096, activation=\"relu\")),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.5),\n    tfa.layers.WeightNormalization(tf.keras.layers.Dense(206, activation=\"sigmoid\"))\n    ])\n    model.compile(optimizer=tfa.optimizers.Lookahead(tf.optimizers.Adam(lr=5e-4), sync_period=10),\n                  loss='binary_crossentropy'\n                  )\n    return model","cd0c915b":"top_feats = [  0,   1,   2,   3,   5,   6,   8,   9,  10,  11,  12,  14,  15,\n        16,  18,  19,  20,  21,  23,  24,  25,  27,  28,  29,  30,  31,\n        32,  33,  34,  35,  36,  37,  39,  40,  41,  42,  44,  45,  46,\n        48,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,\n        63,  64,  65,  66,  68,  69,  70,  71,  72,  73,  74,  75,  76,\n        78,  79,  80,  81,  82,  83,  84,  86,  87,  88,  89,  90,  92,\n        93,  94,  95,  96,  97,  99, 100, 101, 103, 104, 105, 106, 107,\n       108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,\n       121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134,\n       135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,\n       149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 163, 164,\n       165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 180,\n       181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195,\n       197, 198, 199, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213,\n       214, 215, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230,\n       231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245,\n       246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260,\n       261, 263, 265, 266, 268, 270, 271, 272, 273, 275, 276, 277, 279,\n       282, 283, 286, 287, 288, 289, 290, 294, 295, 296, 297, 299, 300,\n       301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315,\n       316, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331,\n       332, 333, 334, 335, 338, 339, 340, 341, 343, 344, 345, 346, 347,\n       349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362,\n       363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377,\n       378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391,\n       392, 393, 394, 395, 397, 398, 399, 400, 401, 403, 405, 406, 407,\n       408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422,\n       423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435,\n       436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450,\n       452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465,\n       466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482,\n       483, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 500, 501,\n       502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 514, 516, 517,\n       518, 519, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533,\n       534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547,\n       549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563,\n       564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 580,\n       581, 582, 583, 586, 587, 590, 591, 592, 593, 595, 596, 597, 598,\n       599, 600, 601, 602, 603, 605, 607, 608, 609, 611, 612, 613, 614,\n       615, 616, 617, 619, 622, 623, 625, 627, 630, 631, 632, 633, 634,\n       635, 637, 638, 639, 642, 643, 644, 645, 646, 647, 649, 650, 651,\n       652, 654, 655, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668,\n       669, 670, 672, 674, 675, 676, 677, 678, 680, 681, 682, 684, 685,\n       686, 687, 688, 689, 691, 692, 694, 695, 696, 697, 699, 700, 701,\n       702, 703, 704, 705, 707, 708, 709, 711, 712, 713, 714, 715, 716,\n       717, 723, 725, 727, 728, 729, 730, 731, 732, 734, 736, 737, 738,\n       739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751,\n       752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765,\n       766, 767, 769, 770, 771, 772, 774, 775, 780, 781, 782, 783, 784,\n       785, 787, 788, 790, 793, 795, 797, 799, 800, 801, 805, 808, 809,\n       811, 812, 813, 816, 819, 820, 821, 822, 823, 825, 826, 827, 829,\n       831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845,\n       846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 860, 861, 862,\n       864, 867, 868, 870, 871, 873, 874]\nprint(len(top_feats))","8255c2d3":"if row:\n    N_STARTS = 3\n\n    res = train_targets.copy()\n    ss.loc[:, train_targets.columns] = 0\n    res.loc[:, train_targets.columns] = 0\n\n    a = 0\n\n    for seed in range(N_STARTS):\n        for n, (tr, te) in enumerate(KFold(n_splits=5, random_state=seed, shuffle=True).split(train_targets)):\n            print(f'Fold {a+1}')\n            a+=1\n            reduce_lr_loss = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=3, verbose=1, epsilon=1e-4, mode='min')\n            model = create_model(len(top_feats))\n\n            model.fit(train.values[tr][:, top_feats],\n                      train_targets.astype(float).values[tr],\n                      validation_data=(train.values[te][:, top_feats], train_targets.astype(float).values[te]),\n                      epochs=30, batch_size=128, \n                      callbacks=[reduce_lr_loss], verbose=0 #CHANGE TO 0\n                      )\n            ss.loc[:, train_targets.columns] += model.predict(test_features.values[:, top_feats])\n            res.loc[te, train_targets.columns] += model.predict(train.values[te][:, top_feats])\n            print('')\n\n    ss.loc[:, train_targets.columns] \/= ((n+1) * N_STARTS)\n    res.loc[:, train_targets.columns] \/= N_STARTS","e044345a":"metrics = []\nif row:\n    for _target in train_targets.columns:\n        metrics.append(log_loss(train_targets.loc[:, _target], res.loc[:, _target]))\n    print(f'OOF Metric: {np.mean(metrics)}')","9f700b19":"if row:\n    metrics = []\n    res.loc[train['cp_type']==1, train_targets.columns] = 0\n    for _target in train_targets.columns:\n        metrics.append(log_loss(train_targets.loc[:, _target], res.loc[:, _target]))\n    print(f'OOF Metric with postprocessing: {np.mean(metrics)}')","2f8684bf":"if row:\n    ss.loc[test['cp_type']==1, train_targets.columns] = 0\n    del ss['sig_id']\n\n    train = pd.concat([train, test])\n    train_targets = pd.concat([train_targets, ss])\n\n    N_STARTS = 2\n\n    ss = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')\n    ss.loc[:, train_targets.columns] = 0\n\n    a = 0\n\n    for seed in range(N_STARTS):\n        for n, (tr, te) in enumerate(KFold(n_splits=5, random_state=seed, shuffle=True).split(train_targets)):\n            print(f'Pseudo Fold {a+1}')\n            a+=1\n            model = create_pseudo_model(len(top_feats))\n            reduce_lr_loss = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=3, verbose=1, epsilon=1e-4, mode='min')\n\n            model.fit(train.values[tr][:, top_feats],\n                      train_targets.astype(np.float).values[tr],\n                      validation_data=(train.values[te][:, top_feats], train_targets.astype(np.float).values[te]),\n                      epochs=30, batch_size=128,\n                      callbacks=[reduce_lr_loss], verbose=2\n                     )\n            ss.loc[:, train_targets.columns] += model.predict(test_features.values[:, top_feats])\n            print('')\n\n    ss.loc[:, train_targets.columns] \/= ((n+1) * N_STARTS)\n\n    ss.loc[test['cp_type']==1, train_targets.columns] = 0","5c3452e3":"# metrics = []\n# for _target in train_targets.columns:\n#     metrics.append(log_loss(train_targets.loc[:, _target], res.loc[:, _target]))\n# print(f'OOF Metric: {np.mean(metrics)}')\n\n# metrics = []\n# res.loc[train['cp_type']==1, train_targets.columns] = 0\n# for _target in train_targets.columns:\n#     metrics.append(log_loss(train_targets.loc[:, _target], res.loc[:, _target]))\n# print(f'OOF Metric with postprocessing: {np.mean(metrics)}')","cd0ebbf4":"if row:\n    ss.loc[test['cp_type']==1, train_targets.columns] = 0\n    ss.to_csv('submission.csv', index=False)","a67e500c":"1) Based on Version 6 of https:\/\/www.kaggle.com\/stanleyjzheng\/baseline-nn-with-k-folds kernel.\n\n2) Add KFold, a few seeds averaging.\n\n3) Add WeightNormalization, Lookahead, ReduceLROnPlateau.\n\n4) Select features by permutation importance.\n\n5) Put zeros for `ctl_vehicle` predictions.\n\n6) (Forked by me again! from https:\/\/www.kaggle.com\/simakov\/keras-multilabel-neural-network-v1-2) Added pseudolabelling, deeper net\n\n7) Added better hparams, stopped training when not evaluating (perhaps this will give error, I am sacrificing a submission to find out)\n"}}