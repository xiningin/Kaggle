{"cell_type":{"851ce05a":"code","f801ab04":"code","498b1b4a":"code","a56e7465":"code","edbd8a9b":"code","2cc334d8":"code","9b52a279":"code","3bff6025":"code","1374bbf8":"code","41540c35":"code","6cfc1dd1":"markdown"},"source":{"851ce05a":"# Dependecies\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import tree\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import classification_report\nimport sklearn\nimport graphviz\n\npd.options.mode.chained_assignment = None  # default='warn'","f801ab04":"# Get the path of input data - KAGGLE\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","498b1b4a":"# Create the Classifier\nstudents_classifier = tree.DecisionTreeClassifier(class_weight=None, criterion='entropy', max_depth=None,\n max_features=None, max_leaf_nodes=None, random_state=0, splitter='best')\n\n# Import Data\ndata = pd.read_csv(\"\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv\")","a56e7465":"# Create average column and determine if student passed or failed\ndata['passed'] = data['math score'] + data['writing score'] + data['reading score']\ndata['passed'] = data['passed']\/3\ndata['passed'] = (data['passed']> 59.9).astype(int)\ndata = shuffle(data)","edbd8a9b":"# Partition of the relevant data columns\nsplit_data = train_test_split(data, test_size=.20)\n\ntrain_data = split_data[0]\ntest_data = split_data[1]\n\ntrain_labels = train_data.passed.tolist()\ntest_labels = test_data.passed.tolist()\n\n# Normalize Data\ntrain_data.loc[:, \"writing score\"] = train_data[\"writing score\"] \/\/ 10\ntrain_data.loc[:, \"math score\"] = train_data[\"math score\"] \/\/ 10\ntrain_data.loc[:, \"reading score\"] = train_data[\"reading score\"] \/\/ 10\n\n\ntest_data.loc[:, \"writing score\"] = test_data[\"writing score\"] \/\/ 10\ntest_data.loc[:, \"math score\"] = test_data[\"math score\"] \/\/ 10\ntest_data.loc[:, \"reading score\"] = test_data[\"reading score\"] \/\/ 10\n\n\ntrain_data = train_data.drop(columns = \"passed\")\ntest_data = test_data.drop(columns = \"passed\")\n","2cc334d8":"# Format Data\ntrain_data = pd.get_dummies(train_data, drop_first=True)\ntest_data = pd.get_dummies(test_data, drop_first=True)\n\nprint(\"Columns of sample\")\nprint(train_data.columns)\nprint(\"------------- First Row ---------------------\")\nprint(train_data.iloc[0])\n\n","9b52a279":"# Training\ntrained = students_classifier.fit(train_data, train_labels)","3bff6025":"# Test Data and Accuracy\ntest_predictions = trained.predict(test_data).tolist()\nID3TestAccuracy = sklearn.metrics.accuracy_score(test_labels, test_predictions)\n\nprint('ID3 Testing accuracy: ',ID3TestAccuracy)\n\ntrain_predictions = trained.predict(train_data).tolist()\nID3TrainAccuracy = sklearn.metrics.accuracy_score(train_labels, train_predictions)\n\nprint('ID3 Training accuracy: ',ID3TrainAccuracy)","1374bbf8":"# Plot with Matplotlib\nfig, ax = plt.subplots(figsize=(70, 40))\ntree.plot_tree(trained, feature_names=train_data.columns,  max_depth=10, fontsize=18)\nplt.show()","41540c35":"# Plot with GraphViz\ndot_data = tree.export_graphviz(trained, out_file=None, feature_names=train_data.columns, filled=True, rounded=True)\ngraph = graphviz.Source(dot_data)\ngraph.render(\"Students\")\ngraph","6cfc1dd1":"### Description\n\n> Andrea Becerra Bola\u00f1os & David Aguilar Castilleja\n\nThe selected dataset is a compilation of the student's information about their performance in three different areas (Reading, Writing and Math). Also, it comes with extra information that may affect or not the performance of the student, such as parents' education, lunch (nutrition), gender, race\/ethnicity and if they completed the study course.  \n\nThe objective of this decision tree implementation is to predict if the student is going to approve or fail, based on the average of the three main scores.\n\nWe normalize the scores into 10 categories instead of 0 - 100 score and created a new column with binary information (0 fail - 1 passed) that we use as labels for the trainning.\n"}}