{"cell_type":{"d59312bb":"code","0eea36cd":"code","43dc0b98":"code","aa8f58ed":"code","e1cf4142":"code","38af0353":"code","843128cc":"code","00cf7934":"code","3e087b5e":"code","6ff982aa":"code","ab43682a":"code","214cc2a9":"code","1c87e88e":"code","830ac156":"code","499fd33c":"code","711e1e98":"code","0210923c":"code","74b02ffa":"code","6d065fbd":"code","4cf49f77":"code","c9bf2baf":"code","4623ce76":"code","d052d43d":"code","79efa98c":"code","fe73698a":"code","a88fc047":"markdown","30f48a41":"markdown","1bb61e4c":"markdown","3944239e":"markdown","776f62a9":"markdown","dd2de0e0":"markdown","69018b02":"markdown","df67ab54":"markdown","36ec4b40":"markdown","fe639d18":"markdown","d08f6172":"markdown","e8b3ef1c":"markdown","9fe556a7":"markdown","48167de3":"markdown","14d43210":"markdown","86dcf086":"markdown","83f195e4":"markdown","c5e029ed":"markdown","71603477":"markdown","c2f74015":"markdown","0c187a48":"markdown","45055c47":"markdown","bb39e9ae":"markdown","1bc380d7":"markdown","affccc55":"markdown","20f30b7d":"markdown","b27d7f21":"markdown","02943397":"markdown","79ddfda0":"markdown","f76ed249":"markdown"},"source":{"d59312bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom plotly.offline import init_notebook_mode, iplot, plot\nfrom datetime import date, datetime, timedelta\nimport plotly as py\nimport plotly.graph_objs as go\nimport collections\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import r2_score\n#from sklearn.metrics import mean_absolute_percentage_error\n#import matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0eea36cd":"def secondchoice(df, col):\n      \n    for k, v in enumerate(df[col].unique()):\n        print(f'{k} - {v}')\n\n    while True:\n        secondchoice = str(input(f'Wich {choice} do you want to forecast? ')).strip().lower()\n        if secondchoice.isnumeric():\n            secondchoice = int(secondchoice)\n            if secondchoice in range(0, len(df[col].unique())):\n                break\n        \n        print(f'\\nPlease type a number between 0 and {len(df[col].unique())-1}\\n')\n        \n    filter = df[col].unique()[secondchoice]\n    df = df[df[col] == filter]\n\n    return (df, filter)","43dc0b98":"# Reading the orders datasets\ndf_orders = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_orders_dataset.csv')\ndf_order_items = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_order_items_dataset.csv')\ndf_order_payments = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_order_payments_dataset.csv')\n\n# Reading the products dataset\ndf_products = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_products_dataset.csv')","aa8f58ed":"df_orders = df_orders[df_orders.order_status.isin(['delivered', 'invoiced', 'shipped', 'processing','approved'])]","e1cf4142":"df_order_items_products = df_order_items.merge(df_products, how='left',on='product_id')\ndf_order_items_products = df_order_items_products.merge(df_order_payments, how='left',on='order_id')","38af0353":"df_complete = df_order_items_products.merge(df_orders, how='left', on='order_id')\ndf_complete.head()","843128cc":"# excluding lines with missing data\ndf_complete = df_complete.dropna()\n\n#excluding duplicated data\ndf_complete = df_complete.drop_duplicates().reset_index()","00cf7934":"df_complete['order_purchase_timestamp'] = pd.to_datetime(df_complete['order_purchase_timestamp'], format=\"%Y-%m-%d %H:%M:%S\")\ndf_complete['order_estimated_delivery_date'] = pd.to_datetime(df_complete['order_estimated_delivery_date'], format=\"%Y-%m-%d %H:%M:%S\")\n\ndf_complete['estimated_delivery_time'] = df_complete.order_estimated_delivery_date - df_complete.order_purchase_timestamp\n\ndf_complete.estimated_delivery_time = list(map(lambda x: int(x.days), df_complete.estimated_delivery_time))\n\ndf_complete = df_complete.drop('index', axis=1).dropna()\ndf_complete.head()","3e087b5e":"df_intermediate = df_complete.drop(['order_id',\n                                 'order_item_id',\n                                 'customer_id',\n                                 'shipping_limit_date',\n                                 'product_description_lenght',\n                                 'product_weight_g',\n                                 'product_length_cm',\n                                 'product_height_cm',\n                                 'product_width_cm',\n                                 'order_approved_at',\n                                 'order_delivered_carrier_date',\n                                 'order_delivered_customer_date',\n                                 'order_estimated_delivery_date',\n                                 'order_status'], axis=1)\n\ndf_intermediate.tail()","6ff982aa":"firstchoice = '0'\n\n\"\"\"while True:\n    print('0 - Product Category\\n1 - Specific Product\\n2 - All products')\n    firstchoice = str(input('What do you want to forecast (0, 1 or 2)? ')).strip().lower()\n    if firstchoice in ('0', '1', '2'):\n        break\n    else:\n        print('\\nPlease type \"0\" for Product Category, \"1\" for Specifc Product or 2 for all produts\\n')\"\"\"","ab43682a":"\"\"\"if firstchoice ==  '0':\n        choice = 'Category'\n        col = 'product_category_name'\n        df_intermediate, filter = secondchoice(df=df_intermediate, col=col)\n\nelif firstchoice ==  '1':\n    choice = 'Product'\n    col = 'product_id'\n    df_intermediate, filter = secondchoice(df=df_intermediate, col=col)\n\nelse:\n    filter = 'All Products'\"\"\"","214cc2a9":"choice = 'Category'\ncol = 'product_category_name'\nfilter = df_intermediate[col].unique()[11]\ndf_intermediate = df_intermediate[df_intermediate[col] == filter]","1c87e88e":"df_predicter = df_intermediate.groupby('order_purchase_timestamp', as_index=False).sum()\ndf_predicter = df_predicter.dropna()","830ac156":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    name=filter,\n    x = df_predicter.order_purchase_timestamp, \n    y = df_predicter.payment_value,\n    mode='lines'\n    ))\n\nfig.update_layout(\n    title= (f'Evolu\u00e7\u00e3o das vendas de {filter} no tempo'),\n    template='plotly_dark',\n    yaxis_title='Vendas [BRL]')\n\nfig.show()","499fd33c":"oldest = min(df_predicter.order_purchase_timestamp)\ndf_predicter['m\u00eas'] = list(map(lambda x: int(((x - oldest) \/\/ 30).days), df_predicter.order_purchase_timestamp))\ndf_predicter['semana'] = list(map(lambda x: int(((x - oldest) \/\/ 7).days), df_predicter.order_purchase_timestamp))\n\ndf_predicter = df_predicter.drop('order_purchase_timestamp', axis=1)","711e1e98":"freqchoice = '0'\n\n\"\"\"while True:\n    print('0 - Prediction per week\\n1 - Prediction per month')\n    freqchoice = str(input('Wold you like to predict per week or per month (0 or 1)? ')).strip().lower()\n    if freqchoice in ('0', '1'):\n        break\n    else:\n        print('\\nPlease type \"0\" for prediction per week or \"1\" for prediction per month\\n')\"\"\"","0210923c":"if freqchoice == '0':\n    freq = 'semana'\n    nfreq = 'm\u00eas'\nelse:\n    freq = 'm\u00eas'\n    nfreq = 'semana'\n\ndf_predicter = df_predicter.groupby(freq, as_index=False).sum()\ndf_predicter = df_predicter.drop(nfreq, axis=1)","74b02ffa":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    name=filter,\n    x = df_predicter[freq], \n    y = df_predicter['payment_value'],\n    mode='lines'\n    ))\n\nfig.update_layout(\n    title= (f'Evolu\u00e7\u00e3o das vendas de {filter} por {freq}'),\n    template='plotly_dark',\n    xaxis_title=freq,\n    yaxis_title='Vendas [BRL]')\n\nfig.show()","6d065fbd":"X_train, X_test, y_train, y_test = train_test_split(\n    df_predicter[[freq, 'price', 'freight_value', 'product_name_lenght', 'product_photos_qty', 'estimated_delivery_time']],\n    df_predicter['payment_value'],\n     test_size=0.2, random_state=42, shuffle=False)\n\nX, y = df_predicter[freq], df_predicter.payment_value","4cf49f77":"# Fit regression model\nregr_1 = DecisionTreeRegressor(max_depth=2)\nregr_2 = DecisionTreeRegressor(max_depth=5)\nregr_1.fit(X_train, y_train)\nregr_2.fit(X_train, y_train)\n\n# Predict\ny_1 = regr_1.predict(X_test)\ny_2 = regr_2.predict(X_test)","c9bf2baf":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    name='Data Train',\n    x = X_train[freq], \n    y = y_train,\n    mode='markers+lines'\n    ))\n\nfig.add_trace(go.Scatter(\n    name='Data Test',\n    x = X_test[freq], \n    y = y_test,\n    mode='lines'\n    ))\n\nfig.add_trace(go.Scatter(\n    name=\"max_depth=2\",\n    x = X_test[freq],\n    y = y_1,\n    mode='lines'\n    ))\n\nfig.add_trace(go.Scatter(\n    name=\"max_depth=5\",\n    x = X_test[freq],\n    y = y_2,\n    mode='lines'\n    ))\n\nfig.update_layout(\n    title= filter,\n    template='plotly_dark',\n    xaxis_title=freq,\n    yaxis_title='Vendas [BRL]')\n\nfig.show()","4623ce76":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    name='Data Test',\n    x = X_test[freq], \n    y = y_test,\n    mode='lines'\n    ))\n\nfig.add_trace(go.Scatter(\n    name=\"max_depth=2\",\n    x = X_test[freq],\n    y = y_1,\n    mode='lines'\n    ))\n\nfig.add_trace(go.Scatter(\n    name=\"max_depth=5\",\n    x = X_test[freq],\n    y = y_2,\n    mode='lines'\n    ))\n\nfig.update_layout(\n    title= (f'Forecast {filter}'),\n    template='plotly_dark',\n    xaxis_title= freq,\n    yaxis_title='Vendas [BRL]')\n\nfig.show()","d052d43d":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    name=\"Error max_depth=2\",\n    x = X_test[freq],\n    y = y_test - y_1,\n    mode='lines'\n    ))\n\nfig.add_trace(go.Scatter(\n    name=\"Error max_depth=5\",\n    x = X_test[freq],\n    y = y_test - y_2,\n    mode='lines'\n    ))\n\nfig.update_layout(\n    title= (f'Prediction Error'),\n    template='plotly_dark',\n    xaxis_title= freq)\n\nfig.show()","79efa98c":"r2_score(y_test, y_1, sample_weight=None)","fe73698a":"r2_score(y_test, y_2, sample_weight=None)","a88fc047":"## Ploting Error for each prediction","30f48a41":"R2 for max_depth=5","1bb61e4c":"## Spling data in test and train\n- 80% train\n- 20% test","3944239e":"# **Mergering dataframes**\n------------------------------------------------------------","776f62a9":"# Filtering only the sales lines","dd2de0e0":"Ploting","69018b02":"## First block\n\nIn tis block the DFs bellow were mergered in one DF that contains all information about *Order Itens* and *Products*.\n\ndf_order_items\n\ndf_products","df67ab54":"## Ploting *sales x time* for select product or category","36ec4b40":"## Taking a close look at the predictions","fe639d18":"# Routine for Second Choice","d08f6172":"## Ploting the results","e8b3ef1c":"Grupping sales information per week\/month","9fe556a7":"Excluding unuseless data for prediction","48167de3":"Creating week and month information","14d43210":"## First Choice\n\n0: Product Category\n\n1: Specifc Product\n\n2: all produts","86dcf086":"## R2","83f195e4":"## Excluding unuseless data","c5e029ed":"# Preparing Data for Prediction\n------------------------------------------------------------------","71603477":"Choosing prediction per week or per month","c2f74015":"## Fiting Decision Tree Regressor for 2 and 5 max depth","0c187a48":"# **Bilding the model**","45055c47":"R2 for max_depth=2","bb39e9ae":"Creating estimated delivery time","1bc380d7":"# Choosing what wiill be predict:","affccc55":"## Second block\nIn this block the output of the first blocks will be merged with *df_products* and all information thah we need will be in dataframe named *df_complete*.","20f30b7d":"## Creating data","b27d7f21":"Grupping sales information per date","02943397":"## Second Choice\n\nProduct Category name or Product ID","79ddfda0":"# Third Choice","f76ed249":"# Carregando os dados"}}