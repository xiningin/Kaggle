{"cell_type":{"267d718c":"code","00378e41":"code","eb04d4cc":"code","f7b318c5":"code","c187276a":"code","667ae238":"code","66f0e3b7":"code","d6383edc":"code","538566f8":"code","4854245e":"code","a01cee18":"code","eeda6aae":"markdown","3e3008a4":"markdown","c9d5e56f":"markdown"},"source":{"267d718c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00378e41":"import janestreet\nenv = janestreet.make_env() # initialize the environment\niter_test = env.iter_test() # an iterator which loops over the test set","eb04d4cc":"import xgboost as xgb\nprint(\"XGBoost version:\", xgb.__version__)","f7b318c5":"%%time\n\nimport cudf\n\ntrain_cudf  = cudf.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')\ntrain = train_cudf.to_pandas()\ndel train_cudf\n\nfeatures = pd.read_csv('..\/input\/jane-street-market-prediction\/features.csv')\nexample_test = pd.read_csv('..\/input\/jane-street-market-prediction\/example_test.csv')\nsample_prediction_df = pd.read_csv('..\/input\/jane-street-market-prediction\/example_sample_submission.csv')\n\nprint (\"Data is loaded!\")","c187276a":"print('train shape is {}'.format(train.shape))\nprint('features shape is {}'.format(features.shape))\nprint('example_test shape is {}'.format(example_test.shape))\nprint('sample_prediction_df shape is {}'.format(sample_prediction_df.shape))","667ae238":"missing_values_count = train.isnull().sum()\nprint (missing_values_count)\n\ntotal_cells = np.product(train.shape)\ntotal_missing = missing_values_count.sum()\nprint (\"\\n Percentage of missing data = \",(total_missing\/total_cells) * 100,\"%\")","66f0e3b7":"train = train[train['weight'] != 0]\nprint(train.shape)\nprint(train.head())\n#making resp as a target\ntrain['action'] = (train['resp'].values > 0).astype('int')\nprint(train.shape)\nprint(train.head())\n\nX_train = train.loc[:, train.columns.str.contains('feature')]\ny_train = train.loc[:, 'action']","d6383edc":"f_mean = X_train.mean()\nX_train.fillna(f_mean)","538566f8":"# we need to fine tune using hyperplot or randomgridsearch\n\nclf = xgb.XGBClassifier(\n    n_estimators=400,\n    max_depth=7,\n    eta=0.5, \n    missing=None,\n    random_state=42,\n    tree_method='gpu_hist', # to make xgb use gpu\n    subsample=0.8,\n    colsample_bytree=1,\n    verbosity=2   \n)","4854245e":"%%time\nclf.fit(X_train, y_train)","a01cee18":"%%time\n# iter_test give as the test data to predict\nfor (test_df, sample_prediction_df) in iter_test:\n    \n    # get the data from iter_test\n    X_test = test_df.loc[:, test_df.columns.str.contains('feature')]\n    y_preds = clf.predict(X_test)\n    \n    # test the data through janestreet api\n    sample_prediction_df.action = y_preds\n    env.predict(sample_prediction_df)","eeda6aae":"kudos @hamditarek https:\/\/www.kaggle.com\/hamditarek\/market-prediction-xgboost-with-gpu-fit-in-1min","3e3008a4":"##################################################################","c9d5e56f":"#################################################################"}}