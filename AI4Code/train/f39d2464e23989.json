{"cell_type":{"a269a67a":"code","2c68b1ab":"code","5aed1b96":"code","ae1e6bf2":"code","196a3f67":"code","f6a1a327":"code","fe4e86e0":"code","f6243b8d":"code","6e513239":"code","1b31809f":"code","30eef6ac":"code","655efa33":"code","4846eb1b":"code","6b9f54a1":"code","3624d555":"code","02c94f66":"code","d4b277b9":"code","2521aa39":"code","bddc7f75":"code","949bea6b":"code","2d40f35e":"code","d16ca7dc":"code","277c4a5f":"code","1e80ed56":"code","5c32f49e":"markdown","315a06f5":"markdown","ba55a26d":"markdown","de4432c4":"markdown","55767131":"markdown","eab2348c":"markdown","bdd04ac0":"markdown","df0a5a30":"markdown","b4d1e582":"markdown","ef41d964":"markdown","4ace776b":"markdown","52146160":"markdown","4f7b0c8f":"markdown","372507d4":"markdown","e9b1e657":"markdown"},"source":{"a269a67a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c68b1ab":"df=pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","5aed1b96":"df.head()","ae1e6bf2":"df.isnull().sum()","196a3f67":"import seaborn as sns","f6a1a327":"sns.pairplot(df,hue='Outcome')","fe4e86e0":"x=df.drop('Outcome',axis=1).values\n\ny=df['Outcome'].values","f6243b8d":"from sklearn.model_selection import train_test_split\n\nxtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=2)","6e513239":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F","1b31809f":"xtrain=torch.FloatTensor(xtrain)\nxtest=torch.FloatTensor(xtest)\nytrain=torch.LongTensor(ytrain)\nytest=torch.LongTensor(ytest)","30eef6ac":"df.shape","655efa33":"class ANN_model(nn.Module):\n    def __init__(self,input_features=8,hidden_1=20,hidden_2=20,out_fea=2):\n        super().__init__()\n        self.conn1=nn.Linear(input_features,hidden_1)\n        self.conn2=nn.Linear(hidden_1,hidden_2)\n        self.out=nn.Linear(hidden_2,out_fea)\n        \n    def forward(self,x):\n        x=F.relu(self.conn1(x))\n        x=F.relu(self.conn2(x))\n        x=self.out(x)\n        return x","4846eb1b":"torch.manual_seed(20)\n\nmodel=ANN_model()","6b9f54a1":"model.parameters","3624d555":"loss_function=nn.CrossEntropyLoss()\n\noptimizer=torch.optim.Adam(model.parameters(),lr=0.01)","02c94f66":"final_loss=[]\n\nfor i in range(500):\n    i=i+1\n    ypred=model.forward(xtrain)\n    loss=loss_function(ypred,ytrain)\n    final_loss.append(loss)\n    if i%10==0:\n        print('Epoch number {} and the loss is {}'.format(i,loss.item()))\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()","d4b277b9":"import matplotlib.pyplot as plt\n\nplt.plot(range(500),final_loss)\nplt.xlabel('Epochs')\nplt.ylabel('Loss')","2521aa39":"for i,dat in enumerate(xtest[0]):\n    print(i,dat)","bddc7f75":"prediction=[]\nwith torch.no_grad():\n    for i,dat in enumerate(xtest):\n        ypred=model(dat)\n        prediction.append(ypred.argmax().item())\n        print(ypred.argmax().item())","949bea6b":"from sklearn.metrics import confusion_matrix\n\nconf=confusion_matrix(ytest,prediction)\n\nsns.heatmap(conf)","2d40f35e":"from sklearn.metrics import accuracy_score\n\nacc=accuracy_score(ytest,prediction)\n\nacc*100","d16ca7dc":"list=[6.0, 130.0, 72.0, 40.0, 0.0, 25.6, 0.627, 45.0]","277c4a5f":"list=torch.tensor(list)","1e80ed56":"with torch.no_grad():\n    print(model(list).argmax().item())","5c32f49e":"**Importing necessary libraries**","315a06f5":"# Train test split","ba55a26d":"**It indicates the data is not a diabetes record**","de4432c4":"**Loss and optimization function**","55767131":"**It gives the summary of the model**","eab2348c":"# Plotting the loss function","bdd04ac0":"# Backward propogation","df0a5a30":"# Confusion matrix","b4d1e582":"# Creating tensors","ef41d964":"# Accuracy","4ace776b":"**The loss is gradually decreased from the first epoch**","52146160":"**Instantiate the model**","4f7b0c8f":"# Creating ANN model","372507d4":"# Prediction on new data","e9b1e657":"**True positives and false negatives are predicting nicely than the rest**"}}