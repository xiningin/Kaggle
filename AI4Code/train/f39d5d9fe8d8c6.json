{"cell_type":{"d25ef10e":"code","186c30f9":"code","17a617af":"code","37f04a45":"code","44884ce9":"code","7f3cb811":"code","dddc2a15":"code","5e1feebc":"code","007ec0a0":"code","60719768":"code","2d16e3f3":"code","04ecf029":"code","a37eba23":"code","9145bd9e":"code","5bf82c85":"markdown","a7af7ac0":"markdown","de084834":"markdown","6f7b824a":"markdown","045ed3e4":"markdown","ce25c20b":"markdown","6684f56c":"markdown","d9e26d2b":"markdown","f54b54a2":"markdown","5155e619":"markdown","38f93838":"markdown","9ae7e969":"markdown"},"source":{"d25ef10e":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/creditscreening\/credit-screening.data'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport numpy as np \nimport pandas as pd\nimport os\nimport sklearn.datasets as dt\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nsn.set()","186c30f9":"import pandas as pd\nnomes = [\"A1\",\"A2\",\"A3\",\"A4\",\"A5\",\"A6\",\"A7\",\"A8\",\"A9\",\"A10\",\"A11\",\"A12\",\"A13\",\"A14\",\"A15\",\"A16\"]\ndf = pd.read_csv(\"\/kaggle\/input\/creditscreening\/credit-screening.data\", sep = \",\", names = nomes, na_values = '?')\ndf.head()","17a617af":"df.describe()","37f04a45":"df.isnull().sum()","44884ce9":"lista = ['A1','A4','A5','A6','A7']\nfor i in lista: \n    df[i]=df[i].fillna(value=df[i].mode)","7f3cb811":"lista = ['A2','A14']\nfor i in lista: \n    df[i]=df[i].fillna(value=df[i].mean)","dddc2a15":"lista = ['A1','A4','A5','A6','A7','A9','A10','A12','A13']\nfor i in lista:\n    df[i] = df[i].astype(str)\n    df[i] = df[i].astype('category')","5e1feebc":"df['A16'] = df['A16'].astype('category')\ndf['A16'].cat.codes","007ec0a0":"df = pd.get_dummies(df,columns=['A1','A4','A5','A6','A7','A9','A10','A12','A13'])","60719768":"dic = dt.load_digits()\ndic.keys()","2d16e3f3":"X = dic.data\ny = dic.target\n\nfrom sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2)\nX_train.shape","04ecf029":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3)\nmodelo = knn.fit(X_train,y_train)\ny_pred = modelo.predict(X_test)\ny_score = modelo.score(X_test,y_test)\ny_score","a37eba23":"compara = pd.DataFrame(y_test)\ncompara['predictKNN'] = y_pred\ncompara.head(100)","9145bd9e":"from sklearn.tree import DecisionTreeClassifier, export_graphviz\ndtc = DecisionTreeClassifier()\nmodelo = dtc.fit(X_train,y_train)\ny_train = modelo.predict(X_test)\n#guarde o resultado da predi\u00e7\u00e3o em uma nova coluna \"predictAD\"\nimport graphviz as gpz\ndot_data = export_graphviz(dtc)\ngraph = gpz.Source(dot_data)\ngraph","5bf82c85":"8 - utilize a fun\u00e7\u00e3o pd.get_dummies para transformar todas as colunas categ\u00f3ricas para indicadores de vari\u00e1veis. \n### df = pd.get_dummies( df, columns=['A1','A4','A5','A6','A7','A9','A10','A12','A13'])","a7af7ac0":"4 - Preencha os campos das colunas com valores categ\u00f3ricos com a moda dos valores da coluna, para isso use a fun\u00e7\u00e3o fillna( ) e moda( )\n    * defina um vetor com as colunas a serem alteradas\n    * use um la\u00e7o para varrer o vetor   (for n in colunas: df.fillna...)","de084834":"9 - utilize train_test_split para criar bases de treino e teste","6f7b824a":"6 - transforme todas as colunas com valores categ\u00f3ricos para o tipo \"category\"  use a fun\u00e7\u00e3o astype\n        * Colunas Categ\u00f3ricas: A1, A4, A5, A6, A7, A9, A10, A12, A13","045ed3e4":"5 - Preencha os campos faltantes das colunas com valores cont\u00ednuos com a m\u00e9dia\n        * Colunas com valores cont\u00ednuos com valores faltantes:  A2 e A14","ce25c20b":"2 - Execute a fun\u00e7\u00e3o describe para ver um resumo estat\u00edstico descritivo","6684f56c":"7 - Transforme a coluna objetivo  A16 primeiro para o tipo category e depois fa\u00e7a a codifica\u00e7\u00e3o num\u00e9rica utiliando a fun\u00e7ao df[\"A16\"].cat.codes","d9e26d2b":"3 - utilize   df.isnull().sum() para saber em quais colunas h\u00e1 valores faltantes NaN\n","f54b54a2":"11 - Execute o algoritmo de \u00c1rvore de Decis\u00e3o, guarde o resultado da predi\u00e7\u00e3o em uma nova coluna predictAD","5155e619":"1 - Importar arquivo (credit-screening.data) procure o dataset no Kaggle, caso n\u00e3o encontre, importe o arquivo dispon\u00edvel no Google Classroom. Importe o arquivo substituindo valores faltantes \"?\" por NaN e inserir o nome das colunas utilizando o vetor abaixo.\n\n#### nomes = [\"A1\",\"A2\",\"A3\",\"A4\",\"A5\",\"A6\",\"A7\",\"A8\",\"A9\",\"A10\",\"A11\",\"A12\",\"A13\",\"A14\",\"A15\",\"A16\"]5 - ","38f93838":"*  Colunas Categ\u00f3ricas: A1, A4, A5, A6, A7, A9, A10, A12, A13\n*  Colunas Categ\u00f3ricas com valores faltantes : A1, A4, A5, A6, A7 preencher com a moda (valor que mais aparece na coluna)\n*  Colunas com valores cont\u00ednuos: A2, A3, A8, A11, A14, A15\n*  Colunas com valores cont\u00ednuos com valores faltantes:  A2 e A14 preencher com m\u00e9dia","9ae7e969":"10 - Execute o algoritmo dos K vizinhos mais pr\u00f3ximos com K=3, guarde o resultado da predi\u00e7\u00e3o em uma nova coluna do dataframe \"predictKNN\""}}