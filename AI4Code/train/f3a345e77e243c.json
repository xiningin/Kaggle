{"cell_type":{"43994349":"code","46809811":"code","aa9c1de8":"code","84ecbd73":"code","a2475cde":"code","ae910cff":"code","db42229a":"code","563e5d1f":"code","89c5db39":"code","fae5cb60":"code","767aaaaf":"code","180a2d23":"code","635e330b":"code","ca4f2f94":"code","c1afdeb6":"code","18d77ee8":"code","c24c6b23":"code","a173a903":"code","4172999a":"code","116db028":"code","63c95d9a":"code","affc50c8":"code","60f79517":"code","0db01715":"code","adb88045":"code","43965d8e":"code","5be2f9f5":"code","eb6770bf":"code","8d52c464":"code","69aa07d4":"code","0abe1759":"code","15bfdffe":"code","39b10f5e":"code","dfa6cc98":"code","457d4216":"code","19545097":"code","8f6fc1bf":"code","6e6eb3da":"code","17f2aac7":"code","5dff4a97":"code","c3765603":"code","56283546":"code","05e9bccf":"code","438fca7c":"code","8d5ce21c":"code","02878498":"code","88a333ae":"code","306098d1":"code","f03abbec":"code","0fcbffa4":"code","2124bbac":"code","6befc5a9":"code","37ad22c9":"code","7b0be8f1":"code","ef882aae":"code","36a0d556":"code","f3a09377":"code","b251b30d":"markdown","3724b421":"markdown","34ad9bf8":"markdown","8278e39b":"markdown","515dcbda":"markdown","3b515a4c":"markdown","265eda1f":"markdown","9b03247b":"markdown","2c3e0f91":"markdown"},"source":{"43994349":"!pip install torch==1.6.0+cu101 torchvision==0.7.0+cu101 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html -q\n!pip install --upgrade kornia -q\n!pip install allennlp==1.1.0.rc4 -q\n!pip install --upgrade fastai -q","46809811":"#importing the libraries\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\n\nfrom fastai.tabular.all import *","aa9c1de8":"# Setting the directory structure\npath = Path('..\/input\/house-prices-advanced-regression-techniques')\nPath.BASE_PATH = path\npath.ls()","84ecbd73":"#importing the data\ntrain = pd.read_csv(path\/'train.csv', low_memory=False)\ntest = pd.read_csv(path\/'test.csv', low_memory=False)","a2475cde":"train.shape","ae910cff":"train.columns","db42229a":"train.head()","563e5d1f":"#Ordinal Variable\n# train['OverallQual']","89c5db39":"#dependent variable\ndep_var = 'SalePrice'\ntrain[dep_var] = np.log(train[dep_var])","fae5cb60":"proc = [Categorify, FillMissing]","767aaaaf":"cont, cat = cont_cat_split(train, 1, dep_var=dep_var)","180a2d23":"splits = RandomSplitter(0.2)","635e330b":"splits = splits(train)","ca4f2f94":"to = TabularPandas(train, procs=proc, cat_names=cat, cont_names=cont,splits = splits, y_names=dep_var)","c1afdeb6":"len(to.train), len(to.valid)","18d77ee8":"to.show(5)","c24c6b23":"to.items.head(5)","a173a903":"xs, y = to.train.xs, to.train.y\nvalid_xs, valid_y = to.valid.xs, to.valid.y","4172999a":"m = DecisionTreeRegressor()\nm.fit(xs, y);","116db028":"def r_mse(pred,y): return round(math.sqrt(((pred-y)**2).mean()), 6)\ndef m_rmse(m, xs, y): return r_mse(m.predict(xs), y)","63c95d9a":"m_rmse(m, xs, y)","affc50c8":"m_rmse(m, valid_xs, valid_y)","60f79517":"m.get_n_leaves(), len(train)","0db01715":"m = DecisionTreeRegressor(min_samples_leaf=10)\nm.fit(to.train.xs, to.train.y)\nm_rmse(m, xs, y), m_rmse(m, valid_xs, valid_y)","adb88045":"m.get_n_leaves()","43965d8e":"def rf(xs, y, n_estimators=40, max_samples=800,\n       max_features=0.5, min_samples_leaf=5, **kwargs):\n    return RandomForestRegressor(n_jobs=-1, n_estimators=n_estimators,\n        max_samples=max_samples, max_features=max_features,\n        min_samples_leaf=min_samples_leaf, oob_score=True).fit(xs, y)","5be2f9f5":"m = rf(xs, y);","eb6770bf":"m_rmse(m, xs, y), m_rmse(m, valid_xs, valid_y)","8d52c464":"preds = np.stack([t.predict(valid_xs) for t in m.estimators_])","69aa07d4":"r_mse(preds.mean(0), valid_y)","0abe1759":"plt.plot([r_mse(preds[:i+1].mean(0), valid_y) for i in range(40)]);","15bfdffe":"r_mse(m.oob_prediction_, y)","39b10f5e":"\npreds = np.stack([t.predict(valid_xs) for t in m.estimators_])","dfa6cc98":"preds.shape","457d4216":"preds_std = preds.std(0)","19545097":"preds_std[:5]","8f6fc1bf":"\ndef rf_feat_importance(m, df):\n    return pd.DataFrame({'cols':df.columns, 'imp':m.feature_importances_}\n                       ).sort_values('imp', ascending=False)","6e6eb3da":"fi = rf_feat_importance(m, xs)\nfi[:10]","17f2aac7":"def plot_fi(fi):\n    return fi.plot('cols', 'imp', 'barh', figsize=(12,7), legend=False)\n\nplot_fi(fi[:30]);","5dff4a97":"to_keep = fi[fi.imp>0.005].cols\nlen(to_keep)","c3765603":"\nxs_imp = xs[to_keep]\nvalid_xs_imp = valid_xs[to_keep]","56283546":"\nm = rf(xs_imp, y)","05e9bccf":"m_rmse(m, xs_imp, y), m_rmse(m, valid_xs_imp, valid_y)","438fca7c":"len(xs.columns), len(xs_imp.columns)","8d5ce21c":"plot_fi(rf_feat_importance(m, xs_imp));","02878498":"from scipy.cluster import hierarchy as hc\n\ndef cluster_columns(df, figsize=(10,6), font_size=12):\n    corr = np.round(scipy.stats.spearmanr(df).correlation, 4)\n    corr_condensed = hc.distance.squareform(1-corr)\n    z = hc.linkage(corr_condensed, method='average')\n    fig = plt.figure(figsize=figsize)\n    hc.dendrogram(z, labels=df.columns, orientation='left', leaf_font_size=font_size)\n    plt.show()","88a333ae":"cluster_columns(xs_imp)","306098d1":"p = valid_xs_imp['OverallQual'].value_counts(sort=False).plot.barh()\n# c = to.classes['OverallQual']\n# plt.yticks(range(len(c)), c);","f03abbec":"# GrLivArea vs y\nplt.scatter(xs_imp['GrLivArea'],y)","0fcbffa4":"# GarageArea vs y\nplt.scatter(xs_imp['GarageArea'],y)","2124bbac":"from sklearn.inspection import plot_partial_dependence\n\nfig,ax = plt.subplots(figsize=(12, 4))\nplot_partial_dependence(m, valid_xs_imp, ['GrLivArea','GarageArea'],\n                        grid_resolution=20, ax=ax);","6befc5a9":"# !pip install treeinterpreter -q\n# !pip install waterfallcharts -q","37ad22c9":"#hide\nimport warnings\nwarnings.simplefilter('ignore', FutureWarning)\n\nfrom treeinterpreter import treeinterpreter\nfrom waterfall_chart import plot as waterfall","7b0be8f1":"row = valid_xs_imp.iloc[:5]","ef882aae":"prediction,bias,contributions = treeinterpreter.predict(m, row.values)","36a0d556":"\nprediction[0], bias[0], contributions[0].sum()","f3a09377":"waterfall(valid_xs_imp.columns, contributions[0], threshold=0.08, \n          rotation_value=45,formatting='{:,.3f}');","b251b30d":"# Tree Variance of predicted Score","3724b421":"# Tree Interpreter","34ad9bf8":"# Random Forest","8278e39b":"# Feature Importance","515dcbda":"# Remove Low Important variables","3b515a4c":"# Partial Dependence","265eda1f":"# Decision Tree","9b03247b":"# TabularPandas and TabularProc","2c3e0f91":"# Setting up Fastai library"}}