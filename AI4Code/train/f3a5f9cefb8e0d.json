{"cell_type":{"b433de8e":"code","27fe280f":"code","b2c81e79":"code","9295526d":"code","e4f64743":"code","87854f57":"code","6a6bb791":"code","1e898cd8":"code","09f49517":"code","8f7594f0":"code","7907e899":"code","c66e0c9a":"code","acc07dd4":"code","236ceea1":"code","d05bbbc4":"code","87fed361":"code","42ecc309":"code","789c580a":"code","d0081dbd":"code","0022d316":"code","47e2b06c":"code","f228b99b":"code","de5340cc":"code","f8f3f9a1":"code","9c845fa3":"markdown","41437e9b":"markdown","db9f5afe":"markdown","f190c648":"markdown","ba9533aa":"markdown","49b16f71":"markdown","8853962d":"markdown","f1440752":"markdown","642cbd36":"markdown","e186219a":"markdown","5b028a41":"markdown"},"source":{"b433de8e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","27fe280f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b2c81e79":"train_data = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/sample_submission.csv')","9295526d":"train_data.columns","e4f64743":"features = ['LotArea','YearBuilt','YearRemodAdd','OverallCond','GarageArea','1stFlrSF','2ndFlrSF','FullBath','BedroomAbvGr',\n                 'TotRmsAbvGrd','SalePrice']\ndf_train = train_data[features]","87854f57":"df_train.head()","6a6bb791":"df_train.info()","1e898cd8":"df_train.describe()","09f49517":"df_train.hist(bins=30, figsize=(15,12), edgecolor='black')\nplt.show()","8f7594f0":"sns.pairplot(df_train,corner=True)\nplt.show()","7907e899":"plt.figure(figsize=(10,8))\nmatrix = np.triu(df_train.corr())\nsns.heatmap(df_train.corr(), mask=matrix, annot=True)\nplt.show()","c66e0c9a":"# Finding out how much portion of data outliers takes\nlotarea_outlier = (len(df_train.loc[df_train['LotArea']>40000])\/len(df_train))*100\nprint('LotArea outlier percentage: {}%'.format(round(lotarea_outlier)))\n\n# Removing the outliers\ndf_train = df_train.loc[df_train['LotArea']<40000]\n\ndf_train['LotArea'].hist(bins=30, edgecolor='black')\nplt.title('LotArea Distribution')\nplt.show()","acc07dd4":"# Making features from YearBulit and YearRemodAdd\nnewest_house_age = max(df_train['YearBuilt'])\ndf_train['HouseAge'] = df_train['YearBuilt'].apply(lambda year: newest_house_age - year)\ndf_train['LastMod'] = df_train['YearRemodAdd'].apply(lambda year: newest_house_age - year)","236ceea1":"df_train.drop(['YearBuilt','YearRemodAdd'], axis=1, inplace=True)","d05bbbc4":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df_train.drop('SalePrice', axis=1), df_train['SalePrice'], test_size=0.3,\n                                                   random_state=101)","87fed361":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid = {'alpha':[0.1, 1, 10]}\ngrid = GridSearchCV(Ridge(), param_grid, refit=True, verbose=3)\ngrid.fit(X_train, y_train)","42ecc309":"from sklearn.metrics import mean_absolute_error, mean_squared_error\npred = grid.predict(X_test)\nprint('mean absolute error: {}'.format(mean_absolute_error(y_test, pred)))\nprint('root mean squared error: {}'.format(np.sqrt(mean_squared_error(y_test,pred))))","789c580a":"print('performance on train set: {}'.format(grid.score(X_train,y_train)))\nprint('performance on testing set: {}'.format(grid.score(X_test,y_test)))","d0081dbd":"grid.best_params_","0022d316":"df_test = test_data[['LotArea','YearBuilt','YearRemodAdd','OverallCond','GarageArea','1stFlrSF','2ndFlrSF','FullBath','BedroomAbvGr',\n                 'TotRmsAbvGrd']]\ndf_test.head()","47e2b06c":"df_test = df_test.fillna(X_test['GarageArea'].mean())\ndf_test.isnull().sum()","f228b99b":"# Making features from YearBulit and YearRemodAdd\nnewest_house_age = max(df_test['YearBuilt'])\ndf_test['HouseAge'] = df_test['YearBuilt'].apply(lambda year: newest_house_age - year)\ndf_test['LastMod'] = df_test['YearRemodAdd'].apply(lambda year: newest_house_age - year)\n\ndf_test.drop(['YearBuilt','YearRemodAdd'], axis=1, inplace=True)","de5340cc":"pred = Ridge(alpha=10).fit(df_train.drop('SalePrice',axis=1),df_train['SalePrice']).predict(df_test)","f8f3f9a1":"output = pd.DataFrame({'Id':test_data.Id, 'SalePrice':pred})\noutput.to_csv('my_submission',index=False)\nprint('saved')","9c845fa3":"# Prediction on test data","41437e9b":"## Evaluation of Model","db9f5afe":"## Handling Outliears ","f190c648":"# Model Building","ba9533aa":"# Exploratory Data Analysis","49b16f71":"Keeping only Most Important Features","8853962d":"# Quick Look at Data","f1440752":"# Data Import","642cbd36":"## Splitting the df_train","e186219a":"# Basic Imports","5b028a41":"As we can see lot area has some outliear as well as all the features where area is the component"}}