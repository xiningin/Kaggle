{"cell_type":{"80f8228c":"code","4cb2a287":"code","2a0a1fc6":"code","dc1c5a5f":"code","37a68dc6":"code","e2f024de":"code","16335218":"code","32527df7":"code","0ad204d5":"code","00368166":"code","c1c7d09d":"code","e68d1259":"code","a9b0f23c":"code","9c63a49b":"code","b018b65f":"code","a0198629":"code","358c5768":"code","64e4c644":"code","08f4bb77":"code","918fda12":"code","3092c356":"code","71b52dd5":"code","ea7d393c":"markdown","edca95b0":"markdown","c791efc5":"markdown","fdba284d":"markdown","859ef7e6":"markdown","5b7a8ccf":"markdown","526d8f40":"markdown","2b107c26":"markdown","40743945":"markdown","92b6c21c":"markdown","53faabcd":"markdown","315e35d1":"markdown","e34fe3fa":"markdown","45af445a":"markdown","82e1e0e6":"markdown","9f1aa31a":"markdown","e987b2c4":"markdown","7cc282b7":"markdown","fdbf1f41":"markdown"},"source":{"80f8228c":"#Please run this code in Google Co-Lab\n\n!wget https:\/\/www.dropbox.com\/s\/llg91ednbv6gcu5\/ratings.csv","4cb2a287":"\n!pip3 install scikit-surprise","2a0a1fc6":"import pandas as pd\nimport numpy as np\n\nfrom surprise import Reader, Dataset, SVD\n\nfrom surprise.accuracy import rmse, mae\nfrom surprise.model_selection import cross_validate","dc1c5a5f":"df = pd.read_csv('ratings.csv')\ndf.head()","37a68dc6":"print('Shape of the dataframe', df.shape)\nprint('Contains:',df.shape[0],'rows')\nprint('Contains:',df.shape[1],'columns')","e2f024de":"df.isnull().sum()","16335218":"# Let's drop the timestamp column because we are not gonna be using this column\n\ndf.drop('timestamp', inplace=True, axis = 1)","32527df7":"df.head()","0ad204d5":"print('Number of Unique Movies:', df['movieId'].nunique())\nprint('Number of Unique Users:', df['userId'].nunique())\n","00368166":"import plotly.express as px","c1c7d09d":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(12,8))\nfig = px.histogram(df, x= df['rating'])\nfig.show()","e68d1259":"filter_movies = df['movieId'].value_counts() > 3\nfilter_movies = filter_movies[filter_movies].index.tolist()","a9b0f23c":"filter_movies[0:5]","9c63a49b":"filter_users = df['userId'].value_counts() > 3\nfilter_users = filter_users[filter_users].index.tolist()","b018b65f":"filter_users[0:5]","a0198629":"print('Original Shape:',df.shape)\ndf = df[(df['movieId'].isin(filter_movies)) & (df['userId'].isin(filter_users))]\nprint('New Shape:', df.shape)","358c5768":"cols = ['userId', 'movieId', 'rating']\n\nreader = Reader(rating_scale=(0.5, 5))\ndata = Dataset.load_from_df(df[cols], reader)\n\ntrainset = data.build_full_trainset()\nantitest = trainset.build_anti_testset()\n","64e4c644":"#Creating the Model\nalgo = SVD(n_epochs=25, verbose= True)","08f4bb77":"#Training the Model\n\ncross_validate(algo, data, measures=['RMSE', 'MAE'], cv = 5, verbose=True)\n","918fda12":"predictions = algo.test(antitest)\npredictions[0]","3092c356":"from collections import defaultdict\ndef get_top_n(predictions, n):\n\n  top_n = defaultdict(list)\n  for uid, iid, _, est, _ in predictions:\n    top_n[uid].append((iid, est))\n\n  for uid, user_ratings in top_n.items():\n    user_ratings.sort(key = lambda x: x[1], reverse = True)\n    top_n[uid] = user_ratings[ :n]\n\n  return top_n\n  pass\n\ntop_n = get_top_n(predictions, n=3)","71b52dd5":"for uid, user_ratings in top_n.items():\n  print(uid, [iid for (iid, rating) in user_ratings])","ea7d393c":"###**Dimensionality Reduction**\n\nHere, we will filter out rarely rated movies, and user's rarely voting","edca95b0":"###**Exploratory Data Analysis**","c791efc5":"From above, you can see that we dont have any null values","fdba284d":"###**Make Predictions**","859ef7e6":"From above, we can see that more than 25K users rated movies as 4","5b7a8ccf":"####Remove rarely rated movies and rarely rating users","526d8f40":"#**Movie Recommendation System Using Collaborative Filtering**","2b107c26":"User_Id **610** should watch movies with IDs **1617**, **2329**, and **1223**","40743945":"###**Analyzing the dataset**","92b6c21c":"####Filter movies with less than 3 ratings","53faabcd":"###**Installing required libraries**","315e35d1":"###**Tasks to be performed**\n- Downloading the data set from Dropbox\n- Installing required libraries\n- Importing required libraries\n- Loading the dataset into a Pandas DataFrame\n- Analyzing the dataset\n- Exploratory Data Analysis (Using Plotly Express)","e34fe3fa":"###**Create Training and Test Sets**","45af445a":"[**Click Here!**](https:\/\/www.dropbox.com\/s\/llg91ednbv6gcu5\/ratings.csv) to download the dataset","82e1e0e6":"####Filter user's with less than 3 ratings","9f1aa31a":"###**Downloading the data set from Dropbox**\n\n","e987b2c4":"###**Training the model**","7cc282b7":"###**Importing required libraries**","fdbf1f41":"###**Loading the dataset into a Pandas DataFrame**"}}