{"cell_type":{"dc1ca0e2":"code","2b151087":"code","582746f9":"code","42924ece":"code","bab43e15":"code","bc792bda":"code","cead1c41":"code","69b7b240":"code","c9faede2":"code","e6ab7942":"code","e782cc17":"code","fe7002a7":"code","faf0e60d":"code","775376b2":"code","2ef0c289":"code","e021e5f5":"code","f746cba7":"code","2c38a339":"code","b8b1959d":"code","c5606f9b":"code","02c948d5":"code","2eb01f31":"code","d30485e1":"code","6fa128cf":"code","0000b7be":"code","eaccb360":"code","2e23a315":"code","62465203":"code","3f34c14e":"code","067a07c1":"code","e229b5ad":"code","af1572a7":"code","9c04236e":"code","f201545f":"code","990d6abe":"code","1c87abd3":"code","2e3ae520":"code","9ba9a52e":"code","ec8e5533":"code","663c7232":"code","4e148722":"code","6215b1c4":"code","cc1ff2b6":"code","24180385":"code","fdd8608f":"code","83f9beaa":"code","a9f9e0ff":"code","9371bdcc":"code","8c6e5170":"code","d48e1f0d":"markdown","f4b623ab":"markdown","47f4d07a":"markdown","ce78a259":"markdown","e8d110a1":"markdown","a25e1f17":"markdown"},"source":{"dc1ca0e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b151087":"train_path=\"\/kaggle\/input\/titanic\/train.csv\"\ngender_path=\"\/kaggle\/input\/titanic\/gender_submission.csv\"\ntest_path=\"\/kaggle\/input\/titanic\/test.csv\"","582746f9":"titanic= pd.read_csv(train_path,index_col=\"PassengerId\")\ntitanic.head()","42924ece":"titanic.columns","bab43e15":"titanic.describe().transpose()","bc792bda":"titanic.info()","cead1c41":"titanic.isnull().sum()","69b7b240":"titanic.count()","c9faede2":"duplicateRowsDF = titanic[titanic.duplicated()]\nduplicateRowsDF","e6ab7942":"titanic.Cabin.unique()","e782cc17":"len(titanic.Cabin.unique())","fe7002a7":"#C = Cherbourg, Q = Queenstown, S = Southampton\ntitanic.Embarked.unique()","faf0e60d":"titanic.Embarked.value_counts()","775376b2":"titanic.Pclass.value_counts().sort_values()","2ef0c289":"titanic.groupby([\"Pclass\",\"Survived\"]).Survived.count()","e021e5f5":"titanic.Sex.value_counts().sort_values()","f746cba7":"titanic.groupby([\"Sex\",\"Survived\"]).Survived.count()","2c38a339":"titanic.groupby([\"Pclass\",\"Sex\",\"Survived\"]).Survived.count()\n#0 = No, 1 = Yes","b8b1959d":"titanic.columns","c5606f9b":"titanic.drop(columns=[\"Name\",\"Ticket\",\"Cabin\"],inplace=True)","02c948d5":"titanic.columns","2eb01f31":"titanic.isnull().sum()","d30485e1":"titanic.loc[ titanic.Embarked.isnull() ] ","6fa128cf":"titanic=titanic.drop(titanic.loc[titanic.Embarked.isnull()].index.tolist())\ntitanic.isnull().sum()","0000b7be":"titanic.count()","eaccb360":"age = 11\nchildren = titanic.Age.loc[titanic.Age < age].count()\nprint(children)","2e23a315":"adults = titanic.loc[titanic.Age >= age][\"Survived\"]","62465203":"\nchildren = titanic.loc[(titanic.Age < age) & (titanic.Survived==1)].Age.count()\nchildren\n","3f34c14e":"children2 = titanic.loc[(titanic.Age < age) & (titanic.Survived==0)].Age.count()\nchildren2","067a07c1":"\nmean_age = round(titanic.loc[titanic.Age.notnull(), 'Age'].mean())\ntitanic.loc[titanic.Age.isnull(), 'Age'] = mean_age\n","e229b5ad":"titanic.isnull().sum()","af1572a7":"from sklearn.preprocessing import LabelEncoder  \nle = LabelEncoder()   \ntitanic['Sex']= le.fit_transform(titanic['Sex']) \ntitanic['Embarked']= le.fit_transform(titanic['Embarked']) \ntitanic.head()","9c04236e":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import CategoricalNB\nfrom sklearn.metrics import accuracy_score, classification_report,f1_score\n\nfeatures = [\"Pclass\", \"Sex\", \"Age\",\"Embarked\"]\n#features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Age\",\"Embarked\",\"Fare\"]\n\ny = titanic.Survived\nX = titanic[features]\n\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 1)\n\nRFC = RandomForestClassifier(random_state=2)\nRFC.fit(train_X, train_y)\npred_val=RFC.predict(val_X)\nacc=accuracy_score(y_true=val_y, y_pred=pred_val)\nf1_score=f1_score(y_true=val_y, y_pred=pred_val)\nprint(\"accuracy_score: {} ,f1_score: {}\".format(acc,f1_score))\n\n\nGNB = GaussianNB()\nGNB.fit(train_X, train_y)\npred_val=GNB.predict(val_X)\nacc=accuracy_score(y_true=val_y, y_pred=pred_val)\n\nprint(\"Gaccuracy_score: {}\".format(acc))\n","f201545f":"from xgboost import XGBRFClassifier\nmy_model = XGBRFClassifier(n_estimators=1,learning_rate=0.1)\nmy_model.fit(train_X, train_y, early_stopping_rounds=10, eval_set=[(val_X, val_y)],verbose=False)\n\npredictions = my_model.predict(val_X)\nacc=accuracy_score(y_true=val_y, y_pred=predictions)\n\nprint(\"Gaccuracy_score: {}\".format(acc))\n","990d6abe":"results = {}\nfor i in range(1,2001,100):\n    my_model = XGBRFClassifier(n_estimators=i)\n    my_model.fit(train_X, train_y, early_stopping_rounds=10, eval_set=[(val_X, val_y)],verbose=False)\n\n    predictions = my_model.predict(val_X)\n    acc=accuracy_score(y_true=val_y, y_pred=predictions)\n    results[i] = acc\n    print(\"Gaccuracy_score: {}\".format(acc))","1c87abd3":"results = {}\nfor i in range(1,101,5):\n    my_model = XGBRFClassifier(n_estimators=1,learning_rate=.055)\n    my_model.fit(train_X, train_y, early_stopping_rounds=i, eval_set=[(val_X, val_y)],verbose=False)\n    predictions = my_model.predict(val_X)\n    acc=accuracy_score(y_true=val_y, y_pred=predictions)\n    results[i] = acc\n    print(\"Gaccuracy_score: {}\".format(acc))","2e3ae520":"results = {}\nfor i in range(100,2001,10):\n    my_model = XGBRFClassifier(n_estimators=i,learning_rate=.01)\n    my_model.fit(train_X, train_y, early_stopping_rounds=10, eval_set=[(val_X, val_y)],verbose=False)\n    predictions = my_model.predict(val_X)\n    acc=accuracy_score(y_true=val_y, y_pred=predictions)\n    results[i] = acc\n    print(\"Gaccuracy_score: {}\".format(acc))","9ba9a52e":"print(max(results, key=results.get))\nprint(results[max(results, key=results.get)])\nbest_para = max(results, key=results.get)","ec8e5533":"results = {}\nfor i in range(100,1001,100):\n    RF = RandomForestClassifier(random_state=i)\n    RF.fit(train_X, train_y)\n    pred_val=RF.predict(val_X)\n    acc=accuracy_score(y_true=val_y, y_pred=pred_val)\n    results[i] = acc\n    print(\"accuracy_score {}: {}\".format(i,acc))\n","663c7232":"print(max(results, key=results.get))\nprint(results[max(results, key=results.get)])\nbest_para = max(results, key=results.get)","4e148722":"results = {}\nfor i in range(1,20,1):\n    RF = RandomForestClassifier(max_depth=i)\n    RF.fit(train_X, train_y)\n    pred_val=RF.predict(val_X)\n    acc=accuracy_score(y_true=val_y, y_pred=pred_val)\n    results[i] = acc\n    print(\"accuracy_score {}: {} \".format(i,acc))","6215b1c4":"print(max(results, key=results.get))\nprint(results[max(results, key=results.get)])\nbest_para = max(results, key=results.get)","cc1ff2b6":"final_model = RandomForestClassifier(max_depth=3)\nfinal_model.fit(train_X, train_y)\npred_val=final_model.predict(val_X)\nacc=accuracy_score(y_true=val_y, y_pred=pred_val)\nprint(\"accuracy_score: {} \".format(acc))","24180385":"final_model = XGBRFClassifier(n_estimators=1,learning_rate=.055)\nfinal_model.fit(train_X, train_y, early_stopping_rounds=i, eval_set=[(val_X, val_y)],verbose=False)\npredictions = final_model.predict(val_X)\nacc=accuracy_score(y_true=val_y, y_pred=predictions)\nprint(\"Gaccuracy_score: {}\".format(acc))","fdd8608f":"test_data = pd.read_csv(test_path)\ntest_data.drop(columns=[\"Name\",\"Ticket\",\"Cabin\"],inplace=True)\ntest_data.head()","83f9beaa":"test_data.isnull().sum()","a9f9e0ff":"le = LabelEncoder() \n  \ntest_data['Sex']= le.fit_transform(test_data['Sex']) \ntest_data['Embarked']= le.fit_transform(test_data['Embarked']) \nmean_age = round(test_data.loc[test_data.Age.notnull(), 'Age'].mean())\ntest_data.loc[test_data.Age.isnull(), 'Age'] = mean_age\n\nmean_Fare = round(test_data.loc[test_data.Fare.notnull(), 'Fare'].mean())\ntest_data.loc[test_data.Fare.isnull(), 'Fare'] = mean_Fare","9371bdcc":"test_data.isnull().sum()","8c6e5170":"test_X = test_data[features]\ntest_preds = final_model.predict(test_X)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId,'Survived': test_preds})\noutput.to_csv('submission.csv', index=False)","d48e1f0d":"## Load Data","f4b623ab":"## Label Encoder ","47f4d07a":"## Test Data","ce78a259":"## Preprocess the data ","e8d110a1":"## Build Model ","a25e1f17":"## Explore the data "}}