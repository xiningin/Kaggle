{"cell_type":{"8dfbc124":"code","c00bc374":"code","1ccdd5f6":"code","6550ce6b":"code","91f8fa36":"code","9ac2bd9a":"code","71abb501":"code","eb8a3964":"code","342b166d":"code","90108117":"code","94af4435":"code","4ee55913":"code","0a27ede0":"code","97818655":"code","976ce703":"code","ade6e49e":"code","4d942c5f":"code","403446f1":"code","fcd80672":"code","dcecad9b":"code","be020c74":"code","727957dd":"code","cd324d16":"code","4e9e1cfb":"code","49251d72":"code","809b8e84":"code","6bbc74ee":"code","c29da85c":"code","b2511ad7":"code","c09bd215":"code","3c2dc8e6":"markdown","124b482e":"markdown","a47c9da8":"markdown","c701a5ec":"markdown","8efb3b4e":"markdown","0ea20fbf":"markdown","e49a428b":"markdown","8f5bf84a":"markdown","ef66a5dd":"markdown","f7506d74":"markdown","01a24f75":"markdown","2cedf846":"markdown","c9bcf25f":"markdown","51296385":"markdown","92939d3b":"markdown","e1bcc4ff":"markdown","fc7e3b56":"markdown","c4822f62":"markdown","2bd551cb":"markdown"},"source":{"8dfbc124":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns\nsns.set()\n%matplotlib inline\nprint('Setup Completed ^^')","c00bc374":"data = pd.read_csv('..\/input\/abalone-dataset\/abalone.csv')\ndata.head().T","1ccdd5f6":"data.shape","6550ce6b":"data.dtypes","91f8fa36":"data.Sex.value_counts(normalize=True)","9ac2bd9a":"# Number of Rings distributions : \ndata.Rings.value_counts().sort_index()","71abb501":"# seaborn styles\nsns.set_context('notebook')\nsns.set_style('white')\n\n# custom colors\nmale = sns.color_palette()[1]\nfemale = sns.color_palette()[4]\ninfant = sns.color_palette()[8]\n# set bins for histogram\nbin_range = np.array(range(1, 31))\n\n# plot histogram of quality counts for red and white wines\nax = plt.axes()\nfor color, plot_color in zip(['M', 'F', 'I'], [male, female, infant]):\n    q_data = data.loc[data.Sex==color, 'Rings']\n    q_data.hist(bins=bin_range, \n                alpha=0.5, ax=ax, \n                color=plot_color, label=color)\n    \n\nax.legend()\nax.set(xlabel='Number of Rings', ylabel='Frequency')\n\n# force tick labels to be in middle of region\nax.set_xlim(3,30)\nax.set_xticks(bin_range+0.5)\nax.set_xticklabels(bin_range);\nax.grid('on')","eb8a3964":"sns.set_style('white')\nsns.countplot(data=data, y='Sex')","342b166d":"sns.barplot(x=data['Sex'], y=data['Rings'])","90108117":"float_columns = [x for x in data.columns if x not in ['Sex', 'Rings']]\n\n# correlation matrix : \ncorr_mat = data[float_columns].corr()\n# Strip out the diagnoal values for next step:\nfor x in range(len(float_columns)):\n    corr_mat.iloc[x,x] = 0.0\n    \ncorr_mat   ","94af4435":"sns.heatmap(data=corr_mat,annot=True)","4ee55913":"# pairwise maximal correlations: \ncorr_mat.abs().idxmax()","0a27ede0":"skew_columns = (data[float_columns].skew().sort_values(ascending=False))\nskew_columns = skew_columns.loc[skew_columns > 0.75]\nskew_columns","97818655":"for col in skew_columns.index.tolist():\n    data[col] = np.log1p(data[col])","976ce703":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\ndata[float_columns] = sc.fit_transform(data[float_columns])\ndata.head()","ade6e49e":"sns.set_context('notebook')\nsns.pairplot(data[float_columns])","4d942c5f":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=3, random_state=42)\nkmeans = kmeans.fit(data[float_columns])","403446f1":"data['kmeans'] = kmeans.predict(data[float_columns])","fcd80672":"(data[['Sex', 'kmeans']].groupby(['kmeans','Sex']).size().to_frame().rename(columns={0: 'number'}))","dcecad9b":"# create and fit a range of models: \nkm_list = list()\nfor clust in range(1, 21):\n    km = KMeans(n_clusters=clust, random_state=42)\n    km = km.fit(data[float_columns])\n    km_list.append(pd.Series({'clusters': clust,\n                             'inertia':km.inertia_,\n                             'model':km}))","be020c74":"plot_data = (pd.concat(km_list, axis=1)\n             .T\n             [['clusters','inertia']]\n             .set_index('clusters'))\n\nax = plot_data.plot(marker='o', ls='-', color='purple')\nax.set_xticks(range(0, 21, 2))\nax.set_xlim(0,21)\nax.set(xlabel='Cluster', ylabel='Inertia');","727957dd":"from sklearn.cluster import AgglomerativeClustering\nag = AgglomerativeClustering(n_clusters=3, linkage='ward', compute_full_tree=True)\nag = ag.fit(data[float_columns])\ndata['agglom'] = ag.fit_predict(data[float_columns])","cd324d16":"data[['Sex', 'agglom', 'kmeans']].groupby(['Sex', 'agglom']).size().to_frame().rename(columns={0:'number'})","4e9e1cfb":"\n(data[['Sex','agglom','kmeans']]\n .groupby(['Sex','agglom','kmeans'])\n .size()\n .to_frame()\n .rename(columns={0:'number'}))","49251d72":"data.describe(include='object').T","809b8e84":"data.describe().T","6bbc74ee":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, roc_auc_score\nfrom sklearn.model_selection import StratifiedShuffleSplit\n","c29da85c":"y = (data['Rings'] > 9).astype(int)\nX_with_kmeans = data.drop(['agglom', 'Sex', 'Rings'], axis=1)\nX_without_kmeans = X_with_kmeans.drop('kmeans', axis=1)","b2511ad7":"sss = StratifiedShuffleSplit(n_splits=10, random_state=6535)\n","c09bd215":"def get_avg_roc_10splits(estimator, X, y):\n    roc_auc_list = []\n    for train_index, test_index in sss.split(X, y):\n        X_train, X_test = X.loc[train_index], X.iloc[test_index]\n        y_train, y_test = y.loc[train_index], y.iloc[test_index]\n        estimator.fit(X_train, y_train)\n        y_predictor = estimator.predict(X_test)\n        y_scored = estimator.predict_proba(X_test)[:, 1]\n        roc_auc_list.append(roc_auc_score(y_test, y_scored))\n        \n    return np.mean(roc_auc_list)\n\nestimator = RandomForestClassifier()\nroc_with_kmeans = get_avg_roc_10splits(estimator, X_with_kmeans, y)\nroc_without_kmeans = get_avg_roc_10splits(estimator, X_without_kmeans, y)\nprint(\"Without kmeans cluster as input to Random Forest, roc-auc is \\\"{0}\\\"\".format(roc_without_kmeans))\nprint(\"Using kmeans cluster as input to Random Forest, roc-auc is \\\"{0}\\\"\".format(roc_with_kmeans))\n        ","3c2dc8e6":"\n* fit an agglomerative clustering model with 3 clusters.\n* compare the results to those obtained by kmeans with regrad to the number of rings among the sex observations (male, female or infants).","124b482e":"* first for Agglomerative clustering: ","a47c9da8":"**Create Split method:-**","c701a5ec":"# **Data Represention:-**","8efb3b4e":"# **Explore Clustering as form of feature Engineering:-**","0ea20fbf":"**Perform log transformation on skew columns:**","e49a428b":"# **Correlation and Relationship:-**","8f5bf84a":"# **Examin Kmeans for Clustering:-**","ef66a5dd":"**Examination of skew values:-**","f7506d74":"**Split up the dataset and initaite RandomForest Calssifier:-**","01a24f75":"# **Agglomreative Cluserting:-**","2cedf846":"**Examine the Correlation and skew of the relevant variables excepting the Sex variables.**","c9bcf25f":"**Plot number of clusters VS inertia:-**","51296385":"# **About the Notebook:-**\n* Applying Kmeans for clustering and Agglomreative Clustering to distinguish between Abalone gender and decide wheather (Male, female, Infants) in regrad with the Number of Rings that appears on its surface membrane.\n\n* Using Kmeans as Features Engineering methodology.\n\n* Create RandomforestCalssifier with kmeans as feature and without Kmeans to test ROC-AUC score.\n","92939d3b":"**Set our features:**","e1bcc4ff":"**Pairplot for the transformed and Scaled features:-**","fc7e3b56":"* create a binary target varibale y, defining if the number of Rings is greater than 9 or Not\n\n* create a variable called x_with_kmeans from data,by dropping the columns \"Rings\",\"Sex\" and \"Agglom\" from the dataset.Create x_without_kmeans from that by dropping \"Kmeans\".\n\n* For both datasets, using StratifiedShuffleSplit with 10 splits and fit 10 Random forest Classifiersand find the mean of ROC-AUC scores from these 10 Classifiers.\n\n* Compare the average of ROC-AUC scores for both models, the one using the KMeans cluster as a feature and the one that doesn't use it.","c4822f62":"# **Comparing Clustering results:**","2bd551cb":"# **Perform Feature Scaling:-**"}}