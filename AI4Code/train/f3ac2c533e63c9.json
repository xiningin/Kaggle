{"cell_type":{"ec75415e":"code","336174f9":"code","095b3047":"code","10179fd3":"code","1bcd77ec":"code","ba5b3617":"code","fe4aa33f":"code","ee7ca0a8":"code","548c422d":"code","3f219a69":"code","0b38a8ca":"code","9d0f3f49":"code","0bad1172":"code","16f56ea7":"code","d0621527":"code","73d49343":"code","120db636":"code","4f013390":"code","3f586c61":"code","dce88cc0":"code","02ada30f":"code","efda610b":"code","a5d30105":"code","49c13c2d":"code","b73efbf1":"code","8bc869e7":"code","26c5d21a":"code","20b3f930":"code","f3b8f2da":"code","58151f74":"code","b322cf18":"code","86e6c0f8":"code","7b606068":"code","8d4254c1":"code","6f29dbb0":"code","3afb9cc5":"code","fea419c1":"code","da478a7b":"code","d9691945":"code","72bafee4":"code","71bd8838":"code","b4df3bea":"code","b94ea86b":"code","d424bb44":"code","9f4fbc15":"code","221cd70c":"code","82966fb1":"code","e7395d3e":"code","8491e96b":"code","15bc03d4":"code","53fc598d":"code","5d7304ab":"code","f959093e":"code","1a295811":"code","f852b5fe":"code","a91b4a48":"code","e9e52b8f":"markdown","1121c529":"markdown","fc60d0bb":"markdown","69bce54c":"markdown","be69c19a":"markdown","b6ea97e1":"markdown","1e871922":"markdown","ccfdc77a":"markdown","fb28639e":"markdown","3d3083f0":"markdown","e8ad2e89":"markdown","0933acbc":"markdown","74302c4f":"markdown"},"source":{"ec75415e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","336174f9":"# Import libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom surprise import Dataset\nfrom surprise import Reader\nfrom surprise import SVD, SlopeOne, CoClustering, KNNBasic, KNNWithMeans, KNNWithZScore\nfrom surprise.model_selection import cross_validate\nimport difflib\nimport random","095b3047":"# We will be using the 'rating_final.csv' file to build the recommender system\nuser_rating_file_path = \"..\/input\/restaurant-data-with-consumer-ratings\/rating_final.csv\"\ngeolocation_file_path = '..\/input\/restaurant-data-with-consumer-ratings\/geoplaces2.csv'\n\n# Load the data\ndata = pd.read_csv(user_rating_file_path)\nlocation_data = pd.read_csv(geolocation_file_path)","10179fd3":"# Check for null values\ndata.isnull().sum()","1bcd77ec":"location_data.isnull().sum()","ba5b3617":"data = pd.merge(data, location_data[['placeID', 'name']], on='placeID')\ndata = data[['userID', 'placeID' ,'name', 'rating', 'food_rating', 'service_rating']]","fe4aa33f":"# load the first 5 rows\ndata.head()","ee7ca0a8":"# Visualise the distribution of rating, food_rating and service_rating features\n\ncolumns_to_plot = ['rating', 'food_rating', 'service_rating']\n\n# Create a figure and axis for subplots\n\nplt.figure(figsize=(15, 10))\nfor i, col in enumerate(columns_to_plot):\n    plt.subplot(2, 2, i+1)\n    sns.countplot(data=data, x=col)\n    plt.xlabel(col)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Frequency Distribution of {}\".format(col))    \nplt.show()","548c422d":"# plot the distribution of rating, food_rating, service_rating using boxplots\nplt.figure(figsize=(12, 12))\nfor i, col in enumerate(columns_to_plot):\n    plt.subplot(2, 2, i+1)\n    sns.boxplot(data=data, x=col)\n    plt.xlabel(col)\n    plt.title(\"Box Plot of {}\".format(col))    \nplt.show()","3f219a69":"data.head()\n\n'''\ngroup the data by placeID and finding out the following:\n\n1. Top 10 most visited restaurants (occuring the most in the data).\n2. Top 10 least visited restaurants (occuring the least in the data).\n3. Top 10 most rated restaurants in terms of food and service.\n4. Top 10 restaurants having highest average ratings in terms of food and service.\n5. Top 10 restaurants having lowest average ratings in terms of food and service.\n'''\n\n# group the data by placeID\nplaceID_group = data.groupby('placeID')\nplaceID_grouped_data = placeID_group.count().sort_values(by='rating', ascending=False)","0b38a8ca":"# 1. Top 10 most visited restaurants\nplaceID_grouped_data.iloc[ : 10]","9d0f3f49":"# Plot the above data\nplt.style.use('seaborn')\nplaceID_grouped_data.iloc[ : 10]['rating'].plot(kind='bar')\nplt.xlabel(\"Restaurant ID\")\nplt.ylabel(\"Frequency\")\nplt.xticks(rotation=-45)\n#plt.grid()\nplt.show()","0bad1172":"# Top 10 restaurants having highest average overall ratings.\nplaceID_ratings_data = data.groupby('placeID').mean().sort_values(by='rating', ascending=False)\nplaceID_ratings_data.iloc[ : 10]","16f56ea7":"# Plot the above data\nplt.style.use('seaborn')\nplaceID_ratings_data.iloc[ : 10].plot(kind='bar', figsize=(12,8))\nplt.xticks(rotation=-45)\nplt.grid()\nplt.show()","d0621527":"# Restaurant: 134986 has the highest average overall rating, food_rating and service_rating.\nrest_id = 134986\nprint(\"Restaurant with highest average overall rating, food_rating and service_rating is {}\".format(data[data['placeID'] == rest_id]['name'].iloc[0]))","73d49343":"# Top 10 restaurants having highest average food_rating ratings.\nplaceID_food_rating_data = data.groupby('placeID').mean().sort_values(by='food_rating', ascending=False)\nplaceID_food_rating_data.iloc[ : 10]","120db636":"# Plot the above data\nplt.style.use('seaborn')\nplaceID_food_rating_data['food_rating'].iloc[ : 10].plot(kind='bar')\nplt.ylabel(\"Food Ratings\")\nplt.xticks(rotation=-45)\nplt.show()","4f013390":"placeID_food_rating_data.iloc[ : 10].plot(kind='bar', figsize=(12,8))\nplt.xticks(rotation=-45)\nplt.show()","3f586c61":"print(\"Restaurant {} has an average food_rating of 2 which is max but it has low overal ratings and service_ratings.\".format(data[data['placeID'] == 132667]['name'].iloc[0]))","dce88cc0":"# Top 10 restaurants having highest average service_rating ratings.\nplaceID_service_rating_data = data.groupby('placeID').mean().sort_values(by='service_rating', ascending=False)\nplaceID_service_rating_data.iloc[ : 10]","02ada30f":"# Plot the above data\nplt.style.use('seaborn')\nplaceID_service_rating_data['service_rating'].iloc[ : 10].plot(kind='bar')\nplt.ylabel(\"Service Ratings\")\nplt.xticks(rotation=-45)\nplt.show()","efda610b":"placeID_service_rating_data.iloc[ : 10].plot(kind='bar', figsize=(12,8))\nplt.xticks(rotation=-45)\nplt.show()","a5d30105":"# Top 10 least visited restaurants (occuring the least in the data).\nplaceID_rating_data = data.groupby('placeID').count().sort_values(by='rating')","49c13c2d":"placeID_rating_data.iloc[ : 10]","b73efbf1":"# Plot the above data\nplaceID_rating_data['rating'].iloc[ : 10].plot(kind='bar')\nplt.xticks(rotation=-45)\nplt.show()","8bc869e7":"# Top 10 restaurants having lowest average overall ratings.\nplaceID_ratings_data = data.groupby('placeID').mean().sort_values(by='rating', ascending=True)\nplaceID_ratings_data.iloc[ : 10]","26c5d21a":"# Plot the above data\nplaceID_ratings_data['rating'].iloc[ : 10].plot(kind='bar')\nplt.xticks(rotation=-45)\nplt.show()","20b3f930":"# Plot the above data\nplaceID_ratings_data.iloc[ : 10].plot(kind='bar', figsize=(12,8))\nplt.xticks(rotation=-45)\nplt.show()","f3b8f2da":"# Top 10 restaurants having lowest average food_rating \nplaceID_service_rating_data = data.groupby('placeID').mean().sort_values(by='food_rating', ascending=True)\nplaceID_service_rating_data.iloc[ : 10]","58151f74":"placeID_service_rating_data.iloc[ : 10].plot(kind='bar', figsize=(12, 8))\nplt.xticks(rotation=-45)\nplt.show()","b322cf18":"# Top 10 restaurants having lowest average service_rating ratings.\nplaceID_service_rating_data = data.groupby('placeID').mean().sort_values(by='service_rating', ascending=True)\nplaceID_service_rating_data.iloc[ : 10]","86e6c0f8":"# Top 10 restaurants having lowest average service_rating ratings along with food_rating, service_rating\nplaceID_service_rating_data.iloc[ : 10].plot(kind='bar', figsize=(12, 8))\nplt.xticks(rotation=-45)\nplt.show()","7b606068":"data.groupby('userID').count().sort_values(by='rating', ascending=False).iloc[ : 10]['rating'].plot(kind='bar', figsize=(10,6))\nplt.xlabel(\"User ID\")\nplt.ylabel(\"Frequency of Ratings\")\nplt.xticks(rotation=-45)\nplt.yticks(np.arange(0,19,1))\nplt.show()","8d4254c1":"data[['rating', 'food_rating', 'service_rating']].describe()","6f29dbb0":"# Provide a score to each restaurant based on the count of their occurrence, i.e the place that occurs the most is more popular hence, scored high.\nplaceID_count = data.groupby('placeID').count()['userID'].to_dict()\ndata['placeScore'] = data['placeID'].map(placeID_count)","3afb9cc5":"# generate top 10 recommendations\ntop_10_recommendations = pd.DataFrame(data['placeID'].value_counts()).reset_index().rename(columns = {'index' : 'placeID', 'placeID' : 'placeScore'}).iloc[ : 10]\ntop_10_recommendations = pd.merge(data[['placeID','name']], top_10_recommendations, on='placeID', how='right').drop_duplicates()","fea419c1":"# Top 10 Recommendations\ntop_10_recommendations","da478a7b":"# drop the placeScore\ndata.drop('placeScore', axis=1, inplace=True)","d9691945":"data.head()","72bafee4":"# Create a reader object\nreader = Reader(rating_scale=(0,2)) # The Reader class is used to parse a file containing ratings.\nrating_data = Dataset.load_from_df(data[['userID', 'placeID', 'rating']], reader)","71bd8838":"# using Singular Value Decomposition (Matrix Factorisation) to build the recommender system\nsvd = SVD(verbose=True, n_epochs=100)\nsvd_results = cross_validate(svd, rating_data, measures=['RMSE', 'MAE'], cv=3, verbose=True)","b4df3bea":"svd_results","b94ea86b":"# SlopOne results\nslope_one = SlopeOne()\nslope_one_results = cross_validate(slope_one, rating_data, measures=['RMSE', 'MAE'], cv=3, verbose=True)","d424bb44":"slope_one_results","9f4fbc15":"# CoClustering\nco_clustering = CoClustering(n_epochs=100, verbose=True, random_state=0)\nco_clustering_results = cross_validate(co_clustering, rating_data, measures=['RMSE', 'MAE'], cv=3, verbose=True)","221cd70c":"co_clustering_results","82966fb1":"# KNNBasic\nknn_basic = KNNBasic(k=50)\nknn_basic_results = cross_validate(knn_basic, rating_data, measures=['RMSE', 'MAE'], cv=3, verbose=True)","e7395d3e":"#KNNWithMeans\nknn_means = KNNWithMeans(k=100)\nknn_means_results = cross_validate(knn_means, rating_data, measures=['RMSE', 'MAE'], cv=3, verbose=True)","8491e96b":"knn_means_results","15bc03d4":"#KNNWithZScore\nknn_zscore = KNNWithZScore(k=100)\nknn_zscore_results = cross_validate(knn_zscore, rating_data, measures=['RMSE', 'MAE'], cv=3, verbose=True)","53fc598d":"np.array((svd_results['test_rmse'], \n co_clustering_results['test_rmse'], \n slope_one_results['test_rmse'],\n knn_basic_results['test_rmse'], \n knn_means_results['test_rmse'], \n knn_zscore_results['test_rmse']))","5d7304ab":"# Concat the results of all the models\nresults = np.array((svd_results['test_rmse'], \n                    co_clustering_results['test_rmse'], \n                    slope_one_results['test_rmse'],\n                    knn_basic_results['test_rmse'], \n                    knn_means_results['test_rmse'], \n                    knn_zscore_results['test_rmse']))\n\nresult_df = pd.DataFrame(results, \n                         index=['SVD', 'CoClustering', 'SlopeOne', 'KNN_Basic', 'KNN_Means', 'KNN_ZScore'],\n                         columns=['RMSE_fold_1','RMSE_fold_2','RMSE_fold_3'])","f959093e":"# Compute the mean RMSE score\nresult_df['Mean_RMSE'] = result_df[['RMSE_fold_1', 'RMSE_fold_2', 'RMSE_fold_3']].mean(axis=1)","1a295811":"result_df.sort_values(by='Mean_RMSE')","f852b5fe":"# 1. Get the restaurant id from restaurant name\ndef get_rest_id(rest_name, data):\n    \n    '''Returns the Restaurant ID (placeID) given the restaurant Name.'''\n    \n    rest_names = list(data['name'].values)\n    \n    # Using difflib find the restaurants that are closest to the input and extract the corresponding placeID\n    \n    closest_names = difflib.get_close_matches(rest_name, rest_names)\n    rest_id = data[data['name'] == closest_names[0]]['placeID'].iloc[0]\n    \n    return rest_id\n\n# 2. Predict the rating for this restaurant for a given user (b\/w 0-2)\ndef predict_rating(user_id, rest_name, data, model=SVD):\n    \n    # extract the restaurant id from the restaurant name\n    rest_id = get_rest_id(rest_name, data)\n    #print(rest_id)\n    \n    # make predictions\n    estimated_ratings = model.predict(uid = user_id, iid = rest_id)\n    \n    return estimated_ratings.est\n\n# 3. Generate Recommendations for a given user\n\n'''\nIn this, we will take userID as the input and output the names of all the restaurants for which the given user is most likely to\ngive a rating above a certain threshold rating (1.5 in this case).\n'''\ndef recommend_restaurants(user_id, data=data, model=svd, threshold=1.5):\n    \n    # store the recommended restaurants along with the predicted ratings given by the user in a dictionary\n    recommended_restaurants = {}\n    \n    # Find all the unique restaurant names\n    unique_rest_names = list(np.unique(data['name'].values))\n    \n    # Shuffle the restaurant name list\n    random.shuffle(unique_rest_names)\n    \n    # iterate over the list and generate ratings(predictions) for each restaurant and return only those which have a rating > threshold (1.5)\n    for rest_name in unique_rest_names:\n        \n        # generate predictions\n        #print(rest_name)\n        rating = predict_rating(user_id=user_id, rest_name=rest_name, data=data, model=svd)\n        \n        # check if rating > threshold\n        if rating > threshold:\n            \n            recommended_restaurants[rest_name] = np.round(rating,2)\n    \n    print(\"Generating Restaurant Recommendations for User ID {} : \".format(user_id))\n    \n    restaurant_names = np.array(list(recommended_restaurants.keys())).reshape(-1,1)\n    restaurant_ratings = np.array(list(recommended_restaurants.values())).reshape(-1,1)\n    \n    results = np.concatenate((restaurant_names, restaurant_ratings), axis=1)\n    results_df = pd.DataFrame(results, columns=['Restaurants', 'Rating (0-2)']).sort_values(by='Rating (0-2)', ascending=False)\n    \n    return results_df.reset_index().drop('index', axis=1)","a91b4a48":"# Randomly pick up a userID using np.random.choice\nrandom_user_id = np.random.choice(list(np.unique(data['userID'].values)))\n\n# Generate Recommendations for the user ID\nrecommend_restaurants(user_id = random_user_id)","e9e52b8f":"**SVD performs the best amongst all.**","1121c529":"**1. Popularity Based Recommender System:**\n\nIt is a very fundamental type of recommender system which gives recommendations based on the popularity of the product. For example, the most popular product will be recommended first.","fc60d0bb":"**Restaurant: 134986 i.e Restaurant Las Mananitas has the highest average overall rating, food_rating and service_rating.**","69bce54c":"# Exploratory Data Analysis","be69c19a":"**Next plot top 10 userIDs i.e users which occur the most**","b6ea97e1":"**Restaurant 132667 (little pizza Emilio Portes Gil) has an average food_rating of 2 which is max but it has low overal ratings and service_ratings.**","1e871922":"**The notebook contains the following:**\n1. Exploratory Data Analysis (EDA)\n2. Popularity Based Recommendation System\n3. Collaborativ-Filtering Recommendation System, using the Surprise Library.\n\n**Please do upvote, if you like the notebook :)**","ccfdc77a":"# Recommender Sytem","fb28639e":"**Restaurant IDs 135011, 132668, 134975 have the lowest occurences in the data.**","3d3083f0":"**2. Collaborative-Filtering:**\n\n\nIn general, collaborative filtering is a process of filtering information using techniques that involve multiple agents, viewpoint, data_sources etc. Specific to recommender systems, collaborative filtering is a technique to generate predictions about the interests\/preferences of a user for a product based on the interests\/preferences of other similar users.\n\nThe underlying assumption behind this concept is that if a person A has similar opinion as of a person B for a product, then it is very likely that A's opinion will be similar to that of B for some other product rather than that of a randomly chosen person.","e8ad2e89":"# Generate Recommendations using SVD","0933acbc":"# Building A Popularity-Based and Collaborative-Filtering Restaurant Recommender System\n","74302c4f":"**User U1106 and U1061 occur the most of the times in the dataset i.e 18 times.**"}}