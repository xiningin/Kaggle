{"cell_type":{"3336e09a":"code","0d641f54":"code","bf3cbedc":"code","c9d2ab6e":"code","1230b196":"code","7bcfbb49":"code","93d0b6ae":"code","eaec48fc":"markdown","c440333c":"markdown","a6cf5a60":"markdown","3ec13c56":"markdown","a3a1b952":"markdown","a21ba78e":"markdown","03c2780c":"markdown","27efa6aa":"markdown","8c364942":"markdown"},"source":{"3336e09a":"import numpy as np\nimport spacy\n\nsent1 = \"James buys milk at the grocery store.\"\nsent2 = \"Jane does not buy milk at stores much.\"\ntokens1 = [t.lower() for t in sent1.split(\" \")]\ntokens2 = [t.lower() for t in sent2.split(\" \")]","0d641f54":"set1 = set(tokens1)\nset2 = set(tokens2)\nset_union = set1.union(set2)\nset_intersection = set1.intersection(set2)\nprint(set_intersection)\nprint(set_union)","bf3cbedc":"print(\"Jaccard Coefficient: {}\".format( len(set_intersection) \/ len(set_union)))","c9d2ab6e":"# load a spacy model\nnlp_en = spacy.load('en')\n\ndef preprocess(sentence):\n    result = []\n    tokens = nlp_en(sentence)\n    for token in tokens:\n        # remove determiners and punctuation or spaces \n        if token.pos_ in ['PUNCT','SPACE', 'DET']:\n            continue\n        else:\n            # the lemma of pronouns is stored as '-PRON-' in spacy; we want the actual pronoun\n            if token.pos_ == 'PRON':\n                result.append(token.text.lower())\n            else:\n                result.append(token.lemma_)\n    return result\n\nprint('preprocessed sent1: {}'.format(preprocess(\"I like you\")))\nprint('preprocessed sent2: {}'.format(preprocess(sent2)))","1230b196":"def jaccard_coefficient(sent1, sent2, preprocessor=preprocess):\n    tokens1 = preprocessor(sent1)\n    tokens2 = preprocessor(sent2)\n    set1 = set(tokens1)\n    set2 = set(tokens2)\n    intersection = set1.intersection(set2)\n    union = set1.union(set2)\n    return len(intersection) \/ len(union)\n\nprint(jaccard_coefficient(sent1,sent2))","7bcfbb49":"examples = [\n    [\"Jane wants to spend more time with Bob\", \"Bob wants to spend more time with Jane\"],\n    [\"Apples are a healthy fruit\", \"People walk all around the neighborhood\"],\n    [\"Jane is a good person\", \"Jane is not a good person\"]\n]\n\nfor pair in examples:\n    print('S1: {}'.format(pair[0]))\n    print('S2: {}'.format(pair[1]))\n    print('Jaccard Coefficient: {}'.format(jaccard_coefficient(pair[0], pair[1])))","93d0b6ae":"def preprocess_v2(sentence):\n    result = []\n    tokens = nlp_en(sentence)\n    for token in tokens:\n        if token.pos_ in ['PUNCT','SPACE', 'DET', 'PART', 'ADP']:\n            continue\n        else:\n            # add 'neg_' prefix if a tokens dependency parse children are not\/no\/negation.\n            # currently we are only negating one word. We could negate up to the next punctation in the sentence\n            # or depending on the current POS tag or DEP parse we could design our own rules to include negation more\n            prefix = ''\n            if 'neg' in [t.dep_ for t in token.children]:\n                prefix = 'neg_'\n            label = ''\n            if token.pos_ == 'PROPN':\n                label = '{}{}'.format(prefix, token.text.lower())\n            else:\n                label = '{}{}'.format(prefix, token.lemma_)\n            result.append(label)\n            \n    return result\n\nfor pair in examples:\n    print('S1: {}'.format(pair[0]))\n    print('S2: {}'.format(pair[1]))\n    print('Jaccard Coefficient: {}'.format(jaccard_coefficient(pair[0], pair[1], preprocessor=preprocess_v2)))","eaec48fc":"### Testing\n\nLet's see how well it works for some example sentences.","c440333c":"# Quick Look 1: Jaccard Similarity Technique for Short Text Comparisons\n\nThis notebook explores the simple text similarity technique known as jaccard similarity which is useful in many IR and ML contexts.\n\n\n#### Goals\n1. Explore the Jaccard Coefficient.\n2. Explore simple preprocessing with Spacy.\n3. Take negation into account.\n","a6cf5a60":"Notice that not is being ignored let's fix that!","3ec13c56":"## Writing up the Jaccard Coefficient Function\n\nNow that we have a preprocessing pipeline let's write up the Jaccard Coefficient function.","a3a1b952":"**3. Divide the length of intersection set by the length of the union**","a21ba78e":"**2. Convert the tokens into sets and get their union and intersection.**","03c2780c":"### Ways to improve\n\nWe can make this better in many ways. \n\nWe can remove common words known as **stopwords** and **lemmatize** the words to get rid of a lot of noise.\n\nLets do that.","27efa6aa":"## The Jaccard Coefficient\n\nThis is probably the most well known coefficient. It is the intersection of two sets divided by the union of both sets.\n\n$$\nJ(A,B) = \\frac{\\lvert A \\cap B \\rvert}{\\lvert A \\cup B \\rvert}\n$$\n\nFor example, given the sentence *James buys milk at the grocery store* and *Jane does not buy milk* they would have a Jaccard Coefficient calculated as follows.\n\n**1. Break up the sentences into tokens (Tokenization)**","8c364942":"### C'est la fin\n\nThat's it for tutorial 0001.\n\nHopefully this showed you how to work with spacy a bit. In the next tutorial we will be looking at other coefficient functions and preprocessing techniques."}}