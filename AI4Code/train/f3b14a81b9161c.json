{"cell_type":{"9d22317b":"code","1f94fa3e":"code","42219e30":"code","b6e11182":"code","f6faf9cb":"code","126c50eb":"code","23569afb":"code","d6322664":"code","b34f041e":"code","88ff6b3d":"code","3ec409b3":"code","b4e190f6":"code","5d12d27e":"code","9d70abef":"code","ac2aa42b":"code","9fbb89d2":"code","0d41b59c":"code","09c51925":"code","9afd6092":"code","205724aa":"code","aaf1c7b8":"code","35b1edf6":"code","b31fa4d1":"code","f3626866":"code","cece2188":"code","0e2109ac":"code","c3526086":"code","b5515eaa":"code","252db463":"code","c859d7f0":"code","04eedc7c":"code","b76f8b38":"code","e9285684":"code","1d581199":"code","a85912db":"code","a3c040bc":"code","be129991":"code","aceced3c":"code","66c8e969":"code","2b4e1363":"code","9be74905":"code","164bb0a0":"code","e6ca1f37":"code","9018b580":"code","4e2da742":"code","f594c406":"code","e5cc41f4":"code","ca9459ff":"code","416c308e":"code","aaceec1d":"code","a21f2f25":"code","1b501bb6":"code","a265116d":"code","3811e89a":"code","33ed64d4":"code","b0611d61":"code","3f3a4ac2":"code","29b17890":"code","ab7a3158":"code","836ae209":"code","490295e0":"code","93f5f9a8":"code","24faf770":"code","2080061d":"markdown","f1255ced":"markdown","9e96fef2":"markdown","04eaf7f3":"markdown","21ed313e":"markdown","63777621":"markdown","f9bbc885":"markdown","63cb4652":"markdown","013a952a":"markdown","f0cdff01":"markdown","3a31ea25":"markdown","2e9edfd1":"markdown","bd3a467d":"markdown","e18296e3":"markdown","34cafd8f":"markdown","e152dfc1":"markdown","683269cd":"markdown","3897be1a":"markdown","66d61afd":"markdown","f9648bac":"markdown","b7c38fec":"markdown","50eddeae":"markdown","ebdc4923":"markdown","31e2ae3e":"markdown","984d0d76":"markdown","3698b941":"markdown","685c6c18":"markdown","9173fe18":"markdown","46cbe48c":"markdown","11da3e96":"markdown","e5624d59":"markdown"},"source":{"9d22317b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\ninit_notebook_mode(connected=True)  \nimport plotly.figure_factory as ff\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1f94fa3e":"circuits = pd.read_csv('..\/input\/circuits.csv', encoding= 'latin1')\ncircuits.head()","42219e30":"circuits= circuits.fillna(0)","b6e11182":"mpis = [{'lat': circuits['lat'],\n  'lon': circuits['lng'],\n  'marker': {'color': 'rgb(0,116,217)',\n   'line': {'color': 'rgb(40,40,40)', 'width': 0.5},\n   'size': 38.700000000000003,\n   'sizemode': 'diameter'},\n  'text': '0.387',\n  'type': 'scattergeo'},\n]\n\n\nlayout = go.Layout(\n    title = 'Circuits World Location',\n    showlegend = True,\n    geo = dict(\n            scope='world',\n            projection=dict( type = 'natural earth'),\n            showland = True,\n            landcolor = 'rgb(217, 217, 217)',\n            subunitwidth=1,\n            countrywidth=1,\n            subunitcolor=\"rgb(255, 255, 255)\",\n            countrycolor=\"rgb(255, 255, 255)\"\n        ),)\n\nfig =  go.Figure(layout=layout, data=mpis)\niplot( fig, validate=False)","f6faf9cb":"constructors= pd.read_csv('..\/input\/constructors.csv')\nconstructors.head()","126c50eb":"constructors1= constructors[['name','nationality']]","23569afb":" count= constructors1.groupby( [ \"nationality\",\"name\"] ).size().reset_index()","d6322664":"import random\ndef random_colors(number_of_colors):\n    color = [\"#\"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])\n                 for i in range(number_of_colors)]\n    return color","b34f041e":"constructors_count = constructors['nationality'].value_counts()\ndata = [go.Bar(\n    x = constructors_count.index,\n    y = constructors_count.values,\n    marker = dict(color = random_colors(25))\n)]\nlayout = dict(\n         title= \"Constructors by Country \"\n)\nfig = dict( data=data, layout=layout )\niplot( fig, validate=False )","88ff6b3d":"def calculateTextpositions(values):\n    total = sum(values)\n    # Do not display percentages < 5%\n    return map(lambda v: 'none' if float(v)\/total < 0.05 else 'auto', values)","3ec409b3":"constructors_count = constructors['nationality'].value_counts()\ntrace = go.Pie(labels=constructors_count.index, values=constructors_count.values, hole=0.6,textinfo= \"none\")\nlayout = go.Layout(\n    title='Percentage of Constructors by Nationality'\n)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig, filename=\"plotting-library\")","b4e190f6":"drivers= pd.read_csv('..\/input\/drivers.csv', encoding='latin1')\ndrivers.head()","5d12d27e":"import datetime\ndatetime.datetime.strptime","9d70abef":"import datetime as dt\ndrivers['dob'] = pd.to_datetime(drivers['dob'])\n\ninclude = drivers[drivers['dob'].dt.year < 1985]","ac2aa42b":"include.head()","9fbb89d2":"new = drivers[drivers['dob'].dt.year > 1985]","0d41b59c":"old_count = include['nationality'].value_counts()\ntrace = go.Pie(labels=old_count.index, values=old_count.values, hole=0.6,textinfo='none')\nlayout = go.Layout(\n    title='Old Drivers Percentage'\n)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig, filename=\"plotting-library\")","09c51925":"new_count = new['nationality'].value_counts()\ntrace = go.Pie(labels=new_count.index, values=new_count.values, hole=0.6,textinfo='none')\nlayout = go.Layout(\n    title='New Drivers Percentage'\n)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig, filename=\"plotting-library\")","9afd6092":"driver_standings= pd.read_csv('..\/input\/driverStandings.csv')\ndriver_standings.head()","205724aa":"driver_standings= driver_standings.fillna(0)","aaf1c7b8":"results= driver_standings.merge(drivers, how='left', on= 'driverId')","35b1edf6":"results.head()","b31fa4d1":"results_filtered = results[results['position'] == 1]","f3626866":"results_filtered","cece2188":"win_count = results_filtered['surname'].value_counts()\ntrace = go.Pie(labels=win_count.index, values=win_count.values, hole=0.6,textinfo='none')\nlayout = go.Layout(\n    title='Win Percentage by Drivers'\n)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig, filename=\"plotting-library\")","0e2109ac":"win_count = results_filtered['surname'].value_counts()\ndata = [go.Bar(\n    x = win_count.values,\n    y = win_count.index,\n    orientation = 'h',\n    marker = dict(color = random_colors(100))\n)]\nlayout = dict(\n         title= \"Wins by Drivers \"\n)\nfig = dict( data=data, layout=layout )\niplot( fig, validate=False )","c3526086":"races= pd.read_csv('..\/input\/races.csv')\nraces.head()","b5515eaa":"results2= results_filtered.merge(races, how='left', on= 'raceId')","252db463":"results2.head()","c859d7f0":"results3 = results2[['surname','year']]","04eedc7c":"year_win= results3.groupby('year')","b76f8b38":"year_win.head()","e9285684":"win_count = year_win['surname'].value_counts()\ntrace = go.Pie(labels=win_count.index, values=win_count.values, hole=0.6,textinfo='none')\nlayout = go.Layout(\n    title='Win Percentage by Drivers'\n)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig, filename=\"plotting-library\")","1d581199":"results4 = results2[['surname','name']]","a85912db":"win_count = results4['name'].value_counts()\ndata = [go.Bar(\n    x = win_count.index,\n    y = win_count.values,\n    \n    marker = dict(color = random_colors(100))\n)]\nlayout = dict(\n         title= \"No of Most Hosted Grand Prix \"\n)\nfig = dict( data=data, layout=layout )\niplot( fig, validate=False )","a3c040bc":"con_results= pd.read_csv('..\/input\/constructorResults.csv')\ncon_results.head()","be129991":"results5= constructors.merge(con_results, how='left', on= 'constructorId')","aceced3c":"results5","66c8e969":"sum_points= results5.groupby('name').sum()","2b4e1363":"sum_points","9be74905":"name_sort= results5.sort_values('name')","164bb0a0":"name_sort.head()","e6ca1f37":"name_sort= results5.sort_values('name').drop_duplicates('constructorId')","9018b580":"name_sort","4e2da742":"data = [go.Bar(\n    x = name_sort.name,\n    y = sum_points.points,\n    marker = dict(color = random_colors(100))\n)]\nlayout = dict(\n         title= \"Sum of Most Point Won by different constructors \"\n)\nfig = dict( data=data, layout=layout )\niplot( fig, validate=False )","f594c406":"laptimes= pd.read_csv('..\/input\/lapTimes.csv')\nlaptimes.head()","e5cc41f4":"laptimes1= laptimes.merge(drivers, how='left', on= 'driverId')","ca9459ff":"laptimes1.head()","416c308e":"laptimes1= laptimes1[['lap','position','surname','time','milliseconds']]","aaceec1d":"import seaborn as sns\ng = sns.pairplot(laptimes1, hue='surname')","a21f2f25":"race_results= pd.read_csv('..\/input\/results.csv')\nrace_results.head()","1b501bb6":"status= pd.read_csv('..\/input\/status.csv')\nstatus.head()","a265116d":"new_results= race_results.merge(status, how='left', on= 'statusId')","3811e89a":"new_results.head()","33ed64d4":"win_count = new_results['status'].value_counts()\ntrace = go.Pie(labels=win_count.index, values=win_count.values, hole=0.6,textinfo='none')\nlayout = go.Layout(\n    title='Drive Status Percentage'\n)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig, filename=\"plotting-library\")","b0611d61":"new_results1= new_results.merge(drivers, how='left', on= 'driverId')","3f3a4ac2":"new_results1.head()","29b17890":"data = [go.Bar(\n    x = new_results1['surname'],\n    y = new_results1['fastestLapSpeed'],\n    marker = dict(color = random_colors(100))\n)]\nlayout = dict(\n         title= \"fastest lap Speed by different drivers \"\n)\nfig = dict( data=data, layout=layout )\niplot( fig, validate=False )","ab7a3158":"pit_stops= pd.read_csv('..\/input\/pitStops.csv')\npit_stops.head()","836ae209":"pit_results= pit_stops.merge(drivers, how='left', on= 'driverId')","490295e0":"pit_results.head()","93f5f9a8":"pit_results1= pit_results.drop_duplicates( keep=False)","24faf770":"data = [go.Bar(\n    x = pit_results1['surname'],\n    y = pit_results1['duration'],\n    marker = dict(color = random_colors(100))\n)]\nlayout = dict(\n         title= \"fastest pit stops by different drivers (in seconds) \"\n)\nfig = dict( data=data, layout=layout )\niplot( fig, validate=False )","2080061d":"**French young drivers have been pretty interested in formula 1 these days more than any other nationality with 18.2%**","f1255ced":"Formula One (also Formula 1 or F1) is the highest class of single-seater auto racing sanctioned by the F\u00e9d\u00e9ration Internationale de l'Automobile (FIA) and owned by the Formula One Group. The FIA Formula One World Championship has been one of the premier forms of racing around the world since its inaugural season in 1950. The word \"formula\" in the name refers to the set of rules to which all participants' cars must conform. A Formula One season consists of a series of races, known as Grands Prix (French for 'grand prizes' or 'great prizes'), which take place worldwide on purpose-built circuits and on public roads.\n\nThe results of each race are evaluated using a points system to determine two annual World Championships: one for drivers, the other for constructors. Drivers must hold valid Super Licences, the highest class of racing licence issued by the FIA. The races must run on tracks graded \"1\" (formerly \"A\"), the highest grade-rating issued by the FIA. Most events occur in rural locations on purpose-built tracks, but several events take place on city streets.\n\nFormula One cars are the fastest regulated road-course racing cars in the world, owing to very high cornering speeds achieved through the generation of large amounts of aerodynamic downforce. The cars underwent major changes in 2017, allowing wider front and rear wings, and wider tyres, resulting in cornering forces closing in on 6.5g and top speeds of up to approximately 375 km\/h (235 mph). As of 2018 the hybrid engines are limited in performance to a maximum of 15,000 rpm and the cars are very dependent on electronics\u2014although traction control and other driving aids have been banned since 2008\u2014and also on aerodynamics, suspension, and tyres.\n\nWhile Europe is the sport's traditional base, the championship operates globally, with 11 of the 21 races in the 2018 season taking place outside Europe. ","9e96fef2":"# Most formula 1 victories among the drivers","04eaf7f3":"# Hands up!! if you read the above headline in David Croft's voice. ","21ed313e":"#  30+ Old Drivers Percentage ","63777621":"# Most Constructors Nationality","f9bbc885":"**British Drivers ruled over the past time and the most drivers have experienced through their time with 19.6% **","63cb4652":"![](https:\/\/cdn.dnaindia.com\/sites\/default\/files\/styles\/full\/public\/2018\/12\/18\/766642-schumacher-reuters.jpg)","013a952a":"**Drivers and their pair wise relationships to winning and time taken per lap.**","f0cdff01":"**Mercedes might be the lone wolf nowdays but we all know deep inside what ferrari has done and what kind of drivers ride ferrari till date. From Lauda to Vettel they all have ride ferrari. Although i'm gonna miss Kimi.**","3a31ea25":"![](https:\/\/rmsothebys-cache.azureedge.net\/e\/5\/4\/2\/4\/5\/e54245e1132f511d2a00a8eed98d19ffcd375fce.jpg)","2e9edfd1":"# Sum of all the points won by all the constructors over the years","bd3a467d":"**If you don't remember what a sensation Vettel was during 2010  to 2013 then i feel sorry for you, He was magnificent and unbeatable during that time just like Hamilton these days. **","e18296e3":"![](https:\/\/cached.imagescaler.hbpl.co.uk\/resize\/scaleWidth\/743\/cached.offlinehbpl.hbpl.co.uk\/news\/OMC\/3C94258E-A0F0-EE5F-9C4C637F40E82E2E.jpg)","34cafd8f":"**Scroll over on the drivers name to see their's best pit stop timing as the graph shows their highest time taken during the pit stop.**","e152dfc1":"![](https:\/\/www.grandprix247.com\/wp-content\/uploads\/2018\/07\/IC4rZP4OK9QQPHOh9GVP6y4fkPD5A4Eh__54I5307.jpg)","683269cd":"# Circuit Locations all over the world ","3897be1a":"# Percentage of most wins in a single grand prix","66d61afd":"![](https:\/\/www.mementoexclusives.com\/images\/companies\/1\/Lewis%20Hamilton%205%20time%20world%20champion%20advert%20WEB.jpg?1540889412614)","f9648bac":"# Percentage of Young Drivers","b7c38fec":"**Of course who it'll be other than Schumacher with 121 wins followed by Prost with 79 next and Hamilton reaching their neck.**","50eddeae":"# Most Hosted Grand Prix","ebdc4923":"![](https:\/\/news.images.itv.com\/image\/file\/705528\/stream_img.jpg)","31e2ae3e":"**It's Silverstone baby !!!!! British Grand Prix has been hosted most no of times.**","984d0d76":"# If you liked my analysis please upvote the kernel and i'll update as it may come.","3698b941":"![](http:\/\/ichef.bbci.co.uk\/news\/976\/cpsprodpb\/A235\/production\/_98952514_newf1touse.jpg)","685c6c18":"**Sorry for the messier graph but had to show somehow.**","9173fe18":"![](https:\/\/images.spot.im\/v1\/production\/bexrf9modt40kadgwqpg)","46cbe48c":"**Am i the only one who misses this old beast ?? Sadly he's got no chance these days as Mercedes Major Engine upgrade made it impossible for anyone else's to compete. Hope Ferrari does it next season**","11da3e96":"**British Constructors rule among the formula 1 constructors Mclaren to Williams all belong to British constructors, 85 constructors belong to British Nationality.**","e5624d59":"**I wish Jules Bianchi was with us but had to put up his picture among young french drivers**"}}