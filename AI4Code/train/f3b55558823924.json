{"cell_type":{"cee9295c":"code","95c40f28":"code","f139bc30":"code","3d53b308":"code","b4b78815":"code","bd8e82cf":"code","fa30c563":"code","502bfbcb":"code","5be010db":"code","365e9f71":"code","e6838026":"code","575857db":"code","c54f73a4":"code","8826bf1b":"code","e0e20479":"code","840f8bf7":"code","3250766c":"code","8b5ebbfe":"code","2f265d25":"code","6049cb0e":"code","771e103e":"code","f88d78c9":"code","6b1f8161":"code","74bcd80c":"code","8640018a":"code","0168c15d":"code","5b2e2292":"code","838a18d6":"code","b09a65e1":"code","6803b0b9":"code","053f01f6":"code","74038138":"code","480285a9":"code","649bfa01":"code","afe59fbf":"code","9c75840d":"code","f6853088":"code","1cacc0dd":"code","09728c8a":"code","f1ffe710":"markdown","e91c573c":"markdown","2ed7fdb8":"markdown","12726409":"markdown","0722d94e":"markdown","a823596e":"markdown"},"source":{"cee9295c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport random\nimport statsmodels.api as sm\n\nfrom colorama import Back, Style, Fore\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.offline as py\n\nfrom ete3 import Tree\nfrom Bio.Align.Applications import ClustalwCommandline\nfrom Bio import Align , pairwise2\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","95c40f28":"with open('..\/input\/genome\/sars.fasta','r') as file:\n    sars_genome = file.read().split('genome')[1].replace('\\n','')\n    \nwith open('..\/input\/genome\/mers.fasta','r') as file:\n    mers_genome = file.read().split('genome')[1].replace('\\n','')\n\nwith open('..\/input\/genome\/cov2.fasta','r') as file:\n    cov_genome = file.read().split('genome')[1].replace('\\n','')\n    \nwith open('..\/input\/genome\/Civet-SARS.fasta','r') as file:\n    civet_sl_cov_genome = file.read().split('complete genome')[1].replace('\\n','')\n    \n    \nwith open('..\/input\/genome\/BAT-SARS.fasta','r') as file:\n    bat_sl_cov_genome = file.read().split('complete genome')[-1].replace(\"\\n\",'')\n    \nwith open('..\/input\/genome\/EBOLAV.fasta','r') as file:\n    ebola5_genome = file.read().split('complete genome')[-1].replace(\"\\n\",'')\n\nwith open('..\/input\/genome\/camelus.fasta','r') as file:\n    camel_cov_genome = file.read().split('complete genome')[-1].replace(\"\\n\",'')\n\nwith open('..\/input\/genome\/plasmodium-malariae.fasta','r') as file:\n    maleria_genome = file.read().split('complete sequence')[-1].replace(\"\\n\",'')\n\nwith open('..\/input\/genome\/hiv2.fasta','r') as file:\n    hiv2_genome = file.read().split('complete genome')[-1].replace(\"\\n\",'')\n\nwith open('..\/input\/genome\/hedgehog.fasta','r') as file:\n    hedgehog_cov_genome = file.read().split('complete genome')[-1].replace(\"\\n\",'')","f139bc30":"hiv2_genome[:3000]","3d53b308":"def ten_nucleotide_seq(genome):\n    genes = []\n    for ix,char in enumerate(genome):\n        if ix!=0 and ix%10 ==0 :\n            genes.append(' ')\n        genes.append(char)\n    \n    return ''.join(genes)\n\n# color code to represent genome sequences\nnu_clr_switcher = {\n    # standard color-codes\n    'A': Back.GREEN,\n    'C': Back.YELLOW,\n    'G': Back.RED,\n    'T': Back.BLUE,\n    ' ': Style.RESET_ALL\n}\nprotein_clr_switcher = {\n    # color-code by proteinfamily's polarity\n    'A': Back.BLUE,\n    'V': Back.BLUE,\n    'I': Back.BLUE,\n    'L': Back.BLUE,\n    'M': Back.BLUE,\n    'F': Back.BLUE,\n    'Y': Back.CYAN,\n    'W': Back.BLUE,\n    'H': Back.CYAN,\n    'R': Back.RED,\n    'K': Back.RED,\n    'N': Back.GREEN,\n    'Q': Back.GREEN,\n    'E': Back.MAGENTA,\n    'D': Back.MAGENTA,\n    'S': Back.GREEN,\n    'T': Back.GREEN,\n    'G': Back.YELLOW,\n    'P': Back.YELLOW,\n    'C': Back.BLUE,\n    ' ': Style.RESET_ALL\n}\n\ndef seq_repr(genome_str , strand = 'dna'):\n    if strand == 'dna':\n        genome_str = ten_nucleotide_seq(genome_str)\n        line_break_ctr = 0\n        for i in range(len(genome_str)):\n            if genome_str[i] == ' ':\n                line_break_ctr += 1\n                if line_break_ctr > 0 and line_break_ctr %6 ==0:\n                    text = '\\n\\n'\n                else:\n                    text = nu_clr_switcher[genome_str[i]] + genome_str[i]\n            else:\n                text = nu_clr_switcher[genome_str[i]] + genome_str[i]\n            print(text , end = '')\n    Style.RESET_ALL\n\n    if strand == 'protein':\n        for i in range(len(genome_str)):\n            if genome_str[i] in protein_clr_switcher:\n                if genome_str[i] == 'S' and genome_str[i+1:i+4] == 'TOP':\n                    text = Style.RESET_ALL + 'S'\n                elif genome_str[i] == 'T' and genome_str[i-1] == 'S' and genome_str[i+1:i+3] == 'OP':\n                    text = Style.RESET_ALL + 'T'\n                elif genome_str[i] == 'P' and genome_str[i-3:i] == 'STO':\n                    text = Style.RESET_ALL + 'P'\n                else:\n                    text = protein_clr_switcher[genome_str[i]] + genome_str[i]\n            \n            else:\n                Style.RESET_ALL\n                text = genome_str[i]\n            print(text,end='')","b4b78815":"print('COVID19 Genome, First 1000 DNA strands\\n\\n')\nseq_repr(cov_genome[:1000])","bd8e82cf":"# tri-nucleotide compositions\ntrimers = [\"AAA\", \"AAC\", \"AAG\", \"AAT\", \"ACA\", \"ACC\", \"ACG\", \"ACT\", \"AGA\", \"AGC\", \"AGG\", \"ATA\", \"ATC\", \"ATG\", \"CAA\", \n           \"CAC\", \"CAG\", \"CCA\",\"CCC\",\"CCG\",\"CGA\",\"CGC\",\"CTA\",\"CTC\",\"GAA\",\"GAC\",\"GCA\",\"GCC\",\"GGA\",\"GTA\",\"TAA\",\"TCA\"]\n\ndef trimer_composition(genome):\n    trimer_dict = dict()\n    for trimer in trimers:\n        trimer_dict[trimer] = genome.count(trimer)\n    return trimer_dict\n\n# tetra-nucleotide compositions\ntetramers = ['AAAA','AAAC','AAAG','AAAT','AACA','AACC','AACG','AACT','AAGA','AAGC','AAGG','AAGT','AATA','AATC',\n             'AATG','AATT','ACAA','ACAC','ACAG','ACAT','ACCA','ACCC','ACCG','ACCT','ACGA','ACGC','ACGG','ACGT',\n             'ACTA','ACTC','ACTG','AGAA','AGAC','AGAG','AGAT','AGCA','AGCC','AGCG','AGCT','AGGA','AGGC','AGGG',\n             'AGTA','AGTC','AGTG','ATAA','ATAC','ATAG','ATAT','ATCA','ATCC','ATCG','ATGA','ATGC','ATGG','ATTA',\n             'ATTC','ATTG','CAAA','CAAC','CAAG','CACA','CACC','CACG','CAGA','CAGC','CAGG','CATA','CATC','CATG',\n             'CCAA','CCAC','CCAG','CCCA','CCCC','CCCG','CCGA','CCGC','CCGG','CCTA','CCTC','CGAA','CGAC','CGAG',\n             'CGCA','CGCC','CGCG','CGGA','CGGC','CGTA','CGTC','CTAA','CTAC','CTAG','CTCA','CTCC','CTGA','CTGC',\n             'CTTA','CTTC','GAAA','GAAC','GACA','GACC','GAGA','GAGC','GATA','GATC','GCAA','GCAC','GCCA','GCCC',\n             'GCGA','GCGC','GCTA','GGAA','GGAC','GGCA','GGCC','GGGA','GGTA','GTAA','GTAC','GTCA','GTGA','GTTA',\n             'TAAA','TACA','TAGA','TATA','TCAA','TCCA','TCGA','TGAA','TGCA','TTAA']\n\ndef tetramer_composition(genome):\n    tetramer_dict = dict()\n    for tetramer in tetramers:\n        if tetramer in genome:\n            tetramer_dict[tetramer] = genome.count(tetramer)\n        else:\n            tetramer_dict[tetramer] = 0\n    return tetramer_dict\n\n","fa30c563":"labels = [\"SARS\", \"MERS\", \"COVID-19\", \"Civet_SL_CoV\",\"Bat_SL_CoV\",\"Ebola\",\"Camel_CoV\",\"Malaria\",\"HIV\",\"Hedgehog_CoV\"]\n\ntraces = []\n\nfor i,genome in enumerate((sars_genome,mers_genome,cov_genome,civet_sl_cov_genome,bat_sl_cov_genome,ebola5_genome,camel_cov_genome,maleria_genome,hiv2_genome,hedgehog_cov_genome)):\n    composition = trimer_composition(genome)\n    total_composition = sum(composition.values())\n    norm_freq = [count\/total_composition for count in composition.values()]\n    traces.append(go.Scatter(x = trimers, y = norm_freq , mode = 'lines',name = labels[i]))\n    \n\nlayout=go.Layout(\n    title=\"Trinucleotide Composition of genomes\",\n    xaxis_title=\"Trinucleotides\",\n    yaxis_title=\"Normalized frequencies\",\n    width=800, height=600\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename=\"3mer-composition-frequency\")","502bfbcb":"labels = [\"SARS\", \"MERS\", \"COVID-19\", \"Civet_SL_CoV\",\"Bat_SL_CoV\",\"Ebola\",\"Camel_CoV\",\"Malaria\",\"HIV\",\"Hedgehog_CoV\"]\n\ntraces = []\n\nfor i,genome in enumerate((sars_genome,mers_genome,cov_genome,civet_sl_cov_genome,bat_sl_cov_genome,ebola5_genome,camel_cov_genome,maleria_genome,hiv2_genome,hedgehog_cov_genome)):\n    composition = tetramer_composition(genome)\n    total_composition = sum(composition.values())\n    norm_freq = [count\/total_composition for count in composition.values()]\n    traces.append(go.Scatter(x = tetramers, y = norm_freq , mode = 'lines',name = labels[i]))\n    \n\nlayout=go.Layout(\n    title=\"Tetranucleotide Composition of genomes\",\n    xaxis_title=\"Tetranucleotides\",\n    yaxis_title=\"Normalized frequencies\",\n    width=1500, height=600\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename=\"4mer-composition-frequency\")","5be010db":"labels = [\"SARS\", \"MERS\", \"COVID-19\", \"Civet_SL_CoV\",\"Bat_SL_CoV\",\"Camel_CoV\",\"Hedgehog_CoV\"]\n\ntraces = []\nfor i,genome in enumerate((sars_genome,mers_genome,cov_genome,civet_sl_cov_genome,bat_sl_cov_genome,camel_cov_genome,hedgehog_cov_genome)):\n    composition = tetramer_composition(genome)\n    total_composition = sum(composition.values())\n    norm_freq = [count\/total_composition for count in composition.values()]\n    traces.append(go.Scatter(x = tetramers,y = norm_freq,mode = 'lines',name = labels[i]))\n\nlayout = go.Layout(\n        title = 'TetraNucleotide Composition of Genome',\n        xaxis_title = 'TetraNucleotides',\n        yaxis_title = 'Normalized frequencies',\n        width = 1200 , height = 600)\n\nfig = go.Figure(data = traces,layout = layout)\npy.iplot(fig, filename=\"4mer-composition-frequency\")\n","365e9f71":"def gc_content(genome):\n    t_content = genome.count('T')\n    g_content = genome.count('G')\n    c_content = genome.count('C')\n    a_content = genome.count('A')\n    return 100*((g_content + c_content)\/(t_content+g_content+c_content+a_content))\n\ngc_content_perc = [gc_content(sars_genome),gc_content(mers_genome),gc_content(cov_genome),gc_content(civet_sl_cov_genome),\n                   gc_content(camel_cov_genome),gc_content(maleria_genome),gc_content(ebola5_genome),gc_content(hiv2_genome),\n                   gc_content(bat_sl_cov_genome),gc_content(hedgehog_cov_genome)]\nviruses = [\"SARS\", \"MERS\", \"COVID-19\", \"Civet_SL_CoV\",\"Bat_SL_CoV\",\"Ebola\",\"Camel_CoV\",\"Malaria\",\"HIV\",\"Hedgehog_CoV\"]\n\ncolors = ['lightslategray']*10\ncolors[2] = 'crimson'\n\nfig = go.Figure(data = [go.Bar(x = viruses,y = gc_content_perc,text = gc_content_perc,marker_color = colors)])\n\nfig.update_traces(texttemplate=\"%{text:.2f}%\", textposition=\"outside\")\nfig.update_layout(title_text=\"GC content distribution among genomes\",xaxis_title=\"Genomes\",yaxis_title=\"GC content (%)\")","e6838026":"def gen_protein_seq(genome_str):\n    # codon table from wiki\n    protein = {\"TTT\" : \"F\", \"CTT\" : \"L\", \"ATT\" : \"I\", \"GTT\" : \"V\",\n           \"TTC\" : \"F\", \"CTC\" : \"L\", \"ATC\" : \"I\", \"GTC\" : \"V\",\n           \"TTA\" : \"L\", \"CTA\" : \"L\", \"ATA\" : \"I\", \"GTA\" : \"V\",\n           \"TTG\" : \"L\", \"CTG\" : \"L\", \"ATG\" : \"M\", \"GTG\" : \"V\",\n           \"TCT\" : \"S\", \"CCT\" : \"P\", \"ACT\" : \"T\", \"GCT\" : \"A\",\n           \"TCC\" : \"S\", \"CCC\" : \"P\", \"ACC\" : \"T\", \"GCC\" : \"A\",\n           \"TCA\" : \"S\", \"CCA\" : \"P\", \"ACA\" : \"T\", \"GCA\" : \"A\",\n           \"TCG\" : \"S\", \"CCG\" : \"P\", \"ACG\" : \"T\", \"GCG\" : \"A\",\n           \"TAT\" : \"Y\", \"CAT\" : \"H\", \"AAT\" : \"N\", \"GAT\" : \"D\",\n           \"TAC\" : \"Y\", \"CAC\" : \"H\", \"AAC\" : \"N\", \"GAC\" : \"D\",\n           \"TAA\" : \"STOP\", \"CAA\" : \"Q\", \"AAA\" : \"K\", \"GAA\" : \"E\",\n           \"TAG\" : \"STOP\", \"CAG\" : \"Q\", \"AAG\" : \"K\", \"GAG\" : \"E\",\n           \"TGT\" : \"C\", \"CGT\" : \"R\", \"AGT\" : \"S\", \"GGT\" : \"G\",\n           \"TGC\" : \"C\", \"CGC\" : \"R\", \"AGC\" : \"S\", \"GGC\" : \"G\",\n           \"TGA\" : \"STOP\", \"CGA\" : \"R\", \"AGA\" : \"R\", \"GGA\" : \"G\",\n           \"TGG\" : \"W\", \"CGG\" : \"R\", \"AGG\" : \"R\", \"GGG\" : \"G\" \n           }\n    protein_seq = \"\"\n    \n    # generating the protein seq\n    for i in range(0, len(genome_str)-(3+len(genome_str)%3), 3):\n        protein_seq += protein[genome_str[i:i+3]]\n    return protein_seq","575857db":"print(\"Protein Sequence in Maleria\")\nseq_repr(gen_protein_seq(maleria_genome), strand = 'protein')","c54f73a4":"print(\"Protein Sequence in Covid\")\nseq_repr(gen_protein_seq(cov_genome), strand = 'protein')","8826bf1b":"genomes = {\"SARS\": sars_genome , \"MERS\":mers_genome , \"Covid-19\":cov_genome , \"Civet_SL_COV\":civet_sl_cov_genome , \n               \"BAT_SL_COV\":bat_sl_cov_genome , \"EBOLA\":ebola5_genome , \"Camel_COV\":camel_cov_genome,\"Maleria\":maleria_genome,\n           \"HIV\":hiv2_genome,\"HedgeHog_COV\":hedgehog_cov_genome}\n\ncolors = [\"slategray\"] * 10\ncolors[2] = \"crimson\"\n\nfig = go.Figure(data=[go.Bar(\n    x=list(genomes.keys()),\n    y=[len(gen_protein_seq(genome).split('STOP')) for genome in genomes.values()],\n    text=[len(gen_protein_seq(genome).split('STOP')) for genome in genomes.values()],\n    marker_color=colors\n)])\n\nfig.update_traces(texttemplate=\"%{text:.2s}\", textposition=\"outside\")\nfig.update_layout(\n    title_text=\"Number of protein strands among genomes\",\n    xaxis_title=\"Genomes\",\n    yaxis_title=\"number of protein strands\"\n)","e0e20479":"def amino_acids_composition(protein_seq):\n    amino_acids_dict = {'Y':0,'A':0,'C':0,'D':0,'E':0,'F':0,'G':0,'H':0,'I':0,'K':0,'L':0,'M':0,'N':0,\n                       'P':0,'Q':0,'R':0,'S':0,'T':0,'V':0,'W':0}\n    \n    for amino_acid in amino_acids_dict:\n        amino_acids_dict[amino_acid] = protein_seq.count(amino_acid)\/len(protein_seq)*100\n    return amino_acids_dict\n    ","840f8bf7":"fig = go.Figure()\nfor i in range(10):\n    fig.add_trace(go.Bar(x = list(amino_acids_composition(gen_protein_seq(list(genomes.values())[i])).keys()),\n                         y = list(amino_acids_composition(gen_protein_seq(list(genomes.values())[i])).values()),\n                         name = list(genomes.keys())[i]))\n    \n    fig.update_layout(barmode = 'group',\n                     title=\"Distribution of Amino Acids by genomes\", \n                     xaxis_title=\"Amino Acids\", \n                     yaxis_title=\"Normalized Frequency (%)\")\n    \nfig.show()\n                    ","3250766c":"proteins_seq = {}\nfor genome_name , genome_seq in genomes.items():\n    proteins_seq[genome_name] = gen_protein_seq(genome_seq)\n\nprotein_seq_length = {}\n\nfor genome_name , protein_seq in proteins_seq.items():\n    len_of_pro_seq = []\n    for seq in protein_seq.split('STOP'):\n        len_of_pro_seq.append(len(seq)+1)\n    protein_seq_length[genome_name] = len_of_pro_seq\n\nfig = make_subplots(rows = 2 , cols = 1 , subplot_titles = ('Length of Longest Protein Seq' , 'Average Length of Protein Seq'))\n\nfig.add_trace(\n        go.Bar(\n        x = list(protein_seq_length.keys()),\n        y = [max(_len) for _len in protein_seq_length.values()],\n        text = [max(_len) for _len in protein_seq_length.values()],\n        texttemplate=\"%{text:.1s}\", textposition=\"outside\",\n        marker_color=colors),\n        row=1, col=1)\n\nfig.add_trace(\n    go.Bar(\n    x=list(protein_seq_length.keys()),\n    y=[sum(lens)\/len(lens) for lens in protein_seq_length.values()],\n    text=[sum(lens)\/len(lens) for lens in protein_seq_length.values()],\n    texttemplate=\"%{text:.2f}\", textposition=\"outside\",\n    marker_color=colors),\n    row=2, col=1\n)\n\nfig.update_layout(title_text=\"Comparative Summary of Protein Sequences\",\n                  height=960, width=960, showlegend=False)\n\nfig.show()\ntype(proteins_seq)","8b5ebbfe":"sars_genome_aligned = ClustalwCommandline('clustalw2',infile = sars_genome)\nmers_genome_aligned = ClustalwCommandline('clustalw2',infile = mers_genome)\nhiv2_genome_aligned = ClustalwCommandline('clustalw2',infile = hiv2_genome)\ncivet_sl_cov_genome_aligned = ClustalwCommandline('clustalw2',infile = civet_sl_cov_genome)\ncov_genome_aligned = ClustalwCommandline('clustalw2',infile = cov_genome)\nbat_sl_cov_genome_aligned = ClustalwCommandline('clustalw2',infile = bat_sl_cov_genome)\nebola5_genome_aligned = ClustalwCommandline('clustalw2',infile = ebola5_genome)\ncamel_cov_genome_aligned = ClustalwCommandline('clustalw2',infile = camel_cov_genome)\nmaleria_genome_aligned = ClustalwCommandline('clustalw2',infile = maleria_genome)\nhedgehog_cov_genome_aligned = ClustalwCommandline('clustalw2',infile = hedgehog_cov_genome)","2f265d25":"# comparing first 57 nucleotides' of all the genomes after aligning them\nprint(\"SARS:\\t \",end=\" \")\nseq_repr(sars_genome_aligned.infile[:57])\nprint(Style.RESET_ALL + \"\\nMERS:\\t \",end=\" \")\nseq_repr(mers_genome_aligned.infile[:57])\nprint(Style.RESET_ALL + \"\\nCOVID:\\t \",end=\" \")\nseq_repr(cov_genome_aligned.infile[:57])\nprint(Style.RESET_ALL + \"\\nBAT:\\t \",end=\" \")\nseq_repr(bat_sl_cov_genome_aligned.infile[:57])\nprint(Style.RESET_ALL + \"\\nCIVET:\\t \",end=\" \")\nseq_repr(civet_sl_cov_genome_aligned.infile[:57])\nprint(Style.RESET_ALL + \"\\nCAMEL:\\t \",end=\" \")\nseq_repr(camel_cov_genome_aligned.infile[:57])\nprint(Style.RESET_ALL + \"\\nHEDGEHOG:\",end=\" \")\nseq_repr(hedgehog_cov_genome_aligned.infile[:57])\nprint(Style.RESET_ALL + \"\\nEBOLA:\\t \",end=\" \")\nseq_repr(ebola5_genome_aligned.infile[:57])\nprint(Style.RESET_ALL + \"\\nMALARIA: \",end=\" \")\nseq_repr(maleria_genome_aligned.infile[:57])\nprint(Style.RESET_ALL + \"\\nHIV:\\t \",end=\" \")\nseq_repr(hiv2_genome_aligned.infile[:57])","6049cb0e":"print(\"Aligning the first 100 nucleotides of COVID-19 genome with every other genomes:\\n\\n\")\nfor genome_name, genome in genomes.items():\n    if genome_name != 'Covid-19':\n        print(\"** COVID-19 and {} genome **\".format(genome_name))\n        alignments = pairwise2.align.globalxx(cov_genome[:100], genome[:200])\n        print(pairwise2.format_alignment(*alignments[0], full_sequences=True))","771e103e":"print(\"Aligning the first 100 amino acids of COVID-19 genome's protein sequence with every other genomes's protein sequence:\\n\\n\")\n\nfor genome_name, proteinSeq in proteins_seq.items():\n    if genome_name != 'Covid-19':\n        print(\"COVID-19 and {} genomes' protein sequences\\n\".format(genome_name))\n        alignments = pairwise2.align.globalxx(gen_protein_seq(cov_genome[:100]).replace('STOP','*'), proteinSeq[:100].replace('STOP','*'))\n        print(pairwise2.format_alignment(*alignments[0], full_sequences=True))","f88d78c9":"aligner = Align.PairwiseAligner()\naligner.mode = 'global'\naligner.match_score = 1\naligner.mismatch_score = -0.5\naligner.open_gap_score = 0\naligner.extend_gap_score = 0","6b1f8161":"print(\"Similarity scores between\\n\")\nfor genome_name, genome in genomes.items():\n    if genome_name != 'Covid-19':\n        score = aligner.score(cov_genome, genome)\n        print(\"COVID-19 & {} genome sequences:\\t {} ({:.2f}%)\".format(genome_name, score,100*(score\/len(cov_genome))))","74bcd80c":"# Edit Distance algorithm\ndef edit_distance(genome1,genome2):\n    numRows = len(genome1)+1\n    numCols = len(genome2)+1\n    distance = np.zeros(shape = (numRows,numCols) , dtype = np.int64)\n    \n    \n    for i in range(numRows):\n        distance[i][0] = i\n    for j in range(numCols):\n        distance[0][j] = j\n    for i in range(1,len(genome1)+1):\n        for j in range(1,len(genome2)+1):\n            if genome1[i-1] == genome2[j-1]:\n                distance[i][j] = distance[i-1][j-1]\n            else:\n                distance[i][j] = min(distance[i-1][j],distance[i][j-1],distance[i-1][j-1])+1\n    \n    return distance[len(genome1)][len(genome2)]\n                ","8640018a":"edit_distance('Horse','Ros')","0168c15d":"def get_list(genome):\n    genome_list = []\n    j = 0\n    for i in range(100,len(genome),100):\n        genome_list.append(genome[j:i])\n        j = i\n    genome_list.append(genome[i:])\n    return genome_list\n\ndef get_random_sample(genome_list):\n    return random.sample(genome_list,k = 500)\n\ndef get_random_sample_repetetion(genome_list):\n    return random.choices(genome_list, k = 700)","5b2e2292":"cov_genome_list = get_list(cov_genome)\nsars_genome_list = get_list(sars_genome)\nmers_genome_list = get_list(mers_genome)\ncivet_sl_cov_genome_list = get_list(civet_sl_cov_genome)\nhiv2_genome_list = get_list(hiv2_genome)\nbat_sl_cov_genome_list = get_list(bat_sl_cov_genome)\nhedgehog_cov_genome_list = get_list(hedgehog_cov_genome)\nmaleria_genome_list = get_list(maleria_genome)\ncamel_cov_genome_list = get_list(camel_cov_genome)\nebola5_genome_list = get_list(ebola5_genome)","838a18d6":"random_genome = {'SARS':get_random_sample_repetetion(sars_genome_list) , 'MERS':get_random_sample_repetetion(mers_genome_list),\n                 'Civet_COV': get_random_sample_repetetion(civet_sl_cov_genome_list) , 'HIV2':get_random_sample_repetetion(hiv2_genome_list),\n                 'Maleria':get_random_sample_repetetion(maleria_genome_list) , 'Bat_COV':get_random_sample_repetetion(bat_sl_cov_genome_list),\n                 'Hedgehog_COV':get_random_sample_repetetion(hedgehog_cov_genome_list) , 'Camel_COV':get_random_sample_repetetion(camel_cov_genome_list),\n                'EBOLA':get_random_sample_repetetion(ebola5_genome_list) ,'COVID':get_random_sample_repetetion(cov_genome_list)}","b09a65e1":"cov_sars = []\nfor i in range(500):\n    cov_sars.append(edit_distance(random_genome['SARS'][i],random_genome['COVID'][i]))","6803b0b9":"edit_distance_dict = {}\nfor genome_name , genome in random_genome.items():\n    score = []\n    if genome_name != \"COVID\":\n        for i in range(700):\n            score.append(edit_distance(random_genome[genome_name][i],random_genome['COVID'][i]))\n        edit_distance_dict[genome_name] = score","053f01f6":"for genome_name , distribution in edit_distance_dict.items():\n    sns.distplot(distribution).set(title = \"Distribution of Viruses Edit Distance\")","74038138":"for genome_name in edit_distance_dict.keys():\n    edit_distance_dict[genome_name] = np.array(edit_distance_dict[genome_name])\ndataset = pd.DataFrame(columns = edit_distance_dict.keys())\n\nfor name in dataset.columns:\n    dataset[name] = edit_distance_dict[name]\ndataset.head()","480285a9":"genomes = {\"SARS\": sars_genome , \"MERS\":mers_genome , \"Covid-19\":cov_genome , \"Civet_SL_COV\":civet_sl_cov_genome , \n               \"BAT_SL_COV\":bat_sl_cov_genome , \"EBOLA\":ebola5_genome , \"Camel_COV\":camel_cov_genome,\"Maleria\":maleria_genome,\n           \"HIV\":hiv2_genome,\"HedgeHog_COV\":hedgehog_cov_genome}\ndef generate_random_Reads(genome , numReads , readLen):\n    reads = []\n    for _ in range(numReads):\n        start = random.randint(0,len(genome)-readLen)-1\n        reads.append(genome[start:start+readLen])\n    return reads","649bfa01":"generate_random_bases_dict = {}\n\nfor name in genomes.keys():\n    generate_random_bases_dict[name] = generate_random_Reads(genomes[name] , 500 , 100)","afe59fbf":"def gc_content_by_pos(reads):\n    gc = [0]*100\n    total = [0]*100\n    for read in reads:\n        for i in range(len(read)):\n            if read[i] == 'G' or read[i] == 'C':\n                gc[i] += 1\n            total[i] += 1\n        \n    for i in range(len(gc)):\n        if total[i] >= 0:\n            gc[i] \/= float(total[i])\n    return gc\n\ngc_content_pos_dict = {}\n\nfor name, genome in generate_random_bases_dict.items():\n    x = gc_content_by_pos(genome)\n    gc_content_pos_dict[name] = x","9c75840d":"labels = [\"SARS\", \"MERS\", \"COVID-19\", \"Civet_SL_CoV\",\"Bat_SL_CoV\",\"Ebola\",\"Camel_CoV\",\"Malaria\",\"HIV\",\"Hedgehog_CoV\"]\ntraces = []\n\nfor i,genome in gc_content_pos_dict.items():\n    traces.append(go.Scatter(x = list(range(0,100)), y = genome , mode = 'lines',name = i))\n    \n\nlayout=go.Layout(\n    title=\"GC content by position\",\n    xaxis_title=\"Index\",\n    yaxis_title=\"GC_Content\",\n    width=1000, height=600\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename=\"GC_content_by_pos\")","f6853088":"edit_distance_random_dict = {}\n\nfor genome_name, seqs in generate_random_bases_dict.items():\n    edit = []\n    if genome_name != 'Covid-19':\n        for i in range(len(seqs)):\n            edit.append((edit_distance(seqs[i] , generate_random_bases_dict['Covid-19'][i]))\/abs(len(cov_genome) - len(genomes[genome_name])))\n    \n    edit_distance_random_dict[genome_name] = edit","1cacc0dd":"del edit_distance_random_dict['Covid-19']\ndataset = pd.DataFrame(columns = edit_distance_random_dict.keys())\n\nfor name in dataset.columns:\n    edit_distance_random_dict[name] = np.array(edit_distance_random_dict[name])\n    dataset[name] = edit_distance_random_dict[name]\ndataset.head()","09728c8a":"for name in dataset.columns:\n    print(name ,sm.stats.DescrStatsW(dataset[name]).zconfint_mean())","f1ffe710":"\nGC content (or Guanine-Cytosine content) is the percentage of nucleotides bases in a DNA\/RNA molecule that are either guanine (G) or cytosine (C). GC content is always expressed as a percentage value and is supposed to remaine the same among genomes of same specie.\n\n `(G+C)\/(A+C+G+T)\u00d7100 %`","e91c573c":"**As we can observe that, with 95% confidence we estimate that the edit distance of covid genome is much lower with Maleria, Ebola and HIV. It means that covid 19 genome is more similar with maleria, ebola and HIV**","2ed7fdb8":"*Do upvote if you like it*","12726409":"**Let's only take covid genomes**","0722d94e":"So, the edit distance between 'Horse' and 'Ros' is 3. In edit distance algorithm we do 3 operations to match string with another string. These 3 operations are Insertion, Deletion and Replace. \nSo in our above example if we replace H by R, it become Rorse, then delete r at position 3 which gives rose, then delete e at last position. \nSo Replace, Delete and Delete are three opearations to convert Horse into Ros.","a823596e":"Randomly generated sequences from genome"}}