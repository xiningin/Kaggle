{"cell_type":{"77962f86":"code","7264e52d":"code","d3fd458f":"code","85c5a9db":"code","89060555":"code","74519e2e":"code","1a0bf91a":"code","63287e8f":"code","e2a5d9fa":"code","95b463c9":"code","8adde3f6":"code","b2230259":"code","9626f0b8":"code","69819fa0":"code","7a8128c1":"code","c333583d":"code","52014f8b":"code","a8be9ab9":"code","bafaa797":"code","d5443a7c":"code","9a0e3914":"code","12173ee9":"code","7c1f0c80":"markdown"},"source":{"77962f86":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7264e52d":"from sklearn import preprocessing\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import Imputer\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn import linear_model\nfrom sklearn import svm\nfrom sklearn import tree\nimport xgboost as xgb\nfrom sklearn.ensemble import BaggingRegressor\nimport numpy as np \nimport pandas as pd \nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import VotingClassifier\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score","d3fd458f":"data = pd.read_csv('\/kaggle\/input\/us-weather-events\/US_WeatherEvents_2016-2019.csv')","85c5a9db":"data.isna().sum()","89060555":"data = data.fillna(data.median())","74519e2e":"data.head()","1a0bf91a":"table_1 = data.groupby(['City','Type']).count()","63287e8f":"table_1 = table_1.reset_index()","e2a5d9fa":"table_1","95b463c9":"list_of_dic = []\nlabel = table_1.City[0]\nlist_val = {}\nfor index,row in table_1.iterrows():   \n    if row['City'] != label:\n        label = row['City']\n        list_of_dic.append(list_val)\n        list_val = {}\n        list_val['City'] = row['City']\n        list_val[row['Type']] = row['EventId']\n       \n    else:\n        list_val['City'] = row['City']\n        list_val[row['Type']] = row['EventId']\n        \n    \n    \n    ","8adde3f6":"df = pd.DataFrame()\nfor dic in list_of_dic:\n    df = df.append(dic, ignore_index=True)\n    \n","b2230259":"df = df.fillna(0)","9626f0b8":"data = data.merge(df,on = 'City')","69819fa0":"data","7a8128c1":"data['StartTime(UTC)'] = pd.to_datetime(data['StartTime(UTC)'])\ndata['EndTime(UTC)'] = pd.to_datetime(data['EndTime(UTC)'])\n\ndata['Start_year'] = data['StartTime(UTC)'].dt.year\ndata['Start_month'] = data['StartTime(UTC)'].dt.month\ndata['Start_week'] = data['StartTime(UTC)'].dt.week\ndata['Start_weekday'] = data['StartTime(UTC)'].dt.weekday\ndata['Start_day'] = data['StartTime(UTC)'].dt.day\n\ndata['end_year'] = data['EndTime(UTC)'].dt.year\ndata['end_month'] = data['EndTime(UTC)'].dt.month\ndata['end_week'] = data['EndTime(UTC)'].dt.week\ndata['end_weekday'] = data['EndTime(UTC)'].dt.weekday\ndata['end_day'] = data['EndTime(UTC)'].dt.day\n","c333583d":"X = data.drop(['Type','StartTime(UTC)','EndTime(UTC)'],axis = 1).head(5000)\ny = data.Type.head(5000)","52014f8b":"le = preprocessing.LabelEncoder()\nfor name in X.columns:\n    if X[name].dtypes == \"O\":\n        print(name)\n        X[name] = X[name].astype(str)\n        le.fit(X[name])\n        X[name] = le.transform(X[name])","a8be9ab9":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","bafaa797":"clf = RandomForestClassifier(n_estimators = 400,min_samples_split = 2,min_samples_leaf = 1,max_features= 'sqrt',max_depth =None,bootstrap= False)\nclf.fit(X_train, y_train)\n\npredictions = clf.predict(X_test)","d5443a7c":"X","9a0e3914":"import seaborn as sns\nax = sns.barplot(x=clf.feature_importances_, y=X.columns)","12173ee9":"accuracy_score(predictions,y_test)","7c1f0c80":"Here I collect the number of types according to cities and then I will merge them with main dataframe."}}