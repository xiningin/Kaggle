{"cell_type":{"42ebdb25":"code","1d151d70":"code","1d016f75":"code","3899ec9f":"code","ecc4bcde":"code","c0e6f4cf":"code","5067914e":"code","6ef4ecd0":"code","0731b2ce":"code","23d2d6d7":"code","2be02311":"code","a5de8da4":"code","1668985a":"code","67e11ead":"code","bf25442e":"code","86c6cc04":"markdown","f8b334f6":"markdown"},"source":{"42ebdb25":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d151d70":"from keras.datasets import boston_housing\n\n(x_train, y_train), (x_test, y_test) = boston_housing.load_data()","1d016f75":"x_train.shape","3899ec9f":"x_test.shape","ecc4bcde":"mean = x_train.mean(axis =0)\nx_train -= mean\nstd = x_train.std(axis=0)\nx_train \/= std\n\n# Never use a value calculated over the dataset \nx_test -=mean\nx_test \/= std","c0e6f4cf":"from keras import models\nfrom keras import layers\n\ndef build_model():\n    \n    model = models.Sequential()\n    \n    model.add(layers.Dense(64, activation='relu', input_shape= (x_train.shape[1],)))\n    model.add(layers.Dense(64, activation= 'relu'))\n    model.add(layers.Dense(1))           # In regression problems, we leave it linear so as not to limit the output.\n    \n    model.compile(optimizer = 'rmsprop', loss='mse', metrics=['mae'])\n    \n    \n    return model \n     ","5067914e":"k=4\nnum_val_samples = len(x_train) \/\/ k\nnum_epochs = 100\nall_scores = []\nall_mae_histories = []\n\nfor i in range(k):\n    print('processing fold #', i)\n    val_data = x_train[i * num_val_samples: (i + 1) * num_val_samples]\n    val_targets = y_train[i * num_val_samples: (i + 1) * num_val_samples]\n    \n    partial_train_data = np.concatenate(\n    [x_train[:i * num_val_samples],\n    x_train[(i + 1) * num_val_samples:]],\n    axis=0)\n    \n    partial_train_targets = np.concatenate(\n    [y_train[:i * num_val_samples],\n    y_train[(i + 1) * num_val_samples:]],\n    axis=0)\n    \n    model = build_model()\n    \n    history = model.fit(partial_train_data, partial_train_targets,\n                        validation_data=(val_data,val_targets),\n                        epochs=num_epochs, batch_size=1, verbose=0)\n    mae_history = history.history['val_mae']\n    \n    all_mae_histories.append(mae_history)\n    \n    val_mse, val_mae = model.evaluate(val_data, val_targets, verbose=0)\n    \n    all_scores.append(val_mae)","6ef4ecd0":"history.history.keys()","0731b2ce":"all_scores","23d2d6d7":"np.mean(all_scores)    # This value means: There is (this value * a thousand )dollars difference between our estimate and the actual price.","2be02311":"average_mae_history = [ np.mean([x[i] for x in all_mae_histories]) for i in range(num_epochs)]","a5de8da4":"import matplotlib.pyplot as plt \n\nplt.plot(range(1, len(average_mae_history)+1), average_mae_history)\nplt.show()","1668985a":"model = build_model()\n\nmodel.fit(x_train,y_train,\n         epochs = 80, batch_size=16, verbose=0)\n","67e11ead":"test_mse_score , test_mae_score = model.evaluate(x_test, y_test)","bf25442e":"test_mae_score","86c6cc04":"### Since there are inconsistencies between the attributes, We need to Standardization","f8b334f6":"### Since we have little data, we do cross-validation instead of testing directly."}}