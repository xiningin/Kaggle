{"cell_type":{"6c4d0a02":"code","79c6ba5b":"code","052ff655":"code","32fa74be":"code","53b6707d":"code","3b72826e":"code","862fe997":"code","9ea3cad8":"code","e9336cf6":"code","dda08b1d":"code","4cda7042":"code","5587e8b7":"code","b631ee17":"code","9a5416e6":"code","fa3d16ef":"markdown"},"source":{"6c4d0a02":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.set_option('display.max_columns', None)  \npd.set_option('display.expand_frame_repr', False)\npd.set_option('max_colwidth', None)\n\nimport pandas_profiling\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split\n\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","79c6ba5b":"train = pd.read_csv('\/kaggle\/input\/new-data\/TO_LEARN (5).csv')\ntest = pd.read_csv('\/kaggle\/input\/new-data\/TO_PREDICT (6).csv')\ntrain","052ff655":"mapped = {True:1, False:0}\ntrain[\"Target\"] = train['target'].map(mapped)","32fa74be":"train.drop('target', 1, inplace=True)\ntest","53b6707d":"train","3b72826e":"y = train[\"Target\"]\ntrain = train.drop(['Target', 'MMM-YY', 'Dateofjoining', 'date', 'date_plus_1',\n                    'date_plus_6','LastWorkingMonth', 'LastWorkingDate'], 1)\ntrain","862fe997":"pip install ppscore","9ea3cad8":"def heatmap(df):   \n    df = df[['x', 'y', 'ppscore']].pivot(columns='x', index='y', values='ppscore')\n    fig, ax = plt.subplots(figsize=(25,25)) \n    ax = sns.heatmap(df, vmin=0, vmax=1, cmap=\"Blues\", linewidths=0.5, annot=True)\n    ax.set_title(\"PPS matrix\")\n    ax.set_xlabel(\"feature\")\n    ax.set_ylabel(\"target\")\n    return ax\n\n#import ppscore as pps\n#matrix = pps.matrix(train)\n#heatmap(matrix)","e9336cf6":"test.drop(['target', 'MMM-YY', 'Dateofjoining', \n           'date', 'LastWorkingMonth', 'date_plus_1', 'date_plus_6',\n           'LastWorkingDate'],1, inplace=True)","dda08b1d":"gender = {\"Male\":0, 'Female':1}\ntrain['Gender']=train[\"Gender\"].map(gender)\ntest['Gender']=test[\"Gender\"].map(gender)\n\neducation = {'Master':2, 'College':0, 'Bachelor':1}\ncity = {'C23':0, 'C13':1, 'C9':2, 'C11':3, 'C2':4, 'C19':5, 'C26':6, 'C20':7, \n        'C17':8, 'C29':9,'C10':10, 'C24':11, 'C14':12, 'C28':13, \n        'C5':14, 'C18':15, 'C27':16, 'C15':17, 'C8':18, 'C21':19,\n       'C1':20, 'C6':21, 'C7':22, 'C4':23, 'C3':24, 'C16':25, 'C22':26, \n        'C12':27, 'C25':28}\ntrain['Education_Level']=train['Education_Level'].map(education)\ntest['Education_Level']=test['Education_Level'].map(education)\n\ntrain['City']=train[\"City\"].map(city)\ntest[\"City\"]=test[\"City\"].map(city)","4cda7042":"train","5587e8b7":"xgb = XGBClassifier(n_estimators = 400, verbosity = 1, \n                     enable_categorical=True)\nxgb.fit(train, y)\npredictions_xgb = xgb.predict(test)","b631ee17":"sub = pd.DataFrame({'Emp_ID':test.Emp_ID, 'Target': predictions_xgb})\nsub.Target = sub.Target.astype('int')\nsub.to_csv('my_submission_2.csv', index=False, header=True, sep=\",\")","9a5416e6":"sub","fa3d16ef":"gender = {\"Male\":0, 'Female':1}\ntrain['Gender']=train[\"Gender\"].map(gender)\ntest['Gender']=test[\"Gender\"].map(gender)\n\neducation = {'Master':2, 'College':0, 'Bachelor':1}\ncity = {'C23':0, 'C13':1, 'C9':2, 'C11':3, 'C2':4, 'C19':5, 'C26':6, 'C20':7, \n        'C17':8, 'C29':9,'C10':10, 'C24':11, 'C14':12, 'C28':13, \n        'C5':14, 'C18':15, 'C27':16, 'C15':17, 'C8':18, 'C21':19,\n       'C1':20, 'C6':21, 'C7':22, 'C4':23, 'C3':24, 'C16':25, 'C22':26, \n        'C12':27, 'C25':28}\ntrain['Education_Level']=train['Education_Level].map(education)"}}