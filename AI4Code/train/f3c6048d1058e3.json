{"cell_type":{"8dcfce08":"code","aa372e10":"code","3a4ecf31":"code","174e9889":"code","b4d93536":"code","e1354f76":"code","64260c46":"code","00d77d14":"code","ba09e99f":"code","08e190d0":"code","c92e1cee":"code","e576c106":"code","0a3e5af9":"code","187e85f6":"code","2fd4b9fc":"code","032b74cb":"code","2c2ffcf9":"code","09840afb":"code","6ff287b0":"code","334dba1e":"code","8342cbdc":"code","686a2545":"code","d78f34a6":"code","61c33f9d":"code","0b72fe55":"code","f6abe4d4":"code","46d84373":"code","77d51247":"code","edc58add":"code","e121a5de":"code","f4e4a957":"code","a3f87592":"code","603fb611":"code","427de9cb":"code","b0cadf3f":"code","c1fc4b4d":"code","8e4c956a":"code","c6e27278":"code","6cef1cd0":"code","86670ff2":"code","d451fc0f":"code","cee71670":"code","6075c25b":"code","4bd4cc60":"code","d68c59d3":"code","022d4e77":"code","80aa74bf":"code","84fb0b40":"code","814736e5":"code","d773fe8c":"code","b2c70750":"code","7684f9b0":"code","227e5029":"code","b8717fd1":"code","d3808a55":"code","b5128664":"code","83569864":"code","ebe86389":"code","53a765bd":"code","8858bacc":"code","8b69fa5c":"code","45877a54":"code","3ab5857a":"code","576ac15e":"code","336069c1":"code","3b9c9618":"code","7b114462":"code","ec0d317c":"code","1bdfde01":"code","b19ed019":"code","52c98910":"code","4724f993":"code","2e7c18f9":"code","cd7013cb":"code","d81b0d36":"code","b8c48314":"code","96cac3c3":"code","fffb1e7b":"markdown","1a28c53e":"markdown","31c71b47":"markdown","a7387cc8":"markdown","73960644":"markdown","2d6b95d2":"markdown","8c31bf44":"markdown","0b7912e9":"markdown","135b0a17":"markdown","7c4f8287":"markdown","cc30407c":"markdown","06001a6f":"markdown","bac3d931":"markdown","acd2927f":"markdown","4e4e6669":"markdown","f9258d3d":"markdown","661c87e1":"markdown","013f2c2a":"markdown","8cea58b4":"markdown","5db03d80":"markdown","46d25782":"markdown","821f24c0":"markdown","dfd8ff04":"markdown","69cd85a5":"markdown","8f71ad8e":"markdown","37949777":"markdown","ce7f1f56":"markdown","3084d328":"markdown","193d645e":"markdown","3259f9df":"markdown","972a3a9e":"markdown","7f7378fa":"markdown","dc1f5f50":"markdown","3b641fe4":"markdown","6119d98a":"markdown","ecaa3b69":"markdown","4e1236b7":"markdown","f00d4767":"markdown","b370fceb":"markdown"},"source":{"8dcfce08":"#Load the libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelBinarizer\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom wordcloud import WordCloud,STOPWORDS\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.pipeline import make_pipeline\nfrom scipy.sparse import hstack\nimport xgboost as xgb\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn import svm\nfrom sklearn.model_selection import GridSearchCV\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize,sent_tokenize\n# from bs4 import BeautifulSoup\nimport spacy\nimport re,string,unicodedata\nfrom nltk.tokenize.toktok import ToktokTokenizer\nfrom nltk.stem import LancasterStemmer,WordNetLemmatizer\nfrom sklearn.linear_model import LogisticRegression,SGDClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.svm import SVC\nfrom textblob import TextBlob\nfrom textblob import Word\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nfrom keras.wrappers.scikit_learn import KerasClassifier\nimport string\nfrom keras.preprocessing import text, sequence\nfrom keras import layers, models, optimizers","aa372e10":"#importing the training data\ndata=pd.read_csv(r'..\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv')\nprint(data.shape)\ndata.head(10)","3a4ecf31":"#Summary of the dataset\ndata.describe()","174e9889":"#Class Distrubution\ndata['sentiment'].value_counts()","b4d93536":"## 0 as Negative and 1 as Positive\ndata.sentiment=data.sentiment.apply(lambda x: 0 if x=='negative' else 1)","e1354f76":"## Indirect features\neng_stopwords = set(stopwords.words(\"english\"))\n\ndata['count_sent']=data[\"review\"].apply(lambda x: len(re.findall(\"\\n\",str(x)))+1)\n#Word count in each comment:\ndata['count_word']=data[\"review\"].apply(lambda x: len(str(x).split()))\n#Unique word count\ndata['count_unique_word']=data[\"review\"].apply(lambda x: len(set(str(x).split())))\n#Letter count\ndata['count_letters']=data[\"review\"].apply(lambda x: len(str(x)))\n#punctuation count\ndata[\"count_punctuations\"] =data[\"review\"].apply(lambda x: len([c for c in str(x) if c in string.punctuation]))\n#upper case words count\ndata[\"count_words_upper\"] = data[\"review\"].apply(lambda x: len([w for w in str(x).split() if w.isupper()]))\n#title case words count\ndata[\"count_words_title\"] = data[\"review\"].apply(lambda x: len([w for w in str(x).split() if w.istitle()]))\n#Number of stopwords\ndata[\"count_stopwords\"] = data[\"review\"].apply(lambda x: len([w for w in str(x).lower().split() if w in eng_stopwords]))\n#Average length of the words\ndata[\"mean_word_len\"] = data[\"review\"].apply(lambda x: np.mean([len(w) for w in str(x).split()]))\n#Word count percent in each comment:\ndata['word_unique_percent']=data['count_unique_word']*100\/data['count_word']\n#Punct percent in each comment:\ndata['punct_percent']=data['count_punctuations']*100\/data['count_word']\n#derived features\n#Word count percent in each comment:\ndata['word_unique_percent']=data['count_unique_word']*100\/data['count_word']\n#derived features\n#Punct percent in each comment:\ndata['punct_percent']=data['count_punctuations']*100\/data['count_word']","64260c46":"## Reordering the columns \ndata = data[['review', 'count_sent', 'count_word', 'count_unique_word',\n       'count_letters', 'count_punctuations', 'count_words_upper',\n       'count_words_title', 'count_stopwords', 'mean_word_len',\n       'word_unique_percent', 'punct_percent','sentiment']]\ndata.head()","00d77d14":"\nplt.figure(figsize=(20, 5))\ndata1=data[data.count_word<300]\nax = sns.countplot(x=\"count_word\",  hue='sentiment', data=data1, palette=\"pastel\")\nplt.title(\"Distribution of Words in review across Target var\")","ba09e99f":"\nplt.figure(figsize=(20, 5))\ndata1=data[data.count_punctuations<300]\nax = sns.countplot(x=\"count_punctuations\",  hue='sentiment', data=data1, palette=\"pastel\")\nplt.title(\"Distribution of Punctuations in review across review sentiment\")","08e190d0":"\nplt.figure(figsize=(20, 5))\ndata1=data[data.count_stopwords<300]\nax = sns.countplot(x=\"count_stopwords\",  hue='sentiment', data=data1, palette=\"pastel\")\nplt.title(\"Distribution of Stopwords in review across review sentiment\")","c92e1cee":"data.groupby(['sentiment'],as_index=False).mean()","e576c106":"plt.hist(data[data['sentiment']==0]['count_word'],range=(0,2000),color='SkyBlue')\nplt.title('Nagative Reviews')\nplt.show()\n\nplt.hist(data[data['sentiment']==1]['count_word'],range=(0,2000),color='PeachPuff')\nplt.title('Postive Reviews')\nplt.show()\n","0a3e5af9":"string.punctuation","187e85f6":"# Removing all punctuations from Text\nmapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\" }\n\nPUNCT_TO_REMOVE = string.punctuation\ndef remove_punctuation(text):\n    return text.translate(str.maketrans('', '', PUNCT_TO_REMOVE))\n\ndef clean_contractions(text, mapping):\n    specials = [\"\u2019\", \"\u2018\", \"\u00b4\", \"`\"]\n    for s in specials:\n        text = text.replace(s, \"'\")\n    text = ' '.join([mapping[t] if t in mapping else t for t in text.split(\" \")])\n    return text\n\nfrom nltk.corpus import stopwords\nSTOPWORDS = set(stopwords.words('english'))\ndef remove_stopwords(text):\n    return \" \".join([word for word in str(text).split() if word not in STOPWORDS])\n\ndef word_replace(text):\n    return text.replace('<br \/>','')\n\n\nfrom nltk.stem.porter import PorterStemmer\nstemmer = PorterStemmer()\ndef stem_words(text):\n    return \" \".join([stemmer.stem(word) for word in text.split()])\n\n\n\nfrom nltk.stem import WordNetLemmatizer\nlemmatizer = WordNetLemmatizer()\ndef lemmatize_words(text):\n    return \" \".join([lemmatizer.lemmatize(word) for word in text.split()])\n\n\n\ndef remove_urls(text):\n    url_pattern = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url_pattern.sub(r'', text)\n\n\ndef remove_html(text):\n    html_pattern = re.compile('<.*?>')\n    return html_pattern.sub(r'', text)\n\ndef preprocess(text):\n    text=clean_contractions(text,mapping)\n    text=text.lower()\n    text=word_replace(text)\n    text=remove_urls(text)\n    text=remove_html(text)\n    text=remove_stopwords(text)\n    text=remove_punctuation(text)\n#     text=stem_words(text) ## Takes too much of time\n    text=lemmatize_words(text)\n    \n    return text\n","2fd4b9fc":"data[\"reviews_p\"] = data[\"review\"].apply(lambda text: preprocess(text))\ndata.head()","032b74cb":"#Positive reviews\nfrom wordcloud import WordCloud,STOPWORDS\nplt.figure(figsize = (15,15))\nwc = WordCloud(max_words = 200 , width = 1000 , height = 500 , stopwords = STOPWORDS).generate(\" \".join(data[data.sentiment == 1].reviews_p))\nplt.imshow(wc , interpolation = 'bilinear')","2c2ffcf9":"# Negative Reviews.\nplt.figure(figsize = (15,15))\nwc = WordCloud(max_words = 200 , width = 1000 , height = 500 , stopwords = STOPWORDS).generate(\" \".join(data[data.sentiment == 0].reviews_p))\nplt.imshow(wc , interpolation = 'bilinear')","09840afb":"def metrics(model,x,y):\n    y_pred = model.predict(x)\n    acc = accuracy_score(y, y_pred)\n    f1=f1_score(y, y_pred)\n    cm=confusion_matrix(y, y_pred)\n    report=classification_report(y,y_pred)\n    plt.figure(figsize=(4,4))\n    sns.heatmap(cm,annot=True,cmap='coolwarm',xticklabels=[0,1],fmt='d',annot_kws={\"fontsize\":19})\n    plt.xlabel(\"Predicted\",fontsize=16)\n    plt.ylabel(\"Actual\",fontsize=16)\n    plt.show()\n    print(\"\\nAccuracy: \",round(acc,2))\n    print(\"\\nF1 Score: \",round(f1,2))\n#     print(\"\\nConfusion Matrix: \\n\",cm)\n    print(\"\\nReport:\",report)\n    \n    ","6ff287b0":"X=data[['count_sent', 'count_word', 'count_unique_word',\n       'count_letters', 'count_punctuations', 'count_words_upper',\n       'count_words_title', 'count_stopwords', 'mean_word_len',\n       'word_unique_percent', 'punct_percent']]\ny=data['sentiment']","334dba1e":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2,random_state=0)","8342cbdc":"[i.shape for i in [X_train, X_test, y_train, y_test] ]","686a2545":"# Logistic Regression with Indirect features\nclassifier = LogisticRegression(C=0.1, solver='sag')\nclassifier.fit(X_train, y_train)\nmetrics(classifier,X_test,y_test)","d78f34a6":"from textblob import TextBlob","61c33f9d":"def get_sentiment( tweet):\n        analysis = TextBlob(tweet)\n      \n        if analysis.sentiment.polarity > 0:\n            return 'positive'\n        else:\n            return 'negative'","0b72fe55":"data['TextBlob']=data['reviews_p'].apply(lambda x: get_sentiment(x))","f6abe4d4":"print(data.TextBlob.value_counts())\nprint(\"\\n\",data.sentiment.value_counts())","46d84373":"data['TextBlob1']=data.TextBlob.apply(lambda x: 0 if x=='negative' else 1)","77d51247":"accuracy_score(data.sentiment,data.TextBlob1)","edc58add":"plt.figure(figsize=(4,4))\nsns.heatmap(confusion_matrix(data.sentiment,data.TextBlob1),annot=True,cmap='coolwarm',xticklabels=[0,1],fmt='d',annot_kws={\"fontsize\":19})\nplt.xlabel(\"Predicted\",fontsize=16)\nplt.ylabel(\"Actual\",fontsize=16)\nplt.show()\n","e121a5de":"texts = ' '.join(data['reviews_p'])","f4e4a957":"string = texts.split(\" \")","a3f87592":"def draw_n_gram(string,i):\n    n_gram = (pd.Series(nltk.ngrams(string, i)).value_counts())[:7]\n    n_gram_df=pd.DataFrame(n_gram)\n    n_gram_df = n_gram_df.reset_index()\n    n_gram_df = n_gram_df.rename(columns={\"index\": \"word\", 0: \"count\"})\n    print(n_gram_df.head())\n    plt.figure(figsize = (10,5))\n    return sns.barplot(x='count',y='word', data=n_gram_df)","603fb611":"draw_n_gram(string,1)","427de9cb":"draw_n_gram(string,2)","b0cadf3f":"draw_n_gram(string,3)","c1fc4b4d":"X_train, X_test, y_train, y_test = train_test_split(data['reviews_p'], data['sentiment'], test_size=0.2,random_state=0)","8e4c956a":"[i.shape for i in [X_train, X_test, y_train, y_test] ]","c6e27278":"word_vectorizer = TfidfVectorizer(\n    sublinear_tf=True,\n    strip_accents='unicode',\n    analyzer='word',\n    token_pattern=r'\\w{1,}',\n    stop_words='english',\n    ngram_range=(1, 3),\n    max_features=10000\n)\n\nword_vectorizer.fit(data['reviews_p'])\n\ntfidf_train = word_vectorizer.transform(X_train)\ntfidf_test = word_vectorizer.transform(X_test)","6cef1cd0":"# word_vectorizer.get_feature_names()","86670ff2":"print('Shape of tfidf_train:',tfidf_train.shape)\nprint('Shape of tfidf_test:',tfidf_test.shape)","d451fc0f":"cv=CountVectorizer(analyzer = 'word', token_pattern = r'\\w{1,}',ngram_range=(1,3),max_features=10000)\ncv.fit(data['reviews_p'])\ncv_train=cv.transform(X_train)\ncv_test=cv.transform(X_test)","cee71670":"print('Shape of cv_train:',cv_train.shape)\nprint('Shape of cv_test:',cv_test.shape)","6075c25b":"# Logistic Regression with TF-IDF\nclassifier = LogisticRegression(C=0.1, solver='sag')\nclassifier.fit(tfidf_train, y_train)\nmetrics(classifier,tfidf_test,y_test)","4bd4cc60":"# Logistic Regression with Count Vectoriser\nclassifier1 = LogisticRegression(penalty='l2',C=10)\nclassifier1.fit(cv_train, y_train)\n\nmetrics(classifier1,cv_test,y_test)","d68c59d3":"#Naive Bayes with tf_idf\nmodel= MultinomialNB()\n\nmodel.fit(tfidf_train, y_train)\nmetrics(model,tfidf_test,y_test)","022d4e77":"#Naive Bayes with Count Vectorizer\nmodela= MultinomialNB()\n\nmodela.fit(cv_train, y_train)\nmetrics(modela,cv_test,y_test)","80aa74bf":"model = XGBClassifier() #Default XGBoost Model with TF_IDF\nmodel.fit(tfidf_train, y_train)","84fb0b40":"metrics(model,tfidf_test,y_test)","814736e5":"modelcv = XGBClassifier() #Default XGBoost Model with count Vectorizer\nmodelcv.fit(cv_train, y_train)","d773fe8c":"metrics(modelcv,cv_test,y_test)","b2c70750":"from sklearn.svm import LinearSVC\n\nlinear_svc = LinearSVC(penalty='l2')\nlinear_svc.fit(tfidf_train, y_train)\nmetrics(linear_svc,tfidf_test,y_test)","7684f9b0":"#on Count Vectorizer\nlinear_svc1 = LinearSVC(C=0.5, random_state=42)\nlinear_svc1.fit(cv_train, y_train)\n\nmetrics(linear_svc1,cv_test,y_test)","227e5029":"from keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.layers import LSTM,Dropout\nfrom keras.layers.embeddings import Embedding\nfrom keras.preprocessing import sequence\nfrom keras.layers import LSTM, Conv1D, MaxPooling1D, Dropout\nfrom keras.callbacks import EarlyStopping","b8717fd1":"def plot_history(history):\n    acc = history.history['accuracy']\n    val_acc = history.history['val_accuracy']\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n    x = range(1, len(acc) + 1)\n\n    plt.figure(figsize=(12, 5))\n    plt.subplot(1, 2, 1)\n    plt.plot(x, acc, 'b', label='Training acc')\n    plt.plot(x, val_acc, 'r', label='Validation acc')\n    plt.title('Training and validation accuracy')\n    plt.legend()\n    plt.subplot(1, 2, 2)\n    plt.plot(x, loss, 'b', label='Training loss')\n    plt.plot(x, val_loss, 'r', label='Validation loss')\n    plt.title('Training and validation loss')\n    plt.legend()","d3808a55":"## Out of 50k dataset, 36k for training, 4k for Validationa and 10k for testing\n\nX_train, X_test, y_train, y_test = train_test_split(data['reviews_p'], data['sentiment'],test_size=0.2, random_state=0)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train,test_size=0.1, random_state=0)","b5128664":"[x.shape for x in [X_train,X_valid,X_test]]","83569864":"tokenizer = Tokenizer(num_words=5000)\ntokenizer.fit_on_texts(data.reviews_p)\n\nX_train1 = tokenizer.texts_to_sequences(X_train)\nX_valid1 = tokenizer.texts_to_sequences(X_valid)\nX_test1 = tokenizer.texts_to_sequences(X_test)\n\nvocab_size = len(tokenizer.word_index) + 1  # Adding 1 because of reserved 0 index\n\nprint(X_train[2])\nprint(X_train1[2])","ebe86389":"print(X_train[2])\n","53a765bd":"seq_lens = [len(s) for s in X_train1]\nprint(\"average length: %0.1f\" % np.mean(seq_lens))\nprint(\"max length: %d\" % max(seq_lens))","8858bacc":"maxlen = 150\n\nX_train1 = pad_sequences(X_train1, padding='post', maxlen=maxlen)\nX_valid1 = pad_sequences(X_valid1, padding='post', maxlen=maxlen)\nX_test1 = pad_sequences(X_test1, padding='post', maxlen=maxlen)\n\nprint(X_train1[2, :])","8b69fa5c":"vocab_size","45877a54":"embedding_dim = 50\ncallback = EarlyStopping(monitor='val_loss', patience=2)\n\nmodel = Sequential()\nmodel.add(layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=maxlen))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(10, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\n\nmodel.summary()","3ab5857a":"history = model.fit(X_train1, y_train,epochs=10,verbose=True,validation_data=(X_valid1, y_valid),batch_size=1000,callbacks=[callback])","576ac15e":"accuracy_score(y_test, model.predict_classes(X_test1))","336069c1":"plot_history(history)","3b9c9618":"plt.figure(figsize=(4,4))\nsns.heatmap(confusion_matrix(y_test, model.predict_classes(X_test1)),annot=True,cmap='coolwarm',xticklabels=[0,1],fmt='d',annot_kws={\"fontsize\":19})\nplt.xlabel(\"Predicted\",fontsize=16)\nplt.ylabel(\"Actual\",fontsize=16)\nplt.show()\n","7b114462":"X_test1.shape","ec0d317c":"embedding_vecor_length = 32\ncallback = EarlyStopping(monitor='val_loss', patience=2)\n\nmodel = Sequential()\nmodel.add(Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=maxlen))\nmodel.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nprint(model.summary())\n\n","1bdfde01":"model.fit(X_train1, y_train, epochs=10, batch_size=256,verbose = 1,validation_data=(X_valid1,y_valid),callbacks=[callback])","b19ed019":"accuracy_score(y_test, model.predict_classes(X_test1))","52c98910":"history.history","4724f993":"plot_history(history)","2e7c18f9":"plt.figure(figsize=(4,4))\nsns.heatmap(confusion_matrix(y_test, model.predict_classes(X_test1)),annot=True,cmap='coolwarm',xticklabels=[0,1],fmt='d',annot_kws={\"fontsize\":19})\nplt.xlabel(\"Predicted\",fontsize=16)\nplt.ylabel(\"Actual\",fontsize=16)\nplt.show()","cd7013cb":"embedding_vecor_length = 32\ncallback = EarlyStopping(monitor='val_loss', patience=2)\n\nmodel = Sequential()\nmodel.add(Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=maxlen))\nmodel.add(Conv1D(filters=32, kernel_size=3, padding='same', activation='relu'))\nmodel.add(MaxPooling1D(pool_size=2))\nmodel.add(LSTM(100))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nprint(model.summary())\n","d81b0d36":"model.fit(X_train1, y_train, epochs=10, batch_size=256,verbose = 1,validation_data=(X_valid1,y_valid),callbacks=[callback])","b8c48314":"accuracy_score(y_test, model.predict_classes(X_test1))","96cac3c3":"plot_history(history)","fffb1e7b":"This N\ngram analysis showcase words which are\noccurring together in IMDB data base.\nFrom Uni\ngram we see that \u2018Movie\u2019 word occurs more\nthan 1L times in dataset, which is quite obvious.\nFrom Bi\ngram, we see that \u2018look like\u2019 and \u2018ever seen\u2019\nwords have occurred more than 2500 times together\nFrom Tri\ngram, we see that \u2018movie ever seen \u2019 has\nobserved maximum number of times together.","1a28c53e":"#### 1) Understanding Sentiment across Word count\n- This visualization shows us that count of words in positive and negative reviews have same pattern","31c71b47":"### 4) SVM","a7387cc8":"## 1) Logistic Regression","73960644":"# Model based on Indirect Features","2d6b95d2":"#### 4) Mean values on Indirect features","8c31bf44":"<a id = 12><\/a>\n<h2><font color = MidnightBlue>Bigram Analysis<\/font><\/h2>","0b7912e9":"### Utility Function","135b0a17":"## LSTM Model","7c4f8287":"**Problem Statement:**\n\nIn this, we have to predict the number of positive and negative reviews based on sentiments by using different classification models.","cc30407c":"#### 2) Understanding Sentiment across Punctuation count\n- This shows usage of punctuations is same in both sentiments. This negate general perception of higher usage of punctuation in negative reviews","06001a6f":"### 3) XGBoost","bac3d931":"## N-gram Analysis\n- The order that words are used in text is not random. In English, for example, you can say \"the red apple\" but not \"apple red the\". The general idea is that you can look at each pair (or double, triple etc.) of words that occur next to each other. In a sufficently-large corpus, you're likely to see \"the red\" and \"red apple\" several times, but less likely to see \"apple red\" and \"red the\". This is useful to know if, for example, you're trying to figure out what someone is more likely to say to help decide between possible output for an automatic speech recognition system. These co-occuring words are known as \"n-grams\", where \"n\" is a number saying how long a string of words you considered.","acd2927f":"<b> In machine learning task, cleaning or pre-processing the data is as important as model building if not more. And when it comes to unstructured data like text, this process is of most importance. IMDB reviews are posted by users manually, so we observe high usage of contractions and chat words in it. Also, some reviews are collected from other sites, so we also observe usage of many HTML tags in dataset.<\/b>\n\n**a. Clean Contractions or Chat Words:**\nAs this is manually entered reviews, people do use a lot of abbreviated words in chat and so it is important for us to expand all such chat words and contractions used. I\u2019ve used list of slangs and contractions from repo.\n\n**b. Lower Casing** Lower casing is a common text preprocessing technique. The idea is to convert the input text into same casing format so that 'text', 'Text' and 'TEXT' are treated the same way. This is more helpful for text featurization techniques like frequency, tfidf as it helps to combine the same words together thereby reducing the duplication and get correct counts \/ tfidf values.\n\n**c. Removal Of Stop Words**\nStopwords are commonly occuring words in a language like 'the', 'a' and so on. They can be removed from the text most of the times, as they don't provide valuable information for downstream analysis. These stopword lists are already compiled for different languages and we can safely use them. For example, the stopword list for english language is,\n\n**d. Stemming** Stemming is the process of reducing inflected (or sometimes derived) words to their word stem, base or root form. For example, if there are two words in the corpus walks and walking, then stemming will stem the suffix to make them walk. In some cases, stemming results in shorting the world literals and we lose information in it. So Lemmatization is better process.\n\n**e. Lemmatization**\nLemmatization is similar to stemming in reducing inflected words to their word stem but differs in the way that it makes sure the root word (also called as lemma) belongs to the language. As a result, this one is generally slower than stemming process. I\u2019m using standard WordNetLemmatizer for work.\n\n**f. Removal Of Emojis & Emoticons** With more and more usage of social media platforms, there is an explosion in the usage of emojis in our day to day life as well. As IMDB reviews are manually added, we found usage of Emojis & Emoticons, so we removed them.\n\n**g. Removal Of Urls & HTML Tags:**\nWe found large usage of HTML tags in dataset. To make sense of dataset, such tags to be removed.\n\n**h. Removal Of Punctuations** In this process, we remove the punctuations (!\"#$%&\\'()*+,-.\/:;<=>?@[\\\\]^_`{|}~) from the text data. This is a text standardization process that will help to treat 'hurray' and 'hurray!' in the same way. Note of caution- This process has to be performed after removal of HTML tags else some standard tags of HTML will partially get removed in this process and afterwards HTML removal process will not give suitable results.","4e4e6669":"- As expected, this model is giving us poor accuracy of 58% as we depicted in EDA. Indirect features have very similar trends and patterns across both the classes, we have seen in EDA portion.","f9258d3d":"## 2) Naive Bayes","661c87e1":"<a id = 11><\/a>\n<h2><font color = MidnightBlue>Unigram Analysis<\/font><\/h2>","013f2c2a":"### **2) Count Vectorizer-** \n- It is tool provided by the scikit-learn library in Python. It is used to transform a given text into a vector on the basis of the frequency (count) of each word that occurs in the entire text. CountVectorizer creates a matrix in which each unique word is represented by a column of the matrix, and each text sample from the document is a row in the matrix. The value of each cell is nothing but the count of the word in that particular text sample.","8cea58b4":"### Change Target variable","5db03d80":"We can see that the dataset is perfectly balanced.","46d25782":"- Selecting numerical features for training model","821f24c0":"### **1) TF-IDF-** \n- In TF-IDF which based on the frequency method but it is different to the count vectorization in the sense that it takes into account not just the occurrence of a word in a single document but in the entire corpus. Common words like \u2018is\u2019, \u2018the\u2019, \u2018a\u2019 etc. tend to appear quite frequently in comparison to the words which are important to a document. Ideally, what we would want is to down weight the common words occurring in almost all documents and give more importance to words that appear in a subset of documents. TF-IDF works by penalising these common words by assigning them lower weights while giving importance to words like Messi in a particular document.","dfd8ff04":"- This shows mean value of each indirect feature is almost similar for both the sentiments. No starling differences were observed for any feature. This also indicate that model comprising these indirect features as explanatory variable will not yield good accuracy score. So to get good classification model, we have to develop machine learning or neural network model based on word vectorizer only.","69cd85a5":"## Unsupervised- Pre-trained model- TextBlob \n- TextBlob is a python library for Natural Language Processing (NLP). TextBlob actively used Natural Language ToolKit (NLTK) to achieve tasks related to sentiment analysis. NLTK is a library which gives an easy access to a lot of lexical resources and allows users to work with categorization, classification and many other tasks. TextBlob is a simple library which supports complex analysis and operations on textual data. For lexicon-based approaches, a sentiment is defined by its semantic orientation and the intensity of each word in the sentence. This requires a pre-defined dictionary classifying negative and positive words. Generally, a text message will be represented by bag of words. After assigning individual scores to all the words, final sentiment is calculated by some pooling operation like taking an average of all the sentiments.","8f71ad8e":"# Word Embedding: \n- Many Machine Learning algorithms and almost all Deep Learning Architectures are incapable of processing strings or plain text in their raw form. They require numbers as inputs to perform any sort of job, be it classification, regression etc. in broad terms. A Word Embedding format generally tries to map a word using a dictionary to a vector.\n\n## Frequency Based Vectorization","37949777":"#### 5) Histogram for word count for both classes","ce7f1f56":"## Text Preprocessing of Reviews","3084d328":"<a id = 13><\/a>\n<h2><font color = MidnightBlue>Trigram Analysis<\/font><\/h2>","193d645e":"- This model gives us accuracy of 69%. This model is not able to perform the best way possible as negative reviews contain any negative words. We know, after assigning individual scores to all the words, final sentiment is calculated by some pooling operation like taking an average of all the sentiments","3259f9df":"- From these word clouds, we are not able to judge any starling differences in both the sentiments by looking at words. We don\u2019t see usage of extreme negative connotation or abusive language used while writing negative reviews.","972a3a9e":"## Neural Network Models","7f7378fa":"#### Let's start with feature extraction.\n<a id = 3><\/a>\n<h1><font color = MidnightBlue>Feature Engineering<\/font><\/h1>\n<hr style=\"width:100%;height:1.2px;border-width:0;background-color:silver\">\n\n### Indirect features:\n\n- count of sentences\n- count of words\n- count of unique words\n- -count of letters\n- count of punctuations\n- count of uppercase words\/letters\n- count of stop words\n- Avg length of each word","dc1f5f50":"# Word Cloud","3b641fe4":"**Sentiment Analysis of IMDB Movie Reviews**","6119d98a":"#### 2) Understanding Sentiment across Stopwords count\n- This graph don't highlight any specific feature across classes.","ecaa3b69":"## Machine Learning Models","4e1236b7":"**Sentiment count**","f00d4767":"# CNN Model\nhttps:\/\/github.com\/mrunal46\/Text-Classification-using-LSTM-and-CNN\/blob\/master\/LSTM%20and%20CNN%20on%20imdb.ipynb","b370fceb":"### Visualization- Understand your data better"}}