{"cell_type":{"6460cda3":"code","67d7ba98":"code","baa94795":"code","0f9b9900":"code","7b08d5ab":"code","d8651da5":"code","ec657ccb":"code","9f455355":"code","9034adfe":"code","3b1eb80d":"code","61d853e4":"code","3a75f1b9":"code","cb9fe2c1":"code","e6194d98":"code","d43c218c":"markdown"},"source":{"6460cda3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport itertools\nimport warnings\nwarnings.filterwarnings(\"ignore\")","67d7ba98":"df = pd.read_csv('..\/input\/BankNote_Authentication.csv')\ndf.head(5)","baa94795":"#Class is our Target Label, with zero indicating the Bank Note is Forged and 1 Indicating it is Legit\ndf['class'].value_counts() #to check if the data is equally balanced between the two classes for prediction","0f9b9900":"#defining features and target variable\ny = df['class']\nX = df.drop(columns = ['class'])\n\n#splitting the data into train and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","7b08d5ab":"#Predicting using Logistic Regression for Binary classification \nfrom sklearn.linear_model import LogisticRegression\nLR = LogisticRegression()\nLR.fit(X_train,y_train) #fitting the model \ny_pred = LR.predict(X_test) #prediction ","d8651da5":"#Evaluation \ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.tight_layout()\n\n\n# Compute confusion matrix\ncnf_matrix = confusion_matrix(y_test, y_pred)\nnp.set_printoptions(precision=2)\n\n# Plot non-normalized confusion matrix\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes=['Forged','Authorized'],\n                      title='Confusion matrix, without normalization')","ec657ccb":"#extracting true_positives, false_positives, true_negatives, false_negatives\ntn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()\nprint(\"True Negatives: \",tn)\nprint(\"False Positives: \",fp)\nprint(\"False Negatives: \",fn)\nprint(\"True Positives: \",tp)","9f455355":"#Accuracy (%) \nAccuracy = (tn+tp)*100\/(tp+tn+fp+fn) \nprint(\"Accuracy {:0.2f}%\".format(Accuracy))","9034adfe":"#Precision \nPrecision = tp\/(tp+fp) \nprint(\"Precision {:0.2f}\".format(Precision))","3b1eb80d":"#Recall \nRecall = tp\/(tp+fn) \nprint(\"Recall {:0.2f}\".format(Recall))","61d853e4":"#F1 Score\nf1 = (2*Precision*Recall)\/(Precision + Recall)\nprint(\"F1 Score {:0.2f}\".format(f1))","3a75f1b9":"#Fbeta score\ndef fbeta(precision, recall, beta):\n    return ((1+pow(beta,2))*precision*recall)\/(pow(beta,2)*precision + recall)\n            \nf2 = fbeta(Precision, Recall, 2)\nf0_5 = fbeta(Precision, Recall, 0.5)\n\nprint(\"F2 {:0.2f}\".format(f2))\nprint(\"\\nF0.5 {:0.2f}\".format(f0_5))","cb9fe2c1":"#Specificity \nSpecificity = tn\/(tn+fp)\nprint(\"Specificity {:0.2f}\".format(Specificity))","e6194d98":"#ROC\nimport scikitplot as skplt #to make things easy\ny_pred_proba = LR.predict_proba(X_test)\nskplt.metrics.plot_roc_curve(y_test, y_pred_proba)\nplt.show()","d43c218c":"The Following work is a part of the Medium Post an attempt to make everyone familiar with Confusion Matrix and related evaluation Metrics! \n\nYou can [read the Article here](https:\/\/medium.com\/@salrite\/demystifying-confusion-matrix-confusion-9e82201592fd). Please upvote the Kernel in-case you liked the Article. \nForged & Authorized Note, Binary Classifier based on the [UCI Dataset](https:\/\/archive.ics.uci.edu\/ml\/datasets\/banknote+authentication).\n\n![](https:\/\/img-aws.ehowcdn.com\/877x500p\/s3.amazonaws.com\/photography.prod.demandstudios.com\/8ac96de8-3f1f-438d-848a-c573e021532b.jpg)"}}