{"cell_type":{"16dc563e":"code","79328d21":"code","50e98d57":"code","331f38ac":"code","d5aede85":"code","e1a5787e":"code","4f4d9dd5":"code","1c812414":"code","2a65d419":"code","4a367818":"code","fd344061":"code","6ea29b2b":"code","d79f9bb5":"code","d84748a6":"code","96ad5af3":"code","c9e90965":"markdown","9967756c":"markdown","e5af51a0":"markdown","47fb410c":"markdown","e3ac0ef0":"markdown","9832478a":"markdown","440b11e5":"markdown","85a3925a":"markdown"},"source":{"16dc563e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotnine as p9\nfrom plotnine import *\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","79328d21":"# Read Train Data\ntrain = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\ntrain.head()\nbook_df = pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet')\ntrade_df =  pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet')","50e98d57":"# Specify Stock ID to analyse volatility\nstock_id = 0\ntime_id = 5","331f38ac":"book_sample = book_df[(book_df['stock_id']==stock_id)&(book_df['time_id']==time_id)]\nbook_sample.loc[:,'stock_id'] = stock_id\ntrade_sample = trade_df[(book_df['stock_id']==stock_id)&(book_df['time_id']==time_id)]\ntrade_sample.loc[:,'stock_id'] = stock_id","d5aede85":"book_sample","e1a5787e":"trade_sample.head()","4f4d9dd5":"plot_df = pd.merge(book_sample, trade_sample, on = ['stock_id','time_id','seconds_in_bucket'], how = 'left')\nplot_df['price'] = plot_df['price'].ffill().bfill().rolling(10).mean()\nplot_df = plot_df[['seconds_in_bucket', 'bid_price1','ask_price1','bid_price2','ask_price2', 'price']].melt(id_vars=[\"seconds_in_bucket\"], \n        var_name=\"Variable\", \n        value_name=\"Value\")\ncolors = {'bid_price1':'royalblue', 'ask_price1':'maroon', 'bid_price2' : 'lightsteelblue', 'ask_price2' : 'indianred', 'price' : 'cyan'}  \n# Create a time series plot\n(\n    ggplot(data = plot_df)+\n    geom_line(aes(x='seconds_in_bucket', y = 'Value', color = 'Variable'), size = 1.5)+\n    \n    labs(title = 'Various OrderBook Prices of stock_id : ' + str(stock_id) + ', time_id : ' + str(time_id))+\n    xlab('seconds_in_bucket') \n    + theme(figure_size=(16, 8)) + scale_color_manual(values = colors)\n)","1c812414":"book_sample['wap'] = (book_sample['bid_price1'] * book_sample['ask_size1'] +\n                                book_sample['ask_price1'] * book_sample['bid_size1']) \/ (\n                                       book_sample['bid_size1']+ book_sample['ask_size1'])","2a65d419":"# Create a time series plot\n(\n    ggplot(data = book_sample)+\n    geom_line(aes(x = 'seconds_in_bucket',\n                  y = 'wap',\n                  group = 1),\n              size = 1.5,\n              color = 'navy')+\n    labs(title = 'WAP of stock_id : ' + str(stock_id) + ', time_id : ' + str(time_id))+\n    xlab('seconds_in_bucket')+\n    ylab('wap') + theme(figure_size=(16, 8))\n)","4a367818":"def log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff() \nbook_sample.loc[:,'log_return'] = log_return(book_sample['wap'])\nbook_sample = book_sample[~book_sample['log_return'].isnull()]\n# Create a time series plot\n(\n    ggplot(data = book_sample)+\n    geom_line(aes(x = 'seconds_in_bucket',\n                  y = 'log_return',\n                  group = 1),\n              size = 1.5,\n              color = 'cadetblue')+\n    labs(title = 'log_return of stock_id : ' + str(stock_id) + ', time_id : ' + str(time_id))+\n    xlab('seconds_in_bucket')+\n    ylab('log_return') + theme(figure_size=(16, 8))\n)","fd344061":"fig = go.Figure(data=go.Heatmap(\n        z=book_sample[\"bid_size1\"],\n        x=book_sample[\"seconds_in_bucket\"],\n        y=book_sample[\"bid_price1\"],\n        colorscale='Viridis'))\n\nfig.update_layout(\n    title='Bidding Price and Order Size',\n    xaxis_nticks=36)\n\nfig.show()","6ea29b2b":"fig = go.Figure(data=go.Heatmap(\n        z=book_sample[\"ask_size1\"],\n        x=book_sample[\"seconds_in_bucket\"],\n        y=book_sample[\"ask_price1\"],\n        colorscale='Viridis'))\n\nfig.update_layout(\n    title='Asking Price and Order Size',\n    xaxis_nticks=36)\n\nfig.show()","d79f9bb5":"# At what price did trading happen(transaction complete) between ask and bid price\nplot_df = pd.merge(book_sample, trade_sample, on = ['stock_id','time_id','seconds_in_bucket'], how = 'left').dropna(subset = ['size'])\nfig = px.scatter(plot_df, x=\"ask_price1\", y=\"bid_price1\", size=\"size\", size_max=60)\nfig.update_layout(\n    title='Volume of Trades Executed at what bid\/ask price')\nfig.show()","d84748a6":"buy_df = book_sample[['seconds_in_bucket','bid_price1','bid_size1']]\nbuy_df['side'] = 'buy'\nsell_df = book_sample[['seconds_in_bucket','ask_price1','ask_size1']]\nsell_df['side'] = 'sell'\nplot_df = pd.concat([buy_df, sell_df], axis = 0)\nplot_df['quantity'] = plot_df['bid_size1'].fillna(0) + plot_df['ask_size1'].fillna(0)\nplot_df['price'] = plot_df['bid_price1'].fillna(0) + plot_df['ask_price1'].fillna(0)\nplot_df = plot_df.groupby(['price','side']).quantity.sum().reset_index()\nplot_df","96ad5af3":"import matplotlib.style as style\nstyle.use('fivethirtyeight')\nfig, ax = plt.subplots(figsize = (20,10))\n\nax.set_title('Weighted ECDF Plot of stock_id : ' + str(stock_id) + ', time_id : ' + str(time_id))\n\nsns.ecdfplot(x=\"price\", weights=\"quantity\", stat=\"count\", complementary=True, data=plot_df[plot_df.side == \"buy\"], ax=ax)\nsns.ecdfplot(x=\"price\", weights=\"quantity\", stat=\"count\", data=plot_df[plot_df.side == \"sell\"], ax=ax)\n# sns.scatterplot(x=\"price\", y=\"quantity\", hue=\"side\", data=data, ax=ax)\n\nax.set_xlabel(\"Price\")\nax.set_ylabel(\"Quantity\")\n\nplt.show()","c9e90965":"### In this notebook, we try to analyse the volatility of stocks from different research papers. Will be an extension to the starter notebook (https:\/\/www.kaggle.com\/jiashenliu\/introduction-to-financial-concepts-and-data)","9967756c":"# Work In Progress\n\n* More Financial Concepts\n* Insights from Above plots","e5af51a0":"## Complex Plot combining all info","47fb410c":"## Bid\/Ask\/Trade ","e3ac0ef0":"# Optiver Realized Volatility EDA\n![](https:\/\/media.istockphoto.com\/vectors\/stockmarketconcept-vector-id1262967772?k=6&m=1262967772&s=612x612&w=0&h=cfo-mSbEeMI8VY1BpgQUNuUEJoOaXK28OBjgxpV68xc=)","9832478a":"\n#### Stock Market in different countries is always a tug of war between the bears(who pull the price down) and bulls(who pull the price up). At a particular point in time,a stock price is determined by simple supply and demand. \n#### Stock price may be affected by different factors like economic releases, company news, a recommendation from a well-known analyst, a popular initial public offering (IPO) or unexpected earnings results.\n#### Due to different factors mentioned above, the price may be volatile i.e increase or decrease in a short interval of time based on the market's emotion(stakeholders\/investors).\n#### Order book is an electronic buy (number of buy orders at a particular price) and sell (number of buy orders at a particular price) list at each price levels.\n![](https:\/\/zerodha.com\/z-connect\/wp-content\/uploads\/2017\/12\/Floating-MarketDepth.png)\n#### Above is a simple order book of a stock listed in NSE of Indian Stock Market called Reliance Industries. In the above image, we can see that bid column represents the buyer orders at each price level of 925.5, 925.45 etc with the quantity and orders. In the same fashion, there is offer column which represents the seller orders at each price level.\n#### Volatility is really important as it can indicate and help in assigning risk level to a particular stock\/index\/securities.\n#### Order book data provide the maximum amount of information about stock\/index\/securities at the lowest aggregation level.","440b11e5":"## Log Returns","85a3925a":"## Realized Volatility"}}