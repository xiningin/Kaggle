{"cell_type":{"392c85ed":"code","ec5208ba":"code","3ffa6de0":"code","7def2915":"code","6bfedf4a":"code","27ee5c39":"code","ce7c3239":"code","bb344948":"code","95a9020d":"code","038af5dd":"code","7ce39b5d":"code","18127964":"code","3b654037":"code","826fc134":"code","9406c68c":"code","048cf7e6":"code","a512386c":"code","94b20387":"code","13c97acf":"code","ca83537d":"code","f65cda0b":"code","52d5f957":"code","e0109d17":"code","478a58ea":"code","ef2a6b85":"code","a63dcf3f":"code","d5d5d465":"code","34e1b300":"code","3c979c22":"code","10c82e70":"code","da43bc65":"code","9fb8dd2c":"code","888fd702":"code","dec701af":"code","d52d3e7e":"code","8c4f18fb":"code","55df9345":"code","8af009bd":"code","a563fa8a":"code","318325ce":"code","4e770d6c":"code","13574a9e":"code","bcd9a452":"code","dc61ea27":"code","049f921f":"code","8c882139":"code","944e974d":"code","cdc09939":"code","12aa2489":"code","63b78c06":"code","0e6b3311":"code","3cf702f4":"code","39c32bbd":"code","1f6a4c50":"code","ac71954f":"code","4b353de7":"code","0a0cc6c0":"code","88f14765":"code","9ec286d1":"code","ca28c41f":"code","17e888d0":"code","a1fc7e91":"code","3166c61e":"code","edb61a8e":"code","40feaddf":"code","c7b325c3":"code","3c40b520":"code","939f2930":"code","c68ecae4":"code","b950c8b0":"code","20e8b9f3":"markdown","6aeb69d7":"markdown","4ef30f46":"markdown","13639acd":"markdown","5d6cf8cb":"markdown","af31cb7c":"markdown","3dd5b7d9":"markdown","5a4e6e2d":"markdown","a8f50a1b":"markdown","7a852b4b":"markdown","853fb16f":"markdown","7e282347":"markdown","74f5d166":"markdown","0ce115e2":"markdown"},"source":{"392c85ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \nfrom subprocess import check_output             # utf-8 e uygun olup olmadigini arastirmak icin bunu aratiyoruz\nprint(check_output([\"ls\",\"..\/input\"]).decode(\"utf8\"))\n        \n\n# Any results you write to the current directory are saved as output.","ec5208ba":"data = pd.read_csv('\/kaggle\/input\/world-foodfeed-production\/FAO.csv', encoding='cp1254')          ","3ffa6de0":"data.head()","7def2915":"data.info()   ","6bfedf4a":"data.Y2012 = data.Y2012.astype(float)\ndata.Y2013 = data.Y2013.astype(float)","27ee5c39":"data.info()","ce7c3239":"data.rename(columns={'Area Abbreviation': 'Area_Abbreviation', 'Item Code': 'Item_Code', 'Element Code': 'Element_Code', 'Area Code': 'Area_Code'}, inplace=True)","bb344948":"data.head()","95a9020d":"area_list = list(data['Area'].unique())\n# print(area_list)\n\narea_Y1961_ratio = []\nfor i in area_list:\n    x = data[data['Area']==i]\n    area_Y1961_rate = sum(x.Y1961)\/len(x)\n    area_Y1961_ratio.append(area_Y1961_rate)\ndata1 = pd.DataFrame({'area_list': area_list,'area_Y1961_ratio':area_Y1961_ratio})\n\n# Duzenlenen datayi yeniden index lememiz gerekiyor ki duzenli gorunsun!!! Bunun icin:\n\nnew_index = (data1['area_Y1961_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data1.reindex(new_index)","038af5dd":"print(sorted_data)","7ce39b5d":"data1.head()","18127964":"# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['area_list'].head(20), y=sorted_data['area_Y1961_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('States')\nplt.ylabel('Y1961')\nplt.title('Y1961 States')","3b654037":"data.head()","826fc134":"data.Item.value_counts()","9406c68c":"name_count = Counter(data.Item)\nprint(name_count)\n\nmost_common_names = name_count.most_common(15)  \nx,y = zip(*most_common_names)\nx,y = list(x),list(y)","048cf7e6":"# PLOT unu cizelim\n\nplt.figure(figsize=(25,10))\nax= sns.barplot(x=x, y=y,palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Item Names')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Item Names')\nprint(most_common_names)","a512386c":"data.head()","94b20387":"# area_list = list(data['Area'].unique())\n# print(area_list)\n\narea_Y2013_ratio = []\nfor i in area_list:\n    x = data[data['Area']==i]\n    area_Y2013_rate = sum(x.Y2013)\/len(x)\n    area_Y2013_ratio.append(area_Y2013_rate)\ndata2 = pd.DataFrame({'area_list': area_list,'area_Y2013_ratio':area_Y2013_ratio})\n\n# Duzenlenen datayi yeniden index lememiz gerekiyor ki duzenli gorunsun!!! Bunun icin:\n\nnew_index = (data2['area_Y2013_ratio'].sort_values(ascending=False)).index.values\nsorted_data2 = data2.reindex(new_index)","13c97acf":"# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2['area_list'].head(20), y=sorted_data2['area_Y2013_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('States')\nplt.ylabel('Y2013')\nplt.title('Y2013 States')","ca83537d":"data.head()","f65cda0b":"Item_Code = []\nElement_Code = []\nY1961 = []\nY2013 = []\n\nfor i in area_list:\n    x = data[data['Area']==i]\n    Item_Code.append(sum(x.Item_Code)\/len(x))\n    Element_Code.append(sum(x.Element_Code)\/len(x))\n    Y1961.append(sum(x.Y1961)\/len(x))\n    Y2013.append(sum(x.Y2013)\/len(x))\n","52d5f957":"# visualization\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=Item_Code,y=area_list,color='green',alpha = 0.5,label='Item Code' )\nsns.barplot(x=Element_Code,y=area_list,color='blue',alpha = 0.7,label='Element Code')\nsns.barplot(x=Y1961,y=area_list,color='cyan',alpha = 0.6,label='Year 1961')\nsns.barplot(x=Y2013,y=area_list,color='yellow',alpha = 0.6,label='Year 2013')\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Percentage of Items, Elements', ylabel='States',title = \"Percentage of State's Food Using \")","e0109d17":"data.head()","478a58ea":"data.sort_values('Item').head()","ef2a6b85":"sorted_data['area_Y1961_ratio'] = sorted_data['area_Y1961_ratio']\/max( sorted_data['area_Y1961_ratio'])\nsorted_data2['area_Y2013_ratio'] = sorted_data2['area_Y2013_ratio']\/max( sorted_data2['area_Y2013_ratio'])\ndata3 = pd.concat([sorted_data,sorted_data2['area_Y2013_ratio']],axis=1)\ndata3.sort_values('area_Y1961_ratio',inplace=True)","a63dcf3f":"# visualize\nf,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='Area_Abbreviation',y='Y1961',data=data,color='lime',alpha=0.8)\nsns.pointplot(x='Area_Abbreviation',y='Y2013',data=data,color='red',alpha=0.8)\nplt.text(40,0.6,'Foods of Y1961',color='red',fontsize = 17,style = 'italic')   # burdaki degerler yazilarin konumlari istedigimiz gibi degistirebiliriz\nplt.text(40,0.55,'Foods of Y2013',color='lime',fontsize = 18,style = 'italic')\nplt.xlabel('States',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('FOODS for Y1961  VS  Y2013',fontsize = 20,color='blue')\nplt.grid()","d5d5d465":"data.Y1961.plot(kind= 'line', color= 'b', label= 'Y1961', linewidth= 2, alpha= 0.5, grid= True, linestyle= '-')\ndata.Y2013.plot(color= 'r', label= 'Y2013', linewidth= 2, alpha= 0.5, grid= True, linestyle= '-')\nplt.legend(loc= 'upper right')          #legend= puts label into plot\nplt.xlabel('x axis')                    #label= name of label\nplt.ylabel('y axis')                    #label= name of label\nplt.title('Line Plot')                  #title= title of plot\nplt.show()","34e1b300":"data.head()","3c979c22":"g = sns.jointplot(data.Y1961, data.Y2013, kind=\"kde\", size=7)\nplt.savefig('graph.png')                          # bu bize sekilleri kaydetmemizi saglar\nplt.show()","10c82e70":"# you can change parameters of joint plot\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# Different usage of parameters but same plot with previous one\n\ng = sns.jointplot(\"Y1961\", \"Y2013\", data=data,size=5, ratio=3, color=\"r\")","da43bc65":"data.Item.dropna(inplace = True)\nlabels = data.Item.value_counts().index\ncolors = ['grey','blue','red','yellow','green','brown']\nexplode = [0,0,0,0,0,0]\nsizes = data.Item.value_counts().values\n\n# visual\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=None, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Foods According to Items',color = 'blue',fontsize = 15)","9fb8dd2c":"data3.head()","888fd702":"# Visualization of Foods Y1961 vs Y2013 of each state with different style of seaborn code\n# lmplot \n# Show the results of a linear regression within each dataset\n\n\nsns.lmplot(x=\"area_Y1961_ratio\", y=\"area_Y2013_ratio\", data=data3)\nplt.show()","dec701af":"data.head()","d52d3e7e":"# cubehelix plot\n# 2013 teki itemslerin cubhelix cizelim\n\nsns.kdeplot(data.Area_Code, data.Y2013, shade=True, cut=3)      # burada 'cut' sekil arasi genisligi verir\nplt.show()","8c4f18fb":"# Show each distribution with both violins and points\n# Use cubehelix to get a custom sequential palette\n\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=data, palette=pal, inner=\"points\")\nplt.show()","55df9345":"# Ilk once korelasyonuna bakalim\n\ndata3.corr()","8af009bd":"#correlation map\n# Visualization of Y1961 rate vs Y2013 rate of each state with different style of seaborn code\n\nf,ax = plt.subplots(figsize=(5, 5))\nsns.heatmap(data3.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","a563fa8a":"data.Item.head().unique()","318325ce":"data.head()","4e770d6c":"# Food Yiyecek\n# Feed: Besleme\n# Plot the orbital period with horizontal boxes\n\nsns.boxplot(x=\"Area_Code\", y=\"Element_Code\", hue=\"Element\", data=data, palette=\"PRGn\")\nplt.show()","13574a9e":"# swarm plot\n\nsns.swarmplot(x=\"Item\", y=\"Y2013\",hue=\"Element\", data=data)\nplt.show()","bcd9a452":"data3.head()","dc61ea27":"# pair plot\nsns.pairplot(data3)\nplt.show()","049f921f":"data.Element.value_counts()","8c882139":"\nsns.countplot(data.Element)\n#sns.countplot(data.Item)                 # istersek bunuda ayri ayri cizdirebiliriz\nplt.title(\"Element\",color = 'blue',fontsize=15)","944e974d":"data3.head()","cdc09939":"area_list = data3.area_list.value_counts()\n#print(area_list)\n\nplt.figure(figsize=(10,7))\nsns.barplot(x=area_list[:7].index,y=area_list[:7].values)\nplt.ylabel('Number of Foods')\nplt.xlabel('Areas')\nplt.title('Countries',color = 'blue',fontsize=15)","12aa2489":"data.head()","63b78c06":"above2800 =['above2800' if i >= 2800 else 'below2800' for i in data.Item_Code]\ndf = pd.DataFrame({'Item_Code':above2800})\nsns.countplot(x=df.Item_Code)\nplt.ylabel('Number of Item_Code')\nplt.title('Item_Code of Foods',color = 'blue',fontsize=15)","0e6b3311":"sns.countplot(data=data.head(1000), x='Area')\nplt.title('Number of foods for Countries',color = 'blue',fontsize=15)","3cf702f4":"# Most dangerous cities\nmost_common_names\nItem = data.Item.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=Item[:12].index,y=Item[:12].values)                 # 12. sutunu aliyoruz\nplt.xticks(rotation=45)\nplt.title('Most common item names',color = 'blue',fontsize=15)","39c32bbd":"sns.countplot(data.Element)\nplt.xlabel('Element Types')\nplt.title('Element types',color = 'blue', fontsize = 15)","1f6a4c50":"# Korelasyon matrix\n\nf = plt.figure(figsize=(19, 15))\nplt.matshow(data.corr(), fignum=f.number)\nplt.xticks(range(data.shape[1]), data.columns, fontsize=10, rotation=45)\nplt.yticks(range(data.shape[1]), data.columns, fontsize=14)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=14)\nplt.title('Correlation Matrix', fontsize=19);","ac71954f":"data.plot(kind = 'scatter', x = 'Y2000', y= 'Y2013', alpha = 0.5, color = 'red')\nplt.xlabel('Y2000')\nplt.ylabel('Y2013')\nplt.title('Y2000 & Y2013 Scatter Plot')\nplt.show()","4b353de7":"data.Y2013.plot(kind = 'hist',bins = 70, figsize = (15,15))\nplt.show()","0a0cc6c0":"data.Y1961.plot(kind = 'hist',bins = 50)\nplt.clf()","88f14765":"series = data['Y1961']                           \nprint(type(series))     \ndata_frame = data[['Y2013']]  \nprint(type(data_frame))","9ec286d1":"x = data['Y2010'] < 200                  # Defans de\u011feri 200'den KUCUK olan verileri x de\u011fi\u015fkenine at\u0131yoruz.\nprint(x)                                 # bu sekilde true false olanlarin hepsini gosterir\ndata[x]","ca28c41f":"data[np.logical_and(data['Y1961'] > 200, data['Y2013'] < 2030 )]","17e888d0":"\n# lets classify foods whether they have high or low use. Our threshold is average food use.\nthreshold = sum(data.Y2013)\/len(data.Y2013)\ndata[\"use_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Y2013]\ndata.loc[:33,[\"use_level\",\"Y2013\"]] # we will learn loc more detailed later","a1fc7e91":"data.info()","3166c61e":"data.describe()","edb61a8e":"data.dropna(inplace = True)  \ndata.describe()\n\n# bos degerler olmadigindan yukaridakinin ayni degerlerini verir. Bos degerler olsaydi pokemondaki gibi filtrelerdik","40feaddf":"# Black line at top is max\n# Blue line at top is 75%\n# Red line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ndata.boxplot(column='Area_Code',by = 'Y2013')","c7b325c3":"data_new = data.head()    # I only take 5 rows into new data\ndata_new","3c40b520":"\n# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'Item', value_vars= ['Y1961','Y2013'])\nmelted","939f2930":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'value', columns = 'variable',values='Item')","c68ecae4":"# Firstly lets create 2 data frame\ndata1 = data.head()\ndata2 = data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","b950c8b0":"data3 = data['Item'].head()\ndata1 = data['Y2000'].head()\ndata2= data['Y2013'].head()\nconc_data_col = pd.concat([data3,data1,data2],axis =1) # axis = 0 : adds dataframes in row\nconc_data_col","20e8b9f3":"# Violin Plot cizimi","6aeb69d7":"# Swarm Plot","4ef30f46":"# Count Plot","13639acd":"Urunlere gore uretimleri gosterelim...","5d6cf8cb":"# Heatmap","af31cb7c":"Gorsellestirelim...","3dd5b7d9":"En son normallesmis datayi gorsellestirelim...","5a4e6e2d":"Y2013 e gore gorsellestirelim...","a8f50a1b":"Sutun isimlerini atama yaparken sikinti cikmasin diye degistirelim","7a852b4b":"# Kde Plot cizimi","853fb16f":"# Lm Plot cizim","7e282347":"# Pair Plot","74f5d166":"# Box Plot cizimi","0ce115e2":"# bilgilere bakildigin sikinti gorulmuyor sadece Y2012 ve Y2013 float olmali bunu duzeltelim"}}