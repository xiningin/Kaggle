{"cell_type":{"5ecc849e":"code","ebeabcb7":"code","7af17d9d":"code","548beb39":"code","b2a3680f":"code","8544ad60":"code","468be3c6":"code","2f31eb15":"code","c823efeb":"code","10e14d33":"code","38503e22":"code","e3cda6e3":"code","e61eb664":"code","d2eada94":"code","42475355":"code","3ed546f0":"code","ad6db184":"markdown","50d8f468":"markdown","1d679825":"markdown","cbca6a48":"markdown","df91fa8b":"markdown","3e7b3b15":"markdown","5385a5c4":"markdown","df7856a8":"markdown","bd25019a":"markdown"},"source":{"5ecc849e":"import os\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport random\nfrom sklearn.model_selection import train_test_split\n","ebeabcb7":"cnn_image_shape = (128, 128)","7af17d9d":"anime_path = '..\/input\/anime-and-cartoon-image-classification\/Training Data\/Anime\/'\n\nX = []\ny = []\n\nfor folder in os.scandir(anime_path):\n    for file in os.scandir(anime_path + folder.name):\n        img = cv2.imread(anime_path + folder.name + '\/' + file.name, cv2.IMREAD_COLOR)\n        img = cv2.resize(img, cnn_image_shape)\n        img = np.array(img, dtype='float32')\n        X.append(img)\n        y.append(0)","548beb39":"cartoon_path = '..\/input\/anime-and-cartoon-image-classification\/Training Data\/Cartoon\/'\n\nfor folder in os.scandir(cartoon_path):\n    for file in os.scandir(cartoon_path + folder.name):\n        img = cv2.imread(cartoon_path + folder.name + '\/' + file.name, cv2.IMREAD_COLOR)\n        img = cv2.resize(img, cnn_image_shape)\n        img = np.array(img, dtype='float32')\n        X.append(img)\n        y.append(1)","b2a3680f":"X = np.array(X)\ny = np.array(y)","8544ad60":"print(f'Number of anime images: {np.count_nonzero(y == 0)}')\n\nprint(f'Number of cartoons images: {np.count_nonzero(y == 1)}')","468be3c6":"labels = {0:'Anime', 1:'Cartoon'}\n\nfor i in range(5):\n    n = random.randint(0, X.shape[0])\n    plt.figure()\n    plt.title(labels[y[n]])\n    plt.imshow(X[n]\/255)","2f31eb15":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, stratify=y, shuffle=True, random_state=42)\nX_val, X_test, y_val, y_test = train_test_split(X_val, y_val, test_size=0.5, stratify=y_val, random_state=42)","c823efeb":"from tensorflow.keras.applications import MobileNetV2\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Input, Lambda, GlobalAveragePooling2D, Dropout, Dense\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.optimizers import Adam\n\n\nbefore_mobilenet = Sequential([Input((128, 128, 3)),\n                               Lambda(preprocess_input)])\n\nmobilenet = MobileNetV2(input_shape=(128, 128, 3), include_top=False)\n\nafter_mobilenet = Sequential([GlobalAveragePooling2D(),\n                              Dropout(0.3),\n                              Dense(2, activation='softmax')])\n\nmodel = Sequential([before_mobilenet, mobilenet, after_mobilenet])\n\nopt = Adam(learning_rate=0.0001)\n\nmodel.build(((None, 128, 128, 3)))\n\nmodel.compile(optimizer=opt, loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\nmodel.summary()","10e14d33":"early_stopping = EarlyStopping(\n    patience=10,\n    min_delta=0.001,\n    restore_best_weights=True,\n)\n\nhistory = model.fit(\n    X_train, \n    y_train, \n    epochs=300, \n    validation_data=(X_test, y_test), \n    callbacks=[early_stopping]\n)","38503e22":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper right')\nplt.show()","e3cda6e3":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","e61eb664":"from sklearn.metrics import classification_report\n\npredictions = model.predict(X_test)\n\npredict = []\nfor i in predictions:\n    predict.append(np.argmax(i))\n    \nprint(classification_report(y_test, predict))","d2eada94":"!wget https:\/\/a-static.mlcdn.com.br\/574x431\/painel-de-festa-cavaleiros-do-zodiaco-cdz-02-colormyhome\/colormyhome\/3455\/2b09a906f973deadbf918d1008084f28.jpg -O cdz.jpg","42475355":"img = cv2.imread('.\/cdz.jpg', cv2.IMREAD_COLOR)\nimg = cv2.resize(img, cnn_image_shape)\nimg = np.array(img, dtype='float32')\n\nimg = img.reshape((1, 128, 128, 3))\n\nimg.shape","3ed546f0":"prediction = model.predict(img)\nprediction_probabilities = np.array(prediction)\nargmaxs = np.argmax(prediction_probabilities, axis=1)\nprint(argmaxs)","ad6db184":"convert arrays to numpy","50d8f468":"Test with outside image","1d679825":"Vamos ver quantas imagens temos de cada um dos ","cbca6a48":"![](https:\/\/a-static.mlcdn.com.br\/574x431\/painel-de-festa-cavaleiros-do-zodiaco-cdz-02-colormyhome\/colormyhome\/3455\/2b09a906f973deadbf918d1008084f28.jpg)","df91fa8b":"Animes will be class 0 and cartoons class 1.\n\nImport anime data.","3e7b3b15":"Create the model","5385a5c4":"split the database into 3split the database into 3\n* 80% for training\n* 10% for validation\n* 10% for test","df7856a8":"Plot some images","bd25019a":"Import cartoon data."}}