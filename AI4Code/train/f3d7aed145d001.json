{"cell_type":{"012191d4":"code","890b756f":"code","1ff873eb":"code","b9ea11c3":"code","58cd73b9":"code","78da46bc":"code","89f1f354":"code","e03e4ef2":"code","3af20a23":"code","3d8c00b9":"code","b9d8842e":"code","7d69d0b4":"code","75bc70b4":"code","af2af2ec":"code","bd63910d":"code","9c1e26bf":"code","a4aa03b6":"code","b10d7e2a":"code","5f2383d3":"code","0fea1f51":"code","c5e4e897":"code","76376f7f":"code","6fa87628":"code","8a158f7d":"code","efa5ba1b":"code","41a3be01":"code","2a3a0f93":"code","bac57f20":"code","1e1a0516":"code","290e9e67":"markdown","5d4db229":"markdown","752abe37":"markdown","5c955721":"markdown","138ccd35":"markdown","c3bf64e9":"markdown","4fee4c81":"markdown","2ae7c703":"markdown","c501fec1":"markdown"},"source":{"012191d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport warnings\nwarnings.simplefilter(action='ignore', category=Warning)","890b756f":"train_data = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","1ff873eb":"print(train_data.shape)\nprint(test_data.shape)","b9ea11c3":"train_data.head(10)","58cd73b9":"X = train_data.drop([\"label\"],axis = 1).values\nY = train_data[\"label\"].values\nplt.figure(figsize = (12,6))\nsns.countplot(Y)","78da46bc":"plt.imshow(X[0].reshape([28,28]))","89f1f354":"plt.imshow(X[1].reshape([28,28]))","e03e4ef2":"plt.imshow(X[7].reshape([28,28]))","3af20a23":"plt.imshow(X[14].reshape([28,28]))","3d8c00b9":"X = X.reshape([42000,28,28,1])\nY = Y.reshape([42000,1])","b9d8842e":"# convert to one-hot-encoding\nfrom keras.utils.np_utils import to_categorical \nY = to_categorical(Y, num_classes = 10)","7d69d0b4":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.1, random_state = 14)\n","75bc70b4":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","af2af2ec":"x_train = x_train\/255\nx_test = x_test\/255","bd63910d":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64, (3,3), padding = 'same', activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(64, (3,3), padding = 'same', activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(128, (3,3), padding = 'same', activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(128, (3,3), padding = 'same', activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(10, activation='softmax')\n])","9c1e26bf":"model.summary()","a4aa03b6":"from keras.optimizers import Adam\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)\nmodel.compile(optimizer = optimizer,\n              loss = 'categorical_crossentropy',\n              metrics = ['accuracy'])","b10d7e2a":"from keras.callbacks import ReduceLROnPlateau\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.6, \n                                            min_lr=0.00001)","5f2383d3":"batch_size = 64\nepochs = 30","0fea1f51":"train_datagen = ImageDataGenerator( \n        rotation_range=10,  \n        zoom_range = 0.1, \n        width_shift_range=0.1,  \n        height_shift_range=0.1,\n        shear_range = 0.1,\n        horizontal_flip=False,  \n        vertical_flip=False\n        )\ntrain_datagen.fit(x_train)\n","c5e4e897":"history = model.fit(\n            train_datagen.flow(x_train,y_train,batch_size = batch_size),\n            validation_data = (x_test,y_test),\n            batch_size = batch_size,\n            steps_per_epoch = x_train.shape[0]\/\/batch_size,\n            epochs = epochs,\n            verbose = 1,\n            callbacks=[learning_rate_reduction]\n            )","76376f7f":"model.evaluate(x_test,y_test)","6fa87628":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure()\nplt.plot(acc,color = 'green',label = 'Training Acuracy')\nplt.plot(val_acc,color = 'red',label = 'Validation Accuracy')\nplt.legend()","8a158f7d":"plt.figure()\nplt.plot(loss,color = 'green',label = 'Training Loss')\nplt.plot(val_loss,color = 'red',label = 'Validation Loss')\nplt.legend()","efa5ba1b":"data = test_data.values\ndata = data.reshape([28000,28,28,1])\nprint(data.shape)\ndata = data\/255","41a3be01":"test_pred = model.predict(data)\ntest_pred = np.argmax(test_pred,axis=1)\nprint(test_pred.shape)","2a3a0f93":"sample_submission = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")\nsample_submission","bac57f20":"index = sample_submission.ImageId\ndata = {'ImageId' : index,'Label': test_pred}\ndf = pd.DataFrame(data)\ndf.head","1e1a0516":"df.to_csv('submission2.csv', index=False)","290e9e67":"# Importing Libraries","5d4db229":"## Evaluation and Accuracy,Loss plots","752abe37":"## Compiling the model (Optimizer=Adam)","5c955721":"# Digit Recognition with Simple CNN","138ccd35":"# Defining the CNN architecture","c3bf64e9":"# Reading and Preparing data","4fee4c81":"## Data Augmentation","2ae7c703":"## Fitting the model","c501fec1":"## Learning Rate Reduction"}}