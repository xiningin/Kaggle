{"cell_type":{"659dddc3":"code","2a424dc0":"code","d5a1957a":"code","a0936246":"code","fe65971c":"code","3b134530":"code","0e3a635a":"code","40f7257c":"code","fd233efc":"code","328a8c08":"code","471e20ff":"code","0c834b4b":"code","08682d6e":"code","9a39bb5d":"code","44b917a2":"code","8c47e854":"code","2a81311b":"code","4d7a27ab":"code","8cf67e04":"code","07ad3ad0":"code","9e21fd4f":"code","13ba0348":"code","5f232c2e":"code","bc6eb38f":"code","eedae1bc":"code","a42a8401":"code","2ba4e29c":"code","c00084e8":"code","c38862c3":"code","75e76b9d":"code","7858c269":"code","2e62f797":"code","d6546af1":"code","50e2f417":"code","b178609a":"code","0bef2218":"code","cdfc1598":"code","daafc77d":"code","e68e2ca1":"markdown","1fdfb220":"markdown","ef6781b2":"markdown","0a03124e":"markdown","749ce7f6":"markdown","b3b1c167":"markdown","337ecd6f":"markdown","f9b47dfd":"markdown","5f2493a4":"markdown","b81e7f82":"markdown","dbda209b":"markdown","7a763056":"markdown","596aae79":"markdown","9959fef7":"markdown","6ecfee8d":"markdown","7acdcb78":"markdown","721de9bc":"markdown","8d4bbf0a":"markdown","66652426":"markdown","fad460dc":"markdown","023fcde3":"markdown","ab4e00dc":"markdown","b159e5c2":"markdown","d0e21ec9":"markdown","7fcf6923":"markdown","871b4eac":"markdown","69f94f85":"markdown","f53ec8ff":"markdown","7afbe9cc":"markdown","381c2bc6":"markdown","55025d31":"markdown","93bd3d50":"markdown","9fe7296b":"markdown","9a0b03df":"markdown","4b6fb1f7":"markdown","b57ef0d5":"markdown","1224f7fa":"markdown","b3cb6e29":"markdown","21005b76":"markdown","df0bfdeb":"markdown","a9bfe82e":"markdown","a5cf8641":"markdown","e69e43cc":"markdown","6bb40759":"markdown"},"source":{"659dddc3":"# import relevant packages\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', None)\nimport itertools\n\n# set up path of shared files and helper funtion for loading certain tables as pandas DataFrame\ndb_path = '..\/input\/wca-db-export\/'\n\ndef load_table(table_name):\n    \"\"\" helper function to obtain a pandas DataFrame for table <table_name> \"\"\"\n    return pd.read_csv(db_path + 'WCA_export_{}.tsv'.format(table_name), delimiter='\\t')\n\nperson_info = load_table('Persons')\nperson_info = person_info[person_info.subid == 1][['id', 'name', 'countryId']]\nperson_info = person_info.rename(columns={'id': 'personId', 'name': 'personName', \n                                          'countryId': 'personCountryId'})\n\ndef add_person_info(df):\n    return person_info.merge(df, on='personId')","2a424dc0":"results = load_table('Results')\nresults['year'] = results.competitionId.str[-4:].astype('int')\nresults_2019 = results[results.year == 2019]\nattempts_2019 = results_2019[['personId', 'personName', 'personCountryId'] + ['value' + str(i+1) for i in range(5)]].melt(\n    id_vars=['personId', 'personName', 'personCountryId'], value_vars=['value' + str(i+1) for i in range(5)])\nattempts_2019 = attempts_2019[attempts_2019.value != 0]\nattempts_2019['solved'] = (attempts_2019.value > 0).astype('int')\ntotal_solves = attempts_2019.groupby(['personId', 'personName', 'personCountryId']).solved.sum().reset_index()\ntotal_solves.sort_values('solved', ascending=False).head(10).reset_index(drop=True)","d5a1957a":"comps = load_table('Competitions')\nperson_comps_2019 = results_2019[['personId', 'personName', 'personCountryId', 'competitionId']].merge(\n    comps[comps.countryId.str[0] != 'X'][['id', 'countryId']], how='inner', left_on='competitionId', right_on='id')\nmost_countries = person_comps_2019.groupby(['personId', 'personName', 'personCountryId']).countryId.nunique().reset_index()\nmost_countries.rename(columns={'countryId': 'Number of countries'}).sort_values('Number of countries', ascending=False).head(10).reset_index(drop=True)","a0936246":"golds = results_2019[((results_2019.pos == 1) & (results_2019.roundTypeId.isin(['c', 'f'])) & (results_2019.best > 0))]\nmost_golds = golds.groupby(['personId', 'personName', 'personCountryId']).pos.count().reset_index()\nmost_golds.rename(columns={'pos': 'Number of golds'}).sort_values('Number of golds', ascending=False).head(10).reset_index(drop=True)","fe65971c":"silvers = results_2019[((results_2019.pos == 2) & (results_2019.roundTypeId.isin(['c', 'f'])) & (results_2019.best > 0))]\nmost_silvers = silvers.groupby(['personId', 'personName', 'personCountryId']).pos.count().reset_index()\nmost_silvers.rename(columns={'pos': 'Number of silvers'}).sort_values('Number of silvers', ascending=False).head(10).reset_index(drop=True)","3b134530":"bronzes = results_2019[((results_2019.pos == 3) & (results_2019.roundTypeId.isin(['c', 'f'])) & (results_2019.best > 0))]\nmost_bronzes = bronzes.groupby(['personId', 'personName', 'personCountryId']).pos.count().reset_index()\nmost_bronzes.rename(columns={'pos': 'Number of bronzes'}).sort_values('Number of bronzes', ascending=False).head(10).reset_index(drop=True)","0e3a635a":"podiums = results_2019[((results_2019.pos.isin([1, 2, 3])) & (results_2019.roundTypeId.isin(['c', 'f'])) & (results_2019.best > 0))]\nmost_podiums = podiums.groupby(['personId', 'personName', 'personCountryId']).pos.count().reset_index()\nmost_podiums.rename(columns={'pos': 'Number of podiums'}).sort_values('Number of podiums', ascending=False).head(10).reset_index(drop=True)","40f7257c":"# SQL used: SELECT co.competition_id, u.name FROM competition_organizers co INNER JOIN users u ON co.organizer_id=u.id\ncomp_organizers = pd.read_csv('..\/input\/wca-org-del-export\/competition_organizers.csv')\norganizers_2019 = comp_organizers[comp_organizers.competition_id.str[-4:] == '2019']\nmost_organized_2019 = organizers_2019.groupby('name').competition_id.count().reset_index()\nmost_organized_2019.rename(columns={'competition_id': 'Competitions organized'}).sort_values('Competitions organized', ascending=False).head(10).reset_index(drop=True)","fd233efc":"comps_2019 = comps[comps.year == 2019]\ncomps_before_2019 = comps[comps.year < 2019]\ncountries_before_2019 = comps_before_2019[comps_before_2019.countryId.str[0] != 'X'].countryId.unique()\ncountries_2019 = comps_2019[comps_2019.countryId.str[0] != 'X'].countryId.unique()\nnew_countries_2019 = np.setdiff1d(countries_2019, countries_before_2019)\nprint('Number of new countries 2019:', len(new_countries_2019))\nprint('Countries:', new_countries_2019)","328a8c08":"comps_2019.groupby('cityName').id.count().sort_values(ascending=False).reset_index().rename(columns={'id': 'Number of competitions'}).head(10)","471e20ff":"comps_2019.groupby('countryId').id.count().sort_values(ascending=False).reset_index().rename(columns={'id': 'Number of competitions'}).head(10)","0c834b4b":"results_2019.groupby('personCountryId').personId.nunique().sort_values(ascending=False).reset_index().rename(\n    columns={'personId': 'Number of distinct competitors'}).head(10)","08682d6e":"results_333bf_2019 = results_2019[results_2019.eventId == '333bf'][['personId', 'personName', 'personCountryId', 'competitionId', 'roundTypeId'] \n                                                                   + ['value' + str(i+1) for i in range(5)]]\nattempts_333bf_2019 = results_333bf_2019.melt(id_vars=['personId', 'personName', 'personCountryId', 'competitionId', 'roundTypeId'], \n                                              value_vars=['value' + str(i+1) for i in range(5)]).rename(columns={'variable': 'attempt'})\nattempts_333bf_2019 = attempts_333bf_2019[attempts_333bf_2019.value != 0]\nattempts_333bf_2019['solved'] = (attempts_333bf_2019.value > 0).astype('int')\ntotal_successes = attempts_333bf_2019.groupby(['personId', 'personName', 'personCountryId']).solved.sum().reset_index()\ntotal_successes.sort_values('solved', ascending=False).head(10).reset_index(drop=True)","9a39bb5d":"comps['start_date'] = pd.to_datetime(comps[['year', 'month', 'day']], format='%Y%m%d')\ndf_333bf = attempts_333bf_2019.merge(comps[['id', 'start_date']], how='inner', left_on='competitionId', right_on='id')\ndf_333bf = df_333bf[['personId', 'personName', 'personCountryId', 'start_date', 'roundTypeId', 'attempt', 'solved']]\n\ndf_333bf = df_333bf.sort_values(['personId', 'start_date', 'roundTypeId', 'attempt']).reset_index()\ndf_333bf['grouper'] = ((df_333bf.personId != df_333bf.personId.shift(1)) | (df_333bf.solved != df_333bf.solved.shift(1))).cumsum()\ndf_333bf['streak'] = df_333bf.groupby('grouper').solved.cumsum().astype('int')\n\ndf_333bf[['personId', 'personName', 'personCountryId', 'streak']].groupby(\n    ['personId', 'personName', 'personCountryId']).streak.max().sort_values(ascending=False).head(10).reset_index()","44b917a2":"num_comps_2019 = results_2019.groupby(['personId', 'personName', 'personCountryId']).competitionId.nunique()\nnum_comps_2019.sort_values(ascending=False).reset_index().rename(columns={'competitionId': 'Competitions'}).head(10)","8c47e854":"df_wrs = results_2019.copy()\ndf_wrs['single_wr'] = (df_wrs.regionalSingleRecord == 'WR')\ndf_wrs['average_wr'] = (df_wrs.regionalAverageRecord == 'WR')\ndf_wrs['wrs'] = df_wrs['single_wr'].astype('int') + df_wrs['average_wr'].astype('int')\ndf_wrs['comp_wrs'] = df_wrs.groupby('competitionId').wrs.transform('sum')\nwrs_seen_person_comps = df_wrs[['personId', 'personName', 'personCountryId', 'competitionId', 'comp_wrs']].drop_duplicates()\nwrs_seen = wrs_seen_person_comps.groupby(['personId', 'personName', 'personCountryId']).comp_wrs.sum()\nwrs_seen.sort_values(ascending=False).reset_index().rename(columns={'comp_wrs': 'WRs potentially seen'}).head(10)","2a81311b":"pid_ba_dates = results[['personId', 'competitionId', 'eventId', 'roundTypeId', 'best', 'average']].merge(\n    comps[['id', 'start_date']], how='inner', left_on='competitionId', right_on='id')\npid_ba_nan = pid_ba_dates.replace([-2, -1, 0], np.nan)\npid_ba_nan = pid_ba_nan.sort_values(['personId', 'eventId', 'start_date', 'roundTypeId'])\npid_ba_nan['min_best'] = pid_ba_nan.groupby(['personId', 'eventId']).best.transform('cummin')\npid_ba_nan['min_avg'] = pid_ba_nan.groupby(['personId', 'eventId']).average.transform('cummin')\npid_ba_nan['sgl_pb'] = (pid_ba_nan.best == pid_ba_nan.min_best)\npid_ba_nan['avg_pb'] = (pid_ba_nan.average == pid_ba_nan.min_avg)\npid_ba_nan['pbs'] = pid_ba_nan['sgl_pb'].astype('int') + pid_ba_nan['avg_pb'].astype('int')\npid_ba_pbs_2019 = pid_ba_nan[pid_ba_nan.competitionId.str[-4:].astype('int') == 2019]\npbs_comps_2019 = pid_ba_pbs_2019[['personId', 'competitionId', 'pbs']].groupby(['personId', 'competitionId']).pbs.sum()\nadd_person_info(pbs_comps_2019).sort_values('pbs', ascending=False).head(10).reset_index()","4d7a27ab":"pbs_comps_2019 = pbs_comps_2019.reset_index()\npbs_comps_2019['pb_flag'] = (pbs_comps_2019.pbs > 0)\npbs_comps_2019['grouper'] = ((pbs_comps_2019.personId != pbs_comps_2019.personId.shift(1)) | \n                             (pbs_comps_2019.pb_flag != pbs_comps_2019.pb_flag.shift(1))).cumsum()\npbs_comps_2019['streak'] = pbs_comps_2019.groupby('grouper').pb_flag.cumsum().astype('int')\nadd_person_info(pbs_comps_2019[['personId', 'streak']].groupby('personId').streak.max().sort_values(\n    ascending=False).head(10).reset_index())","8cf67e04":"# SQL used: SELECT cd.competition_id, u.name FROM competition_delegates cd INNER JOIN users u ON cd.delegate_id=u.id\ncomp_delegates = pd.read_csv('..\/input\/wca-org-del-export\/competition_delegates.csv')\ndelegates_2019 = comp_delegates[comp_delegates.competition_id.str[-4:] == '2019']\nmost_delegated_2019 = delegates_2019.groupby('name').competition_id.count().reset_index()\nmost_delegated_2019.rename(columns={'competition_id': 'Competitions delegated'}).sort_values('Competitions delegated', ascending=False).head(10).reset_index(drop=True)","07ad3ad0":"averages_333_before_2019 = results[((results.year < 2019) & (results.eventId == '333') & (results.average > 0))][['personId', 'average']]\nbest_averages_333_before_2019 = averages_333_before_2019.groupby('personId').average.min().reset_index()\naverages_333_2019 = results[((results.year == 2019) & (results.eventId == '333') & (results.average > 0))][['personId', 'average']]\nbest_averages_333_2019 = averages_333_2019.groupby('personId').average.min().reset_index()\naverages_333_comparison = best_averages_333_before_2019.merge(best_averages_333_2019, on='personId')\naverages_333_comparison['improvement_pc'] = 100 * (averages_333_comparison.average_x - averages_333_comparison.average_y) \/ averages_333_comparison.average_x\naverages_333_comparison = averages_333_comparison.rename(columns={'average_x': 'best_333_average_before_2019','average_y': 'best_333_average_2019'})\nadd_person_info(averages_333_comparison).nlargest(10, 'improvement_pc').reset_index(drop=True)","9e21fd4f":"pid_best_2019 = pid_ba_pbs_2019[['personId', 'eventId', 'best']].groupby(\n    ['personId', 'eventId']).min().dropna()\nfull_index = list(itertools.product(list(pid_best_2019.reset_index().personId.unique()), \n                      list(pid_best_2019.reset_index().eventId.unique())))\npid_best_2019 = pid_best_2019.reindex(full_index).fillna(9999999999)\npid_best_2019 = pid_best_2019.sort_values(['eventId', 'best']).reset_index()\npid_best_2019['rank'] = pid_best_2019.groupby('eventId').best.rank(ascending=True, method='min').astype('int')\nsingle_ranks_2019 = pd.pivot_table(pid_best_2019[['personId', 'eventId', 'rank']], index='personId', \n                                   columns='eventId', values='rank', aggfunc='first')\nsingle_ranks_2019['SOR'] = pid_best_2019[['personId', 'rank']].groupby('personId').sum()\nsingle_ranks_2019 = add_person_info(single_ranks_2019)\nsingle_ranks_2019.sort_values('SOR').reset_index(drop=True).head(10)","13ba0348":"pid_average_2019 = pid_ba_pbs_2019[['personId', 'eventId', 'average']].groupby(\n    ['personId', 'eventId']).min().dropna()\nfull_index = list(itertools.product(list(pid_average_2019.reset_index().personId.unique()), \n                      list(pid_average_2019.reset_index().eventId.unique())))\npid_average_2019 = pid_average_2019.reindex(full_index).fillna(9999999999)\npid_average_2019 = pid_average_2019.sort_values(['eventId', 'average']).reset_index()\npid_average_2019['rank'] = pid_average_2019.groupby('eventId').average.rank(ascending=True, method='min').astype('int')\naverage_ranks_2019 = pd.pivot_table(pid_average_2019[['personId', 'eventId', 'rank']], index='personId', \n                                   columns='eventId', values='rank', aggfunc='first')\naverage_ranks_2019['SOR'] = pid_average_2019[['personId', 'rank']].groupby('personId').sum()\naverage_ranks_2019 = add_person_info(average_ranks_2019)\naverage_ranks_2019.sort_values('SOR').reset_index().head(10)","5f232c2e":"single_sor_top100_2019 = single_ranks_2019.sort_values('SOR').reset_index().head(100)\naverage_sor_top100_2019 = average_ranks_2019.sort_values('SOR').reset_index().head(100)\nsor_top100_2019_people = single_sor_top100_2019[['personId', 'personName', 'personCountryId']].append(\n    average_sor_top100_2019[['personId', 'personName', 'personCountryId']]).drop_duplicates()\nsor_top100_2019_people.groupby('personCountryId').count().personId.sort_values(\n    ascending=False).reset_index().head(10).rename(columns={'personId': 'Number of people'})","bc6eb38f":"mostSingleRecords = results_2019[results_2019.regionalSingleRecord == 'WR'].groupby(['personId', 'personName']).regionalSingleRecord.agg(['count'])\nmostAverageRecords = results_2019[results_2019.regionalAverageRecord == 'WR'].groupby(['personId', 'personName']).regionalAverageRecord.agg(['count'])\nmostRecords = pd.concat([mostSingleRecords, mostAverageRecords]).groupby(['personId', 'personName'])['count'].sum()\nmostRecords.sort_values(ascending=False).reset_index().rename(columns={'count': 'WR count'}).head(10)","eedae1bc":"nonWRsingleRecords = results_2019[results_2019.regionalSingleRecord != 'WR']\nnonWRaverageRecords = results_2019[results_2019.regionalAverageRecord != 'WR']\ncrSingleRecords = nonWRsingleRecords[nonWRsingleRecords.regionalSingleRecord != 'NR']\ncrAverageRecords = nonWRaverageRecords[nonWRaverageRecords.regionalAverageRecord != 'NR']\nmostSingleRecords = crSingleRecords.groupby(['personId', 'personName']).regionalSingleRecord.agg(['count'])\nmostAverageRecords = crAverageRecords.groupby(['personId', 'personName']).regionalAverageRecord.agg(['count'])\nmostRecords = pd.concat([mostSingleRecords, mostAverageRecords]).groupby(['personId', 'personName'])['count'].sum()\nmostRecords.sort_values(ascending=False).reset_index().rename(columns={'count': 'CR count'}).head(10)","a42a8401":"mostSingleRecords = results_2019[results_2019.regionalSingleRecord == 'NR'].groupby(['personId', 'personName']).regionalSingleRecord.agg(['count'])\nmostAverageRecords = results_2019[results_2019.regionalAverageRecord == 'NR'].groupby(['personId', 'personName']).regionalAverageRecord.agg(['count'])\nmostRecords = pd.concat([mostSingleRecords, mostAverageRecords]).groupby(['personId', 'personName'])['count'].sum()\nmostRecords.sort_values(ascending=False).reset_index().rename(columns={'count': 'NR count'}).head(10)","2ba4e29c":"attempts_2019 = results_2019[['personId', 'personName', 'competitionId', 'personCountryId'] + ['value' + str(i+1) for i in range(5)]].melt(\n    id_vars=['personId', 'personName', 'competitionId', 'personCountryId'], value_vars=['value' + str(i+1) for i in range(5)])\nattempts_2019 = attempts_2019[attempts_2019.value > 0].drop(columns='variable')\nsolvesPerCompetition = attempts_2019.groupby(['personId', 'personName', 'personCountryId', 'competitionId']).count().reset_index()\nsolvesPerCompetition.sort_values('value', ascending=False).reset_index(drop=True).head(10).rename(columns={'value': 'Number of solves'})","c00084e8":"# Going with the mean for simplicity...\nattempts_2019 = results_2019[['personId', 'personName', 'eventId', 'personCountryId'] + ['value' + str(i+1) for i in range(5)]].melt(\n    id_vars=['personId', 'personName', 'eventId', 'personCountryId'], value_vars=['value' + str(i+1) for i in range(5)])\nsolves_333_2019 = attempts_2019[(attempts_2019.eventId == '333') & (attempts_2019.value > 0)].drop(columns='variable')\naverage_333_2019 = solves_333_2019.groupby(['personId', 'personName', 'personCountryId']).value.mean().reset_index()\naverage_333_2019['value'] = np.round(average_333_2019['value'] \/ 100, 2)\naverage_333_2019.sort_values('value').head(10).reset_index(drop=True).rename(columns={'value': 'Overall 3x3x3 mean in 2019'})","c38862c3":"results_2019.groupby(['competitionId']).personId.nunique().sort_values(ascending=False).reset_index().head(10).rename(columns={'personId': 'Number of competitors'})","75e76b9d":"comps_pid_dates = pid_ba_dates[['competitionId', 'personId', 'start_date']].drop_duplicates()\ncomps_pid_dates['newcomer_date'] = comps_pid_dates[['personId', 'start_date']].groupby('personId').start_date.transform('min')\ncomps_pid_dates['is_newcomer'] = (comps_pid_dates['start_date'] == comps_pid_dates['newcomer_date'])\nnewcomers_2019 = comps_pid_dates[comps_pid_dates.competitionId.str[-4:] == '2019'][['competitionId', 'is_newcomer']].groupby('competitionId').is_newcomer.sum()\nnewcomers_2019.astype('int').sort_values(ascending=False).head(10).reset_index().rename(columns={'is_newcomer': 'Number of newcomers'})","7858c269":"comps_pid_2019 = results_2019[['competitionId', 'personId']].drop_duplicates()\ncomp_nums = comps_pid_2019.groupby('personId').competitionId.transform('count')\ncomps_pid_2019_reduced = comps_pid_2019[comp_nums > 10]\ncomp_pairs_2019 = comps_pid_2019_reduced.merge(comps_pid_2019_reduced, on='competitionId')\ncomp_pairs_2019 = comp_pairs_2019[comp_pairs_2019.personId_x < comp_pairs_2019.personId_y]\ncomp_pairs_2019.groupby(['personId_x', 'personId_y']).count().sort_values(\n    'competitionId', ascending=False).rename(columns={'competitionId': 'Shared competitions'}).reset_index().head(10)","2e62f797":"comp_trips_2019 = comp_pairs_2019.merge(comps_pid_2019_reduced.rename(columns={'personId': 'personId_z'}), on='competitionId')\ncomp_trips_2019 = comp_trips_2019[((comp_trips_2019.personId_x < comp_trips_2019.personId_z) & (comp_trips_2019.personId_y < comp_trips_2019.personId_z))]\ncomp_trips_2019.groupby(['personId_x', 'personId_y', 'personId_z']).count().sort_values(\n    'competitionId', ascending=False).rename(columns={'competitionId': 'Shared competitions'}).reset_index().head(10)","d6546af1":"# Note: podiums from above just includes 2019 podiums\npodiums_reduced = podiums[['personId', 'competitionId', 'eventId']]\npodium_pairs = podiums_reduced.merge(podiums_reduced, on=['competitionId', 'eventId'])\npodium_pairs = podium_pairs[podium_pairs.personId_x < podium_pairs.personId_y]\npodium_pairs.groupby(['personId_x', 'personId_y']).eventId.count().sort_values(\n    ascending=False).reset_index().rename(columns={'eventId': 'Shared podiums'}).head(10)","50e2f417":"podium_trips_2019 = podium_pairs.merge(podiums_reduced.rename(columns={'personId': 'personId_z'}), on=['competitionId', 'eventId'])\npodium_trips_2019 = podium_trips_2019[((podium_trips_2019.personId_x < podium_trips_2019.personId_z) \n                                       & (podium_trips_2019.personId_y < podium_trips_2019.personId_z))]\npodium_trips_2019.groupby(['personId_x', 'personId_y', 'personId_z']).eventId.count().sort_values(\n    ascending=False).reset_index().rename(columns={'eventId': 'Shared podiums'}).head(10)","b178609a":"num_comps_2019 = results_2019[results_2019.personId.str[:4] == '2019'].groupby(['personId', 'personName', 'personCountryId']).competitionId.nunique()\nnum_comps_2019.sort_values(ascending=False).reset_index().rename(columns={'competitionId': 'Competitions'}).head(10)","0bef2218":"newcomer_comps_2019 = comps_pid_dates[(comps_pid_dates.personId.str[:4] == '2019') & (comps_pid_dates.is_newcomer)]\nnewcomer_results_2019 = results_2019.merge(newcomer_comps_2019, on=['competitionId', 'personId'])\nbest_newcomer_singles_2019 = newcomer_results_2019.loc[newcomer_results_2019[newcomer_results_2019.best > 0].groupby('eventId').best.idxmin()]\nbest_newcomer_averages_2019 = newcomer_results_2019.loc[newcomer_results_2019[newcomer_results_2019.average > 0].groupby('eventId').average.idxmin()]","cdfc1598":"best_newcomer_singles_2019[['eventId', 'personId', 'personName', 'personCountryId', 'competitionId', 'best']].reset_index(drop=True)","daafc77d":"best_newcomer_averages_2019[['eventId', 'personId', 'personName', 'personCountryId', 'competitionId', 'average']].reset_index(drop=True)","e68e2ca1":"### Average results","1fdfb220":"## Most silvers","ef6781b2":"## Most solves in single competition","0a03124e":"## Best overall average for 3x3 in 2019 competitions","749ce7f6":"## Biggest percentage improvement on 3x3x3 Average","b3b1c167":"## Country with most number of people in top 100 SOR single & average combined (2019 results alone)","337ecd6f":"This statistic can be directly retrievend over the WCA website [HERE](https:\/\/www.worldcubeassociation.org\/results\/records?show=mixed&years=only+2019).","f9b47dfd":"### 2 people","5f2493a4":"## Most golds","b81e7f82":"## Cities with the most competitions","dbda209b":"## Most competitions organized","7a763056":"## Most 3x3x3 blindfolded successes","596aae79":"## Most NRs, CRs, WRs","9959fef7":"## Most Podiums together (2 people, 3 people)","6ecfee8d":"## PB streaks (only 2019 comps)","7acdcb78":"### Singles","721de9bc":"## Most podiums","8d4bbf0a":"## Most 3x3x3 Blindfolded successes in a row","66652426":"## Most PBs at a single competition","fad460dc":"## Most bronzes","023fcde3":"## Countries with the most competitions","ab4e00dc":"## Biggest competition in terms of number of participants","b159e5c2":"## Citizenships with the most distinct competitors","d0e21ec9":"### Single results","7fcf6923":"### 3 people","871b4eac":"# WCT year-end statistics 2019","69f94f85":"## Most solves","f53ec8ff":"## Most competitions for someone with a 2019 ID","7afbe9cc":"## Most countries competed in (excludes Multiple-Country comps)","381c2bc6":"## Best newcomer results 2019","55025d31":"### 3 people","93bd3d50":"## Most competitions delegated","9fe7296b":"### WRs","9a0b03df":"## New countries in WCA this year","4b6fb1f7":"## Most competitions competed in (year)","b57ef0d5":"## Potentially seen world records","1224f7fa":"## Biggest competition in terms of number of newcomers","b3cb6e29":"### NRs","21005b76":"## Most Competitions together (2 people, 3 people)","df0bfdeb":"### CRs","a9bfe82e":"### 2 people","a5cf8641":"### Averages","e69e43cc":"## 2019 best single & average for all 18 events","6bb40759":"## Best SOR single and average (2019 results alone)"}}