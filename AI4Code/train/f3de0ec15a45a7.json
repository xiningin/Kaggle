{"cell_type":{"0539ad68":"code","e62e6cb6":"code","efab17ab":"code","fd509555":"code","a50b5bc9":"code","d5c5c177":"code","45b30a75":"code","0e0af2ec":"code","5abc905a":"code","46571241":"code","a5814af0":"code","ac079b34":"code","587ada6f":"code","f100ca87":"code","a896370e":"code","e3a29075":"code","cecf4a66":"code","556fdde8":"code","82999c50":"code","82ed9923":"code","c584a13a":"code","3448a807":"code","34729a16":"code","f9dcec12":"code","0db555a1":"code","af1ba444":"code","9fdd1edf":"code","398736b6":"code","52ee6517":"code","f38a78e8":"code","9b1e410b":"code","c003dc03":"code","6f0d6066":"code","ce646e32":"code","7a5be15f":"markdown","3e11fd2c":"markdown","f9f09c2d":"markdown","517ccd0e":"markdown","49b8a168":"markdown","0b5accbb":"markdown","6b85f0c3":"markdown","7d5924ed":"markdown","5161ef36":"markdown","430a8199":"markdown","855b736e":"markdown","83b39b8a":"markdown","bbee0bec":"markdown","114e52f6":"markdown","55036517":"markdown","2e459a6b":"markdown","246b6f69":"markdown","275bb811":"markdown","b4623b6b":"markdown","67d7a43f":"markdown","94845f08":"markdown","9ab5c821":"markdown","794fa7db":"markdown","b0530bab":"markdown","7b6fd3d7":"markdown","826fc911":"markdown","ee4152c9":"markdown","2b50d70f":"markdown","49664649":"markdown","465c7550":"markdown","1a633bdd":"markdown","631a80e4":"markdown","4b268c17":"markdown","fe844809":"markdown"},"source":{"0539ad68":"from keras.datasets import fashion_mnist, mnist\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom keras.layers import Input, Dense, Conv2D, MaxPooling2D, UpSampling2D, Dropout\nfrom keras.models import Model\n\nimport os,cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 20, 10\n\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd# Any results you write to the current directory are saved as output.\nfrom IPython.display import display, Image\n\nfrom keras.preprocessing.image import load_img\nfrom keras import Model\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nfrom keras.models import load_model\nfrom keras.optimizers import Adam\nfrom keras.utils.vis_utils import plot_model\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Input, Conv2D, Conv2DTranspose, MaxPooling2D, concatenate, Dropout\n\n# Any results you write to the current directory are saved as output.\nfrom IPython.display import display, Image\n\nfrom skimage.measure import compare_ssim\nfrom skimage import data, img_as_float","e62e6cb6":"# get the data\nfilname = '..\/input\/facial-expression\/fer2013\/fer2013.csv'\n\n#different labels of images(not useful known about for current problem)\nlabel_map = ['Anger', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']\n\n#different features names\nnames=['emotion','pixels','usage']\n\n#Reading data in dataframe\ndf=pd.read_csv('..\/input\/facial-expression\/fer2013\/fer2013.csv',names=names, na_filter=False)\nim=df['pixels']\ndf.head(10)","efab17ab":"#reading data and labels from dataset and appending in list\n\ndef getData(filname):\n    # images are 48x48\n    # N = 35887\n    Y = []\n    X = []\n    first = True\n    for line in open(filname):\n        if first:\n            first = False\n        else:\n            row = line.split(',')\n            Y.append(int(row[0]))\n            X.append([int(p) for p in row[1].split()])\n\n    X, Y = np.array(X), np.array(Y)\n    return X, Y","fd509555":"#extracting data from dataset\nX, Y = getData(filname)\nnum_class = len(set(Y))\n#print(num_class)","a50b5bc9":"# keras with tensorflow backend\nN, D = X.shape\n\n#reshaping the dataset\nX = X.reshape(N, 48, 48, 1)","d5c5c177":"#splitting data in train, test\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42, shuffle=True)","45b30a75":"#Taking 5000 images \n\nx_train = x_train[:5000]\nx_test = x_test[:5000]","0e0af2ec":"x_train.shape","5abc905a":"#NOrmalizing the images\nx_train = x_train.astype('float32') \/ 255.\nx_test = x_test.astype('float32') \/ 255.\n\n#reshaping the images\nx_train = np.reshape(x_train, (len(x_train), 48, 48, 1))  # adapt this if using `channels_first` image data format\nx_test = np.reshape(x_test, (len(x_test), 48, 48, 1))  # adapt this if using `channels_first` image data format\n\n\n#adding noise in data\nnoise_factor = 0.1\nx_train_noisy = x_train + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_train.shape) \nx_test_noisy = x_test + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_test.shape) \n\n#clipping put data near to 0--->0 aand data near to 1-->1(eg=0.3-->0 or 0.7-->1)\nx_train_noisy = np.clip(x_train_noisy, 0., 1.)\nx_test_noisy = np.clip(x_test_noisy, 0., 1.)","46571241":"n = 10","a5814af0":"plt.figure(figsize=(48, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_train_noisy[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","ac079b34":"display(Image(filename=\"\/kaggle\/input\/images-architecture\/images_architecture\/autoencoder.png\"))","587ada6f":"display(Image(filename=\"\/kaggle\/input\/autoencoder-unet\/autoencoder_unet\/autoencoder.png\"))","f100ca87":"input_img = Input(shape=(48, 48, 1))  # adapt this if using `channels_first` image data format\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(input_img)\nx = MaxPooling2D((2, 2), padding='same')(x)\nx = Dropout(0.2)(x)\n\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\nx = MaxPooling2D((2, 2), padding='same')(x)\nx = Dropout(0.2)(x)\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\nencoded = MaxPooling2D((2, 2), padding='same')(x)\n\n\n# at this point the representation is (7, 7, 32)\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(encoded)\nx = UpSampling2D((2, 2))(x)\nx = Dropout(0.2)(x)\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\nx = UpSampling2D((2, 2))(x)\nx = Dropout(0.2)(x)\n\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\nx = UpSampling2D((2, 2))(x)\n\ndecoded = Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x)\n\nautoencoder_mid = Model(input_img, decoded)\nautoencoder_mid.compile(optimizer='adam', loss='MSE')","a896370e":"autoencoder_mid.summary()","e3a29075":"autoencoder_mid.fit(x_train_noisy, x_train,\n                epochs=35,\n                batch_size=64,\n                shuffle=True,\n                validation_data=(x_test_noisy, x_test))","cecf4a66":"epochs = range(len(autoencoder_mid.history.history['loss']))\n\nplt.plot(epochs,autoencoder_mid.history.history['loss'],'r', label='train_loss')\nplt.plot(epochs,autoencoder_mid.history.history['val_loss'],'b', label='val_loss')\nplt.title('train_loss vs val_loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\nplt.figure()","556fdde8":"predict = autoencoder_mid.predict(x_test_noisy)","82999c50":"n=10","82ed9923":"plt.figure(figsize=(40, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_test[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","c584a13a":"plt.figure(figsize=(48, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_test_noisy[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","3448a807":"plt.figure(figsize=(40, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(predict[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","34729a16":"compare_ssim(x_test, predict, multichannel=True)","f9dcec12":"import pickle\n\n# save the model to disk\nprint(\"[INFO] Saving model...\")\npickle.dump(autoencoder_mid,open('unet_model.pkl', 'wb'))","0db555a1":"input_img = Input(shape=(48, 48, 1))  # adapt this if using `channels_first` image data format\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(input_img)\nx = MaxPooling2D((2, 2), padding='same')(x)\nx = Dropout(0.2)(x)\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\nx = MaxPooling2D((2, 2), padding='same')(x)\nx = Dropout(0.2)(x)\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\nx = MaxPooling2D((2, 2), padding='same')(x)\nx = Dropout(0.2)(x)\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\nencoded = MaxPooling2D((2, 2), padding='same')(x)\n\n\n# at this point the representation is (7, 7, 32)\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(encoded)\nx = UpSampling2D((2, 2))(x)\nx = Dropout(0.2)(x)\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\nx = UpSampling2D((2, 2))(x)\nx = Dropout(0.2)(x)\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\nx = UpSampling2D((2, 2))(x)\nx = Dropout(0.2)(x)\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\nx = UpSampling2D((2, 2))(x)\n\ndecoded = Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x)\n\nautoencoder = Model(input_img, decoded)\nautoencoder.compile(optimizer='adam', loss='MSE')","af1ba444":"autoencoder.summary()","9fdd1edf":"autoencoder.fit(x_train_noisy, x_train,\n                epochs=35,\n                batch_size=64,\n                shuffle=True,\n                validation_data=(x_test_noisy, x_test))","398736b6":"epochs = range(len(autoencoder.history.history['loss']))\n\nplt.plot(epochs,autoencoder.history.history['loss'],'r', label='train_loss')\nplt.plot(epochs,autoencoder.history.history['val_loss'],'b', label='val_loss')\nplt.title('train_loss vs val_loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\nplt.figure()","52ee6517":"predict = autoencoder.predict(x_test_noisy)","f38a78e8":"n=10","9b1e410b":"plt.figure(figsize=(40, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_test[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","c003dc03":"plt.figure(figsize=(40, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_test_noisy[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","6f0d6066":"plt.figure(figsize=(40, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(predict[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","ce646e32":"compare_ssim(x_test, predict, multichannel=True)","7a5be15f":"# Middle AutoEncoder Summary","3e11fd2c":"# One of the way we can achieve our goal of removing noise is AutoEncoder\n\n**Copied from Keras Blog(https:\/\/blog.keras.io\/building-autoencoders-in-keras.html):\n**\n* What are autoencoders good for?\n* Today two interesting practical applications of autoencoders are data denoising (which we feature later in this post), and dimensionality reduction for data visualization. With appropriate dimensionality and sparsity constraints, autoencoders can learn data projections that are more interesting than PCA or other basic techniques.","f9f09c2d":"## Noised Test images","517ccd0e":"# Making Prediction","49b8a168":"# Visualizing the prediction","0b5accbb":"## Reshaping images","6b85f0c3":"**Reference model: https:\/\/www.researchgate.net\/figure\/Convolutional-denoising-autoencoder-CDAE-that-was-used-for-denoising-the-chest_fig1_321895810**","7d5924ed":"## Adding labels and images(pixel values) in respective array","5161ef36":"# Saving Model","430a8199":"# Data Preprocessing","855b736e":"**Refer to Keras Blog for better idea : https:\/\/blog.keras.io\/building-autoencoders-in-keras.html**","83b39b8a":"## Making Prediction","bbee0bec":"# Generated Test images","114e52f6":"# Visualizing the prediction","55036517":"## AutoEncoder Architecture","2e459a6b":"# Middel AutoEncoder: Train Loss VS validation loss","246b6f69":"# AutoEncoder: Train Loss VS validation loss","275bb811":"# Structural Similarity Index\n\n* When comparing images, the mean squared error (MSE)--while simple to implement--is not highly indicative of perceived similarity. Structural similarity aims to address this shortcoming by taking texture into account","b4623b6b":"## Generated Test images","67d7a43f":"* Image denoising is to remove noise from a noisy image, so as to restore the true image\n* In this notebook FER2013 dataset is used which contains approx 35 thousand images of 7 different emotions\n* Image is grayscale of size 48*48","94845f08":"## Original Test images","9ab5c821":"# Noised Test images","794fa7db":"# Visualization of 10 Data","b0530bab":"## Extract data from CSV","7b6fd3d7":"# Extracting Data and splitting train and test ","826fc911":"# Training Model Middel AutoEncoder","ee4152c9":"# Model Architecture we are Constructing","2b50d70f":"# AutoEncoder Summary","49664649":"# Construction of middle model","465c7550":"# Structural Similarity Index\n\n    When comparing images, the mean squared error (MSE)--while simple to implement--is not highly indicative of perceived similarity. Structural similarity aims to address this shortcoming by taking texture into account\n\n","1a633bdd":"**I am trying to use the concept:**\n* adding skip connections that allow feature representations to pass through the bottleneck in autoencoder\n* If you find this useful, do upvote","631a80e4":"# Training Model","4b268c17":"# Importing libraries","fe844809":"# Construction of Larger Model "}}