{"cell_type":{"76e9bca8":"code","2870b6ea":"code","a563dd34":"code","ba60a6ee":"code","cf86900e":"code","5e6e09c7":"code","eeca9dd5":"code","7182b477":"code","c77da7b7":"code","79db2775":"code","f836ad1e":"markdown","21e785b5":"markdown","59a3038e":"markdown","a1aeef42":"markdown","6c9a1ac1":"markdown"},"source":{"76e9bca8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datatable as dt\n\nimport os","2870b6ea":"import copy\nimport time\nimport random\n\nimport warnings\n\nfrom sklearn.preprocessing import RobustScaler\n\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.ensemble import VotingClassifier\n\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\ndef ht(df, n=2):\n    display(df.head(n))\n    display(df.tail(n))\n    display(df.shape)\n    \ntarget = 'claim'","a563dd34":"SEED = 2021\n\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything(SEED)","ba60a6ee":"train = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')","cf86900e":"y = train[target].copy()\nfeatures = train.columns.tolist()\nfeatures.remove('id')\nfeatures.remove(target)","5e6e09c7":"train['n_missing'] = train[features].isna().sum(axis=1)\ntest['n_missing'] = test[features].isna().sum(axis=1)\n\ntrain['std'] = train[features].std(axis=1)\ntest['std'] = test[features].std(axis=1)\n\nn_missing = train['n_missing'].copy()\n\ntrain[features] = train[features].fillna(train[features].mean())\ntest[features] = test[features].fillna(test[features].mean())\n\nfeatures += ['n_missing', 'std']\n\nscaler = RobustScaler()\ntrain[features] = scaler.fit_transform(train[features])\ntest[features] = scaler.transform(test[features])\n\ntrain.shape, test.shape","eeca9dd5":"catb_params = {\n'eval_metric' : 'AUC',\n'iterations': 15585,\n'objective': 'CrossEntropy',\n'bootstrap_type': 'Bernoulli',\n'od_wait': 1144,\n'learning_rate': 0.023575206684596582,\n'reg_lambda': 36.30433203563295,\n'random_strength': 43.75597655616195,\n'depth': 7,\n'min_data_in_leaf': 11,\n'leaf_estimation_iterations': 1,\n'subsample': 0.8227911142845009,\n'task_type' : 'GPU',\n'devices' : '0',\n'verbose' : 0\n}","7182b477":"cat_clf0 = CatBoostClassifier(**catb_params, random_state=17)\ncat_clf1 = CatBoostClassifier(**catb_params, random_state=43)\ncat_clf2 = CatBoostClassifier(**catb_params, random_state=2021)\ncat_clf3 = CatBoostClassifier(**catb_params, random_state=31)\ncat_clf4 = CatBoostClassifier(**catb_params, random_state=19)\ncat_clf5 = CatBoostClassifier(**catb_params, random_state=77)\ncat_clf6 = CatBoostClassifier(**catb_params, random_state=177)\n\ncat_clf7 = CatBoostClassifier(**catb_params, random_state=200)\ncat_clf8 = CatBoostClassifier(**catb_params, random_state=205)\ncat_clf9 = CatBoostClassifier(**catb_params, random_state=210)\ncat_clf10 = CatBoostClassifier(**catb_params, random_state=215)\ncat_clf11 = CatBoostClassifier(**catb_params, random_state=220)\ncat_clf12 = CatBoostClassifier(**catb_params, random_state=555)\ncat_clf13 = CatBoostClassifier(**catb_params, random_state=998)","c77da7b7":"if 'claim' in train.columns.tolist():\n    y = train.pop('claim')\nprint(train.shape, test.shape)    \n\nestimators=[('cat0', cat_clf0), \n            ('cat1', cat_clf1), \n            ('cat2', cat_clf2), \n            ('cat3', cat_clf3), \n            ('cat4', cat_clf4), \n            ('cat5', cat_clf5),\n            ('cat6', cat_clf6), \n            ('cat7', cat_clf7), \n            ('cat8', cat_clf8), \n            ('cat9', cat_clf9), \n            ('cat10', cat_clf10), \n            ('cat11', cat_clf11), \n            ('cat12', cat_clf12),\n            ('cat13', cat_clf13), \n           ]\n\nstart = time.time()\nprint(f'fitting ...')\nmodel = VotingClassifier(estimators=estimators, voting='soft', verbose=True)\nmodel.fit(train, y)\n\nprint('predicting ...')\nmodel_pred = model.predict_proba(test)[:, -1]\n\nelapsed = time.time() - start\nprint(f'elapsed time: {elapsed:.2f}sec\\n')","79db2775":"sample_solution = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')\nsample_solution[target] = model_pred\nht(sample_solution)\nsample_solution.to_csv('submission.csv', index=False)\nprint()\nprint('==================== R E A D Y ====================')","f836ad1e":"#### Thanks for reading. Don't forget to upvote if you find it usefull.","21e785b5":"## Preprocessing","59a3038e":"# VotingClassifier with only one CatBoost model\n\nIt's the 2nd notebook on the theme of single model voting, please read the foreword in this [notebook](https:\/\/www.kaggle.com\/martynovandrey\/one-model-voting-from-0-81800-to-0-81837)\n\nThis time I used the same solution with CatBoost Classifier. The initial score with traditional method, cv=7 was **0.81751**\n\nLet's try to increase it.","a1aeef42":"> Thanks [Towhidul.Tonmoy](https:\/\/www.kaggle.com\/towhidultonmoy) for **params** ","6c9a1ac1":"The same method increased the score of LGBM from **0.81800** to **0.81837**, see the [notebook](https:\/\/www.kaggle.com\/martynovandrey\/one-model-voting-from-0-81800-to-0-81837)"}}