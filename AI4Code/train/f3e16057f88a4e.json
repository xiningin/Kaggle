{"cell_type":{"4c31a6eb":"code","d5cff1a9":"code","644680c6":"code","b766b2fc":"code","a4f90c3e":"code","913b1d08":"code","1cd703cc":"code","e2f0cd8c":"code","97992aa4":"code","50c57b6a":"code","42c2afd2":"code","3c9363f0":"code","aa8b7b73":"code","3dd36d01":"code","c5750d41":"code","9af734f4":"code","e41111ed":"code","6f056530":"code","6bfc0ef2":"code","871bf6b3":"code","07db4635":"code","24323b62":"code","949f4db2":"code","ebf47c17":"code","e7a05a18":"code","bcc615d8":"code","e6b5c776":"code","91d245ce":"code","a1c81511":"code","aeb66555":"code","2ab9db97":"code","9d864b30":"code","50cefbe0":"code","59bfe36b":"code","903e5554":"code","e2a2f101":"code","eaf4c725":"code","0c439c36":"code","954d183a":"code","c4279a0b":"code","de21fb61":"code","dbe76c16":"code","6b10c596":"code","c54affc2":"code","e34f0d33":"code","be4a05e8":"code","479a0305":"code","d60a380f":"code","14f68102":"code","e0c7ee78":"code","3667de34":"code","8ffafa2b":"code","ef910a04":"code","c58cc8d2":"code","3209c7db":"code","aff19f3c":"code","49791b98":"code","95303356":"code","715ad77b":"code","0ded2852":"code","9556a76e":"code","ae035a17":"code","b019efd5":"code","dce0fcb9":"code","c9540faf":"code","d62b5ee6":"code","420d155b":"code","0f3c8c46":"markdown","45d6dd59":"markdown","3ee02b2b":"markdown","b41bfc02":"markdown","4765f480":"markdown","2fad3882":"markdown","82b19d79":"markdown","46782e30":"markdown","13bbbd6d":"markdown","0a893471":"markdown","303d28f9":"markdown","ea900efb":"markdown","3f6a4924":"markdown","9e22ee24":"markdown","03a9c8ff":"markdown","89289333":"markdown","d4731784":"markdown","93196025":"markdown","305ad532":"markdown","a6b8df3c":"markdown","419afbc5":"markdown","db2f4171":"markdown","0e7d291c":"markdown","dc39ca0c":"markdown","2cd9378b":"markdown","4a203655":"markdown","d1c3aa67":"markdown","ca8e00ca":"markdown","b3826971":"markdown","bc5d6bcb":"markdown","fa6c4996":"markdown","78068107":"markdown"},"source":{"4c31a6eb":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom keras.preprocessing import image\nfrom skimage.feature import hessian_matrix, hessian_matrix_eigvals\nfrom scipy.ndimage.filters import convolve\nfrom skimage import data, io, filters\nimport skimage\nfrom skimage.morphology import convex_hull_image, erosion\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN, LSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, Convolution2D, ZeroPadding2D\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.models import load_model\n#SKLEARN CLASSIFIER\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom lightgbm import LGBMClassifier, LGBMRegressor\nfrom catboost import CatBoostClassifier, CatBoostRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","d5cff1a9":"Surface_Data = Path(\"..\/input\/surface-crack-detection\")","644680c6":"Surface_JPG_Path = list(Surface_Data.glob(r\"*\/*.jpg\"))","b766b2fc":"Surface_Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],Surface_JPG_Path))","a4f90c3e":"Surface_JPG_Path_Series = pd.Series(Surface_JPG_Path,name=\"JPG\").astype(str)\nSurface_Labels_Series = pd.Series(Surface_Labels,name=\"CATEGORY\")","913b1d08":"Main_Surface_Data = pd.concat([Surface_JPG_Path_Series,Surface_Labels_Series],axis=1)","1cd703cc":"print(Main_Surface_Data.head(-1))","e2f0cd8c":"Main_Surface_Data = Main_Surface_Data.sample(frac=1).reset_index(drop=True)","97992aa4":"print(Main_Surface_Data.head(-1))","50c57b6a":"plt.style.use(\"dark_background\")","42c2afd2":"Positive_Surface = Main_Surface_Data[Main_Surface_Data[\"CATEGORY\"] == \"Positive\"]\nNegative_Surface = Main_Surface_Data[Main_Surface_Data[\"CATEGORY\"] == \"Negative\"]\n\nPositive_Surface = Positive_Surface.reset_index()\nNegative_Surface = Negative_Surface.reset_index()","3c9363f0":"def simple_vision(path):\n    figure = plt.figure(figsize=(8,8))\n    \n    Reading_Img = cv2.imread(path)\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2RGB)\n    \n    plt.xlabel(Reading_Img.shape)\n    plt.ylabel(Reading_Img.size)\n    plt.imshow(Reading_Img)","aa8b7b73":"def canny_vision(path):\n    figure = plt.figure(figsize=(8,8))\n    \n    Reading_Img = cv2.imread(path)\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2RGB)\n    Canny_Img = cv2.Canny(Reading_Img,90,100)\n    \n    plt.xlabel(Canny_Img.shape)\n    plt.ylabel(Canny_Img.size)\n    plt.imshow(Canny_Img)","3dd36d01":"def threshold_vision(path):\n    figure = plt.figure(figsize=(8,8))\n    \n    Reading_Img = cv2.imread(path)\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2RGB)\n    _,Threshold_Img = cv2.threshold(Reading_Img,130,255,cv2.THRESH_BINARY_INV)\n    \n    plt.xlabel(Threshold_Img.shape)\n    plt.ylabel(Threshold_Img.size)\n    plt.imshow(Threshold_Img)","c5750d41":"def threshold_canny(path):\n    figure = plt.figure(figsize=(8,8))\n    \n    Reading_Img = cv2.imread(path)\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2RGB)\n    _,Threshold_Img = cv2.threshold(Reading_Img,130,255,cv2.THRESH_BINARY_INV)\n    Canny_Img = cv2.Canny(Threshold_Img,90,100)\n    \n    plt.xlabel(Canny_Img.shape)\n    plt.ylabel(Canny_Img.size)\n    plt.imshow(Canny_Img)","9af734f4":"simple_vision(Main_Surface_Data[\"JPG\"][4])","e41111ed":"simple_vision(Main_Surface_Data[\"JPG\"][2])","6f056530":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Img = cv2.imread(Positive_Surface[\"JPG\"][indexing])\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2RGB)\n    \n    operations.set_xlabel(Reading_Img.shape)\n    operations.set_ylabel(Reading_Img.size)\n    operations.imshow(Reading_Img)\n    \nplt.tight_layout()\nplt.show()","6bfc0ef2":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Img = cv2.imread(Negative_Surface[\"JPG\"][indexing])\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2RGB)\n    \n    operations.set_xlabel(Reading_Img.shape)\n    operations.set_ylabel(Reading_Img.size)\n    operations.imshow(Reading_Img)\n    \nplt.tight_layout()\nplt.show()","871bf6b3":"canny_vision(Main_Surface_Data[\"JPG\"][4])","07db4635":"canny_vision(Main_Surface_Data[\"JPG\"][2])","24323b62":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Img = cv2.imread(Positive_Surface[\"JPG\"][indexing])\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2RGB)\n    \n    Canny_Img = cv2.Canny(Reading_Img,90,100)\n    \n    operations.set_xlabel(Canny_Img.shape)\n    operations.set_ylabel(Canny_Img.size)\n    operations.imshow(Canny_Img)\n    \nplt.tight_layout()\nplt.show()","949f4db2":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Img = cv2.imread(Negative_Surface[\"JPG\"][indexing])\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2RGB)\n    \n    Canny_Img = cv2.Canny(Reading_Img,90,100)\n    \n    operations.set_xlabel(Canny_Img.shape)\n    operations.set_ylabel(Canny_Img.size)\n    operations.imshow(Canny_Img)\n    \nplt.tight_layout()\nplt.show()","ebf47c17":"threshold_vision(Main_Surface_Data[\"JPG\"][4])","e7a05a18":"threshold_vision(Main_Surface_Data[\"JPG\"][2])","bcc615d8":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Img = cv2.imread(Positive_Surface[\"JPG\"][indexing])\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2RGB)\n    \n    _,Threshold_Img = cv2.threshold(Reading_Img,150,255,cv2.THRESH_BINARY_INV)\n    \n    operations.set_xlabel(Threshold_Img.shape)\n    operations.set_ylabel(Threshold_Img.size)\n    operations.imshow(Threshold_Img)\n    \nplt.tight_layout()\nplt.show()","e6b5c776":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Img = cv2.imread(Negative_Surface[\"JPG\"][indexing])\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2RGB)\n    \n    _,Threshold_Img = cv2.threshold(Reading_Img,150,255,cv2.THRESH_BINARY_INV)\n    \n    operations.set_xlabel(Threshold_Img.shape)\n    operations.set_ylabel(Threshold_Img.size)\n    operations.imshow(Threshold_Img)\n    \nplt.tight_layout()\nplt.show()","91d245ce":"threshold_canny(Main_Surface_Data[\"JPG\"][4])","a1c81511":"threshold_canny(Main_Surface_Data[\"JPG\"][2])","aeb66555":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Img = cv2.imread(Positive_Surface[\"JPG\"][indexing])\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2RGB)\n    \n    _,Threshold_Img = cv2.threshold(Reading_Img,150,255,cv2.THRESH_BINARY_INV)\n    Canny_Img = cv2.Canny(Threshold_Img,90,100)\n    \n    operations.set_xlabel(Canny_Img.shape)\n    operations.set_ylabel(Canny_Img.size)\n    operations.imshow(Canny_Img)\n    \nplt.tight_layout()\nplt.show()","2ab9db97":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Img = cv2.imread(Negative_Surface[\"JPG\"][indexing])\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2RGB)\n    \n    _,Threshold_Img = cv2.threshold(Reading_Img,150,255,cv2.THRESH_BINARY_INV)\n    Canny_Img = cv2.Canny(Threshold_Img,90,100)\n    \n    operations.set_xlabel(Canny_Img.shape)\n    operations.set_ylabel(Canny_Img.size)\n    operations.imshow(Canny_Img)\n    \nplt.tight_layout()\nplt.show()","9d864b30":"figure,axis = plt.subplots(nrows=1,ncols=3,figsize=(12,12))\n\nReading_Img = cv2.imread(Main_Surface_Data[\"JPG\"][4])\nReading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2RGB)\n\n_,Threshold_Img = cv2.threshold(Reading_Img,150,255,cv2.THRESH_BINARY_INV)\nCanny_Img = cv2.Canny(Threshold_Img,90,100)\ncontours,_ = cv2.findContours(Canny_Img,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\nDraw_Contours = cv2.drawContours(Reading_Img,contours,-1,(255,0,0),1)\n\naxis[0].imshow(Threshold_Img)\naxis[1].imshow(Canny_Img)\naxis[2].imshow(Draw_Contours)","50cefbe0":"figure,axis = plt.subplots(nrows=1,ncols=3,figsize=(12,12))\n\nReading_Img = cv2.imread(Main_Surface_Data[\"JPG\"][2])\nReading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2RGB)\n\n_,Threshold_Img = cv2.threshold(Reading_Img,150,255,cv2.THRESH_BINARY_INV)\nCanny_Img = cv2.Canny(Threshold_Img,90,100)\ncontours,_ = cv2.findContours(Canny_Img,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\nDraw_Contours = cv2.drawContours(Reading_Img,contours,-1,(255,0,0),1)\n\naxis[0].imshow(Threshold_Img)\naxis[1].imshow(Canny_Img)\naxis[2].imshow(Draw_Contours)","59bfe36b":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Img = cv2.imread(Positive_Surface[\"JPG\"][indexing])\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2RGB)\n    \n    _,Threshold_Img = cv2.threshold(Reading_Img,150,255,cv2.THRESH_BINARY_INV)\n    Canny_Img = cv2.Canny(Threshold_Img,90,100)\n    contours,_ = cv2.findContours(Canny_Img,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n    Draw_Contours_Positive = cv2.drawContours(Reading_Img,contours,-1,(255,0,0),1)\n    \n    operations.set_xlabel(Draw_Contours_Positive.shape)\n    operations.set_ylabel(Draw_Contours_Positive.size)\n    operations.imshow(Draw_Contours_Positive)\n    \nplt.tight_layout()\nplt.show()","903e5554":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Img = cv2.imread(Negative_Surface[\"JPG\"][indexing])\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2RGB)\n    \n    _,Threshold_Img = cv2.threshold(Reading_Img,150,255,cv2.THRESH_BINARY_INV)\n    Canny_Img = cv2.Canny(Threshold_Img,90,100)\n    contours,_ = cv2.findContours(Canny_Img,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n    Draw_Contours_Negative = cv2.drawContours(Reading_Img,contours,-1,(255,0,0),1)\n    \n    operations.set_xlabel(Draw_Contours_Negative.shape)\n    operations.set_ylabel(Draw_Contours_Negative.size)\n    operations.imshow(Draw_Contours_Negative)\n    \nplt.tight_layout()\nplt.show()","e2a2f101":"figure,axis = plt.subplots(nrows=1,ncols=2,figsize=(12,12))\n\nReading_Img = cv2.imread(Negative_Surface[\"JPG\"][2])\nReading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2GRAY)\n\nHessian_Matrix_Img = hessian_matrix(Reading_Img,sigma=0.15,order=\"rc\")\nmaxima_Img,minima_Img = hessian_matrix_eigvals(Hessian_Matrix_Img)\n\naxis[0].imshow(maxima_Img,cmap=\"Greys_r\")\naxis[1].imshow(minima_Img,cmap=\"Greys_r\")","eaf4c725":"figure,axis = plt.subplots(nrows=1,ncols=2,figsize=(12,12))\n\nReading_Img = cv2.imread(Positive_Surface[\"JPG\"][2])\nReading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2GRAY)\n\nHessian_Matrix_Img = hessian_matrix(Reading_Img,sigma=0.15,order=\"rc\")\nmaxima_Img,minima_Img = hessian_matrix_eigvals(Hessian_Matrix_Img)\n\naxis[0].imshow(maxima_Img,cmap=\"Greys_r\")\naxis[1].imshow(minima_Img,cmap=\"Greys_r\")","0c439c36":"figure,axis = plt.subplots(nrows=1,ncols=2,figsize=(12,12))\n\nReading_Img = cv2.imread(Positive_Surface[\"JPG\"][2])\nReading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2GRAY)\n_,Threshold_Img = cv2.threshold(Reading_Img,150,255,cv2.THRESH_BINARY_INV)\n\nArray_Img = np.array(Reading_Img > Threshold_Img).astype(int)\nSkeleton_Morphology_Img = skimage.morphology.skeletonize(Array_Img)\n\naxis[0].imshow(Reading_Img,cmap=\"Greys_r\")\naxis[1].imshow(Skeleton_Morphology_Img)","954d183a":"figure,axis = plt.subplots(nrows=1,ncols=2,figsize=(12,12))\n\nReading_Img = cv2.imread(Negative_Surface[\"JPG\"][2])\nReading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2GRAY)\n_,Threshold_Img = cv2.threshold(Reading_Img,150,255,cv2.THRESH_BINARY_INV)\n\nArray_Img = np.array(Reading_Img > Threshold_Img).astype(int)\nSkeleton_Morphology_Img = skimage.morphology.skeletonize(Array_Img)\n\naxis[0].imshow(Reading_Img,cmap=\"Greys_r\")\naxis[1].imshow(Skeleton_Morphology_Img)","c4279a0b":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Img = cv2.imread(Negative_Surface[\"JPG\"][indexing])\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2GRAY)\n    \n    _,Threshold_Img = cv2.threshold(Reading_Img,150,255,cv2.THRESH_BINARY_INV)\n    Array_Img = np.array(Reading_Img > Threshold_Img).astype(int)\n    Skeleton_Morphology_Img = skimage.morphology.skeletonize(Array_Img)\n    \n    operations.set_xlabel(Skeleton_Morphology_Img.shape)\n    operations.set_ylabel(Skeleton_Morphology_Img.size)\n    operations.imshow(Skeleton_Morphology_Img)\n    \nplt.tight_layout()\nplt.show()","de21fb61":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Img = cv2.imread(Positive_Surface[\"JPG\"][indexing])\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2GRAY)\n    \n    _,Threshold_Img = cv2.threshold(Reading_Img,150,255,cv2.THRESH_BINARY_INV)\n    Array_Img = np.array(Reading_Img > Threshold_Img).astype(int)\n    Skeleton_Morphology_Img = skimage.morphology.skeletonize(Array_Img)\n    \n    operations.set_xlabel(Skeleton_Morphology_Img.shape)\n    operations.set_ylabel(Skeleton_Morphology_Img.size)\n    operations.imshow(Skeleton_Morphology_Img)\n    \nplt.tight_layout()\nplt.show()","dbe76c16":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Img = cv2.imread(Positive_Surface[\"JPG\"][indexing])\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2GRAY)\n    \n    _,Threshold_Img = cv2.threshold(Reading_Img,150,255,cv2.THRESH_BINARY_INV)\n    Canny_Img = cv2.Canny(Threshold_Img,90,100)\n    Array_Img = np.array(Reading_Img > Canny_Img).astype(int)\n    Skeleton_Morphology_Img = skimage.morphology.skeletonize(Array_Img)\n    \n    operations.set_xlabel(Skeleton_Morphology_Img.shape)\n    operations.set_ylabel(Skeleton_Morphology_Img.size)\n    operations.imshow(Skeleton_Morphology_Img)\n    \nplt.tight_layout()\nplt.show()","6b10c596":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Img = cv2.imread(Negative_Surface[\"JPG\"][indexing])\n    Reading_Img = cv2.cvtColor(Reading_Img,cv2.COLOR_BGR2GRAY)\n    \n    _,Threshold_Img = cv2.threshold(Reading_Img,150,255,cv2.THRESH_BINARY_INV)\n    Canny_Img = cv2.Canny(Threshold_Img,90,100)\n    Array_Img = np.array(Reading_Img > Canny_Img).astype(int)\n    Skeleton_Morphology_Img = skimage.morphology.skeletonize(Array_Img)\n    \n    operations.set_xlabel(Skeleton_Morphology_Img.shape)\n    operations.set_ylabel(Skeleton_Morphology_Img.size)\n    operations.imshow(Skeleton_Morphology_Img)\n    \nplt.tight_layout()\nplt.show()","c54affc2":"xTrain,xTest = train_test_split(Main_Surface_Data,train_size=0.9,shuffle=True,random_state=42)","e34f0d33":"print(xTrain.shape)\nprint(xTest.shape)","be4a05e8":"Train_IMG_Generator = ImageDataGenerator(rescale=1.\/255,\n                                        rotation_range=25,\n                                        shear_range=0.5,\n                                        zoom_range=0.5,\n                                        width_shift_range=0.2,\n                                        height_shift_range=0.2,\n                                        brightness_range=[0.6,0.9],\n                                        vertical_flip=True,\n                                        validation_split=0.1)","479a0305":"Test_IMG_Generator = ImageDataGenerator(rescale=1.\/255)","d60a380f":"Example_Surface_Img = Main_Surface_Data[\"JPG\"][444]\nLoading_Img = image.load_img(Example_Surface_Img,target_size=(220,220))\nArray_Img = image.img_to_array(Loading_Img)\nArray_Img = Array_Img.reshape((1,) + Array_Img.shape)\n\ni = 0\n\nfor batch in Train_IMG_Generator.flow(Array_Img,batch_size=32):\n    plt.figure(i)\n    Image_Out = plt.imshow(image.img_to_array(batch[0]))\n    i += 1\n    \n    if i % 6 == 0:\n        break\n\nplt.show()","14f68102":"Train_Set = Train_IMG_Generator.flow_from_dataframe(dataframe=xTrain,\n                                                   x_col=\"JPG\",\n                                                   y_col=\"CATEGORY\",\n                                                   color_mode=\"rgb\",\n                                                   class_mode=\"binary\",\n                                                   target_size=(200,200),\n                                                   subset=\"training\",\n                                                    batch_size=32,\n                                                    seed=32)","e0c7ee78":"Validation_Set = Train_IMG_Generator.flow_from_dataframe(dataframe=xTrain,\n                                                   x_col=\"JPG\",\n                                                   y_col=\"CATEGORY\",\n                                                   color_mode=\"rgb\",\n                                                   class_mode=\"binary\",\n                                                   target_size=(200,200),\n                                                   subset=\"validation\",\n                                                    batch_size=32,\n                                                    seed=32)","3667de34":"Test_Set = Test_IMG_Generator.flow_from_dataframe(dataframe=xTest,\n                                                   x_col=\"JPG\",\n                                                   y_col=\"CATEGORY\",\n                                                   color_mode=\"rgb\",\n                                                   class_mode=\"binary\",\n                                                   target_size=(200,200),\n                                                    batch_size=32,\n                                                    seed=32)","8ffafa2b":"print(\"TRAIN: \")\nprint(Train_Set.class_indices)\nprint(Train_Set.classes[0:5])\nprint(Train_Set.image_shape)\nprint(\"---\"*20)\nprint(\"VALIDATION: \")\nprint(Validation_Set.class_indices)\nprint(Validation_Set.classes[0:5])\nprint(Validation_Set.image_shape)\nprint(\"---\"*20)\nprint(\"TEST: \")\nprint(Test_Set.class_indices)\nprint(Test_Set.classes[0:5])\nprint(Test_Set.image_shape)","ef910a04":"print(Train_Set.image_shape[0],Train_Set.image_shape[1],Train_Set.image_shape[2])","c58cc8d2":"compile_optimizer = \"adam\"\ncompile_loss = \"binary_crossentropy\"\ninput_dim = (Train_Set.image_shape[0],Train_Set.image_shape[1],Train_Set.image_shape[2])\nclass_dim = 1","3209c7db":"Early_Stopper = tf.keras.callbacks.EarlyStopping(monitor=\"loss\",patience=3,mode=\"min\")\nCheckpoint_Model = tf.keras.callbacks.ModelCheckpoint(monitor=\"val_accuracy\",\n                                                      save_best_only=True,\n                                                      save_weights_only=True,\n                                                      filepath=\".\/modelcheck\")","aff19f3c":"Model = Sequential()\n\nModel.add(Conv2D(32,(3,3),activation=\"relu\",input_shape=input_dim))\nModel.add(BatchNormalization())\nModel.add(MaxPooling2D((2,2),strides=2))\n\nModel.add(Conv2D(64,(3,3),activation=\"relu\",padding=\"same\"))\nModel.add(Dropout(0.3))\nModel.add(MaxPooling2D((2,2),strides=2))\n\nModel.add(Conv2D(128,(3,3),activation=\"relu\",padding=\"same\"))\nModel.add(Dropout(0.3))\nModel.add(MaxPooling2D((2,2),strides=2))\n\nModel.add(Conv2D(256,(3,3),activation=\"relu\",padding=\"same\"))\nModel.add(Dropout(0.3))\nModel.add(MaxPooling2D((2,2),strides=2))\n\nModel.add(Flatten())\nModel.add(Dense(1024,activation=\"relu\"))\nModel.add(Dropout(0.5))\nModel.add(Dense(class_dim,activation=\"sigmoid\"))","49791b98":"Model.compile(optimizer=compile_optimizer,loss=compile_loss,metrics=[\"accuracy\"])","95303356":"CNN_Model = Model.fit(Train_Set,\n                      validation_data=Validation_Set,\n                      callbacks=[Early_Stopper,Checkpoint_Model],\n                      epochs=50)","715ad77b":"print(Model.summary())","0ded2852":"Model.save(\"Model_Last_Prediction.h5\")","9556a76e":"Grap_Data = pd.DataFrame(CNN_Model.history)\nGrap_Data.plot()","ae035a17":"plt.plot(CNN_Model.history[\"accuracy\"])\nplt.plot(CNN_Model.history[\"val_accuracy\"])\nplt.ylabel(\"ACCURACY\")\nplt.legend()\nplt.show()","b019efd5":"plt.plot(CNN_Model.history[\"loss\"])\nplt.plot(CNN_Model.history[\"val_loss\"])\nplt.ylabel(\"LOSS\")\nplt.legend()\nplt.show()","dce0fcb9":"Model_Results = Model.evaluate(Test_Set)\nprint(\"LOSS:  \" + \"%.4f\" % Model_Results[0])\nprint(\"ACCURACY:  \" + \"%.2f\" % Model_Results[1])","c9540faf":"Model_Test_Prediction = Model.predict(Test_Set)\nModel_Test_Prediction = Model_Test_Prediction.argmax(axis=-1)\nprint(Model_Test_Prediction)","d62b5ee6":"Model_Test_Prediction_Classes = Model.predict_classes(Test_Set)\nprint(Model_Test_Prediction_Classes)","420d155b":"fig, axes = plt.subplots(nrows=5,\n                         ncols=5,\n                         figsize=(20, 20),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(xTest[\"JPG\"].iloc[i]))\n    ax.set_title(f\"PREDICTION:{Model_Test_Prediction_Classes[i]}\")\n    ax.set_xlabel(xTest[\"CATEGORY\"].iloc[i])\nplt.tight_layout()\nplt.show()","0f3c8c46":"# MODEL RNN-LSTM","45d6dd59":"#### PREDICTION PROCESS","3ee02b2b":"#### CANNY VISION","b41bfc02":"# VISUALIZATION","4765f480":"#### MAIN PATH","2fad3882":"# HISTORY\n\n#### Context\n\n* Concrete surface cracks are major defect in civil structures. Building Inspection which is done for the evaluation of rigidity and tensile strength of the building. Crack detection plays a major role in the building inspection, finding the cracks and determining the building health.\n\n#### Content\n\n* The datasets contains images of various concrete surfaces with and without crack. The image data are divided into two as negative (without crack) and positive (with crack) in separate folder for image classification. Each class has 20000images with a total of 40000 images with 227 x 227 pixels with RGB channels. The dataset is generated from 458 high-resolution images (4032x3024 pixel) with the method proposed by Zhang et al (2016). High resolution images found out to have high variance in terms of surface finish and illumination condition. No data augmentation in terms of random rotation or flipping or tilting is applied.\n\n#### Acknowledgements\n\n* This dataset is taken from the website Mendeley Data - Crack Detection, contributed by \u00c7a\u011flar F\u0131rat \u00d6zgenel.\n\n* \u00d6zgenel, \u00c7a\u011flar F\u0131rat (2019), \u201cConcrete Crack Images for Classification\u201d, Mendeley Data, v2\nhttp:\/\/dx.doi.org\/10.17632\/5y9wdsg2zt.2\n\n#### Previous works\n\n* 2018 \u2013 \u00d6zgenel, \u00c7.F., G\u00f6nen\u00e7 Sorgu\u00e7, A. \u201cPerformance Comparison of Pretrained Convolutional Neural Networks on Crack Detection in Buildings\u201d, ISARC 2018, Berlin.\n\n* Lei Zhang , Fan Yang , Yimin Daniel Zhang, and Y. J. Z., Zhang, L., Yang, F., Zhang, Y. D., & Zhu, Y. J. (2016). Road Crack Detection Using Deep Convolutional Neural Network. In 2016 IEEE International Conference on Image Processing (ICIP). http:\/\/doi.org\/10.1109\/ICIP.2016.7533052","82b19d79":"#### CANNY SKELETON MORPHOLOGY","46782e30":"#### LABESL","13bbbd6d":"# SPLITTING TRAIN AND TEST","0a893471":"#### VISION FUNCTION","303d28f9":"# IMAGE GENERATOR","ea900efb":"#### THRESHOLD VISION","3f6a4924":"# PACKAGES AND LIBRARIES","9e22ee24":"#### THRESHOLD SKELETON MORPHOLOGY","03a9c8ff":"#### THRESHOLD-CANNY VISION","89289333":"#### JPG LABELS","d4731784":"#### HOW TO LOOK BY GENERATOR","93196025":"#### CALLBACKS","305ad532":"#### TO SERIES","a6b8df3c":"#### TO SHUFFLE","419afbc5":"#### JPG PATH","db2f4171":"#### STRUCTURE","0e7d291c":"#### DRAW CONTOURS","dc39ca0c":"#### SIMPLE VISION","2cd9378b":"#### CHECKING MODEL","4a203655":"#### TO DATAFRAME","d1c3aa67":"#### HESSIAN MATRIX","ca8e00ca":"#### STRUCTURE","b3826971":"# PATH,LABEL,TRANSFORMATION PROCESS","bc5d6bcb":"#### CHECKING","fa6c4996":"#### PARAMETERS","78068107":"#### APPLYING"}}