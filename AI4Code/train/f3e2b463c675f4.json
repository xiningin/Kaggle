{"cell_type":{"49eabe85":"code","126d8fa4":"code","6037e9f9":"code","c317e778":"code","45a590d9":"code","e5415d3a":"code","e1377cab":"code","109b79f0":"code","26d09f60":"markdown"},"source":{"49eabe85":"from fastai.basics import *\nfrom fastai.vision.all import *","126d8fa4":"path = Path('\/kaggle\/input\/test77886699\/Data\/')\nimgs_path = path\/'images'\nlbls_path = path\/'labels'\n\n\nprint(f'Checking number of files - images:{len([f for f in imgs_path.iterdir()])}\\\n      masks:{len([f for f in lbls_path.iterdir()])}')\n\n\n# Checking file shapes \nidx = 22\nimg_path = [f for f in imgs_path.iterdir()][idx]\nmsk_path = [f for f in lbls_path.iterdir()][idx]\n\nimg = np.load(str(img_path))\nmsk = np.load(str(msk_path))\n\nprint(f'Checking shapes - image: {img.shape} mask: {msk.shape}')","6037e9f9":"# Plotting a sample\n_, ax = plt.subplots(1, 2, figsize=(10, 5))\nax[0].imshow(img.transpose((1, 2, 0))[..., [3, 2, 1]]*3.0)\nax[1].imshow(msk)","c317e778":"\ndef open_npy(fn, chnls=None, cls=torch.Tensor):\n    im = torch.from_numpy(np.load(str(fn))).type(torch.float32)\n    if chnls is not None: im = im[chnls]\n    return cls(im)\n\nclass MSTensorImage(TensorImage):\n    \n    def __init__(self, x, chnls_first=False):\n        self.chnls_first = chnls_first\n\n    @classmethod\n    def create(cls, data:(Path,str,ndarray), chnls=None, chnls_first=True):\n        \n        if isinstance(data, Path) or isinstance(data, str):\n            if str(data).endswith('npy'): im = open_npy(fn=data, chnls=chnls, cls=torch.Tensor)\n\n        elif isinstance(data, ndarray): \n            im = torch.from_numpy(data)\n        else:\n            im = data\n        \n        return cls(im, chnls_first=chnls_first)\n\n    \n    def show(self, chnls=[3, 2, 1], bright=1., ctx=None):\n        \n        if self.ndim > 2:\n            visu_img = self[..., chnls] if not self.chnls_first else self.permute([1, 2, 0])[..., chnls]\n        else:\n            visu_img = self\n        \n        visu_img = visu_img.squeeze()\n        \n        visu_img *= bright\n        visu_img = np.where(visu_img > 1, 1, visu_img)\n        visu_img = np.where(visu_img < 0, 0, visu_img)\n        \n        plt.imshow(visu_img) if ctx is None else ctx.imshow(visu_img)\n        \n        return ctx\n    \n    def __repr__(self):\n        \n        return (f'MSTensorImage: {self.shape}')","45a590d9":"img = MSTensorImage.create(img_path)\nprint(img)\n\n_, ax = plt.subplots(1, 3, figsize=(12, 4))\nimg.show(bright=3., ctx=ax[0])\nimg.show(chnls=[2, 7, 10], ctx=ax[1])\nimg.show(chnls=[11], ctx=ax[2])","e5415d3a":"mask = TensorMask(open_npy(msk_path))\nprint(mask.shape)\n\n_, ax = plt.subplots(1, 2, figsize=(10, 5))\nimg.show(bright=3., ctx=ax[0])\nmask.show(ctx=ax[1])","e1377cab":"imgs_path\nget_files(imgs_path,extensions='.npy')\nget_lbl_fn(Path('\/kaggle\/input\/test77886699\/Data\/images\/Oros_1_29.npy'))","109b79f0":"\ndef get_lbl_fn(img_fn: Path):\n    lbl_path = img_fn.parent.parent\/'labels'\n    lbl_name = img_fn.name\n    return (lbl_path\/lbl_name)\n\ndb = DataBlock(blocks=(TransformBlock(type_tfms=partial(MSTensorImage.create, chnls_first=True),\n                                       item_tfms=Resize(100)),\n                       TransformBlock(type_tfms=[get_lbl_fn, partial(open_npy, cls=TensorMask)], \n                                      item_tfms=[Resize(100), AddMaskCodes(codes=['clear', 'water', 'shadow'])]),\n                      ),\n               get_items=partial(get_files, extensions='.npy'),\n               splitter=RandomSplitter(valid_pct=0.1)\n              )\n\ndb.summary(source=imgs_path)\n","26d09f60":"# Excercise on Fast AI\nThis notebook intends to repeat the results of the [TDS post](http:\/\/towardsdatascience.com\/how-to-create-a-datablock-for-multispectral-satellite-image-segmentation-with-the-fastai-v2-bc5e82f4eb5)"}}