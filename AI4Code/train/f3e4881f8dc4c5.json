{"cell_type":{"36f7bb70":"code","3bb016e7":"code","98e53632":"code","af9b8ba0":"code","45bed699":"code","25621cbb":"code","e8f3d48b":"code","fa999574":"code","9c1f4025":"code","3ff715df":"markdown","b90840e8":"markdown","d6890175":"markdown","dc075833":"markdown","011e5b5a":"markdown","e051b976":"markdown"},"source":{"36f7bb70":"!pip -q install xgboost --upgrade\nimport xgboost as xgb\n# check that we have installed version 1.3.1\nxgb.__version__","3bb016e7":"import numpy  as np\nimport pandas as pd\n\n# plotting\n#import matplotlib.pyplot as plt\n\n!pip install -q datatable \nimport datatable as dt\n\nimport shap","98e53632":"# read in the train dataset\ntrain_data = dt.fread('..\/input\/jane-street-market-prediction\/train.csv').to_pandas()\n\n# filter out the zero weights\n#train_data = train_data.query('weight > 0').reset_index(drop = True)\n\n# create our action\n#train_data['action'] = ( (train_data['resp']) > 0 )*1\n\n# let us look only at the last 5 days\ntrain_data = train_data.query('date > 494').reset_index(drop = True)\n\nX_train = train_data.loc[:, train_data.columns.str.contains('feature')]\nX_train = X_train.fillna(X_train.mean())\ny_train = train_data.loc[:, 'resp']\n\n# free up some RAM\ndel train_data","af9b8ba0":"X_train.shape","45bed699":"n_trees = 500\ndmat = xgb.DMatrix(X_train, y_train)\nbst  = xgb.train({\"tree_method\": \"gpu_hist\"}, dmat, n_trees)\n# Make sure GPU prediction is enabled\nbst.set_param({\"predictor\": \"gpu_predictor\"})","25621cbb":"%%time \n\n# Compute the shap values\nshap_values = bst.predict(dmat, pred_contribs=True)","e8f3d48b":"# and plot\nshap.summary_plot(shap_values[:,:-1], X_train)","fa999574":"%%time \n\n# Compute the shap interactions\nshap_interactions = bst.predict(dmat, pred_interactions=True)","9c1f4025":"# and plot\nshap.summary_plot(shap_interactions[:,:-1,:-1], X_train)","3ff715df":"## Related reading\n* [\"*GPU-Accelerated SHAP values with XGBoost 1.3 and RAPIDS*\"](https:\/\/medium.com\/rapids-ai\/gpu-accelerated-shap-values-with-xgboost-1-3-and-rapids-587fad6822) by Rory Mitchell\n* [Rory Mitchell, Eibe Frank, Geoffrey Holmes \"*GPUTreeShap: Fast Parallel Tree Interpretability*\", arXiv:2010.13972 (2020)](https:\/\/arxiv.org\/pdf\/2010.13972.pdf)\n* [GPUTreeShap](https:\/\/github.com\/rapidsai\/gputreeshap) by [RAPIDS](https:\/\/rapids.ai\/) on GitHub\n* [\"*Basic SHAP Interaction Value Example in XGBoost*\"](https:\/\/shap.readthedocs.io\/en\/latest\/example_notebooks\/tabular_examples\/tree_based_models\/Basic%20SHAP%20Interaction%20Value%20Example%20in%20XGBoost.html) fron the SHAP documentation\n* [SHAP (SHapley Additive exPlanations)](https:\/\/github.com\/slundberg\/shap) by Scott Lundberg on GitHub","b90840e8":"### XGBoost","d6890175":"### SHAP interactions\nUse `pred_interactions=True` to now include the pair-wise interaction terms","dc075833":"Our input consists of well over 26 thousand rows of data, and has 130 features:","011e5b5a":"# Jane Street: GPU accelerated SHAP values\nLess than a month ago version 1.3 of [XGBoost](https:\/\/xgboost.ai\/) was released and with it bringing GPU acceleration to the calculation of SHAP values, reducing computation time by up to 20x for SHAP values and 340x for SHAP interaction values. \nFor more details see the blog post [\"*GPU-Accelerated SHAP values with XGBoost 1.3 and RAPIDS*\"](https:\/\/medium.com\/rapids-ai\/gpu-accelerated-shap-values-with-xgboost-1-3-and-rapids-587fad6822) by Rory Mitchell. This was made possible with [GPUTreeSHAP](https:\/\/github.com\/rapidsai\/gputreeshap) by the [RAPIDS](https:\/\/rapids.ai\/) team.\n\nThe intention of this notebook is not an explanation of the the features in this dataset, but rather an example of calculating the XGBoost GPU accelerated SHAP values.\nHere we shall look at the last 5 days worth of training data for the [Jane Street Market Prediction competition](https:\/\/www.kaggle.com\/c\/jane-street-market-prediction), using the value of `resp` as our target.\n\n**First we shall install the latest version of XGBoost**","e051b976":"### SHAP values"}}