{"cell_type":{"4f35aa93":"code","d915380e":"code","cb074f53":"code","6404c54d":"code","da32fba9":"code","48173e2f":"code","ae9928b9":"code","d99c6070":"code","d2441852":"code","0cff01da":"code","5721566c":"code","bf21c04b":"code","53ee9597":"code","78c75b51":"code","288bc506":"code","04a21c69":"code","af450610":"code","6a843031":"code","7b0df050":"code","3a384359":"code","f4351f03":"code","15d0241a":"code","ab16939f":"code","4c38848e":"code","3c3b1be1":"code","e64dcee5":"code","fbb28938":"code","30b18324":"code","a9d297a3":"code","cefab309":"code","e32f6986":"code","25a99cb0":"code","20e6200a":"code","a0f75564":"code","4b19d6c0":"code","820f685b":"code","6ce7eb4d":"code","11491e2e":"code","b323a1bc":"code","992f96b0":"code","dfd041c6":"code","af306a9d":"code","45b467f6":"code","82b44818":"code","1132a6aa":"code","c4554779":"code","7cc681be":"code","6ab89f01":"code","736838aa":"code","45418f45":"code","7ce69a5b":"code","d207fe20":"code","0a3adaa7":"code","d2cebb45":"code","e24c4c19":"code","a0920cd3":"code","66c19661":"code","0e73bd5b":"code","2ac6d631":"code","268c0e95":"code","e978943b":"code","5044d298":"code","54d3277b":"code","941ce932":"code","504a636d":"code","d2523784":"code","a8c7e425":"code","efbc838f":"code","57fcbcbb":"code","d609199b":"code","f55f4dd7":"code","4d017a5e":"code","b7882059":"code","2b34afa2":"code","92a46993":"code","7b8d3645":"code","24b4c00a":"code","b388838c":"code","01d40a4a":"code","2c314d41":"code","86d7af8b":"code","84d7e61f":"code","1d4bb093":"code","2ca06bc4":"code","e32d9882":"code","c4240afc":"code","adcfc34b":"code","db515a80":"code","f0bbe538":"code","3808b6f4":"code","9b02e60f":"code","de2cf6aa":"code","fca3af2e":"code","797acbc7":"code","f5685c7d":"code","df39eee2":"code","cc8657e0":"code","d7253602":"code","c5222360":"markdown","208d7c2b":"markdown","8a1cdf4f":"markdown","55a294cf":"markdown","932387a1":"markdown","b84b3935":"markdown","3a73d798":"markdown","2cae41a2":"markdown","605b37ff":"markdown","69d46327":"markdown","1ec830ad":"markdown","d0f4e6a0":"markdown","f2972535":"markdown","a8f79a1a":"markdown","8b221f2e":"markdown","2c4b5895":"markdown","3cce796f":"markdown","483d1404":"markdown","6ff79d12":"markdown","3685b981":"markdown","3557fa93":"markdown","c8c3eb85":"markdown","f0862ebb":"markdown","bba29bf8":"markdown","eb80a39f":"markdown","9e343cbc":"markdown","2efc6976":"markdown","094d0495":"markdown","c7d637ba":"markdown","5d155830":"markdown","a48c7367":"markdown","70cda492":"markdown","65b76b03":"markdown","0369e82f":"markdown","da17fb49":"markdown","39727dbb":"markdown","dfce33b3":"markdown","d59103a5":"markdown","c2495780":"markdown","330a32df":"markdown","f62e20ac":"markdown","21066665":"markdown","7f221c4e":"markdown"},"source":{"4f35aa93":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport nltk\nfrom nltk.tokenize import TweetTokenizer\nfrom nltk.stem.wordnet import WordNetLemmatizer","d915380e":"train = pd.read_csv('\/kaggle\/input\/2021-homework1-multiclass-classification\/train.csv', sep=';')\ntest = pd.read_csv('\/kaggle\/input\/2021-homework1-multiclass-classification\/test.csv', sep=';')\nsubmission = pd.read_csv('\/kaggle\/input\/2021-homework1-multiclass-classification\/sample_submission.csv')","cb074f53":"train.head(5)","6404c54d":"'train: ', train.shape, 'test: ', test.shape","da32fba9":"submission.head()","48173e2f":"train.columns","ae9928b9":"train.head()","d99c6070":"train.interest_level.value_counts()","d2441852":"train.interest_level.value_counts(normalize=True)","0cff01da":"mapper={\n        'low':0,\n        'medium':1,\n        'high':2\n       }","5721566c":"train['interest_level_num'] = train['interest_level'].apply(lambda x: mapper[x])\ntrain['interest_level_num']","bf21c04b":"train.features[24555]","53ee9597":"train['features'] = train['features'].str.replace('[\\[\\]\\']', '').str.split(',')","78c75b51":"k = 1\nfor i in range(len(train['building_id'])):\n    if type(train['building_id'][i]) == str:\n        temp = train['building_id'][i]\n        train['building_id'] = train['building_id'].replace(temp, k)\n        k = k+1\ntrain['building_id']","288bc506":"import re\nfor i in range(len(train['features'])):\n    for j in range(len(train['features'][i])):\n        train['features'][i][j] = re.sub(\"[^A-Z|^a-z]\", ' ', train['features'][i][j])","04a21c69":"train['features']","af450610":"w_tokenizer = TweetTokenizer()\nlemmatizer = WordNetLemmatizer()","6a843031":"for i in range(len(train['features'])):\n        train['features'][i] = list(map(w_tokenizer.tokenize, train['features'][i]))","7b0df050":"train['features']","3a384359":"for i in range(len(train['features'])):\n    for j in range(len(train['features'][i])):\n        for k in range(len(train['features'][i][j])):\n            train['features'][i][j][k] = lemmatizer.lemmatize(train['features'][i][j][k].lower())","f4351f03":"train['features']","15d0241a":"for i in range(len(train['features'])):\n    for j in range(len(train['features'][i])):\n        train['features'][i][j] = \" \".join(train['features'][i][j])","ab16939f":"delete_dict = []\nfor i in range(len(train['interest_level_num'])):\n    if train['interest_level_num'].iloc[i] != 2:\n        delete_dict.append(i)","4c38848e":"train_high = train.drop(delete_dict)","3c3b1be1":"features_high_list = []\nfor i in range(len(train_high[\"features\"])):\n    for j in range(len(train_high[\"features\"].iloc[i])):\n        features_high_list.append(train_high[\"features\"].iloc[i][j])\n#features","e64dcee5":"features_high = pd.Series(features_high_list)\nfeatures_high_value = features_high.value_counts(normalize=True).head(20)\nfeatures_high_value","fbb28938":"delete_dict = []\nfor i in range(len(train['interest_level_num'])):\n    if train['interest_level_num'].iloc[i] != 1:\n        delete_dict.append(i)","30b18324":"train_middle = train.drop(delete_dict)","a9d297a3":"features_middle_list = []\nfor i in range(len(train_middle[\"features\"])):\n    for j in range(len(train_middle[\"features\"].iloc[i])):\n        features_middle_list.append(train_middle[\"features\"].iloc[i][j])","cefab309":"features_middle = pd.Series(features_middle_list)\nfeatures_middle_value = features_middle.value_counts(normalize=True).head(20)\nfeatures_middle_value","e32f6986":"delete_dict = []\nfor i in range(len(train['interest_level_num'])):\n    if train['interest_level_num'].iloc[i] != 0:\n        delete_dict.append(i)","25a99cb0":"train_low = train.drop(delete_dict)","20e6200a":"features_low_list = []\nfor i in range(len(train_low[\"features\"])):\n    for j in range(len(train_low[\"features\"].iloc[i])):\n        features_low_list.append(train_low[\"features\"].iloc[i][j])\n","a0f75564":"features_low = pd.Series(features_low_list)\nfeatures_low_value = features_low.value_counts(normalize=True).head(20)\nfeatures_low_value\n","4b19d6c0":"train_features = pd.DataFrame(train['features'], columns = ['features'])\ntrain_features","820f685b":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0434\u0432\u0443\u0445 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 (\u0432\u043e\u0437\u0440\u0430\u0449\u0430\u0435\u0442 0 \u043f\u0440\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u043e\u0431\u0449\u0438\u0445 \u0441\u043b\u043e\u0432)\ndef compare_list(list1, list2):\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return 1\n    return 0  ","6ce7eb4d":"features = set()\nfor i in range(len(train)):\n    for j in range(len(train[\"features\"][i])):\n        features.add(train[\"features\"][i][j])\n#features","11491e2e":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\u0435\u0439(\u043f\u043e\u0438\u0441\u043a \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u0441\u043b\u043e\u0432\u0430\u043c)\ndef find_analogy(list_dict, df, name_column, name_new_column):\n    for i in range(len(df[name_column])):\n        df.loc[i, name_new_column] = 0\n        for j in range(len(df[name_column][i])):\n            for k in range(len(list_dict)):\n                while df[name_column][i][j].find(list_dict[k]) != -1:\n                    df.loc[i, name_new_column] = 1\n                    break","b323a1bc":"# \u043f\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e\nlist_size = ['large', 'huge', 'big', 'queen']\nlist_repair = ['modern', 'renovated', 'new', 'renovation']\nlist_photo = ['photo', 'actual']\n\n# \u043f\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f\nlist_private = ['private']\nlist_resident = ['resident']\nlist_rent = ['rent', 'rentable']\n\n# \u043f\u043e \u0446\u0435\u043d\u0435\nlist_low_price = ['low fee', 'no fee', 'underpriced', 'lowrise', 'reduced fee']\n\n# \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u043a\u043e\u043c\u043d\u0430\u0442\nlist_gameroom = ['playroom', 'gameroom', 'game']\nlist_parking = ['garage', 'parking']\nlist_laundry = ['laundry', 'washer']\nlist_storage = ['closet', 'package', 'storage']\nlist_parking = ['garage', 'parking']\n\n# \u043f\u043e \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0443 \u0438 \u0436\u0438\u0437\u043d\u0435\u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\nlist_transport = ['subway', 'transport']\nlist_greens = ['park', 'garden', 'yard']\nlist_child = ['child']\nlist_pet = ['pet ok', 'dog allowed', 'cat allowed', 'small dog', 'pet allowed', 'pet welcome', 'pet case by case']\nlist_fitness = ['fitness', 'gym', 'yoga']\n\n# \u043f\u043e \u0443\u0441\u043b\u0443\u0433\u0430\u043c\nlist_tv = ['cable', 'tv']\nlist_internet = ['wifi', 'internet']\nlist_heat = ['heat', 'hot water']\nlist_elevator = ['elevator']\n\n#\nlist_roof = ['roof']\nlist_doorman = ['doorman']\nlist_din_room = ['dining']\n\n","992f96b0":"find_analogy(list_size, train_features, 'features', 'big_size')\nfind_analogy(list_repair, train_features, 'features', 'fresh_repair')\nfind_analogy(list_photo, train_features, 'features', 'actual_photo')\nfind_analogy(list_private, train_features, 'features', 'private')\nfind_analogy(list_resident, train_features, 'features', 'resident')\nfind_analogy(list_rent, train_features, 'features', 'rent')\nfind_analogy(list_low_price, train_features, 'features', 'low_price')\nfind_analogy(list_gameroom, train_features, 'features', 'gameroom')\nfind_analogy(list_storage, train_features, 'features', 'storageroom')\nfind_analogy(list_laundry, train_features, 'features', 'laundry')\nfind_analogy(list_parking, train_features, 'features', 'parking')\nfind_analogy(list_transport, train_features, 'features', 'transport')\nfind_analogy(list_greens, train_features, 'features', 'greens')\nfind_analogy(list_child, train_features, 'features', 'for_child')\nfind_analogy(list_pet, train_features, 'features', 'pet')\nfind_analogy(list_fitness, train_features, 'features', 'fitness')\nfind_analogy(list_tv, train_features, 'features', 'tv')\nfind_analogy(list_internet, train_features, 'features', 'internet')\nfind_analogy(list_heat, train_features, 'features', 'heat')\nfind_analogy(list_elevator, train_features, 'features', 'elevator')\nfind_analogy(list_roof, train_features, 'features', 'roof')\nfind_analogy(list_doorman, train_features, 'features', 'doorman')\nfind_analogy(list_din_room, train_features, 'features', 'dining')","dfd041c6":"train_features ","af306a9d":"train_features['bathrooms'] = train['bathrooms']\ntrain_features['bedrooms'] = train['bedrooms']","45b467f6":"train_features = train_features.drop(['features'], axis=1)","82b44818":"train_features","1132a6aa":"latitude_central_park = 40.4657 \nlongitude_central_park = 73.5758","c4554779":"train_features['proximity_\u0441en_park_lat'] = train['latitude'].apply(lambda x: abs(1 - abs(latitude_central_park - abs(x))))\ntrain_features['proximity_\u0441en_park_lon'] = train['longitude'].apply(lambda x: abs(1 - abs(longitude_central_park - abs(x))))","7cc681be":"train_features","6ab89f01":"train['price'].median()","736838aa":"train_features['price_normalize'] = train['price'].apply(lambda x: x \/ train['price'].median())","45418f45":"train_features","7ce69a5b":"train_features['num_features'] = train_features['big_size'] + train_features['fresh_repair'] + train_features['actual_photo'] + train_features['private'] + train_features['resident'] + train_features['rent'] + train_features['low_price'] + train_features['gameroom'] + train_features['storageroom'] + train_features['laundry'] + train_features['parking'] + train_features['transport'] + train_features['greens'] + train_features['for_child'] + train_features['pet'] + train_features['tv'] + train_features['internet'] + train_features['heat'] + train_features['elevator'] +  train_features['roof'] + train_features['doorman'] + train_features['dining']","d207fe20":"train_features['num_features'] = train_features['num_features'] \/ train_features['num_features'].max()","0a3adaa7":"train_features","d2cebb45":"for i in range(len(train['building_id'])):\n    train_features.loc[i, 'building_id'] = train['building_id'].iloc[i]","e24c4c19":"train_features","a0920cd3":"from sklearn.model_selection import train_test_split, StratifiedKFold, RandomizedSearchCV\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import f1_score, average_precision_score\nimport joblib","66c19661":"classifiers = {\n    'KNeighborsClassifier': KNeighborsClassifier(),\n    'DecisionTreeClassifier': DecisionTreeClassifier(),\n    'RandomForestClassifier': RandomForestClassifier(),\n    'AdaBoostClassifier': AdaBoostClassifier(),\n    'GaussianNB': GaussianNB(),\n    'QuadraticDiscriminantAnalysis': QuadraticDiscriminantAnalysis(),\n    'XGBClassifier': XGBClassifier(),\n\n}","0e73bd5b":"target='interest_level'\ntrain=train.set_index('listing_id')\ntrain_target=train[target]","2ac6d631":"for name, model in classifiers.items():\n    print(name)\n    X_train, X_test, y_train, y_test=train_test_split(train_features, train['interest_level_num'],\n                                                  test_size=0.3, stratify=train_target, \n                                                  random_state = 2)\n    \n    model.fit(X_train, y_train)    \n    f1 = f1_score(y_test, model.predict(X_test), average = 'macro')\n    \n    \n    print('\u041d\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: ')\n    print('%s: F_\u043c\u0435\u0440\u0430: %7.5f,' %\n    (name, f1))\n    print(i)\n    print('-'*30)\n\n    \n    ","268c0e95":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2","e978943b":"X_train, X_test, y_train, y_test=train_test_split(train_features, train['interest_level_num'],\n                                                  test_size=0.3, stratify=train_target, \n                                                  random_state=2)\nX_train\nX_new = SelectKBest(chi2, k=26).fit_transform(X_train, y_train)\n\nselector = SelectKBest(chi2, k=26)\nselector.fit(X_train, y_train)\ncols = selector.get_support(indices=True)\n\nclassifier = XGBClassifier(random_state=2)\nclassifier.fit(X_new, y_train) \nf1 = f1_score(y_test, classifier.predict(X_test.iloc[:,cols]), average = 'macro')\nf1","5044d298":"X_train","54d3277b":"cols\nX_new = X_train.iloc[:,cols]\nX_new","941ce932":"from sklearn.feature_selection import RFE\nclassifiers_2 = {\n'DecisionTreeClassifier': DecisionTreeClassifier(),\n'RandomForestClassifier': RandomForestClassifier(),\n'AdaBoostClassifier': AdaBoostClassifier(),\n'XGBClassifier': XGBClassifier(random_state = 2),\n}\n\n# n_features_to_select - \u043a\u043e\u043b-\u0432\u043e \u043e\u0442\u0431\u0438\u0440\u0430\u0435\u043c\u044b\u0445 \u0444\u0438\u0447\u0435\u0439\n\nfor name, model in classifiers_2.items():\n    rfe = RFE(estimator=model, n_features_to_select = 15)\n    X_new2 = rfe.fit_transform(train_features,train['interest_level_num'])\n    \n    X_train, X_test, y_train, y_test=train_test_split(X_new2, train['interest_level_num'],\n                                                  test_size=0.3, stratify=train_target, \n                                                  random_state=2)\n    model.fit(X_train, y_train)\n\n    f1_res = f1_score(y_test, model.predict(X_test), average = 'macro')\n\n    print('\u041d\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: ')\n    print('%s: F_\u043c\u0435\u0440\u0430: %7.5f,' %\n    (name, f1_res))\n    print('-'*30)\n    rfe_select_features = []\n    \n    for col, mask in zip(train_features.columns, rfe.support_):\n        if mask:\n            rfe_select_features.append(col)","504a636d":"rfe_select_features","d2523784":"from sklearn import datasets\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import VotingClassifier","a8c7e425":"clf1 = DecisionTreeClassifier(random_state=42)\nclf2 = RandomForestClassifier(n_estimators=50, random_state=42)\nclf3 = XGBClassifier()\n\neclf = VotingClassifier(\n    estimators=[('df', clf1), ('rf', clf2), ('xgb', clf3)],\n    voting='hard')\n\nfor clf, label in zip([clf1, clf2, clf3, eclf], ['Decision Tree', 'Random Forest', 'XGB', 'Ensemble']):\n    scores = cross_val_score(clf, X_train, y_train, scoring='accuracy', cv=5)\n    print(\"Accuracy: %0.2f (+\/- %0.2f) [%s]\" % (scores.mean(), scores.std(), label))\n","efbc838f":"X_train, X_test, y_train, y_test=train_test_split(train_features, train['interest_level_num'],\n                                                  test_size=0.3, stratify=train_target, \n                                                  random_state=2)","57fcbcbb":"from sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\n\nsil = []\nkmax = 4\n\n# dissimilarity would not be defined for a single cluster, thus, minimum number of clusters should be 2\nfor k in range(2, kmax+1):\n    kmeans = KMeans(n_clusters = k).fit(train_features)\n    labels = kmeans.labels_\n    sil.append(silhouette_score(train_features, labels, metric = 'euclidean'))\nsil","d609199b":"model_n3 = KMeans(n_clusters=3)\nmodel_n3.fit(train_features)\n\n# predict the clusters on the train dataset\npredict_train_3 = model_n3.predict(train_features)\nprint('\\nCLusters on train data',predict_train_3) ","f55f4dd7":"for i in range(len(train_features)):\n    train_features.loc[i, 'cluster'] = predict_train_3[i]","4d017a5e":"train_features","b7882059":"X_train, X_test, y_train, y_test=train_test_split(train_features, train['interest_level_num'],\n                                                  test_size=0.3, stratify=train_target, \n                                                  random_state=2)\nclassifier = XGBClassifier(random_state=2)\nclassifier.fit(X_train, y_train)\ny_predicts = classifier.predict(X_test)\nf1_score(y_test, y_predicts, average='macro')","2b34afa2":"X_train, X_test, y_train, y_test=train_test_split(train_features, train['interest_level_num'],\n                                                  test_size=0.3, stratify=train_target, \n                                                  random_state=2)","92a46993":"y_train.value_counts(normalize=True)","7b8d3645":"y_test.value_counts(normalize=True)","24b4c00a":"classifier = XGBClassifier(random_state=2)\nclassifier.fit(X_train, y_train)","b388838c":"y_predicts = classifier.predict(X_test)\nf1_score(y_test, y_predicts, average='macro')","01d40a4a":"test['features'] = test['features'].str.replace('[\\[\\]\\']', '').str.split(',')","2c314d41":"k = 1\nfor i in range(len(test['building_id'])):\n    if type(test['building_id'][i]) == str:\n        temp = test['building_id'][i]\n        test['building_id'] = test['building_id'].replace(temp, k)\n        k = k+1\ntest['building_id']","86d7af8b":"for i in range(len(test['features'])):\n    for j in range(len(test['features'][i])):\n        test['features'][i][j] = re.sub(\"[^A-Z|^a-z]\", ' ', test['features'][i][j])","84d7e61f":"for i in range(len(test['features'])):\n        test['features'][i] = list(map(w_tokenizer.tokenize, test['features'][i]))","1d4bb093":"for i in range(len(test['features'])):\n    for j in range(len(test['features'][i])):\n        for k in range(len(test['features'][i][j])):\n            test['features'][i][j][k] = lemmatizer.lemmatize(test['features'][i][j][k].lower())","2ca06bc4":"for i in range(len(test['features'])):\n    for j in range(len(test['features'][i])):\n        test['features'][i][j] = \" \".join(test['features'][i][j])","e32d9882":"test_features = pd.DataFrame(test['features'], columns = ['features'])\ntest_features","c4240afc":"find_analogy(list_size, test_features, 'features', 'big_size')\nfind_analogy(list_repair, test_features, 'features', 'fresh_repair')\nfind_analogy(list_photo, test_features, 'features', 'actual_photo')\nfind_analogy(list_private, test_features, 'features', 'private')\nfind_analogy(list_resident, test_features, 'features', 'resident')\nfind_analogy(list_rent, test_features, 'features', 'rent')\nfind_analogy(list_low_price, test_features, 'features', 'low_price')\nfind_analogy(list_gameroom, test_features, 'features', 'gameroom')\nfind_analogy(list_storage, test_features, 'features', 'storageroom')\nfind_analogy(list_laundry, test_features, 'features', 'laundry')\nfind_analogy(list_parking, test_features, 'features', 'parking')\nfind_analogy(list_transport, test_features, 'features', 'transport')\nfind_analogy(list_greens, test_features, 'features', 'greens')\nfind_analogy(list_child, test_features, 'features', 'for_child')\nfind_analogy(list_pet, test_features, 'features', 'pet')\nfind_analogy(list_fitness, test_features, 'features', 'fitness')\nfind_analogy(list_tv, test_features, 'features', 'tv')\nfind_analogy(list_internet, test_features, 'features', 'internet')\nfind_analogy(list_heat, test_features, 'features', 'heat')\nfind_analogy(list_elevator, test_features, 'features', 'elevator')\nfind_analogy(list_roof, test_features, 'features', 'roof')\nfind_analogy(list_doorman, test_features, 'features', 'doorman')\nfind_analogy(list_din_room, test_features, 'features', 'dining')","adcfc34b":"test_features['bathrooms'] = test['bathrooms']\ntest_features['bedrooms'] = test['bedrooms']","db515a80":"test_features = test_features.drop(['features'], axis=1)","f0bbe538":"test_features['proximity_\u0441en_park_lat'] = test['latitude'].apply(lambda x: abs(1 - abs(latitude_central_park - abs(x))))\ntest_features['proximity_\u0441en_park_lon'] = test['longitude'].apply(lambda x: abs(1 - abs(longitude_central_park - abs(x))))","3808b6f4":"test_features['price_normalize'] = test['price'].apply(lambda x: x \/ test['price'].median())","9b02e60f":"test_features['num_features'] = test_features['big_size'] + test_features['fresh_repair'] + test_features['actual_photo'] + test_features['private'] + test_features['resident'] + test_features['rent'] + test_features['low_price'] + test_features['gameroom'] + test_features['storageroom'] + test_features['laundry'] + test_features['parking'] + test_features['transport'] + test_features['greens'] + test_features['for_child'] + test_features['pet'] + test_features['tv'] + test_features['internet'] + test_features['heat'] + test_features['elevator'] + test_features['roof'] + test_features['doorman'] + test_features['dining'] ","de2cf6aa":"test_features['num_features'] = test_features['num_features'] \/ test_features['num_features'].max()","fca3af2e":"for i in range(len(test['building_id'])):\n    test_features.loc[i, 'building_id'] = test['building_id'].iloc[i]","797acbc7":"target='interest_level'","f5685c7d":"test_features[rfe_select_features]","df39eee2":"test[target] = model.predict(test_features[rfe_select_features])","cc8657e0":"\ntest[target]","d7253602":"test[['listing_id', target]].to_csv('sub_baseline7.csv', index=None)","c5222360":"**Low**","208d7c2b":"**\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u0441\u043b\u043e\u0432\u0430\u043c** ","8a1cdf4f":"**\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0444\u0438\u0447 \u043f\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u0441\u043b\u043e\u0432\u0430\u043c**","55a294cf":"**\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u043a\u0430 \u041d\u044c\u044e-\u0419\u043e\u0440\u043a\u0430**","932387a1":"**\u041e\u0442\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b**","b84b3935":"**\u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0435\u0445 \u0444\u0438\u0447**","3a73d798":"**\u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u0447\u0435\u0439 \u0431\u043b\u0438\u0437\u043e\u0441\u0442\u0438 \u043f\u043e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c**","2cae41a2":"**\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 building_id \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0444\u0438\u0447**","605b37ff":"**\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c \u043b\u0435\u043c\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044e, \u0442.\u0435. \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441\u043b\u043e\u0432 \u043a \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0432\u043e\u0444\u043e\u0440\u043c\u0435. \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0444\u0438\u0447, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c**","69d46327":"## 2. \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432","1ec830ad":"**\u0427\u0438\u0441\u0442\u0438\u043c \u0444\u0438\u0447\u0438 \u043e\u0442 \u043b\u0438\u0448\u043d\u0435\u0433\u043e \u043c\u0443\u0441\u043e\u0440\u0430. \u041e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043b\u0430\u0442\u0438\u043d\u0438\u0446\u0443**","d0f4e6a0":"**\u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0443\u0440\u043e\u0432\u043d\u044f \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0430 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438**","f2972535":"## \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\n## 1. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n\u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0445, \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438 \u0432\u0430\u043c \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u0441\u044f LabelEncoder\/OneHotEncoder, re.sub(),re.findall() ","a8f79a1a":"\u0412 \u043f\u043b\u0430\u043d\u0435 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\\\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u0435\u043b\u0430\u0435\u043c \u0432\u0441\u0435 \u0442\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435. \u041f\u043e\u0442\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.","8b221f2e":"**Meadle**","2c4b5895":"**\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0446\u0435\u043d\u0443 \u043f\u043e \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0439. \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u0435 \u0435\u0449\u0435 \u043a\u0430\u043a \u043e\u0434\u043d\u0443 \u0444\u0438\u0447\u0443**","3cce796f":"**\u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0444\u0438\u0447\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0444\u0438\u0447\u0435\u0439. \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f**","483d1404":"**\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0442\u043e\u043a\u0435\u043d\u043d\u0438\u0437\u0430\u0442\u043e\u0440 \u0438 \u043b\u0435\u043c\u043c\u0430\u0442\u0438\u0437\u0430\u0442\u043e\u0440**","6ff79d12":"## 3. \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","3685b981":"**\u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u043f\u043e\u0441\u043b\u0435 \u043e\u0442\u0431\u043e\u0440\u0430**","3557fa93":"**\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u0447\u0438 \"\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0430\"**","c8c3eb85":"**\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u0447\u0438 'building_id'** ","f0862ebb":"## 4. \u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","bba29bf8":"**\u0420\u0430\u0441\u0441\u0447\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043d\u0430 n-\u043a\u043b\u0430\u0441\u0442\u0435\u0440\u043e\u0432**","eb80a39f":"**High**","9e343cbc":"## 7. \u0418\u0442\u043e\u0433\u043e\u0432\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0438 \u0441\u0430\u0431\u043c\u0438\u0442 \n\n\u0414\u0430\u043b\u0435\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432\u0430\u0448\u0435 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u0441 \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u043e\u0439 \u043d\u0430 \u043b\u0438\u0434\u0435\u0440\u0431\u043e\u0440\u0434\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0430\u043c \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0434\u043e\u0431\u0438\u0442\u0441\u044f. \u041c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0432\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430 \u0435\u0441\u043b\u0438 \u0442\u0430\u043a \u0443\u0434\u043e\u0431\u043d\u0435\u0435.\n\n\u0412\u044b\u0448\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u044e\u0442 \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u043b\u0438\u0434\u0435\u0440\u0431\u043e\u0440\u0434\u0435, \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u044d\u043a\u0441\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e ;) \n\n**! \u0412\u0410\u0416\u041d\u041e: \u0432\u0430\u0448 \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0432\u044b\u0448\u0435 baseline.**","2efc6976":"**\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0430 \u043a\u0430\u043a \u0444\u0438\u0447\u0438**","094d0495":"\u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u0443 \u043d\u0430\u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438. \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437 \u043d\u0438\u0445 \u043d\u043e\u0432\u044b\u0435. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0437\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u0443, \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 features, \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0438 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u0434\u0440\u0435\u0441, \u0442\u0430\u043a \u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043e\u0446\u0435\u043d\u0438\u0442\u044c \"\u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0441\u0442\u044c\" \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430, \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0432, \u0447\u0442\u043e \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u0443 \u0434\u0430\u043d\u043d\u043e\u0433\u043e manager_id - \u0442\u0435\u043c \u043e\u043d \u043a\u0440\u0443\u0447\u0435.","c7d637ba":"**\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c \u0442\u043e\u043a\u0435\u043d\u0438\u0437\u0430\u0446\u0438\u044e, \u0442.\u0435. \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u0444\u0438\u0447 \u043d\u0430 \u0441\u043b\u043e\u0432\u0430**","5d155830":"## 5. \u0421\u0442\u044d\u043a\u0438\u043d\u0433 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432","a48c7367":"**\u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0444\u0438\u0447\u0435\u0439**","70cda492":"## Baseline","65b76b03":"**\u0421\u0442\u0440\u043e\u043a\u0438 \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 \u0441\u043f\u0438\u0441\u043e\u043a**","0369e82f":"## 6. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0430 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","da17fb49":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 submission","39727dbb":"**\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u0441\u043a\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438**","dfce33b3":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","d59103a5":"**\u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043e \u043e\u0442\u0431\u043e\u0440\u0430**","c2495780":"**\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438**","330a32df":"**\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0435\u0449\u0435 \u0434\u0432\u0443\u0445 \u0444\u0438\u0447**","f62e20ac":"**\u041a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f**","21066665":"# \u0414\u043e\u043c\u0430\u0448\u043a\u0430 \u21161","7f221c4e":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 **csv \u0444\u0430\u0439\u043b \u0441 \u0434\u0432\u0443\u043c\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\u0438**: \n\nlisting_id - \u0431\u0435\u0440\u0435\u0442\u0435 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\ninterest_level - \u043f\u0440\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0435 \u0441\u0432\u043e\u0438\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c\n\n\u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c **\u0437\u0430\u043f\u044f\u0442\u0430\u044f**, \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e result.to_csv() - \u043d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0439\u0442\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c index=None."}}