{"cell_type":{"9d0cd52e":"code","7ee2d17f":"code","08c0e172":"code","80ba03f3":"code","dfb92df6":"code","53f764ea":"code","490996d3":"code","464acab1":"code","957351b8":"code","f8cc9cfb":"code","08ceb46c":"code","44db903c":"code","bfff9a60":"code","5ee8c6a5":"markdown","ad196a29":"markdown","5bef528d":"markdown","94c475c1":"markdown","48dd48b8":"markdown","960fbdd9":"markdown","2129f6c6":"markdown","60328e12":"markdown","4d2b6002":"markdown"},"source":{"9d0cd52e":"# Work with Data - the main Python libraries\nimport numpy as np\nimport pandas as pd\n\n# For import data\nimport os\n\n# Visualization\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.simplefilter('ignore')","7ee2d17f":"# Set parameters\nmodel_name = \"Test2\" # name of the cognitive map (CM) - test CM of teh second order\ninput_growth = 10    # initial change of the input indicator (vertice of CM) for modeling, %\nT = 30  # simulation duration","08c0e172":"# Data for given model\n# Names of vertices of the cognitive map\ndata = [['X1', 'input'], ['X2', 'target']]\nn_cm = pd.DataFrame(data, columns=['name', 'type'])\nn_cm","80ba03f3":"# Data for given model\n# Weights of the cognitive map\ndata = [[0.6, 0.1], [0.05, 0.9]]\nw_cm = pd.DataFrame(data, columns=['X1', 'X2'])\nw_cm.index = w_cm.columns\nw_cm","dfb92df6":"def stable_cm_check(df):\n    # Checks if the cognitive map is stable\n    # Returns the answer: True or False\n    \n    # Calculation of absolute value of eigenvalues of the matrix of cognitive map weights\n    ev = abs(np.linalg.eig(df)[0])\n    print('Eigenvalues:')\n    print(ev)\n    \n    # Get the maximum eigenvalue\n    ev_max = max(ev)\n    print(f'Maximum eigenvalue is: {ev_max}')\n        \n    # Check whether the maximum eigenvalue (absolute value) is not greater than 1\n    # Stability test\n    if ev_max <= 1:\n        print('Cognitive map is stable')\n        return True\n    else:\n        print('Cognitive map is not stable')\n        return False","53f764ea":"# Stable test of the main CM\ncm_stability = stable_cm_check(w_cm.values)","490996d3":"# Set initial input data\n#input_vector = [10]*len(w_cm)\ninput_vector = [10, 8]\ninput_vector","464acab1":"# Initial values in results\ncols = n_cm.name.tolist()\nres = pd.DataFrame(data=dict(zip(cols, list(input_vector))), index=[0])\nres","957351b8":"# Modeling\nres_accum = res.copy()  # accumulated results\nif cm_stability:\n    for t in range(T-1):\n        res = res.append(dict(zip(cols, list(w_cm.values@(res.iloc[t, :])))), ignore_index=True)        ","f8cc9cfb":"res.round(1)","08ceb46c":"# Results visualization\nif cm_stability:\n    res.plot(figsize=(15,10), grid=True, title=\"Visualization of cognitive modeling results\")","44db903c":"# Results visualization\n# Interactive visualization\nif cm_stability:\n    res['t'] = res.index\n    fig = px.line(res, x='t', y=[cols[0]], title='Interactive visualization of cognitive modeling results', template='gridon',width=800, height=600)\n    for i in range(len(cols)-1):\n        fig.add_trace(go.Scatter(x=res['t'], y=res[cols[i+1]], mode='lines', name=cols[i+1]))\n    fig.show()","bfff9a60":"# Saving result\nres.to_csv(f'{model_name}_result_modeling.csv', index=False)","5ee8c6a5":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Get data](#2)\n1. [Stability test](#3)\n1. [Modeling and prediction](#4)\n1. [Result visualization](#5)","ad196a29":"## 3. Stability test<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","5bef528d":"## 2. Get data<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","94c475c1":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","48dd48b8":"## 4. Modeling and prediction<a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","960fbdd9":"<a class=\"anchor\" id=\"0\"><\/a>\n# Cognitive modeling with the cognitive map of the second order - CM(2)\n## Hypothetical example","2129f6c6":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)","60328e12":"## 5. Result visualization<a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","4d2b6002":"## Acknowledgements\n\n### Kaggle Dataset:\n* [Cognitive modeling of complex systems](https:\/\/www.kaggle.com\/vbmokin\/cognitive-modeling-of-complex-systems)\n\n### Thanks to: \n* [Cognitive modeling - Life](https:\/\/www.kaggle.com\/vbmokin\/cognitive-modeling-life)\n* [Cognitive modeling - River Model BOD-O2](https:\/\/www.kaggle.com\/vbmokin\/cognitive-modeling-river-model-bod-o2)"}}