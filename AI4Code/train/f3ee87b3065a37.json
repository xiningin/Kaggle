{"cell_type":{"07af85e2":"code","5169554e":"code","f177a4b1":"code","6e8c842e":"code","f54aca46":"code","65771318":"code","c8401f13":"code","896e4b55":"code","bf7a24e8":"code","cee24a5e":"code","5462837e":"code","831dd7ca":"code","a8cd027e":"code","a76fa842":"code","e3351fb6":"code","25cb09e1":"code","0cc0306e":"code","533eebae":"code","43948749":"code","9fcf3e52":"code","17e55237":"code","ab5e72d9":"code","9cb2e6b9":"code","a3420098":"code","dddfc7c6":"code","84fe1fa0":"code","434c829a":"code","a869dc3d":"code","01846771":"code","1cc4d267":"code","362c8cbe":"code","253a4f35":"code","e4b754da":"code","b3bc744b":"code","d8e11658":"code","5b0cbd90":"code","8561c746":"code","de02106b":"code","ec45f305":"code","54725340":"code","bb3b9349":"code","195d8919":"code","38560ac5":"code","9137f7b4":"code","b53b3fec":"code","4a6ec0d1":"code","af5c3fd8":"code","be3b682f":"code","26d8c0ef":"code","734dd990":"code","e5882c60":"code","769179df":"code","d732efde":"code","e4842848":"code","e7ec8d6d":"code","cc66e2f1":"code","81ebb977":"code","ccc19935":"code","aa02c3c8":"code","b6275c4d":"code","ed0b1aca":"code","1f3ee623":"code","69e17d94":"code","12183f41":"code","07af1896":"code","df948029":"code","1fbe7b0d":"code","729b32c7":"code","d28bb94b":"code","8cee0594":"code","c0aa8850":"code","28a5e1e9":"code","0e116765":"code","d6fa78ba":"code","0ecdaebd":"code","7de260e2":"code","144e3107":"code","aeab5676":"code","61d07592":"code","a3f73b66":"code","65fd5a4c":"code","f03b85c7":"code","ccb2b4bd":"markdown","d3f9f33f":"markdown","11a8c53a":"markdown","3a8e77d9":"markdown","1123baea":"markdown","b5ca1cc9":"markdown","5b9ec7a2":"markdown","ef19e8e1":"markdown","cc9842e2":"markdown","4d9a920f":"markdown","1f8dcb30":"markdown","cf06e1b8":"markdown","e3d6b86e":"markdown","0c83eac2":"markdown","d8dfd3a9":"markdown","9364946a":"markdown","29a6a67f":"markdown","1f830514":"markdown","6c0786db":"markdown","d48312f5":"markdown","1c438477":"markdown","67579486":"markdown","a82f5eda":"markdown","80b41ee0":"markdown","0c945fcf":"markdown","da2c99ad":"markdown","b4f37e54":"markdown","9f17bcd2":"markdown","5f5961b8":"markdown","28425655":"markdown","fc961a1e":"markdown","b6d4740a":"markdown","872e4025":"markdown","e9f5ab46":"markdown","5fcee5f8":"markdown","08f0214c":"markdown","100553ec":"markdown","6c5deb23":"markdown","b5649932":"markdown","7ab8fcfa":"markdown","5863ebd5":"markdown","3b7695c1":"markdown","a47c6357":"markdown"},"source":{"07af85e2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets, preprocessing, feature_extraction\n\n%matplotlib inline\n\nplt.style.use('seaborn')","5169554e":"test_users = pd.read_csv(\"..\/input\/test_users.csv\")\ntrain_users = pd.read_csv(\"..\/input\/train_users_2.csv\")\nprint(train_users.shape)\nprint(test_users.shape)","f177a4b1":"train_users.head()","6e8c842e":"test_users.head()","f54aca46":"all_users = pd.concat((train_users, test_users), axis = 0, ignore_index = True)\nall_users.head()","65771318":"all_users.shape","c8401f13":"print(train_users.country_destination.value_counts())","896e4b55":"import seaborn as sns\nsns.set_style()\ndes_countries = train_users.country_destination.value_counts(dropna = False) \/ train_users.shape[0] * 100\ndes_countries.plot('bar', rot = 0)\nplt.xlabel('Destination country')\nplt.ylabel('Percentage of booking')","bf7a24e8":"all_users.info()","cee24a5e":"test_users.info()","5462837e":"all_users.age.describe()","831dd7ca":"fig, axes = plt.subplots(nrows = 1, ncols = 2, figsize = (15, 5))\n\naxes[0].set_title('Age < 200')\naxes[0].set_xlabel('Age')\naxes[0].set_ylabel('Count')\nall_users[all_users.age < 200].age.hist(bins = 10, ax = axes[0])\n\naxes[1].set_title('Age >= 200')\naxes[1].set_xlabel('Age')\naxes[1].set_ylabel('Count')\nall_users[all_users.age >= 200].age.hist(bins = 10, ax = axes[1])","a8cd027e":"all_users.gender.value_counts(dropna = False)","a76fa842":"female = sum(train_users.gender == 'FEMALE')\nmale = sum(train_users.gender == 'MALE')\nother = sum(train_users.gender == 'OTHER')\n\nfemale_destinations = train_users.loc[train_users.gender == 'FEMALE', 'country_destination'].value_counts() \/ female * 100\nmale_destinations = train_users.loc[train_users.gender == 'MALE', 'country_destination'].value_counts() \/ male * 100\nother_destinations = train_users.loc[train_users.gender == 'OTHER', 'country_destination'].value_counts() \/ other * 100\n\nfemale_destinations.plot('bar', width = 0.25, color = '#0b61a4', position = 0, label = 'Female', rot = 0)\nmale_destinations.plot('bar', width = 0.25, color = '#3f92d2', position = 1, label = 'Male', rot = 0)\nother_destinations.plot('bar', width = 0.25, color = '#66a3d2', position = 2, label = 'Other', rot = 0)\n\nplt.legend()\nplt.xlabel('Destination country')\nplt.ylabel('Percentage of booking')\nplt.show()","e3351fb6":"fig = plt.figure(figsize = (12, 6))\nall_users.date_account_created = pd.to_datetime(all_users.date_account_created)\nall_users.date_account_created.value_counts().plot('line')\nplt.xlabel('Year')\nplt.ylabel('Count created')","25cb09e1":"fig = plt.figure(figsize = (12, 6))\nall_users['date_first_active'] = pd.to_datetime(all_users.timestamp_first_active \/\/ 1000000, format = '%Y%m%d')\nall_users.date_first_active.value_counts().plot('line')\nplt.xlabel('Year')\nplt.ylabel('Count first active')","0cc0306e":"all_users.signup_method.value_counts()","533eebae":"all_users.signup_app.value_counts()","43948749":"all_users.first_device_type.value_counts()","9fcf3e52":"all_users.first_browser.value_counts()","17e55237":"all_users.language.value_counts()","ab5e72d9":"lang = all_users.language.value_counts() \/ all_users.shape[0] * 100\nplt.figure(figsize = (12, 10))\nplt.xlabel('User language')\nplt.ylabel('Percentage')\nlang.plot('bar', fontsize = 17, rot = 0)","9cb2e6b9":"all_users.affiliate_channel.value_counts()","a3420098":"all_users.affiliate_provider.value_counts()","dddfc7c6":"sessions = pd.read_csv('..\/input\/sessions.csv')\nsessions.head()","84fe1fa0":"sessions.shape","434c829a":"sessions.info()","a869dc3d":"len(sessions.user_id.unique())","01846771":"df_sess = sessions.groupby(['user_id']).user_id.count().reset_index(name = 'session_count')\ndf_sess.head()","1cc4d267":"df_sess.session_count.describe()","362c8cbe":"secs = sessions.groupby(['user_id']).secs_elapsed.sum().reset_index()\nsecs.columns = ['user_id', 'secs_elapsed']\nsecs.describe()","253a4f35":"sns.boxplot(x = secs.secs_elapsed)","e4b754da":"sessions.action_type.value_counts()","b3bc744b":"at = sessions.action_type.value_counts(dropna = False) \/ sessions.shape[0] * 100\nplt.figure(figsize = (12, 8))\nplt.xlabel('Action type')\nplt.ylabel('Percentage')\nat.plot('bar', fontsize = 17)","d8e11658":"sessions.action.value_counts()","5b0cbd90":"sessions.action_detail.value_counts()","8561c746":"train_users_labels = train_users.loc[:, 'country_destination']\nprint(train_users_labels.head())","de02106b":"train_users_attrs = train_users.iloc[:, 0:15]\ntrain_users_attrs.head()","ec45f305":"train_users = train_users.drop(['date_first_booking'], axis = 1)\ntest_users = test_users.drop(['date_first_booking'], axis = 1)","54725340":"date_acc_created_train = np.vstack(train_users.date_account_created.astype(str).apply(\n    lambda x : list(map(int, x.split('-')))).values)\n\ntrain_users['create_year'] = date_acc_created_train[:, 0]\ntrain_users['create_month'] = date_acc_created_train[:, 1]\ntrain_users['create_day'] = date_acc_created_train[:, 2]\ntrain_users = train_users.drop(['date_account_created'], axis = 1)\n\ndate_acc_created_test = np.vstack(test_users.date_account_created.astype(str).apply(\n    lambda x : list(map(int, x.split('-')))).values)\n\ntest_users['create_year'] = date_acc_created_test[:, 0]\ntest_users['create_month'] = date_acc_created_test[:, 1]\ntest_users['create_day'] = date_acc_created_test[:, 2]\ntest_users = test_users.drop(['date_account_created'], axis = 1)","bb3b9349":"train_users.head()","195d8919":"train_users.loc[train_users.gender == '-unknown-', 'gender'] = -1\ntrain_users.loc[train_users.gender.isnull(), 'gender'] = -1\ntest_users.loc[test_users.gender == '-unknown-', 'gender'] = -1\ntest_users.loc[test_users.gender.isnull(), 'gender'] = -1","38560ac5":"gender_enc = {'FEMALE' : 0,\n             'MALE' : 1,\n             'OTHER' : 2,\n             -1 : -1}\nfor data in [train_users, test_users]:\n    data.gender = data.gender.apply(lambda x : gender_enc[x])","9137f7b4":"train_users.head()","b53b3fec":"train_users.age.describe()","4a6ec0d1":"train_users.loc[train_users.age > 90, 'age'] = np.nan\ntrain_users.loc[train_users.age < 16, 'age'] = np.nan\ntest_users.loc[test_users.age > 90, 'age'] = np.nan\ntest_users.loc[test_users.age < 16, 'age'] = np.nan","af5c3fd8":"print(train_users.age.median())\nprint(test_users.age.median())","be3b682f":"train_users.loc[train_users.age.isnull(), 'age'] = train_users.age.median()\ntest_users.loc[test_users.age.isnull(), 'age'] = test_users.age.median()","26d8c0ef":"signup_enc = {'facebook' : 0,\n             'google' : 1,\n             'basic' : 2,\n             'weibo' : 3}\nfor data in [train_users, test_users]:\n    data.signup_method = data.signup_method.apply(lambda x : signup_enc[x])","734dd990":"train_users.head()","e5882c60":"test_users.loc[test_users.language == '-unknown-', 'language'] = test_users.language.mode()[0]","769179df":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ntrain_users.language = le.fit_transform(train_users.language)\ntest_users.language = le.fit_transform(test_users.language)","d732efde":"train_users.head()","e4842848":"train_users.affiliate_channel = le.fit_transform(train_users.affiliate_channel)\ntrain_users.affiliate_provider = le.fit_transform(train_users.affiliate_provider)\ntest_users.affiliate_channel = le.fit_transform(test_users.affiliate_channel)\ntest_users.affiliate_provider = le.fit_transform(test_users.affiliate_provider)\n\ntrain_users.loc[train_users.first_affiliate_tracked.isnull(), 'first_affiliate_tracked'] = 'untracked'\ntrain_users.first_affiliate_tracked = le.fit_transform(train_users.first_affiliate_tracked)\n\ntest_users.loc[test_users.first_affiliate_tracked.isnull(), 'first_affiliate_tracked'] = 'untracked'\ntest_users.first_affiliate_tracked = le.fit_transform(test_users.first_affiliate_tracked)","e7ec8d6d":"train_users.head()","cc66e2f1":"train_users.signup_app = le.fit_transform(train_users.signup_app)\ntrain_users.first_device_type = le.fit_transform(train_users.first_device_type)\ntrain_users.first_browser = le.fit_transform(train_users.first_browser)\ntest_users.signup_app = le.fit_transform(test_users.signup_app)\ntest_users.first_device_type = le.fit_transform(test_users.first_device_type)\ntest_users.first_browser = le.fit_transform(test_users.first_browser)","81ebb977":"train_users.head()","ccc19935":"test_users.head()","aa02c3c8":"df = sessions.user_id.value_counts()\nprint(df.shape)\nprint(df.head())","b6275c4d":"df = df.to_frame()","ed0b1aca":"df = df.rename(columns = {'user_id' : 'session_count'})\ndf['id'] = df.index\ndf.head()","1f3ee623":"train_users = pd.merge(train_users, df, how = 'left', on = ['id'])","69e17d94":"test_users = pd.merge(test_users, df, how = 'left', on = ['id'])","12183f41":"train_users.session_count.fillna(0, inplace = True)\ntest_users.session_count.fillna(0, inplace = True)","07af1896":"train_users.session_count = train_users.session_count.astype(int)\ntest_users.session_count = test_users.session_count.astype(int)","df948029":"label_df = train_users_labels.to_frame()\nfor data in [label_df]:\n    data.country_destination = le.fit_transform(data.country_destination)\n\nlabel_df.head()","1fbe7b0d":"train_users = train_users.drop(['id', 'timestamp_first_active', 'country_destination'], axis = 1)\ntrain_users.head()","729b32c7":"train_users.shape","d28bb94b":"from sklearn import preprocessing\nss = preprocessing.StandardScaler()\ntrain_users_scaled = pd.DataFrame(ss.fit_transform(train_users))","8cee0594":"train_users_scaled.head()","c0aa8850":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import train_test_split\n\n[train_data, test_data, train_label, test_label] = train_test_split(train_users_scaled, label_df, test_size = 0.3, random_state = 817)\n\ngnb = GaussianNB()\ngnb.fit(train_data, train_label.values.ravel())","28a5e1e9":"print('Accuracy score for Navie Bayes:')\nprint(gnb.score(test_data, test_label))","0e116765":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nlda = LinearDiscriminantAnalysis()\nlda.fit(train_data, train_label.values.ravel())","d6fa78ba":"print('Accuracy score for LDA:')\nprint(lda.score(test_data, test_label))","0ecdaebd":"# from sklearn.ensemble import GradientBoostingClassifier\n\n# gb = GradientBoostingClassifier(max_depth = 4, n_estimators = 100, random_state = 817)\n# gb.fit(train_data, train_label.values.ravel())","7de260e2":"# print('Accuracy score for GDBT:')\n# print(gb.score(test_data, test_label))","144e3107":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb = GradientBoostingClassifier(max_depth = 4, n_estimators = 100, random_state = 817)\ngb.fit(train_users_scaled, label_df.values.ravel())","aeab5676":"test_users_scaled = pd.DataFrame(ss.fit_transform(test_users.drop(['id', 'timestamp_first_active'], axis = 1)))","61d07592":"prediction_proba = gb.predict_proba(test_users_scaled)","a3f73b66":"ids_test = test_users['id']\n\nids = []\ncountries = []\n\nfor i in range(len(ids_test)):\n    idx = ids_test[i]\n    ids += [idx] * 5\n    countries += le.inverse_transform(np.argsort(prediction_proba[2])[::-1][:5]).tolist()","65fd5a4c":"submission = pd.DataFrame({\n    \"id\" : ids,\n    \"country\" : countries\n})","f03b85c7":"submission.to_csv('submission.csv', index = False)","ccb2b4bd":"- age","d3f9f33f":"---\n- gender","11a8c53a":"---\n- secs_elapsed","3a8e77d9":"The max age is 2014, and the min age is 1, it is terrible.","1123baea":"---\nProcess the feature \"age\".","b5ca1cc9":"The feature \"date_account_create\" and \"date_first_active\" is almost same.","5b9ec7a2":"---\n- affiliate_channel \/ affiliate_provider","ef19e8e1":"---\n2. Linear Discriminant Analysis","cc9842e2":"---\n- date_account_created \/ timestamp_first_active","4d9a920f":"# <center>Airbnb new user bookings<\/center>","1f8dcb30":"---\nProcess the feature \"affiliate_channel\", \"affiliate_provider\", \"first_affiliate_tracked\".","cf06e1b8":"---\nProcess the feature \"signup_method\".","e3d6b86e":"Add feature \"session_count\" to dataset.","0c83eac2":"1. Naive Bayes","d8dfd3a9":"---\nSplit the feature \"data_account_created\" to \"year\", \"month\", \"day\"","9364946a":"most of users speak english.","29a6a67f":"## Normalize","1f830514":"## The features","6c0786db":"---\nProcess the other feature.","d48312f5":"---\n- language","1c438477":"---\n- actions \/ action_type \/ action_details","67579486":"The most of age is between 18 and 80, we must process the other values.","a82f5eda":"## Session count","80b41ee0":"---\nProcess the feature \"language\".","0c945fcf":"Delete useless feature.","da2c99ad":"---\n- signup_method \/ signup_app","b4f37e54":"Most of features is string, need to code it.","9f17bcd2":"---\nDelete the feature \"date_first_booking\".","5f5961b8":"## Select and train model","28425655":"---\n3. Gradient Boosting Classifier","fc961a1e":"The model GDBT has highest score.","b6d4740a":"## About sessions.csv","872e4025":"## Explore data","e9f5ab46":"### Use all features","5fcee5f8":"The feature \"sec_elapsed\" is very important maybe.","08f0214c":"---\nProcess the feature \"gender\", fill null or unknown value.","100553ec":"The number of userid in sessions is less than train set.","6c5deb23":"---\n- first_device_type \/ first_browser","b5649932":"So, some user is active, and some user just login(or sign in) once.","7ab8fcfa":"## Predict","5863ebd5":"The sessions is a record includeing the user's operation.","3b7695c1":"There's many NULL in the feature \"age\" and \"date_first_booking\", and the \"data_first_booking\" is empty in test dataset.So we can delete it.","a47c6357":"## Preprocessing"}}