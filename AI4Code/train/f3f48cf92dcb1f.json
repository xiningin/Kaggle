{"cell_type":{"c42fa6ef":"code","8f5af7b7":"code","8eecec6e":"code","d646ccd7":"code","2ac147a2":"code","a85ae39f":"code","703bed32":"code","1725e741":"markdown","058f958f":"markdown"},"source":{"c42fa6ef":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import Imputer\n\ndata = pd.read_csv('..\/input\/train.csv')\ndata.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = data.SalePrice\nX = data.drop(['SalePrice'], axis=1).select_dtypes(exclude=['object'])\ntrain_X, test_X, train_y, test_y = train_test_split(X.as_matrix(), y.as_matrix(), test_size=0.25)\n\nmy_imputer = Imputer()\ntrain_X = my_imputer.fit_transform(train_X)\ntest_X = my_imputer.transform(test_X)\n","8f5af7b7":"from xgboost import XGBRegressor\n\nmy_model = XGBRegressor()\n# Add silent=True to avoid printing out updates with each cycle\nmy_model.fit(train_X, train_y, verbose=False)\n","8eecec6e":"# make predictions\npredictions = my_model.predict(test_X)\n\nfrom sklearn.metrics import mean_absolute_error\nprint(\"Mean Absolute Error : \" + str(mean_absolute_error(predictions, test_y)))","d646ccd7":"my_model = XGBRegressor(n_estimators=1000)\nmy_model.fit(train_X, train_y, early_stopping_rounds=5, \n             eval_set=[(test_X, test_y)], verbose=False)\n","2ac147a2":"my_model = XGBRegressor(n_estimators=1000, learning_rate=0.05)\nmy_model.fit(train_X, train_y, early_stopping_rounds=5, \n             eval_set=[(test_X, test_y)], verbose=False)\n","a85ae39f":"test = pd.read_csv('..\/input\/test.csv')\ntest = test.select_dtypes(exclude=['object'])\ntest = my_imputer.transform(test)\npredicted_prices = my_model.predict(test)\npredicted_prices.shape","703bed32":"\nmy_submission = pd.DataFrame({'Id': test[:,0], 'SalePrice': predicted_prices})\nmy_submission['Id']= my_submission['Id'].astype('int32')\nmy_submission.to_csv('dirawusubmission.csv', index=False)","1725e741":"Build and fit a model ","058f958f":"Evaluate a model and make predictions."}}