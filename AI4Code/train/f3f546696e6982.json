{"cell_type":{"e51fd2e1":"code","7dba6ab0":"code","0c9613fb":"code","6970c076":"code","62cac83a":"code","8ac4acb1":"code","19445237":"code","e1761de3":"code","2fd43943":"code","627c2466":"code","04be9422":"code","311804f4":"code","3cff2835":"code","eb4e1f8e":"code","887427e8":"code","252d5f5d":"code","8c640c03":"code","d6d4cba6":"code","d3465b54":"code","989189b7":"code","bcb063ed":"code","d28ec870":"code","dc76ed37":"code","9b80917f":"code","fa8dcb74":"code","111ac366":"code","db5f1dc7":"code","2771677a":"code","83ec8708":"code","9af5d62d":"code","e0b07a2f":"code","7bd2a3ea":"code","01f56b9d":"code","a3d9c316":"code","9985d159":"code","0e7c1adf":"code","a3b6d9aa":"code","80e4de6f":"code","b21e37ef":"code","aeb032e5":"code","c77c9690":"code","a1989bdb":"code","9b257ddc":"code","ae1d43c8":"code","93414e44":"code","8d17ca01":"code","93f6f3a3":"code","cbf924e7":"code","e2f3caf0":"code","0a317122":"code","bb268903":"code","5d8a59d5":"code","4be23a85":"code","c4d5e736":"code","f368f29b":"code","520bd119":"code","82a42901":"code","1890eb9f":"code","fdb5ef0e":"code","ff28aa94":"code","f27530f8":"code","d6826827":"code","fcaa0a87":"code","b3ce1c37":"code","b28cd5f6":"code","b0911566":"code","108cf83d":"markdown","3cf13bad":"markdown","d2b27594":"markdown","00f76642":"markdown","88801bcb":"markdown","9ca22f9f":"markdown","b0ff4130":"markdown","67b00064":"markdown","5a98f8c0":"markdown","ddd4043a":"markdown","e7bb9ccd":"markdown","419bf5d0":"markdown","858c76ff":"markdown","2845bb2c":"markdown","2f565460":"markdown","4a646c0e":"markdown","f590fac6":"markdown"},"source":{"e51fd2e1":"# Imports\n\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px","7dba6ab0":"# Reading in sales_train\n\nsales_train = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\nsales_train.head()","0c9613fb":"# Viewing the shape of the dataframe\n\nsales_train.shape","6970c076":"# Changing the date into a pandas datatime\n\nsales_train['date'] = pd.to_datetime(sales_train['date'])","62cac83a":"# Viewing basic stats on data\n\nsales_train.describe()","8ac4acb1":"# Viewing the info for each column\n\nsales_train.info()","19445237":"# Viewing the number of unique items and shops in training data\n\n# Viewing the number of items\nprint(\"Number of unique items: {}\".format(len(sales_train[\"item_id\"].unique()))) # 21807 items in total))\n\n# Viewing the number of shops\nprint(\"Number of unique shops: {}\".format(len(sales_train[\"shop_id\"].unique()))) # 60 shops in total )","e1761de3":"# Plotting the number of items sold per month\n\n## Grouping by month and viewing number of items sold in each month\nsales_per_month = sales_train.groupby(['date_block_num'])['item_cnt_day'].sum()\n\n## Plotting\nfig = px.bar(sales_per_month, title=\"Number of Items Sold per Month\", labels={\"date_block_num\":\"Month\", \"value\":\"Count\"})\nfig.show()","2fd43943":"# Reading in items\n\nitems = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nitems.head()","627c2466":"# Viewing the number of items and number of categories\n\n# Viewing the number of items\nprint(\"Number of unique items: {}\".format(len(items[\"item_id\"].unique())))\n\n# Viewing the number of categories\nprint(\"Number of unique categories: {}\".format(len(items[\"item_category_id\"].unique()))) ","04be9422":"# Reading in item_categories\n\nitem_categories = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\")\nitem_categories.head()","311804f4":"# Extracting sub categories from item_category_name\n\n## Spliting the category by '-'\nitem_categories['categories'] = item_categories['item_category_name'].str.split('-')\n\n## Extracting the first element from split\nitem_categories['type'] = item_categories['categories'].apply(lambda x: x[0].strip())\n\n## Extracting second element if there is a second element, else return first element \nitem_categories['sub_type'] = item_categories['categories'].apply(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())","3cff2835":"# Dropping unnecessary columns\n\nitem_categories.drop(['item_category_name', 'categories'], inplace=True, axis=1)","eb4e1f8e":"# # Creating dummy variables\n\n# ## Creating dummies for type \n# item_categories = pd.concat([item_categories, pd.get_dummies(item_categories['type'], drop_first=True)], axis=1)\n\n# ## Creating dummies for sub_type \n# item_categories = pd.concat([item_categories, pd.get_dummies(item_categories['sub_type'], drop_first=True)], axis=1)","887427e8":"# Plotting \n\nfig = px.bar(item_categories.groupby('type')['sub_type'].count(), title=\"Number of Sub_categories in Each Category\")\nfig.show()","252d5f5d":"# Reading in shops\n\nshops = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/shops.csv\")\nshops.head()","8c640c03":"# Replacing shop ids with other duplicate shop_ids\n\n## Shopnames for 0 and 57 are the same so changing shop_id 0 to 57\nshops.loc[shops['shop_id']==0, 'shop_id'] = 57\n\n## Shopnames for 1 and 58 are the same so changing shop_id 1 to 58\nshops.loc[shops['shop_id']==1, 'shop_id'] = 58\n\n## Shopnames for 10 and 11 are the same so changing shop_id 00 to 11\nshops.loc[shops['shop_id']==10, 'shop_id'] = 11","d6d4cba6":"# Collecting the duplicate names just in case \n\nduplicate_shop_names = {\n    shops.loc[shops['shop_id']==57, 'shop_name'].values[0]:shops.loc[shops['shop_id']==57, 'shop_name'].values[1],\n    shops.loc[shops['shop_id']==58, 'shop_name'].values[0]:shops.loc[shops['shop_id']==58, 'shop_name'].values[1],\n    shops.loc[shops['shop_id']==11, 'shop_name'].values[0]:shops.loc[shops['shop_id']==11, 'shop_name'].values[1] \n}","d3465b54":"shops = shops.drop_duplicates(subset='shop_id')","989189b7":"# Retrieving city from shop_name\n\nshops['city'] = shops['shop_name'].str.split(' ').apply(lambda x: x[0])","bcb063ed":"# Small corrections\n\n## Removing space\nshops.loc[shops.shop_name == '\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"', 'shop_name'] = '\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'\n\n## Removing ! from '!\u042f\u043a\u0443\u0442\u0441\u043a'\nshops.loc[shops['city'] == '!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'","d28ec870":"shops.head()","dc76ed37":"# Plotting the number of shops in each city\n\nfig = px.bar(shops.groupby('city')['shop_id'].count(), title='Number of Stores in a City')\nfig.show()","9b80917f":"# Viewing the number of unique shops\n\nprint(\"Number of unique shops: {}\".format(len(shops['shop_id'].unique())))","fa8dcb74":"# Replacing shop ids in sales_train\n\n## Shopnames for 0 and 57 are the same so changing shop_id 0 to 57\nsales_train.loc[sales_train['shop_id']==0, 'shop_id'] = 57\n\n## Shopnames for 1 and 58 are the same so changing shop_id 1 to 58\nsales_train.loc[sales_train['shop_id']==1, 'shop_id'] = 58\n\n## Shopnames for 10 and 11 are the same so changing shop_id 00 to 11\nsales_train.loc[sales_train['shop_id']==10, 'shop_id'] = 11","111ac366":"# Merging the dataframes\n\n## Merging sales_train with item\ndf = pd.merge(sales_train, items, how=\"left\", on=\"item_id\")\n\n## Merging df and item_categories\ndf = pd.merge(df, item_categories, how=\"left\", on=\"item_category_id\")\n\n## Merging df and shops\ndf = pd.merge(df, shops, how=\"left\", on=\"shop_id\")","db5f1dc7":"df.shape","2771677a":"# Grouping data by month, shop_id, item_id to get total sales\n\ndata = df.groupby(['date_block_num', 'shop_id', 'item_id']).agg({'item_price':'mean', 'item_cnt_day':'sum'}).reset_index()\ndata.head()","83ec8708":"# Merging the dataframes\n\n## Merging sales_train with item\ndata = pd.merge(data, items, how=\"left\", on=\"item_id\")\n\n## Merging df and item_categories\ndata = pd.merge(data, item_categories, how=\"left\", on=\"item_category_id\")\n\n## Merging df and shops\ndata = pd.merge(data, shops, how=\"left\", on=\"shop_id\")","9af5d62d":"data.shape","e0b07a2f":"data.head()","7bd2a3ea":"# Plotting sales by month\n\ndata['total_sales'] = data['item_price'] * data['item_cnt_day']\n\nfig = px.line(data.groupby('date_block_num')['total_sales'].sum(), \n              title=\"Sales by Month\", \n              labels={\"date_block_num\":\"Month\",\n                      \"value\":\"Total Sales\"})\nfig.show()","01f56b9d":"# Converting\n\ndata['month'] = data['date_block_num'].apply(lambda month: (month+1)%12)","a3d9c316":"# Dummifying the categorical columns\n\n# ## Creating dummies and concatenating\ndata = pd.concat([data, pd.get_dummies(data['shop_id'], drop_first=True, prefix='shop_')], axis=1)\n\n## Creating dummies and concatenating\ndata = pd.concat([data, pd.get_dummies(data['type'], drop_first=True, prefix='type')], axis=1)\n\n## Creating dummies and concatenating\ndata = pd.concat([data, pd.get_dummies(data['sub_type'], drop_first=True, prefix='sub_type')], axis=1)","9985d159":"data.head()","0e7c1adf":"data.shape","a3b6d9aa":"# Getting the names of the feature columns\n\n# Collecting shop feature names\nshop_columns = [col for col in data.columns if 'shop__' in col]\n\n## Collecting type feature names\ntype_columns = [col for col in data.columns if 'type_' in col]\n\n## Collecting sub_type feature names\nsub_type_columns = [col for col in data.columns if 'sub_type_' in col]","80e4de6f":"# Setting the feature and target variables\n\nfeatures = ['month', 'shop_id','item_id', 'item_price'] + type_columns + sub_type_columns\ntarget = ['item_cnt_day']","b21e37ef":"# Preparing data for modeling\n\n## Import for splitting data\nfrom sklearn.model_selection import train_test_split\n\n## Setting feature and target variables\nX = data[features].fillna(value=0)\ny = data[target].fillna(value=0)\n\n## Splitting train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","aeb032e5":"# Fitting Linear Regression\n\n## Getting LR function\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\n\n## Fitting on training data\nlr.fit(X_train, y_train)","c77c9690":"lr.score(X_test, y_test)","a1989bdb":"# Reading in test\n\ntest = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/test.csv\")\ntest.head()","9b257ddc":"test.shape","ae1d43c8":"# Adding data_block_num\n\ntest['date_block_num'] = 34\ntest['month'] = 11","93414e44":"item_price = data[['item_id', 'item_price']].groupby('item_id')['item_price'].mean().reset_index()","8d17ca01":"# Merging the test data with dataframes\n\n## Merging sales_train with item\ntest = pd.merge(test, item_price, how=\"left\", on=\"item_id\")\n\n## Merging items with test\ntest = pd.merge(test, items, how=\"left\", on=\"item_id\")\n\n## Merging df and item_categories\ntest = pd.merge(test, item_categories, how=\"left\", on=\"item_category_id\")\n\n## Merging df and shops\ntest = pd.merge(test, shops, how=\"left\", on=\"shop_id\")","93f6f3a3":"test.shape","cbf924e7":"# Dummifying the categorical columns\n\n# ## Creating dummies and concatenating\ntest = pd.concat([test, pd.get_dummies(test['shop_id'], drop_first=True, prefix='shop_')], axis=1)\n\n## Creating dummies and concatenating\ntest = pd.concat([test, pd.get_dummies(test['type'], drop_first=True, prefix='type')], axis=1)\n\n## Creating dummies and concatenating\ntest = pd.concat([test, pd.get_dummies(test['sub_type'], drop_first=True, prefix='sub_type')], axis=1)","e2f3caf0":"test[features]","0a317122":"# Getting the names of the feature columns\n\n# Collecting shop feature names\ntest_shop_columns = [col for col in test.columns if 'shop__' in col]\n\n## Collecting type feature names\ntest_type_columns = [col for col in test.columns if 'type_' in col]\n\n## Collecting sub_type feature names\ntest_sub_type_columns = [col for col in test.columns if 'sub_type_' in col]","bb268903":"# Setting the feature and target variables\n\ntest_features = ['month', 'item_id' + 'shop_id', 'item_price'] + test_type_columns + test_sub_type_columns","5d8a59d5":"# Comparing the features in train and test data\n\nprint(f\"Number of predictors in train data: {len(features)}\")\nprint(f\"Number of predictors in test data: {len(test_features)}\")","4be23a85":"common_features = list(set(features) & set(test_features)) \nprint(f\"Number of common features: {len(common_features)}\")","c4d5e736":"'item_price' in common_features","f368f29b":"# Preparing data for modeling\n\n## Import for splitting data\nfrom sklearn.model_selection import train_test_split\n\n## Setting feature and target variables\nX = data[common_features].fillna(value=0)\ny = data[target].fillna(value=0)\n\n## Splitting train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","520bd119":"# Fitting Linear Regression\n\n## Getting LR function\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\n\n## Fitting on training data\nlr.fit(X_train, y_train)","82a42901":"lr.score(X_test, y_test)","1890eb9f":"'item_price' in test.columns","fdb5ef0e":"test = test.fillna(0)","ff28aa94":"lr.predict(test[common_features])","f27530f8":"test['preds'] = lr.predict(test[common_features])","d6826827":"test.head()","fcaa0a87":"# Creating the submission dataframe\n\npreds = test[['ID', 'preds']]\npreds.columns = ['ID', 'item_cnt_month']\npreds","b3ce1c37":"# Saving the submission dataframe\npreds.to_csv('my_submission.csv', index=False)","b28cd5f6":"data.head()","b0911566":"px.bar(data, x='month', y='item_cnt_day')","108cf83d":"There are items in training data that is not in test data and vice versa. We are extracting the common features in both training and test data to fit the model.","3cf13bad":"## Baseline Model using Linear Regression","d2b27594":"## Data Processing","00f76642":"# ARIMA","88801bcb":"The goal of this notebook is to figure out how to format the data so that we can tackle the task at hand. The task was to predict the number of items sold for each store given the month. The data was not set-up to answer this question. We needed to organize\/format the data to match the task.","9ca22f9f":"## sales_train","b0ff4130":"## Combining Data into one Dataframe","67b00064":"## shops","5a98f8c0":"The goal of thie notebook was to format the data. We just applied a Linear Regression to see if the format was correct, which it was. The next steps are to:\n1. Apply times-series related models\n2. Make better fill-in choices\n3. Make better feature engineering choices","ddd4043a":"## The task is to **predict the sales for each product in a store given month**. Therefore we have to downsample the data to represent *monthly sales per item per store*.","e7bb9ccd":"We are getting this issue because there are columns in training data that is not in the test data. We need to create a set of features that are in both training data and test data.","419bf5d0":"## item_categories","858c76ff":"# Submission","2845bb2c":"There are predictors in the training data that is not in the test data. Why? It is because there are items that were in the training data that were not in the test data. ","2f565460":"The data shows that the sales are seasonal. The spikes represents monthDecember which makes sense why there are a lot of sales (Christmas).","4a646c0e":"## Linear Regression using Common Features","f590fac6":"## items"}}