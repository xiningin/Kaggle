{"cell_type":{"1f9b9eba":"code","6614c340":"code","8c2d39e5":"code","23a297fc":"code","e194b579":"code","885887df":"code","7e1a041d":"code","8765d59d":"code","808abbb6":"code","07777d15":"code","3710f1b6":"markdown","8ccabb98":"markdown"},"source":{"1f9b9eba":"import xml.etree.ElementTree as ET\nimport cv2\nfrom matplotlib import pyplot as plt\nfrom PIL import Image","6614c340":"def read_content(xml_file: str):\n\n    tree = ET.parse(xml_file)\n    root = tree.getroot()\n\n    list_with_all_boxes = []\n\n    for boxes in root.iter('object'):\n\n        filename = root.find('filename').text\n\n        ymin, xmin, ymax, xmax = None, None, None, None\n\n        ymin = int(boxes.find(\"bndbox\/ymin\").text)\n        xmin = int(boxes.find(\"bndbox\/xmin\").text)\n        ymax = int(boxes.find(\"bndbox\/ymax\").text)\n        xmax = int(boxes.find(\"bndbox\/xmax\").text)\n\n        list_with_single_boxes = [xmin, ymin, xmax, ymax]\n        list_with_all_boxes.append(list_with_single_boxes)\n    \n    return filename, list_with_all_boxes","8c2d39e5":"img = \"..\/input\/tbx-11\/TBX11K\/imgs\/tb\/tb0003.png\"   #image name\nxml = \"..\/input\/tbx-11\/TBX11K\/annotations\/xml\/tb0003.xml\"   #corresponding xml","23a297fc":"image = cv2.imread(img) \n\n#Comment the below line if you using High-resolution(3000 \u00d7 3000) dataset.\nimage = cv2.resize(image, (2840, 2827)) \nname, boxes = read_content(xml)\n\ntemp = []\n\nfor i in range(len(boxes)):\n    \n    temp = boxes[i]\n    \n    start_point = (temp[0], temp[3]) \n    end_point = (temp[2], temp[1]) \n      \n    \n    # Set color in BGR\n    if i==0:\n        color = (255, 0, 0)\n    if i==1:\n        color = (0, 255, 0)\n    \n    # Line thickness of 10 px \n    thickness = 10\n    \n    # Using cv2.rectangle() method \n    # Draw a rectangle with blue line borders of thickness of 2 px \n   \n    image = cv2.rectangle(image, start_point, end_point, color, thickness)","e194b579":"#Comment the below line if you using High-resolution(3000 \u00d7 3000) dataset.\n\n# image = cv2.resize(image, (512, 512)) \n# cv2.imwrite(\"img_bb.png\", image)\n# cv2_imshow(\"img\", image)\n# cv2.waitKey(0)","885887df":"plt.imshow(image)\nplt.axis('off')\nplt.show()","7e1a041d":"import os\nif not os.path.exists('tb_bb'):\n    os.makedirs('tb_bb')","8765d59d":"def main_bb(img, xml):\n    \n    image = cv2.imread(img) \n    #Comment the below line if you using High-resolution(3000 \u00d7 3000) dataset.\n    image = cv2.resize(image, (2840, 2827)) \n    name, boxes = read_content(xml)\n    \n    temp = []\n    \n    for i in range(len(boxes)):\n        \n        temp = boxes[i]\n        \n        start_point = (temp[0], temp[3]) \n        end_point = (temp[2], temp[1]) \n          \n        \n        # Change color in BGR\n        if i==0:\n            color = (255, 0, 0)\n        if i==1:\n            color = (0, 255, 0)\n          \n        # Line thickness of 10 px \n        thickness = 10\n        \n        # Using cv2.rectangle() method \n        # Draw a rectangle with blue line borders of thickness of 2 px \n        image = cv2.rectangle(image, start_point, end_point, color, thickness) \n    \n    #Comment the below line if you using High-resolution(3000 \u00d7 3000) dataset.\n    image = cv2.resize(image, (512, 512)) \n    \n    cv2.imwrite(\"tb_bb\/\"+name+\".png\", image)\n    # cv2.imshow(\"img\", image)\n    # cv2.waitKey(0)","808abbb6":"path_img = \"..\/input\/tbx-11\/TBX11K\/imgs\/tb\/\"  #images path\npath_xml = \"..\/input\/tbx-11\/TBX11K\/annotations\/xml\/\" #xml path","07777d15":"img_dirs = os.listdir( path_img )\nxml_dirs = os.listdir( path_xml )\n\n\nfor item in img_dirs:\n    if os.path.isfile(path_img+item):\n        \n        print(\"Processing image: \", item)\n        fi, ei = os.path.splitext(path_img+item)\n        fx, ex = os.path.splitext(path_xml+item)\n\n        img = fi+ei\n        xml = fx+\".xml\"\n\n        main_bb(img, xml)","3710f1b6":"# Multiple Images","8ccabb98":"# For single Image"}}