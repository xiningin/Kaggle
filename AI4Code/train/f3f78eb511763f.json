{"cell_type":{"92b312c4":"code","4b8e0b83":"code","2453c91d":"code","261b21ad":"code","12c54a46":"code","fcf6ebf3":"code","8d5cf362":"code","25d1de97":"code","c4ca934d":"code","c085bef1":"code","99ad4af7":"code","ae684749":"code","4d0a9c91":"code","10f469f3":"code","7e40e42b":"code","15dbd612":"code","50acbec7":"code","07d52ace":"code","510ec342":"code","3f18531b":"code","2817017d":"code","6f92340e":"code","9be88734":"code","ccb1b6d6":"code","b7263644":"code","18ec39c7":"code","d928ddfe":"code","51d2e298":"code","16474e2f":"code","f3fe50e5":"code","be856fd2":"code","4f6cfc1a":"code","f906b5de":"code","f728168d":"code","423bac92":"code","bceac237":"code","c93c7081":"code","6aace3ab":"code","d218ca07":"code","bcfc17a1":"code","f478c001":"markdown","2db82172":"markdown","f09a3ced":"markdown","a575ae59":"markdown","27a1825c":"markdown","0cb30465":"markdown","456ff685":"markdown","41876a7b":"markdown","b79ab556":"markdown","2f4b269c":"markdown","d70b4b83":"markdown","deb56d8b":"markdown","1bc56587":"markdown","3abee88e":"markdown","b5f0a859":"markdown","88e6f42b":"markdown","53dd669f":"markdown","8f40cf08":"markdown","d71dc56d":"markdown","44947255":"markdown","047ce1f8":"markdown","f5dd037b":"markdown","3530d0ce":"markdown","3a81064c":"markdown","38279eec":"markdown","667bd2fc":"markdown","e6b3e1da":"markdown","09a090b2":"markdown","73949439":"markdown","5b2799d9":"markdown","4d836fb8":"markdown"},"source":{"92b312c4":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nimport plotly.graph_objects as go\n# Packages for feature selection\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif\nfrom collections import defaultdict\nimport copy\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier\n# Importing keras \nfrom keras.models import Sequential\nfrom keras.layers import Dense\nimport keras\n# Importing packages for SMOTE\nfrom imblearn.over_sampling import SMOTE\nplotly.offline.init_notebook_mode (connected = True)","4b8e0b83":"data=pd.read_csv('..\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv')\ntest=pd.read_csv('..\/input\/hr-analytics-job-change-of-data-scientists\/aug_test.csv')","2453c91d":"data.head()","261b21ad":"df_train=copy.deepcopy(data)\ndf_test=copy.deepcopy(test)\ncols=['city_development_index','training_hours','enrollee_id','target']\nfor i in df_train.columns:\n    if i not in cols:\n        df_train[i]=df_train[i].map(str)\n        df_test[i]=df_test[i].map(str)\ndf_train.drop(columns=cols,inplace=True)\ndf_test.drop(columns=['city_development_index','training_hours','enrollee_id'],inplace=True)","12c54a46":"d = defaultdict(LabelEncoder)\ndf_train = df_train.apply(lambda x: d[x.name].fit_transform(x))\ndf_test=df_test.apply(lambda x: d[x.name].transform(x))","fcf6ebf3":"df_train[cols]=data[cols]\ndf_test[['city_development_index','training_hours','enrollee_id']]=test[['city_development_index','training_hours','enrollee_id']]","8d5cf362":"# Plotly code to make a heatmap\nx=list(df_train.corr().columns)\ny=list(df_train.corr().index)\nvalues=np.array(df_train.corr().values)\nfig = go.Figure(data=go.Heatmap(\n    z=values,\n    x=x,\n    y=y,\n                   \n    \n                   hoverongaps = False))\nfig.show()","25d1de97":"px.box(data_frame=data,x='target',y='training_hours')","c4ca934d":"px.box(data_frame=data,x='target',y='city_development_index')","c085bef1":"# Selecting top 8 features from the dataset\np=SelectKBest(score_func=f_classif,k=8)\nfit=p.fit(df_train.drop(columns=['target']),df_train['target'])","99ad4af7":"features=fit.transform(df_train.drop(columns=['target']))\nprint(features[:5,:])","ae684749":"data2=df_train[[\"city\" , \"city_development_index\",\"gender\",\"relevent_experience\",\"enrolled_university\",\"education_level\",\"company_size\",\"company_type\",'target']]","4d0a9c91":"data2.head()","10f469f3":"X=data2.drop(columns=['target']).values\ny=data2['target'].values","7e40e42b":"data2.target.value_counts()","15dbd612":"oversample = SMOTE()\nX, y = oversample.fit_resample(X, y)","50acbec7":"count_1=0\ncount_0=0\nfor i in y:\n    if int(i)==1:\n        count_1+=1\n    else:\n        count_0+=1\nprint('The number of 1 in the target now are: ',count_1)\nprint('The number of 0 in the target now are: ',count_0)","07d52ace":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","510ec342":"dtc=DecisionTreeClassifier()","3f18531b":"dtc.fit(X_train,y_train)","2817017d":"print('The accuracy score with using the decision tree classifier is :',accuracy_score(y_test,dtc.predict(X_test)))","6f92340e":"xgbc=XGBClassifier()","9be88734":"xgbc.fit(X_train,y_train)","ccb1b6d6":"print('The accuracy using the XGBclassifier is :',accuracy_score(y_test,xgbc.predict(X_test)))","b7263644":"rfc=RandomForestClassifier()","18ec39c7":"rfc.fit(X_train,y_train)","d928ddfe":"print('the accuracy using the random forest classifier is :',accuracy_score(y_test,rfc.predict(X_test)))","51d2e298":"lgbmc=LGBMClassifier()","16474e2f":"lgbmc.fit(X_train,y_train)","f3fe50e5":"print('The accuracy socre using the lightGBMClassifier is :',accuracy_score(y_test,lgbmc.predict(X_test)))","be856fd2":"# Added Dropout here so that no overfitting occurs \nmodel = keras.Sequential([keras.layers.Flatten(input_shape =(8,1)),\n                keras.layers.Dense(128,activation = 'sigmoid'),    \n                                        keras.layers.Dense(64,activation = 'sigmoid'),    \n                          keras.layers.Dropout(0.4),\n                keras.layers.Dense(32,activation = 'sigmoid'),    \n                          keras.layers.Dropout(0.1),\n\n                keras.layers.Dense(2,activation = 'sigmoid')])\nmodel.compile(optimizer = 'adam',loss='sparse_categorical_crossentropy',metrics =['accuracy'])","4f6cfc1a":"model.fit(X_train, y_train,epochs = 12,batch_size=30,steps_per_epoch=500)\n","f906b5de":"print('The accuracy score using the Deep Neural Network',accuracy_score(model.predict_classes(X_test),y_test))","f728168d":"# Getting the 8 columns from the test data\ntest_data=df_test[[\"city\" , \"city_development_index\",\"gender\",\"relevent_experience\",\"enrolled_university\",\"education_level\",\"company_size\",\"company_type\"]]","423bac92":"predictions=xgbc.predict(test_data.values)","bceac237":"submission=pd.DataFrame()","c93c7081":"submission['enrollee_id']=df_test['enrollee_id']\nsubmission['target']=predictions","6aace3ab":"submission.head()","d218ca07":"submission.target.value_counts()","bcfc17a1":"submission.to_csv('Submissions.csv',index=False)","f478c001":"## Trying out LGBClassifier ","2db82172":"## Doing test train split","f09a3ced":"Conclusion:\nFrom the above heatmap we can clearly observe that the target has a high dependance on the city_development_index which means candidates from city with higher amount of development index tends to move towards the field of data science .\n\nWe also see high correlation of experience of the candidate and the company he applied for which means that most of the candidates try to apply for the companies on the basis of their experience in the field which is kind of a common knowledge .\n\nWe can also see the dependence of the amount of relevant experience gained by the candidate to the course that he enrolled to the specific university .","a575ae59":"# Box Plot for training hours","27a1825c":"Well from this we can see that the number of hours used to train a candidate don't actually contribute a lot to the decision to change the fields for the candidate .\n\nWe can also see that the average amount of time for the course given to the candidates is 46-48 hrs.","0cb30465":"From this we can clearly see that the target 0 is in majority which will effect our model so we will use SMOTE (Synthetic Minority Over-sampling Technique) which will help us to create more synthetic data for the minority class 1 :)","456ff685":"# Changing Jobs Of Data Scientists\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBw4PDxAQEBAWFhAVFRUQDxgVFRcYGRUQFRcYFxUVFRgYICghGBslHRUVITEiJSkrLi4uFyEzOjMsNygtLisBCgoKDg0OGhAQGy0lICUtLS0tKysrLS0tLy0tLS0wMCstLS0tLS0rKzIrLSstLystLS0tLy0rLS0rLS0tLS0tK\/\/AABEIAKgBKwMBEQACEQEDEQH\/xAAbAAEAAgMBAQAAAAAAAAAAAAACAwQBBQYHAP\/EAEMQAAIBAwIDBQUECAMHBQAAAAECEQADIQQSBTFBEyJRYXEGMoGRoSNCUsEHFDNicrHR8KKy4RUkQ2OSwvE1U3N0gv\/EABsBAAIDAQEBAAAAAAAAAAAAAAABAgMEBQYH\/8QAOREAAgECBAMGBQMDAwUBAAAAAAECAxEEEiExBUFREyJhcYHwkaGxwdEjMuEUQlIGM\/EkYpLC4nL\/2gAMAwEAAhEDEQA\/AO+Ncs9CE0DCaBhNMkE0DCaBhNBI1+nSSSI+HInPMdDXSr1FGKjL57ryfNM5eHpuUnKNtOmz33XJomtp8h\/PyqmrV7rvu\/p4r5mijR7ytsuW+u90\/iiSo0J2i4t\/gliqTcoyUb6+T9+A0cAZEicj+hpwmo09VdX2\/DFUpOdd5XZ23X0a6EujtkGQO9zWDDe6YI8RUIRa9+BZXqRel9OfNbrR+JcSzbvBtyk7SD2iDPeG7vJ1GYx9KdlL8lWedJqz3\/te2mmj9+pptRbCMVDBgORHI+YqhqzsdKnLNFNqxEaCwJoGE0yQDQMJoGE0DCaCQTTGE0DCaCQTTGE0DCaCQTQMJoGE0DCaCQTTGE0DCaCQTQMJpjCaBhoJHpRrOePCaCQTTGA0DMGgkE0DCaBmuQA5B70xIxj94V1ZScdJLu22f2ZyYQUnmhLvXtddP+5eftljcOnKfrmRWXs3JNvV2258rP4GvtIwaUdI335Pe68NRTSp0ppZ1436r0JVa9OT7N+Fuj22ZIhAXPrHQx0og0qevn4OwVIydburla\/NX5+PvYt2SSFAHP3Q2Mwcq3wH+lSvdL5fwypxUZSb5btea3Xv1NjYggBZJQbcQt1AMRHJ1\/vNLy\/kqlfeXP1i\/wAP3oaDiLTdczOecbZx4dDVEt2dbDq1OK\/kqGol5g0EgGmMensm44RYk4EmBMTUoxcnZEK1WNKDnLZdCFhGKiWrVXAaCQTTGE0EgmgYTQMwaY0A0EgmgYTQSCaBhNAwmmMJoJBNAwmgYTQSQTTGE0DDQM9KNZzyB8gkgVKKu7MU5OMW0YvKAR6cjzB8DTnFJhSk5LX49SE1EtCaBhNBIwaBlBGWRzLg5nBj866U4zs1e0WvNX+xzKcqeZOzc0\/J2+9iZJGDHw\/maz1Msu\/G605\/RGqipQ\/TnZ3fL6tDFOlGUrzv1v18xYiUIZadulr7eXg7bDtoCucefh6iiFOMqd38fyhVa04VrR120f2f2FpHzLEFVBIDciSPdnoTmPSqoPrsi+vFL9q1lbVb+fj4+Be4cz3FiQYfcgmHI5tsfqc\/61KN2imuo05X8LPp4XRofaXiVrTu73WbLbVBADM0cowJgH5VXPdmmnUjToxb+X2KnBeM6e+\/ImMuhwdvKRFEWk9dh9r20GqTtLlctNE45dPSka1e2oDQSCaBhJoGE0EgmmMJoGE0EiXR6jsriXIB2mYPWpwllkmVYij21KVO9rrcXFdd+sXTc2hZAEAzy8T1NOpPPK5DBYX+mpKne5SNQNgTQMJoGE0DCaZIJoGE0DCaCQTQMJpjCaCQTQMNMZ6SazHkAmmMJoGE0EgmgYTQMJoJGvVoIEZBkBvD909a6rjmi3fRrddfFHHjPLJK2qe0t7f9r5+ROrCWPw86zzpyyQgueu+nmaqdWHaTqPW2m2vl49Rio0qjt2bV97eHqTrUo37VO21+afmhqrFe75zHOKjGMnT7vr1JzqU41v1PC19r+D5MdtXSGEFZBPUY\/F6SaiouOq1RY5wqXjLR6+fp5lxbPal0DBAtwNbX7pcDvBXjB607XbRTn7NRk1e61fO19Lo1\/F+F2tSb9u6rQe7kgsvI+9nIIBnyFZ60mpE7KVKKfTkcbpuBHR65N18FIYWgxh7hKZlVEQJ5kiSMCiM0x4XDzz51sjpDUzohNAwmgkE0DCaZIJoGE0DCaBhNMkE0DCaBhNBIJoGE0DCaYwmgkE0DCaBkuh0dy\/cW1bALtMSYGBJJPoDUoxcnZFWIxEMPSdWpsg8Q0dyxca1cEOsTBkZEgg+hpyi4uzHhsRDEU1Vp7MrGomgJpkg0DPSTWc8gE0DCaBhNAwmgkE0xhNIZrQMxHMmAcg\/wnpXZzJLNfbmtGvNc17scNxbeRLfk9U\/J8n7b5E6+Hp6\/PrVW+r0315brdcr2LrNd3e1tP7tU9nzsm\/hsSrVUZK8oK3l4+DLpwlaFR35ardLTdfG5ncRBBzms12opp9TfkUpyUlpoXOGaO5cB290TljyiCCI686nRpyktPiZcZiaVKSza+H0d+RurOmTT24XJ8T1blMehNbadKMNjh4jFVK7vL4I0mrVW1KoLpS5cRnaQNoS0QCc\/ePaD4JVNfCqo01oasNiakKDk9Unbxu\/to\/ian2k9lxrGt9mwRbStDsJa67EEluUKIx6nA611cFmSjF2sbeG8bWFblNOV3stEkunV\/jc5TXrr+G3BbumQRuSZZGXyJyI8MGubUjVoSyy\/g9lhauD4lT7SmrdeTXnv9zbcL4xb1GPdudVPXzU9atp1VMy4jCTo67rr+S+asMwTQMkQW9j7iRcG3sx0InvA+Hj8Kmstnfcrk6iqRypZdb9V0K5qJeE0DCaYwmgYTQSCaBhNAwmgkE0xhNAwmgkE0DCaBmbN97bB0Yq4ypHMGpJtaojUpwqRcJq6fJh1F97jF3Ys7ZYnmTQ227sdKnCnFQgrJbJERpFoDTGYoGekms55AJoJBNAwmgYTQMwaY0A0Eis1iDKGPLoa1wxKkstVXXXmY54Rxeai7Ppyf4MLjHKDAn48qtl3ouS1une3puiiDyTUWrWasntz1T9+pKDVVGUMvR2fk\/wX4iFXOnvG6emjT+6JLYlSJE8xPl4GlBXpZb\/H7DqPJiFOz5K68eq6eJveDXxcs7AYZO76fhb+\/A1ow880Lc0criNHs6+Z6qWv5RDtYu5Y7tkW1aYgxLSviZGR+Go07uo78ieJyRw0VBWza2+mvp8zS8PXtddqrhyLeywnlA3N\/iNauQYv9PB0KS53m\/V2XyL3G+JW9LYe6\/JRMePkPM4HxqMpKKcnyOdRpSrVFTjuyXjGiscX0INpgd69ppn\/AAv4N4dVYevUVTVpxr0\/ob8Fi63DcTdeUl1XvVHiyu9u4yMCl62xVh1VlMH61wqlOVNn0vC4unioea+KO24Rr+3t7j74w48\/H41ppzzo5WKw\/Yzty5Fw1aUBNAwmgYTTGE0EgmgYTQSCaBhNAwmmMJoGE0EgmgYTQSCaBhNMYDQMJNMkE0DMUDPSSaznkAmgYTQSCaBhNMZYv60taS3tA2xn0EfCrp1s0FC2xlpYRQrSq335FM1SbQk0DC1SjJxd0xShGatJXMA1dRnBJ30fX7GfEU6kpJx1jpdeT3TPmHdBzzPpUGv00\/PyLYyXbSV1svPmXOEvtYMjS5lWQ4leePlVlHu2a36GbHRzxcZru7qXj7Zs9TqFe4sCDlTOCT+HziD9atjVUq1kuRyalKVPDNSfNW9+JoPZMz+tt46m5+X9a2Mv4yssqK6U4\/c5T9LGrcGzZnuks7f\/AJAC\/wCZqxY2WkYl\/Aqacpze6sl9zpP0XcG1Wk0r3NS5S1ci4lpsbAOdxifdkRjyE1PDQlCN5Gfi1elWqpU1drS\/XwPP\/wBIfE9NqOIvd0plQFV2HJ7qyCy+IjaJ6xNYsS4zm7He4TCtQoxz6O914LoS+zOri6v4bgg+vMfXHxrHSeWdj02LSrUFNef5OvNbDjBNBIJoGE0xhNAwmgkE0DCaBhNBIJpjCaBhNBIJoGE0DAaZIJoGE0DCaYwmgkYoGekms55AJoGE0DCaCQTTGE0DMRz8uflTsF1ewDSJhNAwmgZX1OsW2DuaAIkdSegUdfXlWyhTzLV6dBxpKUk0tfe7IOB8RNx70wqi3CKc5JGZ6vyM+WIq2vZRDFUbZN3rq\/46Fb2+9odTw+1pMKb41DOocEk2gjB+8DkE3Y8jTwlNuTzcjzvFJ0ssXT2fw08OT2NLwn9JentW3jRMrs7XGAuypdomCVkDliK6McM5czmYnHTrOLqa2SS8kXNL+kHR3E7bUaYG+j7kTaGGDKEO3LpnxGBXLx9CdGqp7rkdbhVsRSlSi7Pn6\/Xoc17T+2Wt4hK3G22ZkWkwvPG483Pr8AKx1K8p77HcwnD6OH1irvq\/ehztUm423CLu3Y34WB+RBrPU0nc7OD7+HcfNHoprccZEui0\/a3USYBOT4ACTHnANOKuyFap2dNy6CspbuR3SoBJc7sdniBLY3yY6DIxTVmRnKcL63fJW5+nL3ct2eHIDe3+6l42zmD2SbjdKj7zBQpHr4VJRWpRPEztDLu439XbLfor3KlyxbWyjRLsrvEndt3FLZAGMFWJ8gPWlZWL41Juq48k0vDa7+qSJ30NkXxbgbQxF0hmlVtoTdDTgEkNHht608qvYqVeq6Ofm1potbvu2+V\/PkUNbbt2riqVJIUdqoOO0MmEb8MFM56x0pNJM1UZTqQbT3ej8PFdd\/uXRoLZu3rSp3rYCglyAbxNu2FPh32fryHxqWVXsZv6iapwqN6S8Ncurv\/4pepWTRWne9sJ2BbnYBiAzOiFzg5IG3wnI86VkXOvUhGGa17rNbZJu3vlo\/Axb0ds21cKSyKTqFk\/fVmssPCSAp82HjRZWHKtNVHFuyb7r8mlJem68E+hJb0FgtbPvWiWLMGIIFu0XvJcU+6wMRGI8adkQliKqjLlLpbTWVotPmuvPyKhtWzatMLXfuM9tBvPNVQA\/G4\/LwUjnmiysXqU1UknLSKTenVv\/ANV8XfwJ9ToLIvW1RSy3bz2kG44tpcFvcD1YncfAADBmm0rldPEVHSlKTs4xTenNq9vJKy6t8yNNBZK7hLdmXe9mA9iXCOvh7gn\/AORaVkSeIqqVnpmslptLS6fx+TNPcAwQwMiTE909VzzionQjfmv58SI0EwmmSCaBhNBIxQB6SaznkAmgkE0DCaYzABJgCT0oSb0Q21FXZY0vC7108tg5dCfvD0GQvqD0roUsGlrU+BxcTxX+2j8Tc3OD20sXFUd4qSPUEsBPXwk1bWs6bjFaGDDVpLERqTd3fX10OXJrlHrQmgkTabRvckiAgyzNhQBzk1bToyqPQzYjGUsOu+9enM1PGdRo7llzZbtdkqXjum6doAtnqBJMjBjrXQjh+y8w4XiqmJbnsr2S8ld\/ZGv4EjB2kESoI8xPSs+JkmtOp1a0k1oc1+la87NpAxJCrdCz0kpI\/lWnh7bUvT7nk+OQjGULLe\/2OIsdfn+X9K61GXI89NcyzZOaz8Shmw7fSzOnwOrkxkV\/kmvv9US15g90fUAbHh\/uH1P5VnrfuOzw5fpPz\/B6OvIegrajkPcSMwIKkhgQVI5z0jzqSE0mmpbEt3twGDBgoYbwVgB8wCIwcnHmaepXHsm01a7WmvIDa68SCbjSCXBnO4iCfUjFF2SVCmlbKunoA627jvnACj+EGQPScxRdkuwp9PfULa69nvnO7d578NPjPWi7GqFPp0+W3wIWvuSpLElQApPQLyA9KLlipxs1bff1ENRdcsoZibjAsBzd5kHzM0XYuzpxSbSVvkiTU3tWjK9ztFbvBSwIOT34JHiTPqfGnrzIU4YecXGFmtLpfL+Cq+quE7t5mApM9FIKj4FVj0FFy5UoJWt7e\/1ZJev6hIZiw3qWBON6Phj57oyesU9SMKdGV1FJ2fwa\/HLoQDV3B2cOfs\/2f7vXu+Gc0rlvYwea6338fMH61cgjeYJJ59W96PCesc6Lj7GF729rb4cjHa3rjBQWZiotALMlOiQOYwMeVPUeSnBXdkk769epDeus53MZMASfAAAfQAfCkWQgoqyViOmTM6qw9p2S4pV1jcp5iQCJ+BFDVhU6kakVODunzIgCTAEnpFBO6WrAaCRigZ6SaznkAmgYTQSCaYyhxnXnTWTeH3Htn1HaLI+ImtvD6eeul5\/RnN4vU7PCSfivqju7UdoG7Xusv2SCANpAJY9WOOfnWvLJ3Zw3Vh2agoq\/N83+EWrtxUUsxAUcycAVG9iCi5Oy3OFW2bjkW1JknaIztnE+FczI5StE9h2qp01Kq7dfMg1\/EdLpG7Np1Gq6WLRwp\/5r8lH9wa6WH4e5ayOHjOMuzVLRdXv\/AB9TVcata3U6c39Y4WxuFu1YtGLYfmA3VyBnwx8K7eGoU1NQ52v6HmcTip5HNdbXfUr3LKDTLZghypvIBAEr90jzBuR5rXPxc81dtbLT0R7ng8JYTBU5SV9Ly63nr8u6i5ptanYWrjhbalLfkASACM9Z\/nXIxEMs3rzZdg8RmpRdTR2T+Jzv6R9B2mlW8OdppP8AA8Kfrtq7Azyzy9TNxqhnoKa\/t+j9o4v2Zto7ahH5Np7hB8GQq4P+GuhXqdnln0fyOJw+iq0p0nzi7ed019CvpEDXEUmAWCk+AJifrW7Exz0ZLwZiwNTs8TTl0kvqdNr\/AGQ1FsbrbC5HMAbW+AOD868jlPotznSCMHnyNRJG64Npi\/Zr4kT6E\/0rPJZp2O1h5dlhs3mzvjW44xJoyna2zcMIGUvgnugyRA8qa31IVc3Zyyb2dvMufrlpl7+3c1y7deAxG\/YRaLTMjczHHiMc6ndGfsail3b2SilttfvWt4Jfkx+sacge6CJyU95xZ2q2BhTckkeQMc6LoOzrJ8\/jss17b75dPjqVbV63ucnaDsRbRK93epQMSoByVV\/i3xpJovlCeVJX3beutnfS\/g2vgWF1WmlT3Y3WGYdnkAS16MdWgATG2KldFLpVtVrtLW\/ko8+S8Nyt29k3LJYLAtntO7A7XvldwAyASgxMhaV1cv7OooTSve+mvLS9ujtd+bHptRYGq07uwFpBbZyEOXQAt3QMkv8AShNXRGpTqvDzjFd53trye2t+nzLj8V07hQ5BPZ6lm7hNs6i6ZQgEbpyZbGQKlmTM6wlaLbiucLa97LHfwt0QX1ugHa7QpGxVs\/Zd4FbUd7cu07nJnkcAyeheI1Qxby3vu2+9prLwd1Zbb9LIJ4jogxwhX\/dFX7ESFTOoYgrEnIgeM0Xj9B\/02Jced\/1H+7m\/2rfZb6kN7WaLbCqgLPd7SbbGFa6GRkEDCoIjcIzgzReJZCjic15N6KNtVuo2ae+8tdnfTVWLI4lw7tdxRAm0CBana29mOwlIYQEEOvJiN2Kd43Kf6bG9na7vf\/LfRLXXTm7p7q9tTU8A11rT3bd5iN\/aLuADDs7Uy5EKQSRIgdPXEYtJ3N+NoVK9OVKK0t4avlzW293z8tbmn1+hQhSEYdpqnlrM9xliwhJXdEmSRkEeFSTRnnh8VPXVaQVlLmn3nvbbTx8yMarh4thMe7pVM2iXG151TbtuWIxziMCjuk3Sxmdy13n\/AHaaruK19l9dy+b2ndX1dwI32ur1CFkHfXb2dm1JGe8wO1s4kCBNS03MuStCUcPC67tOLs9tbylv0W605N30Kmk4robLaYptDWg0sLRhnFnajNK71JcmQCw7oM5pXSL6uExVVVFK9pW0zbLNdpa2do7Pu72scmxyZMnqfHzqs7qWgZoJHpJrOeQCaBhNMaCaCRT4loU1Fs23nbIJgxyq\/D150J54bmfFYWniYZKm17m\/0PGFtWLdtbc3VUWgem1cLnmcRitDxV11Zy3wmXaPVKP2NfxjXJaAu6+9tn9lbAl2Phbtjl4SfialTw9Ws+9t0CeMw+FWWgrvr739NDS39frNUNlsHSaU9FM37g\/fb7noM+tdmhgowR5\/FcQlUldu7+XvyLXAuHaayQu3banvxzZjyljk5z6A1pqXjG0NzDF55XqPQg4zfuW3s2BIIzcU8jOSGU4Igxn8IqccvZzqv0f0t75kqNKdTE0sOubSa8Od\/T6Gn4k5Ny+ymDZsvtI6Oqn\/ALix+FcnDQzT16M9\/wAaxHYYFJaOckvS9\/okvUku2xqNPY7QStxUuwCQA4wYg8snHnFc+vTgpPTS7+RnwzlWpxU3dpL5pMftGs6HUg\/+y\/zCk\/lWeg\/1Y+aOljF\/000\/8X9DzL2Sth9bYVvdYsGHiNjYPkYrq4tXoy98zy3CXbFw9fozYe2PDew1JKiLdz7RfI\/fHzz8RWnh9ftKVnutPwQ4zhOwxDktpar7+\/E7n2f1pv6W1cPvEbW\/iUlSfjE\/GuJiqSp1ZRR63h1d18NCb35+a0OU9sdEq6kOMC4oJjq4MGPpWOXU3pNuyNp7M6WSbkd1BtT+I8z8v51TRV25HUxklCCpL2kdCa1HNJdJa7S7bTozKpjwJgmmldkKs8lOUuiZK\/DnjcsdmQXRp5rDHw59084E+ol5WQWJh+177NeOn592ZGeHXJiVncLbd73bhMBGjrM+XdPgaMrJf1MPHa+266r3zXU+Xhd0xlQTtwSZG5zbE4\/ECPryzTysHi4K+\/P5K\/0\/G5Bf0dxE3sABjrnO6COh90+fI8iKLFsK8Jyyr3t+fdg6rRvbXc0e92ZE5DgBiD6AifAmKGrDp1o1HaPS\/psbG5wNSXRGbtU066lgYI3NBNoQAZ7ywevhUshjjjpJKUksrm4\/\/Xlo7lezwC61xLbMq7rjWCZ3bXRd1zA57RzgxOJoyO5dPiFNQc0m7JS6XTdl8fj4Fb\/ZV0obgK7Oza8JJBNlTt3xGJJgA5PpmllZd\/VwUsjve6j6vW3ot\/yT8P4Qt2z20swDN2y2yu61aUT2hQ5cE+Hh16NRurldfGOnV7OyWis3e0m+V1ovUOl4G\/aBb0ADd2qq47RdtvtSMiAdpGTjpIOKFHqOpj45G6fhZtO2ssvnv687WIrXs\/qW7MQqs5VVDNB3MhdQRH4RPlImKMrJy4jRjmerSu7pdHZ\/P48rhTgjwzPcRUGnOqDCXBSdoGOpbE58poyjeOjdKMW3myW21tfn4fzYd72fuH9nyS1buX2dhtDXAzAggSqwPvRHU5FPKRhxGC\/fzk1FJa6NLrq79L+BGnB0Fy0j3CWuWVvhVATbuyFZ3wo2yxb4R1oyknjZOEpRjZRk43et7c0lq3fS3rc1Wrtoty4qNvUMyo8RuUEgN8Rmos30pSlTi5KzaV10fQgNBYE0DMUDPSTWc8iE0DCaYwmgZFduBRJNNJvYHJLcg4txd7V5NJowFvNa7a5euDcUUkiLa8ifWu9hMFHdnkcfxGpO99unvcpaThqI5usWuX29+5cO5j6T7o8hXXjBR2OFUqynubTT2UKuz3NgWIwTJPPl0ABJpTlJNKKuKEYtNydjW3tXsF5rV3dbtljZYrG5zADR4byBHgorFi6soyjydtV9vh9T1PAeHUsRQnnV05WT56K7a6a3XpqUtPrzqNQ+ouc1Xe85yASY8jDR61KtiIPCqEOb29+gYDg1fD8UlKpqku7Lq5aLyaV7rl5WK9pD+p6u4ebJcz4wp\/MmjBwtByJf6oxF8VSoLaKv6t\/hL4nJ6jU3Dd0tvc0b9MqiTA9wzHLpVFVRVKT\/AP19zLTnN16avp3PojuOPEfqupnl2Vyf+k1wqN+0jbqj1+Lt2E7\/AOL+h5j7FgnX6eBMFifIbGEn512MX\/sy98zynCU\/6uGnX6M7D2\/0waxbfqjxP7rDP1C1m4XO1Rx6r6HY4\/RUqEZ9H8n7QvYS4DpWUfduMM+YU\/nS4mrVk+qJ8Aknhmlyk\/oiP2l07XtVp7ajO1m9ATzPy+lcmrdqy5npMNZVM8tlr+Pmb7TWFtIqLyA+Z6mrIxUVZEak3Uk5MkNSImbV5kYMpyOXxEH6GhMUoKccr2G+tuFdhI242iB3YG0bfDH9eead2RVCClmW\/nvz16++R83Ebu4tIksLh7q\/tBJD8ve7zfOjMwWGp2S6K2726eWiAvELqlSG9022GBztTs6ZjcfWZp5mSeHptNW3v89\/oQX9QzhQ0d0BRgA7RyEjoJpXLIUowba567i1OuuXPfg99rh7qiXeNxMDM7RTbbFToQp\/tvslu9lt8Ljv8Y1LszG5DMVZiqopZkjZu2gTECAcYp5mQhg6MUoqOiuldt2vva75ibjmp3K25ZVrjj7NPeuiLnTMyaM7BYCjZxs9Ulu\/7dufIhbi182+zLDZsFr3E\/ZhtyrMTAPLwozMmsHSz57O977ve1r781uRDiN0KACBCGyGCKGFozK7gJgyc88nNGZk3hqbd31va7tfrb2hPxnUF2uFlLuht3D2aS6ldp34zgD+5p5mJYKioqCTsndavR3vprpqFuMajel3eO1UbQ+xN0BSgkxnukjPrzzRmZJYKjkcLd162u7b366a+7EbcVvlOzLAp2S6cgov7JDKCYnB5GjMySwlLPns75nLd7vf4jbj2q3M28B2G1mCIGjZ2fMCfdAHwBwRNGZkVgKFlGzsuV3be+1+vuxXv8UvOWLFSWtiwx2JJtrEdMHujPOi5bDC04WUb6PNu936+OxRNI1BNAwmgYaBnpRrOeQCaYwMwGTQPYp39Z0X51dGn1KpVuhSdick1albYqu29SLX\/wDqqf8A1F\/zGvQ4XY8VjNn5m501lCHZ22hR3YElmPJR4dc1pnKSaUVe\/wAjFCKabkypx3WL2ACoFAGznJZm95iYGYH0qdCm8927ldeosmitY0+v+z09tOrGW9FGfq\/+GuNianaVpS8T6jwTC\/0+Gp03uoq\/nLV\/c1KXCN0YMFW\/hP5YHyqucJQ0kvE6VDEUcSm6bTyyafg1o\/fqjp04ez6f9XUgO9tkE8tzKZP8zXQq1oYTDOc9kvm+XxPmWKqSxnEJzjzlp5LRfJHM+0PBV0+s09guWZG0clBOQxFycwpCryJ6isEFWnh3OUbXzPrZPb5m51oqrG39qivWJ1PGPZFdYNNqU1BuaJ1Di3EbpEiSDz8QQeRg1x5Yypg6bWVZntL+H+fM6NWs8XJZ33Vy9s3XC+A6S3eTSrZh+zLsbdvuWp91bjL7jMJIByYrNTwuIqrtJzab9fj+CKxXZS\/TVvI5r234V9jqLI6LvX1QzE+qkVs4bWkqsXLe9n9DrYh\/1eAm3vb6anK+wKuvbq2B3GA8+8CfoK6vFo\/sfn9jn\/6am32kfJ\/U6nsFDm5HfKhJ\/dBJgfE1xbanq09LCNMDBpjAaCQTQMJoJBNAwmgYTTGE0EgmgYTQMJoJIJpjCaBhJpkgmgYTQMJoGE0EgmgYZpjPSjWc8gS6G5+0NuGuqv2ayBJOCRPMgdK00IPV8+RgxtRd2L\/bfX05epU4ncZrKteUC8XO3BUlFwxceuBjpV0lpd7lFJ\/qOMH3Uut1fwNQRiZpZdE7+hsinKWVBP5TU1TvojTXVDC03OvNRV7Jt2V3t76A1oJ4rbA5nSKB6ljXbw2kdTweL1Tt1NteIwo5D6nqf76AVqiubMEuiNRxQ7rlq357m9P7BqyU+zpSn4FmDof1GLpUerV\/Jav5JlPinf1C2+ihUPl95z8Nx+VefhHNJLqfVp1lQw06z5Jv4bfG3zNbx7jehsz2ah7nMGTtB8o970GPOuvXlCSSlrbY+b8Pq4nDTlOnK2bfx\/nXfcuey+k4pcujiF+2VsqpFoXO6zbyBKJ91YnJiZHPnXA43Vc8PbxV\/fnY38OpQjUt4M7K7rNLduW716wDet+6wLIxMD3ipG+Okzz864dPiVeMMj1R0ZYKDldF6\/x43blkEQm9BAHTcJj4fQVRUxM604upsnsiaw6hFtbi1vDkXiZ1QV7VtSNTduDUOV1Di12QTsQ2xYAWWImLY8ZruVMRThHNe\/RLn5HPjTlJ2SOY47qG1Q1DoCSUfb4kQcj1J+tUYVdlOLqdbv1dz0youOClTW7TXq0cp7OIbAuXbwKKdqLuBEmTOCJ8M11uKYiE8sYO9jl8Bw08Mp1aycU7JX9eR0auGAIMg5BHUVyD1MWmrowaZIJoGE0EgmgYTQMJoGE0yQTQMJoGE0EgmgYTTGYAJwBJ8qB3S1YDQSCaYwmgYTQSCaBhNAwmmSDQM9IuKGBBqhOzueOcbqxrr2mZcjI8uYq+NRMzypNEN++zmXYsQIliTgetWttlcIJaRRTOo3bghBK8yTAk8h61dTotu5XjuJYfhMqcsTduTslFXfjJ6rRbdb7I22hW1atFtWdrQYBkEkAFmAPSSIms9atiKko08Cr6rNJWaV3on4aO55ethY4\/E1sTjrqMr9nBtruxVr2vva2nVvqaniutSzxEXnMINECTkkAt0jmcx8a9DRSS1exTOPcUYrwRjTrrdcC1v\/dNGBL37sBynOUBwogc5+Ip1K\/JFcaUIvvavoQcFtWxduAXGe3aLqGcksbYZjJn91T86hiav\/Txhzep2+AYWUsZUrtftikvOX\/HzNXqdFqta4s6dZu3X7xMwikyztAOBjp1rFSVnm6HpuPVlSwqpL+5pei1\/HxPSPZP9HGg0AW9cH6zqeZuuAQh\/wCWnJR55Pn0quVWUn0PJqKSN\/xXhjX02bgvUMAIaOSuvr4eFZsVT7ak6adi2hU7KeZq5w7SJEzBIlXxI\/i5cq826FTNkyu\/k\/fqd2MZS2TIb0gbhO7kpklp6Z+6PStFLBVs6zR05lsKE29UVuKavUC0C5LiQACQBPSVGWrpUsNCLzRjb6\/wV1a9LDyy0o5p\/Je+hS0YvutwOxXepVSp2lZBHdI5c\/pU5ZYtNcjVhaeIqwmq70l8jV6nirWLfYayyXJGwMrALdWOYYjusMGI5ia0Rw0K8rwlZdOaMeJxlXD0eyxELvlLk\/HwfgfezfEtzGyVKpG6wDnuAkFS8DeRjMeNPFYaNOKceW5Lg2OnUfZVOl4+m68f+TfmsJ6IJoGE0DCaCQTQMJoGE0xhNBIJoGE0DCaCSCaYxafUPbYOhhhyOOuOtOMnF3RGdONSOWS0IWNBYkE0EgmgYTQMJoJBNAwmmMNAz0k1nPIBNBIocS0RuCFMfiH4vKeg5+fpV1KoovUqqxmoN0bZ+TeyfX03ItVNm2pS2HvxG5j3VJMyBmIj\/wA1ZCpKvWfau1P\/ABW7t49H9Oh5yjwOODp3h3qn+UtbN7vnb6t73KD2mdu0vNvfpPur\/Cv5mr41FTp9lRWWPRbvzfM6UMJFz7Sp3pcui8l7ZrPbu6q32k89HbUeZNwGPoa69H\/b9+B5uqnnfm\/udSunuXofVOlx4OxVJFhGHYlRbH\/EYBz58+8BWbM7dPbLHTpwl3L26vf+DU6q0LI15nNzU3kwIElypAHQbUbHnUKju15I9bwOklRi+rbfpp+C17H6kWHa4Q3eG0EfdAM\/3Gaq7aMHllsHGsNUxMo9nvH7+0ei8O4kHBYEHE7gcH+Icp+VTlBNXT0PLd+MsslZmr4p7TqJWzDty3H3B6fi+ECs868YaLVnVwvCqtXvVO6vn792NJ7LanSC\/cF8jeMruwJ5kn1xB9adPWCaOpxLD13RiqN7c0t376HV67XaAId72isclKkn5VM4NHB4pzWSDT62a+Z5x21u67FRKD3Sc4np4+vlWbEOz0PXwpKMrNK9lfzJTWU0HL+3CkrpwAT9pOPT\/Wuhw9Xmzgf6gf6cF4v6Fv2a0y9gjsp7QF1tmf8AhsZMjxkUsdNqq4rZ2v5k+C0b0YVXyzJer\/g3DggkEQRgg4IPmKwnoE01dANBIJoGE0DCaCQTTGE0DCaBhNBIJoGAmmSN\/oPZ4NcCtcVnUKb1qCpDMJVQ3Jj4gQcRW3D4eMp9\/ZbnmuJ8aqU6F6UbOTahK6d0nq7fTre5T43wtLIDoxgmNpz8j\/Wp4zCQpJSi9+Q+A8ZrY2TpVY6pXzLT4rr5fA05rAenCaCQTQMJoGE0DCaZIJoGGgZ6SaznkAmgYTQSC1Mdine0gPu48qtjU6lUqPNHJe3WguXmOoZtq27SJsAPeZXOZ8Ibz5V1KGJzOMV1PPYnh3Zqc79WdfqeKAOwtfaXYKHaZAO2zAuXQIIm2Zt2xgiDipTlGC7zt797mShhqld2gvXkRabQG+0XnTc1y5fM91e0uMWI64EmBn1rmYrHZVm2Wx6ehF4Ogoybfl4tsmu\/ZlrYQNBgMrjb\/YqzDzwtTDuU282tt\/TwM9SeNnXhKgl2el9uut+flYB6+B5icH1HWsyk0rJnXdOEpKTSugmolhX1Olt3PeUEjkeo9DU41JR2Hbo7Fb\/ZlrqCfUz\/ADqzt5j73+TLKqAIAqptvccYpbHxpEjXe0WiLaY3sRbZW55ywU4+M\/Curw+lUjLPyZ5vj2JouKou+dO6008deenS+p1v6NrFhdHauFR20uAzdAHYDZ0HrzqnE16EcU4Sfe0322Ry4V67w0aafdV9Fz1b16nT8S4TY1I+0XvRhhhx5fvD1qU6UZbksJj62GfcenR7e\/I4fjvB30jAF1ZW9wjDR+8vMfyrHUpOGvI9ZgeI08UmkrSW6\/k1Rqs6ITQMJoGE0xhNBIJoGE0DCaZI+tXSjK4iVYMJEiQZEjqMU07O4pwU4uL5pr4m4tcXsI1zUItxdQwbu7t1vtGP7ST3sSx2mckZq+NbK3JXu\/gcirwypVjChUyypxtra00ly6a6K6tpyNVxDXvfKl4wIAHLzOfH8qVfETrNOXI2cO4ZRwMJRpX1d23v4LloimapOiYNAwmgkE0DCaYwGgkE0DMUAekms55EJoGE0DCaCQTTGQ6iylxSrqGU4IIkVKMnF3RGdOM04yV0YtWlQAKAByEUSk5O7JQhGCtFECacgnc24dBA+ZqdSopxytE2sytIlAA5VWNJJWRg0EgmgkE0DCaYz62m5gJAnqTA+NU160aNN1JbLoKc1COZlhOG3SCcT90SZbzEAwMHJxVlGtCWWXJ2foc\/E8WoUe6neXRcvMh4lw23dQ2jeNokd9XgE8o6iRI6SK9Th6VOMXUh3vG\/v5nkcdxavirU6iUV0t939rFi\/wAOXT6UKt4t2aE7fusRJMCe7J9a8lDiXa13JwSzP19Xz+R6Ph9TsVGm4rpfZmm03tjrt5V2btEwjTAK8sr1PLNdmLTVzpR4dhnBrKrPfr8d0SXbzOS7MWY5JbmfnXPnKUnqbKFGnSgo01ZANRLwmgkE0xhNAwmgkZNp9u\/adk7d0Hbu5xPKadna5FVIZ8l1fe19bdbERNIsAaYwmgkE0DCaYwmgkE0DMGgYTQMBpkgmgYTQMxQSPSTWc8egmgkE0DCaBhNMYTQSQTTGE0DPoXaTPenlHTxmpWWW99Q1vtoRmokwmgYTTJBNAzNlgGWTA6mJjHlWTHU3Uw8oxV3pt5oqrpum0iwvE2ssDZ6bt\/ODPUBuXwqrAU66TVbRWWXa\/wAvTc4lbhk53nBWZJxHX2rtoqQS7AMSclX8sQD0xFaY1MXQrxdCXd\/u2KcLwfP\/AL8G9ef8bGruOze8xPqcfLlVsIRh+1WPS08PTg7pETKJmM1O72Lsqvc+NBMJoGE0DCaYwmgkE0DGdVc7Pst57Pdv29N3jTzO1iCoU+07WyzWtfnYrmguCaBhNAwmmSCaBhNAwmgkYNAwGgYTTJBNAwmgZigZ6SaznkAmgYTQSCaYwmgYTQSCaYwmgYTQMJoJBNAwmmSCaBhNAwmmMJoJBNAwmgYTQMBNBIJpjMGgYTQSAaBhNAwmmSCaBhNAwmmMJoJBNAwmgYTQSCaYwmgYTQMJoJGKBnpJrOeQCaBhNAwmmMJoJBNMkE0DCaBhNAwmgkE0xhNAwmgYTTJBNAwmgYTQSCaBgNAwmmMJoJGDQMBoGE0EgmmMJoGE0EgmmMJoGE0EgmgYTQMJoGE0yQTQMJoGE0DDQM\/\/2Q==)","41876a7b":"After oversampling we can see we got both of them as same","b79ab556":"Well since the names of the features aren't written here let me simplify it for you the 8 features that are selected are :\n\ncity , city_develtopment_index,gender,relevent_experience,enrolled_university,education_level,company_size,company_type","2f4b269c":"## Trying out NN","d70b4b83":"# Let's Look at a heatmap for the data","deb56d8b":"Well we can see a better accuracy than the Decision tree classifier ","1bc56587":"## Trying out Decision Tree Classifier ","3abee88e":"From this plot we can clearly see that most of the candidates who dont change ther respective fields are from the cities with the city index between 0.8 to 0.9 but the candidates who actually change their fields lie between the range of 0.6 to 0.9 .\n\nIt can also mean that if the index of the cities development is above 0.85 there is a higher chance that the candidates won't change their respective jobs.","b5f0a859":"# Packages for the notebook","88e6f42b":"### **The Features of the dataset are as following :**\n* enrollee_id : Unique ID for candidate\n\n* city: City code\n\n* city_ development _index : Developement index of the city (scaled)\n\n* gender: Gender of candidate\n\n* relevent_experience: Relevant experience of candidate\n\n* enrolled_university: Type of University course enrolled if any\n\n* education_level: Education level of candidate\n\n* major_discipline :Education major discipline of candidate\n\n* experience: Candidate total experience in years\n\n* company_size: No of employees in current employer's company\n\n* company_type : Type of current employer\n\n* lastnewjob: Difference in years between previous job and current job\n\n* training_hours: training hours completed\n\n* target: 0 \u2013 Not looking for job change, 1 \u2013 Looking for a job change","53dd669f":"# Applying Models ","8f40cf08":"# Seeing all the models used we can clearly see that the XGBClassifier performed the best with 84.8 percent accuracy :)","d71dc56d":"This is a good score but less than XGBClassifier","44947255":"# Thank you for looking at my file :)\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTExMWFhUXFxcXFRcXFxgXFxcXFxcXFxUYFxUYHSggGBolHRUXITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGi0mHyUvLS0tLS0tLS0tLS8tLS0tLS0tLS0tLS0tLS0tLy0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKgBLAMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAACAQMEBQYABwj\/xABCEAABAwIDBAcFBQYGAgMAAAABAAIDBBEFEiEGMUFREyJhcYGRoQdyscHwMkJSYtEUI4KSovEVM0NTwuGDshZjc\/\/EABoBAAIDAQEAAAAAAAAAAAAAAAECAAMEBQb\/xAAuEQACAgEEAQEGBQUAAAAAAAAAAQIRAwQSITFBUQUTIkJhcTKBkbHRFCNSofD\/2gAMAwEAAhEDEQA\/APQHOTYC4x35pCDz7\/7reZmF0d0nRLmhx3Jwb0bBSYPQ8lw3J9qbc1CyVXQDB9fqnWMQNYVIYxBsKQIauLbo3hK1LYROjuibTpyFvYpGRYtbq\/cx47fRZix73z0QpIeSEN5qxDE1LFbhok0uvjm+GXEv3+38Ay4nDnwRmssi6NJUSBupIHeQFFdjMbRvLvdF\/U2C1ZM0Ifikl+ZXCMp8JMmFi50appdpB92I\/wARt6C6hTbQzHcGt7hc+qyS9pYI9O\/sjTHR5X4o1AYm3vYz7Tmt7yB8Vi5cSmdvkdbsOUeQURwuVln7XXyx\/UvjoH8zNhPjlO37+bsaCfXcoE20zPuxuPeQPhdZ\/o0hjWaftLO+ml9l\/Nl0dHiXfJcnaZx\/02jxJRR7Qu4sb4EhUJjSAKr+t1H+Q\/8ATYfQ11Ji7XkNIyk7tdD2KblusO2QrX4fU54g69juPePq\/iuv7O1cstwn2c\/WYFjqUeh97dEOQFE92ijZ11DJuQ70IRtiHemHzaeKJxI+vkpTJuiOujSZFFdM7fuXCU9qbawe8iOujKodraroKWaW+rWOt7xFm+pCvOlK889rta4UzIRq6WQCw3kN13e9kUbcYtkVSaR55i37rDqSLjM+WpeONh+5i8LMefFNCK1HBGN88zpD7rLRM9TIUe3rwKswtN208cdO3\/xMAf8A1l6shTXrooOFPFHGeWYNu\/8Are7yWCKtmxvg9E2dpLNaANwC0sUYsqrChZuqtWuXSiqRilJWWrL2BCMhOxDRIRyCpsvobY0cd6IAX0Rhg5JLIWShdULmIgnFCDbWp0MSxsRPna3Q3J5AKrJljBXJ0FRb6AypGt1QSVZ+623fqo7nP4uPhp8Fiye0sUerZYtPN\/QtWZWi7iB3m3omZcTjbuu49g+Zsq4Ackluxef1Gonlm5M3Y8MYqiRJizz9hgHvEn0FlCmnndoXkdjbN+Gqfv2JNVR8Rakl4K11KeK4UysHApGsVsfqBtkD9m7EhogrTo12RWpFe9lQcPCD\/DVddGuEaG1MPvGUrsPTT6A8loOjXdGjsRPesy76Qpl1OVqpKcFQ30aXZQyyWZ5lOVe4CMuZp3GxHwPy8k7HRJ+KEtNwtOkn7vNGX\/clOo+PG0SXtvpbRAIgNydiddK9i9TZykuLI4aP0TxCbY26etoowrkYc1DlAUjIm3AIojQyXAcF5ftRO2bGadrv8umYZ5OQEYMzr8haNg8V6bU6C\/w\/ReH1FbduK1l9XltLEeBEj+tbt6KH+pJmdQ+42LmRQYGP2iuY+T70pmk5WaTLJ6ArUbARmaaaofve4nxccx\/9vRZnAOpBVzcohC33p3ZT\/Q169D9nlDlgZpq7Xz1VOFXIum6RsaaKzbceCkWTscWm5OCJdHcjnOLuy4CUBAxqPKsrNiDG9A4JTzQkXQQWwmJUgRAqAscY5BHJmc5pGosR2g3\/AEQl6SN1pWHg4Fp+I9Qs2rhuxsaEqkSOjSOplObGlyLz042zbFlf+zBR6+SOGN8shsxjS5xsTYDUmw1VvkVBtfVhsJga3pJqgOjjj94ZXPdya0G90ix2x1K2RdnsdgrM\/Qh\/Uyk5220dctINyNbK5\/Z1QezGlbHRmLLlljlkZPzMjXb+7LlstdkRyY0pNLojkQP2ZL+zKdkXZEm0m4g\/s6F1OrEMXZUUmhW7MdjOISRVtHELdFP0rX3AvnawOjseGqvxGqb2iUxFMyoaDmppoptOLQ7K\/wAMrifBStp8ZbS0r6m2awGRt7BxcQG6jhrfuBV6juSoDLDo1xjSYc97oo3SNDXuY1zmg3DXEAkX7FJDUNtC2RzEgdCpeVIQooksiiFEIk\/ZcAjtJZGijsklUkjrHt1+X6KLO1eiwT3wTMU+LQjRogc7kl1QlXiXwOMCCoOlkbHJuSQcFF2Rvgze1mJdDSTSfebG4jeNbWb6kLxPGP3WHUkPGZ8tS8cbX6GHwsx58V6N7Yqy1MyFmrpZGttxs3rf+2XzXm+37wKswtN200cVM3\/xMAf4586q1D5SLMK4sHoSKOniG+omfKfdZaFnr0hXsOzdFZrRyAXmsdLmr4od4poo4zb8TW3f\/XI7yXseCwWbdTAvI2T0JWWyea1OADl6JsC+71WgoqiSx3LROJhj0YkCWSJGQ+Ny6yaY+6IlJQ1hDv1RNQAI2FRksQhPshB63LUd43JuOK57FOYFzPaGp2R93Ht\/sW4Me6W59EgHilQUZ6tuVx5bvSyjYziradmYskkcTZjI2FznO4DQWHeVzYrckzTXNA4xicdPGZJDYaBoG97j9lrRxJWY2K6SWpqpqltqhpY0NP8Apxubna1vn9XKtMIweWWUVdaB0o\/yYQbspweR+9Jzd\/1bp29DiTH7m1MRYeXSRatv2ltgnSSHT8IGli6HEZG7m1MYkA\/+yLqvt\/CQVpLKh2pbldTVH+1MA4\/kl6jvXKr5I0BvpiWSIkiRoAiSyUFZys2piMNW6F13092uu2wD9Q0i\/wBoXB8lFGwpNlziVG2aKSJ32ZGOYe5wI+a83ilNUzDqJ4uY5Xidp5U2gB5ggrUbCYvPMyWKpIM0L7EgAXa4XYbDTn4WWIjqZf8AGal9LkDwXhsbxdshbbpGh1xke7K4g81bCNNr0HS7R6y9iBQ8Ax2OqYS0FkjdJYn6PjdxDhy7UzhmIOfU1UDrfunRlnuPYD6EHzSK\/JW4ssrLgEZCFEUQhIAlKUKEAm0se34\/QUaZuu9TJG3BHZ68FCc64uutoJ3Fr0M2XsaKQu7EDxvQ3OnJdJIzuQ80iyjveLp0MUWp0umiuQSbo8y2ombNjNMx2sdO0zydgjBldfstEweK87wQGpr2Ok+\/KZZO4EyyegctFU1t\/wDFqznlpY+R6V+V1u3o4T\/Ms\/s71Iqub8MPRN96dwZp\/AJFiyu5NmzGqijVez5hmnmqHb3vJ8yXf8vRew0TeqF577NqHJTtO7Nr56r0qkaLWWnGqiVTfIUkVx3JgDv81PsAoEjNf0TxK5quRwhNudYhDM8iyPogd5VtGXdzSH4XgqQ63NVreqdNyfa\/n9eKrlAthkXTJYPoiib9BBCCRvUunjtqd\/BY9RmWGDky+EXNpIdY2ycahRALzM5ynJyl2zoxioqkLSmz3N52cPgfkpN1BcbSMPPqnx3etlOVmCVxr0BNc2cqPbKE9AJWC74Htmb\/AAmzv6SfJXiGRgIII0IIPcdCrrFTp2V+JQippXhv+pHdveRmafOyrf8A5GW0lPI1meWYtjYy9ryah1zwALSpGyUlonQnfBI6PwBu0+R9Fk3DocTgpiOoKiSaPlaZm4dzgUUixLtehrNnscdO6WKWPop4XWewHM0tOrXsPFpCgYziM8tcyhgeIm9EZppcoe4NvlDWB2gJuNSOPZqm1Y\/Z6inrho0HoKjkY3nqk+67j2hNPeIMYL5CGsnpw2N5+zmY5t25uGgv4hSiJeUQfZXUFjKijcbup53Ae448P4mn+ZY7pTG6vadGz9Ll7XRTNdb+Uu81oMBpJRLLiUDXPBqJmvjG+SAkHMwHe4G58OxIzZySrop3Njc2VtVLJCHjKXMcGZm9bgbDsu1Pxdjqk2Xl+gxCCYaR1cLY3cuka0GM95GUean1uycf7x8PUmdK2cPcSQJGnzDTc3HamJ8Gmmw2CMty1ETY3MzEdV8fV1cL72381qY72GbfYX5X4qpsrcvQqMW2dineJQXRTtFmzRHK+3J3B7exwKiYPgE8VU+olqGyZ4wwgR5CS0jK42cRewtorXFcWipwwzOLQ94jacrnddwJAOUG246lRYtoI3VU1LlfmhjbI99hls4A2GtybOHDmhyBN0WzmppzUxg2KxVULZ4STG++UkFp0JBu06jUKYQh0K0R7Lk6WICEwpwUGRtiR238Dr81OUStb1geYI+vNbdFKslepTnXw2Qy\/wBFzRolO9cL6fJdoxJiN0VNtZXiCmml4sjcR3gHKPOyupHLzv2zV+SjEYOsr2tt2N659WjzRuk2Olbo80xb91hlLFxnlmqXX32baCLw6sh8U02G1FBGN9RO6Q+7GBEy\/wDE6TyR7fvAqWwtILaaGGnaQbgljAXnT87nq0bSXr6en4U8MTHcs+XPJ\/XIfJYUrZtPT9mKTKxgG4ALWRnnoqrBorBW4C3eDN5OedbeqbfECbpyS1xfzTT9\/wD2ogMakvySuGiIDtQyNKtRjfqN5Lp+GPs+u9MM0U+kaXfXqhle2NvoGPl\/UkUzFKSAJQvJavUPNO\/Hg7mHHsj9QkQQBGFlLBiuHVuN418lOa64BHEA+ajTNu0osMdeMD8JI\/T0KOB1ka9USX4bJC4oki1lRn4f3WIPbwqIg8dr49Db+E3VV7QsPeHU1ZExz3wStzNYMziwuB3AcCD\/ADK22vicI2VLBd9O8SWG8s3SDy+CuqWobIxsjDdrgHNPMHUIrjksuqZHxnDm1EEkLtz2kdx3tPgQD4Kr2eY6WAQVdOc0Qax3SNDmPIuAWk\/a0AN+1aErroCJ8UNxQtY0NY0NaNA1oAA7gNyO6qsW2jp6d4ZK8hxGY2a5wa29szy0HK2\/EqzbICA4EEEXBB0IO435KEpi3XLHbZB1XPFh7HWDmOmmdyaLiMfzfJZXGMRlmw2CkJcJxMaeQXNyY9GAnjfM3xaioWOoWbjb7D+mopWgEuYBIy2\/MzredgR4qjw+sBrqSq+7W0xifyErLEg+IDVo9iq\/p6GB5NzkyOJ3ks6pv32v4rIOw5zY6mkZfpaSYVVLpvYetlbzsD52RXoGPoXfs3GSGenP+hUSMHu30+BWvWK2Sr2OrpnM0bVQxzgcnN6kje8Oz+S2t0klyLPsSyEtR2SKJCMbypiujuwnlr5b\/S6lFKG30V+N7ZKRXJWqKUfX90jtO1G0WJbxBI8tELmDivQJ3yc5egMhFuxeU+2mpZ0LG21zjLzGhufLTxXqktgvHvbfKLwN5l7vINHzQn+Bl2P8R5Ze1rL0X2e0z3zPnkcXvdqSd5J3nvXn9JAXva0byV7TsXhJjj3b1mxK5GmT4N1h4s0KYD9fRUenFmp8ha2Z7CcLqM866hPAHjYefwTUt77yoiSHo2IZGXSgm6dYE1lFKqI7IbK0pYco7UMFPrc8Nykri+09Zu\/tR\/P+DVpNPT3v8hEqRKAuKdA5EEiIIECI0UfDnWe9vPUeGh+SkqDfLK08zY+KS9s4sZK00WhC5EhXQM4jhcWQxRNaA1oDQNwAAA7gEa5AJyzG0FdKyvoI2yFsUplEjRbrFrQWg3F+K06y+31I4wsqGfbppGzC34QeuO7cfAorsMexnZumbUyV8kguJJXU+v8AtsaGkDle48gsxXzvbQxxTFz20tWIqhjTlzxgksuToBvAubblp\/ZlUdJSvf8AinkcfENPzTtPGIsUmYRdtRA2TUaZmHKR5AnxTdMsvlmf9lkJ6erfk6hyiN2bOGNzOPRB9yHWGXUfhWyn2bpnztqTF+9aQ4OBIBcNzi0GxParSOMAWaABwAFh5BGErduxJSt2jNYFh0tJPLEGF1PK8yRuBb+6cR1muBINtABa\/DttPrcFD6mKpa8skjBa6wBEkZ+46+7XW6tSo89bG17I3SMa998jC4Bz7Ak5Wk3OgO5Bg3NlLW4G2OeCenjDS2RwlDRa7JRZzrdhAK0CZjqLyOZkeMoBzltmOvwa6+pHHRJRVDn5s0T47OLW5iw5wNzxkcbA8AbHsChG2PFJdEQhTpCNigJwIGhGFYkKVGItyy34OAPiND8kD1KxyK7A78JB8DofkobZARp5rs6aW7EvpwYMi2zZFqAF4h7ZakOqo2D7rC4\/xOt\/xXt1VY9\/1f4L579p5JxCS5BFmZbcBl3Htvc+IV2bjGHBzMDYHDTJNmto3Re44NT2G4WXn3s7wwxxNcRq7f3nt7rL1SgiAA5pcUajZbOduh4N5InaWRHfZKQNyZipDbrIMn1\/ZPW7u3+6Qk\/i+aKC0NMGm9TaaMk79OKha37Oaq8U2lkpJGl0RfAdHFv22n8TeDh+X151auU4424dlWCKlJJmuSqLhmIxVEYlheHsPEcDxBG9p7DqpS8o7vk66OXLlyUItkQCQBKoAIKBiI4qeFGrWaKrKriPB8k+J+ZoPMA+aQqLhMl47fhJHzHxUwroY57oplElTaESLkqIBFxaCCDrfSy5KoQj0NDHCzJExsbbk5Wiwud5sqPHerXULufTMPaC1tvitHdZ3Gxmr6Jv4RM8+TQPgiNHs0YXEpCuQFOTbomlwcWjMLgOsLgHfY7wnEhChDkl0qQhMkAVJZKFwTpCsWyUBJZEEwBuoizNc3mCFm6d2m46bxyWme8AXJAHM6LNyPHSPym4JuCO3UroaGbTaM2ohdManaf0Xke1ey5lremvoct221uNBrysvY3tUMYQwuLjqSt+VblRVp3tbZS4Dh+VrRbcFp422CSnpcg0T1lPFDvl2IQlDUj0ROmiAyBIQGInmlI+tEgHb8UURnOiTU9IHCxAI4qU0pVN3gq2LsweJYJPRyGooX5T95m9jxvs9vHv38iFpNlttYqoiJ46Go4xOOjuZjd97u3j1VjMVkNpdm2TDMxuRwNwRpqNxB4G6xaj2fHKrj2Ww1ex1M9GRALzTAts56QiGvDnxjRs4F3t5dI0fbH5hr3716RS1DJGNkjc17HC7XNN2kcwQuBlwyxOpI6EZKStDiVcuVQwoKaqBonAhkGiSXQV2Q8IfZ7m8xfy\/urUqjY\/LM08L289Pmr6yu0buFegMy+KwbJESFaioh4jWGGzy0mP75Au5n5rcW8+W9SoJmvAc1wc07iCCD4hESqifZ9ly6F8kDibnoiA1x5ujILT5IB4LdzgBc6AakncBxN1nMGBqKqSsseiawQ0\/wCZt7vkHYTuPEKYcEzi088kzeLDkYw+82NoLu4kjsVq1oAsAABoANwA4AcFA3QV0l0JKUKIUW64pFyZIAqWyanqGRjNI9rBzc4NHmVnsQ28o4rgPdKeUbbj+Z1h5Epugcs01ktl5hiXtLldpDE1g5uJe7y0A9VlsSx+pnv0sz3D8N7N\/lbYeiKYdjPX8T2qo4Lh8zS4fdZ13eIbe3jZZHFPaWTpTxAD8chufBjdPUrzguQscnVEUDcUmMyzOzSyFx4cAO5o0HktFTTi4t4rE4K7ctZT7hzXT07W0z5I1IvC+\/JGSbaKNSv0Tj1sXJkfDY808EV1Gidru17067kg1TDGVodugaNOKRoTsYSlq5EbF2oXN8fEJ1wTIcOdlEM0G0JHlKAgeTwUEdJEeQ3F\/RMvFzbyv2I5nm1vWyZExAv2rTBMw5JK6HarDI5m2e0a7tyyH7FVYbIZKU5oibvhdfI7mR+B35h433LbU8oI1Phron5Iw4WOoPNZM+COTiSNeDK4Ljoa2Z2pgrGnIS2Rv24naPb2j8TfzDxsdFeLzjHNlLkTQOLJGm7S02cD2EKTs\/t05jhBiAyP3NntZjv\/ANB9w9u73V5\/U6KWJ8dHTx5IzVo34XOCEOvqNRvCIrAywpsRbxV9TyZmNdzAKp8RbopWBS3it+EkfMfFTSusjj6j5VcEyeUiJCV0GZhEhSlVtZjlPH9uVt+QOY+TbpJSS7Yyi30ixuuWTrNuYm\/5cbndriGj5lUNbtpUP+yWxj8oufN11nlqsa+pojpMkvFHpLyALkgDmVU1m0lNHvlBPJnWPmNAvLqvEZJDd73O94k\/HcopeVTLVv5UaI6FfMzdYp7Q2RtLmRmw1u82\/pbe\/msPUe0Cvn16Xomm9mxNDbDh1zd1+4rOYrUmV+Rp6jTr+Z36BFBFYW3rZiUttzfL\/wBFM4Q3VFEyWpe85nuc53NxLj5nVNucjggcdwKnU+ESO4fFWxhJ9ID2pclW5E0LTUuyxcdVd0mygFrhaY6abKHngjAmmcdwTsGFSOOgK9LGz7WncLJ+DDmjgtmPRccsy5NWr4Rk8Kwp4te60kNG6w9f7q3jp2BOdGOC0wxqHBVLJuIFPFaw81NN7WQyWunctxorijuwYDruCcNr7kDRp9fFFfsSseKpBEpU2SAuzIFiOe5Mm3NOXUcyWTIEhxpSPJSLk5mfQ1mA8UO\/j4XXLlelwZHLmh6AaqQ09q5cqZ9miHQTXc1VY7gMdQ0gtF+a5cqZRT4ZfCTXRkqHEavCnZbGal\/2z9pg5xO4e6dO7evSMDxyCrj6SB4cNzhucw\/he3e0\/QXLlwtdp4Qdo6WKblG2O1rdFAwetbG94ebAi\/iP7rly4rm4TUkbMcd8XFg4ntjFH9ljnnwaPM6+izVbt3O77AZGOwZnebtPRcuQlqckvP6GvHpcSXRRVmMzS\/5kjndhJt\/LuUIylcuVLV8s0xilwgblEyInglXIMYm02DyO4KLtHT9CGwt1leL6fcZuzHkTuHjySLls0WJZMqUjDqM8oppFfh+zrtLiwWko9lgLXSrl6jHpodnFnnn0aGiwFgG5W0NAxvBcuWhRS6KXNtWE2AX4KQyNcuTMric+yivcLrlyeCK8rCaeO\/yTl1y5R9jQ6GJSLp+2i5ciyQ8jRPkiLrBcuUrkKfFggowVy5BjxGpXpskLlyiBZ\/\/Z)","047ce1f8":"# Importing the data","f5dd037b":"# Feature Selection for the Model","3530d0ce":"Still a better score than the Decision Tree Classifier but worse than the XGboost","3a81064c":"well we got 73.5 percent accuracy using the neural network","38279eec":"## Trying out Random Forest Classifier","667bd2fc":"# First look at the data","e6b3e1da":"# Process the data and oversample it :)","09a090b2":"A company which is active in Big Data and Data Science wants to hire data scientists among people who successfully pass some courses which conduct by the company. Many people signup for their training. Company wants to know which of these candidates are really wants to work for the company after training or looking for a new employment because it helps to reduce the cost and time as well as the quality of training or planning the courses and categorization of candidates. Information related to demographics, education, experience are in hands from candidates signup and enrollment.\n\nSo this dataset designed to understand the factors that lead a person will work for the company , by model(s) that uses the current credentials\/demographics\/experience to predict the probability of a candidate to look for a new job or will work for the company.","73949439":"# Let's make a seperate data frame using these columns","5b2799d9":"## Let's try XGB classifier","4d836fb8":"# Box plot for City index"}}