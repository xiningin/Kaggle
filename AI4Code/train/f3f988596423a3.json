{"cell_type":{"eb4f1008":"code","32a2eaea":"code","dac14800":"code","9b1890d1":"code","6b2689a3":"code","7d9671c3":"code","5395590e":"code","93ac709e":"code","fbdddc73":"code","8d68b535":"code","70be23f1":"code","254942cf":"code","ffe33b95":"code","c6d9f7fe":"code","65f42a7a":"code","1c268eb1":"code","faa82c1e":"code","0cc3600b":"code","bf8f40d6":"code","4458ea5d":"code","b4714ccf":"code","36a1b26e":"code","56b725c4":"code","aff7d594":"code","05533767":"code","696a4a14":"code","ff74ea6a":"code","145771bc":"code","0911cb61":"code","d77076b2":"code","5a79530b":"code","4197f02e":"code","e01ee45f":"code","e61643aa":"code","c5bdd550":"code","88494136":"code","622d33f2":"code","044ff915":"code","84537bcd":"code","b59e9f28":"code","7e726cc2":"code","dae63743":"code","7419dd91":"code","ef5e843e":"code","05fde013":"code","e45d6af0":"code","7b9c63d8":"code","e5f0f308":"code","4a20a344":"markdown","ced0a2a1":"markdown","bad3c948":"markdown","924a8cdf":"markdown","5740da72":"markdown","c01ce0be":"markdown","63cfe95f":"markdown","cc1500c1":"markdown","73ad834b":"markdown","f2b90c92":"markdown","38f47efa":"markdown","a3592d67":"markdown","ed126e1c":"markdown","1cf4bb63":"markdown","fb438439":"markdown","569bb9c6":"markdown","3a5fa5fa":"markdown","e9e20243":"markdown","5cf2786e":"markdown","f7b8f4b8":"markdown"},"source":{"eb4f1008":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\npd.pandas.set_option('display.max_columns',None)","32a2eaea":"df=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf.head()","dac14800":"df.shape","9b1890d1":"df.columns","6b2689a3":"nullfeatures=[features for features in df.columns if df[features].isnull().sum()]\nfor feature in nullfeatures:\n    print(feature + ' has',df[feature].isnull().sum(),'missing values')","7d9671c3":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","5395590e":"for feature in nullfeatures:\n    data=df.copy()\n    # making a copy of original data so as to map missing values to 1 and other numerical values to 1 and visualize its affect on target\n    data[feature]=np.where(data[feature].isnull(),1,0)\n    data.groupby(feature)['SalePrice'].median().plot.bar(color=['red','green'])\n    plt.title(feature)\n    plt.show()","93ac709e":"num_features=[feature for feature in df.columns if df[feature].dtypes!='O']\nprint(len(num_features))\ndf[num_features].head()","fbdddc73":"num_features","8d68b535":"yr_feature=[feature for feature in num_features if 'Yr' in feature or 'Year' in feature]\nyr_feature","70be23f1":"df.groupby('YrSold')['SalePrice'].median().plot()\nplt.xlabel('Year Sold')\nplt.ylabel('Price')","254942cf":"# Discrete Variables in numerical variables\ndisc_features=[feature for feature in num_features if len(df[feature].unique())<25 and feature not in yr_feature]\ndisc_features","ffe33b95":"for feature in disc_features:\n    data=df.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar(color=['blue','green','red','orange','brown','grey','cyan','yellow','purple','black'])\n    plt.ylabel('SalePrice')\n    plt.xlabel(feature)\n    plt.title(feature)\n    plt.show()","c6d9f7fe":"# Continuous Features in numerical features\ncont_features=[feature for feature in num_features if feature not in disc_features+yr_feature+['Id']]\ncont_features","65f42a7a":"for feature in cont_features:\n    data=df.copy()\n    data[feature].hist(bins=25)\n    plt.xlabel(feature)\n    plt.ylabel('count')\n    plt.show()","1c268eb1":"# using logarithmic transformation\n\nfor feature in cont_features:\n    data=df.copy()\n    if 0 in data[feature].unique():           # bcoz log(0) is not defined\n        pass\n    else:\n        data[feature]=np.log(data[feature])\n        data['SalePrice']=np.log(data['SalePrice'])\n        plt.scatter(data[feature],data['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('SalesPrice')\n        plt.title(feature)\n        plt.show()","faa82c1e":"for feature in cont_features:\n    data=df.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature]=np.log(data[feature])\n        data.boxplot(column=feature)\n        plt.title(feature)\n        plt.show()","0cc3600b":"categ_features=[feature for feature in df.columns if df[feature].dtypes=='O']\ncateg_features","bf8f40d6":"df[categ_features].head()","4458ea5d":"for feature in categ_features:\n    print(f'{feature} has {len(df[feature].unique())} uniques values that are {df[feature].unique()}')","b4714ccf":"# Relationship b\/w categorical and dependent variable\nfor feature in categ_features:\n    data=df.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar(color=['blue','green','red','orange','brown','grey','cyan','yellow','purple','black'])\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","36a1b26e":"# Missing values in categorical variables\ncateg_null_features=[feature for feature in df.columns if df[feature].isnull().sum()>1 and df[feature].dtypes=='O']\nfor feature in categ_null_features:\n    print(f'{feature} has {df[feature].isnull().sum()} null features')","56b725c4":"# replacing categorical missing values\ndef replace_categ(df,categ_null_features):\n    data=df.copy()\n    data[categ_null_features]=data[categ_null_features].fillna('Missing')\n    return data\n\ndf=replace_categ(df,categ_null_features)\ndf[categ_null_features].isnull().sum()","aff7d594":"# Missing values in numerical variables\nnum_null_features=[feature for feature in df.columns if df[feature].isnull().sum()>1 and df[feature].dtypes!='O']\nfor feature in num_null_features:\n    print(f'{feature} has {df[feature].isnull().sum()} null values')","05533767":"# replacing numerical missing values\nfor feature in num_null_features:\n    median=df[feature].median()        # filling missing values with median to counter outliers\n    df[feature+'hasNan']=np.where(df[feature].isnull(),1,0)   # creating a new column indicating that this feature had missing value\n    df[feature].fillna(median,inplace=True)\ndf[num_null_features].isnull().sum()","696a4a14":"# Temporal Variables(Date Time Variables)\nfor feature in yr_feature:\n    df[feature]=df['YrSold']-df[feature]     # converting the year feature into number of years(numerical)","ff74ea6a":"df[yr_feature].head()","145771bc":"skew_features=['LotFrontage', 'LotArea', '1stFlrSF', 'GrLivArea', 'SalePrice']\nfor feature in skew_features:\n    df[feature]=np.log(df[feature])","0911cb61":"for feature in skew_features:\n    data=df.copy()\n    data['LotFrontage'].plot.hist(bins=25)\n    plt.xlabel('LotFrontage')\n    plt.ylabel('Count')","d77076b2":"df.head()","5a79530b":"for feature in categ_features:\n    temp=df.groupby(feature)['SalePrice'].count()\/len(df)\n    temp_df=temp[temp>0.01].index                   # replacing label that occurs less than 10% of total data\n    df[feature]=np.where(df[feature].isin(temp_df),df[feature],'Rare_var')","4197f02e":"df.head(10)","e01ee45f":"from sklearn.preprocessing import LabelEncoder\nfor feature in categ_features:\n    LE=LabelEncoder()\n    df[feature]=LE.fit_transform(df[feature])","e61643aa":"df.head(5)","c5bdd550":"scale_features=[feature for feature in df.columns if feature not in ['Id','SalePrice']]","88494136":"# using MinMax Scaler to set the values b\/w 0 and 1\nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\nscaler.fit(df[scale_features])","622d33f2":"scaler.transform(df[scale_features])","044ff915":"# transform the train and test set, and add on the Id and SalePrice variables\ndata = pd.concat([df[['Id','SalePrice']].reset_index(drop=True),pd.DataFrame(scaler.transform(df[scale_features]), columns=scale_features)],axis=1)","84537bcd":"data.head()","b59e9f28":"y_train=data[['SalePrice']]            # dependent variable","7e726cc2":"final_df=data.drop('SalePrice',axis=1)         # independent variables","dae63743":"from sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel","7419dd91":"# use SelectFromModel to get features whose coefficients would be non-zero after applying Lasso\nselect_feature_model=SelectFromModel(Lasso(alpha=0.005,random_state=0))\n# higher alpha means less features to be selected\nselect_feature_model.fit(final_df,y_train)","ef5e843e":"select_feature_model.get_support()","05fde013":"selected_features=final_df.columns[(select_feature_model.get_support())]","e45d6af0":"selected_features","7b9c63d8":"x_train=final_df[selected_features]","e5f0f308":"x_train.head()","4a20a344":"Now we have to check whether these null features have any affect on our target variable.","ced0a2a1":"### 2.4 Feature Scaling","bad3c948":"## 3. Feature Scaling","924a8cdf":"###  **Same operations can be done on test data and then appropriate machine learning model by comparing accuracies using cross validation can be applied** ","5740da72":"### 2.3 Handling Rare categorical lables","c01ce0be":"These numerical features also have 4 Year variables","63cfe95f":"### **1.2 Numerical Features**","cc1500c1":"Steps in Feature Engineering\n\n1. Missing values\n2. Temporal variables\n3. Categorical variables: remove rare labels\n4. Standarise the values of the variables to the same range (Feature Scaling)","73ad834b":"In Data Analysis we study\n1. Missing Values\n2. Numerical Variables and their distribution\n3. Outliers\n4. Categorical Variables and Cardinality of Categorical Variables\n5. Relationship between independent and dependent feature","f2b90c92":"### 1.3 Outliers Detection","38f47efa":"### **1.1 Missing Values**","a3592d67":"### **1.4 Categorical Variables**","ed126e1c":"### 2.1 Missing Values","1cf4bb63":"Now we can check whether there is a relation between the year variable and the SalePrice","fb438439":"# **Advance House Price Prediction Project**","569bb9c6":"## **2.Feature Engineering**","3a5fa5fa":"## **1. Data Analysis**","e9e20243":"#### **To remove skewness in numerical variables we will perform log normal distribution**","5cf2786e":"### 2.2 Temporal variables","f7b8f4b8":"### Encoding Categorical Variables"}}