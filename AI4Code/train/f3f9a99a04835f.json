{"cell_type":{"cc3f6e79":"code","d6c98ee2":"code","0d7ea986":"code","f4fda2e5":"code","936789e4":"code","d65b6dc3":"code","bad01d9c":"code","4b5bdf00":"code","015a45ae":"code","7a604394":"code","f315e5a4":"code","a822ebc6":"code","7ac888a2":"code","aabf9b33":"code","0e8f0865":"code","489699ba":"code","ef3023e9":"code","daee9d59":"code","87552915":"code","a32c3231":"code","43c2af38":"code","8d6e5080":"code","6a3e207a":"code","2bece9e2":"code","099a95f9":"code","d715d0b3":"code","df0adede":"code","b7db458d":"code","62baa171":"code","e255329d":"code","29bcb47c":"code","4926ab43":"code","45d17a03":"code","9fe574fd":"code","e6590ad8":"code","79091e71":"code","dbf1d332":"code","6b920e86":"code","6360edc0":"code","7c2cb529":"code","9961f931":"code","1f9f1cae":"code","558cd8b1":"code","325adb6b":"code","47dd9746":"code","37e6d792":"code","aa3422fa":"code","89b84689":"code","0153087c":"code","6afdfd29":"code","6eb80986":"code","243e86ef":"code","7a383f1b":"code","8d47b19c":"code","3eea7ccb":"code","d294f1af":"code","dc0726e5":"code","87bb7a8e":"code","c8194c06":"code","5a3e2d23":"code","46e442d2":"code","853dcee5":"code","61a7ae7c":"code","6b9fc551":"code","790773c4":"code","fe013f83":"markdown","ba961696":"markdown","05d2a809":"markdown","2c0c5c12":"markdown","182e9dc2":"markdown","f12411c2":"markdown","ce9fe179":"markdown","d6c71197":"markdown","18592068":"markdown","f2510928":"markdown","489cf615":"markdown","6be617be":"markdown","4b8845e4":"markdown","3120e36f":"markdown","914d34c2":"markdown","7e620001":"markdown","d9b7d69a":"markdown","66f6698a":"markdown","1aae46d7":"markdown","f8f959a0":"markdown","077f2784":"markdown","d2d05bf5":"markdown","6f369f89":"markdown","46855f36":"markdown","046d112d":"markdown","a689e7d1":"markdown","dde3afc6":"markdown","9b3fb4cb":"markdown","6993f8e7":"markdown","d76467fd":"markdown","c99220eb":"markdown","c1baba80":"markdown","32b2eed3":"markdown","737d3f67":"markdown","a4b663db":"markdown","30ee5cc9":"markdown","c027d933":"markdown","1cbe3b90":"markdown","e70feb8e":"markdown","378d3763":"markdown","59fe895f":"markdown","835344d7":"markdown","7728026b":"markdown","18627cb7":"markdown","ee9d7f09":"markdown","fd7cc709":"markdown","3f5d8adc":"markdown","c761b4b7":"markdown","da5d67f6":"markdown","5b59a84c":"markdown","8d947d63":"markdown","a6dc139e":"markdown","6de95dd5":"markdown","c56165c4":"markdown","78f637b6":"markdown","e8458388":"markdown"},"source":{"cc3f6e79":"! conda install -y gdown\nimport gdown\ngdown.download('https:\/\/drive.google.com\/uc?id=1eDhwxZxEnMoKcaR-ATW21ReuKdwpMdrF', 'airline-safety.csv', True);\ngdown.download('https:\/\/drive.google.com\/uc?id=14FYQvB05JqfU4d1Wn1LSv_Jh0om7AI0M', 'tips.csv', True);","d6c98ee2":"import numpy as np","0d7ea986":"a = np.array([12.50, 10.20, 25])","f4fda2e5":"a","936789e4":"b = np.array([\n    [19.50, 13, 12, 11 ],\n    [12.50, 10, 25, 14]])","d65b6dc3":"b","bad01d9c":"import numpy as np\nx = np.array([21, 24, 22, 23, 27])\ny = np.array([4, 5, 6, 7, 8])\nx - y","4b5bdf00":"b.shape","015a45ae":"np.linspace(0,100,6)","7a604394":"np.arange(0,10,3)","f315e5a4":"np.random.rand(4,5)","a822ebc6":"np.random.rand(4,5)*100","7ac888a2":"c = np.arange(0,10,3)","aabf9b33":"c.dtype","0e8f0865":"import numpy as np\nx.shape\nnp.linspace(15, 45, 5)\nnp.random.rand(3, 6)\n","489699ba":"x = np.array([3,4,5])","ef3023e9":"y = np.array([1,2,3])","daee9d59":"print(x + y)\nprint(x - y)\nprint(x * y)\nprint(x \/ y)\nprint(x**2)","87552915":"np.add(x,1)","a32c3231":"np.subtract(x,2)","43c2af38":"np.multiply(x,3)","8d6e5080":"np.divide(x,4)","6a3e207a":"np.power(x,5)","2bece9e2":"s = np.arange(12)*5 # note this is same as np.arange(0,12,1)*5\ns","099a95f9":"s[2]","d715d0b3":"s[2:5]","df0adede":"np.concatenate((s,a))","b7db458d":"z = np.arange(9.0)\nz","62baa171":"split_arr = np.split(z, 3)","e255329d":"split_arr","29bcb47c":"np.array(split_arr).shape","4926ab43":"oreo = np.arange(0,50,10)","45d17a03":"oreo[2]","9fe574fd":"milk = np.arange(0,75,15)","e6590ad8":"milk[0]","79091e71":"import pandas as pd","dbf1d332":"decades = pd.Series(np.array([10,20,30,40,50,60])) ","6b920e86":"decades","6360edc0":"import numpy as np\nimport pandas as pd\ngdp = np.array([264.50, 250.07, 248.84, 242.83])\ncountry = pd.Series(gdp, index =['Czech Republic', 'Iraq', 'Romania', 'Portugal'])\nprint(country)","7c2cb529":"animal_dict = {\n     'Animal' : [\"Hamster\", \"Alligator\", \"Hamster\",\"Cat\", \"Snake\", \"Cat\",\"Hamster\", \"Cat\", \"Cat\", \"Snake\", \"Hamster\", \"Hamster\", \"Cat\", \"Alligator\"],\n     'Age' : [1,9,4,13,14,10,2,4,14,7,14,2,1,7],\n     'Weight': [7,13,8,12,11,8,10,14,9,11,10,10,9,14], \n     'Length' : [8,6,9,1,8,9,5,6,6,6,5,3,4,5] \n}","9961f931":"animal = pd.DataFrame(animal_dict)\nanimal","1f9f1cae":"pd.unique(animal[\"Animal\"])","558cd8b1":"animal.describe(include=[np.number])","325adb6b":"animal[animal[\"Weight\"] > 10]","47dd9746":"animal[(animal[\"Length\"] > 4) & (animal[\"Length\"] < 8)] ","37e6d792":"animal_groups = animal.groupby(\"Animal\")\nanimal_groups['Weight'].mean()","aa3422fa":"import pandas as pd\nun_dict = {\n    'Area': [\"Northern Africa\", \"Sub-Saharan Africa\", \"Eastern Asia\", \"Western Europe\"],\n    'Population Rate of Increase': [1.7, 2.7, 0.6, 0.3],\n    'Fertility Rate': [3.2, 5.6, 1.5, 1.6],\n    'Infant Mortality': [39.3, 87.3, 23.2, 4.3]\n}","89b84689":"un = pd.DataFrame(un_dict)\nun","0153087c":"un[(un[\"Infant Mortality\"] > 29) & (un[\"Infant Mortality\"] < 51)]","6afdfd29":"un_groups = un.groupby(\"Area\")\nun_groups['Infant Mortality'].max()","6eb80986":"import matplotlib.pyplot as plt","243e86ef":"plt.plot([1,2,3,4],[1,4,9,16]) # plt.plot([x-coordinates], [y-coordinates])\nplt.show()","7a383f1b":"plt.plot([1,2,3,4],[1,4,9,16]) # plt.plot([x-coordinates], [y-coordinates])\nplt.title(\"First Plot\")\nplt.xlabel(\"X Label\")\nplt.ylabel(\"Y Label\")\nplt.show()","8d47b19c":"import numpy as np\nheight = np.array([167, 170, 149, 165, 155, 180, 166, 146, 159, 185, 145, 168, 172, 181, 169])\nweight = np.array([86,74,66,78,68,79,90,73,70,88,66,84, 67, 84, 77])\n\n#We can set the limit (lower, upper) for the x-axis and the y-axis using xlim and ylim, respectively.\nplt.xlim(140, 200)\nplt.ylim(60,100)\n#A scatterplot can be generated through .scatter(x,y)\nplt.scatter(height,weight)\nplt.title(\"Comparing Height vs. Weight\")\nplt.xlabel(\"Height\")\nplt.ylabel(\"Weight\")\nplt.show()","3eea7ccb":"import numpy as np\nlength = np.array([8,6,9,1,8,9,5,6,6,6,5,3,4,5])\nweight = np.array([7,13,8,12,11,8,10,14,9,11,10,10,9,14])\n\nplt.xlim(0,10)\nplt.ylim(5,15)\n\nplt.scatter(length,weight)\nplt.title(\"Weight v Length of Animals\")\nplt.xlabel(\"Length\")\nplt.ylabel(\"Weight\")\nplt.show()","d294f1af":"import seaborn as sns","dc0726e5":"# Run this code to import the data and read it in using 'pd.read_csv('file')'\ntips = pd.read_csv('tips.csv')\nax = sns.scatterplot(x=\"total_bill\", y=\"tip\", data=tips) #plotting it","87bb7a8e":"sns.catplot(x=\"day\", y=\"total_bill\", data=tips);","c8194c06":"sns.catplot(x=\"total_bill\", y=\"day\", hue=\"time\", kind=\"swarm\", data=tips);","5a3e2d23":"ax = sns.scatterplot(x=\"size\", y=\"tip\", data=tips)","46e442d2":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.datasets import load_boston\ndata = load_boston()","853dcee5":"# Print the description of the dataset (first 1500 characters)\nprint(data.DESCR[:1400])","61a7ae7c":"# data.data are all the houses with their attributes.\n# data.target are the corresponding house prices\n \nprint(\"House 1, attributes: \", data.data[0])\n\n# Show the actual price for these 2 houses\nprint(\"House 1, price: \", data.target[0])","6b9fc551":"X_train, X_test, y_train, y_test = train_test_split(data.data, data.target)\nclf = LinearRegression()\nclf.fit(X_train, y_train)\npredicted = clf.predict(X_test)\nexpected = y_test","790773c4":"plt.figure(figsize=(4, 3))\nplt.scatter(expected, predicted)\nplt.plot([0, 50], [0, 50], '--k')\nplt.axis('tight')\nplt.xlabel('True price ($1000s)')\nplt.ylabel('Predicted price ($1000s)')\nplt.tight_layout()","fe013f83":"### Creating a Pandas Series","ba961696":"Creating a simple scatterplot comparing size of tip vs. size of table:","05d2a809":"Notice how the numbers when you call the random function are different the second time. This is because it generates new numbers each time.","2c0c5c12":"# NumPy: An Introduction  \ud83e\udd16","182e9dc2":"## Plot \ud83d\udcca","f12411c2":"The scatterplot above does not discriminate between the days of the week. What if we wanted to see the distribution of the data for each day? \n<br> \nFor this, we can consider using a categorical scatterplot with the **.catplot()** method. ","ce9fe179":"# Scikit-Learn: A Small Preview","d6c71197":"## Operations ","18592068":"A **Series** is similar to an one dimensional array and can store data of any type. The values of a Pandas Series are mutable but the size of a Series is immutable and cannot be changed.<br>\nThe first element in the series is assigned the index 0, while the last element is at index N-1, where N is the total number of elements in the series.","f2510928":"## Import \ud83d\udce6 ","489cf615":"The [**.shape**] method for nparray returns the dimensions of the given array. For example, [x].shape returns the (vertical, horizontal) dimensions of the variable x. We can use .shape to find the dimensions of the multi-dimensional array that we've created above:","6be617be":"Now, let's turn our Python dictionary into a DataFrame:","4b8845e4":"We can use the [**.split()**](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.concatenate.html) method to split the s array in sub-arrays:","3120e36f":"Now, we can add titles, and labels:","914d34c2":"### What is this data?","7e620001":"**Note**: The values of an array always start with x[0]. We can also retrieve values within an certain range using the **:** symbol:","d9b7d69a":"# Matplotlib","66f6698a":"### Pyplot","1aae46d7":"## Train and Define \ud83d\ude82 ","f8f959a0":"## Exercise: Indexing, Slicing and Reshaping","077f2784":"We turned a dictionary into a dataframe! Can you tell which parts of the dictionary became the headers and what became the values?","d2d05bf5":"# Introduction to NumPy, Pandas, Matplotlib and Seaborn, and Sci-Kit Learn ","6f369f89":"**Scikit-learn** is a free software machine learning library for the Python programming language. It features various classification, regression and clustering algorithms including support vector machines, random forests, gradient boosting, k-means and DBSCAN, and is designed to interoperate with the Python numerical and scientific libraries NumPy and SciPy. Official website: https:\/\/scikit-learn.org\/ <br> ","46855f36":"Another commonly used graph in Machine Learning is the Scatter Plot. Let's create a basic scatterplot in MathPlotLib comparing the distribution of height vs. weight: ","046d112d":"## [Pandas Series](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.html) \u2744\ufe0f","a689e7d1":"The Groupby method involves grouping data around a particular category and applying analysis. This would be useful if you were interested in answering the question, \"What's the average weight of all the snakes, cats, hamsters, and alligators?\" To find the average weight of each category of animal, we'll group the animals by animal type and then apply the mean function. We could apply other functions too. We could apply \"sum\" to add up all the weights, \"min\" to find the lowest, \"max\" to get the highest, or \"count\" just to get a count of each animal type:","dde3afc6":"Numpy is the core library for scientific computing in Python. Numpy provides the flexibility to create multidimensional array objects (arrays within arrays) and compute a wide variety of mathematical operations including basic linear algebra, basic statistical operations, random simulation and much more. We will represent all of our data which will be fed into our machine learning models using Numpy.","9b3fb4cb":"We're going to define our X-axis and Y-axis and fit the model to a Linear Regression model.","6993f8e7":"### This notebook is designed for beginners to introduce them to some important python libraries and get started on Kaggle!\n\n### Do Upvote if you find this helpful or interesting!","d76467fd":"We can go even further! How about we try sorting the time of the day that the customer dined at the restaraunt? Let's use the swarm parameter to prevent the points from overlapping and group by time:","c99220eb":"The [**.linspace**](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.linspace.html) method is used to return evenly spaced numbers over a specified interval. Let's create an array of 6 integers between 0 and 100 to demonstrate this method: ","c1baba80":"The DataFrame is similar to a table. It organizes data into rows and columns as an two-dimensional data structure. The columns can be of different types, and the size of a DataFrame is modifiable. <br>\nLet's create a DataFrame of 14 animals, populated with age, weight, and length. <br> First, let's create a Python dictionary. ","32b2eed3":"Pyplot is a module of Matplotlib which provides simple functions to add plot elements like lines, images, text, etc. to the current axes in the current figure.","737d3f67":"We can view the contents of the array by running the following code:","a4b663db":"# Seaborn: A small introduction \ud83c\udf0a ","30ee5cc9":"We can create a series by invoking the pd.Series( ) method, like this: ","c027d933":"### Pandas Methods \ud83d\udc22","1cbe3b90":"Let's now look at the [**describe()**](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.describe.html)  method. This method returns the summary statistics of numerical columns. To return the numerical statistics, we write:","e70feb8e":"\ud83d\ude0e Now, let's try combining two arrays using [**concatenate( )**](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.concatenate.html) and add 'a' as rows to the end of 's':","378d3763":"Mathplotlib is a Python 2D plotting library which produces  plots, histograms, power spectra, bar charts, errorcharts, scatterplots, etc. with just a few lines of code. Source: [Matplotlib](https:\/\/matplotlib.org). <br> ","59fe895f":"If we want to increase the size of the floats between an certain interval (0-100), we can simply multiply by the highest digit in that interval: ","835344d7":"# Pandas: An Introduction \ud83d\udc3c ","7728026b":"Let's import a csv file - comma-seperated values - that details the total bill costs and the tips. We'll run a scatterplot on this data:","18627cb7":"To reiterate, the *hue* parameter allows us to add another dimension to group data by color. The *Swarm* parameter helps us to visualize the data more clearly by preventing overlapping points (as opposed to catplot where points with the same data values will lie on top of each other).","ee9d7f09":"## [Pandas DataFrame](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.html) \ud83d\udc28","fd7cc709":"Pandas is an open source Python package that provides numerous tools for data analysis. Pandas provides <\/br> fast, flexible, and expressive data structures designed to make working with structured (tabular, multidimensional, potentially heterogeneous) and time series data both easy and intuitive. It aims to be the fundamental high-level building block for doing practical, real world data analysis in Python. \n\nWe'll take look at some of the core ideas in Pandas here. You can learn more about Pandas in their official [documentation](http:\/\/pandas.pydata.org).","3f5d8adc":"The [**.dtype**](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/arrays.dtypes.html)  method outputs the type of elements in an given array:","c761b4b7":"## Indexing, Slicing and Reshaping \ud83d\udd2d","da5d67f6":"Let's now create an multi-dimensional array. ","5b59a84c":"NumPy offers the ability to compute arrays together. ","8d947d63":"The [**.arange**](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.linspace.html) method allows us to return evenly spaced values within an given interval. ","a6dc139e":"**Indexing** refers to retrieving a specific element of an array. Let's find the 3rd value in the above array:","6de95dd5":"Now, we're going to explore some of the functions in Python. First, let's create an array with 12 numbers using the **arange** method in increments of 5:","c56165c4":"### Arrays \ud83d\ude96","78f637b6":"The [**.random.rand**](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.random.rand.html) method accomplishes this purpose by creating an array of a specified shape and fills it with random values. Let's create a 4 x 5 array of random floats between 0-1:","e8458388":"An **array** is simply a collection of items. At the heart of a Numpy library is the array object or the ndarray object (n-dimensional array).  Simply put, it is a table of elements (usually numbers and the same type) indexed by a tuple of positive integers. In NumPy dimensions are called **axes**. The number of axes is referred to as **rank**. \n<br\/>"}}