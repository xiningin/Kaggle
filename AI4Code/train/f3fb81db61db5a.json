{"cell_type":{"2592d87d":"code","55ae975e":"code","250b0a2b":"code","2c5b6a45":"code","ee799be9":"code","2652f6b3":"code","e6768153":"code","5082b7a1":"code","04235574":"code","639a5cc6":"code","66a440ab":"code","cf3eb7e1":"code","8d46aee2":"code","284e3c83":"code","707ccb3d":"code","3a1cbddb":"code","37bac404":"markdown","c1c46f50":"markdown","60851c6e":"markdown","f3581e07":"markdown","2b65f9a3":"markdown","446ed6a0":"markdown"},"source":{"2592d87d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","55ae975e":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.cluster import KMeans\nfrom sklearn.model_selection import KFold, GridSearchCV\nfrom sklearn.preprocessing import MinMaxScaler\nimport plotly.express as px","250b0a2b":"data=pd.read_csv(\"\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv\")\ndf=pd.DataFrame(data)\ndf.head()\ndf.drop('CustomerID',inplace=True,axis=1)\ndf.head()","2c5b6a45":"df.isnull().sum()","ee799be9":"plt.rcParams['figure.figsize'] = (28, 10)\nsns.set(style = 'whitegrid')\nsns.countplot(df['Spending Score (1-100)'],hue=df['Gender'])","2652f6b3":"import warnings\nwarnings.filterwarnings('ignore')\n\nplt.rcParams['figure.figsize'] = (18, 8)\n\nplt.subplot(1, 2, 1)\nplt.hist(df['Age'],bins=5)\nplt.title('Distribution of Age', fontsize = 20)\nplt.xlabel('Range of Age')\nplt.ylabel('Count')\n\n\nplt.subplot(1, 2, 2)\nsns.set(style = 'whitegrid')\nsns.distplot(df['Age'], color = 'red')\nplt.title('Distribution of Age', fontsize = 20)\nplt.xlabel('Range of Age')\nplt.ylabel('Count')\nplt.show()","e6768153":"\nsns.set(style = 'whitegrid')\nsns.distplot(df['Annual Income (k$)'], color = 'red')\nplt.title('Distribution of Income', fontsize = 20)\nplt.xlabel('Range of income')\nplt.ylabel('Count')\nplt.show()","5082b7a1":"fig = px.scatter(df,x='Annual Income (k$)',y='Spending Score (1-100)',color='Gender')\nfig.show()","04235574":"plt.rcParams['figure.figsize'] = (28, 10)\nsns.set(style = 'whitegrid')\nsns.countplot(df['Spending Score (1-100)'], color = 'red')\nplt.title('Distribution of Income', fontsize = 10)\nplt.xlabel('Range of income')\nplt.ylabel('Count')\nplt.show()","639a5cc6":"m=df[df['Gender']=='Male']\nprint(m['Spending Score (1-100)'].mean())\nm=df[df['Gender']=='Female']\nprint(m['Spending Score (1-100)'].mean())","66a440ab":"df.drop('Gender',inplace=True,axis=1)","cf3eb7e1":"from plotly.subplots import make_subplots\nl=[]\nm=[]\nn=range(1,11)\nrow=0\ncol=0\nfig = make_subplots(rows=2, cols=2)\nfor i in n:\n    \n    clf = KMeans(n_clusters=i)\n    clf.fit(df)\n    if(i<6):\n        y_means = clf.predict(df)\n        y_means=pd.DataFrame({'output':y_means})\n        data=pd.concat([df,y_means],axis=1)\n        plt.rcParams['figure.figsize'] = (28, 10)\n        sns.set(style = 'whitegrid')\n        \n        fig = px.scatter_3d(data,x='Age', y='Annual Income (k$)', z='Spending Score (1-100)',title='cluster'+str(i),\n                            \n                    color='output',width=1200, height=800)\n       \n        if(i%2==0):\n            col+=1\n        else:\n            row+=1\n        m.append(fig)\n    l.append(clf.inertia_)\n\n","8d46aee2":"from plotly.subplots import make_subplots\nfor i in m:\n    i.show()","284e3c83":"plt.rcParams['figure.figsize'] = (10, 8)\nplt.plot(n,l)\n","707ccb3d":"clf=KMeans(n_clusters=5)\nclf.fit(df)\ny_means=clf.predict(df)\ny_means=pd.DataFrame({'output':y_means})\ndata=pd.concat([df,y_means],axis=1)\n\nfig = px.scatter_3d(data,x='Age', y='Annual Income (k$)', z='Spending Score (1-100)',color='output',width=1200, height=800)\nfig.show()","3a1cbddb":"clf.cluster_centers_\n","37bac404":"# visualization and selection ","c1c46f50":"plt.scatter(df['","60851c6e":"# ****since here from 20 to 50 ages groups have high count. so this  effect the clusters majorly\n ","f3581e07":"# average of male and female values of points are equal so it is not effectively effects the clustering points so we remove this column****","2b65f9a3":"# ****here morely between (20,40) and (65,100) k income spending more and less score points. but (40,60) all avg income spending (40-60) scoring points ****","446ed6a0":"****"}}