{"cell_type":{"d0dd7b0a":"code","57321955":"code","4ca6c889":"code","5fe5788c":"code","5240c4d4":"code","8fac5cc4":"code","7576be5a":"code","281170ef":"code","fae348bf":"code","fa78a1e8":"code","e96661ca":"code","a27ec512":"code","9e087f94":"code","aee95881":"code","094fb843":"code","d077359b":"code","b7a03e9e":"code","43c0ae75":"code","202b6d6a":"code","de646ad6":"code","52c7a533":"code","3c4a72f7":"markdown","af9c1ede":"markdown","f7e2baec":"markdown","9f6a6ca4":"markdown","6db8871f":"markdown","3a90cffd":"markdown","cdee0126":"markdown"},"source":{"d0dd7b0a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","57321955":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n\n%matplotlib inline\n\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999","4ca6c889":"train_variants_df = pd.read_csv(\"..\/input\/training_variants\")\ntest_variants_df = pd.read_csv(\"..\/input\/test_variants\")\ntrain_text_df = pd.read_csv(\"..\/input\/training_text\", sep=\"\\|\\|\", engine='python', header=None, skiprows=1, names=[\"ID\",\"Text\"])\ntest_text_df = pd.read_csv(\"..\/input\/test_text\", sep=\"\\|\\|\", engine='python', header=None, skiprows=1, names=[\"ID\",\"Text\"])","5fe5788c":"gene_group = train_variants_df.groupby(\"Gene\")['Gene'].count()\nminimal_occ_genes = gene_group.sort_values(ascending=True)[:10]\nprint(\"Genes with maximal occurences\\n\", gene_group.sort_values(ascending=False)[:10])\nprint(\"\\nGenes with minimal occurences\\n\", minimal_occ_genes)","5240c4d4":"plt.figure(figsize=(15,5))\nsns.countplot(train_variants_df.Class,data = train_variants_df)","8fac5cc4":"#Merge dataframe by ID number key\ntrain_df = pd.merge(train_text_df,train_variants_df,left_on=\"ID\", right_on=\"ID\")\nprint(train_df.shape)\ntrain_df.head(3)\n\ntest_df = pd.merge(test_text_df,test_variants_df,left_on=\"ID\", right_on=\"ID\")\nprint(test_df.shape)\ntest_df.head(3)","7576be5a":"#This is multi class classification problem and number of classes are total 9. \n#we have to predicat the classes probabalitie for particular Id\ntrain_df.dropna(inplace=True)\ntest_df.dropna(inplace=True)","281170ef":"#TFIDF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ntfidf_vectorizer = TfidfVectorizer(\n    min_df=5, max_features=16000, strip_accents='unicode', lowercase=True,\n    analyzer='word', token_pattern=r'\\w+', ngram_range=(1, 3), use_idf=True, \n    smooth_idf=True, sublinear_tf=True, stop_words = 'english'\n)","fae348bf":"tfidf_vectorizer.fit(train_df['Text'])","fa78a1e8":"\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import svm\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import log_loss, accuracy_score","e96661ca":"X_train_tfidfmatrix = tfidf_vectorizer.transform(train_df['Text'].values)\nX_test_tfidfmatrix = tfidf_vectorizer.transform(test_df['Text'].values)\ny_train = train_df['Class'].values","a27ec512":"def evaluate(X, y, clf=None):\n    probas = cross_val_predict(clf, X, y, cv=StratifiedKFold(n_splits=5, random_state=8), \n                              n_jobs=-1, method='predict_proba', verbose=2)\n    pred_indices = np.argmax(probas, axis=1)\n    classes = np.unique(y)\n    preds = classes[pred_indices]\n    print('Log loss: {}'.format(log_loss(y, probas)))\n    print('Accuracy: {}'.format(accuracy_score(y, preds)))","9e087f94":"#evaluation\nevaluate(X_train_tfidfmatrix, y_train, clf=XGBClassifier())","aee95881":"#training\nclf = XGBClassifier()\nclf.fit(X_train_tfidfmatrix, y_train)\n","094fb843":"import xgboost\nxgboost.to_graphviz(clf, num_trees=9)","d077359b":"#test\ny_test_predicted = clf.predict_proba(X_test_tfidfmatrix)","b7a03e9e":"submission_df = pd.DataFrame(y_test_predicted, columns=['class' + str(c + 1) for c in range(9)])\nsubmission_df['ID'] = test_df['ID'].values","43c0ae75":"submission_df.head()\nsubmission_df.columns","202b6d6a":"submission_df = submission_df[['ID','class1', 'class2', 'class3', 'class4', 'class5', 'class6', 'class7',\n       'class8', 'class9']]\nsubmission_df.head()","de646ad6":"submission_df[\"ID\"] = pd.to_numeric(submission_df[\"ID\"], errors='coerce')","52c7a533":"submission_df.to_csv('cancer_treatment3.csv', index=False)","3c4a72f7":"\n<h1>REMOVE NA VALUES<\/h1>","af9c1ede":"\n<h1>TRAINING MODEL<\/h1>","f7e2baec":"\n<h1>IMPORT LIBRARIES<\/h1>","9f6a6ca4":"\n<h1>TEST MODEL<\/h1>","6db8871f":"\n<h1>MERGE DATAFRAME<\/h1>","3a90cffd":"\n<h1>MODEL EVALUATION<\/h1>\n","cdee0126":"\n<h1>KAGGLE SUBMISSION<\/h1>"}}