{"cell_type":{"6f2ef17b":"code","19b111a7":"code","6609fdd8":"code","a24fcee2":"code","cd918a5a":"code","90bc1a1b":"code","eb00ca85":"code","2ff9500d":"code","e5ae7168":"code","0cd4308a":"code","cacd9926":"code","0e1080ce":"code","05f3acd7":"markdown","0d87aa88":"markdown","ad50e0d7":"markdown","b630c344":"markdown","728c2d1d":"markdown","576bc8e1":"markdown","e2d5ce1f":"markdown","8ec4eae0":"markdown","ce7ff720":"markdown","ccec6376":"markdown"},"source":{"6f2ef17b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","19b111a7":"import numpy as np\nimport matplotlib.pyplot as plt \nimport cv2","6609fdd8":"def drawImg(img,title=\"Image\"):\n    plt.imshow(img,cmap=\"gray\")  \n    plt.axis(\"off\")   #\n    plt.style.use(\"seaborn\")\n    plt.title(title+str(img.shape))\n    plt.show()\n    ","a24fcee2":"img_=cv2.imread('\/kaggle\/input\/image-cnnbasic\/shaktiman.jpg')   #bgr\nimg_=cv2.cvtColor(img_,cv2.COLOR_BGR2RGB)   #for conversion\n#plt.imshow(img_)\n#img_=cv2.resize(img_,(100,100))         #for easy computatipn\nimg_gray = cv2.cvtColor(img_,cv2.COLOR_BGR2GRAY)\ndrawImg(img_)\ndrawImg(img_gray)","cd918a5a":"def convolution(img,img_filter):\n    W=img.shape[0]\n    H=img.shape[1]\n    F=img_filter.shape[0]  #3\n    new_img=np.zeros((W-F+1,H-F+1))\n    \n    for row in range(W-F+1):\n        for col in range(H-F+1):\n            for i in range(F):\n                for j in range(F):\n                    new_img[row][col]+=img[row+i][col+j]*img_filter[i][j]\n                    \n                if new_img[row][col]>255:\n                    new_img[row][col]=255\n                elif new_img[row][col]<0:\n                    new_img[row][col]=0\n                    \n    return new_img  #activation map\n                    ","90bc1a1b":"blur_filter =np.ones((3,3))\/9.0\n\n# print(blur_filter)\noutput1=convolution(img_gray,blur_filter)","eb00ca85":"drawImg(img_gray)\ndrawImg(output1)","2ff9500d":"edge_filter= np.array([[1,0,-1],\n                       [1,0,-1],\n                       [1,0,-1]])\noutput2=convolution(img_gray,edge_filter)\ndrawImg(img_gray)\ndrawImg(output2)","e5ae7168":"print(img_.shape)\ndrawImg(img_)","0cd4308a":"#Pad using numpy \n\npad_img=np.pad(img_,((20,10),(10,20),(0,0)),'constant',constant_values=0)\ndrawImg(pad_img)","cacd9926":"X=np.array([[1,0,2,3],\n            [4,6,6,8],\n            [3,1,1,0],\n            [1,2,2,4]])\n\ndef pooling(X,mode=\"max\"):\n    stride=2\n    f=2\n    H,W =X.shape\n    \n    HO=int((H-f)\/stride)+1\n    WO=int((W-f)\/stride)+1\n    \n    output=np.zeros((HO,WO))\n    \n    for r in range(HO):\n        for c in range(WO):\n            r_start=r*stride\n            r_end=r_start+f\n            c_start=c*stride\n            c_end=c_start+f\n            \n            X_slice= X[r_start:r_end,c_start:c_end]\n            \n            \n            if mode==\"max\":\n                \n                output[r][c]=np.max(X_slice)\n            else:\n                output[r][c]=np.mean(X_slice)\n                \n    return output\n            \n            \n    ","0e1080ce":"pooling_output=pooling(X)\nprint(pooling_output)","05f3acd7":"# CONVOLUTION \n- convolution is performed on the input data with the use of a filter to then produce a feature map.","0d87aa88":"-It is one of the Regularization techniques. \n\n-Idea is to randomly drop some neurons while making predictions.(in every layer)\n\n-This technique can be used with MLP as well as CNN.\n\n-Drop means , a neuron is not going to pass the output to next layer.\n\n-So, while training different types of neural networks models & our final result is kind of an average of all of them.\n\n-Dropout makes sure that every neurons contains some useful information .","ad50e0d7":"# Pooling Layers\n\n-Performed after Convolution.\n\n-2 types of pooling layers - Avg and Max Pooling Layers\n\n-(1) Max Pooling Layer : Slides an (f,f) window over the input and stores the max value of the window in output.\n\n-(2) Avg Pooling Layer : Slides an (f,f) window over the input and stores the average value of the window in output.\n\n-It helps to reduce computation by discarding 75% of neurons\n\n-Makes feature detectors more robust .\n\n-No parameters for learning , only hyperparameters such as filter size & type of pooling .","b630c344":"# DROPOUT","728c2d1d":"# Why another Type of MLP ?\n\nProblems with MLPs:\n- Overfitting ( due to many parameters )\n- Fail to handle variance in images ( translation , rotation , illumination etc) ","576bc8e1":"# CONVOLUTIONAL NEURAL NETWORKS (CNN's)\n\n\n- Powerful deep networks that are widely used in image related taska like - Image recognition ,segmentation ,Computer Vision etc\n- Input to these layers are images","e2d5ce1f":"\n# Convolution layer \n\n-Conv Layer is made up of filters \n\n-When the feature is present in a part of an image , the convolution operation between the filter and that part of the image \nresults in a real numbeer with a high value. If not present , the resulting value is low .\n\n-Multiple activation maps are combined by stacking to form output volume.\n\n-So, CNN layer takes input volume and produces output volume of different shape.","8ec4eae0":"# PADDING\n\nTo maintain the dimension of output as in input , we use padding. \n\nPadding is a process of adding zeros to the input matrix symmetrically.","ce7ff720":"# General CNN Architechture \n\n# [Conv Layers -> ReLu -> Pooling ] ->FC-> Softmax","ccec6376":"# STRIDE\n\n-Filters can have different size as well as movement\n\n-Stride defines how a filter should move across the image.\n\n-No. of pixels we skip each time is called stride"}}