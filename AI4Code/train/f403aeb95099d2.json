{"cell_type":{"54579145":"code","a556cc25":"code","2ccf81de":"code","6223ed86":"code","0f675a49":"code","8ecd15cc":"code","79fb6f4c":"code","be2d377e":"code","7a536683":"markdown"},"source":{"54579145":"import os\nimport torch\nimport random\nimport numpy as np\nimport pandas as pd\nimport torch.nn as nn\nfrom numba import njit\nimport pytorch_lightning as pl\nimport torch.nn.functional as F\nfrom sklearn.utils import indexable\nfrom typing import Iterable, Tuple, List\nfrom sklearn.metrics import roc_auc_score\nfrom torch.nn.modules.loss import _WeightedLoss\nfrom torch.utils.data import DataLoader, Dataset\nfrom sklearn.utils.validation import _deprecate_positional_args\nfrom sklearn.model_selection._split import _BaseKFold, _num_samples","a556cc25":"PATH        = '..\/input\/jane-street-market-prediction\/'\nOUT_PATH    = '.\/'\nEXP_NAME    = 'EXP001'\nSEED        = 42\nFOLD        = 0\nBS          = 2048\nEPOCHS      = 5\nLR          = 1e-3\nWD          = 1e-5\nLAB_SMOOTH  = 1e-2\nN_WORKERS   = 4\nTRESH       = .5","2ccf81de":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    \n@njit\ndef fillna_npwhere_njit(array, values):\n    # https:\/\/www.kaggle.com\/c\/jane-street-market-prediction\/discussion\/201302\n    if np.isnan(array.sum()):\n        array = np.where(np.isnan(array), values, array)\n    return array\n\nclass PurgedGroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Allows for a gap in groups to avoid potentially leaking info from\n    train into test if the model has windowed or lag features.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_group_size : int, default=Inf\n        Maximum group size for a single training set.\n    group_gap : int, default=None\n        Gap between train and test\n    max_test_group_size : int, default=Inf\n        We discard this number of groups from the end of each train split\n    \"\"\"\n\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_group_size=np.inf,\n                 max_test_group_size=np.inf,\n                 group_gap=None,\n                 verbose=False\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_group_size = max_train_group_size\n        self.group_gap = group_gap\n        self.max_test_group_size = max_test_group_size\n        self.verbose = verbose\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        group_gap = self.group_gap\n        max_test_group_size = self.max_test_group_size\n        max_train_group_size = self.max_train_group_size\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n\n        group_test_size = min(n_groups \/\/ n_folds, max_test_group_size)\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n\n            group_st = max(0, group_test_start - group_gap - max_train_group_size)\n            for train_group_idx in unique_groups[group_st:(group_test_start - group_gap)]:\n                train_array_tmp = group_dict[train_group_idx]\n                \n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n\n            train_end = train_array.size\n \n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n\n            test_array  = test_array[group_gap:]\n            \n            \n            if self.verbose > 0:\n                    pass\n                    \n            yield [int(i) for i in train_array], [int(i) for i in test_array]\n    \nclass LinBnDrop(nn.Sequential):\n    # https:\/\/github.com\/fastai\/fastai\/blob\/master\/fastai\/layers.py#L166\n    \"Module grouping `BatchNorm1d`, `Dropout` and `Linear` layers\"\n    def __init__(self, n_in, n_out, bn=True, do=0., act=None, lin_first=False):\n        layers = [nn.BatchNorm1d(n_out if lin_first else n_in)] if bn else []\n        if do != 0: layers.append(nn.Dropout(do))\n        lin = [nn.Linear(n_in, n_out, bias=not bn)]\n        if act is not None: lin.append(act)\n        layers = lin+layers if lin_first else layers+lin\n        super().__init__(*layers)\n        \nclass MLP(nn.Module):\n    def __init__(self, num_feats, num_classes, h_units=[160, 160, 160], dropout=[.2, .2, .2, .2]):\n        super(MLP, self).__init__()\n        self.num_feats   = num_feats\n        self.num_classes = num_classes\n        self.h_units     = h_units\n        self.dropout     = dropout\n\n        n_in  = [num_feats] + h_units\n        n_out = h_units + [num_classes]\n        acts  = [nn.ReLU()] * len(h_units) + [nn.Sigmoid()]\n        self.model = nn.Sequential(\n            *[LinBnDrop(n_in[i], n_out[i], bn=True, do=dropout[i], act=acts[i]) for i in range(len(n_in))]\n        )\n\n    def forward(self, x):\n        x = self.model(x)\n        return x\n    \ndef utility_score_bincount(date, weight, resp, action):\n    # https:\/\/www.kaggle.com\/c\/jane-street-market-prediction\/discussion\/201257\n    count_i = len(np.unique(date))\n    Pi = np.bincount(date, weight * resp * action)\n    t = np.sum(Pi) \/ np.sqrt(np.sum(Pi ** 2)) * np.sqrt(250 \/ count_i)\n    u = np.clip(t, 0, 6) * np.sum(Pi)\n    return u\n\nclass SmoothBCEwLogits(_WeightedLoss):\n    def __init__(self, weight=None, reduction='mean', smoothing=0.0):\n        super().__init__(weight=weight, reduction=reduction)\n        self.smoothing = smoothing\n        self.weight    = weight\n        self.reduction = reduction\n\n    @staticmethod\n    def _smooth(targets:torch.Tensor, n_labels:int, smoothing=0.0):\n        assert 0 <= smoothing < 1\n        with torch.no_grad():\n            targets = targets * (1.0 - smoothing) + 0.5 * smoothing\n        return targets\n\n    def forward(self, inputs, targets):\n        targets = SmoothBCEwLogits._smooth(targets, inputs.size(-1),\n            self.smoothing)\n        loss = F.binary_cross_entropy_with_logits(inputs, targets,self.weight)\n\n        if  self.reduction == 'sum':\n            loss = loss.sum()\n        elif  self.reduction == 'mean':\n            loss = loss.mean()\n\n        return loss","6223ed86":"seed_everything(SEED)\n\ndf = pd.read_csv(f'{PATH}\/train.csv')\n\n# JS seems to have modified the trading model around day 85\n# https:\/\/www.kaggle.com\/c\/jane-street-market-prediction\/discussion\/201930\ndf = df.loc[df.date > 85].reset_index(drop=True)\n\n# The samples with weight==0 have the highest return variance. Hence, the samples are not drawn from an identical distribution.\n# https:\/\/www.kaggle.com\/c\/jane-street-market-prediction\/discussion\/201085\ndf = df.loc[df.weight != 0].reset_index(drop=True)\n\n# Feature Engineering\ndf['cross_41_42_43'] = df['feature_41'] + df['feature_42'] + df['feature_43']\ndf['cross_1_2']      = df['feature_1'] \/ (df['feature_2'] + 1e-5)\n\n# Create action column per resp\ndf['action']   = (df['resp'  ] > 0).astype('int')\ndf['action_1'] = (df['resp_1'] > 0).astype('int')\ndf['action_2'] = (df['resp_2'] > 0).astype('int')\ndf['action_3'] = (df['resp_3'] > 0).astype('int')\ndf['action_4'] = (df['resp_4'] > 0).astype('int')\n\n# https:\/\/www.kaggle.com\/marketneutral\/purged-time-series-cv-xgboost-optuna#Time-Series-Cross-Validation\nspliter = PurgedGroupTimeSeriesSplit(n_splits=5, max_train_group_size=7, group_gap=2, max_test_group_size=3)\nfor fold, (train_idx, valid_idx) in enumerate(spliter.split(X=df.index.values, y=None, groups=df.date.values)):\n    np.save(f'{OUT_PATH}fold{fold}_train.npy', train_idx)\n    np.save(f'{OUT_PATH}fold{fold}_valid.npy', valid_idx)\n    \ntrain_df = df.iloc[np.load(f'{OUT_PATH}fold{FOLD}_train.npy')].copy()\nvalid_df = df.iloc[np.load(f'{OUT_PATH}fold{FOLD}_valid.npy')].copy()\n    \n# Compute feature means to fill nans with\nfeatures = pd.read_csv(f'{PATH}\/features.csv').feature.values.tolist() + ['cross_41_42_43', 'cross_1_2']\nf_mean   = df[features].mean().values\nnp.save(f'{OUT_PATH}\/f_mean.npy', f_mean)\n\ndel df\n\nfeatures = pd.read_csv(f'{PATH}\/features.csv').feature.values.tolist() + ['cross_41_42_43', 'cross_1_2']\ntargets  = ['action', 'action_1', 'action_2', 'action_3', 'action_4']\nf_mean   = np.load(f'{OUT_PATH}\/f_mean.npy')","0f675a49":"class JSMPDataset(Dataset):\n    def __init__(self, df, feats, targets, f_mean, extra_feats=[]):\n        self.df          = df\n        self.feats       = feats\n        self.targets     = targets\n        self.f_mean      = f_mean\n        self.extra_feats = extra_feats\n\n    def __len__(self):\n        return self.df.shape[0]\n\n    def __getitem__(self, idx):\n        x = self.df.iloc[idx][self.feats].to_numpy()\n        x = fillna_npwhere_njit(x, self.f_mean)\n        y = self.df.iloc[idx][self.targets].to_numpy()\n        \n        if self.extra_feats:\n            xtra_feats = self.df.iloc[idx][self.extra_feats].to_numpy()\n            return torch.Tensor(x), torch.Tensor(y), torch.Tensor(xtra_feats)\n        \n        return torch.Tensor(x), torch.Tensor(y)","8ecd15cc":"class JSMPDataModule(pl.LightningDataModule):\n    def __init__(self, train_df, valid_df, feats, targets, f_mean, bs=64, num_workers=4, prefetch_factor=2):\n        super().__init__()\n        self.train_df        = train_df\n        self.valid_df        = valid_df\n        self.feats           = feats\n        self.targets         = targets\n        self.f_mean          = f_mean\n        self.bs              = bs\n        self.num_workers     = num_workers\n        self.prefetch_factor = prefetch_factor\n\n    def prepare_data(self):\n        pass\n\n    def setup(self, stage=None):\n        self.train_ds = JSMPDataset(self.train_df, self.feats, self.targets, self.f_mean, extra_feats=['date', 'weight', 'resp'])\n        self.valid_ds = JSMPDataset(self.valid_df, self.feats, self.targets, self.f_mean, extra_feats=['date', 'weight', 'resp'])\n        self.test_ds  = None\n\n    def train_dataloader(self):\n        return DataLoader(self.train_ds, batch_size=self.bs, shuffle=True, num_workers=self.num_workers, prefetch_factor=self.prefetch_factor)\n\n    def val_dataloader(self):\n        return DataLoader(self.valid_ds, batch_size=self.bs, shuffle=False, num_workers=self.num_workers, prefetch_factor=self.prefetch_factor)\n\n    def test_dataloader(self):\n        return DataLoader(self.test_ds, batch_size=self.bs, shuffle=False, num_workers=self.num_workers, prefetch_factor=self.prefetch_factor)","79fb6f4c":"class JSMPModule(pl.LightningModule):\n    def __init__(self, num_feats, n_classes, h_units=[126, 126, 126], dropout=[.2, .2, .2, .2], lr=1e-3, wd=1e-5, lab_smooth=1e-2):\n        super().__init__()\n        self.save_hyperparameters()\n        self.num_feats  = num_feats\n        self.n_classes  = n_classes\n        self.h_units    = h_units\n        self.dropout    = dropout\n        self.lr         = lr\n        self.wd         = wd\n        self.lab_smooth = lab_smooth\n        \n        self.model     = MLP(num_feats, n_classes, h_units, dropout)\n        self.loss      = SmoothBCEwLogits(smoothing=lab_smooth)\n        \n    def forward(self, features):\n        return self.model(features)\n\n    def configure_optimizers(self):\n        return torch.optim.Adam(self.model.parameters(), lr=self.lr, weight_decay=self.wd)\n    \n    def training_step(self, batch, batch_idx):\n        x, y, extra_feats  = batch\n        \n        y_hat = self.model(x)\n        loss  = self.loss(y_hat, y.type_as(y_hat))\n        \n        metrics = {'loss': loss, 'summary': {'train_loss': loss, 'y': y, 'y_hat': y_hat, 'date': extra_feats[:, 0], 'weight': extra_feats[:, 1], 'resp': extra_feats[:, 2]}}\n            \n        return metrics\n    \n    def training_epoch_end(self, outputs):\n        y      = torch.cat([x['summary']['y'     ] for x in outputs])\n        y_hat  = torch.cat([x['summary']['y_hat' ] for x in outputs])\n        date   = torch.cat([x['summary']['date'  ] for x in outputs])\n        weight = torch.cat([x['summary']['weight'] for x in outputs])\n        resp   = torch.cat([x['summary']['resp'  ] for x in outputs])\n        loss   = torch.stack([x['summary']['train_loss'] for x in outputs])\n        \n        loss  = loss.mean()            \n        m_auc = roc_auc_score(y.detach().cpu().numpy(), y_hat.detach().cpu().numpy())\n        \n        y_hat_action = y_hat.mean(1)\n        y_hat_action = (y_hat_action >= TRESH).long()\n        \n        m_utility = utility_score_bincount(date.long().detach().cpu().numpy(), weight.detach().cpu().numpy(),\n                resp.detach().cpu().numpy(), y_hat_action.detach().cpu().numpy())\n        \n        print(f'Epoch {self.current_epoch} -- [train] -- loss:{loss:.4f} | auc:{m_auc:.4f} | utility:{m_utility:.4f}')\n\n    def validation_step(self, batch, batch_idx):\n        x, y, extra_feats  = batch\n                        \n        y_hat = self.model(x)\n        loss  = self.loss(y_hat, y.type_as(y_hat))\n                \n        metrics = {'valid_loss': loss, 'y': y, 'y_hat': y_hat, 'date': extra_feats[:, 0], 'weight': extra_feats[:, 1], 'resp': extra_feats[:, 2]}\n        \n        return metrics\n            \n    def validation_epoch_end(self, metrics):\n                \n        y      = torch.cat([x['y'     ] for x in metrics])\n        y_hat  = torch.cat([x['y_hat' ] for x in metrics])\n        date   = torch.cat([x['date'  ] for x in metrics])\n        weight = torch.cat([x['weight'] for x in metrics])\n        resp   = torch.cat([x['resp'  ] for x in metrics])\n        loss   = torch.stack([x['valid_loss'] for x in metrics])\n                \n        if y.flatten().float().mean() > 0: # skip sanity check\n            \n            loss  = loss.mean()            \n            m_auc = roc_auc_score(y.detach().cpu().numpy(), y_hat.detach().cpu().numpy())\n                \n            y_hat_action = torch.median(y_hat, axis=1).values\n            y_hat_action = (y_hat_action >= TRESH).long()\n                                        \n            m_utility = utility_score_bincount(date.long().detach().cpu().numpy(), weight.detach().cpu().numpy(),\n                resp.detach().cpu().numpy(), y_hat_action.detach().cpu().numpy())\n                \n            print(f'Epoch {self.current_epoch} -- [valid] -- loss:{loss:.4f} | auc:{m_auc:.4f} | utility:{m_utility:.4f}')\n            \n            self.log('valid_auc'    , m_auc)\n            self.log('valid_loss'   , loss)\n            self.log('valid_utility', m_utility)\n        ","be2d377e":"checkpoint_callback     = pl.callbacks.ModelCheckpoint(filepath=f'{OUT_PATH}\/{EXP_NAME}-fold{FOLD}', monitor='valid_auc', mode='max', save_weights_only=True, save_last=True, verbose=True)\nearly_stopping_callback = pl.callbacks.early_stopping.EarlyStopping(monitor='valid_auc', mode='max', min_delta=.001, patience=20, verbose=True)\n\ndm      = JSMPDataModule(train_df, valid_df, features, targets, f_mean, bs=BS, num_workers=N_WORKERS)\nmodel   = JSMPModule(num_feats=len(features), n_classes=len(targets), h_units=[126, 126, 126], dropout=[.2, .2, .2, .2], lr=LR, wd=WD, lab_smooth=LAB_SMOOTH)\ntrainer = pl.Trainer(gpus=[0], callbacks=[checkpoint_callback, early_stopping_callback], max_epochs=EPOCHS, accelerator='dp')\ntrainer.fit(model, dm)","7a536683":"## Pytorch Lightning - JSMP starter notebook\nPytorch Lightning instroduction guide: https:\/\/pytorch-lightning.readthedocs.io\/en\/latest\/introduction_guide.html\n\n<div style=\"text-align: justify\"> I have created this notebook aiming at encouraging people to use Pytorch Lightning (PL) since I have found it very interesting. PL has helped me to write cleaner code as well as reuse up to the 99% of it. Moreover, PL is easily scalable which is of paramount importance nowadays. Hope you enjoy this notebook and up-vote it if so. Ideas on how to improve not only the approach but also the code are welcome!  <\/div>"}}