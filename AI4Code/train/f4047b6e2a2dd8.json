{"cell_type":{"bb82a239":"code","9d9b0584":"code","d8aa029e":"code","8c16ab52":"code","21998791":"code","789fe382":"code","f59fc22a":"code","a4374c6b":"code","386bb445":"code","bec488e4":"markdown","d8a8556c":"markdown","a924d5e5":"markdown","425614f0":"markdown","4f38c289":"markdown","745c54da":"markdown","4a1ed049":"markdown","52f13c86":"markdown","4c6dd42f":"markdown","e6de65fb":"markdown","ab9b0db3":"markdown","095586ea":"markdown","14df0d53":"markdown","ccd824bf":"markdown","3313aa89":"markdown","a494d385":"markdown","1654a743":"markdown","ef25a807":"markdown","cadc7ca9":"markdown","6b7a4eed":"markdown"},"source":{"bb82a239":"from fastai.vision.all import *        # line 1","9d9b0584":"path = untar_data(URLs.PETS)\/'images'        # line 2","d8aa029e":"def is_cat(x): return x[0].isupper()        # line 3","8c16ab52":"dls = ImageDataLoaders.from_name_func(        # line 4\n    path,\n    get_image_files(path),\n    valid_pct=0.2,\n    seed=42,\n    label_func=is_cat,\n    item_tfms=Resize(224))","21998791":"learn = cnn_learner(dls, resnet34, metrics=error_rate)        # line 5\nlearn.fine_tune(1)                                            # line 6","789fe382":"import ipywidgets as widgets           # line 7\nuploader = widgets.FileUpload()        # line 8\nuploader","f59fc22a":"def helper():        # line 9\n    \n    # plotting the image\n    img = PILImage.create(uploader.data[0])\n    img.show()\n    \n    # predicting the image\n    is_cat,_,probs = learn.predict(img)\n    print(f\"Is this a cat?: {is_cat}.\")\n    print(f\"Probability it's a cat: {probs[1].item():.6f}\")","a4374c6b":"helper()        # line 10","386bb445":"helper()","bec488e4":"#### 3.1 Label function\nThe names of the images starting with an uppercase letter are cat images and the rest are the dog images.","d8a8556c":"> *untar_data*(***url***, ***fname***=*None*, ***dest***=*None*, ***c_key***=*'data'*, ***force_download***=*False*,\n***extract_func***=*file_extract*, ***timeout***=*4*)\n\n`untar_data` is a very powerful convenience function to download files from `url` to `dest`. The `url` can be a default `url` from the `URLs` class or a custom url. If `dest` is not passed, files are downloaded at the `default_dest` which defaults to `~\/.fastai\/data\/`. This convenience function extracts the downloaded files to `dest` by default. In order, to simply download the files without extracting, pass the `noop` function as `extract_func`. \n\nThis line downloads a standard dataset from the fast.ai datasets collection (if not previously downloaded) to your server, extracts it (if not previously extracted), and returns a Path object with the extracted location.","a924d5e5":"#### 3.2 Image Data Loader","425614f0":"> *cnn_learner*(***dls***, ***arch***, ***normalize***=*True*, ***n_out***=*None*, ***pretrained***=*True*, ***config***=*None*, ***loss_func***=*None*, ***opt_func***=*Adam*, ***lr***=*0.001*, ***splitter***=*None*, ***cbs***=*None*, ***metrics***=*None*, ***path***=*None*, ***model_dir***=*'models'*...)\n\nBuild a convnet style learner from `dls` and `arch`\n\nThe model is built from `arch` using the number of final activations inferred from `dls` if possible (otherwise pass a value to `n_out`). It might be `pretrained` and the architecture is cut and split using the default metadata of the model architecture (this can be customized by passing a `cut` or a `splitter`).","4f38c289":"The first part of the class name will generally be the type of data you have, such as image or text.\n\nThe other important piece of information that we have to tell fastai is how to get the labels from the dataset. Computer vision datasets are normally structured in such a way that the label for an image is part of the filename or path\u2014most commonly the parent folder name. Here we\u2019re telling fastai to use the `is_cat` function we just defined.\n\nFinally, we define the `Transforms` that we need. A `Transform` contains code that is applied automatically during training; fastai includes many predefined `Transforms`, and adding new ones is as simple as creating a Python function.\n\nThere are two kinds: `item_tfms` are applied to each item (in this case, each item is resized to a 224-pixel square), while `batch_tfms` are applied to a batch of items at a time using the GPU, so they\u2019re particularly fast.\n\nThe most important parameter to mention here is `valid_pct=0.2`. This tells fastai to hold out 20% of the data and *not use it for training\nthe model at all*.","745c54da":"The sixth line of our code tells fastai how to *fit* the model. The architecture only describes a template for a mathematical function; it doesn\u2019t actually do anything until we provide values for the millions of parameters it contains.\n","4a1ed049":"All the code in the notebook is the boilerplate code available on the [fast.ai](https:\/\/www.fast.ai\/) website.\n\nThe documentation in the notebook is also taken from the official fastai docs that can be found [here](https:\/\/docs.fast.ai\/).\n\n## If you liked the notebook, please leave an upvote. Thank you:)\n[back to top](#100)\n\n### The notebook is also available [here](https:\/\/namanmanchanda09.github.io\/mindAI\/fastai\/jupyter\/python\/pytorch\/2021\/05\/29\/cat-vs-dog-classifier-10-lines-of-code-fast-ai.html) in the form of blog.\n\nCheck out my other notebooks:-\n1. https:\/\/www.kaggle.com\/namanmanchanda\/star-wars-classifier\n2. https:\/\/www.kaggle.com\/namanmanchanda\/pima-indian-diabetes-eda-and-prediction\n3. https:\/\/www.kaggle.com\/namanmanchanda\/tps-april-complete-eda-prediction","52f13c86":"#### 5.1 Widget module for uploading image\n##### Not a part of model building process","4c6dd42f":"## 3. DataLoader","e6de65fb":"**fastai** is a deep learning library which provides practitioners with high-level components that can quickly and easily provide state-of-the-art results in standard deep learning domains, and provides researchers with low-level components that can be mixed and matched to build new approaches. It aims to do both things without substantial compromises in ease of use, flexibility, or performance. This is possible thanks to a carefully layered architecture, which expresses common underlying patterns of many deep learning and data processing techniques in terms of decoupled abstractions. fastai applications include:\n- Vision\n- Text\n- Tabular\n- Collaborative filtering <a id=100><\/a>","ab9b0db3":"It is quite evident from prediction probabilities that **fastai** can be used to develop state of the art ML models in just a few lines of code.","095586ea":"## 5. Prediction","14df0d53":"#### 5.2 Prediction function - `helper()`","ccd824bf":"## 1. Packages","3313aa89":"## 2. Data","a494d385":"## 4. Modelling","1654a743":"#### 5.3 Predicting the image","ef25a807":"> *ImageDataLoaders*(***loaders***, ***path***=*'.'*, ***device***=*None*)\n\nThis is a wrapper around several` DataLoaders` with factory methods for computer vision problems.\n\nThis class should not be used directly, one of the factory methods should be preferred instead. All those factory methods accept as arguments:\n- `item_tfms`: one or several transforms applied to the items before batching them\n- `batch_tfms`: one or several transforms applied to the batches once they are formed\n- `bs`: the batch size\n- `val_bs`: the batch size for the validation `DataLoader` (defaults to `bs`)\n- `shuffle_train`: if we shuffle the training `DataLoader` or not\n- `device`: the PyTorch device to use (defaults to `default_device()`)","cadc7ca9":"The Pet dataset contains 7,390 pictures of dogs and cats, consisting of 37 breeds.","6b7a4eed":"<h1><center>Cat vs Dog Classifier<\/center><\/h1>\n<center><img src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAARUAAAC2CAMAAADAz+kkAAAAYFBMVEUgICD\/\/\/8AAACUlJQcHBwaGhr09PQUFBSWlpYXFxcMDAyNjY1XV1cxMTFjY2NSUlJ4eHhBQUFJSUmCgoJeXl5sbGwlJSUqKio8PDy8vLzo6OiwsLDc3NzIyMifn5\/R0dEpDTOrAAARbUlEQVR4nO1d6WKzoBK1LCIouC\/Z3\/8t7wxoIsb0tl+T1N7L+dGKIstxmBlgNFEUEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQ8FtggN9uw6bAFSGdHgYdESV\/uzEbgRJVerrs93G835\/OeeAFIER6\/JjjlJPfbpMHJqUQ8r2Dm5jLxwJxrd7ahE\/BiM6MMVlH3sgLKa5kHNtsIqjdDC2yO8e2SfuDFu+qdEbKByHkPB7u9UaskSxvozse3qTwZH4j5UhOu\/2UoBsRFjEf3vvoPc+KzCo9mFkDLs9RuPKH5KraU3jveVaimFdJ54\/l52NYKiJN8rN+kJPHyvEtxnEuKh\/1YZaIf6ZYgBFh6AX05I\/6wfTeY+VnpX0RvIofsfKDpyIUUSa5xE\/ox6+wos7zGtN5avfv9bfnS\/ykfjA9f2xvYsUbQB\/pzB59NP9qBFkZP7Effgvfo1eYJ5+U7G6i8s\/K9rmsqMQr7Ie6+0vguVclVVdaDuKfde1zWVkMoXeIijBe+8EZIPnhcrycyx\/U\/lxWItXOymre4fIvxBNdJEkQ\/AeFPpkVmLxOw\/xYvcWHI4c7Vn6OZ7MSCWKSw+mc5uQdsyDGlqwQ5jBlAMeDECVQetS6+ICzRsR0lXEGhcolK36haw2Rrh7711tGGW+1LSDiLeunWkc7r\/1Jpx2wcqZE19LDbnc5nna7Q11Fd4+KkSg\/707H3YFWknCu9\/FJaF35rKix0O5BM5TqmtTWc4F60qxTV+UxteeG\/mVsOMjm4xH2IPRKJ4u1qHiX+QKj9PnW\/\/2hUiB5p93HIxSrmlLI4uSzGJ8K4bIuZoaIw4s1i8wetv9ImErilQu7+bKPKhZZUCmeDiu3fcIKKfYrWY+5esDK+TdZ6a8z1UM7f\/r74SotZLRf8fFyvPXsm6xcF7k+ToU3+WjU77ASadPk\/jT9kDUW+U0LX0DLzZ\/mZWoVcS2OW9SEqpmouwxN0\/oyVLlCjb5vgrquY8QdIXP64wF0GxtMk\/lD8uWsRFISv0pKpIW6iVF8aH1DNS5z89HQlC4pSbMfWZRqWNggV+iKVWXslnOXzpdKx8kpgyb6wvd6VuCBL1hRK6cvJJ3nGadnY5b46oyMXFzIN\/wVb4TE2lf\/4\/LOdljp5mMm5t4z\/MjwofNquoVMEyZlvs2K3+PMv28Uys2wwvwh0LVeJtva28LmqZ22YG37vycr\/jqGX+24vrNZVvwppG3t\/Mb4lGaKCDe7\/R4r3o5lIr379ltjxZ+89\/5yg137X6wFfex3BqaVh++OIM8EUs\/YTSprM6z4rY3lGiv+vrQl5qyHOD59S1Y8FyXzWfnYGitirklS4rNijRBZ80jjtMcp1NdZYf0s244sCnVGaDusROJ2\/qAWsrJfG0EjLlp9ayVhZpovPVuwkt90+DZYYXycBsW1Yqus+E7x7WIpv7W+Mk2D4kPHlwK4OVbgKUaG0jS36xqVl8mysjJDcTiq7606CZmnSWpsPdtnJVLARk13lyPgnpWF8Z4hUd9bi4NplC7Sw+mung2yolS9rjkmP4I8mhsfBf8GK5K0p0f8bo4Vslw6uWOF8TUrZDsjvs4KqR6VskFWFi3xNatjBZzZB8KUks9Z4eK61eTPkj8WUrMxVhT1ztblPSvkfDjz9UF0+IwVpkhuWk1sRQvjttu0tmW916tY3Vtmjh0YSLfGy26dFS6UiGR3sNdiioF\/C\/O+9G2BFcaX2xC\/xopYyDVZsjK2\/kAYKemd67\/OCtnFx5rcwi5wvtR72eJhyQq27rAVVhbt2N2xMk4ej9JGdJf04rGwOoIYLtmc58KxI8JfodjrNVbSzbDinzwQf9l7j72OseMu+BSIYe0hnhWyMsvjqJsab7GtX3iCF0IW2hanFcVmWVk8U5Qdy8rxuhQrSH\/dKcnlgpWejcvWpb8ATHylflnKWI7Gv90sK\/4z3RMDXbAdT27mhU1Wdt+xpRaVbtXt6E8pz8tyhT9SP6oIqdkKK4tAhd1ifhwruGnnlGx7o4UPE4nLSVKhmCXgvGTFZyGOfNn5aFpceno7K4zd7XzYrW5\/Nnjxk87ZKkbTU0+L2XwcDxh56YcgfuyURDkCG+MvvSlfj8Tlws9FedzdsUJevQM\/6G6x+967Le6FcHzcIb5Gjl3a0k53y\/FB27XuRU\/2e9cff+ktl376Y835L\/TCJzr0englLfBE43ix7+2wv1smWBJzninU+HLanSbjnLpJkr5fwLwoX4bAGWR8mW1JzHG\/1sRXRoEtYuLmyBZ7oudF7MXFLRDdzXbj6UUROSwnSRfcoJ4LB8ZyyUUw7an3aYrXwyZ+iRVDqpkKiKlSej7UDsx6\/GeiPc92f9ZXVchV7V+SdtdeTcMhLmzXZDRzdD52nehmsR\/A5PB2VqI+ewQdSVIlu8secKIDrsWSMrXp4+lcKRaRS3wBxazkmO1yOpjee6lJiezs7rgc2n7qiGh2R8h9GEb+GNHF4WTrOedQLqTbnUsfGiW71ea9Ng5MPgJexLcz+76PiBqNDKR1r9UY7NXrjt1O96Bv716Ak7YELQiZRalKwntNZvxhdFfU990UoYhpW6+NrHrYvNeB\/FG8lpRT\/CdxeCktD\/Z0No\/AyhoCK2sIrKzhxazcu+V\/Aj94netLtPxRvJSUgICAgICAgICAgICAgICAgICAgICAgD8B5n05hN+FVs3PyJ981ehr4K+v4gtgVTb7ykuf5QtadJZfjzvTvLrNXZ4NL67iS6iT9hZJXCSpH7bJmySdPrAj2yQxL44c0TT5IvOvfT41pdVYAxsSumQlo\/WclVcLi05p9qUq+uyl7QBW6vFQwPEnrERd89qmRF9mhVUJXfmWy\/MATFD3vUmZ0YkVjlFWqGEmVjgGXTHlLvKIScau4V4cP34+V8qLDHjM3cgbQ7eYVdtMwq32ApQunCb3WcEioGQ+DVs+lSrKhPbui+u28KeH39a0pql9x7xL8RDjAnXTAnBgjazIxhgWaWM61LmZqNqiaN3A473N3NyUJMuaaMAMuc0gNRwXRnP8NJD9Wg8rTQN\/cxPlkIsxnWMJVs97rEC+oWvszfaLZFE2VqtNS6kxpoR7TYHnns9Km9KC4zcAaG2QFQb6A0ATw0dWZJ6ATh7FtqcpZgC5wl7LPKU2lZRsViS1pxqbgdoM6cBQb2FUNahwKBRUewGV1CqjrrpiyQrkK2pbeN3js6oTLDZpRXmmttBWQH57d\/lkaalpY7CDbKBJ1SIr3NC6bUwKIuRYYVB3LafB3ENDUgNZUR+xChJtbmAczlmBcxUW0DkN3tjcwAodWcFbRYHZCiOqBKprUOuzBSs4pOs8h0twkkH+toJEUuoCjkFGcniSUFNW1M\/+hlxNDYNR1EEja2VZifoBRrkosZmWFQ4Dq2czVtJBcMhLNZO1TQjo+5yVtBRMNSg\/UGwKYx8SdOB3rGjQSFFUciEFFAtm\/46VFjQPnCwk8p8JLmGct0KV4DAIwWRBC8K5ePR1vp+wokDIDVQ6CMdKhB9N5NAWxwprnfG+sYKh5thK20+DidJnpcVzA4qgBF1OhBAdlCGXrBTjx17wq4pA\/QorVuNh37mEAQ5qXZDCUuRsEFyph3\/\/4OynrEgsvIDHIkdWRD+UQzWxko1G6sZKzlynB1m5kbNkxTp78FRzJKIuEKusuM\/HyWgYynKdFUxAswqOQmcLqmesoDSlbfn8L\/RjY1BxgDhHjhWm29ppUMsKwLV+xgqfWMkpdVblESul04uoJR+yYsbq1lhhV1bqa0E3ViJmsH318Gzn0nZBGCsPjpUOHbuiLbAL2DDUcuJfWYFc2eDQ4S3lHSsMLBFKAQxM\/hkrkH0sSM+8OD6gpk+f7dK5LrC6dtWnimcJbSIh9MhKjcofXydYY6WyluMTVnrUkeNnXPEWzC3nrKCRakFzwl3Zf2Glvn4Pdubbgi\/YUPrs+dnIitYTK\/gHakbZd6x0KDwDW2MFtS3KEfRznRUuwag7j5g5b8Q+gjkrOZYTsT79nBVpbD639IFNse+T2XftYHC1L2HFwbEC1WdKlPWVFV6OvskdK2iZaakU6qUHrKAXykEUwBGNrIkVHJ2X7soKiFkrlS6sVwg5muuvXHmsYH21VmCUjbQ35YprmVdSqCF9kazMWMHqaY2DFTrqfFvRoEissYLDDZQQKut1VvAvWqEUdCSWD8cgKWna3bQtqrE6TVJr6cDXKSYt4bFib07x7gSkpENdVNcodaiR6LNfRKzPc1ZwfYXnqOzTvD03nDdnXF8B7\/ycyeqcWI8\/cZY5weaBZKFhKDxWXJEdPQMro6OepBkOIXtcwz9tPX6rbQfr1Zv8jLwZyHAei8LKHSvnGudkripadLalY0GJbeuzbVDXd8sE76q8hL+g7K+Xe\/zf9y7TlNk2vc+zRnu+7XSPywCOftNkg10mYlHVNFXE7JUpG4vKvOp5NFgPpGxuE81bQd1YVdPknfs+NxyCnwIzy+upl4NxN0n9SlbGweUeLfSj0vh1oYHx+6Vhr7rVDBNWCuIvWEf4MViFGhCsVLqJZeiNgMNcEVVz8s+\/lPK\/CJ1aJ5y+5Xcm\/g6UrvK8Cr+kuQD7VD8GBAQEBAQEBAQEBPxp\/MO3297xg2u\/C12W372FD9VWfjr9ReA5pd+NB9BpUv\/3XH8Z\/8AKbg6kr\/51vt\/Fv8hK1BTL+NXNYVJ9bNqK4\/IW5MaknCKP56dviTtW5ivXNjGlZsc2aMXWxcbwu62hryq7qzBUFe7j5ZzlbduULgiBVaY1mQ0h0RnGvrllSN7bPDbOz2dFRFWWZbn7jhwTJX7wrrLdF0MOx7YAVlYDDqSc8VtdmwJuTeK+mzSJ3fpNcrsOa7fxmLbBEbingaFKeGRjE3DLHRMYx7ZgpR1j4GzkgR4DMGgJ9I5FtRgpZwOfoa4stefM5miZQtWuYQKU1higiJuafW0Tae1iTts2tbRgkBNtMT6iYEtW6oQWrYvgxZiYpG5xuxOkJU9w69Ptu7rN8ltddHN2+p4Vo6TKbOwWyEejYOBrhtsbnZAYWKMZK4AzIbndRPVZgbEhpFQGScWycrhnjM7IIjjWdpv8xkoLdeX0i9HYb8QdKzasosOAENzZHrfzQDrwVxQw1KSRegyFgy62ciErTmWXSB5eFi6BrLht0NpjxUU8p08Ps\/gx7lhpxzABI\/W1uRgG5jZ64ZQaQ+FAPdCCL20Ql5yjeGheTvE+43+4gPF3c1Zs8ax+epjFj\/GYFRT38V0GjGixBxyIgOGV2rgIFKw7y9zUVoFSjbFhw40VWRZOtbYzVoq\/yUp2Y8V5J8hK\/piVDrQtTWuMX0ZDpa+scGMv1DZG5Q+wUrrxsDKC+npM2K7biANgpVXjHbZbvrZF9kynYIyltxGE2pZrjHMUitnYtz\/AyuAijO2D91np6vEVGWbDoq0DA1ZJjKFwK9qWOWUNgyfVSDcqZcxQySqh+Btu3R9hBQPRwD5iiNeSFRvRhp8dLtFOpL1AZYnDzQapS9HaoYGsiLFXvEWbLbR9iYTVzoBjfL4scXteYHDs32DFvjNgwErSdMEKG8ABK4ypkwFJSw06bnCZ2xcaTGGdWxSjwrRO\/2CQXG2dPfBXcDil1tkDYcTgOHDvnNP8F1gp7bskaVkn\/TVUDXxUaKms3GsmacVEe3PyMYjYJVCbYtRpQkefnblsTW3fTCns3fZdDl5ZC1Q01tefPP6RlWRz\/gp+N9\/ga0mihFkiztussbHzN5gSNkXbZvi+k8BcbTnaJDiPbypZl023RXtdGOAwnYQ5ZJnZgO0K34VyWpfrpjUV62GuOM0O\/bq2BibtzH5cSRi92bGbXIxvvrlcbH7LlJBithjA7BKDe0ea4at3ohrDPrldM+DX0OG7uv4\/wDROnXC69Nst2RJkXcP4q+nk9QQgbMTcpKEDJujctK15+qs7fx3Xt6IDAgICAgICAu7xH07CMP+Ou+IfAAAAAElFTkSuQmCC\"><\/center>"}}