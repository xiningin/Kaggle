{"cell_type":{"8f5baec5":"code","ee83000f":"code","7f36f168":"code","431cd615":"code","f768a526":"code","453d4b52":"code","ee2379ec":"code","eb86f3eb":"code","ae868d92":"code","7bb5b219":"code","00d0cd13":"code","ac9a1bd7":"code","75611a5d":"code","ea749993":"code","c708b4f5":"code","aecadc74":"code","a63f5801":"code","475c2307":"code","9fabd1aa":"code","19aa1268":"code","8b55dbb7":"code","9f5c3655":"code","d1c8577e":"code","9dce78d9":"code","fd3e902e":"code","47c15d9b":"code","1395a95e":"code","f2544d41":"code","6e10ca6f":"code","9a0c1e03":"code","4cc93a5f":"code","7b59af71":"code","253f9197":"code","f694f2ec":"code","9587184f":"code","a938ce94":"code","f4fdd162":"code","54318606":"code","dea7f2b0":"code","5a0b5769":"code","71de506b":"code","2efb329b":"code","d9746445":"code","b7d2dab1":"code","17b103ba":"code","4d87d459":"code","78057663":"code","c8ae228e":"code","3f1d87d5":"code","4dec238e":"code","edccba22":"code","56836701":"code","c7898499":"code","4edda43d":"code","da67635f":"code","8949b250":"markdown","4851c021":"markdown","4c6baa25":"markdown","a5191fff":"markdown","a6f9a447":"markdown","2ec5407f":"markdown","02743ff6":"markdown","f690240f":"markdown","11254c9c":"markdown","70c311a5":"markdown","0c16c141":"markdown","c4e80e4b":"markdown","6f83e491":"markdown","9cbc68e1":"markdown","8fc052d9":"markdown","e502d792":"markdown","71439cd6":"markdown","966bb306":"markdown","638c6f66":"markdown","35ab3a9c":"markdown"},"source":{"8f5baec5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ee83000f":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport statistics\nimport sklearn\nimport sklearn.metrics as sm\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom pandas.plotting import scatter_matrix\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn import svm\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\n","7f36f168":"#read data\ntrain_set = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_set = pd.read_csv('..\/input\/titanic\/test.csv')\n","431cd615":"train_set.head()","f768a526":"train_set.info()","453d4b52":"train_set.describe()","ee2379ec":"train_set.shape","eb86f3eb":"print(train_set.dtypes)","ae868d92":"target_category = train_set[\"Survived\"].unique()\ntarget_category=list(map(str,target_category))\nprint(target_category)","7bb5b219":"train_set.isnull().sum().sort_values(ascending = False)","00d0cd13":"train_set = train_set.drop(columns=['Cabin'])","ac9a1bd7":"mode_category = ['Age','Embarked']\ntrain_set[mode_category] = train_set[mode_category].fillna(train_set[mode_category].mode().iloc[0])\n","75611a5d":"train_set.isnull().sum().sort_values(ascending = False)","ea749993":"train_set = train_set.drop(columns=['Name','Ticket'])","c708b4f5":"train_set.head()","aecadc74":"train_set[\"Sex\"] = train_set[\"Sex\"].astype('category').cat.codes\ntrain_set[\"Embarked\"] = train_set[\"Embarked\"].astype('category').cat.codes\n","a63f5801":"train_set.head()","475c2307":"train_set['Fare']= train_set['Fare'].round(0).astype(int)","9fabd1aa":"train_set.dtypes","19aa1268":" train_set = train_set.astype('int64')","8b55dbb7":"train_set.dtypes","9f5c3655":"train_set.head()","d1c8577e":"train_set['Survived'].describe()","9dce78d9":"train_set.hist(figsize=(15,10))\nplt.show()","fd3e902e":"train_set['Survived'].value_counts().plot(kind = 'bar', figsize = (5, 5))\nplt.xlabel('Survived')\nplt.ylabel('Count')\nplt.show()","47c15d9b":"train_set['Sex'].value_counts().plot(kind = 'bar', figsize = (5, 5))\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.show()","1395a95e":"sns.catplot(x='Pclass',data=train_set,kind='count',hue='Survived',col='Sex') ","f2544d41":"sns.ecdfplot(x='Age',data=train_set,hue='Survived')\nplt.show()\n","6e10ca6f":"correlation_matrix = train_set.corr()\ncorrelation_matrix['Survived'].sort_values(ascending = False)","9a0c1e03":"correlation_num = 8\ncorrelation_cols = correlation_matrix.nlargest(correlation_num,'Survived')['Survived'].index\ncorrelation_mat_sales = np.corrcoef(train_set[correlation_cols].values.T)\nsns.set(font_scale=1.25)\nf, ax = plt.subplots(figsize=(12, 9))\nhm = sns.heatmap(correlation_mat_sales, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 7}, yticklabels=correlation_cols.values, xticklabels=correlation_cols.values)\nplt.show()","4cc93a5f":"train_set.shape","7b59af71":"y= train_set['Survived']\nx= train_set.drop(columns=['Survived','PassengerId','Fare','Age'])\nprint(len(x.columns))","253f9197":"x.head()","f694f2ec":"X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size = 0.3, random_state = 60,shuffle=True)\nprint(len(X_train))\nprint(len(X_test))\n ","9587184f":"nb =  MultinomialNB()\nnb.fit(X_train,Y_train)\n\ntest_predict = nb.predict(X_test)\n\ntrain_accuracy = round(nb.score(X_train,Y_train)*100)\ntest_accuracy =round(accuracy_score(test_predict, Y_test)*100)\n\n\nprint(\"Naive Bayes Train Accuracy Score : {}% \".format(train_accuracy ))\nprint(\"Naive Bayes Test Accuracy Score  : {}% \".format(test_accuracy ))\nprint()\nprint(classification_report(test_predict, Y_test, target_names=target_category))","a938ce94":"sgd = SGDClassifier()\n\nsgd.fit(X_train, Y_train)\n\ntest_predict = sgd.predict(X_test)\n\ntrain_accuracy = round(sgd.score(X_train,Y_train)*100)\ntest_accuracy =round(accuracy_score(test_predict, Y_test)*100)\n\nprint(\"SVM Train Accuracy Score : {}% \".format(train_accuracy ))\nprint(\"SVM Test Accuracy Score  : {}% \".format(test_accuracy ))\nprint()\nprint(classification_report(test_predict, Y_test, target_names=target_category))\n","f4fdd162":"dt = DecisionTreeClassifier()\n\ndt.fit(X_train, Y_train)\n\ntest_predict = dt.predict(X_test)\n\ntrain_accuracy = round(dt.score(X_train,Y_train)*100)\ntest_accuracy =round(accuracy_score(test_predict, Y_test)*100)\n\nprint(\"Decision Tree Train Accuracy Score : {}% \".format(train_accuracy ))\nprint(\"Decision Tree Test Accuracy Score  : {}% \".format(test_accuracy ))\nprint()\nprint(classification_report(test_predict, Y_test, target_names=target_category))","54318606":"knn = KNeighborsClassifier(n_neighbors=5, metric='euclidean')\n\nknn.fit(X_train, Y_train)\n\ntest_predict = knn.predict(X_test)\n\ntrain_accuracy = round(knn.score(X_train,Y_train)*100)\ntest_accuracy =round(accuracy_score(test_predict, Y_test)*100)\n\nprint(\"K-Nearest Neighbour Train Accuracy Score : {}% \".format(train_accuracy ))\nprint(\"K-Nearest Neighbour Test Accuracy Score  : {}% \".format(test_accuracy ))\nprint()\nprint(classification_report(test_predict, Y_test, target_names=target_category))","dea7f2b0":"rfc = RandomForestClassifier(n_estimators=100)\n\nrfc.fit(X_train, Y_train)\n\ntest_predict = rfc.predict(X_test)\n\ntrain_accuracy = round(rfc.score(X_train,Y_train)*100)\ntest_accuracy =round(accuracy_score(test_predict, Y_test)*100)\n\nprint(\"Random Forest Train Accuracy Score : {}% \".format(train_accuracy ))\nprint(\"Random Forest Test Accuracy Score  : {}% \".format(test_accuracy ))\nprint()\nprint(classification_report(test_predict, Y_test, target_names=target_category))","5a0b5769":"lr =  LogisticRegression()\n\nlr.fit(X_train, Y_train)\n\ntest_predict = lr.predict(X_test)\n\ntrain_accuracy = round(lr.score(X_train,Y_train)*100)\ntest_accuracy =round(accuracy_score(test_predict, Y_test)*100)\n\nprint(\"Logistic Regression Train Accuracy Score : {}% \".format(train_accuracy ))\nprint(\"Logistic Regression Test Accuracy Score  : {}% \".format(test_accuracy ))\nprint()\nprint(classification_report(test_predict, Y_test, target_names=target_category))","71de506b":"svc = SVC(probability = True)\nsvc.fit(X_train, Y_train)\n\ntest_predict = svc.predict(X_test)\n\ntrain_accuracy = round(svc.score(X_train,Y_train)*100)\ntest_accuracy =round(accuracy_score(test_predict, Y_test)*100)\n\nprint(\"SVC Train Accuracy Score : {}% \".format(train_accuracy ))\nprint(\"SVC Test Accuracy Score  : {}% \".format(test_accuracy ))\nprint()\nprint(classification_report(test_predict, Y_test, target_names=target_category))","2efb329b":"test_set.head()","d9746445":"test_set = test_set.drop(columns=['Name','Ticket','Cabin','Age','Fare'])","b7d2dab1":"test_set.head()","17b103ba":"test_set[\"Sex\"] = test_set[\"Sex\"].astype('category').cat.codes\ntest_set[\"Embarked\"] = test_set[\"Embarked\"].astype('category').cat.codes\n","4d87d459":"test_set.head()","78057663":"test_set.isnull().sum().sort_values(ascending = False)","c8ae228e":"mode_category = ['Embarked']\ntest_set[mode_category] = test_set[mode_category].fillna(test_set[mode_category].mode().iloc[0])\n","3f1d87d5":"test_set.dtypes","4dec238e":" test_set = test_set.astype('int64')\n     ","edccba22":"test_set.dtypes","56836701":"test_id = test_set['PassengerId']\ntest_x= test_set.drop(columns=['PassengerId'])\nprint(len(test_x.columns))\n","c7898499":"y_prdict =svc.predict(test_x)","4edda43d":"submission = pd.DataFrame(list(zip(test_id, y_prdict)),\n               columns =['PassengerId', 'Survived'])\nsubmission.head(20)","da67635f":"submission.to_csv('submission.csv', index=False)","8949b250":"# Read Datasets","4851c021":"# 6. Logistic Regression","4c6baa25":"# Convert categorical values into numerical","a5191fff":"# 4.KNN Classifier","a6f9a447":"**Fill Null Values with most frequent value**","2ec5407f":"**Name and Ticket features are irrelevent when considering the survival**","02743ff6":"# Convert all the data into integer","f690240f":"# 5.  Random Forest Classifier","11254c9c":"# Correlation with Survived feature","70c311a5":"# 3. Decision Tree Classifier","0c16c141":"Cabin has 687 null values out of 891. So I will remove Cabin feature from the dataset.","c4e80e4b":"# Check null values","6f83e491":"# Test set","9cbc68e1":"# Data about Survived","8fc052d9":"# Drop irrelevent data","e502d792":"# 7. SVC","71439cd6":"# 2. SGD Classifier","966bb306":"Male passengers from all the classes has a higher chance of getting survived rather than the female passengers","638c6f66":"**This shows that there is a high chance of survival for the people below 23**","35ab3a9c":"# 1. Multinomial Naive Bayes "}}