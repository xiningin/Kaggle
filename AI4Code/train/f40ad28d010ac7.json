{"cell_type":{"d00e3890":"code","953a4202":"code","17ce4bab":"code","0682f94d":"code","e0ed8263":"code","60c3611b":"code","8a14a1fd":"code","fc85b8c9":"code","fb239633":"code","2c5f0b36":"code","4f3cf7f0":"code","a4e30c0e":"code","2f2bd9b9":"code","6f5f5b4a":"code","1a8fc4d1":"code","ee36ff71":"code","0e771ac0":"code","67a73a29":"code","c4a262b2":"code","c74eb91f":"code","7fcb2b5c":"code","5f3e0e74":"code","198535d1":"code","3c688b32":"code","c14ad921":"code","43706eb1":"code","ea7bb904":"code","151c9e26":"code","43805263":"code","91978c6e":"code","4d93e75c":"code","04161897":"code","5d028891":"code","6ae62d9a":"code","bb3d7a0a":"code","0fe68bab":"code","bc90e2ba":"code","aad6829e":"code","7bb07cf5":"code","fd0f3ddd":"code","d11b5f53":"code","ce37ad8d":"code","2536c7d5":"code","9aab7b81":"code","1a524b51":"code","55674866":"code","2be0b2fb":"code","932817dd":"code","bf4ecb7a":"code","c9fd71d4":"code","91308cb5":"code","7beacda2":"code","74d33e9a":"code","6112b337":"code","0498663a":"code","9a602609":"code","73939464":"code","952b49ce":"code","8b32ceec":"code","d0e3de25":"code","4efacd94":"code","7c82df57":"code","1c441d9e":"code","3288a675":"markdown","81bf4f65":"markdown","aac90946":"markdown","380e1c18":"markdown","3d012ab6":"markdown","d84b19c4":"markdown","303a9a68":"markdown","d02fbb50":"markdown","00e0820b":"markdown","00566aa3":"markdown"},"source":{"d00e3890":"#Installing download packages for downloading using links\/urls\n!pip install download","953a4202":"# Installing some important packages which will be used in this project\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nimport seaborn as sns\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nfrom datetime import datetime\n\nimport pandas as pd\n\nfrom download import download\n\nmpl.rcParams['figure.figsize'] = (8, 6)\nmpl.rcParams['axes.grid'] = False\n","17ce4bab":"# Downloading from uci data and creating folders tmp and aq(air quality)\npath = download('https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/00501\/PRSA2017_Data_20130301-20170228.zip', '\/tmp\/aq', kind=\"zip\")","0682f94d":"# Using the air quality data of Dingling station(city in China)\ndf = pd.read_csv('\/tmp\/aq\/PRSA_Data_20130301-20170228\/PRSA_Data_Dingling_20130301-20170228.csv', encoding='ISO-8859-1')","e0ed8263":"# Checking the csv files in aq folder\n!ls -alrt \/tmp\/aq\/PRSA_Data_20130301-20170228","60c3611b":"# 10 results of dataframe from top\ndf.head(10)","8a14a1fd":"# 10 results of dataframe from bottom\ndf.tail(10)","fc85b8c9":"# Dataframe information\ndf.info()","fb239633":"# Using year,month,day,hour and Converting into a proper Datetime format\ndef convert_to_date(x):\n\treturn datetime.strptime(x, '%Y %m %d %H')","2c5f0b36":"aq_df = pd.read_csv('\/tmp\/aq\/PRSA_Data_20130301-20170228\/PRSA_Data_Dingling_20130301-20170228.csv', parse_dates = [['year', 'month', 'day', 'hour']],date_parser=convert_to_date, keep_date_col=True)","4f3cf7f0":"aq_df.head()","a4e30c0e":"# Dataframe information\naq_df.info()","2f2bd9b9":"aq_df['month']=pd.to_numeric(aq_df['month'])","6f5f5b4a":"print (\"Rows     : \" ,aq_df.shape[0])\nprint (\"Columns  : \" ,aq_df.shape[1])\nprint (\"\\nFeatures : \\n\" ,aq_df.columns.tolist())\nprint (\"\\nMissing values :  \", aq_df.isnull().any())\nprint (\"\\nUnique values :  \\n\",aq_df.nunique())","1a8fc4d1":"# Statistical information of numeric data of dataframe\naq_df.describe()","ee36ff71":"# Making copy of original dataframe\naq_df_non_indexed=aq_df.copy()","0e771ac0":"# Setting year_month_day_hour as a Index column for time series analysis\naq_df = aq_df.set_index('year_month_day_hour')","67a73a29":"aq_df.index","c4a262b2":"# Top 10 records from TOP\naq_df.head(10)","c74eb91f":"# Data 1st March 2013 to 10th March 2013\naq_df.loc['2013-03-01':'2013-03-10']","7fcb2b5c":"# Data from 2013 to 2016\naq_df.loc['2013':'2016']","5f3e0e74":"pm_data = aq_df['PM2.5']\npm_data.head(10)","198535d1":"# Plot of PM2.5 for year 2013 to 2017\npm_data.plot(grid=True)","3c688b32":"# Plot of PM2.5 for year 2013\naq_df_2013=aq_df.loc['2013']\npm_data_2013=aq_df_2013['PM2.5']\npm_data_2013.plot(grid=True)","c14ad921":"# Plot of PM2.5 for year 2014\naq_df_2014=aq_df.loc['2014']\npm_data_2014=aq_df_2014['PM2.5']\npm_data_2014.plot(grid=True)","43706eb1":"# Plot of PM2.5 for year 2015\naq_df_2015=aq_df.loc['2015']\npm_data_2015=aq_df_2015['PM2.5']\npm_data_2015.plot(grid=True)","ea7bb904":"# Plot of PM2.5 for year 2016\naq_df_2016=aq_df['2016']\npm_data_2016=aq_df_2016['PM2.5']\npm_data_2016.plot(grid=True)","151c9e26":"# Plot of PM2.5 for year 2017\naq_df_2017=aq_df['2017']\npm_data_2017=aq_df_2017['PM2.5']\npm_data_2017.plot(grid=True)","43805263":"# Plot with slider on Original Data\nimport plotly.express as px\nfig = px.line(aq_df_non_indexed, x='year_month_day_hour', y='PM2.5', title='PM2.5 with Slider on Original Dataframe')\n\nfig.update_xaxes(rangeslider_visible=True)\nfig.show()","91978c6e":"# Plot with slider and label button on original dataframe\nfig = px.line(aq_df_non_indexed, x='year_month_day_hour', y='PM2.5', title='PM2.5 with Slider on Original Dataframe')\n\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n            dict(count=2, label=\"2y\", step=\"year\", stepmode=\"backward\"),\n            dict(count=3, label=\"3y\", step=\"year\", stepmode=\"backward\"),\n            dict(count=4, label=\"4y\", step=\"year\", stepmode=\"backward\"),\n            dict(step=\"all\")\n        ])\n    )\n)\nfig.show()","4d93e75c":"# Air Quality plot for the year 2014 and 2015 for PM2.5\ndf_2014= aq_df['2014'].reset_index()\ndf_2015 = aq_df['2015'].reset_index()\ndf_2014['month_day_hour']=df_2014.apply(lambda x : str(x['month'])+\"-\"+x['day'],axis=1)\ndf_2015['month_day_hour']=df_2015.apply(lambda x : str(x['month'])+\"-\"+x['day'],axis=1)\nplt.plot(df_2014['month_day_hour'], df_2014['PM2.5'])\nplt.plot(df_2015['month_day_hour'], df_2015['PM2.5'])\nplt.legend(['2014', '2015'])\nplt.xlabel('Month')\nplt.ylabel('PM2.5')\nplt.title('Air Quality plot for the year 2014 and 2015')","04161897":"# Statistical information of Air Quality for the year 2014 and 2016 for PM2.5\naq_df['2014':'2016'][['month','PM2.5']].groupby('month').describe()","5d028891":"# max PM2.5 and Max & Min value of TEMP for year 2014 to 2016\naq_df['2014':'2016'][['month','PM2.5','TEMP']].groupby('month').agg({'PM2.5':['max'],'TEMP':['min','max']})","6ae62d9a":"# PM2.5 and TEMP plotting for year 2014\naq_df_2014=aq_df['2014']\npm_data_2014=aq_df_2014[['PM2.5','TEMP']]\npm_data_2014.plot(subplots=True)","bb3d7a0a":"# PM2.5 and TEMP plotting for year 2015\naq_df_2015=aq_df['2015']\npm_data_2015=aq_df_2015[['PM2.5','TEMP']]\npm_data_2015.plot(subplots=True)","0fe68bab":"# Histogram plot of PM2.5 and TEMP\naq_df[['PM2.5','TEMP']].hist()","bc90e2ba":"# Density plot of TEMP\naq_df[['TEMP']].plot(kind='density')","aad6829e":"# Density plot of PM2.5\naq_df[['PM2.5']].plot(kind='density')","7bb07cf5":"#Here lag will be Hour value, because data is filled on the basis of hour\npd.plotting.lag_plot(aq_df['TEMP'],lag=1)","fd0f3ddd":"pd.plotting.lag_plot(aq_df['TEMP'],lag=10)","d11b5f53":"#24 Hour\npd.plotting.lag_plot(aq_df['TEMP'],lag=24)","ce37ad8d":"#For 1 month, then our dataset will corelate from current month to previous month\npd.plotting.lag_plot(aq_df['TEMP'],lag=720)","2536c7d5":"# for 1 year, then our dataset will corelate from current year to previous year\npd.plotting.lag_plot(aq_df['TEMP'],lag=8760)","9aab7b81":"# For 6 month, It may be summer to winter or winter to summer\npd.plotting.lag_plot(aq_df['TEMP'],lag=4380)","1a524b51":"# For 3 months, it may be in between winter, winter and summer, or summer\npd.plotting.lag_plot(aq_df['TEMP'],lag=2190)","55674866":"# For year 2014, plotting PM2.5, TEMP, and PRessure,\n# To check the corelation between,PM2.5, TEMP, and PRessure\naq_df_2014=aq_df['2014']\npm_data_2014=aq_df_2014[['PM2.5','TEMP','PRES']]\npm_data_2014.plot(subplots=True)","2be0b2fb":"# Plotting 'TEMP','PRES','DEWP', 'RAIN','PM2.5' variables\n# To check the corelation between 'TEMP','PRES','DEWP', 'RAIN', and 'PM2.5'\nmulti_data = aq_df[['TEMP','PRES','DEWP', 'RAIN','PM2.5']]\nmulti_data.plot(subplots=True)","932817dd":"# Plotting 'SO2','NO2','O3', 'CO','PM2.5' variables\n# To check the corelation between 'SO2','NO2','O3', 'CO', and 'PM2.5'\nmulti_data = aq_df[['SO2','NO2','O3', 'CO','PM2.5']]\nmulti_data.plot(subplots=True)","bf4ecb7a":"# Plooting 'O3', and 'PM2.5' for year 2014 to 2015\naq_df['2014':'2015'][['PM2.5','O3']].plot(figsize=(20,6), linewidth=3, fontsize=15)\nplt.xlabel('year_month_day_hour', fontsize=20);","c9fd71d4":"# Checking the value of PM2.5\naq_df_2015['PM2.5']","91308cb5":"# Checking all the values for year 2015\naq_df_2015","7beacda2":"# Checking null values available or not\naq_df.isnull().values.any()","74d33e9a":"# Checking null values columns\naq_df.isnull().any()","6112b337":"# Checking of number of null values for each column\ndf.isnull().sum()","0498663a":"# Pairplot: it gives regular corelation with 2 variables\ng = sns.pairplot(aq_df[['SO2','NO2','O3', 'CO','PM2.5']])","9a602609":"# Checking correlation of variables\naq_corr=aq_df[['SO2','NO2','O3', 'CO','PM2.5']].corr(method='pearson')\naq_corr","73939464":"# Heatmap for correlation\ng = sns.heatmap(aq_corr,  vmax=.6, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot=True, fmt='.2f', cmap='coolwarm')\ng.figure.set_size_inches(10,10)\n    \nplt.show()","952b49ce":"# Calculating the mean, median, min, max for \"Wd\" variables \naq_df.groupby('wd').agg(median=('PM2.5','median'),mean=('PM2.5','mean'),max=('PM2.5','max'), min=('PM2.5','min')).reset_index()","8b32ceec":"# Dropping null values\naq_df_na = aq_df.copy()\naq_df_na=aq_df_na.dropna()","d0e3de25":"# Plotting autocorrelation_plot for new datset(without null values)\npd.plotting.autocorrelation_plot(aq_df_na['2014':'2016']['TEMP'])","4efacd94":"# Using resampling methods to plot for 1 month, 1m= 1 month, 1d= 1 Day, 1y=1 year\naq_df_na['TEMP'].resample(\"1m\").mean()","7c82df57":"# Auto correlation plot of TEMP for year 2014 to 2016 based on resampling and mean value\npd.plotting.autocorrelation_plot(aq_df_na['2014':'2016']['TEMP'].resample(\"1m\").mean())","1c441d9e":"# Auto correlation plot of PM2.5 for year 2014 to 2016 based on resampling and mean value\npd.plotting.autocorrelation_plot(aq_df_na['2014':'2016']['PM2.5'].resample(\"1m\").mean())","3288a675":"In above we can see that, positive corelation because temp changes from negative to positive.","81bf4f65":"## Descriptive Analytics","aac90946":"In above plot, strong line shows 90% confidence intervals whereas dotted line show 95% confidence intervals.","380e1c18":"In above plot, strong line shows 90% confidence intervals whereas dotted line show 95% confidence intervals.","3d012ab6":"In above we can see that, negative corelation because temp changes from positive to negative.","d84b19c4":"## Packages and Important Libraries","303a9a68":"### Lag Plot\nIt is special type of scatter plot with two variables where x-axis is current variable and y-axis is lag period.\n\nWhen lag=1, then it is called First order lag plot \\\nwhen lag=2, then it is called Second order lag plot \\\nFor lag=n, it is called Nth order lag plot. \\\n\\\nhere lag is used for auto-corelation.\n","d02fbb50":"## Exploratory Data Analysis","00e0820b":"## Data Downlaoding and reading as pandas dataframe","00566aa3":"**If you like this notebook then please upvote the notebook. It will motivate me to work more and more.**"}}