{"cell_type":{"a7ccbce6":"code","8eb58c4e":"code","0316600b":"code","3db552dd":"code","ae0ea292":"code","f6f76a72":"code","69cb7531":"code","c5047a3f":"code","33b9ac78":"code","36dbfac8":"code","eb4291d0":"code","4d492f49":"code","b4d8d39f":"code","b601b599":"code","9b29e8c5":"code","c8a6493e":"code","771567da":"code","3b11f16e":"markdown","7229fa29":"markdown","19ad2f68":"markdown","ec8b21a2":"markdown","20265d73":"markdown","9de53f67":"markdown","0fb366ee":"markdown","ff1e0a46":"markdown","c14413ce":"markdown"},"source":{"a7ccbce6":"import os\nfrom tqdm.notebook import tqdm\nimport pandas as pd\nfrom fastai.vision.all import *\nfrom fastai.tabular.all import *","8eb58c4e":"%%time\n\n### add target values to training data\n# read data\ndf = pd.read_csv(\"..\/input\/lish-moa\/train_features.csv\")\nprint(\"training data shape: \", df.values.shape)\ntargets = pd.read_csv(\"..\/input\/lish-moa\/train_targets_scored.csv\")\nprint(\"target data shape: \", targets.values.shape)\n# get target columns\ntarget_list = targets.columns.tolist()\ntarget_list.remove('sig_id')\nprint(\"total target categories: \",len(target_list))\n# create a new variable called label with index value as label\ndef randargmax(b,**kw):\n  \"\"\" a random tie-breaking argmax\"\"\"\n  return np.argmax(np.random.random(b.shape) * (b==b.max()), **kw)\ntargets['label'] = randargmax(targets[target_list].values, axis=1)\n# convert label to string\ntargets['label'] = targets['label'].apply(lambda x: \"class-\"+str(x)).astype(str)\n# merge labels to training data\ndf2 = targets[['label']].join(df)\nprint(\"merged data shape: \", df2.values.shape)\n","0316600b":"df2[['label','sig_id']].groupby('label').count().reset_index().sort_values(by='sig_id').head(10)","3db552dd":"# move low classes to another class (quick and dirty hack)\nlow_classes = ['class-82', 'class-34', 'class-141', 'class-12', 'class-125']\ndf2['label'] = df2['label'].apply(lambda x: 'class-125' if x in low_classes else x )","ae0ea292":"len(set(df2['label']))","f6f76a72":"# save to disk\ndf2.to_csv(\"training_data.csv\", index=False)\n# show results\ndf2.head()","69cb7531":"# modeling feature names\ncon_features_list = df.columns.tolist()\ncon_features_list.remove('sig_id')\ncon_features_list.remove('cp_type')\ncon_features_list.remove('cp_dose')\ncat_features_list = ['cp_type','cp_dose']","c5047a3f":"target_indexs = list([int(x.split('-')[-1]) for x in set(df2['label'])])\ntarget_indexs.sort()\nprint(target_indexs[:5])\nprint(len(target_indexs))","33b9ac78":"path = \".\/training_data.csv\"\n\ndls = TabularDataLoaders.from_csv(path, path=path, y_names=\"label\",\n    cat_names = cat_features_list,\n    cont_names = con_features_list,\n    procs = [Categorify, FillMissing, Normalize]\n)","36dbfac8":"learn = tabular_learner(dls, metrics=accuracy)","eb4291d0":"%%time\n\nlearn.fit_one_cycle(4)","4d492f49":"test = pd.read_csv(\"..\/input\/lish-moa\/test_features.csv\")\nsub = pd.read_csv(\"..\/input\/lish-moa\/sample_submission.csv\")","b4d8d39f":"target_indexs_f = [i + 1 for i in target_indexs]\nprint(len(target_indexs_f))","b601b599":"len(sub.iloc[0,target_indexs_f])","9b29e8c5":"%%time\n\nfor index, row in tqdm(sub.iterrows()):\n    row, clas, probs = learn.predict(test.iloc[index])\n    sub.iloc[index,target_indexs_f] = probs.numpy()","c8a6493e":"sub.to_csv(\"submission.csv\", index=False)\nsub.head()","771567da":"len(probs)","3b11f16e":"# Submission","7229fa29":"# MOA Basic Fast.ai\n\n - Using learnings from chapter 01 of fastbook\n - Additional Resources:\n  - https:\/\/docs.fast.ai\/tabular.learner.html#TabularLearner.predict\n  - https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.join.html\n  - https:\/\/stackoverflow.com\/questions\/16476924\/how-to-iterate-over-rows-in-a-dataframe-in-pandas","19ad2f68":"# Define Features & Prep Data for Fast.ai","ec8b21a2":"Save the names of continuous and categorical features for Fast.ai","20265d73":"# Modeling","9de53f67":"# Imports","0fb366ee":"Get indexs of targets that are being used in model, which we need for submission","ff1e0a46":"targets with very low volume mess things up, so let's not model them for now","c14413ce":"Save new training data to disk for Fast.ai"}}