{"cell_type":{"1ed40300":"code","f051c442":"code","43c13d83":"code","2ae0ae3a":"code","53bf2a13":"code","a433abd5":"code","de364994":"code","4d514fac":"code","ced0b666":"code","c51112e9":"code","b7029fcb":"code","0e5548ad":"code","b20654c2":"code","2144d8f5":"code","c37a12ea":"code","4f8474fc":"code","adc28545":"code","70e73d6a":"code","0ae70854":"code","751413aa":"code","c27b6c84":"code","6224e611":"code","baba03b1":"code","9e892260":"code","381a5a84":"code","8954cf20":"markdown","06d6e548":"markdown","442cbe60":"markdown","cf3f9303":"markdown","1f589e58":"markdown","da63c90b":"markdown","f4eb6042":"markdown","996ae3f2":"markdown","4351a9be":"markdown","c3bd9394":"markdown","8af5c92a":"markdown","60e6d562":"markdown","aac2d344":"markdown"},"source":{"1ed40300":"import pandas as pd\nimport numpy as np","f051c442":"source = 'http:\/\/bit.ly\/w-data'\ndata = pd.read_csv(source)\n\ndata","43c13d83":"data.head(5)","2ae0ae3a":"data.tail()","53bf2a13":"data.info()","a433abd5":"data.shape","de364994":"data.duplicated().sum()","4d514fac":"data.describe(include='all')","ced0b666":"data.isnull().sum()","c51112e9":"data.nunique()","b7029fcb":"data.plot.scatter(x='Hours', y='Scores', figsize = (5,4), marker = 'o',color = 'blue')","0e5548ad":" data.corr()","b20654c2":"TargetVariable = ['Scores']\nPredictor = ['Hours']\nX = data[Predictor].values\ny = data[TargetVariable].values","2144d8f5":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=True, random_state=0)\n\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","c37a12ea":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score, accuracy_score\nRegModel = LinearRegression()","4f8474fc":"LREG=RegModel.fit(X_train,y_train)\ntrain_prediction=LREG.predict(X_train)\n\nprint('The value of slope is: ',LREG.coef_)\nprint('The value of Intercept is: ',LREG.intercept_)\n\nprint('r-squared for training data',r2_score(train_prediction,y_train))\ntest_prediction = LREG.predict(X_test)\nprint('r-squared for testing data',r2_score(test_prediction,y_test))\nprint('Accuracy(MAPE):', 100-(np.mean(np.abs((y_test-test_prediction) \/ y_test)) * 100))","adc28545":"import copy\ndata1 = copy.deepcopy(data)\npredicted_scores = LREG.predict(X)\ndata1['Predicted_Scores'] = predicted_scores","70e73d6a":"import matplotlib.pyplot as plt\nplt.scatter(x = data['Hours'],y = data['Scores'])\nplt.plot(data1['Hours'], data1['Predicted_Scores'], color = 'green')\n\nplt.xlabel('Hours')\nplt.ylabel('Scores')\nplt.show()","0ae70854":"from sklearn.neighbors import KNeighborsRegressor\nModel = KNeighborsRegressor(n_neighbors=10)\n\nKNN=Model.fit(X_train,y_train)\nprediction=KNN.predict(X_test)\n\nprint('R2 Value:',r2_score(y_train, KNN.predict(X_train))) # Measuring goodness of fit in training data\n\nprint('Accuracy',100- (np.mean(np.abs((y_test - prediction) \/ y_test)) * 100)) # Measuring Accuracy in testing data","751413aa":"from sklearn.preprocessing import StandardScaler\nPredictorScaler=StandardScaler()\nTargetVarScaler=StandardScaler()\n\n# Storing the fit object for later reference\nPredictorScalerFit=PredictorScaler.fit(X)\nTargetVarScalerFit=TargetVarScaler.fit(y)\n\n# Generating the standardized values of X and y\nX_standard=PredictorScalerFit.transform(X)\ny_standard=TargetVarScalerFit.transform(y)\n\n\n# Split the data into training and testing set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_standard, y_standard, test_size=0.2, random_state=0)\n","c27b6c84":"LREG=RegModel.fit(X_train,y_train)\ntrain_prediction=LREG.predict(X_train)\n\nprint('The value of slope is: ',LREG.coef_)\nprint('The value of Intercept is: ',LREG.intercept_)\n\nprint('r-squared for training data',r2_score(train_prediction,y_train))\ntest_prediction = LREG.predict(X_test)\nprint('r-squared for testing data',r2_score(test_prediction,y_test))\nprint('Accuracy(MAPE):', 100-(np.mean(np.abs((y_test-test_prediction) \/ y_test)) * 100))","6224e611":"from sklearn.neighbors import KNeighborsRegressor\nModel = KNeighborsRegressor(n_neighbors=10)\n\nKNN=Model.fit(X_train,y_train)\nprediction=KNN.predict(X_test)\n\nprint('R2 Value:',r2_score(y_train, KNN.predict(X_train))) # Measuring goodness of fit in training data\n\nprint('Accuracy',100- (np.mean(np.abs((y_test - prediction) \/ y_test)) * 100)) # Measuring Accuracy in testing data","baba03b1":"from sklearn.preprocessing import MinMaxScaler\n\nX = data[['Hours']]\ny = data['Scores']\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=0)\n\nnorm = MinMaxScaler().fit(X_train)\n\nX_train_norm = norm.transform(X_train)\nprint(\"Scaled Train Data: \\n\\n\")\nprint(X_train_norm)\n\nX_test_norm = norm.transform(X_test)\nprint(\"\\n\\nScaled Test Data: \\n\\n\")\nprint(X_test_norm)","9e892260":"LREG=RegModel.fit(X_train,y_train)\ntrain_prediction=LREG.predict(X_train)\n\n\nprint('r-squared for training data',r2_score(train_prediction,y_train))\ntest_prediction = LREG.predict(X_test)\nprint('r-squared for testing data',r2_score(test_prediction,y_test))\nprint('Accuracy(MAPE):', 100-(np.mean(np.abs((y_test-test_prediction) \/ y_test)) * 100))","381a5a84":"from sklearn.neighbors import KNeighborsRegressor\nRegModel1 = KNeighborsRegressor(n_neighbors=10)\n\nKNN=RegModel1.fit(X_train,y_train)\nprediction=KNN.predict(X_test)\n\nprint('R2 Value:',r2_score(y_train, KNN.predict(X_train))) # Measuring goodness of fit in training data\n\nprint('Accuracy',100- (np.mean(np.abs((y_test - prediction) \/ y_test)) * 100)) # Measuring Accuracy in testing data","8954cf20":"##### Generating scatterplot for numeric columns in data","06d6e548":"#### Training And Testing The Data","442cbe60":"#### Linear Regression (Standardized)","cf3f9303":"### Normalization","1f589e58":"#### KNN (Standardized)","da63c90b":"#### KNN (Standardized)","f4eb6042":"#### Equation of Simple Linear Regression Model becomes","996ae3f2":"### Standardization","4351a9be":"Scores = 9.775 * Hours + 2.483","c3bd9394":"#### Linear Regression (Standardized)","8af5c92a":"#### Linear Regression","60e6d562":"### Machine Learning Aalgorithm ","aac2d344":"### KNN"}}