{"cell_type":{"d011c367":"code","1388af82":"code","54d336e9":"code","111437a7":"code","5441af41":"code","7d87a2b9":"code","36ec0ecb":"code","8feb057d":"code","e6e0c70a":"code","3dae6850":"code","1ea3f8bc":"code","b8859b84":"code","4f57aff8":"code","25e047d7":"code","38fb6a26":"code","96f1287a":"code","295bdd57":"code","ffa4b091":"code","e846a19b":"code","32348f89":"code","182cc326":"code","69df36b7":"code","6df8c983":"code","534cbbb9":"code","37917fbd":"code","de013cb7":"code","489b7d82":"code","01fd0723":"code","c3e9bccc":"code","3269c199":"code","6557aeef":"code","f463d17d":"code","b718e18b":"code","5e7ce236":"code","3122d442":"code","c078c553":"markdown","6f67977e":"markdown","54f298f0":"markdown","6b89261d":"markdown","6d3fe2e1":"markdown","a2ca6494":"markdown","aaa6a016":"markdown","98fa51e8":"markdown","0c799bb6":"markdown","44708523":"markdown","f6217a59":"markdown","575023cb":"markdown","d0c5c561":"markdown","8cb589e5":"markdown","b91c2ad0":"markdown"},"source":{"d011c367":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1388af82":"df = pd.read_csv('\/kaggle\/input\/high-value-customers-identification\/Ecommerce.csv',encoding = 'unicode_escape')","54d336e9":"import matplotlib.pyplot as plt\nimport seaborn as sns","111437a7":"df.head()","5441af41":"df.describe()","7d87a2b9":"df.describe(include=['O'])","36ec0ecb":"df.drop('Unnamed: 8',axis=1,inplace=True)","8feb057d":"df.isnull().sum()","e6e0c70a":"#Convert to show date only\ndf['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])","3dae6850":"# Create TotalSum colummn\ndf[\"TotalSum\"] = df[\"Quantity\"] * df[\"UnitPrice\"]","1ea3f8bc":"# Create date variable that records recency\nimport datetime\nsnapshot_date = max(df.InvoiceDate) + datetime.timedelta(days=1)\nsnapshot_date","b8859b84":"# Aggregate data by each customer\ncustomers = df.groupby(['CustomerID']).agg({\n    'InvoiceDate': lambda x: (snapshot_date - x.max()).days,\n    'InvoiceNo': 'count',\n    'TotalSum': 'sum'})","4f57aff8":"# Rename columns\ncustomers.rename(columns = {'InvoiceDate': 'Recency',\n                            'InvoiceNo': 'Frequency',\n                            'TotalSum': 'MonetaryValue'}, inplace=True)","25e047d7":"customers.head()","38fb6a26":"customers_fix = customers.copy()","96f1287a":"fig, ax = plt.subplots(1, 3, figsize=(15,3))\nsns.distplot(customers['Recency'], ax=ax[0])\nsns.distplot(customers['Frequency'], ax=ax[1])\nsns.distplot(customers['MonetaryValue'], ax=ax[2])\nplt.tight_layout()\nplt.show();","295bdd57":"from sklearn.preprocessing import QuantileTransformer\ntransformer = QuantileTransformer(n_quantiles=100, random_state=1111, output_distribution='normal')\ntransformer.fit(customers[['Frequency']])\ncustomers_fix['Frequency_RankGauss'] = transformer.transform(customers[['Frequency']])\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=[12,5])\nax1.hist(customers['Frequency'],bins=100)\nax1.title.set_text('Original Data')\nax2.hist(customers_fix['Frequency_RankGauss'],bins=100)\nax2.title.set_text('RankGauss-ed Data')\nplt.show()\nprint(customers['Frequency'].skew().round(2))\nprint(customers_fix['Frequency_RankGauss'].skew().round(2))","ffa4b091":"from sklearn.preprocessing import QuantileTransformer\ntransformer = QuantileTransformer(n_quantiles=100, random_state=1111, output_distribution='normal')\ntransformer.fit(customers[['Recency']])\ncustomers_fix['Recency_RankGauss'] = transformer.transform(customers[['Recency']])\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=[12,5])\nax1.hist(customers['Recency'],bins=100)\nax1.title.set_text('Original Data')\nax2.hist(customers_fix['Recency_RankGauss'],bins=100)\nax2.title.set_text('RankGauss-ed Data')\nplt.show()\nprint(customers['Recency'].skew().round(2))\nprint(customers_fix['Recency_RankGauss'].skew().round(2))","e846a19b":"from sklearn.preprocessing import QuantileTransformer\ntransformer = QuantileTransformer(n_quantiles=100, random_state=1111, output_distribution='normal')\ntransformer.fit(customers[['MonetaryValue']])\ncustomers_fix['MonetaryValue_RankGauss'] = transformer.transform(customers[['MonetaryValue']])\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=[12,5])\nax1.hist(customers['MonetaryValue'],bins=100)\nax1.title.set_text('Original Data')\nax2.hist(customers_fix['MonetaryValue_RankGauss'],bins=100)\nax2.title.set_text('RankGauss-ed Data')\nplt.show()\nprint(customers['Frequency'].skew().round(2))\nprint(customers_fix['MonetaryValue_RankGauss'].skew().round(2))","32348f89":"customers_fix.drop(['Recency','Frequency','MonetaryValue'],axis=1,inplace=True)","182cc326":"customers_fix.head()","69df36b7":"customers_fix.rename(columns={\"Recency_RankGauss\":\"Recency\",\"Frequency_RankGauss\":\"Frequency\",\"MonetaryValue_RankGauss\":\"MonetaryValue\"},inplace=True)","6df8c983":"customers_fix.head()","534cbbb9":"# Import library\nfrom sklearn.preprocessing import StandardScaler\n# Initialize the Object\nscaler = StandardScaler()\n# Fit and Transform The Data\nscaler.fit(customers_fix)\ncustomers_normalized = scaler.transform(customers_fix)\n# Assert that it has mean 0 and variance 1\nprint(customers_normalized.mean(axis = 0).round(2)) # [0. -0. 0.]\nprint(customers_normalized.std(axis = 0).round(2)) # [1. 1. 1.]","37917fbd":"pd.DataFrame(customers_normalized).head()","de013cb7":"from sklearn.cluster import KMeans\n\nsse = {}\nfor k in range(1, 11):\n    kmeans = KMeans(n_clusters=k, random_state=42)\n    kmeans.fit(customers_normalized)\n    sse[k] = kmeans.inertia_ # SSE to closest cluster centroid\n\nplt.title('The Elbow Method')\nplt.xlabel('k')\nplt.ylabel('SSE')\nsns.pointplot(x=list(sse.keys()), y=list(sse.values()))\nplt.show()","489b7d82":"model = KMeans(n_clusters=3, random_state=42)\nmodel.fit(customers_normalized)\nmodel.labels_.shape","01fd0723":"customers.shape","c3e9bccc":"customers[\"Cluster\"] = model.labels_\ncustomers.head()","3269c199":"customers.groupby('Cluster').agg({\n    'Recency':'mean',\n    'Frequency':'mean',\n    'MonetaryValue':['mean', 'count']}).round(1)","6557aeef":"df_normalized = pd.DataFrame(customers_normalized, columns=['Recency', 'Frequency', 'MonetaryValue'])\ndf_normalized['ID'] = customers.index\ndf_normalized['Cluster'] = model.labels_\ndf_normalized.head()","f463d17d":"# Melt The Data\ndf_nor_melt = pd.melt(df_normalized.reset_index(),\n                      id_vars=['ID', 'Cluster'],\n                      value_vars=['Recency','Frequency','MonetaryValue'],\n                      var_name='Attribute',\n                      value_name='Value')\ndf_nor_melt.head()","b718e18b":"sns.lineplot('Attribute', 'Value', hue='Cluster', data=df_nor_melt);","5e7ce236":"customers.groupby('Cluster').agg({\n    'Recency':'mean',\n    'Frequency':'mean',\n    'MonetaryValue':['mean', 'count']}).round(1)","3122d442":"cluster_avg = customers.groupby('Cluster').mean()\npopulation_avg = customers.mean()\nrelative_imp = cluster_avg \/ population_avg - 1\nrelative_imp","c078c553":"#### Scaling the new created Columns","6f67977e":"#### Manage Skewness","54f298f0":"### Manage Skewness and Scaling","6b89261d":"The data should meet assumptions where the variables are not skewed and have the same mean and variance.","6d3fe2e1":"the k-value of 3 is the best hyperparameter for our model because the next k-value tend to have a linear trend. Therefore, our best model for the data is K-Means with the number of clusters is 3.","a2ca6494":"summarize the RFM table based on clusters and calculate the mean of each variable","aaa6a016":"To make the RFM table, we can create these columns, such as Recency, Frequency, and MonetaryValue column.","98fa51e8":"### Modelling","0c799bb6":"Snake plots\nBy using this plot, we can have a good visualization from the data on how the cluster differs from each other","44708523":"K-Means algorithm is an unsupervised learning algorithm that uses the geometrical principle to determine which cluster belongs to the data. By determine each centroid, we calculate the distance to each centroid. Each data belongs to a centroid if it has the smallest distance from the other.\nTo determine which hyperparameter is the best for our model and data, we can use the elbow method to decide","f6217a59":"#### Choose k-number","575023cb":"**Game Plan:**\n\n    Gather the data\n    Create Recency Frequency Monetary (RFM) table\n    Manage skewness and scale each variable\n    Explore the data\n    Cluster the data\n    Interpret the result","d0c5c561":"1. Customers in cluster 0 are new \n1. Customers in clister 1 are churning \n1. Customers in Cluster 2 are loyal","8cb589e5":"### Cluster Analysis","b91c2ad0":"### Create The RFM Table"}}