{"cell_type":{"ed713f5d":"code","59e7d49a":"code","4b16424b":"code","fed309c1":"code","0fecd64b":"code","8f676b11":"code","b6508a88":"code","f13a34ac":"code","14932cfb":"code","6e1e4f85":"code","d1d692a0":"code","ce2277df":"code","246977c3":"code","d35652ce":"code","4a1c2305":"code","654b3990":"markdown","6fcd6c56":"markdown","61d557e4":"markdown","e433d372":"markdown","4fda0f34":"markdown","f92b5721":"markdown"},"source":{"ed713f5d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59e7d49a":"df=pd.read_csv('\/kaggle\/input\/credit-card-customers\/BankChurners.csv')\ndf.head()","4b16424b":"df.shape","fed309c1":"#dropping the last two columns, we don't need them\ndf.drop(['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2','Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1'],axis=1,inplace=True)\n\n#dividing the dataset into feature set and target set.\nx=df.drop('Attrition_Flag',axis=1)\ny=df['Attrition_Flag']","0fecd64b":"#getting dummy variables for object type data\nobj_list=x.select_dtypes(include='object')\nfloat_list=x.select_dtypes(exclude='object')\nobj_list=pd.get_dummies(obj_list)\nx=pd.concat([obj_list,float_list],axis=1)","8f676b11":"# Existing Customer => 1\n# Attrited Customer => 0\ny.replace(['Existing Customer','Attrited Customer'],[1,0],inplace=True)\n#I have simply replace \"existing customer\" and \"Attrited Customer\" of our target set by 1 and 0 respectively.\n#One can use it using LaberEncoding","b6508a88":"import warnings\nwarnings.filterwarnings('ignore')\nimport seaborn as sns\nsns.countplot(y)","f13a34ac":"#The data is highly imbalanced. \n#proportion of Existing Customer and Attrited Customer to the dataset.\nprint(\" Existing Customer : \",len(df[df['Attrition_Flag']=='Existing Customer'])\/len(df))\nprint(\" Attrited Customer : \",len(df[df['Attrition_Flag']=='Attrited Customer'])\/len(df))","14932cfb":"from imblearn.over_sampling import SMOTE\nsmote=SMOTE(random_state=60)\nx_smote,y_smote=smote.fit_resample(x,y)","6e1e4f85":"sns.countplot(y_smote)","d1d692a0":"#splitting given dataset into training set and testing set using train_test_split. \nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x_smote,y_smote,test_size=0.2,random_state=4)\nfrom sklearn.preprocessing import StandardScaler","ce2277df":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\nrf=make_pipeline(StandardScaler(),RandomForestClassifier(n_estimators=1000))","246977c3":"rf.fit(x_train,y_train)\nyhat=rf.predict(x_test)","d35652ce":"from sklearn.metrics import roc_curve\nfpr, tpr, thresh = roc_curve(y_test,rf.predict_proba(x_test)[:,1], pos_label=1)\nplt.plot(fpr, tpr,label='Random Forest Classifier')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')","4a1c2305":"from sklearn.metrics import roc_auc_score,classification_report\nprint(classification_report(yhat,y_test))\nprint(\"roc auc score : \",roc_auc_score(yhat,y_test))","654b3990":"The ROC curve shows the trade-off between sensitivity (or TPR) and specificity (1 \u2013 FPR). Classifiers that give curves closer to the top-left corner indicate a better performance.Here we can see that the curve is very close to top-left corner, which shows the performance of our model is good in our dataset.","6fcd6c56":"83% of the data contains Data of Existing Customer and only 17% data contains data of Attrited Customer.<br>If we use this data to train any model than the model would be biased towards Existing Customer.<br>To deal with this we would need to use some under sampling techniques or over sampling techniques to balance the data.<br>Here I am using SMOTE to deal with this.","61d557e4":"Dataset contains 10127 data and 23 variables.","e433d372":"The model classifies the data with 97% precision,recall and roc_auc_score.","4fda0f34":"After using SMOTE,we can see the data is now balanced. so, we could proceed towards training the model.","f92b5721":"Let me know how could i improve this model.<br>\nThank You."}}