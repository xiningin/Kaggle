{"cell_type":{"64fb0368":"code","6dbe2042":"code","47f7346e":"code","c0601a1d":"code","605125e1":"code","f82146d4":"code","c85822fa":"code","91dfc431":"code","8824296d":"code","4eb91b39":"code","e6353a6c":"code","1017fb45":"code","fdad0687":"code","fdf1273c":"code","e0ecc09b":"code","91659367":"code","e5bca832":"code","7a8e8ff0":"code","390c8ac4":"code","981a69d8":"code","e8ec9934":"code","a1ad3256":"code","e64fc504":"code","40ab571d":"code","eda4ba6f":"code","f6d005b7":"code","db77e506":"code","89a62d60":"code","6b9606a7":"code","d0aeec30":"code","73ca4d50":"code","61e8e3ac":"code","786fdcfd":"code","2cee28a7":"code","5e25274b":"code","ac5905b1":"code","f9c9ab9d":"code","f44d038a":"code","0d754d8f":"code","f7a4c2a1":"code","d3ac6b68":"code","a43fa159":"code","5cc0cf2f":"code","12ea0e65":"code","b776a4bc":"code","52ff6b93":"code","66176271":"code","e5bce8f7":"code","6a4e0074":"code","65839bd8":"code","040954dc":"code","c92fd58a":"code","e6579ea0":"code","f361ddc0":"code","12157810":"code","7a58cb12":"code","291e798f":"code","ea5aea62":"code","2dda23ce":"code","51cf1000":"code","3a1f526c":"code","cda02923":"code","afbc6b52":"code","14a97ca3":"code","96cfbbb5":"code","264208c7":"code","514f2384":"code","f11a84f4":"code","21506254":"code","a0a41dc7":"code","800f4a5b":"code","fae5372e":"code","b8595a8f":"code","16d934e8":"code","d0885169":"markdown","b95353b2":"markdown","93601d21":"markdown","966e5c6b":"markdown","4a14a052":"markdown","ec4012e0":"markdown","3f33d764":"markdown","7ff1dd6a":"markdown","965a0df1":"markdown","ff3d26de":"markdown","6bca9afc":"markdown","1ae55e00":"markdown","f202dd84":"markdown","7ec77c20":"markdown","dc619bc7":"markdown","b0409cf8":"markdown","62d0f7a8":"markdown","4747e876":"markdown","66956207":"markdown","246f5e84":"markdown","4bb9025a":"markdown","3252edac":"markdown","1737596c":"markdown","11dcb0a4":"markdown","ee41bed9":"markdown","1cd6f547":"markdown","91a7d2da":"markdown","4874fd74":"markdown","34afd17a":"markdown","b79e4ac7":"markdown","f043a147":"markdown","ad0c62ee":"markdown","1c550d33":"markdown","39c4e766":"markdown","b5776a99":"markdown","2b54784c":"markdown","29fdcfd9":"markdown","c91cd9d0":"markdown","bdfbb7a7":"markdown","0e8872d4":"markdown","c4cfab14":"markdown","d7c38b29":"markdown","e915dbac":"markdown","4698a270":"markdown","11e782eb":"markdown","f15eb9c9":"markdown","d6c248f2":"markdown","bffe2850":"markdown","5ead0011":"markdown","17710014":"markdown","cfc97c4a":"markdown","ce80a525":"markdown","0f2f7e15":"markdown","c5078573":"markdown","8cf37a5f":"markdown","2547cb9b":"markdown","d638c943":"markdown","e5458c74":"markdown","597c4470":"markdown","e419409e":"markdown"},"source":{"64fb0368":"import pandas as pd","6dbe2042":"from subprocess import check_output\nprint(check_output([\"ls\", \"\/kaggle\/input\/\"]).decode(\"utf8\"))","47f7346e":"data = {\n    'apples': [3, 2, 0, 1], \n    'oranges': [0, 3, 7, 2]\n}","c0601a1d":"purchases = pd.DataFrame(data)","605125e1":"purchases","f82146d4":"purchases[\"bananas\"] = [4, 5, 6, 7]\npurchases[\"purchase_id\"] = [1, 2, 3, 4]","c85822fa":"purchases.head()","91dfc431":"df = pd.read_csv(\"\/kaggle\/input\/loandata\/loanData.csv\")","8824296d":"#df = pd.read_csv('\/kaggle\/input\/seasoncompactresults\/RegularSeasonCompactResults.csv')","4eb91b39":"df.head(10)","e6353a6c":"df.tail()","1017fb45":"df.shape","fdad0687":"df.index.tolist()","fdf1273c":"df.columns.tolist()","e0ecc09b":"df.describe()","91659367":"df.info()","e5bca832":"df.max()","7a8e8ff0":"df['emp_length_int'].max()","390c8ac4":"df['installment'].mean()","981a69d8":"df['installment'].idxmax()","e8ec9934":"df['purpose'].value_counts()","a1ad3256":"df['loan_amount'].max()","e64fc504":"max_loan = df.iloc[[df['loan_amount'].idxmax()]]\nmax_loan[[\"loan_amount\"]]\nlen(max_loan)","40ab571d":"type(df.iloc[[df['loan_amount'].idxmax()]])","eda4ba6f":"type(df.iloc[[df['loan_amount'].idxmax()]])","f6d005b7":"df.iloc[:3]","db77e506":"df.loc[:3]","89a62d60":"max_loan = df.loc[[df['loan_amount'].idxmax(axis = 0)]]\nmax_loan[\"loan_amount\"]","6b9606a7":"df.at[df['loan_amount'].idxmax(), 'loan_amount']","d0aeec30":"df = pd.read_csv(\"\/kaggle\/input\/loandata\/loanData.csv\")","73ca4d50":"df.describe()","61e8e3ac":"df[[\"year\"]].describe()","786fdcfd":"df[[\"year\"]].info()","2cee28a7":"df.columns","5e25274b":" df.iloc[:, 5]","ac5905b1":" df.iloc[ :,4:7]","f9c9ab9d":"df.iloc[3]","f44d038a":"df.iloc[3:7]","0d754d8f":"df.iloc[3:7, 3:7]","f7a4c2a1":"df.iloc[:,3].name","d3ac6b68":"df.columns.get_loc(\"final_d\")","a43fa159":"df.drop_duplicates()[\"id\"].count()","5cc0cf2f":"df.drop_duplicates(subset =\"interest_rate\")[\"id\"].count()","12ea0e65":"df.drop_duplicates()[\"id\"].count()","b776a4bc":"df.count()","52ff6b93":"# dropping ALL duplicte values \ndf.drop_duplicates(subset =\"interest_rate\", \n                     keep = \"first\", inplace=True)","66176271":"df.count()","e5bce8f7":"df.sort_values('loan_amount').head()","6a4e0074":"df.sort_values('loan_amount', ascending=False)","65839bd8":"df.sort_values(['home_ownership', 'annual_inc'])","040954dc":"df[df['interest_rate'] > 15.2]","c92fd58a":"df[(df['interest_rate'] > 15.2) & (df['total_pymnt'] > 20000)]","e6579ea0":"df.groupby('home_ownership').size()","f361ddc0":"type(df.groupby('home_ownership'))","12157810":"df.groupby('home_ownership').groups.keys()","7a58cb12":"df.groupby('home_ownership').groups[\"MORTGAGE\"]","291e798f":"df.groupby('home_ownership')['interest_rate'].mean().head()","ea5aea62":"df.groupby('home_ownership')['interest_rate'].max().head()","2dda23ce":"df.groupby('home_ownership').agg({\"interest_rate\": [\"min\", \"max\", \"mean\"],\n                                 \"annual_inc\": [\"min\", \"max\", \"mean\"],\n                                 \"installment\": [\"min\", \"max\", \"mean\"] })","51cf1000":"df.groupby(['home_ownership','income_category']).size()","3a1f526c":"user_device = pd.read_csv(\"\/kaggle\/input\/user-stats\/user_device.csv\")\nuser_usage = pd.read_csv(\"\/kaggle\/input\/user-stats\/user_usage.csv\")","cda02923":"user_device.head()","afbc6b52":"user_device.head(10)","14a97ca3":"result1 = pd.merge(user_usage,\n                user_device[['use_id', 'platform', 'device']],\n                 on='use_id')","96cfbbb5":"result1.count()","264208c7":"result2 = pd.merge(user_usage,\n                 user_device[['use_id', 'platform', 'device']],\n                 on='use_id')","514f2384":"result2.count()","f11a84f4":"result3 = pd.merge(user_usage,\n                 user_device[['use_id', 'platform', 'device']],\n                 on='use_id', how = 'left')","21506254":"result3.count()","a0a41dc7":"df.isnull().sum()","800f4a5b":"df.dropna()\ndf.fillna(0)","fae5372e":"import matplotlib.pyplot as plt\n%matplotlib inline","b8595a8f":"ax = df['interest_rate'].plot.hist(bins=20)\nax.set_xlabel('Interest Rate Histogram')","16d934e8":"## 2 columns\ndf.plot(y='recoveries', x='total_pymnt')","d0885169":"1. Drop duplicates on the entire set","b95353b2":"![](http:\/\/)We can also extract all the column names as a list, by using the **columns** attribute and can extract the rows with the **index** attribute","93601d21":"<b>Let's try a combination of selecting rows and columns<\/b>","966e5c6b":"One of the big jobs of doing well in Kaggle competitions is that of data cleaning. A lot of times, the CSV file you're given (especially like in the Titanic dataset), you'll have a lot of missing values in the dataset, which you have to identify. The following **isnull** function will figure out if there are any missing values in the dataframe, and will then sum up the total for each column. In this case, we have a pretty clean dataset.","4a14a052":"Then, in order to get attributes about the game, we need to use the **iloc[]** function. Iloc is definitely one of the more important functions. The main idea is that you want to use it whenever you have the integer index of a certain row that you want to access. As per Pandas documentation, iloc is an \"integer-location based indexing for selection by position.\"","ec4012e0":"# Core Components of Pandas","3f33d764":"Let's try to find the mean installment paid","7ff1dd6a":"If you do end up having missing values in your datasets, be sure to get familiar with these two functions. \n* **dropna()** - This function allows you to drop all(or some) of the rows that have missing values. \n* **fillna()** - This function allows you replace the rows that have missing values with the value that you pass in.","965a0df1":"Now, let's say we want to find all of the rows that satisy a particular condition. For example, I want to find all the elements where interest rate is greater than 15.2.","ff3d26de":"The other really important function in Pandas is the **loc** function. Contrary to iloc, which is an integer based indexing, loc is a \"Purely label-location based indexer for selection by label\". Since all the games are ordered from 0 to 145288, iloc and loc are going to be pretty interchangable in this type of dataset","6bca9afc":"One of the most useful functions that you can call on certain columns in a dataframe is the **value_counts()** function. It shows how many times each item appears in the column. This particular command shows the number of games in each season","1ae55e00":"Notice the slight difference in that iloc is exclusive of the second number, while loc is inclusive. ","f202dd84":"Okay, so now let's looking at information that we want to extract from the dataframe. Let's say I wanted to know the max value of a certain column. The function **max()** will show you the maximum values of all columns","7ec77c20":"Another important function in Pandas is **groupby()**. This is a function that allows you to group entries by certain attributes (e.g Grouping entries by Wteam number) and then perform operations on them. ","dc619bc7":"* **drop()** - This function removes the column or row that you pass in (You also have the specify the axis). \n* **agg()** - The aggregate function lets you compute summary statistics about each group\n* **apply()** - Lets you apply a specific function to any\/all elements in a Dataframe or Series\n* **get_dummies()** - Helpful for turning categorical data into one hot vectors.\n* **drop_duplicates()** - Lets you remove identical rows","b0409cf8":"Aggregation withing groupby","62d0f7a8":"<b>How about third row (nth row)?<\/b>","4747e876":"<b> How do we access third column (nth column)?<\/b>","66956207":"Let's say that we want to sort the dataframe in increasing order for the scores of the losing team.\n\n1. Sort in ascending and descending order","246f5e84":"We can see the dimensions of the dataframe using the the **shape** attribute","4bb9025a":"Drop duplicates based on one column","3252edac":"1. Then, if you'd like to specifically get the max value for a particular column, you pass in the name of the column using the bracket indexing operator","1737596c":"# Loading in Data","11dcb0a4":"If you'd like to see more discussion on how loc and iloc are different, check out this great Stack Overflow post: http:\/\/stackoverflow.com\/questions\/31593201\/pandas-iloc-vs-ix-vs-loc-explanation. Just remember that **iloc looks at position** and **loc looks at labels**. Loc becomes very important when your row labels aren't integers. ","ee41bed9":"Grouping by multiple columns","1cd6f547":"<b>Describe a column and get more info<\/b>","91a7d2da":"# Data Cleaning","4874fd74":"<b>How to get list of columns? <\/b>","34afd17a":"# Introduction","b79e4ac7":"When you see data displayed in the above format, you're dealing with a Pandas **Series** object, not a dataframe object.","f043a147":"# Sorting","ad0c62ee":"Pandas is one of the most popular Python libraries for Data Science and Analytics. It helps you to manage two-dimensional data tables in Python. ","1c550d33":"Any idea why? ","39c4e766":"Pandas can read data from a lot of different formats, let's try to read the data from a csv format. \nWe can also read data from excel format (pd.read_excel)","b5776a99":"Pandas has been around for a while and there are a lot of other good resources if you're still interested on getting the most out of this library. \n* http:\/\/pandas.pydata.org\/pandas-docs\/stable\/10min.html\n* https:\/\/www.datacamp.com\/community\/tutorials\/pandas-tutorial-dataframe-python\n* http:\/\/www.gregreda.com\/2013\/10\/26\/intro-to-pandas-data-structures\/\n* https:\/\/www.dataquest.io\/blog\/pandas-python-tutorial\/\n* https:\/\/drive.google.com\/file\/d\/0ByIrJAE4KMTtTUtiVExiUGVkRkE\/view\n* https:\/\/www.youtube.com\/playlist?list=PL5-da3qGB5ICCsgW1MxlZ0Hq8LL5U3u9y","2b54784c":"But what if we want to see the whole record with maximum employee length? We can call the **argmax()** function to identify the row index","29fdcfd9":"# The Basics","c91cd9d0":"In order to get a better idea of the type of data that we are dealing with, we can call the **describe()** function to see statistics like mean, min, etc about each column of the dataset. ","bdfbb7a7":"Multiple aggregations withing same groupby","0e8872d4":"# Acessing Values","c4cfab14":"# Filtering Rows Conditionally","d7c38b29":"Let's check the count of our dataset now","e915dbac":"# Lots of Other Great Resources","4698a270":"Let's try to add two new columns, bananas and the purchase ID","11e782eb":"Below is an example of how you can use loc to acheive the same task as we did previously with iloc","f15eb9c9":"## Merging two datasets","d6c248f2":"Just think of it as a table for now. ","bffe2850":"# Other Useful Functions","5ead0011":"<b>What if we want to drop duplicates? <\/b>","17710014":"<b>How about row 3:6?<\/b>","cfc97c4a":"# Grouping","ce80a525":"1. Series: \nEssentially a single column\n2. DataFrame:\nMuti-dimensional table made up of series\n\n\nLet's try to create our dataframe using dict, define a dict for purchases, with keys: apples and oranges. \n","0f2f7e15":"An interesting way of displaying Dataframes is through matplotlib. ","c5078573":"A faster version uses the **at()** function. At() is really useful wheneever you know the row label and the column label of the particular value that you want to get. ","8cf37a5f":"Now that we have our dataframe in our variable df, let's look at what it contains. We can use the function **head()** to see the first couple rows of the dataframe (or the function **tail()** to see the last few rows).","2547cb9b":"## DAY 2\n\n# Recap\n\nLet's try to load the data (loan data), get information about it","d638c943":"<b>What if I want columns from 4th to 6th?<\/b>","e5458c74":"2. Sort by multiple columns","597c4470":"# Visualizing Data","e419409e":"This also works if you have multiple conditions. I want to find all the elements where interest rate is greater than 15.2 and total payment is greater than 20000"}}