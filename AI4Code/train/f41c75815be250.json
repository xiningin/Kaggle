{"cell_type":{"4180fcf1":"code","5f10f3dc":"code","8a534495":"code","8883c787":"code","fcde5534":"code","4b5f9e14":"code","0739b5d3":"code","3c0ca118":"code","45c72e6a":"code","8f242fee":"code","6164c864":"code","d4e1e803":"code","0e15692a":"code","8f49f0d0":"code","28e4d9cc":"markdown","5ec313dc":"markdown","24255c68":"markdown","fc730755":"markdown","59851b62":"markdown","841f6202":"markdown","181bbbea":"markdown","86d779ad":"markdown","1bfc258d":"markdown","71ab1fa0":"markdown","5288c427":"markdown","c7c906b0":"markdown","65ffea70":"markdown","1637cd47":"markdown"},"source":{"4180fcf1":"%%time\n\n#  \u3053\u306e\u30bb\u30eb\uff08jupyter \u3067\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u5358\u4f4d\u3067\u3059\u3002\uff09\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u307f\u3001sqlite \u30c7\u30fc\u30bf\u3068\u63a5\u7d9a\u3057\u3066\u3001\u4e00\u6642\u7684\u306a\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n# pandas \u3068\u3044\u3046\u30c7\u30fc\u30bf\u3092\u6271\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n# \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30c7\u30fc\u30bf\u64cd\u4f5c\u306f\uff33\uff31\uff2c\u3092\u901a\u3058\u3066\u884c\u3046\u306e\u3067\u3001pandas \u306f\u3001\u30b0\u30e9\u30d5\u3092\u66f8\u304f\u305f\u3081\u306b\u4f7f\u3046\u306e\u304c\u4e3b\u3067\u3059\u3002\nimport pandas as pd\nimport numpy as np\nimport pandas.io.sql as psql\n\n# sqlite\u3092\u8aad\u307f\u8fbc\u3080\u30e9\u30a4\u30d6\u30e9\u30ea\nimport sqlite3\n\n# \u7dda\u5f62\u56de\u5e30\u3000\u4f7f\u3046\u983b\u5ea6\u306f\u3042\u307e\u308a\u306a\u3044\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3001\u3044\u308c\u3066\u304a\u304d\u307e\u3059\u3002\nfrom sklearn import linear_model\nclf = linear_model.LinearRegression()\n\n\n\n# HTML\u3067\u8868\u793a\u3059\u308b\u3000\u30a8\u30af\u30bb\u30eb\u306b\u30b3\u30d4\u30da\u3059\u308b\u3068\u304d\u306b\u4fbf\u5229\nfrom IPython.display import display, HTML\n\n\n# \u65e5\u6642\u3092\u6271\u3046\nfrom datetime import datetime as dt\nimport time\n\n# \u30b0\u30e9\u30d5\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker\n%matplotlib inline\nimport plotly.graph_objects as go\nimport ipywidgets\nimport seaborn as sns\n\n# system \u95a2\u4fc2\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\nimport sys\n# os \u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\nimport os\n# \u6b63\u898f\u8868\u73fe\nimport re\n\n# json,yaml \u5f62\u5f0f\u3092\u6271\u3046\nimport json\nimport yaml\n\n# \u5909\u6570\u306e\u72b6\u614b\u3092\u8abf\u3079\u308b\nimport inspect\n\n# \u6587\u5b57\u30b3\u30fc\u30c9\nimport codecs\n\n# Web \u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\nimport requests\n\n# \u8cbf\u6613\u7d71\u8a08\u306e\u30c7\u30fc\u30bf\n# http:\/\/www.customs.go.jp\/toukei\/info\/tsdl_e.htm\n# \u30b3\u30fc\u30c9\u3000\u8f38\u51fa\u306f\u65e5\u672c\u8a9e\u306e\u307f\n# https:\/\/www.customs.go.jp\/toukei\/sankou\/code\/code_e.htm \n\n# sqlite \u306b show tables \u304c\u306a\u3044\u306e\u3067\u88dc\u8db3\u3059\u308b\u3082\u306e\nshow_tables = \"select tbl_name from sqlite_master where type = 'table'\"\n# describe \u3082\u306a\u3044\u3067\u3001\u88dc\u5b8c\u3057\u307e\u3059\u3002\ndesc = \"PRAGMA table_info([{table}])\"\n# \u30e1\u30e2\u30ea\u3067\u3001sqlite \u3092\u4f7f\u3044\u307e\u3059\u3002kaggle \u306e\u30b9\u30af\u30ea\u30d7\u30c8\u4e0a\u3067\u306f\u3001\u30aa\u30f3\u30e1\u30e2\u30ea\u3067\u306a\u3044\u3068\u65b0\u898f\u30c6\u30fc\u30d6\u30eb\u304c\u3064\u304f\u308c\u307e\u305b\u3093\n# \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e00\u884c\u304c\u9577\u3044\u3068\u304d\u306f\u3000\\\u3000\u3067\u6539\u884c\u3057\u307e\u3059\u3002\nconn = \\\n    sqlite3.connect(':memory:')\n\n# sql \u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u5909\u6570\u3067\u3059\u3002\ncursor = conn.cursor()\n\n# 1997 \u5e74\u304b\u3089\u30012019 \u5e74\u307e\u3067\u306e\u5e74\u30d9\u30fc\u30b9\u306e\u30c7\u30fc\u30bf\u3067\u3059\u3002\u30c6\u30fc\u30d6\u30eb\u306f\u3001year_from_1997 \n# year_from_1997\nattach = 'attach \"..\/input\/japan-trade-statistics\/y_1997.db\" as y_1997'\ncursor.execute(attach)\n\n# 2018 2020 \u5e74\u306e\u6708\u5225\u96c6\u8a08 \u30c6\u30fc\u30d6\u30eb\u540d\u3082 ym_2018_2020\nattach = 'attach \"..\/input\/japan-trade-statistics\/ym_2018_2020.db\" as ym_2018_2020'\ncursor.execute(attach)\n\n\n# hs code,country,HS\u30b3\u30fc\u30c9\u3067\u3059\u3002\u4f7f\u3044\u3084\u3059\u3044\u3088\u3046\u306b pandas\u3000\u306b\u5909\u66f4\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nattach = 'attach \"..\/input\/japan-trade-statistics\/codes.db\" as code'\ncursor.execute(attach)\n# import hs,country code as pandas\ntmpl = \"{hs}_{lang}_df =  pd.read_sql('select * from code.{hs}_{lang}',conn)\"\nfor hs in ['hs2','hs4','hs6','hs6','hs9']:\n    for lang in ['jpn','eng']:\n        exec(tmpl.format(hs=hs,lang=lang))        \n\n# \u56fd\u30b3\u30fc\u30c9\u3082 pandas \u3067\u6271\u3048\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n# country table: country_eng,country_jpn\ncountry_eng_df = pd.read_sql('select * from code.country_eng',conn)\ncountry_eng_df['Country']=country_eng_df['Country'].apply(str)\ncountry_jpn_df = pd.read_sql('select * from code.country_jpn',conn)\ncountry_jpn_df['Country']=country_jpn_df['Country'].apply(str)\n\n\n\n# \u8a08\u7b97\u6642\u9593\u3092\u7bc0\u7d04\u3059\u308b\u305f\u3081\u306b\u3001\u5e74\u306e\u30c7\u30fc\u30bf\u304b\u3089\u30012019 \u5e74\u3092\u5207\u308a\u51fa\u3057\u307e\u3059\u3002\n# \u6700\u521d\u306e\u306f\u30a8\u30e9\u30fc\u51e6\u7406\u3067\u3059\u3002y_2019 \u3068\u3044\u3046\u30c6\u30fc\u30d6\u30eb\u304c\u5b58\u5728\u3059\u308b\u3068\u3001\u65b0\u898f\u306b y_2019 \u3092\u4f5c\u308d\u3046\u3068\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n# error \u306e\u5834\u5408\u306f\u3001\u4f55\u3082\u305b\u305a\u3001\u6b21\u306b\u3059\u3059\u307f\u307e\u3059\u3002\ntry:\n    cursor.execute('drop table y_2019')\nexcept:\n    pass\n\n# \u3053\u308c\u304b\u3089\u304c\u3001SQl \u306b\u306a\u308a\u307e\u3059\u3002\u8907\u6570\u884c\u3067\u66f8\u304f\u3053\u3068\u304c\u591a\u3044\u306e\u3067sql \u3068\u3044\u3046\u5909\u6570\u306b\u8907\u6570\u884c\u3092\u4ee3\u5165\u3057\u307e\u3059\u3002\n# \u6700\u5f8c\u306e [1:-1] \u306f\u3001\u4e00\u884c\u76ee\uff08\u6539\u884c\u3067\u7a7a\u767d\uff09\u3068\u6700\u5f8c\u306e\u884c\uff08\u3053\u308c\u3082\u6539\u884c\u3060\u3051\u3067\u7a7a\u767d\uff09\u3092\u3068\u308a\u306e\u305e\u304f\u305f\u3081\u3067\u3059\u3002\n# 0 \u304b\u3089\u59cb\u307e\u308b\u306e\u3067\u30011 \u3060\u3068\u3001\uff12\u884c\u76ee\u304b\u3089\u6700\u5f8c\u306e\u884c\u306e\u3072\u3068\u3064\u624b\u524d\u307e\u3067\u3067\u3059\u3002\nsql = \"\"\"\ncreate table y_2019 \nas select * from year_from_1997\nwhere Year = 2019\n\"\"\"[1:-1]\n# \u4e0a\u8a18\u306e sql \u3092\u5b9f\u884c\u3057\u3057\u3066\u30012019 \u5e74\u306e\u30c7\u30fc\u30bf\u3092\u3064\u304f\u308a\u307e\u3059\u3002\ncursor.execute(sql)\nconn.commit()\n\n# sql \u306e\u8aac\u660e\u3067\u3059\u3002\n# create table \u30c6\u30fc\u30d6\u30eb\u540d : \u30c6\u30fc\u30d6\u30eb\u3092\u65b0\u898f\u4f5c\u6210\u3000\u3053\u3053\u3067\u306f\u3001y_2019 \n# as select * from  \u30c6\u30fc\u30d6\u30eb\u540d\u3000: \u30c6\u30fc\u30d6\u30eb\u540d(year_from_1997)\u304b\u3089\u3064\u304f\u308a\u307e\u3059\u3002\n# where Year = 2019 : 2019 \u5e74\u306e\u30c7\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002Year \u306f\u3001\u6570\u5024\u306a\u306e\u3067\u30012019 \u3068\u66f8\u304d\u307e\u3059\u3002\n\n\n# https:\/\/www.customs.go.jp\/toukei\/srch\/index.htm?M=01&P=1,1,,,,,,,,4,1,2019,0,0,0,2,020230100,,,,,,,,,,6,120,,,,,,,,,,,,,,,,,,,,,20\n# graph \u7528\u306e\u3000color\u3000https:\/\/matplotlib.org\/examples\/color\/named_colors.htmlsql_sample \n\n\n\n","5f10f3dc":"class util():\n    def __init__(self):\n        print(dt.now())\n\n    def check_list_get(self):\n        url = 'http:\/\/www.customs.go.jp\/toukei\/suii\/html\/data\/d41ma.csv'\n        r = requests.get(url)\n        r.encoding = 'Shift_JIS'\n        check_list = r.text.split('\\r\\n')[4:]\n        check_dict = {}\n        x_year = 0\n        for one in check_list:\n            try:\n                one.split(',')[1]\n                one.split(',')[2]\n            except:\n                continue\n\n            if int(one.split(',')[1]) == 0 and int(one.split(',')[2]) == 0:\n                last_year = one.split(',')[0][0:4]\n                last_month = str(int(one.split(',')[0][5:7])-1).zfill(2)\n                break\n            if x_year != int(one.split(',')[0][0:4]):\n                x_year = int(one.split(',')[0][0:4])\n                check_dict[x_year] = {}\n            x_month = one.split(',')[0][5:7]\n            check_dict[x_year][x_month] = [\n                one.split(',')[1], one.split(',')[2]]\n        self.check_list = check_dict\n        return(check_dict)\n    \n    \n    # \u30b0\u30e9\u30d5\u4f5c\u6210 \u4e00\u7cfb\u5217\u306e\u307f\n    def g1(self,df,x,y,color='b'):\n        plt.figure(figsize=(20, 10))\n\n        ax = sns.lineplot(x=x,y=y,data=df,linewidth=7.0,color=color)\n        # \u3053\u308c\u306f\u3001x\u8ef8\uff08\u6642\u7cfb\u5217\uff09\u306e\u5358\u4f4d\u304c\u7701\u7565\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u8a2d\u5b9a\n        # \u4f55\u3082\u3057\u306a\u3044\u3068\u30012000,2005,2010\u306e\u3088\u3046\u306b\u4e00\u5e74\u5206\u304c\u3068\u3070\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n        ax.xaxis.set_major_locator(ticker.MultipleLocator(1)) \n    \n    # \u30b0\u30e9\u30d5\u4f5c\u6210 2\u7cfb\u5217\u3000\u8f38\u51fa\u5165\u3000\u6bd4\u8f03\u306b\u3064\u304b\u3044\u307e\u3059\u3002\u8f38\u51fa\u304c\u9752\u3001\u8f38\u5165\u304c\u8d64\n    def g2(self,df,x,y,hue,palette={1: \"b\", 2: \"r\"}):\n        plt.figure(figsize=(20, 10))\n        ax  = sns.lineplot(x=x,y=y,hue=hue,linewidth = 7.0,\n             palette=palette,\n             data=df)\n        # \u51e1\u4f8b\u306e\u4f4d\u7f6e\u3000\uff12\u306f\u5de6\u4e0a\n        ax.legend_._loc = 2\n        ax.xaxis.set_major_locator(ticker.MultipleLocator(1)) \n        \n    # \u8907\u6570\u7cfb\u5217\u306e\u30b0\u30e9\u30d5\n    def gx(self,df,x,y,hue,palette={}):\n        plt.figure(figsize=(20, 10))\n        if palette == {}:\n            ax  = sns.lineplot(x=x,y=y,hue=hue,linewidth = 7.0,data=df)\n        else:\n            ax  = sns.lineplot(x=x,y=y,hue=hue,linewidth = 7.0,palette=palette,data=df)\n        # \u51e1\u4f8b\u306e\u4f4d\u7f6e\u3000\uff12\u306f\u5de6\u4e0a\n        ax.legend_._loc = 2\n        ax.xaxis.set_major_locator(ticker.MultipleLocator(1))    \n        \n    def hs_name_get(self,hs_code):\n        hs = len(hs_code)\n        if hs not in (2,4,6,9):\n            print('HS \u30b3\u30fc\u30c9\u306e\u9577\u3055\u304c\u307e\u3061\u304c\u3063\u3066\u3044\u307e\u3059\u3002 ' + str(hs))\n        hs = str(hs)\n        print(hs_code)\n        text = 'hs' + hs + '_eng_df.query(' +\"'\"+ 'hs' + hs + '==\"' + hs_code + '\"' + \"')\"\n        df = eval(text)\n        print(df['hs' + hs + '_name'].values[0])\n        text = 'hs' + hs + '_jpn_df.query(' +\"'\"+ 'hs' + hs + '==\"' + hs_code + '\"' + \"')\"\n        df = eval(text)\n        print(df['hs' + hs + '_name'].values[0])\n\nstart_time = time.perf_counter()\nut = util()\nexecution_time = time.perf_counter() - start_time\nprint(execution_time)","8a534495":"hs = 'hs4'\nhscode = '2941'\nsql = \"\"\"\nselect exp_imp,Year,sum(Value) as Value\nfrom year_from_1997\nwhere {hs}='{hscode}'\ngroup by exp_imp,Year\norder by Year\n\"\"\"[1:-1]\ndf = pd.read_sql(sql.format(hs=hs,hscode=hscode),conn)\nut.g2(df,'Year','Value','exp_imp')\n","8883c787":"# \u6570\u91cf\u306f\u3001\u3059\u3079\u3066Q2 \u306f\u78ba\u8a8d\u6e08\u307f\nhs = 'hs4'\nhscode = '2941'\nsql = \"\"\"\nselect exp_imp,Year,sum(Q2) as Q2\nfrom year_from_1997\nwhere {hs}='{hscode}'\ngroup by exp_imp,Year\norder by Year\n\"\"\"[1:-1]\ndf = pd.read_sql(sql.format(hs=hs,hscode=hscode),conn)\nut.g2(df,'Year','Q2','exp_imp')\n","fcde5534":"exp_imp = 1   # \u8f38\u51fa\nsql = \"\"\"\nselect hs6,sum(Value) as Value\nfrom y_2019\nwhere {hs}='{hscode}' and exp_imp = {exp_imp}\ngroup by hs6\norder by Value desc\n\"\"\"[1:-1]\ndf = pd.read_sql(sql.format(hs=hs,hscode=hscode,exp_imp=exp_imp),conn)\ntotal = df['Value'].sum()\ndf['percent'] = 100*(df['Value']\/total)\ndf.head()","4b5f9e14":"exp_imp = 2   # \u8f38\u5165\ndf = pd.read_sql(sql.format(hs=hs,hscode=hscode,exp_imp=exp_imp),conn)\ntotal = df['Value'].sum()\ndf['percent'] = 100*(df['Value']\/total)\ndf.head()\n#ut.hs_name_get('294130') \u30c6\u30c8\u30e9\u30b5\u30a4\u30af\u30ea\u30f3\u53ca\u3073\u305d\u306e\u8a98\u5c0e\u4f53\u4e26\u3073\u306b\u3053\u308c\u3089\u306e\u5869","0739b5d3":"exp_imp = 1   # \u8f38\u51fa\nsql = \"\"\"\nselect Country,sum(Value) as Value\nfrom y_2019\nwhere {hs}='{hscode}' and exp_imp = {exp_imp}\ngroup by Country\norder by Value desc\n\"\"\"[1:-1]\ndf = pd.read_sql(sql.format(hs=hs,hscode=hscode,exp_imp=exp_imp),conn)\ntotal = df['Value'].sum()\ndf['percent'] = 100*(df['Value']\/total)\ndf = pd.merge(df,country_eng_df,on='Country')\ndf.head()","3c0ca118":"exp_imp = 2   # \u8f38\u5165\ndf = pd.read_sql(sql.format(hs=hs,hscode=hscode,exp_imp=exp_imp),conn)\ntotal = df['Value'].sum()\ndf['percent'] = 100*(df['Value']\/total)\ndf = pd.merge(df,country_eng_df,on='Country')\ndf.head()","45c72e6a":"# 294190 \nhs='hs6'\nexp_imp = 2\n\n# '294190':'Other','294150':Erythromycin,'294110':Penicillins,'294130':Tetracyclines\nhscodes = \" '294190','294150','294110','294130'\"\n\nsql = \"\"\"\nselect Year,{hs},sum(Value) as Value from year_from_1997\nwhere {hs} in ({hscodes}) and exp_imp = {exp_imp}\ngroup by Year,{hs}\n\"\"\"[1:-1]\ndf = pd.read_sql(sql.format(hs=hs,hscodes=hscodes,exp_imp=exp_imp),conn)\n\ndf['hs'] = 'HS' + df['hs6'] \ndf_base = df.query('Year==1997')[['hs6','Value']]\ndf_base = df_base.rename(columns={'Value':'base'})\ndf = pd.merge(df,df_base,on=hs)\n\ndf['level'] = 100*(df['Value']\/df['base'])\nut.gx(df,'Year','level','hs')","8f242fee":"# 294190 \nhs='hs6'\nexp_imp = 2\n\n# '294190':'Other','294150':Erythromycin,'294110':Penicillins,'294130':Tetracyclines\nhscodes = \" '294190','294150','294110','294130'\"\n\nsql = \"\"\"\nselect Year,{hs},sum(Q2) as Q2 from year_from_1997\nwhere {hs} in ({hscodes}) and exp_imp = {exp_imp}\ngroup by Year,{hs}\n\"\"\"[1:-1]\ndf = pd.read_sql(sql.format(hs=hs,hscodes=hscodes,exp_imp=exp_imp),conn)\n\ndf['hs'] = 'HS' + df['hs6'] \ndf_base = df.query('Year==1997')[['hs6','Q2']]\ndf_base = df_base.rename(columns={'Q2':'base'})\ndf = pd.merge(df,df_base,on=hs)\n\ndf['level'] = 100*(df['Q2']\/df['base'])\nut.gx(df,'Year','level','hs')","6164c864":"# 294190 \nhs='hs6'\nexp_imp = 2\n\n# '294190':'Other','294150':Erythromycin,'294110':Penicillins,'294130':Tetracyclines\nhscodes = \" '294190','294150','294110','294130'\"\n\nsql = \"\"\"\nselect Year,{hs},sum(Q2) as Q2,sum(Value) as Value from year_from_1997\nwhere {hs} in ({hscodes}) and exp_imp = {exp_imp}\ngroup by Year,{hs}\n\"\"\"[1:-1]\ndf = pd.read_sql(sql.format(hs=hs,hscodes=hscodes,exp_imp=exp_imp),conn)\n\ndf['hs'] = 'HS' + df['hs6'] \ndf['unit_price'] = df['Value']\/df['Q2']\ndf_base = df.query('Year==1997')[['hs6','unit_price']]\ndf_base = df_base.rename(columns={'unit_price':'base'})\ndf = pd.merge(df,df_base,on=hs)\ndf['level'] = 100*(df['unit_price']\/df['base'])\nut.gx(df,'Year','level','hs')","d4e1e803":"hs='hs6'\nexp_imp = 2\nhscode = '294110'\n\nsql = \"\"\"\nselect Year,Country,sum(Value) as Value from year_from_1997\nwhere {hs}='{hscode}' and exp_imp = {exp_imp}\ngroup by Year,Country\norder by Year\n\"\"\"[1:-1]\ndf = pd.read_sql(sql.format(hs=hs,hscode=hscode,exp_imp=exp_imp),conn)\ndf = pd.merge(df,country_eng_df,on='Country')\n\nut.gx(df[df['Country'].isin(['225','105','218','220'])],'Year','Value','Country_name')","0e15692a":"hs='hs6'\nexp_imp = 2\nhscode = '294110'\n\nsql = \"\"\"\nselect Year,Country,sum(Q2) as Q2 from year_from_1997\nwhere {hs}='{hscode}' and exp_imp = {exp_imp}\ngroup by Year,Country\norder by Year\n\"\"\"[1:-1]\ndf = pd.read_sql(sql.format(hs=hs,hscode=hscode,exp_imp=exp_imp),conn)\ndf = pd.merge(df,country_eng_df,on='Country')\n\nut.gx(df[df['Country'].isin(['225','105','218','220'])],'Year','Q2','Country_name')","8f49f0d0":"hs='hs6'\nexp_imp = 2\nhscode = '294110'\nsql = \"\"\"\nselect Year,Country,sum(Value) as Value,sum(Q2) as Q2 from year_from_1997\nwhere {hs}='{hscode}' and exp_imp = {exp_imp}\ngroup by Year,Country\norder by Year\n\"\"\"[1:-1]\ndf = pd.read_sql(sql.format(hs=hs,hscode=hscode,exp_imp=exp_imp),conn)\ndf['unit_price'] = 100*(df['Value']\/df['Q2'])\ndf = pd.merge(df,country_eng_df,on='Country')\n\nut.gx(df[df['Country'].isin(['225','105','218','220'])],'Year','unit_price','Country_name')","28e4d9cc":"## \u91d1\u984d 294110 \u30da\u30cb\u30b7\u30ea\u30f3 \u56fd\u5225\u63a8\u79fb","5ec313dc":"# \u8f38\u5165\u3067\u5bfe\u8c61\u3068\u306a\u308b HS\u30b3\u30fc\u30c9\u3092\u8a2d\u5b9a \n- 294190 \u305d\u306e\u4ed6\n- 294150 \u30a8\u30ea\u30b9\u30ed\u30de\u30a4\u30b7\u30f3\n- 294110 \u30da\u30cb\u30b7\u30ea\u30f3\n- 294130 \u30c6\u30c8\u30e9\u30b5\u30a4\u30af\u30ea\u30f3","24255c68":"## \u6570\u91cf\u3000\u8f38\u51fa\u5165\u3000\u5e74\u63a8\u79fb\u3000","fc730755":"## \u6570\u91cf 294110 \u30da\u30cb\u30b7\u30ea\u30f3 \u56fd\u5225\u63a8\u79fb","59851b62":"## \u5358\u4fa1\u30001997 \u3092\u57fa\u6e96\u3068\u3057\u305f\u5e74\u5225 \u3067\u3000\u5404HS\u30b3\u30fc\u30c9\u63a8\u79fb\u3092\u898b\u308b","841f6202":"# [\u8cbf\u6613\u7d71\u8a08\u3092\u5b66\u3073\u5408\u3046\u4f1a](https:\/\/scrapbox.io\/manabiai-lesson) \u7528\u6559\u6750\n\n# \uff08\u8ab2\u984c\uff09\u6297\u83cc\u85ac\u306e\u539f\u85ac\uff08[2941](https:\/\/www.customs.go.jp\/tariff\/2020_6\/data\/print_j_29.htm)\uff09\u306e\u8f38\u5165\u5143\u306e\u8abf\u67fb\n\n# \u53c2\u8003\u3000[\u533b\u7642\u7528\u533b\u85ac\u54c1\u306e\u5b89\u5b9a\u78ba\u4fdd\u7b56\u306b\u95a2\u3059\u308b\u95a2\u4fc2\u8005\u4f1a\u8b70](https:\/\/www.mhlw.go.jp\/stf\/newpage_10314.html)\n\n# \u4e0d\u8db3\u304c\u554f\u984c\u306b\u306a\u3063\u305f\u30bb\u30d5\u30a1\u30be\u30ea\u30f3 3004.20\u3089\u3057\u3044\uff08\u6b21\u306e\u5206\u6790\u306e\u8ab2\u984c\uff09\n\n","181bbbea":" # 2941 \u306e\u56fd\u5225\uff08\u8f38\u51fa\u3001\u8f38\u5165\uff09","86d779ad":"## \u6570\u91cf\u30001997\u5e74\u3092\u57fa\u6e96\u306b\u3057\u3066\u5404HS\u30b3\u30fc\u30c9\u63a8\u79fb\u3092\u898b\u308b","1bfc258d":"## \u91d1\u984d\u30001997\u5e74\u3092\u57fa\u6e96\u306b\u3057\u3066\u5404HS\u30b3\u30fc\u30c9\u63a8\u79fb\u3092\u898b\u308b","71ab1fa0":"# 2941 \u306e\u5185\u8a33(2019\u306e\u30c7\u30fc\u30bf) \u8f38\u51fa\u3001\u8f38\u5165\u3000\u91d1\u984d\u30d9\u30fc\u30b9\n## \u8f38\u51fa(\u305d\u306e\u4ed6 294190 \u304c\u591a\u3044)\n## \u8f38\u5165\uff08\u305d\u306e\u4ed6\u4ee5\u5916\u306f\u3001\u30a8\u30ea\u30b9\u30ed\u30de\u30a4\u30b7\u30f3,\u30da\u30cb\u30b7\u30ea\u30f3\u3001\u30c6\u30c8\u30e9\u30b5\u30a4\u30af\u30ea\u30f3\uff09\n","5288c427":"# \u95a2\u6570\n","c7c906b0":"## \u91d1\u984d\u3000\u8f38\u51fa\u5165\u3000\u5e74\u63a8\u79fb\u3000\u3000\n","65ffea70":"# \u8f38\u51fa\u5165\u306e\u5e74\u306e\u63a8\u79fb ","1637cd47":"##  \u5358\u4fa1 \u30da\u30cb\u30b7\u30ea\u30f3 \u56fd\u5225\u63a8\u79fb"}}