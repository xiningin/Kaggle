{"cell_type":{"8afcd8d3":"code","d7821015":"code","ae4d0358":"code","065b1fc2":"code","61fc926e":"code","10462713":"code","847256c0":"code","8f2e29be":"code","dd79dd2c":"code","8b005969":"code","b98935b3":"code","dfd544c8":"code","acb4aa39":"code","0a6dc583":"code","57dcf377":"code","d0ca1ec9":"code","0294ac3a":"code","4239680f":"code","aaf72998":"code","bbe91aa5":"code","ddbd5300":"code","ad03d561":"code","c85d74d4":"code","0aa9c30c":"code","d1aa485d":"code","75210a5b":"code","2eed98a6":"code","e95416a2":"code","b14ce69d":"code","54901a47":"code","df8b7d68":"code","ca3c6820":"code","d7088eb9":"code","d5486a26":"code","d867bfaa":"code","04f078f0":"code","ee18be2d":"code","d19dae4c":"code","82a17e6a":"code","30d99c0b":"code","4b043213":"code","3fbe92eb":"code","0e9f4157":"code","3026055f":"code","b40ca541":"code","1fc2c372":"code","0b869ad5":"code","7e5dee7e":"code","bfb95a32":"code","e3429de2":"code","8c53efc5":"code","1ce48739":"code","d81d8d04":"code","efec79d5":"markdown","7d233d7f":"markdown","b6a83dd3":"markdown","823c6936":"markdown","4ea4c573":"markdown"},"source":{"8afcd8d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7821015":"!pip install --upgrade pip","ae4d0358":"!pip install sweetviz","065b1fc2":"!pip install pandas_profiling","61fc926e":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 100)\n\n# Data Viz\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n#%config InlineBackend.figure_format = 'svg'\nimport plotly.express as px\nimport plotly.offline as pyo\nimport plotly.graph_objs as go\n\n# Stats & ML\nfrom scipy import stats\nimport category_encoders as ce\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.metrics import balanced_accuracy_score\nfrom category_encoders import TargetEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder, LabelBinarizer\nfrom sklearn.preprocessing import RobustScaler\nfrom imblearn.over_sampling import SMOTE\nfrom collections import Counter\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\n\n# Auto ML\nimport sweetviz as sv\nfrom pandas_profiling import ProfileReport\n#import scorecardpy as sc\n\n# Supress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n","10462713":"# read\/load dataset\napplication = pd.read_csv('..\/input\/credit-card-approval-prediction\/application_record.csv')\ncredit = pd.read_csv('..\/input\/credit-card-approval-prediction\/credit_record.csv')","847256c0":"application.head()","8f2e29be":"credit.head()","dd79dd2c":"# Helper Function - Missing data check\ndef missing_data(data):\n    missing = data.isnull().sum()\n    available = data.count()\n    total = (missing + available)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).round(4)\n    return pd.concat([missing, available, total, percent], axis=1, keys=['Missing', 'Available', 'Total', 'Percent']).sort_values(['Missing'], ascending=False)","8b005969":"missing_data(application)","b98935b3":"missing_data(credit)","dfd544c8":"# drop duplicate entries\napplication_clean = application.drop_duplicates(subset=['ID'], keep='last')\nprint(\"Original Data= \",application.shape)\nprint(\"Cleaned Data = \",application_clean.shape)","acb4aa39":"credit['STATUS'].value_counts()","0a6dc583":"def percent(column,decimals=2):\n    assert decimals >= 0\n    return (round(column*100,decimals).astype(str) + \"%\")","57dcf377":"# find the tenure for each entry\ncredit['Tenure'] = credit['MONTHS_BALANCE'].apply(lambda x : x*(-1))\ncredit.shape","d0ca1ec9":"credit = credit.sort_values(by=['ID','Tenure'],ascending=True)\ncredit.head(10)","0294ac3a":"credit_new = credit.groupby('ID').agg(max).reset_index()\ncredit_new = credit_new[['ID', 'MONTHS_BALANCE', 'Tenure', 'STATUS']]\ncredit_new.head()","4239680f":"# merge datasets application details with credit approval record\ndf = pd.merge(application_clean, credit_new, how='inner', on=['ID'])\ndf.head()","aaf72998":"# replacing X & C by 0 in credit status\ndf['STATUS'].replace('X', 0, inplace=True)\ndf['STATUS'].replace('C', 0, inplace=True)\ndf['STATUS'] = df['STATUS'].astype('int')\n\npercent(df['STATUS'].value_counts(normalize=True, sort=False),decimals=2)","bbe91aa5":"# create target variable from credit status\ndf['STATUS'] = df['STATUS'].apply(lambda x: 1 if x >= 2 else 0)\npercent(df['STATUS'].value_counts(normalize=True, sort=False),decimals=2)","ddbd5300":"# drop months_balance column as it is redundant\ndf = df.drop(['MONTHS_BALANCE'], axis=1)\ndf.head()","ad03d561":"#renaming the column headers for easy understanding\n\ndf.rename(columns={'ID': 'User_id', 'CODE_GENDER':'Gender',\n                   'FLAG_OWN_CAR':'Car', 'FLAG_OWN_REALTY':'Realty_owned', 'CNT_CHILDREN':'Children_count',\n                   'AMT_INCOME_TOTAL':'Income_amount', 'NAME_INCOME_TYPE':'Income_type', 'NAME_EDUCATION_TYPE':'Education',\n                   'NAME_FAMILY_STATUS':'Family_status', 'NAME_HOUSING_TYPE':'Housing_type', 'DAYS_BIRTH':'Days_birth',\n                   'DAYS_EMPLOYED':'Days_employed', 'FLAG_MOBIL':'Mobile', 'FLAG_WORK_PHONE':'Work_phone',\n                   'FLAG_PHONE':'Phone', 'FLAG_EMAIL':'Email', 'OCCUPATION_TYPE':'Occupation_type',\n                   'CNT_FAM_MEMBERS':'Family_members','Tenure':'Tenure', 'STATUS':'Reject_Status'}, inplace=True)\ndf.head(2)","c85d74d4":"# dropping feature \"mobile\" as all applicants own a mobile phone and hence the column \"Mobile\" seem to be of no importance. Hence it can be dropped\ndf = df.drop(['Mobile'], axis=1)\ndf.shape","0aa9c30c":"# Fill missing values of feature occupation type with unknown\ndf[\"Occupation_type\"].fillna(\"Unknown\", inplace = True)\ndf[\"Occupation_type\"].value_counts()","d1aa485d":"def to_category(df):\n    cols = df.select_dtypes(include='object').columns\n    for col in cols:\n        ratio = len(df[col].value_counts()) \/ len(df)\n        if ratio < 0.05:\n            df[col] = df[col].astype('category')\n    return df","75210a5b":"#df = (df.pipe(to_category))\ndf.dtypes","2eed98a6":"# Analyzing the dataset using pandas profiling library\napplication_profile = ProfileReport(df, \n                        title='Pandas Profiling Report for Application Data', \n                        html={'style':{'full_width':True}}) \n\napplication_profile.to_widgets()","e95416a2":"# Analyzing the dataset using sweetviz library\nadvert_report = sv.analyze(df)\n\n# Display the report\nadvert_report.show_html('CreditCard.html')","b14ce69d":"df.describe()","54901a47":"# Outlier treatment - IQR Method\ndef remove_outlier(col):\n    q25 = col.quantile(0.25)\n    q75 = col.quantile(0.75)\n    iqr = q75 - q25\n    cutoff = iqr*x\n    lower = q25 - cutoff\n    upper = q75 + cutoff\n    return lower, upper\n\n#Remove outliers for Income for 1.5 * IQR\nx=1.5\nlower_1, upper_1 = remove_outlier(df['Income_amount'])\ndf_IQR1 = df.loc[(df['Income_amount'] > lower_1) & (df['Income_amount'] < upper_1)]\nplt.figure(figsize=(15,8))\nax1 = sns.boxplot(x=\"Gender\", y=\"Income_amount\", hue = \"Reject_Status\",data=df_IQR1)","df8b7d68":"#Remove outliers for children count for 1.5 * IQR\nx=1.5\nlower_2, upper_2 = remove_outlier(df_IQR1['Children_count'])\ndf_IQR1N = df_IQR1.loc[(df_IQR1['Children_count'] > lower_2) & (df_IQR1['Children_count'] < upper_2)]\nplt.figure(figsize=(15,8))\nax4 = sns.boxplot(x=\"Family_members\", y=\"Income_amount\", hue = \"Reject_Status\", showfliers = True,data=df_IQR1N)","ca3c6820":"a = df.shape[0] - df_IQR1N.shape[0]\nprint(\"Outlier Count = \",a,\"\\nOutlier % = \",round(((a\/df.shape[0])*100),2))","d7088eb9":"df_IQR1N.head(3)","d5486a26":"df_lab = df_IQR1N.copy()\ndf_woe = df_IQR1N.copy()","d867bfaa":"# Now we will convert all the non-numeric values into numeric ones because it results in faster computation and also many machine learning models\n# Label Encoding is used here\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\nfor col in df_lab:\n    if df_lab[col].dtypes == \"object\":\n        df_lab[col] = le.fit_transform(df_lab[col])","04f078f0":"df_lab.head(2)","ee18be2d":"# split into input and output elements\nx_1  = df_lab.iloc[:, 1:-1]\ny_1 = df_lab.iloc[:, -1]","d19dae4c":"x_1.head(2)","82a17e6a":"# Test Train Split for category encoding\nx_1_train, x_1_test, y_1_train, y_1_test = train_test_split(x_1, y_1, test_size=0.3, random_state=1)","30d99c0b":"# Feature scaling using robust scalar\n# Robust Scaler shrinks data to medians and quantiles, thus not influenced by outliers. Hence robust scalar will be used here\nx_1_train_rs = pd.DataFrame(RobustScaler().fit_transform(x_1_train), columns=x_1_train.columns)\nx_1_test_rs = pd.DataFrame(RobustScaler().fit_transform(x_1_test), columns=x_1_test.columns)","4b043213":"# Handle Class Imabalance using SMOTE Oversampling - Synthetic Minority Oversampling Technique\noversample = SMOTE()\n\na_target_0 = df_lab[df_lab['Reject_Status'] == 0].Reject_Status.count() \/ df_lab['Reject_Status'].count()\na_target_1 = df_lab[df_lab['Reject_Status'] == 1].Reject_Status.count() \/ df_lab['Reject_Status'].count()\n\nprint(round(a_target_0,4))\nprint(round(a_target_1,4))","3fbe92eb":"#Apply to train data\nx_1_train_rs_over, y_1_train_over = oversample.fit_resample(x_1_train_rs, y_1_train)\nprint(Counter(y_1_train_over))","0e9f4157":"#Apply to test data\nx_1_test_rs_over, y_1_test_over = oversample.fit_resample(x_1_test_rs, y_1_test)\nprint(Counter(y_1_test_over))","3026055f":"x_1_train_rs_over.head()","b40ca541":"# Model Building\nclassifiers = {\n    \"LogisticRegression\" : LogisticRegression(),\n    \"KNeighbors\" : KNeighborsClassifier(),\n    \"SVC\" : SVC(),\n    \"DecisionTree\" : DecisionTreeClassifier(),\n    \"RandomForest\" : RandomForestClassifier(),\n    \"XGBoost\" : XGBClassifier()\n}","1fc2c372":"classifiers","0b869ad5":"train_scores = []\ntest_scores = []\n\nfor key, classifier in classifiers.items():\n    classifier.fit(x_1_train_rs_over, y_1_train_over)\n    train_score = round(classifier.score(x_1_train_rs_over, y_1_train_over),2)\n    train_scores.append(train_score)\n    test_score = round(classifier.score(x_1_test_rs_over, y_1_test_over),2)\n    test_scores.append(test_score)\n\nprint(train_scores)\nprint(test_scores)","7e5dee7e":"xgb = XGBClassifier()","bfb95a32":"xgb.fit(x_1_train_rs_over, y_1_train_over)","e3429de2":"from sklearn.model_selection import GridSearchCV\n\nparams = {\n    'learning_rate': [0.05,0.1,0.15,0.2,0.25,0.3],\n    'max_depth':[5,10,15],\n    'min_child_weight':[6,8,10,12],\n    'subsample': [0.6,0.7,0.8,0.9], \n    'colsample_bytree':[0.6,0.7,0.8],\n    'gamma':[i\/10.0 for i in range(0,5)]\n \n}","8c53efc5":"'''# Grid Search\ngsearch = GridSearchCV(estimator = XGBClassifier( learning_rate =0.1, n_estimators=140, max_depth=5,\n min_child_weight=1, gamma=0, subsample=0.8, colsample_bytree=0.8,\n objective= 'binary:logistic', nthread=4, scale_pos_weight=1, seed=354), \n param_grid = params, scoring='roc_auc',n_jobs=4,iid=False, cv=5)\n\n#Fit\ngsearch.fit(x_1_train_rs_over, y_1_train_over)'''","1ce48739":"#gsearch.best_params_, gsearch.best_score_","d81d8d04":"#","efec79d5":"**Data Dictionary:-**\nID: Unique Id of the row in application record.\nMONTHS_BALANCE: The number of months from record time.\nSTATUS: Credit status for this month.\nX: No loan for the month\nC: paid off that month\n0: 1-29 days past due\n1: 30-59 days past due\n2: 60-89 days overdue\n3: 90-119 days overdue\n4: 120-149 days overdue\n5: Overdue or bad debts, write-offs for more than 150 days","7d233d7f":"**Reasons for Credit Card Rejection\/Disapproval\u00b6**\nThe reasons for a credit card rejection in India have been provided based on previous rejection experiences that applicant have faced and these reasons have found to be the most common across all major banks in the country.\n\n* Low credit score\n* Unstable employment\n* Insufficient income\n* Working in a delisted private company\n* Not falling into the age limit\n* Living in an address which is present in the defaulter list\n\n**Reference:-**\n[creditmantri](https:\/\/www.creditmantri.com\/credit-card-rejection\/)\n[Balance](https:\/\/www.thebalance.com\/denied-credit-card-application-960247)\n[Late Payment](https:\/\/www.thebalance.com\/when-does-a-late-payment-go-on-my-credit-report-960434)\n\nBased on above reference information, applicants who have past record for delayed credit payment greater than 59 days will have their applications rejected","b6a83dd3":"**Observation\u00b6**\n* All applicants in merged dataset own a mobile phone and hence the column \"Mobile\" seem to be of no importance. Hence it can be dropped\n* Majority of tyhe applicants are female\n* Occupation type column has 30% missing values and hence can either dropped or imputed (missing values as unknown)\n* Most of the categorical columns\/features seem to be binary in nature\n* Major class imbalance observed. Only 0.26% of applicants belong to rejected category\n* Income and number of family members seem to have extreme values\/data points (possibly outliers)\n* Outliers in income are found in approved class than rejected. Hence removing extreme values might not affect the model performance in detecting the reject cases","823c6936":"**Observation:-**\n\n* Duplicate entries are observed with same client number but different gender and other details. This seems unlikely and possible re-entry with corrected details\n* Hence deleting first entries and keeping the latest ones","4ea4c573":"* The XBBoost classifier gives better results compared with other models as seen from above train\/test scores\n* Hyperparameter tuning can be attempted by executing below cross validation code for XGBoost classifier\n* WOE and target encoding didnot yield any better results compared with one hot encoding"}}