{"cell_type":{"d44445eb":"code","a114d31a":"code","3666d0ed":"code","3c7064c3":"code","dd130dfd":"code","c1572c4d":"code","d1a26cfe":"code","9e30f181":"code","1d62cd13":"code","db6a31f3":"code","cc566709":"code","0d8b2236":"code","c617b55e":"code","924870d0":"markdown","cbcf8271":"markdown","e6ff5ac5":"markdown","2b8f7ff6":"markdown","f5c33af1":"markdown","fc37818d":"markdown","a87411f4":"markdown","4662e29d":"markdown","872a6872":"markdown"},"source":{"d44445eb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a114d31a":"data = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndata.info()","3666d0ed":"data.head()","3c7064c3":"y = data[\"Outcome\"].values","dd130dfd":"# Preparing the dataset\nx_data = data.drop([\"Outcome\"], axis = 1)\nx_data.head()","c1572c4d":"# Normalization of dataset\nx = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data))\nx.head()","d1a26cfe":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=42)\n\n# For mathematical operations, transpose is applied.\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\nprint(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)","9e30f181":"def initialize_weights_and_bias(dimension):\n    \n    w = np.full((dimension,1),0.01)\n    b = 0.\n    return w,b\n\ndef sigmoid(z):\n    \n    y_head = 1\/(1 + np.exp(-z))\n    return y_head","1d62cd13":"def forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T, x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1] # x_train.shape[1] is for scaling\n        \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head - y_train).T)))\/x_train.shape[1] # x_train.shape[1] is for scaling \n    derivative_bias = np.sum(y_head - y_train)\/x_train.shape[1] # x_train.shape[1] is for scaling\n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n        \n    return cost,gradients","db6a31f3":"def update(w, b, x_train, y_train, learning_rate,number_of_iteration):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    # updating(learning) parameters is number_of_iteration times\n    for i in range(number_of_iteration):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","cc566709":"def predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","0d8b2236":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate , num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # that is 30\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate, num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n    # Print Test Errors\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test, learning_rate = 1, num_iterations = 300)","c617b55e":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(solver = 'lbfgs')\nlr.fit(x_train.T,y_train.T)\nprint(\"Test accuracy {}\".format(lr.score(x_test.T,y_test.T)))","924870d0":"# Logistic Regression\n* Let's test and find our accuracy.","cbcf8271":"# Parameter Initializing and Sigmoid Function\n* We have 8 features, so we have dimension = 8\n* Sigmoid function = 1 \/ ( 1 + (e ^ -x)\n* Initial weights = 0.01, initial bias = 0","e6ff5ac5":"# Updating Parameters\n* Using the gradients, we update the weight and bias values. We can do that process as much as which is determined as number of iterations.","2b8f7ff6":"# Prediction","f5c33af1":"# Logistic Regression with Sklearn","fc37818d":"# Introduction\n* Our aim is to predict whether a patient is diabetes or not, using the dataset. ","a87411f4":"# Forward and Backward Propagation\n## Forward:\n* z = bias + px1w1 + px2w2 + ... + pxn*wn \n* Calculate y_head = sigmoid(z)\n* Calculate loss function = -(1 - y) log(1- y_head) - y log(y_head)\n* Find cost function = sum(loss value) \/ train dataset sample count\n\n## Backward:\n* Take derivative of cost function with respect to weight and bias. \n* Then multiply it with learning rate \n* Update the weight and bias.","4662e29d":"# Train - Test Split\n* 80% of data set will be used for train, 20% is for test.","872a6872":"* Above, we can see 8 features(pregnancies, glucose, blood pressure, skin thickness, insulin, BMI, diabetes pedigree function, age) and the outcome which indicates patient's situation."}}