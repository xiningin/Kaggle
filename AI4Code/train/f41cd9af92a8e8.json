{"cell_type":{"ff821570":"code","94052974":"code","6d6b91f7":"code","6561fcf4":"code","8a55fc42":"code","95e6fa5b":"code","2fe72919":"code","43ae3eb6":"code","bbb81f15":"code","06847f4e":"code","bbc2622d":"code","f2b83f12":"code","a9961bb3":"code","266b2d6b":"code","b3d468f2":"code","9cc072f3":"code","301ec157":"code","8a7bf86d":"code","d0665c88":"code","6490c513":"code","8e6612d1":"code","34e34ec6":"code","202feeba":"code","235b65a1":"code","7a8b226e":"code","a333270f":"code","2e909f35":"code","456e3026":"code","d28d17ed":"code","771ede5a":"markdown","2db3cdac":"markdown","a24829a7":"markdown","c1dacd94":"markdown","fb321d20":"markdown","81bcc128":"markdown","a4677a58":"markdown","6ace5372":"markdown","e9c573a6":"markdown"},"source":{"ff821570":"import numpy as np\n\nimport pandas as pd\n\nimport os\n\nimport matplotlib_venn\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\nimport sklearn\n\nfrom sklearn.naive_bayes import BernoulliNB\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.svm import NuSVC\n\nfrom sklearn.svm import SVC\n\nfrom sklearn.model_selection import cross_validate\n\nfrom sklearn.model_selection import StratifiedKFold","94052974":"pd.options.display.max_rows = 999","6d6b91f7":"sns.set(font_scale=2)","6561fcf4":"! ls -alh ..\/input","8a55fc42":"! ls -alh ..\/input\/ieee-fraud-detection\/","95e6fa5b":"folder_path = '..\/input\/ieee-fraud-detection\/'","2fe72919":"train_identity = pd.read_csv(f'{folder_path}train_identity.csv')\ntrain_transaction = pd.read_csv(f'{folder_path}train_transaction.csv')\ntest_identity = pd.read_csv(f'{folder_path}test_identity.csv')\ntest_transaction = pd.read_csv(f'{folder_path}test_transaction.csv')\nsubmission = pd.read_csv(f'{folder_path}sample_submission.csv')","43ae3eb6":"print(\"train_identity shape: \", train_identity.shape)\nprint(\"train_transaction shape: \", train_transaction.shape)\nprint(\"test_identity shape: \", test_identity.shape)\nprint(\"test_transaction shape: \", test_transaction.shape)\nprint(\"submission shape: \", submission.shape)","bbb81f15":"train_identity.head().T","06847f4e":"train_transaction.head().T","bbc2622d":"test_identity.head().T","f2b83f12":"test_transaction.head().T","a9961bb3":"f, (ax1, ax2) = plt.subplots(1, 2, figsize=(30, 20))\nmatplotlib_venn.venn2(\n    subsets=[\n        set(train_transaction.TransactionID),\n        set(train_identity.TransactionID)\n    ],\n    set_labels=[\n        \"Transaction\",\n        \"Identity\"\n    ],\n    ax=ax1\n)\nmatplotlib_venn.venn2(\n    subsets=[\n        set(test_transaction.TransactionID),\n        set(test_identity.TransactionID)\n    ],\n    set_labels=[\n        \"Transaction\",\n        \"Identity\"\n    ],\n    ax=ax2\n)\nax1.set_title(\"Train\")\nax2.set_title(\"Test\")\nplt.suptitle(\"Intersection of transaction and identity TransactionIDs\")\nplt.tight_layout()\nplt.show()","266b2d6b":"train_transaction[\"has_identity_info\"] = train_transaction.TransactionID.isin(\n    train_identity.TransactionID\n)\n\ntest_transaction[\"has_identity_info\"] = test_transaction.TransactionID.isin(\n    test_identity.TransactionID\n)","b3d468f2":"train_transaction_na_flags = train_transaction[[\n        column for column in train_transaction.columns.values if column not in [\n            \"isFraud\", \"has_identity_info\", \"TransactionID\", \"TransactionDT\"\n        ]\n    ]\n].isna()\n\ntest_transaction_na_flags = test_transaction[[\n        column for column in test_transaction.columns.values if column not in [\n            \"has_identity_info\", \"TransactionID\", \"TransactionDT\"\n        ]\n    ]\n].isna()\n\ntrain_transaction_na_flags[\"isFraud\"] = train_transaction[\"isFraud\"]\ntrain_transaction_na_flags_gr = train_transaction_na_flags.groupby(\"isFraud\").mean() * 100\n\ntrain_transaction_na_flags[\"has_identity_info\"] = train_transaction[\"has_identity_info\"]\ntrain_transaction_na_flags[\"TransactionDT\"] = train_transaction[\"TransactionDT\"]\n\ntest_transaction_na_flags[\"has_identity_info\"] = test_transaction[\"has_identity_info\"]\ntest_transaction_na_flags[\"TransactionDT\"] = test_transaction[\"TransactionDT\"]","9cc072f3":"f, (ax1, ax2) = plt.subplots(1, 2, figsize=(30, 10))\n\nsns.countplot(\n    y=\"isFraud\",\n    hue=\"has_identity_info\",\n    data=train_transaction,\n    ax=ax1\n)\n\nsns.boxplot(\n    y=\"isFraud\",\n    x=\"value\",\n    data=pd.melt(train_transaction_na_flags_gr.T),\n    ax=ax2,\n    orient=\"h\",\n    showmeans=True,\n    meanline=True,\n    meanprops=dict(linestyle='-.', linewidth=2.5, color='red')\n)\n\n# https:\/\/matplotlib.org\/3.1.0\/gallery\/statistics\/bxp.html\n\nax1.set_title(\"The number of transactions without identity info\")\n\nax2.set_title(\"The distribution of null-values percentages for transactions features\")\n\nplt.suptitle(\"An overview of data completeness for train part of the data\")\n\nax1.grid(True)\n\nax2.grid(True)\n\nplt.show()","301ec157":"print(\"Descriptive statistics about null-values in features of transactions:\")\n\nprint()\n\nprint(train_transaction_na_flags_gr.T.describe())\n\ntrain_transaction_na_flags_gr_t = train_transaction_na_flags_gr.T\n\nprint()\n\nprint(\"So what we have is:\")\n\nprint(\"\\t- 50% of non-fraud train transactions have > 28% of features with null-values;\")\n\nprint(\"\\t- 50% of fraud train transactions have > 29% of features with null-values;\")\n\nprint(\"\\t- 25% of non-fraud train transactions have > 78% of features with null-values;\")\n\nprint(\"\\t- 25% of fraud train transactions have > 50% of features with null-values;\")\n\nprint(\n    \"\\t- there are {} non-fraud train transactions where > 90% features have null-values;\".format(\n        train_transaction_na_flags_gr_t[train_transaction_na_flags_gr_t[0] > 90][0].count()\n    )\n)\n\nprint(\n    \"\\t- there are {} fraud train transactions where > 80% features have null-values.\".format(\n        train_transaction_na_flags_gr_t[train_transaction_na_flags_gr_t[1] > 80][1].count()\n    )\n)\n\nprint(\"\\t- there are some non-fraud train transactions where > 94% features have null-values;\")\n\nprint(\"\\t- there are some fraud train transactions where > 82% features have null-values.\")\n\nprint()\n\nprint(\n    \"Percent of non-fraud train transactions with identity info:\",\n    train_transaction[train_transaction.isFraud == 0].has_identity_info.mean() * 100\n)\n\nprint()\n\nprint(\n    \"Percent of fraud train transactions with identity info:\",\n    train_transaction[train_transaction.isFraud == 1].has_identity_info.mean() * 100\n)","8a7bf86d":"train_transaction_na_flags_gr_t_m = pd.melt(\n    train_transaction_na_flags_gr.T.reset_index(),\n    id_vars=['index'],\n    value_vars=[0, 1]\n).rename(\n    {\"index\": \"features\", \"value\": \"percentage\"},\n    axis=1\n)\n\ntrain_transaction_na_flags_gr_t_m.isFraud = train_transaction_na_flags_gr_t_m.isFraud.astype(np.bool)\n\nplt.figure(figsize=(20, 150))\n\nsns.barplot(\n    y=\"features\",\n    x=\"percentage\",\n    hue=\"isFraud\",\n    data=train_transaction_na_flags_gr_t_m,\n    order=train_transaction_na_flags_gr.T.sort_values(by=0, ascending=False).index,\n    orient='h'\n)\n\nplt.title(\"Percentage of null-values in features for train part of the data\")\n\nplt.show()","d0665c88":"train_transaction_na_flags.sort_values(by=\"TransactionDT\", ascending=True, inplace=True)","6490c513":"sorted(sklearn.metrics.SCORERS.keys())","8e6612d1":"X, y = train_transaction_na_flags[\n    [column for column in train_transaction_na_flags.columns.values if column not in [\"isFraud\", \"TransactionDT\"]]\n], train_transaction_na_flags[\"isFraud\"]","34e34ec6":"bernoulli_nb = BernoulliNB()\nlogistic_regr = LogisticRegression()\nnu_svc = NuSVC(probability=True)\nc_svc = SVC(probability=True)","202feeba":"bernoulli_nb_scores = pd.DataFrame(\n    cross_validate(\n        bernoulli_nb,\n        X,\n        y,\n        cv=StratifiedKFold(30),\n        scoring=[\"roc_auc\", \"accuracy\", \"recall\", \"precision\", \"f1\"],\n        n_jobs=4,\n        verbose=10\n    )\n)","235b65a1":"logistic_regr_scores = pd.DataFrame(\n    cross_validate(\n        logistic_regr,\n        X,\n        y,\n        cv=StratifiedKFold(30),\n        scoring=[\"roc_auc\", \"accuracy\", \"recall\", \"precision\", \"f1\"],\n        n_jobs=4,\n        verbose=10\n    )\n)","7a8b226e":"import scipy\nscipy.test()","a333270f":"nu_svc_scores = pd.DataFrame(\n    cross_validate(\n        nu_svc,\n        X,\n        y,\n        cv=StratifiedKFold(30),\n        scoring=[\"roc_auc\", \"accuracy\", \"recall\", \"precision\", \"f1\"],\n        n_jobs=4,\n        verbose=10\n    )\n)","2e909f35":"c_svc_scores = pd.DataFrame(\n    cross_validate(\n        c_svc,\n        X,\n        y,\n        cv=StratifiedKFold(30),\n        scoring=[\"roc_auc\", \"accuracy\", \"recall\", \"precision\", \"f1\"],\n        n_jobs=4,\n        verbose=10\n    )\n)","456e3026":"plt.figure(figsize=(30, 15))\nscores[\n    [\n        \"test_roc_auc\",\n        \"test_accuracy\",\n        \"test_recall\",\n        \"test_precision\",\n        \"test_f1\"\n    ]\n].boxplot()\nplt.show()","d28d17ed":"plt.figure(figsize=(30, 15))\nscores[[\"fit_time\", \"score_time\"]].boxplot()\nplt.show()","771ede5a":"# Data quality check","2db3cdac":"# A bit of configuration for pandas & visualizations","a24829a7":"# Read the data","c1dacd94":"# Data location","fb321d20":"# All imports necessary","81bcc128":"# First glance at the data","a4677a58":"# Very simple baselines (without any tunning or feature engineering)","6ace5372":"**<span style=\"color:red\">THE NOTEBOOK IS WORK-IN-PROGRESS.<\/span>**\n\n**<span style=\"color:red\">Please upvote it if you find it interesting or usefull<\/span>**","e9c573a6":"# Exploratory Data Analysis of the data provided by Vesta Corporation\n\nHere let's mention the dataset description from [this](https:\/\/www.kaggle.com\/c\/ieee-fraud-detection\/discussion\/101203) post:\n\n## Transaction Table\n\n* **TransactionDT:** timedelta from a given reference datetime (not an actual timestamp).\n* **TransactionAMT:** transaction payment amount in USD.\n* **ProductCD:** product code, the product for each transaction.\n* **card1 - card6:** payment card information, such as card type, card category, issue bank, country, etc.\n* **addr:** address.\n* **dist:** distance.\n* **P_emaildomain:** purchaser email domain.\n* **R_emaildomain:** recipient email domain.\n* **C1-C14:** counting, such as how many addresses are found to be associated with the payment card, etc. The actual meaning is masked.\n* **D1-D15:** timedelta, such as days between previous transaction, etc.\n* **M1-M9:** match, such as names on card and address, etc.\n* **Vxxx:** Vesta engineered rich features, including ranking, counting, and other entity relations.\n\n### Categorical Features:\n* ProductCD.\n* card1 - card6.\n* addr1, addr2.\n* Pemaildomain Remaildomain.\n* M1 - M9.\n\n## Identity Table (variables in this table are identity information):\n* network connection information (IP, ISP, Proxy, etc).\n* digital signature (UA\/browser\/os\/version, etc) associated with transactions. \n\nThey're collected by Vesta\u2019s fraud protection system and digital security partners.\n\nThe field names are masked and pairwise dictionary will not be provided for privacy protection and contract agreement.\n\n### Categorical Features:\n* DeviceType.\n* DeviceInfo.\n* id12 - id38."}}