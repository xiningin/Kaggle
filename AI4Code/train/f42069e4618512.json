{"cell_type":{"5e811292":"code","58ba39a1":"code","32849658":"code","58c1b8c1":"code","3893f3eb":"code","1972d684":"code","58d3d94f":"code","ce3f5d05":"code","ddac9b6f":"code","999e1ec2":"code","f4638fd7":"code","4b5eac15":"markdown","22a37f74":"markdown","de8ad253":"markdown","66ca145d":"markdown","d0c91459":"markdown","86edb64c":"markdown","6a89a560":"markdown"},"source":{"5e811292":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58ba39a1":"!git clone -l -s git:\/\/github.com\/puneetmishra2948\/hackathon.git\n!cp hackathon\/system.py system.py\nfrom system import Broker, Metrics, GenerateSubmission","32849658":"train_data = pd.read_csv('\/kaggle\/input\/create-and-optimize-a-trading-strategy\/train_data.csv',\n                         parse_dates=['Timestamp'], \n                         infer_datetime_format=True, \n                         memory_map=True, \n                         index_col='Timestamp', \n                         low_memory=False)","58c1b8c1":"backtester = Broker(price_data = train_data,\n                    MA_period_slow=155, \n                    MA_period_fast=95)\nbacktester.testerAlgo()\ntrain_tradeLog = backtester.tradeLog","3893f3eb":"train_tradeLog.head()","1972d684":"metrics_df = Metrics(train_tradeLog)\nmetrics_df.overall_calc()\nmetrics_df.performance_metrics","58d3d94f":"metrics_df.plot_cumulative_returns()","ce3f5d05":"metrics_df.plot_monthly_performance()","ddac9b6f":"metrics_df.plot_yearly_performance()","999e1ec2":"generate = GenerateSubmission(MA_period_slow=155, MA_period_fast=95)\n\ngenerate.createSubmissionFile()\n\ngenerate.submission_metrics","f4638fd7":"generate.submission_metrics.to_csv('submission.csv')","4b5eac15":"# Broker\n\n    A class to backtest the strategy.\n\n    ...\n\n    Attributes\n    ----------\n    price_data : Pandas DataFrame\n        pass the training data provided to run the backtest on\n    MA_period_slow : int\n        slow moving average period\n    MA_period_fast : int\n        fast moving average period\n\n    Methods\n    -------\n    testerAlgo():\n        Runs the backtest on provided data and using the given MA periods. Saves the results of every trade in a tradelog that can be accessed using .tradeLog attribute\n\n","22a37f74":"# GenerateSubmission\n\n    A class to generate your sample submission files\n    ...\n    Attributes\n    ----------\n    MA_period_slow : int\n        the best slow moving average period obtained by you\n    MA_period_fast : int\n        the best fast moving average period obtained by you\n\n    Methods\n    -------\n    createSubmissionFile():\n       Generates the required submission metrics on both the train and test data. Saves the metrics in a DataFrame that can be accessed using the .submission_metrics attribute.","de8ad253":"# Metrics\n\n    A class to view the metrics and visualise the important charts of the previously backtested strategy. These are just sample. You can compute your own metrics using the tradelog gwenerated before.\n    ...\n    Attributes\n    ----------\n    tradelog : Pandas DataFrame\n        pass the previosuly saved tradelog DataFrame\n\n    Methods\n    -------\n    overall_calc():\n        Computes the metrics on the provided tradelog. Saves the metrics in a DataFrame that can be accessed using the .performance_metrics attribute.\n        Equity Curve, Yearly performance, and the Monthly performance can be visualised using the below function calls.","66ca145d":"# Ensure that you convert the Timestamp column to datetime type and set it as the index","d0c91459":"# You should save the above dataframe with index and upload it for submission. Do provide a brief description of your approach while submitting. Best of luck! :)","86edb64c":"# Run the below cell to import the required backtesting libraries ","6a89a560":"# Your task is to optimize the fast and slow moving average periods using any method you like. Do note that it needs to be quantititave in nature and trial and error wont be accepted as a solution."}}