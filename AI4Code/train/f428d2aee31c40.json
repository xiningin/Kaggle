{"cell_type":{"bb4483b4":"code","69bf15a5":"code","ed1eeb54":"code","4b591841":"code","e7ef5d30":"code","21577a02":"code","85ac3fdb":"code","346d8d9b":"code","55bfb48d":"code","9ba13d8d":"code","6e9e984a":"code","14407129":"code","0c8d222b":"code","c7bc3d87":"code","5cfc48c3":"code","9c6b9155":"code","2405b471":"code","e4d72a0a":"code","28f3b4ae":"code","2c2495e1":"code","71fdae58":"code","7bc3d090":"code","1b75b438":"code","a5562d65":"code","4b283ebe":"code","39dfac75":"code","68e055bc":"code","3a07793a":"code","76535022":"code","02815daf":"code","5c3f99b5":"code","0a4dff06":"code","e40df64b":"code","9057ef6d":"code","b0b62993":"code","1ef14dbb":"code","a8031947":"code","a20d0325":"code","208cdb17":"code","2437fde5":"code","294b2f4c":"code","33ff9364":"code","7bc5e35e":"code","fb6b91e5":"code","09298a8c":"code","98309df7":"code","3657de86":"code","ebf88307":"code","be6b4387":"code","50674b69":"code","48f5784c":"code","1bc6d4ba":"code","a5fd3f1a":"code","6f0194b2":"code","4f908f45":"code","e99c8667":"code","b9ea066a":"code","fbc1ab8e":"code","4665e282":"code","29c00036":"code","99436433":"code","e25efba0":"code","2db32235":"code","0621a064":"code","e6710100":"code","e4350cd0":"code","0fe9b1ed":"code","cc61c911":"code","e8f0b971":"code","b16eacea":"code","9da98545":"code","550bfe9e":"code","0debf3e1":"code","be0f916c":"code","22b808c7":"code","ffbab621":"code","22d67914":"code","eae76365":"code","ca78d1bc":"code","93c27afe":"code","e9941934":"code","5f612e98":"code","4327bc39":"code","89109fb9":"code","7100b771":"code","3ccc4d91":"code","a2786e29":"code","98f8fd62":"code","30d88029":"code","ea00f18f":"code","f4813439":"code","4a973e8d":"code","ffaae7ad":"code","df6f0cb7":"code","4781fb47":"code","afe6f9b4":"code","b173b134":"code","cbf559e0":"code","6a06a239":"code","7b933172":"code","137c6f82":"code","6dc5c70a":"code","92e0bb36":"code","729619dc":"code","293ffd63":"code","1d6df77e":"code","f9069c21":"code","9997930f":"code","28845b53":"code","09d1a712":"code","7e220f01":"code","48625be3":"code","8b609e25":"code","a5bd5d03":"code","2f8b9cc7":"code","4723e728":"markdown","a535dffc":"markdown","1cef879a":"markdown","570c16f8":"markdown","a03ba62a":"markdown","edd1c12d":"markdown","a0c9cdd1":"markdown","d8b03b2e":"markdown","b0761804":"markdown","7540ad4a":"markdown","b252804d":"markdown","455c21a2":"markdown","f842db5a":"markdown","d5dd9a4a":"markdown","fc280acd":"markdown","597b7250":"markdown","95291f5d":"markdown","858eb7df":"markdown","1a3540b8":"markdown","c0549cdc":"markdown","c27159ed":"markdown","72cbe7d5":"markdown","5f87bb10":"markdown","e2f7b217":"markdown"},"source":{"bb4483b4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","69bf15a5":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import validation_curve\n\nfrom sklearn.linear_model import Lasso\n\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.ensemble import RandomForestRegressor\nimport xgboost as xgb\n\nfrom sklearn.metrics import mean_squared_error as MSE","ed1eeb54":"train = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Training.csv\",header=0)\ntrain.head()","4b591841":"train.info()","e7ef5d30":"train['Match_ID'] = train['Id']\ntrain['Player'] = train['Id']\nfor i in range(0, len( train)):\n    train['Player'][i] =  train['Id'][i].split(\"_\")[-1]\n    train['Match_ID'][i] = int( train['Id'][i].split('_')[:1][0])","21577a02":"train.head()","85ac3fdb":"columns = ['Match_ID','Player','Total Points']\ntrain = train[columns]\ntrain.head()","346d8d9b":"submission = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/sample_submission.csv\",header=0)\nsubmission.head()","55bfb48d":"submission['Match_ID'] = submission['Id']\nsubmission['Player'] = submission['Id']\nfor i in range(0, len( submission)):\n    submission['Player'][i] =  submission['Id'][i].split(\"_\")[-1]\n    submission['Match_ID'][i] = int( submission['Id'][i].split('_')[:1][0])","9ba13d8d":"submission = submission[columns]\nsubmission.head()","6e9e984a":"match8_19 = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv\",header=0)\nmatch20 = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv\",header=0)\nmatch8_19.head()","14407129":"match20.head()","0c8d222b":"match8_19.info()","c7bc3d87":"teams = match8_19.team1.unique()\nteams2 = match20.team1.unique()\nprint(teams)\nprint(teams2)","5cfc48c3":"short = { 'Kolkata Knight Riders':'KKR','Chennai Super Kings':'CSK','Rajasthan Royals':'RR',\n         'Mumbai Indians':'MI','Deccan Chargers':'SRH','Kings XI Punjab':'KXIP',\n         'Royal Challengers Bangalore':'RCB','Delhi Daredevils':'DC',\n         'Sunrisers Hyderabad':'SRH','Delhi Capitals':'DC','Rising Pune Supergiants':'RPS',\n         'Gujarat Lions':'GL','Rising Pune Supergiant':'RPS','Pune Warriors':'RPS',\n         'Kochi Tuskers Kerala':'KTK'}","9c6b9155":"match8_19['team1'] = match8_19['team1'].map(short) \nmatch8_19['team2'] = match8_19['team2'].map(short) \nmatch8_19.head()","2405b471":"match8_19.rename(columns = {'match_id':'Match_ID'}, inplace = True) \nmatch8_19.head()","e4d72a0a":"train_m = pd.merge(train[['Match_ID','Player','Total Points']], match8_19[['Match_ID','team1','team2']], on = 'Match_ID', how='inner')","28f3b4ae":"train_m.head()","2c2495e1":"match20.rename(columns = {'match_id':'Match_ID'}, inplace = True) \nmatch20.head()","71fdae58":"submit_m = pd.merge(submission[['Match_ID','Player','Total Points']], match20[['Match_ID','team1','team2']], on = 'Match_ID', how='inner')","7bc3d090":"submit_m.head()","1b75b438":"all_added = pd.concat([train_m,submit_m]) \nall_added.info()","a5562d65":"Avg_scores = all_added.groupby('Player')['Total Points'].mean().reset_index()\nAvg_scores.rename(columns = {'Total Points':'Avg'}, inplace = True) \nAvg_scores.head()","4b283ebe":"all_added1 = pd.merge(all_added[['Player','Match_ID','team1','team2']], Avg_scores[['Player','Avg']], on = 'Player', how='inner')\nprint(all_added1.shape)\nall_added1.head()","39dfac75":"final_final = pd.merge(all_added[['Match_ID','Player']],all_added1[['Player','Match_ID','team1','team2','Avg']], on = ['Match_ID','Player'], how='inner')\nprint(final_final.shape)\nfinal_final.head()","68e055bc":"X = final_final[['Player','team1','team2','Avg']]\ny = train['Total Points']\nX.head()","3a07793a":"y.head()","76535022":"label=X.select_dtypes(include='object')\nlabel","02815daf":"labelencoder = LabelEncoder()\nlabel['Player']=labelencoder.fit_transform(label['Player'])\nlabel['team1']=labelencoder.fit_transform(label['team1'])\nlabel['team2']=labelencoder.fit_transform(label['team2'])\nlabel['Avg']=X['Avg']","5c3f99b5":"print(label.shape)\nlabel.head()","0a4dff06":"# One Hot Encoder is forming too many variables so we shall proceed with Label Encoder","e40df64b":"#enc = OneHotEncoder()\n#encoded = enc.fit_transform(X).toarray()\n#encoded","9057ef6d":"#train_enc = encoded[:15916]\n#sub_enc = encoded[15916:]","b0b62993":"train_enc = label[:15916]\nsub_enc = label[15916:]","1ef14dbb":"train_enc.shape,sub_enc.shape,y.shape","a8031947":"\nX_train, X_test, y_train, y_test = train_test_split(train_enc, y, test_size=0.2, random_state=2519)","a20d0325":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","208cdb17":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","2437fde5":"lm_s = Lasso(alpha=0.5)","294b2f4c":"lm_s.fit(X_train,y_train)","33ff9364":"MSE(y_train, lm_s.predict(X_train))","7bc5e35e":"param_range_lasso = np.logspace(-2,8,100)","fb6b91e5":"train_scores_las,test_scores_las = validation_curve(Lasso(),X_train,y_train,\"alpha\",param_range_lasso,scoring='neg_mean_squared_error')","09298a8c":"print(train_scores_las)","98309df7":"print(test_scores_las)","3657de86":"train_mean_las = np.mean(train_scores_las,axis=1)","ebf88307":"test_mean_las = np.mean(test_scores_las,axis=1)","be6b4387":"max(test_mean_las)","50674b69":"max(train_mean_las)","48f5784c":"sns.jointplot(x=np.log(param_range_lasso),y=test_mean_las)","1bc6d4ba":"sns.jointplot(x=np.log(param_range_lasso),y=train_mean_las)","a5fd3f1a":"np.where(test_mean_las==max(test_mean_las))","6f0194b2":"param_range_lasso[5]","4f908f45":"lm_s_best = Lasso(alpha= param_range_lasso[5])","e99c8667":"lm_s_best.fit(X_train,y_train)","b9ea066a":"added = lm_s_best.predict(X_test)","fbc1ab8e":"added = [10 if i < 0 else i for i in added]","4665e282":"MSE(y_test, added)","29c00036":"np.sqrt(MSE(y_test, added))","99436433":"MSE(y_train, lm_s_best.predict(X_train))","e25efba0":"np.sqrt(MSE(y_train, lm_s_best.predict(X_train)))","2db32235":"lm_e = ElasticNet(alpha=0.5)","0621a064":"lm_e.fit(X_train,y_train)","e6710100":"MSE(y_test, lm_e.predict(X_test))","e4350cd0":"from sklearn.model_selection import validation_curve","0fe9b1ed":"param_range_net = np.logspace(-2,8,50)","cc61c911":"train_scores_net,test_scores_net = validation_curve(ElasticNet(),X_train,y_train,\"alpha\",param_range_net,scoring='neg_mean_squared_error')","e8f0b971":"print(train_scores_net)","b16eacea":"print(test_scores_net)","9da98545":"train_mean_net = np.mean(train_scores_net,axis=1)","550bfe9e":"test_mean_net = np.mean(test_scores_net,axis=1)","0debf3e1":"max(test_mean_net)","be0f916c":"max(train_mean_net)","22b808c7":"sns.jointplot(x=np.log(param_range_net),y=test_mean_net)","ffbab621":"sns.jointplot(x=np.log(param_range_net),y=train_mean_net)","22d67914":"np.where(test_mean_net==max(test_mean_net))","eae76365":"param_range_net[0]","ca78d1bc":"lm_e_best = ElasticNet(alpha= param_range_net[0])","93c27afe":"lm_e_best.fit(X_train,y_train)","e9941934":"MSE(y_test, lm_e_best.predict(X_test))","5f612e98":"np.sqrt(MSE(y_test, lm_e_best.predict(X_test)))","4327bc39":"MSE(y_train, lm_e_best.predict(X_train))","89109fb9":"np.sqrt(MSE(y_train, lm_e_best.predict(X_train)))","7100b771":"from sklearn.ensemble import RandomForestRegressor","3ccc4d91":"rf_reg = RandomForestRegressor(n_estimators=100,random_state=2519,n_jobs=-1,max_features=4)","a2786e29":"rf_reg.fit(X_train, y_train)","98f8fd62":"added = rf_reg.predict(X_test)","30d88029":"added = [10 if i < 0 else i for i in added]","ea00f18f":"MSE(y_test, added)","f4813439":"np.sqrt(MSE(y_test, added))","4a973e8d":"MSE(y_train, rf_reg.predict(X_train))","ffaae7ad":"np.sqrt(MSE(y_train, rf_reg.predict(X_train)))","df6f0cb7":"import xgboost as xgb","4781fb47":"xgb_reg = xgb.XGBRegressor(max_depth=3, n_estimators=250, learning_rate=0.01,\n                            n_jobs=-1,random_state=2519,subsample=0.8)","afe6f9b4":"xgb_reg.fit(X_train, y_train)","b173b134":"y_cal = xgb_reg.predict(X_test)","cbf559e0":"y_cal = [10 if i < 0 else i for i in y_cal]","6a06a239":"MSE(y_test, y_cal)","7b933172":"np.sqrt(MSE(y_test, y_cal))","137c6f82":"params = {\n   \n    'max_depth': 3,\n    'subsample': 0.8,\n    'colsample_bytree': 0.9, \n    'objective':'reg:squarederror',\n    'eval_metric':'rmse',\n    'learning_rate': 0.01\n}","6dc5c70a":"def XGBmodel(X_train,X_test,y_train,y_test,params):\n    matrix_train = xgb.DMatrix(X_train,label=y_train)\n    matrix_test = xgb.DMatrix(X_test,label=y_test)\n    model=xgb.train(params=params,\n                    dtrain=matrix_train,num_boost_round=5000, \n                    early_stopping_rounds=10,evals=[(matrix_test,'test')])\n    return model\n\nmodel = XGBmodel(X_train,X_test,y_train,y_test,params)","92e0bb36":"prediction = model.predict(xgb.DMatrix(X_test), ntree_limit = model.best_ntree_limit).tolist()","729619dc":"prediction = np.round(prediction)\nprediction","293ffd63":"MSE(y_test, prediction)","1d6df77e":"np.sqrt(MSE(y_test, prediction))","f9069c21":"submit1 = scaler.transform(sub_enc)","9997930f":"prediction = model.predict(xgb.DMatrix(submit1), ntree_limit = model.best_ntree_limit).tolist()","28845b53":"prediction = np.round(prediction)\nprediction","09d1a712":"prediction = [10 if i < 0 else i for i in prediction]","7e220f01":"sub = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/sample_submission.csv\",header=0)","48625be3":"submission1 = sub.copy()\nsubmission1.head()","8b609e25":"submission1['Total Points']=prediction","a5bd5d03":"submission1.to_csv(\"submission1.csv\", index=False)","2f8b9cc7":"submission1.head()","4723e728":"# Evaluation","a535dffc":"## Overview\n\n### Background: \nIPL is one of India's most loved cricket competitions. It is looked as a festival and lot of prizes, new talent hunts and team rivalry is found. Immense amount of funds are provided by sponsors and even companies like Dream 11, My 11 Circle target the IPL season to generate its maximum revenue. \nPeople are interested in predicting which team is likely to win and how they can bet on players on Dream 11, My 11 circle and on other legal and illegal platform. \n### Problem statement: \nOur interest lies in a trying creating a model to predict performance of players in 2020 for every match.\n### Dataset:\nThe dataset is provided by Kaggle Competition: IPL 2020 Player Performance\nThe link to dataset: https:\/\/www.kaggle.com\/c\/ipl-2020-player-performance\n### Challenges: \n* Some of the players in 2020 would be fresh talents and so no previous IPL performance of these players would be traced.\n* The venue for IPL 2020 is **UAE**, which is completely different form all the previous venues in **India**.\n\n#### So Let\u2019s Begin\u2026.\n\n","1cef879a":"#### We now have to find appropriate value of alpha for better fit","570c16f8":"## Model Fitting","a03ba62a":"* As discussed in the challenges, some of the players are new, so we have to introduce them to our training data else a problem could arise while fitting the data.","edd1c12d":"# <font color=\"Blue\"> IPL 2020 Performance Competition <\/font>\n### By: Vishal Lobhe\n#### Email: vishallobhe1998@gmail.com        Linkedin: https:\/\/www.linkedin.com\/in\/vishal-lobhe\/\n#### Contact: +91 9130236510\n\n![](https:\/\/d28wu8o6itv89t.cloudfront.net\/images\/IPLpng-1597936417382.png)\n","a0c9cdd1":"* This creates 50 values between 10^-2 and 10^8","d8b03b2e":"# Evaluation","b0761804":"* Adding players average scores","7540ad4a":"### Validating with test scores","b252804d":"* mapping each player to the match he played","455c21a2":"### Random Forest","f842db5a":"# Evaluation","d5dd9a4a":"### Evaluation","fc280acd":"### XG Boost","597b7250":"#### We now have to find appropriate value of alpha for maximum fit","95291f5d":"# Submission \n#### It looks like XG Boost is giving the lowest RMSE, thus we shall proceed with this model for our Submission .","858eb7df":"### Processing Data","1a3540b8":"* Matches 2020 have teams in short form like MI, CSK, RCb, thus, we would also change team names to short form in Matches 2008-2019.","c0549cdc":"### Elastic Net","c27159ed":"## Conclusion:\n#### We have successfully trained a model with very low mean squared error.\n### Future improvements:\n* We can gather some more information about players, like for which team each of the player plays and add these variables.\n* Some more variables could be added like moving averages of last 5 or 10 games, etc\n\n#### Overall we have trained a good model.\n### Thanks for being a good reader!\n![](https:\/\/radio-assets-cdn.ekantipur.com\/uploads\/source\/news\/2020\/sports\/crickett-1595908182.jpg)\n","72cbe7d5":"# Evaluation","5f87bb10":"* This creates 100 values between 10^-2 and 10^8","e2f7b217":"### Lasso"}}