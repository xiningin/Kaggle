{"cell_type":{"f8c87065":"code","890930b0":"code","bbb36f70":"code","b7b64239":"code","8428f9c1":"code","1d8de5f5":"code","18332b6c":"code","99a1e970":"code","a986aa74":"code","46b6012a":"code","6d14ad84":"code","4f8d7fa7":"code","c79248df":"code","921d65ca":"markdown","db54b004":"markdown","4f1a39d6":"markdown","7039c96e":"markdown","c6f452eb":"markdown","8f5effd6":"markdown","64a583bd":"markdown","4d9f8f25":"markdown","54338dde":"markdown","83cdd7d2":"markdown"},"source":{"f8c87065":"import pandas as pd","890930b0":"tipo=[1,2,2,3,1,2,3,2,1,2,3,1,1,2,3,3,2,1,2,3,2,3,1,3,2,2,3,1,2,3,1,2,3,1,3,2,1,3,2,3,1,2,3,1,2,1,2,3,1,2]\nclasi=[1,2,3,2,4,2,3,2,1,2,3,4,2,3,1,2,3,2,1,4,4,1,2,4,1,2,3,1,4,4,2,3,2,1,4,2,3,1,4,2,1,3,2,1,4,1,2,3,2,1]","bbb36f70":"df = pd.DataFrame({'tipo' : tipo,\n                   'clasi' :clasi})\ndf.head()","b7b64239":"### categor\u00edas \ndf['tipo_lb'] = df['tipo'].map({1: 'Pub', 2: 'Pri', 3: 'Con'})\ndf['clasi_lb'] = df['clasi'].map({1: 'C 1', 2: 'C 2', 3: 'C 3',4: 'C 4'})\ndf.head()","8428f9c1":"## creaci\u00f3n de la tabla \ntabla=pd.crosstab(df.tipo,df.clasi)\ntabla\n#pd.crosstab(df.tipo_lb,df.clasi_lb)","1d8de5f5":"pd.crosstab(df.tipo,df.clasi, margins=True)","18332b6c":"pd.crosstab(df.tipo, df.clasi).apply(lambda r: r\/len(df), axis=1)*100","99a1e970":"pd.crosstab(df.tipo,df.clasi).apply(lambda r: r\/r.sum(), axis=1)*100","a986aa74":"pd.crosstab(df.tipo,df.clasi).apply(lambda r: r\/r.sum(), axis=0)","46b6012a":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\n\n#tabla.iloc[0,:]","6d14ad84":"r = [0,1,2,3]\n \nbars = tabla.iloc[0,:]+tabla.iloc[1,:]\n    \n# Names of group and bar width\nnames = ['C1','C2','C3','C4']\nbarWidth = 1\n \n# Create brown bars\nplt.bar(r, tabla.iloc[0,:], color='#7f6d5f', edgecolor='white', width=barWidth,label='P\u00fablicas')\n# Create green bars (middle), on top of the firs ones\nplt.bar(r, tabla.iloc[1,:], bottom=tabla.iloc[0,:], color='#557f2d', edgecolor='white', width=barWidth,label='Privadas')\n# Create green bars (top)\nplt.bar(r, tabla.iloc[2,:], bottom=bars, color='#2d7f5e', edgecolor='white', width=barWidth,label='Controladas')\n\nplt.xticks(r, names, fontweight='bold')\nplt.xlabel(\"Calificacion\")\nplt.legend()\n# Show graphic\nplt.show()\n\n","4f8d7fa7":"labels = ['C1', 'C2', 'C3', 'C4']\nwidth = 0.35   ### ancho de las barras \n\nfig, ax = plt.subplots()\n\nax.bar(labels, tabla.iloc[0,:], width, label='Privadas')\nax.bar(labels, tabla.iloc[1,:], width, bottom=tabla.iloc[0,:],\n       label='P\u00fablicas')\nax.bar(labels, tabla.iloc[2,:], width, bottom=tabla.iloc[0,:]+tabla.iloc[1,:],\n       label='Controlada')\n\nax.set_ylabel('Frecuencias')\nax.set_xlabel('Calificaci\u00f3n')\nax.set_title('Barras apiladas con Python')\n\nax.legend()\nplt.show()","c79248df":"### tabla con marginales \nTabMarg=pd.crosstab(df.tipo,df.clasi, margins=True) \n\nfreq=TabMarg.iloc[3,0:4]\n\nfig1, ax1 = plt.subplots()\n\nax1.pie(freq, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n","921d65ca":"### Gr\u00e1fico circular (de torta)  ","db54b004":"### Otra forma para el gr\u00e1fico de barras ","4f1a39d6":"### Porcentajes con respecto a filas ","7039c96e":"### Porcentaje con respecto a columnas ","c6f452eb":"### Recodificaci\u00f3n ","8f5effd6":"### Con las marginales ","64a583bd":"### Creaci\u00f3n del gr\u00e1fico de barras ","4d9f8f25":"### Ingreso de los datos ","54338dde":"### Bar plot","83cdd7d2":"### Porcentajes con respecto al total "}}