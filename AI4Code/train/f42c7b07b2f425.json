{"cell_type":{"39e6b2c5":"code","4e8bddea":"code","cbe49c59":"code","7f44d5bd":"code","82f0fc7c":"code","1bd1d738":"code","d3cc6f35":"code","620bd795":"code","98d56267":"code","9fbb8e67":"code","deaa69ba":"code","d5749689":"code","46f7a34f":"code","ddc3a825":"code","0347eaad":"code","087d1294":"code","6f0f2be2":"code","ac7d5367":"code","f7704c53":"code","839027cd":"code","c626588b":"markdown","8b3d07b7":"markdown","d3b15b94":"markdown","27ff181f":"markdown","b90b297c":"markdown","b6addf1f":"markdown","5a9b383d":"markdown","528dcf6b":"markdown","16c44c43":"markdown","b0fcff0d":"markdown","c96e529a":"markdown","d4159814":"markdown","45ee1ccf":"markdown","71c8775d":"markdown","9ed4c0af":"markdown","cb9c0454":"markdown","50922fc1":"markdown","7e084ca4":"markdown","839e63f1":"markdown","4b00ccfd":"markdown","28a5512e":"markdown","9f5be703":"markdown","e05b8dc5":"markdown","adeb87db":"markdown","fe6e1509":"markdown","9d252f55":"markdown","b937b66f":"markdown","b3cb7dfd":"markdown","a0ef4223":"markdown","cde495a6":"markdown","263489da":"markdown","30e83562":"markdown"},"source":{"39e6b2c5":"# Import dependencies\nimport numpy as np\nimport os\nimport pandas as pd\nimport operator\nimport matplotlib.pyplot as plt\nimport seaborn as sns","4e8bddea":"# Load in dataset\nKAGGLE_DIR = '..\/input\/'\n# There were some issues with the encoding so we manually set it to 'latin1'\ndf = pd.read_csv(KAGGLE_DIR + 'ks-projects-201801.csv', encoding='latin1', low_memory=False)","cbe49c59":"print('DataFrame shape: {} columns and {} rows'.format(df.shape[1], \n                                                       df.shape[0]))","7f44d5bd":"print('First 5 rows:')\ndisplay(df.head())\n\nprint('Last 5 rows:')\ndisplay(df.tail())","82f0fc7c":"df.info()","1bd1d738":"percent_missing = (df.isnull().sum() * 100 \/ len(df)).round(2)\nmissing_value_df = pd.DataFrame({'column_name': df.columns,\n                                 'percent_missing': percent_missing})\nmissing_value_df.sort_values('percent_missing', ascending=False, inplace=True)\nmissing_value_df","d3cc6f35":"display(df[df['usd pledged'].isnull()].shape)\n# First 20 columns\ndf[df['usd pledged'].isnull()].head(10)","620bd795":"df['usd pledged'].fillna(df['usd_pledged_real'], inplace=True)","98d56267":"duplication = df.duplicated(['usd pledged', 'usd_pledged_real'])\ndup_count = 0\nfor row in duplication:\n    if row == True:\n        dup_count += 1\n        \n# Duplications percentage\nprint('Duplicates between USD Pledged and USD Pledged Real: {} %'.format(round(dup_count \/ len(df) * 100, 2)))","9fbb8e67":"print('Categories in category: ', df['category'].nunique())\ndf['category'].value_counts()[:20].plot(kind='barh', \n                                        figsize=(14,6), \n                                        title='Top 20 most popular categories')","deaa69ba":"print('Categories in main_category: ', df['main_category'].nunique())\ndf['main_category'].value_counts().plot(kind='barh', \n                                        figsize=(14,6), \n                                        title='Main Categories')","d5749689":"print('Number of unique countries: ', df['country'].nunique())\ndf['country'].value_counts()[:15].plot(kind='barh', \n                                       figsize=(14,6), \n                                       title='Top 15 countries')","46f7a34f":"print('The average Kickstarter campaign has {} USD pledged, {} backers and a goal of {} USD.'.format(round(df['usd_pledged_real'].mean(), 2),\n                                                                                               int(df['backers'].mean()),\n                                                                                               round(df['goal'].mean(), 2)))","ddc3a825":"df['discrepancy'] = df['goal'] - df['usd_pledged_real']\ndf['target_reached'] = df['discrepancy'] <= 0\n\ntarget_reached = df.loc[lambda df: df['target_reached'] == True]\ntarget_not_reached = df.loc[lambda df: df['target_reached'] == False]\ntarget_reached_perc = round(len(target_reached) \/ len(df) * 100, 2)\ntarget_not_reached_perc = round(len(target_not_reached) \/ len(df) * 100, 2)\n\nprint('Out of {} Kickstarter campaigns:\\n\\n{} % reached their target.'.format(len(df), \n                                                                            target_reached_perc))\nprint('For the {} campaigns that reached their target,\\n\\\nthere was on average {} USD pledged more than the target.\\n'.format(len(target_reached), \n                                                                  round(target_reached['usd_pledged_real'].mean(), 2)))\n\nprint('{} % of the campaigns did not reach their target.\\n\\\nFor the {} campaigns that did not reach their target,\\n\\\nthere was on average {} USD pledged less than the target.'.format(target_not_reached_perc, \n                                                                  len(target_not_reached), \n                                                                  round(target_not_reached['usd_pledged_real'].mean(), 2)))","0347eaad":"df['currency'].value_counts().plot(kind='barh', \n                                   figsize=(14,6), \n                                   title='Currencies used')","087d1294":"df['state'].value_counts().plot(kind='barh', figsize=(14,6), title='Campaign states')\n\nperc_successful = len(df[df['state'] == 'successful']) \/ len(df) * 100\nperc_failed = len(df[df['state'] == 'failed']) \/ len(df) * 100\nperc_canceled = len(df[df['state'] == 'canceled']) \/ len(df) * 100\nperc_other = 100 - (perc_successful + perc_failed + perc_canceled)\n\nprint('{} % of campaigns were successful\\n\\\n{} % of campaigns failed\\n\\\n{} % of campaigns were canceled\\n\\\n{} % of campaigns belong to other categories'.format(round(perc_successful, 2), \n                                                     round(perc_failed, 2), \n                                                     round(perc_canceled, 2), \n                                                     round(perc_other, 2)))","6f0f2be2":"# Create a feature for average amount pledged per backer\ndf['avg_pledged'] = df['usd_pledged_real'] \/ df['backers']\n\n# Take care of infinite values and campaigns with 0 backers\ndf['avg_pledged'].fillna(0, inplace=True)\ndf.replace(to_replace=[np.inf, -np.inf], value=0, inplace=True)\n\nprint('Kickstarter backers pledge {} USD to a campaign on average'.format(round(df['avg_pledged'].mean(), 2)))","ac7d5367":"# Get a list of all categories in 'main_category'\ncat_list = list(df['main_category'].unique())\n\n# Create a mapping of the average pledged per backer for every category\npledge_mapping = dict()\nfor category in cat_list:\n    cat_df = df[df['main_category'] == category]\n    pledge_mapping.update({category : cat_df['avg_pledged'].mean()})\n    \n# Visualize the results\npledge_df = pd.DataFrame(pledge_mapping, index=['avg_pledged'])\npledge_df.sort_values('avg_pledged', axis=1, inplace=True, ascending=False)\ndisplay(pledge_df.head())\nax = pledge_df.plot(kind='bar', \n                    title='Average pledged per backer by category', \n                    rot=0, figsize=(14,5))\nax.set_xlabel('Categories')\nax.set_ylabel('Average pledged per backer (USD)')","f7704c53":"top_campaign = df.loc[df['usd_pledged_real'].idxmax()]\ntop_name = df.loc[df['usd_pledged_real'].idxmax()]['name']\ntop_goal = df.loc[df['usd_pledged_real'].idxmax()]['goal']\ntop_pledged = df.loc[df['usd_pledged_real'].idxmax()]['usd_pledged_real']\ntop_backers = df.loc[df['usd_pledged_real'].idxmax()]['backers']\ntop_avg_pledged = df.loc[df['usd_pledged_real'].idxmax()]['avg_pledged']\n\nprint('The campaign with the highest amount pledged is the \\n\"{}\".\\n\\n\\\nThe goal of this campaign was {}, but eventually \\n{:.2f} (Over 20 million!) USD was pledged.\\n\\n\\\n{} people backed the campaign and the average backer pledged {:.2f} USD.'.format(top_name, \n                                                                     int(top_goal), \n                                                                     top_pledged, \n                                                                     top_backers, \n                                                                     top_avg_pledged))","839027cd":"#Stats\ndisplay(top_campaign)","c626588b":"It is clear to see that most Kickstarter campaigns in our dataset are from the United States or Great Britain.","8b3d07b7":"## Preparation <a id=\"2\"><\/a>","d3b15b94":"### Money!","27ff181f":"## Missing Values <a id=\"4\"><\/a>","b90b297c":"## Top campaign <a id=\"6\"><\/a>","b6addf1f":"![kickstarter](https:\/\/webby-gallery-production.s3.amazonaws.com\/uploads\/asset\/image\/15962\/3018000000130981_large.jpg)","5a9b383d":"So the two features have a lot of overlap, but are not exactly the same. Let's keep them in our dataset for now.","528dcf6b":"We can fill the missing values with the values from  'usd_plegded_real'. This should still give us reliable results.","16c44c43":"Let's see how many missing values we have in our DataFrame","b0fcff0d":"# Exploration of Kickstarter Data (EDA) (2010-2017)","c96e529a":"We have 15 initial features:\n* ID:  internal kickstarter id\n* name:  name of project - A project is a finite work with a clear goal that you\u2019d like to bring to life. Think albums, books, or films.\n* category:  category\n* main_category:  category of campaign\n* currency:  currency used to support\n* deadline:  deadline for crowdfunding\n* goal:  fundraising goal - The funding goal is the amount of money that a creator needs to complete their project.\n* launched:  date launched\n* pledged:  amount pledged by \"crowd\"\n* state:  Current condition the project is in\n* backers:  number of backers\n* country:  country pledged from\n* usd pledged: Pledged amount in USD (conversion made by KS)\n* usd_pledged_real: Pledged amount in USD (conversion made by fixer.io api)\n* usd_goal_real: Goal amount in USD (conversion made by fixer.io api)","d4159814":"## Features <a id=\"1\"><\/a>","45ee1ccf":"![](https:\/\/www.nationsonline.org\/gallery\/Flags\/Flags-of-the-World.jpg)","71c8775d":"### Average pledged per backer ","9ed4c0af":"### States","cb9c0454":"Data  about the \"Pebble Time\" campaign.","50922fc1":"The 'category' and 'main_category' features are distinct but have a lot of overlap. However, the 'category' feature is much more diverse. Both can be useful for our analysis.","7e084ca4":"Fortunately, there are not many missing values. Let's see what kind of projects contain missing values.","839e63f1":"### Countries","4b00ccfd":"## EDA (Exploratory Data Analysis) <a id=\"5\"><\/a>","28a5512e":"It looks like 'usd pledged' and 'usd_pledged_real' are the same. Let's check if this is so.","9f5be703":"### Most popular categories","e05b8dc5":"Interesting insights! Technology campaigns have an average of almost 96 USD per backer!\nKickstarter supporters are most generous in backing the Technology, Design and Film sectors. It is unclear if this is because of perks, interesting projects or something else.","adeb87db":"## Table of contents\n\n* [Features](#1)\n* [Preparation](#2)\n* [Initial Exploration](#3)\n* [Missing Values](#4)\n* [EDA (Exploratory Data Analysis](#5)\n* [Top Campaign](#6)","fe6e1509":"It should be obvious that there is a correlation between the countries and currencies used. ","9d252f55":"## Initial Exploration <a id=\"3\"><\/a>","b937b66f":"The most succesfull Kickstart campaign in our dataset is [the \"Pebble time\" smartwatch](https:\/\/www.kickstarter.com\/projects\/getpebble\/pebble-time-awesome-smartwatch-no-compromises). ","b3cb7dfd":"[Micka\u00ebl Mouill\u00e9](https:\/\/www.kaggle.com\/kemical) posted this dataset online. \n\nYou can check out the dataset [here](https:\/\/www.kaggle.com\/kemical\/kickstarter-projects).","a0ef4223":"Note: There is a slight difference between campaigns that reached their target and what the data calls 'successful' campaigns. A campaigns can for example have reached its target but still be live. A campaign can also not reach its target but belong to a 'canceled' state.","cde495a6":"Feel free to leave a comment! I would greatly appreciate an upvote if you enjoyed this kernel! \n\nI am open to your suggestions for improving this kernel.","263489da":"### Average pledged per backer by category","30e83562":"\n![](https:\/\/ksr-ugc.imgix.net\/assets\/012\/032\/069\/46817a8c099133d5bf8b64aad282a696_original.png?ixlib=rb-1.1.0&crop=faces&w=1552&h=873&fit=crop&v=1463725702&auto=format&frame=1&q=92&s=43b2da867d3cc18964d8279d13e9f575)"}}