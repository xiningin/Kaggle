{"cell_type":{"2843b223":"code","2da8e9a5":"code","7b9d26dd":"code","f2c29ba8":"code","1a09d00f":"code","bfce29f3":"code","37df575b":"code","e16ffb55":"code","6602c6d7":"code","05983fce":"code","5edb8b46":"code","f052a105":"code","de1b7f88":"code","76f28330":"code","2a000edb":"code","eabcbf76":"code","ffb49c74":"code","beb14ed1":"code","8ce072c3":"code","9621237f":"code","0131f336":"code","bf059bf3":"code","b1a6388f":"code","090763a1":"code","172106c6":"code","be5d9774":"code","62f6ffa0":"code","b2813375":"code","ab97a723":"code","29ddee5b":"code","f848c9e4":"code","b9783598":"code","9f64b6c2":"code","266c7bc9":"code","79271514":"code","b59e42f3":"code","0cd47d09":"code","07b4c8d8":"code","8c4e3865":"code","158b2502":"code","4342fc21":"code","c8f699f5":"code","e6cad2cf":"code","c2fc485f":"code","d6b52b70":"code","a407d730":"code","c25a7202":"code","b51eb56e":"code","83e2391b":"code","34e51b72":"code","a115469a":"code","928f2b63":"code","45896364":"code","c20b3031":"markdown"},"source":{"2843b223":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2da8e9a5":"import lightgbm as lgb\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import log_loss, accuracy_score\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_extraction.text import TfidfTransformer\nimport nltk\nimport re\nfrom nltk.corpus import stopwords\nfrom sklearn.preprocessing import OneHotEncoder\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.sparse import hstack\nfrom textblob import TextBlob\nfrom textblob import Word\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nimport catboost as cb\nimport lightgbm as lgbm","7b9d26dd":"train = pd.read_csv('..\/input\/iba-ml1-final-project\/train.csv') #df\ntest = pd.read_csv('..\/input\/iba-ml1-final-project\/test.csv') #test","f2c29ba8":"train_df[\"Division\"].fillna(train_df[\"Division\"].mode().iloc[0], inplace = True)\ntrain_df[\"Department\"].fillna(train_df[\"Department\"].mode().iloc[0], inplace = True)\ntrain_df[\"Product_Category\"].fillna(train_df[\"Product_Category\"].mode().iloc[0], inplace = True)","1a09d00f":"categorical = pd.get_dummies(train_df[[\"Division\", 'Department','Product_Category']])\ndataset = pd.concat([train_df, categorical], axis=1)\ndataset.shape","bfce29f3":"categoricalt = pd.get_dummies(test_df[[\"Division\", 'Department','Product_Category']])\ndatasett = pd.concat([test_df, categoricalt], axis=1)\ndatasett.shape","37df575b":"print(dataset['Review'].isnull().sum())\nprint(datasett['Review'].isnull().sum())","e16ffb55":"dataset.columns","6602c6d7":"dataset['Reviews'] = dataset[['Review_Title', 'Review', 'Division', 'Department', 'Product_Category']].astype(str).agg(' '.join, axis=1)\ndatasett['Reviews'] = datasett[['Review_Title', 'Review','Division', 'Department', 'Product_Category']].astype(str).agg(' '.join, axis=1)","05983fce":"dataset[dataset['Reviews']=='nan nan']['Recommended'].value_counts()","5edb8b46":"dataset['Reviews'].replace('nan nan','Like', inplace = True)","f052a105":"dataset['Reviews'] = dataset['Reviews'].map(lambda x: x.lstrip('nan '))","de1b7f88":"dataset.drop(['Review', 'Review_Title', 'Division', 'Department', 'Product_Category'], axis=1, inplace=True)","76f28330":"print((dataset['Recommended'] == 1).sum())\nprint((dataset['Recommended']== 0).sum())","2a000edb":"import re\nimport string\ndef remove_URL(text):\n    url = re.compile(r\"https?:\/\/\\S+|www\\.\\S+\")\n    return url.sub(r\"\", text)\ndef remove_punct(text):\n    translator = str.maketrans(\"\", \"\", string.punctuation)\n    return text.translate(translator)\nstring.punctuation","eabcbf76":"pattern = re.compile(r\"https?:\/\/(\\S+|www)\\.\\S+\")\nfor t in datasett['Reviews']:\n    matches = pattern.findall(t)\n    for match in matches:\n        print(t)\n        print(match)\n        print(pattern.sub(r\"\", t))\n    if len(matches) > 0:\n        break","ffb49c74":"dataset['Reviews'] = dataset.Reviews.map(remove_URL) \ndataset['Reviews'] = dataset.Reviews.map(remove_punct)","beb14ed1":"datasett['Reviews'] = datasett.Reviews.map(remove_URL) \ndatasett['Reviews'] = datasett.Reviews.map(remove_punct)","8ce072c3":"import nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\n\nstop = set(stopwords.words(\"english\"))\n\ndef remove_stopwords(text):\n    filtered_words = [word.lower() for word in text.split() if word.lower() not in stop]\n    return \" \".join(filtered_words)","9621237f":"dataset[\"Reviews\"] = dataset.Reviews.map(remove_stopwords)","0131f336":"from collections import Counter\n\ndef counter_word(text_col):\n    count = Counter()\n    for text in text_col.values:\n        for word in text.split():\n            count[word] += 1\n    return count\n\ncounter = counter_word(dataset.Reviews)\ncounter1 = counter_word(datasett.Reviews)","bf059bf3":"counter1.most_common(5)","b1a6388f":"num_unique_words = len(counter)\nnum_unique_wordst= len(counter1)","090763a1":"from sklearn.preprocessing import LabelEncoder\nfrom keras.utils import np_utils","172106c6":"encoder = LabelEncoder()\nencoder.fit(dataset['Rating'])\nencoded_Y = encoder.transform(dataset['Rating'])\n\ndummy_y = np_utils.to_categorical(encoded_Y)\ndummy_y=pd.DataFrame(dummy_y)","be5d9774":"lab=dummy_y[[0,1,2,3,4]]","62f6ffa0":"train_size = int(dataset.shape[0] * 0.7)\n\ntrain_df = dataset[:train_size]\nval_df = dataset[train_size:]\n\ntrain_sentences = train_df.Reviews.to_numpy()\ntrain_labels = train_df.Recommended.to_numpy()\nval_sentences = val_df.Reviews.to_numpy()\nval_labels = val_df.Recommended.to_numpy()","b2813375":"train_sentencest=datasett.Reviews.to_numpy()","ab97a723":"train_sentences.shape, val_sentences.shape, train_labels.shape, val_labels.shape","29ddee5b":"from tensorflow.keras.preprocessing.text import Tokenizer\n\ntokenizer = Tokenizer(num_words=num_unique_words)\ntokenizer.fit_on_texts(train_sentences) # fit only to training","f848c9e4":"word_index = tokenizer.word_index","b9783598":"train_sequences = tokenizer.texts_to_sequences(train_sentences)\nval_sequences = tokenizer.texts_to_sequences(val_sentences)","9f64b6c2":"train_sequencest = tokenizert.texts_to_sequences(train_sentencest)","266c7bc9":"print(train_sentences[12])\nprint(train_sequences[12])","79271514":"from tensorflow.keras.preprocessing.sequence import pad_sequences\nmax_length = 20\ntrain_padded = pad_sequences(train_sequences, maxlen=max_length, padding=\"post\", truncating=\"post\")\ntrain_paddedt = pad_sequences(train_sequencest, maxlen=max_length, padding=\"post\", truncating=\"post\")\nval_padded = pad_sequences(val_sequences, maxlen=max_length, padding=\"post\", truncating=\"post\")\ntrain_padded.shape, val_padded.shape, train_paddedt.shape","b59e42f3":"train_padded[10]","0cd47d09":"train_paddedt[10]","07b4c8d8":"print(train_sentences[10])\nprint(train_sequences[10])\nprint(train_padded[10])","8c4e3865":"reverse_word_index = dict([(idx, word) for (word, idx) in word_index.items()])","158b2502":"def decode(sequence):\n    return \" \".join([reverse_word_index.get(idx, \"?\") for idx in sequence])","4342fc21":"decoded_text = decode(train_sequences[10])\n\nprint(train_sequences[10])\nprint(decoded_text)","c8f699f5":"from tensorflow import keras\nfrom tensorflow.keras import layers\nmodel = keras.models.Sequential()\nmodel.add(layers.Embedding(num_unique_words, 32, input_length=max_length))\n\nmodel.add(layers.LSTM(64, dropout=0.1))\nmodel.add(layers.Dense(1, activation=\"sigmoid\"))\nmodel.summary()","e6cad2cf":"loss = keras.losses.BinaryCrossentropy(from_logits=False)\noptim = keras.optimizers.Adam(lr=0.001)\nmetrics = [\"accuracy\"]\nmodel.compile(loss=loss, optimizer=optim, metrics=metrics)","c2fc485f":"history=model.fit(train_padded, train_labels, epochs=20, validation_data=(val_padded, val_labels), verbose=2)","d6b52b70":"def plot_graph(history, s):\n    plt.plot(history.history[s])\n    plt.plot(history.history['val_'+s])\n    plt.xlabel('Epochs')\n    plt.ylabel(s)\n    plt.legend([s, 'val_'+s])\n    plt.show()","a407d730":"plot_graph(history, 'loss')","c25a7202":"predictions = model.predict(train_paddedt)\npredictions = [1 if p > 0.5 else 0 for p in predictions]\n","b51eb56e":"maxInRows = np.amax(predictions, axis=1)\nresult = np.where(predictions== maxInRows)","83e2391b":"predictions=pd.DataFrame(predictions)\npredictions\nmaxValueIndex = predictions.idxmax(axis=1)","34e51b72":"maxValueIndex=pd.DataFrame(maxValueIndex)","a115469a":"subm.drop(['Recommended'], axis=1, inplace=True)\nsubm['Recommended']=predictions\nsubm.to_csv('re.csv')\nsubm","928f2b63":"subm","45896364":"maxValueIndex.shape","c20b3031":"len(counter)"}}