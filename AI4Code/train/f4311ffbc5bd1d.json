{"cell_type":{"6c2b57be":"code","cc668f50":"code","810491ec":"code","25c23e5c":"code","c98aea37":"code","300560c4":"code","d2751838":"code","f7eb6ef8":"code","67b02e0f":"code","29dfafb6":"code","f39376d5":"code","52f9bf6d":"code","3231651e":"code","603eb665":"code","5e11c9f6":"code","82d3ad2c":"code","26626f3d":"code","7ae04a79":"code","b12a64b5":"code","34ce13f0":"code","a3779825":"code","e983ce77":"code","18b85829":"markdown","6bd5964e":"markdown","c090f63a":"markdown","d4fa1d2a":"markdown","131026ac":"markdown","0755f90f":"markdown","1fbd7dcd":"markdown","3b3fffc0":"markdown","eec206b1":"markdown","c2a9358b":"markdown","7309f0f1":"markdown","42a0469c":"markdown","00e5e234":"markdown","c69ebe08":"markdown","baa459df":"markdown"},"source":{"6c2b57be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cc668f50":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.style.use('seaborn')\nfrom sklearn.preprocessing import StandardScaler, normalize\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\n# from jupyterthemes import jtplot\n# jtplot.style(theme='monokai', context='notebook', ticks=True, grid=False) ","810491ec":"movie = pd.read_csv(\"\/kaggle\/input\/movies\/movies.csv\")","25c23e5c":"movie.head()","c98aea37":"# Check missing data\nfor cols in movie.columns:\n    pct_missing = np.mean(movie[cols].isnull())*100\n    print('{} - {}%'.format(cols, pct_missing))","300560c4":"# check the data type for the columns\n# movie.dtypes\nmovie['genre'].unique()","d2751838":"movie.dropna(inplace = True)\nmovie.reset_index(drop=True, inplace =True)","f7eb6ef8":"# Check if there are difference between \"year\" column and the year in the \"released\" year\nmovie[~movie.apply(lambda x: str(x.year) in str(x.released), axis=1)]","67b02e0f":"movie.shape\nmovie['genre'].unique()\nmovie.drop_duplicates()","29dfafb6":"# change the data type\nmovie['budget'] = movie['budget'].astype('float32')\nmovie['gross'] = movie['gross'].astype('float32')\nmovie['votes'] = movie['votes'].astype('int32')","f39376d5":"# In some rows, the value in \"year\" column and the year in the \"released_date\" column are different. \n# To avoid confusion, we will take the year out from the \"released_date\" column and create a new column indicating the released year.\nreleased_date = []\nreleased_country = []\nreleased_year = []\nfor i in movie['released']:\n    date = i.split(\"(\")[0]\n    country = i.split(\"(\")[1].replace(')','')\n    released_date.append(date)\n    released_country.append(country)\n\nmovie['released_country'] = released_country\nmovie['released_date'] = released_date\nmovie['released_date'] = pd.to_datetime(movie['released_date'])\n\nmovie['released_year'] = movie['released_date'].dt.year\nmovie['released_month'] = movie['released_date'].dt.month\n\nmovie.drop(['year','released','released_date'], axis=1, inplace=True)\nmovie['logbudget'] = np.log(movie['budget'])\nmovie['loggross'] = np.log(movie['gross'])\nmovie.head(3)","52f9bf6d":"# top 10 average profit, actor\/director who participate in more than 5 movies\n\nfive_star_count = movie.groupby(['star'])['name'].count().to_frame().reset_index().sort_values('name',ascending=False)\nfive_star_count = five_star_count[five_star_count['name'] >= 5].reset_index().drop(['index'], axis=1).rename(columns={'name':'count'})\nfive_director_count = movie.groupby(['director'])['name'].count().to_frame().reset_index().sort_values('name',ascending=False)\nfive_director_count = five_director_count[five_director_count['name'] >= 5].reset_index().drop(['index'], axis=1).rename(columns={'name':'count'})\n\nfive_star_gross = movie.groupby(['star'])['gross'].sum().to_frame().reset_index()\nfive_director_gross = movie.groupby(['director'])['gross'].sum().to_frame().reset_index()\n\nfive_star = five_star_count.join(five_star_gross.set_index('star'), on='star')\nfive_director = five_director_count.join(five_director_gross.set_index('director'), on='director')\n\nfive_star['average_profit'] = five_star['gross']\/five_star['count']\nfive_director['average_profit'] = five_director['gross']\/five_director['count']\n\nfive_star = five_star.sort_values(by='average_profit', ascending=False).head(10)\nfive_director = five_director.sort_values(by='average_profit', ascending=False).head(10)\n\n# top 10 average rating, actor\/director who participate in more than 5 movies\n\nfive_star_score = movie.groupby(['star'])['score'].mean().to_frame().reset_index()\nfive_director_score = movie.groupby(['director'])['score'].mean().to_frame().reset_index()\n\nfive_star2 = five_star_count.join(five_star_score.set_index('star'), on='star')\nfive_director2 = five_director_count.join(five_director_score.set_index('director'), on='director')\n\nfive_star2 = five_star2.sort_values(by='score', ascending=False).head(10)\nfive_director2 = five_director2.sort_values(by='score', ascending=False).head(10)","3231651e":"fig, axs = plt.subplots(ncols=2, figsize=(20,10))\n\nfig.suptitle('Average Profit for Actors and Directors who have participated in more than 5 movies', fontsize=22, y=0.61)\n# fig.text(0.45, 0.03, 'Average Profit of each movie', va='center', rotation='horizontal', fontsize=22)\nfig.tight_layout(pad=15)\n\nax_1 = sns.barplot(y='star', x ='average_profit', data=five_star, palette='Set2', ax=axs[0])\nax_1.set_title('Actors', fontsize=18)\nax_1.ticklabel_format(axis=\"x\", style=\"sci\", scilimits=(10^3,10^3))\n\nax_2 = sns.barplot(y='director', x='average_profit', data=five_director, palette='Set3_r', ax=axs[1])\nax_2.set_title('Directors', fontsize=18)\n\n\nfor ax in fig.axes:\n    ax.tick_params(axis='both',labelsize=16)\n    ax.set_ylabel('')\n    ax.set_xlabel('Average Profit of each movie (in Billion)', size=18, labelpad=10)","603eb665":"# top 10 \nfig, axs = plt.subplots(ncols=2, figsize=(20,10))\n\nfig.suptitle('Average IMDb rating for Actors and Directors who have participated in more than 5 movies', fontsize=22, y=0.61)\n# fig.text(0.45, 0.03, 'Average Profit of each movie', va='center', rotation='horizontal', fontsize=22)\nfig.tight_layout(pad=15)\n\nax_1 = sns.barplot(y='star', x ='score', data=five_star2, palette='Set2', ax=axs[0])\nax_1.set_title('Actors', fontsize=20)\n\nax_2 = sns.barplot(y='director', x='score', data=five_director2, palette='Set3_r', ax=axs[1])\nax_2.set_title('Directors', fontsize=20)\n\nfor ax in fig.axes:\n    ax.tick_params(axis='both',labelsize=16)\n    ax.set_ylabel('')\n    ax.set_xlabel('Average IMDb rating of each movie', size=18, labelpad=10)","5e11c9f6":"movie_genre_gross = movie.groupby(['genre'])['gross'].sum().to_frame().reset_index().sort_values('gross', ascending = False).head(8)\nmovie_genre_gross['genre'].to_list()\nlist_movie_genre_gross = sorted(movie_genre_gross['genre'].to_list())\nlist_movie_genre_gross\n# movie_genre_gross\n\ngenre_trend = movie.groupby(['released_year','genre'])['gross'].sum().unstack().fillna(0)\ngenre_trend = genre_trend[['Action',\n 'Adventure',\n 'Animation',\n 'Biography',\n 'Comedy',\n 'Crime',\n 'Drama',\n 'Horror']]\n\n# genre_trend","82d3ad2c":"fig, axs = plt.subplots(nrows=3, figsize=(25,18))\nplt.subplots_adjust(left=0.125,\n                    bottom=0.1, \n                    right=0.9, \n                    top=0.7, \n                    wspace=0.2, \n                    hspace=0.35)\nax1 = sns.histplot(movie[movie['genre'].isin(list_movie_genre_gross)],\n                    x=\"score\", bins=75, multiple='stack', hue='genre'\n                    ,hue_order=list_movie_genre_gross, legend=True, ax=axs[0])\nsns.move_legend(ax1, \"upper left\", title_fontsize=16, fontsize=14, title='Genre')\nax1.set_xlabel(\"Rating\", fontsize=14)\nax1.set_ylabel(\"Count\", fontsize=14)\nax1.set_title(\"IMDb Rating Distribution with Genres\", fontsize=20)\n\nax2= sns.histplot(movie, x=\"budget\", bins=100, multiple='stack', hue='genre', \n                 hue_order=list_movie_genre_gross, cumulative=False, ax=axs[1])\nax2.ticklabel_format(axis=\"x\", style=\"sci\", scilimits=(10^3,10^3))\nax2.legend_.remove()\nax2.set_title(\"Budget Distribution with Genres\", fontsize=20)\nax2.set_ylabel(\"Count\", fontsize=14)\nax2.set_xlabel(\"Budget\", fontsize=14)\n\nax3 = sns.histplot(movie, x=\"gross\", bins=100, multiple='stack', hue='genre',\n                  hue_order = list_movie_genre_gross, cumulative = False, ax=axs[2])\nax3.legend_.remove()\nax3.set_title(\"Gross Earning Distribution with Genres\",fontsize=20)\nax3.set_ylabel(\"Count\", fontsize=14)\nax3.set_xlabel(\"Gross Earning\", fontsize=14)\n","26626f3d":"fig, axs = plt.subplots(nrows=3, figsize=(25,18))\nax1 = sns.boxplot(x='genre', y='score', data=movie, showfliers=False, order= list_movie_genre_gross, ax=axs[0])\nax1.set_title('IMDb Rating by Moive Genres', fontsize=16, pad=10)\nax1.set_ylabel('IMDb Score', fontsize=14)\nax1.set(xlabel=None)\nax1.set(xticklabels=[]) \nax1.tick_params(axis='both', labelsize=14)\n\nax4 = sns.boxplot(x='genre', y='budget', data=movie, showfliers=False, order= list_movie_genre_gross, ax=axs[1])\nax4.set_title('Budget by Movie Genres', fontsize=16, pad=10)\nax4.set_ylabel('Budget', fontsize=14, labelpad=10)\nax4.set(xlabel=None)\nax4.ticklabel_format(axis=\"y\", style=\"sci\", scilimits=(10^3,10^3))\nax4.set(xticklabels=[])\nax4.tick_params(axis='both', labelsize=14)\n\nax5 = sns.boxplot(x='genre', y='gross', data=movie, showfliers=False, order= list_movie_genre_gross, ax=axs[2]) \nax5.tick_params(axis='both', labelsize=14)\nax5.set_title('Gross Earning by Movie Genres', fontsize=16, pad=10)\nax5.set_ylabel('Gross Earning', fontsize=14, labelpad=10)\nax5.set_xlabel('Genre', fontsize=20, labelpad=10)\nax5.ticklabel_format(axis=\"y\", style=\"sci\", scilimits=(10^3,10^3))","7ae04a79":"# trend of popularity of movie genres\nfig = plt.figure(figsize=(25,8))\nax_5 = sns.lineplot(data=genre_trend, dashes=False, lw=3, palette='Set2')\nleg = ax_5.legend(fontsize=16)\nfor line in leg.get_lines():\n    line.set_linewidth(4.0)\n\nax_5.tick_params(axis='both', labelsize=16)\nax_5.set_title('Trend of Profitability of each genre of movies', fontsize=18, pad=10)\nax_5.set_ylabel('Gross Earning (in Billion)', fontsize=16, labelpad=10)\nax_5.set_xlabel('Genre', fontsize=16, labelpad=10)\nplt.ticklabel_format(axis=\"y\", style=\"sci\", scilimits=(10^3,10^3))","b12a64b5":"# top 10 companies in terms of gross and what type of movies they made\n# Find out which company has the most gross in the past decades and what are their specialization (in all time)\n\npivot_movie = movie.groupby(['company','genre'], as_index=False)['gross'].sum().pivot(index='company',columns='genre', values='gross').fillna(0)\ngross_sum = pivot_movie.sum(axis=1)\npivot_movie['gross_sum'] = gross_sum\ntop_gross_company = pivot_movie.sort_values(by='gross_sum', ascending = False).head(10)\ntop_gross_company.sort_values(by='gross_sum', ascending =True, inplace=True)\ntop_gross_company.drop('gross_sum', axis=1, inplace=True)\n\ntop_gross_company.plot(kind='barh', stacked=True, figsize=(25,8))\nplt.xlabel(\"Profit (in billion)\", fontsize=16, labelpad=10)\nplt.ylabel(\"Companies\", fontsize=16, labelpad=10)\nplt.ticklabel_format(axis=\"x\", style=\"sci\", scilimits=(10^3,10^3))\nplt.xticks(fontsize=16)\nplt.yticks(fontsize=16)\nplt.title('Top 10 Earning Companies', pad=18, fontsize=26)\nplt.legend(fontsize=16)","34ce13f0":"year_month_gross = movie.groupby(['released_year','released_month'])['gross'].mean().unstack().fillna(0)\nyear_month_gross\nfig = plt.figure(figsize=(8,8))\nax_5 = sns.heatmap(year_month_gross, cbar_kws={'label': 'Profit (in Billion)'})\nax_5.set_title('Movie Profit by Year and Month', fontsize=18, pad=10)\nax_5.set_xlabel('Month', fontsize=16, labelpad=10)\nax_5.set_ylabel('Year', fontsize=16, labelpad=10)\nax_5.tick_params(axis='both', labelsize=10)","a3779825":"fig = plt.figure(figsize=(8,8))\nax1 = sns.scatterplot(x='budget',y='gross', hue='score', data=movie)\n# movie['vote'] \n# ax = plt.scatter(x=movie['budget'],y=movie['gross'], size=movie['score'], c=movie['votes'], cmap=\"plasma_r\")\nplt.xlabel('Budget', labelpad=10, size=14)\nplt.ylabel('Profit', labelpad=10, size=14)\nplt.ticklabel_format(axis=\"both\", style=\"sci\", scilimits=(10^3,10^3))\nplt.title('Profit vs Budget (with IMDb rating)', size=18, pad=10)\n# cbar = ax1.colorbar()\n# cbar.set_label('IMDb score', labelpad=10, size=14)\nax1.legend(title=\"IMDb Rating\")","e983ce77":"# prediction of movie gross\n# MLR \n# data transformation (gross+budget)\n# gross ~ genre + score + released month + budget + rating + vote  \n\n","18b85829":"**Finding from the above plots:**\n\nTaking part in a movie series seems to be the key to high profit as most of the actors in the chart take part in movie series. For example, Chris Pratt, Robert Downey Jr. and Chris Evans played roles in Marvel movies. Also, Daniel Radliffe and Vin Diesel are the main characters in the Harry Potter series and the Fast & the Furious series, respectively. \n\nIt is also valid for directors. Examples are Anthony Russo, David Yates, and Peter Jackson, who directed Marvel movies, Harry Potter, and the Lord of the Rings. It is also interesting to note that there are only two actresses on the actor chart, and there is no female on the director chart. \n\nThe IMDb scores plots show the actors and directors have directed more than five movies with the highest average movie rating. The average scores are close. Among all actors, Kang-ho Song from the Oscar-winning movie \u201c Parasite\u201d has the highest appreciation. On the right chart, the director of \"Tenet\", Christopher Nolan ranked first.","6bd5964e":"### Visualisation for movie genres, budget and gross earning <a class=\"anchor\" id=\"section_3_2\"><\/a>","c090f63a":"### Conclusion <a class=\"anchor\" id=\"chapter4\"><\/a>\n\nIn this project, we observe some patterns of actors, directors, profit, cost and audience rating through various graphs. Next, we could make use of the dataset to conduct prediction or classification analysis. ","d4fa1d2a":"### Table of Contents\n\n* [Introduction](#chapter1)\n* [Data Cleaning](#chapter2)\n* [Visualization](#chapter3)\n    * [Visualization for Actors and Directors](#section_3_1)\n    * [Visualization for IMDb Rating, Budget and Gross with Movie Genres](#section_3_2)\n* [Conclusion](#chapter4)\n","131026ac":"**Next Steps:**","0755f90f":"**Finding from the boxplots above:**\n\nAmong the top 8 profitable movie genres, audiences tend to give biography films higher scores, while Animation is generally the most beneficial type and also big-budget after excluding the outliers.","1fbd7dcd":"### Introduction <a class=\"anchor\" id=\"chapter1\"><\/a>\n\nThis project aims to make a summary of the movie industry in the past 40 years. We first visualise the good movies, actors, directors and companies by various plots. Then, we observe the trend of popularity of genres and the relationship between budget, audience rating and gross earning.\n\nWe observe that Chirs Pratt and Anthony Russo have the highest income while  Kang-ho Song and Christopher Nolan have the highest compliment.\n\nWe select the top 8 commercially successful genres to analyse, and we find that the IMDb rating is almost normally distributed, with the centre falling between 6 to 7.  However, the budget and gross are right-skewed with extremely long right tails. When we look closely at the movie genres, biography movies have a higher rating. Animated films are generally costly but profit-making. \n\nWe wonder how the popularity of movie genres changed in the past centuries. Action films have been viral since the late 20th century. On the other hand, people favoured comedy in the past, but they now welcome animation more.  \n\nLastly, the dataset gives us a glimpse of the pattern of commercially successful movies. Those movies are usually being released in May, June, July,  November or December. The relationship between gross and budget are not that clear. The low-budget film can still gain a certain level of commercial success. ","3b3fffc0":"**Finding from the line graph:**\n\nAction movies became very noticeable from the late 20th century, and they became the most successful in terms of money-making. Comedy movies were quite popular in the early 21st century, but the popularity was short-lived. On the other hand, amination gains more profit steadily. ","eec206b1":"### Visualisation <a class=\"anchor\" id=\"chapter3\"><\/a>","c2a9358b":"### Data Cleaning <a class=\"anchor\" id=\"chapter2\"><\/a>","7309f0f1":"**Finding from scatter plot:**\n\nThe above scatter plot displays the profit of a movie against its budget. The colour of the markers represents the average IMDb rating of the film. There is only some positive correlation between earning and funding, so considerable investments in a movie do not guarantee commercial success.","42a0469c":"**Find from the line chart:**\n\nThe above graph shows the ranking of the most profitable movie companies and the composition of their gross earnings. All companies on the list earn a lot from action movies except DreamWorks Animation. Different companies have their specialities. For instance, Walt Disney Pictures are good at action and fantasy genres, but Universal Pictures produces action and comedy films. ","00e5e234":"**Finding from the histograms:**\n\nThe rating of movies is nearly normal distribution, with the majority falling between 6 to 7 scores. The budget and gross plots are right-skewed with have an extremely long tail. ","c69ebe08":"### Visualisation for actors and directors <a class=\"anchor\" id=\"section_3_1\"><\/a>","baa459df":"**Finding from heat map:**\n\nFrom this heat map, we can see that the average profitability has increased from the late 1990s. The average profit in June can be five times more than the average profit in January. People might have more free time to watch movies during the summer, or the companies strategically release the most anticipated film in summer and the end of the year."}}