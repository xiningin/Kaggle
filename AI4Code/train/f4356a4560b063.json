{"cell_type":{"a1f29b00":"code","d502f854":"code","268bf5b7":"code","26aa0efa":"code","d987dcde":"code","7f224e03":"code","e200cb4a":"code","369706e5":"code","f6c1e960":"code","86c10898":"code","308d37c8":"code","f109af85":"code","a4143615":"code","3d181d39":"code","714c728d":"code","4095e3c2":"code","9204c65f":"code","5cdcbbb8":"code","a1bd826e":"markdown","a41ddf64":"markdown","e3953021":"markdown","73fb5b7b":"markdown","467398d9":"markdown","9c3efdff":"markdown","4bc15621":"markdown","df8c6928":"markdown","8e5b25bc":"markdown","a96a804f":"markdown","7fb2be5a":"markdown","524d811a":"markdown","1683b7ed":"markdown","c54cc9bb":"markdown","aba8ab0c":"markdown","1f6693a7":"markdown","7ed631ea":"markdown","821b6997":"markdown","31619d10":"markdown","a16bfe07":"markdown","c2a7db6b":"markdown","a576d221":"markdown","210bb15b":"markdown"},"source":{"a1f29b00":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d502f854":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sbn \nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.model_selection import cross_val_score","268bf5b7":"df = pd.read_csv(\"\/kaggle\/input\/credit-card-customers\/BankChurners.csv\")\ndf.head()","26aa0efa":"df_new = df.rename(columns={'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1': 'NBC_Mon_1',\n                           'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2':'NBC_Mon_2'})\ndf_new.head()","d987dcde":"df_new.isnull().sum()","7f224e03":"df_new.nunique()","e200cb4a":"sbn.histplot(x=df_new[\"Attrition_Flag\"],data = df_new,hue=df_new[\"Attrition_Flag\"])","369706e5":"#CLIENTNUM is non unique has values so we can't take for train dataset\ndf_X = df_new.drop([\"CLIENTNUM\",\"Attrition_Flag\"],axis = 1)","f6c1e960":"X = df_X.apply(LabelEncoder().fit_transform).values \nY = df[\"Attrition_Flag\"].values.ravel()\nprint(\"X Shape: \",X.shape)\nprint(\"Y Shape: \",Y.shape)","86c10898":"x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size=0.2,random_state=1)","308d37c8":"print(\"X Train Shape: \",x_train.shape)\nprint(\"Y Train Shape: \",y_train.shape)\nprint(\"X Test Shape: \",x_test.shape)\nprint(\"Y Test Shape: \",y_test.shape)","f109af85":"sc = MinMaxScaler()\nX_train = sc.fit_transform(x_train)\nX_test = sc.transform(x_test)","a4143615":"knn = KNeighborsClassifier(n_neighbors = 5 ,metric='minkowski')\nknn.fit(X_train,y_train)","3d181d39":"y_pred = knn.predict(X_test)","714c728d":"cm = confusion_matrix(y_pred,y_test)\nprint(\"Confusion Matrix Result: \")\nprint(cm)","4095e3c2":"sbn.heatmap(cm,annot=True,fmt='d',linecolor = 'white',linewidths=5)","9204c65f":"acc = accuracy_score(y_test,y_pred)\nprint(\"Accuracy Score : \",acc*100)","5cdcbbb8":"success = cross_val_score(estimator = knn ,X=X_train,y=y_train,cv=4)\n# Cross validation result print\nprint(success.mean())\nprint(success.std())\nprint(success.max())","a1bd826e":"* Accuracy Score as a percent","a41ddf64":"# Read Dataset","e3953021":"* K-fold Cross Validation ","73fb5b7b":"* Show data distrubition in graph","467398d9":"* Next step, show in graph the confusion matrix ","9c3efdff":"* Last two columns name are too long, so we will change it them","4bc15621":"# Training ","df8c6928":"* Train the data with K-NN ","8e5b25bc":"* The first step is to import packages that will be required","a96a804f":"# Preprocessing","7fb2be5a":"# Scaling of data","524d811a":"* There is no null value in any column","1683b7ed":"* Split data train and test","c54cc9bb":"# Train and Test Split","aba8ab0c":"* Next step is show a new train and test shape  ","1f6693a7":"* Next step, firstly we need to predict X_test with K-NN and this result will be our predictions. Here we will call it y_pred.","7ed631ea":"#  Info About Data","821b6997":"# Evaluate The Model","31619d10":"* Confusion Matrix\n* Diagonal is our true positive and true negative values","a16bfe07":"* Numbers of non-unique data found, we saw CLIENTNUM column is nunique that's mean every row it has a different value, it's private customer number, we don't need to because machine learning algorithm it can memorize.","c2a7db6b":"* With MinMaxScaler is to scale between 1-0 ","a576d221":"# Imports","210bb15b":"* Next step we will do label encoding(LabelEncoder) for all columns"}}