{"cell_type":{"6b662142":"code","7d8e370e":"code","ad3ac358":"code","5db27635":"code","b2e8be1e":"code","a0b6433b":"code","018fce66":"code","f262e3c3":"code","b712d819":"code","fd1f504e":"markdown","5a530394":"markdown","f5d123c4":"markdown","757335e0":"markdown","dc4c66d3":"markdown","1cf3fa16":"markdown","d9380e06":"markdown","97bce1d6":"markdown","2e936b63":"markdown","5813ba30":"markdown"},"source":{"6b662142":"# Downloading the hierarchy json\n# !wget https:\/\/storage.googleapis.com\/openimages\/2018_04\/bbox_labels_600_hierarchy.json # --> old link\n!wget https:\/\/storage.googleapis.com\/openimages\/challenge_2019\/challenge-2019-label500-hierarchy.json\n\n# Downloading class names\n!wget https:\/\/storage.googleapis.com\/openimages\/v5\/class-descriptions-boxable.csv\n    \n# Downlaoding class-annotations\n!wget https:\/\/storage.googleapis.com\/openimages\/2018_04\/train\/train-annotations-bbox.csv","7d8e370e":"import pandas as pd\ncls=pd.read_csv('class-descriptions-boxable.csv', header=None)\nclasses2name={i:j for i,j in zip(cls[0], cls[1])}\nname2classes={j:i for i,j in zip(cls[0], cls[1])}\ncls.tail()","ad3ac358":"trn=pd.read_csv('train-annotations-bbox.csv')\ntrn.head()","5db27635":"import json\nhier = json.load(open('challenge-2019-label500-hierarchy.json','r'))\nlevel1=[]\nlevel2=[]\nlevel3=[]\nfor l2 in hier['Subcategory']:\n    print(classes2name[l2['LabelName']])\n    level3.append(classes2name[l2['LabelName']])\n    try:\n        for j in l2['Subcategory']:\n            print('----> ',classes2name[j['LabelName']])\n            level2.append(classes2name[j['LabelName']])\n            try:\n                for k in j['Subcategory']:\n                    print('\\t----> ',classes2name[k['LabelName']])\n                    level1.append(classes2name[k['LabelName']])\n            except:\n                pass\n    except:\n        pass\n        \nlevel1 = set(level1)\nlevel2 = set(level2)\nlevel3 = set(level3)","b2e8be1e":"print('Classes count in level 1 is {}'.format(len(level1)))\nprint('Classes count in level 2 is {}'.format(len(level2)))\nprint('Classes count in level 3 is {}'.format(len(level3)))\nprint('Total unique class counts are {}'.format(len(level1)+len(level2)+len(level3)))","a0b6433b":"print('level1 and level2 overlaps = {}'.format(len(level2&level1)))\nprint('level2 and level3 overlaps = {}'.format(len(level2&level3)))\nprint('level1 and level3 overlaps = {}'.format(len(level3&level1)))","018fce66":"res=trn['LabelName'].value_counts()\ntrn_classes=[]\nfor idx, (i,j) in enumerate(zip(res.index, res)):\n    trn_classes.append(classes2name[i])\n    print('{} \\t {} \\t {}'.format(idx+1, classes2name[i], j))","f262e3c3":"all_training_classes = set(list(cls[1]))\nall_json_classes = level1.union(level2).union(level3)\nprint('There are {} classes from JSON file and {} classes from training file'.format(len(all_json_classes), len(all_training_classes)))\nprint('Thus there are {} missing classes'.format(len(all_training_classes)-len(all_json_classes)))","b712d819":"all_training_classes-all_json_classes","fd1f504e":"If you have been messing up your brains trying to understand the class hierarchies, or just beggining with it, I believe that this kernel is going to help you as I am sharing all my findings so far here. If you have no idea about what I am talking, visit [bbox_labels_600_hierarchy_visualizer](https:\/\/storage.googleapis.com\/openimages\/2018_04\/bbox_labels_600_hierarchy_visualizer\/circle.html) page and try to understand what exactly is going on.\n\nIf you feel that I am wrong anywhere, feel free to comment below and help improvise this kernel. ","5a530394":"### Classes that could be missing\n\nWe have seen that we are provided with 600 classes but we obtained lesser classes from the classes hierarchy JSON. So lets try to print the classes that could be missing.","f5d123c4":"# Exploring classes and Heirarchy \n\n![class Hierarchy](https:\/\/0x0.st\/zfd_.png)","757335e0":"So there are 577 unique classes that we obtain from the json provided to us. But there could be classes overlap. Lets run a quick check over this.","dc4c66d3":"So the missing classes could be these.","1cf3fa16":"### Downloading the required files\n\nI am using the annotation files and the class_names files. So download them from the given link.","d9380e06":"> These annotation files cover the 600 boxable object classes, and span the 1,743,042 training images where we annotated bounding boxes, object segmentations, and visual relationships, as well as the full validation (41,620 images) and test (125,436 images) sets.","97bce1d6":"### Classes along with counts \n\nThe index of the classes in a list along with the value count in the training dataset.","2e936b63":"Lets now print the classes from the Attached JSON given with the dataset. \nHere you can understand the heirarchy level as per the name indentation.","5813ba30":"### Classes count\n\nWe can see that we obtain 3 levels of classes hierarchy. "}}