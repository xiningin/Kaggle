{"cell_type":{"284f2697":"code","b77088ac":"code","98333715":"code","13bd0bdf":"code","a289bd19":"code","e1129643":"code","1e851050":"code","c944c328":"code","cbfc74fa":"code","721c3751":"code","c594658d":"code","292d6d2f":"code","0f067231":"code","b224a623":"code","362af46c":"code","5d7ae539":"code","877a9376":"markdown","7d2ece45":"markdown","900fdf69":"markdown","36e8432e":"markdown","063b66d1":"markdown","a2f31246":"markdown","cb6a97e0":"markdown","52cfe4f1":"markdown","49cd1f66":"markdown","8a6b120d":"markdown","83b3ac51":"markdown"},"source":{"284f2697":"!pip install -U autowoe","b77088ac":"%matplotlib inline\n\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom matplotlib import pyplot as plt\n\nfrom autowoe import AutoWoE, ReportDeco","98333715":"INPUT_PATH = '..\/input\/tabular-playground-series-sep-2021\/'\ntrain_data = pd.read_csv(INPUT_PATH + 'train.csv')\ntrain_data","13bd0bdf":"test_data = pd.read_csv(INPUT_PATH + 'test.csv')\ntest_data","a289bd19":"submission = pd.read_csv(INPUT_PATH + 'sample_solution.csv')\nsubmission","e1129643":"print('TRAIN TARGET MEAN = {:.3f}'.format(train_data['claim'].mean()))","1e851050":"tr_data, val_data = train_test_split(train_data, test_size = 0.2, stratify = train_data['claim'], random_state = 13)\nprint(tr_data.shape, val_data.shape)","c944c328":"auto_woe = AutoWoE(monotonic=False,\n                 vif_th=20.,\n                 imp_th=0,\n                 th_const=32,\n                 force_single_split=True,\n                 min_bin_size = 0.005,\n                 oof_woe=True,\n                 n_folds=5,\n                 n_jobs=4,\n                 regularized_refit=True,\n                 verbose=2\n        )\n\nauto_woe = ReportDeco(auto_woe)","cbfc74fa":"%%time\nauto_woe.fit(tr_data.sample(500000, random_state = 13), \n             target_name=\"claim\")","721c3751":"val_pred = auto_woe.predict_proba(val_data)\nprint(\"AUC_SCORE = {:.5f}\".format(roc_auc_score(val_data['claim'], val_pred)))","c594658d":"report_params = {\"output_path\": \".\/AUTOWOE_REPORT_Validation\",\n                 \"report_name\": \"AutoWoE automatic report for TPS September 2021 dataset model\",\n                 \"report_version_id\": 1,\n                 \"city\": \"Moscow\",\n                 \"model_aim\": \"Here we want to build a model to solve TPS September 2021 competition\",\n                 \"model_name\": \"TPS_September_AutoWoE_model\",\n                 \"zakazchik\": \"Kaggle\", # sorry for transliterate russian key here - it means the group that ask you to build this model \n                 \"high_level_department\": \"Google\",\n                 \"ds_name\": \"Alexander Ryzhkov\",\n                 \"target_descr\": \"Target claim equal 1\",\n                 \"non_target_descr\": \"Target claim equal 0\"}\n\nauto_woe.generate_report(report_params)","292d6d2f":"print(auto_woe.get_sql_inference_query(table_name = 'TABLE_NAME'))","0f067231":"preds = auto_woe.model.predict_proba(test_data)","b224a623":"preds","362af46c":"submission['claim'] = preds\nsubmission.to_csv('AutoWoE_submission.csv', index = False)","5d7ae539":"submission['claim'].describe()","877a9376":"# Split data for train-holdout","7d2ece45":"# Setup interpretable AutoWoe model\n\nHere we setup the model with `ReportDeco` decorator - this decorator helps us to build automatic report (see Bonus 2 part)","900fdf69":"# Data loading","36e8432e":"# Bonus 1 - Automatic report generation for trained model","063b66d1":"#### Please upvote if you find the notebook interesting\/useful :)\n\n# Install [AutoWoe](https:\/\/github.com\/sberbank-ai-lab\/AutoMLWhitebox) library\n\nThis library is a part of [LightAutoML](https:\/\/github.com\/sberbank-ai-lab\/LightAutoML) framework and is used in Whitebox preset, but here we will show how to use it separately","a2f31246":"# Predict for the test dataset","cb6a97e0":"# Create submissions","52cfe4f1":"#### Generated report is [here](.\/AUTOWOE_REPORT_Validation\/autowoe_report.html). P.S. It is interactive - to open subtree click on black triangle on the left of the text.","49cd1f66":"# Imports ","8a6b120d":"# Model training","83b3ac51":"# Bonus 2 - Automatic SQL inference query generation for trained model\n\nAs our model is interpretable, we can create SQL query for it automatically. With the help of this query you can receive model predictions inside database without Python at all.\n\nAll you need is setup the `table_name` with the initial data"}}