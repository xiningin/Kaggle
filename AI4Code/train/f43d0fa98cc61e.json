{"cell_type":{"1fd0403d":"code","cd50f132":"code","46fea8bd":"code","9f785264":"code","f787948d":"code","0525afa0":"code","229b68f6":"code","1133a125":"code","5a76ab64":"code","24f3d4af":"code","6934f236":"code","55f12987":"code","a33375df":"code","3d63bf97":"code","56d0012c":"code","9a653b9d":"code","2cb6808d":"code","a318d0a0":"code","0087f9e0":"code","bed07c4b":"code","7fd5e677":"code","0f852c99":"code","fa8eae67":"code","16e2095c":"code","1419f96b":"code","7b9fac82":"code","f1f82f07":"code","df47fb04":"code","abdd2fee":"code","f849f3b1":"code","788b217e":"code","0a8e0ee5":"code","8d69166b":"code","bef7345f":"code","a7d27bba":"code","f9fbbd39":"code","22634a70":"code","3f95c592":"code","0838a389":"code","549422cd":"markdown","816e212e":"markdown","3af99523":"markdown","9d3e01ed":"markdown","7f537297":"markdown","accecaac":"markdown","2d5f970d":"markdown","7aae4234":"markdown","84accafa":"markdown","e8a6164f":"markdown","acfb6a02":"markdown","0d170a7c":"markdown","29b70748":"markdown","de507e70":"markdown","4288c733":"markdown","b27b8a06":"markdown","60b26bbd":"markdown","038e065b":"markdown","7c644b33":"markdown"},"source":{"1fd0403d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cd50f132":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3001\u30b5\u30f3\u30d7\u30eb\u30b5\u30d6\u30df\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ngender_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","46fea8bd":"train.head(5)","9f785264":"print(train.shape) # \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\nprint(test.shape) # \u672c\u756a\u4e88\u6e2c\u7528\u30c7\u30fc\u30bf\nprint(gender_submission.shape) # \u63d0\u51fa\u30c7\u30fc\u30bf\u306e\u30b5\u30f3\u30d7\u30eb","f787948d":"print(train.columns) # \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306e\u5217\u540d\nprint('-' * 10) # \u533a\u5207\u308a\u7dda\u3092\u8868\u793a\nprint(test.columns) # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5217\u540d","0525afa0":"train.info()","229b68f6":"test.info()","1133a125":"train.head()","5a76ab64":"train.isnull().sum() \n# isnull()\u306f\u3001\u6b20\u640d\u5024\u306b\u5bfe\u3057True\u3092\u8fd4\u3057\u3001\u6b20\u640d\u5024\u4ee5\u5916\u306b\u306fFalse\u3092\u8fd4\u3059\n# sum()\u306f\u3001True\u30921\u3001False\u30920\u3068\u3057\u3066\u5408\u8a08\u3059\u308b\n# \u3088\u3063\u3066df.isnull().sum()\u3067\u6b20\u640d\u5024\u3092\u7b97\u51fa\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b","24f3d4af":"test.isnull().sum()","6934f236":"# train\u3068test\u3092\u7e26\u306b\u9023\u7d50\ndf_full = pd.concat([train, test], axis=0, sort=False)\n\nprint(df_full.shape) # df_full\u306e\u884c\u6570\u3068\u5217\u6570\u3092\u78ba\u8a8d\n\ndf_full.describe() # df_full\u306e\u8981\u7d04\u7d71\u8a08\u91cf","55f12987":"#percentiles\u306b10%\u304b\u308990%\u307e\u3067\u309210%\u523b\u307f\u3067\u6307\u5b9a\ndf_full.describe(percentiles=[.1, .2, .3, .4, .5, .6, .7, .8, .9])","a33375df":"# include\u5f15\u6570\u306b'O'\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u578b\u306e\u8981\u7d20\u6570\u3001\u30e6\u30cb\u30fc\u30af\u6570\u3001\u6700\u983b\u5024\u3001\u6700\u983b\u5024\u306e\u51fa\u73fe\u56de\u6570\u3092\u8868\u793a\ndf_full.describe(include='O')","3d63bf97":"# warnings\u3092\u7121\u8996\u3059\u308b\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\nimport pandas_profiling as pdp  # pandas_profiling\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\ndisplay(pdp.__version__)\npdp.ProfileReport(train)  # \u30ec\u30dd\u30fc\u30c8\u306e\u4f5c\u6210","56d0012c":"!pip install japanize-matplotlib","9a653b9d":"import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport japanize_matplotlib\n\n# \u672c\u6587\u3068\u540c\u69d8\u306b\u9752\uff13\u8272\u306e\u8272\u306b\u3059\u308b\u5834\u5408\n# sns.set_palette(\"Blues_r\", 3) # \u9752\uff13\u8272\u306e\u30b9\u30bf\u30a4\u30eb\n\n\n# fontsize\u306e\u8a2d\u5b9a\nplt.rcParams[\"font.size\"] = 18\n\n# \u30b5\u30a4\u30ba\u306e\u8a2d\u5b9a\nplt.rcParams['figure.figsize'] = (8.0, 6.0)","2cb6808d":"sns.countplot(x='Survived', data=train)\nplt.title('\u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005\u306e\u6570')\nplt.xticks([0,1],['\u6b7b\u4ea1\u8005', '\u751f\u5b58\u8005'])\nplt.show()","a318d0a0":"# \u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005\u6570\u3092\u8868\u793a\u3059\u308b\ndisplay(train['Survived'].value_counts())\n\n# \u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005\u5272\u5408\u3092\u8868\u793a\u3059\u308b\ndisplay(train['Survived'].value_counts()\/len(train['Survived']))","0087f9e0":"# \u7537\u5973\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u53ef\u8996\u5316\nsns.countplot(x='Sex', hue='Survived', data=train)\nplt.title('\u7537\u5973\u5225\u306e\u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005\u306e\u6570')\nplt.legend(['\u6b7b\u4ea1','\u751f\u5b58'])\nplt.show()","bed07c4b":"# Sex\u3068Survived\u3092\u30af\u30ed\u30b9\u96c6\u8a08\u3059\u308b\ndisplay(pd.crosstab(train['Sex'], train['Survived']))\n\n# \u30af\u30ed\u30b9\u96c6\u8a08\u3057Sex\u3054\u3068\u306b\u6b63\u898f\u5316\u3059\u308b\ndisplay(pd.crosstab(train['Sex'], train['Survived'], normalize = 'index'))","7fd5e677":"# \u30c1\u30b1\u30c3\u30c8\u30af\u30e9\u30b9\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u53ef\u8996\u5316\nsns.countplot(x='Pclass', hue='Survived', data=train)\nplt.title('\u30c1\u30b1\u30c3\u30c8\u30af\u30e9\u30b9\u5225\u306e\u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005\u306e\u6570')\nplt.legend(['\u6b7b\u4ea1','\u751f\u5b58'])\nplt.show()","0f852c99":"# Pclass\u3068Survived\u3092\u30af\u30ed\u30b9\u96c6\u8a08\u3059\u308b\ndisplay(pd.crosstab(train['Pclass'], train['Survived']))\n\n# \u30af\u30ed\u30b9\u96c6\u8a08\u3057Pclass\u3054\u3068\u306b\u6b63\u898f\u5316\u3059\u308b\ndisplay(pd.crosstab(train['Pclass'], train['Survived'], normalize='index'))\n","fa8eae67":"# \u5168\u4f53\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\nsns.distplot(train['Age'].dropna(), kde=False, bins=30 ,label='\u5168\u4f53')\n\n# \u6b7b\u4ea1\u8005\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\nsns.distplot(train[train['Survived'] == 0].Age.dropna(), kde=False, bins=30, label='\u6b7b\u4ea1')\n\n# \u751f\u5b58\u8005\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\nsns.distplot(train[train['Survived'] == 1].Age.dropna(), kde=False, bins=30, label='\u751f\u5b58')\n\nplt.title('\u4e57\u8239\u8005\u306e\u5e74\u9f62\u306e\u5206\u5e03') # \u30bf\u30a4\u30c8\u30eb\nplt.legend(); # \u51e1\u4f8b\u3092\u8868\u793a","16e2095c":"# \u5e74\u9f62\u3092\uff18\u7b49\u5206\u3057\u3001CategoricalAge\u3068\u3044\u3046\u5909\u6570\u3092\u4f5c\u6210\ntrain['CategoricalAge'] = pd.cut(train['Age'], 8)\n\n# CategoricalAge\u3068Survived\u3092\u30af\u30ed\u30b9\u96c6\u8a08\u3059\u308b\ndisplay(pd.crosstab(train['CategoricalAge'], train['Survived']))\n\n# \u30af\u30ed\u30b9\u96c6\u8a08\u3057CategoricalAge\u3054\u3068\u306b\u6b63\u898f\u5316\u3059\u308b\ndisplay(pd.crosstab(train['CategoricalAge'], train['Survived'], normalize='index'))","1419f96b":"sns.countplot(x='SibSp', data = train)\nplt.title('\u540c\u4e57\u3057\u3066\u3044\u308b\u5144\u5f1f\u30fb\u914d\u5076\u8005\u306e\u6570');","7b9fac82":"# SibSp\u304c0\u304b1\u3067\u3042\u308c\u3070\u305d\u306e\u307e\u307e\u30012\u4ee5\u4e0a\u3067\u3042\u308c\u30702\u3067\u3042\u308b\u7279\u5fb4\u91cfSibSp_0_1_2over\u3092\u4f5c\u6210\ntrain['SibSp_0_1_2over'] = [i if i <=1 else 2 for i in train['SibSp']]\n\n# SibSp_0_1_2over\u3054\u3068\u306b\u96c6\u8a08\u3057\u3001\u53ef\u8996\u5316 \nsns.countplot(x='SibSp_0_1_2over', hue='Survived', data=train)\nplt.legend(['\u6b7b\u4ea1', '\u751f\u5b58'])\nplt.xticks([0,1,2], ['0\u4eba', '1\u4eba', '2\u4eba\u4ee5\u4e0a'])\nplt.title('\u540c\u4e57\u3057\u3066\u3044\u308b\u5144\u5f1f\u30fb\u914d\u5076\u8005\u306e\u6570\u5225\u306e\u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005\u306e\u6570')\nplt.show()\n","f1f82f07":"# SibSp\u3068Survived\u3092\u30af\u30ed\u30b9\u96c6\u8a08\u3059\u308b\ndisplay(pd.crosstab(train['SibSp_0_1_2over'], train['Survived']))\n\n# \u30af\u30ed\u30b9\u96c6\u8a08\u3057SibSp\u3054\u3068\u306b\u6b63\u898f\u5316\u3059\u308b\ndisplay(pd.crosstab(train['SibSp_0_1_2over'], train['Survived'], normalize='index'))","df47fb04":"sns.countplot(x='Parch', data = train)\nplt.title('\u540c\u4e57\u3057\u3066\u3044\u308b\u4e21\u89aa\u30fb\u5b50\u4f9b\u306e\u6570');","abdd2fee":"# 2\u4ee5\u4e0b\u3067\u3042\u308c\u3070\u305d\u306e\u307e\u307e\u306e\u6570\u30013\u4ee5\u4e0a\u306f3\u3068\u3044\u3046\u5909\u63db\u3092\u884c\u3046\ntrain['Parch_0_1_2_3over'] = [i if i <=2 else 3 for i in train['Parch']]\n\n# Parch_0_1_2_3over\u3054\u3068\u306b\u96c6\u8a08\u3057\u53ef\u8996\u5316\nsns.countplot(x='Parch_0_1_2_3over',hue='Survived', data = train)\nplt.title('\u540c\u4e57\u3057\u3066\u3044\u308b\u4e21\u89aa\u30fb\u5b50\u4f9b\u306e\u6570\u5225\u306e\u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005\u306e\u6570')\nplt.legend(['\u6b7b\u4ea1','\u751f\u5b58'])\nplt.xticks([0, 1, 2, 3], ['0\u4eba', '1\u4eba', '2\u4eba', '3\u4eba\u4ee5\u4e0a'])\nplt.xlabel('Parch')\nplt.show()\n","f849f3b1":"# Parch\u3068Survived\u3092\u30af\u30ed\u30b9\u96c6\u8a08\u3059\u308b\ndisplay(pd.crosstab(train['Parch_0_1_2_3over'], train['Survived']))\n\n# \u30af\u30ed\u30b9\u96c6\u8a08\u3057Parch\u3054\u3068\u306b\u6b63\u898f\u5316\u3059\u308b\ndisplay(pd.crosstab(train['Parch_0_1_2_3over'], train['Survived'], normalize='index'))","788b217e":"#SibSp\u3068Parch\u304c\u540c\u4e57\u3057\u3066\u3044\u308b\u5bb6\u65cf\u306e\u6570\u30021\u3092\u8db3\u3059\u3068\u5bb6\u65cf\u306e\u4eba\u6570\u3068\u306a\u308b\ntrain['FamilySize']=train['SibSp']+ train['Parch']+ 1\n\n# IsAlone\u30920\u3068\u3057\u30012\u884c\u76ee\u3067FamilySize\u304c2\u4ee5\u4e0a\u3067\u3042\u308c\u30701\u306b\u3057\u3066\u3044\u308b\ntrain['IsAlone'] = 0\ntrain.loc[train['FamilySize'] >= 2, 'IsAlone'] = 1\n\n# IsAlone\u3054\u3068\u306b\u53ef\u8996\u5316\nsns.countplot(x='IsAlone', hue = 'Survived', data = train)\nplt.xticks([0, 1], ['1\u4eba', '2\u4eba\u4ee5\u4e0a'])\n\nplt.legend(['\u6b7b\u4ea1', '\u751f\u5b58'])\nplt.title('\uff11\u4ebaor\uff12\u4eba\u4ee5\u4e0a\u3067\u4e57\u8239\u5225\u306e\u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005\u306e\u6570')\nplt.show()","0a8e0ee5":"# IsAlone\u3068Survived\u3092\u30af\u30ed\u30b9\u96c6\u8a08\u3059\u308b\ndisplay(pd.crosstab(train['IsAlone'], train['Survived']))\n\n# \u30af\u30ed\u30b9\u96c6\u8a08\u3057IsAlone\u3054\u3068\u306b\u6b63\u898f\u5316\u3059\u308b\ndisplay(pd.crosstab(train['IsAlone'], train['Survived'], normalize='index'))\n","8d69166b":"sns.distplot(train['Fare'].dropna(), kde=False, hist=True)\nplt.title('\u904b\u8cc3\u306e\u5206\u5e03');","bef7345f":"train['CategoricalFare'] = pd.qcut(train['Fare'], 4)\ntrain[['CategoricalFare', 'Survived']].groupby(['CategoricalFare'], as_index=False).mean()\n\n# CategoricalFare\u3068Survived\u3092\u30af\u30ed\u30b9\u96c6\u8a08\u3059\u308b\ndisplay(pd.crosstab(train['CategoricalFare'], train['Survived']))\n\n# \u30af\u30ed\u30b9\u96c6\u8a08\u3057CategoricalFare\u3054\u3068\u306b\u6b63\u898f\u5316\u3059\u308b\ndisplay(pd.crosstab(train['CategoricalFare'], train['Survived'], normalize='index'))\n","a7d27bba":"train['Name'][0:5]","f9fbbd39":"# \u656c\u79f0\u3092\u62bd\u51fa\u3057\u3001\u91cd\u8907\u3092\u7701\u304f\nset(train.Name.str.extract(' ([A-Za-z]+)\\.', expand=False))","22634a70":"# \u656c\u79f0\u3092count\u3059\u308b\ntrain.Name.str.extract(' ([A-Za-z]+)\\.', expand=False).value_counts()","3f95c592":"# df_train\u306bTitle\u5217\u3092\u4f5c\u6210\u3001Title\u5217\u306e\u5024\u306f\u656c\u79f0\ntrain['Title'] = train.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\n# df_train\u306eTitle\u5217\u306e\u5024\u3054\u3068\u306b\u5e73\u5747\u5024\u3092\u7b97\u51fa\ntrain.groupby('Title').mean()['Age']","0838a389":"# \u5909\u63db\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3092\u4f5c\u6210\ndef title_to_num(title):\n    if title == 'Master':\n        return 1\n    elif title == 'Miss':\n        return 2\n    elif title == 'Mr':\n        return 3\n    elif title == 'Mrs':\n        return 4\n    else:\n        return 5\n\n# test\u306b\u3082title\u5217\u3092\u4f5c\u6210\ntest['Title'] = test.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\n# \u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3092\u7528\u3044\u3066\u5909\u63db\ntrain['Title_num'] = [title_to_num(i) for i in train['Title']]\ntest['Title_num'] = [title_to_num(i) for i in test['Title']]","549422cd":"## 4.3.9 \u540d\u524d","816e212e":"## 4.1.5 df.info()\u3067\u6982\u8981\u306e\u78ba\u8a8d","3af99523":"# 4.2 pandas-profiling\u3092\u7528\u3044\u3066\u5404\u7279\u5fb4\u3092\u500b\u5225\u306b\u628a\u63e1","9d3e01ed":"## 4.2.14 \uff11\u4eba\u3067\u4e57\u8239\u3057\u3066\u3044\u308b\u304b\uff12\u4eba\u4ee5\u4e0a\u3067\u4e57\u8239\u3057\u3066\u3044\u308b\u304b","7f537297":"## 4.3.5 \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306b\u4e57\u3063\u3066\u3044\u308b\u5144\u5f1f\u30fb\u914d\u5076\u8005\u306e\u6570\n","accecaac":"## 4.3.8 \u904b\u8cc3\u306e\u5206\u5e03","2d5f970d":"## 4.1.6 df.head()\u3067\u6982\u8981\u306e\u78ba\u8a8d","7aae4234":"## 4.1.8 \u8981\u7d04\u7d71\u8a08\u91cf\u306e\u8868\u793a","84accafa":"## 4.3.2 \u6027\u5225","e8a6164f":"## 4.1.4 \u5217\u306e\u540d\u524d\u306e\u78ba\u8a8d","acfb6a02":"## 4.3.4 \u5e74\u9f62\u306e\u5206\u5e03","0d170a7c":"## 4.1.7 \u6b20\u640d\u5024\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u78ba\u8a8d","29b70748":"## 4.1.3 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u884c\u6570\u3068\u5217\u6570\u3092\u78ba\u8a8d","de507e70":"# 4.1 \u30c7\u30fc\u30bf\u306e\u6982\u8981\u306e\u78ba\u8a8d\n## 4.1.1 Kernel\u306e\u4f5c\u6210\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","4288c733":"## 4.1.2 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u3064\u3044\u3066","b27b8a06":"# 4.3\u5404\u7279\u5fb4\u3068target\u3068\u306e\u95a2\u4fc2\u3092\u53ef\u8996\u5316","60b26bbd":"## 4.3.3 \u30c1\u30b1\u30c3\u30c8\u30af\u30e9\u30b9","038e065b":"## 4.3.1 \u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005","7c644b33":"## 4.3.6 \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306b\u4e57\u3063\u3066\u3044\u308b\u4e21\u89aa\u30fb\u5b50\u4f9b\u306e\u6570"}}