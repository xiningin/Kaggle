{"cell_type":{"63c6eaf6":"code","bd5ae40b":"code","2a47ea4b":"code","ce512e3e":"code","28f753e3":"code","1e7bf117":"code","e178fd56":"code","44d4ce08":"code","d53e58f3":"code","8a0dd60b":"code","769daa34":"code","60b20602":"code","68382880":"code","d2b36b77":"code","6f9132c4":"code","3861adc9":"code","257e969e":"code","29b22bec":"code","36ddfb57":"code","81c10fa2":"code","c080e320":"code","5ff08813":"code","1d47d35e":"code","c2d47168":"code","48e0bb3a":"code","b849a881":"code","01659867":"code","37adc03c":"code","b932f729":"code","81d4d303":"code","d35d016d":"code","21b10e8c":"code","1ef7f553":"code","caebd1c7":"code","c476cb2d":"code","e1653a11":"code","2154f544":"code","496f38b2":"code","eee90ebe":"code","af1a7c5c":"code","81e71b54":"code","56778d76":"code","654dbe4b":"code","5c8a5379":"code","6bd0cbe2":"code","fd66cd59":"code","baa3c7d9":"code","1a3a0b6b":"code","5cc5e0c2":"code","dcfd6817":"code","566c42a6":"code","bf857af8":"code","78e12d22":"code","9d84f915":"code","6f2b1336":"code","eb95b1e6":"code","3eae86c1":"code","20094cc0":"code","6f9b00b9":"code","f5809da1":"code","422cb10d":"code","4aa9538f":"code","9539e846":"code","2c4af60a":"code","e6f0d150":"code","6afa94f9":"code","9fddf6ec":"code","46b65c70":"code","aa349534":"code","1793e448":"code","3500afbd":"code","739f822e":"code","594d3030":"code","29c18331":"code","ed3aa0b1":"code","56c0226b":"code","7b5b2a26":"code","3c49ceac":"code","7f8fd03a":"code","aaf59711":"code","867116c2":"code","d98ef6ae":"code","d37af2ec":"code","abb2a217":"code","ab1c84af":"code","d27ca4c1":"code","903b5846":"code","9743c619":"code","0dd22f38":"code","77e39a90":"code","fa67c411":"code","b74f233c":"code","61ed078f":"code","2e1a1f67":"code","70e8ee34":"code","3606f1c1":"code","aeea5bb7":"code","7b30583d":"code","86fdefeb":"code","b6d81ef4":"code","48a8947a":"code","8b0315ad":"code","9fd95f4d":"code","6d07b109":"code","8d99c872":"code","9be3823b":"code","045ba229":"code","8a5ad74b":"code","f3949ac5":"code","aff8a8c9":"code","66a962f7":"code","794595d6":"code","5ff5c7e5":"code","04843f84":"code","514f11a4":"code","a4aa511e":"code","0daeae31":"code","42008b50":"code","7df5c8e6":"code","600e8cdb":"code","fb7330aa":"code","47cbb0d3":"code","7803dcad":"code","a995a07e":"code","328d9f80":"code","01ccb1ad":"code","655219f2":"code","54700fb8":"code","f592a406":"code","09e51eb6":"code","cf309757":"code","34311b79":"code","dbdd6e2f":"code","83c202b8":"code","22a70f72":"code","e2080026":"code","e7cc4813":"code","32ceb4bd":"code","11fbe501":"code","2eb786db":"code","d77b5ad4":"code","1f1d3e51":"code","7231b840":"code","045945ae":"code","1aab9e4c":"code","1373e869":"code","227908ce":"code","841f0fad":"code","ea90ed02":"code","77396104":"code","2aa2d92f":"code","af7f0d8d":"code","6e5dd54f":"code","a01c8a5b":"code","04f3a6ce":"code","0f33dbbe":"code","12c0b03b":"code","7f08e94c":"code","738e4d31":"code","3ed1d165":"code","f8ed3505":"markdown","d9914394":"markdown","206ed20a":"markdown","af246192":"markdown","559a2bb9":"markdown","a95d2b29":"markdown","b459049e":"markdown","fff7d4eb":"markdown","574e859a":"markdown","3b21346e":"markdown","25cd035c":"markdown","3cef45f4":"markdown","7c2ef47e":"markdown","a3f9e07c":"markdown","ded124e9":"markdown","345099b8":"markdown","e4602445":"markdown","403c083b":"markdown","b2051506":"markdown","29b5a5d4":"markdown","2e7a733d":"markdown","56dcd466":"markdown","e6b6f914":"markdown","8321a8b7":"markdown","697f4ab1":"markdown","b3b50e47":"markdown","9ae165b9":"markdown","66268ec4":"markdown","79b8be8f":"markdown","04a4d7d3":"markdown","b2b8b2e0":"markdown","ccd08c0d":"markdown","08ae4a35":"markdown","0a6fb818":"markdown","8406d7a5":"markdown","143d42b5":"markdown","9f779555":"markdown","fbaa1b80":"markdown","88dcd2ec":"markdown","44f09f72":"markdown","67dd8d38":"markdown","f7ba1fd6":"markdown","48c4b5d7":"markdown","c0624df2":"markdown","2d27a08f":"markdown","78b54164":"markdown","28271733":"markdown","831d4bba":"markdown","1b3f36a3":"markdown","c8f1df22":"markdown","5e19375a":"markdown","b48dd2ce":"markdown","7ad66136":"markdown","eb85d1c9":"markdown","7959ec14":"markdown","874205f4":"markdown","ec5221d0":"markdown","b9f15f35":"markdown","b538ba5a":"markdown","e04ebcc1":"markdown","b2a12452":"markdown","df62613a":"markdown","dd921025":"markdown","bdb4dd60":"markdown","7138c9d0":"markdown","50a63862":"markdown","0cf61767":"markdown","bbcdf36e":"markdown","7e5ee8f1":"markdown","2a5a377f":"markdown","91d92a69":"markdown","53a5d27b":"markdown","03a7218d":"markdown","1a6f11c4":"markdown","f883af1f":"markdown","a8589735":"markdown","44e276e2":"markdown","5c38292d":"markdown","2592c098":"markdown"},"source":{"63c6eaf6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nprint(os.listdir(\"..\/input\"))","bd5ae40b":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test.csv\")","2a47ea4b":"train_df.info()","ce512e3e":"test_df.info()","28f753e3":"train_df.head()","1e7bf117":"test_df.head()","e178fd56":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\neda_train_df = pd.DataFrame()\neda_test_df = pd.DataFrame()\n\neda_train_df['id'] = train_df['id']\neda_train_df['price'] = train_df['price']\neda_test_df['id'] = test_df['id']","44d4ce08":"train_df['date'].head()","d53e58f3":"train_df['date'].apply(lambda x : x[8:]).unique()","8a0dd60b":"eda_train_df['date'] = pd.to_datetime(train_df['date'].apply(lambda x : x[0:8]))\neda_test_df['date'] = pd.to_datetime(test_df['date'].apply(lambda x : x[0:8])) #test \ub370\uc774\ud130\uc14b\ub3c4 \ub3d9\uc77c\ud558\uac8c \uc801\uc6a9 \ud574 \ub450\uc5b4\uc57c \ud569\ub2c8\ub2e4.","769daa34":"f, ax = plt.subplots(figsize=(8, 6))\nfig = sns.scatterplot(x='date', y='price', data=eda_train_df)\nfig.set(xlim=(eda_train_df['date'].min(),eda_train_df['date'].max()))","60b20602":"train_df['bedrooms'].head()","68382880":"train_df['bedrooms'].unique()","d2b36b77":"f, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxenplot(x='bedrooms', y='price', data=train_df)","6f9132c4":"eda_train_df['bedrooms'] = train_df['bedrooms']\neda_test_df['bedrooms'] = test_df['bedrooms']","3861adc9":"train_df['bathrooms'].head()","257e969e":"np.sort(train_df['bathrooms'].unique()) # 0~8\uae4c\uc9c0 0.25 \uac04\uaca9 \uc874\uc7ac","29b22bec":"f, ax = plt.subplots(figsize=(12, 6))\nfig = sns.boxenplot(x='bathrooms', y='price', data=train_df)","36ddfb57":"eda_train_df['bathrooms'] = train_df['bathrooms']\neda_test_df['bathrooms'] = test_df['bathrooms']","81c10fa2":"train_df['sqft_living'].head()","c080e320":"train_df['sqft_lot'].head()","5ff08813":"f, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_living', y='price', data=train_df)","1d47d35e":"f, ax = plt.subplots(1, 2, figsize=(16, 6))\nfig_1 = sns.regplot(x='sqft_lot', y='price', data=train_df, ax = ax[0])\nfig_2 = sns.regplot(x='sqft_lot', y='price', data=train_df, ax = ax[1])\nfig_2.set(xlim=(0,200000))","c2d47168":"eda_train_df['sqft_living'] = train_df['sqft_living']\neda_test_df['sqft_living'] = test_df['sqft_living']\neda_train_df['sqft_lot'] = train_df['sqft_lot']\neda_test_df['sqft_lot'] = test_df['sqft_lot']","48e0bb3a":"f, ax = plt.subplots(figsize=(8, 6))\nfig = sns.violinplot(x='floors', y='price', data=train_df)","b849a881":"eda_train_df['floors'] = train_df['floors']\neda_test_df['floors'] = test_df['floors'] ","01659867":"train_df['waterfront'].unique()","37adc03c":"f, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxenplot(x='waterfront', y='price', data=train_df)","b932f729":"eda_train_df['waterfront'] = train_df['waterfront']\neda_test_df['waterfront'] = test_df['waterfront'] ","81d4d303":"train_df['view'].unique()","d35d016d":"f, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxenplot(x='view', y='price', data=train_df)","21b10e8c":"eda_train_df['view'] = train_df['view']\neda_test_df['view'] = test_df['view'] ","1ef7f553":"train_df['condition'].unique()","caebd1c7":"f, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxenplot(x='condition', y='price', data=train_df)","c476cb2d":"eda_train_df['condition'] = train_df['condition']\neda_test_df['condition'] = test_df['condition'] ","e1653a11":"train_df['grade'].unique()","2154f544":"f, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxenplot(x='grade', y='price', data=train_df)","496f38b2":"eda_train_df['grade'] = train_df['grade']\neda_test_df['grade'] = test_df['grade'] ","eee90ebe":"f, ax = plt.subplots(1, 2, figsize=(16, 6))\nfig_1 = sns.regplot(x='sqft_above', y='price', data=train_df, ax=ax[0])\nfig_2 = sns.regplot(x='sqft_basement', y='price', data=train_df, ax=ax[1])","af1a7c5c":"eda_train_df['sqft_above'] = train_df['sqft_above']\neda_test_df['sqft_above'] = test_df['sqft_above'] \neda_train_df['sqft_basement'] = train_df['sqft_basement']\neda_test_df['sqft_basement'] = test_df['sqft_basement'] ","81e71b54":"train_df['yr_built'].head()","56778d76":"f, ax = plt.subplots(figsize=(8, 6))\nfig = sns.scatterplot(x='yr_built', y='price', data=train_df)","654dbe4b":"eda_train_df['yr_built'] = train_df['yr_built']\neda_test_df['yr_built'] = test_df['yr_built'] ","5c8a5379":"train_df['yr_renovated'].describe()","6bd0cbe2":"f, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='yr_renovated', y='price', data=train_df[train_df['yr_renovated']!=0])","fd66cd59":"tmp_train_df = train_df.copy()","baa3c7d9":"tmp_train_df['yr_renovated'] = tmp_train_df['yr_renovated']>0","1a3a0b6b":"f, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxenplot(x='yr_renovated', y='price', data=tmp_train_df)","5cc5e0c2":"eda_train_df['yr_renovated'] = train_df['yr_renovated']\neda_test_df['yr_renovated'] = test_df['yr_renovated']","dcfd6817":"train_df['zipcode'].head()","566c42a6":"train_df['zipcode'].unique()","bf857af8":"f, ax = plt.subplots(figsize=(16, 6))\nfig = sns.boxenplot(x='zipcode', y='price', data=tmp_train_df)","78e12d22":"eda_train_df['zipcode'] = train_df['zipcode']\neda_test_df['zipcode'] = test_df['zipcode'] ","9d84f915":"train_df.loc[:,('lat','long')].head()","6f2b1336":"a = train_df.groupby(['lat','long'])['price'].mean().unstack()","eb95b1e6":"f, ax = plt.subplots(figsize=(8, 6))\nfig = sns.heatmap(a)","3eae86c1":"f, ax = plt.subplots(1, 2, figsize=(16, 6))\nfig_1 = sns.scatterplot(x='lat', y='price', data=train_df, ax=ax[0])\nfig_2 = sns.scatterplot(x='long', y='price', data=train_df, ax=ax[1])","20094cc0":"eda_train_df['lat'] = train_df['lat']\neda_test_df['lat'] = test_df['lat']\neda_train_df['long'] = train_df['long']\neda_test_df['long'] = test_df['long'] ","6f9b00b9":"f, ax = plt.subplots(2, 2, figsize=(16, 12))\nfig_1 = sns.regplot(x='sqft_living15', y='price', data=train_df, ax=ax[0][0])\nfig_2 = sns.regplot(x='sqft_lot15', y='price', data=train_df, ax=ax[0][1])\nfig_3 = sns.regplot(x='sqft_living', y='price', data=train_df, ax=ax[1][0])\nfig_4 = sns.regplot(x='sqft_lot', y='price', data=train_df, ax=ax[1][1])","f5809da1":"eda_train_df['sqft_living15'] = train_df['sqft_living15']\neda_test_df['sqft_living15'] = test_df['sqft_living15']\neda_train_df['sqft_lot15'] = train_df['sqft_lot15']\neda_test_df['sqft_lot15'] = test_df['sqft_lot15'] ","422cb10d":"train_df_corr = eda_train_df.corr()\ntrain_df_corr_series = train_df_corr['price'].abs().sort_values(ascending=False)","4aa9538f":"f, ax = plt.subplots(figsize=(8, 6))\ntrain_df_corr_series.plot('bar')","9539e846":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\nimport warnings\nwarnings.filterwarnings(\"ignore\")","2c4af60a":"import lightgbm","e6f0d150":"# lightgbm\uc6a9 cv\ndef cross_val_lgb(train_X, train_y, cv = 5):\n    params ={\n        'metric':'rmse'\n    }\n    trn_data = lightgbm.Dataset(train_X,label=train_y)\n    evals = lightgbm.cv(params=params, train_set=trn_data)\n    #print(\"{:.5f}\".format(np.sqrt(mean_squared_error(np.expm1(y_test),np.expm1(prediction))))\n    return evals['rmse-mean'][-1]","6afa94f9":"# cross_val\uc744 \uc218\ud589\ud558\ub294 \ud568\uc218\ub97c \ubbf8\ub9ac \ub9cc\ub4e4\uc5b4 \ub450\uace0 \ubc18\ubcf5\ud574\uc11c \uc0ac\uc6a9 \ud569\ub2c8\ub2e4.\n# \ucd5c\ub300\ud55c \uadf8\ub300\ub85c \uc0ac\uc6a9\ud558\uae30 \uc704\ud558\uc5ec lightgbm cv \uc0bd\uc785\ndef cross_val(train_X,train_y, cv=5):\n    model = RandomForestRegressor(random_state=42)\n    \n    cv_lgb = cross_val_lgb(train_X, train_y)\n    \n    print(\"RF : {:.5f}, LGB : {:.5f}\".format(np.sqrt(-cross_val_score(model, train_X, train_y, scoring = 'neg_mean_squared_error', cv=cv)).mean(),\n                                            cv_lgb))","9fddf6ec":"# F.E \uc218\ud589 \uc804 \uc810\uc218\ub97c \ubcf4\uc790\ntrain_df_corr = eda_train_df.corr()\ntrain_df_corr_series = train_df_corr['price'].abs().sort_values(ascending=False)\nSELECTED = list(train_df_corr_series.index)\nSELECTED.remove('price')\nSELECTED.remove('id')\nTARGET = ['price']\ntrain_X = eda_train_df[SELECTED]\ntrain_y = eda_train_df[TARGET]\ncross_val(train_X,train_y)","46b65c70":"eda_train_df['yr_latest'] = eda_train_df[['yr_built','yr_renovated']].apply(lambda x: x.max(), axis=1)\neda_test_df['yr_latest'] = eda_test_df[['yr_built','yr_renovated']].apply(lambda x: x.max(), axis=1)","aa349534":"train_df_corr = eda_train_df.corr()\ntrain_df_corr_series = train_df_corr['price'].abs().sort_values(ascending=False)\nSELECTED = list(train_df_corr_series.index)\nSELECTED.remove('price')\nSELECTED.remove('id')\nTARGET = ['price']\ntrain_X = eda_train_df[SELECTED]\ntrain_y = eda_train_df[TARGET]\ncross_val(train_X,train_y)","1793e448":"SELECTED.remove('yr_built')\n#SELECTED.remove('yr_renovated')\ntrain_X = eda_train_df[SELECTED]\ntrain_y = eda_train_df[TARGET]\ncross_val(train_X,train_y)","3500afbd":"SELECTED.remove('yr_renovated')\ntrain_X = eda_train_df[SELECTED]\ntrain_y = eda_train_df[TARGET]\ncross_val(train_X,train_y)","739f822e":"del eda_train_df['yr_built']\ndel eda_train_df['yr_renovated']\ndel eda_test_df['yr_built']\ndel eda_test_df['yr_renovated']","594d3030":"eda_train_df['zipcode'].unique()","29c18331":"area = eda_train_df.groupby('zipcode').mean()[['lat','long']]","ed3aa0b1":"eda_train_df_tmp = pd.merge(eda_train_df, area, on='zipcode', how='outer', suffixes=('','_mean')) # \ucd94\ud6c4 \uceec\ub7fc \uc774\ub984 \uc815\ub9ac","56c0226b":"eda_train_df_tmp.head()","7b5b2a26":"eda_train_df_tmp = eda_train_df_tmp.sort_values(['id']).reset_index(drop=True)","3c49ceac":"eda_train_df_tmp.head()","7f8fd03a":"train_df_corr = eda_train_df_tmp.corr()\ntrain_df_corr_series = train_df_corr['price'].abs().sort_values(ascending=False)\nf, ax = plt.subplots(figsize=(8, 6))\ntrain_df_corr_series.plot('bar')","aaf59711":"SELECTED = list(train_df_corr_series.index)\nSELECTED.remove('price')\nSELECTED.remove('id')\nTARGET = ['price']\ntrain_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ncross_val(train_X,train_y)","867116c2":"SELECTED = list(train_df_corr_series.index)\nSELECTED.remove('price')\nSELECTED.remove('id')\nSELECTED.remove('lat')\nSELECTED.remove('long')\nTARGET = ['price']\ntrain_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ncross_val(train_X,train_y)","d98ef6ae":"eda_train_df['lat_mean'] = eda_train_df_tmp['lat_mean']\neda_train_df['long_mean'] = eda_train_df_tmp['long_mean']","d37af2ec":"eda_test_df_tmp = eda_test_df.copy()\narea = eda_test_df.groupby('zipcode').mean()[['lat','long']]\neda_test_df_tmp = pd.merge(eda_test_df, area, on='zipcode', how='outer', suffixes=('','_mean')) # \ucd94\ud6c4 \uceec\ub7fc \uc774\ub984 \uc815\ub9ac\neda_test_df = eda_test_df_tmp.sort_values(['id']).reset_index(drop=True)","abb2a217":"# EDA\uc2dc \uac01\uc885 \ud2b9\uc131 \uc0b0\uc810\ub3c4\uc5d0\uc11c \uc774\uc0c1\uce58\ub85c \uacc4\uc18d \ub098\uc624\ub294 price 6500000 \uc774\uc0c1 \uc81c\uac70\neda_train_df[eda_train_df['price']>6500000]","ab1c84af":"eda_train_df_tmp = eda_train_df.drop([2775, 5108, 6469], axis=0)","d27ca4c1":"train_df_corr = eda_train_df_tmp.corr()\ntrain_df_corr_series = train_df_corr['price'].abs().sort_values(ascending=False)\nSELECTED = list(train_df_corr_series.index)\nSELECTED.remove('price')\nSELECTED.remove('id')\nTARGET = ['price']\ntrain_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ncross_val(train_X,train_y)","903b5846":"eda_train_df = eda_train_df.drop([2775, 5108, 6469], axis=0)","9743c619":"# sqft_living \uc0b0\uc810\ub3c4\uc5d0\uc11c \uc6b0\uce21 \ud558\ub2e8\uc5d0 \ucd94\uc138\uc640 \ubd88\uc77c\uce58 \ud558\ub294 13000 \uc774\uc0c1 \uc81c\uac70\neda_train_df[eda_train_df['sqft_living']>13000]","0dd22f38":"eda_train_df_tmp = eda_train_df.drop([8912], axis=0)","77e39a90":"train_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ncross_val(train_X,train_y)","fa67c411":"# \uc704 \uac04\uc774 \ud14c\uc2a4\ud2b8\uc5d0\uc11c\ub294 \ud558\ub77d\ud558\uc600\uc73c\ub098 \uc801\uc694\ud574\ubcf4\uc790\n#eda_train_df = eda_train_df.drop([8912], axis=0)","b74f233c":"# bathrooms 6 \uc774\uc0c1\uc5d0\uc11c \uac00\uaca9\uc774 \uae09\uaca9\ud788 \ub5a8\uc5b4\uc9c0\ub294 \uac83\ub4e4 \uc81c\uac70\neda_train_df[eda_train_df['bathrooms'] > 6]","61ed078f":"eda_train_df_tmp = eda_train_df.drop([2859,5990], axis=0)","2e1a1f67":"train_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ncross_val(train_X,train_y)","70e8ee34":"eda_train_df = eda_train_df.drop([2859,5990], axis=0)","3606f1c1":"# view 0\uc5d0 500000\ub118\ub294\uac70 \uc774\uc0c1\uce58 \uc81c\uac70\neda_train_df[(eda_train_df['view'] == 0) & (eda_train_df['price'] > 5000000)]","aeea5bb7":"eda_train_df_tmp = eda_train_df.drop([3134], axis=0)","7b30583d":"train_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ncross_val(train_X,train_y)","86fdefeb":"eda_train_df = eda_train_df.drop([3134], axis=0)","b6d81ef4":"# grade 3 \uc5ed\uc804\ud604\uc0c1 \uc81c\uac70\neda_train_df[(eda_train_df['grade'] == 3)]","48a8947a":"eda_train_df_tmp = eda_train_df.drop([2302, 4123], axis=0)","8b0315ad":"train_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ncross_val(train_X,train_y)","9fd95f4d":"eda_train_df = eda_train_df.drop([2302, 4123], axis=0)","6d07b109":"# bathrooms\ub97c \uad6c\uac04\ubcc4\ub85c \ubb36\uc5b4\uc11c \uc0ac\uc6a9\ud574\ubcf4\uc790\neda_train_df_tmp = eda_train_df.copy()\neda_train_df_tmp.loc[eda_train_df_tmp['bathrooms']<2,'bathrooms'] = 1\neda_train_df_tmp.loc[(eda_train_df_tmp['bathrooms']>=2) & (eda_train_df_tmp['bathrooms']<3),'bathrooms'] = 2\neda_train_df_tmp.loc[(eda_train_df_tmp['bathrooms']>=3) & (eda_train_df_tmp['bathrooms']<4),'bathrooms'] = 3\neda_train_df_tmp.loc[(eda_train_df_tmp['bathrooms']>=4) & (eda_train_df_tmp['bathrooms']<5),'bathrooms'] = 4\neda_train_df_tmp.loc[(eda_train_df_tmp['bathrooms']>=5) & (eda_train_df_tmp['bathrooms']<6),'bathrooms'] = 5\neda_train_df_tmp.loc[(eda_train_df_tmp['bathrooms']>=6) & (eda_train_df_tmp['bathrooms']<7),'bathrooms'] = 6\neda_train_df_tmp.loc[(eda_train_df_tmp['bathrooms']>=7) & (eda_train_df_tmp['bathrooms']<8),'bathrooms'] = 7\neda_train_df_tmp.loc[(eda_train_df_tmp['bathrooms']>=8),'bathrooms'] = 8","8d99c872":"train_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ncross_val(train_X,train_y)","9be3823b":"# basement \uba74\uc801\uacfc above \uba74\uc801\uc744 \ud569\uccd0 \uc0ac\uc6a9\ud574\ubcf4\uc790\neda_train_df_tmp = eda_train_df.copy()\neda_train_df_tmp['sqft_ab'] = eda_train_df['sqft_basement']+eda_train_df['sqft_above']","045ba229":"train_df_corr = eda_train_df_tmp.corr()\ntrain_df_corr_series = train_df_corr['price'].abs().sort_values(ascending=False)\nSELECTED = list(train_df_corr_series.index)\nSELECTED.remove('price')\nSELECTED.remove('id')\nTARGET = ['price']\ntrain_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ncross_val(train_X,train_y)","8a5ad74b":"SELECTED.remove('sqft_above')\ntrain_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ncross_val(train_X,train_y)","f3949ac5":"SELECTED.remove('sqft_basement')\ntrain_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ncross_val(train_X,train_y)","aff8a8c9":"eda_train_df_tmp = eda_train_df.copy()\neda_train_df_tmp['year'] = eda_train_df.date.apply(lambda x:x.year)\neda_train_df_tmp['month'] = eda_train_df.date.apply(lambda x:x.month)\neda_train_df_tmp['day'] = eda_train_df.date.apply(lambda x:x.day)","66a962f7":"train_df_corr = eda_train_df_tmp.corr()\ntrain_df_corr_series = train_df_corr['price'].abs().sort_values(ascending=False)\nSELECTED = list(train_df_corr_series.index)\nSELECTED.remove('price')\nSELECTED.remove('id')\nTARGET = ['price']\ntrain_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ncross_val(train_X,train_y)","794595d6":"eda_train_df['year'] = eda_train_df.date.apply(lambda x:x.year)\neda_train_df['month'] = eda_train_df.date.apply(lambda x:x.month)\neda_train_df['day'] = eda_train_df.date.apply(lambda x:x.day)\neda_test_df['year'] = eda_test_df.date.apply(lambda x:x.year)\neda_test_df['month'] = eda_test_df.date.apply(lambda x:x.month)\neda_test_df['day'] = eda_test_df.date.apply(lambda x:x.day)","5ff5c7e5":"eda_train_df_tmp = eda_train_df.copy()\neda_train_df_tmp['room_sum'] = eda_train_df.bedrooms + eda_train_df.bathrooms","04843f84":"train_df_corr = eda_train_df_tmp.corr()\ntrain_df_corr_series = train_df_corr['price'].abs().sort_values(ascending=False)\nSELECTED = list(train_df_corr_series.index)\nSELECTED.remove('price')\nSELECTED.remove('id')\nTARGET = ['price']\ntrain_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ncross_val(train_X,train_y)","514f11a4":"#eda_train_df['room_sum'] = eda_train_df.bedrooms + eda_train_df.bathrooms\n#eda_test_df['room_sum'] = eda_test_df.bedrooms + eda_test_df.bathrooms","a4aa511e":"#eda_train_df_tmp = eda_train_df.copy()","0daeae31":"#year = eda_train_df_tmp['date'].apply(lambda x:x.year)","42008b50":"#yr_gap = []\n#for i, row in eda_train_df_tmp.iterrows():\n#    yr_gap.append(year[i] - eda_train_df_tmp.loc[i,'yr_latest'])","7df5c8e6":"#eda_train_df_tmp['yr_gap'] = yr_gap","600e8cdb":"train_df_corr = eda_train_df_tmp.corr()\ntrain_df_corr_series = train_df_corr['price'].abs().sort_values(ascending=False)\nSELECTED = list(train_df_corr_series.index)\nSELECTED.remove('price')\nSELECTED.remove('id')\nTARGET = ['price']\ntrain_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ncross_val(train_X,train_y)","fb7330aa":"eda_train_df_tmp = eda_train_df.copy() ","47cbb0d3":"eda_train_df_tmp['sqft_per_floors'] = eda_train_df_tmp.loc[:,'sqft_living15']\/eda_train_df_tmp.loc[:,'floors']","7803dcad":"train_df_corr = eda_train_df_tmp.corr()\ntrain_df_corr_series = train_df_corr['price'].abs().sort_values(ascending=False)\nSELECTED = list(train_df_corr_series.index)\nSELECTED.remove('price')\nSELECTED.remove('id')\nTARGET = ['price']\ntrain_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ncross_val(train_X,train_y)","a995a07e":"eda_train_df_tmp = eda_train_df.copy() ","328d9f80":"eda_train_df_tmp['sqft_total'] = eda_train_df_tmp['sqft_above'] +\\\n                                    eda_train_df_tmp['sqft_basement']","01ccb1ad":"train_df_corr = eda_train_df_tmp.corr()\ntrain_df_corr_series = train_df_corr['price'].abs().sort_values(ascending=False)\nSELECTED = list(train_df_corr_series.index)\nSELECTED.remove('price')\nSELECTED.remove('id')\nTARGET = ['price']\ntrain_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ncross_val(train_X,train_y)","655219f2":"from sklearn.model_selection import StratifiedKFold, KFold","54700fb8":"# \uae30\uc874\uc5d0 \ub9cc\ub4e0 cross_val\uc740 log\ubcc0\ud658\uc5d0 \ub530\ub978 target\uac12\uc5d0 \uc5ed\ubcc0\ud658\uc744 \uc801\uc6a9\ud560 \uc218 \uc5c6\uc74c\uc73c\ub85c, cross_val_log\ub97c \uc0c8\ub85c \ub9cc\ub4e0\ub2e4 \ub450 \uacb0\uacfc\ub294 \uac19\ub2e4.\ndef cross_val_log(train_X,train_y, cv=5):\n    rmse_rf = []\n    skf = KFold(n_splits=cv)\n    model = RandomForestRegressor(random_state=42)\n    for train_idx, test_idx in skf.split(train_X, train_y):\n        X_train, X_test = train_X.iloc[train_idx], train_X.iloc[test_idx]\n        y_train, y_test = train_y.iloc[train_idx], train_y.iloc[test_idx]\n        model.fit(X_train, y_train)\n        prediction = model.predict(X_test)\n        rmse_rf.append(np.sqrt(mean_squared_error(np.expm1(y_test),np.expm1(prediction))))\n        \n    rmse_lgb = []\n    skf = KFold(n_splits=cv)\n    lgb = lightgbm.LGBMRegressor(metric='rmse', random_state=42)\n    for train_idx, test_idx in skf.split(train_X, train_y):\n        X_train, X_test = train_X.iloc[train_idx], train_X.iloc[test_idx]\n        y_train, y_test = train_y.iloc[train_idx], train_y.iloc[test_idx]\n        lgb.fit(X_train, y_train)\n        prediction = lgb.predict(X_test)\n        rmse_lgb.append(np.sqrt(mean_squared_error(np.expm1(y_test),np.expm1(prediction))))\n        \n    print(\"RF : {:.5f} , LGB : {:.5f}\".format(np.mean(rmse_rf), np.mean(rmse_lgb)))","f592a406":"train_df_corr = eda_train_df_tmp.corr()\ntrain_df_corr_series = train_df_corr['price'].abs().sort_values(ascending=False)\nSELECTED = list(train_df_corr_series.index)\nSELECTED.remove('price')\nSELECTED.remove('id')\nTARGET = ['price']\ntrain_X = eda_train_df_tmp[SELECTED]\ntrain_y = eda_train_df_tmp[TARGET]\ntrain_y_log = np.log1p(train_y)","09e51eb6":"cross_val_log(train_X,train_y_log)","cf309757":"#eda_train_df_tmp = eda_train_df.copy()","34311b79":"#eda_train_df_tmp.head()","dbdd6e2f":"#eda_train_df['sqft_living'] = np.log1p(eda_train_df_tmp['sqft_living'])\n#eda_train_df['sqft_lot'] = np.log1p(eda_train_df_tmp['sqft_lot'])\n#eda_train_df['sqft_above'] = np.log1p(eda_train_df_tmp['sqft_above'])\n#da_train_df['sqft_living15'] = np.log1p(eda_train_df_tmp['sqft_living15'])\n#eda_train_df['sqft_lot15'] = np.log1p(eda_train_df_tmp['sqft_lot15'])","83c202b8":"#eda_test_df_tmp = eda_test_df.copy()\n#eda_test_df['sqft_living'] = np.log1p(eda_test_df_tmp['sqft_living'])\n#eda_test_df['sqft_lot'] = np.log1p(eda_test_df_tmp['sqft_lot'])\n#eda_test_df['sqft_above'] = np.log1p(eda_test_df_tmp['sqft_above'])\n#eda_test_df['sqft_living15'] = np.log1p(eda_test_df_tmp['sqft_living15'])\n#eda_test_df['sqft_lot15'] = np.log1p(eda_test_df_tmp['sqft_lot15'])","22a70f72":"#f, ax = plt.subplots(figsize=(8, 6))\n#fig = sns.regplot(x='sqft_living', y='price', data=eda_train_df)","e2080026":"eda_train_df.shape","e7cc4813":"eda_test_df.shape","32ceb4bd":"train_df_corr = eda_train_df.corr()\ntrain_df_corr_series = train_df_corr['price'].abs().sort_values(ascending=False)\nSELECTED = list(train_df_corr_series.index)\nSELECTED.remove('price')\nSELECTED.remove('id')\nTARGET = ['price']","11fbe501":"from sklearn.ensemble import RandomForestRegressor # \ud68c\uadc0 \ubb38\uc81c\uc774\uae30 \ub54c\ubb38\uc5d0 Regressor \uc0ac\uc6a9","2eb786db":"# \ubaa8\ub378 \ud559\uc2b5\uc744 \uc704\ud574 Train Data\uc5d0\uc11c \uc120\ud0dd\ud55c \ud2b9\uc131\ub4e4\ub9cc\uc744 \uc120\ud0dd\ud558\uc5ec train_X \uc0dd\uc131\n# \uc774 \ud2b9\uc131\ub4e4\uc5d0 \uc758\ud55c target\uac12\uc740 train_y\ntrain_X = eda_train_df[SELECTED]\ntrain_y = eda_train_df[TARGET]\n# \uc608\uce21\uc744 \uc704\ud574 Test Data \uc5d0\uc11c \uac19\uc740 \ud2b9\uc131\uc73c\ub85c test_X \uc0dd\uc131\ntest_X = eda_test_df[SELECTED]","d77b5ad4":"len(SELECTED)","1f1d3e51":"#train_X.shape, test_X.shape","7231b840":"import lightgbm as lgb","045945ae":"#! pip install optuna","1aab9e4c":"#import optuna\n#from sklearn.model_selection import cross_validate","1373e869":"    \"\"\"\ndef objective(trial:optuna.trial.Trial):\n    boosting_type = trial.suggest_categorical(\"boosting_type\", ['gbdt'])\n    num_leaves = trial.suggest_int('num_leaves', 6, 6)\n    min_child_samples = trial.suggest_int('min_child_samples', 38, 42)\n    #min_data_in_leaf = trial.suggest_int('min_data_in_leaf', 10, 80)\n    #lambda_l1 = trial.suggest_uniform('lambda_l1', 0, 0.12)\n    #lambda_l2 = trial.suggest_uniform('lambda_l2', 0, 0.1)\n    learning_rate = trial.suggest_uniform('learning_rate', 0.09, 0.1)\n    #subsample = trial.suggest_uniform('subsample', 0.9, 1.0)\n    #bagging_fraction = trial.suggest_uniform('bagging_fraction', 0.1, 1.0)\n    #bagging_freq = trial.suggest_int('bagging_freq', 1, 12)\n    #feature_fraction = trial.suggest_uniform('feature_fraction', 0.0001, 0.06)\n    #min_sum_hessian_in_leaf = trial.suggest_uniform('min_sum_hessian_in_leaf', 0.1, 15)\n    #num_threads = trial.suggest_int('num_threads', 3, 10)\n    #verbosity = trial.suggest_int('verbosity', 1, 4)\n    \n    opt_params = {\n    'boosting_type':boosting_type, 'num_leaves':num_leaves,\n    #'min_data_in_leaf':min_data_in_leaf, \n    #'lambda_l1':lambda_l1, 'lambda_l2':lambda_l2, 'bagging_fraction':bagging_fraction,\n    'learning_rate':learning_rate,\n    'min_child_samples':min_child_samples,\n    #'subsample':subsample,\n    #'bagging_freq':bagging_freq, 'feature_fraction':feature_fraction, \n    #'min_sum_hessian_in_leaf':min_sum_hessian_in_leaf, 'num_threads':num_threads, 'verbosity':verbosity,\n    'metric':'rmse', 'random_state':42\n    }\n    \"\"\"\n    \"\"\"\n    clf = lgb.LGBMRegressor(boosting_type=boosting_type, num_leaves=num_leaves, \n                        learning_rate=learning_rate, reg_alpha=lambda_l1, \n                        min_child_samples=min_data_in_leaf, subsample=subsample,\n                        bagging_fraction=bagging_fraction, bagging_freq=bagging_freq,\n                        feature_fraction=feature_fraction, min_sum_hessian_in_leaf=min_sum_hessian_in_leaf,\n                        num_threads=num_threads, verbosity=verbosity,\n                        reg_lambda=lambda_l2, random_state=42)\n    \"\"\"\n\n    \"\"\"\n    kf = KFold(n_splits=5, shuffle = False, random_state=42)\n    oof_preds = np.zeros(train_X.shape[0])\n    \n    for fold_, (trn_index, val_index) in enumerate(kf.split(train_X,train_y)):\n        X_trn, X_val = train_X.iloc[trn_index], train_X.iloc[val_index]\n        y_trn, y_val = train_y_log.iloc[trn_index], train_y_log.iloc[val_index]\n        print(\"Fold:{}\".format(fold_ + 1))\n        trn_data = lgb.Dataset(X_trn,label=y_trn)\n        val_data = lgb.Dataset(X_val,label=y_val)\n        \n        clf = lgb.train(opt_params, trn_data, 100000, valid_sets = [trn_data, val_data], \n                        verbose_eval= 5000, early_stopping_rounds = 2000)\n        \n        oof_preds[val_index] = np.expm1(clf.predict(X_val, num_iteration= clf.best_iteration))\n        \n    cv_score = np.sqrt(mean_squared_error(train_y, oof_preds))\n                       \n    return cv_score\n    \"\"\"","227908ce":"#study = optuna.create_study()","841f0fad":"#study.optimize(objective, n_trials=10)","ea90ed02":"#study.best_params","77396104":"#study.best_value","2aa2d92f":"import lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import StratifiedKFold, KFold","af7f0d8d":"params = {'boosting_type': 'gbdt',\n 'num_leaves': 6,\n 'min_child_samples': 39,\n 'learning_rate': 0.09658,\n 'metric': 'rmse',\n 'random_state': 42}","6e5dd54f":"all_K_fold_results = []\nkf = KFold(n_splits=5, shuffle = False, random_state=42)\noof_preds = np.zeros(train_X.shape[0])\nsub_preds = np.zeros(test_X.shape[0])\n\n\nfor fold_, (trn_index, val_index) in enumerate(kf.split(train_X,train_y)):\n    #train_y_log = np.log1p(train_y)\n    X_trn, X_val = train_X.iloc[trn_index], train_X.iloc[val_index]\n    #y_trn, y_val = train_y.iloc[trn_index], train_y.iloc[val_index]\n    y_trn, y_val = train_y_log.iloc[trn_index], train_y_log.iloc[val_index]\n    #X_trn, X_val = X.iloc[trn_index], X.iloc[val_index]\n    #y_trn, y_val = y.iloc[trn_index], y.iloc[val_index]\n    \n    \n    print(\"Fold:{}\".format(fold_ + 1))\n\n    \n    trn_data = lgb.Dataset(X_trn,label=y_trn)\n    val_data = lgb.Dataset(X_val,label=y_val)\n    #Fit the model\n    clf = lgb.train(params, trn_data, 100000, valid_sets = [trn_data, val_data], \n                    verbose_eval= 5000, early_stopping_rounds = 2000)\n\n    #Predict out of fold \n    oof_preds[val_index] = np.expm1(clf.predict(X_val, num_iteration= clf.best_iteration))\n    #oof_preds[val_index] = clf.predict(X_val, num_iteration= clf.best_iteration)\n    # oof_preds[oof_preds < 0] = 0\n    \n    #Predict on test set based on current fold model. Average results\n    sub_preds += np.expm1(clf.predict(test_X, num_iteration= clf.best_iteration)) \/ kf.n_splits\n    #sub_preds += clf.predict(test_X, num_iteration= clf.best_iteration) \/ kf.n_splits\n    # sub_prediction[sub_prediction<0] = 0\n    # sub_preds = sub_preds + sub_prediction\n    \n    #Save current fold values\n\n    fold_results = {'best_iteration_' : clf.best_iteration, \n                   'feature_importances_' : clf.feature_importance}\n    \n    all_K_fold_results.append(fold_results.copy())\n\nprint(\"CV score: {:<8.5f}\".format(np.sqrt(mean_squared_error(train_y, oof_preds))))\nresults = pd.DataFrame(all_K_fold_results)","a01c8a5b":"sub_preds","04f3a6ce":"# sample_submission.csv\uc740 \uc81c\ucd9c \uc591\uc2dd\uc744 \uc815\uc758\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n# \uc774 \uc591\uc2dd\uc5d0 \ub36e\uc5b4\uc4f0\ub294 \ubc29\uc2dd\uc73c\ub85c \uc81c\ucd9c \ud30c\uc77c\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nsubmit_df = pd.read_csv(\"..\/input\/sample_submission.csv\")","0f33dbbe":"submit_df.info()","12c0b03b":"# \uc591\uc2dd\uc758 'price' \uc5f4\uc5d0 \uc608\uce21\uac12\uc744 \ub123\uc2b5\ub2c8\ub2e4.\nsubmit_df['price'] = sub_preds","7f08e94c":"# \uc798 \ub4e4\uc5b4\uac04\uac83 \uac19\uc2b5\ub2c8\ub2e4.\nsubmit_df.head()","738e4d31":"submit_df.tail()","3ed1d165":"submit_df.to_csv(\"suwon_study_v1.csv\", index=False)","f8ed3505":"RF, LGB : cv\ub97c \uc218\ud589\ud574 \ubcf8 \uacb0\uacfc \ucd5c\uc2e0 \uc5f0\ub3c4\ub9cc\uc744 \ud3ec\ud568\ud55c \uacbd\uc6b0\uac00 \uac00\uc7a5 \uc131\ub2a5\uc774 \uc88b\uc74c\uc73c\ub85c yr_latest\ub9cc \ub0a8\uae30\uace0 \ub2e4\ub978\ud2b9\uc11c\uc740 \uc81c\uac70\ud55c\ub2e4.","d9914394":"RF : \uc810\uc218 \ud558\ub77d\ud558\uc600\uc74c\uc73c\ub85c \ubbf8\uc801\uc6a9\n\nLGB : \uc810\uc218 \uc0c1\uc2b9\ud558\uc600\uc74c\uc73c\ub85c \uc801\uc6a9","206ed20a":"** model \ub9cc\ub4e4\uae30(RF \ubbf8\uc0ac\uc6a9) **","af246192":"* yr_built, yr_renovated\n\n\ucd5c\uc2e0 \uc815\ubcf4\ub9cc\uc774 \uac00\uaca9\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce60\uac83\uc774\ub77c \uc608\uc0c1\ub428\uc73c\ub85c \ub458\uc744 \uacb0\ud569\ud558\uc5ec \uc0c8\ub85c\uc6b4 \ud2b9\uc131 yr_latest\ub97c \ub9cc\ub4e0\ub2e4","559a2bb9":"**feature \uc120\ud0dd\ud558\uae30**\n\n\uc6b0\ub9ac\ub294 TestSet\uc758 price\ub97c \uc608\uce21\ud558\ub294 \uac83\uc774 \ubaa9\ud45c \uc785\ub2c8\ub2e4.\n\n\uc544\uc9c1\uc740 \ubaa8\ub4e0 \ud2b9\uc131\uc744 \uc801\uc6a9\ud558\uace0, \ucc28\ud6c4 \ucd5c\uc801\uc758 \uc870\ud569\uc744 \uac00\ub824\ub0b4\ub3c4\ub85d \ud569\ub2c8\ub2e4.","a95d2b29":"**\uc77c\uc790\ubcc4 \ubaa9\ud45c**\n\n\u3147 3\/14 : \uce90\uae00\ucf54\ub9ac\uc544 \ub300\ud68c \ucc38\uc11d, \uc81c\ucd9c\ud30c\uc77c \ud30c\uc77c \uc0dd\uc131 \ubc0f \uc5c5\ub85c\ub4dc [[Vesion 1, 3930108.622941]](https:\/\/www.kaggle.com\/wodlfrh\/suwon-study-kernal-v1?scriptVersionId=11423081)\n\n\u3147 3\/21 : Train Data\ub97c \uc774\uc6a9\ud558\uc5ec \uae30\ubcf8\ubaa8\ub378(randomforest \ub4f1)\ub85c \ud6c8\ub828, Test Data\ub85c \uc608\uce21 \ud6c4 \ub9ac\ub354\ubcf4\ub4dc \uc810\uc218\ub97c \ud655\uc778[[Version 3, 228428.43773]](https:\/\/www.kaggle.com\/wodlfrh\/suwon-study-kernal-v1?scriptVersionId=11748432)\n\n\u3147 3\/28 : \ubaa8\ub4e0 \uceec\ub7fc\uc5d0 \ub300\ud55c EDA \uc218\ud589[[version 5, 162797.68369]](https:\/\/www.kaggle.com\/wodlfrh\/suwon-study-kernal-v1?scriptVersionId=11985570)\n\n\u3147 4\/ 4 : \uceec\ub7fc\ubcc4 F.E \uc218\ud589\ud558\uace0 \uc810\uc218\ubcc0\ud654 \uad00\ucc30\ud558\uae30[[version 8, 135375.78092]](https:\/\/www.kaggle.com\/wodlfrh\/suwon-study-kernal-v1?scriptVersionId=12454442)\n\n\u3147 4\/11 : \uc2a4\ud130\ub514\uc5d0\uc11c \ub17c\uc758\ub41c F.E \uc218\ud589\ud558\uace0, \uc0ac\uc6a9\ud558\uace0\uc790 \ud558\ub294 \uc54c\uace0\ub9ac\uc998 \uc801\uc6a9\ud558\uae30[[version 12, 109163.13755]](https:\/\/www.kaggle.com\/wodlfrh\/suwon-study-kernal-v1?scriptVersionId=12698838)\n\n\u3147 4\/14 : RandomForest\uc5d0\uc11c \uc758\ubbf8\uc5c6\ub358 F.E\ub4e4\uc758 Lightgbm \uc5d0\uc11c\uc758 \uc601\ud5a5 \ubd84\uc11d[[version 19, 108372.07624]](https:\/\/www.kaggle.com\/wodlfrh\/suwon-study-kernal-v1?scriptVersionId=12891801)\n\n\u3147 4\/14(v2) : KFold random_state \ubbf8\uc9c0\uc815 \uc73c\ub85c \uc778\ud55c cv \uc810\uc218 \ubcf5\uad6c \ubd88\uac00... \ucd94\uc138\ub294 \uc720\ud6a8\ud558\ub098 \uc815\ud655\ud55c \uc810\uc218\ub294 \uc7ac\ud604 \ubd88\uac00, random_state=42 \uace0\uc815[[version 22, 109256.38594]](https:\/\/www.kaggle.com\/wodlfrh\/suwon-study-kernel?scriptVersionId=12908465)\n\n\u3147 4\/18 : \ud30c\ub77c\uba54\ud130 \uc870\uc815(\uc218\ub3d9), StratifiedKFold -> KFold\ub85c \ubcc0\uacbd, target\uac12 log \uc815\uaddc\ud654 \uc801\uc6a9[[version 28, 107248.66185]](https:\/\/www.kaggle.com\/wodlfrh\/suwon-study-kernel?scriptVersionId=13055617)\n\n\u3147 4\/20 : optuna \ud65c\uc6a9 \ud30c\ub77c\uba54\ud130 \ucd5c\uc801\ud654","b459049e":"* \ubc29\ub2f9 \ud3c9\uade0\uba74\uc801 (LGB : \uc704 room_sum \ubbf8\uc801\uc6a9\uc73c\ub85c \uc81c\uc678)","fff7d4eb":"15\ub144 \uba74\uc801\uacfc \ube44\uad50\ud558\uba74 \uacfc\uac70 \uba74\uc801\uc5d0 \uc774\uc0c1\uce58\uac00 \uc874\uc7ac \ud55c\ub2e4.\n\n\uc7ac\uac74\ucd95 \uc5ec\ubd80\uc640, \uc5bc\ub9cc\ud07c \uba74\uc801\uc774 \ubcc0\ud558\uc600\ub294\uc9c0\ub97c \uac00\uc9c0\uace0 \ud2b9\uc131\uc744 \ub9cc\ub4e4\uc5b4 \ubcfc \uc218 \uc788\uc744\uac83\uac19\ub2e4.","574e859a":"RF : \uc810\uc218 \ud5a5\uc0c1 \uc5c6\uc74c\n\nLGB : \uc810\uc218 \uc0c1\uc2b9\ud558\uc600\uc74c\uc73c\ub85c \uc801\uc6a9","3b21346e":"RF : lat, long \ud3c9\uade0\uc744 \ud3ec\ud568\ud558\uc5ec \uc804\uccb4 \ud2b9\uc131\uc744 \ubc18\uc601\ud55c cv\uc810\uc218\uac00 \uc804\ubcf4\ub2e4 \ub354 \uc548\uc88b\uc544\uc84c\ub2e4\n\uc6d0 \ub370\uc774\ud130\ub97c \uc81c\uc678\ud558\uace0 cv \ud574\ubcf4\uc790\n\nLGB : cv\uac00 \ub354 \uc88b\uc544\uc84c\ub2e4. RF\uc640\ub294 \ub2e4\ub978 \uacb0\uacfc\uc774\ub2e4.","25cd035c":"\uc880\ub354 \ud655\uc778\ud574 \ubcfc \ud544\uc694\uac00 \uc788\uc744\ub4ef \ud558\ub2e4.  \uc7ac\uac74\ucd95 \uc5f0\ub3c4\ub85c \uae08\uc561\ucc28\uac00 \uc788\ub2e4\uace0 \ubcf4\uae34 \uc5b4\ub835\ub2e4. \ub9ac\ubaa8\ub378\ub9c1\uc744 \ud558\uace0 \uc548\ud558\uace0\uc5d0 \uc758\ud55c \ucc28\uc774\ub3c4 \ubcf4\uc790","3cef45f4":"**\ub370\uc774\ud130 \ub458\ub7ec\ubcf4\uae30**","7c2ef47e":"** feature \ub458\ub7ec\ubcf4\uae30**","a3f9e07c":"**\ud30c\uc77c \uc81c\ucd9c\ud558\uae30**\n\n\uce90\uae00 \ucee4\ub110\uc5d0\uc11c\ub294 \uc81c\ucd9c\ud55c \ud30c\uc77c\uc744 \uc0dd\uc131\ub418\ub3c4\ub85d \ucee4\ub110\uc744 \ub9cc\ub4e4\uace0 commit \ud558\uba74 \uc81c\ucd9c \ubc84\ud2bc \ud074\ub9ad\uc73c\ub85c \uc81c\ucd9c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","ded124e9":"\uc6b0\ud3b8\ubcc0\ud638\uc5d0 \ub530\ub77c \uc9d1\uac12\ub4e4\uc758 \ucc28\uc774\uac00 \ud655\uc5f0\ud788 \ub4e4\uc5b4\ub09c\ub2e4. \uc9c0\uc5ed\ub9c8\ub2e4 \uac00\uaca9\ucc28\uac00 \uc788\ub2e4\ub294 \uc774\uc57c\uae30\ub2e4.","345099b8":"\ubc29\uc758 \uac2f\uc218\uc640 \uae08\uc561\uac04\uc5d0\ub294 \uc77c\uc815\ubd80\ubd84 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\uc74c\uc744 \ubcfc \uc218 \uc788\ub2e4.\n\n\ub2e4\ub9cc, 3,4,5,6\uac1c\uc758 \ubc29\uc744 \uac00\uc9c4\uacf3\uc5d0\uc11c \ub192\uc740\uac00\uaca9\ucabd\uc73c\ub85c\uc758 \uc774\uc0c1\uce58\uac00 \uc880\uc7ac\ud568\uc744 \ubcfc \uc218 \uc788\ub2e4.","e4602445":"* sqft_living : \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n* sqft_lot : \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)","403c083b":"**\uc218\uc6d0 \uc2a4\ud130\ub514 \ucc38\uace0\uc6a9 \ucee4\ub110 \uc785\ub2c8\ub2e4.**\n\n\uc2a4\ud130\ub514 \ubc29\ud5a5\uc5d0 \ub9de\ucd94\uc5b4 \ud55c\ub2e8\uacc4\uc529 \uc9c4\ud589 \ud560 \uc608\uc815\uc785\ub2c8\ub2e4.\n\n\ub9e4\uc8fc \ud55c\ub2e8\uacc4\uc529 \ucc9c\ucc9c\ud788 \uc9c4\ud589 \ub420 \uc608\uc815\uc774\uba70, \uc774\ud574\uc5d0 \ubaa9\uc801\uc744 \ub461\ub2c8\ub2e4.\n\n","b2051506":"**\ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30**","29b5a5d4":"\uc704 \uc0b0\uc810\ub3c4\ub97c \ubcf4\uba74 \uc9d1\uc744 \uad6c\ub9e4\ud55c \ub0a0\uacfc \uac00\uaca9\uac04\uc5d0\ub294 \ud070 \uad00\ub828\uc774 \uc5c6\ub294\uac83 \ucc98\ub7fc \ubcf4\uc785\ub2c8\ub2e4.","2e7a733d":"\uc9d1\uc758 \uce35\uc218\uac00 \uc758\uc678\ub85c \uad00\uacc4\uac00 \uc5c6\uc5b4 \ubcf4\uc778\ub2e4. ","56dcd466":"\ud55c\ub208\uc5d0 \ubcf4\uc544\ub3c4 yyyymmdd + T000000 \ud615\ud0dc\uc784\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nT000000\uc774 \ub2e4\ub978\uac12\uc744 \uac16\ub294\uc9c0 \ud655\uc778\ud574 \ubcfc \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4.","e6b6f914":"* bathrooms : \uce68\uc2e4 \uac1c\uc218 \ub2f9 \ud654\uc7a5\uc2e4\uc758 \uc218(\ud654\uc7a5\uc2e4\uc758 \uc218 \/ \uce68\uc2e4\uc758 \uc218 )","8321a8b7":"* sqft_above : \uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n\n* sqft_basement : \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)","697f4ab1":"* \ud2b9\uc131\uac04\uc758 \uc0c1\uad00\uc131","b3b50e47":"* grade : King County grading \uc2dc\uc2a4\ud15c \uae30\uc900\uc73c\ub85c \ub9e4\uae34 \uc9d1\uc758 \ub4f1\uae09","9ae165b9":"* \ubc29 \uac1c\uc218 \ud569\uce58\uae30","66268ec4":"* zipcode : \uc6b0\ud3b8\ubc88\ud638","79b8be8f":"* \uc5f0\ub3c4 \uc0ac\uc6a9","04a4d7d3":"* LightGBM \uc801\uc6a9(\uc0ac\uc6a9)","b2b8b2e0":"* sqft_living15 : 2015\ub144 \uae30\uc900 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n\n* sqft_lot15 : 2015\ub144 \uae30\uc900 \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)","ccd08c0d":"* bedrooms : \uce68\uc2e4\uc758 \uc218","08ae4a35":"\uc9c0\uc0c1\uba74\uc801\uc740 \uac00\uaca9\uacfc \uc0c1\uad00\uad00\uacc4\uac00 \ubcf4\uc774\uba70, \ud615\ud0dc\ub294 \uc704\uc5d0\uc11c \ud655\uc778\ud55c sqft_living\uacfc \uc720\uc0ac\ud558\ub2e4.\n\n\uc9c0\ud558\uba74\uc801\uc740 \uc0c1\ub300\uc801\uc73c\ub85c \uc0c1\uad00\uad00\uacc4\uac00 \uc57d\ud558\uba70, sqft_lot\uc640 \uc5ed\uc2dc \uc720\uc0ac\ud558\ub2e4. \ud2b9\ud788 0\uc5d0 \ubab0\ub9b0\uac70 \ubcf4\uba74 \uc544\ud30c\ud2b8 \ub77c\ub358\uac00 \uc9c0\ud558\ub97c \uc18c\uc720\ud560 \uc77c\uc774 \uc5c6\ub294 \uacf3\uc758 \ud2b9\uc131\uc744 \ubcf4\uc774\ub294 \uac83\uac19\ub2e4. lot\uc640 \ud568\uaed8 \ud558\uc5ec \uc544\ud30c\ud2b8 \ub4f1\uc758 \uacf5\uc6a9\uc8fc\ud0dd\uc744 \ud310\ubcc4\ud558\ub294 \ud2b9\uc131\uc744 \ub9cc\ub4e4\uc5b4 \ubcfc\ub9cc \ud558\ub2e4.","0a6fb818":"* \uacfc\ub3c4\ud55c \ud2b9\uc774\uac12 \uc81c\uac70\n\n\uc55e\uc758 EDA\uc5d0\uc11c \ubc1c\uacac\ub41c \uacfc\ub3c4\ud55c \uc774\uc0c1\uce58\ub294 \uc81c\uac70\ud574\ubcf4\uc790","8406d7a5":"* view : \uc9d1\uc774 \uc5bc\ub9c8\ub098 \uc88b\uc544 \ubcf4\uc774\ub294\uc9c0\uc758 \uc815\ub3c4","143d42b5":"\ud68c\uadc0\uc120\uc744 \uc911\uc2ec\uc73c\ub85c \ub370\uc774\ud130\uac00 \ubd84\ud3ec\ud568\uc744 \ubcfc \uc218 \uc788\ub2e4.\n\uba74\uc801\uc774 \ucee4\uc9c8\uc218\ub85d \uac00\uaca9\uc5d0 \ub300\ud55c \ubd84\uc0b0\uc774 \ucee4\uc9d0\uc73c\ub85c \uc774\uc5d0\ub300\ud55c \ud2b9\uc131 \ubcf4\uc815\uc774 \ud544\uc694\ud560 \uac83\uc73c\ub85c \ubcf4\uc778\ub2e4.","9f779555":"* yr_renovated : \uc9d1\uc744 \uc7ac\uac74\ucd95\ud55c \ub144\ub3c4","fbaa1b80":"\ud654\uc9d5\uc2e4 \uac2f\uc218\ub3c4 \uc5b4\ub290\uc815\ub3c4\ub294 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\ub2e4\uace0 \ubcfc \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0 \uc774\uc0c1\ud0a4\uac00 \uc874\uc7ac\ud558\uace0, \uc911\uc704\uac12\uc774 \uc5ed\uc804\ub418\ub294 \uacbd\uc6b0\ub3c4 \uc788\uc73c\uba70 7\uac1c \uad6c\uac04\uc5d0\uc11c\ub294 \ub370\uc774\ud130 \uc790\uccb4\uac00 \uac70\uc758 \uc5c6\ub2e4.\n\n\uace0\ub85c, \uc0ac\uc6a9\ud558\uace0\uc790 \ud55c\ub2e4\uba74 \ub9ce\uc740 \ubd80\ubd84\uc744 \uace0\ub824\ud574\uc57c \ud560 \uac83\uc73c\ub85c \ubcf4\uc778\ub2e4.","88dcd2ec":"**\uc81c\ucd9c \ud30c\uc77c \ub9cc\ub4e4\uae30**","44f09f72":"RF : \ub354 \uc548\uc88b\uc544\uc84c\ub2e4. \ubcf8 F.E\ub294 \ucde8\uc18c\ud568\uc774 \ud0c0\ub2f9\ud558\ub2e4\n\nLGB : \ud655\uc5f0\ud788 \uc548\uc88b\uc544\uc84c\ub2e4. \ub530\ub77c\uc11c, zipcode\ubcc4 lat, long \ud3c9\uade0\uc744 \ud3ec\ud568\ud558\uace0 \uae30\uc874 \uac12\ub4e4\uc740 \uc720\uc9c0\ud55c\ub2e4","67dd8d38":"\uc88b\uc544\ubcf4\uc774\ub294 \uc815\ub3c4\ub294 \ub2f9\uc5f0\ud788 \uac00\uaca9\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce68, \uadf8\ub7ec\ub098 \uc0dd\uac01\ubcf4\ub2e4 \uadf8 \ucc28\uc774\uac00 \uc801\uace0, 0\uc5d0\uc11c \uc0c1\ubc29\uc73c\ub85c \uc774\uc0c1\uce58\uac00 \ub9ce\uc74c","f7ba1fd6":"RF : \uc810\uc218 \uc0c1\uc2b9 \ud558\uc600\uc73c\ub098, version12 \ucee4\ub110\uc5d0\uc11c\ub294 \ud558\ub77d\ud558\uc600\uc5c8\uc74c...(\ucc28\ud6c4 \uc0ac\uc720 \ubd84\uc11d)\n\nLGB : \uc810\uc218 \uc0c1\uc2b9\ud558\uc600\uc74c\uc73c\ub85c \uc801\uc6a9","48c4b5d7":"* \uc0ac\uc6a9\ud560 \uc54c\uace0\ub9ac\uc998\uc758 \ucc28\uc774\uc5d0 \ub530\ub978 F.E \uc801\uc6a9 \ucc28\ubcc4\ud654 \ud544\uc694\uc131\n\nRandomForest\uc5d0\uc11c \ud6a8\uacfc\uac00 \uc5c6\ub358 F.E \ub4e4\uc774 \ub2e4\ub978 \uc54c\uace0\ub9ac\uc998(Lightgbm)\uc5d0\ub294 \ud6a8\uacfc\uac00 \uc788\ub294\uc9c0 \ud655\uc778\n\n-> \ud655\uc778 \ud574 \ubcf4\uc558\ub2e4. \uac01 \uc54c\uace0\ub9ac\uc998\uc5d0 \ub9de\ub294 F.E\uac00 \uc874\uc7ac\ud568\uc744 \ud655\uc778 \ud558\uc600\ub2e4.","c0624df2":"RF : \uc810\uc218 \uc0c1\uc2b9 \ud558\uc600\uc73c\ub098, version12 \ucee4\ub110\uc5d0\uc11c\ub294 \ud558\ub77d\ud558\uc600\uc5c8\uc74c...(\ucc28\ud6c4 \uc0ac\uc720 \ubd84\uc11d)\n\nLGB : \uc810\uc218 \ud558\ub77d\ud558\uc600\uc74c\uc73c\ub85c \ubbf8\uc801\uc6a9","2d27a08f":"RF, LGB : \ud6a8\uacfc\uac00 \uc5c6\ub2e4, \ud2b9\ud788 \ub2e8\uc21c \uc0b0\uc220\uc5f0\uc0b0\uc5d0 \ub300\ud558\uc5ec LGB\ub294 \uc810\uc218\uc758 \ubcc0\ud654\uac00 \uc804\ud600 \uc5c6\ub2e4. \uc774\ubbf8 \ub0b4\ubd80\uc801\uc73c\ub85c \uacc4\uc0b0 \uc644\ub8cc\ub418\uc5c8\ub2e4\ub294 \ub73b","78b54164":"RF, LGB : \ud6a8\uacfc\uac00 \uc5c6\uc5c8\ub2e4...","28271733":"RF : \uc810\uc218 \uc0c1\uc2b9 \ud558\uc600\uc73c\ub098, version12 \ucee4\ub110\uc5d0\uc11c\ub294 \ud558\ub77d\ud558\uc600\uc5c8\uc74c...(\ucc28\ud6c4 \uc0ac\uc720 \ubd84\uc11d)\n\nLGB : \uc810\uc218 \ud558\ub77d","831d4bba":"grade\ub294 \ud655\uc5f0\ud55c \ucc28\uc774\ub97c \ubcf4\uc778\ub2e4. \ubcc4\ub2e4\ub978 \ubb38\uc81c\uc5c6\uc774 feature \uc0ac\uc6a9\ud558\uba74 \ub420\ub4ef\ud558\ub2e4","1b3f36a3":"RF, LGB : \ud6a8\uacfc\uc5c6\uc74c","c8f1df22":"* \ucd94\uac00 \uc801\uc6a9\ud574\uc57c \ud560 \uc0ac\ud56d\n\nliving\uc758 \uacbd\uc6b0 \uba74\uc801\uc774 \ucee4\uc9c8\uc218\ub85d \ubd84\uc0b0\uc774 \uc99d\uac00\ud558\ub294 \uc810\uc5d0 \ub300\ud558\uc5ec \ubd84\uc0b0\uc744 \uc904\uc77c \uae30\ubc95 \ud559\uc2b5 \ubc0f \uc801\uc6a9 \ud544\uc694\n\n\uac01\uc885 \uba74\uc801\ub4e4\uc758 \uc870\ud569 \ubc29\ubc95 \uace0\ubbfc\n\n","5e19375a":"RF : \uc774\uac83\ub3c4 \ud6a8\uacfc\uac00 \uc5c6\ub2e4. \ubd84\uba85 \uc2a4\ud130\ub514 \ubc0f \ub2e4\ub978\uc0ac\ub78c\ub4e4 \ucee4\ub110\uc5d0\ub294 \ud6a8\uacfc\uac00 \uc788\uc5c8\uc73c\ub098, \ud6a8\uacfc\uac00 \uc556\ub294\uac74 \uc4f0\ub294 \uc54c\uace0\ub9ac\uc998\uc758 \ucc28\uc774\uc778\uac83\uc778\uac00?\n\nLGB : \ud6a8\uacfc\uac00 \uc5c6\uc5c8\ub2e4.","b48dd2ce":"* \uce35\ub2f9 \uba74\uc801","7ad66136":"* \ucd1d \uba74\uc801","eb85d1c9":"* optuna\ub85c \ud30c\ub77c\uba54\ud130 \ud29c\ub2dd","7959ec14":"**\ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d(EDA, exploratory data analysis)**\n\n1. ID : \uc9d1\uc744 \uad6c\ubd84\ud558\ub294 \ubc88\ud638\n2. date : \uc9d1\uc744 \uad6c\ub9e4\ud55c \ub0a0\uc9dc\n3. price : \uc9d1\uc758 \uac00\uaca9(Target variable)\n4. bedrooms : \uce68\uc2e4\uc758 \uc218\n5. bathrooms : \uce68\uc2e4 \uac1c\uc218 \ub2f9 \ud654\uc7a5\uc2e4\uc758 \uc218(\ud654\uc7a5\uc2e4\uc758 \uc218 \/ \uce68\uc2e4\uc758 \uc218 )\n6. sqft_living : \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n7. sqft_lot : \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n8. floors : \uc9d1\uc758 \uce35 \uc218\n9. waterfront : \uc9d1\uc758 \uc804\ubc29\uc5d0 \uac15\uc774 \ud750\ub974\ub294\uc9c0 \uc720\ubb34 (a.k.a. \ub9ac\ubc84\ubdf0)\n10. view : \uc9d1\uc774 \uc5bc\ub9c8\ub098 \uc88b\uc544 \ubcf4\uc774\ub294\uc9c0\uc758 \uc815\ub3c4\n11. condition : \uc9d1\uc758 \uc804\ubc18\uc801\uc778 \uc0c1\ud0dc\n12. grade : King County grading \uc2dc\uc2a4\ud15c \uae30\uc900\uc73c\ub85c \ub9e4\uae34 \uc9d1\uc758 \ub4f1\uae09\n13. sqft_above : \uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n14. sqft_basement : \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n15. yr_built : \uc9c0\uc5b4\uc9c4 \ub144\ub3c4\n16. yr_renovated : \uc9d1\uc744 \uc7ac\uac74\ucd95\ud55c \ub144\ub3c4\n17. zipcode : \uc6b0\ud3b8\ubc88\ud638\n18. lat : \uc704\ub3c4\n19. long : \uacbd\ub3c4\n20. sqft_living15 : 2015\ub144 \uae30\uc900 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n21. sqft_lot15 : 2015\ub144 \uae30\uc900 \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)","874205f4":"T000000\uc740 \uacf5\ud1b5\uac12\uc73c\ub85c \uc758\ubbf8 \uc5c6\uc74c\uc73c\ub85c \uc81c\uac70","ec5221d0":"* \uad6c\ub9e4\uc77c\uacfc \uac74\ucd95 \ub610\ub294 \uc7ac\uac74\ucd95 \uc5f0\ub3c4 \ucc28\uc774","b9f15f35":"** Feature Engineering **\n\n\ud2b9\uc131\ub4e4\uc744 \uadf8\ub300\ub85c \ubaa8\ub378\uc744 \ud559\uc2b5\ud560 \uc218 \uc788\uc9c0\ub9cc, \uc801\uc808\ud55c \ubcc0\ud658\uc73c\ub85c \uadf8 \uacb0\uacfc\ub97c \ud5a5\uc0c1\uc2dc\ucf1c\ubd05\ub2c8\ub2e4.\n\n\uac1c\ubcc4 \ud2b9\uc131\uc774 \ubcc0\ud654\ud560 \ub54c\ub9c8\ub2e4 \uc810\uc218\uac00 \ud5a5\uc0c1\ub418\ub294\uc9c0 \ud655\uc778\ud574 \ubcf4\uba74\uc11c \ud558\uba74 \ub354 \ud655\uc2e0\uc744 \uac00\uc9c8 \uc218 \uc788\uc744 \uac83\uc784\uc73c\ub85c \ub9e4 \uc218\ud589\ub9c8\ub2e4 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uace0 Cross-Validation(CV)\ub97c \ud655\uc778\ud558\uba70 \uc9c4\ud589 \ud558\uaca0\uc2b5\ub2c8\ub2e4.","b538ba5a":"\ubd80\uc9c0\uba74\uc801\uc774 \uc881\uc740\uacf3\uc774 \uc624\ud788\ub824 \ub354 \ube44\uc2fc \uacbd\uc6b0\uac00 \ub9ce\ub2e4. \n\uc120\ud615\uc801\uc778 \uad00\uacc4\ub294 \uc5c6\uc5b4\ubcf4\uc774\uba70, \uba74\uc801\uc774 \uc791\uc740 \uad6c\uac04\uc5d0\uc11c\uc758 \ud2b9\uc9d5\uc744 \ucd94\ucd9c\ud560 \ud544\uc694\uac00 \uc788\uc5b4\ubcf8\uc778\ub2e4.","e04ebcc1":"\uc0c1\uad00\uacc4\uc218\ub97c \ubcf4\uba74 \uc704\uc5d0\uc11c \uac1c\ubcc4 \ud2b9\uc131\uc744 \ud655\uc778\ud558\uba74\uc11c \uc608\uc0c1\ud588\ub358 \ubd80\ubd84\uacfc \uc77c\uce58\ud55c\ub2e4.\n\n\uadf8\ub7ec\ub098, \uc704\ub3c4, \uacbd\ub3c4, zip\ucf54\ub4dc\uc640 \uac19\uc774 \uc9d1\uac12\uacfc \ube44\ub840\uad00\uacc4\uac00 \ubcf4\uc774\uc9c0 \uc54a\ub294 \ud2b9\uc131\ub4e4\uc774 \ub0ae\uac8c \ub098\uc654\uace0,\n\nlot, basement\uc640 \uac19\uc774 0\uc5d0 \ubab0\ub824\uc788\ub294 \ud2b9\uc131\ub610\ud55c \ub0ae\uc740\uc810\uc740 \uace0\ub824\ud574 \ubcfc\ub9cc \ud558\ub2e4.\n\n\ucd94\ud6c4 feature engineering \uc2dc\uc5d0 \uc870\uc815\uc744 \ud1b5\ud574 \ud2b9\uc131\uc744 \uac15\ud654 \ud574\ubcf4\uc790","b2a12452":"\ubb3c\uac00\uac00 \ubcf4\uc774\ub294\uac00\ub294 \ubd84\uba85\ud788 \uc601\ud5a5\uc744 \ubbf8\uce58\uae30\ub294 \ud558\uc9c0\ub9cc. \ud2b9\uc774\uac12\uc774 \uc0c1\ub2f9\ud55c \ubd80\ubd84\uc744 \ucc28\uc9c0\ud558\uace0 \uc788\uc74c","df62613a":"* date : \uc9d1\uc744 \uad6c\ub9e4\ud55c \ub0a0\uc9dc ","dd921025":"* yr_built : \uc9c0\uc5b4\uc9c4 \ub144\ub3c4","bdb4dd60":"\uc9d1\uc758 \uc0c1\ud0dc \ub610\ud55c \uc601\ud5a5\uc744 \ubbf8\uce58\ub098 \uc0dd\uac01\ubcf4\ub2e4 \ucc28\uc774\uac00 \uc791\ub2e4.","7138c9d0":"RF : \uc870\uae08\uc774\ub77c\ub3c4 \uc810\uc218 \ud5a5\uc0c1 \uc788\uc5c8\uc74c\uc73c\ub85c\n\nLGB : \uc810\uc218 \ud558\ub77d\ud558\uc600\uc74c\uc73c\ub85c \ubbf8\uc801\uc6a9","50a63862":"\uc9c0\uc5ed\ubcc4\ub85c \uac00\uaca9\ucc28\ub294 \uc874\uc7ac\ud55c\ub2e4. \ud2b9\uc815 \uc704\uacbd\ub3c4\uc5d0\uc11c \uace0\uac00\ub4e4\uc774 \uc9d1\uc911\ub428\uc744 \uc54c \uc218 \uc788\ub2e4.","0cf61767":"* waterfront : \uc9d1\uc758 \uc804\ubc29\uc5d0 \uac15\uc774 \ud750\ub974\ub294\uc9c0 \uc720\ubb34 (a.k.a. \ub9ac\ubc84\ubdf0)","bbcdf36e":"* floors : \uc9d1\uc758 \uce35 \uc218","7e5ee8f1":"* condition : \uc9d1\uc758 \uc804\ubc18\uc801\uc778 \uc0c1\ud0dc","2a5a377f":"RF, LGB : \uc810\uc218 \ud5a5\uc0c1 \ud655\uc778\ud558\uc600\uc74c\uc73c\ub85c \uc801\uc6a9","91d92a69":"* lat, long, zipcode\n\nzipcode\uac00 \ud55c \uad6c\uc5ed\uc744 \ub098\ud0c0\ub0c4\uc73c\ub85c, \uad6c\uc5ed\ubcc4\ub85c lat\uc758 \ud3c9\uade0, long\uc758 \ud3c9\uade0\uc73c\ub85c \uc77c\uc6d0\ud654 \ud558\uba74 \uadf8 \uc9c0\uc5ed\uc744 \ub354 \uc798 \uc124\uba85\ud560 \uc218 \uc788\uc9c0 \uc54a\uc744\uae4c?","53a5d27b":"\ubcc4\ub2e4\ub978 \uc0c1\uad00\uad00\uacc4\ub97c \ubc1c\uacac\ud560 \uc218 \uc5c6\ub2e4.","03a7218d":"* lat : \uc704\ub3c4\n\n* long : \uacbd\ub3c4","1a6f11c4":"RF : \uc5f0\ub3c4\uc5d0 \uad00\ud55c \ucd94\uac00 \ud53c\uccd0 \uc801\uc6a9\uc774 \uc758\ubbf8\uac00 \uc5c6\uc74c\n\nLGB : \uc810\uc218 \ud5a5\uc0c1\uc774 \uc788\uc74c\uc73c\ub85c \uc801\uc6a9","f883af1f":"RF. LGB : \ud569\ud558\uc9c0 \uc54a\ub294\uac8c \uc124\uba85\ub825\uc774 \ub354 \uc88b\uc74c\uc73c\ub85c \ubbf8\uc801\uc6a9","a8589735":"* target \uac12 \ud3b8\ud5a5 \uc81c\uac70(log1p \uc801\uc6a9)","44e276e2":"** \uc2a4\ud130\ub514 F.E \ud1a0\ub860\ub0b4\uc6a9 \uc801\uc6a9 **","5c38292d":"> \uace0\ubbfc\ud574 \ubcf4\uc544\uc57c \ud560 \ubb38\uc81c\n\nlat,long \ud3c9\uade0\uc744 \ub9cc\ub4e6\uc5d0 \uc788\uc5b4\uc11c train\uacfc test\ub97c \ubd84\ub9ac \ud558\uc600\ub2e4. \uc11e\uc5b4\uc11c \ud558\uba74 \uc548\ub418\ub098...? validation \ub370\uc774\ud130\ub294 \uc11e\uc73c\uba74 \uc548\ub41c\ub2e4\uace0 \ud558\uae34 \ud558\uc9c0\ub9cc... \uc54c\uc544\ubd10\uc57c\ud560\ub4ef","2592c098":"\ub300\ubd80\ubd84\uc774 0\uc73c \uac12\uc744 \uac00\uc9c4\ub2e4. \uc7ac\uac74\ucd95 \ud55c \uacbd\uc6b0\ub9cc \uac12\uc774 \uc788\ub294\uac83\uc73c\ub85c \ubcf4\uc778\ub2e4.\n\n\uc7ac\uac74\ucd95 \ud55c\uacbd\uc6b0\ub9cc \uae30\uc900\uc73c\ub85c \uadf8\ub798\ud504\ub97c \uadf8\ub824\ubcf4\uc790"}}