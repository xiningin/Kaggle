{"cell_type":{"4ef146c8":"code","187c881a":"code","195752dd":"code","fbbb11d0":"code","954acbaf":"code","8b19408c":"code","f0c67ceb":"code","67c6adb8":"code","38d1d915":"code","50030cf8":"code","ae2c117e":"code","6982eef5":"code","e4641438":"code","4c2402af":"code","82db2b52":"code","2e9112f3":"code","47a38f95":"code","14c1f0c2":"code","b3532828":"code","36552b06":"code","849a449b":"code","617b84b4":"code","48cc6180":"code","ea96b5da":"code","3fcb09a3":"code","32667f9d":"code","4fe48461":"code","02f8e2f5":"code","578f768d":"code","553789de":"code","a8c2ba06":"code","642c8e7d":"code","2c729f7d":"code","f5c281cd":"code","6c5fc1ae":"code","60f9dd8d":"code","591cdc1c":"code","91252e75":"code","4d4071d6":"code","74b5c550":"code","38a79f93":"code","94a5022e":"code","58250c61":"code","1c1d5e02":"code","3b467eca":"code","72a6878d":"code","f0f86c55":"code","ebb1c66c":"code","8aba18e1":"code","e5945e20":"code","b4539c2a":"code","ff5eccb7":"code","b6efc821":"code","0d47964e":"code","20c52afd":"code","a2212316":"markdown","6feee193":"markdown","2c9e83e4":"markdown","632bf388":"markdown","e601256c":"markdown","970e9d90":"markdown","936caed0":"markdown"},"source":{"4ef146c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","187c881a":"#importing pandas,numpy,matplotlib etc\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","195752dd":"#importing data set\ntrain_df = pd.read_csv(r\"..\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(r\"..\/input\/titanic\/test.csv\")","fbbb11d0":"#shape of train data set\ntrain_df.shape","954acbaf":"#shape of test data set\ntest_df.shape","8b19408c":"#we can see there some null values for Age,Cabin,Embarked in training data set\ntrain_df.info()","f0c67ceb":"#we can see there some null values for Age,Fare,Cabin in test data set\ntest_df.info()","67c6adb8":"#count of null values in train_df\npd.isnull(train_df).sum()","38d1d915":"#count of null values in train_df\npd.isnull(test_df).sum()","50030cf8":"#selecting rows which has any of the columns as null values from train data set\ntrain_df[train_df.isnull().any(axis =\"columns\")]","ae2c117e":"#selecting sample 5 rows from train_df\ntrain_df.sample(n=5)","6982eef5":"train_df[\"Survived\"].value_counts()","e4641438":"#Percentage & Values together of Survived\/Not Survived based on train data frame using matplotlib using style as \"ggplot\"\nsurvivalrates = train_df[\"Survived\"].value_counts().tolist()\nplt.figure(figsize=(6,6))\nsns.set()\nplt.pie(survivalrates,\n        labels = ['Not Survived','Srvived'],\n        autopct=lambda p : '{:.2f}%  ({:,.0f})'.format(p,p * sum(survivalrates)\/100))","4c2402af":"#Survival Distribution by Pclass using different ploting technique\ntrain_df_grouped = train_df.groupby(by=[\"Pclass\",\"Survived\"])\ntrain_df_grouped_by_size = train_df_grouped.size()\ntrain_df_grouped_by_size","82db2b52":"#Now lets visualize the above data set using matplotlib pie chart\nsns.set()\ntrain_df_grouped_by_size.plot(kind=\"pie\",\n                              autopct='%.2f',\n                              figsize=(6,6),\n                              title=\"Survival Distribution by Pclass\")","2e9112f3":"#installing pandas bokeh. Its supported on python 3.5 and above\n!pip install pandas-bokeh","47a38f95":"#importing pandas bokeh\nimport pandas_bokeh\npandas_bokeh.output_notebook()","14c1f0c2":"#Plotting the same data using plot_bokeh\ntrain_df_grouped_by_size.plot_bokeh(kind=\"pie\",\n                                    title=\"Survival Distribution by Pclass\")","b3532828":"#You can see survival rate in \"Pclass = 3\" is very low, So \"Pclass\" is important feature to identify the survival rate\n#Survival rate is highest in Pclass = 1 i.e Upper Class \npd.crosstab(train_df[\"Pclass\"],train_df[\"Survived\"]).plot.bar(figsize=(12,12),\n                                                              title=\"Survival Rate by Pclass\",\n                                                              color='gy')","36552b06":"#Survival rate based on \"SibSp\".\npd.crosstab(train_df[\"SibSp\"],train_df[\"Survived\"]).plot.bar(figsize=(12,12),\n                                                             title=\"Survival Rate by SibSp\",\n                                                             color = [\"gold\",\"firebrick\"])","849a449b":"#Survival rate based on \"Parch\".We can see survival rate is lower in case of Parch = 0\npd.crosstab(train_df[\"Parch\"],train_df[\"Survived\"]).plot.bar(figsize=(12,12),\n                                                             title=\"Survival Rate by Parch\",\n                                                             color='mc')","617b84b4":"train_df[\"Title\"] = train_df[\"Name\"].str.split(\",\").str.get(1).str.split(\".\").str.get(0).str.strip()\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Dr\",\"Rev\",\"Col\",\"Mlle\",\"Major\",\"Ms\",\"the Countess\",\"Sir\",\"Jonkheer\",\"Capt\",\"Lady\",\"Mme\",\"Don\"],\n                         \"Other\")\ntest_df[\"Title\"] = test_df[\"Name\"].str.split(\",\").str.get(1).str.split(\".\").str.get(0).str.strip()\ntest_df[\"Title\"] = test_df[\"Title\"].replace([\"Dr\",\"Rev\",\"Col\",\"Mlle\",\"Major\",\"Ms\",\"the Countess\",\"Sir\",\"Jonkheer\",\"Capt\",\"Lady\",\"Mme\",\"Don\",\"Dona\"],\n                         \"Other\")","48cc6180":"#Survival rate based on Title column i.e we created in previous step\npd.crosstab(train_df[\"Title\"],train_df[\"Survived\"]).plot.bar(figsize=(12,12),\n                                                             title=\"Survival Rate by Title\",\n                                                             color = 'gb')","ea96b5da":"#You can see survival rate is higher in case of Southampton port\npd.crosstab(train_df[\"Embarked\"],train_df[\"Survived\"]).plot.bar(figsize=(12,12),\n                                                                title=\"Survival Rate by Embarked\",\n                                                                color=[\"green\",\"yellowgreen\"])","3fcb09a3":"#Lets check the data where Embarked is null from training dataset.We can see survived=1 in both the rows,so we will update Embarked as 'S' since survival rate is higher\ntrain_df[train_df[\"Embarked\"].isnull()]","32667f9d":"#Filing Null Values for Embarked in train_df data set since survival rate is higher in case Embarked = 'S'\ntrain_df[\"Embarked\"].fillna(\"S\",inplace = True)\ntrain_df[\"Embarked\"].unique()","4fe48461":"#Now Lets fill the Cabin value as first letter(str[0]) from Cabin value and fill NULL values with \"U\" for Cabin feature\ntrain_df[\"Cabin\"] = train_df[\"Cabin\"].str[0]\ntest_df[\"Cabin\"] = test_df[\"Cabin\"].str[0]\ntrain_df[\"Cabin\"].fillna(\"U\",inplace=True)\ntest_df[\"Cabin\"].fillna(\"U\",inplace=True)","02f8e2f5":"#Lets visualize the survival rate by Cabin fetaure from tarin data set\npd.crosstab(train_df[\"Cabin\"],train_df[\"Survived\"]).plot.bar(figsize=(12,12),\n                                                             title=\"Survival Rate by Cabin\")","578f768d":"#Mean age by each class\ntrain_df.groupby([\"Pclass\"]).mean()[\"Age\"].plot.bar(figsize=(6,6),title=\"Mean Age by Pclass\",color=[\"lightblue\"])","553789de":"#age distribution by Survival rate\nsns.kdeplot(train_df[train_df[\"Survived\"] == 1][\"Age\"],label='Survived',shade = True);\nsns.kdeplot(train_df[train_df[\"Survived\"] == 0][\"Age\"],label='Not Survived',shade = True);\nplt.show()","a8c2ba06":"#Lets see mean of 'Fare' by Survived & Sex\ntrain_df.groupby([\"Survived\",\"Sex\"]).mean()[\"Fare\"].plot.bar(figsize=(6,6),\n                                                       title=\"Mean Fare by Survived & Sex\",color = [\"seagreen\"])","642c8e7d":"#You can see sum of fare is higher PClass = 1\nplt.figure(figsize=(12,12))\nsns.barplot(x='Pclass',y='Fare',data=train_df,estimator=sum,palette=\"husl\",capsize=.2)","2c729f7d":"#Fare distribution by Pclass & Embarked\nplt.figure(figsize=(12,12))\nsns.violinplot(x='Pclass',\n               y='Fare',\n               data=train_df,\n               hue='Embarked')","f5c281cd":"#Fare distribution by Pclass & Sex\nplt.figure(figsize=(12,12))\nsns.boxplot(x='Pclass',\n            y='Fare',\n            data=train_df,\n            hue='Sex')","6c5fc1ae":"train_df.plot_bokeh.scatter(x=\"Fare\",\n                            y=\"Pclass\",\n                            category=\"Sex\",\n                            title=\"Fare Distribution by Sex using Scatter Plot\")","60f9dd8d":"#Lets create a grid plot using scatter plot and plot-bokeh table from Dataframe\n#Create Bokeh-Table with DataFrame\nfrom bokeh.models.widgets import DataTable, TableColumn\nfrom bokeh.models import ColumnDataSource\n\ntrain_df_sample_table = DataTable(\n    columns=[TableColumn(field=Ci, title=Ci) for Ci in train_df.columns],\n    source=ColumnDataSource(train_df),\n    height=300,\n)\n\n#create the scatter plot\ntrain_df_scatter = train_df.plot_bokeh.scatter(x=\"Fare\",\n                                               y=\"Pclass\",\n                                               category=\"Sex\",\n                                               title=\"Titanic DataSet Visualization\",\n                                               show_figure=False)\n\n# Combine Table and Scatterplot via grid layout:\npandas_bokeh.plot_grid([[train_df_sample_table, train_df_scatter]], plot_width=400, plot_height=350)\n\n\n","591cdc1c":"#Lets replace Sex fetaue as below for train and test data set\ntrain_df[\"Sex\"].replace({\"male\" : 1, \"female\" :0},inplace=True)\ntest_df[\"Sex\"].replace({\"male\" : 1, \"female\" :0},inplace=True)","91252e75":"#Lets create family column by combining \"SibSp\" & \"Parch\" & assign family column as 4 as below\ntrain_df[\"Family\"] = train_df[\"SibSp\"] + train_df[\"Parch\"]\ntrain_df.loc[train_df[\"Family\"] > 3,\"Family\"] = 4\ntest_df[\"Family\"] = test_df[\"SibSp\"] + test_df[\"Parch\"]\ntest_df.loc[test_df[\"Family\"] > 3,\"Family\"] = 4","4d4071d6":"#Creating category columns for 'Embarked','Cabin','Title','Family','Pclass' for training data set\ntrain_df_fam_Pclass = train_df.loc[:,['Embarked','Title','Family','Pclass']]\ntrain_df_fam_Pclass_dummy = pd.get_dummies(train_df_fam_Pclass.astype('str'))\ntrain_df_age_fare_sex = train_df.loc[:,['Sex','Age','Fare']]","74b5c550":"#Creating train and test data set from training data set by splitting the input and output\nx_train = pd.concat([train_df_age_fare_sex,train_df_fam_Pclass_dummy],axis=\"columns\")\ny_train = train_df.loc[:,\"Survived\"]","38a79f93":"x_train.info()","94a5022e":"#Lets update null values with mean value for male and female respectively\ntrain_male_average_age = x_train[x_train[\"Sex\"] == 1][\"Age\"].mean()\ntrain_female_average_age = x_train[x_train[\"Sex\"] == 0][\"Age\"].mean()\nx_train.loc[x_train[\"Age\"].isnull() & x_train[\"Sex\"] == 1,\"Age\"] = train_male_average_age\nx_train.loc[x_train[\"Age\"].isnull(),\"Age\"] = train_female_average_age","58250c61":"#Now lets create co-relation matrix for train data set\nx_train_corr = x_train.corr(method='pearson')\nplt.figure(figsize = (15,15))\nsns.heatmap(x_train_corr, xticklabels=x_train_corr.columns,yticklabels=x_train_corr.columns,cmap = \"coolwarm_r\",annot=True,annot_kws = {'size': 6})\nplt.title(\"Correlation\")\nplt.show()","1c1d5e02":"#lets see the skewness of the data\nx_train.skew()","3b467eca":"#Lets fill the missing values for test data set for Age column\ntest_male_average_age = test_df[test_df[\"Sex\"] == 1][\"Age\"].mean()\ntest_female_average_age = test_df[test_df[\"Sex\"] == 0][\"Age\"].mean()\ntest_df.loc[test_df[\"Age\"].isnull() & test_df[\"Sex\"] == 1,\"Age\"] = test_male_average_age\ntest_df.loc[test_df[\"Age\"].isnull(),\"Age\"] = test_female_average_age","72a6878d":"#Lets fill null value for Fare column by taking mean value of Fare for Pclass = 3\ntest_df[test_df[\"Fare\"].isnull()]","f0f86c55":"#Lets take the mean fare for pclass=3 and apply for null value for fare\ntest_fare_pclass3_mean = test_df.loc[test_df[\"Pclass\"] == 3,\"Fare\"].mean()\ntest_df.loc[test_df[\"Fare\"].isnull(),\"Fare\"] = test_fare_pclass3_mean","ebb1c66c":"#Lets create family column by combining \"SibSp\" & \"Parch\" for test data set\ntest_df[\"Family\"] = test_df[\"SibSp\"] + test_df[\"Parch\"]\ntest_df.loc[test_df[\"Family\"] > 3,\"Family\"] = 4\ntest_df_fam_Pclass = test_df.loc[:,['Embarked','Title','Family','Pclass']]\ntest_df_fam_Pclass_dummy = pd.get_dummies(test_df_fam_Pclass.astype('str'))\ntest_df_age_fare_sex = test_df.loc[:,['PassengerId','Sex','Age','Fare']]","8aba18e1":"x_test = pd.concat([test_df_age_fare_sex,test_df_fam_Pclass_dummy],axis=\"columns\")","e5945e20":"x_test.info()","b4539c2a":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","ff5eccb7":"# prepare models\nmodels = []\nmodels.append(('LR', LogisticRegression(solver='liblinear')))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC(gamma='auto')))\n# load dataset into variables\nX = x_train.values\nY = y_train.values\n# evaluate each model in turn\nresults = []\nnames = []\nscoring = 'accuracy'\nfor name, model in models:\n    kfold = KFold(n_splits=7)\n    cv_results = cross_val_score(model, X, Y, cv=kfold, scoring=scoring)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)\n# boxplot algorithm comparison\nfig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()    ","b6efc821":"#Lets put this data set into XGBClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nxgbc = XGBClassifier(max_depth = 4)\ntest_size = 0.33\nseed = 123\nX_train, X_test, Y_train, Y_test = train_test_split(x_train, y_train, test_size = test_size, random_state = seed)\nxgbc.fit(X_train, Y_train)\nY_pred = xgbc.predict(X_test)\n\nxgbc_train_acc = round(xgbc.score(X_train, Y_train) * 100, 2)\nprint('Training Accuracy: ', xgbc_train_acc)\nxgbc_test_acc = round(xgbc.score(X_test, Y_test) * 100, 2)\nprint('Testing Accuracy: ', xgbc_test_acc)","0d47964e":"x_test['Survived'] = xgbc.predict(x_test.drop(['PassengerId'], axis = 1))","20c52afd":"x_test[['PassengerId', 'Survived']].to_csv('submission.csv', index = False)","a2212316":"In this notebook, We will try identify survival rate based on certain feature of titanic data set. Below are the some feature description.\n\npclass: A proxy for socio-economic status (SES)\n1st = Upper\n2nd = Middle\n3rd = Lower\n\nage: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\nsibsp: The dataset defines family relations in this way...\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\nparch: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.\n","6feee193":"Now,lets create s scatter plot using bokeh plot","2c9e83e4":"Now,lets create a new **title** column from **name** column for both train and test dataset \n","632bf388":"Now lets apply this train data set to the classification models and try to find out the best accuracy score","e601256c":"We can see there are still some null values for age column for train data set.Lets try to fillin null values for age column","970e9d90":"You can the survival rate is higher for passengers who boarded from port Southampton.Lets try to fill in the missing value for\n\"Embarked\"","936caed0":"Now lets see distribution of Survived\/Not Survived from our trainging dataset.\n"}}