{"cell_type":{"50006521":"code","1fce5572":"code","2d3d99f7":"code","f403fbfb":"code","edbeecf5":"code","1b5b5459":"code","01283b72":"code","b0c51e29":"code","f2427ec7":"code","97a615e3":"code","01d109e5":"code","feb1c46e":"code","32332511":"code","12c3f0b6":"code","9a786065":"code","53cd23b2":"code","b690c762":"code","e5b65fc9":"code","96d3eac7":"code","45c23085":"code","5b6d3d4e":"code","3bc3417a":"code","407e50d8":"code","9606a5fc":"code","de187050":"code","5f7f5987":"code","979d2283":"code","99cfb9b6":"code","cf2efa71":"code","5bedbca2":"code","c4aa5a00":"code","9403a31a":"code","bba61bf5":"code","01b5480b":"code","6555c3ca":"code","3a2cd7ea":"code","add10f7c":"code","1c211471":"code","87cfcd9b":"code","a3bf3705":"code","031a9144":"code","63ceeb12":"code","b3e58d7c":"code","e84cc923":"markdown","c166e48a":"markdown","6fe6e164":"markdown","850b7af4":"markdown","aeccd270":"markdown","bcf4ffc0":"markdown","f6bf78ad":"markdown"},"source":{"50006521":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1fce5572":"df = pd.read_csv(\"\/kaggle\/input\/real-or-fake-fake-jobposting-prediction\/fake_job_postings.csv\")","2d3d99f7":"print(df.shape)\nprint(df[df[\"fraudulent\"]==1].shape)","f403fbfb":"import nltk\nimport re\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer","edbeecf5":"import tensorflow as tf\nfrom tensorflow.keras.layers import Embedding\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import one_hot\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Bidirectional\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras import Model\nfrom tensorflow.keras import Input\nfrom tensorflow.keras.layers import concatenate\nfrom tensorflow.keras.layers import AveragePooling1D\nfrom tensorflow.keras.layers import Conv1D\nfrom tensorflow.keras.layers import MaxPooling1D\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import BatchNormalization\ntf.__version__","1b5b5459":"from sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom tensorflow.keras.layers import GlobalAveragePooling1D","01283b72":"df_ = df[[\"company_profile\",\"description\",\"requirements\",\"benefits\",\"fraudulent\"]]\ndf_ = df_.dropna(axis = 0, how = \"all\")\nprint(df_.shape)\nprint(df_[df_[\"fraudulent\"] == 1].shape)\ndf_[\"joinAll\"] = df_.apply(lambda x: \"\".join([str(x[\"company_profile\"]),str(x[\"description\"]),str(x[\"requirements\"]),str(x[\"benefits\"])]),axis = 1)\nprint(df_[\"joinAll\"].head)","b0c51e29":"X = df_.drop(\"fraudulent\",axis = 1)\ny = df_[\"fraudulent\"]\nmessage = X.copy()\nmessage.reset_index(inplace=True)\nps = PorterStemmer()\nhandledText = []\nfor i in range(0, len(message)):\n    review = re.sub('[^a-zA-Z]', ' ', message[\"joinAll\"][i])\n    review = review.lower()\n    review = review.split()\n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    handledText.append(review)\n    if i % 1000 == 0:\n        print(i)\nX['JoinText'] = handledText","f2427ec7":"df_2 = pd.concat([X,y],axis=1)","97a615e3":"test_proportion = 0.25\nX_train, X_test, y_train, y_test = train_test_split(df_2['JoinText'], np.array(df_2['fraudulent']), test_size=test_proportion)","01d109e5":"X_train = pd.DataFrame(X_train).reset_index()\ny_train = pd.DataFrame(y_train, columns = [\"fraudulent\"]).reset_index()\ndf_train = pd.concat([X_train, y_train], axis = 1)\nfake = df_train[df_train[\"fraudulent\"] == 1]\nreal = df_train[df_train[\"fraudulent\"] == 0]\nprint(real.shape, fake.shape)","feb1c46e":"fake = fake.sample(real.shape[0],replace = True) # oversample: let fake has same shape with real postings\nprint(fake.shape)","32332511":"df_balance_train = fake.append(real)\nprint(df_balance_train.head)","12c3f0b6":"X_train = df_balance_train[\"JoinText\"]\ny_train = np.array(df_balance_train[\"fraudulent\"])","9a786065":"#length for padding\nsent_length = 40","53cd23b2":"# tokenization\ntokenizer=Tokenizer()\ntokenizer.fit_on_texts(handledText)\nvocab=tokenizer.word_index\nx_train_word_ids=tokenizer.texts_to_sequences(X_train) \nx_test_word_ids = tokenizer.texts_to_sequences(X_test)\n#sent_length = sum(len(x_train_word_ids[i]) for i in range(len(x_train_word_ids)))\/len(x_train_word_ids)\n#print(sent_length)\n# \u6bcf\u6761\u6837\u672c\u957f\u5ea6\u4e0d\u552f\u4e00\uff0c\u5c06\u6bcf\u6761\u6837\u672c\u7684\u957f\u5ea6\u8bbe\u7f6e\u4e00\u4e2a\u56fa\u5b9a\u503c\nx_train_padded_seqs=pad_sequences(x_train_word_ids,maxlen=sent_length) #\u5c06\u8d85\u8fc7\u56fa\u5b9a\u503c\u7684\u90e8\u5206\u622a\u6389\uff0c\u4e0d\u8db3\u7684\u5728\u6700\u524d\u9762\u75280\u586b\u5145\nx_test_padded_seqs=pad_sequences(x_test_word_ids, maxlen=sent_length)","b690c762":"print(x_train_padded_seqs[1])","e5b65fc9":"embedding_vector_features=300\nmain_input = Input(shape=(sent_length,), dtype='int32')\n# \u8bcd\u5d4c\u5165\uff08\u4f7f\u7528\u9884\u8bad\u7ec3\u7684\u8bcd\u5411\u91cf\uff09\nembedder = Embedding(len(vocab)+1,embedding_vector_features,input_length=sent_length)\nembed = embedder(main_input)\n\navg_pooling = GlobalAveragePooling1D()(embed) # not good\navg_pooling = Dropout(0.7)(avg_pooling)\n\n# \u5408\u5e76\u4e24\u4e2a\u4e2a\u6a21\u578b\u7684\u8f93\u51fa\u5411\u91cf\n# lstmncnn = concatenate([lstm, cnn,avg_pooling], axis=-1)\nflat = Flatten()(avg_pooling)\ndrop = Dropout(0.2)(flat)\nmain_output = Dense(1, activation='sigmoid')(drop)\nmodel = Model(inputs=main_input, outputs=main_output)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(model.summary())","96d3eac7":"history = model.fit(x_train_padded_seqs,y_train,validation_data=(x_test_padded_seqs,y_test),epochs=12,batch_size=800)","45c23085":"accuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(8, 5))\nplt.plot(accuracy, label='accuracy')#accuracy:\u8bad\u7ec3\u96c6\u51c6\u786e\u7387\nplt.plot(val_accuracy, label='val_accuracy')#val_accruacy:\u6d4b\u8bd5\u96c6\u51c6\u786e\u7387\nplt.plot(loss, label='loss')#\u8bad\u7ec3\u96c6\u635f\u5931\u503c\nplt.plot(val_loss, label='val_loss')#val_loss:\u6d4b\u8bd5\u96c6\u635f\u5931\u503c\nplt.grid(True)\nplt.legend()\nplt.show()#train loss \u4e0d\u65ad\u4e0b\u964d\uff0ctest loss\u4e0d\u65ad\u4e0b\u964d\uff0c\u8bf4\u660e\u7f51\u7edc\u4ecd\u5728\u5b66\u4e60;\uff08\u6700\u597d\u7684\uff09","5b6d3d4e":"avg_p_pred=model.predict(x_test_padded_seqs)\navg_p_pred = np.where(avg_p_pred<0.5,0,1)\n#from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test,avg_p_pred))","3bc3417a":"#from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test,avg_p_pred))","407e50d8":"#from sklearn.metrics import classification_report\nprint(classification_report(y_test,avg_p_pred))","9606a5fc":"from tensorflow.keras.utils import plot_model\nplot_model(model,show_shapes=True,show_layer_names=False)","de187050":"beta = 1.5\nprecision = metrics.precision_score(y_test,avg_p_pred)\nrecall = metrics.recall_score(y_test,avg_p_pred)\n#print(precision)\n#print(recall)\nf1_5score = (1+beta**2)*precision*recall \/ (beta**2*precision+recall)\nprint(f1_5score)","5f7f5987":"embedding_vector_features=300\nmodel1=Sequential()\nmodel1.add(Embedding(len(vocab)+1,embedding_vector_features,input_length=sent_length))\n# model1.add(Bidirectional(LSTM(100))) ##Just add bidirectional!!, except it would just behave as normal LSTM Model\nmodel1.add(LSTM(100))\nmodel1.add(Dropout(0.3))\nmodel1.add(Dense(1,activation='sigmoid'))\nmodel1.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nprint(model1.summary())","979d2283":"history = model1.fit(x_train_padded_seqs,y_train,validation_data=(x_test_padded_seqs,y_test),epochs=12,batch_size=800)","99cfb9b6":"accuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(8, 5))\nplt.plot(accuracy, label='accuracy')#accuracy:\u8bad\u7ec3\u96c6\u51c6\u786e\u7387\nplt.plot(val_accuracy, label='val_accuracy')#val_accruacy:\u6d4b\u8bd5\u96c6\u51c6\u786e\u7387\nplt.plot(loss, label='loss')#\u8bad\u7ec3\u96c6\u635f\u5931\u503c\nplt.plot(val_loss, label='val_loss')#val_loss:\u6d4b\u8bd5\u96c6\u635f\u5931\u503c\nplt.grid(True)\nplt.legend()\nplt.show()#train loss \u4e0d\u65ad\u4e0b\u964d\uff0ctest loss\u4e0d\u65ad\u4e0b\u964d\uff0c\u8bf4\u660e\u7f51\u7edc\u4ecd\u5728\u5b66\u4e60;\uff08\u6700\u597d\u7684\uff09","cf2efa71":"plot_model(model1,show_shapes=True,show_layer_names=False)","5bedbca2":"lstm_pred=model1.predict(x_test_padded_seqs)\nlstm_pred = np.where(lstm_pred<0.5,0,1)\nprint(confusion_matrix(y_test,lstm_pred))\nprint(accuracy_score(y_test,lstm_pred))\nprint(classification_report(y_test,lstm_pred))","c4aa5a00":"beta = 1.5\nprecision = metrics.precision_score(y_test,lstm_pred)\nrecall = metrics.recall_score(y_test,lstm_pred)\nf1_5score = (1+beta**2)*precision*recall \/ (beta**2*precision+recall)\nprint(f1_5score)","9403a31a":"embedding_vector_features=300\nmain_input = Input(shape=(sent_length,), dtype='int32')\n# \u8bcd\u5d4c\u5165\uff08\u4f7f\u7528\u9884\u8bad\u7ec3\u7684\u8bcd\u5411\u91cf\uff09\nembedder = Embedding(len(vocab)+1,embedding_vector_features,input_length=sent_length)\nembed = embedder(main_input)\n# LSTM\nlstm = LSTM(100)(embed)\nlstm = Dropout(0.3)(lstm)\n# CNN\ncnn = Conv1D(256, 5, padding='same')(embed)\ncnn = MaxPooling1D(3, 3, padding='same')(cnn)\ncnn = Conv1D(128, 5, padding='same')(cnn)\ncnn = MaxPooling1D(3, 3, padding='same')(cnn)\ncnn = Conv1D(64, 3, padding='same')(cnn)\ncnn = Flatten()(cnn)\ncnn = Dropout(0.1)(cnn)\ncnn = BatchNormalization()(cnn)\ncnn = Dense(100, activation='relu')(cnn)\ncnn = Dropout(0.1)(cnn)\n# AVG POOLING\n# avg_pooling = Dense(100, activation='relu')(cnn) # not good\n# \u5408\u5e76\u4e24\u4e2a\u4e2a\u6a21\u578b\u7684\u8f93\u51fa\u5411\u91cf\nlstmncnn = concatenate([lstm, cnn], axis=-1)\nflat = Flatten()(lstmncnn)\ndrop = Dropout(0.2)(flat)\nmain_output = Dense(1, activation='sigmoid')(drop)\nmodel2 = Model(inputs=main_input, outputs=main_output)\nmodel2.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(model2.summary())","bba61bf5":"history = model2.fit(x_train_padded_seqs,y_train,validation_data=(x_test_padded_seqs,y_test),epochs=12,batch_size=800)","01b5480b":"accuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(8, 5))\nplt.plot(accuracy, label='accuracy')\nplt.plot(val_accuracy, label='val_accuracy')\nplt.plot(loss, label='loss')\nplt.plot(val_loss, label='val_loss')\nplt.grid(True)\nplt.legend()\nplt.show()","6555c3ca":"plot_model(model2,show_shapes=True,show_layer_names=False)","3a2cd7ea":"cnn_lstm_pred=model2.predict(x_test_padded_seqs)\ncnn_lstm_pred = np.where(cnn_lstm_pred<0.5,0,1)\nprint(confusion_matrix(y_test,cnn_lstm_pred))\nprint(accuracy_score(y_test,cnn_lstm_pred))\nprint(classification_report(y_test,cnn_lstm_pred))","add10f7c":"beta = 1.5\nprecision = metrics.precision_score(y_test,cnn_lstm_pred)\nrecall = metrics.recall_score(y_test,cnn_lstm_pred)\nf1_5score = (1+beta**2)*precision*recall \/ (beta**2*precision+recall)\nprint(f1_5score)","1c211471":"embedding_vector_features=300\nmain_input = Input(shape=(sent_length,), dtype='int32')\n# \u8bcd\u5d4c\u5165\uff08\u4f7f\u7528\u9884\u8bad\u7ec3\u7684\u8bcd\u5411\u91cf\uff09\nembedder = Embedding(len(vocab)+1,embedding_vector_features,input_length=sent_length)\nembed = embedder(main_input)\n# LSTM\nlstm = LSTM(100)(embed)\nlstm = Dropout(0.3)(lstm)\n# CNN\ncnn = Conv1D(256, 5, padding='same')(embed)\ncnn = MaxPooling1D(3, 3, padding='same')(cnn)\ncnn = Conv1D(128, 5, padding='same')(cnn)\ncnn = MaxPooling1D(3, 3, padding='same')(cnn)\ncnn = Conv1D(64, 3, padding='same')(cnn)\ncnn = Flatten()(cnn)\ncnn = Dropout(0.1)(cnn)\ncnn = BatchNormalization()(cnn)\ncnn = Dense(100, activation='relu')(cnn)\ncnn = Dropout(0.1)(cnn)\n# AVG POOLING\navg_pooling = GlobalAveragePooling1D()(embed) # not good\navg_pooling = Dropout(0.7)(avg_pooling)\n# \u5408\u5e76\u4e24\u4e2a\u4e2a\u6a21\u578b\u7684\u8f93\u51fa\u5411\u91cf\nlstmncnn = concatenate([lstm, cnn,avg_pooling], axis=-1)\nflat = Flatten()(lstmncnn)\ndrop = Dropout(0.2)(flat)\nmain_output = Dense(1, activation='sigmoid')(drop)\nmodel3 = Model(inputs=main_input, outputs=main_output)\nmodel3.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(model3.summary())","87cfcd9b":"history = model3.fit(x_train_padded_seqs,y_train,validation_data=(x_test_padded_seqs,y_test),epochs=12,batch_size=800)","a3bf3705":"accuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(8, 5))\nplt.plot(accuracy, label='accuracy')\nplt.plot(val_accuracy, label='val_accuracy')\nplt.plot(loss, label='loss')\nplt.plot(val_loss, label='val_loss')\nplt.grid(True)\nplt.legend()\nplt.show()","031a9144":"plot_model(model3,show_shapes=True,show_layer_names=False)","63ceeb12":"mdl_pred=model3.predict(x_test_padded_seqs)\nmdl_pred = np.where(mdl_pred<0.5,0,1)\nprint(confusion_matrix(y_test,mdl_pred))\nprint(accuracy_score(y_test,mdl_pred))\nprint(classification_report(y_test,mdl_pred))","b3e58d7c":"beta = 1.5\nprecision = metrics.precision_score(y_test,mdl_pred)\nrecall = metrics.recall_score(y_test,mdl_pred)\nf1_5score = (1+beta**2)*precision*recall \/ (beta**2*precision+recall)\nprint(f1_5score)","e84cc923":"**LSTM**","c166e48a":"**Balance Data**","6fe6e164":"**MDL**","850b7af4":"**AvgPooling**","aeccd270":"**Bag of Word (Tokenization)**","bcf4ffc0":"**TextCNN + LSTM**","f6bf78ad":"Balance data in Training Set"}}