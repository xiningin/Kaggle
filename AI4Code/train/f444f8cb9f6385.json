{"cell_type":{"70fc8442":"code","3976a216":"code","e560b4a6":"code","efcca23a":"code","16ab937d":"code","6bb8320f":"code","16e490eb":"code","d6ab27c2":"code","a4bdb26a":"code","841153e1":"code","627c2972":"code","8c18ef6e":"code","ec442951":"code","8193ef95":"code","45c54550":"code","253d3577":"code","a349151c":"code","164e39bc":"code","be1c3d36":"code","b75b558b":"code","24aba221":"code","ede6e9a7":"code","c15163dd":"code","b012dc2e":"markdown","223d19be":"markdown","3920cf90":"markdown","4b2b6d16":"markdown","42ba2857":"markdown","0aed1038":"markdown","322ba442":"markdown","22cc7170":"markdown"},"source":{"70fc8442":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os \nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3976a216":"import seaborn as sns\nimport matplotlib.pyplot as plt ","e560b4a6":"df_alexa= pd.read_csv('..\/input\/amazon-alexa-reviews\/amazon_alexa.tsv', sep ='\\t')\ndf_alexa.head(5)\ndf_alexa.tail(5)","efcca23a":"df_alexa['verified_reviews']","16ab937d":"pos_feedback = df_alexa[df_alexa['feedback']==1 ]\nneg_feedback = df_alexa[df_alexa['feedback']==0 ]\n\nneg_feedback\n","6bb8320f":"sns.countplot(df_alexa['feedback'], label = \"count\")","16e490eb":"sns.countplot(x='rating', data = df_alexa)","d6ab27c2":"plt.figure(figsize= (40,15))\nsns.barplot(x = 'variation', y ='rating',data = df_alexa, palette = 'deep')","a4bdb26a":"\ndf_alexa = df_alexa.drop(['date','rating'], axis = 1)\ndf_alexa","841153e1":"variation_dumies = pd.get_dummies(df_alexa['variation'], drop_first = True)\nvariation_dumies","627c2972":"df_alexa.drop(['variation'], axis = 1, inplace = True)\ndf_alexa","8c18ef6e":"df_alexa = pd.concat([df_alexa, variation_dumies], axis =1)\ndf_alexa","ec442951":"from sklearn.feature_extraction.text import CountVectorizer\nvectorizer  = CountVectorizer()\nalexa_countvectorizer = vectorizer.fit_transform(df_alexa['verified_reviews'])\nalexa_countvectorizer.shape\n","8193ef95":"print(alexa_countvectorizer.toarray())","45c54550":"df_alexa.drop(['verified_reviews'], axis =1 ,inplace=True )\ndf_alexa","253d3577":"encoded_reviews = pd.DataFrame(alexa_countvectorizer.toarray())\ndf_alexa = pd.concat([df_alexa,encoded_reviews],axis =1)\ndf_alexa","a349151c":"encoded_reviews = pd.DataFrame(alexa_countvectorizer.toarray())\ndf_alexa= pd.concat([df_alexa, encoded_reviews], axis=1) \ndf_alexa","164e39bc":"X= df_alexa.drop(['feedback'], axis= 1)\nX","be1c3d36":"y= df_alexa['feedback']\ny","b75b558b":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2, random_state =5 )\nX_train.shape\nX_test.shape","24aba221":"from sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.ensemble import RandomForestClassifier\nrandomforest_classifier = RandomForestClassifier(n_estimators= 100 , criterion='entropy')\nrandomforest_classifier.fit(X_train,y_train)","ede6e9a7":"y_predict = randomforest_classifier.predict(X_test)\ncm = confusion_matrix(y_test,y_predict)\nsns.heatmap(cm,annot = True)","c15163dd":"print(classification_report(y_test,y_predict))","b012dc2e":"**Model training **","223d19be":"**Data visualization **","3920cf90":"**Data visualization**","4b2b6d16":"**importing libraries******","42ba2857":"print(classi)","0aed1038":"**Training a model**","322ba442":"**Evaluation of model **","22cc7170":"**Data cleaning **"}}