{"cell_type":{"b8abb7d0":"code","45918a29":"code","6b5703f4":"code","f8d8d317":"code","d02daae0":"code","ef62224f":"code","c747b227":"code","c0f3e146":"code","a40633b0":"code","6f8e7e9d":"code","972631fa":"code","4284b5f6":"code","3fd11e4f":"code","8b8c3dfc":"code","b930822b":"code","2adc3c9d":"code","3ea49607":"code","e190efbc":"code","3d16f30b":"code","cd922240":"code","f30141ce":"code","039fd3eb":"code","9f251d08":"markdown","cdaef123":"markdown","393cfdf6":"markdown","4ccbe11a":"markdown","73eb12f4":"markdown","f8de359e":"markdown","1933ee15":"markdown","038e3d53":"markdown","7bc94292":"markdown"},"source":{"b8abb7d0":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom scipy import stats\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error\n\n\nfrom xgboost import XGBRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor","45918a29":"data_frame = pd.read_csv(\"\/kaggle\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv\")","6b5703f4":"data_frame.head()","f8d8d317":"data_frame.drop(labels=\"Serial No.\", axis=1, inplace=True)","d02daae0":"data_frame.shape","ef62224f":"data_frame.describe()","c747b227":"data_frame.info()","c0f3e146":"plt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.countplot(x=\"University Rating\", data=data_frame)\nplt.title(\"University Rating Count Plot\")\nplt.subplot(2,2,2)\nsns.countplot(x=\"SOP\", data=data_frame)\nplt.title(\"SOP Count Plot\")\nplt.subplot(2,2,3)\nsns.countplot(x=\"LOR \", data=data_frame)\nplt.title(\"LOR Count Plot\")\nplt.subplot(2,2,4)\nsns.countplot(x=\"Research\", data=data_frame)\nplt.title(\"Research Count Plot\")\nplt.show()","a40633b0":"plt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.distplot(data_frame[\"CGPA\"], color=\"blue\")\nplt.title(\"CGPA Distribution\")\nplt.subplot(2,2,2)\nsns.distplot(data_frame[\"TOEFL Score\"], color=\"red\")\nplt.title(\"TOEFL Score Distribution\")\nplt.subplot(2,2,3)\nsns.distplot(data_frame[\"GRE Score\"], color=\"orange\")\nplt.title(\"GRE Score Distribution\")\nplt.show()","6f8e7e9d":"plt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.scatterplot(x=\"University Rating\", y=\"CGPA\", data=data_frame, color=\"blue\")\nplt.title(\"University Rating vs CGPA\")\nplt.subplot(2,2,2)\nsns.scatterplot(x=\"University Rating\", y=\"TOEFL Score\", data=data_frame, color=\"red\")\nplt.title(\"University Rating vs TOEFL Score\")\nplt.subplot(2,2,3)\nsns.scatterplot(x=\"University Rating\", y=\"GRE Score\", data=data_frame, color=\"green\")\nplt.title(\"University Rating vs GRE Score\")\nplt.show()","972631fa":"plt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.scatterplot(x=\"GRE Score\", y=\"CGPA\", data=data_frame, color=\"blue\")\nplt.title(\"GRE Score vs CGPA\")\nplt.subplot(2,2,2)\nsns.scatterplot(x=\"TOEFL Score\", y=\"CGPA\", data=data_frame, color=\"red\")\nplt.title(\"TOEFL Score vs CGPA\")\nplt.subplot(2,2,3)\nsns.scatterplot(x=\"GRE Score\", y=\"CGPA\", data=data_frame, hue=\"Research\")\nplt.title(\"GRE Score vs CGPA With Research\")\nplt.subplot(2,2,4)\nsns.scatterplot(x=\"TOEFL Score\", y=\"CGPA\", data=data_frame, hue=\"Research\")\nplt.title(\"TOEFL Score vs CGPA With Research\")\nplt.show()","4284b5f6":"plt.rcParams['figure.figsize'] = (7, 5)\nstats.probplot(data_frame['Chance of Admit '], plot = plt)\nplt.show()","3fd11e4f":"sns.heatmap(data_frame.corr(), annot=True, square=True, cmap=\"YlGnBu\")\nplt.title(\"Correlation Between Fetures\")","8b8c3dfc":"X = data_frame.drop(\"Chance of Admit \", axis=1)\nY = data_frame[\"Chance of Admit \"].values","b930822b":"x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.1, random_state=42)","2adc3c9d":"print(\"X Train Shape:\", x_train.shape)\nprint(\"X Test Shape:\", x_test.shape)\nprint(\"Y Train Shape:\", y_train.shape)\nprint(\"Y Test Shape:\", y_test.shape)","3ea49607":"def model_evaluation(model_name, y_test, y_preds):\n    mse = mean_squared_error(y_test, y_preds)\n    rmse = np.sqrt(mse)\n    r2_value = r2_score(y_test, y_preds)\n    \n    print(\"************* {} Model *************\".format(model_name))\n    print(\"MSE Value: {}\".format(mse))\n    print(\"RMSE Value: {}\".format(rmse))\n    print(\"R2 Score: {}\".format(r2_value))\n    print(\"************************************\")\n    \n    x = np.arange(0, len(y_test))\n    plt.scatter(x, list(y_test), label=\"Actual\")\n    plt.scatter(x, list(y_preds), marker=\"*\", label=\"Predicted\")\n    plt.title(\"Actual vs Predicted Values\")\n    plt.legend()\n    plt.show()\n    return r2_value","e190efbc":"svr_model = SVR(kernel=\"poly\")\nsvr_model.fit(x_train, y_train)\nsvr_preds = svr_model.predict(x_test)\nsvr_score = model_evaluation(\"Support Vector Regression\", y_test, svr_preds)","3d16f30b":"lr_model = LinearRegression()\nlr_model.fit(x_train, y_train)\nlr_preds = lr_model.predict(x_test)\nlr_score = model_evaluation(\"Linear Regression\", y_test, lr_preds)","cd922240":"rf_model = RandomForestRegressor()\nrf_model.fit(x_train, y_train)\nrf_preds = rf_model.predict(x_test)\nrf_score = model_evaluation(\"Random Forest Regression\", y_test, rf_preds)","f30141ce":"xgb_model = XGBRegressor()\nxgb_model.fit(x_train, y_train)\nxgb_preds = xgb_model.predict(x_test)\nxgb_score = model_evaluation(\"XGB Regression\", y_test, xgb_preds)","039fd3eb":"plt.bar([\"Linear Regression\",\"Random ForestRegression\", \"SVR\", \"XGB Regression\"], \n        [lr_score, rf_score, svr_score, xgb_score])\n\nplt.xticks(rotation=30)\nplt.title(\"R2 Score Comparison\")\nplt.show()","9f251d08":"### Support Vector Regression","cdaef123":"### Linear Regression","393cfdf6":"#### Linear Regression and XGB Regression Algorithm has nearly same performance.","4ccbe11a":"### XGB Regressor","73eb12f4":"### Random Forest Regression","f8de359e":"### EDA","1933ee15":"### Load Data Set","038e3d53":"### Import Libraries","7bc94292":"### Model Fitting"}}