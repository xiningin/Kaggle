{"cell_type":{"86969237":"code","313e1dbd":"code","9d0066fc":"code","0d4adefe":"code","9a4b85a5":"code","bd62b7d0":"code","e1a0b264":"code","28466157":"code","caa2a802":"code","656d2646":"code","bac57631":"code","41170645":"code","8b4f027d":"code","5d804618":"code","5c246911":"markdown","30e4b705":"markdown","63bc6fdc":"markdown","1353d0ea":"markdown","4708cb01":"markdown","50080202":"markdown","05158d7f":"markdown","e6be6aa2":"markdown","64ca7b38":"markdown","ccfd5f08":"markdown","2fa396e0":"markdown","cda90973":"markdown","c3b085e1":"markdown","b441b098":"markdown"},"source":{"86969237":"# importing all the necessary packages \nimport gensim\nfrom gensim import corpora\nimport re\nimport nltk\nfrom nltk.corpus import stopwords \nimport spacy\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n","313e1dbd":"#reading the file in:  \nf = open('..\/input\/bmw_3_series_review\/2009_bmw_3_series.txt',\n         encoding = \"ISO-8859-1\")\ncontent = f.read()\n","9d0066fc":"print(content[:950])","0d4adefe":"pattern = \"<TEXT>(.*?)<\/TEXT>\"\npattern2 = \"<FAVORITE>(.*?)<\/FAVORITE>\"\nmatches = re.findall(pattern, content)\nmatches2 = re.findall(pattern2, content)\nreviews = []\ncounter = 0 \n# adding all the reviews to a list \nfor match in matches:\n    reviews.append(match)\n# appending favourite comment to the review. \nfor match2 in matches2:\n    reviews[counter] += ' ' + match2\n    counter += 1\n","9a4b85a5":"#Testing to see if it worked \nprint(len(reviews))\nprint(reviews[0])","bd62b7d0":"# performs a simple preprocessing using gensism \ndef create_tokens(review): \n    return gensim.utils.simple_preprocess (review)\n    ","e1a0b264":"# removes stopwords and commonly occuring words in car reviews \ndef remove_stopWrd(tokenized_review):\n    filtered_review = []\n    common = ['car', 'bmw', 'drive', 'driving', 'drives', 'drove', 'driven']\n    stop_words = set(stopwords.words('english')) \n    for word in tokenized_review:\n        if word not in stop_words and word not in common:\n            filtered_review.append(word)\n    return filtered_review\n\n","28466157":"# Initialize spacy 'en' model, keeping only tagger component needed for lemmatization\nnlp= spacy.load('en', disable=['parser', 'ner'])\ndef apply_stemming(filtered_review):\n    for i in range(len(filtered_review)):\n        lemmatized = nlp(filtered_review[i])\n        filtered_review[i] = lemmatized[0].lemma_\n    return filtered_review","caa2a802":"filtered_rev = []\nfor rev in reviews:\n    tk_review = create_tokens(rev.lower())\n    stp_review = remove_stopWrd(tk_review)\n    stem_review = apply_stemming(stp_review)\n    \n    filtered_rev.append(stem_review)   ","656d2646":"text = str(filtered_rev)\ntext = text.replace(\"\\'\" , \" \") # to avoid trailing ' in the words\n\nwordcloud = WordCloud(\n    max_font_size= 50, \n    max_words=200, \n    background_color=\"white\",\n    scale = 3\n).generate(text)\nplt.figure(1, figsize = (10, 10))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","bac57631":"dictionary = corpora.Dictionary(filtered_rev)\nprint(dictionary)","41170645":"docterm_mat = [dictionary.doc2bow(rev) for rev in filtered_rev]","8b4f027d":"# Creating the object for LDA model\nLDA = gensim.models.ldamodel.LdaModel\n\n# LDA model\nlda_model = LDA(corpus=docterm_mat, id2word=dictionary, num_topics= 2, \n                random_state=100,\n                chunksize=1000, passes=50)\nlda_model.print_topics()","5d804618":"import pyLDAvis.gensim\npyLDAvis.enable_notebook()\npyLDAvis.gensim.prepare(lda_model, docterm_mat, dictionary)","5c246911":"Here are some helper functions for preprocessing: ","30e4b705":"Now that we have our cleaned reviews, I create a word cloud to see the types of words that are occuring \n\nfrequently. Also, I want to check that no stop words or punctuation shows up in our word cloud. \n\nThe wordcloud below contains words that you would typically find in a car review. \n\nWe also notice that the cloud contains mostly positive words. ","63bc6fdc":"Lets see how the information is stored. \nWe notice that the actual reviews are within the `<TEXT> <\\TEXT>` tags. \n\nWe also notice there is some more comments by the customer within the \n`<FAVORITE> <\\FAVORITE>` tags. ","1353d0ea":"I start by reading in the file containing all the reviews. I am using the [OpinRank](http:\/\/http:\/\/archive.ics.uci.edu\/ml\/datasets\/opinrank+review+dataset) review dataset that contains \n\nboth hotel and car reviews. \n\nI will just be using the reviews for the BMW 3 Series (2009) model. ","4708cb01":"## Collecting the Reviews ","50080202":"## 1. Preprocessing the reviews\n\nNow that we have our reviews, we need to do some pre-processing. \n\nI will use the genism package to peform a simple pre-processing and then do the following:\n\n1. Remove stopwords like 'a', 'the', 'an', etc. I also chose to remove common words like 'car' and 'bmw' \n\n    since they might come up very frequently.\n\n    I removed \"drive\" (all forms) because it is understood that car reviews \n\n    are written by people who've driven the car. Flitering this word out will help us get better results. \n\n2. Lemmatize the text. That is, convert it to its root form (driving -> drive). \n\n     Another option is Stemming the text. However, stemming results in some words that have no \n\n     meaning so I chose not to use it. (fairly -> fairli)","05158d7f":"I then preprocess each of the reviews in the list using the helper function. ( takes a little while ~ 10secs) ","e6be6aa2":"For our purposes, we only need the reviews, so in the next steps, I \nextract the reviews \n\nas well as the 'favorites' comment. \n\nI will append the favorite comment \nto the review it corresponds to, to make things a little simpler. ","64ca7b38":"Using the Dictionary above, I then create the Document Term Matrix which we will feed to the LDA model. ","ccfd5f08":"Now that the reviews are all nice and cleaned up, I use the list of reviews to create a term dictionary\n\nfor our corpus or document term matrix. (Every unique term is assigned an index)","2fa396e0":"## 2. Building the LDA model","cda90973":"# EXTRACTING TOPICS FROM CUSTOMER REVIEWS \n\nI was interested in learning about Topic Modelling so I decided to use LDA topic modelling to extract common \n\ntopics in customer reviews.\n\nSince I really like BMW's, I decided to \nuse their customer reviews. \n\nThere are basically three main steps: \n1. Preprocessing the Reviews\n2. Building the LDA model \n3. Inferring the topics ","c3b085e1":"## Inferring the topics \nNow lets use the LDA model to find the two most common topics in the reviews. We notice the the first topic \n\nis about the \"look and feel\" of the car or in other words, the exterior and interiors of the car. The second topic\n\nseems to be about the performance of the car. In both cases, the reviews tend to be positive because words \n\nlike \"good\" \"love\" and \"great\" appear frequently. ","b441b098":"I chose to use spacy for lemmatizing because it doesnt require you to specify a POS (parts of speech)  tag like \n\nWordNetLemmatizer does in order to convert verbs and adjectives. "}}