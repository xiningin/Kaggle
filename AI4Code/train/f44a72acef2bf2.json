{"cell_type":{"90605295":"code","af9f7993":"code","20b5932c":"code","6eb15103":"code","1ea577bc":"code","c52d0754":"code","60ebeadb":"code","91c853ca":"code","2c3cccda":"code","1d76c116":"code","3f38a336":"code","d88a6f2b":"code","43477420":"code","dabef3bd":"code","9dc131a2":"code","d013eb78":"code","59a6188d":"code","a7148409":"code","c9a14c2f":"code","ad163b6f":"code","034567a8":"code","8762b299":"code","65c88c94":"code","e105a990":"code","1d67a607":"code","2bf179cd":"code","0e55f1a0":"code","8985123f":"code","97bdf2fa":"code","d9336e61":"code","fbd4461e":"code","35ebe5bb":"code","41b0e555":"code","6f594950":"markdown","689c1116":"markdown","784a772d":"markdown","74588e22":"markdown"},"source":{"90605295":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af9f7993":"import sys\nimport pandas as pd\nimport numpy as np\nimport sklearn\nimport matplotlib\nimport keras\n\nprint('Python: {}'.format(sys.version))\nprint('Pandas: {}'.format(pd.__version__))\nprint('Numpy: {}'.format(np.__version__))\nprint('Sklearn: {}'.format(sklearn.__version__))\nprint('Matplotlib: {}'.format(matplotlib.__version__))\nprint('Keras: {}'.format(keras.__version__))","20b5932c":"import matplotlib.pyplot as plt\nfrom pandas.plotting import scatter_matrix\nimport seaborn as sns","6eb15103":"# read the csv\ncleveland = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","1ea577bc":"# print the shape of the DataFrame, so we can see how many examples we have\nprint( 'Shape of DataFrame: {}'.format(cleveland.shape))\nprint (cleveland.loc[1])","c52d0754":"# print the last twenty or so data points\ncleveland.loc[280:]","60ebeadb":"# remove missing data (indicated with a \"?\")\ndata = cleveland[~cleveland.isin(['?'])]\ndata.loc[280:]","91c853ca":"# drop rows with NaN values from DataFrame\ndata = data.dropna(axis=0)\ndata.loc[280:]","2c3cccda":"# print the shape and data type of the dataframe\nprint(data.shape)\nprint(data.dtypes)","1d76c116":"# transform data to numeric to enable further analysis\ndata = data.apply(pd.to_numeric)\ndata.dtypes","3f38a336":"# print data characteristics, usings pandas built-in describe() function\ndata.describe()","d88a6f2b":"# plot histograms for each variable\ndata.hist(figsize = (12, 12))\nplt.show()","43477420":"pd.crosstab(data.age,data.target).plot(kind=\"bar\",figsize=(20,6))\nplt.title('Heart Disease Frequency for Ages')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.show()","dabef3bd":"plt.figure(figsize=(10,10))\nsns.heatmap(data.corr(),annot=True,fmt='.1f')\nplt.show()","9dc131a2":"age_unique=sorted(data.age.unique())\nage_thalach_values=data.groupby('age')['thalach'].count().values\nmean_thalach=[]\nfor i,age in enumerate(age_unique):\n    mean_thalach.append(sum(data[data['age']==age].thalach)\/age_thalach_values[i])\n    \nplt.figure(figsize=(10,5))\nsns.pointplot(x=age_unique,y=mean_thalach,color='red',alpha=0.8)\nplt.xlabel('Age',fontsize = 15,color='blue')\nplt.xticks(rotation=45)\nplt.ylabel('Thalach',fontsize = 15,color='blue')\nplt.title('Age vs Thalach',fontsize = 15,color='blue')\nplt.grid()\nplt.show()","d013eb78":"X = np.array(data.drop(['target'], 1))\ny = np.array(data['target'])\n","59a6188d":"X[0]","a7148409":"mean = X.mean(axis=0)\nX -= mean\nstd = X.std(axis=0)\nX \/= std\n","c9a14c2f":"X[0]","ad163b6f":"# create X and Y datasets for training\nfrom sklearn import model_selection\n\nX_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, stratify=y, random_state=42, test_size = 0.2)","034567a8":"# convert the data to categorical labels\nfrom keras.utils.np_utils import to_categorical\n\nY_train = to_categorical(y_train, num_classes=None)\nY_test = to_categorical(y_test, num_classes=None)\nprint (Y_train.shape)\nprint (Y_train[:10])","8762b299":"X_train[0]","65c88c94":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam\nfrom keras.layers import Dropout\nfrom keras import regularizers\n\n# define a function to build the keras model\ndef create_model():\n    # create model\n    model = Sequential()\n    model.add(Dense(16, input_dim=13, kernel_initializer='normal', kernel_regularizer=regularizers.l2(0.001), activation='relu'))\n    model.add(Dropout(0.25))\n    model.add(Dense(8, kernel_initializer='normal', kernel_regularizer=regularizers.l2(0.001), activation='relu'))\n    model.add(Dropout(0.25))\n    model.add(Dense(2, activation='softmax'))\n      \n    # compile model\n    adam = Adam(lr=0.001)\n    model.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n    return model\n\nmodel = create_model()\nprint(model.summary())","e105a990":"# fit the model to the training data\nhistory=model.fit(X_train, Y_train, validation_data=(X_test, Y_test),epochs=50, batch_size=10)","1d67a607":"import matplotlib.pyplot as plt\n%matplotlib inline\n# Model accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'])\nplt.show()","2bf179cd":"# Model Losss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'])\nplt.show()","0e55f1a0":"# convert into binary classification problem - heart disease or no heart disease\nY_train_binary = y_train.copy()\nY_test_binary = y_test.copy()\n\nY_train_binary[Y_train_binary > 0] = 1\nY_test_binary[Y_test_binary > 0] = 1\n\nprint(Y_train_binary[:20])","8985123f":"# define a new keras model for binary classification\ndef create_binary_model():\n    # create model\n    model = Sequential()\n    model.add(Dense(16, input_dim=13, kernel_initializer='normal',  kernel_regularizer=regularizers.l2(0.001),activation='relu'))\n    model.add(Dropout(0.25))\n    model.add(Dense(8, kernel_initializer='normal',  kernel_regularizer=regularizers.l2(0.001),activation='relu'))\n    model.add(Dropout(0.25))\n    model.add(Dense(1, activation='sigmoid'))\n    \n    # Compile model\n    adam = Adam(lr=0.001)\n    model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n    return model\n\nbinary_model = create_binary_model()\n\nprint(binary_model.summary())\n    ","97bdf2fa":"history=binary_model.fit(X_train, Y_train_binary, validation_data=(X_test, Y_test_binary), epochs=50, batch_size=10)","d9336e61":"import matplotlib.pyplot as plt\n%matplotlib inline\n# Model accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'])\nplt.show()","fbd4461e":"# Model Losss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'])\nplt.show()","35ebe5bb":"# generate classification report using predictions for categorical model\nfrom sklearn.metrics import classification_report, accuracy_score\n\ncategorical_pred = np.argmax(model.predict(X_test), axis=1)\n\nprint('Results for Categorical Model')\nprint(accuracy_score(y_test, categorical_pred))\nprint(classification_report(y_test, categorical_pred))","41b0e555":"# generate classification report using predictions for categorical model\nfrom sklearn.metrics import classification_report, accuracy_score\n\ncategorical_pred = np.argmax(model.predict(X_test), axis=1)\n\nprint('Results for Categorical Model')\nprint(accuracy_score(y_test, categorical_pred))\nprint(classification_report(y_test, categorical_pred))","6f594950":"# STEP-2  COMPILE THE MODEL","689c1116":"# STEP-4 PREDICT ON THE MODEL","784a772d":"# STEP-1:SPECIFY THE ARCHITECTURE# Model Losss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'])\nplt.show()# Model Losss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'])\nplt.show()","74588e22":"# STEP-3 FIT THE MODEL"}}