{"cell_type":{"b17dbe70":"code","9a7b1b70":"code","d807a5d0":"code","95cdbcb2":"code","95789201":"code","3a2ce539":"code","fa663960":"code","1f9653e3":"code","50e9e47c":"code","2e1b7c11":"code","8d6106f7":"code","bdb512d9":"code","8a038002":"code","48e1c174":"code","e796068a":"code","7e247ec2":"code","b52c12c2":"markdown"},"source":{"b17dbe70":"from IPython.core.display import display, HTML\n\nimport pandas as pd\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\nimport os\nimport gc\n\nfrom joblib import Parallel, delayed\nfrom sklearn.model_selection import TimeSeriesSplit\n\nfrom sklearn import preprocessing, model_selection\nfrom sklearn.preprocessing import MinMaxScaler, QuantileTransformer \nfrom sklearn.metrics import r2_score\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport numpy.matlib\n\npath_submissions = '\/'\n\ntarget_name = 'target'\nscores_folds = {}","9a7b1b70":"# data directory\ndata_dir = '..\/input\/optiver-realized-volatility-prediction\/'\n\ndef simple_return(series):\n    return series.diff()\n\ndef realized_1vol(series):\n    return np.sqrt(np.sum(series**4)\/(6*np.sum(series**2)))\n\ndef realized_2vol(series):\n    return np.sqrt(((np.pi**2)*np.sum(abs(series.rolling(window=4).apply(np.product, raw=True))))\/(8*np.sum(series**2)))\n\ndef realized_3vol(series):\n    numerator = np.sum((abs(series**(4\/3))).rolling(window=3).apply(np.prod))\n    denominator = np.sum(series**2)\n    return np.sqrt((0.8717360372659919*numerator)\/denominator)\n\ndef bvar(series):\n    series = abs(series).rolling(window=2).apply(np.prod, raw=True)\n    return np.sum(series)*((2\/np.pi)**(-2))\n\ndef realized_quarticity(series):\n    return np.sum(series**4)*series.shape[0]\/3\n\ndef realized_quadpower_quarticity(series):\n    series = abs(series.rolling(window=4).apply(np.product, raw=True))\n    return (np.sum(series) * series.shape[0] * (np.pi**2))\/4\n\ndef realized_tripower_quarticity(series):\n    series = series ** (4\/3)\n    series = abs(series).rolling(window=3).apply(np.prod, raw=True)\n    return series.shape[0]*0.25*0.8717360372659919*np.sum(series)\n\n# Function to calculate first WAP\ndef calc_wap1(df):\n    wap = (df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1']) \/ (df['bid_size1'] + df['ask_size1'])\n    return wap\n\n# Function to calculate second WAP\ndef calc_wap2(df):\n    wap = (df['bid_price2'] * df['ask_size2'] + df['ask_price2'] * df['bid_size2']) \/ (df['bid_size2'] + df['ask_size2'])\n    return wap\n\ndef calc_wap3(df):\n    wap = (df['bid_price1'] * df['bid_size1'] + df['ask_price1'] * df['ask_size1']) \/ (df['bid_size1'] + df['ask_size1'])\n    return wap\n\ndef calc_wap4(df):\n    wap = (df['bid_price2'] * df['bid_size2'] + df['ask_price2'] * df['ask_size2']) \/ (df['bid_size2'] + df['ask_size2'])\n    return wap\n\n# Function to calculate the log of the return\n# Remember that logb(x \/ y) = logb(x) - logb(y)\ndef log_return(series):\n    return np.log(series).diff()\n\ndef realized_variance(series):\n    return np.sum(series**2)\n\n# Calculate the realized volatility\ndef realized_volatility(series):\n    return np.sqrt(np.sum(series**2))\n\n# Function to count unique elements of a series\ndef count_unique(series):\n    return len(np.unique(series))\n\n# Function to read our base train and test set\ndef read_train_test():\n    train = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\n    test = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/test.csv')\n    # Create a key to merge with book and trade data\n    train['row_id'] = train['stock_id'].astype(str) + '-' + train['time_id'].astype(str)\n    test['row_id'] = test['stock_id'].astype(str) + '-' + test['time_id'].astype(str)\n    print(f'Our training set has {train.shape[0]} rows')\n    return train, test\n\n# Function to preprocess book data (for each stock id)\ndef book_preprocessor(file_path):\n    df = pd.read_parquet(file_path)\n    # Calculate Wap\n    df['wap1'] = calc_wap1(df)\n    df['wap2'] = calc_wap2(df)\n    df['wap3'] = calc_wap3(df)\n    df['wap4'] = calc_wap4(df)\n    # Calculate log returns\n    df['s_return1'] = df.groupby(['time_id'])['wap1'].apply(simple_return)\n    df['s_return2'] = df.groupby(['time_id'])['wap2'].apply(simple_return)\n    df['log_return1'] = df.groupby(['time_id'])['wap1'].apply(log_return)\n    df['log_return2'] = df.groupby(['time_id'])['wap2'].apply(log_return)\n    df['log_return3'] = df.groupby(['time_id'])['wap3'].apply(log_return)\n    df['log_return4'] = df.groupby(['time_id'])['wap4'].apply(log_return)\n    # Calculate wap balance\n    df['wap_balance'] = abs(df['wap1'] - df['wap2'])\n    # Calculate spread\n    df['price_spread'] = (df['ask_price1'] - df['bid_price1']) \/ ((df['ask_price1'] + df['bid_price1']) \/ 2)\n    df['price_spread2'] = (df['ask_price2'] - df['bid_price2']) \/ ((df['ask_price2'] + df['bid_price2']) \/ 2)\n    df['bid_spread'] = df['bid_price1'] - df['bid_price2']\n    df['ask_spread'] = df['ask_price1'] - df['ask_price2']\n    df[\"bid_ask_spread\"] = abs(df['bid_spread'] - df['ask_spread'])\n    df['total_volume'] = (df['ask_size1'] + df['ask_size2']) + (df['bid_size1'] + df['bid_size2'])\n    df['volume_imbalance'] = abs((df['ask_size1'] + df['ask_size2']) - (df['bid_size1'] + df['bid_size2']))\n    \n    # Dict for aggregations\n    create_feature_dict = {\n        'wap1': [np.sum, np.std],\n        'wap2': [np.sum, np.std],\n        's_return1': [np.std, realized_volatility, bvar, realized_1vol],\n        's_return2': [realized_volatility, bvar, realized_1vol],\n        'log_return1': [realized_volatility, realized_1vol, bvar, realized_2vol, realized_quadpower_quarticity, realized_tripower_quarticity, realized_quarticity],\n        'log_return2': [realized_volatility, bvar, realized_1vol],\n        'log_return3': [realized_volatility, bvar, realized_1vol],\n        'log_return4': [realized_volatility, bvar, realized_1vol, realized_quarticity],\n        'wap_balance': [np.sum, np.max],\n        'price_spread':[np.sum, np.max, bvar],\n        'price_spread2':[np.sum, np.max],\n        'bid_spread':[np.sum, np.max],\n        'ask_spread':[np.sum, np.max],\n        'total_volume':[np.sum, np.max],\n        'volume_imbalance':[np.sum],\n        \"bid_ask_spread\":[np.sum,  np.max],\n    }\n    create_feature_dict_time = {\n        's_return1': [realized_volatility, bvar],\n        's_return2': [realized_volatility, bvar],\n        'log_return1': [realized_volatility, realized_1vol, bvar, realized_quarticity],\n        'log_return2': [realized_volatility, realized_1vol, bvar],\n        'log_return3': [realized_volatility, realized_1vol, bvar],\n        'log_return4': [realized_volatility, realized_1vol, bvar, realized_quarticity],\n    }\n    \n    # Function to get group stats for different windows (seconds in bucket)\n    def get_stats_window(fe_dict,seconds_in_bucket, add_suffix = False):\n        # Group by the window\n        df_feature = df[df['seconds_in_bucket'] >= seconds_in_bucket].groupby(['time_id']).agg(fe_dict).reset_index()\n        # Rename columns joining suffix\n        df_feature.columns = ['_'.join(col) for col in df_feature.columns]\n        # Add a suffix to differentiate windows\n        if add_suffix:\n            df_feature = df_feature.add_suffix('_' + str(seconds_in_bucket))\n        return df_feature\n    \n    # Get the stats for different windows\n    df_feature     = get_stats_window(create_feature_dict,seconds_in_bucket = 0, add_suffix = False)\n    df_feature_500 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 500, add_suffix = True)\n    df_feature_400 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 400, add_suffix = True)\n    df_feature_300 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 300, add_suffix = True)\n    df_feature_200 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 200, add_suffix = True)\n    df_feature_100 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 100, add_suffix = True)\n\n    # Merge all\n    df_feature = df_feature.merge(df_feature_500, how = 'left', left_on = 'time_id_', right_on = 'time_id__500')\n    df_feature = df_feature.merge(df_feature_400, how = 'left', left_on = 'time_id_', right_on = 'time_id__400')\n    df_feature = df_feature.merge(df_feature_300, how = 'left', left_on = 'time_id_', right_on = 'time_id__300')\n    df_feature = df_feature.merge(df_feature_200, how = 'left', left_on = 'time_id_', right_on = 'time_id__200')\n    df_feature = df_feature.merge(df_feature_100, how = 'left', left_on = 'time_id_', right_on = 'time_id__100')\n    # Drop unnecesary time_ids\n    df_feature.drop(['time_id__500','time_id__400', 'time_id__300', 'time_id__200','time_id__100'], axis = 1, inplace = True)\n    \n    \n    # Create row_id so we can merge\n    stock_id = file_path.split('=')[1]\n    df_feature['row_id'] = df_feature['time_id_'].apply(lambda x: f'{stock_id}-{x}')\n    df_feature.drop(['time_id_'], axis = 1, inplace = True)\n    return df_feature\n\n# Function to preprocess trade data (for each stock id)\ndef trade_preprocessor(file_path):\n    df = pd.read_parquet(file_path)\n    df['log_return'] = df.groupby('time_id')['price'].apply(log_return)\n    df['amount']=df['price']*df['size']\n    df['s_return'] = df.groupby('time_id')['price'].apply(simple_return)\n    # Dict for aggregations\n    create_feature_dict = {\n        's_return':[realized_volatility],\n        'log_return':[realized_volatility],\n        'seconds_in_bucket':[count_unique],\n        'size':[np.sum, np.max, np.min],\n        'order_count':[np.sum,np.max],\n        'amount':[np.sum,np.max,np.min],\n    }\n    create_feature_dict_time = {\n        'log_return':[realized_volatility],\n        #'seconds_in_bucket':[count_unique],\n        #'size':[np.sum],\n        'order_count':[np.sum],\n    }\n    # Function to get group stats for different windows (seconds in bucket)\n    def get_stats_window(fe_dict,seconds_in_bucket, add_suffix = False):\n        # Group by the window\n        df_feature = df[df['seconds_in_bucket'] >= seconds_in_bucket].groupby(['time_id']).agg(fe_dict).reset_index()\n        # Rename columns joining suffix\n        df_feature.columns = ['_'.join(col) for col in df_feature.columns]\n        # Add a suffix to differentiate windows\n        if add_suffix:\n            df_feature = df_feature.add_suffix('_' + str(seconds_in_bucket))\n        return df_feature\n    \n\n    # Get the stats for different windows\n    df_feature = get_stats_window(create_feature_dict,seconds_in_bucket = 0, add_suffix = False)\n    df_feature_500 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 500, add_suffix = True)\n    df_feature_400 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 400, add_suffix = True)\n    df_feature_300 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 300, add_suffix = True)\n    df_feature_200 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 200, add_suffix = True)\n    df_feature_100 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 100, add_suffix = True)\n    \n    def tendency(price, vol):    \n        df_diff = np.diff(price)\n        val = (df_diff\/price[1:])*100\n        power = np.sum(val*vol[1:])\n        return(power)\n    \n    lis = []\n    for n_time_id in df['time_id'].unique():\n        df_id = df[df['time_id'] == n_time_id]        \n        tendencyV = tendency(df_id['price'].values, df_id['size'].values)      \n        #f_max = np.sum(df_id['price'].values > np.mean(df_id['price'].values))\n        #f_min = np.sum(df_id['price'].values < np.mean(df_id['price'].values))\n        df_max =  np.sum(np.diff(df_id['price'].values) > 0)\n        #df_min =  np.sum(np.diff(df_id['price'].values) < 0)\n        # new\n        #abs_diff = np.median(np.abs( df_id['price'].values - np.mean(df_id['price'].values)))        \n        energy = np.mean(df_id['price'].values**2)\n        #iqr_p = np.percentile(df_id['price'].values,75) - np.percentile(df_id['price'].values,25)\n        \n        # vol vars\n        \n        abs_diff_v = np.median(np.abs( df_id['size'].values - np.mean(df_id['size'].values)))        \n        energy_v = np.sum(df_id['size'].values**2)\n        iqr_p_v = np.percentile(df_id['size'].values,75) - np.percentile(df_id['size'].values,25)\n        \n        lis.append({'time_id':n_time_id,'tendency':tendencyV,'df_max':df_max,\n                   'energy':energy,'abs_diff_v':abs_diff_v,'energy_v':energy_v,'iqr_p_v':iqr_p_v})\n    \n    df_lr = pd.DataFrame(lis)\n        \n   \n    df_feature = df_feature.merge(df_lr, how = 'left', left_on = 'time_id_', right_on = 'time_id')\n    \n    # Merge all\n    df_feature = df_feature.merge(df_feature_500, how = 'left', left_on = 'time_id_', right_on = 'time_id__500')\n    df_feature = df_feature.merge(df_feature_400, how = 'left', left_on = 'time_id_', right_on = 'time_id__400')\n    df_feature = df_feature.merge(df_feature_300, how = 'left', left_on = 'time_id_', right_on = 'time_id__300')\n    df_feature = df_feature.merge(df_feature_200, how = 'left', left_on = 'time_id_', right_on = 'time_id__200')\n    df_feature = df_feature.merge(df_feature_100, how = 'left', left_on = 'time_id_', right_on = 'time_id__100')\n    # Drop unnecesary time_ids\n    df_feature.drop(['time_id__500','time_id__400', 'time_id__300', 'time_id__200','time_id','time_id__100'], axis = 1, inplace = True)\n    \n    \n    df_feature = df_feature.add_prefix('trade_')\n    stock_id = file_path.split('=')[1]\n    df_feature['row_id'] = df_feature['trade_time_id_'].apply(lambda x:f'{stock_id}-{x}')\n    df_feature.drop(['trade_time_id_'], axis = 1, inplace = True)\n    return df_feature\n\n# Function to get group stats for the stock_id and time_id\ndef get_time_stock(df):\n    vol_cols = ['s_return1_realized_volatility','log_return1_realized_volatility', 'log_return2_realized_volatility', 'log_return1_realized_volatility_400', 'log_return2_realized_volatility_400', \n                'log_return1_realized_volatility_300', 'log_return2_realized_volatility_300', 'log_return1_realized_volatility_200', 'log_return2_realized_volatility_200', \n                'trade_log_return_realized_volatility', 'trade_log_return_realized_volatility_400', 'trade_log_return_realized_volatility_300', 'trade_log_return_realized_volatility_200']\n\n\n    # Group by the stock id\n    df_stock_id = df.groupby(['stock_id'])[vol_cols].agg(['mean', 'std', 'max', 'min']).reset_index()\n    # Rename columns joining suffix\n    df_stock_id.columns = ['_'.join(col) for col in df_stock_id.columns]\n    df_stock_id = df_stock_id.add_suffix('_' + 'stock')\n\n    # Group by the stock id\n    df_time_id = df.groupby(['time_id'])[vol_cols].agg(['mean', 'std', 'max', 'min']).reset_index()\n    # Rename columns joining suffix\n    df_time_id.columns = ['_'.join(col) for col in df_time_id.columns]\n    df_time_id = df_time_id.add_suffix('_' + 'time')\n    \n    # Merge with original dataframe\n    df = df.merge(df_stock_id, how = 'left', left_on = ['stock_id'], right_on = ['stock_id__stock'])\n    df = df.merge(df_time_id, how = 'left', left_on = ['time_id'], right_on = ['time_id__time'])\n    df.drop(['stock_id__stock', 'time_id__time'], axis = 1, inplace = True)\n    return df\n    \n# Funtion to make preprocessing function in parallel (for each stock id)\ndef preprocessor(list_stock_ids, is_train = True):\n    \n    # Parrallel for loop\n    def for_joblib(stock_id):\n        # Train\n        if is_train:\n            file_path_book = data_dir + \"book_train.parquet\/stock_id=\" + str(stock_id)\n            file_path_trade = data_dir + \"trade_train.parquet\/stock_id=\" + str(stock_id)\n        # Test\n        else:\n            file_path_book = data_dir + \"book_test.parquet\/stock_id=\" + str(stock_id)\n            file_path_trade = data_dir + \"trade_test.parquet\/stock_id=\" + str(stock_id)\n    \n        # Preprocess book and trade data and merge them\n        df_tmp = pd.merge(book_preprocessor(file_path_book), trade_preprocessor(file_path_trade), on = 'row_id', how = 'left')\n        \n        # Return the merge dataframe\n        return df_tmp\n    \n    # Use parallel api to call paralle for loop\n    df = Parallel(n_jobs = -1, verbose = 1)(delayed(for_joblib)(stock_id) for stock_id in list_stock_ids)\n    # Concatenate all the dataframes that return from Parallel\n    df = pd.concat(df, ignore_index = True)\n    return df\n\n# Function to calculate the root mean squared percentage error\ndef rmspe(y_true, y_pred):\n    return np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true)))\n\n# Function to early stop with root mean squared percentage error\ndef feval_rmspe(y_pred, lgb_train):\n    y_true = lgb_train.get_label()\n    return 'RMSPE', rmspe(y_true, y_pred), False","d807a5d0":"# Read train and test\ntrain, test = read_train_test()\n\n# Get unique stock ids \ntrain_stock_ids = train['stock_id'].unique()\n# Preprocess them using Parallel and our single stock id functions\ntrain_ = preprocessor(train_stock_ids, is_train = True)\ntrain = train.merge(train_, on = ['row_id'], how = 'left')\n\n# Get unique stock ids \ntest_stock_ids = test['stock_id'].unique()\n# Preprocess them using Parallel and our single stock id functions\ntest_ = preprocessor(test_stock_ids, is_train = False)\ntest = test.merge(test_, on = ['row_id'], how = 'left')\n\n# Get group stats of time_id and stock_id\ntrain = get_time_stock(train)\ntest = get_time_stock(test)","95cdbcb2":"# replace by order sum (tau)\ntrain['size_tau'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique'] )\ntest['size_tau'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique'] )\ntrain['size_tau2'] = np.sqrt( 1\/ train['trade_order_count_sum'] )\ntest['size_tau2'] = np.sqrt( 1\/ test['trade_order_count_sum'] )","95789201":"from sklearn.cluster import KMeans, AgglomerativeClustering\n# making agg features\n\ntrain_p = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\ntrain_p = train_p.pivot(index='time_id', columns='stock_id', values='target')\n\ncorr = train_p.corr()\n\nids = corr.index\n\nkmeans = AgglomerativeClustering(n_clusters=7).fit(corr.values)\nprint(kmeans.labels_)\n\nl = []\nfor n in range(7):\n    l.append ( [ (x-1) for x in ( (ids+1)*(kmeans.labels_ == n)) if x > 0] )\n    \n\nmat = []\nmatTest = []\n\nn = 0\nfor ind in l:\n    print(ind)\n    newDf = train.loc[train['stock_id'].isin(ind) ]\n    newDf = newDf.groupby(['time_id']).agg(np.nanmean)\n    newDf.loc[:,'stock_id'] = str(n)+'c1'\n    mat.append ( newDf )\n    \n    newDf = test.loc[test['stock_id'].isin(ind) ]    \n    newDf = newDf.groupby(['time_id']).agg(np.nanmean)\n    newDf.loc[:,'stock_id'] = str(n)+'c1'\n    matTest.append ( newDf )\n    \n    n+=1\n    \nmat1 = pd.concat(mat).reset_index()\nmat1.drop(columns=['target'],inplace=True)\n\nmat2 = pd.concat(matTest).reset_index()","3a2ce539":"mat2 = pd.concat([mat2,mat1.loc[mat1.time_id==5]])\nmat1 = mat1.pivot(index='time_id', columns='stock_id')\nmat1.columns = [\"_\".join(x) for x in mat1.columns.ravel()]\nmat1.reset_index(inplace=True)\n\nmat2 = mat2.pivot(index='time_id', columns='stock_id')\nmat2.columns = [\"_\".join(x) for x in mat2.columns.ravel()]\nmat2.reset_index(inplace=True)","fa663960":"nnn = ['time_id',\n        \n       'log_return1_realized_tripower_quarticity_0c1','log_return1_realized_tripower_quarticity_1c1','log_return1_realized_tripower_quarticity_2c1',\n       'log_return1_realized_tripower_quarticity_3c1','log_return1_realized_tripower_quarticity_4c1','log_return1_realized_tripower_quarticity_5c1','log_return1_realized_tripower_quarticity_6c1',\n        \n       'log_return1_bvar_0c1','log_return1_bvar_1c1',\n       'log_return1_bvar_2c1','log_return1_bvar_3c1',\n       'log_return1_bvar_4c1','log_return1_bvar_5c1','log_return1_bvar_6c1',\n       \n        'log_return2_bvar_0c1','log_return2_bvar_1c1',\n       'log_return2_bvar_2c1','log_return2_bvar_3c1',\n       'log_return2_bvar_4c1','log_return2_bvar_5c1','log_return2_bvar_6c1',\n       \n        's_return1_bvar_0c1','s_return1_bvar_1c1',\n       's_return1_bvar_2c1','s_return1_bvar_3c1',\n       's_return1_bvar_4c1','s_return1_bvar_5c1','s_return1_bvar_6c1',\n       \n        'log_return1_realized_volatility_100_0c1','log_return1_realized_volatility_100_1c1',\n       'log_return1_realized_volatility_100_2c1','log_return1_realized_volatility_100_3c1',\n       'log_return1_realized_volatility_100_4c1','log_return1_realized_volatility_100_5c1','log_return1_realized_volatility_100_6c1',\n       \n        's_return1_realized_volatility_100_0c1','s_return1_realized_volatility_100_1c1',\n       's_return1_realized_volatility_100_2c1','s_return1_realized_volatility_100_3c1',\n       's_return1_realized_volatility_100_4c1','s_return1_realized_volatility_100_5c1','s_return1_realized_volatility_100_6c1',\n       \n       'log_return1_realized_volatility_200_0c1','log_return1_realized_volatility_200_1c1','log_return1_realized_volatility_200_2c1',\n       'log_return1_realized_volatility_200_3c1','log_return1_realized_volatility_200_4c1','log_return1_realized_volatility_200_5c1','log_return1_realized_volatility_200_6c1',\n       \n       'log_return1_realized_1vol_0c1','log_return1_realized_1vol_1c1',\n       'log_return1_realized_1vol_2c1','log_return1_realized_1vol_3c1',\n       'log_return1_realized_1vol_4c1','log_return1_realized_1vol_5c1','log_return1_realized_1vol_6c1',\n     'log_return1_realized_volatility_0c1',\n     'log_return1_realized_volatility_1c1',\n     'log_return1_realized_volatility_2c1', \n     'log_return1_realized_volatility_3c1',\n     'log_return1_realized_volatility_4c1',\n     'log_return1_realized_volatility_5c1', \n     'log_return1_realized_volatility_6c1',\n     'total_volume_sum_0c1',\n     'total_volume_sum_1c1',\n    'total_volume_sum_2c1',\n     'total_volume_sum_3c1',\n     'total_volume_sum_4c1',\n       'total_volume_sum_5c1',\n     'total_volume_sum_6c1',\n     'trade_size_sum_0c1',\n     'trade_size_sum_1c1',\n       'trade_size_sum_2c1',\n     'trade_size_sum_3c1',\n     'trade_size_sum_4c1', \n       'trade_size_sum_5c1',\n     'trade_size_sum_6c1',\n     'trade_order_count_sum_0c1',\n     'trade_order_count_sum_1c1',\n       'trade_order_count_sum_2c1',\n     'trade_order_count_sum_3c1',\n     'trade_order_count_sum_4c1',\n       'trade_order_count_sum_5c1',\n     'trade_order_count_sum_6c1',      \n     'price_spread_sum_0c1',\n     'price_spread_sum_1c1',\n       'price_spread_sum_2c1',\n     'price_spread_sum_3c1',\n     'price_spread_sum_4c1',\n       'price_spread_sum_5c1',\n     'price_spread_sum_6c1',   \n     'bid_spread_sum_0c1',\n     'bid_spread_sum_1c1',\n       'bid_spread_sum_2c1',\n     'bid_spread_sum_3c1',\n     'bid_spread_sum_4c1',\n       'bid_spread_sum_5c1',\n     'bid_spread_sum_6c1',       \n     'ask_spread_sum_0c1',\n     'ask_spread_sum_1c1',\n       'ask_spread_sum_2c1',\n     'ask_spread_sum_3c1',\n     'ask_spread_sum_4c1',\n       'ask_spread_sum_5c1',\n     'ask_spread_sum_6c1',   \n     'volume_imbalance_sum_0c1',\n     'volume_imbalance_sum_1c1',\n    'volume_imbalance_sum_2c1',\n     'volume_imbalance_sum_3c1',\n     'volume_imbalance_sum_4c1',\n       'volume_imbalance_sum_5c1',\n     'volume_imbalance_sum_6c1',       \n     'bid_ask_spread_sum_0c1',\n     'bid_ask_spread_sum_1c1',\n       'bid_ask_spread_sum_2c1',\n     'bid_ask_spread_sum_3c1',\n     'bid_ask_spread_sum_4c1',\n       'bid_ask_spread_sum_5c1',\n     'bid_ask_spread_sum_6c1',\n     'size_tau2_0c1','size_tau2_1c1',\n       'size_tau2_2c1','size_tau2_3c1',\n     'size_tau2_4c1','size_tau2_5c1','size_tau2_6c1',\n     'size_tau_0c1','size_tau_1c1',\n       'size_tau_2c1','size_tau_3c1',\n     'size_tau_4c1','size_tau_5c1','size_tau_6c1',\n   ] \ntrain = pd.merge(train,mat1[nnn],how='left',on='time_id')\ntest = pd.merge(test,mat2[nnn],how='left',on='time_id')","1f9653e3":"train.drop(['size_tau','trade_log_return_realized_volatility_400_std_stock','s_return1_bvar_500','trade_order_count_sum_200','log_return3_bvar_500','log_return4_realized_1vol_400','trade_order_count_sum_100','log_return2_realized_volatility_std_stock','trade_log_return_realized_volatility_std_stock','log_return1_realized_volatility_400_std_stock','log_return4_realized_quarticity_500','trade_df_max','ask_spread_sum','log_return4_bvar_200','log_return1_realized_quarticity_400','log_return4_bvar_100','log_return1_realized_volatility_std_stock','trade_log_return_realized_volatility_200_max_stock','log_return2_realized_volatility_200_min_stock','log_return1_bvar_400','log_return1_realized_volatility_max_stock','trade_log_return_realized_volatility_300_std_stock','log_return2_realized_volatility_200_max_stock','log_return1_realized_volatility_200_max_stock','log_return1_realized_volatility_400_max_stock','log_return2_realized_volatility_400_min_stock','log_return2_realized_volatility_400_max_stock','log_return1_realized_volatility_300_max_stock','log_return2_realized_volatility_300_max_stock','trade_log_return_realized_volatility_min_stock','trade_log_return_realized_volatility_400_max_stock','trade_log_return_realized_volatility_200_min_stock','log_return2_realized_volatility_300_min_stock','log_return2_realized_volatility_max_stock','trade_log_return_realized_volatility_300_min_stock','trade_log_return_realized_volatility_400_min_stock','trade_log_return_realized_volatility_max_stock','log_return2_realized_volatility_300_mean_stock','log_return1_realized_volatility_400_min_stock','trade_log_return_realized_volatility_300_max_stock','log_return1_realized_tripower_quarticity','bid_spread_sum','size_tau2','log_return2_bvar_500','trade_log_return_realized_volatility_200_std_stock','log_return2_realized_volatility_200_std_stock','log_return2_realized_volatility_200_mean_time', 'log_return2_realized_volatility_200_mean_stock','log_return1_realized_volatility_200_std_stock','log_return1_realized_volatility_300_std_stock','log_return4_realized_quarticity_100','log_return3_realized_1vol_400','log_return2_realized_1vol_400','log_return2_realized_1vol_500','log_return4_realized_1vol_300','log_return4_realized_1vol_500','log_return4_realized_1vol_100'], axis = 1, inplace = True)\n\n\ncolNames = [col for col in list(train.columns)\n            if col not in {\"stock_id\", \"time_id\", \"target\", \"row_id\"}]\nlen(colNames)","50e9e47c":"import gc\ndel mat1,mat2\ngc.collect()","2e1b7c11":"train.head(25)","8d6106f7":"train = train.sort_values(by=['time_id', 'stock_id'])\ntrain.reset_index(drop=True, inplace=True)","bdb512d9":"time_ids = train.time_id.unique()","8a038002":"value1 = time_ids[int(len(time_ids)*0.2)]\nvalue2 = time_ids[int(len(time_ids)*0.4)]\nvalue3 = time_ids[int(len(time_ids)*0.6)]\nvalue4 = time_ids[int(len(time_ids)*0.8)]\n\n\nfold5 = train['time_id'].index\nfold4 = train[train['time_id']<value4].index\nfold3 = train[train['time_id']<value3].index\nfold2 = train[train['time_id']<value2].index\nfold1 = train[train['time_id']<value1].index\n\nfold5val = train[train['time_id']>=value4].index\nfold4val = train[(train['time_id']<value4) & (train['time_id']>=value3)].index\nfold3val = train[(train['time_id']<value3) & (train['time_id']>=value2)].index\nfold2val = train[(train['time_id']<value2) & (train['time_id']>=value1)].index\nfold1val = train[train['time_id']<value1].index","48e1c174":"train.head(25)","e796068a":"train.tail(25)","7e247ec2":"import lightgbm as lgb\n\nseed0=2021\nparams0 = {\n    'objective': 'rmse',\n    'boosting_type': 'gbdt',\n    'max_depth': -1,\n    'max_bin':100,\n    'min_data_in_leaf':500,\n    'learning_rate': 0.05,\n    'subsample': 0.72,\n    'subsample_freq': 4,\n    'feature_fraction': 0.5,\n    'lambda_l1': 0.5,\n    'lambda_l2': 1.0,\n    'categorical_column':[0],\n    'seed':seed0,\n    'feature_fraction_seed': seed0,\n    'bagging_seed': seed0,\n    'drop_seed': seed0,\n    'data_random_seed': seed0,\n    'n_jobs':-1,\n    'verbose': -1}\nseed1=42\nparams1 = {\n        'learning_rate': 0.1,        \n        'lambda_l1': 2,\n        'lambda_l2': 7,\n        'num_leaves': 800,\n        'min_sum_hessian_in_leaf': 20,\n        'feature_fraction': 0.8,\n        'feature_fraction_bynode': 0.8,\n        'bagging_fraction': 0.9,\n        'bagging_freq': 42,\n        'min_data_in_leaf': 700,\n        'max_depth': 4,\n        'categorical_column':[0],\n        'seed': seed1,\n        'feature_fraction_seed': seed1,\n        'bagging_seed': seed1,\n        'drop_seed': seed1,\n        'data_random_seed': seed1,\n        'objective': 'rmse',\n        'boosting': 'gbdt',\n        'verbosity': -1,\n        'n_jobs':-1,\n    }\nseed2 = 29\nparams2 = {\n        'learning_rate': 0.15,        \n        'lambda_l1': 2.154360665259325,\n        'lambda_l2': 6.711089761523827,\n        'num_leaves': 2769,\n        'min_sum_hessian_in_leaf': 20.44437160769411,\n        'feature_fraction': 0.7921473067441019,\n        'feature_fraction_bynode': 0.8083803860191322,\n        'bagging_fraction': 0.9726755660563261,\n        'bagging_freq': 42,\n        'min_data_in_leaf': 1690,\n        'max_depth': 4,\n        'seed': seed2,\n        'feature_fraction_seed': seed2,\n        'bagging_seed': seed2,\n        'drop_seed': seed2,\n        'data_random_seed': seed2,\n        'objective': 'rmse',\n        'boosting': 'gbdt',\n        'verbosity': -1,\n        'n_jobs': -1,\n    } \n# Function to early stop with root mean squared percentage error\ndef rmspe(y_true, y_pred):\n    return np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true)))\n\ndef feval_rmspe(y_pred, lgb_train):\n    y_true = lgb_train.get_label()\n    return 'RMSPE', rmspe(y_true, y_pred), False\n\ndef train_and_evaluate_lgb(train, test, params,boost=1000):\n    # Hyperparammeters (just basic)\n    \n    features = [col for col in train.columns if col not in {\"time_id\", \"target\", \"row_id\"}]\n    y = train['target']\n    # Create out of folds array\n    oof_predictions = np.zeros(train.shape[0])\n    # Create test array to store predictions\n    test_predictions = np.zeros(test.shape[0])\n    # Create a KFold object\n    #kfold = TimeSeriesSplit(n_splits = 10)\n    # Iterate through each fold\n    i = 0\n    for z, zz in [(fold1, fold2val), (fold2, fold3val), (fold3, fold4val), (fold4, fold5val),]:\n        i=i+1\n        print(f'Training fold {i}')\n        x_train, x_val = train.iloc[z], train.iloc[zz]\n        y_train, y_val = y.iloc[z], y.iloc[zz]\n        # Root mean squared percentage error weights\n        train_weights = 1 \/ np.square(y_train)\n        val_weights = 1 \/ np.square(y_val)\n        train_dataset = lgb.Dataset(x_train[features], y_train, weight = train_weights)\n        val_dataset = lgb.Dataset(x_val[features], y_val, weight = val_weights)\n        model = lgb.train(params = params,\n                          num_boost_round=boost,\n                          train_set = train_dataset, \n                          valid_sets = [train_dataset, val_dataset], \n                          verbose_eval = 250,\n                          early_stopping_rounds=50,\n                          feval = feval_rmspe\n                         )\n        # Add predictions to the out of folds array\n        oof_predictions[zz] = model.predict(x_val[features])\n        # Predict the test set\n        test_predictions = model.predict(test[features])\n    #rmspe_score = rmspe(y, oof_predictions)\n    #print(f'Our out of folds RMSPE is {rmspe_score}')\n    lgb.plot_importance(model,max_num_features=20, importance_type='gain')\n    #make ppredictions\n    #train_weights = 1 \/ np.square(y)\n    #train_dataset = lgb.Dataset(train[features], y, weight = train_weights)\n    #model = lgb.train(params = params,\n     #                 num_boost_round=boost,\n     #                 early_stopping_rounds=50,\n     ##                 train_set = train_dataset)\n    # Add predictions to the out of folds array\n    #test_predictions = model.predict(test[features])\n    \n    pd.DataFrame({'Value':model.feature_importance(importance_type='gain'),'Feature':features}).sort_values(by=\"Value\",ascending=False).to_csv(f'features{boost}.csv')\n    # Return test predictions\n    return test_predictions\n# Traing and evaluate\npredictions_lgb= train_and_evaluate_lgb(train, test,params0, boost=5000)\npredictions_lgb1= train_and_evaluate_lgb(train, test,params1, boost=6000)\npredictions_lgb2= train_and_evaluate_lgb(train, test,params2,boost=10000)\n\ntest['target'] = predictions_lgb*0.5+predictions_lgb1*0.25+predictions_lgb2*0.25\ntest[['row_id', 'target']].to_csv('submission.csv',index = False)","b52c12c2":"The additional features: estimates of realized quarticity and volatility are also mentioned in my blog post\nhttps:\/\/dspyt.com\/advanced-realized-volatility-and-quarticity\/"}}