{"cell_type":{"903c4307":"code","c1add0b2":"code","c3b0e92e":"code","20c2d656":"code","b3060a39":"code","bfd32066":"code","2411f38a":"code","d94b388c":"code","c7238f6d":"code","0eda7a7a":"code","5d83fe09":"code","867f1387":"code","ba0faa17":"code","5c24c399":"code","f8d10b29":"code","81e11fb5":"code","95dcde4e":"code","dcb35d4b":"code","957317d7":"code","d952d7fa":"code","8f58c07a":"code","fc6ca506":"code","8b6e6b69":"code","49d5bbe5":"code","d40d37a8":"code","6cd74af0":"code","397ba457":"code","f084494b":"code","1f1db45e":"code","34c43ef4":"code","d37c11f9":"code","37a541f9":"code","f80b92d4":"code","91ccccea":"code","a0bde37a":"code","00ed9aaf":"code","433f5af0":"code","06aa8465":"code","6cd4d05c":"code","86c6f9f9":"code","7ac4eab4":"code","56e27f17":"code","38dc488c":"code","8812ca96":"code","94479aba":"code","0ad5dfd1":"code","fea989ca":"code","2e41c72f":"code","8ee6eb4b":"code","c1208507":"code","33a6511d":"markdown","29ba959f":"markdown","7dc187ef":"markdown","9d2dc3ce":"markdown","3153f0c8":"markdown","63ab1402":"markdown","c9221786":"markdown","1bd58ede":"markdown","0530633d":"markdown","6b9f512d":"markdown","df280907":"markdown","d7b0fe9f":"markdown","d0776b86":"markdown","2a771950":"markdown","3bc86ecf":"markdown","15a52ee5":"markdown","9bc37b8c":"markdown"},"source":{"903c4307":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c1add0b2":"import pandas as pd\nimport numpy as np\nimport seaborn as sns \nimport matplotlib.pyplot as plt","c3b0e92e":"data = pd.read_csv('..\/input\/boston-housing-dataset\/HousingData.csv')","20c2d656":"data.shape","b3060a39":"data.head(10)","bfd32066":"col_names = ['CrimeRate', 'ZonedRatio', 'IndusRatio', \n             'AlongRiver', 'NO2Level', 'RoomsPerHouse', \n             'OldHomeRatio', 'DisFromCenter', 'RoadAccessIndex', \n             'PropTaxRate', 'PupilTeacherRatio', 'Black', 'LowestPopulation', 'MedianHomeValue']","2411f38a":"data.columns = col_names\ndata.head(10)","d94b388c":"data.info()","c7238f6d":"data.isnull().sum()","0eda7a7a":"data = data.replace('Na', np.nan)","5d83fe09":"data.isnull().sum().sort_values(ascending=False)","867f1387":"data = data.fillna(data.mean())","ba0faa17":"data.isnull().sum()","5c24c399":"data.describe()","f8d10b29":"features = data.drop('MedianHomeValue', axis=1)\ntarget = data['MedianHomeValue']\nfeatures.shape, target.shape","81e11fb5":"from yellowbrick.target import FeatureCorrelation\nvis = FeatureCorrelation(lables = features.columns)\nvis.fit(features, target)\nvis.poof()","95dcde4e":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_regression","dcb35d4b":"select_univariate = SelectKBest(f_regression, k=5).fit(features, target)","957317d7":"feature_mask = select_univariate.get_support()\nfeature_mask","d952d7fa":"features.columns[feature_mask]","8f58c07a":"select_univariate.scores_","fc6ca506":"pd.DataFrame({'FeatureName': features.columns, \n              'Score': select_univariate.scores_}).sort_values(by='Score', \n                                                               ascending=False)","8b6e6b69":"uni_df = pd.DataFrame({'Univariate Method': features.columns[feature_mask]})\nuni_df","49d5bbe5":"from sklearn.linear_model import LinearRegression\nfrom sklearn.feature_selection import RFE\nlinear_regression = LinearRegression()","d40d37a8":"rfe = RFE(estimator = linear_regression, n_features_to_select = 5, step = 1)","6cd74af0":"rfe.fit(features,target)","397ba457":"rfe_features = features.columns[rfe.support_]\nrfe_features","f084494b":"pd.DataFrame({'FeatureName': features.columns, \n              'Rank': rfe.ranking_}).sort_values(by='Rank')","1f1db45e":"rfe_df = pd.DataFrame({'RFE Method': rfe_features})\nrfe_df","34c43ef4":"from mlxtend.feature_selection import SequentialFeatureSelector","d37c11f9":"feature_selector = SequentialFeatureSelector(LinearRegression(),  \n                                             k_features=5,\n                                             forward=False,\n                                             scoring='neg_mean_squared_error',\n                                             cv=4)","37a541f9":"feature_filtered = feature_selector.fit(features, target)","f80b92d4":"backward_features = list(feature_filtered.k_feature_names_)\nbackward_features","91ccccea":"back_df = pd.DataFrame({'Backward Method': backward_features})\nback_df","a0bde37a":"feature_selector = SequentialFeatureSelector(LinearRegression(),  \n                                             k_features=5,\n                                             forward=True,\n                                             scoring='neg_mean_squared_error',\n                                             cv=4)","00ed9aaf":"feature_filtered = feature_selector.fit(features, target)","433f5af0":"forward_features = list(feature_filtered.k_feature_names_)\nforward_features","06aa8465":"forw_df = pd.DataFrame({'Forward Method': forward_features})\nforw_df","6cd4d05c":"from sklearn.linear_model import  Lasso","86c6f9f9":"lasso = Lasso(alpha=1.0)\nlasso.fit(features, target)","7ac4eab4":"lasso_coef = pd.DataFrame({'Feature': features.columns, \n                           'LassoCoef': lasso.coef_}).sort_values(by = 'LassoCoef',\n                                                                 ascending =False)\nlasso_coef","56e27f17":"lasso_df = lasso_coef.sort_values(by='LassoCoef', ascending=False).head(5)\nlasso_df = pd.DataFrame({'Lasso Method': lasso_df['Feature'].values})\nlasso_df","38dc488c":"comp_selected_col_df = [uni_df, \n                        rfe_df, \n                        back_df, \n                        forw_df, \n                        lasso_df]\n\nfinal_df = pd.concat(comp_selected_col_df, axis=1)\nfinal_df","8812ca96":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error","94479aba":"result = []\ndef best_score(name, X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n    linear_model = LinearRegression(normalize = True).fit(X_train, y_train)\n    print(name)\n    print('Training score:', linear_model.score(X_train, y_train))\n    y_pred = linear_model.predict(X_test)\n    print('r2_score:', r2_score(y_test, y_pred))","0ad5dfd1":"best_score('Univariate', \n           features[final_df['Univariate Method'].values], \n           target)","fea989ca":"best_score('Recursive', \n           features[final_df['RFE Method'].values], \n           target)","2e41c72f":"best_score('Backward', \n           features[final_df['Backward Method'].values], \n           target)","8ee6eb4b":"best_score('Forward', \n           features[final_df['Forward Method'].values], \n           target)","c1208507":"best_score('Lasso', \n           features[final_df['Lasso Method'].values], \n           target)","33a6511d":"#### Visualize the feature correlations","29ba959f":"#### View rankings of all the features","7dc187ef":"**Selecting Feature and Targer**","9d2dc3ce":"### 2. Import RFE(Recursive Feature Elimination) and LinearRegression","3153f0c8":"### Make a function to find training score and testing score","63ab1402":"### Selected Backward selecter features names","c9221786":"## Regularization technique for feature selection ","1bd58ede":"### Lasso","0530633d":"### Importing Univariate feature selection class and methods","6b9f512d":"### Selected features, according to RFE Ranking","df280907":"### Recursive","d7b0fe9f":"### 1. Univariate features","d0776b86":"**Backward Selection**","2a771950":"### Univariate ","3bc86ecf":"### Forward feature selection","15a52ee5":"### Forward","9bc37b8c":"### Backward"}}