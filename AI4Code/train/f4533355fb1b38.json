{"cell_type":{"3e1d91c0":"code","8f7ae54e":"code","5748324e":"code","863c3809":"code","ae16bad3":"code","d47f4e00":"code","7b789509":"code","611921a9":"code","14c850aa":"code","e43ec3e8":"code","a26529da":"markdown","92d266df":"markdown","9285730e":"markdown","c9e540a8":"markdown","e81aa5f5":"markdown","1efe6a22":"markdown","ff4ad3b5":"markdown","15477ffd":"markdown"},"source":{"3e1d91c0":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport os.path\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf","8f7ae54e":"image_dir = Path('..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset')","5748324e":"# Get filepaths and labels\nfilepaths = list(image_dir.glob(r'**\/*.png'))\nlabels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], filepaths))\n\nfilepaths = pd.Series(filepaths, name='Filepath').astype(str)\nlabels = pd.Series(labels, name='Label')\n\n# Concatenate filepaths and labels\nimage_df = pd.concat([filepaths, labels], axis=1)\n\n# Drop GT images\nimage_df['Label'] = image_df['Label'].apply(lambda x: np.NaN if x[-2:] == 'GT' else x)\nimage_df = image_df.dropna(axis=0)\n\n# Sample 200 images from each class\nsamples = []\n\nfor category in image_df['Label'].unique():\n    category_slice = image_df.query(\"Label == @category\")\n    samples.append(category_slice.sample(200, random_state=1))\n\nimage_df = pd.concat(samples, axis=0).sample(frac=1.0, random_state=1).reset_index(drop=True)","863c3809":"image_df","ae16bad3":"train_df, test_df = train_test_split(image_df, train_size=0.7, shuffle=True, random_state=1)","d47f4e00":"train_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n    validation_split=0.2\n)\n\ntest_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input\n)","7b789509":"train_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='training'\n)\n\nval_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='validation'\n)\n\ntest_images = test_generator.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=False\n)","611921a9":"pretrained_model = tf.keras.applications.MobileNetV2(\n    input_shape=(224, 224, 3),\n    include_top=False,\n    weights='imagenet',\n    pooling='avg'\n)\n\npretrained_model.trainable = False","14c850aa":"inputs = pretrained_model.input\n\nx = tf.keras.layers.Dense(128, activation='relu')(pretrained_model.output)\nx = tf.keras.layers.Dense(128, activation='relu')(x)\n\noutputs = tf.keras.layers.Dense(9, activation='softmax')(x)\n\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\n\nhistory = model.fit(\n    train_images,\n    validation_data=val_images,\n    epochs=100,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=3,\n            restore_best_weights=True\n        )\n    ]\n)","e43ec3e8":"results = model.evaluate(test_images, verbose=0)\n\nprint(\"    Test Loss: {:.5f}\".format(results[0]))\nprint(\"Test Accuracy: {:.2f}%\".format(results[1] * 100))","a26529da":"# Task for Today  \n\n***\n\n## Fish Image Species Classification  \n\nGiven *images of fish*, let's try to predict the **species** of fish present in a given image.\n\nWe will use a TensorFlow\/Keras pretrained CNN to make our predictions.","92d266df":"# Results","9285730e":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/E_3-9sGq7jk","c9e540a8":"# Loading the Images","e81aa5f5":"# Training","1efe6a22":"# Getting Started","ff4ad3b5":"# Creating File DataFrame","15477ffd":"# Load Pretrained Model"}}