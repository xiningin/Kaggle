{"cell_type":{"25e4d7fa":"code","33da1eae":"code","1d70159b":"code","6f9e0f73":"code","3b23e16e":"code","85927688":"code","ba4d8f0d":"code","3304e9e2":"code","906bd774":"code","a0c85d81":"code","ffad6acb":"code","a88803c4":"code","a00b180d":"code","af890472":"code","348136b4":"code","d5ca3296":"code","9022c4bf":"code","864504fa":"code","41997b24":"code","d284827c":"code","831c3c8b":"code","0c649bcf":"code","68658551":"code","51ef706e":"code","bf108613":"code","3f19c6ef":"code","4a295906":"code","c59f7fe0":"code","46ed6ca8":"code","a11f2b65":"code","d9e381fa":"code","6306d5f7":"code","be3d00dc":"code","97a04ec8":"code","3c411201":"code","fea3de0d":"code","13dfb219":"code","ccce418b":"code","b3be85ed":"markdown","ffaf517e":"markdown","3eadd24d":"markdown","ac9a676e":"markdown","37745ff9":"markdown","6278195f":"markdown","71365429":"markdown","1bc4ecae":"markdown","16feb2eb":"markdown","66d2399d":"markdown","9f7849ca":"markdown","26bf35cf":"markdown","3be2de4e":"markdown","a3ab119b":"markdown","4fd98bd4":"markdown","0f67611a":"markdown","4cf9f786":"markdown","a3160e2f":"markdown","ab6d2ed2":"markdown","454fa196":"markdown","91e0a7a6":"markdown","ca0b6ec7":"markdown","3e7c8f41":"markdown","0c779c04":"markdown"},"source":{"25e4d7fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","33da1eae":"data=pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")\ndata.info()","1d70159b":"data.columns\n","6f9e0f73":"data.corr()","3b23e16e":"data.head(10)","85927688":"plt.style.use('classic') # yaz\u0131lar\u0131m\u0131z\u0131n estetik durmas\u0131 i\u00e7in matplotun class\u0131c stiilini kulland\u0131k.\ndata.age.plot(kind=\"line\",color=\"r\",label=\"age\",linewidth=1,alpha=1,marker=\"*\",linestyle=\":\",grid=True,figsize=(15,8))\nplt.legend(loc=0)    #best de  yazabilirdik. bu gragik ba\u015fl\u0131g\u0131n\u0131 (label) \u0131  uygun yere koyar.\nplt.xlabel(\"index\")\nplt.ylabel(\"age\")\nplt.title(\"ya\u015f da\u011f\u0131l\u0131m\u0131\")\nplt.show()","ba4d8f0d":"# bins = number of bar in figure\n\ndata.age.plot(kind = 'hist',bins = 75,figsize = (18,12),color=\"blue\")\nplt.title(\"age graph \")\nplt.show()","3304e9e2":"# Scatter Plot\ndata.plot(kind='scatter', x='trestbps', y='chol',alpha = 0.5,color=\"red\")\nplt.xlabel('trestbps')              # label = name of label\nplt.ylabel('chol')\nplt.title('trestbps chol Scatter Plot')\nplt.show()","906bd774":"# data setimizin i\u00e7inde ka\u00e7 ki\u015finin \u015feker hastas\u0131 oldugunu bulduk.\nlen(data[data.target==1])\n","a0c85d81":"#data[data.chol>200]  tablo seklinde verir\nlen(data[data.chol>200]) \n","ffad6acb":"data2 = data[data.target==1]\ndata2","a88803c4":"data2.sex.plot(kind=\"hist\",color=\"green\",bins=20)\nplt.show()","a00b180d":"dictionary={\"Galatasaray\":\"Gs\",\"Fenerbah\u00e7e\":\"Fb\",\"Trabzonspor\":\"Ts\"}\nprint(dictionary.keys())\nprint(dictionary.values())","af890472":"dictionary[\"Galatasaray\"]=\"r\" #update dictionary\nprint(dictionary)\ndictionary[\"Be\u015fikta\u015f\"]=\"BJK\" #new blok\ndel dictionary['Galatasaray']\nprint(dictionary)     #delete\nprint(\"Galatasaray\" in dictionary) #we check the contents\ndictionary.clear() #deleting dictionary\nprint(dictionary)","348136b4":"series = data['sex']        \nprint(type(series))\n\ndataframe = data[['sex']] \nprint(type(dataframe))","d5ca3296":"sayac = 0\ntoplam=0\nwhile sayac<= 10:\n    sayac=sayac+ 2\n    toplam=toplam+sayac\n \nprint(\"0 ile 10 aras\u0131ndaki \u00e7ift say\u0131lar\u0131n toplam:{0}\".format(toplam))","9022c4bf":"# example of what we learn above\ndef tuble_ex():\n    \"\"\" return defined t tuble\"\"\"\n    t = (4,5,6)\n    return t\na,b,c = tuble_ex()\n\nprint(a,b,c)\n\nprint(a,b)\n\nprint(a)\n","864504fa":"# guess print what\n\nx = 5\ndef f():\n    x = 2\n    return x\nprint(x)          # x = 5 global scope\nprint(f())        # x = 2 local scope","41997b24":"# What if there is no local scope\nx = 3\ndef f():\n    k = x**2        # there is no local scope x\n    return k\nprint(f())         # it uses global scope x\n# First local scopesearched, then global scope searched, if two of them cannot be found lastly built in scope searched.","d284827c":"# How can we learn what is built in scope\n\nimport builtins\ndir(builtins)","831c3c8b":"def function1():                             # outer function\n    print (\"Hello from outer function\")\n    def function2():                          # inner function\n        print (\"Hello from inner function\")\n    function2()\n\nfunction1()","0c649bcf":"#rectangular perimeter calculation\n\ndef rectangle():\n    \n    def rectangular_perimeter():\n        \n        a=5     #long edge\n        b=4     #short edge\n        A= a + b\n        \n        return A\n    \n    return rectangular_perimeter()*2\n\nprint(rectangle())\n    \n    ","68658551":"def function1(name):\n    def function2():\n        print('Hello ' + name)\n    return function2\n\nfunc = function1('Kio')\nfunc()","51ef706e":"dir(\"args\")","bf108613":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n# what if we want to change default arguments\nprint(f(5,4,3))","3f19c6ef":"# default arguments\ndef a(name,msg=\"Good Morning\"):\n    \n    print(\"hello\",name,\",\",msg)\n\na(\"Kio\")\n\nprint(\"\")\n# what if we want to change default arguments\na(\"ahmet\",\"How are you?\")","4a295906":"# flexible arguments *args\ndef f(*args):\n    \n    for i in args:\n        print(i)\n        \nf(\"a\")\nprint(\"\")\nf(1,2,3,4,5)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               \n        print(key, \" \", value)\nf(country = 'spain', capital = 'madrid', population = 123456)","c59f7fe0":"#user defined fuctions(long way)\ndef cube(y): \n    return y*y*y; \n  \ng = lambda x: x*x*x \nprint(g(7)) \n  \nprint(cube(5))","46ed6ca8":"# map() with lambda()  \na = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61] \nfinal_list = list(map(lambda x: x*2 , a)) \nprint(final_list)","a11f2b65":"a = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61] \nfinal_list = list(filter(lambda x: (x%2 != 0) , a)) \nprint(final_list)","d9e381fa":"from functools import reduce\na = [5, 8, 10, 20, 50, 100] \nsum = reduce((lambda x, y: x + y), a) \nprint (sum) ","6306d5f7":"# iteration example\nname = \"ronaldo\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration\n","be3d00dc":"# zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","97a04ec8":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","3c411201":"# Assign integer values to `a` and `b`\na = 4\nb = 9\n\n# Create a list with the variables `a` and `b` \ncount_list = [1,2,3,a,5,6,7,8,b,10]\n\nprint([i for i in count_list])","fea3de0d":"#example           Q = {x3: x in {0 ... 10}}\n#create a list \n\nQ=[x**3 for x in range(11)]\nprint(list(Q))\n","13dfb219":"# Conditionals on iterable\nnum1 = [8,9,10]\nnum2 = [ i*2 if i\/2==0 else i-5  for i in num1]\nprint(num2)","ccce418b":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","b3be85ed":"zip(): zip lists\n\n* combine two lists\n","ffaf517e":"**LIST COMPREHENS\u0130ON**","3eadd24d":"**USER DEFINED FUNCTION**\n\nWhat we need to know about functions:\n\n* docstrings: documentation for functions.\nExample:\n\nfor f():\n\n\"\"\"This is docstring for documentation of function f\"\"\"\ntuble: sequence of immutable python objects.\ncant modify values\n\n* tuble uses paranthesis like tuble = (1,2,3)\nunpack tuble into several variables like a,b,c = tuble","ac9a676e":"**Nested Fuction**\n\nwhat is this Nested Fuction?\n\n* Python supports the concept of a \"nested function\" or \"inner function\", which is simply a function defined inside another function\n\n* function inside function.\n\n\n","37745ff9":"Ba\u015fta import etmi\u015ftik\n\ndata=pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")","6278195f":"**PYTHON DATA SCIENCE TOOLBOX**","71365429":"kolestrolu 200 den fazla olan ki\u015fileri bulal\u0131m","1bc4ecae":"\n**DEFAULT and FLEXIBLE ARGUMENTS**\n\nDefault argument example:\n\n* def f(a, b=1):\n\n  \"\"\" b = 1 is default argument\"\"\"\n  \n* Flexible argument example:\n\ndef f(*args):\n\n \"\"\" *args can be one or more\"\"\"\n\n* def f(** kwargs)\n\n \"\"\" **kwargs is a dictionary\"\"\"\n\n\nlets write some code to practice\n\n\n\n\n\n\n","16feb2eb":"\u00d6rnek olarak \u015fimdi 0\u2019dan 10\u2019e kadar olan \u00e7ift say\u0131lar\u0131n toplam\u0131n\u0131 yazd\u0131ran kodu yazal\u0131m","66d2399d":" reduce()","9f7849ca":"**DATA SCIENTIST**","26bf35cf":"columns lardaki ifadelerin anlamlar\u0131na bakal\u0131m \n\n1. age:Ya\u015f\n2. sex:cinsiyet-1 erke\u011fi,s\u0131f\u0131r ise kad\u0131n\u0131 ifade ediyor\n3. cp(chest pain):g\u00f6\u011f\u00fcs a\u011fr\u0131s\u0131 (1:tipik angina 2:atipik angina 3:non-anginal a\u011fr\u0131 0:asemptomatik(a\u011fr\u0131 yok))\n4. trestbps(the person's resting blood pressure):ki\u015finin dinlenim halinde \u00f6l\u00e7\u00fclen kan bas\u0131nc\u0131(mm-Hg)\n5. chol:ki\u015finin mg\/dl cinsinden kolesterol \u00f6l\u00e7\u00fcm\u00fc\n6. bs(fasting blood sugar):ki\u015finin a\u00e7l\u0131k kan \u015fekeri d\u00fczeyi(de\u011ferin 1 olmas\u0131 120 mg\/dl den y\u00fcksek oldu\u011funu,0 ise 120 mg\/dl den d\u00fc\u015f\u00fck oldu\u011funu g\u00f6sterir.)\n7. restecg(resting electrocardiographic measurement):dinlenim durumundaki EKG de\u011ferlendirilmesi (0=normal,1=ST-T anormalileri bulunmas\u0131(elevasyon\/depresyon),2=sol ventrik\u00fclde hipertrofi bulgusunun kesin veya y\u00fcksek olas\u0131l\u0131kl\u0131 olmas\u0131\n8. thalach: ki\u015finin kalp at\u0131m h\u0131z\u0131n\u0131n ula\u015ft\u0131\u011f\u0131 maksimum de\u011fer\n9. exang:egzersiz ind\u00fcklenmi\u015f angina varl\u0131\u011f\u0131(1=var,0:yok)\n10. oldpeak(ST depression induced by exercise relative to rest):dinlenme durumuna g\u00f6re egzersizle artan ST depresyonu \n11. slope(the slope of the peak exercise ST segment ):maksimum egzersiz durumundaki ST segmenti e\u011fimi\n12. ca(number of major vessels): Fluoroscopy ile boyanm\u0131\u015f g\u00f6sterilen b\u00fcy\u00fck damar say\u0131s\u0131(0-3)\n13. thal(thalassemia):talasemi (1:normal,2:kal\u0131c\u0131 defekt,3:geri d\u00f6n\u00fc\u015f\u00fcml\u00fc defekt)\n14. target:kalp hastal\u0131\u011f\u0131(0:yok,1:var)\n","3be2de4e":"Bu verilerin birbirleri ile ili\u015fkileri a\u015fag\u0131daki gibidir","a3ab119b":"Histogram graph was drawn by age.","4fd98bd4":"**Dictionary**\n","0f67611a":"\u015eimdi de hastal\u0131kta cinsiyetin aras\u0131ndaki ili\u015fkiyi inceleyelim.\n(1=erkek 0=kad\u0131n)","4cf9f786":"**WH\u0130LE AND FOR LOOP**","a3160e2f":"**Pandas**","ab6d2ed2":"**LAMBDA FUNCTION**\nFaster way of writing function","454fa196":"Hastal\u0131\u011f\u0131 bulunduranlar\u0131 bir dataya e\u015fitleyip inceleme yapal\u0131m","91e0a7a6":"**ANONYMOUS FUNCT\u0130ON**\n\nLike lambda function but it can take more than one arguments.\n\nmap(func,seq) : applies a function to all the items in a list","ca0b6ec7":"filter()","3e7c8f41":"SCOPE\n\nwhat is the scope?\n\nA variable is only available from inside the region it is created. This is called scope.\n\nThere are three types of scope:\n    \n* global: defined main body in script\n* local: defined in a function\n* built in scope: names in predefined built in scope module such as print, len\n\nLets make some basic examples","0c779c04":"**ITERATORS**\niterable is an object that can return an iterator\n\niterable: an object with an associated iter() method\n\nexample: list, strings and dictionaries\n\niterator: produces next value with next() method"}}