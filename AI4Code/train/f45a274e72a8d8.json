{"cell_type":{"535ebd0f":"code","fd8a0ea6":"code","43455dff":"code","7274d829":"code","5b4532a6":"code","26d6ca4d":"code","fb64a9e2":"code","05b48ab6":"code","ac052a2e":"code","573a5a58":"code","699fce5a":"code","4bdeeb1b":"code","6c15d421":"code","c0581164":"code","98cc257a":"code","c2b1787b":"code","93814379":"code","361f4672":"code","1e31eca4":"code","4db3c1ea":"code","88c89435":"markdown","86a3092a":"markdown","3752d865":"markdown","b1637488":"markdown","a30db4c4":"markdown","3b222c1a":"markdown","2b75a835":"markdown","1135064f":"markdown","8d939dca":"markdown","974f9758":"markdown","d9d2af7b":"markdown","fb0d7494":"markdown","ae1e368b":"markdown","173b0ebc":"markdown","96545500":"markdown"},"source":{"535ebd0f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # plotting\nimport seaborn as sns # plotting\nimport plotly.express as px # plotting\nimport plotly.figure_factory as ff # plotting\nimport random\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd8a0ea6":"# Load paths to CSV\ntrain_csv_path = \"\/kaggle\/input\/digit-recognizer\/train.csv\"\ntest_csv_path = \"\/kaggle\/input\/digit-recognizer\/test.csv\"\nsubmission_csv_path = \"\/kaggle\/input\/digit-recognizer\/gender_submission.csv\"","43455dff":"# Generate dataframes from CSVs\ntrain_df = pd.read_csv(train_csv_path)\ntest_df = pd.read_csv(test_csv_path)","7274d829":"# View first data entries\ntrain_df.head()","5b4532a6":"# View first data entries\ntest_df.head()","26d6ca4d":"# Shape of the dataset\ntrain_df.shape","fb64a9e2":"# Shape of the dataset\ntest_df.shape","05b48ab6":"# Check for any null values\ntrain_df.isnull().any().describe()","ac052a2e":"# Check for any null values\ntest_df.isnull().any().describe()","573a5a58":"# Count of the labels\ntrain_df[\"label\"].value_counts()","699fce5a":"# Plot the label distribution\nsns.countplot(x = train_df[\"label\"])","4bdeeb1b":"# Function to randomly view some images\ndef random_view(X, title, y = None):\n    fig, axs = plt.subplots(3, 3, sharex= True, sharey = True, figsize = (10, 10))\n    fig.suptitle(title)\n    \n    for i in range(3):\n        for j in range(3):\n            n = random.randint(0, len(X))\n            axs[i][j].imshow(X.iloc[n].values.reshape(28, 28), cmap = 'Greys')\n            if y is not None:\n                axs[i][j].set_title(y.iloc[n])\n                \n    fig.show()","6c15d421":"# Training Images\nrandom_view(train_df.drop('label', axis = 1), \"TRAINING IMAGES\", train_df['label'])","c0581164":"# Testing Images\nrandom_view(test_df, \"TESTING IMAGES\")","98cc257a":"# Segregate the dataframes based on separate labels\ndigit_df = [None for i in range(10)]\n\nfor index in range(10):\n    df = train_df.loc[train_df['label'] == index]\n    digit_df[index] = df","c2b1787b":"# Randomly view each label\nfor label in range(10):\n    random_view(digit_df[label].drop('label', axis = 1), str(label))","93814379":"# Project the dataset into 60 principal components\npca = PCA(n_components = 60)\nprincipal_components = pca.fit(train_df.drop('label', axis = 1))\ntransformed_data = principal_components.transform(train_df.drop('label', axis = 1))","361f4672":"# Visualize the dataset\neigenvalues = principal_components.components_.reshape(60, 28, 28)\n\n# Plot the eigenvalues\nfig, axs = plt.subplots(6, 10, sharex= True, sharey = True, figsize = (20, 20))\nfig.suptitle(\"EIGENVALUES\")\n\nindex = 0\nfor i in range(6):\n    for j in range(10):\n        axs[i][j].imshow(eigenvalues[index], cmap = 'jet')\n        axs[i][j].set_title(str(index))\n        index += 1\n\nfig.show()","1e31eca4":"# Project the dataset into 3D\ntsne = TSNE(n_components = 3, perplexity = 50)\nprojections = tsne.fit_transform(train_df.drop('label', axis = 1))","4db3c1ea":"# Visualize the dataset\nprojection_df = pd.DataFrame(projections, columns = [\"X\", \"Y\", \"Z\"])\nprojection_df[\"Label\"] = train_df[\"label\"]\n\nfig = px.scatter_3d(projection_df, x='X', y='Y', z='Z',\n                    color='Label')\nfig.show()","88c89435":"1. [Intro to Dimensionality Reduction](https:\/\/www.kaggle.com\/arthurtok\/interactive-intro-to-dimensionality-reduction)\n2. [PCA using Python](https:\/\/towardsdatascience.com\/pca-using-python-scikit-learn-e653f8989e60)\n3. [Manifold Learning](https:\/\/www.youtube.com\/watch?v=j8080l9Pvic)\n4. [How to use t-SNE effectively](https:\/\/distill.pub\/2016\/misread-tsne\/)","86a3092a":"## Implications\n- No data imputation required\n- 784 pixels in one image implies 28x28 matrix of a single image\n- No need to apply any distribution equalization techniques (if they exist)","3752d865":"# Exploration in Lower Dimensions","b1637488":"# References","a30db4c4":"## View random images","3b222c1a":"# Basic Data Exploration","2b75a835":"## t-Distributed Stochastic Neighbor Embedding","1135064f":"# Exploratory Data Analysis\n\nThis notebook is intended for doing Exploratory Data Analysis on the MNIST digits dataset, \nprovided in the Digit Recognizer Knowledge Competition.\nNoticing that there were not any separate EDA notebooks for this competition \n(Titanic Competition had a lot of EDA notebooks), I have made this notebook to fill the gap.\n\nHope you like it!\n\nPlease do suggest any feedback and improvements!","8d939dca":"## View specific label images","974f9758":"# Explore the Dataset","d9d2af7b":"# Loading Dataset","fb0d7494":"## Principal Component Analysis","ae1e368b":"# Univariate Analysis","173b0ebc":"## Observations\n- There are 42000 training examples and 28000 labels to predict\n- There are 784 pixels in one training example\n- The distribution of the training labels is almost uniform, just to note, 1 has the highest number of instances and 5 has the lowest number of instances\n- There are no null values in the data","96545500":"# Importing Libraries"}}