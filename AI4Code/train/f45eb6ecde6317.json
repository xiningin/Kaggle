{"cell_type":{"a08b2979":"code","a311a7e7":"code","7ec6ff39":"code","ea78e250":"code","1d45a0ee":"code","8410d1f3":"code","5a5d536d":"code","79656eb6":"code","e4468d83":"code","9b8db3d8":"code","2eec33f3":"code","992ce73c":"code","07c53377":"code","588ec474":"code","207d96a8":"code","cdca21a8":"code","afcb99f9":"code","6823b0ea":"code","4c9adc6f":"code","1ef16801":"code","0431180f":"code","027760ba":"code","3028d443":"code","75ed9b5e":"code","ed73a118":"code","e09fb204":"code","5a47ef83":"code","55f53afc":"code","11240ed7":"code","cf2d2c17":"code","e9366719":"code","1dc562bc":"code","e457b409":"code","375a1334":"code","5b987326":"code","21d23274":"code","eafc93bb":"code","57858492":"code","ea2e5d81":"code","8012ebbb":"code","6d8b30d8":"code","345519ea":"code","da22dc52":"code","23b745d3":"code","4c2cdb7b":"code","9ab73edd":"code","309aa75a":"code","bda35a6a":"code","bda309a8":"code","7593dab8":"code","a81dd02b":"code","7978a158":"code","5c1821b4":"code","e953a878":"code","7703a64e":"code","f2b77ccd":"code","b50a32e7":"code","0143d695":"code","15e9540a":"code","1b4d28d7":"code","c3e648b5":"code","5d831d8d":"code","1cee1d35":"code","a315a4ed":"code","2dac5bc8":"code","478df191":"code","17967a59":"code","6195f825":"code","ae1a908d":"code","ed125418":"code","ee46050b":"code","be151cd6":"code","8b2121b8":"code","6b357c50":"code","0d859bd6":"code","7fe9687d":"code","0d15748a":"code","3b39edb8":"code","26e48844":"code","0500e29b":"code","d3537f30":"code","1be9bbf5":"code","3e4c8668":"code","ff1f19e6":"code","9dbbedb2":"code","8d6798e3":"code","171c154e":"code","fe74a7ed":"code","d31abbc7":"code","64f47cf5":"code","bf78e344":"code","1589dc03":"code","b39a3892":"code","faafb23c":"code","18aa37e0":"markdown","323c6468":"markdown","da1bec3f":"markdown","1486e0e6":"markdown","e0b4044c":"markdown","e628c833":"markdown","5c59a1e0":"markdown","aaac900d":"markdown","e21b81f8":"markdown","1b2463be":"markdown","9835ef8c":"markdown","0092e51c":"markdown","66053585":"markdown","79d2da69":"markdown","2bee405f":"markdown","219ce8bd":"markdown","df28acb0":"markdown","136b05f6":"markdown","40949d38":"markdown","bf08e63f":"markdown","697b4527":"markdown","5287e89d":"markdown","a9f74f04":"markdown","54f6618a":"markdown","287ebcaf":"markdown","3761b959":"markdown","73fde905":"markdown","ce818e75":"markdown","4edbde60":"markdown","0490755c":"markdown","bd1b2bd6":"markdown","c2d73180":"markdown","a1d0a5af":"markdown","414563b9":"markdown","388b1375":"markdown","86a986c7":"markdown","253653bd":"markdown","3f13fd34":"markdown"},"source":{"a08b2979":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a311a7e7":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 11000)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","7ec6ff39":"brand_data_org = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/hyundi.csv')","ea78e250":"# Using a copy to play on the safe side, making sure the inital Dataframe won't be modified","1d45a0ee":"brand_data = brand_data_org.copy()","8410d1f3":"brand_data.info()","5a5d536d":"# no nulls with appropriate data types","79656eb6":"brand_data.describe(include='all')","e4468d83":"# We have 16 unique models but most of the cars are Tucson\n# 4 different transmission types but most of the cars are Manual transmission\n# 4 different fuel types but most of the cars are running on Petrol\n# It is strange to see min mileage is 1 for used cars!!\n# mpg max = 256.8!! It is not logic to have cars with more than 100 miles per gallon\n# It is also strange to see engine size equal to zero but may be this can be true for electric cars only\n# Let us explore the data in more details but we have to change tax(\u00a3) to tax","9b8db3d8":"brand_data.columns.values","2eec33f3":"cols = ['model',\n 'year',\n 'price',\n 'transmission',\n 'mileage',\n 'fuelType',\n 'tax',\n 'mpg',\n 'engineSize']","992ce73c":"brand_data.columns=cols","07c53377":"fig, axes = plt.subplots(figsize=(15,8),nrows=2, ncols=3)\nsns.histplot(brand_data['year'],ax=axes[0,0])\nsns.histplot(brand_data['mileage'],ax=axes[0,1])\nsns.histplot(brand_data['tax'],ax=axes[0,2])\nsns.histplot(brand_data['mpg'],ax=axes[1,0])\nsns.histplot(brand_data['engineSize'],ax=axes[1,1])\nsns.histplot(brand_data['price'],ax=axes[1,2])","588ec474":"fields_correlation = sns.heatmap(brand_data.corr(), cmap=\"YlGnBu\", annot=True)","207d96a8":"sns.pairplot(brand_data, kind=\"reg\",plot_kws={'line_kws':{'color':'red'}, 'scatter_kws': {'alpha': 0.1}},diag_kind=\"hist\")","cdca21a8":"year_mile_avgprice=pd.DataFrame\nyear_mile_avgprice=year_mile_avgprice({'mean_price' : brand_data.groupby( [\"year\",'mileage'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)","afcb99f9":"import itertools\nmarker = itertools.cycle((',', '+', '.', 'o', '*','s','p','X','d','h','v','^','<','>','1','2','3','4','8','|','_','x')) \nyear_set=sorted(set(year_mile_avgprice['year']), reverse=True)\nplt.figure(figsize=(17,8))\nfor year in year_set:\n     selected_data = year_mile_avgprice.loc[year_mile_avgprice['year'] == year]\n     plt.scatter(selected_data['mileage'], selected_data['mean_price'],marker = next(marker), label=year)\nplt.xlabel('mileage')\nplt.ylabel('mean price')\nplt.legend()","6823b0ea":"brand_data.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","4c9adc6f":"brand_data_above25=brand_data[brand_data['price']>25000]\nbrand_data_above25.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","1ef16801":"len(brand_data_above25['price'])","0431180f":"# now we have only 166 outliers (above 25,000). Dataset total len=4860","027760ba":"brand_data.boxplot(column=['mileage'], by=['fuelType'],figsize=(15,5),vert=0)","3028d443":"brand_data.boxplot(column=['mpg'], by=['fuelType'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","75ed9b5e":"brand_data.boxplot(column=['mpg'], by=['transmission'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","ed73a118":"brand_data.boxplot(column=['mpg'], by=['engineSize'],figsize=(15,5))","e09fb204":"fig, axes = plt.subplots(figsize=(20,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).count()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).count()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).count()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).count()['price']\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'Count')\nvis_ftyp.plot(ax=axes[0,1],kind='bar',title = 'Count')\nvis_engS.plot(ax=axes[1,0],kind='bar',title = 'Count')\nvis_trans.plot(ax=axes[1,1],kind='bar',rot=360,title = 'Count')","5a47ef83":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Automatic']\ndf=df[df['fuelType']!='Other']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","55f53afc":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Semi-Auto']\ndf=df[df['fuelType']!='Other']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","11240ed7":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Manual']\ndf=df[df['fuelType']!='Other']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","cf2d2c17":"brand_data.boxplot(column=['price'], by=['year'],figsize=(15,5))","e9366719":"brand_data.boxplot(column=['price'], by=['model'],figsize=(15,5),rot=45)","1dc562bc":"fig, axes = plt.subplots(figsize=(15,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).mean()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).mean()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).mean()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).mean()['price'].sort_values(ascending=False)\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'mean price')\nvis_engS.plot(ax=axes[0,1],kind='bar',title = 'mean price')\nvis_trans.plot(ax=axes[1,0],kind='bar',rot=360,title = 'mean price')\nvis_ftyp.plot(ax=axes[1,1],kind='bar',rot=360,title = 'mean price')","e457b409":"# As concluded above that tax and mpg has no correlation with price or any other feature\n# Tax and mpg columns will be dropped","375a1334":"brand_notax=brand_data.drop(['tax'], axis=1)","5b987326":"brand_notaxmpg=brand_notax.drop(['mpg'], axis=1)","21d23274":"brand_notaxmpg.head()","eafc93bb":"## there are some zero entries in the mileage. We are concerned with used cars\n## Accordingly we will delete any car below 50 mileage records","57858492":"mile_min = 50\nbrand_mile = brand_notaxmpg[brand_notaxmpg['mileage']>=mile_min]","ea2e5d81":"sns.histplot(brand_mile['mileage'])","8012ebbb":"## we will try to remove the mileage outliers by keeping the records upto 99% quartile","6d8b30d8":"mile_skewness=brand_mile['mileage'].skew(axis = 0, skipna = True)","345519ea":"if mile_skewness>1:\n    q = brand_mile['mileage'].quantile(0.99)\n    brand_mile= brand_mile[brand_mile['mileage']<q]\nelif mile_skewness<-1:\n    q = brand_mile['mileage'].quantile(0.01)\n    brand_mile= brand_mile[brand_data_mile['mileage']>q]","da22dc52":"sns.histplot(brand_mile['mileage'])","23b745d3":"sns.histplot(brand_mile['year'])","4c2cdb7b":"## we will try to remove the year outliers by keeping the records above 1% quartile","9ab73edd":"brand_year=brand_mile.copy()\nyear_skewness=brand_year['year'].skew(axis = 0, skipna = True)","309aa75a":"if year_skewness>1:\n    q = brand_year['year'].quantile(0.99)\n    brand_year= brand_year[brand_year['year']<q]\nelif year_skewness<-1:\n    q = brand_year['year'].quantile(0.01)\n    brand_year= brand_year[brand_year['year']>q]","bda35a6a":"sns.histplot(brand_year['year'])","bda309a8":"sns.histplot(brand_year['engineSize'])","7593dab8":"brand_engsZ=brand_year.copy()","a81dd02b":"brand_engsZ = brand_engsZ[brand_engsZ.engineSize != 0]","7978a158":"sns.histplot(brand_engsZ['engineSize'])","5c1821b4":"brand_fuel=brand_engsZ.copy()\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Other']","e953a878":"vis_ftyp = brand_fuel.groupby(['fuelType']).count()['price'].sort_values(ascending=False)","7703a64e":"vis_ftyp.plot(kind='bar')\nplt.show()","f2b77ccd":"# Hybrid Cars has been dropped","b50a32e7":"brand_Trans=brand_fuel.copy()\nbrand_Trans = brand_Trans[brand_Trans.transmission != 'Other']","0143d695":"vis_trans = brand_Trans.groupby(['transmission']).count()['price'].sort_values(ascending=False)","15e9540a":"vis_trans.plot(kind='bar')\nplt.show()","1b4d28d7":"brand_models=brand_Trans.copy()","c3e648b5":"vis_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)","5d831d8d":"vis_models.plot(kind='bar')\nplt.show()","1cee1d35":"# there are still some models with very few records\n# I will filter those model with only 1 record for now","a315a4ed":"brand_model_count=pd.DataFrame\n\nbrand_model_count=brand_model_count({'counts' : brand_models.groupby( [ \"model\"] ).size()}).reset_index()\n\nmin_count=1\n\ncounts_sum=brand_model_count['counts'].sum(axis=0)\nbrand_model_count.drop(brand_model_count[brand_model_count.counts >= min_count].index, inplace=True)\n\na=brand_model_count['model'].tolist()\n\nfor i in range (0,len(a)):\n    brand_models.drop(brand_models[brand_models.model == a[i]].index,inplace=True)\n\nvis_audi_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)\n\nvis_audi_models.plot(kind='bar')\nplt.show()","2dac5bc8":"sns.histplot(brand_models['price'])","478df191":"brand_models.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","17967a59":"# After these processing no remarkable effect is noticed on the price boxplot compared to the pervious one","6195f825":"price_skewness=brand_models['price'].skew(axis = 0, skipna = True)\nprice_skewness","ae1a908d":"# price is still highly skewed, we will try to visualize price with model and year for more better spotting of outliers","ed125418":"brand_models.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","ee46050b":"# we need to remove price outliers based on model type and year (Assuming that those are the most effective features).\n# we are going to calculate filter between 90% & 95% of each model_year price distribution \n# and exclude the rest in case the price variation is high (coefficient of varitaion >0.7)","be151cd6":"model_cstat=pd.DataFrame\nmodel_mstat=pd.DataFrame\nmodel_sdstat=pd.DataFrame\nmodel_cstat=model_cstat({'cnt_price' : brand_models.groupby( [ \"model\",\"year\"] ).count()[\"price\"]}).reset_index()\nmodel_mstat=model_mstat({'mean_price' : brand_models.groupby( [ \"model\",\"year\"] ).mean()[\"price\"]}).reset_index()\nmodel_sdstat=model_sdstat({'std_price' : brand_models.groupby( [ \"model\",\"year\"] ).std()[\"price\"]}).reset_index()\nmodel_stats1 = pd.merge(model_cstat, model_mstat, on=[\"model\", \"year\"])\nmodel_stats2 = pd.merge(model_stats1, model_sdstat, on=[\"model\", \"year\"])\n\nmodel_stats2['std_price'] = model_stats2['std_price'].fillna(0)\n\nmodels_prices=brand_models.copy()\n\nmodels_prices = models_prices.merge(model_stats2, how='inner', left_on=[\"model\", \"year\"], right_on=[\"model\",\"year\"])\nx=1.5\ny=0.7\nmodels_prices['var_coeff']=models_prices['std_price']\/models_prices['mean_price']\nmodels_prices['price_L95']=models_prices['mean_price']-x*models_prices['std_price']\nmodels_prices['price_R95']=models_prices['mean_price']+x*models_prices['std_price']\nmodels_prices['price_L95'] =models_prices['price_L95'].astype(int)\nmodels_prices['price_R95'] =models_prices['price_R95'].astype(int)\n\ndef drop_price(models_prices):\n\n    if (models_prices['var_coeff']>y) and (models_prices['cnt_price'] <4):\n        return 'drop'\n    elif (models_prices['price'] > models_prices['price_R95']) or (models_prices['price'] < models_prices['price_L95']):\n        return 'drop'\n    else:\n        return 'keep'\nmodels_prices['drop_price'] = models_prices.apply(drop_price, axis = 1)\nmodels_prices = models_prices[models_prices.drop_price !='drop']","8b2121b8":"models_prices.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","6b357c50":"price_skewness=models_prices['price'].skew(axis = 0, skipna = True)\nprice_skewness","0d859bd6":"# Skewness decreased and as you can see only the oultiers of specific model and year has been cleaned.","7fe9687d":"# Let us calculate the percentage of records removed out of the original dataset","0d15748a":"data_removed_perct=100*(len(brand_data)-len(models_prices))\/len(brand_data)\ndata_removed_perct","3b39edb8":"# Data removed is high but accepted","26e48844":"Brand_preprocessed=models_prices.copy()","0500e29b":"Brand_preprocessed=Brand_preprocessed.reset_index(drop=True)","d3537f30":"Brand_preprocessed.info()","1be9bbf5":"Brand_preprocessed.columns.values","3e4c8668":"cols=['price','model', 'year', 'transmission', 'mileage', 'fuelType',\n      'engineSize', 'cnt_price', 'mean_price', 'std_price',\n      'var_coeff', 'price_L95', 'price_R95', 'drop_price']","ff1f19e6":"brand_arranged=Brand_preprocessed.copy()\nbrand_arranged=Brand_preprocessed[cols]","9dbbedb2":"brand_arranged=brand_arranged.drop(['cnt_price', 'mean_price', 'std_price',\n       'var_coeff', 'price_L95', 'price_R95', 'drop_price'], axis=1)","8d6798e3":"brand_arranged.describe(include='all')","171c154e":"year_model_mmile=pd.DataFrame\nyear_model_mmile=year_model_mmile({'mean_mileage' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"mileage\"]}).reset_index().sort_values(by='year',ascending=True)","fe74a7ed":"model_set=sorted(set(year_model_mmile['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mmile.loc[year_model_mmile['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_mileage'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean mileage')\nplt.legend()","d31abbc7":"## Generally, mileage is higher for older cars","64f47cf5":"year_model_mprice=pd.DataFrame\nyear_model_mprice=year_model_mprice({'mean_price' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mprice.loc[year_model_mprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean price')\nplt.legend()\nplt.show()","bf78e344":"year_model_mnprice=pd.DataFrame\nyear_model_mnprice=year_model_mnprice({'min_price' : brand_arranged.groupby( [\"year\",'model'] ).min()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mnprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mnprice.loc[year_model_mnprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['min_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('min price')\nplt.legend()\nplt.show()","1589dc03":"year_model_mxprice=pd.DataFrame\nyear_model_mxprice=year_model_mxprice({'max_price' : brand_arranged.groupby( [\"year\",'model'] ).max()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mxprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mxprice.loc[year_model_mxprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['max_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('max price')\nplt.legend()\nplt.show()","b39a3892":"brand_final=brand_arranged.drop(['year'], axis=1)","faafb23c":"# The remaining brands has been explored and preproceesed in the same manner and saved as csv\n\n  # https:\/\/www.kaggle.com\/enginsights\/vw-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/vauxhall-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/bmw-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/audi-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/mercedes-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/skoda-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/toyota-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/ford-preprocessing-and-exploration\n\n# All CSVs of processed data of all brands will be imported to separate notebook where a regression model is applied\n\n# Please refer to 100K UK Used Cars Model\n\n  # https:\/\/www.kaggle.com\/enginsights\/100k-uk-used-cars-model","18aa37e0":"### Price","323c6468":"### Fuel Type","da1bec3f":"### mpg, fuel type and transmission","1486e0e6":"## Brand","e0b4044c":"### Fuel Type and mpg","e628c833":"### Year-Model vs Max Price","5c59a1e0":"# Exploring Dataset","aaac900d":"### Year-Model vs Mean Price","e21b81f8":"### Count of Features","1b2463be":"## Further Exploration of Data (Categorical Features and Outliers Visulaization)","9835ef8c":"## Preprocessing","0092e51c":"### Engine Size feature","66053585":"### price and year ","79d2da69":"### Price","2bee405f":"## Dropping Unwanted Fields","219ce8bd":"### Tax feature","df28acb0":"# Packages","136b05f6":"### mpg and transmission","40949d38":"### Year Feature","bf08e63f":"### mpg and engine size","697b4527":"## Finding Correlations","5287e89d":"# Loading Data","a9f74f04":"### Transmission","54f6618a":"### Data Fields Distribution Graphs","287ebcaf":"### Year-Model vs Min Price","3761b959":"## Additional Graphs after Processing Data","73fde905":"## Data Exploration","ce818e75":"## Copying Datasets","4edbde60":"### Model","0490755c":"### Mileage feature","bd1b2bd6":"## Re-arranging Columns","c2d73180":"### Price and model","a1d0a5af":"### Year-Model Vs Mean Mileage","414563b9":"### Mean Price vs Other Features","388b1375":"### Correlogram for additional visulatization of the relation between each two features ","86a986c7":"### Fuel Type and Mileage","253653bd":"### Preocessing Checkpoint","3f13fd34":"### mileage vs mean price [grouped by year]"}}