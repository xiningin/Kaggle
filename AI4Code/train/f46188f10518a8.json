{"cell_type":{"f5775314":"code","b706c086":"code","695ee52f":"code","1a37bc7d":"code","ab978203":"code","f30270ae":"code","430fee33":"code","e4e22c73":"code","9a4bf7cb":"code","9e930cec":"code","76950085":"code","bb3aa970":"code","1ef298bd":"code","7424823e":"code","6b2753b2":"code","ae4a3a0f":"code","8d8720ef":"code","dae448d1":"code","e99cba8c":"code","13768b74":"code","93748304":"code","cbdb74c9":"code","3565ccc6":"code","5dff573e":"code","7fffa452":"code","0d46bc96":"code","f8794676":"code","5e21bdf7":"code","85a5bf5b":"code","76dae648":"code","fc7415fb":"code","e4dab05b":"code","7772b30e":"markdown","ea4ebf00":"markdown","a225da6b":"markdown","3ef0c43f":"markdown"},"source":{"f5775314":"import pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nmpl.style.use('ggplot')","b706c086":"data=pd.read_excel('..\/input\/analyst\/Data Analyst Assignment (1).xlsx')\ndata.head()","695ee52f":"data.isna().sum()","1a37bc7d":"data.describe()","ab978203":"for i in range(1,7):\n    print(data[data.columns[i]].unique())","f30270ae":"\nfig,a =  plt.subplots(2,2,figsize=(15,15))\n\na[0][0].bar(data.groupby('campaign_platform').sum().index,data.groupby('campaign_platform').sum()['spends'])\na[0][0].set_title('Spends')\na[0][1].bar(data.groupby('campaign_platform').sum().index,data.groupby('campaign_platform').sum()['impressions'])\na[0][1].set_title('Impressions')\na[1][0].bar(data.groupby('campaign_platform').sum().index,data.groupby('campaign_platform').sum()['clicks'])\na[1][0].set_title('Clicks')\na[1][1].bar(data.groupby('campaign_platform').sum().index,data.groupby('campaign_platform').sum()['link_clicks'])\na[1][1].set_title('link_clicks')\n    \n\n    ","430fee33":"\nfig,a =  plt.subplots(2,2,figsize=(15,15))\n\na[0][0].bar(data.groupby('campaign_type').sum().index,data.groupby('campaign_type').sum()['spends'])\na[0][0].set_title('Spends')\na[0][1].bar(data.groupby('campaign_type').sum().index,data.groupby('campaign_type').sum()['impressions'])\na[0][1].set_title('Impressions')\na[1][0].bar(data.groupby('campaign_type').sum().index,data.groupby('campaign_type').sum()['clicks'])\na[1][0].set_title('Clicks')\na[1][1].bar(data.groupby('campaign_type').sum().index,data.groupby('campaign_type').sum()['link_clicks'])\na[1][1].set_title('link_clicks')\n    ","e4e22c73":"corrMat=data.corr()","9a4bf7cb":"corrMat","9e930cec":"sns.heatmap(corrMat)\nplt.show()","76950085":"data.head()","bb3aa970":"data['age'].unique()","1ef298bd":"age_low=[]\nage_high=[]\nsplit=[]\nfor age in data['age']:\n    if age=='Undetermined':\n        age_low.append('0')\n        age_high.append('0')\n    elif age=='65 or more':\n        age_low.append('65')\n        age_high.append('100')\n    else:    \n        split=age.split('-')\n        age_low.append(split[0])\n        age_high.append(split[1])\n    \n        ","7424823e":"data['age_low']=age_low\ndata['age_high']=age_high","6b2753b2":"data.head()","ae4a3a0f":"data['total clicks']=data['clicks']+data['link_clicks']\ndata.head()","8d8720ef":"data[['age_low','age_high']]=data[['age_low','age_high']].astype(float)","dae448d1":"data.dtypes","e99cba8c":"data['age_low']=data['age_low'].replace(0,data['age_low'].mean())\ndata['age_high']=data['age_high'].replace(0,data['age_high'].mean())","13768b74":"date_df=data.groupby('Date')\ndate_df.head()","93748304":"data_date= data.groupby('Date').sum()['spends']\ndata_date","cbdb74c9":"data_date.plot(kind='line')","3565ccc6":"data_refined=data[['campaign_platform','campaign_type','communication_medium','subchannel','age_low','age_high','spends','impressions','total clicks']]\ndata_final=pd.get_dummies(data_refined)\ndata_final.head()","5dff573e":"train=data_final.drop(['total clicks'], axis=1)\ntrain.head()","7fffa452":"target=data_final['total clicks']","0d46bc96":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\ntrain = scaler.fit_transform(train)","f8794676":"from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\nimp=imp.fit(train)\ntrain=imp.transform(train)","5e21bdf7":"train.shape","85a5bf5b":"target=target.values\ntarget=target.reshape(-1,1)\n","76dae648":"imp=SimpleImputer()\n#imp=imp.fit(y_train)\ntarget=imp.fit_transform(target)","fc7415fb":"from sklearn.model_selection import KFold\nfrom sklearn import linear_model\nfrom sklearn.metrics import make_scorer\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import svm\nfrom sklearn.metrics import r2_score\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import GridSearchCV","e4dab05b":"def lets_try(train,labels):\n    results={}\n    def test_model(clf):\n        \n        cv = KFold(n_splits=5,shuffle=True,random_state=45)\n        r2 = make_scorer(r2_score)\n        r2_val_score = cross_val_score(clf, train, labels, cv=cv,scoring=r2)\n        scores=[r2_val_score.mean()]\n        return scores\n\n    clf = linear_model.LinearRegression()\n    results[\"Linear\"]=test_model(clf)\n    \n    clf = linear_model.Ridge()\n    results[\"Ridge\"]=test_model(clf)\n    \n    clf = linear_model.BayesianRidge()\n    results[\"Bayesian Ridge\"]=test_model(clf)\n    \n    clf = linear_model.HuberRegressor()\n    results[\"Hubber\"]=test_model(clf)\n    \n    clf = linear_model.Lasso(alpha=1e-4)\n    results[\"Lasso\"]=test_model(clf)\n    \n    clf = BaggingRegressor()\n    results[\"Bagging\"]=test_model(clf)\n    \n    clf = RandomForestRegressor()\n    results[\"RandomForest\"]=test_model(clf)\n    \n    clf = AdaBoostRegressor()\n    results[\"AdaBoost\"]=test_model(clf)\n    \n    clf = svm.SVR()\n    results[\"SVM RBF\"]=test_model(clf)\n    \n    clf = svm.SVR(kernel=\"linear\")\n    results[\"SVM Linear\"]=test_model(clf)\n    \n    results = pd.DataFrame.from_dict(results,orient='index')\n    results.columns=[\"R Square Score\"] \n    \n    results.plot(kind=\"bar\",title=\"Model Scores\")\n    axes = plt.gca()\n    axes.set_ylim([0.5,1])\n    return results\n\nlets_try(train,target.ravel())","7772b30e":"**Importing necessary packages**","ea4ebf00":"According to R square score, all the regressors perform fairly well except SVM RBF. However, the best regressor is RandomForest.","a225da6b":"Narenraj Vivekanandan","3ef0c43f":"**DATA ANALYST ASSIGNMENT**\n\n\n"}}