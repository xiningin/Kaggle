{"cell_type":{"555ac47a":"code","0df0b496":"code","96f3d67f":"code","9db1549d":"code","ff9c39b0":"code","bc635a97":"code","c5bc57b4":"code","be69fefc":"code","c4d807c3":"code","4503af0a":"code","46836796":"code","2e5c722b":"code","36632dc5":"code","eac5d0f0":"code","430a0775":"code","f07817a2":"code","1ebeeac1":"code","28ed5ee8":"code","e5890d81":"code","ca9b99d4":"code","35c54b52":"code","013a461c":"code","cb392884":"code","908be18a":"code","c47571eb":"code","234a420c":"code","3f27ff40":"code","825b083a":"code","a55e3e36":"code","47307c04":"code","e27c1eaf":"code","28134980":"code","b71f2e2e":"code","c9e1754e":"code","1cbc7b2c":"code","0dc2c5af":"code","30368a5c":"code","f916e3dc":"code","32fd7488":"code","14b97a69":"code","5f0ba515":"code","0031f6e2":"code","865a197a":"code","ea346423":"code","324bdcfc":"code","10b926e0":"code","ce98eb44":"code","5651e735":"code","ea031dc6":"code","705923a3":"code","129e0afe":"code","3a9bcc1f":"code","9e520dff":"code","3943eb18":"code","abe23cb8":"code","76763927":"code","cc2c3509":"code","565ebc81":"code","a3a0a02b":"code","b5136dc7":"code","b9e2f480":"code","a7e17af2":"code","1b267264":"code","7a754929":"code","50a198ec":"code","1c5bb432":"code","cf7b05ff":"code","01766b3f":"code","34af41d9":"code","7081e1c3":"code","361d040b":"code","edaed8b9":"code","146a7746":"code","c3d67897":"code","c940b8be":"markdown","11cec60b":"markdown","412befc0":"markdown","71ab79e6":"markdown","d5d115bc":"markdown","44b65dbf":"markdown","2b5f0196":"markdown","a8015c9b":"markdown","e7619206":"markdown","354c015d":"markdown","ea2550cd":"markdown","83310493":"markdown","dc5af8a9":"markdown","ff750f7a":"markdown","784b36bb":"markdown","6e11a150":"markdown","732ca4d3":"markdown","78481f64":"markdown","26a3f33c":"markdown","7fc076ed":"markdown"},"source":{"555ac47a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0df0b496":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nimport plotly.express as px\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom scipy import stats\n\nfrom sklearn.impute import KNNImputer\n\nimport statsmodels.api as sm","96f3d67f":"treino = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/train.csv')\nteste = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/test.csv')\nstores = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/stores.csv')\npetroleo = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/oil.csv')\nferiados = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/holidays_events.csv')","9db1549d":"treino.head()","ff9c39b0":"treino.info('all')","bc635a97":"df = pd.DataFrame(data = treino.nunique()).reset_index()\ndf.columns = ['Colunas', 'Qtd_Itens_Unicos']\ndf","c5bc57b4":"treino['date']     = treino['date'].astype('datetime64')\ntreino[\"mes_date\"] = treino['date'].dt.month\ntreino['ano_date'] = treino['date'].dt.year\ntreino[\"dia_date\"] = treino['date'].dt.day\ntreino['anomes']   = treino['date'].dt.to_period('m')\ntreino['anomes']   = treino['anomes'].astype(str).str.replace('-', '')","be69fefc":"fig = make_subplots(\n    rows=9, cols=3, subplot_titles=('S\u00e9rie Temporal dos Dados sem agrupamento',\n                                    \"Serie temporal acumulada por Ano e M\u00eas\",\n                                    \"S\u00e9rie Temporal Mensal por Ano - Verificar Sazonalidade\",\n                                    'Vendas Acumuladas por Ano', \n                                    'Vendas Acumuladas por Mes', \n                                    'Vendas Acumuladas por Dia'),\n    specs = [  [{\"rowspan\": 2, \"colspan\": 3}, None, None],\n               [None, None, None],\n               [{\"rowspan\": 2, \"colspan\": 3}, None, None],\n               [None, None, None],\n               [None, None, None],\n               [{\"rowspan\": 2, \"colspan\": 3}, None, None],\n               [None, None, None],\n               [{\"rowspan\": 2}, {\"rowspan\": 2}, {\"rowspan\": 2}],\n               [None, None, None]\n            ]\n)\n\n\nfig.add_trace(go.Scatter(x = treino['date'], y = treino['sales']), row = 1, col =1)\n\ndfi = treino[['anomes', \"sales\"]].groupby('anomes').sum()\nfig.add_trace(go.Scatter(x = dfi.index, y = dfi['sales']), row=3, col=1)\n\ndfi = treino[[\"ano_date\", \"mes_date\", \"sales\"]].groupby([\"ano_date\", \"mes_date\"]).sum().reset_index()\nlistplot = []\n\nfor ano in dfi['ano_date'].unique():\n    fig.add_trace(go.Scatter(x = dfi.loc[dfi['ano_date'] == ano, 'mes_date'], y = dfi.loc[dfi['ano_date'] == ano, 'sales'], name = str(ano)), row = 6, col = 1)\n\ndfi = treino[[\"ano_date\", \"sales\"]].groupby('ano_date').sum()\nfig.add_trace(go.Bar(x = dfi.index, y = dfi['sales']), row=8, col=1)\n\ndfi = treino[[\"mes_date\", \"sales\"]].groupby('mes_date').sum()\nfig.add_trace(go.Bar(x = dfi.index, y = dfi['sales']), row=8, col=2)\n\ndfi = treino[[\"dia_date\", \"sales\"]].groupby('dia_date').sum()\nfig.add_trace(go.Bar(x = dfi.index, y = dfi['sales']), row=8, col=3)\n\n\nfig.update_layout(height=900)\n\n#dp.pivot(index = 'mes_date', columns = 'ano_date', values = 'sales').plot(ax = ax[5], title = 'Visualizando a Sazonalidade')\n\n#plt.tight_layout()\nfig.show()","c4d807c3":"px.bar(treino[['family', 'sales']].groupby('family').sum().reset_index().sort_values('sales', ascending =False), \n       x = 'family', y = 'sales', \n       height = 400, \n       title = 'Vendas por Tipo de produtos')","4503af0a":"px.bar(treino[['store_nbr', 'sales']].groupby('store_nbr').sum().reset_index().sort_values('sales', ascending = False), \n       x = 'store_nbr', y = 'sales', \n       height = 400, \n       title = 'Vendas por Loja')","46836796":"petroleo = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/oil.csv')","2e5c722b":"petroleo.info()\nprint('')\npetroleo.describe(datetime_is_numeric=True)","36632dc5":"\npetroleo.head()","eac5d0f0":"petroleo['date'] = petroleo['date'].astype('datetime64')\n","430a0775":"petroleo['dia_semana'] = petroleo['date'].dt.dayofweek","f07817a2":"petroleo = petroleo.set_index('date')","1ebeeac1":"px.line(petroleo, x = petroleo.index, y = 'dcoilwtico', title = 'Evolu\u00e7\u00e3o do pre\u00e7o do Petroleo', height = 300)","28ed5ee8":"petro = petroleo[~pd.isna(petroleo.dcoilwtico)]\npetro.describe()","e5890d81":"px.line(petro, x = petro.index, y = 'dcoilwtico', title = 'Evolu\u00e7\u00e3o do pre\u00e7o do Petroleo', height = 300)","ca9b99d4":"deco_petro = seasonal_decompose(petro['dcoilwtico'], model = 'mult', period=12)","35c54b52":"fig, ax = plt.subplots(3, 1, figsize = (15, 9))\ndeco_petro.trend.plot(ax = ax[0], title = 'tendencia')\ndeco_petro.seasonal.plot(ax = ax[1], title = 'sazonalidade')\ndeco_petro.resid.plot(ax = ax[2], title = 'residuos')\n\nplt.tight_layout()","013a461c":"petro2 = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/oil.csv')","cb392884":"knnimputer = KNNImputer(n_neighbors=10, weights = 'distance')","908be18a":"petro2.head()","c47571eb":"vl = petro2['dcoilwtico'].values.reshape((-1, 1))\nvlt = knnimputer.fit_transform(vl)\npetro2['dcoilwtico'] = vlt","234a420c":"petro2.head()","3f27ff40":"deco_petro2 = seasonal_decompose(petro2['dcoilwtico'], model = 'mult', period=12)\n\nfig, ax = plt.subplots(3, 1, figsize = (15, 9))\ndeco_petro.trend.plot(ax = ax[0], title = 'tendencia')\ndeco_petro.seasonal.plot(ax = ax[1], title = 'sazonalidade')\ndeco_petro.resid.plot(ax = ax[2], title = 'residuos')\n\nplt.tight_layout()","825b083a":"px.scatter(petro2, x = petro2.index, y = petro2['dcoilwtico'], trendline=\"lowess\", height = 350)","a55e3e36":"petro2.dcoilwtico.describe()","47307c04":"stats.ttest_rel(petro.dcoilwtico, petro2[0:len(petro)].dcoilwtico)\n","e27c1eaf":"\nk, p = stats.normaltest(petro.dcoilwtico)\n\nif p < 0.05:\n    print('H\u00e1 signfic\u00e2ncia estatistica de {:0f} - para rejeitar a hipotese nula'.format(p))\n    print('A s\u00e9rie temporal N\u00c2O ESTACIONARIA')\n    \nelse:\n    print('A S\u00e9rie Temporal \u00c9 ESTACIONARIA')\n    \n","28134980":"petro = petro.reset_index()\npetro = petro.set_index('date')","b71f2e2e":"fig, ax = plt.subplots(figsize = (15, 5))\n\nax = sm.graphics.tsa.plot_acf(petro['dcoilwtico'], lags=100, ax = ax)\n\n","c9e1754e":"petro['oil_1t'] = petro['dcoilwtico'].shift()\npetro['oil_2t'] = petro['dcoilwtico'].shift(2)\npetro['oil_3t'] = petro['dcoilwtico'].shift(3)\npetro['oil_7t'] = petro['dcoilwtico'].shift(7)\npetro['oil_14t'] = petro['dcoilwtico'].shift(14)\npetro['oil_30t'] = petro['dcoilwtico'].shift(30)\npetro['oil_60t'] = petro['dcoilwtico'].shift(60)\npetro['oil_90t'] = petro['dcoilwtico'].shift(90)","1cbc7b2c":"\npetro.head()","0dc2c5af":"def vl_transform(x):\n    lt = []\n    #print(x)\n    for n in x.values:\n        #print(n)\n        if (n < 0) | (n == 0):\n            print(n)\n            lt.append(1)\n        else:\n            lt.append(n)\n    x = lt\n    #print(x)\n    return stats.boxcox(x)\n    ","30368a5c":"vls = petro['dcoilwtico']\nvlt = vl_transform(vls)\n","f916e3dc":"petroleo['oil_trasf'] = vlt[0]","32fd7488":"petroleo.describe()","14b97a69":"stat, p = stats.shapiro(petroleo.dcoilwtico)\nprint('Variavel real - Statistics = %.3f, p = %.3f' % (stat, p))\nprint('')\nstat, p = stats.shapiro(petroleo.oil_trasf)\nprint('Variavel Transformada BxCx - Statistics = %.3f, p = %.3f' % (stat, p))","5f0ba515":"treino = treino.merge(petroleo, left_on = 'date', right_on = 'date')","0031f6e2":"treino.tail() ","865a197a":"dfi = treino[['date', 'dcoilwtico', 'sales']].groupby('date').agg({'dcoilwtico':'max', 'sales':'sum'})\ndfi['oil_7dias'] = dfi['dcoilwtico'].shift(7)\ndfi['oil_15dias'] = dfi['dcoilwtico'].shift(15)\ndfi['oil_30dias'] = dfi['dcoilwtico'].shift(30)\ndfi['oil_60dias'] = dfi['dcoilwtico'].shift(60)\ndfi['oil_90dias'] = dfi['dcoilwtico'].shift(90)\n","ea346423":"coef_corr = []\ncolunas = ['dcoilwtico', 'oil_7dias', 'oil_15dias', 'oil_30dias', 'oil_60dias', 'oil_90dias']\n\nfor c in colunas:\n    coef_corr.append(dfi[[c, 'sales']].corr().values[1, 0].reshape((-1, 1))[0, 0])\n    #print(dfi[[c, 'sales']].corr().values[1, 0].reshape((-1, 1))[0, 0])","324bdcfc":"\nfig = make_subplots(\n    rows=3, cols=2, subplot_titles=('Valor do petroleo x Vendas - R2:' + str(np.round(coef_corr[0], 2)),\n                                    'Valor do petroleo 7 Dias Atr\u00e1s x Vendas - R2:' + str(np.round(coef_corr[1], 2)),\n                                    'Valor do petroleo 15 Dias Atr\u00e1s x Vendas - R2:' + str(np.round(coef_corr[2], 2)),\n                                    'Valor do petroleo 30 Dias Atr\u00e1s x Vendas - R2:' + str(np.round(coef_corr[3], 2)), \n                                    'Valor do petroleo 60 Dias Atr\u00e1s x Vendas - R2:' + str(np.round(coef_corr[4], 2)), \n                                    'Valor do petroleo 90 Dias Atr\u00e1s x Vendas - R2:' + str(np.round(coef_corr[5], 2)))\n)\n\nfig.add_trace(go.Scatter(mode='markers', x = dfi['dcoilwtico'], y = dfi['sales']), row = 1, col = 1)\nfig.add_trace(go.Scatter(mode='markers', x = dfi['oil_7dias'],  y = dfi['sales']), row = 1, col = 2)\nfig.add_trace(go.Scatter(mode='markers', x = dfi['oil_15dias'], y = dfi['sales']), row = 2, col = 1)\nfig.add_trace(go.Scatter(mode='markers', x = dfi['oil_30dias'], y = dfi['sales']), row = 2, col = 2)\nfig.add_trace(go.Scatter(mode='markers', x = dfi['oil_60dias'], y = dfi['sales']), row = 3, col = 1) \nfig.add_trace(go.Scatter(mode='markers', x = dfi['oil_90dias'], y = dfi['sales']), row = 3, col = 2)\n\nfig.update_layout(height=700)\n\nfig.show()","10b926e0":"feriados.info()\nferiados.head()","ce98eb44":"feriados.describe(datetime_is_numeric= True)","5651e735":"print(feriados.nunique())\nprint('')\nprint(feriados['type'].value_counts())","ea031dc6":"feriados['date'] = feriados['date'].astype('datetime64')\n","705923a3":"treino = treino.merge(feriados[['date', 'type']], left_on = 'date', right_on = 'date', how = 'left')","129e0afe":"treino.head()","3a9bcc1f":"dicfamily = {f: i+1 for i, f in enumerate(treino['family'].unique()) if f != pd.isna(f)}\ndicferiado = {f: i+1 for i, f in enumerate(treino['type'].unique()) if False == pd.isna(f)}","9e520dff":"treino['CD_FAMILY'] = treino['family'].map(dicfamily)\ntreino['CD_FERIADO'] = treino['type'].map(dicferiado)","3943eb18":"treino.describe(datetime_is_numeric= True)","abe23cb8":"from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor","76763927":"rfr = RandomForestRegressor()\ngbr = GradientBoostingRegressor()","cc2c3509":"treino['dcoilwtico'] = treino['dcoilwtico'].fillna(0)\ntreino['CD_FERIADO'] = treino['CD_FERIADO'].fillna(0)","565ebc81":"X.isna().sum()","a3a0a02b":"del X, Y","b5136dc7":"X_treino = treino[treino['date'] < '2017-06-01'].drop(columns = ['id', 'date', 'family', 'anomes', 'sales', 'type'])\nY_treino = treino.loc[treino['date'] < '2017-06-01', 'sales']\nX_teste = treino[treino['date'] >= '2017-06-01'].drop(columns = ['id', 'date', 'family', 'anomes', 'sales', 'type'])\nY_teste = treino.loc[treino['date'] >= '2017-06-01', 'sales']","b9e2f480":"rfr.fit(X_treino, Y_treino)","a7e17af2":"rfr.score(X_treino, Y_treino)\n","1b267264":"previsao = rfr.predict(X_teste)","7a754929":"from sklearn import metrics","50a198ec":"metrics.mean_squared_error(Y_teste, previsao)","1c5bb432":"X_teste['date'] = teste['date']\nX_teste['vendas_real'] = Y_teste\nX_teste['previsao'] = previsao","cf7b05ff":"X_teste[['date', 'vendas_real', 'previsao']].plot(figsize = (15, 5))","01766b3f":"teste.info()","34af41d9":"teste.describe(datetime_is_numeric=True)","7081e1c3":"teste['date']     = teste['date'].astype('datetime64') \nteste[\"mes_date\"] = teste['date'].dt.month\nteste['ano_date'] = teste['date'].dt.year\nteste[\"dia_date\"] = teste['date'].dt.day\nteste['anomes']   = teste['date'].dt.to_period('m')\nteste['anomes']   = teste['anomes'].astype(str).str.replace('-', '')","361d040b":"teste = teste.merge(petroleo, left_on = 'date', right_on = 'date')","edaed8b9":"teste = teste.merge(feriados[['date', 'type']], left_on = 'date', right_on = 'date', how = 'left')","146a7746":"teste['CD_FAMILY'] =  teste['family'].map(dicfamily)\nteste['CD_FERIADO'] = teste['type'].map(dicferiado)","c3d67897":"rfr.","c940b8be":"## Explorando dados de Petroleo","11cec60b":"## Explorando os DATASET dos feriados","412befc0":"## Preparando os dados de TESTE ##","71ab79e6":"**Conclus\u00e3o:**  \n\nN\u00e3o h\u00e1 evid\u00eancias para rejeitar a hipotese NULA, ou seja os valores possuem m\u00e9dias identica, portanto qualquer um dos datasets poder\u00e1 ser utilizado.\n","d5d115bc":"**2. Plotando a s\u00e9rie Temporal**","44b65dbf":"#### Decomposi\u00e7\u00e3o da Serie Temporal - VALORES (NA) EXCLUIDOS","2b5f0196":"# Explica\u00e7\u00e3o e Leitura dos Arquivos:\n\n- train: Dados de treino\nO objetivo \u00e9 fazer predi\u00e7\u00e3o das vendas por loja e produtos, com as seguintes variaves:\n    - id: ID das vendas\n    - store_nbr: As lojas em que os produtos foram vendidos.\n    - family: Identifica os tipos de produtos vendidos.\n    - sales: O valor de venda de um tipo de produto, loja e data especifica. \u00c9 possivel existir valores fracionados devido ao tipo de produto, geralmente quando comida s\u00e3o fracionados. (1.5 kg of cheese, for instance, as opposed to 1 bag of chips).\n    - onpromotion: Especifica se um determinado tipo de produto est\u00e1 em promo\u00e7\u00e3o.\n\n- test: Dados de teste\nThe dates in the test data are for the 15 days after the last date in the training data.\n\n- stores.csv:\nStore metadata, including city, state, type, and cluster.\ncluster is a grouping of similar stores.\n\n- oil.csv:\nDaily oil price. Includes values during both the train and test data timeframes. (Ecuador is an oil-dependent country and it's economical health is highly vulnerable to shocks in oil prices.)\n- holidays_events.csv\n\n    NOTE: Pay special attention to the transferred column. A holiday that is transferred officially falls on that calendar day, but was moved to another date by the government. A transferred day is more like a normal day than a holiday. To find the day that it was actually celebrated, look for the corresponding row where type is Transfer. For example, the holiday Independencia de Guayaquil was transferred from 2012-10-09 to 2012-10-12, which means it was celebrated on 2012-10-12. Days that are type Bridge are extra days that are added to a holiday (e.g., to extend the break across a long weekend). These are frequently made up by the type Work Day which is a day not normally scheduled for work (e.g., Saturday) that is meant to payback the Bridge.\n\n    Additional holidays are days added a regular calendar holiday, for example, as typically happens around Christmas (making Christmas Eve a holiday).\n\n- Additional Notes\nWages in the public sector are paid every two weeks on the 15 th and on the last day of the month. Supermarket sales could be affected by this.\nA magnitude 7.8 earthquake struck Ecuador on April 16, 2016. People rallied in relief efforts donating water and other first need products which greatly affected supermarket sales for several weeks after the earthquake.","a8015c9b":"**4.2.** Join aos dados de treino **FERIADOS**","e7619206":"**3.1.** JOIN com os dados das vendas - DADOS TREINO","354c015d":"**3. Visualizando os dados do PETROLEO:**","ea2550cd":"## Explorando os Dados de Treino","83310493":"**3.2.** Correla\u00e7\u00e3o da Serie Temporal entre variaveis ","dc5af8a9":"#### Teste de normalidade","ff750f7a":"**1.1.** Valores Unicos por variavel ","784b36bb":"#### Decomposi\u00e7\u00e3o da Serie Temporal - IMPUTANTION KNN","6e11a150":"## Pr\u00e9 processamento para treinamento","732ca4d3":"**4.1.** Quantidade de variaveis unicas nos **FERIADOS**","78481f64":"#### Verificando a Estacionariedade da variavel Petroleo","26a3f33c":"**1. Visualiza\u00e7\u00e3o e entedimentos dos dados de TREINO**","7fc076ed":"# Carregando as bibliotecas"}}