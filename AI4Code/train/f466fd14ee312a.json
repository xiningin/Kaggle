{"cell_type":{"6f850895":"code","0624e20c":"code","9125263a":"code","90ceab0e":"code","7e5037ec":"code","6da729a5":"code","724723e7":"code","cfcf3603":"code","a8d0633b":"code","8428b833":"code","89154dae":"code","f92f52ab":"code","a2617414":"code","c7371ec6":"code","ec5e698f":"code","7a714b38":"code","7a404cd5":"code","6087d479":"code","285198d0":"code","9434573e":"code","51f6ccf4":"code","cb80a3d4":"code","5ff6118a":"code","cad41a6a":"code","c7993192":"code","f180796b":"code","59d9f9c3":"code","a41f01d4":"markdown","9cee071b":"markdown"},"source":{"6f850895":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0624e20c":"# Quadratic Kappa ","9125263a":"# Lies between -1 and 1. Useful when we are having a ranked target variables\/nominal scales.\n# For instance if the prediction is 4, but the model predicted it as 3 -- It is ok, but if the model predicted as 1 then \n# it has to be penalized more","90ceab0e":"import numpy as np\nfrom sklearn.metrics import confusion_matrix, accuracy_score, cohen_kappa_score,mean_squared_error as mse","7e5037ec":"print('Case - 1')\nactual = [0,4,2,3]\npredicted = [1,0,0,0]\nprint('Accuracy is',accuracy_score(actual,predicted))\nprint('Quadratic Kappa score is',round(cohen_kappa_score(actual,predicted,weights='quadratic'),2))\n\nprint('Case - 2')\nactual = [0,4,2,3]\npredicted = [1,3,1,2]\nprint('Accuracy is',accuracy_score(actual,predicted))\nprint('Quadratic Kappa score is',round(cohen_kappa_score(actual,predicted,weights='quadratic'),2))\n","6da729a5":"actual = [0,4,2,3]\npredicted = [1,3,1,2]","724723e7":"# Step - 1\nO = confusion_matrix(actual,predicted)\nO","cfcf3603":"# Weighted matrix\nw = np.zeros((5,5))","a8d0633b":"w","8428b833":"# Step - 2\nfor i in range(5):\n    for j in range(5):\n        w[i][j] = (float(i-j)**2)\/16","89154dae":"w","f92f52ab":"# Create Histogram","a2617414":"act_hist = np.zeros(5)\npredict_hist = np.zeros(5)\n","c7371ec6":"# Step - 3\nfor i in actual:\n    act_hist[i]+=1\nact_hist","ec5e698f":"# Step - 3\nfor j in predicted:\n    predict_hist[j]+=1\npredict_hist","7a714b38":"# Expected Matrix is outer product of act_hist and predict_hist","7a404cd5":"# Step - 4\nE = np.outer(act_hist,predict_hist)","6087d479":"E","285198d0":"E.sum()","9434573e":"O.sum()","51f6ccf4":"E = E\/E.sum()\nE.sum()","cb80a3d4":"O = O\/O.sum()\nO.sum()","5ff6118a":"E","cad41a6a":"O","c7993192":"# Step - 5\nnum = 0\nden = 0\nfor i in range(len(w)):\n    for j in range(len(w)):\n        num+= w[i][j]*O[i][j]\n        den+= w[i][j]*E[i][j]\nweighted_kappa = 1 - num\/den","f180796b":"weighted_kappa","59d9f9c3":"print('Quadratic Kappa score is',round(cohen_kappa_score(actual,predicted,weights='quadratic'),2))\n","a41f01d4":"# Calculating Quadratic Kappa score manually","9cee071b":"* First, create a multi class confusion matrix O between predicted and actual ratings.\n* Second, construct a weight matrix w which calculates the weight between the actual and predicted ratings.\n* Third, calculate value_counts() for each rating in preds and actuals.\n* Fourth, calculate E, which is the outer product of two value_count vectors\n* Fifth, normalise the E and O matrix\nCaclulate, weighted kappa as per formula"}}