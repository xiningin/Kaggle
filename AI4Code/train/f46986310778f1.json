{"cell_type":{"827652d6":"code","670c5186":"code","bed0740b":"code","04b19e44":"code","8c286518":"code","3e5f85bc":"code","d5a55d85":"code","980e587a":"code","1feede34":"code","fedb97e9":"code","b34758e8":"code","b78c0fe2":"code","06b734a4":"code","a66ed60e":"code","8ce74211":"code","8d918f31":"code","99e6770c":"code","43e6e8b2":"code","9ae7d136":"code","f86b1fd4":"code","74cc21a2":"code","f2de0710":"code","c67f4f9d":"code","400be8c8":"markdown","2eb2bcfa":"markdown","ddc8c485":"markdown"},"source":{"827652d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        pass\n        #print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","670c5186":"import librosa\nimport librosa.display as libdisplay\nimport numpy as np\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt","bed0740b":"max_pad_len = 388\ndef extract_features(file_name):\n   \n    try:\n        audio, sample_rate = librosa.load(file_name, res_type='kaiser_fast') \n        mfccs = librosa.feature.mfcc(y=audio, sr=sample_rate, n_mfcc=40)\n        pad_width = max_pad_len - mfccs.shape[1]\n        mfccs = np.pad(mfccs, pad_width=((0, 0), (0, pad_width)), mode='constant')\n        \n    except Exception as e:\n        print(\"Error encountered while parsing file: \", file_name)\n        return None \n     \n    return mfccs","04b19e44":"ls  \/kaggle\/input\/dataset-bagus","8c286518":"dataset_path = '\/kaggle\/input\/heartbeat-sounds\/set_a'\nmetadata = pd.read_csv('\/kaggle\/input\/dataset-bagus\/DATASET_A_NEW.csv')\n\nfeatures = []","3e5f85bc":"import glob, os\nos.chdir(\"\/kaggle\/input\/heartbeat-sounds\/set_a\")\n\n\nMAX_LEN_MFCC = []\n\nfor file in glob.glob(\"*.wav\"):\n    #print(file)\n    #extract_features(file)\n\n    audio,sample_rate = librosa.load(file, res_type='kaiser_fast')\n    mfccs = librosa.feature.mfcc(y=audio, sr=sample_rate, n_mfcc=40)\n    #print(mfccs.shape[1])\n    MAX_LEN_MFCC.append(mfccs.shape[1])\n\nprint(max(MAX_LEN_MFCC)   )\n\n# dari data dapet 388 len nya ","d5a55d85":"for index, row in metadata.iterrows():\n    file_name = os.path.join(os.path.abspath(dataset_path),str(row['fname']))\n    \n    class_label = row['fname']\n    data = extract_features(file_name)\n    \n    features.append([data,class_label])","980e587a":"DATAX = pd.DataFrame(features, columns=['feature','class_label'])\n\nprint('Finished feature extraction from ', len(DATAX), ' files')","1feede34":"str(DATAX['class_label'][0]).split('__')[0]\n\nLABEL = []\n\nfor i in range(len(DATAX)):\n  str(DATAX['class_label'][i]).split('__')[0]\n  LABEL.append(str(DATAX['class_label'][i]).split('__')[0])    ","fedb97e9":"DATAX['LABEL'] = LABEL\n\nNEW_DATAX = DATAX.drop(columns=['class_label'])\n\n#NEW_DATAX.to_csv(r'NEW_DATAX.csv')\n\nNEW_DATAX.head(10)","b34758e8":"from __future__ import absolute_import, division, print_function, unicode_literals\nimport tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models, optimizers, utils\nimport matplotlib.pyplot as plt\nfrom sklearn import metrics \nfrom sklearn.preprocessing import LabelEncoder\n\nX = np.array(NEW_DATAX.feature.tolist())\ny = np.array(NEW_DATAX.LABEL.tolist())","b78c0fe2":"le = LabelEncoder()\nyy = tf.keras.utils.to_categorical(le.fit_transform(y))\n\nfrom sklearn.model_selection import train_test_split \n\nx_train, x_test, y_train, y_test = train_test_split(X, yy, test_size=0.2, random_state = 42)","06b734a4":"#Untuk menentukan column nanti di model\n\nprint('NEW_DATAX shape >> {}'.format(NEW_DATAX.shape))\nprint('len X_train >> {}'.format(len(x_train)))\nprint('len X_test >> {}'.format(len(x_test)))\n\n# untuk dapetin num_rows, num_clumns d\nprint('X_train shape >> {}'.format(x_train.shape))\n\n# len(mfccs) --> nanti kita gunakan untuk num_rows\n# max(MAX_LEN_MFCC) --> dibunakan untuk num_columns & max_pad_len pada fungsi extract_features\nprint('Num_Rows >> {}'.format(len(mfccs)))\nprint('Num_Columns >> {}'.format(max(MAX_LEN_MFCC)))","a66ed60e":"num_rows = 40\nnum_columns = 388\nnum_channels = 1\n\nx_train = x_train.reshape(x_train.shape[0], num_rows, num_columns, num_channels)\nx_test = x_test.reshape(x_test.shape[0], num_rows, num_columns, num_channels)\n\nnum_labels = yy.shape[1]\nfilter_size = 2","8ce74211":"model = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Conv2D(filters=16, kernel_size=2, input_shape=(num_rows, num_columns, num_channels), activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Conv2D(filters=32, kernel_size=2, activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Conv2D(filters=64, kernel_size=2, activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Conv2D(filters=128, kernel_size=2, activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=2))\nmodel.add(tf.keras.layers.Dropout(0.2))\nmodel.add(tf.keras.layers.GlobalAveragePooling2D())\n\nmodel.add(tf.keras.layers.Dense(num_labels, activation='softmax'))","8d918f31":"model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')","99e6770c":"model.summary()\n\n# Calculate pre-training accuracy \nscore = model.evaluate(x_test, y_test, verbose=1)\naccuracy = 100*score[1]\n\nprint(\"Pre-training accuracy: %.4f%%\" % accuracy)","43e6e8b2":"#tf.keras.callbacks.ModelCheckpoint\n\nfrom datetime import datetime \n\n#num_epochs = 500\n#num_batch_size = 128\n\n#num_epochs = 500\n#num_batch_size = 256\n\nnum_epochs = 1000\nnum_batch_size = 256\n\n#num_epochs = 1000\n#num_batch_size = 256\n\n#checkpointer = tf.keras.callbacks.ModelCheckpoint(filepath='sound_classification_Bagus.hdf5', \n#                               verbose=1, save_best_only=True)\nstart = datetime.now()\n\n#model.fit(x_train, y_train, batch_size=num_batch_size, epochs=num_epochs, validation_data=(x_test, y_test), callbacks=[checkpointer], verbose=1)\nmodel.fit(x_train, y_train, batch_size=num_batch_size, epochs=num_epochs, validation_data=(x_test, y_test), verbose=1)\n\n\nduration = datetime.now() - start\nprint(\"Training completed in time: \", duration)\n","9ae7d136":"score = model.evaluate(x_train, y_train, verbose=0)\nprint(\"Training Accuracy: \", score[1])\n\nscore = model.evaluate(x_test, y_test, verbose=0)\nprint(\"Testing Accuracy: \", score[1])","f86b1fd4":"#model.save('my_model_BAGUS_SOUND.h5')","74cc21a2":"def buat_prediction(file_name):\n    prediction_feature = extract_features(file_name) \n    prediction_feature = prediction_feature.reshape(1, num_rows, num_columns, num_channels)\n\n    predicted_vector = model.predict_classes(prediction_feature)\n    predicted_class = le.inverse_transform(predicted_vector) \n    print(\"The predicted class is:\", predicted_class[0], '\\n') \n\n    predicted_proba_vector = model.predict_proba(prediction_feature) \n    predicted_proba = predicted_proba_vector[0]\n    for i in range(len(predicted_proba)): \n        category = le.inverse_transform(np.array([i]))\n        print(category[0], \"\\t\\t : \", format(predicted_proba[i], '.32f') )","f2de0710":"filename = '\/kaggle\/input\/heartbeat-sounds\/set_a\/Aunlabelledtest__201012172010.wav' \nbuat_prediction(filename)","c67f4f9d":"filename = '\/kaggle\/input\/heartbeat-sounds\/set_a\/Aunlabelledtest__201108222257.wav' \nbuat_prediction(filename)","400be8c8":"Prediction","2eb2bcfa":"**Mempersiapkan nilai untuk Train & Test**","ddc8c485":"> **CNN MODEL**"}}