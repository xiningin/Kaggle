{"cell_type":{"ea27a50d":"code","50ed758f":"code","e93758c0":"code","103310da":"code","afb6854d":"code","80895f38":"code","2d05659a":"code","6a07b1ef":"code","4121d1ef":"code","ac316e96":"code","43a42f05":"code","4158029a":"code","1a0fc964":"code","ded72eb3":"code","e3f8ec7e":"code","bd53c379":"code","d092a3b1":"code","74e2dbc0":"code","46262e8e":"code","23103c79":"code","d3252d1e":"code","eb07fd32":"code","5b6195e1":"code","25440572":"code","b220ab4a":"code","b390a8b4":"code","2fe0818e":"code","15fd9e1b":"code","d52099bc":"code","61104d89":"code","0a260ffc":"code","6e0dcba6":"code","bd8aab2a":"code","28e3fddd":"code","6abef344":"code","35ba2d77":"code","7a4fa166":"code","23b84637":"code","e4ffbf5f":"code","bb193f11":"code","62cea7b1":"code","b728fa8e":"code","308c8cdf":"code","ff16e6aa":"code","0e713df6":"code","8f1d1e5a":"code","833f7d0f":"code","1f491819":"code","51bbcf39":"code","c1645f02":"code","b812c494":"code","bfca8394":"code","442ac529":"code","ee8c88b1":"markdown","9239a031":"markdown","95388765":"markdown","50a5bc1a":"markdown","ed933f12":"markdown","b7655eb6":"markdown","63dd1014":"markdown","be312651":"markdown","3197b84d":"markdown","e73e901d":"markdown","ee922364":"markdown","ea984748":"markdown","d024de43":"markdown","5bc46a4e":"markdown","3be7e3c3":"markdown","f1af9633":"markdown","b2bd14e6":"markdown","a8768af3":"markdown","2a5f12eb":"markdown","183d02bb":"markdown","4b43f766":"markdown","9a82a16f":"markdown","810a1565":"markdown","619d0be3":"markdown","5604dcbb":"markdown","a27d12f1":"markdown","3d14c860":"markdown","95b32af9":"markdown","9caebac7":"markdown","e0cf6554":"markdown","daa0d6eb":"markdown","4195af37":"markdown","7ca37d5a":"markdown","7abdc04e":"markdown","f9f030a5":"markdown","16cba8a6":"markdown","0a35155d":"markdown","61d6892a":"markdown","b05a17d1":"markdown"},"source":{"ea27a50d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.offline import iplot\n\npd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.max_rows\", None)","50ed758f":"df = pd.read_csv(\"..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\")\ndf.head()","e93758c0":"questions = df.iloc[0,:].to_dict()","103310da":"df = df.iloc[1:, :]\ndf.head()","afb6854d":"countries2analyse = [ 'Colombia',\"Argentina\", \"Brazil\", \"Peru\", \"Chile\" ]\nrest_world = df[~df['Q3'].isin(countries2analyse)]\ndf = df[df['Q3'].isin(countries2analyse)]\ndf.head()","80895f38":"print(f\"We have Data for {len(df)} kagglers from South american countries\")","2d05659a":"temp_df = df[\"Q5\"].value_counts().reset_index()  \ntemp_df.columns = [\"title\", \"count\"]\ntemp_df_rest = rest_world[\"Q5\"].value_counts().reset_index()  \ntemp_df_rest.columns = [\"title\", \"count\"]\n\ntrace1 = go.Bar(\n                x = temp_df['title'],\n                y = temp_df['count'], name =\"SA\",\n                marker = dict(color = 'rgb(250,13,92)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df['count'], textposition='outside')\ntrace12 = go.Bar(\n                x = temp_df_rest['title'],\n                y = -temp_df_rest['count']\/max(temp_df_rest['count'])*max(temp_df['count']), name =\"World\",\n                marker = dict(color = 'rgb(12,13,200)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df_rest['count'], textposition='outside')\nlayout = go.Layout(template= \"plotly_dark\",title = 'JOB TITLES FROM SOUTH AMERICAN KAGGLERS' , xaxis = dict(title = 'Education Level'), yaxis = dict(title = 'Count'), height=650)\nfig = go.Figure(data = [trace1,trace12], layout = layout)\nfig.update_yaxes(showticklabels=False)\nfig.show()","6a07b1ef":"temp_df = df[\"Q4\"].value_counts().reset_index()  \ntemp_df.columns = [\"Degree\", \"count\"]\ntemp_df_rest = rest_world[\"Q4\"].value_counts().reset_index()  \ntemp_df_rest.columns = [\"Degree\", \"count\"]\n\ntrace1 = go.Bar(\n                x = temp_df['Degree'],\n                y = temp_df['count'], name =\"SA\",\n                marker = dict(color = 'rgb(250,13,92)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df['count'], textposition='outside')\ntrace12 = go.Bar(\n                x = temp_df_rest['Degree'],\n                y = -temp_df_rest['count']\/max(temp_df_rest['count'])*max(temp_df['count']), name =\"World\",\n                marker = dict(color = 'rgb(12,13,200)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df_rest['count'], textposition='outside')\nlayout = go.Layout(template= \"plotly_dark\",title = 'EDUCATION LEVEL OF SOUTH AMERICAN KAGGLERS' , xaxis = dict(title = 'Education Level'), yaxis = dict(title = 'Count'), height=650)\nfig = go.Figure(data = [trace1,trace12], layout = layout)\nfig.update_yaxes(showticklabels=False)\nfig.show()","4121d1ef":"def pie_plot(cnt_srs, title):\n    labels=cnt_srs.index\n    values=cnt_srs.values\n    trace = go.Pie(labels=labels, \n                   values=values, \n                   title=title, \n                   hoverinfo='percent+value+label', \n                   textinfo='percent',\n                   textposition='inside',\n                   hole=0.6,\n                   showlegend=True,\n                   marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                               line=dict(color='#000000',\n                                         width=2),\n                              )\n                  )\n    \n    return trace","ac316e96":"trace = go.Pie(labels=df['Q4'].value_counts().index, \n               values=df['Q4'].value_counts().values, \n               title=\"Education Level Distribution\", \n               hoverinfo='percent+value+label', \n               textinfo='percent',\n               textposition='inside',\n               hole=0.6,\n               showlegend=True,\n               marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                           line=dict(color='#000000',\n                                     width=2),\n                          )\n                  )\ntrace_rest = go.Pie(labels=rest_world['Q4'].value_counts().index, \n               values=rest_world['Q4'].value_counts().values, \n               title=\"Education Level Distribution\", \n               hoverinfo='percent+value+label', \n               textinfo='percent',\n               textposition='inside',\n               hole=0.6,\n               showlegend=True,\n               marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                           line=dict(color='#000000',\n                                     width=2),\n                          )\n                  )\n\nlayout = go.Layout(title=\"Gender Distribution South America\",template= \"plotly_dark\")\nfig=go.Figure(data=[trace], layout = layout)\nfig.show()\nlayout = go.Layout(title=\"Gender Distribution Rest of the world\",template= \"plotly_dark\")\nfig=go.Figure(data=[trace_rest], layout = layout)\nfig.show()","43a42f05":"temp_df = df[\"Q2\"].value_counts().reset_index()\ntemp_df_rest = rest_world[\"Q2\"].value_counts().reset_index()  \n\ntrace1 = go.Bar(\n                x = temp_df['index'],\n                y = temp_df['Q2'],\n                name = \"SA\",\n                marker = dict(color = 'rgb(250,13,92)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df['Q2'], textposition='outside')\ntrace12 = go.Bar(\n                x = temp_df_rest['index'],\n                y = -temp_df_rest['Q2']\/max(temp_df_rest['Q2'])*max(temp_df['Q2']),\n                name = \"World\",\n                marker = dict(color = 'rgb(13,13,200)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df_rest['Q2'], textposition='outside')\n\nlayout = go.Layout(template= \"plotly_dark\",title = 'GENDER DISTRIBUTION AMONG SOUTH AMERICANS ON KAGGLE' , xaxis = dict(title = 'Gender'), yaxis = dict(title = 'Count'), height=650)\nfig = go.Figure(data = [trace1,trace12], layout = layout)\nfig.update_yaxes(showticklabels=False)\nfig.show()","4158029a":"layout = go.Layout(title=\"Gender Distribution - South America\",template= \"plotly_dark\")\nfigure=go.Figure(data=[pie_plot(df['Q2'].value_counts(), 'Gender Distribution')], layout = layout)\niplot(figure)\nlayout = go.Layout(title=\"Gender Distribution - Rest of the World\",template= \"plotly_dark\")\nfigure=go.Figure(data=[pie_plot(rest_world['Q2'].value_counts(), 'Gender Distribution')], layout = layout)\niplot(figure)","1a0fc964":"temp_df = df[\"Q1\"].value_counts().reset_index()\ntemp_df_restW = rest_world[\"Q1\"].value_counts().reset_index()\n\ntrace1 = go.Bar(\n                x = temp_df['index'].sort_values(),\n                y = temp_df['Q1'],\n                name = \"SA\",\n                marker = dict(color = 'rgb(250, 16, 12)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df['Q1'], textposition='outside')\ntrace12 = go.Bar(\n                x = temp_df_restW['index'],\n                y = -temp_df_restW['Q1']\/max(temp_df_restW['Q1'])*max(temp_df['Q1']),\n                name = \"World\",\n                marker = dict(color = 'rgb(0, 16, 238)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df_restW['Q1'], textposition='outside')\nlayout = go.Layout(template= \"plotly_dark\",title = 'AGE DISTRIBUTION AMONG SOUTH AMERICAN ON KAGGLE' , xaxis = dict(title = 'Age Group'), yaxis = dict(title = 'Count'), height=650)\nfig = go.Figure(data = [trace1,trace12], layout = layout)\nfig.update_yaxes(showticklabels=False)\nfig.show()","ded72eb3":"trace = go.Pie(labels=df['Q1'].value_counts().index.sort_values(), \n               values=df['Q1'].value_counts().values, \n               hoverinfo='percent+value+label', \n               textinfo='percent',\n               textposition='inside',\n               showlegend=True,\n               marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                           line=dict(color='#000000',\n                                     width=2),\n                          )\n                  )\n\ntrace2 = go.Pie(labels=rest_world['Q1'].value_counts().index.sort_values(),  \n               values=rest_world['Q1'].value_counts().values, \n               hoverinfo='percent+value+label', \n               textinfo='percent',\n               textposition='inside',\n               showlegend=True,\n               marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                           line=dict(color='#000000',\n                                     width=2),\n                          )\n                  )\n\nlayout = go.Layout(title=\"Age Group Distribution South America\",template= \"plotly_dark\")\nfig=go.Figure(data=[trace], layout=layout)\nfig.show()\n\nlayout = go.Layout(title=\"Age Group Distribution - Rest of the world\",template= \"plotly_dark\")\nfig=go.Figure(data=[trace2], layout=layout)\nfig.show()","e3f8ec7e":"temp_df = df[\"Q6\"].value_counts().reset_index()\n\ntrace1 = go.Bar(\n                x = temp_df['index'],\n                y = temp_df['Q6'],\n                marker = dict(color = 'rgb(127, 16, 238)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df['Q6'], textposition='outside')\nlayout = go.Layout(template= \"plotly_dark\",title = 'CODING EXPERIENCE' , xaxis = dict(title = 'Years'), yaxis = dict(title = 'Count'), height=650)\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","bd53c379":"Q7_options = []\nQ7_values = []","d092a3b1":"for col in df.columns:\n    if 'Q7' in col:\n        Q7_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q7_values.extend(df[col].value_counts().reset_index()[col].tolist())","74e2dbc0":"Q7_values, Q7_options = (list(t) for t in zip(*sorted(zip(Q7_values, Q7_options))))\ncolors = ['rgb(255,165,0)']*len(Q7_values)\ncolors[-1] = 'rgb(255,0,0)'\n\ntrace1 = go.Bar(\n                x = Q7_values,\n                y = Q7_options,\n                marker = dict(color = colors,\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=Q7_values, textposition='outside', orientation='h')\nlayout = go.Layout(template= \"plotly_dark\",title = 'PROGRAMMING LANGUAGES USED BY SOUTH AMERICAN KAGGLERS' , xaxis = dict(title = 'Count', automargin=True), yaxis = dict(title = 'Language'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","46262e8e":"temp_df = df[\"Q8\"].value_counts(normalize=True).reset_index()\n\ntrace1 = go.Bar(\n                x = temp_df['index'],\n                y = temp_df['Q8']*100,\n                marker = dict(color = 'rgb(127, 16, 238)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df['Q8']*100, textposition='outside', texttemplate='%{text:.3f}')\nlayout = go.Layout(template= \"plotly_dark\",title = 'PROGRAMMING LANGUAGE RECOMMENDED TO LEARN FIRST BY SOUTH AMERICAN KAGGLERS' , xaxis = dict(title = 'Programming Language'), yaxis = dict(title = 'Percentage (%)'), height=650)\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","23103c79":"Q9_options = []\nQ9_values = []","d3252d1e":"for col in df.columns:\n    if 'Q9' in col:\n        Q9_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q9_values.extend(df[col].value_counts().reset_index()[col].tolist())","eb07fd32":"Q9_values, Q9_options = (list(t) for t in zip(*sorted(zip(Q9_values, Q9_options))))\nfig = go.Figure(data=[go.Table(header=dict(values=['IDE', 'Count'], fill_color='black', line_color='darkslategray'),\n                 cells=dict(values=[Q9_options, Q9_values], fill_color='lavender', line_color='darkslategray'))\n                     ])\nfig.show()","5b6195e1":"colors = ['rgb(255,165,0)']*len(Q9_values)\ncolors[-1] = colors[-2] = 'rgb(255,0,0)'\n\ntrace1 = go.Bar(\n                x = Q9_values,\n                y = Q9_options,\n                marker = dict(color = colors,\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=Q9_values, textposition='outside', orientation='h')\nlayout = go.Layout(template= \"plotly_dark\",title = 'IDE PREFERRED BY SOUTH AMERICAN KAGGLERS' , xaxis = dict(title = 'Count', automargin=True), yaxis = dict(title = 'IDE'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","25440572":"Q10_options = []\nQ10_values = []","b220ab4a":"for col in df.columns:\n    if 'Q10' in col:\n        Q10_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q10_values.extend(df[col].value_counts().reset_index()[col].tolist())","b390a8b4":"Q10_values, Q10_options = (list(t) for t in zip(*sorted(zip(Q10_values, Q10_options))))\nfig = go.Figure(data=[go.Table(header=dict(values=['Notebook Products', 'Count'], fill_color='slateblue', line_color='darkslategray'),\n                 cells=dict(values=[Q10_options, Q10_values], fill_color='lavender', line_color='darkslategray'))\n                     ])\nfig.show()","2fe0818e":"colors = ['rgb(255,165,0)']*len(Q10_values)\ncolors[-1] = colors[-2] = 'rgb(255,0,0)'\n\ntrace1 = go.Bar(\n                x = Q10_values,\n                y = Q10_options,\n                marker = dict(color = colors,\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=Q10_values, textposition='outside', orientation='h')\nlayout = go.Layout(template= \"plotly_dark\",title = 'NOTEBOOK PRODUCTS PREFERRED BY SOUTH AMERICAN KAGGLERS' , xaxis = dict(title = 'Count', automargin=True), yaxis = dict(title = 'NOTEBOOK PRODUCT'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","15fd9e1b":"temp_df = df[\"Q11\"].value_counts().reset_index()\n\ntrace1 = go.Bar(\n                x = ['Personal Computer', 'Cloud Computing Platform', 'None', 'Deep learning workstation', 'Other'],\n                y = temp_df['Q11'],\n                marker = dict(color = 'rgb(127, 16, 238)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df['Q11'], textposition='outside')\nlayout = go.Layout(template= \"plotly_dark\",title = 'COMPUTING PLATFORM FREQUENTLY USED' , xaxis = dict(title = 'Computing Platform'), yaxis = dict(title = 'Count'), height=650)\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","d52099bc":"Q12_options = []\nQ12_values = []","61104d89":"for col in df.columns:\n    if 'Q12' in col:\n        Q12_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q12_values.extend(df[col].value_counts().reset_index()[col].tolist())","0a260ffc":"Q12_values, Q12_options = (list(t) for t in zip(*sorted(zip(Q12_values, Q12_options))))\n\ntrace1 = go.Bar(\n                x = Q12_values,\n                y = Q12_options,\n                marker = dict(color = 'rgb(255,165,0)',\n                              line=dict(color='rgb(0,0,0)')),\n                text=Q12_values, textposition='outside', orientation='h')\nlayout = go.Layout(template= \"plotly_dark\",title = 'HARDWARE FREQUENTLY USED' , xaxis = dict(title = 'Count'), yaxis = dict(title = 'Hardware'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","6e0dcba6":"Q16_options = []\nQ16_values = []","bd8aab2a":"for col in df.columns:\n    if 'Q16' in col:\n        Q16_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q16_values.extend(df[col].value_counts().reset_index()[col].tolist())","28e3fddd":"Q16_values, Q16_options = (list(t) for t in zip(*sorted(zip(Q16_values, Q16_options))))\nfig = go.Figure(data=[go.Table(header=dict(values=['Machine Learning Framework', 'Count'], fill_color='lightseagreen', line_color='darkslategray'),\n                 cells=dict(values=[Q16_options, Q16_values], fill_color='lavender', line_color='darkslategray'))\n                     ])\nfig.show()","6abef344":"colors = ['rgb(160, 50, 168)']*len(Q16_values)\ncolors[-1] = colors[-2] = 'rgb(222,13,69)'\n\ntrace1 = go.Bar(\n                x = Q16_values,\n                y = Q16_options,\n                marker = dict(color = colors,\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=Q16_values, textposition='outside', orientation='h')\nlayout = go.Layout(template= \"plotly_dark\",title = 'FAVOURITE MACHINE LEARNING FRAMEWORK' , xaxis = dict(title = 'Count', automargin=True), yaxis = dict(title = 'ML Framework'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","35ba2d77":"Q17_options = []\nQ17_values = []","7a4fa166":"for col in df.columns:\n    if 'Q17' in col:\n        Q17_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q17_values.extend(df[col].value_counts().reset_index()[col].tolist())","23b84637":"Q17_values, Q17_options = (list(t) for t in zip(*sorted(zip(Q17_values, Q17_options))))\nfig = go.Figure(data=[go.Table(header=dict(values=['Machine Learning Algorithm', 'Count'], fill_color='lightseagreen', line_color='darkslategray'),\n                 cells=dict(values=[Q17_options, Q17_values], fill_color='lavender', line_color='darkslategray'))\n                     ])\nfig.show()","e4ffbf5f":"colors = ['rgb(125, 13, 222)']*len(Q17_values)\ncolors[-1] = colors[-2] = colors[-3] = 'rgb(222,13,69)'\n\ntrace1 = go.Bar(\n                x = Q17_values,\n                y = Q17_options,\n                marker = dict(color = colors,\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=Q17_values, textposition='outside', orientation='h')\nlayout = go.Layout(template= \"plotly_dark\",title = 'FAVOURITE MACHINE LEARNING ALGORITHM' , xaxis = dict(title = 'Count', automargin=True), yaxis = dict(title = 'ML ALgorithm'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","bb193f11":"Q18_options = []\nQ18_values = []","62cea7b1":"for col in df.columns:\n    if 'Q18' in col:\n        Q18_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q18_values.extend(df[col].value_counts().reset_index()[col].tolist())","b728fa8e":"trace = go.Pie(labels=['General purpose image\/video tools', 'Image Segmentation methods', 'Object Detection methods',\n                       'Image Classification', 'Generative Networks', 'None', 'Other'], \n               values=Q18_values, \n               title=\"Computer Vision Applications\", \n               hoverinfo='percent+value+label', \n               textinfo='percent',\n               textposition='inside',\n               hole=0.6,\n               showlegend=True,\n               marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                           line=dict(color='#000000',\n                                     width=2),\n                          )\n                  )\nlayout = go.Layout(title=\"Computer Vision applications\",template= \"plotly_dark\")\nfig = go.Figure(data=[trace], layout = layout)\nfig.show()","308c8cdf":"Q19_options = []\nQ19_values = []","ff16e6aa":"for col in df.columns:\n    if 'Q19' in col:\n        Q19_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q19_values.extend(df[col].value_counts().reset_index()[col].tolist())","0e713df6":"trace = go.Pie(labels=Q19_options, \n               values=Q19_values, \n               title=\"NLP Methods\", \n               hoverinfo='percent+value+label', \n               textinfo='percent',\n               textposition='inside',\n               hole=0.6,\n               showlegend=True,\n               marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                           line=dict(color='#000000',\n                                     width=2),\n                          )\n                  )\nlayout = go.Layout(title=\"NLP Methods\", template= \"plotly_dark\")\nfig = go.Figure(data=[trace],layout = layout)\nfig.show()","8f1d1e5a":"Q14_options = []\nQ14_values = []","833f7d0f":"for col in df.columns:\n    if 'Q14' in col:\n        Q14_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q14_values.extend(df[col].value_counts().reset_index()[col].tolist())","1f491819":"Q14_values, Q14_options = (list(t) for t in zip(*sorted(zip(Q14_values, Q14_options))))\n\ncolors = ['rgb(125, 13, 222)']*len(Q14_values)\ncolors[-1] = colors[-2] = 'rgb(205, 0, 0)'\n\ntrace1 = go.Bar(\n                x = Q14_values,\n                y = Q14_options,\n                marker = dict(color = colors,\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=Q14_values, textposition='outside', orientation='h')\nlayout = go.Layout(template= \"plotly_dark\",title = 'FAVOURITE VISUALIZATION TOOLS' , xaxis = dict(title = 'Count', automargin=True), yaxis = dict(title = 'Visualization Tool'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","51bbcf39":"Q36_cols = []\nfor col in df.columns:\n    if 'Q36' in col:\n        Q36_cols.append(col)","c1645f02":"df[Q36_cols].info()","b812c494":"Q37_options = []\nQ37_values = []","bfca8394":"for col in df.columns:\n    if 'Q37' in col:\n        Q37_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q37_values.extend(df[col].value_counts().reset_index()[col].tolist())","442ac529":"Q37_values, Q37_options = (list(t) for t in zip(*sorted(zip(Q37_values, Q37_options))))\nQ37_options = ['Fast.ai', 'None', 'Cloud-certification programs', 'LinkedIn Learning', 'Udacity', 'edX', 'Other', 'Datacamp', 'University Courses', 'Udemy', 'Kaggle Learn Courses', 'Coursera']\n\ncolors = ['rgb(125, 13, 222)']*len(Q37_values)\ncolors[-1] = 'rgb(205, 0, 0)'\n\ntrace1 = go.Bar(\n                x = Q37_values,\n                y = Q37_options,\n                marker = dict(color = colors,\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=Q37_values, textposition='outside', orientation='h')\nlayout = go.Layout(template= \"plotly_dark\",title = 'PLATFORMS FOR DATA SCIENCE COURSES' , xaxis = dict(title = 'Count', automargin=True), yaxis = dict(title = 'Data Science Platform'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","ee8c88b1":"### JupyterLabs\/Jupyter Notebooks is the first choice for south american, followed by VSCode","9239a031":"# Education Q5\nLet visualize what is the distribution of the jobs title at south america and the rest of the world\n","95388765":"# Platform to Share and Deploy Data Science Applications","50a5bc1a":"# Notebook Products Preffered","ed933f12":"<head>\n<link rel=\"preconnect\" href=\"https:\/\/fonts.gstatic.com\">\n<link href=\"https:\/\/fonts.googleapis.com\/css2?family=Lobster&display=swap\" rel=\"stylesheet\">\n<link href=\"https:\/\/fonts.googleapis.com\/css2?family=Roboto&display=swap\" rel=\"stylesheet\">\n<\/head>\n\n<h1 style=\"color:MAGENTA; font-family: 'Roboto', sans-serif; text-align:center; font-size:30px\"> SOUTH AMERICAN KAGGLE COMPETITORS<\/h1>\n<hr>","b7655eb6":"# Age Distribution","63dd1014":"### 77.8% of south american kagglers recommended to learn Python as the first language for an Aspiring Data Scientist","be312651":"### Maximum Students prefer GPUs and CPUs on a regular basis","3197b84d":"### As expected, most of the students have very less coding experience ","e73e901d":"![](https:\/\/github.com\/DavidCastilloAlvarado\/portfolio\/raw\/master\/static\/images\/logo2.jpg)","ee922364":"### All the values are NaNs ","ea984748":"# Favourite Machine Learning Framework","d024de43":"# Education Q4","5bc46a4e":"# Natural Language Processing Methods Used Frequently","3be7e3c3":"### The proportion of young south american kagglers [18-29] is higher to his proportion at the rest of the world","f1af9633":"<h2 style=\"text-align:center; font-family:Audiowide\"> This notebooks have the aims to show the behavior of southAmerica Kagglers competitors compare with the rest of the world <\/h2>\n\n<h3 style=\"text-align:center\">Like a peruvian myself i know that data science and farther more technologies are not so relevant topics here and the same behavior repeat in the rest of south america, so i want to know and understand the current situation of Kaggle on south america compared to the rest of the world<\/h3>\n<h2 style=\"text-align:center; font-family:'Lobster', cursive\">Let's Explore!<\/h2>","b2bd14e6":"# Gender Diversity","a8768af3":"### Python is the most used programming language by Indian students","2a5f12eb":"# Computer Vision Applications Used Frequently","183d02bb":"# IDE's Preferred","4b43f766":"### Coursera is the most widely preffered platform for Data Science Courses ","9a82a16f":"# Programming Languages Recommended to learn first","810a1565":"# Platforms for Data science courses","619d0be3":"# Programming Languages Used","5604dcbb":"### Colab and Kaggle Notebooks are the most preffered Notebook Products","a27d12f1":"<h1> South America countries to analyse <\/h1>","3d14c860":"### Word Embeddings, Encoder-Decoder models and Transformer models are the most frequently used NLP methods","95b32af9":"# Hardware Used on a Regular Basis","9caebac7":"### Maximum students prefer using their own Personal Computers as the preffered computing platform ","e0cf6554":"# Favourite Machine Learning Algorithm","daa0d6eb":"# Favourite Visualization Tools","4195af37":"### Matplotlib and seaborn are the most common plotting tools used","7ca37d5a":"# Coding Experience","7abdc04e":"### Image Classification, Image Segmentation, General purpose tools and Object Detection are the Most Common applications of Computer Vision","f9f030a5":"# Computing Platform Frequently Used","16cba8a6":"### Linear\/Logistic Regression, Tree-based models and Gradient boosting machines are the most preffered ML Algorithms","0a35155d":"### MALE KAGGLERS DOMINATE AT SOUTH AMERICA IN TERMS OF QUANTITY","61d6892a":"### Scikit-learn, Tensorflow and Keras are the most preffered ML Frameworks","b05a17d1":"### We see that more than 78% of the kagglers have a high formal education. "}}