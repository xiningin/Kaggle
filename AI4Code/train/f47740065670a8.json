{"cell_type":{"074f938a":"code","afca1102":"code","5c0376c7":"code","320659a4":"code","a3c80093":"code","98b16ceb":"code","5f409bd1":"code","e27b10a2":"code","5deed2f6":"code","32fbfa1a":"code","575c10d3":"code","6738fec2":"code","3f8b22bb":"code","54140566":"code","e4c09810":"code","d587904d":"code","535e31ae":"code","764f3ec9":"markdown","26ef0f60":"markdown","0512ce1c":"markdown","50c9c59c":"markdown","d48db451":"markdown","ddfc41c8":"markdown","263d0319":"markdown","95d7f22a":"markdown","d7be04df":"markdown","cb74940d":"markdown","c2b84405":"markdown","d038d1c8":"markdown","a9590e65":"markdown","88652242":"markdown","29547f80":"markdown","2dd17c11":"markdown"},"source":{"074f938a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # data visualization library  \nimport matplotlib.pyplot as plt\nimport time\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","afca1102":"data = pd.read_csv('\/kaggle\/input\/data.csv')","5c0376c7":"data.head()","320659a4":"# feature names as a list\ncol = data.columns       # .columns gives columns names in data \nprint(col)","a3c80093":"# y includes our labels and x includes our features\ny = data.diagnosis                          # M or B \nlist = ['Unnamed: 32','id','diagnosis']\nx = data.drop(list,axis = 1 )\nx.head()","98b16ceb":"ax = sns.countplot(y,label=\"Count\")\nB, M = y.value_counts()\nprint('Number of Benign: ',B)\nprint('Number of Malignant : ',M)","5f409bd1":"x.describe()","e27b10a2":"# first ten features\ndata_dia = y\ndata = x\ndata_n_2 = (data - data.mean()) \/ (data.std())              # standardization\ndata = pd.concat([y,data_n_2.iloc[:,0:10]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data,split=True, inner=\"quart\")\nplt.xticks(rotation=45);","5deed2f6":"# Second ten features\ndata = pd.concat([y,data_n_2.iloc[:,10:20]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data,split=True, inner=\"quart\")\nplt.xticks(rotation=45);","32fbfa1a":"# Third ten features\ndata = pd.concat([y,data_n_2.iloc[:,20:31]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data,split=True, inner=\"quart\")\nplt.xticks(rotation=45);","575c10d3":"# As an alternative of violin plot, box plot can be used\n# box plots are also useful in terms of seeing outliers\n# I do not visualize all features with box plot\n# In order to show you lets have an example of box plot\n# If you want, you can visualize other features as well.\nplt.figure(figsize=(10,10))\nsns.boxplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","6738fec2":"sns.jointplot(x.loc[:,'concavity_worst'],\n              x.loc[:,'concave points_worst'],\n              kind=\"regg\",\n              color=\"#ce1414\");","3f8b22bb":"sns.set(style=\"white\")\ndf = x.loc[:,['radius_worst','perimeter_worst','area_worst']]\ng = sns.PairGrid(df, diag_sharey=False)\ng.map_lower(sns.kdeplot, cmap=\"Blues_d\")\ng.map_upper(plt.scatter)\ng.map_diag(sns.kdeplot, lw=3);","54140566":"sns.set(style=\"whitegrid\", palette=\"muted\")\ndata_dia = y\ndata = x\ndata_n_2 = (data - data.mean()) \/ (data.std())              # standardization\ndata = pd.concat([y,data_n_2.iloc[:,0:10]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","e4c09810":"data = pd.concat([y,data_n_2.iloc[:,10:20]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","d587904d":"data = pd.concat([y,data_n_2.iloc[:,20:31]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","535e31ae":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(x.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax);","764f3ec9":"### Task 9: Observing all Pair-wise Correlations","26ef0f60":"<h2 align=center> Data Visualization <\/h2>\n\n---","0512ce1c":"### About the Dataset:","50c9c59c":"### Task 3: Plot Diagnosis Distributions","d48db451":"### Task 4: Visualizing Standardized Data with Seaborn","ddfc41c8":"The [Breast Cancer Diagnostic data](https:\/\/archive.ics.uci.edu\/ml\/datasets\/Breast+Cancer+Wisconsin+%28Diagnostic%29) is available on the UCI Machine Learning Repository. This database is also available through the [UW CS ftp server](http:\/\/ftp.cs.wisc.edu\/math-prog\/cpo-dataset\/machine-learn\/cancer\/WDBC\/).\n\nFeatures are computed from a digitized image of a fine needle aspirate (FNA) of a breast mass. They describe characteristics of the cell nuclei present in the image. n the 3-dimensional space is that described in: [K. P. Bennett and O. L. Mangasarian: \"Robust Linear Programming Discrimination of Two Linearly Inseparable Sets\", Optimization Methods and Software 1, 1992, 23-34].","263d0319":"### Task 6: Using Joint Plots for Feature Comparison","95d7f22a":"### Task 2: Separate Target from Features","d7be04df":"### Task 7: Uncovering Correlated Features with Pair Grids","cb74940d":"<h2 align=center> Exploratory Data Analysis <\/h2>\n\n---","c2b84405":"### Task 8: Observing the Distribution of Values and their Variance with Swarm Plots","d038d1c8":"<h2 align=center>Tumor Diagnosis (Part 1): Exploratory Data Analysis<\/h2>\n<img src=\"https:\/\/storage.googleapis.com\/kaggle-datasets-images\/180\/384\/3da2510581f9d3b902307ff8d06fe327\/dataset-cover.jpg\">\n","a9590e65":"**Attribute Information**:\n\n- ID number\n- Diagnosis (M = malignant, B = benign) 3-32)","88652242":"### Task 1: Loading Libraries and Data","29547f80":"Ten real-valued features are computed for each cell nucleus:\n\n1. radius (mean of distances from center to points on the perimeter) \n2. texture (standard deviation of gray-scale values) \n3. perimeter \n4. area \n5. smoothness (local variation in radius lengths) \n6. compactness (perimeter^2 \/ area - 1.0) \n7. concavity (severity of concave portions of the contour) \n8. concave points (number of concave portions of the contour)\n9. symmetry\n10. fractal dimension (\"coastline approximation\" - 1)\n\nThe mean, standard error and \"worst\" or largest (mean of the three largest values) of these features were computed for each image, resulting in 30 features. For instance, field 3 is Mean Radius, field 13 is Radius SE, field 23 is Worst Radius.\n\nAll feature values are recoded with four significant digits.\n\nMissing attribute values: none\n\nClass distribution: 357 benign, 212 malignant","2dd17c11":"### Task 5: Violin Plots and Box Plots"}}