{"cell_type":{"e96c4929":"code","c8c5921e":"code","e68b79f2":"code","6f797dfd":"code","1c988ed0":"code","e5f38f6b":"code","9fba5d77":"code","a974d30f":"code","fc1a6154":"code","4668270e":"code","e343d778":"code","acedbc71":"code","cabe5fb3":"code","d21a7a80":"code","f8ca96e0":"code","2a360b91":"code","cb3698bb":"code","8ebb929f":"code","0461ab86":"code","f9a5b6fa":"code","d0ffd153":"code","b65b84c7":"code","5179690c":"code","b60161be":"code","0ee1ee32":"code","be60499b":"code","347d94df":"code","772e5fb2":"code","f51bf298":"code","4d6bd1c1":"code","ad4fb5ca":"code","49375d8f":"code","6304ee8f":"code","e5d88de0":"code","78c5c3d8":"code","88c90227":"code","21ee29ca":"markdown","0f1bea78":"markdown","b1092941":"markdown","c361285f":"markdown","86a514cd":"markdown","6064bdb6":"markdown","1d911d6e":"markdown","bd27f264":"markdown","3352b694":"markdown","c50b91d2":"markdown","d57890c0":"markdown","de84dc11":"markdown","89e6685d":"markdown","1f10f5fd":"markdown","e2e38d18":"markdown","c5bfda6b":"markdown","e007b071":"markdown","f61d44fe":"markdown","1856c3ec":"markdown","6e0e7abb":"markdown","6c0be18a":"markdown","6f7e9630":"markdown","67d69e05":"markdown","6094548b":"markdown","ef5ab815":"markdown"},"source":{"e96c4929":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns","c8c5921e":"train_df = pd.read_csv('..\/input\/titanic-dataset-me-wow\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic-dataset-me-wow\/test.csv')\nsub_df = pd.read_csv('..\/input\/titanic-dataset-me-wow\/gender_submission.csv')\n\nprint(\"train\\n\", train_df.head())\nprint(\"test\\n\", test_df.head())","e68b79f2":"train_df.info()\ntest_df.info()\n\nfull_df = pd.concat([train_df, test_df], axis = 0)\nfull_df.info()","6f797dfd":"full_df.isnull().sum()","1c988ed0":"def missing_perc(df, column):\n    return df[column].isnull().sum() \/ (df[column].isnull().sum() + df[column].notnull().sum())\ndef print_perc():\n    print(\"full_df Missing percent of Survived column: \", missing_perc(full_df, 'Survived'))\n    print(\"full_df Missing percent of Age column: \", missing_perc(full_df, 'Age'))\n    print(\"full_df Missing percent of Embarked column: \", missing_perc(full_df, 'Embarked'))\n    print(\"full_df Missing percent of Cabin column: \", missing_perc(full_df, 'Cabin'))\n    print(\"full_df Missing percent of Fare column: \", missing_perc(full_df, 'Fare'))\n    print()\n\n    print(\"test_df Missing percent of Age column: \", missing_perc(test_df, 'Age'))\n    print(\"test_df Missing percent of Embarked column: \", missing_perc(test_df, 'Embarked'))\n    print(\"test_df Missing percent of Cabin column: \", missing_perc(test_df, 'Cabin'))\n    print(\"test_df Missing percent of Fare column: \", missing_perc(test_df, 'Fare'))\n    print()\n\n    print(\"train_df Missing percent of Survived column: \", missing_perc(train_df, 'Survived'))\n    print(\"train_df Missing percent of Age column: \", missing_perc(train_df, 'Age'))\n    print(\"train_df Missing percent of Embarked column: \", missing_perc(train_df, 'Embarked'))\n    print(\"train_df Missing percent of Cabin column: \", missing_perc(train_df, 'Cabin'))\n    print(\"train_df Missing percent of Fare column: \", missing_perc(train_df, 'Fare'))","e5f38f6b":"print_perc()","9fba5d77":"def replace_age_missing(df):\n    mean = full_df['Age'].mean()\n    std = full_df['Age'].std()\n    df_size = df['Age'].isnull().sum()\n    df_replace = np.random.randint(mean - std, mean + std, size = df_size)\n    \n    # df[df[df['Age'].isnull()].index] = df_replace\n    # Had to use the below instead because the above caused fragmentation\n    temp_df = df['Age'].copy()\n    temp_df[temp_df[temp_df.isnull()].index] = df_replace\n    df['Age'] = temp_df\n    df['Age'] = df['Age'].astype(int)\n    return df","a974d30f":"test_df = replace_age_missing(test_df)\ntrain_df = replace_age_missing(train_df)\n\nprint(\"test_df Missing percent of Age column: \", missing_perc(test_df, 'Age'))\nprint(\"train_df Missing percent of Age column: \", missing_perc(train_df, 'Age'))","fc1a6154":"# Barely any values are missing from the column so we can just fill them in with the most common value\nprint(test_df['Embarked'].value_counts(), \"\\n\")\nprint(train_df['Embarked'].value_counts())\n# In both the most common is S so we will just use that\ntrain_df['Embarked'] = train_df['Embarked'].fillna('S')\nprint(\"train_df Missing percent of Embarked column: \", missing_perc(train_df, 'Embarked'))","4668270e":"train_df.drop(['Cabin'], axis=1, inplace=True)\ntest_df.drop(['Cabin'], axis=1, inplace=True)","e343d778":"# Barely any values are missing from the column so we can just fill them in with the mean value\nprint(test_df['Fare'].mean(), \"\\n\")\n\ntest_df['Fare'] = test_df['Fare'].fillna(test_df['Fare'].mean())\nprint(\"test_df Missing percent of Fare column: \", missing_perc(test_df, 'Fare'))","acedbc71":"print(train_df.isnull().sum(),'\\n')\nprint(test_df.isnull().sum())\n# also redefine full_df now that missing vals are fixed\nfull_df = pd.concat([train_df, test_df], axis = 0)","cabe5fb3":"print(full_df.columns)\n# Given this we have quite a few things to compare, however we can start with Sex vs. Survival\nprint(full_df['Sex'].value_counts())\nprint(full_df['Survived'].value_counts())","d21a7a80":"fig, ax = plt.subplots()\nfemale = full_df[full_df['Sex']=='female']\nmale = full_df[full_df['Sex']=='male']\ngraph = sns.countplot(data=female, x = 'Survived')\ngraph.set_title('Females')\nplt.show()\ngraph = sns.countplot(data=male, x = 'Survived')\ngraph.set_title('Males')\nplt.show()","f8ca96e0":"survived = full_df[full_df['Survived']==1]\nunsurvived = full_df[full_df['Survived']==0]\ngraph = sns.histplot(survived.Age)\ngraph.set_title('Survived')\nplt.show()\ngraph = sns.histplot(unsurvived.Age)\ngraph.set_title('Dead')\nplt.show()","2a360b91":"female = full_df[full_df['Sex']=='female']\nmale = full_df[full_df['Sex']=='male']\ngraph = sns.histplot(female[female['Survived'] == 1].Age, color = 'green')\ngraph = sns.histplot(female[female['Survived'] == 0].Age, color = 'orange')\ngraph.set_title('Females Survived vs. Females Dead')\nplt.show()\ngraph = sns.histplot(male[male['Survived'] == 1].Age, color = 'green')\ngraph = sns.histplot(male[male['Survived'] == 0].Age, color = 'orange')\ngraph.set_title('Males Survived vs. Males Dead')\nplt.show()","cb3698bb":"sns.boxplot(data = survived, x='Sex', y='Age')","8ebb929f":"sns.boxplot(data = unsurvived, x='Sex', y='Age')","0461ab86":"# ahh yes I know exactly what all this means \ud83e\uddd0\nsns.pairplot(train_df, hue='Sex')","f9a5b6fa":"female = full_df[full_df['Sex']=='female']\nmale = full_df[full_df['Sex']=='male']\ngraph = sns.histplot(female[female['Survived'] == 1].Pclass, color = 'green')\ngraph = sns.histplot(female[female['Survived'] == 0].Pclass, color = 'orange')\nplt.show()\ngraph = sns.histplot(male[male['Survived'] == 1].Pclass, color = 'green')\ngraph = sns.histplot(male[male['Survived'] == 0].Pclass, color = 'orange')\nplt.show()\ngraph = sns.histplot(full_df[full_df['Survived'] == 1].Pclass, color = 'green')\ngraph = sns.histplot(full_df[full_df['Survived'] == 0].Pclass, color = 'orange')\nplt.show()","d0ffd153":"female = full_df[full_df['Sex']=='female']\nmale = full_df[full_df['Sex']=='male']\ngraph = sns.histplot(female[female['Survived'] == 1].SibSp, color = 'green')\ngraph = sns.histplot(female[female['Survived'] == 0].SibSp, color = 'orange')\nplt.show()\ngraph = sns.histplot(male[male['Survived'] == 1].SibSp, color = 'green')\ngraph = sns.histplot(male[male['Survived'] == 0].SibSp, color = 'orange')\nplt.show()\ngraph = sns.histplot(full_df[full_df['Survived'] == 1].SibSp, color = 'green')\ngraph = sns.histplot(full_df[full_df['Survived'] == 0].SibSp, color = 'orange')\nplt.show()","b65b84c7":"graph = sns.histplot(female[female['Survived'] == 1].Fare, color = 'green', bins=20)\ngraph = sns.histplot(female[female['Survived'] == 0].Fare, color = 'orange', bins=10)\nplt.show()\ngraph = sns.histplot(male[male['Survived'] == 1].Fare, color = 'green', bins=20)\ngraph = sns.histplot(male[male['Survived'] == 0].Fare, color = 'orange', bins=20)\nplt.show()\ngraph = sns.histplot(full_df[full_df['Survived'] == 1].Fare, color = 'green', bins=20)\ngraph = sns.histplot(full_df[full_df['Survived'] == 0].Fare, color = 'orange', bins=20)\nplt.show()","5179690c":"graph = sns.histplot(female[female['Survived'] == 1].Parch, color = 'green', bins=20)\ngraph = sns.histplot(female[female['Survived'] == 0].Parch, color = 'orange', bins=10)\nplt.show()\ngraph = sns.histplot(male[male['Survived'] == 1].Parch, color = 'green', bins=20)\ngraph = sns.histplot(male[male['Survived'] == 0].Parch, color = 'orange', bins=20)\nplt.show()\ngraph = sns.histplot(full_df[full_df['Survived'] == 1].Parch, color = 'green', bins=20)\ngraph = sns.histplot(full_df[full_df['Survived'] == 0].Parch, color = 'orange', bins=20)\nplt.show()","b60161be":"female = full_df[full_df['Sex']=='female']\nmale = full_df[full_df['Sex']=='male']\ngraph = sns.histplot(female[female['Survived'] == 1].Embarked, color = 'green')\ngraph = sns.histplot(female[female['Survived'] == 0].Embarked, color = 'orange')\nplt.show()\ngraph = sns.histplot(male[male['Survived'] == 1].Embarked, color = 'green')\ngraph = sns.histplot(male[male['Survived'] == 0].Embarked, color = 'orange')\nplt.show()\ngraph = sns.histplot(full_df[full_df['Survived'] == 1].Embarked, color = 'green')\ngraph = sns.histplot(full_df[full_df['Survived'] == 0].Embarked, color = 'orange')\nplt.show()","0ee1ee32":"print(train_df.columns)\n\nprint(train_df['PassengerId'].value_counts)\ntrain_df.drop(['PassengerId'], axis=1, inplace=True)\ntest_df.drop(['PassengerId'], axis=1, inplace=True)\n\nprint(train_df['Name'].value_counts())\ntrain_df.drop(['Name'], axis=1, inplace=True)\ntest_df.drop(['Name'], axis=1, inplace=True)\n\n# too much variation\nprint(train_df['Ticket'].value_counts())\ntrain_df.drop(['Ticket'], axis=1, inplace=True)\ntest_df.drop(['Ticket'], axis=1, inplace=True)\n\nprint(train_df.columns)","be60499b":"y_train = train_df['Survived']\ntrain_df.drop(['Survived'], axis=1, inplace=True)\ny_test = sub_df['Survived']","347d94df":"def fix_embarked(df):\n    mymap = {'Q':2, 'S':1, 'C':0}\n    return df['Embarked'].apply(lambda x: mymap[x])","772e5fb2":"train_num_df = train_df.copy()\ntrain_num_df.drop(['Sex'], axis=1, inplace=True)\ntrain_num_df.drop(['Embarked'], axis=1, inplace=True)\ntrain_num_df.drop(['Pclass'], axis=1, inplace=True)\ntrain_num_df.drop(['SibSp'], axis=1, inplace=True)\ntrain_num_df.drop(['Parch'], axis=1, inplace=True)\ntrain_num_df.drop(['Fare'], axis=1, inplace=True)\ntrain_else_df = pd.get_dummies(train_df[['Sex', 'Pclass', 'SibSp', 'Parch']], drop_first=True)\ntrain_else_df = pd.concat([train_else_df, fix_embarked(train_df.copy())], axis=1)\nprint(train_num_df)\nprint(train_else_df)\ntest_num_df = test_df.copy()\ntest_num_df.drop(['Sex'], axis=1, inplace=True)\ntest_num_df.drop(['Embarked'], axis=1, inplace=True)\ntest_num_df.drop(['Pclass'], axis=1, inplace=True)\ntest_num_df.drop(['SibSp'], axis=1, inplace=True)\ntest_num_df.drop(['Parch'], axis=1, inplace=True)\ntest_num_df.drop(['Fare'], axis=1, inplace=True)\ntest_else_df = pd.get_dummies(test_df[['Sex', 'Pclass', 'SibSp', 'Parch']], drop_first=True)\ntest_else_df = pd.concat([test_else_df, fix_embarked(test_df.copy())], axis=1)\nprint(test_num_df)\nprint(test_else_df)","f51bf298":"from sklearn.preprocessing import StandardScaler","4d6bd1c1":"temp = train_num_df.columns\n\nscale = StandardScaler()\nscale.fit(train_num_df)\ntrain_num_df = scale.transform(train_num_df)\ntest_num_df = scale.transform(test_num_df)\n\ntrain_num_df = pd.DataFrame(train_num_df, columns=temp)\ntest_num_df = pd.DataFrame(test_num_df, columns=temp)\n\ntrain_final_df = pd.concat([train_num_df, train_else_df], axis=1)\ntest_final_df = pd.concat([test_num_df, test_else_df], axis=1)\nprint(train_final_df)\nprint(test_final_df)","ad4fb5ca":"from sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import confusion_matrix, plot_confusion_matrix\nfrom sklearn.metrics import mean_squared_error","49375d8f":"lr = LinearRegression().fit(train_final_df, y_train)\nprint(lr.score(train_final_df, y_train))\nprint(lr.score(test_final_df, y_test))\ny_pred = lr.predict(test_final_df)\nprint(mean_squared_error(y_test, y_pred))","6304ee8f":"knn = KNeighborsClassifier(n_neighbors=13).fit(train_final_df, y_train)\nprint(knn.score(train_final_df, y_train))\nprint(knn.score(test_final_df, y_test))\ny_pred = knn.predict(test_final_df)","e5d88de0":"tree = DecisionTreeClassifier().fit(train_final_df, y_train)\nprint(tree.score(train_final_df, y_train))\nprint(tree.score(test_final_df, y_test))","78c5c3d8":"sgd = SGDClassifier().fit(train_final_df, y_train)\nprint(sgd.score(train_final_df, y_train))\nprint(sgd.score(test_final_df, y_test))","88c90227":"submission = pd.DataFrame()\nsubmission['PassengerId'] = test_final_df.index + 892\nsubmission['Survived'] = y_pred\nsubmission.to_csv('submission.csv',index=False)","21ee29ca":"**Loading Data** + viewing","0f1bea78":"**More Data Cleaning** *wow*","b1092941":"Plot Sex vs. Survival","c361285f":"Importing Libraries","86a514cd":"Remove Cabin column (too messed up to fix %77 missing vals)","6064bdb6":"Now our dataframes are setup correctly, however they need to be formatted so that the models can evaluate them","1d911d6e":"Fix missing data","bd27f264":"**Exploratory data analysis**","3352b694":"Now looking at the above graphs, there are actually a few conclusions that can be drawn:\n1. PassengerId does not have an effect on Survival Rate (obv)\n2. Fare does not seem to have major effect on Survival Rate\n3. Parch does not seem to have major effect on Survival Rate\n4. Embarked does not seem to have major effect on Survival Rate\n\nWith this in mind we can keep an eye on Fare and Parch and remove Survival Rate from the training dataframe.\nWhile doing this we can also look through all the columns of the dataframe and see which are useless for prediction.","c50b91d2":"**SGDClassifier**","d57890c0":"**Submission Data**","de84dc11":"**Removing Missing Data**","89e6685d":"Fix Age column (replace all missing values with random values based on total dataset)","1f10f5fd":"**DecisionTrees**","e2e38d18":"Fix Fare column","c5bfda6b":"**Linear Regression**","e007b071":"Plot Age vs. Survival","f61d44fe":"Plot Survival based on Age and sex","1856c3ec":"**Checking Data**","6e0e7abb":"With this we should be ready to begin building models","6c0be18a":"**Building Models + Testing**","6f7e9630":"View missing percentages of each column","67d69e05":"Fix Embarked column","6094548b":"**KNearestNeighbors** We will use this one since it repeatedly does the best","ef5ab815":"And they also need to be scaled so it can be evaluated correctly"}}