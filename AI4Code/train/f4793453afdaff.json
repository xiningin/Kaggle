{"cell_type":{"cd872cf4":"code","888a116b":"code","2ed9e234":"code","077acdcf":"code","b8b5647b":"code","5755b3de":"code","fcf3904a":"code","321feeb9":"code","04b1c1f2":"code","ac7d9f2c":"code","8a585819":"code","e98070de":"code","159165e9":"markdown","97b35841":"markdown","efc0d010":"markdown","e6f546bc":"markdown","da99f83b":"markdown","4ad085f4":"markdown","cc853752":"markdown"},"source":{"cd872cf4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import LabelEncoder \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.linear_model import LinearRegression  \n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","888a116b":"df_tr=pd.read_csv(r'\/kaggle\/input\/hackerearth-amazon\/train.csv')\ndf_tr","2ed9e234":"df_ts=pd.read_csv(r'\/kaggle\/input\/hackerearth-amazon\/test.csv')\ndf_ts","077acdcf":"sns.catplot(x=\"customer_category\", y=\"customer_visit_score\", hue=\"X1\", kind=\"swarm\", data=df_tr)","b8b5647b":"sns.catplot(x=\"customer_category\", y=\"customer_visit_score\", hue=\"customer_active_segment\", kind=\"swarm\", data=df_tr)","5755b3de":"# label encoding the data \n\nle = LabelEncoder() \n\ndf_tr['X1']=df_tr['X1'].astype(str)\ndf_tr['customer_active_segment']=df_tr['customer_active_segment'].astype(str)\ndf_tr['X1']= le.fit_transform(df_tr['X1']) \ndf_tr['customer_active_segment']= le.fit_transform(df_tr['customer_active_segment']) \ndf_tr","fcf3904a":"df_tr['customer_id']=df_tr['customer_id'].apply(lambda x: x.split('_')[1])\ndf_tr['customer_id']=df_tr['customer_id'].astype(\"int64\")\ndf_tr","321feeb9":"# from plotnine import *\n\nmy_data=df_tr\ntotal = my_data.isnull().sum().sort_values(ascending=False)\npercent = (my_data.isnull().sum()\/my_data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nf, ax = plt.subplots(figsize=(15, 6))\nplt.xticks(rotation='90')\nsns.barplot(x=missing_data.index, y=missing_data['Percent'])\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)\nmissing_data.head()","04b1c1f2":"df=df_tr\n\nimp_mean = IterativeImputer(estimator=RandomForestRegressor(), random_state=0)\nimp_mean.fit(df)\ndisplay(pd.DataFrame(imp_mean.transform(df)))","ac7d9f2c":"pd.DataFrame(imp_mean.transform(df)).isnull().sum()","8a585819":"df=df_tr\n\nimp_mean = IterativeImputer(estimator=LinearRegression())\nimp_mean.fit(df)\ndisplay(pd.DataFrame(imp_mean.transform(df)))","e98070de":"pd.DataFrame(imp_mean.transform(df)).isnull().sum()","159165e9":"## Imputation using RandomForestRegressor","97b35841":"### Encoding the Data","efc0d010":"# Missing Value Statistics","e6f546bc":"## visualise categorical column customer_active_segment based on Customer Category vs Customer Visit Score","da99f83b":"## visualise categorical column X1 based on Customer Category vs Customer Visit Score\n","4ad085f4":"# One hot Encoding of the columns: X1, Customer_Active_Segment\n","cc853752":"## Imputation using Linear Regression"}}