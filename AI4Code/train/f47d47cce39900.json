{"cell_type":{"f643df27":"code","a80fd51f":"code","d0658e11":"code","6ce0b905":"code","2eccaa81":"code","07e45107":"code","b743ea5d":"code","b78fb744":"code","5d053b26":"code","976ce7ae":"code","e1893a63":"code","00037f88":"code","4f67df8b":"code","3a1cc055":"code","77fdece8":"code","964f24ea":"code","97e1fb95":"code","207d93fb":"code","ded781e5":"code","1550dd40":"code","38986b03":"code","880e54fe":"code","57e86cae":"code","a6e9c8d9":"code","1e5faa13":"code","3663a856":"code","d7633bf0":"code","960519a9":"code","68fb57c8":"code","15bb6341":"code","363a93d3":"code","0952b3dc":"code","9c8d08c9":"code","d21e7211":"code","6caee500":"code","23f0a5cc":"code","11ee3304":"code","9b20fd5b":"code","9def0efb":"code","6f3e5b40":"code","3b1a45ae":"code","7f43fa9d":"code","c4d0c30f":"code","d53398c3":"code","f8c3ba64":"code","97ad7177":"code","955ddf79":"code","a40b5c2a":"code","670c18ef":"code","578dfbe0":"code","5f2e9013":"code","cb557664":"code","ffe5a395":"code","16124e79":"code","5fd8a375":"code","0f45040f":"code","9438b0d4":"code","b39566e2":"code","ccfba657":"markdown","a3682ac5":"markdown","8586c704":"markdown","e609c349":"markdown","d95c3b2a":"markdown","ca05bfbe":"markdown","c35f7348":"markdown","7e3fd868":"markdown","e398b4df":"markdown","650c05c4":"markdown","769323c0":"markdown","1dda049f":"markdown","590ca8e5":"markdown","c61686d0":"markdown","a4eaebd1":"markdown","9898d875":"markdown","09b2b867":"markdown","15df6887":"markdown","44b9cc54":"markdown","ba004fda":"markdown","7ee9b764":"markdown","6cf3d3f6":"markdown","4cd3e75b":"markdown","15db77f1":"markdown","d22c8663":"markdown","f16bb47a":"markdown","e69e3722":"markdown","b215026e":"markdown","3673fbe6":"markdown","773c14a8":"markdown","d92f1684":"markdown","9142f772":"markdown","27f86351":"markdown"},"source":{"f643df27":"!pip install -q efficientnet_pytorch","a80fd51f":"import os\nimport torch\nimport random\nimport pandas as pd\nimport numpy as np\nimport cv2\n\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\nimport torchvision.transforms as transforms\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\nfrom torch.optim.lr_scheduler import OneCycleLR, CosineAnnealingWarmRestarts\nfrom efficientnet_pytorch import EfficientNet\nimport torchvision.transforms.functional as TF\n\n%matplotlib inline","d0658e11":"DATA_DIR = '..\/input\/jovian-pytorch-z2g\/Human protein atlas'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           # Contains training images\nTEST_DIR = DATA_DIR + '\/test'                             # Contains test images\n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       # Contains real labels for training images\nTEST_CSV = '..\/input\/jovian-pytorch-z2g\/submission.csv'   # Contains dummy labels for test image","6ce0b905":"!head \"{TRAIN_CSV}\"","2eccaa81":"!head \"{TEST_CSV}\"","07e45107":"!ls \"{TRAIN_DIR}\" | head","b743ea5d":"import pandas as pd\ntrain_df = pd.read_csv(TRAIN_CSV)\ntrain_df.head()","b78fb744":"labels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n}","5d053b26":"def encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\ndef decode_target(target, text_labels=False, threshold=0.5):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)\n","976ce7ae":"encode_label('2 4 5')","e1893a63":"decode_target(torch.tensor([0, 0, 1, 0, 1, 1, 0, 0, 0, 0.]))","00037f88":"decode_target(torch.tensor([0, 0, 1, 0, 1, 1, 0, 0, 0, 0.]), text_labels=True)","4f67df8b":"class HumanProteinDataset(Dataset):\n    def __init__(self, df, root_dir, transform=None):\n#         self.df = pd.read_csv(csv_file) \n        self.df = df\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['Image'], row['Label']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".png\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)","3a1cc055":"# --- Read in Data ---\n\nval_pct = 0.1\nval_size = int(val_pct * len(train_df))\ntrain_size = len(train_df) - val_size\n\n# ## version1\n# train_data = train_df.iloc[:train_size].reset_index(drop=True)\n# valid_data = train_df.iloc[-val_size:].reset_index(drop=True)\n\n#version2\n# train_data = train_df.iloc[val_size:].reset_index(drop=True)\n# valid_data = train_df.iloc[:val_size].reset_index(drop=True)\n\n#version3\nstart_step = 8000\nvalid_data = train_df.iloc[start_step:start_step+val_size].reset_index(drop=True)\ntrain_data = pd.concat([train_df.iloc[:start_step], train_df.iloc[start_step+val_size:]]).reset_index(drop=True)\n\nlen(train_data), len(valid_data)","77fdece8":"\ntrain_transform = transforms.Compose([  \n    transforms.RandomHorizontalFlip(),\n    transforms.RandomVerticalFlip(),\n    transforms.RandomRotation(30),\n    transforms.ColorJitter(brightness=0.2, saturation=0.2, contrast=0.2),\n    transforms.ToTensor()\n    ])\n\ntest_transform = transforms.Compose([\n    transforms.ToTensor()\n\n    ])\n\ntrain_ds = HumanProteinDataset(train_data, TRAIN_DIR, transform=train_transform)\nval_ds = HumanProteinDataset(valid_data, TRAIN_DIR, transform=test_transform)","964f24ea":"def show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))\n    ","97e1fb95":"show_sample(*train_ds[0], invert=False)","207d93fb":"show_sample(*train_ds[0])","ded781e5":"torch.manual_seed(10)","1550dd40":"def show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))\n        break","38986b03":"batch_size = 22\n\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=2, pin_memory=True)\n\nshow_batch(train_dl)","880e54fe":"def F_score(output, label, threshold=0.5, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)","57e86cae":"ALPHA = 0.25\nGAMMA = 2\nFOCAL_LOSS = False\n\nclass MultilabelImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)      \n        \n        loss = F.binary_cross_entropy(out, targets)\n        bce_exp = torch.exp(-loss)\n        focal_loss = ALPHA * (1-bce_exp)**GAMMA * loss\n        if FOCAL_LOSS: loss = focal_loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images) \n        # Generate predictions\n        loss = F.binary_cross_entropy(out, targets)  # Calculate loss\n        bce_exp = torch.exp(-loss)\n        focal_loss = ALPHA * (1-bce_exp)**GAMMA * loss\n        \n        score = F_score(out, targets)\n        if FOCAL_LOSS: loss = focal_loss\n            \n        return {'val_loss': loss.detach(), 'val_score': score.detach()}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_scores = [x['val_score'] for x in outputs]\n        epoch_score = torch.stack(batch_scores).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_score': epoch_score.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_score: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_score']))","a6e9c8d9":"class EfficientNetwork(MultilabelImageClassificationBase):\n    def __init__(self, b4=False, b2=False):\n        super().__init__()\n        self.b4, self.b2 = b4, b2\n        \n        # Define Feature part\n        if b4:\n            self.features = EfficientNet.from_pretrained('efficientnet-b4')\n        elif b2:\n            self.features = EfficientNet.from_pretrained('efficientnet-b2')\n        else:\n            self.features = EfficientNet.from_pretrained('efficientnet-b1')\n        \n        # Define Classification part\n        if b4:\n            self.classification = nn.Linear(1792, 10)\n        elif b2:\n            self.classification = nn.Linear(1408, 10)\n        else:\n            self.classification = nn.Linear(1280, 10)\n        \n        \n    def forward(self, image, prints=False):\n        if prints: print('Input Image shape:', image.shape)\n        \n        image = self.features.extract_features(image)\n        if prints: print('Features Image shape:', image.shape)\n            \n        if self.b4:\n            image = F.avg_pool2d(image, image.size()[2:]).reshape(-1, 1792)\n        elif self.b2:\n            image = F.avg_pool2d(image, image.size()[2:]).reshape(-1, 1408)\n        else:\n            image = F.avg_pool2d(image, image.size()[2:]).reshape(-1, 1280)\n        if prints: print('Image Reshaped shape:', image.shape)\n        \n        out = self.classification(image)\n        if prints: print('Out shape:', out.shape)\n        \n        return torch.sigmoid(out)\n    \n    ","1e5faa13":"  class Resnet(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet50(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))","3663a856":"model = EfficientNetwork(b4=False, b2=False)","d7633bf0":"def count_parameters(model):\n    return sum(p.numel() for p in model.parameters() if p.requires_grad)\ncount_parameters(model)","960519a9":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","68fb57c8":"device = get_default_device()\ndevice","15bb6341":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device);","363a93d3":"def try_batch(dl):\n    for images, labels in dl:\n        print('images.shape:', images.shape)\n        out = model(images)\n        print('out.shape:', out.shape)\n        print('out[0]:', out[0])\n        break\n\ntry_batch(train_dl)","0952b3dc":"from tqdm.notebook import tqdm","9c8d08c9":"num_epochs = 26\n\nes_patience = 5\n\nopt_func = torch.optim.AdamW\nlr_patience = 2\nlr_factor = 0.2\nmax_lr = 0.01\nlr = 0.0001\n\nweight_decay = 0.01\namsgrad=True","d21e7211":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit(epochs, lr, max_lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    lrs = []\n    valid_loss_min = np.Inf\n    model_file_name = 'best_model.pth'\n    epochs_no_improve =  0\n    \n    optimizer = opt_func(model.parameters(), lr=lr, amsgrad=True, weight_decay=weight_decay)\n    scheduler = OneCycleLR(optimizer, max_lr=max_lr, steps_per_epoch=len(train_loader), epochs=epochs)\n#     scheduler = CosineAnnealingWarmRestarts(optimizer, T_0=2)\n\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            scheduler.step()\n            \n            lrs.append(get_lr(optimizer))\n      # Validation phase   \n\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n\n        valid_loss = result['val_loss']\n\n\n        if valid_loss < valid_loss_min:\n            torch.save(model.state_dict(), model_file_name)\n            valid_loss_min = valid_loss                                  \n            epochs_no_improve = 0          \n        else:\n            epochs_no_improve += 1\n            if epochs_no_improve > es_patience:\n                model.epoch_end(epoch, result)\n                history.append(result)\n                return history  \n               \n        \n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history\n","6caee500":"history = [evaluate(model, val_dl)]\nhistory","23f0a5cc":"%%time\n### After all the epochs end, load best_model.pth, reduce learning to 0.00001 and train a little more\n# model.load_state_dict(torch.load('best_model.pth'))\n\nhistory = fit(num_epochs, lr, max_lr, model, train_dl, val_dl, opt_func)","11ee3304":"def plot_scores(history):\n    scores = [x['val_score'] for x in history]\n    plt.plot(scores, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('score')\n    plt.title('F1 score vs. No. of epochs');","9b20fd5b":"plot_scores(history)","9def0efb":"def predict_single(image):\n    xb = image.unsqueeze(0)\n    xb = to_device(xb, device)\n    preds = model(xb)\n    prediction = preds[0]\n    print(\"Prediction: \", prediction)\n    show_sample(image, prediction)","6f3e5b40":"#TODO train_transform and test_transform\ntest_data = pd.read_csv(TEST_CSV)\ntest_dataset = HumanProteinDataset(test_data, TEST_DIR, transform=test_transform)","3b1a45ae":"img, target = test_dataset[0]\nimg.shape","7f43fa9d":"predict_single(test_dataset[100][0])","c4d0c30f":"predict_single(test_dataset[74][0])","d53398c3":"test_dl = DeviceDataLoader(DataLoader(test_dataset, batch_size*4, num_workers=2, pin_memory=True), device)","f8c3ba64":"\n@torch.no_grad()\ndef predict_dl(dl, model):\n    torch.cuda.empty_cache()\n    batch_probs = []\n    for xb, _ in tqdm(dl):\n        probs = model(xb)\n        batch_probs.append(probs.cpu().detach())\n    batch_probs = torch.cat(batch_probs)      \n    return  [x.numpy() for x in batch_probs]\n#     return [decode_target(x) for x in batch_probs]","97ad7177":"test_preds = predict_dl(test_dl, model)","955ddf79":"len(test_preds)","a40b5c2a":"submission_df = pd.read_csv(TEST_CSV)\nsubmission_df.Label = test_preds\nsubmission_df.head()","670c18ef":"sub_fname = 'efficientb1_0.86_2jul.csv'\nsubmission_df.to_csv(sub_fname, index=False)","578dfbe0":"# import pandas as pd\n# import numpy as np\n\n# df = pd.read_csv('..\/efficientb1_submission_0.8246.csv')\n# df2 = pd.read_csv('..\/efficientb1_submission_0.8209.csv')\n# df3 = pd.read_csv('..\/efficientb2_submission_0.81_2jul.csv')\n# df4 = pd.read_csv('..\/efficientb2_submission_0.80.csv')\n# df5 = pd.read_csv('..\/efficientb1_0.86_2jul.csv')\n# df6 = pd.read_csv('..\/efficientb1_0.8125.csv')\n\n# def e_to_double(num_str):\n#     return [float(s.strip()) for s in num_str.strip('[]').split(' ') if s.strip() != '']\n\n# def decode_target(target, text_labels=False, threshold=0.5):\n#     result = []\n#     for i, x in enumerate(target):\n#         if (x >= threshold):\n#             if text_labels:\n#                 result.append(labels[i] + \"(\" + str(i) + \")\")\n#             else:\n#                 result.append(str(i))\n#     return ' '.join(result)","5f2e9013":"df['probs'] = df.Label.apply(lambda x: e_to_double(x))\ndf['Label'] = df.probs.apply(lambda x: decode_target(x))\n\ndf2['probs'] = df2.Label.apply(lambda x: e_to_double(x))\ndf2['Label'] = df2.probs.apply(lambda x: decode_target(x))\n\ndf3['probs'] = df3.Label.apply(lambda x: e_to_double(x))\ndf3['Label'] = df3.probs.apply(lambda x: decode_target(x))\n\ndf4['probs'] = df4.Label.apply(lambda x: e_to_double(x))\ndf4['Label'] = df4.probs.apply(lambda x: decode_target(x))\n\ndf5['probs'] = df5.Label.apply(lambda x: e_to_double(x))\ndf5['Label'] = df5.probs.apply(lambda x: decode_target(x))\n\ndf6['probs'] = df6.Label.apply(lambda x: e_to_double(x))\ndf6['Label'] = df6.probs.apply(lambda x: decode_target(x))","cb557664":"join_df = df[['Image','probs']].merge(df2[['Image','probs']], on='Image', how='inner', suffixes=('', '_a'))\njoin_df = join_df[['Image','probs','probs_a', 'probs_b']].merge(df3[['Image','probs']], on='Image', how='inner', suffixes=('', '_b'))\njoin_df = join_df[['Image','probs','probs_a', 'probs_b', 'probs_c']].merge(df4[['Image','probs']], on='Image', how='inner', suffixes=('', '_c'))\njoin_df = join_df[['Image','probs','probs_a', 'probs_b', 'probs_c', 'probs_d']].merge(df5[['Image','probs']], on='Image', how='inner', suffixes=('', '_d'))\njoin_df = join_df.merge(df6[['Image','probs']], on='Image', how='inner', suffixes=('', '_e'))","ffe5a395":"lst_add = []\nfor n, row in join_df.iterrows():\n    add_prob = np.array(row['probs'] * 2) + (np.array(row['probs_a']) + np.array(row['probs_b']) + np.array(row['probs_c']) + np.array(row['probs_d']) + np.array(row['probs_e'])\n    lst_add.append(list(add_prob \/ 6))","16124e79":"join_df['avg'] = lst_add\njoin_df['Label'] = join_df.avg.apply(lambda x: decode_target(x))\nen = join_df[['Image', 'Label', 'avg']]\n\n# fill the missing label with lower threshold\nen['Label'] = np.where(en.Label == '', en.avg.apply(lambda x: decode_target(x, threshold=0.46)), en.Label) \nprint(len(en[en.Label == '']))\nen['Label'] = np.where(en.Label == '', en.avg.apply(lambda x: decode_target(x, threshold=0.445)), en.Label)\nprint(len(en[en.Label == '']))\n\n# finally fill with max probabilities\nen['Label'] = np.where(en.Label == '', en.avg.apply(lambda x: np.argmax(x)), en.Label)","5fd8a375":"final_df = en[['Image', 'Label']]\nfinal_df.to_csv('\/Users\/mimi\/Desktop\/ensem5_6items_thres_2jul.csv',index=False)","0f45040f":"# !pip install jovian --upgrade","9438b0d4":"# import jovian","b39566e2":"# jovian.commit(project='zerogans-protein-competition')","ccfba657":" Read prediction files contain `Image` and probabilities and do ensemble.","a3682ac5":"Let's check how many samples the dataset contains","8586c704":"## Exploring the Data\n\nWhen you create a notebook with the \"Notebooks\" tab of a Kaggle competition, the data is automatically included in the `..\/input` folder. You can explore the files in the sidebar. Let us create some constants acess the data directories and CSV files.","e609c349":"## Training the model","d95c3b2a":"\n### Model: EfficientNet-B1 and EfficientNet-B2\n    - EfficientNet-B1 vs EfficientNet-B2: I used both of them for ensemble.\n    - EfficientNets perform better than resnets and densenet.\n    - I didn't use EfficientNet-B4 because the score drops when I resized the image.\n    \n### Optimizer: AdamW, amsgrad=True, weight_decay=0.01\n    AdamW vs Adam:         \n        AdamW optimizer converges faster than Adam. \n          \n   See more details in [Why AdamW matters](https:\/\/towardsdatascience.com\/why-adamw-matters-736223f31b5d) and [AdamW and Super-convergence is now the fastest way to train neural nets](https:\/\/www.fast.ai\/2018\/07\/02\/adam-weight-decay\/)\n        \n\n### Learning rate scheduler: \n    OneCyclic vs CosineAnnealingWarmRestarts:  \n        - CosineAnnealingWarmRestarts converges faster but the better f1 scores (>0.82) are from using Onecyclic with initial learning rate 0.0001 and 26 #epochs.\n        - I used CosineAnnealingWarmRestarts for finding the best model, then I used OneCyclic for generating a single submission result before ensemble.\n        \n   This [article](https:\/\/towardsdatascience.com\/adaptive-and-cyclical-learning-rates-using-pytorch-2bf904d18dee) explains why OneCyclic performs better with the right number of epochs and learning rate.\n\n### Image augmentation:\n    - I use below augmentation during training time and turn it off during validation and test time.\n    - RandomHorizontalFlip\n    - RandomVerticalFlip\n    - RandomRotation\n    - ColorJitter(brightness=0.2, saturation=0.2, contrast=0.2)\n    - Resize() (used only when searching for hyperparameters, I get higher scores without using Resize())\n    \n### Loss:Binary cross-entropy\n    - binary cross-entropy vs focal loss: \n        when focal loss decreases, f1 score doesn't increase much. I get better f1-score from using binary cross-entropy.\n    \n### Ensemble\n    - I ensemble the 6 best checkpoints of my model.\n \n### Convert probability that exceeds a certain threshold to labels: 0.5 > 0.46 > 0.445 > argmax\n    - I set 0.5 as the threshold value as the predicted classes and then fill missing classes with threshold over 0.46 and 0.445 respectively. \n    - I Use argmax() for predicting the rest of the missing classes.","ca05bfbe":"Let's also put the textual labels in a dictionary for later use.","c35f7348":"If your kernel runs out of memory here, you might need to reduce your batch size.","7e3fd868":"I tried using different of training, and validation dataset when I train the model and then used the probabilities of the model to do ensemble","e398b4df":"Let's take a look at a sample image from the dataset. We'll define a function `show_sample` to help us. We will also include the option to invert the image before showing it, because the original images are quite dark.","650c05c4":"Saving the prediction in raw probabilities instead of classes to use for stacking later.","769323c0":"Here's the same image viewed with the colors inverted","1dda049f":"## ensemble","590ca8e5":"Let's try predicting the labels for some sample images","c61686d0":"The `train.csv` file contains image IDs and labels for training data. Note that this is a multi-label classification problem. Each image can have more than one type of protein.","a4eaebd1":"### Training & Validation sets\n\nAs a good practice, we should split the data into training and validation datasets. Let's fix a seed for PyTorch (to ensure we always get the same validation set), and create the datasets using `random_split`.","9898d875":"## Save to Jovian","09b2b867":"## Data Loaders","15df6887":"## Human Protein Multi Label Image Classification \n\n\n\n [Zero to GANs - Human Protein Classification](https:\/\/www.kaggle.com\/c\/jovian-pytorch-z2g)\n ### Acknowledgement\n \n - The basic of the notebook is taken from [Simple CNN Starter](https:\/\/www.kaggle.com\/aakashns\/simple-cnn-starter)\n - The efficient network part is taken from [Melanoma Competiton: Aug + ResNet\/EffNet (LB 0.91)](https:\/\/www.kaggle.com\/andradaolteanu\/melanoma-competiton-aug-resnet-effnet-lb-0-91)\n - Early stopping and model checkpoint are taken from [Protein Classification Basic](https:\/\/www.kaggle.com\/nachiket273\/protein-classification-one-cycle), this kernel saved me a lot of training time. \n \n Thanks to [Andrada](https:\/\/www.kaggle.com\/andradaolteanu), [nachiket273](https:\/\/www.kaggle.com\/nachiket273) and [Aakash](https:\/\/www.kaggle.com\/aakashns) for sharing your work!","44b9cc54":"Transforms can be chained using `transforms.Compose`. For instance, you may add `transforms.Resize(128)` before `transforms.ToTensor()` to resize images to size 128x128 before converting them into tensors. See the full list of transforms here: https:\/\/pytorch.org\/docs\/master\/torchvision\/transforms.html","ba004fda":"Here's a sample image without the colors inverted.","7ee9b764":"## Making predictions & submission\nTo start with, let's create a helper function to make a prediction on a single image.","6cf3d3f6":"## Creating Datasets & Data Loaders\n\nWe can now create a custom dataset by extending the `Dataset` class from PyTorch. We need to define the `__len__` and `__getitem__` methods to create a dataset. We'll also provide the option of adding transforms into the constructor.","4cd3e75b":"Next, let's create a test dataset using the `submission.csv` file. Note that the file contains dummy labels (always `'0'`). We'll use the same transforms we used for the training set.","15db77f1":"You can also use the \"Save Version\" button on Kaggle itself, to save a copy on your Kaggle profile.","d22c8663":"## Creating a submission file","f16bb47a":"To create a tensor from the labels, we will encode the labels as vectors of 1s & 0s. For example, if the labels are `'2 4 5'`, the correspoding vector for it would be `[0, 0, 1, 0, 1, 1, 0, 0, 0, 0]`. Let's define helper funtions to encode labels into tensors and vice versa.","e69e3722":"We can now save it batck to CSV, and download the file from the sidebar (check the output folder)","b215026e":"The image files are named `<image-id>.png` and can be found in the respective `train` and `test` folders.","3673fbe6":"I'm using a validation percentage of 10%, but you can use a smaller or larger percentage. One good strategy is to determine a good set of hyperparameters, and then retrain on a smaller validation set for your final submission.","773c14a8":"Similarly, `submission.csv` contains image IDs for test data. However, since the goal of this competition is to make predictions for the test set, the `submission.csv` files contains **dummy labels**, which you need to replace with your predictions and sumbit to the competition on the \"Submission\" tab. In other words, we don't have the labels for the test set.","d92f1684":"## Model","9142f772":"Let us know create a submission file with these predictions","27f86351":"Let's load the `train.csv` file into a Pandas dataframe"}}