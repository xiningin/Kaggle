{"cell_type":{"869d3e3f":"code","c6f6d01b":"code","7bc65946":"code","9358f269":"code","3a1d012b":"code","9c9a1e2f":"code","ec3764b8":"code","32ae899b":"code","41526227":"code","e04bba29":"code","4a810cc6":"code","6a6a843a":"code","4e104681":"code","c2081123":"code","768ec576":"code","c6b281d4":"code","9d238e55":"code","0327a5f9":"code","1927fe2b":"code","dd71b9e5":"code","a3b20995":"code","04390b97":"code","6f5f9880":"markdown","6a5fd8b0":"markdown","c342c216":"markdown","768991ad":"markdown","efb9f5b8":"markdown","3b4341f2":"markdown","86280618":"markdown"},"source":{"869d3e3f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport nltk\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c6f6d01b":"Using rstrip() plus a list comprehension to get a list of all the lines of text reviews.","7bc65946":"df_review = [line.rstrip() for line in open('..\/input\/amazon_alexa.tsv')]\nprint (len(df_review))","9358f269":"import pandas\ndf_review = pandas.read_csv('..\/input\/amazon_alexa.tsv', sep='\\t')\ndf_review.head()","3a1d012b":"df_review.describe()","9c9a1e2f":"df_review.groupby('rating').describe()","ec3764b8":"df_review['length'] = df_review['verified_reviews'].apply(len)\ndf_review.head()","32ae899b":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","41526227":"df_review['length'].plot(bins=50, kind='hist')","e04bba29":"df_review.length.describe()","4a810cc6":"df_review[df_review['length'] == 2851]['verified_reviews'].iloc[0]","6a6a843a":"df_review.hist(column='length', by='feedback', bins=50,figsize=(10,4))","4e104681":"import numpy as np\nimport matplotlib.pyplot as plt","c2081123":"# Importing the dataset\ndataset = pd.read_csv('..\/input\/amazon_alexa.tsv', delimiter = '\\t', quoting = 3)\n","768ec576":"# Cleaning the texts\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\ncorpus=[]\nfor i in range(0,3150):\n    review = re.sub('[^a-zA-Z]', ' ', dataset['verified_reviews'][i] )\n    review=review.lower()\n    review=review.split()\n    ps=PorterStemmer()\n    review=[ps.stem(word) for word in review if not word in set(stopwords.words('english'))]\n    review=' '.join(review)\n    corpus.append(review)","c6b281d4":"# creating the Bag of words Model\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv=CountVectorizer(max_features=1500)\nX=cv.fit_transform(corpus).toarray()\ny=dataset.iloc[:,4].values","9d238e55":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\n","0327a5f9":"import xgboost as xgb","1927fe2b":"# Fitting Random Forest classifier with 100 trees to the Training set\nfrom xgboost import XGBClassifier\nclassifier = XGBClassifier()\nclassifier.fit(X_train, y_train)","dd71b9e5":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n","a3b20995":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)","04390b97":"cm","6f5f9880":"Making a new column to detect how long the text messages are:","6a5fd8b0":"**Looks like we have some sort of Essay writing review! Now let's focus back on the idea of trying to see if review length is a distinguishing feature between positive and negative review:**","c342c216":"**Basic Exploratory Data Analysis**\nLet's check out some of the stats with some plots and the built-in methods in pandas!","768991ad":"Wow! 2851 characters long review, let's use masking to find this message:\n\n","efb9f5b8":"Above shown matrix is known as confusion matrix and below is my result with \nAccuracy of 93.33%\n(TP+TN)\/total = (576+12)\/630 = 0.9333\n\nTrue Positive Rate: When it's actually yes, how often does it predict yes?\nTP\/actual yes = 576\/576 = 1.00\nalso known as \"Sensitivity\" or \"Recall\"\nit is 100%\n\nFalse Positive Rate: When it's actually no, how often does it predict yes?\nFP\/actual no = 42\/54 = .77\nor 77.77%\n\nPrecision: When it predicts yes, how often is it correct?\nTP\/predicted yes = 576\/618 = 0.9320 or 93.20%\n\nF-score is 96.48 \n","3b4341f2":"Here I am using XGBoost algorithm to optimize the result","86280618":"Finding out the Maximum length review"}}