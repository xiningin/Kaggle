{"cell_type":{"1496a1a8":"code","1b577c5b":"code","b6f7ca5d":"code","92a81b04":"code","c6000442":"code","d457a7f5":"code","5b375841":"code","2a499200":"code","0cf6161e":"code","00fe00ea":"code","66554245":"code","6080640b":"code","76ea2b27":"code","56ea241b":"code","23863653":"code","693550e7":"code","22ce3abc":"code","c91b8411":"code","3ae47608":"markdown","6770ff48":"markdown","06f3a414":"markdown","f894a08c":"markdown"},"source":{"1496a1a8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt\nfrom typing import Tuple\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport plotly.offline\n\n\n# read data\nin_kaggle = True\n\n# base report output path\nreports_folder = 'reports\/'\n\ndef get_data_file_path(is_in_kaggle: bool) -> Tuple[str, str, str, str, str]:\n    train_path = ''\n    test_path = ''\n\n    if is_in_kaggle:\n        # running in Kaggle, inside the competition\n        train_path = '..\/input\/lish-moa\/train_features.csv'\n        train_targets_path = '..\/input\/lish-moa\/train_targets_scored.csv'\n        train_targets_nonscored_path = '..\/input\/lish-moa\/train_targets_nonscored.csv'\n        test_path = '..\/input\/lish-moa\/test_features.csv'\n        sample_submission_path = '..\/input\/lish-moa\/sample_submission.csv'\n    else:\n        # running locally\n        train_path = 'data\/train_features.csv'\n        train_targets_path = 'data\/train_targets_scored.csv'\n        train_targets_nonscored_path = 'data\/train_targets_nonscored.csv'\n        test_path = 'data\/test_features.csv'\n        sample_submission_path = 'data\/sample_submission.csv'\n\n    return train_path, train_targets_path, train_targets_nonscored_path, test_path, sample_submission_path","1b577c5b":"start_time = dt.datetime.now()\nprint(\"Started at \", start_time)","b6f7ca5d":"%%time\n# get the training set and labels\ntrain_set_path, train_set_targets_path, train_set_targets_nonscored_path, test_set_path, sample_subm_path = get_data_file_path(in_kaggle)\n\ntrain_features = pd.read_csv(train_set_path)\ntest_features = pd.read_csv(test_set_path)\n\nc = pd.read_csv(train_set_targets_nonscored_path)\nd = pd.read_csv(train_set_targets_path)\n\nsubm = pd.read_csv(sample_subm_path)","92a81b04":"%%time\n# additional feature engineering routines\n\nfeatures_g = list(train_features.columns[4:776])\nfeatures_c = list(train_features.columns[776:876])\n\nnumeric_cols = list(train_features.columns[4:876])\ncategoric_cols = [\"cp_type\",\"cp_time\",\"cp_dose\"]\n\n# map cp_time as a char in order AutoViML not to interpret it a continuous variable\ndef map_cp_time(train, test):\n    cp_time = {24: 't_24', 48: 't_48', 72: 't_72'}\n    for df in [train, test]:\n        df['cp_time'] = df['cp_time'].map(cp_time)\n\n# Function to extract common stats features\ndef add_stat_features(train, test):\n\n    for df in [train, test]:\n        df['g_sum'] = df[features_g].sum(axis=1)\n        df['g_mean'] = df[features_g].mean(axis=1)\n        df['g_std'] = df[features_g].std(axis=1)\n        df['g_kurt'] = df[features_g].kurtosis(axis=1)\n        df['g_skew'] = df[features_g].skew(axis=1)\n        df['c_sum'] = df[features_c].sum(axis=1)\n        df['c_mean'] = df[features_c].mean(axis=1)\n        df['c_std'] = df[features_c].std(axis=1)\n        df['c_kurt'] = df[features_c].kurtosis(axis=1)\n        df['c_skew'] = df[features_c].skew(axis=1)\n        df['gc_sum'] = df[features_g + features_c].sum(axis=1)\n        df['gc_mean'] = df[features_g + features_c].mean(axis=1)\n        df['gc_std'] = df[features_g + features_c].std(axis=1)\n        df['gc_kurt'] = df[features_g + features_c].kurtosis(axis=1)\n        df['gc_skew'] = df[features_g + features_c].skew(axis=1)\n\n    return train, test\n\n# function to add squared c-features\ndef add_c_squared(train, test):\n    for df in [train, test]:\n        for feature in features_c:\n            df[f'{feature}_squared'] = df[feature] ** 2\n    return train, test\n\n# function to add squared g-features\ndef add_g_squared(train, test):\n    for df in [train, test]:\n        for feature in features_g:\n            df[f'{feature}_squared'] = df[feature] ** 2\n    return train, test\n\n# function to add by-cat ratio features\ndef add_ratio_functions(train, test):    \n    for df in [train, test]:\n        for col in features_g:\n            for feat in categoric_cols:\n                df[f'{col}_mean_group_{feat}']=df[col]\/df.groupby(feat)[col].transform('mean')\n                df[f'{col}_max_group_{feat}']=df[col]\/df.groupby(feat)[col].transform('max')\n                df[f'{col}_min_group_{feat}']=df[col]\/df.groupby(feat)[col].transform('min')\n                df[f'{col}_skew_group_{feat}']=df[col]\/df.groupby(feat)[col].transform('skew')\n                df[f'{col}_skew_group_{feat}']=df[col]\/df.groupby(feat)[col].transform('std')\n    return train, test\n\n# function to add simple genetic features\ndef add_genetic_features(train, test):\n    small_val = 0.00001\n    for df in [train, test]:\n        for col1 in features_g:\n            for col2 in features_g:\n                if col1 != col2:\n                    df[f'{col1}_plus_{col2}'] = df[col1] + df[col2]\n                    df[f'{col1}_minus_{col2}'] = df[col1] - df[col2]\n                    df[f'{col1}_prod_{col2}'] = df[col1] * df[col2]\n                    df[f'{col1}_div_{col2}'] = df[col1] \/ ( df[col2] + small_val)\n                    df[f'{col1}_qq_{col2}'] = (df[col1] + df[col2]) * (df[col1] - df[col2])\n                    df[f'{col1}_div2_{col2}'] = (df[col1] - df[col2]) \/ (df[col1] + df[col2] + small_val)\n\n    return train, test","c6000442":"%%time\n# run additional feature engineering\ntrain_features, test_features = add_stat_features(train_features, test_features)\ntrain_features, test_features = add_g_squared(train_features, test_features)\ntrain_features, test_features = add_ratio_functions(train_features, test_features)\n# train_features, test_features = add_genetic_features(train_features, test_features)","d457a7f5":"imp_features = ['g-721_mean_group_cp_type',\n 'g-220_mean_group_cp_type',\n 'g-72_mean_group_cp_type',\n 'g-729_mean_group_cp_type',\n 'g-195_mean_group_cp_type',\n 'g-719_mean_group_cp_type',\n 'g-353_mean_group_cp_type',\n 'g-140_mean_group_cp_type',\n 'g-198_mean_group_cp_type',\n 'g-270_mean_group_cp_type',\n 'g-196_mean_group_cp_type',\n 'g-531_mean_group_cp_type',\n 'g-194_mean_group_cp_type',\n 'g-550_mean_group_cp_type',\n 'g-55_mean_group_cp_type',\n 'g-266_mean_group_cp_type',\n 'g-726_mean_group_cp_type',\n 'g-322_squared',\n 'g-10_mean_group_cp_type',\n 'g-138_min_group_cp_type',\n 'g-298_mean_group_cp_type',\n 'g-367_max_group_cp_type',\n 'g-406_mean_group_cp_type',\n 'g-203_mean_group_cp_type',\n 'g-147_mean_group_cp_type',\n 'g-579_mean_group_cp_type',\n 'g-607_mean_group_cp_type',\n 'g-100_skew_group_cp_type',\n 'g-508_mean_group_cp_type',\n 'g-60_mean_group_cp_type',\n 'g-729_squared',\n 'g-554_squared',\n 'g-719_squared',\n 'g-470_mean_group_cp_type',\n 'g-432_mean_group_cp_type',\n 'g-564_squared',\n 'g-301_min_group_cp_type',\n 'g-569_mean_group_cp_type',\n 'g-719_min_group_cp_type',\n 'g-633_mean_group_cp_type',\n 'g-253_mean_group_cp_type',\n 'g-107_mean_group_cp_type',\n 'g-96_mean_group_cp_type',\n 'g-224_mean_group_cp_type',\n 'g-627_mean_group_cp_dose',\n 'g-439_mean_group_cp_type',\n 'g-217_mean_group_cp_type',\n 'g-665_mean_group_cp_type',\n 'g-64_mean_group_cp_type',\n 'g-168_mean_group_cp_type',\n 'g-230_mean_group_cp_type',\n 'g-396_mean_group_cp_type',\n 'g-656_mean_group_cp_type',\n 'g-744_mean_group_cp_type',\n 'g-515_mean_group_cp_type',\n 'g-563_mean_group_cp_type',\n 'g-529_min_group_cp_type',\n 'g-374_mean_group_cp_type',\n 'g-295_mean_group_cp_type',\n 'g-189_mean_group_cp_type',\n 'g-473_min_group_cp_type',\n 'g-741_mean_group_cp_type',\n 'g-487_mean_group_cp_type',\n 'g-475_max_group_cp_type',\n 'g-70_mean_group_cp_type',\n 'g-367_squared',\n 'g-50_skew_group_cp_type',\n 'g-534_mean_group_cp_type',\n 'g-495_mean_group_cp_type',\n 'g-525_mean_group_cp_type',\n 'g-729_max_group_cp_type',\n 'g-764_min_group_cp_type',\n 'g-283_max_group_cp_type',\n 'g-762_mean_group_cp_type',\n 'g-66_mean_group_cp_type',\n 'g-39_max_group_cp_type',\n 'g-379_squared',\n 'g-38_min_group_cp_type',\n 'g-57_mean_group_cp_type',\n 'g-609_mean_group_cp_type',\n 'g-721_max_group_cp_type',\n 'g-501_mean_group_cp_time',\n 'g-550_max_group_cp_type',\n 'g-491_min_group_cp_type',\n 'g-222_mean_group_cp_type',\n 'g-411_max_group_cp_type',\n 'g-410_min_group_cp_type',\n 'g-509_min_group_cp_type',\n 'g-680_min_group_cp_type',\n 'g-663_min_group_cp_type',\n 'g-683_max_group_cp_type',\n 'g-424_max_group_cp_type',\n 'g-689_max_group_cp_type',\n 'g-75_skew_group_cp_type',\n 'g-152_max_group_cp_type',\n 'g-663_squared',\n 'g-300_max_group_cp_type',\n 'g-145_max_group_cp_type',\n 'g-689_squared',\n 'g-95_max_group_cp_type',\n 'g-201_min_group_cp_type',\n 'g-181_min_group_cp_type',\n 'g-196_max_group_cp_type',\n 'g-392_squared',\n 'g-539_min_group_cp_type',\n 'g-54_min_group_cp_type',\n 'g-249_min_group_cp_type',\n 'g-158_skew_group_cp_type',\n 'g-229_max_group_cp_type',\n 'g-635_min_group_cp_type',\n 'g-488_max_group_cp_type',\n 'g-568_max_group_cp_type',\n 'g-249_mean_group_cp_type',\n 'g-113_mean_group_cp_type',\n 'g-488_mean_group_cp_type',\n 'g-594_max_group_cp_type',\n 'g-151_mean_group_cp_type',\n 'g-317_max_group_cp_type',\n 'g-31_mean_group_cp_type',\n 'g-333_max_group_cp_type',\n 'g-511_mean_group_cp_type',\n 'g-309_min_group_cp_type',\n 'g-196_squared',\n 'g-742_mean_group_cp_type',\n 'g-742_min_group_cp_type',\n 'g-754_mean_group_cp_type',\n 'g-223_min_group_cp_type',\n 'g-423_max_group_cp_type',\n 'g-434_max_group_cp_type',\n 'g-167_mean_group_cp_type',\n 'g-545_min_group_cp_type',\n 'g-405_mean_group_cp_type',\n 'g-134_min_group_cp_type',\n 'g-287_mean_group_cp_type',\n 'g-243_max_group_cp_type',\n 'g-173_min_group_cp_type',\n 'g-437_min_group_cp_type',\n 'g-559_min_group_cp_type',\n 'g-209_min_group_cp_type',\n 'g-578_max_group_cp_type',\n 'g-142_mean_group_cp_type',\n 'g-98_max_group_cp_type',\n 'g-199_mean_group_cp_type',\n 'g-417_mean_group_cp_type',\n 'g-494_squared',\n 'g-685_mean_group_cp_type',\n 'g-533_mean_group_cp_type',\n 'g-275_min_group_cp_type',\n 'g-0_mean_group_cp_type',\n 'g-742_squared',\n 'g-561_min_group_cp_type',\n 'g-0_max_group_cp_type',\n 'g-671_squared',\n 'g-320_max_group_cp_type',\n 'g-272_min_group_cp_type',\n 'g-494_max_group_cp_type',\n 'g-229_squared',\n 'g-151_max_group_cp_type',\n 'g-671_max_group_cp_type',\n 'g-251_mean_group_cp_type',\n 'g-505_min_group_cp_type',\n 'g-612_mean_group_cp_type',\n 'g-150_mean_group_cp_type',\n 'g-234_mean_group_cp_type',\n 'g-482_min_group_cp_type',\n 'g-259_mean_group_cp_type',\n 'g-110_min_group_cp_type',\n 'g-542_mean_group_cp_type',\n 'g-289_max_group_cp_type',\n 'g-480_mean_group_cp_type',\n 'g-231_mean_group_cp_type',\n 'g-736_mean_group_cp_type',\n 'g-613_mean_group_cp_type',\n 'g-306_skew_group_cp_type',\n 'g-274_mean_group_cp_type',\n 'g-211_mean_group_cp_type',\n 'g-570_mean_group_cp_type',\n 'g-9_mean_group_cp_type',\n 'g-373_max_group_cp_type',\n 'g-546_min_group_cp_type',\n 'g-639_mean_group_cp_type',\n 'g-126_mean_group_cp_type',\n 'g-661_max_group_cp_type',\n 'g-438_max_group_cp_type',\n 'g-139_squared',\n 'g-36_mean_group_cp_type',\n 'g-431_mean_group_cp_type',\n 'g-714_mean_group_cp_type',\n 'g-179_mean_group_cp_type',\n 'g-343_mean_group_cp_type',\n 'g-582_mean_group_cp_type',\n 'g-187_min_group_cp_type',\n 'g-358_mean_group_cp_type',\n 'g-92_max_group_cp_type',\n 'g-245_max_group_cp_type',\n 'g-240_min_group_cp_type',\n 'g-576_max_group_cp_type',\n 'g-679_mean_group_cp_type',\n 'g-234_max_group_cp_type',\n 'g-112_min_group_cp_type',\n 'g-762_max_group_cp_type',\n 'g-697_min_group_cp_type',\n 'g-469_mean_group_cp_type',\n 'g-591_mean_group_cp_type',\n 'g-492_mean_group_cp_type',\n 'g-324_mean_group_cp_type',\n 'g-247_mean_group_cp_type',\n 'g-523_mean_group_cp_type',\n 'g-608_mean_group_cp_type',\n 'g-252_max_group_cp_type',\n 'g-84_max_group_cp_type',\n 'g-139_mean_group_cp_type',\n 'g-638_mean_group_cp_type',\n 'g-218_min_group_cp_type',\n 'g-554_max_group_cp_type',\n 'g-480_mean_group_cp_dose',\n 'g-523_mean_group_cp_dose',\n 'g-176_mean_group_cp_type',\n 'g-466_mean_group_cp_type',\n 'g-79_min_group_cp_type',\n 'g-652_min_group_cp_type',\n 'g-220_squared',\n 'g-357_mean_group_cp_type',\n 'g-377_mean_group_cp_type',\n 'g-678_max_group_cp_type',\n 'g-290_mean_group_cp_type',\n 'g-387_mean_group_cp_type',\n 'g-133_mean_group_cp_type',\n 'g-717_mean_group_cp_type',\n 'g-655_max_group_cp_type',\n 'g-242_max_group_cp_type',\n 'g-25_mean_group_cp_type',\n 'g-619_mean_group_cp_type',\n 'g-183_min_group_cp_type',\n 'g-677_min_group_cp_type',\n 'g-513_mean_group_cp_type',\n 'g-418_max_group_cp_type',\n 'g-194_min_group_cp_type',\n 'g-690_mean_group_cp_type',\n 'g-705_mean_group_cp_type',\n 'g-497_max_group_cp_type',\n 'g-1_mean_group_cp_type',\n 'g-677_squared',\n 'g-192_mean_group_cp_type',\n 'g-631_mean_group_cp_type',\n 'g-120_mean_group_cp_type',\n 'g-527_max_group_cp_type',\n 'g-250_max_group_cp_type',\n 'g-643_mean_group_cp_type',\n 'g-27_max_group_cp_type',\n 'g-465_mean_group_cp_type',\n 'g-739_max_group_cp_type',\n 'g-7_min_group_cp_type',\n 'g-61_min_group_cp_type',\n 'g-616_max_group_cp_type',\n 'g-538_mean_group_cp_type',\n 'g-402_mean_group_cp_type',\n 'g-54_squared',\n 'g-436_mean_group_cp_type',\n 'g-502_max_group_cp_type',\n 'g-636_mean_group_cp_type',\n 'g-249_squared',\n 'g-266_max_group_cp_type',\n 'g-510_mean_group_cp_type',\n 'g-16_mean_group_cp_type',\n 'g-251_mean_group_cp_time',\n 'g-710_min_group_cp_type',\n 'g-62_mean_group_cp_type',\n 'g-273_min_group_cp_type',\n 'g-103_max_group_cp_type',\n 'g-379_min_group_cp_type',\n 'g-458_max_group_cp_type',\n 'g-484_mean_group_cp_type',\n 'g-345_mean_group_cp_type',\n 'g-396_min_group_cp_type',\n 'g-653_min_group_cp_type',\n 'g-225_mean_group_cp_type',\n 'g-244_mean_group_cp_type',\n 'g-19_mean_group_cp_type',\n 'g-24_mean_group_cp_type',\n 'g-769_max_group_cp_type',\n 'g-148_squared',\n 'g-598_min_group_cp_type',\n 'g-139_min_group_cp_type',\n 'g-557_mean_group_cp_type',\n 'g-206_min_group_cp_type',\n 'g-96_skew_group_cp_type',\n 'g-600_mean_group_cp_type',\n 'g-214_max_group_cp_type',\n 'g-47_max_group_cp_type',\n 'g-315_max_group_cp_type',\n 'g-517_min_group_cp_type',\n 'g-359_max_group_cp_type',\n 'g-724_max_group_cp_type',\n 'g-412_max_group_cp_type',\n 'g-328_mean_group_cp_time',\n 'g-404_min_group_cp_type',\n 'g-429_max_group_cp_type',\n 'g-48_squared',\n 'g-740_mean_group_cp_type',\n 'g-490_max_group_cp_type',\n 'g-237_min_group_cp_type',\n 'g-335_min_group_cp_type',\n 'g-605_mean_group_cp_type',\n 'g-723_skew_group_cp_type',\n 'g-210_max_group_cp_type',\n 'g-200_mean_group_cp_type',\n 'g-165_mean_group_cp_type',\n 'g-543_min_group_cp_type',\n 'g-276_min_group_cp_type',\n 'g-86_min_group_cp_type',\n 'g-330_min_group_cp_type',\n 'g-551_max_group_cp_type',\n 'g-316_min_group_cp_type',\n 'g-53_mean_group_cp_dose',\n 'g-601_mean_group_cp_type',\n 'g-18_min_group_cp_type',\n 'g-353_min_group_cp_type',\n 'g-650_mean_group_cp_type',\n 'g-220_max_group_cp_type',\n 'g-116_min_group_cp_type',\n 'g-21_max_group_cp_type',\n 'g-29_min_group_cp_type',\n 'g-419_mean_group_cp_type',\n 'g-350_max_group_cp_type',\n 'g-694_max_group_cp_type',\n 'g-488_squared',\n 'g-521_mean_group_cp_type',\n 'g-522_max_group_cp_type',\n 'g-105_min_group_cp_type',\n 'g-688_mean_group_cp_type',\n 'g-401_min_group_cp_type',\n 'g-8_min_group_cp_type',\n 'g-414_min_group_cp_type',\n 'g-478_mean_group_cp_type',\n 'g-291_max_group_cp_type',\n 'g-297_min_group_cp_type',\n 'g-378_max_group_cp_type',\n 'g-174_squared',\n 'g-198_squared',\n 'g-210_squared',\n 'g-574_min_group_cp_type',\n 'g-17_squared',\n 'g-20_max_group_cp_type',\n 'g-101_mean_group_cp_dose',\n 'g-632_min_group_cp_type',\n 'g-585_mean_group_cp_type',\n 'g-17_max_group_cp_type',\n 'g-544_max_group_cp_type',\n 'g-409_max_group_cp_type',\n 'g-593_min_group_cp_type',\n 'g-621_max_group_cp_type',\n 'g-121_mean_group_cp_type',\n 'g-702_min_group_cp_type',\n 'g-198_min_group_cp_type',\n 'g-653_squared',\n 'g-174_max_group_cp_type',\n 'g-637_min_group_cp_type',\n 'g-468_skew_group_cp_type',\n 'g-755_mean_group_cp_type',\n 'g-111_max_group_cp_type',\n 'g-732_squared',\n 'g-178_skew_group_cp_type',\n 'g-155_max_group_cp_type',\n 'g-162_max_group_cp_type',\n 'g-298_skew_group_cp_type',\n 'g-413_min_group_cp_type',\n 'g-503_mean_group_cp_type',\n 'g-146_squared',\n 'g-597_max_group_cp_type',\n 'g-653_mean_group_cp_type',\n 'g-543_mean_group_cp_type',\n 'g-474_min_group_cp_type',\n 'g-483_min_group_cp_type',\n 'g-590_min_group_cp_type',\n 'g-214_mean_group_cp_time',\n 'g-453_max_group_cp_type',\n 'g-612_max_group_cp_type',\n 'g-585_max_group_cp_type',\n 'g-143_min_group_cp_type',\n 'g-444_min_group_cp_type',\n 'g-491_mean_group_cp_type',\n 'g-304_skew_group_cp_type',\n 'g-487_mean_group_cp_time',\n 'g-495_min_group_cp_type',\n 'g-172_min_group_cp_type',\n 'g-659_max_group_cp_type',\n 'g-432_min_group_cp_type',\n 'g-441_min_group_cp_type',\n 'g-455_min_group_cp_type',\n 'g-398_mean_group_cp_dose',\n 'g-301_mean_group_cp_time',\n 'g-53_max_group_cp_type',\n 'g-439_squared',\n 'c-37',\n 'g-732_mean_group_cp_type',\n 'g-547_mean_group_cp_type',\n 'g-530_mean_group_cp_type',\n 'g-170_min_group_cp_type',\n 'g-301_mean_group_cp_type',\n 'g-530_mean_group_cp_dose',\n 'g-664_squared',\n 'g-447_max_group_cp_type',\n 'g-60_mean_group_cp_time',\n 'g-302_max_group_cp_type',\n 'g-726_min_group_cp_type',\n 'g-205_max_group_cp_type',\n 'g-753_min_group_cp_type',\n 'g-186_squared',\n 'g-567_max_group_cp_type',\n 'g-101_min_group_cp_type',\n 'g-522_squared',\n 'g-146_mean_group_cp_type',\n 'g-447_mean_group_cp_type',\n 'g-620_squared',\n 'g-177_min_group_cp_type',\n 'g-508_squared',\n 'g-526_mean_group_cp_type',\n 'g_kurt',\n 'g-215_skew_group_cp_type',\n 'g-372_mean_group_cp_dose',\n 'g-755_min_group_cp_type',\n 'g-764_squared',\n 'g-695_max_group_cp_type',\n 'g-281_min_group_cp_type',\n 'g-443_max_group_cp_type',\n 'g-11_min_group_cp_type',\n 'g-642_min_group_cp_type',\n 'g-286_min_group_cp_type',\n 'g-149_max_group_cp_type',\n 'g-752_max_group_cp_type',\n 'g-326_min_group_cp_type',\n 'g-569_max_group_cp_time',\n 'g-555_max_group_cp_type',\n 'g-342_mean_group_cp_time',\n 'g-384_min_group_cp_type',\n 'g-45_min_group_cp_type',\n 'g-56_mean_group_cp_type',\n 'g-148_mean_group_cp_type',\n 'g-607_min_group_cp_type',\n 'g-255_mean_group_cp_type',\n 'g-235_max_group_cp_type',\n 'g-311_mean_group_cp_type',\n 'g-696_max_group_cp_type',\n 'g-148_mean_group_cp_time',\n 'g-736_squared',\n 'g-284_max_group_cp_type',\n 'g-758_min_group_cp_type',\n 'g-644_mean_group_cp_time',\n 'g-725_max_group_cp_type',\n 'g-624_mean_group_cp_type',\n 'g-335_squared',\n 'g-378_mean_group_cp_type',\n 'g-28_squared',\n 'g-703_min_group_cp_type',\n 'g-346_max_group_cp_type',\n 'g-416_mean_group_cp_type',\n 'g-230_squared',\n 'g-666_max_group_cp_type',\n 'g-133_squared',\n 'g-342_mean_group_cp_dose',\n 'g-745_mean_group_cp_type',\n 'g-347_min_group_cp_type',\n 'g-615_min_group_cp_type',\n 'g-451_min_group_cp_type',\n 'g-675_min_group_cp_type',\n 'g-512_skew_group_cp_type',\n 'g-71_min_group_cp_type',\n 'g-13_min_group_cp_type',\n 'g-656_mean_group_cp_dose',\n 'g-449_min_group_cp_type',\n 'cp_dose',\n 'g-111_squared',\n 'g-140_max_group_cp_type',\n 'g-295_max_group_cp_type',\n 'g-106_min_group_cp_type',\n 'g-596_mean_group_cp_type',\n 'g-376_min_group_cp_type',\n 'g-727_min_group_cp_type',\n 'g-640_max_group_cp_type',\n 'g-428_mean_group_cp_type',\n 'g-592_min_group_cp_type',\n 'g-422_max_group_cp_type',\n 'g-603_max_group_cp_type',\n 'g-389_min_group_cp_type',\n 'g-313_min_group_cp_type',\n 'g-154_mean_group_cp_type',\n 'g-407_min_group_cp_type',\n 'g-556_min_group_cp_type',\n 'g-588_max_group_cp_type',\n 'g-159_mean_group_cp_type',\n 'g-745_squared',\n 'g-197_max_group_cp_type',\n 'g-4_mean_group_cp_time',\n 'g-751_mean_group_cp_time',\n 'g-92_mean_group_cp_dose',\n 'g-256_mean_group_cp_time',\n 'g-537_mean_group_cp_dose',\n 'g-129_mean_group_cp_time',\n 'g-464_squared',\n 'g-136_mean_group_cp_dose',\n 'g-357_squared',\n 'g-232_min_group_cp_type',\n 'g-748_max_group_cp_type',\n 'g-382_min_group_cp_type',\n 'g-572_min_group_cp_type',\n 'g-337_max_group_cp_type',\n 'g-344_min_group_cp_type',\n 'g-4_mean_group_cp_dose',\n 'g-462_max_group_cp_type',\n 'g-239_max_group_cp_type',\n 'g-602_min_group_cp_type',\n 'g-129_mean_group_cp_type',\n 'g-293_min_group_cp_type',\n 'g-2_min_group_cp_type',\n 'g-408_mean_group_cp_dose',\n 'g_skew',\n 'g-19_mean_group_cp_dose',\n 'g-128_skew_group_cp_time',\n 'g-382_mean_group_cp_time',\n 'g-87_min_group_cp_type',\n 'g-35_min_group_cp_type',\n 'g-341_mean_group_cp_dose',\n 'g-532_mean_group_cp_dose',\n 'g-402_squared',\n 'g-421_mean_group_cp_type',\n 'g-558_mean_group_cp_type',\n 'g-140_squared',\n 'g-285_min_group_cp_type',\n 'g-245_squared',\n 'g-321_max_group_cp_type',\n 'g-308_squared',\n 'c-22',\n 'g-388_min_group_cp_type',\n 'g-692_max_group_cp_type',\n 'g-737_min_group_cp_type',\n 'g-673_mean_group_cp_time',\n 'g-380_min_group_cp_type',\n 'g-327_squared',\n 'g-746_max_group_cp_type',\n 'g-183_mean_group_cp_time',\n 'g-311_squared',\n 'g-529_squared',\n 'g-226_min_group_cp_type',\n 'g-479_max_group_cp_type',\n 'g-354_min_group_cp_type',\n 'g-85_max_group_cp_time',\n 'g-125_max_group_cp_dose',\n 'g-504_squared',\n 'g-399_max_group_cp_type',\n 'g-30_squared',\n 'g-553_squared',\n 'g-43_mean_group_cp_dose',\n 'g-14_min_group_cp_type',\n 'g-607_squared',\n 'g-264_squared',\n 'g-520_min_group_cp_type',\n 'g-770_squared',\n 'g-426_mean_group_cp_time',\n 'g-484_squared',\n 'g-337_squared',\n 'g-329_max_group_cp_type',\n 'g-645_squared',\n 'g-80_squared',\n 'g-68_squared',\n 'g-766_squared',\n 'g-426_squared',\n 'g-99_min_group_cp_type',\n 'g-188_mean_group_cp_time',\n 'g-665_min_group_cp_type',\n 'g-599_mean_group_cp_dose',\n 'g-122_mean_group_cp_time',\n 'g-6_mean_group_cp_dose',\n 'g_mean',\n 'g-704_min_group_cp_type',\n 'g-580_mean_group_cp_type',\n 'g-36_squared',\n 'g-362_min_group_cp_type']\nlen(imp_features)","5b375841":"X_train = train_features[imp_features][:]\nX_test = test_features[imp_features][:]\nprint(X_train.shape, X_test.shape)","2a499200":"nums = X_train.select_dtypes(include='number').columns.tolist()\nlen(nums)","0cf6161e":"cats = X_train.select_dtypes(include='object').columns.tolist()\ncats","00fe00ea":"X_train[cats[0]] = X_train[cats[0]].map({'D1':0,'D2':1}).values\nX_train.shape","66554245":"X_test[cats[0]] = X_test[cats[0]].map({'D1':0,'D2':1}).values\nX_test.shape","6080640b":"labels = d.columns.to_list()[1:]\nlen(labels)","76ea2b27":"y_train = d[labels][:]\ny_train.shape","56ea241b":"######## Import some multi-output models #\nfrom sklearn.svm import LinearSVR, LinearSVC\nfrom sklearn.multioutput import MultiOutputRegressor, MultiOutputClassifier\nfrom sklearn.multioutput import RegressorChain, ClassifierChain\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom catboost import CatBoostClassifier, CatBoostRegressor\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LogisticRegression\nimport scipy as sp\nfrom scipy.stats import uniform\nmax_estims = 500\nimport time\nstart_time = time.time()\nfrom sklearn.neighbors import KNeighborsRegressor\nmax_neighbors = 100\nmodelchain4grid = XGBClassifier(n_estimators=200, random_state=1)\nwrapper4grid = OneVsRestClassifier(estimator=modelchain4grid)","23863653":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\ngrid_result = wrapper4grid.fit(X_train, y_train)\nprint('Time taken in secs = %0.0f' %(time.time()-start_time))","693550e7":"predictions = grid_result.predict(X_test)\npredictions.shape","22ce3abc":"subm = pd.DataFrame(predictions,columns=labels, index=test_features.index[:])\nsubm['sig_id'] = test_features['sig_id'].values[:]\nsubm = subm[['sig_id']+labels]\nprint(subm.shape)\nsubm.head()","c91b8411":"subm.to_csv('submission.csv', index=False)","3ae47608":"# Cell Viability Features: Treated vs. Control Comparison (Training Set)\n\nWe are going to run Sweetviz-based comparison of c-feature stats and interactions in Treated vs. Control sample subsets within the scored Training set provided as a data input.","6770ff48":"Let's do the initial processing steps as follows\n- Reading data into memory \n- Slicing the data into separate dataframes by treated vs. controlled observations\n- Separating features from the training set by c- and g-groups (cell viability and genes expression-related features, respectively) ","06f3a414":"# Reading Data\n\nPackage import, Helper functions and data reading","f894a08c":"# Use the above features in MultiOutputClassifier\n"}}