{"cell_type":{"1b59f0d0":"code","db4726db":"code","199746df":"code","876381e6":"code","a4287549":"code","5162ff7f":"code","38025a6b":"code","5832c7f1":"code","c6c30fa9":"code","230ba5fc":"code","0524c345":"code","1b67f9c8":"code","5fb5bfc1":"code","76a90881":"code","8962dee6":"code","8bf652eb":"code","a0dc05bb":"markdown","a1e64217":"markdown","ca959047":"markdown","ea47f0a8":"markdown"},"source":{"1b59f0d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","db4726db":"import matplotlib.pyplot as plt                        #This is used for the plot the graph\n%matplotlib inline\nimport seaborn as sns                                  #Used for plot interactive graph.\nfrom sklearn.linear_model import LogisticRegression    #To apply the logistic Regression\nfrom sklearn.model_selection import train_test_split   #to split the data into two parts Train and Test\nfrom sklearn.ensemble import RandomForestClassifier    #For random forest classifier\nfrom sklearn.svm import SVC\nfrom sklearn import metrics\n","199746df":"data=pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')  #data is imported and having 33 Columns\nprint(data.head(5))    # head is used to print top 5 rows by default.","876381e6":"data.info()  # to see the data type we have use data.info()","a4287549":"data.info()","5162ff7f":"#Now we drop the coloumn name Unnamed\ndata.drop(\"Unnamed: 32\",axis=1,inplace=True)","38025a6b":"# we also don't want Id colmn for analysis so we drop it.\ndata.drop(\"id\",axis=1,inplace=True)","5832c7f1":"data.columns","c6c30fa9":"data.describe()   #this will describe all statical function of our data","230ba5fc":"features_mean= list(data.columns[1:11])\nfeatures_se= list(data.columns[11:20])\nfeatures_worst=list(data.columns[21:31])\nprint(features_mean)\nprint(\"-----------------------------------\")\nprint(features_se)\nprint(\"------------------------------------\")\nprint(features_worst)","0524c345":"sns.countplot(data['diagnosis'],label=\"Count\")\n\n#graph is showing there is more number of bengin stage of cancer than malignant.","1b67f9c8":"prediction_var = ['texture_mean','perimeter_mean','smoothness_mean','compactness_mean','symmetry_mean']","5fb5bfc1":"train_df, test_df = train_test_split(data, test_size = 0.3)# in this our main data is splitted into train and test\n# we can check their dimension\nprint(train_df.shape)\nprint(test_df.shape)","76a90881":"X = train_df[prediction_var]                               # taking the data input \ny = train_df.diagnosis                                       # This is output of our data\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=123)","8962dee6":"rf=RandomForestClassifier(n_estimators=100)              # A simple random forest model\nrf.fit(X_train,y_train)\nrf_prediction=rf.predict(X_test)\n\nmetrics.accuracy_score(rf_prediction,y_test)","8bf652eb":"svc = SVC()\nsvc.fit(X_train,y_train)\nsvc_prediction=svc.predict(X_test)\n\nmetrics.accuracy_score(svc_prediction,y_test)","a0dc05bb":"We can see here Unnamed feature have 0 non-null objects it means all values are\nnull in this column so we can remove this column from our analysis.","a1e64217":"**Training a dataset using Random forest Classifier**","ca959047":"Here data is divided in to three parts first is Mean,second Standard Error and third is worst and each parametre contain 10 Paramete(rradius, texture,area, perimeter, smoothness,compactness,concavity,concave points,symmetry and fractal dimension),now we will divide the features according to their category.","ea47f0a8":"Importing  Libraries"}}