{"cell_type":{"86f367f9":"code","1a306b4a":"code","6a89517b":"code","741a0454":"code","431564b4":"code","fa1c1a82":"code","2c639f34":"code","a46877a3":"code","b33c866a":"code","2927b233":"code","2b3c836b":"code","51fcfa1b":"code","b408c813":"code","0c9317bc":"code","871d876d":"code","1c2efb24":"code","f5bdae43":"code","49ef9ce0":"code","f21b6676":"code","daf08289":"code","7ff3338a":"code","4b800df3":"code","4aae4f04":"code","aaa99675":"code","feb2164c":"code","0da4056a":"code","b21520d0":"code","7780f150":"code","f708851b":"code","8021fd32":"code","efe5d239":"code","daa5bf37":"code","c73a088e":"markdown","a78dc685":"markdown","9e8ba527":"markdown","bd2271da":"markdown","9a99764f":"markdown","b72ee4d1":"markdown","03192487":"markdown","ceee2982":"markdown","f0ce0f25":"markdown","a9acfb62":"markdown","f23a6fef":"markdown","0311f03d":"markdown","690e24e5":"markdown","ba1413a3":"markdown","82e01126":"markdown","f6b38d0b":"markdown","724ee44b":"markdown","12be9b73":"markdown","0864a3a4":"markdown","250f518a":"markdown","262c9bb7":"markdown","f758c157":"markdown","7bb52a83":"markdown"},"source":{"86f367f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1a306b4a":"import pandas_profiling as pp","6a89517b":"import matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nmatplotlib.rcParams['font.family'] = \"Arial\"","741a0454":"import collections\nimport itertools\n\nimport scipy.stats as stats\nfrom scipy.stats import norm\nfrom scipy.special import boxcox1p\n\nimport statsmodels\nimport statsmodels.api as sm","431564b4":"from sklearn.preprocessing import scale, StandardScaler, RobustScaler, OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, KFold, StratifiedKFold, RandomizedSearchCV","fa1c1a82":"from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nimport xgboost as xgb\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.svm import SVR","2c639f34":"df = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')","a46877a3":"pp.ProfileReport(df)","b33c866a":"df['reviews_per_month'].fillna(0, inplace = True)","2927b233":"df.drop(['id', 'name', 'last_review', 'host_name'], axis = 1, inplace = True)","2b3c836b":"fig, axes = plt.subplots(1, 3, figsize = (21,6))\nsns.distplot(df['price'], ax = axes[0])\nsns.distplot(np.log1p(df['price']), ax = axes[1])\naxes[1].set_xlabel('log(1 + price)')\nsm.qqplot(np.log1p(df['price']), stats.norm, fit=True, line='45', ax=axes[2]);","51fcfa1b":"df = df[np.log1p(df['price']) < 7]\ndf = df[np.log1p(df['price']) > 3]","b408c813":"fig, axes = plt.subplots(1, 3, figsize = (21,6))\nsns.distplot(df['price'], ax = axes[0])\nsns.distplot(np.log1p(df['price']), ax = axes[1])\naxes[1].set_xlabel('log(1 + price)')\nsm.qqplot(np.log1p(df['price']), stats.norm, fit=True, line='45', ax=axes[2]);","0c9317bc":"df['price'] = np.log1p(df['price'])","871d876d":"fig, axes = plt.subplots(1,2, figsize = (21,6))\nsns.distplot(df['minimum_nights'],kde = False, ax = axes[0])\naxes[0].set_yscale('log')\naxes[0].set_xlabel('minimum stay [nights]')\naxes[0].set_ylabel('count')\n\nsns.distplot(np.log1p(df['minimum_nights']), kde = False, ax = axes[1])\naxes[1].set_yscale('log')\naxes[1].set_xlabel('minimum stay [nights]')\naxes[1].set_ylabel('count')","1c2efb24":"df['minimum_nights'] = np.log1p(df['minimum_nights'])","f5bdae43":"fig , axes = plt.subplots(1,1, figsize = (21,6))\nsns.scatterplot(x = df['availability_365'], y = df['reviews_per_month'])","49ef9ce0":"df['reviews_per_month'] = df[df['reviews_per_month'] < 15]['reviews_per_month']","f21b6676":"df['reviews_per_month'].fillna(0, inplace = True)","daf08289":"cat_feat = df.select_dtypes(include = ['object'])\ncat_feat_one_hot = pd.get_dummies(cat_feat)","7ff3338a":"cat_feat_one_hot.head()","4b800df3":"num_feat = df.select_dtypes(exclude = ['object'])\ny = num_feat.price\nnum_feat = num_feat.drop(['price'], axis = 1)","4aae4f04":"y_df = pd.DataFrame(y)","aaa99675":"X = np.concatenate((num_feat, cat_feat_one_hot), axis = 1)\nX_df = pd.concat([num_feat, cat_feat_one_hot], axis = 1)","feb2164c":"data = pd.concat([X_df, y], axis = 1)\ndata.to_csv('NYC_airbnb_preprocessed.dat')","0da4056a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 50)","b21520d0":"scaler = RobustScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.fit_transform(X_test)","7780f150":"y_train.shape","f708851b":"X_train_df = pd.DataFrame(X_train)\nX_test_df = pd.DataFrame(X_test)\ny_train_df = pd.DataFrame(y_train)\ny_test_df = pd.DataFrame(y_test)","8021fd32":"best_rf = RandomForestRegressor(n_estimators = 80, min_samples_split = 10, max_features = 'auto', max_depth = None, bootstrap = True)\nbest_rf.fit(X_train, y_train)\ny_pred = best_rf.predict(X_test)\nmae = mean_absolute_error(y_test, best_rf.predict(X_test))\nmape = 100*mae\nacc = 100 - mape\nprint(acc)","efe5d239":"print(r2_score(y_test,y_pred))","daa5bf37":"print(np.sqrt(mean_squared_error(y_test,y_pred)))","c73a088e":"grid_search = GridSearchCV(estimator = rf, param_grid = param_grid, \n                          cv = 3, n_jobs = -1, verbose = 2)","a78dc685":"Trying to find the relationship between number_of_reviews and  availability_365.","9e8ba527":"best_grid = grid_search.best_estimator_\nbest_grid.fit(X_train, y_train)\nmae = mean_absolute_error(y_test, best_grid.predict(X_test))\nmape = 100*mae\nacc = 100 - mape\nprint(acc)\n","bd2271da":"rf.fit(X_train, y_train)","9a99764f":"rf_random.best_params_","b72ee4d1":"rf = RandomForestRegressor()","03192487":"n_estimators = [int(x) for x in np.linspace(start = 2, stop = 100, num = 10)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\nmin_samples_split = [2, 5, 10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]","ceee2982":"rmse_rf=[]\nrf=RandomForestRegressor(n_estimators = 100, random_state=1,  min_samples_leaf=2)\nkf = KFold(5, shuffle = True, random_state=1)\nmse = cross_val_score(rf ,X_train, y_train, scoring = \"neg_mean_squared_error\", cv=kf) \nrmse = np.sqrt(np.absolute(mse))\navg_rmse = np.sum(rmse)\/len(rmse)\nrmse_rf.append(avg_rmse)\nprint(rmse_rf)","f0ce0f25":"{'n_estimators': 78,\n 'min_samples_split': 10,\n 'min_samples_leaf': 2,\n 'max_features': 'auto',\n 'max_depth': None,\n 'bootstrap': True}","a9acfb62":"mae = mean_absolute_error(y_test, base_model.predict(X_test))\nmape = 100*mae\nacc = 100 - mape\nprint(acc)    ","f23a6fef":"param_grid = {'n_estimators': [70, 80, 90, 100],\n              'max_features': [2, 3],\n               'min_samples_split': [9, 10, 11],\n               'min_samples_leaf': [2],\n               'bootstrap': ['True']}","0311f03d":"base_model = RandomForestRegressor(n_estimators = 10, random_state = 42)\nbase_model.fit(X_train, y_train)\n","690e24e5":"pprint(random_grid)","ba1413a3":"param_grid = {'n_estimators': 78,\n               'max_features': 'auto',\n               'max_depth': None,\n               'min_samples_split': 10,\n               'min_samples_leaf': 2,\n               'bootstrap': True}","82e01126":"As we can see the price is skewed,  so a log transformation and removing outlier should work for regrerssor algorithms","f6b38d0b":"mse = mean_squared_error(y_test, rf.predict(X_test))\nrmse = np.sqrt(np.absolute(mse))\nrmse_rf.append(rmse)\nprint(rmse_rf)","724ee44b":"from pprint import pprint\npprint(rf.get_params())","12be9b73":"grid_search.fit(X_train, y_train)","0864a3a4":"rf = RandomForestRegressor()\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)","250f518a":"rf_random.fit(X_train, y_train)","262c9bb7":"best_random = rf_random.best_estimator_\nbest_random.fit(X_train, y_train)\nmae = mean_absolute_error(y_test, best_random.predict(X_test))\nmape = 100*mae\nacc = 100 - mape\nprint(acc)    ","f758c157":"Upon testing various regression algoritm, RandomForest had the least rmse score on training and test set.\nSo we will optimize RandomForest now.... ","7bb52a83":"Highly skewed 'minimum_nights' should be fixed by taking log(1 + minimum_nights) "}}