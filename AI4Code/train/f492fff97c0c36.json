{"cell_type":{"a80cc216":"code","d8e06235":"code","c33703e9":"code","44ad14a7":"code","bddbf1c1":"code","9c862c47":"code","1605c548":"code","56d6c556":"code","04a3da1d":"markdown","50b2a854":"markdown","6eb91816":"markdown","317949a3":"markdown","aa88547d":"markdown","17123f47":"markdown","5d3cb9e5":"markdown","b074de0f":"markdown","8810e2ee":"markdown","3b9388e3":"markdown","169cecfc":"markdown","7de474b2":"markdown","ee19f2d5":"markdown","25cf72e2":"markdown","803cbeeb":"markdown","2d68fccf":"markdown","49171c4b":"markdown","9f030fac":"markdown","b0e8844d":"markdown","e0597bd6":"markdown","625517e4":"markdown","c2e0a0c5":"markdown","3d6bbcc7":"markdown","81331fc1":"markdown","47da8b00":"markdown"},"source":{"a80cc216":"import tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.preprocessing.image import ImageDataGenerator","d8e06235":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\nshear_range = 0.2,\nzoom_range = 0.2,\nhorizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntraining_set = train_datagen.flow_from_directory('data\/train',\ntarget_size = (64, 64),\nbatch_size = 32,\nclass_mode = 'categorical')\n\ntest_set = test_datagen.flow_from_directory('data\/public_test',\ntarget_size = (64, 64),\nbatch_size = 32,\nclass_mode = 'categorical')","c33703e9":"# Initialising the CNN\nclassifier = Sequential()\n# Step 1 - Convolution\nclassifier.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))\n# Step 2 - Pooling\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\n# Adding a second axpooling\nclassifier.add(Conv2D(32, (3, 3), activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\n# Adding a third convolutional layer\nclassifier.add(Conv2D(64, (3, 3), activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size= (2, 2)))","44ad14a7":"# Step 3 - Flattening\nclassifier.add(Flatten())\n\n# Step 4 - Full connection\nclassifier.add(Dense(units = 128, activation = 'relu'))\nclassifier.add(Dropout(0.5))\nclassifier.add(Dense(units = 8, activation = 'softmax'))\n# Compiling the CNN\nclassifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\n","bddbf1c1":"#Train model\nclassifier.fit_generator(training_set,\nsteps_per_epoch = 6589,\nepochs = 5,\nvalidation_data = test_set,\nvalidation_steps = 20)","9c862c47":"classifier.save('my_model.h5')","1605c548":"new_model = tf.keras.models.load_model('my_model.h5')\nnew_model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])","56d6c556":"dirs = os.listdir('data\/data_private')\nfile = open(\"solve.csv\", \"a\")\n\nfor files in dirs:\n    file_name = \"data\/data_private\/\" + files\n    img = cv2.imread(file_name)\n    img = cv2.resize(img,(64,64))\n    img = np.reshape(img,[1,64,64,3])\n    classes = new_model.predict_classes(img)\n    x = int(classes)\n    file.write(files)\n    file.write(\",\")\n    file.write(str(x))\n    file.write(\"\\n\")\n\nfile.close()","04a3da1d":"Flatten() d\u00f9ng \u0111\u1ec3 bi\u1ebfn d\u1eef li\u1ec7u t\u1eeb ma tr\u1eadn nhi\u1ec1u chi\u1ec1u v\u1ec1 1 vector 1 chi\u1ec1u ( theo c\u00e1ch hi\u1ec3u c\u1ee7a m\u00ecnh l\u00e0 nh\u01b0 v\u1eady )\n2 l\u1edbp Dense \u0111\u01b0\u1ee3c th\u00eam v\u00e0o \u0111\u1ec3 ho\u00e0n t\u1ea5t k\u1ebft n\u1ed1i trong m\u00f4 h\u00ecnh, Dropout(0.5) \u0111\u1ec3 gi\u00fap ng\u0103n ch\u1eb7n overfitting.\nH\u00e0m t\u1ed1i \u01b0u m\u00ecnh s\u1eed d\u1ee5ng \u1edf \u0111\u00e2y l\u00e0 adam optimizer v\u00e0 h\u00e0m m\u1ea5t m\u00e1t l\u00e0 categorical_crossentropy","50b2a854":"**4.2. Ph\u00e2n lo\u1ea1i v\u00e0 l\u01b0u**","6eb91816":"Sau khi load l\u1ea1i model \u0111\u00e3 l\u01b0u \u1edf tr\u01b0\u1edbc, c\u1ea7n ph\u1ea3i compile gi\u1ed1ng nh\u01b0 ch\u00fang ta l\u00e0m tr\u01b0\u1edbc khi l\u01b0u model \u0111\u1ec3 s\u1eed d\u1ee5ng n\u00f3.","317949a3":"**    3.1. \u0110\u1ecbnh ngh\u0129a**","aa88547d":"![](http:\/\/)","17123f47":"**    3.4. Hu\u1ea5n luy\u1ec7n**","5d3cb9e5":"C\u00e1c b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ecdc \u0111\u1ecbnh ngh\u0129a \u1edf \u0111\u00e2y :v\n[\u0110\u1ecbnh ngh\u0129a](https:\/\/en.wikipedia.org\/wiki\/Convolutional_neural_network) ","b074de0f":"**    3.5. L\u01b0u m\u00f4 h\u00ecnh**","8810e2ee":"**3.3. H\u00f2an thi\u1ec7n m\u00f4 h\u00ecnh**","3b9388e3":"\u1ea2nh c\u1ea7n ph\u00e2n lo\u1ea1i \u1edf file 'data\/data_privare'. Ch\u00fang ta s\u1ebd \u0111\u1ecdc file \u0111\u00f3, l\u1ea5y ra t\u1eebng \u1ea3nh v\u00e0 s\u1eed d\u1ee5ng h\u00e0m predict_classes() \u0111\u1ec3 ph\u00e2n lo\u1ea1i.\n\u1ea2nh v\u00e0 nh\u00e3n \u0111\u00e3 \u0111\u01b0\u1ee3c ph\u00e2n lo\u1ea1i s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u v\u00e0o file 'solve.csv' d\u01b0\u1edbi \u0111\u1ecbnh d\u1ea1ng\n<ImageID,Label>\nV\u1eady l\u00e0 ch\u00fang ta \u0111\u00e3 ho\u00e0n th\u00e0nh ^^","169cecfc":"**    2.1. Th\u00eam th\u01b0 vi\u1ec7n**","7de474b2":"**    3.2.Convolutional layer v\u00e0 maxpooling**","ee19f2d5":"**3. M\u00f4 h\u00ecnh CNN**","25cf72e2":"* **1. Gi\u1edbi thi\u1ec7u**\n* **2. Load d\u1eef li\u1ec7u**\n    * 2.1. Th\u01b0 vi\u1ec7n \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng\n    * 2.2. C\u00e1c t\u00ednh n\u0103ng s\u1eb5n c\u00f3\n    * 2.3. C\u00e0i \u0111\u1eb7t\n* **3. M\u00f4 h\u00ecnh CNN**\n    * 3.1. \u0110\u1ecbnh ngh\u0129a m\u00f4 h\u00ecnh\n    * 3.2. Convolutional layer v\u00e0 maxpooling\n    * 3.2. H\u00e0m t\u1ed1i \u01b0u v\u00e0 h\u00e0m m\u1ea5t m\u00e1t\n    * 3.3. Hu\u1ea5n luy\u1ec7n m\u00f4 h\u00ecnh\n    * 3.4. L\u01b0u m\u00f4 h\u00ecnh\n* **4. S\u1eed d\u1ee5ng m\u00f4 h\u00ecnh \u0111\u1ec3 nh\u1eadn d\u1ea1ng \u1ea3nh** \n    * 4.1. Load \u1ea3nh\n    * 4.2. Ph\u00e2n lo\u1ea1i v\u00e0 l\u01b0u k\u1ebft qu\u1ea3\n    ","803cbeeb":"M\u00ecnh t\u1ea1o ra 6 l\u1edbp ch\u00ednh, g\u1ed3m 3 l\u1edbp convolution v\u00e0 3 l\u1edbp maxpooling xen k\u1ebd \u0111\u1ec3 tr\u00edch ch\u1ecdn \u0111\u1eb7c tr\u01b0ng c\u1ee7a d\u1eef li\u1ec7u.","2d68fccf":"**    2.3. C\u00e0i \u0111\u1eb7t**","49171c4b":"**    2.2. C\u00e1c t\u00ednh n\u0103ng s\u1eb5n c\u00f3**","9f030fac":"\u1ede \u0111\u00e2y m\u00ecnh s\u1eed d\u1ee5ng ImageDataGenerator, th\u01b0 vi\u1ec7n n\u00e0y h\u1ed7 tr\u1ee3 r\u1ea5t t\u1ed1t vi\u1ec7c \u0111\u1ecdc \u1ea3nh, c\u00e1c t\u00ednh n\u0103ng c\u01a1 b\u1ea3n g\u1ed3m c\u00f3 \u0111\u1ecbnh d\u1ea1ng size, xoay \u1ea3nh, l\u1eadt \u1ea3nh, ph\u00f3ng to, gi\u00fap ch\u00fang ta c\u00f3 nhi\u1ec1u d\u1eef li\u1ec7u h\u01a1n ph\u1ee5c v\u1ee5 cho vi\u1ec7c hu\u1ea5n luy\u1ec7n.\nChi ti\u1ebft c\u00e1c options c\u00e1c b\u1ea1n c\u00f3 th\u1ec3 xem \u1edf \u0111\u00e2y : [Here](http:\/\/keras.io\/preprocessing\/image\/)","b0e8844d":"**2. Load d\u1eef li\u1ec7u**","e0597bd6":"**    4.1. Load model**","625517e4":"**1. Gi\u1edbi thi\u1ec7u**\n\nB\u00e0i to\u00e1n \u0111\u1eb7t ra l\u00e0 ph\u00e2n lo\u1ea1i bi\u1ebfn b\u00e1o giao th\u00f4ng th\u00e0nh 8 nh\u00f3m cho tr\u01b0\u1edbc. B\u1ed9 d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 hu\u1ea5n luy\u1ec7n l\u00e0 l\u00ed t\u01b0\u1edfng ( kh\u00f4ng c\u00f3 nhi\u1ec5u ).\nM\u00ecnh s\u1eed d\u1ee5ng m\u1ea1ng th\u1ea7n kinh 6 l\u1edbp \u0111\u1ec3 th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\u00e0y, v\u1edbi s\u1ef1 h\u1ed7 tr\u1ee3 t\u1eeb Keras.\n\n**Gi\u1ea3i ph\u00e1p c\u1ee7a m\u00ecnh \u0111\u1ea1t \u0111\u01b0\u1ee3c t\u1ec9 l\u1ec7 ch\u00ednh x\u00e1c l\u00e0 99% ( V\u00ec l\u00ed do m\u00ecnh ch\u1ea1y tr\u00ean CPU, n\u00ean s\u1ed1 l\u1ea7n hu\u1ea5n luy\u1ec7n l\u1eb7p l\u1ea1i ( epochs ) ch\u1ec9 \u0111\u1eb7t l\u00e0 5, n\u1ebfu b\u1ea1n mu\u1ed1n ch\u00ednh x\u00e1c ho\u00e0n to\u00e0n, h\u00e3y \u0111\u1ec3 n\u00f3 l\u00ean 25. )**","c2e0a0c5":"**Ph\u00e2n lo\u1ea1i \u1ea3nh s\u1eed d\u1ee5ng m\u1ea1ng n\u01a1-ron t\u00edch ch\u1eadp ( CNN ).**\n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/6\/63\/Typical_cnn.png\/395px-Typical_cnn.png)","3d6bbcc7":"m\u00f4 h\u00ecnh \u0111\u01b0\u1ee3c l\u01b0u v\u00e0o file my_model.h5","81331fc1":"\u1ede \u0111\u00e2y m\u00ecnh d\u00f9ng fit_generator ch\u1ee9 kh\u00f4ng ph\u1ea3i fit, v\u00ec nghe n\u00f3i n\u00f3 nhanh v\u00e0 t\u1ed1t h\u01a1n :v","47da8b00":"**4. Nh\u1eadn d\u1ea1ng \u1ea3nh**"}}