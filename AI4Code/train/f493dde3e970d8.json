{"cell_type":{"21d0b3d8":"code","d794c9ee":"code","bf91935a":"code","edc8d0e9":"code","c6e2744d":"code","5ba6b595":"code","4dbb32d8":"code","8be791a8":"code","f0893ce3":"code","8fa4d237":"code","de749573":"code","cf6be25a":"code","466e916e":"code","847d4503":"code","968196d1":"code","046ad3f4":"code","923b5baf":"code","7ac03b36":"code","536f5227":"code","7de5d5fd":"markdown","7f2e7bcf":"markdown","4818e661":"markdown","f67d87dd":"markdown","b1295e07":"markdown","72a71b07":"markdown","9cf66e44":"markdown"},"source":{"21d0b3d8":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","d794c9ee":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","bf91935a":"df = pd.read_csv('\/kaggle\/input\/2019_data.csv')","edc8d0e9":"df2=pd.read_csv('\/kaggle\/input\/PGA_Data_Historical.csv')","c6e2744d":"df2.head(2)","5ba6b595":"df.head(1)","4dbb32d8":" nunique=df.nunique()","8be791a8":"[df['Statistic'].unique()]","f0893ce3":"df.head(1)","8fa4d237":"    list(df.head(2))","de749573":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 500]] \n    # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df) # columns\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    print(\"starting for loop \")\n    for i in range(min(nCol, nGraphShown)):\n        print(\"nGraphShown  ----\", nGraphShown) \n        print(\"i    ---\", i)\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        \n        print(\"plt.subplot(nGraphRow, nGraphPerRow, i + 1)\")\n        columnDf = df.iloc[:, i]\n        print(\"columnDf = df.iloc[:, i]\")\n        print(columnDf.head(2))\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","cf6be25a":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","466e916e":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","847d4503":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# 2019_data.csv has 9438053 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/2019_data.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = '2019_data.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","968196d1":"df1.head(5)","046ad3f4":"plotPerColumnDistribution(df1, 10, 5)","923b5baf":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# PGA_Data_Historical.csv has 2740403 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/PGA_Data_Historical.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'PGA_Data_Historical.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","7ac03b36":"df2.head(5)","536f5227":"plotPerColumnDistribution(df2,5,2)","7de5d5fd":"Distribution graphs (histogram\/bar graph) of sampled columns:","7f2e7bcf":"Distribution graphs (histogram\/bar graph) of sampled columns:","4818e661":"### Let's check 1st file: \/kaggle\/input\/2019_data.csv","f67d87dd":"Now you're ready to read in the data and use the plotting functions to visualize the data.","b1295e07":"Let's take a quick look at what the data looks like:","72a71b07":"### Let's check 2nd file: \/kaggle\/input\/PGA_Data_Historical.csv","9cf66e44":"Let's take a quick look at what the data looks like:"}}