{"cell_type":{"2598e4c6":"code","0c8edbf6":"code","3341fb4d":"code","f70b247d":"code","b0c3a98a":"code","d6b8838a":"code","f5de7147":"code","f5b98cdc":"code","bc60227d":"code","1c3b9957":"code","41612dba":"code","949c1cd8":"code","563503fc":"code","3a93dd6e":"code","62aecbda":"markdown","98dc2c2a":"markdown","10a06dfb":"markdown","2ef8f7b6":"markdown","510e380e":"markdown","3de72fe8":"markdown","cdaec288":"markdown","5fa98f52":"markdown"},"source":{"2598e4c6":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nimport warnings\nimport time\nimport sys\nimport datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_squared_error\nimport gc\n%matplotlib inline\nwarnings.simplefilter(action='ignore', category=FutureWarning)\ngc.enable()","0c8edbf6":"train = pd.read_csv(\"..\/input\/elo-world\/train.csv\", index_col=0)","3341fb4d":"def get_feature_importances(data, shuffle, seed=None):\n    # Gather real features\n    train_features = [f for f in data if f not in ['target', 'card_id', 'first_active_month']]\n    categorical_feats = [c for c in train_features if 'feature_' in c]\n    # Go over fold and keep track of CV score (train and valid) and feature importances\n    \n    # Shuffle target if required\n    y = data['target'].copy()\n    if shuffle:\n        # Here you could as well use a binomial distribution\n        y = data['target'].copy().sample(frac=1.0)\n    \n    # Fit LightGBM in RF mode, yes it's quicker than sklearn RandomForest\n    dtrain = lgb.Dataset(data[train_features], y, free_raw_data=False, silent=True)\n    lgb_params = {\n        'num_leaves': 129,\n        'min_data_in_leaf': 148, \n        'objective':'regression',\n        'max_depth': 9,\n        'learning_rate': 0.005,\n        \"min_child_samples\": 24,\n        \"boosting\": \"gbdt\",\n        \"feature_fraction\": 0.7202,\n        \"bagging_freq\": 1,\n        \"bagging_fraction\": 0.8125 ,\n        \"bagging_seed\": 11,\n        \"metric\": 'rmse',\n        \"lambda_l1\": 0.3468,\n        \"random_state\": 133,\n        \"verbosity\": -1\n    }\n    \n    # Fit the model\n    clf = lgb.train(params=lgb_params,\n                    train_set=dtrain,\n                    num_boost_round=850,\n                   # categorical_feature=categorical_feats\n                   )\n\n    # Get feature importances\n    imp_df = pd.DataFrame()\n    imp_df[\"feature\"] = list(train_features)\n    imp_df[\"importance_gain\"] = clf.feature_importance(importance_type='gain')\n    imp_df[\"importance_split\"] = clf.feature_importance(importance_type='split')\n    imp_df['trn_score'] = mean_squared_error(clf.predict(data[train_features]), y)**0.5\n    \n    return imp_df","f70b247d":"# Seed the unexpected randomness of this world\nnp.random.seed(123)\n# Get the actual importance, i.e. without shuffling\nactual_imp_df = get_feature_importances(data=train, shuffle=False)","b0c3a98a":"actual_imp_df.sort_values('importance_gain', ascending=False)[:10]","d6b8838a":"null_imp_df = pd.DataFrame()\nnb_runs = 100\nimport time\nstart = time.time()\ndsp = ''\nfor i in range(nb_runs):\n    # Get current run importances\n    imp_df = get_feature_importances(data=train, shuffle=True)\n    imp_df['run'] = i + 1 \n    # Concat the latest importances with the old ones\n    null_imp_df = pd.concat([null_imp_df, imp_df], axis=0)\n    # Erase previous message\n    for l in range(len(dsp)):\n        print('\\b', end='', flush=True)\n    # Display current run and time used\n    spent = (time.time() - start) \/ 60\n    dsp = 'Done with %4d of %4d (Spent %5.1f min)' % (i + 1, nb_runs, spent)\n    print(dsp, end='', flush=True)","f5de7147":"def display_distributions(actual_imp_df_, null_imp_df_, feature_):\n    plt.figure(figsize=(13, 6))\n    gs = gridspec.GridSpec(1, 2)\n    # Plot Split importances\n    ax = plt.subplot(gs[0, 0])\n    a = ax.hist(null_imp_df_.loc[null_imp_df_['feature'] == feature_, 'importance_split'].values,\n                label='Null importances')\n    ax.vlines(x=actual_imp_df_.loc[actual_imp_df_['feature'] == feature_, 'importance_split'].mean(), \n               ymin=0, ymax=np.max(a[0]), color='r',linewidth=10, label='Real Target')\n    ax.legend()\n    ax.set_title('Split Importance of %s' % feature_.upper(), fontweight='bold')\n    plt.xlabel('Null Importance (split) Distribution for %s ' % feature_.upper())\n    # Plot Gain importances\n    ax = plt.subplot(gs[0, 1])\n    a = ax.hist(null_imp_df_.loc[null_imp_df_['feature'] == feature_, 'importance_gain'].values, label='Null importances')\n    ax.vlines(x=actual_imp_df_.loc[actual_imp_df_['feature'] == feature_, 'importance_gain'].mean(), \n               ymin=0, ymax=np.max(a[0]), color='r',linewidth=10, label='Real Target')\n    ax.legend()\n    ax.set_title('Gain Importance of %s' % feature_.upper(), fontweight='bold')\n    plt.xlabel('Null Importance (gain) Distribution for %s ' % feature_.upper())\n        ","f5b98cdc":"actual_imp_df.sort_values('importance_gain', ascending=False)[:10]","bc60227d":"display_distributions(actual_imp_df_=actual_imp_df, null_imp_df_=null_imp_df, feature_='new_installments_min')","1c3b9957":"display_distributions(actual_imp_df_=actual_imp_df, null_imp_df_=null_imp_df, feature_='new_month_lag_min')","41612dba":"display_distributions(actual_imp_df_=actual_imp_df, null_imp_df_=null_imp_df, feature_='auth_category_1_sum')","949c1cd8":"display_distributions(actual_imp_df_=actual_imp_df, null_imp_df_=null_imp_df, feature_='hist_month_diff_mean')","563503fc":"feature_scores = []\nmax_features = 300\nfor _f in actual_imp_df['feature'].unique():\n    f_null_imps_gain = null_imp_df.loc[null_imp_df['feature'] == _f, 'importance_gain'].values\n    f_act_imps_gain = actual_imp_df.loc[actual_imp_df['feature'] == _f, 'importance_gain'].mean()\n    gain_score = np.log(1e-10 + f_act_imps_gain \/ (1 + np.percentile(f_null_imps_gain, 75)))  \n    f_null_imps_split = null_imp_df.loc[null_imp_df['feature'] == _f, 'importance_split'].values\n    f_act_imps_split = actual_imp_df.loc[actual_imp_df['feature'] == _f, 'importance_split'].mean()\n    split_score = np.log(1e-10 + f_act_imps_split \/ (1 + np.percentile(f_null_imps_split, 75)))  \n    feature_scores.append((_f, split_score, gain_score))\n\nscores_df = pd.DataFrame(feature_scores, columns=['feature', 'split_score', 'gain_score'])\n\nplt.figure(figsize=(16, 25))\ngs = gridspec.GridSpec(1, 2)\n# Plot Split importances\nax = plt.subplot(gs[0, 0])\nsns.barplot(x='split_score', y='feature', data=scores_df.sort_values('split_score', ascending=False).iloc[0:max_features], ax=ax)\nax.set_title('Feature scores wrt split importances', fontweight='bold', fontsize=14)\n# Plot Gain importances\nax = plt.subplot(gs[0, 1])\nsns.barplot(x='gain_score', y='feature', data=scores_df.sort_values('gain_score', ascending=False).iloc[0:max_features], ax=ax)\nax.set_title('Feature scores wrt gain importances', fontweight='bold', fontsize=14)\nplt.tight_layout()","3a93dd6e":"null_imp_df.to_csv('null_importances_distribution_rf.csv')\nactual_imp_df.to_csv('actual_importances_ditribution_rf.csv')","62aecbda":"## 2. Build the benchmark for feature importance","98dc2c2a":"From the above plot, **as stated by Olivier**, the power of the exposed feature selection method is demonstrated. In particular it is well known that :\n - Any feature sufficient variance can be used and made sense of by tree models. You can always find splits that help scoring better\n - Correlated features have decaying importances once one of them is used by the model. The chosen feature will have strong importance and its correlated suite will have decaying importances\n \n The current method allows to :\n  - Drop high variance features if they are not really related to the target\n  - Remove the decaying factor on correlated features, showing their real importance (or unbiased importance)","10a06dfb":"## 4. Save the data","2ef8f7b6":"## 4. Score features\n\nThere are several ways to score features : \n - Compute the number of samples in the actual importances that are away from the null importances recorded distribution.\n - Compute ratios like Actual \/ Null Max, Actual  \/ Null Mean,  Actual Mean \/ Null Max\n \nHere, **following Olivier,** we use the log actual feature importance divided by the 75 percentile of null distribution.","510e380e":"First, we load the data, which has been pre-procesed in [another kernel](https:\/\/www.kaggle.com\/fabiendaniel\/elo-world):","3de72fe8":"## 1. Create a scoring function","cdaec288":"## 3. Display distribution examples\n\nA few plots are better than any words","5fa98f52":"# Feature selecture using target permutation\n\nThis notebook is a straightforward adaptation of [Olivier's kernel](https:\/\/www.kaggle.com\/ogrellier\/feature-selection-with-null-importances), where Olivier proposes a methodology to select the most relevant features of the model. As outlined by [Peter Hurford](https:\/\/www.kaggle.com\/c\/elo-merchant-category-recommendation\/discussion\/73937), just keeping the right features may help you model to score better. To obtain exhaustive details on the method's implementation, you should refer to the original kernel. **By the way, if you feel like upvoting this kernel, please upvote first the original one !**\n\n### Notebook  Content\n1. [Creating a scoring function](#1)\n1. [Build the benchmark for feature importance](#2)\n1. [Display distribution examples](#3)\n1. [Score features](#4)\n1. [Save data](#5)"}}