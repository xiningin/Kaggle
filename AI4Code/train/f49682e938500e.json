{"cell_type":{"1bd7e1f2":"code","ea322c07":"code","56d34b56":"code","60de5f60":"code","508da94e":"code","4509fde5":"code","3909ef81":"code","438ed7a3":"code","63697c38":"code","add5b020":"code","a2e6ea2a":"code","21b871d3":"code","914c54b8":"markdown","d820cead":"markdown","33193f1f":"markdown","4a218771":"markdown","0daad7dd":"markdown","7c200292":"markdown","eb3406cc":"markdown"},"source":{"1bd7e1f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea322c07":"import numpy as np\nimport pandas as pd","56d34b56":"data = pd.DataFrame({\n    'country':['India', 'US','UK','India','Aus','US'],\n    'population': [130,45,20,130,45,23]\n})","60de5f60":"data\n","508da94e":"labeled_data= data","4509fde5":"labeled_data","3909ef81":"from sklearn.preprocessing import LabelEncoder\nlabelEncoder = LabelEncoder()\nlabeled_data['country'] = labelEncoder.fit_transform(data['country'])","438ed7a3":"labeled_data","63697c38":"onehotencoded_data = pd.get_dummies(data['country'],prefix='country')\nonehotencoded_data","add5b020":"from sklearn.preprocessing import OneHotEncoder\nonehotEncoder = OneHotEncoder()\nonehotEncoder.fit_transform(data).toarray()","a2e6ea2a":"from sklearn.preprocessing import LabelBinarizer\nLabelBinarizer().fit_transform(data.country)","21b871d3":"from sklearn.compose import ColumnTransformer\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')\nct.fit_transform(data)","914c54b8":"### Label Encoder","d820cead":"**3. using LabelBinarizer**","33193f1f":"### ColoumnTransformer","4a218771":"### One hot Encoding","0daad7dd":"**1. using get_dummies**","7c200292":"**The problem here is, since there are different numbers in the same column, the model will misunderstand the data to be in some kind of order, 0 < 1 < 2. But this isn\u2019t the case at all. To overcome this problem, we use One Hot Encoder.**","eb3406cc":"**2. using OneHotEncoder**"}}