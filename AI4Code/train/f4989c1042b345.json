{"cell_type":{"1810b08a":"code","4a8af9f1":"code","9283078f":"code","c367627c":"code","88f63d9e":"code","e2b96cb1":"code","aa43a4f2":"code","1d9eee90":"code","85d2ef34":"code","55a7320d":"code","fb2bfae6":"code","3cf1dd49":"code","3c70cba9":"code","ce576273":"code","31008f09":"code","35edd7bc":"code","e88e7bf3":"code","8bd4b186":"code","7a2f220b":"code","3ec3e14f":"code","52da01c7":"code","3f230275":"code","2e5aa7bd":"code","0390b621":"code","703ae436":"code","557b61d2":"code","3f3a99f4":"code","a8fa1534":"code","f965380e":"code","9acdd7a3":"code","c2abcab0":"code","f0483396":"code","b80d5240":"code","50d8b000":"code","ae09ea16":"code","b31337b5":"code","a0fec9fe":"code","46f03f39":"code","fa0d7434":"code","405d34d8":"code","5f5fef6b":"code","89b59a3b":"code","c6e789ba":"code","61beb9f5":"code","ca2e9995":"code","56aed824":"code","37b242ae":"code","18ae3680":"code","42ca9798":"code","3eecd37c":"code","e0693f9b":"markdown","bd132d53":"markdown","8473bbe0":"markdown","635de766":"markdown","90c3d6d3":"markdown","e5d5aac2":"markdown","6de4a024":"markdown","929edb62":"markdown","348e8507":"markdown","abfa5e21":"markdown","6719078f":"markdown","a27a1807":"markdown","9c0e38b2":"markdown","6378bc8b":"markdown","2ddc9301":"markdown","c628fd4d":"markdown","8beb729f":"markdown"},"source":{"1810b08a":"# for basic operations\nimport numpy as np\nimport pandas as pd\nimport pandas_profiling\n\n# for data visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# for advanced visualizations \nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\ninit_notebook_mode(connected = True)\n\n\n# for providing path\nimport os\nprint(os.listdir('..\/input\/'))\n\n# for model explanation\nimport shap","4a8af9f1":"# reading the data\ndata = pd.read_csv('..\/input\/heart.csv')\n\n# getting the shape\ndata.shape","9283078f":"data.head(10)\n#veri tan\u0131ma ama\u00e7l\u0131 ilk 10 de\u011ferin g\u00f6zlemlenmesi","c367627c":"data.describe().T","88f63d9e":"data.info()\n# 1 adet float  13 adet int dan olu\u015fan veri setine sahibiz ve bo\u015f g\u00f6zlemimiz bulunmamakta","e2b96cb1":"profile=pandas_profiling.ProfileReport(data)\nprofile\n#veri proflinin g\u00f6zlemlenmesi","aa43a4f2":"data.isnull().sum()\n#null de\u011fer var m\u0131 var ise adet baz\u0131nda belirlenmesi","1d9eee90":"p= data.hist(figsize=(15,15))\n#de\u011fi\u015fkenler i\u00e7in histogramlar","85d2ef34":"\ng= sns.catplot(x=\"target\" , y=\"age\", data=data,\n              height=6, kind=\"bar\", palette=\"muted\")\n#standart sapma d\u00fc\u015f\u00fck olmakla birlikte kalp rahats\u0131zl\u0131\u011f\u0131 olan g\u00f6zlemlerin ortalama ya\u015f de\u011ferleri daha d\u00fc\u015f\u00fckt\u00fcr.Genel ya\u015f ortalamas\u0131 60 ile 50 aras\u0131ndad\u0131r.","55a7320d":"g= sns.catplot(x=\"target\" , y=\"thalach\", data=data,\n              height=6, kind=\"bar\", palette=\"muted\")\n#Thalach de\u011ferlerinee bak\u0131lacak olursa kalp rahats\u0131zl\u0131\u011f\u0131 olanlar\u0131n g\u00f6rece de\u011ferlerinin y\u00fcksel oldu\u011fu g\u00f6r\u00fclmektedir.","fb2bfae6":"g= sns.catplot(x=\"target\" , y=\"chol\", data=data,\n              height=6, kind=\"bar\", palette=\"muted\")\n#Kolestrol de\u011ferleri her iki durum i\u00e7inde birbirine yak\u0131n \u00e7\u0131km\u0131\u015ft\u0131r.","3cf1dd49":"#cp de\u011ferleri anlaml\u0131 bir anla\u015fma sa\u011flamaktad\u0131r.\ng= sns.catplot(x=\"target\" , y=\"cp\", data=data,\n              height=6, kind=\"bar\", palette=\"muted\")","3c70cba9":"# exang de\u011ferlerine bak\u0131ld\u0131\u011f\u0131nda hedef de\u011fi\u015fken baz\u0131nda anlaml\u0131 bir ayr\u0131\u015ft\u0131rma sa\u011flatyabilece\u011fi g\u00f6z\u00fckmektedir.\ng=sns.catplot(x=\"target\", y=\"exang\", data=data,\n             height=6 , kind=\"bar\",  palette=\"muted\" )","ce576273":"# trestbps de\u011ferine bak\u0131ld\u0131\u011f\u0131nda de\u011ferlerin target de\u011fi\u015fkenken baz\u0131nda yak\u0131n de\u011ferler verdi\u011fi g\u00f6zlenlenmi\u015fttir.\ng = sns.catplot(x=\"target\" , y=\"trestbps\", data=data,\n               height=6 , kind=\"bar\" )","31008f09":"#u\u00e7 de\u011fer tespit ama\u00e7l\u0131 boxplot\nsz=(9,9)\nfig,ax = plt.subplots(figsize=sz)\nsns.boxplot(ax=ax, data=data, orient= \"h\")\n\n","35edd7bc":"#u\u00e7 de\u011fer bulundu\ndata2=data[\"chol\"].max()\ndata2","e88e7bf3":"#chol u\u00e7 de\u011ferine sahip index tespit edildi.\ndata1=data[data[\"chol\"]==564]\ndata1","8bd4b186":"#veri yedeklendi\ndata_yedek=data\ndata_yedek.info()","7a2f220b":"data.drop(index=85,inplace = True)\n#A\u015f\u0131r\u0131 de\u011fere sahip index \u00e7\u0131kar\u0131ld\u0131","3ec3e14f":"data.info()","52da01c7":"p=sns.pairplot(data, hue=\"target\")\n","3f230275":"#korelasyon tespiti ama\u00e7l\u0131 headmap kullan\u0131ld\u0131\n\nplt.figure(figsize=(12,10))\np=sns.heatmap(data.corr(),annot=True,cmap=\"RdYlGn\")\n#en y\u00fcksek korelasyon exang ,cp ve oldpeak ile en d\u00fc\u015f\u00fck korelasyon fb de\u011fi\u015fkeniyledir.","2e5aa7bd":"import warnings\nwarnings.filterwarnings('ignore')\nplt.style.use(\"fivethirtyeight\")\nplt.rcParams['figure.figsize'] = (15, 5)\nsns.distplot(data['age'], color = 'cyan')\nplt.title('Distribution of Age', fontsize = 20)\nplt.show()\n#normal da\u011f\u0131l\u0131ma yak\u0131n bir g\u00f6r\u00fcnt\u00fc sergilemektedir. Veri ya\u015f da\u011f\u0131l\u0131m\u0131 50-60 ya\u015f aras\u0131 yo\u011fumla\u015fmaktad\u0131r.","0390b621":"# checking the distribution of age amonng the patients\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = (15, 5)\nsns.distplot(data['chol'], color = 'cyan')\nplt.title('Distribution of chol', fontsize = 20)\nplt.show()\n#normal da\u011f\u0131lm\u0131\u015f bir veri olmas\u0131na kar\u015f\u0131n u\u00e7 de\u011fer bulundurmu\u015f olma ihtimali mevcuttur.","703ae436":"import warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = (15, 5)\nsns.distplot(data['thalach'], color = 'cyan')\nplt.title('Distribution of thalach', fontsize = 20)\nplt.show()\n#sa\u011fa e\u011fik da\u011f\u0131l\u0131m \u00f6zelli\u011fi g\u00f6stermi\u015ftir.","557b61d2":"import warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = (15, 5)\nsns.distplot(data['trestbps'], color = 'cyan')\nplt.title('Distribution of trestbps', fontsize = 20)\nplt.show()","3f3a99f4":"# plotting a donut chart for visualizing each of the recruitment channel's share\n\nsize = data['sex'].value_counts()\ncolors = ['lightblue', 'lightgreen']\nlabels = \"Male\", \"Female\"\nexplode = [0, 0.01]\n\nmy_circle = plt.Circle((0, 0), 0.7, color = 'white')\n\nplt.rcParams['figure.figsize'] = (9, 9)\nplt.pie(size, colors = colors, labels = labels, shadow = True, explode = explode, autopct = '%.2f%%')\nplt.title('Distribution of Gender', fontsize = 20)\np = plt.gcf()\np.gca().add_artist(my_circle)\nplt.legend()\nplt.show()\n#erkek bireylerin a\u011f\u0131rl\u0131kl\u0131 oldu\u011fu bir veri setidir. Erkekler %68,32 , Kad\u0131nlar %31,68 olu\u015fturmaktad\u0131r.","a8fa1534":"size = data['target'].value_counts()\ncolors = ['lightblue', 'lightgreen']\nlabels = \"0\", \"1\"\nexplode = [0, 0.01]\n\nmy_circle = plt.Circle((0, 0), 0.7, color = 'white')\n\nplt.rcParams['figure.figsize'] = (9, 9)\nplt.pie(size, colors = colors, labels = labels, shadow = True, explode = explode, autopct = '%.2f%%')\nplt.title('Distribution of Hearth Disaster', fontsize = 20)\np = plt.gcf()\np.gca().add_artist(my_circle)\nplt.legend()\nplt.show()\n#verimizin %45,54 \u00fc kalp rahats\u0131zl\u0131\u011f\u0131 olan bireylerden olu\u015fmaktad\u0131r.","f965380e":"# tresbps vs target\n\nplt.rcParams['figure.figsize'] = (12, 9)\nsns.boxplot(data['target'], data['trestbps'], palette = 'viridis')\nplt.title('Relation of tresbps with target', fontsize = 20)\nplt.show()","9acdd7a3":"plt.rcParams['figure.figsize'] = (12, 9)\nsns.boxplot(data['target'], data['chol'], palette = 'viridis')\nplt.title('Relation of chol with target', fontsize = 20)\nplt.show()","c2abcab0":"trace = go.Scatter3d(\n    x = data['target'],\n    y = data['oldpeak'],\n    z = data['age'],\n    name = 'Marvel',\n    mode = 'markers',\n    marker = dict(\n         size = 10,\n         color = data['age']\n    )\n)\n\ndf = [trace]\n\nlayout = go.Layout(\n    title = 'Cholestrol vs Heart Rate vs Age',\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    ),\n    scene = dict(\n            xaxis = dict(title  = 'target'),\n            yaxis = dict(title  = 'oldpeak'),\n            zaxis = dict(title  = 'age')\n        )\n    \n)\nfig = go.Figure(data = df, layout=layout)\npy.iplot(fig)\n# 3 boyutlu olarak ya\u015f- oldpeak de\u011ferlerinin da\u011f\u0131l\u0131mlar\u0131","f0483396":"data.head()","b80d5240":"y= data.target.values\nx = data.drop([\"target\"], axis=1)\n\n","50d8b000":"y","ae09ea16":"#Train - Test ayr\u0131m\u0131\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(x,y,test_size=1\/3,random_state=44)\n","b31337b5":"#KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\nprediction = knn.predict(X_test)\nprint(\"{} nn  score : {}\".format(3,knn.score(X_test,y_test)))","a0fec9fe":"from sklearn.neighbors import KNeighborsClassifier\n\n\ntest_scores = []\ntrain_scores = []\n\nfor i in range(1,15):\n\n    knn = KNeighborsClassifier(i)\n    knn.fit(X_train,y_train)\n    \n    train_scores.append(knn.score(X_train,y_train))\n    test_scores.append(knn.score(X_test,y_test))","46f03f39":"## score that comes from testing on the same datapoints that were used for training\nmax_train_score = max(train_scores)\ntrain_scores_ind = [i for i, v in enumerate(train_scores) if v == max_train_score]\nprint('Max train score {} % and k = {}'.format(max_train_score*100,list(map(lambda x: x+1, train_scores_ind))))","fa0d7434":"## score that comes from testing on the same datapoints that were used for training\nmax_test_score = max(test_scores)\ntest_scores_ind = [i for i, v in enumerate(test_scores) if v == max_test_score]\nprint('Max test score {} % and k = {}'.format(max_test_score*100,list(map(lambda x: x+1, test_scores_ind))))","405d34d8":"plt.figure(figsize=(12,5))\np = sns.lineplot(range(1,15),train_scores,marker='*',label='Train Score')\np = sns.lineplot(range(1,15),test_scores,marker='o',label='Test Score')","5f5fef6b":"from sklearn.svm import SVC\n \nsvm = SVC(random_state = 1)\nsvm.fit(X_train,y_train)\n \n","89b59a3b":"\n print(\"print accuracy of svm algo: \",svm.score(X_test,y_test))","c6e789ba":" # Naive bayes \nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(X_train,y_train)\n \n # %% test\n print(\"print accuracy of naive bayes algo: \",nb.score(X_test,y_test))","61beb9f5":"#%%\nfrom sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(X_train,y_train)\n\nprint(\"score: \", dt.score(X_test,y_test))","ca2e9995":"#%%  random forest\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators = 100,random_state = 44)\nrf.fit(X_train,y_train)\nprint(\"random forest algo result: \",rf.score(X_test,y_test))\n","56aed824":"from sklearn.ensemble import RandomForestClassifier\n\n\ntest_scores_rf = []\ntrain_scores_rf = []\n\nfor i in range(70,120):\n\n    rf = RandomForestClassifier(i,random_state=44)\n    rf.fit(X_train,y_train)\n    \n    train_scores_rf.append(rf.score(X_train,y_train))\n    test_scores_rf.append(rf.score(X_test,y_test))","37b242ae":"test_scores_rf\n#maksimumskor 90","18ae3680":"plt.figure(figsize=(12,5))\n\np = sns.lineplot(range(70,120),test_scores_rf,marker='o',label='Test Score')","42ca9798":"#%%  random forest\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators = 90,random_state = 44)\nrf.fit(X_train,y_train)\nprint(\"random forest algo result: \",rf.score(X_test,y_test))\n","3eecd37c":"y_pred = nb.predict(X_test)\ny_true = y_test\n#%% confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true,y_pred)\n\n\n# %% cm visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()\n","e0693f9b":"\n<img src=\"http:\/\/idora.gazetevatan.com\/vatanmediafile\/Haber598x362\/2018\/12\/06\/kalp-sagliginizla-ilgili-bilmeniz-gereken-7-gercek-3879416.Jpeg\" width=\"700px\">","bd132d53":"age: The person's age in years\n\n\nsex: The person's sex (1 = male, 0 = female)\n\n\ncp: The chest pain experienced (Value 1: typical angina, Value 2: atypical angina, Value 3: non-anginal pain, Value 4: asymptomatic)\n\n\ntrestbps: The person's resting blood pressure (mm Hg on admission to the hospital)\n\n\nchol: The person's cholesterol measurement in mg\/dl\n\n\nfbs: The person's fasting blood sugar (> 120 mg\/dl, 1 = true; 0 = false)\n\n\nrestecg: Resting electrocardiographic measurement (0 = normal, 1 = having ST-T wave abnormality, 2 = showing probable or definite left ventricular hypertrophy by Estes' criteria)\n\n\nthalach: The person's maximum heart rate achieved\n\n\nexang: Exercise induced angina (1 = yes; 0 = no)\n\n\noldpeak: ST depression induced by exercise relative to rest ('ST' relates to positions on the ECG plot. See more here)\n\n\nslope: the slope of the peak exercise ST segment (Value 1: upsloping, Value 2: flat, Value 3: downsloping)\n\n\nca: The number of major vessels (0-3)\n\n\nthal: A blood disorder called thalassemia (3 = normal; 6 = fixed defect; 7 = reversable defect)\n\n\ntarget: Heart disease (0 = no, 1 = yes)\n","8473bbe0":"### Veri Profili","635de766":"### KNN","90c3d6d3":"<a id=\"2\"><\/a><br>\n## Veri G\u00f6rselle\u015ftirme","e5d5aac2":"## Kalp Rahats\u0131zl\u0131\u011f\u0131 Analizi","6de4a024":"### SVM","929edb62":"<a id=\"1\"><\/a><br>\n# Veri Y\u00fckleme ve Tan\u0131ma ","348e8507":"<a id=\"4\"><\/a><br>\n# Modelleme","abfa5e21":"<a id=\"1\"><\/a><br>\n# Veri Y\u00fckleme ve Tan\u0131ma ","6719078f":"<a id=\"3\"><\/a><br>\n# Veri Haz\u0131rlama ve Train\/Test ","a27a1807":"#### Kalp rahats\u0131zl\u0131\u011f\u0131 olan 49 g\u00f6zlemden 43'\u00fc do\u011fru tahmin edilirkem 6 tanesi yanl\u0131\u015f s\u0131n\u0131fland\u0131r\u0131lm\u0131\u015ft\u0131r.\n#### Kalp rahats\u0131zl\u0131\u011f\u0131 olmayan 53 g\u00f6zlemden 47'si do\u011fru tahmin edilirkem 5 tanesi yanl\u0131\u015f s\u0131n\u0131fland\u0131r\u0131lm\u0131\u015ft\u0131r.","9c0e38b2":"### Random Forest","6378bc8b":"### Naive Bayes","2ddc9301":"## \u00c7al\u0131\u015fma Metodolijisi\n1.  [Veri Y\u00fckleme ve Veri Tan\u0131ma](#1)\n1.  [Veri G\u00f6rselle\u015ftirme ](#2)\n1.  [Veri Haz\u0131rlama ve Train\/Test ](#3)\n1.  [Modelleme - KNN ](#4)\n","c628fd4d":"#### SVM Accuracy :  0.5148514851485149\n#### Decission Tree Accuracy : 0.6534653465346535\n#### Random Forest Accuracy:  0.8712871287128713\n#### Naive Bays Accuracy : 0.8910891089108911\n#### KNN Accuracy : 0.7326732673267327\n\n#### En iyi test score veren Naive Bays kabul edilmi\u015ftir.\n\n\n\n\n","8beb729f":"### Decission Tree"}}