{"cell_type":{"f4514b98":"code","2c49791b":"code","7247b2a1":"code","99f2ec7d":"code","c13f95e3":"code","9be42923":"code","aabddbaa":"code","3171f483":"code","7cfc8858":"code","0fb90b9b":"code","4ba55fa5":"code","9be20deb":"code","7eb3e216":"code","5deb3633":"code","3223b466":"code","1c2ec10a":"code","fbb4656c":"code","dc9c034b":"code","7088bff9":"code","8c06f99c":"code","a2fa0a39":"code","368b0db3":"code","1a5d4b25":"markdown","a8a932c2":"markdown","cf78532f":"markdown","37707afc":"markdown","61ffee29":"markdown","3f063d4c":"markdown","e058ee22":"markdown","9f52917d":"markdown","42134c73":"markdown","8371f1b3":"markdown","cdaef24b":"markdown","7f0fb7bc":"markdown","9611be77":"markdown","63703ffa":"markdown","30399f45":"markdown"},"source":{"f4514b98":"import itertools\nimport numpy as np\nimport pandas as pd\nfrom math import sqrt\nfrom pylab import rcParams\nimport pandas.testing as tm\nimport statsmodels.api as sm\nfrom matplotlib import pyplot\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport warnings\nwarnings.filterwarnings(\"ignore\")","2c49791b":"train = pd.read_csv('..\/input\/daily-climate-time-series-data\/DailyDelhiClimateTrain.csv', header=0, index_col=0, \n                    parse_dates=True, squeeze=True)\ntest = pd.read_csv('..\/input\/daily-climate-time-series-data\/DailyDelhiClimateTest.csv', header=0, index_col=0, \n                   parse_dates=True, squeeze=True)","7247b2a1":"train","99f2ec7d":"train.loc[['2016-02-29']]","c13f95e3":"train = train[~((train.index.month == 2) & (train.index.day == 29))]\ntrain = train[~((train.index.year == 2017))]\ntrain","9be42923":"train['meantemp'].describe()","aabddbaa":"trainT = train['meantemp']\ntestT = test['meantemp']","3171f483":"print('Temperatura m\u00e9dia m\u00ednima: ',trainT.loc[trainT == trainT.min()])\nprint('Temperatura m\u00e9dia m\u00e1xima: ',trainT.loc[trainT == trainT.max()])","7cfc8858":"grupos = trainT.groupby(pd.Grouper(freq='A'))\nanos_temperature = pd.DataFrame() \nfor nome, grupo in grupos:\n    anos_temperature[nome.year] = grupo.values\nanos_temperature","0fb90b9b":"anos_temperature.plot(figsize=(10,5)\n          ,subplots=True\n          ,title='Temperatura m\u00e9dia por anos')","4ba55fa5":"fig, axes = plt.subplots(1,2,figsize=(30,30))\ntrainT.hist(ax=axes[0])\nanos_temperature.boxplot(ax=axes[1])\n\nplt.show()","9be20deb":"rcParams['figure.figsize'] = 11, 9\ndecomposed_temperature_volume = sm.tsa.seasonal_decompose(trainT,period=360)\nfigure = decomposed_temperature_volume.plot()\nplt.show()","7eb3e216":"plot_acf(trainT,lags=25,title='Temperatura M\u00e9dia')\nplt.show()","5deb3633":"plot_pacf(trainT,lags=25,title='Temperatura M\u00e9dia')\nplt.show()","3223b466":"history = trainT.shift(1)\npredictions = list()\n\nfor i in range(len(testT)):\n    \n    valor_predito = history[i+1]\n    predictions.append(valor_predito)\n  \n    valor_real = testT[i]\n  \n    print('Valor Predito=%.3f, Valor Esperado=%3.f' % (valor_predito, valor_real))","1c2ec10a":"rmse = sqrt(mean_squared_error(testT, predictions))\nprint('RMSE: %.3f' % rmse)","fbb4656c":"pyplot.plot(testT.values)\npyplot.plot(predictions, color='red')\npyplot.show()","dc9c034b":"p = d = q = range(0, 2)\n\npdq = list(itertools.product(p, d, q))\n\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\n\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","7088bff9":"for param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(resultT.meantemp_real,\n                                            order=param,\n                                            seasonal_order=param_seasonal,\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n\n            resultsAIC = mod.fit()\n\n            print('SARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, resultsAIC.aic))\n        except:\n            continue","8c06f99c":"history = [x for x in trainT]\npredictions = list()\n\nfor t in range(len(testT)):\n    meses_no_ano = 12\n\n    model = sm.tsa.statespace.SARIMAX(history, order=(1,1,1), \n                                    seasonal_order=(0,0,1, meses_no_ano))\n    model_fit = model.fit(trend='nc', disp=0)\n\n    valor_predito = model_fit.forecast()[0]\n    predictions.append(valor_predito)\n         \n    valor_real = testT[t]\n    history.append(valor_real)\n\n    print(t,'- Valor predito=%.3f, Valor esperado=%3.f' % (valor_predito, valor_real))","a2fa0a39":"rmse = sqrt(mean_squared_error(testT, predictions))\nprint('RMSE: %.3f' % rmse)","368b0db3":"pyplot.plot(testT.values)\npyplot.plot(predictions, color='red')\npyplot.show()","1a5d4b25":"SARIMA(1,1,1)x(0, 0, 1, 12)12 - AIC:5450.103851047738","a8a932c2":"# Models","cf78532f":"# Mean Temperature","37707afc":"- Uma vez que a mudan\u00e7a de temperatura n\u00e3o \u00e9 significativa entre quaisquer 2 dias, \u00e9 razo\u00e1vel produzir um modelo mais b\u00e1sico no qual usa a temperatura atual como uma previs\u00e3o para o dia seguinte. Portanto, prever\u00edamos o tempo com base em uma suposi\u00e7\u00e3o: a temperatura do ar hoje depende da temperatura do ar ontem, a temperatura do ar ontem depende de anteontem e assim por diante.","61ffee29":"# Reading Files","3f063d4c":"- Observa\u00e7\u00e3o: em 25 de maio de 2013, Delhi testemunhou a data mais quente no per\u00edodo de 4 anos (2013\u20132016). A temperatura era de 38,7 graus Celsius. Em contraste, em 5 de janeiro de 2013, os cidad\u00e3os de Delhi viram a data mais fria, quando a temperatura caiu para 6,0 graus Celsius. J\u00e1 em 07 de maio de 2015, Delhi teve a menor umidade presenciada nesse per\u00edodo de 13,43, enquanto em 11 de julho de 2015 apresentou 98,0 de umidade.","e058ee22":"# Removing Leap Year Day","9f52917d":"## Observed, Trend, Seasonal and Resid","42134c73":"## Autocorrelation and Partial Autocorrelation","8371f1b3":"## Histogram and Boxplot","cdaef24b":"### SARIMA","7f0fb7bc":"### Grid Search","9611be77":"### Baseline","63703ffa":"## Mean Temperature","30399f45":"## Mean Temperature and Humidity per Years"}}