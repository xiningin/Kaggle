{"cell_type":{"69f6af4d":"code","762acf84":"code","e96ff791":"code","f4c1d555":"code","d536044a":"code","59ee8391":"code","3e477aef":"code","ae55d7be":"code","1b8198f1":"code","7b30290d":"code","45b045fe":"code","602b113d":"code","a1a050c4":"code","f40f550f":"code","723a9bcb":"code","b082ac1f":"code","02cce30b":"code","c1aa3a14":"code","9fdd7edb":"code","c501c9a1":"code","b520504a":"code","52306149":"code","ebc2048f":"code","3d735298":"code","51306d1f":"code","ee50c43f":"code","ef1d7b0b":"code","80442819":"code","329a2aa8":"code","7c5d828b":"code","3993e6e2":"code","24a993f0":"code","8ac4a7a4":"code","cc50c71a":"code","3c223636":"code","39d4dd8a":"code","8eb7cbd6":"code","f4ba00e5":"code","c80ab266":"code","0c11bda3":"code","2a05ef95":"code","1f1e9eb5":"markdown","ebb321a6":"markdown","06a7d904":"markdown","85bf126a":"markdown","79b69a75":"markdown","f3adaec2":"markdown","30265961":"markdown","2be84694":"markdown","07a43742":"markdown","255b1b4f":"markdown","ec930567":"markdown","3bebd7b7":"markdown","c3f58474":"markdown","c2a81006":"markdown","30b66b2e":"markdown","8c017a8a":"markdown","32ca2fe2":"markdown","b5dc7e78":"markdown","b1ec4044":"markdown","7042c6f8":"markdown","9d04b9e1":"markdown","464b89ae":"markdown","c1b98fe3":"markdown","20f2c0cf":"markdown","39afe6ac":"markdown","35a741ee":"markdown","cf183535":"markdown","89422fcd":"markdown","fc886203":"markdown","18ac6ca9":"markdown","928b05eb":"markdown","95a4081f":"markdown","99bad8c2":"markdown","4dc3dbf6":"markdown","c048181a":"markdown","795a7b80":"markdown","b59b3abc":"markdown","828d50e6":"markdown","5977a2e6":"markdown","7f82239c":"markdown","d6e781a5":"markdown","9cccbba8":"markdown","50afd5d7":"markdown","f58c3929":"markdown","c22f7a02":"markdown","66cbdd90":"markdown"},"source":{"69f6af4d":"import pandas as pd\n# df = pd.read_csv(\"\/home\/yuxuan\/kaggle\/heart_failure_clinical_records_dataset.csv\")\n# df = pd.read_csv(\"\/Users\/yuxuan\/Desktop\/kaggle\/heart_failure_clinical_records_dataset.csv\")\ndf = pd.read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")\nheart_data = df.copy()\nheart_data.head()","762acf84":"print(heart_data.shape)","e96ff791":"for col in heart_data.columns:\n    print(col, str(round(100* heart_data[col].isnull().sum() \/ len(heart_data), 2)) + '%')","f4c1d555":"%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nX = heart_data.iloc[:,0:11]\nX = StandardScaler().fit_transform(X)\ny = heart_data['DEATH_EVENT']\npca = PCA(n_components=2)\npca.fit(X)\nX_pca = pca.transform(X)\n\nplt.figure(figsize=(8,8))\nplt.scatter(X_pca[y==0,0],X_pca[y==0,1],label=\"Alive\",c=\"red\")\nplt.scatter(X_pca[y==1,0],X_pca[y==1,1],label=\"Death\",c=\"black\")\nplt.legend([\"Alive\",\"Death\"])\n","d536044a":"import seaborn as sn\nheart_data = heart_data.drop(['time'],axis=1)\nplt.figure(figsize=(12,12))\nsn.heatmap(heart_data.corr(),vmin=-1,cmap='coolwarm',annot=True)","59ee8391":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nX = heart_data.iloc[:,0:11]\nX = StandardScaler().fit_transform(X)\ny = heart_data['DEATH_EVENT']\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=2)\nprint(\"The number of training sample is {}\".format(X_train.shape[0]))\nprint(\"The number of testing sample is {}\".format(X_test.shape[0]))","3e477aef":"import pandas as pd\nfrom scipy.stats import chi2_contingency\nimport numpy as np\nheart_data = df.copy()\ncat_features = [\"anaemia\",\"diabetes\",\"high_blood_pressure\",\"sex\",\"smoking\",\"DEATH_EVENT\"]\nnum_features = pd.Series(heart_data.columns)\nnum_features = num_features[~num_features.isin(cat_features)]\nnum_features\n\nfor i in cat_features:\n    ct = pd.crosstab(columns=heart_data[i],index=heart_data[\"DEATH_EVENT\"])\n    stat, p, dof, expected = chi2_contingency(ct)\n    print('\\n')\n    print('-'*len('CROSSTAB BETWEEN {} & DEATH_EVENT'.format(i.upper())))\n    print(\"CROSSTAB BETWEEN {} & DEATH_EVENT\".format(i.upper()))\n    print('-'*len('CROSSTAB BETWEEN {} & DEATH_EVENT'.format(i.upper())))\n    print(ct)\n    print('\\n')\n    print(\"H0: THERE IS NO RELATIONSHIP BETWEEN DEATH_EVENT & {} \\nH1: THERE IS RELATIONSHIP BETWEEN DEATH_EVENT & {}\".format(i.upper(),i.upper()))\n    print(\"\\nP-VALUE: {}\".format(np.round(p,2)))\n    print(\"REJECT H0\" if p<0.05 else \"FAILED TO REJECT H0\")","ae55d7be":"feature_corr = heart_data.corr()\nfeature_corr[abs(feature_corr['DEATH_EVENT']) > 0.1]['DEATH_EVENT']\n","1b8198f1":"import numpy as np\ndef feature_plot(classifier, feature_names, top_features=5):\n    coef = classifier.coef_.ravel()\n    top_positive_coefficients = np.argsort(coef)[-top_features:]\n    top_negative_coefficients = np.argsort(coef)[:top_features]\n    middle_coefficient = np.argsort(coef)[top_features]\n    top_coefficients = np.hstack([top_negative_coefficients, middle_coefficient, top_positive_coefficients])\n    plt.figure(figsize=(18, 7))\n    colors = ['green' if c < 0 else 'blue' for c in coef[top_coefficients]]\n    plt.bar(np.arange(2 * top_features+1), coef[top_coefficients], color=colors)\n    feature_names = np.array(feature_names)\n    plt.xticks(np.arange(2 * top_features+1), feature_names[top_coefficients], rotation=45, ha='right')\n\n    plt.show()\n","7b30290d":"from sklearn.svm import LinearSVC\nheart_data = df.copy()\nX = heart_data.iloc[:, 0:11]\nX = StandardScaler().fit_transform(X)\ny = heart_data['DEATH_EVENT']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, shuffle=True, random_state=1)\n\n# print(heart_data.drop(['DEATH_EVENT', 'time'], axis=1).columns.values)\n\ntrainedsvm = LinearSVC().fit(X, y)\nfeature_plot(trainedsvm, heart_data.drop(['DEATH_EVENT', 'time'], axis=1).columns.values)\n","45b045fe":"from sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nheart_data = df.copy()\nX = heart_data.iloc[:, 0:11]\ny = heart_data['DEATH_EVENT']\noptions = ['serum_sodium','creatinine_phosphokinase']\n\nfor i in options:\n    selected_feature = ['serum_creatinine','age', 'ejection_fraction']\n    selected_feature.append(i)\n    X_processed = X[selected_feature]\n    X_processed = StandardScaler().fit_transform(X_processed)\n    X_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=0.2, shuffle=True, random_state=1)\n    sv_clf = SVC(kernel=\"linear\",random_state=1)\n    sv_clf.fit(X_train, y_train)\n    sv_clf_pred = sv_clf.predict(X_test)\n    sv_clf_acc = accuracy_score(y_test,sv_clf_pred)\n    sc_clf_acc_format = round(sv_clf_acc*100,2)\n#     accuracy_list.append(round(sv_clf_acc,2))\n    print(\"Accuracy of linear SVM model with feature {} is : {}%\".format(i, sc_clf_acc_format))","602b113d":"from sklearn.model_selection import learning_curve\ndef plot_learning_curve(estimator, title, X, y, axes=None, ylim=None, cv=None,\n                        n_jobs=None, train_sizes=np.linspace(.1, 1.0, 5)):\n    if axes is None:\n        _, axes = plt.subplots(1, 3, figsize=(20, 5))\n\n    axes[0].set_title(title)\n    if ylim is not None:\n        axes[0].set_ylim(*ylim)\n    axes[0].set_xlabel(\"Training examples\")\n    axes[0].set_ylabel(\"Score\")\n\n    train_sizes, train_scores, test_scores, fit_times, _ = \\\n        learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs,\n                       train_sizes=train_sizes,\n                       return_times=True)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    fit_times_mean = np.mean(fit_times, axis=1)\n    fit_times_std = np.std(fit_times, axis=1)\n\n    # Plot learning curve\n    axes[0].grid()\n    axes[0].fill_between(train_sizes, train_scores_mean - train_scores_std,\n                         train_scores_mean + train_scores_std, alpha=0.1,\n                         color=\"r\")\n    axes[0].fill_between(train_sizes, test_scores_mean - test_scores_std,\n                         test_scores_mean + test_scores_std, alpha=0.1,\n                         color=\"g\")\n    axes[0].plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n                 label=\"Training score\")\n    axes[0].plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n                 label=\"Cross-validation score\")\n    axes[0].legend(loc=\"best\")\n\n    # Plot n_samples vs fit_times\n    axes[1].grid()\n    axes[1].plot(train_sizes, fit_times_mean, 'o-')\n    axes[1].fill_between(train_sizes, fit_times_mean - fit_times_std,\n                         fit_times_mean + fit_times_std, alpha=0.1)\n    axes[1].set_xlabel(\"Training examples\")\n    axes[1].set_ylabel(\"fit_times\")\n    axes[1].set_title(\"Scalability of the model\")\n\n    # Plot fit_time vs score\n    axes[2].grid()\n    axes[2].plot(fit_times_mean, test_scores_mean, 'o-')\n    axes[2].fill_between(fit_times_mean, test_scores_mean - test_scores_std,\n                         test_scores_mean + test_scores_std, alpha=0.1)\n    axes[2].set_xlabel(\"fit_times\")\n    axes[2].set_ylabel(\"Score\")\n    axes[2].set_title(\"Performance of the model\")\n\n    return plt\n\n","a1a050c4":"fig, axes = plt.subplots(3, 2, figsize=(10, 15))\n\nheart_data = df.copy()\n\nX = heart_data.iloc[:, 0:11]\ny = heart_data['DEATH_EVENT']\n\nselected_feature = ['serum_creatinine','age', 'ejection_fraction','creatinine_phosphokinase']\nX_processed = X[selected_feature]\nX_processed = StandardScaler().fit_transform(X_processed)\n\n\ntitle = \"Learning Curves (SVM, linear kernel)\"\n# cv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)\n\nestimator = SVC(kernel=\"linear\",random_state=1)\nplot_learning_curve(estimator, title, X_processed, y, axes=axes[:, 0], ylim=(0.5, 1.01),\n                     n_jobs=10)\n\n\ntitle = r\"Learning Curves (SVM, RBF kernel)\"\n\n# cv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)\nestimator = SVC(kernel=\"rbf\",random_state=1)\nplot_learning_curve(estimator, title, X_processed, y, axes=axes[:, 1], ylim=(0.5, 1.01),\n                     n_jobs=10)\n\nplt.show()\n\n","f40f550f":"HEIGHT = 500\nWIDTH = 700\nNBINS = 50\nSCATTER_SIZE=700","723a9bcb":"## Define the histogram \nimport plotly.express as px\ndef plot_histogram(dataframe, column, color, bins, marginal,title, width=WIDTH, height=HEIGHT):\n    figure = px.histogram(\n        dataframe,\n        column,\n        color=color,\n        nbins=bins,\n        marginal= marginal,\n        title=title,\n        width=width,\n        height=height\n    )\n    figure.show()\n","b082ac1f":"plot_histogram(heart_data, 'serum_creatinine', 'DEATH_EVENT', NBINS, \"violin\",'Figure 1: Distribution of serum creatinine VS death event')","02cce30b":"plot_histogram(heart_data, 'ejection_fraction', 'DEATH_EVENT', NBINS, \"violin\",'Figure 2: Distribution of ejection fraction VS death event')","c1aa3a14":"plot_histogram(heart_data, 'creatinine_phosphokinase', 'DEATH_EVENT', NBINS, \"violin\",'Figure 3: Distribution of creatinine_phosphokinase VS death event')","9fdd7edb":"import plotly.graph_objs as go\nheart_data = df.copy()\nmale = heart_data[heart_data[\"sex\"]==1]\nfemale = heart_data[heart_data[\"sex\"]==0]\nmale_survival= male[male[\"DEATH_EVENT\"]==0]\nfemale_survival= female[female[\"DEATH_EVENT\"]==0]\n## assign the labels\nlabels = ['Male - Survived','Male - Not Survived', \"Female -  Survived\", \"Female - Not Survived\"]\n## value is set according to the labels\nvalues = [len(male[heart_data[\"DEATH_EVENT\"]==0]),len(male[heart_data[\"DEATH_EVENT\"]==1]),\n         len(female[heart_data[\"DEATH_EVENT\"]==0]),len(female[heart_data[\"DEATH_EVENT\"]==1])]\nfig = go.Figure(data=[go.Pie(labels=labels,values=values,hole=.3)])\nfig.update_layout(\n    title_text = \"Figure 4: Analysis on Survival - Gender factor\"\n)\nfig.show()","c501c9a1":"## Define the violin plot function method\ndef violin_boxplot(dataframe, x, y,color,points,hover_data, box, width=WIDTH, height=HEIGHT):\n    figure = px.violin(\n        dataframe,\n        x=x,\n        y=y,\n        color = color,\n        box = box,\n        hover_data=hover_data,\n        points=points,\n        width=width,\n        height=height\n    )\n    figure.update_layout(title_text=\"Figure 5: Analysis of both gender and age factors in survival rates\")\n    figure.show()","b520504a":"violin_boxplot(heart_data,x = \"sex\",y=\"age\",color=\"DEATH_EVENT\",points=\"all\",box=True,hover_data=heart_data.columns)","52306149":"from sklearn.decomposition import PCA\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score, mean_squared_error\nfrom sklearn.svm import LinearSVC","ebc2048f":"pca = PCA(n_components=2)\npca.fit(X_processed)\nX_pca = pca.transform(X_processed)\n\nplt.figure(figsize=(8,8))\nplt.scatter(X_pca[y==0,0],X_pca[y==0,1],label=\"Alive\",c=\"red\")\nplt.scatter(X_pca[y==1,0],X_pca[y==1,1],label=\"Death\",c=\"black\")\nplt.legend([\"Alive\",\"Death\"])","3d735298":"heart_data = df.copy()\n\nX = heart_data.iloc[:, 0:11]\ny = heart_data['DEATH_EVENT']\n\nselected_feature = ['serum_creatinine','age', 'ejection_fraction','creatinine_phosphokinase']\nX_processed = X[selected_feature]\nX_processed = StandardScaler().fit_transform(X_processed)\nX_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=0.2, shuffle=True, random_state=1)\n\n## linear svm\n# sv_clf = LinearSVC(loss='hinge',random_state=1, C=1.0, penalty = 'l2')\nsv_clf = SVC(kernel=\"linear\",random_state=1)\nsv_clf.fit(X_train, y_train)\nsv_clf_pred = sv_clf.predict(X_test)\nsv_clf_acc = accuracy_score(y_test,sv_clf_pred)\nsv_clf_mse = mean_squared_error(y_test,sv_clf_pred)\nprint(\"Accuracy of linear SVM model is :\",\"{:.2f}%\".format(100*sv_clf_acc))\nprint(\"Mean squared error of linear SVM model is :\",\"{:.2f}\".format(sv_clf_mse))\n\n## RBF kernel SVM\nsv_clf = SVC(kernel=\"rbf\",random_state=1, C=1.0, gamma=0.1)\nsv_clf.fit(X_train, y_train)\nsv_clf_pred = sv_clf.predict(X_test)\nsv_clf_acc = accuracy_score(y_test,sv_clf_pred)\nsv_clf_mse = mean_squared_error(y_test,sv_clf_pred)\nprint(\"Accuracy of RBF SVM model is :\",\"{:.2f}%\".format(100*sv_clf_acc))\nprint(\"Mean squared error of linear SVM model is :\",\"{:.2f}\".format(sv_clf_mse))\n","51306d1f":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler, RobustScaler\n\nheart_data = df.copy()\n\nX = heart_data.iloc[:, 0:11]\ny = heart_data['DEATH_EVENT']\n\nselected_feature = ['serum_creatinine','age', 'ejection_fraction','creatinine_phosphokinase']\nX_processed = X[selected_feature]\nX_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=0.2, shuffle=True, random_state=1)\n\n# MinMaxScalar\npipe1 = Pipeline([(\"scalar\",MinMaxScaler()),(\"svm\",SVC(random_state=1))])\npipe1.fit(X_train,y_train)\nprint(\"Test score for MinMaxScalar RBF kernel: {:.3f}\".format(pipe1.score(X_test,y_test)))\n\npipe1_linear = Pipeline([(\"scalar\",MinMaxScaler()),(\"svm\",SVC(kernel=\"linear\",random_state=1))])\npipe1_linear.fit(X_train,y_train)\nprint(\"Test score for MinMaxScalar linear kernel: {:.3f}\\n\".format(pipe1_linear.score(X_test,y_test)))\n\n\n# StandardScalar\n\npipe2 = Pipeline([(\"scalar\",StandardScaler()),(\"svm\",SVC(random_state=1))])\npipe2.fit(X_train,y_train)\nprint(\"Test score for StandardScalar in RBF kernel: {:.3f}\".format(pipe2.score(X_test,y_test)))\n\npipe2_linear = Pipeline([(\"scalar\",StandardScaler()),(\"svm\",SVC(kernel=\"linear\" ,random_state=1))])\npipe2_linear.fit(X_train,y_train)\nprint(\"Test score for StandardScalar in linear kernel: {:.3f}\\n\".format(pipe2_linear.score(X_test,y_test)))\n\n# RobustScalar\n\npipe3 = Pipeline([(\"scalar\",RobustScaler()),(\"svm\",SVC(random_state=1))])\npipe3.fit(X_train,y_train)\nprint(\"Test score for RobustScalar in RBF kernel: {:.3f}\".format(pipe3.score(X_test,y_test)))\n\npipe3_linear = Pipeline([(\"scalar\",RobustScaler()),(\"svm\",SVC(kernel = \"linear\",random_state=1))])\npipe3_linear.fit(X_train,y_train)\nprint(\"Test score for RobustScalar in linear kernel: {:.3f}\".format(pipe3_linear.score(X_test,y_test)))","ee50c43f":"heart_data = df.copy()\nX = heart_data.iloc[:, 0:11]\ny = heart_data['DEATH_EVENT']\n\nselected_feature = ['serum_creatinine','age', 'ejection_fraction','creatinine_phosphokinase']\nX_processed = X[selected_feature]\nX_processed = StandardScaler().fit_transform(X_processed)\n\nfrom sklearn.model_selection import cross_val_score\nsv_clf = SVC(kernel= 'linear',random_state=1)\nsv_clf_rbf = SVC(kernel='rbf',random_state=1)\nscores = cross_val_score(sv_clf, X_processed,y,cv=10)\nscores_rbf = cross_val_score(sv_clf_rbf, X_processed,y,cv=10)\n\nprint(\"Ten-fold cross validation scores of linear SVM:{:.3f} \".format(np.mean(scores)))\nprint(\"Ten-fold cross validation scores of RBF kernel SVM:{:.3f}\".format(np.mean(scores_rbf)))\n","ef1d7b0b":"from sklearn.model_selection import LeaveOneOut\nloo = LeaveOneOut()\nscores_loo = cross_val_score(sv_clf,X_processed,y,cv=loo)\nscores_loo_rbf = cross_val_score(sv_clf_rbf,X_processed,y,cv=loo)\nprint(\"Number of CV iterations: {}\".format(len(scores_loo)))\nprint(\"Leave one out method mean scores for linear SVM:{:.3f}\".format(scores_loo.mean()))\nprint(\"Leave one out method mean scores for RBF SVM:{:.3f}\".format(scores_loo_rbf.mean()))","80442819":"print(\"Ten-fold cross validation scores of linear SVM:{:.3f} \".format(np.mean(scores)))\nprint(\"Ten-fold cross validation scores of RBF kernel SVM:{:.3f}\".format(np.mean(scores_rbf)))\nprint(\"Leave one out method mean scores for linear SVM:{:.3f}\".format(scores_loo.mean()))\nprint(\"Leave one out method mean scores for RBF SVM:{:.3f}\".format(scores_loo_rbf.mean()))","329a2aa8":"from sklearn.model_selection import GridSearchCV\nparam_grid = [{'kernel': ['rbf'],\n               'C': [0.01,0.1,1,10,100],\n               'gamma':[0.01,0.1,1,10,100]},\n                {'kernel':['linear'],\n               'C': [0.01,0.1,1,10,100]\n                }]\n# print(param_grid)\nX_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=0.2, shuffle=True, random_state=1)\n\ngrid_search = GridSearchCV(SVC(random_state=1),param_grid,cv =10, n_jobs=-1)\ngrid_search.fit(X_train,y_train)\nprint(\"Best cross validation accuracy: {:.2f}\".format(grid_search.best_score_))\nprint(\"Test set score: {:.2f}\".format(grid_search.score(X_test,y_test)))\nprint(\"Best parameters: {}\".format(grid_search.best_params_))\n","7c5d828b":"results = pd.DataFrame(grid_search.cv_results_)\nresults_rbf = results.iloc[0:25,:]\nresults_linear = results.iloc[25:,:]\n# display(results_linear.T.head())\n# display(results_rbf.T.head())\n# display(results.T.head())\n# display(results.T)\n","3993e6e2":"plt.figure(figsize=(12,12))\nscores = np.array(results_rbf.mean_test_score).reshape(5,5)\n\nheatmap = sn.heatmap(data=scores,xticklabels=param_grid[0]['gamma'],\n           yticklabels=param_grid[0]['C'],\n           annot=True)\nplt.ylabel('C')\nplt.xlabel(\"gamma\")","24a993f0":"sv_clf_rbf = SVC(kernel='rbf',random_state=1,C=1, gamma = 0.1)\nscores_loo_rbf = cross_val_score(sv_clf_rbf,X_processed,y,cv=10)\n# print(\"Number of CV iterations: {}\".format(len(scores_loo)))\nprint(\"10-fold cross validation mean method scores for RBF SVM:{:.3f}\".format(scores_loo_rbf.mean()))","8ac4a7a4":"linear_score = np.array(results_linear.mean_test_score)\ndisplay(results_linear.T.head())\nprint(max(linear_score))","cc50c71a":"parameters = {'penalty':['l1', 'l2'], 'loss':['hinge', 'squared_hinge'],'C':[1, 10,100]}\ngrid_search = GridSearchCV(LinearSVC(random_state=1),parameters,cv =10, n_jobs=-1)\ngrid_search.fit(X_train,y_train)\nprint(\"Best cross validation accuracy: {:.2f}\".format(grid_search.best_score_))\nprint(\"Test set score: {:.2f}\".format(grid_search.score(X_test,y_test)))\nprint(\"Best parameters: {}\".format(grid_search.best_params_))","3c223636":"from sklearn.metrics import plot_confusion_matrix, confusion_matrix\nheart_data = df.copy()\n\nX = heart_data.iloc[:, 0:11]\ny = heart_data['DEATH_EVENT']\n\nselected_feature = ['serum_creatinine','age', 'ejection_fraction','creatinine_phosphokinase']\nX_processed = X[selected_feature]\nX_processed = StandardScaler().fit_transform(X_processed)\nX_train, X_test, y_train, y_test = train_test_split(X_processed,y,test_size=0.2,random_state=2)\nmodel = SVC(kernel='rbf',random_state=1,C=1, gamma = 0.1)\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ny_pred_train = model.predict(X_train)\n","39d4dd8a":"print(\"Training loss is: {}\".format(round(model.score(X_train,y_train),2)))\nprint(\"Testing loss is: {}\".format(round(model.score(X_test,y_test),2)))","8eb7cbd6":"train_mse = mean_squared_error(y_train,y_pred_train)\ntest_mse = mean_squared_error(y_test,y_pred)\nprint(\"The MSE value of training sample is: {}\".format(round(train_mse,2)))\nprint(\"The MSE value of testing sample is: {}\".format(round(test_mse,2)))","f4ba00e5":"# confusion = confusion_matrix(y_test,y_pred)\nplot_confusion_matrix(model,X_test,y_test)\nplt.title(\"SVC Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Alive\", \"Dead\"], fontsize=8)\nplt.yticks(range(2), [\"Alive\", \"Dead\"], fontsize=8)\nplt.show()","c80ab266":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred,target_names=[\"Heart Not Failed\", \"Heart Fail\"]))","0c11bda3":"from sklearn.metrics import confusion_matrix, plot_confusion_matrix, plot_roc_curve, plot_precision_recall_curve\nplot_roc_curve(model,X_test,y_test)","2a05ef95":"plot_precision_recall_curve(model,X_test,y_test)","1f1e9eb5":"- There is no significant difference between different preprocessing method in RBF kernels, especially in MinMaxScalar and StandardScalar.\n- Overall RBF kernel outperforms than linear kernel.\n- In this case, I would insist on using StandardScalar in following procedure.\n<br>\n<br>\n<br>\n\n\n\n### Compare the model performance by ten-fold cross validation and leave-one-out method in model evaluation\n<br>\n\nOwing to the fact that the dataset I used is a small one, only containing 299 samples in total. In order to minimize the bias or error leading by accident, I used ten-fold cross validation and leave-one-out method to return a more general evaluation (calculating the mean value)","ebb321a6":"The test score of linear svm (test set score:0.80) still could not compete with the rbf kernel (test set score: 0.87), therefore, I would still insist on the SVM with RBF kernel and hyperparameter C: 1, gamma 0.1 ","06a7d904":"### Print the size of the dataset","85bf126a":"### Hyperparameter tuning for linear SVM (penalty, loss, C) ","79b69a75":"**Summary: **\nThe results of either ten-fold cross validation and leave-one-out method results are quite similar, based on the consideration of time elapse, I would use ten-fold cross-validation for the following analysis","f3adaec2":"**Method 2: correlation analysis**\n- Use correlation coefficient > 0.1 with death event\n- This method is applicable for both categorical data and numerical data","30265961":"### Python library\n\n# Description: how you learned the predictor","2be84694":"### Hyperparameters tuning\n\n- Grid search for SVM algorithm with ten-fold cross validation method","07a43742":"### PR-curve\n\nAP = Average Precision, summarizes such a plot as the weighted mean of precisions achieved at each threshold, with the increase in recall from the previous threshold used as the weight:\n\n$$ AP =\\sum_{N}(R_n-R_{n-1})P_n$$\n\nwhere  and  are the precision and recall at the nth threshold. A pair  is referred to as an operating point.","255b1b4f":"### Return the head of dataset (a overview of inside components)","ec930567":"## Methods","3bebd7b7":"---\n### Principle components analysis\n\nReduce the dimensions and return the sample distribution","c3f58474":"---\n### Visualized the learning curve after feature selection","c2a81006":"## Problem formulation","30b66b2e":"### PCA to visualize the sample distribution","8c017a8a":"- First column is the combination of learning curves, model scability, model performance in a SVM model with linear kernel. First row is the learning curve of linear SVM model: the training score is very high at the beginning and decreases and the cross-validation score is very low at the beginning and increases. The training score and the cross-validation score intertwines at about 220 training samples, and their difference after that are not significant\n\n- Second column is the combination of learning curves, model scability, model performance in a SVM model with linear kernel. The learning curve plots indicate that accuracy for both training score and cross validation score tend to be stable after 130 samples, which is similar in linear SVM model. The fit time for RBF kernel SVM is higher than linear kernel because of the complexity in calculation\n\n- RBF kernel has a relative higher performance, but the difference is not significant\n\n- The figure above doesn't indicate either overfitting or underfitting problems\n\n","32ca2fe2":"The training loss in SVM with RBF kernel in hyperparameter C: 1, gamma 0.1 is 0.78, with testing loss equals 0.83\nThe MSE value for training and testing in SVM with RBF kernel is 0.22 and 0.17 accordingly\n","b5dc7e78":"### Machine learning algorithms with description\n\n#### SVM with linear kernel\n\n$$ K(x,y) = X^Ty=x\\cdot y$$\n\nLoss function: hinge loss \/ squared hinge loss\n\n$$ Agreement: z = y_i(w \\cdot x_i + \\alpha) $$\n\nHinge loss \n\n$$ \nL_h(z)= \\begin{cases}\n0 & \\text{if z$\\geq$1}\\\\\n1-z & \\text{z<1}\n\\end{cases} \n$$\n\nSquared hinge loss\n\n$$\nL_{hsqr}(z)= \\begin{cases}\n0 & \\text{if z$\\geq$1}\\\\\n(1-z)^2 & \\text{z<1}\n\\end{cases} \n$$\n\n\nOptimization objective formula for hinge loss:\n\n$$\nJ(w,\\alpha) = \\frac{1}{n}\\sum_{i=1}^nL_h(y_i(w\\cdot x_i + \\alpha))+\\frac{\\lambda}{2}(||w||)^2\n$$\n\nDescription: \n- Linear Kernel is used when the data is linearly separable dataset. \n- One of the goal is to minimize the previous objective formula for the hinge loss. $\\lambda$ in this case stands for the regularization hyperparameter.\n- The strength of the regularization is inversely proportional to $\\lambda$, it has to be strictly positive. The smaller regularization parameter means less tolerant to misclassification.\n- Require grid serach to return the suitable hyperparameter\n\n\n#### SVM with RBF kernel\n\n$$ K(x,y) = e^{-\\gamma||x-y||^2}, \\gamma >0 $$\n\nLoss function: hinge loss \/ squared hinge loss\n\n$$ Agreement: z = y_i(w \\cdot \\phi(x_i) + \\alpha) $$\n\nHinge loss \n\n$$ \nL_h(z)= \\begin{cases}\n0 & \\text{if z$\\geq$1}\\\\\n1-z & \\text{z<1}\n\\end{cases} \n$$\n\nSquared hinge loss\n\n$$\nL_{hsqr}(z)= \\begin{cases}\n0 & \\text{if z$\\geq$1}\\\\\n(1-z)^2 & \\text{z<1}\n\\end{cases} \n$$\n\n\nOptimization objective formula for hinge loss:\n\n$$\nJ(w,\\alpha) = \\frac{1}{n}\\sum_{i=1}^nL_h(y_i(w\\cdot \\phi(x_i) + \\alpha))+\\frac{\\lambda}{2}(||w||)^2\n$$\n\nDescription:\n\n- SVM with RBF kernel was utilized to solve the linearly inseparable probelms\n- kernel trick was used in RBF kernel SVM to increase the computational efficiency \n- $\\gamma$ parameter how far the influence of a single training example reaches\n- C parameter trades off correct classification of training examples against maximization of the decision function\u2019s margin\n\n#### Evaluation method\n\nMean squared error (MSE) \n\n$$\nMSE = \\frac{1}{n}\\sum_{i=1}^n(Y_i- \\hat{Y_i})^2 \n\n$$\n\nwhere $Y_i$ is the label and $\\hat{Y_i}$ is the predicted label by model\n","b1ec4044":"Figure 1 - Figure 5 is the visualization of each feature, there is no clear patterns or strong association between the death_event. Therefore, we need to further our research by conducting the model prediction process.\n","7042c6f8":"## Introduction\n\n### Background data\n\nCardiovascular diseases (CVDs) are the number 1 cause of death globally, taking an estimated 17.9 million lives each year, which accounts for 31% of all deaths worlwide.\nHeart failure is a common event caused by CVDs.\n\nMost cardiovascular diseases can be prevented by addressing behavioural risk factors such as tobacco use, unhealthy diet and obesity, physical inactivity and harmful use of alcohol using population-wide strategies.\n\nPeople with cardiovascular disease or who are at high cardiovascular risk (due to the presence of one or more risk factors such as hypertension, diabetes, hyperlipidaemia or already established disease) need early detection and management wherein a machine learning model can be of great help.\n\n### Project description (overview)\n\nThe input to our predictor is is a medical dataset which contains 12 features that can be used to predict mortality by heart failure.\n1. Data exploration\n    - Principle Components Analysis (PCA) to reduce the dimension of features to have a view of the input data distribution\n    - Build a preliminary linear SVM model to incorporate all the features to see the model performance.\n2. Feature selection part.\n    - Chi-square test to check the correlation between each categorical feature and the target death event.\n    - Heat map to return the features with high correlation coefficient with death events.\n    - Visualized the each feature's contribution significance in the SVM model\n    - Compared the returned features and determined the final selected features\n3. Model comparison and hyperparameter tuning\n    - compare the performance in difference preprocessing methods MinMaxScalar, StandardScalar, RobustScalar\n    - compare the performance in k-fold cross validation and leave-one-out methods\n    - compare the kernel selected in Support Vector Machine (linear or rbf)\n    - grid search to find the best performance model\n4. Selected model performance\n    - calculated the precision, recall, accuracy and f1-score\n    - plot the ROC and PR-curve\n    - plot the learning curve\n\n\n\n---\n\n\n\n\n## Related work\n\n### Explorative data analysis (EDA) approach\n\n1. [heart-fail-analysis-and-quick-prediction](https:\/\/www.kaggle.com\/nayansakhiya\/heart-fail-analysis-and-quick-prediction)\n\n**Strength**: Detailed explorative and associative data analysis with great data visualization: each factor is visualized by different types of figures <br>\n**Weakness**: Prediction model are quite rudimentary, the author did not select the features and tune the models' hyperparameters.<br>\n**Similarity**: I learned and applied the plotly.express API to create fancy and concise figures for easy comparison; I furthered his rudimentary model by optimization\n\n### Predictive data analysis (PDA) approach\n\n1. [heart-failure-model-prediction-comparisons-95](https:\/\/www.kaggle.com\/rude009\/heart-failure-model-prediction-comparisons-95)\n\n**Strength**: The author compares six prediction models with feature selection. The Extra Gradient Booster Classifier could achieve the accuracy up to 95.0% <br>\n**Weakness**: The author consider the \"time\" column as the useful features. <br>\n**Similarity**: I don't think \"time\" colume should be included since \"time\" column stands for Follow-up period (days), which means itself could not contribute the diseases itself. Therefore, I consider this feature as uselessness in our prediction model\n\n2. [heart-failure-prediction-auc-0-98](https:\/\/www.kaggle.com\/ksvmuralidhar\/heart-failure-prediction-auc-0-98)\n\n**Strength**: The author uses a new method: Chi-square test to find the correlation between single categorical feature with target death_event <br>\n**Weakness**: The visualization part does not as fancy as previous work <br>\n**Similarity**: I learned and used the Chi-square test to conduct the correlation test between single categorical data with the categorical death_event; but i didn't agree the author's method in using box plot comparison between numerical data with categorical data, I used heat map instead.","9d04b9e1":"I would like to have a view of the sample distribution in the dataset. Therefore, I used the principle component analysis (PCA) to reduce the dimension of features into 2D for visualization. The figure suggested that the data are densed and not easy to seperate (either linear or non-linear model), indicating the existence of insignificant feature which could negatively influence the future prediction accuracy.","464b89ae":"### Evaluate the performance of the final selected model performance with respect to the chosen performance matrix \n<br>\n\n### Accuracy:\n$$\\frac{TP+TN}{TP+TN+FP+FN}$$\n<br>\n### Total:\n$$Total = TP+TN+FP+FN$$\n### Precision:\n$$\\frac{TP}{TP+FP}$$\n### Recall:\n$$\\frac{TP}{TP+FN}$$","c1b98fe3":"---\n### Correlation analysis\nI would like to find the correlation between each feature, especially with the target variable: DEATH_EVENT.\nIn this case, I excluded the column \"time\" since the time tracked could not contribute to the heart failure itself.","20f2c0cf":"### Check the ratio of the NaNs for each column","39afe6ac":"---","35a741ee":"#### Ten-fold cross validation of SVM","cf183535":"### ROC curve\n\nAUC = Area under the curve","89422fcd":"## Experiments and results \n","fc886203":"#### Leave-on-out method of SVM","18ac6ca9":"### Summary of the results\n\n- Grid search to find the best hyperparameters in optimization of the model\n- ten-fold cross validation used to evaluate machine learning models on a limited data sample\n- SVM with RBF kernel and hyperparameter C: 1, gamma 0.1 would be the best performed model \n- precision, recall, f1-score, accuracy value were applied and summarized in the previous table\n- train loss and validation loss were 0.78 and 0.83 accordingly\n- MSE value of training sample and testing sample is 0.22 and 0.17 accordingly\n- No overfitting or underfitting problem observed because regularization method, cross-validation method were used to mitigate the potential problems\n- The overall model is robust and in good generalization ability\n- ROC curve and PR curve were visualized to demonstrate the final results; AUC is 0.83 and AP is 0.7\n\n\n","928b05eb":"### Training and validation loss","95a4081f":"## Bibliography\n\nHeart Fail:Analysis and Quick-prediction | Kaggle. (n.d.). Retrieved January 8, 2021, from https:\/\/www.kaggle.com\/nayansakhiya\/heart-fail-analysis-and-quick-prediction\n\nHeart Failure - Model Prediction Comparisons (95%) | Kaggle. (n.d.). Retrieved January 8, 2021, from https:\/\/www.kaggle.com\/rude009\/heart-failure-model-prediction-comparisons-95\n\nHeart Failure Prediction (AUC: 0.98) | Kaggle. (n.d.). Retrieved January 8, 2021, from https:\/\/www.kaggle.com\/ksvmuralidhar\/heart-failure-prediction-auc-0-98\n\nPedregosa et al., Scikit-learn: Machine Learning in Python, JMLR 12, pp. 2825-2830, 2011.\n\n\n\n","99bad8c2":"### Compare the efficacy of different preprocessing methods\n- MinMaxScalar\n- StandardScalar\n- RobustScalar","4dc3dbf6":"### Plot the confusion matrix plot","c048181a":"## Conclusion and future work\n\nIn this project, I compared and devised a RBF SVM machine learning model for the prediction of heart failure. I firstly conducted a preliminary analysis of the whole dataset and utilized the PCA method to visualize the distribution condition of the samples. The initial analysis was not robust and precise, which required me to optimize the model. Then, I conducted feature selection to return the top 4 most correlated feature with the death event. Apart from that, I also compared the difference between normalization method as well as the validation methods. The final determined methods were to use four selected features ('serum_creatinine','age','ejection_fraction', 'creatinine_phosphokinase'), StandardScalar methods and ten-fold cross validation to conduct the prediction. In addition, I also conduct the explorative data analysis to have a view of the selected feature. Furthermore, the PCA condition after feature selection still could not determine whether the dataset is linearly seperable or not, I, therefore, used the grid serach to return the most suitable hyperparameters. The final results suggested that the SVM with RBF kernel in gamma equals 0.1 and penalty C equals 1 could achieve the best performance. After that, the model performance was evaluated from confusion matrix, accuracy, precision, recall, f1-score. Moreover, the ROC plot and PR-curve plot with AUC and AP accordingly were indicated. The final accuracy could achieve 0.83, which is satisfactory. \n\nIn the future, since this project only used SVM related algorithms, I would like to incorporate more complicate algorithms, for instance, XGboost. Furthermore, the model's interpretability are not great enough, and that would be my focus in the future. ","795a7b80":"- The ahead plot illustrates the importance of feature in SVM model. y axis could be considered as weights and the absolute value of weights could suggest the contribution to the final results.\n- The correlation analysis between factors and death event returned the coefficient > 0.1 features\n- Both analysis returned three same features: serum_creatinine, age, ejection_fraction\n- we need to evaluate and compare the performance in serum_sodium and creatinine_phosphokinase\n\n","b59b3abc":"**Method 3: Visualized plots of feature importance in linear SVM**","828d50e6":"In this case, the data distribution after feature selection are scattered, which could be beneficial for separation. Still, we could not determine whether linear kernel or RBF kernel is suitable for classification. I then would compare the performance between these two methods.\n","5977a2e6":"In the meantime, the best performance in linear model is 0.73587, and the mean_test_score in c =1,10,100 is relative similar. The influence of hyperparameter C are not significant. Apart from that the SVC function only provide ","7f82239c":"---\n### Dataset description\nThere are 13 dimensions and 299 samples. All the columns are devoid of NaNs. We need make some rules before the data processing\u3002\n\nTarget features (binary classification): DEATH_EVENT\n\n**Categorical data**\n- Sex - Gender of patient Male = 1, Female =0\n- Diabetes - 0 = No, 1 = Yes\n- Anaemia - 0 = No, 1 = Yes\n- High_blood_pressure - 0 = No, 1 = Yes\n- Smoking - 0 = No, 1 = Yes\n- DEATH_EVENT - 0 = No, 1 = Yes\n\n**Numerical data**\n- Age - Age of patient\n- creatinine_phosphokinase - Level of the CPK enzyme in the blood (mcg\/L)\n- ejection_fraction - Percentage of blood leaving the heart at each contraction (percentage)\n- platelets - Platelets in the blood (kiloplatelets\/mL)\n- serum_creatinine - Level of serum creatinine in the blood (mg\/dL)\n- serum_sodium - Level of serum sodium in the blood (mEq\/L)\n- time - Follow-up period (days)\n\n### Citation or Reference\n\nDataset from Davide Chicco, Giuseppe Jurman: Machine learning can predict survival of patients with heart failure from serum creatinine and ejection fraction alone. BMC Medical Informatics and Decision Making 20, 16 (2020)\n\nThe dataset downloaded from Kaggle https:\/\/www.kaggle.com\/andrewmvd\/heart-failure-clinical-data\n","d6e781a5":"### Data partition\n\n- As I mentioned before, I will not take the feature \"time\" into consideration. Therefore, 11 features are included in the final model prediction.\n- I split the dataset into two categories. 80% for raining data and 20% for testing data.\n- I used the StandardScalar normalization method to preprocess the data","9cccbba8":"As can be seen from the grid search, the SVM with RBF kernel and hyperparameter C: 1, gamma 0.1 could achieve the highest performance","50afd5d7":"### Feature selection (feature engineering)\n\n**Method 1: Chi-square test**\n- Based on previous research, I could conclude that DEATH_EVENT is our target. Since I have six categorical data I would like to figure out whether these single categorical valuable has significant correlation with the DEATH_EVENT.<br>\n- Crosstables\/contingency tables are one of the best ways to see how categorical variables are distributed among each other.\n- The following test suggests that we failed to reject the $H_0$ problem, indicating that there is no direct relationship between the DEATH_EVENT","f58c3929":"---\n### Explorative data analysis of the four selected features: \n- 'serum_creatinine'\n- 'age'\n- 'ejection_fraction'\n- 'creatinine_phosphokinase'\n\n#### Specify the figure size","c22f7a02":"#### Comparison of the two methods","66cbdd90":"Therefore, four features including serum_creatinine, age, ejection_fraction, creatinine_phosphokinase"}}