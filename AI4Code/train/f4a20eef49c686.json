{"cell_type":{"9f3fe376":"code","128fd679":"code","0ffaeac9":"code","d35e9c48":"code","2b13c57c":"code","ba13a077":"code","71bb1cca":"code","8dfefccb":"code","d943afac":"code","04023784":"code","9fba0203":"code","244227a5":"code","54b050dd":"code","6160a699":"code","69be50ec":"markdown"},"source":{"9f3fe376":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","128fd679":"# For tick data\ndf_hf = pd.read_csv(\"\/kaggle\/input\/google-stock-one-tick-data\/GOOG_2020-07-01.txt\",names=[\"DateTime\", \"Close\",\"NAME\"],index_col=3)\ndf_hf.set_index(np.arange(0,df_hf.shape[0],1),inplace=True)\n\n\n","0ffaeac9":"df_hf.head()","d35e9c48":"import matplotlib.pyplot as plt\nimport matplotlib\nfrom matplotlib.pylab import rc\nfont = {'family': 'normal','weight': 'bold',\n        'size': 25}\n\nmatplotlib.rc('font', **font)\nrc('axes', linewidth=3)\n\n#plt.plot(df_hf[\"Open\"],\"k\",label= \"Open\")\nplt.plot(df_hf[\"Close\"],\"r\",label= \"Close\")\n\nplt.xlabel(\"Ticks\")\nplt.ylabel(r\"${\\rm value}$\")\nplt.suptitle(\"Stock price vs Tick\")\nplt.legend()\n\nfig = matplotlib.pyplot.gcf()\nfig.set_size_inches(20,10)","2b13c57c":"\ndf_hf[\"DateTime\"] = pd.to_datetime(df_hf[\"DateTime\"], format=\"%Y-%m-%d %H:%M:%S:%f\")\ndelta_min = (df_hf[\"DateTime\"]-df_hf[\"DateTime\"][0]).dt.total_seconds()\/\/60\n\n\nimport matplotlib\nfrom matplotlib.pylab import rc\nfont = {'family': 'normal','weight': 'bold',\n        'size': 25}\n\nmatplotlib.rc('font', **font)\nrc('axes', linewidth=3)\n\n#plt.plot(delta_min,df_hf[\"Open\"],\"kx\",label= \"Open\")\nplt.plot(delta_min,df_hf[\"Close\"],\"ro\",label= \"Close\")\n\nplt.xlabel(\"Minutes\")\nplt.ylabel(r\"${\\rm value}$\")\nplt.suptitle(\"Stock price vs Minute\")\nplt.legend()\n\nfig = matplotlib.pyplot.gcf()\nfig.set_size_inches(20,10)","ba13a077":"delta_split = int(df_hf.shape[0]*0.7)\ntrain_hf = df_hf[:delta_split]\ntest_hf = df_hf[delta_split:]\nprint(\"Training date length hf\",len(train_hf),\"testing date length hf\", len(test_hf))","71bb1cca":"\nimport matplotlib\nfrom matplotlib.pylab import rc\nfont = {'family': 'normal','weight': 'bold',\n        'size': 25}\n\nmatplotlib.rc('font', **font)\nrc('axes', linewidth=3)\n\nplt.plot(test_hf[\"Close\"],\"ro\",label= \"Close\")\n\nplt.xlabel(\"Ticks\")\nplt.ylabel(r\"${\\rm value}$\")\nplt.suptitle(\"Stock price vs Tick\")\nplt.legend()\n\nfig = matplotlib.pyplot.gcf()\nfig.set_size_inches(20,10)","8dfefccb":"\n# actions: 0:stay 1:buy 2:sell\n\ndef profit_calculator(data,actions):\n    ans = 0\n    # For Google it's 0.5 cent transaction fee\n    ratio = 0.005\n    history = []\n    \n    for i in range(len(data)):\n        if actions[i]==0:\n            pass\n        elif actions[i]==1:\n            history.append(data[i])\n        else:\n            ans += len(history)*data[i]-np.sum(history)-len(history)*ratio\n            history = []\n    return ans\n\n\n","d943afac":"\nwindow_size=30\n\nthrethold = 5\n\n\ndef sliding_window(data):\n    actions = []\n    for i in range(len(data)):\n        temp = data[max(0,i-window_size):i]\n        if len(temp)>0 and data[i]<np.nanpercentile(temp,threthold):\n            # buy\n            actions.append(1)\n        elif len(temp)>0 and data[i]>np.nanpercentile(temp,100-threthold):\n            actions.append(2)\n        else:\n            actions.append(0)\n    return actions\n\n            \nactions = sliding_window(data =test_hf[\"Close\"].values)\n\n","04023784":"plt.hist(actions,label = \"0 stay 1 buy 2 sell\")\nfig = matplotlib.pyplot.gcf()\nfig.set_size_inches(22,10)\nplt.legend()\nplt.show()","9fba0203":"import copy\n\nwindow_size = 30\n\nthrethold_a = 0\n\nthrethold_p = 0.01\n\nmax_history_length = 10\n\ndef helper(data,actions):\n    ans = 0\n    max_history = 0\n    mean_d = np.nanmean(data)\n    actions_modified = copy.copy(actions)\n    \n    # For Google it's 0.5% transaction fee\n    ratio = 0.005\n    history = []\n    \n    for i in range(len(data)):\n        if actions[i]==0:\n            pass\n        elif actions[i]==1:\n            temp = actions[max(0,i-window_size\/\/2):i]\n            temp = list(temp)\n            #print(temp)\n            if temp.count(1)>threthold_a\/100*len(temp) and len(history)<max_history_length:\n                # buy\n                history.append(data[i])\n            else:\n                # stay\n                actions_modified[i]=0\n                \n        else:\n            p = len(history)*data[i]-np.sum(history)-len(history)*0.005\n            if p>mean_d*threthold_p\/100:\n                # sell:\n                ans += p \n                history = []\n            else:\n                # stay\n                actions_modified[i]=0\n            \n    return ans,actions_modified\n\nprofit,test_acts_mod = helper(data=test_hf[\"Close\"].values,actions=actions)\n\n","244227a5":"plt.hist(test_acts_mod,label = \"0 stay 1 buy 2 sell\")\nfig = matplotlib.pyplot.gcf()\nfig.set_size_inches(22,10)\nplt.legend()\nplt.show()","54b050dd":"\nplt.subplot(1,1,1)\ny = test_hf[\"Close\"].values\n\ntest_acts_mod = np.array(test_acts_mod)\nm0 = test_acts_mod==0\nm1 = test_acts_mod==1\nm2 = test_acts_mod==2\nplt.plot(np.arange(0,len(y),1),y,label = \"Profit per tick %.4f\"%(profit\/len(y)))\nplt.plot(np.arange(0,len(y),1)[m0],y[m0],\"ko\",label = \"Stay\",markersize=1)\nplt.plot(np.arange(0,len(y),1)[m1],y[m1],\"ro\",label = \"Buy %d times\"%len(y[m1]),markersize=3)\nplt.plot(np.arange(0,len(y),1)[m2],y[m2],\"go\",label = \"Sell %d times\"%len(y[m2]),markersize=3)\n\nplt.xlabel(\"Minutes \")\nplt.ylabel(\"Price\")\nplt.suptitle(\"Total profit %.4f max volume size=%d\"%(profit,max_history_length))\n\n\n\nfig = matplotlib.pyplot.gcf()\n\nfig.set_size_inches(22,10)\nplt.legend()\nplt.show()\n\n\n\n\n\n","6160a699":"\nshow_tick_length = 2000\n\nplt.subplot(1,1,1)\ny = test_hf[\"Close\"].values[:show_tick_length]\n\ntest_acts_mod = np.array(test_acts_mod)[:show_tick_length]\nm0 = test_acts_mod==0\nm1 = test_acts_mod==1\nm2 = test_acts_mod==2\n\nplt.plot(np.arange(0,len(y),1),y,label = \"Close\")\nplt.plot(np.arange(0,len(y),1)[m0],y[m0],\"ko\",label = \"Stay\",markersize=1)\nplt.plot(np.arange(0,len(y),1)[m1],y[m1],\"ro\",label = \"Buy %d times\"%len(y[m1]),markersize=5)\nplt.plot(np.arange(0,len(y),1)[m2],y[m2],\"go\",label = \"Sell %d times\"%len(y[m2]),markersize=10)\n\nplt.xlabel(\"Minutes \")\nplt.ylabel(\"Price\")\nplt.suptitle(\"Total profit %.4f max volume size=%d\"%(profit,max_history_length))\n\n\n\nfig = matplotlib.pyplot.gcf()\n\nfig.set_size_inches(22,10)\nplt.legend()\nplt.show()\n\n\n\n\n\n\n","69be50ec":"# Naive model: Sliding window"}}