{"cell_type":{"1c581d2c":"code","df7e62f8":"code","4269fa31":"code","265d58e7":"code","177687c8":"code","965058b4":"code","1835b4ef":"code","f8783ba5":"code","51e8944b":"code","18c001e1":"code","d01a9d05":"code","c945b22a":"code","0f34b02d":"code","c77fd814":"code","9a954f94":"code","34be1fa7":"code","1c34492c":"code","21116fcc":"code","6e9e8305":"code","50a37bfa":"code","20519ae2":"code","57b6c8f5":"code","6ccd9f7e":"code","7f6264f8":"code","852d7566":"code","179d503c":"code","8719efee":"code","f73d9afe":"code","408fb8b5":"code","5af1bb1f":"code","c36c7af8":"code","d7b78b1f":"code","3bdd270d":"code","0ffb7cf9":"code","7772e286":"code","5cd1bbf6":"code","b05a14f6":"code","dd003a7a":"code","ccf0e568":"code","e95f3145":"markdown","2a2e22ef":"markdown","59a9f6be":"markdown","a19e13d0":"markdown","0c4b2703":"markdown","8b72b23c":"markdown","dbaca665":"markdown","74933d04":"markdown","eb8ee495":"markdown","a6759f40":"markdown","4904c0e3":"markdown","a23c075e":"markdown","b0314bc0":"markdown","86e322f2":"markdown","06a5e741":"markdown","3ae8f7b5":"markdown","ae09b396":"markdown","d97d06aa":"markdown","9988f106":"markdown"},"source":{"1c581d2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport matplotlib.pyplot as plt\nimport networkx as nx","df7e62f8":"G_e = nx.from_edgelist({(1, 2), (2, 1), (1, 3), (1, 1)}, create_using=nx.DiGraph)\nA_e = nx.to_numpy_matrix(G_e)","4269fa31":"G = nx.read_edgelist('..\/input\/ml-in-graphs-hw0\/wiki-Vote.txt', comments='#', delimiter='\\t', create_using=nx.DiGraph)\nA = nx.to_numpy_matrix(G)","265d58e7":"len(G.nodes), len(G), len(G_e)","177687c8":"A.shape[0]","965058b4":"nx.number_of_selfloops(G), nx.number_of_selfloops(G_e)","1835b4ef":"len([(n, n) for n, nbrs in G.adj.items() if n in nbrs])","f8783ba5":"np.diagonal(A).sum(), np.diagonal(A_e).sum()","51e8944b":"G.size() - nx.number_of_selfloops(G), G_e.size() - nx.number_of_selfloops(G_e)","18c001e1":"A.sum() - np.diagonal(A).sum(), A_e.sum() - np.diagonal(A_e).sum()","d01a9d05":"G.to_undirected().size()  - nx.number_of_selfloops(G), G_e.to_undirected().size()  - nx.number_of_selfloops(G_e)","c945b22a":"(A.sum() - np.diagonal(A).sum()) - (np.multiply(np.multiply(A, A.T), (1 - np.eye(A.shape[0]))).sum() \/ 2)","0f34b02d":"(A_e.sum() - np.diagonal(A_e).sum()) - (np.multiply(np.multiply(A_e, A_e.T), (1 - np.eye(A_e.shape[0]))).sum() \/ 2)","c77fd814":"G.to_undirected(True).size() - nx.number_of_selfloops(G), G_e.to_undirected(True).size() - nx.number_of_selfloops(G_e)","9a954f94":"np.multiply(np.multiply(A, A.T), (1 - np.eye(A.shape[0]))).sum() \/ 2","34be1fa7":"np.multiply(np.multiply(A_e, A_e.T), (1 - np.eye(A_e.shape[0]))).sum() \/ 2","1c34492c":"sum([1 for key, out_degree in G.out_degree() if out_degree == 0]), sum([1 for key, out_degree in G_e.out_degree() if out_degree == 0])","21116fcc":"(A.sum(axis=1) == 0).sum()","6e9e8305":"sum([1 for key, in_degree in G.in_degree() if in_degree == 0]), sum([1 for key, in_degree in G_e.in_degree() if in_degree == 0])","50a37bfa":"(A.sum(axis=0) == 0).sum()","20519ae2":"sum([1 for key, out_degree in G.out_degree() if out_degree > 10])","57b6c8f5":"(A.sum(axis=1) > 10).sum()","6ccd9f7e":"sum([1 for key, in_degree in G.in_degree() if in_degree < 10])","7f6264f8":"(A.sum(axis=0) < 10).sum()","852d7566":"_out = np.array([out_degree for key, out_degree in G.out_degree()  if out_degree > 0])\nvalue, count = np.unique(_out, return_counts=True)","179d503c":"plt.figure(figsize=(10, 5))\nplt.plot(np.log10(value), np.log10(count), alpha=0.5)\nplt.scatter(np.log10(value), np.log10(count))\nplt.xlim([np.log10(value).min(), np.log10(value).max()])\nplt.xlabel('log10 out-degree')\nplt.ylabel('log10 count out-degree')\nplt.show()","8719efee":"coef = np.polyfit(np.log10(value), np.log10(count), 1)\nprint(coef)","f73d9afe":"plt.figure(figsize=(10, 5))\nplt.plot(np.log10(value), np.log10(count), alpha=0.5)\nplt.scatter(np.log10(value), np.log10(count))\nplt.plot(np.log10(value), np.log10(value) * coef[0] + coef[1], c='r', label='lin reg')\nplt.xlim([np.log10(value).min(), np.log10(value).max()])\nplt.xlabel('log10 out-degree')\nplt.ylabel('log10 count out-degree')\nplt.legend()\nplt.show()","408fb8b5":"G = nx.read_edgelist('..\/input\/ml-in-graphs-hw0\/stackoverflow-Java.txt', comments='#', delimiter='\\t', create_using=nx.DiGraph)","5af1bb1f":"G.size()","c36c7af8":"len(list(nx.weakly_connected_components(G)))","d7b78b1f":"largest_cc = G.subgraph(max(nx.weakly_connected_components(G), key=len))","3bdd270d":"largest_cc.size(), len(largest_cc)","0ffb7cf9":"%%time\npagerank = nx.pagerank(largest_cc)","7772e286":"{k: v for n, (k, v) in enumerate(sorted(pagerank.items(), key=lambda item: item[1], reverse=True)) if n<3}","5cd1bbf6":"%%time\nhits = nx.hits(largest_cc)","b05a14f6":"hubs, authorities = hits","dd003a7a":"#top hubs\n{k: v for n, (k, v) in enumerate(sorted(hubs.items(), key=lambda item: item[1], reverse=True)) if n<3}","ccf0e568":"#top authorities\n{k: v for n, (k, v) in enumerate(sorted(authorities.items(), key=lambda item: item[1], reverse=True)) if n<3}","e95f3145":"## IDs of the top 3 most central nodes in the network by PagePank scores. PageRank scores are calculated in Snap.py with function GetPageRank.","2a2e22ef":"## The number of nodes with a self-edge (self-loop), i.e., the number of nodes a \u2208 V where (a, a) \u2208 E. (G small has 1 self-edge.)","59a9f6be":"## The number of weakly connected components in the network. This value can be calculated in Snap.py via function GetWccs.","a19e13d0":"## The number of nodes of zero in-degree. (G small has 0 nodes with zero in-degree.)","0c4b2703":"## (18 points) Plot the distribution of out-degrees of nodes in the network on a log-log scale. Each data point is a pair (x, y) where x is a positive integer and y is the number of nodes in the network with out-degree equal to x. Restrict the range of x between the minimum and maximum out-degrees. You may filter out data points with a 0 entry. For the log-log scale, use base 10 for both x and y axes.\n","8b72b23c":"# Analyzing the Wikipedia voters network [27 points]\nDownload the Wikipedia voting network wiki-Vote.txt.gz: http:\/\/snap.stanford.edu\/data\/wiki-Vote.html.\nUsing one of the network analysis tools above, load the Wikipedia voting network. Note that\nWikipedia is a directed network. Formally, we consider the Wikipedia network as a directed\ngraph G = (V, E), with node set V and edge set E \u2282 V \u00d7 V where (edges are ordered pairs\nof nodes). An edge (a, b) \u2208 E means that user a voted on user b.  \nTo make our questions clearer, we will use the following small graph as a running example:  \nG small = (V small , E small ), where V small = {1, 2, 3} and  \nE small = {(1, 2), (2, 1), (1, 3), (1, 1)}.  \nCompute and print out the following statistics for the wiki-Vote network:\n","dbaca665":"## The number of directed edges in the network, i.e., the number of ordered pairs (a, b) \u2208 E for which a 6 = b. (G small has 3 directed edges.)","74933d04":"## The number of nodes with fewer than 10 incoming edges (in-degree < 10).","eb8ee495":"## IDs of the top 3 hubs and top 3 authorities in the network by HITS scores. HITS scores are calculated in Snap.py with function GetHits.","a6759f40":"## The number of reciprocated edges in the network, i.e., the number of unique unordered pairs of nodes (a, b), a 6 = b, for which (a, b) \u2208 E and (b, a) \u2208 E. (G small has 1 reciprocated edge.)","4904c0e3":"## The number of undirected edges in the network, i.e., the number of unique unordered pairs (a, b), a 6 = b, for which (a, b) \u2208 E or (b, a) \u2208 E (or both). If both (a, b) and (b, a) are edges, this counts a single undirected edge. (G small has 2 undirected edges.)\n","a23c075e":"## The number of nodes in the network. (G small has 3 nodes.)","b0314bc0":"You can find more details about this exercise on the Snap.py tutorial page: http:\/\/snap.stanford.edu\/proj\/snap-icwsm\/. As an extra exercise, extend the tutorial to find experts in other programming languages or topics.","86e322f2":"# 2 Further Analyzing the Wikipedia voters network [33 points]\nFor this problem, we use the Wikipedia voters network. If you are using Python, you might\nwant to use NumPy, SciPy, and\/or Matplotlib libraries.\n\n","06a5e741":"## (15 points) Compute and plot the least-square regression line for the out-degree distribution in the log-log scale plot. Note we want to find coefficients a and b such that the function log 10 y = a \u00b7 log 10 x + b, equivalently, y = 10 b \u00b7 x a , best fits the out-degree distribution. What are the coefficients a and b? For this part, you might want to use the method called polyfit in NumPy with deg parameter equal to 1.","3ae8f7b5":"## The number of nodes with more than 10 outgoing edges (out-degree > 10).","ae09b396":"## The number of edges and the number of nodes in the largest weakly connected component. The largest weakly connected component is calculated in Snap.py with function GetMxWcc.","d97d06aa":"# 3 Finding Experts on the Java Programming Language on StackOverflow [40 points]\nDownload the StackOverflow network stackoverflow-Java.txt.gz: http:\/\/snap.stanford.edu\/class\/cs224w-data\/hw0\/stackoverflow-Java.txt.gz. An edge (a, b) in the network means that person a endorsed an answer from person b on a Java-related question. Using one of the network analysis tools above, load the StackOverflow network. Note that StackOverflow is a directed network. Compute and print out the following statistics for the stackoverflow-Java network:\n\n","9988f106":"## The number of nodes of zero out-degree. (G small has 1 node with zero out-degree.)"}}