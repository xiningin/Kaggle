{"cell_type":{"242eac3a":"code","4ba5d4dc":"code","15889671":"code","c8c9cca4":"code","d05ee96a":"code","7ddf32cf":"code","ac176d6c":"code","3c9a8e6b":"code","ab47fc54":"code","22d88ace":"code","38a52fdf":"code","b4f2f01d":"code","1706f513":"code","6d177c08":"code","671bcd78":"code","07143160":"code","1695f3f5":"code","1a87c6cf":"markdown","d68b27a5":"markdown","005987a0":"markdown","184829a1":"markdown","94e0b3b8":"markdown","a2c00469":"markdown","28ee6e24":"markdown","bfe82149":"markdown","a9b4177c":"markdown","2407dac8":"markdown"},"source":{"242eac3a":"!pip install -q efficientnet","4ba5d4dc":"import math, re, os\n\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nimport tensorflow as tf\nimport tensorflow.keras.layers as L\nimport efficientnet.tfkeras as efn\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split","15889671":"AUTO = tf.data.experimental.AUTOTUNE\n\n# Create strategy from tpu\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver()\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\nstrategy = tf.distribute.experimental.TPUStrategy(tpu)\n\n# Data access\nGCS_DS_PATH = KaggleDatasets().get_gcs_path()\n\n# Configuration\nEPOCHS = 80\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync","c8c9cca4":"def format_path(st):\n    return GCS_DS_PATH + '\/images\/' + st + '.jpg'","d05ee96a":"train = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/sample_submission.csv')\n\ntrain_paths = train.image_id.apply(format_path).values\ntest_paths = test.image_id.apply(format_path).values\n\ntrain_labels = train.loc[:, 'healthy':].values","7ddf32cf":"def decode_image(filename, label=None, image_size=(512, 512)):\n    bits = tf.io.read_file(filename)\n    image = tf.image.decode_jpeg(bits, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.rgb_to_yuv(image)\n    image = tf.image.resize(image, image_size)\n    \n    if label is None:\n        return image\n    else:\n        return image, label\n\ndef data_augment(image, label=None):\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    \n    if label is None:\n        return image\n    else:\n        return image, label","ac176d6c":"test_dataset = (\n        tf.data.Dataset\n        .from_tensor_slices(test_paths)\n        .map(decode_image, num_parallel_calls=AUTO)\n        .map(data_augment, num_parallel_calls=AUTO)\n        .batch(BATCH_SIZE)\n)","3c9a8e6b":"def build_lrfn(lr_start=0.00001, lr_max=0.00005, \n               lr_min=0.000001, lr_rampup_epochs=3, \n               lr_sustain_epochs=2, lr_exp_decay=.86):\n    lr_max = lr_max * strategy.num_replicas_in_sync\n\n    def lrfn(epoch):\n        if epoch < lr_rampup_epochs:\n            lr = (lr_max - lr_start) \/ lr_rampup_epochs * epoch + lr_start\n        elif epoch < lr_rampup_epochs + lr_sustain_epochs:\n            lr = lr_max\n        else:\n            lr = (lr_max - lr_min) * lr_exp_decay**(epoch - lr_rampup_epochs - lr_sustain_epochs) + lr_min\n        return lr\n    \n    return lrfn","ab47fc54":"from tensorflow.keras.callbacks import Callback \n\nclass TTACallback(Callback):\n    def __init__(self, test_data, score_thr):\n        self.test_data = test_data\n        self.score_thr = score_thr\n        self.test_pred = []\n        \n    def on_epoch_end(self, epoch, logs=None):\n        if logs['val_categorical_accuracy'] > self.score_thr:\n            print('Run TTA...')\n            self.test_pred.append(self.model.predict(self.test_data))","22d88ace":"from tensorflow.keras import backend as K\nfrom tensorflow.keras.layers import Layer\n\nclass SoftProbField(Layer):\n    # https:\/\/www.kaggle.com\/miklgr500\/plant-pathology-very-concise-tpu-efficientnetl2\n    def __init__(self, **kwargs):\n        super(SoftProbField, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        super(SoftProbField, self).build(input_shape)  # Be sure to call this at the end\n\n    def call(self, x):\n        h = x[:, 0]\n        s = x[:, 1]\n        r = x[:, 2]\n        \n        m = s*r*(1-h)\n        s = s*(1-h)*(1-m)\n        r = r*(1-h)*(1-m)\n        return tf.stack([h, s, r, m], axis=-1)\n\n    def compute_output_shape(self, input_shape):\n        return (input_shape[0], 4)","38a52fdf":"with strategy.scope():\n    model = tf.keras.Sequential([\n        efn.EfficientNetB5(\n            input_shape=(512, 512, 3),\n            weights='noisy-student',\n            include_top=False\n        ),\n        L.GlobalMaxPooling2D(),\n        L.Dense(3**3),\n        L.LayerNormalization(),\n        L.LeakyReLU(0.1),\n        L.Dropout(0.5),\n        L.Dense(3, activation='sigmoid'),\n        SoftProbField()\n    ])\n        \n    model.compile(\n        optimizer='adam',\n        loss = 'categorical_crossentropy',\n        metrics=['categorical_accuracy']\n    )\n    model.summary()","b4f2f01d":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 7))\n\nlrfn = build_lrfn()\nplt.plot([i for i in range(30)], [lrfn(i) for i in range(30)]);","1706f513":"weights = model.get_weights()","6d177c08":"IMAGE_SIZE = [512, 512]\n\ndef get_mat(rotation, shear, height_zoom, width_zoom, height_shift, width_shift):\n    # returns 3x3 transformmatrix which transforms indicies\n        \n    # CONVERT DEGREES TO RADIANS\n    rotation = math.pi * rotation \/ 180.\n    shear = math.pi * shear \/ 180.\n    \n    # ROTATION MATRIX\n    c1 = tf.math.cos(rotation)\n    s1 = tf.math.sin(rotation)\n    one = tf.constant([1],dtype='float32')\n    zero = tf.constant([0],dtype='float32')\n    rotation_matrix = tf.reshape( tf.concat([c1,s1,zero, -s1,c1,zero, zero,zero,one],axis=0),[3,3] )\n        \n    # SHEAR MATRIX\n    c2 = tf.math.cos(shear)\n    s2 = tf.math.sin(shear)\n    shear_matrix = tf.reshape( tf.concat([one,s2,zero, zero,c2,zero, zero,zero,one],axis=0),[3,3] )    \n    \n    # ZOOM MATRIX\n    zoom_matrix = tf.reshape( tf.concat([one\/height_zoom,zero,zero, zero,one\/width_zoom,zero, zero,zero,one],axis=0),[3,3] )\n    \n    # SHIFT MATRIX\n    shift_matrix = tf.reshape( tf.concat([one,zero,height_shift, zero,one,width_shift, zero,zero,one],axis=0),[3,3] )\n    \n    return K.dot(K.dot(rotation_matrix, shear_matrix), K.dot(zoom_matrix, shift_matrix))\n\ndef transform(image,label):\n    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n    # output - image randomly rotated, sheared, zoomed, and shifted\n    DIM = IMAGE_SIZE[0]\n    XDIM = DIM%2 #fix for size 331\n    \n    rot = 45. * tf.random.normal([1],dtype='float32')\n    shr = 32. * tf.random.normal([1],dtype='float32') \n    h_zoom = 1.0 + tf.random.normal([1],dtype='float32')\/5.\n    w_zoom = 1.0 + tf.random.normal([1],dtype='float32')\/5.\n    h_shift = 32. * tf.random.normal([1],dtype='float32') \n    w_shift = 32. * tf.random.normal([1],dtype='float32') \n  \n    # GET TRANSFORMATION MATRIX\n    m = get_mat(rot,shr,h_zoom,w_zoom,h_shift,w_shift) \n\n    # LIST DESTINATION PIXEL INDICES\n    x = tf.repeat( tf.range(DIM\/\/2,-DIM\/\/2,-1), DIM )\n    y = tf.tile( tf.range(-DIM\/\/2,DIM\/\/2),[DIM] )\n    z = tf.ones([DIM*DIM],dtype='int32')\n    idx = tf.stack( [x,y,z] )\n    \n    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n    idx2 = K.dot(m,tf.cast(idx,dtype='float32'))\n    idx2 = K.cast(idx2,dtype='int32')\n    idx2 = K.clip(idx2,-DIM\/\/2+XDIM+1,DIM\/\/2)\n    \n    # FIND ORIGIN PIXEL VALUES           \n    idx3 = tf.stack( [DIM\/\/2-idx2[0,], DIM\/\/2-1+idx2[1,]] )\n    d = tf.gather_nd(image,tf.transpose(idx3))\n        \n    return tf.reshape(d,[DIM,DIM,3]),label","671bcd78":"def get_datasets(tr_idx, vl_idx):\n    train_dataset = (\n        tf.data.Dataset\n        .from_tensor_slices((train_paths[tr_idx], train_labels[tr_idx]))\n        .map(decode_image, num_parallel_calls=AUTO)\n        .cache()\n        .map(data_augment, num_parallel_calls=AUTO)\n        .map(transform, num_parallel_calls=AUTO)\n        .repeat()\n        .shuffle(512)\n        .batch(64)\n        .prefetch(AUTO)\n    )\n\n    valid_dataset = (\n        tf.data.Dataset\n        .from_tensor_slices((train_paths[vl_idx], train_labels[vl_idx]))\n        .map(decode_image, num_parallel_calls=AUTO)\n        .batch(64)\n        .cache()\n        .prefetch(AUTO)\n    )\n    return train_dataset, valid_dataset","07143160":"from sklearn.model_selection import train_test_split, StratifiedKFold\n\ngkf = StratifiedKFold(n_splits=5)\ntta = TTACallback(test_dataset, 0.96)\nSTEPS_PER_EPOCH = train_labels.shape[0] \/\/ 64\n\nfor i, (tr_idx, vl_idx) in enumerate(gkf.split(train_paths, train_labels.argmax(-1))):\n    print(f'Start {i} fold')\n    tf.keras.backend.clear_session()\n    model.set_weights(weights)\n    train_dataset, valid_dataset = get_datasets(tr_idx, vl_idx)\n    lr_schedule = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=1)\n    history = model.fit(\n                    train_dataset, \n                    epochs=20, \n                    callbacks=[lr_schedule, tta],\n                    steps_per_epoch=STEPS_PER_EPOCH * 6,\n                    validation_data=valid_dataset\n    )","1695f3f5":"probs = np.mean(tta.test_pred, axis=0)\nsub.loc[:, 'healthy':] = probs\nsub.to_csv('submission.csv', index=False)\nsub.head()","1a87c6cf":"## TPU Config","d68b27a5":"## About this kernel\n\nIn my last [TPU kernel for the flower competition](https:\/\/www.kaggle.com\/xhlulu\/flowers-tpu-concise-efficientnet-b7), I wrapped the very [comprehensive starter kernel](https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu) to show how to load `TFRecords` in order to predict flower categories.\n\nIn this kernel, I want to show the simplest and most barebone way to load `png` files (instead of `TFRecords`). In here, I only included the commands you will need to train the model; no bells and whistles included, which means there are no util functions to display the images or preprocess the images, but just enough content for you to quickly understand how `tf.data.Dataset` works.\n\nIf you want to dive deeper in the `tf.data.Dataset` way of building your input pipeline, please check out [this tutorial by Martin](https:\/\/codelabs.developers.google.com\/codelabs\/keras-flowers-data\/#0), which I followed in order to build this kernel.\n\n### References\n\n* https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu\n* https:\/\/codelabs.developers.google.com\/codelabs\/keras-flowers-data\/#0","005987a0":"### Load Model into TPU","184829a1":"### Start training","94e0b3b8":"## Modelling","a2c00469":"## TTA Callback ","28ee6e24":"## Load label and paths","bfe82149":"## Submission","a9b4177c":"### Helper Functions","2407dac8":"## Create Dataset objects\n\nA `tf.data.Dataset` object is needed in order to run the model smoothly on the TPUs. Here, I heavily trim down [my previous kernel](https:\/\/www.kaggle.com\/xhlulu\/flowers-tpu-concise-efficientnet-b7), which was inspired by [Martin's kernel](https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu)."}}