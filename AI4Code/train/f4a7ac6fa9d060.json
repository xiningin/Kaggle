{"cell_type":{"bc4d69a3":"code","b754e6b6":"code","41dacbae":"code","44b6d0ca":"code","834c1e79":"code","2f59df84":"code","7723e951":"code","eae901c8":"code","1aa238ae":"code","3aeb60ea":"code","8b933bdc":"code","6f020dda":"code","61f4a3f0":"code","45bea9ed":"code","8524b43b":"code","6b1c1fea":"code","c423f35f":"markdown","9d0a9da2":"markdown","bb732707":"markdown","6e1e53af":"markdown","e6b8cfb7":"markdown","fefad111":"markdown","d4185098":"markdown","da80042b":"markdown","79914d2e":"markdown","0881d64f":"markdown","c45c726c":"markdown","2c07f10c":"markdown","15c5ec61":"markdown","8511620a":"markdown","a259c7ad":"markdown","26690d57":"markdown","d20ccfab":"markdown","cd5a0b44":"markdown","d6200361":"markdown","39092c7d":"markdown","62a650de":"markdown","21ad74ff":"markdown","196400d8":"markdown"},"source":{"bc4d69a3":"help(round)","b754e6b6":"help(round(-2.01))","41dacbae":"help(print)","44b6d0ca":"def least_difference(a, b, c):\n    diff1 = abs(a - b)\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    return min(diff1, diff2, diff3)","834c1e79":"print(\n    least_difference(1, 10, 100),\n    least_difference(1, 10, 10),\n    least_difference(5, 6, 7), # Python allows trailing commas in argument lists. How nice is that?\n)","2f59df84":"help(least_difference)","7723e951":"def least_difference(a, b, c):\n    \"\"\"Return the smallest difference between any two numbers\n    among a, b and c.\n    \n    >>> least_difference(1, 5, -5)\n    4\n    \"\"\"\n    diff1 = abs(a - b)\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    return min(diff1, diff2, diff3)","eae901c8":"help(least_difference)","1aa238ae":"def least_difference(a, b, c):\n    \"\"\"Return the smallest difference between any two numbers\n    among a, b and c.\n    \"\"\"\n    diff1 = abs(a - b)\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    min(diff1, diff2, diff3)\n    \nprint(\n    least_difference(1, 10, 100),\n    least_difference(1, 10, 10),\n    least_difference(5, 6, 7),\n)","3aeb60ea":"mystery = print()\nprint(mystery)","8b933bdc":"print(1, 2, 3, sep=' < ')","6f020dda":"print(30, 11, 2020, sep=\"-\")\n# Output: 30-11-2020","61f4a3f0":"print(1, 2, 3)","45bea9ed":"def greet(who=\"Colin\"):\n    print(\"Hello,\", who)\n    \ngreet()\ngreet(who=\"Kaggle\")\n# (In this case, we don't need to specify the name of the argument, because it's unambiguous.)\ngreet(\"world\")","8524b43b":"def mult_by_five(x):\n    return 5 * x\n\ndef call(fn, arg):\n    \"\"\"Call fn on arg\"\"\"\n    return fn(arg)\n\ndef squared_call(fn, arg):\n    \"\"\"Call fn on the result of calling fn on arg\"\"\"\n    return fn(fn(arg))\n\nprint(\n    call(mult_by_five, 1),\n    squared_call(mult_by_five, 1), \n    sep='\\n', # '\\n' is the newline character - it starts a new line\n)","6b1c1fea":"def mod_5(x):\n    \"\"\"Return the remainder of x after dividing by 5\"\"\"\n    return x % 5\n\nprint(\n    'Which number is biggest?',\n    max(100, 51, 14),\n    'Which number is the biggest modulo 5?',\n    max(100, 51, 14, key=mod_5),\n    sep='\\n',\n)","c423f35f":"Functions that operate on other functions are called \"Higher order functions.\" You probably won't write your own for a little while. But there are higher order functions built into Python that you might find useful to call. \n\nHere's an interesting example using the `max` function.\n\nBy default, `max` returns the largest of its arguments. But if we pass in a function using the optional `key` argument, it returns the argument `x` that maximizes `key(x)` (aka the 'argmax').","9d0a9da2":"`help()` displays two things:\n\n1. the header of that function `round(number[, ndigits])`. In this case, this tells us that `round()` takes an argument we can describe as `number`. Additionally, we can optionally give a separate argument which could be described as `ndigits`.\n2. A brief English description of what the function does. ","bb732707":"# Getting Help\n\nYou saw the `abs` function in the previous tutorial, but what if you've forgotten what it does?\n\nThe `help()` function is possibly the most important Python function you can learn. If you can remember how to use `help()`, you hold the key to understanding most other functions.\n\nHere is an example:","6e1e53af":"# Your Turn\n\nFunctions open up a whole new world in Python programming. **[Try using them yourself](https:\/\/www.kaggle.com\/kernels\/fork\/1275158)**","e6b8cfb7":"The docstring is a triple-quoted string (which may span multiple lines) that comes immediately after the header of a function. When we call `help()` on a function, it shows the docstring.","fefad111":"If you were looking for it, you might learn that print can take an argument called `sep`, and that this describes what we put between all the other arguments when we print them.","d4185098":"## Defining functions\n\nBuiltin functions are great, but we can only get so far with them before we need to start defining our own functions. Below is a simple example.","da80042b":"Good programmers use docstrings unless they expect to throw away the code soon after it's used (which is rare).  So, you should start writing docstrings too.","79914d2e":"## Functions that don't return\n\nWhat would happen if we didn't include the `return` keyword in our function?","0881d64f":"This creates a function called `least_difference`, which takes three arguments, `a`, `b`, and `c`.\n\nFunctions start with a header introduced by the `def` keyword. The indented block of code following the `:` is run when the function is called.\n\n`return` is another keyword uniquely associated with functions. When Python encounters a `return` statement, it exits the function immediately, and passes the value on the right hand side to the calling context.\n\nIs it clear what `least_difference()` does from the source code? If we're not sure, we can always try it out on a few examples:","c45c726c":"**Common pitfall:** when you're looking up a function, remember to pass in the name of the function itself, and not the result of calling that function. \n\nWhat happens if we invoke help on a *call* to the function `abs()`? Unhide the output of the cell below to see.","2c07f10c":"Python isn't smart enough to read my code and turn it into a nice English description. However, when I write a function, I can provide a description in what's called the **docstring**.\n\n### Docstrings","15c5ec61":"# More Notes\nRetrieved from [Github\/Hello World of Everything\/Documentation](https:\/\/github.com\/junwheih\/Hello-World-Of-Everything\/blob\/main\/Python\/Documentation.py)\n\n```python\n# Last updated: Wed, February 03, 2021 - 15:30\n\n# Referece: https:\/\/www.youtube.com\/watch?v=URBSvqib0xw\n\"\"\"\n$ python -m pydoc\n$ python -m pydoc -k <keyword>\n    Search for a keyword in the synopsis lines of all available modules.\n    NOTE:   To view page by page - press SPACE\n            To quit the documentation - press q\n$ python -m pydoc -n <hostname>\n    Start an HTTP server with the given hostname (default: localhost).\n$ python -m pydoc -p <port>\n    Start an HTTP server on the given port on the local machine.  Port\n    number 0 can be used to get an arbitrary unused port.\n$ python -m pydoc -b\n    Start an HTTP server on an arbitrary unused port and open a Web browser\n    to interactively browse documentation.  This option can be used in\n    combination with -n and\/or -p.\n$ python -m pydoc -w <name> ...\n    Write out the HTML documentation for a module to a file in the current\n    directory.  If <name> contains a '\\', it is treated as a filename; if\n    it names a directory, documentation is written for all the contents.\n\"\"\"\n\n############################################################\n# Reference: https:\/\/realpython.com\/documenting-python-code\/\n# This is a basic comment\n# PEP8: comments should have a maximum length of 72 characters\n\n# Tagging: to label specific sections of code (improvement or issue)\n# Example: BUG, FIXME, and TODO.\n\"\"\"\n# TODO: Add condition for when val is None\n\"\"\"\n\n# This line here is the brief function of the function below.\ndef say_hello(name):\n    \"\"\"Documentation Title\n    This is the function of ...\n    :param name: string\n    \"\"\"\n    return(f\"Hello {name}\")\n\nprint(say_hello('World'))\n\n# Another way of documenting it\nsay_hello.__doc__ = \"This is a function of...\"\n\n# In python console, this is how you get the documentation\n\"\"\"\n>>> help(say_hello)\nNOTE: Above code only available in python console\n\"\"\"\n\n############################################################\n# Reference: https:\/\/www.journaldev.com\/22892\/python-help-function\n# This is how you can go through the entire python file doc\n\"\"\"\n# Step 1:\n>>> exec(open(r\"C:\/Users\/<USERNAME>\/Project\/HelloWorld.py\").read())\n# Step 2:\n>>>  globals()\n{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>, '__warningregistry__': {'version': 0}, 'say_hello': <function say_hello at 0x000001853B86E040>}\n# Step 3:\n>>> help('HelloWorld.say_hello')\n\"\"\"\n```","8511620a":"Adding optional arguments with default values to the functions we define turns out to be pretty easy:","a259c7ad":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161283) to chat with other Learners.*","26690d57":"Python allows us to define such functions. The result of calling them is the special value `None`. (This is similar to the concept of \"null\" in other languages.)\n\nWithout a `return` statement, `least_difference` is completely pointless, but a function with side effects may do something useful without returning anything. We've already seen two examples of this: `print()` and `help()` don't return anything. We only call them for their side effects (putting some text on the screen). Other examples of useful side effects include writing to a file, or modifying an input.","d20ccfab":"Or maybe the `help()` function can tell us something about it.","cd5a0b44":"## Default arguments\n\nWhen we called `help(print)`, we saw that the `print` function has several optional arguments. For example, we can specify a value for `sep` to put some special string in between our printed arguments:","d6200361":"## Functions Applied to Functions\n\nHere's something that's powerful, though it can feel very abstract at first.  You can supply functions as arguments to other functions.  Some example may make this clearer:","39092c7d":"Python evaluates an expression like this from the inside out. First it calculates the value of `round(-2.01)`, then it provides help on the output of that expression.\n\n<small>(And it turns out to have a lot to say about integers! After we talk later about objects, methods, and attributes in Python, the voluminous help output above will make more sense.)<\/small>\n\n`round` is a very simple function with a short docstring. `help` shines even more when dealing with more complex, configurable functions like `print`. Don't worry if the following output looks inscrutable... for now, just see if you can pick anything new out from this help.","62a650de":"> **Aside: example calls**\n> The last two lines of the docstring are an example function call and result. (The `>>>` is a reference to the command prompt used in Python interactive shells.) Python doesn't run the example call - it's just there for the benefit of the reader. The convention of including 1 or more example calls in a function's docstring is far from universally observed, but it can be very effective at helping someone understand your function. For a real-world example of, see [this docstring for the numpy function `np.eye`](https:\/\/github.com\/numpy\/numpy\/blob\/v1.14.2\/numpy\/lib\/twodim_base.py#L140-L194).","21ad74ff":"But if we don't specify a value, `sep` is treated as having a default value of `' '` (a single space).","196400d8":"# Intro\nYou've already seen and used functions such as `print` and `abs`. But Python has many more functions, and defining your own functions is a big part of python programming.\n\nIn this lesson you will learn more about using and defining functions."}}