{"cell_type":{"0ea4e297":"code","c9628ad7":"code","44b3e67b":"code","1e6c973f":"code","2b5ec18f":"code","341429cb":"code","09cc9475":"code","ea3400a8":"code","82a669a8":"code","3450c7d9":"code","ff296891":"code","99c0e253":"code","eae90cc0":"code","ee2b034b":"code","da37be65":"code","9aea1be6":"code","776f27c6":"code","b535e40a":"code","9146f365":"code","1009735d":"code","e0387783":"code","83f0d9e7":"code","554c4bc6":"code","e6affcf1":"code","cb1843c7":"code","847f9646":"code","87e162a0":"code","0b136c1f":"code","aebf3ae5":"code","41f32b69":"code","831162a7":"code","bd92abe4":"code","de8379ec":"code","863396a2":"code","868dda1a":"markdown","e156015d":"markdown"},"source":{"0ea4e297":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\n%matplotlib inline\n\nimport plotly.offline as py\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected = True) # Required to use plotly offline in jupyter notebook\n\nimport cufflinks as cf #importing plotly and cufflinks in offline mode  \nimport plotly.offline  \ncf.go_offline()  \ncf.set_config_file(offline=False, world_readable=True)\n\n'''Display markdown formatted output like bold, italic bold etc.'''\nfrom IPython.display import Markdown\ndef bold(string):\n    display(Markdown(string))\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c9628ad7":"data = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\ndata.head()","44b3e67b":"data.info()","1e6c973f":"data['date_added'] = pd.to_datetime(data['date_added'])\ndata['Year_added'] = data['date_added'].dt.year\ndata['Month_added'] = data['date_added'].dt.month","2b5ec18f":"data_TV = data[data['type']=='TV Show']\ndata_Movies = data[data['type']=='Movie']","341429cb":"data_TV['Year_added'].value_counts()","09cc9475":"data_Movies['Year_added'].value_counts()","ea3400a8":"#data['listed_in'].unique()","82a669a8":"#data['country'].unique()","3450c7d9":"data1=data[data['release_year']>=2000]\ndata1m=data1[data1['type']!=\"TV Show\"]\ndata1t=data1[data1['type']!=\"Movie\"]\ndata2m=pd.DataFrame(data1m['release_year'].value_counts()).reset_index()\ndata2m.rename(columns={'release_year':'count'},inplace=True)\nmovies=pd.DataFrame(['Movie']*data2m.shape[0],columns=['type'])\ndata2m=pd.concat([data2m,movies],axis=1)\ndata2t=pd.DataFrame(data1t['release_year'].value_counts()).reset_index()\ndata2t.rename(columns={'release_year':'count'},inplace=True)\nTv_shows=pd.DataFrame(['TV Shows']*data2t.shape[0],columns=['type'])\ndata2t=pd.concat([data2t,Tv_shows],axis=1)\ndata_final=pd.concat([data2m,data2t],ignore_index=True)\ndata_final.rename(columns={'index':'Release year'},inplace=True)\nplt.figure(figsize=(16,6))\n\nplt.title(\"Bargraph comparing the number of Movies and Tv shows from the year 2000 to 2020 \")\n\nsns.barplot(x=data_final['Release year'],y=data_final['count'],hue=data_final['type'])","ff296891":"new_data = data[['type','listed_in','director','cast','country','rating','title','description']]\nnew_data.head()","99c0e253":"!pip install rake-nltk\nfrom rake_nltk import Rake\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import CountVectorizer","eae90cc0":"# REMOVE NaN VALUES AND EMPTY STRINGS:\nnew_data.dropna(inplace=True)\n\nblanks = []  # start with an empty list\n\ncol=['type','listed_in','director','cast','country','rating']\nfor i,col in new_data.iterrows():  # iterate over the DataFrame\n    if type(col)==str:            # avoid NaN values\n        if col.isspace():         # test 'review' for whitespace\n            blanks.append(i)     # add matching index numbers to the list\n\nnew_data.drop(blanks, inplace=True)","ee2b034b":"new_data.head(10)","da37be65":"new_data['Key_words\/desc'] = ''\n\nfor i,n in new_data.iterrows():\n    desc = n['description']\n    r = Rake()\n    r.extract_keywords_from_text(desc)\n    score_for_keyword = r.get_word_degrees()\n    n['Key_words\/desc']=list(score_for_keyword.keys())\n    \nnew_data.head(10)","9aea1be6":"new_data['cast'] = new_data['cast'].map(lambda x:x.split(',')[:3])\nnew_data['listed_in'] = new_data['listed_in'].map(lambda x:x.lower().split(','))\nnew_data['type'] = new_data['type'].map(lambda x:x.lower().split(','))\nnew_data['country'] = new_data['country'].map(lambda x:x.lower().split(','))\nnew_data['rating'] = new_data['rating'].map(lambda x:x.lower().split(','))\nnew_data['director'] = new_data['director'].map(lambda x:x.split(','))\n\nnew_data.drop('description',axis=1, inplace=True)\n\nnew_data.head(10)","776f27c6":"for i,n in new_data.iterrows():\n    n['cast'] = [x.lower().replace(' ','') for x in n['cast']]\n    n['type'] = [x.lower().replace(' ','') for x in n['type']]\n    n['rating'] = [x.lower().replace(' ','') for x in n['rating']]\n    n['country'] = [x.lower().replace(' ','') for x in n['country']]\n    n['director'] = ''.join(n['director']).lower()\n    \nnew_data = new_data.set_index('title')\nnew_data.head(10)","b535e40a":"new_data['bag_of_words'] = ''\n\ncols = new_data.columns\nfor i,j in new_data.iterrows():\n    words = ''\n    for k in cols:\n        if k!='director':\n            words = words + ' '.join(j[k])+ ' '\n        else:\n            words = words + j[k] + ' '\n            \n    j['bag_of_words'] = words","9146f365":"new_data.head(10)","1009735d":"new_data.bag_of_words[1]","e0387783":"clean_data = new_data.drop(columns = [cols for cols in new_data.columns if cols!='bag_of_words'])\nclean_data.head(10)","83f0d9e7":"data[data.country=='India'][:5]","554c4bc6":"clean_data.loc['Article 15']['bag_of_words']","e6affcf1":"### Count vectorizer","cb1843c7":"count = CountVectorizer()\nlol = count.fit_transform(clean_data['bag_of_words'])","847f9646":"#NLP\n\nsimilarity_dekhna_hai = cosine_similarity(lol,lol)\nsimilarity_dekhna_hai","87e162a0":"similarity_dekhna_hai.shape","0b136c1f":"listy = pd.Series(clean_data.index)","aebf3ae5":"listy[:5]","41f32b69":"def recommendations(Title, cosine_sim = similarity_dekhna_hai):\n    \n    recommended_movies = []\n    \n    # gettin the index of the movie that matches the title\n    idx = listy[listy == Title].index[0]\n\n    # creating a Series with the similarity scores in descending order\n    score_series = pd.Series(cosine_sim[idx]).sort_values(ascending = False)\n\n    # getting the indexes of the 10 most similar movies\n    top_10_indexes = list(score_series.iloc[1:11].index)\n    \n    # populating the list with the titles of the best 10 matching movies\n    for i in top_10_indexes:\n        recommended_movies.append(list(clean_data.index)[i])\n        \n    return recommended_movies","831162a7":"recommendations('Article 15')","bd92abe4":"recommendations('PK')","de8379ec":"recommendations('3 Idiots')","863396a2":"recommendations('War Horse')","868dda1a":"**Netflix Visualization and Content-Based Recommendation system.**\n\nNetflix is an application that keeps growing up the graph with its popularity, shows and content. This is an EDA or a story telling through its data along with a content-based recommendation system.\n\n![](https:\/\/media.foxbusiness.com\/BrightCove\/854081161001\/201910\/33\/854081161001_6093736038001_6093735925001-vs.jpg)","e156015d":"**Loading the dataset**"}}