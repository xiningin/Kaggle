{"cell_type":{"1a2454d2":"code","e85c08b6":"code","6b5d0833":"code","05d15940":"code","7875b145":"code","24ac2699":"code","2807fee2":"code","e7f348a6":"code","7e5e7764":"code","d1aa0095":"code","a5ec60ed":"code","b6a413eb":"code","9e0c292e":"code","0feb5f60":"code","9295b2b2":"code","f55394f4":"code","e7791a92":"code","a1b0fcb6":"markdown","125f8198":"markdown","2e2815de":"markdown","d4ab8020":"markdown","1bae5684":"markdown","8fb378ab":"markdown","98577519":"markdown","639878a1":"markdown","64792aab":"markdown","23087169":"markdown","be19a155":"markdown","7fb9db21":"markdown","77930af4":"markdown","9acd2370":"markdown","dce4c0ae":"markdown","1b721961":"markdown","bc2c303e":"markdown","354763af":"markdown","21eefff1":"markdown","7b15f3f0":"markdown"},"source":{"1a2454d2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport keras\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nprint(os.listdir(\"..\/input\"))\n%matplotlib inline\n","e85c08b6":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","6b5d0833":"train.head()","05d15940":"x_train = train.drop(columns=['label'])\ny_train = train['label']\ng = sns.countplot(y_train)","7875b145":"x_train = x_train \/ 255.0\ntest = test \/ 255.0\nx_train.describe()","24ac2699":"# Creating the network\n\nmodel = keras.models.Sequential() # Using the Sequentioal feed-forward model\nmodel.add(keras.layers.Dense(256, activation='relu', input_shape=(x_train.shape[1],))) # 1st hidden layer with 128 neurons\n#model.add(keras.layers.Dense(128, activation='relu')) # 2nd hidden layer\nmodel.add(keras.layers.Dropout(0.5)) # Randomly deactivates some neurons. (for 0.5, deactivates 50% neurons) Prevents overfitting.\nmodel.add(keras.layers.Dense(128, activation='relu')) # 3rd hidden layer\nmodel.add(keras.layers.Dense(10, activation='softmax')) # Output layer (using softmax activation function as we require categorical values)","2807fee2":"model.compile(optimizer='adam', loss='sparse_categorical_crossentropy',\n             metrics=['accuracy'])\n","e7f348a6":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, Y_train, Y_val = train_test_split(x_train, y_train, test_size = 0.1, random_state=np.random.seed(2))","7e5e7764":"x_train = X_train\ny_train = Y_train\nhistory = model.fit(x_train, y_train, epochs=30, validation_data = (X_val,Y_val)) # 30 epochs gave around 98.05% accuracy","d1aa0095":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","a5ec60ed":"from sklearn.metrics import confusion_matrix\nimport itertools\n\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(x_train)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = y_train\n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","b6a413eb":"predictions = model.predict([test])","9e0c292e":"predictions","0feb5f60":"val_loss, val_acc = model.evaluate(X_val, Y_val)\nprint(val_loss, val_acc)","9295b2b2":"results = np.argmax(predictions,axis = 1)  # Since each prediction is a 1-hot array\n\nresults = pd.Series(results,name=\"Label\")\n#results","f55394f4":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n#print(submission)","e7791a92":"submission.to_csv('submission.csv', index=False)","a1b0fcb6":"Confusion matrix is a great way of visualising the performance or rather the shortcomings of our model.\nHere we can see that the moedel is having problems classifying the digits 9,8,6. On further observation 9 is most confused with 7, 8 and 6 are most confused as 0. These mistakes are common and though can be improved upon by using a CNN, these mistakes can are also frequent by humans.","125f8198":"### Splitting in training and validation set","2e2815de":"I have used Keras to create the network. Keras is a high-level API which is capable of running on tensorflow, theano, CNTK etc backend.\nHere I have used tensorflow backend.\n","d4ab8020":"Classification of hand-written digits using a simple Neural Network Model on the MNIST dataset.","1bae5684":"> #### Creating the Network","8fb378ab":"### Confusion Matrix","98577519":"I will be using a sequential feed-forward model i.e the data flows from left to right, there are no feedback connections.<br>\nFor activation function, i will be using the Rectified Linear Unit (ReLU) for the hidden layers and SoftMax function for the output layer.\nThe softmax function creates a probability distribution from 0 to 1 hence makes it convinient to predict classes.<br>\nDropout is a regularization method, where a proportion of nodes in the layer are randomly ignored (setting their wieghts to zero) for each training sample. This drops randomly a propotion of the network and forces the network to learn features in a distributed way. This technique also improves generalization and reduces the overfitting.","639878a1":"## A simple Neural Net model","64792aab":"#### Normalisation\nNormalisation has a very big impact on the overall performance of the network. Non-normalised nets do not perform well.\nSince the pixel values range from 0-255, this forms a very large variation in pixel intensity values. By dividing it with 255, the values are normalised in the range 0-1.","23087169":"Observing the above plots, we can see that model is performing pretty well, although there is a slight problem of overfitting after 15 epochs.\nValidation loss increases after around 15 epochs.","be19a155":"Writing predictions to csv file","7fb9db21":"#### Checking validation loss and acc","77930af4":"#### Initiailising parameters","9acd2370":"* We have an accuracy of 98.21%","dce4c0ae":"### Loading data","1b721961":"Since the loss function used is *sparse_categorical_crossentropy* we need not convert our labels to one-hot encodings.","bc2c303e":"We have similar counts for each digit. The data is not skewed towards any single digit.","354763af":"### Training and Validation plots","21eefff1":"More accurate results can be achieved using:\n*  a CNN model for training\n*  Data-augmentation to enhance the quality of the dataset\n*  Using a modified and tuned optimiser instead of default 'adam'\n*  Using Annealers for tweaking learning rate during training.","7b15f3f0":"### Training"}}