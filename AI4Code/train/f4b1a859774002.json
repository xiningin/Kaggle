{"cell_type":{"81793aac":"code","f48a92e6":"code","00aad2f4":"code","bcf073a9":"code","440bb47e":"code","79aeda9a":"code","e74fa3a5":"code","e6dd25a5":"code","732bdd09":"code","550ed518":"code","620c52ca":"code","f7750dc2":"code","5f41a40e":"code","d453c87d":"code","2a9dba16":"code","654b38cf":"code","b15ad2fa":"code","3d9ece59":"code","427909a1":"code","47220b64":"code","915e69e0":"code","aa66ea90":"code","cbccfd54":"code","22a8f9fe":"markdown","b06989cc":"markdown","621858ac":"markdown","016a43e8":"markdown","b0746d80":"markdown","83bd45da":"markdown","3821b425":"markdown","ce78c9b2":"markdown","09de3466":"markdown"},"source":{"81793aac":"\nimport numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","f48a92e6":"zoo = pd.read_csv(\"\/kaggle\/input\/zoo-animal-classification\/zoo.csv\")\nzoo","00aad2f4":"zoo_class = pd.read_csv(\"\/kaggle\/input\/zoo-animal-classification\/class.csv\")\nzoo_class","bcf073a9":"labels = zoo_class['Class_Type'].to_list()\nlabels","440bb47e":"zoo[\"class_name\"] = zoo[\"class_type\"].apply(lambda x : labels[x-1])","79aeda9a":"zoo.head()","e74fa3a5":"zoo.describe()","e6dd25a5":"#zoo['legs'] = zoo['legs'] \/ zoo['legs'].max()","732bdd09":"zoo.head()","550ed518":"X = zoo.drop(['animal_name', 'class_type', 'class_name'], axis=1)\ny = zoo['class_type']","620c52ca":"from sklearn.decomposition import PCA\n\npca = PCA(2)\n\nX_reduced = pca.fit_transform(X)","f7750dc2":"import plotly.express as px\n\nfig = px.scatter(\n    zoo,\n    x=X_reduced[:,0], \n    y=X_reduced[:,1], \n    color=\"class_type\",\n    hover_name=\"class_name\"\n)\n\nfig.show()","5f41a40e":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\n\nrfc_model = RandomForestClassifier(max_depth=10, n_jobs=-1)\n\nrfc_model.fit(X_reduced, y)\n\nscores = cross_val_score(rfc_model, X_reduced, y, cv=4)\n\nfinal_score = rfc_model.score(X_reduced, y)\n\nprint(f\"Scores: {scores} \\nMean: {scores.mean()} \\nFinal Score: {final_score}\")","d453c87d":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_reduced, y, test_size=0.20, random_state=42)","2a9dba16":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(max_depth=10, random_state=0)\n\nmodel.fit(X_train, y_train)","654b38cf":"from sklearn.metrics import accuracy_score","b15ad2fa":"print(f\"(train) accuracy_score: {model.score(X_train, y_train)}\")","3d9ece59":"print(f\"(test) accuracy_score: {model.score(X_test, y_test)}\")","427909a1":"y_pred = model.predict(X_reduced)","47220b64":"from sklearn.metrics import confusion_matrix\n\ny_pred = model.predict(X_reduced)\n\ncm = confusion_matrix(y, y_pred)","915e69e0":"import plotly.express as px\n\nfig = px.imshow(\n    cm,\n    labels=dict(x=\"Predicted Label\", y=\"True Label\"),\n    x=labels,\n    y=labels\n)\nfig.update_xaxes(side=\"top\")\nfig.show()","aa66ea90":"from sklearn.metrics import classification_report\n\ny_pred = model.predict(X_reduced)\n\nprint(classification_report(y, y_pred, target_names=labels, zero_division=0))","cbccfd54":"pca_components = pd.DataFrame(pca.components_, columns=X.columns)\npca_components","22a8f9fe":"# Random Forest Classifier","b06989cc":"# PCA","621858ac":"# Features Selection","016a43e8":"# Data Analysis","b0746d80":"# Principal Components","83bd45da":"# Accuracy","3821b425":"I am going to ignore deeper analysis for now, because I want to focus on the PCA and the predictions.","ce78c9b2":"# Imports","09de3466":"# Data"}}