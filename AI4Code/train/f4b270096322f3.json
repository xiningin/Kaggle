{"cell_type":{"7fd2f2df":"code","f2151c9b":"code","4c4186d3":"code","64146f06":"code","05fd8bf9":"code","8199c61d":"code","56448a64":"code","40390d47":"code","7ca72f41":"code","13ee90b5":"code","41dcfa39":"code","5cdcd388":"code","c079e65a":"code","edb51424":"code","ee811b5b":"code","5028e70b":"code","767781e5":"code","06785c4e":"code","3d80cda8":"code","155ebdb0":"code","9caca06d":"code","5ac8453a":"code","3f0d8ee3":"code","a7586f3f":"markdown","fe891a3c":"markdown","fa43164a":"markdown","eba48925":"markdown"},"source":{"7fd2f2df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f2151c9b":"train_df = pd.read_csv('\/kaggle\/input\/facebook-recruiting-iv-human-or-bot\/train.csv.zip')\nbids_df = pd.read_csv('\/kaggle\/input\/facebook-recruiting-iv-human-or-bot\/bids.csv.zip')","4c4186d3":"train_df.head()","64146f06":"bids_df.head()","05fd8bf9":"train_df['outcome'].value_counts()","8199c61d":"train_df.info()","56448a64":"bids_df.info()","40390d47":"train_df.set_index('bidder_id')\nbids_df.set_index('bidder_id')\ndf = pd.merge(train_df, bids_df)\ndf.info()","7ca72f41":"df = df.drop('bid_id', axis=1)","13ee90b5":"mask = df['outcome'] == 1.0\ndf_bot = df[mask]","41dcfa39":"import seaborn as sns\n\nsns.countplot(x=\"country\", data=df_bot, \n             order=df.country.value_counts().iloc[:3].index)","5cdcd388":"sns.countplot(x=\"ip\", data=df_bot, \n             order=df.ip.value_counts().iloc[:3].index)","c079e65a":"sns.countplot(x=\"device\", data=df_bot, \n             order=df.device.value_counts().iloc[:3].index)","edb51424":"sns.countplot(x=\"url\", data=df_bot, \n             order=df.url.value_counts().iloc[:3].index)","ee811b5b":"sns.countplot(x=\"merchandise\", data=df_bot, \n             order=df.merchandise.value_counts().iloc[:3].index)","5028e70b":"target = 'outcome'\ncategorical_features = []\nnumeric_features = []\nfeatures = df.columns.values.tolist()\nfor col in features:\n    if df[col].dtype != 'object': \n        numeric_features.append(col)\n    else:\n        categorical_features.append(col)","767781e5":"from sklearn.preprocessing import LabelEncoder\n# Encoding categorical features\nfor col in categorical_features:\n    le = LabelEncoder()\n    le.fit(list(df[col].astype(str).values))\n    df[col] = le.transform(list(df[col].astype(str).values))","06785c4e":"y = df['outcome']\nX = df.drop('outcome', axis=1)","3d80cda8":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","155ebdb0":"from sklearn.ensemble import RandomForestClassifier\nforest = RandomForestClassifier(n_estimators=5, random_state=2)\nforest.fit(X_train, y_train)","9caca06d":"print(\"Accuracy on training set: {:.3f}\".format(forest.score(X_train, y_train))) \nprint(\"Accuracy on test set: {:.3f}\".format(forest.score(X_test, y_test)))","5ac8453a":"features = X.columns.values.tolist()\nimportances = forest.feature_importances_\nindices = np.argsort(importances)\n\nimport matplotlib.pyplot as plt\n\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","3f0d8ee3":"y_pred=forest.predict(X_test)\nfrom sklearn.metrics import confusion_matrix\n\ncm=confusion_matrix(y_test,y_pred)\n\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\nplt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\")\n","a7586f3f":"## Top 3 sources of bot","fe891a3c":"## Build Model","fa43164a":"## Merge two tables.","eba48925":"## Encode labels"}}