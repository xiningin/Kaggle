{"cell_type":{"ac993bd6":"code","ced29f8a":"code","f85d2232":"code","c284296d":"code","75bd5f8e":"code","56f1bef7":"code","f9b0c0be":"code","7b3de77c":"code","d33d4c48":"code","23986c1b":"code","4c95751b":"code","06cb7ee3":"code","15cf9580":"code","58ea3067":"code","ac3657a9":"code","3ffd7a26":"code","f0dbc809":"code","1d834975":"code","6a4e1dbc":"code","7c7f061f":"markdown"},"source":{"ac993bd6":"import os\nimport re\nimport glob\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pylab as plt\nimport seaborn as sns\n\nfrom tqdm import tqdm\nfrom itertools import cycle\n\nplt.style.use(\"ggplot\")\ncolor_pal = plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"]\ncolor_cycle = cycle(plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"])","ced29f8a":"PATH = \"..\/input\/feedback-prize-2021\"\n\ntrain_df = pd.read_csv(f'{PATH}\/train.csv')\nss_df = pd.read_csv(f'{PATH}\/sample_submission.csv')\n\ntrain_txt = glob.glob(f\"{PATH}\/train\/*.txt\")\ntest_txt = glob.glob(f\"{PATH}\/test\/*.txt\")\n\ntrain_df.shape, ss_df.shape, len(train_txt), len(test_txt)","f85d2232":"train_txt_dict = {}\nfor txt_path in train_txt:\n    with open(txt_path, 'r') as file: \n        data = file.read()\n    \n    txt_id = txt_path.split('\/')[-1].split('.')[0]\n    train_txt_dict[txt_id] = data\n\nlen(train_txt_dict)","c284296d":"train_df.head()","75bd5f8e":"def get_discourse_text(txt_id, start, end):\n    data = train_txt_dict[txt_id]\n    return data[int(start):int(end)]\n\ntrain_df[\"discourse_start_end_text\"] = train_df.apply(lambda x: get_discourse_text(x.id, x.discourse_start, x.discourse_end), axis=1)\ntrain_df.head()","56f1bef7":"tmp_df = train_df.query(\"discourse_text !=  discourse_start_end_text\")\ntmp_df.shape","f9b0c0be":"train_df['discourse_start_end_text'] = train_df['discourse_start_end_text'].apply(lambda x: x.strip())\ntrain_df['discourse_text'] = train_df['discourse_text'].apply(lambda x: x.strip())\n\ntemp_df = train_df.query(\"discourse_text !=  discourse_start_end_text\")\ntemp_df.shape","7b3de77c":"def get_compare_last_char(discourse_text, discourse_start_end_text):\n    if discourse_text != discourse_start_end_text:\n        discourse_start_end_text_last = discourse_start_end_text[:len(discourse_text)]\n        if discourse_text == discourse_start_end_text_last:\n            rm_car = discourse_start_end_text[len(discourse_text):]\n        else:\n            rm_car = np.nan\n    else:\n        rm_car = 1\n    \n    return rm_car\n\ntrain_df['last_char'] = train_df.apply(lambda x: get_compare_last_char(x.discourse_text, x.discourse_start_end_text), axis=1)","d33d4c48":"def remove_last_chars(discourse_text, discourse_start_end_text):\n    if discourse_text != discourse_start_end_text:\n        discourse_start_end_text_last = discourse_start_end_text[:len(discourse_text)]\n        if discourse_text == discourse_start_end_text_last:\n            rm_car = discourse_start_end_text[:len(discourse_text)]\n        else:\n            rm_car = discourse_start_end_text\n    else:\n        rm_car = discourse_start_end_text\n    \n    return rm_car\n\ntrain_df['discourse_start_end_text_last_char_rm'] = train_df.apply(lambda x: remove_last_chars(x.discourse_text, x.discourse_start_end_text), axis=1)","23986c1b":"tmp_df = train_df.query(\"discourse_text !=  discourse_start_end_text_last_char_rm\")\ntmp_df.shape","4c95751b":"train_df.loc[8916, 'discourse_text'] = train_df.iloc[8916]['discourse_text'].replace('florida','LOCATION_NAME')","06cb7ee3":"def find_txt(id, discourse_text, discourse_start, discourse_end):\n    text = train_txt_dict[id]\n    text = text.strip()\n    discourse_text = re.escape(discourse_text.strip())\n    try:\n        out = re.finditer(discourse_text, text)\n        start_diff, end_diff = np.inf, np.inf\n        start, end = None, None\n        if out is not None:\n            for obj in out:\n                obj_start = obj.start()\n                obj_end = obj.end()\n                obj_start_diff = abs(obj_start - discourse_start)\n                obj_end_diff = abs(obj_end - discourse_end)\n                if obj_start_diff < start_diff:\n                    start = obj_start\n                    end = obj_end\n                    start_diff = abs(obj_start_diff)\n                    end_diff = obj_end_diff\n                    \n        else:\n            start = -1\n            end = -1\n    except:\n        start = -1\n        end = -1\n\n    return start, end\n\ntrain_df[\"find_start_end\"] = train_df.apply(lambda x: find_txt(x.id, x.discourse_text, x.discourse_start, x.discourse_end), axis=1)","15cf9580":"train_df['new_start'] = train_df[\"find_start_end\"].apply(lambda x: x[0])\ntrain_df['new_end'] = train_df[\"find_start_end\"].apply(lambda x: x[1])","58ea3067":"train_df[\"start_diff\"] = np.abs(train_df['discourse_start'] - train_df['new_start'])\ntrain_df[\"end_diff\"] = np.abs(train_df['discourse_end'] - train_df['new_end'])","ac3657a9":"plt.figure(figsize=(25, 9))\nsns.ecdfplot(data=train_df.query(\"start_diff > 1\"), x=\"start_diff\")\nplt.show()","3ffd7a26":"# new prediction string\n\ndef calc_word_indices(id, discourse_start, discourse_end):\n\n    discourse_start = int(discourse_start)\n    discourse_end = int(discourse_end)\n\n    full_text = train_txt_dict[id]\n    start_index = len(full_text[:discourse_start].split())\n    token_len = len(full_text[discourse_start:discourse_end].split())\n    output = list(range(start_index, start_index + token_len))\n    if output[-1] >= len(full_text.split()):\n        output = list(range(start_index, start_index + token_len-1))\n\n    return output","f0dbc809":"train_df['new_predictionstring'] = train_df.apply(lambda x: calc_word_indices(x.id, x.new_start, x.new_end), axis=1)","1d834975":"train_df.head()","6a4e1dbc":"train_df.to_csv(\"new_predictionstring.csv\", index=False)","7c7f061f":"## New Prediction String"}}