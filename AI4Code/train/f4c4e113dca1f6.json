{"cell_type":{"c426f5d0":"code","505ac261":"code","a537526e":"code","9670f886":"code","5b66df37":"code","14921b81":"code","6743ee68":"code","a40a7e41":"code","631927ca":"code","fe8b6d66":"code","ddae5b4e":"code","5961d3ff":"markdown","80f99665":"markdown"},"source":{"c426f5d0":"import os\nimport numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.metrics import mean_squared_error","505ac261":"df = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv')\nprint(df.shape)\ndf.head(3)","a537526e":"# Thanks to Akshay Paliwal for this part\ndef weird_division(n, d):\n    return n \/ d if d else 0\n\ndf['CPM'] = df.apply(lambda x: weird_division(((x['total_revenue']*100)),x['measurable_impressions'])*1000 , axis=1)","9670f886":"idx_train = pd.to_datetime(df['date']) <= pd.to_datetime('2019-06-21')\nidx_test  = ~idx_train\n\nX_train = df[idx_train]\nX_test  = df[idx_test]","5b66df37":"cols_to_drop = [\n    'CPM',  # target\n    'total_revenue', 'measurable_impressions',  # target\n    'date',  # for train-test split only\n    'order_id' , 'line_item_type_id',  # mysterious features\n    'integration_type_id' , 'revenue_share_percent',  # 1 unique value\n]\n\ny_train = X_train['CPM']\nX_train = X_train.drop(columns=cols_to_drop)\n\ny_test = X_test['CPM']\nX_test = X_test.drop(columns=cols_to_drop)","14921b81":"# cleaning negative and >95 percentile values (maybe should be done before splitting)\ntest_good_vals = (y_test >= 0) & (y_test < y_test.quantile(0.95))\ntrain_good_vals = (y_train >= 0) & (y_train < y_train.quantile(0.95))\n\nX_train = X_train[train_good_vals]\nX_test  = X_test[test_good_vals]\ny_test = y_test[test_good_vals]\ny_train = y_train[train_good_vals]\n\nprint(X_train.shape, X_test.shape)\nX_train.head(3)","6743ee68":"print('check for number of unique values')\nX_train.nunique()","a40a7e41":"# see the categorical features - use catboost (or LGBM)\nfrom lightgbm import LGBMRegressor","631927ca":"# fit-predict\nlgbm = LGBMRegressor(n_estimators=400)\nlgbm.fit(X_train, y_train, categorical_feature=list(range(X_train.shape[1])))\n\npreds = lgbm.predict(X_test)\nprint(f'MSE = {mean_squared_error(y_test, preds):.2f}')","fe8b6d66":"X_train = df[idx_train]\nX_test  = df[idx_test]\n\ncols_to_drop = [\n    'CPM',  # target\n    'total_revenue', 'measurable_impressions',  # target\n    'date',  # for train-test split only\n    # 'order_id' , 'line_item_type_id',  # mysterious features\n    'integration_type_id' , 'revenue_share_percent',  # 1 unique value\n]\n\ny_train = X_train['CPM']\nX_train = X_train.drop(columns=cols_to_drop)\n\ny_test = X_test['CPM']\nX_test = X_test.drop(columns=cols_to_drop)\n\ntest_good_vals = (y_test >= 0) & (y_test < y_test.quantile(0.95))\ntrain_good_vals = (y_train >= 0) & (y_train < y_train.quantile(0.95))\n\nX_train = X_train[train_good_vals]\nX_test  = X_test[test_good_vals]\ny_test = y_test[test_good_vals]\ny_train = y_train[train_good_vals]\n\nprint(X_train.shape, X_test.shape)\nX_train.head(3)","ddae5b4e":"lgbm = LGBMRegressor(n_estimators=400)\nlgbm.fit(X_train, y_train, categorical_feature=list(range(X_train.shape[1])))\n\npreds = lgbm.predict(X_test)\nprint(f'MSE = {mean_squared_error(y_test, preds):.2f}')","5961d3ff":"### 2. `order_id` and `line_item_type_id` are used.","80f99665":"### 1. No `order_id` and `line_item_type_id`. "}}