{"cell_type":{"56af446c":"code","4d6d18ea":"code","802ecef4":"code","f2198867":"code","85eee3a3":"code","be8943a0":"code","a9f7655c":"code","1f13bd97":"code","44ffd40b":"code","e1ef351c":"code","a70dc1b2":"code","39c9912b":"code","7e9fa7dd":"code","492fb61e":"code","f3f99a89":"code","981e7e22":"code","dc46e125":"code","d5aa3f21":"code","4e15f1ae":"code","da5333f4":"code","0e82a9f4":"code","8a1e792b":"code","7970d46c":"code","898566a3":"code","b3f44b87":"code","b0f8c8f4":"code","29527024":"code","32e059d6":"code","5fc3293d":"code","ebd915a4":"code","385e6a3c":"code","c6be6c09":"code","5e061679":"code","fa654a3d":"code","427c04f2":"code","f04173f3":"code","3f5f09fc":"code","89cb18d9":"code","bd5772bd":"markdown","24ce69dc":"markdown","a4d65762":"markdown","510b981d":"markdown","ef2591ce":"markdown","b13fdbee":"markdown","ace45750":"markdown","0f91ea1b":"markdown","7d54875b":"markdown","9f811137":"markdown","fb53963f":"markdown","66ab43ca":"markdown","2710af50":"markdown","f010f1e9":"markdown","c117435c":"markdown","f542b13e":"markdown","31433f98":"markdown","b5be640c":"markdown","ecb15e2e":"markdown","e417157f":"markdown","3405e230":"markdown","d9435a70":"markdown","13851872":"markdown","e7bd20e9":"markdown","a366e3ef":"markdown"},"source":{"56af446c":"import os\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.datasets import load_files\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression","4d6d18ea":"import tarfile\nfrom io import BytesIO\n\nimport requests\n\nurl = \"http:\/\/ai.stanford.edu\/~amaas\/data\/sentiment\/aclImdb_v1.tar.gz\"\n\n\ndef load_imdb_dataset(extract_path=\"..\/..\/data\", overwrite=False):\n    # check if existed already\n    if (\n        os.path.isfile(os.path.join(extract_path, \"aclImdb\", \"README\"))\n        and not overwrite\n    ):\n        print(\"IMDB dataset is already in place.\")\n        return\n\n    print(\"Downloading the dataset from:  \", url)\n    response = requests.get(url)\n\n    tar = tarfile.open(mode=\"r:gz\", fileobj=BytesIO(response.content))\n\n    data = tar.extractall(extract_path)\n\n\nload_imdb_dataset()","802ecef4":"# change if you have it in alternative location\nPATH_TO_IMDB = \"..\/..\/data\/aclImdb\"\n\nreviews_train = load_files(\n    os.path.join(PATH_TO_IMDB, \"train\"), categories=[\"pos\", \"neg\"]\n)\ntext_train, y_train = reviews_train.data, reviews_train.target\n\nreviews_test = load_files(os.path.join(PATH_TO_IMDB, \"test\"), categories=[\"pos\", \"neg\"])\ntext_test, y_test = reviews_test.data, reviews_test.target","f2198867":"# # Alternatively, load data from previously pickled objects.\n# import pickle\n# with open('..\/..\/data\/imdb_text_train.pkl', 'rb') as f:\n#     text_train = pickle.load(f)\n# with open('..\/..\/data\/imdb_text_test.pkl', 'rb') as f:\n#     text_test = pickle.load(f)\n# with open('..\/..\/data\/imdb_target_train.pkl', 'rb') as f:\n#     y_train = pickle.load(f)\n# with open('..\/..\/data\/imdb_target_test.pkl', 'rb') as f:\n#     y_test = pickle.load(f)","85eee3a3":"print(\"Number of documents in training data: %d\" % len(text_train))\nprint(np.bincount(y_train))\nprint(\"Number of documents in test data: %d\" % len(text_test))\nprint(np.bincount(y_test))","be8943a0":"print(text_train[1])","a9f7655c":"y_train[1]  # bad review","1f13bd97":"text_train[2]","44ffd40b":"y_train[2]  # good review","e1ef351c":"# import pickle\n# with open('..\/..\/data\/imdb_text_train.pkl', 'wb') as f:\n#     pickle.dump(text_train, f)\n# with open('..\/..\/data\/imdb_text_test.pkl', 'wb') as f:\n#     pickle.dump(text_test, f)\n# with open('..\/..\/data\/imdb_target_train.pkl', 'wb') as f:\n#     pickle.dump(y_train, f)\n# with open('..\/..\/data\/imdb_target_test.pkl', 'wb') as f:\n#     pickle.dump(y_test, f)","a70dc1b2":"cv = CountVectorizer()\ncv.fit(text_train)\n\nlen(cv.vocabulary_)","39c9912b":"print(cv.get_feature_names()[:50])\nprint(cv.get_feature_names()[50000:50050])","7e9fa7dd":"X_train = cv.transform(text_train)\nX_train","492fb61e":"print(text_train[19726])","f3f99a89":"X_train[19726].nonzero()[1]","981e7e22":"X_train[19726].nonzero()","dc46e125":"X_test = cv.transform(text_test)","d5aa3f21":"%%time\nlogit = LogisticRegression(solver=\"lbfgs\", n_jobs=-1, random_state=7)\nlogit.fit(X_train, y_train)","4e15f1ae":"round(logit.score(X_train, y_train), 3), round(logit.score(X_test, y_test), 3),","da5333f4":"def visualize_coefficients(classifier, feature_names, n_top_features=25):\n    # get coefficients with large absolute values\n    coef = classifier.coef_.ravel()\n    positive_coefficients = np.argsort(coef)[-n_top_features:]\n    negative_coefficients = np.argsort(coef)[:n_top_features]\n    interesting_coefficients = np.hstack([negative_coefficients, positive_coefficients])\n    # plot them\n    plt.figure(figsize=(15, 5))\n    colors = [\"red\" if c < 0 else \"blue\" for c in coef[interesting_coefficients]]\n    plt.bar(np.arange(2 * n_top_features), coef[interesting_coefficients], color=colors)\n    feature_names = np.array(feature_names)\n    plt.xticks(\n        np.arange(1, 1 + 2 * n_top_features),\n        feature_names[interesting_coefficients],\n        rotation=60,\n        ha=\"right\",\n    );","0e82a9f4":"def plot_grid_scores(grid, param_name):\n    plt.plot(\n        grid.param_grid[param_name],\n        grid.cv_results_[\"mean_train_score\"],\n        color=\"green\",\n        label=\"train\",\n    )\n    plt.plot(\n        grid.param_grid[param_name],\n        grid.cv_results_[\"mean_test_score\"],\n        color=\"red\",\n        label=\"test\",\n    )\n    plt.legend();","8a1e792b":"visualize_coefficients(logit, cv.get_feature_names())","7970d46c":"%%time\nfrom sklearn.pipeline import make_pipeline\n\ntext_pipe_logit = make_pipeline(\n    CountVectorizer(),\n    # for some reason n_jobs > 1 won't work\n    # with GridSearchCV's n_jobs > 1\n    LogisticRegression(solver=\"lbfgs\", n_jobs=1, random_state=7),\n)\n\ntext_pipe_logit.fit(text_train, y_train)\nprint(text_pipe_logit.score(text_test, y_test))","898566a3":"%%time\nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid_logit = {\"logisticregression__C\": np.logspace(-5, 0, 6)}\ngrid_logit = GridSearchCV(\n    text_pipe_logit, param_grid_logit, return_train_score=True, cv=3, n_jobs=-1\n)\n\ngrid_logit.fit(text_train, y_train)","b3f44b87":"grid_logit.best_params_, grid_logit.best_score_","b0f8c8f4":"plot_grid_scores(grid_logit, \"logisticregression__C\")","29527024":"grid_logit.score(text_test, y_test)","32e059d6":"from sklearn.ensemble import RandomForestClassifier","5fc3293d":"forest = RandomForestClassifier(n_estimators=200, n_jobs=-1, random_state=17)","ebd915a4":"%%time\nforest.fit(X_train, y_train)","385e6a3c":"round(forest.score(X_test, y_test), 3)","c6be6c09":"# creating dataset\nrng = np.random.RandomState(0)\nX = rng.randn(200, 2)\ny = np.logical_xor(X[:, 0] > 0, X[:, 1] > 0)","5e061679":"plt.scatter(X[:, 0], X[:, 1], s=30, c=y, cmap=plt.cm.Paired);","fa654a3d":"def plot_boundary(clf, X, y, plot_title):\n    xx, yy = np.meshgrid(np.linspace(-3, 3, 50), np.linspace(-3, 3, 50))\n    clf.fit(X, y)\n    # plot the decision function for each datapoint on the grid\n    Z = clf.predict_proba(np.vstack((xx.ravel(), yy.ravel())).T)[:, 1]\n    Z = Z.reshape(xx.shape)\n\n    image = plt.imshow(\n        Z,\n        interpolation=\"nearest\",\n        extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n        aspect=\"auto\",\n        origin=\"lower\",\n        cmap=plt.cm.PuOr_r,\n    )\n    contours = plt.contour(xx, yy, Z, levels=[0], linewidths=2, linetypes=\"--\")\n    plt.scatter(X[:, 0], X[:, 1], s=30, c=y, cmap=plt.cm.Paired)\n    plt.xticks(())\n    plt.yticks(())\n    plt.xlabel(r\"$x_1$\")\n    plt.ylabel(r\"$x_2$\")\n    plt.axis([-3, 3, -3, 3])\n    plt.colorbar(image)\n    plt.title(plot_title, fontsize=12);","427c04f2":"plot_boundary(\n    LogisticRegression(solver=\"lbfgs\"), X, y, \"Logistic Regression, XOR problem\"\n)","f04173f3":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import PolynomialFeatures","3f5f09fc":"logit_pipe = Pipeline(\n    [\n        (\"poly\", PolynomialFeatures(degree=2)),\n        (\"logit\", LogisticRegression(solver=\"lbfgs\")),\n    ]\n)","89cb18d9":"plot_boundary(logit_pipe, X, y, \"Logistic Regression + quadratic features. XOR problem\")","bd5772bd":"## 2. A Simple Count of Words","24ce69dc":"## 3. XOR-Problem\nLet's now consider an example where linear models are worse.\n\nLinear classification methods still define a very simple separating surface - a hyperplane. The most famous toy example of where classes cannot be divided by a hyperplane (or line) with no errors is \"the XOR problem\".\n\nXOR is the \"exclusive OR\", a Boolean function with the following truth table:\n\n\n<img src=https:\/\/habrastorage.org\/webt\/-f\/l_\/i9\/-fl_i9tktb9chjfmv7pzhqdyeea.png>\n\nXOR is the name given to a simple binary classification problem in which the classes are presented as diagonally extended intersecting point clouds.","a4d65762":"**The coefficients of the model can be beautifully displayed.**","510b981d":"<center>\n<img src=\"https:\/\/habrastorage.org\/webt\/ia\/m9\/zk\/iam9zkyzqebnf_okxipihkgjwnw.jpeg\">\n    \n## [mlcourse.ai](https:\/\/mlcourse.ai) \u2013 Open Machine Learning Course \n\nAuthor: [Yury Kashnitsky](https:\/\/yorko.github.io). Translated and edited by [Christina Butsko](https:\/\/www.linkedin.com\/in\/christinabutsko\/), [Nerses Bagiyan](https:\/\/www.linkedin.com\/in\/nersesbagiyan\/), [Yulia Klimushina](https:\/\/www.linkedin.com\/in\/yuliya-klimushina-7168a9139), and [Yuanyuan Pao](https:\/\/www.linkedin.com\/in\/yuanyuanpao\/). This material is subject to the terms and conditions of the [Creative Commons CC BY-NC-SA 4.0](https:\/\/creativecommons.org\/licenses\/by-nc-sa\/4.0\/) license. Free use is permitted for any non-commercial purpose.\n\n*You can also check out the latest version in the [course repository](https:\/\/github.com\/Yorko\/mlcourse.ai) and video lectures: [theoretical part](https:\/\/www.youtube.com\/watch?v=l3jiw-N544s), [practical part](https:\/\/www.youtube.com\/watch?v=7o0SWgY89i8).*","ef2591ce":"**To make our model better, we can optimize the regularization coefficient for the `Logistic Regression`. We'll use `sklearn.pipeline` because `CountVectorizer` should only be applied to the training data (so as to not \"peek\" into the test set and not count word frequencies there). In this case, `pipeline` determines the correct sequence of actions: apply `CountVectorizer`, then train `Logistic Regression`.**","b13fdbee":"**Here are a few examples of the reviews.**","ace45750":"**Secondly, we are encoding the sentences from the training set texts with the indices of incoming words. We'll use the sparse format.**","0f91ea1b":"For the validation set:","7d54875b":"Obviously, one cannot draw a single straight line to separate one class from another without errors. Therefore, logistic regression performs poorly with this task.","9f811137":"Here, logistic regression has still produced a hyperplane but in a 6-dimensional feature space $1, x_1, x_2, x_1^2, x_1x_2$ and $x_2^2$. When we project to the original feature space, $x_1, x_2$, the boundary is nonlinear.\n\nIn practice, polynomial features do help, but it is computationally inefficient to build them explicitly. SVM with the kernel trick works much faster. In this approach, only the distance between the objects (defined by the kernel function) in a high dimensional space is computed, and there is no need to produce a combinatorially large number of features. ","fb53963f":"**Let's print best $C$ and cv-score using this hyperparameter:**","66ab43ca":"**To get started, we automatically download the dataset from [here](http:\/\/ai.stanford.edu\/~amaas\/data\/sentiment\/aclImdb_v1.tar.gz) and unarchive it along with the rest of datasets in the data folder. The dataset is briefly described [here](http:\/\/ai.stanford.edu\/~amaas\/data\/sentiment\/). There are 12.5k of good and bad reviews in the test and training sets.**","2710af50":"**First, we will create a dictionary of all the words using CountVectorizer**","f010f1e9":"**The next step is to train Logistic Regression.**","c117435c":"## 5. Useful resources\n- Medium [\"story\"](https:\/\/medium.com\/open-machine-learning-course\/open-machine-learning-course-topic-4-linear-classification-and-regression-44a41b9b5220) based on this notebook\n- Main course [site](https:\/\/mlcourse.ai), [course repo](https:\/\/github.com\/Yorko\/mlcourse.ai), and YouTube [channel](https:\/\/www.youtube.com\/watch?v=QKTuw4PNOsU&list=PLVlY_7IJCMJeRfZ68eVfEcu-UcN9BbwiX)\n- Course materials as a [Kaggle Dataset](https:\/\/www.kaggle.com\/kashnitsky\/mlcourse)\n- If you read Russian: an [article](https:\/\/habrahabr.ru\/company\/ods\/blog\/323890\/) on Habr.com with ~ the same material. And a [lecture](https:\/\/youtu.be\/oTXGQ-_oqvI) on YouTube\n- A nice and concise overview of linear models is given in the book [\"Deep Learning\"](http:\/\/www.deeplearningbook.org) (I. Goodfellow, Y. Bengio, and A. Courville).\n- Linear models are covered practically in every ML book. We recommend \"Pattern Recognition and Machine Learning\" (C. Bishop) and \"Machine Learning: A Probabilistic Perspective\" (K. Murphy).\n- If you prefer a thorough overview of linear model from a statistician's viewpoint, then look at \"The elements of statistical learning\" (T. Hastie, R. Tibshirani, and J. Friedman).\n- The book \"Machine Learning in Action\" (P. Harrington) will walk you through implementations of classic ML algorithms in pure Python.\n- [Scikit-learn](http:\/\/scikit-learn.org\/stable\/documentation.html) library. These guys work hard on writing really clear documentation.\n- Scipy 2017 [scikit-learn tutorial](https:\/\/github.com\/amueller\/scipy-2017-sklearn) by Alex Gramfort and Andreas Mueller.\n- One more [ML course](https:\/\/github.com\/diefimov\/MTH594_MachineLearning) with very good materials.\n- [Implementations](https:\/\/github.com\/rushter\/MLAlgorithms) of many ML algorithms. Search for linear regression and logistic regression.\n\n## Support course creators\n<br>\n<center>\nYou can make a monthly (Patreon) or one-time (Ko-Fi) donation \u2193\n\n<br>\n<br>\n\n<a href=\"https:\/\/www.patreon.com\/ods_mlcourse\">\n<img src=\"https:\/\/habrastorage.org\/webt\/zc\/11\/0y\/zc110yh0u3kgnlmay1gwbekk0ys.png\" width=20% \/>\n\n<br>\n\n<a href=\"https:\/\/ko-fi.com\/mlcourse_ai\">\n<img src=\"https:\/\/habrastorage.org\/webt\/8r\/ml\/xf\/8rmlxfpdzukegpxa62cxlfvgkqe.png\" width=20% \/>\n    \n<\/center>","f542b13e":"Now for a little practice! We want to solve the problem of binary classification of IMDB movie reviews. We have a training set with marked reviews, 12500 reviews marked as good, another 12500 bad. Here, it's not easy to get started with machine learning right away because we don't have the matrix $X$; we need to prepare it. We will use a simple approach: bag of words model. Features of the review will be represented by indicators of the presence of each word from the whole corpus in this review. The corpus is the set of all user reviews. The idea is illustrated by a picture\n\n<img src=https:\/\/habrastorage.org\/webt\/r7\/sq\/my\/r7sqmyj1nmqmzltaftt40zi7-gw.png width=50%>","31433f98":"**If you look at the examples of \"words\" (let's call them tokens), you can see that we have omitted many of the important steps in text processing (automatic text processing can itself be a completely separate series of articles).**","b5be640c":"**Let's see how our transformation worked**","ecb15e2e":"**Let's look at accuracy on the both the training and the test sets.**","e417157f":"**Third, we will apply the same operations to the test set**","3405e230":"# <center>Topic 4. Linear Classification and Regression\n## <center> Part 4. Where Logistic Regression Is Good and Where It's Not\n    \n        \n## Article outline\n1. [Analysis of IMDB movie reviews](#1.-Analysis-of-IMDB-movie-reviews)\n2. [A Simple Count of Words](#2.-A-Simple-Count-of-Words)\n3. [XOR-Problem](#3.-XOR-Problem)\n4. [Assignments](#4.-Assignments)\n5. [Useful resources](#5.-Useful-resources)","d9435a70":"## 4. Assignments\n### Demo-version\nTo practice with linear models, you can complete [this demo assignment](https:\/\/www.kaggle.com\/kashnitsky\/a4-demo-sarcasm-detection-with-logit) where you'll build a sarcasm detection model. The assignment is just for you to practice, and goes with [solution](https:\/\/www.kaggle.com\/kashnitsky\/a4-demo-sarcasm-detection-with-logit-solution).\n\n### Bonus version\nYou can also choose a [\"Bonus Assignments\" tier](https:\/\/www.patreon.com\/ods_mlcourse) (details are outlined on the [mlcourse.ai](https:\/\/mlcourse.ai\/) main page) and get a non-demo version of the assignment where you'll guided through working with sparse data, feature engineering, model validation, and the process of competing on Kaggle. The task will be to beat baselines in a [Kaggle competition](https:\/\/www.kaggle.com\/c\/catch-me-if-you-can-intruder-detection-through-webpage-session-tracking2). That's a very useful assignment for anyone starting to practice with Machine Learning, regardless of the desire to compete on Kaggle.","13851872":"**Now let's do the same with random forest. We see that, with logistic regression, we achieve better accuracy with less effort.**","e7bd20e9":"But if one were to give polynomial features as an input (here, up to 2 degrees), then the problem is solved.","a366e3ef":"## 1. Analysis of IMDB movie reviews"}}