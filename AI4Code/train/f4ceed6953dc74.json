{"cell_type":{"0d3f7059":"code","0faedeae":"code","f6378ea2":"code","a20ca24b":"code","1f89e2a4":"code","0f3d1921":"code","30b59b9a":"code","f102b9bd":"code","04c23bae":"code","687c8ad5":"code","83e47b11":"code","a29633e9":"code","162d04c1":"code","c8c6c503":"code","724fbba8":"code","ad0d2fd6":"code","47f5d6e3":"code","d1059bdb":"code","63723b96":"code","34ecfae1":"code","9860619b":"code","c00ce91a":"code","f815c163":"code","1947aa3c":"code","80ce25b8":"code","33e0d4e7":"code","642df385":"code","656526f6":"code","c420e981":"code","12514b13":"code","adee2c8d":"code","27b44e1b":"code","3e95e3ed":"code","693a91f4":"code","8995ffee":"code","19aa2793":"code","490e9f5c":"code","b9f1a99f":"markdown","299b59f6":"markdown","851f9edc":"markdown","4c03c7c6":"markdown","9c8bf87c":"markdown","7affe717":"markdown","47f9faec":"markdown","527b0b09":"markdown","aced1fa5":"markdown","02ec1492":"markdown","5c627453":"markdown","b28a3994":"markdown","ab67156f":"markdown","dc6cb755":"markdown"},"source":{"0d3f7059":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib\n\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\nfrom scipy.stats.stats import pearsonr\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0faedeae":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","f6378ea2":"train.head()","a20ca24b":"all_data = pd.concat((train.loc[:,'MSSubClass':'SaleCondition'],\n                      test.loc[:,'MSSubClass':'SaleCondition']))","1f89e2a4":"prices = pd.DataFrame({\"price\":train[\"SalePrice\"], \"log(price + 1)\":np.log1p(train[\"SalePrice\"])})\nprices.hist()","0f3d1921":"#log transform the target:\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#log transform skewed numeric features:\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\nskewed_feats = train[numeric_feats].apply(lambda x: skew(x.dropna())) #compute skewness\nskewed_feats = skewed_feats[skewed_feats > 0.75]\nskewed_feats = skewed_feats.index\n\nall_data[skewed_feats] = np.log1p(all_data[skewed_feats])","30b59b9a":"all_data = pd.get_dummies(all_data)","f102b9bd":"#filling NA's with the mean of the column:\nall_data = all_data.fillna(all_data.mean())","04c23bae":"#creating matrices for sklearn:\nX_train = all_data[:train.shape[0]]\nX_test = all_data[train.shape[0]:]\ny = train.SalePrice","687c8ad5":"from sklearn.linear_model import Ridge, RidgeCV, ElasticNet, LassoCV, LassoLarsCV\nfrom sklearn.model_selection import cross_val_score\n\ndef rmse_cv(model):\n    rmse= np.sqrt(-cross_val_score(model, X_train, y, scoring=\"neg_mean_squared_error\", cv = 5))\n    return(rmse)","83e47b11":"model_ridge = Ridge()","a29633e9":"alphas = [0.05, 0.1, 0.3, 1, 3, 5, 10, 15, 30, 50, 75]\ncv_ridge = [rmse_cv(Ridge(alpha = alpha)).mean() \n            for alpha in alphas]","162d04c1":"cv_ridge = pd.Series(cv_ridge, index = alphas)\nplt.xlabel(\"alpha\")\nplt.ylabel(\"rmse\")\ncv_ridge.plot()","c8c6c503":"cv_ridge.min()","724fbba8":"model_lasso = LassoCV(alphas = [1, 0.1, 0.001, 0.0005]).fit(X_train, y)","ad0d2fd6":"rmse_cv(model_lasso).mean()","47f5d6e3":"coef = pd.Series(model_lasso.coef_, index = X_train.columns)","d1059bdb":"imp_coef = pd.concat([coef.sort_values().head(10),\n                     coef.sort_values().tail(10)])","63723b96":"matplotlib.rcParams['figure.figsize'] = (8.0, 10.0)\nimp_coef.plot(kind = \"barh\")\nplt.title(\"Coefficients in the Lasso Model\")","34ecfae1":"#let's look at the residuals as well:\nmatplotlib.rcParams['figure.figsize'] = (6.0, 6.0)\n\npreds = pd.DataFrame({\"preds\":model_lasso.predict(X_train), \"true\":y})\npreds[\"residuals\"] = preds[\"true\"] - preds[\"preds\"]\npreds.plot(x = \"preds\", y = \"residuals\",kind = \"scatter\")","9860619b":"import xgboost as xgb","c00ce91a":"\ndtrain = xgb.DMatrix(X_train, label = y)\ndtest = xgb.DMatrix(X_test)\n\nparams = {\"max_depth\":2, \"eta\":0.1}\nmodel = xgb.cv(params, dtrain,  num_boost_round=500, early_stopping_rounds=100)","f815c163":"model.loc[30:,[\"test-rmse-mean\", \"train-rmse-mean\"]].plot()","1947aa3c":"model_xgb = xgb.XGBRegressor(n_estimators=360, max_depth=2, learning_rate=0.1) #the params were tuned using xgb.cv\nmodel_xgb.fit(X_train, y)","80ce25b8":"xgb_preds = np.expm1(model_xgb.predict(X_test))\nlasso_preds = np.expm1(model_lasso.predict(X_test))","33e0d4e7":"predictions = pd.DataFrame({\"xgb\":xgb_preds, \"lasso\":lasso_preds})\npredictions.plot(x = \"xgb\", y = \"lasso\", kind = \"scatter\")","642df385":"preds = 0.7*lasso_preds + 0.3*xgb_preds","656526f6":"solution = pd.DataFrame({\"id\":test.Id, \"SalePrice\":preds})\nsolution.to_csv(\"ridge_sol.csv\", index = False)","c420e981":"from keras.layers import Dense\nfrom keras.models import Sequential\nfrom keras.regularizers import l1\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","12514b13":"X_train = StandardScaler().fit_transform(X_train)","adee2c8d":"X_tr, X_val, y_tr, y_val = train_test_split(X_train, y, random_state = 3)","27b44e1b":"X_tr.shape","3e95e3ed":"X_tr","693a91f4":"model = Sequential()\nmodel.add(Dense(1, input_dim = X_train.shape[1], W_regularizer=l1(0.001)))\n\nmodel.compile(loss = \"mse\", optimizer = \"adam\")","8995ffee":"model.summary()","19aa2793":"hist = model.fit(X_tr, y_tr, validation_data = (X_val, y_val))","490e9f5c":"pd.Series(model.predict(X_val)[:,0]).hist()","b9f1a99f":"# xgboost model:","299b59f6":"# MLP:","851f9edc":"Creating the dataframe","4c03c7c6":"Splitting all_data to X_train and X_test","9c8bf87c":"ploting log(SalePrice+1) vs Saleprice Histogram","7affe717":"## Lasso and Rigid","47f9faec":"### One Hot encoding","527b0b09":"# Data Preparation","aced1fa5":"Filling NaN with avg","02ec1492":"# Importing the required libraries","5c627453":"log(SalePrice) plot is more normal than SalePrice so transforming all the numeric feature to the log(feature+1) ","b28a3994":"![image.png](attachment:image.png)","ab67156f":"Concating the test and train data for preprocessing except the target feature i.e. SalePrice ","dc6cb755":"# Models"}}