{"cell_type":{"3c8da896":"code","74d15af4":"code","a91ee936":"code","42a427f8":"code","79014c7e":"code","62b7a7fb":"code","a7530296":"code","b298af80":"code","fa756de3":"code","5e84c0d8":"code","1c25286e":"code","a672f880":"code","d2263c51":"code","95ac8db1":"code","c86e94ec":"code","14b225e0":"code","64ee8641":"code","e4c9bfb5":"code","49fe81d4":"markdown","3da65925":"markdown","e6260d37":"markdown"},"source":{"3c8da896":"import numpy as np \nimport pandas as pd\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom catboost import CatBoostRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error as mse\n\n\nRANDOM_SEED = 42\n# CatBoost parametres\nITERATIONS = 500\nLR         = 0.25\nDEPTH = 6","74d15af4":"df = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv')","a91ee936":"# check missing values\ndf.isna().sum()","42a427f8":"# check duplicated values\ndf.duplicated().sum()","79014c7e":"# delete duplicated values\ndf = df.drop_duplicates().reset_index(drop=True)","62b7a7fb":"df.date = pd.to_datetime(df.date)\ndf.date.describe()","a7530296":"df['sample'] = df.date.apply(lambda x: 1 if x.day < 22 else 0)  # \u0442\u0430\u043a \u043a\u0430\u043a \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0441 1 \u043f\u043e 30 \u0438\u044e\u043d\u044f\n\ndf.sample(2)","b298af80":"def cpm(revenue_of_the_publisher, revenue_share_percentage, measurable_impressions):\n    if measurable_impressions == 0:\n        return 0\n    else:\n        return ((revenue_of_the_publisher * 100 \/ revenue_share_percentage) \/ measurable_impressions) * 1000\n\ndf['CPM'] = df.apply(lambda x: cpm(x['total_revenue'], x['revenue_share_percent'], x['measurable_impressions']), axis=1)\n\ndf['CPM'].describe()","fa756de3":"# \u0438\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f\u0432\u043d\u043e \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u043b\u0438 \u0432 \u0444\u043e\u0440\u043c\u0443\u043b\u0435 \u043f\u0440\u0438 \u0440\u0430\u0441\u0447\u0435\u0442\u0435 CPM\ndf.drop(['total_revenue', 'revenue_share_percent', 'measurable_impressions'], axis=1, inplace=True)","5e84c0d8":"# \u043e\u0431\u0440\u0430\u0442\u0438\u043c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a integration_type_id \u0438\u043c\u0435\u0435\u0442 \u0432\u0441\u0435\u0433\u043e 1 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\ndf.integration_type_id.nunique()","1c25286e":"# \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u0436\u0435\u043c \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u043d\u0435\u0433\u043e\ndf.drop(['integration_type_id'], axis=1, inplace=True)","a672f880":"# \u0437\u0430\u0434\u0430\u0434\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0438\u0447\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\ncat_features_ids = ['site_id',\n                    'ad_type_id',\n                    'geo_id',\n                    'device_category_id',\n                    'advertiser_id',\n                    'line_item_type_id',\n                    'os_id',\n                    'monetization_channel_id',\n                    'ad_unit_id',\n                    'order_id']","d2263c51":"# \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443\ntrain_data = df.query('sample == 1').drop(['date', 'sample'], axis=1)\n\ntrain_data['CPM'].describe()","95ac8db1":"train_data['CPM'].quantile(0.95)","c86e94ec":"# \u0443\u0434\u0430\u043b\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\ntrain_data = train_data.query(\"0 <= CPM < 535\")","14b225e0":"y = train_data['CPM'].values\nX = train_data.drop(['CPM'], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=RANDOM_SEED)\n\nmodel = CatBoostRegressor(iterations = ITERATIONS,\n                              learning_rate = LR,\n                              depth = DEPTH,\n                              eval_metric='RMSE',\n                              random_seed = RANDOM_SEED)\n\nmodel.fit(X_train, y_train, \n          cat_features=cat_features_ids,\n          eval_set=(X_test, y_test),\n          verbose_eval=50,\n          use_best_model=True,\n          plot=False)\n\ny_pred = model.predict(X_test)\n\nprint(f\"MSE = {mse(y_test, y_pred)}\")","64ee8641":"test_data = df.query('sample == 0').drop(['date', 'sample'], axis=1)\ntest_data['CPM'].quantile(0.95)","e4c9bfb5":"# \u0443\u0434\u0430\u043b\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\ntest_data = test_data.query(\"0 <= CPM <= 545\")\n\n\ntest_values = test_data['CPM'].values\ntest_data = test_data.drop(['CPM'], axis=1)\n\nmse(test_values, model.predict(test_data))","49fe81d4":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 train \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e 21.06.2019 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0434\u043b\u044f test - \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f","3da65925":"\u0420\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c CPM \u0434\u043b\u044f train \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435: CPM = ((revenue of the publisher * 100) \/ revenue_share_percentage) \/ measurable_impressions) * 1000","e6260d37":"\u041f\u043e\u043c\u0435\u0442\u0438\u043c train (1) \u0438 test (0) \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 sample"}}