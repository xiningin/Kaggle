{"cell_type":{"3d5b1d07":"code","a9823e1c":"code","4f6d2920":"code","09cf33d0":"code","0a639422":"code","ee2a65c7":"code","ca3f32fe":"code","af04e8aa":"code","15cae6c4":"code","797f2c35":"code","87cc2994":"code","0157f492":"code","36ef9dca":"code","602250ee":"code","f1ed6ad9":"code","06174c27":"code","ff650b9b":"code","2b18afb6":"code","570aeb75":"code","5cd2ba87":"code","43314c41":"code","65a42c1d":"code","18e1ad1f":"code","a5878286":"code","bb8c3b0c":"code","b6584f7d":"markdown","73c2bf0c":"markdown","62e7d798":"markdown","77291e21":"markdown","5ce12ecd":"markdown","0531ad45":"markdown","253002aa":"markdown","7a191ffe":"markdown","e2704d37":"markdown","1c46b4e9":"markdown","ce744463":"markdown","28c78568":"markdown","33ae8611":"markdown","c53521a6":"markdown","5dfdab74":"markdown","6070a6d9":"markdown","66aeaa26":"markdown","f8b7dcc9":"markdown","4eb240c3":"markdown","11f56adc":"markdown","84cbc125":"markdown","17988a02":"markdown","1551360d":"markdown","f1919d3d":"markdown","09607aa1":"markdown","761cfdcd":"markdown","3a74294e":"markdown","2b26e1a5":"markdown"},"source":{"3d5b1d07":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nimport time\nfrom datetime import datetime\n\n# ML libraries\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom xgboost import plot_importance, plot_tree\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error","a9823e1c":"#submission = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-1\/submission.csv\")\ntest = pd.read_csv(\"\/media\/pion-02\/commons\/extra\/covid\/covid19-global-forecasting-week-1\/test.csv\")\ntrain = pd.read_csv(\"\/media\/pion-02\/commons\/extra\/covid\/covid19-global-forecasting-week-1\/train.csv\")\ndisplay(train.head(5))\ndisplay(train.describe())\nprint(\"Number of Country\/Region: \", train['Country\/Region'].nunique())\nprint(\"Dates go from day\", max(train['Date']), \"to day\", min(train['Date']), \", a total of\", train['Date'].nunique(), \"days\")","4f6d2920":"#confirmed_country = train.groupby(['Country\/Region', 'Province\/State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country = train.groupby(['Country\/Region', 'Province\/State']).agg({'Fatalities':['sum']})\nconfirmed_total_date = train.groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date = train.groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date = confirmed_total_date.join(fatalities_total_date)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(17,7))\ntotal_date.plot(ax=ax1)\nax1.set_title(\"Global confirmed cases\", size=13)\nax1.set_ylabel(\"Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nfatalities_total_date.plot(ax=ax2, color='orange')\nax2.set_title(\"Global deceased cases\", size=13)\nax2.set_ylabel(\"Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)","09cf33d0":"#confirmed_country_noChina = train[train['Country\/Region']!='China'].groupby(['Country\/Region', 'Province\/State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_noChina = train[train['Country\/Region']!='China'].groupby(['Country\/Region', 'Province\/State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_noChina = train[train['Country\/Region']!='China'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_noChina = train[train['Country\/Region']!='China'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_noChina = confirmed_total_date_noChina.join(fatalities_total_date_noChina)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,5))\ntotal_date_noChina.plot(ax=ax1)\nax1.set_title(\"Global confirmed cases excluding China\", size=13)\nax1.set_ylabel(\"Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nfatalities_total_date_noChina.plot(ax=ax2, color='orange')\nax2.set_title(\"Global deceased cases excluding China\", size=13)\nax2.set_ylabel(\"Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)","0a639422":"#confirmed_country_China = train[train['Country\/Region']=='China'].groupby(['Country\/Region', 'Province\/State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_China = train[train['Country\/Region']=='China'].groupby(['Country\/Region', 'Province\/State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_China = train[train['Country\/Region']=='China'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_China = train[train['Country\/Region']=='China'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_China = confirmed_total_date_China.join(fatalities_total_date_China)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,5))\ntotal_date_China.plot(ax=ax1)\nax1.set_title(\"China confirmed cases\", size=13)\nax1.set_ylabel(\"Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nfatalities_total_date_China.plot(ax=ax2, color='orange')\nax2.set_title(\"China deceased cases\", size=13)\nax2.set_ylabel(\"Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)","ee2a65c7":"#confirmed_country_Italy = train[train['Country\/Region']=='Italy'].groupby(['Country\/Region', 'Province\/State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Italy = train[train['Country\/Region']=='Italy'].groupby(['Country\/Region', 'Province\/State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Italy = train[train['Country\/Region']=='Italy'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Italy = train[train['Country\/Region']=='Italy'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Italy = confirmed_total_date_Italy.join(fatalities_total_date_Italy)\n\n#confirmed_country_Spain = train[train['Country\/Region']=='Spain'].groupby(['Country\/Region', 'Province\/State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Spain = train[train['Country\/Region']=='Spain'].groupby(['Country\/Region', 'Province\/State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Spain = train[train['Country\/Region']=='Spain'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Spain = train[train['Country\/Region']=='Spain'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Spain = confirmed_total_date_Spain.join(fatalities_total_date_Spain)\n\n#confirmed_country_UK = train[train['Country\/Region']=='United Kingdom'].groupby(['Country\/Region', 'Province\/State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_UK = train[train['Country\/Region']=='United Kingdom'].groupby(['Country\/Region', 'Province\/State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_UK = train[train['Country\/Region']=='United Kingdom'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_UK = train[train['Country\/Region']=='United Kingdom'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_UK = confirmed_total_date_UK.join(fatalities_total_date_UK)\n\n#confirmed_country_Australia = train[train['Country\/Region']=='Australia'].groupby(['Country\/Region', 'Province\/State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Australia = train[train['Country\/Region']=='Australia'].groupby(['Country\/Region', 'Province\/State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Australia = train[train['Country\/Region']=='Australia'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Australia = train[train['Country\/Region']=='Australia'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Australia = confirmed_total_date_Australia.join(fatalities_total_date_Australia)\n\n#confirmed_country_Singapore = train[train['Country\/Region']=='Singapore'].groupby(['Country\/Region', 'Province\/State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Singapore = train[train['Country\/Region']=='Singapore'].groupby(['Country\/Region', 'Province\/State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Singapore = train[train['Country\/Region']=='Singapore'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Singapore = train[train['Country\/Region']=='Singapore'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Singapore = confirmed_total_date_Singapore.join(fatalities_total_date_Singapore)\n\nplt.figure(figsize=(15,10))\nplt.subplot(2, 2, 1)\ntotal_date_Italy.plot(ax=plt.gca(), title='Italy')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(2, 2, 2)\ntotal_date_Spain.plot(ax=plt.gca(), title='Spain')\n\nplt.subplot(2, 2, 3)\ntotal_date_UK.plot(ax=plt.gca(), title='United Kingdom')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(2, 2, 4)\ntotal_date_Singapore.plot(ax=plt.gca(), title='Singapore')","ca3f32fe":"confirmed_total_date_India = train[train['Country\/Region']=='India'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_India = train[train['Country\/Region']=='India'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_India = confirmed_total_date_India.join(fatalities_total_date_India)\n\ntotal_date_India.plot(ax=plt.gca(), title='India')","af04e8aa":"pop_italy = 60486683.\npop_spain = 46749696.\npop_UK = 67784927.\npop_singapore = 5837230.\npop_india = 13392000\n\ntotal_date_Italy.ConfirmedCases = total_date_Italy.ConfirmedCases\/pop_italy*100.\ntotal_date_Italy.Fatalities = total_date_Italy.ConfirmedCases\/pop_italy*100.\ntotal_date_Spain.ConfirmedCases = total_date_Spain.ConfirmedCases\/pop_spain*100.\ntotal_date_Spain.Fatalities = total_date_Spain.ConfirmedCases\/pop_spain*100.\ntotal_date_UK.ConfirmedCases = total_date_UK.ConfirmedCases\/pop_UK*100.\ntotal_date_UK.Fatalities = total_date_UK.ConfirmedCases\/pop_UK*100.\ntotal_date_Singapore.ConfirmedCases = total_date_Singapore.ConfirmedCases\/pop_singapore*100.\ntotal_date_Singapore.Fatalities = total_date_Singapore.ConfirmedCases\/pop_singapore*100.\ntotal_date_India.ConfirmedCases = total_date_India.ConfirmedCases\/pop_india*100.\ntotal_date_India.Fatalities = total_date_India.ConfirmedCases\/pop_india*100.\n\nplt.figure(figsize=(15,10))\nplt.subplot(2, 2, 1)\ntotal_date_Italy.ConfirmedCases.plot(ax=plt.gca(), title='Italy')\nplt.ylabel(\"Fraction of population infected\")\nplt.ylim(0, 0.06)\n\nplt.subplot(2, 2, 2)\ntotal_date_Spain.ConfirmedCases.plot(ax=plt.gca(), title='Spain')\nplt.ylim(0, 0.06)\n\nplt.subplot(2, 2, 3)\ntotal_date_UK.ConfirmedCases.plot(ax=plt.gca(), title='United Kingdom')\nplt.ylabel(\"Fraction of population infected\")\nplt.ylim(0, 0.005)\n\nplt.subplot(2, 2, 4)\ntotal_date_Singapore.ConfirmedCases.plot(ax=plt.gca(), title='Singapore')\nplt.ylim(0, 0.005)","15cae6c4":"total_date_India.ConfirmedCases.plot(ax=plt.gca(), title='India')","797f2c35":"#confirmed_country_Italy = train[(train['Country\/Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Country\/Region', 'Province\/State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Italy = train[(train['Country\/Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Country\/Region', 'Province\/State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Italy = train[(train['Country\/Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Italy = train[(train['Country\/Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Italy = confirmed_total_date_Italy.join(fatalities_total_date_Italy)\n\n#confirmed_country_Spain = train[(train['Country\/Region']=='Spain') & (train['ConfirmedCases']!=0)].groupby(['Country\/Region', 'Province\/State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Spain = train[(train['Country\/Region']=='Spain') & (train['ConfirmedCases']!=0)].groupby(['Country\/Region', 'Province\/State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Spain = train[(train['Country\/Region']=='Spain') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Spain = train[(train['Country\/Region']=='Spain') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Spain = confirmed_total_date_Spain.join(fatalities_total_date_Spain)\n\n#confirmed_country_UK = train[(train['Country\/Region']=='United Kingdom') & (train['ConfirmedCases']!=0)].groupby(['Country\/Region', 'Province\/State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_UK = train[(train['Country\/Region']=='United Kingdom') & (train['ConfirmedCases']!=0)].groupby(['Country\/Region', 'Province\/State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_UK = train[(train['Country\/Region']=='United Kingdom') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_UK = train[(train['Country\/Region']=='United Kingdom') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_UK = confirmed_total_date_UK.join(fatalities_total_date_UK)\n\n#confirmed_country_Australia = train[(train['Country\/Region']=='Australia') & (train['ConfirmedCases']!=0)].groupby(['Country\/Region', 'Province\/State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Australia = train[(train['Country\/Region']=='Australia') & (train['ConfirmedCases']!=0)].groupby(['Country\/Region', 'Province\/State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Australia = train[(train['Country\/Region']=='Australia') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Australia = train[(train['Country\/Region']=='Australia') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Australia = confirmed_total_date_Australia.join(fatalities_total_date_Australia)\n\n#confirmed_country_Singapore = train[(train['Country\/Region']=='Singapore') & (train['ConfirmedCases']!=0)].groupby(['Country\/Region', 'Province\/State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Singapore = train[(train['Country\/Region']=='Singapore') & (train['ConfirmedCases']!=0)].groupby(['Country\/Region', 'Province\/State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Singapore = train[(train['Country\/Region']=='Singapore') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Singapore = train[(train['Country\/Region']=='Singapore') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Singapore = confirmed_total_date_Singapore.join(fatalities_total_date_Singapore)\n\nconfirmed_total_date_India = train[(train['Country\/Region']=='India') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_India = train[(train['Country\/Region']=='India') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_India = confirmed_total_date_India.join(fatalities_total_date_India)\n\nitaly = [i for i in total_date_Italy.ConfirmedCases['sum'].values]\nitaly_30 = italy[0:50] \nspain = [i for i in total_date_Spain.ConfirmedCases['sum'].values]\nspain_30 = spain[0:50] \nUK = [i for i in total_date_UK.ConfirmedCases['sum'].values]\nUK_30 = UK[0:50] \nsingapore = [i for i in total_date_Singapore.ConfirmedCases['sum'].values]\nsingapore_30 = singapore[0:50] \n\nindia = [i for i in total_date_India.ConfirmedCases['sum'].values]\nindia_30 = india[0:50] \n\n\n# Plots\nplt.figure(figsize=(12,6))\nplt.plot(italy_30)\nplt.plot(spain_30)\nplt.plot(UK_30)\nplt.plot(singapore_30)\nplt.plot(india_30)\nplt.legend([\"Italy\", \"Spain\", \"UK\", \"Singapore\",\"India\"], loc='upper left')\nplt.title(\"COVID-19 infections from the first confirmed case\", size=15)\nplt.xlabel(\"Days\", size=13)\nplt.ylabel(\"Infected cases\", size=13)\nplt.ylim(0, 60000)\nplt.show()","87cc2994":"# Susceptible equation\ndef fa(N, a, b, beta):\n    fa = -beta*a*b\n    return fa\n\n# Infected equation\ndef fb(N, a, b, beta, gamma):\n    fb = beta*a*b - gamma*b\n    return fb\n\n# Recovered\/deceased equation\ndef fc(N, b, gamma):\n    fc = gamma*b\n    return fc","0157f492":"# Runge-Kutta method of 4rth order for 3 dimensions (susceptible a, infected b and recovered r)\ndef rK4(N, a, b, c, fa, fb, fc, beta, gamma, hs):\n    a1 = fa(N, a, b, beta)*hs\n    b1 = fb(N, a, b, beta, gamma)*hs\n    c1 = fc(N, b, gamma)*hs\n    ak = a + a1*0.5\n    bk = b + b1*0.5\n    ck = c + c1*0.5\n    a2 = fa(N, ak, bk, beta)*hs\n    b2 = fb(N, ak, bk, beta, gamma)*hs\n    c2 = fc(N, bk, gamma)*hs\n    ak = a + a2*0.5\n    bk = b + b2*0.5\n    ck = c + c2*0.5\n    a3 = fa(N, ak, bk, beta)*hs\n    b3 = fb(N, ak, bk, beta, gamma)*hs\n    c3 = fc(N, bk, gamma)*hs\n    ak = a + a3\n    bk = b + b3\n    ck = c + c3\n    a4 = fa(N, ak, bk, beta)*hs\n    b4 = fb(N, ak, bk, beta, gamma)*hs\n    c4 = fc(N, bk, gamma)*hs\n    a = a + (a1 + 2*(a2 + a3) + a4)\/6\n    b = b + (b1 + 2*(b2 + b3) + b4)\/6\n    c = c + (c1 + 2*(c2 + c3) + c4)\/6\n    return a, b, c","36ef9dca":"def SIR(N, b0, beta, gamma, hs):\n    \n    \"\"\"\n    N = total number of population\n    beta = transition rate S->I\n    gamma = transition rate I->R\n    k =  denotes the constant degree distribution of the network (average value for networks in which \n    the probability of finding a node with a different connectivity decays exponentially fast\n    hs = jump step of the numerical integration\n    \"\"\"\n    \n    # Initial condition\n    a = float(N-1)\/N -b0\n    b = float(1)\/N +b0\n    c = 0.\n\n    sus, inf, rec= [],[],[]\n    for i in range(10000): # Run for a certain number of time-steps\n        sus.append(a)\n        inf.append(b)\n        rec.append(c)\n        a,b,c = rK4(N, a, b, c, fa, fb, fc, beta, gamma, hs)\n\n    return sus, inf, rec","602250ee":"# Parameters of the model\nN = 7800*(10**6)\nb0 = 0\nbeta = 0.7\ngamma = 0.2\nhs = 0.1\n\nsus, inf, rec = SIR(N, b0, beta, gamma, hs)\n\nf = plt.figure(figsize=(8,5)) \nplt.plot(sus, 'b.', label='susceptible');\nplt.plot(inf, 'r.', label='infected');\nplt.plot(rec, 'c.', label='recovered\/deceased');\nplt.title(\"SIR model\")\nplt.xlabel(\"time\", fontsize=10);\nplt.ylabel(\"Fraction of population\", fontsize=10);\nplt.legend(loc='best')\nplt.xlim(0,1000)\nplt.savefig('SIR_example.png')\nplt.show()","f1ed6ad9":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import integrate, optimize\n\npopulation = float(pop_india)\ncountry_df = total_date_Italy[9:]\ncountry_df['day_count'] = list(range(1,len(country_df)+1))\n\nydata = [i for i in country_df.ConfirmedCases['sum'].values]\nxdata = country_df.day_count\nydata = np.array(ydata, dtype=float)\nxdata = np.array(xdata, dtype=float)\n\nN = population\ninf0 = ydata[0]\nsus0 = N - inf0\nrec0 = 0.0\n\ndef sir_model(y, x, beta, gamma):\n    sus = -beta * y[0] * y[1] \/ N\n    rec = gamma * y[1]\n    inf = -(sus + rec)\n    return sus, inf, rec\n\ndef fit_odeint(x, beta, gamma):\n    return integrate.odeint(sir_model, (sus0, inf0, rec0), x, args=(beta, gamma))[:,1]\n\npopt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)\nfitted = fit_odeint(xdata, *popt)\n\nplt.plot(xdata, ydata, 'o')\nplt.plot(xdata, fitted)\nplt.title(\"Fit of SIR model to global infected cases\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.show()\nprint(\"Optimal parameters: beta =\", popt[0], \" and gamma = \", popt[1])","06174c27":"# Merge train and test, exclude overlap\ndates_overlap = ['2020-03-12','2020-03-13','2020-03-14','2020-03-15','2020-03-16','2020-03-17','2020-03-18','2020-03-19','2020-03-20','2020-03-21','2020-03-22']\ntrain2 = train.loc[~train['Date'].isin(dates_overlap)]\nall_data = pd.concat([train2, test], axis = 0, sort=False)\n\n# Double check that there are no informed ConfirmedCases and Fatalities after 2020-03-11\nall_data.loc[all_data['Date'] >= '2020-03-12', 'ConfirmedCases'] = np.nan\nall_data.loc[all_data['Date'] >= '2020-03-12', 'Fatalities'] = np.nan\nall_data['Date'] = pd.to_datetime(all_data['Date'])\n\n# Create date columns\nle = preprocessing.LabelEncoder()\nall_data['Day_num'] = le.fit_transform(all_data.Date)\nall_data['Day'] = all_data['Date'].dt.day\nall_data['Month'] = all_data['Date'].dt.month\nall_data['Year'] = all_data['Date'].dt.year\n\n# Fill null values given that we merged train-test datasets\nall_data['Province\/State'].fillna(\"None\", inplace=True)\nall_data['ConfirmedCases'].fillna(0, inplace=True)\nall_data['Fatalities'].fillna(0, inplace=True)\nall_data['Id'].fillna(-1, inplace=True)\nall_data['ForecastId'].fillna(-1, inplace=True)\n\n# Aruba has no Lat nor Long. Inform it manually\nall_data.loc[all_data['Lat'].isna()==True, 'Lat'] = 12.510052\nall_data.loc[all_data['Long'].isna()==True, 'Long'] = -70.009354\n\ndisplay(all_data)\ndisplay(all_data.loc[all_data['Date'] == '2020-03-12'])","ff650b9b":"missings_count = {col:all_data[col].isnull().sum() for col in all_data.columns}\nmissings = pd.DataFrame.from_dict(missings_count, orient='index')\nprint(missings.nlargest(30, 0))","2b18afb6":"def calculate_trend(df, lag_list, column):\n    for lag in lag_list:\n        trend_column_lag = \"Trend_\" + column + \"_\" + str(lag)\n        df[trend_column_lag] = (df[column]-df[column].shift(lag, fill_value=-999))\/df[column].shift(lag, fill_value=0)\n    return df\n\n\ndef calculate_lag(df, lag_list, column):\n    for lag in lag_list:\n        column_lag = column + \"_\" + str(lag)\n        df[column_lag] = df[column].shift(lag, fill_value=0)\n    return df\n\n\nts = time.time()\nall_data = calculate_lag(all_data, range(1,7), 'ConfirmedCases')\nall_data = calculate_lag(all_data, range(1,7), 'Fatalities')\nall_data = calculate_trend(all_data, [1], 'ConfirmedCases')\nall_data = calculate_trend(all_data, [1], 'Fatalities')\nall_data.replace([np.inf, -np.inf], 0, inplace=True)\nall_data.fillna(0, inplace=True)\nprint(\"Time spent: \", time.time()-ts)","570aeb75":"all_data[all_data['Country\/Region']=='India'].iloc[40:50][['Id', 'Province\/State', 'Country\/Region', 'Lat', 'Long', 'Date',\n       'ConfirmedCases', 'Fatalities', 'ForecastId', 'Day_num', 'ConfirmedCases_1',\n       'ConfirmedCases_2', 'ConfirmedCases_3', 'Fatalities_1', 'Fatalities_2',\n       'Fatalities_3']]","5cd2ba87":"# Load countries data file\nworld_population = pd.read_csv(\"\/media\/pion-02\/commons\/extra\/covid\/population_by_country_2020.csv\")\n\n# Select desired columns and rename some of them\nworld_population = world_population[['Country (or dependency)', 'Population (2020)', 'Density (P\/Km\u00b2)', 'Land Area (Km\u00b2)', 'Med. Age', 'Urban Pop %']]\nworld_population.columns = ['Country (or dependency)', 'Population (2020)', 'Density', 'Land Area', 'Med Age', 'Urban Pop']\n\n# Replace United States by US\nworld_population.loc[world_population['Country (or dependency)']=='United States', 'Country (or dependency)'] = 'US'\n\n# Remove the % character from Urban Pop values\nworld_population['Urban Pop'] = world_population['Urban Pop'].str.rstrip('%')\n\n# Replace Urban Pop and Med Age \"N.A\" by their respective modes, then transform to int\nworld_population.loc[world_population['Urban Pop']=='N.A.', 'Urban Pop'] = int(world_population.loc[world_population['Urban Pop']!='N.A.', 'Urban Pop'].mode()[0])\nworld_population['Urban Pop'] = world_population['Urban Pop'].astype('int16')\nworld_population.loc[world_population['Med Age']=='N.A.', 'Med Age'] = int(world_population.loc[world_population['Med Age']!='N.A.', 'Med Age'].mode()[0])\nworld_population['Med Age'] = world_population['Med Age'].astype('int16')\n\nprint(\"Cleaned country details dataset\")\ndisplay(world_population)\n\n# Now join the dataset to our previous DataFrame and clean missings (not match in left join)- label encode cities\nprint(\"Joined dataset\")\nall_data = all_data.merge(world_population, left_on='Country\/Region', right_on='Country (or dependency)', how='left')\nall_data[['Population (2020)', 'Density', 'Land Area', 'Med Age', 'Urban Pop']] = all_data[['Population (2020)', 'Density', 'Land Area', 'Med Age', 'Urban Pop']].fillna(0)\ndisplay(all_data)\n\nprint(\"Encoded dataset\")\n# Label encode countries and provinces. Save dictionary for exploration purposes\nall_data.drop('Country (or dependency)', inplace=True, axis=1)\nall_data['Country\/Region'] = le.fit_transform(all_data['Country\/Region'])\nnumber_c = all_data['Country\/Region']\ncountries = le.inverse_transform(all_data['Country\/Region'])\ncountry_dict = dict(zip(countries, number_c)) \nall_data['Province\/State'] = le.fit_transform(all_data['Province\/State'])\nnumber_p = all_data['Province\/State']\nprovince = le.inverse_transform(all_data['Province\/State'])\nprovince_dict = dict(zip(province, number_p)) \ndisplay(all_data)","43314c41":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,6))\n\n# Day_num = 38 is March 1st\ny1 = all_data[(all_data['Lat']==40.0) & (all_data['Long']==-4.0) & (all_data['Day_num']>38) & (all_data['Day_num']<=49)][['ConfirmedCases']]\nx1 = range(0, len(y1))\nax1.plot(x1, y1, 'bo--')\nax1.set_title(\"India ConfirmedCases between days 38 and 49 (last 10 days)\")\nax1.set_xlabel(\"Days\")\nax1.set_ylabel(\"ConfirmedCases\")\n\ny2 = all_data[(all_data['Lat']==40.0) & (all_data['Long']==-4.0) & (all_data['Day_num']>38) & (all_data['Day_num']<=49)][['ConfirmedCases']].apply(lambda x: np.log(x))\nx2 = range(0, len(y2))\nax2.plot(x2, y2, 'bo--')\nax2.set_title(\"India Log ConfirmedCases between days 38 and 49 (last 10 days))\")\nax2.set_xlabel(\"Days\")\nax2.set_ylabel(\"Log ConfirmedCases\")","65a42c1d":"from xgboost import XGBClassifier\n\nts = time.time()\n\n# Filter selected features\ndata = all_data.copy()\nfeatures = ['Id', 'ForecastId', 'Country\/Region', 'Province\/State', 'ConfirmedCases', 'Fatalities', \n       'Day_num', 'Day', 'Month', 'Year', 'Long', 'Lat']\ndata = data[features]\n\n# Keep data from February 27th to March 12th. Remember that data from 2020-03-12 to 2020-03-22 was cleaned from train dataset\ndata = data[(data.Day_num>=38)]\n\n# Apply log transformation to all ConfirmedCases and Fatalities columns, except for trends\ndata[['ConfirmedCases', 'Fatalities']] = data[['ConfirmedCases', 'Fatalities']].astype('float64')\ndata[['ConfirmedCases', 'Fatalities']] = data[['ConfirmedCases', 'Fatalities']].apply(lambda x: np.log(x))\n\n# Replace infinites\ndata.replace([np.inf, -np.inf], 0, inplace=True)\n\n\n# Split data into train\/test\ndef split_data(data):\n    \n    # Train set\n    x_train = data[data.ForecastId == -1].drop(['ConfirmedCases', 'Fatalities'], axis=1)\n    y_train_1 = data[data.ForecastId == -1]['ConfirmedCases']\n    y_train_2 = data[data.ForecastId == -1]['Fatalities']\n\n    # Test set\n    x_test = data[data.ForecastId != -1].drop(['ConfirmedCases', 'Fatalities'], axis=1)\n\n    # Clean Id columns and keep ForecastId as index\n    x_train.drop('Id', inplace=True, errors='ignore', axis=1)\n    x_train.drop('ForecastId', inplace=True, errors='ignore', axis=1)\n    x_test.drop('Id', inplace=True, errors='ignore', axis=1)\n    index = x_test['ForecastId'].astype('int32')\n    x_test.drop('ForecastId', inplace=True, errors='ignore', axis=1)\n    \n    return x_train, y_train_1, y_train_2, x_test, index\n\n\n# Linear regression model\ndef lin_reg(X_train, Y_train, X_test):\n    # Create linear regression object\n    regr = XGBClassifier()\n\n    # Train the model using the training sets\n    regr.fit(X_train, Y_train)\n\n    # Make predictions using the testing set\n    y_pred = regr.predict(X_test)\n    \n    return regr, y_pred\n\n\n# Submission function\ndef get_submission(index, df):\n    \n    prediction_1 = data_pred['Predicted_ConfirmedCases']\n    prediction_2 = data_pred['Predicted_Fatalities']\n\n    # Submit predictions\n    prediction_1 = [int(item) for item in list(map(round, prediction_1))]\n    prediction_2 = [int(item) for item in list(map(round, prediction_2))]\n    \n    submission = pd.DataFrame({\n        \"ForecastId\": df['ForecastId'].astype('int32'), \n        \"ConfirmedCases\": prediction_1, \n        \"Fatalities\": prediction_2\n    })\n    submission.to_csv('submission.csv', index=False)\n\n    \n# Set the dataframe where we will update the predictions\ndata_pred = data[data.ForecastId != -1][['Country\/Region', 'Province\/State', 'Day_num', 'ForecastId']]\ndata_pred['Predicted_ConfirmedCases'] = [0]*len(data_pred)\ndata_pred['Predicted_Fatalities'] = [0]*len(data_pred)\n    \nprint(\"Currently running Logistic Regression for all countries\")\n\nfor c in data['Country\/Region'].unique():\n    \n    # If the country has several Province\/State informed\n    if data[data['Country\/Region']==c]['Province\/State'].nunique()>1:\n        continue\n        \n    # No Province\/State informed\n    else:\n        data_c = data[(data['Country\/Region']==c)]\n        X_train, Y_train_1, Y_train_2, X_test, index = split_data(data_c)\n        model_1, pred_1 = lin_reg(X_train, Y_train_1, X_test)\n        model_2, pred_2 = lin_reg(X_train, Y_train_2, X_test)\n        data_pred.loc[(data_pred['Country\/Region']==c), 'Predicted_ConfirmedCases'] = pred_1\n        data_pred.loc[(data_pred['Country\/Region']==c), 'Predicted_Fatalities'] = pred_2\n\n# Aplly exponential transf. and clean potential infinites due to final numerical precision\ndata_pred[['Predicted_ConfirmedCases', 'Predicted_Fatalities']] = data_pred[['Predicted_ConfirmedCases', 'Predicted_Fatalities']].apply(lambda x: np.exp(x))\ndata_pred.replace([np.inf, -np.inf], 0, inplace=True) \n\nget_submission(index, data_pred)\n\nprint(\"Process finished in \", round(time.time() - ts, 2), \" seconds\")","18e1ad1f":"# Filter India, run the Linear Regression workflow\n\ndata_India = data[data['Country\/Region']==country_dict['India']]\nX_train, Y_train_1, Y_train_2, X_test, index = split_data(data_India)\nmodel, pred = lin_reg(X_train, Y_train_1, X_test)\n\n# Create a df with both real cases and predictions (predictions starting on March 12th)\nX_train_check = X_train.copy()\nX_train_check['Target'] = Y_train_1\n\nX_test_check = X_test.copy()\nX_test_check['Target'] = pred\n\nX_final_check = pd.concat([X_train_check, X_test_check])\n\n# Select predictions from March 1st to March 22nd\npredicted_data = X_final_check.loc[(X_final_check['Day_num'].isin(list(range(39, 61))))].Target\n\n# Select train (real) data from March 1 to March 22nd\ndates_list = ['2020-03-01', '2020-03-02', '2020-03-03', '2020-03-04', '2020-03-05', '2020-03-06', '2020-03-07', '2020-03-08', '2020-03-09', \n                 '2020-03-10', '2020-03-11','2020-03-12','2020-03-13','2020-03-14','2020-03-15','2020-03-16','2020-03-17','2020-03-18',\n                 '2020-03-19','2020-03-20','2020-03-21','2020-03-22']\n\nreal_data = train.loc[(train['Country\/Region']=='India') & (train['Date'].isin(dates_list))]['ConfirmedCases']\ndates_list_num = list(range(0,len(dates_list)))\n\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,6))\n\nax1.plot(dates_list_num, np.exp(predicted_data))\nax1.plot(dates_list_num, real_data)\nax1.axvline(10, linewidth=2, ls = ':', color='grey', alpha=0.5)\nax1.legend(['Predicted cases', 'Actual cases', 'Train-test split'], loc='upper left')\nax1.set_xlabel(\"Day count (from March 1st to March 22nd)\")\nax1.set_ylabel(\"Confirmed Cases\")\n\nax2.plot(dates_list_num, predicted_data)\nax2.plot(dates_list_num, np.log(real_data))\nax2.axvline(10, linewidth=2, ls = ':', color='grey', alpha=0.5)\nax2.legend(['Predicted cases', 'Actual cases', 'Train-test split'], loc='upper left')\nax2.set_xlabel(\"Day count (from March 1st to March 22nd)\")\nax2.set_ylabel(\"Log Confirmed Cases\")\n\nplt.suptitle(\"India's ConfirmedCases predictions based on Logistic Regression\")","a5878286":"# ALTERNATIVE FUNCTIONS FOR FURTHER ANALYSIS\n\n# LGB Regressor \n\"\"\"\nmodel=lgb.LGBMRegressor(\n        n_estimators=1000,\n        learning_rate=0.3,\n        #min_child_weight=300,\n        #num_leaves=32,\n        colsample_bytree=0.8,\n        subsample=0.8,\n        max_depth=16,\n        #reg_alpha=0.04,\n        #reg_lambda=0.073,\n        #min_split_gain=0.0222415,\n        verbose=1,\n        seed=21)\n\nmodel.fit(X_train, Y_train_1, eval_metric=\"rmse\", eval_set=[(X_train, Y_train_1), (X_valid, Y_valid_1)], verbose=1, early_stopping_rounds = 20)\n\nY_test = model.predict(X_test)\n\"\"\"\n\n\n# Show India enriched data\n\"\"\"\ndata[(data['Lat']==40.0) & (data['Long']==-4.0) & (data['Day']==49)]\ntrain[(train['Country\/Region']=='Spain') & (train['Date']=='2020-03-12')]\ndata[(data['Lat']==40.0) & (data['Long']==-4.0) & (data['Day']==49)]['ConfirmedCases'].apply(lambda x: np.exp(x))\n\"\"\"\n\n\n# XGB Regressor\n\"\"\"\nreg = xgb.XGBRegressor()\nreg.fit(X_train, Y_train_1,\n        eval_set=[(X_train, Y_train_1), (X_valid, Y_valid_1)],\n        early_stopping_rounds=50,\n       verbose=True)\n\n_ = plot_importance(reg, height=0.9, max_num_features=20)\nY_pred = reg.predict(X_valid)\nprint(Y_pred)\n\"\"\"\n\n\n# XGB GridSearch\n\"\"\"\nts = time.time()\n\nxgb1 = xgb.XGBRegressor()\nparameters = {'nthread':[4], #when use hyperthread, xgboost may become slower\n              'learning_rate': [.07, .01, .005], #so called `eta` value\n              'max_depth': [4, 5, 6, 7],\n              'min_child_weight': [4, 5, 6, 7],\n              'silent': [0],\n              'subsample': [0.7],\n              'colsample_bytree': [0.7],\n              'n_estimators': [500]}\n\nxgb_grid = GridSearchCV(xgb1,\n                        parameters,\n                        cv = 3,\n                        n_jobs = 5,\n                        verbose=True)\n\nxgb_grid.fit(X_train, Y_train_1)\n\nprint(xgb_grid.best_score_)\nprint(xgb_grid.best_params_)\n\nY_pred = xgb_grid.predict(X_valid)\nprint(Y_pred, Y_valid_1)\n\nprint(\"Time spent: \", ts-time.time())\n\"\"\"\n\n\n# Some plots\n\"\"\"\nplt.plot(data[(data['Lat']==40.0) & (data['Long']==-4.0) & (data['Day']<=49)]['ConfirmedCases'])\n\ny = data[(data['Lat']==40.0) & (data['Long']==-4.0) & (data['Day']> 35) & (data['Day']<=49)][['ConfirmedCases']].apply(lambda x: np.log(x))\nx = range(0, len(y))\nplt.plot(x, y, 'go--')\n\"\"\"\n\n\n# Linear Regression\n\"\"\"\n# Create linear regression object\nregr = linear_model.LinearRegression()\n\n# Train the model using the training sets\nregr.fit(X_train, Y_train_1)\n\n# Make predictions using the testing set\ny_pred = regr.predict(X_test)\n\n# Compute mean squared error on real values (inverse transform of log)\n#rms = mean_squared_error(Y_test_1.apply(lambda x: np.exp(x)).astype('int16'), np.exp(y_pred).astype('int16'))\n#print(\"Mean squared error: \", rms)\n\"\"\"\n\n# LGB 2\n\"\"\"\ndef xgb_reg(X_train, Y_train_1, X_test):\n    # Create linear regression object\n    regr = lgb.LGBMRegressor(n_estimators=1000)\n\n    # Train the model using the training sets\n    regr.fit(X_train, Y_train_1, eval_metric=\"rmse\")\n\n    # Make predictions using the testing set\n    y_pred = regr.predict(X_test)\n\n    # Compute mean squared error on real values (inverse transform of log)\n    #rms = mean_squared_error(Y_test_1.apply(lambda x: np.exp(x)).astype('int16'), np.exp(y_pred).astype('int16'))\n    #print(\"Mean squared error: \", rms)\n    \n    return regr, y_pred\n\"\"\"","bb8c3b0c":"\"\"\"\n#Predictions\nX_test_compare = X_test.copy()\nX_test_compare['PredictedCases'] = y_pred_xgb\nX_test_compare.loc[(X_test_compare['Day']>=50) & (X_test_compare['Day']<73)]\n\n# Train test\ncompare = train.loc[train['Date'].isin(dates_overlap)]\ncompare = compare.merge(test[['Country\/Region', 'Date', 'ForecastId']], on=['Country\/Region', 'Date'])\n#compare['PredictedCases'] = X_test_compare.loc[(X_test_compare['Day']>=50) & (X_test_compare['Day']<73), 'PredictedCases']\ncompare\n\n# Total comparison\ntotal_compare = X_test_compare.join(compare, on='ForecastId', rsuffix='X_compare')\ntotal_compare[['ForecastId', 'Country\/Region', 'ConfirmedCases', 'PredictedCases']]\n\"\"\"","b6584f7d":"**Observations**: In this case the general behavior looks cleaner, and in fact the curve resembles a typical epidemiology model like [SIR](http:\/\/mat.uab.cat\/matmat\/PDFv2013\/v2013n03.pdf). SIR models present a large increasing in the number of infections that, once it reaches the maximum of the contagion, decreases with a lower slope. For comparison, a SIR simulation from section [2. SIR model](#section2):\n\n![__results___28_0.png](attachment:__results___28_0.png)","73c2bf0c":"**Observations**:\n\n* Results are quite good; the evolution is well captured despite the simplicity of the model\n* With 10 days to train, predictions for the following 5 days are really accurate\n* The estimations are increasingly worse as time passes","62e7d798":"In order to solve the differential equations system, we develop a [Runge-Kutta](https:\/\/en.wikipedia.org\/wiki\/Runge%E2%80%93Kutta_methods) method of 4rth order:","77291e21":"# 4. Predictions with machine learning <a id=\"section4\"><\/a>\n\nOur obective in this section consists on  predicting the evolution of the expansion from a data-centric perspective, like any other regression problem. To do so, remember that the challenge specifies that submissions on the public LB shouldn only contain data previous to 2020-03-12.\n\nModels to apply:\n1. Basic Linear regression","5ce12ecd":"## 4.1. Basic Linear Regression\n\nSince we are interested into predicting the future time evolution of the pandemic, our first approach consists on a simple Linear Regression. However, remind that the evolution is not linear but exponential (only in the beginning of the infection), so that a preliminar log transformation is needed. \n\nVisual comparison of both cases for Spain and with data from last 10 days informed, starting on March 1st:","0531ad45":"## 1.3. Italy, Spain, UK and Singapore\n\nBoth Italy and Spain are experiencing the larger increase in COVID-19 positives in Europe. At the same time, UK is a unique case given that it's one of the most important countries in Europe but recently has left the European Union, which has create an effective barrier to human mobility from other countries. The fourth country we will study in this section is Singapore, since it's an asiatic island, is closer to China and its  socio-economic conditions is different from the other three countries.","253002aa":"## 1.2. COVID-19 tendency in China\n\nSince China was the initial infected country, the COVID-19 behavior is different from the rest of the world. The medical system was not prepared for the pandemic, in fact no one was aware of the virus until several cases were reported. Moreover, China government took strong contention measures in a considerable short period of time and, while the virus is widely spread, they have been able to control the increasing of the infections. ","7a191ffe":"And that's it, our results have been submited. Nonetheless, since I like reviewing the model's predictions, let me analyze the results when training the model for a single country (in this case Spain):","e2704d37":"## 2.2. Fit SIR parameters to real data\n\nThe SIR model is purely theoretical, and we are interested into a real approximation of the COVID-19 expansion in order to extract insights and understand the transmission of the virus. Hence, we need to extract the $\\beta$ and $\\gamma$ paramaters for each case if we hope to be able to predict the evolution of the system.","1c46b4e9":"As you see, the process is really fast. An example of some of the lag\/trend columns for Spain:","ce744463":"And finally, to obtain the evolution of the disease we simply define the initial conditions and call the rk4 method:","28c78568":"In order to compare the 4 countries, it's also interesting to see the evolution of the infections from the first confirmed case:","33ae8611":"**Observations**: \n* \"ConfirmedCases\" and \"Fatalities\" are now only informed for dates previous to 2020-03-12\n* The dataset includes all countries and dates, which is required for the lag\/trend step\n* Missing values for \"ConfirmedCases\" and \"Fatalities\" have been replaced by 0, which may be dangerous if we do not remember it at the end of the process. However, since we will train only on dates previous to 2020-03-12, this won't impact our prediction algorithm\n* A new column \"Day\" has been created, as a day counter starting from the first date\n\nDouble-check that there are no remaining missing values:","c53521a6":"## 3.1. Join data, filter dates and clean missings\n\nFirst of all, we perform some pre-processing prepare the dataset, consisting on:\n\n* **Join data**. Join train\/test to facilitate data transformations\n* **Filter dates**. According to the challenge conditions, remove ConfirmedCases and Fatalities post 2020-03-12. Create additional date columns\n* **Missings**. Analyze and fix missing values","5dfdab74":"# COVID Global Forecast: SIR model\n\nIn the context of the global COVID-19 pandemic, Kaggle has launched several challenges in order to provide useful insights that may answer some of the open scientific questions about the virus. This is the case of the [COVID19 Global Forecasting](https:\/\/www.kaggle.com\/c\/covid19-global-forecasting-week-1), in which participants are encouraged to fit worldwide data in order to predict the pandemic evolution, hopefully helping to determine factors that impact the transmission rate of COVID-19.\n\n**TABLE OF CONTENTS**\n\n1. [Exploratory data analysis (EDA)](#section1)\n2. [SIR model](#section2)\n3. [Data enrichment](#section3)\n4. [Predictions with machine learning](#section4)\n\n**Disclaimer**: this notebook is still under construction. In fact, the last subsection is not correct. I'll work to fix it in the following days, as long as expand the methods to predict the COVID-19 evolution.","6070a6d9":"Clearly **this fit of parameters is not correct**, since we are expecting both $\\beta$ and $\\gamma$ factors to be <1. I'll keep working on the error for curiosity, but in the meanwhile I'll develop a data-centric approach to the prediction.","66aeaa26":"# 3. Data enrichment <a id=\"section3\"><\/a>\n\nAnalyzing SIR simulations was meant to understand a model that approximately resembles the transmission mechanism of many virus, including the COVID-19. However, there are alternative methods that may prove being equally useful both to predict and to understand the pandemic evolution. Many of these methods rely on having rich data to extract conclusions and allow algorithms to extrapolate patterns in data, and that is exactly what we are going to do. \n\nMain workflow of this section:\n1. Join data, filter dates and clean missings\n2. Compute lags and trends\n3. Add country details\n\n**Disclaimer**: this data enrichment is not mandatory and we could end up not using all of the new features in our models. However I consider it a didactical step that will surely add some value, for example in an in-depth exploratory analysis.","f8b7dcc9":"## 3.2. Compute lags and trends\n\nEnriching a dataset is key to obtain good results. In this case we will apply 2 different transformations:\n\n**Lag**. Lags are a way to compute the previous value of a column, so that the lag 1 for ConfirmedCases would inform the this column from the previous day. The lag 3 of a feature X is simply:\n$$X_{lag3}(t) = X(t-3)$$\n\n\n**Trend**. Transformig a column into its trend gives the natural tendency of this column, which is different from the raw value. The definition of trend I will apply is: \n$$Trend_{X} = {X(t) - X(t-1) \\over X(t-1)}$$\n\nThe backlog of lags I'll apply is 14 days, while for trends is 7 days.  For ConfirmedCases and Fatalities:","4eb240c3":"Results obtained for N=world population, only one initial infected case, $\\beta=0.3$, $\\gamma=0.5$ and a leap pass $h_s = 0.1$ are shown below:","11f56adc":"As you see, the log transformation results in a fancy straight-like line, which is awesome for Linear Regression. However, let me clarify two important points:\n\n* This \"roughly exponential behavior\" is only true for the initial infection stages of the pandemic (the initial increasing of infections on the SIR model), but that's exactly the point where most countries are at the moment.\n\n* Why do I only extract the last 10 days of data? For three reasons:\n    1. In order to capture exactly the very short term component of the evolution\n    2. To prevent the effects of certain variables that have been impacting the transmition speed (quarantine vs free circulation)\n    3. To prevent differences on criteria when confirming cases (remember that weird slope on the China plot?)","84cbc125":"This first model is very simple, and only elemental features will be considered: Country\/Region, date information, Long and Lat. Lags. Engineered columns like lags, trends and country details are not introduced as an input. Finally, the workflow for the Basic Linear Regression model is:\n1. **Features**. Select features\n2. **Dates**. Filter train data from 2020-03-01 to 2020-03-11\n2. **Log transformation**. Apply log transformation to ConfirmedCases and Fatalities\n3. **Infinites**. Replace infinites from the logarithm\n4. **Train\/test split**. Split into train\/valid\/test\n5. **Prediction**. Linear Regression, training country by country and joining data\n6. **Submit**. Submit results in the correct format, and applying exponential to reverse log transformation ","17988a02":"## 1.1. COVID-19 global tendency excluding China\n\nSince details of the initial breakthrough strongly interfere with the results, it's recomended to analyze China independently. Let's first see the results without China: ","1551360d":"## 2.1. Implementing the SIR model\n\nSIR model can be implemented in many ways: from the differential equations governing the system, within a mean field approximation or running the dynamics in a social network (graph). FOr the sake of simplicity, I'vem chosen the first option, and we will simply run a numerical method (Runge-Kutta) to solve the differential equations system. \n\nThe functions governing the dif.eqs. are:","f1919d3d":"**Observations**:\n\n* **Smoothness**. Both plots are less smooth than theoretical simulations or the curve from the rest of the world cumulative\n* **Infected criteria**. The moment in which the criteria to consider an infected case was changed is direclty spotted\n* **Irregularities**. There are some iregularities. I should check the literature in depth to look for evidences, but the reasons may be that both the resources spent to monitor the epidemy and the security measures to stop ot have been changing over time\n* **Plateaux**. It looks like the curve has reached a plateaux, which would imply that China is on their maximum of contagion ","09607aa1":"# 2. SIR model <a id=\"section2\"><\/a>\n\nWe have seen some general behavior of the virus in agregated data, for the country where the coronavirus was originated and for four other interesting countries. There's a lot of information to be extracted from this data; for example, we haven't analyzed the effects of long\/lat of countries. However, since our main purpose is to develop a predective model in order to understand the key factors that impact the COVID-19 transmission, I'll move on to one of the most famous epidemiologic models: SIR. \n\nSIR is a simple model that considers a population that belongs to one of the following states:\n1. **Susceptible (S)**. The individual hasn't contracted the disease, but she can be infected due to transmisison from infected people\n2. **Infected (I)**. This person has contracted the disease\n3. **Recovered\/Deceased (R)**. The disease may lead to one of two destinies: either the person survives, hence developing inmunity to the disease, or the person is deceased. \n\n<img src=\"https:\/\/www.lewuathe.com\/assets\/img\/posts\/2020-03-11-covid-19-dynamics-with-sir-model\/sir.png\" width=\"500px\">\nImage by Kai Sasaki from [lewuathe.com](https:\/\/www.lewuathe.com\/covid-19-dynamics-with-sir-model.html)\n\nThere are many versions of this model, considering birth and death (SIRD with demography), with intermediate states, etc. However, since we are in the early stages of the COVID-19 expansion and our interest is focused in the short term, we will consider that people develops inmunity (in the long term, inmunity may be lost and the COVID-19 may come back within a certain seasonality like the common flu). Hence, the differential equations that govern the system are:\n$$ {dS \\over dt} = - {\\beta S I \\over N} $$\n\n$$ {dI \\over dt} = {\\beta S I \\over N} - \\gamma I$$\n\n$$ {dR \\over dt} = \\gamma I$$\n\nFocusing in the short term, individuals develop inmunity to the virus, which effectively denies any transition between recovered people and susceptible one (i.e. once you have passed the virus, you can not be contagied again). Of course, this may be different in the long term, and the virus may come back within a certain seasonality like the common flu.","761cfdcd":"**Observations**: \n* The number of infected cases increases for a certain time period, and then eventually decreases given that individuals recover\/decease from the disease\n* The susceptible fraction of population decreases as the virus is transmited, to eventually drop to the absorbent state 0\n* The oposite happens for the recovered\/deceased case\n\nNotice that different initial conditions and parameter values will lead to other scenarios, feel free to play with these numbers to study the system.","3a74294e":"## 3.3. Add country details\n\nVariables like the total population of a country, the average age of citizens or the fraction of peoople living in cities may strongly impact on the COVID-19 transmission behavior. Hence, it's important to consider these factors. I'm using [Tanu's dataset](https:\/\/www.kaggle.com\/tanuprabhu\/population-by-country-2020) based on Web Scrapping for this purpose.","2b26e1a5":"# 1. Exploratory data analysis (EDA) <a id=\"section1\"><\/a>\n\nFirst of all, let's take a look on the data structure:"}}