{"cell_type":{"00acda1d":"code","ed22cd03":"code","d7be5923":"code","6baf7f8f":"code","718a2cc0":"code","5cdf021c":"code","b8f51d2d":"markdown"},"source":{"00acda1d":"import geojson\nimport sys, os, numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import font_manager as rcParams\nfrom shapely.geometry import Polygon, LineString\nfrom pyproj import Proj, transform\n\nfrom datashader.utils import lnglat_to_meters as webm","ed22cd03":"# geojson data can be taken from overpass turbo (https:\/\/overpass-turbo.eu\/)\nwith open(\"..\/input\/turin.geojson\") as file:\n    data = geojson.load(file)","d7be5923":"roads = {}\nrails = {}\n\nfor path in data[\"features\"]:\n    # street data\n    if \"highway\" in path[\"properties\"].keys():\n        if path[\"properties\"][\"highway\"] not in roads.keys():\n            roads[path[\"properties\"][\"highway\"]] = []\n            \n        if path[\"geometry\"][\"type\"]==\"Polygon\":\n            cart = [[x, y] for x, y in path[\"geometry\"][\"coordinates\"][0]]\n            roads[path[\"properties\"][\"highway\"]].append(Polygon(cart))\n                     \n            \n        elif path[\"geometry\"][\"type\"]==\"LineString\":\n            cart = [[x, y] for x, y in path[\"geometry\"][\"coordinates\"]]\n            roads[path[\"properties\"][\"highway\"]].append(LineString(cart))\n                      \n    # railway data\n    elif \"railway\" in path[\"properties\"].keys():\n        if path[\"properties\"][\"railway\"] not in rails.keys():\n            rails[path[\"properties\"][\"railway\"]] = []\n            \n        if path[\"geometry\"][\"type\"]==\"Polygon\":\n            cart = [[x, y] for x, y in path[\"geometry\"][\"coordinates\"][0]]\n            rails[path[\"properties\"][\"railway\"]].append(Polygon(cart))\n            \n        elif path[\"geometry\"][\"type\"]==\"LineString\":\n            cart = [[x, y] for x, y in path[\"geometry\"][\"coordinates\"]]\n            rails[path[\"properties\"][\"railway\"]].append(LineString(cart))","6baf7f8f":"def plot_paths(ax, paths, color, width, linestyle):\n    for path in paths:\n        if isinstance(path, Polygon):\n            x, y = path.exterior.xy   \n        elif isinstance(path, LineString):\n            x, y = path.xy\n        else:\n            continue\n        \n        \n        mercator = webm(list(x), list(y))\n        \n        ax.plot(mercator[0], mercator[1], color=color, linewidth=width, linestyle=linestyle, solid_capstyle='round')    ","718a2cc0":"roads.keys()","5cdf021c":"scale=1\nfig, ax = plt.subplots(figsize=(10*scale, 10*scale))\n\nroad_color = '#FCEF3C'\nrail_color = '#FCEF3C'\nbg_color = '#0C3C7C'\n\n\nplot_paths(ax, roads[\"motorway\"], road_color, 0.8*scale, \"-\")\nplot_paths(ax, roads[\"motorway_link\"], road_color, 0.8*scale, \"-\")\nplot_paths(ax, roads[\"trunk\"], road_color, 0.8*scale, \"-\")\nplot_paths(ax, roads[\"trunk_link\"], road_color, 0.8*scale, \"-\")\n\nplot_paths(ax, roads[\"primary\"], road_color, 0.6*scale, \"-\")\nplot_paths(ax, roads[\"primary_link\"], road_color, 0.6*scale, \"-\")\n\nplot_paths(ax, roads[\"secondary\"], road_color, 0.4*scale, \"-\")\nplot_paths(ax, roads[\"secondary_link\"], road_color, 0.4*scale, \"-\")\nplot_paths(ax, roads[\"tertiary\"], road_color, 0.4*scale, \"-\")\nplot_paths(ax, roads[\"tertiary_link\"], road_color, 0.4*scale, \"-\")\n\nplot_paths(ax, roads[\"residential\"], road_color, .3*scale, \"-\")\nplot_paths(ax, roads[\"track\"], road_color, .3*scale, \"-\")\nplot_paths(ax, rails[\"rail\"], rail_color, 0.15*scale, '-.')\n\nplot_paths(ax, roads[\"pedestrian\"], road_color, .2*scale, \"-\")\nplot_paths(ax, roads[\"path\"], road_color, .2*scale, \"-\")\nplot_paths(ax, roads[\"service\"], road_color, .2*scale, \"-\")\nplot_paths(ax, roads[\"unclassified\"], road_color, .2*scale, \"-\")\nplot_paths(ax, roads[\"living_street\"], road_color, .2*scale, \"-\")\n\nax.set_facecolor(bg_color)\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.get_xaxis().set_ticks([])\nax.get_yaxis().set_ticks([])\n#plt.grid(linewidth=1,color='#5c5c5c')\nplt.savefig(\"aaa.png\")\nplt.show()","b8f51d2d":"This notebook explains how to use *geojson* data from **OpenStreetMap** for visualizing streets and railways.<br>\nThe data consisists of the streets and railways for the city of **Turin**.<br>\nThe geojson can be taken from [Overpass Turbo](https:\/\/overpass-turbo.eu\/)<br>\n<br>\nI've published another [kernel](https:\/\/www.kaggle.com\/lorenzodenisi\/how-to-get-openstreetmap-data-with-overpass-turbo) explaining how to query and handle different type of data available from OpenStreetMap, if you are interested:\nhttps:\/\/www.kaggle.com\/lorenzodenisi\/how-to-get-openstreetmap-data-with-overpass-turbo"}}