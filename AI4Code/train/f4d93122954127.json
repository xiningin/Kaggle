{"cell_type":{"a2b17f60":"code","a6bdd948":"code","474852c3":"code","f82317a1":"code","d09a2164":"code","45b99b2f":"code","b79d87ed":"code","42422787":"code","657c7af9":"code","9bedfe7d":"code","f1e3cc35":"markdown","acad628b":"markdown","46477589":"markdown","fcd771f9":"markdown","f04b33bf":"markdown","84469068":"markdown","6ca4df38":"markdown","11fa7a79":"markdown"},"source":{"a2b17f60":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import GradientBoostingRegressor","a6bdd948":"test_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\n\nall_data = pd.concat([train_data, test_data], keys=['train', 'test'])","474852c3":"# from sklearn import preprocessing\n# categ = ['Street','LotShape','LandContour', 'LotConfig',\n#  'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl',\n#  'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond',\n#  'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n#  'Functional', 'GarageType' ,'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive', 'SaleType', 'SaleCondition']\n# le = preprocessing.LabelEncoder()\n# all_data[categ] = all_data[categ].apply(le.fit_transform)\n\nall_data.corr().style.background_gradient(cmap='coolwarm')","f82317a1":"all_data = all_data.drop(['Id','BsmtHalfBath', 'KitchenAbvGr', 'EnclosedPorch','ScreenPorch', 'PoolArea', 'MiscVal',\n  'MoSold', 'YrSold', 'MSSubClass', 'OverallCond','BsmtFinSF2', 'LowQualFinSF', '3SsnPorch', 'BedroomAbvGr',\n  'HalfBath', 'BsmtFullBath', 'BsmtUnfSF', 'LotArea', 'BsmtFinSF1', '2ndFlrSF', 'WoodDeckSF', 'OpenPorchSF',\n  'MSZoning', 'Street', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1',\n  'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n  'ExterCond', 'BsmtCond', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'Functional' ,'GarageQual', 'GarageCond', \n  'SaleType', 'PavedDrive', 'SaleCondition'], axis=1)","d09a2164":"drop_list = []\nfor col in all_data.columns:\n    if (col != 'SalePrice'):\n        if (all_data[col].isna().sum()> 400):\n            drop_list.append(col)\n\nall_data = all_data.drop(drop_list, axis=1)\n\nfor col in all_data.columns:\n    if (col != 'SalePrice'):\n        if (all_data[col].isna().sum() != 0):\n            all_data[col] = all_data[col].fillna(all_data[col].value_counts().idxmax())","45b99b2f":"all_data = pd.get_dummies(all_data, drop_first=True)","b79d87ed":"train = all_data.loc['train']\ntest = all_data.loc['test']\nX = train.drop('SalePrice', axis=1)\ny = train['SalePrice']","42422787":"# parameters = {'learning_rate': [0.0001, 0.001, 0.01, 0.1],\n#                   'subsample'    : [0.9, 0.5, 0.2, 0.1],\n#                   'n_estimators' : [100,500,1000, 1500],\n#                   'max_depth'    : [2,4,6,8,10]\n#                  }\n\n# reg = GradientBoostingRegressor()\n# grid_search = GridSearchCV(estimator = reg, param_grid = parameters, cv = 2, n_jobs=-1)\n# grid_search.fit(X, y)\n# print(grid_search.best_params_)","657c7af9":"reg = GradientBoostingRegressor(\n    learning_rate=0.1,\n    max_depth=2,\n    n_estimators=500,\n    subsample=0.5)\nreg.fit(X, y)","9bedfe7d":"y_pred = reg.predict(test.drop('SalePrice', axis=1))\npd.DataFrame({\n    \"Id\": test_data.Id.values,\n    \"SalePrice\": y_pred\n    }).to_csv('submission.csv', index=False, header=True)","f1e3cc35":"# Importing the necessary libraries\n#  \u0418\u043c\u043f\u043e\u0440\u0442 \u043d\u0443\u0436\u043d\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","acad628b":"# Data preparation\n\nWe output the Pearson correlation matrix (the commented code encodes categorical features for calculating correlation). Then we will remove the signs that have little effect on SalePrice\n\n# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u041f\u0438\u0440\u0441\u043e\u043d\u0430 (\u0437\u0430\u043a\u043e\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u043a\u043e\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438). \u0417\u0430\u0442\u0435\u043c \u0443\u0434\u0430\u043b\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043b\u0430\u0431\u043e \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 SalePrice\n","46477589":"# For training, we use regression with gradient boosting\nLet's select the coefficients and train the model\n# \u0414\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e \u0441 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u043c \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u043e\u043c\n\u041f\u043e\u0434\u0431\u0435\u0440\u0435\u043c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u0438 \u043e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c","fcd771f9":"# Processing of omissions\nWe will remove the signs that have a lot of gaps, for the rest we will replace the gaps with median values\n\n# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n\u0423\u0434\u0430\u043b\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u0434\u043b\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\n\n","f04b33bf":"# Loading training and test data\nWe will load the data and combine them into one DataFrame for more convenient processing\n# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0438\u0445 \u0432 \u043e\u0434\u0438\u043d DataFrame \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438","84469068":"# Predict the result and get the answer\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0436\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043e\u0442\u0432\u0435\u0442","6ca4df38":"# Let's process the data\nFill in the empty values with the average, and also delete the columns that have little effect on the result. Converting categorical values to numeric values using get_dummies\n# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n\u041f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u043c, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0443\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043b\u0430\u0431\u043e \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e get_dummies","11fa7a79":"# Encode categorical features\n# \u0417\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438"}}