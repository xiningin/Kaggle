{"cell_type":{"2e9f48d8":"code","afdaac17":"code","a7b53f02":"code","c44ecf67":"code","054bef2b":"code","eee6f4d6":"code","4d489f73":"code","29f5902f":"code","32345536":"code","663b0bcb":"code","098a802a":"code","169ab181":"code","26d060f0":"code","3b4ec0a8":"code","b6d78d69":"code","7f4fc523":"code","58a590e6":"code","708985a7":"code","66490fa5":"code","26772619":"code","5a5eb3aa":"code","cf3c5da6":"code","7ecac2dd":"code","5822a1ee":"code","0a3aeec7":"code","accf4890":"code","a73e54ce":"markdown","829ff072":"markdown","1335426b":"markdown","a29e5e9c":"markdown","7e1f800e":"markdown","3120a414":"markdown"},"source":{"2e9f48d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","afdaac17":"## importing required libraries\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix\n\nfrom xgboost import XGBClassifier\n\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom imblearn.over_sampling import RandomOverSampler","a7b53f02":"data = pd.read_csv('..\/input\/loan-prediction-based-on-customer-behavior\/Training Data.csv')","c44ecf67":"data.head()","054bef2b":"sns.heatmap(data.corr(), annot=True)","eee6f4d6":"data.dtypes","4d489f73":"data['Married\/Single'].unique()","29f5902f":"data['House_Ownership'].unique()","32345536":"data['Car_Ownership'].unique()","663b0bcb":"df = data.copy()","098a802a":"df.drop(columns=['Id', 'STATE', 'CITY', 'Profession'], inplace=True, axis=1)","169ab181":"def enc(data1):\n    df = pd.get_dummies(data = data1, columns=['Married\/Single', 'House_Ownership', 'Car_Ownership'])\n    \n    return df","26d060f0":"df = enc(df)","3b4ec0a8":"df","b6d78d69":"X = df.drop(columns=['Risk_Flag'])\ny = df['Risk_Flag']","7f4fc523":"y.value_counts()","58a590e6":"ros = RandomOverSampler()\nX_ros, y_ros = ros.fit_resample(X,y)\ny_ros.value_counts()","708985a7":"X_train, X_test, y_train, y_test = train_test_split(X_ros,y_ros, test_size = 0.2, random_state=15)","66490fa5":"#params = {\n#    'learning_rate' : [0.1,0.3,0.5],\n#    'n_estimators' : [700, 900, 1000],\n#    'max_depth' : [4, 6, 9]\n#}\n\n# xgb = XGBClassifier()\n\n# skf = StratifiedKFold(n_splits=5 , shuffle=True, random_state=2021)\n\n# random_search  =RandomizedSearchCV(xgb, param_distributions=params , n_iter=9, scoring='roc_auc' , n_jobs=4, cv=skf.split(X_train,y_train), random_state=2020)\n\n# random_search.fit(X_train,y_train)\n\n#print(random_search.best_params_)","26772619":"xgb = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.3, max_delta_step=0, max_depth=9,\n              min_child_weight=1, missing=np.nan, monotone_constraints='()',\n              n_estimators=1000, n_jobs=8, num_parallel_tree=1, random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n              tree_method='exact', validate_parameters=1, verbosity=None)","5a5eb3aa":"xgb.fit(X_train,y_train)","cf3c5da6":"predict_train = xgb.predict(X_train)\npredict_test = xgb.predict(X_test)","7ecac2dd":"print(\"Train Score:\", roc_auc_score(predict_train, y_train))\nprint(\"Train error:\", mean_squared_error(predict_train,y_train))\nprint(\"Test Score:\", roc_auc_score(predict_test, y_test))\nprint(\"Test error:\", mean_squared_error(predict_test,y_test))","5822a1ee":"def plot(y_true, pred, title=None):\n    \n    matrix = confusion_matrix(y_true, pred)\n    plt.figure(figsize = (5,5))\n    sns.heatmap(data= matrix, annot=True, cmap='Blues', fmt='g')\n    \n    plt.xlabel(\"Actual\")\n    plt.ylabel(\"Predicted\")\n    plt.title(title)\n    plt.show","0a3aeec7":"plot(y_train,predict_train, \"Training Predictions\")","accf4890":"plot(y_test,predict_test, \"Test Predictions\")","a73e54ce":"Plotting our predicted values","829ff072":"Now we can see that both values are equal. And our bias is also reduced.\nNow we will split our data into 80% train set and 20% test\/val data","1335426b":"Dividing Data into X and Y","a29e5e9c":"Here we can see that our target variable has much more number of 0's than 1's. So this will make our model bias and reduce its efficiency. So we will OverSample it to make it equal and reduce Bias.","7e1f800e":"Trying Randomized search for best XGB Parameters. You can also try Grid Search but that consumes more time in CPU.\n\nAlso commenting out randomized search, you can try it at your own.\n\nYou can try different values here and see which works best for your model.","3120a414":"So we can apply one hot encoding in Married\/Single, House_Ownership, Car_Ownership column\n\nAlso id, city, profession and state column is not needed, so we can drop that"}}