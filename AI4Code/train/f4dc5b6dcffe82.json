{"cell_type":{"d463d7e2":"code","80ee7a0d":"code","150b9ff1":"code","b88c7904":"code","582a9681":"code","367a32a4":"code","3bc2d82c":"code","6505b0c9":"code","15dd413e":"code","83a7cf48":"code","b99ad552":"code","46d261bd":"code","19813463":"code","3ac2a73b":"code","a6020c00":"code","a05aa777":"code","126c135f":"code","1ccedc88":"code","c9f8ac36":"code","39818cc2":"code","8c913476":"code","5083ebaf":"code","c0977603":"code","12033a00":"code","5579714f":"code","eb58574b":"code","1c3b74cd":"code","9b7edc3f":"code","cba0db36":"code","e94da403":"code","470d7f57":"code","975fe7f2":"code","8a14b084":"code","3ead4746":"code","097be7cd":"code","912b3071":"code","234a86eb":"code","7f1ecdf6":"code","35ddb402":"code","6e6913f3":"code","15fd62f4":"code","87e82325":"code","c997d786":"code","943d15e4":"code","9b6275c4":"code","cd921c32":"code","e8f8172a":"code","92a63fc3":"code","3075856a":"code","ceb774f1":"code","5d3c33a1":"code","99443b98":"code","e169d10f":"code","6de42bda":"code","6389e099":"code","ff4387a3":"code","e3052023":"code","ea8831d9":"code","08c1bf9c":"code","86176fb6":"code","a959d384":"code","99b79864":"code","d3e2c618":"code","c97a75bf":"markdown","29495577":"markdown","faed12fe":"markdown"},"source":{"d463d7e2":"# import libraries\nimport numpy as np\nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nfrom scipy.stats import shapiro\nfrom datetime import datetime\nimport seaborn as sns","80ee7a0d":"# load train dataset\ndirname = '\/kaggle\/input\/seoul-bike-rental-ai-pro-iti\/'\ntrain_file = os.path.join(dirname, 'train.csv')\ndf = pd.read_csv(train_file)\ndf.head()","150b9ff1":"df.info()","b88c7904":"df['y'].hist()","582a9681":"# convert 'Date' from object to datetime\ndf[\"Date\"] = pd.to_datetime(df[\"Date\"], dayfirst=True)","367a32a4":"def cyclic_encode(df, column, max_value):\n    df[column + '_sin'] = np.sin(2 * np.pi * df[column] \/ max_value)\n    df[column + '_cos'] = np.cos(2 * np.pi * df[column] \/ max_value)\n    df.drop(column,axis=1,inplace=True)","3bc2d82c":"df['day'] = df['Date'].dt.weekday\ndf['day']=df[\"day\"].map({3:1,6:2,5:3,1:4,0:5,2:6,4:7})\ndf['month'] = df['Date'].dt.month\n#df['Seasons']=df[\"Seasons\"].map({'Winter':1,'Spring':2,'Autumn':3,'Summer':4})\n#df['is_holiday'] = [0 if item == 'No Holiday' else 1 for item in df['is_holiday']]\n#df['functional_day'] = [0 if item == 'No' else 1 for item in df['functional_day']]\ndf[\"is_weekend\"] = [1 if int(x)>4 else 0 for x in df[\"Date\"].dt.weekday]\n#df['count_log'] = np.log1p(df['count'])\ncyclic_encode(df,'month',12)\ncyclic_encode(df,'Hour',23)","6505b0c9":"df.head()","15dd413e":"sns.factorplot(x=\"day\",y=\"y\",data=df,kind='bar',size=5,aspect=1.5);","83a7cf48":"x = df.groupby('Seasons')['y'].sum()\nplt.bar(x.index, x.values);","b99ad552":"dummies = pd.get_dummies(df[['Seasons', 'Holiday', 'Functioning Day']], drop_first=True)\ndf = pd.concat([df, dummies], axis=1)\ndf","46d261bd":"df.drop(['ID', 'Seasons', 'Holiday', 'Functioning Day'], axis=1, inplace=True)","19813463":"df.describe()","3ac2a73b":"plt.hist(df['y']);","a6020c00":"plt.boxplot(df['y']);","a05aa777":"out = df['y'].quantile(.95)\nplt.hist(df[df['y'] < out]['y']);","126c135f":"df = df[df['y'] < out]","1ccedc88":"#plt.hist(df[df['y'] < 1500]['y']);","c9f8ac36":"from scipy.stats import zscore\nscores = zscore(df['y'])\nscores = np.abs(scores)\nscores\nz = (scores > 3).sum()\nz","39818cc2":"from sklearn.preprocessing import PowerTransformer\npt = PowerTransformer()\npt.fit(df[['y']])\ndf['y_log'] = pt.transform(df[['y']])\nplt.hist(df['y_log']);","8c913476":"#df['y_sqrt'] = np.sqrt(df['y'])\n#plt.hist(np.sqrt(df['y']));","5083ebaf":"shapiro(df['y_log'])","c0977603":"(df['y_log']).skew()","12033a00":"#np.log(df['y']).skew()","5579714f":"#from scipy import stats\n#stats.boxcox(df['y'])[0]","eb58574b":"#import numpy as np\n#df['x'] = np.round(np.log(df['y'] +1 ))\n#df['x'].value_counts()\n#plt.hist(df['x']);","1c3b74cd":"#shapiro(df['x'])","9b7edc3f":"from sklearn.preprocessing import QuantileTransformer\nimport numpy as np\n\n#ey = np.random.exponential(size=100)\nqt = QuantileTransformer(output_distribution='normal')\nno = qt.fit_transform(np.array(df['y']).reshape(-1, 1))\nplt.hist(no);","cba0db36":"shapiro(no)","e94da403":"from statsmodels.graphics.gofplots import qqplot\nqqplot(df[\"y_log\"], line='s')\nplt.show()","470d7f57":"df.corr()","975fe7f2":"plt.scatter(df['Temperature(\ufffdC)'], df['Dew point temperature(\ufffdC)']);","8a14b084":"plt.scatter(df['Hour_sin'], df['y'], alpha=.1);","3ead4746":"plt.scatter(df['Temperature(\ufffdC)'], df['y'], alpha=.1);","097be7cd":"df['y_log'].value_counts()","912b3071":"#sns.pairplot(df)","234a86eb":"df","7f1ecdf6":"numerical_cols = df.select_dtypes(['int', 'float']).columns\nfor col in numerical_cols:\n    df[col].hist()\n    plt.title(col)\n    plt.show()","35ddb402":"from sklearn.model_selection import train_test_split\n\ntrain_df, val_df = train_test_split(df, test_size=0.2, random_state=42) ","6e6913f3":"selected_features = ['Temperature(\ufffdC)','Hour_sin', 'Hour_cos','month_sin', 'month_cos', 'Functioning Day_Yes','Seasons_Spring','Seasons_Summer','Seasons_Winter','Humidity(%)', 'is_weekend', 'day'] \nX_train = train_df[selected_features]\n#X_train = train_df[['Temperature(\ufffdC)','Hour_sin', 'Hour_cos','month_sin','Functioning Day_Yes','Humidity(%)']]\nY_train = train_df['y_log']\nX_val = val_df[selected_features]\n#X_train = train_df[['Temperature(\ufffdC)','Hour_sin', 'Hour_cos','month_sin','Functioning Day_Yes','Humidity(%)']]\nY_val = val_df['y_log']","15fd62f4":"from sklearn.linear_model import LinearRegression\nlm = LinearRegression()\nlm.fit(X_train,Y_train)","87e82325":"Yhat = lm.predict(X_val)\nYhat.shape  ","c997d786":"plt.hist(Yhat);","943d15e4":"lm.score(X_val, Y_val)","9b6275c4":"import statsmodels.api as sm \n\nz = sm.add_constant(X_train)\nresults = sm.OLS(Y_train,z).fit()\nprint(results.summary())","cd921c32":"from sklearn.ensemble import RandomForestRegressor\n\n# Create an instance of the classifier\nrfr = RandomForestRegressor(random_state=0)\n\n# Train the classifier\nrfr = rfr.fit(X_train, Y_train)","e8f8172a":"rfr.score(X_val, Y_val)","92a63fc3":"yhat = rfr.predict(X_val)\nplt.hist(yhat);","3075856a":"from sklearn.metrics import mean_squared_log_error\nnp.sqrt(mean_squared_log_error(pt.inverse_transform(np.array(Y_val).reshape(-1,1)), pt.inverse_transform(np.array(yhat).reshape(-1,1))))\n#np.sqrt(mean_squared_log_error(Y_val, yhat))","ceb774f1":"pt.inverse_transform(np.array(yhat).reshape(-1,1))","5d3c33a1":"print(rfr.feature_importances_)","99443b98":"def plot_feature_importance(importance,names):\n    #Create arrays from feature importance and feature names\n    feature_importance = np.array(importance)\n    feature_names = np.array(names)\n\n    #Create a DataFrame using a Dictionary\n    data={'feature_names':feature_names,'feature_importance':feature_importance}\n    fi_df = pd.DataFrame(data)\n\n    #Sort the DataFrame in order decreasing feature importance\n    fi_df.sort_values(by=['feature_importance'], ascending=False,inplace=True)\n\n    #Define size of bar plot\n    plt.figure(figsize=(10,8))\n    #Plot Searborn bar chart\n    sns.barplot(x=fi_df['feature_importance'], y=fi_df['feature_names'])\n    #Add chart labels\n    #plt.title(model_type + ' FEATURE IMPORTANCE')\n    plt.xlabel('FEATURE IMPORTANCE')\n    plt.ylabel('FEATURE NAMES')\n\nplot_feature_importance(rfr.feature_importances_,X_train.columns)","e169d10f":"# load test data\ndirname = '\/kaggle\/input\/seoul-bike-rental-ai-pro-iti\/'\ntest_file = os.path.join(dirname, 'test.csv')\ntest_df = pd.read_csv(test_file)\ntest_df.head()","6de42bda":"test_df.info()","6389e099":"dummies = pd.get_dummies(test_df[['Seasons', 'Holiday', 'Functioning Day']], drop_first=True)\ntest_df = pd.concat([test_df, dummies], axis=1)\ntest_df","ff4387a3":"# convert 'Date' from object to datetime\ntest_df[\"Date\"] = pd.to_datetime(test_df[\"Date\"], dayfirst=True)","e3052023":"test_df['day'] = test_df['Date'].dt.weekday\ntest_df['day']=test_df[\"day\"].map({3:1,6:2,5:3,1:4,0:5,2:6,4:7})\ntest_df['month'] = test_df['Date'].dt.month\n#df['Seasons']=df[\"Seasons\"].map({'Winter':1,'Spring':2,'Autumn':3,'Summer':4})\n#df['is_holiday'] = [0 if item == 'No Holiday' else 1 for item in df['is_holiday']]\n#df['functional_day'] = [0 if item == 'No' else 1 for item in df['functional_day']]\ntest_df[\"is_weekend\"] = [1 if int(x)>4 else 0 for x in test_df[\"Date\"].dt.weekday]\n#df['count_log'] = np.log1p(df['count'])\ncyclic_encode(test_df,'month',12)\ncyclic_encode(test_df,'Hour',23)","ea8831d9":"test_df.head()","08c1bf9c":"numerical_cols = test_df.select_dtypes(['int', 'float']).columns\nfor col in numerical_cols:\n    test_df[col].hist()\n    plt.title(col)\n    plt.show()","86176fb6":"X_test = test_df[selected_features]\ny_test_predicted = rfr.predict(X_test)\n\ntest_df['y_log'] = y_test_predicted\ntest_df['y'] = pt.inverse_transform(np.array(y_test_predicted).reshape(-1,1))\ntest_df.head()","a959d384":"test_df['y_log'].hist()","99b79864":"pt.inverse_transform(np.array(y_test_predicted).reshape(-1,1))","d3e2c618":"test_df[['ID', 'y']].to_csv('\/kaggle\/working\/submission.csv', index=False)","c97a75bf":"'Dew point temperature(\ufffdC)' is highly correlated with 'temperature(\ufffdC)' se we will drop this feature from training","29495577":"no null values in any column","faed12fe":"we need to encode the categorical columns ['Seasons', 'Holidays', 'Functioning Day'] to numerical values"}}