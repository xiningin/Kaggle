{"cell_type":{"bf9aa83d":"code","e2f6af5a":"code","b57e4d6b":"code","4b0d175e":"code","bb8ab397":"code","a930392f":"code","2cc60283":"code","c256481e":"code","f8492d50":"code","599d6ef2":"code","bc1d18ab":"code","3988498e":"code","f75d24cc":"code","f0b20ddc":"code","14f63c1b":"code","619c1786":"code","2ffa3fa6":"code","37d94187":"code","86455a95":"code","bab004e2":"code","6fccffc2":"code","7cb4a50d":"markdown","d8335109":"markdown","fdf754a3":"markdown","968e7aa5":"markdown","f84a7fd6":"markdown","eb3401cd":"markdown","eef814d1":"markdown","1465b721":"markdown"},"source":{"bf9aa83d":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import confusion_matrix,accuracy_score\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, LSTM, Activation\nfrom keras.callbacks import EarlyStopping\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline  ","e2f6af5a":"dataset_train=pd.read_csv('..\/input\/PM_train.txt',sep=' ',header=None).drop([26,27],axis=1)\ncol_names = ['id','cycle','setting1','setting2','setting3','s1','s2','s3','s4','s5','s6','s7','s8','s9','s10','s11','s12','s13','s14','s15','s16','s17','s18','s19','s20','s21']\ndataset_train.columns=col_names\nprint('Shape of Train dataset: ',dataset_train.shape)\ndataset_train.head()","b57e4d6b":"dataset_test=pd.read_csv('..\/input\/PM_test.txt',sep=' ',header=None).drop([26,27],axis=1)\ndataset_test.columns=col_names\n#dataset_test.head()\nprint('Shape of Test dataset: ',dataset_train.shape)\ndataset_train.head()","4b0d175e":"pm_truth=pd.read_csv('..\/input\/PM_truth.txt',sep=' ',header=None).drop([1],axis=1)\npm_truth.columns=['more']\npm_truth['id']=pm_truth.index+1\npm_truth.head()","bb8ab397":"# generate column max for test data\nrul = pd.DataFrame(dataset_test.groupby('id')['cycle'].max()).reset_index()\nrul.columns = ['id', 'max']\nrul.head()","a930392f":"# run to failure\npm_truth['rtf']=pm_truth['more']+rul['max']\npm_truth.head()","2cc60283":"pm_truth.drop('more', axis=1, inplace=True)\ndataset_test=dataset_test.merge(pm_truth,on=['id'],how='left')\ndataset_test['ttf']=dataset_test['rtf'] - dataset_test['cycle']\ndataset_test.drop('rtf', axis=1, inplace=True)\ndataset_test.head()","c256481e":"dataset_train['ttf'] = dataset_train.groupby(['id'])['cycle'].transform(max)-dataset_train['cycle']\ndataset_train.head()","f8492d50":"df_train=dataset_train.copy()\ndf_test=dataset_test.copy()\nperiod=30\ndf_train['label_bc'] = df_train['ttf'].apply(lambda x: 1 if x <= period else 0)\ndf_test['label_bc'] = df_test['ttf'].apply(lambda x: 1 if x <= period else 0)\ndf_train.head()","599d6ef2":"features_col_name=['setting1', 'setting2', 'setting3', 's1', 's2', 's3', 's4', 's5', 's6', 's7', 's8', 's9', 's10', 's11',\n                   's12', 's13', 's14', 's15', 's16', 's17', 's18', 's19', 's20', 's21']\ntarget_col_name='label_bc'","bc1d18ab":"sc=MinMaxScaler()\ndf_train[features_col_name]=sc.fit_transform(df_train[features_col_name])\ndf_test[features_col_name]=sc.transform(df_test[features_col_name])","3988498e":"def gen_sequence(id_df, seq_length, seq_cols):\n    df_zeros=pd.DataFrame(np.zeros((seq_length-1,id_df.shape[1])),columns=id_df.columns)\n    id_df=df_zeros.append(id_df,ignore_index=True)\n    data_array = id_df[seq_cols].values\n    num_elements = data_array.shape[0]\n    lstm_array=[]\n    for start, stop in zip(range(0, num_elements-seq_length), range(seq_length, num_elements)):\n        lstm_array.append(data_array[start:stop, :])\n    return np.array(lstm_array)\n\n# function to generate labels\ndef gen_label(id_df, seq_length, seq_cols,label):\n    df_zeros=pd.DataFrame(np.zeros((seq_length-1,id_df.shape[1])),columns=id_df.columns)\n    id_df=df_zeros.append(id_df,ignore_index=True)\n    data_array = id_df[seq_cols].values\n    num_elements = data_array.shape[0]\n    y_label=[]\n    for start, stop in zip(range(0, num_elements-seq_length), range(seq_length, num_elements)):\n        y_label.append(id_df[label][stop])\n    return np.array(y_label)","f75d24cc":"# timestamp or window size\nseq_length=50\nseq_cols=features_col_name","f0b20ddc":"# generate X_train\nX_train=np.concatenate(list(list(gen_sequence(df_train[df_train['id']==id], seq_length, seq_cols)) for id in df_train['id'].unique()))\nprint(X_train.shape)\n# generate y_train\ny_train=np.concatenate(list(list(gen_label(df_train[df_train['id']==id], 50, seq_cols,'label_bc')) for id in df_train['id'].unique()))\nprint(y_train.shape)","14f63c1b":"# generate X_test\nX_test=np.concatenate(list(list(gen_sequence(df_test[df_test['id']==id], seq_length, seq_cols)) for id in df_test['id'].unique()))\nprint(X_test.shape)\n# generate y_test\ny_test=np.concatenate(list(list(gen_label(df_test[df_test['id']==id], 50, seq_cols,'label_bc')) for id in df_test['id'].unique()))\nprint(y_test.shape)","619c1786":"nb_features =X_train.shape[2]\ntimestamp=seq_length\n\nmodel = Sequential()\n\nmodel.add(LSTM(\n         input_shape=(timestamp, nb_features),\n         units=100,\n         return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(\n          units=50,\n          return_sequences=False))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(units=1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.summary()","2ffa3fa6":"# fit the network\nmodel.fit(X_train, y_train, epochs=10, batch_size=200, validation_split=0.05, verbose=1,\n          callbacks = [EarlyStopping(monitor='val_loss', min_delta=0, patience=0, verbose=0, mode='auto')])","37d94187":"# training metrics\nscores = model.evaluate(X_train, y_train, verbose=1, batch_size=200)\nprint('Accurracy: {}'.format(scores[1]))","86455a95":"y_pred=model.predict_classes(X_test)\nprint('Accuracy of model on test data: ',accuracy_score(y_test,y_pred))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test,y_pred))","bab004e2":"def prob_failure(machine_id):\n    machine_df=df_test[df_test.id==machine_id]\n    machine_test=gen_sequence(machine_df,seq_length,seq_cols)\n    m_pred=model.predict(machine_test)\n    failure_prob=list(m_pred[-1]*100)[0]\n    return failure_prob","6fccffc2":"machine_id=16\nprint('Probability that machine will fail within 30 days: ',prob_failure(machine_id))","7cb4a50d":"## Feature Scaling","d8335109":"### Loading Libraries","fdf754a3":"#### Loadind Truth table","968e7aa5":"## Function to reshape dataset as required by LSTM","f84a7fd6":"## LSTM Network","eb3401cd":"### Probability of Machine failure","eef814d1":"### Loading Dataset","1465b721":"# LSTM For Predictive Maintenance"}}