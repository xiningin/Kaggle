{"cell_type":{"25dba74a":"code","4ec1cffc":"code","60ed9d1c":"code","5276be5b":"code","ffb4b08b":"code","1cc4d9d5":"code","b0d682d2":"code","0442dfd1":"code","f9e8b642":"code","dda74d06":"code","e98403ce":"code","61fc990a":"code","3cbd3aa7":"markdown","16081963":"markdown","6b6c9b5d":"markdown","ac793a23":"markdown","f478b05b":"markdown","69d83c33":"markdown"},"source":{"25dba74a":"import os\nimport json\n\nimport numpy as np\nimport pandas as pd\nimport keras\nfrom keras import layers\nfrom keras.applications import DenseNet121\nfrom keras.callbacks import Callback, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.models import Sequential\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, f1_score, precision_score, recall_score","4ec1cffc":"os.listdir('..\/input')","60ed9d1c":"# The data, split between train and test sets:\nx_train = np.load('..\/input\/reducing-image-sizes-to-32x32\/X_train.npy')\nx_test = np.load('..\/input\/reducing-image-sizes-to-32x32\/X_test.npy')\ny_train = np.load('..\/input\/reducing-image-sizes-to-32x32\/y_train.npy')\n\nprint('x_train shape:', x_train.shape)\nprint(x_train.shape[0], 'train samples')\nprint(x_test.shape[0], 'test samples')","5276be5b":"# Convert the images to float and scale it to a range of 0 to 1\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train \/= 255.\nx_test \/= 255.","ffb4b08b":"class Metrics(Callback):\n    def on_train_begin(self, logs={}):\n        self.val_f1s = []\n        self.val_recalls = []\n        self.val_precisions = []\n\n    def on_epoch_end(self, epoch, logs={}):\n        X_val, y_val = self.validation_data[:2]\n        y_pred = self.model.predict(X_val)\n\n        y_pred_cat = keras.utils.to_categorical(\n            y_pred.argmax(axis=1),\n            num_classes=14\n        )\n\n        _val_f1 = f1_score(y_val, y_pred_cat, average='macro')\n        _val_recall = recall_score(y_val, y_pred_cat, average='macro')\n        _val_precision = precision_score(y_val, y_pred_cat, average='macro')\n\n        self.val_f1s.append(_val_f1)\n        self.val_recalls.append(_val_recall)\n        self.val_precisions.append(_val_precision)\n\n        print((f\"val_f1: {_val_f1:.4f}\"\n               f\" \u2014 val_precision: {_val_precision:.4f}\"\n               f\" \u2014 val_recall: {_val_recall:.4f}\"))\n\n        return\n\nf1_metrics = Metrics()","1cc4d9d5":"densenet = DenseNet121(\n    weights='..\/input\/densenet-keras\/DenseNet-BC-121-32-no-top.h5',\n    include_top=False,\n    input_shape=(32,32,3)\n)","b0d682d2":"model = Sequential()\nmodel.add(densenet)\nmodel.add(layers.GlobalAveragePooling2D())\nmodel.add(layers.Dense(14, activation='softmax'))","0442dfd1":"model.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\nmodel.summary()","f9e8b642":"model.compile(\n    loss='categorical_crossentropy',\n    optimizer='adam',\n    metrics=['accuracy']\n)\n\ncheckpoint = ModelCheckpoint(\n    'model.h5', \n    monitor='val_acc', \n    verbose=1, \n    save_best_only=True, \n    save_weights_only=False,\n    mode='auto'\n)\n\nhistory = model.fit(\n    x=x_train,\n    y=y_train,\n    batch_size=64,\n    epochs=7,\n    callbacks=[checkpoint, f1_metrics],\n    validation_split=0.1\n)","dda74d06":"with open('history.json', 'w') as f:\n    json.dump(history.history, f)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df['val_f1'] = f1_metrics.val_f1s\nhistory_df['val_precision'] = f1_metrics.val_precisions\nhistory_df['val_recall'] = f1_metrics.val_recalls\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['acc', 'val_acc']].plot()\nhistory_df[['val_f1', 'val_precision', 'val_recall']].plot()","e98403ce":"model.load_weights('model.h5')\ny_test = model.predict(x_test)\n\nsubmission_df = pd.read_csv('..\/input\/iwildcam-2019-fgvc6\/sample_submission.csv')\nsubmission_df['Predicted'] = y_test.argmax(axis=1)\n\nprint(submission_df.shape)\nsubmission_df.head()","61fc990a":"submission_df.to_csv('submission.csv',index=False)","3cbd3aa7":"## Submission","16081963":"## Create Callback for F1 score","6b6c9b5d":"## Evaluation","ac793a23":"# DenseNet Transfer Learning - iWildCam 2019\n\nBreakdown of this notebook:\n1. **Loading the 32x32 dataset**: Load the data generated in *Reducing Image Sizes to 32x32*.\n2. **Create Callback for F1 Score**: F1-macro score is the official metric of the competition. We create a callback to keep track of that value as we train the model.\n3. **Creating and Training the Model**: Create a DenseNet model, and load weights pretrained on ImageNet. Train it on the entire dataset.\n4. **Evaluation**: Display the plots from the training history.\n5. **Submission**: Run predictions with `model.predict`, and create submission csv file.\n\n### References\n* [cifar10_cnn_keras.py](https:\/\/github.com\/keras-team\/keras\/blob\/master\/examples\/cifar10_cnn.py): Heavily inspired from this tutorial created by the Keras team. The architecture and training process is directly taken from them.\n* [Keras CNN Starter - PetFinder](https:\/\/www.kaggle.com\/xhlulu\/keras-cnn-starter-petfinder\/): History plot and submission are inspired by this kernel\n* [Reducing Image Sizes to 32x32](https:\/\/www.kaggle.com\/xhlulu\/reducing-image-sizes-to-32x32): Image data (`X_train`, `X_test`) come from the output of this kernel.\n* [How to compute f1 score for each epoch in Keras](https:\/\/medium.com\/@thongonary\/how-to-compute-f1-score-for-each-epoch-in-keras-a1acd17715a2): Needed to compute the F1 Score after each epoch.\n* [CNN Baseline - iWildCam 2019](https:\/\/www.kaggle.com\/xhlulu\/cnn-baseline-iwildcam-2019): This is a fork of this notebook.","f478b05b":"## Creating and Training the Model","69d83c33":"## Loading the 32x32 dataset"}}