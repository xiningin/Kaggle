{"cell_type":{"6db9c9d0":"code","265271da":"code","3cc77e7b":"code","16a3a9d5":"code","32b28fbb":"code","1eec3d44":"code","5254188e":"code","5e9eaf19":"code","7e9ae429":"code","fd2d8406":"code","dd7ca2dc":"code","ab9d715e":"code","8b21a083":"code","a6799460":"code","bef9a335":"code","38bd1ffc":"code","0bdf01cf":"code","fb49ef87":"code","d55a38f7":"code","ae3142e0":"code","fd8e617d":"code","34a47c15":"code","dd4fc78a":"code","d5f0c8aa":"code","55ea98ef":"code","272d7de2":"code","4a6f468c":"code","14874cf9":"code","263dae1a":"code","b4e66c40":"code","543e7e09":"code","0d1c1ff1":"code","bc9c92ec":"code","8cff7d29":"code","87148fab":"code","9431e10c":"code","6d8f338b":"code","e44c0f1f":"code","6c2e9a6c":"code","41e92d7e":"code","d6930245":"code","522f9432":"code","90f29646":"code","84222d9e":"code","b2706c2c":"code","eb75a6ab":"code","0469784c":"code","c6360c1a":"code","60f2d26e":"code","2c0cff17":"code","55de3bf3":"code","514c69ed":"code","d57b5503":"code","5b90ae22":"code","bf2c3e90":"code","2225fed5":"code","4f5072b4":"code","99bb7767":"code","779279dc":"code","32202d71":"code","28260a26":"code","f147a252":"code","3eb321ff":"code","bd5e102c":"code","9ec3942e":"code","355378b1":"code","28a52369":"code","6b3e9382":"code","4b2fc1d3":"code","3f3501a2":"code","9a141532":"code","9b336c9e":"code","b13a151f":"code","60e8304f":"code","9788f105":"code","c068b4bf":"code","c4158ae2":"code","6fba9ae4":"code","2e1bcce1":"markdown","5753d3f6":"markdown","82151b3c":"markdown","5a8937c8":"markdown","3789650f":"markdown","9d866a07":"markdown","6c35468b":"markdown","350f6682":"markdown","c2cf93e4":"markdown","8174a146":"markdown","7f885321":"markdown","3ee81c3c":"markdown","1d569bb5":"markdown","eeb7abd3":"markdown","9567ec39":"markdown","8c5e9098":"markdown","83f1b5cf":"markdown","31fe2dae":"markdown","68eb2422":"markdown","3deb3a13":"markdown","1f5492fd":"markdown","42741ec8":"markdown","0bd1475f":"markdown","f9e6c22f":"markdown","0cf13840":"markdown","519bce49":"markdown","31677790":"markdown","7564b2fb":"markdown","c1876f3c":"markdown","9f2761cc":"markdown","7cc48b02":"markdown","19fc7347":"markdown","fac65a8f":"markdown","5d4fc2ec":"markdown","dbf602dd":"markdown","be4d4ddc":"markdown","89df2079":"markdown","f28f0163":"markdown","4ef6d87f":"markdown","230df4ab":"markdown"},"source":{"6db9c9d0":"# Importing Pandas and NumPy\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","265271da":"# Importing all datasets\nchurn_data = pd.read_csv(\"\/kaggle\/input\/telecom-issue\/churn_data.csv\")\ncustomer_data = pd.read_csv(\"\/kaggle\/input\/telecom-issue\/customer_data.csv\")\ninternet_data = pd.read_csv(\"\/kaggle\/input\/telecom-issue\/internet_data.csv\")","3cc77e7b":"print(len(churn_data))\nprint(len(customer_data))\nprint(len(internet_data))","16a3a9d5":"#Merging on 'customerID'\ndf_1 = pd.merge(churn_data, customer_data, how='inner', on='customerID')\ndf_1.head()","32b28fbb":"#Final dataframe with all predictor variables\ntelecom = pd.merge(df_1, internet_data, how='inner', on='customerID')\ntelecom.head()","1eec3d44":"# Let's see the head of our master dataset\ntelecom.head()","5254188e":"telecom.describe()","5e9eaf19":"# Converting Yes to 1 and No to 0\ntelecom['PhoneService'] = telecom['PhoneService'].map({'Yes': 1, 'No': 0})\ntelecom['PaperlessBilling'] = telecom['PaperlessBilling'].map({'Yes': 1, 'No': 0})\ntelecom['Churn'] = telecom['Churn'].map({'Yes': 1, 'No': 0})\ntelecom['Partner'] = telecom['Partner'].map({'Yes': 1, 'No': 0})\ntelecom['Dependents'] = telecom['Dependents'].map({'Yes': 1, 'No': 0})","7e9ae429":"# Creating a dummy variable for the variable 'Contract' and dropping the first one.\ncont = pd.get_dummies(telecom['Contract'],prefix='Contract',drop_first=True)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,cont],axis=1)\n\n# Creating a dummy variable for the variable 'PaymentMethod' and dropping the first one.\npm = pd.get_dummies(telecom['PaymentMethod'],prefix='PaymentMethod',drop_first=True)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,pm],axis=1)\n\n# Creating a dummy variable for the variable 'gender' and dropping the first one.\ngen = pd.get_dummies(telecom['gender'],prefix='gender',drop_first=True)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,gen],axis=1)\n\n# Creating a dummy variable for the variable 'MultipleLines' and dropping the first one.\nml = pd.get_dummies(telecom['MultipleLines'],prefix='MultipleLines')\n#  dropping MultipleLines_No phone service column\nml1 = ml.drop(['MultipleLines_No phone service'],1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ml1],axis=1)\n\n# Creating a dummy variable for the variable 'InternetService' and dropping the first one.\niser = pd.get_dummies(telecom['InternetService'],prefix='InternetService',drop_first=True)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,iser],axis=1)\n\n# Creating a dummy variable for the variable 'OnlineSecurity'.\nos = pd.get_dummies(telecom['OnlineSecurity'],prefix='OnlineSecurity')\nos1= os.drop(['OnlineSecurity_No internet service'],1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,os1],axis=1)\n\n# Creating a dummy variable for the variable 'OnlineBackup'.\nob =pd.get_dummies(telecom['OnlineBackup'],prefix='OnlineBackup')\nob1 =ob.drop(['OnlineBackup_No internet service'],1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ob1],axis=1)\n\n# Creating a dummy variable for the variable 'DeviceProtection'. \ndp =pd.get_dummies(telecom['DeviceProtection'],prefix='DeviceProtection')\ndp1 = dp.drop(['DeviceProtection_No internet service'],1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,dp1],axis=1)\n\n# Creating a dummy variable for the variable 'TechSupport'. \nts =pd.get_dummies(telecom['TechSupport'],prefix='TechSupport')\nts1 = ts.drop(['TechSupport_No internet service'],1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ts1],axis=1)\n\n# Creating a dummy variable for the variable 'StreamingTV'.\nst =pd.get_dummies(telecom['StreamingTV'],prefix='StreamingTV')\nst1 = st.drop(['StreamingTV_No internet service'],1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,st1],axis=1)\n\n# Creating a dummy variable for the variable 'StreamingMovies'. \nsm =pd.get_dummies(telecom['StreamingMovies'],prefix='StreamingMovies')\nsm1 = sm.drop(['StreamingMovies_No internet service'],1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,sm1],axis=1)","fd2d8406":"# We have created dummies for the below variables, so we can drop them\ntelecom = telecom.drop(['Contract','PaymentMethod','gender','MultipleLines','InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n       'TechSupport', 'StreamingTV', 'StreamingMovies'], 1)","dd7ca2dc":"#The varaible was imported as a string we need to convert it to float\ntelecom['TotalCharges']=pd.to_numeric(telecom['TotalCharges'],errors='coerce')\ntelecom['tenure'] = telecom['tenure'].astype(int).astype(float)","ab9d715e":"telecom.info()","8b21a083":"# Checking for outliers in the continuous variables\nnum_telecom = telecom[['tenure','MonthlyCharges','SeniorCitizen','TotalCharges']]","a6799460":"# Checking outliers at 25%,50%,75%,90%,95% and 99%\nnum_telecom.describe(percentiles=[.25,.5,.75,.90,.95,.99])","bef9a335":"# Checking the percentage of missing values\nround(100*(telecom.isnull().sum()\/len(telecom.index)), 2)","38bd1ffc":"# Removing NaN TotalCharges rows\ntelecom = telecom[~np.isnan(telecom['TotalCharges'])]","0bdf01cf":"# Checking percentage of missing values after removing the missing values\nround(100*(telecom.isnull().sum()\/len(telecom.index)), 2)","fb49ef87":"# Normalising continuous features\ndf = telecom[['tenure','MonthlyCharges','TotalCharges']]","d55a38f7":"normalized_df=(df-df.mean())\/df.std()\ntelecom = telecom.drop(['tenure','MonthlyCharges','TotalCharges'], 1)\ntelecom = pd.concat([telecom,normalized_df],axis=1)\ntelecom.head()","ae3142e0":"churn = (sum(telecom['Churn'])\/len(telecom['Churn'].index))*100\nchurn","fd8e617d":"from sklearn.model_selection import train_test_split\n\n# Putting feature variable to X\nX = telecom.drop(['Churn','customerID'],axis=1)\n\n# Putting response variable to y\ny = telecom['Churn']\n\ny.head()","34a47c15":"# Splitting the data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X,y, train_size=0.7,test_size=0.3,random_state=100)","dd4fc78a":"import statsmodels.api as sm","d5f0c8aa":"# Logistic regression model\nlogm1 = sm.GLM(y_train,(sm.add_constant(X_train)), family = sm.families.Binomial())\nlogm1.fit().summary()","55ea98ef":"# Importing matplotlib and seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","272d7de2":"# Let's see the correlation matrix \nplt.figure(figsize = (30,20))        # Size of the figure\nsns.heatmap(telecom.corr(),annot = True)\nplt.show()","4a6f468c":"X_test2 = X_test.drop(['MultipleLines_No','OnlineSecurity_No','OnlineBackup_No','DeviceProtection_No','TechSupport_No','StreamingTV_No','StreamingMovies_No'],1)\nX_train2 = X_train.drop(['MultipleLines_No','OnlineSecurity_No','OnlineBackup_No','DeviceProtection_No','TechSupport_No','StreamingTV_No','StreamingMovies_No'],1)","14874cf9":"plt.figure(figsize = (40,20))\nsns.heatmap(X_train2.corr(),annot = True)\nplt.show()","263dae1a":"logm2 = sm.GLM(y_train,(sm.add_constant(X_train2)), family = sm.families.Binomial())\nlogm2.fit().summary()","b4e66c40":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nfrom sklearn.feature_selection import RFE\nrfe = RFE(logreg, 13)             # running RFE with 13 variables as output\nrfe = rfe.fit(X,y)\nprint(rfe.support_)           # Printing the boolean results\nprint(rfe.ranking_)           # Printing the ranking","543e7e09":"# Variables selected by RFE \ncol = ['PhoneService', 'PaperlessBilling', 'Contract_One year', 'Contract_Two year',\n       'PaymentMethod_Electronic check','MultipleLines_No','InternetService_Fiber optic', 'InternetService_No',\n       'OnlineSecurity_Yes','TechSupport_Yes','StreamingMovies_No','tenure','TotalCharges']","0d1c1ff1":"# Let's run the model using the selected variables\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nlogsk = LogisticRegression(C=1e9)\n#logsk.fit(X_train[col], y_train)\nlogsk.fit(X_train, y_train)","bc9c92ec":"#Comparing the model with StatsModels\n#logm4 = sm.GLM(y_train,(sm.add_constant(X_train[col])), family = sm.families.Binomial())\nlogm4 = sm.GLM(y_train,(sm.add_constant(X_train)), family = sm.families.Binomial())\nmodres = logm4.fit()\nlogm4.fit().summary()","8cff7d29":"X_test[col].shape\n","87148fab":"# Predicted probabilities\ny_pred = logsk.predict_proba(X_test)\n# Converting y_pred to a dataframe which is an array\ny_pred_df = pd.DataFrame(y_pred)\n# Converting to column dataframe\ny_pred_1 = y_pred_df.iloc[:,[1]]\n# Let's see the head\ny_pred_1.head()","9431e10c":"# Converting y_test to dataframe\ny_test_df = pd.DataFrame(y_test)\ny_test_df.head()","6d8f338b":"# Putting CustID to index\ny_test_df['CustID'] = y_test_df.index\n# Removing index for both dataframes to append them side by side \ny_pred_1.reset_index(drop=True, inplace=True)\ny_test_df.reset_index(drop=True, inplace=True)\n# Appending y_test_df and y_pred_1\ny_pred_final = pd.concat([y_test_df,y_pred_1],axis=1)\n# Renaming the column \ny_pred_final= y_pred_final.rename(columns={ 1 : 'Churn_Prob'})\n# Rearranging the columns\ny_pred_final = y_pred_final.reindex(['CustID','Churn','Churn_Prob'], axis=1)\n# Let's see the head of y_pred_final\ny_pred_final.head()","e44c0f1f":"# Creating new column 'predicted' with 1 if Churn_Prob>0.5 else 0\ny_pred_final['predicted'] = y_pred_final.Churn_Prob.map( lambda x: 1 if x > 0.5 else 0)\n# Let's see the head\ny_pred_final.head()","6c2e9a6c":"from sklearn import metrics","41e92d7e":"# Confusion matrix \nconfusion = metrics.confusion_matrix( y_pred_final.Churn, y_pred_final.predicted )\nconfusion","d6930245":"# Predicted     Churn  not_churn  __all__\n# Actual\n# Churn            1354   174     1528\n# not_churn         248   334      582\n# __all__          1602   508     2110","522f9432":"#Let's check the overall accuracy.\nmetrics.accuracy_score(y_pred_final.Churn, y_pred_final.predicted)","90f29646":"print(metrics.classification_report(y_pred_final.Churn, y_pred_final.predicted))","84222d9e":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(6, 6))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return fpr, tpr, thresholds","b2706c2c":"draw_roc(y_pred_final.Churn, y_pred_final.predicted)","eb75a6ab":"#draw_roc(y_pred_final.Churn, y_pred_final.predicted)\n\"{:2.2f}\".format(metrics.roc_auc_score(y_pred_final.Churn, y_pred_final.Churn_Prob))","0469784c":"X_train.shape","c6360c1a":"from sklearn.decomposition import PCA","60f2d26e":"pca = PCA(random_state=42)","2c0cff17":"pca.fit(X_train)","55de3bf3":"pca.components_","514c69ed":"pca.explained_variance_ratio_","d57b5503":"var_cumu = np.cumsum(pca.explained_variance_ratio_)\nvar_cumu ","5b90ae22":"fig = plt.figure(figsize=[12,8])\nplt.vlines(x=15, ymax=1, ymin=0, colors=\"r\", linestyles=\"--\")\nplt.hlines(y=0.95, xmax=30, xmin=0, colors=\"g\", linestyles=\"--\")\nplt.plot(var_cumu)\nplt.ylabel(\"Cumulative variance explained\")\nplt.show()","bf2c3e90":"from sklearn.decomposition import IncrementalPCA","2225fed5":"pca_final = IncrementalPCA(n_components=16)\npca_final ","4f5072b4":"df_train_pca = pca_final.fit_transform(X_train)\ndf_train_pca","99bb7767":"df_train_pca.shape","779279dc":"corrmat = np.corrcoef(df_train_pca.transpose())\ncorrmat","32202d71":"corrmat.shape","28260a26":"plt.figure(figsize=[30,15])\nsns.heatmap(corrmat, annot=True)\nplt.show()","f147a252":"df_test_pca = pca_final.transform(X_test)\ndf_test_pca.shape","3eb321ff":"from sklearn.linear_model import LogisticRegression","bd5e102c":"learner_pca = LogisticRegression()\nlearner_pca ","9ec3942e":"model_pca = learner_pca.fit(df_train_pca, y_train)\nmodel_pca","355378b1":"pred_probs_test = model_pca.predict_proba(df_test_pca)\npred_probs_test","28a52369":"\"{:2.2}\".format(metrics.roc_auc_score(y_test, pred_probs_test[:,1]))","6b3e9382":"print(metrics.classification_report(y_test,model_pca.predict(df_test_pca)))","4b2fc1d3":"pca_again = PCA(0.9)\npca_again","3f3501a2":"df_train_pca2 = pca_again.fit_transform(X_train)\ndf_train_pca2","9a141532":"df_train_pca2.shape","9b336c9e":"learner_pca2 = LogisticRegression()\nlearner_pca2","b13a151f":"model_pca2 = learner_pca2.fit(df_train_pca2, y_train)\nmodel_pca2","60e8304f":"df_test_pca2 = pca_again.transform(X_test)\ndf_test_pca2","9788f105":"df_test_pca2.shape","c068b4bf":"pred_probs_test2 = model_pca2.predict_proba(df_test_pca2)[:,1]\npred_probs_test2","c4158ae2":"\"{:2.2}\".format(metrics.roc_auc_score(y_test, pred_probs_test2))","6fba9ae4":"print(metrics.classification_report(y_test,model_pca2.predict(df_test_pca2)))","2e1bcce1":"Perform PCA with 16 components","5753d3f6":"### Feature Standardisation","82151b3c":"Now let's run our model again after dropping highly correlated variables","5a8937c8":"### Splitting Data into Training and Test Sets","3789650f":"We have almost 27% churn rate","9d866a07":"### Dropping highly correlated variables.","6c35468b":"After dropping highly correlated variables now let's check the correlation matrix again.","350f6682":"Plotting the heatmap of the corr matrix","c2cf93e4":"### Data Preparation","8174a146":"### Dropping the repeated variables","7f885321":"Now we can see we have all variables as integer.","3ee81c3c":"Following it up with a logistic regression model","1d569bb5":"Making a scree plot for the explained variance","eeb7abd3":"### Importing and Merging Data","9567ec39":"Applying the transformation on the test set","8c5e9098":"### PCA on the data","83f1b5cf":"Looking at the explained variance ratio for each component","31fe2dae":"### Correlation Matrix","68eb2422":"### Checking the Correlation Matrix","3deb3a13":"It means that 11\/7043 = 0.001561834 i.e 0.1%, best is to remove these observations from the analysis","1f5492fd":"### Applying logistic regression on the data on our Principal components","42741ec8":"#### Components from the PCA","0bd1475f":"### Checking for Missing Values and Inputing Them","f9e6c22f":"## Model Building\nLet's start by splitting our data into a training set and a test set.","0cf13840":"### Feature Selection Using RFE","519bce49":"#### Note - \n- While computng the principal components, we must not include the entire dataset. Model building is all about doing well on the data we haven't seen yet!\n- So we'll calculate the PCs using the train data, and apply them later on the test data","31677790":"### Model Evaluation","7564b2fb":"Now we don't have any missing values","c1876f3c":"### Making Predictions","9f2761cc":"### Checking for Outliers","7cc48b02":"### Dummy Variable Creation","19fc7347":"Making predictions on the test set","fac65a8f":"#### Making it a little more unsupervised ","5d4fc2ec":"### Running Your First Training Model","dbf602dd":"### Re-Running the Model","be4d4ddc":"## Telecom Churn: Logistic Regression with PCA\n\nWith 21 predictor variables, we need to predict whether a particular customer will switch to another telecom provider or not. In telecom terminology, customer attrition is referred to as 'churn'.","89df2079":"#### Overall AUC score of 0.83 looks like we did a good job.\n","f28f0163":"From the distribution shown above, you can see that there no outliner in your data. The numbers are gradually increasing.","4ef6d87f":"### Let's understand the structure of our dataframe","230df4ab":"### Checking the Churn Rate"}}