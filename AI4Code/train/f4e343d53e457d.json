{"cell_type":{"5717a329":"code","2620a85d":"code","70fd8cdb":"code","3a0da2ed":"code","98184e0c":"code","ab8634c7":"code","eb381e01":"code","8eb0d723":"code","a558e934":"code","e711c2e1":"code","9f1faa52":"code","630a5e26":"code","b5668af1":"code","150e1582":"code","acf90f92":"markdown","74755c4c":"markdown","c69f657a":"markdown","f0c5958e":"markdown","58fd8222":"markdown","83d7e3c0":"markdown","c3e25b0c":"markdown","d4efbc95":"markdown","946a5854":"markdown","aa91d51a":"markdown","2df17c2b":"markdown"},"source":{"5717a329":"!pip install --user tensorflow_text","2620a85d":"from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score\nfrom sklearn.utils import shuffle\nfrom sklearn.svm import SVC\nfrom sklearn import model_selection\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nimport tensorflow_hub as hub\nimport tensorflow_text\n\nfrom tqdm import tqdm\nimport numpy as np\nimport pandas as pd\nimport re","70fd8cdb":"train = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")","3a0da2ed":"def clean(text):\n    text = re.sub(r\"http\\S+\", \" \", text) # remove urls\n    text = re.sub(r\"RT \", \" \", text) # remove rt\n    text = re.sub(r\"[^a-zA-Z\\'\\.\\,\\d\\s]\", \" \", text) # remove special character except # @ . ,\n    text = re.sub(r\"[0-9]\", \" \", text) # remove number\n    text = re.sub(r'\\t', ' ', text) # remove tabs\n    text = re.sub(r'\\n', ' ', text) # remove line jump\n    text = re.sub(r\"\\s+\", \" \", text) # remove extra white space\n    text = text.strip()\n    return text","98184e0c":"train.text = train.text.apply(clean)\ntest.text = test.text.apply(clean)","ab8634c7":"use = hub.load(\"https:\/\/tfhub.dev\/google\/universal-sentence-encoder-multilingual-large\/3\")","eb381e01":"X_train = []\nfor r in tqdm(train.text.values):\n  emb = use(r)\n  review_emb = tf.reshape(emb, [-1]).numpy()\n  X_train.append(review_emb)\n\nX_train = np.array(X_train)\ny_train = train.target.values\n\nX_test = []\nfor r in tqdm(test.text.values):\n  emb = use(r)\n  review_emb = tf.reshape(emb, [-1]).numpy()\n  X_test.append(review_emb)\n\nX_test = np.array(X_test)","8eb0d723":"train_arrays, test_arrays, train_labels, test_labels = train_test_split(X_train,y_train,test_size=0.05)","a558e934":"def svc_param_selection(X, y, nfolds):\n    #Cs = [0.001, 0.01, 0.1, 1, 10]\n    Cs = [1.070, 1.074, 1.075, 1.1, 1.125]\n    #gammas = [0.001, 0.01, 0.1, 1]\n    gammas = [2.065,2.075, 2.08]\n    param_grid = {'C': Cs, 'gamma' : gammas}\n    grid_search = GridSearchCV(SVC(kernel='rbf'), param_grid, cv=nfolds, n_jobs=8)\n    grid_search.fit(X, y)\n    grid_search.best_params_\n    return grid_search\n\nmodel = svc_param_selection(train_arrays,train_labels, 5)","e711c2e1":"model.best_params_","9f1faa52":"pred = model.predict(test_arrays)","630a5e26":"cm = confusion_matrix(test_labels,pred)\ncm","b5668af1":"accuracy = accuracy_score(test_labels,pred)\naccuracy","150e1582":"test_pred = model.predict(X_test)\nsubmission['target'] = test_pred.round().astype(int)\nsubmission.to_csv('submission.csv', index=False)","acf90f92":"## Best parameters:","74755c4c":"## Notebook approach.\n\nIn this approach, I've made used of universal sentences encoder from tensorflow_hub, to vectorize the sentences, and then SVM to do the classification. ","c69f657a":"## Loading universal sentences encoder.","f0c5958e":"## Data cleaning.","58fd8222":"## Loadind datasets.","83d7e3c0":"## Sentences embedding.","c3e25b0c":"## Training svm model.","d4efbc95":"## Accuracy","946a5854":"## Predictions over valuation data.","aa91d51a":"## Making submission","2df17c2b":"## Sampling over data train."}}