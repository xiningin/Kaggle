{"cell_type":{"2370d941":"code","30caccdf":"code","a89ec348":"code","adc27df7":"code","21e5de38":"code","2135eecc":"code","d6c5c20e":"code","45a8fd22":"code","d036573c":"code","018bb7e5":"code","97ab30c3":"code","87f4fc7a":"code","0af30a0d":"code","691683da":"code","954a3b30":"code","7e12cec1":"code","f5712e02":"code","657e09b8":"code","267f4b9e":"code","2b1f04eb":"code","e9f4418f":"code","3e313705":"code","4949c15b":"code","9b915de6":"code","a2a3296c":"code","96320e47":"code","0401a135":"code","7d715c3d":"code","a1e9aa68":"code","7218bf6b":"code","11a33048":"code","455b4da6":"code","3c2a3d36":"code","e0240913":"code","8211435a":"code","e324609c":"code","0db6841f":"code","86477e87":"markdown","835e707d":"markdown","f27f9a02":"markdown","291a81e9":"markdown","585ac9fe":"markdown","1abb0748":"markdown","0210d46d":"markdown","588a9702":"markdown","5dcf1bb7":"markdown","bbeb4498":"markdown","ecd34cf8":"markdown","c3eeda89":"markdown","1b760f5b":"markdown","f8ed95e8":"markdown"},"source":{"2370d941":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport warnings\nwarnings.filterwarnings('ignore')\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","30caccdf":"import numpy as np\nimport pandas as pd\nimport cv2\nfrom PIL import Image\nimport scipy\nimport itertools\nimport tensorflow as tf\nfrom tensorflow.keras.applications import *\nfrom tensorflow.keras.optimizers import *\nfrom tensorflow.keras.losses import *\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.callbacks import *\nfrom tensorflow.keras.preprocessing.image import *\nfrom tensorflow.keras.utils import *\n# import pydot\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import *\nfrom sklearn.model_selection import *\nimport tensorflow.keras.backend as K\nfrom sklearn import metrics\nfrom tqdm import tqdm, tqdm_notebook\nfrom colorama import Fore\nimport json\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom glob import glob\nfrom skimage.io import *\n%config Completer.use_jedi = False\nimport time\nfrom sklearn.decomposition import PCA\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nimport lightgbm as lgb\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import AdaBoostClassifier,RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.neighbors import *\nprint(\"All modules have been imported\")\n","a89ec348":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.YlOrRd):\n    plt.figure(figsize = (6,6))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=90)\n    plt.yticks(tick_marks, classes)\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    cm = np.round(cm,2)\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.show()","adc27df7":"info=pd.read_csv(\"..\/input\/mias-mammography\/Info.txt\",sep=\" \")\ninfo=info.drop('Unnamed: 7',axis=1)\ninfo.SEVERITY.fillna(0)","21e5de38":"from PIL import Image\nimport glob\nx= []\nfor filename in sorted(glob.glob(\"..\/input\/mias-mammography\/all-mias\/*.pgm\")): \n    img=cv2.imread(filename)\n    img =cv2.resize(img,(224, 224))\n    x.append(img)\n","2135eecc":"fig=plt.figure(figsize=(15,20))\ncolumns = 3\nrows = 4\nfor i in range(1, columns*rows +1):\n    img = np.random.randint(10)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(x[i])\nplt.show()","d6c5c20e":"# Image Augmentation\nno_angles = 360\nurl = '\/kaggle\/input\/mias-mammography\/all-mias\/'\n\ndef save_dictionary(path,data):\n        print('saving catalog...')\n        #open('u.item', encoding=\"utf-8\")\n        import json\n        with open(path,'w') as outfile:\n            json.dump(str(data), fp=outfile)\n        # save to file:\n        print(' catalog saved')","45a8fd22":"# train_test_split_datagen=ImageDataGenerator(\"augmentations such as flip,brightness range,etc....\")\n# val_datagen=ImageDataGenerator(\"augmentations such as flip,brightness range,etc....\")\n# test_datagen=ImageDataGenerator(\"augmentations such as flip,brightness range,etc....\")\ndef read_image():\n        print(\"Reading images\")\n        import cv2\n        info = {}\n        for i in range(322):\n            if i<9:\n                image_name='mdb00'+str(i+1)\n            elif i<99:\n                image_name='mdb0'+str(i+1)\n            else:\n                image_name = 'mdb' + str(i+1)\n            image_address= url+image_name+'.pgm'\n            img = cv2.imread(image_address,1)\n            img = cv2.resize(img, (224,224))\n            rows, cols,channel = img.shape\n            info[image_name]={}\n            for angle in range(0,no_angles,8):\n                M = cv2.getRotationMatrix2D((cols \/ 2, rows \/ 2), angle, 1) \n                img_rotated = cv2.warpAffine(img, M, (cols, rows))\n                info[image_name][angle]=img_rotated\n        return (info)\n","d036573c":"def read_lable():\n    print(\"Reading labels\")\n    filename = url+'Info.txt'\n    text_all = open(filename).read()\n    #print(text_all)\n    lines=text_all.split('\\n')\n    info={}\n    for line in lines:\n        words=line.split(' ')       \n        if len(words)>3:\n            if (words[3] == 'B'):\n                info[words[0]] = {}\n                for angle in range(0,no_angles,8):\n                    info[words[0]][angle] = 0\n            if (words[3] == 'M'):\n                info[words[0]] = {}\n                for  angle in range(0,no_angles,8):\n                    info[words[0]][angle] = 1\n    return (info)","018bb7e5":"import numpy as np\nlable_info=read_lable()\nimage_info=read_image()\nids=lable_info.keys() \ndel lable_info['Truth-Data:']\nX=[]\nY=[]\nfor id in ids:\n    for angle in range(0,no_angles,8):\n        X.append(image_info[id][angle])\n        Y.append(lable_info[id][angle])\nX=np.array(X)\nY=np.array(Y)\n#Y=to_categorical(Y,2)\nx_train, x_test1, y_train, y_test1 = train_test_split(X, Y, test_size=0.3, random_state=42,stratify=Y)\nx_val, x_test, y_val, y_test = train_test_split(x_test1, y_test1, test_size=0.3, random_state=42,stratify=y_test1)\nprint(len(x_train),len(x_val),len(x_test))","97ab30c3":"ann_model=Sequential()\nann_model.add(Dense(8, input_dim=10, activation = 'relu'))\n#ann_model.add(BatchNormalization())\n#ann_model.add(Dropout( 0.2))\nann_model.add(Dense(16, activation = 'relu'))\n#ann_model.add(BatchNormalization())\n#ann_model.add(Dropout( 0.2))\nann_model.add(Dense(32,activation = 'relu' ))\n#ann_model.add(Dense(32,activation = 'relu' ))\n#ann_model.add(BatchNormalization())\n#ann_model.add(Dropout( 0.2))\nann_model.add(Dense(16, activation = 'relu' ))\n#ann_model.add(Dense(8, activation = 'relu' ))\n#ann_model.add(BatchNormalization())\n#ann_model.add(Dropout( 0.2))\nann_model.add(Dense(1,activation='sigmoid'))\nann_model.summary()","87f4fc7a":"from sklearn.pipeline import make_pipeline\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.neighbors import *\nnames = [\n        \"K Nearest Neighbour Classifier\",\n        'SVM',\n        \"Random Forest Classifier\",\n        \"AdaBoost Classifier\", \n        \"XGB Classifier\",\n         ]\nclassifiers = [\n    KNeighborsClassifier(n_neighbors = 5, algorithm='ball_tree', leaf_size=30),\n    SVC(),\n    RandomForestClassifier(max_depth=9,criterion = 'entropy'),\n    AdaBoostClassifier(),\n    XGBClassifier(),\n        ]\nzipped_clf = zip(names,classifiers)","0af30a0d":"def classifier_summary(pipeline, X_train, y_train, X_val, y_val,X_test,y_test):\n    sentiment_fit = pipeline.fit(X_train, y_train)\n    \n    y_pred_train= sentiment_fit.predict(X_train)\n    y_pred_val = sentiment_fit.predict(X_val)\n    y_pred_test = sentiment_fit.predict(X_test)\n    \n    train_accuracy = np.round(accuracy_score(y_train, y_pred_train),4)*100\n    train_precision = np.round(precision_score(y_train, y_pred_train, average='weighted'),4)\n    train_recall = np.round(recall_score(y_train, y_pred_train, average='weighted'),4)\n    train_F1 = np.round(f1_score(y_train, y_pred_train, average='weighted'),4)\n    train_kappa =  np.round(cohen_kappa_score(y_train, y_pred_train),4)\n    \n    \n    val_accuracy = np.round(accuracy_score(y_val, y_pred_val),4)*100\n    val_precision = np.round(precision_score(y_val, y_pred_val, average='weighted'),4)\n    val_recall = np.round(recall_score(y_val, y_pred_val, average='weighted'),4)\n    val_F1 = np.round(f1_score(y_val, y_pred_val, average='weighted'),4)\n    val_kappa =  np.round(cohen_kappa_score(y_val, y_pred_val),4)\n   \n    \n    test_accuracy = np.round(accuracy_score(y_test, y_pred_test),4)*100\n    test_precision = np.round(precision_score(y_test, y_pred_test, average='weighted'),2)\n    test_recall = np.round(recall_score(y_test, y_pred_test, average='weighted'),2)\n    test_F1 = np.round(f1_score(y_test, y_pred_test, average='weighted'),2)\n    test_kappa =  np.round(cohen_kappa_score(y_test, y_pred_test),2) \n  \n    \n    \n    print()\n    print('------------------------ Train Set Metrics------------------------')\n    print()\n    print(\"Accuracy core : {}%\".format(train_accuracy))\n    cm=confusion_matrix(y_train,y_pred_train)\n    cm_plot=plot_confusion_matrix(cm,classes=['0','1'])\n    \n    print('------------------------ Validation Set Metrics------------------------')\n    print()\n    print(\"Accuracy score : {}%\".format(val_accuracy))\n    cm=confusion_matrix(y_val,y_pred_val)\n    cm_plot=plot_confusion_matrix(cm,classes=['0','1'])\n    print('------------------------ Test Set Metrics------------------------')\n    print()\n    print(\"Accuracy score : {}%\".format(test_accuracy))\n    print(\"F1_score : {}\".format(test_F1))\n    print(\"Kappa Score : {} \".format(test_kappa))\n    print(\"Recall score: {}\".format(test_recall))\n    print(\"Precision score : {}\".format(test_precision))\n    cm=confusion_matrix(y_test,y_pred_test)\n    cm_plot=plot_confusion_matrix(cm,classes=['0','1'])\n    \n    print(\"-\"*80)\n    print()\n","691683da":"def classifier_comparator(X_train,y_train,X_val,y_val,X_test,y_test,classifier=zipped_clf): \n    result = []\n    for n,c in classifier:\n        checker_pipeline = Pipeline([('Classifier', c)])\n        print(\"------------------------------Fitting {} on input_data-------------------------------- \".format(n))\n        #print(c)\n        classifier_summary(checker_pipeline,X_train, y_train, X_val, y_val,X_test,y_test)","954a3b30":"base_model= ResNet50(input_shape=(224,224,3), weights='imagenet', include_top=False)\nx = base_model.output\nx = Dropout(0.5)(x)\nx = Flatten()(x)\nx = BatchNormalization()(x)\nx = Dense(16,kernel_initializer='he_uniform')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\n#x = Dropout(0.5)(x)\npredictions = Dense(10, activation='softmax')(x)\nmodel_feat = Model(inputs=base_model.input,outputs=predictions)\ntrain_features = model_feat.predict(x_train)\nval_features=model_feat.predict(x_val)\ntest_features=model_feat.predict(x_test)\n","7e12cec1":"classifier_comparator(train_features,y_train,val_features,y_val,test_features,y_test,classifier=zipped_clf)","f5712e02":"train_y=y_train\nval_y=y_val\ntest_y=y_test\nann_model.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])\nhistory = ann_model.fit(train_features, train_y,validation_data=(val_features,val_y), epochs=20,class_weight={0:0.5,1:0.6})\nloss_value , accuracy = ann_model.evaluate(train_features, train_y)\nprint('Train_accuracy is:' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(val_features, val_y)\nprint('Validation_accuracy is := ' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(test_features, test_y)\nprint('test_accuracy is : = ' + str(accuracy))\n\nprint(\"Performance Report\")\ny_pred=ann_model.predict_classes(test_features)\ntarget=[\"B\",\"M\"]\nprint('Accuracy:', np.round(metrics.accuracy_score(y_test, y_pred),4))\nprint('Precision:', np.round(metrics.precision_score(y_test, y_pred, average='weighted'),4))\nprint('Recall:', np.round(metrics.recall_score(y_test,y_pred, average='weighted'),4))\nprint('F1 Score:', np.round(metrics.f1_score(y_test, y_pred, average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test, y_pred),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test, y_pred,target_names=target))\n\n","657e09b8":"base_model= ResNet101(input_shape=(224,224,3), weights='imagenet', include_top=False)\nx = base_model.output\nx = Dropout(0.5)(x)\nx = Flatten()(x)\nx = BatchNormalization()(x)\nx = Dense(16,kernel_initializer='he_uniform')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\n#x = Dropout(0.5)(x)\npredictions = Dense(10, activation='softmax')(x)\nmodel_feat = Model(inputs=base_model.input,outputs=predictions)\ntrain_features = model_feat.predict(x_train)\nval_features=model_feat.predict(x_val)\ntest_features=model_feat.predict(x_test)\nclassifier_comparator(train_features,y_train,val_features,y_val,test_features,y_test,classifier=zipped_clf)","267f4b9e":"train_y=y_train\nval_y=y_val\ntest_y=y_test\nann_model.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])\nhistory = ann_model.fit(train_features, train_y,validation_data=(val_features,val_y), epochs=20,class_weight={0:0.54,1:0.58})\nloss_value , accuracy = ann_model.evaluate(train_features, train_y)\nprint('Train_accuracy is:' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(val_features, val_y)\nprint('Validation_accuracy is := ' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(test_features, test_y)\nprint('test_accuracy is : = ' + str(accuracy))\n\nprint(\"Performance Report\")\ny_pred=ann_model.predict_classes(test_features)\ntarget=[\"B\",\"M\"]\nprint('Accuracy:', np.round(metrics.accuracy_score(y_test, y_pred),4))\nprint('Precision:', np.round(metrics.precision_score(y_test, y_pred, average='weighted'),4))\nprint('Recall:', np.round(metrics.recall_score(y_test,y_pred, average='weighted'),4))\nprint('F1 Score:', np.round(metrics.f1_score(y_test, y_pred, average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test, y_pred),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test, y_pred,target_names=target))\n\n","2b1f04eb":"base_model= VGG16(input_shape=(224,224,3), weights='imagenet', include_top=False)\nx = base_model.output\nx = Dropout(0.5)(x)\nx = Flatten()(x)\nx = BatchNormalization()(x)\nx = Dense(16,kernel_initializer='he_uniform')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\n#x = Dropout(0.5)(x)\npredictions = Dense(10, activation='softmax')(x)\nmodel_feat = Model(inputs=base_model.input,outputs=predictions)\ntrain_features = model_feat.predict(x_train)\nval_features=model_feat.predict(x_val)\ntest_features=model_feat.predict(x_test)\nclassifier_comparator(train_features,y_train,val_features,y_val,test_features,y_test,classifier=zipped_clf)","e9f4418f":"train_y=y_train\nval_y=y_val\ntest_y=y_test\nann_model.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])\nhistory = ann_model.fit(train_features, train_y,validation_data=(val_features,val_y), epochs=20,class_weight={0:0.5,1:0.62})\nloss_value , accuracy = ann_model.evaluate(train_features, train_y)\nprint('Train_accuracy is:' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(val_features, val_y)\nprint('Validation_accuracy is := ' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(test_features, test_y)\nprint('test_accuracy is : = ' + str(accuracy))\nprint(\"Performance Report\")\ny_pred=ann_model.predict_classes(test_features)\ntarget=[\"B\",\"M\"]\nprint('Accuracy:', np.round(metrics.accuracy_score(y_test, y_pred),4))\nprint('Precision:', np.round(metrics.precision_score(y_test, y_pred, average='weighted'),4))\nprint('Recall:', np.round(metrics.recall_score(y_test,y_pred, average='weighted'),4))\nprint('F1 Score:', np.round(metrics.f1_score(y_test, y_pred, average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test, y_pred),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test, y_pred,target_names=target))","3e313705":"base_model=VGG19(input_shape=(224,224,3), weights='imagenet', include_top=False)\nx = base_model.output\nx = Dropout(0.5)(x)\nx = Flatten()(x)\nx = BatchNormalization()(x)\nx = Dense(16,kernel_initializer='he_uniform')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\n#x = Dropout(0.5)(x)\npredictions = Dense(10, activation='softmax')(x)\nmodel_feat = Model(inputs=base_model.input,outputs=predictions)\ntrain_features = model_feat.predict(x_train)\nval_features=model_feat.predict(x_val)\ntest_features=model_feat.predict(x_test)\nclassifier_comparator(train_features,y_train,val_features,y_val,test_features,y_test,classifier=zipped_clf)\n","4949c15b":"train_y=y_train\nval_y=y_val\ntest_y=y_test\nann_model.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])\nhistory = ann_model.fit(train_features, train_y,validation_data=(val_features,val_y), epochs=20,class_weight={0:0.54,1:0.65})\nloss_value , accuracy = ann_model.evaluate(train_features, train_y)\nprint('Train_accuracy is:' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(val_features, val_y)\nprint('Validation_accuracy is := ' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(test_features, test_y)\nprint('test_accuracy is : = ' + str(accuracy))\nprint(\"Performance Report\")\ny_pred=ann_model.predict_classes(test_features)\ntarget=[\"B\",\"M\"]\nprint('Accuracy:', np.round(metrics.accuracy_score(y_test, y_pred),4))\nprint('Precision:', np.round(metrics.precision_score(y_test, y_pred, average='weighted'),4))\nprint('Recall:', np.round(metrics.recall_score(y_test,y_pred, average='weighted'),4))\nprint('F1 Score:', np.round(metrics.f1_score(y_test, y_pred, average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test, y_pred),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test, y_pred,target_names=target))","9b915de6":"base_model= InceptionV3(input_shape=(224,224,3), weights='imagenet', include_top=False)\nx = base_model.output\nx = Dropout(0.5)(x)\nx = Flatten()(x)\nx = BatchNormalization()(x)\nx = Dense(16,kernel_initializer='he_uniform')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\n#x = Dropout(0.5)(x)\npredictions = Dense(10, activation='softmax')(x)\nmodel_feat = Model(inputs=base_model.input,outputs=predictions)\ntrain_features = model_feat.predict(x_train)\nval_features=model_feat.predict(x_val)\ntest_features=model_feat.predict(x_test)\nclassifier_comparator(train_features,y_train,val_features,y_val,test_features,y_test,classifier=zipped_clf)","a2a3296c":"train_y=y_train\nval_y=y_val\ntest_y=y_test\nann_model.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])\nhistory = ann_model.fit(train_features, train_y,validation_data=(val_features,val_y), epochs=20)\nloss_value , accuracy = ann_model.evaluate(train_features, train_y)\nprint('Train_accuracy is:' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(val_features, val_y)\nprint('Validation_accuracy is := ' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(test_features, test_y)\nprint('test_accuracy is : = ' + str(accuracy))\nprint(\"Performance Report\")\ny_pred=ann_model.predict_classes(test_features)\ntarget=[\"B\",\"M\"]\nprint('Accuracy:', np.round(metrics.accuracy_score(y_test, y_pred),4))\nprint('Precision:', np.round(metrics.precision_score(y_test, y_pred, average='weighted'),4))\nprint('Recall:', np.round(metrics.recall_score(y_test,y_pred, average='weighted'),4))\nprint('F1 Score:', np.round(metrics.f1_score(y_test, y_pred, average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test, y_pred),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test, y_pred,target_names=target))","96320e47":"base_model= MobileNet(input_shape=(224,224,3), weights='imagenet', include_top=False)\nx = base_model.output\nx = Dropout(0.5)(x)\nx = Flatten()(x)\nx = BatchNormalization()(x)\nx = Dense(16,kernel_initializer='he_uniform')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\n#x = Dropout(0.5)(x)\npredictions = Dense(10, activation='softmax')(x)\nmodel_feat = Model(inputs=base_model.input,outputs=predictions)\ntrain_features = model_feat.predict(x_train)\nval_features=model_feat.predict(x_val)\ntest_features=model_feat.predict(x_test)\nclassifier_comparator(train_features,y_train,val_features,y_val,test_features,y_test,classifier=zipped_clf)","0401a135":"train_y=y_train\nval_y=y_val\ntest_y=y_test\nann_model.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])\nhistory = ann_model.fit(train_features, train_y,validation_data=(val_features,val_y), epochs=20)\nloss_value , accuracy = ann_model.evaluate(train_features, train_y)\nprint('Train_accuracy is:' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(val_features, val_y)\nprint('Validation_accuracy is := ' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(test_features, test_y)\nprint('test_accuracy is : = ' + str(accuracy))\nprint(\"Performance Report\")\ny_pred=ann_model.predict_classes(test_features)\ntarget=[\"B\",\"M\"]\nprint('Accuracy:', np.round(metrics.accuracy_score(y_test, y_pred),4))\nprint('Precision:', np.round(metrics.precision_score(y_test, y_pred, average='weighted'),4))\nprint('Recall:', np.round(metrics.recall_score(y_test,y_pred, average='weighted'),4))\nprint('F1 Score:', np.round(metrics.f1_score(y_test, y_pred, average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test, y_pred),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test, y_pred,target_names=target))","7d715c3d":"base_model= MobileNetV2(input_shape=(224,224,3), weights='imagenet', include_top=False)\nx = base_model.output\nx = Dropout(0.5)(x)\nx = Flatten()(x)\nx = BatchNormalization()(x)\nx = Dense(16,kernel_initializer='he_uniform')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\n#x = Dropout(0.5)(x)\npredictions = Dense(10, activation='softmax')(x)\nmodel_feat = Model(inputs=base_model.input,outputs=predictions)\ntrain_features = model_feat.predict(x_train)\nval_features=model_feat.predict(x_val)\ntest_features=model_feat.predict(x_test)\nclassifier_comparator(train_features,y_train,val_features,y_val,test_features,y_test,classifier=zipped_clf)","a1e9aa68":"train_y=y_train\nval_y=y_val\ntest_y=y_test\nann_model.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])\nhistory = ann_model.fit(train_features, train_y,validation_data=(val_features,val_y), epochs=20)\nloss_value , accuracy = ann_model.evaluate(train_features, train_y)\nprint('Train_accuracy is:' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(val_features, val_y)\nprint('Validation_accuracy is := ' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(test_features, test_y)\nprint('test_accuracy is : = ' + str(accuracy))\nprint(\"Performance Report\")\ny_pred=ann_model.predict_classes(test_features)\ntarget=[\"B\",\"M\"]\nprint('Accuracy:', np.round(metrics.accuracy_score(y_test, y_pred),4))\nprint('Precision:', np.round(metrics.precision_score(y_test, y_pred, average='weighted'),4))\nprint('Recall:', np.round(metrics.recall_score(y_test,y_pred, average='weighted'),4))\nprint('F1 Score:', np.round(metrics.f1_score(y_test, y_pred, average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test, y_pred),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test, y_pred,target_names=target))","7218bf6b":"base_model= DenseNet169(input_shape=(224,224,3), weights='imagenet', include_top=False)\nx = base_model.output\nx = Dropout(0.5)(x)\nx = Flatten()(x)\nx = BatchNormalization()(x)\nx = Dense(16,kernel_initializer='he_uniform')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\n#x = Dropout(0.5)(x)\npredictions = Dense(10, activation='softmax')(x)\nmodel_feat = Model(inputs=base_model.input,outputs=predictions)\ntrain_features = model_feat.predict(x_train)\nval_features=model_feat.predict(x_val)\ntest_features=model_feat.predict(x_test)\nclassifier_comparator(train_features,y_train,val_features,y_val,test_features,y_test,classifier=zipped_clf)","11a33048":"train_y=y_train\nval_y=y_val\ntest_y=y_test\nann_model.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])\nhistory = ann_model.fit(train_features, train_y,validation_data=(val_features,val_y), epochs=20)\nloss_value , accuracy = ann_model.evaluate(train_features, train_y)\nprint('Train_accuracy is:' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(val_features, val_y)\nprint('Validation_accuracy is := ' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(test_features, test_y)\nprint('test_accuracy is : = ' + str(accuracy))\nprint(\"Performance Report\")\ny_pred=ann_model.predict_classes(test_features)\ntarget=[\"B\",\"M\"]\nprint('Accuracy:', np.round(metrics.accuracy_score(y_test, y_pred),4))\nprint('Precision:', np.round(metrics.precision_score(y_test, y_pred, average='weighted'),4))\nprint('Recall:', np.round(metrics.recall_score(y_test,y_pred, average='weighted'),4))\nprint('F1 Score:', np.round(metrics.f1_score(y_test, y_pred, average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test, y_pred),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test, y_pred,target_names=target))","455b4da6":"base_model= DenseNet121(input_shape=(224,224,3), weights='imagenet', include_top=False)\nx = base_model.output\nx = Dropout(0.5)(x)\nx = Flatten()(x)\nx = BatchNormalization()(x)\nx = Dense(16,kernel_initializer='he_uniform')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\n#x = Dropout(0.5)(x)\npredictions = Dense(10, activation='softmax')(x)\nmodel_feat = Model(inputs=base_model.input,outputs=predictions)\ntrain_features = model_feat.predict(x_train)\nval_features=model_feat.predict(x_val)\ntest_features=model_feat.predict(x_test)\nclassifier_comparator(train_features,y_train,val_features,y_val,test_features,y_test,classifier=zipped_clf)\n","3c2a3d36":"train_y=y_train\nval_y=y_val\ntest_y=y_test\nann_model.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])\nhistory = ann_model.fit(train_features, train_y,validation_data=(val_features,val_y), epochs=20,class_weight={0:0.5,1:0.6})\nloss_value , accuracy = ann_model.evaluate(train_features, train_y)\nprint('Train_accuracy is:' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(val_features, val_y)\nprint('Validation_accuracy is := ' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(test_features, test_y)\nprint('test_accuracy is : = ' + str(accuracy))\nprint(\"Performance Report\")\ny_pred=ann_model.predict_classes(test_features)\ntarget=[\"B\",\"M\"]\nprint('Accuracy:', np.round(metrics.accuracy_score(y_test, y_pred),4))\nprint('Precision:', np.round(metrics.precision_score(y_test, y_pred, average='weighted'),4))\nprint('Recall:', np.round(metrics.recall_score(y_test,y_pred, average='weighted'),4))\nprint('F1 Score:', np.round(metrics.f1_score(y_test, y_pred, average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test, y_pred),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test, y_pred,target_names=target))","e0240913":"base_model= Xception(input_shape=(224,224,3), weights='imagenet', include_top=False)\nx = base_model.output\nx = Dropout(0.5)(x)\nx = Flatten()(x)\nx = BatchNormalization()(x)\nx = Dense(16,kernel_initializer='he_uniform')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\n#x = Dropout(0.5)(x)\npredictions = Dense(10, activation='softmax')(x)\nmodel_feat = Model(inputs=base_model.input,outputs=predictions)\ntrain_features = model_feat.predict(x_train)\nval_features=model_feat.predict(x_val)\ntest_features=model_feat.predict(x_test)\nclassifier_comparator(train_features,y_train,val_features,y_val,test_features,y_test,classifier=zipped_clf)\n\n\n\n","8211435a":"train_y=y_train\nval_y=y_val\ntest_y=y_test\nann_model.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])\nhistory = ann_model.fit(train_features, train_y,validation_data=(val_features,val_y), epochs=20,class_weight={0:0.5,1:0.6})\nloss_value , accuracy = ann_model.evaluate(train_features, train_y)\nprint('Train_accuracy is:' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(val_features, val_y)\nprint('Validation_accuracy is := ' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(test_features, test_y)\nprint('test_accuracy is : = ' + str(accuracy))\nprint(\"Performance Report\")\ny_pred=ann_model.predict_classes(test_features)\ntarget=[\"B\",\"M\"]\nprint('Accuracy:', np.round(metrics.accuracy_score(y_test, y_pred),4))\nprint('Precision:', np.round(metrics.precision_score(y_test, y_pred, average='weighted'),4))\nprint('Recall:', np.round(metrics.recall_score(y_test,y_pred, average='weighted'),4))\nprint('F1 Score:', np.round(metrics.f1_score(y_test, y_pred, average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test, y_pred),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test, y_pred,target_names=target))","e324609c":"base_model= InceptionResNetV2(input_shape=(224,224,3), weights='imagenet', include_top=False)\nx = base_model.output\nx = Dropout(0.5)(x)\nx = Flatten()(x)\nx = BatchNormalization()(x)\nx = Dense(16,kernel_initializer='he_uniform')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\n#x = Dropout(0.5)(x)\npredictions = Dense(10, activation='softmax')(x)\nmodel_feat = Model(inputs=base_model.input,outputs=predictions)\ntrain_features = model_feat.predict(x_train)\nval_features=model_feat.predict(x_val)\ntest_features=model_feat.predict(x_test)\nclassifier_comparator(train_features,y_train,val_features,y_val,test_features,y_test,classifier=zipped_clf)\n","0db6841f":"train_y=y_train\nval_y=y_val\ntest_y=y_test\nann_model.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])\nhistory = ann_model.fit(train_features, train_y,validation_data=(val_features,val_y), epochs=20)\nloss_value , accuracy = ann_model.evaluate(train_features, train_y)\nprint('Train_accuracy is:' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(val_features, val_y)\nprint('Validation_accuracy is := ' + str(accuracy))\nloss_value , accuracy = ann_model.evaluate(test_features, test_y)\nprint('test_accuracy is : = ' + str(accuracy))\nprint(\"Performance Report\")\ny_pred=ann_model.predict_classes(test_features)\ntarget=[\"B\",\"M\"]\nprint('Accuracy:', np.round(metrics.accuracy_score(y_test, y_pred),4))\nprint('Precision:', np.round(metrics.precision_score(y_test, y_pred, average='weighted'),4))\nprint('Recall:', np.round(metrics.recall_score(y_test,y_pred, average='weighted'),4))\nprint('F1 Score:', np.round(metrics.f1_score(y_test, y_pred, average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test, y_pred),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test, y_pred,target_names=target))","86477e87":"# Feature Extraction using Neural Networks\n\n# Classification using standard Classifiers\n\n## Neural Networks used:\n\n### 1.VGG-16\n### 2.VGG-19\n### 3.Resnet50\n### 4.Resnet101\n### 5.MobileNetv2\n### 6.MobileNet\n### 7.InceptionV3\n### 8.InceptionResntV2\n### 9.DenseNet169\n### 10.DenseNet121\n### 11.XceptionNet\n\n## Classifiers used:\n\n### 1.ANN ( Custom Architecture)\n### 2.SVM ==> SVC\n### 3.RandomForest\n### 4.AdaBoost\n### 5.Xgboost\n### 6.KNN\n#Note:Rerun Notebbok after finishing with one neural Network\n","835e707d":"# VGG16","f27f9a02":"# XceptionNet","291a81e9":"# ResNet-50","585ac9fe":"# Resnet101","1abb0748":"# InceptionV3","0210d46d":"# ANN Model","588a9702":"# VGG19","5dcf1bb7":"# DenseNet169","bbeb4498":"# InceptionResnetV2","ecd34cf8":"# DenseNet121","c3eeda89":"# MobileNet","1b760f5b":"# MobileNetV2","f8ed95e8":"# Creating Classification Pipeline"}}