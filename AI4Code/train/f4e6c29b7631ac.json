{"cell_type":{"c3a9b7d2":"code","bd383dfb":"code","88fe7672":"code","e6365fa0":"code","f8376e0e":"code","2182756d":"code","5aad8d55":"code","6d82694d":"code","0ab7cbae":"code","9a0fd9ca":"code","e1a8e7dc":"code","842b632a":"code","c3658aa4":"code","72793f49":"code","301554fc":"code","dab300fc":"code","0318c3da":"code","123c0d10":"code","078e9912":"code","40ac7647":"code","d854b85b":"code","542c6de3":"code","3e9604e9":"code","e2a395d1":"code","27fa7cfd":"code","b4b885b5":"code","439fed4f":"code","fdf0119e":"code","f7bf684e":"code","d6629c9c":"code","9ab40b3d":"code","a109fcfd":"code","b8627b92":"code","0add1720":"code","c6fff123":"code","c6bca243":"code","a4006f11":"code","a837f6d9":"code","7571ee23":"code","7632c764":"code","b0112e00":"code","ced07c12":"code","8d4f013b":"code","6e936bbe":"code","e4a3db22":"code","ad36e64a":"code","860d3947":"code","402a0431":"code","bf0cb7b0":"code","c42fa7dd":"code","3a524e96":"code","3c85f310":"code","beb5a82b":"code","dad152b2":"code","54b32e44":"markdown","e448a797":"markdown","953a1f81":"markdown","ba3b6ae3":"markdown","2992a4c3":"markdown","68f564c0":"markdown","b9b4d6c3":"markdown","d677a3d2":"markdown","8023d828":"markdown","d2ce94ac":"markdown","05da37dc":"markdown","7b45c793":"markdown","255077b9":"markdown","d9b4b678":"markdown","c7a3de53":"markdown","5ea00f6d":"markdown","f73c5e5b":"markdown","8cb86815":"markdown","0c99a689":"markdown","f5437466":"markdown","882b7493":"markdown","b12e6f83":"markdown","ade8f258":"markdown","9e61d1d3":"markdown","35182a62":"markdown","b8e1dfdb":"markdown","5691fb8d":"markdown","8762d86c":"markdown"},"source":{"c3a9b7d2":"#libraries for analysis and visualizatihon\nimport os\nimport pandas as pd \nimport numpy as np\nfrom collections import Counter\n# import sort_dataframeby_monthorweek as sd\nimport calendar\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium\nfrom folium.plugins import HeatMap\nimport plotly \nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\nimport cufflinks as cf\nfrom cufflinks.offline import go_offline\nimport warnings\n\n#libraries for ML\nimport sklearn\nfrom sklearn.model_selection import train_test_split, KFold, cross_validate, cross_val_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier\nimport eli5\n\n# %matplotlib notebook\nwarnings.filterwarnings('ignore')\ninit_notebook_mode()\ngo_offline(connected=False)\nbasemap=folium.Map()\ncolors = px.colors.qualitative.Prism","bd383dfb":"#show existing files\nos.listdir('..\/input\/hotel-booking-demand')","88fe7672":"#read the data\ndf = pd.read_csv('..\/input\/hotel-booking-demand\/hotel_bookings.csv')\n#make a cop of the original data\noriginal_df = df.copy()\ndf.head()","e6365fa0":"df.shape","f8376e0e":"df.info()","2182756d":"df[df.select_dtypes(exclude='object').columns].describe().\\\nstyle.background_gradient(axis=1,cmap=sns.light_palette('green', as_cmap=True))","5aad8d55":"# check for missing values\ndf.isnull().sum()","6d82694d":"#null percentage for each column\n\nprint(round(100*(df.isnull().sum()\/len(df.index)),2))","0ab7cbae":"plt.figure(figsize=(20,6))\nsns.heatmap(df.isnull(),cmap='viridis');","9a0fd9ca":"df[df.select_dtypes(exclude='object').columns].describe().\\\nstyle.background_gradient(axis=1,cmap=sns.light_palette('green', as_cmap=True))","e1a8e7dc":"#Correlation Map\ncorr = df.corr()\ncorr.iplot(kind='heatmap',colorscale='Blues',hoverinfo='all',\n           layout = go.Layout(title='Correlation Heatmap',titlefont=dict(size=20)))","842b632a":"#replace missing value in country column with 'unknown'\ndf['country'] = df['country'].fillna('unknown')\n\n#replace missing value in company column with 0\ndf['company'] = df['company'].fillna(0)\n\n#replace missing value in childern column with 0\ndf['children'] = df['children'].fillna(0)\n\n#replace missing value in agent column with 0\ndf['agent'] = df['agent'].fillna(0)","c3658aa4":"#converting date column to datestamp\ndf['reservation_status_date'] = pd.to_datetime(df['reservation_status_date'])\n\n#Lets create a new columns with the total number of nights stayed at the hotel\ndf['total_nights'] = df['stays_in_weekend_nights'] + df['stays_in_week_nights']\n\n#Lets create a new columns with the room pric for person (assuming the guest is an adult or a children)\ndf['price'] = df['adr'].div(df['adults'] + df['children'])\n\n#lets deal with the data without the rows contain a zero guests\nidx = df[(df['children']+df['adults']+df['babies'])==0].index #indecies of rows have zero guests\ndf = df[~df.index.isin(idx)]\ndf.shape","72793f49":"canceled = df[df['is_canceled']==1]\nnot_canceled = df[df['is_canceled']==0]\n\nprint('Canceled : {} ({} %)\\nNot Canceled : {} ({} %)'.\\\n      format(canceled.shape[0],round(canceled.shape[0]\/(canceled.shape[0]+not_canceled.shape[0])*100,2),\n             not_canceled.shape[0],round(canceled.shape[0]\/(canceled.shape[0]+not_canceled.shape[0])*100,2)))","301554fc":"df['hotel'].unique()","dab300fc":"#we have to hotels ('Resort Hotel', 'City Hotel')\nresort_hotel = df[(df['hotel']=='Resort Hotel')&(df['is_canceled']==0)]\ncity_hotel = df[(df['hotel']=='City Hotel')&(df['is_canceled']==0)]\n\nprint('Resort Hotel : {} ({} %)\\nCity Hotel : {} ({} %)'.\\\n      format(resort_hotel.shape[0],round(resort_hotel.shape[0]\/(resort_hotel.shape[0]+city_hotel.shape[0])*100,2),\n             city_hotel.shape[0],round(city_hotel.shape[0]\/(resort_hotel.shape[0]+city_hotel.shape[0])*100,2)))","0318c3da":"pd.concat([city_hotel,resort_hotel])['hotel'].iplot(kind='histogram',title='Total number of booking for each hotel')","123c0d10":"temp = pd.DataFrame([len(df) for df in [city_hotel,resort_hotel]])\\\n.rename(index={0:'City Hotel',1:'Resort Hotel'},columns={0:'count'}).reset_index()\n\nlayout = cf.Layout(title='Total number of booking for each hotel',titlefont=dict(size=20),\n                   xaxis=dict(title=''),yaxis=dict(title=''))\n\ntemp.iplot(kind='pie',hole=0.5,pull=0.03,textinfo='label+percent',\n           colors=colors,\n           values='count',labels='index',\n           layout=layout)","078e9912":"temp = pd.DataFrame()\ntemp['City Hotel'] = df[df['hotel']=='City Hotel']['is_canceled'].value_counts().values\ntemp['Resort Hotel'] = df[df['hotel']=='Resort Hotel']['is_canceled'].value_counts().values\ntemp = temp.T.rename(columns={0:'Not Canceled',1:'Canceled'})\n\nfig = px.bar(temp,\n             barmode='group',\n             x = temp.index,\n             y = [c for c in temp.columns],\n             template = 'plotly_white',\n             color_discrete_sequence = colors,\n             title='Grouped Bar Plot for total number booking for each hotel <br>With (Canceled or Not Canceled) as color')\n\nfig['layout'].update(titlefont=dict(size=20),\n                     xaxis=dict(title='Hotel',titlefont=dict(size=18)),\n                     yaxis=dict(title='Number of booking',titlefont=dict(size=18)))\nfig.show()","40ac7647":"temp = df['arrival_date_year']\n\ntemp.iplot(kind='histogram',\n           color=colors,\n           bargap=0.2,\n           title='Total guests for each year')","d854b85b":"temp = pd.DataFrame(index=df.groupby('customer_type').sum().index)\n\nfor hotel in df['hotel'].unique():\n    temp[hotel] = df[df['hotel']==hotel]['customer_type'].value_counts()\n    \ntemp = temp.sort_values('City Hotel',ascending=False)\ntemp.iplot(kind='bar',\n           colors=colors,\n           title='Total guests for  each hotel<br>Grouped by customer type')","542c6de3":"temp = pd.DataFrame(index=df.groupby(df['total_nights']).sum().index)\n\nfor hotel in df['hotel'].unique():\n    temp[hotel] = df[df['hotel']==hotel]['total_nights'].value_counts()\n    \ntemp = temp.sort_values('City Hotel',ascending=False)\ntemp.iplot(kind='bar',title='Total guests for  each hotel<br>Grouped by total nights stayed in each hotel')","3e9604e9":"temp = pd.DataFrame(index=df.groupby(df['arrival_date_month']).sum().index)\n\nfor hotel in df['hotel'].unique():\n    temp[hotel] = df[df['hotel']==hotel]['arrival_date_month'].value_counts()\n    \ntemp.iplot(kind='line',title='Total guests for  each hotel<br>By arrival date month in each hotel')\n\n#Try useing this to sort month indexn berfore plottting\n# temp = temp.sort_values('City Hotel',ascending=False).reset_index()\n\n# temp = sd.Sort_Dataframeby_Month(df=temp,monthcolumnname='arrival_date_month').set_index('arrival_date_month')","e2a395d1":"temp = pd.DataFrame(index=df.groupby(df['market_segment']).sum().index)\n\nfor hotel in df['hotel'].unique():\n    temp[hotel] = df[df['hotel']==hotel]['market_segment'].value_counts()\n    \ntemp = temp.sort_values('City Hotel',ascending=False)\ntemp.iplot(kind='bar',title='Total guests for  each hotel<br>Grouped by arrival date month in each hotel')","27fa7cfd":"temp = pd.DataFrame(index=df.groupby('arrival_date_month').mean().index)\n\ntemp['City Hotel Canceled'] = df[(df['hotel']=='City Hotel')&(df['is_canceled']==1)]['arrival_date_month'].value_counts()\ntemp['City Hotel Not Canceled'] = df[(df['hotel']=='City Hotel')&(df['is_canceled']==0)]['arrival_date_month'].value_counts()\n\ntemp.iplot(kind='bar',title='Number of Canceled and Non-Canceled reservation <br>Over the year for City Hotel')","b4b885b5":"temp = pd.DataFrame(index=df.groupby('arrival_date_month').mean().index)\n\ntemp['Resort Hotel Canceled'] = df[(df['hotel']=='Resort Hotel')&(df['is_canceled']==1)]['arrival_date_month'].value_counts()\ntemp['Resort Hotel Not Canceled'] = df[(df['hotel']=='Resort Hotel')&(df['is_canceled']==0)]['arrival_date_month'].value_counts()\n\ntemp.iplot(kind='bar',title='Number of Canceled and Non-Canceled reservation<br>Over the year for Resort Hotel')","439fed4f":"temp = pd.DataFrame(index=df['arrival_date_month'].unique())\n\nfor year in df['arrival_date_year'].unique():\n    temp[year] = df[df['arrival_date_year']==year]['arrival_date_month'].value_counts()\n    \n\n#Try useing this to sort month indexn berfore plottting\n# temp = temp.reset_index()\n# temp = sd.Sort_Dataframeby_Month(df=temp,monthcolumnname='index').set_index('index')\n\ntemp.iplot(kind='bar',\n          title='Total guests over the year for each year<br>(2015-2016-2017)')","fdf0119e":"country_df = df['country'].value_counts().to_frame().rename(columns={'country':'Total Booking'})\ncountry_df.head(10).style.background_gradient(cmap='PuBu')","f7bf684e":"temp = df[df['is_canceled']==0]['country'].value_counts()\n\ntemp.iplot(kind='bar',title='Bar Plot for total Guests by Countries')","d6629c9c":"temp = pd.DataFrame()\n\ntemp['City Hotel'] = pd.Series(df[(df['hotel']=='City Hotel')&(df['is_canceled']==0)]['country'].value_counts().values)\ntemp['Resort Hotel'] = pd.Series(df[(df['hotel']=='Resort Hotel')&(df['is_canceled']==0)]['country'].value_counts().values)\n\nidx_number = max(len(temp['City Hotel']),len(temp['Resort Hotel']))\n\ntemp.set_index(df[(df['is_canceled']==0)]['country'].value_counts().index[:idx_number],inplace=True)\n\n\ntemp.iplot(kind='bar',title='Bar Plot for total Guests by Countries for each hotel')","9ab40b3d":"temp = df[df['is_canceled']==0]['country'].value_counts().reset_index()\n\nlayout = cf.Layout(xaxis=dict(title=''),yaxis=dict(title=''),\n                  title='Pie Plot For Guests Countries',\n                  titlefont=dict(size=20),\n                  height=700,width=1000)\n\ntemp.iplot(kind='pie',\n           labels='index',\n           values='country',\n           textinfo='value+percent+label',\n           layout=layout,pull=0.03,sort=True)","a109fcfd":"# show on map\n\ntemp = df['country'].value_counts().reset_index().rename(columns={'index':'country','country':'count'})\n\nguest_map = px.choropleth(temp,\n                          locations=temp['country'],\n                          color=np.log(temp['count']), \n                          hover_name=temp['country'], \n                          color_continuous_scale=px.colors.sequential.Plasma,\n                          title=\"Home country of guests\")\n\nguest_map.show()","b8627b92":"#Price Histogram \ndf['price'].iplot(kind='histogram',title='Room price per night and person Distribution')","0add1720":"#Detecting the outliers\ndef detect_outliers(df ,feature ,class_name ,target_feat):\n    class_in_feature = df[df[feature]==class_name][target_feat]\n    q25 , q75 = np.percentile(class_in_feature ,25) , np.percentile(class_in_feature ,75)\n    iqr = q75 - q25\n    threshold = 1.5\n    lower ,upper = (q25 - threshold * iqr), (q75 + threshold * iqr)\n    outliers = [x for x in class_in_feature if x < lower or x > upper]\n    \n    print(' Outliers for {} : {}'.format(class_name,len(outliers)))\n    print(' Quartile_25 : {}'.format(q25),'\\n','Quartile_75 : {}'.format(q75),'\\n','IQR : {}'.format(iqr))\n    print(' Cut Off: {}'.format(threshold*iqr))\n    print(' {} Lower: {}'.format(target_feat ,lower))\n    print(' {} Upper: {}'.format(target_feat ,upper))\n    print('\\n',50*'=','\\n')","c6fff123":"detect_outliers(df,'hotel','City Hotel','price')\ndetect_outliers(df,'hotel','Resort Hotel','price')","c6bca243":"temp = df.copy()\ntemp.loc[temp['price'] > 200,'price'] = 200\n\ndata_1 = df['price'].reset_index().rename(columns=lambda x:x.capitalize() +' With Outliers')\ndata_2 = temp.rename(columns=lambda x:x.capitalize() +' Without Outliers')\n\ndata_1['Price With Outliers'].iplot(kind='hist',\n                               subplots=True,\n                               horizontal_spacing=.1,\n                               fill=True,\n                               subplot_titles=True,\n                               title='Room price per night and person Distribution With Outliers')\n       \ndata_2['Price Without Outliers'].iplot(kind='hist',\n                               subplots=True,\n                               horizontal_spacing=.1,\n                               fill=True,\n                               subplot_titles=True,\n                               title='Room price per night and person Distribution Without Outliers')       ","a4006f11":"temp = pd.DataFrame(index=df.index)\n\nfor year in df['arrival_date_year'].unique():\n    temp[year] = pd.Series(df[df['arrival_date_year']==year]['price'])\n    \ntemp.iplot(kind='box',\n          title='Room price per night and person for each year<br>(2015-2016-2017)')","a837f6d9":"temp = df.groupby('country').mean()['price'][:20].to_frame().sort_values('price',ascending=False)\n\ntemp.iplot(kind='bar',colorscale='set1',title='Bar Plot for the mean Room price per night and person<br>For top ten countries')","7571ee23":"# show on map\n\ntemp = df.groupby('country')['price'].mean().to_frame().sort_values('price',ascending=False).reset_index()\n\nguest_map = px.choropleth(temp,\n                          locations=temp['country'],\n                          color=np.log(temp['price']), \n                          hover_name=temp['country'], \n                          color_continuous_scale=px.colors.sequential.Plasma,\n                          title=\"Room price per night and person<br>For each country\")\n\nguest_map.show()\n# temp","7632c764":"temp = df.groupby('reserved_room_type')['price'].mean().to_frame().sort_values('price',ascending=False)\n\ntemp.iplot(kind='bar',colorscale='set1',title='Bar Plot for the  Room mean price per night and person<br>For each reserved room type')","b0112e00":"temp = df.groupby('customer_type')['price'].mean().to_frame().sort_values('price',ascending=False)\n\ntemp.iplot(kind='bar',colorscale='set1',title='Bar Plot for the  Room mean price per night and person<br>For each reserved room type')","ced07c12":"temp = df.groupby('market_segment')['price'].mean().to_frame().sort_values('price',ascending=False)\n\ntemp.iplot(kind='bar',colorscale='set1',title='Bar Plot for the  Room mean price per night and person<br>For each reserved room type')","8d4f013b":"temp = pd.DataFrame(index=df.groupby('arrival_date_month').mean().index)\n\ntemp['City Hotel'] = df[df['hotel']=='City Hotel'].groupby('arrival_date_month').mean()['price'].to_frame()\n\ntemp['Resort Hotel'] = df[df['hotel']=='Resort Hotel'].groupby('arrival_date_month').mean()['price'].to_frame()\n\n# temp = temp.reset_index()\n# temp = temp.reset_index()\n# temp = sd.Sort_Dataframeby_Month(df=temp,monthcolumnname='arrival_date_month').set_index('arrival_date_month')\n\ntemp.iplot(kind='line',title='Room mean price per night and person over the year')","6e936bbe":"temp = pd.DataFrame(index=df.groupby('reserved_room_type').sum().index)\n\nfor seg in df['market_segment'].unique():\n    temp[seg] = df[df['market_segment']==seg].groupby('reserved_room_type').mean()['price']\n    \ntemp.T.iplot(kind='bar',title='Room mean price per night and person<br>By market segment and reserved room type')","e4a3db22":"temp = df.groupby('market_segment').sum()\ntemp = temp[['lead_time','previous_cancellations','previous_bookings_not_canceled','agent','adr','total_of_special_requests']]\ntemp.head().style.background_gradient(cmap='PuBu')","ad36e64a":"temp = df['market_segment'].value_counts().to_frame().rename(columns={'market_segment':'Total Guests'}).reset_index()\n\ntemp.iplot(kind='pie',\n           labels='index',\n           values='Total Guests',\n           textinfo='label+percent',\n           title='Total Guests for each market segment',\n           pull=0.03,sort=True)","860d3947":"temp = pd.DataFrame(index=df.hotel.unique())\nfor seg in df['market_segment'].unique():\n    temp[seg] = df[df['market_segment']==seg]['hotel'].value_counts()\n    \ntemp.T.iplot(kind='bar',title='Total number of guests for each hotel by market segment')","402a0431":"temp = pd.DataFrame(index=df['reserved_room_type'].unique())\nfor seg in df['market_segment'].unique():\n    temp[seg] = df[df['market_segment']==seg]['reserved_room_type'].value_counts()\n    \ntemp.T.iplot(kind='bar',title='Total number of guests for each hotel by market segment')","bf0cb7b0":"temp = pd.DataFrame(index=df.index)\n\nfor seg in df['market_segment'].unique():\n    temp[seg] = pd.Series(df[df['market_segment']==seg]['price'].values)\n    \ntemp.iplot(kind='box',\n           mean=True,\n           title='Price Distribution for each market segment')","c42fa7dd":"temp = pd.DataFrame(index=df.index)\n\nfor seg in df['market_segment'].unique():\n    temp['Resort Hotel '+seg] = pd.Series(df[(df['market_segment']==seg)&(df['hotel']=='Resort Hotel')]['total_nights'].values)\n    temp['City Hotel '+seg] = pd.Series(df[(df['market_segment']==seg)&(df['hotel']=='City Hotel')]['total_nights'].values)\n\ntemp.iplot(kind='box',\n           mean=True,\n           xTitle='Market Segment',\n           yTitle='Total Nights',\n           title='Total Nights Stayed Distribution<br>For each market segment by hotel')","3a524e96":"temp = df['meal'].value_counts().to_frame().reset_index()\n\nlayout = cf.Layout(title='Total booking meals',\n                   titlefont=dict(size=25),\n                  xaxis=dict(title=''),yaxis=dict(title=''))\n\ntemp.iplot(kind='pie',\n           labels='index',\n           values='meal',\n           hole=0.5,pull=0.02,\n           colors=colors,\n           layout=layout,\n           textinfo='label+percent')","3c85f310":"temp = pd.DataFrame(index=df.index)\n\nfor meal in df['meal'].unique():\n    temp[meal] = pd.Series(df[df['meal']==meal]['price'].values)\n    \ntemp.iplot(kind='box',\n           mean=True,\n           title='Price Distribution<br>For each Meal')\n","beb5a82b":"cols = ['price','total_nights','children','lead_time','days_in_waiting_list',\n        'previous_cancellations','adults','previous_bookings_not_canceled']\n\ndf[cols].iplot(kind='hist',\n               subplots=True,\n               horizontal_spacing=.2,\n               fill=True,\n               dimensions=(1000,1000),\n               subplot_titles=True,\n               title='Data Distribution')","dad152b2":"df_cln = df.copy()\n\ncols = ['price','total_nights','children','lead_time','days_in_waiting_list',\n        'previous_cancellations','adults','previous_bookings_not_canceled']\n\ndf_cln.loc[df_cln['price'] > 200,'price'] = 200\ndf_cln.loc[df_cln['total_nights'] > 15,'LeadTime'] = 15\ndf_cln.loc[df_cln['children'] > 3,'children'] = 3\ndf_cln.loc[df_cln['lead_time'] > 500,'lead_time'] = 500\ndf_cln.loc[df_cln['adults'] > 4,'adults'] = 4\ndf_cln.loc[df_cln['previous_bookings_not_canceled'] > 0,'previous_bookings_not_canceled'] = 1\ndf_cln.loc[df_cln['previous_cancellations'] > 0,'previous_cancellations'] = 1\ndf_cln.loc[df_cln['days_in_waiting_list'] > 0,'days_in_waiting_list'] = 1\n\ndf_cln[cols].iplot(kind='hist',\n               subplots=True,\n               horizontal_spacing=.2,\n               fill=True,\n               dimensions=(1000,1000),\n               subplot_titles=True,\n               title='Data Distribution Without outliers')","54b32e44":"><B>Dealing With The Missing Values","e448a797":"<h3>Conclusion<\/h3><br>\n<b>We found that L-Type Room has the highest mean price !","953a1f81":"<h3>Conclusion<\/h3><br>\n<b>There is a big difference in the Bed&Breakfast (BB) category and the others. Almost 80% of bookings reserved for Bed & Breakfast(BB).","ba3b6ae3":"<h3> Conclusion<\/h3><br>\n<b>It can be seen that most of the groups are normal distributed, some of them have high skewness. Looking at the distribution, most people do not seem to prefer to stay at the hotel for more than 1 week. But it seems normal to stay in resort hotels for up to 12-13 days\nIt is obvious that when people go to resort hotels, they prefer to stay more.","2992a4c3":"<h3>Conclusion<\/h3><br>\n<b>We found that Transient guest pay the most !","68f564c0":">><b>Pie Plot","b9b4d6c3":"<h3>Conclusion<\/h3><br>\n<b>Most hotel guests in each hotel come from Portugal","d677a3d2":"# Cleaning The Data","8023d828":"<b>Dealing With the outliers in these columns","d2ce94ac":"<b>Lets see the effect of outliers in the data","05da37dc":"### <b><h2 align=\"center\" style='color:black' > Thanks<\/h2>\n### <li>Machine learning part will be added soon<\/li>","7b45c793":"### <h1 align=\"center\"> Hotel booking demand<\/h1>\n<h2 align=\"lef\" style='color:red' > Upvote my work if you found it useful<\/h2>\n<h2 align=\"lef\" style='color:red'>Wait a few seconds until the notebook is ready<\/h2>\n<img src='https:\/\/www.h-hotels.com\/_Resources\/Persistent\/dfd5c8fd7ab85af2515443995a2497e88bd1151b\/aussenansicht-nacht-03-h4-hotel-berlin-alexanderplatz-2400x1113-1356x629.jpg' width=1000 hight=100><br>\n<b>You can also see:<\/b><br>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/data-exploration-and-visualization-uber-data'>Data exploration and visualization(Uber Data)<\/a><br>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/suicide-rates-visualization-and-geographic-maps\/edit\/run\/53135916'>Suicide Rates visualization and Geographic maps<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/superstore-data-analysis-with-plotly-clustering'>Superstore Data Analysis With Plotly(Clustering)<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/superstore-analysis-with-cufflinks-and-pandas'>Superstore Analysis With Cufflinks and pandas<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/european-soccer-database-with-sqlite3'>Chinook Questions with sqlite<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/chinook-questions-with-sqlite'>European soccer database with sqlite3<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/chinook-questions-with-sqlite'>Chinook data questions with sqlite3<\/a>","255077b9":"# Exploratory Data Analysis","d9b4b678":"### Meal Analysis","c7a3de53":"<h3> Conclusion<\/h3><br>\n<b>The columns have highest correlation values with is_canceled column are:<\/b>\n<li>lead_time wiht <b>0.293123<\/b>\n<li>total_of_special_requests with <b>-0.234658<\/b>  \n<li>required_car_parking_spaces with <b>0.195498<\/b>\n<li>previous booking_changes with <b>-0.144381<\/b>\n<li>previous_cancellations with <b>0.110133<\/b>","5ea00f6d":"<b>We find that the Aviation segment has low guests count, but also has the highest price","f73c5e5b":"<h3>Conclusion<\/h3><br>\n<b>We found that there are only two rows have country Antarctica, But it stil the highest mean price !","8cb86815":"<b>We can see the effect of outliers clearly in price distribution","0c99a689":">><b>Map","f5437466":"> <b>Lets See the effects of outlier and we will deal with it later","882b7493":"### Price Analysis","b12e6f83":"><h1>Country","ade8f258":"<h3>Conclusion<\/h3><br>\n<b>City Hotel hase more guests than Resort Hotel and also has higher cancelation ","9e61d1d3":"### Market Segment Analysis","35182a62":"<B>We can see the effect of outliers on the data clearly \n<p>let's proceed our EDA","b8e1dfdb":"<h1>Outliers<\/h1>","5691fb8d":"<b>Computing the number of guest wich did not cancel the reservation for each country\n>><b>Bar Plot","8762d86c":"<h3> Conclusion<\/h3><br>\n<b>We have missing values in Country, agent, company and childeren columns, but the most missing values are in company columns"}}