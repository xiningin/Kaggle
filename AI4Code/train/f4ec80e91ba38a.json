{"cell_type":{"acacab77":"code","0aff34ca":"code","706ab6ec":"code","1b25a560":"code","3942b21b":"code","bf477954":"code","80b96941":"code","642a214a":"code","83e191bb":"code","1a3cc47b":"code","96ac6223":"code","6f49219c":"code","b8df46f2":"code","127ec7a8":"code","bcce9a18":"code","c089107e":"code","7a1fbc94":"code","01cb5416":"code","da1292d2":"code","839a3a55":"code","d3278a6d":"code","623409d7":"code","b3163618":"code","e8d2e6bd":"code","5dcc9693":"code","c4e89737":"code","94973efe":"code","a2d5c171":"code","b6a558fa":"code","3d7b2173":"code","dbf69a8d":"code","75bd94a0":"code","ebb7b8d0":"code","1a2f94a8":"code","320ac79a":"code","ed6b43df":"code","738b635c":"code","9fd1c153":"code","df708335":"code","cd460042":"markdown","2268933e":"markdown","419c155c":"markdown","01215df0":"markdown","2deb66fb":"markdown","bd894806":"markdown","d1d14a61":"markdown","c574bdff":"markdown","bdd46d90":"markdown","d651aa9f":"markdown","6974b0e0":"markdown","3b11b465":"markdown","5b831a34":"markdown","d1c174ec":"markdown","c8c3bc74":"markdown","9fcd7d83":"markdown","01671c98":"markdown","0d1483e9":"markdown","9fe3ebae":"markdown","682ff261":"markdown","9ae9cf19":"markdown","02c9c175":"markdown","3ccf190b":"markdown","501f4d91":"markdown","09800ff9":"markdown","f440d039":"markdown","e97a3c5d":"markdown"},"source":{"acacab77":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nimport warnings\nfrom sklearn.model_selection import train_test_split , GridSearchCV , RandomizedSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier , AdaBoostClassifier ,ExtraTreesClassifier , GradientBoostingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import SGDClassifier , LogisticRegression\nfrom sklearn.metrics import f1_score,classification_report , SCORERS , precision_recall_curve\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.feature_selection import SelectKBest , f_classif\nimport xgboost as xgb\nwarnings.filterwarnings('ignore')","0aff34ca":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","706ab6ec":"data = pd.read_csv('\/kaggle\/input\/water-potability\/water_potability.csv')\ndata.head()","1b25a560":"# Let's take a look of data shape\nprint('Data Shape is {}'.format(data.shape))","3942b21b":"data.info()","bf477954":"# Description of Data\ndata.describe()","80b96941":"#Finding the missing Values\nsns.heatmap(data.isna())","642a214a":"# Percentage of missing Values \ndata.isna().sum()\/data.shape[0]","83e191bb":"sns.countplot(x = \"Potability\" , data = data)","1a3cc47b":"# Binary Classification : We will see the percentage of each class\ndata['Potability'].value_counts()\/data.shape[0]","96ac6223":"potability_water = data[data['Potability']==1]\nnon_potability_water = data[data['Potability'] ==0]","6f49219c":"def plot_numerical_features(data):\n    features_list = data.columns[:-1]\n    plt.figure(figsize=(12,12))\n    for i in range(len(features_list)):\n        plt.subplot(3,3,i+1)\n        sns.distplot(x = data[features_list[i]])\n        plt.title(features_list[i])\n        \nplot_numerical_features(data)","b8df46f2":"def plot_numerical_features_with_target(data ,data1,data2):\n    features_list = data.columns[:-1]\n    plt.figure(figsize=(12,12))\n    for i in range(len(features_list)):\n        plt.subplot(3,3,i+1)\n        sns.distplot(x = data1[features_list[i]] , label = \"Potable Water\")\n        sns.distplot(x = data2[features_list[i]] , label = \"Non Potable Water\")\n        plt.legend()\n        \nplot_numerical_features_with_target(data ,potability_water,non_potability_water)","127ec7a8":"plt.figure(figsize=(12,12))\nsns.heatmap(data.corr() , annot = True)","bcce9a18":"potability_ph_mean  = potability_water['ph'].mean()\nnon_potability_ph_mean = non_potability_water['ph'].mean()\nprint('Potability  PH Mean :' , potability_ph_mean)\nprint('Non Potability  PH Mean :' , non_potability_ph_mean)","c089107e":"potability_sulfate_mean = potability_water['Sulfate'].mean()\nnon_potability_sulfate_mean = non_potability_water['Sulfate'].mean()\nprint('Potability Sulfate Mean :' , potability_sulfate_mean)\nprint('Non Potability Sulfate Mean :' , non_potability_sulfate_mean)\n","7a1fbc94":"potability_tri_mean = potability_water['Trihalomethanes'].mean()\nnon_potability_tri_mean = non_potability_water['Trihalomethanes'].mean()\nprint('Potability Trihalomethanes Mean :' , potability_tri_mean)\nprint('Non Potability Trihalomethanes Mean :' , non_potability_tri_mean)","01cb5416":"data.loc[data['Potability'] == 1,'ph'] = data.loc[data['Potability'] == 1,'ph'].fillna(potability_ph_mean)\ndata.loc[data['Potability'] == 0,'ph'] = data.loc[data['Potability'] == 0,'ph'].fillna(non_potability_ph_mean)","da1292d2":"data.loc[data['Potability'] == 1,'Sulfate'] = data.loc[data['Potability'] == 1,'Sulfate'].fillna(potability_sulfate_mean)\ndata.loc[data['Potability'] == 0,'Sulfate'] = data.loc[data['Potability'] == 0,'Sulfate'].fillna(non_potability_sulfate_mean)","839a3a55":"data.loc[data['Potability'] == 1,'Trihalomethanes'] = data.loc[data['Potability'] == 1,'Trihalomethanes'].fillna(potability_tri_mean)\ndata.loc[data['Potability'] == 0,'Trihalomethanes'] = data.loc[data['Potability'] == 0,'Trihalomethanes'].fillna(non_potability_tri_mean)","d3278a6d":"def type_water(x):\n    if x < 7:\n        return 'Acidic'\n    elif (x>=7) & (x<8):\n        return 'Neutral'\n    else:\n        return 'Alkaline'","623409d7":"def water_hardness(x):\n    if x<17.1:\n        return 'Soft'\n    elif (x>=17.1) & (x<60):\n        return 'Sightly Hard'\n    elif (x>=60) & (x<120):\n        return 'Moderately Hard'\n    elif (x>=120) & (x<180):\n        return 'Hard'\n    else:\n        return 'Very Hard'","b3163618":"data['water_type'] = data['ph'].apply(lambda x : type_water(x))\ndata['water_hardness'] = data['Hardness'].apply(lambda x : water_hardness(x))","e8d2e6bd":"data.head()","5dcc9693":"type_water_dict = {\n    'Acidic' : 0,\n    'Neutral' : 1,\n    'Alkaline' : 2    }\ntype_hardness_water = {\n    'Very Hard' : 4, \n    'Hard' : 3,\n    'Moderately Hard': 2,\n    'Sightly Hard': 1,\n    'Soft' : 0,}\n\ndata['water_type'] = data['water_type'].map(type_water_dict)\ndata['water_hardness'] = data['water_hardness'].map(type_hardness_water)\n","c4e89737":"X = data.drop(['Potability'] , axis = \"columns\")\ny = data['Potability']","94973efe":"X1 = pd.get_dummies(X , columns = ['water_type' , 'water_hardness'])\nX1.head()","a2d5c171":"sc = StandardScaler()\nX1_sc = sc.fit_transform(X1)","b6a558fa":"# Train Test Split\nX_train , X_test , y_train , y_test = train_test_split(X1_sc , y ,test_size = 0.2 , random_state = 42)","3d7b2173":"# We will begin with sample Models :\nmodels_dict = {'KNN' : KNeighborsClassifier() ,\n               'SVM' : SVC() ,\n               'SGD' : SGDClassifier(),}\ndef simple_models_prediction(models_dict , X_train , X_test , y_train , y_test):\n    score_model = []\n    for name ,model in models_dict.items():\n        model.fit(X_train , y_train)\n        result = model.predict(X_test)\n        f1_score_model = f1_score(y_test , result)\n        score_model.append(f1_score_model)\n        print(name)\n        print(\"-----\")\n        print(classification_report(y_test , result))\n        print(\"-----\")\n    data = {'Models' : models_dict.keys() , 'F1_Score' : score_model}\n    return pd.DataFrame(data = data)\n","dbf69a8d":"simple_models_prediction(models_dict , X_train , X_test , y_train , y_test)","75bd94a0":"## Let's take KNN Model and try to have better result\ndef KNN_model(max_neighbors):\n    scores = []\n    for k in range(1,max_neighbors+1):\n        model = KNeighborsClassifier(n_neighbors= k)\n        model.fit(X_train , y_train)\n        res = model.predict(X_test)\n        f1_score_KNN = f1_score(y_test , res)\n        scores.append(f1_score_KNN)\n    return plt.scatter(x = range(max_neighbors) , y=scores)\n\nKNN_model(max_neighbors = 20)","ebb7b8d0":"# Ensembling\nmodels_dict = {'RandomForest' : RandomForestClassifier() ,\n               'AdaBoost' : AdaBoostClassifier() , \n               'ExtraTrees' : ExtraTreesClassifier(),\n               'GradientBoosting':GradientBoostingClassifier()}\nsimple_models_prediction(models_dict , X_train , X_test , y_train , y_test)","1a2f94a8":"#Let's try Xgboost !\nxgb_classifier = xgb.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.2, max_delta_step=0, max_depth=9,\n              min_child_weight=2, missing=np.nan, monotone_constraints='()',\n              n_estimators=1500, n_jobs=2, num_parallel_tree=1, random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n              tree_method='exact', validate_parameters=1, verbosity=None)\n","320ac79a":"xgb_classifier.fit(X_train , y_train)","ed6b43df":"y_preds = xgb_classifier.predict(X_test)\nf1_score_RSCV = f1_score(y_test , y_preds)\nf1_score_RSCV","738b635c":"def Perform_Xgboost(num_features):\n    feature_selection = SelectKBest(f_classif , k = num_features)\n    final_model_xgb = make_pipeline(feature_selection ,xgb_classifier)\n    final_model_xgb.fit(X_train , y_train)\n    y_preds = final_model_xgb.predict(X_test)\n    f1_score_final = f1_score(y_test , y_preds)\n    return f1_score_final\n    \ndef get_result_xgboost(range_list):\n    scores_list = []\n    for number in range_list:\n        f1_score_xgb = Perform_Xgboost(number)\n        scores_list.append(f1_score_xgb)\n    print(scores_list)\n    data = {'Number of Features' : range_list , 'Scores' : scores_list}\n    data_final = pd.DataFrame(data = data)\n    return data_final\n\n\nget_result_xgboost([10,11,12,13,14,15,16])","9fd1c153":"print(\"The Best F1 Score Obtained is \",Perform_Xgboost(16) )","df708335":"precision, recall, threshold = precision_recall_curve(y_test, xgb_classifier.predict(X_test))\n\nplt.plot(threshold, precision[:-1], label='precision')\nplt.plot(threshold, recall[:-1], label='recall')\nplt.legend()","cd460042":"<h5>Since our features are normally distributed , We will use the mean in order to replace the missing values<\/h5>","2268933e":"<h4>Through this notebook , We will be able to classify the water quality (Potable Water or not) based on various features <br><\/br>\nLet the Show begin ! <\/h4>","419c155c":"## Precision Recall Curve","01215df0":"<div style=\"color:white;\n           display:center;\n           border-radius:1px;\n           font-size:70%;\n           font-family:serif;\n           letter-spacing:0.2px;\n           background-color:blue;\n           color:White;\n           font-family:serif;\n            padding:5px 5px 5px 5px;\n           \">\n<h1 style=\"text-align:center;font-weight: bold;\">Import Librairies<\/h1>\n\n <\/div>","2deb66fb":"<h5> We can see that Xgboost can give better performance than other models , So we will try to select to the best feature to improve our algorithm more <\/h5>","bd894806":"## THANK YOU !","d1d14a61":"## Target Variable","c574bdff":"## Preprocessing","bdd46d90":"<h5>Based on plots , We cannot get a good idea about the relation between out target and features . We will try know to see the correlation between all variables !<\/h5>","d651aa9f":"![](https:\/\/www.jansanconsulting.com\/uploads\/5\/5\/5\/8\/55581447\/ph-scale_orig.jpg)","6974b0e0":"# Handle With Missing Values","3b11b465":"# We've used XGBoost Classifier with Hyperparameter Optimization using Random Search and Feature Selection ( Select K BEST)","5b831a34":"## Continious Features","d1c174ec":"<div style=\"color:white;\n           display:center;\n           border-radius:1px;\n           font-size:70%;\n           font-family:serif;\n           letter-spacing:0.2px;\n           background-color:blue;\n           color:White;\n           font-family:serif;\n            padding:5px 5px 5px 5px;\n           \">\n<h1 style=\"text-align:center;font-weight: bold;\">Preprocessing || Modeling <\/h1>\n\n <\/div>","c8c3bc74":"<h2>Conclusion<\/h2>\n<h5> - We can see obviously that all features are numerical <\/h5>\n<h5> - Existing of missing Values in features like : ph,Sulfate,Trihalomethanes . We will see how we can handle with missing data <\/h5> ","9fcd7d83":"## Modeling","01671c98":"<div style=\"color:white;\n           display:center;\n           border-radius:1px;\n           font-size:70%;\n           font-family:serif;\n           letter-spacing:0.2px;\n           background-color:blue;\n           color:White;\n           font-family:serif;\n            padding:5px 5px 5px 5px;\n           \">\n<h1 style=\"text-align:center;font-weight: bold;\">Exploratory data Analysis<\/h1>\n\n <\/div>","0d1483e9":"<h5> Since the classes are imbalanced , We will use metrics such as :  <\/h5>\n<h5>- Pr\u00e9cision<\/h5>\n<h5>- Recall<\/h5>\n<h5>- F1 Score<\/h5>\n<h5>The right metric is alawys fixed according to the our case<\/h5>\n\n","9fe3ebae":"<h2>Overview<\/h2>\n<h5>Around 60 percent of our body is made up of water and we can only live three to five days without fluids. Water plays many important roles in the body including flushing waste from the body, regulating body temperature, transportation of nutrients and is necessary for digestion.<\/h5>\n<h5>Water helps in the digestion of solid food. It also keeps our skin healthy and hydrated. Water helps in excreting waste from our body through sweat, urination, and defecation. So replenishing the water in our body is essential in order to prevent dehydration.<\/h5>\n<h5>Potable water, also known as drinking water, comes from surface and ground sources and is treated to levels that that meet state and federal standards for consumption.\n\nWater from natural sources is treated for microorganisms, bacteria, toxic chemicals, viruses and fecal matter. Drinking raw, untreated water can cause gastrointestinal problems such as diarrhea, vomiting or fever.\n\nThe U.S. Environmental Protection Agency\u2019s (EPA) National Primary Drinking Water Regulations establish maximum contaminant levels (MCLs) for various contaminants. \n\nThe State Water Resources Control Board ensures the actual levels are close to Public Health Goals while setting standards (called \u201cnotification levels\u201d) for contaminants not specified by the EPA.\n\n<\/h5>","682ff261":"## Feature Engineering","9ae9cf19":"<h5>Same For correlation Matrix , We can't get an idea due to the weak correlation between features<\/h5>","02c9c175":"<div style=\"color:white;\n           display:center;\n           border-radius:1px;\n           font-size:70%;\n           font-family:serif;\n           letter-spacing:0.2px;\n           background-color:blue;\n           color:White;\n           font-family:serif;\n            padding:5px 5px 5px 5px;\n           \">\n<h1 style=\"text-align:center;font-weight: bold;\">Analysis of data Form<\/h1>\n\n <\/div>","3ccf190b":"<h5>We can think for a while for \"Precision - Recall Tradeoff\": We can change the thresold based on our case .\nHere we kept the thresold in order to obtain the better tradeoff<\/h5>","501f4d91":"![image.png](attachment:7014d526-a694-4848-9d75-2b45e0492a6c.png)","09800ff9":"<h5>We'll try to create new features based on various features informations<\/h5>","f440d039":"<div style=\"color:white;\n           display:center;\n           border-radius:1px;\n           font-size:70%;\n           font-family:serif;\n           letter-spacing:0.2px;\n           background-color:blue;\n           color:White;\n           font-family:serif;\n            padding:5px 5px 5px 5px;\n           \">\n<h1 style=\"text-align:center;font-weight: bold;\">Imputation || Feature Engineering <\/h1>\n\n <\/div>","e97a3c5d":"<div style=\"color:white;\n           display:center;\n           border-radius:1px;\n           font-size:70%;\n           font-family:serif;\n           letter-spacing:0.2px;\n           background-color:blue;\n           color:White;\n           font-family:serif;\n            padding:5px 5px 5px 5px;\n           \">\n<h1 style=\"text-align:center;font-weight: bold;\">Water Quality Prediction<\/h1>\n\n\n<\/div>\n"}}