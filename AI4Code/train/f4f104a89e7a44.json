{"cell_type":{"97c02430":"code","85fc7912":"code","0805dbce":"code","7a6aec72":"code","b292e481":"code","f0526e4e":"code","617e79f2":"code","568b91c9":"code","353d9bb9":"code","2a6fadb9":"code","70663820":"code","20a6c2cc":"code","801b3a08":"code","8374f8b9":"code","b19c37a1":"code","5b70b0e3":"code","7a82d10e":"code","63c8d6fb":"code","85e9ea5f":"code","52e8366b":"code","dbc56246":"markdown","c3f409c4":"markdown","63ecd688":"markdown","ae794278":"markdown","fa59c21e":"markdown","00325087":"markdown","98afb274":"markdown","9eaf7891":"markdown","71b05440":"markdown","a85b8c80":"markdown","448a1ffa":"markdown","ba5f5297":"markdown","4cfa3917":"markdown","f7ee8000":"markdown","391d6608":"markdown","28addf16":"markdown"},"source":{"97c02430":"!pip uninstall -y typing # this should avoid  AttributeError: type object 'Callable' has no attribute '_abc_registry'\n\n!pip install  \"git+https:\/\/github.com\/dreamquark-ai\/tabnet.git@develop#egg=pytorch_tabnet\" --upgrade","85fc7912":"from pytorch_tabnet.multitask import TabNetMultiTaskClassifier\n\nimport torch\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import roc_auc_score, log_loss\n\nimport pandas as pd\nimport numpy as np\nnp.random.seed(0)\n\nfrom tqdm.notebook import tqdm\n\nimport os\n\nfrom matplotlib import pyplot as plt\n%matplotlib inline","0805dbce":"dataset_name = \"lish-moa\"\ntrain = pd.read_csv(\"..\/input\/lish-moa\/train_features.csv\")\ntrain_targets = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntrain_targets.drop(columns=[\"sig_id\"], inplace=True)\n\ntest = pd.read_csv('..\/input\/lish-moa\/test_features.csv')","7a6aec72":"np.random.seed(42)\nif \"Set\" not in train.columns:\n    train[\"Set\"] = np.random.choice([\"train\", \"valid\"], p =[.8, .2], size=(train.shape[0],))\n\ntrain_indices = train[train.Set==\"train\"].index\nvalid_indices = train[train.Set==\"valid\"].index","b292e481":"# Encoding train set and test set\n\nnunique = train.nunique()\ntypes = train.dtypes\n\ncategorical_columns = []\ncategorical_dims =  {}\nfor col in tqdm(train.columns):\n    if types[col] == 'object' or nunique[col] < 200:\n        print(col, train[col].nunique())\n        l_enc = LabelEncoder()\n        train[col] = train[col].fillna(\"VV_likely\")\n        train[col] = l_enc.fit_transform(train[col].values)\n        try:\n            test[col] = test[col].fillna(\"VV_likely\")\n            test[col] = l_enc.transform(test[col].values)\n        except:\n            print(f\"Column {col} does not exist in test set\")\n        categorical_columns.append(col)\n        categorical_dims[col] = len(l_enc.classes_)\n    else:\n        training_mean = train.loc[train_indices, col].mean()\n        train.fillna(training_mean, inplace=True)\n        test.fillna(training_mean, inplace=True)","f0526e4e":"unused_feat = ['Set', 'sig_id'] # Let's not use splitting sets and sig_id\n\nfeatures = [ col for col in train.columns if col not in unused_feat] \n\ncat_idxs = [ i for i, f in enumerate(features) if f in categorical_columns]\n\ncat_dims = [ categorical_dims[f] for i, f in enumerate(features) if f in categorical_columns]\n","617e79f2":"\nX_train = train[features].values[train_indices]\ny_train = train_targets.values[train_indices]\n\nX_valid = train[features].values[valid_indices]\ny_valid = train_targets.values[valid_indices]\n\nX_test = test[features].values\n","568b91c9":"\nclf = TabNetMultiTaskClassifier(n_steps=1,\n                                cat_idxs=cat_idxs,\n                                cat_dims=cat_dims,\n                                cat_emb_dim=1,\n                                optimizer_fn=torch.optim.Adam,\n                                optimizer_params=dict(lr=2e-2),\n                                scheduler_params={\"step_size\":50, # how to use learning rate scheduler\n                                                  \"gamma\":0.9},\n                                scheduler_fn=torch.optim.lr_scheduler.StepLR,\n                                mask_type='entmax', # \"sparsemax\",\n                                lambda_sparse=0, # don't penalize for sparser attention\n                       \n                      )","353d9bb9":"max_epochs = 1000\nclf.fit(\n    X_train=X_train, y_train=y_train,\n    X_valid=X_valid, y_valid=y_valid,\n    max_epochs=max_epochs ,\n    patience=50, # please be patient ^^\n    batch_size=1024,\n    virtual_batch_size=128,\n    num_workers=1,\n    drop_last=False,\n)\n\n# scores displayed here are -average of log loss\n\n# TabNet is not as fast as XGBoost (at least for binary classification and regression problems)\n# If you wish to speed things up you could play with batch_size, virtual_batch_size and num_workers (or create a smaller network with less steps)\n# Another way to speed things up is to improve the source code : please contribute here https:\/\/github.com\/dreamquark-ai\/tabnet\/issues\/183","2a6fadb9":"# plot losses (drop first epochs to have a nice plot)\nplt.plot(clf.history['train']['loss'][5:])\nplt.plot(clf.history['valid']['loss'][5:])","70663820":"# plot learning rates\nplt.plot([x for x in clf.history['train']['lr']][5:])","20a6c2cc":"preds_valid = clf.predict_proba(X_valid) # This is a list of results for each task\n\n# We are here getting rid of tasks where only 0 are available in the validation set\nvalid_aucs = [roc_auc_score(y_score=task_pred[:,1], y_true=y_valid[:, task_idx])\n             for task_idx, (task_pred, n_pos) in enumerate(zip(preds_valid, y_valid.sum(axis=0))) if n_pos > 0]\n\nvalid_logloss = [log_loss(y_pred=task_pred[:,1], y_true=y_valid[:, task_idx])\n             for task_idx, (task_pred, n_pos) in enumerate(zip(preds_valid, y_valid.sum(axis=0))) if n_pos > 0]\n\nplt.scatter(y_valid.sum(axis=0)[y_valid.sum(axis=0)>0], valid_aucs)","801b3a08":"# Valid score should match mean log loss - They don't match exactly because we removed some tasks\nprint(f\"BEST VALID SCORE FOR {dataset_name} : {clf.best_cost}\")\nprint(f\"VALIDATION MEAN LOGLOSS SCORES FOR {dataset_name} : {np.mean(valid_logloss)}\")\nprint(f\"VALIDATION MEAN AUC SCORES FOR {dataset_name} : {np.mean(valid_aucs)}\")","8374f8b9":"preds = clf.predict_proba(X_test)","b19c37a1":"# save tabnet model\nsaving_path_name = \".\/TabNetMultiTaskClassifier_baseline\"\nsaved_filepath = clf.save_model(saving_path_name)","5b70b0e3":"# define new model with basic parameters and load state dict weights (all parameters will be updated)\nloaded_clf = TabNetMultiTaskClassifier()\nloaded_clf.load_model(saved_filepath)","7a82d10e":"loaded_preds = loaded_clf.predict_proba(X_test)\n\n# Make sure that this is working as expected\nnp.testing.assert_array_equal(preds, loaded_preds)","63c8d6fb":"clf.feature_importances_","85e9ea5f":"explain_matrix, masks = clf.explain(X_test)","52e8366b":"fig, axs = plt.subplots(1, 3, figsize=(20,20))\n\nfor i in range(3):\n    axs[i].imshow(masks[i][:500])\n    axs[i].set_title(f\"mask {i}\")\n","dbc56246":"# Random Split, do something smarter if you want)","c3f409c4":"# Download data","63ecd688":"# Installing pytorch-tabnet from the MultiTask branch (not official branch)","ae794278":"# Define network and parameters\n\n### This is a set of basic parameters, happy tuning!","fa59c21e":"# Creating train\/valid\/test matrices","00325087":"# Save and load Model\n\nJust an example of how to save and load models in order to use them later","98afb274":"# Define categorical features for categorical embeddings","9eaf7891":"# End of notebook\n\nHope this will be usefull!","71b05440":"# Import libraries","a85b8c80":"# Global explainability : feat importance summing to 1","448a1ffa":"# Validation\n\nI don't know if people have been looking at these AUCs plots but some tasks are harder than others!","ba5f5297":"# Training","4cfa3917":"## Predictions","f7ee8000":"# Local explainability and masks for test set\n\nExplain matrix is not normalized so rows don't sum to 1, feel free to normalize them yourself\n\nYou can see that attention is quite sparse and this visualization with so many columns is not the best","391d6608":"# About this notebook\n\nTabNetMultiTaskClassifier is still under development, I'm sharing this now in a co-construction approach.\n\nPlease share your feedback as comments here or directly in the corresponding PR on the github repo : https:\/\/github.com\/dreamquark-ai\/tabnet\/pull\/184\n\nOnce carefully reviewed I'll release this in the official repo.\n\nIf you have questions about the model please first have a look at the README here : https:\/\/github.com\/dreamquark-ai\/tabnet\/blob\/feat\/MultiTaskClassification\/README.md\n\nMaybe have a look at this video for more in depth explanations : https:\/\/youtu.be\/ysBaZO8YmX8 \n\n# About TabNetMultiTaskClassifier\n\nTabNetMultiTaskClassifier is a new class of pytorch-tabnet, it allows you to easily deal with multi task classification problem. (Note: for multi task regression problems you can use TabNetRegressor).\n\nSome of the available features are:\n\n- any number of tasks is allowed\n- each task can have any number of labels\n- you can pass different loss functions for each task by giving a corresponding list of loss function during fit\n\n# About the competition\n\nI am not going to share a full running submission as I did not started the competition yet and I'd like people to try a solution of their own.\n\nThis should be enough for people to start playing around, feel free to fork this in order to get a score.\nIf you end up with a good scoring kernel with a few twick please share it publicly, we are still very early in the competition and TabNet is easy to use and open source.\n\nDisclaimer : I actually don't know how competitive this simple notebook will be, but this is just a baseline to improve upon!\n\n\n# About pytorch-tabnet\n\nPytorch-tabnet is an open source project, feel free to contribute!\n\n\n**Good luck to all, have fun!**","28addf16":"# Simple preprocessing\n\n\nCopy\/pasted from my example notebooks, don't know if we have missing values.\n\nLabel encode categorical features and fill empty cells.\n\n\nDo any smarter preprocessing if you want."}}