{"cell_type":{"ebdb967d":"code","13b7ad0c":"code","e6410328":"code","7f1321e8":"code","1696287a":"code","1e4d57fd":"code","ad59a901":"code","429a565f":"code","59ff04f5":"code","166f6abb":"code","bd5b6eff":"code","8343b1d8":"code","d6437375":"code","53c90bdf":"code","4316c59a":"code","7715759e":"code","0f012f56":"code","0e361df8":"code","954a32f9":"code","de1d2511":"code","fa342b78":"code","fefa122a":"code","870e8c68":"code","94301e4f":"code","5ceac6d9":"code","414d1e48":"code","1e64aedb":"code","436d9cd8":"code","4c4e66f8":"code","1b1cb8ad":"code","4fad7e99":"code","1a1bbf97":"code","8f7c3168":"code","08816f71":"code","a086e739":"code","a925ea74":"code","7625f81f":"code","d3058305":"code","b040ecc5":"code","2f045253":"code","41d01abc":"code","03b9acfc":"code","52d54991":"code","b1560ff3":"code","b1c258fb":"code","39e6392c":"code","a6268083":"code","7bf8bbba":"code","7f558cc4":"markdown","75e72c5d":"markdown","4752f4c5":"markdown","4ec3a079":"markdown","fd2fcb16":"markdown","0a321cd0":"markdown","e8963b8f":"markdown","e45ffda5":"markdown","b7bed3b7":"markdown","ccce1b19":"markdown","d18c48c4":"markdown","51e0c2a5":"markdown","ce30b44b":"markdown","2f20ef38":"markdown","98b4fe24":"markdown","6e74a31d":"markdown","83b10cdc":"markdown","b98e6218":"markdown","237bac1a":"markdown","4d3f65bc":"markdown","ea642f38":"markdown","8a6c1b48":"markdown","2dc1efe5":"markdown","ee72fb14":"markdown","73536108":"markdown","8ada9ce1":"markdown","9fb8ba73":"markdown","e6d12243":"markdown","564a3a37":"markdown","8b5eb6a5":"markdown","51c5bb94":"markdown","fc88ba82":"markdown","e14c2bf4":"markdown","b5968067":"markdown","1133b957":"markdown","6547b94e":"markdown","7db9185c":"markdown","acc0a692":"markdown"},"source":{"ebdb967d":"import os\nprint(os.listdir(\"..\/input\"))\n\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom math import radians, cos, sin, asin, sqrt\nfrom datetime import datetime","13b7ad0c":"fp1 = os.path.join(\"..\", \"input\", \"train.csv\")\nfp2 = os.path.join(\"..\", \"input\", \"test.csv\")","e6410328":"train = pd.read_csv(fp1, index_col=0)\ntrain.head() ","7f1321e8":"train.shape","1696287a":"train.dtypes","1e4d57fd":"train.describe()","ad59a901":"test = pd.read_csv(fp2, index_col=0)\ntest.head()","429a565f":"test.dtypes","59ff04f5":"test.shape","166f6abb":"train.hist(bins=50, figsize=(20,15))\nplt.show()","bd5b6eff":"train.loc[train['trip_duration'] < 5000, 'trip_duration'].hist();\n\nplt.title('trip_duration')\nplt.show()","8343b1d8":"np.log1p(train['trip_duration']).hist();\nplt.title('log_trip_duration')\nplt.show()","d6437375":"plt.subplots(figsize=(15,5))\ntrain.boxplot(); ","53c90bdf":"train = train[(train.trip_duration < 5000)]","4316c59a":"train.plot(kind='scatter', x='pickup_longitude', y='pickup_latitude', alpha=0.1);","7715759e":"train = train.loc[(train['pickup_longitude'] > -75) & (train['pickup_longitude'] < -73)]\ntrain = train.loc[(train['pickup_latitude'] > 40) & (train['pickup_latitude'] < 41)]","0f012f56":"train.plot(kind='scatter', x='dropoff_longitude', y='dropoff_latitude', alpha=0.1);","0e361df8":"train = train.loc[(train['dropoff_longitude'] > -75) & (train['dropoff_longitude'] < -73)]\ntrain = train.loc[(train['dropoff_latitude'] > 40.5) & (train['dropoff_latitude'] < 41.5)]","954a32f9":"train['passenger_count'].hist(bins=100, log=True, figsize=(10,5));\nplt.title('passenger_count')\nplt.show()","de1d2511":"train = train.loc[(train['passenger_count'] >= 0) & (train['passenger_count'] <= 6)]","fa342b78":"train.isnull().sum()","fefa122a":"train.duplicated().sum()","870e8c68":"train = train.drop_duplicates()\ntrain.duplicated().sum()","94301e4f":"train.dtypes","5ceac6d9":"train.drop([\"store_and_fwd_flag\"], axis=1, inplace=True)\ntest.drop([\"store_and_fwd_flag\"], axis=1, inplace=True)","414d1e48":"train.shape, test.shape","1e64aedb":"plg, plt = 'pickup_longitude', 'pickup_latitude'\ndlg, dlt = 'dropoff_longitude', 'dropoff_latitude'\npdt, ddt = 'pickup_datetime', 'dropoff_datetime'","436d9cd8":"def haversine(lon1, lat1, lon2, lat2):\n    \"\"\"\n    Calculate the great circle distance between two points \n    on the earth (specified in decimal degrees)\n    \"\"\"\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = sin(dlat\/2)**2 + cos(lat1) * cos(lat2) * sin(dlon\/2)**2\n    c = 2 * asin(sqrt(a)) \n    # Radius of earth in kilometers is 6371\n    km = 6371* c\n    return km\n\ndef euclidian_distance(x):\n    x1, y1 = np.float64(x[plg]), np.float64(x[plt])\n    x2, y2 = np.float64(x[dlg]), np.float64(x[dlt])    \n    return haversine(x1, y1, x2, y2)","4c4e66f8":"%time\ntrain['distance'] = train[[plg, plt, dlg, dlt]].apply(euclidian_distance, axis=1)","1b1cb8ad":"%time\ntest['distance'] = test[[plg, plt, dlg, dlt]].apply(euclidian_distance, axis=1)","4fad7e99":"train[pdt] = train[pdt].apply(lambda x : datetime.strptime(x, \"%Y-%m-%d %H:%M:%S\"))\ntrain[ddt] = train[ddt].apply(lambda x : datetime.strptime(x, \"%Y-%m-%d %H:%M:%S\"))","1a1bbf97":"test[pdt] = test[pdt].apply(lambda x : datetime.strptime(x, \"%Y-%m-%d %H:%M:%S\"))\n#test dataset has not \"dropoff_datetiime\"","8f7c3168":"train['month'] = train[pdt].apply(lambda x : x.month)\ntrain['week_day'] = train[pdt].apply(lambda x : x.weekday())\ntrain['day_month'] = train[pdt].apply(lambda x : x.day)\ntrain['pickup_time_minutes'] = train[pdt].apply(lambda x : x.hour * 60.0 + x.minute)","08816f71":"test['month'] = test[pdt].apply(lambda x : x.month)\ntest['week_day'] = test[pdt].apply(lambda x : x.weekday())\ntest['day_month'] = test[pdt].apply(lambda x : x.day)\ntest['pickup_time_minutes'] = test[pdt].apply(lambda x : x.hour * 60.0 + x.minute)","a086e739":"train.head()","a925ea74":"test.head()","7625f81f":"train.shape, test.shape","d3058305":"features_train = [\"vendor_id\", \"passenger_count\", \"pickup_longitude\", \"pickup_latitude\", \"dropoff_longitude\", \"dropoff_latitude\", \"distance\", \"month\", \"week_day\", \"day_month\", \"pickup_time_minutes\"]\nX_train = train[features_train]\ny_train = np.log1p(train[\"trip_duration\"])\n\nfeatures_test = [\"vendor_id\", \"passenger_count\", \"pickup_longitude\", \"pickup_latitude\", \"dropoff_longitude\", \"dropoff_latitude\", \"distance\", \"month\", \"week_day\", \"day_month\", \"pickup_time_minutes\"]\nX_test = test[features_test]","b040ecc5":"#Last check\n#X_train.dtypes\n#X_test.dtypes","2f045253":"from sklearn.ensemble import RandomForestRegressor \n#from sklearn.model_selection import GridSearchCV","41d01abc":"#param_grid_rf = {'n_estimators' : [10, 20, 100],\n                 #'min_samples_leaf' : [2, 4, 6],\n                 #'max_features' : [0.2, 0.5, 'auto'],\n                 #'max_depth' : [50, 80, 100]}\n#rf = RandomForestRegressor()\n#grid_search_rf = GridSearchCV(RandomForestRegressor(), param_grid_rf)\n#grid_search_rf.fit(X_train, y_train)","03b9acfc":"#print(\"Score final : \", round(grid_search_rf.score(X_train, y_train)*100, 4), \" %\")\n#print(\"Meilleurs param\u00e8tres : \", grid_search_rf.best_params_)\n#print(\"Meilleure configuration : \", grid_search_rf.best_estimator_)","52d54991":"#rf = RandomForestRegressor(n_estimators=100, min_samples_leaf=10, min_samples_split=15, max_depth=100, bootstrap=True, n_jobs=-1)\n#rf = RandomForestRegressor(n_estimators=100, min_samples_leaf=2, max_features=0.7, max_depth=100, bootstrap=True, n_jobs=-1)\n#rf = RandomForestRegressor(n_estimators=100, min_samples_leaf=10, min_samples_split=15, max_depth=100, bootstrap=True, n_jobs=-1)\nrf = RandomForestRegressor(n_estimators=100, min_samples_leaf=2, max_features='auto', max_depth=50, bootstrap=True, n_jobs=-1)","b1560ff3":"rf.fit(X_train, y_train)","b1c258fb":"#y_pred = grid_search_rf.predict(X_test)","39e6392c":"log_pred = rf.predict(X_test)\ny_pred = np.exp(log_pred) - np.ones(len(log_pred)) ","a6268083":"my_submission = pd.DataFrame({'id': test.index, 'trip_duration': y_pred})\nmy_submission.head()","7bf8bbba":"my_submission.to_csv(\"submission.csv\", index=False)","7f558cc4":"# Features engineering","75e72c5d":"Let's tune our model with hyperparameters with GridSearchCV, a method that, instead of sampling randomly from a distribution, evaluates all combinations we define.","4752f4c5":"Let's have a look on our dataset with the new columns we've created :","4ec3a079":"# Predictions of NYC Taxi Trip Duration","fd2fcb16":"#### We create columns from pickuptime :","0a321cd0":"#### We can make a log-transformation of trip_duration's data :","e8963b8f":"# Data preprocessing","e45ffda5":"### Train preview","b7bed3b7":"### Features creation","ccce1b19":"#### We create a function to calculate distance from pickup to dropoff :","d18c48c4":"#### We convert string to datetime :","51e0c2a5":"#### \u2022 Trip_duration","ce30b44b":"# Data loading","2f20ef38":"#### We are going to focus on \"trip_duration\" and check their values between 0 and 5000 :","98b4fe24":"Principal datas for \"dropoff\" : longitude \u2208 [-75;-72.5] and latitude \u2208 [40;41.5].","6e74a31d":"### Features selection","83b10cdc":"### Table of contents \n* [Data loading](#Data-loading)\n* [Data exploration](#Data-exploration)\n* [Data reprocessing](#Data-preprocessing)\n* [Features engineering](#Features-engineering)\n* [Modeling](#Modeling)\n* [Predictions](#Predictions)\n* [Submission](#Submission)","b98e6218":"### Missing values","237bac1a":"#### Shortcuts :","4d3f65bc":"# Submission","ea642f38":"Principal datas for \"trip_duration\" are between 0 and 5000. So we're going to work with the lines concerned.","8a6c1b48":"As we can see, \"pickup_datetime\", \"dropoff_datetime\" and \"store_and_fwd_flag\" are object types. First step, let's convert str to datetime for \"pickup_datetime\" and \"dropoff_datetime\" and then we will drop \"store_and_fwd_flag\" because we won't use it.","2dc1efe5":"I decided to choose **Random Forest**. This prediction algorithm is very good at handling tabular data with numerical features, or categorical features with fewer than hundreds of categories. Unlike linear models, random forests are able to capture non-linear interaction between the features and the target.","ee72fb14":"#### \u2022 Pickup","73536108":"#### \u2022 Dropoff","8ada9ce1":"##### Source: Stackoverflow","9fb8ba73":"We have :\n* **id** : a unique identifier for each trip\n* **vendor_id** : a code indicating the provider associated with the trip record\n* **pickup_datetime** : date and time when the meter was engaged\n* **dropoff_datetime** : date and time when the meter was disengaged\n* **passenger_count** : the number of passengers in the vehicle (driver entered value)\n* **pickup_longitude** : the longitude where the meter was engaged\n* **pickup_latitude** : the latitude where the meter was engaged\n* **dropoff_longitude** : the longitude where the meter was disengaged\n* **dropoff_latitude** : the latitude where the meter was disengaged\n* **store_and_fwd_flag** : this flag indicates whether the trip record was held in vehicle memory before sending to the vendor because the vehicle did not have a connection to the server - Y=store and forward; N=not a store and forward trip\n* **trip_duration** : duration of the trip in seconds","e6d12243":"# Data exploration","564a3a37":"Hyperparameters I will use : \n* **n_estimators** : the number of trees in the forest\n* **min_samples_leaf** : the minimum number of samples required to split an internal node\n* **max_features** : the number of features to consider when looking for the best split\n* **max_depth** : the maximum depth of the tree\n* **bootstrap** : whether bootstrap samples are used when building trees\n* **n_jobs** : the number of jobs to run in parallel for both fit and predict, \"-1\" means using all processors","8b5eb6a5":"Principal datas for \"pickup\" : longitude \u2208 [-75;-73] and latitude \u2208 [40;41].","51c5bb94":"#### \u2022 Passenger_count","fc88ba82":"# Predictions","e14c2bf4":"# Modeling","b5968067":"### Test preview","1133b957":"### Cleaning","6547b94e":"### Duplicated values ","7db9185c":"### Categorical features","acc0a692":"#### Let's see all the features with histograms :"}}