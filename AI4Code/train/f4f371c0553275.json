{"cell_type":{"7d4f3024":"code","1736ed82":"code","9dafa4af":"code","fcd488dd":"code","75d7f635":"code","f6391351":"code","afab54db":"code","bccf9465":"code","41bbe60f":"code","794f15b7":"code","c58f9ab3":"code","40c37447":"code","87010c95":"code","d3c443ad":"code","c31fd8cc":"code","7ca6b6b7":"code","37021876":"code","77fdff8b":"code","94939d89":"code","7b56ce45":"code","303ac355":"code","bc31eb37":"code","93900b00":"code","4c1f20e3":"code","a2e5ebfc":"code","57131677":"code","9ca516e0":"code","cbb7372a":"code","09d612db":"code","584f1367":"code","88ed4913":"code","983bebbf":"code","a79be025":"code","11fbf837":"code","2a0ab7e3":"code","f20c4773":"code","0142b4a9":"code","e05669de":"code","d21208c4":"code","36148831":"code","b26e7b2a":"code","c2487414":"code","fdc9060d":"code","2d608872":"code","79b4bdda":"code","395dcbc0":"code","cf3aece1":"code","0509517e":"code","ece83b6f":"code","957b6f10":"code","bad23566":"code","2ef8be2d":"code","3628afaa":"code","7727507a":"code","e1a3c339":"code","a9083339":"code","92f6cb84":"markdown","aa03a28b":"markdown"},"source":{"7d4f3024":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 15,15\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV ,RepeatedStratifiedKFold, cross_val_score , StratifiedKFold ,GroupKFold\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier , ExtraTreesClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score,accuracy_score ,confusion_matrix\nfrom sklearn.preprocessing import PolynomialFeatures\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom imblearn.under_sampling import TomekLinks\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.over_sampling import RandomOverSampler\nfrom imblearn.combine import SMOTETomek\nfrom imblearn.under_sampling import ClusterCentroids , NearMiss","1736ed82":"train_data = pd.read_csv('\/kaggle\/input\/pesticidesagriculturedataset\/Agricultre\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/pesticidesagriculturedataset\/Agricultre\/test.csv')","9dafa4af":"print(train_data.shape)\ntrain_data.head(20)","fcd488dd":"train_data_ids = train_data['ID']","75d7f635":"print(test_data.shape)\ntest_data.head()","f6391351":"test_data_ids = test_data['ID']","afab54db":"train_data.Number_Weeks_Used.fillna(-1,inplace = True)\ntest_data.Number_Weeks_Used.fillna(-1,inplace = True)","bccf9465":"train_data = train_data.loc[(train_data.Number_Doses_Week>0)]","41bbe60f":"sns.boxplot(train_data['Crop_Damage'],train_data['Estimated_Insects_Count'])","794f15b7":"sns.boxplot(train_data['Crop_Damage'],train_data['Number_Doses_Week'])","c58f9ab3":"sns.boxplot(train_data['Crop_Damage'],train_data['Number_Weeks_Used'])","40c37447":"sns.boxplot(train_data['Crop_Damage'],train_data['Number_Weeks_Quit'])","87010c95":"sns.boxplot(train_data['Crop_Damage'],np.floor(train_data['Number_Weeks_Quit']-train_data['Number_Weeks_Used']))","d3c443ad":"sns.boxplot(train_data['Crop_Damage'],np.floor(train_data['Number_Weeks_Used']*train_data['Number_Doses_Week']))","c31fd8cc":"combined_data = pd.concat([train_data,test_data],axis = 0)\ncombined_data.head()","7ca6b6b7":"combined_data['ID'] = combined_data['ID'].str[1:].astype('int')","37021876":"combined_data = combined_data.sort_values(by ='ID', ascending = 1) ","77fdff8b":"combined_data = combined_data.reset_index(drop =  True)","94939d89":"sns.barplot(combined_data.loc[30:40,'Estimated_Insects_Count'].index,combined_data.loc[30:40,'Estimated_Insects_Count'])","7b56ce45":"combined_data['Group'] = 0\ncombined_data.loc[0,'Group'] = 1\n\n\n\ncombined_data['Group_Change'] = 0\ncombined_data['Group_First'] = 0\ncombined_data['Group_Last'] = 0\ncombined_data['Batch_Last'] = 0\n\n\ncombined_data.loc[0,'Group_First'] = 1\n\ncombined_data['Soil_Change'] = 0","303ac355":"%%time\nfor idx, row in combined_data.iterrows():\n    \n    if idx != 0:\n        \n        if (np.abs(combined_data.loc[idx,'Estimated_Insects_Count'] - combined_data.loc[idx-1,'Estimated_Insects_Count']) > 1):\n            \n            combined_data.loc[idx,'Group'] = combined_data.loc[idx-1,'Group'] + 1\n            combined_data.loc[idx,'Group_First'] = 1\n            combined_data.loc[idx-1,'Group_Last'] = 1\n            combined_data.loc[idx-1,'Batch_Last'] = 1\n        \n        else:\n            \n            if(combined_data.loc[idx,'Number_Doses_Week'] >= combined_data.loc[idx-1,'Number_Doses_Week']):\n                \n                if(combined_data.loc[idx,'Soil_Type'] == combined_data.loc[idx-1,'Soil_Type']):\n                    \n                    combined_data.loc[idx,'Group'] = combined_data.loc[idx-1,'Group']\n                    \n                else:\n                    \n                    combined_data.loc[idx,'Group'] = combined_data.loc[idx-1,'Group'] + 1\n                    \n            else:\n                \n                combined_data.loc[idx,'Group'] = combined_data.loc[idx-1,'Group'] + 1\n                combined_data.loc[idx,'Group_Change'] = 1\n                combined_data.loc[idx,'Group_First'] = 1\n                combined_data.loc[idx-1,'Group_Last'] = 1\n                   \n   ","bc31eb37":"%%time \nfor idx in range(0,len(combined_data)-1):\n        if combined_data.loc[idx,'Group_Last'] == 1 & combined_data.loc[idx,'Soil_Type'] != combined_data.loc[idx+1,'Soil_Type']:\n            combined_data.loc[idx,'Soil_Change'] == 1","93900b00":"df_group = combined_data.loc[(combined_data.Crop_Damage.isna() == 0),['Group']]\ndf_group_count = pd.DataFrame({'Group':df_group.Group.value_counts().index ,'Count' :df_group.Group.value_counts()})\ndf_group_count = df_group_count[df_group_count['Count']>1]","4c1f20e3":"%%time\nsubgroup_avg = pd.DataFrame()\n\nfor idx, row in df_group_count.iterrows():\n    #print(row.Group)\n    subgroup = combined_data.loc[(combined_data.Group == row.Group) & (combined_data.Crop_Damage.isna() == 0) ,['ID','Crop_Damage']]\n    \n    for i in subgroup.Crop_Damage.unique():\n        id_min = subgroup[subgroup.Crop_Damage == i].ID.min() + 1   \n        id_max = subgroup[subgroup.Crop_Damage == i].ID.max() - 1   \n        \n        if id_min <= id_max:\n            subgroup_avg = pd.concat([subgroup_avg,pd.DataFrame({'ID': range(id_min, id_max + 1),'Group_Avg' : i})],axis = 0)\n      ","a2e5ebfc":"%%time\nsubgroup_one = pd.DataFrame()\nsubgroup_two = pd.DataFrame()\n\nfor grp in combined_data.Group.unique():\n    #print(grp)\n    subgroup = combined_data.loc[(combined_data.Group == grp ),['ID','Crop_Damage']]\n    \n    if 1 in subgroup.Crop_Damage.unique():\n        \n        id_min_one = subgroup.loc[(subgroup.Crop_Damage == 1) & (subgroup.Crop_Damage.isna() == 0),:].ID.min() + 1   \n        id_max = subgroup.ID.max()    \n        \n        if id_min_one <= id_max:\n            subgroup_one = pd.concat([subgroup_one,pd.DataFrame({'ID': range(id_min_one, id_max+1),'Group_One' : 1})],axis = 0)\n    \n    if 2 in subgroup.Crop_Damage.unique():\n        \n        id_min_two = subgroup.loc[(subgroup.Crop_Damage == 2) & (subgroup.Crop_Damage.isna() == 0),:].ID.min() + 1   \n        id_max = subgroup.ID.max()    \n        \n        if id_min_two <= id_max:\n            subgroup_two = pd.concat([subgroup_two,pd.DataFrame({'ID': range(id_min_two, id_max+1),'Group_Two' : 2})],axis = 0)\n                                ","57131677":"combined_data = pd.merge(combined_data,subgroup_avg,on='ID',how='left')\ncombined_data['Group_Avg'].fillna(-1,inplace =True)","9ca516e0":"combined_data = pd.merge(combined_data,subgroup_one,on='ID',how='left')\ncombined_data['Group_One'].fillna(0,inplace =True)","cbb7372a":"combined_data = pd.merge(combined_data,subgroup_two,on='ID',how='left')\ncombined_data['Group_Two'].fillna(0,inplace =True)","09d612db":"#temp = combined_data.copy()","584f1367":"#temp = temp.drop(columns = ['Group__Number_Doses_Week_count', 'Group__Number_Doses_Week_std','Total_Doses','Insect_Freq','Week_Since_Pesticide_Used'\n#                           ,'Group__Number_Doses_Week_count','Group__Number_Doses_Week_std'])\n#temp.head()","88ed4913":"#combined_data = temp.copy()","983bebbf":"#combined_data['Crop_Soil_Type'] = combined_data['Crop_Type'].astype(str) + '_' + combined_data['Soil_Type'].astype(str)\n#['Crop_Pesticide_Type'] =  combined_data['Crop_Type'].astype(str) + '_' + combined_data['Pesticide_Use_Category'].astype(str)\n#combined_data['Crop_Season_Type'] = combined_data['Crop_Type'].astype(str) + '_' + combined_data['Season'].astype(str)\n#combined_data['Soil_Pesticide_Type'] = combined_data['Soil_Type'].astype(str) +'_' +combined_data['Pesticide_Use_Category'].astype(str)\n#combined_data['Pesticide_Season_Type'] = combined_data['Pesticide_Use_Category'].astype(str) +'_'+combined_data['Season'].astype(str)\n#combined_data['Soil_Season_Type'] = combined_data['Soil_Type'].astype(str) +'_'+combined_data['Season'].astype(str)\n#combined_data['Total_Doses']= combined_data['Number_Doses_Week']* combined_data['Number_Weeks_Used']\n#combined_data['Insect_Freq']= combined_data['Estimated_Insects_Count']\/combined_data['Number_Doses_Week']\n#combined_data['Week_Since_Pesticide_Used'] = combined_data['Number_Weeks_Used'] +combined_data['Number_Weeks_Quit']\n#combined_data['Week_Used_Quit'] = combined_data['Number_Weeks_Used']\/combined_data['Number_Weeks_Quit']\n#combined_data['Side_Effect_days'] = combined_data['Number_Weeks_Quit']-combined_data['Number_Weeks_Used']\n#combined_data[\"Unique_Pesticides_Used_Per_Crop_Soil\"] = combined_data.groupby(['Crop_Type','Soil_Type'])['Pesticide_Use_Category'].transform('nunique')","a79be025":"#cols =combined_data.columns\n#le = LabelEncoder()\n#for col in cols:\n#    if col != 'Crop_Damage':\n#        combined_data[col] = le.fit_transform(combined_data[col])\n#combined_data = pd.DataFrame(combined_data,columns = cols)","11fbf837":"#combined_data =combined_data.drop(columns = ['Total_Doses', 'Side_Effect_days'])","2a0ab7e3":"def agg_numeric(df, parent_var, df_name):\n\n            \n    # Only want the numeric variables\n    parent_ids = df[parent_var].copy()\n    numeric_df = df[['Number_Doses_Week','Number_Weeks_Used','Number_Weeks_Quit']].copy()\n    numeric_df[parent_var] = parent_ids\n\n    # Group by the specified variable and calculate the statistics\n    agg = numeric_df.groupby(parent_var).agg(['count'\n                                              #, 'mean'\n                                              #, 'max'\n                                              #, 'min'\n                                              #, 'sum'\n                                              ,'std'  \n                                             ])\n\n    # Need to create new column names\n    columns = []\n\n    # Iterate through the variables names\n    for var in agg.columns.levels[0]:\n        if var != parent_var:\n            # Iterate through the stat names\n            for stat in agg.columns.levels[1]:\n                # Make a new column name for the variable and stat\n                columns.append('%s_%s_%s' % (df_name, var, stat))\n    \n    agg.columns = columns\n    \n    # Remove the columns with all redundant values\n    _, idx = np.unique(agg, axis = 1, return_index=True)\n    agg = agg.iloc[:, idx]\n    \n    return agg","f20c4773":"df_group_agg = agg_numeric(combined_data,'Group','Group_').reset_index()\ndf_group_agg = df_group_agg.apply(lambda x : x.fillna(-1))\ndf_group_agg.head()","0142b4a9":"combined_data = pd.merge(combined_data,df_group_agg,on='Group',how='left')","e05669de":"combined_data.columns","d21208c4":"features = ['Estimated_Insects_Count', 'Crop_Type', 'Soil_Type',\n       'Pesticide_Use_Category', 'Number_Doses_Week', 'Number_Weeks_Used',\n       'Number_Weeks_Quit', 'Season', 'Group', 'Group_Change',\n       'Group_First', 'Group_Last', 'Batch_Last', 'Group_Avg',\n       'Group_One', 'Group_Two', 'Group__Number_Doses_Week_count',\n       'Group__Number_Weeks_Quit_std', 'Group__Number_Weeks_Used_std',\n       'Group__Number_Doses_Week_std']","36148831":"train_features = combined_data.loc[(combined_data.Crop_Damage.isna() == 0 ),features]\ntarget = combined_data.loc[(combined_data.Crop_Damage.isna() == 0 ),'Crop_Damage']\n\nX_test = combined_data.loc[(combined_data.Crop_Damage.isna() == 1 ),features]","b26e7b2a":"train_features.head()","c2487414":"def resampling_strategy(method,X,y):\n    \n    if method == 'ROS':\n        sm = RandomOverSampler()\n        X, y = sm.fit_sample(X, y)\n    \n    if method == 'RUS':\n        sm = RandomUnderSampler()\n        X, y = sm.fit_sample(X, y)  \n        \n    if method == 'Tomek':\n        sm = TomekLinks(n_jobs = -1)\n        X, y = sm.fit_sample(X, y)\n        \n    if method == 'SMOTE':\n        sm = SMOTE(n_jobs = -1,sampling_strategy = 'all')\n        X, y = sm.fit_sample(X, y)\n    \n    if method == 'SMOTETomek':\n        sm = SMOTETomek(n_jobs = -1)\n        X, y = sm.fit_sample(X, y)\n    \n    if method == 'Cluster':\n        sm = ClusterCentroids(n_jobs = -1)\n        X, y = sm.fit_sample(X, y)\n    \n    if method == 'NearMiss':\n        sm = NearMiss(n_jobs = -1)\n        X, y = sm.fit_sample(X, y)\n    \n    print(\"Resampling Startegy-------\",method)\n    print('#'*20)\n    counts = y.value_counts()\n    print(counts)\n    print('#'*20)\n    plt.xlabel(\"Crop_Damage\")\n    plt.ylabel('Count')\n    sns.barplot(counts.index , counts.values)\n    \n    return X,y","fdc9060d":"def feature_importance(model, X_train):\n\n    print(model.feature_importances_)\n    names = X_train.columns.values\n    ticks = [i for i in range(len(names))]\n    plt.bar(ticks, model.feature_importances_)\n    plt.xticks(ticks, names,rotation =90)\n    plt.show()","2d608872":"def create_submission_file(model_list,df):\n    preds = 0\n    submission = pd.read_csv('\/kaggle\/input\/pesticidesagriculturedataset\/Agricultre\/sample_submission.csv')\n    for model in model_list:\n        preds = preds + (model.predict_proba(df))\n    submission.loc[:,'Crop_Damage'] = np.argmax(preds\/len(model_list),axis =1)\n    submission.loc[:,'ID'] = test_data_ids\n    submission.loc[(submission.ID.isin(test_data[test_data.Number_Doses_Week == 0].ID.values)),'Crop_Damage'] = 1\n    !rm '.\/submission.csv'\n    submission.to_csv('submission.csv', index = False, header = True)\n    print(submission.head())","79b4bdda":"rskf = RepeatedStratifiedKFold(n_splits=5, n_repeats=3, random_state=1)\nscores = []\nX_train_cv,y_train_cv = resampling_strategy('',train_features.copy(), target.copy())\nfor i, (idxT, idxV) in enumerate(rskf.split(X_train_cv, y_train_cv)):\n    print('Fold',i)\n    print(' rows of train =',len(idxT),'rows of holdout =',len(idxV))\n    clf = lgb.LGBMClassifier(\n            n_estimators=1000,\n            max_depth=6,\n            learning_rate=0.1,\n            subsample=0.8,\n            colsample_bytree=0.4,\n            objective = 'multiclass'\n        )        \n    \n    h = clf.fit(X_train_cv.iloc[idxT], y_train_cv.iloc[idxT], \n                eval_set=[(X_train_cv.iloc[idxV],y_train_cv.iloc[idxV])],\n                verbose=100,eval_metric='multi_logloss',\n                early_stopping_rounds=50)\n    acc = accuracy_score(y_train_cv.iloc[idxV],np.argmax(clf.predict_proba(X_train_cv.iloc[idxV]),axis =1))\n    scores.append(acc)\n    print ('LGB Val CV=',acc)\n    print('#'*20)\n\n\nprint('%.3f (%.3f)' % (np.array(scores).mean(), np.array(scores).std()))\n","395dcbc0":"rskf = RepeatedStratifiedKFold(n_splits=5, n_repeats=3, random_state=1)\nscores = []\nX_train_cv,y_train_cv = resampling_strategy('',train_features.copy(), target.copy())\nfor i, (idxT, idxV) in enumerate(rskf.split(X_train_cv, y_train_cv)):\n    print('Fold',i)\n    print(' rows of train =',len(idxT),'rows of holdout =',len(idxV))\n    clf = xgb.XGBClassifier(\n            n_estimators=1000,\n            max_depth=6,\n            learning_rate=0.1,\n            subsample=0.8,\n            colsample_bytree=0.4,\n            objective = 'multi:softprob'\n        )        \n    \n    h = clf.fit(X_train_cv.iloc[idxT], y_train_cv.iloc[idxT], \n                eval_set=[(X_train_cv.iloc[idxV],y_train_cv.iloc[idxV])],\n                verbose=100,eval_metric='merror',\n                early_stopping_rounds=50)\n    acc = accuracy_score(y_train_cv.iloc[idxV],np.argmax(clf.predict_proba(X_train_cv.iloc[idxV]),axis =1))\n    scores.append(acc)\n    print ('LGB Val CV=',acc)\n    print('#'*20)\n\n\nprint('%.3f (%.3f)' % (np.array(scores).mean(), np.array(scores).std()))","cf3aece1":"X_train, X_val, y_train, y_val = train_test_split(train_features,target , test_size=0.2, random_state=1,stratify = target)","0509517e":"#X_train,y_train = resampling_strategy('',train_features.copy(), target.copy())\n\nmodel_lgb = lgb.LGBMClassifier(boosting_type='gbdt',\n                               n_estimators= 1000,\n                               max_depth=6,\n                               learning_rate=0.1,\n                               subsample=0.8,\n                               colsample_bytree=0.4,\n                               objective = 'multiclass'\n                              )\n\n\nmodel_lgb.fit(X_train, y_train,\n              eval_set=[(X_train, y_train),(X_val, y_val)],\n              eval_metric=['multi_logloss'],\n              early_stopping_rounds = 100,\n              verbose=2)","ece83b6f":"print(model_lgb.best_score_['valid_1'])\nfeature_importance(model_lgb,X_train)","957b6f10":"#create_submission_file([model_lgb],X_test)","bad23566":"#X_train,y_train = resampling_strategy('',train_features.copy(), target.copy())\n\nmodel_xgb = xgb.XGBClassifier(objective = 'multi:softprob' ,max_depth =6 , n_estimators=1000 ,\n                              subsample =0.9,colsample_bytree=0.9,eval_metric = 'merror',seed=42)\n\nmodel_xgb.fit(X_train,y_train,\n              eval_set=[(X_train,y_train),(X_val, y_val)],\n              early_stopping_rounds = 50,\n              verbose=2)","2ef8be2d":"feature_importance(model_xgb,X_train)","3628afaa":"#create_submission_file([model_xgb],X_test)","7727507a":"rfc = RandomForestClassifier(n_estimators=500 ,\n                             max_depth=6, min_samples_split=2, \n                             min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='auto', \n                             n_jobs=-1, random_state=123, verbose=3)\nrfc.fit(train_features.copy(),target.copy())","e1a3c339":"feature_importance(rfc,X_train)","a9083339":"create_submission_file([rfc,model_lgb,model_xgb],X_test)","92f6cb84":"# LightGBM CV","aa03a28b":"# XGBoost CV"}}