{"cell_type":{"5e7c2e2f":"code","5dde9f2f":"code","8b855b6d":"code","b088ad88":"code","9414d287":"code","23da8326":"code","73f119a1":"code","e961c95d":"code","b1503fbc":"code","1a80bfed":"code","cbd95917":"code","0c29a52b":"code","78ac4566":"code","cef697c5":"code","403fe6eb":"code","81166d55":"code","b531d460":"code","d88083fb":"code","e49895a4":"code","3dd06d61":"code","013fbb16":"code","b69f7e3f":"code","a1017057":"code","82da4286":"code","04dde2cc":"code","19362651":"code","0dc9704c":"code","a14f7359":"code","6058b919":"code","30e3c52c":"code","526cab28":"code","1cb015a7":"code","b245ac83":"code","6795362f":"code","a21d03ac":"code","90ee701c":"markdown","b104cab8":"markdown","98e90670":"markdown","8d5b5167":"markdown","a39cc9f4":"markdown","d66fbcd6":"markdown","f1690d29":"markdown","5a7cc93c":"markdown","f4033399":"markdown","db0a1073":"markdown","86d1697f":"markdown","bcc71f20":"markdown","b2768537":"markdown","ad4f8f47":"markdown","cb0ac820":"markdown","4488a0a6":"markdown","9f7f7f69":"markdown","4c7d8498":"markdown"},"source":{"5e7c2e2f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas_profiling import ProfileReport\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as ss\n\npd.options.display.max_rows = 1000\npd.options.display.max_columns = 40\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5dde9f2f":"data=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndata.head()","8b855b6d":"data.info()","b088ad88":"#store categorical and numerical features\ncatcols=['SalePrice','Id','MSSubClass','OverallQual','OverallCond', 'MoSold','YrSold', 'YearBuilt','YearRemodAdd'] #they are not string\nquantitative=[col for col in data.columns if data[col].dtype != 'object' and col not in catcols]\nqualitative= [col for col in data.columns if data[col].dtype == 'object']\nqualitative.extend(['MSSubClass','OverallQual','OverallCond', 'MoSold','YrSold', 'YearBuilt','YearRemodAdd']) ","9414d287":"print('Categorical Features:\\n', qualitative)\nprint('\\n')\nprint('Numerical Features:\\n',quantitative)","23da8326":"data.describe().drop('Id', axis=1)","73f119a1":"pd.crosstab(data['Neighborhood'], data['OverallQual'], margins=True).style.background_gradient(cmap='summer_r')","e961c95d":"cm = sns.light_palette(\"green\", as_cmap=True)\npd.crosstab(data['OverallQual'], data['YearBuilt']).style.background_gradient(cmap=cm)","b1503fbc":"#profile=ProfileReport(data, title='Profiling Report')\n#profile.to_file('report.html')","1a80bfed":"# Imputing the missing values\ndef cat_imputation(col, val):\n    data.loc[data[col].isnull(),col] = val","cbd95917":"data.head()","0c29a52b":"nullnb=data.isnull().sum()\nnull=pd.DataFrame( {\"Null Number\":nullnb, \"Null Perc\": (nullnb*100\/1460)}, index=nullnb.index)\nmissing_df=null[ null[\"Null Number\"] > 0]\nmissing_cols=missing_df.index.tolist()\nmissing_df=missing_df.sort_values(by='Null Perc', ascending=False)\nmissing_df","78ac4566":"missing_df['Null Perc'].plot.bar(color=['red', 'black'])\nplt.ylabel('Null Percentage')","cef697c5":"print(data[['PoolArea','PoolQC']].groupby(['PoolArea','PoolQC']).size())\nprint('\\n')\nprint(data['PoolArea'].value_counts())\nprint('\\n')\nprint('Null PoolQC records: ', data['PoolQC'].isnull().sum())\n","403fe6eb":"cat_imputation('PoolQC', 'None')","81166d55":"df=data[['LotFrontage', 'LotArea']].assign(SqrtLotArea = np.sqrt(data.LotArea))\ndf=df.assign(differ=df.LotFrontage-df.SqrtLotArea)\ndf['differ'].mean()","b531d460":"data=data.assign(LotFronEst=np.sqrt(data.LotArea)-24)\nprint('Correlation between our estimate and true value:',data['LotFrontage'].corr(data['LotFronEst']))\n#impute \ndata.loc[data.LotFrontage.isnull(),'LotFrontage']=data.loc[data.LotFrontage.isnull(),'LotFronEst']","d88083fb":"data.drop('LotFronEst', axis=1, inplace=True)","e49895a4":"#when MiscVal=0 there exists no MiscFeature.\ndata['MiscVal'][data['MiscFeature'].isnull()].value_counts()","3dd06d61":"cat_imputation('MiscFeature', 'None')\ncat_imputation('Alley', 'None')\ncat_imputation('MasVnrType', 'None')\ncat_imputation('MasVnrArea', 0.0)\ncat_imputation('Fence', 'None')\ncat_imputation('FireplaceQu', 'None')","013fbb16":"#garage features\ngaragefeat=['GarageType','GarageQual','GarageCond','GarageYrBlt','GarageFinish','GarageCars','GarageArea']\nfor col in garagefeat:\n    if data[col].dtype==np.object:\n        cat_imputation(col,'None')\n    else:\n        cat_imputation(col, 0)\n        \n#basement features\nbsmtfeat=['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','BsmtFinSF1','BsmtFinSF2']\nfor col in bsmtfeat:\n    if data[col].dtype==np.object:\n        cat_imputation(col,'None')\n    else:\n        cat_imputation(col, 0)","b69f7e3f":"data.loc[data.Electrical.isnull()==True,'Electrical']=data.Electrical.mode().values[0]","a1017057":"#check the overall number of missing vals\ndata.isnull().sum().sum()\n","82da4286":"fig=plt.figure(figsize=(15,12))\nax=plt.gca()\nsns.heatmap(data.corr(), annot=True,fmt='.1f', cmap='RdYlBu', ax=ax)","04dde2cc":"labels = [item.get_text() for item in ax.get_xticklabels()]\ntop10corr=data[labels].corr().abs().nlargest(10, 'SalePrice')['SalePrice']\ntop10corr_index=top10corr.index\nprint(top10corr)","19362651":"f=plt.figure(figsize=(9,9))\nsns.heatmap(data[top10corr_index].corr(), mask=np.triu(data[top10corr_index].corr(), k=0), annot=True, cmap='RdYlBu')","0dc9704c":"#use for multicol. after cleaning nans\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nx=data[quantitative].drop(['GrLivArea','TotalBsmtSF','GarageCars'], axis=1).assign(cons=1)\ncolln=pd.Series([variance_inflation_factor(x.values,i) for i in range(x.shape[1])], index=x.columns)\ntempcol=colln.index.tolist() + ['SalePrice']\ntempcol.remove('cons')\nprint('Largest 10 Correlations with target:\\n',data[tempcol].corr().nlargest(10, 'SalePrice')['SalePrice'])\nprint('\\nVIF:\\n',colln)\nprint('\\nFeatures with multicollinearity: ','GrLivArea','TotalBsmtSF','GarageCars')","a14f7359":"meanprices=data[['YearBuilt','SalePrice']].groupby('YearBuilt').mean()\nmeanquals=data[['YearBuilt','OverallQual']].groupby('YearBuilt').mean()\nfig=plt.figure(figsize=(20,8))\nax=fig.add_subplot(111)\nax.bar(meanprices.index, meanprices['SalePrice'], label='Sale Price'\n    ,alpha=0.7)\nax2=ax.twinx()\nax2.plot(meanquals, label='Overall Quality', c='r')\nax2.legend()\nax.legend()\nax.set_xlabel('Year Built')\nax.set_ylabel('Sale Price(log)')\nax2.set_ylabel('OverallQual')","6058b919":"fig, axs=plt.subplots(1,2, figsize=(8,4))\nsns.distplot(data.SalePrice, fit=ss.norm, ax=axs[0])\nsns.distplot(data.SalePrice, fit=ss.lognorm, ax=axs[1])\n","30e3c52c":"#log transformation\ndata['SalePrice']=np.log(data['SalePrice'])","526cab28":"data[['SalePrice', 'GrLivArea']].plot.scatter(x='GrLivArea', y='SalePrice', c='tab:red', edgecolor='w', s=50)","1cb015a7":"sns.pairplot(data[top10corr_index], palette='Set2', kind='scatter', height=3)","b245ac83":"d=pd.melt(data, value_vars=quantitative)\ngrid=sns.FacetGrid(d, col_wrap=3, col='variable', sharex=False, sharey=False)\ngrid=grid.map(sns.distplot,\"value\", kde=False)","6795362f":"d2=pd.melt(data, id_vars='SalePrice', value_vars=qualitative)\ng2=sns.FacetGrid(d2, col_wrap=3, col='variable', sharex=False, sharey=False, height=5)\ng=g2.map(sns.boxplot, 'value', 'SalePrice', palette=\"Set2\")\nfor ax in g2.axes.ravel():\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n    \nplt.tight_layout()","a21d03ac":"#Facet Grid Plot - FirePlace QC vs.SalePrice\ng = sns.FacetGrid(data, col = 'FireplaceQu', col_wrap = 3, col_order=data.FireplaceQu.unique()[1:]) #we added col_order so we wont see None column in our facetgrid\ng.map(sns.boxplot, 'Fireplaces', 'SalePrice', order = [1, 2, 3], palette = 'Set3')","90ee701c":"## 2.1. Heatmap","b104cab8":"+'BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','BsmtFinSF1','BsmtFinSF2'\n++'GarageType','GarageQual','GarageCond','GarageYrBlt','GarageFinish','GarageCars','GarageArea'","98e90670":"## LotFrontage","8d5b5167":"**features correlated more than 0.5 with SalePrice:**\n* OverallQual\n* GrLivArea\n* TotalBsmtSF\n* 1stFlrSF\n* FullBath\n* GarageCars\n* GarageArea  \n\n**Multicollinearity**? -assumptions \n* GarageCars and GarageArea\n* TotRmsAbvGrd and GrLivArea\n* GarageYrBlt and YearBuilt\n* TotRmsAbvGr and BedroomAbvGr\n* TotalBsmtSF and 1stFlrSF","a39cc9f4":"## 2.3. Multicollinearity","d66fbcd6":"## Misc Feature, Alley, MasVnrType,Fence, basement features +, garage features ++, FireplaceQu","f1690d29":"## PoolQC","5a7cc93c":"Even though PoolArea does not have missing values, turns out houses with no pools have PoolArea of 0. 1453 records have PoolArea feature of zero, also 1453 records have missing PoolQC feature.  \nThis concludes records with 0 PoolArea feature does not have pool.","f4033399":"## Quantitative Data Plots","db0a1073":"## 2.2. Zoomed Heatmap","86d1697f":"We observe **TotalBsmtSF** and **GrLivArea** and **GarageCars** have high VIF- which indicates there exists multicollinearity- and after excluding them from the model, VIFs drop to reasonable values.","bcc71f20":"## Categorical Data Plots","b2768537":"## Electrical","ad4f8f47":"# 2. CORRELATIONS","cb0ac820":"## Target: SalePrice\n","4488a0a6":"## YearBuilt vs (SalePrice, OverallQual)","9f7f7f69":"# PLOTS","4c7d8498":"# 1. MISSING VALUES"}}