{"cell_type":{"3c237dad":"code","470ae021":"code","b46c918a":"code","edd18df9":"code","6e26b1e7":"code","9009d22a":"code","3ef7114e":"code","2b04a3da":"code","be286f4f":"code","47c11308":"code","29d49b03":"code","5e872c22":"code","e3495719":"code","4a197f99":"code","8a24a665":"code","4cd63d0e":"code","05f05f68":"code","82fce722":"code","ce5becc5":"code","77130148":"code","02281958":"code","c111c794":"code","3c25f79f":"markdown","4f02b195":"markdown","a09f482c":"markdown","c93124ea":"markdown","ab777a71":"markdown","5e627bef":"markdown","efbff86c":"markdown","b560b9b3":"markdown"},"source":{"3c237dad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","470ae021":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.rcParams.update({'figure.max_open_warning': 0})","b46c918a":"data = pd.read_csv('\/kaggle\/input\/forest-cover-type-prediction\/train.csv')","edd18df9":"data.columns","6e26b1e7":"data.head()","9009d22a":"# removing the id column\nX = data.drop(columns='Id')","3ef7114e":"Y1 = X.loc[:, 'Elevation':'Slope' ]","2b04a3da":"for i,col in enumerate(Y1):\n    plt.figure(i, figsize=(12,5))\n    sns.boxplot(y=X[col],x=X['Cover_Type'])","be286f4f":"Y1 = pd.concat([Y1, X['Cover_Type']], axis=1)","47c11308":"sns.pairplot(Y1, hue ='Cover_Type')","29d49b03":"Y2 = X[['Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology', 'Horizontal_Distance_To_Roadways','Horizontal_Distance_To_Fire_Points']]","5e872c22":"for i,col in enumerate(Y2):\n    plt.figure(i, figsize=(12,5))\n    sns.boxplot(y=X[col],x=X['Cover_Type'])","e3495719":"Y2 = pd.concat([Y2, X['Cover_Type']], axis=1)","4a197f99":"sns.pairplot(Y2, hue ='Cover_Type')","8a24a665":"Y3= X[['Hillshade_9am', 'Hillshade_Noon','Hillshade_3pm']]","4cd63d0e":"for i,col in enumerate(Y3):\n    plt.figure(i, figsize=(12,5))\n    sns.boxplot(y=X[col],x=X['Cover_Type'])","05f05f68":"Y3 = pd.concat([Y3, X['Cover_Type']], axis=1)","82fce722":"sns.pairplot(Y3, hue ='Cover_Type')","ce5becc5":"Y4 = X[['Wilderness_Area1', 'Wilderness_Area2', 'Wilderness_Area3','Wilderness_Area4']]","77130148":"for i,col in enumerate(Y4):\n    plt.figure(i, figsize=(12,5))\n    y1 = []\n    x1 = []\n    for x, y in enumerate(X.groupby(by='Cover_Type')[col].sum()):\n        y1.append(y)\n        x1.append(x + 1)\n    plt.bar(x1,y1 )\n    plt.title(col)","02281958":"Y5 = X[['Soil_Type1', 'Soil_Type2', 'Soil_Type3',\n       'Soil_Type4', 'Soil_Type5', 'Soil_Type6', 'Soil_Type7', 'Soil_Type8',\n       'Soil_Type9', 'Soil_Type10', 'Soil_Type11', 'Soil_Type12',\n       'Soil_Type13', 'Soil_Type14', 'Soil_Type15', 'Soil_Type16',\n       'Soil_Type17', 'Soil_Type18', 'Soil_Type19', 'Soil_Type20',\n       'Soil_Type21', 'Soil_Type22', 'Soil_Type23', 'Soil_Type24',\n       'Soil_Type25', 'Soil_Type26', 'Soil_Type27', 'Soil_Type28',\n       'Soil_Type29', 'Soil_Type30', 'Soil_Type31', 'Soil_Type32',\n       'Soil_Type33', 'Soil_Type34', 'Soil_Type35', 'Soil_Type36',\n       'Soil_Type37', 'Soil_Type38', 'Soil_Type39', 'Soil_Type40',]]","c111c794":"for i,col in enumerate(Y5):\n    plt.figure(i, figsize=(6,4))\n    y1 = []\n    x1 = []\n    for x, y in enumerate(X.groupby(by='Cover_Type')[col].sum()):\n        y1.append(y)\n        x1.append(x + 1)\n    plt.bar(x1,y1)\n    plt.title(col)","3c25f79f":"# **we will classify the characteristics into subgroups to better understand the data**","4f02b195":" # **Y2 = 'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology', 'Horizontal_Distance_To_Roadways','Horizontal_Distance_To_Fire_Points'  **","a09f482c":"# **Y4 = 'Wilderness_Area1', 'Wilderness_Area2', 'Wilderness_Area3','Wilderness_Area4' **","c93124ea":"# **The aim of this excercise is to find correlations between different characteristics of forest such as elevation,slope,soil type, etc to the Cover_Type of a forest. Thus, we will use EDA to better understand the data**","ab777a71":"# **Y5 = All the soil types **","5e627bef":"# **Y1 = 'Elevation', 'Aspect', 'Slope'(group based on the geographical characteristics)**","efbff86c":"# Data_Dictionary\n\nElevation = Elevation in meters.\n\nAspect = Aspect in degrees azimuth.\n\nSlope = Slope in degrees.\n\nHorizontal_Distance_To_Hydrology = Horizontal distance to nearest surface water features.\n\nVertical_Distance_To_Hydrology = Vertical distance to nearest surface water features.\n\nHorizontal_Distance_To_Roadways = Horizontal distance to nearest roadway.\n\nHillshade_9am = Hill shade index at 9am, summer solstice. Value out of 255.\n\nHillshade_Noon = Hill shade index at noon, summer solstice. Value out of 255.\n\nHillshade_3pm = Hill shade index at 3pm, summer solstice. Value out of 255.\n\nHorizontal_Distance_To_Fire_Point = sHorizontal distance to nearest wildfire ignition points.\n\nWilderness_Area1 = Rawah Wilderness Area\n\nWilderness_Area2 = Neota Wilderness Area\n\nWilderness_Area3 = Comanche Peak Wilderness Area\n\nWilderness_Area4 = Cache la Poudre Wilderness Area\n\nSoil_Type1 to Soil_Type40 [Total 40 Types]\n","b560b9b3":"# **Y3 = 'Hillshade_9am', 'Hillshade_Noon','Hillshade_3pm' **"}}