{"cell_type":{"70be2a3d":"code","4b8376ee":"code","cc670076":"code","ec2d9f1c":"code","0437b2f8":"code","e155808e":"code","e1bc91e5":"code","d72c1744":"code","f4047b41":"code","566ce43b":"code","228da3de":"code","a79585b2":"code","4a344a8d":"code","a5706beb":"code","9cf9fc26":"code","255ca90e":"code","431b40a2":"code","aaf7071b":"code","dbf2f38c":"code","b7f55f74":"code","1ed414f6":"code","c348feb2":"code","3509a16e":"code","9e342ee2":"code","e7ceeb5f":"code","2d84e94c":"code","dd7b555b":"code","14d4ac35":"markdown","469edf9b":"markdown","7eae1a44":"markdown","0935c49b":"markdown","9a00b8b2":"markdown","f4c4be70":"markdown","ca995dd5":"markdown","232db31f":"markdown","ff6bfe92":"markdown","b6944371":"markdown","39b85aac":"markdown","defa4ce0":"markdown","9e20fc28":"markdown","8c6a46e5":"markdown","75060bab":"markdown","bdbf6b11":"markdown","b78cf831":"markdown","43ca30d7":"markdown"},"source":{"70be2a3d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n!ls -l \/kaggle\/input\/traffic-signs-classification","4b8376ee":"# Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style('whitegrid')\n%matplotlib inline\nfrom tensorflow.keras.utils import plot_model\n\n# Splitting data\nfrom sklearn.model_selection import train_test_split\n\n# Metrics \nfrom sklearn.metrics import confusion_matrix, classification_report\n\n# Deep Learning\nimport tensorflow as tf\nprint('TensoFlow Version: ', tf.__version__)\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Flatten, GlobalAveragePooling2D, BatchNormalization, Dropout\nfrom tensorflow.keras.applications.resnet import ResNet50\n\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau, CSVLogger","cc670076":"path = '\/kaggle\/input\/traffic-signs-classification'\nlab = pd.read_csv('\/kaggle\/input\/traffic-signs-classification\/labels.csv')\n","ec2d9f1c":"# Count PLot of the samples\/observations w.r.t the classes\nd = dict()\nclass_labels = dict()\nfor dirs in os.listdir(path + '\/myData'):\n    count = len(os.listdir(path+'\/myData\/'+dirs))\n    d[dirs+' => '+lab[lab.ClassId == int(dirs)].values[0][1]] = count\n    class_labels[int(dirs)] = lab[lab.ClassId == int(dirs)].values[0][1]\n\nplt.figure(figsize = (20, 50))\nsns.barplot(y = list(d.keys()), x = list(d.values()), palette = 'Set3')\nplt.ylabel('Label')\nplt.xlabel('Count of Samples\/Observations');","0437b2f8":"# input image dimensions\nimg_rows, img_cols = 32, 32\n# The images are RGB.\nimg_channels = 3\nnb_classes = len(class_labels.keys())\n\ndatagen = ImageDataGenerator()\ndata = datagen.flow_from_directory('\/kaggle\/input\/traffic-signs-classification\/myData',\n                                    target_size=(32, 32),\n                                    batch_size=73139,\n                                    class_mode='categorical',\n                                    shuffle=True )","e155808e":"X , y = data.next()","e1bc91e5":"# Labels are one hot encoded\nprint(f\"Data Shape   :{X.shape}\\nLabels shape :{y.shape}\")","d72c1744":"fig, axes = plt.subplots(10,10, figsize=(18,18))\nfor i,ax in enumerate(axes.flat):\n    r = np.random.randint(X.shape[0])\n    ax.imshow(X[r].astype('uint8'))\n    ax.grid(False)\n    ax.axis('off')\n    ax.set_title('Label: '+str(np.argmax(y[r])))\n    \n","f4047b41":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=11)","566ce43b":"print(\"Train Shape: {}\\nTest Shape : {}\".format(X_train.shape, X_test.shape))","228da3de":"resnet = ResNet50(weights= None, include_top=False, input_shape= (img_rows,img_cols,img_channels))","a79585b2":"x = resnet.output\nx = GlobalAveragePooling2D()(x)\nx = Dropout(0.5)(x)\npredictions = Dense(nb_classes, activation= 'softmax')(x)\nmodel = Model(inputs = resnet.input, outputs = predictions)","4a344a8d":"model.summary()","a5706beb":"plot_model(model, show_layer_names=True, show_shapes =True, to_file='model.png', dpi=350)","9cf9fc26":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","255ca90e":"model_check = ModelCheckpoint('best_model.h5', monitor='val_accuracy', verbose=0, save_best_only=True, mode='max')\n\nearly = EarlyStopping(monitor='val_accuracy', min_delta=0, patience=5, verbose=0, mode='max', restore_best_weights=True)\n\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=5, min_lr=0.001)\n\ncsv_logger = CSVLogger('train_log.csv', separator=',')\n","431b40a2":"n_epochs = 50\nhistory =  model.fit(X_train, y_train,  batch_size = 32, epochs = n_epochs, verbose = 1, \n              validation_data = (X_test, y_test), callbacks = [model_check, early, reduce_lr, csv_logger])","aaf7071b":"# Saving the model\nmodel.save('TSC_model.h5')","dbf2f38c":"loss, acc = model.evaluate(X_test, y_test)\nprint('Accuracy: ', acc, '\\nLoss    : ', loss)","b7f55f74":"q = len(list(history.history['loss']))\nplt.figure(figsize=(12, 6))\nsns.lineplot(x = range(1, 1+q), y = history.history['accuracy'], label = 'Accuracy')\nsns.lineplot(x = range(1, 1+q), y = history.history['loss'], label = 'Loss')\nplt.xlabel('#epochs')\nplt.ylabel('Training')\nplt.legend();","1ed414f6":"plt.figure(figsize=(12, 6))\nsns.lineplot(x = range(1, 1+q), y = history.history['accuracy'], label = 'Train')\nsns.lineplot(x = range(1, 1+q), y = history.history['val_accuracy'], label = 'Validation')\nplt.xlabel('#epochs')\nplt.ylabel('Accuracy')\nplt.legend();","c348feb2":"plt.figure(figsize=(12, 6))\nsns.lineplot(x = range(1, 1+q), y = history.history['loss'], label = 'Train')\nsns.lineplot(x = range(1, 1+q), y = history.history['val_loss'], label = 'Validation')\nplt.xlabel('#epochs')\nplt.ylabel('Loss')\nplt.legend();","3509a16e":"%%time\npred = np.argmax(model.predict(X_test), axis = 1)","9e342ee2":"labels = [class_labels[i] for i in range(43)]\nprint(classification_report(np.argmax(y_test, axis = 1), pred, target_names = labels))","e7ceeb5f":"cmat = confusion_matrix(np.argmax(y_test, axis=1), pred)\nplt.figure(figsize=(16,16))\nsns.heatmap(cmat, annot = True, cbar = False, cmap='Paired', fmt=\"d\", xticklabels=labels, yticklabels=labels);","2d84e94c":"classwise_acc = cmat.diagonal()\/cmat.sum(axis=1) * 100 \ncls_acc = pd.DataFrame({'Class_Label':[class_labels[i] for i in range(43)], 'Accuracy': classwise_acc.tolist()}, columns = ['Class_Label', 'Accuracy'])\ncls_acc.style.format({\"Accuracy\": \"{:,.2f}\",}).hide_index().bar(subset=[\"Accuracy\"], color='tomato')","dd7b555b":"fig, axes = plt.subplots(5,5, figsize=(18,18))\nfor i,ax in enumerate(axes.flat):\n    r = np.random.randint(X_test.shape[0])\n    ax.imshow(X_test[r].astype('uint8'))\n    ax.grid(False)\n    ax.axis('off')\n    ax.set_title('Original: {} Predicted: {}'.format(np.argmax(y_test[r]), np.argmax(model.predict(X_test[r].reshape(1, 32, 32, 3)))))","14d4ac35":"--- ","469edf9b":"## Classification Report","7eae1a44":"## Classwise Accuracy","0935c49b":"## Fitting Model with Data","9a00b8b2":"## Finally, Lets see the predictions of **unseen data**","f4c4be70":"## Reading Image Data","ca995dd5":"## Customising ResNet50 model  ","232db31f":"## Sample Images of Dataset","ff6bfe92":"# Taffic Sign Classification\n\nTraffic Sign Classification Using **Convolutional Neural Networks(CNNs)**, Which is widely used in various applications in the field of Artificial Intelligence. This notebook focuses on developing a deep learning model in order to classify the traffic signs.\ud83d\uded1\u274c\ud83d\udeab\ud83d\udeb7\ud83d\udeb3\n\n![taffic_signs](https:\/\/www.nevron.com\/NIMG.axd?i=Diagram\/Shapes\/TrafficSignsShapes\/Traffic_signs_shapes.png)\n","b6944371":"## Reading Data of Class Labels","39b85aac":"## Compiling the Model","defa4ce0":"## Importing Libraries","9e20fc28":"## Visualizing countplot of the classes","8c6a46e5":"## Predict class labels of the test data","75060bab":"## Dividing data into **train** and **test** in the split percentage of 80:20","bdbf6b11":"## Visualising Model Architecture","b78cf831":"## Confusion Matrix","43ca30d7":"## Creating Callbacks"}}