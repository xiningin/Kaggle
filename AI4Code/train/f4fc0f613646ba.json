{"cell_type":{"89293cb2":"code","c17b440f":"code","bb9f9c7e":"code","8f1a6639":"code","f03545af":"code","68941905":"code","79775d29":"code","6af5bed5":"code","66578028":"code","de15f90f":"code","c4acb13e":"code","a22bc6f1":"code","5b52bfc5":"code","56fe3840":"code","e9560d5a":"code","d9d76468":"code","e3484905":"code","6a4a28f0":"markdown","664e09ac":"markdown","3319a3ff":"markdown","5b0e66f5":"markdown","171324a4":"markdown","0abdd45c":"markdown","ad8c362e":"markdown"},"source":{"89293cb2":"!pip install fastai==0.7.0 --no-deps\n!pip install torch==0.4.1 torchvision==0.2.1","c17b440f":"from fastai.conv_learner import *\nfrom fastai.dataset import *\nfrom tqdm import tqdm\nimport pandas as pd\nimport numpy as np\nimport os\nfrom sklearn.model_selection import train_test_split, StratifiedShuffleSplit\nimport matplotlib.pyplot as plt\nimport math\nimport cv2\n\n\nMODEL_NAME = 'Resnext50'\nTRAIN = '..\/input\/humpback-whale-identification\/train\/'\nTEST = '..\/input\/humpback-whale-identification\/test\/'\nLABELS = '..\/input\/humpback-whale-identification\/train.csv'\nSAMPLE_SUB = '..\/input\/humpback-whale-identification\/sample_submission.csv'\n\n# Backbone architecture\narch = resnext50\n# Number of workers for data preprocessing\nnum_workers = 4","bb9f9c7e":"df = pd.read_csv(LABELS).set_index('Image')\nnew_whale_df = df[df.Id == \"new_whale\"] # only new_whale dataset\ntrain_df = df[~(df.Id == \"new_whale\")] # no new_whale dataset, used for training\nunique_labels = np.unique(train_df.Id.values)\n\nlabels_dict = dict()\nlabels_list = []\nfor i in range(len(unique_labels)):\n    labels_dict[unique_labels[i]] = i\n    labels_list.append(unique_labels[i])\nprint(\"Number of classes: {}\".format(len(unique_labels)))\ntrain_df.Id = train_df.Id.apply(lambda x: labels_dict[x])\ntrain_labels = np.asarray(train_df.Id.values)\ntest_names = [f for f in os.listdir(TEST)]","8f1a6639":"labels_count = train_df.Id.value_counts()\n\nplt.figure(figsize=(18, 4))\nplt.subplot(121)\n_, _,_ = plt.hist(labels_count.values)\nplt.ylabel(\"frequency\")\nplt.xlabel(\"class size\")\n\nplt.title('class distribution; log scale')\nlabels_count.head()\n\nplt.subplot(122)\n_ = plt.plot(labels_count[1:].values)\nplt.title('w\/o class new_whale; log scale')\nplt.xlabel(\"class\")\nplt.ylabel(\"log(size)\")\nplt.gca().set_yscale('log')","f03545af":"train_df['image_name'] = train_df.index\n\nrs = np.random.RandomState(42) # set random seed to be equal to the sense of life\nperm = rs.permutation(len(train_df))\n\ntr_n = train_df['image_name'].values\n# Yes, we will validate on the subset of training data\nval_n = train_df['image_name'].values[perm][:1000]\n\nprint('Train\/val:', len(tr_n), len(val_n))\nprint('Train classes', len(train_df.loc[tr_n].Id.unique()))\nprint('Val classes', len(train_df.loc[val_n].Id.unique()))","68941905":"import pickle\n\nPICKL = '..\/input\/cropimg\/bounding-box.pickle'\nwith open(PICKL, 'rb') as f:\n    crop_boxs = pickle.load(f)","79775d29":"from PIL import Image\n\ndef make_bbox_image(img_path):  \n    img_name = img_path.split('\/')[-1]                \n    \n    main_img = Image.open(img_path)\n    bb = crop_boxs[img_name]\n    \n    # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430 1\n    f=lambda a: int((abs(a)+a)\/2) + 1\n    \n    # \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0443 \u0438\u043d\u0430\u0447\u0435 \u0432\u044b\u043b\u0435\u0442\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0430\n    max_sz = 2500\n    ms = lambda x: max_sz if x > max_sz else x\n    \n    lst_bb = list(bb)\n    lst_bb[0] = f(lst_bb[0])\n    lst_bb[0] = ms(lst_bb[0])\n    \n    lst_bb[1] = f(lst_bb[1])\n    lst_bb[1] = ms(lst_bb[1])\n    \n    lst_bb[2] = f(lst_bb[2])\n    lst_bb[2] = ms(lst_bb[2])\n    \n    lst_bb[3] = f(lst_bb[3])\n    lst_bb[3] = ms(lst_bb[3])\n    bb = tuple(lst_bb)\n\n    if (bb[0] < bb[2]) & (bb[1] < bb[3]):\n        img_crop = main_img.crop(tuple(bb))\n    else:\n        img_crop = main_img\n        \n    return img_crop","6af5bed5":"import torchvision.transforms as transforms\npil2tensor = transforms.ToTensor()\n\nclass HWIDataset(FilesDataset):\n    def __init__(self, fnames, path, transform):\n        self.train_df = train_df\n        super().__init__(fnames, transform, path)\n\n    def get_x(self, i):\n        # \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c Crop\n        img_cr = make_bbox_image(os.path.join(self.path, self.fnames[i])).convert(\"RGB\")\n        img = pil2tensor(img_cr).numpy().transpose(1, 2, 0)\n        \n        try:\n            img = cv2.resize(img, (self.sz, self.sz))\n        except Exception as e:\n            print(self.fnames[i])\n            print(str(e))\n        return img\n\n    def get_y(self, i):\n        if (self.path == TEST): return 0\n        return self.train_df.loc[self.fnames[i]]['Id']\n\n    def get_c(self):\n        return len(unique_labels)\n","66578028":"class RandomLighting(Transform):\n    def __init__(self, b, c, tfm_y=TfmType.NO):\n        super().__init__(tfm_y)\n        self.b, self.c = b, c\n\n    def set_state(self):\n        self.store.b_rand = rand0(self.b)\n        self.store.c_rand = rand0(self.c)\n\n    def do_transform(self, x, is_y):\n        if is_y and self.tfm_y != TfmType.PIXEL: return x  # add this line to fix the bug\n        b = self.store.b_rand\n        c = self.store.c_rand\n        c = -1 \/ (c - 1) if c < 0 else c + 1\n        x = lighting(x, b, c)\n        return x\n    \ndef get_data(sz, batch_size):\n    \"\"\"\n    Read data and do augmentations\n    \"\"\"\n    aug_tfms = [RandomRotateZoom(deg=20, zoom=2, stretch=1),\n                RandomLighting(0.2, 0.2, tfm_y=TfmType.NO),\n                RandomBlur(blur_strengths=3,tfm_y=TfmType.NO),\n                RandomFlip(tfm_y=TfmType.NO)]\n    tfms = tfms_from_model(arch, sz, crop_type=CropType.NO, tfm_y=TfmType.NO,\n                           aug_tfms=aug_tfms)\n    ds = ImageData.get_ds(HWIDataset, (tr_n[:-(len(tr_n) % batch_size)], TRAIN),\n                          (val_n, TRAIN), tfms, test=(test_names, TEST))\n    md = ImageData(\".\/\", ds, batch_size, num_workers=num_workers, classes=None)\n    return md\n","de15f90f":"!wget http:\/\/files.fast.ai\/models\/weights.tgz\n!tar -zxvf weights.tgz\n!mkdir \/opt\/conda\/lib\/python3.6\/site-packages\/fastai\/weights\/\n!cp weights\/resnext_50_32x4d.pth \/opt\/conda\/lib\/python3.6\/site-packages\/fastai\/weights\/\n!rm -rf weights weights.tgz","c4acb13e":"image_size = 448\nbatch_size = 8\nmd = get_data(image_size, batch_size)\nextra_fc_layers_size = []\nlearn = ConvLearner.pretrained(arch, md, xtra_fc=extra_fc_layers_size) \nlearn.opt_fn = optim.Adam","a22bc6f1":"md.is_multi, md.is_reg","5b52bfc5":"print('Number of layer groups:', len(learn.get_layer_groups()), '\\t(first 2 groups is pretrained backbone)')\nprint('This is our extra thin on top of the backbone Resnet50 architecture:')\nlearn.get_layer_groups()[2]","56fe3840":"base_lr = 1e-4 # lr for the backbone\nfc_lr = 1e-3 # lr for the classifer\n\nlrs = [base_lr, base_lr, fc_lr]\n# Freeze backbone and train the classifier for 2 epochs\nlearn.fit(lrs=lrs, n_cycle=2, cycle_len=None)\n\n# Unfreeze backbone and continue training for 9 epochs\nlearn.unfreeze()\nlearn.fit(lrs, n_cycle=9, cycle_len=None)\nlearn.save(MODEL_PATH)","e9560d5a":"best_th = 0.4\n","d9d76468":"preds_t,y_t = learn.TTA(is_test=True,n_aug=8)\npreds_t = np.stack(preds_t, axis=-1)\npreds_t = np.exp(preds_t)\npreds_t = preds_t.mean(axis=-1)\npreds_t = np.concatenate([np.zeros((preds_t.shape[0],1))+best_th, preds_t],axis=1)\nnp.save(\"rx50_480_preds.npy\",preds_t)","e3484905":"sample_df = pd.read_csv(SAMPLE_SUB)\nsample_list = list(sample_df.Image)\nlabels_list = [\"new_whale\"]+labels_list\npred_list = [[labels_list[i] for i in p.argsort()[-5:][::-1]] for p in preds_t]\npred_dic = dict((key, value) for (key, value) in zip(learn.data.test_ds.fnames,pred_list))\npred_list_cor = [' '.join(pred_dic[id]) for id in sample_list]\ndf = pd.DataFrame({'Image':sample_list,'Id': pred_list_cor})\ndf.to_csv('submission_{}.csv'.format(MODEL_NAME), header=True, index=False)\ndf.head()","6a4a28f0":"## No Fuss Prediction with 8 TTA","664e09ac":"Finally, our submission.","3319a3ff":"# Nothing fancy, just train in here\nWe start by training only the newly initialized weights (classifier), then unfreeze the model and finetune the pretrained weights","5b0e66f5":"## Whales recognition ResNext baseline","171324a4":"Next, we prapare out dataset to work with Fastai's pipeline.","0abdd45c":"Let's draw a simple histogram to see the sample-per-class distribution.","ad8c362e":"**Crop**"}}