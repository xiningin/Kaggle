{"cell_type":{"311c2e43":"code","66e35639":"code","d83a8ef1":"code","9b7f441d":"code","7f62b635":"code","44dbb9f9":"code","c9169914":"code","a78c35b4":"code","79e8a15d":"code","c537187a":"code","9e46e914":"code","f5a32693":"code","7a281cb9":"code","18207c9c":"code","cb97cc12":"code","08e5a204":"code","5eda3c84":"code","a82ef896":"code","39cedaf0":"code","3301fdef":"markdown"},"source":{"311c2e43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","66e35639":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns","d83a8ef1":"df = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')","9b7f441d":"df.isnull().sum()","7f62b635":"df","44dbb9f9":"sns.barplot(x=df['age'],y=df['target'])","c9169914":"plt.hist(x=df['age'],histtype='bar')","a78c35b4":"plt.hist(x=df['thalach'],histtype='bar',color='green')","79e8a15d":"plt.hist(x=df['chol'],histtype='bar',color='yellow')","c537187a":"from sklearn.preprocessing import StandardScaler , LabelEncoder\nscaler = StandardScaler()","9e46e914":"label = LabelEncoder()\ntrain = df.iloc[:,:-1]\ntrain","f5a32693":"train['oldpeak'] = label.fit_transform(train['oldpeak'])","7a281cb9":"target = df['target']","18207c9c":"X_scaled = scaler.fit_transform(train)","cb97cc12":"from sklearn.metrics import roc_curve , roc_auc_score , confusion_matrix , accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingClassifier\ngrad = GradientBoostingClassifier()\nX_train,X_test,y_train,y_test = train_test_split(X_scaled,target,test_size=0.4,random_state=120)\ngrad.fit(X_train,y_train)\ny_pred=grad.predict(X_test)\naccuracy_score(y_pred,y_test)","08e5a204":"auc = roc_auc_score(y_test,y_pred)\nconfusion = confusion_matrix(y_test,y_pred)\ntp = confusion[0][0]\nfp = confusion[0][1]\nfn = confusion[1][0]\ntn = confusion[1][1]\n","5eda3c84":"from sklearn.metrics import plot_confusion_matrix\ndisp = plot_confusion_matrix(grad,X_test,y_test,cmap=plt.cm.Blues,normalize=None)\ndisp.confusion_matrix","a82ef896":"\n# finding accuracy \naccuracy = (tp+tn)\/(tp+tn+fp+fn)\naccuracy","39cedaf0":"fpr , tpr , thresholds = roc_curve(y_test,y_pred)\nplt.plot(fpr,tpr,color = 'darkblue',label = 'ROC')\nplt.plot([0,1],[0,1],color='orange',linestyle='--',label=\"ROC Curve(area=%0.2f)\"%auc)\nplt.xlabel('False + ve rate')\nplt.ylabel('True +ve rate')\nplt.legend()\nplt.show()","3301fdef":"**Follow my Github account: https:\/\/github.com\/satyamuralidhar\/Kaggle-HeartDisease_UCI   **\n\niam using gradient boosting techinque and ROC , AUC "}}