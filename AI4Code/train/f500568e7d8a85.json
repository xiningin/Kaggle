{"cell_type":{"2d2a2216":"code","49c52388":"code","3c9d9a5f":"code","3ba52092":"code","c2541a34":"code","2fc03cee":"code","153fa270":"code","36058d15":"code","d787eee0":"code","2c9c542a":"code","d31f9558":"markdown","46972a42":"markdown"},"source":{"2d2a2216":"!pip install \/kaggle\/input\/kerasapplications -q\n!pip install \/kaggle\/input\/efficientnet-keras-source-code\/ -q --no-deps","49c52388":"import os\n\nimport efficientnet.tfkeras as efn\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf","3c9d9a5f":"def auto_select_accelerator():\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        print(\"Running on TPU:\", tpu.master())\n    except ValueError:\n        strategy = tf.distribute.get_strategy()\n    print(f\"Running on {strategy.num_replicas_in_sync} replicas\")\n    \n    return strategy\n\n\ndef build_decoder(with_labels=True, target_size=(600, 600), ext='jpg'):\n    def decode(path):\n        file_bytes = tf.io.read_file(path)\n        if ext == 'png':\n            img = tf.image.decode_png(file_bytes, channels=3)\n        elif ext in ['jpg', 'jpeg']:\n            img = tf.image.decode_jpeg(file_bytes, channels=3)\n        else:\n            raise ValueError(\"Image extension not supported\")\n\n        img = tf.cast(img, tf.float32) \/ 255.0\n        img = tf.image.resize(img, target_size)\n\n        return img\n    \n    def decode_with_labels(path, label):\n        return decode(path), label\n    \n    return decode_with_labels if with_labels else decode\n\n\ndef build_augmenter(with_labels=True):\n    def augment(img):\n        img = tf.image.random_flip_left_right(img)\n        img = tf.image.random_flip_up_down(img)\n        return img\n    \n    def augment_with_labels(img, label):\n        return augment(img), label\n    \n    return augment_with_labels if with_labels else augment\n\n\ndef build_dataset(paths, labels=None, bsize=32, cache=True,\n                  decode_fn=None, augment_fn=None,\n                  augment=True, repeat=True, shuffle=1024, \n                  cache_dir=\"\"):\n    if cache_dir != \"\" and cache is True:\n        os.makedirs(cache_dir, exist_ok=True)\n    \n    if decode_fn is None:\n        decode_fn = build_decoder(labels is not None)\n    \n    if augment_fn is None:\n        augment_fn = build_augmenter(labels is not None)\n    \n    AUTO = tf.data.experimental.AUTOTUNE\n    slices = paths if labels is None else (paths, labels)\n    \n    dset = tf.data.Dataset.from_tensor_slices(slices)\n    dset = dset.map(decode_fn, num_parallel_calls=AUTO)\n    dset = dset.cache(cache_dir) if cache else dset\n    dset = dset.map(augment_fn, num_parallel_calls=AUTO) if augment else dset\n    dset = dset.repeat() if repeat else dset\n    dset = dset.shuffle(shuffle) if shuffle else dset\n    dset = dset.batch(bsize).prefetch(AUTO)\n    \n    return dset","3ba52092":"COMPETITION_NAME = \"ranzcr-clip-catheter-line-classification\"\nstrategy = auto_select_accelerator()\nBATCH_SIZE = strategy.num_replicas_in_sync * 16","c2541a34":"IMSIZE = (224, 240, 260, 300, 380, 456, 528, 600, 800, 512)\n\nload_dir = f\"\/kaggle\/input\/{COMPETITION_NAME}\/\"\nsub_df = pd.read_csv(load_dir + 'sample_submission.csv')\ntest_paths = load_dir + \"test\/\" + sub_df['StudyInstanceUID'] + '.jpg'\n\n# Get the multi-labels\nlabel_cols = sub_df.columns[1:]\n\ntest_decoder = build_decoder(with_labels=False, target_size=(IMSIZE[-2], IMSIZE[-2]))\ndtest = build_dataset(\n    test_paths, bsize=BATCH_SIZE, repeat=False, \n    shuffle=False, augment=False, cache=False,\n    decode_fn=test_decoder\n)","2fc03cee":"def create_model(w, input_shape=[IMSIZE[-2], IMSIZE[-2],3], classes=11):\n    base_model = efn.EfficientNetB7(include_top=False, \n                                      weights=None, \n                                      input_shape=input_shape)\n    \n    # Model\n    \n    inputs = tf.keras.Input(shape=input_shape)\n    x = base_model(inputs)\n    x = tf.keras.layers.GlobalAveragePooling2D()(x)\n    x = tf.keras.layers.Dropout(rate=0.2)(x)\n    x = tf.keras.layers.Dense(classes)(x)\n    outputs = tf.keras.layers.Activation('sigmoid', dtype='float32')(x) # Supports mixed-precision training\n    \n    model = tf.keras.Model(inputs, outputs)\n    \n    model.load_weights(w)\n    \n    return model","153fa270":"# with strategy.scope():\n#     model = tf.keras.models.load_model(\n#         '..\/input\/effnet-tpu-2\/model.h5'\n#     )\n    \n# print('Model Loading Done')\n\n# model.summary()","36058d15":"with strategy.scope():\n#     model = tf.keras.models.load_model('..\/input\/ranzcr-efficientnet-tpu-training\/eff_model-ranzcr1.h5')\n    model = create_model(\n        '..\/input\/ranzcr-efficientnet-tpu-training\/model-800.h5'\n    )\n\nmodel.summary()","d787eee0":"tf.keras.utils.plot_model(model, show_shapes=True)","2c9c542a":"sub_df[label_cols] = model.predict(dtest, verbose=1)\nsub_df.to_csv('submission.csv', index=False)\n\nsub_df.head()","d31f9558":"## Load model and submit","46972a42":"Unhide below to see helper functions:"}}