{"cell_type":{"4aafe060":"code","4951656f":"code","b2df8e1a":"code","d332f290":"code","0bbd966e":"code","597a2efa":"code","39f2f3d0":"code","a6b1ed59":"code","a32710a4":"code","417b6ce8":"code","a9558ac0":"code","bd55ec66":"code","45ec1aa3":"code","3f3211ec":"code","1737fd20":"code","028ff201":"code","cb168e33":"code","a2bf9f24":"code","f0604a9f":"code","bff64df7":"code","a74d4c71":"code","ff4f46e3":"code","be3df2f1":"code","297f2305":"code","fed430fe":"code","71858501":"markdown","0b9d8268":"markdown","645ca33e":"markdown","42b1ee72":"markdown","19945330":"markdown","dd683be0":"markdown","3dccd813":"markdown","c119608c":"markdown","e2210cf1":"markdown"},"source":{"4aafe060":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4951656f":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadsdeathscsv\/deaths.csv', delimiter=';', encoding = \"ISO-8859-1\", nrows = nRowsRead)\ndf.dataframeName = 'deaths.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","b2df8e1a":"df.head(5)","d332f290":"df.describe()","0bbd966e":"# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in df.columns if\n                    df[cname].nunique() < 10 and \n                    df[cname].dtype == \"object\"]\n\n\n# Select numerical columns\nnumerical_cols = [cname for cname in df.columns if \n                df[cname].dtype in ['int64', 'float64']]","597a2efa":"print(categorical_cols)","39f2f3d0":"print(numerical_cols)","a6b1ed59":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","a32710a4":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)","417b6ce8":"plotPerColumnDistribution(df, 10, 5)","a9558ac0":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='r', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","bd55ec66":"plotCorrelationMatrix(df, 8)","45ec1aa3":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","3f3211ec":"plotScatterMatrix(df, 8, 6)","1737fd20":"print (\"Skew is:\", df.lower.skew())\nplt.hist(df.lower, color='palegreen')\nplt.show()","028ff201":"target = np.log(df.lower)\nprint (\"Skew is:\", target.skew())\nplt.hist(target, color='purple')\nplt.show()","cb168e33":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling as pp\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport plotly.express as px","a2bf9f24":"df.plot(kind='scatter', x='lower', y='upper.1', alpha=0.5, color='darkgreen', figsize = (12,9))\nplt.title('lower And upper.1')\nplt.xlabel(\"lower\")\nplt.ylabel(\"upper.1\")\nplt.show()","f0604a9f":"trace1 = go.Box(\n    y=df[\"lower\"],\n    name = 'lower',\n    marker = dict(color = 'rgb(0,145,119)')\n)\ntrace2 = go.Box(\n    y=df[\"upper.1\"],\n    name = 'upper.1',\n    marker = dict(color = 'rgb(255, 111, 145)')\n)\n\ndata = [trace1, trace2]\nlayout = dict(autosize=False, width=700,height=500, title='year', paper_bgcolor='rgb(243, 243, 243)', \n              plot_bgcolor='rgb(243, 243, 243)', margin=dict(l=40,r=30,b=80,t=100,))\nfig = dict(data=data, layout=layout)\niplot(fig)","bff64df7":"deathsIndSec=df.groupby(['lower','upper','median'])['upper.1'].mean().reset_index()\n\nfig = px.scatter_mapbox(deathsIndSec[deathsIndSec[\"lower\"]=='Nan'], \n                        lat=\"upper\", lon=\"median\",size=\"lower\",size_max=12,\n                        color=\"lower\", color_continuous_scale=px.colors.sequential.Inferno, zoom=11)\nfig.update_layout(mapbox_style=\"stamen-terrain\")\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","a74d4c71":"ax = sns.swarmplot(x=\"lower\", y=\"upper\", data=df)","ff4f46e3":"f,ax = plt.subplots(figsize=(8,6))\nsns.heatmap(df.corr(),annot=True, linewidths=.5, fmt='.1f', ax=ax)\nplt.show()","be3df2f1":"df.plot(kind='scatter', x='lower', y='upper.1', alpha=0.5, color='darkblue', figsize = (12,9))\nplt.title('lower And upper.1')\nplt.xlabel(\"lower\")\nplt.ylabel(\"upper.1\")\nplt.show()","297f2305":"f,ax=plt.subplots(1,2,figsize=(15,7))\ndf.lower.plot.hist(ax=ax[0],bins=30,edgecolor='black',color='crimson')\nax[0].set_title('lower')\nx1=list(range(-150,350,50))\nax[0].set_xticks(x1)\nplt.show()","fed430fe":"labels1=df.lower.value_counts().index\nsizes1=df.lower.value_counts().values\nplt.figure(figsize=(11,11))\nplt.pie(sizes1,labels=labels1,autopct=\"%1.1f%%\")\nplt.title(\"lower\",size=25)\nplt.show()","71858501":"Fatih Bilgin rules!","0b9d8268":"I don't know how to eliminate the second unuseful plot.","645ca33e":"Kaggler's bot codes.","42b1ee72":"The code below is from @rpowers9. Thanks for sharing (kernel 54163d971a) learn-with-other-users competition 2019. It seems to be obvious that there is no categorical columns, but just in case I like to run these codes.","19945330":"Never before a kernel made me so depressed. But as Scientists we should stay focused to clarify the causes of children mortality, so that authorities use that knowledge to develop strategies to change the situation. ","dd683be0":"Pie chart from Melih Kanbay @melihkanbay.","3dccd813":"Fatih Bilgin codes","c119608c":"None categorical columns.","e2210cf1":"I got it opt\/conda, but I still don't know how to use this code below."}}