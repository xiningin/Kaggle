{"cell_type":{"abb73217":"code","660d8c04":"code","80fb1782":"code","da80ed2a":"code","e9e44afb":"code","7edfc4ae":"code","366a7a8e":"code","ee5b90bf":"code","0b7e61d5":"code","b699e865":"code","5d9dfa28":"code","52eb1de3":"code","c5ba428e":"markdown","9e0ba465":"markdown","2fa97383":"markdown","eeb5da23":"markdown","14cc945f":"markdown","6ac997d7":"markdown","66a7506e":"markdown"},"source":{"abb73217":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","660d8c04":"x = np.load(\"\/kaggle\/input\/sign-language-digits-dataset\/X.npy\")\ny = np.load(\"\/kaggle\/input\/sign-language-digits-dataset\/Y.npy\")\n\nprint(x.shape)\n\nimg_size = 64  # Bu resimler 64x64 boyutlu olmas\u0131 i\u00e7in\n\nplt.subplot(1, 2, 1)\nplt.imshow(x[260].reshape(img_size, img_size))\nplt.subplot(1, 2, 2)\nplt.imshow(x[500].reshape(img_size, img_size))\nplt.show()","80fb1782":"x = x.reshape(-1,64,64,1)\n\nprint(\"X Shape:\",x.shape)\nprint(\"Y Shape:\",y.shape)\n\nnumber_of_classes = y.shape[1]","da80ed2a":"list_y = []\nlist_y = [np.where(i == 1)[0][0] for i in y]\ncount = pd.Series(list_y).value_counts()\nprint(count)","e9e44afb":"plt.figure(figsize = (10,5))\nsns.countplot(np.array(list_y))\nplt.show()","7edfc4ae":"X_organized = np.concatenate((x[204:409,:],\n                              x[822:1028,:],\n                              x[1649:1855,:],\n                              x[1443:1649,:],\n                              x[1236:1443,:],\n                              x[1855:2062,:],\n                              x[615:822,:],\n                              x[409:615,:],\n                              x[1028:1236,:],\n                              x[0:204,:]),axis = 0)","366a7a8e":"plt.figure(figsize=(20,6))\n\nfor i,j in enumerate([0,205,411,617,823,1030,1237,1444,1650,1858]):\n    plt.subplot(2,5,i+1)\n    plt.subplots_adjust(top = 2, bottom = 1)\n    plt.imshow(X_organized[j].reshape(64,64))\n    plt.title(np.argmax(y[j]))\n    plt.axis('off')","ee5b90bf":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test = train_test_split(X_organized,y,test_size = 0.2,random_state = 42)\n\nprint(\"x_train shape:\",x_train.shape)\nprint(\"x_test shape:\",x_test.shape)\nprint(\"y_train shape:\",y_train.shape)\nprint(\"y_test shape:\",y_test.shape)","0b7e61d5":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, MaxPool2D, Conv2D, Flatten\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator","b699e865":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (9,9),padding = 'Same', activation ='relu', input_shape = (64,64,1)))\nmodel.add(MaxPool2D(pool_size=(5,5)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (7,7),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(4,4), strides=(3,3)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters = 128 , kernel_size = (5,5),padding = 'Same',activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(3,3), strides=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dense(10, activation='softmax'))\n\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)\n\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n\ndatagen = ImageDataGenerator(zoom_range = 0.5,rotation_range = 45)\ndatagen.fit(x_train)\n\nhistory = model.fit(datagen.flow(x_train,y_train, batch_size=250),epochs = 100, validation_data = (x_test,y_test))","5d9dfa28":"plt.figure(figsize = (10,5))\nplt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","52eb1de3":"from sklearn.metrics import confusion_matrix\n\n\ny_predict = model.predict(x_test)\ny_predict_classes = np.argmax(y_predict,axis = 1) \ny_true = np.argmax(y_test,axis = 1) \nconfusion_mtx = confusion_matrix(y_true, y_predict_classes) \nplt.figure(figsize = (10,10))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f')\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","c5ba428e":"<a id=\"8\"><\/a> <br>\n## Create CNN Model","9e0ba465":"<a id=\"1\"><\/a> <br>\n## Introduction\n<a id=\"2\"><\/a> <br>\n## What are CNN ?\n\nConvolutional Neural Networks are very similar to ordinary Neural Networks from the previous chapter: they are made up of neurons that have learnable weights and biases. Each neuron receives some inputs, performs a dot product and optionally follows it with a non-linearity. The whole network still expresses a single differentiable score function: from the raw image pixels on one end to class scores at the other. And they still have a loss function (e.g. SVM\/Softmax) on the last (fully-connected) layer and all the tips\/tricks we developed for learning regular Neural Networks still apply.\n\nSo what changes? ConvNet architectures make the explicit assumption that the inputs are images, which allows us to encode certain properties into the architecture. These then make the forward function more efficient to implement and vastly reduce the amount of parameters in the network.\n<a id=\"3\"><\/a> <br>\n## Layers used to build ConvNets\nAs we described above, a simple ConvNet is a sequence of layers, and every layer of a ConvNet transforms one volume of activations to another through a differentiable function. We use three main types of layers to build ConvNet architectures: Convolutional Layer, Pooling Layer, and Fully-Connected Layer (exactly as seen in regular Neural Networks). We will stack these layers to form a full ConvNet architecture.\n\nExample Architecture: Overview. We will go into more details below, but a simple ConvNet for CIFAR-10 classification could have the architecture [INPUT - CONV - RELU - POOL - FC]. In more detail:\n\n- INPUT [32x32x3] will hold the raw pixel values of the image, in this case an image of width 32, height 32, and with three color channels R,G,B.  \n- CONV layer will compute the output of neurons that are connected to local regions in the input, each computing a dot product between their weights and a small region they are connected to in the input volume. This may result in volume such as [32x32x12] if we decided to use 12 filters.   \n- RELU layer will apply an elementwise activation function, such as the max(0,x) thresholding at zero. This leaves the size of the volume unchanged ([32x32x12]).   \n- POOL layer will perform a downsampling operation along the spatial dimensions (width, height), resulting in volume such as [16x16x12].    \n- FC (i.e. fully-connected) layer will compute the class scores, resulting in volume of size [1x1x10], where each of the 10 numbers correspond to a class score, such as among the 10 categories of CIFAR-10. As with ordinary Neural Networks and as the name implies, each neuron in this layer will be connected to all the numbers in the previous volume.  ","2fa97383":"* -204-409 => 0\n* -822-1028 => 1\n* -1649-1855 => 2\n* -1443-1649 => 3\n* -1236-1443 => 4\n* -1855-2062 => 5\n* -615-822 => 6\n* -409-615 => 7\n* -1028-1236 => 8\n* -0-204 => 9","eeb5da23":"<font color='red'>\n<br>Content:\n    \n* [Introduction](#1)\n    * [What are CNN ?](#2)\n    * [Layers used to build ConvNets](#3)\n* [Convolutional Neural Network](#4)\n    * [Loading Dataset](#5)\n    * [Reshape and Concatenate](#6)\n    * [Train Test Split](#7)\n    * [Create CNN Model](#7)","14cc945f":"<a id=\"4\"><\/a> <br>\n## Convolutional Neural Network\n<a id=\"5\"><\/a> <br>\n## Loading Dataset","6ac997d7":"<a id=\"7\"><\/a> <br>\n## Train Test Split","66a7506e":"<a id=\"6\"><\/a> <br>\n## Reshape and Concatenate"}}