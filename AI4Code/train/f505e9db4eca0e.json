{"cell_type":{"3d95c441":"code","0970a647":"code","6262098a":"code","3e40903b":"code","0c55edbe":"code","6afac058":"code","5158fa63":"code","98b294ae":"code","e61a1306":"code","42eb0b1f":"code","5be58f20":"code","a1408b3b":"code","960c715d":"code","c0ede5d1":"code","5b8e881c":"code","7c0ecfbb":"code","627f894d":"code","cdd90213":"code","7a5fd9ab":"code","a0fb2955":"code","7a22fb94":"code","d886ed56":"code","5eccbd56":"code","0d59dfdb":"code","03e70807":"code","3388c344":"code","647140bd":"code","1a3ffcfa":"code","4f684302":"code","4c11b54f":"code","7c7061b8":"code","b75ce4f2":"code","b2bc8357":"markdown","5fb473dd":"markdown","fda6edce":"markdown","b942f475":"markdown","0664daf9":"markdown","ff07a721":"markdown","e5bf18b5":"markdown","ba029e4e":"markdown","cfcb4cc6":"markdown","d73d2e3d":"markdown","f8899f64":"markdown","0f85f664":"markdown"},"source":{"3d95c441":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0970a647":"# Load and visualize the data\nimport numpy as np\nimport pandas as pd\n\ndata=pd.read_csv('\/kaggle\/input\/imdb-movie-review-dataset\/movie_data.csv')\n    ","6262098a":"\nimport re\n\ndef preprocessor(text):\n    text = re.sub('<[^>]*>', '', text)\n    emoticons = re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', text)\n    text = re.sub('[\\W]+', ' ', text.lower())\n    text = text + \" \".join(emoticons).replace('-', '')\n    return text\n\npreprocessor(\"<\/a>This :) is :( a test :-)!\")","3e40903b":"data['review'] = data['review'].apply(preprocessor)\n\n","0c55edbe":"data['review'][3]","6afac058":"# split the words in the review\nreviews=[]\nfor i in range(data['review'].shape[0]):\n    words=data['review'][i].split()\n    reviews.append(words)","5158fa63":"reviews[0]","98b294ae":"# Now I want to join all the words in whole review\nwords=[]\nfor i in range(data['review'].shape[0]):\n    word=[word for word in data['review'][i].split()]\n    words+=word\n    \n    ","e61a1306":"len(words)","42eb0b1f":"from collections import Counter\n\n# build a dictionary that maps words to integers\ncounts=Counter(words)\nvocab=sorted(counts,key=counts.get,reverse=True)\nvocab_to_int={word:ii for ii,word in enumerate(vocab,start=1)}\n\n\n## use the dict to tokenize each review in reviews_split\n## store the tokenized reviews in reviews_ints\n\nreviews_ints=[]\n\nfor review in reviews:\n    reviews_ints.append([vocab_to_int[word] for word in review])","5be58f20":"# stats about vocabulary\nprint(\"Unique words: \",len(vocab_to_int))\nprint()\n\n# print tokens in first review\nprint('Tokenized review : \\n',reviews_ints[:1])","a1408b3b":"# getting the labels corresponding to the Reviews 0=\"Negative\" and 1=\"Positive\"\nlabels=data['sentiment'].to_numpy()\nlen(labels)","960c715d":"# outlier review stats\n\nreview_lens=Counter([len(x) for x in reviews_ints])\nprint(\"Zero Length Reviews : {}\".format(review_lens[0]))\nprint(\"Maximum review length: {}\".format(max(review_lens)))\n\n# there is no empty review\n# The review with maximum length is 2498 ","c0ede5d1":"def pad_features(reviews_ints,seq_length):\n    ''' Return features of review_ints, where each review is padded with 0's \n        or truncated to the input seq_length.\n    '''\n    \n    # getting the correct rows x cols shape\n    features=np.zeros((len(reviews_ints),seq_length),dtype=int)\n    \n    # For each review I grab that review and\n    for i,row in enumerate(reviews_ints):\n        features[i,-len(row):]=np.array(row)[:seq_length]\n        \n    return features","5b8e881c":"# test The Implementation\n\nseq_length=200\n\nfeatures=pad_features(reviews_ints,seq_length=seq_length)\n\n# test Statements\nassert len(features)==len(reviews_ints),\"Features should have as many rows as reviews\"\n\nassert len(features[0])==seq_length,\"Each Features row should contains Sequence length values\"\n\n# Print first 10 values of first 30 batches\nprint(features[:30,:10])","7c0ecfbb":"features[0]","627f894d":"split_frac=0.8\n\n\n### split data into training, validation, and test data (features and labels, x and y)\n\nsplit_idx=int(len(features)*split_frac)\n\ntrain_x,remaining_x=features[:split_idx],features[split_idx:]\ntrain_y,remaining_y=labels[:split_idx],labels[split_idx:]\n\ntest_idx=int(len(remaining_x)*0.5)\nval_x,test_x=remaining_x[:test_idx],remaining_x[test_idx:]\nval_y,test_y=remaining_y[:test_idx],remaining_x[test_idx:]\n\n## print out the shapes of your resultant feature data\n\nprint(\"\\t\\t\\tFeature Shapes:\")\nprint(\"Train set: \\t\\t{}\".format(train_x.shape), \n      \"\\nValidation set: \\t{}\".format(val_x.shape),\n      \"\\nTest set: \\t\\t{}\".format(test_x.shape))","cdd90213":"import torch\n\nfrom torch.utils.data import TensorDataset,DataLoader\n\n# Create Tensor dataset\ntrain_data=TensorDataset(torch.from_numpy(train_x),torch.from_numpy(train_y))\nval_data=TensorDataset(torch.from_numpy(val_x),torch.from_numpy(val_y))\ntest_data=TensorDataset(torch.from_numpy(test_x),torch.from_numpy(test_y))\n\n# Dataloader\nbatch_size=50\n\n# Make sure to shuffle your training data\n\ntrain_loader=DataLoader(train_data,shuffle=True,batch_size=batch_size,drop_last=True)\nvalid_loader=DataLoader(val_data,shuffle=True,batch_size=batch_size,drop_last=True)\ntest_loader=DataLoader(test_data,shuffle=True,batch_size=batch_size,drop_last=True)\n","7a5fd9ab":"# Obtain One batch of Training Data\ndataiter=iter(train_loader)\nsample_x,sample_y=dataiter.next()\n\nprint(\"Sample Input Size: \",sample_x.size()) # batch_size,seq_length\nprint(\"Sample Input :\",sample_x)\nprint()\n\nprint(\"Sample Label size :\",sample_y.size()) # Batch_size\nprint(\"Sample Label :\",sample_y)","a0fb2955":"# First Checking if GPU is Available\n\ntrain_on_gpu=torch.cuda.is_available()\n\nif(train_on_gpu):\n    print(\"Training on GPU\")\n\nelse:\n    print(\"Training on CPU\")","7a22fb94":"import torch.nn as nn\n\nclass SentimentRNN(nn.Module):\n    \"\"\"\n    The RNN model that will be used to perform Sentiment analysis.\n    \"\"\"\n\n    def __init__(self, vocab_size, output_size, embedding_dim, hidden_dim, n_layers, drop_prob=0.5):\n        \"\"\"\n        Initialize the model by setting up the layers.\n        \"\"\"\n        super(SentimentRNN, self).__init__()\n\n        self.output_size = output_size\n        self.n_layers = n_layers\n        self.hidden_dim = hidden_dim\n        \n        # embedding and LSTM layers\n        self.embedding = nn.Embedding(vocab_size, embedding_dim)\n        self.lstm = nn.LSTM(embedding_dim, hidden_dim, n_layers, \n                            dropout=drop_prob, batch_first=True)\n        \n        # dropout layer\n        self.dropout = nn.Dropout(0.3)\n        \n        # linear and sigmoid layers\n        self.fc = nn.Linear(hidden_dim, output_size)\n        self.sig = nn.Sigmoid()\n        \n\n    def forward(self, x, hidden):\n        \"\"\"\n        Perform a forward pass of our model on some input and hidden state.\n        \"\"\"\n        batch_size = x.size(0)\n\n        # embeddings and lstm_out\n        x = x.long()\n        embeds = self.embedding(x)\n        lstm_out, hidden = self.lstm(embeds, hidden)\n    \n        # stack up lstm outputs\n        lstm_out = lstm_out.contiguous().view(-1, self.hidden_dim)\n        \n        # dropout and fully-connected layer\n        out = self.dropout(lstm_out)\n        out = self.fc(out)\n        # sigmoid function\n        sig_out = self.sig(out)\n        \n        # reshape to be batch_size first\n        sig_out = sig_out.view(batch_size, -1)\n        sig_out = sig_out[:, -1] # get last batch of labels\n        \n        # return last sigmoid output and hidden state\n        return sig_out, hidden\n    \n    \n    def init_hidden(self, batch_size):\n        ''' Initializes hidden state '''\n        # Create two new tensors with sizes n_layers x batch_size x hidden_dim,\n        # initialized to zero, for hidden state and cell state of LSTM\n        weight = next(self.parameters()).data\n        \n        if (train_on_gpu):\n            hidden = (weight.new(self.n_layers, batch_size, self.hidden_dim).zero_().cuda(),\n                  weight.new(self.n_layers, batch_size, self.hidden_dim).zero_().cuda())\n        else:\n            hidden = (weight.new(self.n_layers, batch_size, self.hidden_dim).zero_(),\n                      weight.new(self.n_layers, batch_size, self.hidden_dim).zero_())\n        \n        return hidden\n        ","d886ed56":"# Instantiate the model w\/ hyperparams\nvocab_size = len(vocab_to_int)+1 # +1 for the 0 padding + our word tokens\noutput_size = 1\nembedding_dim = 400\nhidden_dim = 256\nn_layers = 2\n\nnet = SentimentRNN(vocab_size, output_size, embedding_dim, hidden_dim, n_layers)\n\nprint(net)","5eccbd56":"# Loss and optimization functions\nlr=0.001\ncriterion=nn.BCELoss()\noptimizer=torch.optim.Adam(net.parameters(),lr=lr)","0d59dfdb":"# training params\n\nepochs = 4 # 3-4 is approx where I noticed the validation loss stop decreasing\n\ncounter = 0\nprint_every = 100\nclip=5 # gradient clipping\n\n# move model to GPU, if available\nif(train_on_gpu):\n    net.cuda()\n\nnet.train()\n# train for some number of epochs\nfor e in range(epochs):\n    # initialize hidden state\n    h = net.init_hidden(batch_size)\n\n    # batch loop\n    for inputs, labels in train_loader:\n        counter += 1\n\n        if(train_on_gpu):\n            inputs, labels = inputs.cuda(), labels.cuda()\n\n        # Creating new variables for the hidden state, otherwise\n        # we'd backprop through the entire training history\n        h = tuple([each.data for each in h])\n\n        # zero accumulated gradients\n        net.zero_grad()\n\n        # get the output from the model\n        output, h = net(inputs, h)\n\n        # calculate the loss and perform backprop\n        loss = criterion(output.squeeze(), labels.float())\n        loss.backward()\n        # `clip_grad_norm` helps prevent the exploding gradient problem in RNNs \/ LSTMs.\n        nn.utils.clip_grad_norm_(net.parameters(), clip)\n        optimizer.step()\n\n        # loss stats\n        if counter % print_every == 0:\n            # Get validation loss\n            val_h = net.init_hidden(batch_size)\n            val_losses = []\n            net.eval()\n            for inputs, labels in valid_loader:\n\n                # Creating new variables for the hidden state, otherwise\n                # we'd backprop through the entire training history\n                val_h = tuple([each.data for each in val_h])\n\n                if(train_on_gpu):\n                    inputs, labels = inputs.cuda(), labels.cuda()\n\n                output, val_h = net(inputs, val_h)\n                val_loss = criterion(output.squeeze(), labels.float())\n\n                val_losses.append(val_loss.item())\n\n            net.train()\n            print(\"Epoch: {}\/{}...\".format(e+1, epochs),\n                  \"Step: {}...\".format(counter),\n                  \"Loss: {:.6f}...\".format(loss.item()),\n                  \"Val Loss: {:.6f}\".format(np.mean(val_losses)))","03e70807":"# Get test data loss and accuracy\n\ntest_losses=[]\nnum_correct=0\n\n# init hidden state\n\nh=net.init_hidden(batch_size)\n\nnet.eval()\n\n# Iterate Over test data\nfor inputs,lebels in test_loader:\n    \n    # Creating new variables for the hidden state, otherwise\n    # we'd backprop through the entire training history\n    \n    h=tuple([each.data for each in h])\n    \n    if(train_on_gpu):\n        inputs,labels=inputs.cuda(),labels.cuda()\n        \n    # Get predicted outputs\n    output,h=net(inputs,h)\n    \n    # calculate loss\n    test_loss=criterion(output.squeeze(),labels.float())\n    test_losses.append(test_loss.item())\n    \n    # Convert output probabilities to predicted class(0 or 1) \n    pred=torch.round(output.squeeze())   # rounds to the nearest integer\n    \n    # Compare predictions to true label\n    \n    correct_tensor=pred.eq(labels.float().view_as(pred))\n    correct=np.squeeze(correct_tensor.numpy()) if not train_on_gpu else np.squeeze(correct_tensor.cpu().numpy())\n    num_correct+=np.sum(correct)\n    \n    \n    \n    \n#stats\n\n# Average test loss\nprint(\"Test Loss: {:.3f}\".format(np.mean(test_losses)))\n\n# Accuracy over all test data\ntest_acc=num_correct\/len(test_loader.dataset)\nprint(\"Test accuracy: {:.3f}\".format(test_acc))    \n    \n    \n    \n    ","3388c344":"# negative test review\ntest_review_neg='The worst movie I have seen; acting was terrible and I want my money back. This movie had bad acting and the dialogue was slow.'","647140bd":"from string import punctuation\n\ndef tokenize_review(test_review):\n    test_review=test_review.lower() # Lowercase\n    # Get Rid of punctuation\n    test_text=''.join(c for c in test_review if c not in punctuation)\n    \n    # Splitting by spaces\n    test_words=test_text.split()\n    \n    # Tokens\n    test_ints=[]\n    test_ints.append([vocab_to_int[word] for word in test_words])\n    \n    \n    return test_ints\n\n# test code and generate tokenized review\n\ntest_ints=tokenize_review(test_review_neg)\nprint(test_ints)","1a3ffcfa":"# Test sequence Padding\nseq_length=200\nfeatures=pad_features(test_ints,seq_length)\nprint(features)","4f684302":"# test conversion to tensor and pass into your model\nfeature_tensor=torch.from_numpy(features)\nprint(feature_tensor.size())","4c11b54f":"def predict(net,test_review,sequence_length=200):\n    net.eval()\n    \n    # Tokenize Review\n    test_ints=tokenize_review(test_review)\n    \n    # pad tokenized sequence\n    seq_length=sequence_length\n    features=pad_features(test_ints,seq_length)\n    \n    # Convert to tensor to pass into your model\n    feature_tensor=torch.from_numpy(features)\n    batch_size=feature_tensor.size(0)\n    \n    # Initialize hidden State\n    h=net.init_hidden(batch_size)\n    \n    if(train_on_gpu):\n        feature_tensor=feature_tensor.cuda()\n        \n    # Get the output from the model\n    output,h=net(feature_tensor,h)\n    \n    # convert output probabilities to predicted class (0 or 1)\n    pred=torch.round(output.squeeze())\n    #printing output value, before rounding\n    print('Prediction value, pre-rounding: {:.6f}'.format(output.item()))\n    \n    \n    # Print custom response\n    if(pred.item()==1):\n        print(\"Positive Review Detected !\")\n        \n    else:\n        print(\"Negative Review Detected !\")\n    ","7c7061b8":"# positive test review\ntest_review_pos = 'This movie had the best acting and the dialogue was so good. I loved it.'\n","b75ce4f2":"# call function\nseq_length=200 # good to use the length that was trained on\n\npredict(net, test_review_pos, seq_length)","b2bc8357":"## Removing Outliers\nAs an additional pre-processing step, we want to make sure that our reviews are in good shape for standard processing. That is, our network will expect a standard input text size, and so, we'll want to shape our reviews into a specific length. We'll approach this task in two main steps:\n\n1. Getting rid of extremely long or short reviews; the outliers\n2. Padding\/truncating the remaining data so that we have reviews of the same length.\nBefore we pad our review text, we should check for reviews of extremely short or long lengths; outliers that may mess with our training.","5fb473dd":"## Training, Validation, Test\nWith our data in nice shape, we'll split it into training, validation, and test sets.\n\n>>Create the training, validation, and test sets.\n\n>>* You'll need to create sets for the features and the labels, train_x and train_y, for example.  \n>>* Define a split fraction, split_frac as the fraction of data to keep in the training set. Usually this is set to 0.8 or 0.9.\n>>* Whatever data is left will be split in half to create the validation and testing data.\n","fda6edce":"## Instantiate the network\nHere, we'll instantiate the network. First up, defining the hyperparameters.\n\n>>* vocab_size: Size of our vocabulary or the range of values for our input, word tokens.\n>>* output_size: Size of our desired output; the number of class scores we want to output (pos\/neg).\n>>* embedding_dim: Number of columns in the embedding lookup table; size of our embeddings.\n>>* hidden_dim: Number of units in the hidden layers of our LSTM cells. Usually larger is better performance wise. Common values are 128, 256, 512, etc.\n>>* n_layers: Number of LSTM layers in the network. Typically between 1-3\n","b942f475":"## Test the code\n\nAs a text that implemented the dictionary correctly, print out the number of unique words in your vocabulary and the contents of the first, tokenized review.","0664daf9":"---\n## Training\n\nBelow is the typical training code. If you want to do this yourself, feel free to delete all this code and implement it yourself. You can also add code to save a model by name.\n\n>We'll also be using a new kind of cross entropy loss, which is designed to work with a single Sigmoid output. [BCELoss](https:\/\/pytorch.org\/docs\/stable\/nn.html#bceloss), or **Binary Cross Entropy Loss**, applies cross entropy loss to a single value between 0 and 1.\n\nWe also have some data and training hyparameters:\n\n* `lr`: Learning rate for our optimizer.\n* `epochs`: Number of times to iterate through the training dataset.\n* `clip`: The maximum gradient value to clip at (to prevent exploding gradients).","ff07a721":"Okay, there is issues here. And, the maximum review length is way too many steps (2498) for our RNN. We'll have to remove any super short reviews and truncate super long reviews. This removes outliers and should allow our model to train more efficiently.\n\nFirst, remove any reviews with zero length from the reviews_ints list and their corresponding label in encoded_labels.","e5bf18b5":"### Inference on a test review\n\nYou can change this test_review to any text that you want. Read it and think: is it pos or neg? Then see if your model predicts correctly!\n    \n> Write a `predict` function that takes in a trained net, a plain text_review, and a sequence length, and prints out a custom statement for a positive or negative review!\n* You can use any functions that you've already defined or define any helper functions you want to complete `predict`, but it should just take in a trained net, a text review, and a sequence length.\n","ba029e4e":"---\n## Testing\n\nThere are a few ways to test your network.\n\n* **Test data performance:** First, we'll see how our trained model performs on all of our defined test_data, above. We'll calculate the average loss and accuracy over the test data.\n\n* **Inference on user-generated data:** Second, we'll see if we can input just one example review at a time (without a label), and see what the trained model predicts. Looking at new, user input data like this, and predicting an output label, is called **inference**.","cfcb4cc6":"## IMDB REVIEW Network with PyTorch\n\n\n\n\nThe layers are as follows:\n\n>>1. An embedding layer that converts our word tokens (integers) into embeddings of a specific size.\n>>2. An LSTM layer defined by a hidden_state size and number of layers\n>>3. A fully-connected output layer that maps the LSTM layer outputs to a desired output_size\n>>4. A sigmoid activation layer which turns all outputs into a value 0-1; return only the last sigmoid output as the output of this network.\n\n### The Embedding Layer\nWe need to add an embedding layer because there are 105225 words in our vocabulary. It is massively inefficient to one-hot encode that many classes. So, instead of one-hot encoding, we can have an embedding layer and use that layer as a lookup table. You could train an embedding layer using Word2Vec, then load it here. But, it's fine to just make a new layer, using it for only dimensionality reduction, and let the network learn the weights.\n\n### The LSTM Layer(s)\nWe'll create an LSTM to use in our recurrent network, which takes in an input_size, a hidden_dim, a number of layers, a dropout probability (for dropout between multiple layers), and a batch_first parameter.\n\nMost of the time, you're network will have better performance with more layers; between 2-3. Adding more layers allows the network to learn really complex relationships.","d73d2e3d":"## Encoding the words\nThe embedding lookup requires that we pass in integers to our network. The easiest way to do this is to create dictionaries that map the words in the vocabulary to integers. Then we can convert each of our reviews into integers so they can be passed into the network.\n\n>> Now I'm going to encode the words with integers. Build a dictionary that maps words to integers. Later I'm going to pad our input vectors with zeros, so make sure the integers start at 1, not 0. Also, convert the reviews to integers and store the reviews in a new list called reviews_ints.","f8899f64":"## DataLoaders and Batching\nAfter creating training, test, and validation data, we can create DataLoaders for this data by following two steps:\n\n>>1. Create a known format for accessing our data, using TensorDataset which takes in an input set of data and a target set of data with the same first dimension, and creates a dataset.\n>>2. Create DataLoaders and batch our training, validation, and test Tensor datasets. \n\n>>**train_data = TensorDataset(torch.from_numpy(train_x), torch.from_numpy(train_y))\ntrain_loader = DataLoader(train_data, batch_size=batch_size)**  \n\n\nThis is an alternative to creating a generator function for batching our data into full batches.","0f85f664":"## Padding sequences\nTo deal with both short and very long reviews, we'll pad or truncate all our reviews to a specific length. For reviews shorter than some seq_length, we'll pad with 0s. For reviews longer than seq_length, we can truncate them to the first seq_length words. A good seq_length, in this case, is 200.\n\n>>Define a function that returns an array features that contains the padded data, of a standard size, that we'll pass to the network.\n\n>>* The data should come from review_ints, since we want to feed integers to the network.\n>>* Each row should be seq_length elements long.\n>>* For reviews shorter than seq_length words, left pad with 0s. That is, if the review is ['best', 'movie', 'ever'], [117, 18, 128] as integers, the row will look like [0, 0, 0, ..., 0, 117, 18, 128].\n>>* For reviews longer than seq_length, use only the first seq_length words as the feature vector.\nAs a small example, if the seq_length=10 and an input review is:\n\n[117, 18, 128]  \nThe resultant, padded sequence should be:\n\n[0, 0, 0, 0, 0, 0, 0, 117, 18, 128]  \nYour final features array should be a 2D array, with as many rows as there are reviews, and as many columns as the specified seq_length."}}