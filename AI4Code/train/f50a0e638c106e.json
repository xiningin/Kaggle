{"cell_type":{"89b6d3b5":"code","2a47da2d":"code","681fc5fc":"code","531c864e":"code","3befefd7":"code","9c8d6e2a":"code","f332c73e":"code","3902a5f6":"code","ccdf5629":"code","0ac1229d":"code","bc4f3290":"code","6884428d":"code","6a967eb7":"code","26275e8e":"code","85ce26b5":"code","1362cc02":"code","9ecfec38":"code","b4a777f2":"code","0498cbac":"code","315c9818":"markdown","10a61d75":"markdown","4f8758d8":"markdown","278b544b":"markdown","08ad59b4":"markdown","963aadea":"markdown","d1b3cf9e":"markdown","72e37422":"markdown","130d0fe3":"markdown","b17b1f7c":"markdown","e2007648":"markdown","557a4355":"markdown","e4dd7b64":"markdown","4b77393a":"markdown","2656f1b3":"markdown","0156e107":"markdown","1d7ec184":"markdown","f58ba1dc":"markdown","b41a4711":"markdown","2db05329":"markdown"},"source":{"89b6d3b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a47da2d":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom statsmodels.tsa.arima_model import ARIMA\n\nfrom sklearn.metrics import mean_squared_error\n\nimport datetime","681fc5fc":"rawDf = pd.read_csv(\"..\/input\/assignment1\/train.csv\")","531c864e":"usTotal = rawDf.drop(rawDf[rawDf['HHS Region'] != 'United States'].index)\nusTotal.drop(['Data As Of'], axis = 1, inplace = True)\nusTotal.drop(['Month'], axis = 1, inplace = True)\n#usTotal.drop(['MMWR Week'], axis = 1, inplace = True)\nusTotal.drop(['Start Date'], axis = 1, inplace = True)\nusTotal.drop(['End Date'], axis = 1, inplace = True)\nusTotal = usTotal[usTotal['Group'] == 'By Week']\nusTotal.index = usTotal['id']\nidIndex = usTotal['id'].copy()\nusTotal = usTotal.drop(['Year','HHS Region','Group','id','Footnote'], axis = 1)\n\n","3befefd7":"msno.matrix(usTotal)\nplt.show()\n\nprint(usTotal.isna().sum())","9c8d6e2a":"usTotal['Week-Ending Date'] = pd.to_datetime(usTotal['Week-Ending Date'])","f332c73e":"fig, ax = plt.subplots()\n\nusTotalPlot = usTotal\n\nusTotalPlot.index = usTotalPlot['Week-Ending Date']\nusTotalPlot['Total Deaths'].plot(ax=ax, label='Total Deaths')\nusTotalPlot['COVID-19 Deaths'].plot(ax=ax, label='COVID-19 Deaths')\nax.legend()\n\nplt.xticks(rotation = 45)\nplt.show()","3902a5f6":"# creating a month column to help the models detect a seasonal pattern\nusTotal['Month'] = pd.DatetimeIndex(usTotal['Week-Ending Date']).month","ccdf5629":"usTotalPlot['NonCovid Deaths'] = usTotal['Total Deaths'] - usTotal['COVID-19 Deaths']\n\ndeaths = pd.Series()\n\nfor i in usTotal['Race and Hispanic Origin Group'].unique():\n    \n    plt.style.use('seaborn-darkgrid')\n    fig, ax = plt.subplots()\n    listDeaths = pd.DataFrame()\n    \n    seriesGroup = usTotalPlot[usTotalPlot['Race and Hispanic Origin Group'] == i]\n    \n    for j in usTotal['Age Group'].unique():        \n            \n        \n        series = seriesGroup[seriesGroup['Age Group'] == j]\n        \n        result = pd.DataFrame({'Total COVID-19 Deaths': series['COVID-19 Deaths'].sum(),'Total Non-COVID-19 Deaths': series['NonCovid Deaths'].sum()}, index = [j])\n        listDeaths = listDeaths.append(result)\n    \n    ax.set_title(i)\n    plt.xticks(rotation = 45)\n    ax.set_xlabel(\"Age groups\")\n    ax.set_ylabel(\"Death Counts\")\n    ax.bar(listDeaths.index, listDeaths['Total COVID-19 Deaths'], label = \"COVID-19 Deaths\", color = 'lightcoral')\n    ax.bar(listDeaths.index, listDeaths['Total Non-COVID-19 Deaths'], bottom = listDeaths['Total COVID-19 Deaths'], label = \"Non-COVID-19 Deaths\")\n    \n    ax.legend()\n    plt.show()\n    \n    ans = pd.Series(seriesGroup['COVID-19 Deaths'].sum()\/seriesGroup['Total Deaths'].sum())\n    deaths = deaths.append(ans)\n\n\nprint(\"Percentage of COVID-19 DEATHS out of Total Deaths:\")\ndeaths.index = usTotal['Race and Hispanic Origin Group'].unique()\nprint(deaths)\n\nusTotal.drop('NonCovid Deaths', axis = 1, inplace = True)","0ac1229d":"# Here we label encode due to the time data being ordinal\nencoder = LabelEncoder()\nusTotal['Week-Ending Date'] = encoder.fit_transform(usTotal['Week-Ending Date'])\nhardDF = usTotal.copy()","bc4f3290":"removeCol = ['Age Group', 'Race and Hispanic Origin Group']","6884428d":"usTotal.index = idIndex\n# 7 splits with 3 weeks of prediction\nk = 7\n#3744\nsplit = [1440, 4032, 4320, 4608, 4679, 4896, 5184]\nsplitTup = []\n\nfor i in range(k):\n    X_train = usTotal.iloc[:split[i],:].copy()\n    \n    X_test = usTotal.iloc[split[i]:,:].copy()\n    \n    tup = (X_train, X_test)\n    splitTup.append(tup)\n","6a967eb7":"linReg = LinearRegression()\nridge = Ridge(alpha = 0.1, normalize= False)\nlasso = Lasso(alpha = 0.1, normalize= False)\nelastic = ElasticNet(alpha = 0.1, normalize= False)\n\nlinRegScores = []\nridgeScores = []\nlassoScores = []\nelasticScores = []\n\n# loop through splits\nfor k in range(k):\n    \n    # get i-th split X_train\n    dataF = splitTup[k][0]\n    \n    # get i-th split X_test\n    yF = splitTup[k][1]\n   \n    linRegScoresIn = []\n    ridgeScoresIn = []\n    lassoScoresIn = []\n    elasticScoresIn = []\n    \n    linRegScoresIn.clear()\n    ridgeScoresIn.clear()\n    lassoScoresIn.clear()\n    elasticScoresIn.clear()\n    \n    output = pd.DataFrame()\n    removeCol = ['Age Group', 'Race and Hispanic Origin Group']\n    #  'MMWR Week' , 'Month' kept in to help predict seasons\n\n    for i in dataF['Race and Hispanic Origin Group'].unique():\n    \n        series = dataF[dataF['Race and Hispanic Origin Group'] == i]\n        X_test = yF[yF['Race and Hispanic Origin Group'] == i]\n        \n    \n        for j in hardDF['Age Group'].unique():\n\n            seriesInside = series[series['Age Group'] == j]\n        \n            seriesInside = seriesInside.drop(removeCol, axis = 1)\n        \n            y = seriesInside['COVID-19 Deaths']\n            X = seriesInside.drop('COVID-19 Deaths', axis = 1)\n        \n            X_testInside = X_test[X_test['Age Group'] == j]\n        \n            X_testInside = X_testInside.drop(removeCol, axis = 1)\n            y_true = X_testInside['COVID-19 Deaths']\n            X_testInside = X_testInside.drop('COVID-19 Deaths', axis = 1)\n            \n            linReg.fit(X, y)\n            predictions = linReg.predict(X_testInside)\n            linRegScoresIn.append(mean_squared_error(y_true, predictions, squared = False))\n            \n            \n            ridge.fit(X, y)\n            predictions = ridge.predict(X_testInside)\n            ridgeScoresIn.append(mean_squared_error(y_true, predictions, squared = False))\n                  \n            lasso.fit(X, y)\n            predictions = lasso.predict(X_testInside)\n            lassoScoresIn.append(mean_squared_error(y_true, predictions, squared = False))\n            \n            elastic.fit(X, y)\n            predictions = elastic.predict(X_testInside)\n            elasticScoresIn.append(mean_squared_error(y_true, predictions, squared = False))\n        \n    linRegScores.append(pd.Series(linRegScoresIn))\n    ridgeScores.append(pd.Series(ridgeScoresIn))\n    lassoScores.append(pd.Series(lassoScoresIn))\n    elasticScores.append(pd.Series(elasticScoresIn))","26275e8e":"for i in range(k):\n    print('Split', i+1)\n    print(linRegScores[i].describe())\n    print(\"\\n\")\n    sns.histplot(linRegScores[i])\n    plt.show()","85ce26b5":"for i in range(k):\n    print('Split', i+1)\n    print(ridgeScores[i].describe())\n    print(\"\\n\")\n    sns.histplot(ridgeScores[i])\n    plt.show()\n    ","1362cc02":"for i in range(k):\n    print('Split', i+1)\n    print(lassoScores[i].describe())\n    print(\"\\n\")\n    sns.histplot(lassoScores[i])\n    plt.show()\n    ","9ecfec38":"for i in range(k):\n    print('Split', i+1)\n    print(elasticScores[i].describe())\n    print(\"\\n\")\n    sns.histplot(elasticScores[i])\n    plt.show()\n    ","b4a777f2":"testDF = pd.read_csv(\"..\/input\/assignment1\/test.csv\")\ntestDF.index = testDF['id']\ntesty = testDF['id']\n\nX_test = testDF.drop(['Year','HHS Region','Group','id', 'Data As Of', 'Month', 'Start Date', 'End Date'], axis = 1)\ntots = X_test['Total Deaths']\n\nX_test['Week-Ending Date'] = pd.to_datetime(X_test['Week-Ending Date'])\nX_test['Month'] = pd.DatetimeIndex(X_test['Week-Ending Date']).month\nX_test['Week-Ending Date'] = encoder.fit_transform(X_test['Week-Ending Date'])\nX_test['Week-Ending Date'] = X_test['Week-Ending Date'] + 74\n\nsubDF = X_test.copy()\n","0498cbac":"model = Ridge(alpha = 0.1, normalize= False) \n\noutput = pd.DataFrame()\nremoveCol = ['Age Group', 'Race and Hispanic Origin Group']\n#  'MMWR Week' , 'Month' kept in to help predict seasons\n\nfor i in hardDF['Race and Hispanic Origin Group'].unique():\n    \n    series = hardDF[hardDF['Race and Hispanic Origin Group'] == i]\n    X_test = subDF[subDF['Race and Hispanic Origin Group'] == i]\n    \n    for j in hardDF['Age Group'].unique():\n\n        seriesInside = series[series['Age Group'] == j]\n        \n        seriesInside = seriesInside.drop(removeCol, axis = 1)\n        \n        y = seriesInside['COVID-19 Deaths']\n        X = seriesInside.drop('COVID-19 Deaths', axis = 1)\n        \n        X_testInside = X_test[X_test['Age Group'] == j]\n        \n        X_testInside = X_testInside.drop(removeCol, axis = 1)\n        \n        model.fit(X, y) \n        predictions = model.predict(X_testInside) \n        \n        \n        result = pd.DataFrame()\n        result['id'] = X_testInside.index\n        result['COVID-19 Deaths'] = predictions\n        result['median'] = np.median(result['COVID-19 Deaths'])\n        \n        output = output.append(result)\n        \noutput = output.sort_values(by='id')\noutput.index = output['id']\n\n\n# model produces negative numbers, replace those outliers with the median\noutput.loc[output['COVID-19 Deaths'] < 0, 'COVID-19 Deaths'] = output.loc[output['COVID-19 Deaths'] < 0, 'median']\noutput.loc[output['COVID-19 Deaths'] < 0, 'COVID-19 Deaths'] = 0\n\noutput = output.drop('median', axis = 1)\n    \noutput['COVID-19 Deaths'] = np.where(output['COVID-19 Deaths'] > tots, tots, output['COVID-19 Deaths'])\noutput.to_csv('submission.csv', index=False)\n\nprint(output.to_string())","315c9818":"No missing values, looking good","10a61d75":"I created my own split based on time. I made sure my first split happens between the first and second year. Every split after is just adding three weeks to the end of the last split.","4f8758d8":"Checking for missing values just to be sure","278b544b":"Loading in the file, and transforming the data","08ad59b4":"Based on a quick glance Excel test set, we can see that we are trying to predict for HHS region == United States and Group == By Week","963aadea":"Next convert our dates from strings into numbers\n","d1b3cf9e":"We drop all the date columns except for one, drop HHS Region for any region other than the US and any time groups that are not by week, and finally drop the irreleveant groups (id, foot, group, year)","72e37422":"We will also pass in all the train data to help our model learn as much time data as it can","130d0fe3":"Next we plot our graphs to start taking a look at the data","b17b1f7c":"Different groups have different trends, some groups get larger as they get older while others die mostly around 50 ~ 74 then drop off.","e2007648":"Plotting the Total Deaths and Covid Deaths to see if there are any outliers","557a4355":"It also seems like there are not outliers, and that there could be a seasonal pattern to our data","e4dd7b64":"# Submission","4b77393a":"We can also see that some groups died at higher percentages than others","2656f1b3":"# EXPLORE DATA","0156e107":"Convert the dates to numeric values","1d7ec184":"It seems like total deaths trend is influenced by Covid-19 trend so it would be helpful to train our model","f58ba1dc":"# Model building","b41a4711":"The best model was Ridge, building submission using that","2db05329":"# LOADING DATA"}}