{"cell_type":{"07d70e26":"code","7abdfb2d":"code","40a8e67f":"code","311f35a8":"code","b2c3e3be":"code","38b064d2":"code","51cf1fed":"code","a0188f06":"code","cddaadf4":"code","719f6dc9":"code","5cb1a90c":"code","aff1a190":"code","7cae012f":"code","7fe48483":"code","e5afaced":"code","afd946bf":"code","e0432bb2":"code","1814df57":"code","80f1f99b":"code","f60a330c":"code","3ffe5aae":"code","18a4217b":"code","716e5929":"code","08353898":"code","d874a826":"code","68a77451":"code","820ef0fa":"code","2ee4de67":"code","243ca66f":"code","0a62a4bc":"code","315ac2cd":"code","6fa2e63d":"code","7231476b":"code","eafbc044":"code","3a1ff825":"code","23280f11":"code","a7e1c7a9":"code","c82df2d2":"code","d3b27a96":"code","6bbb4729":"code","c347aa4c":"code","37c3ddc3":"code","d70cc70c":"code","6160e0d2":"code","2eb541f1":"code","5748ea7e":"code","8e8d419d":"code","e6fdab8a":"code","dd5d9dfa":"code","943c6e91":"code","a01e8af3":"code","7c25eb80":"code","fa70e77b":"code","80be4144":"code","3d7194a3":"code","6e4bc5bb":"code","2ae2cf1e":"code","1d774abf":"code","0afa4092":"code","a8bfc397":"code","ec99d448":"code","806032b4":"code","2580fa83":"code","8d33730a":"code","2d689da6":"code","dd16d229":"code","70414bcc":"code","01e5b8cc":"code","f6eeb3ba":"code","5400ed8f":"code","595f2abd":"code","720441f3":"code","e5dea26b":"code","72f3bb00":"code","3efcb4e1":"code","8f468644":"code","c00d23aa":"code","34871f52":"code","de7f4154":"code","9d3b9eaa":"code","50518e23":"code","95f6f3bc":"code","c3e9731b":"code","55e01233":"code","7108f8b4":"code","6ba21d64":"code","6453ba69":"code","571018af":"code","fd9cf1a7":"markdown","ada4a9b4":"markdown","9db3a225":"markdown","c123f43d":"markdown","bbad20da":"markdown","c14286ea":"markdown","1a296a52":"markdown","548374f0":"markdown","e1caf0fd":"markdown","7a1d801f":"markdown","ececf614":"markdown","ad3754bd":"markdown","a736fedc":"markdown","9be65d23":"markdown","06d9195f":"markdown","06605bab":"markdown","2b825e01":"markdown","3877ace0":"markdown","0b2b0f59":"markdown","af34bd88":"markdown","c4944627":"markdown","05e46f44":"markdown","0d844f95":"markdown","21b58276":"markdown","e0e1bc45":"markdown","a7c00f14":"markdown","c560bbe9":"markdown","7b02b924":"markdown","90bed1f0":"markdown","ffe3bc23":"markdown","1a281e68":"markdown","d39eac8f":"markdown","736298a5":"markdown","a92b5ccd":"markdown","91e7c87b":"markdown","cf3815fe":"markdown","461a3474":"markdown","2dd5dd71":"markdown","ce1810ff":"markdown","05bb5721":"markdown","137f53f4":"markdown","f227473a":"markdown","9967d3f5":"markdown","296b2a26":"markdown","04315aa5":"markdown","b9a3950c":"markdown","56672cd9":"markdown"},"source":{"07d70e26":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7abdfb2d":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","40a8e67f":"train_df.columns","311f35a8":"train_df.head()","b2c3e3be":"train_df.describe()","38b064d2":"train_df.info()","51cf1fed":"def bar_plot(variable):\n    \"\"\"\n       input : variable ex: \"Sex\"\n       output : bar plot & value count\n    \"\"\"\n    #get feature\n    var = train_df[variable]\n    #count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n   \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable, varValue))","a0188f06":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","cddaadf4":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","719f6dc9":"def plot_hist(variable):\n    plt.figure(figsize =(9,3))\n    plt.hist(train_df[variable], bins =50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","5cb1a90c":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","aff1a190":"#Pclass vs Survived\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","7cae012f":"#Sex vs Survived\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","7fe48483":"#SibSp vs Survived\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","e5afaced":"#Parch vs Survived\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","afd946bf":"#Fare vs Survived\ntrain_df[[\"Fare\", \"Survived\"]].groupby([\"Fare\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","e0432bb2":"#Pclass vs Survived\ntrain_df[[\"Embarked\", \"Survived\"]].groupby([\"Embarked\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","1814df57":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quantile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # Detect outliers and their indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # Store indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","80f1f99b":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\", \"Parch\", \"Fare\"])]","f60a330c":"#drop outliers \ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\", \"Parch\", \"Fare\"]))","3ffe5aae":"train_df_len = len(train_df) \ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)\n\n","18a4217b":"train_df.head()","716e5929":"train_df.columns[train_df.isnull().any()]","08353898":"train_df.isnull().sum()","d874a826":"train_df[train_df[\"Embarked\"].isnull()]","68a77451":"train_df.boxplot(column = \"Fare\", by =\"Embarked\")\nplt.show()","820ef0fa":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","2ee4de67":"train_df[train_df[\"Fare\"].isnull()]","243ca66f":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","0a62a4bc":"train_df[train_df[\"Fare\"].isnull()]","315ac2cd":"list1=[\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot=True, fmt =\".2f\")\nplt.show()\n","6fa2e63d":"a = sns.factorplot(x=\"SibSp\", y=\"Survived\", data=train_df, kind=\"bar\", size =7)\na.set_ylabels(\"Survived Probability\")\nplt.show()","7231476b":"a = sns.factorplot(x=\"Parch\", y=\"Survived\", kind=\"bar\", data=train_df, size=6)\na.set_ylabels(\"Survived Prbability\")\nplt.show()","eafbc044":"a=sns.factorplot(x=\"Pclass\", y=\"Survived\", data=train_df, kind=\"bar\", size=6)\na.set_ylabels(\"Survived Probability\")\nplt.show()","3a1ff825":"a=sns.FacetGrid(train_df, col=\"Survived\")\na.map(sns.distplot, \"Age\", bins=25)\nplt.show()","23280f11":"a=sns.FacetGrid(train_df, col=\"Survived\", row=\"Pclass\", size=2)\na.map(plt.hist, \"Age\", bins=25)\na.add_legend()\nplt.show()","a7e1c7a9":"a=sns.FacetGrid(train_df, row=\"Embarked\", size=2)\na.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\na.add_legend()\nplt.show()","c82df2d2":"a = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size=2.3)\na.map(sns.barplot, \"Sex\", \"Fare\")\na.add_legend()\nplt.show()","d3b27a96":"train_df[train_df[\"Age\"].isnull()]","6bbb4729":"sns.factorplot(x = \"Sex\", y=\"Age\", data=train_df, kind=\"box\")\nplt.show()","c347aa4c":"sns.factorplot(x=\"Sex\", y=\"Age\", hue=\"Pclass\", data=train_df, kind=\"box\")\nplt.show()","37c3ddc3":"sns.factorplot(x=\"Parch\", y=\"Age\", data=train_df, kind=\"box\")\nsns.factorplot(x=\"SibSp\", y=\"Age\", data=train_df, kind=\"box\")\nplt.show()","d70cc70c":"sns.heatmap(train_df[[\"Age\",\"Sex\", \"SibSp\", \"Parch\", \"Pclass\"]].corr(), annot=True)\nplt.show()","6160e0d2":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","2eb541f1":"train_df[train_df[\"Age\"].isnull()]","5748ea7e":"train_df[\"Name\"].head(10)","8e8d419d":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","e6fdab8a":"train_df[\"Title\"].head(10)","dd5d9dfa":"sns.countplot(x= \"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","943c6e91":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\", \"the Countess\", \"Capt\", \"Col\", \"Don\", \"Dr\", \"Major\", \"Rev\", \"Sir\", \"Jonkheer\", \"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i== \"Miss\" or i == \"Ms\" or i == \"Mle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","a01e8af3":"sns.countplot(x= \"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","7c25eb80":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data= train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\", \"Mrs\", \"Mr\", \"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()\n","fa70e77b":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","80be4144":"train_df.head()","3d7194a3":"train_df = pd.get_dummies(train_df,columns = [\"Title\"])\ntrain_df.head()","6e4bc5bb":"train_df.head()","2ae2cf1e":"train_df[\"Fsize\"] = train_df[\"SibSp\"]+train_df[\"Parch\"]+1","1d774abf":"train_df.head()","0afa4092":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","a8bfc397":"train_df[\"family-size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","ec99d448":"train_df.head(20)","806032b4":"sns.countplot(x = \"family-size\", data = train_df)\nplt.show()","2580fa83":"g = sns.factorplot(x = \"family-size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","8d33730a":"train_df = pd.get_dummies(train_df, columns = [\"family-size\"])\ntrain_df.head()","2d689da6":"train_df[\"Embarked\"].head()","dd16d229":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","70414bcc":"train_df = pd.get_dummies(train_df, columns = [\"Embarked\"])\ntrain_df.head()","01e5b8cc":"train_df[\"Ticket\"].head(20)","f6eeb3ba":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\", \"\").replace(\"\/\", \"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets           ","5400ed8f":"train_df[\"Ticket\"].head(20)","595f2abd":"train_df.head()","720441f3":"train_df = pd.get_dummies(train_df, columns = [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","e5dea26b":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","72f3bb00":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Pclass\"])\ntrain_df.head()","3efcb4e1":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df , columns = [\"Sex\"])\ntrain_df.head()","8f468644":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","c00d23aa":"train_df.columns","34871f52":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n","de7f4154":"train_df_len","9d3b9eaa":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"], axis = 1, inplace = True)\n    ","50518e23":"test.head()","95f6f3bc":"train = train_df[:train_df_len]\nx_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(x_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"x_train\", len(x_train))\nprint(\"x_test\", len(x_test))\nprint(\"y_train\", len(y_train))\nprint(\"y_test\", len(y_test))\nprint(\"test\", len(test))","c3e9731b":"logreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\nacc_log_train = round(logreg.score(x_train, y_train)*100, 2)\nacc_log_test = round(logreg.score(x_test, y_test)*100, 2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","55e01233":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]\n","7108f8b4":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(x_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","6ba21d64":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\",\n             \"SVC\",\n             \"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","6453ba69":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(x_train, y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))","571018af":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived], axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","fd9cf1a7":"<a id = \"20\"><\/a><br>\n## Fill Missing: Age Feature","ada4a9b4":"<a id = \"17\"><\/a><br>\n## Pclass -- Survived -- Age","9db3a225":"<a id = \"12\"><\/a><br>\n## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","c123f43d":"<a id = \"16\"><\/a><br>\n## Age -- Survived","bbad20da":"* Having a lot of SibSp have less chance to survive.\n* if sibsp == 0 or 1 or 2, passenger has more chance to survive\n* we can consider a new feature describing these categories.","c14286ea":"<a id = \"33\"><\/a><br>\n## Ensemble Modeling","1a296a52":"Fare features seems to have correlation with survived feature (0.26).","548374f0":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch.\n* Numerical Variable: Age, PassengerId and Fare.\n","e1caf0fd":"<a id = \"1\"><\/a><br>\n# Load and Check Data","7a1d801f":"* Female passengers have much better survival rate than males.\n* Males have better Survival rate in Pclass 3 in C.\n* Embarked and Sex will be used in training.","ececf614":"<a id = \"9\"><\/a><br>\n## Find Missing Value\n   ","ad3754bd":"<a id = \"11\"><\/a><br>\n# Visualisation","a736fedc":"<a id = \"27\"><\/a><br>\n## Sex","9be65d23":"<a id = \"21\"><\/a><br>\n# **Feature Engineering**\n    ","06d9195f":"<a id = \"15\"><\/a><br>\n## Pclass -- Survived","06605bab":"<a id = \"28\"><\/a><br>\n## Drop Passenger ID and Cabin","2b825e01":"<a id = \"22\"><\/a><br>\n## Name -- Title","3877ace0":"<a id = \"34\"><\/a><br>\n## Prediction and Submission","0b2b0f59":"<a id = \"26\"><\/a><br>\n## Pclass\n","af34bd88":"<a id = \"29\"><\/a><br>\n# **Modeling**","c4944627":"* Pclass is important feature for model training.","05e46f44":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\n* We will compare 5 ML classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM(Support Vector Machine)\n* Random Forest \n* KNN \n* Logistic Regression","0d844f95":"<a id = \"14\"><\/a><br>\n## Parch -- Survived","21b58276":"<a id = \"31\"><\/a><br>\n## Simple Logistic Regression","e0e1bc45":"* age <= 10 has a high survival rate,\n* oldest passengers (80) survived,\n* large number of 20 years old did not survive,\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distribution for missing value of age","a7c00f14":"<a id = \"25\"><\/a><br>\n## Ticket","c560bbe9":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n* Fare - Survived\n* Embarked - Survived","7b02b924":"* Age is not correlated with sex but it is correlated with Parch, SibSp and Pclass.","90bed1f0":"<a id = \"30\"><\/a><br>\n## Train - Test Split","ffe3bc23":"<a id = \"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","1a281e68":"* Passsengers who pay higher fare have better survival. Fare can be used as categorical for training.","d39eac8f":"<a id = \"7\"><\/a><br>\n# Outlier Detection\n","736298a5":"<a id = \"23\"><\/a><br>\n## Family Size","a92b5ccd":"<a id = \"5\"><\/a><br>\n## Numerical Variable","91e7c87b":"* Sex is not informative for age prediction, age distribution seems to be same.","cf3815fe":"* float64(2): Fare and Age\n* int64(5): PassengerId, Survived, Pclass, SibSp, Parch\n* object(5): Name, Sex, Ticket, Cabin, Embarked","461a3474":"<a id = \"4\"><\/a><br>\n##  Categorical Variable\n","2dd5dd71":"<a id = \"19\"><\/a><br>\n## Embarked -- Sex -- Fare -- Survived","ce1810ff":"<a id = \"2\"><\/a><br>\n# Variable Description\n1. PassengerId: unique identifier number(id) to each passenger.\n2. Survived: passenger survive(1) or died(0)\n3. Pclass: passenger class\n4. Name: name of passenger\n5. Sex: gender of passenger\n6. Age: age of passenger\n7. SibSp: number of siblings or spouses\n8. Parch: number of parents or children \n9. Ticket: ticket number \n10. Fare: amount of money spent on ticket \n11. Cabin: cabin category  \n12. Embarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)\n      ","05bb5721":"<a id = \"13\"><\/a><br>\n## SibSp -- Survived","137f53f4":"# Introduction\n  On his way to New York when he started in Southampton, England on April 10, 1912, on the fifth day, he crashed into the waters by hitting the ice mountain on April 15. The death of 1514 people in the Titanic accident takes place on the pages of history as the biggest sea disaster of the period and history.\n  \n <font color ='blue'> \nContent:\n    \n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n     * [Univariate Variable Analysis](#3)\n         * [Categorical Variable Analysis](#4)\n         * [Numerical Variable Analysis](#5)\n         \n1. [Basic Data Analysis](#6)     \n1. [Outlier Detection](#7) \n1. [Missing Value](#8)\n     * [Find Missing Value](#9)\n     * [Fill Missing Value](#10)\n1. [Visualization](#11)\n     * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n     * [SibSp -- Survived](#13)\n     * [Parch -- Survived](#14)\n     * [Pclass -- Survived](#15)\n     * [Age -- Survived](#16)\n     * [Pclass -- Survived -- Age](#17)\n     * [Embarked -- Sex -- Pclass -- Survived](#18)\n     * [Embarked -- Sex -- Fare -- Survived](#19)\n     * [Fill Missing: Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","f227473a":"* 1st class passengers are older than 2nd, and 2nd is older than 3rd class.","9967d3f5":"* Sibsp and parch can be used for new feature extraction with th = 3.\n* small familes have more chance to survive.\n* there is a std in survival of passenger with parch = 3.","296b2a26":"<a id = \"24\"><\/a><br>\n## Embarked","04315aa5":"<a id = \"18\"><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived","b9a3950c":"Small families have more chance to survive than large families.","56672cd9":"<a id = \"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing value.\n* Fare has only one missing value.\n"}}