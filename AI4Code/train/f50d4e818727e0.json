{"cell_type":{"92934e96":"code","e809d1d3":"code","7690dbba":"code","aea90f43":"code","b8edac88":"code","d3d25a7c":"code","0297bc35":"code","d2b0a152":"code","b0393a7d":"code","58f53017":"code","e2700648":"code","82b55bea":"code","d434a86c":"code","c161bbf5":"code","0746066e":"code","172fe639":"code","bf10dc17":"code","a98cf906":"code","20e6b5ff":"code","359ceeba":"code","376bac52":"code","5dd82170":"code","bf0c67ef":"code","a23321b2":"markdown","27cae36f":"markdown","427723f6":"markdown","23ee71f8":"markdown","7bbe5d27":"markdown","35fc8445":"markdown","7e02b889":"markdown","9321c47e":"markdown","916eb7da":"markdown"},"source":{"92934e96":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, OneHotEncoder\nfrom matplotlib import pyplot\nimport shap\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nfrom sklearn.model_selection import train_test_split\nimport optuna\nfrom time import time\nfrom tqdm import tqdm_notebook as tqdm\nfrom collections import Counter\nfrom scipy import stats\nimport lightgbm as lgb\nfrom sklearn import metrics\nfrom sklearn.metrics import cohen_kappa_score, mean_squared_error\nfrom sklearn.model_selection import KFold, StratifiedKFold, GroupKFold\nimport scipy as sp\nfrom functools import partial\nfrom collections import Counter\nimport json\nimport gc\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_columns', 1000)","e809d1d3":"def fix_jsonerr(df):\n    df.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in df.columns]\n    return df\n\ndef cnt_miss(df):\n    cnt = 0\n    for e in range(len(df)):\n        x = df['event_data'].iloc[e]\n        y = json.loads(x)['misses']\n        cnt += y\n    return cnt\n\ndef get_4020_acc(df,counter_dict):\n    \n    for e in ['Cauldron Filler (Assessment)','Bird Measurer (Assessment)','Mushroom Sorter (Assessment)','Chest Sorter (Assessment)']:\n        \n        Assess_4020 = df[(df.event_code == 4020) & (df.title==activities_map[e])]   \n        true_attempts_ = Assess_4020['event_data'].str.contains('true').sum()\n        false_attempts_ = Assess_4020['event_data'].str.contains('false').sum()\n\n        measure_assess_accuracy_ = true_attempts_\/(true_attempts_+false_attempts_) if (true_attempts_+false_attempts_) != 0 else 0\n        counter_dict[e+\"_4020_accuracy\"] += (counter_dict[e+\"_4020_accuracy\"] + measure_assess_accuracy_) \/ 2.0\n    \n    return counter_dict","7690dbba":"def eval_qwk_lgb_regr(y_true, y_pred):\n    \"\"\"\n    Fast cappa eval function for lgb.\n    \"\"\"\n    dist = Counter(reduce_train['accuracy_group'])\n    for k in dist:\n        dist[k] \/= len(reduce_train)\n    reduce_train['accuracy_group'].hist()\n    \n    acum = 0\n    bound = {}\n    for i in range(3):\n        acum += dist[i]\n        bound[i] = np.percentile(y_pred, acum * 100)\n\n    def classify(x):\n        if x <= bound[0]:\n            return 0\n        elif x <= bound[1]:\n            return 1\n        elif x <= bound[2]:\n            return 2\n        else:\n            return 3\n\n    y_pred = np.array(list(map(classify, y_pred))).reshape(y_true.shape)\n\n    return 'cappa', cohen_kappa_score(y_true, y_pred, weights='quadratic'), True","aea90f43":"def cohenkappa(ypred, y):\n    y = y.get_label().astype(\"int\")\n    ypred = ypred.reshape((4, -1)).argmax(axis = 0)\n    loss = cohenkappascore(y, y_pred, weights = 'quadratic')\n    return \"cappa\", loss, True","b8edac88":"def read_data():\n    print('Reading train.csv file....')\n    train = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train.csv')\n    print('Training.csv file have {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n\n    print('Reading test.csv file....')\n    test = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/test.csv')\n    print('Test.csv file have {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n\n    print('Reading train_labels.csv file....')\n    train_labels = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv')\n    print('Train_labels.csv file have {} rows and {} columns'.format(train_labels.shape[0], train_labels.shape[1]))\n\n    print('Reading specs.csv file....')\n    specs = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/specs.csv')\n    print('Specs.csv file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\n\n    print('Reading sample_submission.csv file....')\n    sample_submission = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv')\n    print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0], sample_submission.shape[1]))\n    return train, test, train_labels, specs, sample_submission","d3d25a7c":"def encode_title(train, test, train_labels):\n    # encode title\n    train['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), train['title'], train['event_code']))\n    test['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), test['title'], test['event_code']))\n    all_title_event_code = list(set(train[\"title_event_code\"].unique()).union(test[\"title_event_code\"].unique()))\n    \n    train['type_world'] = list(map(lambda x, y: str(x) + '_' + str(y), train['type'], train['world']))\n    test['type_world'] = list(map(lambda x, y: str(x) + '_' + str(y), test['type'], test['world']))\n    all_type_world = list(set(train[\"type_world\"].unique()).union(test[\"type_world\"].unique()))\n    \n    # make a list with all the unique 'titles' from the train and test set\n    list_of_user_activities = list(set(train['title'].unique()).union(set(test['title'].unique())))\n    # make a list with all the unique 'event_code' from the train and test set\n    list_of_event_code = list(set(train['event_code'].unique()).union(set(test['event_code'].unique())))\n    list_of_event_id = list(set(train['event_id'].unique()).union(set(test['event_id'].unique())))\n    # make a list with all the unique worlds from the train and test set\n    list_of_worlds = list(set(train['world'].unique()).union(set(test['world'].unique())))\n    # create a dictionary numerating the titles\n    activities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\n    activities_labels = dict(zip(np.arange(len(list_of_user_activities)), list_of_user_activities))\n    activities_world = dict(zip(list_of_worlds, np.arange(len(list_of_worlds))))\n    assess_titles = list(set(train[train['type'] == 'Assessment']['title'].value_counts().index).union(set(test[test['type'] == 'Assessment']['title'].value_counts().index)))\n    \n    # replace the text titles with the number titles from the dict\n    train['title'] = train['title'].map(activities_map)\n    test['title'] = test['title'].map(activities_map)\n    train['world'] = train['world'].map(activities_world)\n    test['world'] = test['world'].map(activities_world)\n    \n    # combine cats\n    train['title_world'] = train['title'].astype(str) + train['world'].astype(str)\n    test['title_world'] = test['title'].astype(str) + test['world'].astype(str)\n    train['title_world'] = train['title_world'].astype(int)\n    test['title_world'] = test['title_world'].astype(int)\n    \n    # deal with exception\n    train_labels['title'] = train_labels['title'].map(activities_map)\n    win_code = dict(zip(activities_map.values(), (4100*np.ones(len(activities_map))).astype('int')))\n    # then, it set one element, the 'Bird Measurer (Assessment)' as 4110, 10 more than the rest\n    win_code[activities_map['Bird Measurer (Assessment)']] = 4110\n    \n    # convert text into datetime\n    train['timestamp'] = pd.to_datetime(train['timestamp'])\n    test['timestamp'] = pd.to_datetime(test['timestamp'])\n    \n    return train, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code, activities_map,all_type_world","0297bc35":"# this is the function that convert the raw data into processed features\ndef get_data(user_sample, test_set=False):\n    '''\n    The user_sample is a DataFrame from train or test where the only one \n    installation_id is filtered\n    And the test_set parameter is related with the labels processing, that is only requered\n    if test_set=False\n    '''\n    # Constants and parameters declaration\n    last_activity = 0\n    \n    user_activities_count = {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n    assess_4020_acc_dict = {'Cauldron Filler (Assessment)_4020_accuracy':0,\n                                'Mushroom Sorter (Assessment)_4020_accuracy':0,\n                                'Bird Measurer (Assessment)_4020_accuracy':0,\n                                'Chest Sorter (Assessment)_4020_accuracy':0 }\n    game_time_dict = {'Clip_gametime':0, 'Game_gametime':0, 'Activity_gametime':0, 'Assessment_gametime':0}\n    \n     # new features: time spent in each activity\n    last_session_time_sec = 0\n    accuracy_groups = {0:0, 1:0, 2:0, 3:0}\n    all_assessments = []\n    accumulated_accuracy_group = 0\n    accumulated_accuracy = 0\n    accumulated_correct_attempts = 0 \n    accumulated_uncorrect_attempts = 0\n    accumulated_actions = 0\n    \n    # Newly added features\n    accumulated_game_miss = 0\n    Cauldron_Filler_4025 = 0\n    mean_game_round = 0\n    mean_game_duration = 0 \n    mean_game_level = 0\n    Assessment_mean_event_count = 0\n    Game_mean_event_count = 0\n    Activity_mean_event_count = 0\n    chest_assessment_uncorrect_sum = 0\n    \n    counter = 0\n    time_first_activity = float(user_sample['timestamp'].values[0])\n    durations = []\n    last_accuracy_title = {'acc_' + title: -1 for title in assess_titles}\n    event_code_count: Dict[str, int] = {ev: 0 for ev in list_of_event_code}\n    event_id_count: Dict[str, int] = {eve: 0 for eve in list_of_event_id}\n    title_count: Dict[str, int] = {eve: 0 for eve in activities_labels.values()} \n    title_event_code_count: Dict[str, int] = {t_eve: 0 for t_eve in all_title_event_code}\n    type_world_count: Dict[str, int] = {w_eve: 0 for w_eve in all_type_world}\n        \n    # last features\n    sessions_count = 0\n    \n    # itarates through each session of one instalation_id\n    for i, session in user_sample.groupby('game_session', sort=False):\n        # i = game_session_id\n        # session is a DataFrame that contain only one game_session\n        \n        # get some sessions information\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]\n        session_title_text = activities_labels[session_title]\n                    \n        if session_type==\"Activity\":\n            Activity_mean_event_count = (Activity_mean_event_count + session['event_count'].iloc[-1])\/2.0\n            \n        if session_type==\"Game\":\n            \n            Game_mean_event_count = (Game_mean_event_count + session['event_count'].iloc[-1])\/2.0\n            \n            game_s = session[session.event_code == 2030]   \n            misses_cnt = cnt_miss(game_s)\n            accumulated_game_miss += misses_cnt\n            \n            try:\n                game_round = json.loads(session['event_data'].iloc[-1])[\"round\"]\n                mean_game_round =  (mean_game_round + game_round)\/2.0\n            except:\n                pass\n\n            try:\n                game_duration = json.loads(session['event_data'].iloc[-1])[\"duration\"]\n                mean_game_duration = (mean_game_duration + game_duration) \/2.0\n            except:\n                pass\n            \n            try:\n                game_level = json.loads(session['event_data'].iloc[-1])[\"level\"]\n                mean_game_level = (mean_game_level + game_level) \/2.0\n            except:\n                pass\n            \n        # for each assessment, and only this kind off session, the features below are processed\n        # and a register are generated\n        if (session_type == 'Assessment') & (test_set or len(session)>1):\n            # search for event_code 4100, that represents the assessments trial\n            all_attempts = session.query(f'event_code == {win_code[session_title]}')\n            # then, check the numbers of wins and the number of losses\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            # copy a dict to use as feature template, it's initialized with some itens: \n            # {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n            features = user_activities_count.copy()\n            features.update(last_accuracy_title.copy())\n            features.update(event_code_count.copy())\n            features.update(event_id_count.copy())\n            features.update(title_count.copy())\n            features.update(game_time_dict.copy())\n            features.update(title_event_code_count.copy())\n            features.update(last_accuracy_title.copy())\n            features.update(assess_4020_acc_dict.copy())\n            features.update(type_world_count.copy())\n            \n            features['installation_session_count'] = sessions_count\n            features['accumulated_game_miss'] = accumulated_game_miss\n            features['mean_game_round'] = mean_game_round\n            features['mean_game_duration'] = mean_game_duration\n            features['mean_game_level'] = mean_game_level\n            features['Assessment_mean_event_count'] = Assessment_mean_event_count\n            features['Game_mean_event_count'] = Game_mean_event_count\n            features['Activity_mean_event_count'] = Activity_mean_event_count\n            features['chest_assessment_uncorrect_sum'] = chest_assessment_uncorrect_sum\n            \n            variety_features = [('var_event_code', event_code_count),\n                              ('var_event_id', event_id_count),\n                               ('var_title', title_count),\n                               ('var_title_event_code', title_event_code_count),\n                                ('var_type_world', type_world_count)]\n            \n            for name, dict_counts in variety_features:\n                arr = np.array(list(dict_counts.values()))\n                features[name] = np.count_nonzero(arr)\n                 \n            # get installation_id for aggregated features\n            features['installation_id'] = session['installation_id'].iloc[-1]\n            \n            # add title as feature, remembering that title represents the name of the game\n            features['session_title'] = session['title'].iloc[-1]\n            features['session_world'] = session['world'].iloc[-1]\n            features['session_title_world'] = session['title_world'].iloc[-1]       \n            \n            # the 4 lines below add the feature of the history of the trials of this player\n            # this is based on the all time attempts so far, at the moment of this assessment\n            features['accumulated_correct_attempts'] = accumulated_correct_attempts\n            features['accumulated_uncorrect_attempts'] = accumulated_uncorrect_attempts\n            features['accumulated_attemps_diff'] = accumulated_correct_attempts - accumulated_uncorrect_attempts\n            accumulated_correct_attempts += true_attempts \n            accumulated_uncorrect_attempts += false_attempts\n            \n            # the time spent in the app so far\n            if durations == []:\n                features['duration_mean'] = 0\n                features['duration_std'] = 0\n            else:\n                features['duration_mean'] = np.mean(durations)\n                features['duration_std'] = np.std(durations)\n                \n            durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n            # the accurace is the all time wins divided by the all time attempts\n            features['accumulated_accuracy'] = accumulated_accuracy\/counter if counter > 0 else 0\n        \n            features['Cauldron_Filler_4025'] = Cauldron_Filler_4025\/counter if counter > 0 else 0\n            Assess_4025 = session[(session.event_code == 4025) & (session.title=='Cauldron Filler (Assessment)')]   \n            true_attempts_ = Assess_4025['event_data'].str.contains('true').sum()\n            false_attempts_ = Assess_4025['event_data'].str.contains('false').sum()\n\n            cau_assess_accuracy_ = true_attempts_\/(true_attempts_+false_attempts_) if (true_attempts_+false_attempts_) != 0 else 0\n            Cauldron_Filler_4025 += cau_assess_accuracy_\n            \n            chest_assessment_uncorrect_sum += len(session[session.event_id==\"df4fe8b6\"])\n            \n            Assessment_mean_event_count = (Assessment_mean_event_count + session['event_count'].iloc[-1])\/2.0\n            \n            accuracy = true_attempts\/(true_attempts+false_attempts) if (true_attempts+false_attempts) != 0 else 0\n            accumulated_accuracy += accuracy\n            last_accuracy_title['acc_' + session_title_text] = accuracy\n            # a feature of the current accuracy categorized\n            # it is a counter of how many times this player was in each accuracy group\n            if accuracy == 0:\n                features['accuracy_group'] = 0\n            elif accuracy == 1:\n                features['accuracy_group'] = 3\n            elif accuracy == 0.5:\n                features['accuracy_group'] = 2\n            else:\n                features['accuracy_group'] = 1\n            features.update(accuracy_groups)\n            accuracy_groups[features['accuracy_group']] += 1\n            # mean of the all accuracy groups of this player\n            features['accumulated_accuracy_group'] = accumulated_accuracy_group\/counter if counter > 0 else 0\n            accumulated_accuracy_group += features['accuracy_group']\n            # how many actions the player has done so far, it is initialized as 0 and updated some lines below\n            features['accumulated_actions'] = accumulated_actions\n            \n            # there are some conditions to allow this features to be inserted in the datasets\n            # if it's a test set, all sessions belong to the final dataset\n            # it it's a train, needs to be passed throught this clausule: session.query(f'event_code == {win_code[session_title]}')\n            # that means, must exist an event_code 4100 or 4110\n            if test_set:\n                all_assessments.append(features)\n            elif true_attempts+false_attempts > 0:\n                all_assessments.append(features)\n                \n            counter += 1\n        \n        sessions_count += 1\n        # this piece counts how many actions was made in each event_code so far\n        def update_counters(counter: dict, col: str):\n                num_of_session_count = Counter(session[col])\n                for k in num_of_session_count.keys():\n                    x = k\n                    if col == 'title':\n                        x = activities_labels[k]\n                    counter[x] += num_of_session_count[k]\n                return counter\n            \n        event_code_count = update_counters(event_code_count, \"event_code\")\n        event_id_count = update_counters(event_id_count, \"event_id\")\n        title_count = update_counters(title_count, 'title')\n        title_event_code_count = update_counters(title_event_code_count, 'title_event_code')\n        type_world_count = update_counters(type_world_count, 'type_world')\n        \n        assess_4020_acc_dict = get_4020_acc(session , assess_4020_acc_dict)\n        game_time_dict[session_type+'_gametime'] = (game_time_dict[session_type+'_gametime'] + (session['game_time'].iloc[-1]\/1000.0))\/2.0\n\n        # counts how many actions the player has done so far, used in the feature of the same name\n        accumulated_actions += len(session)\n        if last_activity != session_type:\n            user_activities_count[session_type] += 1\n            last_activitiy = session_type \n                  \n    # if it't the test_set, only the last assessment must be predicted, the previous are scraped\n    if test_set:\n        return all_assessments[-1]\n    # in the train_set, all assessments goes to the dataset\n    return all_assessments","d2b0a152":"def get_train_and_test(train, test):\n    compiled_train = []\n    compiled_test = []\n    for i, (ins_id, user_sample) in tqdm(enumerate(train.groupby('installation_id', sort = False)), total = 17000):\n        compiled_train += get_data(user_sample)\n    for ins_id, user_sample in tqdm(test.groupby('installation_id', sort = False), total = 1000):\n        test_data = get_data(user_sample, test_set = True)\n        compiled_test.append(test_data)\n    reduce_train = pd.DataFrame(compiled_train)\n    reduce_test = pd.DataFrame(compiled_test)\n    categoricals = ['session_title', 'session_world', 'session_title_world']\n    \n    # avoid json err\n    reduce_train = fix_jsonerr(reduce_train)\n    reduce_test = fix_jsonerr(reduce_test)\n    \n    return reduce_train, reduce_test, categoricals","b0393a7d":"# read data\ntrain, test, train_labels, specs, sample_submission = read_data()\n# get usefull dict with maping encode\ntrain, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code, activities_map, all_type_world = encode_title(train, test, train_labels)\n# tranform function to get the train and test set\nreduce_train, reduce_test, categoricals = get_train_and_test(train, test)\ndel train, test\ngc.collect()","58f53017":"target = ['accuracy_group']\nouts = ['accuracy', 'installation_id']\nfeatures = reduce_train.loc[(reduce_train.sum(axis=1) != 0), (reduce_train.sum(axis=0) != 0)].columns.values # delete useless columns\nfeatures = [c for c in features if c not in target + outs]","e2700648":"def stract_hists(feature, train=reduce_train, test=reduce_test, adjust=False, plot=False):\n    n_bins = 10\n    train_data = train[feature]\n    test_data = test[feature]\n    if adjust:\n        test_data *= train_data.mean() \/ test_data.mean()\n    perc_90 = np.percentile(train_data, 95)\n    train_data = np.clip(train_data, 0, perc_90)\n    test_data = np.clip(test_data, 0, perc_90)\n    train_hist = np.histogram(train_data, bins=n_bins)[0] \/ len(train_data)\n    test_hist = np.histogram(test_data, bins=n_bins)[0] \/ len(test_data)\n    msre = mean_squared_error(train_hist, test_hist)\n    if plot:\n        print(msre)\n        plt.bar(range(n_bins), train_hist, color='blue', alpha=0.5)\n        plt.bar(range(n_bins), test_hist, color='red', alpha=0.5)\n        plt.show()\n    return msre\nstract_hists('Fireworks__Activity__4090', adjust=False, plot=True)","82b55bea":"counter = 0\nto_remove = []\nfor feat_a in features:\n    for feat_b in features:\n        if feat_a != feat_b and feat_a not in to_remove and feat_b not in to_remove:\n            c = np.corrcoef(reduce_train[feat_a], reduce_train[feat_b])[0][1]\n            if c > 0.995:\n                counter += 1\n                to_remove.append(feat_b)\n                print('{}: FEAT_A: {} FEAT_B: {} - Correlation: {}'.format(counter, feat_a, feat_b, c))","d434a86c":"to_exclude = [] \najusted_test = reduce_test.copy()\nfor feature in ajusted_test.columns:\n    if feature not in target + outs + categoricals:\n        data = reduce_train[feature]\n        train_mean = data.mean()\n        data = ajusted_test[feature] \n        test_mean = data.mean()\n        try:\n            error = stract_hists(feature, adjust=True)\n            ajust_factor = train_mean \/ test_mean\n            if ajust_factor > 10 or ajust_factor < 0.1:# or error > 0.01:\n                to_exclude.append(feature)\n                print(feature, train_mean, test_mean, error)\n            else:\n                reduce_test[feature] *= ajust_factor\n        except:\n            to_exclude.append(feature)\n            print(feature, train_mean, test_mean)","c161bbf5":"features = [x for x in features if x not in (to_exclude + to_remove)]\ncategoricals = [c for c in categoricals if c in features]","0746066e":"print(features)","172fe639":"print(categoricals)","bf10dc17":"print(reduce_train[features].shape)\nreduce_train[features].head()","a98cf906":"print(reduce_test[features].shape)\nreduce_test[features].head()","20e6b5ff":"# FYI: Objective functions can take additional arguments\n# (https:\/\/optuna.readthedocs.io\/en\/stable\/faq.html#objective-func-additional-args).\ndef objective(trial):\n    train_x, test_x, train_y, test_y = train_test_split(reduce_train[features], reduce_train[target], test_size=0.25)\n    dtrain = lgb.Dataset(train_x, train_y, categorical_feature=categoricals)\n    dtest = lgb.Dataset(test_x, test_y, categorical_feature=categoricals)\n\n    params = {'num_leaves': trial.suggest_int('num_leaves', 24, 1024),\n            'boosting_type': 'gbdt',\n            'objective': 'regression',\n            'metric': 'rmse',\n            'eval_metric': 'cappa', \n            'feature_fraction': trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n            'bagging_fraction': trial.suggest_uniform('bagging_fraction', 0.4, 1.0),\n            'bagging_freq': trial.suggest_int('bagging_freq', 1, 7),\n            'min_child_samples': trial.suggest_int('min_child_samples', 5, 100),\n            'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 10.0),\n            'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-8, 10.0),\n            'early_stopping_rounds': 100\n            }\n\n    gbm = lgb.train(params, dtrain, num_boost_round=1000, valid_sets=dtest, verbose_eval=500)\n    pred = gbm.predict(test_x)\n    return eval_qwk_lgb_regr(test_y, pred)[1]","359ceeba":"# Bayesian optimization\nstudy = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=100)\n\nprint('Number of finished trials: {}'.format(len(study.trials)))\n\nprint('Best trial:')\ntrial = study.best_trial\n\nprint('  Value: {}'.format(trial.value))\n\nprint('  Params: ')\nfor key, value in trial.params.items():\n    print('    {}: {}'.format(key, value))","376bac52":"# plot history\nfrom optuna.visualization import plot_optimization_history\nplot_optimization_history(study)","5dd82170":"# group KFold with shuffle and random_state\nn_splits = 4\nkf = KFold(n_splits=n_splits, shuffle=True, random_state=42)\nunique_ids = reduce_train[\"installation_id\"].unique()\nmodels = []\noof_pred = np.zeros((reduce_train.shape[0], ))\ny_vals = np.zeros((reduce_train.shape[0], ))\nfinal_pred = np.zeros((reduce_test.shape[0], ))\nfor fold, (tr_group_idx, va_group_idx) in enumerate(kf.split(unique_ids)):\n    # split groups\n    tr_groups, va_groups = unique_ids[tr_group_idx], unique_ids[va_group_idx]\n\n    # back to index\n    train_idx = reduce_train[\"installation_id\"].isin(tr_groups)\n    val_idx = reduce_train[\"installation_id\"].isin(va_groups)\n\n    # split by group\n    tr_x, va_x = reduce_train.loc[train_idx, features], reduce_train.loc[val_idx, features]\n    tr_y, va_y = reduce_train.loc[train_idx, target], reduce_train.loc[val_idx, target]\n    \n    # model fitting\n    dtrain = lgb.Dataset(tr_x, tr_y.values.ravel(), categorical_feature=categoricals)\n    dtest = lgb.Dataset(va_x, va_y.values.ravel(), categorical_feature=categoricals)    \n    model = lgb.train(trial.params, dtrain, num_boost_round=1000, valid_sets=dtest, verbose_eval=500)\n    \n    # cv score \n    y_vals[val_idx] = va_y.values.ravel()\n    oof_pred[val_idx] = model.predict(va_x)\n    print('Partial score (combined) of fold {} is: {}'.format(fold, eval_qwk_lgb_regr(va_y, oof_pred[val_idx])[1]))\n    \n    # predict test\n    final_pred += model.predict(reduce_test[features]) \/ n_splits\n    \n    # store model\n    models.append(model) ","bf0c67ef":"dist = Counter(reduce_train['accuracy_group'])\nfor k in dist:\n    dist[k] \/= len(reduce_train)\nreduce_train['accuracy_group'].hist()\n\nacum = 0\nbound = {}\nfor i in range(3):\n    acum += dist[i]\n    bound[i] = np.percentile(final_pred, acum * 100)\nprint(bound)\n\ndef classify(x):\n    if x <= bound[0]:\n        return 0\n    elif x <= bound[1]:\n        return 1\n    elif x <= bound[2]:\n        return 2\n    else:\n        return 3\n    \nfinal_pred = np.array(list(map(classify, final_pred)))\n\nsample_submission['accuracy_group'] = final_pred.astype(int)\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission['accuracy_group'].value_counts(normalize=True)","a23321b2":"## process raw data into feature matrix","27cae36f":"# Motivation\n\nLightGBM is apparently a model to choose for this competition. One way to find the best sets hyperparameters is the Bayesian optimization. Here I show you how to do it using [Optuna](https:\/\/github.com\/optuna\/optuna), developed by a Japanese unicorn *preferred networks*.","427723f6":"### for each 'installation_id', generate features across 'game_session'","23ee71f8":"# Utility functions[](http:\/\/)","7bbe5d27":"## Optuna\nUsing optuna is relatively easy with lightGBM, as the simple sample code is available in GitHub.\n\nhttps:\/\/github.com\/optuna\/optuna\/blob\/master\/examples\/lightgbm_simple.py","35fc8445":"# submit","7e02b889":"These functions are largely based on the following kernels. Please upvote those!\n- https:\/\/www.kaggle.com\/erikbruin\/data-science-bowl-2019-eda-and-baseline\n- https:\/\/www.kaggle.com\/artgor\/quick-and-dirty-regression\n- https:\/\/www.kaggle.com\/ragnar123\/truncated-val","9321c47e":"## Library","916eb7da":"# Retrain with the best sets of hyperparameters"}}