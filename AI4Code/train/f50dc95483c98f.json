{"cell_type":{"fccc05fb":"code","692dc56f":"code","3cdc289e":"code","919ea05f":"code","cd062560":"code","293e4385":"code","97f9fca8":"code","af880e34":"code","a3a7d3dd":"code","fb60c628":"code","4c744892":"code","7243c3a4":"code","ea9cbbf1":"code","59c94d51":"code","8cb313db":"code","d935bcf0":"code","f1be5b72":"code","be131344":"code","440264c3":"code","2f87feec":"code","d3f845dc":"code","e44df463":"code","d09af092":"code","7f58af1e":"markdown","16458383":"markdown","80be2a58":"markdown","2cfa01b0":"markdown","02cfe3c5":"markdown","f12addda":"markdown","7bb5217b":"markdown","34d0d4ed":"markdown","4295c6de":"markdown","6e6be495":"markdown","405cd50c":"markdown","5420970d":"markdown"},"source":{"fccc05fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","692dc56f":"df = pd.read_csv('\/kaggle\/input\/preprocessing\/Machine Learning A-Z (Codes and Datasets)\/Part 3 - Classification\/Section 17 - Kernel SVM\/Python\/Social_Network_Ads.csv')\nX = df.iloc[:,:-1].values\ny = df.iloc[:,-1].values","3cdc289e":"print(X)","919ea05f":"print(y)","cd062560":"df.head()","293e4385":"df.tail()","97f9fca8":"df.corr()","af880e34":"df.describe()","a3a7d3dd":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","fb60c628":"print(X_train)","4c744892":"print(y_train)","7243c3a4":"print(X_test)","ea9cbbf1":"print(y_test)","59c94d51":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","8cb313db":"print(X_train)","d935bcf0":"print(X_test)","f1be5b72":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","be131344":"print(classifier.predict(sc.transform([[30,87000]])))","440264c3":"y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","2f87feec":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","d3f845dc":"accuracy_score(y_test, y_pred)","e44df463":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('orange', 'yellow'))(i), label = j)\nplt.title('Decision Tree Classification (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","d09af092":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_test), y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('orange', 'yellow'))(i), label = j)\nplt.title('Decision Tree Classification (Test set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","7f58af1e":"## **Visualising the Training set results and test Set results**\n\nwe make use of a scatter plot to plot the actual observations, with x_train on the x-axis and y_train on the y-axis. For the Classification, we will use x_train on the x-axis and then the predictions of the x_train observations on the y-axis.\nWe add a touch of aesthetics by coloring the original observations.\nThis feature is given by the library `Matplotlib`","16458383":"## Predicting a new result","80be2a58":"## Predicting the Test set results","2cfa01b0":"### **Accuracy of the model**","02cfe3c5":"## **Splitting the dataset into the Training set and Test set**\n\nThe train-test split procedure is used to estimate the performance of machine learning algorithms when they are used to make predictions on data not used to train the model. It is a fast and easy procedure to perform, the results of which allow you to compare the performance of machine learning algorithms for your predictive modeling problem. Although simple to use and interpret, there are times when the procedure should not be used, such as when you have a small dataset and situations where additional configuration is required, such as when it is used for classification and the dataset is not balanced.\n\nFor more study on this method, you can go on the following [`Blog of Machine learning Mastery`](https:\/\/machinelearningmastery.com\/train-test-split-for-evaluating-machine-learning-algorithms\/)","f12addda":"## **Training the Decision Tree model on the Training set**\n\nA Decision Tree is a simple representation for classifying examples. It is a Supervised Machine Learning where the data is continuously split according to a certain parameter.\nDecision Tree consists of :\n* Nodes : Test for the value of a certain attribute.\n* Edges\/ Branch : Correspond to the outcome of a test and connect to the next node or leaf.\n* Leaf nodes : Terminal nodes that predict the outcome (represent class labels or class distribution)\n\n![A Good Example for Decision Tree](https:\/\/miro.medium.com\/max\/282\/0*ToYXqRes95eMvIKV.png)\nTo understand the concept of Decision Tree consider the above example. Let\u2019s say you want to predict whether a person is fit or unfit, given their information like age, eating habits, physical activity, etc. The decision nodes are the questions like \u2018What\u2019s the age?\u2019, \u2018Does he exercise?\u2019, \u2018Does he eat a lot of pizzas\u2019? And the leaves represent outcomes like either \u2018fit\u2019, or \u2018unfit\u2019.\n\n#### Classification trees (Yes\/No types) :\nWhat we\u2019ve seen above is an example of classification tree, where the outcome was a variable like \u2018fit\u2019 or \u2018unfit\u2019. Here the decision variable is Categorical\/ discrete.\nSuch a tree is built through a process known as binary recursive partitioning. This is an iterative process of splitting the data into partitions, and then splitting it up further on each of the branches.\n\nFor more study on decision tree Classification, we get the following [Blog to read from GeekforGeeks](https:\/\/www.geeksforgeeks.org\/decision-tree\/)\n\n![Image to explain the concept of Decision Tree Classification](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAARMAAAC3CAMAAAAGjUrGAAABUFBMVEX\/\/\/\/\/rq602Oew5XwAAACTk5O5ubmMjIyenp7\/r6\/\/qqr\/rKy+3eqw1ub\/sbEyMjKs5HXl5eXm8vfh9c+96ZLM5O7z+Pvd7fS43eyzs7NSUlL5+fnOzs55eXn\/tbX\/xMQmJibT8Lf\/7u7\/9fX\/5eWnp6fp6ek\/Pz\/X19f\/3d1sbGxeXl7\/z8\/pn5\/clpa+5PSebGxecXlGVFqiw9DDhYVpfoeCWVn\/vr7\/4OByTk6UZWXknJybusf\/zMzPjY1kREReekJTZGt7lJ6Hoq0wOT6rdXVNNTWLtWJMYzap3Hd\/pVllg0dHR0dkeICevco7R0yBm6YYGBhBLCyZx2xxk1DbfHzNKirYaWnrzMzdt7e7SEjapaUzIyPu+eSo420hLBjdhYXXWVk0RCW99oXQQ0PZYWFCVi7QIyPYrKzFcnK5Pj7BWFjUoKC9ZGS2KioiFxfMEfbNAAAUF0lEQVR4nO2d+3+a2NaHwRgT40DHOW9bEhPMqDUxDYhyMaLBWzSXNjFN2qmZ9pxJm07fdi5n\/v\/f3rU3XlBAIZCE9vX7ac0GZLH2w76xYSFBzPXw+ve\/vOrfD50F3\/Xzf370pv\/866Gz4Lt+\/nHBm36cM5kzmTOZM9E1ZHJ87BjD2FetmCQio2TC4qDDdam7yJJnDZgcHtWPLgf5vKyjnB8Zsn782\/HC6\/72m9eHs8rJztq6nsi9veZHq\/cARvItQXwYrHgbSCgDJicnN8e\/LRyfXKLk8eHN4ckC5PzkcOHy8gTYHH\/8fFO\/vDk5AWAn9cMF2DyNSTwcXsNlZfcdyveXfYLIvMsQnziCePfpiviFwKt6V7\/Dtt4953i2RkwWFuqXny8\/H38+ubysH9Yvj48WPh6+eP366PI3YFKvH764rJ+cHMF3Ph6evD55MbU92QiDNiKJ3pv9N8SHXqWSebv3IfMBMbn6AEzewqrem94v6Tc9PnBQDExuIPf1jydHN1B3jj++Xji6fHFzfPT68AYqEQJUv\/y4cANsoO4cHdU\/WzBJJBLbkWeLS8+3NhGT8DOi96bCZ66hklyniOTVG6gq73q960\/E7wTxOyy9Tf9y\/fb6gbJuKwOTw88Ln29uFn7D7cnN0eHR8cebyzo0HpjJzWH4+OPxwueTFzeoFN2M6k42G19fXdzYWdva3Hz08vnGcmR9exmILCb0upP5QGTevntHXPcwkyvizf8Sn4jMm0qP+JT+9NAALGRoY19AM1p\/AakXl68v6\/XjFwsn9SPUwsAGWFioH18eQVNSr6N6VR+2sy82t9aebyw+W9+OZ4cdykZ4axv9zV0RXCp5DTCuryvE1ZsEsd8j0m8h9SaVfnt9nc6hEhQw+TA+eWK2mni1ZF53D7nxR3czZosv3ntGfNR8HGvWnIlZcyZmzZmY9fP\/eNX3x2SWso++nT70vjRnYtaciVlzJmbNmZg1Z2LWnIlZ2UcP7YFferbklzbCnk1kH5qGrq2NZb\/0zOv+m\/GHpqFLn+QKhp7PmZg0Z2LWnIlZcyZmzZmYNWdi1pyJWXMmZvnFZGMNtINSiecouYGTKPUS301KbKHkKkpuv0RJ\/LhHBCcRjpfYwBr25hlau4av5JZQ6jk+ws7wCMTa8AgENruMj7DuT078Y5LFmkzGIRE3JHE+E5NJlNpaz46vNdmaMGs6QvzRmk8XxEGoO5Ftve6seszT0pY\/viAmq56uAxObXi8jE+HN1a3lnfAzj3aInWWvFrAva6sbYW+WVnc8O7KOn4fxbmd7zbMJYhv74tHQRmT2d2baQH4EoBYjYV88Fv0NH9r7LLhhfv7jYeSHL34wQScnIJNb0FR792Xdj8xkA1NMAuRLEMYEA+3cny9PH09RaNrGx08dHuK5gxHOk5mK223wlH0rPaZCtxblEMrmbCZPqdvrB48ITPrBA5PQY2fHcMDEixfUTw7zmnU4IvdSTr41Jju4L05\/2cNLexn8pwd6ACavAsIEj08Sf\/au8NIX\/c+V9vXqAZjsBIlJ+lf40KB4XH3VcPhL7x3x7jr1BchcSV\/ujYkD3R8T4urXK+IPKCVXGvG1l+khJn\/sZb6mfk3\/mfo7FUAmYogZ5XX4YVwzWEFVXTPZ6Y\/t\/yB+RUx6xNW7L3wCMSHeff3rr97ff2npEROGGbmie2VY1heYsc13w4Tqyo0GE0LOgEdFET7kFtNfhI\/Gaf6swOhpqsv0XXHMBI\/tEz2oPf9Nf726+kr8iYrF1V\/Ef4nU30Sa+COBkehMqELjVBzklSnAKkYWDUzkM+aspW9nwKm7Y1LM5+Um02yGmJZcbYXO5LOqyDRlkarCOmDSPRML+SpwouRmERJVxg0TrMRfWobY0\/ZSqZ6GO5xUhoC\/Pe2KyGiG9kRs5MUDkRHhxFBiqIU+qhQswvFEBKjbZaoyg9NitYA2u2LiYFgwYMKAL83mudwqiFQx9EqkZKAhdsVXYgEKTKPaFU\/PiiL8rba6VFHsUq6ZOJDOBApkq9k6LVarRVnsMvDREFuNgiweyF0A0JCbVVksykUovcVCqCj3y4pDJltO+x1gAvAbhYLcgNNTDDWLolzt5vOFaiPfagITsVmQmy2mWmjkqWK1e9o4u2MmkNUC+JI\/YLrn+YZYDOUPzhp5KKihBtU9b8rVfPO8CBW6VWweiG6YOB6zUV2qeiAWqnkGalCoSFHVhlwttELdsyJmUhRD3dNWIV9oHVBQZBp5d+2JU\/WZ5PPFahHqBmaCXCroTAp5OC3gXfUAMZGBSbVw3qQoV3XH+ThWlmWRgdatGjptVJuhQuGsJVKQpJpMFepOk2Kq50yzAUsN+Zw5b8iu2pNth\/MnOpODxkErf16Uq9UD+ewgVGi0oO4UG80hkzzUo65czBcLxdPQATqLd8JE7\/\/6HQ3ugPp9DhPq\/wsx+nL\/41Z98SwN+2I4BAWVOIT+UxRepJhQv2PEfjIi\/o8+3LWxgRrbO9B9jNmW5kxuozkTs+5xrmC2fvDgzLfGJO5wTmnapF9o1qyffwMDL2fG9\/EJ8eQnWxWe2m9Dcjo77GBY8OSHmRLtNjidKvdFfoUNOOiLHehlIO6rOLhOcSQHYzYH2pozMck7Ez\/ujfqTl+Aw8eEeesIvJv60J98Xk1VfrHxfTPzRnIlZ3pk4HdtP0XfHxPK9dy5NfG9MfJBvTHx5\/ivxKAiPkfkWEhz2w853xsSX8hYUJj4Z8omJZysR+xbp2aIzLYUdfnHWC8PsmKw7ta97s+Tm61Y+TRmfbC5H\/FV4BhO79mRxw2dHZvg0hckjvzu1WUzsAqMWfXj+3U5BZ2KnOROz5kzMum8mUzRnYta9M7HL+v9nJrZ9cTCYRLKYScKfqa++wfDYm+jNshuzBYRJPLwW2VrdCPvGZD28sx7e3gm7ZbK+rjOZMt6+tVbj+nmajHhdthkorfoU+Dg6EDY4Nd7Ispy8DC9vwIB9wz9PhoqHtyKvIs\/Dk12vbV+85kOw4Zi2wN70qzzLefssZnk3b+OKWJ8nWyYoKtV7wO+EA9OronWRfYb89i1yf1xrlufJfsz2POzP\/ZahXoY3b7XfZjj83FdHRtq2PE\/2TLbDPr8MPHLLUHVo2u7stRlw4s0rl+xL5Uu\/J6xuO471Glc+ReuuetZEupfbTSZLupL7u7lM+nZ1KZFOpfYyoF4mlbqNjeVI30wGm8lkUun0rTyxkOPGO53bL5ErMSRSF6RWVlaipf09N94kUnu7STa60heJPqJscnfPmoxdk57NgD8suWJQjC3tw0myPfKTpw71eGzJ7umh1C4bWxmwmBRsKe06+8GJ9F4SGTJbArwxNmkB17JNT+2W6BUbM6SdL09mPk5m\/dxZyBJKjrU4\/KQz7N5MInuooE0zAhmatGLuFdO7M9wBX\/YtsPx0y2cBraJ+c+TKDCC6VujcVCI5+5I2hmXcyiSTVNKBFTBTMlHxxmTJ0M1laGdEMBXWvgYBEadWxqiMM0k7IqKbmaTijYlhfLLvnAh2ZNeaSLrkxs5KadSujN2Zyc2swwbFJpzxi4mrrODs7FshyZAu8oKyQw7PsXE85PIEkSvJO2CSdIvEuqRk3JuJZcxm3HsTK\/nOJDd0IkobjsTSZJQlSTraX6aNG8kVU27Shq3G70bBEFq2NESbuuWhN5Y2hs5FSYOMxRYzYYxRrnqQqzHKtR9cY9g8YNKfP0kMDxTl2pCORvF\/uqOwnBKl25UoXsO2JTpq8IQ1nd9RxaF5aWgoSl4ILK+ytMD1Dan8yFAsOWElPbBCS9rQBs1dtFmpzdIq3bdR1o1ZnKGfcEhro9AaBrk2q\/DRahkgnZ8zlNxfzh8wBiamIk9XFJakOY6Own9NoWk+3EY5gCWa5NoSC4mRGymbzCBDmkBjQ2SFY9sCTUthDbJBV8AQx6kaPTIUmygou0MmcA5ItAeyoUo0LYQrbActIRu6seEBDWgxk4M81WgNolqrYkikxDMc1EqJKOpKDlNUES0zsGUzH0LRrmNMhl5gJjRfVtucWpbUC43mlQ6pVgRFEciOcCHxiiIN\/ViZGHblDM0AYkJL8G1eqPHlToWWhAu6HFPALNcR3vOSWtboMTPDmKbS0AYwodtqmZfaHa5Ti7GCUGM7bA0sajXhPSkI5coICjvst3QmDCM2xMZpk+rKLVksyK3WOQpqRcF5LYaRz4tUgynKXbHZkDfzhWZxKhMWALxnIT8VAfgofE3Qyix7IUlQdxRFrdkzmSgnbE0VOmy7LGhQ5qW2pCqawsZqAg8lr6YqZbZvRh+lDMf2rJEJ+09bUch2TRJ4KCeaKtU0FephjYRCdyHUhBGTUbvUZxICEAUZiDD5U0iGzs8LYl5uFVFAOHN6Vmg2qnL+rNAI5TepR81uixljkhurO6yikWS7XSnzKtQdhVU6Wo1m3wMTQVL4UbZNjexEOWHZWoUkVU0TpDaUGYEtdwAuiZgofJmLxaJjTDatmLDse\/hbg1oraMBEitY6IyadsX5\/kkk+L58XqlSo2crnT8\/y1WILMTltNUKYSTV0UAAmVcTkFVUMoYsfI5O0oZxclMt8R5CkWlnpM6HDlXa5JpEXKtQd2DRqkCdH42NMLsqKBEWsrdQGTLhXMUWpaRwY4tGmQd1JjTPZH7UnnbLQrqlcGY6sM2G1f6D0dTgebMSEsloZtrKG3lhn0ujKjHggtyj4fyqenp62mlBvGpB9nQnTQmHjXapZLBzkG4XTyb541GHQLMtCC4b+sbjrY1EviPtRmkOJUbNmHqAMz7BuCH8b2cL7o349ynKQiI4ZGmRmyMTQ4g9tsAMb4A\/L4QUwFosZGvzRdYKxL4b2NI9fgyEyg6DWQcDtYJlCca+jNnbAJD028IASgP8ZV0TJ\/qrRiTF1xRZDNrOhwceoL+7XwJfDUpccqxNRSxvRMRvj3vg0jk25Hzmax1rQWHsYDo8qYpp1d4GA3TF449f1Tirq8kKFtZzmcnuhYn0tmaZdQjFcNvnIBF2cu8mK5RUggfoeN9mJrdjMxLi7JF0ZP0HemKwa78NmWIeOxKZNn7iYLIgZpwom2TovtzFyoqz5Oc9G7LGOJshKFpeyRrYlR2Vlhp30rrM5rhVyfxKsr0ygWdmnp2UoBkXEwSR1Jjl9OhbPPCYn7JjeRZbOzTxFyB1zUbs1E7sQ5ERqt7RiMVWObmc4nrWH\/CQtZ+37lshkzpQVq3n71C67YscF\/LE7P08N8cah2THJA00NmE+kcvvoHoJBdGk35\/Jns1O5JLYRGwlbSlobsnnqIL2Hz5HRCjbDOrvZtOP6xmpi6g1QdAsPy8N9t1Qmt7uf1IXuJtpyTUyLy0in9tBtSV27ub0p97sm5J5J5KXbPe5M63fjinsmxKM7fFjMnZbvxpNbMNme+ojZd6BbMCG2H+m\/GLKKhPfP4iQezMVxMjtK4iq\/jpN478hEUgeMV65bmp1yhLvRbZj0r70Si8vLy4s4H3GcxKa2cTI+SmLnIziJ913FP8qHk\/iX\/fTHbvBKTCqxPDSbtTxCfGT2bnQ7Jt+35kzMmjMxa87ErDkTs+ZMzPr+mSxtPnKpV3Z7bPoWYPHA2ohk4\/4ou+j517YCIl9+L0jXszkTk+ZMzJozMWvOxKw5k3Ghn9hBTKZPvX4D2k7oTOLeM5LdWoqvrsaXtr51JtnwzvbGemTLj6gv\/ccv7yqm7h7Vz4gvtpZmhrF+I9pBGfFn\/jjxKux3wOPDKOv9B1aHWvY5LvbBtORfvGQi7Mu7zx5eWR\/jJTfuIrb9IbTjpTVJpzKDIEtYigfhJYhelEa3nZOlUoXFYaxJd2Gs6YzFIwFTgyyDLj2MFT9X0H\/+UX+0wFkYayKzW7KL1Vxh979FLrPCWGc8ITTjESOwEE1Of+gqcPIYxro3e3eEZUbEZ6DkNNjSJlOOH1kkJyNYAyuvYazuHm21fwAzQPIYxur2UewYGfxmxX0Y61gEXcrtg9hW0Y0Bk6HgG8MPUDiGMSKBNsYDGp\/sNpSSsfAFFBxiXGcMvZgMwQuYjMFR3ChTtNamyRgd5QbLPGcdJGkIhRh+GUvgaQ6IDHajJcP+Y+G4gVPCENCmqXBqaToK\/2muxtFaOMaWK7AQJWkWxTmNysooWsVAAb4M30SBPzTNqhIsl9noBQ4HitLshR5b1Ifi8lnXe5UhDAgxiZKCQnKqSiq1Cq11yqzCVVQ1hqInNRJWD6AMw1iNgTfw5SjNK21aUtvcexTY19HoDispbZZT2h0WbRrsH+QeeRSyiZnQqqSVAYogAQhNKGtKpcZpZU0la7wqSeowT4PBW2acCU12OEXjKh2uxtNsmb+I1niFVMACf0HDykHsaczmFQyB0DgTli0rqsArqgrNCSyTHUVSWLqmVti2VlPV9mwm\/wiKJgiQ\/RgK1YbyJfCsJtRYtlO5EBT+W2CSM9YdheNUqUQqvKSikGVgJIW5CxLOssJe8Io2ikEcNrLpMSYax3Wg7QmXOpUaCl+vsJ0aX2bLWpnn39MXo\/Yk0L2xIZ49yglCmxTKPFR+jeOhz9HoaJvkFJWk24rEkWp5cJoNYawlY0ETBI1TFFKCb0uoq+FoTmKlsoTaEwnFl5Om\/YMoQ5Ak6m+gg6BR8Cp6v0QUh7BG9X4HJdhh1RkV\/ZQx+BsJvf+BxfujMU0UL+nxsIb9g9zEmsNYnWgsjDV3i1jNyVdJBE2ew1hdB7AGHokPYazuYjVtX4UUKCW8hrG6ebHTtJjPQMlFGKv5dWR9A47Kyjc10eYsjDVmH346O1YT7T77FXyBUmp\/KpbZYazpHMJiG6vpPOgzUPIcxoruZtD9IMvBvijKkiztunqlZ8Ckv2DUQAS\/XtTNGU6gIEtDrOaeXdzn\/wHiPW3\/rEkvUAAAAABJRU5ErkJggg==)\n","7bb5217b":"### **Reading the Dataset by converting it into a readable Dataframe using Pandas**\n\npandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.\nFor the source file of pandas you can go on the [`Github link`](https:\/\/github.com\/pandas-dev\/pandas)","34d0d4ed":"### **Now Some Data Visualizations work**","4295c6de":"## **Making the Confusion Matrix**\n\nA confusion matrix is a technique for summarizing the performance of a classification algorithm. Classification accuracy alone can be misleading if you have an unequal number of observations in each class or if you have more than two classes in your dataset. Calculating a confusion matrix can give you a better idea of what your classification model is getting right and what types of errors it is making.\n\nFor More on the Confusion Matrix, you can go on with the [`Machine Learning Mastery Blog on Confusion matrix`](https:\/\/machinelearningmastery.com\/confusion-matrix-machine-learning\/)","6e6be495":"### **Importing All Essential Libraries**\n* A (software) library is a collection of files (called modules) that contains functions for use by other programs.\n* May also contain data values (e.g., numerical constants) and other things.\n* Library\u2019s contents are supposed to be related, but there\u2019s no way to enforce that.\n* The Python standard library is an extensive suite of modules that comes with Python itself.\n* Many additional libraries are available from PyPI (the Python Package Index).","405cd50c":"# If you really like the work then please Upvote\n![Upvote](https:\/\/media.giphy.com\/media\/K2kRXR8j5Yykg\/giphy.gif)\n\n# And Do Comment for the suggestion, it will be highly obliged and consider for improvement","5420970d":"## **Feature Scaling**\n\nFeature scaling in machine learning is one of the most critical steps during the pre-processing of data before creating a machine learning model. Scaling can make a difference between a weak machine learning model and a better one.\nThe most common techniques of feature scaling are Normalization and Standardization\n\nFor more on Feature Scaling, you can go on with the blog of [`Towards Data Science`](https:\/\/towardsdatascience.com\/all-about-feature-scaling-bcc0ad75cb35)"}}