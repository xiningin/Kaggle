{"cell_type":{"fcc0253e":"code","f3d65544":"code","e41939a3":"code","381893bd":"code","4165c4b2":"code","698c4207":"code","e261ccf1":"code","caedbb9f":"markdown"},"source":{"fcc0253e":"import torch as t\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport datatable as dtable\nimport fastai\n\nfrom fastai.tabular.all import *\nfrom fastai.data.core import DataLoader\nfrom fastai.data.core import DataLoaders\nfrom numba import njit\nfrom tqdm import tqdm\nfrom sklearn.model_selection import cross_val_score\nfrom time import time\n\ndf = dtable.fread('\/kaggle\/input\/jane-street-market-prediction\/train.csv').to_pandas()\ndf = df.query('date > 85').reset_index(drop = True) \ndf = df[df.weight > 0]\ndf.reset_index(inplace=True, drop=True)\ndf = df.astype({c: np.float32 for c in df.select_dtypes(include='float64').columns})\ndf_labels = df[['date', 'weight', 'resp_1', 'resp_2', 'resp_3', 'resp_4', 'resp']]\nfeatures = [c for c in df.columns if 'feature' in c]\ndf = df.drop(df_labels.columns, axis=1)\ndf.fillna(df.mean(), inplace=True)\nresp_cols = ['resp_1', 'resp_2', 'resp_3', 'resp_4', 'resp']\nX = df[features]\ny = np.stack([(df_labels[c] > 0).astype('int') for c in resp_cols]).T\nf_mean = np.mean(df[features[1:]].values, axis=0)\ndevice = 'cuda' if t.cuda.is_available() else 'cpu'","f3d65544":"class Model(nn.Module):\n    def __init__(self, num_features, num_targets, hidden_size):\n        super(Model, self).__init__()\n        cha_1 = 64\n        cha_2 = 128\n        cha_3 = 128\n\n        cha_1_reshape = int(hidden_size \/ cha_1)\n        cha_po_1 = int(hidden_size \/ cha_1 \/ 2)\n        cha_po_2 = int(hidden_size \/ cha_1 \/ 2 \/ 2) * cha_3\n\n        self.cha_1_reshape = cha_1_reshape\n        self.cha_1 = cha_1\n        self.cha_2 = cha_2\n        self.cha_3 = cha_3\n\n        self.batch_norm1 = nn.BatchNorm1d(num_features)\n        self.dropout1 = nn.Dropout(0.1)\n        self.dense1 = nn.utils.weight_norm(nn.Linear(num_features, hidden_size))\n\n        self.batch_norm_c1 = nn.BatchNorm1d(cha_1)\n        self.dropout_c1 = nn.Dropout(0.1)\n        self.conv1 = nn.utils.weight_norm(nn.Conv1d(cha_1, cha_2, kernel_size=5, stride=1, padding=2, bias=False), dim=None)\n        self.ave_po_c1 = nn.AdaptiveAvgPool1d(output_size=cha_po_1)\n\n        self.batch_norm_c2 = nn.BatchNorm1d(cha_2)\n        self.dropout_c2 = nn.Dropout(0.1)\n        self.conv2 = nn.utils.weight_norm(nn.Conv1d(cha_2, cha_2, kernel_size=3, stride=1, padding=1, bias=True), dim=None)\n\n        self.batch_norm_c2_1 = nn.BatchNorm1d(cha_2)\n        self.dropout_c2_1 = nn.Dropout(0.3)\n        self.conv2_1 = nn.utils.weight_norm(nn.Conv1d(cha_2, cha_2, kernel_size=3, stride=1, padding=1, bias=True), dim=None)\n\n        self.batch_norm_c2_2 = nn.BatchNorm1d(cha_2)\n        self.dropout_c2_2 = nn.Dropout(0.2)\n        self.conv2_2 = nn.utils.weight_norm(nn.Conv1d(cha_2, cha_3, kernel_size=5, stride=1, padding=2, bias=True), dim=None)\n\n        self.max_po_c2 = nn.MaxPool1d(kernel_size=4, stride=2, padding=1)\n\n        self.flt = nn.Flatten()\n\n        self.batch_norm3 = nn.BatchNorm1d(cha_po_2)\n        self.dropout3 = nn.Dropout(0.2)\n        self.dense3 = nn.utils.weight_norm(nn.Linear(cha_po_2, num_targets))\n\n\n    def forward(self, x):\n        x = self.batch_norm1(x)\n        x = self.dropout1(x)\n        x = F.celu(self.dense1(x), alpha=0.06)\n\n        x = x.reshape(x.shape[0], self.cha_1, self.cha_1_reshape)\n\n        x = self.batch_norm_c1(x)\n        x = self.dropout_c1(x)\n        x = F.relu(self.conv1(x))\n\n        x = self.ave_po_c1(x)\n\n        x = self.batch_norm_c2(x)\n        x = self.dropout_c2(x)\n        x = F.relu(self.conv2(x))\n        x_s = x\n\n        x = self.batch_norm_c2_1(x)\n        x = self.dropout_c2_1(x)\n        x = F.relu(self.conv2_1(x))\n\n        x = self.batch_norm_c2_2(x)\n        x = self.dropout_c2_2(x)\n        x = F.relu(self.conv2_2(x))\n        x = x * x_s\n\n        x = self.max_po_c2(x)\n\n        x = self.flt(x)\n\n        x = self.batch_norm3(x)\n        x = self.dropout3(x)\n        x = self.dense3(x)\n\n        return x","e41939a3":"model_nn = Model(num_features=130, num_targets=5, hidden_size=512)\nmodel_nn = model_nn.to(device)","381893bd":"learn = Learner(None, model_nn, loss_func=1)\nlearn.load('\/kaggle\/input\/jstreet1dcnn\/1dcnn')","4165c4b2":"@njit\ndef fillna_npwhere_njit(array, values):\n    if np.isnan(array.sum()):\n        array = np.where(np.isnan(array), values, array)\n    return array\n\ndef for_loop(method, matrix, values):\n    for i in range(matrix.shape[0]):\n        matrix[i] = method(matrix[i], values)\n    return matrix","698c4207":"%%time\n%%capture\nimport janestreet\nenv = janestreet.make_env()\n\nlearn.model.eval()\npreds = []\nfor (test_df, pred_df) in tqdm(env.iter_test()):\n    if test_df['weight'].item() > 0:   \n        x_tt = test_df.loc[:, features].values\n        x_tt[:, 1:] = for_loop(fillna_npwhere_njit, x_tt[:, 1:], f_mean)\n        pred = 0.\n        pred = learn.model(t.from_numpy(x_tt).to(device, t.float)).sigmoid()[0][-1].item()\n        preds.append(pred)\n        action = 1 if pred >= .5 else 0\n        pred_df.action = action\n    else:\n        pred_df.action = 0\n    env.predict(pred_df)","e261ccf1":"preds = np.array(preds)\npreds.mean(), preds.std(), sum(preds >= .5), sum(preds < 5)\n","caedbb9f":"This notebook's model was inspired by the 1dcnn in https:\/\/github.com\/baosenguo\/Kaggle-MoA-2nd-Place-Solution from the excellent competitor https:\/\/www.kaggle.com\/baosenguo Check out his page and work, he's very helpful\n\n\nAlso many thanks to Dr. Ahmed Sami for sharing his model and training flow in https:\/\/www.kaggle.com\/ahmedelhaddad\/fastai-submission-custom-ds! The only thing I changed was the output to a tensor of 5 items, to do BCEWithLogitsLoss https:\/\/pytorch.org\/docs\/stable\/generated\/torch.nn.BCEWithLogitsLoss.html\n\nThis helped improve the model in all scenarios, and I will explain my reasoning for this and trials in the discussion forum soon!\n\nHere are different models I've tried(here are the links and scores)\n\nhttps:\/\/www.kaggle.com\/pyoungkangkim\/mlp-batchnorm-dropout-linear-pytorch-no-pre-bnorm\n\nhttps:\/\/www.kaggle.com\/pyoungkangkim\/mlp-batchnorm-dropout-linear-pytorch\n\nhttps:\/\/www.kaggle.com\/pyoungkangkim\/resnet-batchnorm-dropout-linear-pytorch-jstreet\n\nhttps:\/\/www.kaggle.com\/pyoungkangkim\/densenet-batchnorm-dropout-linear-pytorch-jstreet\n\nMore to come below, I'll eventually release them(soon) once I submit them and get the scores.\n\nhttps:\/\/www.kaggle.com\/pyoungkangkim\/resnet-deep-bnorm-dropout-linear-pytorch-jstreet\n\nThe particulary interesting ones to come(I speculate sometime mid Feburary) will be ensemble of these models and xgboost, check later on my profile if you're interested for this and trials\/findings!"}}