{"cell_type":{"fe32a133":"code","d99781ca":"code","0994d285":"code","f82da206":"code","37ca7beb":"code","5bdef7f0":"code","0747cc87":"code","e5bc7d36":"code","929b4a2e":"code","5954a0a0":"code","6082db49":"code","7ab3e0d9":"code","9324ff99":"code","e004fa79":"code","73ac6ae7":"code","3d551599":"code","cebea16e":"code","f25a9c5d":"code","2507534e":"code","b5821eff":"code","03b52a0f":"code","f54fe198":"code","0cc3c41e":"code","0b6eff22":"code","3dc63ef3":"code","4b8dc249":"code","3e824ccf":"code","6632e92b":"code","5e98bbe4":"code","7bc7a1ea":"code","28c0ae0c":"markdown","594b1b19":"markdown","28668044":"markdown","360464ba":"markdown","11640c9b":"markdown","e8636153":"markdown","e0f4dfba":"markdown","06bbc41d":"markdown","414e39bb":"markdown","26bcf7e6":"markdown"},"source":{"fe32a133":"import math\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport lightgbm as lgb\nfrom sklearn.preprocessing import StandardScaler\nimport optuna\nfrom optuna.samplers import TPESampler\nfrom sklearn.model_selection import train_test_split, cross_val_score, KFold\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_auc_score, plot_roc_curve","d99781ca":"df_train = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ndf_train.head()","0994d285":"print(f'Train set shape:   {df_train.shape}')","f82da206":"df_train.info()","37ca7beb":"df_train.describe()","5bdef7f0":"df_train.isnull().sum().sort_values()","0747cc87":"percentage_of_nulls = df_train.isnull().mean() * 100\n\nplt.figure(figsize = (5, 30))\nplots = sns.barplot(x = percentage_of_nulls.sort_values(), y = percentage_of_nulls.sort_values().index)\nfor p in plots.patches:\n    width = p.get_width()\n    height = p.get_height()\n    plt.text(0.3 + width, p.get_y() + 0.55 * height, '{:1.3f}'.format(width), ha = 'center', va = 'center')\nplt.xlabel('% of nulls')\nplt.ylabel('Feature')\nplt.grid()","e5bc7d36":"df_test = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')\ndf_test.head()","929b4a2e":"print(f'Test set shape:   {df_test.shape}')","5954a0a0":"df_test.info()","6082db49":"df_test.describe()","7ab3e0d9":"df_test.isnull().sum().sort_values()","9324ff99":"percentage_of_nulls = df_test.isnull().mean() * 100\n\nplt.figure(figsize = (5, 30))\nplots = sns.barplot(x = percentage_of_nulls.sort_values(), y = percentage_of_nulls.sort_values().index)\nfor p in plots.patches:\n    width = p.get_width()\n    height = p.get_height()\n    plt.text(0.3 + width, p.get_y() + 0.55 * height, '{:1.3f}'.format(width), ha = 'center', va = 'center')\nplt.xlabel('% of nulls')\nplt.ylabel('Feature')\nplt.grid()","e004fa79":"plt.figure(figsize = (5,5))\nsns.countplot(x = df_train['claim'])\nplt.grid()","73ac6ae7":"df_train['n_nulls'] = df_train.drop(['id', 'claim'], axis = 1).isnull().sum(axis = 1)\ndf_test['n_nulls'] = df_test.drop('id', axis = 1).isnull().sum(axis = 1)\n\ndf_train['mean'] = df_train.drop(['id', 'claim', 'n_nulls'], axis = 1).mean(axis = 1)\ndf_test['mean'] = df_test.drop(['id', 'n_nulls'], axis = 1).mean(axis = 1)\n\ndf_train['std'] = df_train.drop(['id', 'claim', 'n_nulls', 'mean'], axis = 1).std(axis = 1)\ndf_test['std'] = df_test.drop(['id', 'n_nulls', 'mean'], axis = 1).std(axis = 1)","3d551599":"df_train = df_train.fillna(np.mean(df_train))\ndf_test = df_test.fillna(np.mean(df_test))","cebea16e":"df_train.head()","f25a9c5d":"df_test.head()","2507534e":"features = [i for i in df_train.columns if 'f' in i] + ['n_nulls', 'mean', 'std']\n\nscaler = StandardScaler()\n\ndf_train[features] = pd.DataFrame(scaler.fit_transform(df_train[features]), columns = features)\ndf_test[features] = pd.DataFrame(scaler.transform(df_test[features]), columns = features)","b5821eff":"df_train.head()","03b52a0f":"df_test.head()","f54fe198":"X = df_train[features]\ny = df_train['claim']","0cc3c41e":"# Parameters improved by Optuna\n\nparams = {'n_estimators': 1000, 'subsample': 0.7, 'colsample_bytree': 0.7,\n         'max_depth': 5, 'reg_alpha': 20, 'reg_lambda': 20, 'learning_rate': 0.0632598738459901}\n\nmodel = lgb.LGBMClassifier(**params, device = 'gpu')","0b6eff22":"def check_model(model, n_splits = 10):\n    \n    scores = []\n    cv = KFold(n_splits, shuffle = True)\n    \n    for train_idx, test_idx in cv.split(X):\n        X_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n        X_test, y_test = X.iloc[test_idx], y.iloc[test_idx]\n        model.fit(X_train, y_train, eval_set = [(X_test, y_test)], eval_metric = 'auc', \n                  early_stopping_rounds = 50)\n        preds = model.predict_proba(X_test)[:, -1]\n        score = roc_auc_score(y_test, preds)\n        scores.append(score)\n        \n    print('************************************')    \n    print(f\"Mean AUCROC:       {np.mean(scores)}\")\n    print(f\"Std AUCROC:        {np.std(scores)}\")","3dc63ef3":"%%time\n\ncheck_model(model = model)","4b8dc249":"plot_roc_curve(model, X, y)\nplt.grid()","3e824ccf":"lgb.plot_importance(model, figsize = (10, 30))","6632e92b":"preds = model.predict_proba(df_test[features])[:, -1]","5e98bbe4":"sub = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')\nsub['claim'] = preds\nsub.head()","7bc7a1ea":"sub.to_csv('lgbm_final', index = False)","28c0ae0c":"## Train set summary","594b1b19":"## Target summary","28668044":"## Submission","360464ba":"## LGBM","11640c9b":"## Missing values","e8636153":"**Classes are balansed.**","e0f4dfba":"**'id' column has no missing values.**","06bbc41d":"## Standard Scaler","414e39bb":"**'id' and 'clain' columns have no missing values.**","26bcf7e6":"## Test set summary"}}