{"cell_type":{"1b30bc68":"code","5fd34a74":"code","d369a586":"code","af4c980e":"code","8a485ae1":"code","7e13375a":"code","757d0d7e":"code","28346bee":"code","603955ab":"code","8fc3aec5":"code","122dccfc":"code","ff19e42f":"code","889f214a":"code","f045da66":"code","c888765b":"code","dbf41d04":"code","2450c2e0":"code","8262cd15":"code","48d73496":"code","7590ab13":"code","4ce70319":"code","8c741646":"code","ea23f194":"code","068023f5":"code","dfd6901f":"code","81f63768":"code","163d43b3":"code","5c02fc74":"code","f9f2275b":"code","b4890742":"code","b4fe822b":"code","bc7ee433":"code","7fdeba2a":"code","944b8b50":"code","41274a93":"code","57e7cba6":"code","bc6b6a13":"code","be8eb56b":"code","ddd23daf":"code","dc0b6e99":"code","e152f0e0":"code","979b8d39":"code","a8604ae5":"code","e2e02988":"code","9c12f07f":"code","1fff2871":"code","04819e33":"code","2a4d99eb":"code","357b6ffe":"code","9baa4d94":"code","01cd83f9":"code","197f908d":"code","c6a62b82":"code","1b3341b5":"code","4629e7e9":"code","8fa415f2":"code","12417bf0":"code","e1d9c858":"code","fde85dc4":"code","173563f7":"code","af3034d2":"code","21d88540":"code","aa677182":"code","2815ce9b":"code","236f7dba":"code","a3807894":"code","b9cc40ed":"code","f160ca3c":"code","29e07f26":"code","a4e2e3f7":"code","19c104be":"code","9646b2e7":"code","d9a7a9a9":"code","87c285c6":"code","c331321d":"code","1b55e5bb":"code","b5b76d9e":"code","2ce48075":"code","3ae77805":"code","0815a667":"code","4d974c1c":"code","cfd73f52":"code","a5be7d21":"code","cb329a6c":"code","0c19c8ed":"code","6b1aabac":"code","dc7378d9":"code","de8622ce":"code","f6275c3f":"code","f6b9c673":"code","d2adba9b":"code","ae26b445":"code","c1c6f6e3":"code","635b6020":"code","e8af8806":"code","953886da":"code","5ef00403":"code","8bd9ec64":"code","d356fc61":"code","c6f1f8e8":"code","af51b545":"code","35af8a5d":"code","d5e161cc":"code","d90eda87":"code","69c6a7ad":"code","af8eb6e1":"code","0944b95f":"code","b3ef87ce":"code","76438da1":"code","071f1b68":"code","ddc706ad":"code","cd265bbe":"code","53d7ba2b":"code","a97374af":"code","874a2d17":"code","38ac83aa":"code","f999c4d3":"code","fddd52fd":"code","164a9301":"code","aec2fb59":"code","6aa8227b":"code","6000dd49":"code","47fe82a2":"code","f1cf2338":"code","aef05567":"code","b60c2067":"code","99b3c07b":"code","431b5c41":"code","ad07e3fa":"code","e59054f7":"code","c1389234":"code","7c65d333":"code","9775d58d":"code","3bdd92a1":"code","8962b965":"code","c230aca3":"code","b552b32c":"code","53c81df1":"code","379b08f0":"code","cabbbef0":"code","b5809764":"code","cf247140":"code","cdbed456":"code","ce2907de":"markdown","21c6ed74":"markdown","9e262761":"markdown","1198a8aa":"markdown","d8ac857c":"markdown","3beda684":"markdown","fd1cc548":"markdown","0432cef8":"markdown","a002c839":"markdown","db6f6590":"markdown","28728231":"markdown","3c3acf75":"markdown","a3ef5613":"markdown","90105c58":"markdown","abbbd8fc":"markdown","deb5ab3f":"markdown","20314a4f":"markdown","850d2147":"markdown","6ba44a73":"markdown","2203971d":"markdown","604dab5b":"markdown","7c8e80de":"markdown","3630e72a":"markdown","5dd238fc":"markdown","58cf3673":"markdown","322c8750":"markdown","7bc54bd2":"markdown","891aaca9":"markdown","8a4d1a3a":"markdown","1e26486e":"markdown","2ea4757f":"markdown","294c27ed":"markdown","fa377609":"markdown"},"source":{"1b30bc68":"import pandas as pd\npd.set_option('max_columns', 100)\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport re\nfrom collections import Counter\nfrom wordcloud import WordCloud\nfrom datetime import datetime\nimport nltk\nfrom nltk.corpus import stopwords\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.cluster import KMeans, MiniBatchKMeans\nfrom scipy.spatial.distance import cdist\nimport plotly.graph_objects as go\nimport folium\nimport pickle\nwarnings.filterwarnings('ignore')\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","5fd34a74":"#data = pd.read_csv('AB_US_2020.csv')\ndata = pd.read_csv(os.path.join(dirname, filename))","d369a586":"data.head()","af4c980e":"data.shape","8a485ae1":"data.info()","7e13375a":"# Dropping Duplicate Values\n# You can choose any subset of features you want.\ndata = data.drop_duplicates(subset = ['host_id', 'host_name', 'latitude', 'longitude', 'room_type'])","757d0d7e":"data.isnull().sum()","28346bee":"plt.figure(figsize = (15, 10))\nsns.heatmap(data.isnull().T)\nplt.show()","603955ab":"null_df = data[data.isnull().any(1)]\nnot_null_df = data[~data.isnull().any(1)]\n\nfig = plt.figure(figsize = (16, 5))\n\nfig.add_subplot(1,2,1)\nsns.distplot(data['price'])\n\nfig.add_subplot(1,2,2)\nsns.distplot(np.log1p(data['price']))\nplt.xlabel('Log price')\n\nplt.show()","8fc3aec5":"data['log_price'] = np.log1p(data['price'])","122dccfc":"fig = plt.figure(figsize = (16, 5))\n\nfig.add_subplot(1,2,1)\nsns.distplot(np.log1p(data['price']))\nplt.title(\"Overall Price distribution\")\n\nfig.add_subplot(1,2,2)\nsns.distplot(np.log1p(null_df['price']), label = 'data with null values')\nsns.distplot(np.log1p(not_null_df['price']), label = 'data without null values')\nplt.legend()\nplt.title(\"Price Distribution among the samples\")\nplt.show()","ff19e42f":"numeric_features = data.dtypes[data.dtypes != object].index.tolist()\ncategorical_features = data.dtypes[data.dtypes == object].index.tolist()","889f214a":"# handling Null values in \"name\"\nprint(\"Null values before : \", data['name'].isnull().sum())\ndata['name'] = data['name'].fillna('NULL')\nprint(\"Null values after : \", data['name'].isnull().sum())","f045da66":"# Preprocessing Name feature\ndef preprocess_name(rows):\n    sentence = str(rows).lower()\n    sentence = re.sub('apt', 'apartment', sentence)\n    sentence = re.sub('w\/', 'with', sentence)\n    sentence = re.sub('br', 'bedroom', sentence)\n    sentence = re.sub('bedrms', 'bedroom', sentence)\n    sentence = re.sub('blck', 'block', sentence)\n    sentence = re.sub('univs', 'university', sentence)\n    sentence = re.sub('&', 'and', sentence)\n    sentence = re.sub('[+-\\\/|]', ' ', sentence)\n    #sentence = re.sub('\\s+', ' ',sentence)\n    sentence = re.sub('\\'', '', sentence)\n    sentence = re.sub('\u201a\u00f2\u00f6', '', sentence)\n    sentence = re.sub('[!#\\\"~*)(,.:;?]', ' ', sentence)\n    sentence = \"\".join(re.findall('[a-zA-Z0-9\\s]', sentence))\n    sentence = re.sub('\\s+', ' ',sentence)\n    return sentence\n\ndata['preprocessed_name'] = data['name'].apply(preprocess_name)","c888765b":"# Deriving basic count based features from \"name\"\ndata['name_char_length'] = data['preprocessed_name'].apply(lambda x: len(x.strip()))\ndata['name_word_length'] = data['preprocessed_name'].apply(lambda x: len(x.split(' ')))","dbf41d04":"# checking the presence of any relation between the above features with the price\nfig = plt.figure(figsize = (16, 15))\n\nfig.add_subplot(3,2,1)\nsns.scatterplot(data['name_char_length'], data['price'])\n\nfig.add_subplot(3,2,2)\nsns.scatterplot(data['name_word_length'], data['price'])\n\nfig.add_subplot(3,2,3)\nsns.distplot(data['name_char_length'])\nplt.title(\"name_char_length Distribution\")\n\nfig.add_subplot(3,2,4)\nsns.distplot(data['name_word_length'])\nplt.title('name_word_length Distribution')\n\nfig.add_subplot(3,2,5)\nsns.scatterplot(data['name_char_length'], data['log_price'])\n\nfig.add_subplot(3,2,6)\nsns.scatterplot(data['name_word_length'], data['log_price'])\n\n\nplt.tight_layout()\nplt.show()","2450c2e0":"# lets see the distribution of words in name feature\nname_words = []\nenglish_stopwords = stopwords.words('english')\nenglish_stopwords.append('')\nfor element in data['preprocessed_name'].values:\n    name_words.extend(element.split(' '))\n\nname_words = [word for word in name_words if word not in english_stopwords]","8262cd15":"print(\"Total no of words : \", len(name_words))\nprint(\"Total unique words : \", len(set(name_words)))","48d73496":"# WordCloud\nname_reqs = {i[0] : i[1] for i in Counter(name_words).most_common(100)}\nplt.figure(figsize = (16, 8))\nwordcloud = WordCloud(width = 1200, height = 800, background_color = 'white').generate_from_frequencies(name_reqs)\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.show()","7590ab13":"data['log_name_char_length'] = np.log1p(data['name_char_length'])\ndata['log_name_word_length'] = np.log1p(data['name_word_length'])","4ce70319":"fig = plt.figure(figsize = (16, 5))\n\nfig.add_subplot(1,2,1)\nsns.distplot(data['log_name_char_length'])\n\nfig.add_subplot(1,2,2)\nsns.distplot(data['log_name_word_length'])\n\nplt.show()","8c741646":"# Filtering out the words which have occured more than 1000 times\n# and calculating the amount of times they have appeared in the samples\ncount = CountVectorizer(stop_words = english_stopwords, min_df = 1000)\nname_count_features = count.fit_transform(data['preprocessed_name'])\n\nname_count_features = pd.DataFrame(name_count_features.toarray())\ncount_vocabs = {v : k for k,v in count.vocabulary_.items()}\nname_count_features.columns = name_count_features.columns.map(count_vocabs)","ea23f194":"name_count_features.sum(axis = 'rows').sort_values(ascending = False).head(10)","068023f5":"data['important_name_word_count'] = name_count_features.sum(axis = 'columns').values\ndata['not_important_name_word_count'] = data['name_word_length'] - data['important_name_word_count']","dfd6901f":"names = []\nfor sentence in data['preprocessed_name'].values:\n    names.extend(sentence.split(' '))\n    \nnames = [word for word in names if word not in english_stopwords]","81f63768":"imp_words = [word[0] for word in Counter(names).most_common(30)]","163d43b3":"temp_df = data[[\"preprocessed_name\", \"price\", \"log_price\"]]","5c02fc74":"for word in imp_words:\n    temp_df[word] = temp_df['preprocessed_name'].apply(lambda x : 1 if word in x else 0)","f9f2275b":"words = dict()\nwords['word'] = []\nwords['mean_price'] = []\nwords['median_price'] = []\n\nfor word in imp_words:\n    words['word'].append(word)\n    words['mean_price'].append(temp_df[temp_df[word] == 1]['price'].mean())\n    words['median_price'].append(temp_df[temp_df[word] == 1]['price'].median())","b4890742":"words = pd.DataFrame(words)","b4fe822b":"fig = plt.figure(figsize = (16, 10))\n\nfig.add_subplot(2,1,1)\nsns.barplot(words['word'], words['mean_price'], label = \"average price of the listings with words\")\nplt.axhline(data['price'].mean(), linestyle = \":\", label = \"average mean price of all the listings\")\nplt.xticks(rotation = 45)\nplt.title(\"Plot showing average price of listings with most frequent words\")\nplt.legend()\n\nfig.add_subplot(2,1,2)\nsns.barplot(words['word'], words['median_price'], label = \"median price of the listings with words\")\nplt.axhline(data['price'].median(), linestyle = \":\", label = \"median mean price of all the listings\")\nplt.xticks(rotation = 45)\nplt.title(\"Plot showing Median price of listings with most frequent words\")\nplt.legend()\n\nplt.tight_layout()\nplt.show()","bc7ee433":"plt.figure(figsize = (16, 5))\nsns.distplot(np.log1p(data['price']), label = \"Price distribution of overall dataset\")\nsns.distplot(np.log1p(words['mean_price']), label = \"Average Price distribution records with frequent words\")\nsns.distplot(np.log1p(words['median_price']), label = \"Median Price distribution of records with frequent words\")\nplt.legend()\nplt.grid(linestyle = \":\")\nplt.xlabel(\"Price Distribution\")\nplt.title(\"Price Distribution of Listings having top 30 most frequent words in name vs Overall data\")\nplt.show()","7fdeba2a":"del temp_df\ndel words","944b8b50":"# relationship between the no of properties owned by the Lister with respect to the overall price\nhost = dict(data.groupby('host_id')['id'].count())\ndata['Properties_owned'] = data['host_id'].map(host)\nhost_to_price = dict(data.groupby('Properties_owned')['price'].mean())\ndata['Host_to_Price'] = data['Properties_owned'].map(host_to_price)","41274a93":"fig = plt.figure(figsize = (16, 5))\n\nfig.add_subplot(1,2,1)\nsns.scatterplot(data['Properties_owned'], data['price'])\nplt.xlabel(\"No of Properties Owned\")\nplt.grid(linestyle = \":\")\n\nfig.add_subplot(1,2,2)\nsns.scatterplot(data['Properties_owned'], data['Host_to_Price'])\nplt.xlabel('No of Properties Owned')\nplt.ylabel('Average Price')\nplt.title(\"Average Price set up by host over all the listings\")\nplt.grid(linestyle = \":\")\nplt.show()","57e7cba6":"neighbors = data[['neighbourhood_group', 'price']]","bc6b6a13":"neighbors['neighbourhood_group'] = neighbors['neighbourhood_group'].fillna('Unknown')","be8eb56b":"nbrs = dict()\nnbrs['neighbors'] = []\nnbrs['mean_price'] = []\n\nfor n in neighbors['neighbourhood_group'].unique().tolist():\n    nbrs['neighbors'].append(n)\n    nbrs['mean_price'].append(neighbors[neighbors['neighbourhood_group'] == n]['price'].mean())","ddd23daf":"nbrs = pd.DataFrame(nbrs)\nnbrs = nbrs.sort_values('mean_price', ascending = False).reset_index(drop = True)","dc0b6e99":"plt.figure(figsize = (16, 5))\nsns.barplot(nbrs['neighbors'], nbrs['mean_price'], label = 'mean price as per neighbourhood')\nplt.axhline(data['price'].mean(), label = \"overall mean price\", linestyle = \":\")\nplt.axhline(data['price'].median(), label = \"overall median price\", linestyle = \":\", color = 'r')\nplt.xticks(rotation = 90)\nplt.title(\"Average price of listing as per the Neighbourhood\")\nplt.legend()\nplt.show()","e152f0e0":"plt.figure(figsize = (16, 5))\nfor nbr in nbrs['neighbors'].values.tolist()[:5]:\n    sns.distplot(np.log1p(data[data['neighbourhood_group'] == nbr]['price']), hist = False)\nsns.distplot(np.log1p(data['price']), label = \"Overall Price Distribution\")\nplt.legend()\nplt.grid(linestyle = \":\")\nplt.title(\"Price Distribution of top 5 Neighbourhood groups vs Overall Price Distribution\")\nplt.show()","979b8d39":"del neighbors\ndel nbrs","a8604ae5":"numbers = []\nfor v in data['neighbourhood'].values:\n    try:\n        numbers.append(int(v))\n    except:\n        pass\n    \nnumbers = [str(e) for e in numbers]","e2e02988":"areas = []\nfor element in data['neighbourhood'].values:\n    areas.extend(element.split(' '))\n    \nareas = [e for e in areas if e not in numbers]","9c12f07f":"temp_df = data[['neighbourhood', 'price']]","1fff2871":"imp_areas = [word[0] for word in Counter(areas).most_common(30)]","04819e33":"for area in imp_areas:\n    temp_df[area] = temp_df['neighbourhood'].apply(lambda x : 1 if area in x else 0)","2a4d99eb":"areas = dict()\nareas['area'] = []\nareas['mean_price'] = []\nareas['median_price'] = []\n\nfor area in imp_areas:\n    areas['area'].append(area)\n    areas['mean_price'].append(temp_df[temp_df[area] == 1]['price'].mean())\n    areas['median_price'].append(temp_df[temp_df[area] == 1]['price'].median())","357b6ffe":"areas = pd.DataFrame(areas)","9baa4d94":"fig = plt.figure(figsize = (16, 10))\n\nfig.add_subplot(2,1,1)\nsns.barplot(areas['area'], areas['mean_price'], label = \"average price of the listings with areas\")\nplt.axhline(data['price'].mean(), linestyle = \":\", label = \"average mean price of all the listings\", color = \"r\")\nplt.axhline(data['price'].median(), linestyle = \":\", label = \"median price of all the listings\")\nplt.xticks(rotation = 45)\nplt.title(\"Plot showing average price of listings with most frequent areas\")\nplt.legend()\nplt.xticks(rotation = 90)\n\nfig.add_subplot(2,1,2)\nsns.barplot(areas['area'], areas['median_price'], label = \"median price of the listings with areas\")\nplt.axhline(data['price'].mean(), linestyle = \":\", label = \"average price of all the listings\", color = \"r\")\nplt.axhline(data['price'].median(), linestyle = \":\", label = \"median price of all the listings\")\nplt.xticks(rotation = 45)\nplt.title(\"Plot showing Median price of listings with most frequent words\")\nplt.legend()\nplt.xticks(rotation = 90)\n\nplt.tight_layout()\nplt.show()","01cd83f9":"plt.figure(figsize = (16, 5))\nsns.distplot(np.log1p(data['price']), label = \"Price distribution of overall dataset\")\nsns.distplot(np.log1p(areas['mean_price']), label = \"Average Price distribution records with frequent areas\")\nsns.distplot(np.log1p(areas['median_price']), label = \"Median Price distribution of records with frequent areas\")\nplt.legend()\nplt.grid(linestyle = \":\")\nplt.xlabel(\"Price Distribution\")\nplt.title(\"Price Distribution of Listings having top 30 most frequent areas in Neighbourhood vs Overall data\")\nplt.show()","197f908d":"del temp_df\ndel areas","c6a62b82":"temp_df = data[['name', 'neighbourhood', 'price']]","1b3341b5":"def return_words(rows):\n    words_found = []\n    for word in imp_words:\n        if word in rows:\n            words_found.append(word)\n        else:\n            pass\n    words_found.sort()\n    #wf = \" \".join(words_found)\n    #wf = re.sub(\"\\s+\", \" \", wf)\n    return len(words_found)\n\ntemp_df['imp_words'] = temp_df['name'].apply(return_words)\n\n\ndef return_areas(rows):\n    areas_found = []\n    for area in imp_areas:\n        if area in rows:\n            areas_found.append(area)\n        else:\n            pass\n    areas_found.sort()\n    #af = \" \".join(areas_found)\n    #af = re.sub(\"\\s+\", \" \", af)\n    return len(areas_found)\n\ntemp_df['imp_areas'] = temp_df['neighbourhood'].apply(return_areas)","4629e7e9":"mean_intersection = pd.pivot_table(data = temp_df, \n                                   index = temp_df['imp_words'], \n                                   columns = temp_df['imp_areas'], \n                                   fill_value = 0, \n                                   aggfunc = np.mean)\n\nmedian_intersection = pd.pivot_table(data = temp_df, \n                                   index = temp_df['imp_words'], \n                                   columns = temp_df['imp_areas'],\n                                   fill_value = 0, \n                                   aggfunc = np.median)\n\nfig = plt.figure(figsize = (16, 8))\n\nfig.add_subplot(1,2,1)\nsns.heatmap(mean_intersection, annot = True, fmt = 'g')\nplt.xticks(ticks = [0.5, 1.5, 2.5, 3.5, 4.5], labels = ['0', '1', '2', '3', '4'])\nplt.ylabel(\"Count of frequent words in name\")\nplt.xlabel(\"Count of frequent areas in neighbourhood\")\nplt.title(\"Mean price of listings which have most frequent words and areas\")\n\nfig.add_subplot(1,2,2)\nsns.heatmap(median_intersection, annot = True, fmt = 'g')\nplt.xticks(ticks = [0.5, 1.5, 2.5, 3.5, 4.5], labels = ['0', '1', '2', '3', '4'])\nplt.ylabel(\"Count of frequent words in name\")\nplt.xlabel(\"Count of frequent areas in neighbourhood\")\nplt.title(\"Median price of listings which have most frequent words and areas\")\n\nplt.show()","8fa415f2":"# price distribution of listings belonging to famous neighbourhoods\ntemp_df['log_price'] = np.log1p(temp_df['price'])\n\nfig = plt.figure(figsize = (16, 5))\n\nfig.add_subplot(1,2,1)\nsns.boxplot(x = 'imp_areas', y = 'log_price', data = temp_df)\n\nfig.add_subplot(1,2,2)\nsns.violinplot(x = 'imp_areas', y = 'log_price', data = temp_df)\n\nplt.show()","12417bf0":"# Individual or group renters","e1d9c858":"temp_df = data[['host_name', 'price']]","fde85dc4":"temp_df['host_name'] = temp_df['host_name'].fillna('Unknown')","173563f7":"to_look_for = ['&', '+', 'inc', 'and', 'family', 'rentals', 'studio', '\/', 'hostel', 'landing', '-', 'by']\nindividual_renters = []\nfor name in temp_df['host_name'].values:\n    value = sum([1 if elem in name.lower() else 0 for elem in to_look_for])\n    individual_renters.append(value)","af3034d2":"temp_df['individual_renters'] = individual_renters\ntemp_df['individual_renters'] = temp_df['individual_renters'].apply(lambda x: 1 if x > 0 else 0)","21d88540":"print(\"Overall Average Price of a listing : \", temp_df['price'].mean())\nprint(\"Overall Average Price of a listing by an Individual : \", temp_df[temp_df['individual_renters'] == 1]['price'].mean())\nprint(\"Overall Average Price of a listing by an Non-Individual \/ Group : \", temp_df[temp_df['individual_renters'] == 0]['price'].mean())","aa677182":"plt.figure(figsize = (16, 5))\nsns.distplot(np.log1p(temp_df['price']), hist = False, label = \"Overall Price Distribution\")\nsns.distplot(np.log1p(temp_df[temp_df['individual_renters'] == 1]['price']), hist = False, label = \"Overall Individual listings Price Distribution\")\nsns.distplot(np.log1p(temp_df[temp_df['individual_renters'] == 0]['price']), hist = False, label = \"Overall Non-Individual listings Price Distribution\")\nplt.legend()\nplt.grid(linestyle = \":\")\nplt.xlabel(\"log_price\")\nplt.show()","2815ce9b":"# How many Individual and Non-Individual listings are there?\nbar = temp_df['individual_renters'].value_counts()\nprint(bar)\nsns.barplot(bar.index, bar.values \/ temp_df.shape[0])\nplt.xticks(ticks = [0, 1], labels = ['Individuals', 'Non-Individuals'])\nplt.show()","236f7dba":"del temp_df","a3807894":"temp_df = data[['latitude', 'longitude', 'price']]","b9cc40ed":"K = np.arange(1, 11)\nerrors = []\n\nfor k in K:\n    kmeans = MiniBatchKMeans(n_clusters = k, batch_size = 1000)\n    kmeans.fit(temp_df)\n    errors.append(kmeans.inertia_)","f160ca3c":"plt.figure(figsize = (16, 5))\nplt.grid(linestyle = \":\")\nplt.plot(K, errors)\nplt.show()","29e07f26":"kmeans = MiniBatchKMeans(n_clusters = 3, batch_size = 1000, max_iter = 1000).fit(temp_df[['latitude', 'longitude']])\ncluster_labels = kmeans.labels_\ncluster_centers = kmeans.cluster_centers_","a4e2e3f7":"temp_df['cluster_coordinate_label'] = cluster_labels","19c104be":"def get_cluster_center(rows):\n    if rows['cluster_coordinate_label'] == 0:\n        return tuple(cluster_centers[0])\n    elif rows['cluster_coordinate_label'] == 1:\n        return tuple(cluster_centers[1])\n    elif rows['cluster_coordinate_label'] == 2:\n        return tuple(cluster_centers[2])\n    else:\n        return -1\ntemp_df['nearest_cluster_center'] = temp_df.apply(get_cluster_center, axis = 'columns')","9646b2e7":"plt.figure(figsize = (8, 5))\nsns.scatterplot(temp_df['latitude'], temp_df['longitude'])\nsns.scatterplot(cluster_centers[:, 0], cluster_centers[:, 1], color = 'red')\nplt.show()","d9a7a9a9":"m = folium.Map(location=[cluster_centers[0][0], cluster_centers[0][1]], tiles=\"Stamen Toner\",zoom_start = 3.5)\nsample = temp_df.sample(1000, random_state = 10)\n\nfor i in range(len(cluster_centers)):\n    folium.CircleMarker(\n        location = [cluster_centers[i][0], cluster_centers[i][1]],\n        color = 'red',\n        fill_color = 'yellow'\n    ).add_to(m)\n    \nlat, long = sample['latitude'].values, sample['longitude'].values\nfor i in range(sample.shape[0]):\n    folium.CircleMarker(\n        location = [lat[i], long[i]],\n        #color = 'red',\n        #fill_color = 'yellow',\n        radius = 3,\n        icon=folium.Icon(icon='info-sign', color=\"red\")\n    ).add_to(m)\n    \nm","87c285c6":"del sample\ndel temp_df","c331321d":"temp_df = data[['room_type', 'price']]","1b55e5bb":"bar = temp_df['room_type'].value_counts()\nfig = plt.figure(figsize = (15, 5))\n\nfig.add_subplot(1,2,1)\nsns.barplot(bar.index, bar.values)\nplt.grid(linestyle = \":\")\n\nfig.add_subplot(1,2,2)\nsns.barplot(bar.index, bar.values \/ temp_df.shape[0])\nplt.grid(linestyle = \":\")\n\nplt.show()","b5b76d9e":"# price distribution among different type of options\nplt.figure(figsize = (16, 5))\nsns.distplot(np.log1p(temp_df[temp_df['room_type'] == 'Entire home\/apt']['price']), label = \"Entire home\/apt\", hist = False)\nsns.distplot(np.log1p(temp_df[temp_df['room_type'] == 'Private room']['price']), label = \"Private room\", hist = False)\nsns.distplot(np.log1p(temp_df[temp_df['room_type'] == 'Shared room']['price']), label = \"Shared room\", hist = False)\nsns.distplot(np.log1p(temp_df[temp_df['room_type'] == 'Hotel room']['price']), label = \"Hotel room\", hist = False)\nsns.distplot(np.log1p(temp_df['price']))\nplt.grid(linestyle = \":\")\nplt.show()","2ce48075":"del temp_df","3ae77805":"# How price influence with room type and good neighbourhood","0815a667":"temp_df = data[['neighbourhood', 'room_type', 'price']]","4d974c1c":"temp_df['imp_areas'] = temp_df['neighbourhood'].apply(return_areas)","cfd73f52":"mean_intersection = pd.pivot_table(index = temp_df['imp_areas'], columns = temp_df['room_type'], \n                                   data = temp_df, fill_value = 0, aggfunc = np.mean)\n\nmedian_intersection = pd.pivot_table(index = temp_df['imp_areas'], columns = temp_df['room_type'], \n                                   data = temp_df, fill_value = 0, aggfunc = np.median)","a5be7d21":"fig = plt.figure(figsize = (16, 5))\n\nfig.add_subplot(1,2,1)\nsns.heatmap(mean_intersection, annot = True, fmt = 'g')\nplt.xticks(ticks = [0.5, 1.5, 2.5, 3.5], labels = [\"Entire home\/apt\", 'Hotel room', 'Private room', 'Shared room'], rotation = 45)\nplt.xlabel('Room Type')\nplt.ylabel(\"Rating of the Neighbourhood\")\n\nfig.add_subplot(1,2,2)\nsns.heatmap(median_intersection, annot = True, fmt = 'g')\nplt.xticks(ticks = [0.5, 1.5, 2.5, 3.5], labels = [\"Entire home\/apt\", 'Hotel room', 'Private room', 'Shared room'], rotation = 45)\nplt.xlabel('Room Type')\nplt.ylabel(\"Rating of the Neighbourhood\")\n\nplt.show()","cb329a6c":"del temp_df","0c19c8ed":"# How the prices variate with respect to the minimum no of nights","6b1aabac":"data['minimum_nights'].isnull().sum()","dc7378d9":"print(\"Min no of days in minimum nights : \", data['minimum_nights'].min())\nprint(\"Max no of days in minimum nights : \", data['minimum_nights'].max())\nprint(\"Mean no of days in minimum nights : \", data['minimum_nights'].mean())\nprint(\"Std no of days in minimum nights : \", data['minimum_nights'].std())","de8622ce":"# how many records have minimum nights = 100000000\ndata[data['minimum_nights'] == 100000000]","f6275c3f":"temp_df = data[['minimum_nights', 'room_type', 'price', 'neighbourhood']]\ntemp_df = temp_df[temp_df['minimum_nights'] != 100000000]","f6b9c673":"print(\"Min no of days in minimum nights : \", temp_df['minimum_nights'].min())\nprint(\"Max no of days in minimum nights : \", temp_df['minimum_nights'].max())\nprint(\"Mean no of days in minimum nights : \",temp_df['minimum_nights'].mean())\nprint(\"Std no of days in minimum nights : \", temp_df['minimum_nights'].std())","d2adba9b":"# quantile from 0 to 100\nnp.quantile(temp_df['minimum_nights'], np.arange(0, 1.1, 0.1))","ae26b445":"# quantile from 90 to 100\nnp.quantile(temp_df['minimum_nights'], np.arange(0.9, 1.01, 0.01))","c1c6f6e3":"# quantile from 95 to 100\nnp.quantile(temp_df['minimum_nights'], np.arange(0.95, 1.0, 0.01))","635b6020":"# quantile from 99 to 100\nnp.quantile(temp_df['minimum_nights'], np.arange(0.99, 1.0, 0.001))","e8af8806":"temp_df = temp_df[temp_df['minimum_nights'] <= 366]","953886da":"print(\"Min no of days in minimum nights : \", temp_df['minimum_nights'].min())\nprint(\"Max no of days in minimum nights : \", temp_df['minimum_nights'].max())\nprint(\"Mean no of days in minimum nights : \",temp_df['minimum_nights'].mean())\nprint(\"Std no of days in minimum nights : \", temp_df['minimum_nights'].std())","5ef00403":"fig = plt.figure(figsize = (16, 5))\n\nfig.add_subplot(1,2,1)\nsns.distplot(temp_df['minimum_nights'])\nplt.grid(linestyle = \":\")\n\nfig.add_subplot(1,2,2)\nsns.distplot(np.log1p(temp_df['minimum_nights']))\nplt.grid(linestyle = \":\")\n\nplt.show()","8bd9ec64":"# minimum nights distribution among different type of options\nplt.figure(figsize = (16, 5))\nsns.distplot(temp_df[temp_df['room_type'] == 'Entire home\/apt']['minimum_nights'], label = \"Entire home\/apt\", hist = False)\nsns.distplot(temp_df[temp_df['room_type'] == 'Private room']['minimum_nights'], label = \"Private room\", hist = False)\nsns.distplot(temp_df[temp_df['room_type'] == 'Shared room']['minimum_nights'], label = \"Shared room\", hist = False)\nsns.distplot(temp_df[temp_df['room_type'] == 'Hotel room']['minimum_nights'], label = \"Hotel room\", hist = False)\nsns.distplot(temp_df['minimum_nights'], label = 'Overall')\nplt.grid(linestyle = \":\")\nplt.legend()\nplt.title(\"Minimum Nights distribution among different types of room type options\")\nplt.show()","d356fc61":"# minimum nights distribution among different type of options\nplt.figure(figsize = (16, 5))\nsns.distplot(np.log1p(temp_df[temp_df['room_type'] == 'Entire home\/apt']['minimum_nights']), label = \"Entire home\/apt\", hist = False)\nsns.distplot(np.log1p(temp_df[temp_df['room_type'] == 'Private room']['minimum_nights']), label = \"Private room\", hist = False)\nsns.distplot(np.log1p(temp_df[temp_df['room_type'] == 'Shared room']['minimum_nights']), label = \"Shared room\", hist = False)\nsns.distplot(np.log1p(temp_df[temp_df['room_type'] == 'Hotel room']['minimum_nights']), label = \"Hotel room\", hist = False)\nsns.distplot(np.log1p(temp_df['minimum_nights']), label = 'Overall')\nplt.grid(linestyle = \":\")\nplt.legend()\nplt.title(\"Minimum Nights distribution among different types of room type options\")\nplt.show()","c6f1f8e8":"fig = plt.figure(figsize = (16, 5))\n\nfig.add_subplot(1,2,1)\nsns.boxplot(x = temp_df['room_type'], y = temp_df['minimum_nights'])\n\nfig.add_subplot(1,2,2)\nsns.violinplot(x = temp_df['room_type'], y = temp_df['minimum_nights'])\n\nplt.show()","af51b545":"plt.figure(figsize = (15, 6))\nsns.scatterplot(temp_df['minimum_nights'], temp_df['price'])\nplt.grid(linestyle = \":\")\nplt.show()","35af8a5d":"temp_df['minimum_nights_bins'] = pd.cut(temp_df['minimum_nights'], bins = [0, 50, 100, 150, 200, 250, 300, 350, 400])","d5e161cc":"min_nights = pd.pivot_table(index = temp_df['minimum_nights_bins'], \n                            columns = temp_df['room_type'], \n                            data = temp_df,\n                            aggfunc = np.mean).iloc[:, :4]\n\nmean_price = pd.pivot_table(index = temp_df['minimum_nights_bins'], \n                            columns = temp_df['room_type'], \n                            data = temp_df,\n                            aggfunc = np.mean).iloc[:, 4:]","d90eda87":"plt.figure(figsize = (15, 5))\nsns.heatmap(min_nights, annot = True, fmt = 'g')\nplt.xticks(ticks = [0.5, 1.5, 2.5, 3.5], labels = [\"Entire home\/apt\", 'Hotel room', 'Private room', 'Shared room'])\nplt.xlabel('Room type')\nplt.title('Average no of days for different type of room options found in listings')\nplt.show()","69c6a7ad":"plt.figure(figsize = (15, 5))\nsns.heatmap(mean_price, annot = True, fmt = 'g')\nplt.xticks(ticks = [0.5, 1.5, 2.5, 3.5], labels = [\"Entire home\/apt\", 'Hotel room', 'Private room', 'Shared room'])\nplt.xlabel('Room type')\nplt.title('Average Price for different type of room options found in listings')\nplt.show()","af8eb6e1":"del temp_df","0944b95f":"temp_df = data[['number_of_reviews', 'last_review', 'reviews_per_month', 'price', 'room_type']]","b3ef87ce":"temp_df = temp_df[~temp_df.isnull().any(1)]","76438da1":"temp_df['last_review'] = pd.to_datetime(temp_df['last_review'])","071f1b68":"# Number of Reviews\n\nfig = plt.figure(figsize = (16, 5))\n\nfig.add_subplot(1,2,1)\nsns.distplot(temp_df['number_of_reviews'])\n\nfig.add_subplot(1,2,2)\nsns.distplot(np.log1p(temp_df['number_of_reviews']))\n\nplt.show()","ddc706ad":"temp_df['last_review_year'] = temp_df['last_review'].map(lambda x: x.year)\ntemp_df['last_review_month'] = temp_df['last_review'].map(lambda x: x.month)\ntemp_df['last_review_day'] = temp_df['last_review'].map(lambda x: x.day)\ntemp_df['last_review_dayofWeek'] = temp_df['last_review'].map(lambda x: x.dayofweek)\ntemp_df['last_review_dayofYear'] = temp_df['last_review'].map(lambda x: x.dayofyear)\ntemp_df['last_review_weekofYear'] = temp_df['last_review'].map(lambda x: x.weekofyear)\ntemp_df['last_review_week'] = temp_df['last_review'].map(lambda x: x.week)\ntemp_df['last_review_daysofMonth'] = temp_df['last_review'].map(lambda x: x.days_in_month)","cd265bbe":"# How number of reviews affect the price of listings\nplt.figure(figsize = (16, 5))\nsns.scatterplot(temp_df['number_of_reviews'], temp_df['price'])","53d7ba2b":"# Lets see if we can find out some pattern in the last review","a97374af":"year_mean = temp_df.groupby('last_review_year')['price'].agg(['count', 'min', 'max', 'mean', 'std', 'median'])\nmonth_mean = temp_df.groupby('last_review_month')['price'].agg(['count', 'min', 'max', 'mean', 'std', 'median'])\nday_mean = temp_df.groupby('last_review_day')['price'].agg(['count', 'min', 'max', 'mean', 'std', 'median'])\nweek_mean = temp_df.groupby('last_review_week')['price'].agg(['count', 'min', 'max', 'mean', 'std', 'median'])","874a2d17":"fig = go.Figure(\n    data = [\n        go.Bar(x = year_mean.index, y = year_mean['mean'], name = 'Mean'),\n        go.Bar(x = year_mean.index, y = year_mean['median'], name = 'Median'),\n        go.Bar(x = year_mean.index, y = year_mean['std'], name = 'Std'),\n    ]\n)\n\nfig.update_layout(barmode ='group', \n                  plot_bgcolor = 'white',\n                  title = \"Statistics of Price with respect to the Year of Last Review\",\n                  xaxis_title = \"Year\",\n                  yaxis_title = 'Price',\n                  legend_title = 'Statistics')\nfig","38ac83aa":"fig = go.Figure(\n    data = [\n        go.Bar(x = week_mean.index, y = week_mean['mean'], name = 'Mean'),\n        go.Bar(x = week_mean.index, y = week_mean['median'], name = 'Median'),\n        go.Bar(x = week_mean.index, y = week_mean['std'], name = 'Std'),\n    ]\n)\n\nfig.update_layout(barmode ='group', \n                  plot_bgcolor = 'white',\n                  title = \"Statistics of Price with respect to the week of the Year of Last Review\",\n                  xaxis_title = \"Week\",\n                  yaxis_title = 'Price',\n                  legend_title = 'Statistics')\nfig","f999c4d3":"fig = go.Figure(\n    data = [\n        go.Bar(x = month_mean.index, y = month_mean['mean'], name = 'Mean'),\n        go.Bar(x = month_mean.index, y = month_mean['median'], name = 'Median'),\n        go.Bar(x = month_mean.index, y = month_mean['std'], name = 'Std'),\n    ]\n)\n\nfig.update_layout(barmode ='group', \n                  plot_bgcolor = 'white',\n                  title = \"Statistics of Price with respect to the Month of the Year of Last Review\",\n                  xaxis_title = \"Month\",\n                  yaxis_title = 'Price',\n                  legend_title = 'Statistics')\nfig","fddd52fd":"fig = go.Figure(\n    data = [\n        go.Bar(x = day_mean.index, y = day_mean['mean'], name = 'Mean'),\n        go.Bar(x = day_mean.index, y = day_mean['median'], name = 'Median'),\n        go.Bar(x = day_mean.index, y = day_mean['std'], name = 'Std'),\n    ]\n)\n\nfig.update_layout(barmode ='group', \n                  plot_bgcolor = 'white',\n                  title = \"Statistics of Price with respect to the Day of the Month of Last Review\",\n                  xaxis_title = \"Day\",\n                  yaxis_title = 'Price',\n                  legend_title = 'Statistics')\nfig","164a9301":"rooms = temp_df.groupby('room_type')['number_of_reviews'].agg(['count', 'mean', 'median'])","aec2fb59":"from plotly.subplots import make_subplots\n\nlabels = rooms.index.tolist()\ncolors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen']\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=labels, values=rooms['count'].values.tolist(), name=\"Counts\", hole = 0.3),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=rooms['mean'].values.tolist(), name=\"Mean Values\", hole = 0.3),\n              1, 2)\n\nfig.update_layout(title = \"Percentage Share of Room Types\", \n                  legend_title = \"Room Type\",\n                  annotations=[\n                      dict(text='Count', x=0.18, y=0.5, font_size=20, showarrow=False),\n                      dict(text='%age', x=0.82, y=0.5, font_size=20, showarrow=False)]\n                 )\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))","6aa8227b":"fig = plt.figure(figsize = (16, 5))\n\nfig.add_subplot(1,2,1)\nsns.distplot(temp_df['reviews_per_month'])\n\nfig.add_subplot(1,2,2)\nsns.distplot(np.log1p(temp_df['reviews_per_month']))","6000dd49":"fig = plt.figure(figsize = (16, 5))\n\nfig.add_subplot(1,2,1)\nsns.boxplot(temp_df['reviews_per_month'])\n\nfig.add_subplot(1,2,2)\nsns.violinplot(temp_df['reviews_per_month'])","47fe82a2":"fig = plt.figure(figsize = (16, 5))\n\nfig.add_subplot(1,2,1)\nsns.boxplot(x = temp_df['room_type'], y = temp_df['reviews_per_month'])\n\nfig.add_subplot(1,2,2)\nsns.violinplot(x = temp_df['room_type'], y = temp_df['reviews_per_month'])","f1cf2338":"plt.figure(figsize = (16, 5))\nsns.scatterplot(temp_df['reviews_per_month'], temp_df['price'])\nplt.show()","aef05567":"temp_df = data[['host_id', 'room_type', 'minimum_nights', 'availability_365', 'price']]","b60c2067":"temp_df['not_availability_365'] = 365 - temp_df['availability_365']","99b3c07b":"# let us consider that the feature \"available_365\" means that out of 365 days how many days the listing is available\n# there are many listings which are not available throughout the year","431b5c41":"not_available = temp_df[(temp_df['availability_365'] == 0) & (temp_df['minimum_nights'] > 0)]\navailable = temp_df[temp_df['availability_365'] > 0]","ad07e3fa":"labels = not_available['room_type'].value_counts().index.tolist()\nvalues = not_available['room_type'].value_counts().values.tolist()\n\ncolors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen']\nfig = go.Figure(\n    data = [\n        go.Pie(labels = labels, values = values, hole = 0.3)\n    ]\n)\nfig.update_layout(title = \"Percentage Share of Room Types which are not available throughout Year\", \n                  legend_title = \"Room Type\")\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.show()","e59054f7":"rooms = available.groupby('room_type')['availability_365'].agg(['count', 'mean', 'median', 'std'])","c1389234":"fig = go.Figure(\n    data = [\n        go.Bar(x = rooms.index, y = rooms['mean'], name = 'Mean'),\n        go.Bar(x = rooms.index, y = rooms['median'], name = 'Median'),\n        go.Bar(x = rooms.index, y = rooms['std'], name = 'Std'),\n    ]\n)\n\nfig.update_layout(barmode ='group', \n                  plot_bgcolor = 'white',\n                  title = \"Statistics of Availability with respect to the Room type options\",\n                  xaxis_title = \"Room Type\",\n                  yaxis_title = 'Availability',\n                  legend_title = 'Statistics')\nfig","7c65d333":"fig = plt.figure(figsize = (16, 5))\n\nfig.add_subplot(1,2,1)\nsns.boxplot(x = temp_df['room_type'], y = temp_df['availability_365'])\n\nfig.add_subplot(1,2,2)\nsns.violinplot(x = temp_df['room_type'], y = temp_df['availability_365'])","9775d58d":"corr = temp_df[['minimum_nights', 'availability_365', 'price']].corr()\nplt.figure(figsize = (8,5))\nsns.heatmap(corr, annot = True, fmt = 'g')\nplt.yticks(rotation = 0)\nplt.show()","3bdd92a1":"# Lets see how city affects the price of listings","8962b965":"temp_df = data[['neighbourhood', 'room_type', 'city', 'price']]","c230aca3":"city = temp_df['city'].value_counts()\n\nplt.figure(figsize = (16,5))\nsns.barplot(city.index, city.values)\nplt.xticks(rotation = 90)\nplt.xlabel('City')\nplt.ylabel(\"Frequency\")\nplt.title(\"Frequency distribution of City over all the records\")\nplt.show()","b552b32c":"plt.figure(figsize = (22, 4))\nsns.heatmap(pd.crosstab(temp_df['room_type'], temp_df['city']), annot = True, fmt = 'd')","53c81df1":"# lets see the average price of different options available at different cities","379b08f0":"plt.figure(figsize = (12, 10))\npivot = pd.pivot_table(index = temp_df['city'], columns = temp_df['room_type'], aggfunc = np.mean, data = temp_df)\nsns.heatmap(pivot, annot = True, fmt = 'g')\nplt.xticks(ticks = [0.5, 1.5, 2.5, 3.5], labels = [\"Entire home\/apt\", 'Hotel room', 'Private room', 'Shared room'])\nplt.show()","cabbbef0":"# Price distribution among the cities in Overall Dataset\ncity = temp_df.groupby('city')['price'].agg(['mean', 'median', 'std'])","b5809764":"fig = go.Figure(\n    data = [\n        go.Bar(x = city.index, y = city['mean'], name = 'Mean'),\n        go.Bar(x = city.index, y = city['median'], name = 'Median'),\n        go.Bar(x = city.index, y = city['std'], name = 'Std'),\n    ]\n)\n\nfig.update_layout(barmode ='group', \n                  plot_bgcolor = 'white',\n                  title = \"Statistics of Price with respect to the City\",\n                  xaxis_title = \"City\",\n                  yaxis_title = 'Price',\n                  legend_title = 'Statistics')\nfig","cf247140":"temp_df['imp_areas'] = temp_df['neighbourhood'].apply(return_areas)","cdbed456":"pivot = pd.pivot_table(data = temp_df, index = temp_df['city'], columns = temp_df['imp_areas'], aggfunc = np.mean)\nplt.figure(figsize = (12, 10))\nsns.heatmap(pivot, annot = True, fmt = 'g')\nplt.xticks(ticks = [0.5, 1.5, 2.5, 3.5, 4.5], labels = [0, 1, 2, 3, 4])\nplt.xlabel(\"Neighbourhood rating\")\nplt.ylabel(\"City\")\nplt.show()","ce2907de":"- The above plots show the scenario of distribution of room types and the average percentage of reviews given to the room types.\n- Although the \"Entire home\/apt\" has 69% of share in terms of records count, only 45.56% of all people have reviewed for them.\n- The percentage of reviews given for the room types does not depend on the no of records present for that perticular room type","21c6ed74":"- Ratings of the neighbourhoods go from 0 to 4 where 0 is the lowest and 4 being the highest.\n- From the above heatmaps we can see that the most priced options are those which have a neighbourhood rating of 4 and the listings are of Entire home\/apt","9e262761":"- From the above heatmap we can assume that a better neighbourhood goes for a better price than from having a flashy name\n- The prices are highest around places which have 4 most frequent occuring places in the neighbourhood","1198a8aa":"- After looking at the above figures there not much of a pattern, the reviews are given at random.","d8ac857c":"## neighbourhood column","3beda684":"## host_name column","fd1cc548":"## room_type column","0432cef8":"## last_review, number_of_reviews, reviews_per_month columns","a002c839":"- The Price distribution of listings by group or Non-Individuals are similar as that of Overall Price Distribution\n- The Price distribution of listings by Individuals are also similar but the curve is more smoother.","db6f6590":"- We cannot see much relation of number of reviews with respect to the price.","28728231":"now we have some reasonable number to proceed with our analysis","3c3acf75":"## neighbourhood_group column","a3ef5613":"## host_id column","90105c58":"- Now we got some reasonable numbers but 1250 \/ 365 == approx 3.4 years\n- There are not many people who are going to rent a place for 3.4 years, so we will count it out as an outlier as well.\n- So now to completely avoid these outliers we will take the values only within 0 - 99 quantile range","abbbd8fc":"- Most of the records belong to New York City, Los Angeles, Hawaii, but within them most records tends to be for Entire Home\/Apt and Private room.","deb5ab3f":"## price column","20314a4f":"## name and neighbourhood columns","850d2147":"- There is only one records which has 100000000 number in minimum nights, therefore we can consider it as an outlier.","6ba44a73":"- The short term stay based listings tends to be more costlier than the long term stays.","2203971d":"## neighbourhood and room_type columns","604dab5b":"- There are many Null values in \"neighbourhood_group\" \n- The \"last_review\" and \"reviews_per_month\" shows presence of null values in similar pattern\n- name and host_name have a few null values","7c8e80de":"- The 99.9th quantile is found to be 91, so will ignore any value which is more than 365 for minimum nights","3630e72a":"## availability_365 column","5dd238fc":"- we can see that most of the values are in between 1 to 100 and some little bumps at around 250 and 350","58cf3673":"## city column","322c8750":"- Los Angeles with the best neighbourhood rating has the highest average pricing among all the listings","7bc54bd2":"## reviews_per_month column","891aaca9":"- More than 80% of the listings belong to Individual listings, while less than 20% of the listings belong to Groups or Non-Individuals","8a4d1a3a":"## minimum_nights column","1e26486e":"## latitude and longitude columns","2ea4757f":"## name column","294c27ed":"- A large no of listings tends to give offers for less than 10 days based on above boxplot and violinplot.\n- The Private room and Entire home\/apt being the most popular choice for short term as well as long term stays.\n- There are less listings for Hotel rooms for long stays.\n- The Shared rooms are a lot from people who want to stay somewhere around 50-60 days","fa377609":"- Both minimum_nights and availability_365 are not much useful with respect to price"}}