{"cell_type":{"e21fa023":"code","f1cdf244":"code","16e0555c":"code","e8d7a727":"code","da2ba964":"code","30320a4d":"code","7b246132":"code","c4476e43":"code","98be6ed9":"code","52fefcec":"markdown","d5824501":"markdown","e2b697a7":"markdown","bfc65cb5":"markdown"},"source":{"e21fa023":"import numpy as np \nimport pandas as pd \nfrom pathlib import Path\nimport os\nimport PIL\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\n\nPATH = Path(\"..\/input\")\nTRAIN = PATH\/'train'\nTEST = PATH\/'test'","f1cdf244":"train_names = list({f[:36] for f in os.listdir(TRAIN)})\ntest_names = list({f[:36] for f in os.listdir(TEST)})\n\nprint(len(train_names), len(test_names))","16e0555c":"CHANNELS = np.array(['green', 'red', 'blue', 'yellow'])\nCHANNEL_CMAP = {\"green\": \"Greens\", \"red\": \"Reds\", \"blue\": \"Blues\", \"yellow\": \"Oranges\"}","e8d7a727":"def load_image(img_id, channels, img_dir, suffix='.png', size=512):\n    px = np.zeros(shape=(len(channels),size,size))\n    for i, ch in enumerate(channels):\n        fname = str(img_dir\/f'{img_id}_{ch}{suffix}')\n        im = PIL.Image.open(fname)\n        if size < 512:\n            im = im.resize((size, size))\n        px[i,:,:] = np.array(im)\n    px = np.moveaxis(px.astype(np.uint8), 0, 2)\n    return PIL.Image.fromarray(px)\n\ndef show_image(img, channels, title=\"\", subax=None, figsize=(16,5)):\n    px = np.array(img) \/ 255.\n    px = np.moveaxis(px, 2, 0)\n    if subax==None: fig, subax = plt.subplots(1, len(channels), figsize=figsize)\n    for i, ch in enumerate(channels):\n        subax[i].imshow(px[i], cmap=CHANNEL_CMAP[ch])\n        if i == 0: subax[i].set_title(str(title))\n\ndef save_img(img_id, img, ch, path, suffix=\".png\", save=True):\n    fname = str(path\/f'{img_id}_{ch}{suffix}')\n    if save:\n        img.save(fname)\n    return fname\n\ndef make_dir(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)","da2ba964":"img_id = train_names[0]\nchannels = CHANNELS\nimg = load_image(img_id, CHANNELS, TRAIN, size=299)\nshow_image(img, channels)","30320a4d":"make_dir(\"tmp\")\nchannels = CHANNELS\nsave_channel = \"\".join([ch[0] for ch in channels]);\n\nfname = f'tmp\/{img_id}_{save_channel}.png'\nprint(\"Saving to\", fname)\n\nimg.save(fname)\nimg_read = PIL.Image.open(fname)\nprint(\"Same images\", np.allclose(img, img_read))\nprint(\"image shape\", np.array(img_read).shape)","7b246132":"channels = CHANNELS[[0, 1, 3]]","c4476e43":"save_channel = \"\".join([ch[0] for ch in channels]);\nmake_dir(f\"test_{save_channel}\")\n# Kaggle doesn't seem to create folder, but output files are visible\n# Running for just 10 test imags\nfor img_id in tqdm(test_names[0:5]):\n    img = load_image(img_id, channels, TEST, size=512)\n    fname = f'test_{save_channel}\/{img_id}_{save_channel}.png'\n    img.save(fname)","98be6ed9":"save_channel = \"\".join([ch[0] for ch in channels]);\nmake_dir(f\"train_{save_channel}\")\n# Kaggle doesn't seem to create folder, but output files are visible\n# Running for just 10 train imags\nfor img_id in tqdm(train_names[0:5]):\n    img = load_image(img_id, channels, TRAIN, size=512)\n    fname = f'train_{save_channel}\/{img_id}_{save_channel}.png'\n    img.save(fname)","52fefcec":"### choose channels","d5824501":"## Sanity check","e2b697a7":"## Combine test images","bfc65cb5":"## Combine train images"}}