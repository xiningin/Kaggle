{"cell_type":{"06f3f908":"code","2513f8ea":"code","f401a8fb":"code","aea44c91":"code","714b5976":"code","78aeb53d":"markdown","c0bff31e":"markdown","c1ba17df":"markdown"},"source":{"06f3f908":"# thx for import: kernel by Juli\u00e1n Peller\n\nimport os\nimport json\nimport numpy as np\nimport pandas as pd\nfrom pandas.io.json import json_normalize\n\ndef load_df(csv_path='..\/input\/train.csv', nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    \n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     dtype={'fullVisitorId': 'str'}, # Important!!\n                     nrows=nrows)\n    \n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df\n\ndf_train = load_df()\ndf_test = load_df(\"..\/input\/test.csv\")","2513f8ea":"# compute rate and conditional revenue on test data:\ndf_train['totals.transactionRevenue']=df_train['totals.transactionRevenue'].astype(float)\ntrain=pd.DataFrame()\ntrain['target']=np.log1p(df_train.groupby('fullVisitorId')['totals.transactionRevenue'].sum())\nprint('Explicit')\nprint('Cases: '+str((train.target>0).mean())+', Conditional Mean: '+str(train[train.target>0].target.mean()))","f401a8fb":"# compute rate and conditional mean through rmse:\nn=len(train)\ny0=np.round(np.sqrt(((train.target-0)**2).mean()),4)\ny1=np.round(np.sqrt(((train.target-1)**2).mean()),4)\na=2*y0**2\/(y0**2-y1**2+1)\nm=n*y0**2\/a**2\nprint('Implicit')\nprint('Cases: '+str(m\/n)+', Conditional Mean: '+str(a))","aea44c91":"# get leaderboard rmse for x=1\n# submission=pd.read_csv('..\/input\/sample_submission.csv',index_col=[0])\n# submission['PredictedLogRevenue']=1\n# submission.to_csv('submission1.csv')\n# this actually returns a leaderboard rmse of 1.9529","714b5976":"n=0.3*len(df_test)\ny0=1.7804\ny1=1.9529\na=2*y0**2\/(y0**2-y1**2+1)\nm=n*y0**2\/a**2\nprint('Implicit on Public Leaderboard')\nprint('Cases: '+str(m\/n)+', Conditional Mean: '+str(a))","78aeb53d":"Appears to be fit for purpose... let's turn to the public leaderboard data.\nWe already have the all-zeroes benchmark. Let's check the rmse of another constant and compute implicit figures.","c0bff31e":"**...On Training and Public Leaderboard**\n\n...kind of a low-hanging fruit, but since I didn't find it anywhere else here we go.\n\nInteresting that the all zeroes benchmark gives such different results on training and public leaderboard data.  I'd like to compare the rate of positive revenue cases and the conditional mean revenue of those, between training and public leaderboard data. On the public leaderboard data these have to be computed indirectly through rmse like so:\n\n- The target is nearly dichotomous having values 0 and values around the conditional mean revenue of clients with positive revenues.\n- Say we predict a fixed value x as revenue for all clients, then rmse is equal to y=sqrt(m\/n*a^2-2*m\/n*)a*x+x^2), where a is the conditional mean revenue and m is the number of clients with positive revenues.\n- To compute m and a we need two pairs of values (x,y), for the public leaderboard e.g. we are already given the pair (0 , 1.7804) for the all zeroes benchmark.\n\nI'll check validity of this approach on the training data, and then compute rate and mean implicitly on the public leaderboard data.","c1ba17df":"Ok, maybe not that surprising. The reason for the difference in the performance of the all zeroes benchmark is the diminuished revenue rate. The product of both should be close to the best performance by a constant prediction. Maybe one could check the mean prediction and shift accordingly to improve a model... depends on  the type of public\/private split of the test data."}}