{"cell_type":{"3cbcc4bd":"code","c1c49b5e":"code","88cd72bb":"code","ec733ea9":"code","aaebe374":"code","41dd1a7c":"code","a8a1657e":"code","e840d0b7":"code","73d45520":"code","6b7f6b36":"code","b25956a1":"code","8a6d6196":"code","a55516d5":"code","d4416013":"code","b26863f0":"code","dffa411f":"code","47c6a88f":"code","f54e166e":"code","4b6cc4ad":"code","2544a45a":"code","f60fbe71":"code","27916ee8":"code","d95aefb5":"code","96466cb5":"code","ad93b97c":"code","c4db7472":"code","782df6d1":"code","b3f6296c":"code","f8fe4cd0":"code","d4fec87b":"code","64a14d11":"code","3632aa6b":"markdown","cc399be0":"markdown","73be6a05":"markdown","671bd01c":"markdown","55e6f279":"markdown","c716575a":"markdown","67598dad":"markdown","14619571":"markdown","02708ecc":"markdown","1e798016":"markdown","56d780a2":"markdown","961b8f92":"markdown","70365338":"markdown","f7b5de55":"markdown","86469d98":"markdown","d56b1bca":"markdown","80ac2b4a":"markdown","63bb7502":"markdown"},"source":{"3cbcc4bd":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport cufflinks as cf\nfrom scipy import stats\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\ninit_notebook_mode(connected=True)\ncf.go_offline()","c1c49b5e":"df1 = pd.read_csv(\"\/kaggle\/input\/food-prices-in-turkey\/train.csv\")\ndf2 = pd.read_csv(\"\/kaggle\/input\/food-prices-in-turkey\/test.csv\")\ndf1.head()","88cd72bb":"df = pd.concat([df1,df2],axis=0)","ec733ea9":"df.describe()","aaebe374":"df.info()","41dd1a7c":"df.isnull().sum()","a8a1657e":"df.duplicated().sum()","e840d0b7":"df.shape","73d45520":"df['ProductName'].value_counts()","6b7f6b36":"cols_to_repalce =  df['ProductName'].value_counts()[df['ProductName'].value_counts()<50].keys()\ndf['ProductName'].replace(cols_to_repalce ,['others' for i in range(6)],inplace=True)\ndf['ProductName'].value_counts()['others']","b25956a1":"product = df['ProductName'].value_counts(ascending=True)\npx.bar(product)","8a6d6196":"place = df['Place'].value_counts(ascending=True)\npx.bar(place)","a55516d5":"year = df['Year'].value_counts(ascending=True)\npx.bar(year)","d4416013":"px.histogram(df,x=\"ProductId\")","b26863f0":"px.imshow(df.corr())","dffa411f":"df1 = df.drop(['ProductId','UmId'],axis=1)","47c6a88f":"df1","f54e166e":"df2 = pd.get_dummies(df1[['Place', 'ProductName', 'UmName']])\ndf2","4b6cc4ad":"df3 = pd.concat([df2, df[['Month', 'Year', 'Price']]], axis=1)\ndf3","2544a45a":"x = df3.drop('Price',axis=True)\ny = df3['Price']","f60fbe71":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state = 42)","27916ee8":"from sklearn.preprocessing import MinMaxScaler\nms = MinMaxScaler()\nms.fit_transform(x_train)\nms.transform(x_test)","d95aefb5":"x_train.shape, x_test.shape","96466cb5":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import r2_score","ad93b97c":"lin_reg = LinearRegression()\nlin_reg.fit(x_train,y_train)\ny_pred = lin_reg.predict(x_test)\n\nlin_acc=r2_score(y_test,lin_reg.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(r2_score(y_train,lin_reg.predict(x_train))*100))\nprint(\"Test Set Accuracy:\"+str(r2_score(y_test,lin_reg.predict(x_test))*100))","c4db7472":"d_reg = DecisionTreeRegressor()\nd_reg.fit(x_train,y_train)\ny_pred = d_reg.predict(x_test)\n\nd_acc=r2_score(y_test,d_reg.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(r2_score(y_train,d_reg.predict(x_train))*100))\nprint(\"Test Set Accuracy:\"+str(r2_score(y_test,d_reg.predict(x_test))*100))","782df6d1":"r_reg = RandomForestRegressor()\nr_reg.fit(x_train,y_train)\ny_pred = r_reg.predict(x_test)\n\nr_acc=r2_score(y_test,r_reg.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(r2_score(y_train,r_reg.predict(x_train))*100))\nprint(\"Test Set Accuracy:\"+str(r2_score(y_test,r_reg.predict(x_test))*100))","b3f6296c":"k_reg = KNeighborsRegressor()\nk_reg.fit(x_train,y_train)\ny_pred = k_reg.predict(x_test)\n\nk_acc=r2_score(y_test,k_reg.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(r2_score(y_train,k_reg.predict(x_train))*100))\nprint(\"Test Set Accuracy:\"+str(r2_score(y_test,k_reg.predict(x_test))*100))","f8fe4cd0":"s_reg = SVR()\ns_reg.fit(x_train,y_train)\ny_pred = s_reg.predict(x_test)\n\ns_acc=r2_score(y_test,s_reg.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(r2_score(y_train,s_reg.predict(x_train))*100))\nprint(\"Test Set Accuracy:\"+str(r2_score(y_test,s_reg.predict(x_test))*100))","d4fec87b":"models = pd.DataFrame({\n    'Model': ['Linear regression','Decision tree regression','RandomForestRegressor','KNeighborsRegressor','SVR'],\n    'Score': [ lin_acc,d_acc, r_acc, k_acc, s_acc]\n})\n\nmodels.sort_values(by = 'Score', ascending = False)","64a14d11":"px.bar(models,x='Model',y='Score',color='Model')","3632aa6b":"# <center> <div class=\"alert alert-block alert-info\">  <span style=\"color:crimson;\"> Done <\/center>","cc399be0":"# <center> <div class=\"alert-block alert-info alert\"> <span style=\"color:crimson;\"> Exploratory Data Analysis <\/center>","73be6a05":"![image.png](attachment:657713fb-788b-4eba-9c9e-d647ee272b67.png)","671bd01c":"# Data Cleaning\n**Removing duplicates and checking null values**","55e6f279":"**Observations**","c716575a":"# <center> <div class=\"alert alert-block alert-info\"> <span style=\"color:crimson;\"> Turkey Food Prices Predicting <\/cenetr>","67598dad":"# <center> <div class=\"alert alert-block alert-info\">  <span style=\"color:crimson;\"> Models <\/center>","14619571":"**LinearRegression**","02708ecc":"# <center> <div class=\"alert alert-block alert-info\">  <span style=\"color:crimson;\"> Data Preprocessing <\/center>","1e798016":"* The given prices are between year of 2013 to 2021\n* Minimum price is 0.25 and Maximum price is 166.90","56d780a2":"* collecting values less than 50 and making it as other","961b8f92":"**<center>Any Suggestions are accepted<\/center>**","70365338":"**DecisionTreeRegressor**","f7b5de55":"**Support vector**","86469d98":"**KNeighborsRegressor**","d56b1bca":"**Descriptive Statistics**","80ac2b4a":"**RandomForestRegressor**","63bb7502":"* more data in 2019 and 2018 years"}}